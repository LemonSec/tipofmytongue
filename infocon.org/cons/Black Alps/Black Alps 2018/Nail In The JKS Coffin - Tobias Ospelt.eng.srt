1
00:00:02,719 --> 00:00:08,910
so thanks for<font color="#CCCCCC"> having</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> if I'm not</font>

2
00:00:06,720 --> 00:00:11,549
<font color="#E5E5E5">talking clearly that's because my beard</font>

3
00:00:08,910 --> 00:00:15,150
is too big probably and<font color="#CCCCCC"> its</font><font color="#E5E5E5"> disturbs to</font>

4
00:00:11,549 --> 00:00:18,240
microphone so I'm gonna talk<font color="#CCCCCC"> about nail</font>

5
00:00:15,150 --> 00:00:20,610
in the cello<font color="#CCCCCC"> keystore coffin so those of</font>

6
00:00:18,240 --> 00:00:22,320
<font color="#E5E5E5">you who</font><font color="#CCCCCC"> are already</font><font color="#E5E5E5"> freight that</font><font color="#CCCCCC"> I'm</font>

7
00:00:20,610 --> 00:00:24,960
going<font color="#E5E5E5"> to show Java code don't worry</font>

8
00:00:22,320 --> 00:00:30,360
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> no Java code in my presentation</font>

9
00:00:24,960 --> 00:00:31,740
so everyone should<font color="#CCCCCC"> be fine</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> about</font>

10
00:00:30,360 --> 00:00:34,530
<font color="#E5E5E5">me and us</font>

11
00:00:31,740 --> 00:00:37,320
so<font color="#E5E5E5"> I'm actually my name is Tobias</font><font color="#CCCCCC"> Oswalt</font>

12
00:00:34,530 --> 00:00:39,720
<font color="#E5E5E5">and I'm</font><font color="#CCCCCC"> working as a security</font><font color="#E5E5E5"> analyst as</font>

13
00:00:37,320 --> 00:00:42,840
a pen tester at<font color="#CCCCCC"> Mott zero</font>

14
00:00:39,720 --> 00:00:45,329
we're a<font color="#E5E5E5"> small company but hopefully a</font>

15
00:00:42,840 --> 00:00:49,380
little bit known in<font color="#E5E5E5"> Switzerland by now</font>

16
00:00:45,329 --> 00:00:52,620
we're doing<font color="#E5E5E5"> it for quite</font><font color="#CCCCCC"> a long time</font><font color="#E5E5E5"> we</font>

17
00:00:49,380 --> 00:00:56,010
have a very<font color="#E5E5E5"> specialized group of people</font>

18
00:00:52,620 --> 00:00:59,129
<font color="#CCCCCC">working at</font><font color="#E5E5E5"> Mott zero I've been doing a</font>

19
00:00:56,010 --> 00:01:03,329
lot<font color="#CCCCCC"> of different research so I love to</font>

20
00:00:59,130 --> 00:01:05,759
<font color="#CCCCCC">use a proxy</font><font color="#E5E5E5"> a write extension for it</font><font color="#CCCCCC"> I'm</font>

21
00:01:03,329 --> 00:01:08,340
also doing a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Android and AFL</font>

22
00:01:05,759 --> 00:01:09,959
fuzzing and Java fuzzing and<font color="#E5E5E5"> my next</font>

23
00:01:08,340 --> 00:01:13,020
talks can probably<font color="#E5E5E5"> going to be about</font>

24
00:01:09,959 --> 00:01:18,329
Java fuzzing but this one is about the

25
00:01:13,020 --> 00:01:20,579
different topic so material as I said we

26
00:01:18,329 --> 00:01:22,249
do security analysis what's a little<font color="#E5E5E5"> bit</font>

27
00:01:20,579 --> 00:01:27,149
special<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> we also do a lot of</font>

28
00:01:22,249 --> 00:01:28,708
hardware<font color="#E5E5E5"> analysis not only software and</font>

29
00:01:27,149 --> 00:01:33,659
the content I'm<font color="#CCCCCC"> going to talk about</font>

30
00:01:28,709 --> 00:01:37,469
<font color="#E5E5E5">today is the purpose of and mechanics of</font>

31
00:01:33,659 --> 00:01:40,920
key store files<font color="#E5E5E5"> so why do</font><font color="#CCCCCC"> we use key</font>

32
00:01:37,469 --> 00:01:44,098
store files at all and just to say it

33
00:01:40,920 --> 00:01:46,649
<font color="#CCCCCC">already</font><font color="#E5E5E5"> so Java key store that's</font>

34
00:01:44,099 --> 00:01:49,049
actually a name for the API in Java so

35
00:01:46,649 --> 00:01:52,649
we have different<font color="#CCCCCC"> kind of key store</font>

36
00:01:49,049 --> 00:01:55,319
types but the<font color="#E5E5E5"> entire API is called Java</font>

37
00:01:52,649 --> 00:01:59,279
key store<font color="#E5E5E5"> but one of</font><font color="#CCCCCC"> the types the</font>

38
00:01:55,319 --> 00:02:02,840
<font color="#E5E5E5">oldest type is also called jks which is</font>

39
00:01:59,279 --> 00:02:05,899
the acronym so kks is the file type and

40
00:02:02,840 --> 00:02:08,550
<font color="#CCCCCC">java key store is the entire API and</font>

41
00:02:05,899 --> 00:02:10,050
<font color="#E5E5E5">Java key store has more than just check</font>

42
00:02:08,550 --> 00:02:12,540
yes

43
00:02:10,050 --> 00:02:16,040
so we<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> key store types as well</font>

44
00:02:12,540 --> 00:02:19,769
<font color="#E5E5E5">and the purpose and the mechanics of</font>

45
00:02:16,040 --> 00:02:23,549
<font color="#CCCCCC">java key store and and especially</font><font color="#E5E5E5"> that</font>

46
00:02:19,770 --> 00:02:25,650
file type take<font color="#E5E5E5"> s then we're gonna look</font>

47
00:02:23,550 --> 00:02:27,660
at the weaknesses<font color="#CCCCCC"> sent</font><font color="#E5E5E5"> cracking so</font><font color="#CCCCCC"> i'm</font>

48
00:02:25,650 --> 00:02:29,910
where the security conference here<font color="#E5E5E5"> can</font>

49
00:02:27,660 --> 00:02:33,299
only look at<font color="#CCCCCC"> the file format i also</font>

50
00:02:29,910 --> 00:02:35,100
tried to<font color="#CCCCCC"> break it</font><font color="#E5E5E5"> and at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> i'm</font>

51
00:02:33,300 --> 00:02:37,610
<font color="#E5E5E5">going to talk</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit about the</font>

52
00:02:35,100 --> 00:02:41,460
recommendations and what you can do<font color="#CCCCCC"> so</font>

53
00:02:37,610 --> 00:02:44,310
<font color="#CCCCCC">to start with I hope you're a little bit</font>

54
00:02:41,460 --> 00:02:47,040
familiar<font color="#CCCCCC"> with private keys and public</font>

55
00:02:44,310 --> 00:02:50,670
keys and how as a metric crypto works as

56
00:02:47,040 --> 00:02:52,530
a small refresher<font color="#CCCCCC"> so there's a private</font>

57
00:02:50,670 --> 00:02:54,269
key<font color="#CCCCCC"> so you generate keys for yourself</font>

58
00:02:52,530 --> 00:02:56,820
you<font color="#E5E5E5"> have a product private key and a</font>

59
00:02:54,270 --> 00:02:58,530
public<font color="#CCCCCC"> key and the private key is</font><font color="#E5E5E5"> called</font>

60
00:02:56,820 --> 00:03:00,540
<font color="#CCCCCC">private because</font><font color="#E5E5E5"> you want to</font><font color="#CCCCCC"> keep it</font>

61
00:02:58,530 --> 00:03:04,080
private and secret<font color="#E5E5E5"> and not give it to</font>

62
00:03:00,540 --> 00:03:06,239
<font color="#E5E5E5">anybody else</font><font color="#CCCCCC"> so not what adopt it so as</font>

63
00:03:04,080 --> 00:03:08,490
you<font color="#E5E5E5"> see here in the middle</font><font color="#CCCCCC"> of the</font>

64
00:03:06,240 --> 00:03:11,370
picture<font color="#CCCCCC"> using you</font><font color="#E5E5E5"> see beginning PGP</font>

65
00:03:08,490 --> 00:03:14,310
private key<font color="#CCCCCC"> so other</font><font color="#E5E5E5"> ones did a mistake</font>

66
00:03:11,370 --> 00:03:16,709
<font color="#E5E5E5">and publish their PGP private key on</font>

67
00:03:14,310 --> 00:03:18,330
their<font color="#E5E5E5"> website</font><font color="#CCCCCC"> so this is not how it</font>

68
00:03:16,709 --> 00:03:20,250
works<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> want to publish</font><font color="#CCCCCC"> your</font>

69
00:03:18,330 --> 00:03:24,630
<font color="#E5E5E5">private keys you want to keep them</font>

70
00:03:20,250 --> 00:03:28,140
secret<font color="#E5E5E5"> within your organization so a</font>

71
00:03:24,630 --> 00:03:30,180
symmetric crypto<font color="#E5E5E5"> s set consists of a</font>

72
00:03:28,140 --> 00:03:32,579
public key and<font color="#CCCCCC"> a private</font><font color="#E5E5E5"> key and as a</font>

73
00:03:30,180 --> 00:03:37,020
<font color="#E5E5E5">user I want to store them</font><font color="#CCCCCC"> somehow right</font>

74
00:03:32,580 --> 00:03:38,850
but I want to store<font color="#E5E5E5"> them securely so I</font>

75
00:03:37,020 --> 00:03:40,890
put them<font color="#E5E5E5"> into a keystore file so that's</font>

76
00:03:38,850 --> 00:03:45,090
<font color="#E5E5E5">just one file on our hard disk in the</font>

77
00:03:40,890 --> 00:03:48,208
end and put it on the hard disk<font color="#CCCCCC"> now to</font>

78
00:03:45,090 --> 00:03:51,900
make<font color="#CCCCCC"> it secure</font><font color="#E5E5E5"> I want to encrypt</font><font color="#CCCCCC"> this</font>

79
00:03:48,209 --> 00:03:54,510
<font color="#CCCCCC">data that</font><font color="#E5E5E5"> is in that file and I do that</font>

80
00:03:51,900 --> 00:03:56,610
with<font color="#CCCCCC"> the password so I</font><font color="#E5E5E5"> I supply a</font>

81
00:03:54,510 --> 00:03:59,070
password<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses some encryption</font>

82
00:03:56,610 --> 00:04:01,709
mechanism and my private key and public

83
00:03:59,070 --> 00:04:03,510
keys are safe<font color="#CCCCCC"> so without knowing the</font>

84
00:04:01,709 --> 00:04:08,160
password<font color="#E5E5E5"> you</font><font color="#CCCCCC"> should be able</font><font color="#E5E5E5"> to access</font>

85
00:04:03,510 --> 00:04:10,290
those keys<font color="#E5E5E5"> now that's the use of you in</font>

86
00:04:08,160 --> 00:04:14,010
Java<font color="#E5E5E5"> you have different</font><font color="#CCCCCC"> options as said</font>

87
00:04:10,290 --> 00:04:16,168
before<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> jks as a format which is</font>

88
00:04:14,010 --> 00:04:19,019
<font color="#CCCCCC">the oldest format but we</font><font color="#E5E5E5"> also have an</font>

89
00:04:16,168 --> 00:04:21,298
entire list of other formats you<font color="#CCCCCC"> can use</font>

90
00:04:19,019 --> 00:04:23,219
now I'm going to talk<font color="#CCCCCC"> about the first</font>

91
00:04:21,298 --> 00:04:26,940
<font color="#CCCCCC">one today</font><font color="#E5E5E5"> and the weaknesses of the</font>

92
00:04:23,220 --> 00:04:30,030
all this one<font color="#CCCCCC"> to JK s now JK s is</font>

93
00:04:26,940 --> 00:04:32,820
<font color="#E5E5E5">actually used nearly everywhere where a</font>

94
00:04:30,030 --> 00:04:35,219
symmetric crypto is used so it's a

95
00:04:32,820 --> 00:04:40,770
<font color="#E5E5E5">default format in Java before</font><font color="#CCCCCC"> version 10</font>

96
00:04:35,220 --> 00:04:43,920
<font color="#E5E5E5">and it's also in all Android versions so</font>

97
00:04:40,770 --> 00:04:45,870
it's used a lot<font color="#CCCCCC"> so just to tell you</font>

98
00:04:43,920 --> 00:04:47,780
where it's used for<font color="#E5E5E5"> example that this is</font>

99
00:04:45,870 --> 00:04:50,340
<font color="#E5E5E5">just a very small list of examples</font>

100
00:04:47,780 --> 00:04:53,909
<font color="#CCCCCC">Oracle databases store their keyless</font>

101
00:04:50,340 --> 00:04:54,390
keys in<font color="#E5E5E5"> J Case Files</font><font color="#CCCCCC"> Apache Tomcat as</font>

102
00:04:53,910 --> 00:04:56,280
well

103
00:04:54,390 --> 00:04:59,789
and when you do<font color="#E5E5E5"> a new Android app you</font>

104
00:04:56,280 --> 00:05:02,640
<font color="#CCCCCC">also</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> assign</font><font color="#E5E5E5"> your app and that</font>

105
00:04:59,790 --> 00:05:05,730
you do with the key<font color="#E5E5E5"> so whenever you have</font>

106
00:05:02,640 --> 00:05:08,719
to<font color="#E5E5E5"> publish in a new Android app</font><font color="#CCCCCC"> JK's</font>

107
00:05:05,730 --> 00:05:12,060
file will be created for<font color="#CCCCCC"> you</font>

108
00:05:08,720 --> 00:05:14,760
so basically wherever there is<font color="#E5E5E5"> public</font>

109
00:05:12,060 --> 00:05:18,990
key cryptography<font color="#E5E5E5"> and Java</font><font color="#CCCCCC"> you will find</font>

110
00:05:14,760 --> 00:05:21,990
these check s<font color="#E5E5E5"> files now let's look</font><font color="#CCCCCC"> at an</font>

111
00:05:18,990 --> 00:05:25,910
example<font color="#E5E5E5"> Android</font><font color="#CCCCCC"> studio so it allows us</font>

112
00:05:21,990 --> 00:05:28,770
<font color="#CCCCCC">to</font><font color="#E5E5E5"> use a UI to generate this</font><font color="#CCCCCC"> JK's files</font>

113
00:05:25,910 --> 00:05:31,200
the first thing it<font color="#E5E5E5"> will ask is the</font>

114
00:05:28,770 --> 00:05:34,229
<font color="#E5E5E5">keystore</font><font color="#CCCCCC"> Paso where on your hard disk</font>

115
00:05:31,200 --> 00:05:36,240
will you store<font color="#E5E5E5"> this file</font><font color="#CCCCCC"> so super simply</font>

116
00:05:34,230 --> 00:05:39,540
<font color="#E5E5E5">and easy then there is the keystore</font>

117
00:05:36,240 --> 00:05:42,180
password which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the password as we</font>

118
00:05:39,540 --> 00:05:43,530
said before<font color="#E5E5E5"> then we have a</font><font color="#CCCCCC"> Kealia so we</font>

119
00:05:42,180 --> 00:05:46,110
can give our key a name

120
00:05:43,530 --> 00:05:49,890
fine with me and then<font color="#E5E5E5"> there is also the</font>

121
00:05:46,110 --> 00:05:51,720
key password now now we should<font color="#CCCCCC"> be a</font>

122
00:05:49,890 --> 00:05:53,700
<font color="#E5E5E5">little bit confused right I mean why are</font>

123
00:05:51,720 --> 00:05:55,470
they two different passwords there's the

124
00:05:53,700 --> 00:05:57,510
keystore password and then there's also

125
00:05:55,470 --> 00:06:01,169
a key password so now we have this

126
00:05:57,510 --> 00:06:04,260
<font color="#CCCCCC">situation now</font><font color="#E5E5E5"> let's take a small</font>

127
00:06:01,169 --> 00:06:06,599
shortcut<font color="#E5E5E5"> and I will tell you what this</font>

128
00:06:04,260 --> 00:06:08,880
is<font color="#CCCCCC"> about so actually this is</font><font color="#E5E5E5"> what's the</font>

129
00:06:06,600 --> 00:06:11,130
first design mistake that it the

130
00:06:08,880 --> 00:06:13,440
keystore password is not used for

131
00:06:11,130 --> 00:06:17,219
<font color="#E5E5E5">encryption it's only used for integrity</font>

132
00:06:13,440 --> 00:06:20,669
<font color="#E5E5E5">checks so this password is incorporated</font>

133
00:06:17,220 --> 00:06:22,710
into a checksum<font color="#CCCCCC"> to check if somebody</font>

134
00:06:20,669 --> 00:06:24,570
modified the keystore file but it

135
00:06:22,710 --> 00:06:28,359
doesn't mean it will<font color="#CCCCCC"> protect to</font><font color="#E5E5E5"> your</font>

136
00:06:24,570 --> 00:06:31,370
private key or<font color="#E5E5E5"> your</font><font color="#CCCCCC"> public key so</font>

137
00:06:28,360 --> 00:06:33,530
nobody tells you<font color="#E5E5E5"> that the first password</font>

138
00:06:31,370 --> 00:06:37,280
<font color="#E5E5E5">is super unimportant and the second one</font>

139
00:06:33,530 --> 00:06:41,960
is super important<font color="#E5E5E5"> right so here here we</font>

140
00:06:37,280 --> 00:06:44,419
are we just<font color="#CCCCCC"> get</font><font color="#E5E5E5"> this UI and nobody tells</font>

141
00:06:41,960 --> 00:06:46,849
<font color="#E5E5E5">me what to do which password</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to</font>

142
00:06:44,419 --> 00:06:49,310
<font color="#CCCCCC">choose securely and which one is not of</font>

143
00:06:46,849 --> 00:06:52,400
importance<font color="#E5E5E5"> now this is actually the</font>

144
00:06:49,310 --> 00:06:55,789
<font color="#E5E5E5">first really strange design decision</font>

145
00:06:52,400 --> 00:06:57,469
<font color="#E5E5E5">right now</font><font color="#CCCCCC"> okay let's go back let's</font>

146
00:06:55,789 --> 00:06:59,599
forget about this keystore password<font color="#E5E5E5"> then</font>

147
00:06:57,469 --> 00:07:02,990
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> not used for encryption</font><font color="#CCCCCC"> so we have</font>

148
00:06:59,599 --> 00:07:04,729
a key password<font color="#E5E5E5"> but then well when I</font>

149
00:07:02,990 --> 00:07:09,610
looked<font color="#E5E5E5"> at this there's</font><font color="#CCCCCC"> another second</font>

150
00:07:04,729 --> 00:07:12,289
thing<font color="#CCCCCC"> that they did</font><font color="#E5E5E5"> design really not</font>

151
00:07:09,610 --> 00:07:14,870
according to<font color="#E5E5E5"> best practices</font><font color="#CCCCCC"> I would say</font>

152
00:07:12,289 --> 00:07:17,539
what they did is only<font color="#E5E5E5"> encrypt</font><font color="#CCCCCC"> the</font>

153
00:07:14,870 --> 00:07:20,330
private key<font color="#CCCCCC"> so the public key is</font>

154
00:07:17,539 --> 00:07:23,568
<font color="#E5E5E5">actually stored in plain text</font><font color="#CCCCCC"> so it</font>

155
00:07:20,330 --> 00:07:27,680
depends<font color="#E5E5E5"> on what you do</font><font color="#CCCCCC"> with these</font><font color="#E5E5E5"> keys</font>

156
00:07:23,569 --> 00:07:30,169
<font color="#CCCCCC">but in</font><font color="#E5E5E5"> general I would as a user I would</font>

157
00:07:27,680 --> 00:07:32,719
like to<font color="#CCCCCC"> impose them because why should</font>

158
00:07:30,169 --> 00:07:36,620
anybody be able<font color="#E5E5E5"> to extract the public</font>

159
00:07:32,719 --> 00:07:39,710
key from my keystore file<font color="#E5E5E5"> but well okay</font>

160
00:07:36,620 --> 00:07:41,719
let's rename<font color="#CCCCCC"> this key passwords</font><font color="#E5E5E5"> to</font>

161
00:07:39,710 --> 00:07:45,680
private key password<font color="#E5E5E5"> because it doesn't</font>

162
00:07:41,719 --> 00:07:47,240
protect<font color="#E5E5E5"> public key right so now we have</font>

163
00:07:45,680 --> 00:07:49,099
this private<font color="#E5E5E5"> key password used</font><font color="#CCCCCC"> for</font>

164
00:07:47,240 --> 00:07:54,050
<font color="#E5E5E5">Krypton and we have an encrypted private</font>

165
00:07:49,099 --> 00:07:58,938
key<font color="#CCCCCC"> so far so good but this</font><font color="#E5E5E5"> is a really</font>

166
00:07:54,050 --> 00:08:00,740
strange design decision again now you

167
00:07:58,939 --> 00:08:03,199
will probably already know what's coming

168
00:08:00,740 --> 00:08:05,960
now<font color="#E5E5E5"> we want to know what the black box</font>

169
00:08:03,199 --> 00:08:08,629
is in<font color="#CCCCCC"> the middle because somehow the</font>

170
00:08:05,960 --> 00:08:10,549
<font color="#E5E5E5">Java developers</font><font color="#CCCCCC"> design</font><font color="#E5E5E5"> something here</font>

171
00:08:08,629 --> 00:08:11,089
and it all it is<font color="#E5E5E5"> already a little bit</font>

172
00:08:10,550 --> 00:08:15,409
fishy

173
00:08:11,089 --> 00:08:17,419
so let's look look at<font color="#E5E5E5"> it in detail so</font>

174
00:08:15,409 --> 00:08:20,839
the encryption<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the private key is</font>

175
00:08:17,419 --> 00:08:23,628
actually<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> simple it's a it's a</font>

176
00:08:20,839 --> 00:08:25,969
private key<font color="#CCCCCC"> in clear text that is XOR</font>

177
00:08:23,629 --> 00:08:28,129
<font color="#CCCCCC">with something called</font><font color="#E5E5E5"> key stream and</font>

178
00:08:25,969 --> 00:08:31,129
then you get<font color="#E5E5E5"> the encrypted private key</font>

179
00:08:28,129 --> 00:08:34,219
now I hope every one<font color="#CCCCCC"> of you knows</font><font color="#E5E5E5"> what</font>

180
00:08:31,129 --> 00:08:37,339
XOR is XOR is<font color="#E5E5E5"> just a simple operation</font>

181
00:08:34,219 --> 00:08:39,890
<font color="#E5E5E5">and I sorry I can't explain to you if</font>

182
00:08:37,339 --> 00:08:41,300
you<font color="#E5E5E5"> don't know but the only thing you</font>

183
00:08:39,890 --> 00:08:43,640
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> know about XOR at the</font>

184
00:08:41,299 --> 00:08:46,550
is<font color="#E5E5E5"> also that works the other way</font><font color="#CCCCCC"> around</font>

185
00:08:43,640 --> 00:08:48,529
so<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing private key X or key</font>

186
00:08:46,550 --> 00:08:50,359
stream<font color="#E5E5E5"> and get to encrypt private key</font>

187
00:08:48,529 --> 00:08:53,240
<font color="#E5E5E5">you can also do it the other way</font><font color="#CCCCCC"> around</font>

188
00:08:50,360 --> 00:08:55,430
<font color="#CCCCCC">and take</font><font color="#E5E5E5"> the encrypt the private key</font><font color="#CCCCCC"> XOR</font>

189
00:08:53,240 --> 00:08:58,459
it with the key stream and then get the

190
00:08:55,430 --> 00:09:01,699
<font color="#E5E5E5">decrypted private key now the question</font>

191
00:08:58,459 --> 00:09:04,160
is what is this key stream right<font color="#E5E5E5"> that's</font>

192
00:09:01,700 --> 00:09:07,640
the<font color="#E5E5E5"> only thing we don't know for now</font><font color="#CCCCCC"> so</font>

193
00:09:04,160 --> 00:09:12,620
let's<font color="#CCCCCC"> look at what what the</font><font color="#E5E5E5"> Java</font>

194
00:09:07,640 --> 00:09:15,220
developers<font color="#E5E5E5"> decided to design so the key</font>

195
00:09:12,620 --> 00:09:17,930
stream generation is pretty simple again

196
00:09:15,220 --> 00:09:20,750
then invented the new password based

197
00:09:17,930 --> 00:09:23,060
encryption scheme using sha-1<font color="#E5E5E5"> now you</font>

198
00:09:20,750 --> 00:09:27,290
will say well sha-1 this is so old

199
00:09:23,060 --> 00:09:29,149
well<font color="#CCCCCC"> Java is old</font><font color="#E5E5E5"> so if if you were</font>

200
00:09:27,290 --> 00:09:33,019
<font color="#E5E5E5">talking about the primitives we have to</font>

201
00:09:29,149 --> 00:09:34,970
keep in mind<font color="#CCCCCC"> that this was invented a</font>

202
00:09:33,019 --> 00:09:37,600
long<font color="#E5E5E5"> time ago so using sha-1 was</font>

203
00:09:34,970 --> 00:09:40,790
probably a reasonable choice back then

204
00:09:37,600 --> 00:09:43,550
<font color="#E5E5E5">the problem is more that it it is still</font>

205
00:09:40,790 --> 00:09:47,719
the default nowadays so why did we keep

206
00:09:43,550 --> 00:09:50,029
it this long so they do a<font color="#E5E5E5"> puzzle based</font>

207
00:09:47,720 --> 00:09:53,810
encryption and the generation of the key

208
00:09:50,029 --> 00:09:57,740
stream is very<font color="#CCCCCC"> simple again so we have</font>

209
00:09:53,810 --> 00:10:00,020
<font color="#CCCCCC">two sha-1</font><font color="#E5E5E5"> it's a it's a hash algorithm</font>

210
00:09:57,740 --> 00:10:02,990
and we take the<font color="#E5E5E5"> password so that</font><font color="#CCCCCC"> private</font>

211
00:10:00,020 --> 00:10:05,899
key<font color="#E5E5E5"> password and we</font><font color="#CCCCCC"> can concatenate the</font>

212
00:10:02,990 --> 00:10:07,730
<font color="#E5E5E5">IV now the IV it's just another</font>

213
00:10:05,899 --> 00:10:10,160
parameter stored in the file in

214
00:10:07,730 --> 00:10:12,920
<font color="#CCCCCC">plaintext so</font><font color="#E5E5E5"> we can take we can read out</font>

215
00:10:10,160 --> 00:10:16,310
his<font color="#CCCCCC"> IV and then generate this first</font>

216
00:10:12,920 --> 00:10:18,800
block a now the next block is just

217
00:10:16,310 --> 00:10:21,560
<font color="#E5E5E5">generated by using the private key</font>

218
00:10:18,800 --> 00:10:24,170
password plus a so we just calculate in

219
00:10:21,560 --> 00:10:27,380
the last block<font color="#E5E5E5"> and so on and so</font><font color="#CCCCCC"> on with</font>

220
00:10:24,170 --> 00:10:31,910
all<font color="#CCCCCC"> the blocks</font><font color="#E5E5E5"> and in the end we</font>

221
00:10:27,380 --> 00:10:36,620
concatenate these blocks together<font color="#E5E5E5"> so we</font>

222
00:10:31,910 --> 00:10:39,140
get a key stream of variable<font color="#E5E5E5"> lengths if</font>

223
00:10:36,620 --> 00:10:41,980
that was too quick<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> this is the</font>

224
00:10:39,140 --> 00:10:43,540
exact same thing<font color="#E5E5E5"> inches limit</font>

225
00:10:41,980 --> 00:10:46,450
different pictures so<font color="#CCCCCC"> we have a key</font>

226
00:10:43,540 --> 00:10:48,939
<font color="#E5E5E5">entry at the</font><font color="#CCCCCC"> top which has an IV</font><font color="#E5E5E5"> 20</font>

227
00:10:46,450 --> 00:10:51,130
bytes we can read it out<font color="#CCCCCC"> we have a</font>

228
00:10:48,940 --> 00:10:53,680
variable lengths encrypted key<font color="#E5E5E5"> it at the</font>

229
00:10:51,130 --> 00:10:56,530
top as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> and we can generate the key</font>

230
00:10:53,680 --> 00:11:00,489
stream we take the password plus the IV

231
00:10:56,530 --> 00:11:04,660
<font color="#E5E5E5">from the key</font><font color="#CCCCCC"> entry</font><font color="#E5E5E5"> at the top and we</font>

232
00:11:00,490 --> 00:11:07,570
generate the first<font color="#E5E5E5"> block we</font><font color="#CCCCCC"> can then use</font>

233
00:11:04,660 --> 00:11:09,459
<font color="#E5E5E5">the first block to generate the second</font>

234
00:11:07,570 --> 00:11:12,880
<font color="#E5E5E5">one and so on and we can XOR them</font>

235
00:11:09,460 --> 00:11:16,270
together to get decrypt the key now<font color="#CCCCCC"> I</font>

236
00:11:12,880 --> 00:11:21,820
tell<font color="#CCCCCC"> you that there is</font><font color="#E5E5E5"> a not so obvious</font>

237
00:11:16,270 --> 00:11:23,980
weakness here can somebody see it so I

238
00:11:21,820 --> 00:11:26,710
didn't see it either<font color="#CCCCCC"> when I looked at it</font>

239
00:11:23,980 --> 00:11:29,860
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's actually something you learn</font>

240
00:11:26,710 --> 00:11:34,410
probably<font color="#CCCCCC"> in your IT security classes at</font>

241
00:11:29,860 --> 00:11:38,470
<font color="#CCCCCC">university I mean I</font><font color="#E5E5E5"> learned it the least</font>

242
00:11:34,410 --> 00:11:40,500
so I searched<font color="#E5E5E5"> around a little bit on the</font>

243
00:11:38,470 --> 00:11:43,480
internet what people say about<font color="#E5E5E5"> this</font>

244
00:11:40,500 --> 00:11:45,310
about this<font color="#E5E5E5"> mechanism and actually there</font>

245
00:11:43,480 --> 00:11:48,730
<font color="#CCCCCC">is a website</font><font color="#E5E5E5"> called crypto</font><font color="#CCCCCC"> cents and</font>

246
00:11:45,310 --> 00:11:50,560
they wrote only<font color="#CCCCCC"> one sha-1 application is</font>

247
00:11:48,730 --> 00:11:53,860
required to derive the first key<font color="#E5E5E5"> stream</font>

248
00:11:50,560 --> 00:11:55,500
<font color="#CCCCCC">byte since they're encoded</font><font color="#E5E5E5"> keys contain</font>

249
00:11:53,860 --> 00:11:58,150
a lot of<font color="#E5E5E5"> structure in their first bite</font>

250
00:11:55,500 --> 00:12:00,370
make it makes a dictionary based cracker

251
00:11:58,150 --> 00:12:02,740
highly efficient<font color="#E5E5E5"> so what they saying is</font>

252
00:12:00,370 --> 00:12:04,900
that we only<font color="#E5E5E5"> need to do one</font><font color="#CCCCCC"> shot one not</font>

253
00:12:02,740 --> 00:12:07,420
the entire block<font color="#CCCCCC"> to in and to generate</font>

254
00:12:04,900 --> 00:12:10,720
the entire key stream<font color="#E5E5E5"> so I thought wow</font>

255
00:12:07,420 --> 00:12:13,300
this<font color="#E5E5E5"> is super cool but where's</font><font color="#CCCCCC"> the proof</font>

256
00:12:10,720 --> 00:12:16,570
of concept<font color="#CCCCCC"> so where's this</font><font color="#E5E5E5"> implemented</font>

257
00:12:13,300 --> 00:12:19,660
and is that even feasible<font color="#E5E5E5"> in practice so</font>

258
00:12:16,570 --> 00:12:21,160
I researched<font color="#E5E5E5"> and researched but none of</font>

259
00:12:19,660 --> 00:12:23,439
the password crackers out there<font color="#E5E5E5"> were</font>

260
00:12:21,160 --> 00:12:28,180
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> this and I didn't know back</font><font color="#E5E5E5"> then</font>

261
00:12:23,440 --> 00:12:30,700
<font color="#E5E5E5">if this was feasible so I tried to do a</font>

262
00:12:28,180 --> 00:12:35,410
<font color="#E5E5E5">proof of concept</font><font color="#CCCCCC"> just to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> that I can</font>

263
00:12:30,700 --> 00:12:38,020
crack<font color="#CCCCCC"> jks files easily and basically</font><font color="#E5E5E5"> our</font>

264
00:12:35,410 --> 00:12:42,339
approach or our algorithm to crack

265
00:12:38,020 --> 00:12:44,800
passwords<font color="#E5E5E5"> is that we generate this first</font>

266
00:12:42,340 --> 00:12:46,470
block the very beginning with the

267
00:12:44,800 --> 00:12:50,680
password candidate so we<font color="#E5E5E5"> get a password</font>

268
00:12:46,470 --> 00:12:55,459
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is guess 1 and then we concatenate</font>

269
00:12:50,680 --> 00:12:58,399
it with the<font color="#CCCCCC"> ie</font><font color="#E5E5E5"> we generate the sha-1</font>

270
00:12:55,459 --> 00:13:00,859
and then we can explore it with first<font color="#E5E5E5"> 20</font>

271
00:12:58,399 --> 00:13:02,480
bytes<font color="#E5E5E5"> of the encrypted key that should</font>

272
00:13:00,860 --> 00:13:05,869
give us<font color="#CCCCCC"> the first 20 bytes of the</font>

273
00:13:02,480 --> 00:13:07,670
<font color="#E5E5E5">decrypted key and then we can check</font>

274
00:13:05,869 --> 00:13:11,869
these first 20 bytes if they look like<font color="#E5E5E5"> a</font>

275
00:13:07,670 --> 00:13:14,240
<font color="#E5E5E5">private key now what does it</font><font color="#CCCCCC"> mean look</font>

276
00:13:11,869 --> 00:13:18,319
like<font color="#E5E5E5"> a private</font><font color="#CCCCCC"> key that's actually again</font>

277
00:13:14,240 --> 00:13:20,600
not a very<font color="#E5E5E5"> simple question because these</font>

278
00:13:18,319 --> 00:13:22,910
guys of crypto sense a well it's pretty

279
00:13:20,600 --> 00:13:23,990
obvious<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can do this but for me</font>

280
00:13:22,910 --> 00:13:27,740
it wasn't<font color="#CCCCCC"> obvious</font>

281
00:13:23,990 --> 00:13:32,209
so the first 20 bytes of a decrypted

282
00:13:27,740 --> 00:13:36,470
private key it's a pkcs<font color="#CCCCCC"> 8 which is a</font>

283
00:13:32,209 --> 00:13:38,748
during coding<font color="#CCCCCC"> which is a</font><font color="#E5E5E5"> s</font><font color="#CCCCCC"> +</font><font color="#E5E5E5"> 1 so these</font>

284
00:13:36,470 --> 00:13:42,800
are different<font color="#E5E5E5"> encodings or standards for</font>

285
00:13:38,749 --> 00:13:45,679
how this data is represented<font color="#E5E5E5"> and in</font>

286
00:13:42,800 --> 00:13:48,800
theory<font color="#E5E5E5"> it's actually pretty</font><font color="#CCCCCC"> simple there</font>

287
00:13:45,679 --> 00:13:57,110
should be<font color="#CCCCCC"> oh I D which is</font><font color="#E5E5E5"> 9 bytes long</font>

288
00:13:48,800 --> 00:14:00,769
somewhere<font color="#E5E5E5"> at the start now an OID</font>

289
00:13:57,110 --> 00:14:04,420
<font color="#E5E5E5">for example if we have an RSA key that</font>

290
00:14:00,769 --> 00:14:08,089
is stored then there should<font color="#E5E5E5"> be this</font>

291
00:14:04,420 --> 00:14:10,399
<font color="#E5E5E5">hexadecimal value somewhere at the start</font>

292
00:14:08,089 --> 00:14:12,470
<font color="#E5E5E5">so what we can do is we search for</font><font color="#CCCCCC"> this</font>

293
00:14:10,399 --> 00:14:15,769
<font color="#E5E5E5">Oh a key so when we get the first 20</font>

294
00:14:12,470 --> 00:14:18,049
bytes<font color="#E5E5E5"> which we hopefully successfully</font>

295
00:14:15,769 --> 00:14:21,350
decrypt it then we can search<font color="#E5E5E5"> for this</font><font color="#CCCCCC"> o</font>

296
00:14:18,049 --> 00:14:23,869
ID<font color="#E5E5E5"> and if we find it we</font><font color="#CCCCCC"> can say okay</font><font color="#E5E5E5"> I</font>

297
00:14:21,350 --> 00:14:27,110
think<font color="#E5E5E5"> I guess the right password</font><font color="#CCCCCC"> this</font>

298
00:14:23,869 --> 00:14:30,649
could be<font color="#E5E5E5"> really what we're doing here is</font>

299
00:14:27,110 --> 00:14:34,220
<font color="#CCCCCC">really decrypting a private key</font><font color="#E5E5E5"> now in</font>

300
00:14:30,649 --> 00:14:36,889
practice this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not a very</font><font color="#E5E5E5"> nice idea</font>

301
00:14:34,220 --> 00:14:39,319
because searching for the OID<font color="#E5E5E5"> is super</font>

302
00:14:36,889 --> 00:14:41,449
inefficient<font color="#E5E5E5"> and as I'm not a math</font>

303
00:14:39,319 --> 00:14:44,748
student and I'm not a file<font color="#E5E5E5"> format</font>

304
00:14:41,449 --> 00:14:47,319
specialist at it the usual<font color="#E5E5E5"> IT approach</font>

305
00:14:44,749 --> 00:14:49,610
and I just brute<font color="#E5E5E5"> force</font><font color="#CCCCCC"> State</font><font color="#E5E5E5"> so I</font>

306
00:14:47,319 --> 00:14:51,709
<font color="#E5E5E5">generated thousands and thousands of</font>

307
00:14:49,610 --> 00:14:55,519
private<font color="#E5E5E5"> keys and just looked at them</font>

308
00:14:51,709 --> 00:14:57,589
<font color="#E5E5E5">what a private key in plain text how</font>

309
00:14:55,519 --> 00:15:00,259
does<font color="#E5E5E5"> it look like the first 20 bytes and</font>

310
00:14:57,589 --> 00:15:04,399
<font color="#E5E5E5">at one point I realized there</font><font color="#CCCCCC"> is a</font>

311
00:15:00,259 --> 00:15:06,679
pattern<font color="#E5E5E5"> so I found out that 16 out of 20</font>

312
00:15:04,399 --> 00:15:09,260
bytes<font color="#E5E5E5"> at the beginning of a clear text</font>

313
00:15:06,679 --> 00:15:11,480
private key are always static

314
00:15:09,260 --> 00:15:15,290
so they<font color="#CCCCCC"> always the same so</font><font color="#E5E5E5"> for example</font>

315
00:15:11,480 --> 00:15:18,620
<font color="#E5E5E5">RSA all RSA keys in in clear-text</font>

316
00:15:15,290 --> 00:15:20,779
always start with hex<font color="#E5E5E5"> 30 then we have</font><font color="#CCCCCC"> 4</font>

317
00:15:18,620 --> 00:15:23,269
bytes<font color="#E5E5E5"> we don't really know and always</font>

318
00:15:20,779 --> 00:15:26,000
<font color="#E5E5E5">vary in not different but then we have</font>

319
00:15:23,269 --> 00:15:28,670
<font color="#E5E5E5">another 16 bytes and there are always</font>

320
00:15:26,000 --> 00:15:32,089
the same<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> we can also see this</font>

321
00:15:28,670 --> 00:15:33,949
view<font color="#CCCCCC"> o ID we saw before</font><font color="#E5E5E5"> but now we even</font>

322
00:15:32,089 --> 00:15:38,690
get more<font color="#E5E5E5"> values that are fixed and don't</font>

323
00:15:33,949 --> 00:15:43,729
change so for it<font color="#E5E5E5"> is not so obvious</font>

324
00:15:38,690 --> 00:15:46,490
weakness let's do an example<font color="#CCCCCC"> so for</font>

325
00:15:43,730 --> 00:15:48,949
<font color="#E5E5E5">those who haven't understood yet what</font>

326
00:15:46,490 --> 00:15:52,490
we're doing exactly<font color="#CCCCCC"> so with what we do</font>

327
00:15:48,949 --> 00:15:55,880
is we guess a password we calculate this

328
00:15:52,490 --> 00:15:57,680
sha-1 we XOR it with first 20 bytes of

329
00:15:55,880 --> 00:15:59,839
<font color="#E5E5E5">the encrypted key get the first 20 bytes</font>

330
00:15:57,680 --> 00:16:04,040
of the decrypted key and then just check

331
00:15:59,839 --> 00:16:06,399
if it looks something like this so this

332
00:16:04,040 --> 00:16:10,130
is our cracking algorithm to crack

333
00:16:06,399 --> 00:16:12,740
private keys<font color="#E5E5E5"> of entries</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> there is</font>

334
00:16:10,130 --> 00:16:16,070
again an optimization here<font color="#E5E5E5"> and it's the</font>

335
00:16:12,740 --> 00:16:19,910
same I told you before<font color="#E5E5E5"> about X or we can</font>

336
00:16:16,070 --> 00:16:22,130
<font color="#CCCCCC">XOR number</font><font color="#E5E5E5"> 1 with X or with 2 and then</font>

337
00:16:19,910 --> 00:16:27,279
get the decrypted keys and then check

338
00:16:22,130 --> 00:16:31,040
number 3 or we can XOR number 3 with the

339
00:16:27,279 --> 00:16:33,730
<font color="#E5E5E5">encrypted key bytes and we get something</font>

340
00:16:31,040 --> 00:16:37,790
we can compare directly<font color="#CCCCCC"> to the sha-1</font>

341
00:16:33,730 --> 00:16:40,760
calculation so in the end we end up with

342
00:16:37,790 --> 00:16:43,189
<font color="#CCCCCC">one shot one calculation and then just</font>

343
00:16:40,760 --> 00:16:47,800
check if these 20 bytes<font color="#E5E5E5"> correspond</font>

344
00:16:43,190 --> 00:16:51,470
roughly to the<font color="#E5E5E5"> pre calculated 16 bytes</font><font color="#CCCCCC"> I</font>

345
00:16:47,800 --> 00:16:54,500
then went on and asked some guys who do

346
00:16:51,470 --> 00:16:58,100
password cracking<font color="#CCCCCC"> how should</font><font color="#E5E5E5"> we do this</font>

347
00:16:54,500 --> 00:17:01,160
<font color="#CCCCCC">and we decided</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement</font><font color="#E5E5E5"> it in GPU so</font>

348
00:16:58,100 --> 00:17:05,900
graphic cards which are<font color="#E5E5E5"> much faster at</font>

349
00:17:01,160 --> 00:17:08,899
calculating sha-1 sums<font color="#E5E5E5"> and</font><font color="#CCCCCC"> enjoyably</font>

350
00:17:05,900 --> 00:17:11,589
from the<font color="#E5E5E5"> haschke team excluded the</font>

351
00:17:08,900 --> 00:17:15,230
implementation so thank you for<font color="#E5E5E5"> that and</font>

352
00:17:11,589 --> 00:17:17,839
the interesting thing<font color="#CCCCCC"> is packet is</font>

353
00:17:15,230 --> 00:17:20,030
optimized and uses a weakness in sha-1

354
00:17:17,839 --> 00:17:21,679
you can read about<font color="#E5E5E5"> it here</font><font color="#CCCCCC"> I didn't</font>

355
00:17:20,030 --> 00:17:23,839
understand the paper

356
00:17:21,680 --> 00:17:27,530
I'm happy<font color="#CCCCCC"> that it's faster than most</font>

357
00:17:23,839 --> 00:17:32,330
other crackers so we're super<font color="#E5E5E5"> fast at</font>

358
00:17:27,530 --> 00:17:34,580
cracking<font color="#CCCCCC"> jks files</font><font color="#E5E5E5"> so this is again this</font>

359
00:17:32,330 --> 00:17:38,179
cert design decision I would<font color="#E5E5E5"> say that</font>

360
00:17:34,580 --> 00:17:40,939
probably<font color="#E5E5E5"> wasn't really meant</font><font color="#CCCCCC"> to be like</font>

361
00:17:38,180 --> 00:17:46,840
<font color="#E5E5E5">this and this is the third mistake</font><font color="#CCCCCC"> that</font>

362
00:17:40,940 --> 00:17:49,460
was in<font color="#CCCCCC"> that code now for those</font><font color="#E5E5E5"> of you</font>

363
00:17:46,840 --> 00:17:53,090
who think<font color="#E5E5E5"> this was too</font><font color="#CCCCCC"> much math or a</font>

364
00:17:49,460 --> 00:17:55,070
crypto there's also a more practical

365
00:17:53,090 --> 00:17:57,290
approach<font color="#E5E5E5"> so basically you can</font><font color="#CCCCCC"> just</font>

366
00:17:55,070 --> 00:18:00,139
download my check has<font color="#CCCCCC"> pretty prepared to</font>

367
00:17:57,290 --> 00:18:03,080
our file then use this<font color="#CCCCCC"> JK's file</font>

368
00:18:00,140 --> 00:18:05,900
<font color="#E5E5E5">generate the hash file and then feed</font>

369
00:18:03,080 --> 00:18:07,580
<font color="#CCCCCC">that to hash</font><font color="#E5E5E5"> cat so if you're doing a</font>

370
00:18:05,900 --> 00:18:09,290
pen<font color="#E5E5E5"> test or something and you find a</font>

371
00:18:07,580 --> 00:18:13,399
<font color="#E5E5E5">check has filed you can start to crack</font>

372
00:18:09,290 --> 00:18:16,879
it<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> actually surprised me how</font><font color="#E5E5E5"> fast</font>

373
00:18:13,400 --> 00:18:21,770
we can do this<font color="#E5E5E5"> so during this run we</font>

374
00:18:16,880 --> 00:18:24,110
have one<font color="#CCCCCC"> nvidia</font><font color="#E5E5E5"> geforce gtx 1080 that is</font>

375
00:18:21,770 --> 00:18:29,240
on this system<font color="#E5E5E5"> and we're cracking with</font>

376
00:18:24,110 --> 00:18:32,270
that one<font color="#CCCCCC"> the type is clear</font><font color="#E5E5E5"> jks and we're</font>

377
00:18:29,240 --> 00:18:34,490
<font color="#CCCCCC">doing this</font><font color="#E5E5E5"> with roughly</font><font color="#CCCCCC"> eight thousand</font>

378
00:18:32,270 --> 00:18:37,480
million hashes per second which<font color="#CCCCCC"> means</font>

379
00:18:34,490 --> 00:18:39,800
we're roughly cracking<font color="#E5E5E5"> eight billion or</font>

380
00:18:37,480 --> 00:18:42,860
retrying<font color="#E5E5E5"> eight billion passwords per</font>

381
00:18:39,800 --> 00:18:47,720
second<font color="#CCCCCC"> on this one graphics card and</font>

382
00:18:42,860 --> 00:18:50,270
this<font color="#E5E5E5"> is actually super fast so with one</font>

383
00:18:47,720 --> 00:18:53,210
graphics card<font color="#E5E5E5"> we can try all</font>

384
00:18:50,270 --> 00:18:56,540
alphanumeric passwords of length 8 in 8

385
00:18:53,210 --> 00:18:59,570
hours so this<font color="#E5E5E5"> is super efficient</font>

386
00:18:56,540 --> 00:19:02,379
cracking and if you want to get more

387
00:18:59,570 --> 00:19:05,149
<font color="#E5E5E5">details about the implementation and</font>

388
00:19:02,380 --> 00:19:08,030
well the benchmarking and<font color="#E5E5E5"> how fast it is</font>

389
00:19:05,150 --> 00:19:13,210
<font color="#E5E5E5">and so on I wrote</font><font color="#CCCCCC"> pork or</font><font color="#E5E5E5"> tea</font><font color="#CCCCCC"> TFO</font>

390
00:19:08,030 --> 00:19:16,790
article<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it it's in number 15</font><font color="#E5E5E5"> and I</font>

391
00:19:13,210 --> 00:19:21,230
think if you read that<font color="#E5E5E5"> you will get some</font>

392
00:19:16,790 --> 00:19:23,860
more ideas<font color="#E5E5E5"> of how the cracker works so</font>

393
00:19:21,230 --> 00:19:26,120
my recommendations are very<font color="#E5E5E5"> generic</font>

394
00:19:23,860 --> 00:19:28,729
<font color="#E5E5E5">nowadays we have better key derivation</font>

395
00:19:26,120 --> 00:19:30,439
function so in the 90s<font color="#CCCCCC"> or even in the</font>

396
00:19:28,730 --> 00:19:33,930
<font color="#CCCCCC">80s I don't know exactly when it</font><font color="#E5E5E5"> was</font>

397
00:19:30,440 --> 00:19:37,380
<font color="#CCCCCC">designed</font><font color="#E5E5E5"> there was nothing like</font><font color="#CCCCCC"> a PB</font>

398
00:19:33,930 --> 00:19:41,100
<font color="#CCCCCC">- or bcrypt or</font><font color="#E5E5E5"> a script</font><font color="#CCCCCC"> or anything for</font>

399
00:19:37,380 --> 00:19:43,200
<font color="#E5E5E5">key derivation so we have visa now and</font>

400
00:19:41,100 --> 00:19:45,959
you<font color="#CCCCCC"> should obviously refactor your java</font>

401
00:19:43,200 --> 00:19:51,060
software so if you use<font color="#E5E5E5"> jackass then it's</font>

402
00:19:45,960 --> 00:19:53,850
the time<font color="#CCCCCC"> to change your</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> so I know</font>

403
00:19:51,060 --> 00:19:58,139
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is red really blunt recommendation</font>

404
00:19:53,850 --> 00:19:59,850
just<font color="#E5E5E5"> out use</font><font color="#CCCCCC"> jks but although</font><font color="#E5E5E5"> good</font>

405
00:19:58,140 --> 00:20:01,290
password will keep you<font color="#CCCCCC"> free</font>

406
00:19:59,850 --> 00:20:03,750
secret I mean even a<font color="#E5E5E5"> password cracker</font>

407
00:20:01,290 --> 00:20:08,389
cannot do<font color="#E5E5E5"> anything about passwords of</font>

408
00:20:03,750 --> 00:20:11,070
<font color="#CCCCCC">length</font><font color="#E5E5E5"> 12 and above at the moment and</font>

409
00:20:08,390 --> 00:20:13,890
obviously you should also not publish

410
00:20:11,070 --> 00:20:17,370
<font color="#E5E5E5">your JK as file so keep them secret even</font>

411
00:20:13,890 --> 00:20:19,980
if their password protected and the

412
00:20:17,370 --> 00:20:23,429
prediction is that<font color="#CCCCCC"> check s will stay for</font>

413
00:20:19,980 --> 00:20:23,940
a long time so this<font color="#CCCCCC"> is not something I</font>

414
00:20:23,430 --> 00:20:27,210
said

415
00:20:23,940 --> 00:20:29,580
but the Java<font color="#CCCCCC"> maintain a set existing key</font>

416
00:20:27,210 --> 00:20:32,610
stores will not change<font color="#E5E5E5"> so if you wrote</font>

417
00:20:29,580 --> 00:20:35,580
the<font color="#CCCCCC"> java software with</font><font color="#E5E5E5"> java 8 and you</font>

418
00:20:32,610 --> 00:20:38,580
generated key stores<font color="#E5E5E5"> then they check</font><font color="#CCCCCC"> s</font>

419
00:20:35,580 --> 00:20:40,470
and if you<font color="#E5E5E5"> update Java now it will not</font>

420
00:20:38,580 --> 00:20:42,510
change<font color="#E5E5E5"> nothing will</font><font color="#CCCCCC"> ever</font><font color="#E5E5E5"> change with</font>

421
00:20:40,470 --> 00:20:45,410
these cheeky store<font color="#E5E5E5"> files until</font><font color="#CCCCCC"> you</font>

422
00:20:42,510 --> 00:20:47,879
delete them and regenerate them so and

423
00:20:45,410 --> 00:20:50,400
key stores tend<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> long-lived so you</font>

424
00:20:47,880 --> 00:20:54,660
can<font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> a web server that</font><font color="#E5E5E5"> has</font>

425
00:20:50,400 --> 00:20:58,010
keys in it will at least<font color="#E5E5E5"> run with with</font>

426
00:20:54,660 --> 00:21:04,710
those<font color="#E5E5E5"> JK</font><font color="#CCCCCC"> as fellow check has files until</font>

427
00:20:58,010 --> 00:21:07,830
the keys expire so the alternatives

428
00:21:04,710 --> 00:21:10,080
inside of Java<font color="#CCCCCC"> if somebody is a chav a</font>

429
00:21:07,830 --> 00:21:11,699
developer just don't use<font color="#CCCCCC"> jks that's the</font>

430
00:21:10,080 --> 00:21:14,970
rule of<font color="#CCCCCC"> thumb you can</font><font color="#E5E5E5"> use anything</font>

431
00:21:11,700 --> 00:21:20,130
<font color="#CCCCCC">really just don't</font><font color="#E5E5E5"> use this default type</font>

432
00:21:14,970 --> 00:21:23,340
<font color="#E5E5E5">and probably the the wet dream of all</font>

433
00:21:20,130 --> 00:21:25,140
cryptographers is the<font color="#E5E5E5"> new</font><font color="#CCCCCC"> bc fks it's</font>

434
00:21:23,340 --> 00:21:27,840
called<font color="#E5E5E5"> it uses everything which is</font>

435
00:21:25,140 --> 00:21:30,750
<font color="#E5E5E5">standard nowadays and you would like to</font>

436
00:21:27,840 --> 00:21:34,590
use so pbkdf2<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> fifty thousand</font>

437
00:21:30,750 --> 00:21:38,300
rounds of hmx sha-512<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> uses day a</font>

438
00:21:34,590 --> 00:21:41,760
year CCM mode so that's that's<font color="#E5E5E5"> probably</font>

439
00:21:38,300 --> 00:21:44,250
really good<font color="#E5E5E5"> for standards nowadays but</font>

440
00:21:41,760 --> 00:21:46,820
bouncy castle is an<font color="#E5E5E5"> external</font><font color="#CCCCCC"> library so</font>

441
00:21:44,250 --> 00:21:49,159
you<font color="#CCCCCC"> will need fancy</font><font color="#E5E5E5"> custody</font>

442
00:21:46,820 --> 00:21:53,809
if you cannot use an excellent library

443
00:21:49,159 --> 00:21:55,399
you can<font color="#CCCCCC"> use the pkcs12</font><font color="#E5E5E5"> which is using</font>

444
00:21:53,809 --> 00:21:58,969
<font color="#CCCCCC">1,000 rounds of shaman</font>

445
00:21:55,399 --> 00:22:01,039
so one round of<font color="#CCCCCC"> sha-1 versus 1,000</font>

446
00:21:58,969 --> 00:22:03,679
rounds<font color="#E5E5E5"> of shaman which is a lot better</font>

447
00:22:01,039 --> 00:22:08,929
<font color="#E5E5E5">although</font><font color="#CCCCCC"> it's still Chauhan and Triple</font>

448
00:22:03,679 --> 00:22:13,389
<font color="#CCCCCC">DES</font><font color="#E5E5E5"> so and then also as we as I told</font>

449
00:22:08,929 --> 00:22:16,969
this or I<font color="#E5E5E5"> talked to</font><font color="#CCCCCC"> two Oracle they</font>

450
00:22:13,389 --> 00:22:18,918
<font color="#E5E5E5">changed Java so they made updates</font><font color="#CCCCCC"> and in</font>

451
00:22:16,969 --> 00:22:22,279
these<font color="#E5E5E5"> updated Java versions</font>

452
00:22:18,919 --> 00:22:25,249
now the pkcs12<font color="#E5E5E5"> is</font><font color="#CCCCCC"> fifty thousand rounds</font>

453
00:22:22,279 --> 00:22:27,529
<font color="#E5E5E5">although this part was not my research</font>

454
00:22:25,249 --> 00:22:29,809
so crypto sense did a lot of research in

455
00:22:27,529 --> 00:22:33,799
<font color="#E5E5E5">other areas as</font><font color="#CCCCCC"> well for example</font><font color="#E5E5E5"> in</font>

456
00:22:29,809 --> 00:22:36,589
pkcs12<font color="#E5E5E5"> area and they changed and they</font>

457
00:22:33,799 --> 00:22:39,549
basically said well 1000 rounds is still

458
00:22:36,589 --> 00:22:42,168
not enough<font color="#E5E5E5"> so you should</font><font color="#CCCCCC"> use more rounds</font>

459
00:22:39,549 --> 00:22:47,749
<font color="#E5E5E5">it's also the default key store type</font>

460
00:22:42,169 --> 00:22:49,519
since Java 9 so pkcs12<font color="#E5E5E5"> is now the new</font>

461
00:22:47,749 --> 00:22:52,669
type<font color="#E5E5E5"> so when you when you</font><font color="#CCCCCC"> write there</font>

462
00:22:49,519 --> 00:22:57,049
anything<font color="#E5E5E5"> now in Java 9 or 10 then you</font>

463
00:22:52,669 --> 00:22:59,899
<font color="#CCCCCC">should be much better off so thank</font><font color="#E5E5E5"> you</font>

464
00:22:57,049 --> 00:23:03,109
<font color="#E5E5E5">for attention this</font><font color="#CCCCCC"> is the first round of</font>

465
00:22:59,899 --> 00:23:08,448
questions<font color="#CCCCCC"> I would say</font><font color="#E5E5E5"> and we'll see</font>

466
00:23:03,109 --> 00:23:11,059
<font color="#E5E5E5">after that so this is</font><font color="#CCCCCC"> the basics about</font>

467
00:23:08,449 --> 00:23:14,739
<font color="#E5E5E5">kks and</font><font color="#CCCCCC"> I would like to get any</font>

468
00:23:11,059 --> 00:23:17,389
<font color="#E5E5E5">questions in if</font><font color="#CCCCCC"> they're questions</font><font color="#E5E5E5"> so far</font>

469
00:23:14,739 --> 00:23:19,849
thank you for your talk hmm<font color="#E5E5E5"> very</font>

470
00:23:17,389 --> 00:23:23,149
<font color="#CCCCCC">interesting can you</font><font color="#E5E5E5"> tell more a bit</font>

471
00:23:19,849 --> 00:23:30,739
about how the<font color="#E5E5E5"> integrity is checked yes I</font>

472
00:23:23,149 --> 00:23:44,119
will do that<font color="#CCCCCC"> later any other questions</font>

473
00:23:30,739 --> 00:23:47,179
about<font color="#E5E5E5"> I wanted to know how the IV is</font>

474
00:23:44,119 --> 00:23:52,039
generated<font color="#CCCCCC"> start the IV is just randomly</font>

475
00:23:47,179 --> 00:23:54,529
<font color="#E5E5E5">generate</font><font color="#CCCCCC"> 220 bytes random but I think</font>

476
00:23:52,039 --> 00:23:57,469
you're pretty solid<font color="#CCCCCC"> on the topic right</font>

477
00:23:54,529 --> 00:23:58,879
so that's<font color="#E5E5E5"> why because usually I know the</font>

478
00:23:57,469 --> 00:24:00,050
<font color="#E5E5E5">Swiss audience doesn't have too many</font>

479
00:23:58,879 --> 00:24:04,059
questions<font color="#E5E5E5"> so</font>

480
00:24:00,050 --> 00:24:11,360
I prepared a couple<font color="#E5E5E5"> of questions for you</font>

481
00:24:04,059 --> 00:24:13,580
so we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> we're sorry sure the other</font>

482
00:24:11,360 --> 00:24:17,090
question<font color="#E5E5E5"> was</font><font color="#CCCCCC"> actually about your screen</font>

483
00:24:13,580 --> 00:24:19,399
<font color="#CCCCCC">shot on Android studio so when you uh</font>

484
00:24:17,090 --> 00:24:21,080
<font color="#CCCCCC">when you're developing an Android</font>

485
00:24:19,400 --> 00:24:24,380
application<font color="#CCCCCC"> I'm not a very</font><font color="#E5E5E5"> good</font>

486
00:24:21,080 --> 00:24:28,580
<font color="#E5E5E5">developer</font><font color="#CCCCCC"> myself so I'm not sure</font><font color="#E5E5E5"> can you</font>

487
00:24:24,380 --> 00:24:30,679
specify<font color="#E5E5E5"> another another key</font><font color="#CCCCCC"> store than</font>

488
00:24:28,580 --> 00:24:32,689
<font color="#E5E5E5">Jake yes for Android applications</font><font color="#CCCCCC"> I</font>

489
00:24:30,679 --> 00:24:36,320
think<font color="#CCCCCC"> it only comes with Jake yes yeah</font>

490
00:24:32,690 --> 00:24:38,540
so so far you<font color="#CCCCCC"> think your luck</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> yeah</font>

491
00:24:36,320 --> 00:24:41,450
<font color="#CCCCCC">poor Android studio you were stuck you</font>

492
00:24:38,540 --> 00:24:43,790
can probably you might work around it<font color="#E5E5E5"> by</font>

493
00:24:41,450 --> 00:24:50,710
signing it all in on the command<font color="#E5E5E5"> line</font>

494
00:24:43,790 --> 00:24:54,970
<font color="#CCCCCC">you can do that yeah yeah let's see yeah</font>

495
00:24:50,710 --> 00:24:58,820
so so I prepared some questions<font color="#CCCCCC"> for you</font>

496
00:24:54,970 --> 00:25:01,610
<font color="#CCCCCC">so how do you</font><font color="#E5E5E5"> know which fingerprint to</font>

497
00:24:58,820 --> 00:25:03,470
expect<font color="#CCCCCC"> so</font><font color="#E5E5E5"> as we saw there different</font>

498
00:25:01,610 --> 00:25:06,199
fingerprints these<font color="#E5E5E5"> 20 bytes however</font>

499
00:25:03,470 --> 00:25:09,410
private key starts<font color="#E5E5E5"> it's different for</font>

500
00:25:06,200 --> 00:25:11,990
RSA and DSA and<font color="#E5E5E5"> so on so how do we know</font>

501
00:25:09,410 --> 00:25:17,990
<font color="#CCCCCC">which one which one to expect when we</font>

502
00:25:11,990 --> 00:25:20,510
crack anybody an ID yeah<font color="#E5E5E5"> so I'll repeat</font>

503
00:25:17,990 --> 00:25:23,870
<font color="#CCCCCC">it so</font><font color="#E5E5E5"> everybody can understand that so</font>

504
00:25:20,510 --> 00:25:26,929
he said well but the public key is not

505
00:25:23,870 --> 00:25:28,489
encrypted<font color="#E5E5E5"> so that's actually one thing</font>

506
00:25:26,929 --> 00:25:30,500
<font color="#CCCCCC">that helped this research because they</font>

507
00:25:28,490 --> 00:25:32,780
didn't encrypt the public key I can just

508
00:25:30,500 --> 00:25:34,850
check what algorithm is used in<font color="#CCCCCC"> public</font>

509
00:25:32,780 --> 00:25:36,800
key and then I know which<font color="#E5E5E5"> private key</font>

510
00:25:34,850 --> 00:25:39,379
fingerprint<font color="#E5E5E5"> I have to expect otherwise</font>

511
00:25:36,800 --> 00:25:41,960
<font color="#CCCCCC">this</font><font color="#E5E5E5"> will be a lot more guesswork and</font>

512
00:25:39,380 --> 00:25:45,890
and the effort<font color="#E5E5E5"> to crack will probably be</font>

513
00:25:41,960 --> 00:25:49,520
a lot higher<font color="#E5E5E5"> so we can just check in in</font>

514
00:25:45,890 --> 00:25:52,070
the public<font color="#E5E5E5"> key which is not</font><font color="#CCCCCC"> encrypted so</font>

515
00:25:49,520 --> 00:25:55,460
this was a really<font color="#E5E5E5"> really</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> question</font>

516
00:25:52,070 --> 00:25:59,149
to start<font color="#E5E5E5"> and here comes the second</font><font color="#CCCCCC"> one</font>

517
00:25:55,460 --> 00:26:02,030
so we only know 16 out of 20 bytes of a

518
00:25:59,150 --> 00:26:07,040
fingerprint<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so when we do cracking</font>

519
00:26:02,030 --> 00:26:10,990
the question marks are unknown<font color="#E5E5E5"> so how do</font>

520
00:26:07,040 --> 00:26:10,990
we<font color="#E5E5E5"> know</font><font color="#CCCCCC"> we didn't get the wrong</font><font color="#E5E5E5"> password</font>

521
00:26:18,280 --> 00:26:23,870
so he said we can just test it we can

522
00:26:21,650 --> 00:26:26,960
decrypt<font color="#E5E5E5"> the entire private key and then</font>

523
00:26:23,870 --> 00:26:31,280
check if that's<font color="#E5E5E5"> fine</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> that would</font><font color="#CCCCCC"> be</font>

524
00:26:26,960 --> 00:26:33,650
an option<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that wouldn't</font><font color="#CCCCCC"> perform very</font>

525
00:26:31,280 --> 00:26:36,530
well<font color="#CCCCCC"> they did would it</font><font color="#E5E5E5"> because we had to</font>

526
00:26:33,650 --> 00:26:40,640
we would<font color="#E5E5E5"> need to generate the entire key</font>

527
00:26:36,530 --> 00:26:42,440
<font color="#CCCCCC">stream first</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> XOR you know I</font>

528
00:26:40,640 --> 00:26:45,350
think that probabilities are audio

529
00:26:42,440 --> 00:26:48,800
celluloid<font color="#E5E5E5"> yeah exactly</font>

530
00:26:45,350 --> 00:26:53,300
so<font color="#CCCCCC"> although there are many question</font>

531
00:26:48,800 --> 00:26:55,419
marks<font color="#CCCCCC"> the probability is not</font><font color="#E5E5E5"> 100% that</font>

532
00:26:53,300 --> 00:26:57,889
we<font color="#E5E5E5"> thought the password</font><font color="#CCCCCC"> matches and</font>

533
00:26:55,420 --> 00:26:59,809
actually earlier implementations where<font color="#E5E5E5"> I</font>

534
00:26:57,890 --> 00:27:02,210
did<font color="#E5E5E5"> I didn't realize that 16 out of 20</font>

535
00:26:59,809 --> 00:27:05,480
bytes were fixed but less and<font color="#E5E5E5"> we had to</font>

536
00:27:02,210 --> 00:27:11,240
check<font color="#E5E5E5"> the entire key to decrypt properly</font>

537
00:27:05,480 --> 00:27:13,309
<font color="#E5E5E5">what what you said but then at</font><font color="#CCCCCC"> one point</font>

538
00:27:11,240 --> 00:27:20,150
we realized that<font color="#CCCCCC"> actually the</font>

539
00:27:13,309 --> 00:27:21,889
probability<font color="#E5E5E5"> is 1 to 2 ^</font><font color="#CCCCCC"> 112 20 so this</font>

540
00:27:20,150 --> 00:27:25,700
<font color="#E5E5E5">will never happen in practice you will</font>

541
00:27:21,890 --> 00:27:27,890
never get such a password<font color="#E5E5E5"> so we just</font>

542
00:27:25,700 --> 00:27:35,090
didn't implement<font color="#CCCCCC"> anything afterwards so</font>

543
00:27:27,890 --> 00:27:38,270
this just works<font color="#CCCCCC"> like it is so question</font>

544
00:27:35,090 --> 00:27:41,809
<font color="#E5E5E5">three starts with a new fact and this is</font>

545
00:27:38,270 --> 00:27:45,650
actually why this research<font color="#CCCCCC"> took</font><font color="#E5E5E5"> me so</font>

546
00:27:41,809 --> 00:27:48,710
long<font color="#E5E5E5"> so if we don't specify a private</font>

547
00:27:45,650 --> 00:27:51,530
key password then the keystore password

548
00:27:48,710 --> 00:27:54,230
is reused<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> saw for Android</font><font color="#CCCCCC"> that</font>

549
00:27:51,530 --> 00:27:56,300
it's just<font color="#E5E5E5"> asking for both passwords but</font>

550
00:27:54,230 --> 00:27:58,670
most other tools so for example the key

551
00:27:56,300 --> 00:28:01,190
tool of<font color="#E5E5E5"> Java on the command line it will</font>

552
00:27:58,670 --> 00:28:05,510
only ask for<font color="#E5E5E5"> one and then we'll just set</font>

553
00:28:01,190 --> 00:28:09,110
both passwords with the same value so if

554
00:28:05,510 --> 00:28:12,890
we have this default<font color="#E5E5E5"> case can</font><font color="#CCCCCC"> we attack</font>

555
00:28:09,110 --> 00:28:17,740
the keystore password<font color="#E5E5E5"> and if not why not</font>

556
00:28:12,890 --> 00:28:17,740
<font color="#CCCCCC">and</font><font color="#E5E5E5"> if yes why don't we</font>

557
00:28:19,900 --> 00:28:35,020
<font color="#E5E5E5">opinions</font><font color="#CCCCCC"> if if we could crack the other</font>

558
00:28:24,370 --> 00:28:36,939
<font color="#E5E5E5">password if they're the same so if the</font>

559
00:28:35,020 --> 00:28:39,730
two<font color="#E5E5E5"> passwords here are the same key</font>

560
00:28:36,940 --> 00:28:42,280
password and keystore password and this

561
00:28:39,730 --> 00:28:46,210
<font color="#CCCCCC">integrity check and both passwords are</font>

562
00:28:42,280 --> 00:28:48,730
the same well yes<font color="#E5E5E5"> if the default case</font>

563
00:28:46,210 --> 00:28:53,290
applies the same passwords<font color="#E5E5E5"> we can crank</font>

564
00:28:48,730 --> 00:28:57,610
any of these two algorithms<font color="#E5E5E5"> so basically</font>

565
00:28:53,290 --> 00:28:59,440
<font color="#E5E5E5">it means we could crack with any of the</font>

566
00:28:57,610 --> 00:29:01,780
<font color="#E5E5E5">algorithms so we can</font><font color="#CCCCCC"> track</font><font color="#E5E5E5"> crack the</font>

567
00:28:59,440 --> 00:29:04,840
integrity protection<font color="#CCCCCC"> or we can crack</font>

568
00:29:01,780 --> 00:29:07,360
what I just<font color="#E5E5E5"> presented</font><font color="#CCCCCC"> so the question is</font>

569
00:29:04,840 --> 00:29:11,500
more like in<font color="#CCCCCC"> the default</font><font color="#E5E5E5"> case which one</font>

570
00:29:07,360 --> 00:29:13,120
performs<font color="#E5E5E5"> better well now here comes</font><font color="#CCCCCC"> the</font>

571
00:29:11,500 --> 00:29:15,700
questions you<font color="#E5E5E5"> have before can you say</font>

572
00:29:13,120 --> 00:29:17,830
<font color="#E5E5E5">something about integrity check this is</font>

573
00:29:15,700 --> 00:29:20,290
how the integrity check works<font color="#E5E5E5"> so the</font>

574
00:29:17,830 --> 00:29:23,199
keystore password is actually used<font color="#E5E5E5"> at</font>

575
00:29:20,290 --> 00:29:25,899
the top so<font color="#E5E5E5"> the keystore password then</font>

576
00:29:23,200 --> 00:29:33,610
you<font color="#E5E5E5"> concatenate</font><font color="#CCCCCC"> it to the string</font><font color="#E5E5E5"> mighty</font>

577
00:29:25,900 --> 00:29:35,950
Aphrodite<font color="#E5E5E5"> and then you also concatenate</font>

578
00:29:33,610 --> 00:29:37,990
the entire key file so everything<font color="#E5E5E5"> all</font>

579
00:29:35,950 --> 00:29:41,830
the keys so<font color="#E5E5E5"> you have kilobytes of keys</font>

580
00:29:37,990 --> 00:29:43,540
and produce<font color="#E5E5E5"> one sha-1 and then you check</font>

581
00:29:41,830 --> 00:29:46,720
<font color="#E5E5E5">it against the checksum</font><font color="#CCCCCC"> which is stored</font>

582
00:29:43,540 --> 00:29:48,760
in<font color="#CCCCCC"> the keystore file</font><font color="#E5E5E5"> so this is how it</font>

583
00:29:46,720 --> 00:29:50,140
works mighty Aphrodite now you might<font color="#E5E5E5"> ask</font>

584
00:29:48,760 --> 00:29:52,860
why mighty Aphrodite

585
00:29:50,140 --> 00:29:57,790
well<font color="#E5E5E5"> Aphrodite is the lady on the</font><font color="#CCCCCC"> left</font>

586
00:29:52,860 --> 00:30:00,129
we yeah<font color="#E5E5E5"> but it's more</font><font color="#CCCCCC"> likely that the</font>

587
00:29:57,790 --> 00:30:02,620
<font color="#E5E5E5">Java developers were watching too many</font>

588
00:30:00,130 --> 00:30:04,660
movies<font color="#CCCCCC"> and there was a movie called</font>

589
00:30:02,620 --> 00:30:09,370
mighty Aphrodite so it's<font color="#E5E5E5"> probably why</font>

590
00:30:04,660 --> 00:30:13,150
they choose this random string so why

591
00:30:09,370 --> 00:30:15,419
not crack<font color="#E5E5E5"> the keystore password anyone</font><font color="#CCCCCC"> I</font>

592
00:30:13,150 --> 00:30:15,420
guess

593
00:30:19,380 --> 00:30:32,620
sorry can you<font color="#E5E5E5"> repeat</font><font color="#CCCCCC"> its long</font><font color="#E5E5E5"> the</font>

594
00:30:23,919 --> 00:30:34,750
computation<font color="#E5E5E5"> yeah yeah you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to</font>

595
00:30:32,620 --> 00:30:37,059
pattern but here we would<font color="#CCCCCC"> just</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

596
00:30:34,750 --> 00:30:40,840
we have to check some right<font color="#E5E5E5"> so we could</font>

597
00:30:37,059 --> 00:30:42,668
also just<font color="#CCCCCC"> crack on</font><font color="#E5E5E5"> this so the question</font>

598
00:30:40,840 --> 00:30:45,129
is<font color="#CCCCCC"> really</font><font color="#E5E5E5"> which cracking protests better</font>

599
00:30:42,669 --> 00:30:47,350
performance and more<font color="#CCCCCC"> data go into the</font>

600
00:30:45,130 --> 00:30:49,600
sha-1 calculation when you do the

601
00:30:47,350 --> 00:30:51,850
<font color="#CCCCCC">checksum thing</font><font color="#E5E5E5"> whereas the private key</font>

602
00:30:49,600 --> 00:30:55,090
password calculation<font color="#CCCCCC"> only has password</font>

603
00:30:51,850 --> 00:30:58,658
<font color="#E5E5E5">an IV so that sha-1 is</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> quicker</font><font color="#CCCCCC"> than</font>

604
00:30:55,090 --> 00:31:01,330
the other<font color="#E5E5E5"> one and and what's especially</font>

605
00:30:58,659 --> 00:31:03,010
<font color="#E5E5E5">important is you don't know as an</font>

606
00:31:01,330 --> 00:31:04,418
attacker if it's default case you don't

607
00:31:03,010 --> 00:31:07,900
know if the passwords are the same or

608
00:31:04,419 --> 00:31:10,240
not<font color="#CCCCCC"> and so the private key password</font>

609
00:31:07,900 --> 00:31:13,240
approach<font color="#E5E5E5"> I showed also works in the non</font>

610
00:31:10,240 --> 00:31:15,520
default case and the worst thing

611
00:31:13,240 --> 00:31:18,250
actually<font color="#E5E5E5"> was that most other password</font>

612
00:31:15,520 --> 00:31:20,289
crackers<font color="#E5E5E5"> they implemented this keystore</font>

613
00:31:18,250 --> 00:31:22,360
password cracker<font color="#E5E5E5"> so you could end up</font>

614
00:31:20,289 --> 00:31:24,250
cracking<font color="#E5E5E5"> and cracking and cracking</font>

615
00:31:22,360 --> 00:31:27,059
password for days and<font color="#E5E5E5"> months</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> years</font>

616
00:31:24,250 --> 00:31:30,100
<font color="#CCCCCC">and once you found the password</font>

617
00:31:27,059 --> 00:31:31,809
it was super useless<font color="#CCCCCC"> because you cracked</font>

618
00:31:30,100 --> 00:31:34,000
the keystore password which is<font color="#CCCCCC"> only used</font>

619
00:31:31,809 --> 00:31:35,678
<font color="#CCCCCC">for integrity protection and in the non</font>

620
00:31:34,000 --> 00:31:37,960
default case it's<font color="#E5E5E5"> not the same as the</font>

621
00:31:35,679 --> 00:31:41,169
keystore password<font color="#CCCCCC"> sorry private</font><font color="#E5E5E5"> key</font>

622
00:31:37,960 --> 00:31:44,559
password<font color="#E5E5E5"> so basically you could crack</font>

623
00:31:41,169 --> 00:31:48,659
and they might not these password

624
00:31:44,559 --> 00:31:48,658
crackers might not do<font color="#E5E5E5"> anything useful</font><font color="#CCCCCC"> so</font>

625
00:31:49,260 --> 00:31:57,789
<font color="#CCCCCC">and here's again a simple one to round</font>

626
00:31:52,600 --> 00:31:59,320
it off<font color="#CCCCCC"> do I have time yeah</font><font color="#E5E5E5"> so what was</font>

627
00:31:57,789 --> 00:32:07,990
the best alternative to<font color="#E5E5E5"> check here's</font>

628
00:31:59,320 --> 00:32:13,500
again<font color="#E5E5E5"> yeah pkcs12 that's default one so</font>

629
00:32:07,990 --> 00:32:17,289
any really just don't use check<font color="#E5E5E5"> is</font><font color="#CCCCCC"> VC VC</font>

630
00:32:13,500 --> 00:32:19,720
<font color="#CCCCCC">fks</font><font color="#E5E5E5"> I hate these names anyway that's the</font>

631
00:32:17,289 --> 00:32:24,809
best one<font color="#E5E5E5"> and if you cannot use next</font><font color="#CCCCCC"> on</font>

632
00:32:19,720 --> 00:32:27,280
library use pkcs12<font color="#E5E5E5"> which is fixed now I</font>

633
00:32:24,809 --> 00:32:30,850
mean use more<font color="#E5E5E5"> rounds if you have two</font>

634
00:32:27,280 --> 00:32:31,860
<font color="#CCCCCC">updates</font><font color="#E5E5E5"> so if you generate keys after</font>

635
00:32:30,850 --> 00:32:33,540
the update

636
00:32:31,860 --> 00:32:36,449
but if you generate<font color="#E5E5E5"> them before then</font>

637
00:32:33,540 --> 00:32:41,970
they only<font color="#E5E5E5"> have</font><font color="#CCCCCC"> 1000 rounds so just get</font>

638
00:32:36,450 --> 00:32:43,710
everything<font color="#E5E5E5"> a newly generated so thank</font>

639
00:32:41,970 --> 00:32:52,970
you for attention<font color="#CCCCCC"> and if you have any</font>

640
00:32:43,710 --> 00:32:52,970
more questions thank<font color="#E5E5E5"> you</font>

