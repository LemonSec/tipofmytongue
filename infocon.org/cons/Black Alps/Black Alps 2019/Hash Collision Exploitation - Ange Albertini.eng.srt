1
00:00:03,290 --> 00:00:08,820
yeah welcome to this workshop so done

2
00:00:06,810 --> 00:00:10,200
with the help of the Mac Stevens

3
00:00:08,820 --> 00:00:12,870
cryptographer who's the author of all

4
00:00:10,200 --> 00:00:15,660
these attacks regarding whether it's md5

5
00:00:12,870 --> 00:00:17,400
or sha-1 and in case you have downloaded

6
00:00:15,660 --> 00:00:19,589
your slides some time ago make sure you

7
00:00:17,400 --> 00:00:21,470
have the latest slides but most likely

8
00:00:19,589 --> 00:00:27,240
it's not a problem

9
00:00:21,470 --> 00:00:29,970
and yeah if these slides are improved

10
00:00:27,240 --> 00:00:31,619
significantly the slides over time it's

11
00:00:29,970 --> 00:00:33,690
the fifth time I'm giving this workshop

12
00:00:31,619 --> 00:00:36,180
don't hesitate if you have questions and

13
00:00:33,690 --> 00:00:38,849
I will also update the slides if there

14
00:00:36,180 --> 00:00:40,560
are unanswered questions and yeah the

15
00:00:38,850 --> 00:00:42,900
slides as mentioned is available on

16
00:00:40,560 --> 00:00:44,220
speaker deck at this address so you can

17
00:00:42,900 --> 00:00:48,810
have a local version that you browse

18
00:00:44,220 --> 00:00:50,220
yourself and let's make sure that

19
00:00:48,810 --> 00:00:52,950
everyone everyone has different

20
00:00:50,220 --> 00:00:54,420
knowledge right and so if someone next

21
00:00:52,950 --> 00:00:56,070
to you will do a check just after that

22
00:00:54,420 --> 00:00:57,480
but if someone next to you has less

23
00:00:56,070 --> 00:01:01,260
knowledge on something feel free to help

24
00:00:57,480 --> 00:01:04,229
them it's better for everyone so who has

25
00:01:01,260 --> 00:01:06,600
an eye who knows or who doesn't know

26
00:01:04,229 --> 00:01:08,460
what is hexadecimal like viewing and DNS

27
00:01:06,600 --> 00:01:10,380
and these concepts who doesn't know

28
00:01:08,460 --> 00:01:13,259
every one is more or less familiar with

29
00:01:10,380 --> 00:01:17,100
this concept who has already computed

30
00:01:13,259 --> 00:01:21,329
hash collision attacks okay two hands

31
00:01:17,100 --> 00:01:23,339
three and then you you're familiar with

32
00:01:21,329 --> 00:01:25,048
basics concept of file formats like they

33
00:01:23,340 --> 00:01:28,770
have a magic some header footer this

34
00:01:25,049 --> 00:01:31,439
kind of thing okay and hash function 75

35
00:01:28,770 --> 00:01:34,679
Chauhan the way they work by blocks and

36
00:01:31,439 --> 00:01:38,309
so on okay and anyone has done some

37
00:01:34,679 --> 00:01:41,310
fight from that abuse besides Floyd five

38
00:01:38,310 --> 00:01:44,450
format abused already not so many sorry

39
00:01:41,310 --> 00:01:47,249
yeah so really again we're more in this

40
00:01:44,450 --> 00:01:49,350
some exceptions but really this is

41
00:01:47,249 --> 00:01:53,189
already covered so I don't need to

42
00:01:49,350 --> 00:01:55,770
explain in detail in detail what is in

43
00:01:53,189 --> 00:01:58,619
the everything about hash and just one

44
00:01:55,770 --> 00:02:01,020
thing Hospice is actually named the the

45
00:01:58,619 --> 00:02:03,270
name of the whole project but the chosen

46
00:02:01,020 --> 00:02:04,920
prefix collision about hash clash it

47
00:02:03,270 --> 00:02:07,619
should be called a hash tag CPC but I

48
00:02:04,920 --> 00:02:10,439
just shortened it - hush - just fixing

49
00:02:07,619 --> 00:02:13,530
stuff anyway it's me I love file formats

50
00:02:10,439 --> 00:02:14,340
my license plate is a CPU my phone case

51
00:02:13,530 --> 00:02:16,260
is a PDF and

52
00:02:14,340 --> 00:02:20,489
my resume is a Nintendo mega drive

53
00:02:16,260 --> 00:02:23,220
polyglot and I'm working a Google and I

54
00:02:20,489 --> 00:02:26,340
love - my enemy I'm not interested in

55
00:02:23,220 --> 00:02:31,489
all aspects of file formats and yeah as

56
00:02:26,340 --> 00:02:35,160
we saw we all know hash collisions hash

57
00:02:31,489 --> 00:02:38,700
import so I will not have to cover that

58
00:02:35,160 --> 00:02:40,019
I think it is just a big difference

59
00:02:38,700 --> 00:02:41,819
between hush collision and password

60
00:02:40,019 --> 00:02:43,650
cracking you have a hash you want to

61
00:02:41,819 --> 00:02:45,238
find exact string that creates this it's

62
00:02:43,650 --> 00:02:47,340
password cracking but there is a lot of

63
00:02:45,239 --> 00:02:49,260
constraints regarding the original

64
00:02:47,340 --> 00:02:51,450
length and content of the password and

65
00:02:49,260 --> 00:02:55,140
hash collision is about creating two

66
00:02:51,450 --> 00:02:58,349
contents that have the same hash and you

67
00:02:55,140 --> 00:03:00,420
very very important these hashes are not

68
00:02:58,349 --> 00:03:02,819
known in advance you don't aim for a

69
00:03:00,420 --> 00:03:04,290
given house you just make two contents

70
00:03:02,819 --> 00:03:06,149
have the same hash and you don't know

71
00:03:04,290 --> 00:03:08,400
what the final flush will be this is

72
00:03:06,150 --> 00:03:11,519
like very important is something people

73
00:03:08,400 --> 00:03:13,260
did don't get so we will not know we

74
00:03:11,519 --> 00:03:15,180
will not say hey we have the hush of

75
00:03:13,260 --> 00:03:16,890
notepad we want to have a file with this

76
00:03:15,180 --> 00:03:18,989
this is not Hajj collision this doesn't

77
00:03:16,890 --> 00:03:22,369
exist in practice I'll insist because

78
00:03:18,989 --> 00:03:26,940
people really have a product so again

79
00:03:22,370 --> 00:03:28,410
getting a specific hash it's called the

80
00:03:26,940 --> 00:03:31,099
preimage attack and it doesn't exist for

81
00:03:28,410 --> 00:03:34,079
md5 shown it doesn't even exist for MB -

82
00:03:31,099 --> 00:03:36,089
which is very old it's only existed for

83
00:03:34,079 --> 00:03:37,530
a few case where it was demonstrated but

84
00:03:36,090 --> 00:03:40,019
that's very rare so it's not what it's

85
00:03:37,530 --> 00:03:43,049
about here the thing is with from five

86
00:03:40,019 --> 00:03:45,780
tricks we can instantly instantly

87
00:03:43,049 --> 00:03:48,419
generate files with the same hash so we

88
00:03:45,780 --> 00:03:50,549
will combine the non-hodgkin even

89
00:03:48,419 --> 00:03:58,079
attacks with some file tricks to speed

90
00:03:50,549 --> 00:04:00,630
things up so even on the webpage or

91
00:03:58,079 --> 00:04:04,109
examples already created stuff for

92
00:04:00,630 --> 00:04:05,489
instant PDF collision video images of

93
00:04:04,109 --> 00:04:07,380
different format there's some limitation

94
00:04:05,489 --> 00:04:09,660
sometimes that is really you just got

95
00:04:07,380 --> 00:04:12,989
download these videos you run the script

96
00:04:09,660 --> 00:04:15,299
and it's very instant also work with

97
00:04:12,989 --> 00:04:17,970
jiff and quoting finally to also work

98
00:04:15,299 --> 00:04:20,099
with Windows executable so you can

99
00:04:17,970 --> 00:04:22,710
instantly get mini cats and kept head

100
00:04:20,099 --> 00:04:24,360
legs e.coli doing the same hajj or you

101
00:04:22,710 --> 00:04:25,169
can even do that we'll show that with

102
00:04:24,360 --> 00:04:28,050
different file types

103
00:04:25,169 --> 00:04:29,849
so JPEG and P so I send you

104
00:04:28,050 --> 00:04:31,710
you want pictures from the holidays and

105
00:04:29,849 --> 00:04:33,120
you defile and you download it because

106
00:04:31,710 --> 00:04:35,430
you wanted to see the pictures of my

107
00:04:33,120 --> 00:04:38,759
holidays and then I actually there's a

108
00:04:35,430 --> 00:04:42,090
mini cats executable and now you

109
00:04:38,759 --> 00:04:43,680
whitelisted it because if it's you if

110
00:04:42,090 --> 00:04:46,739
you are white listing by md5 that way

111
00:04:43,680 --> 00:04:48,690
that is so just new collision I'm not

112
00:04:46,740 --> 00:04:50,940
sure you can see but colliding to pngs

113
00:04:48,690 --> 00:04:52,979
retakes like health less than half less

114
00:04:50,940 --> 00:04:55,229
than a second because I already did a

115
00:04:52,979 --> 00:04:57,719
collision computation and now it's just

116
00:04:55,229 --> 00:05:02,789
moving buffers and just putting things

117
00:04:57,720 --> 00:05:04,620
together so it's combining tricks and in

118
00:05:02,789 --> 00:05:07,680
some case like the PDF defconn

119
00:05:04,620 --> 00:05:10,680
identifies our 100% stander from the

120
00:05:07,680 --> 00:05:12,569
password perspective so it's just a file

121
00:05:10,680 --> 00:05:14,639
have a various structure but the files

122
00:05:12,569 --> 00:05:18,030
in their passing they will produce no

123
00:05:14,639 --> 00:05:21,240
warning they are just valid another myth

124
00:05:18,030 --> 00:05:25,198
that is usually when you people compute

125
00:05:21,240 --> 00:05:28,289
collisions they compute two files of the

126
00:05:25,199 --> 00:05:30,240
same file type and the files are very

127
00:05:28,289 --> 00:05:33,240
different because that's usually people

128
00:05:30,240 --> 00:05:34,770
demonstrate yes and no or one of the

129
00:05:33,240 --> 00:05:36,599
first example when I we released the

130
00:05:34,770 --> 00:05:37,650
sha-1 colliding provokin said someone

131
00:05:36,599 --> 00:05:40,530
collided

132
00:05:37,650 --> 00:05:43,409
Donald Trump and the corn with the the

133
00:05:40,530 --> 00:05:45,239
hair of corn like this so you know it's

134
00:05:43,409 --> 00:05:47,340
really very different but it's it's

135
00:05:45,240 --> 00:05:49,289
wrong and you can actually collide more

136
00:05:47,340 --> 00:05:51,029
than two files or files of different

137
00:05:49,289 --> 00:05:55,880
file types so if you now pierce your

138
00:05:51,029 --> 00:05:58,469
gtfo the issue 19 is for file types of

139
00:05:55,880 --> 00:06:02,520
coli having the same hash it's a file

140
00:05:58,469 --> 00:06:03,840
that has four types and it's a an

141
00:06:02,520 --> 00:06:06,359
executable and image a video ID in

142
00:06:03,840 --> 00:06:08,400
document so it's four and really it's

143
00:06:06,360 --> 00:06:11,159
very different things so these four

144
00:06:08,400 --> 00:06:13,650
things those the the magazine and the

145
00:06:11,159 --> 00:06:16,319
PDF viewer to view the file and a video

146
00:06:13,650 --> 00:06:19,138
and this image all have the same hash

147
00:06:16,319 --> 00:06:22,349
and we didn't we need recomputation

148
00:06:19,139 --> 00:06:24,270
every time so computation took some time

149
00:06:22,349 --> 00:06:26,219
but after that whenever we modify the

150
00:06:24,270 --> 00:06:30,210
latech it was just regenerating again

151
00:06:26,219 --> 00:06:31,529
it's instant I mentioned earlier that

152
00:06:30,210 --> 00:06:33,870
usually the colliding files are very

153
00:06:31,529 --> 00:06:36,089
different here this is the opposite on

154
00:06:33,870 --> 00:06:38,000
the previous issue of Poker gtfo issue

155
00:06:36,089 --> 00:06:41,130
14 we just added

156
00:06:38,000 --> 00:06:41,580
609 collisions so that you can change in

157
00:06:41,130 --> 00:06:44,490
a number

158
00:06:41,580 --> 00:06:48,448
that is displayed on the front page and

159
00:06:44,490 --> 00:06:50,669
then you can just adjust this number to

160
00:06:48,449 --> 00:06:52,379
display the actual md5 of the file so it

161
00:06:50,669 --> 00:06:55,169
feels like a magic trick but it's just

162
00:06:52,379 --> 00:06:57,810
you can flip these numbers and the md5

163
00:06:55,169 --> 00:07:01,049
novel md5 will not work and this file is

164
00:06:57,810 --> 00:07:03,300
a PDF but it's also a Nintendo ROM and

165
00:07:01,050 --> 00:07:05,430
the Nintendo run also shows its md5

166
00:07:03,300 --> 00:07:07,289
that's why there are 600 in collision

167
00:07:05,430 --> 00:07:08,729
which is a bit too much on the other

168
00:07:07,289 --> 00:07:10,349
hand it means that with this file you

169
00:07:08,729 --> 00:07:14,460
can easily by flipping bits you can

170
00:07:10,349 --> 00:07:17,520
really easily generate 2 ^ 6600 which is

171
00:07:14,460 --> 00:07:20,128
like 400 digits or something having the

172
00:07:17,520 --> 00:07:24,210
same md5 which coincidentally start with

173
00:07:20,129 --> 00:07:26,009
the seafood so really this is a

174
00:07:24,210 --> 00:07:28,409
demonstration that it's a standard 60

175
00:07:26,009 --> 00:07:31,259
page document and only a tiny part is

176
00:07:28,409 --> 00:07:33,319
actually using hash collisions it

177
00:07:31,259 --> 00:07:36,029
doesn't have to be the whole file and

178
00:07:33,319 --> 00:07:37,650
also it works with sha-1 but as far as I

179
00:07:36,029 --> 00:07:42,270
know there is only a single computation

180
00:07:37,650 --> 00:07:44,818
of sha-1 and there is no other even the

181
00:07:42,270 --> 00:07:47,190
tools are not available solely and I

182
00:07:44,819 --> 00:07:50,610
just reuse the code collision the prefix

183
00:07:47,190 --> 00:07:53,370
we computed for the public the collision

184
00:07:50,610 --> 00:07:57,210
of at Google and you can reintegrate it

185
00:07:53,370 --> 00:08:00,060
into any document such as here the issue

186
00:07:57,210 --> 00:08:02,159
18 of poker gtfo which which has the

187
00:08:00,060 --> 00:08:03,779
same sha-1 and different images on the

188
00:08:02,159 --> 00:08:05,240
front page and again the rest of the

189
00:08:03,779 --> 00:08:09,120
document is identical

190
00:08:05,240 --> 00:08:11,759
it's just colliding an image inside a

191
00:08:09,120 --> 00:08:15,690
whole document it's just an image that

192
00:08:11,759 --> 00:08:18,419
can change without modifying the show so

193
00:08:15,690 --> 00:08:21,479
it's not new attacks there are shortcuts

194
00:08:18,419 --> 00:08:24,810
fight format shortcuts that are needed

195
00:08:21,479 --> 00:08:26,729
to have this instant aspect the known of

196
00:08:24,810 --> 00:08:28,610
the I mean there is one attack that is

197
00:08:26,729 --> 00:08:33,000
super fast and we'll see that it's very

198
00:08:28,610 --> 00:08:34,829
hard to exploit so we will see why but

199
00:08:33,000 --> 00:08:38,130
all these are the computation like this

200
00:08:34,828 --> 00:08:41,838
took this attack took six hundred six

201
00:08:38,130 --> 00:08:45,660
thousand years so that's a lot of time

202
00:08:41,839 --> 00:08:49,320
and this is combined with file tricks to

203
00:08:45,660 --> 00:08:53,569
make it instant again with new files any

204
00:08:49,320 --> 00:08:55,130
questions so far all good

205
00:08:53,570 --> 00:08:57,050
and the good thing is that whenever you

206
00:08:55,130 --> 00:09:00,170
find a new trick it would be reusable

207
00:08:57,050 --> 00:09:02,990
likely for sure - so if someone then

208
00:09:00,170 --> 00:09:05,000
starts saying I will call the computer -

209
00:09:02,990 --> 00:09:06,980
collision maybe one day then you can

210
00:09:05,000 --> 00:09:09,320
reuse some fixed because file formats

211
00:09:06,980 --> 00:09:12,769
don't care but which hash you broke and

212
00:09:09,320 --> 00:09:14,180
the same the hush doesn't care about the

213
00:09:12,769 --> 00:09:16,699
structure of the file so it's very

214
00:09:14,180 --> 00:09:18,349
organized so it's quite fun and some

215
00:09:16,699 --> 00:09:20,719
tricks some file formats don't have

216
00:09:18,350 --> 00:09:22,310
suitable tricks no shortcut for elf so

217
00:09:20,720 --> 00:09:24,470
you can do like any pair of Windows

218
00:09:22,310 --> 00:09:26,719
executable in the collision but there's

219
00:09:24,470 --> 00:09:28,970
no such such shortcut for elf because of

220
00:09:26,720 --> 00:09:30,949
the instructure because very early in

221
00:09:28,970 --> 00:09:32,630
the file the architecture is there so

222
00:09:30,949 --> 00:09:34,310
you cannot put collision blocks before

223
00:09:32,630 --> 00:09:37,399
I'll explain what it means later but

224
00:09:34,310 --> 00:09:41,899
just if you have an idea and files so

225
00:09:37,399 --> 00:09:43,910
the goals of this workshop is having

226
00:09:41,899 --> 00:09:46,459
some idea of file format structures and

227
00:09:43,910 --> 00:09:48,319
the manipulation and understand not hash

228
00:09:46,459 --> 00:09:51,050
collisions but their attacks and how you

229
00:09:48,319 --> 00:09:53,719
can exploit them and then create your

230
00:09:51,050 --> 00:09:56,120
own exploit so basically you're doing a

231
00:09:53,720 --> 00:09:58,550
pen test and you see a system that is

232
00:09:56,120 --> 00:10:00,829
indexing file with md5 what can you do I

233
00:09:58,550 --> 00:10:02,800
already put some scripts available but

234
00:10:00,829 --> 00:10:07,040
this they are indexing a data file type

235
00:10:02,800 --> 00:10:09,349
can you go from few hours for a pair of

236
00:10:07,040 --> 00:10:11,029
file to instant collision in case you

237
00:10:09,350 --> 00:10:12,529
didn't straighted some knowledge it's

238
00:10:11,029 --> 00:10:14,089
quite good because when you say hey I

239
00:10:12,529 --> 00:10:17,029
created instant collision for this file

240
00:10:14,089 --> 00:10:19,730
format people are usually convinced it's

241
00:10:17,029 --> 00:10:22,010
good because it's not a bug it's not a

242
00:10:19,730 --> 00:10:23,660
patch but that can be patched it's like

243
00:10:22,010 --> 00:10:26,149
if the indexing some files and then you

244
00:10:23,660 --> 00:10:29,800
produce instant collision then they are

245
00:10:26,149 --> 00:10:29,800
convinced that it's not reliable anymore

246
00:10:29,980 --> 00:10:36,560
and yeah people say but no one uses md5

247
00:10:33,319 --> 00:10:40,279
anymore and just in July a WeChat was

248
00:10:36,560 --> 00:10:43,699
actually filtering files censorship via

249
00:10:40,279 --> 00:10:47,839
md5 of the images visual ID so a couple

250
00:10:43,699 --> 00:10:50,149
of months ago and yes maybe you heard of

251
00:10:47,839 --> 00:10:52,399
this the shuttle attack so the sha-1

252
00:10:50,149 --> 00:10:54,139
collision and I took part in it at the

253
00:10:52,399 --> 00:10:57,740
file format and here all the documents

254
00:10:54,139 --> 00:10:59,569
on the the related to this attack so

255
00:10:57,740 --> 00:11:03,319
mark is the author of the crypto attack

256
00:10:59,569 --> 00:11:04,939
it's so complex it's not funny it's like

257
00:11:03,319 --> 00:11:07,649
if you don't know what boomerang beats

258
00:11:04,939 --> 00:11:09,930
or neutral bits is yeah

259
00:11:07,649 --> 00:11:11,639
the ampere is focusing on computation

260
00:11:09,930 --> 00:11:15,388
which is interesting it is comparing the

261
00:11:11,639 --> 00:11:17,850
amount of energy spent to rigor with the

262
00:11:15,389 --> 00:11:20,399
amount of water it would boil and I

263
00:11:17,850 --> 00:11:24,809
think for sure one it's like it's the

264
00:11:20,399 --> 00:11:26,360
units of water is a Olympic pools so he

265
00:11:24,809 --> 00:11:28,920
start with the teacups and whatever

266
00:11:26,360 --> 00:11:31,350
teaspoons of water for this attack and

267
00:11:28,920 --> 00:11:33,899
whatever and then this attack three

268
00:11:31,350 --> 00:11:35,610
Olympic pools so it's actually

269
00:11:33,899 --> 00:11:38,220
interesting I have a talk on file

270
00:11:35,610 --> 00:11:43,290
formats actually I gave it two years ago

271
00:11:38,220 --> 00:11:46,050
here at black cups so are you using

272
00:11:43,290 --> 00:11:47,790
hashes Phi for using md5 is not

273
00:11:46,050 --> 00:11:49,878
necessarily bad it depends what you're

274
00:11:47,790 --> 00:11:53,339
doing with it but more importantly if

275
00:11:49,879 --> 00:11:55,829
people control always the input then you

276
00:11:53,339 --> 00:11:59,009
don't know if a file will that is white

277
00:11:55,829 --> 00:12:00,839
listed and is considered clean now will

278
00:11:59,009 --> 00:12:02,879
not could couldn't be another Manchus

279
00:12:00,839 --> 00:12:05,009
file later I mean unless you actually

280
00:12:02,879 --> 00:12:07,740
have some analysis of the file itself

281
00:12:05,009 --> 00:12:10,439
so basically blind indexing of files

282
00:12:07,740 --> 00:12:11,790
that are a user control nope but on the

283
00:12:10,439 --> 00:12:17,389
other hand there are some use that is

284
00:12:11,790 --> 00:12:20,639
just okay for an e5 and again yes

285
00:12:17,389 --> 00:12:24,120
zoom encounter the system that you 75

286
00:12:20,639 --> 00:12:25,319
you collide a normal file and the good

287
00:12:24,120 --> 00:12:27,120
thing is that a few hours of research

288
00:12:25,319 --> 00:12:28,920
you analyze the system your Nala is a

289
00:12:27,120 --> 00:12:30,990
file format a few other computation

290
00:12:28,920 --> 00:12:33,120
within a day you can demonstrate that

291
00:12:30,990 --> 00:12:37,139
maybe the system is not reliable at all

292
00:12:33,120 --> 00:12:38,610
which is good and again I prefer to do

293
00:12:37,139 --> 00:12:40,350
the talking you can convince people all

294
00:12:38,610 --> 00:12:42,899
you want when you give them here is the

295
00:12:40,350 --> 00:12:47,819
script points and collision it's funny

296
00:12:42,899 --> 00:12:51,139
you have nothing to say so I know I also

297
00:12:47,819 --> 00:12:55,160
really liked that hacking a file format

298
00:12:51,139 --> 00:12:57,779
md5 clear and if I collision is just

299
00:12:55,160 --> 00:13:00,809
getting to know a file format but just

300
00:12:57,779 --> 00:13:02,309
the surface but it's the usual tricks

301
00:13:00,809 --> 00:13:03,959
for five form and manipulation so if

302
00:13:02,309 --> 00:13:06,420
you're not familiar with five form and

303
00:13:03,959 --> 00:13:09,029
manipulation it's very good because it's

304
00:13:06,420 --> 00:13:10,259
we won't understand in depth how the

305
00:13:09,029 --> 00:13:12,240
file format are because that's not

306
00:13:10,259 --> 00:13:14,730
required and that's typically a mistake

307
00:13:12,240 --> 00:13:16,829
that people do they start to dig and in

308
00:13:14,730 --> 00:13:18,929
the whole file format and the open water

309
00:13:16,829 --> 00:13:20,769
one editor and they have a suddenly hold

310
00:13:18,929 --> 00:13:22,959
the whole header structure any

311
00:13:20,769 --> 00:13:29,199
like you flooded with information but

312
00:13:22,959 --> 00:13:31,238
it's totally not required so don't be

313
00:13:29,199 --> 00:13:34,300
scared it's not a crypto talk I don't

314
00:13:31,239 --> 00:13:38,139
know anything about crypto so interferon

315
00:13:34,300 --> 00:13:40,959
things about crypto differently mark the

316
00:13:38,139 --> 00:13:43,839
dig to mark at stasis is there I will

317
00:13:40,959 --> 00:13:45,549
make some reference there but yeah for

318
00:13:43,839 --> 00:13:49,329
questions about crypto ask mark please

319
00:13:45,549 --> 00:13:50,819
or not be at least and yeah again I

320
00:13:49,329 --> 00:13:53,079
really don't understand why we just

321
00:13:50,819 --> 00:13:56,410
reuse existing attacks and there are

322
00:13:53,079 --> 00:13:57,998
only four of them so it's easy like you

323
00:13:56,410 --> 00:14:01,209
think we can all count to four when we

324
00:13:57,999 --> 00:14:03,220
cover all of it and you don't have and

325
00:14:01,209 --> 00:14:04,689
be an expert in file formats really you

326
00:14:03,220 --> 00:14:06,999
don't have to know how all this thing

327
00:14:04,689 --> 00:14:08,709
work you just need to have a very very

328
00:14:06,999 --> 00:14:10,689
basic understanding of a structure so

329
00:14:08,709 --> 00:14:13,179
it's less complex than some legal models

330
00:14:10,689 --> 00:14:15,279
and even if you're familiar with my

331
00:14:13,179 --> 00:14:17,230
posters this is too much because this is

332
00:14:15,279 --> 00:14:19,420
already detailing too much information

333
00:14:17,230 --> 00:14:21,249
about this small this tiny file we only

334
00:14:19,420 --> 00:14:23,139
need to understand the really the

335
00:14:21,249 --> 00:14:27,429
overall structure we don't care about

336
00:14:23,139 --> 00:14:28,929
the things which is like if you review

337
00:14:27,429 --> 00:14:31,569
it in a hex editor it really feels like

338
00:14:28,929 --> 00:14:33,069
block which is why I call it call trees

339
00:14:31,569 --> 00:14:35,829
because it feels like a puzzle game we

340
00:14:33,069 --> 00:14:37,839
will just yeah this is how I see my file

341
00:14:35,829 --> 00:14:39,549
manipulation is just you indexed stuff

342
00:14:37,839 --> 00:14:41,139
and you move the block and then at the

343
00:14:39,549 --> 00:14:44,529
end you have the same hash thanks mark

344
00:14:41,139 --> 00:14:46,629
he's doing the hard part

345
00:14:44,529 --> 00:14:48,610
I have a topic on a high-level

346
00:14:46,629 --> 00:14:50,709
introduction on the topic which is

347
00:14:48,610 --> 00:14:54,399
called kill md5 which is already

348
00:14:50,709 --> 00:14:56,199
available but this one is no Excel no

349
00:14:54,399 --> 00:14:58,720
ends oh no hex if you want to explain

350
00:14:56,199 --> 00:15:05,679
someone the problem but we will do the

351
00:14:58,720 --> 00:15:07,389
hands-on part any questions yeah it's on

352
00:15:05,679 --> 00:15:10,589
YouTube and it's a the links are there

353
00:15:07,389 --> 00:15:13,089
so the Dooly the sliders picker deck and

354
00:15:10,589 --> 00:15:17,739
the video was recorded by Cooper of

355
00:15:13,089 --> 00:15:20,610
course released 20v around the vocal

356
00:15:17,739 --> 00:15:25,770
pros for the almost on come on come on

357
00:15:20,610 --> 00:15:28,779
[Applause]

358
00:15:25,770 --> 00:15:30,670
so yeah you saw you said you already

359
00:15:28,779 --> 00:15:34,510
know the basics of XIT Seema I don't

360
00:15:30,670 --> 00:15:36,550
need to cover this ascii encoding in DNS

361
00:15:34,510 --> 00:15:39,490
which will it's important we will see

362
00:15:36,550 --> 00:15:41,170
why later I mean it's important yes just

363
00:15:39,490 --> 00:15:44,080
as you are familiar with hex viewing

364
00:15:41,170 --> 00:15:45,760
this way very important thing we will

365
00:15:44,080 --> 00:15:48,010
need to have exactly the right

366
00:15:45,760 --> 00:15:50,140
adjustment because of the sight of the

367
00:15:48,010 --> 00:15:52,660
block and some hex viewer when you

368
00:15:50,140 --> 00:15:55,839
resize the window they will not wrap at

369
00:15:52,660 --> 00:15:57,339
16 and then you will be confused because

370
00:15:55,839 --> 00:15:59,950
you knew you will need some stuff

371
00:15:57,339 --> 00:16:02,650
exactly at the tenth byte and not at

372
00:15:59,950 --> 00:16:05,830
another offset so make sure you never

373
00:16:02,650 --> 00:16:09,250
you always how wrap a ten okay in tags

374
00:16:05,830 --> 00:16:10,990
okay because otherwise you will do your

375
00:16:09,250 --> 00:16:13,860
computation and it will not collide and

376
00:16:10,990 --> 00:16:16,870
crypto doesn't care about these details

377
00:16:13,860 --> 00:16:19,180
because yes some people ask me oh it's a

378
00:16:16,870 --> 00:16:24,900
code you have to put at the 10th byte

379
00:16:19,180 --> 00:16:28,540
can I put it a need no crypto so I

380
00:16:24,900 --> 00:16:30,189
mentioned the final irony never Asus the

381
00:16:28,540 --> 00:16:32,560
final hash is not known in advance we

382
00:16:30,190 --> 00:16:36,040
just have to contents and magically get

383
00:16:32,560 --> 00:16:41,859
them have get the same hash but we don't

384
00:16:36,040 --> 00:16:44,140
know which one so has anyone done the

385
00:16:41,860 --> 00:16:45,790
prerequisites or need help or something

386
00:16:44,140 --> 00:16:50,500
so you don't need to again you don't

387
00:16:45,790 --> 00:16:52,390
need to have the tools ready to compute

388
00:16:50,500 --> 00:16:54,430
the collisions if you want you can

389
00:16:52,390 --> 00:16:55,900
directly I will see that later you can

390
00:16:54,430 --> 00:16:58,420
directly get the prefix that I call

391
00:16:55,900 --> 00:17:00,279
computed it's up to you but it's really

392
00:16:58,420 --> 00:17:03,610
feels magic we need to actually works

393
00:17:00,279 --> 00:17:06,069
so again if it doesn't work compilation

394
00:17:03,610 --> 00:17:09,010
or too slow all the prefix are again on

395
00:17:06,069 --> 00:17:11,319
the same repository but on the other

396
00:17:09,010 --> 00:17:13,270
hand if you download just fast code but

397
00:17:11,319 --> 00:17:15,670
even the windows binary in it one works

398
00:17:13,270 --> 00:17:19,000
with wine and it doesn't fail it works

399
00:17:15,670 --> 00:17:22,300
it's it feels like magic oh not magic

400
00:17:19,000 --> 00:17:24,520
just tricks but yes it's a it's pretty

401
00:17:22,300 --> 00:17:27,909
funny you download the binary is you

402
00:17:24,520 --> 00:17:30,730
just run them with wine and you it it

403
00:17:27,910 --> 00:17:33,280
works it should be like Shh you take

404
00:17:30,730 --> 00:17:34,540
only a few seconds and of course it's

405
00:17:33,280 --> 00:17:35,889
better if you have a file format

406
00:17:34,540 --> 00:17:39,040
manipulation environment

407
00:17:35,890 --> 00:17:41,590
I really so use one use and to you now a

408
00:17:39,040 --> 00:17:44,799
copy of the copy of the workshop

409
00:17:41,590 --> 00:17:46,600
materials and a copy of the slides you

410
00:17:44,799 --> 00:17:48,160
have their URLs here I mean not the

411
00:17:46,600 --> 00:17:51,178
fully where else but how you can search

412
00:17:48,160 --> 00:17:51,179
them out doctor go

413
00:17:51,660 --> 00:17:58,990
so github speaker deck github for Tammy

414
00:17:55,660 --> 00:18:05,710
collisions if you want github maxtv are

415
00:17:58,990 --> 00:18:07,240
maxed events hash clash can I move can I

416
00:18:05,710 --> 00:18:13,720
go on and you do that in the meantime or

417
00:18:07,240 --> 00:18:15,100
someone had need help okay move on so if

418
00:18:13,720 --> 00:18:16,870
you'd not familiar with hex reviewing

419
00:18:15,100 --> 00:18:17,799
I'm just going to suggest one now if

420
00:18:16,870 --> 00:18:19,959
you're I don't know if you're familiar

421
00:18:17,799 --> 00:18:24,370
with kite I but it's a it has online

422
00:18:19,960 --> 00:18:27,400
viewer which is very nice so it's using

423
00:18:24,370 --> 00:18:28,719
ml based parcels grammars the many

424
00:18:27,400 --> 00:18:31,000
formats are already supported you can

425
00:18:28,720 --> 00:18:33,690
drop saw which are screenshots so it

426
00:18:31,000 --> 00:18:36,760
looks like this I ID dot kite I dot IO

427
00:18:33,690 --> 00:18:38,200
so it's like this and you can you have

428
00:18:36,760 --> 00:18:40,540
some grammars already available you can

429
00:18:38,200 --> 00:18:42,669
edit them live and when you edit them

430
00:18:40,540 --> 00:18:44,799
they will save as a modified copy on

431
00:18:42,669 --> 00:18:47,250
your local storage and you can drop the

432
00:18:44,799 --> 00:18:50,020
files and they will directly be there

433
00:18:47,250 --> 00:18:51,610
now another another thing I mentioned

434
00:18:50,020 --> 00:18:54,549
earlier is that this grammar are

435
00:18:51,610 --> 00:18:56,049
completely to a complete which means

436
00:18:54,549 --> 00:18:57,990
they give you a lot of details that you

437
00:18:56,049 --> 00:19:00,190
probably don't want on the other hand

438
00:18:57,990 --> 00:19:02,130
removing a lot of information from this

439
00:19:00,190 --> 00:19:04,390
grandma just to display the basic

440
00:19:02,130 --> 00:19:06,610
information you need is certainly a time

441
00:19:04,390 --> 00:19:08,860
saver which is exactly what I did

442
00:19:06,610 --> 00:19:10,870
I will provide a provide also in the

443
00:19:08,860 --> 00:19:12,370
workshop materials simplify grammar just

444
00:19:10,870 --> 00:19:14,229
to cover what you need to understand for

445
00:19:12,370 --> 00:19:16,418
collisions you don't need to go in the

446
00:19:14,230 --> 00:19:17,919
whole detail of this thing but it's

447
00:19:16,419 --> 00:19:20,740
really good and it's available online

448
00:19:17,919 --> 00:19:22,809
and there are also command-line tools so

449
00:19:20,740 --> 00:19:25,720
if you want to apply grab ya this

450
00:19:22,809 --> 00:19:27,460
grammar grammar to any files so if you

451
00:19:25,720 --> 00:19:31,690
didn't know Kaitaia definitely check it

452
00:19:27,460 --> 00:19:33,850
and now trail of bits released the

453
00:19:31,690 --> 00:19:36,669
earlier this week a tool called poly

454
00:19:33,850 --> 00:19:37,209
poly file which is also compatible with

455
00:19:36,669 --> 00:19:39,250
kite

456
00:19:37,210 --> 00:19:42,700
reusing kite a grammar to pass files so

457
00:19:39,250 --> 00:19:45,100
it's like ryu SFIL and to be honest when

458
00:19:42,700 --> 00:19:47,080
i study a file format I open the specs

459
00:19:45,100 --> 00:19:49,120
per day or often look if there is a

460
00:19:47,080 --> 00:19:51,129
greater grammar because at least where

461
00:19:49,120 --> 00:19:52,540
quickly you see what this file should

462
00:19:51,130 --> 00:19:56,400
start with without having to browse

463
00:19:52,540 --> 00:19:58,389
through thousands of page of PDF so

464
00:19:56,400 --> 00:20:00,720
definitely if you didn't know Kai

465
00:19:58,390 --> 00:20:03,370
that's a great repository of knowledge

466
00:20:00,720 --> 00:20:05,950
although this is a very nice interface

467
00:20:03,370 --> 00:20:08,320
and really I study the grammars for

468
00:20:05,950 --> 00:20:10,330
details especially because I don't know

469
00:20:08,320 --> 00:20:13,389
if you see here but they also reference

470
00:20:10,330 --> 00:20:17,169
the exact URL regarding this element of

471
00:20:13,390 --> 00:20:19,690
the file meant the D sector so it's

472
00:20:17,170 --> 00:20:22,450
really well done we useful as a

473
00:20:19,690 --> 00:20:24,370
knowledge base and as a viewing tool

474
00:20:22,450 --> 00:20:33,190
it's not an editor you cannot edit the

475
00:20:24,370 --> 00:20:35,350
files inside but it's still very good so

476
00:20:33,190 --> 00:20:38,290
if you're not familiar with file Form

477
00:20:35,350 --> 00:20:40,330
and manipulation skim through the specs

478
00:20:38,290 --> 00:20:43,389
just have an idea of the high level

479
00:20:40,330 --> 00:20:47,350
structure then look for possible forms

480
00:20:43,390 --> 00:20:51,250
of manipulation if you can remove or

481
00:20:47,350 --> 00:20:53,469
modify in the unwanted way the

482
00:20:51,250 --> 00:20:55,780
structures whose future need so para

483
00:20:53,470 --> 00:20:58,150
sighting or you can move stuff

484
00:20:55,780 --> 00:21:01,540
structures around to your benefit it

485
00:20:58,150 --> 00:21:03,070
could be helpful and always check

486
00:21:01,540 --> 00:21:04,480
open-source standard open source

487
00:21:03,070 --> 00:21:06,939
implementation because you might have

488
00:21:04,480 --> 00:21:09,040
surprised the files of the sha-1

489
00:21:06,940 --> 00:21:11,620
collisions are actually invalid because

490
00:21:09,040 --> 00:21:12,790
the break official in theory invalid

491
00:21:11,620 --> 00:21:15,040
because they break a rule of the

492
00:21:12,790 --> 00:21:18,670
official specification but in practice

493
00:21:15,040 --> 00:21:19,540
Lib JPEG is fine with that and the JPEG

494
00:21:18,670 --> 00:21:22,450
is everywhere

495
00:21:19,540 --> 00:21:25,659
so if live JPEG doesn't see anything

496
00:21:22,450 --> 00:21:28,630
wrong the files are valid everywhere so

497
00:21:25,660 --> 00:21:30,910
don't follow the specs too much look at

498
00:21:28,630 --> 00:21:33,610
the actual implementation and of course

499
00:21:30,910 --> 00:21:35,590
at the fragmentation for example if you

500
00:21:33,610 --> 00:21:37,389
want to hack a PDF there are like six

501
00:21:35,590 --> 00:21:40,090
families of PDF viewers you need to

502
00:21:37,390 --> 00:21:42,790
adapt to all of them but for JPEG lis

503
00:21:40,090 --> 00:21:45,370
there is glyph JPEG everywhere so if

504
00:21:42,790 --> 00:21:49,440
live JPEG is happy the files are valid

505
00:21:45,370 --> 00:21:49,439
even though the specs says they're not

506
00:21:50,610 --> 00:21:57,729
if you want to give the files you can

507
00:21:53,350 --> 00:22:00,939
either use diff and xxd that is fast you

508
00:21:57,730 --> 00:22:02,700
can try bvv beam deep when this do and

509
00:22:00,940 --> 00:22:06,760
it doesn't seg fault

510
00:22:02,700 --> 00:22:09,900
or a very good relief from Merida which

511
00:22:06,760 --> 00:22:11,830
is pretty cool which is only showing the

512
00:22:09,900 --> 00:22:17,380
modified lines with some context

513
00:22:11,830 --> 00:22:19,149
critical just so that you you make it

514
00:22:17,380 --> 00:22:22,980
easier to do to visualize the

515
00:22:19,150 --> 00:22:22,980
differences between two computing prefix

516
00:22:23,040 --> 00:22:32,920
so our first block identical prefix

517
00:22:28,240 --> 00:22:35,860
collision which is fast color first

518
00:22:32,920 --> 00:22:37,840
warning collide collision computing is a

519
00:22:35,860 --> 00:22:41,919
very random process people just expect

520
00:22:37,840 --> 00:22:43,840
that it runs it finishes no sometimes

521
00:22:41,920 --> 00:22:46,000
actually one of the parameter is seeded

522
00:22:43,840 --> 00:22:50,439
on your time and depending on the value

523
00:22:46,000 --> 00:22:52,300
it can takes 0.3 second or a lot more 13

524
00:22:50,440 --> 00:22:54,280
second insane machine it can really take

525
00:22:52,300 --> 00:22:57,190
you can be really lucky can take two

526
00:22:54,280 --> 00:23:01,480
hours for big computation or 15 hours

527
00:22:57,190 --> 00:23:06,220
the next time so don't worry first it

528
00:23:01,480 --> 00:23:08,320
depends on your system and sometimes the

529
00:23:06,220 --> 00:23:11,920
result is different each execution

530
00:23:08,320 --> 00:23:14,860
because basically compute computing the

531
00:23:11,920 --> 00:23:17,470
collision is just trying some stuff and

532
00:23:14,860 --> 00:23:19,870
verifying some equations until some all

533
00:23:17,470 --> 00:23:21,490
the questions are verified and if it's

534
00:23:19,870 --> 00:23:23,370
not verified and continue the loop it's

535
00:23:21,490 --> 00:23:26,020
like a big loop and it's retries a lot

536
00:23:23,370 --> 00:23:28,120
okay so really people just expect it's

537
00:23:26,020 --> 00:23:29,650
always the same time and the computing

538
00:23:28,120 --> 00:23:32,260
time from one machine to the other could

539
00:23:29,650 --> 00:23:34,120
be like very different one thing is that

540
00:23:32,260 --> 00:23:38,679
we will not use anything that requires

541
00:23:34,120 --> 00:23:41,159
GPU acceleration no CUDA so this is not

542
00:23:38,679 --> 00:23:45,010
making a difference here and actually

543
00:23:41,160 --> 00:23:47,590
sha-1 was the shaman attack was one big

544
00:23:45,010 --> 00:23:51,040
step with the CPU only and one big step

545
00:23:47,590 --> 00:23:51,520
with the GPU so in underneath it's

546
00:23:51,040 --> 00:23:56,080
complex

547
00:23:51,520 --> 00:23:57,580
we'll skip that in some ties with some

548
00:23:56,080 --> 00:24:04,629
collision it just doesn't work so just

549
00:23:57,580 --> 00:24:07,300
retry ok so it start and so who's

550
00:24:04,630 --> 00:24:11,190
willing to try to compute and has a fast

551
00:24:07,300 --> 00:24:15,250
call ready to compute and wants to

552
00:24:11,190 --> 00:24:16,060
collect computer binaries either the Y

553
00:24:15,250 --> 00:24:19,390
the win

554
00:24:16,060 --> 00:24:23,530
binary with wine or okay not so many

555
00:24:19,390 --> 00:24:28,540
hands like no hands okay so we do in

556
00:24:23,530 --> 00:24:31,300
total theory mode just I mean this is

557
00:24:28,540 --> 00:24:33,460
just easy right this takes you can takes

558
00:24:31,300 --> 00:24:35,470
place a few seconds so if you can see if

559
00:24:33,460 --> 00:24:37,810
you had a hodge clash already just try

560
00:24:35,470 --> 00:24:39,940
to compile and compile it or get the

561
00:24:37,810 --> 00:24:43,830
windows binary or maybe we'll do later

562
00:24:39,940 --> 00:24:43,830
but in the meantime I'll take some water

563
00:24:44,760 --> 00:24:49,450
Hodge clashes has all the attacks okay

564
00:24:48,280 --> 00:24:51,850
this part of hush-hush

565
00:24:49,450 --> 00:24:59,050
this is a harsh clash as a first call

566
00:24:51,850 --> 00:25:18,429
you Nicole and the CPC but when you do

567
00:24:59,050 --> 00:25:35,169
suggest now yeah the questions in the

568
00:25:18,430 --> 00:25:39,970
meantime so just create an empty file

569
00:25:35,170 --> 00:25:42,160
and just run it as a prefix like they

570
00:25:39,970 --> 00:25:43,390
would not be any prefix before the

571
00:25:42,160 --> 00:25:51,910
collision blocks we will see what it

572
00:25:43,390 --> 00:25:56,440
means later so I'll move on you obtain

573
00:25:51,910 --> 00:26:00,820
something that looks very random very

574
00:25:56,440 --> 00:26:03,970
high entropy two blocks with only a few

575
00:26:00,820 --> 00:26:09,399
differences very few differences at a

576
00:26:03,970 --> 00:26:11,620
very specific obsess okay so the content

577
00:26:09,400 --> 00:26:14,550
is totally cryptic the content is

578
00:26:11,620 --> 00:26:17,260
different but they have the same hash

579
00:26:14,550 --> 00:26:20,950
yeah just I can actually show you what

580
00:26:17,260 --> 00:26:24,660
it would mean would look like it's just

581
00:26:20,950 --> 00:26:28,020
it only takes a few seconds so I mean

582
00:26:24,660 --> 00:26:28,020
you're in time

583
00:26:29,200 --> 00:26:35,780
and this duck duck Duck Duck

584
00:26:33,370 --> 00:26:37,370
it's chilly and then it's done and they

585
00:26:35,780 --> 00:26:40,780
say they have the same hush so it's

586
00:26:37,370 --> 00:26:43,100
really I need first call always works

587
00:26:40,780 --> 00:26:48,260
and they always called they always call

588
00:26:43,100 --> 00:27:00,889
I'd Indian so tree very very very fast

589
00:26:48,260 --> 00:27:02,740
so we're two blocks of 64 bytes totally

590
00:27:00,890 --> 00:27:06,200
random and a few tiny differences and

591
00:27:02,740 --> 00:27:10,340
the order s is identical which is why I

592
00:27:06,200 --> 00:27:14,299
show it like this now if you run it

593
00:27:10,340 --> 00:27:18,350
again it might give a totally different

594
00:27:14,299 --> 00:27:21,168
time and it the result will be

595
00:27:18,350 --> 00:27:21,830
completely different still totally

596
00:27:21,169 --> 00:27:24,919
random

597
00:27:21,830 --> 00:27:27,500
so the ASCII the ASCII column is totally

598
00:27:24,919 --> 00:27:32,450
irrelevant but the difference are

599
00:27:27,500 --> 00:27:34,340
exactly the same of sense so much

600
00:27:32,450 --> 00:27:36,559
collagen is a big pile of computed

601
00:27:34,340 --> 00:27:39,020
randomness which is why the final hash

602
00:27:36,559 --> 00:27:40,850
is not known in advance this is full of

603
00:27:39,020 --> 00:27:42,379
randomness we have no idea what the

604
00:27:40,850 --> 00:27:44,600
final we at the end we can compute the

605
00:27:42,380 --> 00:27:46,130
final hash but we are not trying to aim

606
00:27:44,600 --> 00:27:46,570
for specific college this is not what

607
00:27:46,130 --> 00:27:59,110
it's about

608
00:27:46,570 --> 00:28:02,270
yes offset exactly because it's

609
00:27:59,110 --> 00:28:05,270
exploiting it's because of tricks in the

610
00:28:02,270 --> 00:28:06,500
md5 structure so it will be exactly the

611
00:28:05,270 --> 00:28:08,059
same offsets which is why it's

612
00:28:06,500 --> 00:28:09,500
predictable even though some part is

613
00:28:08,059 --> 00:28:11,480
predictable even though there's a lot or

614
00:28:09,500 --> 00:28:13,610
all randomness and even the value here

615
00:28:11,480 --> 00:28:23,960
will be different but you would know

616
00:28:13,610 --> 00:28:29,299
what the difference is yes yeah it's

617
00:28:23,960 --> 00:28:32,270
totally different exercise just a very

618
00:28:29,299 --> 00:28:34,460
much longer here it's instant and it's

619
00:28:32,270 --> 00:28:36,760
still be harsh and it's still a lot of

620
00:28:34,460 --> 00:28:36,760
data

621
00:28:40,510 --> 00:28:46,550
yes actually I will I think I mentioned

622
00:28:44,480 --> 00:28:48,800
later but there is a story behind the

623
00:28:46,550 --> 00:28:51,379
first and if I collision which was found

624
00:28:48,800 --> 00:28:55,669
by a Chinese woman or Chinese researcher

625
00:28:51,380 --> 00:28:58,970
and she she found these shortcuts by pen

626
00:28:55,670 --> 00:29:02,480
and paper by looking at the specs for an

627
00:28:58,970 --> 00:29:04,340
incredible amount of time and there's a

628
00:29:02,480 --> 00:29:05,240
very good background story because

629
00:29:04,340 --> 00:29:07,490
initially there was some

630
00:29:05,240 --> 00:29:08,870
misunderstanding so it didn't collide

631
00:29:07,490 --> 00:29:15,230
and whatever it's it's an interesting

632
00:29:08,870 --> 00:29:18,739
story but pen and paper like what Mac

633
00:29:15,230 --> 00:29:21,560
Stevens think it's normal I can do that

634
00:29:18,740 --> 00:29:26,150
I cannot I definitely cannot let me know

635
00:29:21,560 --> 00:29:28,970
if you can so yes the differences will

636
00:29:26,150 --> 00:29:31,910
be always at the same offset which is

637
00:29:28,970 --> 00:29:35,390
why if you plan something to aim to you

638
00:29:31,910 --> 00:29:39,710
rely on these bytes exact bite you will

639
00:29:35,390 --> 00:29:42,170
you know the difference is there yes

640
00:29:39,710 --> 00:30:01,580
this is the YouTube video regarding the

641
00:29:42,170 --> 00:30:03,500
defining the initial finding yes this

642
00:30:01,580 --> 00:30:07,600
well this is totally generated by the

643
00:30:03,500 --> 00:30:09,830
tool so this is like added to the file

644
00:30:07,600 --> 00:30:13,100
yeah because the origin here the

645
00:30:09,830 --> 00:30:14,659
original file you supply this empty so

646
00:30:13,100 --> 00:30:16,399
it's this is just the result of the

647
00:30:14,660 --> 00:30:18,170
computation and all the collisions

648
00:30:16,400 --> 00:30:20,960
attack are just computing some stuff

649
00:30:18,170 --> 00:30:24,410
depending on what's before and it's full

650
00:30:20,960 --> 00:30:27,410
of randomness so you cannot come in we

651
00:30:24,410 --> 00:30:33,110
will see but this you cannot you don't

652
00:30:27,410 --> 00:30:36,530
know what will be there it's random so

653
00:30:33,110 --> 00:30:40,219
now okay if you put a prefix just

654
00:30:36,530 --> 00:30:44,180
anything and you can supply it to the

655
00:30:40,220 --> 00:30:44,840
collision to the computation the value

656
00:30:44,180 --> 00:30:47,510
the prefix

657
00:30:44,840 --> 00:30:50,770
very important the length of the prefix

658
00:30:47,510 --> 00:30:53,700
whether it's null or super long whether

659
00:30:50,770 --> 00:30:56,830
it's full of zeros or high entropy

660
00:30:53,700 --> 00:30:59,110
doesn't change at all the content of the

661
00:30:56,830 --> 00:31:00,850
prefix we just said initial value and it

662
00:30:59,110 --> 00:31:03,909
doesn't make any difference in the speed

663
00:31:00,850 --> 00:31:05,980
of computations so collision speed

664
00:31:03,910 --> 00:31:13,320
because speed doesn't depend on the

665
00:31:05,980 --> 00:31:18,910
original content of the prefix yes

666
00:31:13,320 --> 00:31:21,220
spoiler so what we get as computation is

667
00:31:18,910 --> 00:31:23,100
exactly what we asked as a prefix then

668
00:31:21,220 --> 00:31:25,780
there is some padding to the end of the

669
00:31:23,100 --> 00:31:30,699
next block we'll see that later and

670
00:31:25,780 --> 00:31:34,510
after that I did auto collision are two

671
00:31:30,700 --> 00:31:36,880
blocks of two times 64 bytes so our

672
00:31:34,510 --> 00:31:39,010
prefix whatever it was some padding

673
00:31:36,880 --> 00:31:42,660
which is here full of zeros but it could

674
00:31:39,010 --> 00:31:45,550
be full of anything and here again

675
00:31:42,660 --> 00:31:47,680
collision blocks with again the same

676
00:31:45,550 --> 00:31:49,419
differences at local the same local

677
00:31:47,680 --> 00:31:52,390
offsets and if you notice that it's two

678
00:31:49,420 --> 00:32:02,230
blocks and the local differences are the

679
00:31:52,390 --> 00:32:05,020
same per block any questions so this md5

680
00:32:02,230 --> 00:32:08,200
sha-1 sure to defer the work with blocks

681
00:32:05,020 --> 00:32:14,100
of 64 bytes from starts of the file to

682
00:32:08,200 --> 00:32:16,870
the end and they always do they always

683
00:32:14,100 --> 00:32:19,780
how do you say and there is a property

684
00:32:16,870 --> 00:32:21,909
that if it's a block boundary these two

685
00:32:19,780 --> 00:32:24,100
things have the same hash where whenever

686
00:32:21,910 --> 00:32:26,890
you add something after that the hash

687
00:32:24,100 --> 00:32:31,000
will remain the same this is very

688
00:32:26,890 --> 00:32:33,370
important so you see really why we we

689
00:32:31,000 --> 00:32:35,170
speak in blocks because we know these

690
00:32:33,370 --> 00:32:36,760
blocks are 64 bytes and if you align

691
00:32:35,170 --> 00:32:46,810
them it's four lines so it's really

692
00:32:36,760 --> 00:32:49,720
Tetris I mean countries yes when when

693
00:32:46,810 --> 00:32:52,000
when you have two files and decide the

694
00:32:49,720 --> 00:32:53,530
same hash at the block boundary at this

695
00:32:52,000 --> 00:32:56,410
point you have to save up if you because

696
00:32:53,530 --> 00:32:58,389
it was from start to end with blocks if

697
00:32:56,410 --> 00:33:00,370
you add the same thing if you have the

698
00:32:58,390 --> 00:33:05,490
same thing on each side it still

699
00:33:00,370 --> 00:33:05,489
maintains the same hash so like yes

700
00:33:06,480 --> 00:33:11,770
yes exactly

701
00:33:09,150 --> 00:33:13,780
and the collision computation depending

702
00:33:11,770 --> 00:33:15,730
on the exact content with what was

703
00:33:13,780 --> 00:33:17,290
before if you modify a single bit the

704
00:33:15,730 --> 00:33:21,640
computation has to be redone from

705
00:33:17,290 --> 00:33:24,159
scratch knows no shortcuts which is why

706
00:33:21,640 --> 00:33:26,080
once I did a computation that was super

707
00:33:24,160 --> 00:33:28,330
I mean it was took two hours and I had

708
00:33:26,080 --> 00:33:29,889
what like one bit wrong and I had to

709
00:33:28,330 --> 00:33:32,080
retry the competition after fixing that

710
00:33:29,890 --> 00:33:35,230
bit and I was less a lot less lucky on

711
00:33:32,080 --> 00:33:35,919
the second time and took 15 hours so

712
00:33:35,230 --> 00:33:39,030
from 2 hours

713
00:33:35,920 --> 00:33:42,430
oops 15 hours so plan your prefix well

714
00:33:39,030 --> 00:33:45,010
and this is also why I spent a lot of

715
00:33:42,430 --> 00:33:47,200
time double-checking triple check I mean

716
00:33:45,010 --> 00:33:50,590
I don't know how many times what would

717
00:33:47,200 --> 00:33:52,740
be the sha-1 computation because 6000

718
00:33:50,590 --> 00:33:55,679
years I didn't want to screw that up and

719
00:33:52,740 --> 00:33:59,200
I almost

720
00:33:55,680 --> 00:34:02,920
so all these attacks work with those

721
00:33:59,200 --> 00:34:04,270
alignments and then the padding then

722
00:34:02,920 --> 00:34:08,530
adding a blob boundaries

723
00:34:04,270 --> 00:34:10,500
some an amount of block from 1 to 9 or

724
00:34:08,530 --> 00:34:13,570
something but always it works by blocks

725
00:34:10,500 --> 00:34:17,770
which means via these attacks every pair

726
00:34:13,570 --> 00:34:20,860
of the same with the same hash of the

727
00:34:17,770 --> 00:34:25,090
same length in the end of the file is

728
00:34:20,860 --> 00:34:26,500
either identical if there is a suffix if

729
00:34:25,090 --> 00:34:29,560
there is this case and the end of the

730
00:34:26,500 --> 00:34:31,750
file is identical and if you go back up

731
00:34:29,560 --> 00:34:33,639
to the collision blocks then there is

732
00:34:31,750 --> 00:34:36,040
high entropy and differences are given

733
00:34:33,639 --> 00:34:37,569
upset so if you look at the end of the

734
00:34:36,040 --> 00:34:39,100
file and they have the same length and

735
00:34:37,570 --> 00:34:42,580
if you look at the end of the file it's

736
00:34:39,100 --> 00:34:43,929
very suspicious and this is the case for

737
00:34:42,580 --> 00:34:51,219
all these attacks including the sha-1

738
00:34:43,929 --> 00:34:53,199
one shattered so we always work with 64

739
00:34:51,219 --> 00:34:56,259
block and again double check your hex

740
00:34:53,199 --> 00:34:58,689
viewer wrapping to not waste time what

741
00:34:56,260 --> 00:35:02,230
what's wrong with my blocks are because

742
00:34:58,690 --> 00:35:04,450
some sometimes we were do that so

743
00:35:02,230 --> 00:35:07,950
congrats so you when you reach a point

744
00:35:04,450 --> 00:35:12,960
you completed your first house collision

745
00:35:07,950 --> 00:35:12,960
print your own certificate any questions

746
00:35:14,160 --> 00:35:20,129
so as a recap we

747
00:35:17,430 --> 00:35:22,140
we define the start of the file the

748
00:35:20,130 --> 00:35:25,650
computation will depend exactly on its

749
00:35:22,140 --> 00:35:27,410
content but the whatsits inside doesn't

750
00:35:25,650 --> 00:35:29,880
matter at all

751
00:35:27,410 --> 00:35:33,058
it's crypto it doesn't will not do any

752
00:35:29,880 --> 00:35:38,490
analysis whether it's French

753
00:35:33,059 --> 00:35:41,490
or random data then there is a padding

754
00:35:38,490 --> 00:35:43,799
which is just to get at a multiple of 64

755
00:35:41,490 --> 00:35:45,058
bytes as a block boundary and it could

756
00:35:43,800 --> 00:35:47,880
be full of zeros or it could be your

757
00:35:45,059 --> 00:35:51,450
favorite ASCII art because that's what I

758
00:35:47,880 --> 00:35:55,530
do it's just here to align things to

759
00:35:51,450 --> 00:35:57,558
block boundaries and then this depending

760
00:35:55,530 --> 00:36:00,480
on what's before some blocks are added

761
00:35:57,559 --> 00:36:02,960
depending on what area and full of

762
00:36:00,480 --> 00:36:05,099
randomness with a few differences and

763
00:36:02,960 --> 00:36:09,059
these blocks will only work for that

764
00:36:05,099 --> 00:36:10,829
exact perfect and then after that since

765
00:36:09,059 --> 00:36:13,410
you have the same hash at this point you

766
00:36:10,829 --> 00:36:17,180
can add whatever you want on both side

767
00:36:13,410 --> 00:36:21,180
it will add it will keep the same hash

768
00:36:17,180 --> 00:36:25,259
so in an identical prefix hash

769
00:36:21,180 --> 00:36:27,629
collisions are an IPC is whether it's a

770
00:36:25,260 --> 00:36:30,599
first call or another IPC it always

771
00:36:27,630 --> 00:36:32,640
takes a single input the faster and

772
00:36:30,599 --> 00:36:36,569
because the prefix and a suffix if it's

773
00:36:32,640 --> 00:36:40,529
there are identical only the very few

774
00:36:36,569 --> 00:36:42,270
indexes values in the collision blocks

775
00:36:40,530 --> 00:36:44,190
will be different so the two files are

776
00:36:42,270 --> 00:36:45,960
like almost identical now the trick is

777
00:36:44,190 --> 00:36:47,940
that you will still want them to be to

778
00:36:45,960 --> 00:36:51,000
look very different even though they

779
00:36:47,940 --> 00:36:56,099
have only a few bits of difference does

780
00:36:51,000 --> 00:36:58,410
it make sense then again this is common

781
00:36:56,099 --> 00:37:02,520
even to shattered or to all the IPC's

782
00:36:58,410 --> 00:37:05,910
that are here so what can we do with

783
00:37:02,520 --> 00:37:08,880
that we need to have the right

784
00:37:05,910 --> 00:37:10,558
alignments then we need to that the

785
00:37:08,880 --> 00:37:13,319
randomness is not a problem for the

786
00:37:10,559 --> 00:37:15,869
parser we need to that these tiny

787
00:37:13,319 --> 00:37:20,180
difference have impact on the parsing

788
00:37:15,869 --> 00:37:22,680
and then again whatever we put afterward

789
00:37:20,180 --> 00:37:24,299
will be ignore but that's appended data

790
00:37:22,680 --> 00:37:27,180
for 500 it is pretty common but the rest

791
00:37:24,299 --> 00:37:29,009
is very hard so I think it's pretty

792
00:37:27,180 --> 00:37:30,870
clear why it's so hard to exploit first

793
00:37:29,010 --> 00:37:34,290
call we

794
00:37:30,870 --> 00:37:39,600
the start alignments this Howdy's a oh

795
00:37:34,290 --> 00:37:41,970
yeah just yeah tiny difference yeah yeah

796
00:37:39,600 --> 00:37:43,890
I think we covered that already so first

797
00:37:41,970 --> 00:37:46,169
call it's hard to exploit because the

798
00:37:43,890 --> 00:37:48,359
differences are in the middle surrounded

799
00:37:46,170 --> 00:37:50,910
with random data and that's the only

800
00:37:48,360 --> 00:37:52,650
difference between you two files so they

801
00:37:50,910 --> 00:37:55,290
are very few file format that actually

802
00:37:52,650 --> 00:37:56,820
work with that and there is one in this

803
00:37:55,290 --> 00:37:58,110
slide but we will not cover because it

804
00:37:56,820 --> 00:37:59,640
should be too hard but if you want to

805
00:37:58,110 --> 00:38:02,640
spend more time on the slides its

806
00:37:59,640 --> 00:38:07,680
explained you'll have a question okay

807
00:38:02,640 --> 00:38:10,560
just scratching your back so why is so

808
00:38:07,680 --> 00:38:12,750
difficult because differences are

809
00:38:10,560 --> 00:38:14,940
surrounded by random data and you should

810
00:38:12,750 --> 00:38:16,860
declare a structure a valid structure

811
00:38:14,940 --> 00:38:19,140
for the file format and at the same time

812
00:38:16,860 --> 00:38:20,610
something that is different that makes a

813
00:38:19,140 --> 00:38:22,650
difference in the rendering with a

814
00:38:20,610 --> 00:38:24,210
single byte that you don't even know the

815
00:38:22,650 --> 00:38:27,690
value that is surrounded by randomness

816
00:38:24,210 --> 00:38:30,090
so one thing you can do is that on the

817
00:38:27,690 --> 00:38:32,880
other hand if you run some code you can

818
00:38:30,090 --> 00:38:34,650
just check hey is my bite is the bit

819
00:38:32,880 --> 00:38:37,890
here set or not and then have two

820
00:38:34,650 --> 00:38:40,290
behaviors that's trick but it also works

821
00:38:37,890 --> 00:38:43,049
and this is how for the sha-1 collision

822
00:38:40,290 --> 00:38:46,740
the files also had a JavaScript payload

823
00:38:43,050 --> 00:38:49,650
that was checking the difference how do

824
00:38:46,740 --> 00:38:53,240
you say the different the the value here

825
00:38:49,650 --> 00:38:55,800
without knowing them in advance but just

826
00:38:53,240 --> 00:38:58,500
having two different behaviors evil or

827
00:38:55,800 --> 00:39:00,810
good and then you send the good file you

828
00:38:58,500 --> 00:39:05,370
get to isolated and then you can send

829
00:39:00,810 --> 00:39:07,950
the malicious file another workaround is

830
00:39:05,370 --> 00:39:10,220
just brute do brute forcing or if you

831
00:39:07,950 --> 00:39:12,270
remember I mentioned how that a

832
00:39:10,220 --> 00:39:14,129
collision computation is a very random

833
00:39:12,270 --> 00:39:17,460
process so you see it's a really a while

834
00:39:14,130 --> 00:39:19,260
with a lot of if this not equal to this

835
00:39:17,460 --> 00:39:22,170
then continue and if this is really

836
00:39:19,260 --> 00:39:24,270
trying a lot of things and you can if

837
00:39:22,170 --> 00:39:26,760
you want to have smarter rule forcing

838
00:39:24,270 --> 00:39:28,320
you can just add an extra condition so

839
00:39:26,760 --> 00:39:31,680
that your brute forcing is just not

840
00:39:28,320 --> 00:39:34,650
totally done that's how yeah this is

841
00:39:31,680 --> 00:39:36,930
what this was demonstrated by spq in the

842
00:39:34,650 --> 00:39:38,120
one of the article of paco gtfo but we

843
00:39:36,930 --> 00:39:41,279
don't need to actually do that because

844
00:39:38,120 --> 00:39:43,380
one day i was like there is this first

845
00:39:41,280 --> 00:39:44,490
call that is super fast but how to

846
00:39:43,380 --> 00:39:47,400
exploit there is

847
00:39:44,490 --> 00:39:50,339
clash that we will see later that is

848
00:39:47,400 --> 00:39:53,990
takes hours is super-powerful but still

849
00:39:50,340 --> 00:39:56,160
takes hours for a pair and then I ask

850
00:39:53,990 --> 00:39:59,759
must events do you have something in

851
00:39:56,160 --> 00:40:03,299
between something slower but that is

852
00:39:59,760 --> 00:40:05,030
more potential able and thankfully he

853
00:40:03,300 --> 00:40:09,510
created a Unicode

854
00:40:05,030 --> 00:40:11,010
so for fast car important so far instant

855
00:40:09,510 --> 00:40:14,310
computation doesn't give instant

856
00:40:11,010 --> 00:40:16,260
exploitation right we need because fast

857
00:40:14,310 --> 00:40:18,720
call is the only instant almost instant

858
00:40:16,260 --> 00:40:20,250
computation and it's impossible to

859
00:40:18,720 --> 00:40:22,649
exploit or almost impossible to exploit

860
00:40:20,250 --> 00:40:24,360
so we need to combine all the stuff you

861
00:40:22,650 --> 00:40:27,240
saw with PDFs and other formats we need

862
00:40:24,360 --> 00:40:29,600
to combine that with file for matrix is

863
00:40:27,240 --> 00:40:29,600
that clear

864
00:40:30,619 --> 00:40:37,770
sorry you had a question ok so now now

865
00:40:35,670 --> 00:40:40,850
we need to know what kind of file format

866
00:40:37,770 --> 00:40:43,710
tricks we need so basics of file formats

867
00:40:40,850 --> 00:40:47,069
from the high levels a general structure

868
00:40:43,710 --> 00:40:48,660
of a file format enger' is that there is

869
00:40:47,070 --> 00:40:51,780
a header at the start of the file it

870
00:40:48,660 --> 00:40:54,029
defines the file type and it also gives

871
00:40:51,780 --> 00:40:56,910
some information about the files like

872
00:40:54,030 --> 00:40:59,609
the dimensions the color space the video

873
00:40:56,910 --> 00:41:03,149
duration this kind of thing its metadata

874
00:40:59,609 --> 00:41:05,190
but then the important data is in the

875
00:41:03,150 --> 00:41:07,560
body which comes after the header and

876
00:41:05,190 --> 00:41:09,540
this body can actually in general it's

877
00:41:07,560 --> 00:41:11,279
really as a single thing but it's

878
00:41:09,540 --> 00:41:14,970
actually made of several object that can

879
00:41:11,280 --> 00:41:16,770
be moved around which is very important

880
00:41:14,970 --> 00:41:18,240
and another thing is at the end of the

881
00:41:16,770 --> 00:41:20,580
body once all the elements of the body

882
00:41:18,240 --> 00:41:22,379
are present there's a footer and the

883
00:41:20,580 --> 00:41:24,779
property of the footer is to say this

884
00:41:22,380 --> 00:41:26,670
file is complete and whatever is of the

885
00:41:24,780 --> 00:41:28,170
footer after the footer is ignore which

886
00:41:26,670 --> 00:41:31,320
is very useful so that we put put some

887
00:41:28,170 --> 00:41:32,760
other extra random data and it would be

888
00:41:31,320 --> 00:41:34,910
ignore the file will still be considered

889
00:41:32,760 --> 00:41:34,910
valid

890
00:41:35,000 --> 00:41:40,770
so this format typically accepts

891
00:41:38,369 --> 00:41:45,810
comments and it come out usually is just

892
00:41:40,770 --> 00:41:46,980
a text the single text about the URL

893
00:41:45,810 --> 00:41:50,369
where you downloaded the file or

894
00:41:46,980 --> 00:41:54,180
anything but in practice comments can

895
00:41:50,369 --> 00:41:56,730
contain anything like random collision

896
00:41:54,180 --> 00:41:58,720
blocks you see where it is going

897
00:41:56,730 --> 00:42:01,450
or it can be

898
00:41:58,720 --> 00:42:04,720
any arbitrary length which is perfect

899
00:42:01,450 --> 00:42:06,819
for aligning things and the good thing

900
00:42:04,720 --> 00:42:08,319
is that they are not counted like

901
00:42:06,819 --> 00:42:11,500
usually there's only one command per

902
00:42:08,319 --> 00:42:13,000
file because kind of makes sense but in

903
00:42:11,500 --> 00:42:15,280
practice they are just ignored so a

904
00:42:13,000 --> 00:42:17,859
comment block typically for file format

905
00:42:15,280 --> 00:42:23,440
just means ignore the next X bytes and

906
00:42:17,859 --> 00:42:25,180
if I created a jpg with 2000 comments if

907
00:42:23,440 --> 00:42:28,390
you see Y then let me know your

908
00:42:25,180 --> 00:42:29,770
underpriced my bottle but it's possible

909
00:42:28,390 --> 00:42:31,299
the parser don't care they don't count

910
00:42:29,770 --> 00:42:33,130
the commands that don't validate any of

911
00:42:31,300 --> 00:42:37,210
the value the data that is inside and

912
00:42:33,130 --> 00:42:39,460
the file is still valid and these

913
00:42:37,210 --> 00:42:42,040
commands usually they are before the

914
00:42:39,460 --> 00:42:45,310
comments does this paste this ignored

915
00:42:42,040 --> 00:42:48,609
space that the length is defined so if

916
00:42:45,310 --> 00:42:50,380
you align this length declaration with

917
00:42:48,609 --> 00:42:53,500
the collision difference then you see

918
00:42:50,380 --> 00:42:55,900
that the length of the comment will

919
00:42:53,500 --> 00:42:58,599
change which means you will jump a

920
00:42:55,900 --> 00:43:01,540
different distance you see where this is

921
00:42:58,599 --> 00:43:04,990
going it can provide padding they can

922
00:43:01,540 --> 00:43:08,470
provide ignoring randomness and the

923
00:43:04,990 --> 00:43:10,660
declaration makes them of variable

924
00:43:08,470 --> 00:43:13,209
length if if required and you can use

925
00:43:10,660 --> 00:43:15,848
them as many as you want and here you

926
00:43:13,210 --> 00:43:19,329
need three so you see where this is

927
00:43:15,849 --> 00:43:22,780
going we need to have three comments of

928
00:43:19,329 --> 00:43:25,569
typical misunderstanding of parsers in

929
00:43:22,780 --> 00:43:26,380
general is that usually on your computer

930
00:43:25,569 --> 00:43:29,050
on the Internet

931
00:43:26,380 --> 00:43:31,060
the files that you download are valid

932
00:43:29,050 --> 00:43:34,210
and perfectly ordered like is made by

933
00:43:31,060 --> 00:43:36,339
Germans or Swiss it's like perfect and

934
00:43:34,210 --> 00:43:38,410
there's not a single wasted byte but in

935
00:43:36,339 --> 00:43:40,480
practice because there are all kinds of

936
00:43:38,410 --> 00:43:44,140
libraries the parcels that you typically

937
00:43:40,480 --> 00:43:45,640
use or have to be much more resilient

938
00:43:44,140 --> 00:43:47,230
than that they don't expect a perfect

939
00:43:45,640 --> 00:43:49,450
file and suddenly or suddenly they don't

940
00:43:47,230 --> 00:43:51,670
work they actually will behave like a

941
00:43:49,450 --> 00:43:54,069
detective as if you're in an escape room

942
00:43:51,670 --> 00:43:56,640
and you have to gather the hints and

943
00:43:54,069 --> 00:43:59,710
when you explore everything in the room

944
00:43:56,640 --> 00:44:02,470
you have the solution because you gather

945
00:43:59,710 --> 00:44:04,150
all the hints and in which order did you

946
00:44:02,470 --> 00:44:06,910
gather the hints it doesn't matter as

947
00:44:04,150 --> 00:44:09,190
long as you have the solution so all the

948
00:44:06,910 --> 00:44:12,460
files on your on our systems typically

949
00:44:09,190 --> 00:44:15,010
have a very perfect structure but in

950
00:44:12,460 --> 00:44:17,080
the robbers posture that we use are like

951
00:44:15,010 --> 00:44:18,940
just gathering the clues and at the end

952
00:44:17,080 --> 00:44:20,560
when they reach the footer do I have all

953
00:44:18,940 --> 00:44:23,530
the elements yes the file is valid

954
00:44:20,560 --> 00:44:29,380
that's how it actually works and will

955
00:44:23,530 --> 00:44:31,870
abuse that begin so we want to abuse

956
00:44:29,380 --> 00:44:34,300
that we know that we can move stuff

957
00:44:31,870 --> 00:44:36,250
around in which order we please so that

958
00:44:34,300 --> 00:44:38,620
the collision is happy and the parser is

959
00:44:36,250 --> 00:44:40,810
still ok we don't move the we don't

960
00:44:38,620 --> 00:44:43,420
modify the objects of the file but we

961
00:44:40,810 --> 00:44:50,830
just move them around so that it works

962
00:44:43,420 --> 00:44:52,990
with the collision structure so for

963
00:44:50,830 --> 00:44:55,690
example if you take a small file with a

964
00:44:52,990 --> 00:44:58,149
header a body of some elements and a

965
00:44:55,690 --> 00:44:59,800
footer and it just at one command or a

966
00:44:58,150 --> 00:45:02,020
longer command order a lot of comments

967
00:44:59,800 --> 00:45:03,970
and even some data at the end these

968
00:45:02,020 --> 00:45:07,690
files are strictly identical for a

969
00:45:03,970 --> 00:45:09,310
passer and in here you don't you just

970
00:45:07,690 --> 00:45:11,170
need to know where the boundaries are of

971
00:45:09,310 --> 00:45:13,090
your header body and footer you don't

972
00:45:11,170 --> 00:45:16,270
need to understand everything inside you

973
00:45:13,090 --> 00:45:18,670
just move data around so you can do so

974
00:45:16,270 --> 00:45:23,740
this is why it's instant to go from one

975
00:45:18,670 --> 00:45:28,660
file to the other quick sense skeptical

976
00:45:23,740 --> 00:45:30,939
though feel free to so if you take two

977
00:45:28,660 --> 00:45:33,190
files of the same type they have a

978
00:45:30,940 --> 00:45:37,030
different header and a different body

979
00:45:33,190 --> 00:45:39,130
and different footer so now you your you

980
00:45:37,030 --> 00:45:41,320
study the landscape urbeats to find some

981
00:45:39,130 --> 00:45:44,080
header that will work for both so maybe

982
00:45:41,320 --> 00:45:45,700
if things are not so nice so nice you

983
00:45:44,080 --> 00:45:48,029
have to make the two images of the same

984
00:45:45,700 --> 00:45:50,649
dimension so that they have this to be

985
00:45:48,030 --> 00:45:55,540
to have to fit under the same header or

986
00:45:50,650 --> 00:45:58,330
is something like this or yeah but same

987
00:45:55,540 --> 00:46:00,220
more less same condom then you do a

988
00:45:58,330 --> 00:46:05,560
computation the usual padding and

989
00:46:00,220 --> 00:46:10,870
collision and then you take the body and

990
00:46:05,560 --> 00:46:13,360
footer at the right you take the

991
00:46:10,870 --> 00:46:15,580
original body at footer of the original

992
00:46:13,360 --> 00:46:16,630
five without just copying the blocks you

993
00:46:15,580 --> 00:46:19,090
just keep the header you could be

994
00:46:16,630 --> 00:46:21,100
everything poof just after after this

995
00:46:19,090 --> 00:46:23,200
one after the other and then you just

996
00:46:21,100 --> 00:46:25,029
align things so that the difference is

997
00:46:23,200 --> 00:46:25,660
creating a comment of different lengths

998
00:46:25,030 --> 00:46:28,059
so that

999
00:46:25,660 --> 00:46:30,430
you either the difference of in your

1000
00:46:28,059 --> 00:46:33,069
collision will act as a switch to jump

1001
00:46:30,430 --> 00:46:35,259
to one or the other content and the

1002
00:46:33,069 --> 00:46:38,339
other good thing is that this depends

1003
00:46:35,260 --> 00:46:41,109
the collision depends on this but then

1004
00:46:38,339 --> 00:46:45,460
this will always jump and you don't need

1005
00:46:41,109 --> 00:46:47,529
to recompute anything make sense so the

1006
00:46:45,460 --> 00:46:49,329
suffix can change the fight will always

1007
00:46:47,530 --> 00:46:51,760
be valid because it's valid on both

1008
00:46:49,329 --> 00:46:56,170
sides and with it then you can seal

1009
00:46:51,760 --> 00:46:58,299
update any of the content so the prefix

1010
00:46:56,170 --> 00:47:00,490
R is identical the collision blocks are

1011
00:46:58,299 --> 00:47:02,799
depending on this and are fixed now

1012
00:47:00,490 --> 00:47:04,299
I mean after the computation time and

1013
00:47:02,799 --> 00:47:06,369
then you can open whatever you want

1014
00:47:04,299 --> 00:47:09,280
so the Hodge value will be disabled it's

1015
00:47:06,369 --> 00:47:10,869
just block is just playing Tetris and at

1016
00:47:09,280 --> 00:47:11,980
the end you run the tool and you have

1017
00:47:10,869 --> 00:47:16,089
the same hash because you know you

1018
00:47:11,980 --> 00:47:18,280
respected the rules of the game it's

1019
00:47:16,089 --> 00:47:20,109
like a ski jump with a new whatever is

1020
00:47:18,280 --> 00:47:25,990
here you just will always land a

1021
00:47:20,109 --> 00:47:28,808
different distance and whatever was in

1022
00:47:25,990 --> 00:47:31,299
original content because in one case it

1023
00:47:28,809 --> 00:47:36,520
will go here and then parse the same

1024
00:47:31,299 --> 00:47:37,869
header a command that keeps that then

1025
00:47:36,520 --> 00:47:39,670
the body and the footer it will render

1026
00:47:37,869 --> 00:47:43,270
like this file and here the jump is

1027
00:47:39,670 --> 00:47:45,940
longer and it will the parser will just

1028
00:47:43,270 --> 00:47:48,630
land on the original Buddha body and

1029
00:47:45,940 --> 00:47:51,849
footer of this file so these two files

1030
00:47:48,630 --> 00:47:55,930
which have the same hash

1031
00:47:51,849 --> 00:47:58,299
we're under as what you wanted them to

1032
00:47:55,930 --> 00:48:00,490
render as to be from arbitrary content

1033
00:47:58,299 --> 00:48:09,690
like mimikatz

1034
00:48:00,490 --> 00:48:09,689
and your holidays picture any questions

1035
00:48:09,809 --> 00:48:24,910
yeah well that's a part of the trick but

1036
00:48:22,960 --> 00:48:26,859
you haven't we'll just exactly see now

1037
00:48:24,910 --> 00:48:28,690
the collision that will enable us to do

1038
00:48:26,859 --> 00:48:29,799
that because with fast call it doesn't

1039
00:48:28,690 --> 00:48:32,650
make sense because it's full of random

1040
00:48:29,799 --> 00:48:35,619
is this does answer your question yes so

1041
00:48:32,650 --> 00:48:37,539
that's why now we need the hypothetical

1042
00:48:35,619 --> 00:48:38,799
weapon that I asked you Mac Stevens I

1043
00:48:37,539 --> 00:48:41,019
thought I asked something

1044
00:48:38,799 --> 00:48:44,489
but but so that's why we will do

1045
00:48:41,019 --> 00:48:48,578
something poetry

1046
00:48:44,489 --> 00:48:51,069
let's write a poem so you can put

1047
00:48:48,579 --> 00:48:54,209
leading space at the beginning and you

1048
00:48:51,069 --> 00:48:56,650
want to replace each of the 10th letter

1049
00:48:54,209 --> 00:49:00,910
with the next letter in the alphabet and

1050
00:48:56,650 --> 00:49:03,279
it still has a meaning the good thing is

1051
00:49:00,910 --> 00:49:06,788
that you can do that mentally you can

1052
00:49:03,279 --> 00:49:09,519
say Oh C is replaced with D G is

1053
00:49:06,789 --> 00:49:11,920
replaced with H you suddenly you don't

1054
00:49:09,519 --> 00:49:14,948
feel like a cryptographer you can just

1055
00:49:11,920 --> 00:49:18,309
say hey I know what it will come out now

1056
00:49:14,949 --> 00:49:20,499
let's go for binary 0 will be one who

1057
00:49:18,309 --> 00:49:23,069
you can add one it's not hard right

1058
00:49:20,499 --> 00:49:25,689
which is why it's pretty awesome

1059
00:49:23,069 --> 00:49:31,329
it's it's another IPC that is called you

1060
00:49:25,689 --> 00:49:35,979
Nicole so let's okay you will not

1061
00:49:31,329 --> 00:49:39,549
compute it here you Nicole you has some

1062
00:49:35,979 --> 00:49:41,218
specific restriction on the prefix so if

1063
00:49:39,549 --> 00:49:45,099
you start with the prefix of 20 bytes

1064
00:49:41,219 --> 00:49:49,839
exactly 20 bytes I will explain why you

1065
00:49:45,099 --> 00:49:54,789
compute and it takes a few minutes so

1066
00:49:49,839 --> 00:49:56,920
this is what it looks like so it looks

1067
00:49:54,789 --> 00:50:04,749
it will look like a more cryptic it

1068
00:49:56,920 --> 00:50:09,549
makes GCC very understandable okay it

1069
00:50:04,749 --> 00:50:21,479
should take a minute or so maybe take

1070
00:50:09,549 --> 00:50:21,479
two minutes all cryptic stuff

1071
00:50:30,160 --> 00:50:38,299
see makes GCC very understandable so

1072
00:50:36,980 --> 00:50:40,070
again if you don't understand why this

1073
00:50:38,300 --> 00:50:43,869
is maybe you don't want to watch Mark

1074
00:50:40,070 --> 00:50:49,250
Stephens talk about shattered if you do

1075
00:50:43,869 --> 00:50:51,260
please be my guest but the good thing is

1076
00:50:49,250 --> 00:50:53,900
that I asked him do you have an attack

1077
00:50:51,260 --> 00:50:57,050
and he was like sure check page check

1078
00:50:53,900 --> 00:50:59,510
chapter 8 of my thesis will see that I

1079
00:50:57,050 --> 00:51:12,650
was I'm glad he created the script to do

1080
00:50:59,510 --> 00:51:15,050
it for us and then at the end the magic

1081
00:51:12,650 --> 00:51:17,290
I mean he said it's not magic but just

1082
00:51:15,050 --> 00:51:17,290
tricks

1083
00:51:26,720 --> 00:51:30,890
shouldn't be too long because we are

1084
00:51:28,280 --> 00:51:33,260
almost at the end of the video I mean

1085
00:51:30,890 --> 00:51:34,940
it's it's another video is to tell me

1086
00:51:33,260 --> 00:51:36,980
our recording of text so you can still

1087
00:51:34,940 --> 00:51:39,650
copy paste if you want to yeah

1088
00:51:36,980 --> 00:51:43,300
and at the end same hash thank you Mark

1089
00:51:39,650 --> 00:51:43,300
for creating the script to do it for us

1090
00:51:45,670 --> 00:51:52,940
so at the end what we do we have we just

1091
00:51:50,359 --> 00:51:56,799
have a prefix here is my prefix that is

1092
00:51:52,940 --> 00:51:59,900
20 characters exactly then what happens

1093
00:51:56,800 --> 00:52:05,359
okay sometimes you Nicole fails in this

1094
00:51:59,900 --> 00:52:08,089
case just rerun it okay and now what we

1095
00:52:05,359 --> 00:52:10,759
have is we have two collision blocks but

1096
00:52:08,089 --> 00:52:15,950
our prefix is inside the collision block

1097
00:52:10,760 --> 00:52:18,470
of the first file and even more

1098
00:52:15,950 --> 00:52:21,348
impressive in the second file we have

1099
00:52:18,470 --> 00:52:23,930
our prefix and the 10th character was

1100
00:52:21,349 --> 00:52:25,819
replaced by the next letter so not only

1101
00:52:23,930 --> 00:52:28,700
we can plan what we have in the

1102
00:52:25,819 --> 00:52:30,710
collision block and they are we can plan

1103
00:52:28,700 --> 00:52:33,140
what is before and after the first

1104
00:52:30,710 --> 00:52:36,470
difference but we can also mentally

1105
00:52:33,140 --> 00:52:38,779
think easily what the value will be so

1106
00:52:36,470 --> 00:52:40,368
it like super powerful and now suddenly

1107
00:52:38,780 --> 00:52:42,260
you realize you can declare a structure

1108
00:52:40,369 --> 00:52:44,150
before or after and then you have a

1109
00:52:42,260 --> 00:52:47,480
length here and then you know that the

1110
00:52:44,150 --> 00:52:49,310
value will be just incremented by one so

1111
00:52:47,480 --> 00:52:51,319
you Nicole takes a minute which is or a

1112
00:52:49,310 --> 00:52:52,970
few minutes I mean if your machine is

1113
00:52:51,319 --> 00:52:55,300
not powered and it you're running into a

1114
00:52:52,970 --> 00:52:57,589
vm it you can take 20 minutes okay but

1115
00:52:55,300 --> 00:52:59,720
this is like super powerful in

1116
00:52:57,589 --> 00:53:05,180
comparison now we can really plan some

1117
00:52:59,720 --> 00:53:06,828
structure does that make sense so it's a

1118
00:53:05,180 --> 00:53:10,089
true unicorn of a collision it's a

1119
00:53:06,829 --> 00:53:12,500
knight an IPC where you can define data

1120
00:53:10,089 --> 00:53:15,140
before and after the first difference

1121
00:53:12,500 --> 00:53:17,450
and you can you know what the differ the

1122
00:53:15,140 --> 00:53:19,670
values will be in both case it's really

1123
00:53:17,450 --> 00:53:21,529
super super powerful super flexible even

1124
00:53:19,670 --> 00:53:25,160
though it only takes a few minutes to

1125
00:53:21,530 --> 00:53:27,829
compute so again this is a part of

1126
00:53:25,160 --> 00:53:29,899
chapter 8 of his thesis these are other

1127
00:53:27,829 --> 00:53:33,500
parameters of collision that were found

1128
00:53:29,900 --> 00:53:36,200
in other research papers so no it cannot

1129
00:53:33,500 --> 00:53:39,290
be at another offset of the tenth right

1130
00:53:36,200 --> 00:53:41,240
or if you can delete some of the it's

1131
00:53:39,290 --> 00:53:43,100
really specific to md5 properties right

1132
00:53:41,240 --> 00:53:45,140
and I'm thankful that he created the

1133
00:53:43,100 --> 00:53:49,370
script to do that instead of enjoying

1134
00:53:45,140 --> 00:53:51,319
Greek latech in the other working case

1135
00:53:49,370 --> 00:53:53,240
are not easy to exploit actually

1136
00:53:51,320 --> 00:53:55,070
covering them he implemented three cases

1137
00:53:53,240 --> 00:53:58,490
so these parameters are in the script

1138
00:53:55,070 --> 00:54:01,250
and you see that they come with from

1139
00:53:58,490 --> 00:54:02,689
these parameters and one another one is

1140
00:54:01,250 --> 00:54:05,000
interesting because there's a lot of

1141
00:54:02,690 --> 00:54:09,670
difference after the first difference

1142
00:54:05,000 --> 00:54:13,010
there's a lot of plain text the sorry

1143
00:54:09,670 --> 00:54:14,570
part of you prefix the differences

1144
00:54:13,010 --> 00:54:18,860
earlier in the prefix but here it's not

1145
00:54:14,570 --> 00:54:21,110
plus one okay so this is this can be

1146
00:54:18,860 --> 00:54:24,410
useful but in general the other one is

1147
00:54:21,110 --> 00:54:26,570
much more easy easy to use because it's

1148
00:54:24,410 --> 00:54:28,819
easy to do plus one mentally on the

1149
00:54:26,570 --> 00:54:36,920
tenth character of your blog any

1150
00:54:28,820 --> 00:54:38,480
questions okay so again you can look

1151
00:54:36,920 --> 00:54:41,600
real perfect can be bigger than a block

1152
00:54:38,480 --> 00:54:43,880
and then the data before will just be as

1153
00:54:41,600 --> 00:54:47,900
a prefix it will just be there and then

1154
00:54:43,880 --> 00:54:49,790
the last part the last block will be the

1155
00:54:47,900 --> 00:54:51,950
one integrated in the collision blocks

1156
00:54:49,790 --> 00:54:53,900
so you can still have whatever data you

1157
00:54:51,950 --> 00:54:56,540
want here and again this part doesn't

1158
00:54:53,900 --> 00:54:58,760
matter it just sets initial value so it

1159
00:54:56,540 --> 00:55:03,290
could be the start of any file format

1160
00:54:58,760 --> 00:55:06,980
you want now an important thing is that

1161
00:55:03,290 --> 00:55:08,720
the the the last block the the length of

1162
00:55:06,980 --> 00:55:11,630
this should be exactly a multiple of

1163
00:55:08,720 --> 00:55:13,970
four which is why because this is

1164
00:55:11,630 --> 00:55:16,790
actually how this function work with the

1165
00:55:13,970 --> 00:55:20,330
work with four blocks of four bytes in

1166
00:55:16,790 --> 00:55:23,590
computation so if that's why I use a

1167
00:55:20,330 --> 00:55:27,230
prefix that it was 20 bytes exactly

1168
00:55:23,590 --> 00:55:28,940
otherwise it will just not work but it

1169
00:55:27,230 --> 00:55:34,310
will just say I finish my work and then

1170
00:55:28,940 --> 00:55:37,700
it doesn't collide so yeah and we okay

1171
00:55:34,310 --> 00:55:40,400
not so important okay so you Nicole is

1172
00:55:37,700 --> 00:55:42,319
slower two blocks a few minutes but the

1173
00:55:40,400 --> 00:55:44,450
differences are in the prefix which is

1174
00:55:42,320 --> 00:55:48,110
super powerful and now maybe you can see

1175
00:55:44,450 --> 00:55:51,879
how you can exploit that and that's what

1176
00:55:48,110 --> 00:55:54,130
we're gonna do so

1177
00:55:51,880 --> 00:55:55,780
study for the format specs and look for

1178
00:55:54,130 --> 00:55:57,970
features you need to move blocks around

1179
00:55:55,780 --> 00:56:01,600
and understand what's the header how you

1180
00:55:57,970 --> 00:56:04,200
can how to format work then you have to

1181
00:56:01,600 --> 00:56:07,180
choose your if you can use fast car

1182
00:56:04,200 --> 00:56:09,220
unlikely but who knows or just use you

1183
00:56:07,180 --> 00:56:11,560
Nicole and then you create you plan your

1184
00:56:09,220 --> 00:56:14,589
file structure and then really important

1185
00:56:11,560 --> 00:56:17,230
step you create your mock file that has

1186
00:56:14,590 --> 00:56:19,870
the structure you want but just full of

1187
00:56:17,230 --> 00:56:21,580
garbage but that is not the computation

1188
00:56:19,870 --> 00:56:23,650
and you see the compatibility of that

1189
00:56:21,580 --> 00:56:24,430
file and tell you II telling you it's a

1190
00:56:23,650 --> 00:56:26,290
big time-saver

1191
00:56:24,430 --> 00:56:28,419
because here you see that they are like

1192
00:56:26,290 --> 00:56:29,620
nine blocks which means it was a hash

1193
00:56:28,420 --> 00:56:32,530
clash which means it's hours of

1194
00:56:29,620 --> 00:56:34,120
computation and this is gonna fail and

1195
00:56:32,530 --> 00:56:35,830
we're like what two hours cool cool

1196
00:56:34,120 --> 00:56:36,850
I have to change a single by a single

1197
00:56:35,830 --> 00:56:39,759
bit okay

1198
00:56:36,850 --> 00:56:41,920
oh eight fifteen hours of computation so

1199
00:56:39,760 --> 00:56:44,290
if you want to say this step of actually

1200
00:56:41,920 --> 00:56:46,690
crafting exactly the right structure and

1201
00:56:44,290 --> 00:56:49,240
then checking the compatibility imagine

1202
00:56:46,690 --> 00:56:50,860
it has the right the same hash is it

1203
00:56:49,240 --> 00:56:52,419
completely our both files working the

1204
00:56:50,860 --> 00:56:55,570
way you want you can even start your

1205
00:56:52,420 --> 00:57:02,200
script by manipulating structure with

1206
00:56:55,570 --> 00:57:04,840
this mock files and and and then you do

1207
00:57:02,200 --> 00:57:11,919
the you cut here and you do the actual

1208
00:57:04,840 --> 00:57:14,740
computation make sense so why is unique

1209
00:57:11,920 --> 00:57:16,690
all lots so easy to exploit again the

1210
00:57:14,740 --> 00:57:18,970
first difference is surrounded by chosen

1211
00:57:16,690 --> 00:57:22,510
text so there are no restriction to

1212
00:57:18,970 --> 00:57:24,129
declare a structure and a length and the

1213
00:57:22,510 --> 00:57:26,320
difference is plus one which is makes it

1214
00:57:24,130 --> 00:57:27,910
very easy to predict so with first of

1215
00:57:26,320 --> 00:57:30,760
all you had the difference surrounded

1216
00:57:27,910 --> 00:57:33,270
with garbage and here you can easily say

1217
00:57:30,760 --> 00:57:35,740
something like declare a chunk type and

1218
00:57:33,270 --> 00:57:38,560
then your length and in one case you

1219
00:57:35,740 --> 00:57:41,680
know that the length would be 71 in the

1220
00:57:38,560 --> 00:57:44,590
other it will be 171 there is no mistake

1221
00:57:41,680 --> 00:57:47,319
you join the computation it will be what

1222
00:57:44,590 --> 00:57:52,920
you ask it it's like super obedient for

1223
00:57:47,320 --> 00:57:56,590
a whole collision so as mentioned before

1224
00:57:52,920 --> 00:57:59,350
you you you first add a comment to pad

1225
00:57:56,590 --> 00:58:03,400
things at the right block boundaries and

1226
00:57:59,350 --> 00:58:05,390
then you declare a chunk a comment and

1227
00:58:03,400 --> 00:58:07,040
the declaration the length

1228
00:58:05,390 --> 00:58:10,100
aeration would be exactly aligned with

1229
00:58:07,040 --> 00:58:13,790
you Nicole difference so that it will

1230
00:58:10,100 --> 00:58:17,779
have two different lengths and then here

1231
00:58:13,790 --> 00:58:20,420
you put the the fight the body in the

1232
00:58:17,780 --> 00:58:22,310
footer of the first file which will be

1233
00:58:20,420 --> 00:58:24,950
covered by the comment and right after

1234
00:58:22,310 --> 00:58:28,430
that you put the body and footer of the

1235
00:58:24,950 --> 00:58:31,100
second file which means in one case when

1236
00:58:28,430 --> 00:58:35,720
the comment is shorter the parser will

1237
00:58:31,100 --> 00:58:38,210
see the header signature ignore comment

1238
00:58:35,720 --> 00:58:40,700
ignore command here's my file in but my

1239
00:58:38,210 --> 00:58:42,830
body and footer then the file is

1240
00:58:40,700 --> 00:58:45,890
complete I ignore the rest this will

1241
00:58:42,830 --> 00:58:48,680
render as file a and then in the case

1242
00:58:45,890 --> 00:58:50,859
where the comment is longer the whole

1243
00:58:48,680 --> 00:58:56,330
content of the first file is ignored and

1244
00:58:50,860 --> 00:59:02,240
we will render as 5b now the thing is so

1245
00:58:56,330 --> 00:59:03,290
yeah yes and again you you can do that

1246
00:59:02,240 --> 00:59:08,000
and then you can make a script to

1247
00:59:03,290 --> 00:59:10,279
automate that now the problem is that

1248
00:59:08,000 --> 00:59:12,200
you chunk the length of this is variable

1249
00:59:10,280 --> 00:59:15,650
depending on the input file so you

1250
00:59:12,200 --> 00:59:18,109
actually declare another comment and you

1251
00:59:15,650 --> 00:59:20,150
hide the collision the variable length

1252
00:59:18,110 --> 00:59:22,880
comment will actually be used to hide

1253
00:59:20,150 --> 00:59:25,520
the Declaration of this comment and the

1254
00:59:22,880 --> 00:59:27,160
thing is this comment here the length of

1255
00:59:25,520 --> 00:59:31,250
this comment they actually depends on

1256
00:59:27,160 --> 00:59:35,000
the length of the first file but it is

1257
00:59:31,250 --> 00:59:37,550
clear after the computation is done so

1258
00:59:35,000 --> 00:59:39,500
now in the case where it's short we have

1259
00:59:37,550 --> 00:59:41,390
indeed the three structure comment that

1260
00:59:39,500 --> 00:59:43,490
I mentioned earlier the free common

1261
00:59:41,390 --> 00:59:45,350
structure that I mentioned earlier one

1262
00:59:43,490 --> 00:59:47,479
for the padding one that is variable

1263
00:59:45,350 --> 00:59:49,580
length just to hide the declaration of

1264
00:59:47,480 --> 00:59:52,490
this command which was made specially to

1265
00:59:49,580 --> 01:00:02,090
jump over the comment of the content of

1266
00:59:52,490 --> 01:00:04,939
the first file ok any questions so it's

1267
01:00:02,090 --> 01:00:08,420
not always easy you have to know what

1268
01:00:04,940 --> 01:00:10,940
can vary of how much because sometimes

1269
01:00:08,420 --> 01:00:13,670
the comments cannot cover the whole

1270
01:00:10,940 --> 01:00:17,030
length you want ons if the command can

1271
01:00:13,670 --> 01:00:19,130
only be in theory of these latest or on

1272
01:00:17,030 --> 01:00:22,100
one bite which is like 200

1273
01:00:19,130 --> 01:00:24,380
five characters it's very small on jpg

1274
01:00:22,100 --> 01:00:27,620
it's two bites on PNG four bytes

1275
01:00:24,380 --> 01:00:28,910
you can jump wherever you want so that's

1276
01:00:27,620 --> 01:00:30,290
why there are very few restriction for

1277
01:00:28,910 --> 01:00:32,839
PNG that's the one we're going to

1278
01:00:30,290 --> 01:00:34,460
exploit it's very authoring very

1279
01:00:32,840 --> 01:00:36,980
interesting to explore different tools

1280
01:00:34,460 --> 01:00:39,890
because some tools may create a

1281
01:00:36,980 --> 01:00:41,690
structure from any input may create a

1282
01:00:39,890 --> 01:00:44,390
structure as the output that is very

1283
01:00:41,690 --> 01:00:47,390
easy to hack and for example new PDF

1284
01:00:44,390 --> 01:00:50,779
really creates a structure of PDF with

1285
01:00:47,390 --> 01:00:53,450
all the in page index at the top which

1286
01:00:50,780 --> 01:00:55,700
is exactly what we want to turn on and

1287
01:00:53,450 --> 01:00:57,799
off pages so it's like it's making a

1288
01:00:55,700 --> 01:01:00,470
very generic structure very easy to hack

1289
01:00:57,800 --> 01:01:02,660
or for in the case of zip files you want

1290
01:01:00,470 --> 01:01:04,339
to images to have the same properties

1291
01:01:02,660 --> 01:01:07,879
when the shortcut is just to make an

1292
01:01:04,340 --> 01:01:09,680
animation of the of the two frames and

1293
01:01:07,880 --> 01:01:11,240
in this case they will just the two

1294
01:01:09,680 --> 01:01:13,549
friends will be declared in this the

1295
01:01:11,240 --> 01:01:15,919
same header and then you just use an

1296
01:01:13,550 --> 01:01:17,540
animation making tool and then you

1297
01:01:15,920 --> 01:01:19,720
separate the frame by just locating the

1298
01:01:17,540 --> 01:01:22,160
right offsets and copying the buffer out

1299
01:01:19,720 --> 01:01:25,910
saving a lot of time compared to

1300
01:01:22,160 --> 01:01:29,930
handling all the cases of PDF or g4

1301
01:01:25,910 --> 01:01:31,370
anything no trust me which is great

1302
01:01:29,930 --> 01:01:33,440
because then you can have a very small

1303
01:01:31,370 --> 01:01:36,790
PDF or totally encrypted PDF using

1304
01:01:33,440 --> 01:01:40,100
latest feature and you have you have a

1305
01:01:36,790 --> 01:01:41,810
powerful tool like new tool that is able

1306
01:01:40,100 --> 01:01:43,970
to handle all this input and give you

1307
01:01:41,810 --> 01:01:49,460
something very ready to hack as output

1308
01:01:43,970 --> 01:01:53,020
is a huge time-saver so let's look at

1309
01:01:49,460 --> 01:01:53,020
PNG with you Nicole

1310
01:01:53,170 --> 01:02:01,070
so PNG file format is extremely regular

1311
01:01:58,150 --> 01:02:02,660
it's a signature and the sequence of

1312
01:02:01,070 --> 01:02:04,940
chunk and all these chunks have the same

1313
01:02:02,660 --> 01:02:06,410
overall structure underneath they have

1314
01:02:04,940 --> 01:02:09,230
different structure but that's not what

1315
01:02:06,410 --> 01:02:11,359
we need to know we don't here so the PNG

1316
01:02:09,230 --> 01:02:13,520
signature is enforced at offset zero and

1317
01:02:11,360 --> 01:02:15,320
it's always the same eight bytes which

1318
01:02:13,520 --> 01:02:19,040
have some meanings but we don't care we

1319
01:02:15,320 --> 01:02:20,510
know that this is what makes a valid PNG

1320
01:02:19,040 --> 01:02:22,850
at the start and we just keep eight

1321
01:02:20,510 --> 01:02:25,790
bytes and then we have the sequence of

1322
01:02:22,850 --> 01:02:29,319
chunks and this is what the this is all

1323
01:02:25,790 --> 01:02:31,910
the body and even the footer is a chunk

1324
01:02:29,320 --> 01:02:33,109
so just give the first eight bytes bytes

1325
01:02:31,910 --> 01:02:34,940
and then you copy a

1326
01:02:33,109 --> 01:02:37,400
and you have all the chunks of the PNG

1327
01:02:34,940 --> 01:02:40,609
if it's a standard PNG which means no

1328
01:02:37,400 --> 01:02:42,320
garbage after the footer but in even in

1329
01:02:40,609 --> 01:02:44,330
this case we don't care and the chunk is

1330
01:02:42,320 --> 01:02:47,030
declared with a very same structure

1331
01:02:44,330 --> 01:02:51,040
faster length which is a big engine on 4

1332
01:02:47,030 --> 01:02:54,080
bytes and type that is on 4 letters

1333
01:02:51,040 --> 01:02:56,420
escalators and then there is data which

1334
01:02:54,080 --> 01:02:58,759
is of the given length which can be

1335
01:02:56,420 --> 01:03:00,920
known like the footer is of no length

1336
01:02:58,760 --> 01:03:03,320
and then there is a serious attack over

1337
01:03:00,920 --> 01:03:06,260
C type and data and its uses are

1338
01:03:03,320 --> 01:03:09,260
actually ignored in practice by viewers

1339
01:03:06,260 --> 01:03:11,810
not by PNG to buy a PNG modifying tools

1340
01:03:09,260 --> 01:03:14,780
or anything but by Ustinov viewer your 5

1341
01:03:11,810 --> 01:03:17,299
browser they are ignored so it's very

1342
01:03:14,780 --> 01:03:18,680
simple structure and discovers you have

1343
01:03:17,300 --> 01:03:21,859
to signature then you have a sequence of

1344
01:03:18,680 --> 01:03:23,720
these and now you can go through a PNG

1345
01:03:21,859 --> 01:03:26,960
by yourself and we actually going to do

1346
01:03:23,720 --> 01:03:30,618
that manually just one point we say that

1347
01:03:26,960 --> 01:03:34,250
the type is on four letters and if the

1348
01:03:30,619 --> 01:03:37,550
first letter of the is lower case then

1349
01:03:34,250 --> 01:03:40,250
it's ignored so if you call it alien

1350
01:03:37,550 --> 01:03:42,710
skulls keep Polish whatever in the first

1351
01:03:40,250 --> 01:03:46,790
letter is lowercase this is acting

1352
01:03:42,710 --> 01:03:49,099
de-facto as a comment so just if it the

1353
01:03:46,790 --> 01:03:50,380
first letters uppercase then the this is

1354
01:03:49,099 --> 01:03:53,530
critical and there are only a few

1355
01:03:50,380 --> 01:03:56,089
critical chunks which are always present

1356
01:03:53,530 --> 01:03:57,890
image header palette a palette is not

1357
01:03:56,089 --> 01:04:01,910
always present image data image and

1358
01:03:57,890 --> 01:04:04,730
which is the footer Apple has a custom

1359
01:04:01,910 --> 01:04:06,200
PNG which has a different critical one

1360
01:04:04,730 --> 01:04:08,030
but of course they had to do something

1361
01:04:06,200 --> 01:04:10,310
different there are some lower case

1362
01:04:08,030 --> 01:04:14,660
there are some lower case so

1363
01:04:10,310 --> 01:04:16,040
non-critical chunks that can be that

1364
01:04:14,660 --> 01:04:18,020
exist but you can remove them and the

1365
01:04:16,040 --> 01:04:20,690
file will still be valid you just remove

1366
01:04:18,020 --> 01:04:23,180
some extra information and then whatever

1367
01:04:20,690 --> 01:04:24,859
you put as long as four letters and the

1368
01:04:23,180 --> 01:04:27,529
first is lower case it would be ignore

1369
01:04:24,859 --> 01:04:29,420
acting as a comment and remember we said

1370
01:04:27,530 --> 01:04:32,450
that the length is on 4 bytes so you can

1371
01:04:29,420 --> 01:04:35,900
keep gigabytes of data with just putting

1372
01:04:32,450 --> 01:04:39,230
a lowercase comment a lowercase chunk

1373
01:04:35,900 --> 01:04:41,420
type which makes it a comment so let's

1374
01:04:39,230 --> 01:04:43,730
just go through a PNG ourselves this is

1375
01:04:41,420 --> 01:04:45,920
the node just this cross which is this

1376
01:04:43,730 --> 01:04:47,690
is a whole file as I'm

1377
01:04:45,920 --> 01:04:50,329
first there is a signature then a

1378
01:04:47,690 --> 01:04:54,559
sequence of chunk which is a length a

1379
01:04:50,329 --> 01:04:56,720
type in the CRC so the length so first

1380
01:04:54,559 --> 01:04:58,819
look for the signature and then you will

1381
01:04:56,720 --> 01:05:00,049
have a sequence of something that is the

1382
01:04:58,819 --> 01:05:02,839
end of the previous channel which is a

1383
01:05:00,049 --> 01:05:04,819
CRC so something random then you have a

1384
01:05:02,839 --> 01:05:08,349
length that is like usually 0-0 and

1385
01:05:04,819 --> 01:05:09,529
something and small value and then four

1386
01:05:08,349 --> 01:05:12,349
letters

1387
01:05:09,530 --> 01:05:14,660
so alpha string four bytes so then we

1388
01:05:12,349 --> 01:05:16,190
just need to and we you will just take

1389
01:05:14,660 --> 01:05:19,190
the length of this and we just need to

1390
01:05:16,190 --> 01:05:20,720
skip and we don't care about the rest of

1391
01:05:19,190 --> 01:05:23,180
the data that's how we will just keep

1392
01:05:20,720 --> 01:05:26,118
through the files so we have the length

1393
01:05:23,180 --> 01:05:28,220
we skip we have csce length and width

1394
01:05:26,119 --> 01:05:31,069
cape and then we end up here and this is

1395
01:05:28,220 --> 01:05:34,029
the footer all the rest is part of the

1396
01:05:31,069 --> 01:05:38,058
PNG but we don't care so we can just

1397
01:05:34,030 --> 01:05:40,309
skip some on the memory branch this is

1398
01:05:38,059 --> 01:05:43,849
what we care for these files for this

1399
01:05:40,309 --> 01:05:46,130
file and indeed if we check the type we

1400
01:05:43,849 --> 01:05:50,990
have image header pallet image data

1401
01:05:46,130 --> 01:05:53,119
image end which are all critical so you

1402
01:05:50,990 --> 01:05:54,529
can even describe them like this and we

1403
01:05:53,119 --> 01:05:56,240
say this chunk so you could easily add

1404
01:05:54,530 --> 01:05:59,089
your own chunk in the beta in the middle

1405
01:05:56,240 --> 01:06:01,040
which is why this is the exactly the

1406
01:05:59,089 --> 01:06:04,190
minimum it the script is available on

1407
01:06:01,040 --> 01:06:05,660
the girl on the on the repository this

1408
01:06:04,190 --> 01:06:09,140
is exactly what you need to just map

1409
01:06:05,660 --> 01:06:10,720
either read or really generate a PNG you

1410
01:06:09,140 --> 01:06:14,299
don't need anything else

1411
01:06:10,720 --> 01:06:17,029
and now remember we need we know that

1412
01:06:14,299 --> 01:06:19,609
lower case chunks are ignored we can

1413
01:06:17,030 --> 01:06:21,530
give them whatever name we want as long

1414
01:06:19,609 --> 01:06:25,369
as the first letter is lowercase and we

1415
01:06:21,530 --> 01:06:27,349
need three chunks one for alignment one

1416
01:06:25,369 --> 01:06:30,260
for collision declare for declaring a

1417
01:06:27,349 --> 01:06:32,780
comment with exactly aligned to the 10th

1418
01:06:30,260 --> 01:06:37,490
character of you Nicole that's a given

1419
01:06:32,780 --> 01:06:38,599
block and then the chunk they like the

1420
01:06:37,490 --> 01:06:40,970
chunk that is added after the

1421
01:06:38,599 --> 01:06:43,609
computation that will jump over the

1422
01:06:40,970 --> 01:06:47,839
content of the first image and the rest

1423
01:06:43,609 --> 01:06:49,430
is moving around chunks and this is what

1424
01:06:47,839 --> 01:06:51,349
with the script this is exactly what can

1425
01:06:49,430 --> 01:06:56,069
can do we read the file and then we add

1426
01:06:51,349 --> 01:06:57,509
up just two chunks and the

1427
01:06:56,069 --> 01:06:59,279
the chunks are generated and you have

1428
01:06:57,509 --> 01:07:00,690
still valid PNG because you just

1429
01:06:59,279 --> 01:07:02,959
respecting the structure of chunks and

1430
01:07:00,690 --> 01:07:08,519
they are lowercase so they are ignored

1431
01:07:02,959 --> 01:07:11,339
any questions when someone wants to try

1432
01:07:08,519 --> 01:07:13,439
or not really right now you already know

1433
01:07:11,339 --> 01:07:13,650
who wants to try it you are doing right

1434
01:07:13,440 --> 01:07:18,269
now

1435
01:07:13,650 --> 01:07:22,140
okay sorry for the others sorry question

1436
01:07:18,269 --> 01:07:31,709
oh yeah everything is available don't

1437
01:07:22,140 --> 01:07:33,719
work yeah that discovered later you used

1438
01:07:31,709 --> 01:07:39,058
for expectable you need to know

1439
01:07:33,719 --> 01:07:43,259
Oshkosh it's not you Nicole spoiler but

1440
01:07:39,059 --> 01:07:46,049
so we just descript not here and just

1441
01:07:43,259 --> 01:07:48,479
this declaration you will add two chunks

1442
01:07:46,049 --> 01:07:51,959
that will be valid that would be ignored

1443
01:07:48,479 --> 01:07:54,359
by parser and that makes the whole PNG

1444
01:07:51,959 --> 01:07:56,279
files still valid and you see that you

1445
01:07:54,359 --> 01:07:58,799
can start to plan your structure for

1446
01:07:56,279 --> 01:08:00,660
collision because in the end it looks

1447
01:07:58,799 --> 01:08:04,709
like this this is what you want to

1448
01:08:00,660 --> 01:08:06,479
achieve right now mission one segment

1449
01:08:04,709 --> 01:08:10,229
for alignment then one for collision

1450
01:08:06,479 --> 01:08:14,038
with exactly the byte at the 10th the

1451
01:08:10,229 --> 01:08:15,808
the length declare so why is it on this

1452
01:08:14,039 --> 01:08:18,329
byte on the second byte of the length

1453
01:08:15,809 --> 01:08:21,599
and not on the first one because you

1454
01:08:18,328 --> 01:08:24,389
still want to jump over the blocks and

1455
01:08:21,599 --> 01:08:27,839
if you the difference will be +1 so in

1456
01:08:24,389 --> 01:08:29,819
the end if you DIF just +1 you will land

1457
01:08:27,839 --> 01:08:31,408
just at 1 byte or the other and there's

1458
01:08:29,819 --> 01:08:34,319
you cannot declare a chunk with this

1459
01:08:31,408 --> 01:08:37,618
difference so what you want is indeed to

1460
01:08:34,319 --> 01:08:40,859
just jump to like C zero and a hundred

1461
01:08:37,618 --> 01:08:43,589
later 1 C 0 and this gives you enough

1462
01:08:40,859 --> 01:08:45,659
room to declare a chunk to jump over the

1463
01:08:43,589 --> 01:08:48,899
content of the first image I mean the

1464
01:08:45,658 --> 01:08:54,299
file and body the body and footer or the

1465
01:08:48,899 --> 01:08:56,908
first image and spoilers you have the

1466
01:08:54,299 --> 01:09:11,299
whole working script so on your mark

1467
01:08:56,908 --> 01:09:11,299
Floyd ready what why is it going arrow

1468
01:09:18,140 --> 01:09:26,029
okay I send the prerequisites before

1469
01:09:23,250 --> 01:09:26,029
just saying

1470
01:09:30,080 --> 01:09:37,198
so who's trying not so many huh

1471
01:09:35,130 --> 01:09:40,739
I feel that so since most of the same

1472
01:09:37,198 --> 01:09:44,068
room is not trying we should still go to

1473
01:09:40,738 --> 01:09:49,500
skip ahead what do you think go ahead

1474
01:09:44,069 --> 01:09:51,509
okay so we maybe cover more any other

1475
01:09:49,500 --> 01:09:53,759
questions or maybe we can take some time

1476
01:09:51,509 --> 01:10:03,180
to explain more something for we covered

1477
01:09:53,759 --> 01:10:06,000
already well good so remember Qaeda is

1478
01:10:03,180 --> 01:10:08,670
pretty good to just explore the

1479
01:10:06,000 --> 01:10:10,320
difference in files especially as I

1480
01:10:08,670 --> 01:10:12,690
mentioned before you don't need to have

1481
01:10:10,320 --> 01:10:15,210
the whole understanding of the structure

1482
01:10:12,690 --> 01:10:17,400
and this is just the meet the small the

1483
01:10:15,210 --> 01:10:19,230
minimum grandma that you need to explain

1484
01:10:17,400 --> 01:10:21,360
to to tell ki to just describe the

1485
01:10:19,230 --> 01:10:23,780
chunks are not the overall structure so

1486
01:10:21,360 --> 01:10:26,070
in this case you can see here it's not

1487
01:10:23,780 --> 01:10:28,199
you can see that it's actually just

1488
01:10:26,070 --> 01:10:30,090
showing the content of the chunks with

1489
01:10:28,199 --> 01:10:32,879
the length and you can see the

1490
01:10:30,090 --> 01:10:35,640
difference that's here the length is 75

1491
01:10:32,880 --> 01:10:42,510
and here the length is 175 of two

1492
01:10:35,640 --> 01:10:45,480
colliding files so really don't hesitate

1493
01:10:42,510 --> 01:10:47,489
to trim down the grammars of ki

1494
01:10:45,480 --> 01:10:49,049
so that's it's just what you need you

1495
01:10:47,489 --> 01:10:53,160
onto high level structure and not all

1496
01:10:49,050 --> 01:10:55,760
the nitty-gritty details and you can

1497
01:10:53,160 --> 01:10:58,980
edit the grammar directly in the IDE

1498
01:10:55,760 --> 01:11:00,570
which in this case the modified copy

1499
01:10:58,980 --> 01:11:02,968
will be automatically saved in local

1500
01:11:00,570 --> 01:11:05,940
storage so you can just do it online and

1501
01:11:02,969 --> 01:11:07,860
you you open the PNG grammar and then

1502
01:11:05,940 --> 01:11:09,570
you remove some stuff and it will be

1503
01:11:07,860 --> 01:11:14,910
saved automatically which is very

1504
01:11:09,570 --> 01:11:17,730
convenient so it's very important to

1505
01:11:14,910 --> 01:11:19,559
understand the landscape do - remember I

1506
01:11:17,730 --> 01:11:21,690
said to test do mock files on the

1507
01:11:19,560 --> 01:11:22,300
various software because you don't want

1508
01:11:21,690 --> 01:11:24,519
to compute

1509
01:11:22,300 --> 01:11:26,890
for something that actually only works

1510
01:11:24,520 --> 01:11:28,300
on one viewer except if you target only

1511
01:11:26,890 --> 01:11:32,170
one user but it's good to know in

1512
01:11:28,300 --> 01:11:36,040
advance and at least all TNG's viewer

1513
01:11:32,170 --> 01:11:38,230
seems to ignore series and most PNG

1514
01:11:36,040 --> 01:11:41,110
viewers that what we want is that

1515
01:11:38,230 --> 01:11:42,759
instead of starting with the header we

1516
01:11:41,110 --> 01:11:45,429
want to start with the alignment chunk

1517
01:11:42,760 --> 01:11:47,680
which is against the spec and most view

1518
01:11:45,430 --> 01:11:50,080
were totally right that except the Apple

1519
01:11:47,680 --> 01:11:54,340
ones even though the upper ones

1520
01:11:50,080 --> 01:11:56,260
introduce a non-standard chunk so with

1521
01:11:54,340 --> 01:11:58,720
this trick you will not have upon

1522
01:11:56,260 --> 01:12:00,100
compatibility if you want Apple

1523
01:11:58,720 --> 01:12:04,290
combativity then you need to have the

1524
01:12:00,100 --> 01:12:07,960
image header chunk first which means the

1525
01:12:04,290 --> 01:12:10,330
dimensions the color space if it's

1526
01:12:07,960 --> 01:12:12,370
polluted or not will be before the

1527
01:12:10,330 --> 01:12:15,269
collision blocks which means your 2m

1528
01:12:12,370 --> 01:12:18,820
colliding image have to have the same

1529
01:12:15,270 --> 01:12:21,880
properties so it's not like any PNG with

1530
01:12:18,820 --> 01:12:25,509
any PNG it's a drawback but at least you

1531
01:12:21,880 --> 01:12:29,560
get really in this case PNG full

1532
01:12:25,510 --> 01:12:30,040
compatibility with all viewers yeah

1533
01:12:29,560 --> 01:12:36,580
question

1534
01:12:30,040 --> 01:12:40,180
no ok another thing is I said that they

1535
01:12:36,580 --> 01:12:42,400
seem to ignore series and by default

1536
01:12:40,180 --> 01:12:45,130
when you have and if equivalent if I

1537
01:12:42,400 --> 01:12:46,980
will not have same series you can do

1538
01:12:45,130 --> 01:12:50,200
that you can add an extra computation

1539
01:12:46,980 --> 01:12:53,080
but the other thing is that on one case

1540
01:12:50,200 --> 01:12:55,000
the chunk where the difference are you

1541
01:12:53,080 --> 01:13:00,309
remember the declared length was longer

1542
01:12:55,000 --> 01:13:01,660
so actually at the end of the each chunk

1543
01:13:00,310 --> 01:13:03,190
of different length you can actually

1544
01:13:01,660 --> 01:13:06,700
compute the CRC and you can have

1545
01:13:03,190 --> 01:13:08,980
colliding PNG with perfect series but in

1546
01:13:06,700 --> 01:13:10,780
this case don't forget before your

1547
01:13:08,980 --> 01:13:12,820
computation because the collision

1548
01:13:10,780 --> 01:13:16,389
blocker here to actually put the exact

1549
01:13:12,820 --> 01:13:18,880
CRC of your alignment block because that

1550
01:13:16,390 --> 01:13:21,310
v4 computation just don't do that

1551
01:13:18,880 --> 01:13:23,530
mistake here it's only a few minutes of

1552
01:13:21,310 --> 01:13:25,360
computation but again really plan your

1553
01:13:23,530 --> 01:13:26,860
files in advance before the collision

1554
01:13:25,360 --> 01:13:28,210
really the collision is at the more last

1555
01:13:26,860 --> 01:13:30,790
moment when you files already the

1556
01:13:28,210 --> 01:13:32,650
compatibility is good you get the prefix

1557
01:13:30,790 --> 01:13:36,190
and you do the computation and then you

1558
01:13:32,650 --> 01:13:44,559
save yourself some hustle

1559
01:13:36,190 --> 01:13:46,780
any question so for the courageous among

1560
01:13:44,560 --> 01:13:55,870
you will move on but for a courageous

1561
01:13:46,780 --> 01:13:58,389
among you Congrats certificate video so

1562
01:13:55,870 --> 01:14:02,260
yes you can have square terraces in

1563
01:13:58,389 --> 01:14:04,150
Colin pnpn jeez I'll do the script that

1564
01:14:02,260 --> 01:14:06,250
is on the script there are two versions

1565
01:14:04,150 --> 01:14:08,199
of the there are several versions of the

1566
01:14:06,250 --> 01:14:10,360
colliding PNG in the script that is on

1567
01:14:08,199 --> 01:14:13,360
my repository so you can see them they

1568
01:14:10,360 --> 01:14:16,960
are increasing complexity but it's not

1569
01:14:13,360 --> 01:14:18,759
so hard and now the other type of

1570
01:14:16,960 --> 01:14:23,469
collision chosen prefix which will cover

1571
01:14:18,760 --> 01:14:26,530
executables so so far we have two

1572
01:14:23,469 --> 01:14:28,780
identical prefix collisions do you take

1573
01:14:26,530 --> 01:14:33,840
they take a single input I think that

1574
01:14:28,780 --> 01:14:36,250
the common prefix the problem is that

1575
01:14:33,840 --> 01:14:40,800
some formats have a hard-coded except

1576
01:14:36,250 --> 01:14:43,960
offsets like exit like P executables and

1577
01:14:40,800 --> 01:14:46,060
or they don't tolerate early comments so

1578
01:14:43,960 --> 01:14:47,560
you can not put the comments early so

1579
01:14:46,060 --> 01:14:49,150
you cannot put all the alignments and

1580
01:14:47,560 --> 01:14:52,600
collision blocks before there is some

1581
01:14:49,150 --> 01:14:54,969
critical data like elf files and with

1582
01:14:52,600 --> 01:14:56,800
the same prefix you first you'll have

1583
01:14:54,969 --> 01:14:59,199
the same header so you have the same

1584
01:14:56,800 --> 01:15:03,219
file type with the same header you have

1585
01:14:59,199 --> 01:15:07,330
the same metadata and all there are

1586
01:15:03,219 --> 01:15:11,219
extra problems so in right now well yeah

1587
01:15:07,330 --> 01:15:15,010
this is just to say asn.1 is no possible

1588
01:15:11,219 --> 01:15:17,199
so now the ultimate attack that exists

1589
01:15:15,010 --> 01:15:19,900
is chosen prefix collision as crash the

1590
01:15:17,199 --> 01:15:26,159
ruler oshkosh but in practice Oskar CPC

1591
01:15:19,900 --> 01:15:28,509
and when chosen prefix collision is

1592
01:15:26,159 --> 01:15:31,929
implemented before hush

1593
01:15:28,510 --> 01:15:34,060
if consider broken because then you take

1594
01:15:31,929 --> 01:15:37,780
will see any pair of files and you have

1595
01:15:34,060 --> 01:15:41,230
colliding files so this is our third

1596
01:15:37,780 --> 01:15:47,889
block in the our game the CPC house

1597
01:15:41,230 --> 01:15:49,959
clash so it takes a few there is 72

1598
01:15:47,889 --> 01:15:52,870
hours core core hours to

1599
01:15:49,960 --> 01:15:55,240
if you're lucky again and why if you're

1600
01:15:52,870 --> 01:15:57,640
lucky because sometimes some steps stall

1601
01:15:55,240 --> 01:15:59,559
and they have to be restarted the good

1602
01:15:57,640 --> 01:16:02,680
thing is now solid at the restarting is

1603
01:15:59,560 --> 01:16:05,290
automatic but it just has to retry some

1604
01:16:02,680 --> 01:16:08,890
stuff and it can take only a few hours

1605
01:16:05,290 --> 01:16:13,450
to a lot more again this is computation

1606
01:16:08,890 --> 01:16:16,480
collision computation but at least now

1607
01:16:13,450 --> 01:16:20,080
it's much better it's really you just

1608
01:16:16,480 --> 01:16:22,209
have to do one thing and wait wait a few

1609
01:16:20,080 --> 01:16:24,430
hours depending in how much horsepower

1610
01:16:22,210 --> 01:16:27,130
you have and it will automatically

1611
01:16:24,430 --> 01:16:30,330
detect that some step will have stalled

1612
01:16:27,130 --> 01:16:35,560
and it will retry the next step until

1613
01:16:30,330 --> 01:16:40,000
it's finished hopefully so indeed right

1614
01:16:35,560 --> 01:16:42,580
now this is a collision when you you

1615
01:16:40,000 --> 01:16:45,520
choose to call collide just a word yes

1616
01:16:42,580 --> 01:16:47,710
and no so what we have we have some

1617
01:16:45,520 --> 01:16:50,290
padding until the end of the block but

1618
01:16:47,710 --> 01:16:54,990
the last block is used the 12 bytes are

1619
01:16:50,290 --> 01:17:00,850
used for randomness purposes and then

1620
01:16:54,990 --> 01:17:04,179
there are nine blocks that are again

1621
01:17:00,850 --> 01:17:07,290
full of randomness with very few

1622
01:17:04,180 --> 01:17:14,170
differences on each side but at least

1623
01:17:07,290 --> 01:17:16,720
whatever was here doesn't matter so then

1624
01:17:14,170 --> 01:17:18,760
it's nine blocks the less the fewer the

1625
01:17:16,720 --> 01:17:23,890
blocks the more the initial step will

1626
01:17:18,760 --> 01:17:28,630
take so seven to nine blocks takes a

1627
01:17:23,890 --> 01:17:31,450
couple of hours if you want just one

1628
01:17:28,630 --> 01:17:35,800
block then it takes four hundred

1629
01:17:31,450 --> 01:17:39,400
thousand hours or something different so

1630
01:17:35,800 --> 01:17:42,130
this is doable right and again if you

1631
01:17:39,400 --> 01:17:44,410
think about something like PNG comment

1632
01:17:42,130 --> 01:17:46,870
that can jump over a very large distance

1633
01:17:44,410 --> 01:17:48,580
it's not a problem it's just that you

1634
01:17:46,870 --> 01:17:52,809
say that you cannot have that easily in

1635
01:17:48,580 --> 01:17:58,000
two blocks like you Nicole or Fusco make

1636
01:17:52,810 --> 01:18:00,490
sense so how does it work you take two

1637
01:17:58,000 --> 01:18:02,900
files whatever they are again that

1638
01:18:00,490 --> 01:18:05,510
content doesn't matter and

1639
01:18:02,900 --> 01:18:08,989
the padding the short the smaller will

1640
01:18:05,510 --> 01:18:11,480
be padded to the longer and then 12

1641
01:18:08,989 --> 01:18:12,919
bytes will be short out of the last

1642
01:18:11,480 --> 01:18:14,928
block will be removed from the last

1643
01:18:12,920 --> 01:18:19,640
block for computation needs for

1644
01:18:14,929 --> 01:18:21,949
randomization needs and then seven to

1645
01:18:19,640 --> 01:18:24,949
nine blocks will be added they have

1646
01:18:21,949 --> 01:18:26,210
differences at very special offsets but

1647
01:18:24,949 --> 01:18:30,889
in this case we don't care because

1648
01:18:26,210 --> 01:18:34,489
whatever was before it could be just

1649
01:18:30,890 --> 01:18:36,380
anything could be though a Windows

1650
01:18:34,489 --> 01:18:39,468
binary and a jpg and this will always

1651
01:18:36,380 --> 01:18:42,199
work this is super powerful you take you

1652
01:18:39,469 --> 01:18:43,460
prefix you run the script even the

1653
01:18:42,199 --> 01:18:46,400
dimension you run the script you wait

1654
01:18:43,460 --> 01:18:48,140
some hours and it's done same hash and

1655
01:18:46,400 --> 01:18:51,139
of course at the end you have they have

1656
01:18:48,140 --> 01:18:52,280
the same length but the start is totally

1657
01:18:51,140 --> 01:18:55,610
different right because it's what you

1658
01:18:52,280 --> 01:18:58,009
set and you you know they will have the

1659
01:18:55,610 --> 01:19:00,380
same hash so it's super powerful this

1660
01:18:58,010 --> 01:19:02,150
which is why at this stage a hardship

1661
01:19:00,380 --> 01:19:04,730
bonuses are broken because you can Rica

1662
01:19:02,150 --> 01:19:06,769
light an arbitrary amount of 500 arbiter

1663
01:19:04,730 --> 01:19:09,980
amount of pair of files it's just that

1664
01:19:06,770 --> 01:19:11,900
it takes the same a bit minimum amount

1665
01:19:09,980 --> 01:19:16,480
of time each time there's no shortcut to

1666
01:19:11,900 --> 01:19:16,480
reuse there's no to reuse a computation

1667
01:19:19,239 --> 01:19:25,820
so 7 to 9 blocks a few hours and the

1668
01:19:23,210 --> 01:19:29,750
difference are irrelevant it's all

1669
01:19:25,820 --> 01:19:32,570
mighty but slow no ok this I should have

1670
01:19:29,750 --> 01:19:34,880
remove that now it's automated so you

1671
01:19:32,570 --> 01:19:36,559
used to require yourself to monitor and

1672
01:19:34,880 --> 01:19:40,969
kill these steps now it's automated

1673
01:19:36,560 --> 01:19:44,870
thanks to Enrico so again the two

1674
01:19:40,969 --> 01:19:46,640
arbitrary prefix don't matter at all and

1675
01:19:44,870 --> 01:19:52,120
then it's just blocks big appended to

1676
01:19:46,640 --> 01:19:52,120
each of the prefix you gave make sense

1677
01:19:52,480 --> 01:20:07,309
so yeah if you want sorry no you can

1678
01:20:05,239 --> 01:20:09,080
just put two entirely valid files of

1679
01:20:07,310 --> 01:20:13,250
their own format as long as the file

1680
01:20:09,080 --> 01:20:14,870
formats accept upon the data I mean yes

1681
01:20:13,250 --> 01:20:16,700
because there's the footer and says hey

1682
01:20:14,870 --> 01:20:20,240
these 5 stops here

1683
01:20:16,700 --> 01:20:22,099
and it's good I mean I must fight for my

1684
01:20:20,240 --> 01:20:24,889
tolerate up in the data very few

1685
01:20:22,100 --> 01:20:28,760
actually check or accept if you are if

1686
01:20:24,890 --> 01:20:31,280
there is a signature right like which

1687
01:20:28,760 --> 01:20:35,300
makes sense but yes but most standard

1688
01:20:31,280 --> 01:20:37,910
file format PNG JPEG GP years up on

1689
01:20:35,300 --> 01:20:41,770
whatever you want it will be ignored and

1690
01:20:37,910 --> 01:20:50,570
whatever you had here it will work

1691
01:20:41,770 --> 01:20:53,990
any other question so yes I was as

1692
01:20:50,570 --> 01:20:56,240
mentioned the fewer the blocks the more

1693
01:20:53,990 --> 01:20:58,790
the computation if he is just if you

1694
01:20:56,240 --> 01:21:01,570
didn't want to have seven to nine blocks

1695
01:20:58,790 --> 01:21:05,870
again one single block which is really

1696
01:21:01,570 --> 01:21:10,219
very compact right for a collision but

1697
01:21:05,870 --> 01:21:13,010
it takes a lot of time to compute so as

1698
01:21:10,220 --> 01:21:15,140
I mentioned this was just a question if

1699
01:21:13,010 --> 01:21:17,680
you have to file formatted file formats

1700
01:21:15,140 --> 01:21:21,560
the tolerate up any data compute done

1701
01:21:17,680 --> 01:21:23,630
it's like super powerful but again you

1702
01:21:21,560 --> 01:21:27,260
have to redo that every time you modify

1703
01:21:23,630 --> 01:21:31,810
a single bit to either file so now you

1704
01:21:27,260 --> 01:21:34,850
just see the impact of both IPC and CPC

1705
01:21:31,810 --> 01:21:37,490
in see IPC you have the two contents

1706
01:21:34,850 --> 01:21:41,270
that are always present in both files so

1707
01:21:37,490 --> 01:21:42,830
you when you do that evil and good the

1708
01:21:41,270 --> 01:21:45,800
file has a weird structure and you leak

1709
01:21:42,830 --> 01:21:49,490
the content of the if someone looks

1710
01:21:45,800 --> 01:21:51,530
inside the file it's really odd but if

1711
01:21:49,490 --> 01:21:53,420
no one does you still manage your

1712
01:21:51,530 --> 01:21:57,230
exploitation like if it's jpg and mimic

1713
01:21:53,420 --> 01:21:59,450
ads mimic as was still run right in here

1714
01:21:57,230 --> 01:22:05,179
you don't in this case you don't leak

1715
01:21:59,450 --> 01:22:09,230
either but of course it's slower now the

1716
01:22:05,180 --> 01:22:10,730
file here is totally different like it

1717
01:22:09,230 --> 01:22:13,519
shows when you open with a hex editor

1718
01:22:10,730 --> 01:22:15,169
but most people don't know I mean it's

1719
01:22:13,520 --> 01:22:17,180
hard for me to believe but most people

1720
01:22:15,170 --> 01:22:18,860
don't open a hex editor and every file

1721
01:22:17,180 --> 01:22:22,580
it and by the way if you apply to our

1722
01:22:18,860 --> 01:22:24,230
team please I will open your resume with

1723
01:22:22,580 --> 01:22:26,150
a hex editor and I hope to find

1724
01:22:24,230 --> 01:22:29,240
interesting things so just to make that

1725
01:22:26,150 --> 01:22:30,379
you take here anyway most people don't

1726
01:22:29,240 --> 01:22:32,269
so foreign password respect

1727
01:22:30,380 --> 01:22:34,670
this file are just tender but from the

1728
01:22:32,270 --> 01:22:38,480
internal structure they're super weird

1729
01:22:34,670 --> 01:22:39,860
and here in the case of CPC the stop of

1730
01:22:38,480 --> 01:22:42,549
the file is exactly what you wanted so

1731
01:22:39,860 --> 01:22:44,809
they are probably totally normal and

1732
01:22:42,550 --> 01:22:49,300
it's just the end that is giving it away

1733
01:22:44,810 --> 01:22:49,300
again same length and so on

1734
01:22:49,750 --> 01:22:56,949
any here you can reuse the computation

1735
01:22:54,650 --> 01:22:59,839
to put whatever content you want and

1736
01:22:56,949 --> 01:23:04,129
here and for the CPC you have to

1737
01:22:59,840 --> 01:23:06,650
recompute every time make sense any

1738
01:23:04,130 --> 01:23:11,270
question okay

1739
01:23:06,650 --> 01:23:13,330
just just ask so what about trying both

1740
01:23:11,270 --> 01:23:17,630
for the Windows executable 'he's

1741
01:23:13,330 --> 01:23:20,030
combining the reusability of IPC with

1742
01:23:17,630 --> 01:23:21,530
the flexibility of CPC which takes

1743
01:23:20,030 --> 01:23:26,830
longer to compute but let's do it once

1744
01:23:21,530 --> 01:23:31,519
and then having something automated so

1745
01:23:26,830 --> 01:23:34,370
we do in the end when you do a CPC you

1746
01:23:31,520 --> 01:23:36,199
create a prefix different to Perfect's

1747
01:23:34,370 --> 01:23:39,099
which have the same hash so you can

1748
01:23:36,199 --> 01:23:41,360
reuse that as input for an IPC and

1749
01:23:39,100 --> 01:23:43,730
remember it because of block boundaries

1750
01:23:41,360 --> 01:23:48,769
as if it's the same hash you can swap

1751
01:23:43,730 --> 01:23:50,780
them so this way you have any the total

1752
01:23:48,770 --> 01:23:53,719
flexibility for the header that you want

1753
01:23:50,780 --> 01:23:55,759
it's just that it's longer because it's

1754
01:23:53,719 --> 01:23:59,449
seven to nine blocks and it's longer to

1755
01:23:55,760 --> 01:24:02,030
compute but then you have no restriction

1756
01:23:59,449 --> 01:24:04,940
from the start of the file and then you

1757
01:24:02,030 --> 01:24:06,409
can reuse the same very usability you

1758
01:24:04,940 --> 01:24:08,360
can reuse to the same readability

1759
01:24:06,409 --> 01:24:14,120
trick-trick to combine it instantly with

1760
01:24:08,360 --> 01:24:16,909
any content that make sense so now we

1761
01:24:14,120 --> 01:24:19,849
can have multiple file types and you can

1762
01:24:16,909 --> 01:24:23,659
have we can even will see with which you

1763
01:24:19,850 --> 01:24:26,210
can chain them yeah any question so

1764
01:24:23,659 --> 01:24:29,570
let's go let's explore a bit to Windows

1765
01:24:26,210 --> 01:24:30,139
executable file format peek tended

1766
01:24:29,570 --> 01:24:32,630
collisions

1767
01:24:30,139 --> 01:24:36,469
yeah chosen prefix that is used like an

1768
01:24:32,630 --> 01:24:39,080
IPC the CPC used like an IPC so a P file

1769
01:24:36,469 --> 01:24:41,120
a portable executable file start with

1770
01:24:39,080 --> 01:24:44,449
the doors header it has a magic at the

1771
01:24:41,120 --> 01:24:47,030
first bite and then at the

1772
01:24:44,449 --> 01:24:49,098
it's actually a 64-byte block and at the

1773
01:24:47,030 --> 01:24:50,959
end there is a pointer which is these

1774
01:24:49,099 --> 01:24:54,229
are the only two important things for

1775
01:24:50,959 --> 01:24:58,570
modern Oasis and this pointer points to

1776
01:24:54,229 --> 01:25:03,139
the P header that start we do p 0 0

1777
01:24:58,570 --> 01:25:06,679
magic in between you have the DA stub

1778
01:25:03,139 --> 01:25:08,570
which is this 16 by 16 bit code that

1779
01:25:06,679 --> 01:25:10,550
just prints the strings this program

1780
01:25:08,570 --> 01:25:13,360
cannot be run on ms-dos something and

1781
01:25:10,550 --> 01:25:16,010
you have with Visual Studio compilers

1782
01:25:13,360 --> 01:25:19,369
you have the rich header which which

1783
01:25:16,010 --> 01:25:23,539
finishes with the rich magic which

1784
01:25:19,369 --> 01:25:25,699
contains compilation information what is

1785
01:25:23,539 --> 01:25:28,938
the other thing in the does header is

1786
01:25:25,699 --> 01:25:32,150
not important and the desktop and the

1787
01:25:28,939 --> 01:25:36,650
rich header can be removed everything

1788
01:25:32,150 --> 01:25:38,749
critical is in the P header especially I

1789
01:25:36,650 --> 01:25:41,360
mean the architecture and everything if

1790
01:25:38,749 --> 01:25:44,059
it's Colonel whatever and also the

1791
01:25:41,360 --> 01:25:46,549
dissection table which indicates which

1792
01:25:44,059 --> 01:25:48,800
runs the sections basically which ranges

1793
01:25:46,550 --> 01:25:54,979
of the file to load at which address in

1794
01:25:48,800 --> 01:25:56,090
memory with which permission and we

1795
01:25:54,979 --> 01:25:58,459
don't need to change the address but

1796
01:25:56,090 --> 01:26:03,469
just it says the offsets where to get

1797
01:25:58,459 --> 01:26:05,479
these ranges in the file so again we

1798
01:26:03,469 --> 01:26:07,429
don't care about most of this the

1799
01:26:05,479 --> 01:26:09,559
dust-up can be removed the rich header

1800
01:26:07,429 --> 01:26:13,489
can be removed and the P header can be

1801
01:26:09,559 --> 01:26:16,309
moved around as long as we modify the

1802
01:26:13,489 --> 01:26:20,659
pointer here and the sections can be

1803
01:26:16,309 --> 01:26:23,269
moved further as long as we just update

1804
01:26:20,659 --> 01:26:24,348
the offsets in the section table we

1805
01:26:23,269 --> 01:26:25,999
don't need to change the rest of the

1806
01:26:24,349 --> 01:26:27,909
section table we just need to tell the

1807
01:26:25,999 --> 01:26:35,959
loader to find them somewhere else

1808
01:26:27,909 --> 01:26:38,089
further so now the decider is generic we

1809
01:26:35,959 --> 01:26:40,849
compute with we we just have two

1810
01:26:38,090 --> 01:26:44,929
versions of this version of this pointer

1811
01:26:40,849 --> 01:26:48,110
to point to different offsets here we

1812
01:26:44,929 --> 01:26:51,969
have the collision block for the CPC now

1813
01:26:48,110 --> 01:26:55,610
we put two P headers next to each other

1814
01:26:51,969 --> 01:26:56,990
from the original files and then we copy

1815
01:26:55,610 --> 01:27:00,160
the set of sections

1816
01:26:56,990 --> 01:27:03,559
it's just finding it offset moving data

1817
01:27:00,160 --> 01:27:05,840
and then we just need to adjust so we

1818
01:27:03,560 --> 01:27:07,820
need to have the P header exactly at the

1819
01:27:05,840 --> 01:27:09,650
offset pointed by the prefix because

1820
01:27:07,820 --> 01:27:14,599
these are fixed because of the

1821
01:27:09,650 --> 01:27:17,929
computation and then the sections will

1822
01:27:14,600 --> 01:27:19,130
be the section groups sets the two sets

1823
01:27:17,930 --> 01:27:21,230
of section will be copied next to each

1824
01:27:19,130 --> 01:27:24,580
other because we don't care and you just

1825
01:27:21,230 --> 01:27:27,799
need to adjust the offsets in the table

1826
01:27:24,580 --> 01:27:32,780
in each of the two section tables of

1827
01:27:27,800 --> 01:27:34,820
both P headers does that make sense so

1828
01:27:32,780 --> 01:27:37,580
you can really collide any pair of

1829
01:27:34,820 --> 01:27:40,160
binaries it can be console GUI

1830
01:27:37,580 --> 01:27:41,870
different architecture because the P

1831
01:27:40,160 --> 01:27:44,330
header is what defines all these details

1832
01:27:41,870 --> 01:27:48,010
and the dos header is just totally

1833
01:27:44,330 --> 01:27:52,940
almost useless just MZ and the pointer

1834
01:27:48,010 --> 01:27:55,520
make sense so this is more complex to

1835
01:27:52,940 --> 01:27:59,929
compute but it's a single step it's a

1836
01:27:55,520 --> 01:28:02,420
single launch of hash clash CPC and then

1837
01:27:59,930 --> 01:28:03,980
you have reusable prefix that are

1838
01:28:02,420 --> 01:28:06,590
available on the word on the ripple and

1839
01:28:03,980 --> 01:28:09,589
you can collide yeah I call Aidid

1840
01:28:06,590 --> 01:28:16,070
mimikatz and cuphead because it's two

1841
01:28:09,590 --> 01:28:18,200
interesting games so again you have to

1842
01:28:16,070 --> 01:28:22,150
does headers with enough difference to

1843
01:28:18,200 --> 01:28:27,200
cover the nine blocks of difference of

1844
01:28:22,150 --> 01:28:29,240
collision then you skip the first P

1845
01:28:27,200 --> 01:28:32,510
header before you just take this normal

1846
01:28:29,240 --> 01:28:35,030
size of a pea header and you just need

1847
01:28:32,510 --> 01:28:37,160
to copy once you have done the

1848
01:28:35,030 --> 01:28:39,500
computation you just need to copy the P

1849
01:28:37,160 --> 01:28:42,620
headers these sections and adjust the

1850
01:28:39,500 --> 01:28:46,900
section of sets and then you get instant

1851
01:28:42,620 --> 01:28:49,730
collision of any pair of Windows Xbox

1852
01:28:46,900 --> 01:28:55,240
whatever executable I'm not sure on how

1853
01:28:49,730 --> 01:29:01,040
many systems P is used shame on surface

1854
01:28:55,240 --> 01:29:06,380
rights still windows any questions need

1855
01:29:01,040 --> 01:29:09,210
break off of it yes oh okay Greg

1856
01:29:06,380 --> 01:29:10,740
okay we're almost done because there was

1857
01:29:09,210 --> 01:29:12,810
no hands-on part so let's take a break

1858
01:29:10,740 --> 01:29:16,980
you have some time let's get wasted

1859
01:29:12,810 --> 01:29:22,010
oops okay we move on I mean we actually

1860
01:29:16,980 --> 01:29:27,599
done so did Louie don't

1861
01:29:22,010 --> 01:29:29,400
so changing collisions as you mentioned

1862
01:29:27,600 --> 01:29:33,960
as you maybe noticed earlier I mentioned

1863
01:29:29,400 --> 01:29:37,200
that we did 600 collision in the file or

1864
01:29:33,960 --> 01:29:39,210
we had a four filetypes collision it's

1865
01:29:37,200 --> 01:29:41,250
not of course with a single collision so

1866
01:29:39,210 --> 01:29:42,390
if you think about it a colleague and a

1867
01:29:41,250 --> 01:29:45,150
single collision makes two different

1868
01:29:42,390 --> 01:29:46,380
contents have the same hash so two

1869
01:29:45,150 --> 01:29:48,089
different contexts have the same hash

1870
01:29:46,380 --> 01:29:50,370
and then it's like collision what

1871
01:29:48,090 --> 01:29:52,260
collision for a collision it's like one

1872
01:29:50,370 --> 01:29:55,410
contempt so you can actually chain them

1873
01:29:52,260 --> 01:29:58,470
like a tree and the top notes have to be

1874
01:29:55,410 --> 01:30:01,650
an IPC can be an IPC and then you can

1875
01:29:58,470 --> 01:30:03,690
use cpc's or único and then you can

1876
01:30:01,650 --> 01:30:05,969
collide more than two files and n

1877
01:30:03,690 --> 01:30:08,190
collisions makes n plus 1 content

1878
01:30:05,970 --> 01:30:11,700
collide if you want if it makes sense to

1879
01:30:08,190 --> 01:30:15,089
you but it's possible so X few examples

1880
01:30:11,700 --> 01:30:18,510
are the ones I mentioned earlier with -

1881
01:30:15,090 --> 01:30:21,570
with tree cpc's chain as a tree to

1882
01:30:18,510 --> 01:30:24,050
collide for file types of different size

1883
01:30:21,570 --> 01:30:27,780
the poem that I mentioned earlier

1884
01:30:24,050 --> 01:30:30,300
actually chain eight unique holes so

1885
01:30:27,780 --> 01:30:32,460
it's unique health which is identical

1886
01:30:30,300 --> 01:30:34,530
prefix but in this case unique all is

1887
01:30:32,460 --> 01:30:37,050
behaving like a CPC because the

1888
01:30:34,530 --> 01:30:39,509
difference that is displayed is a part

1889
01:30:37,050 --> 01:30:42,060
of the prefix and the collision block

1890
01:30:39,510 --> 01:30:43,260
because it's you Nicole so this is

1891
01:30:42,060 --> 01:30:46,200
actually displaying the start of the

1892
01:30:43,260 --> 01:30:49,170
collision block in the PDF because it

1893
01:30:46,200 --> 01:30:51,450
works and you can chain them so like we

1894
01:30:49,170 --> 01:30:54,600
did you use you can see the difference

1895
01:30:51,450 --> 01:30:57,840
and in 2007 most events did that by

1896
01:30:54,600 --> 01:30:59,640
predicting who I mean giving the hash of

1897
01:30:57,840 --> 01:31:02,940
the future American president which

1898
01:30:59,640 --> 01:31:06,990
covers Paris Hilton by chaining 11 house

1899
01:31:02,940 --> 01:31:11,790
clashes I mean but he wasn't elected as

1900
01:31:06,990 --> 01:31:13,800
father just for mention just for to

1901
01:31:11,790 --> 01:31:16,580
cover everything let's see the

1902
01:31:13,800 --> 01:31:21,230
properties of shattered

1903
01:31:16,580 --> 01:31:23,780
which is a sha-1 ipeec so as far as I

1904
01:31:21,230 --> 01:31:26,509
know it was computed only once and the

1905
01:31:23,780 --> 01:31:27,889
differences are at the start and right

1906
01:31:26,510 --> 01:31:29,240
at the started right at the end so

1907
01:31:27,890 --> 01:31:31,160
basically before the first difference

1908
01:31:29,240 --> 01:31:34,670
you control because it's part of the

1909
01:31:31,160 --> 01:31:38,360
prefix this is what we exploited and the

1910
01:31:34,670 --> 01:31:40,640
official proof of concepts are JPEGs in

1911
01:31:38,360 --> 01:31:43,940
PDFs for the reason I mentioned earlier

1912
01:31:40,640 --> 01:31:46,670
if you want to exploit PDF you have to

1913
01:31:43,940 --> 01:31:50,290
deal with six families there are six

1914
01:31:46,670 --> 01:31:52,700
families of viewers and where that which

1915
01:31:50,290 --> 01:31:55,730
one trick that works in the family will

1916
01:31:52,700 --> 01:31:59,420
not work in the other family while all

1917
01:31:55,730 --> 01:32:02,209
them PDF and JPEG natively like you can

1918
01:31:59,420 --> 01:32:04,280
have a JPEG in the file exactly like it

1919
01:32:02,210 --> 01:32:07,570
would be as a standalone file starting

1920
01:32:04,280 --> 01:32:10,900
with the JPEG magic and everything and

1921
01:32:07,570 --> 01:32:15,469
they all use leap JPEG which is de facto

1922
01:32:10,900 --> 01:32:18,410
the JPEG software so if you find the

1923
01:32:15,470 --> 01:32:22,400
trick for the lib JPEG it will work you

1924
01:32:18,410 --> 01:32:25,460
know PDF and even if it's a collision

1925
01:32:22,400 --> 01:32:27,730
level and it will work in all PDF

1926
01:32:25,460 --> 01:32:31,610
viewers so you gain full compatibility

1927
01:32:27,730 --> 01:32:35,750
thanks to the landscape landscape of the

1928
01:32:31,610 --> 01:32:38,080
PDF is split into six but then if you

1929
01:32:35,750 --> 01:32:41,420
use a JPEG you're back to the single

1930
01:32:38,080 --> 01:32:44,150
implementation and again the JPEGs are

1931
01:32:41,420 --> 01:32:47,060
against the standard but they are okay

1932
01:32:44,150 --> 01:32:49,280
with live JPEG so the file are just

1933
01:32:47,060 --> 01:32:56,120
working everywhere does that make sense

1934
01:32:49,280 --> 01:32:59,030
so as I mentioned shattered the shutter

1935
01:32:56,120 --> 01:33:00,980
block have differences everywhere but

1936
01:32:59,030 --> 01:33:03,620
most importantly just at the right at

1937
01:33:00,980 --> 01:33:05,690
the beginning at the very first bite

1938
01:33:03,620 --> 01:33:08,300
which means you declare a length of a

1939
01:33:05,690 --> 01:33:11,719
comment so you have first a comment here

1940
01:33:08,300 --> 01:33:13,850
for alignment as usual then you declare

1941
01:33:11,720 --> 01:33:17,030
another comment and you declare the

1942
01:33:13,850 --> 01:33:19,190
length of the comment one by one bite

1943
01:33:17,030 --> 01:33:22,070
outside of the collision blog and one

1944
01:33:19,190 --> 01:33:26,839
side in one bite inside and this will be

1945
01:33:22,070 --> 01:33:28,490
of variable length so it's easier it's

1946
01:33:26,840 --> 01:33:30,350
harder to exploit than you Nicole

1947
01:33:28,490 --> 01:33:33,380
because you don't control

1948
01:33:30,350 --> 01:33:34,910
after the difference and again you

1949
01:33:33,380 --> 01:33:38,000
certainly don't control that because

1950
01:33:34,910 --> 01:33:44,889
this took six thousand years core to

1951
01:33:38,000 --> 01:33:48,310
compute a few Olympic pools of to boil

1952
01:33:44,890 --> 01:33:51,020
just to put that another perspective and

1953
01:33:48,310 --> 01:33:54,200
then you jump and then same thing same

1954
01:33:51,020 --> 01:33:56,690
technique except that here JPEG commands

1955
01:33:54,200 --> 01:33:59,269
the length is only on two bytes so you

1956
01:33:56,690 --> 01:34:02,080
cannot jump very far over a whole JPEG

1957
01:33:59,270 --> 01:34:06,230
if it's too big so you split your JPEG

1958
01:34:02,080 --> 01:34:07,790
into segments and this is actually what

1959
01:34:06,230 --> 01:34:11,360
I meant what I talked about two years

1960
01:34:07,790 --> 01:34:13,300
ago here at blackout's so if you want

1961
01:34:11,360 --> 01:34:15,889
the whole findings regarding shattered

1962
01:34:13,300 --> 01:34:18,650
this presentation because I actually had

1963
01:34:15,890 --> 01:34:21,050
a bit more fun with PDFs but at least

1964
01:34:18,650 --> 01:34:23,570
the idea is the same so what do we know

1965
01:34:21,050 --> 01:34:26,630
here we know that we don't control the

1966
01:34:23,570 --> 01:34:30,320
bytes after the difference so we cannot

1967
01:34:26,630 --> 01:34:33,350
have a length then the type because the

1968
01:34:30,320 --> 01:34:36,110
type is in the randomness so we need to

1969
01:34:33,350 --> 01:34:40,940
exploit the formats that are the kind of

1970
01:34:36,110 --> 01:34:43,190
temp type length value value is data so

1971
01:34:40,940 --> 01:34:48,379
the length declared after the type and

1972
01:34:43,190 --> 01:34:50,889
not like in PNG the type after the

1973
01:34:48,380 --> 01:34:53,030
length mix doesn't make sense why and

1974
01:34:50,890 --> 01:34:55,180
there are very few formats that I'll

1975
01:34:53,030 --> 01:34:59,780
type lines value that are very common

1976
01:34:55,180 --> 01:35:02,300
jpg and mp4 which I mean then before can

1977
01:34:59,780 --> 01:35:05,620
actually be in both style because some

1978
01:35:02,300 --> 01:35:08,840
tricks but anyway it works so you know

1979
01:35:05,620 --> 01:35:11,059
because of this even if there's a single

1980
01:35:08,840 --> 01:35:12,800
perfect that was ever completed if you

1981
01:35:11,060 --> 01:35:15,230
say hey let's compute another prefix I

1982
01:35:12,800 --> 01:35:17,240
would say hey let's do the mp4 one so

1983
01:35:15,230 --> 01:35:22,219
that we know that we can collide with

1984
01:35:17,240 --> 01:35:24,700
sha-1 and P for videos because the trick

1985
01:35:22,220 --> 01:35:27,800
is the same and if one day we have

1986
01:35:24,700 --> 01:35:29,059
chateau collision when we already know

1987
01:35:27,800 --> 01:35:31,580
which trick will work and which feel

1988
01:35:29,060 --> 01:35:35,780
equal which with which trick won't make

1989
01:35:31,580 --> 01:35:41,450
sense actually the JPEG trick I use it

1990
01:35:35,780 --> 01:35:41,929
on three hashes sha-1 md5 it was the

1991
01:35:41,450 --> 01:35:45,199
same tree

1992
01:35:41,929 --> 01:35:48,350
basically to this fffe comment and the

1993
01:35:45,199 --> 01:35:52,370
length is the same n before I work on

1994
01:35:48,350 --> 01:35:55,940
sha-1 and md5 I originally worked with

1995
01:35:52,370 --> 01:35:58,909
jean-philippe on muscle on modified

1996
01:35:55,940 --> 01:36:03,320
shower that was took less time to

1997
01:35:58,909 --> 01:36:05,860
compute so the same trick st. Patrick's

1998
01:36:03,320 --> 01:36:09,409
is reusable across different hashes

1999
01:36:05,860 --> 01:36:12,380
which is great for finding new tricks so

2000
01:36:09,409 --> 01:36:15,049
if you find so I will show later if you

2001
01:36:12,380 --> 01:36:18,440
find like you collide for example binary

2002
01:36:15,050 --> 01:36:21,590
protobuf then you know that the moment

2003
01:36:18,440 --> 01:36:23,928
someone gives you the ability to compute

2004
01:36:21,590 --> 01:36:25,520
a sha-1 prefix or anything then maybe

2005
01:36:23,929 --> 01:36:28,040
you will know in advance whether it's

2006
01:36:25,520 --> 01:36:29,750
exploitable or not so it's very

2007
01:36:28,040 --> 01:36:31,850
beneficial it's not just one big

2008
01:36:29,750 --> 01:36:34,489
computation the trick are independent

2009
01:36:31,850 --> 01:36:36,620
from the computation right because they

2010
01:36:34,489 --> 01:36:38,449
kind of don't care about each other as

2011
01:36:36,620 --> 01:36:40,760
long as the byte has the right value and

2012
01:36:38,449 --> 01:36:50,509
as long as the blocks are aligned both

2013
01:36:40,760 --> 01:36:54,560
are happy does that make sense so there

2014
01:36:50,510 --> 01:36:58,670
are three attacks on md5 two identical

2015
01:36:54,560 --> 01:37:04,130
prefix and one chosen prefix first call

2016
01:36:58,670 --> 01:37:05,390
that is hard to exploit because the

2017
01:37:04,130 --> 01:37:08,719
difference are in the middle it takes a

2018
01:37:05,390 --> 01:37:10,310
few seconds and you Nicole which takes a

2019
01:37:08,719 --> 01:37:13,580
few more time it has a lot more power

2020
01:37:10,310 --> 01:37:15,500
and then hodge clash which where the

2021
01:37:13,580 --> 01:37:18,710
difference are irrelevant which takes a

2022
01:37:15,500 --> 01:37:21,110
lot more blocks which is chosen traffic

2023
01:37:18,710 --> 01:37:26,510
so two two prefixes whether whatever

2024
01:37:21,110 --> 01:37:29,750
they are again all these attacks the

2025
01:37:26,510 --> 01:37:32,179
append random-looking blocks with tiny

2026
01:37:29,750 --> 01:37:36,890
differences and there's no other kind of

2027
01:37:32,179 --> 01:37:38,270
attacks I there's no possibility the way

2028
01:37:36,890 --> 01:37:41,449
to do something in the middle before

2029
01:37:38,270 --> 01:37:43,969
yeah at the top of the file or there's

2030
01:37:41,449 --> 01:37:46,879
no possibility to do ASCII only on this

2031
01:37:43,969 --> 01:37:48,500
kind of thing it's always compute up and

2032
01:37:46,880 --> 01:37:52,699
run blocks of randomness with tiny

2033
01:37:48,500 --> 01:37:54,590
differences the problem is that yeah so

2034
01:37:52,699 --> 01:37:55,309
there's nothing like this people ask me

2035
01:37:54,590 --> 01:37:57,080
do we have

2036
01:37:55,310 --> 01:37:59,690
now that you can notice not I mean not

2037
01:37:57,080 --> 01:38:02,300
to my Orbach Stephens knowledge and the

2038
01:37:59,690 --> 01:38:04,219
problem is that because of there was a

2039
01:38:02,300 --> 01:38:06,560
chosen prefix attack on md5 it's

2040
01:38:04,220 --> 01:38:09,200
considered dead so there's like no

2041
01:38:06,560 --> 01:38:13,240
research what everything I mentioned

2042
01:38:09,200 --> 01:38:16,309
today attack wise was document in 2008

2043
01:38:13,240 --> 01:38:18,019
so I just adding new tricks five of my

2044
01:38:16,310 --> 01:38:19,490
tricks to it but the no one is

2045
01:38:18,020 --> 01:38:21,740
interested in publishing something new

2046
01:38:19,490 --> 01:38:26,750
about md5 because it's considered dead

2047
01:38:21,740 --> 01:38:29,090
anyway a reminder for the exploitation

2048
01:38:26,750 --> 01:38:34,480
patterns so the standard chosen prefix

2049
01:38:29,090 --> 01:38:34,480
the IPC and then the combination of both

2050
01:38:36,700 --> 01:38:45,050
the typical layout of abuse with a

2051
01:38:41,750 --> 01:38:47,210
command for padding the collision

2052
01:38:45,050 --> 01:38:48,590
commands that is covering that is what

2053
01:38:47,210 --> 01:38:51,350
we the variable length and then the

2054
01:38:48,590 --> 01:38:56,780
command to ignore the content of the

2055
01:38:51,350 --> 01:38:58,340
first file so we don't consider and defy

2056
01:38:56,780 --> 01:39:03,920
the cryptographic hash but more like a

2057
01:38:58,340 --> 01:39:06,290
toy actually I don't know it was I don't

2058
01:39:03,920 --> 01:39:15,320
know I don't know if you familiar with

2059
01:39:06,290 --> 01:39:17,960
that but let's see can I have internet

2060
01:39:15,320 --> 01:39:22,030
there's no internet oh because okay

2061
01:39:17,960 --> 01:39:24,710
there's no eat oh yeah okay that's good

2062
01:39:22,030 --> 01:39:26,960
yeah so don't mention but it's really a

2063
01:39:24,710 --> 01:39:30,560
toy amplifier installed cohesion Marco

2064
01:39:26,960 --> 01:39:32,600
he implemented a mega driver on that

2065
01:39:30,560 --> 01:39:35,690
computes a hash code an md5 collision

2066
01:39:32,600 --> 01:39:37,580
and I ordered a special program about

2067
01:39:35,690 --> 01:39:39,230
cartridge the first thing I ran on the

2068
01:39:37,580 --> 01:39:42,380
Mega Drive and on that cartridge was

2069
01:39:39,230 --> 01:39:44,360
computing an md5 collision it takes two

2070
01:39:42,380 --> 01:39:47,270
hours you just need to put the cartridge

2071
01:39:44,360 --> 01:39:49,190
and press unload it and after two hours

2072
01:39:47,270 --> 01:39:51,230
you have the md5 on the screen which

2073
01:39:49,190 --> 01:39:53,299
kind of give make my kids disappointed

2074
01:39:51,230 --> 01:39:57,259
because they wanted to play Shingo B or

2075
01:39:53,300 --> 01:39:59,210
Sonic but it works and the funny thing

2076
01:39:57,260 --> 01:40:01,370
is that and the Mega Drive is actually

2077
01:39:59,210 --> 01:40:03,200
older than md5 so it's like something

2078
01:40:01,370 --> 01:40:05,360
from the past that is able to bring to

2079
01:40:03,200 --> 01:40:08,330
do break something that was comfy

2080
01:40:05,360 --> 01:40:08,780
consider cryptographically secure in the

2081
01:40:08,330 --> 01:40:11,330
past

2082
01:40:08,780 --> 01:40:13,070
so it's very interesting and when I say

2083
01:40:11,330 --> 01:40:21,130
that to my students he was like will you

2084
01:40:13,070 --> 01:40:25,790
do a Nintendo version 8 bits yeah

2085
01:40:21,130 --> 01:40:27,530
usually we run out of time here but if I

2086
01:40:25,790 --> 01:40:29,719
mean it depends if you're rich super

2087
01:40:27,530 --> 01:40:32,559
tight or I can actually show fast call

2088
01:40:29,719 --> 01:40:38,060
exploitation which is a bit funky but

2089
01:40:32,560 --> 01:40:39,739
how do you feel feel free to leave but

2090
01:40:38,060 --> 01:40:40,969
it's just we have some time and I'd like

2091
01:40:39,739 --> 01:40:43,959
to come over so these are the extra

2092
01:40:40,969 --> 01:40:49,330
stuffy you're interested I will not

2093
01:40:43,960 --> 01:40:52,159
that's covered JPEG interpretation mp4

2094
01:40:49,330 --> 01:40:53,659
and so initially just for you

2095
01:40:52,159 --> 01:40:55,009
information when I gave this workshop

2096
01:40:53,659 --> 01:40:57,469
initially that was part of the main

2097
01:40:55,010 --> 01:41:01,370
stuff not extra and it was a bit too

2098
01:40:57,469 --> 01:41:02,780
much so recap on first call first caller

2099
01:41:01,370 --> 01:41:05,330
has this difference right in the middle

2100
01:41:02,780 --> 01:41:08,389
so you need to be able to have a single

2101
01:41:05,330 --> 01:41:10,370
byte that is all a valid structure and

2102
01:41:08,389 --> 01:41:14,120
EV at length so it really sounds

2103
01:41:10,370 --> 01:41:18,320
impossible except for one thing Jif give

2104
01:41:14,120 --> 01:41:19,849
whatever jiff it's called jiff

2105
01:41:18,320 --> 01:41:22,549
it's supposed to be said if the

2106
01:41:19,850 --> 01:41:25,639
specifications are a bit old and it

2107
01:41:22,550 --> 01:41:27,650
works but because you cannot put a

2108
01:41:25,639 --> 01:41:31,520
comment before the header the files have

2109
01:41:27,650 --> 01:41:34,489
to be the same metadata and it should be

2110
01:41:31,520 --> 01:41:36,139
the shortcuts for that is to make an

2111
01:41:34,489 --> 01:41:38,388
animation out of it which makes the two

2112
01:41:36,139 --> 01:41:40,280
frame have the same dimension and the

2113
01:41:38,389 --> 01:41:42,040
same header and then you just separate

2114
01:41:40,280 --> 01:41:45,139
them and actually the trick is that you

2115
01:41:42,040 --> 01:41:48,139
display actually both frames but one you

2116
01:41:45,139 --> 01:41:49,219
put it a ten minute delay so and then

2117
01:41:48,139 --> 01:41:51,710
after ten minutes you will show the

2118
01:41:49,219 --> 01:41:53,420
other frame but technically it works you

2119
01:41:51,710 --> 01:41:56,540
just see two different frames and if I

2120
01:41:53,420 --> 01:41:58,420
have this document in Google Doc after

2121
01:41:56,540 --> 01:42:00,769
ten minutes they show the same frame

2122
01:41:58,420 --> 01:42:04,880
because ten ten minutes is the maximum

2123
01:42:00,770 --> 01:42:07,580
value of delay you can encode so jiff

2124
01:42:04,880 --> 01:42:10,120
has a bit of a weird structure so fun

2125
01:42:07,580 --> 01:42:13,969
thing is that the the chunks of GF are

2126
01:42:10,120 --> 01:42:15,949
separated with punctuation so there's

2127
01:42:13,969 --> 01:42:19,960
the Declaration of the extension image

2128
01:42:15,949 --> 01:42:19,960
and is finishing with semicolon

2129
01:42:20,010 --> 01:42:26,500
and the important thing is that there

2130
01:42:24,070 --> 01:42:29,530
can be a pallet that is global or local

2131
01:42:26,500 --> 01:42:32,470
and the problem is that the comments

2132
01:42:29,530 --> 01:42:34,360
they cannot jump very far because they

2133
01:42:32,470 --> 01:42:37,780
are declared on a single byte single

2134
01:42:34,360 --> 01:42:40,389
byte like fast code which is good but

2135
01:42:37,780 --> 01:42:42,849
you don't have a lot of distance so it's

2136
01:42:40,390 --> 01:42:44,920
important to see when you explore your

2137
01:42:42,850 --> 01:42:51,120
file format to see what you know that

2138
01:42:44,920 --> 01:42:54,310
the comment can only jump to 556 255 big

2139
01:42:51,120 --> 01:42:58,240
but to see the what is variable in what

2140
01:42:54,310 --> 01:43:01,330
is not so the palette is variable and

2141
01:42:58,240 --> 01:43:04,000
then the extensions the graphic control

2142
01:43:01,330 --> 01:43:07,390
commands comments is important and the

2143
01:43:04,000 --> 01:43:11,140
application okay and here the local

2144
01:43:07,390 --> 01:43:13,450
palette you can remove it but the image

2145
01:43:11,140 --> 01:43:17,680
data will grow a lot depending on the

2146
01:43:13,450 --> 01:43:20,769
amount of pixels so the problem is that

2147
01:43:17,680 --> 01:43:28,060
how can you jump over an image if you

2148
01:43:20,770 --> 01:43:31,630
can only jump 256 rival by bytes now in

2149
01:43:28,060 --> 01:43:34,540
this structure the comments and the data

2150
01:43:31,630 --> 01:43:38,680
are storing the same sequence of sub

2151
01:43:34,540 --> 01:43:42,160
blobs where you have a length then the

2152
01:43:38,680 --> 01:43:45,880
amount of data and until there is a

2153
01:43:42,160 --> 01:43:49,420
length at Claire 0 so this declares 7

2154
01:43:45,880 --> 01:43:52,210
and this the data is comments so it just

2155
01:43:49,420 --> 01:43:54,040
defines it just decomposed the comments

2156
01:43:52,210 --> 01:43:55,900
containing 7 character of comment and

2157
01:43:54,040 --> 01:43:58,660
this is exactly the same one character

2158
01:43:55,900 --> 01:44:00,759
that is see four characters it is these

2159
01:43:58,660 --> 01:44:05,380
letters and two characters so these two

2160
01:44:00,760 --> 01:44:09,700
structures define the same data we are

2161
01:44:05,380 --> 01:44:13,120
the shifts of blocks so this is why you

2162
01:44:09,700 --> 01:44:16,120
can only jump not too far you cannot

2163
01:44:13,120 --> 01:44:18,160
have the long the length of a comment in

2164
01:44:16,120 --> 01:44:21,070
total is unknown in advance because it's

2165
01:44:18,160 --> 01:44:24,250
made of this the important thing is that

2166
01:44:21,070 --> 01:44:30,490
commands and image data are stored with

2167
01:44:24,250 --> 01:44:32,530
this structure so that's a very clever I

2168
01:44:30,490 --> 01:44:33,349
suggested from Mac himself for Mac

2169
01:44:32,530 --> 01:44:37,099
Stevens himself

2170
01:44:33,349 --> 01:44:39,139
where since there's Church stored in the

2171
01:44:37,099 --> 01:44:41,929
same with the same sub structure you

2172
01:44:39,139 --> 01:44:44,239
actually make the comment extent in the

2173
01:44:41,929 --> 01:44:46,909
image data and certainly the image data

2174
01:44:44,239 --> 01:44:48,949
is seen as a comment and in this way no

2175
01:44:46,909 --> 01:44:50,540
matter the length here it's just

2176
01:44:48,949 --> 01:44:53,388
following this sub structure of mini

2177
01:44:50,540 --> 01:44:55,699
jumps so here you have comments comments

2178
01:44:53,389 --> 01:44:59,810
comments and necessarily you just skip

2179
01:44:55,699 --> 01:45:02,839
this part it is always 10 bytes which is

2180
01:44:59,810 --> 01:45:04,579
okay and you jump you make a jump over

2181
01:45:02,840 --> 01:45:06,980
here right in here and then it will jump

2182
01:45:04,579 --> 01:45:09,320
all the way until the end taking it as a

2183
01:45:06,980 --> 01:45:10,848
comment and this is a wonderful

2184
01:45:09,320 --> 01:45:13,549
technique and he that was his suggestion

2185
01:45:10,849 --> 01:45:16,360
I wish I had I hope I will have such a

2186
01:45:13,550 --> 01:45:20,540
cryptographic suggestion one day because

2187
01:45:16,360 --> 01:45:22,848
probably not so you declare the delay

2188
01:45:20,540 --> 01:45:24,199
between images which is okay and then

2189
01:45:22,849 --> 01:45:26,540
you declare this comment that will

2190
01:45:24,199 --> 01:45:28,879
either just end as a comment or just

2191
01:45:26,540 --> 01:45:31,849
skip over these 11 bytes or something or

2192
01:45:28,880 --> 01:45:35,360
12 bytes maybe I don't River in the

2193
01:45:31,849 --> 01:45:37,300
image data and in this case on in one

2194
01:45:35,360 --> 01:45:41,570
case it will expand the comments and

2195
01:45:37,300 --> 01:45:44,960
just display the second frame or in the

2196
01:45:41,570 --> 01:45:48,530
other case the comment is shorter we set

2197
01:45:44,960 --> 01:45:51,469
the delay of 10 minutes so you cannot

2198
01:45:48,530 --> 01:45:54,380
interrupt the parsing here but you can

2199
01:45:51,469 --> 01:45:57,190
say hey display it for 10 minutes which

2200
01:45:54,380 --> 01:45:57,190
kind of does the trick

2201
01:45:58,719 --> 01:46:03,889
so in practice it gives that you define

2202
01:46:02,119 --> 01:46:05,480
your command drive right before your

2203
01:46:03,889 --> 01:46:09,500
first call so here it's faster right

2204
01:46:05,480 --> 01:46:11,509
it's very quick to compute you jump at

2205
01:46:09,500 --> 01:46:12,920
the length exactly you want to jump at

2206
01:46:11,510 --> 01:46:14,150
the end of a skull or the last

2207
01:46:12,920 --> 01:46:17,540
difference of a skull so that you

2208
01:46:14,150 --> 01:46:20,750
already cover the maximum length because

2209
01:46:17,540 --> 01:46:26,179
again you cannot jump very far with this

2210
01:46:20,750 --> 01:46:28,369
sub blocks technique and then you jump

2211
01:46:26,179 --> 01:46:29,929
to different values and you know the

2212
01:46:28,369 --> 01:46:30,980
difference is always the same you don't

2213
01:46:29,929 --> 01:46:32,349
know the values but you know the

2214
01:46:30,980 --> 01:46:35,598
difference will be always to say

2215
01:46:32,349 --> 01:46:38,270
eating's or in this case so it's in the

2216
01:46:35,599 --> 01:46:41,809
same bit and you just display this image

2217
01:46:38,270 --> 01:46:45,949
which again GIMP will tell you so 6 5 5

2218
01:46:41,809 --> 01:46:49,789
it's a hundreds of second hundred

2219
01:46:45,949 --> 01:46:53,719
of seconds which is why the maximum

2220
01:46:49,789 --> 01:46:56,030
value makes 10 mils so you just

2221
01:46:53,719 --> 01:46:57,440
normalize you want the common Hydra you

2222
01:46:56,030 --> 01:46:59,630
just want to normalize due to picture

2223
01:46:57,440 --> 01:47:03,159
just make an animation increase the

2224
01:46:59,630 --> 01:47:06,829
delay and then just before the second

2225
01:47:03,159 --> 01:47:09,558
you just put this comment to skip before

2226
01:47:06,829 --> 01:47:11,989
this too just to jump into the image

2227
01:47:09,559 --> 01:47:18,860
data to slide into it the image data

2228
01:47:11,989 --> 01:47:24,499
it's a data slide okay so in practice it

2229
01:47:18,860 --> 01:47:28,400
gives that you I mean yeah let's see it

2230
01:47:24,499 --> 01:47:30,619
simplified the declaration you jump just

2231
01:47:28,400 --> 01:47:34,728
here the collision and the last

2232
01:47:30,619 --> 01:47:37,249
difference is here and then you jump to

2233
01:47:34,729 --> 01:47:44,479
another sub block and this sub block

2234
01:47:37,249 --> 01:47:46,940
makes it slide into the data and again

2235
01:47:44,479 --> 01:47:48,829
is because there is this unique sub

2236
01:47:46,940 --> 01:47:52,329
block and we're structured from 30 years

2237
01:47:48,829 --> 01:47:57,799
ago the specs the initial specs of gf

2238
01:47:52,329 --> 01:48:03,499
1987 and this this works with a single

2239
01:47:57,800 --> 01:48:05,389
byte trick so declarations are separated

2240
01:48:03,499 --> 01:48:08,570
from length but it's compatible with

2241
01:48:05,389 --> 01:48:10,159
fast call you cannot skip too long but

2242
01:48:08,570 --> 01:48:12,440
image data is stored with the same

2243
01:48:10,159 --> 01:48:14,360
structure so you extend the command in

2244
01:48:12,440 --> 01:48:16,848
the image data and with the max delay

2245
01:48:14,360 --> 01:48:20,058
you just prevent it to show the first

2246
01:48:16,849 --> 01:48:23,929
frame as much as you can if you have

2247
01:48:20,059 --> 01:48:26,389
better hack eye on ears but here you

2248
01:48:23,929 --> 01:48:28,809
just combine the two images and you just

2249
01:48:26,389 --> 01:48:31,309
insert this wait comment and it works

2250
01:48:28,809 --> 01:48:34,070
while and you don't need to pre-process

2251
01:48:31,309 --> 01:48:36,769
anything about palettes local palettes

2252
01:48:34,070 --> 01:48:40,518
and all the complexity of shift because

2253
01:48:36,769 --> 01:48:42,229
it's actually pretty complex so this is

2254
01:48:40,519 --> 01:48:49,999
this heart certificate and good luck

2255
01:48:42,229 --> 01:48:52,820
huge yes I said that there's no more

2256
01:48:49,999 --> 01:48:55,728
research on md5 attacks but there was

2257
01:48:52,820 --> 01:48:58,099
this reuse of attacks in 2015 on

2258
01:48:55,729 --> 01:48:59,539
protocols which was pretty clever and

2259
01:48:58,099 --> 01:49:03,699
maybe I will extend to that

2260
01:48:59,539 --> 01:49:07,009
still I think it's enough for today and

2261
01:49:03,699 --> 01:49:12,710
just the dis this year there was a new

2262
01:49:07,010 --> 01:49:15,920
paper that introduced this practical

2263
01:49:12,710 --> 01:49:18,409
chosen prefix for sure one in supposedly

2264
01:49:15,920 --> 01:49:23,500
I think three times the time of shuttles

2265
01:49:18,409 --> 01:49:26,539
so probably not on your Mac but maybe

2266
01:49:23,500 --> 01:49:29,199
someone had already implemented so in

2267
01:49:26,539 --> 01:49:32,659
practice it could be possible to compute

2268
01:49:29,199 --> 01:49:38,530
chosen prefix for Shawa it was a new

2269
01:49:32,659 --> 01:49:40,820
paper released in May I think and yes

2270
01:49:38,530 --> 01:49:44,119
thanks I mean with the documentation

2271
01:49:40,820 --> 01:49:46,940
there were these flags covered with new

2272
01:49:44,119 --> 01:49:49,280
covering new file we do file formats

2273
01:49:46,940 --> 01:49:53,110
including this one I think last month

2274
01:49:49,280 --> 01:49:59,090
which was about protobuf binary protocol

2275
01:49:53,110 --> 01:50:01,308
so using Unicode to hack the binary

2276
01:49:59,090 --> 01:50:03,409
protocol and both write-ups are very

2277
01:50:01,309 --> 01:50:06,440
interesting one because the first

2278
01:50:03,409 --> 01:50:07,879
write-up did jump over the collision

2279
01:50:06,440 --> 01:50:13,428
block and then the world payloads and

2280
01:50:07,880 --> 01:50:15,139
the second write-up actually try to find

2281
01:50:13,429 --> 01:50:17,719
the smallest payload that would work

2282
01:50:15,139 --> 01:50:19,670
still in the prefix before the collision

2283
01:50:17,719 --> 01:50:22,639
the virtual random part of the collision

2284
01:50:19,670 --> 01:50:24,739
block and so that one is like cool nice

2285
01:50:22,639 --> 01:50:27,590
and the other like oh my god I didn't

2286
01:50:24,739 --> 01:50:29,150
know it I really it's maybe over the top

2287
01:50:27,590 --> 01:50:30,829
because you typically you want to jump

2288
01:50:29,150 --> 01:50:32,629
over the collision block and then you

2289
01:50:30,829 --> 01:50:35,750
just land safely and do your stuff

2290
01:50:32,630 --> 01:50:38,420
but here's like nope nothing after the

2291
01:50:35,750 --> 01:50:42,980
collision block no suffix which is

2292
01:50:38,420 --> 01:50:45,829
pretty impressive and yeah thanks for

2293
01:50:42,980 --> 01:50:47,839
making it this far we are only so if you

2294
01:50:45,829 --> 01:51:00,980
have questions or anything or comments

2295
01:50:47,840 --> 01:51:10,690
please ask I'm good to index files or

2296
01:51:00,980 --> 01:51:13,428
just to and again

2297
01:51:10,690 --> 01:51:16,519
yeah but if if there is a lot of data

2298
01:51:13,429 --> 01:51:18,199
and you people don't know what data they

2299
01:51:16,520 --> 01:51:20,540
will be they cannot plan in advance if

2300
01:51:18,199 --> 01:51:24,500
they have the time to prepare in to

2301
01:51:20,540 --> 01:51:27,860
submit files then sha-1 on-the-fly is

2302
01:51:24,500 --> 01:51:30,500
absolutely impossible so it's still ok

2303
01:51:27,860 --> 01:51:32,869
to use sha-1 on totally random stuff as

2304
01:51:30,500 --> 01:51:35,449
long as you don't give the attacker a

2305
01:51:32,869 --> 01:51:38,480
possibility to send a file you created

2306
01:51:35,449 --> 01:51:41,269
right you in this case we are never able

2307
01:51:38,480 --> 01:51:42,468
to order this hash now let's do

2308
01:51:41,270 --> 01:51:44,599
something with that it's always

2309
01:51:42,469 --> 01:51:46,880
preparing in advance send a good one

2310
01:51:44,599 --> 01:52:05,900
and then get whitelisted and send a bad

2311
01:51:46,880 --> 01:52:07,670
one yeah but at least make it possible

2312
01:52:05,900 --> 01:52:10,098
to change because one day shatter will

2313
01:52:07,670 --> 01:52:12,020
be broken and something right so it's

2314
01:52:10,099 --> 01:52:14,750
more like just make it easy to upgrade

2315
01:52:12,020 --> 01:52:17,329
to the next one but still if you if the

2316
01:52:14,750 --> 01:52:19,099
no user controls anything and you just

2317
01:52:17,329 --> 01:52:21,139
want speed of computation you have to do

2318
01:52:19,099 --> 01:52:25,699
a lot of comparison that nothing was

2319
01:52:21,139 --> 01:52:28,880
modified then even if I was still ok but

2320
01:52:25,699 --> 01:52:31,428
yeah just make sure if there is

2321
01:52:28,880 --> 01:52:33,829
something that is controlled by do you

2322
01:52:31,429 --> 01:52:38,599
by D at occur then and it can prepare

2323
01:52:33,829 --> 01:52:42,710
stuff in advance yes you're at risk and

2324
01:52:38,599 --> 01:52:44,929
you can prove it if the files the I

2325
01:52:42,710 --> 01:52:47,150
didn't mention here in this talk but

2326
01:52:44,929 --> 01:52:49,190
basically the whole background behind

2327
01:52:47,150 --> 01:52:52,159
this research was that last December

2328
01:52:49,190 --> 01:52:54,919
there was a some official paper that

2329
01:52:52,159 --> 01:52:58,460
says md5 is fine is fine for incident

2330
01:52:54,920 --> 01:53:00,530
response and mark was like started a

2331
01:52:58,460 --> 01:53:02,929
long discussion on Twitter not

2332
01:53:00,530 --> 01:53:05,420
explaining stuff and I'm like I prefer

2333
01:53:02,929 --> 01:53:07,280
to let file do the talking hey instant

2334
01:53:05,420 --> 01:53:10,070
collision of PNG instant collision of P

2335
01:53:07,280 --> 01:53:11,659
inside collision of JPEG so what files

2336
01:53:10,070 --> 01:53:17,210
are you gonna some send someone in jail

2337
01:53:11,659 --> 01:53:19,009
with you know so like I assign you a

2338
01:53:17,210 --> 01:53:21,500
file you do you want but I hide a

2339
01:53:19,010 --> 01:53:23,270
malicious content in it and then I say

2340
01:53:21,500 --> 01:53:23,869
hey this guy has this malicious file on

2341
01:53:23,270 --> 01:53:26,510
his

2342
01:53:23,869 --> 01:53:27,889
and if it's indexed by md5 which as far

2343
01:53:26,510 --> 01:53:30,199
as I remember is still the default

2344
01:53:27,889 --> 01:53:32,750
option in any case then you can be

2345
01:53:30,199 --> 01:53:36,549
incriminating for that for having this

2346
01:53:32,750 --> 01:53:36,550
file you can say I didn't have this file

2347
01:53:37,030 --> 01:53:40,330
does that make sense

2348
01:53:42,190 --> 01:53:47,440
finally come on okay thanks for your

2349
01:53:45,050 --> 01:53:47,440
attention

2350
01:53:48,970 --> 01:53:53,729
[Applause]

