1
00:00:02,310 --> 00:00:15,700
Thank You hello hello I think this is

2
00:00:11,950 --> 00:00:21,160
the last talk for today right feeling

3
00:00:15,700 --> 00:00:23,948
tired no okay you might be a little bit

4
00:00:21,160 --> 00:00:27,939
tired after this oh just you know a

5
00:00:23,949 --> 00:00:31,419
little bit I indeed I will complain I

6
00:00:27,939 --> 00:00:34,600
will complain a lot and this is not like

7
00:00:31,419 --> 00:00:36,969
the cryptography talk it's mostly about

8
00:00:34,600 --> 00:00:39,610
software engineering about library

9
00:00:36,969 --> 00:00:40,899
design about specifics of different

10
00:00:39,610 --> 00:00:46,930
languages and different operating

11
00:00:40,899 --> 00:00:49,930
systems so actually when I submitted a

12
00:00:46,930 --> 00:00:53,019
call for papers for this talk the name

13
00:00:49,930 --> 00:00:57,309
was maintained for Africa libraries for

14
00:00:53,019 --> 00:00:58,629
11 languages but now we have 12 so for

15
00:00:57,309 --> 00:01:02,019
the last half a year we have added

16
00:00:58,629 --> 00:01:03,879
another one and I'll show that 12

17
00:01:02,019 --> 00:01:06,250
actually the last one it's not like a

18
00:01:03,879 --> 00:01:09,340
language is a platform we added web

19
00:01:06,250 --> 00:01:10,960
assembly and right now we can cover you

20
00:01:09,340 --> 00:01:14,650
know even all those electron

21
00:01:10,960 --> 00:01:17,710
implications ok so my name is Anna

22
00:01:14,650 --> 00:01:19,840
Stassi and I am such a developer so I

23
00:01:17,710 --> 00:01:21,610
came from Sofia developer world I was

24
00:01:19,840 --> 00:01:23,710
doing a lot of applications and then I

25
00:01:21,610 --> 00:01:25,509
switched the security and for many years

26
00:01:23,710 --> 00:01:26,860
right now I am working in the data

27
00:01:25,509 --> 00:01:29,049
security company working with

28
00:01:26,860 --> 00:01:31,030
cryptography but not on the surface

29
00:01:29,049 --> 00:01:33,670
level more on a protocols level data

30
00:01:31,030 --> 00:01:36,579
protection level so protecting data for

31
00:01:33,670 --> 00:01:39,100
different kind of applications and the

32
00:01:36,579 --> 00:01:41,798
company work called Kazakh labs that's

33
00:01:39,100 --> 00:01:45,189
UK company but of course you can see

34
00:01:41,799 --> 00:01:48,070
some Ukrainian roots there yeah I'm from

35
00:01:45,189 --> 00:01:51,699
Ukraine so that's UK company and we are

36
00:01:48,070 --> 00:01:54,309
vendors of security software mainly

37
00:01:51,700 --> 00:01:56,799
based in cryptography mainly for data

38
00:01:54,310 --> 00:01:58,750
protection usually our software like

39
00:01:56,799 --> 00:02:01,990
other companies integrate other software

40
00:01:58,750 --> 00:02:05,860
to protect data to encrypt data all the

41
00:02:01,990 --> 00:02:08,710
time and the thing is that we have a

42
00:02:05,860 --> 00:02:12,310
really nice cryptography team and we are

43
00:02:08,710 --> 00:02:14,080
working on you know a novel technology

44
00:02:12,310 --> 00:02:15,220
it's not in ciphers but most a new

45
00:02:14,080 --> 00:02:17,950
protocol

46
00:02:15,220 --> 00:02:21,190
trying to solve typical businesses cases

47
00:02:17,950 --> 00:02:23,560
with cryptography so like anyone will

48
00:02:21,190 --> 00:02:25,510
have any access to data for example like

49
00:02:23,560 --> 00:02:26,590
searchable encryption like zero

50
00:02:25,510 --> 00:02:28,120
knowledge authentication like

51
00:02:26,590 --> 00:02:31,030
authentication using zero knowledge

52
00:02:28,120 --> 00:02:33,880
proof protocols like a data

53
00:02:31,030 --> 00:02:36,630
collaboration on and two encrypted data

54
00:02:33,880 --> 00:02:41,530
these kind of things and we put these

55
00:02:36,630 --> 00:02:45,040
research into libraries and we usually

56
00:02:41,530 --> 00:02:47,080
open source it and then based on some of

57
00:02:45,040 --> 00:02:49,120
these libraries we create our software

58
00:02:47,080 --> 00:02:51,700
and then we sell it so it's like

59
00:02:49,120 --> 00:02:54,310
multi-layered thing and today I gonna

60
00:02:51,700 --> 00:02:56,768
talk to you gonna tell here about one of

61
00:02:54,310 --> 00:02:58,720
these libraries we open source and we

62
00:02:56,769 --> 00:03:00,760
support and many other people use

63
00:02:58,720 --> 00:03:03,310
because it's free it's open source yet

64
00:03:00,760 --> 00:03:09,010
another cryptographically library and

65
00:03:03,310 --> 00:03:13,540
how actually you know complicated it is

66
00:03:09,010 --> 00:03:15,640
to support multi-platform library so

67
00:03:13,540 --> 00:03:22,019
let's start yeah obviously encrypted we

68
00:03:15,640 --> 00:03:25,450
trust and by crypto I don't mean lock J

69
00:03:22,019 --> 00:03:29,890
today for this talk for this talk

70
00:03:25,450 --> 00:03:31,899
grifter is cryptography okay okay yeah

71
00:03:29,890 --> 00:03:34,420
so in Cliffton be trust but not only in

72
00:03:31,900 --> 00:03:36,220
like any crypto in usable crypto because

73
00:03:34,420 --> 00:03:38,319
you know all these mistakes developers

74
00:03:36,220 --> 00:03:41,230
do trying to use cryptographic

75
00:03:38,319 --> 00:03:43,238
instruments and we kind of try to

76
00:03:41,230 --> 00:03:46,480
eliminate them today we're gonna talk

77
00:03:43,239 --> 00:03:48,819
about warren crypto about timers as a

78
00:03:46,480 --> 00:03:52,500
library about what the difference

79
00:03:48,819 --> 00:03:56,319
between easy to use and hard to misuse

80
00:03:52,500 --> 00:03:58,720
okay and about security testing and all

81
00:03:56,319 --> 00:04:01,328
these things developers should do like

82
00:03:58,720 --> 00:04:03,940
maintainer should do to prevent

83
00:04:01,329 --> 00:04:06,819
developers making mistakes and they

84
00:04:03,940 --> 00:04:11,230
always always always try to make

85
00:04:06,819 --> 00:04:13,600
mistakes okay so let's start let's start

86
00:04:11,230 --> 00:04:15,040
thinking that we asked the FIR

87
00:04:13,600 --> 00:04:17,168
developers we don't know a lot about

88
00:04:15,040 --> 00:04:20,200
security we don't know about a lot about

89
00:04:17,168 --> 00:04:22,389
cryptography because most of 12 ella

90
00:04:20,200 --> 00:04:25,419
purrs are like this and we have a very

91
00:04:22,389 --> 00:04:27,849
very simple use case we need to protect

92
00:04:25,419 --> 00:04:28,389
the data for simplicity we need to

93
00:04:27,849 --> 00:04:30,969
protect

94
00:04:28,389 --> 00:04:34,150
torrid data so it's data at rest

95
00:04:30,969 --> 00:04:37,779
encryption really easy should be however

96
00:04:34,150 --> 00:04:40,859
as a developers there are really many

97
00:04:37,779 --> 00:04:43,509
things we need to think of trying to

98
00:04:40,860 --> 00:04:45,930
tune to protect this data first of all

99
00:04:43,509 --> 00:04:48,639
which kind of later to protect right

100
00:04:45,930 --> 00:04:50,020
many people like many many many many

101
00:04:48,639 --> 00:04:53,650
people they make the same mistake with

102
00:04:50,020 --> 00:04:55,419
data scope because we have some data

103
00:04:53,650 --> 00:04:59,169
sensitive for our business and we

104
00:04:55,419 --> 00:05:02,609
believe that this is only user PII only

105
00:04:59,169 --> 00:05:06,159
names emails here together but no

106
00:05:02,610 --> 00:05:08,740
usually for some businesses 'likes and

107
00:05:06,159 --> 00:05:10,960
preferences that we as a company

108
00:05:08,740 --> 00:05:14,740
collects about our users is also

109
00:05:10,960 --> 00:05:16,659
sensitive data that we will we will lose

110
00:05:14,740 --> 00:05:18,909
money if we will lose this kind of data

111
00:05:16,659 --> 00:05:21,099
so we need to protect it as well then

112
00:05:18,909 --> 00:05:23,490
the risk rd4 in different kind of

113
00:05:21,099 --> 00:05:28,479
regulations depending on the industry

114
00:05:23,490 --> 00:05:31,360
GDP our PCI DSS HIPPA DPB lots of them

115
00:05:28,479 --> 00:05:34,659
they also push us as a company to

116
00:05:31,360 --> 00:05:37,509
protect different kind of data right and

117
00:05:34,659 --> 00:05:41,169
last but not least the technical data

118
00:05:37,509 --> 00:05:45,310
all these accesses api tokens are you

119
00:05:41,169 --> 00:05:47,318
Malins passwords AWS tokens that we

120
00:05:45,310 --> 00:05:50,949
store in our infrastructure somewhere

121
00:05:47,319 --> 00:05:51,520
and we also my need to protect some of

122
00:05:50,949 --> 00:05:54,300
this bitch

123
00:05:51,520 --> 00:05:57,758
so first mistakes developers usually do

124
00:05:54,300 --> 00:06:00,550
they don't the undies to made this co-op

125
00:05:57,759 --> 00:06:02,770
or protected it but let's let's let's

126
00:06:00,550 --> 00:06:04,870
let's say that you do really the great

127
00:06:02,770 --> 00:06:07,210
job within the risk management and we

128
00:06:04,870 --> 00:06:12,180
know which data to protect like ok now

129
00:06:07,210 --> 00:06:15,250
next step is let's select a cipher and

130
00:06:12,180 --> 00:06:16,930
you know how many ciphers are like for

131
00:06:15,250 --> 00:06:19,779
for dates for simple symmetric

132
00:06:16,930 --> 00:06:24,490
encryption can you know can you name

133
00:06:19,779 --> 00:06:25,649
some of them ciphers for date encryption

134
00:06:24,490 --> 00:06:34,319
at rest

135
00:06:25,649 --> 00:06:37,539
yes right Blowfish good choice 2019

136
00:06:34,319 --> 00:06:39,409
towfish ghost whose neck oh yes oh yes

137
00:06:37,539 --> 00:06:43,269
ok so I

138
00:06:39,409 --> 00:06:49,909
okay let's let's say that is however

139
00:06:43,269 --> 00:06:52,159
which is mode which padding to use what

140
00:06:49,909 --> 00:06:56,569
IV what in it vector we need to use

141
00:06:52,159 --> 00:06:58,729
which killing it a select then when we

142
00:06:56,569 --> 00:07:01,009
say key obviously we mean a

143
00:06:58,729 --> 00:07:05,419
cryptographic key and it's different

144
00:07:01,009 --> 00:07:08,569
from password so how to derive this key

145
00:07:05,419 --> 00:07:11,359
with continuation function to use then

146
00:07:08,569 --> 00:07:13,789
of course when we start having keys we

147
00:07:11,360 --> 00:07:15,469
start having key management problems we

148
00:07:13,789 --> 00:07:16,818
need to exchange this case we need to

149
00:07:15,469 --> 00:07:20,329
store these keys

150
00:07:16,819 --> 00:07:22,099
we need to revoke accesses probably we

151
00:07:20,329 --> 00:07:26,329
will have some key management systems

152
00:07:22,099 --> 00:07:29,719
cameras HSM yet the other depends on our

153
00:07:26,329 --> 00:07:33,800
infrastructure our system last but not

154
00:07:29,719 --> 00:07:39,079
least our small let's protect the data

155
00:07:33,800 --> 00:07:41,360
exercise in a huge infrastructure causes

156
00:07:39,079 --> 00:07:45,649
us to support all the things on multiple

157
00:07:41,360 --> 00:07:48,499
platforms and probably to pick up our

158
00:07:45,649 --> 00:07:53,379
keys and the question is if we pick up

159
00:07:48,499 --> 00:07:56,019
keys how we will protect our backup

160
00:07:53,379 --> 00:07:58,189
shall we encrypt them where to store

161
00:07:56,019 --> 00:08:00,139
encryption keys for encrypted backups

162
00:07:58,189 --> 00:08:02,209
and another the caps you know the thing

163
00:08:00,139 --> 00:08:06,409
yeah you know you know you will you will

164
00:08:02,209 --> 00:08:10,489
end up having a master key as a QR code

165
00:08:06,409 --> 00:08:12,649
on paper in your safe I'm not joking

166
00:08:10,489 --> 00:08:20,239
really this is a kind a good way to do

167
00:08:12,649 --> 00:08:24,009
well not a perfect one but one oh poor

168
00:08:20,239 --> 00:08:26,869
poor poor developers have been there

169
00:08:24,009 --> 00:08:31,039
just to protect the data storage

170
00:08:26,869 --> 00:08:33,380
encryption sure I read this I read this

171
00:08:31,039 --> 00:08:36,019
research like three years ago probably

172
00:08:33,380 --> 00:08:38,360
so the thing is as people analyzed

173
00:08:36,019 --> 00:08:40,459
different vulnerabilities in different

174
00:08:38,360 --> 00:08:43,490
applications and they try to divide it

175
00:08:40,458 --> 00:08:45,920
into two large group the group number

176
00:08:43,490 --> 00:08:50,420
one vulnerabilities in applications

177
00:08:45,920 --> 00:08:53,000
caused by cold inside crypto libraries

178
00:08:50,420 --> 00:08:54,680
and the second group

179
00:08:53,000 --> 00:08:57,949
vulnerabilities inside applications

180
00:08:54,680 --> 00:09:01,699
caused by misusing crypto libraries and

181
00:08:57,949 --> 00:09:05,599
now and now guessing game guess the

182
00:09:01,699 --> 00:09:08,240
numbers so 100% let's get the number

183
00:09:05,600 --> 00:09:12,250
how much vulnerabilities were caused by

184
00:09:08,240 --> 00:09:17,509
misusing clipped libraries

185
00:09:12,250 --> 00:09:26,620
99 good one try more like close enough

186
00:09:17,509 --> 00:09:29,529
but not so bad again 75 okay 99 75 98

187
00:09:26,620 --> 00:09:33,589
close close close enough

188
00:09:29,529 --> 00:09:35,240
83 it but you get the point you get the

189
00:09:33,589 --> 00:09:37,279
point of course after this kind of

190
00:09:35,240 --> 00:09:42,259
introduction it was easy to estimate

191
00:09:37,279 --> 00:09:44,329
right most bugs in applications with

192
00:09:42,259 --> 00:09:46,879
cryptography are not inside

193
00:09:44,329 --> 00:09:51,949
cryptographic libraries but in misusing

194
00:09:46,879 --> 00:09:54,019
telegraphic libraries because you know

195
00:09:51,949 --> 00:09:56,300
there are really really a lot of ciphers

196
00:09:54,019 --> 00:09:58,730
in the world and many cryptographers

197
00:09:56,300 --> 00:10:00,589
yellow jean-philippe many cryptographers

198
00:09:58,730 --> 00:10:04,129
are super excited about making new

199
00:10:00,589 --> 00:10:09,680
ciphers but developers they don't need

200
00:10:04,129 --> 00:10:13,220
new ciphers the don't need worked you

201
00:10:09,680 --> 00:10:17,239
know what developers usually need is

202
00:10:13,220 --> 00:10:20,180
boring crypto concept by Daniel Burge

203
00:10:17,240 --> 00:10:22,670
Bernstein boring crypto of course that's

204
00:10:20,180 --> 00:10:27,199
an idea this imaginary cryptography that

205
00:10:22,670 --> 00:10:30,740
always works that you can't misuse you

206
00:10:27,199 --> 00:10:33,529
don't need to update it just works it's

207
00:10:30,740 --> 00:10:38,139
it stays there it works it's strong it's

208
00:10:33,529 --> 00:10:41,839
usable and you know it's a perfect world

209
00:10:38,139 --> 00:10:43,970
again as a utopia yeah utopian

210
00:10:41,839 --> 00:10:46,250
cryptography so boring okay it's

211
00:10:43,970 --> 00:10:49,100
important boring in cryptography means

212
00:10:46,250 --> 00:10:52,189
good ok

213
00:10:49,100 --> 00:10:55,220
so boring crypt of course this is just a

214
00:10:52,189 --> 00:10:57,199
concept but as around many like

215
00:10:55,220 --> 00:11:00,500
libraries and many developers they try

216
00:10:57,199 --> 00:11:02,839
to to achieve like try to get to this

217
00:11:00,500 --> 00:11:05,179
concept as close as possible because

218
00:11:02,839 --> 00:11:05,870
boring crypto says it instead of a given

219
00:11:05,179 --> 00:11:08,949
side

220
00:11:05,870 --> 00:11:11,720
we should concentrate on use cases as

221
00:11:08,950 --> 00:11:14,180
developers may have how to store data

222
00:11:11,720 --> 00:11:16,700
come securely how to verify the source

223
00:11:14,180 --> 00:11:18,890
of data how to send data protected to

224
00:11:16,700 --> 00:11:22,010
each other right of course we understand

225
00:11:18,890 --> 00:11:25,939
that inside these use cases we still

226
00:11:22,010 --> 00:11:30,050
have ciphers key management's all the

227
00:11:25,940 --> 00:11:36,080
things but they are kinda covered by

228
00:11:30,050 --> 00:11:38,270
high level API and now with all this

229
00:11:36,080 --> 00:11:41,570
nice introduction let's deep into

230
00:11:38,270 --> 00:11:44,840
nightmare of developing and supporting

231
00:11:41,570 --> 00:11:47,690
this kind of high level boring crypt API

232
00:11:44,840 --> 00:11:50,270
so today we're going to talk about temas

233
00:11:47,690 --> 00:11:52,280
samus is this cryptographic library I

234
00:11:50,270 --> 00:11:55,040
maintain and like our company is

235
00:11:52,280 --> 00:11:58,760
maintaining free to use open source on

236
00:11:55,040 --> 00:12:01,400
github used a lot among multi platform

237
00:11:58,760 --> 00:12:04,910
applications and when we were making

238
00:12:01,400 --> 00:12:08,840
Tammis like five years ago we were

239
00:12:04,910 --> 00:12:11,780
inspired by this concept by Bernstein of

240
00:12:08,840 --> 00:12:13,610
course I read I read about boredom

241
00:12:11,780 --> 00:12:16,160
crypto only like two years ago and I

242
00:12:13,610 --> 00:12:18,260
thought oh this is what we'll be talking

243
00:12:16,160 --> 00:12:21,050
about so even you know without knowing

244
00:12:18,260 --> 00:12:25,430
the concept before we can't understand

245
00:12:21,050 --> 00:12:27,530
that yeah this is how I go and the thing

246
00:12:25,430 --> 00:12:29,780
is that in tammy's we use the same idea

247
00:12:27,530 --> 00:12:32,810
we use the same train of salt

248
00:12:29,780 --> 00:12:35,630
we decided that okay let's think about

249
00:12:32,810 --> 00:12:37,819
use cases how developers might need to

250
00:12:35,630 --> 00:12:40,820
use a cryptographic libraries and we

251
00:12:37,820 --> 00:12:44,450
come up with for large use cases that we

252
00:12:40,820 --> 00:12:48,290
call crypto systems very simple very

253
00:12:44,450 --> 00:12:52,490
simple I want to store data encrypted I

254
00:12:48,290 --> 00:12:54,140
want to send data to someone right

255
00:12:52,490 --> 00:12:56,870
directly encrypted

256
00:12:54,140 --> 00:13:00,740
I want to encrypt some long

257
00:12:56,870 --> 00:13:04,400
communication some long session and I

258
00:13:00,740 --> 00:13:08,180
want to authenticate for each of these

259
00:13:04,400 --> 00:13:12,130
use cases we did a crypto we created a

260
00:13:08,180 --> 00:13:16,010
crypto system that uses ciphers like

261
00:13:12,130 --> 00:13:17,870
that uses ciphers but it uses a

262
00:13:16,010 --> 00:13:20,030
combination of ciphers and for

263
00:13:17,870 --> 00:13:22,790
developers the API is very high

264
00:13:20,030 --> 00:13:25,640
so for for storage recall the thing as

265
00:13:22,790 --> 00:13:28,219
secure cell we kind of put data in a

266
00:13:25,640 --> 00:13:34,790
Cell in lip sodium the similar idea is a

267
00:13:28,220 --> 00:13:37,490
secure box you put detainer box to send

268
00:13:34,790 --> 00:13:41,449
someone data to send someone particular

269
00:13:37,490 --> 00:13:44,810
data we call it secure message again in

270
00:13:41,450 --> 00:13:46,400
secure cell we use an is-2 mode and we

271
00:13:44,810 --> 00:13:49,640
have this built in key derivation

272
00:13:46,400 --> 00:13:53,510
function so developers you know can

273
00:13:49,640 --> 00:13:55,790
submit mmm I can use not really long can

274
00:13:53,510 --> 00:13:58,189
use not cryptographically strong keys we

275
00:13:55,790 --> 00:13:59,900
still have a key DF inside for secure

276
00:13:58,190 --> 00:14:02,240
message we have this building in a

277
00:13:59,900 --> 00:14:05,300
generation key management so developers

278
00:14:02,240 --> 00:14:06,800
just need just can you call like hey I

279
00:14:05,300 --> 00:14:08,890
want to encrypt this piece of data for

280
00:14:06,800 --> 00:14:11,569
the user of this that's all they need

281
00:14:08,890 --> 00:14:14,630
it's a little bit tricky for sessions

282
00:14:11,570 --> 00:14:17,270
because sessions are like Peter pure and

283
00:14:14,630 --> 00:14:20,420
for sessions we want to emphasize on

284
00:14:17,270 --> 00:14:23,660
ephemeral keys so the encryption key for

285
00:14:20,420 --> 00:14:25,250
transport is always changing and that's

286
00:14:23,660 --> 00:14:28,490
why you need to have the secret session

287
00:14:25,250 --> 00:14:30,440
to sides but sessions work really simply

288
00:14:28,490 --> 00:14:33,890
for development perspective you just

289
00:14:30,440 --> 00:14:35,900
push date in a session and it's been

290
00:14:33,890 --> 00:14:37,730
encrypted and keys are bill rotated and

291
00:14:35,900 --> 00:14:40,069
all without you even understanding

292
00:14:37,730 --> 00:14:41,750
what's going on there and for

293
00:14:40,070 --> 00:14:45,230
authentication we made a secure

294
00:14:41,750 --> 00:14:47,750
cooperator that is zero knowledge proves

295
00:14:45,230 --> 00:14:52,160
based authentication on social

296
00:14:47,750 --> 00:14:56,690
millionaire problem which is not you

297
00:14:52,160 --> 00:14:59,150
know how zero knowledge proof works well

298
00:14:56,690 --> 00:15:01,630
as it is super simple without going into

299
00:14:59,150 --> 00:15:04,670
math lady is super simple you have

300
00:15:01,630 --> 00:15:08,030
that's authentication right so you want

301
00:15:04,670 --> 00:15:10,099
to compare secret that you have in two

302
00:15:08,030 --> 00:15:12,829
different places for zero knowledge

303
00:15:10,100 --> 00:15:15,080
proof you compare the secret without

304
00:15:12,830 --> 00:15:16,970
actually sending it over the network you

305
00:15:15,080 --> 00:15:18,950
stand just derivatives from the secret

306
00:15:16,970 --> 00:15:23,630
over the network and thus you can be

307
00:15:18,950 --> 00:15:26,360
sure with some percentage you can be

308
00:15:23,630 --> 00:15:28,340
sure that the secret is the same as

309
00:15:26,360 --> 00:15:30,350
there are different zero knowledge proof

310
00:15:28,340 --> 00:15:32,480
protocols interactive and non

311
00:15:30,350 --> 00:15:33,379
interactive some of them I use in

312
00:15:32,480 --> 00:15:36,769
blockchain

313
00:15:33,379 --> 00:15:39,319
we use interactive protocol which means

314
00:15:36,769 --> 00:15:42,109
that both parties need to do several

315
00:15:39,319 --> 00:15:45,649
hopes to make sure that the secret is

316
00:15:42,109 --> 00:15:48,319
the same I don't want to get like inside

317
00:15:45,649 --> 00:15:52,029
the cryptographic details let's more

318
00:15:48,319 --> 00:15:56,389
talk about the library itself and hidden

319
00:15:52,029 --> 00:16:00,289
problems so like the first hidden

320
00:15:56,389 --> 00:16:03,529
problem is obvious crypto systems and it

321
00:16:00,289 --> 00:16:05,809
uses that use different ciphers and that

322
00:16:03,529 --> 00:16:09,649
hide these ciphers from developers

323
00:16:05,809 --> 00:16:12,559
perspective this is how Tammis looks

324
00:16:09,649 --> 00:16:14,479
like as a library so instead of

325
00:16:12,559 --> 00:16:18,889
implementing our own cryptography

326
00:16:14,479 --> 00:16:21,409
obviously we used how cold crypto

327
00:16:18,889 --> 00:16:24,709
backends we use it's large libraries

328
00:16:21,409 --> 00:16:28,639
like open SSL boring gaseous el Libre

329
00:16:24,709 --> 00:16:31,189
SSL this shree we support and as a

330
00:16:28,639 --> 00:16:34,399
stable versions we also did a lot of

331
00:16:31,189 --> 00:16:37,569
experiments bare as a cell evolve as a

332
00:16:34,399 --> 00:16:41,089
cell have you heard about well for cell

333
00:16:37,569 --> 00:16:44,529
it exists yeah whereas a cell

334
00:16:41,089 --> 00:16:46,970
well for cell like live sodium go crypto

335
00:16:44,529 --> 00:16:49,579
Ukrainian of course Ukrainian old

336
00:16:46,970 --> 00:16:54,169
ciphers just because Ukraine have has on

337
00:16:49,579 --> 00:16:56,809
ciphers so the idea here is temas as API

338
00:16:54,169 --> 00:17:00,139
works with different crypto pecans and

339
00:16:56,809 --> 00:17:04,759
we can you know kind of switch them when

340
00:17:00,139 --> 00:17:08,120
we need basically the Cora library is

341
00:17:04,759 --> 00:17:11,990
written on C and it just provides I just

342
00:17:08,119 --> 00:17:15,378
uses these open SSL api's in in a

343
00:17:11,990 --> 00:17:18,500
fashion that from these core libraries

344
00:17:15,378 --> 00:17:21,469
we have very very high level very very

345
00:17:18,500 --> 00:17:25,579
usable very very understandable API on

346
00:17:21,470 --> 00:17:28,850
different languages right so

347
00:17:25,579 --> 00:17:31,519
cryptographic backgrounds core written

348
00:17:28,850 --> 00:17:34,158
on see that works with these

349
00:17:31,519 --> 00:17:38,389
cryptographic backends and then high

350
00:17:34,159 --> 00:17:39,080
level languages like library for

351
00:17:38,389 --> 00:17:41,750
language

352
00:17:39,080 --> 00:17:44,509
let me probably enumerate them for iOS

353
00:17:41,750 --> 00:17:46,550
and Android with a book for iOS that

354
00:17:44,509 --> 00:17:50,870
Swift and objective-c

355
00:17:46,550 --> 00:17:54,950
for Android Java Kotlin for C C++

356
00:17:50,870 --> 00:17:57,379
obviously then go PHP as something

357
00:17:54,950 --> 00:18:00,710
old-school then these hipster languages

358
00:17:57,380 --> 00:18:04,730
Python Ruby JavaScript and now we added

359
00:18:00,710 --> 00:18:07,490
webassembly and of course rust yeah sure

360
00:18:04,730 --> 00:18:11,090
many many cryptographers like rust so

361
00:18:07,490 --> 00:18:20,630
now we have rust and now we understand

362
00:18:11,090 --> 00:18:24,139
why it's not nightmare by the way can

363
00:18:20,630 --> 00:18:27,740
you guess on how many languages of these

364
00:18:24,140 --> 00:18:33,290
I can actually write code I can it's not

365
00:18:27,740 --> 00:18:35,120
perfect code no but it's somehow how

366
00:18:33,290 --> 00:18:37,730
many how many tell me the number how you

367
00:18:35,120 --> 00:18:47,030
how you estimate how good am I as a

368
00:18:37,730 --> 00:18:49,460
developer all of them close enough okay

369
00:18:47,030 --> 00:18:51,590
okay most most of them most of them I am

370
00:18:49,460 --> 00:18:55,700
NOT into PHP to be honest

371
00:18:51,590 --> 00:18:57,949
beryllium I for asked rust for me right

372
00:18:55,700 --> 00:19:02,530
now it's read-only so I can't read the

373
00:18:57,950 --> 00:19:06,590
code but I don't really write and rust

374
00:19:02,530 --> 00:19:11,030
C++ or C++ is a nightmare itself I try

375
00:19:06,590 --> 00:19:12,889
to avoid C++ as much as they can but in

376
00:19:11,030 --> 00:19:14,750
JavaScript of course it's better to

377
00:19:12,890 --> 00:19:17,510
avoid but this is JavaScript is

378
00:19:14,750 --> 00:19:20,300
everywhere so yeah mostly I kind of

379
00:19:17,510 --> 00:19:24,020
write on most of them not all of them

380
00:19:20,300 --> 00:19:26,540
but maybe like six seven fluently but we

381
00:19:24,020 --> 00:19:30,590
have a small team and we have this you

382
00:19:26,540 --> 00:19:32,480
know interconnected skills so we can

383
00:19:30,590 --> 00:19:36,730
support different languages with a small

384
00:19:32,480 --> 00:19:39,530
team but language is just one layer

385
00:19:36,730 --> 00:19:42,380
cryptographic library works somewhere

386
00:19:39,530 --> 00:19:44,600
right and for desktop and server

387
00:19:42,380 --> 00:19:47,510
operating systems we support to go into

388
00:19:44,600 --> 00:19:52,459
Debian CentOS ma class and now we start

389
00:19:47,510 --> 00:19:54,770
doing experimental bills for Windows no

390
00:19:52,460 --> 00:19:58,280
one no one on our team has been those

391
00:19:54,770 --> 00:19:59,379
computer it was tricky it was really

392
00:19:58,280 --> 00:20:01,450
tricky and

393
00:19:59,380 --> 00:20:04,240
currently we have have the support we

394
00:20:01,450 --> 00:20:06,820
even added to the dogs but we still mark

395
00:20:04,240 --> 00:20:09,580
it as experimental because was the

396
00:20:06,820 --> 00:20:10,300
worldö windows is you know very unknown

397
00:20:09,580 --> 00:20:14,080
for us

398
00:20:10,300 --> 00:20:16,090
however okay operating system right but

399
00:20:14,080 --> 00:20:25,720
operating system it's it's not like the

400
00:20:16,090 --> 00:20:34,270
name of the system for all these things

401
00:20:25,720 --> 00:20:36,820
we build and sign packages and of course

402
00:20:34,270 --> 00:20:40,690
this is a suicide like I called it

403
00:20:36,820 --> 00:20:45,760
suicide or desktop right let's remember

404
00:20:40,690 --> 00:20:47,590
about mobile I was too lazy to split

405
00:20:45,760 --> 00:20:53,500
Android because so many versions of

406
00:20:47,590 --> 00:20:56,459
Android so yeah when when you want to

407
00:20:53,500 --> 00:20:58,840
build like a multi-platform library

408
00:20:56,460 --> 00:21:00,880
somehow you realize that there are too

409
00:20:58,840 --> 00:21:04,030
many operating system in the world and

410
00:21:00,880 --> 00:21:06,550
the user is unfortunately like the own

411
00:21:04,030 --> 00:21:08,590
operating system really really a lot and

412
00:21:06,550 --> 00:21:10,360
then it's ready to move to another

413
00:21:08,590 --> 00:21:13,230
operating system just because you don't

414
00:21:10,360 --> 00:21:17,379
want to support it

415
00:21:13,230 --> 00:21:20,170
ok let's move next easy to use and hard

416
00:21:17,380 --> 00:21:22,300
to misuse for cryptographic library if

417
00:21:20,170 --> 00:21:25,030
it were you who are building

418
00:21:22,300 --> 00:21:28,060
cryptographic library which you think is

419
00:21:25,030 --> 00:21:30,340
more important your API your library is

420
00:21:28,060 --> 00:21:33,129
easy to use all your API and your

421
00:21:30,340 --> 00:21:41,189
library is hard to misuse which is more

422
00:21:33,130 --> 00:21:41,190
important ok ok let's what is it to use

423
00:21:44,190 --> 00:21:57,400
hard to miss you oh wow

424
00:21:51,930 --> 00:21:59,740
well for my perspective is both yeah

425
00:21:57,400 --> 00:22:02,050
does it it to the question for example

426
00:21:59,740 --> 00:22:04,930
starting from easy to use

427
00:22:02,050 --> 00:22:08,290
can you guess that's a real thing can

428
00:22:04,930 --> 00:22:11,110
you guess which cryptographic library is

429
00:22:08,290 --> 00:22:13,210
installed this way this is like a copy

430
00:22:11,110 --> 00:22:15,219
pasted from readme which

431
00:22:13,210 --> 00:22:19,690
cryptographic libraries he has these

432
00:22:15,220 --> 00:22:23,800
kind of installation process all of them

433
00:22:19,690 --> 00:22:26,620
yes most of them but this one you know

434
00:22:23,800 --> 00:22:32,680
it you know it you know it's really well

435
00:22:26,620 --> 00:22:34,419
it has SSL all SSL

436
00:22:32,680 --> 00:22:37,450
thank you I close enough well this is

437
00:22:34,420 --> 00:22:38,560
gonna be pasted from open SSL so really

438
00:22:37,450 --> 00:22:41,140
easy to do right

439
00:22:38,560 --> 00:22:43,300
just done all the library around make

440
00:22:41,140 --> 00:22:46,000
make test to make sure it's everything's

441
00:22:43,300 --> 00:22:47,470
fine make install of course there is

442
00:22:46,000 --> 00:22:51,100
they have a way to configure the

443
00:22:47,470 --> 00:22:53,230
installation so you can open their

444
00:22:51,100 --> 00:22:54,850
configuration file and configure all the

445
00:22:53,230 --> 00:22:57,250
things because obviously you need to

446
00:22:54,850 --> 00:23:01,240
configure everything right and the point

447
00:22:57,250 --> 00:23:04,330
is that in developers you know they may

448
00:23:01,240 --> 00:23:07,840
not want to do all the things on all

449
00:23:04,330 --> 00:23:10,540
these machines right especially they

450
00:23:07,840 --> 00:23:14,050
might want to install library if and

451
00:23:10,540 --> 00:23:17,830
only if this library is present in their

452
00:23:14,050 --> 00:23:20,950
favorite package manager and now let's

453
00:23:17,830 --> 00:23:22,780
talk about package managers because

454
00:23:20,950 --> 00:23:25,150
again operating systems are not enough

455
00:23:22,780 --> 00:23:28,990
each of them has their own package

456
00:23:25,150 --> 00:23:30,790
vendor for Windows we don't really

457
00:23:28,990 --> 00:23:32,500
support like a real package manager

458
00:23:30,790 --> 00:23:35,440
right now for Windows you need to

459
00:23:32,500 --> 00:23:37,750
compile the instead installation you

460
00:23:35,440 --> 00:23:40,410
know the Installer and then you can use

461
00:23:37,750 --> 00:23:43,060
nice installer with Windows guai guey

462
00:23:40,410 --> 00:23:44,980
however these are operating system

463
00:23:43,060 --> 00:23:49,470
package managers remember about

464
00:23:44,980 --> 00:23:52,660
languages each of them also has like a

465
00:23:49,470 --> 00:23:55,710
preference default industry proven

466
00:23:52,660 --> 00:23:58,690
package manager some of them have

467
00:23:55,710 --> 00:24:03,220
several industry proven package managers

468
00:23:58,690 --> 00:24:07,060
again developers kind expects you to

469
00:24:03,220 --> 00:24:09,670
support all of them which might be fine

470
00:24:07,060 --> 00:24:11,620
if you use if you work with volatile

471
00:24:09,670 --> 00:24:14,260
languages but which might be a little

472
00:24:11,620 --> 00:24:17,709
bit complicated when you have to follow

473
00:24:14,260 --> 00:24:20,800
them and of course of course every kid

474
00:24:17,710 --> 00:24:22,800
is a special kid so every language is

475
00:24:20,800 --> 00:24:26,149
especially in a very very different way

476
00:24:22,800 --> 00:24:28,550
my favorites is IO s

477
00:24:26,150 --> 00:24:30,800
obviously iOS as infrastructure I was

478
00:24:28,550 --> 00:24:33,980
like Isaiah system I was I was developer

479
00:24:30,800 --> 00:24:39,010
for yet for ages and it's a pain it's a

480
00:24:33,980 --> 00:24:42,350
pain for iOS like 10 MS for iOS has

481
00:24:39,010 --> 00:24:45,410
similar structure it can use open SSL or

482
00:24:42,350 --> 00:24:48,290
boring SSL because Apple doesn't provide

483
00:24:45,410 --> 00:24:51,290
you an easy of them as default options

484
00:24:48,290 --> 00:24:53,030
so you need to install any of them so it

485
00:24:51,290 --> 00:24:56,180
uses up less cell or boring as a cell

486
00:24:53,030 --> 00:24:59,350
then it has this C language like C

487
00:24:56,180 --> 00:25:04,100
library and then it has Objective C

488
00:24:59,350 --> 00:25:06,980
proper and thankfully thankfully to the

489
00:25:04,100 --> 00:25:10,129
interoperable interoperability between

490
00:25:06,980 --> 00:25:12,350
Objective C and Swift we don't need to

491
00:25:10,130 --> 00:25:14,690
support Swift like separately we just

492
00:25:12,350 --> 00:25:17,179
support Objective C and developers can

493
00:25:14,690 --> 00:25:19,190
use it either from Swift or from

494
00:25:17,180 --> 00:25:22,220
Objective C applications which is good

495
00:25:19,190 --> 00:25:24,920
but the problem is with package managers

496
00:25:22,220 --> 00:25:27,950
in iOS world we have the cocoa pods we

497
00:25:24,920 --> 00:25:31,250
have cartage we have new Apple well why

498
00:25:27,950 --> 00:25:33,320
away Swift package manager and of course

499
00:25:31,250 --> 00:25:36,050
my developers still add libraries

500
00:25:33,320 --> 00:25:38,120
manually currently in tammy's we don't

501
00:25:36,050 --> 00:25:41,870
supports v package manager because they

502
00:25:38,120 --> 00:25:44,270
just don't feel the time capable to

503
00:25:41,870 --> 00:25:46,760
understand what going on there it's so

504
00:25:44,270 --> 00:25:49,520
complicated to support if you have see

505
00:25:46,760 --> 00:25:52,370
not only Swift it's really complicated

506
00:25:49,520 --> 00:25:55,129
so I just opened an issue in ASCII now

507
00:25:52,370 --> 00:25:57,169
even github saying hey if someone can

508
00:25:55,130 --> 00:26:01,070
help us to support this package manager

509
00:25:57,170 --> 00:26:06,230
because it requires so much time but in

510
00:26:01,070 --> 00:26:07,060
iOS world things change really really

511
00:26:06,230 --> 00:26:12,890
fast

512
00:26:07,060 --> 00:26:15,530
for example the iOS itself as operating

513
00:26:12,890 --> 00:26:18,230
system a you have we have this new iOS

514
00:26:15,530 --> 00:26:21,110
version every year and we have minor

515
00:26:18,230 --> 00:26:23,270
version several times a year usually

516
00:26:21,110 --> 00:26:26,030
minor versions are not a problem but

517
00:26:23,270 --> 00:26:28,879
major versions can be a problem then as

518
00:26:26,030 --> 00:26:34,160
developers they use Xcode which is a ID

519
00:26:28,880 --> 00:26:37,880
and if Xcode hi Xcode provides Swift

520
00:26:34,160 --> 00:26:39,980
language version and right now it's the

521
00:26:37,880 --> 00:26:45,230
current version is Swift

522
00:26:39,980 --> 00:26:49,310
five point one so it's a fifth version

523
00:26:45,230 --> 00:26:51,710
of Swift and most of them don't have you

524
00:26:49,310 --> 00:26:56,629
know direct easy-to-use interoperability

525
00:26:51,710 --> 00:27:00,080
so with each new Xcode that has each new

526
00:26:56,630 --> 00:27:07,030
Swift version for each new iOS version

527
00:27:00,080 --> 00:27:09,860
for each new iPhone iPad mug a book and

528
00:27:07,030 --> 00:27:12,590
we need to to make sure that everything

529
00:27:09,860 --> 00:27:14,990
is working or to update things that are

530
00:27:12,590 --> 00:27:17,120
broken and then package managers of

531
00:27:14,990 --> 00:27:19,010
course they have their own release

532
00:27:17,120 --> 00:27:21,969
cycles and sometimes they also make

533
00:27:19,010 --> 00:27:24,860
updates and open a seven boring SSL

534
00:27:21,970 --> 00:27:28,880
sometimes they they have updates too

535
00:27:24,860 --> 00:27:31,399
so for iOS it just endless updating and

536
00:27:28,880 --> 00:27:34,130
updating and updating and updating just

537
00:27:31,400 --> 00:27:40,190
to make sure is it's it's not broken on

538
00:27:34,130 --> 00:27:48,080
your latest iPhones it's so fun it's

539
00:27:40,190 --> 00:27:50,750
really it's also fun much fun a lot of

540
00:27:48,080 --> 00:27:53,449
fun especially when you realize that you

541
00:27:50,750 --> 00:27:55,460
you are not working on new features you

542
00:27:53,450 --> 00:28:02,870
just want to make sure it's working as

543
00:27:55,460 --> 00:28:06,410
before Android Android is another kind

544
00:28:02,870 --> 00:28:09,080
of kid so for Android right now for

545
00:28:06,410 --> 00:28:10,610
Android phones Google has born and guess

546
00:28:09,080 --> 00:28:14,570
itself yeah you know the difference

547
00:28:10,610 --> 00:28:17,449
between open s7 boring SSL so long story

548
00:28:14,570 --> 00:28:20,450
short open the cell kinda old but bad

549
00:28:17,450 --> 00:28:24,080
because many bugs many ARMs they still

550
00:28:20,450 --> 00:28:26,990
support old-school deprecated ciphers

551
00:28:24,080 --> 00:28:29,929
and on some points Google decided to

552
00:28:26,990 --> 00:28:33,020
fork open SSL and call it boarding as a

553
00:28:29,930 --> 00:28:35,390
cell and we duplicate it all this all

554
00:28:33,020 --> 00:28:37,730
ciphers remove all the things and Google

555
00:28:35,390 --> 00:28:39,290
X will actually patch a lot of ciphers

556
00:28:37,730 --> 00:28:44,180
like a lot of problems in the garden can

557
00:28:39,290 --> 00:28:46,190
sell faster but Google doesn't says as

558
00:28:44,180 --> 00:28:49,100
it doesn't say you that you need that

559
00:28:46,190 --> 00:28:52,970
you should use boring SSL they say

560
00:28:49,100 --> 00:28:53,659
boring is a cell that's our library of

561
00:28:52,970 --> 00:28:55,310
course it's

562
00:28:53,660 --> 00:28:57,760
open-source you can use it but we don't

563
00:28:55,310 --> 00:29:01,070
promise you any backward compatibility

564
00:28:57,760 --> 00:29:03,950
moreover they don't have releases they

565
00:29:01,070 --> 00:29:06,860
just push everything in master and good

566
00:29:03,950 --> 00:29:10,970
luck if new commits breaks the previous

567
00:29:06,860 --> 00:29:14,449
one so and on Android we have boring as

568
00:29:10,970 --> 00:29:16,400
a cell by default so for alpha time it's

569
00:29:14,450 --> 00:29:19,400
Android we decided okay we will use only

570
00:29:16,400 --> 00:29:22,640
boring Excel again we're in SSL then the

571
00:29:19,400 --> 00:29:25,730
Secor then Java for Java we need this

572
00:29:22,640 --> 00:29:29,710
and Lebanese it Jeanne Jeanne I layer

573
00:29:25,730 --> 00:29:34,690
which provides API from C to Java and

574
00:29:29,710 --> 00:29:38,510
then the Java so Android developers

575
00:29:34,690 --> 00:29:41,270
again luckily to the interoperability

576
00:29:38,510 --> 00:29:44,120
between Java and Kotlin they can use

577
00:29:41,270 --> 00:29:48,290
temas and we can support only Java it's

578
00:29:44,120 --> 00:29:50,330
fine however with jeanne i with this

579
00:29:48,290 --> 00:29:52,580
layer it's really complicated to debug

580
00:29:50,330 --> 00:29:54,710
what's going on either these are the

581
00:29:52,580 --> 00:29:59,629
problems in sea level all these a java

582
00:29:54,710 --> 00:30:01,790
problems and with boring ssl it's really

583
00:29:59,630 --> 00:30:03,970
complicated to support it because of all

584
00:30:01,790 --> 00:30:07,460
these problems with versioning for

585
00:30:03,970 --> 00:30:10,400
example recently they decided they

586
00:30:07,460 --> 00:30:17,180
should not they should stop post stop

587
00:30:10,400 --> 00:30:19,160
support in GCC why because i mean i

588
00:30:17,180 --> 00:30:21,380
don't know i don't i don't have time to

589
00:30:19,160 --> 00:30:23,810
read the mailing list i'm sure they have

590
00:30:21,380 --> 00:30:27,470
the proper like validation of this idea

591
00:30:23,810 --> 00:30:30,679
for me it was it was suddenly because

592
00:30:27,470 --> 00:30:33,680
our builds on CI starts failing with

593
00:30:30,680 --> 00:30:38,450
nice error message GCC is not longer

594
00:30:33,680 --> 00:30:41,360
supported thank you of course we good we

595
00:30:38,450 --> 00:30:44,180
googled and we did a really small fix

596
00:30:41,360 --> 00:30:48,439
which is disabled GCC so we say ok let's

597
00:30:44,180 --> 00:30:49,940
use silver clock from now but it was you

598
00:30:48,440 --> 00:30:50,930
know it's not this kind of things you

599
00:30:49,940 --> 00:30:53,930
want to handle it

600
00:30:50,930 --> 00:30:57,440
in the morning when you see red red

601
00:30:53,930 --> 00:31:00,880
built from CI then we was thinking we

602
00:30:57,440 --> 00:31:05,150
were saying we were saying hey why our

603
00:31:00,880 --> 00:31:07,050
android bills are so slow okay Android

604
00:31:05,150 --> 00:31:10,020
is slow okay hundred

605
00:31:07,050 --> 00:31:13,669
later is slow okay but why building

606
00:31:10,020 --> 00:31:19,410
boring SSL is so slow it can be like 30

607
00:31:13,670 --> 00:31:21,510
34 minutes minutes that's too much and

608
00:31:19,410 --> 00:31:23,400
then we found out that we actually we

609
00:31:21,510 --> 00:31:25,980
built all the things in repository and

610
00:31:23,400 --> 00:31:29,640
boring carousel repository is a huge

611
00:31:25,980 --> 00:31:33,330
huge collection of library itself tests

612
00:31:29,640 --> 00:31:36,870
examples examples tests examples and we

613
00:31:33,330 --> 00:31:38,850
build them all in the like hmm probably

614
00:31:36,870 --> 00:31:42,179
that's too much we only need the library

615
00:31:38,850 --> 00:31:45,179
so we add only like we start building on

616
00:31:42,180 --> 00:31:50,730
the library and we decreased builds time

617
00:31:45,180 --> 00:31:53,430
only to 12 minutes three times mm-hmm of

618
00:31:50,730 --> 00:31:57,810
course 12 minutes is also a little bit

619
00:31:53,430 --> 00:32:01,290
long but better than 34 then boring

620
00:31:57,810 --> 00:32:03,659
Jesus LEM born with the sound of course

621
00:32:01,290 --> 00:32:06,899
as Google they have a lot of libraries

622
00:32:03,660 --> 00:32:08,700
for iOS for example if your iOS

623
00:32:06,900 --> 00:32:09,900
developer and you want to use firebase

624
00:32:08,700 --> 00:32:15,380
which is made by Google

625
00:32:09,900 --> 00:32:18,600
firebase uses boring SSL that's why

626
00:32:15,380 --> 00:32:21,960
developers that already use firebase and

627
00:32:18,600 --> 00:32:24,240
want to use Tammis for encryption they

628
00:32:21,960 --> 00:32:25,740
already have board and SSL and it

629
00:32:24,240 --> 00:32:27,800
doesn't make a lot of sense to add

630
00:32:25,740 --> 00:32:31,320
openness cell at the same project right

631
00:32:27,800 --> 00:32:33,330
first of all why and taken because of

632
00:32:31,320 --> 00:32:35,040
the duplication of the symbols it's

633
00:32:33,330 --> 00:32:37,230
really complicated to compile the

634
00:32:35,040 --> 00:32:38,790
project that has both board and concern

635
00:32:37,230 --> 00:32:42,510
and open a cell because they're Hatter's

636
00:32:38,790 --> 00:32:45,030
a pretty much the same so we did we did

637
00:32:42,510 --> 00:32:48,290
this we did version for iOS for 10

638
00:32:45,030 --> 00:32:51,870
minutes with bonding as a cell okay and

639
00:32:48,290 --> 00:32:57,690
somehow we found out that Google does

640
00:32:51,870 --> 00:33:01,100
not support is XTS mode only for iOS in

641
00:32:57,690 --> 00:33:03,540
boring this is a it just looked there

642
00:33:01,100 --> 00:33:05,879
like bottom gazelle is very different

643
00:33:03,540 --> 00:33:07,860
you know from iOS and not iOS and this

644
00:33:05,880 --> 00:33:10,710
is something Google supports so it's not

645
00:33:07,860 --> 00:33:13,139
like someone's fork and I was thinking

646
00:33:10,710 --> 00:33:15,690
hmmm what should I do

647
00:33:13,140 --> 00:33:17,970
shall I ask Google to to start

648
00:33:15,690 --> 00:33:20,940
supporting is 60s for burdened gazelle

649
00:33:17,970 --> 00:33:23,730
for iOS or like I

650
00:33:20,940 --> 00:33:26,700
decided to do it in a easier way for me

651
00:33:23,730 --> 00:33:29,670
I just found a place in our code when we

652
00:33:26,700 --> 00:33:33,480
use iOS XS and they found out that we

653
00:33:29,670 --> 00:33:35,790
don't actually use it but it we have it

654
00:33:33,480 --> 00:33:40,680
you know as a symbol so we have it as a

655
00:33:35,790 --> 00:33:43,860
header and we did a great thing which is

656
00:33:40,680 --> 00:33:47,220
disabled which is we just used even

657
00:33:43,860 --> 00:33:49,979
define and now we just don't don't

658
00:33:47,220 --> 00:33:55,460
mention OS X tears in our source code

659
00:33:49,980 --> 00:34:00,240
for iOS for that uses boring SSL and

660
00:33:55,460 --> 00:34:03,540
just estimate how many these feature

661
00:34:00,240 --> 00:34:05,720
flags we have in our code for each of

662
00:34:03,540 --> 00:34:08,969
these platforms

663
00:34:05,720 --> 00:34:11,490
okay that was about easy to use so to

664
00:34:08,969 --> 00:34:14,489
make library easy to use you really need

665
00:34:11,489 --> 00:34:18,810
to spend some time let's move to the

666
00:34:14,489 --> 00:34:21,689
heart to misuse you know they're a

667
00:34:18,810 --> 00:34:26,310
different kind of like abstractions

668
00:34:21,690 --> 00:34:28,050
level starting from cypher through

669
00:34:26,310 --> 00:34:31,139
cryptographic library cryptographic

670
00:34:28,050 --> 00:34:34,170
system and a box solution and when you

671
00:34:31,139 --> 00:34:38,759
work on a cipher like level you have

672
00:34:34,170 --> 00:34:40,800
nice flexibility to use two different

673
00:34:38,760 --> 00:34:42,780
ciphers different modes different

674
00:34:40,800 --> 00:34:46,320
partings here the earlier they are but

675
00:34:42,780 --> 00:34:50,490
it's actually a pain and the source of

676
00:34:46,320 --> 00:34:53,160
mistakes so for developers it might be

677
00:34:50,489 --> 00:34:54,959
easy to use crypto libraries or even

678
00:34:53,159 --> 00:34:57,660
crypto systems so they don't need to

679
00:34:54,960 --> 00:35:01,110
make no extra salt and they don't need

680
00:34:57,660 --> 00:35:03,899
to have PhD in cryptography just to

681
00:35:01,110 --> 00:35:06,150
encrypt the data however when we when

682
00:35:03,900 --> 00:35:08,400
you start using crypto system you don't

683
00:35:06,150 --> 00:35:10,950
have this flexibility anymore you use

684
00:35:08,400 --> 00:35:16,680
just just high-level API and you can

685
00:35:10,950 --> 00:35:19,560
actually customize it so for example 10

686
00:35:16,680 --> 00:35:22,020
is we have 40 minutes we aim it to be

687
00:35:19,560 --> 00:35:24,420
crypto system and maybe like even a box

688
00:35:22,020 --> 00:35:30,570
solution so we aim to have really high

689
00:35:24,420 --> 00:35:32,850
level of abstraction why it matters this

690
00:35:30,570 --> 00:35:37,770
is common crypto

691
00:35:32,850 --> 00:35:41,400
native cryptographic library and this is

692
00:35:37,770 --> 00:35:44,280
how to encrypt data in using is in

693
00:35:41,400 --> 00:35:49,500
common crypto one two three four five

694
00:35:44,280 --> 00:35:53,310
six seven eight nine three three eleven

695
00:35:49,500 --> 00:35:57,540
right eleven parameters just encrypt the

696
00:35:53,310 --> 00:36:00,180
data good luck that's another library

697
00:35:57,540 --> 00:36:01,830
and this is copy pasted from rid me of

698
00:36:00,180 --> 00:36:04,790
this library this library is super

699
00:36:01,830 --> 00:36:08,370
popular in iOS world super popular

700
00:36:04,790 --> 00:36:10,710
however one hmm it's easy okay it's

701
00:36:08,370 --> 00:36:13,109
easier to do is encryption here only two

702
00:36:10,710 --> 00:36:17,580
lines not eleven parameters

703
00:36:13,110 --> 00:36:19,830
however oopsie most developers that copy

704
00:36:17,580 --> 00:36:23,810
paste it from readme already make one

705
00:36:19,830 --> 00:36:26,100
two at least two cryptographic mistakes

706
00:36:23,810 --> 00:36:28,940
because these are developers come on

707
00:36:26,100 --> 00:36:33,529
they don't know that IV should be random

708
00:36:28,940 --> 00:36:33,530
they just copy pasted from where hmm

709
00:36:33,740 --> 00:36:38,100
that key should be like a proper key

710
00:36:36,830 --> 00:36:47,520
right

711
00:36:38,100 --> 00:36:48,990
I think the key key key is a nice key so

712
00:36:47,520 --> 00:36:51,420
the thing is that using this library

713
00:36:48,990 --> 00:36:54,060
like developers need to understand is

714
00:36:51,420 --> 00:36:58,230
that even if they copy paste things from

715
00:36:54,060 --> 00:37:00,509
readme they did it wrong right and this

716
00:36:58,230 --> 00:37:03,000
is really popular in iOS world like

717
00:37:00,510 --> 00:37:09,540
super bubble library eleven thousand

718
00:37:03,000 --> 00:37:12,240
stars on github Intimus four hours

719
00:37:09,540 --> 00:37:14,160
we have really simple API like API that

720
00:37:12,240 --> 00:37:18,540
looks pretty much the same

721
00:37:14,160 --> 00:37:21,359
however without Ivy and we kind of say

722
00:37:18,540 --> 00:37:24,390
that okay you don't need to put like

723
00:37:21,360 --> 00:37:27,390
super strong random super strong random

724
00:37:24,390 --> 00:37:28,890
symmetric key we have KDF inside like

725
00:37:27,390 --> 00:37:33,180
please make sure that your key is long

726
00:37:28,890 --> 00:37:35,370
and has enough entropy but we can handle

727
00:37:33,180 --> 00:37:37,649
it and you don't need to care to take

728
00:37:35,370 --> 00:37:40,020
care about ivy the need to take care

729
00:37:37,650 --> 00:37:44,160
about salt you don't need to select the

730
00:37:40,020 --> 00:37:46,410
mode all the things and this is what I

731
00:37:44,160 --> 00:37:49,259
say what I called hard to

732
00:37:46,410 --> 00:37:55,230
misuse because as we support all these

733
00:37:49,260 --> 00:38:00,329
12 systems we have similar API across 12

734
00:37:55,230 --> 00:38:02,789
of them now guess their language do you

735
00:38:00,329 --> 00:38:07,500
see it okay or which we can turn off the

736
00:38:02,789 --> 00:38:08,700
lights if it's not really visible yeah

737
00:38:07,500 --> 00:38:11,430
let's try to turn off the lights if

738
00:38:08,700 --> 00:38:15,779
again just for another couple of slides

739
00:38:11,430 --> 00:38:25,308
who see user mode yeah okay okay so

740
00:38:15,780 --> 00:38:30,530
guess is the language vital no rest no

741
00:38:25,309 --> 00:38:37,410
God no Swift yes yes

742
00:38:30,530 --> 00:38:41,490
next one against the language let me see

743
00:38:37,410 --> 00:38:47,210
I think it's I think it's rust

744
00:38:41,490 --> 00:38:50,939
I think it's rust okay okay next one

745
00:38:47,210 --> 00:38:53,309
Python yeah you see it's fight timers so

746
00:38:50,940 --> 00:38:56,490
the the thing like the idea here is that

747
00:38:53,309 --> 00:39:00,059
we're we have pretty much the same API

748
00:38:56,490 --> 00:39:03,029
for each language two lines of code for

749
00:39:00,059 --> 00:39:05,520
all these twelve languages and we kind

750
00:39:03,029 --> 00:39:08,670
the handle all these choices of

751
00:39:05,520 --> 00:39:11,549
criticises huge mouth padding we handle

752
00:39:08,670 --> 00:39:14,069
like memory management scheme management

753
00:39:11,549 --> 00:39:16,740
and for more high-level functions like

754
00:39:14,069 --> 00:39:19,500
secure session for maha level crypto

755
00:39:16,740 --> 00:39:22,078
systems we even handle a syndication and

756
00:39:19,500 --> 00:39:25,529
work on keys thank you can we please

757
00:39:22,079 --> 00:39:27,990
turn on the light great yeah you're

758
00:39:25,529 --> 00:39:34,170
doing great and so in guessing languages

759
00:39:27,990 --> 00:39:38,689
yeah however as explained there are so

760
00:39:34,170 --> 00:39:44,039
many things to work on probably probably

761
00:39:38,690 --> 00:39:48,119
we should test everything and just to

762
00:39:44,039 --> 00:39:52,349
show you the scale so I made one I made

763
00:39:48,119 --> 00:39:54,870
I counted a number of lines for for

764
00:39:52,349 --> 00:39:58,710
source folder of Tammuz

765
00:39:54,870 --> 00:40:01,529
let's say that we have 35,000 lines

766
00:39:58,710 --> 00:40:03,180
which is like a cold lines not to

767
00:40:01,530 --> 00:40:06,330
comment on the things on the code lines

768
00:40:03,180 --> 00:40:11,759
and to show you the scale for tests

769
00:40:06,330 --> 00:40:20,250
folder we have three hundred forty-eight

770
00:40:11,760 --> 00:40:23,250
thousand lines 10 times more just

771
00:40:20,250 --> 00:40:25,760
because to make sure that all these you

772
00:40:23,250 --> 00:40:28,440
want to make a picture here please I

773
00:40:25,760 --> 00:40:31,710
know the line numbers are fascinating

774
00:40:28,440 --> 00:40:35,250
right I don't know just to make sure

775
00:40:31,710 --> 00:40:39,480
that all these twelve great languages on

776
00:40:35,250 --> 00:40:42,570
all these nice operating systems are

777
00:40:39,480 --> 00:40:45,900
working in the same way who has a huge

778
00:40:42,570 --> 00:40:47,730
huge huge testing process of course of

779
00:40:45,900 --> 00:40:49,620
everything is automated because you

780
00:40:47,730 --> 00:40:52,050
can't see manually like manual key

781
00:40:49,620 --> 00:40:54,540
trying to test cryptography it doesn't

782
00:40:52,050 --> 00:40:57,300
work here so all the tests use our

783
00:40:54,540 --> 00:40:59,610
automated like for each language a lot

784
00:40:57,300 --> 00:41:03,210
of unit tests for cryptography for

785
00:40:59,610 --> 00:41:06,270
cryptic or NIST tests then of course

786
00:41:03,210 --> 00:41:10,740
fuzzing we use this American fuzz has a

787
00:41:06,270 --> 00:41:14,550
loop house code lop yeah we use it to

788
00:41:10,740 --> 00:41:18,350
fast inputs of mainly for high level API

789
00:41:14,550 --> 00:41:22,050
as if we were not really good developers

790
00:41:18,350 --> 00:41:24,870
right and tried to hack our own inputs

791
00:41:22,050 --> 00:41:29,640
of our own API then of course a lot of

792
00:41:24,870 --> 00:41:32,930
linkers sanitizers static Adana analytic

793
00:41:29,640 --> 00:41:36,060
tools memory management tools

794
00:41:32,930 --> 00:41:39,509
integration tests my favorite bugs are

795
00:41:36,060 --> 00:41:43,430
bugs when the same when when application

796
00:41:39,510 --> 00:41:48,570
of python encrypts the data an

797
00:41:43,430 --> 00:41:50,640
application Ruby can't decrypt data so

798
00:41:48,570 --> 00:41:53,730
to eliminate these kind of bugs because

799
00:41:50,640 --> 00:41:54,629
we have we have one of them between iOS

800
00:41:53,730 --> 00:41:58,650
and Android

801
00:41:54,630 --> 00:42:01,020
sure so to eliminate this this kind of

802
00:41:58,650 --> 00:42:06,960
bugs we built in integration testing

803
00:42:01,020 --> 00:42:08,369
between all those languages on all these

804
00:42:06,960 --> 00:42:11,640
platforms

805
00:42:08,369 --> 00:42:19,710
but this is not enough which bit is

806
00:42:11,640 --> 00:42:22,078
missing III give you a hint the library

807
00:42:19,710 --> 00:42:27,869
has been updated time to time which bit

808
00:42:22,079 --> 00:42:30,539
is missing hmm worsening yeah backwards

809
00:42:27,869 --> 00:42:33,390
compatibility tests because again we

810
00:42:30,539 --> 00:42:35,910
need to make sure that the Ruby

811
00:42:33,390 --> 00:42:38,549
application that use previous version on

812
00:42:35,910 --> 00:42:41,788
Tammis and encrypts the data can decrypt

813
00:42:38,549 --> 00:42:43,890
the data if they updated temas again

814
00:42:41,789 --> 00:42:47,609
it's not like we are so smart

815
00:42:43,890 --> 00:42:49,109
we had these bugs all these things it's

816
00:42:47,609 --> 00:42:50,940
not because we're smart because we had

817
00:42:49,109 --> 00:42:53,160
this box and we decided ok better we

818
00:42:50,940 --> 00:42:56,190
write tests use for them then having

819
00:42:53,160 --> 00:42:58,410
them again and these are a couple of

820
00:42:56,190 --> 00:43:01,140
links just in case you will also want to

821
00:42:58,410 --> 00:43:05,160
add some static code analysis things to

822
00:43:01,140 --> 00:43:07,558
you to your repositories and to your

823
00:43:05,160 --> 00:43:10,229
projects I really like the second ones

824
00:43:07,559 --> 00:43:12,839
close oh you know you know like expect

825
00:43:10,229 --> 00:43:15,390
Inspector Clouseau I'm a I'm I don't

826
00:43:12,839 --> 00:43:18,569
know French so I may be really products

827
00:43:15,390 --> 00:43:21,629
in chrome but the idea is that these two

828
00:43:18,569 --> 00:43:24,839
reads through your code and trying to

829
00:43:21,630 --> 00:43:27,930
find out keys and passwords that you

830
00:43:24,839 --> 00:43:29,640
left in your code it doesn't work for us

831
00:43:27,930 --> 00:43:34,288
because we write cryptography and we

832
00:43:29,640 --> 00:43:36,690
have the world key everywhere so once we

833
00:43:34,289 --> 00:43:39,329
run it we have like 300 false positives

834
00:43:36,690 --> 00:43:42,059
and we decided ok not for us but it's

835
00:43:39,329 --> 00:43:45,200
really great and to answer your next

836
00:43:42,059 --> 00:43:48,900
question of course you can't have one

837
00:43:45,200 --> 00:43:52,558
too you know to run all these tests we

838
00:43:48,900 --> 00:43:56,009
use Sokka CI and B tries as as such as

839
00:43:52,559 --> 00:43:58,380
like public tools and another github we

840
00:43:56,009 --> 00:44:01,049
have for each leg pull request we have

841
00:43:58,380 --> 00:44:04,890
tests from circle CI they are really

842
00:44:01,049 --> 00:44:08,009
quick but through the whole 12 languages

843
00:44:04,890 --> 00:44:11,038
we tries we use mainly for Apple

844
00:44:08,009 --> 00:44:13,349
ecosystem for iOS Mac OS tests and we

845
00:44:11,039 --> 00:44:15,660
put Android there as well but all this

846
00:44:13,349 --> 00:44:18,180
integration testing all this puzzling

847
00:44:15,660 --> 00:44:20,999
it's happened inside our infrastructure

848
00:44:18,180 --> 00:44:22,089
we using build boat just because when we

849
00:44:20,999 --> 00:44:25,180
calculated you know

850
00:44:22,090 --> 00:44:28,510
amount of time this tests are running we

851
00:44:25,180 --> 00:44:31,149
understood that we can't afford by an

852
00:44:28,510 --> 00:44:33,880
external services we need to build an

853
00:44:31,150 --> 00:44:38,620
our own because these tests are really

854
00:44:33,880 --> 00:44:42,430
long like nightly tests and of course

855
00:44:38,620 --> 00:44:44,740
last but not least it won't work if you

856
00:44:42,430 --> 00:44:50,470
don't make pay attention on on the code

857
00:44:44,740 --> 00:44:53,500
that's why we try we try to do this you

858
00:44:50,470 --> 00:44:56,890
know security Sprint's just to focus on

859
00:44:53,500 --> 00:45:01,120
specific potential issues we can have we

860
00:44:56,890 --> 00:45:04,450
when we store keys more longer than we

861
00:45:01,120 --> 00:45:07,540
should or when we have like potential

862
00:45:04,450 --> 00:45:10,600
memory like buffer overflow problems and

863
00:45:07,540 --> 00:45:14,200
there is a nice link clipped according

864
00:45:10,600 --> 00:45:16,330
with a lot of ideas how to improve your

865
00:45:14,200 --> 00:45:19,120
code if you handle just in case

866
00:45:16,330 --> 00:45:21,069
cryptography and of course we do manual

867
00:45:19,120 --> 00:45:23,470
reviews and this is fair manual reviews

868
00:45:21,070 --> 00:45:25,510
are like good because we have our own

869
00:45:23,470 --> 00:45:27,520
photographers on board and we use

870
00:45:25,510 --> 00:45:31,510
external audits just because everyone

871
00:45:27,520 --> 00:45:35,920
make mistakes and just automated tests

872
00:45:31,510 --> 00:45:40,660
are not enough let's probably quickly

873
00:45:35,920 --> 00:45:42,940
skip this one because again it's not

874
00:45:40,660 --> 00:45:45,279
enough to have a library you need to

875
00:45:42,940 --> 00:45:46,840
describe how to use it and the lot of

876
00:45:45,280 --> 00:45:50,290
cryptographic libraries have one page a

877
00:45:46,840 --> 00:45:54,370
one-page read name sorry

878
00:45:50,290 --> 00:45:55,750
it doesn't like it mold work kind of and

879
00:45:54,370 --> 00:45:57,339
we support all the things we need to

880
00:45:55,750 --> 00:45:59,440
have separate readme for all these

881
00:45:57,340 --> 00:46:02,650
languages of course and of course people

882
00:45:59,440 --> 00:46:08,170
say I don't want to read with me I want

883
00:46:02,650 --> 00:46:10,180
to copy paste ok ok ok we put real you

884
00:46:08,170 --> 00:46:13,150
know real code snippets in those

885
00:46:10,180 --> 00:46:15,910
documents in those tutorials free to

886
00:46:13,150 --> 00:46:18,970
copy like safe to copy paste however

887
00:46:15,910 --> 00:46:22,140
people still ask questions ok I can copy

888
00:46:18,970 --> 00:46:22,140
paste it but where to put it

889
00:46:23,130 --> 00:46:27,360
fine

890
00:46:24,640 --> 00:46:29,808
we made example applications and again

891
00:46:27,360 --> 00:46:33,109
showing the numbers

892
00:46:29,809 --> 00:46:35,359
1 million lines of code for each this

893
00:46:33,109 --> 00:46:38,420
language we made example applications

894
00:46:35,359 --> 00:46:42,558
and imagine we need to build and test

895
00:46:38,420 --> 00:46:46,579
these example applications as well right

896
00:46:42,559 --> 00:46:48,380
so amount of example apps is I don't

897
00:46:46,579 --> 00:46:50,809
know how many times bigger than the

898
00:46:48,380 --> 00:46:53,869
source code then users are still

899
00:46:50,809 --> 00:46:56,359
complaining because their own app is not

900
00:46:53,869 --> 00:46:58,519
like example app of course this examples

901
00:46:56,359 --> 00:47:00,439
a little bit you know artificial they

902
00:46:58,519 --> 00:47:02,269
show how to use it but as they are not a

903
00:47:00,439 --> 00:47:05,180
real apps they don't have like specific

904
00:47:02,269 --> 00:47:10,959
use case and users that's asking but how

905
00:47:05,180 --> 00:47:13,999
can use it if I am building X Y that ok

906
00:47:10,959 --> 00:47:16,489
we build like tutorials we build a real

907
00:47:13,999 --> 00:47:19,729
applications multi-platform applications

908
00:47:16,489 --> 00:47:21,920
we open source a lot of things we have

909
00:47:19,729 --> 00:47:24,229
this workshop like workshops

910
00:47:21,920 --> 00:47:27,920
everything is open source with nice blog

911
00:47:24,229 --> 00:47:30,828
post explaining things still users are

912
00:47:27,920 --> 00:47:37,069
complaining you know it works in your

913
00:47:30,829 --> 00:47:40,900
app but it doesn't work in my app ok we

914
00:47:37,069 --> 00:47:46,640
said fine and build interactive

915
00:47:40,900 --> 00:47:49,099
simulators so on other website you can

916
00:47:46,640 --> 00:47:51,170
find a page where for example you can

917
00:47:49,099 --> 00:47:53,420
test your encryption so as a user you

918
00:47:51,170 --> 00:47:55,910
have let's say like Ruby application and

919
00:47:53,420 --> 00:47:58,880
you can clip the data there and you need

920
00:47:55,910 --> 00:48:00,589
you want to make sure you can decrypt it

921
00:47:58,880 --> 00:48:03,529
that you can figure everything fine

922
00:48:00,589 --> 00:48:06,049
so you open our web page you put and

923
00:48:03,529 --> 00:48:08,269
click the database successful there you

924
00:48:06,049 --> 00:48:10,699
put your key and you make sure that it

925
00:48:08,269 --> 00:48:14,178
can be decrypted because if we can't

926
00:48:10,699 --> 00:48:16,479
decrypt it on our web it means that you

927
00:48:14,179 --> 00:48:19,789
will be able to decrypt it like anywhere

928
00:48:16,479 --> 00:48:22,578
it's fine it's fine when it's like one

929
00:48:19,789 --> 00:48:26,799
blob of data but as I mentioned

930
00:48:22,579 --> 00:48:29,630
previously users want to build a real

931
00:48:26,799 --> 00:48:32,209
like you know secure session a real

932
00:48:29,630 --> 00:48:34,910
communication between separate several

933
00:48:32,209 --> 00:48:36,709
devices and imagine you have iOS

934
00:48:34,910 --> 00:48:38,328
application Android application and you

935
00:48:36,709 --> 00:48:41,899
want to build this secure communication

936
00:48:38,329 --> 00:48:43,369
right you need to have both applications

937
00:48:41,900 --> 00:48:45,829
already you need

938
00:48:43,369 --> 00:48:49,369
- great integrate Tammis in both of them

939
00:48:45,829 --> 00:48:53,089
and then you need to check if it's

940
00:48:49,369 --> 00:48:55,579
working and you can have bugs on every

941
00:48:53,089 --> 00:48:58,819
step so to eliminate this problem we

942
00:48:55,579 --> 00:49:02,240
made interactive simulator and point

943
00:48:58,819 --> 00:49:07,490
that allows to connect and check the

944
00:49:02,240 --> 00:49:12,078
session as a message connection the

945
00:49:07,490 --> 00:49:14,660
users are still complaining user still

946
00:49:12,079 --> 00:49:17,480
complaining user still and sorry asking

947
00:49:14,660 --> 00:49:19,069
questions like hey but if I do these if

948
00:49:17,480 --> 00:49:22,430
I do these what should I do

949
00:49:19,069 --> 00:49:25,249
we do our best we really do our best

950
00:49:22,430 --> 00:49:27,558
trying to explain not only how Amos

951
00:49:25,249 --> 00:49:29,868
works but also what are the possible

952
00:49:27,559 --> 00:49:32,480
attacks for this kind of crypto systems

953
00:49:29,869 --> 00:49:34,309
how to make sure like what you need to

954
00:49:32,480 --> 00:49:36,799
do with threads like how to make your

955
00:49:34,309 --> 00:49:40,880
application threads thread safe what to

956
00:49:36,799 --> 00:49:44,420
do how to handle memory then of course

957
00:49:40,880 --> 00:49:46,819
we try to you know to collect all

958
00:49:44,420 --> 00:49:49,450
projects that use temas and to say yes

959
00:49:46,819 --> 00:49:51,980
your great projects because you handle

960
00:49:49,450 --> 00:49:54,439
security and you like protect your data

961
00:49:51,980 --> 00:49:56,749
you're really good and to mention all

962
00:49:54,440 --> 00:50:00,470
all them just because people want to be

963
00:49:56,749 --> 00:50:03,828
mentioned the next problem is as the

964
00:50:00,470 --> 00:50:05,689
encryption regulator and regulations for

965
00:50:03,829 --> 00:50:07,759
example if you use cryptography and you

966
00:50:05,690 --> 00:50:12,859
want to submit application to the App

967
00:50:07,759 --> 00:50:14,869
Store you need to feel you ask export

968
00:50:12,859 --> 00:50:17,359
like regulation report

969
00:50:14,869 --> 00:50:20,239
what kind of crypto you use and of

970
00:50:17,359 --> 00:50:22,660
course as as vendors as providers of the

971
00:50:20,239 --> 00:50:24,769
cryptographic library we kind of

972
00:50:22,660 --> 00:50:26,749
responsible for people who that use it

973
00:50:24,769 --> 00:50:30,220
and need to sort to submit this report

974
00:50:26,749 --> 00:50:33,488
but as Lee is not legal entity we can't

975
00:50:30,220 --> 00:50:35,988
provide them legal advice but again we

976
00:50:33,489 --> 00:50:38,210
created a blog post and we described all

977
00:50:35,989 --> 00:50:41,049
the steps they need to do and basically

978
00:50:38,210 --> 00:50:44,660
this is a tricky question if your vendor

979
00:50:41,049 --> 00:50:48,920
are you responsible on how people use

980
00:50:44,660 --> 00:50:57,399
your tool or you are not I think it

981
00:50:48,920 --> 00:50:57,400
depends three last slides just to sum up

982
00:50:58,350 --> 00:51:09,750
Tammis is used in applications yeah in

983
00:51:06,730 --> 00:51:13,420
applications that needs to handle

984
00:51:09,750 --> 00:51:16,690
multi-platform so it's it's fine to use

985
00:51:13,420 --> 00:51:19,060
like some single cryptographic library

986
00:51:16,690 --> 00:51:21,010
if you have single application on single

987
00:51:19,060 --> 00:51:23,049
language but then you have distributor

988
00:51:21,010 --> 00:51:24,430
tab you probably want to have one

989
00:51:23,050 --> 00:51:27,060
libraries it works in the same way

990
00:51:24,430 --> 00:51:30,879
across all your infrastructure and

991
00:51:27,060 --> 00:51:33,759
having these nice cryptographic API this

992
00:51:30,880 --> 00:51:37,470
high level terrific API actually allows

993
00:51:33,760 --> 00:51:40,270
developers not to waste their time on

994
00:51:37,470 --> 00:51:43,419
making or preventing mistakes in

995
00:51:40,270 --> 00:51:46,240
cryptography but rather to build the

996
00:51:43,420 --> 00:51:49,060
real you know features in the apps and

997
00:51:46,240 --> 00:51:51,569
one of these large cases recent large

998
00:51:49,060 --> 00:51:54,310
cases is a bear applicational

999
00:51:51,570 --> 00:51:56,530
note-taking app they decided to

1000
00:51:54,310 --> 00:51:59,560
implement and to encryption for user

1001
00:51:56,530 --> 00:52:01,990
note and we helped them to make it and

1002
00:51:59,560 --> 00:52:05,529
it totally based on temas and the

1003
00:52:01,990 --> 00:52:07,450
previous slides you can see that amount

1004
00:52:05,530 --> 00:52:12,460
of encryption like amount of lines

1005
00:52:07,450 --> 00:52:14,770
handled encryption it's much less than

1006
00:52:12,460 --> 00:52:16,270
amount of lines at handle of the scheme

1007
00:52:14,770 --> 00:52:20,770
management all these protocols

1008
00:52:16,270 --> 00:52:24,250
just because have a nice library let's

1009
00:52:20,770 --> 00:52:29,500
give this have a nice library means you

1010
00:52:24,250 --> 00:52:34,240
can spend your time kitten you can spend

1011
00:52:29,500 --> 00:52:36,490
your time doing like a real job instance

1012
00:52:34,240 --> 00:52:43,060
spending your time trying to eliminate

1013
00:52:36,490 --> 00:52:48,040
cryptographic bugs and like as a final

1014
00:52:43,060 --> 00:52:52,230
sort of my talk never ever agree to

1015
00:52:48,040 --> 00:52:55,000
support to the graphic lab room trust me

1016
00:52:52,230 --> 00:52:59,680
this might be fun but only like for a

1017
00:52:55,000 --> 00:53:01,810
year not the whole journey is not that

1018
00:52:59,680 --> 00:53:03,430
fun and they really really respect those

1019
00:53:01,810 --> 00:53:06,130
people that do support cryptographic

1020
00:53:03,430 --> 00:53:07,990
libraries they are doing a great job

1021
00:53:06,130 --> 00:53:11,160
ok thank you

1022
00:53:07,990 --> 00:53:11,160
[Applause]

1023
00:53:15,320 --> 00:53:21,860
I ran out of my time so for Q&A please

1024
00:53:19,550 --> 00:53:24,470
find me here and you can find me

1025
00:53:21,860 --> 00:53:27,710
tomorrow because tomorrow I will have a

1026
00:53:24,470 --> 00:53:29,509
workshop with jean-philippe and the

1027
00:53:27,710 --> 00:53:33,440
middle of the day cryptographic workshop

1028
00:53:29,510 --> 00:53:36,080
more cryptography less kittens always

1029
00:53:33,440 --> 00:53:39,210
say thank you imagine us dizzy thank you

1030
00:53:36,080 --> 00:53:39,210
[Applause]

