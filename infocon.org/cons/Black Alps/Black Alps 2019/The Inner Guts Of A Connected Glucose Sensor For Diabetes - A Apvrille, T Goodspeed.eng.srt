1
00:00:02,489 --> 00:00:08,710
alright hey everybody so today we're

2
00:00:06,580 --> 00:00:13,719
going to be talking about these little

3
00:00:08,710 --> 00:00:18,369
gizmos there's a disease called diabetes

4
00:00:13,719 --> 00:00:21,369
and it sucks and a part of it is the the

5
00:00:18,369 --> 00:00:23,769
the patients need to monitor their blood

6
00:00:21,369 --> 00:00:28,150
sugar levels in order to know how much

7
00:00:23,769 --> 00:00:32,820
insulin they need so this sensor is a

8
00:00:28,150 --> 00:00:35,500
replacement for the blood test strips

9
00:00:32,820 --> 00:00:38,110
and the way that it works is that it has

10
00:00:35,500 --> 00:00:40,930
a tiny black wire that you inject into

11
00:00:38,110 --> 00:00:44,769
your arm and then this sits on your arm

12
00:00:40,930 --> 00:00:46,750
for two weeks and your smartphone or a

13
00:00:44,770 --> 00:00:49,449
dedicated reader can then measure your

14
00:00:46,750 --> 00:00:54,670
blood glucose without having to prick a

15
00:00:49,449 --> 00:00:57,070
finger or actually bleed so we decided

16
00:00:54,670 --> 00:00:58,350
to take these apart and understand how

17
00:00:57,070 --> 00:01:01,690
they worked

18
00:00:58,350 --> 00:01:02,800
both coming from the top down by reverse

19
00:01:01,690 --> 00:01:04,480
engineering the cellular phone

20
00:01:02,800 --> 00:01:07,240
applications that communicate with the

21
00:01:04,480 --> 00:01:09,700
device and also from the bottom up by

22
00:01:07,240 --> 00:01:11,890
reverse engineering the hardware dumping

23
00:01:09,700 --> 00:01:14,200
the firmware reverse engineering that

24
00:01:11,890 --> 00:01:15,700
and getting remote code execution so

25
00:01:14,200 --> 00:01:20,439
that we're able to change the firmware

26
00:01:15,700 --> 00:01:21,790
that runs inside of the tag many reasons

27
00:01:20,439 --> 00:01:25,779
why you might want to do this chief

28
00:01:21,790 --> 00:01:27,520
among them is extending the lifetime of

29
00:01:25,780 --> 00:01:30,009
the tags so that you can use it for more

30
00:01:27,520 --> 00:01:34,329
than the 14 days for which it's

31
00:01:30,009 --> 00:01:55,030
medically approved and I hope you enjoy

32
00:01:34,329 --> 00:01:57,130
the tricks we come up with yeah so I do

33
00:01:55,030 --> 00:01:59,920
embedded systems engineering and reverse

34
00:01:57,130 --> 00:02:03,699
engineering and I Drive Studebakers

35
00:01:59,920 --> 00:02:05,680
which are the greatest American company

36
00:02:03,700 --> 00:02:08,350
in history and the only one in all of

37
00:02:05,680 --> 00:02:11,350
history from now or the far future to

38
00:02:08,350 --> 00:02:13,329
die in honest death they stopped

39
00:02:11,350 --> 00:02:14,500
manufacturing them in the 1960s but

40
00:02:13,330 --> 00:02:16,420
they're beautiful cars

41
00:02:14,500 --> 00:02:25,080
and I suggest that you buy one if

42
00:02:16,420 --> 00:02:26,560
they're legal in your country oh girl

43
00:02:25,080 --> 00:02:29,590
are you done

44
00:02:26,560 --> 00:02:33,220
yep that one okay so yeah this was um

45
00:02:29,590 --> 00:02:35,470
this is um a slide to remind you how how

46
00:02:33,220 --> 00:02:38,500
it is working so these things actually

47
00:02:35,470 --> 00:02:40,720
have a very ethan needle in the middle

48
00:02:38,500 --> 00:02:45,250
of its you can come afterwards and have

49
00:02:40,720 --> 00:02:48,280
a look at them so actually if it's is

50
00:02:45,250 --> 00:02:50,500
not measuring glucose in the blood which

51
00:02:48,280 --> 00:02:53,310
is the most accurate measure but it is

52
00:02:50,500 --> 00:02:56,680
measuring it in an institutional tissue

53
00:02:53,310 --> 00:03:00,130
so also you it hurts a little bit less

54
00:02:56,680 --> 00:03:02,170
you insert it that way both of us we

55
00:03:00,130 --> 00:03:04,769
don't have diabetes I nevertheless such

56
00:03:02,170 --> 00:03:07,510
rides on me so this is a picture of me

57
00:03:04,770 --> 00:03:13,150
with one of these things on just to try

58
00:03:07,510 --> 00:03:15,340
I was too scared yeah so actually

59
00:03:13,150 --> 00:03:18,160
putting it on is okay removing it is

60
00:03:15,340 --> 00:03:22,570
extremely hard because there's a really

61
00:03:18,160 --> 00:03:24,040
very hard glue there to tune so you have

62
00:03:22,570 --> 00:03:28,120
it to stick on you for 14 days

63
00:03:24,040 --> 00:03:30,880
um the thing we haven't mentioned there

64
00:03:28,120 --> 00:03:34,360
is that well apparently the stats say

65
00:03:30,880 --> 00:03:37,510
that's diabetes effects up to 9% of the

66
00:03:34,360 --> 00:03:39,730
population world well so I think we can

67
00:03:37,510 --> 00:03:41,109
reasonably say that some of you in this

68
00:03:39,730 --> 00:03:44,590
room do have diabetes

69
00:03:41,110 --> 00:03:51,940
some of you have maybe used this kind of

70
00:03:44,590 --> 00:03:54,250
stuff here so at first it comes with

71
00:03:51,940 --> 00:03:56,950
this okay assembled in two different

72
00:03:54,250 --> 00:04:00,220
parts you've got well this one has been

73
00:03:56,950 --> 00:04:02,440
broken the FIR opens you've gone on once

74
00:04:00,220 --> 00:04:05,980
one sides you've got basically the

75
00:04:02,440 --> 00:04:08,440
sensor itself and the other part is the

76
00:04:05,980 --> 00:04:10,929
electronics part it is communicating

77
00:04:08,440 --> 00:04:13,359
through NFC so this is where you have

78
00:04:10,930 --> 00:04:16,720
the NFC PCB and in there

79
00:04:13,360 --> 00:04:20,919
so you assemble that basically and then

80
00:04:16,720 --> 00:04:24,310
you put it on to yourself and then you

81
00:04:20,918 --> 00:04:26,140
have another step to do which is here

82
00:04:24,310 --> 00:04:28,360
right

83
00:04:26,140 --> 00:04:30,759
you've got the specific

84
00:04:28,360 --> 00:04:33,729
application on your smartphone or you

85
00:04:30,759 --> 00:04:37,599
can use a dedicated reader for for this

86
00:04:33,729 --> 00:04:39,729
and you've got you activated okay so

87
00:04:37,599 --> 00:04:43,960
this is the period where actually the

88
00:04:39,729 --> 00:04:47,139
the sensor gets calibrated it needs to

89
00:04:43,960 --> 00:04:50,020
pick up your body temperature to get

90
00:04:47,139 --> 00:04:51,969
accurate measures for your glucose level

91
00:04:50,020 --> 00:04:54,669
and so this takes a little bit of time

92
00:04:51,969 --> 00:04:57,639
and after sixty minutes

93
00:04:54,669 --> 00:05:00,818
it is normally accurate and you can use

94
00:04:57,639 --> 00:05:04,360
it and see what are your current level

95
00:05:00,819 --> 00:05:08,319
what's your current level and after 14

96
00:05:04,360 --> 00:05:10,330
days well you've got to remove it it

97
00:05:08,319 --> 00:05:14,560
expires and you've got to go and buy

98
00:05:10,330 --> 00:05:18,000
another one and the limits 14 days it

99
00:05:14,560 --> 00:05:22,090
depends on the country in Europe and

100
00:05:18,000 --> 00:05:24,879
Switzerland I believe it is 14 days in

101
00:05:22,090 --> 00:05:26,830
the US it used to be 10 days and well I

102
00:05:24,879 --> 00:05:31,990
think that in other countries there are

103
00:05:26,830 --> 00:05:33,400
different limits right so what they

104
00:05:31,990 --> 00:05:35,860
would and didn't have we done with us

105
00:05:33,400 --> 00:05:38,289
well one of course the first thing we

106
00:05:35,860 --> 00:05:40,419
did then is to try and open it

107
00:05:38,289 --> 00:05:42,490
so actually you are not the first ones

108
00:05:40,419 --> 00:05:45,250
do you you do this do you open it there

109
00:05:42,490 --> 00:05:47,440
were other videos there on YouTube with

110
00:05:45,250 --> 00:05:50,770
people trying to open this up and see

111
00:05:47,440 --> 00:05:53,830
what is inside they found it pretty

112
00:05:50,770 --> 00:05:59,080
difficult to open it without hurting

113
00:05:53,830 --> 00:06:01,628
themselves the trick there is to to

114
00:05:59,080 --> 00:06:04,539
unclip this parts there which is the

115
00:06:01,629 --> 00:06:08,860
enzyme sensor part once you unclip this

116
00:06:04,539 --> 00:06:10,870
then it pops up open more easily then

117
00:06:08,860 --> 00:06:14,259
you just put a blade in between here and

118
00:06:10,870 --> 00:06:18,750
you kind of open it that way and I

119
00:06:14,259 --> 00:06:18,750
managed to do it so it's easy right and

120
00:06:20,520 --> 00:06:28,870
this is so zoom on the sensor the enzyme

121
00:06:25,629 --> 00:06:32,080
sensor itself so here you've got the

122
00:06:28,870 --> 00:06:36,190
needle as I said it is very thin less

123
00:06:32,080 --> 00:06:39,969
than a millimeter it is covered with a

124
00:06:36,190 --> 00:06:42,200
semi permeable membrane on which there

125
00:06:39,969 --> 00:06:45,080
is glucose oxidase

126
00:06:42,200 --> 00:06:47,960
GOx and this reacts with the glucose in

127
00:06:45,080 --> 00:06:50,479
the body and the reaction creates an

128
00:06:47,960 --> 00:06:54,969
electrical signal which is then sent of

129
00:06:50,480 --> 00:07:00,290
course across those three contacts there

130
00:06:54,970 --> 00:07:03,470
and thank us to you so as you go beneath

131
00:07:00,290 --> 00:07:07,940
the enzyme sensor you have the the

132
00:07:03,470 --> 00:07:15,460
circuit board of the device a few things

133
00:07:07,940 --> 00:07:15,460
to note is the laser pointer so up here

134
00:07:15,730 --> 00:07:23,930
nope that's right so here in the top

135
00:07:20,750 --> 00:07:32,710
left you see Texas Instruments chip this

136
00:07:23,930 --> 00:07:36,290
is the RF for 30 tal 1 5 2 H if you

137
00:07:32,710 --> 00:07:38,289
search for this part number you'll find

138
00:07:36,290 --> 00:07:40,640
that it's not a publicly available chip

139
00:07:38,290 --> 00:07:45,220
but that there is a publicly available

140
00:07:40,640 --> 00:07:47,780
chip called the RF 430 FR l 1 v 2 h

141
00:07:45,220 --> 00:07:49,070
which is very similar they're not

142
00:07:47,780 --> 00:07:51,380
identical and we'll get to the

143
00:07:49,070 --> 00:07:54,110
differences between them in a bit you'll

144
00:07:51,380 --> 00:07:57,950
also see that there are test points next

145
00:07:54,110 --> 00:08:01,400
to the chip for JTAG these test points

146
00:07:57,950 --> 00:08:05,630
are used in the factory to program the

147
00:08:01,400 --> 00:08:07,340
chip this works cool so these test

148
00:08:05,630 --> 00:08:12,320
points here are used to program the chip

149
00:08:07,340 --> 00:08:15,049
in the factory this could have been a

150
00:08:12,320 --> 00:08:17,599
good way to dump the code out it turned

151
00:08:15,050 --> 00:08:18,560
out not to work for us and we'll we'll

152
00:08:17,600 --> 00:08:20,840
get back to that in a bit

153
00:08:18,560 --> 00:08:24,770
the other thing note is that there's a

154
00:08:20,840 --> 00:08:27,080
ring around this circuit board of a wire

155
00:08:24,770 --> 00:08:29,570
that crosses three times this is the

156
00:08:27,080 --> 00:08:33,289
near-field communication antenna that

157
00:08:29,570 --> 00:08:35,750
provides both power and signal to the

158
00:08:33,289 --> 00:08:37,789
chip and then even though it runs

159
00:08:35,750 --> 00:08:39,349
without the battery there's a small

160
00:08:37,789 --> 00:08:41,959
battery here in order to make the

161
00:08:39,349 --> 00:08:45,020
readings more reliable like anything in

162
00:08:41,960 --> 00:08:46,790
the medical industry it would be nice if

163
00:08:45,020 --> 00:08:50,870
the device could run without a battery

164
00:08:46,790 --> 00:08:53,480
and it likely works rather well without

165
00:08:50,870 --> 00:08:55,640
the battery which is optional but they

166
00:08:53,480 --> 00:08:56,240
ship a battery anyways in order to make

167
00:08:55,640 --> 00:08:59,800
sure that

168
00:08:56,240 --> 00:08:59,800
the readings are as reliable as possible

169
00:08:59,980 --> 00:09:08,179
now the are f430 FRL chip the one that

170
00:09:05,449 --> 00:09:10,099
is publicly documented data sheets are

171
00:09:08,179 --> 00:09:11,149
available for it example code is

172
00:09:10,100 --> 00:09:14,420
available for it

173
00:09:11,149 --> 00:09:16,279
you can buy development kits for it all

174
00:09:14,420 --> 00:09:17,689
of these things are available it's just

175
00:09:16,279 --> 00:09:20,660
a slightly different chip than what

176
00:09:17,689 --> 00:09:25,129
ships in the commercial medical device

177
00:09:20,660 --> 00:09:27,110
that were reverse engineering the nifty

178
00:09:25,129 --> 00:09:31,449
thing about this chip is that it

179
00:09:27,110 --> 00:09:34,459
implements ISO fifteen six nine three

180
00:09:31,449 --> 00:09:37,819
which is the most modern type of

181
00:09:34,459 --> 00:09:39,529
near-field communications tag not all

182
00:09:37,819 --> 00:09:42,709
cellular phones can communicate with

183
00:09:39,529 --> 00:09:46,160
this protocol but very many can if you

184
00:09:42,709 --> 00:09:48,378
have a modern iPhone or Google pixel

185
00:09:46,160 --> 00:09:51,170
they certainly support it the other

186
00:09:48,379 --> 00:09:55,040
nifty thing about this of particular

187
00:09:51,170 --> 00:09:58,339
interest for those were making NFC tags

188
00:09:55,040 --> 00:10:02,929
is that this chip uses ferroelectric Ram

189
00:09:58,339 --> 00:10:07,519
you called Ephraim Ephraim is sort of

190
00:10:02,929 --> 00:10:10,610
like core memory but modern it takes

191
00:10:07,519 --> 00:10:14,600
very little power to read or write

192
00:10:10,610 --> 00:10:18,829
efrem it is very fast almost as fast as

193
00:10:14,600 --> 00:10:22,369
SRAM by comparison flash memory takes a

194
00:10:18,829 --> 00:10:25,279
ton of power to write and writing

195
00:10:22,369 --> 00:10:27,410
requires erasing an entire page and that

196
00:10:25,279 --> 00:10:30,559
much power can't come over the

197
00:10:27,410 --> 00:10:34,819
near-field communication link by using

198
00:10:30,559 --> 00:10:37,509
FM you have non-volatile memory that is

199
00:10:34,819 --> 00:10:40,219
not erased when power goes away and

200
00:10:37,509 --> 00:10:41,569
because it uses so little power you can

201
00:10:40,220 --> 00:10:46,999
often run these devices without a

202
00:10:41,569 --> 00:10:51,199
battery now the nice thing about having

203
00:10:46,999 --> 00:10:53,240
a publicly available chip that is

204
00:10:51,199 --> 00:10:56,089
related to the private chip that our

205
00:10:53,240 --> 00:10:58,339
device uses is that the pin out is

206
00:10:56,089 --> 00:11:01,369
documented in the public chip and

207
00:10:58,339 --> 00:11:04,429
happens to match almost exactly the

208
00:11:01,369 --> 00:11:07,429
commercial chip so all of these pins

209
00:11:04,429 --> 00:11:09,949
that we see around the sides are

210
00:11:07,429 --> 00:11:12,350
accurate and this allows

211
00:11:09,950 --> 00:11:13,910
to know what the different pins do on

212
00:11:12,350 --> 00:11:17,090
the circuit board without having to

213
00:11:13,910 --> 00:11:18,949
guess you can see here that the antenna

214
00:11:17,090 --> 00:11:21,380
connections come out through these two

215
00:11:18,950 --> 00:11:24,140
tuning capacitors there's an analog to

216
00:11:21,380 --> 00:11:26,240
digital converter a temperature sensor a

217
00:11:24,140 --> 00:11:29,810
test pin and then another analog to

218
00:11:26,240 --> 00:11:33,320
digital converter the individual signal

219
00:11:29,810 --> 00:11:35,810
names of the JTAG port are documented so

220
00:11:33,320 --> 00:11:37,430
we now know not only that those test

221
00:11:35,810 --> 00:11:39,349
pads are probably used for programming

222
00:11:37,430 --> 00:11:41,150
but we know that they certainly are used

223
00:11:39,350 --> 00:11:47,870
for programming and we know exactly what

224
00:11:41,150 --> 00:11:49,280
they do so we wanted the firmware from

225
00:11:47,870 --> 00:11:51,320
this we wanted to be able to read the

226
00:11:49,280 --> 00:11:53,660
code that is in our medical sensor in

227
00:11:51,320 --> 00:11:56,600
order to understand how its software

228
00:11:53,660 --> 00:11:59,030
works so I bought this board from Texas

229
00:11:56,600 --> 00:12:02,990
Instruments which is a development kit

230
00:11:59,030 --> 00:12:06,170
for the publicly available chip the

231
00:12:02,990 --> 00:12:09,290
circuitry on this board is designed to

232
00:12:06,170 --> 00:12:12,469
convert the voltage so that the black

233
00:12:09,290 --> 00:12:15,170
device in the background which is the

234
00:12:12,470 --> 00:12:17,510
Texas Instruments flash emulation tool

235
00:12:15,170 --> 00:12:21,199
for the msp430 it allows that to connect

236
00:12:17,510 --> 00:12:22,790
to our chip and debug it and when I

237
00:12:21,200 --> 00:12:25,730
connected this to the commercially

238
00:12:22,790 --> 00:12:28,069
available chip it wasn't much trouble to

239
00:12:25,730 --> 00:12:30,350
get a working debugger I had gdb running

240
00:12:28,070 --> 00:12:33,830
I could read memory I could write memory

241
00:12:30,350 --> 00:12:38,150
I could set breakpoints when I tried the

242
00:12:33,830 --> 00:12:41,480
same thing on our commercial chip it

243
00:12:38,150 --> 00:12:43,670
didn't work and we're still not quite

244
00:12:41,480 --> 00:12:47,660
sure why so we had to find different

245
00:12:43,670 --> 00:12:51,370
tricks to dump the firmware I got tired

246
00:12:47,660 --> 00:12:54,770
of using t is bored

247
00:12:51,370 --> 00:12:57,290
mostly because certain pins like TS t 1

248
00:12:54,770 --> 00:12:59,840
and t st 2 were not exposed on that

249
00:12:57,290 --> 00:13:03,230
board so i designed my own which i call

250
00:12:59,840 --> 00:13:06,050
the good tag the hardware and the

251
00:13:03,230 --> 00:13:08,750
firmware for this went public on github

252
00:13:06,050 --> 00:13:10,640
this morning so you can now download

253
00:13:08,750 --> 00:13:13,840
this design you can manufacture your own

254
00:13:10,640 --> 00:13:17,569
you can read the source code to it I

255
00:13:13,840 --> 00:13:19,520
have a slightly modernized revision with

256
00:13:17,570 --> 00:13:21,500
me and this is pretty much the same as

257
00:13:19,520 --> 00:13:23,240
the TI board except that it's got a

258
00:13:21,500 --> 00:13:24,920
prototyping area on the

259
00:13:23,240 --> 00:13:28,430
right and it's thin enough to fit in a

260
00:13:24,920 --> 00:13:31,250
wallet the other advantage of having

261
00:13:28,430 --> 00:13:33,859
these boards is that we can begin to

262
00:13:31,250 --> 00:13:35,360
write emulators so as we're trying to

263
00:13:33,860 --> 00:13:37,760
understand how the commercial device

264
00:13:35,360 --> 00:13:40,190
works we can write firmware that

265
00:13:37,760 --> 00:13:42,890
pretends to be the commercial device in

266
00:13:40,190 --> 00:13:46,160
order to log responses to different

267
00:13:42,890 --> 00:13:48,260
commands or in order to ensure that we

268
00:13:46,160 --> 00:13:51,290
understand the the protocol of the

269
00:13:48,260 --> 00:13:52,910
device by copying it well enough to

270
00:13:51,290 --> 00:13:54,770
confuse the real reader

271
00:13:52,910 --> 00:14:02,439
we will then know that we understand it

272
00:13:54,770 --> 00:14:02,439
ourselves is this one you yeah thanks oh

273
00:14:04,630 --> 00:14:11,779
so we said that we have those senses

274
00:14:08,810 --> 00:14:14,300
which are readable using NFC so

275
00:14:11,779 --> 00:14:18,800
basically you can use any NFC reader

276
00:14:14,300 --> 00:14:22,790
that you have that supports ISO 15 693

277
00:14:18,800 --> 00:14:26,120
and it will work the problem may be for

278
00:14:22,790 --> 00:14:28,939
Linux at least Linux people is that many

279
00:14:26,120 --> 00:14:33,500
of the readers that we find cheap there

280
00:14:28,940 --> 00:14:38,060
out there such as an XPS PN 532 they do

281
00:14:33,500 --> 00:14:39,709
not support this specific NFC right so

282
00:14:38,060 --> 00:14:42,500
well you've got to work out to find one

283
00:14:39,709 --> 00:14:46,219
you can use Hydra bus this is Hydra bus

284
00:14:42,500 --> 00:14:48,800
here with the extension for NFC this one

285
00:14:46,220 --> 00:14:51,800
supports the right one and otherwise you

286
00:14:48,800 --> 00:14:56,719
can also use proxmark so this is what I

287
00:14:51,800 --> 00:15:00,469
have got here this one proxmark to to

288
00:14:56,720 --> 00:15:03,260
read it as well the other thing which is

289
00:15:00,470 --> 00:15:05,959
you can notice here is a sponge so

290
00:15:03,260 --> 00:15:10,279
basically the sponge is replacing my arm

291
00:15:05,959 --> 00:15:12,439
okay at some points I got tired with

292
00:15:10,279 --> 00:15:15,020
having a patch on myself especially as

293
00:15:12,440 --> 00:15:18,380
it was totally useless in my case so I

294
00:15:15,020 --> 00:15:21,110
decided to find a replacement so you get

295
00:15:18,380 --> 00:15:23,720
a sponge you pour hot water with sugar

296
00:15:21,110 --> 00:15:26,450
on it and you get a glucose reading okay

297
00:15:23,720 --> 00:15:31,970
and my colleagues find me very weird but

298
00:15:26,450 --> 00:15:36,650
they are used to that so that's okay it

299
00:15:31,970 --> 00:15:39,350
supports the device plenty of

300
00:15:36,650 --> 00:15:41,090
because of a sorry standard NFC commands

301
00:15:39,350 --> 00:15:43,670
you might know some of these get

302
00:15:41,090 --> 00:15:45,110
inventory read single block right single

303
00:15:43,670 --> 00:15:48,319
block read multiple blocks things like

304
00:15:45,110 --> 00:15:51,400
that for those commands oops sorry

305
00:15:48,320 --> 00:15:54,200
the first bytes there is four flags

306
00:15:51,400 --> 00:15:56,990
basically and the second one is the

307
00:15:54,200 --> 00:16:00,230
command identifier and then depending on

308
00:15:56,990 --> 00:16:06,470
the commands well you have here various

309
00:16:00,230 --> 00:16:08,990
arguments so we dumps them a few blocks

310
00:16:06,470 --> 00:16:12,140
which are available through NFC that way

311
00:16:08,990 --> 00:16:14,750
and that is where actually I'm going to

312
00:16:12,140 --> 00:16:17,689
shorten very much for research this took

313
00:16:14,750 --> 00:16:20,630
us lots of time we we did lots of tests

314
00:16:17,690 --> 00:16:22,850
okay what is the reading of the sensor

315
00:16:20,630 --> 00:16:25,189
when it hasn't started what happens when

316
00:16:22,850 --> 00:16:27,920
it is being activated what it happens

317
00:16:25,190 --> 00:16:31,010
once you are reading this or that

318
00:16:27,920 --> 00:16:33,709
measures what happens once this has

319
00:16:31,010 --> 00:16:36,080
expired we also use several different

320
00:16:33,710 --> 00:16:37,910
applications this one is the official

321
00:16:36,080 --> 00:16:41,710
application but actually there are many

322
00:16:37,910 --> 00:16:44,000
other applications out there open source

323
00:16:41,710 --> 00:16:45,700
so we could have a look that's their

324
00:16:44,000 --> 00:16:48,560
source code and see how they were

325
00:16:45,700 --> 00:16:51,050
discussing with the sensor so it was

326
00:16:48,560 --> 00:16:55,699
quite quite useful there and try to work

327
00:16:51,050 --> 00:16:59,839
out how all of this is working and this

328
00:16:55,700 --> 00:17:04,340
is how we managed to understand the

329
00:16:59,840 --> 00:17:06,860
memory layouts of the device so

330
00:17:04,339 --> 00:17:11,329
basically what happens is that every

331
00:17:06,859 --> 00:17:14,540
minute the device gets a glucose measure

332
00:17:11,329 --> 00:17:17,329
right and this is a six bytes six like

333
00:17:14,540 --> 00:17:21,349
that six bytes for records which ends up

334
00:17:17,329 --> 00:17:23,240
in this table here it piles up and as

335
00:17:21,349 --> 00:17:25,310
you know of course on those chips well

336
00:17:23,240 --> 00:17:28,220
you don't have infinite space right so

337
00:17:25,310 --> 00:17:31,100
at some points this table is going to be

338
00:17:28,220 --> 00:17:34,040
full and this is where you start writing

339
00:17:31,100 --> 00:17:36,050
the history record and then same thing

340
00:17:34,040 --> 00:17:38,240
once you've written your history record

341
00:17:36,050 --> 00:17:40,100
while you can overwrite to trend records

342
00:17:38,240 --> 00:17:42,860
and then in the end write a new history

343
00:17:40,100 --> 00:17:45,530
record and when you've also filled that

344
00:17:42,860 --> 00:17:48,379
history records well this time it's

345
00:17:45,530 --> 00:17:50,270
completely full you will start over

346
00:17:48,380 --> 00:17:53,120
writing your

347
00:17:50,270 --> 00:17:56,299
your different records so at each time

348
00:17:53,120 --> 00:17:58,939
you have to store an index that tells

349
00:17:56,299 --> 00:18:00,950
you where you are currently working in

350
00:17:58,940 --> 00:18:05,000
that table so you've got a trend index

351
00:18:00,950 --> 00:18:08,000
and a history index after that you also

352
00:18:05,000 --> 00:18:10,460
have a small personal portion of the

353
00:18:08,000 --> 00:18:12,710
memory which is during the where time

354
00:18:10,460 --> 00:18:15,649
how long you have been wearing your your

355
00:18:12,710 --> 00:18:18,049
patch so this where time is stored in

356
00:18:15,649 --> 00:18:20,330
minutes that is two bytes and you have

357
00:18:18,049 --> 00:18:21,860
also a little bit after that the sensor

358
00:18:20,330 --> 00:18:23,870
region as I told you there are

359
00:18:21,860 --> 00:18:27,678
differences depending on the countries

360
00:18:23,870 --> 00:18:29,809
where reduces I haven't said that but

361
00:18:27,679 --> 00:18:32,529
this device I think it's sold in over

362
00:18:29,809 --> 00:18:35,658
forty five countries and they're already

363
00:18:32,529 --> 00:18:41,390
1.5 million units of it sold so it is

364
00:18:35,659 --> 00:18:45,110
really pretty much user worldwide so

365
00:18:41,390 --> 00:18:47,570
this is where I try a live demo with my

366
00:18:45,110 --> 00:18:50,479
proxmark we're human and it's not

367
00:18:47,570 --> 00:18:54,230
working that well so we'll see if that

368
00:18:50,480 --> 00:19:01,279
works so I'm gonna show you how I read

369
00:18:54,230 --> 00:19:04,279
from that so um yeah it's behind the

370
00:19:01,279 --> 00:19:06,320
glass I'll push your less if but it

371
00:19:04,279 --> 00:19:10,820
doesn't matter right and I didn't plug

372
00:19:06,320 --> 00:19:19,490
in the right one I've got to plug in a

373
00:19:10,820 --> 00:19:26,809
high antenna one it looks better there

374
00:19:19,490 --> 00:19:32,360
and yeah I told you it's not working

375
00:19:26,809 --> 00:19:35,149
very well it's a shame that we can't

376
00:19:32,360 --> 00:19:37,490
just buy commercial off-the-shelf NFC

377
00:19:35,149 --> 00:19:39,799
adapter and then run Linux software on

378
00:19:37,490 --> 00:19:42,230
it but it seems that all of the modern

379
00:19:39,799 --> 00:19:45,918
NFC chips are being sold for use in

380
00:19:42,230 --> 00:19:49,390
cellphones and only the most bare

381
00:19:45,919 --> 00:19:52,159
minimal functionality is exposed in the

382
00:19:49,390 --> 00:19:56,270
working example for desktop operating

383
00:19:52,159 --> 00:19:57,830
systems and then also all of the older

384
00:19:56,270 --> 00:19:59,980
chips the ones that are supported by the

385
00:19:57,830 --> 00:20:03,610
publicly available and of C libraries

386
00:19:59,980 --> 00:20:05,860
lack support for NFC type v the eye

387
00:20:03,610 --> 00:20:10,209
fifteen standard that is used by this

388
00:20:05,860 --> 00:20:12,479
ship so it becomes easier to communicate

389
00:20:10,210 --> 00:20:15,340
with these devices by a cellular phone

390
00:20:12,480 --> 00:20:18,840
or by custom hardware than it is by

391
00:20:15,340 --> 00:20:18,840
expecting anything off-the-shelf to work

392
00:20:19,620 --> 00:20:27,309
okay so well most of the time it ends up

393
00:20:25,000 --> 00:20:30,160
for working it's just the reader the

394
00:20:27,309 --> 00:20:32,830
proxmark reader mine is clicking it has

395
00:20:30,160 --> 00:20:34,690
been clicking for the last two days so I

396
00:20:32,830 --> 00:20:44,918
thought it would probably work until

397
00:20:34,690 --> 00:20:46,900
today but it's there it is okay so here

398
00:20:44,919 --> 00:20:49,210
this is just the basic command telling

399
00:20:46,900 --> 00:20:53,730
it to use high frequency and 15 is for

400
00:20:49,210 --> 00:20:56,559
ISO 15 693 and we dump the memory and

401
00:20:53,730 --> 00:20:58,240
here we're so we are reading well not

402
00:20:56,559 --> 00:21:03,340
this one because it's it's got to be

403
00:20:58,240 --> 00:21:05,530
very close to the antenna there now the

404
00:21:03,340 --> 00:21:07,418
the memory that's being dumped here is

405
00:21:05,530 --> 00:21:12,010
the publicly available memory that

406
00:21:07,419 --> 00:21:15,370
contains the glucose records this is not

407
00:21:12,010 --> 00:21:18,250
all the memory of the chip specifically

408
00:21:15,370 --> 00:21:20,469
it's lacking the mask ROM which contains

409
00:21:18,250 --> 00:21:23,530
the permanent software of the chip and

410
00:21:20,470 --> 00:21:25,330
it's lacking the SRAM which contains the

411
00:21:23,530 --> 00:21:31,059
the live variables that that software is

412
00:21:25,330 --> 00:21:34,030
using and then so once we dump

413
00:21:31,059 --> 00:21:36,879
everything that we've got available only

414
00:21:34,030 --> 00:21:40,660
through test parts through NFC we wrote

415
00:21:36,880 --> 00:21:43,150
just well a small script to read and

416
00:21:40,660 --> 00:21:45,100
understand that that the contents of the

417
00:21:43,150 --> 00:21:46,750
memory so here we highlight with

418
00:21:45,100 --> 00:21:50,969
different colors for instance the trend

419
00:21:46,750 --> 00:21:55,660
index the history index in that case

420
00:21:50,970 --> 00:22:00,309
we've got then the trend records history

421
00:21:55,660 --> 00:22:02,620
records here the where time so it's 4400

422
00:22:00,309 --> 00:22:05,740
you've got to turn it the under at the

423
00:22:02,620 --> 00:22:08,649
other side this means approximately 60

424
00:22:05,740 --> 00:22:11,200
well not proximities 68 minutes it has

425
00:22:08,650 --> 00:22:13,000
been worn in this particular case so

426
00:22:11,200 --> 00:22:16,720
that's a little bit over one minute one

427
00:22:13,000 --> 00:22:20,160
hour and the sensor region for this one

428
00:22:16,720 --> 00:22:24,910
was Europe UK we believe this is so

429
00:22:20,160 --> 00:22:28,720
after the region for that one so that's

430
00:22:24,910 --> 00:22:31,600
pretty much how we began or reverse

431
00:22:28,720 --> 00:22:34,510
engineering for that one and then that's

432
00:22:31,600 --> 00:22:37,300
for you all right so I mentioned that

433
00:22:34,510 --> 00:22:40,180
during the demo that this publicly

434
00:22:37,300 --> 00:22:43,480
available region is not all of the

435
00:22:40,180 --> 00:22:46,150
memory of the chip but luckily for us it

436
00:22:43,480 --> 00:22:47,440
it's still a very important part of the

437
00:22:46,150 --> 00:22:50,310
memory of the chip because there's more

438
00:22:47,440 --> 00:22:53,530
than just the glucose readings in here

439
00:22:50,310 --> 00:22:57,429
this layout diagram shows the very end

440
00:22:53,530 --> 00:22:59,620
of memory and the interrupt table at the

441
00:22:57,430 --> 00:23:00,310
bottom that is the far end of the

442
00:22:59,620 --> 00:23:04,560
address space

443
00:23:00,310 --> 00:23:07,480
that's a ffff for the the end of it

444
00:23:04,560 --> 00:23:09,070
so when we first jumped this and we look

445
00:23:07,480 --> 00:23:10,510
at it we see at the very end that

446
00:23:09,070 --> 00:23:13,990
there's an interrupt table this has a

447
00:23:10,510 --> 00:23:17,470
list of addresses where the chip will

448
00:23:13,990 --> 00:23:20,410
jump to when an interrupt is fired this

449
00:23:17,470 --> 00:23:22,750
tells us where the chip goes in order to

450
00:23:20,410 --> 00:23:25,660
accept a new incoming packet where to go

451
00:23:22,750 --> 00:23:28,270
when it's first powered up unfortunately

452
00:23:25,660 --> 00:23:30,760
all of those addresses are inside of the

453
00:23:28,270 --> 00:23:34,840
mask ROM which we don't yet have a copy

454
00:23:30,760 --> 00:23:36,910
of at this point in the research so we

455
00:23:34,840 --> 00:23:38,620
want to get a copy of that mask ROM and

456
00:23:36,910 --> 00:23:42,340
the way to do that is to understand what

457
00:23:38,620 --> 00:23:46,449
commands are available to us so reading

458
00:23:42,340 --> 00:23:50,230
through this region we find that there's

459
00:23:46,450 --> 00:23:52,690
a command table that uses a B a B as a

460
00:23:50,230 --> 00:23:56,320
magic number to mark where it begins and

461
00:23:52,690 --> 00:23:58,630
ends and in the publicly available chip

462
00:23:56,320 --> 00:24:01,179
there is a table with the exact same

463
00:23:58,630 --> 00:24:07,360
format except it uses a different magic

464
00:24:01,180 --> 00:24:10,000
number it's like BC BC so we then know

465
00:24:07,360 --> 00:24:14,770
that the commands table is a list of

466
00:24:10,000 --> 00:24:18,610
addresses and handler commands to add

467
00:24:14,770 --> 00:24:20,950
extra commands to the NFC protocol so

468
00:24:18,610 --> 00:24:22,060
the slide few back that showed the

469
00:24:20,950 --> 00:24:25,110
different commands that this chip

470
00:24:22,060 --> 00:24:27,250
supports by the standard is not the

471
00:24:25,110 --> 00:24:30,050
complete list of commands supported by

472
00:24:27,250 --> 00:24:33,320
the chip instead we have an extra set

473
00:24:30,050 --> 00:24:37,460
of vender proprietary commands they

474
00:24:33,320 --> 00:24:39,320
begin with either a or E and by reading

475
00:24:37,460 --> 00:24:42,080
this image we're able to see that the e

476
00:24:39,320 --> 00:24:46,429
commands have been disabled but that the

477
00:24:42,080 --> 00:24:47,540
a commands are still accessible the

478
00:24:46,430 --> 00:24:49,790
easiest thing to do would be to

479
00:24:47,540 --> 00:24:51,409
overwrite this with our own commands but

480
00:24:49,790 --> 00:24:54,170
we're not able to do that because it's

481
00:24:51,410 --> 00:24:59,110
beech publicly available region of the

482
00:24:54,170 --> 00:25:02,750
chip is write-protected so well we can't

483
00:24:59,110 --> 00:25:05,870
go through and immediately change this

484
00:25:02,750 --> 00:25:09,560
we do have a copy of a few of the

485
00:25:05,870 --> 00:25:11,600
commands including a 3 and a 3 is my

486
00:25:09,560 --> 00:25:13,340
favorite command because it is a vendor

487
00:25:11,600 --> 00:25:16,610
proprietary command that allows me to

488
00:25:13,340 --> 00:25:18,470
read from a raw address if I can call

489
00:25:16,610 --> 00:25:22,969
this command I can dump all of the

490
00:25:18,470 --> 00:25:24,770
memory of the chip and remember that

491
00:25:22,970 --> 00:25:26,780
this chip is a microcontroller there is

492
00:25:24,770 --> 00:25:30,590
a complete computer in here with its own

493
00:25:26,780 --> 00:25:32,629
software and that that's the goal

494
00:25:30,590 --> 00:25:34,669
you know dumping that code and reading

495
00:25:32,630 --> 00:25:37,060
it allows us to understand everything

496
00:25:34,670 --> 00:25:40,100
that that chip does its entire protocol

497
00:25:37,060 --> 00:25:43,460
so we know that the commands begin with

498
00:25:40,100 --> 00:25:45,139
a hmm we start looking at the data

499
00:25:43,460 --> 00:25:47,120
sheets for similar chips and we find

500
00:25:45,140 --> 00:25:49,420
that there are other chips that use

501
00:25:47,120 --> 00:25:52,280
vendor commands that begin with a

502
00:25:49,420 --> 00:25:55,070
unfortunately these commands don't match

503
00:25:52,280 --> 00:26:02,750
what we see in the machine code for the

504
00:25:55,070 --> 00:26:06,879
available command in the FM so knowing

505
00:26:02,750 --> 00:26:06,880
that they're declared in this region

506
00:26:08,170 --> 00:26:13,460
this F Ram toward the end what we're

507
00:26:10,850 --> 00:26:17,449
trying to do is to grab the earlier

508
00:26:13,460 --> 00:26:19,040
Ephrem SRAM and rom regions and then

509
00:26:17,450 --> 00:26:21,500
when we have that much of a dump we can

510
00:26:19,040 --> 00:26:23,659
load it into Ida Pro or into G draw or

511
00:26:21,500 --> 00:26:26,750
adhara 2 and then figure out the

512
00:26:23,660 --> 00:26:28,970
behavior of the complete chip the way

513
00:26:26,750 --> 00:26:31,150
that the the chip works both the

514
00:26:28,970 --> 00:26:34,550
publicly available one and the

515
00:26:31,150 --> 00:26:37,940
commercial medical one is that the ROM

516
00:26:34,550 --> 00:26:39,889
contains a base program that defines

517
00:26:37,940 --> 00:26:43,640
almost all of the behavior of the chip

518
00:26:39,890 --> 00:26:45,680
and then in SRAM there's a

519
00:26:43,640 --> 00:26:48,080
table of function pointers and those

520
00:26:45,680 --> 00:26:54,710
function pointers are changed to allow

521
00:26:48,080 --> 00:26:57,080
patching from the Ephraim so the bulk of

522
00:26:54,710 --> 00:27:00,440
the code is in the ROM and a tiny bit is

523
00:26:57,080 --> 00:27:04,070
in the Ephraim the tiny bit includes the

524
00:27:00,440 --> 00:27:06,350
a3 raw read command which I show here in

525
00:27:04,070 --> 00:27:11,030
deidre the reverse engineering tool that

526
00:27:06,350 --> 00:27:14,000
the NSA published in February on the

527
00:27:11,030 --> 00:27:16,700
left pane I see the disassembly of the

528
00:27:14,000 --> 00:27:19,790
function and then on the right pane I

529
00:27:16,700 --> 00:27:21,860
see the C source code that has been

530
00:27:19,790 --> 00:27:23,930
decompiled from it the nice thing about

531
00:27:21,860 --> 00:27:27,740
Deidre is that it's able to decompile

532
00:27:23,930 --> 00:27:29,750
anything that it can disassemble so that

533
00:27:27,740 --> 00:27:32,840
we can work at a higher level than the

534
00:27:29,750 --> 00:27:36,920
raw assembly language reading this I

535
00:27:32,840 --> 00:27:40,490
could see that the function would check

536
00:27:36,920 --> 00:27:43,220
the the vendor number which is standard

537
00:27:40,490 --> 00:27:45,470
for any command Handler and then I see

538
00:27:43,220 --> 00:27:47,540
that it's calling something in that

539
00:27:45,470 --> 00:27:51,200
function table which turned out to be a

540
00:27:47,540 --> 00:27:52,940
password check and then I I can see from

541
00:27:51,200 --> 00:27:58,190
the rest of the code that it takes a

542
00:27:52,940 --> 00:28:01,130
16-bit address and an 8-bit count of of

543
00:27:58,190 --> 00:28:03,920
words to return back so I know

544
00:28:01,130 --> 00:28:09,530
everything necessary to call this

545
00:28:03,920 --> 00:28:10,700
function except for the password it

546
00:28:09,530 --> 00:28:13,160
turns out that it takes a four byte

547
00:28:10,700 --> 00:28:17,080
password a 2-byte raw address and a one

548
00:28:13,160 --> 00:28:20,090
byte length so how do I get the password

549
00:28:17,080 --> 00:28:22,970
well there's more than one vendor

550
00:28:20,090 --> 00:28:26,090
proprietary command a3 is the only one

551
00:28:22,970 --> 00:28:29,300
that I can read at this point but I can

552
00:28:26,090 --> 00:28:31,639
guess at what the others might be and I

553
00:28:29,300 --> 00:28:34,159
guessed that one of those others would

554
00:28:31,640 --> 00:28:38,180
initialize the sensor this guess

555
00:28:34,160 --> 00:28:42,320
happened to be true so I took the

556
00:28:38,180 --> 00:28:44,570
vendors reading device which you see on

557
00:28:42,320 --> 00:28:48,320
the right and I connected it to the

558
00:28:44,570 --> 00:28:51,379
logic analyzer on the left the the

559
00:28:48,320 --> 00:28:53,419
cables are going to the SPI bus between

560
00:28:51,380 --> 00:28:56,420
the microcontroller in the reader and

561
00:28:53,420 --> 00:28:59,480
the TRF 79-78

562
00:28:56,420 --> 00:29:01,730
that implements NFC this is the

563
00:28:59,480 --> 00:29:05,570
equivalent of tapping like an old

564
00:29:01,730 --> 00:29:07,490
computer between the the main unit and

565
00:29:05,570 --> 00:29:11,090
the modem by listening to the serial

566
00:29:07,490 --> 00:29:13,670
port so this gives me a complete record

567
00:29:11,090 --> 00:29:17,199
of everything that goes on over the NFC

568
00:29:13,670 --> 00:29:19,960
connection and I don't have to mess with

569
00:29:17,200 --> 00:29:23,120
capturing the signal over-the-air I get

570
00:29:19,960 --> 00:29:25,850
absolutely accurate bytes I write a

571
00:29:23,120 --> 00:29:30,919
Python scripts to parse them and then I

572
00:29:25,850 --> 00:29:33,469
get my magic number the password is

573
00:29:30,920 --> 00:29:36,560
presented as the device is initialized

574
00:29:33,470 --> 00:29:40,310
so even though the a3 command the raw

575
00:29:36,560 --> 00:29:44,060
read is never used by the device in the

576
00:29:40,310 --> 00:29:46,429
field I still get that same password as

577
00:29:44,060 --> 00:29:52,360
the a0 command is called to initialize

578
00:29:46,430 --> 00:29:57,650
the sensor the password is not dead beef

579
00:29:52,360 --> 00:29:58,969
but you can pretend so now we know the

580
00:29:57,650 --> 00:30:00,830
custom commands we know how to

581
00:29:58,970 --> 00:30:03,860
initialize the sensor we know how to get

582
00:30:00,830 --> 00:30:06,500
its serial number the the info command

583
00:30:03,860 --> 00:30:08,570
doesn't require the password it was the

584
00:30:06,500 --> 00:30:10,730
only one that we were able to call

585
00:30:08,570 --> 00:30:14,000
before figuring this out I'm able to

586
00:30:10,730 --> 00:30:15,820
lock the device perform a raw read and

587
00:30:14,000 --> 00:30:19,370
I'm able to unlock the device

588
00:30:15,820 --> 00:30:22,070
unlock the a4 command turns out to be

589
00:30:19,370 --> 00:30:25,520
just as useful as the raw read command

590
00:30:22,070 --> 00:30:27,230
because the unlock command unlocks the

591
00:30:25,520 --> 00:30:32,840
right protect and allows us to change

592
00:30:27,230 --> 00:30:34,880
the software in this device so at this

593
00:30:32,840 --> 00:30:37,340
point I got frustrated with typing and

594
00:30:34,880 --> 00:30:40,040
commands by hand I wrote an Android app

595
00:30:37,340 --> 00:30:42,050
to automate dumping the device so now

596
00:30:40,040 --> 00:30:45,620
I'm able to take any one of these

597
00:30:42,050 --> 00:30:47,330
sensors tap it to my phone and a few

598
00:30:45,620 --> 00:30:49,810
seconds later I get a complete copy of

599
00:30:47,330 --> 00:30:53,870
everything interesting from memory I

600
00:30:49,810 --> 00:30:57,050
then loop that back into g drah and here

601
00:30:53,870 --> 00:30:58,850
on the right side you see the password

602
00:30:57,050 --> 00:31:02,360
checking function that we weren't able

603
00:30:58,850 --> 00:31:04,399
to read before and on the left the the

604
00:31:02,360 --> 00:31:06,500
places that are blocked out that is

605
00:31:04,400 --> 00:31:09,440
where the password exists within the

606
00:31:06,500 --> 00:31:10,190
mask ROM at this point I absolutely know

607
00:31:09,440 --> 00:31:12,620
that I have a

608
00:31:10,190 --> 00:31:15,049
fleet dump of the device that nothing is

609
00:31:12,620 --> 00:31:16,850
missing and that I with enough time

610
00:31:15,049 --> 00:31:20,450
could figure out how everything works in

611
00:31:16,850 --> 00:31:27,918
the software of this device this was a

612
00:31:20,450 --> 00:31:30,490
happy moment there are other commands as

613
00:31:27,919 --> 00:31:34,730
I mentioned there's a zero e 1 and E 2

614
00:31:30,490 --> 00:31:37,070
these were disabled by the time I got

615
00:31:34,730 --> 00:31:38,389
the device you can see by the way the

616
00:31:37,070 --> 00:31:41,230
memory is set up that they used to be

617
00:31:38,389 --> 00:31:44,809
enabled so I'm assuming that these are

618
00:31:41,230 --> 00:31:47,960
factory test commands that are used in

619
00:31:44,809 --> 00:31:52,009
the factory but never by the customers

620
00:31:47,960 --> 00:31:54,049
thereafter release you can also see in

621
00:31:52,009 --> 00:31:56,360
older dumps that these weren't always

622
00:31:54,049 --> 00:31:59,779
disabled before they shipped out it's

623
00:31:56,360 --> 00:32:01,758
possible that these commands were being

624
00:31:59,779 --> 00:32:05,179
used in the field and then the decision

625
00:32:01,759 --> 00:32:10,730
was made to turn them off if at the same

626
00:32:05,179 --> 00:32:13,820
time they had disabled the a4 and a3

627
00:32:10,730 --> 00:32:16,000
commands then we would not have been

628
00:32:13,820 --> 00:32:18,080
able to get this far by these techniques

629
00:32:16,000 --> 00:32:26,659
we would have had to succeed in

630
00:32:18,080 --> 00:32:31,610
unlocking the JTAG somehow so about

631
00:32:26,659 --> 00:32:34,009
other commands so we saw a3 the other

632
00:32:31,610 --> 00:32:37,100
thing is that Travis mentioned is that

633
00:32:34,009 --> 00:32:40,220
initially when we wanted to write into

634
00:32:37,100 --> 00:32:41,959
the memory of the device well it would

635
00:32:40,220 --> 00:32:43,610
tell us that it was right protected so

636
00:32:41,960 --> 00:32:45,889
the firt the initial error is really

637
00:32:43,610 --> 00:32:48,289
explicit the specified lock is locked

638
00:32:45,889 --> 00:32:51,639
and its content cannot be changed and

639
00:32:48,289 --> 00:32:54,830
this is where the a4 command is

640
00:32:51,639 --> 00:32:57,668
extremely useful it's a lot set again

641
00:32:54,830 --> 00:33:03,199
with our favorite passwords dead beasts

642
00:32:57,669 --> 00:33:06,490
and then you can write again in the and

643
00:33:03,200 --> 00:33:10,789
the F Ram you can write parts in there

644
00:33:06,490 --> 00:33:12,710
so what can you do with that well of

645
00:33:10,789 --> 00:33:15,289
course then it means that you can tamper

646
00:33:12,710 --> 00:33:19,429
the the memory of the the sensor right

647
00:33:15,289 --> 00:33:22,039
so you can we can virtually modify the

648
00:33:19,429 --> 00:33:24,020
firmware of the sensor and do anything

649
00:33:22,039 --> 00:33:28,040
else we would like to do

650
00:33:24,020 --> 00:33:30,350
with this device right there are a few

651
00:33:28,040 --> 00:33:31,970
limitations there that we sell but like

652
00:33:30,350 --> 00:33:35,510
you told me you might know how to over

653
00:33:31,970 --> 00:33:37,670
overcome that a few bucks like between

654
00:33:35,510 --> 00:33:41,180
zero and three are not writable and also

655
00:33:37,670 --> 00:33:45,440
block EF isn't writable at the very ends

656
00:33:41,180 --> 00:33:48,470
of the F Ram the other thing which might

657
00:33:45,440 --> 00:33:51,230
be interesting right is how about if we

658
00:33:48,470 --> 00:33:53,150
tamper the glucose records and instead

659
00:33:51,230 --> 00:33:55,700
of saying that you have I don't know 70

660
00:33:53,150 --> 00:33:56,660
milligrams per deciliter you have 20

661
00:33:55,700 --> 00:34:00,020
something like that

662
00:33:56,660 --> 00:34:02,660
is that possible at this point

663
00:34:00,020 --> 00:34:05,600
today it is not but we believe we are

664
00:34:02,660 --> 00:34:09,290
very close to that because what happens

665
00:34:05,600 --> 00:34:13,239
is that those records are protected by a

666
00:34:09,290 --> 00:34:16,880
CRC that's not a good cryptographic

667
00:34:13,239 --> 00:34:19,639
protection but the fact is that first we

668
00:34:16,880 --> 00:34:22,640
are not exactly sure of the algorithm

669
00:34:19,639 --> 00:34:24,859
for the CRC we have very good hints but

670
00:34:22,639 --> 00:34:27,049
we're not entirely sure and the other

671
00:34:24,860 --> 00:34:30,740
point is that we are not exactly sure

672
00:34:27,050 --> 00:34:32,690
yet where the CRC sits in the memory so

673
00:34:30,739 --> 00:34:34,879
because of that we are not able we are

674
00:34:32,690 --> 00:34:37,880
able to modify the records but if we

675
00:34:34,880 --> 00:34:40,870
modify them then the mobile application

676
00:34:37,880 --> 00:34:43,640
shouts and that something is wrong and

677
00:34:40,870 --> 00:34:49,460
note that these are not particularly

678
00:34:43,639 --> 00:34:51,889
strong strongly enforced defenses these

679
00:34:49,460 --> 00:34:56,690
are things that require development time

680
00:34:51,889 --> 00:34:58,490
but not new techniques so the blocks

681
00:34:56,690 --> 00:35:00,560
that are not writable are not writable

682
00:34:58,490 --> 00:35:03,350
externally but they're still writable

683
00:35:00,560 --> 00:35:06,290
internally when we flash new code to

684
00:35:03,350 --> 00:35:08,870
this device that new code can add a raw

685
00:35:06,290 --> 00:35:11,570
write command that ignores the write

686
00:35:08,870 --> 00:35:14,359
protection settings and similarly the

687
00:35:11,570 --> 00:35:17,810
mask ROM itself has a command to check

688
00:35:14,360 --> 00:35:24,380
the CRC so we can convert that code to

689
00:35:17,810 --> 00:35:28,220
set the CRC with development time yeah

690
00:35:24,380 --> 00:35:30,350
so we will get to it so now there was a

691
00:35:28,220 --> 00:35:34,279
little bit of thinking about well is

692
00:35:30,350 --> 00:35:35,930
this a medical threat or not so you've

693
00:35:34,280 --> 00:35:36,470
got to keep in mind several things at

694
00:35:35,930 --> 00:35:37,700
this point

695
00:35:36,470 --> 00:35:40,129
first of course it

696
00:35:37,700 --> 00:35:42,740
requires proximity okay it's NFC so you

697
00:35:40,130 --> 00:35:45,070
you the attacker needs to be really

698
00:35:42,740 --> 00:35:47,540
close to the victim in that case

699
00:35:45,070 --> 00:35:49,730
although of course we reported this

700
00:35:47,540 --> 00:35:53,029
issue this right issue to the vendor it

701
00:35:49,730 --> 00:35:57,680
has been fixed in the modal's of V two

702
00:35:53,030 --> 00:36:01,940
of this sensor they have started

703
00:35:57,680 --> 00:36:05,450
shipping in October 2018 in the US I

704
00:36:01,940 --> 00:36:07,369
believe at least that's in France and in

705
00:36:05,450 --> 00:36:09,230
Luxembourg they haven't started shipping

706
00:36:07,369 --> 00:36:11,810
yet so when you go in the pharmacy you

707
00:36:09,230 --> 00:36:14,650
still gets the old versions I don't know

708
00:36:11,810 --> 00:36:17,720
for Switzerland I haven't been shopping

709
00:36:14,650 --> 00:36:20,210
so I don't I don't know that's the other

710
00:36:17,720 --> 00:36:24,529
thing is also is that well we we asked

711
00:36:20,210 --> 00:36:26,660
several diabetes and friends and all of

712
00:36:24,530 --> 00:36:28,460
them told us that's well they usually

713
00:36:26,660 --> 00:36:30,740
had this condition for quite a couple of

714
00:36:28,460 --> 00:36:33,500
years so they know how their body feels

715
00:36:30,740 --> 00:36:35,750
at this or that level so if this is not

716
00:36:33,500 --> 00:36:38,690
consistent with the readings that yet

717
00:36:35,750 --> 00:36:40,490
they get suspicious about it they get

718
00:36:38,690 --> 00:36:42,650
another reading if it's still not

719
00:36:40,490 --> 00:36:45,560
consistence well they will do a blood

720
00:36:42,650 --> 00:36:50,690
test right and same thing hospitals do

721
00:36:45,560 --> 00:36:52,910
blood tests for that okay finally also

722
00:36:50,690 --> 00:36:55,040
the other thing okay this one is own

723
00:36:52,910 --> 00:36:57,490
it's not injecting insulin okay it's

724
00:36:55,040 --> 00:37:01,130
just a sensor so it just tells you how

725
00:36:57,490 --> 00:37:02,959
high your glucose level is that's all

726
00:37:01,130 --> 00:37:07,400
and then you decide if you want to

727
00:37:02,960 --> 00:37:09,650
inject insulin or not so this meaning

728
00:37:07,400 --> 00:37:11,900
that although it is extremely

729
00:37:09,650 --> 00:37:16,099
interesting for hacking what we did I

730
00:37:11,900 --> 00:37:17,540
believe it is not really an attack that

731
00:37:16,099 --> 00:37:21,170
is that interesting for an attacker

732
00:37:17,540 --> 00:37:22,099
except in movies right okay it would be

733
00:37:21,170 --> 00:37:23,750
complicated

734
00:37:22,099 --> 00:37:27,500
to do something really interesting for

735
00:37:23,750 --> 00:37:31,369
an attacker here there are a much easier

736
00:37:27,500 --> 00:37:34,069
way to attack diabetic patients will

737
00:37:31,369 --> 00:37:40,849
discuss that afterwards directly on the

738
00:37:34,069 --> 00:37:44,690
smartphone so the last thing we haven't

739
00:37:40,849 --> 00:37:48,680
discussed is that 14-day limit for for

740
00:37:44,690 --> 00:37:51,710
the sensor for the sensor right why

741
00:37:48,680 --> 00:37:54,109
couldn't would it be possible to get it

742
00:37:51,710 --> 00:37:57,890
to work for 15 days for 16 days

743
00:37:54,109 --> 00:38:01,069
obviously that could be interesting in

744
00:37:57,890 --> 00:38:03,980
some particular cases I'm taking a side

745
00:38:01,070 --> 00:38:06,560
here the medical reasons for its to have

746
00:38:03,980 --> 00:38:09,530
limits of course if you keep it on you

747
00:38:06,560 --> 00:38:11,210
for 30 days I believe it's D really

748
00:38:09,530 --> 00:38:13,580
going to start to itch or things like

749
00:38:11,210 --> 00:38:15,589
that it wouldn't be medically reasonable

750
00:38:13,580 --> 00:38:19,220
I'm only talking here about the

751
00:38:15,589 --> 00:38:21,710
technical part of course so what happens

752
00:38:19,220 --> 00:38:23,330
is here at this level here you've got

753
00:38:21,710 --> 00:38:26,540
the mobile application and the dalvik

754
00:38:23,330 --> 00:38:29,270
code of the mobile application then here

755
00:38:26,540 --> 00:38:32,509
you've got the native library inside the

756
00:38:29,270 --> 00:38:34,970
mobile application this one is pretty

757
00:38:32,510 --> 00:38:37,400
much obfuscated and then after that you

758
00:38:34,970 --> 00:38:39,830
can also talk to the sensor itself and

759
00:38:37,400 --> 00:38:44,150
all the communication then is through

760
00:38:39,830 --> 00:38:47,839
NFC the first thing it does to see if

761
00:38:44,150 --> 00:38:51,080
the sensor has expired or not is first

762
00:38:47,839 --> 00:38:54,020
you grab the region on the sensor it

763
00:38:51,080 --> 00:38:58,279
grabs it and then what it does is it's

764
00:38:54,020 --> 00:39:00,230
and checks is that sensor supported for

765
00:38:58,280 --> 00:39:02,359
this mobile application so if you have a

766
00:39:00,230 --> 00:39:05,810
sensor which is for us and your

767
00:39:02,359 --> 00:39:09,980
application is for Europe well it's

768
00:39:05,810 --> 00:39:11,720
gonna say now either get another sensor

769
00:39:09,980 --> 00:39:16,820
or get another application but that

770
00:39:11,720 --> 00:39:19,129
doesn't match with if it is supported

771
00:39:16,820 --> 00:39:22,910
with that well it will get the correct

772
00:39:19,130 --> 00:39:26,990
limits which are the activation time one

773
00:39:22,910 --> 00:39:31,640
hour in Europe and expiration limits 14

774
00:39:26,990 --> 00:39:35,118
days in Europe then it sends a commands

775
00:39:31,640 --> 00:39:37,520
to read all blocks on the sensor between

776
00:39:35,119 --> 00:39:40,099
block 0 and block 2 a here I'm talking

777
00:39:37,520 --> 00:39:43,310
about the NFC blocks at the end of the

778
00:39:40,099 --> 00:39:44,990
SRAM okay and it reads reviews all of

779
00:39:43,310 --> 00:39:49,759
this and send it back to the mobile

780
00:39:44,990 --> 00:39:53,930
application there it buff arises this

781
00:39:49,760 --> 00:39:57,920
those blocks and then asks a native

782
00:39:53,930 --> 00:40:02,270
library well how is this okay or has my

783
00:39:57,920 --> 00:40:05,689
sensor expired if it is okay it will

784
00:40:02,270 --> 00:40:08,630
then set an alarm and in 14 days

785
00:40:05,689 --> 00:40:11,538
the eye alarm will be triggered and then

786
00:40:08,630 --> 00:40:16,639
it will do everything it has to do to to

787
00:40:11,539 --> 00:40:18,559
mark the sensor as expired so we thought

788
00:40:16,639 --> 00:40:21,589
about that and thought well okay I don't

789
00:40:18,559 --> 00:40:24,619
know if you noticed that the blocks are

790
00:40:21,589 --> 00:40:27,769
memorized here so what if we don't

791
00:40:24,619 --> 00:40:31,309
actually send to the native library the

792
00:40:27,769 --> 00:40:33,408
real blocks but fake blocks and of

793
00:40:31,309 --> 00:40:36,589
course I'm gonna take blocks that I'm

794
00:40:33,409 --> 00:40:39,109
got from another sensor which hasn't

795
00:40:36,589 --> 00:40:42,169
expired really yet and we're gone the

796
00:40:39,109 --> 00:40:44,959
sense that to the native library so the

797
00:40:42,169 --> 00:40:46,699
native library will be fooled indeed it

798
00:40:44,959 --> 00:40:49,609
works it is fooled and it says about

799
00:40:46,699 --> 00:40:54,380
right okay your sensor is sign go on and

800
00:40:49,609 --> 00:40:56,389
use it all right so this is ah this is

801
00:40:54,380 --> 00:40:58,279
what you you see you see in the end that

802
00:40:56,389 --> 00:41:07,429
well you can get some glucose reading

803
00:40:58,279 --> 00:41:09,349
there I have this video for that so this

804
00:41:07,429 --> 00:41:11,719
is not a life demo for this one because

805
00:41:09,349 --> 00:41:19,880
it's really a bit more complicated to

806
00:41:11,719 --> 00:41:23,199
set up but there we go so here I'm just

807
00:41:19,880 --> 00:41:25,880
showing you a sensor which has expired

808
00:41:23,199 --> 00:41:28,249
just to show that it had expired and

809
00:41:25,880 --> 00:41:30,049
it's not working there so it tells you

810
00:41:28,249 --> 00:41:34,598
well it's in French but that you have to

811
00:41:30,049 --> 00:41:38,899
remove the sensor and to get another one

812
00:41:34,599 --> 00:41:43,489
that's about this one and then I am

813
00:41:38,899 --> 00:41:47,359
using again the same sensor but this

814
00:41:43,489 --> 00:41:51,859
time I am going to use a hook using

815
00:41:47,359 --> 00:41:54,529
frida and instead of sending the normal

816
00:41:51,859 --> 00:41:56,569
blocks I am going to sends the blocks of

817
00:41:54,529 --> 00:41:58,609
that sensor I had which hadn't expired

818
00:41:56,569 --> 00:42:01,159
and then you're gonna see the difference

819
00:41:58,609 --> 00:42:04,249
well tell us see okay you can now use

820
00:42:01,159 --> 00:42:08,089
your sensor and scan a to scan and we

821
00:42:04,249 --> 00:42:10,598
are going to scan and it gives me a nice

822
00:42:08,089 --> 00:42:16,159
results eighty-eight nomograms

823
00:42:10,599 --> 00:42:18,109
so it works actually it is not reading

824
00:42:16,159 --> 00:42:19,320
off the body of course it was you can

825
00:42:18,109 --> 00:42:21,090
see it's a code

826
00:42:19,320 --> 00:42:24,090
we detach so that was probably the last

827
00:42:21,090 --> 00:42:25,110
measure which was in the sensor ATL 88

828
00:42:24,090 --> 00:42:32,010
milligrams

829
00:42:25,110 --> 00:42:32,610
here the other thing that we managed to

830
00:42:32,010 --> 00:42:34,950
do here

831
00:42:32,610 --> 00:42:37,890
is that normally so you see when you

832
00:42:34,950 --> 00:42:41,129
scan the sensor it tells you okay this

833
00:42:37,890 --> 00:42:42,299
sensor is going to expire in normally 14

834
00:42:41,130 --> 00:42:45,510
days and here

835
00:42:42,300 --> 00:42:48,540
notice this one says 90 days so ok we're

836
00:42:45,510 --> 00:42:51,720
Italy managed to extend our sensors to

837
00:42:48,540 --> 00:42:56,520
be able to work over 90 days so how did

838
00:42:51,720 --> 00:42:59,100
we do that well same thing when we are

839
00:42:56,520 --> 00:43:02,600
asking the native library the native

840
00:42:59,100 --> 00:43:05,790
library tell goes and fetch the limits

841
00:43:02,600 --> 00:43:07,950
in the sensor and it says okay this is a

842
00:43:05,790 --> 00:43:12,810
sensor for Europe so you should have

843
00:43:07,950 --> 00:43:16,830
normally 14 days 14 days is to twenty

844
00:43:12,810 --> 00:43:19,200
hundred thousand here minutes and then

845
00:43:16,830 --> 00:43:21,960
with free da you can hook this and say

846
00:43:19,200 --> 00:43:25,470
okay I'm saying now the limit is not

847
00:43:21,960 --> 00:43:28,710
going to be 14 days but 90 days there it

848
00:43:25,470 --> 00:43:30,419
is and this works and then the the rest

849
00:43:28,710 --> 00:43:32,520
of the flow of the mobile application

850
00:43:30,420 --> 00:43:39,780
works and this is where you get your

851
00:43:32,520 --> 00:43:42,750
ninety days there and so well you are

852
00:43:39,780 --> 00:43:46,080
pretty done here to wrap it up a little

853
00:43:42,750 --> 00:43:48,360
bit what we can say is that it's a

854
00:43:46,080 --> 00:43:49,710
pretty nice design for this medical

855
00:43:48,360 --> 00:43:52,860
device here

856
00:43:49,710 --> 00:43:54,720
I had personally looked into other IOT

857
00:43:52,860 --> 00:43:57,180
devices before that and most of the time

858
00:43:54,720 --> 00:43:59,970
the design was really crappy gadgets

859
00:43:57,180 --> 00:44:04,410
with lots of security holes it's not the

860
00:43:59,970 --> 00:44:06,689
case and for this one of course nothing

861
00:44:04,410 --> 00:44:09,990
is perfect at that it did have in that

862
00:44:06,690 --> 00:44:12,360
case for instance of vulnerability to be

863
00:44:09,990 --> 00:44:14,609
able to write in there you also perhaps

864
00:44:12,360 --> 00:44:17,280
notice that's well it is readable by

865
00:44:14,610 --> 00:44:19,920
anybody so if you are in a packed bus

866
00:44:17,280 --> 00:44:22,350
and sobbing is close to you and you have

867
00:44:19,920 --> 00:44:24,600
diabeetus well they can read your

868
00:44:22,350 --> 00:44:31,770
measures and you won't have any warning

869
00:44:24,600 --> 00:44:33,180
of that okay but still the designer

870
00:44:31,770 --> 00:44:37,559
still on a nice

871
00:44:33,180 --> 00:44:40,200
despite the this thing in terms of

872
00:44:37,559 --> 00:44:41,099
threats so we said well it was mainly

873
00:44:40,200 --> 00:44:43,529
hacks

874
00:44:41,099 --> 00:44:45,660
interesting hacks to be able to extend

875
00:44:43,529 --> 00:44:47,670
it I don't now to use it for instance if

876
00:44:45,660 --> 00:44:49,950
it's your chili or your child has

877
00:44:47,670 --> 00:44:54,059
diabetes and he's at school and you want

878
00:44:49,950 --> 00:44:55,859
to interact to question the the sensor

879
00:44:54,059 --> 00:44:57,390
remotely or things like that if you want

880
00:44:55,859 --> 00:44:59,848
to do something a bit more hackish with

881
00:44:57,390 --> 00:45:03,029
it of course beware what you're doing

882
00:44:59,849 --> 00:45:06,690
it'sa might be important but in terms of

883
00:45:03,029 --> 00:45:08,400
real cybersecurity I feel that however

884
00:45:06,690 --> 00:45:12,269
though the real threats here are more

885
00:45:08,400 --> 00:45:14,069
with on the smartphone it's gonna be

886
00:45:12,269 --> 00:45:17,399
difficult to attack the sensor as you

887
00:45:14,069 --> 00:45:19,440
may have seen but it is far easier

888
00:45:17,400 --> 00:45:21,089
unfortunately to get to run somewhere

889
00:45:19,440 --> 00:45:23,460
for instance on your smartphone and if

890
00:45:21,089 --> 00:45:24,930
you have a ransom on are you're on your

891
00:45:23,460 --> 00:45:26,970
smartphone well you won't be able to

892
00:45:24,930 --> 00:45:29,160
scan yourself any longer which means

893
00:45:26,970 --> 00:45:31,288
that you have to resort do go back to

894
00:45:29,160 --> 00:45:36,299
the manual way and get the blood test

895
00:45:31,289 --> 00:45:38,249
which is of course a nuisance do you

896
00:45:36,299 --> 00:45:47,910
have anything else to add I'm done on my

897
00:45:38,249 --> 00:45:49,680
sides yeah to mention that the we're not

898
00:45:47,910 --> 00:45:52,049
just saying that this is like pretty

899
00:45:49,680 --> 00:45:53,930
good product we're saying the if we were

900
00:45:52,049 --> 00:45:55,920
diabetic we would buy and use this

901
00:45:53,930 --> 00:46:00,930
despite the vulnerabilities that we

902
00:45:55,920 --> 00:46:03,150
found in it at the same time if we were

903
00:46:00,930 --> 00:46:04,348
dependent upon this technology we would

904
00:46:03,150 --> 00:46:05,640
spend a lot more time reverse

905
00:46:04,349 --> 00:46:07,799
engineering it in order to know

906
00:46:05,640 --> 00:46:10,680
absolutely everything about it because

907
00:46:07,799 --> 00:46:14,160
you really ought to know as much as

908
00:46:10,680 --> 00:46:20,910
possible about the medicine and the

909
00:46:14,160 --> 00:46:24,058
technology that you use yeah we'd like

910
00:46:20,910 --> 00:46:27,808
to thank all of the diabetics who passed

911
00:46:24,059 --> 00:46:32,119
us sensors to reverse engineer and

912
00:46:27,809 --> 00:46:34,799
helped explain to us how these

913
00:46:32,119 --> 00:46:38,970
technologies are used day to day from

914
00:46:34,799 --> 00:46:42,269
like first and patient perspective we

915
00:46:38,970 --> 00:46:45,899
would also just like to quickly mention

916
00:46:42,269 --> 00:46:46,890
before questions that we have a number

917
00:46:45,900 --> 00:46:50,099
of the

918
00:46:46,890 --> 00:46:53,549
good tag NFC emulator cards you can

919
00:46:50,099 --> 00:46:56,760
program these in C from your laptop I'm

920
00:46:53,549 --> 00:46:58,619
sorry from your smartphone so if you do

921
00:46:56,760 --> 00:47:00,510
Android development or if you do C

922
00:46:58,619 --> 00:47:02,970
development and you would like to mess

923
00:47:00,510 --> 00:47:04,799
with these find me anywhere at the

924
00:47:02,970 --> 00:47:07,558
conference that is not this room

925
00:47:04,799 --> 00:47:10,619
immediately after the talk and I'd be

926
00:47:07,559 --> 00:47:17,250
happy to share one with you and with

927
00:47:10,619 --> 00:47:20,760
that are there any questions yes thank

928
00:47:17,250 --> 00:47:23,519
you you said it stores the minutes in a

929
00:47:20,760 --> 00:47:26,190
two-pack value so too bad well you can

930
00:47:23,519 --> 00:47:28,500
keep at max like sixty thousand minutes

931
00:47:26,190 --> 00:47:31,010
wouldn't that overflow after one or two

932
00:47:28,500 --> 00:47:35,190
months and we set the sensor basically

933
00:47:31,010 --> 00:47:38,720
yeah I tried it I overflowed it that way

934
00:47:35,190 --> 00:47:43,049
but my sensor was still marked expired

935
00:47:38,720 --> 00:47:46,200
before that so the problem with it is

936
00:47:43,049 --> 00:47:48,180
that I only get the sensors from people

937
00:47:46,200 --> 00:47:50,700
who have diabetes and they gave it to me

938
00:47:48,180 --> 00:47:53,759
when once it has expired right I could

939
00:47:50,700 --> 00:47:56,368
buy occasionally one or two sensors on

940
00:47:53,759 --> 00:47:59,009
myself and do the tests but then I only

941
00:47:56,369 --> 00:48:01,410
have 14 days to finish my research and

942
00:47:59,009 --> 00:48:04,230
sometimes it's a bit short right

943
00:48:01,410 --> 00:48:08,490
so in that case once it is marked

944
00:48:04,230 --> 00:48:10,410
expired it doesn't you can't do anything

945
00:48:08,490 --> 00:48:13,078
about it and your longer by just

946
00:48:10,410 --> 00:48:15,109
shifting the the wear time alright thank

947
00:48:13,079 --> 00:48:18,720
you but I believe we will manage to

948
00:48:15,109 --> 00:48:22,339
overcome that however we have code

949
00:48:18,720 --> 00:48:22,339
execution now so we can change anything

950
00:48:24,140 --> 00:48:31,890
it does not run doom there's enough room

951
00:48:28,170 --> 00:48:40,940
for NIMH maybe I could add a blackjack

952
00:48:31,890 --> 00:48:40,940
game craps well there's other questions

953
00:48:48,830 --> 00:48:54,960
wasn't too much of the memory readable

954
00:48:51,780 --> 00:48:57,120
at the first place does it make sense to

955
00:48:54,960 --> 00:49:02,430
have everything readable not everything

956
00:48:57,120 --> 00:49:05,400
but the whole ffs Ram so yes and on the

957
00:49:02,430 --> 00:49:10,350
one hand you would like to limit what's

958
00:49:05,400 --> 00:49:11,640
readable on the other hand the version

959
00:49:10,350 --> 00:49:13,200
one of this product the one that's

960
00:49:11,640 --> 00:49:16,500
available here in Europe and that we use

961
00:49:13,200 --> 00:49:19,080
for this project it's kind of nice that

962
00:49:16,500 --> 00:49:22,950
it's open because all of these

963
00:49:19,080 --> 00:49:25,920
third-party apps were able to be written

964
00:49:22,950 --> 00:49:30,180
to use the medical information off of

965
00:49:25,920 --> 00:49:34,800
the device the second version does not

966
00:49:30,180 --> 00:49:37,620
present easily interpreted data it looks

967
00:49:34,800 --> 00:49:40,080
scrambled it might be encrypted there's

968
00:49:37,620 --> 00:49:44,460
nothing in the view of that that looks

969
00:49:40,080 --> 00:49:46,380
like code or an interrupt table which is

970
00:49:44,460 --> 00:49:49,140
certainly going to slow us down in

971
00:49:46,380 --> 00:49:53,160
reverse engineering this new model but I

972
00:49:49,140 --> 00:49:56,310
don't believe that it's that it's a

973
00:49:53,160 --> 00:49:58,500
complete stop to reverse engineering for

974
00:49:56,310 --> 00:50:00,720
example the JTAG reverse engineering

975
00:49:58,500 --> 00:50:02,220
that we began earlier on that led to a

976
00:50:00,720 --> 00:50:04,919
dead end

977
00:50:02,220 --> 00:50:09,660
that should work if we can make the chip

978
00:50:04,920 --> 00:50:12,540
reset itself as it does on the the

979
00:50:09,660 --> 00:50:14,100
assembly line floor so I believe that if

980
00:50:12,540 --> 00:50:17,580
we hold the test pins in a certain

981
00:50:14,100 --> 00:50:20,880
configuration as we reboot the chip that

982
00:50:17,580 --> 00:50:23,580
the mask ROM will overwrite all of the

983
00:50:20,880 --> 00:50:26,640
FM and leave it in an open State for a

984
00:50:23,580 --> 00:50:31,940
factory programming it's also possible

985
00:50:26,640 --> 00:50:35,160
because this is Ephrem the magnetic

986
00:50:31,940 --> 00:50:38,360
state is holding the the bits of this

987
00:50:35,160 --> 00:50:42,000
chip and the Curie point for the chip is

988
00:50:38,360 --> 00:50:44,550
coincidentally 430 degrees Celsius so if

989
00:50:42,000 --> 00:50:47,970
we raise the chip to that point without

990
00:50:44,550 --> 00:50:50,520
burning the packaging and then we put a

991
00:50:47,970 --> 00:50:52,169
strong magnetic field on the chip we

992
00:50:50,520 --> 00:50:57,150
might be able to turn all of the bits to

993
00:50:52,170 --> 00:50:58,740
zeros or ones to unlock it so yes hiding

994
00:50:57,150 --> 00:50:59,940
a bit of the frm would have slowed us

995
00:50:58,740 --> 00:51:01,910
down but I don't think that it would

996
00:50:59,940 --> 00:51:06,559
completely stop

997
00:51:01,910 --> 00:51:09,660
attempts to reverse engineer the device

998
00:51:06,559 --> 00:51:12,170
okay thank you very much let's all thank

999
00:51:09,660 --> 00:51:12,170
the speakers

