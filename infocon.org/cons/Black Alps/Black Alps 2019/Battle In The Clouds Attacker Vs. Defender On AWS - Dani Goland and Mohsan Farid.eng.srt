1
00:00:02,179 --> 00:00:05,970
thank you

2
00:00:04,200 --> 00:00:09,600
how's that I'm feeling up for lunch

3
00:00:05,970 --> 00:00:11,730
tired no good all right a quick question

4
00:00:09,600 --> 00:00:15,200
how many of you are red teamers pen

5
00:00:11,730 --> 00:00:15,200
testers offensive oriented

6
00:00:16,099 --> 00:00:21,890
yeah raise your hands up I feel like I'm

7
00:00:18,449 --> 00:00:27,659
slowly coming up all right guitard up

8
00:00:21,890 --> 00:00:32,820
and then blue team and okay so what did

9
00:00:27,659 --> 00:00:36,269
the rest of you do all right so I'm

10
00:00:32,820 --> 00:00:39,660
Danny I'm a CTO of a company called net

11
00:00:36,270 --> 00:00:42,270
alpha financial systems I'm not really

12
00:00:39,660 --> 00:00:45,089
into security I do some pen testing and

13
00:00:42,270 --> 00:00:48,330
a lot of research on my free time but

14
00:00:45,090 --> 00:00:50,160
this talk came I met my son I think

15
00:00:48,330 --> 00:00:53,129
couple couple months ago and we were

16
00:00:50,160 --> 00:00:54,480
talking about collaborating in my

17
00:00:53,130 --> 00:00:56,310
company we work a lot with the cloud a

18
00:00:54,480 --> 00:00:59,580
lot of DevOps a lot of trying to do

19
00:00:56,310 --> 00:01:00,630
security in the cloud and then we said

20
00:00:59,580 --> 00:01:03,180
all right let's do something together

21
00:01:00,630 --> 00:01:05,248
he's a pen tester red teamer for a lot

22
00:01:03,180 --> 00:01:07,619
of time he loses himself yeah

23
00:01:05,248 --> 00:01:09,899
my name is boson freidheim I break

24
00:01:07,619 --> 00:01:12,289
things whether intentional or

25
00:01:09,899 --> 00:01:14,549
unintentional but more often intentional

26
00:01:12,289 --> 00:01:16,829
so I've been pen testing for quite some

27
00:01:14,549 --> 00:01:19,170
time I did initially start off on the

28
00:01:16,829 --> 00:01:22,169
blue side but the red side was a lot

29
00:01:19,170 --> 00:01:24,990
more fun so once I pivoted over I never

30
00:01:22,170 --> 00:01:27,929
looked back but obviously there's a lot

31
00:01:24,990 --> 00:01:29,548
of synergy in between working together

32
00:01:27,929 --> 00:01:31,649
and collaborating between the red and

33
00:01:29,549 --> 00:01:33,329
blue side so hopefully we're gonna offer

34
00:01:31,649 --> 00:01:35,609
a lot of value to everyone here

35
00:01:33,329 --> 00:01:40,529
whether you're red blue or management so

36
00:01:35,609 --> 00:01:46,859
yeah so who works in the cloud aw a

37
00:01:40,530 --> 00:01:48,840
serger GCP great so let's start with the

38
00:01:46,859 --> 00:01:50,219
share responsibility model which

39
00:01:48,840 --> 00:01:51,539
basically tells you what's your

40
00:01:50,219 --> 00:01:53,068
responsibility when you use cloud

41
00:01:51,539 --> 00:01:55,380
providers and what's their

42
00:01:53,069 --> 00:01:57,689
responsibility so anything related to

43
00:01:55,380 --> 00:01:59,249
physical networks the server's

44
00:01:57,689 --> 00:02:02,100
themselves the storage hard drives

45
00:01:59,249 --> 00:02:05,670
hypervisors that's always their

46
00:02:02,100 --> 00:02:07,770
responsibility if using AI asks like a

47
00:02:05,670 --> 00:02:11,068
double sec - then you have to configure

48
00:02:07,770 --> 00:02:13,440
your virtual networks which is like

49
00:02:11,068 --> 00:02:17,250
security groups ACLs

50
00:02:13,440 --> 00:02:19,079
the OS app is always yours your data and

51
00:02:17,250 --> 00:02:21,960
the people when we move to something

52
00:02:19,080 --> 00:02:24,840
like platform as a service which is

53
00:02:21,960 --> 00:02:27,590
something like Fargate or elastic

54
00:02:24,840 --> 00:02:30,630
beanstalk we don't take care of the OS

55
00:02:27,590 --> 00:02:32,550
which is great take some things off your

56
00:02:30,630 --> 00:02:35,250
hand you don't have to do patches and

57
00:02:32,550 --> 00:02:38,130
then last one is a sass something like

58
00:02:35,250 --> 00:02:41,070
lambda functions which you basically

59
00:02:38,130 --> 00:02:45,359
only write your small piece of code and

60
00:02:41,070 --> 00:02:48,690
you're good so to get foothold in the

61
00:02:45,360 --> 00:02:51,960
cloud we can use a lot of things whether

62
00:02:48,690 --> 00:02:54,540
it's like those machines RDP other

63
00:02:51,960 --> 00:02:58,890
vulnerabilities what regular web

64
00:02:54,540 --> 00:03:00,810
pentesting things to get all arsey SSR F

65
00:02:58,890 --> 00:03:02,670
which is really really common these days

66
00:03:00,810 --> 00:03:05,180
and clouds because you have the made a

67
00:03:02,670 --> 00:03:08,070
data server and it's alternatives

68
00:03:05,180 --> 00:03:09,420
equivalents in other clouds the Mater

69
00:03:08,070 --> 00:03:11,790
there are servers from AWS

70
00:03:09,420 --> 00:03:13,700
it holds everything related to your

71
00:03:11,790 --> 00:03:17,220
instance its credentials

72
00:03:13,700 --> 00:03:21,989
so using SS RF if we can get that info

73
00:03:17,220 --> 00:03:24,510
it's very useful for us we're gonna show

74
00:03:21,990 --> 00:03:25,950
an example of using the network does

75
00:03:24,510 --> 00:03:32,130
anyone know what pickle bombs are in

76
00:03:25,950 --> 00:03:34,619
Python okay so it's basically the

77
00:03:32,130 --> 00:03:37,769
serialization attack and we use that on

78
00:03:34,620 --> 00:03:41,820
a ready server which is exposed and by

79
00:03:37,770 --> 00:03:43,980
default does not have any off and the

80
00:03:41,820 --> 00:03:45,720
app we're using user has a celery worker

81
00:03:43,980 --> 00:03:47,519
which is just a regular scheduler you

82
00:03:45,720 --> 00:03:49,380
can put things in queue and it will do

83
00:03:47,520 --> 00:03:52,650
it in the background so we're gonna

84
00:03:49,380 --> 00:03:54,240
listen for new messages they're coming

85
00:03:52,650 --> 00:03:59,030
to the queue and in check inject the

86
00:03:54,240 --> 00:03:59,030
malicious pickle so let's see the demo

87
00:03:59,990 --> 00:04:05,190
so we're starting off with a little

88
00:04:02,280 --> 00:04:07,830
script that will listen to the queue to

89
00:04:05,190 --> 00:04:09,690
find the message block the cue take the

90
00:04:07,830 --> 00:04:11,940
message and inject our payload inside

91
00:04:09,690 --> 00:04:15,810
right here we can see that we got a

92
00:04:11,940 --> 00:04:17,339
reverse shell into the machine and we're

93
00:04:15,810 --> 00:04:19,769
gonna start playing with the metadata

94
00:04:17,339 --> 00:04:22,489
server and start getting some info out

95
00:04:19,769 --> 00:04:24,990
of it so this is the startup script

96
00:04:22,490 --> 00:04:26,880
sometimes you get differentials if it's

97
00:04:24,990 --> 00:04:28,290
a CI CD pipeline

98
00:04:26,880 --> 00:04:30,780
but the more interesting thing that

99
00:04:28,290 --> 00:04:33,330
we're gonna pull out of this is actually

100
00:04:30,780 --> 00:04:38,099
the access G secret G and the session

101
00:04:33,330 --> 00:04:40,800
token' for our AWS machine so we got the

102
00:04:38,100 --> 00:04:46,590
roll you can see it's a bit small but

103
00:04:40,800 --> 00:04:51,470
ECS instance roll and last we're gonna

104
00:04:46,590 --> 00:04:55,049
dump all the credentials there we go and

105
00:04:51,470 --> 00:04:58,230
we have the access key access key ID

106
00:04:55,050 --> 00:05:00,390
secret key and the token this is a small

107
00:04:58,230 --> 00:05:01,890
piece of code that does this if no one

108
00:05:00,390 --> 00:05:07,800
played with pickle bombs it's literally

109
00:05:01,890 --> 00:05:11,250
a one-liner so next thing we're gonna do

110
00:05:07,800 --> 00:05:17,580
is anyone working with service smash the

111
00:05:11,250 --> 00:05:21,840
sto console alright one person so when

112
00:05:17,580 --> 00:05:24,450
everyone starts moving to that it comes

113
00:05:21,840 --> 00:05:27,450
it gives you a lot of easy configuration

114
00:05:24,450 --> 00:05:30,900
things that gives you a lot of ease in

115
00:05:27,450 --> 00:05:32,789
life basically in networking and finding

116
00:05:30,900 --> 00:05:33,960
other services that your machines want

117
00:05:32,790 --> 00:05:36,300
to talk to especially if you're in a

118
00:05:33,960 --> 00:05:39,390
micro service architecture we're gonna

119
00:05:36,300 --> 00:05:41,640
focus on console it's probably the thing

120
00:05:39,390 --> 00:05:45,479
the second most popular one after sto

121
00:05:41,640 --> 00:05:47,219
sto is mostly use of kubernetes so what

122
00:05:45,480 --> 00:05:49,110
it does is basically gives you two

123
00:05:47,220 --> 00:05:50,430
things it gives you a couple more but

124
00:05:49,110 --> 00:05:52,620
the main ones are the service discovery

125
00:05:50,430 --> 00:05:54,660
so you have a bunch of micro services

126
00:05:52,620 --> 00:05:56,490
they can be different instances of the

127
00:05:54,660 --> 00:06:00,480
same service and you're gonna register

128
00:05:56,490 --> 00:06:03,390
them to a distributed key-value store it

129
00:06:00,480 --> 00:06:05,130
will store them and he can do like dns

130
00:06:03,390 --> 00:06:08,820
masked and you'll basically access your

131
00:06:05,130 --> 00:06:11,040
services by dns and the second thing you

132
00:06:08,820 --> 00:06:13,800
can do is service mesh which gives you

133
00:06:11,040 --> 00:06:16,620
identity in authorization it can there's

134
00:06:13,800 --> 00:06:18,780
a console connect which gives you a a

135
00:06:16,620 --> 00:06:22,250
little proxy sidecar proxy which gives

136
00:06:18,780 --> 00:06:24,330
you a secure connection between services

137
00:06:22,250 --> 00:06:27,270
this is what the dashboard looks like

138
00:06:24,330 --> 00:06:29,789
you can see we got a poster service we

139
00:06:27,270 --> 00:06:33,810
have a century vault and console service

140
00:06:29,790 --> 00:06:35,760
and if you do a little dig query we're

141
00:06:33,810 --> 00:06:37,860
going to post res service to our console

142
00:06:35,760 --> 00:06:40,340
and you can see that we have to to post

143
00:06:37,860 --> 00:06:40,340
our services

144
00:06:40,710 --> 00:06:45,210
so we're gonna poison them there are two

145
00:06:43,140 --> 00:06:46,409
ways to poison them default

146
00:06:45,210 --> 00:06:49,260
configurations if you look at the

147
00:06:46,410 --> 00:06:51,060
website there is no auth token for

148
00:06:49,260 --> 00:06:54,360
registering services so it's pretty easy

149
00:06:51,060 --> 00:06:58,950
we're gonna register a new service call

150
00:06:54,360 --> 00:07:02,760
it post dress four five four three two

151
00:06:58,950 --> 00:07:04,260
and the health check is a pretty

152
00:07:02,760 --> 00:07:07,469
interesting thing so you can do a health

153
00:07:04,260 --> 00:07:09,210
check with pin bash which I'm not gonna

154
00:07:07,470 --> 00:07:10,530
say it but there's either imagination a

155
00:07:09,210 --> 00:07:13,950
lot of things you can do with that on

156
00:07:10,530 --> 00:07:19,830
every 10 seconds or 60 seconds as it's

157
00:07:13,950 --> 00:07:22,560
here so once we do that any service that

158
00:07:19,830 --> 00:07:24,180
wants to talk to post dress will it's

159
00:07:22,560 --> 00:07:25,890
like a round-robin it will hit the real

160
00:07:24,180 --> 00:07:28,920
server sometimes it'll hit our server

161
00:07:25,890 --> 00:07:32,640
sometimes and if you look at the post

162
00:07:28,920 --> 00:07:33,960
dress off handshake there's interesting

163
00:07:32,640 --> 00:07:36,840
things you can do with it to dump

164
00:07:33,960 --> 00:07:38,250
credentials and downgrade as a cell I'm

165
00:07:36,840 --> 00:07:39,570
not gonna go into it right now you can

166
00:07:38,250 --> 00:07:41,940
talk to me after that if you want to

167
00:07:39,570 --> 00:07:44,820
know but I'll show you a demo of how it

168
00:07:41,940 --> 00:07:46,680
works and we do a console reload which

169
00:07:44,820 --> 00:07:48,360
will basically gossip between the

170
00:07:46,680 --> 00:07:51,690
cluster and tell everyone okay we have a

171
00:07:48,360 --> 00:07:53,850
new service second thing so here we use

172
00:07:51,690 --> 00:07:55,680
default default credentials which is

173
00:07:53,850 --> 00:07:57,390
it's nice but sometimes you have a

174
00:07:55,680 --> 00:07:58,980
problem because alright let's say

175
00:07:57,390 --> 00:08:01,229
someone did read the configuration in

176
00:07:58,980 --> 00:08:03,210
the advanced configuration but a lot of

177
00:08:01,230 --> 00:08:06,210
people use something called registrate

178
00:08:03,210 --> 00:08:08,789
err which basically it's a container

179
00:08:06,210 --> 00:08:11,039
that lets you register Services

180
00:08:08,790 --> 00:08:12,810
automatically inside your machine so any

181
00:08:11,040 --> 00:08:15,210
new container comes up you give it a

182
00:08:12,810 --> 00:08:17,250
service name it will register it and it

183
00:08:15,210 --> 00:08:19,080
will have a token with permissions to

184
00:08:17,250 --> 00:08:22,110
register a bunch of services so let's

185
00:08:19,080 --> 00:08:24,659
say we got a we got a shell on the host

186
00:08:22,110 --> 00:08:26,940
we'll just run a new container with our

187
00:08:24,660 --> 00:08:29,970
malicious code and it will register it

188
00:08:26,940 --> 00:08:34,610
automatically with the right token we

189
00:08:29,970 --> 00:08:34,610
bypassed that so let's see a demo

190
00:08:41,490 --> 00:08:48,280
so here we popped up our Python console

191
00:08:45,390 --> 00:08:50,620
here we can see it but I ran a proxy

192
00:08:48,280 --> 00:08:53,220
this little bar on top is hiding it and

193
00:08:50,620 --> 00:08:56,340
I'm going to try to connect to console

194
00:08:53,220 --> 00:08:59,530
post rest that servers our console and

195
00:08:56,340 --> 00:09:02,920
this is my little proxy downgrade the

196
00:08:59,530 --> 00:09:05,170
connection and did some magic to dump

197
00:09:02,920 --> 00:09:06,910
credentials and it's a transparent so

198
00:09:05,170 --> 00:09:10,270
the machine doesn't know anything about

199
00:09:06,910 --> 00:09:12,699
it next thing we're going to talk about

200
00:09:10,270 --> 00:09:14,290
is persistence so here we dump some

201
00:09:12,700 --> 00:09:17,080
credentials we got access to one machine

202
00:09:14,290 --> 00:09:20,140
a lot of things that happened is

203
00:09:17,080 --> 00:09:22,630
sometimes developers forget devki's or

204
00:09:20,140 --> 00:09:23,890
ops cheese or you get a CI CD pipeline

205
00:09:22,630 --> 00:09:28,090
where you get environmental variables

206
00:09:23,890 --> 00:09:33,750
you can get their access key so a little

207
00:09:28,090 --> 00:09:33,750
clip if anyone watches ohon oh no sound

208
00:09:34,050 --> 00:09:37,349
sorry about that

209
00:09:47,700 --> 00:09:54,790
so lambda layers London layers are

210
00:09:52,750 --> 00:09:56,500
basically like base images for docker if

211
00:09:54,790 --> 00:09:59,500
you don't allow them does their AWS as

212
00:09:56,500 --> 00:10:02,710
service functions so a lot of developers

213
00:09:59,500 --> 00:10:04,300
used them to basically get a base layer

214
00:10:02,710 --> 00:10:06,130
with a bunch of libraries they need for

215
00:10:04,300 --> 00:10:08,530
all their functions so you don't have to

216
00:10:06,130 --> 00:10:11,710
package them every time so let's say we

217
00:10:08,530 --> 00:10:14,770
did get a dev key or we got a ops or CAC

218
00:10:11,710 --> 00:10:17,710
the pipeline role so we can change

219
00:10:14,770 --> 00:10:19,270
layers so I thought of myself well so

220
00:10:17,710 --> 00:10:21,460
something interesting most layers have a

221
00:10:19,270 --> 00:10:25,780
request library for python pretty common

222
00:10:21,460 --> 00:10:30,250
everyone uses it so how about I just

223
00:10:25,780 --> 00:10:32,380
patch it I took a request library then

224
00:10:30,250 --> 00:10:34,810
override on the request call and made it

225
00:10:32,380 --> 00:10:36,430
dump the credentials every time they

226
00:10:34,810 --> 00:10:38,829
were in all the environmental variables

227
00:10:36,430 --> 00:10:41,020
all the requests the JSON the data

228
00:10:38,830 --> 00:10:43,420
parameters headers and send it to me

229
00:10:41,020 --> 00:10:45,550
every time the interesting thing is it's

230
00:10:43,420 --> 00:10:47,560
versioned so any developer that will

231
00:10:45,550 --> 00:10:51,160
come in he will always pick the latest

232
00:10:47,560 --> 00:10:53,069
version it's very hard to find it unless

233
00:10:51,160 --> 00:10:54,600
you there's

234
00:10:53,070 --> 00:10:56,490
need to be very good communication to

235
00:10:54,600 --> 00:10:59,990
actually discover this because any

236
00:10:56,490 --> 00:11:02,370
developer just okay requests layer

237
00:10:59,990 --> 00:11:03,899
version six our ice latest version

238
00:11:02,370 --> 00:11:07,250
probably someone like upgrade the

239
00:11:03,899 --> 00:11:11,399
version it's pre pretty hard to find it

240
00:11:07,250 --> 00:11:12,959
so we'll dump the data will have a small

241
00:11:11,399 --> 00:11:15,540
listener that will listen for that

242
00:11:12,959 --> 00:11:17,699
request on our server print it out

243
00:11:15,540 --> 00:11:20,790
nicely and this is what the function

244
00:11:17,699 --> 00:11:22,649
looks like you import the layer you just

245
00:11:20,790 --> 00:11:25,800
import requests and every request you

246
00:11:22,649 --> 00:11:28,139
will make will get some interesting keys

247
00:11:25,800 --> 00:11:30,449
you can this can lead to perfect

248
00:11:28,139 --> 00:11:31,649
installation if different function some

249
00:11:30,449 --> 00:11:33,689
creates a new function with other

250
00:11:31,649 --> 00:11:35,459
privileges and uses that layer will get

251
00:11:33,690 --> 00:11:38,190
a new set of credential with better

252
00:11:35,459 --> 00:11:39,779
privileges or other privileges so let's

253
00:11:38,190 --> 00:11:43,160
see them of this here we're running our

254
00:11:39,779 --> 00:11:45,839
little listener and we're gonna curl

255
00:11:43,160 --> 00:11:48,899
you'll see it again that thing is hiding

256
00:11:45,839 --> 00:11:53,730
in which is aren't role our server let's

257
00:11:48,899 --> 00:11:57,930
function you see the access GID secret

258
00:11:53,730 --> 00:11:59,850
key this is one more time so even if

259
00:11:57,930 --> 00:12:02,969
these they expire about every fifteen

260
00:11:59,850 --> 00:12:04,769
minutes but even if it they expire every

261
00:12:02,970 --> 00:12:09,990
time I'll get called will get a fresh

262
00:12:04,769 --> 00:12:11,339
one so take this very seriously there's

263
00:12:09,990 --> 00:12:14,190
a bunch of things that can go wrong

264
00:12:11,339 --> 00:12:16,230
especially when it gives you very easy

265
00:12:14,190 --> 00:12:18,240
configuration very easy way to do things

266
00:12:16,230 --> 00:12:20,790
and developers love it develops people

267
00:12:18,240 --> 00:12:23,670
love it but it opens up a lot of holes

268
00:12:20,790 --> 00:12:25,889
so I'm gonna pass it to know and he will

269
00:12:23,670 --> 00:12:27,719
talk to you about what we do when we're

270
00:12:25,889 --> 00:12:30,779
using an internal network and how we do

271
00:12:27,720 --> 00:12:34,139
that so thank you can everyone hear me

272
00:12:30,779 --> 00:12:35,189
fun wonderful so you know effectively

273
00:12:34,139 --> 00:12:38,189
we're just going to do a quick rundown

274
00:12:35,190 --> 00:12:41,010
of Active Directory it's used to manage

275
00:12:38,189 --> 00:12:45,380
computers and you know your traditional

276
00:12:41,010 --> 00:12:47,819
Windows environment you know there's you

277
00:12:45,380 --> 00:12:49,439
could configure Active Directory with

278
00:12:47,819 --> 00:12:52,410
different protocols and l'adapt as a

279
00:12:49,439 --> 00:12:57,180
primary one so you know for this attack

280
00:12:52,410 --> 00:12:59,040
scenario we didn't want to you know we

281
00:12:57,180 --> 00:13:00,959
thought it was too cheap or too easy to

282
00:12:59,040 --> 00:13:03,540
say oh you know we popped the server

283
00:13:00,959 --> 00:13:04,680
with a vulnerable version of RDP on the

284
00:13:03,540 --> 00:13:06,269
outside we

285
00:13:04,680 --> 00:13:08,339
you know if you if you have a vulnerable

286
00:13:06,269 --> 00:13:11,939
version of RDP or any other service

287
00:13:08,339 --> 00:13:14,339
facing you know external you got bigger

288
00:13:11,939 --> 00:13:17,430
problems on your hands so you know our

289
00:13:14,339 --> 00:13:19,680
attack scenario and this on this actual

290
00:13:17,430 --> 00:13:23,099
test was going after a TFS

291
00:13:19,680 --> 00:13:24,388
so a TFS basically and I'm really

292
00:13:23,100 --> 00:13:27,749
dumbing it down but making it really

293
00:13:24,389 --> 00:13:31,649
super simple it allows you to have the

294
00:13:27,749 --> 00:13:34,800
ability for an organization to have

295
00:13:31,649 --> 00:13:36,360
their you know let's say you have a

296
00:13:34,800 --> 00:13:40,800
SharePoint instance or an exchange

297
00:13:36,360 --> 00:13:44,519
exchange instance facing outside you can

298
00:13:40,800 --> 00:13:47,368
now authenticate to AD on the inside

299
00:13:44,519 --> 00:13:48,929
without ever exposing your you know

300
00:13:47,369 --> 00:13:51,420
let's say your domain controller or

301
00:13:48,929 --> 00:13:55,290
anything else so it's using traditional

302
00:13:51,420 --> 00:13:57,569
environments for single sign-on and you

303
00:13:55,290 --> 00:13:59,699
know pretty much you you see it in a lot

304
00:13:57,569 --> 00:14:01,589
of organizations so the vulnerability

305
00:13:59,699 --> 00:14:04,579
that we're using in this event to

306
00:14:01,589 --> 00:14:09,120
actually pivot to the internal network

307
00:14:04,579 --> 00:14:11,969
relies EFT on ad FS which was detected

308
00:14:09,120 --> 00:14:16,889
by it was an owner ability identified by

309
00:14:11,970 --> 00:14:19,649
preempt which basically it it allows an

310
00:14:16,889 --> 00:14:23,009
organization or an attacker to attack an

311
00:14:19,649 --> 00:14:27,269
organization by going after ad FS

312
00:14:23,009 --> 00:14:29,370
because it doesn't have you know extra

313
00:14:27,269 --> 00:14:34,439
extra net lockout policy does not apply

314
00:14:29,370 --> 00:14:37,610
to the the organization so effectively I

315
00:14:34,439 --> 00:14:40,110
could sit here in as an attacker

316
00:14:37,610 --> 00:14:43,980
continue to run you know dictionary

317
00:14:40,110 --> 00:14:46,889
attacks against your organization and it

318
00:14:43,980 --> 00:14:48,509
doesn't lock doesn't walk out it doesn't

319
00:14:46,889 --> 00:14:51,899
you know it doesn't lock an organization

320
00:14:48,509 --> 00:14:54,990
out so you know I'm sitting here just

321
00:14:51,899 --> 00:14:58,160
either going after you know every single

322
00:14:54,990 --> 00:15:00,990
account and so I had a right password or

323
00:14:58,160 --> 00:15:03,209
the mitigation is actually just going to

324
00:15:00,990 --> 00:15:04,589
lock everyone out so you're you're

325
00:15:03,209 --> 00:15:05,099
damned if you do and you're damned if

326
00:15:04,589 --> 00:15:08,819
you don't

327
00:15:05,100 --> 00:15:12,149
and this is a legitimate concern so you

328
00:15:08,819 --> 00:15:14,639
know in this attack scenario we're just

329
00:15:12,149 --> 00:15:17,790
basically guessing credentials until we

330
00:15:14,639 --> 00:15:18,360
hit one that's correct and you know we

331
00:15:17,790 --> 00:15:21,060
now have the

332
00:15:18,360 --> 00:15:25,190
ability to pivot and you know obviously

333
00:15:21,060 --> 00:15:42,859
your traditional pivoting methods would

334
00:15:25,190 --> 00:15:45,600
include you know I guess the set of

335
00:15:42,860 --> 00:15:47,660
credentials that's correct now let's say

336
00:15:45,600 --> 00:15:52,019
I've done my due diligence and I've done

337
00:15:47,660 --> 00:15:54,930
some recon I've got your VPN and I now

338
00:15:52,019 --> 00:15:57,240
log in via TN you can also use leverage

339
00:15:54,930 --> 00:15:59,729
tools like ruler create malicious

340
00:15:57,240 --> 00:16:02,370
outlook rules to you know basically pop

341
00:15:59,730 --> 00:16:05,010
a shell on a system get a reverse shell

342
00:16:02,370 --> 00:16:07,380
flying back to you so you know you can

343
00:16:05,010 --> 00:16:08,880
also attack Citrix you know the world is

344
00:16:07,380 --> 00:16:11,339
yours really once you have a pair of

345
00:16:08,880 --> 00:16:13,350
working credentials you could do pretty

346
00:16:11,339 --> 00:16:16,170
much what you want based on the you know

347
00:16:13,350 --> 00:16:18,209
privilege rules of that user so it makes

348
00:16:16,170 --> 00:16:20,089
it fairly easy to you know take

349
00:16:18,209 --> 00:16:22,489
advantage of so this vulnerability is

350
00:16:20,089 --> 00:16:25,620
something that still exists to this day

351
00:16:22,490 --> 00:16:27,420
and you know once we actually pivot to

352
00:16:25,620 --> 00:16:30,899
the internal that's where the fun begins

353
00:16:27,420 --> 00:16:32,880
so yeah so we haven't seen like any

354
00:16:30,899 --> 00:16:35,070
mitigations in the wild for it but

355
00:16:32,880 --> 00:16:37,290
basically if you're using any reverse

356
00:16:35,070 --> 00:16:39,660
proxy you can just write limit that

357
00:16:37,290 --> 00:16:42,240
endpoint no idea what people don't do it

358
00:16:39,660 --> 00:16:43,769
but we see in the wild like an mow can

359
00:16:42,240 --> 00:16:46,260
tell you that he does it in his pen

360
00:16:43,769 --> 00:16:49,769
tests and he always succeeds with it so

361
00:16:46,260 --> 00:16:51,260
if you do use it just like four lines of

362
00:16:49,769 --> 00:17:02,339
code and you'll be safe from that

363
00:16:51,260 --> 00:17:03,870
absolutely so Moe bitten feels no pain

364
00:17:02,339 --> 00:17:06,140
after I've locked them he found

365
00:17:03,870 --> 00:17:09,359
different ways to go to bite path that

366
00:17:06,140 --> 00:17:11,280
so this is the slides discussing what we

367
00:17:09,359 --> 00:17:15,059
did you know the attack vectors that we

368
00:17:11,280 --> 00:17:16,799
can leverage in this scenario and we're

369
00:17:15,059 --> 00:17:18,030
happy to share you know additional

370
00:17:16,799 --> 00:17:22,949
details with anyone that's interested

371
00:17:18,030 --> 00:17:25,740
along with tools and methodology but you

372
00:17:22,949 --> 00:17:29,890
know once we're on the inside what are

373
00:17:25,740 --> 00:17:33,010
we doing so I I don't like to

374
00:17:29,890 --> 00:17:36,610
be very noisy we're gonna basically talk

375
00:17:33,010 --> 00:17:38,800
about you know your vulnerability

376
00:17:36,610 --> 00:17:41,679
scanners lied to you well I get whatever

377
00:17:38,800 --> 00:17:44,290
whatever it's rating your vulnerability

378
00:17:41,680 --> 00:17:46,720
is like s and be signing disabled things

379
00:17:44,290 --> 00:17:49,420
like that a lot of organizations go

380
00:17:46,720 --> 00:17:52,420
after you know your they patch their you

381
00:17:49,420 --> 00:17:54,670
know ms seventeen you know they they

382
00:17:52,420 --> 00:17:56,320
patch the critical findings and they

383
00:17:54,670 --> 00:17:59,230
think okay I'm relatively safe I don't

384
00:17:56,320 --> 00:18:01,480
have to worry about you know simple

385
00:17:59,230 --> 00:18:05,500
things like null sessions and anima

386
00:18:01,480 --> 00:18:07,510
shares you know or in this scenario that

387
00:18:05,500 --> 00:18:09,490
we're going to demonstrate SMB signing

388
00:18:07,510 --> 00:18:11,470
being disabled but those are all very

389
00:18:09,490 --> 00:18:14,950
critical scenarios especially when you

390
00:18:11,470 --> 00:18:17,650
start stringing these small like medium

391
00:18:14,950 --> 00:18:19,120
or low vulnerabilities together you're

392
00:18:17,650 --> 00:18:22,630
actually gonna have a really deadly

393
00:18:19,120 --> 00:18:25,389
attack chain so you know I'm going to

394
00:18:22,630 --> 00:18:29,370
discuss some undetectable payloads

395
00:18:25,390 --> 00:18:33,340
using.net leveraging c2s leveraging c3s

396
00:18:29,370 --> 00:18:36,550
and even bypassing ntlm relay

397
00:18:33,340 --> 00:18:37,990
medications that are currently people

398
00:18:36,550 --> 00:18:41,020
think that enabling us and be signing is

399
00:18:37,990 --> 00:18:42,670
gonna help you know it's not enabling

400
00:18:41,020 --> 00:18:46,060
EPA's gonna help you know there's it's

401
00:18:42,670 --> 00:18:48,360
not there those are broken so we're

402
00:18:46,060 --> 00:18:51,340
going to demonstrate ways of actually

403
00:18:48,360 --> 00:18:53,169
breaking into systems even though they

404
00:18:51,340 --> 00:18:58,240
have you know the recommended mitigation

405
00:18:53,170 --> 00:19:00,790
is in place so you hop in on the

406
00:18:58,240 --> 00:19:03,730
internal now you could you've run a

407
00:19:00,790 --> 00:19:06,010
responder and analyzed mode that's a

408
00:19:03,730 --> 00:19:07,510
great way to basically see what's

409
00:19:06,010 --> 00:19:09,220
happening on the network and you're not

410
00:19:07,510 --> 00:19:11,200
when you're running responder and

411
00:19:09,220 --> 00:19:14,550
analyze mode you're not responding back

412
00:19:11,200 --> 00:19:18,340
you're just looking at what's happening

413
00:19:14,550 --> 00:19:21,610
so a very simple scan I like to run when

414
00:19:18,340 --> 00:19:24,790
I hop on if I'm gonna scan one-liner

415
00:19:21,610 --> 00:19:27,520
very simple I'm looking for null

416
00:19:24,790 --> 00:19:30,760
sessions SMB signing disabled anonymous

417
00:19:27,520 --> 00:19:33,820
shares and looking for servers that have

418
00:19:30,760 --> 00:19:36,940
that are you know active domain

419
00:19:33,820 --> 00:19:40,330
controllers right you run this on a very

420
00:19:36,940 --> 00:19:43,010
slow interval not a lot of traffic but

421
00:19:40,330 --> 00:19:45,168
gets you a lot of good low-hanging fruit

422
00:19:43,010 --> 00:19:47,570
and typically on organization you'll

423
00:19:45,169 --> 00:19:49,520
find a null session box here and there

424
00:19:47,570 --> 00:19:51,980
why why is that important well I can

425
00:19:49,520 --> 00:19:53,629
enumerate I'm Active Directory with null

426
00:19:51,980 --> 00:19:56,330
sessions I can find out all your users

427
00:19:53,630 --> 00:19:58,340
then I can guess you know look at your

428
00:19:56,330 --> 00:20:00,350
lockout policies do some simple password

429
00:19:58,340 --> 00:20:02,720
guesses right stay below the hole below

430
00:20:00,350 --> 00:20:04,699
that threshold now this is you know null

431
00:20:02,720 --> 00:20:06,440
sessions is an info finding it's not

432
00:20:04,700 --> 00:20:10,789
even anything that's really paid

433
00:20:06,440 --> 00:20:13,750
attention to SMB signing disabled you

434
00:20:10,789 --> 00:20:17,240
know if exploited correctly you have

435
00:20:13,750 --> 00:20:20,929
system privileges and you combine you

436
00:20:17,240 --> 00:20:23,450
know something like responder or MIT m6d

437
00:20:20,929 --> 00:20:24,860
ns6 poisoning you're gonna have mass

438
00:20:23,450 --> 00:20:26,809
destruction you're just gonna start

439
00:20:24,860 --> 00:20:28,760
popping shells everywhere like left and

440
00:20:26,809 --> 00:20:30,980
right you're gonna be fine you know all

441
00:20:28,760 --> 00:20:34,520
over the place anonymous shares I can

442
00:20:30,980 --> 00:20:37,130
upload malicious SCF files have systems

443
00:20:34,520 --> 00:20:40,158
call back to me and now I have your net

444
00:20:37,130 --> 00:20:42,799
ntlm hashes and then I can use that to

445
00:20:40,159 --> 00:20:44,440
crack or if I want it to be really nasty

446
00:20:42,799 --> 00:20:48,500
with it I could relay that back

447
00:20:44,440 --> 00:20:50,929
authenticate to other systems SMB RCS

448
00:20:48,500 --> 00:20:53,870
those are pretty self-explanatory

449
00:20:50,929 --> 00:20:56,659
you know if I hop onto a pen test and i

450
00:20:53,870 --> 00:20:58,789
have SMB RCS my job is what am i doing

451
00:20:56,659 --> 00:20:59,780
for the rest of the week you know the

452
00:20:58,789 --> 00:21:04,010
kill chain is gonna be pretty

453
00:20:59,780 --> 00:21:05,690
straightforward and easy so you know

454
00:21:04,010 --> 00:21:07,640
what we typically this is a quick

455
00:21:05,690 --> 00:21:09,230
breakdown of what happens when you're

456
00:21:07,640 --> 00:21:11,360
doing a relay attack

457
00:21:09,230 --> 00:21:14,510
you know I've discussed this a little

458
00:21:11,360 --> 00:21:17,510
bit you know if there's any questions

459
00:21:14,510 --> 00:21:20,600
feel free to ask me you know after the

460
00:21:17,510 --> 00:21:22,158
talk or during the talk always feel free

461
00:21:20,600 --> 00:21:24,860
to raise the hand as well you know I

462
00:21:22,159 --> 00:21:28,460
like to get the crowd to interact with

463
00:21:24,860 --> 00:21:32,689
me as well so effectively what happens

464
00:21:28,460 --> 00:21:36,440
with a relay attack well you end up with

465
00:21:32,690 --> 00:21:39,380
system privileges I don't need to pop 30

466
00:21:36,440 --> 00:21:41,030
boxes if I pop one in an Active

467
00:21:39,380 --> 00:21:43,429
Directory environment that's typically

468
00:21:41,030 --> 00:21:45,770
all you need the rest is just a domino

469
00:21:43,429 --> 00:21:48,020
effect we're not going to really dive

470
00:21:45,770 --> 00:21:49,789
into the kill chain a post exploitation

471
00:21:48,020 --> 00:21:51,080
process this is more about getting the

472
00:21:49,789 --> 00:21:52,730
initial foothold

473
00:21:51,080 --> 00:21:55,879
but if you do have any questions about

474
00:21:52,730 --> 00:21:57,020
what to do post exploitation feel free

475
00:21:55,880 --> 00:22:02,030
to ask

476
00:21:57,020 --> 00:22:03,530
so currently there's two UH two issues

477
00:22:02,030 --> 00:22:05,059
right now that we have with the

478
00:22:03,530 --> 00:22:08,030
mitigations at our place that are in

479
00:22:05,059 --> 00:22:10,280
place for SMB signing the the really

480
00:22:08,030 --> 00:22:12,549
really intelligent people ad preempt

481
00:22:10,280 --> 00:22:16,520
identified a couple vulnerabilities

482
00:22:12,549 --> 00:22:19,760
where effectively the mitigations that

483
00:22:16,520 --> 00:22:23,179
are in place for it with epa enabling us

484
00:22:19,760 --> 00:22:25,309
and be signing they're all broken right

485
00:22:23,179 --> 00:22:28,190
now they're broken and you could

486
00:22:25,309 --> 00:22:31,399
actually leverage ntlm real ax which is

487
00:22:28,190 --> 00:22:33,919
part of in packet to actually relay

488
00:22:31,400 --> 00:22:35,780
authentication attempts on the fly so in

489
00:22:33,919 --> 00:22:38,480
this scenario you're either using

490
00:22:35,780 --> 00:22:40,639
responder or you're using MIT m6 or

491
00:22:38,480 --> 00:22:43,700
whatever man and that will attack so

492
00:22:40,640 --> 00:22:46,700
that you prefer to relay authentication

493
00:22:43,700 --> 00:22:48,200
attempts to different systems now in a

494
00:22:46,700 --> 00:22:49,520
traditional relay attack you're going

495
00:22:48,200 --> 00:22:51,980
after systems with us and be signing

496
00:22:49,520 --> 00:22:53,960
disabled now it doesn't matter if SMB

497
00:22:51,980 --> 00:22:56,840
signing is enabled or not you're still

498
00:22:53,960 --> 00:22:59,299
going to pop shells on them so this was

499
00:22:56,840 --> 00:23:02,110
revealed at Def Con and blackhat this

500
00:22:59,299 --> 00:23:07,490
year they called it to drop the mic

501
00:23:02,110 --> 00:23:09,229
report exploit now this has now been

502
00:23:07,490 --> 00:23:10,400
also the mitigations that Microsoft

503
00:23:09,230 --> 00:23:11,690
released for this where the

504
00:23:10,400 --> 00:23:15,260
implementation was incorrect

505
00:23:11,690 --> 00:23:18,890
so there's drop the mic part two which

506
00:23:15,260 --> 00:23:20,660
is just release about a week ago and so

507
00:23:18,890 --> 00:23:23,059
effectively what happens is all the

508
00:23:20,660 --> 00:23:27,280
mitigations that Microsoft has release

509
00:23:23,059 --> 00:23:30,889
as a result of the research done by Fram

510
00:23:27,280 --> 00:23:33,020
they're still invalid so right now you

511
00:23:30,890 --> 00:23:35,240
could sit there and hop on an internal

512
00:23:33,020 --> 00:23:38,120
network and relay authentication

513
00:23:35,240 --> 00:23:41,059
attempts and just pop boxes every time a

514
00:23:38,120 --> 00:23:42,979
system a person with administrative

515
00:23:41,059 --> 00:23:45,530
privileges authenticates or elevated

516
00:23:42,980 --> 00:23:48,140
privileges authenticates so that's it's

517
00:23:45,530 --> 00:23:52,370
a it's very it's devastating status

518
00:23:48,140 --> 00:23:55,190
catastrophic really because you know if

519
00:23:52,370 --> 00:23:58,129
you're looking at your report from your

520
00:23:55,190 --> 00:23:59,809
blue team an order an organization isn't

521
00:23:58,130 --> 00:24:01,429
too concerned about you know ask them to

522
00:23:59,809 --> 00:24:02,480
sign and disable them you still see it

523
00:24:01,429 --> 00:24:03,940
now you know even though this is

524
00:24:02,480 --> 00:24:06,280
something that has been around for years

525
00:24:03,940 --> 00:24:09,020
because there's a performance that

526
00:24:06,280 --> 00:24:09,920
typically they don't enable us any

527
00:24:09,020 --> 00:24:11,690
signing

528
00:24:09,920 --> 00:24:15,200
but even now if it's enabled you're

529
00:24:11,690 --> 00:24:19,760
still gonna get owned so lots of lots of

530
00:24:15,200 --> 00:24:22,660
stuff going on here so you pop some

531
00:24:19,760 --> 00:24:27,290
systems on you know you could use a

532
00:24:22,660 --> 00:24:30,170
darky John he's a researcher at Fox IT

533
00:24:27,290 --> 00:24:33,409
the prefix change attack very very

534
00:24:30,170 --> 00:24:36,710
useful attack vector to go from you know

535
00:24:33,410 --> 00:24:39,380
popping a exchange server and getting

536
00:24:36,710 --> 00:24:44,380
basically DEA from there using DC sync

537
00:24:39,380 --> 00:24:48,080
dumping you know domain controller so

538
00:24:44,380 --> 00:24:50,510
it's quick rundown basically what you're

539
00:24:48,080 --> 00:24:53,510
doing here within this also the printer

540
00:24:50,510 --> 00:24:57,010
bug vulnerability that he identified in

541
00:24:53,510 --> 00:25:01,340
the past you couldn't relay

542
00:24:57,010 --> 00:25:03,590
authentication attempts to LDAP now due

543
00:25:01,340 --> 00:25:06,560
to the research that was released by the

544
00:25:03,590 --> 00:25:10,399
preamp team I can take authentication

545
00:25:06,560 --> 00:25:12,560
attempts from SMB and hit them hit an

546
00:25:10,400 --> 00:25:16,160
LDAP hit LDAP so what does that mean I'm

547
00:25:12,560 --> 00:25:19,070
now able to pop your domain controller

548
00:25:16,160 --> 00:25:22,940
that's a big problem and this is because

549
00:25:19,070 --> 00:25:26,720
of the the message integrity controls

550
00:25:22,940 --> 00:25:30,110
were not implemented correctly the fix

551
00:25:26,720 --> 00:25:33,260
by Microsoft so you are now able to pop

552
00:25:30,110 --> 00:25:34,850
a domain controller just by relaying

553
00:25:33,260 --> 00:25:36,980
authentication attempts and you're just

554
00:25:34,850 --> 00:25:39,500
waiting until privileged user

555
00:25:36,980 --> 00:25:41,900
authenticates and it's all over now how

556
00:25:39,500 --> 00:25:45,320
many organizations run their scan tools

557
00:25:41,900 --> 00:25:47,690
with elevated privileges you know how

558
00:25:45,320 --> 00:25:50,419
many organizations run you know their

559
00:25:47,690 --> 00:25:54,470
vulnerability scanner with domain admin

560
00:25:50,420 --> 00:25:56,270
privileges it's just basically you're

561
00:25:54,470 --> 00:26:02,600
owning systems left and right it's

562
00:25:56,270 --> 00:26:06,590
extremely you know dangerous so relaying

563
00:26:02,600 --> 00:26:09,020
SMB to LDAP we've got two scenarios you

564
00:26:06,590 --> 00:26:11,209
can connect V SMB to an exchange server

565
00:26:09,020 --> 00:26:11,990
and then you trigger the spool service

566
00:26:11,210 --> 00:26:16,010
bug

567
00:26:11,990 --> 00:26:18,350
this was also a vulnerability dubbed as

568
00:26:16,010 --> 00:26:21,590
the probe exchange attack very very

569
00:26:18,350 --> 00:26:23,689
useful the other the other alternative

570
00:26:21,590 --> 00:26:26,658
is a getting the exchange server to

571
00:26:23,690 --> 00:26:31,039
kate's you and relaying the credentials

572
00:26:26,659 --> 00:26:32,570
back to a domain controller so two

573
00:26:31,039 --> 00:26:35,330
different attack scenarios highly

574
00:26:32,570 --> 00:26:40,428
effective ends up in you know mass

575
00:26:35,330 --> 00:26:44,899
destruction so this is quick rundown

576
00:26:40,429 --> 00:26:48,080
breakdown and what I discussed so this

577
00:26:44,899 --> 00:26:51,439
is a one of the you know attack centers

578
00:26:48,080 --> 00:26:53,980
I briefly discussed I'm a big fan of

579
00:26:51,440 --> 00:26:57,830
silent Trinity has anyone ever used it

580
00:26:53,980 --> 00:27:00,350
so bite bleeder highly recommend

581
00:26:57,830 --> 00:27:02,779
following him he's a you know he's the

582
00:27:00,350 --> 00:27:05,418
guy behind crack map exact one of my

583
00:27:02,779 --> 00:27:07,759
favorite post exploitation tools to use

584
00:27:05,419 --> 00:27:10,399
on a pen test site Renan seesaw in

585
00:27:07,759 --> 00:27:12,710
Trinity is a situ that basically lets

586
00:27:10,399 --> 00:27:18,110
you you know use different types of

587
00:27:12,710 --> 00:27:21,559
stagers it's asynchronous and it could

588
00:27:18,110 --> 00:27:22,789
be a lot of fun because one of my you

589
00:27:21,559 --> 00:27:24,440
know in the past

590
00:27:22,789 --> 00:27:27,408
PowerShell was like the big thing right

591
00:27:24,440 --> 00:27:32,120
everyone used PowerShell Empire had at a

592
00:27:27,409 --> 00:27:35,389
day it's slowly dying because of AMC so

593
00:27:32,120 --> 00:27:39,799
now you know the new power shell is

594
00:27:35,389 --> 00:27:41,320
using.net using.net payloads is what I'm

595
00:27:39,799 --> 00:27:44,600
like it's almost too easy

596
00:27:41,320 --> 00:27:47,149
you know I go against any type of

597
00:27:44,600 --> 00:27:48,678
endpoint product you can think of you

598
00:27:47,149 --> 00:27:52,100
could throw different types of powerful

599
00:27:48,679 --> 00:27:55,009
payloads and you know you could have to

600
00:27:52,100 --> 00:27:56,689
come up with like a AMC bypass but you

601
00:27:55,009 --> 00:27:59,350
know PowerShell is being you know

602
00:27:56,690 --> 00:28:02,570
closely monitored this day in a like now

603
00:27:59,350 --> 00:28:04,908
it's so much easier just to use dotnet

604
00:28:02,570 --> 00:28:07,250
you know very few products were paying

605
00:28:04,909 --> 00:28:10,009
attention to the dotnet payloads and you

606
00:28:07,250 --> 00:28:14,360
know and my attack scenario typically

607
00:28:10,009 --> 00:28:17,629
what I do is I do a relay I you know

608
00:28:14,360 --> 00:28:20,299
host a you know basically just a quick

609
00:28:17,629 --> 00:28:23,209
stager on on an SMB server that's

610
00:28:20,299 --> 00:28:25,070
running on my box and when someone with

611
00:28:23,210 --> 00:28:26,480
elevated privileges attempts to

612
00:28:25,070 --> 00:28:28,730
authenticate to their system

613
00:28:26,480 --> 00:28:33,169
I just basically have instruct them to

614
00:28:28,730 --> 00:28:35,869
pool my stage or off my system off of

615
00:28:33,169 --> 00:28:36,880
SMB with anonymous shares so anyone can

616
00:28:35,869 --> 00:28:39,040
grab it

617
00:28:36,880 --> 00:28:42,190
grab my stager they compile it with

618
00:28:39,040 --> 00:28:45,040
msbuild there's no binary being dropped

619
00:28:42,190 --> 00:28:48,370
and it's executed with system privileges

620
00:28:45,040 --> 00:28:51,760
so the shell that I get back is running

621
00:28:48,370 --> 00:28:54,070
a system there's no binary you know and

622
00:28:51,760 --> 00:28:57,430
it's all done and you know in real time

623
00:28:54,070 --> 00:28:59,889
so I'm you know I I run this attack

624
00:28:57,430 --> 00:29:01,960
within 30 seconds I've got 6070 shells

625
00:28:59,890 --> 00:29:05,110
flying back at me in an organization

626
00:29:01,960 --> 00:29:09,060
it's it's it's almost too easy so it's

627
00:29:05,110 --> 00:29:19,479
it's you know it could be a lot of fun

628
00:29:09,060 --> 00:29:21,429
so so it's a great time you know that's

629
00:29:19,480 --> 00:29:26,050
how you feel after you pop 60 70 shell

630
00:29:21,430 --> 00:29:33,790
yeah it feels like that he does that at

631
00:29:26,050 --> 00:29:36,940
home I do so by Twitter on Twitter he's

632
00:29:33,790 --> 00:29:38,950
a great guy to follow lots of great

633
00:29:36,940 --> 00:29:41,320
tools there's a quick setup of what my

634
00:29:38,950 --> 00:29:43,720
stager looks like here my listener looks

635
00:29:41,320 --> 00:29:46,570
like so you know basically you're

636
00:29:43,720 --> 00:29:51,040
setting your stage with configuration

637
00:29:46,570 --> 00:29:52,480
here I'm using an MS build payload so

638
00:29:51,040 --> 00:29:56,350
it's basically me running

639
00:29:52,480 --> 00:29:57,970
it's a c-sharp in inline tasks which is

640
00:29:56,350 --> 00:30:01,600
actually compiled and executed on the

641
00:29:57,970 --> 00:30:06,640
fly and this is like a quick screen shot

642
00:30:01,600 --> 00:30:10,449
of me using you know ntlm relay X which

643
00:30:06,640 --> 00:30:12,660
is part of in packet and along with you

644
00:30:10,450 --> 00:30:17,340
know basically a quick instruction here

645
00:30:12,660 --> 00:30:20,620
saying you know right over here

646
00:30:17,340 --> 00:30:24,129
basically executing command over here

647
00:30:20,620 --> 00:30:25,469
that all right here's I want you to

648
00:30:24,130 --> 00:30:29,590
record all the relayed hashes here

649
00:30:25,470 --> 00:30:31,060
target these systems and disable my SMD

650
00:30:29,590 --> 00:30:34,570
server and here's the command that I

651
00:30:31,060 --> 00:30:36,460
want you to execute so they're running

652
00:30:34,570 --> 00:30:40,330
you know over here we're running msbuild

653
00:30:36,460 --> 00:30:42,910
and msbuild is connecting back over SMB

654
00:30:40,330 --> 00:30:47,710
to collect my to come to actually run my

655
00:30:42,910 --> 00:30:50,540
stager right so effectively over here

656
00:30:47,710 --> 00:30:53,000
you can see you know screenshots of me

657
00:30:50,540 --> 00:30:58,610
any type of traffic that's that's you

658
00:30:53,000 --> 00:31:01,010
know over here is going to be relayed to

659
00:30:58,610 --> 00:31:04,040
actually download my malicious you know

660
00:31:01,010 --> 00:31:07,820
stager so and the rest kind of is

661
00:31:04,040 --> 00:31:10,460
happens automatically so what's what's

662
00:31:07,820 --> 00:31:13,189
happening in that process well even if

663
00:31:10,460 --> 00:31:17,150
let's say for whatever reason they don't

664
00:31:13,190 --> 00:31:19,700
have you know some sort of product it

665
00:31:17,150 --> 00:31:23,390
detects my payload which hasn't happened

666
00:31:19,700 --> 00:31:25,070
yet but even if it you know even if that

667
00:31:23,390 --> 00:31:27,470
happens they're still connecting back to

668
00:31:25,070 --> 00:31:30,590
me so I'm getting there I'm providing

669
00:31:27,470 --> 00:31:34,460
them a known challenge right here and

670
00:31:30,590 --> 00:31:36,530
I'm collecting their actual net ntlm ash

671
00:31:34,460 --> 00:31:38,570
so I can still crock it I have the

672
00:31:36,530 --> 00:31:40,850
challenge I can still I have their net

673
00:31:38,570 --> 00:31:43,668
ntlm hash I can run a dictionary attack

674
00:31:40,850 --> 00:31:46,100
so one way another I'm still getting

675
00:31:43,669 --> 00:31:48,169
something even if I don't get an actual

676
00:31:46,100 --> 00:31:54,439
shell at the very least I'm getting your

677
00:31:48,169 --> 00:31:57,230
hash so now this is what happens when I

678
00:31:54,440 --> 00:31:59,419
run my little attack scenario you can

679
00:31:57,230 --> 00:32:02,419
see all these different systems you know

680
00:31:59,419 --> 00:32:04,730
grabbing my stager and then over here

681
00:32:02,419 --> 00:32:08,350
you're seeing all the systems here with

682
00:32:04,730 --> 00:32:10,309
system privileges he you know and

683
00:32:08,350 --> 00:32:13,040
basically I just got a whole bunch of

684
00:32:10,309 --> 00:32:16,370
shells just flying across from different

685
00:32:13,040 --> 00:32:18,049
subnets everywhere so it's it's it's a

686
00:32:16,370 --> 00:32:21,830
really highly effective attack vector

687
00:32:18,049 --> 00:32:25,250
and you know we will see Reed you don't

688
00:32:21,830 --> 00:32:30,379
really need this many shells but it

689
00:32:25,250 --> 00:32:33,140
doesn't hurt and yeah that's what

690
00:32:30,380 --> 00:32:35,059
happens when I get you know these 70

691
00:32:33,140 --> 00:32:35,660
shells flying in in you know in less

692
00:32:35,059 --> 00:32:37,940
than a minute

693
00:32:35,660 --> 00:32:38,960
so yeah cooking fish naked absolutely

694
00:32:37,940 --> 00:32:45,730
absolutely

695
00:32:38,960 --> 00:32:48,080
it's not a pen test so so what happens

696
00:32:45,730 --> 00:32:52,700
it was some of the reasons why I really

697
00:32:48,080 --> 00:32:53,659
like sound Trinity and it does support

698
00:32:52,700 --> 00:32:57,429
hsv-2

699
00:32:53,660 --> 00:33:01,040
so a lot of products don't monitor HP -

700
00:32:57,429 --> 00:33:04,220
so your you know you have different

701
00:33:01,040 --> 00:33:06,918
channels that you can actually fire

702
00:33:04,220 --> 00:33:08,840
thing off of over and then you know if

703
00:33:06,919 --> 00:33:12,169
it's something like mini dump which is

704
00:33:08,840 --> 00:33:15,289
amazing let's say Mimi Katz gets picked

705
00:33:12,169 --> 00:33:18,049
up well run Mimi dump like it's mini

706
00:33:15,289 --> 00:33:23,090
dump is amazing you can dump Alsace and

707
00:33:18,049 --> 00:33:25,070
then pull and chunks the dump back over

708
00:33:23,090 --> 00:33:28,158
to your system and then you can look for

709
00:33:25,070 --> 00:33:29,480
their decks credentials so you know

710
00:33:28,159 --> 00:33:33,799
there's different ways of doing it as

711
00:33:29,480 --> 00:33:35,659
well you can you know load your own you

712
00:33:33,799 --> 00:33:38,059
know if you wanted to be old-school grab

713
00:33:35,659 --> 00:33:42,320
you know push use proc dump to dump

714
00:33:38,059 --> 00:33:44,840
Alsace there's a hundred and thousand

715
00:33:42,320 --> 00:33:47,418
ways you could do this and now the

716
00:33:44,840 --> 00:33:50,510
newest version does support Donuts oh

717
00:33:47,419 --> 00:33:54,220
that's awful another level fun that you

718
00:33:50,510 --> 00:33:57,500
can you know leverage if I'm not using

719
00:33:54,220 --> 00:33:59,240
if I don't use this if I don't you saw

720
00:33:57,500 --> 00:34:03,830
at trainee I highly recommend using

721
00:33:59,240 --> 00:34:06,620
Merlin as well it's a great c2 that is I

722
00:34:03,830 --> 00:34:10,609
believe it's written go so you have the

723
00:34:06,620 --> 00:34:16,009
cross-platform awesomeness and also HTTP

724
00:34:10,609 --> 00:34:18,918
to is available so you can still you

725
00:34:16,010 --> 00:34:21,409
know grab everything have your agent

726
00:34:18,918 --> 00:34:24,020
come back to your c2 and most products

727
00:34:21,409 --> 00:34:27,440
are completely oblivious to that post

728
00:34:24,020 --> 00:34:31,159
exploitation I've been using crack map

729
00:34:27,440 --> 00:34:35,060
extreme as of late it's very helpful it

730
00:34:31,159 --> 00:34:38,060
does allow you to run dreamy cats on

731
00:34:35,060 --> 00:34:41,540
2016 and other systems that were you

732
00:34:38,060 --> 00:34:44,980
know supposed to more meaning cats this

733
00:34:41,540 --> 00:34:49,639
is basically done by you know

734
00:34:44,980 --> 00:34:51,500
momentarily disabling defender or tickly

735
00:34:49,639 --> 00:34:53,260
instructing it's a kind of like sleep

736
00:34:51,500 --> 00:34:56,960
for a little bit and then re-enabling it

737
00:34:53,260 --> 00:35:00,020
very useful and effective I've been you

738
00:34:56,960 --> 00:35:03,650
know you could basically deploy me me

739
00:35:00,020 --> 00:35:05,660
cats on a Class C in you know 30 or 40

740
00:35:03,650 --> 00:35:07,849
seconds so you just have clear tax

741
00:35:05,660 --> 00:35:10,640
credits coming back to you a very very

742
00:35:07,849 --> 00:35:14,410
effective post exploitation tool which

743
00:35:10,640 --> 00:35:17,810
is basically a fork of crack map exec so

744
00:35:14,410 --> 00:35:19,460
this is what we're seeing here you

745
00:35:17,810 --> 00:35:23,240
Mimi cats basically coming back running

746
00:35:19,460 --> 00:35:24,680
on 2012 server you know we had a obvious

747
00:35:23,240 --> 00:35:28,189
skate we had to blur this stuff out but

748
00:35:24,680 --> 00:35:32,390
very very useful attack vector post

749
00:35:28,190 --> 00:35:54,770
exploitation so maybe cats is great

750
00:35:32,390 --> 00:35:57,980
again so Moe showed you I showed you the

751
00:35:54,770 --> 00:35:59,990
cloud stuff when we do the simulation

752
00:35:57,980 --> 00:36:01,430
for actually for the slides and looking

753
00:35:59,990 --> 00:36:04,700
for me techniques we start with a cloud

754
00:36:01,430 --> 00:36:07,069
and an ad environment either in a

755
00:36:04,700 --> 00:36:08,480
different cloud or on-premise and then

756
00:36:07,070 --> 00:36:10,310
we connect them and we try to do the

757
00:36:08,480 --> 00:36:16,610
pivot of getting in whether it's

758
00:36:10,310 --> 00:36:18,410
proxying ad FS or using ruler on OWA and

759
00:36:16,610 --> 00:36:19,850
then we thought all right how how do we

760
00:36:18,410 --> 00:36:23,200
protect and mitigate some of these

761
00:36:19,850 --> 00:36:26,390
things so we can't change Microsoft code

762
00:36:23,200 --> 00:36:29,359
so that's that's a bit of a problem we

763
00:36:26,390 --> 00:36:31,790
did show that rate limiting part so

764
00:36:29,360 --> 00:36:33,080
first thing which i think is very

765
00:36:31,790 --> 00:36:36,920
important is having all your

766
00:36:33,080 --> 00:36:39,049
infrastructure as code so don't let

767
00:36:36,920 --> 00:36:41,000
developers go and change manually change

768
00:36:39,050 --> 00:36:43,550
things so this will actually prevent

769
00:36:41,000 --> 00:36:44,930
things like malicious layers because

770
00:36:43,550 --> 00:36:47,600
once your infrastructure is this code

771
00:36:44,930 --> 00:36:49,910
once you do like you can use terraform

772
00:36:47,600 --> 00:36:52,850
or cloud formation I use terraform

773
00:36:49,910 --> 00:36:55,399
because it's basically cloud agnostic

774
00:36:52,850 --> 00:36:58,040
use in all clouds and gives you more

775
00:36:55,400 --> 00:37:00,920
flexibility but sometimes it has new

776
00:36:58,040 --> 00:37:03,860
services in AWS before cloud formation

777
00:37:00,920 --> 00:37:05,960
which is AWS service has it and

778
00:37:03,860 --> 00:37:08,930
basically every time you do a plan or

779
00:37:05,960 --> 00:37:10,940
refresh if it detects something is is

780
00:37:08,930 --> 00:37:13,549
not the same let's say I put a new

781
00:37:10,940 --> 00:37:15,470
version of a layer it will check the

782
00:37:13,550 --> 00:37:17,840
hash of the files if it's not the same

783
00:37:15,470 --> 00:37:20,569
as what was deployed last time it will

784
00:37:17,840 --> 00:37:22,460
tell you that so if you run that on a

785
00:37:20,570 --> 00:37:23,900
daily basis you know an hourly basis it

786
00:37:22,460 --> 00:37:26,600
takes those in a minute you can get a

787
00:37:23,900 --> 00:37:28,550
lot of it will basically block these

788
00:37:26,600 --> 00:37:31,569
things and if you do apply it will

789
00:37:28,550 --> 00:37:31,570
override that layer

790
00:37:34,910 --> 00:37:40,190
second thing is Packer so following up

791
00:37:38,060 --> 00:37:42,920
on terraform which is basically having

792
00:37:40,190 --> 00:37:44,840
your infrastructure is code this is

793
00:37:42,920 --> 00:37:47,360
another product from Hoshi Corp which

794
00:37:44,840 --> 00:37:50,930
built terraform is basically baking your

795
00:37:47,360 --> 00:37:53,300
base machine images whether it's a Mis

796
00:37:50,930 --> 00:37:56,540
for AWS or the equivalents and other

797
00:37:53,300 --> 00:37:59,810
clouds you can use ansible strips to run

798
00:37:56,540 --> 00:38:02,050
OS hardening so it's basically automated

799
00:37:59,810 --> 00:38:04,100
that way you don't really patch machines

800
00:38:02,050 --> 00:38:05,330
because when you start patching machines

801
00:38:04,100 --> 00:38:07,670
you have to you actually have to know

802
00:38:05,330 --> 00:38:09,529
what you patch sometimes patches fail so

803
00:38:07,670 --> 00:38:12,890
building a base image let's say there

804
00:38:09,530 --> 00:38:14,180
was a a new update for for your OS so

805
00:38:12,890 --> 00:38:18,020
you build a new base image with that

806
00:38:14,180 --> 00:38:19,640
update and you basically switch down all

807
00:38:18,020 --> 00:38:21,890
the machines once there's a new image

808
00:38:19,640 --> 00:38:24,049
once they pop up again they will pop up

809
00:38:21,890 --> 00:38:25,670
with the new image automatically so that

810
00:38:24,050 --> 00:38:27,560
way you don't have to follow of what did

811
00:38:25,670 --> 00:38:29,060
you patch or is it patched as long as

812
00:38:27,560 --> 00:38:30,799
you see that your new image is the this

813
00:38:29,060 --> 00:38:34,790
is the base for all your machines you'll

814
00:38:30,800 --> 00:38:36,530
be good a lot of talks actually show

815
00:38:34,790 --> 00:38:40,340
some things about cloud trail

816
00:38:36,530 --> 00:38:42,770
so cloud basically gives you an audit of

817
00:38:40,340 --> 00:38:45,260
all the operations happening inside your

818
00:38:42,770 --> 00:38:47,540
environment and some other talks about

819
00:38:45,260 --> 00:38:51,290
attacking aw yes show how you can tamper

820
00:38:47,540 --> 00:38:53,300
with logs or delete logs tempering is

821
00:38:51,290 --> 00:38:56,480
basically there's an anti temper and

822
00:38:53,300 --> 00:38:58,250
cloud chill which it has some checksum

823
00:38:56,480 --> 00:39:00,440
on the file so if the file was tampered

824
00:38:58,250 --> 00:39:02,570
it will basically say that it's not

825
00:39:00,440 --> 00:39:04,100
valid but that doesn't help us because

826
00:39:02,570 --> 00:39:06,500
we do want to see what an attacker did

827
00:39:04,100 --> 00:39:09,580
in our system so a very easy solution

828
00:39:06,500 --> 00:39:12,980
that is having another AWS account and

829
00:39:09,580 --> 00:39:15,500
there is a bucket policy to sync your

830
00:39:12,980 --> 00:39:16,730
cloud tray logs with a new account and

831
00:39:15,500 --> 00:39:19,370
it's a one-way sync

832
00:39:16,730 --> 00:39:21,800
so it only drops it it does it has

833
00:39:19,370 --> 00:39:23,330
encryption in transit it will save it in

834
00:39:21,800 --> 00:39:26,750
your new account that means even if

835
00:39:23,330 --> 00:39:29,299
someone has root credentials on your AWS

836
00:39:26,750 --> 00:39:30,290
account with our audit logs it won't be

837
00:39:29,300 --> 00:39:33,470
able to delete them from your new

838
00:39:30,290 --> 00:39:37,460
account so they're safe that way and you

839
00:39:33,470 --> 00:39:39,169
can do it in a regular interval secret

840
00:39:37,460 --> 00:39:43,250
management we saw that we dumped some

841
00:39:39,170 --> 00:39:44,660
secrets we have the pose dress one of

842
00:39:43,250 --> 00:39:45,320
not a vulnerability but basically the

843
00:39:44,660 --> 00:39:49,120
proxy that

844
00:39:45,320 --> 00:39:51,140
dump the secrets if you have hard-coded

845
00:39:49,120 --> 00:39:52,520
credentials they'll be a problem because

846
00:39:51,140 --> 00:39:54,740
I'll grab those post addressed

847
00:39:52,520 --> 00:39:57,860
credentials and I'll use them as much as

848
00:39:54,740 --> 00:40:02,470
I want so you can use either Hoshi Corp

849
00:39:57,860 --> 00:40:05,630
or you have AWS Asha cobalt or AWS SSM

850
00:40:02,470 --> 00:40:07,160
for secret management I like Hoshi Corp

851
00:40:05,630 --> 00:40:09,560
because it gives it gives you more

852
00:40:07,160 --> 00:40:11,600
flexibility it can make new credentials

853
00:40:09,560 --> 00:40:13,460
for let's say for your databases for my

854
00:40:11,600 --> 00:40:15,950
sequel for pose dress it'll make

855
00:40:13,460 --> 00:40:18,140
short-lived credentials and let's say 50

856
00:40:15,950 --> 00:40:19,279
minute and then when your app tries to

857
00:40:18,140 --> 00:40:21,350
access it again it gets permission

858
00:40:19,280 --> 00:40:23,660
denied it will just ask for a new set of

859
00:40:21,350 --> 00:40:25,339
credentials and that way even if someone

860
00:40:23,660 --> 00:40:29,569
did dump your credentials they'll be

861
00:40:25,340 --> 00:40:32,200
valid for a limited amount of time enter

862
00:40:29,570 --> 00:40:35,150
service communication you can put

863
00:40:32,200 --> 00:40:37,009
sidecars on all your services whether

864
00:40:35,150 --> 00:40:41,600
it's a console connect you have invoice

865
00:40:37,010 --> 00:40:44,600
ID cards or proxies that can do mutual

866
00:40:41,600 --> 00:40:47,060
TLS between them so it's I'll be harder

867
00:40:44,600 --> 00:40:50,710
to basically sniff the traffic like

868
00:40:47,060 --> 00:40:52,430
something we did with post dress laughs

869
00:40:50,710 --> 00:40:54,410
I'm not

870
00:40:52,430 --> 00:40:56,629
you have aw soif not a fan of the

871
00:40:54,410 --> 00:41:01,190
pricing policy because you pay by the

872
00:40:56,630 --> 00:41:02,480
rule so I use maxi with nginx it's a

873
00:41:01,190 --> 00:41:05,720
pretty nice laughs it has this like

874
00:41:02,480 --> 00:41:08,090
feedback loop where you deploy it you

875
00:41:05,720 --> 00:41:11,540
put on in learning mode and then you

876
00:41:08,090 --> 00:41:14,120
have an elastic search DB which will

877
00:41:11,540 --> 00:41:16,009
have all the things that it would have

878
00:41:14,120 --> 00:41:17,180
blocked so you're on your app and you

879
00:41:16,010 --> 00:41:18,950
see what it would have locked and

880
00:41:17,180 --> 00:41:21,109
there's a nice little tool that will

881
00:41:18,950 --> 00:41:22,970
generate rules based on what you say all

882
00:41:21,110 --> 00:41:26,600
right this is valid so don't block this

883
00:41:22,970 --> 00:41:29,330
or this is invalid this is an attack so

884
00:41:26,600 --> 00:41:31,430
block that and it's super fast it's

885
00:41:29,330 --> 00:41:35,230
super slim if you put it like an Alpine

886
00:41:31,430 --> 00:41:38,029
docker image it'll work super fast and

887
00:41:35,230 --> 00:41:40,160
for a double yes you have guard duty

888
00:41:38,030 --> 00:41:42,620
which is it's free it's pretty cool

889
00:41:40,160 --> 00:41:45,259
actually it continuously monitors things

890
00:41:42,620 --> 00:41:47,720
your cloud trail logs uses some machine

891
00:41:45,260 --> 00:41:51,560
learning to detect things that it can

892
00:41:47,720 --> 00:41:54,740
flag them as link critical or info it

893
00:41:51,560 --> 00:41:57,170
has a bit of a flag so it might flag

894
00:41:54,740 --> 00:41:58,589
things after it already happened but

895
00:41:57,170 --> 00:42:00,329
then you can go and do the

896
00:41:58,589 --> 00:42:02,249
the response and roll okay your audit

897
00:42:00,329 --> 00:42:05,210
logs and see what happened revoked the

898
00:42:02,249 --> 00:42:08,459
credentials that were stolen and

899
00:42:05,210 --> 00:42:11,160
basically do your IR and you have

900
00:42:08,460 --> 00:42:13,710
inspector which will scan all your

901
00:42:11,160 --> 00:42:16,348
machines on AWS it can do it

902
00:42:13,710 --> 00:42:18,599
automatically weekly daily compare that

903
00:42:16,349 --> 00:42:21,569
to the new CV list and tell you what you

904
00:42:18,599 --> 00:42:26,789
need to patch and fill so you can bake

905
00:42:21,569 --> 00:42:31,229
in your image and deploy them so we're

906
00:42:26,789 --> 00:42:42,509
done we have some time for questions any

907
00:42:31,229 --> 00:42:43,700
questions thank you thank you and now

908
00:42:42,509 --> 00:42:53,910
yes please

909
00:42:43,700 --> 00:43:05,218
questions yes we have one of course the

910
00:42:53,910 --> 00:43:07,558
back of the room what I was asking

911
00:43:05,219 --> 00:43:09,479
myself if a ruler because he told that

912
00:43:07,559 --> 00:43:14,249
rule is one of your standard tools is

913
00:43:09,479 --> 00:43:16,140
still working for a code execution

914
00:43:14,249 --> 00:43:17,910
because I thought that was pitch by

915
00:43:16,140 --> 00:43:22,200
Microsoft it was yes

916
00:43:17,910 --> 00:43:26,129
so ruler was basically one of the tools

917
00:43:22,200 --> 00:43:28,680
that we used to use it if you're going

918
00:43:26,130 --> 00:43:30,719
against an older version of you know

919
00:43:28,680 --> 00:43:33,808
let's say an organization that's running

920
00:43:30,719 --> 00:43:38,309
outdated tools then you could leverage

921
00:43:33,809 --> 00:43:40,440
ruler ideally for me now in a in an

922
00:43:38,309 --> 00:43:42,809
actual fantastic scenario I'm looking

923
00:43:40,440 --> 00:43:45,509
for something along the likes of finding

924
00:43:42,809 --> 00:43:48,239
a VPN that I can authenticate to going

925
00:43:45,509 --> 00:43:50,249
after Citrix instances things like that

926
00:43:48,239 --> 00:43:52,259
some things of that nature but I would

927
00:43:50,249 --> 00:43:54,779
never rule it out as they see what I did

928
00:43:52,259 --> 00:43:57,180
there ruled out as an attack vector just

929
00:43:54,779 --> 00:43:59,489
me it just says in the event that it

930
00:43:57,180 --> 00:44:02,609
could actually still be leveraged okay I

931
00:43:59,489 --> 00:44:05,279
see um maybe one more question you

932
00:44:02,609 --> 00:44:07,519
mentioned a correct map exit fork but I

933
00:44:05,279 --> 00:44:11,999
didn't understand how how it's called

934
00:44:07,519 --> 00:44:12,330
it's cracked map exec so crack map exec

935
00:44:11,999 --> 00:44:15,120
is

936
00:44:12,330 --> 00:44:18,540
the raziel version yep extreme so crack

937
00:44:15,120 --> 00:44:22,970
map extreme is the fork that was done by

938
00:44:18,540 --> 00:44:26,250
I believe his Twitter handles AMS hacks

939
00:44:22,970 --> 00:44:29,549
but if you just hop on github and look

940
00:44:26,250 --> 00:44:33,210
for crack crack mapping extreme it's

941
00:44:29,550 --> 00:44:35,940
basically a fork of crack map exact with

942
00:44:33,210 --> 00:44:38,130
all the new additional additional

943
00:44:35,940 --> 00:44:41,610
functionality okay thank you

944
00:44:38,130 --> 00:44:54,750
sure thing sure thing any other question

945
00:44:41,610 --> 00:44:57,360
yeah about the secret management tools

946
00:44:54,750 --> 00:45:01,800
do you know Mozilla subs and do you use

947
00:44:57,360 --> 00:45:05,780
it no I only have experience with the

948
00:45:01,800 --> 00:45:08,010
AWS SSM for secure management or vault

949
00:45:05,780 --> 00:45:09,990
honestly I don't use anything other than

950
00:45:08,010 --> 00:45:11,880
vault right now it gives me a bunch a

951
00:45:09,990 --> 00:45:14,879
lot of flexibility I can write my own

952
00:45:11,880 --> 00:45:18,810
modules for it and it's a huge community

953
00:45:14,880 --> 00:45:24,060
so it updates very like on a weekly

954
00:45:18,810 --> 00:45:26,390
basis it's not on daily basis any other

955
00:45:24,060 --> 00:45:26,390
question

956
00:45:28,910 --> 00:45:35,170
okay and thank you again thank you today

957
00:45:32,880 --> 00:45:35,970
for coming I got a plug for you

958
00:45:35,170 --> 00:45:39,200
[Music]

959
00:45:35,970 --> 00:45:39,200
[Applause]

