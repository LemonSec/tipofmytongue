1
00:00:04,160 --> 00:00:11,370
hello hi everyone thanks for coming so

2
00:00:08,970 --> 00:00:12,930
yes my name is Juan this talk is called

3
00:00:11,370 --> 00:00:14,040
doing your own Wafaa service and for

4
00:00:12,930 --> 00:00:16,170
eating on false positives

5
00:00:14,040 --> 00:00:17,549
you will also say something around and

6
00:00:16,170 --> 00:00:19,289
also for getting out latency for your

7
00:00:17,550 --> 00:00:23,579
customer so I was getting too long so I

8
00:00:19,289 --> 00:00:25,980
will be called on the talk so yeah this

9
00:00:23,579 --> 00:00:28,320
is me I'm a security lead developer at

10
00:00:25,980 --> 00:00:30,239
booking.com this talk is about a system

11
00:00:28,320 --> 00:00:32,579
that I will to add booking.com to solve

12
00:00:30,239 --> 00:00:34,800
a specific set of challenges ready to

13
00:00:32,579 --> 00:00:37,680
application security I have a blog post

14
00:00:34,800 --> 00:00:39,180
where I wrote about my work usually in

15
00:00:37,680 --> 00:00:44,580
infrastructure or application security

16
00:00:39,180 --> 00:00:48,060
and twitter field so yeah so - Oh on an

17
00:00:44,580 --> 00:00:50,010
overview of this talk I will start by in

18
00:00:48,060 --> 00:00:52,830
charge in doing an introduction on what

19
00:00:50,010 --> 00:00:55,620
our office how you can deploy such a

20
00:00:52,830 --> 00:00:58,710
product then a bit of what what as a

21
00:00:55,620 --> 00:01:00,720
service is what I mean by that on how we

22
00:00:58,710 --> 00:01:02,130
can block attacks without false

23
00:01:00,720 --> 00:01:07,740
positives or increased latency and

24
00:01:02,130 --> 00:01:10,880
finally if there's time a demo so yeah

25
00:01:07,740 --> 00:01:13,859
it's a Web Application Firewall pretty

26
00:01:10,880 --> 00:01:16,109
established technology to protect

27
00:01:13,859 --> 00:01:18,658
against a layer seven attacks they can

28
00:01:16,109 --> 00:01:20,699
do many things so the basic stuff that

29
00:01:18,659 --> 00:01:23,130
you might know of exercise remote code

30
00:01:20,700 --> 00:01:24,659
execution SQL injections depending on

31
00:01:23,130 --> 00:01:26,670
the web product you might cover other

32
00:01:24,659 --> 00:01:30,749
stuff but mostly focused on the

33
00:01:26,670 --> 00:01:32,639
application part so I will go a bit into

34
00:01:30,749 --> 00:01:34,350
how their wife can be deployed and

35
00:01:32,639 --> 00:01:37,079
establish a bit of the problem I was

36
00:01:34,350 --> 00:01:40,048
facing so to give you an overview what

37
00:01:37,079 --> 00:01:42,389
can be deployed in inline mode which

38
00:01:40,049 --> 00:01:43,770
means that then the DeGraaf is basically

39
00:01:42,389 --> 00:01:46,199
between the traffic of the web

40
00:01:43,770 --> 00:01:48,179
application and the user that means that

41
00:01:46,200 --> 00:01:49,679
anything that happens you got to

42
00:01:48,179 --> 00:01:52,740
actually block any attack that you

43
00:01:49,679 --> 00:01:55,109
detect transparent to web server but if

44
00:01:52,740 --> 00:01:57,658
you have a huge application deployment

45
00:01:55,109 --> 00:01:59,458
with multiple data centers and network

46
00:01:57,659 --> 00:02:01,529
topologies that might evolve with your

47
00:01:59,459 --> 00:02:02,850
company this can become very challenging

48
00:02:01,529 --> 00:02:05,850
to be able to place them in the correct

49
00:02:02,850 --> 00:02:07,798
place then you have the out-of-band

50
00:02:05,850 --> 00:02:10,769
deployment model which means that you

51
00:02:07,799 --> 00:02:12,840
can no longer block attacks but it's

52
00:02:10,769 --> 00:02:14,030
very simple for you to place a tap on

53
00:02:12,840 --> 00:02:16,760
your network start

54
00:02:14,030 --> 00:02:19,459
dropping the traffic but of course you

55
00:02:16,760 --> 00:02:22,069
cannot lock them and a perfect for

56
00:02:19,459 --> 00:02:24,950
secrecy and other let's say different

57
00:02:22,069 --> 00:02:26,600
ways of implementing transport security

58
00:02:24,950 --> 00:02:28,040
means that it's becoming harder and

59
00:02:26,600 --> 00:02:29,959
harder for you to actually be able to

60
00:02:28,040 --> 00:02:35,179
expect the traffic that happens between

61
00:02:29,959 --> 00:02:36,890
the application and the customer newer

62
00:02:35,180 --> 00:02:38,810
deployment mode has been the agent mode

63
00:02:36,890 --> 00:02:41,179
so this means that you're basically

64
00:02:38,810 --> 00:02:43,700
placing something alongside of your

65
00:02:41,180 --> 00:02:45,890
application in the cornetist world you

66
00:02:43,700 --> 00:02:47,690
can imagine a sidecar there the

67
00:02:45,890 --> 00:02:50,208
environmental it might be a process

68
00:02:47,690 --> 00:02:52,040
running on the same metal box but

69
00:02:50,209 --> 00:02:53,450
basically it's very easy for you to

70
00:02:52,040 --> 00:02:55,670
scale it because it scales with your

71
00:02:53,450 --> 00:02:58,609
application but of course it's a lot

72
00:02:55,670 --> 00:03:00,559
more invasive and depending on how many

73
00:02:58,610 --> 00:03:05,840
resources this agent needs it can become

74
00:03:00,560 --> 00:03:06,400
a lot it can become very inefficient to

75
00:03:05,840 --> 00:03:09,050
use it

76
00:03:06,400 --> 00:03:11,450
of course the cloud mode which is like

77
00:03:09,050 --> 00:03:13,400
the lightest file basically you are

78
00:03:11,450 --> 00:03:15,380
routing your traffic through color

79
00:03:13,400 --> 00:03:17,600
either they are checking if this is

80
00:03:15,380 --> 00:03:19,130
malicious or not if it's already the

81
00:03:17,600 --> 00:03:22,100
cloud where you're deploying your

82
00:03:19,130 --> 00:03:24,890
application that can be great if not of

83
00:03:22,100 --> 00:03:26,989
course you have other latency and in a

84
00:03:24,890 --> 00:03:28,640
way this is outside of your control you

85
00:03:26,989 --> 00:03:30,680
are giving the keys to somebody else to

86
00:03:28,640 --> 00:03:34,820
look at the traffic and decide if it's

87
00:03:30,680 --> 00:03:36,680
malicious or not so basically with what

88
00:03:34,820 --> 00:03:38,959
I spoke about you can see some problems

89
00:03:36,680 --> 00:03:41,360
here of course the network placement

90
00:03:38,959 --> 00:03:43,190
they have been ability but one of the

91
00:03:41,360 --> 00:03:44,930
big ones not really to implement mode

92
00:03:43,190 --> 00:03:46,940
it's more about the false positive rate

93
00:03:44,930 --> 00:03:48,500
which can mean that you have analyst

94
00:03:46,940 --> 00:03:50,510
trying to tune the application so you

95
00:03:48,500 --> 00:03:52,670
are not affecting users when they are

96
00:03:50,510 --> 00:03:54,108
not performing attacks and of course

97
00:03:52,670 --> 00:03:56,328
there's a lack of control of developers

98
00:03:54,109 --> 00:03:58,430
and depending on your organization they

99
00:03:56,329 --> 00:04:03,290
can pretend a lot of pushback against

100
00:03:58,430 --> 00:04:05,540
this so yeah how does the this talk

101
00:04:03,290 --> 00:04:07,190
start basically I was working at become

102
00:04:05,540 --> 00:04:09,260
in a very challenging environment

103
00:04:07,190 --> 00:04:11,690
there was no acceptance for false

104
00:04:09,260 --> 00:04:13,760
positives or added latency which means

105
00:04:11,690 --> 00:04:15,470
that we need we didn't have a wife and

106
00:04:13,760 --> 00:04:18,289
we need something that would not add any

107
00:04:15,470 --> 00:04:21,190
latency to any of the applications and

108
00:04:18,289 --> 00:04:23,630
would not block any users at all and

109
00:04:21,190 --> 00:04:25,789
there was a lot of reluctance toward

110
00:04:23,630 --> 00:04:28,070
black box solutions so this was about

111
00:04:25,789 --> 00:04:29,930
also how to actually

112
00:04:28,070 --> 00:04:32,330
the solution that the developers might

113
00:04:29,930 --> 00:04:36,140
feel comfortable with the application

114
00:04:32,330 --> 00:04:37,640
might block based on this graph and also

115
00:04:36,140 --> 00:04:40,310
solve this process of latency and false

116
00:04:37,640 --> 00:04:42,469
positives and this is how I start

117
00:04:40,310 --> 00:04:44,330
looking for a middle ground so I saw the

118
00:04:42,470 --> 00:04:46,640
benefit of the out-of-band mode which

119
00:04:44,330 --> 00:04:48,710
means that great I actually I'm not

120
00:04:46,640 --> 00:04:50,630
affecting application but I'm not

121
00:04:48,710 --> 00:04:53,270
actually blocking the attacks which was

122
00:04:50,630 --> 00:04:55,490
what I wanted and that's why I started

123
00:04:53,270 --> 00:04:59,240
looking for something like this which is

124
00:04:55,490 --> 00:05:02,060
what I call a high rate graph service so

125
00:04:59,240 --> 00:05:03,680
in this case by looking at the context

126
00:05:02,060 --> 00:05:06,710
of the attacks

127
00:05:03,680 --> 00:05:08,180
I can look realize if it's real attack

128
00:05:06,710 --> 00:05:11,120
or not and remove the false positives

129
00:05:08,180 --> 00:05:13,640
affecting customers the in this way you

130
00:05:11,120 --> 00:05:15,050
are not using an appliance in the

131
00:05:13,640 --> 00:05:18,140
network topology it's more like an API

132
00:05:15,050 --> 00:05:21,230
call so just like a web service and of

133
00:05:18,140 --> 00:05:23,180
course the application can decide how it

134
00:05:21,230 --> 00:05:26,020
wants to react so they it gives them a

135
00:05:23,180 --> 00:05:28,490
lot of control over this

136
00:05:26,020 --> 00:05:31,280
so some stats on the production

137
00:05:28,490 --> 00:05:34,130
implementation here there's like 10

138
00:05:31,280 --> 00:05:36,500
million requests lakh per month 10,000

139
00:05:34,130 --> 00:05:39,140
distinct attack identifiers I will go

140
00:05:36,500 --> 00:05:41,450
over that afterwards no latency added

141
00:05:39,140 --> 00:05:43,789
which was like one of the big concerns

142
00:05:41,450 --> 00:05:46,430
that we couldn't be adding latency to

143
00:05:43,790 --> 00:05:50,230
regular users and of course less than 5

144
00:05:46,430 --> 00:05:53,450
recorded false positives over 2 years

145
00:05:50,230 --> 00:05:56,270
so this talk is not just about this

146
00:05:53,450 --> 00:05:58,370
graph architecture and solution but also

147
00:05:56,270 --> 00:05:59,810
how you can build one so that's why I'm

148
00:05:58,370 --> 00:06:01,160
going to go through our use case of

149
00:05:59,810 --> 00:06:03,110
something I already have published in

150
00:06:01,160 --> 00:06:05,410
github so you can actually do it

151
00:06:03,110 --> 00:06:07,520
yourself if you want to implement it and

152
00:06:05,410 --> 00:06:09,740
that's who I am mentioning that there

153
00:06:07,520 --> 00:06:11,990
are already open source components hey

154
00:06:09,740 --> 00:06:13,520
I'm going to walk through a how you can

155
00:06:11,990 --> 00:06:15,170
have a log processing pipeline to

156
00:06:13,520 --> 00:06:17,299
actually find out about what's going on

157
00:06:15,170 --> 00:06:19,490
with your application and the web

158
00:06:17,300 --> 00:06:23,810
service and how to interact with it it

159
00:06:19,490 --> 00:06:26,300
might be a library or an agent so in

160
00:06:23,810 --> 00:06:29,060
this case as I mentioned this is I'm

161
00:06:26,300 --> 00:06:30,410
using Google Cloud and using flask has

162
00:06:29,060 --> 00:06:32,930
to go application which we want to

163
00:06:30,410 --> 00:06:34,820
protect and they call this I will surely

164
00:06:32,930 --> 00:06:36,650
call afterwards but they see we have

165
00:06:34,820 --> 00:06:41,830
this two application we have a customer

166
00:06:36,650 --> 00:06:41,830
and we want to protect against attacks

167
00:06:42,130 --> 00:06:48,139
so this is a high overview of the

168
00:06:45,880 --> 00:06:49,580
architectural solution so that's a

169
00:06:48,139 --> 00:06:51,889
diagram where you see the different

170
00:06:49,580 --> 00:06:53,389
components and how this vacations

171
00:06:51,889 --> 00:06:56,169
interacts with the Web Application

172
00:06:53,389 --> 00:06:59,030
Firewall service and is able to protect

173
00:06:56,169 --> 00:07:02,240
without adding false positives or

174
00:06:59,030 --> 00:07:06,799
blocking regular users and also we are

175
00:07:02,240 --> 00:07:09,919
adding latency to those users so let's

176
00:07:06,800 --> 00:07:11,630
go each component at a time so first web

177
00:07:09,919 --> 00:07:14,120
application it's going to be able to

178
00:07:11,630 --> 00:07:16,759
decide if it was that something goes in

179
00:07:14,120 --> 00:07:18,860
inline mode run out of an mode which

180
00:07:16,759 --> 00:07:21,349
means that when the application actually

181
00:07:18,860 --> 00:07:23,000
gets a request there's going to happen

182
00:07:21,349 --> 00:07:24,440
this decision is this actually malicious

183
00:07:23,000 --> 00:07:26,509
and I want the web service to interact

184
00:07:24,440 --> 00:07:29,780
with this or I want this to happening an

185
00:07:26,509 --> 00:07:31,580
out-of-band mode and one a key part here

186
00:07:29,780 --> 00:07:33,409
is that we're not just going to create a

187
00:07:31,580 --> 00:07:35,419
we are going to create a lot of

188
00:07:33,409 --> 00:07:36,740
interaction so if you have seen nginx

189
00:07:35,419 --> 00:07:38,840
lots you can think about something

190
00:07:36,740 --> 00:07:42,560
similar but with a lot more data that

191
00:07:38,840 --> 00:07:44,630
we're going to be able to use now we

192
00:07:42,560 --> 00:07:46,520
have the application here but we need to

193
00:07:44,630 --> 00:07:48,979
interact with the Application Firewall

194
00:07:46,520 --> 00:07:50,960
service so there are two options for

195
00:07:48,979 --> 00:07:53,930
this one option might be to apply an

196
00:07:50,960 --> 00:07:56,539
agent which has some of the issues I

197
00:07:53,930 --> 00:07:58,460
mentioned around an agent deployment but

198
00:07:56,539 --> 00:07:59,840
it can have a minimal footprint because

199
00:07:58,460 --> 00:08:02,180
we're not doing a lot of logic it's

200
00:07:59,840 --> 00:08:03,888
basically doing an API call and it can

201
00:08:02,180 --> 00:08:06,979
interact with application to get all the

202
00:08:03,889 --> 00:08:08,840
settings that needs or a library which

203
00:08:06,979 --> 00:08:10,550
is what I'm using for this talk there's

204
00:08:08,840 --> 00:08:13,638
an inherent risk with usana library

205
00:08:10,550 --> 00:08:14,900
which means that now if the library if

206
00:08:13,639 --> 00:08:17,120
you're using let's say at the jungle

207
00:08:14,900 --> 00:08:19,929
framework and you are placing a library

208
00:08:17,120 --> 00:08:22,190
which is using the same let's say

209
00:08:19,930 --> 00:08:24,710
libraries to actually do the API calls

210
00:08:22,190 --> 00:08:26,719
if there's a priority with the library

211
00:08:24,710 --> 00:08:28,159
itself or the framework itself it might

212
00:08:26,719 --> 00:08:29,900
be too late for the library so that's

213
00:08:28,159 --> 00:08:31,430
something to take into account it's a

214
00:08:29,900 --> 00:08:34,309
lot easier to implement with libraries

215
00:08:31,430 --> 00:08:35,899
the solution but there's a risk that you

216
00:08:34,309 --> 00:08:39,439
have things into account at least for

217
00:08:35,899 --> 00:08:41,360
the real-time logging now the web

218
00:08:39,440 --> 00:08:43,669
service which is like the key component

219
00:08:41,360 --> 00:08:46,430
here this is what's going to actually

220
00:08:43,669 --> 00:08:48,740
get a request and decide make a

221
00:08:46,430 --> 00:08:51,170
prediction about it which is what most

222
00:08:48,740 --> 00:08:53,600
what do they basically see some traffic

223
00:08:51,170 --> 00:08:55,939
and they might make operation if this is

224
00:08:53,600 --> 00:08:59,060
my sure not

225
00:08:55,940 --> 00:09:01,730
the interesting part with this is that

226
00:08:59,060 --> 00:09:04,369
it's not just one application as you

227
00:09:01,730 --> 00:09:07,010
might get used to or one product by it's

228
00:09:04,370 --> 00:09:09,650
more of a service which can have

229
00:09:07,010 --> 00:09:14,750
multiple planes in it so you can imagine

230
00:09:09,650 --> 00:09:16,459
it as a sort of API which is actually

231
00:09:14,750 --> 00:09:18,560
mirroring traffic to different

232
00:09:16,460 --> 00:09:19,630
components and getting predictions out

233
00:09:18,560 --> 00:09:22,640
of them

234
00:09:19,630 --> 00:09:25,520
so some of the applications that might

235
00:09:22,640 --> 00:09:28,069
be used as splines might be for example

236
00:09:25,520 --> 00:09:30,439
open source ones like modsecurity or not

237
00:09:28,070 --> 00:09:33,440
see these are open source applications

238
00:09:30,440 --> 00:09:36,740
which are very good at providing a the

239
00:09:33,440 --> 00:09:38,390
Web Application Firewall capability but

240
00:09:36,740 --> 00:09:40,610
then you might want to also use a

241
00:09:38,390 --> 00:09:42,110
commercial product here's where it can

242
00:09:40,610 --> 00:09:43,340
become very interesting because I

243
00:09:42,110 --> 00:09:45,800
mentioned before the different

244
00:09:43,340 --> 00:09:47,210
deployment modes and how when you have a

245
00:09:45,800 --> 00:09:49,430
commercial part it might be hard to

246
00:09:47,210 --> 00:09:51,800
place it on the network in this case you

247
00:09:49,430 --> 00:09:53,630
can just place it as an airplane and

248
00:09:51,800 --> 00:09:56,780
that allows you to make in-sample

249
00:09:53,630 --> 00:09:58,310
predictions or to actually compare two

250
00:09:56,780 --> 00:09:59,720
commercial products or compare your

251
00:09:58,310 --> 00:10:01,609
current mode security setup with a

252
00:09:59,720 --> 00:10:03,260
commercial product from this perspective

253
00:10:01,610 --> 00:10:05,510
you don't need to worry so much out

254
00:10:03,260 --> 00:10:09,470
network topology you just need to add it

255
00:10:05,510 --> 00:10:11,480
as an airplane for the solution and a

256
00:10:09,470 --> 00:10:14,630
custom modules so here's where you can

257
00:10:11,480 --> 00:10:17,090
actually start expanding the web service

258
00:10:14,630 --> 00:10:19,550
by adding things like in this case I

259
00:10:17,090 --> 00:10:23,030
added a rate limiting and will engine

260
00:10:19,550 --> 00:10:25,609
plug-in for the public coding github but

261
00:10:23,030 --> 00:10:27,459
you can do much more like business logic

262
00:10:25,610 --> 00:10:30,620
related to your application yourself or

263
00:10:27,460 --> 00:10:32,690
machine learning models in this one in

264
00:10:30,620 --> 00:10:35,300
particular I'm actually borrowing this

265
00:10:32,690 --> 00:10:37,100
from Joel aya who is a data scientist

266
00:10:35,300 --> 00:10:39,890
which works with mine one of my teams

267
00:10:37,100 --> 00:10:42,260
and we had the situation of the web

268
00:10:39,890 --> 00:10:44,689
service using mod security for most of

269
00:10:42,260 --> 00:10:46,340
the predictions but when using one of

270
00:10:44,690 --> 00:10:48,290
the settings of not security which is

271
00:10:46,340 --> 00:10:50,870
called pioneer 2 we are finding a lot of

272
00:10:48,290 --> 00:10:53,390
false positives now the false positives

273
00:10:50,870 --> 00:10:56,780
can be a can be fixed from the

274
00:10:53,390 --> 00:10:58,580
perspective of Romans 8 from the

275
00:10:56,780 --> 00:11:00,260
perspective of mod security itself and

276
00:10:58,580 --> 00:11:01,610
I'll explain later why the forces are

277
00:11:00,260 --> 00:11:03,350
were not so much of an issue of

278
00:11:01,610 --> 00:11:06,190
affecting customers but more an issue

279
00:11:03,350 --> 00:11:09,400
about precision so we were looking at

280
00:11:06,190 --> 00:11:11,440
this a lack of precision

281
00:11:09,400 --> 00:11:13,300
decided that we could tune it from their

282
00:11:11,440 --> 00:11:16,000
modsecurity part or we could take

283
00:11:13,300 --> 00:11:18,880
advantage of the custom a information we

284
00:11:16,000 --> 00:11:21,370
have on our organization and then a he

285
00:11:18,880 --> 00:11:24,400
built a model which is an LS TM neural

286
00:11:21,370 --> 00:11:26,910
network to be able to get a a string

287
00:11:24,400 --> 00:11:28,569
which we an input so for example this

288
00:11:26,910 --> 00:11:30,939
this message

289
00:11:28,570 --> 00:11:32,470
awesome tables and the Amol will

290
00:11:30,940 --> 00:11:34,120
actually create it into features I make

291
00:11:32,470 --> 00:11:36,700
a prediction so it really looks like an

292
00:11:34,120 --> 00:11:38,470
SQL injection so this is not the

293
00:11:36,700 --> 00:11:40,090
replacement of modsecurity it was

294
00:11:38,470 --> 00:11:41,800
actually something aiding modsecurity

295
00:11:40,090 --> 00:11:43,900
since we can actually have as many

296
00:11:41,800 --> 00:11:46,390
plants as we want we can actually say

297
00:11:43,900 --> 00:11:48,910
things like if not security and this

298
00:11:46,390 --> 00:11:51,370
model agree on a paranoia level to rule

299
00:11:48,910 --> 00:11:52,810
then we think this is malicious so it's

300
00:11:51,370 --> 00:11:55,870
just an example how you can extend the

301
00:11:52,810 --> 00:11:58,209
Kabala teas and that's basically disease

302
00:11:55,870 --> 00:12:00,670
right it's an api which can have a lot

303
00:11:58,210 --> 00:12:02,260
of points behind the scenes and make a

304
00:12:00,670 --> 00:12:06,910
prediction on that so that's the

305
00:12:02,260 --> 00:12:09,160
extensible part of the water service so

306
00:12:06,910 --> 00:12:11,380
to continue on the high-level overview

307
00:12:09,160 --> 00:12:14,260
you then need to be able to process

308
00:12:11,380 --> 00:12:16,570
out-of-band so that means that we are

309
00:12:14,260 --> 00:12:19,060
not adding latency to a customer itself

310
00:12:16,570 --> 00:12:22,180
the request just went to application and

311
00:12:19,060 --> 00:12:24,699
then it was sent to a queue in the form

312
00:12:22,180 --> 00:12:26,800
of a lot for that in this particular

313
00:12:24,700 --> 00:12:28,990
case I'm using Google data flow but you

314
00:12:26,800 --> 00:12:31,089
can use pretty much any component that

315
00:12:28,990 --> 00:12:33,970
provides the same capabilities it's

316
00:12:31,090 --> 00:12:38,110
going to be able to replay the requests

317
00:12:33,970 --> 00:12:40,330
here against the woth but which were not

318
00:12:38,110 --> 00:12:41,950
replaced with a web application and it's

319
00:12:40,330 --> 00:12:43,840
also going to calculate scores in

320
00:12:41,950 --> 00:12:47,290
windows of time so how many times I have

321
00:12:43,840 --> 00:12:48,580
seen this in a period of time then you

322
00:12:47,290 --> 00:12:50,439
have a component which is the detection

323
00:12:48,580 --> 00:12:52,330
component so this is the one it's

324
00:12:50,440 --> 00:12:55,330
actually getting this scores which were

325
00:12:52,330 --> 00:12:57,160
calculated and in Turkey and in

326
00:12:55,330 --> 00:12:59,620
particular I'm using bigquery to

327
00:12:57,160 --> 00:13:01,120
interact with long term storage but the

328
00:12:59,620 --> 00:13:02,680
point here is that you are not only

329
00:13:01,120 --> 00:13:05,020
looking at a particular moment or a

330
00:13:02,680 --> 00:13:06,520
particular context of 30 seconds you can

331
00:13:05,020 --> 00:13:08,740
take advantage of all the data

332
00:13:06,520 --> 00:13:12,420
application has to consider more things

333
00:13:08,740 --> 00:13:15,130
which I'll go over in detail later and

334
00:13:12,420 --> 00:13:16,810
the state store is the component which

335
00:13:15,130 --> 00:13:18,820
is actually storing all the information

336
00:13:16,810 --> 00:13:21,040
that the library or agent are going to

337
00:13:18,820 --> 00:13:23,580
use to decide how they interact with the

338
00:13:21,040 --> 00:13:23,579
web service

339
00:13:24,519 --> 00:13:29,810
and finally for this is the abbasids

340
00:13:28,490 --> 00:13:33,470
asian component in this case

341
00:13:29,810 --> 00:13:35,839
elasticsearch so pretty much it's easy

342
00:13:33,470 --> 00:13:37,820
to do it for this open source version if

343
00:13:35,839 --> 00:13:39,920
you want to and you have your own sim

344
00:13:37,820 --> 00:13:42,380
then you can use your own sim it's

345
00:13:39,920 --> 00:13:44,959
basically where all the information of

346
00:13:42,380 --> 00:13:47,750
the outer fund and inline activity is

347
00:13:44,959 --> 00:13:50,149
stored and then you can have information

348
00:13:47,750 --> 00:13:53,300
on the tax so for example in this case

349
00:13:50,149 --> 00:13:55,310
most of the requests are going on a

350
00:13:53,300 --> 00:13:58,040
request level which means inline on my

351
00:13:55,310 --> 00:14:00,380
test and there I can visualize things

352
00:13:58,040 --> 00:14:02,389
like okay we have three blinds one of

353
00:14:00,380 --> 00:14:04,430
them are decides it's an attack two of

354
00:14:02,389 --> 00:14:06,319
them aren't saying it's not an attack

355
00:14:04,430 --> 00:14:10,579
but we're still deciding it's an attack

356
00:14:06,319 --> 00:14:11,959
based on the logic that we have so for

357
00:14:10,579 --> 00:14:14,870
now it covered pretty much the

358
00:14:11,959 --> 00:14:16,699
high-level overview and how you can have

359
00:14:14,870 --> 00:14:19,160
multiple capabilities on the same

360
00:14:16,699 --> 00:14:21,258
product but one of the key things is how

361
00:14:19,160 --> 00:14:24,920
do we block attacks and also we don't

362
00:14:21,259 --> 00:14:26,930
want to block regular customers so the

363
00:14:24,920 --> 00:14:29,540
way that we can do this is by doing

364
00:14:26,930 --> 00:14:31,519
traffic routing so we're not doing in

365
00:14:29,540 --> 00:14:33,079
line we're not doing out of hand

366
00:14:31,519 --> 00:14:35,779
we're trying to do something in the

367
00:14:33,079 --> 00:14:38,180
middle so this is what I call

368
00:14:35,779 --> 00:14:41,319
fingerprint based routing so it

369
00:14:38,180 --> 00:14:44,209
basically decides based on the storage

370
00:14:41,319 --> 00:14:47,180
that a some particular either a

371
00:14:44,209 --> 00:14:49,819
particular let's say you own a string or

372
00:14:47,180 --> 00:14:53,029
a party where user ID or a combination

373
00:14:49,819 --> 00:14:54,889
of user agent and IP address is behaving

374
00:14:53,029 --> 00:14:57,079
in a particular in a malicious way and

375
00:14:54,889 --> 00:14:59,240
then decides to actually try a route the

376
00:14:57,079 --> 00:15:02,750
traffic to the graph and this can be

377
00:14:59,240 --> 00:15:04,819
manually or ultimately the other then

378
00:15:02,750 --> 00:15:07,670
you have network based routing so you

379
00:15:04,819 --> 00:15:09,889
can think of this as we decide that

380
00:15:07,670 --> 00:15:12,949
particular set of network ranges like

381
00:15:09,889 --> 00:15:14,839
proxies or tor exit nodes actually

382
00:15:12,949 --> 00:15:16,279
malicious and from this perspective we

383
00:15:14,839 --> 00:15:18,350
are not saying that it's malicious you

384
00:15:16,279 --> 00:15:20,839
are basically saying that I'm willing to

385
00:15:18,350 --> 00:15:23,660
add latency or possible false positives

386
00:15:20,839 --> 00:15:26,600
to these exit nodes because the risk

387
00:15:23,660 --> 00:15:28,040
that I have from them is a lot higher

388
00:15:26,600 --> 00:15:30,649
and the business value that they are

389
00:15:28,040 --> 00:15:31,880
giving is a lot lower to actually

390
00:15:30,649 --> 00:15:34,670
justify it

391
00:15:31,880 --> 00:15:35,449
if for example 80% of your attacks come

392
00:15:34,670 --> 00:15:38,059
from a particular

393
00:15:35,449 --> 00:15:40,339
country which is not your main customer

394
00:15:38,059 --> 00:15:42,350
you can make these decisions in a way

395
00:15:40,339 --> 00:15:44,959
this is all about risk acceptance and

396
00:15:42,350 --> 00:15:46,970
the interesting part here is that it's

397
00:15:44,959 --> 00:15:49,099
not about the product itself it's all

398
00:15:46,970 --> 00:15:52,489
the application so each application each

399
00:15:49,100 --> 00:15:54,649
endpoint itself so each /login can have

400
00:15:52,489 --> 00:15:57,799
its own logic of how they want to make

401
00:15:54,649 --> 00:16:00,290
these decisions and of course virtual

402
00:15:57,799 --> 00:16:02,089
patching so in the same way you can say

403
00:16:00,290 --> 00:16:03,919
a particular endpoint which are part of

404
00:16:02,089 --> 00:16:06,559
our parameter is something that we know

405
00:16:03,919 --> 00:16:09,199
has abnormality we want to only route

406
00:16:06,559 --> 00:16:10,519
that traffic through the graph in line

407
00:16:09,199 --> 00:16:13,160
and the rest we want to continue

408
00:16:10,519 --> 00:16:18,350
deciding if we think it's an attack then

409
00:16:13,160 --> 00:16:20,749
do the routing now the the part of how

410
00:16:18,350 --> 00:16:22,819
do we actually not have false positives

411
00:16:20,749 --> 00:16:24,889
that's the key part and the thing that

412
00:16:22,819 --> 00:16:27,769
actually made my life so difficult

413
00:16:24,889 --> 00:16:30,079
because it's pretty there are a lot of

414
00:16:27,769 --> 00:16:32,149
great commercial products but the

415
00:16:30,079 --> 00:16:33,769
biggest problem was we couldn't have

416
00:16:32,149 --> 00:16:37,369
people tuning them all day and we

417
00:16:33,769 --> 00:16:38,899
couldn't be affecting our users so one

418
00:16:37,369 --> 00:16:41,359
of the best things is that this

419
00:16:38,899 --> 00:16:43,730
summation is per application which means

420
00:16:41,359 --> 00:16:45,169
that we can have different logics for

421
00:16:43,730 --> 00:16:47,239
each of them and even the application

422
00:16:45,169 --> 00:16:50,209
owners can make a decision around this

423
00:16:47,239 --> 00:16:52,579
and for that I want to make a key

424
00:16:50,209 --> 00:16:54,138
distinction between two things one

425
00:16:52,579 --> 00:16:56,329
things detection false positive or I

426
00:16:54,139 --> 00:16:58,669
call it detection false positive that's

427
00:16:56,329 --> 00:17:00,378
what would happen here and that's what I

428
00:16:58,669 --> 00:17:02,389
was mentioning before around for example

429
00:17:00,379 --> 00:17:04,760
modsecurity paranoia to having false

430
00:17:02,389 --> 00:17:06,349
positives false applications that's not

431
00:17:04,760 --> 00:17:09,529
actually affecting customers but not

432
00:17:06,349 --> 00:17:12,500
adding latency that's just in a way

433
00:17:09,529 --> 00:17:14,209
noise and noise means that you actually

434
00:17:12,500 --> 00:17:15,380
take longer to make a decision if

435
00:17:14,209 --> 00:17:17,240
something is malicious or not

436
00:17:15,380 --> 00:17:18,889
I'm blocking false positive which is

437
00:17:17,240 --> 00:17:22,069
what I'm actually really interested in

438
00:17:18,888 --> 00:17:23,599
is how many of the users are actually

439
00:17:22,069 --> 00:17:25,549
being blocked when they are not

440
00:17:23,599 --> 00:17:31,399
performing an attack and that's the

441
00:17:25,549 --> 00:17:33,740
thing I'm optimizing for so some of the

442
00:17:31,399 --> 00:17:37,129
key parts to this is to consider

443
00:17:33,740 --> 00:17:38,960
business logic so since this is approach

444
00:17:37,130 --> 00:17:40,909
that we have and in our case in

445
00:17:38,960 --> 00:17:42,350
particular it's pretty much custom built

446
00:17:40,909 --> 00:17:44,539
using a lot of great tools like

447
00:17:42,350 --> 00:17:46,610
modsecurity we have a lot of flexibility

448
00:17:44,539 --> 00:17:49,379
to use information on our application

449
00:17:46,610 --> 00:17:51,030
like the key business activity

450
00:17:49,380 --> 00:17:53,730
three of the particular ends if I were

451
00:17:51,030 --> 00:17:56,610
looking at and what would the impact of

452
00:17:53,730 --> 00:17:58,890
blocking them then the historical

453
00:17:56,610 --> 00:18:00,750
analysis is quite similar but you can

454
00:17:58,890 --> 00:18:02,670
take into account more things like in

455
00:18:00,750 --> 00:18:04,080
this particular end point which is the

456
00:18:02,670 --> 00:18:06,060
your chat end point where people are

457
00:18:04,080 --> 00:18:08,250
sending messages maybe the probability

458
00:18:06,060 --> 00:18:10,470
of a false positive for SQL injection is

459
00:18:08,250 --> 00:18:13,020
a lot higher so instead of going and

460
00:18:10,470 --> 00:18:16,410
trying to tune it in a ridiculous way

461
00:18:13,020 --> 00:18:18,000
you can actually say okay my score is

462
00:18:16,410 --> 00:18:19,590
going to be or the probability of this

463
00:18:18,000 --> 00:18:21,480
being malicious is going to take that

464
00:18:19,590 --> 00:18:23,399
into account so you're also taking into

465
00:18:21,480 --> 00:18:27,270
account the previous activity of the

466
00:18:23,400 --> 00:18:29,610
detection false positives and the

467
00:18:27,270 --> 00:18:34,440
context analysis this is kind of the

468
00:18:29,610 --> 00:18:37,820
closer in time which is in the last 30

469
00:18:34,440 --> 00:18:40,050
seconds in the last minute how many

470
00:18:37,820 --> 00:18:42,990
requests have I thought are malicious

471
00:18:40,050 --> 00:18:44,690
coming from this user ID this IP or this

472
00:18:42,990 --> 00:18:47,520
part where fingerprint I am finding

473
00:18:44,690 --> 00:18:50,460
depending on that is that you can then

474
00:18:47,520 --> 00:18:52,020
decide actually these is militias and

475
00:18:50,460 --> 00:18:54,360
all the information I mentioned before

476
00:18:52,020 --> 00:18:57,060
and the key part here is that you are

477
00:18:54,360 --> 00:18:59,100
delaying a bit the decision on routing

478
00:18:57,060 --> 00:19:00,659
in line the traffic but that's what's

479
00:18:59,100 --> 00:19:02,189
actually decreasing a lot the

480
00:19:00,660 --> 00:19:05,510
probability of this becoming a false

481
00:19:02,190 --> 00:19:07,740
positive up blocking false positive and

482
00:19:05,510 --> 00:19:10,110
this is an example of what I mean by

483
00:19:07,740 --> 00:19:11,760
that so let's say that we have an the

484
00:19:10,110 --> 00:19:13,649
chant endpoint a message that says I

485
00:19:11,760 --> 00:19:15,240
will sleep for one or two days if you

486
00:19:13,650 --> 00:19:16,890
have our records which is actually

487
00:19:15,240 --> 00:19:20,670
looking for sleep it's going to think

488
00:19:16,890 --> 00:19:22,110
this an attack now ask injection simper

489
00:19:20,670 --> 00:19:24,380
to apply these four injections need a

490
00:19:22,110 --> 00:19:28,379
lot of requests to be able to actually

491
00:19:24,380 --> 00:19:31,830
find a vulnerability so if you look at

492
00:19:28,380 --> 00:19:34,890
the probability and we say we have very

493
00:19:31,830 --> 00:19:37,320
bad so one out of a thousand requests is

494
00:19:34,890 --> 00:19:40,650
going to be come in incorrectly

495
00:19:37,320 --> 00:19:43,970
considered false positive but we want to

496
00:19:40,650 --> 00:19:46,650
get to this number so 0.0001 percent

497
00:19:43,970 --> 00:19:48,060
given that most of these false

498
00:19:46,650 --> 00:19:50,070
post-detection false positives are

499
00:19:48,060 --> 00:19:51,600
independent from each other that means

500
00:19:50,070 --> 00:19:54,480
the probability of getting to five of

501
00:19:51,600 --> 00:19:57,570
them consecutively happening

502
00:19:54,480 --> 00:19:59,880
gets pretty much to that probability so

503
00:19:57,570 --> 00:20:01,649
you are delaying a bit the decision but

504
00:19:59,880 --> 00:20:03,180
in the particular case of attacks that

505
00:20:01,650 --> 00:20:04,770
in volume this is pretty

506
00:20:03,180 --> 00:20:06,840
always the case anybody who's running

507
00:20:04,770 --> 00:20:09,920
any kind of a tool to find SEO

508
00:20:06,840 --> 00:20:13,500
injections will not do to SQL injections

509
00:20:09,920 --> 00:20:16,980
and these are the factors that can

510
00:20:13,500 --> 00:20:18,870
influence this scoring so you got the

511
00:20:16,980 --> 00:20:20,670
type of rarity so different authorities

512
00:20:18,870 --> 00:20:23,090
like remote code execution school

513
00:20:20,670 --> 00:20:25,260
injection XSS have different a

514
00:20:23,090 --> 00:20:28,980
probabilities of creating a false

515
00:20:25,260 --> 00:20:31,350
positive then the rule so one reg X you

516
00:20:28,980 --> 00:20:33,840
can work worse than a different regs and

517
00:20:31,350 --> 00:20:36,240
of course the source because it's not

518
00:20:33,840 --> 00:20:37,949
the same getting it on the payload than

519
00:20:36,240 --> 00:20:40,140
getting it on the cookie the probability

520
00:20:37,950 --> 00:20:42,390
of the rule triggering a false positive

521
00:20:40,140 --> 00:20:44,460
for that type of charity can change

522
00:20:42,390 --> 00:20:45,720
drastically based on that and this is

523
00:20:44,460 --> 00:20:47,040
all information that you already have

524
00:20:45,720 --> 00:20:51,780
because you're already collecting this

525
00:20:47,040 --> 00:20:53,490
all as part of the out-of-band model so

526
00:20:51,780 --> 00:20:55,710
this is something else that a Joe liya

527
00:20:53,490 --> 00:20:58,770
that's a scientist at booking worked on

528
00:20:55,710 --> 00:21:01,770
so in this particular case it's quite

529
00:20:58,770 --> 00:21:04,200
small but the idea is that it's checking

530
00:21:01,770 --> 00:21:06,480
for different periods of time so for one

531
00:21:04,200 --> 00:21:08,070
minute for five minutes in different

532
00:21:06,480 --> 00:21:11,730
thresholds which you can imagine it as

533
00:21:08,070 --> 00:21:14,669
course what is the amount of false

534
00:21:11,730 --> 00:21:16,200
positives or actual attacks which are

535
00:21:14,670 --> 00:21:17,940
not marked what is the amount of

536
00:21:16,200 --> 00:21:20,340
customers which will be affected and

537
00:21:17,940 --> 00:21:21,630
what's the precision so basically of all

538
00:21:20,340 --> 00:21:23,459
the attacks we know that actually

539
00:21:21,630 --> 00:21:25,920
happened how many of them we are

540
00:21:23,460 --> 00:21:27,720
actually testing so in our case if we're

541
00:21:25,920 --> 00:21:30,690
looking to get to a syrup or false

542
00:21:27,720 --> 00:21:32,580
positive rate probability then we

543
00:21:30,690 --> 00:21:35,280
actually are looking to the ones that

544
00:21:32,580 --> 00:21:38,100
have zero percent of customers affected

545
00:21:35,280 --> 00:21:42,330
but the highest number of malicious

546
00:21:38,100 --> 00:21:44,219
requests a lot and that's how we can you

547
00:21:42,330 --> 00:21:45,720
can either do this analysis by hand or

548
00:21:44,220 --> 00:21:47,700
you can actually have these analyses

549
00:21:45,720 --> 00:21:51,960
happen automatically by adjusting the

550
00:21:47,700 --> 00:21:55,500
threshold so this is pretty much the

551
00:21:51,960 --> 00:21:58,200
hybrid mode in a way this has the

552
00:21:55,500 --> 00:22:00,630
benefit of not adding the latency to the

553
00:21:58,200 --> 00:22:03,090
good visitors since every time there is

554
00:22:00,630 --> 00:22:04,920
a request it's actually checks is this

555
00:22:03,090 --> 00:22:07,379
request which i think is malicious and

556
00:22:04,920 --> 00:22:10,020
in those cases that's not going to add

557
00:22:07,380 --> 00:22:11,190
the latency if it's not malicious then

558
00:22:10,020 --> 00:22:13,379
you have the flexibility and

559
00:22:11,190 --> 00:22:14,910
extensibility which is great because

560
00:22:13,380 --> 00:22:16,380
that also means that you don't have to

561
00:22:14,910 --> 00:22:17,800
start thinking about having several

562
00:22:16,380 --> 00:22:19,480
different security components

563
00:22:17,800 --> 00:22:21,550
you could embed your body tection

564
00:22:19,480 --> 00:22:26,170
solution with your retina meter with

565
00:22:21,550 --> 00:22:28,450
your normal laughs component and get all

566
00:22:26,170 --> 00:22:30,280
these benefits so in some cases you

567
00:22:28,450 --> 00:22:31,480
might want to actually have it write it

568
00:22:30,280 --> 00:22:33,760
for everything but depending on

569
00:22:31,480 --> 00:22:35,920
application in my change and the

570
00:22:33,760 --> 00:22:37,480
concerned off they're looking for

571
00:22:35,920 --> 00:22:40,600
specific actually that should not be

572
00:22:37,480 --> 00:22:42,460
detections so you don't carry a well

573
00:22:40,600 --> 00:22:44,379
actually that's the point this is a

574
00:22:42,460 --> 00:22:46,300
remove your concerns of the detection of

575
00:22:44,380 --> 00:22:48,760
false positives because you really don't

576
00:22:46,300 --> 00:22:51,550
care that much if you on the out-of-band

577
00:22:48,760 --> 00:22:53,800
process you are detecting things which

578
00:22:51,550 --> 00:22:55,240
are malicious or they out of fun process

579
00:22:53,800 --> 00:22:57,850
things are malicious what you care about

580
00:22:55,240 --> 00:23:00,160
is what are you actually moving from the

581
00:22:57,850 --> 00:23:02,590
outer band to the in line and what's

582
00:23:00,160 --> 00:23:04,210
actually blocking there and you have to

583
00:23:02,590 --> 00:23:07,360
find this detection false bodies are now

584
00:23:04,210 --> 00:23:08,110
known as so that noise is not going to

585
00:23:07,360 --> 00:23:11,129
change anything

586
00:23:08,110 --> 00:23:14,620
worst case is only delaying the decision

587
00:23:11,130 --> 00:23:18,430
and of course one of the big caveat is

588
00:23:14,620 --> 00:23:21,489
the time so now if you can imagine of

589
00:23:18,430 --> 00:23:23,730
zero day you have a one remote code

590
00:23:21,490 --> 00:23:25,960
execution you've succeeded once and

591
00:23:23,730 --> 00:23:27,670
there was never any malicious traffic

592
00:23:25,960 --> 00:23:30,460
going on from here nobody ever knew

593
00:23:27,670 --> 00:23:31,840
about your day in a way that means that

594
00:23:30,460 --> 00:23:35,050
you also don't have it as a room dwarf

595
00:23:31,840 --> 00:23:37,179
but it also means that it's going in

596
00:23:35,050 --> 00:23:38,800
blind mode you might find out about it

597
00:23:37,180 --> 00:23:40,180
on the outer pan mode but it might be

598
00:23:38,800 --> 00:23:42,399
too late already because you're not

599
00:23:40,180 --> 00:23:45,910
proud in that traffic so if for example

600
00:23:42,400 --> 00:23:48,730
you have let's say an endpoint we or an

601
00:23:45,910 --> 00:23:50,530
application which has very high risk

602
00:23:48,730 --> 00:23:52,420
data like transactional data you might

603
00:23:50,530 --> 00:23:54,490
say actually I want this always in line

604
00:23:52,420 --> 00:23:56,650
I don't care about a latency I don't

605
00:23:54,490 --> 00:23:58,150
care about affecting our customers but

606
00:23:56,650 --> 00:23:59,920
if you are dealing with most

607
00:23:58,150 --> 00:24:02,140
applications where the risk appetite

608
00:23:59,920 --> 00:24:04,240
might be higher then you can actually

609
00:24:02,140 --> 00:24:07,210
say okay I will have a different score

610
00:24:04,240 --> 00:24:08,980
which might not be able to block every

611
00:24:07,210 --> 00:24:10,630
single request on the first time but I'm

612
00:24:08,980 --> 00:24:13,600
will not allow more than three requests

613
00:24:10,630 --> 00:24:16,380
to happen with this vanishes requests

614
00:24:13,600 --> 00:24:18,550
and of course increased complexity

615
00:24:16,380 --> 00:24:20,110
depending on what your current setup is

616
00:24:18,550 --> 00:24:22,000
to actually reduce your complexity if

617
00:24:20,110 --> 00:24:23,110
you have a huge network topology and

618
00:24:22,000 --> 00:24:25,240
you're dealing with multiple data

619
00:24:23,110 --> 00:24:28,929
centers but if you are dealing with

620
00:24:25,240 --> 00:24:31,210
cloud woth already then in that case you

621
00:24:28,930 --> 00:24:34,870
might have a bigger complexity

622
00:24:31,210 --> 00:24:36,670
in in some cases for example with aw

623
00:24:34,870 --> 00:24:39,370
swath you could actually pull this off

624
00:24:36,670 --> 00:24:42,070
by just creating a reverse proxy to that

625
00:24:39,370 --> 00:24:44,350
cloud path and then using the normal

626
00:24:42,070 --> 00:24:46,510
login operations of the web for your

627
00:24:44,350 --> 00:24:48,040
application for the autopen mode but of

628
00:24:46,510 --> 00:24:50,830
course it's more complex than just

629
00:24:48,040 --> 00:24:56,170
having a black box which starts blocking

630
00:24:50,830 --> 00:25:02,760
water exists so yeah now I will attempt

631
00:24:56,170 --> 00:25:06,280
to the demo so for this I have the I

632
00:25:02,760 --> 00:25:12,820
have a coordinated cluster running so

633
00:25:06,280 --> 00:25:15,160
for example here you can see that there

634
00:25:12,820 --> 00:25:18,970
is the web service then there is state

635
00:25:15,160 --> 00:25:22,180
store you have lk and there's a demo

636
00:25:18,970 --> 00:25:30,940
website which i want to protect with

637
00:25:22,180 --> 00:25:32,980
this web service so if we go to a

638
00:25:30,940 --> 00:25:37,000
website i'll show you will just open

639
00:25:32,980 --> 00:25:40,120
your design on my website it's working

640
00:25:37,000 --> 00:25:45,070
now in particular i have the web site

641
00:25:40,120 --> 00:25:47,830
configured in identifier mode which

642
00:25:45,070 --> 00:25:49,419
means that at the request stage so when

643
00:25:47,830 --> 00:25:51,490
the request comes in it's actually

644
00:25:49,420 --> 00:25:53,560
checking if there's any identifier on

645
00:25:51,490 --> 00:25:56,590
the state store that needs to route in

646
00:25:53,560 --> 00:25:58,030
online in the response stage when the

647
00:25:56,590 --> 00:26:00,669
orchestra mouse comes out this is

648
00:25:58,030 --> 00:26:03,580
disabled and then I saw also a wife

649
00:26:00,670 --> 00:26:05,500
proxy routing so in this particular case

650
00:26:03,580 --> 00:26:06,909
because one local IP because I have a

651
00:26:05,500 --> 00:26:09,310
scanner which is constantly scanning to

652
00:26:06,910 --> 00:26:12,850
make sure things are working but my IP

653
00:26:09,310 --> 00:26:15,730
is not there which means that if I

654
00:26:12,850 --> 00:26:18,580
execute an SQL injection nothing should

655
00:26:15,730 --> 00:26:20,650
happen or at least each allow it now

656
00:26:18,580 --> 00:26:23,980
if I execute thorough of them what

657
00:26:20,650 --> 00:26:26,260
should happen is that now they request

658
00:26:23,980 --> 00:26:28,720
itself should have gone through the out

659
00:26:26,260 --> 00:26:34,930
of man mode and if I check the

660
00:26:28,720 --> 00:26:38,440
configuration give it a bit of time hmm

661
00:26:34,930 --> 00:26:41,280
oh I know it's my I think it had a a

662
00:26:38,440 --> 00:26:41,280
lock placed

663
00:26:44,010 --> 00:26:50,950
so literally then I have a lock okay

664
00:26:48,450 --> 00:26:52,570
it was not a lot of people's just taking

665
00:26:50,950 --> 00:26:56,830
time so basically what happened right

666
00:26:52,570 --> 00:26:58,510
now is that this request was blocked but

667
00:26:56,830 --> 00:27:00,010
this one is not blocked and I don't know

668
00:26:58,510 --> 00:27:02,710
if you notice but there's a bit of delay

669
00:27:00,010 --> 00:27:04,840
now when I do this the delay is actually

670
00:27:02,710 --> 00:27:06,010
the extra call to the web service which

671
00:27:04,840 --> 00:27:09,129
is going on behind the scenes

672
00:27:06,010 --> 00:27:11,800
and in the same way if we wanted to say

673
00:27:09,130 --> 00:27:16,300
something like okay that's actually have

674
00:27:11,800 --> 00:27:21,100
it enabled in full mode so for example

675
00:27:16,300 --> 00:27:23,169
we do something like this and show the

676
00:27:21,100 --> 00:27:27,639
configuration we still see this is my IP

677
00:27:23,170 --> 00:27:34,600
address which was detected at 28:35 but

678
00:27:27,640 --> 00:27:37,750
we remove that IP address that should

679
00:27:34,600 --> 00:27:39,820
mean that this is still blocked and this

680
00:27:37,750 --> 00:27:41,830
is also still taking time because I have

681
00:27:39,820 --> 00:27:43,960
said actually in line it should be full

682
00:27:41,830 --> 00:27:47,139
mode so every single request goes in the

683
00:27:43,960 --> 00:27:48,820
inland model and the visualization that

684
00:27:47,140 --> 00:27:50,560
you comes out of the box with this which

685
00:27:48,820 --> 00:27:53,379
is basically a telephone script which

686
00:27:50,560 --> 00:27:55,950
builds this is elasticsearch and here

687
00:27:53,380 --> 00:27:58,360
you can see for example my IP address is

688
00:27:55,950 --> 00:28:02,800
being detected by this part to promote

689
00:27:58,360 --> 00:28:06,939
Security Rule and if I check them I

690
00:28:02,800 --> 00:28:08,860
should see that not security this

691
00:28:06,940 --> 00:28:12,070
particular rule it thinks it's normal

692
00:28:08,860 --> 00:28:17,169
okay so this is not no no it's something

693
00:28:12,070 --> 00:28:19,990
which set up here so it's the text and

694
00:28:17,170 --> 00:28:21,820
SQL injection and then what happened was

695
00:28:19,990 --> 00:28:24,010
that there were three planes running so

696
00:28:21,820 --> 00:28:25,899
multi thought was an attack rate limiter

697
00:28:24,010 --> 00:28:28,720
is nothing it's an attack the rule

698
00:28:25,900 --> 00:28:30,970
engine does not think it's an attack so

699
00:28:28,720 --> 00:28:34,090
in the same way I mention that you can

700
00:28:30,970 --> 00:28:36,790
have syrup lines so I could just say

701
00:28:34,090 --> 00:28:40,230
this apart to our IP address I want to

702
00:28:36,790 --> 00:28:44,710
add it as an identifier to be blocked so

703
00:28:40,230 --> 00:28:47,260
we just say this one and we just create

704
00:28:44,710 --> 00:28:49,240
this this rule it says this particular

705
00:28:47,260 --> 00:28:51,670
IP address to be blocked which means

706
00:28:49,240 --> 00:28:54,820
that now know no matter what kind of a

707
00:28:51,670 --> 00:28:56,920
request you modsecurity thought it was

708
00:28:54,820 --> 00:28:58,780
not an attack but a different line which

709
00:28:56,920 --> 00:29:00,340
was the rule engine thought it was an

710
00:28:58,780 --> 00:29:02,290
attack so it is just a very simple

711
00:29:00,340 --> 00:29:03,370
example of how this can be extended so

712
00:29:02,290 --> 00:29:05,379
this could be also something which is

713
00:29:03,370 --> 00:29:07,050
checking if it's a bot or this is a

714
00:29:05,380 --> 00:29:11,080
different product you have for fraud

715
00:29:07,050 --> 00:29:13,300
from that perspective and finally you

716
00:29:11,080 --> 00:29:15,790
can also do the abuse or patching which

717
00:29:13,300 --> 00:29:20,020
means that if we do something like this

718
00:29:15,790 --> 00:29:22,840
and let's say that you know that this

719
00:29:20,020 --> 00:29:27,990
particular ping endpoint a has a

720
00:29:22,840 --> 00:29:31,959
banality so this one you could actually

721
00:29:27,990 --> 00:29:33,670
configure and say that you want to add

722
00:29:31,960 --> 00:29:35,140
the virtual patching for that particular

723
00:29:33,670 --> 00:29:37,060
endpoint and that basically means that

724
00:29:35,140 --> 00:29:39,220
any request that goes to that particular

725
00:29:37,060 --> 00:29:41,679
endpoint is not going to check if this

726
00:29:39,220 --> 00:29:45,370
is malicious or not so let me delete

727
00:29:41,680 --> 00:29:49,000
identify us again so this basically is

728
00:29:45,370 --> 00:29:53,800
cleaning the cache so that now if we

729
00:29:49,000 --> 00:29:55,270
check the configuration we have this

730
00:29:53,800 --> 00:29:57,850
block rule actually need to remove the

731
00:29:55,270 --> 00:30:00,010
block rule then I can actually do the

732
00:29:57,850 --> 00:30:03,189
VPN for a second should be safe this

733
00:30:00,010 --> 00:30:05,350
Wi-Fi I hope so now I should have a

734
00:30:03,190 --> 00:30:08,170
different IP address which means that if

735
00:30:05,350 --> 00:30:13,889
I do a request here with an escrow

736
00:30:08,170 --> 00:30:18,700
injection this is still good right no

737
00:30:13,890 --> 00:30:22,800
check ID got disconnected oh yeah so

738
00:30:18,700 --> 00:30:26,290
it's pretty much how it works I will not

739
00:30:22,800 --> 00:30:28,180
try my fight more with the demo but it

740
00:30:26,290 --> 00:30:30,250
is it's in github so what I did

741
00:30:28,180 --> 00:30:32,680
basically I like ten hours ago or

742
00:30:30,250 --> 00:30:33,880
yesterday I just run a char phone script

743
00:30:32,680 --> 00:30:35,800
that will pretty much it

744
00:30:33,880 --> 00:30:37,030
everything is working out of the box you

745
00:30:35,800 --> 00:30:38,430
can then connect and do whatever you

746
00:30:37,030 --> 00:30:42,060
want

747
00:30:38,430 --> 00:30:44,890
so just to go over what we just saw so

748
00:30:42,060 --> 00:30:46,840
just make sure it's very clear what

749
00:30:44,890 --> 00:30:51,640
happened was the first request that goes

750
00:30:46,840 --> 00:30:53,949
to a application okay it's actually

751
00:30:51,640 --> 00:30:55,540
there's a cache check so it's not on

752
00:30:53,950 --> 00:30:58,000
that request but your second check going

753
00:30:55,540 --> 00:31:00,639
on which is able to decide actually this

754
00:30:58,000 --> 00:31:02,770
IP address for example or this user ID

755
00:31:00,640 --> 00:31:05,470
is not malicious we don't hide it in our

756
00:31:02,770 --> 00:31:07,660
state then that sense that per to our

757
00:31:05,470 --> 00:31:09,669
request by encapsulating it so you can

758
00:31:07,660 --> 00:31:12,159
imagine that your serializing the

759
00:31:09,669 --> 00:31:14,019
requires the headers the payload enough

760
00:31:12,159 --> 00:31:15,279
for you to be able to play as close as

761
00:31:14,019 --> 00:31:17,379
possible to the original request

762
00:31:15,279 --> 00:31:19,839
information through a channel like a

763
00:31:17,379 --> 00:31:22,269
parcel then there's a data flow

764
00:31:19,839 --> 00:31:25,719
component which is looking at this

765
00:31:22,269 --> 00:31:29,079
request and sending an API call to a

766
00:31:25,719 --> 00:31:30,459
service the exact same API call that you

767
00:31:29,079 --> 00:31:32,049
might have from the application when

768
00:31:30,459 --> 00:31:34,779
it's in inline mode is happening on the

769
00:31:32,049 --> 00:31:37,149
outer panel so it's evaluating is this

770
00:31:34,779 --> 00:31:39,039
an attack or not based on that it's

771
00:31:37,149 --> 00:31:40,779
getting a prediction and doing some

772
00:31:39,039 --> 00:31:42,820
score calculation like how many have I

773
00:31:40,779 --> 00:31:44,849
seen for this application in this period

774
00:31:42,820 --> 00:31:47,349
of time for these different fingerprints

775
00:31:44,849 --> 00:31:49,599
then the detection component is the one

776
00:31:47,349 --> 00:31:51,820
that can get with historical data from

777
00:31:49,599 --> 00:31:54,609
bigquery and say okay this particular

778
00:31:51,820 --> 00:31:57,129
fingerprint of user ID in this period of

779
00:31:54,609 --> 00:31:59,649
time I have not seen anything let's say

780
00:31:57,129 --> 00:32:03,759
to good about it so we should treat it

781
00:31:59,649 --> 00:32:06,609
as a normal a fingerprint then I will

782
00:32:03,759 --> 00:32:08,079
also check on the context of the how

783
00:32:06,609 --> 00:32:10,359
long it has been for this particular

784
00:32:08,079 --> 00:32:13,029
endpoint and take into account the false

785
00:32:10,359 --> 00:32:16,208
positive rate and what happens is that

786
00:32:13,029 --> 00:32:17,709
that might decide in the detection mode

787
00:32:16,209 --> 00:32:19,749
okay this particular fingerprint gets

788
00:32:17,709 --> 00:32:21,789
uploaded to the cache which means that

789
00:32:19,749 --> 00:32:23,589
every 100 milliseconds or every second

790
00:32:21,789 --> 00:32:26,919
the web application is refreshing that

791
00:32:23,589 --> 00:32:28,809
cache internally and then for the next

792
00:32:26,919 --> 00:32:31,119
week west that happens or this 7th

793
00:32:28,809 --> 00:32:34,329
request as many hours need for the auto

794
00:32:31,119 --> 00:32:36,299
pan mode to think this is malicious then

795
00:32:34,329 --> 00:32:40,320
the application gets a request and

796
00:32:36,299 --> 00:32:42,999
performs it and getting the cache update

797
00:32:40,320 --> 00:32:44,320
perform stay in line behavior because

798
00:32:42,999 --> 00:32:46,570
now it considers that this particular

799
00:32:44,320 --> 00:32:48,129
fingerprint is in line and what this

800
00:32:46,570 --> 00:32:49,809
basically accomplishes is that you

801
00:32:48,129 --> 00:32:51,549
actually have the two modes going at the

802
00:32:49,809 --> 00:32:52,899
same time you have most of your traffic

803
00:32:51,549 --> 00:32:55,450
in an out of run mode

804
00:32:52,899 --> 00:32:57,279
but some parts of the traffic which are

805
00:32:55,450 --> 00:32:59,829
concealed manages are routed in an

806
00:32:57,279 --> 00:33:02,169
inline mode and depending on your risk

807
00:32:59,829 --> 00:33:05,408
appetite that percentage can change and

808
00:33:02,169 --> 00:33:06,719
what your position is might be lower and

809
00:33:05,409 --> 00:33:09,339
you might accept more false positives

810
00:33:06,719 --> 00:33:11,289
but this does allow you to get to the

811
00:33:09,339 --> 00:33:14,619
false positive rate to pretty much zero

812
00:33:11,289 --> 00:33:17,259
and the biggest reason for you to then

813
00:33:14,619 --> 00:33:19,809
tap locking false positives is now the

814
00:33:17,259 --> 00:33:22,239
thresholds that you decide because in a

815
00:33:19,809 --> 00:33:23,560
way this allows you to even consider if

816
00:33:22,239 --> 00:33:25,300
I have a bag or

817
00:33:23,560 --> 00:33:26,800
not security or I have about Rex or

818
00:33:25,300 --> 00:33:29,290
somebody employees and you know

819
00:33:26,800 --> 00:33:31,300
application what this score that should

820
00:33:29,290 --> 00:33:33,970
be there so I will actually affect the

821
00:33:31,300 --> 00:33:37,659
customer and we have found out that that

822
00:33:33,970 --> 00:33:40,540
score actually can be still be a high

823
00:33:37,660 --> 00:33:42,340
enough for you to a add so much friction

824
00:33:40,540 --> 00:33:43,990
and so many problems to attackers that

825
00:33:42,340 --> 00:33:46,060
they can actually discover any linearity

826
00:33:43,990 --> 00:33:49,030
and at the same time even if there's a

827
00:33:46,060 --> 00:33:50,919
bug on the application that actually

828
00:33:49,030 --> 00:33:53,080
makes a cookie loop like an SQL

829
00:33:50,920 --> 00:33:54,760
injection that still is not going to

830
00:33:53,080 --> 00:33:57,129
affect the regular customers which are

831
00:33:54,760 --> 00:33:59,730
not doing like a hundred requests per

832
00:33:57,130 --> 00:34:02,980
minute depend on leave your application

833
00:33:59,730 --> 00:34:04,960
so yeah as a summary what I mentioned

834
00:34:02,980 --> 00:34:07,180
was that you can use the hybrid mode try

835
00:34:04,960 --> 00:34:10,449
the latency to manage us actors stopping

836
00:34:07,180 --> 00:34:11,889
the false positives and this is key you

837
00:34:10,449 --> 00:34:13,928
can actually do it per application and

838
00:34:11,889 --> 00:34:15,460
per endpoint so all these coin

839
00:34:13,929 --> 00:34:17,500
calculations can depend on how this

840
00:34:15,460 --> 00:34:20,020
endpoint we react to different clients

841
00:34:17,500 --> 00:34:22,449
that you have for the worth and the

842
00:34:20,020 --> 00:34:24,790
flexibility things like adding a machine

843
00:34:22,449 --> 00:34:27,158
learning model or adding your own custom

844
00:34:24,790 --> 00:34:29,409
rules even if you're using a commercial

845
00:34:27,159 --> 00:34:30,850
product so you can have the best watch

846
00:34:29,409 --> 00:34:32,950
commercial product and still say ok

847
00:34:30,850 --> 00:34:35,739
actually I want to also use these other

848
00:34:32,949 --> 00:34:38,199
things to expand the capabilities or to

849
00:34:35,739 --> 00:34:43,870
improve the context awareness of that

850
00:34:38,199 --> 00:34:47,049
product so yeah you can try it is here

851
00:34:43,870 --> 00:34:51,279
in gift hub just doing this they come

852
00:34:47,050 --> 00:34:52,290
online if you just execute this it

853
00:34:51,280 --> 00:34:55,360
should actually

854
00:34:52,290 --> 00:34:56,980
create some users which are needed a set

855
00:34:55,360 --> 00:35:01,210
up later they start the terraform

856
00:34:56,980 --> 00:35:03,460
project and I think it might also start

857
00:35:01,210 --> 00:35:05,860
a reverse proxy for the qivana but

858
00:35:03,460 --> 00:35:08,110
that's pretty much it and you can follow

859
00:35:05,860 --> 00:35:10,690
me on Twitter so many questions or

860
00:35:08,110 --> 00:35:15,990
messages and let me know if you have any

861
00:35:10,690 --> 00:35:15,990
questions thank you

862
00:35:16,060 --> 00:35:38,470
[Applause]

863
00:35:20,860 --> 00:35:40,250
any question great great great works so

864
00:35:38,470 --> 00:35:42,379
just wondering how do you actually

865
00:35:40,250 --> 00:35:43,040
detect false positives you say you don't

866
00:35:42,380 --> 00:35:45,680
care

867
00:35:43,040 --> 00:35:47,660
Jenny I as an engineer will not care as

868
00:35:45,680 --> 00:35:49,310
long as the user or somehow happy but

869
00:35:47,660 --> 00:35:51,680
you say five false positives in two

870
00:35:49,310 --> 00:35:54,080
years how do you know you're not missing

871
00:35:51,680 --> 00:35:56,480
a lot of them that anyway it's like it's

872
00:35:54,080 --> 00:35:59,390
a website small is free so if one of my

873
00:35:56,480 --> 00:36:02,780
requests fails I hit refresh and I don't

874
00:35:59,390 --> 00:36:04,609
care but how did you actually made a lot

875
00:36:02,780 --> 00:36:06,470
of effort to quantify this source like

876
00:36:04,610 --> 00:36:08,120
okay it seems to work so we're fine and

877
00:36:06,470 --> 00:36:09,680
we don't really care yeah that's a good

878
00:36:08,120 --> 00:36:11,359
point because for example what we have

879
00:36:09,680 --> 00:36:13,520
is that there are say when this is

880
00:36:11,360 --> 00:36:15,830
blocked there's a main list that tells

881
00:36:13,520 --> 00:36:18,740
you send the report here but of course

882
00:36:15,830 --> 00:36:21,380
many people might not do it so in

883
00:36:18,740 --> 00:36:24,049
practice if in two years it was lower

884
00:36:21,380 --> 00:36:26,600
than the thousands or tens of thousands

885
00:36:24,050 --> 00:36:30,320
I think this would be awesome compared

886
00:36:26,600 --> 00:36:34,819
to our alternative but it's a good point

887
00:36:30,320 --> 00:36:36,410
I would love if I think that we are

888
00:36:34,820 --> 00:36:37,670
going to we're trying to get better at

889
00:36:36,410 --> 00:36:39,649
that because we have the thing of saying

890
00:36:37,670 --> 00:36:41,180
email but then people might not send

891
00:36:39,650 --> 00:36:43,700
their emails maybe you can work with the

892
00:36:41,180 --> 00:36:46,970
UX and that by it's a good one but for

893
00:36:43,700 --> 00:36:49,100
sure what I can tell you is that if you

894
00:36:46,970 --> 00:36:50,600
have a tool which is creating detection

895
00:36:49,100 --> 00:36:52,190
of false positives this will

896
00:36:50,600 --> 00:36:54,560
dramatically reduce the blocking false

897
00:36:52,190 --> 00:36:56,780
positives because one simple way of

898
00:36:54,560 --> 00:36:58,820
actually evaluating this is that we

899
00:36:56,780 --> 00:37:00,350
actually see you can actually see every

900
00:36:58,820 --> 00:37:02,570
single thing that you actually put on

901
00:37:00,350 --> 00:37:05,720
the in any mode so if you can just do a

902
00:37:02,570 --> 00:37:07,970
quick look or an sample the ones that go

903
00:37:05,720 --> 00:37:09,680
in line which should not even with huge

904
00:37:07,970 --> 00:37:11,540
traffic should not be that many because

905
00:37:09,680 --> 00:37:13,879
you're actually pointing to the ones are

906
00:37:11,540 --> 00:37:16,100
actually creating a lot of malicious

907
00:37:13,880 --> 00:37:17,360
requests if you find one which is a

908
00:37:16,100 --> 00:37:20,839
false belief that's already a big deal

909
00:37:17,360 --> 00:37:22,880
right but that's the two things one

910
00:37:20,840 --> 00:37:24,800
getting the feedback from the user for

911
00:37:22,880 --> 00:37:26,630
customers and the other one is by

912
00:37:24,800 --> 00:37:28,779
looking at the things that you actually

913
00:37:26,630 --> 00:37:37,429
say should be routed England

914
00:37:28,779 --> 00:37:40,339
yes our questions I have one yes since

915
00:37:37,429 --> 00:37:43,249
you are using GCE product did you

916
00:37:40,339 --> 00:37:44,989
compare it to Claude are more now seeing

917
00:37:43,249 --> 00:37:47,209
that they are they have kind of worth

918
00:37:44,989 --> 00:37:51,079
now which used to be a DDoS no they have

919
00:37:47,209 --> 00:37:52,160
a rough module apparently now I would

920
00:37:51,079 --> 00:37:56,299
like to check it out

921
00:37:52,160 --> 00:37:57,618
what I'm most interested would be on do

922
00:37:56,299 --> 00:38:00,709
if they actually take into account

923
00:37:57,619 --> 00:38:02,390
context because that's the big thing at

924
00:38:00,709 --> 00:38:04,489
least then I only know if one product

925
00:38:02,390 --> 00:38:06,920
that does that which I think it's called

926
00:38:04,489 --> 00:38:09,769
a signal sciences so they actually take

927
00:38:06,920 --> 00:38:12,049
into account context but I'm not sure of

928
00:38:09,769 --> 00:38:13,308
any other part and if it's and that's

929
00:38:12,049 --> 00:38:15,019
the problem if it's something that

930
00:38:13,309 --> 00:38:16,969
doesn't take into account context you're

931
00:38:15,019 --> 00:38:21,109
basically saying that as soon as you

932
00:38:16,969 --> 00:38:22,849
have any kind of attack looking part on

933
00:38:21,109 --> 00:38:25,549
your request that's going to start

934
00:38:22,849 --> 00:38:29,689
affecting the customers so but yeah it

935
00:38:25,549 --> 00:38:30,949
would be nice to compare I didn't and I

936
00:38:29,689 --> 00:38:34,038
have another one I don't remember the

937
00:38:30,949 --> 00:38:36,289
exact output of document but is it good

938
00:38:34,039 --> 00:38:39,619
practice to run every component in the

939
00:38:36,289 --> 00:38:43,009
same pod and it's not in the simple it's

940
00:38:39,619 --> 00:38:46,130
actually the same cutter so it's like

941
00:38:43,009 --> 00:38:48,319
it's actually one container per pod so

942
00:38:46,130 --> 00:38:49,789
it when I did coop CT I'll get parts it

943
00:38:48,319 --> 00:38:53,269
gets you all the different parts in the

944
00:38:49,789 --> 00:38:54,799
same classroom oh but your are you

945
00:38:53,269 --> 00:38:56,598
actually asking all the web service

946
00:38:54,799 --> 00:38:58,219
itself the demo you made

947
00:38:56,599 --> 00:39:01,939
oh yeah so what I showed was actually

948
00:38:58,219 --> 00:39:04,099
one one cluster so I think seven

949
00:39:01,939 --> 00:39:06,348
different pods but if you go into a

950
00:39:04,099 --> 00:39:08,150
little of the web service itself it

951
00:39:06,349 --> 00:39:10,459
might make a lot of sense to say the web

952
00:39:08,150 --> 00:39:13,369
service is running every single of the

953
00:39:10,459 --> 00:39:15,469
planes as a different a sidecar in the

954
00:39:13,369 --> 00:39:18,199
same poll because that's a lot more

955
00:39:15,469 --> 00:39:19,670
efficient from that perspective and I

956
00:39:18,199 --> 00:39:20,900
think it falls the design pattern from

957
00:39:19,670 --> 00:39:23,420
coordinators I'd remember the name

958
00:39:20,900 --> 00:39:26,029
exactly for that but it that would make

959
00:39:23,420 --> 00:39:27,589
sense and they in practice if you I

960
00:39:26,029 --> 00:39:29,719
think I'm actually running mod security

961
00:39:27,589 --> 00:39:31,308
in the same content of this importance

962
00:39:29,719 --> 00:39:32,839
as a different container but just

963
00:39:31,309 --> 00:39:34,819
because I was lazy to add a different

964
00:39:32,839 --> 00:39:36,049
container in practice you would want to

965
00:39:34,819 --> 00:39:38,329
have it as a different container and

966
00:39:36,049 --> 00:39:43,029
that you can evaluate them inside a

967
00:39:38,329 --> 00:39:43,029
simple sorry any other questions

968
00:39:46,540 --> 00:39:50,359
thank you very much everyone for

969
00:39:48,380 --> 00:39:55,119
attending and if you have any questions

970
00:39:50,359 --> 00:39:55,119
send me a message or talk to me thanks

