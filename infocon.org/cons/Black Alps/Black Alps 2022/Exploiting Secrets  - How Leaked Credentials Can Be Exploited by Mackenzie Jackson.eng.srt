1
00:00:02,820 --> 00:00:06,420
uh thanks thanks everyone uh so today my

2
00:00:06,420 --> 00:00:08,220
Talk's going to be on uh exploiting

3
00:00:08,220 --> 00:00:09,300
Secrets

4
00:00:09,300 --> 00:00:11,519
um and exactly kind of how we can do

5
00:00:11,519 --> 00:00:14,759
that uh kind of attack focused talked

6
00:00:14,759 --> 00:00:16,199
there's been a lot of really technical

7
00:00:16,199 --> 00:00:18,600
talks today which I mean and yesterday

8
00:00:18,600 --> 00:00:20,939
which has been fantastic I'm much uh

9
00:00:20,939 --> 00:00:21,900
lazier

10
00:00:21,900 --> 00:00:24,000
so I'm always Keen just to find

11
00:00:24,000 --> 00:00:26,400
credentials um and use them so this is

12
00:00:26,400 --> 00:00:28,980
the The Lazy Lazy Man's Guide to uh how

13
00:00:28,980 --> 00:00:31,560
to attack things uh today but very

14
00:00:31,560 --> 00:00:34,200
quickly I have just two slides just to

15
00:00:34,200 --> 00:00:36,360
make sure everyone's up to speed uh what

16
00:00:36,360 --> 00:00:37,440
it is that I'm talking about when I'm

17
00:00:37,440 --> 00:00:39,540
talking about secrets so digital

18
00:00:39,540 --> 00:00:42,360
authentication credentials and typically

19
00:00:42,360 --> 00:00:45,000
these are your API Keys your credential

20
00:00:45,000 --> 00:00:46,260
peers

21
00:00:46,260 --> 00:00:48,899
security certificates just anything you

22
00:00:48,899 --> 00:00:51,000
don't want someone else to have

23
00:00:51,000 --> 00:00:53,640
everything that authenticates you is

24
00:00:53,640 --> 00:00:55,800
covered under this kind of category of

25
00:00:55,800 --> 00:00:58,500
of you know of Secrets

26
00:00:58,500 --> 00:01:00,000
and the reason why these are so

27
00:01:00,000 --> 00:01:02,699
problematic and so predominant is we've

28
00:01:02,699 --> 00:01:04,619
gone through a huge shift in building

29
00:01:04,619 --> 00:01:06,600
applications we're no longer building

30
00:01:06,600 --> 00:01:08,760
these Standalone monoliths anymore

31
00:01:08,760 --> 00:01:11,280
particularly in web applications we're

32
00:01:11,280 --> 00:01:13,320
building systems that consist of

33
00:01:13,320 --> 00:01:15,420
multiple different building blocks and a

34
00:01:15,420 --> 00:01:16,500
lot of those building blocks are

35
00:01:16,500 --> 00:01:18,720
third-party tools so the obvious ones

36
00:01:18,720 --> 00:01:21,320
are like credit card processing right

37
00:01:21,320 --> 00:01:23,159
you're mad if you're going to try and

38
00:01:23,159 --> 00:01:25,080
build that yourself it's much easier

39
00:01:25,080 --> 00:01:27,299
just to use stripe you can use a managed

40
00:01:27,299 --> 00:01:29,580
database you can take out of the box

41
00:01:29,580 --> 00:01:31,920
authentication with OCTA who's the

42
00:01:31,920 --> 00:01:34,740
sponsor here so we end up our evaluation

43
00:01:34,740 --> 00:01:36,840
end up ends up you know a collection of

44
00:01:36,840 --> 00:01:38,759
these different building blocks but it's

45
00:01:38,759 --> 00:01:40,979
not just for application now it's also

46
00:01:40,979 --> 00:01:44,880
for our infrastructure how we host our

47
00:01:44,880 --> 00:01:46,680
application how we test our application

48
00:01:46,680 --> 00:01:50,220
all of these Services now rely on

49
00:01:50,220 --> 00:01:51,659
secrets to be able to authenticate

50
00:01:51,659 --> 00:01:52,799
ourselves

51
00:01:52,799 --> 00:01:56,040
once we have our application running we

52
00:01:56,040 --> 00:01:58,259
gain more vulnerabilities with the

53
00:01:58,259 --> 00:02:00,600
marketing teams the sales teams then

54
00:02:00,600 --> 00:02:02,159
they want Integrations into different

55
00:02:02,159 --> 00:02:03,780
areas

56
00:02:03,780 --> 00:02:05,219
and then of course we have all our own

57
00:02:05,219 --> 00:02:07,259
microservices that we build ourselves

58
00:02:07,259 --> 00:02:09,479
that rely on different authentication

59
00:02:09,479 --> 00:02:11,940
message so let's just quickly uh kind of

60
00:02:11,940 --> 00:02:13,620
get everyone up to speed every single

61
00:02:13,620 --> 00:02:15,959
one of these logos is a access potential

62
00:02:15,959 --> 00:02:18,360
access point if I can get into one then

63
00:02:18,360 --> 00:02:20,040
my goal will be to try and elevate my

64
00:02:20,040 --> 00:02:22,020
privileges find additional credentials

65
00:02:22,020 --> 00:02:24,720
move laterally into different areas so

66
00:02:24,720 --> 00:02:26,580
this can be an initial access point it

67
00:02:26,580 --> 00:02:28,980
can be a point of privilege escalation

68
00:02:28,980 --> 00:02:32,280
or it can just be a point of actually be

69
00:02:32,280 --> 00:02:33,420
able to do something malicious

70
00:02:33,420 --> 00:02:34,980
immediately in the case of cloud

71
00:02:34,980 --> 00:02:38,280
provider keys or anything similar

72
00:02:38,280 --> 00:02:39,959
all right so I want to start off I'm

73
00:02:39,959 --> 00:02:41,040
going to look at finding these

74
00:02:41,040 --> 00:02:42,440
credentials in lots of different places

75
00:02:42,440 --> 00:02:44,940
one of the first places I want to talk

76
00:02:44,940 --> 00:02:48,060
about is on GitHub so we're all familiar

77
00:02:48,060 --> 00:02:51,060
with GitHub uh they boast about 83

78
00:02:51,060 --> 00:02:54,360
million developers use GitHub it's huge

79
00:02:54,360 --> 00:02:56,340
amounts of volume it's a literal fire

80
00:02:56,340 --> 00:02:59,940
hose of data and so much stuff ends up

81
00:02:59,940 --> 00:03:02,040
on GitHub

82
00:03:02,040 --> 00:03:04,620
so I have a very quick experiment that I

83
00:03:04,620 --> 00:03:06,599
want to do that I'll come back to

84
00:03:06,599 --> 00:03:11,780
so I have here just a random uh GitHub

85
00:03:11,780 --> 00:03:14,700
commit and I have here an AWS credential

86
00:03:14,700 --> 00:03:17,220
this is a canary token so that just

87
00:03:17,220 --> 00:03:19,980
means that if someone tries to exploit

88
00:03:19,980 --> 00:03:22,440
this then they will let me know so what

89
00:03:22,440 --> 00:03:23,879
I'm going to do is I'm going to do the

90
00:03:23,879 --> 00:03:25,379
the number one thing that no one should

91
00:03:25,379 --> 00:03:28,019
do I'm going to commit this

92
00:03:28,019 --> 00:03:31,500
into my public Repository

93
00:03:31,500 --> 00:03:33,599
and then what I'm going to do is we're

94
00:03:33,599 --> 00:03:35,220
going to be able to monitor

95
00:03:35,220 --> 00:03:37,980
who's going to try and exploit this so

96
00:03:37,980 --> 00:03:40,440
we'll come back in a few minutes and

97
00:03:40,440 --> 00:03:42,480
we'll see if anyone in the time that

98
00:03:42,480 --> 00:03:44,640
I've talking has tried to exploit this

99
00:03:44,640 --> 00:03:46,140
credential

100
00:03:46,140 --> 00:03:48,659
but first some research that we've done

101
00:03:48,659 --> 00:03:51,599
so I work for a git Guardian so we're a

102
00:03:51,599 --> 00:03:53,819
company that specializes in in finding

103
00:03:53,819 --> 00:03:56,400
Secrets but uh every year we'd write

104
00:03:56,400 --> 00:03:58,920
reports and publishings about where

105
00:03:58,920 --> 00:04:02,040
we've found credentials so we scanned

106
00:04:02,040 --> 00:04:03,780
every single commit that was made to

107
00:04:03,780 --> 00:04:06,959
GitHub in 2021 so if you push something

108
00:04:06,959 --> 00:04:10,140
publicly to GitHub we scanned it for

109
00:04:10,140 --> 00:04:12,659
secrets I'll explain exactly how we do

110
00:04:12,659 --> 00:04:15,959
that but we found over 6 million

111
00:04:15,959 --> 00:04:18,298
so it was about a two times increase

112
00:04:18,298 --> 00:04:20,339
from 2020 but there were some other

113
00:04:20,339 --> 00:04:22,079
factors in that like the the number of

114
00:04:22,079 --> 00:04:24,060
developers increasing and the amount of

115
00:04:24,060 --> 00:04:25,680
Secrets we're trying to find increasing

116
00:04:25,680 --> 00:04:29,400
but it's just a huge volume the types of

117
00:04:29,400 --> 00:04:31,080
secrets that were find were able to

118
00:04:31,080 --> 00:04:33,540
validate most of them so it's not like

119
00:04:33,540 --> 00:04:35,580
we're categorizing random High entropy

120
00:04:35,580 --> 00:04:37,440
strings that may be a unique identifier

121
00:04:37,440 --> 00:04:40,880
as a secret so 21 were for databases

122
00:04:40,880 --> 00:04:43,259
fifteen percent were for cloud storage

123
00:04:43,259 --> 00:04:45,660
so you don't need to be a genius to know

124
00:04:45,660 --> 00:04:48,120
uh what to do with a cloud storage key

125
00:04:48,120 --> 00:04:50,160
if it gets leaked

126
00:04:50,160 --> 00:04:52,080
um and all the way down even the version

127
00:04:52,080 --> 00:04:54,720
control system so we're finding GitHub

128
00:04:54,720 --> 00:04:56,699
tokens to private repositories in public

129
00:04:56,699 --> 00:04:58,380
repositories

130
00:04:58,380 --> 00:05:00,360
um so very clear escalation where you

131
00:05:00,360 --> 00:05:02,520
can go from there so the problem is

132
00:05:02,520 --> 00:05:05,820
really really massive

133
00:05:05,820 --> 00:05:09,180
um this is this kind of funny uh 500 we

134
00:05:09,180 --> 00:05:11,580
found 500 commit messages that contained

135
00:05:11,580 --> 00:05:14,639
the GitHub token so this is like if you

136
00:05:14,639 --> 00:05:17,040
put your uh the password for your email

137
00:05:17,040 --> 00:05:18,720
address in the subject line and send an

138
00:05:18,720 --> 00:05:20,400
email this is basically the equivalent

139
00:05:20,400 --> 00:05:21,960
on git is when you're putting your

140
00:05:21,960 --> 00:05:23,699
credentials to access private

141
00:05:23,699 --> 00:05:26,460
repositories in your git message but we

142
00:05:26,460 --> 00:05:29,160
find 500 of these uh which I was really

143
00:05:29,160 --> 00:05:30,419
surprised at

144
00:05:30,419 --> 00:05:32,880
and uh we could also kind of do some

145
00:05:32,880 --> 00:05:35,100
cool analysis on high level of when

146
00:05:35,100 --> 00:05:37,680
we'll actually be able to see uh up and

147
00:05:37,680 --> 00:05:39,539
coming players becoming more prominent

148
00:05:39,539 --> 00:05:41,160
and we can do that by the number of

149
00:05:41,160 --> 00:05:43,740
secrets that we find so Planet scale and

150
00:05:43,740 --> 00:05:45,180
Super Bass are two new kind of cloud

151
00:05:45,180 --> 00:05:46,680
providers

152
00:05:46,680 --> 00:05:48,060
um and then we've seen dramatic

153
00:05:48,060 --> 00:05:49,919
increases in the amount of secrets that

154
00:05:49,919 --> 00:05:52,020
we find of those leaked and that's

155
00:05:52,020 --> 00:05:54,780
important because I just leaked an AWS

156
00:05:54,780 --> 00:05:56,639
key you'll find that lots of people are

157
00:05:56,639 --> 00:05:58,979
looking for AWS Keys including AWS

158
00:05:58,979 --> 00:06:00,419
themselves

159
00:06:00,419 --> 00:06:03,720
um so they're trying to alert their

160
00:06:03,720 --> 00:06:06,780
users if one is found and leaked but as

161
00:06:06,780 --> 00:06:08,039
we grow in these number of services

162
00:06:08,039 --> 00:06:10,259
there's so many opportunities for an

163
00:06:10,259 --> 00:06:12,780
attacker to to go down different paths

164
00:06:12,780 --> 00:06:15,060
uh finding different credentials that

165
00:06:15,060 --> 00:06:17,220
don't have that maturity that don't have

166
00:06:17,220 --> 00:06:20,400
the same volume of people trying to

167
00:06:20,400 --> 00:06:21,660
prevent this

168
00:06:21,660 --> 00:06:23,039
from it

169
00:06:23,039 --> 00:06:24,419
okay so

170
00:06:24,419 --> 00:06:26,340
um

171
00:06:26,340 --> 00:06:28,199
let's just have a quick look it's

172
00:06:28,199 --> 00:06:29,819
probably a little bit

173
00:06:29,819 --> 00:06:32,340
too soon but let's have a

174
00:06:32,340 --> 00:06:35,699
so this is how many people have tried to

175
00:06:35,699 --> 00:06:37,259
exploit this now granted a lot of these

176
00:06:37,259 --> 00:06:38,460
IP addresses are going to be the same

177
00:06:38,460 --> 00:06:41,039
this isn't a new person but we can see

178
00:06:41,039 --> 00:06:42,419
in here where they're coming from this

179
00:06:42,419 --> 00:06:45,900
one's actually from Amazon but if we

180
00:06:45,900 --> 00:06:49,259
um we've got a lot from uh Berlin coming

181
00:06:49,259 --> 00:06:51,300
from uh down there and so we can

182
00:06:51,300 --> 00:06:53,400
actually see what they're trying to do

183
00:06:53,400 --> 00:06:54,419
um looking at them so these are the

184
00:06:54,419 --> 00:06:55,979
number of times that they've tried to

185
00:06:55,979 --> 00:06:58,199
exploit that at the moment

186
00:06:58,199 --> 00:06:59,460
so

187
00:06:59,460 --> 00:07:02,039
a lot of people are monitoring public

188
00:07:02,039 --> 00:07:05,220
GitHub repositories for these secrets so

189
00:07:05,220 --> 00:07:06,960
how do we do this if you're an attacker

190
00:07:06,960 --> 00:07:09,539
how do you actually find credentials

191
00:07:09,539 --> 00:07:12,120
that are useful and how do you go about

192
00:07:12,120 --> 00:07:15,060
that so it's actually quite easy and

193
00:07:15,060 --> 00:07:17,039
I'll run through some ways of of how we

194
00:07:17,039 --> 00:07:19,740
can we can use GitHub

195
00:07:19,740 --> 00:07:21,720
um to be able to do that the first one

196
00:07:21,720 --> 00:07:25,259
is not my favorite way uh but it's the

197
00:07:25,259 --> 00:07:27,300
most accessible so I'll talk about it

198
00:07:27,300 --> 00:07:29,639
and that's GitHub docking and it's

199
00:07:29,639 --> 00:07:31,199
basically using the GitHub search

200
00:07:31,199 --> 00:07:33,240
feature to be able to find credentials

201
00:07:33,240 --> 00:07:35,099
so here we're looking for a file called

202
00:07:35,099 --> 00:07:37,259
credentials and we're looking for an AWS

203
00:07:37,259 --> 00:07:40,199
access key inside that file

204
00:07:40,199 --> 00:07:42,780
there's a huge list of these kind of

205
00:07:42,780 --> 00:07:44,580
searches that you can do

206
00:07:44,580 --> 00:07:46,800
I don't find these particularly useful

207
00:07:46,800 --> 00:07:48,840
the reason why is that a lot of the

208
00:07:48,840 --> 00:07:50,340
secrets that you'll find are kind of

209
00:07:50,340 --> 00:07:53,160
buried in history and the search feature

210
00:07:53,160 --> 00:07:55,020
only looks at the top layer

211
00:07:55,020 --> 00:07:56,580
so if you really want to have some

212
00:07:56,580 --> 00:07:58,860
meaningful results then you want to go a

213
00:07:58,860 --> 00:08:01,500
lot deeper than that but fortunately

214
00:08:01,500 --> 00:08:03,599
well fortunately for the bad guys

215
00:08:03,599 --> 00:08:05,960
uh there's a much better way of

216
00:08:05,960 --> 00:08:09,120
monitoring GitHub uh for for these

217
00:08:09,120 --> 00:08:12,060
credentials that's using and abusing the

218
00:08:12,060 --> 00:08:16,139
GitHub API so when you release something

219
00:08:16,139 --> 00:08:18,780
publicly it's not just accessible it's

220
00:08:18,780 --> 00:08:22,259
actually broadcast so anyone can go to

221
00:08:22,259 --> 00:08:24,000
this address you don't even need

222
00:08:24,000 --> 00:08:26,240
authentication if you go to

223
00:08:26,240 --> 00:08:28,500
api.github.com forward slash events

224
00:08:28,500 --> 00:08:33,318
you'll get a list of all public activity

225
00:08:33,419 --> 00:08:34,979
um and there's a bunch of different

226
00:08:34,979 --> 00:08:38,099
events that we can look for but the main

227
00:08:38,099 --> 00:08:41,219
ones are the public event this is by far

228
00:08:41,219 --> 00:08:42,479
the most interesting because this is

229
00:08:42,479 --> 00:08:44,399
when a private repository goes public

230
00:08:44,399 --> 00:08:46,860
and bringing with it all of its history

231
00:08:46,860 --> 00:08:49,200
so if someone committed something in a

232
00:08:49,200 --> 00:08:50,760
development Branch a year ago it

233
00:08:50,760 --> 00:08:52,279
accidentally got merged to master or

234
00:08:52,279 --> 00:08:55,200
whatever's happened even if it's clean

235
00:08:55,200 --> 00:08:57,300
now there's going to be traces of that

236
00:08:57,300 --> 00:08:59,040
in the history and when it goes public

237
00:08:59,040 --> 00:09:00,680
it brings with it everything

238
00:09:00,680 --> 00:09:03,240
and the push event is just when we we

239
00:09:03,240 --> 00:09:04,500
push code

240
00:09:04,500 --> 00:09:08,540
so literally anyone can

241
00:09:15,240 --> 00:09:18,360
so literally anyone can see this

242
00:09:18,360 --> 00:09:20,420
um

243
00:09:21,060 --> 00:09:22,740
just trying to clean it up

244
00:09:22,740 --> 00:09:24,660
and you can see in here we get a lot of

245
00:09:24,660 --> 00:09:25,980
information too

246
00:09:25,980 --> 00:09:28,140
so it's not just kind of the information

247
00:09:28,140 --> 00:09:29,459
that's happened we also get the email

248
00:09:29,459 --> 00:09:32,760
address of the user and their GitHub ID

249
00:09:32,760 --> 00:09:35,279
which is important when we go back to

250
00:09:35,279 --> 00:09:36,720
trying to refine

251
00:09:36,720 --> 00:09:39,420
one of the difficulty things with

252
00:09:39,420 --> 00:09:42,540
one of the difficulties with GitHub

253
00:09:42,540 --> 00:09:44,940
especially is the amount of information

254
00:09:44,940 --> 00:09:47,279
it's kind of like almost a level of

255
00:09:47,279 --> 00:09:49,339
security of how much stuff is out there

256
00:09:49,339 --> 00:09:51,600
uh so it makes it difficult to be able

257
00:09:51,600 --> 00:09:53,640
to extract meaningful and be able to

258
00:09:53,640 --> 00:09:56,040
extract the meaningful data or sensitive

259
00:09:56,040 --> 00:09:59,459
data from just the fire hose that is

260
00:09:59,459 --> 00:10:01,560
there but we can use the information

261
00:10:01,560 --> 00:10:04,800
about users when they commit to be able

262
00:10:04,800 --> 00:10:06,480
to distinguish this

263
00:10:06,480 --> 00:10:09,300
so for example if I'm wanting to Target

264
00:10:09,300 --> 00:10:12,120
a specific victim so I'm wanting to

265
00:10:12,120 --> 00:10:15,959
Target a company Uber twilio monday.com

266
00:10:15,959 --> 00:10:18,180
any anyone specifically

267
00:10:18,180 --> 00:10:20,640
there's so much information coming out

268
00:10:20,640 --> 00:10:23,339
there and there's a tiny tiny percentage

269
00:10:23,339 --> 00:10:26,279
that I want so and I and I don't want to

270
00:10:26,279 --> 00:10:28,860
be wasting computational power scanning

271
00:10:28,860 --> 00:10:31,260
everything so what do we do so the the

272
00:10:31,260 --> 00:10:33,060
main step that I want from the GitHub

273
00:10:33,060 --> 00:10:35,820
API is to try and identify GitHub IDs of

274
00:10:35,820 --> 00:10:38,040
all of their employees so how do we do

275
00:10:38,040 --> 00:10:41,399
that we basically look for the victim

276
00:10:41,399 --> 00:10:44,399
domain in the in the commit so the

277
00:10:44,399 --> 00:10:46,740
commit metadata if they're using uh at

278
00:10:46,740 --> 00:10:49,860
Uber email address then I know that

279
00:10:49,860 --> 00:10:51,480
they're going to be an employee of uber

280
00:10:51,480 --> 00:10:54,300
and I can monitor that GitHub ID and

281
00:10:54,300 --> 00:10:55,560
then it doesn't matter if they commit

282
00:10:55,560 --> 00:10:57,420
with their personal email or

283
00:10:57,420 --> 00:10:59,459
professional email I've marked them as

284
00:10:59,459 --> 00:11:01,079
someone that's interesting we can do the

285
00:11:01,079 --> 00:11:03,480
same with GitHub bios we can Excel

286
00:11:03,480 --> 00:11:04,860
straight and scrape that information and

287
00:11:04,860 --> 00:11:07,260
try and create a list or any kind of

288
00:11:07,260 --> 00:11:09,540
mention of the company in the code is

289
00:11:09,540 --> 00:11:11,459
another way to refine that once we

290
00:11:11,459 --> 00:11:13,680
compile the list of IDs then we can use

291
00:11:13,680 --> 00:11:16,620
lots of different tools GG Shield is one

292
00:11:16,620 --> 00:11:18,720
I work with a guardian we build that so

293
00:11:18,720 --> 00:11:20,940
I'm totally biased but if you don't

294
00:11:20,940 --> 00:11:22,980
trust me there's there's heaps of other

295
00:11:22,980 --> 00:11:25,860
ones truffle hog get secret and then

296
00:11:25,860 --> 00:11:28,079
basically you just go into enumerate

297
00:11:28,079 --> 00:11:30,420
through your list of GitHub IDs scan the

298
00:11:30,420 --> 00:11:31,980
entire history and you're going to be

299
00:11:31,980 --> 00:11:34,019
able to find interesting stuff because

300
00:11:34,019 --> 00:11:36,300
employees very regularly and we know

301
00:11:36,300 --> 00:11:37,399
from breaches that have happened

302
00:11:37,399 --> 00:11:39,240
accidentally will commit sensitive

303
00:11:39,240 --> 00:11:41,279
information on their personal accounts

304
00:11:41,279 --> 00:11:43,320
so this is one way to kind of narrow

305
00:11:43,320 --> 00:11:46,860
down what we're looking for in this fire

306
00:11:46,860 --> 00:11:48,839
hose of information

307
00:11:48,839 --> 00:11:51,540
another way the spray and pray way which

308
00:11:51,540 --> 00:11:54,420
is very common is and it's what we've

309
00:11:54,420 --> 00:11:56,040
seen a lot of those Bots that we're just

310
00:11:56,040 --> 00:11:58,560
trying to access that token of mine were

311
00:11:58,560 --> 00:12:00,779
doing and they're listening for specific

312
00:12:00,779 --> 00:12:03,420
API keys so they may have some grips for

313
00:12:03,420 --> 00:12:06,120
AWS Keys slack Keys anything that's

314
00:12:06,120 --> 00:12:09,300
interesting they're going to find all of

315
00:12:09,300 --> 00:12:10,680
these and then they're going to sell

316
00:12:10,680 --> 00:12:13,260
them anyone that spent any amount of

317
00:12:13,260 --> 00:12:15,240
time on the dark web or in some dodgy

318
00:12:15,240 --> 00:12:18,660
telegram channels lovely places but

319
00:12:18,660 --> 00:12:20,519
anyone that's done that will know that

320
00:12:20,519 --> 00:12:23,279
it's credentials everywhere for sale so

321
00:12:23,279 --> 00:12:25,079
a lot of common ones are like slack

322
00:12:25,079 --> 00:12:27,240
credentials because a lot of employees

323
00:12:27,240 --> 00:12:29,100
will work on a slack bot as a personal

324
00:12:29,100 --> 00:12:32,459
project but accidentally commit that and

325
00:12:32,459 --> 00:12:35,000
then you have a way into that company

326
00:12:35,000 --> 00:12:37,380
package managers we see a lot of them

327
00:12:37,380 --> 00:12:39,660
being sold GitHub tokens we've just seen

328
00:12:39,660 --> 00:12:41,700
that lots of GitHub tokens themselves so

329
00:12:41,700 --> 00:12:43,980
if you have a private GitHub token that

330
00:12:43,980 --> 00:12:45,660
gets access to a company internal

331
00:12:45,660 --> 00:12:47,940
repository that's really interesting

332
00:12:47,940 --> 00:12:50,100
so if you're not looking for a specific

333
00:12:50,100 --> 00:12:51,839
victim and you just wanting to to sell

334
00:12:51,839 --> 00:12:53,700
credentials on the dark web then this is

335
00:12:53,700 --> 00:12:57,180
an absolutely uh widely used path to be

336
00:12:57,180 --> 00:12:59,279
able to gather them and then sell them

337
00:12:59,279 --> 00:13:02,700
for someone else so lots and lots of

338
00:13:02,700 --> 00:13:04,560
different areas you're probably not

339
00:13:04,560 --> 00:13:06,839
going to use open source tools for the

340
00:13:06,839 --> 00:13:10,320
scanning because they scan for huge

341
00:13:10,320 --> 00:13:13,079
different types of of Secrets it's going

342
00:13:13,079 --> 00:13:14,160
to take a lot especially if you're

343
00:13:14,160 --> 00:13:16,200
scanning all of GitHub so you're

344
00:13:16,200 --> 00:13:18,360
probably just looking for specific uh

345
00:13:18,360 --> 00:13:19,860
have some graph queries for some

346
00:13:19,860 --> 00:13:22,260
specific keys that are prefixed so like

347
00:13:22,260 --> 00:13:23,940
slack tokens always start with the same

348
00:13:23,940 --> 00:13:26,100
characters same character length so

349
00:13:26,100 --> 00:13:28,380
they're easier to find with less or less

350
00:13:28,380 --> 00:13:31,500
travel so we have heaps of Bad actors

351
00:13:31,500 --> 00:13:36,240
that are monitoring GitHub for this

352
00:13:36,240 --> 00:13:39,480
another area that is plentiful for

353
00:13:39,480 --> 00:13:41,880
sensitive information is areas like

354
00:13:41,880 --> 00:13:44,279
Docker Hub or other package managers

355
00:13:44,279 --> 00:13:46,139
so on Docker there's around about 8

356
00:13:46,139 --> 00:13:47,880
million or I think it's closer to nine

357
00:13:47,880 --> 00:13:49,680
million Docker images hosted on there

358
00:13:49,680 --> 00:13:51,899
that are publicly available so huge

359
00:13:51,899 --> 00:13:53,339
volumes

360
00:13:53,339 --> 00:13:55,980
um it's really where everyone is kind of

361
00:13:55,980 --> 00:13:58,320
storing their their information

362
00:13:58,320 --> 00:14:00,180
so we did some widespread scanning on

363
00:14:00,180 --> 00:14:01,980
Docker to see how many of these actually

364
00:14:01,980 --> 00:14:04,139
contain secrets and we found that nearly

365
00:14:04,139 --> 00:14:06,240
five percent contained at least one

366
00:14:06,240 --> 00:14:08,519
plain text credential inside it so

367
00:14:08,519 --> 00:14:10,920
that's absolutely huge you download 100

368
00:14:10,920 --> 00:14:12,420
Docker images you're going to have five

369
00:14:12,420 --> 00:14:15,899
credentials and some of them will be uh

370
00:14:15,899 --> 00:14:17,880
will be really interesting they're

371
00:14:17,880 --> 00:14:19,260
different to the types of credentials

372
00:14:19,260 --> 00:14:22,019
that we find on GitHub for example we

373
00:14:22,019 --> 00:14:23,760
find a lot more package managed

374
00:14:23,760 --> 00:14:25,860
credentials and other areas but they're

375
00:14:25,860 --> 00:14:28,019
really really interesting

376
00:14:28,019 --> 00:14:31,380
so how do we go about uh for discovering

377
00:14:31,380 --> 00:14:33,060
discovering this so we need to look a

378
00:14:33,060 --> 00:14:35,940
little bit about how Docker works to

379
00:14:35,940 --> 00:14:37,680
know how Secrets actually end up in

380
00:14:37,680 --> 00:14:39,959
Docker so many times technology like

381
00:14:39,959 --> 00:14:42,899
Docker is viewed as this mysterious

382
00:14:42,899 --> 00:14:44,100
black box

383
00:14:44,100 --> 00:14:46,740
that once it goes code goes into this

384
00:14:46,740 --> 00:14:49,019
black box it's unreadable it's unusable

385
00:14:49,019 --> 00:14:51,779
it's just kind of mystery but that's not

386
00:14:51,779 --> 00:14:54,120
actually true because it's just code it

387
00:14:54,120 --> 00:14:56,699
may be obfuscated but it's just code and

388
00:14:56,699 --> 00:14:59,399
like git Docker also maintains some form

389
00:14:59,399 --> 00:15:00,959
of History

390
00:15:00,959 --> 00:15:03,420
so this is this cool free Tool uh called

391
00:15:03,420 --> 00:15:04,560
Dive

392
00:15:04,560 --> 00:15:06,420
that you can use it's an open source

393
00:15:06,420 --> 00:15:07,800
project and basically what this is

394
00:15:07,800 --> 00:15:09,959
filming is at the top

395
00:15:09,959 --> 00:15:12,420
up the top there we have the the docker

396
00:15:12,420 --> 00:15:14,160
file and we're going through in layers

397
00:15:14,160 --> 00:15:17,100
so what we can see here is what's in

398
00:15:17,100 --> 00:15:18,959
green is the files that have been added

399
00:15:18,959 --> 00:15:22,260
these are just this is just code if

400
00:15:22,260 --> 00:15:24,660
there's secrets in that code it's gonna

401
00:15:24,660 --> 00:15:28,139
be in the docker the docker file and

402
00:15:28,139 --> 00:15:30,360
there's some interesting

403
00:15:30,360 --> 00:15:32,699
uh there's some interesting ways that

404
00:15:32,699 --> 00:15:34,740
these actually end up in there this is

405
00:15:34,740 --> 00:15:37,260
one that confuses me but I really see it

406
00:15:37,260 --> 00:15:41,160
a lot is when you kind of add a

407
00:15:41,160 --> 00:15:43,260
repository a package manager password

408
00:15:43,260 --> 00:15:45,660
credentials to access a package manager

409
00:15:45,660 --> 00:15:48,240
into your Docker file and then remove it

410
00:15:48,240 --> 00:15:50,339
later thinking that in the final Docker

411
00:15:50,339 --> 00:15:52,199
image the credential won't be there but

412
00:15:52,199 --> 00:15:54,720
Dockers built up on layers so just as I

413
00:15:54,720 --> 00:15:56,160
showed going through those layers of win

414
00:15:56,160 --> 00:15:58,380
files were added if you add credentials

415
00:15:58,380 --> 00:15:59,880
in a Docker image and remove them later

416
00:15:59,880 --> 00:16:02,639
they're still going to be extractable so

417
00:16:02,639 --> 00:16:06,360
we find lots of Secrets like this doing

418
00:16:06,360 --> 00:16:08,639
this for as a bad guy is actually uh

419
00:16:08,639 --> 00:16:09,899
quite simple it's a little bit more

420
00:16:09,899 --> 00:16:11,519
straightforward because you're just

421
00:16:11,519 --> 00:16:13,199
looking for the docker files of

422
00:16:13,199 --> 00:16:16,139
companies and I'll show some exploits

423
00:16:16,139 --> 00:16:18,000
some breaches that have actually

424
00:16:18,000 --> 00:16:20,339
happened because of this

425
00:16:20,339 --> 00:16:22,260
uh the last area before I kind of go

426
00:16:22,260 --> 00:16:24,959
into uh some and gone through the

427
00:16:24,959 --> 00:16:26,519
anatomy of some preachers that have

428
00:16:26,519 --> 00:16:29,100
happened is private repositories

429
00:16:29,100 --> 00:16:31,019
private repositories

430
00:16:31,019 --> 00:16:31,740
um

431
00:16:31,740 --> 00:16:34,980
uh hide behind this word private but

432
00:16:34,980 --> 00:16:37,920
source code is incredibly leaky and it

433
00:16:37,920 --> 00:16:40,019
doesn't have adequate protections and

434
00:16:40,019 --> 00:16:42,120
nor should it to have sensitive

435
00:16:42,120 --> 00:16:45,240
information so you you think about who

436
00:16:45,240 --> 00:16:46,560
you want to have access to your

437
00:16:46,560 --> 00:16:48,360
credentials and there's a very small

438
00:16:48,360 --> 00:16:50,100
list of people

439
00:16:50,100 --> 00:16:53,399
you know it's your project leads it's uh

440
00:16:53,399 --> 00:16:54,959
you know the the managers that have

441
00:16:54,959 --> 00:16:58,079
access to to everything and then should

442
00:16:58,079 --> 00:16:59,519
be very restricted but if you think

443
00:16:59,519 --> 00:17:01,440
about who in your company has access to

444
00:17:01,440 --> 00:17:04,079
your private repositories then it's

445
00:17:04,079 --> 00:17:06,780
widely open if Secrets end up in your

446
00:17:06,780 --> 00:17:08,520
private repositories everyone has access

447
00:17:08,520 --> 00:17:11,099
to them and private repositories are

448
00:17:11,099 --> 00:17:14,400
really bad at staying private

449
00:17:14,400 --> 00:17:17,819
so uh we scanned a bunch of large

450
00:17:17,819 --> 00:17:19,559
companies private repositories that that

451
00:17:19,559 --> 00:17:22,559
use our service so we find on average so

452
00:17:22,559 --> 00:17:25,260
if on the average uh company with 400

453
00:17:25,260 --> 00:17:28,079
developers we'll find about 13 000

454
00:17:28,079 --> 00:17:32,280
secrets one thousand of those are unique

455
00:17:32,280 --> 00:17:34,500
so that's a huge amount of unique

456
00:17:34,500 --> 00:17:37,140
secrets that we'll find in a private uh

457
00:17:37,140 --> 00:17:39,360
code Repository

458
00:17:39,360 --> 00:17:42,419
and there's ways that we can abuse this

459
00:17:42,419 --> 00:17:43,559
too

460
00:17:43,559 --> 00:17:46,799
so we obviously need access somehow to

461
00:17:46,799 --> 00:17:48,360
that private repository either it's

462
00:17:48,360 --> 00:17:50,039
accidentally been misconfigured and we

463
00:17:50,039 --> 00:17:52,140
have Public Access or we have

464
00:17:52,140 --> 00:17:55,320
compromised a developer a user so this

465
00:17:55,320 --> 00:17:58,140
is kind of coming back to you know where

466
00:17:58,140 --> 00:17:59,940
we see a lot of these credentials being

467
00:17:59,940 --> 00:18:02,820
sold on dark web a very popular one is

468
00:18:02,820 --> 00:18:05,460
access to internal private repositories

469
00:18:05,460 --> 00:18:07,080
and I'll show you some other ways that

470
00:18:07,080 --> 00:18:09,120
you can gain access to them but then

471
00:18:09,120 --> 00:18:11,820
what you can do is if you get access and

472
00:18:11,820 --> 00:18:14,100
you've found that the code is segmented

473
00:18:14,100 --> 00:18:15,660
and that you don't have access to

474
00:18:15,660 --> 00:18:18,360
everything there's free tools that will

475
00:18:18,360 --> 00:18:23,460
abuse the internal apis of popular uh

476
00:18:23,460 --> 00:18:26,460
vcs's like bitbucket gitlab to try and

477
00:18:26,460 --> 00:18:28,380
Elevate their privileges so one example

478
00:18:28,380 --> 00:18:32,340
is a free tool by IBM X-Force called SCM

479
00:18:32,340 --> 00:18:34,860
kit source code management kit and it's

480
00:18:34,860 --> 00:18:37,380
basically going to run through a list of

481
00:18:37,380 --> 00:18:39,720
different scenarios where it's going to

482
00:18:39,720 --> 00:18:42,600
try and create duplicate accounts it's

483
00:18:42,600 --> 00:18:44,100
going to try and find sensitive

484
00:18:44,100 --> 00:18:45,780
information it's going to try and find

485
00:18:45,780 --> 00:18:47,580
misconfigurations that it can exploit

486
00:18:47,580 --> 00:18:50,520
all using that internal API which will

487
00:18:50,520 --> 00:18:52,620
enable users to elevate their privileges

488
00:18:52,620 --> 00:18:54,600
you can also do things like try and

489
00:18:54,600 --> 00:18:56,460
abuse the pipelines inject malicious

490
00:18:56,460 --> 00:19:00,720
packages one example is someone was

491
00:19:00,720 --> 00:19:04,020
writing how all their secrets are

492
00:19:04,020 --> 00:19:07,020
totally segmented and they only have

493
00:19:07,020 --> 00:19:09,660
developer secrets for developers and

494
00:19:09,660 --> 00:19:11,400
it's great but actually all you needed

495
00:19:11,400 --> 00:19:13,260
to do is change in the configuration

496
00:19:13,260 --> 00:19:16,760
file of the CI CD pipeline Dev to prod

497
00:19:16,760 --> 00:19:18,780
under secrets and then you could just

498
00:19:18,780 --> 00:19:20,160
dump out all the environment variables

499
00:19:20,160 --> 00:19:22,320
for the production secrets so there's

500
00:19:22,320 --> 00:19:23,700
lots of different ways you can try and

501
00:19:23,700 --> 00:19:26,340
abuse this and then of course once you

502
00:19:26,340 --> 00:19:28,440
have access to that we scan the history

503
00:19:28,440 --> 00:19:31,260
again and we can guarantee to find some

504
00:19:31,260 --> 00:19:33,960
uh really interesting information so

505
00:19:33,960 --> 00:19:36,179
this is a just a common workflow and of

506
00:19:36,179 --> 00:19:38,400
course there's others out there of how

507
00:19:38,400 --> 00:19:42,179
you can abuse uh internal repositories

508
00:19:42,179 --> 00:19:45,299
even if there is some additional layers

509
00:19:45,299 --> 00:19:48,120
of security in there

510
00:19:48,120 --> 00:19:49,620
now the other thing I said private

511
00:19:49,620 --> 00:19:50,940
Source repositories are really bad at

512
00:19:50,940 --> 00:19:52,080
staying private

513
00:19:52,080 --> 00:19:55,799
so uh Cyber News recently did some wide

514
00:19:55,799 --> 00:19:58,020
scale kind of domain scanning to try and

515
00:19:58,020 --> 00:19:59,760
identify if there's any dot get

516
00:19:59,760 --> 00:20:02,640
directories exposed so they found over 2

517
00:20:02,640 --> 00:20:05,580
million accidentally public dot get

518
00:20:05,580 --> 00:20:06,780
directories

519
00:20:06,780 --> 00:20:09,059
so a DOT get directory isn't a git

520
00:20:09,059 --> 00:20:11,700
repository but it does contain all of

521
00:20:11,700 --> 00:20:13,080
the metadata

522
00:20:13,080 --> 00:20:15,840
for your repository so your history is

523
00:20:15,840 --> 00:20:18,120
in there and you can reconstruct it so

524
00:20:18,120 --> 00:20:19,980
about two percent of all the web servers

525
00:20:19,980 --> 00:20:22,799
that they scanned had exposed dot get

526
00:20:22,799 --> 00:20:25,440
directories so again you don't need to

527
00:20:25,440 --> 00:20:29,100
look very far to try and find something

528
00:20:29,100 --> 00:20:31,380
that has some interesting information in

529
00:20:31,380 --> 00:20:33,660
it and

530
00:20:33,660 --> 00:20:36,480
um although they didn't do the next step

531
00:20:36,480 --> 00:20:38,700
and actually scan these for for Secrets

532
00:20:38,700 --> 00:20:42,600
they did find lots of interesting uh

533
00:20:42,600 --> 00:20:44,720
information in there including

534
00:20:44,720 --> 00:20:47,820
credentials in the configuration files

535
00:20:47,820 --> 00:20:49,020
which is the only thing that they really

536
00:20:49,020 --> 00:20:51,059
scanned so we know that this is going to

537
00:20:51,059 --> 00:20:53,299
be a huge problem and another weak point

538
00:20:53,299 --> 00:20:55,740
so we really can't rely on private

539
00:20:55,740 --> 00:20:58,620
repositories staying private so what's

540
00:20:58,620 --> 00:21:00,240
the workflow for this well it's quite

541
00:21:00,240 --> 00:21:03,179
simple you have a victim domain

542
00:21:03,179 --> 00:21:04,860
um use free tools out there to try and

543
00:21:04,860 --> 00:21:06,960
find as many sub domains and areas as

544
00:21:06,960 --> 00:21:10,679
possible chaos is one sub finder and

545
00:21:10,679 --> 00:21:12,299
basically give you the biggest list for

546
00:21:12,299 --> 00:21:14,460
your victim possible then try and find

547
00:21:14,460 --> 00:21:16,140
the assets so there's some free tools as

548
00:21:16,140 --> 00:21:19,679
well a mass DRS search and then once

549
00:21:19,679 --> 00:21:21,000
you've kind of found your git

550
00:21:21,000 --> 00:21:23,760
repositories or your git directories or

551
00:21:23,760 --> 00:21:25,080
anything else of interest you can

552
00:21:25,080 --> 00:21:27,480
reconstruct them again free tools get

553
00:21:27,480 --> 00:21:30,179
hack git hacker will reconstruct a git

554
00:21:30,179 --> 00:21:31,919
directory once you have that git

555
00:21:31,919 --> 00:21:34,140
directory you can scan the history and

556
00:21:34,140 --> 00:21:36,480
find secrets and move forward so again a

557
00:21:36,480 --> 00:21:39,539
lot like at a very easy workflow of

558
00:21:39,539 --> 00:21:41,280
being able to find a sensitive

559
00:21:41,280 --> 00:21:43,919
information inside git directories that

560
00:21:43,919 --> 00:21:45,900
have been accidentally exposed so we

561
00:21:45,900 --> 00:21:48,539
really cannot rely that our private code

562
00:21:48,539 --> 00:21:51,179
is going to stay private there's lots of

563
00:21:51,179 --> 00:21:53,340
ways that this does happen it usually

564
00:21:53,340 --> 00:21:55,799
comes through manual deployments so if

565
00:21:55,799 --> 00:21:58,140
you are one stupid example if you're

566
00:21:58,140 --> 00:22:00,059
hosting a static website perhaps using

567
00:22:00,059 --> 00:22:02,700
an Amazon S3 bucket and you

568
00:22:02,700 --> 00:22:05,220
copy across everything including the git

569
00:22:05,220 --> 00:22:07,799
dot get directory then that's going to

570
00:22:07,799 --> 00:22:10,200
be publicly available but lots of other

571
00:22:10,200 --> 00:22:12,120
ways too

572
00:22:12,120 --> 00:22:14,340
so let's have a look at some attacks

573
00:22:14,340 --> 00:22:16,980
that have actually happened that use

574
00:22:16,980 --> 00:22:20,340
these techniques to be able to to gain

575
00:22:20,340 --> 00:22:22,140
access

576
00:22:22,140 --> 00:22:25,200
so code COV we probably have about the

577
00:22:25,200 --> 00:22:27,299
code COV breach that happened it

578
00:22:27,299 --> 00:22:29,940
happened last year so code COV for those

579
00:22:29,940 --> 00:22:31,679
who don't know is a code coverage tool

580
00:22:31,679 --> 00:22:34,140
it basically tests how much of your

581
00:22:34,140 --> 00:22:37,200
application is being tested and it sits

582
00:22:37,200 --> 00:22:40,020
in the CI CD pipeline so it does a very

583
00:22:40,020 --> 00:22:42,360
specific job personally I think code's a

584
00:22:42,360 --> 00:22:43,500
great tool

585
00:22:43,500 --> 00:22:45,539
um and it's it's it's still out there

586
00:22:45,539 --> 00:22:47,520
it's still really cool but they did they

587
00:22:47,520 --> 00:22:49,020
did make a mistake they caused a lot of

588
00:22:49,020 --> 00:22:51,059
Havoc at the time of the breach it had

589
00:22:51,059 --> 00:22:53,580
23 000 customers they have a lot more

590
00:22:53,580 --> 00:22:55,620
now

591
00:22:55,620 --> 00:22:58,820
um so what exactly happened

592
00:22:59,580 --> 00:23:01,919
okay image there was a plain text

593
00:23:01,919 --> 00:23:03,900
credential that someone found so anyone

594
00:23:03,900 --> 00:23:05,880
could have downloaded this anyone could

595
00:23:05,880 --> 00:23:08,220
have exploited this that credential gave

596
00:23:08,220 --> 00:23:10,559
access to

597
00:23:10,559 --> 00:23:13,500
um to a a file a bash uploader script I

598
00:23:13,500 --> 00:23:14,820
believe it was a Google storage

599
00:23:14,820 --> 00:23:16,500
credential

600
00:23:16,500 --> 00:23:19,740
so that bash upload a script was used by

601
00:23:19,740 --> 00:23:23,400
a lot of a lot of code cops customers

602
00:23:23,400 --> 00:23:25,620
um and they were able to inject

603
00:23:25,620 --> 00:23:28,200
malicious code into this bash uploader

604
00:23:28,200 --> 00:23:29,580
script

605
00:23:29,580 --> 00:23:32,100
then basically what happens is that

606
00:23:32,100 --> 00:23:34,260
script did something very simple it sent

607
00:23:34,260 --> 00:23:35,700
essentially it said every time someone

608
00:23:35,700 --> 00:23:37,980
runs code COV take all the environment

609
00:23:37,980 --> 00:23:40,559
variables and send them to the attacker

610
00:23:40,559 --> 00:23:42,840
so this affected lots of people that

611
00:23:42,840 --> 00:23:45,620
were using it rapid7 twilio monday.com

612
00:23:45,620 --> 00:23:48,539
hashicorp were all affected uh by this

613
00:23:48,539 --> 00:23:50,940
so it was only one line of code that was

614
00:23:50,940 --> 00:23:53,400
in there you can see that there it's on

615
00:23:53,400 --> 00:23:56,940
line 525 of I think nearly 2 000. so

616
00:23:56,940 --> 00:23:59,520
this was a really kind of ugly file not

617
00:23:59,520 --> 00:24:00,900
very excited would have been pretty easy

618
00:24:00,900 --> 00:24:03,659
to miss this and what this code is

619
00:24:03,659 --> 00:24:05,460
saying is this to basically take the

620
00:24:05,460 --> 00:24:07,080
environment variables and send them to

621
00:24:07,080 --> 00:24:08,280
this IP address

622
00:24:08,280 --> 00:24:12,740
now hopefully you're using development

623
00:24:12,740 --> 00:24:16,020
credentials to test your application

624
00:24:16,020 --> 00:24:17,820
if that's the case then the development

625
00:24:17,820 --> 00:24:19,620
credentials and secrets would have been

626
00:24:19,620 --> 00:24:20,940
sent to the attacker

627
00:24:20,940 --> 00:24:23,760
but the attacker was after something uh

628
00:24:23,760 --> 00:24:25,980
different they wanted the credentials

629
00:24:25,980 --> 00:24:28,020
for private repositories

630
00:24:28,020 --> 00:24:30,000
because then they were able to move into

631
00:24:30,000 --> 00:24:31,500
the private repositories of those

632
00:24:31,500 --> 00:24:33,600
companies I just mentioned hashicorp

633
00:24:33,600 --> 00:24:35,340
twilio monday.com

634
00:24:35,340 --> 00:24:37,500
I'm a bit mean to hashicorp now

635
00:24:37,500 --> 00:24:40,440
specifically because after this breach

636
00:24:40,440 --> 00:24:42,059
hachikorp had to put out a public

637
00:24:42,059 --> 00:24:45,059
statement because they had private keys

638
00:24:45,059 --> 00:24:46,620
that were exposed because someone gave

639
00:24:46,620 --> 00:24:49,980
access to their repositories now how do

640
00:24:49,980 --> 00:24:52,500
you go up another great company builds a

641
00:24:52,500 --> 00:24:54,120
fantastic tool to manage your secrets

642
00:24:54,120 --> 00:24:55,620
hashikov Vault it's one of the best

643
00:24:55,620 --> 00:24:59,220
tools out there if hashicorp who

644
00:24:59,220 --> 00:25:01,260
invented the term secret scroll

645
00:25:01,260 --> 00:25:04,020
who build secrets to protectors have

646
00:25:04,020 --> 00:25:06,299
secrets in plain text in their

647
00:25:06,299 --> 00:25:09,600
repositories there's no hope for anyone

648
00:25:09,600 --> 00:25:13,620
so they they had they had uh Secrets

649
00:25:13,620 --> 00:25:15,900
exposed because of this and so did lots

650
00:25:15,900 --> 00:25:17,480
of others so it's a really really

651
00:25:17,480 --> 00:25:20,640
widespread uh problem

652
00:25:20,640 --> 00:25:22,860
so uh what about an attack from initial

653
00:25:22,860 --> 00:25:24,840
access so there's a few to choose from

654
00:25:24,840 --> 00:25:27,480
uh Uber had had one where employees

655
00:25:27,480 --> 00:25:30,000
uploaded S3 bucket credentials into

656
00:25:30,000 --> 00:25:32,159
their personal accounts

657
00:25:32,159 --> 00:25:33,720
um I'll use this one solarwinds so we

658
00:25:33,720 --> 00:25:34,799
all know about the supply chain attack

659
00:25:34,799 --> 00:25:37,799
of solarwinds uh I like to like preface

660
00:25:37,799 --> 00:25:38,940
this by saying this with a very

661
00:25:38,940 --> 00:25:40,740
sophisticated attack with multiple

662
00:25:40,740 --> 00:25:43,200
different elements there's a chain of

663
00:25:43,200 --> 00:25:46,860
events that created what it did uh this

664
00:25:46,860 --> 00:25:49,820
is one of those uh chains but it's not

665
00:25:49,820 --> 00:25:52,380
uh the it's not everything about this

666
00:25:52,380 --> 00:25:53,340
attack

667
00:25:53,340 --> 00:25:55,620
uh so what do we know so in September in

668
00:25:55,620 --> 00:25:57,900
2019 we know that threat actors gained

669
00:25:57,900 --> 00:26:00,419
initial access to solarwinds FTP update

670
00:26:00,419 --> 00:26:02,760
server so and this was what they had

671
00:26:02,760 --> 00:26:04,200
access to because they were able to

672
00:26:04,200 --> 00:26:06,960
inject a malicious package into this FTP

673
00:26:06,960 --> 00:26:09,900
update server so it wasn't discovered

674
00:26:09,900 --> 00:26:12,120
till much later on

675
00:26:12,120 --> 00:26:15,059
um but around about 2019 in September

676
00:26:15,059 --> 00:26:17,640
was the initial access

677
00:26:17,640 --> 00:26:19,380
now coincidentally

678
00:26:19,380 --> 00:26:22,020
in 2019 in September

679
00:26:22,020 --> 00:26:24,960
a Solomon's employee committed code that

680
00:26:24,960 --> 00:26:27,539
contained credentials to that FTP server

681
00:26:27,539 --> 00:26:32,100
in their public personal Repository

682
00:26:32,100 --> 00:26:34,080
a security researcher actually found

683
00:26:34,080 --> 00:26:37,500
this and notified solarwinds but I

684
00:26:37,500 --> 00:26:39,240
imagine that the threat actors had

685
00:26:39,240 --> 00:26:40,940
already elevated their privileges enough

686
00:26:40,940 --> 00:26:43,860
or maintained secondary access through

687
00:26:43,860 --> 00:26:45,539
various means that it wouldn't have

688
00:26:45,539 --> 00:26:47,460
mattered had these been revoked at that

689
00:26:47,460 --> 00:26:48,240
point

690
00:26:48,240 --> 00:26:50,960
so this is an example of an employee

691
00:26:50,960 --> 00:26:53,580
uh committing secrets to their personal

692
00:26:53,580 --> 00:26:55,440
account and it's I keep saying personal

693
00:26:55,440 --> 00:26:57,299
because it's it's really interesting

694
00:26:57,299 --> 00:26:59,039
because

695
00:26:59,039 --> 00:27:02,580
um your personal GitHub repositories uh

696
00:27:02,580 --> 00:27:05,279
not in this security scope of your

697
00:27:05,279 --> 00:27:06,539
organization

698
00:27:06,539 --> 00:27:09,360
as a my employee can't limit what I do

699
00:27:09,360 --> 00:27:12,360
on my personal activity so that's good

700
00:27:12,360 --> 00:27:14,220
but it's also bad because I can do

701
00:27:14,220 --> 00:27:16,380
really silly things

702
00:27:16,380 --> 00:27:20,039
um by myself so this is an example of

703
00:27:20,039 --> 00:27:22,200
that happening and threat actors using

704
00:27:22,200 --> 00:27:23,700
probably some of the techniques of the

705
00:27:23,700 --> 00:27:25,460
GitHub API being able to discover this

706
00:27:25,460 --> 00:27:28,500
they noted that this was an employee of

707
00:27:28,500 --> 00:27:31,799
solarwinds and we all know the rest

708
00:27:31,799 --> 00:27:35,220
uh the last one I'll talk about is

709
00:27:35,220 --> 00:27:35,760
um

710
00:27:35,760 --> 00:27:37,440
well I lied I think I've got two more

711
00:27:37,440 --> 00:27:40,559
but this one uh is talking about private

712
00:27:40,559 --> 00:27:42,600
source code so this year we've had

713
00:27:42,600 --> 00:27:46,200
hundreds of uh source code leaks and

714
00:27:46,200 --> 00:27:47,700
they're all kind of preface with oh it's

715
00:27:47,700 --> 00:27:49,860
not that big a deal we don't rely on our

716
00:27:49,860 --> 00:27:51,360
source code being private for security

717
00:27:51,360 --> 00:27:53,039
but we'll find out that that's actually

718
00:27:53,039 --> 00:27:55,980
a lie most companies do even if they

719
00:27:55,980 --> 00:27:58,320
don't even know it but we've had huge

720
00:27:58,320 --> 00:28:01,260
amounts of uh of breaches including uh

721
00:28:01,260 --> 00:28:03,000
lapsis earlier this year that came to

722
00:28:03,000 --> 00:28:05,039
predominance and they leaked the source

723
00:28:05,039 --> 00:28:08,159
code of Microsoft Nvidia Samsung all

724
00:28:08,159 --> 00:28:09,840
these major companies so and we found

725
00:28:09,840 --> 00:28:11,100
out that these were just a group of

726
00:28:11,100 --> 00:28:12,840
teenagers so how did a group of

727
00:28:12,840 --> 00:28:15,480
teenagers manage to gain access to that

728
00:28:15,480 --> 00:28:17,820
I'll talk about that in a minute but I

729
00:28:17,820 --> 00:28:20,400
also want to talk about twitch

730
00:28:20,400 --> 00:28:22,440
um because twitch's source code was

731
00:28:22,440 --> 00:28:24,960
leaked and in the headlines we all found

732
00:28:24,960 --> 00:28:27,419
out what twitch streamers earned which

733
00:28:27,419 --> 00:28:29,100
was a lot of money

734
00:28:29,100 --> 00:28:30,419
um but that was kind of like the main

735
00:28:30,419 --> 00:28:35,039
focus on it but we uh downloaded a copy

736
00:28:35,039 --> 00:28:37,320
of twitch's code that was leaked so six

737
00:28:37,320 --> 00:28:39,360
thousand repositories were leaked uh

738
00:28:39,360 --> 00:28:40,799
there was 3 000 documents it was about

739
00:28:40,799 --> 00:28:43,020
200 gigabytes of data

740
00:28:43,020 --> 00:28:45,240
and we found nearly 6 000 or actually

741
00:28:45,240 --> 00:28:47,580
well over 6 000 credentials in here

742
00:28:47,580 --> 00:28:52,020
including 194 AWS Keys 69 twilio Keys 68

743
00:28:52,020 --> 00:28:55,559
Google keys uh 14 GitHub access tokens

744
00:28:55,559 --> 00:28:58,440
and four stripe Keys amongst others so

745
00:28:58,440 --> 00:29:00,539
lots of really interesting secrets in

746
00:29:00,539 --> 00:29:01,380
here

747
00:29:01,380 --> 00:29:03,600
now this all stemmed from a

748
00:29:03,600 --> 00:29:05,700
misconfiguration error and the attacker

749
00:29:05,700 --> 00:29:08,039
actually published a code on the

750
00:29:08,039 --> 00:29:09,960
internet which was the best thing that

751
00:29:09,960 --> 00:29:11,820
they could have done for twitch because

752
00:29:11,820 --> 00:29:14,760
twitch knew that they had a problem had

753
00:29:14,760 --> 00:29:16,740
they had much more malicious intent than

754
00:29:16,740 --> 00:29:18,000
they could have

755
00:29:18,000 --> 00:29:20,100
taken these credentials and even if they

756
00:29:20,100 --> 00:29:21,299
didn't want to exploit them they could

757
00:29:21,299 --> 00:29:23,460
have sold them on the dark web on dodgy

758
00:29:23,460 --> 00:29:25,080
telegram channels

759
00:29:25,080 --> 00:29:27,539
um for other people to launch an attack

760
00:29:27,539 --> 00:29:29,340
and twitch may not have even known that

761
00:29:29,340 --> 00:29:32,100
they had a problem so another example of

762
00:29:32,100 --> 00:29:33,840
private codes being really bad at

763
00:29:33,840 --> 00:29:35,640
staying private

764
00:29:35,640 --> 00:29:37,740
uh the last one I talked about Samsung

765
00:29:37,740 --> 00:29:39,659
Nvidia Microsoft these were all from the

766
00:29:39,659 --> 00:29:42,120
lapsis group uh so there were some

767
00:29:42,120 --> 00:29:43,679
pretty bad ones because there was uh

768
00:29:43,679 --> 00:29:46,200
signing keys from Nvidia uh that were

769
00:29:46,200 --> 00:29:48,360
used to sign malware these Keys had

770
00:29:48,360 --> 00:29:51,360
actually expired but just how it works

771
00:29:51,360 --> 00:29:53,460
with low-level credentials is that they

772
00:29:53,460 --> 00:29:55,500
often still are accepted and trusted in

773
00:29:55,500 --> 00:29:57,539
different areas so this was a really bad

774
00:29:57,539 --> 00:29:59,220
one these were in the nvidia's source

775
00:29:59,220 --> 00:30:01,740
code these keys so how does a group of

776
00:30:01,740 --> 00:30:03,480
teenagers gain access to such great

777
00:30:03,480 --> 00:30:05,520
companies source code that really take

778
00:30:05,520 --> 00:30:09,360
uh uh seriously

779
00:30:09,360 --> 00:30:11,460
um they pay people for them

780
00:30:11,460 --> 00:30:13,919
so here is leptus's telegram Channel and

781
00:30:13,919 --> 00:30:15,179
they're basically saying that we recruit

782
00:30:15,179 --> 00:30:17,399
employees at any of the following and we

783
00:30:17,399 --> 00:30:18,779
just want access to your internal

784
00:30:18,779 --> 00:30:20,039
networks or your internal git

785
00:30:20,039 --> 00:30:21,600
repositories or whatever and we pay you

786
00:30:21,600 --> 00:30:23,880
a lot of money so now we think about if

787
00:30:23,880 --> 00:30:25,919
all these secrets are in our source code

788
00:30:25,919 --> 00:30:28,919
repository do we really trust all of our

789
00:30:28,919 --> 00:30:31,500
employees completely I mean we we should

790
00:30:31,500 --> 00:30:32,820
but we should

791
00:30:32,820 --> 00:30:34,500
we should theoretically trust them but

792
00:30:34,500 --> 00:30:36,419
we shouldn't in practice

793
00:30:36,419 --> 00:30:38,760
um because there's so much sensitive

794
00:30:38,760 --> 00:30:40,140
information that we can find even if

795
00:30:40,140 --> 00:30:42,299
it's not a critical asset

796
00:30:42,299 --> 00:30:44,880
um so you as an intern that just got a

797
00:30:44,880 --> 00:30:46,620
speeding fine may take five thousand

798
00:30:46,620 --> 00:30:48,179
dollars to giving access to an internal

799
00:30:48,179 --> 00:30:49,740
repository and not even feel that bad

800
00:30:49,740 --> 00:30:51,059
about it thinking that there's not much

801
00:30:51,059 --> 00:30:53,520
in there but this is actually what these

802
00:30:53,520 --> 00:30:55,679
attacking groups are really after so

803
00:30:55,679 --> 00:30:58,020
this is an example but of course these

804
00:30:58,020 --> 00:30:59,340
credentials can be purchased in

805
00:30:59,340 --> 00:31:01,679
different areas as well so there's lots

806
00:31:01,679 --> 00:31:03,240
of different ways of how we can do it so

807
00:31:03,240 --> 00:31:05,580
private source code being really bad at

808
00:31:05,580 --> 00:31:07,740
being private

809
00:31:07,740 --> 00:31:11,100
uh the last one I'll talk about

810
00:31:11,100 --> 00:31:12,480
um here is this one that was recently

811
00:31:12,480 --> 00:31:17,820
happened uh and that is Uber so uh this

812
00:31:17,820 --> 00:31:19,799
one was actually an example of a

813
00:31:19,799 --> 00:31:21,659
credential being purchased on the dark

814
00:31:21,659 --> 00:31:24,720
web so this was for a VPN that was

815
00:31:24,720 --> 00:31:26,640
purchased they did have multi-factor

816
00:31:26,640 --> 00:31:30,360
authentication but they doing some uh

817
00:31:30,360 --> 00:31:32,279
social engineering were able to get the

818
00:31:32,279 --> 00:31:33,720
victim to actually accept their

819
00:31:33,720 --> 00:31:36,240
multi-factor attempts

820
00:31:36,240 --> 00:31:38,460
they gained access to the VPN

821
00:31:38,460 --> 00:31:40,440
and then they started scanning Uber's

822
00:31:40,440 --> 00:31:41,520
infrastructure and then they found

823
00:31:41,520 --> 00:31:43,020
something really interesting it was like

824
00:31:43,020 --> 00:31:45,360
a worst case scenario for Uber they

825
00:31:45,360 --> 00:31:48,960
found uh admin credentials to their Pam

826
00:31:48,960 --> 00:31:51,779
system privilege access management on a

827
00:31:51,779 --> 00:31:53,039
Powershell script that was version

828
00:31:53,039 --> 00:31:55,260
controlled so

829
00:31:55,260 --> 00:31:57,179
stim is like your secrets manager and

830
00:31:57,179 --> 00:31:59,640
your password manager rolled into one so

831
00:31:59,640 --> 00:32:01,380
once they had admin credentials they

832
00:32:01,380 --> 00:32:03,360
were able to create user accounts for

833
00:32:03,360 --> 00:32:04,980
literally all of Uber's internal

834
00:32:04,980 --> 00:32:07,559
infrastructure their AWS accounts they

835
00:32:07,559 --> 00:32:10,559
could turn off their extended threats

836
00:32:10,559 --> 00:32:12,960
detection they could do so many

837
00:32:12,960 --> 00:32:14,640
different things now again this was

838
00:32:14,640 --> 00:32:17,880
links to the lapsis group and again uh

839
00:32:17,880 --> 00:32:19,740
there wasn't really that much malicious

840
00:32:19,740 --> 00:32:22,200
intent it's more clout that they seem to

841
00:32:22,200 --> 00:32:23,399
be after because then they started

842
00:32:23,399 --> 00:32:25,559
spamming the slack channels and letting

843
00:32:25,559 --> 00:32:26,940
everyone know at Uber that they had been

844
00:32:26,940 --> 00:32:28,860
breached but you could have been much

845
00:32:28,860 --> 00:32:30,720
more malicious you literally could have

846
00:32:30,720 --> 00:32:32,820
shut down Uber for a day

847
00:32:32,820 --> 00:32:34,980
um with the credentials that they had

848
00:32:34,980 --> 00:32:36,899
access to and this was in a Powershell

849
00:32:36,899 --> 00:32:39,480
script that was version controlled but

850
00:32:39,480 --> 00:32:41,220
also just on their Network

851
00:32:41,220 --> 00:32:44,039
so lots and lots and lots of different

852
00:32:44,039 --> 00:32:46,919
scenarios where we can use the

853
00:32:46,919 --> 00:32:48,539
techniques that were discussed to really

854
00:32:48,539 --> 00:32:51,899
find these credentials and exploit

855
00:32:51,899 --> 00:32:55,799
float them okay so uh coming to the end

856
00:32:55,799 --> 00:32:58,500
um why does this happen why do Secrets

857
00:32:58,500 --> 00:33:00,299
right this problem shouldn't exist

858
00:33:00,299 --> 00:33:02,940
everyone here would know not to put

859
00:33:02,940 --> 00:33:04,380
credentials in their git repositories

860
00:33:04,380 --> 00:33:07,860
hopefully so why do we do it uh and it

861
00:33:07,860 --> 00:33:10,260
just happens with human error and it

862
00:33:10,260 --> 00:33:12,419
happens all the time GitHub is like

863
00:33:12,419 --> 00:33:14,340
really unique because people often have

864
00:33:14,340 --> 00:33:15,840
a personal account a professional

865
00:33:15,840 --> 00:33:17,399
account but it uses the same

866
00:33:17,399 --> 00:33:20,340
authentication so we can accidentally

867
00:33:20,340 --> 00:33:21,779
push to the wrong repository really

868
00:33:21,779 --> 00:33:24,419
easily we forget that stuff is buried in

869
00:33:24,419 --> 00:33:26,580
our history if you look at kind of the

870
00:33:26,580 --> 00:33:28,140
git code review process if you're

871
00:33:28,140 --> 00:33:30,120
working on a development Branch you

872
00:33:30,120 --> 00:33:31,919
quickly code an API key to get something

873
00:33:31,919 --> 00:33:34,260
working you delete it a couple of

874
00:33:34,260 --> 00:33:36,899
commits later you you uh it goes to code

875
00:33:36,899 --> 00:33:39,779
review and you do a merge request

876
00:33:39,779 --> 00:33:41,640
um you the code review is just looking

877
00:33:41,640 --> 00:33:42,600
at the latest version of the code

878
00:33:42,600 --> 00:33:43,380
they're not going to go through the

879
00:33:43,380 --> 00:33:45,179
entire history well at least I'm not but

880
00:33:45,179 --> 00:33:46,740
we all establish and I'm lazy at the

881
00:33:46,740 --> 00:33:48,059
start so

882
00:33:48,059 --> 00:33:50,460
um so if so the credentials won't be

883
00:33:50,460 --> 00:33:51,720
exposed here it's in their history and

884
00:33:51,720 --> 00:33:53,640
then no one knows about it then that

885
00:33:53,640 --> 00:33:55,200
repository actually gets you made public

886
00:33:55,200 --> 00:33:57,500
later on credentials doesn't here

887
00:33:57,500 --> 00:33:59,399
Secrets exposed in logs and

888
00:33:59,399 --> 00:34:01,140
auto-generated files this is a big one

889
00:34:01,140 --> 00:34:02,820
so if you do a debug log it's often

890
00:34:02,820 --> 00:34:04,799
going to have credentials inside it if

891
00:34:04,799 --> 00:34:07,260
you're not careful about your what

892
00:34:07,260 --> 00:34:08,520
you're adding into your git repositories

893
00:34:08,520 --> 00:34:10,619
and you add everything then they're

894
00:34:10,619 --> 00:34:12,418
going to end up in there so lots of

895
00:34:12,418 --> 00:34:14,219
different other sensitive files and

896
00:34:14,219 --> 00:34:15,719
we're also just seeing sequence being

897
00:34:15,719 --> 00:34:17,639
managed and get a lot it seems weird

898
00:34:17,639 --> 00:34:20,639
it's bad practice but uh it's not going

899
00:34:20,639 --> 00:34:21,839
to stop and that's because it's easy

900
00:34:21,839 --> 00:34:24,119
lots of people need access to Secrets

901
00:34:24,119 --> 00:34:26,159
it's difficult to segment to them it's

902
00:34:26,159 --> 00:34:27,960
difficult to implement good Secrets

903
00:34:27,960 --> 00:34:29,820
management so that's just easier to not

904
00:34:29,820 --> 00:34:34,440
worry about it which often comes case

905
00:34:34,440 --> 00:34:37,679
so how do we Harden our repositories

906
00:34:37,679 --> 00:34:41,099
honestly none of this is rocket science

907
00:34:41,099 --> 00:34:42,418
um especially the first three up there

908
00:34:42,418 --> 00:34:45,659
use a sequence manager it's a crazy idea

909
00:34:45,659 --> 00:34:48,839
but use one and use the correct one just

910
00:34:48,839 --> 00:34:50,820
because hashley Court Vault may have the

911
00:34:50,820 --> 00:34:53,760
most amount of features uh and and it is

912
00:34:53,760 --> 00:34:56,520
a fantastic tool perhaps it's too heavy

913
00:34:56,520 --> 00:34:58,200
for your use in a smaller company

914
00:34:58,200 --> 00:35:00,180
perhaps there's other tools that may be

915
00:35:00,180 --> 00:35:01,380
better the important thing is that

916
00:35:01,380 --> 00:35:03,540
people actually use the tools that you

917
00:35:03,540 --> 00:35:05,280
put in place and if you don't have good

918
00:35:05,280 --> 00:35:07,800
documentation or training on how to use

919
00:35:07,800 --> 00:35:10,260
them it's not going to work very well

920
00:35:10,260 --> 00:35:13,800
never put Secrets anywhere near your

921
00:35:13,800 --> 00:35:16,859
code uh use short-lived credentials so

922
00:35:16,859 --> 00:35:18,720
don't make things live forever so these

923
00:35:18,720 --> 00:35:20,040
three are pretty obvious

924
00:35:20,040 --> 00:35:22,260
uh restrict your API access again

925
00:35:22,260 --> 00:35:24,839
obvious one just because someone has an

926
00:35:24,839 --> 00:35:26,400
API key doesn't mean you have to give

927
00:35:26,400 --> 00:35:28,140
them access to your service we can put

928
00:35:28,140 --> 00:35:31,140
additional layers of security in here

929
00:35:31,140 --> 00:35:33,000
uh adversaries are using automated

930
00:35:33,000 --> 00:35:35,220
sequence detection add sequence

931
00:35:35,220 --> 00:35:37,500
detection plenty of Open Source tools

932
00:35:37,500 --> 00:35:39,060
that we discussed that can do this for

933
00:35:39,060 --> 00:35:40,280
free

934
00:35:40,280 --> 00:35:42,240
there's vendors

935
00:35:42,240 --> 00:35:44,820
like I work for they can do it uh as

936
00:35:44,820 --> 00:35:47,339
well and the last one there uh we I use

937
00:35:47,339 --> 00:35:48,660
the canary token at the start of this

938
00:35:48,660 --> 00:35:51,200
presentation to illustrate people

939
00:35:51,200 --> 00:35:53,640
attacking credentials in public code

940
00:35:53,640 --> 00:35:55,619
repositories you can use these

941
00:35:55,619 --> 00:35:56,820
internally too they're great they're

942
00:35:56,820 --> 00:35:59,280
free you can recreate that experiment I

943
00:35:59,280 --> 00:36:01,020
did really easily

944
00:36:01,020 --> 00:36:02,640
um and free Canary tokens it doesn't

945
00:36:02,640 --> 00:36:04,260
need to be big but place these around so

946
00:36:04,260 --> 00:36:05,820
you get you actually get alerted when

947
00:36:05,820 --> 00:36:09,900
someone is inside uh your infrastructure

948
00:36:09,900 --> 00:36:13,079
uh so that's it here is a QR code if

949
00:36:13,079 --> 00:36:14,099
you're interested in finding out more

950
00:36:14,099 --> 00:36:15,599
that gives me a backdoor into your phone

951
00:36:15,599 --> 00:36:19,140
I mean uh that uh is for a report so all

952
00:36:19,140 --> 00:36:21,180
the research is in uh they call it a

953
00:36:21,180 --> 00:36:22,440
report called the state of Secrets

954
00:36:22,440 --> 00:36:23,700
sprawl

955
00:36:23,700 --> 00:36:25,859
um that you can find at that URL or just

956
00:36:25,859 --> 00:36:27,480
by searching for it or you can scan the

957
00:36:27,480 --> 00:36:29,520
QR code of your game

958
00:36:29,520 --> 00:36:32,940
um promise I won't do anything bad and

959
00:36:32,940 --> 00:36:34,380
yeah thanks thanks everyone for

960
00:36:34,380 --> 00:36:36,060
listening and uh I'll be happy to take

961
00:36:36,060 --> 00:36:37,680
questions in a minute uh if you if you

962
00:36:37,680 --> 00:36:40,140
have any thanks

963
00:36:40,140 --> 00:36:48,790
[Applause]

964
00:36:51,420 --> 00:36:54,260
any questions

965
00:37:05,820 --> 00:37:07,680
this

966
00:37:07,680 --> 00:37:09,680
is

967
00:37:10,140 --> 00:37:13,859
um hi sir what about using the secret

968
00:37:13,859 --> 00:37:18,060
section of the GitHub report repeal uh

969
00:37:18,060 --> 00:37:21,180
stories yeah so I mean there's lots of

970
00:37:21,180 --> 00:37:23,579
different tools and areas out there and

971
00:37:23,579 --> 00:37:26,160
uh if you're using like GitHub actions

972
00:37:26,160 --> 00:37:29,000
then storing secrets in there absolutely

973
00:37:29,000 --> 00:37:32,400
the problem is is is not that we lack

974
00:37:32,400 --> 00:37:35,220
tools to be able to securely do it the

975
00:37:35,220 --> 00:37:38,339
problem is is that uh as humans we make

976
00:37:38,339 --> 00:37:41,880
mistakes and at a large scale those

977
00:37:41,880 --> 00:37:44,220
mistakes are easily found and exploited

978
00:37:44,220 --> 00:37:47,339
so we definitely should be using the the

979
00:37:47,339 --> 00:37:49,800
tools for that we definitely we

980
00:37:49,800 --> 00:37:50,940
definitely should be using sequence

981
00:37:50,940 --> 00:37:52,619
managers we definitely should be using

982
00:37:52,619 --> 00:37:55,920
uh the correct processes around that but

983
00:37:55,920 --> 00:37:57,480
it's not always going to have it's not

984
00:37:57,480 --> 00:37:59,820
always going to happen and with things

985
00:37:59,820 --> 00:38:01,020
currently the way they are I can

986
00:38:01,020 --> 00:38:02,460
reliably say that Secrets will

987
00:38:02,460 --> 00:38:04,740
absolutely still be leaked uh not

988
00:38:04,740 --> 00:38:06,180
because the correct path isn't there but

989
00:38:06,180 --> 00:38:08,940
because we choose not to use it or we

990
00:38:08,940 --> 00:38:11,660
fail to use it

991
00:38:17,280 --> 00:38:20,700
yeah so you was like talking about

992
00:38:20,700 --> 00:38:23,040
um like analyzing

993
00:38:23,040 --> 00:38:25,859
um every like events with the API key of

994
00:38:25,859 --> 00:38:30,420
GitHub did you try like uh Google uh big

995
00:38:30,420 --> 00:38:32,820
request a bigquery sorry

996
00:38:32,820 --> 00:38:36,359
to another like GitHub data sets and

997
00:38:36,359 --> 00:38:38,760
like if yes you get like good results

998
00:38:38,760 --> 00:38:41,359
with it

999
00:38:42,720 --> 00:38:44,400
one of the cool things uh at Key

1000
00:38:44,400 --> 00:38:47,040
Guardian is when we we actually have a

1001
00:38:47,040 --> 00:38:48,780
complete copy of GitHub for like the

1002
00:38:48,780 --> 00:38:51,060
last four years so if you've done

1003
00:38:51,060 --> 00:38:53,220
something uh and we're not the only ones

1004
00:38:53,220 --> 00:38:55,140
that have this too it's it's it's

1005
00:38:55,140 --> 00:38:57,240
publicly available

1006
00:38:57,240 --> 00:38:58,980
um there's plenty of people to do it so

1007
00:38:58,980 --> 00:39:01,680
uh if you have committed something and

1008
00:39:01,680 --> 00:39:02,640
then you've realized that you've

1009
00:39:02,640 --> 00:39:03,839
committed a key and you quickly delete

1010
00:39:03,839 --> 00:39:05,820
it it still exists out there it's gonna

1011
00:39:05,820 --> 00:39:07,800
still exist on GitHub because it takes

1012
00:39:07,800 --> 00:39:10,140
months before it's truly deleted from

1013
00:39:10,140 --> 00:39:12,060
the areas it's not visible anymore but

1014
00:39:12,060 --> 00:39:14,280
it still exists and it's going to be in

1015
00:39:14,280 --> 00:39:16,140
different areas including our data set

1016
00:39:16,140 --> 00:39:18,839
so uh we've been doing lots of cool

1017
00:39:18,839 --> 00:39:21,240
things with that data set we created a

1018
00:39:21,240 --> 00:39:23,280
uh we created a tool called has my code

1019
00:39:23,280 --> 00:39:26,339
leaked hasmicodeleak.com

1020
00:39:26,339 --> 00:39:27,599
um and basically what that does is

1021
00:39:27,599 --> 00:39:29,940
locally it fingerprints your code it

1022
00:39:29,940 --> 00:39:31,740
sends us all the Fingerprints of every

1023
00:39:31,740 --> 00:39:33,780
version of your code based on your git

1024
00:39:33,780 --> 00:39:36,480
history and then we will match that in

1025
00:39:36,480 --> 00:39:39,900
our database to see if any private code

1026
00:39:39,900 --> 00:39:41,640
has actually been made its way publicly

1027
00:39:41,640 --> 00:39:44,339
and any version of that so not so not

1028
00:39:44,339 --> 00:39:46,380
just you know has your entire repository

1029
00:39:46,380 --> 00:39:48,359
been made but has anything

1030
00:39:48,359 --> 00:39:50,880
from your fingerprints been uh been

1031
00:39:50,880 --> 00:39:53,040
exposed publicly and there's lots of

1032
00:39:53,040 --> 00:39:54,599
other interesting things that we can do

1033
00:39:54,599 --> 00:39:56,880
with that data set and other people can

1034
00:39:56,880 --> 00:39:58,339
do and

1035
00:39:58,339 --> 00:40:01,020
explore that in different ways but those

1036
00:40:01,020 --> 00:40:04,099
data sets do exist and we can query it

1037
00:40:04,099 --> 00:40:06,540
and for lots of different things to not

1038
00:40:06,540 --> 00:40:08,420
just Secrets if you've got internal

1039
00:40:08,420 --> 00:40:12,119
internal uh systems that are sensitive

1040
00:40:12,119 --> 00:40:13,800
we can find if they've ever made it

1041
00:40:13,800 --> 00:40:16,260
public uh different areas so yeah we can

1042
00:40:16,260 --> 00:40:17,579
and but there's a lot more that we can

1043
00:40:17,579 --> 00:40:19,380
do if you have ideas let me know I'm

1044
00:40:19,380 --> 00:40:21,920
happy to play

1045
00:40:22,079 --> 00:40:23,400
um you mentioned at the beginning that

1046
00:40:23,400 --> 00:40:25,440
you validated the credentials right yeah

1047
00:40:25,440 --> 00:40:27,839
did you run any into any issue like

1048
00:40:27,839 --> 00:40:29,880
legal issues because of that because I

1049
00:40:29,880 --> 00:40:32,160
assume this might not be viewed so

1050
00:40:32,160 --> 00:40:34,380
nicely by companies yeah so we can't

1051
00:40:34,380 --> 00:40:37,079
validate all credentials for for these

1052
00:40:37,079 --> 00:40:38,460
reasons

1053
00:40:38,460 --> 00:40:40,619
um but uh

1054
00:40:40,619 --> 00:40:43,260
we we fall I mean there is a Gray Line

1055
00:40:43,260 --> 00:40:44,760
there for some of them we fall within

1056
00:40:44,760 --> 00:40:46,079
the terms of services for a lot because

1057
00:40:46,079 --> 00:40:48,359
we're not using malicious intent behind

1058
00:40:48,359 --> 00:40:50,579
them and we're using the lowest possible

1059
00:40:50,579 --> 00:40:53,160
you know for example AWA AWS keys we're

1060
00:40:53,160 --> 00:40:57,119
using the the lowest uh event uh API

1061
00:40:57,119 --> 00:40:59,220
event that we can to try and determine

1062
00:40:59,220 --> 00:41:00,960
if it's real

1063
00:41:00,960 --> 00:41:02,700
um and then we also validate and then we

1064
00:41:02,700 --> 00:41:04,500
also have services that allow us to do

1065
00:41:04,500 --> 00:41:05,460
this

1066
00:41:05,460 --> 00:41:07,800
um and then you can also find our IP

1067
00:41:07,800 --> 00:41:08,760
address

1068
00:41:08,760 --> 00:41:12,540
that we use to Ping them so that you can

1069
00:41:12,540 --> 00:41:14,579
if you've had a breach and you want to

1070
00:41:14,579 --> 00:41:16,680
know of in service of access and our and

1071
00:41:16,680 --> 00:41:18,240
our IP address comes up you can check

1072
00:41:18,240 --> 00:41:21,420
that it's that it hasn't been us

1073
00:41:21,420 --> 00:41:25,200
um but the the reason why we absolutely

1074
00:41:25,200 --> 00:41:27,000
do this and we have a free service so if

1075
00:41:27,000 --> 00:41:28,380
you leak something and we find it we

1076
00:41:28,380 --> 00:41:29,760
will email you

1077
00:41:29,760 --> 00:41:31,859
um to let you know especially if it's uh

1078
00:41:31,859 --> 00:41:33,839
highly sensitive

1079
00:41:33,839 --> 00:41:37,440
um and we we do this because we find it

1080
00:41:37,440 --> 00:41:39,780
to be irresponsible if we didn't if we

1081
00:41:39,780 --> 00:41:43,740
were scanning the whole set uh okay it's

1082
00:41:43,740 --> 00:41:46,500
there is there is some gray lines here

1083
00:41:46,500 --> 00:41:48,180
but we feel it would be irresponsible we

1084
00:41:48,180 --> 00:41:49,980
didn't let you know that you've leaked a

1085
00:41:49,980 --> 00:41:52,800
key and we know that you have so I mean

1086
00:41:52,800 --> 00:41:54,359
that's kind of yeah our justification

1087
00:41:54,359 --> 00:41:57,359
for it but we don't fall outside the

1088
00:41:57,359 --> 00:41:59,400
terms and services of the ones that we

1089
00:41:59,400 --> 00:42:03,079
check generally or ever I should say

1090
00:42:03,079 --> 00:42:05,339
but sometimes that's because they're

1091
00:42:05,339 --> 00:42:07,680
poorly written

1092
00:42:07,680 --> 00:42:09,859
foreign

1093
00:42:10,700 --> 00:42:14,700
when it comes to guard rails here you

1094
00:42:14,700 --> 00:42:17,160
can also mention git ignore files it's a

1095
00:42:17,160 --> 00:42:20,220
good way to prevent committing Secrets

1096
00:42:20,220 --> 00:42:21,720
absolutely yeah you're right I

1097
00:42:21,720 --> 00:42:23,099
definitely should have uh I should have

1098
00:42:23,099 --> 00:42:24,480
I should have mentioned that every

1099
00:42:24,480 --> 00:42:27,060
repository should have a git ignore file

1100
00:42:27,060 --> 00:42:29,880
uh as an absolute minimum just to just

1101
00:42:29,880 --> 00:42:31,260
to exclude yeah those Auto generated

1102
00:42:31,260 --> 00:42:34,880
files good good point yeah thank you

1103
00:42:35,640 --> 00:42:38,760
all right so thank you very much please

1104
00:42:38,760 --> 00:42:40,800
give her a another round of applause for

1105
00:42:40,800 --> 00:42:43,339
McKenzie

