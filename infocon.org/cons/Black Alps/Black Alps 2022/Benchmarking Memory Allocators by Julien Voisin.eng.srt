1
00:00:04,740 --> 00:00:07,020
um so since I'm the last obstacle

2
00:00:07,020 --> 00:00:10,080
between you and the launch I will be

3
00:00:10,080 --> 00:00:11,700
brief

4
00:00:11,700 --> 00:00:14,340
uh so benchmarking memory allocators

5
00:00:14,340 --> 00:00:16,260
also I was told that I could do my talk

6
00:00:16,260 --> 00:00:19,320
in French so or in English so I took the

7
00:00:19,320 --> 00:00:20,640
middle ground it's going to be in

8
00:00:20,640 --> 00:00:24,119
English with a shitty French accent

9
00:00:24,119 --> 00:00:27,420
so a benchmarking memory allocators uh

10
00:00:27,420 --> 00:00:28,820
it is

11
00:00:28,820 --> 00:00:31,380
my Bo is on my website but it's not

12
00:00:31,380 --> 00:00:32,880
really relevant for its talk so feel

13
00:00:32,880 --> 00:00:36,120
free to go there or ignore it

14
00:00:36,120 --> 00:00:37,800
um so story time

15
00:00:37,800 --> 00:00:40,680
uh uh so at home I'm running Alpine

16
00:00:40,680 --> 00:00:43,860
Linux it's a lightweight Linux thingy

17
00:00:43,860 --> 00:00:46,620
and it's using the muscle Lipsy most

18
00:00:46,620 --> 00:00:48,960
Linux distribution are using the G Lipsy

19
00:00:48,960 --> 00:00:51,360
or whatnot but this one is using muscle

20
00:00:51,360 --> 00:00:54,780
and the muscle Lipsy uh has its own

21
00:00:54,780 --> 00:00:57,719
memory locator so memory allocator is a

22
00:00:57,719 --> 00:00:59,460
small piece of software and when you

23
00:00:59,460 --> 00:01:01,500
need some memory you can ask hey can I

24
00:01:01,500 --> 00:01:02,940
have like I don't know 50 Megs or

25
00:01:02,940 --> 00:01:05,220
something it will give you memory and

26
00:01:05,220 --> 00:01:06,540
then you can say oh I don't need this

27
00:01:06,540 --> 00:01:08,580
memory anymore it will free it

28
00:01:08,580 --> 00:01:10,500
pretty useful pretty convenient pretty

29
00:01:10,500 --> 00:01:11,700
standards

30
00:01:11,700 --> 00:01:15,720
and I was idling on IRC and someone said

31
00:01:15,720 --> 00:01:17,700
that the old memory locator for muscle

32
00:01:17,700 --> 00:01:22,020
sucked and the new one is way better

33
00:01:22,020 --> 00:01:24,299
and I was curious like is it better in

34
00:01:24,299 --> 00:01:27,299
what way like is it faster is it like

35
00:01:27,299 --> 00:01:30,960
more secure simple better use of my CPU

36
00:01:30,960 --> 00:01:35,280
I don't know like maybe better colors

37
00:01:35,280 --> 00:01:38,220
um so yeah I and that this is how I

38
00:01:38,220 --> 00:01:39,960
ended up giving a talk apparently like

39
00:01:39,960 --> 00:01:42,540
someone did said something on IRC and

40
00:01:42,540 --> 00:01:44,220
here I am

41
00:01:44,220 --> 00:01:46,439
um and also I wanted to know is it

42
00:01:46,439 --> 00:01:48,060
really the best one like maybe there are

43
00:01:48,060 --> 00:01:49,860
better ones around that would be really

44
00:01:49,860 --> 00:01:52,200
nice to know

45
00:01:52,200 --> 00:01:54,000
uh so I started with the first thing

46
00:01:54,000 --> 00:01:56,280
like I thought it was easy it was not

47
00:01:56,280 --> 00:01:57,960
but this is still the easier thing to

48
00:01:57,960 --> 00:02:00,659
measure performances and since I'm a

49
00:02:00,659 --> 00:02:02,399
grown-up I didn't create them the wheel

50
00:02:02,399 --> 00:02:05,219
I went on Google GitHub whatnot and

51
00:02:05,219 --> 00:02:07,220
somebody already did all the hard work

52
00:02:07,220 --> 00:02:10,440
it's uh done I cannot pronounce his

53
00:02:10,440 --> 00:02:12,660
family name from Microsoft and he

54
00:02:12,660 --> 00:02:14,220
published something called mimal up

55
00:02:14,220 --> 00:02:16,700
bench which was designed to Benchmark

56
00:02:16,700 --> 00:02:19,500
mimalak which is the allocator for

57
00:02:19,500 --> 00:02:22,739
Microsoft I think it's using Azure and a

58
00:02:22,739 --> 00:02:24,300
couple of other internal Microsoft

59
00:02:24,300 --> 00:02:27,000
things but also in video games it must

60
00:02:27,000 --> 00:02:28,099
be quite good

61
00:02:28,099 --> 00:02:30,360
unfortunately minimalog bench is written

62
00:02:30,360 --> 00:02:32,120
in dash

63
00:02:32,120 --> 00:02:36,300
but it was okay ish it had a couple of

64
00:02:36,300 --> 00:02:39,840
benchmarks mostly Mima look oriented and

65
00:02:39,840 --> 00:02:42,959
other allocators so I just added more

66
00:02:42,959 --> 00:02:45,420
stuff there

67
00:02:45,420 --> 00:02:47,400
uh benchmark

68
00:02:47,400 --> 00:02:50,280
how do you Benchmark memory locators so

69
00:02:50,280 --> 00:02:53,519
there is a real world real life ones and

70
00:02:53,519 --> 00:02:56,819
real life-ish ones like redis the key

71
00:02:56,819 --> 00:02:58,560
value database a lot of websites are

72
00:02:58,560 --> 00:03:00,180
using tools so I think it's kinda

73
00:03:00,180 --> 00:03:04,019
relevant go scripts which is like remote

74
00:03:04,019 --> 00:03:05,760
code execution as a service that's

75
00:03:05,760 --> 00:03:09,120
somehow managed to display PDF sometimes

76
00:03:09,120 --> 00:03:13,080
there is Z3 the solver for Microsoft

77
00:03:13,080 --> 00:03:15,959
lean which is a theory improver rocksdb

78
00:03:15,959 --> 00:03:18,480
which is like redis but by Facebook I

79
00:03:18,480 --> 00:03:22,860
think I'm not sure GCC compiling the Lua

80
00:03:22,860 --> 00:03:24,319
interpreter

81
00:03:24,319 --> 00:03:28,140
espresso is I think a logic gate

82
00:03:28,140 --> 00:03:31,680
optimization thingy and Barnes is a end

83
00:03:31,680 --> 00:03:34,920
body Problem Solver something something

84
00:03:34,920 --> 00:03:38,040
so it's real life ish I'm sure you're

85
00:03:38,040 --> 00:03:40,260
not solving like logic gate optimization

86
00:03:40,260 --> 00:03:43,440
problem on a daily basis but it's close

87
00:03:43,440 --> 00:03:44,879
enough

88
00:03:44,879 --> 00:03:47,519
uh academic one because every single

89
00:03:47,519 --> 00:03:49,560
person who is publishing a paper about

90
00:03:49,560 --> 00:03:51,420
the new allocator comes up with their

91
00:03:51,420 --> 00:03:53,099
own Benchmark to show how great the

92
00:03:53,099 --> 00:03:56,280
allocator is like RB test I think is

93
00:03:56,280 --> 00:03:59,040
some patch Ruby thingy to show something

94
00:03:59,040 --> 00:04:00,540
something

95
00:04:00,540 --> 00:04:01,860
why not

96
00:04:01,860 --> 00:04:04,260
and interestingly it's making use of

97
00:04:04,260 --> 00:04:06,959
GitHub actions to run the whole test

98
00:04:06,959 --> 00:04:13,400
suits on Ubuntu federa Alpine and OS X

99
00:04:13,439 --> 00:04:15,780
um amusingly some people reach out to me

100
00:04:15,780 --> 00:04:18,959
say hey I've got amazing ideas for

101
00:04:18,959 --> 00:04:22,440
benchmarking let's compile chromium like

102
00:04:22,440 --> 00:04:25,259
no GitHub action do not allow you to

103
00:04:25,259 --> 00:04:27,360
spend 12 hours comparing chromium two

104
00:04:27,360 --> 00:04:29,100
times a day

105
00:04:29,100 --> 00:04:31,320
so there are constraints like if you

106
00:04:31,320 --> 00:04:33,300
have ideas of Benchmark keep this in

107
00:04:33,300 --> 00:04:34,139
mind

108
00:04:34,139 --> 00:04:39,020
also I won't compile llvm twice no

109
00:04:39,020 --> 00:04:40,680
allocators

110
00:04:40,680 --> 00:04:43,320
you can read all of them uh it's at

111
00:04:43,320 --> 00:04:44,759
least it's boring but I'm sure your

112
00:04:44,759 --> 00:04:46,139
favorite ones there so there is the

113
00:04:46,139 --> 00:04:49,259
muscle one there is the jlipsy one there

114
00:04:49,259 --> 00:04:51,419
is the TC malloc from Google there is

115
00:04:51,419 --> 00:04:52,860
the TC malloc that used to be from

116
00:04:52,860 --> 00:04:54,380
Google but it's not from Google anymore

117
00:04:54,380 --> 00:04:58,560
there is a GE malloc by Firefox uh there

118
00:04:58,560 --> 00:05:01,460
is some weird ones like

119
00:05:01,460 --> 00:05:03,960
scudo from Android as well

120
00:05:03,960 --> 00:05:06,600
uh if your favorite one is not there let

121
00:05:06,600 --> 00:05:09,060
me know I will be happy to try to

122
00:05:09,060 --> 00:05:11,600
integrate it

123
00:05:12,180 --> 00:05:13,979
um results what what can we do with all

124
00:05:13,979 --> 00:05:15,860
those lists

125
00:05:15,860 --> 00:05:17,940
sad stuff

126
00:05:17,940 --> 00:05:20,520
allocators tend to be Linux specific so

127
00:05:20,520 --> 00:05:22,139
if you're running OS X like all the

128
00:05:22,139 --> 00:05:24,840
Google kids are doing these days

129
00:05:24,840 --> 00:05:26,460
you won't be able to run the whole test

130
00:05:26,460 --> 00:05:28,199
suit and also if you're on Windows just

131
00:05:28,199 --> 00:05:31,560
forget about it most allocator are gypsy

132
00:05:31,560 --> 00:05:33,720
specific using weird extension for no

133
00:05:33,720 --> 00:05:35,880
good reason so they don't work on muscle

134
00:05:35,880 --> 00:05:38,880
which is annoying this is a conference

135
00:05:38,880 --> 00:05:42,660
conference where so people are writing

136
00:05:42,660 --> 00:05:44,880
apparently allocators submitting papers

137
00:05:44,880 --> 00:05:47,160
presenting at conferences and the thing

138
00:05:47,160 --> 00:05:49,440
just doesn't compile or just doesn't

139
00:05:49,440 --> 00:05:51,900
work but hey they got like the paper at

140
00:05:51,900 --> 00:05:54,720
black hat or whatnot don't do this

141
00:05:54,720 --> 00:05:58,139
uh some are too slow to be including the

142
00:05:58,139 --> 00:06:00,479
CI so the continuous integration is

143
00:06:00,479 --> 00:06:03,000
running and I think it's two hours top

144
00:06:03,000 --> 00:06:05,520
and somewhere too slow

145
00:06:05,520 --> 00:06:07,440
like when I was running on my

146
00:06:07,440 --> 00:06:09,240
workstation I've got a crazy powerful

147
00:06:09,240 --> 00:06:11,820
station at work I had to use a double

148
00:06:11,820 --> 00:06:14,580
log scale for some allocators because

149
00:06:14,580 --> 00:06:17,280
one log was unreadable so some are

150
00:06:17,280 --> 00:06:19,500
really just too slow and amusingly some

151
00:06:19,500 --> 00:06:21,300
allocator don't care about performances

152
00:06:21,300 --> 00:06:22,800
I opened some bugs and they were like

153
00:06:22,800 --> 00:06:26,900
yes we know it sucks it's all right

154
00:06:26,900 --> 00:06:29,460
and some are crashing like you cannot

155
00:06:29,460 --> 00:06:32,759
run redis which is key value database on

156
00:06:32,759 --> 00:06:36,180
some allocator so this is pretty bad

157
00:06:36,180 --> 00:06:38,280
computer sucks

158
00:06:38,280 --> 00:06:40,919
um side effect improvements uh because

159
00:06:40,919 --> 00:06:42,479
in the process of adding more and more

160
00:06:42,479 --> 00:06:44,280
locators I found some bugs and try to

161
00:06:44,280 --> 00:06:47,419
get them fixed so some crashes some

162
00:06:47,419 --> 00:06:49,919
portability Improvement like don't use

163
00:06:49,919 --> 00:06:53,160
the weird gdpc extensions

164
00:06:53,160 --> 00:06:56,000
um these kind of things

165
00:06:56,699 --> 00:06:59,280
shiny graph as promised so this is go

166
00:06:59,280 --> 00:07:01,560
scripts running on Mima lock

167
00:07:01,560 --> 00:07:04,080
and the memory it takes so you can see

168
00:07:04,080 --> 00:07:05,699
the first version was taking a lot of

169
00:07:05,699 --> 00:07:08,940
memory then they realized this so it

170
00:07:08,940 --> 00:07:11,699
went down they work on other things and

171
00:07:11,699 --> 00:07:13,919
then some minor Improvement again

172
00:07:13,919 --> 00:07:16,199
and the last two bars that you can see

173
00:07:16,199 --> 00:07:19,919
are the V2 version so they redid part of

174
00:07:19,919 --> 00:07:21,360
the code and you can clearly see the

175
00:07:21,360 --> 00:07:23,220
Improvement so when you're reading the

176
00:07:23,220 --> 00:07:25,319
change log it says improvements and

177
00:07:25,319 --> 00:07:26,520
you're not sure what's going on you can

178
00:07:26,520 --> 00:07:28,440
just run the test suit and it will

179
00:07:28,440 --> 00:07:31,520
produce graph like this

180
00:07:32,280 --> 00:07:35,940
or you can run all the allocators on a

181
00:07:35,940 --> 00:07:39,120
single test for example so espresso you

182
00:07:39,120 --> 00:07:40,919
can see on the left the more security

183
00:07:40,919 --> 00:07:44,819
oriented on the left on your left

184
00:07:44,819 --> 00:07:47,160
the more security oriented one like die

185
00:07:47,160 --> 00:07:51,120
harder or the malloc NG for muscle or

186
00:07:51,120 --> 00:07:53,280
pardon malloc whatnot and on the other

187
00:07:53,280 --> 00:07:55,380
side you can see the performance

188
00:07:55,380 --> 00:07:59,479
oriented so it's about trade-off

189
00:08:00,060 --> 00:08:02,400
um isolock that I really like the time

190
00:08:02,400 --> 00:08:04,380
it takes to run some artificial

191
00:08:04,380 --> 00:08:07,440
Benchmark using a paper so you can see

192
00:08:07,440 --> 00:08:10,099
the first two releases kind of

193
00:08:10,099 --> 00:08:13,139
then it went way better then the author

194
00:08:13,139 --> 00:08:15,599
added more features security wise so it

195
00:08:15,599 --> 00:08:18,000
ate it took more time and now it's going

196
00:08:18,000 --> 00:08:20,460
down and hopefully the next version will

197
00:08:20,460 --> 00:08:23,359
go down even more

198
00:08:23,819 --> 00:08:27,720
um I'm usingly about the Benchmark it's

199
00:08:27,720 --> 00:08:28,860
really hard

200
00:08:28,860 --> 00:08:31,020
to generic benchmarks like I'm using go

201
00:08:31,020 --> 00:08:33,360
script to read PDF so I like to read

202
00:08:33,360 --> 00:08:35,099
them fast but someone from Google

203
00:08:35,099 --> 00:08:36,599
reached out to me after I shared a

204
00:08:36,599 --> 00:08:38,640
presentation and they were like did you

205
00:08:38,640 --> 00:08:40,919
test like did you run Benchmark at like

206
00:08:40,919 --> 00:08:43,799
Google scale I was like no I don't have

207
00:08:43,799 --> 00:08:46,380
1000 CPU at home but like if you want to

208
00:08:46,380 --> 00:08:49,080
sponsor this work sure so

209
00:08:49,080 --> 00:08:52,140
um yeah and also that's why the GitHub

210
00:08:52,140 --> 00:08:53,700
repository doesn't hit your graph

211
00:08:53,700 --> 00:08:55,680
because then people would just take them

212
00:08:55,680 --> 00:08:57,360
say oh this allocator is the very best

213
00:08:57,360 --> 00:08:59,880
but no you have to tailor The Benchmark

214
00:08:59,880 --> 00:09:02,040
to your workloads if you're processing

215
00:09:02,040 --> 00:09:03,540
you know machine learning image

216
00:09:03,540 --> 00:09:05,580
processing what not it's not really

217
00:09:05,580 --> 00:09:08,940
compatible with like rendering PDFs or

218
00:09:08,940 --> 00:09:11,580
redis or these kind of things so grain

219
00:09:11,580 --> 00:09:13,980
of salts all the way

220
00:09:13,980 --> 00:09:16,500
I was told to the security conference so

221
00:09:16,500 --> 00:09:18,839
I will talk about security

222
00:09:18,839 --> 00:09:20,160
this is hard

223
00:09:20,160 --> 00:09:22,800
like security is hard lists again I've

224
00:09:22,800 --> 00:09:24,779
got a lot of lists in my slides so

225
00:09:24,779 --> 00:09:27,240
special and type safety so when you are

226
00:09:27,240 --> 00:09:30,180
located on memory maybe your application

227
00:09:30,180 --> 00:09:32,940
is using a bit more and like will result

228
00:09:32,940 --> 00:09:35,940
in a buffer overflow or underflow kind

229
00:09:35,940 --> 00:09:38,700
of things and also type safety maybe

230
00:09:38,700 --> 00:09:40,620
you're manipulating an object and then

231
00:09:40,620 --> 00:09:42,540
the program manipulated in a different

232
00:09:42,540 --> 00:09:45,120
way and then you've got like arbitrary

233
00:09:45,120 --> 00:09:46,920
code execution or crashes kind of things

234
00:09:46,920 --> 00:09:48,899
there are a lot of possible mitigations

235
00:09:48,899 --> 00:09:52,260
some are good some are bad

236
00:09:52,260 --> 00:09:54,600
um I think the most interesting one are

237
00:09:54,600 --> 00:09:58,200
to have the metadata of your chunk put

238
00:09:58,200 --> 00:10:00,779
somewhere else like not next to the

239
00:10:00,779 --> 00:10:02,700
chunk so when there is some wiggling

240
00:10:02,700 --> 00:10:05,100
like before overflow an attacker cannot

241
00:10:05,100 --> 00:10:06,839
override the metadata and have powerful

242
00:10:06,839 --> 00:10:07,920
Primitives

243
00:10:07,920 --> 00:10:09,899
there is also

244
00:10:09,899 --> 00:10:11,519
um the

245
00:10:11,519 --> 00:10:13,860
idea of separating different types of

246
00:10:13,860 --> 00:10:16,860
objects like if you are allocating some

247
00:10:16,860 --> 00:10:19,680
weird user mostly control thingy maybe

248
00:10:19,680 --> 00:10:21,000
you don't want to put it next to

249
00:10:21,000 --> 00:10:22,440
credentials for example so you can

250
00:10:22,440 --> 00:10:24,300
isolate them and if there is some

251
00:10:24,300 --> 00:10:26,760
wiggling or some issues an attacker can

252
00:10:26,760 --> 00:10:28,519
actually overwrite

253
00:10:28,519 --> 00:10:31,019
credentials this kind of things the

254
00:10:31,019 --> 00:10:32,640
slide will be put online so you will

255
00:10:32,640 --> 00:10:34,440
have time to like read and make your

256
00:10:34,440 --> 00:10:36,180
mind on this

257
00:10:36,180 --> 00:10:38,459
temporal safety here the idea is that

258
00:10:38,459 --> 00:10:41,339
you're allocating maybe an object and

259
00:10:41,339 --> 00:10:42,540
then you freeing it and then you're

260
00:10:42,540 --> 00:10:45,420
reusing it again color use after free so

261
00:10:45,420 --> 00:10:47,579
this is like the

262
00:10:47,579 --> 00:10:50,040
some problems on a time scale instead of

263
00:10:50,040 --> 00:10:53,519
a spatial scale so also

264
00:10:53,519 --> 00:10:55,980
um values mitigations quarantine

265
00:10:55,980 --> 00:10:58,500
randomization

266
00:10:58,500 --> 00:11:01,079
a lot of boxes to tick

267
00:11:01,079 --> 00:11:03,899
memory tagging that's super hot in the

268
00:11:03,899 --> 00:11:05,640
moment there you can do it in software

269
00:11:05,640 --> 00:11:07,800
with fat pointers with the idea is that

270
00:11:07,800 --> 00:11:10,560
a pointer carries some information about

271
00:11:10,560 --> 00:11:12,540
like the lifetime or the type or these

272
00:11:12,540 --> 00:11:13,800
kind of things or you can do it in

273
00:11:13,800 --> 00:11:16,279
Hardware with memory tagging

274
00:11:16,279 --> 00:11:18,860
mtes kind of things apple is doing it

275
00:11:18,860 --> 00:11:21,660
this would warrant at all concerned so

276
00:11:21,660 --> 00:11:23,279
I'm not going to talk about it but the

277
00:11:23,279 --> 00:11:25,700
idea is that the hardware helps you

278
00:11:25,700 --> 00:11:28,560
avoid this kind of memory corruption

279
00:11:28,560 --> 00:11:30,839
issues

280
00:11:30,839 --> 00:11:33,000
and weird stuff like people are coming

281
00:11:33,000 --> 00:11:35,459
with crazy ID there is an allocator that

282
00:11:35,459 --> 00:11:37,500
never use a pointer so it's only going

283
00:11:37,500 --> 00:11:38,700
forwards

284
00:11:38,700 --> 00:11:41,760
it's it's working to mitigate use after

285
00:11:41,760 --> 00:11:43,140
free for

286
00:11:43,140 --> 00:11:45,660
um like low short running programs but

287
00:11:45,660 --> 00:11:47,100
it's not really usable in Productions

288
00:11:47,100 --> 00:11:49,500
and people are coming with like really

289
00:11:49,500 --> 00:11:50,940
great things

290
00:11:50,940 --> 00:11:53,940
CPU cleaning or Giga cages for safaris

291
00:11:53,940 --> 00:11:56,540
kind of things

292
00:11:57,060 --> 00:11:59,459
um benchmarking security is surprisingly

293
00:11:59,459 --> 00:12:00,839
hard well not really surprising but

294
00:12:00,839 --> 00:12:01,800
really hard

295
00:12:01,800 --> 00:12:03,660
it's not because you're ticking a lot of

296
00:12:03,660 --> 00:12:05,279
boxes that you've got a lot of security

297
00:12:05,279 --> 00:12:06,839
like you can Implement all the

298
00:12:06,839 --> 00:12:08,519
mitigations there and maybe you will end

299
00:12:08,519 --> 00:12:10,500
up with a CT allocator so it's about

300
00:12:10,500 --> 00:12:13,079
trade-off

301
00:12:13,079 --> 00:12:15,720
um Apple recently published something

302
00:12:15,720 --> 00:12:18,480
about their canal allocator and since

303
00:12:18,480 --> 00:12:20,040
it's tightly integrated with the system

304
00:12:20,040 --> 00:12:23,339
it can do powerful things for example

305
00:12:23,339 --> 00:12:25,140
um I think Jr security is also doing

306
00:12:25,140 --> 00:12:27,300
this with auto slab so they have type

307
00:12:27,300 --> 00:12:29,519
knowledge instead of only having the

308
00:12:29,519 --> 00:12:30,959
knowledge of the size of the object

309
00:12:30,959 --> 00:12:32,399
you're allocating they've got the type

310
00:12:32,399 --> 00:12:35,100
so you can segregate by type so you can

311
00:12:35,100 --> 00:12:37,320
allocate your credentials over there and

312
00:12:37,320 --> 00:12:39,720
your user thingy over there instead of

313
00:12:39,720 --> 00:12:43,800
only doing by size or you can like make

314
00:12:43,800 --> 00:12:45,839
use of the compiler to give you more

315
00:12:45,839 --> 00:12:47,459
information instead of just having your

316
00:12:47,459 --> 00:12:50,339
external allocator bundled on your

317
00:12:50,339 --> 00:12:51,660
library

318
00:12:51,660 --> 00:12:54,420
also if an attacker has arbitrary read

319
00:12:54,420 --> 00:12:57,120
and writes most of the time you lost

320
00:12:57,120 --> 00:12:59,820
except with Hardware assistance like

321
00:12:59,820 --> 00:13:01,260
memory tagging

322
00:13:01,260 --> 00:13:03,600
so also trade-off like what are you

323
00:13:03,600 --> 00:13:05,399
defending against

324
00:13:05,399 --> 00:13:08,760
I wrote some Benchmark about security

325
00:13:08,760 --> 00:13:10,500
like can you detect use after three

326
00:13:10,500 --> 00:13:13,139
reliability kind of things and someone

327
00:13:13,139 --> 00:13:15,240
reached out to me and said hey my

328
00:13:15,240 --> 00:13:17,160
allocator doesn't detect use after free

329
00:13:17,160 --> 00:13:19,500
but you cannot exploit them

330
00:13:19,500 --> 00:13:20,940
so you have to be careful about

331
00:13:20,940 --> 00:13:22,980
detecting

332
00:13:22,980 --> 00:13:25,440
um security issues and neutering them

333
00:13:25,440 --> 00:13:28,800
making them unexploitable

334
00:13:28,800 --> 00:13:32,339
also the security and performance

335
00:13:32,339 --> 00:13:35,579
function is roughly square like you can

336
00:13:35,579 --> 00:13:37,260
have some really easy mitigation that

337
00:13:37,260 --> 00:13:39,480
are really effective and then you just

338
00:13:39,480 --> 00:13:41,339
ending up piling more and more and more

339
00:13:41,339 --> 00:13:43,380
for diminishing returns so you have to

340
00:13:43,380 --> 00:13:46,260
be mindful about this

341
00:13:46,260 --> 00:13:49,980
um also the performance budget people

342
00:13:49,980 --> 00:13:51,779
like to have their software go really

343
00:13:51,779 --> 00:13:53,700
fast be really Snappy and not eat all

344
00:13:53,700 --> 00:13:57,240
your memory apparently

345
00:13:57,420 --> 00:13:59,279
um so if your allocator is really slow

346
00:13:59,279 --> 00:14:01,380
but you brag about it being super secure

347
00:14:01,380 --> 00:14:03,959
nobody will use it except some weird

348
00:14:03,959 --> 00:14:06,660
paranoid people so you have to spend

349
00:14:06,660 --> 00:14:08,100
your budget your performance budget

350
00:14:08,100 --> 00:14:09,959
really wisely and make choices about

351
00:14:09,959 --> 00:14:11,220
this

352
00:14:11,220 --> 00:14:13,980
also uh this is the mitigator

353
00:14:13,980 --> 00:14:16,980
it's by halver flake it's like I think

354
00:14:16,980 --> 00:14:19,079
it's the well-intentioned gate or always

355
00:14:19,079 --> 00:14:21,060
raising the bar to make the attack

356
00:14:21,060 --> 00:14:22,620
harder

357
00:14:22,620 --> 00:14:24,720
but it's not really efficient so

358
00:14:24,720 --> 00:14:26,700
designing mitigation is really hard and

359
00:14:26,700 --> 00:14:27,839
halvard

360
00:14:27,839 --> 00:14:30,540
did not only his magnificent crocodile

361
00:14:30,540 --> 00:14:32,639
but also some rules about how to design

362
00:14:32,639 --> 00:14:35,839
mitigations it's like have a design dock

363
00:14:35,839 --> 00:14:38,700
compare against known exploits like this

364
00:14:38,700 --> 00:14:40,500
mitigations practice exploit this

365
00:14:40,500 --> 00:14:42,779
exploiting this exploit also reach out

366
00:14:42,779 --> 00:14:44,880
to your friend in neighborhood exploit

367
00:14:44,880 --> 00:14:48,240
writer about mitigation to see if it's

368
00:14:48,240 --> 00:14:50,760
useful or not kind of things

369
00:14:50,760 --> 00:14:54,839
so security is hard who knew

370
00:14:54,839 --> 00:14:58,860
Next Step so after this talk

371
00:14:58,860 --> 00:15:00,540
what I will do right now after install

372
00:15:00,540 --> 00:15:03,180
no more seriously um I will I'm planning

373
00:15:03,180 --> 00:15:05,339
on adding more allocator and if your

374
00:15:05,339 --> 00:15:07,500
favorite allocator is not there reach

375
00:15:07,500 --> 00:15:09,720
out to me and I will help you to help me

376
00:15:09,720 --> 00:15:11,480
to help you

377
00:15:11,480 --> 00:15:13,860
ideas and suggestion welcome for

378
00:15:13,860 --> 00:15:16,740
Benchmark but except chromium and llvm

379
00:15:16,740 --> 00:15:20,279
so small stuff that represent real life

380
00:15:20,279 --> 00:15:22,920
workloads I think I will add some

381
00:15:22,920 --> 00:15:26,459
JavaScript engine maybe because people

382
00:15:26,459 --> 00:15:28,160
like JavaScript

383
00:15:28,160 --> 00:15:31,620
publish more graphs and data but with a

384
00:15:31,620 --> 00:15:35,339
lot of like salt and carrots

385
00:15:35,339 --> 00:15:38,100
um and I'm a security Engineers who like

386
00:15:38,100 --> 00:15:40,019
proper graphing things confused and

387
00:15:40,019 --> 00:15:42,540
frighten me so if you're into ux and

388
00:15:42,540 --> 00:15:44,100
performance and metrics and necessary

389
00:15:44,100 --> 00:15:46,199
reach out to me and tell me what you're

390
00:15:46,199 --> 00:15:47,459
into

391
00:15:47,459 --> 00:15:49,920
and something that I would really like

392
00:15:49,920 --> 00:15:52,199
is for people to reuse this instead of

393
00:15:52,199 --> 00:15:55,199
coming up with their own crazy benchmark

394
00:15:55,199 --> 00:15:57,720
because I'm tired of people bragging

395
00:15:57,720 --> 00:15:59,339
about it because like they're small

396
00:15:59,339 --> 00:16:01,860
thingy Benchmark and if you use it on

397
00:16:01,860 --> 00:16:05,100
like Firefox it just crashes already

398
00:16:05,100 --> 00:16:07,500
um it would be amazing to have like when

399
00:16:07,500 --> 00:16:09,720
people design new allocators to publish

400
00:16:09,720 --> 00:16:11,760
the code and The Benchmark because

401
00:16:11,760 --> 00:16:13,440
computer science paper without code

402
00:16:13,440 --> 00:16:14,940
shouldn't be a thing like it shouldn't

403
00:16:14,940 --> 00:16:15,410
exist

404
00:16:15,410 --> 00:16:17,579
[Music]

405
00:16:17,579 --> 00:16:19,680
um I needed a conclusion so here is one

406
00:16:19,680 --> 00:16:22,199
but I really don't like it Mima lock is

407
00:16:22,199 --> 00:16:25,079
great use at scale by Microsoft and

408
00:16:25,079 --> 00:16:28,440
Azure Crossing huge workloads

409
00:16:28,440 --> 00:16:31,980
um heavy rain I think the game like some

410
00:16:31,980 --> 00:16:33,540
games are using me my look as well so

411
00:16:33,540 --> 00:16:35,699
it's great to on performance or general

412
00:16:35,699 --> 00:16:37,259
purpose allocator

413
00:16:37,259 --> 00:16:40,800
if you want security ish you can use her

414
00:16:40,800 --> 00:16:43,320
in malloc or isolock they've got like a

415
00:16:43,320 --> 00:16:46,139
huge design document and everything

416
00:16:46,139 --> 00:16:46,800
um

417
00:16:46,800 --> 00:16:49,079
but usually the default allocator is

418
00:16:49,079 --> 00:16:50,459
good enough otherwise it wouldn't be the

419
00:16:50,459 --> 00:16:53,880
default one and most big software that

420
00:16:53,880 --> 00:16:56,220
are scary and talking to network and

421
00:16:56,220 --> 00:16:58,440
stuff they are using their own allocator

422
00:16:58,440 --> 00:17:00,779
like your web browser is using its own

423
00:17:00,779 --> 00:17:02,399
allocator and also the threat model of

424
00:17:02,399 --> 00:17:04,859
your web browser is a bit weird Firefox

425
00:17:04,859 --> 00:17:07,079
Apache in Chinese python Java you name

426
00:17:07,079 --> 00:17:09,599
it so they've got their own one you can

427
00:17:09,599 --> 00:17:11,640
replace it but you will likely merge and

428
00:17:11,640 --> 00:17:15,780
performances for a minor security gain

429
00:17:15,780 --> 00:17:18,500
foreign

430
00:17:20,780 --> 00:17:24,500
we can all go to lunch

431
00:17:33,070 --> 00:17:37,649
[Music]

432
00:17:45,320 --> 00:17:48,360
you got one question tell me come here

433
00:17:48,360 --> 00:17:51,059
and tell me so you mentioned the you

434
00:17:51,059 --> 00:17:53,520
mentioned JavaScript engine

435
00:17:53,520 --> 00:17:58,080
but with like GSC and V8 having like

436
00:17:58,080 --> 00:17:59,700
their own object and things like that

437
00:17:59,700 --> 00:18:01,919
are they a bit could it be a bit BS

438
00:18:01,919 --> 00:18:04,559
because they have a dedicated use

439
00:18:04,559 --> 00:18:07,799
well the idea is to have uh workloads

440
00:18:07,799 --> 00:18:10,380
like real life-ish workloads instead of

441
00:18:10,380 --> 00:18:13,200
just allocating 100 time then freeing

442
00:18:13,200 --> 00:18:15,120
100 times so to have various patterns

443
00:18:15,120 --> 00:18:16,500
and these kind of things to see how the

444
00:18:16,500 --> 00:18:18,720
allocators is behaving the goal is not

445
00:18:18,720 --> 00:18:22,080
to Benchmark browsers that you have

446
00:18:22,080 --> 00:18:25,879
like complex patterns

447
00:18:27,710 --> 00:18:29,820
[Music]

448
00:18:29,820 --> 00:18:32,100
so this is the shortest Talk of the

449
00:18:32,100 --> 00:18:35,059
whole conference I think

450
00:18:40,679 --> 00:18:44,720
all right lunch time thank you very much

