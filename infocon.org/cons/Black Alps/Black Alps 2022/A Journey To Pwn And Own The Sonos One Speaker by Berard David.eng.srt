1
00:00:03,380 --> 00:00:05,940
hello to all so as we have just

2
00:00:05,940 --> 00:00:07,500
said I am going to present to you the

3
00:00:07,500 --> 00:00:10,380
work I have done on the

4
00:00:10,380 --> 00:00:12,960
sonos one connected speaker as part of

5
00:00:12,960 --> 00:00:14,940
point phone

6
00:00:14,940 --> 00:00:17,160
so my name is David Bérard I am I

7
00:00:17,160 --> 00:00:20,300
work in the  reverse engineering team

8
00:00:20,300 --> 00:00:23,760
It is a company specializing in

9
00:00:23,760 --> 00:00:25,920
offensive security as we said yesterday we

10
00:00:25,920 --> 00:00:27,500
are without just over 120 people

11
00:00:27,500 --> 00:00:30,060
in the reverse engineering team we are

12
00:00:30,060 --> 00:00:33,020
38 and we mainly work on

13
00:00:33,020 --> 00:00:35,360


14
00:00:35,360 --> 00:00:38,160
embedded equipment so basically from  that there is

15
00:00:38,160 --> 00:00:39,540
somewhere where there is code we can

16
00:00:39,540 --> 00:00:41,879
look at so it can be

17
00:00:41,879 --> 00:00:44,399
mobile phones cars

18
00:00:44,399 --> 00:00:47,219
routers etc and if these are areas

19
00:00:47,219 --> 00:00:48,700
that interest you we are recruiting

20
00:00:48,700 --> 00:00:51,819
[Music]

21
00:00:52,340 --> 00:00:55,079
so the edition in question it

22
00:00:55,079 --> 00:00:58,199
happened Austin in 2021 it's a

23
00:00:58,199 --> 00:01:01,199
competition that was organized by zdi yesterday

24
00:01:01,199 --> 00:01:03,059
it was presented to you the objective

25
00:01:03,059 --> 00:01:05,040
is to obtain

26
00:01:05,040 --> 00:01:07,799
code execution on devices and if we succeed  to

27
00:01:07,799 --> 00:01:09,720
show that we can have money we

28
00:01:09,720 --> 00:01:11,460
can have points for a classification

29
00:01:11,460 --> 00:01:13,439
and

30
00:01:13,439 --> 00:01:15,720
so there the edition in question it

31
00:01:15,720 --> 00:01:18,180
focuses on on-board equipment

32
00:01:18,180 --> 00:01:20,040
so it can be telephones

33
00:01:20,040 --> 00:01:21,780
printers as you could see

34
00:01:21,780 --> 00:01:24,080
yesterday  today we are going to talk about

35
00:01:24,080 --> 00:01:27,920
onotomation with the sonos one which there are

36
00:01:27,920 --> 00:01:30,720
televisions routers

37
00:01:30,720 --> 00:01:33,420
NAS

38
00:01:33,420 --> 00:01:37,079
so here is the sonos is not just a

39
00:01:37,079 --> 00:01:39,960
speaker it is a speaker connected

40
00:01:39,960 --> 00:01:43,740
so to the service offer in addition there

41
00:01:43,740 --> 00:01:46,340
are the  Google and Alexia voice assistants

42
00:01:46,340 --> 00:01:48,720
it is connected via wifi it can

43
00:01:48,720 --> 00:01:50,520
also be connected via wired

44
00:01:50,520 --> 00:01:52,320
ethernet and there is an

45
00:01:52,320 --> 00:01:56,100
association phase that can be done in Bel

46
00:01:56,100 --> 00:01:57,960
it can interconnect with other

47
00:01:57,960 --> 00:02:00,060
devices of the same type to create

48
00:02:00,060 --> 00:02:02,759
stereo pairs so by default she is

49
00:02:02,759 --> 00:02:04,259
in mono when she is alone and

50
00:02:04,259 --> 00:02:06,000
she can send her audio stream to

51
00:02:06,000 --> 00:02:07,560
replicate it on others on other

52
00:02:07,560 --> 00:02:09,959
quotes make stereo she supports

53
00:02:09,959 --> 00:02:11,900
AirPlay but you cannot cast on it

54
00:02:11,900 --> 00:02:15,300
with Google cast and  there are a lot of

55
00:02:15,300 --> 00:02:17,520
ways to play music so you

56
00:02:17,520 --> 00:02:19,379
can either just send

57
00:02:19,379 --> 00:02:22,260
music via via the sonos app on your

58
00:02:22,260 --> 00:02:23,000
phone

59
00:02:23,000 --> 00:02:27,540
via APIs if you want to script that to

60
00:02:27,540 --> 00:02:29,040
it also interconnects with Spotify

61
00:02:29,040 --> 00:02:31,440
Connect it can connect  to

62
00:02:31,440 --> 00:02:35,220
file storage systems we

63
00:02:35,220 --> 00:02:38,040
can stream files on it etc and

64
00:02:38,040 --> 00:02:39,480
so we are talking about it today because

65
00:02:39,480 --> 00:02:41,660
it was present at Antoine 2020

66
00:02:41,660 --> 00:02:44,400
subscribe in 2021 and this year

67
00:02:44,400 --> 00:02:47,640
again it is one of the targets of the

68
00:02:47,640 --> 00:02:48,959
competition

69
00:02:48,959 --> 00:02:50,280
so me  the research I did

70
00:02:50,280 --> 00:02:53,700
was on 2020 and 2021 we're going to talk about it

71
00:02:53,700 --> 00:02:55,260
[Music]

72
00:02:55,260 --> 00:02:57,319
so as a

73
00:02:57,319 --> 00:03:00,260
vulnerability researcher and

74
00:03:00,260 --> 00:03:02,819
reverser what we want first

75
00:03:02,819 --> 00:03:04,620
is to get a firmware to be able to

76
00:03:04,620 --> 00:03:06,900
work on it  look for

77
00:03:06,900 --> 00:03:09,540
vines with in it what we can do

78
00:03:09,540 --> 00:03:11,159
first is try to

79
00:03:11,159 --> 00:03:12,840
find on the internet if we can not

80
00:03:12,840 --> 00:03:16,019
find packages for for

81
00:03:16,019 --> 00:03:18,360
update which would contain the clasp and in

82
00:03:18,360 --> 00:03:20,099
fact the sonos it is completely

83
00:03:20,099 --> 00:03:21,900
autonomous on  the updates so it is

84
00:03:21,900 --> 00:03:23,519
she who will connect to the net who will

85
00:03:23,519 --> 00:03:26,280
celebrate the descriptions of Firma who will

86
00:03:26,280 --> 00:03:29,580
and who will install them to herself

87
00:03:29,580 --> 00:03:31,500
so what we can do at first

88
00:03:31,500 --> 00:03:33,120
is to get  in

89
00:03:33,120 --> 00:03:35,459
nomadic mania between between the enclosure and the

90
00:03:35,459 --> 00:03:37,200
Internet we will capture all the traffic

91
00:03:37,200 --> 00:03:39,080
we will see what happens

92
00:03:39,080 --> 00:03:41,159
we have a little luck it is to buy it

93
00:03:41,159 --> 00:03:43,760
TP so it is quite simple to

94
00:03:43,760 --> 00:03:46,640
quickly see what is happening

95
00:03:46,640 --> 00:03:49,080
the printer makes an XML file

96
00:03:49,080 --> 00:03:50,640
which contains all the

97
00:03:50,640 --> 00:03:53,940
available versions and files and the links

98
00:03:53,940 --> 00:03:56,519
to the update files so we

99
00:03:56,519 --> 00:03:57,659
can use these links to directly

100
00:03:57,659 --> 00:03:59,959
download the files to bet

101
00:03:59,959 --> 00:04:01,920
on the other hand we will not be able to do

102
00:04:01,920 --> 00:04:04,379
much because  that these are

103
00:04:04,379 --> 00:04:06,599
updates that are encrypted and that are

104
00:04:06,599 --> 00:04:09,120
embedded in a proprietary file format

105
00:04:09,120 --> 00:04:11,760
so like that in Black Box

106
00:04:11,760 --> 00:04:14,400
we won't be able to do anything about it so we

107
00:04:14,400 --> 00:04:15,959
need another method to access the

108
00:04:15,959 --> 00:04:17,579
Firma and to be able to start our

109
00:04:17,579 --> 00:04:19,680
research so for that we were

110
00:04:19,680 --> 00:04:22,860
interested in the hardware part so that

111
00:04:22,860 --> 00:04:25,860
's the PCB of the sonos once

112
00:04:25,860 --> 00:04:27,240
opened

113
00:04:27,240 --> 00:04:29,280
so a first part which is the

114
00:04:29,280 --> 00:04:31,320
power supply part that you see there

115
00:04:31,320 --> 00:04:33,060
so you have to be a little careful

116
00:04:33,060 --> 00:04:34,800
because it  is powered by 200 a

117
00:04:34,800 --> 00:04:35,759
flight must not put your fingers

118
00:04:35,759 --> 00:04:37,800
anywhere

119
00:04:37,800 --> 00:04:41,520
then all the logical part so to

120
00:04:41,520 --> 00:04:44,880
propel them by a base in V8 to

121
00:04:44,880 --> 00:04:48,600
tell me at 113 so it's weapon 64 and

122
00:04:48,600 --> 00:04:52,620
under the SHIELD  there is also the flash

123
00:04:52,620 --> 00:04:56,100
we see here that there is the wifi card which

124
00:04:56,100 --> 00:04:57,960
is connected to the rest of the system in PC

125
00:04:57,960 --> 00:05:01,500
express and we have a port here which is not

126
00:05:01,500 --> 00:05:04,340
populated but which is Luart of the system

127
00:05:04,340 --> 00:05:07,500
so we are primarily interested in  this

128
00:05:07,500 --> 00:05:10,139
Huart on Luart we have some

129
00:05:10,139 --> 00:05:12,780
interesting information so it's a

130
00:05:12,780 --> 00:05:15,660
yougouts that starts we can see that the

131
00:05:15,660 --> 00:05:17,699
system behind it is a Linux that

132
00:05:17,699 --> 00:05:19,940
the architecture is weapon 64

133
00:05:19,940 --> 00:05:23,280
but after starting the notebook we could not

134
00:05:23,280 --> 00:05:25,139
find any

135
00:05:25,139 --> 00:05:27,240
we can't interrupt the boot either there are

136
00:05:27,240 --> 00:05:28,880
n't les

137
00:05:28,880 --> 00:05:32,220
we can't escape to get the

138
00:05:32,220 --> 00:05:34,740
salt from the hubote shawl it's been

139
00:05:34,740 --> 00:05:37,620
deactivated and we don't have a shell at the

140
00:05:37,620 --> 00:05:39,780
end of the boot either but on the other hand  we

141
00:05:39,780 --> 00:05:41,100
have information that will serve us

142
00:05:41,100 --> 00:05:43,740
for the future we have the physical address to

143
00:05:43,740 --> 00:05:46,620
which and the Linux kernel and therefore we will be

144
00:05:46,620 --> 00:05:49,139
able to continue with that

145
00:05:49,139 --> 00:05:51,240
so I spoke when I presented the

146
00:05:51,240 --> 00:05:53,340
components of the wifi card which is

147
00:05:53,340 --> 00:05:55,400
connected to a PC  express with the system

148
00:05:55,400 --> 00:06:00,000
in fact we can remove it and

149
00:06:00,000 --> 00:06:02,220
how the sound will continue to

150
00:06:02,220 --> 00:06:04,199
work correctly because we

151
00:06:04,199 --> 00:06:06,600
can fullback it on the Pernet by

152
00:06:06,600 --> 00:06:08,820
connecting an Ethernet cable to it

153
00:06:08,820 --> 00:06:10,919
and instead of this wifi card we  will be

154
00:06:10,919 --> 00:06:13,520
able to plug our little adapter

155
00:06:13,520 --> 00:06:16,500
our little FPGA and do a

156
00:06:16,500 --> 00:06:20,520
DMA attack on it so with the cfpga which is

157
00:06:20,520 --> 00:06:22,220
compatible with all the PCI litech

158
00:06:22,220 --> 00:06:24,720
is that going to offer us is that we

159
00:06:24,720 --> 00:06:26,520
will be able to have read

160
00:06:26,520 --> 00:06:28,280
write access  to the physical memory

161
00:06:28,280 --> 00:06:30,660
on the sound system if there is no protection

162
00:06:30,660 --> 00:06:33,539
there is no Ayo MMU in place so we

163
00:06:33,539 --> 00:06:36,660
can go read the notebook for example

164
00:06:36,660 --> 00:06:38,460
modify it if we want

165
00:06:38,460 --> 00:06:40,919
so first we will dump

166
00:06:40,919 --> 00:06:44,220
the entire notebook so for  that we

167
00:06:44,220 --> 00:06:45,960
had the address at which it is Lodé

168
00:06:45,960 --> 00:06:48,180
in physical memory in the logs on

169
00:06:48,180 --> 00:06:50,880
Luart so we check it afterwards we can

170
00:06:50,880 --> 00:06:52,860
convert it so that it is easier to

171
00:06:52,860 --> 00:06:55,500
analyze in elf with a small tool

172
00:06:55,500 --> 00:06:57,720
called VM Linux this  what will do is

173
00:06:57,720 --> 00:06:59,460
that it will pierce the stage of symbols that

174
00:06:59,460 --> 00:07:01,680
are contained in the carnal it will create

175
00:07:01,680 --> 00:07:03,360
an Elf with the symbols in the right place

176
00:07:03,360 --> 00:07:06,060
and so we can open we can open that

177
00:07:06,060 --> 00:07:08,759
in the IDA and then be ne  not be

178
00:07:08,759 --> 00:07:10,880
lost

179
00:07:10,919 --> 00:07:12,780
now what we want is to gain

180
00:07:12,780 --> 00:07:15,720
access to the system because by

181
00:07:15,720 --> 00:07:17,759
default there is nothing that allows us to

182
00:07:17,759 --> 00:07:20,639
connect to it to

183
00:07:20,639 --> 00:07:22,800
debug so there is a fairly well-

184
00:07:22,800 --> 00:07:26,340
known method on Linux which consists of  call

185
00:07:26,340 --> 00:07:28,199
the function called orderliper off

186
00:07:28,199 --> 00:07:30,800
which will simply launch

187
00:07:30,800 --> 00:07:33,900
the character string which contains a

188
00:07:33,900 --> 00:07:36,479
command the string in the variable

189
00:07:36,479 --> 00:07:38,520
power off command and which will launch a

190
00:07:38,520 --> 00:07:42,300
user process from the notebook

191
00:07:42,300 --> 00:07:45,599
so for that I chose to patch  one

192
00:07:45,599 --> 00:07:47,639
of the functions which we are sure

193
00:07:47,639 --> 00:07:50,099
is called very regularly in

194
00:07:50,099 --> 00:07:52,259
the carnal which is called VFS read which is

195
00:07:52,259 --> 00:07:53,699
basically called each time there is

196
00:07:53,699 --> 00:07:55,740
a reading which is done on a on a

197
00:07:55,740 --> 00:07:57,360
file

198
00:07:57,360 --> 00:07:59,580
so there  there is a small place in this

199
00:07:59,580 --> 00:08:01,800
function where there is a verification of

200
00:08:01,800 --> 00:08:04,440
rights which is basically done except for a

201
00:08:04,440 --> 00:08:07,020
particular attempt in

202
00:08:07,020 --> 00:08:10,860
nominal operation this check is useless it

203
00:08:10,860 --> 00:08:12,780
just offers security so we can

204
00:08:12,780 --> 00:08:16,919
replace it with the orderlipower call and if

205
00:08:16,919 --> 00:08:19,020
we modified the power command command

206
00:08:19,020 --> 00:08:21,120
it will execute our command on the

207
00:08:21,120 --> 00:08:22,680
system

208
00:08:22,680 --> 00:08:24,599
so to do that it's simple I think

209
00:08:24,599 --> 00:08:27,000
we are not going to do much here but we will

210
00:08:27,000 --> 00:08:29,280
modify the other codes that I have

211
00:08:29,280 --> 00:08:30,840
identified there on the on the

212
00:08:30,840 --> 00:08:34,559
previous slide to call orderally pop we

213
00:08:34,559 --> 00:08:38,940
are going to modify the string for order and

214
00:08:38,940 --> 00:08:42,000
that's it and then we have a little limited in

215
00:08:42,000 --> 00:08:43,799
size on the on the order that we have to

216
00:08:43,799 --> 00:08:45,180
do so what I chose to do

217
00:08:45,180 --> 00:08:47,220
is to come Feucher a  chelsecript

218
00:08:47,220 --> 00:08:50,100
on a server that I control and which

219
00:08:50,100 --> 00:08:51,420
will perform additional actions

220
00:08:51,420 --> 00:08:54,000
which will change the

221
00:08:54,000 --> 00:08:56,760
route password that we don't know and which will

222
00:08:56,760 --> 00:08:59,459
activate the SSH server on the on the

223
00:08:59,459 --> 00:09:00,959
device

224
00:09:00,959 --> 00:09:02,760
and so here we are now

225
00:09:02,760 --> 00:09:05,220
with  root access on the device

226
00:09:05,220 --> 00:09:07,560
concile and what we want to do behind it

227
00:09:07,560 --> 00:09:09,240
is to have means of

228
00:09:09,240 --> 00:09:10,380
additional debates so for example to

229
00:09:10,380 --> 00:09:13,019
launch a GDB server and to be able to

230
00:09:13,019 --> 00:09:15,779
observe the processes

231
00:09:15,779 --> 00:09:18,600
for that sonos they have added they are

232
00:09:18,600 --> 00:09:21,320
cheap  a little bit the notebook

233
00:09:21,420 --> 00:09:23,820
they removed the possibility of passing

234
00:09:23,820 --> 00:09:25,820
a readright file system

235
00:09:25,820 --> 00:09:28,800
and adding the executable flag to it

236
00:09:28,800 --> 00:09:30,720
so we can't store a

237
00:09:30,720 --> 00:09:33,120
binary it is executed in all in

238
00:09:33,120 --> 00:09:35,519
all mount points that

239
00:09:35,519 --> 00:09:38,399
are writable in fact it authorizes

240
00:09:38,399 --> 00:09:40,680
it is authorized but only on

241
00:09:40,680 --> 00:09:43,620
devices which are in development mode and

242
00:09:43,620 --> 00:09:45,300
which is not the case for what we can

243
00:09:45,300 --> 00:09:47,040
buy

244
00:09:47,040 --> 00:09:49,019
so for that we can do as we

245
00:09:49,019 --> 00:09:50,399
did previously we will

246
00:09:50,399 --> 00:09:52,860
patch the other codes of  the function

247
00:09:52,860 --> 00:09:54,779
that does the verification and we will

248
00:09:54,779 --> 00:09:57,120
make it always return one

249
00:09:57,120 --> 00:09:59,160
and therefore we will be able to add the

250
00:09:59,160 --> 00:10:00,839
exact flag on the partitions that are

251
00:10:00,839 --> 00:10:01,700
registered

252
00:10:01,700 --> 00:10:04,800
and therefore after all simply if we want

253
00:10:04,800 --> 00:10:08,040
we can upload a small gdber remount

254
00:10:08,040 --> 00:10:10,640
the partition add the flag to it  Exactly

255
00:10:10,640 --> 00:10:12,420
the old one I have servers and

256
00:10:12,420 --> 00:10:15,980
attach to any process of

257
00:10:15,980 --> 00:10:19,279
the enclosure

258
00:10:19,279 --> 00:10:21,120
we are going to talk a little about the

259
00:10:21,120 --> 00:10:23,760
attack surface on the sonos it is a bit

260
00:10:23,760 --> 00:10:26,100
particular they have chosen to embark

261
00:10:26,100 --> 00:10:28,380
everything in a huge binary so we see

262
00:10:28,380 --> 00:10:31,080
here it's the nats it gives a bit of an

263
00:10:31,080 --> 00:10:34,380
idea of ​​the remote surface that is on

264
00:10:34,380 --> 00:10:36,260
the speaker

265
00:10:36,260 --> 00:10:38,820
and so this binary it's called Anna

266
00:10:38,820 --> 00:10:42,300
capad and so we're going to talk about this binary

267
00:10:42,300 --> 00:10:43,860
for the rest therefore it is he who will

268
00:10:43,860 --> 00:10:45,380
host all the functionalities

269
00:10:45,380 --> 00:10:49,980
offered by a safe the sonos

270
00:10:49,980 --> 00:10:52,140
this binary he has a huge

271
00:10:52,140 --> 00:10:53,760
attack surface since he is the one who hosts

272
00:10:53,760 --> 00:10:55,620
all the functionalities and that the

273
00:10:55,620 --> 00:10:57,779
sonos weighs a lot of things  there is

274
00:10:57,779 --> 00:10:59,579
a web server on board which will be

275
00:10:59,579 --> 00:11:01,380
used to make the UMP to

276
00:11:01,380 --> 00:11:02,839
configure

277
00:11:02,839 --> 00:11:04,500
basically everything you can do

278
00:11:04,500 --> 00:11:06,360
with the sound system app on your phone it

279
00:11:06,360 --> 00:11:08,000
goes through that

280
00:11:08,000 --> 00:11:09,899
it is he who will do it too

281
00:11:09,899 --> 00:11:12,600
multi-speaker synchronization at the beginning

282
00:11:12,600 --> 00:11:14,519
of the presentation I spoke to you about the

283
00:11:14,519 --> 00:11:16,200
stereo earth to use two

284
00:11:16,200 --> 00:11:18,180
speakers to have stereo but

285
00:11:18,180 --> 00:11:20,279
it is he who is responsible for that he is

286
00:11:20,279 --> 00:11:21,899
also the one who will connect to the

287
00:11:21,899 --> 00:11:23,420
file server if we  wants to have

288
00:11:23,420 --> 00:11:25,620
audio files on

289
00:11:25,620 --> 00:11:27,360
file servers it is he who will do the

290
00:11:27,360 --> 00:11:30,240
decoding of the audio and he is also the one

291
00:11:30,240 --> 00:11:31,560
who will support all the

292
00:11:31,560 --> 00:11:36,420
ancillary services such as Spotify Last FM etc.

293
00:11:36,420 --> 00:11:37,740
so it offers a lot of things to

294
00:11:37,740 --> 00:11:39,240
watch

295
00:11:39,240 --> 00:11:40,500
on the other hand it's still a binary

296
00:11:40,500 --> 00:11:42,779
which is suddenly quite big it's

297
00:11:42,779 --> 00:11:45,839
13 megabytes of it's more more so it's

298
00:11:45,839 --> 00:11:48,019
not a dream we're

299
00:11:48,079 --> 00:11:50,700
lucky it's not very well

300
00:11:50,700 --> 00:11:52,800
protected there is SLR there  has NX but

301
00:11:52,800 --> 00:11:55,260
it's not compiled with straw and there's

302
00:11:55,260 --> 00:11:57,959
no Canaries stack on it and we can

303
00:11:57,959 --> 00:11:59,399
see that it also embeds some

304
00:11:59,399 --> 00:12:01,500
open source projects in fact they ate everything

305
00:12:01,500 --> 00:12:03,839
in their stuff and there are some

306
00:12:03,839 --> 00:12:05,339
open source projects that are  which are

307
00:12:05,339 --> 00:12:06,720
in it but it's not the majority the

308
00:12:06,720 --> 00:12:10,079
majority it's still custom C++

309
00:12:10,079 --> 00:12:12,440
in the case in which there are a lot of

310
00:12:12,440 --> 00:12:14,700
log messages so that's not bad

311
00:12:14,700 --> 00:12:16,200
when you do reverse because well

312
00:12:16,200 --> 00:12:17,880
we go quickly  to be able to find oneself

313
00:12:17,880 --> 00:12:19,980
in the code by relying on the

314
00:12:19,980 --> 00:12:23,459
messages which are which are made and

315
00:12:23,459 --> 00:12:25,079
afterwards for the exploitation which is

316
00:12:25,079 --> 00:12:26,519
also not bad is that this binary as soon as it

317
00:12:26,519 --> 00:12:29,959
spits it will restart automatically

318
00:12:30,300 --> 00:12:32,700
so I was talking about the logs  when you want to take a look at

319
00:12:32,700 --> 00:12:34,680
how it works who

320
00:12:34,680 --> 00:12:37,200
started coding a few things

321
00:12:37,200 --> 00:12:38,640
to try to type certain

322
00:12:38,640 --> 00:12:40,260
subsystems it's not bad to have them

323
00:12:40,260 --> 00:12:42,600
it's log so Henri pouring a little

324
00:12:42,600 --> 00:12:44,160
bit we realize that there  has a function

325
00:12:44,160 --> 00:12:46,860
that allows you to define where it

326
00:12:46,860 --> 00:12:49,139
will be stored so there are two

327
00:12:49,139 --> 00:12:51,360
solutions either we can send these logs

328
00:12:51,360 --> 00:12:53,760
to the serial that we mentioned at the beginning or

329
00:12:53,760 --> 00:12:55,860
we can send the logs in UDP to

330
00:12:55,860 --> 00:12:57,959
a server  given so we will be able to

331
00:12:57,959 --> 00:12:59,220
add a small line in the

332
00:12:59,220 --> 00:13:01,920
account file that the anacapad

333
00:13:01,920 --> 00:13:03,420
will read at startup to tell it that

334
00:13:03,420 --> 00:13:06,000
the server to which it must send

335
00:13:06,000 --> 00:13:07,980
the logs is our machine and so

336
00:13:07,980 --> 00:13:09,839
afterwards we will be able to all  the logs

337
00:13:09,839 --> 00:13:11,760
whatever the level of log we will we

338
00:13:11,760 --> 00:13:13,139
will receive everything

339
00:13:13,139 --> 00:13:16,160
so it's quite useful

340
00:13:16,820 --> 00:13:20,399
firstly I decided in 2020 to

341
00:13:20,399 --> 00:13:22,339
focus on the web server

342
00:13:22,339 --> 00:13:24,779
so it's a server that costs on

343
00:13:24,779 --> 00:13:28,860
port 1400 and 1433 SSL  it is he who

344
00:13:28,860 --> 00:13:31,500
provides the UMP who provides all the

345
00:13:31,500 --> 00:13:34,440
configuration when you join a

346
00:13:34,440 --> 00:13:35,880
new speaker to configure it

347
00:13:35,880 --> 00:13:39,240
he provides all the APIs for the

348
00:13:39,240 --> 00:13:41,040
different applications whether on

349
00:13:41,040 --> 00:13:43,620
mobile or desktop he is the one who  will

350
00:13:43,620 --> 00:13:48,019
also provide the Discovery of

351
00:13:48,019 --> 00:13:50,760
multi-devices if we want to add a

352
00:13:50,760 --> 00:13:52,700
device to make

353
00:13:52,700 --> 00:13:55,860
stereo Persia if we want to add a

354
00:13:55,860 --> 00:13:58,019
Spotify account, etc. he is also the one

355
00:13:58,019 --> 00:14:00,240
responsible for that, so there are

356
00:14:00,240 --> 00:14:02,820
a lot of handpoints and  that there is going to

357
00:14:02,820 --> 00:14:04,560
be a lot of things to look at

358
00:14:04,560 --> 00:14:05,880
there is no real authentication

359
00:14:05,880 --> 00:14:07,860
on the web server so most of the

360
00:14:07,860 --> 00:14:09,740
handpoints we will be able to type on

361
00:14:09,740 --> 00:14:14,399
without additional information

362
00:14:14,399 --> 00:14:16,980
the device it also supports an

363
00:14:16,980 --> 00:14:19,680
unlock mode and a development mode for

364
00:14:19,680 --> 00:14:21,420
these two modes there we can activate them

365
00:14:21,420 --> 00:14:24,779
by the HTTP server also but we will

366
00:14:24,779 --> 00:14:26,579
have to have blobs which are signed

367
00:14:26,579 --> 00:14:30,899
by sonos and therefore we do not have them

368
00:14:30,899 --> 00:14:32,399
so the methodology is quite

369
00:14:32,399 --> 00:14:34,740
simple on the web server we take the

370
00:14:34,740 --> 00:14:36,899
core part of the web server  we look at

371
00:14:36,899 --> 00:14:38,459
how it works how it plots

372
00:14:38,459 --> 00:14:40,920
the leadershttp this kind of thing we

373
00:14:40,920 --> 00:14:43,740
were looking for the vulnerabilities in it and if

374
00:14:43,740 --> 00:14:46,019
we don't find any and well we continue we

375
00:14:46,019 --> 00:14:48,240
will take all their point one by one

376
00:14:48,240 --> 00:14:49,260
then we will try to look for

377
00:14:49,260 --> 00:14:50,699
cities in it so it's  is a

378
00:14:50,699 --> 00:14:53,040
rather tedious job because there are a

379
00:14:53,040 --> 00:14:54,540
lot of them and you have to pass them

380
00:14:54,540 --> 00:14:55,340
a

381
00:14:55,340 --> 00:14:56,519
[Music]

382
00:14:56,519 --> 00:14:58,740
unfortunately I couldn't find anything in this

383
00:14:58,740 --> 00:15:00,779
web server and since I taught you

384
00:15:00,779 --> 00:15:02,579
a little late before the competition  I

385
00:15:02,579 --> 00:15:04,199
decided to stop there because I did

386
00:15:04,199 --> 00:15:06,240
n't think I could find something before

387
00:15:06,240 --> 00:15:09,079
the competition here

388
00:15:09,079 --> 00:15:12,779
and in 2021 they gave up a new

389
00:15:12,779 --> 00:15:15,300
competition and the sound one was

390
00:15:15,300 --> 00:15:17,040
still part of the possible targates

391
00:15:17,040 --> 00:15:19,940
so I chose to get back to it

392
00:15:19,940 --> 00:15:22,860
and I myself I decided to focus on the

393
00:15:22,860 --> 00:15:25,260
audio quads and there I'm going a lot of

394
00:15:25,260 --> 00:15:27,180
sense because very quickly I was

395
00:15:27,180 --> 00:15:28,680
able to find I was able to find a

396
00:15:28,680 --> 00:15:31,219
vulnerability

397
00:15:31,620 --> 00:15:34,680
the audio codacs so on the sonos

398
00:15:34,680 --> 00:15:36,839
the same to read for  play audio

399
00:15:36,839 --> 00:15:38,459
when on the same LAN there is no

400
00:15:38,459 --> 00:15:40,680
need for authentication so

401
00:15:40,680 --> 00:15:42,720
anyone on the donkey can use the API

402
00:15:42,720 --> 00:15:45,480
request to play this or that file

403
00:15:45,480 --> 00:15:47,760
whether on a remote server etc there

404
00:15:47,760 --> 00:15:49,500
can do all these recipes there without

405
00:15:49,500 --> 00:15:53,040
skipping there are a lot of

406
00:15:53,040 --> 00:15:54,540
file formats that are supported and codecs

407
00:15:54,540 --> 00:15:55,980
that are supported so it offers a

408
00:15:55,980 --> 00:15:58,880
large surface

409
00:16:31,800 --> 00:16:34,920
so the code that does the audio decoding

410
00:16:34,920 --> 00:16:37,440
there is a part where you can find

411
00:16:37,440 --> 00:16:38,639
projects  open source which

412
00:16:38,639 --> 00:16:40,440
correspond to the code which is shipped

413
00:16:40,440 --> 00:16:42,300
in the dinar and another part where it

414
00:16:42,300 --> 00:16:44,660
seems to be close source projects

415
00:16:44,660 --> 00:16:46,620
it is a code base which is

416
00:16:46,620 --> 00:16:48,060
relatively old in fact when we

417
00:16:48,060 --> 00:16:49,259
take each codec that we try to

418
00:16:49,259 --> 00:16:52,259
find the code  we find in

419
00:16:52,259 --> 00:16:54,320
fairly old years

420
00:16:54,320 --> 00:16:56,820
in what I have been able to look at I have

421
00:16:56,820 --> 00:16:58,199
the impression that the code was forced

422
00:16:58,199 --> 00:17:00,839
between 2005 and 2012 so it is really

423
00:17:00,839 --> 00:17:03,360
very old codebases

424
00:17:03,360 --> 00:17:05,939
the methodology for looking for cities

425
00:17:05,939 --> 00:17:07,140
there  -inside it's a bit like on the

426
00:17:07,140 --> 00:17:08,880
web server we're going to try to understand

427
00:17:08,880 --> 00:17:10,880
a little bit

428
00:17:10,880 --> 00:17:14,099
where it's read and how the

429
00:17:14,099 --> 00:17:15,959
dispatch is done between the different

430
00:17:15,959 --> 00:17:17,939
decoders so that's quite simple

431
00:17:17,939 --> 00:17:19,380
because it  is more the more they have a

432
00:17:19,380 --> 00:17:21,540
kind of class which is always

433
00:17:21,540 --> 00:17:24,839
the same or in the awakening table the decoder

434
00:17:24,839 --> 00:17:26,520
is always at the same recipe so

435
00:17:26,520 --> 00:17:28,020
once we are identified that but we can

436
00:17:28,020 --> 00:17:30,900
pass them one by one and look for

437
00:17:30,900 --> 00:17:33,500
cities in  each

438
00:17:34,440 --> 00:17:36,120
decoder that we are going to talk about

439
00:17:36,120 --> 00:17:37,559
today because it is the one that

440
00:17:37,559 --> 00:17:38,880
contains the vulnerability that I

441
00:17:38,880 --> 00:17:41,160
used is the lac decoder therefore

442
00:17:41,160 --> 00:17:44,780
it is Apple's Kodak lossless audio

443
00:17:44,780 --> 00:17:47,220
therefore which was made in 2004  I think

444
00:17:47,220 --> 00:17:49,860
it was for the iPod it's an

445
00:17:49,860 --> 00:17:51,860
audio format which is embedded

446
00:17:51,860 --> 00:17:55,160
in the MP4 format

447
00:17:55,160 --> 00:17:57,720
and which is relatively simple the only

448
00:17:57,720 --> 00:17:59,280
complexity in fact is that the fields

449
00:17:59,280 --> 00:18:02,880
are not aligned to the byte and therefore when

450
00:18:02,880 --> 00:18:04,860
we  wants to work a little with it's not

451
00:18:04,860 --> 00:18:08,059
it's not practical

452
00:18:08,830 --> 00:18:10,320
[Music]

453
00:18:10,320 --> 00:18:12,539
where most of the frames

454
00:18:12,539 --> 00:18:15,419
will be complete but for the

455
00:18:15,419 --> 00:18:16,679
last frame there is still a

456
00:18:16,679 --> 00:18:18,120
little bit particular there is a flop  which

457
00:18:18,120 --> 00:18:20,400
will indicate that it is a partial audio frame

458
00:18:20,400 --> 00:18:23,160
and in the case of a

459
00:18:23,160 --> 00:18:25,140
partial audio frame we will have an

460
00:18:25,140 --> 00:18:27,840
additional size which will contain the number

461
00:18:27,840 --> 00:18:31,380
of samples of sample which has to follow

462
00:18:31,380 --> 00:18:34,320
in the audio frame

463
00:18:34,320 --> 00:18:37,140
so this size we will  see it it is she

464
00:18:37,140 --> 00:18:39,539
who is not at all checked in the

465
00:18:39,539 --> 00:18:43,080
code and which will give rise to several

466
00:18:43,080 --> 00:18:45,360
vulnerabilities so there we can see the

467
00:18:45,360 --> 00:18:48,419
extracts of the compiled roughly the

468
00:18:48,419 --> 00:18:51,240
program in the case of a

469
00:18:51,240 --> 00:18:53,039
partial frame will go to read  a 32-

470
00:18:53,039 --> 00:18:55,140
bit integer and then it will iterate over it to

471
00:18:55,140 --> 00:18:56,760
fill arrays without ever

472
00:18:56,760 --> 00:19:01,280
checking that the index is in the array

473
00:19:01,280 --> 00:19:03,240
to make it a little simpler we

474
00:19:03,240 --> 00:19:05,280
will look for the Open Source code

475
00:19:05,280 --> 00:19:08,280
corresponding to this decoder and we

476
00:19:08,280 --> 00:19:10,080
s  see that the code is very close

477
00:19:10,080 --> 00:19:13,080
to a code that emerged in libre

478
00:19:13,080 --> 00:19:17,940
with codec in 2005 by david hamerton and

479
00:19:17,940 --> 00:19:20,660
in fact this person had

480
00:19:20,660 --> 00:19:23,880
made the decoder from

481
00:19:23,880 --> 00:19:25,799
rivers saint-genering from an apple software

482
00:19:25,799 --> 00:19:28,020


483
00:19:28,020 --> 00:19:29,940
so there I think we are not going

484
00:19:29,940 --> 00:19:33,000
much but in the quad we can clearly see

485
00:19:33,000 --> 00:19:36,660
two units there is a first loop

486
00:19:36,660 --> 00:19:39,900
which is made from the size which

487
00:19:39,900 --> 00:19:41,580
is which is not checked which will store

488
00:19:41,580 --> 00:19:43,140
values ​​in an array

489
00:19:43,140 --> 00:19:45,900
intermediate on the hip so we are going to

490
00:19:45,900 --> 00:19:48,059
have an overflow of an overflow

491
00:19:48,059 --> 00:19:51,960
on the hip and after in output this

492
00:19:51,960 --> 00:19:53,340
intermediate array would happen to be reused

493
00:19:53,340 --> 00:19:55,980
to fill the the output buffer and

494
00:19:55,980 --> 00:19:59,960
here too the index is never checked

495
00:20:00,059 --> 00:20:01,559
there are two calls to  this vulnerable function

496
00:20:01,559 --> 00:20:03,919


497
00:20:03,919 --> 00:20:07,200
which will be done depending on the

498
00:20:07,200 --> 00:20:10,320
size of the samples the audio it can be

499
00:20:10,320 --> 00:20:12,299
encoded either on this either on 16 bits

500
00:20:12,299 --> 00:20:14,760
or on 24 bits in the implementation

501
00:20:14,760 --> 00:20:17,880
which has on the speaker and in both

502
00:20:17,880 --> 00:20:20,340
cases we will have  the output table

503
00:20:20,340 --> 00:20:23,940
is going to be a table on the stack and we

504
00:20:23,940 --> 00:20:26,900
will be able to see Flo

505
00:20:27,660 --> 00:20:29,640
so I said earlier there is

506
00:20:29,640 --> 00:20:32,039
no Canary stack and there is not on

507
00:20:32,039 --> 00:20:33,780
the on the binary so that  means that

508
00:20:33,780 --> 00:20:36,600
if we manage to overflow lastack we will be

509
00:20:36,600 --> 00:20:38,940
able to break directly without

510
00:20:38,940 --> 00:20:42,299
needing additional information

511
00:20:42,299 --> 00:20:43,620
on the other hand we will be a little

512
00:20:43,620 --> 00:20:46,580
annoyed because on if we want to

513
00:20:46,580 --> 00:20:49,500
reach the Stack Overflow we will

514
00:20:49,500 --> 00:20:52,140
also be obliged to trigger the

515
00:20:52,140 --> 00:20:53,160
hip  -hoverflow on the intermediate table

516
00:20:53,160 --> 00:20:54,900


517
00:20:54,900 --> 00:20:57,720
and unfortunately the chunks on the Hip

518
00:20:57,720 --> 00:20:59,940
are taken before Return of the function

519
00:20:59,940 --> 00:21:01,799
so that means that if we have corrupted

520
00:21:01,799 --> 00:21:04,020
the Hip and well we will crash before

521
00:21:04,020 --> 00:21:05,280
Return of the function and therefore we will

522
00:21:05,280 --> 00:21:08,340
not control the  execution so we will have to

523
00:21:08,340 --> 00:21:10,939
do with that

524
00:21:11,280 --> 00:21:13,919
the first method that I used and

525
00:21:13,919 --> 00:21:15,179
which means that we can do

526
00:21:15,179 --> 00:21:18,840
without overflow the Hip is to use

527
00:21:18,840 --> 00:21:20,780
another reality in the code

528
00:21:20,780 --> 00:21:23,640
in the codec we also control the

529
00:21:23,640 --> 00:21:26,400
number  of Chanel and so we see here

530
00:21:26,400 --> 00:21:29,400
when he writes the exit table he

531
00:21:29,400 --> 00:21:31,860
will be able to iterate on this table on this

532
00:21:31,860 --> 00:21:33,720
table more quickly if we increase the

533
00:21:33,720 --> 00:21:35,580
number of Chanel and suddenly we will be

534
00:21:35,580 --> 00:21:36,799
able to

535
00:21:36,799 --> 00:21:38,760
cause the schedule to flow much

536
00:21:38,760 --> 00:21:42,080
faster on the  on the stack on the hip

537
00:21:42,080 --> 00:21:43,760
unfortunately

538
00:21:43,760 --> 00:21:46,980
it was patched quite quickly while

539
00:21:46,980 --> 00:21:48,780
I was doing the research so I had

540
00:21:48,780 --> 00:21:49,980
time to develop an exploit so

541
00:21:49,980 --> 00:21:52,320
that for this version there but it was

542
00:21:52,320 --> 00:21:53,360
corrected

543
00:21:53,360 --> 00:21:56,880
and sono it modified exactly the

544
00:21:56,880 --> 00:21:58,620
function which is  vulnerable and add

545
00:21:58,620 --> 00:22:01,580
a check so that the number of Channel

546
00:22:01,580 --> 00:22:04,320
to lac is limited to two so that

547
00:22:04,320 --> 00:22:05,580
we could no longer move fast enough

548
00:22:05,580 --> 00:22:08,460
to not cause Hippopo barflow and

549
00:22:08,460 --> 00:22:10,620
that the probable reason well is that

550
00:22:10,620 --> 00:22:15,260
on the printer  on the

551
00:22:15,539 --> 00:22:18,419
speaker there is a

552
00:22:18,419 --> 00:22:20,340
crash report system to sonos in fact

553
00:22:20,340 --> 00:22:21,720
each time the process spits it

554
00:22:21,720 --> 00:22:23,820
will save its crash somewhere and

555
00:22:23,820 --> 00:22:25,640
when it starts again it will euploder

556
00:22:25,640 --> 00:22:27,900
it will blood this crash on the

557
00:22:27,900 --> 00:22:30,960
sonos servers and therefore sonos certainly

558
00:22:30,960 --> 00:22:32,760
used this to realize that there

559
00:22:32,760 --> 00:22:34,380
was a vulnerability in the code of

560
00:22:34,380 --> 00:22:36,840
the lake and to correct it

561
00:22:36,840 --> 00:22:38,520
fortunately they did not see that the

562
00:22:38,520 --> 00:22:39,720
rest of the function was vulnerable

563
00:22:39,720 --> 00:22:42,179
so we are left with the function  but we

564
00:22:42,179 --> 00:22:45,840
have to do with the ovary flow on the bed

565
00:22:45,840 --> 00:22:48,059
so it's loverflow if we represent

566
00:22:48,059 --> 00:22:50,220
like that we'll open for both

567
00:22:50,220 --> 00:22:51,380
sides at the same time

568
00:22:51,380 --> 00:22:54,419
on the Hip we'll crush metadata

569
00:22:54,419 --> 00:22:56,760
so if we don't want to crash behind it we'll

570
00:22:56,760 --> 00:23:00,720
have to repair  these data methods and

571
00:23:00,720 --> 00:23:02,280
basically we will have to put

572
00:23:02,280 --> 00:23:04,860
valid sizes in the table methods so

573
00:23:04,860 --> 00:23:07,080
that the prices go well and therefore

574
00:23:07,080 --> 00:23:09,000
our objective is going to be to modify the

575
00:23:09,000 --> 00:23:11,520
value of LR on the stack like that when

576
00:23:11,520 --> 00:23:13,200
we return from the  function we

577
00:23:13,200 --> 00:23:15,480
will control on PC there is one of the

578
00:23:15,480 --> 00:23:17,520
limitations is that the samples are

579
00:23:17,520 --> 00:23:20,580
either 16 bits or 24 bits so we will be

580
00:23:20,580 --> 00:23:22,980
able to control only 16 or 24 bits of the

581
00:23:22,980 --> 00:23:26,220
addresses which will be overwritten

582
00:23:26,220 --> 00:23:29,299
the code to do that it is enough

583
00:23:29,299 --> 00:23:32,340
simple the only complexity as I was

584
00:23:32,340 --> 00:23:33,600
saying earlier is that the

585
00:23:33,600 --> 00:23:35,820
format is not byte aligned so there

586
00:23:35,820 --> 00:23:37,620
are numbers all over the place but

587
00:23:37,620 --> 00:23:39,780
overall just we add values

588
00:23:39,780 --> 00:23:42,299
to data offers and we  makes

589
00:23:42,299 --> 00:23:44,280
sure that it goes well like that

590
00:23:44,280 --> 00:23:46,620
so from there we control the point

591
00:23:46,620 --> 00:23:50,000
of execution and we want to do

592
00:23:50,000 --> 00:23:53,580
we want to continue the operation the

593
00:23:53,580 --> 00:23:55,020
constraint we have so it's like I

594
00:23:55,020 --> 00:23:58,679
said we have  we only control 24 or 16

595
00:23:58,679 --> 00:24:01,440
bits of addresses so we won't be able to

596
00:24:01,440 --> 00:24:04,740
make a large chain dress because we do

597
00:24:04,740 --> 00:24:06,600
n't control much but we will

598
00:24:06,600 --> 00:24:08,100
still be able to control a good

599
00:24:08,100 --> 00:24:09,799
part of the address

600
00:24:09,799 --> 00:24:12,059
finally the first address in any case we

601
00:24:12,059 --> 00:24:13,460
will  control it

602
00:24:13,460 --> 00:24:16,679
properly so the idea is going to be

603
00:24:16,679 --> 00:24:19,200
to execute a shell command we're going to

604
00:24:19,200 --> 00:24:21,299
have a little gadget there which is quite

605
00:24:21,299 --> 00:24:25,140
interesting which will do exact after

606
00:24:25,140 --> 00:24:27,659
placing after placing an

607
00:24:27,659 --> 00:24:30,299
order and we're lucky it takes

608
00:24:30,299 --> 00:24:32,880
the order in  X2 there in the ASM I do

609
00:24:32,880 --> 00:24:34,460
n't know if you manage to read it correctly

610
00:24:34,460 --> 00:24:38,700
and it takes an offset on X2 and it

611
00:24:38,700 --> 00:24:41,220
turns out that X2 points to the data

612
00:24:41,220 --> 00:24:42,960
that we control

613
00:24:42,960 --> 00:24:44,059
and therefore

614
00:24:44,059 --> 00:24:48,419
the X2 plus 0380 which is in the ASM

615
00:24:48,419 --> 00:24:50,940
does the ofet in the ASM point

616
00:24:50,940 --> 00:24:52,140
inside data that we control and

617
00:24:52,140 --> 00:24:53,760
we will be able to put our command that

618
00:24:53,760 --> 00:24:55,380
here

619
00:24:55,380 --> 00:24:57,419
and therefore the code will continue from

620
00:24:57,419 --> 00:25:01,260
there will split the arguments and will make

621
00:25:01,260 --> 00:25:03,480
its exaggerated  and we will have our

622
00:25:03,480 --> 00:25:07,799
arbitrary command execution on the device

623
00:25:07,799 --> 00:25:09,559
what do we decide to do

624
00:25:09,559 --> 00:25:13,140
and well to execute then there the same is

625
00:25:13,140 --> 00:25:15,120
limited in that because the size of the

626
00:25:15,120 --> 00:25:17,280
command it must not overwrite  the

627
00:25:17,280 --> 00:25:20,580
metadata that we repaired on the Hip so

628
00:25:20,580 --> 00:25:22,020
we're going to celebrate a script on a server

629
00:25:22,020 --> 00:25:25,740
that we control and run this script this

630
00:25:25,740 --> 00:25:27,179
script that will disable the

631
00:25:27,179 --> 00:25:31,640
root password and start a server such net

632
00:25:31,640 --> 00:25:33,840
so there we can connect in  full

633
00:25:33,840 --> 00:25:37,020
nature on the sound system without a password

634
00:25:37,020 --> 00:25:39,020


635
00:25:39,360 --> 00:25:41,340
on the day of the competition so when you

636
00:25:41,340 --> 00:25:42,620
have a valid achievement you can register

637
00:25:42,620 --> 00:25:45,360
a week before the day of the

638
00:25:45,360 --> 00:25:46,580
competition

639
00:25:46,580 --> 00:25:48,720
there is a draw to find out

640
00:25:48,720 --> 00:25:51,480
the order in which you  pass and when

641
00:25:51,480 --> 00:25:53,039
it's another round half an hour before we

642
00:25:53,039 --> 00:25:57,539
go we have a call with zadiye in

643
00:25:57,539 --> 00:26:01,260
one with zoom we will check with them

644
00:26:01,260 --> 00:26:04,380
that the network setup is ok that the

645
00:26:04,380 --> 00:26:05,580
version we are going to target is good  the

646
00:26:05,580 --> 00:26:07,440
good one etc

647
00:26:07,440 --> 00:26:10,620
and after that we change we change

648
00:26:10,620 --> 00:26:13,500
zoom and there we go to a room which

649
00:26:13,500 --> 00:26:15,779
is streamed on Youtube and we will do

650
00:26:15,779 --> 00:26:18,120
the attempts

651
00:26:18,120 --> 00:26:20,880
and then we will go to one in a

652
00:26:20,880 --> 00:26:21,679
last

653
00:26:21,679 --> 00:26:24,360
zoom or there we will explain the light

654
00:26:24,360 --> 00:26:26,520
when  even on March we do a kind of

655
00:26:26,520 --> 00:26:28,260
mini restitution so that they

656
00:26:28,260 --> 00:26:31,460
understand where the problem is

657
00:26:31,500 --> 00:26:34,440
in 2021 there have been two successes on sonos

658
00:26:34,440 --> 00:26:36,539
so if one is activated and then another

659
00:26:36,539 --> 00:26:38,880
team called DEVCORE

660
00:26:38,880 --> 00:26:41,279
we have the first attempt  to fail

661
00:26:41,279 --> 00:26:43,919
for a dark history of Python

662
00:26:43,919 --> 00:26:47,520
request and SSL negotiation which

663
00:26:47,520 --> 00:26:49,080
therefore the script did the direct

664
00:26:49,080 --> 00:26:52,140
without even counting anything

665
00:26:52,140 --> 00:26:55,740
and it also goes directly to the second

666
00:26:55,740 --> 00:26:58,200
attempt

667
00:26:58,200 --> 00:26:59,159
what is interesting about this

668
00:26:59,159 --> 00:27:01,740
vulnerability to lac is that it

669
00:27:01,740 --> 00:27:04,140
found itself in many places a few

670
00:27:04,140 --> 00:27:06,179
weeks after point toon there

671
00:27:06,179 --> 00:27:08,059
were other

672
00:27:08,059 --> 00:27:10,679
similar publications on the implementation of

673
00:27:10,679 --> 00:27:12,659
media library on the implementation of what

674
00:27:12,659 --> 00:27:14,480
like on that of Android also

675
00:27:14,480 --> 00:27:16,620
so we can say that it  it's a little

676
00:27:16,620 --> 00:27:19,799
weird but in fact already the code that

677
00:27:19,799 --> 00:27:21,240
is used sonos it's not just sonos

678
00:27:21,240 --> 00:27:22,520
who used it

679
00:27:22,520 --> 00:27:24,779
and everyone was forcing it a little in their

680
00:27:24,779 --> 00:27:30,539
own way and in 2011 Apple released the

681
00:27:30,539 --> 00:27:32,900
source code of Halak  who published a

682
00:27:32,900 --> 00:27:35,159
reference implementation and

683
00:27:35,159 --> 00:27:36,779
the reference implementation that

684
00:27:36,779 --> 00:27:39,500
Apple provides to the implementers

685
00:27:39,500 --> 00:27:41,760
contains the vulnerability so it's not

686
00:27:41,760 --> 00:27:44,039
surprising that everyone copies it but

687
00:27:44,039 --> 00:27:45,900
on the other hand which is funny is that

688
00:27:45,900 --> 00:27:47,460
Apple products do not have them  not the

689
00:27:47,460 --> 00:27:49,260
vulnerability so they patched it but

690
00:27:49,260 --> 00:27:53,240
they didn't pass the reference code

691
00:27:54,659 --> 00:27:57,480
to conclude it was really a

692
00:27:57,480 --> 00:27:59,240
nice experience

693
00:27:59,240 --> 00:28:02,159
apart from the sonos we were able to target a

694
00:28:02,159 --> 00:28:04,380
lot of other devices we

695
00:28:04,380 --> 00:28:08,100
worked at 11 on  at 11 on pown so

696
00:28:08,100 --> 00:28:09,779
mostly on our personal time

697
00:28:09,779 --> 00:28:12,539
but it's going to be a good good team

698
00:28:12,539 --> 00:28:14,940
building it's nice and it's an active one

699
00:28:14,940 --> 00:28:16,799
won the competition as I wanted to

700
00:28:16,799 --> 00:28:19,620
explain to my colleagues yesterday about the

701
00:28:19,620 --> 00:28:21,440
printers

702
00:28:21,440 --> 00:28:23,940
I got bitten by  the crash of the

703
00:28:23,940 --> 00:28:26,520
carrier who burned down a city so

704
00:28:26,520 --> 00:28:29,658
it will be the last time

705
00:28:29,760 --> 00:28:32,480
and that's it otherwise the vulnerabilities are

706
00:28:32,480 --> 00:28:35,640
corrected that which have been presented here to

707
00:28:35,640 --> 00:28:37,860
sonos has worked quite a bit on

708
00:28:37,860 --> 00:28:40,020
hardening the security of its product a little and

709
00:28:40,020 --> 00:28:42,299
so now there is  a pas and the

710
00:28:42,299 --> 00:28:44,580
Canary steaks which are activated on the

711
00:28:44,580 --> 00:28:46,559
live

712
00:28:46,559 --> 00:28:48,240
here I was a little faster than

713
00:28:48,240 --> 00:28:49,500
expected but if you have any questions

714
00:28:49,500 --> 00:28:52,279
do not hesitate

715
00:28:53,600 --> 00:29:01,899
[Applause]

716
00:29:07,410 --> 00:29:10,449
[Music]

717
00:29:26,059 --> 00:29:28,860
hello can we listen to

718
00:29:28,860 --> 00:29:31,760
the  feat

719
00:29:31,880 --> 00:29:34,140
for the little story suddenly when

720
00:29:34,140 --> 00:29:37,279
the feat succeeded the script launched the

721
00:29:37,279 --> 00:29:41,460
baby Shark at full speed in the room

722
00:29:41,460 --> 00:29:44,720
where he was running the feat

723
00:30:08,640 --> 00:30:10,860
if there are no other questions we can

724
00:30:10,860 --> 00:30:12,059
still thank David then  skip

725
00:30:12,059 --> 00:30:14,720
the break thank you

