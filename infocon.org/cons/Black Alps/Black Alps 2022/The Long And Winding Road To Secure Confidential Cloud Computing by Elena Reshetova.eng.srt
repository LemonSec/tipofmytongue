1
00:00:02,820 --> 00:00:06,120
here we go good morning everyone so

2
00:00:06,120 --> 00:00:08,340
thank you for coming to my talk I guess

3
00:00:08,340 --> 00:00:10,500
yesterday was a late dinner and and I

4
00:00:10,500 --> 00:00:12,420
heard it was also after party so I think

5
00:00:12,420 --> 00:00:14,280
that's why we're also seeing what

6
00:00:14,280 --> 00:00:16,800
some people I guess will come later so

7
00:00:16,800 --> 00:00:18,960
the topic I want to talk today this

8
00:00:18,960 --> 00:00:21,119
morning is on confidential cloud

9
00:00:21,119 --> 00:00:23,580
computing confidential Computing so

10
00:00:23,580 --> 00:00:25,740
before I go to start on this can we just

11
00:00:25,740 --> 00:00:28,380
make a quick kind of query so how many

12
00:00:28,380 --> 00:00:31,019
of you like have heard at least to have

13
00:00:31,019 --> 00:00:32,460
some understanding what confidential

14
00:00:32,460 --> 00:00:34,079
Computing is

15
00:00:34,079 --> 00:00:37,200
oh quite many hands okay I do have for

16
00:00:37,200 --> 00:00:38,820
those who don't

17
00:00:38,820 --> 00:00:40,739
I do have a slide luck explaining

18
00:00:40,739 --> 00:00:42,660
basically what if the problem is trying

19
00:00:42,660 --> 00:00:43,920
to solve

20
00:00:43,920 --> 00:00:46,379
so just very briefly who I am so I

21
00:00:46,379 --> 00:00:49,800
belong to Intel SPM red team so our team

22
00:00:49,800 --> 00:00:52,559
and Intel that's very security research

23
00:00:52,559 --> 00:00:54,899
we have like various individuals working

24
00:00:54,899 --> 00:00:56,640
on kind of different projects and

25
00:00:56,640 --> 00:00:58,980
different initiatives now we have people

26
00:00:58,980 --> 00:01:01,460
who specialize in fuzzing people who

27
00:01:01,460 --> 00:01:03,840
specialize on um

28
00:01:03,840 --> 00:01:05,880
like really different different parts

29
00:01:05,880 --> 00:01:07,619
it's mostly centered around Linux

30
00:01:07,619 --> 00:01:09,060
Security even though nowadays we have

31
00:01:09,060 --> 00:01:11,159
also people who are not kind of confined

32
00:01:11,159 --> 00:01:12,900
to the Linux world who are looking also

33
00:01:12,900 --> 00:01:14,880
out outwards more

34
00:01:14,880 --> 00:01:17,580
me personally I have been a while

35
00:01:17,580 --> 00:01:21,180
already in security industry I started

36
00:01:21,180 --> 00:01:23,100
back in time with a mobile and embedded

37
00:01:23,100 --> 00:01:25,020
platform security and over the years

38
00:01:25,020 --> 00:01:27,420
moved mostly to work on Linux Security

39
00:01:27,420 --> 00:01:30,299
Services thing and the part of kind of

40
00:01:30,299 --> 00:01:32,100
security and all the best and it's

41
00:01:32,100 --> 00:01:34,740
mostly low level stuff so work a lot of

42
00:01:34,740 --> 00:01:37,500
Linux kernel and things like that so and

43
00:01:37,500 --> 00:01:40,259
I'm also part of part of my job at Intel

44
00:01:40,259 --> 00:01:41,900
is also have background knowledge and

45
00:01:41,900 --> 00:01:44,100
cryptography so also helping crypto

46
00:01:44,100 --> 00:01:47,400
projects and things around that so let's

47
00:01:47,400 --> 00:01:49,439
go to confidential computing

48
00:01:49,439 --> 00:01:52,380
so um if you think nowadays like so so

49
00:01:52,380 --> 00:01:53,820
what what is a confidential Computing

50
00:01:53,820 --> 00:01:55,860
what is the problem it's trying to solve

51
00:01:55,860 --> 00:01:58,200
um nowadays um if you think about

52
00:01:58,200 --> 00:01:59,880
Enterprise but it's not even Enterprise

53
00:01:59,880 --> 00:02:01,920
I think it's pretty normal assumption

54
00:02:01,920 --> 00:02:04,740
that when we process the data which can

55
00:02:04,740 --> 00:02:06,719
be sensitive confidential has some

56
00:02:06,719 --> 00:02:09,538
privacy implications and so on uh that

57
00:02:09,538 --> 00:02:11,160
data is always protected we usually

58
00:02:11,160 --> 00:02:13,080
don't tend to send this data plain text

59
00:02:13,080 --> 00:02:15,300
like a cryptography sale like an open

60
00:02:15,300 --> 00:02:18,120
Forum into a network we protect the data

61
00:02:18,120 --> 00:02:19,440
when it transfers through the network

62
00:02:19,440 --> 00:02:21,840
they do protect the data when we store

63
00:02:21,840 --> 00:02:24,000
it in the disk so similar protection

64
00:02:24,000 --> 00:02:26,459
exists however when this data is being

65
00:02:26,459 --> 00:02:28,920
processed in a memory so it's actually

66
00:02:28,920 --> 00:02:31,020
being operated on there's usually no

67
00:02:31,020 --> 00:02:34,020
protection so your application can be

68
00:02:34,020 --> 00:02:35,580
processing your

69
00:02:35,580 --> 00:02:38,640
on a privacy or sensitive data and while

70
00:02:38,640 --> 00:02:40,620
it's processing its data resides in a

71
00:02:40,620 --> 00:02:44,459
memory and anyone or I mean it's of

72
00:02:44,459 --> 00:02:46,200
course you have this operating system

73
00:02:46,200 --> 00:02:48,360
measures which isolate processes and so

74
00:02:48,360 --> 00:02:50,519
on but in principle it's open plain text

75
00:02:50,519 --> 00:02:52,920
in the memory and it's let's operating

76
00:02:52,920 --> 00:02:54,780
system gets compromised or something

77
00:02:54,780 --> 00:02:58,140
gets compromised around it they the data

78
00:02:58,140 --> 00:03:00,120
the sensitive data gets quite exposed

79
00:03:00,120 --> 00:03:01,260
right away

80
00:03:01,260 --> 00:03:03,239
so this is exactly the Gap that

81
00:03:03,239 --> 00:03:05,400
confidential Computing is trying to

82
00:03:05,400 --> 00:03:08,280
solve and it does it by uh providing a

83
00:03:08,280 --> 00:03:11,519
way to execute the processing of this

84
00:03:11,519 --> 00:03:13,980
data in in some kind of you can think of

85
00:03:13,980 --> 00:03:17,099
this uh it it's Hardware based it's

86
00:03:17,099 --> 00:03:18,840
Hardware supported trusted execution

87
00:03:18,840 --> 00:03:21,060
environment so it's it's special kind of

88
00:03:21,060 --> 00:03:23,700
environment where the data is being

89
00:03:23,700 --> 00:03:25,800
protected so that environment whenever

90
00:03:25,800 --> 00:03:27,420
you execute anything in that environment

91
00:03:27,420 --> 00:03:29,400
it's protected from anything from

92
00:03:29,400 --> 00:03:30,480
outside

93
00:03:30,480 --> 00:03:32,819
and um and and it does provide with

94
00:03:32,819 --> 00:03:34,920
confidentiality and integrity of the

95
00:03:34,920 --> 00:03:37,620
data that you operate on and also as a

96
00:03:37,620 --> 00:03:40,560
result because we're processing uh the

97
00:03:40,560 --> 00:03:42,420
workload with processor data so that

98
00:03:42,420 --> 00:03:44,400
process which runs inside of a trusted

99
00:03:44,400 --> 00:03:46,500
execution environment uh you have to

100
00:03:46,500 --> 00:03:48,120
that one is going to see actually the

101
00:03:48,120 --> 00:03:49,860
data in plain text so you have to also

102
00:03:49,860 --> 00:03:51,900
make sure that that process the

103
00:03:51,900 --> 00:03:53,940
Integrity of the code of that process is

104
00:03:53,940 --> 00:03:55,920
protected so we also usually require

105
00:03:55,920 --> 00:03:58,739
code Integrity for all processes running

106
00:03:58,739 --> 00:04:00,599
in that trusted execution environment

107
00:04:00,599 --> 00:04:02,519
and where a bunch of use cases which

108
00:04:02,519 --> 00:04:05,280
have utilized when starting to utilize

109
00:04:05,280 --> 00:04:07,680
with confidential computing

110
00:04:07,680 --> 00:04:09,840
and just just kind of to to briefly

111
00:04:09,840 --> 00:04:11,580
mention this is not some kind of narrow

112
00:04:11,580 --> 00:04:13,620
small problem with some just even our

113
00:04:13,620 --> 00:04:15,900
researchers or you know maybe Intel is

114
00:04:15,900 --> 00:04:17,399
trying to look it's actually Bridge

115
00:04:17,399 --> 00:04:19,500
pretty big space which is continuously

116
00:04:19,500 --> 00:04:21,418
growing and we're going to see more and

117
00:04:21,418 --> 00:04:22,979
more at least if you believe in Market

118
00:04:22,979 --> 00:04:25,020
projections and things like that we are

119
00:04:25,020 --> 00:04:26,280
going to see more and more business

120
00:04:26,280 --> 00:04:28,800
putting into that confidential Computing

121
00:04:28,800 --> 00:04:30,780
and with many companies there's

122
00:04:30,780 --> 00:04:32,759
confidential Computing Consortium with

123
00:04:32,759 --> 00:04:34,800
many basically leading companies

124
00:04:34,800 --> 00:04:36,419
participating and I think there is even

125
00:04:36,419 --> 00:04:39,000
more I didn't just have but it just

126
00:04:39,000 --> 00:04:41,400
didn't fit in a slide so so it it's

127
00:04:41,400 --> 00:04:43,500
quite an important area which is under

128
00:04:43,500 --> 00:04:46,680
very active development now

129
00:04:46,680 --> 00:04:49,979
and uh if I'm from Intel so I have more

130
00:04:49,979 --> 00:04:52,139
background on what uh many Hardware

131
00:04:52,139 --> 00:04:53,759
vendors have or at least some Hardware

132
00:04:53,759 --> 00:04:55,560
vendors already have Solutions in this

133
00:04:55,560 --> 00:04:57,780
space so I'm more familiar of course

134
00:04:57,780 --> 00:04:59,340
with ventil one so I can briefly

135
00:04:59,340 --> 00:05:01,740
introduce what Intel has so there are

136
00:05:01,740 --> 00:05:04,740
two kind of primary Solutions we left

137
00:05:04,740 --> 00:05:07,199
most to see it's it's Intel it's called

138
00:05:07,199 --> 00:05:09,120
into software guard extension so Intel

139
00:05:09,120 --> 00:05:11,639
sjx so this has been for a while already

140
00:05:11,639 --> 00:05:13,320
it's it's something you can kind of go

141
00:05:13,320 --> 00:05:16,800
and buy hardware and and try it out it's

142
00:05:16,800 --> 00:05:20,460
um it defines the notion of STX Enclave

143
00:05:20,460 --> 00:05:23,340
so it's a small kind of um

144
00:05:23,340 --> 00:05:25,560
uh This Is The Trusted execution

145
00:05:25,560 --> 00:05:28,320
environment definition for for sjx so

146
00:05:28,320 --> 00:05:29,820
it's a small environment where you can

147
00:05:29,820 --> 00:05:32,100
run basically code which is going to be

148
00:05:32,100 --> 00:05:33,960
protected from anything else around it

149
00:05:33,960 --> 00:05:36,960
an operating system beverage space

150
00:05:36,960 --> 00:05:40,380
processes uh and anything with of course

151
00:05:40,380 --> 00:05:42,300
you'll have to trust hardware and and

152
00:05:42,300 --> 00:05:45,120
there is a root of trust uh which is uh

153
00:05:45,120 --> 00:05:47,280
rooted in the hardware but at least a

154
00:05:47,280 --> 00:05:48,660
lot of software stuck you don't have to

155
00:05:48,660 --> 00:05:51,300
trust and it's uh it's very well suited

156
00:05:51,300 --> 00:05:54,360
for some small uh Services which require

157
00:05:54,360 --> 00:05:56,820
a very small trusted Computing base you

158
00:05:56,820 --> 00:05:59,039
can kind of place your application there

159
00:05:59,039 --> 00:06:02,100
it used to be pretty let's say not

160
00:06:02,100 --> 00:06:03,720
straightforward to develop applications

161
00:06:03,720 --> 00:06:05,940
for sdx I think nowadays the resolutions

162
00:06:05,940 --> 00:06:08,160
are graphene and others which allow you

163
00:06:08,160 --> 00:06:10,500
to almost put unmodified applications

164
00:06:10,500 --> 00:06:12,479
running unmodified applications inside

165
00:06:12,479 --> 00:06:14,759
these checks in place I think it was

166
00:06:14,759 --> 00:06:16,500
also at some point long time limitation

167
00:06:16,500 --> 00:06:18,479
of the size of a memory which you can

168
00:06:18,479 --> 00:06:20,400
get there but now I think it's getting

169
00:06:20,400 --> 00:06:22,620
better but that's really targeting

170
00:06:22,620 --> 00:06:24,780
mostly like it's the best fit to have

171
00:06:24,780 --> 00:06:26,520
small service and you want to kind of

172
00:06:26,520 --> 00:06:28,319
put it inside of protected environment

173
00:06:28,319 --> 00:06:29,639
to run it

174
00:06:29,639 --> 00:06:32,400
on the right hand side we have a member

175
00:06:32,400 --> 00:06:33,900
solution for confidential Computing

176
00:06:33,900 --> 00:06:35,699
which called intertrust domain extension

177
00:06:35,699 --> 00:06:37,319
or Intel TDX

178
00:06:37,319 --> 00:06:40,020
so that solution is primarily focused on

179
00:06:40,020 --> 00:06:42,300
the cloud confidential cloud computing

180
00:06:42,300 --> 00:06:44,759
so there is a cloud word kind of added

181
00:06:44,759 --> 00:06:48,060
in the middle so with TDX the goal of

182
00:06:48,060 --> 00:06:50,520
TDX is is to allow you to run the whole

183
00:06:50,520 --> 00:06:53,340
virtual machine inside almost a modified

184
00:06:53,340 --> 00:06:55,199
virtual machine inside this protected

185
00:06:55,199 --> 00:06:57,419
environment and if you think of VR

186
00:06:57,419 --> 00:06:59,160
typical use cases what they're called

187
00:06:59,160 --> 00:07:01,440
confidential cloud computing is that you

188
00:07:01,440 --> 00:07:03,300
have Cloud providers the cloud service

189
00:07:03,300 --> 00:07:05,639
providers like which one with big clouds

190
00:07:05,639 --> 00:07:08,580
we rent with virtual machines entities

191
00:07:08,580 --> 00:07:11,220
to some businesses and services maybe

192
00:07:11,220 --> 00:07:13,560
individuals as well and you can rent

193
00:07:13,560 --> 00:07:14,880
this machine from a cloud service

194
00:07:14,880 --> 00:07:16,740
provider and you can utilize this power

195
00:07:16,740 --> 00:07:19,020
to do your business do your processing

196
00:07:19,020 --> 00:07:22,080
but you have to essentially trust the

197
00:07:22,080 --> 00:07:24,060
cloud service provider not to go spawn

198
00:07:24,060 --> 00:07:26,160
your data you can try to utilize some

199
00:07:26,160 --> 00:07:27,900
methods for encrypting your data and

200
00:07:27,900 --> 00:07:29,460
always processing your data encrypted

201
00:07:29,460 --> 00:07:31,199
form like all the things like homorphic

202
00:07:31,199 --> 00:07:33,660
encryption and so on but it's it's still

203
00:07:33,660 --> 00:07:36,240
very kind of it's not easy to really

204
00:07:36,240 --> 00:07:38,039
Implement in practice and and kind of it

205
00:07:38,039 --> 00:07:40,199
doesn't suit all the use cases so this

206
00:07:40,199 --> 00:07:43,020
allows you to run your virtual machine

207
00:07:43,020 --> 00:07:45,599
which is going to be protected from the

208
00:07:45,599 --> 00:07:47,759
host which is in hypervisor which is

209
00:07:47,759 --> 00:07:48,960
usually cloud service provider

210
00:07:48,960 --> 00:07:51,120
controlled and with a very secure kind

211
00:07:51,120 --> 00:07:53,880
of currently big demand on this um

212
00:07:53,880 --> 00:07:56,039
this technology and that's just another

213
00:07:56,039 --> 00:07:58,680
slide to kind of look a different way so

214
00:07:58,680 --> 00:08:00,840
to show kind of how the trusted

215
00:08:00,840 --> 00:08:03,419
Computing base changes if you if you use

216
00:08:03,419 --> 00:08:05,400
or don't use with Solutions

217
00:08:05,400 --> 00:08:07,620
so without confidential Computing the

218
00:08:07,620 --> 00:08:09,539
first row you there's a bunch of things

219
00:08:09,539 --> 00:08:12,840
you have to trust uh if you go into

220
00:08:12,840 --> 00:08:15,840
Taurus Intel TDX your the amount of

221
00:08:15,840 --> 00:08:18,000
software you have to trust shrinks to

222
00:08:18,000 --> 00:08:19,680
you know your application which

223
00:08:19,680 --> 00:08:23,160
processes your your data via software

224
00:08:23,160 --> 00:08:25,680
stack which is inside the TDX guest

225
00:08:25,680 --> 00:08:27,240
inside this protected virtual machine

226
00:08:27,240 --> 00:08:29,340
because that executes in protected

227
00:08:29,340 --> 00:08:31,259
environment you have to trust that and

228
00:08:31,259 --> 00:08:32,820
there is one additional component I'm

229
00:08:32,820 --> 00:08:34,559
going to talk shortly it's called TDX

230
00:08:34,559 --> 00:08:36,839
module it's a special software component

231
00:08:36,839 --> 00:08:38,880
which you will also have to trust and it

232
00:08:38,880 --> 00:08:41,339
provides some interfaces to you and for

233
00:08:41,339 --> 00:08:44,219
interlace GX that TCB is even tiny so

234
00:08:44,219 --> 00:08:46,080
it's only part of application that

235
00:08:46,080 --> 00:08:49,019
exactly sgx Enclave which you you write

236
00:08:49,019 --> 00:08:52,560
you'll have to include into your TCB

237
00:08:52,560 --> 00:08:55,380
so uh the goal of this talk is to kind

238
00:08:55,380 --> 00:08:57,779
of go through uh if you think of it if

239
00:08:57,779 --> 00:08:59,640
if we already like let's say we're

240
00:08:59,640 --> 00:09:01,200
Hardware vendors and we're all the

241
00:09:01,200 --> 00:09:02,940
hardware vendors and we provide

242
00:09:02,940 --> 00:09:06,060
solutions for for running this uh

243
00:09:06,060 --> 00:09:08,220
workload and with protected environment

244
00:09:08,220 --> 00:09:10,680
and and um

245
00:09:10,680 --> 00:09:12,480
you you might think that that's enough

246
00:09:12,480 --> 00:09:14,459
so you know there is Hardware solution

247
00:09:14,459 --> 00:09:15,959
which guarantees integrity and

248
00:09:15,959 --> 00:09:18,240
confidentiality of a data integrative

249
00:09:18,240 --> 00:09:20,339
for codeware so what else they have to

250
00:09:20,339 --> 00:09:22,140
do we kind of can probably visit select

251
00:09:22,140 --> 00:09:24,180
done case we can move to some other um

252
00:09:24,180 --> 00:09:26,459
to solve other problems but what I would

253
00:09:26,459 --> 00:09:28,140
like to show here there is a lot of work

254
00:09:28,140 --> 00:09:31,140
that needs to happen both from industry

255
00:09:31,140 --> 00:09:34,019
community so on to truly make a solution

256
00:09:34,019 --> 00:09:36,180
secure so I'm going to go for our next

257
00:09:36,180 --> 00:09:37,500
slide so I'm going to go through some

258
00:09:37,500 --> 00:09:39,899
problems and challenges which arise in

259
00:09:39,899 --> 00:09:41,519
confidential Computing and how people

260
00:09:41,519 --> 00:09:44,459
kind of try to overcome it and so on and

261
00:09:44,459 --> 00:09:46,019
for that purpose I just want to because

262
00:09:46,019 --> 00:09:47,760
I have to show some examples so I'm

263
00:09:47,760 --> 00:09:51,180
going to use the um Intel TDX and as an

264
00:09:51,180 --> 00:09:53,459
example and I'm going to show it based

265
00:09:53,459 --> 00:09:55,019
on we have a Linux stack which is

266
00:09:55,019 --> 00:09:57,060
released rental TDX so this is something

267
00:09:57,060 --> 00:09:59,640
I'm at least very familiar with and um

268
00:09:59,640 --> 00:10:01,920
I'm just gonna kind of use it as an

269
00:10:01,920 --> 00:10:03,420
example to show what what kind of things

270
00:10:03,420 --> 00:10:06,120
can happen so here just what you see are

271
00:10:06,120 --> 00:10:08,820
you have here on the left hand side you

272
00:10:08,820 --> 00:10:12,540
have the uh host which is uh where your

273
00:10:12,540 --> 00:10:15,420
hypervisor lives in Linux case it's KVM

274
00:10:15,420 --> 00:10:17,940
and qmu it's the kind of split between

275
00:10:17,940 --> 00:10:19,740
kernel and user space it's part of

276
00:10:19,740 --> 00:10:22,740
hypervisor and then uh and this is the

277
00:10:22,740 --> 00:10:24,300
entrusted part so this is usually what

278
00:10:24,300 --> 00:10:27,000
cloud service providers run and when the

279
00:10:27,000 --> 00:10:28,920
right hand side you have this protected

280
00:10:28,920 --> 00:10:31,620
guest here which has full software stuck

281
00:10:31,620 --> 00:10:34,260
inside this protective guest executes a

282
00:10:34,260 --> 00:10:36,480
side of protected memory which is memory

283
00:10:36,480 --> 00:10:38,640
is is integrity both in confertility

284
00:10:38,640 --> 00:10:41,220
Integrity protected and then it's also

285
00:10:41,220 --> 00:10:43,680
register state is protected page tables

286
00:10:43,680 --> 00:10:45,899
and so on so it's it's its runtime

287
00:10:45,899 --> 00:10:48,500
status is is well protected from the

288
00:10:48,500 --> 00:10:51,240
hypervisor and untrusted host so nobody

289
00:10:51,240 --> 00:10:53,399
has the keys from from his memory on on

290
00:10:53,399 --> 00:10:55,380
the host side apart from of course the

291
00:10:55,380 --> 00:10:56,399
hardware

292
00:10:56,399 --> 00:10:58,440
and when there is another component here

293
00:10:58,440 --> 00:11:01,380
in the middle which we call TDX module

294
00:11:01,380 --> 00:11:03,480
and you can think of it as kind of a

295
00:11:03,480 --> 00:11:06,260
trusted shim which is in between the

296
00:11:06,260 --> 00:11:08,279
hypervisor which is here which is

297
00:11:08,279 --> 00:11:10,380
untrusted and we actually guess we're

298
00:11:10,380 --> 00:11:12,180
trying to protect so all the

299
00:11:12,180 --> 00:11:15,180
communication between the uh or that

300
00:11:15,180 --> 00:11:17,339
corrected so most of the communications

301
00:11:17,339 --> 00:11:19,980
how we a hypervisor can influence a

302
00:11:19,980 --> 00:11:22,019
guest happens through a CDX module TDX

303
00:11:22,019 --> 00:11:24,000
model itself is protected it runs in

304
00:11:24,000 --> 00:11:26,820
protected memory and so on and Android

305
00:11:26,820 --> 00:11:30,899
interface is defined in between and VM

306
00:11:30,899 --> 00:11:33,720
uh the guest uh guest stack which runs

307
00:11:33,720 --> 00:11:35,820
here you can principle run and modified

308
00:11:35,820 --> 00:11:37,920
stock so I know that I think Windows

309
00:11:37,920 --> 00:11:39,480
just exactly what we're planning to do

310
00:11:39,480 --> 00:11:42,660
if I'm not mistaken but uh for us for

311
00:11:42,660 --> 00:11:45,120
Linux we actually do run some modified

312
00:11:45,120 --> 00:11:47,519
Linux kernel it's it's slightly modified

313
00:11:47,519 --> 00:11:49,140
in terms of it's kind of we call it in

314
00:11:49,140 --> 00:11:52,200
light and so it has some uh

315
00:11:52,200 --> 00:11:55,260
uh it has some mechanisms for both for

316
00:11:55,260 --> 00:11:57,360
increasing performance and increasing

317
00:11:57,360 --> 00:11:59,940
security and security part are gonna go

318
00:11:59,940 --> 00:12:02,279
over or shortly

319
00:12:02,279 --> 00:12:04,320
so this is just an example so let's go

320
00:12:04,320 --> 00:12:06,180
into a actually interesting part to see

321
00:12:06,180 --> 00:12:08,040
what kind of challenges you can get in

322
00:12:08,040 --> 00:12:09,899
this environment even if you assume that

323
00:12:09,899 --> 00:12:11,399
things working properly and we are

324
00:12:11,399 --> 00:12:13,380
protected in terms of like you know I

325
00:12:13,380 --> 00:12:15,060
guess is protected as I said in both

326
00:12:15,060 --> 00:12:18,660
memory and uh and register state so the

327
00:12:18,660 --> 00:12:21,240
first one is is named here deployment as

328
00:12:21,240 --> 00:12:23,279
edit station so the problem with

329
00:12:23,279 --> 00:12:25,200
deployment is that if you take a look on

330
00:12:25,200 --> 00:12:27,300
the stock here and we get stuck is that

331
00:12:27,300 --> 00:12:29,579
traditionally when this used to be just

332
00:12:29,579 --> 00:12:31,579
a legacy we have normal virtual machine

333
00:12:31,579 --> 00:12:34,260
the cloud service providers tend to

334
00:12:34,260 --> 00:12:37,200
provide a lot of low level software into

335
00:12:37,200 --> 00:12:39,360
this machine so the virtual firmware and

336
00:12:39,360 --> 00:12:42,060
even Linux kernel uh quite often comes

337
00:12:42,060 --> 00:12:44,040
from this cloud service provider and

338
00:12:44,040 --> 00:12:45,600
that of course is a problem simply for

339
00:12:45,600 --> 00:12:47,940
for kind of deployment because that that

340
00:12:47,940 --> 00:12:49,740
stock which runs inside of projected

341
00:12:49,740 --> 00:12:51,240
guests is part of a trusted Computing

342
00:12:51,240 --> 00:12:53,399
base so if you are trying to kind of

343
00:12:53,399 --> 00:12:55,680
made all this technology to try to put

344
00:12:55,680 --> 00:12:58,139
your cloud service provider outside of

345
00:12:58,139 --> 00:12:59,519
your trusted Computing base and now

346
00:12:59,519 --> 00:13:00,839
you're running with pieces of software

347
00:13:00,839 --> 00:13:03,360
from cloud service provider it's clearly

348
00:13:03,360 --> 00:13:04,560
kind of a problem

349
00:13:04,560 --> 00:13:06,600
and I think the Clusters providers are

350
00:13:06,600 --> 00:13:08,339
aware about this problem so they are

351
00:13:08,339 --> 00:13:10,920
making steps to changes but it's to some

352
00:13:10,920 --> 00:13:13,019
degree is not trivial because

353
00:13:13,019 --> 00:13:15,600
we are the firmware can be specific to

354
00:13:15,600 --> 00:13:18,240
that cloud uh you will have to even if

355
00:13:18,240 --> 00:13:20,339
you you can still continue providing it

356
00:13:20,339 --> 00:13:21,899
but you will have to establish trust

357
00:13:21,899 --> 00:13:23,700
you'll have to guarantee that firmware

358
00:13:23,700 --> 00:13:25,260
does what it is you'll have to I don't

359
00:13:25,260 --> 00:13:27,540
know either publish the source code or

360
00:13:27,540 --> 00:13:29,459
you know provide some of our means to

361
00:13:29,459 --> 00:13:31,560
establish trust between that low-level

362
00:13:31,560 --> 00:13:33,420
firmware which you're providing to a

363
00:13:33,420 --> 00:13:35,760
tenant and and to make sure the tenant

364
00:13:35,760 --> 00:13:37,740
actually trusted firmware not to do some

365
00:13:37,740 --> 00:13:40,079
things on behalf which break your

366
00:13:40,079 --> 00:13:41,579
security assumptions

367
00:13:41,579 --> 00:13:43,500
and we have a problem is the attestation

368
00:13:43,500 --> 00:13:45,420
so as I said we want to make sure that

369
00:13:45,420 --> 00:13:47,339
whatever code we run inside of this

370
00:13:47,339 --> 00:13:49,200
projected guest inside of this protected

371
00:13:49,200 --> 00:13:51,300
execution environment is actually the

372
00:13:51,300 --> 00:13:53,100
code we expect to run because if the

373
00:13:53,100 --> 00:13:56,040
code is modified uh if we

374
00:13:56,040 --> 00:13:57,779
if you know let's say cloud service

375
00:13:57,779 --> 00:13:59,579
provider because it's it's the

376
00:13:59,579 --> 00:14:01,620
hypervisor bootstraps we protected

377
00:14:01,620 --> 00:14:03,360
guests so it provides actually the code

378
00:14:03,360 --> 00:14:05,700
for initial code for virtual firmware

379
00:14:05,700 --> 00:14:08,220
and and you can also provide a code for

380
00:14:08,220 --> 00:14:09,899
kernel so if you don't have a way to

381
00:14:09,899 --> 00:14:12,839
attest this uh remotely as a talent who

382
00:14:12,839 --> 00:14:15,240
wants to use this protected machine when

383
00:14:15,240 --> 00:14:16,500
we essentially we don't have any

384
00:14:16,500 --> 00:14:18,180
guarantees about what we're running

385
00:14:18,180 --> 00:14:20,820
inside we guessed and and they are on

386
00:14:20,820 --> 00:14:22,560
High level legislation works here is

387
00:14:22,560 --> 00:14:24,720
kind of Simply so you know remote

388
00:14:24,720 --> 00:14:26,639
rectifier can connect to a protected

389
00:14:26,639 --> 00:14:29,519
guest uh the hardware together with the

390
00:14:29,519 --> 00:14:32,940
TDX module can generate the what we call

391
00:14:32,940 --> 00:14:35,639
attestation quote the process is kind of

392
00:14:35,639 --> 00:14:37,440
two steps and more complicated I just

393
00:14:37,440 --> 00:14:39,120
don't have time to go into details but

394
00:14:39,120 --> 00:14:40,620
you can think what created station code

395
00:14:40,620 --> 00:14:43,079
is being generated it can be delivered

396
00:14:43,079 --> 00:14:45,420
to a remote verifier which and there is

397
00:14:45,420 --> 00:14:47,699
a way to verify that quote and the quote

398
00:14:47,699 --> 00:14:49,620
contains all the information about the

399
00:14:49,620 --> 00:14:51,180
software stack inside the guest

400
00:14:51,180 --> 00:14:53,579
information about our components which

401
00:14:53,579 --> 00:14:57,060
are part of trusted TDX TCP you like TDX

402
00:14:57,060 --> 00:14:59,699
module itself and some other components

403
00:14:59,699 --> 00:15:02,579
so if it grows successfully verifies

404
00:15:02,579 --> 00:15:05,639
then we are remote verifier can trust

405
00:15:05,639 --> 00:15:07,920
this now protected VM and can provision

406
00:15:07,920 --> 00:15:10,560
the credentials it needs to operate can

407
00:15:10,560 --> 00:15:12,779
start provisioning with that data which

408
00:15:12,779 --> 00:15:14,940
is sensitive and start kind of working

409
00:15:14,940 --> 00:15:17,779
on VR on beam

410
00:15:17,779 --> 00:15:21,480
processing the data we can never carry

411
00:15:21,480 --> 00:15:24,000
it here as well they said the kind of in

412
00:15:24,000 --> 00:15:26,399
principle just looks simple but all of

413
00:15:26,399 --> 00:15:28,860
this needs to be deployed and and many

414
00:15:28,860 --> 00:15:31,560
tenants who used to kind of just rent

415
00:15:31,560 --> 00:15:33,720
with services from the cloud service

416
00:15:33,720 --> 00:15:36,660
provider they're not ready to host that

417
00:15:36,660 --> 00:15:38,399
kind of attestation service themselves

418
00:15:38,399 --> 00:15:40,620
because it's it's an investment it's

419
00:15:40,620 --> 00:15:43,680
kind of resources we need to spend so uh

420
00:15:43,680 --> 00:15:45,839
it's it's uh and if cloud service

421
00:15:45,839 --> 00:15:47,699
providers can also provide it for them

422
00:15:47,699 --> 00:15:49,260
but when we are back into kind of his

423
00:15:49,260 --> 00:15:51,600
chicken neck problem but you have to you

424
00:15:51,600 --> 00:15:53,339
have to trust the cloud service provider

425
00:15:53,339 --> 00:15:55,639
to do it at the station for you and and

426
00:15:55,639 --> 00:15:57,959
it's kind of again brings it back into

427
00:15:57,959 --> 00:16:00,540
your trusted Computing base so one

428
00:16:00,540 --> 00:16:02,160
effort Which Intel is doing it's

429
00:16:02,160 --> 00:16:04,139
established and it has been announced a

430
00:16:04,139 --> 00:16:05,820
while back it is called project Amber

431
00:16:05,820 --> 00:16:08,100
which facilitates during this

432
00:16:08,100 --> 00:16:09,959
attestation for confidential Computing

433
00:16:09,959 --> 00:16:12,680
so you can actually if you're using the

434
00:16:12,680 --> 00:16:15,000
confidential Computing guests it works

435
00:16:15,000 --> 00:16:17,820
both TDX and HDX you can grant your

436
00:16:17,820 --> 00:16:19,680
service from the project number and you

437
00:16:19,680 --> 00:16:21,420
don't have to kind of implement your own

438
00:16:21,420 --> 00:16:23,459
key management do your attestation and

439
00:16:23,459 --> 00:16:25,980
so on but still with this like with this

440
00:16:25,980 --> 00:16:27,779
Challenger sales diploma tonight station

441
00:16:27,779 --> 00:16:29,880
is still kind of something which needs

442
00:16:29,880 --> 00:16:31,680
to be properly on

443
00:16:31,680 --> 00:16:34,680
properly so often field

444
00:16:34,680 --> 00:16:37,440
um in other aspect which I think is more

445
00:16:37,440 --> 00:16:39,120
interesting to the offensive security

446
00:16:39,120 --> 00:16:41,940
people I said uh and this is aspect

447
00:16:41,940 --> 00:16:44,639
which is quite commonly overlooked so if

448
00:16:44,639 --> 00:16:46,560
you think on the left or that you have

449
00:16:46,560 --> 00:16:48,360
what is the kind of the

450
00:16:48,360 --> 00:16:51,120
typical picture you have of a legacy uh

451
00:16:51,120 --> 00:16:53,759
VM scenario so you do trust your host

452
00:16:53,759 --> 00:16:56,459
and the hypervisor so typically when you

453
00:16:56,459 --> 00:16:58,560
run in Legacy VM guest you only care

454
00:16:58,560 --> 00:17:01,259
about protecting against you know I mean

455
00:17:01,259 --> 00:17:03,060
from Linux kernel point of view you only

456
00:17:03,060 --> 00:17:05,160
care about protecting from guest user

457
00:17:05,160 --> 00:17:07,559
space and we have spent I think past 10

458
00:17:07,559 --> 00:17:10,980
15 20 years in developing different kind

459
00:17:10,980 --> 00:17:13,679
of measures and and hardenings into kind

460
00:17:13,679 --> 00:17:16,020
of hardening that attack surface number

461
00:17:16,020 --> 00:17:17,939
one here which is between the user space

462
00:17:17,939 --> 00:17:19,199
and kernel

463
00:17:19,199 --> 00:17:22,140
however when we now move into this uh

464
00:17:22,140 --> 00:17:24,419
thread model where we don't trust to

465
00:17:24,419 --> 00:17:27,599
host anymore we don't trust a hypervisor

466
00:17:27,599 --> 00:17:29,460
um there is an additional attack surface

467
00:17:29,460 --> 00:17:31,559
being created here which is outlined

468
00:17:31,559 --> 00:17:33,179
here is two here

469
00:17:33,179 --> 00:17:35,880
which is uh I mean the protected guest

470
00:17:35,880 --> 00:17:37,620
while it's protected it can't run

471
00:17:37,620 --> 00:17:40,320
isolated it does need to communicate

472
00:17:40,320 --> 00:17:42,480
with the untrusted host and hypervisor

473
00:17:42,480 --> 00:17:45,419
and in our case uh and this again this

474
00:17:45,419 --> 00:17:47,700
is not a typical change of td-axis it's

475
00:17:47,700 --> 00:17:49,620
common for confidential cloud computing

476
00:17:49,620 --> 00:17:51,360
Solutions at least currently in the

477
00:17:51,360 --> 00:17:53,460
market so it would need to go in and

478
00:17:53,460 --> 00:17:55,740
talk to the host for things like to use

479
00:17:55,740 --> 00:17:57,600
private calls when it needs to obtain

480
00:17:57,600 --> 00:17:59,400
some low-level information let's say it

481
00:17:59,400 --> 00:18:01,380
needs to read some model specific

482
00:18:01,380 --> 00:18:05,100
registers msrs it needs to obtain it

483
00:18:05,100 --> 00:18:07,260
needs to obtain readings from PCI config

484
00:18:07,260 --> 00:18:09,179
space which is fully under the host and

485
00:18:09,179 --> 00:18:11,520
and hypervisor control it needs to do

486
00:18:11,520 --> 00:18:12,960
some mmio

487
00:18:12,960 --> 00:18:16,020
um do you may potentially until we get

488
00:18:16,020 --> 00:18:18,120
the projected time I'm going to talk

489
00:18:18,120 --> 00:18:20,039
about it later so there is actually a

490
00:18:20,039 --> 00:18:21,360
lot of communication which happening

491
00:18:21,360 --> 00:18:22,860
with the shared memory which is being

492
00:18:22,860 --> 00:18:24,480
established through which let's say the

493
00:18:24,480 --> 00:18:26,580
email can go in between the protected

494
00:18:26,580 --> 00:18:28,320
guest and the host so there are always

495
00:18:28,320 --> 00:18:29,640
interfaces

496
00:18:29,640 --> 00:18:31,919
and almost none of his interfaces have

497
00:18:31,919 --> 00:18:33,660
been hardened before because no one has

498
00:18:33,660 --> 00:18:35,520
looked at it it's it's assumed the

499
00:18:35,520 --> 00:18:37,440
interface the hardware and with

500
00:18:37,440 --> 00:18:39,480
exceptional things like you know USB and

501
00:18:39,480 --> 00:18:41,220
stuff we always trust you used to trust

502
00:18:41,220 --> 00:18:43,679
our hardware and all these drivers even

503
00:18:43,679 --> 00:18:45,480
mainstream Linux drivers which are

504
00:18:45,480 --> 00:18:47,220
written and currently part of Mainline

505
00:18:47,220 --> 00:18:49,799
kernel they have never been written in

506
00:18:49,799 --> 00:18:51,720
mind that you know when you read

507
00:18:51,720 --> 00:18:54,360
something out of PCI config space you

508
00:18:54,360 --> 00:18:56,400
can actually get malicious value

509
00:18:56,400 --> 00:18:58,440
and and and and that's a big problem

510
00:18:58,440 --> 00:19:01,260
because any of us let's say issue which

511
00:19:01,260 --> 00:19:02,880
you can discover in this attack surface

512
00:19:02,880 --> 00:19:05,700
it can lead to privileged escalation and

513
00:19:05,700 --> 00:19:07,620
you can kind of despite of having this

514
00:19:07,620 --> 00:19:09,900
very much protected guest you can

515
00:19:09,900 --> 00:19:12,179
actually use this interface to attack a

516
00:19:12,179 --> 00:19:13,620
guest so you can think of a knowledge of

517
00:19:13,620 --> 00:19:15,900
a server in early days of kind of server

518
00:19:15,900 --> 00:19:18,000
hardening what you have this server

519
00:19:18,000 --> 00:19:19,620
which is hardened but just explosive

520
00:19:19,620 --> 00:19:21,360
interfaces and this is the interfaces

521
00:19:21,360 --> 00:19:23,460
which are going to be used to attack it

522
00:19:23,460 --> 00:19:26,460
and uh we looked at this problem quite

523
00:19:26,460 --> 00:19:28,559
extensively in our team and there are a

524
00:19:28,559 --> 00:19:30,240
lot of issues we were kind of identified

525
00:19:30,240 --> 00:19:31,740
and I'm sure there's even more which

526
00:19:31,740 --> 00:19:33,960
were not identified so of course the

527
00:19:33,960 --> 00:19:36,000
things we saw a lot was different memory

528
00:19:36,000 --> 00:19:39,240
safety issues mostly special so as I

529
00:19:39,240 --> 00:19:41,100
said a lot when you read let's say you

530
00:19:41,100 --> 00:19:43,200
read the bar value out of PCI config

531
00:19:43,200 --> 00:19:44,039
space

532
00:19:44,039 --> 00:19:46,860
you can end up with not value in a range

533
00:19:46,860 --> 00:19:49,140
of let's say zero to five but you can

534
00:19:49,140 --> 00:19:51,120
end up in principle just by type you can

535
00:19:51,120 --> 00:19:53,220
end up a huge value and you can have a

536
00:19:53,220 --> 00:19:55,320
huge buffer over run and potential

537
00:19:55,320 --> 00:19:57,240
exploitation but when there are even

538
00:19:57,240 --> 00:19:59,280
like a more interesting kind of angles

539
00:19:59,280 --> 00:20:01,380
which like for example secure Randomness

540
00:20:01,380 --> 00:20:04,679
so the guest inside is the talk about

541
00:20:04,679 --> 00:20:06,360
Linux gas it has a random number

542
00:20:06,360 --> 00:20:09,600
generator default part of Linux but

543
00:20:09,600 --> 00:20:11,039
unfortunately the default source of

544
00:20:11,039 --> 00:20:12,900
entropy for that unless you use some

545
00:20:12,900 --> 00:20:16,559
hardware and such is it interrupts and

546
00:20:16,559 --> 00:20:19,679
interrupts is is now hosting hypervisor

547
00:20:19,679 --> 00:20:21,480
at least a bit somewhat even controlled

548
00:20:21,480 --> 00:20:23,940
but at least observable so now you have

549
00:20:23,940 --> 00:20:26,039
the your hypervisor which can observe

550
00:20:26,039 --> 00:20:27,720
the source of entropy for your random

551
00:20:27,720 --> 00:20:29,700
number generator if all kinds of

552
00:20:29,700 --> 00:20:31,980
possible implications of of this

553
00:20:31,980 --> 00:20:33,840
security and crypto to lies inside the

554
00:20:33,840 --> 00:20:35,700
guests so there are many interesting

555
00:20:35,700 --> 00:20:38,700
angles here which which we do need to

556
00:20:38,700 --> 00:20:40,440
take here and I think it's it's also

557
00:20:40,440 --> 00:20:42,720
kind of it's interesting new area for

558
00:20:42,720 --> 00:20:44,640
offensive security

559
00:20:44,640 --> 00:20:47,039
um to look into because it's as I said

560
00:20:47,039 --> 00:20:49,020
it's it's it's it's an area which hasn't

561
00:20:49,020 --> 00:20:51,059
been hardened

562
00:20:51,059 --> 00:20:53,340
and and we have looked into this uh

563
00:20:53,340 --> 00:20:55,260
given our resources and stuff we have

564
00:20:55,260 --> 00:20:57,000
developed some methodology to try to

565
00:20:57,000 --> 00:20:59,580
harden this protected guest kernel which

566
00:20:59,580 --> 00:21:01,740
runs inside this uh protected

567
00:21:01,740 --> 00:21:03,780
environment and it's kind of combination

568
00:21:03,780 --> 00:21:06,240
of you know very classical things trying

569
00:21:06,240 --> 00:21:07,860
to minimize the attack surface to

570
00:21:07,860 --> 00:21:09,840
basically dropping off all the drivers

571
00:21:09,840 --> 00:21:11,940
you don't actually need and typically in

572
00:21:11,940 --> 00:21:14,039
confidential Computing guests you need

573
00:21:14,039 --> 00:21:15,900
very limited set of drivers you don't

574
00:21:15,900 --> 00:21:17,880
really need to run all this bunch of

575
00:21:17,880 --> 00:21:21,360
legacy and other drivers so and also you

576
00:21:21,360 --> 00:21:23,039
can disable bunch of subsystems which

577
00:21:23,039 --> 00:21:25,020
would never be utilized in in Virtual

578
00:21:25,020 --> 00:21:27,179
guests anyhow I mean from even from a

579
00:21:27,179 --> 00:21:29,460
core Linux subsystem so minimizing your

580
00:21:29,460 --> 00:21:31,919
attack surface when whatever you can't

581
00:21:31,919 --> 00:21:34,919
you know minimize you have to both with

582
00:21:34,919 --> 00:21:37,500
the both static analysis and manual

583
00:21:37,500 --> 00:21:39,900
audit and fuzzing and fuzzing is

584
00:21:39,900 --> 00:21:40,980
actually the interesting part here

585
00:21:40,980 --> 00:21:41,940
because

586
00:21:41,940 --> 00:21:44,100
we when we started looking at this

587
00:21:44,100 --> 00:21:46,380
problem fuzzing of this attack surface

588
00:21:46,380 --> 00:21:48,120
wasn't terrible because I mean we have

589
00:21:48,120 --> 00:21:50,159
others even for kernel like you know

590
00:21:50,159 --> 00:21:52,740
Scholars the main one which um a lot of

591
00:21:52,740 --> 00:21:55,559
people use but this color is really uh

592
00:21:55,559 --> 00:21:57,780
if you think of this

593
00:21:57,780 --> 00:21:59,820
attack surface here this color is really

594
00:21:59,820 --> 00:22:01,679
targeting this attack surface number one

595
00:22:01,679 --> 00:22:04,020
here so it's very well tailored to kind

596
00:22:04,020 --> 00:22:06,740
of to to do the um

597
00:22:06,740 --> 00:22:09,780
interface but when we try to evaluate

598
00:22:09,780 --> 00:22:11,520
whenever we can kind of use it for

599
00:22:11,520 --> 00:22:13,440
really reaching out to the slow level

600
00:22:13,440 --> 00:22:15,480
interfaces like msrs and things during

601
00:22:15,480 --> 00:22:18,480
the boot process it wasn't really the

602
00:22:18,480 --> 00:22:20,940
case so we had to develop we developed

603
00:22:20,940 --> 00:22:22,440
different fossils you have a couple of

604
00:22:22,440 --> 00:22:24,600
fuzzers we use and everything all the

605
00:22:24,600 --> 00:22:26,400
tools and everything is public and I

606
00:22:26,400 --> 00:22:28,380
have links to them to both our tools and

607
00:22:28,380 --> 00:22:30,240
documentation so it was an interesting

608
00:22:30,240 --> 00:22:32,700
problem to actually fast the guests so

609
00:22:32,700 --> 00:22:34,320
we had to fast from the host to the

610
00:22:34,320 --> 00:22:37,200
guest from very low level interface and

611
00:22:37,200 --> 00:22:39,960
and and try to reach his get exactly the

612
00:22:39,960 --> 00:22:42,000
coverage on this input points where you

613
00:22:42,000 --> 00:22:43,620
can consume a malicious input from The

614
00:22:43,620 --> 00:22:45,860
Host

615
00:22:46,200 --> 00:22:49,559
um let's move to the next problem so um

616
00:22:49,559 --> 00:22:52,260
typically again in the Legacy scenario

617
00:22:52,260 --> 00:22:55,080
for cloud service providers uh it's it's

618
00:22:55,080 --> 00:22:57,299
it's very important that we do this load

619
00:22:57,299 --> 00:22:59,100
balancing so they should be able even if

620
00:22:59,100 --> 00:23:01,140
we rent virtual machines we should be

621
00:23:01,140 --> 00:23:03,059
able to move one virtual machine from

622
00:23:03,059 --> 00:23:05,039
one kind of physical host to another one

623
00:23:05,039 --> 00:23:07,320
and and then we have usually pretty

624
00:23:07,320 --> 00:23:09,120
strict requirements and like blackout

625
00:23:09,120 --> 00:23:11,400
period and things like that so

626
00:23:11,400 --> 00:23:13,320
uh and and now if you think of a

627
00:23:13,320 --> 00:23:14,880
protected guest we would like to keep

628
00:23:14,880 --> 00:23:16,740
that capability it's very important for

629
00:23:16,740 --> 00:23:19,559
their business but of course since we're

630
00:23:19,559 --> 00:23:21,120
talking about now protected guests we

631
00:23:21,120 --> 00:23:22,740
want to make sure that like doing that

632
00:23:22,740 --> 00:23:24,960
migration process nothing bad can happen

633
00:23:24,960 --> 00:23:27,240
to that guest so we still would like to

634
00:23:27,240 --> 00:23:28,380
preserve the integrity and

635
00:23:28,380 --> 00:23:30,720
conventionality of data we want to make

636
00:23:30,720 --> 00:23:32,220
sure that when the guest is migrated

637
00:23:32,220 --> 00:23:34,020
there is no um

638
00:23:34,020 --> 00:23:35,880
I mean we're still running the latest

639
00:23:35,880 --> 00:23:37,860
fresh state so we don't do any kind of

640
00:23:37,860 --> 00:23:40,320
you know roll back to earlier state of a

641
00:23:40,320 --> 00:23:42,419
guest execution or we would like to

642
00:23:42,419 --> 00:23:43,559
ensure that there is no cloning

643
00:23:43,559 --> 00:23:45,360
happening so that way cloud service

644
00:23:45,360 --> 00:23:47,400
provider can't just like pretend to

645
00:23:47,400 --> 00:23:49,740
migrate the guest and when you start

646
00:23:49,740 --> 00:23:51,840
cloning the number of instances that can

647
00:23:51,840 --> 00:23:53,960
kind of provide some potentially other

648
00:23:53,960 --> 00:23:56,100
problems and break the kind of

649
00:23:56,100 --> 00:23:58,740
assumption models of veterans and when

650
00:23:58,740 --> 00:24:00,419
also of course we eaten and should be

651
00:24:00,419 --> 00:24:02,640
kind of empowered to decide whenever it

652
00:24:02,640 --> 00:24:04,260
can be migrated to a different physical

653
00:24:04,260 --> 00:24:06,120
machine which potentially has different

654
00:24:06,120 --> 00:24:08,760
level of adjusted Computing base and

655
00:24:08,760 --> 00:24:10,260
different security

656
00:24:10,260 --> 00:24:11,159
um

657
00:24:11,159 --> 00:24:15,240
security kind of uh protections so for

658
00:24:15,240 --> 00:24:17,159
that we have again we I'm going to kind

659
00:24:17,159 --> 00:24:19,080
of just highlight the process it's kind

660
00:24:19,080 --> 00:24:21,600
of more detailed in in practice so we

661
00:24:21,600 --> 00:24:23,220
have here you can see there is this node

662
00:24:23,220 --> 00:24:24,900
a and node B so these are two different

663
00:24:24,900 --> 00:24:27,000
different uh different physical notes

664
00:24:27,000 --> 00:24:29,820
and um and each node has you know is

665
00:24:29,820 --> 00:24:32,580
untrusted how advisor and the host here

666
00:24:32,580 --> 00:24:34,860
and then here is the guest we would like

667
00:24:34,860 --> 00:24:37,080
to kind of move now from the source and

668
00:24:37,080 --> 00:24:39,059
to destination

669
00:24:39,059 --> 00:24:41,100
there's a TDX module running on both

670
00:24:41,100 --> 00:24:43,679
here this additional kind of you can

671
00:24:43,679 --> 00:24:45,419
think of it as an average protected

672
00:24:45,419 --> 00:24:46,980
guest but it's kind of we call it

673
00:24:46,980 --> 00:24:48,960
service protected guest so it's kind of

674
00:24:48,960 --> 00:24:51,600
extension of a TDX module which kind of

675
00:24:51,600 --> 00:24:53,940
binds to the protected guest and ensures

676
00:24:53,940 --> 00:24:56,340
the process of migration so at the

677
00:24:56,340 --> 00:24:58,740
beginning these both are source and

678
00:24:58,740 --> 00:25:01,140
destination service to these are going

679
00:25:01,140 --> 00:25:03,480
to establish a secure Channel and that

680
00:25:03,480 --> 00:25:04,980
secure channels you can think of it

681
00:25:04,980 --> 00:25:07,260
there's no limitation you can use any

682
00:25:07,260 --> 00:25:09,840
channel V kind of typically do it in our

683
00:25:09,840 --> 00:25:11,760
reference implementation is done in TLS

684
00:25:11,760 --> 00:25:14,280
like channel it's called array TLS

685
00:25:14,280 --> 00:25:16,740
erasers for more remote to the station

686
00:25:16,740 --> 00:25:19,679
so it's an extension of TLS which allows

687
00:25:19,679 --> 00:25:21,600
you to establish kind of TLS handshake

688
00:25:21,600 --> 00:25:24,179
based on the um on the other station

689
00:25:24,179 --> 00:25:27,000
measurements of way of a platform so

690
00:25:27,000 --> 00:25:28,860
we've establish a secure Channel

691
00:25:28,860 --> 00:25:32,100
we're going to generate the migration uh

692
00:25:32,100 --> 00:25:34,440
session key but key is going to get

693
00:25:34,440 --> 00:25:37,440
provisioned on both ends to the TDX

694
00:25:37,440 --> 00:25:39,299
module after which the migration can

695
00:25:39,299 --> 00:25:41,640
start my migration is different driven

696
00:25:41,640 --> 00:25:43,500
typically and still in protected guest

697
00:25:43,500 --> 00:25:47,039
case driven by the hypervisor so but

698
00:25:47,039 --> 00:25:48,539
when the hypervisor when it actually

699
00:25:48,539 --> 00:25:51,240
needs to move the memory pages and the

700
00:25:51,240 --> 00:25:53,700
metadata for protected guests and you

701
00:25:53,700 --> 00:25:55,559
know register State and stuff it will

702
00:25:55,559 --> 00:25:57,659
have to use interfaces to TDX model to

703
00:25:57,659 --> 00:25:59,220
actually obtain with payload which is

704
00:25:59,220 --> 00:26:01,400
going to be encrypted actually both

705
00:26:01,400 --> 00:26:03,840
encrypted Integrity projected under that

706
00:26:03,840 --> 00:26:06,000
key which is unknown to hypervisor and

707
00:26:06,000 --> 00:26:08,580
the migration can work so again I'm kind

708
00:26:08,580 --> 00:26:10,260
of simplifying this process a lot with

709
00:26:10,260 --> 00:26:13,080
moderators replay protection mechanism

710
00:26:13,080 --> 00:26:15,419
whereas a way to stop this migration if

711
00:26:15,419 --> 00:26:17,460
needed and kind of reward backup state

712
00:26:17,460 --> 00:26:20,400
so the details are more complicated but

713
00:26:20,400 --> 00:26:20,940
um

714
00:26:20,940 --> 00:26:22,980
but it's another aspect kind of we have

715
00:26:22,980 --> 00:26:26,340
to think of of of making it right to

716
00:26:26,340 --> 00:26:28,740
make sure that that skin truly truly be

717
00:26:28,740 --> 00:26:30,419
developed

718
00:26:30,419 --> 00:26:32,760
and I'm in other aspect I would like to

719
00:26:32,760 --> 00:26:35,940
also mention is the uh guest IO so as I

720
00:26:35,940 --> 00:26:39,960
said like earlier on so the guest needs

721
00:26:39,960 --> 00:26:41,640
to be able to interact with the hardware

722
00:26:41,640 --> 00:26:45,059
it's um in the first generation of uh

723
00:26:45,059 --> 00:26:48,600
TDX and also from other confidential

724
00:26:48,600 --> 00:26:51,000
Cloud Solutions there is no way to kind

725
00:26:51,000 --> 00:26:53,159
of art securely art that Hardware into

726
00:26:53,159 --> 00:26:55,679
the trusted Computing base of a guest so

727
00:26:55,679 --> 00:26:57,720
the only way how it kind of can work and

728
00:26:57,720 --> 00:27:00,240
how it works in this TDX in our case TDX

729
00:27:00,240 --> 00:27:03,240
1.0 is that you have you have the shared

730
00:27:03,240 --> 00:27:05,279
memory shared memory is a memory which

731
00:27:05,279 --> 00:27:07,799
is accessible both to the contrasted

732
00:27:07,799 --> 00:27:11,460
hypervisor and the protective guest and

733
00:27:11,460 --> 00:27:13,620
and you can use that memory to transfer

734
00:27:13,620 --> 00:27:16,080
data in and out between protected guests

735
00:27:16,080 --> 00:27:17,700
in the device but of course that

736
00:27:17,700 --> 00:27:19,440
memories is there's no protection in

737
00:27:19,440 --> 00:27:22,080
that memory so if you want the data to

738
00:27:22,080 --> 00:27:23,820
be protected you have to utilize some

739
00:27:23,820 --> 00:27:26,159
cryptographic measures so you have to

740
00:27:26,159 --> 00:27:29,279
encrypt Integrity protect and so on and

741
00:27:29,279 --> 00:27:31,500
and and you can think address this kind

742
00:27:31,500 --> 00:27:33,539
of all cycles of staging the data

743
00:27:33,539 --> 00:27:35,700
protecting it writing it out device have

744
00:27:35,700 --> 00:27:37,620
to read a dean and so on it's very

745
00:27:37,620 --> 00:27:39,659
performance and efficient so so if you

746
00:27:39,659 --> 00:27:41,039
do have the synthetic devices like

747
00:27:41,039 --> 00:27:42,960
virtual devices which actually allow all

748
00:27:42,960 --> 00:27:45,659
that setup to work but um

749
00:27:45,659 --> 00:27:47,940
there is clear performance overhead very

750
00:27:47,940 --> 00:27:49,799
slice robustness you have to constantly

751
00:27:49,799 --> 00:27:52,020
encrypt your encrypted data it's it's

752
00:27:52,020 --> 00:27:54,059
less than ideal

753
00:27:54,059 --> 00:27:56,760
so what is uh the goal where we're

754
00:27:56,760 --> 00:27:58,860
trying to go it's it's what we call the

755
00:27:58,860 --> 00:28:01,679
trusted I also for trusted IO case you

756
00:28:01,679 --> 00:28:03,240
would really like to establish this

757
00:28:03,240 --> 00:28:06,480
trusted kind of MMI on DMI ranges where

758
00:28:06,480 --> 00:28:08,940
you can you can a device can really

759
00:28:08,940 --> 00:28:11,940
write down data and over dma let's say

760
00:28:11,940 --> 00:28:14,159
or mmao and reproducted guests can

761
00:28:14,159 --> 00:28:16,500
consume and and you want the data to be

762
00:28:16,500 --> 00:28:18,059
entered and protected between that

763
00:28:18,059 --> 00:28:22,020
device and and your main main sock

764
00:28:22,020 --> 00:28:25,080
and and um and if you think if you look

765
00:28:25,080 --> 00:28:26,700
at here at the pictures so we have one

766
00:28:26,700 --> 00:28:30,299
here we have the actual our sock here so

767
00:28:30,299 --> 00:28:32,460
which runs the hose to guess to TDX

768
00:28:32,460 --> 00:28:34,559
module and so on again we have this

769
00:28:34,559 --> 00:28:37,679
special service TD here which we call

770
00:28:37,679 --> 00:28:40,799
tphd and then on the left hand side we

771
00:28:40,799 --> 00:28:42,600
have the actual device

772
00:28:42,600 --> 00:28:45,299
and and for the protected this this

773
00:28:45,299 --> 00:28:47,580
trusted iOS kind of compliant device we

774
00:28:47,580 --> 00:28:50,279
call it Tio device so it needs to have

775
00:28:50,279 --> 00:28:52,740
what we call device security manager is

776
00:28:52,740 --> 00:28:54,620
kind of you know

777
00:28:54,620 --> 00:28:56,940
analogy of kind of you know reference

778
00:28:56,940 --> 00:28:58,860
monitor or some kind of control pointed

779
00:28:58,860 --> 00:29:00,960
to a device side and when it can have

780
00:29:00,960 --> 00:29:02,880
one or more of a special protected

781
00:29:02,880 --> 00:29:05,340
interfaces again for those of you who

782
00:29:05,340 --> 00:29:06,900
familiar with virtualization you can

783
00:29:06,900 --> 00:29:08,520
think of it as analogy of a virtual

784
00:29:08,520 --> 00:29:10,799
function which can be assigned to a

785
00:29:10,799 --> 00:29:11,880
particular

786
00:29:11,880 --> 00:29:15,059
um particular interface in the hosts

787
00:29:15,059 --> 00:29:17,340
what you would like to have is that when

788
00:29:17,340 --> 00:29:20,159
the data goes out of this pcie root port

789
00:29:20,159 --> 00:29:22,620
in the sock and it arrives to the device

790
00:29:22,620 --> 00:29:24,659
here we would like to have end-to-end

791
00:29:24,659 --> 00:29:26,640
protection so basically confidentiality

792
00:29:26,640 --> 00:29:29,399
Integrity replay protection and Link so

793
00:29:29,399 --> 00:29:31,020
that the data is not modified you can

794
00:29:31,020 --> 00:29:32,940
have because in between you can have you

795
00:29:32,940 --> 00:29:34,799
know you can have PCI switches you can

796
00:29:34,799 --> 00:29:36,539
have anything on the actual board which

797
00:29:36,539 --> 00:29:39,240
is untrusted so we want to have that and

798
00:29:39,240 --> 00:29:40,919
we also want to make sure that the guest

799
00:29:40,919 --> 00:29:42,600
is empowered to

800
00:29:42,600 --> 00:29:43,440
um

801
00:29:43,440 --> 00:29:45,960
to actually decide whenever it wants to

802
00:29:45,960 --> 00:29:48,179
accept that device into its Computing

803
00:29:48,179 --> 00:29:50,940
base and even perform this this trust

804
00:29:50,940 --> 00:29:53,580
detail so again on a high level it works

805
00:29:53,580 --> 00:29:56,460
as following the rtpa to get with TDX

806
00:29:56,460 --> 00:29:58,140
model it's going to establish a secure

807
00:29:58,140 --> 00:30:00,899
session between itself and with devices

808
00:30:00,899 --> 00:30:03,000
the software session fully it's based in

809
00:30:03,000 --> 00:30:05,399
spdm protocol which again allows to

810
00:30:05,399 --> 00:30:07,860
provision the kind of attestation and

811
00:30:07,860 --> 00:30:10,440
measurements of a device so OverWatch

812
00:30:10,440 --> 00:30:12,720
session we are you can transfer into the

813
00:30:12,720 --> 00:30:14,700
host side with Device certificates

814
00:30:14,700 --> 00:30:16,679
measurements anything which kind of

815
00:30:16,679 --> 00:30:19,320
attests would be a state of a device

816
00:30:19,320 --> 00:30:21,960
and when after that the TDX model is

817
00:30:21,960 --> 00:30:23,580
going to generate two keys who will be

818
00:30:23,580 --> 00:30:25,200
selling uh the keys are going to be

819
00:30:25,200 --> 00:30:26,880
provisioned on both ends for always

820
00:30:26,880 --> 00:30:29,760
secure spdm Channel and now after the

821
00:30:29,760 --> 00:30:32,159
case has been provisioned inside we have

822
00:30:32,159 --> 00:30:34,740
this end to end design producted link

823
00:30:34,740 --> 00:30:37,020
which where the actual flow of data will

824
00:30:37,020 --> 00:30:40,740
go for our mmio and our dma and then

825
00:30:40,740 --> 00:30:42,899
it's up to the guest I mean the host is

826
00:30:42,899 --> 00:30:45,299
going to expose with ranges from the

827
00:30:45,299 --> 00:30:47,220
which device advertised for its device

828
00:30:47,220 --> 00:30:48,899
interface to the guest and say okay

829
00:30:48,899 --> 00:30:51,600
here's a range of Emma my own dma you

830
00:30:51,600 --> 00:30:53,880
can access this device and the guest has

831
00:30:53,880 --> 00:30:56,640
an interfaces to a TDX module to verify

832
00:30:56,640 --> 00:30:58,440
a bunch of things that host is not lying

833
00:30:58,440 --> 00:31:00,299
so to verify this is ranges are correct

834
00:31:00,299 --> 00:31:02,220
to verify what kind of device

835
00:31:02,220 --> 00:31:04,860
certificates of a device presented and

836
00:31:04,860 --> 00:31:07,320
so on you can make kind of um for a

837
00:31:07,320 --> 00:31:08,880
decision about whenever it wants to

838
00:31:08,880 --> 00:31:10,860
accept that range and if it does accept

839
00:31:10,860 --> 00:31:13,380
which range and TDX model has a way to

840
00:31:13,380 --> 00:31:15,600
program trusted armamayo for this ranges

841
00:31:15,600 --> 00:31:18,539
so when the actual communication can

842
00:31:18,539 --> 00:31:20,700
happen and it's both protected on the

843
00:31:20,700 --> 00:31:24,779
sock itself and on the pizza link

844
00:31:24,779 --> 00:31:28,200
so that's I guess all the aspects I want

845
00:31:28,200 --> 00:31:29,520
to talk today and have time to talk

846
00:31:29,520 --> 00:31:32,159
today so just in conclusion um

847
00:31:32,159 --> 00:31:34,220
as I mentioned before so the

848
00:31:34,220 --> 00:31:36,480
confidential cloud computing is an

849
00:31:36,480 --> 00:31:37,860
important area which is constantly

850
00:31:37,860 --> 00:31:39,779
growing and we have Hardware Solutions

851
00:31:39,779 --> 00:31:41,960
both Intel and other manufacturing

852
00:31:41,960 --> 00:31:44,399
manufacturers which which enable this

853
00:31:44,399 --> 00:31:47,159
technology to develop but we have and

854
00:31:47,159 --> 00:31:49,140
and we are aware of many of these

855
00:31:49,140 --> 00:31:50,580
different aspects and we're trying to

856
00:31:50,580 --> 00:31:52,320
provide a technical solution for these

857
00:31:52,320 --> 00:31:55,080
problems but a lot of time or sometime

858
00:31:55,080 --> 00:31:56,820
definitely will be needed before it's

859
00:31:56,820 --> 00:31:59,279
all adopted and when we think about

860
00:31:59,279 --> 00:32:01,020
things like the hardening of the

861
00:32:01,020 --> 00:32:02,700
software stuck with guest kernel

862
00:32:02,700 --> 00:32:04,620
hardening which I talked about and so on

863
00:32:04,620 --> 00:32:06,240
that's an important problem which

864
00:32:06,240 --> 00:32:07,320
actually requires the community

865
00:32:07,320 --> 00:32:09,659
attention so because

866
00:32:09,659 --> 00:32:11,279
um it's it's it's if you think that

867
00:32:11,279 --> 00:32:13,080
we've spent like you know 15 years or

868
00:32:13,080 --> 00:32:14,940
more hardening the attack surface

869
00:32:14,940 --> 00:32:17,220
between the user space and kernel and

870
00:32:17,220 --> 00:32:20,820
now we have pretty much similar or quite

871
00:32:20,820 --> 00:32:22,500
like you know similar problems and in

872
00:32:22,500 --> 00:32:24,659
our attack surface it's going to take a

873
00:32:24,659 --> 00:32:26,159
while before that attack surface is

874
00:32:26,159 --> 00:32:28,740
really bug-free and so on

875
00:32:28,740 --> 00:32:31,320
and um yeah with that I would like to

876
00:32:31,320 --> 00:32:34,700
see for any questions

877
00:32:40,020 --> 00:32:42,539
so you mentioned that we could have

878
00:32:42,539 --> 00:32:44,340
memory corruption and you also mentioned

879
00:32:44,340 --> 00:32:46,620
that we have a guest attestation

880
00:32:46,620 --> 00:32:48,779
in case of memory corruption and there

881
00:32:48,779 --> 00:32:51,000
is a crash with the attestation module

882
00:32:51,000 --> 00:32:52,799
can be used to report that there have

883
00:32:52,799 --> 00:32:55,919
been a real Behavior

884
00:32:55,919 --> 00:32:58,740
so so it depends what you mean by the um

885
00:32:58,740 --> 00:33:01,380
memory corruption so if let's say if a

886
00:33:01,380 --> 00:33:03,659
gas if a house tries into a member of a

887
00:33:03,659 --> 00:33:05,700
guest stuff that attestation is not

888
00:33:05,700 --> 00:33:07,620
going to be involved is TDX model and

889
00:33:07,620 --> 00:33:09,120
make sure that memory is poisoned and

890
00:33:09,120 --> 00:33:12,600
the gas can start so it's it's it's uh

891
00:33:12,600 --> 00:33:15,539
it's it's it's it's it's not gonna

892
00:33:15,539 --> 00:33:17,580
survive to the point where the station

893
00:33:17,580 --> 00:33:18,659
happens

894
00:33:18,659 --> 00:33:20,580
so the attestation have to make sure

895
00:33:20,580 --> 00:33:22,559
that at least from TDX model a point of

896
00:33:22,559 --> 00:33:24,120
view and and the memory protection point

897
00:33:24,120 --> 00:33:25,980
if your memory is not corrupted

898
00:33:25,980 --> 00:33:27,659
so if a memory is corrupted when the

899
00:33:27,659 --> 00:33:29,519
guest doesn't run so it's parameters

900
00:33:29,519 --> 00:33:30,659
from running

901
00:33:30,659 --> 00:33:32,700
so they get machine check and everything

902
00:33:32,700 --> 00:33:35,100
like going on only and for guest is

903
00:33:35,100 --> 00:33:37,679
simply disabled so we memory protection

904
00:33:37,679 --> 00:33:39,779
part is taken it's kind of um pretty

905
00:33:39,779 --> 00:33:40,860
strictly

906
00:33:40,860 --> 00:33:44,000
to the X case hello

907
00:33:44,000 --> 00:33:45,539
[Music]

908
00:33:45,539 --> 00:33:49,700
here the right and the right at the end

909
00:33:49,700 --> 00:33:53,760
I have a question about networking so I

910
00:33:53,760 --> 00:33:55,919
for my from what I understood from your

911
00:33:55,919 --> 00:33:57,480
presentation everything is at the local

912
00:33:57,480 --> 00:33:59,820
level on the physical machine could we

913
00:33:59,820 --> 00:34:03,360
use these enclaves to authenticate all

914
00:34:03,360 --> 00:34:04,860
the machines on the network for instance

915
00:34:04,860 --> 00:34:06,000
and especially in the case of a

916
00:34:06,000 --> 00:34:07,500
migration to make sure that the other

917
00:34:07,500 --> 00:34:10,918
hosts is also because the fact that it

918
00:34:10,918 --> 00:34:12,659
has an enclave doesn't mean that it is

919
00:34:12,659 --> 00:34:14,820
the right first we are talking to right

920
00:34:14,820 --> 00:34:17,879
yeah so it's in I mean these are not in

921
00:34:17,879 --> 00:34:20,580
place TDX guests but we if you think of

922
00:34:20,580 --> 00:34:23,580
the uh there is a way I mean and if you

923
00:34:23,580 --> 00:34:25,379
think of enclaves we have probably I can

924
00:34:25,379 --> 00:34:27,060
provide a registration report so you can

925
00:34:27,060 --> 00:34:28,739
get a quota testing the integrative

926
00:34:28,739 --> 00:34:30,960
enclave and then as I mentioned here

927
00:34:30,960 --> 00:34:32,940
like in real life migration you can

928
00:34:32,940 --> 00:34:35,520
utilize this another this modification

929
00:34:35,520 --> 00:34:37,800
of TLS protocol which allows you instead

930
00:34:37,800 --> 00:34:40,020
of a certificate publicly certificate it

931
00:34:40,020 --> 00:34:42,239
allows you to provide this identity of

932
00:34:42,239 --> 00:34:44,820
enclaves and that identity of enclaves

933
00:34:44,820 --> 00:34:46,619
is chained to you know certificates such

934
00:34:46,619 --> 00:34:48,960
Intel distribute and when you can verify

935
00:34:48,960 --> 00:34:50,879
that but you're actually talking to a

936
00:34:50,879 --> 00:34:52,918
legitimate point in the other one so yes

937
00:34:52,918 --> 00:34:55,320
so and I would refer to if you're

938
00:34:55,320 --> 00:34:57,119
interested in that area to check this

939
00:34:57,119 --> 00:35:00,420
array TLS remote at the station TLS so

940
00:35:00,420 --> 00:35:02,220
this is the modification to a TLS

941
00:35:02,220 --> 00:35:04,500
protocol exactly to support the The

942
00:35:04,500 --> 00:35:06,839
Enclave in clayfighter station and kind

943
00:35:06,839 --> 00:35:08,760
of remote basically key exchange

944
00:35:08,760 --> 00:35:11,760
protocol for for based on enclaves and

945
00:35:11,760 --> 00:35:13,200
entity

946
00:35:13,200 --> 00:35:15,780
awesome

947
00:35:15,780 --> 00:35:18,780
questions

948
00:35:19,440 --> 00:35:21,300
yeah here

949
00:35:21,300 --> 00:35:23,400
um I have a question because sgx was

950
00:35:23,400 --> 00:35:25,619
real the real nice thing with sgx was it

951
00:35:25,619 --> 00:35:28,680
was available on consumer CPUs uh from

952
00:35:28,680 --> 00:35:30,599
pretty early on and so security

953
00:35:30,599 --> 00:35:33,720
researcher could test it you know under

954
00:35:33,720 --> 00:35:36,599
home devices and everything and TDX

955
00:35:36,599 --> 00:35:39,180
seems more focused on cloud stuff so

956
00:35:39,180 --> 00:35:41,820
will any part of TDX be available on

957
00:35:41,820 --> 00:35:44,520
consumer CPUs or is it really meant to

958
00:35:44,520 --> 00:35:49,079
stay on uh you know server side CPU yeah

959
00:35:49,079 --> 00:35:51,839
I mean the goal of course FTD access is

960
00:35:51,839 --> 00:35:53,099
to enable the confidential cloud

961
00:35:53,099 --> 00:35:54,839
computing so it's kind of more important

962
00:35:54,839 --> 00:35:57,060
for Server things but unfortunately I

963
00:35:57,060 --> 00:35:59,579
cannot comment on the roadmaps plans and

964
00:35:59,579 --> 00:36:00,839
things like that now where I probably

965
00:36:00,839 --> 00:36:04,260
even know details on that so

966
00:36:04,260 --> 00:36:06,540
I think that's question is outside of my

967
00:36:06,540 --> 00:36:08,960
domain

968
00:36:09,300 --> 00:36:10,920
hello

969
00:36:10,920 --> 00:36:12,380
um I'm here

970
00:36:12,380 --> 00:36:15,060
on the right it's very so such a bright

971
00:36:15,060 --> 00:36:17,579
light that's it yeah yes thanks for the

972
00:36:17,579 --> 00:36:20,940
talk it was very insightful what is the

973
00:36:20,940 --> 00:36:23,220
best way to test TDX currently because

974
00:36:23,220 --> 00:36:26,160
as far knows there is no uh physical

975
00:36:26,160 --> 00:36:29,220
processes that existed deliver that and

976
00:36:29,220 --> 00:36:32,940
second is there a way to Benchmark the

977
00:36:32,940 --> 00:36:35,400
performance of TDX maybe using some

978
00:36:35,400 --> 00:36:36,500
simulational

979
00:36:36,500 --> 00:36:39,780
yes so so when when I talk to it with uh

980
00:36:39,780 --> 00:36:41,760
we developed the fasting techniques here

981
00:36:41,760 --> 00:36:43,800
for hardening with guest kernel we had

982
00:36:43,800 --> 00:36:45,900
like a bit of the same problem so it's

983
00:36:45,900 --> 00:36:47,760
even where we are Intel also like you

984
00:36:47,760 --> 00:36:50,099
know Hardware is limited and so on so we

985
00:36:50,099 --> 00:36:52,619
use actual emulation setup here and and

986
00:36:52,619 --> 00:36:54,359
our emulation setup is actually public

987
00:36:54,359 --> 00:36:57,000
so it's uh but the problem of a

988
00:36:57,000 --> 00:36:58,740
demolition setup it works well for

989
00:36:58,740 --> 00:37:00,480
things like fuzzing so you can kind of

990
00:37:00,480 --> 00:37:02,579
instantiate place and you can you can

991
00:37:02,579 --> 00:37:04,380
get the basic things you know there's

992
00:37:04,380 --> 00:37:06,960
emulation of TDX module even you don't

993
00:37:06,960 --> 00:37:08,940
even have to go on I mean TDX model

994
00:37:08,940 --> 00:37:10,980
codes are source code is public but you

995
00:37:10,980 --> 00:37:12,300
don't have to go like to all those

996
00:37:12,300 --> 00:37:14,400
things but the red setup is very limited

997
00:37:14,400 --> 00:37:18,000
so I'm not aware about any publicly full

998
00:37:18,000 --> 00:37:20,280
emulation setup in existence and that

999
00:37:20,280 --> 00:37:21,480
kind of answers the second question

1000
00:37:21,480 --> 00:37:22,980
because our emulation setup is

1001
00:37:22,980 --> 00:37:24,359
definitely not good for any performance

1002
00:37:24,359 --> 00:37:26,280
benchmarking it's it's you know it's a

1003
00:37:26,280 --> 00:37:28,859
setup for fuzzing and and doing security

1004
00:37:28,859 --> 00:37:32,339
hardening so that benchmarking you would

1005
00:37:32,339 --> 00:37:34,380
ideally do on Ivan Hardware or something

1006
00:37:34,380 --> 00:37:36,359
which is simulates Hardware very closely

1007
00:37:36,359 --> 00:37:39,540
I'm not aware about any Public public

1008
00:37:39,540 --> 00:37:44,540
simulator at this point so unfortunately

1009
00:37:46,440 --> 00:37:49,640
any more questions

1010
00:37:52,380 --> 00:37:55,280
first question

1011
00:37:59,040 --> 00:38:02,400
hello as a cloud user how can I validate

1012
00:38:02,400 --> 00:38:04,320
that my virtual machine is running

1013
00:38:04,320 --> 00:38:08,339
inside a trusted domain that's exactly

1014
00:38:08,339 --> 00:38:11,220
the goal of what station so the artist

1015
00:38:11,220 --> 00:38:14,160
station if you run with statistation

1016
00:38:14,160 --> 00:38:16,260
we are the station kind of process here

1017
00:38:16,260 --> 00:38:19,380
which is I said it's much more complex

1018
00:38:19,380 --> 00:38:22,020
when I had time to go into or it's it's

1019
00:38:22,020 --> 00:38:23,820
all published so there is a way that you

1020
00:38:23,820 --> 00:38:25,800
can exactly so when you get that remote

1021
00:38:25,800 --> 00:38:28,320
when remote verifier gets used to the

1022
00:38:28,320 --> 00:38:30,839
quote or code to the quote so that quote

1023
00:38:30,839 --> 00:38:32,700
contains all the information about The

1024
00:38:32,700 --> 00:38:35,160
Trusted Computing base not just of the

1025
00:38:35,160 --> 00:38:37,740
guest itself of its software but also

1026
00:38:37,740 --> 00:38:40,500
the uh TDX module that quote is actually

1027
00:38:40,500 --> 00:38:43,440
signed bias Jackson clave in TDX case so

1028
00:38:43,440 --> 00:38:45,540
you get also all the kind of a typical

1029
00:38:45,540 --> 00:38:47,579
attestation guarantee surface checks and

1030
00:38:47,579 --> 00:38:50,099
place you can verify with tcbsvn numbers

1031
00:38:50,099 --> 00:38:52,619
and so on so this is how only by doing

1032
00:38:52,619 --> 00:38:54,359
this remote at the station you are able

1033
00:38:54,359 --> 00:38:56,099
to save it okay you're running inside of

1034
00:38:56,099 --> 00:38:58,260
this protected guest and only after that

1035
00:38:58,260 --> 00:38:59,940
you should actually start using red

1036
00:38:59,940 --> 00:39:01,560
guest because if you don't do that step

1037
00:39:01,560 --> 00:39:04,920
you essentially have no guarantees

1038
00:39:04,920 --> 00:39:08,520
and so uh you were talking about uh the

1039
00:39:08,520 --> 00:39:11,520
when the VM is migrated so is it

1040
00:39:11,520 --> 00:39:14,820
something that uh will be checked onto

1041
00:39:14,820 --> 00:39:17,640
the the instances migrated or do I have

1042
00:39:17,640 --> 00:39:20,099
a way to detect that my that main

1043
00:39:20,099 --> 00:39:22,859
instance has been migrated and

1044
00:39:22,859 --> 00:39:25,859
yes so in um if I remember right there's

1045
00:39:25,859 --> 00:39:27,300
a lot of details here

1046
00:39:27,300 --> 00:39:28,980
if I remember right when migration so

1047
00:39:28,980 --> 00:39:30,240
first of all you have this when

1048
00:39:30,240 --> 00:39:32,220
migration is being performed so this

1049
00:39:32,220 --> 00:39:34,440
this part which does migration so this

1050
00:39:34,440 --> 00:39:36,720
migration kind of service TD it becomes

1051
00:39:36,720 --> 00:39:38,820
part of a trusted Computing base so that

1052
00:39:38,820 --> 00:39:41,339
is being also kind of that entity of

1053
00:39:41,339 --> 00:39:43,200
that now that TD is going to be

1054
00:39:43,200 --> 00:39:45,599
reflected in value station quote so you

1055
00:39:45,599 --> 00:39:47,520
can see the fact wherever you are

1056
00:39:47,520 --> 00:39:49,680
migratable or not is also reflected so

1057
00:39:49,680 --> 00:39:51,240
you can specify a flag which you don't

1058
00:39:51,240 --> 00:39:53,760
want to be migrated and and when that is

1059
00:39:53,760 --> 00:39:54,960
going to be actually guaranteed that

1060
00:39:54,960 --> 00:39:57,359
migration won't happen and when but when

1061
00:39:57,359 --> 00:39:59,220
you're being when you are migrated to

1062
00:39:59,220 --> 00:40:02,460
the new uh physical node I think uh I

1063
00:40:02,460 --> 00:40:05,099
think it's I I would I don't want to be

1064
00:40:05,099 --> 00:40:07,140
uncorrect if I remember his details

1065
00:40:07,140 --> 00:40:08,220
right but I think it's going to be

1066
00:40:08,220 --> 00:40:10,079
reflected on the measurements which

1067
00:40:10,079 --> 00:40:14,220
you're going to start so but um

1068
00:40:14,220 --> 00:40:15,720
um yeah I just don't remember the

1069
00:40:15,720 --> 00:40:17,760
details on that one but there are there

1070
00:40:17,760 --> 00:40:19,440
there are I have links also to the

1071
00:40:19,440 --> 00:40:22,020
entire public uh white papers with

1072
00:40:22,020 --> 00:40:24,599
details on migration on trusted to you

1073
00:40:24,599 --> 00:40:27,720
or not just stations over I mean very a

1074
00:40:27,720 --> 00:40:29,339
lot of details here but you can get the

1075
00:40:29,339 --> 00:40:32,359
details if you want

1076
00:40:37,800 --> 00:40:40,920
we were talking about project Amber

1077
00:40:40,920 --> 00:40:43,920
um so I mean is actually it is

1078
00:40:43,920 --> 00:40:46,079
completely done by Intel for example I

1079
00:40:46,079 --> 00:40:48,660
mean for sgx we had this Yas solution

1080
00:40:48,660 --> 00:40:50,579
which was I mean this attached

1081
00:40:50,579 --> 00:40:52,800
attestation service which wasn't

1082
00:40:52,800 --> 00:40:55,020
nice but people wanted it in data

1083
00:40:55,020 --> 00:40:57,240
centers so then they moved on I mean

1084
00:40:57,240 --> 00:40:59,579
Intel moved on to this data center

1085
00:40:59,579 --> 00:41:00,599
service

1086
00:41:00,599 --> 00:41:03,119
so project Amber is similar to the sjx

1087
00:41:03,119 --> 00:41:04,740
version of attestation I mean the

1088
00:41:04,740 --> 00:41:06,359
starting one so where Intel does

1089
00:41:06,359 --> 00:41:07,980
everything

1090
00:41:07,980 --> 00:41:10,140
for projects so I don't know about this

1091
00:41:10,140 --> 00:41:11,760
previous I'm not so kind of familiar

1092
00:41:11,760 --> 00:41:14,040
with htx history but the project number

1093
00:41:14,040 --> 00:41:16,020
is yes so it's an Intel project it's

1094
00:41:16,020 --> 00:41:17,640
provided as a service like the

1095
00:41:17,640 --> 00:41:20,099
attestation service it does provide you

1096
00:41:20,099 --> 00:41:23,460
all the way to actually verify the uh

1097
00:41:23,460 --> 00:41:25,680
whatever checks are done you can get so

1098
00:41:25,680 --> 00:41:28,140
it it aims to be it it's called it aims

1099
00:41:28,140 --> 00:41:30,359
to be fully transparent so you should be

1100
00:41:30,359 --> 00:41:32,640
able to verify every step if you want of

1101
00:41:32,640 --> 00:41:34,619
that you know hard verified radio

1102
00:41:34,619 --> 00:41:37,140
station what kind of you know trusted

1103
00:41:37,140 --> 00:41:39,180
Computing bases their numbers and so on

1104
00:41:39,180 --> 00:41:42,720
so yes it's run by Intel but it it aims

1105
00:41:42,720 --> 00:41:44,880
to be very transparent and you should be

1106
00:41:44,880 --> 00:41:47,339
able to inspect every step of that

1107
00:41:47,339 --> 00:41:49,500
attestation service if you want so it

1108
00:41:49,500 --> 00:41:51,960
has it exposes again I don't really know

1109
00:41:51,960 --> 00:41:54,599
the details I know it exposes some ipis

1110
00:41:54,599 --> 00:41:56,339
you can do all kinds of queries about

1111
00:41:56,339 --> 00:41:58,740
what what what you know what has been

1112
00:41:58,740 --> 00:42:00,119
actually performed as part of a side

1113
00:42:00,119 --> 00:42:01,560
station so you should be able to kind of

1114
00:42:01,560 --> 00:42:03,599
for goal is to be able fully inspectable

1115
00:42:03,599 --> 00:42:05,880
so but it's it's still kind of Revenue

1116
00:42:05,880 --> 00:42:08,760
project so and I'm personally not part

1117
00:42:08,760 --> 00:42:11,339
of that project so I don't like again no

1118
00:42:11,339 --> 00:42:14,160
baby details there but um

1119
00:42:14,160 --> 00:42:16,200
I think the goal is to be inspectable as

1120
00:42:16,200 --> 00:42:18,300
patches again and transparent as much as

1121
00:42:18,300 --> 00:42:20,599
it can

1122
00:42:22,640 --> 00:42:26,299
any more questions

1123
00:42:31,920 --> 00:42:34,380
um from my understanding sjx is a

1124
00:42:34,380 --> 00:42:37,260
dependencies of TDX is it really the

1125
00:42:37,260 --> 00:42:39,780
case and in the future can we aim to

1126
00:42:39,780 --> 00:42:43,740
have TDX enable the CPU without having

1127
00:42:43,740 --> 00:42:47,880
sgx I so it's not fully correct to say

1128
00:42:47,880 --> 00:42:49,859
the TDX depends on sgx the only

1129
00:42:49,859 --> 00:42:52,740
dependency is exactly on the attestation

1130
00:42:52,740 --> 00:42:55,800
part so the currently the adjustation of

1131
00:42:55,800 --> 00:42:58,680
the uh office so generation of this this

1132
00:42:58,680 --> 00:43:01,140
TD code here especially is actually done

1133
00:43:01,140 --> 00:43:03,240
by Jackson Clive so this is the current

1134
00:43:03,240 --> 00:43:06,839
kind of Link uh the future again I'm not

1135
00:43:06,839 --> 00:43:09,720
sure I'm entitled to comment but um at

1136
00:43:09,720 --> 00:43:13,520
least this is the current case so

1137
00:43:14,880 --> 00:43:16,680
for all the question we are running

1138
00:43:16,680 --> 00:43:18,180
unfortunately we are running out of time

1139
00:43:18,180 --> 00:43:20,040
so thank you very much for your

1140
00:43:20,040 --> 00:43:22,279
attention

