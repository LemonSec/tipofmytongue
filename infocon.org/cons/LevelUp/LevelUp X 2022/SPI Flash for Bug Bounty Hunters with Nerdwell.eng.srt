1
00:00:00,299 --> 00:00:04,319
hey hackers Nerdball here and I spy with

2
00:00:04,319 --> 00:00:07,200
my hacking eye something small and

3
00:00:07,200 --> 00:00:10,019
square with eight little legs can you

4
00:00:10,019 --> 00:00:11,940
guess what I'm thinking of

5
00:00:11,940 --> 00:00:13,740
well if you're here to watch this talk

6
00:00:13,740 --> 00:00:16,199
you probably already know that today

7
00:00:16,199 --> 00:00:18,240
we're going to be looking at spy flash

8
00:00:18,240 --> 00:00:20,640
for bug bounty hunters

9
00:00:20,640 --> 00:00:22,920
and we'll start with a review of what

10
00:00:22,920 --> 00:00:25,800
exactly is spy flash how does it apply

11
00:00:25,800 --> 00:00:28,800
to us as bug bounty hunters what can it

12
00:00:28,800 --> 00:00:30,960
provide us in our Hardware hacking

13
00:00:30,960 --> 00:00:31,980
efforts

14
00:00:31,980 --> 00:00:34,440
and then we'll do a few demos to show

15
00:00:34,440 --> 00:00:36,239
how we can read the contents of spy

16
00:00:36,239 --> 00:00:39,600
flash using off the shelf inexpensive

17
00:00:39,600 --> 00:00:42,000
components that you may already have

18
00:00:42,000 --> 00:00:45,600
lying around so what is spy Flash

19
00:00:45,600 --> 00:00:49,680
well it is a solid state memory that's

20
00:00:49,680 --> 00:00:52,340
usually in a very small form factor

21
00:00:52,340 --> 00:00:56,760
hardwired soldered onto embedded systems

22
00:00:56,760 --> 00:00:59,579
and Hardware devices and it is usually

23
00:00:59,579 --> 00:01:02,100
integral to the operation of those

24
00:01:02,100 --> 00:01:03,539
devices

25
00:01:03,539 --> 00:01:06,479
and spy is actually an acronym for

26
00:01:06,479 --> 00:01:09,299
serial peripheral interface which is a

27
00:01:09,299 --> 00:01:10,860
synchronous serial communication

28
00:01:10,860 --> 00:01:13,439
protocol that's used in embedded systems

29
00:01:13,439 --> 00:01:16,020
and usually only works over very short

30
00:01:16,020 --> 00:01:17,400
distances

31
00:01:17,400 --> 00:01:20,540
and requires a minimum of four wires

32
00:01:20,540 --> 00:01:24,540
sometimes we can see instances of the

33
00:01:24,540 --> 00:01:26,460
pro of the protocol that use more than

34
00:01:26,460 --> 00:01:29,040
that but at a bare minimum we will need

35
00:01:29,040 --> 00:01:30,420
four wires

36
00:01:30,420 --> 00:01:32,220
and we'll take a look at what each of

37
00:01:32,220 --> 00:01:34,320
those is here in a moment

38
00:01:34,320 --> 00:01:37,140
as you can see in these images

39
00:01:37,140 --> 00:01:39,780
the Spy flash chips are generally very

40
00:01:39,780 --> 00:01:40,799
small

41
00:01:40,799 --> 00:01:43,259
and in most of the implementations that

42
00:01:43,259 --> 00:01:45,119
we will be encountering in our Hardware

43
00:01:45,119 --> 00:01:48,060
hacking activities you'll find them in

44
00:01:48,060 --> 00:01:51,060
eight pin form factors

45
00:01:51,060 --> 00:01:53,340
speaking of our Hardware hacking

46
00:01:53,340 --> 00:01:55,860
activities let's talk about some of the

47
00:01:55,860 --> 00:01:58,200
common uses for spy flash that we might

48
00:01:58,200 --> 00:01:59,700
encounter

49
00:01:59,700 --> 00:02:02,640
so spy flash usually has a relatively

50
00:02:02,640 --> 00:02:06,719
small capacity of storage so sometimes

51
00:02:06,719 --> 00:02:09,179
we will see it used as the sole memory

52
00:02:09,179 --> 00:02:12,540
for small footprint devices with minimal

53
00:02:12,540 --> 00:02:14,879
storage requirements what comes to mind

54
00:02:14,879 --> 00:02:17,520
are things like light bulbs and other

55
00:02:17,520 --> 00:02:19,200
iot devices

56
00:02:19,200 --> 00:02:22,620
and in those instances we will see that

57
00:02:22,620 --> 00:02:24,660
the device may actually just run the

58
00:02:24,660 --> 00:02:27,360
code for its firmware right off the Spy

59
00:02:27,360 --> 00:02:28,200
Flash

60
00:02:28,200 --> 00:02:30,959
but more commonly the device will load

61
00:02:30,959 --> 00:02:33,180
the contents of the Spy flash into RAM

62
00:02:33,180 --> 00:02:37,020
and then execute the code from Ram

63
00:02:37,020 --> 00:02:39,300
another common instance that we will see

64
00:02:39,300 --> 00:02:42,360
is that spy flash is used as the

65
00:02:42,360 --> 00:02:45,300
bootloader ROM for more advanced

66
00:02:45,300 --> 00:02:48,360
Hardware devices like routers and Wi-Fi

67
00:02:48,360 --> 00:02:50,519
access points and that's actually what

68
00:02:50,519 --> 00:02:52,560
we're going to take a look at today

69
00:02:52,560 --> 00:02:56,459
and in these instances what we'll see is

70
00:02:56,459 --> 00:03:00,360
that the router or AP will have a larger

71
00:03:00,360 --> 00:03:03,379
capacity memory device like nand flash

72
00:03:03,379 --> 00:03:06,300
which can go up to somewhere around

73
00:03:06,300 --> 00:03:08,580
eight gigabytes or more

74
00:03:08,580 --> 00:03:12,180
it takes say 48 pin socket and has quite

75
00:03:12,180 --> 00:03:15,120
a bit more complexity to dealing with

76
00:03:15,120 --> 00:03:17,940
that memory and so the system needs some

77
00:03:17,940 --> 00:03:20,540
basic functionality to load up first

78
00:03:20,540 --> 00:03:23,760
that it can use to interact with the

79
00:03:23,760 --> 00:03:27,060
nand flash load its operating system and

80
00:03:27,060 --> 00:03:29,640
then run from there and so what we'll

81
00:03:29,640 --> 00:03:32,400
see is in a lot of cases that basic

82
00:03:32,400 --> 00:03:35,940
functionality that is used to read from

83
00:03:35,940 --> 00:03:38,400
the nand Flash and move to the next step

84
00:03:38,400 --> 00:03:40,620
of the bootstrap process

85
00:03:40,620 --> 00:03:45,540
is provided by the contents of the Spy

86
00:03:45,540 --> 00:03:47,780
Flash

87
00:03:47,819 --> 00:03:50,580
even in your most advanced systems and

88
00:03:50,580 --> 00:03:53,060
servers today you will see spy flash

89
00:03:53,060 --> 00:03:57,239
very commonly used for like the PC bios

90
00:03:57,239 --> 00:04:00,540
so even in a in an Intel machine that

91
00:04:00,540 --> 00:04:02,640
you go by at the store today or build

92
00:04:02,640 --> 00:04:04,500
yourself if you look on the motherboard

93
00:04:04,500 --> 00:04:07,799
you will almost certainly find an eight

94
00:04:07,799 --> 00:04:12,120
pin spy flash chip that has your bios

95
00:04:12,120 --> 00:04:14,400
loaded on it

96
00:04:14,400 --> 00:04:18,000
and we will also see it in common modern

97
00:04:18,000 --> 00:04:20,760
peripheral devices so raid controllers

98
00:04:20,760 --> 00:04:23,340
and anything else you know graphics

99
00:04:23,340 --> 00:04:25,860
cards anything that you can put into a

100
00:04:25,860 --> 00:04:27,860
PCI X slot

101
00:04:27,860 --> 00:04:32,340
or USB device will commonly have some

102
00:04:32,340 --> 00:04:34,800
sort of spy flash that holds the

103
00:04:34,800 --> 00:04:37,860
firmware for its integrated controllers

104
00:04:37,860 --> 00:04:41,160
that are local to that device

105
00:04:41,160 --> 00:04:44,759
and so as you can see it's we will find

106
00:04:44,759 --> 00:04:46,740
spy Flash in all sorts of different

107
00:04:46,740 --> 00:04:50,940
places and what exactly we can do with

108
00:04:50,940 --> 00:04:53,280
the contents of the Spy flash once we

109
00:04:53,280 --> 00:04:56,580
extract it will vary from one device to

110
00:04:56,580 --> 00:04:59,220
another and in some cases we may even

111
00:04:59,220 --> 00:05:03,180
find it useful to be able to modify the

112
00:05:03,180 --> 00:05:05,100
contents of the Spy Flash

113
00:05:05,100 --> 00:05:07,800
for example let's say we have a device

114
00:05:07,800 --> 00:05:10,680
that has a bootloader that does some

115
00:05:10,680 --> 00:05:13,020
security mechanisms that we want to

116
00:05:13,020 --> 00:05:15,660
bypass well if we can extract the Spy

117
00:05:15,660 --> 00:05:18,780
flash contents make some changes and

118
00:05:18,780 --> 00:05:20,520
jump over those code paths and then

119
00:05:20,520 --> 00:05:22,620
write it back to the Spy flash on the

120
00:05:22,620 --> 00:05:25,080
device we can circumvent those security

121
00:05:25,080 --> 00:05:26,400
controls

122
00:05:26,400 --> 00:05:29,100
and that's a more advanced example today

123
00:05:29,100 --> 00:05:31,139
we'll be looking at just pulling the

124
00:05:31,139 --> 00:05:34,340
bootloader code off of a spy flash chip

125
00:05:34,340 --> 00:05:39,479
from a Wi-Fi access point that follows

126
00:05:39,479 --> 00:05:42,419
the the typical design of using nand

127
00:05:42,419 --> 00:05:47,100
flash for a Linux OS and spy flash as

128
00:05:47,100 --> 00:05:50,400
its bootloader that it first loads in

129
00:05:50,400 --> 00:05:53,160
order to interact with the nand Flash

130
00:05:53,160 --> 00:05:56,100
so if you're new to Hardware hacking

131
00:05:56,100 --> 00:05:59,100
coming to it from web app hacking or

132
00:05:59,100 --> 00:06:01,860
mobile device hacking or even binary

133
00:06:01,860 --> 00:06:04,139
hacking you'll find that there are

134
00:06:04,139 --> 00:06:06,360
definitely some different tools that

135
00:06:06,360 --> 00:06:09,479
you're going to need to get started and

136
00:06:09,479 --> 00:06:11,880
we can generally break these down into

137
00:06:11,880 --> 00:06:15,479
the physical disassembly tools and other

138
00:06:15,479 --> 00:06:17,520
tools that we need to actually interact

139
00:06:17,520 --> 00:06:20,400
with the electronic components

140
00:06:20,400 --> 00:06:22,680
and so if you've ever tried to take

141
00:06:22,680 --> 00:06:26,160
apart any electronic device you could

142
00:06:26,160 --> 00:06:28,259
probably relate to how difficult it can

143
00:06:28,259 --> 00:06:31,380
be to to get that plastic pried apart

144
00:06:31,380 --> 00:06:34,740
without breaking something and while

145
00:06:34,740 --> 00:06:35,699
it's

146
00:06:35,699 --> 00:06:38,580
somewhat inevitable in the process of

147
00:06:38,580 --> 00:06:40,800
Hardware hacking we will likely break

148
00:06:40,800 --> 00:06:43,319
some stuff we certainly want to keep

149
00:06:43,319 --> 00:06:46,979
that to a minimum obviously and so a

150
00:06:46,979 --> 00:06:49,380
toolkit like I have depicted here which

151
00:06:49,380 --> 00:06:51,720
is iFixit brand and you can actually

152
00:06:51,720 --> 00:06:54,180
follow that link that's on the display

153
00:06:54,180 --> 00:06:56,780
there and buy that

154
00:06:56,780 --> 00:07:00,000
it may seem somewhat costly but it will

155
00:07:00,000 --> 00:07:02,120
save you a lot of money in the long run

156
00:07:02,120 --> 00:07:05,580
and some of my favorite tools from this

157
00:07:05,580 --> 00:07:08,400
kit are the little opening

158
00:07:08,400 --> 00:07:11,819
picks the little blue triangles and then

159
00:07:11,819 --> 00:07:14,520
several of those little flat opening

160
00:07:14,520 --> 00:07:17,460
tools are very helpful for breaking

161
00:07:17,460 --> 00:07:19,680
apart the seals on some of those plastic

162
00:07:19,680 --> 00:07:23,180
components that you'll find in closing

163
00:07:23,180 --> 00:07:26,099
many of your electronic devices that

164
00:07:26,099 --> 00:07:27,800
you're going to want to hack

165
00:07:27,800 --> 00:07:29,940
lastly you're certainly going to need

166
00:07:29,940 --> 00:07:31,560
some tweezers or pliers because

167
00:07:31,560 --> 00:07:34,319
everything in Hardware is getting

168
00:07:34,319 --> 00:07:36,599
smaller and smaller and smaller and so

169
00:07:36,599 --> 00:07:39,000
you almost can't have enough tiny little

170
00:07:39,000 --> 00:07:42,380
bitty tools when when you get down to it

171
00:07:42,380 --> 00:07:45,479
and I highly recommend to invest in a

172
00:07:45,479 --> 00:07:47,520
heat gun which is different than a

173
00:07:47,520 --> 00:07:50,280
soldering iron a heat gun just blows hot

174
00:07:50,280 --> 00:07:52,400
air and it's usually

175
00:07:52,400 --> 00:07:55,080
tunable based on the temperature of the

176
00:07:55,080 --> 00:07:58,319
air that you want to have it produce so

177
00:07:58,319 --> 00:08:01,319
that you don't fry components but it's

178
00:08:01,319 --> 00:08:04,860
helpful for heating up multiple pins at

179
00:08:04,860 --> 00:08:07,560
a time so that you can lift a chip off

180
00:08:07,560 --> 00:08:08,940
of a board

181
00:08:08,940 --> 00:08:12,180
next you're going to need some tools to

182
00:08:12,180 --> 00:08:14,099
interact with the electronic components

183
00:08:14,099 --> 00:08:17,460
themselves and there are so many

184
00:08:17,460 --> 00:08:20,220
different types of gadgets that you can

185
00:08:20,220 --> 00:08:23,879
get for interacting with electronics and

186
00:08:23,879 --> 00:08:26,220
and doing Hardware hacking many of these

187
00:08:26,220 --> 00:08:29,879
tools will simplify the process or

188
00:08:29,879 --> 00:08:32,880
combine multiple capabilities into one

189
00:08:32,880 --> 00:08:35,339
tool some of them can actually get quite

190
00:08:35,339 --> 00:08:36,679
expensive

191
00:08:36,679 --> 00:08:39,799
so what we're going to focus on today

192
00:08:39,799 --> 00:08:42,779
are the essential tools that we're going

193
00:08:42,779 --> 00:08:45,959
to need to read from Spy Flash and I

194
00:08:45,959 --> 00:08:48,720
have intentionally structured this to

195
00:08:48,720 --> 00:08:52,320
use low-cost Parts if you've done any

196
00:08:52,320 --> 00:08:54,680
sorts of Arduino

197
00:08:54,680 --> 00:08:58,160
iot embedded system

198
00:08:58,160 --> 00:09:01,560
electronic tinkering then you may have a

199
00:09:01,560 --> 00:09:04,380
lot of this lying around if you don't

200
00:09:04,380 --> 00:09:06,540
you can order most of the stuff off of

201
00:09:06,540 --> 00:09:10,200
Amazon or my favorite site for ordering

202
00:09:10,200 --> 00:09:12,600
this stuff is adafruit.com

203
00:09:12,600 --> 00:09:16,200
and um you know they're geared towards

204
00:09:16,200 --> 00:09:19,200
Hardware hackers and tinkerers and so a

205
00:09:19,200 --> 00:09:21,959
lot of their stuff is very user friendly

206
00:09:21,959 --> 00:09:23,880
from our perspective

207
00:09:23,880 --> 00:09:27,019
so what we'll need today to get started

208
00:09:27,019 --> 00:09:31,440
is an Arduino with a USB cable

209
00:09:31,440 --> 00:09:34,440
we will need an eight pin breakout board

210
00:09:34,440 --> 00:09:37,680
which is uh this little thing at the

211
00:09:37,680 --> 00:09:39,300
bottom left hand corner that you can see

212
00:09:39,300 --> 00:09:41,720
there the blue board with the tweezers

213
00:09:41,720 --> 00:09:45,420
and that's someone placing a spy flash

214
00:09:45,420 --> 00:09:49,140
chip on one of these breakout boards and

215
00:09:49,140 --> 00:09:51,720
we'll we'll use that to make it more

216
00:09:51,720 --> 00:09:53,820
accessible

217
00:09:53,820 --> 00:09:56,339
and not have to worry about burning the

218
00:09:56,339 --> 00:09:58,380
pins on our Chip And that's pretty

219
00:09:58,380 --> 00:10:00,720
important especially if you have like

220
00:10:00,720 --> 00:10:03,360
only one of the device that you're

221
00:10:03,360 --> 00:10:05,580
wanting to hack you certainly don't want

222
00:10:05,580 --> 00:10:08,100
to damage the chip if you can help it

223
00:10:08,100 --> 00:10:11,760
and so it's easy if you are trying to

224
00:10:11,760 --> 00:10:15,360
either solder or clip directly onto the

225
00:10:15,360 --> 00:10:17,180
Spy flash pins

226
00:10:17,180 --> 00:10:21,060
to break them off and that's that's

227
00:10:21,060 --> 00:10:23,279
tragic and so

228
00:10:23,279 --> 00:10:25,920
these eight pin breakout boards are very

229
00:10:25,920 --> 00:10:28,740
helpful you just solder your chip to

230
00:10:28,740 --> 00:10:31,080
that board and then you have much more

231
00:10:31,080 --> 00:10:35,519
accessible pins that you can connect to

232
00:10:35,519 --> 00:10:38,339
which we will try to use jumper wires

233
00:10:38,339 --> 00:10:41,160
any what anytime we can to make our

234
00:10:41,160 --> 00:10:45,300
solution more portable and flexible

235
00:10:45,300 --> 00:10:48,720
and we'll need a break a breadboard

236
00:10:48,720 --> 00:10:51,360
you will need a solder gun a solder only

237
00:10:51,360 --> 00:10:54,420
to remove the Spy flash chip and then

238
00:10:54,420 --> 00:10:56,220
solder it to your eight pin breakout

239
00:10:56,220 --> 00:10:57,120
board

240
00:10:57,120 --> 00:10:59,279
and then you'll need a Mac Linux or

241
00:10:59,279 --> 00:11:02,600
Windows PC to run the Arduino software

242
00:11:02,600 --> 00:11:06,420
and connect to the Arduino and

243
00:11:06,420 --> 00:11:09,360
ultimately read and display the contents

244
00:11:09,360 --> 00:11:12,720
of the Spy flash at a high level the

245
00:11:12,720 --> 00:11:16,019
process for reading the the Spy flash

246
00:11:16,019 --> 00:11:17,339
contents that we're going to go through

247
00:11:17,339 --> 00:11:18,500
today

248
00:11:18,500 --> 00:11:22,920
involves some basic Recon then removing

249
00:11:22,920 --> 00:11:24,620
the Spy flash chip from the device

250
00:11:24,620 --> 00:11:28,079
reading the Spy flash contents and then

251
00:11:28,079 --> 00:11:30,540
making sense of what we have read from

252
00:11:30,540 --> 00:11:31,740
the device

253
00:11:31,740 --> 00:11:35,339
these are super high level steps some of

254
00:11:35,339 --> 00:11:37,440
those have some sub steps and but we'll

255
00:11:37,440 --> 00:11:39,180
go into each of those here in a minute

256
00:11:39,180 --> 00:11:42,240
but at a high level this is the process

257
00:11:42,240 --> 00:11:43,860
that we're going to follow and we'll

258
00:11:43,860 --> 00:11:46,500
demonstrate each of these steps as we go

259
00:11:46,500 --> 00:11:47,760
through

260
00:11:47,760 --> 00:11:50,700
the first step is some basic

261
00:11:50,700 --> 00:11:54,480
reconnaissance and you can do some

262
00:11:54,480 --> 00:11:58,200
things like look up the FCC ID of your

263
00:11:58,200 --> 00:12:03,060
device at a website called scc.io and on

264
00:12:03,060 --> 00:12:05,579
that website you can find FCC filings

265
00:12:05,579 --> 00:12:08,100
which a lot of times will include

266
00:12:08,100 --> 00:12:11,519
pictures of the outside and inside of

267
00:12:11,519 --> 00:12:14,399
the device and a lot of times I'll start

268
00:12:14,399 --> 00:12:17,459
with that but sometimes I will just

269
00:12:17,459 --> 00:12:20,579
start by opening up my device and poking

270
00:12:20,579 --> 00:12:22,800
around taking a look if we're looking

271
00:12:22,800 --> 00:12:25,380
for spy Flash in particular

272
00:12:25,380 --> 00:12:28,500
as I mentioned before it will usually be

273
00:12:28,500 --> 00:12:30,600
a eight pin

274
00:12:30,600 --> 00:12:33,839
form factor and so I will usually just

275
00:12:33,839 --> 00:12:36,720
start by using my solder gun or heat gun

276
00:12:36,720 --> 00:12:41,040
to remove these RF Shields

277
00:12:41,040 --> 00:12:43,380
and then under there are some chips and

278
00:12:43,380 --> 00:12:46,380
I'll basically just grab the model

279
00:12:46,380 --> 00:12:48,959
number part number off of all the eight

280
00:12:48,959 --> 00:12:52,880
pin chips and then Google them and

281
00:12:52,880 --> 00:12:55,680
determine what they are and and it's

282
00:12:55,680 --> 00:12:57,600
usually pretty easy to find

283
00:12:57,600 --> 00:12:59,820
uh this is the device that we're going

284
00:12:59,820 --> 00:13:01,620
to be testing today I'm not going to

285
00:13:01,620 --> 00:13:04,200
mention the manufacturer not that I have

286
00:13:04,200 --> 00:13:06,480
found any problems with it but just out

287
00:13:06,480 --> 00:13:08,399
of respect for them

288
00:13:08,399 --> 00:13:10,019
and uh

289
00:13:10,019 --> 00:13:12,959
and so I did exactly that I I looked up

290
00:13:12,959 --> 00:13:14,760
all the eight pin

291
00:13:14,760 --> 00:13:17,220
chip part numbers that I found on this

292
00:13:17,220 --> 00:13:20,180
and found a win Bond

293
00:13:20,180 --> 00:13:23,220
spy flash chip and this is the

294
00:13:23,220 --> 00:13:27,899
Department of w25q 256 JV and this is

295
00:13:27,899 --> 00:13:31,320
off the win Bond website and I will

296
00:13:31,320 --> 00:13:33,600
actually

297
00:13:33,600 --> 00:13:38,579
pull up the data sheet for this

298
00:13:38,579 --> 00:13:41,519
and as you can see uh

299
00:13:41,519 --> 00:13:46,800
3 volt 256 megabit

300
00:13:46,800 --> 00:13:49,500
flash memory you'll notice it says here

301
00:13:49,500 --> 00:13:53,160
it does dual and quad SPI those are more

302
00:13:53,160 --> 00:13:55,380
advanced we're not going to deal with

303
00:13:55,380 --> 00:13:58,139
those today usually what you'll find is

304
00:13:58,139 --> 00:14:00,720
chips will support this in any modern

305
00:14:00,720 --> 00:14:03,839
system but most of the time these are

306
00:14:03,839 --> 00:14:05,940
optional they also will support just

307
00:14:05,940 --> 00:14:07,160
standard

308
00:14:07,160 --> 00:14:08,700
SPI

309
00:14:08,700 --> 00:14:11,459
one key bit of information to grab from

310
00:14:11,459 --> 00:14:13,500
this data sheet

311
00:14:13,500 --> 00:14:17,940
is that the chip operates on

312
00:14:17,940 --> 00:14:20,519
3.3 volts

313
00:14:20,519 --> 00:14:23,339
so especially when you're dealing with

314
00:14:23,339 --> 00:14:25,920
like arduinos and stuff usually you'll

315
00:14:25,920 --> 00:14:28,620
find things will work either 3.3 volts

316
00:14:28,620 --> 00:14:32,040
or 5 volts and so some of these spy

317
00:14:32,040 --> 00:14:34,019
flash chips will actually be five volt

318
00:14:34,019 --> 00:14:36,959
chips and some of these will operate at

319
00:14:36,959 --> 00:14:39,720
3.3 volts and it's pretty important to

320
00:14:39,720 --> 00:14:43,260
identify which is which for your

321
00:14:43,260 --> 00:14:45,420
particular chip because if you try to

322
00:14:45,420 --> 00:14:50,940
supply a 5 volt uh Supply to a 3.3 volt

323
00:14:50,940 --> 00:14:52,440
chip obviously you run a pretty good

324
00:14:52,440 --> 00:14:55,459
chance of frying it

325
00:14:56,459 --> 00:14:58,920
some other stuff

326
00:14:58,920 --> 00:15:00,600
to go back up here just the table

327
00:15:00,600 --> 00:15:03,260
contents

328
00:15:03,899 --> 00:15:07,019
is the PIN descriptions and the pin out

329
00:15:07,019 --> 00:15:09,779
so let me scroll up as you can see here

330
00:15:09,779 --> 00:15:11,339
this applies to a few different form

331
00:15:11,339 --> 00:15:16,220
factors this is ours right here

332
00:15:16,320 --> 00:15:20,339
eight pins and uh if you haven't done

333
00:15:20,339 --> 00:15:22,740
much with Hardware we'll cover a few

334
00:15:22,740 --> 00:15:24,899
things this little circle at the top

335
00:15:24,899 --> 00:15:28,019
denotes pin one and so this is pretty

336
00:15:28,019 --> 00:15:32,220
standard for an eight pin package top

337
00:15:32,220 --> 00:15:33,240
left

338
00:15:33,240 --> 00:15:35,279
one two three four

339
00:15:35,279 --> 00:15:38,639
and then five six seven eight and

340
00:15:38,639 --> 00:15:40,639
um

341
00:15:40,920 --> 00:15:42,779
down below here we can see what each of

342
00:15:42,779 --> 00:15:45,720
those pins does and so I had mentioned

343
00:15:45,720 --> 00:15:48,600
in the beginning that most of the time

344
00:15:48,600 --> 00:15:51,120
the Spy flash chips will operate with

345
00:15:51,120 --> 00:15:54,000
four pins four wires

346
00:15:54,000 --> 00:15:56,940
and what those four are is the chip

347
00:15:56,940 --> 00:15:58,079
select

348
00:15:58,079 --> 00:16:01,380
which basically you can have actually

349
00:16:01,380 --> 00:16:04,680
multiple spy flash chips attached in a

350
00:16:04,680 --> 00:16:09,740
chain to one quote-unquote spy master

351
00:16:09,740 --> 00:16:13,620
and so what the chip select pin does is

352
00:16:13,620 --> 00:16:15,839
let the spine master

353
00:16:15,839 --> 00:16:19,980
tell each spy slave which in this case

354
00:16:19,980 --> 00:16:22,920
would be the Spy flash chip hey

355
00:16:22,920 --> 00:16:25,440
I want to talk to you now and then when

356
00:16:25,440 --> 00:16:27,260
it's done talking to that device it can

357
00:16:27,260 --> 00:16:30,060
remove the voltage from that chip select

358
00:16:30,060 --> 00:16:31,800
pin and then it'll

359
00:16:31,800 --> 00:16:32,940
uh

360
00:16:32,940 --> 00:16:35,220
activated on another chip

361
00:16:35,220 --> 00:16:38,279
for our intents and purposes usually we

362
00:16:38,279 --> 00:16:41,660
will not see multiple chips in a series

363
00:16:41,660 --> 00:16:45,959
or you know chained together on a spy

364
00:16:45,959 --> 00:16:49,440
Master but we will still need to

365
00:16:49,440 --> 00:16:52,980
deal with this chip select pin

366
00:16:52,980 --> 00:16:56,880
the other wires are data in data out

367
00:16:56,880 --> 00:16:59,880
so for our use case we're only going to

368
00:16:59,880 --> 00:17:03,240
be doing normal spy which is two dated

369
00:17:03,240 --> 00:17:05,939
one data in one data out if you start

370
00:17:05,939 --> 00:17:09,720
doing dual and quad spy you can use

371
00:17:09,720 --> 00:17:13,799
additional data channels but we will not

372
00:17:13,799 --> 00:17:16,260
need that for our purposes

373
00:17:16,260 --> 00:17:20,459
and then the other of the four wires

374
00:17:20,459 --> 00:17:22,619
that I mentioned is actually the clock

375
00:17:22,619 --> 00:17:24,119
and so

376
00:17:24,119 --> 00:17:28,500
spy is a Serial a synchronous serial

377
00:17:28,500 --> 00:17:31,980
protocol and by synchronous we mean both

378
00:17:31,980 --> 00:17:35,700
ends need to share a common clock

379
00:17:35,700 --> 00:17:39,660
because they use the rise and fall of a

380
00:17:39,660 --> 00:17:42,240
wave pattern on that clock line to

381
00:17:42,240 --> 00:17:45,059
determine when to

382
00:17:45,059 --> 00:17:50,039
start and finish reading by bits off of

383
00:17:50,039 --> 00:17:51,419
that string

384
00:17:51,419 --> 00:17:54,360
and so that's what the clock line

385
00:17:54,360 --> 00:17:55,740
provides

386
00:17:55,740 --> 00:17:58,200
now so that was four pins we will

387
00:17:58,200 --> 00:18:00,480
actually hook up the other four pins

388
00:18:00,480 --> 00:18:03,240
it's an eight pin package we will hook

389
00:18:03,240 --> 00:18:05,039
those up and we'll take a look at what

390
00:18:05,039 --> 00:18:08,460
those do here in a minute but the four

391
00:18:08,460 --> 00:18:12,660
wires that are essential to the spine

392
00:18:12,660 --> 00:18:14,039
protocol

393
00:18:14,039 --> 00:18:16,280
are the four we mentioned chip select

394
00:18:16,280 --> 00:18:20,520
data in data out and clock

395
00:18:20,520 --> 00:18:25,200
so the write protect is used basically

396
00:18:25,200 --> 00:18:28,200
as it says it's used to prevent you from

397
00:18:28,200 --> 00:18:32,280
overriding the contents hold or reset

398
00:18:32,280 --> 00:18:34,380
which in a lot of cases will occupy the

399
00:18:34,380 --> 00:18:38,160
same pin are used to basically tell the

400
00:18:38,160 --> 00:18:42,140
chip to pause

401
00:18:42,299 --> 00:18:45,419
or not pause as the case may be

402
00:18:45,419 --> 00:18:50,160
and then we will see go back up here

403
00:18:50,160 --> 00:18:52,320
so that is six of the eight and then of

404
00:18:52,320 --> 00:18:55,020
course the other two VCC that's voltage

405
00:18:55,020 --> 00:18:58,380
in so in this case that's 3.3 volts in

406
00:18:58,380 --> 00:19:01,460
and ground

407
00:19:01,919 --> 00:19:03,419
and there's lots of other useful

408
00:19:03,419 --> 00:19:06,059
information in these data sheets

409
00:19:06,059 --> 00:19:09,299
I will go here to

410
00:19:09,299 --> 00:19:11,340
one in particular because we're going to

411
00:19:11,340 --> 00:19:13,919
use it and that is the read data

412
00:19:13,919 --> 00:19:16,500
instruction so as you can see here it

413
00:19:16,500 --> 00:19:18,419
gets kind of complicated if you really

414
00:19:18,419 --> 00:19:22,679
dive into the details but we can tell

415
00:19:22,679 --> 00:19:24,539
the Spy Flash

416
00:19:24,539 --> 00:19:27,900
uh to do a whole lot of different things

417
00:19:27,900 --> 00:19:29,760
today all we're going to do is say hey

418
00:19:29,760 --> 00:19:32,880
we want to read some data and so what

419
00:19:32,880 --> 00:19:34,860
that means is we are going to send it an

420
00:19:34,860 --> 00:19:36,179
instruction

421
00:19:36,179 --> 00:19:37,799
and that instruction is going to be

422
00:19:37,799 --> 00:19:40,620
indicated by the number three

423
00:19:40,620 --> 00:19:42,900
and uh

424
00:19:42,900 --> 00:19:44,520
you can read some details here about

425
00:19:44,520 --> 00:19:47,760
about how that works if you want and as

426
00:19:47,760 --> 00:19:49,440
you dive into this

427
00:19:49,440 --> 00:19:51,960
some of these details are interesting

428
00:19:51,960 --> 00:19:53,880
certainly as you get into Hardware

429
00:19:53,880 --> 00:19:56,580
hacking it's one of those things that

430
00:19:56,580 --> 00:19:58,860
can be a rabbit hole but it can be a lot

431
00:19:58,860 --> 00:20:01,380
of fun and so I would definitely

432
00:20:01,380 --> 00:20:03,299
encourage you to

433
00:20:03,299 --> 00:20:05,460
pick up on as much of the stuff as you

434
00:20:05,460 --> 00:20:07,980
can and the stuff that you don't quite

435
00:20:07,980 --> 00:20:11,640
pick up on just uh you know just kind of

436
00:20:11,640 --> 00:20:13,559
keep it in the back of your mind and

437
00:20:13,559 --> 00:20:14,940
eventually

438
00:20:14,940 --> 00:20:17,700
stuff will start to click and that that

439
00:20:17,700 --> 00:20:20,880
is valuable background knowledge that

440
00:20:20,880 --> 00:20:25,260
you can use for other hacking targets

441
00:20:25,260 --> 00:20:27,660
now that we have a basic understanding

442
00:20:27,660 --> 00:20:29,700
of the Spy flash technical

443
00:20:29,700 --> 00:20:32,220
specifications and pin out

444
00:20:32,220 --> 00:20:34,799
we're ready to remove it from the

445
00:20:34,799 --> 00:20:37,620
hardware device and put it on our

446
00:20:37,620 --> 00:20:40,679
breakout board so we can hook it up to

447
00:20:40,679 --> 00:20:42,960
our Arduino

448
00:20:42,960 --> 00:20:45,360
the process of removing it from the

449
00:20:45,360 --> 00:20:46,440
hardware device is pretty

450
00:20:46,440 --> 00:20:48,600
straightforward you can either use a

451
00:20:48,600 --> 00:20:51,299
soldering iron or a heat gun if you use

452
00:20:51,299 --> 00:20:55,280
a soldering iron basically just

453
00:20:55,280 --> 00:20:59,400
apply heat to each pin individually and

454
00:20:59,400 --> 00:21:02,580
use a pair of tweezers to to gently lift

455
00:21:02,580 --> 00:21:05,820
the pin up as you are heating the solder

456
00:21:05,820 --> 00:21:08,520
if you use a heat gun which is probably

457
00:21:08,520 --> 00:21:11,580
the preferred way you will basically do

458
00:21:11,580 --> 00:21:15,120
one side at a time so all four pins you

459
00:21:15,120 --> 00:21:17,820
want to use a nozzle size on the heat

460
00:21:17,820 --> 00:21:22,440
gun that hits those four pins and not

461
00:21:22,440 --> 00:21:26,039
much else and then you just hold the the

462
00:21:26,039 --> 00:21:28,260
IC on either side with a pair of

463
00:21:28,260 --> 00:21:32,100
tweezers apply heat to the four pins on

464
00:21:32,100 --> 00:21:37,200
one side and gently tilt the IC up then

465
00:21:37,200 --> 00:21:39,960
remove the Heat and do the same thing on

466
00:21:39,960 --> 00:21:42,720
the other side and it will be free this

467
00:21:42,720 --> 00:21:46,799
is is a close-up of a device that I'm

468
00:21:46,799 --> 00:21:48,240
testing on

469
00:21:48,240 --> 00:21:51,380
and basically as you can see here I have

470
00:21:51,380 --> 00:21:54,600
removed these fly flash chip from this

471
00:21:54,600 --> 00:21:58,200
socket right here I have wired jumper

472
00:21:58,200 --> 00:22:01,620
wires onto each of the pins

473
00:22:01,620 --> 00:22:05,280
so that I can attach my spy flash chip

474
00:22:05,280 --> 00:22:08,220
to this device without having to

475
00:22:08,220 --> 00:22:11,340
re-solder it back into the device and

476
00:22:11,340 --> 00:22:14,460
the reason I do that is in some cases

477
00:22:14,460 --> 00:22:17,159
when I run into trouble like reading

478
00:22:17,159 --> 00:22:19,740
from The Flash or I'm not getting what I

479
00:22:19,740 --> 00:22:21,960
expect maybe I can read from the Spy

480
00:22:21,960 --> 00:22:24,840
flash but the data that I see is not

481
00:22:24,840 --> 00:22:26,820
what I would expect to see

482
00:22:26,820 --> 00:22:29,520
then the question becomes is it corrupt

483
00:22:29,520 --> 00:22:32,220
or has I have I fried it have I done

484
00:22:32,220 --> 00:22:34,500
something in the process of reading it

485
00:22:34,500 --> 00:22:37,679
to damage it and so being able to hook

486
00:22:37,679 --> 00:22:41,159
it into the original device quickly and

487
00:22:41,159 --> 00:22:44,940
easily gives me a way to test basically

488
00:22:44,940 --> 00:22:48,539
a smoke test of does this device work at

489
00:22:48,539 --> 00:22:50,100
all or not

490
00:22:50,100 --> 00:22:52,260
now let's take a look at how we ensure

491
00:22:52,260 --> 00:22:55,020
that we attach the

492
00:22:55,020 --> 00:22:58,140
spy flash to our breakout board in the

493
00:22:58,140 --> 00:23:00,900
correct orientation so that we get the

494
00:23:00,900 --> 00:23:03,840
pin mappings correct and when we're

495
00:23:03,840 --> 00:23:06,000
finished with this process our end

496
00:23:06,000 --> 00:23:09,179
product should be a mapping of the

497
00:23:09,179 --> 00:23:13,320
colored wire to the pin function so on

498
00:23:13,320 --> 00:23:15,179
the left hand side this is the data

499
00:23:15,179 --> 00:23:17,880
sheet that we took a look at earlier and

500
00:23:17,880 --> 00:23:20,400
we can see from the pin out that for

501
00:23:20,400 --> 00:23:24,600
example pin one is cable uh is Chip

502
00:23:24,600 --> 00:23:28,440
select and so we want to ensure that we

503
00:23:28,440 --> 00:23:31,140
identify pin one correctly on our spy

504
00:23:31,140 --> 00:23:33,720
flash chip and that we map that to the

505
00:23:33,720 --> 00:23:37,140
correct color and and have that mapping

506
00:23:37,140 --> 00:23:41,220
for the next step so the first phase of

507
00:23:41,220 --> 00:23:43,380
this process is to identify pin one

508
00:23:43,380 --> 00:23:45,179
which in this case is pretty

509
00:23:45,179 --> 00:23:47,880
straightforward you're looking for the

510
00:23:47,880 --> 00:23:49,460
circle

511
00:23:49,460 --> 00:23:52,919
on the physical chip

512
00:23:52,919 --> 00:23:56,159
and you will note that on the eight pin

513
00:23:56,159 --> 00:23:58,200
breakout board pin one is clearly

514
00:23:58,200 --> 00:24:01,679
denoted and so as long as the circle on

515
00:24:01,679 --> 00:24:06,120
the physical spy flash chip is aligned

516
00:24:06,120 --> 00:24:08,720
with the pin one

517
00:24:08,720 --> 00:24:11,760
marking on the breakout board

518
00:24:11,760 --> 00:24:14,280
you should be good there the next step

519
00:24:14,280 --> 00:24:16,620
is to correlate that to which of the

520
00:24:16,620 --> 00:24:19,320
pins on the breakout board

521
00:24:19,320 --> 00:24:21,960
the jumpers are connected to and that's

522
00:24:21,960 --> 00:24:23,760
also pretty straightforward as you'll

523
00:24:23,760 --> 00:24:27,240
notice in the upper picture on the right

524
00:24:27,240 --> 00:24:29,880
in the empty breakout board at the top

525
00:24:29,880 --> 00:24:32,220
left of that empty breakout board is a

526
00:24:32,220 --> 00:24:35,039
little circle emblem and that denotes

527
00:24:35,039 --> 00:24:37,700
pin one

528
00:24:37,740 --> 00:24:41,580
so what I normally do is take a blank

529
00:24:41,580 --> 00:24:44,700
piece of printer paper draw my device a

530
00:24:44,700 --> 00:24:46,919
little square with eight legs

531
00:24:46,919 --> 00:24:50,400
and I just map them one to one to one

532
00:24:50,400 --> 00:24:53,700
okay two to two to two

533
00:24:53,700 --> 00:24:57,980
three three four to four to four

534
00:25:07,020 --> 00:25:08,640
simple as that

535
00:25:08,640 --> 00:25:10,559
and this is something that you want to

536
00:25:10,559 --> 00:25:12,299
take your time with

537
00:25:12,299 --> 00:25:15,120
it may be kind of tedious but if there's

538
00:25:15,120 --> 00:25:17,340
any step in this process that you want

539
00:25:17,340 --> 00:25:20,159
to be a little bit tedious it's this

540
00:25:20,159 --> 00:25:22,020
step you want to get this right and

541
00:25:22,020 --> 00:25:23,460
everything else will pretty much fall

542
00:25:23,460 --> 00:25:24,900
into place

543
00:25:24,900 --> 00:25:27,779
so at this point I have a mapping white

544
00:25:27,779 --> 00:25:32,120
is Chip select blue is

545
00:25:32,120 --> 00:25:34,700
data in

546
00:25:34,700 --> 00:25:38,279
brown is Right protect black is ground

547
00:25:38,279 --> 00:25:41,520
now I'm going to move up the other way

548
00:25:41,520 --> 00:25:45,480
and this actually goes pin 8

549
00:25:45,480 --> 00:25:48,480
765

550
00:25:49,200 --> 00:25:50,820
so

551
00:25:50,820 --> 00:25:53,520
red is VCC

552
00:25:53,520 --> 00:25:55,799
gray is

553
00:25:55,799 --> 00:25:59,179
hold and reset

554
00:26:00,120 --> 00:26:02,159
yellow is my clock and green is my other

555
00:26:02,159 --> 00:26:04,320
data cable so

556
00:26:04,320 --> 00:26:06,419
once we have that mapping we're ready to

557
00:26:06,419 --> 00:26:09,380
move to the next step

558
00:26:18,419 --> 00:26:23,220
that is all there is to uh removing the

559
00:26:23,220 --> 00:26:26,039
Spy flash chip from the device and

560
00:26:26,039 --> 00:26:29,700
preparing it to be read using my Arduino

561
00:26:29,700 --> 00:26:30,720
device

562
00:26:30,720 --> 00:26:33,720
so just to kind of recap basically we

563
00:26:33,720 --> 00:26:35,000
have

564
00:26:35,000 --> 00:26:37,740
physically disassembled our device we

565
00:26:37,740 --> 00:26:40,679
have desoldered the chip we've put the

566
00:26:40,679 --> 00:26:44,760
chip on a eight pin breakout board and

567
00:26:44,760 --> 00:26:48,000
then we have connected jumper wires to

568
00:26:48,000 --> 00:26:50,820
the pin outs on our breakout board

569
00:26:50,820 --> 00:26:55,080
and then we have use the the data sheet

570
00:26:55,080 --> 00:26:59,340
wiring pin out guide to determine which

571
00:26:59,340 --> 00:27:01,860
color of our jumper cables relates to

572
00:27:01,860 --> 00:27:07,620
which pin function on our spy flash chip

573
00:27:07,620 --> 00:27:10,080
and with that we are now ready to read

574
00:27:10,080 --> 00:27:13,380
the contents of The Flash and so as you

575
00:27:13,380 --> 00:27:15,900
see depicted in this picture we don't

576
00:27:15,900 --> 00:27:18,840
need much all I have is an Arduino a

577
00:27:18,840 --> 00:27:22,980
breadboard and my spy flash chip which

578
00:27:22,980 --> 00:27:24,600
is attached to that breakout board

579
00:27:24,600 --> 00:27:28,679
simply to make it easier to access the

580
00:27:28,679 --> 00:27:30,000
pins

581
00:27:30,000 --> 00:27:32,520
now obviously it's a little difficult to

582
00:27:32,520 --> 00:27:34,320
tell from this picture what's plugged

583
00:27:34,320 --> 00:27:36,659
into what so

584
00:27:36,659 --> 00:27:39,179
this diagram and I can't take credit

585
00:27:39,179 --> 00:27:41,039
I've I have to give credit here to

586
00:27:41,039 --> 00:27:43,559
someone else this diagram is extremely

587
00:27:43,559 --> 00:27:46,159
helpful if there's any

588
00:27:46,159 --> 00:27:48,240
reference that you take from this

589
00:27:48,240 --> 00:27:51,419
presentation I would take this URL and

590
00:27:51,419 --> 00:27:53,700
bookmark it as you can see on the left

591
00:27:53,700 --> 00:27:56,480
we have the Arduino on the right we have

592
00:27:56,480 --> 00:28:00,960
the breadboard with our spy flash chip

593
00:28:00,960 --> 00:28:08,279
so the red wires are VCC of 3.3 volts

594
00:28:08,279 --> 00:28:10,080
positive

595
00:28:10,080 --> 00:28:14,640
coming from our Arduino the blue wire is

596
00:28:14,640 --> 00:28:17,880
or the blue lines are ground

597
00:28:17,880 --> 00:28:22,020
and so as you can see we have several

598
00:28:22,020 --> 00:28:25,260
pins are attached to

599
00:28:25,260 --> 00:28:29,159
to VCC positive so starting at the top

600
00:28:29,159 --> 00:28:31,620
left the green one

601
00:28:31,620 --> 00:28:35,000
that's one two three four so pin three

602
00:28:35,000 --> 00:28:38,580
is connected directly to

603
00:28:38,580 --> 00:28:40,620
VCC

604
00:28:40,620 --> 00:28:43,320
3.3 volts and if you recall from our pin

605
00:28:43,320 --> 00:28:48,720
out that is the right protect pin

606
00:28:48,720 --> 00:28:51,779
at the top right that was the VCC pin

607
00:28:51,779 --> 00:28:53,640
that's voltage in obviously that needs

608
00:28:53,640 --> 00:28:57,059
to be connected to VCC and the next one

609
00:28:57,059 --> 00:29:01,740
down is the hold reset pin which if you

610
00:29:01,740 --> 00:29:06,059
recall is what tells the chip to pause

611
00:29:06,059 --> 00:29:09,120
or not and so if it has voltage applied

612
00:29:09,120 --> 00:29:12,539
it does not pause if voltage is not

613
00:29:12,539 --> 00:29:15,720
applied to that pin then the Spy flash

614
00:29:15,720 --> 00:29:17,880
chip will actually not perform any

615
00:29:17,880 --> 00:29:20,940
instructions we tell it to do which of

616
00:29:20,940 --> 00:29:23,640
course is not what we're going for here

617
00:29:23,640 --> 00:29:26,580
so we go ahead and wire all three of

618
00:29:26,580 --> 00:29:30,659
those to VCC

619
00:29:30,659 --> 00:29:34,380
and then the blue wire is ground so that

620
00:29:34,380 --> 00:29:39,960
leaves us with uh one two three four

621
00:29:39,960 --> 00:29:44,460
five no just one two three four pins

622
00:29:44,460 --> 00:29:48,659
left which are our four uh wires that we

623
00:29:48,659 --> 00:29:50,580
mentioned at the very beginning chip

624
00:29:50,580 --> 00:29:55,020
select data in data out and clock

625
00:29:55,020 --> 00:29:59,720
so now we're going to take a look at

626
00:30:00,260 --> 00:30:02,940
the code that we're going to put into

627
00:30:02,940 --> 00:30:07,020
our Arduino to read off of these two off

628
00:30:07,020 --> 00:30:09,659
of this spy flash chip before I move on

629
00:30:09,659 --> 00:30:11,480
though I am going to point out

630
00:30:11,480 --> 00:30:16,080
the uh the pin the PIN numbers on the

631
00:30:16,080 --> 00:30:19,440
Arduino that those wires are connected

632
00:30:19,440 --> 00:30:22,500
to actually do matter so we need to know

633
00:30:22,500 --> 00:30:27,980
that chip select is plugged into pin X

634
00:30:27,980 --> 00:30:31,320
data n is plugged into pin y

635
00:30:31,320 --> 00:30:34,679
clock is plugged into pin Z and we'll

636
00:30:34,679 --> 00:30:36,120
take a look at what those PIN numbers

637
00:30:36,120 --> 00:30:37,620
are here in a second I actually don't

638
00:30:37,620 --> 00:30:38,580
remember

639
00:30:38,580 --> 00:30:43,340
but the what what you'll see is the code

640
00:30:43,340 --> 00:30:47,640
corresponds to this diagram so if you

641
00:30:47,640 --> 00:30:49,919
wire it up as is depicted in this

642
00:30:49,919 --> 00:30:51,840
diagram the code I'm about to

643
00:30:51,840 --> 00:30:54,179
demonstrate will work for your spot

644
00:30:54,179 --> 00:30:57,380
flash chip assuming it follows the same

645
00:30:57,380 --> 00:31:01,020
pin out as this particular chip does

646
00:31:01,020 --> 00:31:03,899
now that we have our spy flash chip

647
00:31:03,899 --> 00:31:06,899
wired up to our Arduino

648
00:31:06,899 --> 00:31:09,419
we will take a look at the code that

649
00:31:09,419 --> 00:31:11,220
we're going to program into our Arduino

650
00:31:11,220 --> 00:31:14,580
to read that spy flash contents

651
00:31:14,580 --> 00:31:17,340
and you can do this on a Mac Linux or PC

652
00:31:17,340 --> 00:31:20,700
basically you just go to arduino.cc

653
00:31:20,700 --> 00:31:23,460
download the little Arduino development

654
00:31:23,460 --> 00:31:26,100
environment and you can paste this code

655
00:31:26,100 --> 00:31:28,580
in there

656
00:31:28,679 --> 00:31:32,460
we will start by using the including the

657
00:31:32,460 --> 00:31:35,880
spy.h library this provides some basic

658
00:31:35,880 --> 00:31:39,360
functionality for spy communication and

659
00:31:39,360 --> 00:31:42,120
then we'll Define our pin names what

660
00:31:42,120 --> 00:31:44,580
this allows us to do is refer to the

661
00:31:44,580 --> 00:31:48,059
pins by name for ease of reference in

662
00:31:48,059 --> 00:31:50,340
the code but also if we want to change

663
00:31:50,340 --> 00:31:52,980
the pins that the

664
00:31:52,980 --> 00:31:55,980
spy flash is attached to the Arduino on

665
00:31:55,980 --> 00:31:58,799
then we can change it in one place and

666
00:31:58,799 --> 00:32:02,159
it will update throughout the code based

667
00:32:02,159 --> 00:32:05,880
on those macros lastly we Define the

668
00:32:05,880 --> 00:32:08,580
read instruction as the number three and

669
00:32:08,580 --> 00:32:10,679
we'll reference that in the code and we

670
00:32:10,679 --> 00:32:12,360
Define some variables here that we're

671
00:32:12,360 --> 00:32:15,720
going to use later on a quick overview

672
00:32:15,720 --> 00:32:19,559
of Arduino code structure basically

673
00:32:19,559 --> 00:32:22,080
there's two primary functions the setup

674
00:32:22,080 --> 00:32:24,659
function and the loop function the setup

675
00:32:24,659 --> 00:32:26,520
function runs once when the device

676
00:32:26,520 --> 00:32:29,399
powers on and then the loop function is

677
00:32:29,399 --> 00:32:32,279
where you put most of your working code

678
00:32:32,279 --> 00:32:35,760
that's going to run on every cycle of

679
00:32:35,760 --> 00:32:38,460
the microprocessor so in our case we're

680
00:32:38,460 --> 00:32:39,840
going to do a little bit of initial

681
00:32:39,840 --> 00:32:43,020
setup in the setup function

682
00:32:43,020 --> 00:32:45,299
basically we're just going to Define

683
00:32:45,299 --> 00:32:48,240
what the pins do whether they're input

684
00:32:48,240 --> 00:32:50,580
or output we're going to do some initial

685
00:32:50,580 --> 00:32:54,600
spy communication initialization

686
00:32:54,600 --> 00:32:58,919
and then move on into the loop

687
00:32:58,919 --> 00:33:01,320
where most of our functions are going to

688
00:33:01,320 --> 00:33:04,140
happen in the loop basically we are just

689
00:33:04,140 --> 00:33:08,640
reading the contents and dumping them to

690
00:33:08,640 --> 00:33:11,700
a Serial Port the com port on the

691
00:33:11,700 --> 00:33:13,080
Arduino

692
00:33:13,080 --> 00:33:15,480
and in the Arduino environment we can

693
00:33:15,480 --> 00:33:18,600
open the serial monitor which basically

694
00:33:18,600 --> 00:33:21,360
reads the the data that's being dumped

695
00:33:21,360 --> 00:33:25,679
by the Arduino to the com Port over USB

696
00:33:25,679 --> 00:33:28,380
and in our case we are reading each byte

697
00:33:28,380 --> 00:33:30,120
from the

698
00:33:30,120 --> 00:33:35,000
spy flash writing it out in 64 byte rows

699
00:33:35,000 --> 00:33:37,140
and then

700
00:33:37,140 --> 00:33:40,019
printing that to the com port

701
00:33:40,019 --> 00:33:44,880
so by opening the serial monitor we have

702
00:33:44,880 --> 00:33:47,519
we have our output we do want to turn

703
00:33:47,519 --> 00:33:51,360
off timestamps and make sure that we set

704
00:33:51,360 --> 00:33:54,419
the speed of our com port to 115 200

705
00:33:54,419 --> 00:33:59,399
which is what we set it to in the code

706
00:33:59,399 --> 00:34:03,480
then with that going basically we click

707
00:34:03,480 --> 00:34:05,820
at the top right

708
00:34:05,820 --> 00:34:08,159
in the right hand portion of this window

709
00:34:08,159 --> 00:34:11,280
we click at the top left the yellow

710
00:34:11,280 --> 00:34:14,099
circle there basically that uploads our

711
00:34:14,099 --> 00:34:16,918
code to our Arduino and then it

712
00:34:16,918 --> 00:34:19,139
immediately begins to run so when I

713
00:34:19,139 --> 00:34:21,659
click this button it will upload it will

714
00:34:21,659 --> 00:34:24,780
run on my Arduino and then it will start

715
00:34:24,780 --> 00:34:27,480
dumping the contents of the Spy flash to

716
00:34:27,480 --> 00:34:31,699
the serial monitor window on the right

717
00:34:33,000 --> 00:34:36,179
and if you look closely you may notice a

718
00:34:36,179 --> 00:34:39,960
pattern a common pattern to

719
00:34:39,960 --> 00:34:42,719
the layout of this data obviously it's

720
00:34:42,719 --> 00:34:44,580
moving too fast to read the specifics

721
00:34:44,580 --> 00:34:46,800
but if you've done any binary hacking

722
00:34:46,800 --> 00:34:50,060
you may recognize

723
00:34:50,399 --> 00:34:54,179
an overall structure to that blob of

724
00:34:54,179 --> 00:34:56,580
data if not no problem we're going to

725
00:34:56,580 --> 00:34:59,779
take a look here in just a second

726
00:35:00,780 --> 00:35:03,140
so I'm going to go ahead and copy this

727
00:35:03,140 --> 00:35:08,359
and put it in a hex editor

728
00:35:10,980 --> 00:35:13,980
scroll to the top and as you will see

729
00:35:13,980 --> 00:35:16,500
from the header there this is a standard

730
00:35:16,500 --> 00:35:20,460
Linux elf format executable file

731
00:35:20,460 --> 00:35:26,119
which is pretty common for boot loaders

732
00:35:30,000 --> 00:35:33,320
if I scroll down a bit

733
00:35:36,599 --> 00:35:40,280
we'll start to see some

734
00:35:40,500 --> 00:35:44,960
dependency Library references

735
00:35:45,960 --> 00:35:49,040
and so basically

736
00:35:50,280 --> 00:35:53,400
we can get a quick look at this file and

737
00:35:53,400 --> 00:35:55,440
tell what it is in this instance

738
00:35:55,440 --> 00:35:59,480
sometimes it's not quite so easy

739
00:36:01,560 --> 00:36:05,760
if it is a file system for example

740
00:36:05,760 --> 00:36:08,280
it will generally be compressed and so

741
00:36:08,280 --> 00:36:12,000
we won't be able to read a whole lot of

742
00:36:12,000 --> 00:36:16,020
data straight from the raw file

743
00:36:16,020 --> 00:36:19,520
but in this case we luck out

744
00:36:25,320 --> 00:36:27,599
so to wrap things up

745
00:36:27,599 --> 00:36:30,119
how do we make sense of the contents

746
00:36:30,119 --> 00:36:32,460
that we have dumped from our spy flash

747
00:36:32,460 --> 00:36:33,720
chip

748
00:36:33,720 --> 00:36:36,900
well in today's example we could tell

749
00:36:36,900 --> 00:36:38,820
from the header that it was a standard

750
00:36:38,820 --> 00:36:43,260
Linux elf format executable and in a lot

751
00:36:43,260 --> 00:36:45,720
of cases for boot loaders that is

752
00:36:45,720 --> 00:36:47,460
exactly what you'll find

753
00:36:47,460 --> 00:36:50,880
but for other types of devices or other

754
00:36:50,880 --> 00:36:55,320
instances of a spy flash use cases you

755
00:36:55,320 --> 00:36:58,020
may find other file types or entire

756
00:36:58,020 --> 00:37:02,579
entire file systems on the flash chip so

757
00:37:02,579 --> 00:37:04,920
how do you go about determining what

758
00:37:04,920 --> 00:37:07,020
you've pulled off this device if it's

759
00:37:07,020 --> 00:37:09,000
not quite so obvious

760
00:37:09,000 --> 00:37:11,940
well the first tool that I like to use

761
00:37:11,940 --> 00:37:16,260
is the Linux file command if you see

762
00:37:16,260 --> 00:37:18,960
that there is some data there but you

763
00:37:18,960 --> 00:37:20,640
don't know you don't recognize like a

764
00:37:20,640 --> 00:37:23,640
header or magic number then you can use

765
00:37:23,640 --> 00:37:26,820
the file command to quickly determine if

766
00:37:26,820 --> 00:37:30,240
it is some known file type based on the

767
00:37:30,240 --> 00:37:32,339
initial file header

768
00:37:32,339 --> 00:37:35,880
or you can use xxd to Simply dump the

769
00:37:35,880 --> 00:37:39,119
contents and and search for known

770
00:37:39,119 --> 00:37:41,700
strings known magic numbers that's a

771
00:37:41,700 --> 00:37:44,579
rather cumbersome task but sometimes

772
00:37:44,579 --> 00:37:47,099
it's helpful another Linux command that

773
00:37:47,099 --> 00:37:49,140
I don't have listed here that can give

774
00:37:49,140 --> 00:37:52,500
you some insight is simply strings if

775
00:37:52,500 --> 00:37:55,500
you run strings on the file you'll get a

776
00:37:55,500 --> 00:37:57,980
list of all the identified ASCII strings

777
00:37:57,980 --> 00:38:00,420
and that may point you in the right

778
00:38:00,420 --> 00:38:02,040
direction

779
00:38:02,040 --> 00:38:03,660
but if you get to a point where you

780
00:38:03,660 --> 00:38:06,900
don't really know what you're looking at

781
00:38:06,900 --> 00:38:11,400
a super valuable tool is binwalk and you

782
00:38:11,400 --> 00:38:13,500
can just Google this to download it but

783
00:38:13,500 --> 00:38:18,300
basically it walks the binary data and

784
00:38:18,300 --> 00:38:21,599
identifies all possible files within

785
00:38:21,599 --> 00:38:25,500
that binary blob based on well-known

786
00:38:25,500 --> 00:38:30,060
magic numbers for file types and where I

787
00:38:30,060 --> 00:38:32,400
see this being especially helpful is

788
00:38:32,400 --> 00:38:37,140
when the Spy flash contents include a an

789
00:38:37,140 --> 00:38:40,560
entire file system what you'll see from

790
00:38:40,560 --> 00:38:42,420
binwalk a lot of times is it will

791
00:38:42,420 --> 00:38:45,900
identify what that file system is and

792
00:38:45,900 --> 00:38:48,660
then that can lead you down the

793
00:38:48,660 --> 00:38:50,940
appropriate road to mount that file

794
00:38:50,940 --> 00:38:54,359
system on your machine and then read the

795
00:38:54,359 --> 00:38:56,119
contents of it

796
00:38:56,119 --> 00:39:00,420
lastly if you just want to edit the file

797
00:39:00,420 --> 00:39:03,359
or search the file with a more user

798
00:39:03,359 --> 00:39:07,320
friendly interface than xxd there are

799
00:39:07,320 --> 00:39:09,359
some hex editors that are super useful

800
00:39:09,359 --> 00:39:12,119
the one I used today was called hex

801
00:39:12,119 --> 00:39:14,760
fiend and it's available for mac and

802
00:39:14,760 --> 00:39:17,220
Linux if you're in a Windows environment

803
00:39:17,220 --> 00:39:20,339
Ultra edit is a good tool but I think

804
00:39:20,339 --> 00:39:24,060
it's a pay for there's a freeware

805
00:39:24,060 --> 00:39:26,820
version but it's somewhat limited and if

806
00:39:26,820 --> 00:39:29,400
you get the visual studio free version

807
00:39:29,400 --> 00:39:32,160
it actually has a pretty good hex editor

808
00:39:32,160 --> 00:39:34,440
built in as well

809
00:39:34,440 --> 00:39:38,280
so of all those tools though Ben walk is

810
00:39:38,280 --> 00:39:40,980
absolutely the most useful if you don't

811
00:39:40,980 --> 00:39:43,020
quite know what you're looking at well

812
00:39:43,020 --> 00:39:45,060
thank you for joining me today I hope

813
00:39:45,060 --> 00:39:48,119
that was fun and informative maybe even

814
00:39:48,119 --> 00:39:49,859
wet your palette for some Hardware

815
00:39:49,859 --> 00:39:51,540
hacking

816
00:39:51,540 --> 00:39:53,160
feel free to reach out if you have any

817
00:39:53,160 --> 00:39:56,160
questions you can follow me on Twitter

818
00:39:56,160 --> 00:39:59,779
and happy hacking

