1
00:00:07,020 --> 00:00:11,020
all right we I think we're ready thank

2
00:00:11,020 --> 00:00:14,680
you so much so without further ado today

3
00:00:14,680 --> 00:00:17,140
we are joined by sebastian from google

4
00:00:17,140 --> 00:00:19,390
he's gonna give his talk the common

5
00:00:19,390 --> 00:00:21,580
Android app vulnerabilities is gonna be

6
00:00:21,580 --> 00:00:23,980
a great talk for anyone that's getting

7
00:00:23,980 --> 00:00:25,750
into android hacking or looking to take

8
00:00:25,750 --> 00:00:26,710
it to the next level

9
00:00:26,710 --> 00:00:29,169
so take it away Sebastian thank you so

10
00:00:29,169 --> 00:00:30,310
much really appreciate the opportunity

11
00:00:30,310 --> 00:00:34,120
here can you actually I don't think my

12
00:00:34,120 --> 00:00:45,340
webcam is activated I just have no idea

13
00:00:45,340 --> 00:00:47,289
have to do it huh maybe just did

14
00:00:47,289 --> 00:00:49,289
it

15
00:00:49,289 --> 00:01:02,559
can you see my back cool all right folks

16
00:01:02,559 --> 00:01:05,140
that was a very interesting talk about

17
00:01:05,140 --> 00:01:07,300
happy hacking so I let's see how this

18
00:01:07,300 --> 00:01:12,250
one goes I'm Sebastian I work for Google

19
00:01:12,250 --> 00:01:17,500
particularly for Android security and on

20
00:01:17,500 --> 00:01:19,900
the Android security team I work on the

21
00:01:19,900 --> 00:01:22,630
anti-malware team so I've been on the

22
00:01:22,630 --> 00:01:24,220
team for the past eight years

23
00:01:24,220 --> 00:01:29,320
if analyzed many many thousands of melba

24
00:01:29,320 --> 00:01:31,619
happy

25
00:01:36,329 --> 00:01:39,199
or a second

26
00:01:39,470 --> 00:01:44,179
we lost your audio there Sebastian

27
00:01:46,299 --> 00:01:50,020
all right just one second folks every

28
00:01:50,020 --> 00:01:52,359
Android application that you can get or

29
00:01:52,359 --> 00:01:54,670
malicious activity and at one point we

30
00:01:54,670 --> 00:01:58,869
realized that hey we can reuse the same

31
00:01:58,869 --> 00:02:01,719
code scanner to not just scan for

32
00:02:01,719 --> 00:02:03,509
malicious behavior but we can also just

33
00:02:03,509 --> 00:02:05,920
reuse it to scan for application

34
00:02:05,920 --> 00:02:07,869
security vulnerabilities of privacy

35
00:02:07,869 --> 00:02:09,848
issues so anything really any kind of

36
00:02:09,848 --> 00:02:13,870
code analysis and that's what how I'm

37
00:02:13,870 --> 00:02:15,099
here and I'll give you a couple of more

38
00:02:15,099 --> 00:02:18,880
details and in the future right now I am

39
00:02:18,880 --> 00:02:22,239
the manager of what's called the Android

40
00:02:22,239 --> 00:02:24,160
and him alpha team that's our reverse

41
00:02:24,160 --> 00:02:26,980
engineers and that's part of the Google

42
00:02:26,980 --> 00:02:28,209
Play protect team so if you have an

43
00:02:28,209 --> 00:02:29,920
Android phone and maybe a familiar of

44
00:02:29,920 --> 00:02:33,310
Google Play protect which it's just that

45
00:02:33,310 --> 00:02:35,079
application scanner thing that makes

46
00:02:35,079 --> 00:02:38,380
sure that not too much malware gets on

47
00:02:38,380 --> 00:02:44,349
the cookie blame so what is actually the

48
00:02:44,349 --> 00:02:46,900
purpose of me talking about security

49
00:02:46,900 --> 00:02:49,140
vulnerabilities in Android applications

50
00:02:49,140 --> 00:02:53,859
the purpose is that as part of that idea

51
00:02:53,859 --> 00:02:56,350
that we can scan for security

52
00:02:56,350 --> 00:02:59,040
vulnerabilities on Android applications

53
00:02:59,040 --> 00:03:05,019
we also acknowledge that the app certain

54
00:03:05,019 --> 00:03:06,819
applications that are installed on

55
00:03:06,819 --> 00:03:09,489
millions tens of millions even billions

56
00:03:09,489 --> 00:03:12,130
of different Android phones and so any

57
00:03:12,130 --> 00:03:15,220
kind of catastrophic security

58
00:03:15,220 --> 00:03:18,340
vulnerability in top applications can

59
00:03:18,340 --> 00:03:23,290
have a very significant impact on the

60
00:03:23,290 --> 00:03:25,690
whole Android ecosystem so far it hasn't

61
00:03:25,690 --> 00:03:27,819
happened we haven't seen any mass

62
00:03:27,819 --> 00:03:30,160
outbreaks of anything because of

63
00:03:30,160 --> 00:03:32,530
application security vulnerabilities and

64
00:03:32,530 --> 00:03:33,880
we want to make sure that this is not

65
00:03:33,880 --> 00:03:36,239
going to happen in the future either so

66
00:03:36,239 --> 00:03:38,829
we started a couple of programs who make

67
00:03:38,829 --> 00:03:40,780
applications in particular top

68
00:03:40,780 --> 00:03:42,489
applications not just from Google but

69
00:03:42,489 --> 00:03:46,239
are also from other companies safer I'm

70
00:03:46,239 --> 00:03:47,440
going to talk about this a little bit

71
00:03:47,440 --> 00:03:49,900
and I'll dive into the actual security

72
00:03:49,900 --> 00:03:52,739
vulnerabilities

73
00:03:52,819 --> 00:03:57,810
in this talk I'll mainly talk about six

74
00:03:57,810 --> 00:04:02,459
different vulnerabilities that I have

75
00:04:02,459 --> 00:04:05,730
picked as six repairs representative

76
00:04:05,730 --> 00:04:10,159
samples of nineteen one er abilities

77
00:04:10,159 --> 00:04:12,930
answer nineteen ninety vulnerabilities

78
00:04:12,930 --> 00:04:14,970
that I in six different vulnerability

79
00:04:14,970 --> 00:04:17,039
categories and those are the ones that

80
00:04:17,039 --> 00:04:19,829
after about two years of paying back

81
00:04:19,829 --> 00:04:22,530
bounties for applications on Google Play

82
00:04:22,530 --> 00:04:24,389
that those are the year of ulnar ability

83
00:04:24,389 --> 00:04:26,449
classes we have identified those are the

84
00:04:26,449 --> 00:04:29,520
vulnerability types we have identified

85
00:04:29,520 --> 00:04:36,720
and so I figured at one point I want to

86
00:04:36,720 --> 00:04:40,470
show this information to different

87
00:04:40,470 --> 00:04:42,330
people and I created a slide deck I

88
00:04:42,330 --> 00:04:43,949
created a slide deck internally long

89
00:04:43,949 --> 00:04:46,020
before I even had a an opportunity

90
00:04:46,020 --> 00:04:48,840
presented anywhere and the first time I

91
00:04:48,840 --> 00:04:51,060
presented that slide deck was a couple

92
00:04:51,060 --> 00:04:54,690
of months ago at droidcon Berlin and you

93
00:04:54,690 --> 00:04:56,310
can actually you can find on youtube if

94
00:04:56,310 --> 00:04:58,710
you look Fort Worth court on Berlin you

95
00:04:58,710 --> 00:05:01,080
can find my talk there which is fairly

96
00:05:01,080 --> 00:05:02,490
similar to this one but doesn't quite

97
00:05:02,490 --> 00:05:04,380
cover the exact same vulnerabilities

98
00:05:04,380 --> 00:05:05,900
because I'm mixing it up a little bit

99
00:05:05,900 --> 00:05:09,210
and so I gave it first to a bunch of

100
00:05:09,210 --> 00:05:10,740
software engineers who are supposed to

101
00:05:10,740 --> 00:05:13,740
build secure applications and now I'm

102
00:05:13,740 --> 00:05:15,650
giving it to a bunch of hackers who

103
00:05:15,650 --> 00:05:18,060
ideally want to participate in Android

104
00:05:18,060 --> 00:05:19,740
related path bounty programs and maybe

105
00:05:19,740 --> 00:05:21,270
maybe to get some ideas out of that and

106
00:05:21,270 --> 00:05:23,250
I'm actually fairly excited that I said

107
00:05:23,250 --> 00:05:25,169
they give the same deck once from a

108
00:05:25,169 --> 00:05:26,909
defensive point of view and once from an

109
00:05:26,909 --> 00:05:28,260
offensive point of view I've never done

110
00:05:28,260 --> 00:05:28,800
that before

111
00:05:28,800 --> 00:05:32,639
um it's only got an hour but the full

112
00:05:32,639 --> 00:05:34,440
walkthrough takes about 90 minutes to

113
00:05:34,440 --> 00:05:37,320
two hours the whole deck with all the

114
00:05:37,320 --> 00:05:39,090
security vulnerabilities that we've seen

115
00:05:39,090 --> 00:05:40,470
in the past and then we pay out for us

116
00:05:40,470 --> 00:05:42,780
actually available on the website of the

117
00:05:42,780 --> 00:05:45,330
coop LASIK Google play's security

118
00:05:45,330 --> 00:05:48,330
rewards program on hacker Volcom slash

119
00:05:48,330 --> 00:05:49,979
Google Play so you can check it out

120
00:05:49,979 --> 00:05:50,900
later

121
00:05:50,900 --> 00:05:53,580
and it's also obviously the main page

122
00:05:53,580 --> 00:05:56,580
where we host the rewards program where

123
00:05:56,580 --> 00:05:57,990
you can find out the information and so

124
00:05:57,990 --> 00:05:58,950
on

125
00:05:58,950 --> 00:06:00,870
so what did we do a couple of years ago

126
00:06:00,870 --> 00:06:03,060
when we decided it's we want to spend

127
00:06:03,060 --> 00:06:05,700
some time and effort to make top Android

128
00:06:05,700 --> 00:06:08,340
applications safer so the first thing we

129
00:06:08,340 --> 00:06:13,730
did was we started the ASI program I

130
00:06:13,730 --> 00:06:15,870
think that stands for app safety

131
00:06:15,870 --> 00:06:17,580
initiative or something like that or app

132
00:06:17,580 --> 00:06:18,960
security improvement program I always

133
00:06:18,960 --> 00:06:22,980
get that wrong it's really interesting

134
00:06:22,980 --> 00:06:25,490
program because there was the first time

135
00:06:25,490 --> 00:06:31,470
he used the scanner that we used in the

136
00:06:31,470 --> 00:06:33,510
past analyst malware to find privacy and

137
00:06:33,510 --> 00:06:36,540
security vulnerabilities and then we

138
00:06:36,540 --> 00:06:39,200
automatically took that information and

139
00:06:39,200 --> 00:06:42,840
we made it available to developers in

140
00:06:42,840 --> 00:06:44,460
the Google Play Developer console and

141
00:06:44,460 --> 00:06:47,040
for certain problems and the

142
00:06:47,040 --> 00:06:48,630
applications we told developers hey

143
00:06:48,630 --> 00:06:50,700
would be nice if you fix that but if you

144
00:06:50,700 --> 00:06:53,130
don't that's cool too and for others we

145
00:06:53,130 --> 00:06:54,660
said you have to fix it or you're going

146
00:06:54,660 --> 00:06:55,890
to get suspended from Google Play

147
00:06:55,890 --> 00:06:57,240
because that issue is so problematic

148
00:06:57,240 --> 00:07:01,080
that you have to do something and to

149
00:07:01,080 --> 00:07:03,600
date in the last three years essentially

150
00:07:03,600 --> 00:07:06,660
we helped more than 300,000 developers

151
00:07:06,660 --> 00:07:09,890
fix more than 1 million applications

152
00:07:09,890 --> 00:07:14,040
which I think it's an extremely exciting

153
00:07:14,040 --> 00:07:19,280
scale then I believe to this day is

154
00:07:19,280 --> 00:07:22,620
essentially it largest scale app

155
00:07:22,620 --> 00:07:24,450
security program in the world that I'm

156
00:07:24,450 --> 00:07:28,410
aware of I'm fairly excited about other

157
00:07:28,410 --> 00:07:31,260
initiatives that our companies are doing

158
00:07:31,260 --> 00:07:32,490
now they're also hosting a lot of

159
00:07:32,490 --> 00:07:34,800
applications or a lot of source code so

160
00:07:34,800 --> 00:07:37,170
we'll see if they can be the numbers but

161
00:07:37,170 --> 00:07:38,970
for now I so believe that's the biggest

162
00:07:38,970 --> 00:07:41,970
apps tech safety program and then at one

163
00:07:41,970 --> 00:07:45,780
point we ran out of ideas for ASI we ran

164
00:07:45,780 --> 00:07:49,680
out of ideas because there are only so

165
00:07:49,680 --> 00:07:51,870
many vulnerabilities right that you can

166
00:07:51,870 --> 00:07:53,580
think of or vulnerability classes at

167
00:07:53,580 --> 00:07:56,280
least you can scan for so even if he had

168
00:07:56,280 --> 00:07:58,080
perfect scanners like how many are they

169
00:07:58,080 --> 00:08:01,080
really lost maybe 3040 year Android

170
00:08:01,080 --> 00:08:04,380
specific vulnerabilities so we decided

171
00:08:04,380 --> 00:08:06,300
maybe we just don't know all of these

172
00:08:06,300 --> 00:08:08,230
vulnerabilities

173
00:08:08,230 --> 00:08:10,840
we need to find a way to source new

174
00:08:10,840 --> 00:08:12,760
vulnerabilities in the Android ecosystem

175
00:08:12,760 --> 00:08:14,500
that we just don't know about so we

176
00:08:14,500 --> 00:08:16,240
decided let's launch the Google Play

177
00:08:16,240 --> 00:08:18,520
security rewards program which is a bug

178
00:08:18,520 --> 00:08:22,060
bounty program which started out as a

179
00:08:22,060 --> 00:08:23,740
collaboration between developers and

180
00:08:23,740 --> 00:08:26,200
Google meaning you've a a top developer

181
00:08:26,200 --> 00:08:28,510
and then you got you could event first

182
00:08:28,510 --> 00:08:31,030
you were invited and we approached a

183
00:08:31,030 --> 00:08:33,340
couple of companies and we said hey why

184
00:08:33,340 --> 00:08:35,409
don't you want to join us you have to do

185
00:08:35,409 --> 00:08:39,610
nothing just confirm with us that a

186
00:08:39,610 --> 00:08:41,890
certain hacker found a certain security

187
00:08:41,890 --> 00:08:45,700
vulnerability and we pay out companies

188
00:08:45,700 --> 00:08:47,770
were excited about that because we

189
00:08:47,770 --> 00:08:49,570
essentially we end up subsidizing their

190
00:08:49,570 --> 00:08:51,130
poor quality programs and that's okay

191
00:08:51,130 --> 00:08:53,980
for us the only the only information we

192
00:08:53,980 --> 00:08:56,350
get is information about security

193
00:08:56,350 --> 00:08:57,670
vulnerabilities in the Android ecosystem

194
00:08:57,670 --> 00:09:00,220
then we can use that information to

195
00:09:00,220 --> 00:09:02,410
build new ASI scanners and more more

196
00:09:02,410 --> 00:09:04,120
developers at scale that may have

197
00:09:04,120 --> 00:09:08,680
simulations over time we moved a little

198
00:09:08,680 --> 00:09:13,420
bit away from the super collaborative

199
00:09:13,420 --> 00:09:16,570
approach with developers and we've

200
00:09:16,570 --> 00:09:18,640
decided we don't have to partner with

201
00:09:18,640 --> 00:09:20,890
them we're just gonna declare that every

202
00:09:20,890 --> 00:09:23,080
application in Google Play that has more

203
00:09:23,080 --> 00:09:25,360
than 100 million installs is now in

204
00:09:25,360 --> 00:09:28,390
scope for bounty program and so even if

205
00:09:28,390 --> 00:09:29,860
you don't have the collaboration from

206
00:09:29,860 --> 00:09:31,780
any of the top developers that have

207
00:09:31,780 --> 00:09:33,430
applications with more than 100 million

208
00:09:33,430 --> 00:09:35,200
installs it still gonna be in scope

209
00:09:35,200 --> 00:09:38,050
we're gonna triage the bounties and be

210
00:09:38,050 --> 00:09:39,820
going to triage to take the tickets the

211
00:09:39,820 --> 00:09:42,940
bugs whatever you want to call it and if

212
00:09:42,940 --> 00:09:46,060
they are non-responsive or if they don't

213
00:09:46,060 --> 00:09:49,660
have any kind of structured response

214
00:09:49,660 --> 00:09:51,340
procedure it's going to be difficult to

215
00:09:51,340 --> 00:09:53,580
hackers to get a get this issues fixed

216
00:09:53,580 --> 00:09:56,290
then we actually be gonna work with the

217
00:09:56,290 --> 00:09:59,500
developer ourselves bringing essentially

218
00:09:59,500 --> 00:10:01,750
the big stick that Google can bring to

219
00:10:01,750 --> 00:10:04,420
the table and the year handle the

220
00:10:04,420 --> 00:10:07,450
initial contact and with the developer

221
00:10:07,450 --> 00:10:10,060
and we try to get issue that you find

222
00:10:10,060 --> 00:10:12,840
remediated and it's really cool

223
00:10:12,840 --> 00:10:15,880
so far we've paid out nearly half a

224
00:10:15,880 --> 00:10:17,320
million actually more than a half a

225
00:10:17,320 --> 00:10:20,310
million dollars in the last two years

226
00:10:20,310 --> 00:10:24,540
and we've ramped up extremely in the

227
00:10:24,540 --> 00:10:25,290
last 90 days

228
00:10:25,290 --> 00:10:28,950
so about nearly 75% of all the payments

229
00:10:28,950 --> 00:10:30,630
we ever made we paid out in the last 90

230
00:10:30,630 --> 00:10:32,310
days there's a couple of reasons for

231
00:10:32,310 --> 00:10:35,370
that the first reason is we we went from

232
00:10:35,370 --> 00:10:36,510
this collaborative approach with

233
00:10:36,510 --> 00:10:39,480
developers to the one I just described

234
00:10:39,480 --> 00:10:40,800
for every application for more than

235
00:10:40,800 --> 00:10:44,370
hundred million salts is in scope that

236
00:10:44,370 --> 00:10:46,410
open it up a lot from like 50

237
00:10:46,410 --> 00:10:48,690
applications the main scope to a 550

238
00:10:48,690 --> 00:10:51,000
applications event scope so that's a big

239
00:10:51,000 --> 00:10:53,880
increase we also increase the the bug

240
00:10:53,880 --> 00:10:58,980
bounties the lowest bug bounty year

241
00:10:58,980 --> 00:11:01,260
before that was like $1,000 for fairly

242
00:11:01,260 --> 00:11:04,890
trivial things up to $5,000 for a remote

243
00:11:04,890 --> 00:11:08,550
code execution in applications we update

244
00:11:08,550 --> 00:11:11,100
the lowest nice number $3,000 and remote

245
00:11:11,100 --> 00:11:16,650
code execution nets $20,000 and that is

246
00:11:16,650 --> 00:11:20,580
very exciting because in these

247
00:11:20,580 --> 00:11:23,010
applications that are in scope many of

248
00:11:23,010 --> 00:11:25,200
them have never gotten any kind of

249
00:11:25,200 --> 00:11:27,060
security treatment probably they've

250
00:11:27,060 --> 00:11:28,530
never had security engineers were

251
00:11:28,530 --> 00:11:30,930
condemned no audience no nothing so

252
00:11:30,930 --> 00:11:32,390
they're fairly soft targets

253
00:11:32,390 --> 00:11:34,410
unfortunately for us that breaks the

254
00:11:34,410 --> 00:11:36,270
bank a little bit and you're paying out

255
00:11:36,270 --> 00:11:39,530
a lot more than we'd anticipated and

256
00:11:39,530 --> 00:11:42,060
then occasionally when that happens and

257
00:11:42,060 --> 00:11:43,620
we just realized as a certain

258
00:11:43,620 --> 00:11:46,350
vulnerability class fine Android

259
00:11:46,350 --> 00:11:47,880
applications that just happens a lot

260
00:11:47,880 --> 00:11:50,580
then we also be lower payments and we

261
00:11:50,580 --> 00:11:52,290
declare certain vulnerabilities out of

262
00:11:52,290 --> 00:11:54,300
scope because we have to kind of

263
00:11:54,300 --> 00:11:56,870
trade-off the budget that we have with

264
00:11:56,870 --> 00:12:01,790
the quality and risk and interest of

265
00:12:01,790 --> 00:12:04,650
yeah I essentially what we care about so

266
00:12:04,650 --> 00:12:08,040
if you read the terms on our website for

267
00:12:08,040 --> 00:12:10,050
the rewards program you'll see that a

268
00:12:10,050 --> 00:12:12,450
couple have been moved to $500 a couple

269
00:12:12,450 --> 00:12:13,980
have been moved completely out of scope

270
00:12:13,980 --> 00:12:15,959
so be sure to understand what's actually

271
00:12:15,959 --> 00:12:17,610
in scope most work if you want to

272
00:12:17,610 --> 00:12:20,100
contribute but I nevertheless I think

273
00:12:20,100 --> 00:12:22,740
it's a really exciting program that can

274
00:12:22,740 --> 00:12:23,850
make you a lot of money really fast

275
00:12:23,850 --> 00:12:27,380
because we pay out a lot for issues that

276
00:12:27,380 --> 00:12:29,940
basically nobody else pays out that much

277
00:12:29,940 --> 00:12:31,860
and Android applications

278
00:12:31,860 --> 00:12:33,510
unless you're targeting the really top

279
00:12:33,510 --> 00:12:34,290
developers

280
00:12:34,290 --> 00:12:36,060
there's no fairly softest targets I

281
00:12:36,060 --> 00:12:38,340
would say so yeah definitely try to get

282
00:12:38,340 --> 00:12:39,660
into that if you want to make some quick

283
00:12:39,660 --> 00:12:44,730
cash if you're if you're developed burn

284
00:12:44,730 --> 00:12:47,400
you actually want to understand more we

285
00:12:47,400 --> 00:12:49,140
have a couple of security best practices

286
00:12:49,140 --> 00:12:51,980
on the developer.android.com website

287
00:12:51,980 --> 00:12:54,090
there's a couple of other security

288
00:12:54,090 --> 00:12:55,920
related topics you want to check out and

289
00:12:55,920 --> 00:12:59,040
then for as fast third-party websites go

290
00:12:59,040 --> 00:13:02,130
the tool that I recommend here's my

291
00:13:02,130 --> 00:13:03,840
Turner org which has this common

292
00:13:03,840 --> 00:13:05,640
weakness enumeration scheme which I'm

293
00:13:05,640 --> 00:13:08,580
also referring to throughout this

294
00:13:08,580 --> 00:13:11,730
presentation and then just avast Mobile

295
00:13:11,730 --> 00:13:14,490
Security Project or what sort which is

296
00:13:14,490 --> 00:13:17,600
also very interesting to understand what

297
00:13:17,600 --> 00:13:20,190
yeah common pitfalls there are in

298
00:13:20,190 --> 00:13:21,540
android security and privacy for

299
00:13:21,540 --> 00:13:27,750
applications so let's start with the

300
00:13:27,750 --> 00:13:28,950
actual presentation about a

301
00:13:28,950 --> 00:13:31,230
vulnerability is that I think are worth

302
00:13:31,230 --> 00:13:35,010
taking a look at I think you would

303
00:13:35,010 --> 00:13:36,390
quickly find out that a lot of Android

304
00:13:36,390 --> 00:13:39,180
applications have these and if you want

305
00:13:39,180 --> 00:13:41,310
to be like some of our top contributors

306
00:13:41,310 --> 00:13:43,080
what they're doing is they they build

307
00:13:43,080 --> 00:13:44,850
their own application security scanners

308
00:13:44,850 --> 00:13:49,830
that specifically target the the

309
00:13:49,830 --> 00:13:51,570
categories to be paying out for then

310
00:13:51,570 --> 00:13:53,310
they just scan every application that is

311
00:13:53,310 --> 00:13:58,190
in scope and so they quickly scale up

312
00:13:58,190 --> 00:14:00,360
essentially what they find and they file

313
00:14:00,360 --> 00:14:01,980
their file tickets against us all the

314
00:14:01,980 --> 00:14:03,300
time that's we hope you end up with

315
00:14:03,300 --> 00:14:08,850
paying out like $350,000 in 90 days and

316
00:14:08,850 --> 00:14:10,230
I think that's a that's a very exciting

317
00:14:10,230 --> 00:14:15,810
prospect for all hackers out there ok so

318
00:14:15,810 --> 00:14:18,780
the first the first category I have of

319
00:14:18,780 --> 00:14:20,250
the six categories is insecure

320
00:14:20,250 --> 00:14:22,050
connections and that's a very easy

321
00:14:22,050 --> 00:14:24,630
starter category that most people on

322
00:14:24,630 --> 00:14:26,040
this and just presentation are going to

323
00:14:26,040 --> 00:14:27,470
be familiar with they are listening in

324
00:14:27,470 --> 00:14:29,130
insecure connections

325
00:14:29,130 --> 00:14:30,630
essentially come in three different

326
00:14:30,630 --> 00:14:32,640
flavors they're not even that different

327
00:14:32,640 --> 00:14:34,380
flavors but still not list them all very

328
00:14:34,380 --> 00:14:38,820
explicitly here the first one is use of

329
00:14:38,820 --> 00:14:42,180
insecure Network protocols and having

330
00:14:42,180 --> 00:14:44,910
having a category or a class here of a

331
00:14:44,910 --> 00:14:47,550
certain type of a vulnerability in both

332
00:14:47,550 --> 00:14:49,380
that means I'm going to talk about it a

333
00:14:49,380 --> 00:14:50,820
little bit more in the next couple of

334
00:14:50,820 --> 00:14:52,770
slides I can only take one

335
00:14:52,770 --> 00:14:54,600
representative sample from each of these

336
00:14:54,600 --> 00:14:56,850
different categories so for the other

337
00:14:56,850 --> 00:14:59,910
ones please refer back to the full slide

338
00:14:59,910 --> 00:15:02,910
deck that is posted on the Google based

339
00:15:02,910 --> 00:15:06,210
security reports program website so I

340
00:15:06,210 --> 00:15:07,680
picked a very easy one just to get this

341
00:15:07,680 --> 00:15:09,390
presentation started use of insecure

342
00:15:09,390 --> 00:15:12,660
Network protocols then we have data

343
00:15:12,660 --> 00:15:14,610
transmission or insecure protocols the

344
00:15:14,610 --> 00:15:16,590
first one is essentially your refund

345
00:15:16,590 --> 00:15:18,570
from the web in an insecure way and the

346
00:15:18,570 --> 00:15:20,190
second one is who you write to the web

347
00:15:20,190 --> 00:15:22,110
in an insecure way the third one is

348
00:15:22,110 --> 00:15:24,270
authentication of when secure protocols

349
00:15:24,270 --> 00:15:26,490
which is more or less a special case of

350
00:15:26,490 --> 00:15:28,080
the second one we're trying to log in

351
00:15:28,080 --> 00:15:31,160
over HTTP or something like that very

352
00:15:31,160 --> 00:15:36,060
basic and so what does it mean to use

353
00:15:36,060 --> 00:15:37,590
the insecure Network protocol and

354
00:15:37,590 --> 00:15:39,180
especially to read from an insecure

355
00:15:39,180 --> 00:15:40,530
Network protocol so what is the problem

356
00:15:40,530 --> 00:15:44,790
the problem is if you load from an

357
00:15:44,790 --> 00:15:46,680
insecure Network protocol for example

358
00:15:46,680 --> 00:15:48,660
HTTP but hasn't doesn't have to be this

359
00:15:48,660 --> 00:15:50,310
android applications that used to use

360
00:15:50,310 --> 00:15:52,380
FTP does android applications that use

361
00:15:52,380 --> 00:15:55,170
telnet anything that is maybe insecure

362
00:15:55,170 --> 00:15:58,290
then an attacker on the on the same

363
00:15:58,290 --> 00:16:00,870
network on a network they control they

364
00:16:00,870 --> 00:16:03,900
can replace remove in check code and if

365
00:16:03,900 --> 00:16:05,880
you've ever gone to Def Con or something

366
00:16:05,880 --> 00:16:09,300
like that you know that occasionally

367
00:16:09,300 --> 00:16:11,340
just people who intercept traffic there

368
00:16:11,340 --> 00:16:15,960
and then they they inject certain images

369
00:16:15,960 --> 00:16:17,520
that you don't want to see in your on

370
00:16:17,520 --> 00:16:20,250
your browser or bevor you read the data

371
00:16:20,250 --> 00:16:21,690
from and what you avoid that when it

372
00:16:21,690 --> 00:16:23,610
comes to android applications because an

373
00:16:23,610 --> 00:16:25,110
android applications I'm not very

374
00:16:25,110 --> 00:16:27,540
concerned about the idea to someone

375
00:16:27,540 --> 00:16:30,240
objects like any kind of frank content

376
00:16:30,240 --> 00:16:32,690
but I'm very concerned that if someone

377
00:16:32,690 --> 00:16:37,590
if someone injects phishing phishing

378
00:16:37,590 --> 00:16:40,560
password forms credit card stuff and so

379
00:16:40,560 --> 00:16:42,780
on so I really want to avoid that so I

380
00:16:42,780 --> 00:16:45,420
tell top developers that we don't

381
00:16:45,420 --> 00:16:48,240
actually like you to make any kind of

382
00:16:48,240 --> 00:16:51,090
reed connections over HTTP or any other

383
00:16:51,090 --> 00:16:53,280
insecure and network protocol because

384
00:16:53,280 --> 00:16:54,420
otherwise there's a very high chance

385
00:16:54,420 --> 00:16:56,130
that

386
00:16:56,130 --> 00:16:58,960
that an attack on the same network can

387
00:16:58,960 --> 00:17:01,740
manipulate that and like throw up

388
00:17:01,740 --> 00:17:04,480
something that tricks the use of some

389
00:17:04,480 --> 00:17:06,010
kind of social engineering attack into

390
00:17:06,010 --> 00:17:09,310
giving up more to the attacker then they

391
00:17:09,310 --> 00:17:11,619
should have and on Android it's

392
00:17:11,619 --> 00:17:13,060
particularly difficult because on

393
00:17:13,060 --> 00:17:16,240
Android there is no such thing really as

394
00:17:16,240 --> 00:17:23,829
a trusted UI and and it's funny I just

395
00:17:23,829 --> 00:17:27,520
got an incident chat someone wants

396
00:17:27,520 --> 00:17:29,550
something but that's cool

397
00:17:29,550 --> 00:17:33,910
so yeah our network has no trusted you

398
00:17:33,910 --> 00:17:35,230
and it makes it very difficult so if

399
00:17:35,230 --> 00:17:37,750
someone has the ability for example to

400
00:17:37,750 --> 00:17:41,400
inject a legitimate looking login screen

401
00:17:41,400 --> 00:17:44,050
into the Gmail application which

402
00:17:44,050 --> 00:17:45,670
hopefully it's not possible anymore of

403
00:17:45,670 --> 00:17:47,590
course but if they were able to do that

404
00:17:47,590 --> 00:17:51,730
then a user can actually not distinguish

405
00:17:51,730 --> 00:17:57,040
between a legitimate gmail login dialog

406
00:17:57,040 --> 00:17:58,510
and the one that has been injected

407
00:17:58,510 --> 00:18:00,070
because there's no such thing there's no

408
00:18:00,070 --> 00:18:02,020
URL bar anything in the Gmail app that

409
00:18:02,020 --> 00:18:05,200
tells you tells you this is a gin man

410
00:18:05,200 --> 00:18:05,980
here's like that

411
00:18:05,980 --> 00:18:08,740
the gmail.com URL the green check mark

412
00:18:08,740 --> 00:18:11,590
whatever you have in a browser so that's

413
00:18:11,590 --> 00:18:13,000
very problematic so we don't want to

414
00:18:13,000 --> 00:18:16,120
avoid that and yeah obviously I give you

415
00:18:16,120 --> 00:18:17,800
a couple of auditing tips if you want to

416
00:18:17,800 --> 00:18:19,330
find that stuff and then I'm also a

417
00:18:19,330 --> 00:18:21,970
small of the developer content I've give

418
00:18:21,970 --> 00:18:24,640
you some tips on how you fix that right

419
00:18:24,640 --> 00:18:29,740
and it's curious right because one of

420
00:18:29,740 --> 00:18:32,350
the most powerful tools for getting

421
00:18:32,350 --> 00:18:35,440
started on many kinds of these these

422
00:18:35,440 --> 00:18:37,450
categories of vulnerabilities that I'm

423
00:18:37,450 --> 00:18:39,400
presenting today is actually a simple

424
00:18:39,400 --> 00:18:41,680
crap right you used to use strings on

425
00:18:41,680 --> 00:18:43,810
the app you strapped on the app then

426
00:18:43,810 --> 00:18:48,520
let's look for HTTP FTP SMTP tell that

427
00:18:48,520 --> 00:18:50,290
whatever insecure protocol you can think

428
00:18:50,290 --> 00:18:54,250
of and just start auditing there of

429
00:18:54,250 --> 00:18:56,590
course you can also look at the

430
00:18:56,590 --> 00:18:58,120
applications network security

431
00:18:58,120 --> 00:19:00,280
configuration which is a new Android key

432
00:19:00,280 --> 00:19:02,620
feature the security configuration

433
00:19:02,620 --> 00:19:04,690
should be able to tell you if an

434
00:19:04,690 --> 00:19:07,660
application is even allowed to make HTTP

435
00:19:07,660 --> 00:19:08,870
connections

436
00:19:08,870 --> 00:19:10,070
because if the network security

437
00:19:10,070 --> 00:19:12,530
configuration says only HTTP or other

438
00:19:12,530 --> 00:19:14,480
secure network protocols doesn't

439
00:19:14,480 --> 00:19:16,790
indicator that maybe it's not a good

440
00:19:16,790 --> 00:19:18,860
time and not a good way to spend your

441
00:19:18,860 --> 00:19:21,260
time to look into that understanding

442
00:19:21,260 --> 00:19:24,440
common entry points that have anything

443
00:19:24,440 --> 00:19:28,610
to do with network on Android I think

444
00:19:28,610 --> 00:19:30,050
it's also very important the most common

445
00:19:30,050 --> 00:19:34,460
ones I think Java classes URL and the

446
00:19:34,460 --> 00:19:36,170
webview class which is part of the

447
00:19:36,170 --> 00:19:39,080
Android iOS P framework and then you

448
00:19:39,080 --> 00:19:41,179
check the ejector data data core flows

449
00:19:41,179 --> 00:19:44,059
the data flows that essentially create

450
00:19:44,059 --> 00:19:45,980
instances of these classes and set the

451
00:19:45,980 --> 00:19:51,290
arguments remediation obviously since

452
00:19:51,290 --> 00:19:55,250
Android P you can you're fairly safe by

453
00:19:55,250 --> 00:19:57,110
default but if you want to make insecure

454
00:19:57,110 --> 00:19:58,370
connections you have to introduce this

455
00:19:58,370 --> 00:20:00,260
network security configuration file and

456
00:20:00,260 --> 00:20:02,980
I just mentioned I just linked the

457
00:20:02,980 --> 00:20:04,730
documentation on the previous slide

458
00:20:04,730 --> 00:20:08,450
there's the Java X naught dot SSL there

459
00:20:08,450 --> 00:20:10,880
should a gtp SQL connection so you want

460
00:20:10,880 --> 00:20:13,250
to use that not the old HTTP URL

461
00:20:13,250 --> 00:20:13,850
connection

462
00:20:13,850 --> 00:20:17,150
listen it's fairly easy to have like

463
00:20:17,150 --> 00:20:19,610
static checks you can have your own

464
00:20:19,610 --> 00:20:23,530
presubmit checks if you run any kind of

465
00:20:23,530 --> 00:20:26,030
source control system or any kind of

466
00:20:26,030 --> 00:20:28,550
continuous integration system you can

467
00:20:28,550 --> 00:20:30,860
use an Android lint check if you're

468
00:20:30,860 --> 00:20:32,120
using Android studio to build your

469
00:20:32,120 --> 00:20:34,670
applications so a whole lot of stuff

470
00:20:34,670 --> 00:20:37,850
that is there nevertheless a whole lot

471
00:20:37,850 --> 00:20:39,500
of applications on Android still use

472
00:20:39,500 --> 00:20:42,679
insecure protocols which is ultimately

473
00:20:42,679 --> 00:20:45,260
why we had to don't create the abort for

474
00:20:45,260 --> 00:20:47,780
this kind of category 2 to $500 if you

475
00:20:47,780 --> 00:20:50,240
find that stuff because before that we

476
00:20:50,240 --> 00:20:52,309
paid out $1,000 for anybody who finds

477
00:20:52,309 --> 00:20:53,960
that in top applications and this has

478
00:20:53,960 --> 00:20:57,100
too many job applications to do it

479
00:20:57,100 --> 00:20:59,929
the second big class of the insecure

480
00:20:59,929 --> 00:21:01,700
network connection is cryptography and

481
00:21:01,700 --> 00:21:04,100
authentication and for cryptography and

482
00:21:04,100 --> 00:21:07,790
authentication I got three examples I

483
00:21:07,790 --> 00:21:10,280
think two of them are particularly

484
00:21:10,280 --> 00:21:13,520
interesting so let's take a look

485
00:21:13,520 --> 00:21:16,200
the first one is also the one that I'm

486
00:21:16,200 --> 00:21:17,760
talking about a little bit in more

487
00:21:17,760 --> 00:21:19,710
detail because it actually leads to a

488
00:21:19,710 --> 00:21:22,080
lot of questions not just from hackers

489
00:21:22,080 --> 00:21:24,659
but also from programmers who want to

490
00:21:24,659 --> 00:21:27,120
make a application secure what do you do

491
00:21:27,120 --> 00:21:29,850
about third party secrets that you have

492
00:21:29,850 --> 00:21:32,280
like API keys for Twitter of Amazon Web

493
00:21:32,280 --> 00:21:34,500
Services for any any kind of third-party

494
00:21:34,500 --> 00:21:35,789
service that you want to authenticate

495
00:21:35,789 --> 00:21:39,620
from your application and we pay out a

496
00:21:39,620 --> 00:21:44,159
$3,000 if essentially you find a

497
00:21:44,159 --> 00:21:47,150
security vulnerability related to

498
00:21:47,150 --> 00:21:49,500
embedded third party secrets as we call

499
00:21:49,500 --> 00:21:54,210
them here make reference to cwe that's

500
00:21:54,210 --> 00:21:57,090
the common vulnerability so a common

501
00:21:57,090 --> 00:22:00,090
weakness enumeration standard by my term

502
00:22:00,090 --> 00:22:01,350
so you want to check that out they have

503
00:22:01,350 --> 00:22:02,760
a lot more information about these

504
00:22:02,760 --> 00:22:05,700
vulnerabilities and weaknesses then I

505
00:22:05,700 --> 00:22:08,760
can talk about in this talk it's a

506
00:22:08,760 --> 00:22:10,020
really cool resource so there would be a

507
00:22:10,020 --> 00:22:13,440
CWA seven one eight one caveat on when I

508
00:22:13,440 --> 00:22:14,850
say to pay are three thousand dollars

509
00:22:14,850 --> 00:22:17,520
that doesn't mean we we pay off three

510
00:22:17,520 --> 00:22:19,470
thousand dollars on any kind of embedded

511
00:22:19,470 --> 00:22:21,900
Twitter API key and top application

512
00:22:21,900 --> 00:22:24,030
every time we pay out you actually

513
00:22:24,030 --> 00:22:28,500
expect there to be some kind of security

514
00:22:28,500 --> 00:22:31,280
relevant problem with any of these

515
00:22:31,280 --> 00:22:33,659
weaknesses vulnerabilities categories

516
00:22:33,659 --> 00:22:36,780
that I'm presenting here if there's no

517
00:22:36,780 --> 00:22:39,840
security or privacy related impact then

518
00:22:39,840 --> 00:22:42,000
yeah maybe you have an embedded third

519
00:22:42,000 --> 00:22:43,440
party secret token but if there's no

520
00:22:43,440 --> 00:22:45,929
problem with that because you can't

521
00:22:45,929 --> 00:22:47,730
actually abuse and any wait and we don't

522
00:22:47,730 --> 00:22:49,940
pay out and that's a funny story because

523
00:22:49,940 --> 00:22:54,360
obviously hackers hackers would love to

524
00:22:54,360 --> 00:22:56,010
have be get paid out on every report

525
00:22:56,010 --> 00:22:58,039
they make even if it's like not

526
00:22:58,039 --> 00:23:00,659
immediately obviously security critical

527
00:23:00,659 --> 00:23:02,820
and then they add they construct

528
00:23:02,820 --> 00:23:06,030
construct the weirdest attack scenarios

529
00:23:06,030 --> 00:23:09,450
and explain oh it is absolutely super

530
00:23:09,450 --> 00:23:11,100
important that we have to protect this

531
00:23:11,100 --> 00:23:14,490
and this in this info when we read the

532
00:23:14,490 --> 00:23:17,190
these very absurd sometimes

533
00:23:17,190 --> 00:23:20,610
justifications with just a little bit of

534
00:23:20,610 --> 00:23:22,230
used occasionally because it doesn't

535
00:23:22,230 --> 00:23:23,460
make sense and sometimes we just tell

536
00:23:23,460 --> 00:23:25,309
tell hackers that just just

537
00:23:25,309 --> 00:23:28,100
to meet the bar for security-critical

538
00:23:28,100 --> 00:23:30,289
and if you want to know what the bar is

539
00:23:30,289 --> 00:23:32,029
for security-critical is also described

540
00:23:32,029 --> 00:23:35,529
on our website so check that out

541
00:23:35,529 --> 00:23:37,669
there's also embedded cryptography

542
00:23:37,669 --> 00:23:41,779
secrets which just means a very common

543
00:23:41,779 --> 00:23:43,639
one that I'm not sure if it's happened

544
00:23:43,639 --> 00:23:46,009
still but it still it used to happen a

545
00:23:46,009 --> 00:23:50,809
lot of this that I think whatsapp stored

546
00:23:50,809 --> 00:23:56,330
encrypted chat histories on on the SD

547
00:23:56,330 --> 00:23:59,929
card when you made a backup and a family

548
00:23:59,929 --> 00:24:01,909
day at one point to use the same key for

549
00:24:01,909 --> 00:24:06,499
every single user so that keyboards

550
00:24:06,499 --> 00:24:08,149
obviously easily leaked because it's

551
00:24:08,149 --> 00:24:10,340
embedded in the application and then a

552
00:24:10,340 --> 00:24:12,110
whole lot of spyware that we saw on the

553
00:24:12,110 --> 00:24:15,080
MLS I just targeted that backup file and

554
00:24:15,080 --> 00:24:16,970
try to decrypt it steal it and so I

555
00:24:16,970 --> 00:24:19,220
think what's up change it has been years

556
00:24:19,220 --> 00:24:21,889
ago but still many many applications

557
00:24:21,889 --> 00:24:24,190
make the same mistake where they maybe

558
00:24:24,190 --> 00:24:27,470
think that kind of cryptography with

559
00:24:27,470 --> 00:24:28,789
embedded I could've talked of the

560
00:24:28,789 --> 00:24:30,590
secrets is secure when it's really not

561
00:24:30,590 --> 00:24:33,169
because obviously any kind of hacker can

562
00:24:33,169 --> 00:24:36,860
trivially extract cryptography secrets

563
00:24:36,860 --> 00:24:41,090
embedded in the application yeah but D

564
00:24:41,090 --> 00:24:42,379
compiling the code or something like

565
00:24:42,379 --> 00:24:44,389
that the last one is a little bit

566
00:24:44,389 --> 00:24:49,629
trickier leaking all of tokens or is

567
00:24:49,629 --> 00:24:52,999
surprisingly easy to misuse and it's

568
00:24:52,999 --> 00:24:56,119
surprisingly difficult and so if you if

569
00:24:56,119 --> 00:24:58,929
you google a little bit for OAuth

570
00:24:58,929 --> 00:25:02,419
problems appears mistakes and so on you

571
00:25:02,419 --> 00:25:04,009
learn a little bit about that it's maybe

572
00:25:04,009 --> 00:25:06,619
a less prevalent in Android application

573
00:25:06,619 --> 00:25:09,649
it happens but definitely far less than

574
00:25:09,649 --> 00:25:13,100
the first two categories so it's a so

575
00:25:13,100 --> 00:25:14,720
let's talk a bit about embedded third

576
00:25:14,720 --> 00:25:18,429
party secrets the canonical example is

577
00:25:18,429 --> 00:25:20,720
yeah you want to connect it together I

578
00:25:20,720 --> 00:25:22,669
think there's an open source library

579
00:25:22,669 --> 00:25:24,289
called past Widow neutrals you

580
00:25:24,289 --> 00:25:26,720
initialize it you paste consumer key

581
00:25:26,720 --> 00:25:30,350
consumer secret and then obviously every

582
00:25:30,350 --> 00:25:32,450
hacker or everybody who wants to do

583
00:25:32,450 --> 00:25:35,960
mischief if your if your API secrets of

584
00:25:35,960 --> 00:25:37,460
your you of if your Twitter API can

585
00:25:37,460 --> 00:25:39,270
extract these tokens can impress

586
00:25:39,270 --> 00:25:41,580
thank you and then maybe bad things are

587
00:25:41,580 --> 00:25:45,540
happening and so the question is what do

588
00:25:45,540 --> 00:25:50,360
we do first how do we find the problem

589
00:25:50,360 --> 00:25:53,790
to find the problem it would be nice if

590
00:25:53,790 --> 00:25:55,950
you had an understanding of what the

591
00:25:55,950 --> 00:26:00,390
most common embedded tokens are which

592
00:26:00,390 --> 00:26:01,770
means you have to understand which are

593
00:26:01,770 --> 00:26:05,090
the most common SDKs that I embedded and

594
00:26:05,090 --> 00:26:07,530
which of those use any kind of

595
00:26:07,530 --> 00:26:09,150
hard-coded credentials to authenticate

596
00:26:09,150 --> 00:26:12,710
right and common ones that we've seen is

597
00:26:12,710 --> 00:26:16,170
obviously there's Twitter Facebook

598
00:26:16,170 --> 00:26:21,870
Flickr there is Foursquare there is a

599
00:26:21,870 --> 00:26:26,100
mess on Web Services there is any kind

600
00:26:26,100 --> 00:26:27,450
of other cloud services like Google

601
00:26:27,450 --> 00:26:31,140
cloud and so on so those are very easy

602
00:26:31,140 --> 00:26:34,290
to look for and once again strings and

603
00:26:34,290 --> 00:26:38,430
key yes is actually very useful you look

604
00:26:38,430 --> 00:26:41,130
for key path word log and secret you

605
00:26:41,130 --> 00:26:42,990
can't really just use the strings on

606
00:26:42,990 --> 00:26:45,900
that because sometimes actually you can

607
00:26:45,900 --> 00:26:47,790
you can but very often it's it's much

608
00:26:47,790 --> 00:26:51,840
better to to use the decompile code

609
00:26:51,840 --> 00:26:53,460
because then you also get the easily in

610
00:26:53,460 --> 00:26:55,590
understanding of variable names function

611
00:26:55,590 --> 00:26:59,220
names class names package names that may

612
00:26:59,220 --> 00:27:01,350
also contain like these key birds and

613
00:27:01,350 --> 00:27:02,750
that makes it very nice to triage

614
00:27:02,750 --> 00:27:06,260
essentially quickly where's where's the

615
00:27:06,260 --> 00:27:11,640
problematic stuff happening remediation

616
00:27:11,640 --> 00:27:13,520
is interesting because it's difficult

617
00:27:13,520 --> 00:27:15,990
and just a lot of developers out there

618
00:27:15,990 --> 00:27:19,530
that ask on Stack Overflow or a lot of

619
00:27:19,530 --> 00:27:21,030
sources so what do i do i got these

620
00:27:21,030 --> 00:27:24,240
twitter api credentials but i know that

621
00:27:24,240 --> 00:27:26,040
everybody can just easily extract them

622
00:27:26,040 --> 00:27:27,720
for my application how do I protect that

623
00:27:27,720 --> 00:27:30,450
and the quick answer is you can't really

624
00:27:30,450 --> 00:27:34,700
unless you spin up a server and

625
00:27:34,700 --> 00:27:38,250
essentially you use your own server to

626
00:27:38,250 --> 00:27:42,840
proxy these this request to the Twitter

627
00:27:42,840 --> 00:27:44,580
API and you hide your your Twitter could

628
00:27:44,580 --> 00:27:47,070
be like credentials on the server you

629
00:27:47,070 --> 00:27:51,300
then do a per user authentication to

630
00:27:51,300 --> 00:27:52,650
your own server

631
00:27:52,650 --> 00:27:54,120
and then you can at least do some kind

632
00:27:54,120 --> 00:27:57,000
of abuse rating on your server to see if

633
00:27:57,000 --> 00:27:58,530
anybody abuses what's going on but if

634
00:27:58,530 --> 00:28:02,010
you embed your credentials in the app

635
00:28:02,010 --> 00:28:03,780
that everybody's gonna extract them of

636
00:28:03,780 --> 00:28:07,820
course now the good news this a lot of a

637
00:28:07,820 --> 00:28:11,820
lot of developers give you guidance on

638
00:28:11,820 --> 00:28:14,400
how to use their how to use their tokens

639
00:28:14,400 --> 00:28:16,950
how to embed them and so on and Twitter

640
00:28:16,950 --> 00:28:18,660
actually it says just a better I'm in

641
00:28:18,660 --> 00:28:21,210
the application and yeah deal with it

642
00:28:21,210 --> 00:28:24,390
but for the more severe stuff for a more

643
00:28:24,390 --> 00:28:26,700
potentially sensitive stuff like Amazon

644
00:28:26,700 --> 00:28:30,290
Web Services Amazon actually provides a

645
00:28:30,290 --> 00:28:33,840
wave for you to so you don't have to set

646
00:28:33,840 --> 00:28:35,460
up the third-party server yourself they

647
00:28:35,460 --> 00:28:37,980
have a whole set up for you that you can

648
00:28:37,980 --> 00:28:39,600
use and then you can use that to proxy

649
00:28:39,600 --> 00:28:40,860
requests and that makes it much easier

650
00:28:40,860 --> 00:28:44,300
to keep your stuff secure so that's nice

651
00:28:44,300 --> 00:28:46,100
[Music]

652
00:28:46,100 --> 00:28:48,360
from a developer's point of view you

653
00:28:48,360 --> 00:28:49,559
want to understand what are the

654
00:28:49,559 --> 00:28:51,570
potential abuses that can happen if my

655
00:28:51,570 --> 00:28:54,030
stuff gets extracted and then you want

656
00:28:54,030 --> 00:28:58,410
to formulate a plan to mitigate their

657
00:28:58,410 --> 00:29:02,429
negative effects of the abuse and that

658
00:29:02,429 --> 00:29:03,540
really depends it's hard to give

659
00:29:03,540 --> 00:29:04,650
guidance on that because it really

660
00:29:04,650 --> 00:29:06,120
depends on what you're trying to protect

661
00:29:06,120 --> 00:29:08,580
is there is a read operation that you're

662
00:29:08,580 --> 00:29:10,170
trying to protect is the right operation

663
00:29:10,170 --> 00:29:13,290
that you're trying to protect is it

664
00:29:13,290 --> 00:29:15,000
security critical yes or no maybe it's

665
00:29:15,000 --> 00:29:18,660
not and that's ok too so as a developer

666
00:29:18,660 --> 00:29:20,130
you have to think about it a little bit

667
00:29:20,130 --> 00:29:25,350
how much happening next category maybe

668
00:29:25,350 --> 00:29:27,570
not as probably prevalent on on Android

669
00:29:27,570 --> 00:29:30,420
as it is on other operating systems that

670
00:29:30,420 --> 00:29:33,510
are older especially because Android has

671
00:29:33,510 --> 00:29:37,559
a fairly nice sandboxing to protect the

672
00:29:37,559 --> 00:29:40,160
files of an application and so

673
00:29:40,160 --> 00:29:41,970
developers really have to make

674
00:29:41,970 --> 00:29:44,220
intentionally problematic if not

675
00:29:44,220 --> 00:29:46,470
outright bad decisions to enable a

676
00:29:46,470 --> 00:29:48,300
private file access but let's talk about

677
00:29:48,300 --> 00:29:52,920
a little bit for private file access we

678
00:29:52,920 --> 00:29:55,470
generally pay our $3,000 assuming it's

679
00:29:55,470 --> 00:29:58,590
security critical if someone just has

680
00:29:58,590 --> 00:30:03,510
the opportunity to access for example

681
00:30:03,510 --> 00:30:05,730
the applications default resources for

682
00:30:05,730 --> 00:30:06,240
example

683
00:30:06,240 --> 00:30:09,360
like the resources that are used to show

684
00:30:09,360 --> 00:30:11,730
images in a menu like icons or whatever

685
00:30:11,730 --> 00:30:14,760
if nothing I can can read those we don't

686
00:30:14,760 --> 00:30:15,780
care about it because it's not

687
00:30:15,780 --> 00:30:17,520
security-critical but if someone can

688
00:30:17,520 --> 00:30:19,559
read your own photos or your own private

689
00:30:19,559 --> 00:30:21,540
data may be worse than photos yeah

690
00:30:21,540 --> 00:30:22,950
definitely security critical and we

691
00:30:22,950 --> 00:30:28,230
payout private data sharing in the most

692
00:30:28,230 --> 00:30:30,780
abstract sense as a leak of that data to

693
00:30:30,780 --> 00:30:32,850
an attacker can happen in many ways

694
00:30:32,850 --> 00:30:34,470
maybe you accidentally write to sd card

695
00:30:34,470 --> 00:30:36,030
which doesn't belong to the SD card

696
00:30:36,030 --> 00:30:37,980
maybe you write a lot file and in that

697
00:30:37,980 --> 00:30:41,610
log file you log personally identifiable

698
00:30:41,610 --> 00:30:43,679
information or whatever but then it gets

699
00:30:43,679 --> 00:30:46,260
it very quickly very more interesting

700
00:30:46,260 --> 00:30:47,490
because there are a couple of security

701
00:30:47,490 --> 00:30:50,340
vulnerabilities are classes of security

702
00:30:50,340 --> 00:30:52,380
vulnerabilities there have been known to

703
00:30:52,380 --> 00:30:54,240
exist and essentially all operating

704
00:30:54,240 --> 00:30:56,850
systems for decades and they may still

705
00:30:56,850 --> 00:30:58,530
have more Android and they do have one

706
00:30:58,530 --> 00:31:00,120
Android they pay out for those fairly

707
00:31:00,120 --> 00:31:01,350
often especially for the one in the

708
00:31:01,350 --> 00:31:01,650
middle

709
00:31:01,650 --> 00:31:03,870
private data overwrite to the path

710
00:31:03,870 --> 00:31:07,140
traversal which essentially means that

711
00:31:07,140 --> 00:31:10,230
the attacker can specify a full path

712
00:31:10,230 --> 00:31:13,290
that doesn't get sanitized before an

713
00:31:13,290 --> 00:31:15,630
internal file is accessed and so the

714
00:31:15,630 --> 00:31:18,809
canonical example is or it used to be

715
00:31:18,809 --> 00:31:20,790
the canonical example when I I used to

716
00:31:20,790 --> 00:31:22,200
work closely with that stuff many years

717
00:31:22,200 --> 00:31:24,059
ago is that you have a web server that

718
00:31:24,059 --> 00:31:26,850
web server takes get request of a file

719
00:31:26,850 --> 00:31:29,190
name and then you do lot something like

720
00:31:29,190 --> 00:31:31,470
dot dot slash dot dot slash dot dot

721
00:31:31,470 --> 00:31:34,400
slash and then use the password whatever

722
00:31:34,400 --> 00:31:37,110
same as possible on Android except that

723
00:31:37,110 --> 00:31:40,910
instead of like getting in the users

724
00:31:40,910 --> 00:31:44,429
local admin credentials or whatever you

725
00:31:44,429 --> 00:31:48,300
get internal data of the the application

726
00:31:48,300 --> 00:31:50,670
which may be critical it may be even

727
00:31:50,670 --> 00:31:52,290
more critical if you can override it

728
00:31:52,290 --> 00:31:54,840
because if you can override it and if

729
00:31:54,840 --> 00:31:57,420
you can overwrite code then you may have

730
00:31:57,420 --> 00:32:00,600
the possibility to even get remote code

731
00:32:00,600 --> 00:32:02,820
execution or local code execution for

732
00:32:02,820 --> 00:32:04,890
which we pay out twenty thousand dollars

733
00:32:04,890 --> 00:32:07,020
for remote and four thousand dollars for

734
00:32:07,020 --> 00:32:10,200
local code execution when you get an

735
00:32:10,200 --> 00:32:11,970
application to essentially execute the

736
00:32:11,970 --> 00:32:15,000
code that you supply as an attacker the

737
00:32:15,000 --> 00:32:17,010
last one I really like because it's it's

738
00:32:17,010 --> 00:32:18,540
a very fun

739
00:32:18,540 --> 00:32:21,090
class or type of vulnerability private

740
00:32:21,090 --> 00:32:23,150
data overwrite you to zip file traversal

741
00:32:23,150 --> 00:32:25,590
it's a specialized form of the second

742
00:32:25,590 --> 00:32:30,980
one but it's not on anybody's radar and

743
00:32:30,980 --> 00:32:33,660
by default all the API I seem to be

744
00:32:33,660 --> 00:32:35,850
unsafe so it's it's very good it's very

745
00:32:35,850 --> 00:32:38,400
widespread and problematic probably not

746
00:32:38,400 --> 00:32:41,549
just an Android but across across

747
00:32:41,549 --> 00:32:45,120
operating systems and private data

748
00:32:45,120 --> 00:32:47,340
overwrite you to zip file traversal is

749
00:32:47,340 --> 00:32:50,340
it's very cool it essentially it starts

750
00:32:50,340 --> 00:32:53,720
with it's not different application that

751
00:32:53,720 --> 00:32:58,890
accepts or tries to read any kind of zip

752
00:32:58,890 --> 00:33:00,870
file that the attacker controls in some

753
00:33:00,870 --> 00:33:03,990
way can happen in any way maybe there's

754
00:33:03,990 --> 00:33:05,940
there's no official way that the

755
00:33:05,940 --> 00:33:08,220
application loads a plug-in may be

756
00:33:08,220 --> 00:33:09,720
already combined it with another

757
00:33:09,720 --> 00:33:11,280
vulnerability that gives you private

758
00:33:11,280 --> 00:33:12,990
file access or private file overwrite

759
00:33:12,990 --> 00:33:14,309
and then something really interesting

760
00:33:14,309 --> 00:33:17,880
happens when when the application opens

761
00:33:17,880 --> 00:33:20,520
the zip file tries to read it the

762
00:33:20,520 --> 00:33:23,160
content of the zip file is essentially a

763
00:33:23,160 --> 00:33:26,429
header that includes information about

764
00:33:26,429 --> 00:33:30,000
the directory structure and the file

765
00:33:30,000 --> 00:33:31,770
names inside the zip file and then does

766
00:33:31,770 --> 00:33:34,590
the the compressed the file entries read

767
00:33:34,590 --> 00:33:39,870
and the funny thing is that the attacker

768
00:33:39,870 --> 00:33:41,690
has full control over what that

769
00:33:41,690 --> 00:33:44,250
directory structure looks like the

770
00:33:44,250 --> 00:33:47,040
attackers full control over what the

771
00:33:47,040 --> 00:33:48,990
file names are like and so they don't

772
00:33:48,990 --> 00:33:52,740
just have to be like test dot txt they

773
00:33:52,740 --> 00:33:55,350
can be dot slash dot dot slash dot dot

774
00:33:55,350 --> 00:33:58,020
slash whatever and then anything that

775
00:33:58,020 --> 00:34:00,929
accesses any kind of sensitive data in

776
00:34:00,929 --> 00:34:04,490
the usually protected applications and

777
00:34:04,490 --> 00:34:07,559
this is not on any developers mind that

778
00:34:07,559 --> 00:34:10,168
they whenever they load a zip file they

779
00:34:10,168 --> 00:34:13,980
need to sanitize each and every file

780
00:34:13,980 --> 00:34:15,480
name and each and every file that are

781
00:34:15,480 --> 00:34:17,989
trying to unpack from a zip file and I

782
00:34:17,989 --> 00:34:21,389
think it's a fairly elegant way to to

783
00:34:21,389 --> 00:34:24,810
attack an application so how do you

784
00:34:24,810 --> 00:34:27,690
audit that luckily there's a standard

785
00:34:27,690 --> 00:34:29,639
API that you can search for in whatever

786
00:34:29,639 --> 00:34:32,129
application you look for as Java

787
00:34:32,129 --> 00:34:34,018
due to the zip there's also a couple of

788
00:34:34,018 --> 00:34:36,089
third-party zipping libraries a little

789
00:34:36,089 --> 00:34:38,309
bit of open source reconnaissance can

790
00:34:38,309 --> 00:34:40,049
help you looking at github was popular

791
00:34:40,049 --> 00:34:44,399
there and then understand if your

792
00:34:44,399 --> 00:34:47,909
application is in any way loading user

793
00:34:47,909 --> 00:34:51,210
provided zip files and even if it's not

794
00:34:51,210 --> 00:34:52,679
used to provide a zip file you may have

795
00:34:52,679 --> 00:34:55,109
a chance to do a data overwrite

796
00:34:55,109 --> 00:34:57,450
if the zip file that is being read by

797
00:34:57,450 --> 00:34:59,369
the application not sufficiently secured

798
00:34:59,369 --> 00:35:02,819
and if you have that you essentially

799
00:35:02,819 --> 00:35:05,220
have an entry point to craft certain

800
00:35:05,220 --> 00:35:09,630
kind of attacks against the application

801
00:35:09,630 --> 00:35:12,660
where they may leak data to you or you

802
00:35:12,660 --> 00:35:15,569
can get arbitrarily inside the

803
00:35:15,569 --> 00:35:16,890
application which is which is fairly

804
00:35:16,890 --> 00:35:24,150
neat for for developers they they need

805
00:35:24,150 --> 00:35:27,630
to validate that the canonical path of

806
00:35:27,630 --> 00:35:29,910
unzipped files points actually to the

807
00:35:29,910 --> 00:35:31,249
directory do you want to unzip to

808
00:35:31,249 --> 00:35:33,660
because otherwise its attacker

809
00:35:33,660 --> 00:35:36,749
controlled you can google for for

810
00:35:36,749 --> 00:35:38,369
examples on how to do that and with zip

811
00:35:38,369 --> 00:35:39,989
path traversal there's really nice

812
00:35:39,989 --> 00:35:41,819
examples that there people have written

813
00:35:41,819 --> 00:35:44,940
up so if you know up front as a

814
00:35:44,940 --> 00:35:47,069
developer that this is a vulnerability

815
00:35:47,069 --> 00:35:51,869
which many don't know then you will you

816
00:35:51,869 --> 00:35:52,589
be helped

817
00:35:52,589 --> 00:35:54,269
using these tutorials and blog posts

818
00:35:54,269 --> 00:35:58,589
that I found with the same very the next

819
00:35:58,589 --> 00:36:00,509
category is unprotected application

820
00:36:00,509 --> 00:36:02,670
parts unprotected application parts of a

821
00:36:02,670 --> 00:36:06,420
Android specific because they target the

822
00:36:06,420 --> 00:36:08,309
way that Android applications are

823
00:36:08,309 --> 00:36:09,930
structured and invaded Android

824
00:36:09,930 --> 00:36:13,140
applications actually communicating with

825
00:36:13,140 --> 00:36:15,690
each other Android was built with the

826
00:36:15,690 --> 00:36:18,089
vision that applications are supposed to

827
00:36:18,089 --> 00:36:19,559
communicate with each other and they've

828
00:36:19,559 --> 00:36:21,869
worked really nicely assuming all the

829
00:36:21,869 --> 00:36:22,979
applications are laying nice together

830
00:36:22,979 --> 00:36:26,279
but if there is suddenly a malicious

831
00:36:26,279 --> 00:36:29,339
application that can then send any kind

832
00:36:29,339 --> 00:36:30,960
of messages to or to harmless

833
00:36:30,960 --> 00:36:32,940
applications and try to get them to do

834
00:36:32,940 --> 00:36:34,819
stuff they don't really want to do and

835
00:36:34,819 --> 00:36:37,319
yeah it's fairly application as far as

836
00:36:37,319 --> 00:36:39,719
fairly Android specific and it's fairly

837
00:36:39,719 --> 00:36:41,339
interesting actually because people

838
00:36:41,339 --> 00:36:43,349
coming from other operating system don't

839
00:36:43,349 --> 00:36:45,170
necessarily think about that because

840
00:36:45,170 --> 00:36:47,359
of the central role that based on

841
00:36:47,359 --> 00:36:49,160
Android compared to other operating

842
00:36:49,160 --> 00:36:52,130
systems so it's a couple of different

843
00:36:52,130 --> 00:36:54,589
things that can be can be targeted by a

844
00:36:54,589 --> 00:36:56,630
malicious application in there if the

845
00:36:56,630 --> 00:36:58,640
vulnerability is hidden there we pay out

846
00:36:58,640 --> 00:37:01,579
usually $3,000 for those first one

847
00:37:01,579 --> 00:37:04,220
unprotected activity an activity is

848
00:37:04,220 --> 00:37:06,500
essentially a dialogue or a UI form or

849
00:37:06,500 --> 00:37:08,089
anything like that or window if you're

850
00:37:08,089 --> 00:37:11,630
coming from that world usually you want

851
00:37:11,630 --> 00:37:13,549
to have your your activity is protected

852
00:37:13,549 --> 00:37:15,200
if they're part of any kind of critical

853
00:37:15,200 --> 00:37:17,180
security flow imagine you have two

854
00:37:17,180 --> 00:37:19,819
activities one passwords and one that

855
00:37:19,819 --> 00:37:23,329
gives access to a sensitive data after

856
00:37:23,329 --> 00:37:25,700
the password is correct and if you don't

857
00:37:25,700 --> 00:37:27,559
protect your your second activity then

858
00:37:27,559 --> 00:37:29,059
maybe it's possible for an attacker to

859
00:37:29,059 --> 00:37:30,980
bypass that password activity and just

860
00:37:30,980 --> 00:37:32,539
hop onto the second one and start that

861
00:37:32,539 --> 00:37:34,549
so that's not great

862
00:37:34,549 --> 00:37:37,640
second one is unprotected services

863
00:37:37,640 --> 00:37:39,710
service is something like a background

864
00:37:39,710 --> 00:37:43,700
service the idea is extremely similar to

865
00:37:43,700 --> 00:37:47,950
unprotected activities just for services

866
00:37:47,950 --> 00:37:50,119
unprotected activities we get a lot of

867
00:37:50,119 --> 00:37:53,240
security reports there in the rewards

868
00:37:53,240 --> 00:37:55,690
program unprotected services not so much

869
00:37:55,690 --> 00:37:58,309
typos and custom permissions this one is

870
00:37:58,309 --> 00:38:01,099
really funny because applications can

871
00:38:01,099 --> 00:38:03,619
declare custom permissions to protect

872
00:38:03,619 --> 00:38:05,059
certain parts of the application and

873
00:38:05,059 --> 00:38:08,089
then only only applications that have

874
00:38:08,089 --> 00:38:11,869
been created that permission have access

875
00:38:11,869 --> 00:38:13,970
to that and so for example if you as a

876
00:38:13,970 --> 00:38:15,710
developer I have three applications that

877
00:38:15,710 --> 00:38:18,890
you want to you they all have access to

878
00:38:18,890 --> 00:38:22,880
sensitive data or say you are credit

879
00:38:22,880 --> 00:38:24,289
card information that you have that

880
00:38:24,289 --> 00:38:28,339
develop or whatever and that's nice you

881
00:38:28,339 --> 00:38:29,809
can protect that data and only make it

882
00:38:29,809 --> 00:38:33,680
available to or to all these other apps

883
00:38:33,680 --> 00:38:36,109
from the same developer but one thing

884
00:38:36,109 --> 00:38:38,119
you've seen is that in at least one

885
00:38:38,119 --> 00:38:41,420
report our rewards program someone

886
00:38:41,420 --> 00:38:43,460
declared a permission and then made a

887
00:38:43,460 --> 00:38:47,029
typo in the use and so you don't get any

888
00:38:47,029 --> 00:38:49,460
warning like that from like the compiler

889
00:38:49,460 --> 00:38:52,009
because you don't know who declares the

890
00:38:52,009 --> 00:38:53,779
permission and who actually is allowed

891
00:38:53,779 --> 00:38:56,029
to receive the permission in across the

892
00:38:56,029 --> 00:38:57,559
ecosystem there could be many apps like

893
00:38:57,559 --> 00:38:59,570
that

894
00:38:59,570 --> 00:39:01,800
and so essentially the whole permissions

895
00:39:01,800 --> 00:39:04,440
check was useless and it didn't work but

896
00:39:04,440 --> 00:39:06,630
developer didn't notice that until a

897
00:39:06,630 --> 00:39:08,670
hacker that worked referral program

898
00:39:08,670 --> 00:39:10,680
reported that that was a it's a very fun

899
00:39:10,680 --> 00:39:14,240
one very very Android specific I believe

900
00:39:14,240 --> 00:39:16,920
intent redirection we only pay out 500

901
00:39:16,920 --> 00:39:18,390
for that because it happens all the time

902
00:39:18,390 --> 00:39:20,490
and because it happens all the time I'm

903
00:39:20,490 --> 00:39:22,290
gonna spend my time on this section or

904
00:39:22,290 --> 00:39:24,589
intent reader Direction implicit

905
00:39:24,589 --> 00:39:26,990
broadcasts for sending and for receiving

906
00:39:26,990 --> 00:39:30,089
are the two last types of this category

907
00:39:30,089 --> 00:39:32,580
a broadcast is essentially a message

908
00:39:32,580 --> 00:39:34,230
that can be sent from one application to

909
00:39:34,230 --> 00:39:37,140
the other and it's also Vaid for an

910
00:39:37,140 --> 00:39:39,750
application to communicate with other

911
00:39:39,750 --> 00:39:42,570
parts of itself and so if navigation

912
00:39:42,570 --> 00:39:44,099
wants to communicate with other parts of

913
00:39:44,099 --> 00:39:47,940
itself it should make sure that it only

914
00:39:47,940 --> 00:39:51,660
processes broadcasts that are actually

915
00:39:51,660 --> 00:39:53,190
coming from itself and it should make

916
00:39:53,190 --> 00:39:55,830
sure that outgoing broadcasts should not

917
00:39:55,830 --> 00:39:58,020
be able to be intercepted from a

918
00:39:58,020 --> 00:40:00,480
malicious application because otherwise

919
00:40:00,480 --> 00:40:02,010
the malicious application can either

920
00:40:02,010 --> 00:40:03,839
steal sensitive data as part of that

921
00:40:03,839 --> 00:40:05,700
message or they can intercept the

922
00:40:05,700 --> 00:40:08,430
manipulated data which can also lead to

923
00:40:08,430 --> 00:40:12,119
all kinds of problems happens all the

924
00:40:12,119 --> 00:40:14,160
time too but not as often as Internet

925
00:40:14,160 --> 00:40:17,130
redirection so what is the intent

926
00:40:17,130 --> 00:40:21,080
redirection intent redirection is

927
00:40:21,080 --> 00:40:26,400
essentially a very common interface on a

928
00:40:26,400 --> 00:40:28,740
pretty common code pattern in Android

929
00:40:28,740 --> 00:40:31,619
applications the way it works is you get

930
00:40:31,619 --> 00:40:34,650
an intent which is some kind of message

931
00:40:34,650 --> 00:40:37,890
you handle a kind of message and and

932
00:40:37,890 --> 00:40:44,880
then you start doing something as part

933
00:40:44,880 --> 00:40:48,089
of that incoming message usually for

934
00:40:48,089 --> 00:40:49,560
intent redirection and you stop an

935
00:40:49,560 --> 00:40:51,570
activity so you get a message that says

936
00:40:51,570 --> 00:40:54,300
start an activity and the activity that

937
00:40:54,300 --> 00:40:56,250
you start is actually given to you the

938
00:40:56,250 --> 00:40:58,170
message and so why is that why is that

939
00:40:58,170 --> 00:41:01,380
problematic because I talked about

940
00:41:01,380 --> 00:41:03,000
unprotected activity it's just two

941
00:41:03,000 --> 00:41:05,099
slides ago and that is a very common way

942
00:41:05,099 --> 00:41:08,900
for malicious application to trick a

943
00:41:08,900 --> 00:41:11,220
benign application

944
00:41:11,220 --> 00:41:13,619
to open a protected activity indirectly

945
00:41:13,619 --> 00:41:15,990
it's essentially a type of confused

946
00:41:15,990 --> 00:41:20,790
deputy problem the the good application

947
00:41:20,790 --> 00:41:22,770
accepts a message that says please open

948
00:41:22,770 --> 00:41:25,050
this internal usually protects activity

949
00:41:25,050 --> 00:41:27,329
but it the good application doesn't

950
00:41:27,329 --> 00:41:29,310
check who gave the command and so a

951
00:41:29,310 --> 00:41:32,460
malicious application can can

952
00:41:32,460 --> 00:41:35,190
essentially start an activity and once

953
00:41:35,190 --> 00:41:36,990
you realize that Nativity doesn't have

954
00:41:36,990 --> 00:41:38,819
to be a UI dialog or anything like that

955
00:41:38,819 --> 00:41:41,190
but can also be something very sensitive

956
00:41:41,190 --> 00:41:43,829
like maybe doesn't activity that says oh

957
00:41:43,829 --> 00:41:45,599
yeah every time I'm started I send

958
00:41:45,599 --> 00:41:48,540
photos to a specified URL then suddenly

959
00:41:48,540 --> 00:41:50,250
this turns into an attack backdoor where

960
00:41:50,250 --> 00:41:52,680
the attacker specifies Oh start this

961
00:41:52,680 --> 00:41:55,050
activity and send all the photos to this

962
00:41:55,050 --> 00:41:57,329
attacker specified URL and then suddenly

963
00:41:57,329 --> 00:41:59,220
all you are all your stuff gets stolen

964
00:41:59,220 --> 00:42:01,650
and that's not a good place to be in and

965
00:42:01,650 --> 00:42:04,079
it's very very common in Android

966
00:42:04,079 --> 00:42:07,200
applications unfortunately so how do you

967
00:42:07,200 --> 00:42:10,380
audit that all I would start with

968
00:42:10,380 --> 00:42:12,510
finding or call a calls of start

969
00:42:12,510 --> 00:42:16,200
activity I would audit that and then I

970
00:42:16,200 --> 00:42:18,230
would verify that intent components

971
00:42:18,230 --> 00:42:23,030
constructed from trusted data and

972
00:42:23,030 --> 00:42:25,290
granted I acknowledge that this is not

973
00:42:25,290 --> 00:42:27,329
very easy because especially on a

974
00:42:27,329 --> 00:42:28,710
fast-moving program with lots of

975
00:42:28,710 --> 00:42:29,940
developers this is essentially a

976
00:42:29,940 --> 00:42:33,180
never-ending battle from a defensive

977
00:42:33,180 --> 00:42:34,800
point of view I would just write my own

978
00:42:34,800 --> 00:42:38,220
secure libraries to do that but I don't

979
00:42:38,220 --> 00:42:39,990
think this problem has been solved by

980
00:42:39,990 --> 00:42:42,770
any besides maybe most

981
00:42:42,770 --> 00:42:46,099
security-conscious developers on Android

982
00:42:46,099 --> 00:42:49,290
yeah I also want to find the cost intent

983
00:42:49,290 --> 00:42:52,020
get extras get extras is where whoever

984
00:42:52,020 --> 00:42:54,270
sending a message be the attacker or not

985
00:42:54,270 --> 00:42:57,450
can essentially give extra information

986
00:42:57,450 --> 00:42:59,880
that the application that is attacked is

987
00:42:59,880 --> 00:43:04,680
processing and you want to check that

988
00:43:04,680 --> 00:43:08,310
everything is actually arriving from an

989
00:43:08,310 --> 00:43:10,890
application either yourself or a partner

990
00:43:10,890 --> 00:43:12,660
application that is benign that you

991
00:43:12,660 --> 00:43:14,670
expect it to come from it's not enough

992
00:43:14,670 --> 00:43:16,770
to check the target class name because

993
00:43:16,770 --> 00:43:20,720
malware can reuse your class names and

994
00:43:21,410 --> 00:43:23,550
essentially manipulate your application

995
00:43:23,550 --> 00:43:25,850
in that way so it's a very calm

996
00:43:25,850 --> 00:43:29,600
a remediation is always check last name

997
00:43:29,600 --> 00:43:31,400
and package name of the target component

998
00:43:31,400 --> 00:43:34,010
not just a class name and ideally also

999
00:43:34,010 --> 00:43:35,960
check the signing PF the app that owns a

1000
00:43:35,960 --> 00:43:37,280
target come phone and you only want to

1001
00:43:37,280 --> 00:43:40,190
send it to - you only want to send your

1002
00:43:40,190 --> 00:43:41,840
private messages to her to the known

1003
00:43:41,840 --> 00:43:44,060
verified receiver and not to a random

1004
00:43:44,060 --> 00:43:50,860
application right other is essentially a

1005
00:43:51,430 --> 00:43:53,960
catch-all category of vulnerabilities

1006
00:43:53,960 --> 00:43:55,340
all the ones that are kind of one-off

1007
00:43:55,340 --> 00:43:56,720
don't really fit into that

1008
00:43:56,720 --> 00:43:59,320
so what we're commonly see here is

1009
00:43:59,320 --> 00:44:01,670
incorrect your L verification is so

1010
00:44:01,670 --> 00:44:03,830
common that we don't radiate or $500

1011
00:44:03,830 --> 00:44:05,450
reward but it's actually fairly

1012
00:44:05,450 --> 00:44:08,540
interesting that's why I picked it here

1013
00:44:08,540 --> 00:44:10,730
then we have cross app scripting which

1014
00:44:10,730 --> 00:44:13,670
is incredibly common $50,000 reward for

1015
00:44:13,670 --> 00:44:14,860
probably gonna don't create that

1016
00:44:14,860 --> 00:44:17,750
incorrect sandboxing of scripting

1017
00:44:17,750 --> 00:44:19,910
language $22,000 reward because that

1018
00:44:19,910 --> 00:44:22,520
usually leads to some kind of code

1019
00:44:22,520 --> 00:44:23,930
execution if it's locally it's four

1020
00:44:23,930 --> 00:44:26,150
thousand dollars if it's remote twenty

1021
00:44:26,150 --> 00:44:28,820
thousand dollars the easiest example is

1022
00:44:28,820 --> 00:44:30,860
you embed a scripting language or

1023
00:44:30,860 --> 00:44:32,990
interpreter in your application and then

1024
00:44:32,990 --> 00:44:37,160
you somehow provide a way for the for

1025
00:44:37,160 --> 00:44:39,890
the attacker to give your script for

1026
00:44:39,890 --> 00:44:41,180
example a Python script that you can

1027
00:44:41,180 --> 00:44:43,190
happily execute and then the Python

1028
00:44:43,190 --> 00:44:45,020
script just seals all your internal data

1029
00:44:45,020 --> 00:44:46,490
and uploads it to a website

1030
00:44:46,490 --> 00:44:49,430
unprotected data and server we pay our

1031
00:44:49,430 --> 00:44:51,380
three thousand dollars it's not really

1032
00:44:51,380 --> 00:44:53,090
an application security problem is more

1033
00:44:53,090 --> 00:44:55,370
like a server configuration problem but

1034
00:44:55,370 --> 00:44:57,760
we don't distinguish between those

1035
00:44:57,760 --> 00:45:00,800
that's the other so in correct URL

1036
00:45:00,800 --> 00:45:05,780
verification for some reason it's a very

1037
00:45:05,780 --> 00:45:08,960
common pattern on Android for developers

1038
00:45:08,960 --> 00:45:11,540
to try to verify that they are

1039
00:45:11,540 --> 00:45:13,730
connecting to a certain website that

1040
00:45:13,730 --> 00:45:15,680
they control or reading data from a

1041
00:45:15,680 --> 00:45:19,580
certain website ad control and there's a

1042
00:45:19,580 --> 00:45:22,490
lot of ways to get this wrong like a lot

1043
00:45:22,490 --> 00:45:25,430
of ways to get this wrong and here's a

1044
00:45:25,430 --> 00:45:28,940
very common way of one of the many

1045
00:45:28,940 --> 00:45:32,060
common ways is you care for URI you call

1046
00:45:32,060 --> 00:45:33,980
the host of that and then you look if it

1047
00:45:33,980 --> 00:45:35,990
ends with your website calm right and

1048
00:45:35,990 --> 00:45:37,950
obviously any attacker

1049
00:45:37,950 --> 00:45:41,490
for example just register like haha I

1050
00:45:41,490 --> 00:45:45,660
hacked my website calm and then you

1051
00:45:45,660 --> 00:45:47,730
would fit that check okay the next level

1052
00:45:47,730 --> 00:45:49,740
would be instead of using ends with they

1053
00:45:49,740 --> 00:45:54,119
can just do a complete equals doesn't

1054
00:45:54,119 --> 00:45:57,329
help you I am I looked up I actually

1055
00:45:57,329 --> 00:45:59,730
asked around at Google like how do we

1056
00:45:59,730 --> 00:46:03,839
securely securely verified that a URL

1057
00:46:03,839 --> 00:46:05,310
actually belongs to a website that I

1058
00:46:05,310 --> 00:46:09,119
control and it turns out we have code

1059
00:46:09,119 --> 00:46:10,109
for that that I would love to

1060
00:46:10,109 --> 00:46:11,970
open-source but I have that time yet and

1061
00:46:11,970 --> 00:46:14,190
will take a while and it's like three

1062
00:46:14,190 --> 00:46:15,480
hundred to five hundred lines of code

1063
00:46:15,480 --> 00:46:17,280
long so it's actually really complicated

1064
00:46:17,280 --> 00:46:21,720
to verify that a certain URL is is

1065
00:46:21,720 --> 00:46:23,609
controlled by you or on your application

1066
00:46:23,609 --> 00:46:27,750
and that's carry it down so auditing if

1067
00:46:27,750 --> 00:46:29,190
you want to you want to find every

1068
00:46:29,190 --> 00:46:31,260
instance of URLs being used in the

1069
00:46:31,260 --> 00:46:33,300
application you want to narrow it down

1070
00:46:33,300 --> 00:46:34,920
to those that work on user controlled

1071
00:46:34,920 --> 00:46:36,869
input and then you want to narrow it

1072
00:46:36,869 --> 00:46:39,859
down even more ideally to the ones that

1073
00:46:39,859 --> 00:46:44,220
this data or whatever or URL name is

1074
00:46:44,220 --> 00:46:46,770
used to distinguish between code paths

1075
00:46:46,770 --> 00:46:48,599
right maybe in an if statement they mean

1076
00:46:48,599 --> 00:46:52,050
in a loop of some sort um we see all

1077
00:46:52,050 --> 00:46:54,060
kinds of URL verification mistakes not

1078
00:46:54,060 --> 00:46:56,670
just the hostname can be anything you

1079
00:46:56,670 --> 00:47:00,230
can't even maybe bypass by the typical

1080
00:47:00,230 --> 00:47:02,550
combo that we see in attacks not just an

1081
00:47:02,550 --> 00:47:04,079
Android but also like on the web that

1082
00:47:04,079 --> 00:47:07,200
your inject like fake user password or

1083
00:47:07,200 --> 00:47:09,230
you inject a question mark that was not

1084
00:47:09,230 --> 00:47:12,630
not expected answer on and the very cool

1085
00:47:12,630 --> 00:47:15,300
stuff is that someone who is one of our

1086
00:47:15,300 --> 00:47:17,670
bug bounty contributors actually wrote

1087
00:47:17,670 --> 00:47:20,069
up a very nice report that is called

1088
00:47:20,069 --> 00:47:22,079
golden techniques to bypass post

1089
00:47:22,079 --> 00:47:25,710
valuations and Android apps and if you

1090
00:47:25,710 --> 00:47:28,800
read that it will give you it will give

1091
00:47:28,800 --> 00:47:31,950
you an idea of just how complicated it

1092
00:47:31,950 --> 00:47:35,339
is to to verify that the URL is actually

1093
00:47:35,339 --> 00:47:37,260
controlled by you and pointing to the

1094
00:47:37,260 --> 00:47:40,800
server that you expect it also of course

1095
00:47:40,800 --> 00:47:42,480
from a hacker perspective how you how

1096
00:47:42,480 --> 00:47:44,369
you can bypass a lot of these host

1097
00:47:44,369 --> 00:47:46,920
validation checks for developers the

1098
00:47:46,920 --> 00:47:48,930
only remediation I have is you have to

1099
00:47:48,930 --> 00:47:50,369
create a library with the help of your

1100
00:47:50,369 --> 00:47:50,690
secure

1101
00:47:50,690 --> 00:47:52,640
team that you will always use from now

1102
00:47:52,640 --> 00:47:55,640
on at least until I get to the point

1103
00:47:55,640 --> 00:47:57,410
where maybe one day Google can open

1104
00:47:57,410 --> 00:47:59,750
stores our own library and then

1105
00:47:59,750 --> 00:48:04,280
everybody can use that so I have a bonus

1106
00:48:04,280 --> 00:48:06,020
if you have more time we don't really

1107
00:48:06,020 --> 00:48:07,490
have more time but I'll fly through it

1108
00:48:07,490 --> 00:48:09,740
I've got 10 minutes so I already talked

1109
00:48:09,740 --> 00:48:12,050
about incorrect sandboxing or scripting

1110
00:48:12,050 --> 00:48:14,270
language the the canonical example is

1111
00:48:14,270 --> 00:48:17,390
really ok interpret include a Python

1112
00:48:17,390 --> 00:48:19,819
interpreter and then suddenly I get the

1113
00:48:19,819 --> 00:48:21,770
Python interpreter to execute malicious

1114
00:48:21,770 --> 00:48:23,510
scripts that have full access to

1115
00:48:23,510 --> 00:48:25,339
anything that's going on in my

1116
00:48:25,339 --> 00:48:27,050
application in my applications private

1117
00:48:27,050 --> 00:48:28,609
data has access to all the permissions

1118
00:48:28,609 --> 00:48:30,290
that have been granted to my application

1119
00:48:30,290 --> 00:48:33,530
and so on but we haven't actually had a

1120
00:48:33,530 --> 00:48:35,450
vulnerability report that looks as

1121
00:48:35,450 --> 00:48:37,490
straight for what is this one we've had

1122
00:48:37,490 --> 00:48:39,319
a very funny one like a very funny one I

1123
00:48:39,319 --> 00:48:43,160
think is amazing imagine there's an

1124
00:48:43,160 --> 00:48:45,050
application that has some kind of social

1125
00:48:45,050 --> 00:48:46,790
functionality and as part of that social

1126
00:48:46,790 --> 00:48:49,040
functionality you can create user

1127
00:48:49,040 --> 00:48:50,930
profiles you can create your own account

1128
00:48:50,930 --> 00:48:52,910
images that show up in your here avatar

1129
00:48:52,910 --> 00:48:54,710
and you chat with other people or

1130
00:48:54,710 --> 00:48:58,400
whatever and it turns out that app in

1131
00:48:58,400 --> 00:48:59,660
that app that actually has a repository

1132
00:48:59,660 --> 00:49:01,550
of our tasks that people can choose from

1133
00:49:01,550 --> 00:49:03,920
and users can upload their own to share

1134
00:49:03,920 --> 00:49:06,710
with others and so they used a fairly

1135
00:49:06,710 --> 00:49:08,660
convoluted image format for that that

1136
00:49:08,660 --> 00:49:10,609
fairly convoluted image format has a

1137
00:49:10,609 --> 00:49:12,710
scripting language embedded and that

1138
00:49:12,710 --> 00:49:14,720
scripting language was kind of sandbox

1139
00:49:14,720 --> 00:49:16,880
but not properly and so an attacker

1140
00:49:16,880 --> 00:49:19,940
could actually craft scripts create an

1141
00:49:19,940 --> 00:49:22,130
image with these crafted scripts upload

1142
00:49:22,130 --> 00:49:24,380
it to the repository have other people

1143
00:49:24,380 --> 00:49:27,730
download these crafted images and then

1144
00:49:27,730 --> 00:49:30,670
essentially execute code on the victims

1145
00:49:30,670 --> 00:49:33,579
Android devices inside the context of

1146
00:49:33,579 --> 00:49:36,230
the the social media application

1147
00:49:36,230 --> 00:49:39,740
whatever I divorce because every time I

1148
00:49:39,740 --> 00:49:41,450
don't actually know when but sometimes

1149
00:49:41,450 --> 00:49:43,339
when they may be the the avatar was

1150
00:49:43,339 --> 00:49:45,560
applied that the malicious script was

1151
00:49:45,560 --> 00:49:49,010
executed and we paid out $20,000 for

1152
00:49:49,010 --> 00:49:51,440
that I think in the I'm not sure if he

1153
00:49:51,440 --> 00:49:53,510
paid it out but we about to pay $20,000

1154
00:49:53,510 --> 00:49:56,450
for that so if the hacker who actually

1155
00:49:56,450 --> 00:49:58,730
reported that to us it's good news for

1156
00:49:58,730 --> 00:50:01,849
him or her I don't know

1157
00:50:01,849 --> 00:50:04,190
and that's just a very crafty attack

1158
00:50:04,190 --> 00:50:07,039
that I think is incredibly sleek yet

1159
00:50:07,039 --> 00:50:11,690
incredibly cool I'm gonna pass that I'm

1160
00:50:11,690 --> 00:50:15,459
running out of time just so I've got

1161
00:50:15,459 --> 00:50:17,299
thank you very much I really appreciate

1162
00:50:17,299 --> 00:50:19,789
that really appreciate you listening to

1163
00:50:19,789 --> 00:50:22,160
my presentation I would encourage

1164
00:50:22,160 --> 00:50:25,160
everybody to start reporting issues to

1165
00:50:25,160 --> 00:50:27,049
the Google Play security rewards program

1166
00:50:27,049 --> 00:50:29,569
the targets are very soft there's a lot

1167
00:50:29,569 --> 00:50:32,509
of money to be made especially right now

1168
00:50:32,509 --> 00:50:34,910
and Android is fairly easy to understand

1169
00:50:34,910 --> 00:50:36,339
thanks to the tooling that's available

1170
00:50:36,339 --> 00:50:39,199
thanks to being primarily written in

1171
00:50:39,199 --> 00:50:43,640
Java and Cortland these days and I think

1172
00:50:43,640 --> 00:50:45,199
that makes for great hacking environment

1173
00:50:45,199 --> 00:50:47,869
so thank you very much folks thanks

1174
00:50:47,869 --> 00:50:50,690
Sebastian can you quickly kind of go

1175
00:50:50,690 --> 00:50:54,859
through how the Google Play rewards

1176
00:50:54,859 --> 00:50:57,170
program works in terms of researchers

1177
00:50:57,170 --> 00:50:59,509
reporting a bug and just kind of go over

1178
00:50:59,509 --> 00:51:00,709
that real quickly because we had a

1179
00:51:00,709 --> 00:51:02,359
couple questions in chat so I thought

1180
00:51:02,359 --> 00:51:04,160
I'd be helpful since you have a couple

1181
00:51:04,160 --> 00:51:07,819
minutes I do I don't do that so first

1182
00:51:07,819 --> 00:51:08,989
thing you do is you go to Google Play

1183
00:51:08,989 --> 00:51:14,089
which is hosted on a hackathon and you

1184
00:51:14,089 --> 00:51:15,529
read the rules of engagement and

1185
00:51:15,529 --> 00:51:17,119
everything then you decide okay I wanna

1186
00:51:17,119 --> 00:51:19,369
I want to participate right and the way

1187
00:51:19,369 --> 00:51:24,829
it goes is essentially the important

1188
00:51:24,829 --> 00:51:28,130
part is here so we don't want to be in

1189
00:51:28,130 --> 00:51:29,359
the position that we essentially

1190
00:51:29,359 --> 00:51:32,359
proconsi row days for applications you

1191
00:51:32,359 --> 00:51:33,739
know we don't care about us we don't

1192
00:51:33,739 --> 00:51:35,839
even want those right and so the very

1193
00:51:35,839 --> 00:51:38,660
first thing you need to do is you find a

1194
00:51:38,660 --> 00:51:40,880
bug that's security critical you report

1195
00:51:40,880 --> 00:51:42,619
it to a developer ideally they already

1196
00:51:42,619 --> 00:51:44,839
have a security program and it doesn't

1197
00:51:44,839 --> 00:51:46,910
matter buddy have it self hosted hacker

1198
00:51:46,910 --> 00:51:48,799
born crowd doesn't matter you

1199
00:51:48,799 --> 00:51:53,059
report it to them and you wait until

1200
00:51:53,059 --> 00:51:55,459
it's fixed and after he has been fixed

1201
00:51:55,459 --> 00:51:58,339
you report it to us and we get in

1202
00:51:58,339 --> 00:52:00,769
contact with the developer the ask time

1203
00:52:00,769 --> 00:52:03,650
hey this person reported this ticket to

1204
00:52:03,650 --> 00:52:05,930
us about but they fixed and then the

1205
00:52:05,930 --> 00:52:07,459
developer confirms yes that really

1206
00:52:07,459 --> 00:52:09,229
happened and let me just pay you money

1207
00:52:09,229 --> 00:52:13,190
and so it's very easy you report to be

1208
00:52:13,190 --> 00:52:15,349
confirmed we payout that's all there is

1209
00:52:15,349 --> 00:52:17,220
to it

1210
00:52:17,220 --> 00:52:21,849
to be I thought okay we've got another

1211
00:52:21,849 --> 00:52:24,039
question that just came in through chat

1212
00:52:24,039 --> 00:52:26,859
that said asked what is the best way to

1213
00:52:26,859 --> 00:52:29,349
get an apk from a device that is not

1214
00:52:29,349 --> 00:52:32,680
rooted can I trust any third party apk

1215
00:52:32,680 --> 00:52:38,259
hosting websites um I thought it's

1216
00:52:38,259 --> 00:52:43,359
interesting right where do i download my

1217
00:52:43,359 --> 00:52:46,450
apks I I just if I don't have access to

1218
00:52:46,450 --> 00:52:48,700
like at my google tools I just go to the

1219
00:52:48,700 --> 00:52:51,849
one of the APK mirroring sites if you

1220
00:52:51,849 --> 00:52:59,049
are if you're if you are paranoid check

1221
00:52:59,049 --> 00:53:01,930
the signing key see if the signing key

1222
00:53:01,930 --> 00:53:04,059
makes sense you can go to virustotal

1223
00:53:04,059 --> 00:53:05,890
look for the signing key look for the

1224
00:53:05,890 --> 00:53:08,829
hash I'm not that paranoid I'm actually

1225
00:53:08,829 --> 00:53:12,339
fairly liberal with what I what I run on

1226
00:53:12,339 --> 00:53:16,869
my systems I also have throwaway devices

1227
00:53:16,869 --> 00:53:18,309
obviously because I'm working in the

1228
00:53:18,309 --> 00:53:21,630
malware field the meta analysis field I

1229
00:53:21,630 --> 00:53:24,549
don't think you have to be a so paranoid

1230
00:53:24,549 --> 00:53:27,339
if you use one of the very common APK

1231
00:53:27,339 --> 00:53:34,359
mirroring sites that out there well that

1232
00:53:34,359 --> 00:53:36,519
those were the main couple questions

1233
00:53:36,519 --> 00:53:39,339
that came in through trap but um you're

1234
00:53:39,339 --> 00:53:41,589
getting a round of applause in the

1235
00:53:41,589 --> 00:53:44,319
twitch chat so thank you very much

1236
00:53:44,319 --> 00:53:46,750
Sebastian for this talk a lot of people

1237
00:53:46,750 --> 00:53:49,869
appreciated it no problem I'm gonna hang

1238
00:53:49,869 --> 00:53:52,180
out for a little bit on this court the

1239
00:53:52,180 --> 00:53:56,380
back row Chet I'm SP there and in twitch

1240
00:53:56,380 --> 00:53:56,769
chat

1241
00:53:56,769 --> 00:53:59,710
I'm SPO rsts pores that's my name so if

1242
00:53:59,710 --> 00:54:01,210
anybody has any questions please let me

1243
00:54:01,210 --> 00:54:05,619
know dropping off the video now thank

1244
00:54:05,619 --> 00:54:06,290
you very much again

1245
00:54:06,290 --> 00:54:09,329
[Music]

