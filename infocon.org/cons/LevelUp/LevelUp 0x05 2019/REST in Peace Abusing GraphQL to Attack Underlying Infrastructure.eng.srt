1
00:00:07,500 --> 00:00:09,730
all right Matt well I'm excited about

2
00:00:09,730 --> 00:00:10,809
this one

3
00:00:10,809 --> 00:00:12,970
I I reached

4
00:00:12,970 --> 00:00:15,340
about this talk because graph QL is

5
00:00:15,340 --> 00:00:18,550
coming up more and more in bug crowds

6
00:00:18,550 --> 00:00:20,500
bug bounties and we've actually been

7
00:00:20,500 --> 00:00:22,840
trying to find more people that have

8
00:00:22,840 --> 00:00:25,480
this specific skillset so I was excited

9
00:00:25,480 --> 00:00:26,919
that someone like you is out there

10
00:00:26,919 --> 00:00:31,090
already talking about this stuff so you

11
00:00:31,090 --> 00:00:33,519
know without further ado you're welcome

12
00:00:33,519 --> 00:00:36,100
to take it away Matt and we've got a

13
00:00:36,100 --> 00:00:38,470
live chat on our twitch channel if you

14
00:00:38,470 --> 00:00:40,330
want to if you're able to load that up

15
00:00:40,330 --> 00:00:42,730
and watch that or if we have time at the

16
00:00:42,730 --> 00:00:44,410
end of the talk we can take questions

17
00:00:44,410 --> 00:00:47,410
from the twitch chat and you know answer

18
00:00:47,410 --> 00:00:49,660
it with a stream cool I'll probably just

19
00:00:49,660 --> 00:00:53,010
hit them up at the end cool sounds good

20
00:00:53,010 --> 00:00:55,390
cool thanks for having me on I really

21
00:00:55,390 --> 00:00:56,649
appreciate it

22
00:00:56,649 --> 00:01:01,570
I found my first kind of interaction

23
00:01:01,570 --> 00:01:04,119
with graph QL was when I was doing a

24
00:01:04,119 --> 00:01:06,340
hack the Box just kind of playing around

25
00:01:06,340 --> 00:01:07,810
on there and I ran into this endpoint

26
00:01:07,810 --> 00:01:12,300
that looked a little bit strange and

27
00:01:12,300 --> 00:01:14,890
accepted requests and gave responses

28
00:01:14,890 --> 00:01:16,119
that were a little bit strange and after

29
00:01:16,119 --> 00:01:17,440
doing some digging I realized it was

30
00:01:17,440 --> 00:01:20,679
this thing called graph QL and I thought

31
00:01:20,679 --> 00:01:23,920
you know if I never have heard of this

32
00:01:23,920 --> 00:01:25,330
maybe there's other people that have

33
00:01:25,330 --> 00:01:26,950
never heard of this and you could easily

34
00:01:26,950 --> 00:01:30,130
be testing an endpoint like this and not

35
00:01:30,130 --> 00:01:32,770
actually realize what you have in front

36
00:01:32,770 --> 00:01:35,590
of you so I did some research and I kind

37
00:01:35,590 --> 00:01:37,929
of put this talk together along with

38
00:01:37,929 --> 00:01:40,030
built a tool but I'll show at the end

39
00:01:40,030 --> 00:01:43,690
that helps you do ten testing of the of

40
00:01:43,690 --> 00:01:46,599
this infrastructure because the way it

41
00:01:46,599 --> 00:01:50,050
works is pretty interesting so my talk

42
00:01:50,050 --> 00:01:52,360
is called rest and peace abusing graph

43
00:01:52,360 --> 00:01:53,979
QL to attack underlying infrastructure

44
00:01:53,979 --> 00:01:56,590
and I say rest in peace because graph

45
00:01:56,590 --> 00:02:02,069
geo is kind of designed to replace rest

46
00:02:02,069 --> 00:02:04,800
in a way and solve some of the problems

47
00:02:04,800 --> 00:02:10,209
so you know that my gotta say that

48
00:02:10,209 --> 00:02:11,590
nothing I like a lot reflects views my

49
00:02:11,590 --> 00:02:14,620
employer all that good stuff so today

50
00:02:14,620 --> 00:02:16,780
we're gonna kind of talk about graph QL

51
00:02:16,780 --> 00:02:20,319
what a high-level understand kind of

52
00:02:20,319 --> 00:02:22,330
what it is just enough to be dangerous

53
00:02:22,330 --> 00:02:24,250
we're not going to go too deep in the

54
00:02:24,250 --> 00:02:25,380
weeds because there's a

55
00:02:25,380 --> 00:02:27,780
documentation around it we're gonna take

56
00:02:27,780 --> 00:02:29,760
some take a look at some of the

57
00:02:29,760 --> 00:02:31,500
vulnerabilities in the wild that have

58
00:02:31,500 --> 00:02:34,890
been disclosed surrounding using graph

59
00:02:34,890 --> 00:02:38,250
QL we're gonna look at how to abuse it

60
00:02:38,250 --> 00:02:40,050
and some attack techniques and at the

61
00:02:40,050 --> 00:02:42,990
end kind of some ways if you are a

62
00:02:42,990 --> 00:02:45,150
developer working with graph QL you can

63
00:02:45,150 --> 00:02:49,050
protect it so first you know like what

64
00:02:49,050 --> 00:02:51,990
is grad q well well graph fuel was

65
00:02:51,990 --> 00:02:55,080
created by facebook for internal use in

66
00:02:55,080 --> 00:02:58,590
2012 i believe they used it for their

67
00:02:58,590 --> 00:03:00,930
messenger app or something like that not

68
00:03:00,930 --> 00:03:02,790
entirely sure but it was released open

69
00:03:02,790 --> 00:03:06,300
source in 2015 and it's essentially a

70
00:03:06,300 --> 00:03:09,870
query language for your api as well as a

71
00:03:09,870 --> 00:03:11,760
server-side runtime for executing those

72
00:03:11,760 --> 00:03:14,400
queries using a type system that you can

73
00:03:14,400 --> 00:03:19,230
define custom to your data so that gives

74
00:03:19,230 --> 00:03:20,850
it a lot of flexibility and we're gonna

75
00:03:20,850 --> 00:03:23,190
talk about what that means a little bit

76
00:03:23,190 --> 00:03:26,550
later also like i said it was designed

77
00:03:26,550 --> 00:03:29,370
to solve some of the problems that rest

78
00:03:29,370 --> 00:03:32,730
API is suffered from mainly having to

79
00:03:32,730 --> 00:03:35,970
make a lot of requests to a lot of

80
00:03:35,970 --> 00:03:37,590
different endpoints to get data back

81
00:03:37,590 --> 00:03:40,280
that you kind of have to you know

82
00:03:40,280 --> 00:03:45,810
process and display in a way so it

83
00:03:45,810 --> 00:03:48,960
decreases latency a lot because with

84
00:03:48,960 --> 00:03:53,130
graph QL you can just make one query to

85
00:03:53,130 --> 00:03:55,710
a query API and get large amounts of

86
00:03:55,710 --> 00:03:57,630
complex data back all on a single

87
00:03:57,630 --> 00:04:01,770
request so as what was the fact that you

88
00:04:01,770 --> 00:04:03,900
can kind of integrate it with your

89
00:04:03,900 --> 00:04:05,670
current infrastructure but you're gonna

90
00:04:05,670 --> 00:04:08,220
have to do a lot of refactoring but it's

91
00:04:08,220 --> 00:04:10,350
not impossible to do so you can see we

92
00:04:10,350 --> 00:04:12,930
on this slide here that I have a little

93
00:04:12,930 --> 00:04:16,980
diagram I took this from a medium

94
00:04:16,980 --> 00:04:22,380
article and it essentially shows the

95
00:04:22,380 --> 00:04:24,000
difference between a REST API and a

96
00:04:24,000 --> 00:04:27,210
graph QL API there so you can see that

97
00:04:27,210 --> 00:04:28,320
the clients just sending a singer'

98
00:04:28,320 --> 00:04:34,250
request graph QL takes that request and

99
00:04:34,250 --> 00:04:35,840
you can see

100
00:04:35,840 --> 00:04:40,010
of parses that out and passes it down to

101
00:04:40,010 --> 00:04:41,360
what a resolved called resolver

102
00:04:41,360 --> 00:04:45,169
functions and gathers all the data back

103
00:04:45,169 --> 00:04:47,300
and sends it back to you as one large

104
00:04:47,300 --> 00:04:52,460
response so but Greco is adding more

105
00:04:52,460 --> 00:04:55,130
complexity to what is already really a

106
00:04:55,130 --> 00:04:57,560
complex puzzle right so and what's more

107
00:04:57,560 --> 00:04:59,810
complexity becomes leaves more room for

108
00:04:59,810 --> 00:05:00,440
error

109
00:05:00,440 --> 00:05:03,110
you can still attack the underlying code

110
00:05:03,110 --> 00:05:05,000
base just like you would with the

111
00:05:05,000 --> 00:05:07,400
traditional REST API we just need to

112
00:05:07,400 --> 00:05:12,010
understand the path to get there so

113
00:05:12,010 --> 00:05:14,419
commonly there's implementation errors

114
00:05:14,419 --> 00:05:16,220
when people were standing up graph QL

115
00:05:16,220 --> 00:05:18,680
and we're gonna try and look at some

116
00:05:18,680 --> 00:05:20,150
ways that you can take advantage of

117
00:05:20,150 --> 00:05:25,130
those implementation errors also I made

118
00:05:25,130 --> 00:05:27,260
this slide that's really hard to watch

119
00:05:27,260 --> 00:05:29,539
because I wanted to kind of give people

120
00:05:29,539 --> 00:05:31,639
an idea of how many companies are out

121
00:05:31,639 --> 00:05:34,639
there leveraging this technology you'll

122
00:05:34,639 --> 00:05:39,139
see some really big names go by and with

123
00:05:39,139 --> 00:05:41,419
its increasing popularity is the

124
00:05:41,419 --> 00:05:43,550
increased chance that our data can get

125
00:05:43,550 --> 00:05:47,120
compromised right so as businesses

126
00:05:47,120 --> 00:05:49,220
continue to adopt graph q well it

127
00:05:49,220 --> 00:05:51,020
becomes increasing and fully important

128
00:05:51,020 --> 00:05:52,610
to be able to properly test these

129
00:05:52,610 --> 00:05:55,729
endpoints for security issues I won't

130
00:05:55,729 --> 00:05:57,169
make you watch this slide all the way up

131
00:05:57,169 --> 00:05:58,700
at the end I think you kind of get the

132
00:05:58,700 --> 00:06:05,750
idea so we all have problems right while

133
00:06:05,750 --> 00:06:07,910
they are having to figure out how to

134
00:06:07,910 --> 00:06:10,300
properly set up this technology

135
00:06:10,300 --> 00:06:13,460
developers are having to figure out how

136
00:06:13,460 --> 00:06:16,130
to properly sanitize and validate all

137
00:06:16,130 --> 00:06:18,919
their user and put all that hackers have

138
00:06:18,919 --> 00:06:21,200
to do the same thing we have tons of

139
00:06:21,200 --> 00:06:24,470
documentation to read this is just kind

140
00:06:24,470 --> 00:06:26,570
of the outline from graph QL Docs

141
00:06:26,570 --> 00:06:29,680
there's a whole bunch of stuff to know

142
00:06:29,680 --> 00:06:31,760
schemas which we'll talk about what that

143
00:06:31,760 --> 00:06:33,500
is a little bit later can be very large

144
00:06:33,500 --> 00:06:36,139
and complex and you have to reverse

145
00:06:36,139 --> 00:06:37,940
engineer them in order to be able to

146
00:06:37,940 --> 00:06:40,970
attack them until recently there isn't a

147
00:06:40,970 --> 00:06:44,419
lot of attack tooling or tutorials out

148
00:06:44,419 --> 00:06:46,190
there to give you a better understanding

149
00:06:46,190 --> 00:06:48,710
of what you're actually facing

150
00:06:48,710 --> 00:06:50,900
and at the end of the day you know the

151
00:06:50,900 --> 00:06:56,840
same vulnerability still exists we just

152
00:06:56,840 --> 00:06:59,570
have to modify our attack methodology to

153
00:06:59,570 --> 00:07:02,020
be able to adjust to this new landscape

154
00:07:02,020 --> 00:07:05,270
all right so let's get to know graph QL

155
00:07:05,270 --> 00:07:13,220
a little bit so graph QL is all kind of

156
00:07:13,220 --> 00:07:15,860
based on what's called a schema and a

157
00:07:15,860 --> 00:07:17,630
schema is basically a collection of

158
00:07:17,630 --> 00:07:20,120
object and type definitions along with a

159
00:07:20,120 --> 00:07:23,720
few other things and each field in your

160
00:07:23,720 --> 00:07:25,880
schema maps to what's called a resolver

161
00:07:25,880 --> 00:07:27,949
function not that resolver function is

162
00:07:27,949 --> 00:07:30,380
where all your application logic begins

163
00:07:30,380 --> 00:07:32,960
and this is what determines you know who

164
00:07:32,960 --> 00:07:35,060
can access your data how that data is

165
00:07:35,060 --> 00:07:37,610
fetched from whatever database it's

166
00:07:37,610 --> 00:07:40,190
being held in any other business logic

167
00:07:40,190 --> 00:07:42,020
that you want to happen to process that

168
00:07:42,020 --> 00:07:44,810
data before you hand it back but when

169
00:07:44,810 --> 00:07:48,110
you pass in use your supplied data into

170
00:07:48,110 --> 00:07:49,910
an object as an argument it gets passed

171
00:07:49,910 --> 00:07:52,760
through without being checked all the

172
00:07:52,760 --> 00:07:56,300
way down to this resolver function right

173
00:07:56,300 --> 00:07:58,340
into the application logic itself so

174
00:07:58,340 --> 00:08:01,610
this is this is dangerous because people

175
00:08:01,610 --> 00:08:03,080
may not understand that word and they're

176
00:08:03,080 --> 00:08:07,159
implementing this technology they none

177
00:08:07,159 --> 00:08:08,900
of this data is being sanitized or

178
00:08:08,900 --> 00:08:13,760
validated along the way so let's take a

179
00:08:13,760 --> 00:08:16,659
look at an example here

180
00:08:16,659 --> 00:08:19,669
you interact with Greg Q Oh with graph

181
00:08:19,669 --> 00:08:22,520
QL using what are called queries so

182
00:08:22,520 --> 00:08:25,610
listen to say we make a query to my

183
00:08:25,610 --> 00:08:29,060
awesome API comm slash graph kilo you'll

184
00:08:29,060 --> 00:08:31,280
notice that the post body contains JSON

185
00:08:31,280 --> 00:08:34,070
structured data and it consists of a top

186
00:08:34,070 --> 00:08:37,309
level object in this case the hero with

187
00:08:37,309 --> 00:08:39,679
fields nested within it in this case

188
00:08:39,679 --> 00:08:42,260
name so if you're familiar with object

189
00:08:42,260 --> 00:08:44,839
oriented languages you'll notice this

190
00:08:44,839 --> 00:08:47,000
kind of hierarchy is similar to how you

191
00:08:47,000 --> 00:08:52,089
and have an object with parameters and

192
00:08:54,370 --> 00:08:56,800
that it's this threat response is the

193
00:08:56,800 --> 00:08:59,170
same kind of shape as the request so

194
00:08:59,170 --> 00:09:01,330
this is another great thing about graph

195
00:09:01,330 --> 00:09:03,520
QL is that you kind of know what to

196
00:09:03,520 --> 00:09:05,800
expect back based on because it always

197
00:09:05,800 --> 00:09:08,040
follows the same shape as the requests

198
00:09:08,040 --> 00:09:12,340
so fields in graph QL have what are

199
00:09:12,340 --> 00:09:15,970
called scalar types in this case this

200
00:09:15,970 --> 00:09:17,920
the scalar type of the name field is

201
00:09:17,920 --> 00:09:21,360
string and we can look at a schema and

202
00:09:21,360 --> 00:09:24,700
be able to tell what to expect back it's

203
00:09:24,700 --> 00:09:26,500
gonna tell us that this is supposed to

204
00:09:26,500 --> 00:09:28,240
be a string so we always kind of know

205
00:09:28,240 --> 00:09:30,520
what we're dealing with when it comes to

206
00:09:30,520 --> 00:09:36,250
it so similar to before when I talk

207
00:09:36,250 --> 00:09:38,170
about object-oriented languages object

208
00:09:38,170 --> 00:09:43,090
parameters object fields in this case

209
00:09:43,090 --> 00:09:46,450
can all have other objects as fields

210
00:09:46,450 --> 00:09:49,390
also so you can see how you can kind of

211
00:09:49,390 --> 00:09:52,060
nest this down and fields can be become

212
00:09:52,060 --> 00:09:54,010
or you know the structure can be very

213
00:09:54,010 --> 00:09:58,180
complex so in this case we're going to

214
00:09:58,180 --> 00:09:59,440
send a request we're going to get the

215
00:09:59,440 --> 00:10:01,720
hero we want its name and we also want

216
00:10:01,720 --> 00:10:04,390
all the friends in the database that are

217
00:10:04,390 --> 00:10:06,580
connected to hero and this and their

218
00:10:06,580 --> 00:10:08,290
names and we can do this all in one

219
00:10:08,290 --> 00:10:12,880
request and when we look at the schema

220
00:10:12,880 --> 00:10:15,370
later or you know it we can expect a

221
00:10:15,370 --> 00:10:17,830
string of objects back or I'm sorry an

222
00:10:17,830 --> 00:10:21,220
array of strings back based on the

223
00:10:21,220 --> 00:10:23,200
schema again so the schema is really

224
00:10:23,200 --> 00:10:25,840
defining the entire structure of the

225
00:10:25,840 --> 00:10:29,370
data that we're going to get back

226
00:10:30,519 --> 00:10:34,009
so we're gonna talk about typed a little

227
00:10:34,009 --> 00:10:36,709
bit here this is kind of this is what

228
00:10:36,709 --> 00:10:38,720
the back end would look like from the

229
00:10:38,720 --> 00:10:40,639
schema perspective so when you're

230
00:10:40,639 --> 00:10:45,350
defining your schema you'll see that we

231
00:10:45,350 --> 00:10:47,299
can have you know the object type at the

232
00:10:47,299 --> 00:10:50,720
top level and then the scalar types

233
00:10:50,720 --> 00:10:52,910
defined for different fields underneath

234
00:10:52,910 --> 00:10:55,160
of it the exclamation point denotes that

235
00:10:55,160 --> 00:10:57,979
this is a non nullable field the

236
00:10:57,979 --> 00:11:01,519
brackets around the pipe indicate that

237
00:11:01,519 --> 00:11:03,679
it's going to be handed back as a list

238
00:11:03,679 --> 00:11:09,079
or an array and we can really tell a lot

239
00:11:09,079 --> 00:11:11,779
of everything that we need to know from

240
00:11:11,779 --> 00:11:19,279
looking at the schema so when it comes

241
00:11:19,279 --> 00:11:22,809
to scalar types dark ul comes with a

242
00:11:22,809 --> 00:11:25,669
certain subset of predefined scalar

243
00:11:25,669 --> 00:11:28,459
types but you can also define your own

244
00:11:28,459 --> 00:11:30,799
custom scalar types when you do this

245
00:11:30,799 --> 00:11:34,220
it's up to the developers to validate

246
00:11:34,220 --> 00:11:37,939
and that type on their own so there's no

247
00:11:37,939 --> 00:11:41,419
built-in mechanism to just generically

248
00:11:41,419 --> 00:11:44,119
handle type validation when it comes to

249
00:11:44,119 --> 00:11:53,209
scale with custom scalars so our when it

250
00:11:53,209 --> 00:11:54,979
comes to making requests just like and

251
00:11:54,979 --> 00:11:57,229
you know any other kind of API we can

252
00:11:57,229 --> 00:12:00,199
also define arguments to be sent along

253
00:12:00,199 --> 00:12:03,739
with the it's pretty you know pretty

254
00:12:03,739 --> 00:12:06,139
straightforward we in this case we can

255
00:12:06,139 --> 00:12:08,720
query for a human object with the ID of

256
00:12:08,720 --> 00:12:12,199
a thousand and nested underneath there

257
00:12:12,199 --> 00:12:13,999
or the fields and that's what works back

258
00:12:13,999 --> 00:12:16,220
when you get back so again you can see

259
00:12:16,220 --> 00:12:17,659
how the response with the same shape of

260
00:12:17,659 --> 00:12:20,350
the request we get the human with the ID

261
00:12:20,350 --> 00:12:28,159
1000 along with their name and height so

262
00:12:28,159 --> 00:12:28,740
when you

263
00:12:28,740 --> 00:12:31,209
Update

264
00:12:31,209 --> 00:12:36,250
a graph QL database right so what they

265
00:12:36,250 --> 00:12:38,560
with that in craft yuan terminology

266
00:12:38,560 --> 00:12:41,170
that's called a mutation so in this case

267
00:12:41,170 --> 00:12:46,180
we went to add a category well with E we

268
00:12:46,180 --> 00:12:47,920
can define a bunch of data for it what

269
00:12:47,920 --> 00:12:50,589
goes in it and then underneath that we

270
00:12:50,589 --> 00:12:53,290
can define what data we want to get back

271
00:12:53,290 --> 00:12:56,350
after that mutation successfully execute

272
00:12:56,350 --> 00:12:58,360
on the back end so that's another kind

273
00:12:58,360 --> 00:12:59,980
of advantage of using graph QL we don't

274
00:12:59,980 --> 00:13:02,050
have to make a separate request do you

275
00:13:02,050 --> 00:13:05,380
get the data that we just updated on the

276
00:13:05,380 --> 00:13:07,269
back end we can do it all and run

277
00:13:07,269 --> 00:13:09,690
request

278
00:13:10,070 --> 00:13:12,940
I wanna I want to point out that again

279
00:13:12,940 --> 00:13:16,070
this is even with mutations this is all

280
00:13:16,070 --> 00:13:22,040
untrusted data and there's no way that

281
00:13:22,040 --> 00:13:23,630
we can properly attack this thing

282
00:13:23,630 --> 00:13:26,240
without knowing and knowing that we have

283
00:13:26,240 --> 00:13:29,899
to really press hard on trying different

284
00:13:29,899 --> 00:13:32,990
types trying to spoof the backend by

285
00:13:32,990 --> 00:13:34,670
sending all kinds of different types of

286
00:13:34,670 --> 00:13:36,800
data and we can't just make the

287
00:13:36,800 --> 00:13:38,149
assumption that they are properly

288
00:13:38,149 --> 00:13:40,069
validating validating and sanitizing all

289
00:13:40,069 --> 00:13:41,740
of that

290
00:13:41,740 --> 00:13:43,870
so we've talked about we've mentioned

291
00:13:43,870 --> 00:13:46,510
schema a couple times and how it really

292
00:13:46,510 --> 00:13:51,340
I shows all the different requests and

293
00:13:51,340 --> 00:13:53,980
that we can make so how do we know all

294
00:13:53,980 --> 00:13:56,140
the API functionality that exists in

295
00:13:56,140 --> 00:13:58,990
here and we can do that by sending what

296
00:13:58,990 --> 00:14:02,920
are called introspection queries so if

297
00:14:02,920 --> 00:14:05,050
you asked nice graph you I would just

298
00:14:05,050 --> 00:14:06,550
tell you all of the different things

299
00:14:06,550 --> 00:14:09,340
that it can do for you if you work the

300
00:14:09,340 --> 00:14:11,140
soap API is in the past this is similar

301
00:14:11,140 --> 00:14:16,390
to a wisdom file but you can you can

302
00:14:16,390 --> 00:14:19,480
request just a portion of the schema

303
00:14:19,480 --> 00:14:21,490
like you can see on the left on that or

304
00:14:21,490 --> 00:14:23,500
you can send a huge introspection query

305
00:14:23,500 --> 00:14:25,930
and basically tell it tell me everything

306
00:14:25,930 --> 00:14:29,220
that you have that you can do so the

307
00:14:29,220 --> 00:14:32,410
responses to these queries can be

308
00:14:32,410 --> 00:14:34,270
extremely large you can see I've listed

309
00:14:34,270 --> 00:14:37,000
a couple of different api's that are out

310
00:14:37,000 --> 00:14:37,300
there

311
00:14:37,300 --> 00:14:40,960
github z' introspection response to this

312
00:14:40,960 --> 00:14:46,000
query it's 84,000 lines long so that's

313
00:14:46,000 --> 00:14:47,830
all that's a lot of data if you're gonna

314
00:14:47,830 --> 00:14:49,600
manually try and parse through that and

315
00:14:49,600 --> 00:14:51,190
build like all the different possible

316
00:14:51,190 --> 00:14:53,500
queries that you can make and that you

317
00:14:53,500 --> 00:14:55,060
have to understand the different

318
00:14:55,060 --> 00:14:56,860
arguments that are be supposed to be

319
00:14:56,860 --> 00:14:59,110
passed in there that that's a lot of

320
00:14:59,110 --> 00:15:02,260
work to do that so another helpful thing

321
00:15:02,260 --> 00:15:05,290
to know about the way graph QL works is

322
00:15:05,290 --> 00:15:07,710
that there's basically no equivalent to

323
00:15:07,710 --> 00:15:11,110
select star from users you can't say I

324
00:15:11,110 --> 00:15:13,450
want the user object and just give me

325
00:15:13,450 --> 00:15:16,270
all the fields that you have in the

326
00:15:16,270 --> 00:15:18,910
database for that object you have to

327
00:15:18,910 --> 00:15:21,430
explicitly define which fields you want

328
00:15:21,430 --> 00:15:25,000
the data returned for and this is from a

329
00:15:25,000 --> 00:15:27,190
attacker pentesters point of view this

330
00:15:27,190 --> 00:15:30,070
is very problematic if you don't if they

331
00:15:30,070 --> 00:15:33,060
have introspection query disabled so

332
00:15:33,060 --> 00:15:36,250
that gives us no way to really know what

333
00:15:36,250 --> 00:15:38,770
all of the huge range or possible

334
00:15:38,770 --> 00:15:41,880
requests that we can make are

335
00:15:43,730 --> 00:15:49,140
so graph QL has a lot of ideas and

336
00:15:49,140 --> 00:15:50,850
consoles out there they make it really

337
00:15:50,850 --> 00:15:54,420
easy to develop and graph QL we can also

338
00:15:54,420 --> 00:15:57,750
use these same tools to test graph QL

339
00:15:57,750 --> 00:16:03,590
endpoints if you find a graph QL

340
00:16:03,590 --> 00:16:06,060
endpoint somewhere you can typically

341
00:16:06,060 --> 00:16:10,170
find the console that they used to test

342
00:16:10,170 --> 00:16:13,110
and develop that or so this is a bunch

343
00:16:13,110 --> 00:16:15,270
of popular locations that you might be

344
00:16:15,270 --> 00:16:18,330
able to find that particular user

345
00:16:18,330 --> 00:16:21,060
interface for it you can also download

346
00:16:21,060 --> 00:16:24,420
these as browser extensions or even

347
00:16:24,420 --> 00:16:26,580
standalone electron apps and they

348
00:16:26,580 --> 00:16:27,630
provide a really feature-rich

349
00:16:27,630 --> 00:16:30,780
environment for you to kind of point it

350
00:16:30,780 --> 00:16:32,520
out a graph QL endpoint and be able to

351
00:16:32,520 --> 00:16:35,760
send requests and see responses if they

352
00:16:35,760 --> 00:16:38,040
have introspection query enabled these

353
00:16:38,040 --> 00:16:40,770
consoles will make that request and

354
00:16:40,770 --> 00:16:42,930
parse the data back to build

355
00:16:42,930 --> 00:16:45,600
documentation on the fly about the API

356
00:16:45,600 --> 00:16:51,210
itself I just want to kind of talk about

357
00:16:51,210 --> 00:16:55,050
real quick why you would want or not

358
00:16:55,050 --> 00:16:57,390
want to have inter scratch and query and

359
00:16:57,390 --> 00:17:01,560
enabled or disabled if you have some

360
00:17:01,560 --> 00:17:03,030
kind of software as a service product

361
00:17:03,030 --> 00:17:05,220
and you have a public API out there it

362
00:17:05,220 --> 00:17:06,630
kind of makes sense to have

363
00:17:06,630 --> 00:17:08,189
introspection clear your enabled you

364
00:17:08,189 --> 00:17:09,720
want people to be able to build

365
00:17:09,720 --> 00:17:11,970
documentation on the fly and interact

366
00:17:11,970 --> 00:17:16,170
with your endpoint without you know

367
00:17:16,170 --> 00:17:17,760
having to have separate documentation

368
00:17:17,760 --> 00:17:19,290
and all this different stuff so in that

369
00:17:19,290 --> 00:17:20,760
case it really makes sense but if you

370
00:17:20,760 --> 00:17:22,949
have a private API that requires

371
00:17:22,949 --> 00:17:26,240
authentication it's used for you know a

372
00:17:26,240 --> 00:17:30,030
CENTAC eight experience and you have

373
00:17:30,030 --> 00:17:35,370
just kind of your own dashboard that it

374
00:17:35,370 --> 00:17:37,320
that's using this API you may not want

375
00:17:37,320 --> 00:17:38,880
to have introspection query enabled

376
00:17:38,880 --> 00:17:41,820
because the point of the API wasn't to

377
00:17:41,820 --> 00:17:45,240
share it publicly like that but you'll

378
00:17:45,240 --> 00:17:47,850
find that that's not always the case and

379
00:17:47,850 --> 00:17:51,840
people don't necessarily understand this

380
00:17:51,840 --> 00:17:54,720
even exists or

381
00:17:54,720 --> 00:17:58,050
or that it could be give such an

382
00:17:58,050 --> 00:17:59,820
advantage to attackers by having that

383
00:17:59,820 --> 00:18:03,180
enabled some of these virtual server

384
00:18:03,180 --> 00:18:06,030
implementations also have a debug mode

385
00:18:06,030 --> 00:18:09,930
so if you tack a debug equals one into

386
00:18:09,930 --> 00:18:12,630
the URL I could enable debug mode for

387
00:18:12,630 --> 00:18:14,670
that particular server implementation

388
00:18:14,670 --> 00:18:16,650
and I can give you like full stack

389
00:18:16,650 --> 00:18:18,390
traces back and all kinds of other

390
00:18:18,390 --> 00:18:21,990
verbose errors and additional debug

391
00:18:21,990 --> 00:18:28,410
information so I want to talk real quick

392
00:18:28,410 --> 00:18:30,990
about the graph QL security model and I

393
00:18:30,990 --> 00:18:32,430
want to say real quick because there

394
00:18:32,430 --> 00:18:36,450
really isn't one there are no built-in

395
00:18:36,450 --> 00:18:38,010
authorization and authentication

396
00:18:38,010 --> 00:18:43,650
features in grep ql the specification so

397
00:18:43,650 --> 00:18:45,810
it's up to the server to either try and

398
00:18:45,810 --> 00:18:49,980
implement that in a way itself but yeah

399
00:18:49,980 --> 00:18:53,100
so if they did it wrong then and you'll

400
00:18:53,100 --> 00:18:55,200
see you'll notice you'll see coming up

401
00:18:55,200 --> 00:18:57,210
soon that that's a common error is

402
00:18:57,210 --> 00:18:58,740
implementing the authorization and

403
00:18:58,740 --> 00:19:01,170
authentication logic incorrectly because

404
00:19:01,170 --> 00:19:04,910
it can get it can get complex there are

405
00:19:04,910 --> 00:19:08,220
best practices and pre-made libraries

406
00:19:08,220 --> 00:19:13,320
out there that developers can use but

407
00:19:13,320 --> 00:19:14,550
they didn't you know are they

408
00:19:14,550 --> 00:19:15,690
implementing them correctly do they

409
00:19:15,690 --> 00:19:16,860
really understand how the library

410
00:19:16,860 --> 00:19:20,250
implication works so hopefully we may be

411
00:19:20,250 --> 00:19:22,500
as you know bounty hunters we can take

412
00:19:22,500 --> 00:19:23,400
advantage of some of those

413
00:19:23,400 --> 00:19:26,220
implementation errors so let's take a

414
00:19:26,220 --> 00:19:28,560
look at some graph you all bloopers that

415
00:19:28,560 --> 00:19:32,670
have happened in the wild here the first

416
00:19:32,670 --> 00:19:35,370
one that I like to talk about is is kind

417
00:19:35,370 --> 00:19:36,330
of funny

418
00:19:36,330 --> 00:19:39,690
it's an horrible instance of sinister

419
00:19:39,690 --> 00:19:44,520
hackery where these these two hackers

420
00:19:44,520 --> 00:19:49,400
used w fuzz and they were searching for

421
00:19:49,400 --> 00:19:54,750
subdomains and Shopify cloud comm I mean

422
00:19:54,750 --> 00:19:56,940
they found one that existed at BFI

423
00:19:56,940 --> 00:20:01,520
Shopify loud comm and I got endpoint

424
00:20:01,520 --> 00:20:04,380
allowed them to enumerate all the

425
00:20:04,380 --> 00:20:06,630
different offices locations

426
00:20:06,630 --> 00:20:08,549
that's Shopify cloud

427
00:20:08,549 --> 00:20:11,549
had and from there they would they were

428
00:20:11,549 --> 00:20:14,489
able to pivot inquiry for all the beer

429
00:20:14,489 --> 00:20:17,159
remaining in the kegs at that office

430
00:20:17,159 --> 00:20:19,049
because they had I guess some internal

431
00:20:19,049 --> 00:20:22,440
app that track you know how much beer

432
00:20:22,440 --> 00:20:24,149
was left in kegs and you know some

433
00:20:24,149 --> 00:20:27,629
metadata around all that stuff so it

434
00:20:27,629 --> 00:20:29,159
went they de close there's when they

435
00:20:29,159 --> 00:20:30,749
disclosed the they did in a kind of a

436
00:20:30,749 --> 00:20:33,029
funny way there was a bug bounty contest

437
00:20:33,029 --> 00:20:36,450
going on at the time and they they

438
00:20:36,450 --> 00:20:38,909
proposed that they could bribe the

439
00:20:38,909 --> 00:20:42,839
Shopify cloud judges by knowing their

440
00:20:42,839 --> 00:20:44,999
favorite type of beer and sending them

441
00:20:44,999 --> 00:20:48,599
beer so it was pretty cool with them to

442
00:20:48,599 --> 00:20:52,049
find that and in return Shopify awarded

443
00:20:52,049 --> 00:20:55,709
them with eight hundred and two dollars

444
00:20:55,709 --> 00:20:58,289
twenty cents which is the approximate

445
00:20:58,289 --> 00:21:02,879
price of three kegs of the favorite beer

446
00:21:02,879 --> 00:21:06,379
that they drank at Shopify

447
00:21:10,390 --> 00:21:12,440
the next

448
00:21:12,440 --> 00:21:16,250
it gets a little bit more serious this

449
00:21:16,250 --> 00:21:19,280
one happened at hacker one and this was

450
00:21:19,280 --> 00:21:23,950
an authentication bypass they found that

451
00:21:23,950 --> 00:21:27,170
the team object would return

452
00:21:27,170 --> 00:21:29,810
confidential interim information about

453
00:21:29,810 --> 00:21:32,630
teams and from that information they

454
00:21:32,630 --> 00:21:35,570
were able to enumerate met by making a

455
00:21:35,570 --> 00:21:38,060
lot of requests all the different

456
00:21:38,060 --> 00:21:40,580
companies at hacker 1 that were running

457
00:21:40,580 --> 00:21:44,690
private internal programs so from that

458
00:21:44,690 --> 00:21:47,060
report they were able to squeeze out

459
00:21:47,060 --> 00:21:48,080
2,500 bucks

460
00:21:48,080 --> 00:21:53,780
which isn't bad this next one is a great

461
00:21:53,780 --> 00:21:57,650
example of really understanding graph QL

462
00:21:57,650 --> 00:22:00,110
and how the server implementation works

463
00:22:00,110 --> 00:22:02,600
and how the library is that you're using

464
00:22:02,600 --> 00:22:06,620
work so they were migrating to a new

465
00:22:06,620 --> 00:22:10,790
back-end set off where it was a ruby

466
00:22:10,790 --> 00:22:13,820
class-based API implementation for graph

467
00:22:13,820 --> 00:22:17,690
QL and this introduced a new field into

468
00:22:17,690 --> 00:22:20,540
their schema by default and they just

469
00:22:20,540 --> 00:22:25,160
they previously had a nodes field but it

470
00:22:25,160 --> 00:22:27,740
was nested and or underneath an edges

471
00:22:27,740 --> 00:22:31,030
field so they just kind of assumed that

472
00:22:31,030 --> 00:22:34,070
this was just a shortcut to that

473
00:22:34,070 --> 00:22:38,420
previously existing nodes field but when

474
00:22:38,420 --> 00:22:40,850
ended up happening was that wasn't the

475
00:22:40,850 --> 00:22:43,910
case and that nodes field bypassed all

476
00:22:43,910 --> 00:22:47,990
the authorization logic to their

477
00:22:47,990 --> 00:22:50,800
back-end so they were ordered $20,000

478
00:22:50,800 --> 00:22:56,870
for that I find this this last one was

479
00:22:56,870 --> 00:22:59,090
come you know old school sequel

480
00:22:59,090 --> 00:23:01,430
injection with a new school graph QL

481
00:23:01,430 --> 00:23:06,730
twist this allowed this allowed the

482
00:23:06,730 --> 00:23:08,780
attackers to extract information from

483
00:23:08,780 --> 00:23:11,090
the public and secure schemas although

484
00:23:11,090 --> 00:23:12,560
it was found after an investigation that

485
00:23:12,560 --> 00:23:15,140
this was never abused there was no

486
00:23:15,140 --> 00:23:17,390
payout for this I suspect because the

487
00:23:17,390 --> 00:23:18,710
person who reported the bug actually

488
00:23:18,710 --> 00:23:22,850
worked for hacker 1 themselves so this

489
00:23:22,850 --> 00:23:25,760
happened when they implemented a new

490
00:23:25,760 --> 00:23:27,980
embedded submission and form feature and

491
00:23:27,980 --> 00:23:31,460
instead of using a traditional form

492
00:23:31,460 --> 00:23:33,590
field they wanted to pass that

493
00:23:33,590 --> 00:23:35,420
information submitted using the grep

494
00:23:35,420 --> 00:23:37,540
shoe all parameters instead and

495
00:23:37,540 --> 00:23:39,800
previously the form fields went through

496
00:23:39,800 --> 00:23:41,650
automatic about input validation and

497
00:23:41,650 --> 00:23:44,210
sanitation process the graph QL

498
00:23:44,210 --> 00:23:45,650
parameter didn't follow that same

499
00:23:45,650 --> 00:23:52,030
application logic and gave them access

500
00:23:52,840 --> 00:23:56,150
so I'm talk about abusing graph QL a

501
00:23:56,150 --> 00:23:58,340
little bit how do we actually go about

502
00:23:58,340 --> 00:24:02,330
attacking this platform so kind of the

503
00:24:02,330 --> 00:24:04,730
first thing you have to do here is find

504
00:24:04,730 --> 00:24:08,270
the different endpoints and there always

505
00:24:08,270 --> 00:24:12,320
isn't just one go-to spot for that there

506
00:24:12,320 --> 00:24:13,970
could be it could be located anywhere

507
00:24:13,970 --> 00:24:16,970
you know just like any URL but there are

508
00:24:16,970 --> 00:24:19,310
some ones that it does typically show up

509
00:24:19,310 --> 00:24:24,040
at and here's a here's a big list of

510
00:24:24,040 --> 00:24:27,050
where to start with this so the left is

511
00:24:27,050 --> 00:24:29,150
just kind of the typical endpoint that's

512
00:24:29,150 --> 00:24:30,830
at that but we have to remember that it

513
00:24:30,830 --> 00:24:32,510
usually says behind some kind of

514
00:24:32,510 --> 00:24:36,800
versioning URL parameter but at the

515
00:24:36,800 --> 00:24:39,710
bottom is the one where github is

516
00:24:39,710 --> 00:24:41,720
located at just so you can get an idea

517
00:24:41,720 --> 00:24:43,550
you know it's located at it has a sub

518
00:24:43,550 --> 00:24:45,890
domain it has a version and it's using

519
00:24:45,890 --> 00:24:49,330
the Explorer endpoint

520
00:24:52,380 --> 00:24:58,180
so introspection queries are enabled by

521
00:24:58,180 --> 00:25:01,600
default this is this is something that

522
00:25:01,600 --> 00:25:04,690
is important to understand that if you

523
00:25:04,690 --> 00:25:07,360
want to disable graph QL you actually

524
00:25:07,360 --> 00:25:10,600
need to use a separate kind of extension

525
00:25:10,600 --> 00:25:14,920
or plugin to do that but once we find

526
00:25:14,920 --> 00:25:17,770
the graph you'll endpoint we will see if

527
00:25:17,770 --> 00:25:19,810
introspection queries enabled by sending

528
00:25:19,810 --> 00:25:22,450
a request to it and if it is enabled

529
00:25:22,450 --> 00:25:25,060
then we get the big old response back

530
00:25:25,060 --> 00:25:27,280
and from that response we need to parse

531
00:25:27,280 --> 00:25:28,540
through it and determine all the

532
00:25:28,540 --> 00:25:30,610
possible queries and mutations that we

533
00:25:30,610 --> 00:25:33,160
can build from that and then we need to

534
00:25:33,160 --> 00:25:35,590
test each one looking for authentication

535
00:25:35,590 --> 00:25:37,690
and authorization errors as well as

536
00:25:37,690 --> 00:25:40,630
other vulnerabilities so we need to be

537
00:25:40,630 --> 00:25:43,900
on the lookout for error responses that

538
00:25:43,900 --> 00:25:45,610
contain stack traces or other useful

539
00:25:45,610 --> 00:25:50,200
debug data this is a lot of work this is

540
00:25:50,200 --> 00:25:51,970
a very time-consuming process especially

541
00:25:51,970 --> 00:25:54,700
on an interest introspection query

542
00:25:54,700 --> 00:25:57,130
response that's 84 some thousand lines

543
00:25:57,130 --> 00:25:59,110
long this can take a really long time to

544
00:25:59,110 --> 00:26:03,850
accomplish so just going to want to show

545
00:26:03,850 --> 00:26:10,150
an example here of me using the alt a or

546
00:26:10,150 --> 00:26:14,830
graph QL client it's set up to the snow

547
00:26:14,830 --> 00:26:16,390
Tuesday PR I'm going to send it into

548
00:26:16,390 --> 00:26:20,130
action query and proxy it through burp

549
00:26:23,790 --> 00:26:25,570
she kind of

550
00:26:25,570 --> 00:26:29,830
this run and this introspection query

551
00:26:29,830 --> 00:26:32,410
response here is three thousand two

552
00:26:32,410 --> 00:26:35,550
hundred and seventy nine lines long so

553
00:26:35,550 --> 00:26:38,260
that's pretty long so let let's see what

554
00:26:38,260 --> 00:26:40,540
we can actually get out of that what

555
00:26:40,540 --> 00:26:42,700
does that actually give us so to do that

556
00:26:42,700 --> 00:26:44,410
we can use a tool called graph QL

557
00:26:44,410 --> 00:26:47,170
Voyageur we can take that introspection

558
00:26:47,170 --> 00:26:49,570
query response and paste it into graph

559
00:26:49,570 --> 00:26:51,430
copy paste it into graphs well Voyageur

560
00:26:51,430 --> 00:26:54,360
and it will give us an interactive

561
00:26:54,360 --> 00:26:57,900
diagram that lets us visually explore

562
00:26:57,900 --> 00:27:01,630
that schema and this is this is a really

563
00:27:01,630 --> 00:27:03,730
interesting tool it's really helpful

564
00:27:03,730 --> 00:27:06,160
when you're trying to understand the

565
00:27:06,160 --> 00:27:08,680
complexity of the schema what things are

566
00:27:08,680 --> 00:27:09,910
connected together and where they're

567
00:27:09,910 --> 00:27:11,800
connected together at what are the

568
00:27:11,800 --> 00:27:13,960
different fields that I can request for

569
00:27:13,960 --> 00:27:16,330
different objects and all that kind of

570
00:27:16,330 --> 00:27:18,580
stuff so this is what those three

571
00:27:18,580 --> 00:27:22,750
thousand lines gave us was three objects

572
00:27:22,750 --> 00:27:26,400
with the fields connected to them

573
00:27:27,179 --> 00:27:29,499
so let's take a little bit closer look

574
00:27:29,499 --> 00:27:31,629
at understanding what the intro respects

575
00:27:31,629 --> 00:27:34,619
the response looks like up close

576
00:27:34,619 --> 00:27:38,049
here we have a query for all lists and

577
00:27:38,049 --> 00:27:41,109
we can get the status for each lift so

578
00:27:41,109 --> 00:27:47,799
you can see it's all in JSON you can see

579
00:27:47,799 --> 00:27:49,450
that the fields are nested under the

580
00:27:49,450 --> 00:27:51,850
object the same way they are when you're

581
00:27:51,850 --> 00:27:54,220
doing a request it's all pretty

582
00:27:54,220 --> 00:27:58,539
straightforward we also have another

583
00:27:58,539 --> 00:28:01,749
field here call on the right called lift

584
00:28:01,749 --> 00:28:06,039
and this one we can pass in an ID and we

585
00:28:06,039 --> 00:28:08,349
can get a name and some other data back

586
00:28:08,349 --> 00:28:10,989
from this I just kind of wanted you to I

587
00:28:10,989 --> 00:28:12,940
wanted to take a look at here and see

588
00:28:12,940 --> 00:28:16,389
how we can build an actual query from

589
00:28:16,389 --> 00:28:19,359
that introspection response so if we

590
00:28:19,359 --> 00:28:21,759
wanted to query all lifts this is what

591
00:28:21,759 --> 00:28:23,710
we would actually send it we would send

592
00:28:23,710 --> 00:28:25,509
the olives object and we're saying we

593
00:28:25,509 --> 00:28:27,519
want the name and status back and this

594
00:28:27,519 --> 00:28:30,929
is the response we would get from that

595
00:28:31,379 --> 00:28:33,580
okay this is how you would query that

596
00:28:33,580 --> 00:28:36,369
lift object by passing any ID we're

597
00:28:36,369 --> 00:28:38,139
going to ask for the status and we're

598
00:28:38,139 --> 00:28:41,710
all gonna access we're gonna ask for all

599
00:28:41,710 --> 00:28:44,559
the trails that this lift has access to

600
00:28:44,559 --> 00:28:46,539
and we're also going to ask for the name

601
00:28:46,539 --> 00:28:48,909
and status of those trails so you can

602
00:28:48,909 --> 00:28:50,919
see how you can get a lot you can build

603
00:28:50,919 --> 00:28:54,009
out queries that can get you a lot of

604
00:28:54,009 --> 00:28:56,049
data back all on one request response

605
00:28:56,049 --> 00:28:58,739
lifecycle

606
00:29:00,320 --> 00:29:03,420
so this is what a mutation would look

607
00:29:03,420 --> 00:29:06,090
like here we're going to creative review

608
00:29:06,090 --> 00:29:09,210
for an episode we're going to structure

609
00:29:09,210 --> 00:29:13,260
it here this is using a kind of one of

610
00:29:13,260 --> 00:29:15,330
these consoles that makes it really easy

611
00:29:15,330 --> 00:29:17,070
to work with this different stuff and

612
00:29:17,070 --> 00:29:18,780
kind of see how it's all separated out

613
00:29:18,780 --> 00:29:20,520
at the top we're going to build the

614
00:29:20,520 --> 00:29:22,830
structure for the mutation we're gonna

615
00:29:22,830 --> 00:29:25,020
pass in some variables it looks a lot

616
00:29:25,020 --> 00:29:27,780
like a function at the bottom we're

617
00:29:27,780 --> 00:29:29,700
going to define the BEI variables to be

618
00:29:29,700 --> 00:29:33,090
passed in and we're going to ask it to

619
00:29:33,090 --> 00:29:34,650
create the review with that data and in

620
00:29:34,650 --> 00:29:36,150
response we're going to ask for the

621
00:29:36,150 --> 00:29:40,680
number of stars and the commentary so

622
00:29:40,680 --> 00:29:42,090
what do we do if introspection is

623
00:29:42,090 --> 00:29:48,600
disabled so the first this situation it

624
00:29:48,600 --> 00:29:52,260
makes it very difficult right but you

625
00:29:52,260 --> 00:29:53,850
know there are still some things we can

626
00:29:53,850 --> 00:29:55,380
do and one of those things is let's

627
00:29:55,380 --> 00:29:57,360
check the staging and developer

628
00:29:57,360 --> 00:30:00,030
subdomains many times they will disable

629
00:30:00,030 --> 00:30:03,000
introspection query in production but

630
00:30:03,000 --> 00:30:06,120
they will not disable it on their

631
00:30:06,120 --> 00:30:09,800
staging and development domains and

632
00:30:10,340 --> 00:30:12,960
they'd also typically don't have their

633
00:30:12,960 --> 00:30:15,000
staging and development domains behind

634
00:30:15,000 --> 00:30:17,670
any type of authentication so if it's

635
00:30:17,670 --> 00:30:20,070
disabled and prod just go check their

636
00:30:20,070 --> 00:30:22,020
staging and dev stuff and it's possible

637
00:30:22,020 --> 00:30:23,070
that they don't have they have

638
00:30:23,070 --> 00:30:25,530
introspection query enabled there we can

639
00:30:25,530 --> 00:30:27,420
do the introspection query there get

640
00:30:27,420 --> 00:30:29,550
their response back and start to build

641
00:30:29,550 --> 00:30:31,800
queries before that we can use on the

642
00:30:31,800 --> 00:30:35,370
production domain obviously we use our

643
00:30:35,370 --> 00:30:39,270
proxy to click around on the actual

644
00:30:39,270 --> 00:30:41,280
website itself that's using the graph

645
00:30:41,280 --> 00:30:43,590
uol back end and we capture all these

646
00:30:43,590 --> 00:30:45,930
requests and responses and burp so that

647
00:30:45,930 --> 00:30:47,940
we can start to kind of build and see

648
00:30:47,940 --> 00:30:50,130
what kind of queries we have available

649
00:30:50,130 --> 00:30:54,060
to us then we can pass those to burp

650
00:30:54,060 --> 00:30:57,390
intruder and repeater and we can use a

651
00:30:57,390 --> 00:30:58,860
technique that I like to call it field

652
00:30:58,860 --> 00:31:01,500
stuffing somebody else might have

653
00:31:01,500 --> 00:31:02,850
another name for this that I don't know

654
00:31:02,850 --> 00:31:05,870
of but what we're gonna basically do is

655
00:31:05,870 --> 00:31:08,820
take a known good query and we're gonna

656
00:31:08,820 --> 00:31:11,100
start just adding fields to that query

657
00:31:11,100 --> 00:31:12,110
that we think my

658
00:31:12,110 --> 00:31:14,890
returned us data I've had in the past

659
00:31:14,890 --> 00:31:18,920
added for a user object I just added the

660
00:31:18,920 --> 00:31:21,260
field underscore password and actually

661
00:31:21,260 --> 00:31:23,900
got hashes back because on the back end

662
00:31:23,900 --> 00:31:26,179
they were just mapping fields to

663
00:31:26,179 --> 00:31:28,370
database columns and whatever I would

664
00:31:28,370 --> 00:31:30,470
pass in it would just retrieve that

665
00:31:30,470 --> 00:31:32,240
database column because I guess that was

666
00:31:32,240 --> 00:31:34,910
more convenient than having to you know

667
00:31:34,910 --> 00:31:36,890
build white lists and this different

668
00:31:36,890 --> 00:31:39,340
stuff and that complex application logic

669
00:31:39,340 --> 00:31:42,650
graph QL will also do a really handy

670
00:31:42,650 --> 00:31:46,700
thing and give you suggestions so we can

671
00:31:46,700 --> 00:31:50,540
see here that we must have made a query

672
00:31:50,540 --> 00:31:53,870
that it didn't have a field for or or so

673
00:31:53,870 --> 00:31:57,919
I assented a query called create for for

674
00:31:57,919 --> 00:32:00,260
a mutation I'm sorry called for a create

675
00:32:00,260 --> 00:32:03,679
user and instead of just telling me no

676
00:32:03,679 --> 00:32:06,590
it can't do that it actually tried to

677
00:32:06,590 --> 00:32:09,890
suggest different fields for me to use

678
00:32:09,890 --> 00:32:13,610
instead and from that you know it's like

679
00:32:13,610 --> 00:32:15,679
did you mean create user create profile

680
00:32:15,679 --> 00:32:17,929
create avatar or create session and I'm

681
00:32:17,929 --> 00:32:20,720
like yes I did mean all those things so

682
00:32:20,720 --> 00:32:24,970
I'm gonna go ahead and use those instead

683
00:32:25,809 --> 00:32:27,460
so let's take

684
00:32:27,460 --> 00:32:29,940
some attack techniques that we can use

685
00:32:29,940 --> 00:32:35,110
against ref um so we can take this

686
00:32:35,110 --> 00:32:40,030
nested object here and just kind of pull

687
00:32:40,030 --> 00:32:43,930
it out and use it as a root query and I

688
00:32:43,930 --> 00:32:45,750
in the past I've had this actually work

689
00:32:45,750 --> 00:32:49,330
where you know I can't get the friends

690
00:32:49,330 --> 00:32:51,040
of a particular user this isn't the

691
00:32:51,040 --> 00:32:54,160
exact case of course but if I pull it

692
00:32:54,160 --> 00:32:56,350
out and I just ask for friends it will

693
00:32:56,350 --> 00:32:59,500
give me all the friends of everybody in

694
00:32:59,500 --> 00:33:02,170
the entire database so this is a

695
00:33:02,170 --> 00:33:04,180
technique that you can try to bypass off

696
00:33:04,180 --> 00:33:08,140
the authentication logic it could work

697
00:33:08,140 --> 00:33:12,430
its work for me you can also send

698
00:33:12,430 --> 00:33:15,320
malicious queries

699
00:33:15,320 --> 00:33:18,290
so if you take a look at this schema

700
00:33:18,290 --> 00:33:20,870
definition here this work was done by

701
00:33:20,870 --> 00:33:22,730
Metz the Weaver I really just want to

702
00:33:22,730 --> 00:33:24,530
call him out on this he has this blog

703
00:33:24,530 --> 00:33:27,580
article I can post all the links to this

704
00:33:27,580 --> 00:33:31,900
after the talks he can go read about it

705
00:33:31,900 --> 00:33:35,330
so essentially we have this thread type

706
00:33:35,330 --> 00:33:37,460
that returns a message type a message

707
00:33:37,460 --> 00:33:39,440
type that accepts a thread type and a

708
00:33:39,440 --> 00:33:41,630
query type that returns a thread based

709
00:33:41,630 --> 00:33:43,850
on an ID so you can kind of see the

710
00:33:43,850 --> 00:33:46,520
circular reference starting here where

711
00:33:46,520 --> 00:33:47,900
they're all kind of dependent on each

712
00:33:47,900 --> 00:33:50,840
other so what if we sent it a request

713
00:33:50,840 --> 00:33:53,780
like this that just repeated nested and

714
00:33:53,780 --> 00:33:56,270
nested invested so you could definitely

715
00:33:56,270 --> 00:33:59,660
crash a server any number of bad things

716
00:33:59,660 --> 00:34:02,840
could happen sending it so if you're a

717
00:34:02,840 --> 00:34:05,330
developer watching this be careful that

718
00:34:05,330 --> 00:34:06,890
you don't have this circular reference

719
00:34:06,890 --> 00:34:12,790
going on is deprecated is a graph QL

720
00:34:12,790 --> 00:34:16,790
kind of metadata field that allows you

721
00:34:16,790 --> 00:34:19,880
to deprecate a field and this is this is

722
00:34:19,880 --> 00:34:21,980
mostly used for consoles when they're

723
00:34:21,980 --> 00:34:26,060
building their dynamic documentation you

724
00:34:26,060 --> 00:34:29,239
can also define a deprecated reason and

725
00:34:29,239 --> 00:34:32,210
a lot of times there is ill estate along

726
00:34:32,210 --> 00:34:33,949
with that reason the field that is going

727
00:34:33,949 --> 00:34:38,360
to replace that particular thing so that

728
00:34:38,360 --> 00:34:40,580
doesn't mean that even if something is

729
00:34:40,580 --> 00:34:43,040
that is deprecated at the logic around

730
00:34:43,040 --> 00:34:45,830
it is built so you can't and use anymore

731
00:34:45,830 --> 00:34:48,290
so field may have been deprecated but it

732
00:34:48,290 --> 00:34:50,179
still returns data that wasn't intended

733
00:34:50,179 --> 00:34:51,918
to be shared so it's worth still

734
00:34:51,918 --> 00:34:56,570
checking out oftentimes you know

735
00:34:56,570 --> 00:34:59,750
mutations are not permitted on any end

736
00:34:59,750 --> 00:35:01,730
points without author and authorization

737
00:35:01,730 --> 00:35:05,930
first but you never know so try and send

738
00:35:05,930 --> 00:35:07,760
mutations without being authenticated

739
00:35:07,760 --> 00:35:09,440
you never know

740
00:35:09,440 --> 00:35:11,750
that you may end up being and once you

741
00:35:11,750 --> 00:35:13,250
actually write a new user to the

742
00:35:13,250 --> 00:35:14,750
database that you can turn around and

743
00:35:14,750 --> 00:35:17,120
use to actually log in as that's

744
00:35:17,120 --> 00:35:21,230
happened before if you do have to

745
00:35:21,230 --> 00:35:22,960
authenticate

746
00:35:22,960 --> 00:35:24,640
try and send all the mutations that you

747
00:35:24,640 --> 00:35:26,890
can find in there anyway because the

748
00:35:26,890 --> 00:35:29,319
authentication a lot of logic around who

749
00:35:29,319 --> 00:35:32,049
can do what mutations may not be

750
00:35:32,049 --> 00:35:36,609
implemented correctly so this is kind of

751
00:35:36,609 --> 00:35:39,880
a example of a query that you could send

752
00:35:39,880 --> 00:35:41,710
with sequel injection in it you would

753
00:35:41,710 --> 00:35:44,529
pass in your sequel injection with the

754
00:35:44,529 --> 00:35:49,569
arguments or you could just pass in a

755
00:35:49,569 --> 00:35:51,700
custom ingestion injection marker and

756
00:35:51,700 --> 00:35:53,710
use a tool a sequel map to kind of go

757
00:35:53,710 --> 00:35:54,940
through those types of things

758
00:35:54,940 --> 00:35:57,369
since graph QL uses resolver functions

759
00:35:57,369 --> 00:35:58,869
to facilitate the execution of

760
00:35:58,869 --> 00:36:02,260
application logic under the hood again I

761
00:36:02,260 --> 00:36:03,970
can't stress it enough it's up to the

762
00:36:03,970 --> 00:36:05,500
developers to implement the proper

763
00:36:05,500 --> 00:36:07,180
validation it's annotation logic behind

764
00:36:07,180 --> 00:36:09,880
that and if they don't do that or they

765
00:36:09,880 --> 00:36:12,010
don't use you know a qualified library

766
00:36:12,010 --> 00:36:14,619
then as we saw in the previous example

767
00:36:14,619 --> 00:36:17,920
sequel injection is also possible within

768
00:36:17,920 --> 00:36:20,490
graph QL

769
00:36:21,740 --> 00:36:24,450
so this is some great work done by Pete

770
00:36:24,450 --> 00:36:27,030
Cory there's a link to the blog post

771
00:36:27,030 --> 00:36:30,270
about this showing how no sequel

772
00:36:30,270 --> 00:36:32,430
rejections are actually also possible

773
00:36:32,430 --> 00:36:38,280
using graph QL since you can define your

774
00:36:38,280 --> 00:36:40,710
own custom scalar types they have you

775
00:36:40,710 --> 00:36:42,660
know libraries out there with predefined

776
00:36:42,660 --> 00:36:44,970
custom scalar types for people to use

777
00:36:44,970 --> 00:36:47,160
but if they're not input implemented

778
00:36:47,160 --> 00:36:49,859
correctly then you can still take

779
00:36:49,859 --> 00:36:52,109
advantage of that so let's say you have

780
00:36:52,109 --> 00:36:55,680
the query type and you're gonna search

781
00:36:55,680 --> 00:36:58,140
for users and you have some options that

782
00:36:58,140 --> 00:37:01,440
may be controlled by a filter on the

783
00:37:01,440 --> 00:37:05,820
front end and on the back end and the

784
00:37:05,820 --> 00:37:07,650
time the definition for this this

785
00:37:07,650 --> 00:37:10,830
resolver function just takes the user

786
00:37:10,830 --> 00:37:14,430
supplied JSON data and dumps it right

787
00:37:14,430 --> 00:37:17,130
into the actual functionality itself so

788
00:37:17,130 --> 00:37:18,990
in this case they're just going to trust

789
00:37:18,990 --> 00:37:20,970
users high data since it's in JSON

790
00:37:20,970 --> 00:37:24,900
format that's a little bit of extra

791
00:37:24,900 --> 00:37:29,760
complications to it so what if we sent

792
00:37:29,760 --> 00:37:33,089
it a request like this and since they're

793
00:37:33,089 --> 00:37:35,490
just passing our data right in we can

794
00:37:35,490 --> 00:37:37,800
just enumerate all of the users in the

795
00:37:37,800 --> 00:37:41,099
database along with their IDs user names

796
00:37:41,099 --> 00:37:44,040
full names and emails since for the

797
00:37:44,040 --> 00:37:46,880
fields object it's also you know

798
00:37:46,880 --> 00:37:50,780
accepting our users supplied data so

799
00:37:50,780 --> 00:37:53,130
which in this case is the form of our

800
00:37:53,130 --> 00:37:56,730
reg X so you can you can see the dangers

801
00:37:56,730 --> 00:37:58,290
with this and this particular case comes

802
00:37:58,290 --> 00:38:03,480
from a MongoDB example so kind of the

803
00:38:03,480 --> 00:38:06,150
workflow for attacking graph QL kind of

804
00:38:06,150 --> 00:38:07,530
goes as follows first you have to find

805
00:38:07,530 --> 00:38:09,690
the endpoint then you test to see if

806
00:38:09,690 --> 00:38:11,820
introspection query is enabled or not if

807
00:38:11,820 --> 00:38:14,220
it is enabled we can retrieve the schema

808
00:38:14,220 --> 00:38:16,349
and we can parse through that and build

809
00:38:16,349 --> 00:38:20,220
queries and mutations off of it we can

810
00:38:20,220 --> 00:38:21,839
out our custom injection markers we have

811
00:38:21,839 --> 00:38:24,089
to make all of these requests then put

812
00:38:24,089 --> 00:38:26,099
them all through burp suite analyze

813
00:38:26,099 --> 00:38:28,619
those try and find a vulnerability and

814
00:38:28,619 --> 00:38:31,470
then hopefully profit if introspection

815
00:38:31,470 --> 00:38:33,000
is not enabled then we have to click

816
00:38:33,000 --> 00:38:33,930
around

817
00:38:33,930 --> 00:38:35,579
for a bunch of requests going there in

818
00:38:35,579 --> 00:38:37,770
the front end to the graph y ou back-end

819
00:38:37,770 --> 00:38:39,720
and then from there it's pretty much the

820
00:38:39,720 --> 00:38:42,300
same we're gonna take that and try and

821
00:38:42,300 --> 00:38:44,010
parse and build as many queries as

822
00:38:44,010 --> 00:38:45,930
possible which will probably be less

823
00:38:45,930 --> 00:38:48,839
than if they had introspection enabled

824
00:38:48,839 --> 00:38:51,420
we can try some field an object stuffing

825
00:38:51,420 --> 00:38:53,940
to see if we can guess something

826
00:38:53,940 --> 00:38:55,770
correctly said all right custom Josh

827
00:38:55,770 --> 00:38:57,660
injection markers make all the requests

828
00:38:57,660 --> 00:38:59,910
put in through birth suite and maybe

829
00:38:59,910 --> 00:39:02,760
make some money that way also so let's

830
00:39:02,760 --> 00:39:04,800
talk a little bit about how to progress'

831
00:39:04,800 --> 00:39:07,170
protect graph QL for people that are

832
00:39:07,170 --> 00:39:09,809
actually using that out there don't

833
00:39:09,809 --> 00:39:11,640
enable introspection queries unless you

834
00:39:11,640 --> 00:39:13,650
absolutely have to I know this is like

835
00:39:13,650 --> 00:39:16,410
up security by obscurity in a way but

836
00:39:16,410 --> 00:39:18,089
you can see from the previous examples

837
00:39:18,089 --> 00:39:21,720
about how not having this enabled really

838
00:39:21,720 --> 00:39:24,030
makes testing difficult for for a bad

839
00:39:24,030 --> 00:39:27,270
guy and really kind of limits what

840
00:39:27,270 --> 00:39:29,220
they're able to accomplish as far as

841
00:39:29,220 --> 00:39:32,550
that of course we have to say this again

842
00:39:32,550 --> 00:39:33,900
because we still find these

843
00:39:33,900 --> 00:39:36,359
vulnerabilities out there don't trust

844
00:39:36,359 --> 00:39:39,420
users hide data ever and always validate

845
00:39:39,420 --> 00:39:44,250
and sanitize any user input well tested

846
00:39:44,250 --> 00:39:45,599
solutions exists for this

847
00:39:45,599 --> 00:39:48,240
there's projects like graph QL shield

848
00:39:48,240 --> 00:39:52,829
that and adds another layer of

849
00:39:52,829 --> 00:39:55,799
abstraction there that lets you set

850
00:39:55,799 --> 00:39:58,230
permissions for a field level and all

851
00:39:58,230 --> 00:39:59,760
kinds of different nuts nice stuff like

852
00:39:59,760 --> 00:40:00,809
that

853
00:40:00,809 --> 00:40:05,880
use directive based permissions what you

854
00:40:05,880 --> 00:40:08,400
know really understand if you're going

855
00:40:08,400 --> 00:40:09,930
to use another library how this thing

856
00:40:09,930 --> 00:40:11,069
works and make sure you're actually

857
00:40:11,069 --> 00:40:15,390
implementing in it correctly protect

858
00:40:15,390 --> 00:40:17,040
against the denial of service

859
00:40:17,040 --> 00:40:18,720
there's the there was a couple libraries

860
00:40:18,720 --> 00:40:19,680
out there that will do what's called

861
00:40:19,680 --> 00:40:21,869
query cost analysis and that's a

862
00:40:21,869 --> 00:40:24,660
technique used to measure whether a

863
00:40:24,660 --> 00:40:26,760
query is too complex to execute and you

864
00:40:26,760 --> 00:40:28,950
can set a threshold and if the query

865
00:40:28,950 --> 00:40:30,900
complexity meet that certain threshold

866
00:40:30,900 --> 00:40:32,880
you can just reject the query altogether

867
00:40:32,880 --> 00:40:35,130
before you send it along and actually

868
00:40:35,130 --> 00:40:39,210
allow it to do damage do security focus

869
00:40:39,210 --> 00:40:41,369
code reviews with your team train your

870
00:40:41,369 --> 00:40:44,250
secure coding skills

871
00:40:44,250 --> 00:40:46,900
get try and get training for your

872
00:40:46,900 --> 00:40:48,580
programming teams if you're working with

873
00:40:48,580 --> 00:40:50,200
this stuff to make sure that you

874
00:40:50,200 --> 00:40:52,060
understand how attackers are attacking

875
00:40:52,060 --> 00:40:53,350
your infrastructure so you can protect

876
00:40:53,350 --> 00:40:58,050
against it I also wanted to call out

877
00:40:58,050 --> 00:41:02,500
this attack tool written by Paulo sogno

878
00:41:02,500 --> 00:41:05,950
you can see him at void sack or at loyd

879
00:41:05,950 --> 00:41:10,600
underscore sack on Twitter this graph QL

880
00:41:10,600 --> 00:41:12,790
security toolkit will take an

881
00:41:12,790 --> 00:41:16,840
introspection query and generate a bunch

882
00:41:16,840 --> 00:41:19,180
of kind of generic requests for you that

883
00:41:19,180 --> 00:41:23,170
you can kind of use he's also going to

884
00:41:23,170 --> 00:41:24,670
be releasing this as a perfect tension

885
00:41:24,670 --> 00:41:26,710
which is going to be really handy to

886
00:41:26,710 --> 00:41:29,370
have this all built right into birth but

887
00:41:29,370 --> 00:41:32,740
until that I've also written a tool

888
00:41:32,740 --> 00:41:35,050
called shape shifter so you let's just

889
00:41:35,050 --> 00:41:36,880
kind of watch it MO and I'll explain how

890
00:41:36,880 --> 00:41:40,120
this is working as it goes through so

891
00:41:40,120 --> 00:41:44,710
you can pass in a URL and a proxy for

892
00:41:44,710 --> 00:41:46,060
the test in this case I'm just going to

893
00:41:46,060 --> 00:41:49,690
proxy at your burps burp suite and what

894
00:41:49,690 --> 00:41:53,140
shape shifter does is it will just go

895
00:41:53,140 --> 00:41:55,990
and check a whole bunch of ale of the

896
00:41:55,990 --> 00:41:57,940
common end points it's going to try

897
00:41:57,940 --> 00:41:59,590
different versions of all those

898
00:41:59,590 --> 00:42:01,270
endpoints to kind of build the matrix

899
00:42:01,270 --> 00:42:05,650
and test all of them to see if they

900
00:42:05,650 --> 00:42:08,170
can't find a graph to our console and or

901
00:42:08,170 --> 00:42:10,340
end point

902
00:42:10,340 --> 00:42:12,400
you

903
00:42:14,590 --> 00:42:16,520
we'll just say you're an awkward silence

904
00:42:16,520 --> 00:42:23,280
for a moment so once a

905
00:42:23,280 --> 00:42:27,260
one it will parse that introspection

906
00:42:27,260 --> 00:42:29,520
introspection response and I have a

907
00:42:29,520 --> 00:42:31,290
bunch of functionality in there to

908
00:42:31,290 --> 00:42:32,990
detect a different scalar types

909
00:42:32,990 --> 00:42:38,130
including a bunch that aren't defaults

910
00:42:38,130 --> 00:42:39,540
that come I went and looked at some

911
00:42:39,540 --> 00:42:41,460
different libraries out there that had

912
00:42:41,460 --> 00:42:43,770
custom scalar types that developers

913
00:42:43,770 --> 00:42:46,620
developers could easily use and wrote a

914
00:42:46,620 --> 00:42:48,410
bunch of functions that generate

915
00:42:48,410 --> 00:42:52,980
legitimate data to pass in as arguments

916
00:42:52,980 --> 00:42:55,050
in there and then it's gonna try and

917
00:42:55,050 --> 00:42:57,120
make all of these requests that it's

918
00:42:57,120 --> 00:43:00,990
written and if it gets a non 200

919
00:43:00,990 --> 00:43:03,660
response it's going to try its first

920
00:43:03,660 --> 00:43:06,270
it's gonna check and see if graph QL is

921
00:43:06,270 --> 00:43:08,970
making a suggestion of a new field that

922
00:43:08,970 --> 00:43:10,890
it should use and if it is making that

923
00:43:10,890 --> 00:43:13,170
suggestion it will rewrite the query on

924
00:43:13,170 --> 00:43:15,210
the fly using that suggestion and resend

925
00:43:15,210 --> 00:43:17,040
it to try and get you a bunch of 200

926
00:43:17,040 --> 00:43:20,490
responses you can see some here that

927
00:43:20,490 --> 00:43:23,400
have still failed the tool is definitely

928
00:43:23,400 --> 00:43:25,770
an early alpha stages I'm gonna be

929
00:43:25,770 --> 00:43:27,690
adding a lot refining it adding a lot

930
00:43:27,690 --> 00:43:31,020
more functionality in it when I have

931
00:43:31,020 --> 00:43:37,759
time pull requests are happily accepted

932
00:43:43,890 --> 00:43:45,520
so what you want

933
00:43:45,520 --> 00:43:49,000
with here at the end is a bunch of

934
00:43:49,000 --> 00:43:51,880
requests that have 200 responses so you

935
00:43:51,880 --> 00:43:56,040
can filter out all a bad request there

936
00:43:57,990 --> 00:44:01,990
look at only the 200 responses and you

937
00:44:01,990 --> 00:44:03,850
can start passing them into other tools

938
00:44:03,850 --> 00:44:06,550
like intruder and repeater one of the

939
00:44:06,550 --> 00:44:08,260
features that I want to build into this

940
00:44:08,260 --> 00:44:11,010
is that when it creates all of the

941
00:44:11,010 --> 00:44:14,080
example requests it keeps track of all

942
00:44:14,080 --> 00:44:16,240
the 200 responses and then I can rewrite

943
00:44:16,240 --> 00:44:18,520
all of those requests again to an actual

944
00:44:18,520 --> 00:44:20,920
file that has custom injection markers

945
00:44:20,920 --> 00:44:22,330
already put in the right spot

946
00:44:22,330 --> 00:44:25,000
so you can just take that and pass all

947
00:44:25,000 --> 00:44:27,640
of those into sequel map and sequel map

948
00:44:27,640 --> 00:44:29,410
we'll go through and try for a sequel

949
00:44:29,410 --> 00:44:30,820
injection attacks on all these different

950
00:44:30,820 --> 00:44:34,180
requests another tool I like to call out

951
00:44:34,180 --> 00:44:38,140
is by Mike Hodges and it's called hide

952
00:44:38,140 --> 00:44:40,330
and sneak and it's a command-line tool

953
00:44:40,330 --> 00:44:42,670
that lets you set up a ephemeral cloud

954
00:44:42,670 --> 00:44:45,100
infrastructure that you can use for

955
00:44:45,100 --> 00:44:47,560
domain fronting so if you find that your

956
00:44:47,560 --> 00:44:51,310
requests are being blacklisted you know

957
00:44:51,310 --> 00:44:53,440
like from your IP address you can see

958
00:44:53,440 --> 00:44:54,910
really quick spend spin out some cloud

959
00:44:54,910 --> 00:44:56,740
infrastructure proxies the requests

960
00:44:56,740 --> 00:44:59,410
screw that and now you can send requests

961
00:44:59,410 --> 00:45:02,470
on the behalf of CDN providers which

962
00:45:02,470 --> 00:45:06,250
bypasses a lot of that and that's kind

963
00:45:06,250 --> 00:45:11,700
of all I have right now alrighty we can

964
00:45:11,700 --> 00:45:14,650
see if anyone has any questions in the

965
00:45:14,650 --> 00:45:17,050
chat for those that are watching the

966
00:45:17,050 --> 00:45:18,400
live stream please throw in your

967
00:45:18,400 --> 00:45:21,040
questions in the twitch chat and we'll

968
00:45:21,040 --> 00:45:22,680
try to answer them on screen we've got

969
00:45:22,680 --> 00:45:24,000
[Music]

970
00:45:24,000 --> 00:45:28,470
10 15 minutes left

971
00:45:29,369 --> 00:45:32,410
all right we got a are you do you have

972
00:45:32,410 --> 00:45:33,730
the chat up there what would you like me

973
00:45:33,730 --> 00:45:37,210
I do them for you okay yeah geeky should

974
00:45:37,210 --> 00:45:39,820
I'm asked how do you deal with large

975
00:45:39,820 --> 00:45:44,740
responses of introspection queries yeah

976
00:45:44,740 --> 00:45:46,630
so he said he tried to graph you over

977
00:45:46,630 --> 00:45:52,510
wager and it crashed this is true I also

978
00:45:52,510 --> 00:45:55,300
had Dracula Voyager crash for very large

979
00:45:55,300 --> 00:45:58,330
introspection responses so I don't have

980
00:45:58,330 --> 00:45:58,960
a great

981
00:45:58,960 --> 00:46:01,420
lucien for that right now something I

982
00:46:01,420 --> 00:46:03,190
have done it's kind of manually broken

983
00:46:03,190 --> 00:46:06,360
up that response into smaller JSON

984
00:46:06,360 --> 00:46:09,310
pieces you know you got to add in the

985
00:46:09,310 --> 00:46:10,750
right curly braces in the right spot to

986
00:46:10,750 --> 00:46:12,430
do that to try and break it down into

987
00:46:12,430 --> 00:46:15,760
some smaller responses and then until I

988
00:46:15,760 --> 00:46:18,400
found a threshold that graphical Voyager

989
00:46:18,400 --> 00:46:21,760
would accept there also there's a few

990
00:46:21,760 --> 00:46:23,950
other tools that I want to experiment

991
00:46:23,950 --> 00:46:26,380
more that with that do the same type of

992
00:46:26,380 --> 00:46:32,110
thing as graph QL Voyager and but I

993
00:46:32,110 --> 00:46:34,030
haven't really had a chance to mess with

994
00:46:34,030 --> 00:46:36,780
them too much yet

995
00:46:40,380 --> 00:46:43,180
so I guess some people have better luck

996
00:46:43,180 --> 00:46:45,820
than others using this I don't know if I

997
00:46:45,820 --> 00:46:48,130
had something to do with the actual size

998
00:46:48,130 --> 00:46:51,130
of the response or the actual complexity

999
00:46:51,130 --> 00:46:53,740
of the response like how deep see are

1000
00:46:53,740 --> 00:46:59,650
these things nested so but the best

1001
00:46:59,650 --> 00:47:02,590
thing I found with it is that graph go

1002
00:47:02,590 --> 00:47:05,830
Voyager is free so if someone does find

1003
00:47:05,830 --> 00:47:10,270
a way to do this they can pull requests

1004
00:47:10,270 --> 00:47:12,850
to that Pro today I'm sure that they

1005
00:47:12,850 --> 00:47:14,200
would absolutely love to have some of

1006
00:47:14,200 --> 00:47:16,460
these problems solved

1007
00:47:16,460 --> 00:47:18,520
you

1008
00:47:21,250 --> 00:47:23,700
so the the nodes and edges

1009
00:47:23,700 --> 00:47:25,410
the gross he said what is nodes and

1010
00:47:25,410 --> 00:47:27,359
edges in graph QL I have seen this many

1011
00:47:27,359 --> 00:47:29,790
times the graph QL query is it's

1012
00:47:29,790 --> 00:47:31,410
something to find in the schema or the

1013
00:47:31,410 --> 00:47:34,349
standing group standard graph QL is it

1014
00:47:34,349 --> 00:47:36,750
field so it's it's not it's defined in

1015
00:47:36,750 --> 00:47:41,070
the schema but it's not necessary in the

1016
00:47:41,070 --> 00:47:42,900
spec and that's usually just some

1017
00:47:42,900 --> 00:47:45,270
defaults that the actual different

1018
00:47:45,270 --> 00:47:47,940
server implementations that use graph QL

1019
00:47:47,940 --> 00:47:50,849
have built in and it's kind of just a

1020
00:47:50,849 --> 00:47:54,920
way for them to structure their schemas

1021
00:47:54,920 --> 00:47:59,849
using generic fields and objects so that

1022
00:47:59,849 --> 00:48:03,810
the developers have more flexibility but

1023
00:48:03,810 --> 00:48:05,310
it's not in the specification itself

1024
00:48:05,310 --> 00:48:08,810
that I know that you have to have that

1025
00:48:10,369 --> 00:48:14,070
are any resources to practice and get

1026
00:48:14,070 --> 00:48:17,300
better a hacking graph QL I would say

1027
00:48:17,300 --> 00:48:20,970
going to bugcrowd and find some projects

1028
00:48:20,970 --> 00:48:23,339
that are using graph QL and practice

1029
00:48:23,339 --> 00:48:26,790
there there are occasionally a hack the

1030
00:48:26,790 --> 00:48:29,910
box here and there that have it but I

1031
00:48:29,910 --> 00:48:33,000
haven't found like a graph QL playground

1032
00:48:33,000 --> 00:48:37,880
for instance that has a son

1033
00:48:38,480 --> 00:48:40,290
intentionally vulnerable actually now

1034
00:48:40,290 --> 00:48:42,750
that I'm saying that I do believe that a

1035
00:48:42,750 --> 00:48:46,530
wasp juice shop which is an

1036
00:48:46,530 --> 00:48:48,390
intentionally vulnerable web application

1037
00:48:48,390 --> 00:48:51,510
developed by a wasp does have a gradual

1038
00:48:51,510 --> 00:48:55,230
endpoint now one other thing that is

1039
00:48:55,230 --> 00:48:57,119
kind of interesting to mention is that I

1040
00:48:57,119 --> 00:48:58,800
found out the other two the other week

1041
00:48:58,800 --> 00:49:02,310
that Magento 2 has graph you all built

1042
00:49:02,310 --> 00:49:05,250
into it by default now so if you if any

1043
00:49:05,250 --> 00:49:07,349
every Magento to website that's out

1044
00:49:07,349 --> 00:49:09,480
there if you just hack slash graph you

1045
00:49:09,480 --> 00:49:12,660
well on to the end you'll be able to hit

1046
00:49:12,660 --> 00:49:14,790
up there graph QL endpoint that's built

1047
00:49:14,790 --> 00:49:17,579
in and enabled by default whether the

1048
00:49:17,579 --> 00:49:21,869
people using that project understand it

1049
00:49:21,869 --> 00:49:23,880
or not and I want to mention that

1050
00:49:23,880 --> 00:49:26,160
because I don't know if you've ever had

1051
00:49:26,160 --> 00:49:29,460
to I feel like having it enabled a

1052
00:49:29,460 --> 00:49:32,320
default is the wrong way to go with the

1053
00:49:32,320 --> 00:49:34,810
if you've ever had to update Magento

1054
00:49:34,810 --> 00:49:37,210
it's not a straightforward easy need to

1055
00:49:37,210 --> 00:49:40,150
do all the time and if a vulnerability

1056
00:49:40,150 --> 00:49:42,700
was disclosed for Magento to within

1057
00:49:42,700 --> 00:49:46,330
their graph QL schema it would force a

1058
00:49:46,330 --> 00:49:48,550
lot of people to have to suffer from

1059
00:49:48,550 --> 00:49:50,700
this vulnerability that don't even know

1060
00:49:50,700 --> 00:49:53,080
that their Magento cheese store has

1061
00:49:53,080 --> 00:49:55,570
graph QL so they meant don't even know

1062
00:49:55,570 --> 00:49:57,880
what it is they're like oh well we don't

1063
00:49:57,880 --> 00:50:00,550
use whatever that is a little bit they

1064
00:50:00,550 --> 00:50:02,050
know their store is sitting there mul

1065
00:50:02,050 --> 00:50:05,470
neural because this endpoint is enabled

1066
00:50:05,470 --> 00:50:12,250
by default trying to appear if you're

1067
00:50:12,250 --> 00:50:13,810
beginning in graph QL how do you

1068
00:50:13,810 --> 00:50:17,530
approach a new website first but you

1069
00:50:17,530 --> 00:50:20,050
know learn as much as possible about

1070
00:50:20,050 --> 00:50:22,630
graph QL go read their documentation and

1071
00:50:22,630 --> 00:50:25,270
understand the intricacies of it use a

1072
00:50:25,270 --> 00:50:29,770
tool like line or like void sex to try

1073
00:50:29,770 --> 00:50:33,220
introspection query with it and have it

1074
00:50:33,220 --> 00:50:34,990
Auto parse those results out into

1075
00:50:34,990 --> 00:50:38,110
something for you and just start start

1076
00:50:38,110 --> 00:50:40,750
slow start sending these queries start

1077
00:50:40,750 --> 00:50:44,740
changing things with repeater start to

1078
00:50:44,740 --> 00:50:47,890
understand what changes and requests

1079
00:50:47,890 --> 00:50:50,830
cause what changes and responses and

1080
00:50:50,830 --> 00:50:52,660
just you know take your time and really

1081
00:50:52,660 --> 00:50:54,100
just kind of educate yourself on what

1082
00:50:54,100 --> 00:50:55,600
you're what you're dealing with is as

1083
00:50:55,600 --> 00:51:01,780
much as possible look down here is there

1084
00:51:01,780 --> 00:51:05,200
like a built with profiler or something

1085
00:51:05,200 --> 00:51:06,910
like that that people can use to

1086
00:51:06,910 --> 00:51:12,310
identify graph QL implementations out

1087
00:51:12,310 --> 00:51:15,880
there sure so no I don't know about this

1088
00:51:15,880 --> 00:51:19,030
built with but there are some kind of

1089
00:51:19,030 --> 00:51:21,640
key distinguishing features that graph

1090
00:51:21,640 --> 00:51:24,760
QL has and one of them is the question

1091
00:51:24,760 --> 00:51:28,480
mark query equals in the URL typically

1092
00:51:28,480 --> 00:51:31,560
graph QL can accept get and post

1093
00:51:31,560 --> 00:51:37,060
requests so if you see get equals in the

1094
00:51:37,060 --> 00:51:39,370
URL bar or I'm sorry query equals and

1095
00:51:39,370 --> 00:51:42,370
URL bar I found that I'll just take that

1096
00:51:42,370 --> 00:51:44,620
and I'll try and send it an

1097
00:51:44,620 --> 00:51:46,180
introspection query

1098
00:51:46,180 --> 00:51:48,760
and I'm kind of building I'm building a

1099
00:51:48,760 --> 00:51:51,010
cheat sheet right now to kind of get

1100
00:51:51,010 --> 00:51:52,480
people started with this it's not quite

1101
00:51:52,480 --> 00:51:53,650
done yet

1102
00:51:53,650 --> 00:51:55,690
I bought the domain name grass ul

1103
00:51:55,690 --> 00:51:57,160
pentesting com

1104
00:51:57,160 --> 00:51:59,230
so I'm gonna have that point we get hub

1105
00:51:59,230 --> 00:52:00,910
pages and kind of put post some guides

1106
00:52:00,910 --> 00:52:03,220
and uh that people can use to try and do

1107
00:52:03,220 --> 00:52:06,010
this but if you and I'll have some

1108
00:52:06,010 --> 00:52:08,980
snippets on there like that's something

1109
00:52:08,980 --> 00:52:11,619
that you can just slap into URL bar

1110
00:52:11,619 --> 00:52:16,299
that's a pre-processed introduction

1111
00:52:16,299 --> 00:52:20,289
query and as a get request and even if

1112
00:52:20,289 --> 00:52:22,150
get your spectrum query is disabled

1113
00:52:22,150 --> 00:52:24,039
you'll still get a response that says

1114
00:52:24,039 --> 00:52:26,619
you know hey sorry introspection query

1115
00:52:26,619 --> 00:52:29,289
is disabled and if you get that you know

1116
00:52:29,289 --> 00:52:32,250
you're dealing with graph QL

1117
00:52:38,339 --> 00:52:43,660
so the alkies said hacker 101 has three

1118
00:52:43,660 --> 00:52:47,529
graph QL capture the flags so you might

1119
00:52:47,529 --> 00:52:49,210
want to check that out that's helpful

1120
00:52:49,210 --> 00:52:51,309
information thank you there was a

1121
00:52:51,309 --> 00:52:54,779
question about a good graph QL browser

1122
00:52:54,779 --> 00:52:57,249
so yeah browser

1123
00:52:57,249 --> 00:53:00,940
it's not exactly a browser but I like to

1124
00:53:00,940 --> 00:53:04,029
use alt I air that's that's my personal

1125
00:53:04,029 --> 00:53:06,729
preference and it's it's more of a graph

1126
00:53:06,729 --> 00:53:10,119
QL console well but you don't have to

1127
00:53:10,119 --> 00:53:12,579
use if a website doesn't have a console

1128
00:53:12,579 --> 00:53:14,319
available but they have a graphical

1129
00:53:14,319 --> 00:53:17,380
endpoint you can download Altair as a

1130
00:53:17,380 --> 00:53:21,219
browser extension and or an electric

1131
00:53:21,219 --> 00:53:23,410
stand-alone electron app and you can

1132
00:53:23,410 --> 00:53:25,269
just put the graph ul endpoint right

1133
00:53:25,269 --> 00:53:27,670
into there and behind the scenes it's

1134
00:53:27,670 --> 00:53:29,380
going to send an introspection clear you

1135
00:53:29,380 --> 00:53:32,469
build documentation let you kind of

1136
00:53:32,469 --> 00:53:34,499
browse through the graph Kewell's

1137
00:53:34,499 --> 00:53:43,119
responses and that way looks like we had

1138
00:53:43,119 --> 00:53:44,229
a question about like a real-world

1139
00:53:44,229 --> 00:53:47,349
example I guess of a cool vulnerability

1140
00:53:47,349 --> 00:53:51,339
that you found using graph QL so I think

1141
00:53:51,339 --> 00:53:52,930
you know some of the ones I covered in

1142
00:53:52,930 --> 00:53:55,390
the talk are pretty interesting I think

1143
00:53:55,390 --> 00:53:58,989
that a lot of this stuff is Wow

1144
00:53:58,989 --> 00:54:01,420
some of the other talks that happened

1145
00:54:01,420 --> 00:54:05,829
today are dealing with technology that's

1146
00:54:05,829 --> 00:54:07,989
been around for a while and I've noticed

1147
00:54:07,989 --> 00:54:10,749
you know over time with the requirements

1148
00:54:10,749 --> 00:54:12,759
to get an X point you got to chain all

1149
00:54:12,759 --> 00:54:15,039
these things together do all this

1150
00:54:15,039 --> 00:54:17,499
different stuff but well graph QL has

1151
00:54:17,499 --> 00:54:19,450
been out for like five years now there's

1152
00:54:19,450 --> 00:54:21,430
still not a lot of understanding around

1153
00:54:21,430 --> 00:54:24,700
it and there's always kind of the

1154
00:54:24,700 --> 00:54:26,109
pressure from the business side of

1155
00:54:26,109 --> 00:54:28,299
things on the development side of things

1156
00:54:28,299 --> 00:54:30,489
to hurry up and pump out all of this

1157
00:54:30,489 --> 00:54:32,940
functionality as fast as possible and

1158
00:54:32,940 --> 00:54:35,589
what that does is it requires developers

1159
00:54:35,589 --> 00:54:37,390
to cut corners they can't spend enough

1160
00:54:37,390 --> 00:54:39,880
time it's not their fault you know they

1161
00:54:39,880 --> 00:54:41,529
just they can't they don't have them

1162
00:54:41,529 --> 00:54:44,140
time or resources to take to get to

1163
00:54:44,140 --> 00:54:46,839
really understand if they're doing this

1164
00:54:46,839 --> 00:54:49,150
correctly there's not a lot of blog

1165
00:54:49,150 --> 00:54:50,410
articles out there about how to

1166
00:54:50,410 --> 00:54:51,850
correctly do things

1167
00:54:51,850 --> 00:54:55,150
so it's kind of I found it this kind of

1168
00:54:55,150 --> 00:54:57,010
lives in the shadows and something as

1169
00:54:57,010 --> 00:54:59,950
simple as just passing in a password

1170
00:54:59,950 --> 00:55:02,500
field with a user request will actually

1171
00:55:02,500 --> 00:55:04,300
get you hash responses from the database

1172
00:55:04,300 --> 00:55:10,510
and that to me it's really mind-blowing

1173
00:55:10,510 --> 00:55:12,460
I just how simple it is I can just ask

1174
00:55:12,460 --> 00:55:16,900
for a password and get it back so doing

1175
00:55:16,900 --> 00:55:19,450
that kind of field stuffing stuff has

1176
00:55:19,450 --> 00:55:21,430
been really valuable for me I'm kind of

1177
00:55:21,430 --> 00:55:24,640
putting together a word list of common

1178
00:55:24,640 --> 00:55:28,030
database column names if you have any

1179
00:55:28,030 --> 00:55:30,310
feel free to reach out on me on reach

1180
00:55:30,310 --> 00:55:32,680
out to me on Twitter I love to get some

1181
00:55:32,680 --> 00:55:35,020
input on that and really build a robust

1182
00:55:35,020 --> 00:55:37,300
word list of commonly used database

1183
00:55:37,300 --> 00:55:39,070
columns because it seems that it's a

1184
00:55:39,070 --> 00:55:41,470
common thing for people to just map the

1185
00:55:41,470 --> 00:55:43,870
graph QL schema fields straight to

1186
00:55:43,870 --> 00:55:46,300
database column names and just have a

1187
00:55:46,300 --> 00:55:48,370
function in there that points them at to

1188
00:55:48,370 --> 00:55:53,890
their so be linked to the Altair I

1189
00:55:53,890 --> 00:55:56,400
appreciate that

1190
00:55:59,110 --> 00:56:01,970
what would you recommend graph QL for

1191
00:56:01,970 --> 00:56:04,430
compared to my sequel excetera for api's

1192
00:56:04,430 --> 00:56:09,290
a bit like github so my sequel was more

1193
00:56:09,290 --> 00:56:12,650
of a database implementation where graph

1194
00:56:12,650 --> 00:56:15,080
QL graph QL is different than a graph

1195
00:56:15,080 --> 00:56:19,550
database and at first I didn't even

1196
00:56:19,550 --> 00:56:21,890
understand that I thought that graph QL

1197
00:56:21,890 --> 00:56:24,020
is like a layer on top of a graph

1198
00:56:24,020 --> 00:56:27,440
database but it's not graph QL is just a

1199
00:56:27,440 --> 00:56:30,230
middleware that sits between the client

1200
00:56:30,230 --> 00:56:32,980
and your server-side architecture and

1201
00:56:32,980 --> 00:56:37,130
takes the query in parses it out down to

1202
00:56:37,130 --> 00:56:38,990
resolver functions and within those

1203
00:56:38,990 --> 00:56:41,090
resolver functions every resolve our

1204
00:56:41,090 --> 00:56:43,880
function if you wanted to could talk to

1205
00:56:43,880 --> 00:56:45,560
you a completely different database or

1206
00:56:45,560 --> 00:56:47,390
it could have even talked to a different

1207
00:56:47,390 --> 00:56:51,680
API somewhere else so it's extremely

1208
00:56:51,680 --> 00:56:54,530
flexible what it allows you to do and

1209
00:56:54,530 --> 00:56:56,570
whatever that resolver function whatever

1210
00:56:56,570 --> 00:56:59,300
it's doing whatever information it gets

1211
00:56:59,300 --> 00:57:01,610
back and get hands back to graph QL

1212
00:57:01,610 --> 00:57:05,030
graph QL then stitches together the

1213
00:57:05,030 --> 00:57:06,860
responses from all of these resolver

1214
00:57:06,860 --> 00:57:09,260
functions into one large response that

1215
00:57:09,260 --> 00:57:11,410
it sends it back to the client

1216
00:57:11,410 --> 00:57:13,470
you

1217
00:57:16,340 --> 00:57:17,810
how often do i account agraphia

1218
00:57:17,810 --> 00:57:22,270
endpoints more and more all the time i

1219
00:57:22,270 --> 00:57:26,270
graph you all's lead to me probably

1220
00:57:26,270 --> 00:57:30,700
within the last six to nine months so

1221
00:57:30,700 --> 00:57:33,320
but like them like the magenta thing I'm

1222
00:57:33,320 --> 00:57:35,480
always finding out that oh these people

1223
00:57:35,480 --> 00:57:36,560
are trying to are taking advantage

1224
00:57:36,560 --> 00:57:38,120
throughout through all technology I

1225
00:57:38,120 --> 00:57:42,220
wonder if their plantation is secure uh

1226
00:57:42,220 --> 00:57:45,980
you know I'm not the best at Google

1227
00:57:45,980 --> 00:57:47,300
dorks I'll be the first one to admit

1228
00:57:47,300 --> 00:57:50,900
that I'm sure that somebody else could

1229
00:57:50,900 --> 00:57:53,570
create a Google dork juice you know like

1230
00:57:53,570 --> 00:57:58,310
in URL slash graph QL they're probably a

1231
00:57:58,310 --> 00:58:00,590
good one to start with and to just see

1232
00:58:00,590 --> 00:58:02,390
all the websites out there that have you

1233
00:58:02,390 --> 00:58:04,850
know the slash graph key well in their

1234
00:58:04,850 --> 00:58:09,740
URL along with you could you could take

1235
00:58:09,740 --> 00:58:12,950
that a slide and I'll post this also of

1236
00:58:12,950 --> 00:58:14,510
all the different common graphs you'll

1237
00:58:14,510 --> 00:58:18,160
endpoints and you in URLs for those also

1238
00:58:18,160 --> 00:58:23,109
the benefits that graph QL provides so

1239
00:58:23,230 --> 00:58:27,980
latency is the big one it really yeah it

1240
00:58:27,980 --> 00:58:32,120
provides bounty he's good one but but it

1241
00:58:32,120 --> 00:58:33,830
really saw solves a lot of problem when

1242
00:58:33,830 --> 00:58:37,930
it comes to latency and having to send

1243
00:58:37,930 --> 00:58:40,190
multiple requests to get stuff like I

1244
00:58:40,190 --> 00:58:44,450
don't have to send a create user and

1245
00:58:44,450 --> 00:58:47,330
then query to get that users ID I can

1246
00:58:47,330 --> 00:58:50,480
say create this user with this data and

1247
00:58:50,480 --> 00:58:53,630
then after that is successfully executed

1248
00:58:53,630 --> 00:58:56,540
give me all the information that I need

1249
00:58:56,540 --> 00:58:58,790
about that user back as of confirmation

1250
00:58:58,790 --> 00:59:01,280
response so I can do it all on one

1251
00:59:01,280 --> 00:59:05,180
request as well as make extremely

1252
00:59:05,180 --> 00:59:08,900
complex requests and get tons of data

1253
00:59:08,900 --> 00:59:11,420
back if I had a very let's say I was

1254
00:59:11,420 --> 00:59:14,810
running a sim and I have tons of all

1255
00:59:14,810 --> 00:59:17,300
this graph all these JavaScript graphs I

1256
00:59:17,300 --> 00:59:18,650
have a huge administration bass

1257
00:59:18,650 --> 00:59:20,600
dashboard that's pulling in information

1258
00:59:20,600 --> 00:59:23,360
for a bunch of different widgets I can

1259
00:59:23,360 --> 00:59:26,180
send one request and get a response back

1260
00:59:26,180 --> 00:59:27,650
that gives me the data I need to

1261
00:59:27,650 --> 00:59:29,400
populate every single one of those

1262
00:59:29,400 --> 00:59:32,630
budgets all of my dashboard

1263
00:59:39,730 --> 00:59:42,230
if anyone finds anything interesting

1264
00:59:42,230 --> 00:59:43,760
facts out feel free to reach out to me

1265
00:59:43,760 --> 00:59:46,370
on Twitter and let me know I'm always I

1266
00:59:46,370 --> 00:59:47,960
love learning new stuff about graph QL

1267
00:59:47,960 --> 00:59:50,330
all the time and if you have any

1268
00:59:50,330 --> 00:59:52,280
questions again feel free to reach out

1269
00:59:52,280 --> 00:59:55,760
to me on Twitter as well yeah do you

1270
00:59:55,760 --> 00:59:57,440
have you do you have like a slide with

1271
00:59:57,440 --> 00:59:59,210
your contact info it wasn't sure if you

1272
00:59:59,210 --> 01:00:00,380
had a slide at the beginning or

1273
01:00:00,380 --> 01:00:05,750
something like that yeah yeah yeah we

1274
01:00:05,750 --> 01:00:07,010
could just like throw up your Twitter

1275
01:00:07,010 --> 01:00:11,030
account up on that page but we did share

1276
01:00:11,030 --> 01:00:13,100
his Twitter account on bugcrowd Twitter

1277
01:00:13,100 --> 01:00:17,240
account so yeah reverse I just put it in

1278
01:00:17,240 --> 01:00:20,990
there there you go so our VR shell on

1279
01:00:20,990 --> 01:00:28,730
Twitter resume share you know go back

1280
01:00:28,730 --> 01:00:31,240
here

1281
01:00:34,310 --> 01:00:38,480
got your fast waiver yes I don't know

1282
01:00:38,480 --> 01:00:39,060
what I'm doing

1283
01:00:39,060 --> 01:00:41,740
[Laughter]

1284
01:00:41,740 --> 01:00:45,530
we're just gonna go all the way back the

1285
01:00:45,530 --> 01:00:47,890
hard way

1286
01:00:53,450 --> 01:00:56,410
we're getting there

1287
01:01:02,179 --> 01:01:05,519
okay oh yeah yeah also I love Scott

1288
01:01:05,519 --> 01:01:06,869
having a lot so there's n he's got every

1289
01:01:06,869 --> 01:01:13,199
thought they're automatically well where

1290
01:01:13,199 --> 01:01:14,819
I guess we could take this one last

1291
01:01:14,819 --> 01:01:17,389
question and then we'll we'll wrap it up

1292
01:01:17,389 --> 01:01:20,759
we had a question from geeky shabam past

1293
01:01:20,759 --> 01:01:27,089
so let's see is a deprecated field also

1294
01:01:27,089 --> 01:01:30,419
defined in the schema it sure is so in

1295
01:01:30,419 --> 01:01:32,249
the schema you'll see a field name and

1296
01:01:32,249 --> 01:01:34,919
then you know the definition for it and

1297
01:01:34,919 --> 01:01:37,439
then you'll see is deprecated true in

1298
01:01:37,439 --> 01:01:39,419
there but you should still send a

1299
01:01:39,419 --> 01:01:44,189
request to it anyway all right well

1300
01:01:44,189 --> 01:01:46,379
please everyone if you're watching live

1301
01:01:46,379 --> 01:01:49,109
on the twitch stream please give him a

1302
01:01:49,109 --> 01:01:52,079
round of applause in the chat and if

1303
01:01:52,079 --> 01:01:54,569
you're watching elsewhere live or

1304
01:01:54,569 --> 01:01:56,339
otherwise please give us a shout out on

1305
01:01:56,339 --> 01:01:59,069
Twitter twitter.com slash bugcrowd

1306
01:01:59,069 --> 01:02:01,799
as well as twitter.com slash reverse

1307
01:02:01,799 --> 01:02:06,149
shell format that's our vr she'll give

1308
01:02:06,149 --> 01:02:09,299
us a tweet and we will share all this

1309
01:02:09,299 --> 01:02:12,179
information again in the coming week or

1310
01:02:12,179 --> 01:02:13,709
two we should have all this all these

1311
01:02:13,709 --> 01:02:16,169
videos up on our YouTube channel and I'm

1312
01:02:16,169 --> 01:02:18,299
speaking at Texas cyber summit about

1313
01:02:18,299 --> 01:02:20,609
this as well so if anyone's going to

1314
01:02:20,609 --> 01:02:24,659
Texas cyber summit in a few weeks you

1315
01:02:24,659 --> 01:02:28,789
know introduce yourself I love to talk

1316
01:02:29,310 --> 01:02:31,410
awesome well thank you so much Matt we

1317
01:02:31,410 --> 01:02:33,120
really appreciated your talk here I

1318
01:02:33,120 --> 01:02:36,210
think people really enjoyed it cool

1319
01:02:36,210 --> 01:02:39,230
thank us

