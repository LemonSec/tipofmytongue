1
00:00:02,330 --> 00:00:11,290
[Music]

2
00:00:11,290 --> 00:00:13,670
so the next week was actually someone

3
00:00:13,670 --> 00:00:15,470
really close to me he's a really really

4
00:00:15,470 --> 00:00:18,199
cool guy and was actually my first

5
00:00:18,199 --> 00:00:19,460
InfoSec manager

6
00:00:19,460 --> 00:00:21,619
he's also been a mentor to me and I've

7
00:00:21,619 --> 00:00:24,050
watched him drop zero days in real life

8
00:00:24,050 --> 00:00:27,050
live an excuse exclusive which changed

9
00:00:27,050 --> 00:00:28,099
my life

10
00:00:28,099 --> 00:00:31,429
he's the CV connoisseur himself has

11
00:00:31,429 --> 00:00:33,680
broken in at an international scale on

12
00:00:33,680 --> 00:00:35,989
multiple occasions he's actually the

13
00:00:35,989 --> 00:00:38,840
founder and the creator of pentester

14
00:00:38,840 --> 00:00:40,850
labs and he's a Frenchman so even cooler

15
00:00:40,850 --> 00:00:42,440
the one and only

16
00:00:42,440 --> 00:00:46,269
Luana finisher also known as sniff hey

17
00:00:46,269 --> 00:00:51,530
can everyone hear me okay yep so good to

18
00:00:51,530 --> 00:00:53,539
start I'm gonna share my screen and get

19
00:00:53,539 --> 00:00:56,719
started just need to find the right one

20
00:00:56,719 --> 00:00:58,480
yep

21
00:00:58,480 --> 00:01:02,749
okay so cool that gets you bones and

22
00:01:02,749 --> 00:01:06,130
bones I guess can everyone see it okay

23
00:01:06,130 --> 00:01:09,590
so now you can part of a tag line say

24
00:01:09,590 --> 00:01:12,920
okay cool so code that gets you pwned so

25
00:01:12,920 --> 00:01:16,100
basically I do like this fing name

26
00:01:16,100 --> 00:01:17,480
fantasy lab if you don't know about it

27
00:01:17,480 --> 00:01:21,470
you should probably check it out and we

28
00:01:21,470 --> 00:01:23,180
are like a lot of challenges and also

29
00:01:23,180 --> 00:01:25,010
like some stuff around code review and

30
00:01:25,010 --> 00:01:27,530
my job is basically to teach people how

31
00:01:27,530 --> 00:01:29,980
we can find fix and exploit bugs and

32
00:01:29,980 --> 00:01:32,480
what I'm trying to do is find

33
00:01:32,480 --> 00:01:35,300
interesting pattern but will help people

34
00:01:35,300 --> 00:01:38,150
learn how to find new patterns and

35
00:01:38,150 --> 00:01:40,100
that's where this talk is coming from is

36
00:01:40,100 --> 00:01:41,510
that currently I'm reviewing a lot of

37
00:01:41,510 --> 00:01:44,270
source code and so good thing is that's

38
00:01:44,270 --> 00:01:46,640
it's relaxing me so it's really good to

39
00:01:46,640 --> 00:01:48,230
like at the moment be able to relax by

40
00:01:48,230 --> 00:01:49,670
reading source code it's a bit weird for

41
00:01:49,670 --> 00:01:51,740
most people but for me it helps I don't

42
00:01:51,740 --> 00:01:53,600
know why and so I decided to put

43
00:01:53,600 --> 00:01:54,950
together like a lot of these bugs

44
00:01:54,950 --> 00:01:56,840
because I found them interesting and I

45
00:01:56,840 --> 00:01:59,690
hope you do too and yeah and as such if

46
00:01:59,690 --> 00:02:01,190
you say so I'll run this website limp

47
00:02:01,190 --> 00:02:04,190
enter setup check it out so we're gonna

48
00:02:04,190 --> 00:02:06,620
jump straight in and we're gonna start

49
00:02:06,620 --> 00:02:10,038
with a bit of go laying I want it to be

50
00:02:10,038 --> 00:02:11,660
on the disc all at the same time to see

51
00:02:11,660 --> 00:02:12,890
like if people wear

52
00:02:12,890 --> 00:02:15,890
Engelberg okay so let's start it okay so

53
00:02:15,890 --> 00:02:19,250
we got this little go function and I

54
00:02:19,250 --> 00:02:22,340
think as a bug bounty hunter or as a

55
00:02:22,340 --> 00:02:24,170
penetration tester you really need to

56
00:02:24,170 --> 00:02:26,840
look into source code to find new bugs

57
00:02:26,840 --> 00:02:29,270
or new patterns and you also really need

58
00:02:29,270 --> 00:02:31,250
to look into a plot file because that's

59
00:02:31,250 --> 00:02:35,420
where you get big and cool P 1 or P 0

60
00:02:35,420 --> 00:02:37,790
instead of finding like other bugs that

61
00:02:37,790 --> 00:02:40,370
may be less valuable financially I guess

62
00:02:40,370 --> 00:02:44,120
so here this is a classic go function to

63
00:02:44,120 --> 00:02:46,640
a to manage a large TDP a request and

64
00:02:46,640 --> 00:02:49,550
send back a response and we get a file

65
00:02:49,550 --> 00:02:52,459
from from fog very very is an error we

66
00:02:52,459 --> 00:02:54,920
print the error and we return if there

67
00:02:54,920 --> 00:02:56,840
is no error we move to find that clause

68
00:02:56,840 --> 00:02:59,510
which is a way in go to select ants I

69
00:02:59,510 --> 00:03:02,120
don't need but viable just clean it up

70
00:03:02,120 --> 00:03:03,590
for me I don't want to take care of it

71
00:03:03,590 --> 00:03:04,970
just do it when you don't need it so I

72
00:03:04,970 --> 00:03:07,070
don't need to know like we still using

73
00:03:07,070 --> 00:03:09,769
that function but valuable then I'm

74
00:03:09,769 --> 00:03:13,760
gonna create a file in slash temp using

75
00:03:13,760 --> 00:03:15,890
IO utl temp file and I'm going to pass

76
00:03:15,890 --> 00:03:20,390
the handler dot find them to keep the

77
00:03:20,390 --> 00:03:22,730
same kind of the same name as the 5 that

78
00:03:22,730 --> 00:03:25,430
was uploaded then I read all the fat

79
00:03:25,430 --> 00:03:27,350
from the HTTP request if there is an

80
00:03:27,350 --> 00:03:28,970
error a print error and a return

81
00:03:28,970 --> 00:03:32,269
otherwise I write the bytes into my temp

82
00:03:32,269 --> 00:03:34,940
file and if everything goes well I

83
00:03:34,940 --> 00:03:38,170
arrive I close my temp file and I write

84
00:03:38,170 --> 00:03:41,420
successfully upload this file and that

85
00:03:41,420 --> 00:03:44,630
looks pretty good on paper and there is

86
00:03:44,630 --> 00:03:48,170
not much but can go wrong until you look

87
00:03:48,170 --> 00:03:51,950
in to the details and that's a lot about

88
00:03:51,950 --> 00:03:53,959
what code review each is looking into

89
00:03:53,959 --> 00:03:58,340
the details so let's get started if we

90
00:03:58,340 --> 00:04:00,500
can yep so first we look at the function

91
00:04:00,500 --> 00:04:02,600
temp file because that sounds to be the

92
00:04:02,600 --> 00:04:05,720
only thing we have control over or over

93
00:04:05,720 --> 00:04:09,230
and we can see that temp file uses two

94
00:04:09,230 --> 00:04:11,359
parameters one is a directory where we

95
00:04:11,359 --> 00:04:13,280
want the file to go so here we want to

96
00:04:13,280 --> 00:04:14,900
put it in slash temp so this way it's

97
00:04:14,900 --> 00:04:17,358
not exposed inside the web root of the

98
00:04:17,358 --> 00:04:20,149
server and we also want to pass a

99
00:04:20,149 --> 00:04:22,789
pattern to select ok this is what we

100
00:04:22,789 --> 00:04:25,210
want the final to look like

101
00:04:25,210 --> 00:04:26,500
and if you read carefully the

102
00:04:26,500 --> 00:04:29,080
documentation you can have stars inside

103
00:04:29,080 --> 00:04:31,240
the pattern to see like okay here I want

104
00:04:31,240 --> 00:04:33,069
a placeholder to put like for example a

105
00:04:33,069 --> 00:04:35,050
big random number so it's not easily

106
00:04:35,050 --> 00:04:38,349
guessable and yeah so that looks pretty

107
00:04:38,349 --> 00:04:41,560
safe right if we keep digging and we see

108
00:04:41,560 --> 00:04:43,810
like okay we want to create a tenth a

109
00:04:43,810 --> 00:04:46,630
fighting tent and we want to find them

110
00:04:46,630 --> 00:04:48,789
to be dot slash dot dot slash root slash

111
00:04:48,789 --> 00:04:53,139
food that start dot suffix what golang

112
00:04:53,139 --> 00:04:55,780
will do is create a file in slash foods

113
00:04:55,780 --> 00:04:58,660
food that is a big number that was used

114
00:04:58,660 --> 00:05:00,460
as part of the place order dot the

115
00:05:00,460 --> 00:05:03,610
suffix so basically we can put a file

116
00:05:03,610 --> 00:05:06,460
anywhere we want on the file system by

117
00:05:06,460 --> 00:05:08,710
just a predict a file with a malicious

118
00:05:08,710 --> 00:05:12,639
file name and we but it is interesting

119
00:05:12,639 --> 00:05:15,490
as well because um most developers now

120
00:05:15,490 --> 00:05:19,960
use frameworks like a long time ago

121
00:05:19,960 --> 00:05:22,240
people were using like straight PHP and

122
00:05:22,240 --> 00:05:24,520
where that was terrible security wise

123
00:05:24,520 --> 00:05:27,729
and now everyone moved to framework but

124
00:05:27,729 --> 00:05:30,639
people writing golang just use the

125
00:05:30,639 --> 00:05:32,380
standard libraries because the rubber is

126
00:05:32,380 --> 00:05:34,870
so good but face no need for framework

127
00:05:34,870 --> 00:05:38,440
and the framework available mostly ad

128
00:05:38,440 --> 00:05:40,719
overhead but the difference here is that

129
00:05:40,719 --> 00:05:42,490
most frameworks like if you look at

130
00:05:42,490 --> 00:05:45,190
rails if you look at flask or if you

131
00:05:45,190 --> 00:05:47,080
look up if you look at Reds and Express

132
00:05:47,080 --> 00:05:50,349
if you put a file name in a multi-part

133
00:05:50,349 --> 00:05:52,990
upload with dot dot slash race an

134
00:05:52,990 --> 00:05:55,110
express are going to clean it up for you

135
00:05:55,110 --> 00:05:59,050
flask does in Python flask doesn't do it

136
00:05:59,050 --> 00:05:59,560
for you

137
00:05:59,560 --> 00:06:02,469
but the documentation tells you like you

138
00:06:02,469 --> 00:06:03,820
should do that you should really call

139
00:06:03,820 --> 00:06:05,919
base name on that value board by

140
00:06:05,919 --> 00:06:07,780
variable because otherwise you're gonna

141
00:06:07,780 --> 00:06:10,389
get pwned and so that's how you end up

142
00:06:10,389 --> 00:06:12,370
with a file in slash fruit just by your

143
00:06:12,370 --> 00:06:15,130
credit so I reported but and it got

144
00:06:15,130 --> 00:06:18,280
fixed recently in garland but still was

145
00:06:18,280 --> 00:06:20,770
looking because not everyone is running

146
00:06:20,770 --> 00:06:22,800
the latest version of : as you probably

147
00:06:22,800 --> 00:06:26,080
know and it took a bit of back and forth

148
00:06:26,080 --> 00:06:29,259
with the development team of the coaling

149
00:06:29,259 --> 00:06:30,759
development team to get it fixed but

150
00:06:30,759 --> 00:06:32,560
because we didn't agree it was a bad

151
00:06:32,560 --> 00:06:33,969
pattern I was like that's kind of

152
00:06:33,969 --> 00:06:35,589
surprising and blah blah blah blah that

153
00:06:35,589 --> 00:06:38,680
it end up being changed if we look

154
00:06:38,680 --> 00:06:41,740
at Python three point eight point one we

155
00:06:41,740 --> 00:06:44,080
do the same thing we create in temp and

156
00:06:44,080 --> 00:06:47,320
we put a prefix of that's a fruit and we

157
00:06:47,320 --> 00:06:49,060
can see that the file end up in star

158
00:06:49,060 --> 00:06:52,990
fruit again so yeah not a good pattern

159
00:06:52,990 --> 00:06:56,289
if we look at Ruby and I'm a big Ruby

160
00:06:56,289 --> 00:06:58,600
guy we can see that if we create a file

161
00:06:58,600 --> 00:07:01,300
so the argument I have backward in Ruby

162
00:07:01,300 --> 00:07:03,789
so if we create a file with the pattern

163
00:07:03,789 --> 00:07:07,419
foo / / / root and we create it in slash

164
00:07:07,419 --> 00:07:10,780
then we can see that the file ends up in

165
00:07:10,780 --> 00:07:13,509
slash 10 so we don't have this bug if

166
00:07:13,509 --> 00:07:15,940
you are testing a ruby application but

167
00:07:15,940 --> 00:07:17,410
still a good pattern an interesting one

168
00:07:17,410 --> 00:07:20,560
at least probably hard to pinpoint when

169
00:07:20,560 --> 00:07:22,270
you're doing your blackbox testing but

170
00:07:22,270 --> 00:07:24,190
if you do can review something to be

171
00:07:24,190 --> 00:07:27,400
aware of definitely now we're gonna move

172
00:07:27,400 --> 00:07:30,160
to the next code so this time it's in

173
00:07:30,160 --> 00:07:32,110
Python flask I was talking about before

174
00:07:32,110 --> 00:07:36,190
and we have this application but we'll

175
00:07:36,190 --> 00:07:41,229
take an argument from the URL name URL

176
00:07:41,229 --> 00:07:45,099
and if the URL starts with HTTP colon

177
00:07:45,099 --> 00:07:47,229
slash slash pen test lab car it's gonna

178
00:07:47,229 --> 00:07:49,479
fetch the content so you can imagine

179
00:07:49,479 --> 00:07:52,780
that being used to try a sample fetch

180
00:07:52,780 --> 00:07:55,599
images or things like that and so back

181
00:07:55,599 --> 00:07:58,180
to the client directory but since we

182
00:07:58,180 --> 00:08:00,039
probably got owned once we put this on

183
00:08:00,039 --> 00:08:03,190
TS SS RF protection to make sure that

184
00:08:03,190 --> 00:08:06,789
the URL starts with HTTPS colon colon

185
00:08:06,789 --> 00:08:10,000
slash slash went as a backup and the

186
00:08:10,000 --> 00:08:11,889
promise that starts with is a really bad

187
00:08:11,889 --> 00:08:16,300
way to validate URL because HTTP colon

188
00:08:16,300 --> 00:08:18,580
slash slash trusted mentor.com starts

189
00:08:18,580 --> 00:08:21,190
we've stressed it same for adventists

190
00:08:21,190 --> 00:08:23,770
alaikum this also start with trusted and

191
00:08:23,770 --> 00:08:28,810
people tend to mess that a lot and also

192
00:08:28,810 --> 00:08:30,849
so that's just going to another system

193
00:08:30,849 --> 00:08:32,950
directly but if you can change in your

194
00:08:32,950 --> 00:08:36,490
abilities you can okay it say if it

195
00:08:36,490 --> 00:08:39,130
starts with trusted JW case you can

196
00:08:39,130 --> 00:08:41,078
go for example on in a lava territory

197
00:08:41,078 --> 00:08:44,680
with dot slash file uploaded by a five

198
00:08:44,680 --> 00:08:46,660
at you've heard it before or you can use

199
00:08:46,660 --> 00:08:49,750
an open redirect to link to your server

200
00:08:49,750 --> 00:08:50,500
if

201
00:08:50,500 --> 00:08:52,870
typically I don't follow the redirects

202
00:08:52,870 --> 00:08:55,600
so here what you're gonna do is say my

203
00:08:55,600 --> 00:08:58,060
you're he'll start with trust Huw guys

204
00:08:58,060 --> 00:08:59,380
but when you link to your pan already

205
00:08:59,380 --> 00:09:01,270
right we're gonna go to your server and

206
00:09:01,270 --> 00:09:04,030
just because starts with is not the

207
00:09:04,030 --> 00:09:06,970
right way to validate to UFO just don't

208
00:09:06,970 --> 00:09:09,100
do that and you can also link it with a

209
00:09:09,100 --> 00:09:12,580
header injection so this way here it's

210
00:09:12,580 --> 00:09:16,270
to fetch JSON web token key and you're

211
00:09:16,270 --> 00:09:18,160
gonna link it to a header injection and

212
00:09:18,160 --> 00:09:22,630
you're gonna show up reflects the gwk

213
00:09:22,630 --> 00:09:25,270
inside the body of the response we also

214
00:09:25,270 --> 00:09:28,000
hand our injection so pretty good cool

215
00:09:28,000 --> 00:09:30,160
trick to be aware so yeah if you're

216
00:09:30,160 --> 00:09:31,840
writing secure code don't you start

217
00:09:31,840 --> 00:09:34,390
switch to validate you have a really bad

218
00:09:34,390 --> 00:09:36,610
ID well and at least if you do it makes

219
00:09:36,610 --> 00:09:40,500
your basis slash at the end of your UFO

220
00:09:40,500 --> 00:09:43,120
start which can be bad and you can do

221
00:09:43,120 --> 00:09:45,160
this kind of thing but let's see here we

222
00:09:45,160 --> 00:09:47,860
have something a website but is written

223
00:09:47,860 --> 00:09:51,820
in C sharp and this site is checking but

224
00:09:51,820 --> 00:09:54,070
the URL starts with HTTP colon slash

225
00:09:54,070 --> 00:09:56,620
slash and when it's using the web client

226
00:09:56,620 --> 00:10:00,250
class from C sharp to download the URL

227
00:10:00,250 --> 00:10:02,650
and get that as a string and then it's

228
00:10:02,650 --> 00:10:04,780
probably like so so string to the user

229
00:10:04,780 --> 00:10:07,120
or something like that and people tend

230
00:10:07,120 --> 00:10:10,150
to use this pattern to avoid the same

231
00:10:10,150 --> 00:10:12,490
origin policy so they have like one

232
00:10:12,490 --> 00:10:14,410
endpoint that will work as a reverse

233
00:10:14,410 --> 00:10:17,500
proxy so this way we can just bypass the

234
00:10:17,500 --> 00:10:19,870
same origin policy and surf content from

235
00:10:19,870 --> 00:10:24,400
other website within the same origin the

236
00:10:24,400 --> 00:10:27,180
web hooks like here you're going to be

237
00:10:27,180 --> 00:10:31,000
forced to start you you ahead with HTTP

238
00:10:31,000 --> 00:10:32,890
colon slash slash and then you're going

239
00:10:32,890 --> 00:10:34,480
to download something from the internet

240
00:10:34,480 --> 00:10:38,350
right so server side request forgery but

241
00:10:38,350 --> 00:10:41,770
not that bad until you look into the

242
00:10:41,770 --> 00:10:44,830
details and turns out you can pass this

243
00:10:44,830 --> 00:10:49,480
URL HTTP colon slash slash slash et Cie

244
00:10:49,480 --> 00:10:53,589
passwd and you're gonna get the content

245
00:10:53,589 --> 00:10:56,500
of et Cie passwd from the local server

246
00:10:56,500 --> 00:10:59,020
and then you're gonna tell me like ok

247
00:10:59,020 --> 00:11:01,660
but that's a Windows behavior right if

248
00:11:01,660 --> 00:11:04,180
the directory HTTP Collins

249
00:11:04,180 --> 00:11:06,760
doesn't exist on Linux surely it's not

250
00:11:06,760 --> 00:11:08,440
gonna serve the content of UTC passwd

251
00:11:08,440 --> 00:11:12,760
and actually that's how but the weirdest

252
00:11:12,760 --> 00:11:15,520
part is that dotnet on Linux is gonna

253
00:11:15,520 --> 00:11:18,160
mimic the bad behavior of Windows and

254
00:11:18,160 --> 00:11:20,380
it's gonna give you the content of a TC

255
00:11:20,380 --> 00:11:25,240
passwd even if the HTTP colon doesn't

256
00:11:25,240 --> 00:11:27,370
exist as a directory on your local

257
00:11:27,370 --> 00:11:29,410
system so that's something to be aware

258
00:11:29,410 --> 00:11:32,410
of and that's yeah so when you get

259
00:11:32,410 --> 00:11:34,300
arbitrary file read so you can probably

260
00:11:34,300 --> 00:11:36,370
get a lot more than just a server-side

261
00:11:36,370 --> 00:11:39,400
request forgery you get credential you

262
00:11:39,400 --> 00:11:41,470
pop up the data you pop the database and

263
00:11:41,470 --> 00:11:43,300
you keep going or you get the source

264
00:11:43,300 --> 00:11:47,170
code for example now let's move to the

265
00:11:47,170 --> 00:11:49,330
next one so that's probably my favorite

266
00:11:49,330 --> 00:11:52,420
at the moment so we got against some

267
00:11:52,420 --> 00:11:56,740
golang and we have requests and response

268
00:11:56,740 --> 00:11:59,290
handler we have a fine name that we get

269
00:11:59,290 --> 00:12:01,630
from the URL and what we do is we clean

270
00:12:01,630 --> 00:12:04,930
this file name with path dot clean when

271
00:12:04,930 --> 00:12:07,210
we open the file name and if a is an

272
00:12:07,210 --> 00:12:10,660
error we return fine not fool then we

273
00:12:10,660 --> 00:12:12,730
before that we try to defer to close the

274
00:12:12,730 --> 00:12:14,589
file whence ensuite done with it and

275
00:12:14,589 --> 00:12:18,100
then we copy the content of the file to

276
00:12:18,100 --> 00:12:20,350
the response what's an easy way to serve

277
00:12:20,350 --> 00:12:23,650
content in and golang that looks pretty

278
00:12:23,650 --> 00:12:26,410
clean because I guess we have path dot

279
00:12:26,410 --> 00:12:29,230
clean so let's dig into the path dot

280
00:12:29,230 --> 00:12:32,860
clean documentation so if we look at the

281
00:12:32,860 --> 00:12:35,230
examples we can see that path dot clean

282
00:12:35,230 --> 00:12:37,990
and that's straight from the goal and

283
00:12:37,990 --> 00:12:40,480
documentation and we can run that

284
00:12:40,480 --> 00:12:41,890
because the content documentation is so

285
00:12:41,890 --> 00:12:43,750
good and we can see that if we run that

286
00:12:43,750 --> 00:12:50,350
we got a /e become a /e when a slash dot

287
00:12:50,350 --> 00:12:53,320
dot slash a slash e so somewhere around

288
00:12:53,320 --> 00:12:56,709
here give us a /e so that looks like

289
00:12:56,709 --> 00:12:59,020
okay this is exactly

290
00:12:59,020 --> 00:13:01,120
sorry this is exactly what you want as a

291
00:13:01,120 --> 00:13:03,310
developer to secure things because you

292
00:13:03,310 --> 00:13:05,230
heard about your security team telling

293
00:13:05,230 --> 00:13:07,360
you like okay oh you need to remove that

294
00:13:07,360 --> 00:13:09,310
dot slash and purple team does exactly

295
00:13:09,310 --> 00:13:09,760
that

296
00:13:09,760 --> 00:13:14,140
it removes dot dot slash unless this

297
00:13:14,140 --> 00:13:16,880
Turing doesn't start with a slash

298
00:13:16,880 --> 00:13:20,120
and when that poverty is just so it took

299
00:13:20,120 --> 00:13:22,190
in the data and make sure you got the

300
00:13:22,190 --> 00:13:24,740
proper path it's not a way to remove the

301
00:13:24,740 --> 00:13:26,780
dot session directory traversal just to

302
00:13:26,780 --> 00:13:28,250
make sure that the path you're passing

303
00:13:28,250 --> 00:13:31,430
is clean know that it's gonna be between

304
00:13:31,430 --> 00:13:35,240
code secure or usable in a secure way so

305
00:13:35,240 --> 00:13:37,970
it's a path start with dots - it's going

306
00:13:37,970 --> 00:13:40,250
to keep the same meaning so it's gonna

307
00:13:40,250 --> 00:13:42,950
keep it's gonna stay dot slash buts only

308
00:13:42,950 --> 00:13:45,440
when you can can can done equalize the

309
00:13:45,440 --> 00:13:47,450
path but it's gonna happen if that

310
00:13:47,450 --> 00:13:49,280
doesn't change the meaning of the path

311
00:13:49,280 --> 00:13:51,620
on the front system so that's pretty

312
00:13:51,620 --> 00:13:54,500
surprising last time I did this talk

313
00:13:54,500 --> 00:13:58,520
someone raised it on Twitter and what's

314
00:13:58,520 --> 00:14:00,680
his name Filippo is trying to get it

315
00:14:00,680 --> 00:14:03,440
fixed and that's currently where this is

316
00:14:03,440 --> 00:14:03,980
happening

317
00:14:03,980 --> 00:14:06,590
thankfully with the goaline development

318
00:14:06,590 --> 00:14:07,820
team you probably got a few months

319
00:14:07,820 --> 00:14:09,200
before they decide to fix it because

320
00:14:09,200 --> 00:14:11,630
what's not as bad as we think it is but

321
00:14:11,630 --> 00:14:13,910
and for now I think they still waiting

322
00:14:13,910 --> 00:14:15,770
on updating the documentation so

323
00:14:15,770 --> 00:14:17,570
something to be aware again because if

324
00:14:17,570 --> 00:14:20,840
you go here and quickly like read that

325
00:14:20,840 --> 00:14:22,280
code you like okay public in public

326
00:14:22,280 --> 00:14:24,320
instincts right so it probably safe

327
00:14:24,320 --> 00:14:26,750
before about cleaning but as long as as

328
00:14:26,750 --> 00:14:28,850
soon as you look into the details you

329
00:14:28,850 --> 00:14:32,600
can find pretty cool bugs and yeah so

330
00:14:32,600 --> 00:14:34,910
even if something looks like it's doing

331
00:14:34,910 --> 00:14:37,400
what it needs to do you should always

332
00:14:37,400 --> 00:14:41,270
check and at the same time and going

333
00:14:41,270 --> 00:14:42,590
deaf to make sure that it's really

334
00:14:42,590 --> 00:14:44,660
really what you think it does and what

335
00:14:44,660 --> 00:14:47,990
the limits of the functions are so now

336
00:14:47,990 --> 00:14:51,160
let's look so what's pretty common one

337
00:14:51,160 --> 00:14:54,200
you have an event listener to listen to

338
00:14:54,200 --> 00:14:57,350
post message and since the first thing

339
00:14:57,350 --> 00:15:00,500
you see when you're creating an event

340
00:15:00,500 --> 00:15:02,060
listener and you look at the mozilla

341
00:15:02,060 --> 00:15:04,280
documentation is you need to check the

342
00:15:04,280 --> 00:15:07,250
origin so what do you do you check the

343
00:15:07,250 --> 00:15:09,290
origin so here we're gonna check out the

344
00:15:09,290 --> 00:15:13,310
origin matches dot Ventus Telecom and

345
00:15:13,310 --> 00:15:15,380
dollar to do the end of the regular

346
00:15:15,380 --> 00:15:19,100
expression yeah and you should look at

347
00:15:19,100 --> 00:15:22,250
event and lower if you doing bug bounty

348
00:15:22,250 --> 00:15:25,250
I think someone made 20k on Facebook a

349
00:15:25,250 --> 00:15:28,550
few days ago so yeah so we're gonna do

350
00:15:28,550 --> 00:15:30,590
something unless and only you

351
00:15:30,590 --> 00:15:35,120
origin is safe the problem is that you

352
00:15:35,120 --> 00:15:37,670
got this good amazing relationship

353
00:15:37,670 --> 00:15:40,400
between regular expression and hostname

354
00:15:40,400 --> 00:15:43,850
that in regular expression a dot is a

355
00:15:43,850 --> 00:15:45,500
wild card so you can replace it with

356
00:15:45,500 --> 00:15:46,430
anything

357
00:15:46,430 --> 00:15:51,860
where in host names I in DNS the dot

358
00:15:51,860 --> 00:15:55,780
means a separator so here if we match

359
00:15:55,780 --> 00:15:59,270
dot pentacel Abdallah we're going to be

360
00:15:59,270 --> 00:16:00,250
able to match

361
00:16:00,250 --> 00:16:03,440
www-why become battle so wwsz depended

362
00:16:03,440 --> 00:16:07,220
wwz penn telecom or wwz pen tester labs

363
00:16:07,220 --> 00:16:09,680
econ because the dot is a wildcat so any

364
00:16:09,680 --> 00:16:12,470
character will work here so that's a

365
00:16:12,470 --> 00:16:14,840
really easy way to bypass this check and

366
00:16:14,840 --> 00:16:16,640
the issue here is right the developer

367
00:16:16,640 --> 00:16:19,460
didn't think about escaping the dot in

368
00:16:19,460 --> 00:16:21,470
the regular expression so instead of

369
00:16:21,470 --> 00:16:24,730
being literal dots they are actually

370
00:16:24,730 --> 00:16:28,910
wildcards and again attention to details

371
00:16:28,910 --> 00:16:31,220
so now we're gonna move to another one

372
00:16:31,220 --> 00:16:35,390
so we got here a JavaScript application

373
00:16:35,390 --> 00:16:37,700
but it's gonna fetch content from a

374
00:16:37,700 --> 00:16:41,780
domain and so we call fetch and we have

375
00:16:41,780 --> 00:16:44,750
a list of domain but are allowed and

376
00:16:44,750 --> 00:16:47,960
which I've at the domain is in the list

377
00:16:47,960 --> 00:16:50,330
that is allowed so this that is allowed

378
00:16:50,330 --> 00:16:53,080
is example at all gmail.com google.com

379
00:16:53,080 --> 00:16:57,350
the only thing that we do is record to

380
00:16:57,350 --> 00:17:00,890
uppercase on the domain and when we

381
00:17:00,890 --> 00:17:02,570
fetch a content and we send the content

382
00:17:02,570 --> 00:17:06,140
back to the user so that looks again

383
00:17:06,140 --> 00:17:08,270
pretty safe is just like eyeballs

384
00:17:08,270 --> 00:17:09,980
occurred you like okay we're checking in

385
00:17:09,980 --> 00:17:12,650
the list of in an area so it's pretty

386
00:17:12,650 --> 00:17:15,709
hard to find something that will break

387
00:17:15,709 --> 00:17:18,530
this kind of checks but thankfully we

388
00:17:18,530 --> 00:17:23,709
are filtered to uppercase and all this

389
00:17:23,709 --> 00:17:25,700
this kind of looking at this kind of

390
00:17:25,700 --> 00:17:28,730
issue came after our read that blog post

391
00:17:28,730 --> 00:17:30,470
around someone who found a bug in github

392
00:17:30,470 --> 00:17:34,070
with Unicode si after I knew about

393
00:17:34,070 --> 00:17:35,930
Unicode bugs I thought but obvious one I

394
00:17:35,930 --> 00:17:37,250
was like I should probably dig deeper

395
00:17:37,250 --> 00:17:38,720
because I think that's interesting and I

396
00:17:38,720 --> 00:17:40,640
think we can find a lot of birds like

397
00:17:40,640 --> 00:17:42,740
that and

398
00:17:42,740 --> 00:17:44,090
actually there's something interesting

399
00:17:44,090 --> 00:17:45,289
about the blog post I thought I would

400
00:17:45,289 --> 00:17:46,730
come back to that later but basically

401
00:17:46,730 --> 00:17:49,279
dauntless I if you could to uppercase on

402
00:17:49,279 --> 00:17:51,669
it will become a hyper case I and

403
00:17:51,669 --> 00:17:57,049
gmail.com with a dot si instead of I dot

404
00:17:57,049 --> 00:18:01,190
to uppercase we become gmail.com and so

405
00:18:01,190 --> 00:18:03,890
this way by registering gmail.com with a

406
00:18:03,890 --> 00:18:08,179
dot list I you can bypass this check so

407
00:18:08,179 --> 00:18:09,470
the thing I wanted to say about this

408
00:18:09,470 --> 00:18:12,559
blog post is that the different there

409
00:18:12,559 --> 00:18:13,640
was a difference between the way it was

410
00:18:13,640 --> 00:18:17,840
reported by the researcher and by github

411
00:18:17,840 --> 00:18:19,789
because actually it's the same thing

412
00:18:19,789 --> 00:18:22,549
happen as a database layer so even if

413
00:18:22,549 --> 00:18:25,490
the code doesn't do to upper case since

414
00:18:25,490 --> 00:18:27,950
string comparison in a lot of databases

415
00:18:27,950 --> 00:18:33,080
are not case-sensitive if you're using

416
00:18:33,080 --> 00:18:35,659
varchar' is the same kind of bug will

417
00:18:35,659 --> 00:18:37,700
happen depending on the chart set of the

418
00:18:37,700 --> 00:18:40,070
database something really interesting to

419
00:18:40,070 --> 00:18:43,490
look into if you have a bit of time so

420
00:18:43,490 --> 00:18:45,980
yeah and to get back to this blog post

421
00:18:45,980 --> 00:18:47,630
which was really really good

422
00:18:47,630 --> 00:18:50,480
you are like a lot of characters that

423
00:18:50,480 --> 00:18:53,330
become when you call to uppercase or to

424
00:18:53,330 --> 00:18:53,809
lowercase

425
00:18:53,809 --> 00:18:58,159
change between what they mean so you

426
00:18:58,159 --> 00:18:59,510
should probably check it out and that's

427
00:18:59,510 --> 00:19:03,679
probably a good way to find bugs but

428
00:19:03,679 --> 00:19:07,580
yeah so so and the feel like is the most

429
00:19:07,580 --> 00:19:09,590
crazy about it but but not some kind of

430
00:19:09,590 --> 00:19:12,710
like weird JavaScript queer but not some

431
00:19:12,710 --> 00:19:15,049
kind of weird ruby thing but just

432
00:19:15,049 --> 00:19:17,090
actually the thing is the way Unicode

433
00:19:17,090 --> 00:19:20,990
should work and the even craziest thing

434
00:19:20,990 --> 00:19:22,460
is that depending on your system lo

435
00:19:22,460 --> 00:19:24,860
course it's going to change so if you're

436
00:19:24,860 --> 00:19:28,429
out like between code normal and you

437
00:19:28,429 --> 00:19:29,570
have like a dollar sign it's gonna

438
00:19:29,570 --> 00:19:33,590
become uppercase I if you however using

439
00:19:33,590 --> 00:19:37,789
Turkish locals the I the lowercase I

440
00:19:37,789 --> 00:19:39,980
will become a package I with a dot and

441
00:19:39,980 --> 00:19:43,960
the lowercase I with no that will become

442
00:19:43,960 --> 00:19:47,210
uppercase I will know that and when you

443
00:19:47,210 --> 00:19:52,630
have all this transformation and

444
00:19:53,200 --> 00:19:55,039
similarity between like two characters

445
00:19:55,039 --> 00:19:56,210
can become so Simon

446
00:19:56,210 --> 00:19:59,060
Unicode I got something definitely worth

447
00:19:59,060 --> 00:20:00,770
looking into and that's just how it

448
00:20:00,770 --> 00:20:03,500
should work so if a language doesn't

449
00:20:03,500 --> 00:20:07,040
support that it's because a long way is

450
00:20:07,040 --> 00:20:09,560
behind the unicode implementation guide

451
00:20:09,560 --> 00:20:13,850
line not because it's safer and that's

452
00:20:13,850 --> 00:20:15,290
very surprising for developers because

453
00:20:15,290 --> 00:20:16,640
they never heard of that before

454
00:20:16,640 --> 00:20:20,210
oh I had some challenges if people want

455
00:20:20,210 --> 00:20:21,710
to play I need to I forgot to start them

456
00:20:21,710 --> 00:20:23,120
up but I'm gonna start them after the

457
00:20:23,120 --> 00:20:25,820
talks if you want to talk to play with

458
00:20:25,820 --> 00:20:28,300
Unicode challenges go to these two URL

459
00:20:28,300 --> 00:20:31,340
yeah so we talked about regular

460
00:20:31,340 --> 00:20:34,340
expression we talked about Unicode what

461
00:20:34,340 --> 00:20:37,520
if we mix the two what if we do Unicode

462
00:20:37,520 --> 00:20:41,570
and regular expression so if we start

463
00:20:41,570 --> 00:20:43,790
looking at Python three point nine point

464
00:20:43,790 --> 00:20:47,330
one and we do re dot compile I and we

465
00:20:47,330 --> 00:20:49,520
want to see if that less I match his eye

466
00:20:49,520 --> 00:20:52,600
we don't get any result it doesn't match

467
00:20:52,600 --> 00:20:57,230
then we add ignore case to say match but

468
00:20:57,230 --> 00:21:00,170
ignore the case so lower case I and

469
00:21:00,170 --> 00:21:03,230
upper case I should match and by doing

470
00:21:03,230 --> 00:21:06,170
that we can see that Douglas I matches

471
00:21:06,170 --> 00:21:07,340
hi

472
00:21:07,340 --> 00:21:10,850
if we ignore the case what's in Python

473
00:21:10,850 --> 00:21:14,570
and same thing for the Calvin sign at

474
00:21:14,570 --> 00:21:16,790
the bottoms okay and same thing for the

475
00:21:16,790 --> 00:21:19,870
long leet latin s but will match

476
00:21:19,870 --> 00:21:23,120
uppercase s if we ignore the case and

477
00:21:23,120 --> 00:21:27,860
Calvin sign will match K if we sorry if

478
00:21:27,860 --> 00:21:29,600
it's over you ahead of it

479
00:21:29,600 --> 00:21:32,870
galactic amulet like you nickname very

480
00:21:32,870 --> 00:21:36,010
good so yeah and same for came in sign

481
00:21:36,010 --> 00:21:38,990
then if we move to will be will be will

482
00:21:38,990 --> 00:21:42,380
never match a dot si if we ignore the

483
00:21:42,380 --> 00:21:45,620
case so that less I will not match I if

484
00:21:45,620 --> 00:21:48,230
we ignore the case and same for a per K

485
00:21:48,230 --> 00:21:51,680
size even if dot less i when we call up

486
00:21:51,680 --> 00:21:56,210
case we become the helper case hi so but

487
00:21:56,210 --> 00:21:58,580
we are ever probably can help you like

488
00:21:58,580 --> 00:22:02,480
fingerprint our filter is done is it

489
00:22:02,480 --> 00:22:04,220
using a regular expression either using

490
00:22:04,220 --> 00:22:06,110
ignore case I've been not using in no

491
00:22:06,110 --> 00:22:10,020
case I've the upper casing tada

492
00:22:10,020 --> 00:22:17,280
so even if the eye doesn't yeah I can

493
00:22:17,280 --> 00:22:19,410
put the UI I should focus on that

494
00:22:19,410 --> 00:22:21,780
so it's a good thing is that even if the

495
00:22:21,780 --> 00:22:24,570
doctors eye doesn't match I within no

496
00:22:24,570 --> 00:22:28,380
case you can't inside with match K if we

497
00:22:28,380 --> 00:22:29,760
ignore the case so we have different

498
00:22:29,760 --> 00:22:31,770
behavior for different characters in

499
00:22:31,770 --> 00:22:35,070
Ruby and same for the long Latinas so

500
00:22:35,070 --> 00:22:38,820
zero means that it's matching Neal means

501
00:22:38,820 --> 00:22:42,330
it's not matching so if we ignore the

502
00:22:42,330 --> 00:22:45,240
case the long lasting s so this weird F

503
00:22:45,240 --> 00:22:48,690
on the left much is s so different

504
00:22:48,690 --> 00:22:50,929
behavior depending on the characters

505
00:22:50,929 --> 00:22:53,790
then if we move back to go Lang and

506
00:22:53,790 --> 00:22:56,340
enrolling when you do matching you use

507
00:22:56,340 --> 00:22:58,980
this bracket question mark I and if we

508
00:22:58,980 --> 00:23:03,570
say does dot less I matches I if we know

509
00:23:03,570 --> 00:23:05,700
K is in it's false but the same behavior

510
00:23:05,700 --> 00:23:08,940
happen for K and long Latinas first two

511
00:23:08,940 --> 00:23:14,520
matches so again we're behavior in

512
00:23:14,520 --> 00:23:17,670
c-sharp it's only so the long Latin s

513
00:23:17,670 --> 00:23:20,340
doesn't match but and the daughter side

514
00:23:20,340 --> 00:23:22,350
doesn't match but okay

515
00:23:22,350 --> 00:23:24,480
match is a convene sign if we ignore the

516
00:23:24,480 --> 00:23:28,440
case so again what was tested on Linux

517
00:23:28,440 --> 00:23:35,610
dotnet and yeah even if if we use ends

518
00:23:35,610 --> 00:23:39,030
we've and we using all the way microsoft

519
00:23:39,030 --> 00:23:42,690
us to compare strings and a friend of

520
00:23:42,690 --> 00:23:43,950
mine used to say that's that's probably

521
00:23:43,950 --> 00:23:46,110
because they had so many Unicode bugs in

522
00:23:46,110 --> 00:23:47,670
Windows but that all these way to

523
00:23:47,670 --> 00:23:51,510
compare strings so if we're using

524
00:23:51,510 --> 00:23:53,190
environment creature in you know case

525
00:23:53,190 --> 00:23:55,679
it's not gonna match if we don't put a

526
00:23:55,679 --> 00:23:57,179
second argument it's not gonna match if

527
00:23:57,179 --> 00:23:59,220
we put ordinal ignore okay so the

528
00:23:59,220 --> 00:24:01,380
classic way to in no case it's going to

529
00:24:01,380 --> 00:24:03,990
match and trying to creature in no case

530
00:24:03,990 --> 00:24:07,080
it's gonna not match as well so we have

531
00:24:07,080 --> 00:24:09,240
all these way too much things in c-sharp

532
00:24:09,240 --> 00:24:11,670
and we're gonna different behavior for

533
00:24:11,670 --> 00:24:15,960
that in Java if we do a course in no

534
00:24:15,960 --> 00:24:18,480
case all of these are gonna match but as

535
00:24:18,480 --> 00:24:20,340
well as soon as we move to regular

536
00:24:20,340 --> 00:24:22,830
expression it's not gonna match anymore

537
00:24:22,830 --> 00:24:23,620
so

538
00:24:23,620 --> 00:24:26,700
sigh doesn't much I long Latin as

539
00:24:26,700 --> 00:24:30,220
non-latin s doesn't match s and the

540
00:24:30,220 --> 00:24:33,100
Kelvin sign doesn't match K if we use in

541
00:24:33,100 --> 00:24:36,580
no cases so again maybe a good way to

542
00:24:36,580 --> 00:24:42,280
fingerprint thanks the ng may be a good

543
00:24:42,280 --> 00:24:43,960
way to fingerprint your applications

544
00:24:43,960 --> 00:24:46,090
like ok with these characters I can tell

545
00:24:46,090 --> 00:24:47,470
that it's not matching so maybe it's a

546
00:24:47,470 --> 00:24:50,530
Java app or c-sharp art or it's matching

547
00:24:50,530 --> 00:24:53,590
so maybe it's Ruby and why is it

548
00:24:53,590 --> 00:24:54,970
important imagine you have an

549
00:24:54,970 --> 00:24:56,559
application but it's going to check that

550
00:24:56,559 --> 00:24:58,990
the domain match is something or an

551
00:24:58,990 --> 00:25:01,120
email address ends with something like

552
00:25:01,120 --> 00:25:03,580
for example if your email address ends

553
00:25:03,580 --> 00:25:06,190
with Penta solid calm you are on Madan

554
00:25:06,190 --> 00:25:08,260
pentester lab calm which is a terrible

555
00:25:08,260 --> 00:25:10,210
way to check but that's often what

556
00:25:10,210 --> 00:25:12,130
people are doing because it's really

557
00:25:12,130 --> 00:25:15,160
really easy now what you can do is just

558
00:25:15,160 --> 00:25:18,370
register an email with pentester

559
00:25:18,370 --> 00:25:20,470
live.com is a wilt because it's a weird

560
00:25:20,470 --> 00:25:22,929
one because I don't have a SK I'll go

561
00:25:22,929 --> 00:25:26,080
test so yeah you can register a domain

562
00:25:26,080 --> 00:25:30,610
with the Latin s and say ok I'm going to

563
00:25:30,610 --> 00:25:32,050
try to reduce on pendants or lab that

564
00:25:32,050 --> 00:25:34,750
come with this Unicode domain and see if

565
00:25:34,750 --> 00:25:36,850
I can become admin on pentester lab car

566
00:25:36,850 --> 00:25:39,390
and you can do the same thing for

567
00:25:39,390 --> 00:25:42,370
server-side request forgery and you can

568
00:25:42,370 --> 00:25:44,350
do the same thing for calls as well

569
00:25:44,350 --> 00:25:47,500
although it's likely for cause but your

570
00:25:47,500 --> 00:25:51,429
browser will not send it's a character

571
00:25:51,429 --> 00:25:53,050
as it is it's going to incur it as

572
00:25:53,050 --> 00:25:53,830
Finnick

573
00:25:53,830 --> 00:25:56,470
Finnick Odair so unless you have

574
00:25:56,470 --> 00:25:58,120
something that really codes it on the

575
00:25:58,120 --> 00:26:00,250
server side before giving it to your

576
00:26:00,250 --> 00:26:04,000
check it too may not happen and for the

577
00:26:04,000 --> 00:26:06,100
kelvin sign is less likely because

578
00:26:06,100 --> 00:26:09,190
Kelvin sign so probably gonna have with

579
00:26:09,190 --> 00:26:11,110
it is what you need to register domain

580
00:26:11,110 --> 00:26:13,570
with uppercase later later and that's

581
00:26:13,570 --> 00:26:16,960
not going to go well so yeah so that's

582
00:26:16,960 --> 00:26:20,050
why it's important so yeah that's about

583
00:26:20,050 --> 00:26:25,030
it for me so to conclude that computers

584
00:26:25,030 --> 00:26:27,040
are hard the real devil is in the

585
00:26:27,040 --> 00:26:28,690
details don't make assumption I think

586
00:26:28,690 --> 00:26:33,160
what I wanted to show you that you

587
00:26:33,160 --> 00:26:36,250
really have to look in depth too

588
00:26:36,250 --> 00:26:38,440
this kind of bug and you can just

589
00:26:38,440 --> 00:26:40,540
eyeball code so first I think you should

590
00:26:40,540 --> 00:26:43,870
read code as a penetration tester or as

591
00:26:43,870 --> 00:26:46,240
a bounty hunter on the regular basis try

592
00:26:46,240 --> 00:26:48,220
to read a bit of code every day because

593
00:26:48,220 --> 00:26:49,960
that's how you're going to get I think

594
00:26:49,960 --> 00:26:53,380
to the next level doing blackbox testing

595
00:26:53,380 --> 00:26:55,570
after a while only gets you so far

596
00:26:55,570 --> 00:26:58,060
you need when to like try to read source

597
00:26:58,060 --> 00:27:01,510
code to see like okay I'll out people

598
00:27:01,510 --> 00:27:03,550
are creating applications

599
00:27:03,550 --> 00:27:06,040
what mistakes do they make when the

600
00:27:06,040 --> 00:27:09,550
create application and once you do

601
00:27:09,550 --> 00:27:11,410
vatican's you're gonna start finding

602
00:27:11,410 --> 00:27:14,140
patterns but you can help apply when

603
00:27:14,140 --> 00:27:17,290
you're doing bad bounty and the things

604
00:27:17,290 --> 00:27:19,870
that these patterns are gonna be not as

605
00:27:19,870 --> 00:27:21,700
well-known as the one but everyone is

606
00:27:21,700 --> 00:27:23,350
looking for and that's how are you going

607
00:27:23,350 --> 00:27:27,400
to be successful and because 100 of

608
00:27:27,400 --> 00:27:29,170
people will probably look at the path

609
00:27:29,170 --> 00:27:30,820
dot clean and say like okay that's fine

610
00:27:30,820 --> 00:27:32,770
I've got clean is funny all right like

611
00:27:32,770 --> 00:27:35,230
what can go wrong and then if you'd like

612
00:27:35,230 --> 00:27:37,060
to spend I don't know it's probably it

613
00:27:37,060 --> 00:27:39,220
took me like 20 minutes to like create a

614
00:27:39,220 --> 00:27:42,040
docker container with go write 5

615
00:27:42,040 --> 00:27:44,230
doctrine actually I didn't even do that

616
00:27:44,230 --> 00:27:46,300
it took me five minutes I select I went

617
00:27:46,300 --> 00:27:49,480
to the golang documentation and you can

618
00:27:49,480 --> 00:27:52,690
execute the code you passing so what you

619
00:27:52,690 --> 00:27:55,030
can do is just like start playing with

620
00:27:55,030 --> 00:27:56,650
your value in the documentation and

621
00:27:56,650 --> 00:27:59,530
click run code and that's why you can

622
00:27:59,530 --> 00:28:02,200
detect like ok this is weird this is a

623
00:28:02,200 --> 00:28:03,580
good pattern I need to look into more

624
00:28:03,580 --> 00:28:05,170
depth and then you keep it and if you do

625
00:28:05,170 --> 00:28:07,600
that I don't know once a week twice five

626
00:28:07,600 --> 00:28:09,670
times a week seven times a week you're

627
00:28:09,670 --> 00:28:11,980
gonna keep accumulating all these weird

628
00:28:11,980 --> 00:28:14,500
patterns all these bugs but no one else

629
00:28:14,500 --> 00:28:16,210
asked or no one thought about just

630
00:28:16,210 --> 00:28:17,410
because you're reading code that no one

631
00:28:17,410 --> 00:28:20,380
else is really and yeah that's how you

632
00:28:20,380 --> 00:28:22,270
find good bugs and that's how you make

633
00:28:22,270 --> 00:28:24,280
money if you doing background tea so

634
00:28:24,280 --> 00:28:27,700
yeah I think do that and yeah don't make

635
00:28:27,700 --> 00:28:29,200
any assumption like that's the worst

636
00:28:29,200 --> 00:28:30,990
thing you can do when you're testing is

637
00:28:30,990 --> 00:28:34,180
so because something looks fine but but

638
00:28:34,180 --> 00:28:36,100
it's fine maybe there are some weird

639
00:28:36,100 --> 00:28:38,530
corner cases but no one thought about

640
00:28:38,530 --> 00:28:40,960
and yeah just spend a bit more time than

641
00:28:40,960 --> 00:28:42,130
everyone else and you're gonna be

642
00:28:42,130 --> 00:28:44,950
successful and that's about it for me

643
00:28:44,950 --> 00:28:46,330
thanks for your time and if you have any

644
00:28:46,330 --> 00:28:49,390
question I can see someone

645
00:28:49,390 --> 00:28:53,740
discord she can read in it um Louie just

646
00:28:53,740 --> 00:28:55,270
wanted to say that was a really really

647
00:28:55,270 --> 00:28:57,100
good presentation great job mate

648
00:28:57,100 --> 00:29:00,010
I also love your background it's

649
00:29:00,010 --> 00:29:02,490
hilarious

650
00:29:03,880 --> 00:29:06,250
yes sir I actually wanted to quickly ask

651
00:29:06,250 --> 00:29:07,540
a few questions so we've been gathering

652
00:29:07,540 --> 00:29:09,760
um how do you actually stay up to date

653
00:29:09,760 --> 00:29:11,290
with all the different patterns that

654
00:29:11,290 --> 00:29:13,270
you're seeing cuz you should patterns in

655
00:29:13,270 --> 00:29:15,310
different languages like Ruby and girl

656
00:29:15,310 --> 00:29:16,780
act completely different in different

657
00:29:16,780 --> 00:29:20,020
ways how do you actually go and keep

658
00:29:20,020 --> 00:29:24,400
track of all of that so I do and I could

659
00:29:24,400 --> 00:29:26,710
entomology so I'm basically a bug

660
00:29:26,710 --> 00:29:31,000
collector so what I do is you need to

661
00:29:31,000 --> 00:29:35,350
follow mailing list of big projects or

662
00:29:35,350 --> 00:29:37,810
Apache mailing lists for all the Apache

663
00:29:37,810 --> 00:29:41,530
project Ruby on Rails because they have

664
00:29:41,530 --> 00:29:45,150
really cool bugs and I also follow like

665
00:29:45,150 --> 00:29:48,880
bug bounty disclosures so to see like

666
00:29:48,880 --> 00:29:53,140
okay what is happening and so following

667
00:29:53,140 --> 00:29:54,820
is one thing but when you need to be

668
00:29:54,820 --> 00:29:57,280
active is like reading something on

669
00:29:57,280 --> 00:30:00,070
Twitter only gets you so far like so

670
00:30:00,070 --> 00:30:03,940
what you need to do is okay I've so this

671
00:30:03,940 --> 00:30:06,730
bug in Ruby on Rails let's look at a

672
00:30:06,730 --> 00:30:09,490
deef of the source code let's look at

673
00:30:09,490 --> 00:30:12,940
what what was the what was the bug and

674
00:30:12,940 --> 00:30:16,300
how did we fix it and then you can

675
00:30:16,300 --> 00:30:17,050
select okay

676
00:30:17,050 --> 00:30:19,330
if this was in Ruby on Rails but really

677
00:30:19,330 --> 00:30:22,780
interesting what happens if I tell it

678
00:30:22,780 --> 00:30:24,670
the same pattern and move it to Kooning

679
00:30:24,670 --> 00:30:28,930
what does venerable code base will look

680
00:30:28,930 --> 00:30:30,610
like and then you can look for this

681
00:30:30,610 --> 00:30:32,470
pattern in all the coding project you

682
00:30:32,470 --> 00:30:35,050
know about and when you have done that

683
00:30:35,050 --> 00:30:36,850
for going so you move to c-sharp and

684
00:30:36,850 --> 00:30:40,180
when you like okay I know that I don't

685
00:30:40,180 --> 00:30:44,170
know this website they are a big ruby

686
00:30:44,170 --> 00:30:46,330
shop so maybe I'm going to test my new

687
00:30:46,330 --> 00:30:48,670
Reba pattern against all their endpoint

688
00:30:48,670 --> 00:30:51,310
and I'm gonna get lucky and I think it's

689
00:30:51,310 --> 00:30:53,710
just like yeah Villa naman yeah like

690
00:30:53,710 --> 00:30:56,140
Pokemon for vulnerability like going to

691
00:30:56,140 --> 00:30:58,780
collect them all and having all these

692
00:30:58,780 --> 00:31:00,730
patterns and I think quick way to test

693
00:31:00,730 --> 00:31:02,700
like if you

694
00:31:02,700 --> 00:31:04,820
in 2020 if you're not using docker

695
00:31:04,820 --> 00:31:07,080
almost every day you're doing something

696
00:31:07,080 --> 00:31:09,720
wrong like you should always like I got

697
00:31:09,720 --> 00:31:11,910
a disease in two minutes I got like a

698
00:31:11,910 --> 00:31:13,650
token container with any code base I

699
00:31:13,650 --> 00:31:14,970
want that's like okay I'm going to test

700
00:31:14,970 --> 00:31:17,010
some golang today I'm going to test some

701
00:31:17,010 --> 00:31:20,220
Ruby today and yeah and keep them and

702
00:31:20,220 --> 00:31:23,580
like keep learning from what other

703
00:31:23,580 --> 00:31:25,710
people are doing and see like okay this

704
00:31:25,710 --> 00:31:28,110
pattern is interesting I have it now in

705
00:31:28,110 --> 00:31:30,870
five languages or four languages

706
00:31:30,870 --> 00:31:33,840
what can I extend it can I find

707
00:31:33,840 --> 00:31:35,040
something more about it

708
00:31:35,040 --> 00:31:36,750
is there something about no one else

709
00:31:36,750 --> 00:31:38,520
realized that is even more interesting

710
00:31:38,520 --> 00:31:41,520
and you keep building up like so instead

711
00:31:41,520 --> 00:31:43,700
of reading like a lot of articles and

712
00:31:43,700 --> 00:31:47,430
like flying over all this content just

713
00:31:47,430 --> 00:31:49,440
from time to time drop stop flying and

714
00:31:49,440 --> 00:31:52,260
just drop and go D like go really deep

715
00:31:52,260 --> 00:31:54,420
get the source code get too deep get a

716
00:31:54,420 --> 00:31:57,360
patch try to build your own little lab

717
00:31:57,360 --> 00:31:59,370
to get it working to see how it world

718
00:31:59,370 --> 00:32:02,880
try to debug the bug and keep going yeah

719
00:32:02,880 --> 00:32:05,250
force Apache group I use a scissor

720
00:32:05,250 --> 00:32:08,490
question in this code for the Apache I'm

721
00:32:08,490 --> 00:32:10,800
using just Apache news they give like

722
00:32:10,800 --> 00:32:14,790
all the CVS and all the new version of

723
00:32:14,790 --> 00:32:17,130
every project you gotta copy two or

724
00:32:17,130 --> 00:32:19,590
three miles every day three emails but

725
00:32:19,590 --> 00:32:23,400
yeah and he likes yeah dig deeper I got

726
00:32:23,400 --> 00:32:28,530
ya probably my biggest advice I guess um

727
00:32:28,530 --> 00:32:30,390
so do you actually have a specific

728
00:32:30,390 --> 00:32:32,220
methodology you like to follow when

729
00:32:32,220 --> 00:32:33,750
you're performing source code analysis

730
00:32:33,750 --> 00:32:36,000
for web app hacking and does that

731
00:32:36,000 --> 00:32:37,950
actually differ from things like when

732
00:32:37,950 --> 00:32:40,140
you're testing a thick client and things

733
00:32:40,140 --> 00:32:49,320
like that yeah so I think when you're

734
00:32:49,320 --> 00:32:54,600
doing when you're doing lucky pen

735
00:32:54,600 --> 00:32:57,000
testing you're probably gonna have to

736
00:32:57,000 --> 00:32:58,440
set up everything and when you start

737
00:32:58,440 --> 00:33:01,620
reading and or seeing what's going and

738
00:33:01,620 --> 00:33:04,110
it's like kind of adventure where you

739
00:33:04,110 --> 00:33:05,310
pick like what direction you're going

740
00:33:05,310 --> 00:33:08,490
into where when you do cover if you are

741
00:33:08,490 --> 00:33:14,250
try to mostly my like I'm not anymore

742
00:33:14,250 --> 00:33:16,410
I'm not paid to review one code base

743
00:33:16,410 --> 00:33:18,750
at the moment anymore so what I do is I

744
00:33:18,750 --> 00:33:22,560
review pure functionalities so that's a

745
00:33:22,560 --> 00:33:23,760
really good thing you can do with code

746
00:33:23,760 --> 00:33:27,990
review is instead of reviewing a forgot

747
00:33:27,990 --> 00:33:30,810
password reset in one project that's

748
00:33:30,810 --> 00:33:32,460
really hard you need to think about

749
00:33:32,460 --> 00:33:34,620
everything a password reset needs to do

750
00:33:34,620 --> 00:33:36,660
and needs to be properly right what is

751
00:33:36,660 --> 00:33:39,000
really easy it's to review reset

752
00:33:39,000 --> 00:33:41,430
password across five projects and when

753
00:33:41,430 --> 00:33:43,440
you compare them in select that's how

754
00:33:43,440 --> 00:33:44,640
we're doing it that's how they're doing

755
00:33:44,640 --> 00:33:46,800
it without dealing why are these guys

756
00:33:46,800 --> 00:33:48,480
not doing this check but everyone else

757
00:33:48,480 --> 00:33:51,660
is doing and bang you got a bug you just

758
00:33:51,660 --> 00:33:52,980
compare things instead of just like

759
00:33:52,980 --> 00:33:55,170
trying to be smart and think about

760
00:33:55,170 --> 00:33:57,090
everything you just like basically like

761
00:33:57,090 --> 00:34:00,300
leverage other people well can say like

762
00:34:00,300 --> 00:34:02,280
okay all of this project are doing that

763
00:34:02,280 --> 00:34:04,200
this one is not doing like the other one

764
00:34:04,200 --> 00:34:06,030
why is that and what's the impact of

765
00:34:06,030 --> 00:34:08,400
that and often you get bugs like it's

766
00:34:08,400 --> 00:34:12,929
free realistic yeah I think that's

767
00:34:12,929 --> 00:34:14,969
actually quite an underrated thing no

768
00:34:14,969 --> 00:34:16,409
one I don't think many people actually

769
00:34:16,409 --> 00:34:18,389
do that that they'll get multiple

770
00:34:18,389 --> 00:34:19,949
projects together and then actually get

771
00:34:19,949 --> 00:34:24,560
them to see the differences so that

772
00:34:24,560 --> 00:34:27,600
continued same thing for when you're

773
00:34:27,600 --> 00:34:30,300
doing a bug bounty it's really worth

774
00:34:30,300 --> 00:34:31,889
looking at especially when you're

775
00:34:31,889 --> 00:34:34,290
starting instead of looking at one

776
00:34:34,290 --> 00:34:36,449
password reset for one project get

777
00:34:36,449 --> 00:34:39,270
password reset for five website and

778
00:34:39,270 --> 00:34:41,280
compare them and see what's happening

779
00:34:41,280 --> 00:34:42,719
and why it's different and what the

780
00:34:42,719 --> 00:34:46,949
impact of these differences I'm not

781
00:34:46,949 --> 00:34:50,790
changing the scope a little bit what

782
00:34:50,790 --> 00:34:52,110
kind of lessons have you learned

783
00:34:52,110 --> 00:34:53,940
actually going into the full hundred

784
00:34:53,940 --> 00:34:55,590
peers race because you used to be a very

785
00:34:55,590 --> 00:34:58,650
very strong pen tester how is that

786
00:34:58,650 --> 00:35:00,390
transition what did you learn going into

787
00:35:00,390 --> 00:35:08,850
the pen test allows business so many

788
00:35:08,850 --> 00:35:10,950
things I learned to do taxis I learn to

789
00:35:10,950 --> 00:35:12,870
do invoices that into the marketing

790
00:35:12,870 --> 00:35:16,170
obviously you don't want to learn nah

791
00:35:16,170 --> 00:35:17,550
well I think what I learned is that a

792
00:35:17,550 --> 00:35:20,330
lot of people tend to be afraid of like

793
00:35:20,330 --> 00:35:22,800
entrepreneurship thinking like all that

794
00:35:22,800 --> 00:35:26,340
is so complex that is so hard but trust

795
00:35:26,340 --> 00:35:28,470
me like if you can reverse an Android

796
00:35:28,470 --> 00:35:29,490
app or

797
00:35:29,490 --> 00:35:32,250
find a bug on like in a bug bounty you

798
00:35:32,250 --> 00:35:34,290
probably likely able to create an

799
00:35:34,290 --> 00:35:37,710
invoice and even if like you mess it up

800
00:35:37,710 --> 00:35:40,410
people are gonna help you like I'm AI

801
00:35:40,410 --> 00:35:42,180
first invoice he's I messed it up and

802
00:35:42,180 --> 00:35:43,770
people that maybe say like I would

803
00:35:43,770 --> 00:35:45,030
probably need this information this

804
00:35:45,030 --> 00:35:47,490
information with information it's like

805
00:35:47,490 --> 00:35:49,470
if you can reverse stuff if you can find

806
00:35:49,470 --> 00:35:50,940
good buzz you probably can create a

807
00:35:50,940 --> 00:35:53,270
business but like that's the easy part

808
00:35:53,270 --> 00:35:57,600
especially starting keeping keeping it

809
00:35:57,600 --> 00:35:59,670
up and keeping going for a long time is

810
00:35:59,670 --> 00:36:02,190
for miserable spot but yeah starting in

811
00:36:02,190 --> 00:36:04,590
and or the business is thing is probably

812
00:36:04,590 --> 00:36:08,580
the easier part I'd say like invoicing

813
00:36:08,580 --> 00:36:10,560
and stuff I used to be afraid of doing

814
00:36:10,560 --> 00:36:13,050
invoices it's really easy right it's

815
00:36:13,050 --> 00:36:15,780
it's even easier than writing a pen test

816
00:36:15,780 --> 00:36:18,110
report

817
00:36:18,720 --> 00:36:30,609
[Music]

