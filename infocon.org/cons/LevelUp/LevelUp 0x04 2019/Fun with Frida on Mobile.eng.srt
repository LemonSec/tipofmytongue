1
00:00:07,480 --> 00:00:15,440
yeah absolutely so uh so I met Don while

2
00:00:11,930 --> 00:00:18,410
working at a HP quite a few years ago

3
00:00:15,440 --> 00:00:19,759
when I was there and I mean for lack of

4
00:00:18,410 --> 00:00:21,680
a better word Donna's one of the

5
00:00:19,760 --> 00:00:24,050
smartest people I know when it comes to

6
00:00:21,680 --> 00:00:26,779
any type of assessment so um I'm really

7
00:00:24,050 --> 00:00:29,480
looking forward to her talking today my

8
00:00:26,779 --> 00:00:33,079
my tenure with Don was mostly mobile

9
00:00:29,480 --> 00:00:34,760
application security and I know that

10
00:00:33,079 --> 00:00:38,000
she's still in that world where I have

11
00:00:34,760 --> 00:00:40,309
kind of fallen off a little bit and so I

12
00:00:38,000 --> 00:00:42,230
had talked to her recently and said you

13
00:00:40,310 --> 00:00:44,090
know like you have anything cool that

14
00:00:42,230 --> 00:00:47,330
you've been doing and just her

15
00:00:44,090 --> 00:00:49,010
experience with Frida and and getting

16
00:00:47,330 --> 00:00:52,280
into it and you know the functions and

17
00:00:49,010 --> 00:00:54,110
stuff to use it for seems like a great

18
00:00:52,280 --> 00:00:55,310
opportunity to have her come talk to the

19
00:00:54,110 --> 00:00:58,100
people at bugcrowd

20
00:00:55,310 --> 00:00:59,890
who we're doing mobile stuff so I'm

21
00:00:58,100 --> 00:01:03,610
really excited for this talk personally

22
00:00:59,890 --> 00:01:05,810
Don is a great human epic hacker and

23
00:01:03,610 --> 00:01:08,630
yeah I'm really excited to have you here

24
00:01:05,810 --> 00:01:10,759
Don thanks for coming by thank you boy

25
00:01:08,630 --> 00:01:12,979
what an introduction and I it's on a

26
00:01:10,759 --> 00:01:18,170
recording now that I'm the smartest

27
00:01:12,979 --> 00:01:21,770
person you know yeah yeah I'm gonna put

28
00:01:18,170 --> 00:01:22,909
a pin in that way well I'm really glad

29
00:01:21,770 --> 00:01:25,280
to hear you're excited about the talk

30
00:01:22,909 --> 00:01:28,130
because I am very excited to be here

31
00:01:25,280 --> 00:01:31,159
today because this this talk is really

32
00:01:28,130 --> 00:01:33,469
talking about one of the tools that I

33
00:01:31,159 --> 00:01:35,479
enjoy using the most when I'm looking

34
00:01:33,469 --> 00:01:38,479
for bugs in mobile applications and

35
00:01:35,479 --> 00:01:41,780
that's frita so my goal today for this

36
00:01:38,479 --> 00:01:43,789
talk is was really to gather all the

37
00:01:41,780 --> 00:01:45,799
basic knowledge in one place that I

38
00:01:43,789 --> 00:01:48,139
think folks need to really hit the

39
00:01:45,799 --> 00:01:50,929
ground running with Frida and hopefully

40
00:01:48,139 --> 00:01:53,600
what you get out of the talk is just

41
00:01:50,929 --> 00:01:55,310
enough information to make your bug

42
00:01:53,600 --> 00:02:00,439
hunting and mobile both more efficient

43
00:01:55,310 --> 00:02:02,479
and a heck of a lot more fun oh and

44
00:02:00,439 --> 00:02:03,740
unfortunately here hang on I'm having

45
00:02:02,479 --> 00:02:07,100
some technical difficulties all right

46
00:02:03,740 --> 00:02:09,639
there we go so first let's talk about

47
00:02:07,100 --> 00:02:13,130
motivation though from my perspective

48
00:02:09,639 --> 00:02:16,069
looking at blackbox mobile application

49
00:02:13,130 --> 00:02:18,140
testing there's some challenges that we

50
00:02:16,069 --> 00:02:19,849
encounter when you don't have source

51
00:02:18,140 --> 00:02:20,929
code now obviously if you're looking at

52
00:02:19,849 --> 00:02:22,670
Andrew

53
00:02:20,930 --> 00:02:24,320
you can address that somewhat by

54
00:02:22,670 --> 00:02:27,799
decompiling to source although you might

55
00:02:24,320 --> 00:02:28,760
run into fisk asian or some other issues

56
00:02:27,800 --> 00:02:30,950
that prevent you from fully

57
00:02:28,760 --> 00:02:32,899
understanding what's going on but on iOS

58
00:02:30,950 --> 00:02:35,480
we don't really even have that option of

59
00:02:32,900 --> 00:02:37,430
decompiling to source so we have some

60
00:02:35,480 --> 00:02:39,530
limitations right off the bat and

61
00:02:37,430 --> 00:02:41,680
digging into complex applications and

62
00:02:39,530 --> 00:02:43,760
understanding exactly how they work

63
00:02:41,680 --> 00:02:45,620
depending on your environment you also

64
00:02:43,760 --> 00:02:48,290
might have very limited debugging

65
00:02:45,620 --> 00:02:50,990
capabilities especially on a non rated

66
00:02:48,290 --> 00:02:52,970
or a jailed device you might not have

67
00:02:50,990 --> 00:02:55,040
very much access to the environment that

68
00:02:52,970 --> 00:02:56,570
the application is running in either so

69
00:02:55,040 --> 00:02:59,239
there's a lot of things you have to

70
00:02:56,570 --> 00:03:01,040
surmount with blackbox testing in order

71
00:02:59,240 --> 00:03:02,240
to really get a good feel for what the

72
00:03:01,040 --> 00:03:03,590
application is doing under the hood

73
00:03:02,240 --> 00:03:07,220
especially if some of that functionality

74
00:03:03,590 --> 00:03:11,990
isn't manifesting in a visual way in the

75
00:03:07,220 --> 00:03:14,540
interface so this is where I feel like

76
00:03:11,990 --> 00:03:16,820
Frida addresses a lot of these gaps very

77
00:03:14,540 --> 00:03:19,220
well free does a framework for dynamic

78
00:03:16,820 --> 00:03:21,140
instrumentation and in practical sense

79
00:03:19,220 --> 00:03:23,660
what that means is that you can actually

80
00:03:21,140 --> 00:03:26,179
inject your own JavaScript into an

81
00:03:23,660 --> 00:03:28,430
application at runtime and execute it

82
00:03:26,180 --> 00:03:30,740
from the context of the application so

83
00:03:28,430 --> 00:03:33,290
your code can see what the application

84
00:03:30,740 --> 00:03:35,810
sees it can do what the application does

85
00:03:33,290 --> 00:03:37,370
and that can be a very powerful tool for

86
00:03:35,810 --> 00:03:40,100
understanding exactly how that

87
00:03:37,370 --> 00:03:42,530
application works Frida also provides a

88
00:03:40,100 --> 00:03:44,480
really nice API so that you can build

89
00:03:42,530 --> 00:03:46,130
custom tools you're not just limited to

90
00:03:44,480 --> 00:03:48,019
the tools that Frida provides

91
00:03:46,130 --> 00:03:49,760
out-of-the-box but you can build your

92
00:03:48,020 --> 00:03:52,700
own tools that are very lightweight and

93
00:03:49,760 --> 00:03:55,250
portable and can address very specific

94
00:03:52,700 --> 00:03:59,329
use cases within the application that

95
00:03:55,250 --> 00:04:01,340
you're testing right this minute so one

96
00:03:59,330 --> 00:04:03,050
of the nice features of Frida that I

97
00:04:01,340 --> 00:04:05,090
think contrasts with a lot of mobile

98
00:04:03,050 --> 00:04:07,160
tools and frameworks out there is it

99
00:04:05,090 --> 00:04:08,840
doesn't necessarily rely on you having a

100
00:04:07,160 --> 00:04:10,910
jailbroken or rooted device although

101
00:04:08,840 --> 00:04:13,340
that is kind of the easier way of

102
00:04:10,910 --> 00:04:15,530
working with it if you do have that type

103
00:04:13,340 --> 00:04:17,899
of device there's an injected mode for

104
00:04:15,530 --> 00:04:19,608
Frida where it just runs it in a server

105
00:04:17,899 --> 00:04:21,409
on the device that your client scripts

106
00:04:19,608 --> 00:04:23,479
can talk to you but if you're stuck with

107
00:04:21,410 --> 00:04:26,419
just working on a stock device it also

108
00:04:23,480 --> 00:04:28,610
has an embedded mode where you can we

109
00:04:26,419 --> 00:04:30,950
either repackage the application

110
00:04:28,610 --> 00:04:33,710
basically with a free - gadget shared

111
00:04:30,950 --> 00:04:33,889
library that can do a lot of the same

112
00:04:33,710 --> 00:04:35,659
thing

113
00:04:33,889 --> 00:04:37,159
that Freda server does it can listen for

114
00:04:35,659 --> 00:04:39,889
connections and also has some other nice

115
00:04:37,159 --> 00:04:41,870
features that you can customize if if

116
00:04:39,889 --> 00:04:43,520
that's what you're working with now I'm

117
00:04:41,870 --> 00:04:45,169
not going to really go into using free

118
00:04:43,520 --> 00:04:47,688
to gadget here there's a lot of great

119
00:04:45,169 --> 00:04:49,008
write-ups and blog posts out on the

120
00:04:47,689 --> 00:04:50,659
internet that you can find that goes

121
00:04:49,009 --> 00:04:52,879
step-by-step through it it can be kind

122
00:04:50,659 --> 00:04:54,650
of a complex process depending on what

123
00:04:52,879 --> 00:04:55,999
you're working with so most of the

124
00:04:54,650 --> 00:04:59,870
examples were going to talk about today

125
00:04:55,999 --> 00:05:01,400
were performed in injected mode but a

126
00:04:59,870 --> 00:05:03,469
lot of them would still be perfectly

127
00:05:01,400 --> 00:05:07,310
usable if you were running in embedded

128
00:05:03,469 --> 00:05:09,529
mode as well so Frida's toolkit right

129
00:05:07,310 --> 00:05:11,990
out of the box comes with some very

130
00:05:09,529 --> 00:05:13,550
useable tools that honestly I even

131
00:05:11,990 --> 00:05:16,189
though I've written some of my own tools

132
00:05:13,550 --> 00:05:18,469
I still use these on a daily basis and

133
00:05:16,189 --> 00:05:20,379
really this is where I recommend people

134
00:05:18,469 --> 00:05:23,240
start if they've never seen or

135
00:05:20,379 --> 00:05:25,669
interacted with freedom before free to

136
00:05:23,240 --> 00:05:26,870
trace and the frita command-line

137
00:05:25,669 --> 00:05:28,789
interface and we'll see a lot of

138
00:05:26,870 --> 00:05:30,860
examples throughout this talk of how to

139
00:05:28,789 --> 00:05:32,870
use both of these freida also provides

140
00:05:30,860 --> 00:05:34,490
bindings for a few different languages

141
00:05:32,870 --> 00:05:36,020
so if you have a favorite scripting

142
00:05:34,490 --> 00:05:38,599
language say that you know you really

143
00:05:36,020 --> 00:05:41,448
like Python or you're very comfortable

144
00:05:38,599 --> 00:05:42,500
working in dotnet there are bindings for

145
00:05:41,449 --> 00:05:44,210
these so that you can create your own

146
00:05:42,500 --> 00:05:45,860
tools in that environment that you're

147
00:05:44,210 --> 00:05:50,120
already familiar with and comfortable

148
00:05:45,860 --> 00:05:52,550
with so let's just start by diving into

149
00:05:50,120 --> 00:05:55,879
a very simple example of using free to

150
00:05:52,550 --> 00:05:58,310
trace on iOS and what free to trace does

151
00:05:55,879 --> 00:06:01,039
is log functions and method invocations

152
00:05:58,310 --> 00:06:03,349
at runtime that we can specify so in

153
00:06:01,039 --> 00:06:06,020
this example I'm targeting Objective C

154
00:06:03,349 --> 00:06:08,628
methods in an iOS application using the

155
00:06:06,020 --> 00:06:11,719
- M flag and I can provide a pattern

156
00:06:08,629 --> 00:06:13,879
using an asterisk as a wildcard to match

157
00:06:11,719 --> 00:06:15,919
on just simple patterns of things that

158
00:06:13,879 --> 00:06:17,509
I'm looking for so as an example let's

159
00:06:15,919 --> 00:06:20,270
say you have an iOS application that's

160
00:06:17,509 --> 00:06:21,949
really resisting your efforts to push

161
00:06:20,270 --> 00:06:23,659
the traffic through a proxy maybe the

162
00:06:21,949 --> 00:06:25,550
application doesn't obey the the

163
00:06:23,659 --> 00:06:27,199
system-wide proxy settings or you're

164
00:06:25,550 --> 00:06:29,330
having some other technical difficulties

165
00:06:27,199 --> 00:06:31,430
and you just cannot get to that traffic

166
00:06:29,330 --> 00:06:33,740
that you need to analyze the application

167
00:06:31,430 --> 00:06:36,379
so you decide well I'm gonna use Frida

168
00:06:33,740 --> 00:06:38,300
and just trace some of those Network

169
00:06:36,379 --> 00:06:40,699
calls on my own and I'll start with

170
00:06:38,300 --> 00:06:43,009
nsurl request in it with URL cache

171
00:06:40,699 --> 00:06:45,019
policy timeout interval because that

172
00:06:43,009 --> 00:06:46,879
will show me the URLs that the

173
00:06:45,019 --> 00:06:47,879
application is constructing in these

174
00:06:46,879 --> 00:06:49,679
requests

175
00:06:47,879 --> 00:06:51,599
so if we wanted to just trace that

176
00:06:49,679 --> 00:06:53,248
particular call we could use this

177
00:06:51,599 --> 00:06:56,819
command line at the bottom free to trace

178
00:06:53,249 --> 00:06:59,099
- you which tells Frieda that we are

179
00:06:56,819 --> 00:07:01,679
operating with a connected device over

180
00:06:59,099 --> 00:07:06,179
USB so it's going to send all of its

181
00:07:01,679 --> 00:07:09,270
calls over USB - M says this is the

182
00:07:06,179 --> 00:07:11,549
pattern of Objective C methods that I'm

183
00:07:09,270 --> 00:07:13,589
looking for and in our case we just want

184
00:07:11,550 --> 00:07:16,499
to trace instance methods that's the -

185
00:07:13,589 --> 00:07:18,659
it would if it was a static or class

186
00:07:16,499 --> 00:07:20,939
method we could put plus or an asterisk

187
00:07:18,659 --> 00:07:24,300
if we don't care we want either one we

188
00:07:20,939 --> 00:07:26,369
want just nsurl request methods and we

189
00:07:24,300 --> 00:07:29,639
want the method to match in it with URL

190
00:07:26,369 --> 00:07:31,949
: cache and that's basically our prefix

191
00:07:29,639 --> 00:07:33,629
anything that matches that prefix will

192
00:07:31,949 --> 00:07:36,300
be returned in the trace and then we'll

193
00:07:33,629 --> 00:07:40,529
specify the name of the process or

194
00:07:36,300 --> 00:07:43,289
applications process after that so if we

195
00:07:40,529 --> 00:07:45,629
were to execute this against the Apple

196
00:07:43,289 --> 00:07:47,068
News application on a device we would

197
00:07:45,629 --> 00:07:48,839
see something like this first of all

198
00:07:47,069 --> 00:07:50,969
Frida has told us it has been exactly

199
00:07:48,839 --> 00:07:52,259
one function to trace which is great we

200
00:07:50,969 --> 00:07:54,149
don't have a lot of garbage we have to

201
00:07:52,259 --> 00:07:55,979
wade through because we targeted exactly

202
00:07:54,149 --> 00:07:58,110
what we're looking for and then you can

203
00:07:55,979 --> 00:08:00,869
see a really nice color-coded output and

204
00:07:58,110 --> 00:08:03,119
this color coding denotes the different

205
00:08:00,869 --> 00:08:04,949
threads that are active within the

206
00:08:03,119 --> 00:08:06,449
application and it might not be real

207
00:08:04,949 --> 00:08:08,399
obvious here since we're only tracing

208
00:08:06,449 --> 00:08:10,110
one function but if you had a lot of

209
00:08:08,399 --> 00:08:11,610
functions that you were tracing it can

210
00:08:10,110 --> 00:08:13,499
be very nice to see which threads are

211
00:08:11,610 --> 00:08:15,990
calling which function and how those

212
00:08:13,499 --> 00:08:18,059
threads are ordered or nested or how I

213
00:08:15,990 --> 00:08:20,159
should say how the the actual calls are

214
00:08:18,059 --> 00:08:22,589
ordered or nested on that particular

215
00:08:20,159 --> 00:08:24,509
thread so we do see that we have

216
00:08:22,589 --> 00:08:27,509
invocations of in it with URL cache

217
00:08:24,509 --> 00:08:29,099
policy timeout interval but beyond that

218
00:08:27,509 --> 00:08:30,990
it's not really telling us a lot we

219
00:08:29,099 --> 00:08:32,818
don't see what the URLs are we just kind

220
00:08:30,990 --> 00:08:34,919
of see a pointer so we know there's

221
00:08:32,818 --> 00:08:36,718
something there but there's not a human

222
00:08:34,919 --> 00:08:38,698
readable representation of it on the

223
00:08:36,719 --> 00:08:43,199
screen that's going to help us out but

224
00:08:38,698 --> 00:08:45,420
we can make that happen so Frida Trace

225
00:08:43,198 --> 00:08:48,329
generates what it calls handlers for

226
00:08:45,420 --> 00:08:51,029
each method that it finds and these are

227
00:08:48,329 --> 00:08:52,529
just Auto generated JavaScript stubs for

228
00:08:51,029 --> 00:08:54,540
code that's in boats both before and

229
00:08:52,529 --> 00:08:57,300
after each method call that you're

230
00:08:54,540 --> 00:08:59,069
tracing and we can modify these Frida

231
00:08:57,300 --> 00:09:01,170
will actually tell us exactly where

232
00:08:59,069 --> 00:09:01,680
these handlers are located you can see

233
00:09:01,170 --> 00:09:04,920
in the scene

234
00:09:01,680 --> 00:09:07,290
that I've excerpted from the Tres at the

235
00:09:04,920 --> 00:09:09,660
bottom here it gives the exact directory

236
00:09:07,290 --> 00:09:12,269
and file name to the trace that it's

237
00:09:09,660 --> 00:09:13,740
generated for this particular method so

238
00:09:12,269 --> 00:09:15,930
we can go into the handler and we can

239
00:09:13,740 --> 00:09:17,279
actually modify it to make the trace

240
00:09:15,930 --> 00:09:20,638
appear differently or get different

241
00:09:17,279 --> 00:09:23,399
information out of it so here's the top

242
00:09:20,639 --> 00:09:25,110
half of that particular handler file in

243
00:09:23,399 --> 00:09:26,910
the handler we'll have an on enter

244
00:09:25,110 --> 00:09:28,740
function and if I have the bottom of the

245
00:09:26,910 --> 00:09:31,019
file we'd also have an on lead function

246
00:09:28,740 --> 00:09:33,269
so on enter is called just before the

247
00:09:31,019 --> 00:09:33,749
actual method is called and on leave is

248
00:09:33,269 --> 00:09:36,119
called

249
00:09:33,749 --> 00:09:38,160
after the method has returned so you can

250
00:09:36,119 --> 00:09:39,749
see and this is this is by default what

251
00:09:38,160 --> 00:09:43,139
frida is giving me it gives me a nice

252
00:09:39,749 --> 00:09:45,389
log line where it has broken out my

253
00:09:43,139 --> 00:09:49,110
specific method call interspersed with

254
00:09:45,389 --> 00:09:51,899
the arguments that were passed into that

255
00:09:49,110 --> 00:09:53,519
method so this is exactly what we would

256
00:09:51,899 --> 00:09:56,579
want to modify if we want to see some

257
00:09:53,519 --> 00:09:59,639
different output now when we modify

258
00:09:56,579 --> 00:10:01,498
handlers for objective-c specifically we

259
00:09:59,639 --> 00:10:03,629
can lean on freitas javascript api to

260
00:10:01,499 --> 00:10:04,920
parse these arguments and get something

261
00:10:03,629 --> 00:10:08,029
more interesting out of them

262
00:10:04,920 --> 00:10:10,979
specifically the obj see that objects

263
00:10:08,029 --> 00:10:13,170
function in the frita api will create a

264
00:10:10,980 --> 00:10:15,480
JavaScript binding to the object that we

265
00:10:13,170 --> 00:10:17,969
specify and what that will do is allow

266
00:10:15,480 --> 00:10:20,459
us to interact with that object from

267
00:10:17,970 --> 00:10:22,559
within JavaScript if it's an objective-c

268
00:10:20,459 --> 00:10:25,170
object we can then call methods on that

269
00:10:22,559 --> 00:10:27,509
object or you know extract more

270
00:10:25,170 --> 00:10:28,979
information out of it so all we really

271
00:10:27,509 --> 00:10:32,759
have to do to get something readable

272
00:10:28,980 --> 00:10:36,120
here is just wrap our argument args -

273
00:10:32,759 --> 00:10:38,339
here with obj see object and since it's

274
00:10:36,120 --> 00:10:41,009
now a JavaScript representation we can

275
00:10:38,339 --> 00:10:43,379
just use to string to see if we have

276
00:10:41,009 --> 00:10:45,449
something a string description something

277
00:10:43,379 --> 00:10:47,339
more human readable that will allow us

278
00:10:45,449 --> 00:10:49,829
to understand exactly what's going on

279
00:10:47,339 --> 00:10:53,519
here so let's see how that new and

280
00:10:49,829 --> 00:10:55,649
improved trace would look so here we've

281
00:10:53,519 --> 00:10:57,689
got the exact same invocation same

282
00:10:55,649 --> 00:11:00,059
command line but it's now loading our

283
00:10:57,689 --> 00:11:03,929
modified Handler and lo and behold we do

284
00:11:00,059 --> 00:11:07,049
have URLs actual URL strings that we can

285
00:11:03,929 --> 00:11:09,360
see in the in it with you or alcohol so

286
00:11:07,049 --> 00:11:11,370
at this point we already just from you

287
00:11:09,360 --> 00:11:12,899
know two iterations of tracing and a

288
00:11:11,370 --> 00:11:13,710
little bit of modification within our

289
00:11:12,899 --> 00:11:15,120
handler we now have

290
00:11:13,710 --> 00:11:17,670
quite a bit more information than we

291
00:11:15,120 --> 00:11:19,590
started out with and if our issue is

292
00:11:17,670 --> 00:11:21,949
that we can't get at this traffic any

293
00:11:19,590 --> 00:11:24,750
other way we're now on our way to

294
00:11:21,950 --> 00:11:26,520
creating some insight into what that

295
00:11:24,750 --> 00:11:30,930
traffic looks like without ever even

296
00:11:26,520 --> 00:11:33,390
having to touch a proxy so if you've

297
00:11:30,930 --> 00:11:35,520
never used Frieda before you're probably

298
00:11:33,390 --> 00:11:37,350
thinking that was really cool I like all

299
00:11:35,520 --> 00:11:39,360
the pretty colors and all the

300
00:11:37,350 --> 00:11:41,820
information I have no idea where that

301
00:11:39,360 --> 00:11:43,590
code was running I have no idea what's

302
00:11:41,820 --> 00:11:45,390
going on and that's kind of how I felt

303
00:11:43,590 --> 00:11:47,550
when I first started using Frieda a few

304
00:11:45,390 --> 00:11:49,319
years ago I had a hard time wrapping my

305
00:11:47,550 --> 00:11:52,020
head around where the different pieces

306
00:11:49,320 --> 00:11:53,730
of code were executing and why I could

307
00:11:52,020 --> 00:11:56,100
do certain things and some parts of code

308
00:11:53,730 --> 00:11:57,360
but not others so I wanted to really

309
00:11:56,100 --> 00:12:00,930
drive home before we get into more

310
00:11:57,360 --> 00:12:03,480
examples how this looks in terms of code

311
00:12:00,930 --> 00:12:04,829
execution so there's two parts to what

312
00:12:03,480 --> 00:12:07,380
we were just looking at there's a client

313
00:12:04,830 --> 00:12:09,420
script and that's your script that's you

314
00:12:07,380 --> 00:12:11,100
know something like free DTrace that's

315
00:12:09,420 --> 00:12:13,110
something you've written in Python or

316
00:12:11,100 --> 00:12:14,970
you know in Swift or something that's

317
00:12:13,110 --> 00:12:16,980
that's actually executing on your host

318
00:12:14,970 --> 00:12:19,230
computer and then there's the objective

319
00:12:16,980 --> 00:12:20,970
JavaScript which which is executing live

320
00:12:19,230 --> 00:12:24,420
in the context of your application on

321
00:12:20,970 --> 00:12:26,400
your device now the the reason that this

322
00:12:24,420 --> 00:12:27,540
is important is you can also create

323
00:12:26,400 --> 00:12:29,130
client scripts in something like

324
00:12:27,540 --> 00:12:32,459
JavaScript and it's easy to get confused

325
00:12:29,130 --> 00:12:33,660
as to where that JavaScript is going so

326
00:12:32,460 --> 00:12:35,760
just keep in mind that there's two

327
00:12:33,660 --> 00:12:37,740
components so what we just saw with the

328
00:12:35,760 --> 00:12:40,200
handlers and free to trace free to trace

329
00:12:37,740 --> 00:12:42,510
is running on for instance my laptop

330
00:12:40,200 --> 00:12:45,390
while the handler that we modified is

331
00:12:42,510 --> 00:12:47,040
executing on the device so as we look at

332
00:12:45,390 --> 00:12:49,890
different examples try to keep that

333
00:12:47,040 --> 00:12:52,349
distinction in mind because it is

334
00:12:49,890 --> 00:12:54,840
important that you know for instance if

335
00:12:52,350 --> 00:12:57,120
you want to output something to a file

336
00:12:54,840 --> 00:12:59,370
on your computer you're not going to be

337
00:12:57,120 --> 00:13:00,810
able to get there directly by the code

338
00:12:59,370 --> 00:13:04,890
in your handler you're going to have to

339
00:13:00,810 --> 00:13:07,260
do that in your client code ok so how

340
00:13:04,890 --> 00:13:10,170
can we use Frieda well we've already

341
00:13:07,260 --> 00:13:12,900
seen that we can monitor method input

342
00:13:10,170 --> 00:13:15,959
and output at runtime and you know tweak

343
00:13:12,900 --> 00:13:18,300
exactly what we're getting in for

344
00:13:15,960 --> 00:13:19,800
instance the free to trace output but

345
00:13:18,300 --> 00:13:22,740
when we're looking at a specific

346
00:13:19,800 --> 00:13:26,099
application and we don't want a one size

347
00:13:22,740 --> 00:13:27,180
all fits one-size-fits-all solution we

348
00:13:26,100 --> 00:13:30,090
can also crab

349
00:13:27,180 --> 00:13:31,500
things that will analyze data or

350
00:13:30,090 --> 00:13:34,260
functionality specific to that

351
00:13:31,500 --> 00:13:36,990
application we can also use it in a more

352
00:13:34,260 --> 00:13:39,780
generic way to bypass controls like SSL

353
00:13:36,990 --> 00:13:41,940
pinning or jailbreak or route detection

354
00:13:39,780 --> 00:13:43,829
or even manipulate the application

355
00:13:41,940 --> 00:13:45,720
behavior so you know for instance the

356
00:13:43,830 --> 00:13:47,190
things that we have to repeatedly click

357
00:13:45,720 --> 00:13:50,580
on in the application we might actually

358
00:13:47,190 --> 00:13:53,670
be able to automate that process through

359
00:13:50,580 --> 00:13:55,260
some frida scripts but one of the first

360
00:13:53,670 --> 00:13:58,229
things you'll probably use free to for

361
00:13:55,260 --> 00:14:00,720
is simply exploring what an application

362
00:13:58,230 --> 00:14:02,610
looks like and how it behaves under the

363
00:14:00,720 --> 00:14:03,810
hood all of that that functionality and

364
00:14:02,610 --> 00:14:05,760
behavior that's not immediately

365
00:14:03,810 --> 00:14:10,170
accessible to you either through source

366
00:14:05,760 --> 00:14:12,390
code or through interacting with cui so

367
00:14:10,170 --> 00:14:13,920
let's take an Android example I want to

368
00:14:12,390 --> 00:14:15,030
really enumerate all of the things you

369
00:14:13,920 --> 00:14:16,920
can get out of free to trace because

370
00:14:15,030 --> 00:14:18,810
that's probably one of the first places

371
00:14:16,920 --> 00:14:21,060
that you would start using frita and

372
00:14:18,810 --> 00:14:23,550
besides tracing objective-c functions

373
00:14:21,060 --> 00:14:27,119
and methods we can also trace native

374
00:14:23,550 --> 00:14:28,890
functions as well so - I we can use that

375
00:14:27,120 --> 00:14:30,930
to apply a pattern to find functions in

376
00:14:28,890 --> 00:14:34,110
a very similar fashion to the way we use

377
00:14:30,930 --> 00:14:36,599
- M for objective-c and we can also use

378
00:14:34,110 --> 00:14:39,090
- capital I and that will hook all the

379
00:14:36,600 --> 00:14:41,370
functions in a library that matches the

380
00:14:39,090 --> 00:14:44,130
pattern that we specify so at the bottom

381
00:14:41,370 --> 00:14:46,350
I have a command for free to trace that

382
00:14:44,130 --> 00:14:49,230
targets the Google Photos app on an

383
00:14:46,350 --> 00:14:51,150
Android device and my hypothesis here

384
00:14:49,230 --> 00:14:54,720
was you know I'm kind of curious what

385
00:14:51,150 --> 00:14:56,459
kind of database activity occurs within

386
00:14:54,720 --> 00:14:57,990
this application and I don't just want

387
00:14:56,460 --> 00:14:59,640
to know like sequel Lite calls although

388
00:14:57,990 --> 00:15:01,170
it's really critical I want to know

389
00:14:59,640 --> 00:15:03,000
where those databases are I want to know

390
00:15:01,170 --> 00:15:05,310
the path to them so that I can go

391
00:15:03,000 --> 00:15:08,310
investigate them on the filesystem so in

392
00:15:05,310 --> 00:15:09,839
this case I've specified - I open in the

393
00:15:08,310 --> 00:15:11,910
hopes that I'll get some file open

394
00:15:09,840 --> 00:15:14,220
commands and then I've done the capital

395
00:15:11,910 --> 00:15:16,230
I for sequel Lite because I'll be honest

396
00:15:14,220 --> 00:15:18,210
I can never remember library names so I

397
00:15:16,230 --> 00:15:20,370
always have to use asterisk to just

398
00:15:18,210 --> 00:15:22,410
match based on the functionality I want

399
00:15:20,370 --> 00:15:24,900
so I want whatever library is going to

400
00:15:22,410 --> 00:15:26,730
contain the sequel Lite functionality

401
00:15:24,900 --> 00:15:29,520
and just to give you an idea of how

402
00:15:26,730 --> 00:15:31,080
powerful this is after I ran that and

403
00:15:29,520 --> 00:15:34,470
then looked at my handlers directory

404
00:15:31,080 --> 00:15:37,260
this is just a portion of what I saw so

405
00:15:34,470 --> 00:15:39,710
it found Lib sequel Lite and it made a

406
00:15:37,260 --> 00:15:41,720
handler for every single function with

407
00:15:39,710 --> 00:15:44,180
lips equal light which is quite a lot of

408
00:15:41,720 --> 00:15:46,250
functionality so this is really powerful

409
00:15:44,180 --> 00:15:48,050
if you know that an application uses a

410
00:15:46,250 --> 00:15:50,000
library you're not sure what parts of

411
00:15:48,050 --> 00:15:51,770
the library it uses or maybe it's a

412
00:15:50,000 --> 00:15:53,420
library that's not well documented or

413
00:15:51,770 --> 00:15:55,220
completely undocumented so you don't

414
00:15:53,420 --> 00:15:58,160
even know what's in there and you really

415
00:15:55,220 --> 00:16:00,560
just want a quick look at via tracing at

416
00:15:58,160 --> 00:16:02,420
what the application is doing with it so

417
00:16:00,560 --> 00:16:03,920
this will dump everything and give you

418
00:16:02,420 --> 00:16:05,779
the option to modify any of these

419
00:16:03,920 --> 00:16:09,589
handlers and utilize them in free to

420
00:16:05,779 --> 00:16:11,420
trees so once I actually execute that

421
00:16:09,589 --> 00:16:13,490
traits command against the Photos app

422
00:16:11,420 --> 00:16:16,819
here's a couple of excerpts of what I

423
00:16:13,490 --> 00:16:18,800
saw so in that top screenshot you can

424
00:16:16,820 --> 00:16:20,750
see immediately we have a bunch of

425
00:16:18,800 --> 00:16:23,390
sequel Lite calls and remember how I

426
00:16:20,750 --> 00:16:25,550
talked about within a thread in the

427
00:16:23,390 --> 00:16:27,589
trace it will show us how those calls

428
00:16:25,550 --> 00:16:30,229
are nested and that's exactly what we're

429
00:16:27,589 --> 00:16:31,730
seeing here sequel 8/3 open v2 is called

430
00:16:30,230 --> 00:16:34,760
and then from there we can see a bunch

431
00:16:31,730 --> 00:16:36,410
of other calls that that are executed

432
00:16:34,760 --> 00:16:38,750
after that and kind of how those are

433
00:16:36,410 --> 00:16:41,870
ordered and among that I've highlighted

434
00:16:38,750 --> 00:16:43,459
that we do indeed have an open call so

435
00:16:41,870 --> 00:16:45,260
we can see exactly where that database

436
00:16:43,459 --> 00:16:46,849
is on the file system and if we're

437
00:16:45,260 --> 00:16:48,439
interested we could go you know if we

438
00:16:46,850 --> 00:16:50,060
have access on that device we could go

439
00:16:48,440 --> 00:16:52,250
and grab it and see what's contained

440
00:16:50,060 --> 00:16:54,050
there but we also can tell that this

441
00:16:52,250 --> 00:16:56,540
particular database is what all of these

442
00:16:54,050 --> 00:16:58,370
sequel Lite calls are acting on in the

443
00:16:56,540 --> 00:17:00,439
second screen chat we see we have a

444
00:16:58,370 --> 00:17:02,990
sequel Lite 3 exec call now

445
00:17:00,440 --> 00:17:07,250
unfortunately with this particular

446
00:17:02,990 --> 00:17:08,720
library we don't have any any arguments

447
00:17:07,250 --> 00:17:11,000
being printed to the screen by default

448
00:17:08,720 --> 00:17:13,220
so we would have to go into that handler

449
00:17:11,000 --> 00:17:15,380
and do a little work to try and parse

450
00:17:13,220 --> 00:17:16,429
out what the args are and interpret them

451
00:17:15,380 --> 00:17:18,470
so that they could be printed

452
00:17:16,429 --> 00:17:19,939
but we do see here that since there's an

453
00:17:18,470 --> 00:17:21,770
exec call there's probably a query

454
00:17:19,939 --> 00:17:24,910
string that we could print with just a

455
00:17:21,770 --> 00:17:27,859
little bit of work on that Handler file

456
00:17:24,910 --> 00:17:29,570
so what you can see from this is using a

457
00:17:27,859 --> 00:17:31,189
trace to explore when all you know is

458
00:17:29,570 --> 00:17:32,300
that kind of a high-level idea of what

459
00:17:31,190 --> 00:17:34,309
you're looking for it can be really

460
00:17:32,300 --> 00:17:37,389
powerful and pretty easy using free to

461
00:17:34,309 --> 00:17:40,100
trace I want to take one more example

462
00:17:37,390 --> 00:17:42,590
using wildcards and combining a couple

463
00:17:40,100 --> 00:17:44,959
of the things that we just saw to look

464
00:17:42,590 --> 00:17:47,540
at the iOS keychain functionality in an

465
00:17:44,960 --> 00:17:50,030
application so a lot of times I OS

466
00:17:47,540 --> 00:17:51,559
applications will want to store stuff in

467
00:17:50,030 --> 00:17:53,660
the keychain but won't necessarily

468
00:17:51,559 --> 00:17:55,730
directly you

469
00:17:53,660 --> 00:17:57,560
the low-level keychain API is because

470
00:17:55,730 --> 00:17:59,450
they can be a little complex so they'll

471
00:17:57,560 --> 00:18:00,919
use some sort of wrapper class either

472
00:17:59,450 --> 00:18:03,110
they'll build their own or they'll use

473
00:18:00,920 --> 00:18:05,090
something off the shelf that wraps those

474
00:18:03,110 --> 00:18:07,070
calls both for ease of use but also

475
00:18:05,090 --> 00:18:09,649
sometimes because maybe they're applying

476
00:18:07,070 --> 00:18:11,510
a layer of encryption or some sort of

477
00:18:09,650 --> 00:18:13,460
transformation to the data before it

478
00:18:11,510 --> 00:18:15,740
hits the keychain and it can be really

479
00:18:13,460 --> 00:18:17,450
helpful when you're looking at how an

480
00:18:15,740 --> 00:18:20,660
application uses the keychain to

481
00:18:17,450 --> 00:18:22,790
determine what those layers are so here

482
00:18:20,660 --> 00:18:25,880
I'm introducing another flag which is -

483
00:18:22,790 --> 00:18:28,060
eff and what - eff does is tells frida

484
00:18:25,880 --> 00:18:30,530
to actually launch the application

485
00:18:28,060 --> 00:18:32,600
itself instead of attaching to a running

486
00:18:30,530 --> 00:18:33,560
application and this can be really key

487
00:18:32,600 --> 00:18:35,449
when you're looking at something like

488
00:18:33,560 --> 00:18:36,889
keychain where you expect that there's a

489
00:18:35,450 --> 00:18:39,020
good chance when that application

490
00:18:36,890 --> 00:18:40,700
launches it's hitting the keychain right

491
00:18:39,020 --> 00:18:43,010
away if it's storing credentials there

492
00:18:40,700 --> 00:18:45,110
or tokens or you know something that it

493
00:18:43,010 --> 00:18:46,910
needs to authenticate so we want to make

494
00:18:45,110 --> 00:18:48,320
sure that we're attaching very early so

495
00:18:46,910 --> 00:18:51,800
that we're getting all that information

496
00:18:48,320 --> 00:18:56,360
in our trace so here we're using - m and

497
00:18:51,800 --> 00:18:58,340
we've got a wild card statement with a

498
00:18:56,360 --> 00:18:59,750
chain just so that we'll get classes

499
00:18:58,340 --> 00:19:02,270
that match either a capital K or

500
00:18:59,750 --> 00:19:03,950
lowercase K it because we just want any

501
00:19:02,270 --> 00:19:06,590
kind of generic keychain wrapper class

502
00:19:03,950 --> 00:19:09,680
and then we're also asking it to trace

503
00:19:06,590 --> 00:19:11,419
just the function SEC item copy matching

504
00:19:09,680 --> 00:19:14,150
which would indicate that some keychain

505
00:19:11,420 --> 00:19:15,890
information is being retrieved from the

506
00:19:14,150 --> 00:19:18,920
iOS keychain so let's see what this

507
00:19:15,890 --> 00:19:21,380
would look like so if we execute this on

508
00:19:18,920 --> 00:19:23,480
d VI a which is the damn vulnerable iOS

509
00:19:21,380 --> 00:19:25,820
app and by the way this is a great app

510
00:19:23,480 --> 00:19:28,280
if you just want to kind of explore what

511
00:19:25,820 --> 00:19:29,990
Frida can do in a safe way and and

512
00:19:28,280 --> 00:19:31,460
something that you can get source code -

513
00:19:29,990 --> 00:19:33,560
this is this is a really good way to get

514
00:19:31,460 --> 00:19:34,220
started so we're gonna execute this on

515
00:19:33,560 --> 00:19:35,990
DBIA

516
00:19:34,220 --> 00:19:38,180
and we'll see right off the bat we get

517
00:19:35,990 --> 00:19:39,710
quite a few functions that it's it's

518
00:19:38,180 --> 00:19:41,630
running it found a lot of key chain

519
00:19:39,710 --> 00:19:44,480
classes just with key chain in the name

520
00:19:41,630 --> 00:19:47,060
in fact it traced 720 functions and this

521
00:19:44,480 --> 00:19:49,580
is actually not terribly unusual if your

522
00:19:47,060 --> 00:19:52,970
application is large and you'd have a

523
00:19:49,580 --> 00:19:54,350
pretty generic a wildcard statement you

524
00:19:52,970 --> 00:19:56,420
could get hundreds or perhaps even

525
00:19:54,350 --> 00:19:58,429
thousands of functions and have to try a

526
00:19:56,420 --> 00:20:00,950
couple times to whittle that down in

527
00:19:58,430 --> 00:20:04,640
this case after I started exercising the

528
00:20:00,950 --> 00:20:06,220
application right away I got some some

529
00:20:04,640 --> 00:20:08,230
traces from two

530
00:20:06,220 --> 00:20:10,539
ocular classes PD keychain bindings and

531
00:20:08,230 --> 00:20:12,039
PD keychain bindings controller that

532
00:20:10,539 --> 00:20:14,320
look like maybe they're doing some

533
00:20:12,039 --> 00:20:17,559
interesting things we can see that there

534
00:20:14,320 --> 00:20:18,759
is a value being set for a key pass we

535
00:20:17,559 --> 00:20:20,830
can see a service name which might

536
00:20:18,759 --> 00:20:22,509
correspond to the service name used to

537
00:20:20,830 --> 00:20:24,939
get information in and out of the

538
00:20:22,509 --> 00:20:27,070
keychain and indeed we see SEC item copy

539
00:20:24,940 --> 00:20:28,389
matching is being called so we're in the

540
00:20:27,070 --> 00:20:30,580
right place and we're hitting the right

541
00:20:28,389 --> 00:20:32,110
functionality and this is likely if

542
00:20:30,580 --> 00:20:35,379
we're interested in keychain wrappers

543
00:20:32,110 --> 00:20:37,149
this is likely where we want to be so

544
00:20:35,379 --> 00:20:37,719
just looking at that trace what did we

545
00:20:37,149 --> 00:20:40,059
find

546
00:20:37,720 --> 00:20:41,860
just to recap we've got two classes that

547
00:20:40,059 --> 00:20:43,809
we think are pretty interesting that we

548
00:20:41,860 --> 00:20:46,209
want to explore some more and we have at

549
00:20:43,809 --> 00:20:48,820
least a few areas where either we think

550
00:20:46,210 --> 00:20:50,679
he chain information is being stored or

551
00:20:48,820 --> 00:20:53,019
being retrieved so we have a store

552
00:20:50,679 --> 00:20:54,549
string for key we have a string for key

553
00:20:53,019 --> 00:20:57,159
which might be retrieving information

554
00:20:54,549 --> 00:20:59,019
and we have a service name all of which

555
00:20:57,159 --> 00:21:01,269
are on PD keychain bindings controller

556
00:20:59,019 --> 00:21:03,029
and we also know that SEC item copy

557
00:21:01,269 --> 00:21:05,590
matching was called a couple of times

558
00:21:03,029 --> 00:21:07,679
now at this point if I'm looking at this

559
00:21:05,590 --> 00:21:10,990
trays so this is my first iteration of

560
00:21:07,679 --> 00:21:12,429
tracing my big question is what is it

561
00:21:10,990 --> 00:21:14,350
putting in the keychain and what is it

562
00:21:12,429 --> 00:21:16,539
getting out of the keychain and it's

563
00:21:14,350 --> 00:21:18,490
true that on iOS if you have a

564
00:21:16,539 --> 00:21:20,950
jailbroken device you can just dump the

565
00:21:18,490 --> 00:21:22,419
keychain outright and find it but what I

566
00:21:20,950 --> 00:21:25,600
want to demonstrate here is that

567
00:21:22,419 --> 00:21:27,580
sometimes you can go from a trace and

568
00:21:25,600 --> 00:21:30,100
say I want to get more information and

569
00:21:27,580 --> 00:21:32,379
sure I can I can modify that handler

570
00:21:30,100 --> 00:21:35,350
right I could modify my handler code to

571
00:21:32,379 --> 00:21:36,730
just print those return values but it

572
00:21:35,350 --> 00:21:38,259
might actually be easier to just

573
00:21:36,730 --> 00:21:40,059
directly call the methods if we've

574
00:21:38,259 --> 00:21:41,590
already seen how they're used and we

575
00:21:40,059 --> 00:21:44,019
know that we can invoke them with the

576
00:21:41,590 --> 00:21:46,678
right arguments maybe we should just do

577
00:21:44,019 --> 00:21:48,909
that and see what data we can get back

578
00:21:46,679 --> 00:21:51,879
so that's where the frita command-line

579
00:21:48,909 --> 00:21:53,379
interface comes in the frita CLI is a

580
00:21:51,879 --> 00:21:54,850
Java Script repple and if you're not

581
00:21:53,379 --> 00:21:57,100
familiar with that terminology that

582
00:21:54,850 --> 00:21:58,658
means read execute print and loop if

583
00:21:57,100 --> 00:22:01,120
you've ever used something like the

584
00:21:58,659 --> 00:22:03,370
Python command-line interpreter or the

585
00:22:01,120 --> 00:22:04,418
node one that's pretty much what you're

586
00:22:03,370 --> 00:22:06,668
going to be working with this will feel

587
00:22:04,419 --> 00:22:08,830
pretty familiar so we can just type out

588
00:22:06,669 --> 00:22:10,840
JavaScript commands in the CLI and those

589
00:22:08,830 --> 00:22:13,120
will be executed in the context of our

590
00:22:10,840 --> 00:22:16,000
application we can also collect commands

591
00:22:13,120 --> 00:22:18,219
together in an agent script just you

592
00:22:16,000 --> 00:22:19,990
know a whole file of JavaScript and load

593
00:22:18,220 --> 00:22:21,850
that into the CLI and

594
00:22:19,990 --> 00:22:24,040
it will inject it into our application

595
00:22:21,850 --> 00:22:25,870
at runtime so this can be very handy

596
00:22:24,040 --> 00:22:28,300
when we just kind of want to you know

597
00:22:25,870 --> 00:22:30,219
explore and try some things try and

598
00:22:28,300 --> 00:22:32,520
voguing some some methods within our

599
00:22:30,220 --> 00:22:37,330
application and see what happens

600
00:22:32,520 --> 00:22:41,260
so I have a little video and this is

601
00:22:37,330 --> 00:22:43,419
just going to show the same example DBIA

602
00:22:41,260 --> 00:22:45,520
some of the ways that we might be able

603
00:22:43,420 --> 00:22:47,980
to explore what we saw in the trace to

604
00:22:45,520 --> 00:22:51,070
get more information so one of the

605
00:22:47,980 --> 00:22:53,710
things in the trace that I noticed was

606
00:22:51,070 --> 00:22:56,110
that there were some methods to get a

607
00:22:53,710 --> 00:22:57,280
shared instance of these two classes

608
00:22:56,110 --> 00:22:58,300
that were interested in this won't

609
00:22:57,280 --> 00:23:00,910
always be the case

610
00:22:58,300 --> 00:23:03,340
but since it is the case here I'm gonna

611
00:23:00,910 --> 00:23:05,980
utilize that instead of trying to you

612
00:23:03,340 --> 00:23:07,300
know allocate in an int my own instance

613
00:23:05,980 --> 00:23:08,830
of these classes I'm just going to use

614
00:23:07,300 --> 00:23:10,899
what the application already has

615
00:23:08,830 --> 00:23:12,790
available so I'm just creating a

616
00:23:10,900 --> 00:23:16,270
variable called bindings here and I'm

617
00:23:12,790 --> 00:23:18,879
using freitas objc dot classes which is

618
00:23:16,270 --> 00:23:22,450
just an array of all of the loaded

619
00:23:18,880 --> 00:23:24,490
classes within the application to grab a

620
00:23:22,450 --> 00:23:26,860
handle to PD keychain bindings and then

621
00:23:24,490 --> 00:23:29,110
call shared keychain bindings so that I

622
00:23:26,860 --> 00:23:31,540
get an instance hopefully of that class

623
00:23:29,110 --> 00:23:33,550
and you can see that frida is going to

624
00:23:31,540 --> 00:23:35,740
try and autocomplete where it thinks it

625
00:23:33,550 --> 00:23:37,510
knows what we want to do and that

626
00:23:35,740 --> 00:23:40,570
includes things like Auto completing

627
00:23:37,510 --> 00:23:42,670
right here the name of a method that

628
00:23:40,570 --> 00:23:45,340
hangs off of that particular class that

629
00:23:42,670 --> 00:23:48,130
I'm looking at so now what I want to do

630
00:23:45,340 --> 00:23:50,740
is this is another freebie from frida

631
00:23:48,130 --> 00:23:53,200
let me see if I just pause it right here

632
00:23:50,740 --> 00:23:55,210
so one of the things free two provides

633
00:23:53,200 --> 00:23:57,490
for us is the seller signed own methods

634
00:23:55,210 --> 00:24:01,060
attribute which is really cool because

635
00:23:57,490 --> 00:24:02,740
when we use this on a class that we've

636
00:24:01,060 --> 00:24:05,020
grabbed a handle to you it will tell us

637
00:24:02,740 --> 00:24:06,490
all of the methods that belong

638
00:24:05,020 --> 00:24:08,320
specifically to that class so not

639
00:24:06,490 --> 00:24:11,530
inherited method suggests for that class

640
00:24:08,320 --> 00:24:16,120
so we can dump this on a class of

641
00:24:11,530 --> 00:24:18,430
interest and see exactly what it's

642
00:24:16,120 --> 00:24:20,590
comprised of and this can be really

643
00:24:18,430 --> 00:24:22,690
useful because for instance if I'm

644
00:24:20,590 --> 00:24:26,169
looking at this controller I see hey it

645
00:24:22,690 --> 00:24:29,440
has a values method so what happens if I

646
00:24:26,170 --> 00:24:31,900
try and just call values maybe it'll

647
00:24:29,440 --> 00:24:33,480
dump the actual keychain values that I'm

648
00:24:31,900 --> 00:24:35,700
interested in so we can

649
00:24:33,480 --> 00:24:37,260
first it gives us a handle so we're

650
00:24:35,700 --> 00:24:39,900
gonna try and call to string and indeed

651
00:24:37,260 --> 00:24:42,030
we've just learned a big secret that the

652
00:24:39,900 --> 00:24:44,100
application was protecting so we don't

653
00:24:42,030 --> 00:24:46,080
know at this point if this is pulled

654
00:24:44,100 --> 00:24:48,330
live from the keychain or if it's cached

655
00:24:46,080 --> 00:24:50,970
but it's something interesting that

656
00:24:48,330 --> 00:24:53,159
we're gonna want to perhaps follow up on

657
00:24:50,970 --> 00:24:55,590
so let's start calling string four key

658
00:24:53,160 --> 00:24:58,710
with that key because this is something

659
00:24:55,590 --> 00:25:01,168
we saw in the trace and what does it

660
00:24:58,710 --> 00:25:02,850
return it returns big secret so there's

661
00:25:01,169 --> 00:25:05,010
a good chance that what we saw in the

662
00:25:02,850 --> 00:25:07,309
trace when it was doing string four key

663
00:25:05,010 --> 00:25:09,510
it really is hitting the keychain and

664
00:25:07,309 --> 00:25:11,040
the data that we're getting back now is

665
00:25:09,510 --> 00:25:12,720
actually the keychain data that were

666
00:25:11,040 --> 00:25:14,730
interested in so this is a really great

667
00:25:12,720 --> 00:25:16,650
starting point for us if we're we're

668
00:25:14,730 --> 00:25:18,390
wanting to understand better how these

669
00:25:16,650 --> 00:25:22,890
key chain classes in this application

670
00:25:18,390 --> 00:25:24,960
work now once you've played around in

671
00:25:22,890 --> 00:25:27,299
the CLI of it and you figured out a

672
00:25:24,960 --> 00:25:29,190
progression of commands or productions

673
00:25:27,299 --> 00:25:30,480
and JavaScript that does something

674
00:25:29,190 --> 00:25:31,620
interesting your application you're

675
00:25:30,480 --> 00:25:32,910
probably not going to want to type it

676
00:25:31,620 --> 00:25:34,379
over and over again because I hear

677
00:25:32,910 --> 00:25:35,940
anything like me you hate typing and I

678
00:25:34,380 --> 00:25:36,540
will do anything to not have to type as

679
00:25:35,940 --> 00:25:38,850
much as I do

680
00:25:36,540 --> 00:25:41,970
so once you've tested it you can bundle

681
00:25:38,850 --> 00:25:45,270
that into a single file that we refer to

682
00:25:41,970 --> 00:25:47,220
in Frieda as an agent and this is just a

683
00:25:45,270 --> 00:25:49,110
JavaScript file that you can load via

684
00:25:47,220 --> 00:25:51,240
the CLI and it will inject it into your

685
00:25:49,110 --> 00:25:53,129
target but one of the really cool things

686
00:25:51,240 --> 00:25:55,020
that I lean on a lot when I use Frieda

687
00:25:53,130 --> 00:25:57,419
is that when you define functions within

688
00:25:55,020 --> 00:25:59,460
that agent they basically appear within

689
00:25:57,419 --> 00:26:01,740
the CLI for you to call so it's almost

690
00:25:59,460 --> 00:26:03,480
like creating new commands within your

691
00:26:01,740 --> 00:26:05,520
own little environment for application

692
00:26:03,480 --> 00:26:08,190
testing so the way that we would load an

693
00:26:05,520 --> 00:26:10,139
agent is just with Frida L and then the

694
00:26:08,190 --> 00:26:13,620
path to our agent and the name of our

695
00:26:10,140 --> 00:26:15,210
target so let's think about a way that

696
00:26:13,620 --> 00:26:17,699
we might want to use this on a regular

697
00:26:15,210 --> 00:26:20,190
basis so one of the downsides of Frida

698
00:26:17,700 --> 00:26:22,080
Trace is as of yet there's no support

699
00:26:20,190 --> 00:26:24,240
for matching Java methods the way that

700
00:26:22,080 --> 00:26:25,889
we can match on objective-c methods so

701
00:26:24,240 --> 00:26:27,390
if you what you're targeting is a Java

702
00:26:25,890 --> 00:26:29,130
method you're kind of on your own

703
00:26:27,390 --> 00:26:30,570
there's there's a lot of tools and

704
00:26:29,130 --> 00:26:32,549
scripts out there that folks have

705
00:26:30,570 --> 00:26:34,530
created to sort of bridge this gap but I

706
00:26:32,549 --> 00:26:37,020
think it's useful to see how to do it on

707
00:26:34,530 --> 00:26:39,570
your own manually so you can understand

708
00:26:37,020 --> 00:26:41,160
all the moving parts here so when you

709
00:26:39,570 --> 00:26:43,678
want to do this you have to replace the

710
00:26:41,160 --> 00:26:46,419
method invitation implementation for the

711
00:26:43,679 --> 00:26:48,309
original method with something that we

712
00:26:46,419 --> 00:26:50,919
can use to log our own data to the

713
00:26:48,309 --> 00:26:54,249
console and there's two key items in the

714
00:26:50,919 --> 00:26:57,009
Java API which is similar to the objc

715
00:26:54,249 --> 00:26:59,559
API that we saw for iOS applications and

716
00:26:57,009 --> 00:27:00,970
those are Java perform and Java use

717
00:26:59,559 --> 00:27:02,320
those are things that you're going to

718
00:27:00,970 --> 00:27:05,739
use quite a bit if you're targeting

719
00:27:02,320 --> 00:27:07,389
Android applications so let's say that

720
00:27:05,739 --> 00:27:09,399
something that you're interested in

721
00:27:07,389 --> 00:27:12,428
looking at across all the Android

722
00:27:09,399 --> 00:27:14,830
applications that you test is their use

723
00:27:12,429 --> 00:27:17,200
of web views because there can be some

724
00:27:14,830 --> 00:27:20,259
very interesting bugs that surface when

725
00:27:17,200 --> 00:27:21,909
applications use web views and they're

726
00:27:20,259 --> 00:27:24,669
not very careful about their

727
00:27:21,909 --> 00:27:27,369
implementation so if we just want to see

728
00:27:24,669 --> 00:27:30,460
very simply what a webview is loading

729
00:27:27,369 --> 00:27:32,999
maybe we want to trace the load URL

730
00:27:30,460 --> 00:27:35,109
method of Android WebKit webview and

731
00:27:32,999 --> 00:27:37,359
this code this little piece of

732
00:27:35,109 --> 00:27:39,850
self-contained code is just enough to do

733
00:27:37,359 --> 00:27:42,100
just that across any application that

734
00:27:39,850 --> 00:27:43,149
uses load URL so let me walk through the

735
00:27:42,100 --> 00:27:46,119
fire body light because there's a lot of

736
00:27:43,149 --> 00:27:48,939
information here to absorb so the first

737
00:27:46,119 --> 00:27:51,309
thing we're going to do is use Java dot

738
00:27:48,940 --> 00:27:52,629
available to just make sure that the job

739
00:27:51,309 --> 00:27:53,980
of VM is loaded because we don't even

740
00:27:52,629 --> 00:27:55,359
want to bother with the rest of it

741
00:27:53,980 --> 00:27:56,799
that's the job of VM it's not loaded

742
00:27:55,359 --> 00:27:58,899
it's kind of just a sanity check for us

743
00:27:56,799 --> 00:28:01,330
and then we're going to move to using

744
00:27:58,899 --> 00:28:03,668
Java dot perform on a function that

745
00:28:01,330 --> 00:28:05,949
we've defined the java dot perform makes

746
00:28:03,669 --> 00:28:07,629
sure that the current thread is attached

747
00:28:05,950 --> 00:28:10,149
to the VM and then it will run whatever

748
00:28:07,629 --> 00:28:11,830
function we specify so we've put our

749
00:28:10,149 --> 00:28:14,199
code in this anonymous function that

750
00:28:11,830 --> 00:28:16,449
we're passing to Java dot perform and

751
00:28:14,200 --> 00:28:19,179
the first thing we do there is grab a

752
00:28:16,450 --> 00:28:22,720
handle to a webview using Java dot use

753
00:28:19,179 --> 00:28:25,149
and Java dot you use just wraps the name

754
00:28:22,720 --> 00:28:27,489
that we pass to it it's just gonna wrap

755
00:28:25,149 --> 00:28:29,018
a JavaScript wrapper around that class

756
00:28:27,489 --> 00:28:30,700
so that we can utilize it throughout the

757
00:28:29,019 --> 00:28:33,220
rest of our JavaScript and interact with

758
00:28:30,700 --> 00:28:35,289
it and once we have that handle that

759
00:28:33,220 --> 00:28:37,539
we've defined and kant's webview we can

760
00:28:35,289 --> 00:28:40,749
do things like instantiate new instances

761
00:28:37,539 --> 00:28:42,789
of that class or call methods from it so

762
00:28:40,749 --> 00:28:45,609
on that next one what we're going to do

763
00:28:42,789 --> 00:28:48,190
is specify that what we're interested in

764
00:28:45,609 --> 00:28:51,220
is load URL and we have to tell Freda

765
00:28:48,190 --> 00:28:53,889
specifically what flavor of load URL we

766
00:28:51,220 --> 00:28:55,359
want to manipulate because if you're

767
00:28:53,889 --> 00:28:57,609
familiar with Java you know that you can

768
00:28:55,359 --> 00:28:59,619
have multiple methods with the same name

769
00:28:57,609 --> 00:28:59,800
that have different signatures as we

770
00:28:59,619 --> 00:29:01,570
have

771
00:28:59,800 --> 00:29:04,629
be very specific here we're going to use

772
00:29:01,570 --> 00:29:07,240
overload to say we want the version of

773
00:29:04,630 --> 00:29:09,340
loadurl that takes one argument of type

774
00:29:07,240 --> 00:29:11,650
java.lang string so that way we're

775
00:29:09,340 --> 00:29:13,090
specified just that particular method

776
00:29:11,650 --> 00:29:14,590
and then we're going to replace the

777
00:29:13,090 --> 00:29:17,320
implementation by setting it to a

778
00:29:14,590 --> 00:29:18,909
function and our function takes a URL so

779
00:29:17,320 --> 00:29:20,919
same kind of signature is the original

780
00:29:18,910 --> 00:29:23,710
and then all we're gonna do is use

781
00:29:20,920 --> 00:29:25,390
console dot log to log a pretty-pretty

782
00:29:23,710 --> 00:29:27,190
line with some color coding and

783
00:29:25,390 --> 00:29:29,560
everything with that URL that was

784
00:29:27,190 --> 00:29:32,230
originally passed in and then we'll call

785
00:29:29,560 --> 00:29:35,050
finally the original implementation of

786
00:29:32,230 --> 00:29:37,600
the method using the dot call method or

787
00:29:35,050 --> 00:29:39,430
the dot call function here now that was

788
00:29:37,600 --> 00:29:41,169
a lot of information I highly encourage

789
00:29:39,430 --> 00:29:43,330
you to come back and revisit the slide

790
00:29:41,170 --> 00:29:44,920
in the video and walk through it line by

791
00:29:43,330 --> 00:29:46,330
line to make sure you understand if this

792
00:29:44,920 --> 00:29:48,670
is if this is something that you're

793
00:29:46,330 --> 00:29:50,379
interested in because in a nutshell this

794
00:29:48,670 --> 00:29:52,510
is a lot of the the functionality that

795
00:29:50,380 --> 00:29:55,390
you will need to build your own kind of

796
00:29:52,510 --> 00:29:56,860
tracing capability within frida so let's

797
00:29:55,390 --> 00:29:59,710
see what that looks like if we execute

798
00:29:56,860 --> 00:30:01,870
it um Here I am loading this into the

799
00:29:59,710 --> 00:30:03,940
Amazon shopping app I only pick to this

800
00:30:01,870 --> 00:30:05,139
example because honestly I went through

801
00:30:03,940 --> 00:30:07,150
a bunch of apps and this was the first

802
00:30:05,140 --> 00:30:08,800
one that had some interesting output and

803
00:30:07,150 --> 00:30:11,320
what we're seeing here is we have our

804
00:30:08,800 --> 00:30:14,230
nice color coded input and each of these

805
00:30:11,320 --> 00:30:16,240
lines represents a URL that was loaded

806
00:30:14,230 --> 00:30:18,310
into the webview now what might surprise

807
00:30:16,240 --> 00:30:21,610
you about this is we're not just getting

808
00:30:18,310 --> 00:30:23,980
your typical HTTP HTTP URLs we're also

809
00:30:21,610 --> 00:30:26,050
getting JavaScript so if you have an

810
00:30:23,980 --> 00:30:28,600
application you know is JavaScript ready

811
00:30:26,050 --> 00:30:30,460
a JavaScript heavy or maybe you suspect

812
00:30:28,600 --> 00:30:32,230
it's JavaScript heavy and you know it

813
00:30:30,460 --> 00:30:34,510
uses web views this is a great way to

814
00:30:32,230 --> 00:30:36,940
get a snapshot of that functionality

815
00:30:34,510 --> 00:30:40,030
that's executing in the webview and if

816
00:30:36,940 --> 00:30:41,230
you look through this trace I mean just

817
00:30:40,030 --> 00:30:43,389
from looking at this and not even

818
00:30:41,230 --> 00:30:45,010
looking at the application you can

819
00:30:43,390 --> 00:30:47,380
definitely make some conclusions about

820
00:30:45,010 --> 00:30:49,210
you know the platforms that are running

821
00:30:47,380 --> 00:30:51,120
within this application the frameworks

822
00:30:49,210 --> 00:30:53,530
that they're using some versions and

823
00:30:51,120 --> 00:30:55,659
make some educated guesses about what's

824
00:30:53,530 --> 00:30:57,639
going on in that webview so this is this

825
00:30:55,660 --> 00:31:01,200
is pretty powerful for such a small

826
00:30:57,640 --> 00:31:03,520
amount of code that we've leveraged here

827
00:31:01,200 --> 00:31:05,890
so there's a couple of different use

828
00:31:03,520 --> 00:31:07,360
cases for agents besides what I've just

829
00:31:05,890 --> 00:31:10,180
shown you which is basically you know

830
00:31:07,360 --> 00:31:11,979
that automating of something tedious or

831
00:31:10,180 --> 00:31:13,150
you know gathering something that you

832
00:31:11,980 --> 00:31:14,580
might want to use across a lot of

833
00:31:13,150 --> 00:31:16,380
applique

834
00:31:14,580 --> 00:31:18,720
we also want to think about the fact

835
00:31:16,380 --> 00:31:21,630
that we can use an agent to define new

836
00:31:18,720 --> 00:31:23,280
commands for the for the CLI as well so

837
00:31:21,630 --> 00:31:25,500
I want to show a couple of examples of

838
00:31:23,280 --> 00:31:27,540
more complex programs that are fully

839
00:31:25,500 --> 00:31:30,180
contained in an agent just to kind of

840
00:31:27,540 --> 00:31:33,300
give you an idea of what is possible in

841
00:31:30,180 --> 00:31:34,710
your own programs so first of all I'm

842
00:31:33,300 --> 00:31:36,930
going to talk about a tool called blue

843
00:31:34,710 --> 00:31:39,360
crawl blue crawl was written by a

844
00:31:36,930 --> 00:31:42,330
colleague of mine Keith makan over at

845
00:31:39,360 --> 00:31:44,129
ioactive and you can get the full source

846
00:31:42,330 --> 00:31:46,649
of this from our ioactive

847
00:31:44,130 --> 00:31:48,810
github repository under blue crawl blue

848
00:31:46,650 --> 00:31:51,150
crawl is a Bluetooth metadata collector

849
00:31:48,810 --> 00:31:53,340
so it will collect metadata from a

850
00:31:51,150 --> 00:31:55,350
specific Android device and it leverages

851
00:31:53,340 --> 00:31:57,570
the fricassee Li to be able to very

852
00:31:55,350 --> 00:32:01,800
easily inject it so you know you just

853
00:31:57,570 --> 00:32:02,939
load this up into your device and it you

854
00:32:01,800 --> 00:32:03,419
don't even really have to interact with

855
00:32:02,940 --> 00:32:05,280
it

856
00:32:03,420 --> 00:32:08,790
it will kind of do all of the work for

857
00:32:05,280 --> 00:32:11,730
you and I like to point people to this

858
00:32:08,790 --> 00:32:13,470
if they're interested in writing agents

859
00:32:11,730 --> 00:32:16,050
for Android because it's very nicely

860
00:32:13,470 --> 00:32:18,060
laid out very organized and very well

861
00:32:16,050 --> 00:32:20,280
commented code and I want to point out a

862
00:32:18,060 --> 00:32:22,649
couple of specific highlights within the

863
00:32:20,280 --> 00:32:24,990
code just for some features that I think

864
00:32:22,650 --> 00:32:28,050
that you will need if you're going to

865
00:32:24,990 --> 00:32:30,660
write a lot of scripts for Android

866
00:32:28,050 --> 00:32:33,659
applications first of all is Java and

867
00:32:30,660 --> 00:32:36,090
numerate loaded classes and enumerate

868
00:32:33,660 --> 00:32:37,860
loaded classes basically just goes

869
00:32:36,090 --> 00:32:41,220
through and enumerates all of the

870
00:32:37,860 --> 00:32:43,889
classes that are loaded currently and in

871
00:32:41,220 --> 00:32:46,650
this instance it will take a callback

872
00:32:43,890 --> 00:32:48,420
object which is what is specified

873
00:32:46,650 --> 00:32:50,280
between the curly braces here and here

874
00:32:48,420 --> 00:32:52,710
and that will have two functions to find

875
00:32:50,280 --> 00:32:55,350
an on match function and an on complete

876
00:32:52,710 --> 00:32:57,930
function the unmatched function will be

877
00:32:55,350 --> 00:33:00,840
called for the name of each class that

878
00:32:57,930 --> 00:33:03,420
is found so in this case what we can see

879
00:33:00,840 --> 00:33:05,820
keith is doing here is he's splitting

880
00:33:03,420 --> 00:33:10,020
the class name and just a dot and

881
00:33:05,820 --> 00:33:12,179
looking to see if the the second name is

882
00:33:10,020 --> 00:33:14,070
Bluetooth so something like Tom doublet

883
00:33:12,180 --> 00:33:16,260
who's Android Bluetooth is went to match

884
00:33:14,070 --> 00:33:18,060
on this and for those matches he's just

885
00:33:16,260 --> 00:33:20,879
going to log what the name of that class

886
00:33:18,060 --> 00:33:22,740
is so this is a simple way to get a log

887
00:33:20,880 --> 00:33:25,560
of everything that's loaded that matches

888
00:33:22,740 --> 00:33:27,030
a specific pattern now in this case we

889
00:33:25,560 --> 00:33:28,860
don't have anything in the uncomplete

890
00:33:27,030 --> 00:33:30,840
function I'm complete is going to run

891
00:33:28,860 --> 00:33:33,240
after we're done in numerating

892
00:33:30,840 --> 00:33:35,850
everything so this is a good place to do

893
00:33:33,240 --> 00:33:37,530
any wrap-up analysis or just output

894
00:33:35,850 --> 00:33:39,330
something in the log to indicate that

895
00:33:37,530 --> 00:33:42,899
we're finished with this portion of the

896
00:33:39,330 --> 00:33:44,820
code the second thing that I want to

897
00:33:42,900 --> 00:33:47,070
highlight is Java dot chews and this is

898
00:33:44,820 --> 00:33:49,050
also an enumerator it works kind of

899
00:33:47,070 --> 00:33:51,060
similarly to what we just saw but

900
00:33:49,050 --> 00:33:54,419
instead of enumerated

901
00:33:51,060 --> 00:33:57,000
were enumerated instances so Freda is

902
00:33:54,420 --> 00:33:59,460
actually scanning the Java heap here to

903
00:33:57,000 --> 00:34:01,380
find instances of a class that match a

904
00:33:59,460 --> 00:34:02,940
class name that we've passed it in this

905
00:34:01,380 --> 00:34:05,010
case we're looking at Android that

906
00:34:02,940 --> 00:34:07,800
Bluetooth that Bluetooth GATT server and

907
00:34:05,010 --> 00:34:09,540
for each instance on the heap that free

908
00:34:07,800 --> 00:34:12,150
defines it's going to pass that to our

909
00:34:09,540 --> 00:34:13,500
on match function so here we can take

910
00:34:12,150 --> 00:34:15,150
that instance and do maybe some more

911
00:34:13,500 --> 00:34:17,550
analysis on it which is what's occurring

912
00:34:15,150 --> 00:34:19,950
here we're gonna call a specific method

913
00:34:17,550 --> 00:34:21,960
on it so that we can crunch some more

914
00:34:19,949 --> 00:34:24,509
data and I'll put some more log lines on

915
00:34:21,960 --> 00:34:26,460
it and then we do have a non complete

916
00:34:24,510 --> 00:34:28,169
function here so after we're finished in

917
00:34:26,460 --> 00:34:29,909
numerating all those instances we're

918
00:34:28,168 --> 00:34:32,850
just going to output a log line to

919
00:34:29,909 --> 00:34:36,210
indicate that we're done so what this

920
00:34:32,850 --> 00:34:40,139
looks like once you run this and I ran

921
00:34:36,210 --> 00:34:41,940
this on my Motorola MOTO G 5 plus what

922
00:34:40,139 --> 00:34:43,770
we can see is first of all in that first

923
00:34:41,940 --> 00:34:45,510
screenshot its enumerated all of those

924
00:34:43,770 --> 00:34:48,060
loaded Bluetooth classes that it found

925
00:34:45,510 --> 00:34:50,700
on my device and then those second two

926
00:34:48,060 --> 00:34:53,549
screenshots what we can see is these are

927
00:34:50,699 --> 00:34:56,850
instances where Java dot choose was used

928
00:34:53,550 --> 00:34:59,340
and freida found some specific instances

929
00:34:56,850 --> 00:35:01,380
of the class specified and we processed

930
00:34:59,340 --> 00:35:04,200
it and we printed that out to the screen

931
00:35:01,380 --> 00:35:06,570
and this is only a portion of the

932
00:35:04,200 --> 00:35:08,640
information that blue crawl outputs I'd

933
00:35:06,570 --> 00:35:10,770
highly encourage you if you have a handy

934
00:35:08,640 --> 00:35:12,839
Android device to try this yourself and

935
00:35:10,770 --> 00:35:14,610
you'll be able to see just you know how

936
00:35:12,840 --> 00:35:17,340
powerful it is and how quickly you can

937
00:35:14,610 --> 00:35:18,960
gather an awful lot of information and

938
00:35:17,340 --> 00:35:20,130
crunch that data and return it to the

939
00:35:18,960 --> 00:35:23,130
user and this would be extremely useful

940
00:35:20,130 --> 00:35:28,440
if your target was an application that

941
00:35:23,130 --> 00:35:30,210
makes heavy use of Bluetooth so for my

942
00:35:28,440 --> 00:35:33,570
second example I want to talk about a

943
00:35:30,210 --> 00:35:35,730
program that defines some functions that

944
00:35:33,570 --> 00:35:37,560
are used as commands in the CLI and

945
00:35:35,730 --> 00:35:40,040
that's a URL scheme fuzzer that I wrote

946
00:35:37,560 --> 00:35:41,720
as a POC for iOS

947
00:35:40,040 --> 00:35:44,480
just for some background for those who

948
00:35:41,720 --> 00:35:47,029
may not be as familiar with iOS one of

949
00:35:44,480 --> 00:35:50,000
the ways that iOS applications can share

950
00:35:47,030 --> 00:35:52,730
data is through a URL based data sharing

951
00:35:50,000 --> 00:35:54,740
mechanism known as custom URL schemes

952
00:35:52,730 --> 00:35:57,170
and the way this works is an application

953
00:35:54,740 --> 00:35:59,240
can register a scheme for instance this

954
00:35:57,170 --> 00:36:01,430
scheme might look like my app that would

955
00:35:59,240 --> 00:36:03,379
be the prefix on a URL they can register

956
00:36:01,430 --> 00:36:05,390
themselves as a handler for that scheme

957
00:36:03,380 --> 00:36:07,370
and then when any other process loads a

958
00:36:05,390 --> 00:36:09,859
URL that starts with for instance my app

959
00:36:07,370 --> 00:36:11,600
colon slash slash the application that

960
00:36:09,860 --> 00:36:13,940
registered it would be launched or

961
00:36:11,600 --> 00:36:16,610
foregrounded and handed that URL to

962
00:36:13,940 --> 00:36:19,010
handle and take action on further now

963
00:36:16,610 --> 00:36:21,650
the problem that I see a lot with these

964
00:36:19,010 --> 00:36:24,350
custom URLs is applications many times

965
00:36:21,650 --> 00:36:27,530
will neglect to fully validate the input

966
00:36:24,350 --> 00:36:29,990
that's coming in via that URL so their

967
00:36:27,530 --> 00:36:32,930
parsing parameters out of it or doing

968
00:36:29,990 --> 00:36:35,330
something based on the path that's in

969
00:36:32,930 --> 00:36:36,799
that URL and they forget to make sure

970
00:36:35,330 --> 00:36:38,270
it's not null or they forget to make

971
00:36:36,800 --> 00:36:40,880
sure that what they think is an integer

972
00:36:38,270 --> 00:36:42,650
is actually an integer and so fuzzing

973
00:36:40,880 --> 00:36:45,350
can be a really easy way to surface bugs

974
00:36:42,650 --> 00:36:47,740
in that handling because frequently if

975
00:36:45,350 --> 00:36:49,700
they're not validating that input

976
00:36:47,740 --> 00:36:53,029
malicious input will just absolutely

977
00:36:49,700 --> 00:36:55,310
crash the app cold so I wrote this

978
00:36:53,030 --> 00:36:56,840
little fuzzer to show that this is

979
00:36:55,310 --> 00:37:00,140
something that we can actually execute

980
00:36:56,840 --> 00:37:01,910
from within frita and manage the whole

981
00:37:00,140 --> 00:37:05,690
process without having to have any

982
00:37:01,910 --> 00:37:08,359
manual interaction with the fuzzing so

983
00:37:05,690 --> 00:37:11,810
this is an example from within that

984
00:37:08,360 --> 00:37:14,000
agent dais that I wrote of a function

985
00:37:11,810 --> 00:37:16,009
called open URL that I wrote and you can

986
00:37:14,000 --> 00:37:18,680
see from the second screenshot that once

987
00:37:16,010 --> 00:37:20,690
it's loaded in the CLI it will

988
00:37:18,680 --> 00:37:22,879
autocomplete that open URL as if it's

989
00:37:20,690 --> 00:37:25,130
any other command or any other you know

990
00:37:22,880 --> 00:37:27,440
objective-c method that were that we're

991
00:37:25,130 --> 00:37:29,030
handling within the CLI so this is an

992
00:37:27,440 --> 00:37:31,160
easy way to add some functionality

993
00:37:29,030 --> 00:37:33,650
that's specific to for instance some iOS

994
00:37:31,160 --> 00:37:35,390
testing that I might want to do I can

995
00:37:33,650 --> 00:37:37,880
just bundle it all in an agent that I

996
00:37:35,390 --> 00:37:39,710
load and voila I have some new

997
00:37:37,880 --> 00:37:45,050
functionality that's available to me in

998
00:37:39,710 --> 00:37:46,400
the CLI another highlight in the URL

999
00:37:45,050 --> 00:37:48,950
scheme fuzzer and I'm not going to go

1000
00:37:46,400 --> 00:37:51,140
over the the entire thing but I do want

1001
00:37:48,950 --> 00:37:53,259
to note you know I mentioned automating

1002
00:37:51,140 --> 00:37:54,970
UI interactions

1003
00:37:53,260 --> 00:37:57,250
get easier to perform certain

1004
00:37:54,970 --> 00:37:59,410
functionality that's more automated and

1005
00:37:57,250 --> 00:38:01,030
here I've got an example of that where I

1006
00:37:59,410 --> 00:38:04,180
define something called home single

1007
00:38:01,030 --> 00:38:05,320
press within my fuzz process one thing I

1008
00:38:04,180 --> 00:38:08,020
wanted to do is as soon as the

1009
00:38:05,320 --> 00:38:10,090
application loaded one of these URLs I

1010
00:38:08,020 --> 00:38:12,040
wanted to make sure that I back rounded

1011
00:38:10,090 --> 00:38:13,540
it before loading the next one so I kind

1012
00:38:12,040 --> 00:38:15,520
of got a clean load where it was for

1013
00:38:13,540 --> 00:38:16,900
grounded every time and I didn't want to

1014
00:38:15,520 --> 00:38:18,120
sit there and click the button because

1015
00:38:16,900 --> 00:38:20,590
that would sort of defeat the purpose

1016
00:38:18,120 --> 00:38:22,420
automation in the first place so with

1017
00:38:20,590 --> 00:38:24,190
home single press what I did is just

1018
00:38:22,420 --> 00:38:27,670
detected what version of iOS I was

1019
00:38:24,190 --> 00:38:29,260
dealing with and then I leaned on an

1020
00:38:27,670 --> 00:38:32,830
objective-c class called SP UI

1021
00:38:29,260 --> 00:38:35,470
controller which has a method that is

1022
00:38:32,830 --> 00:38:37,360
called when you physically click that

1023
00:38:35,470 --> 00:38:39,490
hardware button so I'm just I'm just

1024
00:38:37,360 --> 00:38:42,040
calling the corresponding function as if

1025
00:38:39,490 --> 00:38:44,319
I had clicked the button and to iOS it

1026
00:38:42,040 --> 00:38:46,509
thinks the button was clicked and it

1027
00:38:44,320 --> 00:38:49,150
will behave that way and background the

1028
00:38:46,510 --> 00:38:51,460
application one thing I do want to point

1029
00:38:49,150 --> 00:38:54,820
out here as well is I'm using something

1030
00:38:51,460 --> 00:38:57,160
called obj see that schedule and what

1031
00:38:54,820 --> 00:38:59,140
that's doing you can see I'm wrapping my

1032
00:38:57,160 --> 00:39:01,540
one line of code in a function that I'm

1033
00:38:59,140 --> 00:39:03,549
passing to obj c dot schedule that's

1034
00:39:01,540 --> 00:39:07,450
because i want to ensure that it runs on

1035
00:39:03,550 --> 00:39:10,660
the main queue so using this we can

1036
00:39:07,450 --> 00:39:13,810
specify what Grand Central Dispatch if

1037
00:39:10,660 --> 00:39:17,049
you're familiar with iOS coding we can

1038
00:39:13,810 --> 00:39:19,180
specify what queue it uses I can ensure

1039
00:39:17,050 --> 00:39:21,280
it's the main queue but also I get some

1040
00:39:19,180 --> 00:39:23,890
free memory management along with that

1041
00:39:21,280 --> 00:39:26,140
and a little bit later I'll point out

1042
00:39:23,890 --> 00:39:28,120
how you if you don't want to use obj see

1043
00:39:26,140 --> 00:39:29,830
that schedule how you can do that memory

1044
00:39:28,120 --> 00:39:33,480
management just to ensure that you don't

1045
00:39:29,830 --> 00:39:36,310
run into any issues in your JavaScript

1046
00:39:33,480 --> 00:39:36,670
all right so let's see what this looks

1047
00:39:36,310 --> 00:39:40,150
like

1048
00:39:36,670 --> 00:39:44,080
oops maybe not try that again let's see

1049
00:39:40,150 --> 00:39:48,310
what this looks like in person so here

1050
00:39:44,080 --> 00:39:51,190
I'm going to load my fuzz script right

1051
00:39:48,310 --> 00:39:53,470
here my fuzz command on Etsy because

1052
00:39:51,190 --> 00:39:56,410
Etsy uses URL schemes for deep linking

1053
00:39:53,470 --> 00:39:57,819
so I've selected a particular URL that's

1054
00:39:56,410 --> 00:40:01,029
supposed to point me at a listing and

1055
00:39:57,820 --> 00:40:03,430
I've got a placeholder this is 0 in

1056
00:40:01,030 --> 00:40:05,590
brackets that is just going to be

1057
00:40:03,430 --> 00:40:07,839
replaced by my fuzzer with

1058
00:40:05,590 --> 00:40:09,790
a list of potentially malicious inputs

1059
00:40:07,840 --> 00:40:11,530
and I'm going to check for a crash each

1060
00:40:09,790 --> 00:40:13,330
time but what I want to point out here

1061
00:40:11,530 --> 00:40:14,620
is you can see like this is hands-free I

1062
00:40:13,330 --> 00:40:16,630
can walk away and get a cup of coffee

1063
00:40:14,620 --> 00:40:18,400
and then come back and see if it found

1064
00:40:16,630 --> 00:40:20,320
anything because it's completely doing

1065
00:40:18,400 --> 00:40:22,270
the background of the application

1066
00:40:20,320 --> 00:40:25,810
without me even having to touch the

1067
00:40:22,270 --> 00:40:27,759
device itself so this is pretty handy

1068
00:40:25,810 --> 00:40:30,520
and and just kind of an example of if

1069
00:40:27,760 --> 00:40:32,890
you do have sort of a laborer physically

1070
00:40:30,520 --> 00:40:33,610
labor-intensive area of the application

1071
00:40:32,890 --> 00:40:35,529
where you know there's going to be

1072
00:40:33,610 --> 00:40:39,520
clicking if you can figure out how to do

1073
00:40:35,530 --> 00:40:41,890
that using either the environment the

1074
00:40:39,520 --> 00:40:45,009
way I'm using some spui controller

1075
00:40:41,890 --> 00:40:47,020
methods or using the application itself

1076
00:40:45,010 --> 00:40:51,040
you can save yourself a little bit of

1077
00:40:47,020 --> 00:40:53,080
work and effort there now the script I

1078
00:40:51,040 --> 00:40:54,370
just showed you is posted out on the

1079
00:40:53,080 --> 00:40:57,220
free to co-chair site so you can

1080
00:40:54,370 --> 00:41:00,100
actually try this out yourself and see

1081
00:40:57,220 --> 00:41:02,680
it live free to code share was created

1082
00:41:00,100 --> 00:41:04,990
for the express purpose of giving the

1083
00:41:02,680 --> 00:41:07,120
community a way to very easily pass

1084
00:41:04,990 --> 00:41:09,220
along different code snippets and

1085
00:41:07,120 --> 00:41:10,810
demonstrate different techniques and one

1086
00:41:09,220 --> 00:41:12,609
of the great things is you will also see

1087
00:41:10,810 --> 00:41:14,320
a lot of projects improved upon and

1088
00:41:12,610 --> 00:41:16,600
co-chair in fact I think there's at

1089
00:41:14,320 --> 00:41:20,050
least one or two people who have fort

1090
00:41:16,600 --> 00:41:22,900
the the URL scheme fuzzer with different

1091
00:41:20,050 --> 00:41:24,550
add-ons and improvements so you you get

1092
00:41:22,900 --> 00:41:26,470
a lot of perspective since the same

1093
00:41:24,550 --> 00:41:27,880
kinds of code and figure out a lot of

1094
00:41:26,470 --> 00:41:31,930
different ways to approach the same

1095
00:41:27,880 --> 00:41:34,300
problems so I want to show directly an

1096
00:41:31,930 --> 00:41:37,419
example of using co-chair and how easy

1097
00:41:34,300 --> 00:41:40,510
it is to to load some of this code in

1098
00:41:37,420 --> 00:41:41,980
and try it out without having to really

1099
00:41:40,510 --> 00:41:45,210
muck about in the internals of the code

1100
00:41:41,980 --> 00:41:48,010
so when you use the the - - code share

1101
00:41:45,210 --> 00:41:50,710
flag within frida the script is actually

1102
00:41:48,010 --> 00:41:52,600
downloaded for you and the first time

1103
00:41:50,710 --> 00:41:54,460
through it will ask you to approve it it

1104
00:41:52,600 --> 00:41:56,830
will take a hash of it so that the next

1105
00:41:54,460 --> 00:41:58,930
time you use it if it's changed it can

1106
00:41:56,830 --> 00:42:00,910
notify you and you can go out and check

1107
00:41:58,930 --> 00:42:02,500
out those changes and make sure that

1108
00:42:00,910 --> 00:42:05,290
you're ok with them before you use them

1109
00:42:02,500 --> 00:42:08,830
in your testing and all you have to do

1110
00:42:05,290 --> 00:42:11,080
is pass along the path on Frida's

1111
00:42:08,830 --> 00:42:13,390
co-chair site to the specific script

1112
00:42:11,080 --> 00:42:15,759
that you want so to load the URL scheme

1113
00:42:13,390 --> 00:42:19,190
fuzzing scripts this is what I would use

1114
00:42:15,760 --> 00:42:21,020
as my command line but

1115
00:42:19,190 --> 00:42:24,170
let's let's talk about one other really

1116
00:42:21,020 --> 00:42:25,790
simple co-chair script that I know I use

1117
00:42:24,170 --> 00:42:28,940
quite a bit and I think is very handy

1118
00:42:25,790 --> 00:42:31,430
and that's to bypass SSL pinning on iOS

1119
00:42:28,940 --> 00:42:33,400
now for some background mobile devices

1120
00:42:31,430 --> 00:42:36,529
can be made to trust an arbitrary

1121
00:42:33,400 --> 00:42:39,410
certificate authority as if it's a root

1122
00:42:36,530 --> 00:42:41,180
certificate authority simply by for

1123
00:42:39,410 --> 00:42:43,160
instance downloading a certificate on

1124
00:42:41,180 --> 00:42:45,169
the device and explicitly trusting it or

1125
00:42:43,160 --> 00:42:47,509
sometimes installing a profile to the

1126
00:42:45,170 --> 00:42:48,829
device and trusting it and in this

1127
00:42:47,510 --> 00:42:51,680
fashion this can enable

1128
00:42:48,829 --> 00:42:53,630
man-in-the-middle weaknesses if that

1129
00:42:51,680 --> 00:42:55,328
certificate is malicious and somebody

1130
00:42:53,630 --> 00:42:58,609
can eavesdrop on that traffic

1131
00:42:55,329 --> 00:43:00,349
subsequently using that certificate we

1132
00:42:58,609 --> 00:43:02,180
all know though even without that use

1133
00:43:00,349 --> 00:43:04,569
case SSL and TLS vulnerabilities do

1134
00:43:02,180 --> 00:43:06,618
happen and some of them also enable

1135
00:43:04,569 --> 00:43:08,569
fraudulent certificates that may be

1136
00:43:06,619 --> 00:43:11,900
trusted as if they are not in fact

1137
00:43:08,569 --> 00:43:14,000
fraudulent so mobile apps have a way to

1138
00:43:11,900 --> 00:43:16,130
mitigate the risk from some of these

1139
00:43:14,000 --> 00:43:18,170
issues by pinning known-good

1140
00:43:16,130 --> 00:43:19,609
certificates so as the mobile

1141
00:43:18,170 --> 00:43:22,040
application if I know what the

1142
00:43:19,609 --> 00:43:23,180
certificate from my specific back-end

1143
00:43:22,040 --> 00:43:25,369
API should look like

1144
00:43:23,180 --> 00:43:27,799
whenever I contact that back-end I can

1145
00:43:25,369 --> 00:43:29,599
compare it to what I know about the

1146
00:43:27,800 --> 00:43:31,670
certificate and if there's a mismatch I

1147
00:43:29,599 --> 00:43:33,109
can just refuse to connect now this is

1148
00:43:31,670 --> 00:43:35,630
great for mobile application security

1149
00:43:33,109 --> 00:43:37,549
but it's really kind of annoying for

1150
00:43:35,630 --> 00:43:39,170
mobile application security testers

1151
00:43:37,550 --> 00:43:41,210
because it makes practicing more

1152
00:43:39,170 --> 00:43:44,240
difficult it's one more hurdle that we

1153
00:43:41,210 --> 00:43:46,190
have to to try and scale before we can

1154
00:43:44,240 --> 00:43:48,439
really proxy the application and analyze

1155
00:43:46,190 --> 00:43:53,720
it and so having a quick way to bypass

1156
00:43:48,440 --> 00:43:56,030
this is really crucial an iOS bypassing

1157
00:43:53,720 --> 00:43:57,859
SSL pinning can be performed by

1158
00:43:56,030 --> 00:43:59,630
intercepting the calls at a low level

1159
00:43:57,859 --> 00:44:01,759
that perform that certificate validation

1160
00:43:59,630 --> 00:44:04,790
and those are going to vary depending on

1161
00:44:01,760 --> 00:44:07,190
the iOS version but on iOS 11 in this

1162
00:44:04,790 --> 00:44:09,950
example we want to target a function

1163
00:44:07,190 --> 00:44:10,940
called NW TLS create pure trust and it's

1164
00:44:09,950 --> 00:44:13,040
nice that there's really only one

1165
00:44:10,940 --> 00:44:16,250
function that we have to intercept and

1166
00:44:13,040 --> 00:44:18,529
short-circuit in order to bypass this to

1167
00:44:16,250 --> 00:44:20,960
do this we can use the Interceptor API

1168
00:44:18,530 --> 00:44:23,390
in frida and there's two main ways we

1169
00:44:20,960 --> 00:44:25,790
can do that one is via attach where we

1170
00:44:23,390 --> 00:44:27,589
define an on enter and on leave callback

1171
00:44:25,790 --> 00:44:29,480
and if you're thinking this looks really

1172
00:44:27,589 --> 00:44:31,940
familiar where did I see this before

1173
00:44:29,480 --> 00:44:32,990
it's because that was one of the first

1174
00:44:31,940 --> 00:44:35,150
examples we looked

1175
00:44:32,990 --> 00:44:37,009
at with free to trace and free to trace

1176
00:44:35,150 --> 00:44:39,110
uses the same on enter and on leave

1177
00:44:37,010 --> 00:44:41,420
callbacks but you know for the

1178
00:44:39,110 --> 00:44:43,250
simplicity of it they don't really tell

1179
00:44:41,420 --> 00:44:44,660
you that you're using Interceptor at the

1180
00:44:43,250 --> 00:44:46,400
time even though that's what's going on

1181
00:44:44,660 --> 00:44:48,410
under the hood so you already used it

1182
00:44:46,400 --> 00:44:50,030
you didn't even know it the second way

1183
00:44:48,410 --> 00:44:51,589
that we can use the Interceptor is by a

1184
00:44:50,030 --> 00:44:53,780
replace and that's what we're going to

1185
00:44:51,590 --> 00:44:55,760
want to do and we're short-circuiting a

1186
00:44:53,780 --> 00:44:56,960
function or a method in order to do

1187
00:44:55,760 --> 00:45:00,830
something like what we're doing here

1188
00:44:56,960 --> 00:45:04,160
with bypassing SSL pinning so before we

1189
00:45:00,830 --> 00:45:06,920
can really replace a method we have to

1190
00:45:04,160 --> 00:45:09,200
be able to find it first and to do that

1191
00:45:06,920 --> 00:45:11,510
we can use modules that find export by

1192
00:45:09,200 --> 00:45:13,730
name this is going to return an address

1193
00:45:11,510 --> 00:45:17,810
that we can then use we can wrap it in a

1194
00:45:13,730 --> 00:45:20,119
native function and use that to later on

1195
00:45:17,810 --> 00:45:21,410
replace it in the Interceptor so this

1196
00:45:20,119 --> 00:45:24,740
little in this little snippet of code

1197
00:45:21,410 --> 00:45:27,020
below is just us in creating a variable

1198
00:45:24,740 --> 00:45:30,649
called TLS helper create pure trust and

1199
00:45:27,020 --> 00:45:33,170
we're using that to create a new native

1200
00:45:30,650 --> 00:45:34,400
function and the first argument to that

1201
00:45:33,170 --> 00:45:36,710
native function is going to be the

1202
00:45:34,400 --> 00:45:38,990
address of the function so we're using

1203
00:45:36,710 --> 00:45:41,090
module find export by name to find that

1204
00:45:38,990 --> 00:45:43,040
address and all we have to do is tell it

1205
00:45:41,090 --> 00:45:45,440
the name of the function we want to find

1206
00:45:43,040 --> 00:45:46,910
and in this case the name of the

1207
00:45:45,440 --> 00:45:49,550
function is pretty unique I'm not

1208
00:45:46,910 --> 00:45:52,069
worried about it being found in multiple

1209
00:45:49,550 --> 00:45:53,420
places so I don't even bother to tell it

1210
00:45:52,070 --> 00:45:55,010
that it's in a particular library but

1211
00:45:53,420 --> 00:45:56,930
that is something that we can do we can

1212
00:45:55,010 --> 00:45:59,300
specify where that function will be

1213
00:45:56,930 --> 00:46:01,190
found or we can pass null if we think it

1214
00:45:59,300 --> 00:46:03,920
there's only going to be one instance of

1215
00:46:01,190 --> 00:46:06,470
it and then enter for a native function

1216
00:46:03,920 --> 00:46:08,840
definition we're telling it first of all

1217
00:46:06,470 --> 00:46:11,209
it returns an int and it takes three

1218
00:46:08,840 --> 00:46:13,280
arguments that are a pointer a bool and

1219
00:46:11,210 --> 00:46:15,590
a pointer and that way our native

1220
00:46:13,280 --> 00:46:17,119
function will mirror the actual

1221
00:46:15,590 --> 00:46:20,390
definition of the function that we're

1222
00:46:17,119 --> 00:46:22,040
pointing to so now we want to replace it

1223
00:46:20,390 --> 00:46:24,500
and we'll use interceptor that replace

1224
00:46:22,040 --> 00:46:26,570
to do that it takes two arguments the

1225
00:46:24,500 --> 00:46:28,580
first is that that target that we just

1226
00:46:26,570 --> 00:46:30,890
created that pointer to our original

1227
00:46:28,580 --> 00:46:33,049
function and then we're gonna create a

1228
00:46:30,890 --> 00:46:34,700
native callback as a replacement and the

1229
00:46:33,050 --> 00:46:36,830
native callback is just a wrapper around

1230
00:46:34,700 --> 00:46:39,290
the JavaScript function that we want to

1231
00:46:36,830 --> 00:46:41,390
replace it and it's going to look kind

1232
00:46:39,290 --> 00:46:42,859
of similar the way it's constructed to

1233
00:46:41,390 --> 00:46:46,640
the native function that we just created

1234
00:46:42,859 --> 00:46:47,000
so in this is the bulk of our SSL bypass

1235
00:46:46,640 --> 00:46:49,339
it's

1236
00:46:47,000 --> 00:46:51,530
very short and simple we're gonna use

1237
00:46:49,340 --> 00:46:53,750
interceptor that replace we're going to

1238
00:46:51,530 --> 00:46:55,430
pass it the handle that points to our

1239
00:46:53,750 --> 00:46:57,410
original function that we want to

1240
00:46:55,430 --> 00:47:00,399
replace and then we're creating this

1241
00:46:57,410 --> 00:47:02,930
native callback we're passing it the

1242
00:47:00,400 --> 00:47:04,760
JavaScript function that we want to use

1243
00:47:02,930 --> 00:47:06,319
as the replacement and that's really

1244
00:47:04,760 --> 00:47:08,570
just one line we're just returning an

1245
00:47:06,320 --> 00:47:12,680
error code that indicates success so

1246
00:47:08,570 --> 00:47:14,300
when iOS gets this this return code it's

1247
00:47:12,680 --> 00:47:16,160
gonna say oh everything's fine

1248
00:47:14,300 --> 00:47:17,390
nothing to see here we're all good and

1249
00:47:16,160 --> 00:47:19,640
that's exactly what we want to happen

1250
00:47:17,390 --> 00:47:22,540
and then we're also telling our callback

1251
00:47:19,640 --> 00:47:25,040
that our function returns an int and

1252
00:47:22,540 --> 00:47:27,320
takes a pointer bool and pointer which

1253
00:47:25,040 --> 00:47:28,790
corresponds to these three arguments so

1254
00:47:27,320 --> 00:47:30,740
it's going to have the same signature as

1255
00:47:28,790 --> 00:47:32,420
our original function and then we're

1256
00:47:30,740 --> 00:47:35,720
just logging a quick message so that we

1257
00:47:32,420 --> 00:47:37,220
know our script is working now this is

1258
00:47:35,720 --> 00:47:39,709
something you can try for yourself as

1259
00:47:37,220 --> 00:47:42,020
well out on free to co-chair even though

1260
00:47:39,710 --> 00:47:45,140
it says iOS 10 SSL bypass it will work

1261
00:47:42,020 --> 00:47:47,030
both on 10 and 11 I've been kind of

1262
00:47:45,140 --> 00:47:50,029
adding code to it so that it's

1263
00:47:47,030 --> 00:47:52,310
compatible with additional versions and

1264
00:47:50,030 --> 00:47:53,570
the nice thing is not only we you if you

1265
00:47:52,310 --> 00:47:55,970
go to this URL you'll get the full

1266
00:47:53,570 --> 00:47:58,700
source code but you will also get a hint

1267
00:47:55,970 --> 00:48:01,899
as to how to run it on your specific

1268
00:47:58,700 --> 00:48:04,640
applications there's no guesswork here

1269
00:48:01,900 --> 00:48:06,860
so let's real quick just look at how

1270
00:48:04,640 --> 00:48:08,690
this works so here I'm practicing my

1271
00:48:06,860 --> 00:48:10,270
device and I've loaded the App Store and

1272
00:48:08,690 --> 00:48:13,010
the App Store is not being cooperative

1273
00:48:10,270 --> 00:48:15,110
it does not want to use that proxy

1274
00:48:13,010 --> 00:48:18,560
because it knows that it's not the right

1275
00:48:15,110 --> 00:48:22,600
back-end so I'm just gonna invoke my SSL

1276
00:48:18,560 --> 00:48:25,670
bypass and refresh and just like that

1277
00:48:22,600 --> 00:48:27,410
now I can get through my proxy it will

1278
00:48:25,670 --> 00:48:31,310
send the traffic very happily and think

1279
00:48:27,410 --> 00:48:33,710
that everything is just fine so that's a

1280
00:48:31,310 --> 00:48:36,290
pretty great output for just a small

1281
00:48:33,710 --> 00:48:39,040
amount of code and I can use this on

1282
00:48:36,290 --> 00:48:42,140
pretty much any application for iOS 11

1283
00:48:39,040 --> 00:48:43,850
that is attempting to use certificate

1284
00:48:42,140 --> 00:48:45,440
pinning and I'll be honest I don't think

1285
00:48:43,850 --> 00:48:50,930
I've ever hit one yet where it has not

1286
00:48:45,440 --> 00:48:53,750
worked all right I have one more thing I

1287
00:48:50,930 --> 00:48:55,970
want to talk about with our last few

1288
00:48:53,750 --> 00:48:57,920
remaining minutes and that's brighting

1289
00:48:55,970 --> 00:49:00,109
standalone tools so far everything we've

1290
00:48:57,920 --> 00:49:00,980
looked at has used either free to trace

1291
00:49:00,110 --> 00:49:05,390
or the free to see

1292
00:49:00,980 --> 00:49:07,880
I for an assist and there are times when

1293
00:49:05,390 --> 00:49:11,480
that's just not gonna be enough it's not

1294
00:49:07,880 --> 00:49:13,190
gonna be a good fit for the use case one

1295
00:49:11,480 --> 00:49:15,290
example is if you have a non interactive

1296
00:49:13,190 --> 00:49:16,580
tool you could load it in the CLI if

1297
00:49:15,290 --> 00:49:19,040
it's completely contained within

1298
00:49:16,580 --> 00:49:20,360
JavaScript but you don't really need to

1299
00:49:19,040 --> 00:49:22,430
because again you're not interacting

1300
00:49:20,360 --> 00:49:24,740
with it and the CLI is interactive so

1301
00:49:22,430 --> 00:49:27,020
it's not necessary but there also might

1302
00:49:24,740 --> 00:49:30,020
be more complex needs that you need to

1303
00:49:27,020 --> 00:49:32,810
address you might want to analyze some

1304
00:49:30,020 --> 00:49:35,480
data coming from your JavaScript that's

1305
00:49:32,810 --> 00:49:37,910
running on your device and then write

1306
00:49:35,480 --> 00:49:39,440
some of that out to a file on your host

1307
00:49:37,910 --> 00:49:41,690
computer on your laptop that's not

1308
00:49:39,440 --> 00:49:44,570
something that's easy to address using

1309
00:49:41,690 --> 00:49:46,010
the free to CLI out-of-the-box you also

1310
00:49:44,570 --> 00:49:47,750
might want to pipe some input from

1311
00:49:46,010 --> 00:49:48,920
another process for instance maybe you

1312
00:49:47,750 --> 00:49:51,410
want to run a fuzzer

1313
00:49:48,920 --> 00:49:53,810
to generate some data or something like

1314
00:49:51,410 --> 00:49:56,899
maybe resumes to generate some data that

1315
00:49:53,810 --> 00:49:59,390
then you pipe into the JavaScript that

1316
00:49:56,900 --> 00:50:02,570
is running on your device to perform

1317
00:49:59,390 --> 00:50:04,310
some kind of fuzzing function and again

1318
00:50:02,570 --> 00:50:07,460
that's not really something that the CLI

1319
00:50:04,310 --> 00:50:08,180
is set up to address so this is where

1320
00:50:07,460 --> 00:50:11,000
you might want to write your own

1321
00:50:08,180 --> 00:50:12,770
standalone tool and just to recap you

1322
00:50:11,000 --> 00:50:14,270
can do this in Python you can do it in

1323
00:50:12,770 --> 00:50:15,740
node you can do it in Swift you can do

1324
00:50:14,270 --> 00:50:18,259
it in that there's there's all of these

1325
00:50:15,740 --> 00:50:20,149
language bindings and supported so that

1326
00:50:18,260 --> 00:50:23,810
you can pick the one that you're most

1327
00:50:20,150 --> 00:50:25,130
comfortable with to write your tool now

1328
00:50:23,810 --> 00:50:26,840
there's some elements of a standalone

1329
00:50:25,130 --> 00:50:28,730
tool you have to think about that you

1330
00:50:26,840 --> 00:50:30,740
don't when you're using the CLI because

1331
00:50:28,730 --> 00:50:32,720
they're kind of taken care of for you

1332
00:50:30,740 --> 00:50:34,040
for instance when you're writing your

1333
00:50:32,720 --> 00:50:35,990
own tool you have to attach to the

1334
00:50:34,040 --> 00:50:37,790
process yourself you have to take care

1335
00:50:35,990 --> 00:50:40,669
of injecting the stripped and sending

1336
00:50:37,790 --> 00:50:42,200
information to and from the script from

1337
00:50:40,670 --> 00:50:43,400
your client and these are things that

1338
00:50:42,200 --> 00:50:44,990
you don't really have to worry much

1339
00:50:43,400 --> 00:50:48,050
about when you're just using free to

1340
00:50:44,990 --> 00:50:50,330
trace or the CLI but it's it's not

1341
00:50:48,050 --> 00:50:52,610
terribly difficult to do that and I'm

1342
00:50:50,330 --> 00:50:54,950
going to show an example of doing some

1343
00:50:52,610 --> 00:50:56,780
of this just with Python so if you want

1344
00:50:54,950 --> 00:50:58,939
to attach to free to over USB you can

1345
00:50:56,780 --> 00:51:01,130
just use free to get USB device that

1346
00:50:58,940 --> 00:51:03,770
attach and pass the name of your process

1347
00:51:01,130 --> 00:51:06,230
to it that will give you back a session

1348
00:51:03,770 --> 00:51:09,320
that session can then be used to create

1349
00:51:06,230 --> 00:51:11,690
your scripts using a source of your

1350
00:51:09,320 --> 00:51:14,690
script basically just the the JavaScript

1351
00:51:11,690 --> 00:51:16,430
string that comprises your script

1352
00:51:14,690 --> 00:51:19,579
and then use that script object that's

1353
00:51:16,430 --> 00:51:21,680
returned to create a message handler for

1354
00:51:19,579 --> 00:51:23,510
any data that's coming back from the

1355
00:51:21,680 --> 00:51:25,279
scripts to your client and then you

1356
00:51:23,510 --> 00:51:27,650
script that load to load it and inject

1357
00:51:25,280 --> 00:51:29,359
it into your process so that's not too

1358
00:51:27,650 --> 00:51:32,990
much code it's fairly straightforward

1359
00:51:29,359 --> 00:51:35,060
and simple but what if you want to call

1360
00:51:32,990 --> 00:51:37,430
some specific functionality from your

1361
00:51:35,060 --> 00:51:39,440
client script that resides in the

1362
00:51:37,430 --> 00:51:41,779
JavaScript that's injected in your

1363
00:51:39,440 --> 00:51:44,960
device well for this Freda provides our

1364
00:51:41,780 --> 00:51:46,819
PC exports so in my JavaScript if

1365
00:51:44,960 --> 00:51:49,310
there's some functionality that I want

1366
00:51:46,819 --> 00:51:52,339
to expose to my client I can use our PC

1367
00:51:49,310 --> 00:51:55,250
exports and then define a function name

1368
00:51:52,339 --> 00:51:57,740
and set my function definition to that

1369
00:51:55,250 --> 00:52:00,079
and then in my Python script I can call

1370
00:51:57,740 --> 00:52:01,930
that using script that's that script

1371
00:52:00,079 --> 00:52:05,569
handle that we had just received back

1372
00:52:01,930 --> 00:52:08,089
script exports that whatever my function

1373
00:52:05,569 --> 00:52:10,550
name is and then pass my input so this

1374
00:52:08,089 --> 00:52:12,230
is enabling some of that bi-directional

1375
00:52:10,550 --> 00:52:15,170
communication but also enabling us to

1376
00:52:12,230 --> 00:52:19,190
invoke specific functionality in our

1377
00:52:15,170 --> 00:52:21,349
client whenever we want to so this is

1378
00:52:19,190 --> 00:52:23,089
sort of a working process that I've been

1379
00:52:21,349 --> 00:52:25,760
working on in my spare time and that's

1380
00:52:23,089 --> 00:52:27,500
an iOS class number on iOS the

1381
00:52:25,760 --> 00:52:29,270
objective-c runtime has quite a bit of

1382
00:52:27,500 --> 00:52:31,490
information and free to provide some of

1383
00:52:29,270 --> 00:52:33,410
that to us for free by letting us see

1384
00:52:31,490 --> 00:52:35,359
the list of objective-c classes that are

1385
00:52:33,410 --> 00:52:36,740
loaded and some of the attributes of

1386
00:52:35,359 --> 00:52:38,328
that but I wanted to try and get

1387
00:52:36,740 --> 00:52:40,160
something a little more complex that

1388
00:52:38,329 --> 00:52:42,800
mirrors some of the class numbers that

1389
00:52:40,160 --> 00:52:44,779
are available from other providers so I

1390
00:52:42,800 --> 00:52:48,440
decided to see if I could do this using

1391
00:52:44,780 --> 00:52:50,119
frida so within the script I have just a

1392
00:52:48,440 --> 00:52:52,849
class dunk that j/s that does a lot of

1393
00:52:50,119 --> 00:52:55,550
the on device functionality and I just

1394
00:52:52,849 --> 00:52:56,960
read that script in create my script and

1395
00:52:55,550 --> 00:52:58,160
then I have a message handler that I

1396
00:52:56,960 --> 00:53:00,710
kind of wanted to show you so you can

1397
00:52:58,160 --> 00:53:02,629
see what the message handler can look

1398
00:53:00,710 --> 00:53:05,240
like my message handler is just a

1399
00:53:02,630 --> 00:53:07,010
function that looks at first of all what

1400
00:53:05,240 --> 00:53:10,399
type of message is it that I'm receiving

1401
00:53:07,010 --> 00:53:12,530
from from my embedded JavaScript so if

1402
00:53:10,400 --> 00:53:14,359
it's a type of send I know I want to

1403
00:53:12,530 --> 00:53:17,119
look at it and then I check the payload

1404
00:53:14,359 --> 00:53:18,230
if the payload is a dictionary then I

1405
00:53:17,119 --> 00:53:19,790
can be pretty certain that it's

1406
00:53:18,230 --> 00:53:22,700
something that my script created that I

1407
00:53:19,790 --> 00:53:24,259
need to to further process and then I'll

1408
00:53:22,700 --> 00:53:26,299
open a file this is a file that's

1409
00:53:24,260 --> 00:53:28,130
written to you know for instance my labs

1410
00:53:26,300 --> 00:53:30,950
have my local computer

1411
00:53:28,130 --> 00:53:32,600
and I will name it first the directory

1412
00:53:30,950 --> 00:53:34,790
will be named after my application

1413
00:53:32,600 --> 00:53:36,440
process name and then I'll have a class

1414
00:53:34,790 --> 00:53:38,779
name embedded in my payload that I'll

1415
00:53:36,440 --> 00:53:41,180
use to create the file name and then

1416
00:53:38,780 --> 00:53:45,190
I'll just write the contents of the

1417
00:53:41,180 --> 00:53:48,169
payload dump to that particular file and

1418
00:53:45,190 --> 00:53:50,000
that's really the bulk of what the

1419
00:53:48,170 --> 00:53:52,400
Python client has to do but what about

1420
00:53:50,000 --> 00:53:54,290
the Java scripts now this is not the

1421
00:53:52,400 --> 00:53:55,580
whole class dump it's it's pretty long I

1422
00:53:54,290 --> 00:53:57,770
didn't want to bore you with all the

1423
00:53:55,580 --> 00:53:59,569
details of that but this is the

1424
00:53:57,770 --> 00:54:02,360
functionality the RPC that exports

1425
00:53:59,570 --> 00:54:04,790
functionality that I am exposing to my

1426
00:54:02,360 --> 00:54:07,190
Python it's called dump bundle now

1427
00:54:04,790 --> 00:54:08,990
remember I talked before about objc that

1428
00:54:07,190 --> 00:54:11,120
schedule and how it does some free

1429
00:54:08,990 --> 00:54:13,790
memory management for us when we use it

1430
00:54:11,120 --> 00:54:16,970
I'm not using that here so I need to do

1431
00:54:13,790 --> 00:54:19,730
that memory management he's manually so

1432
00:54:16,970 --> 00:54:22,609
whenever you do objective-c

1433
00:54:19,730 --> 00:54:24,770
work in frida and you're not scheduling

1434
00:54:22,610 --> 00:54:27,470
it you definitely want to create an

1435
00:54:24,770 --> 00:54:29,090
autorelease pool and alloc init it at

1436
00:54:27,470 --> 00:54:31,549
the beginning of your function and then

1437
00:54:29,090 --> 00:54:33,650
I use a finally block here to release it

1438
00:54:31,550 --> 00:54:35,870
at the end and that's just making sure

1439
00:54:33,650 --> 00:54:37,460
that that all that memory management

1440
00:54:35,870 --> 00:54:40,279
stuff is straight and that I'm not gonna

1441
00:54:37,460 --> 00:54:44,060
encounter any issues because I'm lacking

1442
00:54:40,280 --> 00:54:47,870
those two lines of code and then the the

1443
00:54:44,060 --> 00:54:50,120
block here I'm leaning on the objc dot

1444
00:54:47,870 --> 00:54:51,770
classes that frida provides to iterate

1445
00:54:50,120 --> 00:54:54,080
all through the different class names

1446
00:54:51,770 --> 00:54:55,580
that are available and then see if they

1447
00:54:54,080 --> 00:54:57,140
are in the main bundle for my

1448
00:54:55,580 --> 00:54:58,670
application or not because I only want

1449
00:54:57,140 --> 00:55:00,410
to dump what's in the main bundle and

1450
00:54:58,670 --> 00:55:02,600
not all the other loaded frameworks and

1451
00:55:00,410 --> 00:55:04,670
libraries and then I'll just pass it to

1452
00:55:02,600 --> 00:55:08,089
another function dump class that will

1453
00:55:04,670 --> 00:55:09,890
analyze and gather all the data from

1454
00:55:08,090 --> 00:55:12,290
that class that I need but what I want

1455
00:55:09,890 --> 00:55:13,759
to point out here is that within this

1456
00:55:12,290 --> 00:55:17,720
function I am loops

1457
00:55:13,760 --> 00:55:20,870
I'm calling send and send is what is

1458
00:55:17,720 --> 00:55:23,750
constructing that JSON object that is

1459
00:55:20,870 --> 00:55:25,670
serialized and sent out to my Python

1460
00:55:23,750 --> 00:55:28,540
client that contains my class name and

1461
00:55:25,670 --> 00:55:32,450
all of the information that I've dumped

1462
00:55:28,540 --> 00:55:35,150
so if I execute the script against ebia

1463
00:55:32,450 --> 00:55:36,799
I have a nice message that that is

1464
00:55:35,150 --> 00:55:39,620
printed to the console telling me what

1465
00:55:36,800 --> 00:55:41,029
class I've dumped and then afterwards I

1466
00:55:39,620 --> 00:55:42,769
can check that DB is

1467
00:55:41,029 --> 00:55:45,079
older that was created by the script and

1468
00:55:42,769 --> 00:55:47,808
I can see all the header files that were

1469
00:55:45,079 --> 00:55:50,599
generated by my scripts so this is just

1470
00:55:47,809 --> 00:55:52,009
a nice example of what you can do with a

1471
00:55:50,599 --> 00:55:55,189
standalone script some of the

1472
00:55:52,009 --> 00:55:58,429
functionality that that you can take

1473
00:55:55,189 --> 00:56:00,229
beyond what the CLI can do for you

1474
00:55:58,429 --> 00:56:02,239
and you're still building on top of

1475
00:56:00,229 --> 00:56:04,519
Frida you still get all of that free

1476
00:56:02,239 --> 00:56:06,589
information that Frida provides but now

1477
00:56:04,519 --> 00:56:09,019
you can customize some of the output and

1478
00:56:06,589 --> 00:56:12,549
some of the functionality that occurs on

1479
00:56:09,019 --> 00:56:15,169
your host computer a little more closely

1480
00:56:12,549 --> 00:56:18,559
alright so I hope that I have given you

1481
00:56:15,169 --> 00:56:20,359
just enough information to be dangerous

1482
00:56:18,559 --> 00:56:22,489
and I hope that you want to learn more

1483
00:56:20,359 --> 00:56:24,949
about Frida if you do please do visit

1484
00:56:22,489 --> 00:56:27,140
their website at Frida dot R II and

1485
00:56:24,949 --> 00:56:29,329
highly recommend visiting the codeshare

1486
00:56:27,140 --> 00:56:30,529
site and trying out some of the examples

1487
00:56:29,329 --> 00:56:32,359
there and looking through some of the

1488
00:56:30,529 --> 00:56:35,059
codes to get an idea of what you can do

1489
00:56:32,359 --> 00:56:37,489
with Rita I also would say if you're new

1490
00:56:35,059 --> 00:56:39,529
to Frida head out to the awesome Frida

1491
00:56:37,489 --> 00:56:42,199
repository on github because this has

1492
00:56:39,529 --> 00:56:44,839
not only some code samples and pointers

1493
00:56:42,199 --> 00:56:46,759
but lots of blog posts video

1494
00:56:44,839 --> 00:56:49,119
walkthroughs and talks that have been

1495
00:56:46,759 --> 00:56:51,469
given on Frida and this will give you

1496
00:56:49,119 --> 00:56:54,289
just a great idea of what the

1497
00:56:51,469 --> 00:56:56,869
possibilities are using Frida in your

1498
00:56:54,289 --> 00:56:59,089
own bug hunting work so thank you very

1499
00:56:56,869 --> 00:57:01,339
much I think we have a couple of minutes

1500
00:56:59,089 --> 00:57:06,259
maybe four questions we'll see what pops

1501
00:57:01,339 --> 00:57:09,679
up holy moly that was an awesome talk

1502
00:57:06,259 --> 00:57:11,509
thanks doc thank you I was amazing I

1503
00:57:09,679 --> 00:57:13,939
remember when we were doing the mold

1504
00:57:11,509 --> 00:57:15,829
stuff that a lot of those things were

1505
00:57:13,939 --> 00:57:18,169
problematic because the tool set was so

1506
00:57:15,829 --> 00:57:19,819
diverse and spread out and gluing it

1507
00:57:18,169 --> 00:57:22,129
together on the command line of the

1508
00:57:19,819 --> 00:57:23,869
broken device and it was an iterative as

1509
00:57:22,130 --> 00:57:27,079
also fixes a lot of those problems to

1510
00:57:23,869 --> 00:57:27,979
have the Frida tool wrap all that around

1511
00:57:27,079 --> 00:57:29,659
and you can make your own custom

1512
00:57:27,979 --> 00:57:32,448
function to stuff like that yeah

1513
00:57:29,659 --> 00:57:34,640
absolutely and I've replaced honestly a

1514
00:57:32,449 --> 00:57:36,650
lot of those little standalone command

1515
00:57:34,640 --> 00:57:39,739
line tools with equivalent functionality

1516
00:57:36,650 --> 00:57:42,039
from Frida for that very reason very

1517
00:57:39,739 --> 00:57:42,039
cool

1518
00:57:46,530 --> 00:57:59,730
yeah you did a good job everyone in chat

1519
00:57:49,690 --> 00:58:01,330
is a big fan to say yeah any questions

1520
00:57:59,730 --> 00:58:03,730
out there

1521
00:58:01,330 --> 00:58:05,470
I know I've blasted a fire hose of

1522
00:58:03,730 --> 00:58:09,670
information at everyone so they may be

1523
00:58:05,470 --> 00:58:13,450
just stunned trying to try to absorb all

1524
00:58:09,670 --> 00:58:17,800
of it we'll give it a little bit there's

1525
00:58:13,450 --> 00:58:22,540
like a 20 30 second delay so see if

1526
00:58:17,800 --> 00:58:25,690
anyone comes in with a question but we

1527
00:58:22,540 --> 00:58:29,980
might be good to go cuz um we're running

1528
00:58:25,690 --> 00:58:32,410
winding down on the hour and we'll have

1529
00:58:29,980 --> 00:58:34,890
our next speaker in about a minute or so

1530
00:58:32,410 --> 00:58:37,210
so it looks like you did a great job

1531
00:58:34,890 --> 00:58:39,910
filling up the timing and with your

1532
00:58:37,210 --> 00:58:41,800
content was awesome thank you so much if

1533
00:58:39,910 --> 00:58:44,589
anybody thinks of questions later you

1534
00:58:41,800 --> 00:58:47,080
can absolutely hit me up on Twitter it's

1535
00:58:44,590 --> 00:58:48,880
just my name all smushed together so I'm

1536
00:58:47,080 --> 00:58:50,259
pretty easy to find and I dab salutely

1537
00:58:48,880 --> 00:58:52,630
love to answer your questions if you

1538
00:58:50,260 --> 00:58:54,370
think of anything after the fact yeah

1539
00:58:52,630 --> 00:58:57,280
with the bugcrowd Twitter account

1540
00:58:54,370 --> 00:58:58,839
tweeted out your Twitter handle at the

1541
00:58:57,280 --> 00:59:01,270
beginning of your talk so if you're

1542
00:58:58,840 --> 00:59:02,950
watching this and looking for her

1543
00:59:01,270 --> 00:59:07,390
Twitter handle just check the bugcrowd

1544
00:59:02,950 --> 00:59:08,710
twitter alright well thank you so much

1545
00:59:07,390 --> 00:59:13,500
Don I appreciate it

1546
00:59:08,710 --> 00:59:13,500
I flip over and we turn on them

