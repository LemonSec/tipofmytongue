1
00:00:06,220 --> 00:00:12,290
hello everyone<font color="#E5E5E5"> this is pronounced Erica</font>

2
00:00:09,290 --> 00:00:15,739
and welcome to this talk on hacking or

3
00:00:12,290 --> 00:00:18,230
2.0 for fun and profit<font color="#CCCCCC"> we can get</font>

4
00:00:15,740 --> 00:00:20,960
<font color="#E5E5E5">started right</font><font color="#CCCCCC"> away but</font><font color="#E5E5E5"> I'd like to take</font>

5
00:00:18,230 --> 00:00:24,140
a moment to thank you<font color="#E5E5E5"> all</font><font color="#CCCCCC"> for your time</font>

6
00:00:20,960 --> 00:00:26,720
<font color="#CCCCCC">and being</font><font color="#E5E5E5"> here today</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> I'd like</font>

7
00:00:24,140 --> 00:00:29,689
<font color="#E5E5E5">to thank</font><font color="#CCCCCC"> backgroud for organizing this</font>

8
00:00:26,720 --> 00:00:34,370
level<font color="#CCCCCC"> up virtual hacking conference so</font>

9
00:00:29,689 --> 00:00:38,840
let's get started<font color="#CCCCCC"> so little bit about</font>

10
00:00:34,370 --> 00:00:41,570
<font color="#E5E5E5">myself I am pronoun Carrera</font><font color="#CCCCCC"> and I am an</font>

11
00:00:38,840 --> 00:00:44,539
active bird hunter<font color="#CCCCCC"> I am in top ten of</font>

12
00:00:41,570 --> 00:00:47,109
<font color="#E5E5E5">Facebook white hats</font><font color="#CCCCCC"> some of my popular</font>

13
00:00:44,539 --> 00:00:49,820
<font color="#E5E5E5">bucks on Facebook which I am proud of</font>

14
00:00:47,109 --> 00:00:52,960
<font color="#E5E5E5">deleting any video from Facebook which</font>

15
00:00:49,820 --> 00:00:55,670
allowed me to take<font color="#CCCCCC"> down anyone's video</font>

16
00:00:52,960 --> 00:00:59,629
Facebook ordered me an awesome bounty

17
00:00:55,670 --> 00:01:02,239
for that you can check it<font color="#CCCCCC"> on</font><font color="#E5E5E5"> my blog so</font>

18
00:00:59,629 --> 00:01:04,670
<font color="#CCCCCC">I actively participate on bug bounty</font>

19
00:01:02,239 --> 00:01:07,100
programs<font color="#E5E5E5"> managed by bugcrowd</font><font color="#CCCCCC"> hacker one</font>

20
00:01:04,670 --> 00:01:10,970
<font color="#CCCCCC">cynic and other independent</font><font color="#E5E5E5"> programs</font>

21
00:01:07,100 --> 00:01:12,020
like Facebook Google so I'm a bug hunter

22
00:01:10,970 --> 00:01:14,420
by heart

23
00:01:12,020 --> 00:01:17,000
I'd like like to add that<font color="#CCCCCC"> I have</font>

24
00:01:14,420 --> 00:01:19,310
transitioned from part-time bug<font color="#CCCCCC"> bounties</font>

25
00:01:17,000 --> 00:01:21,920
to<font color="#E5E5E5"> full-time bug bounty so I have</font>

26
00:01:19,310 --> 00:01:24,170
<font color="#E5E5E5">experienced part-time bug bounty as a</font>

27
00:01:21,920 --> 00:01:27,500
student<font color="#E5E5E5"> where you manage your school</font>

28
00:01:24,170 --> 00:01:30,740
<font color="#CCCCCC">plus bug bounty I also know how it has</font>

29
00:01:27,500 --> 00:01:33,500
to be part to do part-time bug bounty

30
00:01:30,740 --> 00:01:35,500
with a<font color="#E5E5E5"> full-time job also after</font>

31
00:01:33,500 --> 00:01:38,660
everything I have transitioned to

32
00:01:35,500 --> 00:01:42,800
full-time bug bounty so I did all<font color="#E5E5E5"> this</font>

33
00:01:38,660 --> 00:01:44,840
in past four years<font color="#E5E5E5"> so over the time I</font>

34
00:01:42,800 --> 00:01:47,390
have developed some methodologies which

35
00:01:44,840 --> 00:01:50,210
I used to<font color="#E5E5E5"> find bugs and any companies</font>

36
00:01:47,390 --> 00:01:53,060
like Facebook or<font color="#E5E5E5"> snapchat or slack or</font>

37
00:01:50,210 --> 00:01:55,820
Shopify etc I've been very consistent

38
00:01:53,060 --> 00:01:58,940
doing bug bounties and managing<font color="#E5E5E5"> all</font><font color="#CCCCCC"> my</font>

39
00:01:55,820 --> 00:02:01,580
other things<font color="#CCCCCC"> all my daily</font><font color="#E5E5E5"> routine apart</font>

40
00:01:58,940 --> 00:02:04,550
<font color="#E5E5E5">from this I have a master's degree in</font>

41
00:02:01,580 --> 00:02:07,190
<font color="#CCCCCC">cyber security then I have also</font><font color="#E5E5E5"> worked</font>

42
00:02:04,550 --> 00:02:10,758
at NCC group and<font color="#E5E5E5"> their</font><font color="#CCCCCC"> New York City's</font>

43
00:02:07,190 --> 00:02:13,819
office<font color="#E5E5E5"> currently I am a full-time bug</font>

44
00:02:10,758 --> 00:02:16,910
hunter and I run<font color="#CCCCCC"> paratis InfoSec and</font>

45
00:02:13,819 --> 00:02:19,739
<font color="#CCCCCC">thus I manage the training section</font><font color="#E5E5E5"> whose</font>

46
00:02:16,910 --> 00:02:22,799
ultimate<font color="#CCCCCC"> aim is to</font><font color="#E5E5E5"> help bug hunters</font>

47
00:02:19,740 --> 00:02:25,710
so I also helped<font color="#E5E5E5"> on bug bounty world</font>

48
00:02:22,800 --> 00:02:27,240
<font color="#E5E5E5">which is community of bug hunters</font><font color="#CCCCCC"> if you</font>

49
00:02:25,710 --> 00:02:33,330
are not already<font color="#CCCCCC"> there</font>

50
00:02:27,240 --> 00:02:36,210
please join it<font color="#E5E5E5"> so let's move on so my</font>

51
00:02:33,330 --> 00:02:38,820
aim for the stalkers<font color="#E5E5E5"> bug hunters want to</font>

52
00:02:36,210 --> 00:02:41,400
find bugs and then get get paid for

53
00:02:38,820 --> 00:02:44,609
helping the company secure the products

54
00:02:41,400 --> 00:02:48,180
for this bug hunters need<font color="#E5E5E5"> right</font>

55
00:02:44,610 --> 00:02:49,830
techniques to find valid bugs today<font color="#E5E5E5"> I am</font>

56
00:02:48,180 --> 00:02:52,920
going<font color="#E5E5E5"> to walk you</font><font color="#CCCCCC"> through techniques</font>

57
00:02:49,830 --> 00:02:55,950
which I used to<font color="#E5E5E5"> pen test any third party</font>

58
00:02:52,920 --> 00:02:57,899
<font color="#CCCCCC">o'the integrations</font><font color="#E5E5E5"> in a website</font><font color="#CCCCCC"> and you</font>

59
00:02:55,950 --> 00:03:03,859
<font color="#E5E5E5">can follow the same techniques and find</font>

60
00:02:57,900 --> 00:03:03,860
<font color="#E5E5E5">similar bugs so let's get started</font>

61
00:03:04,850 --> 00:03:10,859
today's agenda is I will<font color="#E5E5E5"> first walk you</font>

62
00:03:07,770 --> 00:03:13,290
through history of<font color="#E5E5E5"> earth and we'll learn</font>

63
00:03:10,860 --> 00:03:15,900
some basics<font color="#E5E5E5"> about it then</font><font color="#CCCCCC"> we will</font>

64
00:03:13,290 --> 00:03:18,600
explore different attacks on or 2.0

65
00:03:15,900 --> 00:03:21,270
integrations which<font color="#CCCCCC"> you will include a</font>

66
00:03:18,600 --> 00:03:23,250
technique which is supported<font color="#E5E5E5"> by a case</font>

67
00:03:21,270 --> 00:03:29,090
study of a real bug which I have<font color="#E5E5E5"> found</font>

68
00:03:23,250 --> 00:03:34,500
on real targets<font color="#E5E5E5"> so let's jump into it</font>

69
00:03:29,090 --> 00:03:38,520
<font color="#E5E5E5">history</font><font color="#CCCCCC"> of Earth</font><font color="#E5E5E5"> first was open ID which</font>

70
00:03:34,500 --> 00:03:41,480
is<font color="#E5E5E5"> an authentication protocol</font><font color="#CCCCCC"> users</font>

71
00:03:38,520 --> 00:03:44,910
<font color="#E5E5E5">create account by selecting</font><font color="#CCCCCC"> an open ID</font>

72
00:03:41,480 --> 00:03:47,220
identity provider<font color="#E5E5E5"> and then use those</font>

73
00:03:44,910 --> 00:03:50,940
<font color="#E5E5E5">accounts</font><font color="#CCCCCC"> to sign on to any</font><font color="#E5E5E5"> website which</font>

74
00:03:47,220 --> 00:03:54,060
accepts<font color="#E5E5E5"> open ID authentication so using</font>

75
00:03:50,940 --> 00:03:56,850
one open ID<font color="#E5E5E5"> identity provider uses</font>

76
00:03:54,060 --> 00:03:59,400
<font color="#CCCCCC">people to sign on into other</font><font color="#E5E5E5"> websites</font>

77
00:03:56,850 --> 00:04:02,130
<font color="#E5E5E5">without needing any credentials</font><font color="#CCCCCC"> that has</font>

78
00:03:59,400 --> 00:04:05,130
<font color="#CCCCCC">user name or</font><font color="#E5E5E5"> password so this is</font>

79
00:04:02,130 --> 00:04:08,519
currently used for<font color="#E5E5E5"> single sign-on by</font>

80
00:04:05,130 --> 00:04:10,980
many large<font color="#E5E5E5"> organizations but main</font><font color="#CCCCCC"> point</font>

81
00:04:08,520 --> 00:04:15,920
here<font color="#E5E5E5"> is it is specifically designed for</font>

82
00:04:10,980 --> 00:04:19,399
authentication<font color="#E5E5E5"> second was what which</font><font color="#CCCCCC"> is</font>

83
00:04:15,920 --> 00:04:23,370
authorization framework what provides

84
00:04:19,399 --> 00:04:26,299
client<font color="#E5E5E5"> secure delegated access to server</font>

85
00:04:23,370 --> 00:04:29,640
resources<font color="#E5E5E5"> on behalf of a resource owner</font>

86
00:04:26,300 --> 00:04:32,610
so it specifies a process for resource

87
00:04:29,640 --> 00:04:34,110
owners to authorize third party<font color="#E5E5E5"> access</font>

88
00:04:32,610 --> 00:04:36,150
to<font color="#E5E5E5"> their server</font>

89
00:04:34,110 --> 00:04:40,410
without<font color="#CCCCCC"> sharing their credentials in</font>

90
00:04:36,150 --> 00:04:42,450
simple<font color="#E5E5E5"> words</font><font color="#CCCCCC"> auth allows third party</font>

91
00:04:40,410 --> 00:04:46,200
applications to get<font color="#E5E5E5"> access to</font><font color="#CCCCCC"> resources</font>

92
00:04:42,450 --> 00:04:47,969
of the user without<font color="#E5E5E5"> any credentials</font><font color="#CCCCCC"> that</font>

93
00:04:46,200 --> 00:04:49,409
is<font color="#CCCCCC"> without any user name/password</font>

94
00:04:47,970 --> 00:04:54,120
<font color="#E5E5E5">they're able</font><font color="#CCCCCC"> to access</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> resources</font>

95
00:04:49,410 --> 00:04:56,460
<font color="#E5E5E5">and it also gives them limited access to</font>

96
00:04:54,120 --> 00:05:00,300
information based on<font color="#E5E5E5"> scope permissions</font>

97
00:04:56,460 --> 00:05:03,510
of<font color="#CCCCCC"> the app</font><font color="#E5E5E5"> so this is used by Google</font>

98
00:05:00,300 --> 00:05:06,360
Facebook Twitter<font color="#E5E5E5"> etc</font><font color="#CCCCCC"> and let's take an</font>

99
00:05:03,510 --> 00:05:08,760
<font color="#CCCCCC">example of this</font><font color="#E5E5E5"> when installing any</font>

100
00:05:06,360 --> 00:05:11,340
<font color="#CCCCCC">third party app on</font><font color="#E5E5E5"> Facebook</font><font color="#CCCCCC"> Facebook</font>

101
00:05:08,760 --> 00:05:13,710
asks you what permission would<font color="#E5E5E5"> you like</font>

102
00:05:11,340 --> 00:05:16,080
to give to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application for</font><font color="#CCCCCC"> example</font>

103
00:05:13,710 --> 00:05:18,840
email permission or sharing your friends

104
00:05:16,080 --> 00:05:23,280
or<font color="#E5E5E5"> only public profile permissions so</font>

105
00:05:18,840 --> 00:05:28,669
<font color="#E5E5E5">that is what now there are two versions</font>

106
00:05:23,280 --> 00:05:31,289
<font color="#CCCCCC">an earth or what 1.0 and what 2.0</font>

107
00:05:28,669 --> 00:05:34,440
different<font color="#E5E5E5"> companies use</font><font color="#CCCCCC"> different</font>

108
00:05:31,290 --> 00:05:37,169
versions<font color="#CCCCCC"> based on their needs in this</font>

109
00:05:34,440 --> 00:05:43,110
presentation we are<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Lisa focus</font>

110
00:05:37,169 --> 00:05:46,109
on or 2.0 so recently<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> last year</font>

111
00:05:43,110 --> 00:05:49,590
<font color="#CCCCCC">also open ID Connect was introduced</font>

112
00:05:46,110 --> 00:05:53,460
which is built on<font color="#E5E5E5"> top of</font><font color="#CCCCCC"> or 2.0 which</font>

113
00:05:49,590 --> 00:05:57,719
<font color="#E5E5E5">addresses all security issues of or 2.0</font>

114
00:05:53,460 --> 00:06:00,440
and is believed to<font color="#E5E5E5"> be more secure so</font>

115
00:05:57,720 --> 00:06:03,300
this is a smaller summary of how

116
00:06:00,440 --> 00:06:05,729
authentication and authorization<font color="#E5E5E5"> evolved</font>

117
00:06:03,300 --> 00:06:08,940
over the<font color="#E5E5E5"> past</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> also other</font>

118
00:06:05,729 --> 00:06:09,840
protocols like sam'l which are used<font color="#CCCCCC"> for</font>

119
00:06:08,940 --> 00:06:12,600
authentication

120
00:06:09,840 --> 00:06:15,659
but in<font color="#CCCCCC"> this talk we are</font><font color="#E5E5E5"> going to only</font>

121
00:06:12,600 --> 00:06:17,910
focus<font color="#CCCCCC"> on over 2.0</font><font color="#E5E5E5"> third-party</font>

122
00:06:15,660 --> 00:06:25,100
applications which are<font color="#E5E5E5"> integrated into</font>

123
00:06:17,910 --> 00:06:29,100
<font color="#CCCCCC">your websites</font><font color="#E5E5E5"> so let's move</font><font color="#CCCCCC"> forward or</font>

124
00:06:25,100 --> 00:06:34,110
2.0 basics so what is it how it works

125
00:06:29,100 --> 00:06:38,270
<font color="#E5E5E5">and where it is used so let's move on so</font>

126
00:06:34,110 --> 00:06:41,460
what is<font color="#CCCCCC"> our 2.0 / 2.0 is an</font>

127
00:06:38,270 --> 00:06:43,349
<font color="#E5E5E5">authorization framework it enables a</font>

128
00:06:41,460 --> 00:06:45,830
<font color="#CCCCCC">third-party application</font><font color="#E5E5E5"> to obtain</font>

129
00:06:43,349 --> 00:06:47,639
limited access to<font color="#CCCCCC"> a service or resource</font>

130
00:06:45,830 --> 00:06:50,609
for example

131
00:06:47,639 --> 00:06:54,210
we have<font color="#E5E5E5"> login with facebook buttons on</font>

132
00:06:50,610 --> 00:06:58,020
various websites<font color="#E5E5E5"> which gets</font><font color="#CCCCCC"> an access</font>

133
00:06:54,210 --> 00:07:00,210
token<font color="#CCCCCC"> of the user</font><font color="#E5E5E5"> from Facebook and uses</font>

134
00:06:58,020 --> 00:07:02,780
limited information<font color="#CCCCCC"> from Facebook</font><font color="#E5E5E5"> to</font>

135
00:07:00,210 --> 00:07:06,198
<font color="#CCCCCC">create an account</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the website</font>

136
00:07:02,780 --> 00:07:09,119
similarly there are functionalities like

137
00:07:06,199 --> 00:07:10,319
importing photos<font color="#E5E5E5"> from facebook</font><font color="#CCCCCC"> importing</font>

138
00:07:09,120 --> 00:07:13,879
photos<font color="#E5E5E5"> from Flickr</font>

139
00:07:10,319 --> 00:07:18,120
so these functionality might use or 2.0

140
00:07:13,879 --> 00:07:22,979
<font color="#CCCCCC">so-oh 2.0 is used by Facebook Google and</font>

141
00:07:18,120 --> 00:07:31,469
<font color="#E5E5E5">many other</font><font color="#CCCCCC"> companies so let's see how it</font>

142
00:07:22,979 --> 00:07:34,560
works<font color="#E5E5E5"> so if you refer</font><font color="#CCCCCC"> Ords</font><font color="#E5E5E5"> 2.0 RFC it</font>

143
00:07:31,469 --> 00:07:36,750
will give you all<font color="#E5E5E5"> technical details so</font>

144
00:07:34,560 --> 00:07:39,270
basically there are four methods<font color="#CCCCCC"> by</font>

145
00:07:36,750 --> 00:07:42,629
which a<font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> app can get access</font>

146
00:07:39,270 --> 00:07:45,479
<font color="#CCCCCC">to resources owned</font><font color="#E5E5E5"> by the user first is</font>

147
00:07:42,629 --> 00:07:47,729
authorization code where a<font color="#E5E5E5"> third-party</font>

148
00:07:45,479 --> 00:07:50,969
application<font color="#CCCCCC"> gets an authorization code</font>

149
00:07:47,729 --> 00:07:54,300
which is later exchanged<font color="#E5E5E5"> for an access</font>

150
00:07:50,969 --> 00:07:57,830
token access tokens can<font color="#E5E5E5"> be used to</font>

151
00:07:54,300 --> 00:08:01,199
access<font color="#CCCCCC"> resources</font><font color="#E5E5E5"> owned by the user</font>

152
00:07:57,830 --> 00:08:03,930
second<font color="#CCCCCC"> is implicit grant where a</font>

153
00:08:01,199 --> 00:08:06,539
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> app directly gets an access</font>

154
00:08:03,930 --> 00:08:08,879
token<font color="#E5E5E5"> then the access token can be used</font>

155
00:08:06,539 --> 00:08:13,310
to access<font color="#E5E5E5"> resources owned by the user</font>

156
00:08:08,879 --> 00:08:16,770
here<font color="#E5E5E5"> it gets an access token directly</font>

157
00:08:13,310 --> 00:08:21,539
third is resource owner<font color="#E5E5E5"> password</font>

158
00:08:16,770 --> 00:08:24,779
credentials so as the name suggests<font color="#E5E5E5"> a</font>

159
00:08:21,539 --> 00:08:27,378
<font color="#E5E5E5">third party application directly drives</font>

160
00:08:24,779 --> 00:08:31,770
<font color="#E5E5E5">an access token by using credentials</font>

161
00:08:27,379 --> 00:08:34,890
that<font color="#E5E5E5"> is username and password now</font><font color="#CCCCCC"> fourth</font>

162
00:08:31,770 --> 00:08:37,740
is client credential where application

163
00:08:34,890 --> 00:08:40,919
requests an access<font color="#CCCCCC"> token to access their</font>

164
00:08:37,740 --> 00:08:43,260
<font color="#E5E5E5">own resources it doesn't work on behalf</font>

165
00:08:40,919 --> 00:08:48,630
of the<font color="#E5E5E5"> user</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> just accessing its own</font>

166
00:08:43,260 --> 00:08:51,029
<font color="#E5E5E5">resources so here we</font><font color="#CCCCCC"> are mostly</font>

167
00:08:48,630 --> 00:08:53,910
interested<font color="#E5E5E5"> in attacking first two</font>

168
00:08:51,029 --> 00:08:56,750
methods<font color="#E5E5E5"> used by third party applications</font>

169
00:08:53,910 --> 00:08:59,209
to derive access tokens<font color="#E5E5E5"> for the user</font>

170
00:08:56,750 --> 00:09:01,020
we are going to explore how

171
00:08:59,209 --> 00:09:04,709
authorization code<font color="#E5E5E5"> crime</font>

172
00:09:01,020 --> 00:09:13,350
and implicit grant works and how<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

173
00:09:04,710 --> 00:09:16,400
attack it<font color="#CCCCCC"> so let's move on this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

174
00:09:13,350 --> 00:09:20,370
graphical representation<font color="#E5E5E5"> of how</font>

175
00:09:16,400 --> 00:09:23,220
authorization code works<font color="#E5E5E5"> I'll be</font><font color="#CCCCCC"> using</font>

176
00:09:20,370 --> 00:09:25,500
Facebook everywhere<font color="#E5E5E5"> but you can replace</font>

177
00:09:23,220 --> 00:09:28,190
<font color="#E5E5E5">Facebook with any other company like</font>

178
00:09:25,500 --> 00:09:34,140
Google Microsoft or<font color="#E5E5E5"> any other program</font>

179
00:09:28,190 --> 00:09:37,310
which has implemented<font color="#E5E5E5"> or 2.0 so see this</font>

180
00:09:34,140 --> 00:09:40,439
diagram<font color="#E5E5E5"> here there are four entities</font>

181
00:09:37,310 --> 00:09:43,250
<font color="#CCCCCC">Firsters application client</font><font color="#E5E5E5"> which is a</font>

182
00:09:40,440 --> 00:09:46,910
third party<font color="#CCCCCC"> app built on</font><font color="#E5E5E5"> Facebook</font>

183
00:09:43,250 --> 00:09:50,550
second<font color="#CCCCCC"> is user who is resource owner</font>

184
00:09:46,910 --> 00:09:53,790
<font color="#E5E5E5">third is authorization server which is</font>

185
00:09:50,550 --> 00:09:57,530
graph<font color="#E5E5E5"> API for</font><font color="#CCCCCC"> Facebook fourth is the</font>

186
00:09:53,790 --> 00:09:59,730
browser so simple workflow<font color="#E5E5E5"> is</font>

187
00:09:57,530 --> 00:10:02,910
<font color="#CCCCCC">third-party application with a request</font>

188
00:09:59,730 --> 00:10:05,490
<font color="#E5E5E5">access to</font><font color="#CCCCCC"> fuse</font><font color="#E5E5E5"> resources once user</font>

189
00:10:02,910 --> 00:10:07,020
grants<font color="#E5E5E5"> access to the application the</font>

190
00:10:05,490 --> 00:10:11,160
application<font color="#CCCCCC"> will get an access</font><font color="#E5E5E5"> token</font>

191
00:10:07,020 --> 00:10:12,290
<font color="#E5E5E5">which can be used to act on behalf of</font>

192
00:10:11,160 --> 00:10:15,510
the user

193
00:10:12,290 --> 00:10:18,480
<font color="#E5E5E5">so let's see how authorization code</font>

194
00:10:15,510 --> 00:10:21,090
grant works first user authorization

195
00:10:18,480 --> 00:10:23,520
request is sent from<font color="#CCCCCC"> third</font><font color="#E5E5E5"> party</font>

196
00:10:21,090 --> 00:10:27,030
application to authorization server<font color="#E5E5E5"> or</font>

197
00:10:23,520 --> 00:10:29,880
Facebook<font color="#E5E5E5"> via browser second user have</font>

198
00:10:27,030 --> 00:10:32,699
option to<font color="#CCCCCC"> authorize the app or install</font>

199
00:10:29,880 --> 00:10:35,360
the app<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the account</font><font color="#E5E5E5"> third is once</font>

200
00:10:32,700 --> 00:10:37,800
<font color="#E5E5E5">user authorizes the app and</font>

201
00:10:35,360 --> 00:10:40,010
authorization code will be<font color="#CCCCCC"> sent to third</font>

202
00:10:37,800 --> 00:10:44,010
by the<font color="#E5E5E5"> application via the browser</font>

203
00:10:40,010 --> 00:10:46,860
<font color="#CCCCCC">fourth third party application needs</font><font color="#E5E5E5"> to</font>

204
00:10:44,010 --> 00:10:51,000
get an<font color="#E5E5E5"> access</font><font color="#CCCCCC"> token so it sends a</font>

205
00:10:46,860 --> 00:10:53,490
request to<font color="#E5E5E5"> get an access</font><font color="#CCCCCC"> token fifth is</font>

206
00:10:51,000 --> 00:10:55,110
if everything<font color="#CCCCCC"> is correct</font><font color="#E5E5E5"> then access</font>

207
00:10:53,490 --> 00:10:57,900
token is sent to the third party

208
00:10:55,110 --> 00:11:05,630
application which<font color="#E5E5E5"> can be used to access</font>

209
00:10:57,900 --> 00:11:08,280
resources of the user<font color="#E5E5E5"> so here we we use</font>

210
00:11:05,630 --> 00:11:11,550
<font color="#E5E5E5">authorization</font><font color="#CCCCCC"> code grant</font><font color="#E5E5E5"> because it</font>

211
00:11:08,280 --> 00:11:14,199
<font color="#E5E5E5">offers few security benefits we'll</font>

212
00:11:11,550 --> 00:11:16,449
explore on this later

213
00:11:14,200 --> 00:11:23,980
<font color="#E5E5E5">now let's take an example of this</font><font color="#CCCCCC"> type</font>

214
00:11:16,450 --> 00:11:27,430
of implementation okay so this is zoom

215
00:11:23,980 --> 00:11:30,670
dot<font color="#CCCCCC"> us</font><font color="#E5E5E5"> so zoom is an application</font><font color="#CCCCCC"> which</font>

216
00:11:27,430 --> 00:11:36,120
<font color="#E5E5E5">is used for hosting meetings</font><font color="#CCCCCC"> online or</font>

217
00:11:30,670 --> 00:11:39,399
webinars so this is<font color="#CCCCCC"> login page of</font><font color="#E5E5E5"> zoom</font>

218
00:11:36,120 --> 00:11:42,670
here you can see that user can<font color="#CCCCCC"> log</font><font color="#E5E5E5"> in</font>

219
00:11:39,399 --> 00:11:45,399
via<font color="#E5E5E5"> Google or log in via Facebook few</font>

220
00:11:42,670 --> 00:11:48,550
things to note<font color="#CCCCCC"> that this room also has a</font>

221
00:11:45,399 --> 00:11:50,949
third party app built on Facebook<font color="#E5E5E5"> which</font>

222
00:11:48,550 --> 00:11:53,439
<font color="#CCCCCC">is used</font><font color="#E5E5E5"> to allow users</font><font color="#CCCCCC"> to login into</font>

223
00:11:50,949 --> 00:11:56,979
Facebook<font color="#CCCCCC"> logging in to zoom</font><font color="#E5E5E5"> with</font>

224
00:11:53,440 --> 00:11:58,860
Facebook so<font color="#CCCCCC"> when the user had sign in</font>

225
00:11:56,980 --> 00:12:05,279
with Facebook user will<font color="#CCCCCC"> be taken to</font>

226
00:11:58,860 --> 00:12:09,010
authorization page so this is

227
00:12:05,279 --> 00:12:11,110
authorization page on Facebook<font color="#E5E5E5"> this is</font>

228
00:12:09,010 --> 00:12:13,149
the first request sent from a third

229
00:12:11,110 --> 00:12:15,639
<font color="#E5E5E5">party</font><font color="#CCCCCC"> application to authorization</font>

230
00:12:13,149 --> 00:12:18,579
<font color="#CCCCCC">server</font><font color="#E5E5E5"> where user can decide whether to</font>

231
00:12:15,639 --> 00:12:20,829
authorize<font color="#E5E5E5"> this app or not here before</font>

232
00:12:18,579 --> 00:12:22,989
<font color="#CCCCCC">going forward I'd like to highlight</font>

233
00:12:20,829 --> 00:12:25,779
<font color="#E5E5E5">certain parameters used in the</font>

234
00:12:22,990 --> 00:12:29,019
authorization<font color="#CCCCCC"> link in the</font><font color="#E5E5E5"> top you can</font>

235
00:12:25,779 --> 00:12:31,390
<font color="#CCCCCC">see Facebook's authorization link first</font>

236
00:12:29,019 --> 00:12:35,019
highlighted parameters response type

237
00:12:31,390 --> 00:12:37,260
whose value is code which<font color="#CCCCCC"> tells that the</font>

238
00:12:35,019 --> 00:12:40,779
app is requesting<font color="#E5E5E5"> authorization code</font>

239
00:12:37,260 --> 00:12:43,199
second is client ID<font color="#E5E5E5"> which is unique</font>

240
00:12:40,779 --> 00:12:47,260
identifier used by Facebook<font color="#CCCCCC"> for</font>

241
00:12:43,199 --> 00:12:49,990
<font color="#E5E5E5">identifying apps third the scope which</font>

242
00:12:47,260 --> 00:12:52,810
<font color="#CCCCCC">is used to</font><font color="#E5E5E5"> define what permissions are</font>

243
00:12:49,990 --> 00:12:56,290
requested by<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application so in this</font>

244
00:12:52,810 --> 00:12:59,290
case<font color="#E5E5E5"> zoom is requesting public profile</font>

245
00:12:56,290 --> 00:13:02,410
<font color="#E5E5E5">email and friend list of the user you</font>

246
00:12:59,290 --> 00:13:05,680
can<font color="#E5E5E5"> also see the same on the screen it</font>

247
00:13:02,410 --> 00:13:10,689
<font color="#E5E5E5">also tells you now fourth highlighted</font>

248
00:13:05,680 --> 00:13:13,719
parameters<font color="#E5E5E5"> redirect URI this is a</font><font color="#CCCCCC"> URL</font>

249
00:13:10,690 --> 00:13:17,230
your authorization code needs to<font color="#CCCCCC"> be sent</font>

250
00:13:13,720 --> 00:13:20,410
after user authorizes the app generally

251
00:13:17,230 --> 00:13:23,010
this direct URI<font color="#E5E5E5"> is registered</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> app</font>

252
00:13:20,410 --> 00:13:28,589
developers when apps are created

253
00:13:23,010 --> 00:13:28,589
so now let's authorize the app

254
00:13:30,270 --> 00:13:36,130
after user authorizes the app<font color="#E5E5E5"> the</font>

255
00:13:33,430 --> 00:13:39,310
<font color="#E5E5E5">Facebook</font><font color="#CCCCCC"> who is authorization server</font>

256
00:13:36,130 --> 00:13:42,760
sends an authorization code<font color="#CCCCCC"> to the</font>

257
00:13:39,310 --> 00:13:45,670
<font color="#CCCCCC">third-party app so this is your</font>

258
00:13:42,760 --> 00:13:49,770
authorization code of the user is sent

259
00:13:45,670 --> 00:13:53,199
after user<font color="#E5E5E5"> authorized</font><font color="#CCCCCC"> zoom application</font>

260
00:13:49,770 --> 00:13:56,800
now after receiving authorization code

261
00:13:53,200 --> 00:14:01,260
from Facebook<font color="#E5E5E5"> zoom needs to get an</font>

262
00:13:56,800 --> 00:14:03,400
<font color="#E5E5E5">access</font><font color="#CCCCCC"> token</font><font color="#E5E5E5"> the last step was</font>

263
00:14:01,260 --> 00:14:05,790
<font color="#E5E5E5">third-party application uses</font>

264
00:14:03,400 --> 00:14:10,090
authorization code of the user and

265
00:14:05,790 --> 00:14:12,849
exchanges it with an access token here

266
00:14:10,090 --> 00:14:15,490
<font color="#CCCCCC">third-party application sends client ID</font>

267
00:14:12,850 --> 00:14:17,650
<font color="#E5E5E5">and authorization code and redirect URI</font>

268
00:14:15,490 --> 00:14:22,510
<font color="#E5E5E5">and the request to get an access</font><font color="#CCCCCC"> token</font>

269
00:14:17,650 --> 00:14:25,329
<font color="#E5E5E5">please note that here</font><font color="#CCCCCC"> the redirect URI</font>

270
00:14:22,510 --> 00:14:27,370
<font color="#E5E5E5">needs to be same</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> the one which was</font>

271
00:14:25,330 --> 00:14:30,220
used<font color="#CCCCCC"> to derive authorization code</font>

272
00:14:27,370 --> 00:14:32,170
otherwise<font color="#E5E5E5"> access token will not be</font>

273
00:14:30,220 --> 00:14:34,420
granted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the application this</font><font color="#CCCCCC"> is</font>

274
00:14:32,170 --> 00:14:37,290
additional security benefit of using

275
00:14:34,420 --> 00:14:39,880
authorization code grant in case

276
00:14:37,290 --> 00:14:42,310
<font color="#CCCCCC">authorized</font><font color="#E5E5E5"> ation codes are stolen</font>

277
00:14:39,880 --> 00:14:44,770
it cannot be<font color="#E5E5E5"> exchanged</font><font color="#CCCCCC"> with an access</font>

278
00:14:42,310 --> 00:14:48,089
token<font color="#CCCCCC"> so this is an</font><font color="#E5E5E5"> additional security</font>

279
00:14:44,770 --> 00:14:54,819
benefit of this now let's see how

280
00:14:48,090 --> 00:14:57,700
implicit<font color="#E5E5E5"> grant works so again this is</font>

281
00:14:54,820 --> 00:15:00,190
<font color="#E5E5E5">graphical representation of how implicit</font>

282
00:14:57,700 --> 00:15:03,820
<font color="#E5E5E5">grant works here there are four entities</font>

283
00:15:00,190 --> 00:15:06,070
<font color="#E5E5E5">first is application client which is</font>

284
00:15:03,820 --> 00:15:08,940
<font color="#CCCCCC">third-party app built on</font><font color="#E5E5E5"> Facebook</font>

285
00:15:06,070 --> 00:15:12,040
second is user<font color="#CCCCCC"> who is resource owner</font>

286
00:15:08,940 --> 00:15:16,350
<font color="#E5E5E5">third is authorization server which is</font>

287
00:15:12,040 --> 00:15:20,530
graph<font color="#E5E5E5"> API</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> Facebook and</font><font color="#CCCCCC"> focus browser</font>

288
00:15:16,350 --> 00:15:22,810
<font color="#E5E5E5">now simple workflow for this</font><font color="#CCCCCC"> third party</font>

289
00:15:20,530 --> 00:15:26,170
app will request access<font color="#E5E5E5"> to users</font>

290
00:15:22,810 --> 00:15:28,180
resources once user grants<font color="#CCCCCC"> access to the</font>

291
00:15:26,170 --> 00:15:31,540
application the application<font color="#E5E5E5"> will get an</font>

292
00:15:28,180 --> 00:15:35,260
access<font color="#CCCCCC"> token which can be used</font><font color="#E5E5E5"> to act on</font>

293
00:15:31,540 --> 00:15:39,560
behalf<font color="#E5E5E5"> of the user let's see how</font>

294
00:15:35,260 --> 00:15:43,400
authorization how implicit<font color="#E5E5E5"> grant works</font>

295
00:15:39,560 --> 00:15:45,979
first user authorization request is sent

296
00:15:43,400 --> 00:15:48,230
from<font color="#E5E5E5"> third-party</font><font color="#CCCCCC"> app to authorization</font>

297
00:15:45,980 --> 00:15:51,020
server<font color="#E5E5E5"> or Facebook</font><font color="#CCCCCC"> wire browser</font>

298
00:15:48,230 --> 00:15:53,000
second<font color="#E5E5E5"> usually have option to authorize</font>

299
00:15:51,020 --> 00:15:56,120
the app or install the app on<font color="#CCCCCC"> the</font>

300
00:15:53,000 --> 00:15:58,220
account<font color="#E5E5E5"> third is once user authorizes</font>

301
00:15:56,120 --> 00:16:00,830
<font color="#E5E5E5">the app and access token will</font><font color="#CCCCCC"> be</font>

302
00:15:58,220 --> 00:16:04,670
directly<font color="#E5E5E5"> sent to the</font><font color="#CCCCCC"> third-party app web</font>

303
00:16:00,830 --> 00:16:06,940
browser<font color="#E5E5E5"> so here access token is directly</font>

304
00:16:04,670 --> 00:16:11,449
granted to the<font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> application</font>

305
00:16:06,940 --> 00:16:16,130
we have eliminated the step to fetch an

306
00:16:11,450 --> 00:16:22,400
authorization code<font color="#E5E5E5"> now</font><font color="#CCCCCC"> let's see example</font>

307
00:16:16,130 --> 00:16:26,360
of<font color="#E5E5E5"> this implementation so this is this</font>

308
00:16:22,400 --> 00:16:29,839
is<font color="#E5E5E5"> Pinterest login page here you can see</font>

309
00:16:26,360 --> 00:16:33,200
that user can<font color="#CCCCCC"> log</font><font color="#E5E5E5"> in via Google or</font><font color="#CCCCCC"> yr</font>

310
00:16:29,839 --> 00:16:35,330
<font color="#E5E5E5">Facebook now few things we must note</font>

311
00:16:33,200 --> 00:16:38,180
here that<font color="#E5E5E5"> Pinterest</font><font color="#CCCCCC"> also has a</font>

312
00:16:35,330 --> 00:16:41,330
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> app built on Facebook which</font>

313
00:16:38,180 --> 00:16:44,540
<font color="#CCCCCC">is used to</font><font color="#E5E5E5"> allow users</font><font color="#CCCCCC"> to login into</font>

314
00:16:41,330 --> 00:16:46,640
Pinterest<font color="#CCCCCC"> using Facebook</font><font color="#E5E5E5"> so when user</font>

315
00:16:44,540 --> 00:16:50,990
<font color="#CCCCCC">hit sign in with Facebook user will be</font>

316
00:16:46,640 --> 00:16:53,480
<font color="#E5E5E5">taken to authorization page so this is</font>

317
00:16:50,990 --> 00:16:55,270
the<font color="#CCCCCC"> authorization page on Facebook</font><font color="#E5E5E5"> this</font>

318
00:16:53,480 --> 00:16:58,400
<font color="#E5E5E5">is the first request</font><font color="#CCCCCC"> sent from</font><font color="#E5E5E5"> a</font>

319
00:16:55,270 --> 00:17:00,980
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> app to authorization server</font>

320
00:16:58,400 --> 00:17:05,270
we<font color="#E5E5E5"> our user can decide whether to</font>

321
00:17:00,980 --> 00:17:07,360
authorize this app or not here<font color="#CCCCCC"> before</font>

322
00:17:05,270 --> 00:17:10,099
going<font color="#CCCCCC"> forward</font><font color="#E5E5E5"> I'd like to highlight</font>

323
00:17:07,359 --> 00:17:13,280
certain parameters used in the

324
00:17:10,099 --> 00:17:15,530
authorization<font color="#E5E5E5"> link this link is very</font>

325
00:17:13,280 --> 00:17:18,678
much lengthy and contains too many

326
00:17:15,530 --> 00:17:22,849
<font color="#E5E5E5">parameters as Pinterest is using</font>

327
00:17:18,679 --> 00:17:26,150
Facebook's SDKs so in the top you can

328
00:17:22,849 --> 00:17:28,610
<font color="#CCCCCC">see Facebook's</font><font color="#E5E5E5"> authorization link first</font>

329
00:17:26,150 --> 00:17:30,710
highlighted parameter as client ID which

330
00:17:28,610 --> 00:17:33,070
is<font color="#E5E5E5"> unique identifier used by Facebook</font>

331
00:17:30,710 --> 00:17:36,020
<font color="#CCCCCC">for identifying</font><font color="#E5E5E5"> applications</font>

332
00:17:33,070 --> 00:17:36,710
second highlighted parameter is redirect

333
00:17:36,020 --> 00:17:40,129
URI

334
00:17:36,710 --> 00:17:44,380
this is URL where access token needs<font color="#E5E5E5"> to</font>

335
00:17:40,130 --> 00:17:50,510
be sent after user authorizes the app

336
00:17:44,380 --> 00:17:53,340
here<font color="#E5E5E5"> this is Facebook SDKs URL third</font>

337
00:17:50,510 --> 00:17:57,500
highlighted parameters response type

338
00:17:53,340 --> 00:18:00,209
whose value<font color="#CCCCCC"> is token</font><font color="#E5E5E5"> which tells the app</font>

339
00:17:57,500 --> 00:18:03,800
tells that the application is requesting

340
00:18:00,210 --> 00:18:06,630
access token<font color="#E5E5E5"> now fourth one is scope</font>

341
00:18:03,800 --> 00:18:09,419
which<font color="#CCCCCC"> is used to</font><font color="#E5E5E5"> define what permissions</font>

342
00:18:06,630 --> 00:18:12,020
<font color="#E5E5E5">are requested by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> application so in</font>

343
00:18:09,420 --> 00:18:15,060
this case Pinterest app is requesting

344
00:18:12,020 --> 00:18:19,860
<font color="#E5E5E5">public profile email friendless likes</font>

345
00:18:15,060 --> 00:18:23,970
<font color="#E5E5E5">etc</font><font color="#CCCCCC"> of the user you can</font><font color="#E5E5E5"> also see the</font>

346
00:18:19,860 --> 00:18:29,219
same on the screen now let's authorize

347
00:18:23,970 --> 00:18:33,270
this<font color="#E5E5E5"> app before going forward</font><font color="#CCCCCC"> let me</font>

348
00:18:29,220 --> 00:18:35,460
simplify the authorization URL this<font color="#E5E5E5"> is</font>

349
00:18:33,270 --> 00:18:38,220
<font color="#E5E5E5">simplified version of the authorization</font>

350
00:18:35,460 --> 00:18:41,700
<font color="#CCCCCC">new URL for</font><font color="#E5E5E5"> Facebook</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> change</font>

351
00:18:38,220 --> 00:18:44,910
<font color="#E5E5E5">response type parameter to token which</font>

352
00:18:41,700 --> 00:18:47,040
tells Facebook that I need access<font color="#E5E5E5"> token</font>

353
00:18:44,910 --> 00:18:53,820
<font color="#CCCCCC">for the user</font><font color="#E5E5E5"> instead of authorization</font>

354
00:18:47,040 --> 00:18:57,230
code so<font color="#E5E5E5"> let's move forward now the</font><font color="#CCCCCC"> left</font>

355
00:18:53,820 --> 00:19:00,629
last step was that<font color="#CCCCCC"> third-party app have</font>

356
00:18:57,230 --> 00:19:03,930
uses access token of the user received

357
00:19:00,630 --> 00:19:06,360
from Facebook to login<font color="#E5E5E5"> into Pinterest so</font>

358
00:19:03,930 --> 00:19:10,380
this is the<font color="#CCCCCC"> login request of Pinterest</font>

359
00:19:06,360 --> 00:19:14,250
<font color="#E5E5E5">which shows that Facebook access token</font>

360
00:19:10,380 --> 00:19:21,960
<font color="#E5E5E5">is directly used in the request so this</font>

361
00:19:14,250 --> 00:19:27,600
is how implicit<font color="#E5E5E5"> grant works now let's</font>

362
00:19:21,960 --> 00:19:31,170
see<font color="#E5E5E5"> here</font><font color="#CCCCCC"> Oh 2.0 is used you can see that</font>

363
00:19:27,600 --> 00:19:34,590
what 2.0<font color="#E5E5E5"> apps are used to import content</font>

364
00:19:31,170 --> 00:19:37,050
<font color="#CCCCCC">from websites like embodying photos from</font>

365
00:19:34,590 --> 00:19:41,120
Flickr or importing<font color="#E5E5E5"> photos from Facebook</font>

366
00:19:37,050 --> 00:19:45,060
or contacts from Gmail<font color="#E5E5E5"> etc many sites</font>

367
00:19:41,120 --> 00:19:48,419
use such applications like Facebook or

368
00:19:45,060 --> 00:19:50,280
Google for login<font color="#E5E5E5"> by providing login with</font>

369
00:19:48,420 --> 00:19:55,140
Facebook or log in with<font color="#CCCCCC"> Google button</font>

370
00:19:50,280 --> 00:19:58,830
<font color="#E5E5E5">and many sites users like uber users</font><font color="#CCCCCC"> or</font>

371
00:19:55,140 --> 00:20:01,140
2.0 applications for single sign-on<font color="#E5E5E5"> many</font>

372
00:19:58,830 --> 00:20:05,370
other sites<font color="#CCCCCC"> do the same</font><font color="#E5E5E5"> for single</font>

373
00:20:01,140 --> 00:20:07,080
sign-on so we are<font color="#E5E5E5"> going to focus on</font>

374
00:20:05,370 --> 00:20:09,658
applications which are you

375
00:20:07,080 --> 00:20:15,600
<font color="#E5E5E5">for logging in and explore different</font>

376
00:20:09,659 --> 00:20:17,840
<font color="#E5E5E5">types</font><font color="#CCCCCC"> of attacks on those so let's move</font>

377
00:20:15,600 --> 00:20:17,840
on

378
00:20:18,559 --> 00:20:25,408
attacks on or 2.0 integrations<font color="#CCCCCC"> so when</font>

379
00:20:23,100 --> 00:20:28,830
you are<font color="#E5E5E5"> testing</font><font color="#CCCCCC"> third-party applications</font>

380
00:20:25,409 --> 00:20:32,940
on websites<font color="#CCCCCC"> then you must consider this</font>

381
00:20:28,830 --> 00:20:35,220
<font color="#E5E5E5">three attacks first just token or code</font>

382
00:20:32,940 --> 00:20:38,029
stealing<font color="#CCCCCC"> where we</font><font color="#E5E5E5"> still access token or</font>

383
00:20:35,220 --> 00:20:41,399
authorization<font color="#E5E5E5"> codes and use it for</font>

384
00:20:38,029 --> 00:20:45,120
compromising users account<font color="#E5E5E5"> second less</font>

385
00:20:41,399 --> 00:20:47,879
<font color="#E5E5E5">CSRF</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are attacker does a CSRF to</font>

386
00:20:45,120 --> 00:20:51,590
connect his or her own<font color="#E5E5E5"> account</font><font color="#CCCCCC"> to</font>

387
00:20:47,880 --> 00:20:55,169
<font color="#E5E5E5">victims account and then log in while it</font>

388
00:20:51,590 --> 00:20:58,980
third token impersonation which results

389
00:20:55,169 --> 00:21:05,399
in authentication<font color="#E5E5E5"> bypass so let's</font>

390
00:20:58,980 --> 00:21:09,059
explore now let's explore<font color="#E5E5E5"> token stealing</font>

391
00:21:05,399 --> 00:21:16,049
<font color="#E5E5E5">what we do the secret methodology and a</font>

392
00:21:09,059 --> 00:21:19,668
solid case study of a real bug so in

393
00:21:16,049 --> 00:21:22,830
token stealing what we'll do we do is a

394
00:21:19,669 --> 00:21:25,289
main<font color="#E5E5E5"> rule</font><font color="#CCCCCC"> is to find third party app</font>

395
00:21:22,830 --> 00:21:27,809
integrations<font color="#E5E5E5"> in the website and then</font>

396
00:21:25,289 --> 00:21:31,320
steal access token of those<font color="#E5E5E5"> integrations</font>

397
00:21:27,809 --> 00:21:32,309
<font color="#E5E5E5">then take control of users account using</font>

398
00:21:31,320 --> 00:21:36,480
<font color="#CCCCCC">the access token</font>

399
00:21:32,309 --> 00:21:39,418
<font color="#E5E5E5">so first steal the access token second</font>

400
00:21:36,480 --> 00:21:43,200
<font color="#E5E5E5">use it to</font><font color="#CCCCCC"> login here we are specifically</font>

401
00:21:39,419 --> 00:21:45,779
focused on third party login apps for

402
00:21:43,200 --> 00:21:48,210
<font color="#CCCCCC">example here's a Facebook authorization</font>

403
00:21:45,779 --> 00:21:51,000
link where<font color="#E5E5E5"> we are directly requesting</font>

404
00:21:48,210 --> 00:21:54,649
response type is equal<font color="#CCCCCC"> to token</font><font color="#E5E5E5"> which</font>

405
00:21:51,000 --> 00:21:58,139
will give us<font color="#CCCCCC"> a token or access token</font>

406
00:21:54,649 --> 00:22:01,469
let's walk through secret<font color="#E5E5E5"> methodology</font>

407
00:21:58,139 --> 00:22:07,010
and baby step which one<font color="#E5E5E5"> needs to follow</font>

408
00:22:01,470 --> 00:22:07,010
to find such token skiing bugs easily

409
00:22:07,190 --> 00:22:15,710
<font color="#E5E5E5">okay so secret methodology first find</font>

410
00:22:12,240 --> 00:22:18,840
the<font color="#E5E5E5"> domain used in the redirect URI</font>

411
00:22:15,710 --> 00:22:21,110
second<font color="#E5E5E5"> find out if you can use any</font>

412
00:22:18,840 --> 00:22:24,750
subdomains<font color="#CCCCCC"> in the redirect</font>

413
00:22:21,110 --> 00:22:27,810
third as we want<font color="#E5E5E5"> to steal the token we</font>

414
00:22:24,750 --> 00:22:30,480
want to point the redirect URI to a page

415
00:22:27,810 --> 00:22:33,510
where we have<font color="#CCCCCC"> an</font><font color="#E5E5E5"> three zero through</font>

416
00:22:30,480 --> 00:22:38,060
<font color="#E5E5E5">three zero to open redirector which</font>

417
00:22:33,510 --> 00:22:42,120
allows<font color="#CCCCCC"> to carry forward</font><font color="#E5E5E5"> hash fragments</font>

418
00:22:38,060 --> 00:22:43,830
or we have an<font color="#CCCCCC"> XSS page where we can</font>

419
00:22:42,120 --> 00:22:46,800
forward<font color="#E5E5E5"> the access token</font>

420
00:22:43,830 --> 00:22:49,919
or we can<font color="#E5E5E5"> just hijack the sub domain and</font>

421
00:22:46,800 --> 00:22:53,730
host our own code and steal the token or

422
00:22:49,920 --> 00:22:57,120
we can<font color="#E5E5E5"> try to backtrack</font><font color="#CCCCCC"> the redirect URI</font>

423
00:22:53,730 --> 00:22:58,790
<font color="#E5E5E5">to a page which has an open redirector</font>

424
00:22:57,120 --> 00:23:02,100
or an XSS

425
00:22:58,790 --> 00:23:05,639
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> step is once you steal the</font>

426
00:23:02,100 --> 00:23:07,709
access token<font color="#CCCCCC"> then use</font><font color="#E5E5E5"> it for login these</font>

427
00:23:05,640 --> 00:23:10,440
are the<font color="#E5E5E5"> normal steps which one needs to</font>

428
00:23:07,710 --> 00:23:13,130
follow to steal tokens<font color="#E5E5E5"> also I'd like to</font>

429
00:23:10,440 --> 00:23:17,010
<font color="#CCCCCC">tell you that you can</font><font color="#E5E5E5"> have different</font>

430
00:23:13,130 --> 00:23:19,830
<font color="#E5E5E5">variations in step 3 these</font><font color="#CCCCCC"> are just</font><font color="#E5E5E5"> few</font>

431
00:23:17,010 --> 00:23:22,890
<font color="#E5E5E5">limited ideas on stealing the token</font><font color="#CCCCCC"> I</font>

432
00:23:19,830 --> 00:23:24,990
prefer going step<font color="#CCCCCC"> by step and taking</font>

433
00:23:22,890 --> 00:23:27,690
notes about<font color="#E5E5E5"> the behavior so let's move</font>

434
00:23:24,990 --> 00:23:36,630
on<font color="#CCCCCC"> and see your case study of this type</font>

435
00:23:27,690 --> 00:23:40,110
<font color="#CCCCCC">of bug I</font><font color="#E5E5E5"> found a bug on snap publisher</font>

436
00:23:36,630 --> 00:23:44,040
which allowed me to<font color="#CCCCCC"> steal</font><font color="#E5E5E5"> single sign on</font>

437
00:23:40,110 --> 00:23:50,580
<font color="#E5E5E5">login tokens of any user it was found by</font>

438
00:23:44,040 --> 00:23:53,700
<font color="#E5E5E5">me on snapchat</font><font color="#CCCCCC"> so little bit</font><font color="#E5E5E5"> background</font>

439
00:23:50,580 --> 00:23:56,070
<font color="#E5E5E5">information about snapchat snapchat has</font>

440
00:23:53,700 --> 00:23:59,640
different products like<font color="#E5E5E5"> snap publisher</font>

441
00:23:56,070 --> 00:24:02,010
<font color="#E5E5E5">ads manager business manager</font><font color="#CCCCCC"> etc they</font>

442
00:23:59,640 --> 00:24:04,500
are hosted on<font color="#E5E5E5"> subdomains like snap</font>

443
00:24:02,010 --> 00:24:09,150
publisher or snapchat<font color="#CCCCCC"> comm</font><font color="#E5E5E5"> ads manager</font>

444
00:24:04,500 --> 00:24:12,390
dot<font color="#E5E5E5"> ad start snapchat</font><font color="#CCCCCC"> com such as when</font>

445
00:24:09,150 --> 00:24:15,450
you log in on any sub domain it fetches

446
00:24:12,390 --> 00:24:17,820
<font color="#CCCCCC">a single sign-on log and token</font><font color="#E5E5E5"> from main</font>

447
00:24:15,450 --> 00:24:22,140
application which is hosted on<font color="#E5E5E5"> account</font>

448
00:24:17,820 --> 00:24:24,120
<font color="#E5E5E5">of snapchat</font><font color="#CCCCCC"> comm</font><font color="#E5E5E5"> for example if you want</font>

449
00:24:22,140 --> 00:24:26,760
<font color="#E5E5E5">to login into snap publisher dot</font>

450
00:24:24,120 --> 00:24:29,219
snapchat<font color="#CCCCCC"> comm</font><font color="#E5E5E5"> then it will ask you to</font>

451
00:24:26,760 --> 00:24:32,280
<font color="#E5E5E5">login into account</font><font color="#CCCCCC"> stored snapchat comm</font>

452
00:24:29,220 --> 00:24:34,830
and then<font color="#CCCCCC"> fetcher SSO login token from</font>

453
00:24:32,280 --> 00:24:38,160
account or snapchat<font color="#CCCCCC"> com</font>

454
00:24:34,830 --> 00:24:41,790
now I noticed that<font color="#CCCCCC"> this</font><font color="#E5E5E5"> login</font>

455
00:24:38,160 --> 00:24:45,360
functionality<font color="#E5E5E5"> worked similar to our 2.0</font>

456
00:24:41,790 --> 00:24:50,300
<font color="#E5E5E5">so I can apply my secret methodology and</font>

457
00:24:45,360 --> 00:24:50,300
try to steal access tokens of the user

458
00:24:53,300 --> 00:25:01,020
<font color="#E5E5E5">so this is the URL which first an SSO</font>

459
00:24:58,380 --> 00:25:05,040
<font color="#E5E5E5">login token from account stored snapchat</font>

460
00:25:01,020 --> 00:25:09,180
calm and pass<font color="#E5E5E5"> to snapchat publisher dot</font>

461
00:25:05,040 --> 00:25:11,760
<font color="#E5E5E5">snapchat calm then second request was</font>

462
00:25:09,180 --> 00:25:14,700
made to snap<font color="#CCCCCC"> publisher or</font><font color="#E5E5E5"> snapchat</font><font color="#CCCCCC"> calms</font>

463
00:25:11,760 --> 00:25:18,710
<font color="#CCCCCC">les SSO continuing question mark ticket</font>

464
00:25:14,700 --> 00:25:21,960
is equal to your SSO login token<font color="#E5E5E5"> now</font>

465
00:25:18,710 --> 00:25:25,950
let's apply secret methodology on this

466
00:25:21,960 --> 00:25:29,610
<font color="#CCCCCC">URL</font><font color="#E5E5E5"> first steps is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> fine domine use</font>

467
00:25:25,950 --> 00:25:32,280
in the redirect URI<font color="#E5E5E5"> before that I</font>

468
00:25:29,610 --> 00:25:34,560
observed<font color="#CCCCCC"> that</font><font color="#E5E5E5"> refer the referee</font>

469
00:25:32,280 --> 00:25:40,740
parameter in the URL can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> mapped to</font>

470
00:25:34,560 --> 00:25:43,230
redirect URI<font color="#E5E5E5"> in our 202 2.0 so first</font>

471
00:25:40,740 --> 00:25:46,890
step<font color="#E5E5E5"> we identify the dome in so here</font>

472
00:25:43,230 --> 00:25:49,740
domain was domain in the redirect URI

473
00:25:46,890 --> 00:25:52,650
<font color="#E5E5E5">or after was snap publisher dot snapchat</font>

474
00:25:49,740 --> 00:25:56,730
<font color="#CCCCCC">comm second</font><font color="#E5E5E5"> steps is that check if</font>

475
00:25:52,650 --> 00:25:59,400
subdomains are allowed or not<font color="#E5E5E5"> so here it</font>

476
00:25:56,730 --> 00:26:03,120
was allowing on the snap publisher dot

477
00:25:59,400 --> 00:26:07,380
snapshot calm<font color="#E5E5E5"> in</font><font color="#CCCCCC"> referrer so we cannot</font>

478
00:26:03,120 --> 00:26:12,989
<font color="#E5E5E5">use any other subdomains now let's move</font>

479
00:26:07,380 --> 00:26:16,500
on with<font color="#CCCCCC"> our</font><font color="#E5E5E5"> methodology third step was</font>

480
00:26:12,990 --> 00:26:19,830
to point the redirect URI to a page

481
00:26:16,500 --> 00:26:23,400
where<font color="#CCCCCC"> you can steal the token so luckily</font>

482
00:26:19,830 --> 00:26:26,790
<font color="#E5E5E5">I found an XSS</font><font color="#CCCCCC"> by uploading your SVG</font>

483
00:26:23,400 --> 00:26:30,060
file but it executed on storage dot

484
00:26:26,790 --> 00:26:34,020
<font color="#CCCCCC">Google API Strom</font><font color="#E5E5E5"> which is not</font><font color="#CCCCCC"> a</font>

485
00:26:30,060 --> 00:26:37,290
<font color="#E5E5E5">publisher or snapchat calm so this XSS</font>

486
00:26:34,020 --> 00:26:40,010
cannot be used<font color="#E5E5E5"> to steal the token</font>

487
00:26:37,290 --> 00:26:43,050
because<font color="#E5E5E5"> we cannot pass this token</font>

488
00:26:40,010 --> 00:26:45,330
because<font color="#CCCCCC"> we cannot pass the SSO login</font>

489
00:26:43,050 --> 00:26:47,700
token which is sent in a parameter as

490
00:26:45,330 --> 00:26:48,600
question mark<font color="#E5E5E5"> take it as equal to</font>

491
00:26:47,700 --> 00:26:52,140
<font color="#E5E5E5">something</font>

492
00:26:48,600 --> 00:26:56,189
<font color="#E5E5E5">as parameters not getting carried away</font>

493
00:26:52,140 --> 00:27:03,180
<font color="#E5E5E5">by</font><font color="#CCCCCC"> 3:03</font><font color="#E5E5E5"> directs from one domain to</font>

494
00:26:56,190 --> 00:27:06,870
another<font color="#E5E5E5"> so after finding out this this</font>

495
00:27:03,180 --> 00:27:12,810
is my reaction<font color="#E5E5E5"> because I'm stuck at</font><font color="#CCCCCC"> Step</font>

496
00:27:06,870 --> 00:27:18,510
<font color="#E5E5E5">three</font><font color="#CCCCCC"> of my secret methodology now let's</font>

497
00:27:12,810 --> 00:27:21,990
move on now<font color="#E5E5E5"> I found out that the image</font>

498
00:27:18,510 --> 00:27:24,690
link which<font color="#E5E5E5"> where I uploaded a SVG file</font>

499
00:27:21,990 --> 00:27:27,690
<font color="#E5E5E5">which got me excesses on storage dot</font>

500
00:27:24,690 --> 00:27:30,390
<font color="#E5E5E5">Google</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> is calm so the image link</font>

501
00:27:27,690 --> 00:27:32,820
like<font color="#E5E5E5"> snap publisher dot snapchat</font><font color="#CCCCCC"> calm</font>

502
00:27:30,390 --> 00:27:35,660
slash API slash version 1 slash media

503
00:27:32,820 --> 00:27:39,860
<font color="#E5E5E5">some media slash file something dot SVG</font>

504
00:27:35,660 --> 00:27:44,040
redirect to redirected to storage dot

505
00:27:39,860 --> 00:27:46,530
Google<font color="#E5E5E5"> API</font><font color="#CCCCCC"> Strom so I can use hash</font>

506
00:27:44,040 --> 00:27:48,899
fragments<font color="#E5E5E5"> and send data in hash</font>

507
00:27:46,530 --> 00:27:51,270
fragments from snap publisher dot

508
00:27:48,900 --> 00:27:57,300
<font color="#E5E5E5">snapchat</font><font color="#CCCCCC"> calm</font><font color="#E5E5E5"> to storage dot Google</font>

509
00:27:51,270 --> 00:28:00,540
<font color="#CCCCCC">epa's calm and this I can send the SSO</font>

510
00:27:57,300 --> 00:28:06,080
login token to my<font color="#E5E5E5"> excesses page which is</font>

511
00:28:00,540 --> 00:28:09,180
on storage dot<font color="#E5E5E5"> Google API is calm so</font>

512
00:28:06,080 --> 00:28:12,659
bypass was using an hash fragment<font color="#E5E5E5"> and</font>

513
00:28:09,180 --> 00:28:20,370
caring SSL logon token forward to my

514
00:28:12,660 --> 00:28:24,090
excesses page so after I after that<font color="#CCCCCC"> I</font>

515
00:28:20,370 --> 00:28:29,639
was happy<font color="#CCCCCC"> until I</font><font color="#E5E5E5"> found out that it's</font>

516
00:28:24,090 --> 00:28:32,520
self XSS so it can be the excesses page

517
00:28:29,640 --> 00:28:34,890
can<font color="#CCCCCC"> be consumed</font><font color="#E5E5E5"> to steal tokens only for</font>

518
00:28:32,520 --> 00:28:37,680
<font color="#CCCCCC">myself or any other admin who has</font>

519
00:28:34,890 --> 00:28:44,640
similar permissions<font color="#E5E5E5"> like me it cannot be</font>

520
00:28:37,680 --> 00:28:48,000
used against any other user so this is

521
00:28:44,640 --> 00:28:51,630
my reaction<font color="#E5E5E5"> because I was pretty close</font>

522
00:28:48,000 --> 00:28:54,720
<font color="#E5E5E5">to exploit the spec for</font><font color="#CCCCCC"> any user</font><font color="#E5E5E5"> but I</font>

523
00:28:51,630 --> 00:28:56,550
was stuck<font color="#E5E5E5"> because it's a self XSS</font><font color="#CCCCCC"> I can</font>

524
00:28:54,720 --> 00:29:01,140
steal the token but it's a<font color="#E5E5E5"> self access</font>

525
00:28:56,550 --> 00:29:03,020
and I can steal only<font color="#E5E5E5"> my tokens so ID</font>

526
00:29:01,140 --> 00:29:07,380
<font color="#E5E5E5">search more</font>

527
00:29:03,020 --> 00:29:09,720
later I<font color="#E5E5E5"> found out that</font><font color="#CCCCCC"> I can do</font><font color="#E5E5E5"> CSRF</font>

528
00:29:07,380 --> 00:29:12,960
logon on snap publisher dot snapchat

529
00:29:09,720 --> 00:29:20,400
calm and log any user into my own

530
00:29:12,960 --> 00:29:23,730
<font color="#E5E5E5">account</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> my reaction because</font>

531
00:29:20,400 --> 00:29:27,450
now I can just<font color="#CCCCCC"> steal any other users SSO</font>

532
00:29:23,730 --> 00:29:30,510
login token and take<font color="#E5E5E5"> control of the snap</font>

533
00:29:27,450 --> 00:29:32,670
publisher account<font color="#E5E5E5"> and also using</font><font color="#CCCCCC"> that</font>

534
00:29:30,510 --> 00:29:35,970
<font color="#E5E5E5">took and I can just access everything</font>

535
00:29:32,670 --> 00:29:40,050
all the API is for that snap publish

536
00:29:35,970 --> 00:29:42,180
account<font color="#E5E5E5"> also there was an admin panel</font>

537
00:29:40,050 --> 00:29:46,649
behind<font color="#E5E5E5"> which is used by snapchat</font>

538
00:29:42,180 --> 00:29:51,300
employees so which can<font color="#E5E5E5"> whose API can be</font>

539
00:29:46,650 --> 00:29:53,850
<font color="#E5E5E5">accessed by me so if I am able to steal</font>

540
00:29:51,300 --> 00:29:59,600
token of an employee then I get access

541
00:29:53,850 --> 00:30:03,679
<font color="#E5E5E5">to the internal admin panel as well so</font>

542
00:29:59,600 --> 00:30:07,139
let<font color="#E5E5E5"> me simplify the attack flow for you</font>

543
00:30:03,680 --> 00:30:09,330
so attack flow is first with<font color="#E5E5E5"> name locks</font>

544
00:30:07,140 --> 00:30:12,900
<font color="#E5E5E5">in into main application which is</font>

545
00:30:09,330 --> 00:30:16,379
account start snapchat comb second

546
00:30:12,900 --> 00:30:18,780
attacker<font color="#CCCCCC"> CSRF logins with him into his</font>

547
00:30:16,380 --> 00:30:22,320
own<font color="#E5E5E5"> account on snap publisher dot</font>

548
00:30:18,780 --> 00:30:25,649
snapchat<font color="#CCCCCC"> comm third</font><font color="#E5E5E5"> attackers sense the</font>

549
00:30:22,320 --> 00:30:29,520
token steal a link which steals victims

550
00:30:25,650 --> 00:30:32,970
SSO<font color="#E5E5E5"> login token received from account</font>

551
00:30:29,520 --> 00:30:36,600
<font color="#E5E5E5">stored snapchat calm the main</font>

552
00:30:32,970 --> 00:30:41,280
application by forwarding<font color="#E5E5E5"> it to from one</font>

553
00:30:36,600 --> 00:30:44,399
domain to<font color="#E5E5E5"> another and finally taking</font>

554
00:30:41,280 --> 00:30:49,649
<font color="#E5E5E5">that the SSO log and token to my self</font>

555
00:30:44,400 --> 00:30:56,370
accesses page so this is how the attack

556
00:30:49,650 --> 00:31:00,330
flow looked like<font color="#E5E5E5"> now let's move on so</font>

557
00:30:56,370 --> 00:31:03,179
this<font color="#CCCCCC"> is an actual POC this is the CSRF</font>

558
00:31:00,330 --> 00:31:06,240
<font color="#E5E5E5">logon link which locks the victim</font><font color="#CCCCCC"> into</font>

559
00:31:03,180 --> 00:31:08,970
attackers map<font color="#CCCCCC"> publishers</font><font color="#E5E5E5"> account at this</font>

560
00:31:06,240 --> 00:31:11,250
time<font color="#E5E5E5"> victim has already logged in into</font>

561
00:31:08,970 --> 00:31:13,380
<font color="#E5E5E5">his own account on main application</font>

562
00:31:11,250 --> 00:31:15,900
which is account stored snapchat calm

563
00:31:13,380 --> 00:31:19,110
and then victim is<font color="#CCCCCC"> logged in into</font>

564
00:31:15,900 --> 00:31:21,059
attack a snap<font color="#E5E5E5"> publishers account</font><font color="#CCCCCC"> second</font>

565
00:31:19,110 --> 00:31:24,059
send the token<font color="#E5E5E5"> stealer link this link</font>

566
00:31:21,059 --> 00:31:26,160
<font color="#E5E5E5">will fetch Oh SSO login token from mean</font>

567
00:31:24,059 --> 00:31:29,820
application which is accounts<font color="#E5E5E5"> dot</font>

568
00:31:26,160 --> 00:31:33,510
snapchat<font color="#CCCCCC"> calm of</font><font color="#E5E5E5"> the victim and pass it</font>

569
00:31:29,820 --> 00:31:37,110
on<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> XSS page and</font><font color="#E5E5E5"> XSS page inside</font>

570
00:31:33,510 --> 00:31:40,260
is inside<font color="#E5E5E5"> attackers account attackers</font>

571
00:31:37,110 --> 00:31:43,320
snap publish account<font color="#E5E5E5"> first attacker gets</font>

572
00:31:40,260 --> 00:31:45,660
control of the SSO login token of victim

573
00:31:43,320 --> 00:31:49,110
which can be used to<font color="#CCCCCC"> login and</font><font color="#E5E5E5"> access</font>

574
00:31:45,660 --> 00:31:51,920
all the<font color="#CCCCCC"> api's curse whole account of the</font>

575
00:31:49,110 --> 00:31:56,360
victim is compromised

576
00:31:51,920 --> 00:31:59,730
so bounty awarded for this<font color="#E5E5E5"> bug was</font>

577
00:31:56,360 --> 00:32:03,800
$7,500 few bugs in this chain<font color="#CCCCCC"> will</font>

578
00:31:59,730 --> 00:32:09,809
duplicate<font color="#E5E5E5"> that's why they rewarded only</font>

579
00:32:03,800 --> 00:32:13,950
<font color="#CCCCCC">7,500 now</font><font color="#E5E5E5"> let's move on to</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> section</font>

580
00:32:09,809 --> 00:32:22,530
which is<font color="#E5E5E5"> code stealing let's explore</font>

581
00:32:13,950 --> 00:32:25,710
this in<font color="#CCCCCC"> code stealing what we do is a</font>

582
00:32:22,530 --> 00:32:28,440
main goal is to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> third party</font>

583
00:32:25,710 --> 00:32:31,140
integrations<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> website and then</font>

584
00:32:28,440 --> 00:32:33,900
steal authorization codes<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> end</font>

585
00:32:31,140 --> 00:32:37,260
aggressions<font color="#E5E5E5"> then take control of users</font>

586
00:32:33,900 --> 00:32:39,240
account using authorization code so

587
00:32:37,260 --> 00:32:42,210
first step is steal the authorization

588
00:32:39,240 --> 00:32:44,790
code<font color="#E5E5E5"> second step is user to login here</font>

589
00:32:42,210 --> 00:32:47,820
we<font color="#CCCCCC"> are specifically targeting third</font>

590
00:32:44,790 --> 00:32:50,550
party<font color="#E5E5E5"> login apps for</font><font color="#CCCCCC"> example here so</font>

591
00:32:47,820 --> 00:32:53,309
<font color="#CCCCCC">Facebook authorization link where we are</font>

592
00:32:50,550 --> 00:32:56,540
directly requesting response type is

593
00:32:53,309 --> 00:32:58,678
<font color="#E5E5E5">equal to code which will give us</font>

594
00:32:56,540 --> 00:33:00,899
authorization code<font color="#E5E5E5"> later this</font>

595
00:32:58,679 --> 00:33:06,660
authorization<font color="#E5E5E5"> code will be exchanged</font>

596
00:33:00,900 --> 00:33:10,220
with access token by the application now

597
00:33:06,660 --> 00:33:13,410
<font color="#E5E5E5">in code stealing this one exception</font>

598
00:33:10,220 --> 00:33:16,110
redirect URI<font color="#E5E5E5"> while</font><font color="#CCCCCC"> exchanging the</font>

599
00:33:13,410 --> 00:33:19,140
authorization code<font color="#CCCCCC"> with access token</font>

600
00:33:16,110 --> 00:33:23,219
must match<font color="#E5E5E5"> when we got</font><font color="#CCCCCC"> authorization</font>

601
00:33:19,140 --> 00:33:25,530
code first<font color="#E5E5E5"> your request for exchanging</font>

602
00:33:23,220 --> 00:33:29,149
<font color="#E5E5E5">an authorization</font><font color="#CCCCCC"> code with an access</font>

603
00:33:25,530 --> 00:33:31,460
token<font color="#CCCCCC"> will fail if redirect URI</font><font color="#E5E5E5"> and both</font>

604
00:33:29,149 --> 00:33:34,728
<font color="#CCCCCC">West</font><font color="#E5E5E5"> doesn't match let's walk through</font>

605
00:33:31,460 --> 00:33:37,789
secret<font color="#E5E5E5"> methodology and baby steps which</font>

606
00:33:34,729 --> 00:33:43,070
one<font color="#E5E5E5"> needs to follow to find such</font><font color="#CCCCCC"> course</font>

607
00:33:37,789 --> 00:33:46,639
stealing bugs<font color="#E5E5E5"> easily so the secret</font>

608
00:33:43,070 --> 00:33:50,418
methodology<font color="#E5E5E5"> first find the domain used</font>

609
00:33:46,639 --> 00:33:53,149
in redirect URI<font color="#E5E5E5"> second find out if you</font>

610
00:33:50,419 --> 00:33:56,570
can use<font color="#CCCCCC"> any subdomains in the redirect</font>

611
00:33:53,149 --> 00:33:59,599
URI<font color="#E5E5E5"> third check</font><font color="#CCCCCC"> if authorization code</font>

612
00:33:56,570 --> 00:34:03,259
derived from<font color="#CCCCCC"> manipulated redirect URI</font>

613
00:33:59,599 --> 00:34:05,178
<font color="#E5E5E5">works when fetching access token this is</font>

614
00:34:03,259 --> 00:34:07,639
because you<font color="#E5E5E5"> don't want to waste your</font>

615
00:34:05,179 --> 00:34:10,809
<font color="#E5E5E5">time</font><font color="#CCCCCC"> if the application is</font><font color="#E5E5E5"> not able</font><font color="#CCCCCC"> to</font>

616
00:34:07,639 --> 00:34:15,440
process the authorization course with

617
00:34:10,809 --> 00:34:17,659
manipulated redirect URIs<font color="#E5E5E5"> fourth as we</font>

618
00:34:15,440 --> 00:34:21,079
want<font color="#CCCCCC"> to steal the code we</font><font color="#E5E5E5"> want to point</font>

619
00:34:17,659 --> 00:34:24,379
the redirect URI<font color="#CCCCCC"> to a page where we have</font>

620
00:34:21,079 --> 00:34:28,069
an XSS<font color="#E5E5E5"> where we can forward the</font>

621
00:34:24,379 --> 00:34:32,149
authorization code<font color="#CCCCCC"> or we can</font><font color="#E5E5E5"> just hijack</font>

622
00:34:28,069 --> 00:34:35,149
any<font color="#E5E5E5"> subdomain and steal the code or find</font>

623
00:34:32,149 --> 00:34:38,779
the page where we can<font color="#E5E5E5"> load user control</font>

624
00:34:35,149 --> 00:34:43,909
images or scripts where we can lick<font color="#E5E5E5"> leak</font>

625
00:34:38,779 --> 00:34:45,679
<font color="#E5E5E5">the URL in referral header so</font><font color="#CCCCCC"> fifth</font><font color="#E5E5E5"> is</font>

626
00:34:43,909 --> 00:34:49,490
once you steal the authorization code

627
00:34:45,679 --> 00:34:52,789
<font color="#E5E5E5">then use it for login also I'd like to</font>

628
00:34:49,489 --> 00:34:54,939
<font color="#CCCCCC">mention you</font><font color="#E5E5E5"> can try finding an open</font>

629
00:34:52,789 --> 00:34:58,279
redirect where<font color="#E5E5E5"> you don't mess with</font>

630
00:34:54,940 --> 00:35:00,349
redirect URI<font color="#E5E5E5"> so your student</font>

631
00:34:58,279 --> 00:35:04,220
authorization code will<font color="#CCCCCC"> work in</font><font color="#E5E5E5"> that</font>

632
00:35:00,349 --> 00:35:08,660
case these<font color="#E5E5E5"> are normal step which I</font>

633
00:35:04,220 --> 00:35:11,509
follow to find such kind of bugs also

634
00:35:08,660 --> 00:35:14,328
you can try<font color="#E5E5E5"> different variations</font><font color="#CCCCCC"> in step</font>

635
00:35:11,510 --> 00:35:18,200
<font color="#CCCCCC">four</font><font color="#E5E5E5"> where you steal the authorization</font>

636
00:35:14,329 --> 00:35:20,900
code<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are some limited ideas so</font>

637
00:35:18,200 --> 00:35:27,410
let's move on<font color="#CCCCCC"> and let's see a case study</font>

638
00:35:20,900 --> 00:35:29,390
<font color="#E5E5E5">of this type</font><font color="#CCCCCC"> of bug so</font><font color="#E5E5E5"> I found a bug</font>

639
00:35:27,410 --> 00:35:32,450
which allowed me to steal login

640
00:35:29,390 --> 00:35:34,640
authorization codes of users and it was

641
00:35:32,450 --> 00:35:38,470
found<font color="#E5E5E5"> by me on a private program so I</font>

642
00:35:34,640 --> 00:35:41,779
cannot disclose name of the program

643
00:35:38,470 --> 00:35:43,009
little background<font color="#E5E5E5"> information about the</font>

644
00:35:41,779 --> 00:35:45,620
<font color="#E5E5E5">website</font>

645
00:35:43,010 --> 00:35:48,830
company<font color="#CCCCCC"> allowed registering</font><font color="#E5E5E5"> sub domain</font>

646
00:35:45,620 --> 00:35:51,980
of your choice<font color="#CCCCCC"> in a beer plan on the sub</font>

647
00:35:48,830 --> 00:35:56,270
domain<font color="#CCCCCC"> one can customize HTML or load</font>

648
00:35:51,980 --> 00:35:58,090
<font color="#E5E5E5">images or do whatever he wants the site</font>

649
00:35:56,270 --> 00:36:02,000
was using<font color="#CCCCCC"> log in</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Facebook</font>

650
00:35:58,090 --> 00:36:05,240
<font color="#E5E5E5">functionality and it was using</font>

651
00:36:02,000 --> 00:36:07,670
authorization code for login so

652
00:36:05,240 --> 00:36:11,299
Facebook's authorization codes were<font color="#CCCCCC"> used</font>

653
00:36:07,670 --> 00:36:13,340
for<font color="#CCCCCC"> login</font><font color="#E5E5E5"> so now I can apply my secret</font>

654
00:36:11,300 --> 00:36:20,090
methodology<font color="#E5E5E5"> and try to steal the</font>

655
00:36:13,340 --> 00:36:22,960
authorization<font color="#CCCCCC"> ports of the</font><font color="#E5E5E5"> use of so</font>

656
00:36:20,090 --> 00:36:26,000
this is the URL<font color="#E5E5E5"> which vest an</font>

657
00:36:22,960 --> 00:36:29,990
authorization code<font color="#CCCCCC"> from</font><font color="#E5E5E5"> Facebook and log</font>

658
00:36:26,000 --> 00:36:33,350
the<font color="#CCCCCC"> user in let's apply</font><font color="#E5E5E5"> a secret</font>

659
00:36:29,990 --> 00:36:37,220
methodology first steps is that<font color="#CCCCCC"> find</font>

660
00:36:33,350 --> 00:36:41,060
domain<font color="#CCCCCC"> using</font><font color="#E5E5E5"> redirect URI and private</font>

661
00:36:37,220 --> 00:36:43,700
<font color="#CCCCCC">site.com</font><font color="#E5E5E5"> was used second steps is that</font>

662
00:36:41,060 --> 00:36:47,480
<font color="#E5E5E5">check if subdomains are allowed or not</font>

663
00:36:43,700 --> 00:36:53,740
<font color="#E5E5E5">and here it was allowing all subdomains</font>

664
00:36:47,480 --> 00:36:57,350
in the redirect URI now let's move on

665
00:36:53,740 --> 00:37:00,500
now step<font color="#E5E5E5"> third in the secret mythology</font>

666
00:36:57,350 --> 00:37:03,410
<font color="#E5E5E5">see is that check if authorization code</font>

667
00:37:00,500 --> 00:37:06,800
that i<font color="#E5E5E5"> from manipulated redirect URI</font>

668
00:37:03,410 --> 00:37:10,060
works when fetching access token so

669
00:37:06,800 --> 00:37:13,100
Facebook's manipulated redirect URIs

670
00:37:10,060 --> 00:37:15,080
<font color="#E5E5E5">authorization code won't work so</font>

671
00:37:13,100 --> 00:37:17,839
challenge here is we need to steal

672
00:37:15,080 --> 00:37:22,750
authorization code<font color="#E5E5E5"> without manipulating</font>

673
00:37:17,840 --> 00:37:26,600
redirect URI<font color="#E5E5E5"> of the Facebook app now</font>

674
00:37:22,750 --> 00:37:30,140
later<font color="#CCCCCC"> I observed that state parameter</font><font color="#E5E5E5"> in</font>

675
00:37:26,600 --> 00:37:35,480
the<font color="#E5E5E5"> authorization URL can</font><font color="#CCCCCC"> be used to</font>

676
00:37:30,140 --> 00:37:43,520
redirect to any internal<font color="#E5E5E5"> subdomain so</font>

677
00:37:35,480 --> 00:37:45,950
let's move<font color="#E5E5E5"> on so according to step</font><font color="#CCCCCC"> 4 we</font>

678
00:37:43,520 --> 00:37:49,759
need to redirect the authorization code

679
00:37:45,950 --> 00:37:52,129
<font color="#E5E5E5">to a page where we can have XSS or have</font>

680
00:37:49,760 --> 00:37:55,190
<font color="#E5E5E5">something like loading external images</font>

681
00:37:52,130 --> 00:37:56,990
or something which can be<font color="#CCCCCC"> used to leak</font>

682
00:37:55,190 --> 00:38:02,599
the authorization<font color="#CCCCCC"> code</font>

683
00:37:56,990 --> 00:38:05,750
parameters via<font color="#E5E5E5"> referer header so for</font>

684
00:38:02,599 --> 00:38:08,330
<font color="#E5E5E5">this I bought a paid plan and I got the</font>

685
00:38:05,750 --> 00:38:15,440
sub domain and I hosted<font color="#E5E5E5"> my own images</font>

686
00:38:08,330 --> 00:38:18,220
<font color="#E5E5E5">from my own website</font><font color="#CCCCCC"> so I can use this</font>

687
00:38:15,440 --> 00:38:20,690
<font color="#CCCCCC">chaining of attack and steal anyone's</font>

688
00:38:18,220 --> 00:38:24,200
authorization code and then use<font color="#CCCCCC"> it for</font>

689
00:38:20,690 --> 00:38:26,510
login<font color="#E5E5E5"> so this is my reaction at</font><font color="#CCCCCC"> that</font>

690
00:38:24,200 --> 00:38:29,118
time because I<font color="#E5E5E5"> was able to just</font><font color="#CCCCCC"> seal</font>

691
00:38:26,510 --> 00:38:35,270
anyone's authorization code and take

692
00:38:29,119 --> 00:38:37,670
<font color="#E5E5E5">over the whole account so let's walk</font>

693
00:38:35,270 --> 00:38:40,700
<font color="#E5E5E5">through attack workflow how the attack</font>

694
00:38:37,670 --> 00:38:44,020
worked<font color="#E5E5E5"> first victim</font><font color="#CCCCCC"> has logged</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> into</font>

695
00:38:40,700 --> 00:38:47,810
private side comm<font color="#E5E5E5"> via facebook login</font>

696
00:38:44,020 --> 00:38:52,490
<font color="#E5E5E5">second attacker logs out the victim via</font>

697
00:38:47,810 --> 00:38:56,170
logout<font color="#E5E5E5"> CSRF third send victim Facebook</font>

698
00:38:52,490 --> 00:38:59,060
POC link<font color="#CCCCCC"> for this link sent</font>

699
00:38:56,170 --> 00:39:01,820
authorization code<font color="#E5E5E5"> to sub domain which</font>

700
00:38:59,060 --> 00:39:05,839
was under attackers control<font color="#E5E5E5"> which was</font>

701
00:39:01,820 --> 00:39:08,690
bought by attacker<font color="#E5E5E5"> in a paid plan v sub</font>

702
00:39:05,839 --> 00:39:11,270
domain<font color="#CCCCCC"> leave the URL to images</font><font color="#E5E5E5"> loaded</font>

703
00:39:08,690 --> 00:39:14,690
from attackers website via<font color="#E5E5E5"> referer</font>

704
00:39:11,270 --> 00:39:17,240
header<font color="#CCCCCC"> vi attacker can then</font><font color="#E5E5E5"> use the</font>

705
00:39:14,690 --> 00:39:20,030
stolen<font color="#CCCCCC"> authorization code login into</font>

706
00:39:17,240 --> 00:39:26,359
<font color="#E5E5E5">victims account first hole account of</font>

707
00:39:20,030 --> 00:39:29,750
victim got compromised<font color="#E5E5E5"> now</font><font color="#CCCCCC"> this is the</font>

708
00:39:26,359 --> 00:39:32,119
final POC link here note the state

709
00:39:29,750 --> 00:39:35,180
parameter<font color="#E5E5E5"> which</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> manipulated to</font>

710
00:39:32,119 --> 00:39:37,970
redirect<font color="#E5E5E5"> to my sub domain which I</font>

711
00:39:35,180 --> 00:39:41,690
purchased<font color="#E5E5E5"> in the paid plan here</font>

712
00:39:37,970 --> 00:39:43,759
I also backtracked backtrack the in the

713
00:39:41,690 --> 00:39:48,109
state<font color="#CCCCCC"> parameter to just point</font><font color="#E5E5E5"> to the</font>

714
00:39:43,760 --> 00:39:50,810
<font color="#E5E5E5">home page of</font><font color="#CCCCCC"> my site</font><font color="#E5E5E5"> so finally it was</font>

715
00:39:48,109 --> 00:39:53,630
sending<font color="#E5E5E5"> the authorization code to sub</font>

716
00:39:50,810 --> 00:39:56,089
domain dot private<font color="#CCCCCC"> side comm slash code</font>

717
00:39:53,630 --> 00:39:58,520
is equal to authorization code<font color="#E5E5E5"> so I</font>

718
00:39:56,089 --> 00:40:04,250
could use this<font color="#CCCCCC"> authorization code to</font>

719
00:39:58,520 --> 00:40:06,109
login and<font color="#CCCCCC"> to victims account so bounty</font>

720
00:40:04,250 --> 00:40:09,109
ordered for this bug was thousand

721
00:40:06,109 --> 00:40:12,100
dollars<font color="#E5E5E5"> this was the maximum bounty</font>

722
00:40:09,109 --> 00:40:20,000
ordered by the program

723
00:40:12,100 --> 00:40:23,450
now let's move on<font color="#E5E5E5"> to next section CSRF</font>

724
00:40:20,000 --> 00:40:30,310
let's explore<font color="#E5E5E5"> CSRF bug now what we do</font>

725
00:40:23,450 --> 00:40:33,319
the secret methodology and a history in

726
00:40:30,310 --> 00:40:36,230
<font color="#E5E5E5">CSRF what we do is a main goal is to</font>

727
00:40:33,320 --> 00:40:39,200
<font color="#E5E5E5">connect attackers Facebook account to</font>

728
00:40:36,230 --> 00:40:42,410
users account<font color="#E5E5E5"> then</font><font color="#CCCCCC"> login we're attack as</font>

729
00:40:39,200 --> 00:40:45,319
Facebook account into users account here

730
00:40:42,410 --> 00:40:49,029
<font color="#E5E5E5">you can replace Facebook with any third</font>

731
00:40:45,320 --> 00:40:52,040
<font color="#E5E5E5">party integration of your choice now</font>

732
00:40:49,030 --> 00:40:55,370
look at the<font color="#E5E5E5"> Facebook authorization link</font>

733
00:40:52,040 --> 00:40:59,330
<font color="#E5E5E5">in this link there's a state</font><font color="#CCCCCC"> param</font><font color="#E5E5E5"> which</font>

734
00:40:55,370 --> 00:41:02,299
is<font color="#CCCCCC"> NDC SRF parameter if the state</font>

735
00:40:59,330 --> 00:41:06,500
<font color="#E5E5E5">parents value is guessable</font><font color="#CCCCCC"> or state</font>

736
00:41:02,300 --> 00:41:09,920
parameter<font color="#E5E5E5"> is not used or its value is</font>

737
00:41:06,500 --> 00:41:13,780
not validated<font color="#E5E5E5"> then the integration is</font>

738
00:41:09,920 --> 00:41:17,870
vulnerable to<font color="#E5E5E5"> CSRF let's walk through</font>

739
00:41:13,780 --> 00:41:24,170
secret<font color="#E5E5E5"> methodology and baby step to find</font>

740
00:41:17,870 --> 00:41:27,140
such<font color="#E5E5E5"> CSRF bugs easily so the secret</font>

741
00:41:24,170 --> 00:41:30,490
methodology first check<font color="#CCCCCC"> of state</font>

742
00:41:27,140 --> 00:41:34,490
parameter<font color="#CCCCCC"> an OAuth authorization link is</font>

743
00:41:30,490 --> 00:41:37,850
validated<font color="#E5E5E5"> second derive yourself a valid</font>

744
00:41:34,490 --> 00:41:39,220
authorization<font color="#CCCCCC"> cold link and do not use</font>

745
00:41:37,850 --> 00:41:42,470
it

746
00:41:39,220 --> 00:41:45,350
third send<font color="#E5E5E5"> this active authorization</font>

747
00:41:42,470 --> 00:41:47,839
code link to the victim food your

748
00:41:45,350 --> 00:41:51,670
account will get connected with<font color="#E5E5E5"> victim's</font>

749
00:41:47,840 --> 00:41:54,590
account<font color="#E5E5E5"> now you can log in via Facebook</font>

750
00:41:51,670 --> 00:41:57,680
<font color="#CCCCCC">by your</font><font color="#E5E5E5"> own account</font><font color="#CCCCCC"> and to victim's</font>

751
00:41:54,590 --> 00:42:00,500
account<font color="#E5E5E5"> these are normal steps which one</font>

752
00:41:57,680 --> 00:42:03,290
needs<font color="#CCCCCC"> to follow</font><font color="#E5E5E5"> to CSRF connect your</font>

753
00:42:00,500 --> 00:42:06,620
Facebook<font color="#CCCCCC"> account to</font><font color="#E5E5E5"> victims account so</font>

754
00:42:03,290 --> 00:42:13,430
<font color="#E5E5E5">let's move on and</font><font color="#CCCCCC"> see a case study</font><font color="#E5E5E5"> of</font>

755
00:42:06,620 --> 00:42:15,890
this type of<font color="#E5E5E5"> bug so I found a bug which</font>

756
00:42:13,430 --> 00:42:18,230
allowed connecting<font color="#CCCCCC"> attackers account</font><font color="#E5E5E5"> to</font>

757
00:42:15,890 --> 00:42:20,240
<font color="#E5E5E5">victims account due to missing</font>

758
00:42:18,230 --> 00:42:22,760
validation<font color="#E5E5E5"> of state</font><font color="#CCCCCC"> parameter</font><font color="#E5E5E5"> in</font>

759
00:42:20,240 --> 00:42:24,169
<font color="#CCCCCC">Facebook app it was found</font><font color="#E5E5E5"> by me on a</font>

760
00:42:22,760 --> 00:42:27,380
private<font color="#E5E5E5"> program so</font>

761
00:42:24,170 --> 00:42:32,480
I cannot discuss private details about

762
00:42:27,380 --> 00:42:35,809
the company<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> little bit background</font>

763
00:42:32,480 --> 00:42:37,790
information about<font color="#E5E5E5"> the company company</font>

764
00:42:35,809 --> 00:42:41,599
allowed connecting your Facebook account

765
00:42:37,790 --> 00:42:43,430
<font color="#CCCCCC">with the application now any Content</font><font color="#E5E5E5"> see</font>

766
00:42:41,599 --> 00:42:47,180
<font color="#CCCCCC">if then the application will get</font><font color="#E5E5E5"> auto</font>

767
00:42:43,430 --> 00:42:49,669
shared to Facebook I observed that<font color="#CCCCCC"> the</font>

768
00:42:47,180 --> 00:42:53,720
street parameter in the<font color="#E5E5E5"> earth link never</font>

769
00:42:49,670 --> 00:42:56,599
got validated so now<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> apply my</font>

770
00:42:53,720 --> 00:43:01,939
secret methodology<font color="#E5E5E5"> and try to connect my</font>

771
00:42:56,599 --> 00:43:06,710
<font color="#E5E5E5">Facebook</font><font color="#CCCCCC"> account to wisdoms account so</font>

772
00:43:01,940 --> 00:43:10,119
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> attack workflow first</font><font color="#CCCCCC"> attacker</font>

773
00:43:06,710 --> 00:43:12,680
initiates connect with Facebook flow

774
00:43:10,119 --> 00:43:15,380
second attacker derives a valid

775
00:43:12,680 --> 00:43:18,410
<font color="#E5E5E5">authorization code link and doesn't use</font>

776
00:43:15,380 --> 00:43:21,619
<font color="#E5E5E5">it third victim has logged</font><font color="#CCCCCC"> an into</font>

777
00:43:18,410 --> 00:43:23,899
private<font color="#E5E5E5"> site</font><font color="#CCCCCC"> calm foot attacker sends</font>

778
00:43:21,619 --> 00:43:27,260
<font color="#E5E5E5">active authorization code link to the</font>

779
00:43:23,900 --> 00:43:29,770
victim fifth<font color="#E5E5E5"> attackers Facebook account</font>

780
00:43:27,260 --> 00:43:33,020
<font color="#CCCCCC">has now</font><font color="#E5E5E5"> connected to victims account</font>

781
00:43:29,770 --> 00:43:35,630
<font color="#E5E5E5">sixth and in content saved or posted in</font>

782
00:43:33,020 --> 00:43:38,210
<font color="#CCCCCC">victim's account</font><font color="#E5E5E5"> will get shared</font><font color="#CCCCCC"> two</font>

783
00:43:35,630 --> 00:43:41,299
<font color="#CCCCCC">attackers Facebook account first</font>

784
00:43:38,210 --> 00:43:46,250
attacker got access to<font color="#CCCCCC"> the private</font>

785
00:43:41,299 --> 00:43:52,549
content of victim now let's<font color="#E5E5E5"> explore the</font>

786
00:43:46,250 --> 00:43:55,190
<font color="#CCCCCC">POC that's the final POC first attacker</font>

787
00:43:52,549 --> 00:43:59,030
gets an authorization code<font color="#E5E5E5"> and he</font>

788
00:43:55,190 --> 00:44:01,099
doesn't<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it you can see these two</font>

789
00:43:59,030 --> 00:44:04,250
links<font color="#E5E5E5"> and in the second link there's an</font>

790
00:44:01,099 --> 00:44:07,309
authorization<font color="#E5E5E5"> cool do not go forward</font>

791
00:44:04,250 --> 00:44:10,010
with<font color="#E5E5E5"> this request you just save it now</font>

792
00:44:07,309 --> 00:44:13,510
send this link to victim attacker<font color="#CCCCCC"> since</font>

793
00:44:10,010 --> 00:44:16,040
this link to the victim so now<font color="#CCCCCC"> attackers</font>

794
00:44:13,510 --> 00:44:18,470
Facebook account<font color="#CCCCCC"> will get connected</font><font color="#E5E5E5"> to</font>

795
00:44:16,040 --> 00:44:20,540
<font color="#E5E5E5">victims account and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> indirectly</font>

796
00:44:18,470 --> 00:44:22,839
anything posted on victims account will

797
00:44:20,540 --> 00:44:25,790
get shared on attackers account

798
00:44:22,839 --> 00:44:28,040
<font color="#E5E5E5">attackers Facebook account first</font>

799
00:44:25,790 --> 00:44:34,099
<font color="#CCCCCC">attacker is getting access to</font><font color="#E5E5E5"> private</font>

800
00:44:28,040 --> 00:44:37,460
content of the victim now<font color="#E5E5E5"> bounty for</font>

801
00:44:34,099 --> 00:44:38,040
this bug was nothing<font color="#E5E5E5"> because someone</font>

802
00:44:37,460 --> 00:44:42,450
already

803
00:44:38,040 --> 00:44:48,870
<font color="#CCCCCC">putted</font><font color="#E5E5E5"> this bug now let's move on to</font>

804
00:44:42,450 --> 00:44:51,779
next section token impersonation what we

805
00:44:48,870 --> 00:44:59,580
do the secret mythology and<font color="#CCCCCC"> case</font><font color="#E5E5E5"> study</font>

806
00:44:51,780 --> 00:45:02,700
<font color="#E5E5E5">to support this in token impersonation</font>

807
00:44:59,580 --> 00:45:05,310
main goal is to<font color="#E5E5E5"> find</font><font color="#CCCCCC"> third</font><font color="#E5E5E5"> party</font>

808
00:45:02,700 --> 00:45:07,770
integrations in the website<font color="#E5E5E5"> and then get</font>

809
00:45:05,310 --> 00:45:10,740
victims<font color="#E5E5E5"> valid</font><font color="#CCCCCC"> access token</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> a</font>

810
00:45:07,770 --> 00:45:12,690
<font color="#E5E5E5">different app and pass the access</font><font color="#CCCCCC"> token</font>

811
00:45:10,740 --> 00:45:16,350
to<font color="#E5E5E5"> login</font><font color="#CCCCCC"> endpoint and bypass</font>

812
00:45:12,690 --> 00:45:19,650
authentication<font color="#E5E5E5"> so first get a valid</font>

813
00:45:16,350 --> 00:45:21,690
<font color="#CCCCCC">access token second pass access token of</font>

814
00:45:19,650 --> 00:45:24,750
the victim of different app to the login

815
00:45:21,690 --> 00:45:29,250
<font color="#CCCCCC">endpoint and get unauthorized access to</font>

816
00:45:24,750 --> 00:45:33,860
<font color="#CCCCCC">the</font><font color="#E5E5E5"> account let's walk through secret</font>

817
00:45:29,250 --> 00:45:33,860
methodology to find such bugs easily

818
00:45:34,550 --> 00:45:43,200
first check if<font color="#E5E5E5"> login endpoint accepts</font>

819
00:45:39,450 --> 00:45:46,140
access token directly second derive an

820
00:45:43,200 --> 00:45:49,589
access token from<font color="#E5E5E5"> a different app third</font>

821
00:45:46,140 --> 00:45:52,379
<font color="#E5E5E5">pass it on to the login</font><font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> if you</font>

822
00:45:49,590 --> 00:45:54,020
<font color="#CCCCCC">are able to log</font><font color="#E5E5E5"> in use an</font><font color="#CCCCCC"> XS token</font><font color="#E5E5E5"> from</font>

823
00:45:52,380 --> 00:45:56,940
a different<font color="#E5E5E5"> app then it's a</font>

824
00:45:54,020 --> 00:45:59,610
authentication bypass bug these are

825
00:45:56,940 --> 00:46:03,720
normal steps<font color="#E5E5E5"> which needs to be followed</font>

826
00:45:59,610 --> 00:46:07,320
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> such type of bugs let's take a</font>

827
00:46:03,720 --> 00:46:10,830
case study<font color="#E5E5E5"> about this I found odd</font>

828
00:46:07,320 --> 00:46:13,320
<font color="#CCCCCC">indication bypass bug by using any</font><font color="#E5E5E5"> valid</font>

829
00:46:10,830 --> 00:46:16,259
access token to<font color="#E5E5E5"> log in and do the app</font>

830
00:46:13,320 --> 00:46:20,510
this was found<font color="#E5E5E5"> on a private program so I</font>

831
00:46:16,260 --> 00:46:20,510
cannot share details about the company

832
00:46:22,010 --> 00:46:27,350
little background<font color="#E5E5E5"> information about the</font>

833
00:46:24,840 --> 00:46:31,020
app company used log in with Facebook

834
00:46:27,350 --> 00:46:37,110
account functionality and they were

835
00:46:31,020 --> 00:46:39,900
using<font color="#E5E5E5"> access tokens to directly</font><font color="#CCCCCC"> login so</font>

836
00:46:37,110 --> 00:46:42,990
applying the secret methodology first

837
00:46:39,900 --> 00:46:47,760
steps is to<font color="#CCCCCC"> check if login n pointers</font>

838
00:46:42,990 --> 00:46:51,120
using access<font color="#E5E5E5"> tokens to log in and yes it</font>

839
00:46:47,760 --> 00:46:51,990
was using<font color="#CCCCCC"> Facebook access tokens</font><font color="#E5E5E5"> now I</font>

840
00:46:51,120 --> 00:46:54,960
can<font color="#E5E5E5"> just</font>

841
00:46:51,990 --> 00:47:01,259
my secret<font color="#CCCCCC"> Merlot G</font><font color="#E5E5E5"> and try second and</font>

842
00:46:54,960 --> 00:47:03,930
third step so<font color="#CCCCCC"> attack workflow first</font>

843
00:47:01,260 --> 00:47:07,140
<font color="#CCCCCC">attacker derives an access token for the</font>

844
00:47:03,930 --> 00:47:08,819
<font color="#E5E5E5">user from a different</font><font color="#CCCCCC"> app second</font>

845
00:47:07,140 --> 00:47:15,750
attacker uses her to<font color="#E5E5E5"> bypass</font>

846
00:47:08,820 --> 00:47:18,240
authentication<font color="#E5E5E5"> let's see the POC here</font>

847
00:47:15,750 --> 00:47:21,360
this is the request made by the

848
00:47:18,240 --> 00:47:24,839
application<font color="#E5E5E5"> which used</font><font color="#CCCCCC"> Facebook's</font><font color="#E5E5E5"> access</font>

849
00:47:21,360 --> 00:47:28,230
token to<font color="#CCCCCC"> login</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to use</font>

850
00:47:24,840 --> 00:47:31,050
any access token of the same user<font color="#E5E5E5"> from a</font>

851
00:47:28,230 --> 00:47:33,690
<font color="#CCCCCC">different Facebook</font><font color="#E5E5E5"> app and then bypass</font>

852
00:47:31,050 --> 00:47:38,760
login<font color="#E5E5E5"> so it would log in and</font><font color="#CCCCCC"> into the</font>

853
00:47:33,690 --> 00:47:40,530
users account<font color="#CCCCCC"> directly now bounty</font>

854
00:47:38,760 --> 00:47:43,410
ordered for this book was thousand

855
00:47:40,530 --> 00:47:46,050
dollars<font color="#E5E5E5"> and this was the</font><font color="#CCCCCC"> maximum bounty</font>

856
00:47:43,410 --> 00:47:48,180
awarded by the program but the bug was

857
00:47:46,050 --> 00:47:54,869
critical<font color="#CCCCCC"> for them as it allowed to</font>

858
00:47:48,180 --> 00:47:58,319
<font color="#CCCCCC">bypass authentication now go to</font>

859
00:47:54,869 --> 00:48:01,109
conclusion these are three secret

860
00:47:58,320 --> 00:48:03,859
techniques to use<font color="#E5E5E5"> when</font><font color="#CCCCCC"> been testing any</font>

861
00:48:01,109 --> 00:48:08,130
<font color="#E5E5E5">third party integrations on a website</font>

862
00:48:03,859 --> 00:48:09,930
<font color="#E5E5E5">first is token code stealing where we</font>

863
00:48:08,130 --> 00:48:14,390
<font color="#E5E5E5">try to steal access tokens or</font>

864
00:48:09,930 --> 00:48:18,270
authorization force and use it for<font color="#E5E5E5"> login</font>

865
00:48:14,390 --> 00:48:20,759
<font color="#E5E5E5">second is CSRF where we try to connect</font>

866
00:48:18,270 --> 00:48:23,609
attackers account to victims account and

867
00:48:20,760 --> 00:48:26,540
then<font color="#CCCCCC"> takeover victim's account</font><font color="#E5E5E5"> via logon</font>

868
00:48:23,609 --> 00:48:29,640
in<font color="#CCCCCC"> and two-wire</font><font color="#E5E5E5"> attackers account</font>

869
00:48:26,540 --> 00:48:32,730
through this token impersonation<font color="#CCCCCC"> where</font>

870
00:48:29,640 --> 00:48:35,670
<font color="#CCCCCC">we try</font><font color="#E5E5E5"> to bypass authentication by using</font>

871
00:48:32,730 --> 00:48:43,350
<font color="#E5E5E5">access tokens generating from different</font>

872
00:48:35,670 --> 00:48:46,650
apps<font color="#E5E5E5"> now message for bug hunters to</font>

873
00:48:43,350 --> 00:48:49,950
<font color="#E5E5E5">learn more you</font><font color="#CCCCCC"> must learn more so invest</font>

874
00:48:46,650 --> 00:48:52,980
time in<font color="#E5E5E5"> learning more I applied this in</font>

875
00:48:49,950 --> 00:48:57,390
my daily<font color="#CCCCCC"> life and you should</font><font color="#E5E5E5"> also apply</font>

876
00:48:52,980 --> 00:49:00,050
<font color="#E5E5E5">this and learn</font><font color="#CCCCCC"> new concepts so that</font><font color="#E5E5E5"> you</font>

877
00:48:57,390 --> 00:49:03,950
can do<font color="#E5E5E5"> good and help the world secure</font>

878
00:49:00,050 --> 00:49:03,950
makes<font color="#E5E5E5"> me secure</font>

879
00:49:04,040 --> 00:49:09,650
now<font color="#E5E5E5"> thanks I'd like to first of all</font>

880
00:49:08,090 --> 00:49:12,590
thank<font color="#E5E5E5"> you</font>

881
00:49:09,650 --> 00:49:15,860
thank<font color="#E5E5E5"> bugcrowd team</font><font color="#CCCCCC"> to for hosting this</font>

882
00:49:12,590 --> 00:49:17,740
conference<font color="#E5E5E5"> secondly I'd like to thank</font>

883
00:49:15,860 --> 00:49:19,730
the audience<font color="#E5E5E5"> and everyone who is</font>

884
00:49:17,740 --> 00:49:24,319
<font color="#E5E5E5">listening to me</font>

885
00:49:19,730 --> 00:49:26,150
<font color="#CCCCCC">for so long and you can check out</font><font color="#E5E5E5"> my</font>

886
00:49:24,320 --> 00:49:30,140
trainings on training<font color="#E5E5E5"> dot</font><font color="#CCCCCC"> parathas</font>

887
00:49:26,150 --> 00:49:33,100
<font color="#E5E5E5">enforcing calm also if you have any</font>

888
00:49:30,140 --> 00:49:40,240
questions<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> follow</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> you on</font>

889
00:49:33,100 --> 00:49:40,240
<font color="#CCCCCC">bugcrowd</font><font color="#E5E5E5"> forums so that's it thanks</font>

