1
00:00:06,310 --> 00:00:12,399
okay folks time for the next talk it's

2
00:00:08,770 --> 00:00:14,349
sin Voigtlander okay userland Colonel

3
00:00:12,400 --> 00:00:17,680
talking about researching iPhone space

4
00:00:14,349 --> 00:00:20,529
band I'm very excited to hear this talk

5
00:00:17,680 --> 00:00:22,570
I think the the whole idea of mobile

6
00:00:20,529 --> 00:00:24,970
hardware security research is one that

7
00:00:22,570 --> 00:00:26,080
yeah the problems that are causes or the

8
00:00:24,970 --> 00:00:27,750
vulnerabilities caused are well

9
00:00:26,080 --> 00:00:29,948
understood but you know how you get into

10
00:00:27,750 --> 00:00:31,060
actually understanding where things are

11
00:00:29,949 --> 00:00:33,970
broken and how that can be fixed

12
00:00:31,060 --> 00:00:35,710
probably isn't so looking forward to

13
00:00:33,970 --> 00:00:39,390
some illuminating us all on that topic

14
00:00:35,710 --> 00:00:39,390
right now I'll end it up to you thanks

15
00:01:23,939 --> 00:01:28,320
research based band just because it's

16
00:01:32,170 --> 00:01:35,260
[Music]

17
00:01:40,829 --> 00:01:47,079
Jason from the team you're coming

18
00:01:43,060 --> 00:01:49,329
through really in and out and the volume

19
00:01:47,079 --> 00:01:50,619
super low can you check your mic

20
00:01:49,329 --> 00:01:53,548
settings real quick make sure you're

21
00:01:50,619 --> 00:01:53,549
coming into the right Mike

22
00:02:04,180 --> 00:02:13,680
I'm sorry fools pay any better now

23
00:02:13,980 --> 00:02:21,410
okay so just continue from here so the

24
00:02:18,850 --> 00:02:26,009
reason why I started to research

25
00:02:21,410 --> 00:02:26,009
[Music]

26
00:02:31,680 --> 00:02:35,970
documentation about how they communicate

27
00:02:41,340 --> 00:02:51,430
separated system this system also means

28
00:02:48,640 --> 00:02:53,859
that the users no control about it and

29
00:02:51,430 --> 00:02:56,110
no control also means that you cannot

30
00:02:53,860 --> 00:03:00,160
verify the integrity and security of

31
00:02:56,110 --> 00:03:02,430
device which makes it a very huge tech

32
00:03:00,160 --> 00:03:05,940
factor with a lot of problems to

33
00:03:02,430 --> 00:03:11,190
companies concerns

34
00:03:05,940 --> 00:03:15,340
under attack by the devices that you're

35
00:03:11,190 --> 00:03:17,109
so it's also a radio communication which

36
00:03:15,340 --> 00:03:19,570
makes it a huge attack factor as well

37
00:03:17,110 --> 00:03:21,850
because they can one corrupted baseband

38
00:03:19,570 --> 00:03:25,769
can work its way to corrupting order

39
00:03:21,850 --> 00:03:27,700
basements as well the likelihood of

40
00:03:25,770 --> 00:03:30,820
vulnerability is existing in baek's

41
00:03:27,700 --> 00:03:34,869
about baseband is high this is because

42
00:03:30,820 --> 00:03:38,760
it's black box no code is public so many

43
00:03:34,870 --> 00:03:40,960
people can discover abilities only with

44
00:03:38,760 --> 00:03:42,970
expertise knowledge about the basement

45
00:03:40,960 --> 00:03:46,810
so my talk is also to make it easier

46
00:03:42,970 --> 00:03:50,350
researchers in the future to access my

47
00:03:46,810 --> 00:03:53,710
basement my eventual goal was creating

48
00:03:50,350 --> 00:03:56,260
custom for alpha basement chips so that

49
00:03:53,710 --> 00:03:59,500
as the seven attacks can be prevented

50
00:03:56,260 --> 00:04:02,799
with the firewall unfortunately this was

51
00:03:59,500 --> 00:04:05,110
to complicate it because it requires to

52
00:04:02,800 --> 00:04:07,600
know everything about the hardware of

53
00:04:05,110 --> 00:04:11,490
the basement but I've been able to

54
00:04:07,600 --> 00:04:11,489
research lots of discover a lot

55
00:04:16,130 --> 00:04:21,709
what a spaceman it's a chip on your

56
00:04:19,149 --> 00:04:25,609
mobile device in my case I researched

57
00:04:21,709 --> 00:04:27,800
the baseband used and iPhones it's

58
00:04:25,610 --> 00:04:30,050
completely separated in iPhones from the

59
00:04:27,800 --> 00:04:32,450
rest of the hardware and the rest of the

60
00:04:30,050 --> 00:04:35,240
operating system so it runs its own

61
00:04:32,450 --> 00:04:37,700
operating system it uses its own secure

62
00:04:35,240 --> 00:04:40,970
read-only memory its own random access

63
00:04:37,700 --> 00:04:43,280
memory flash chip and its own processor

64
00:04:40,970 --> 00:04:46,370
I'll talk a bit more about processor

65
00:04:43,280 --> 00:04:48,020
later in this talk so what the basement

66
00:04:46,370 --> 00:04:50,180
is mainly used for is cellular

67
00:04:48,020 --> 00:04:53,049
communication so when you make a call

68
00:04:50,180 --> 00:04:55,700
when you text a friend or a colleague

69
00:04:53,050 --> 00:04:58,540
when you access the internet over LTE

70
00:04:55,700 --> 00:05:01,039
that is all done by debasement chip and

71
00:04:58,540 --> 00:05:04,640
the only way that basement chip is

72
00:05:01,040 --> 00:05:08,960
managed on the mobile operating system

73
00:05:04,640 --> 00:05:11,090
is true kernel drivers a demo basically

74
00:05:08,960 --> 00:05:15,739
interacting on the high-speed USB

75
00:05:11,090 --> 00:05:19,250
interfaces of this basement device and

76
00:05:15,740 --> 00:05:21,500
it also is a modem so you can send

77
00:05:19,250 --> 00:05:23,590
carryout commands to the modem at the

78
00:05:21,500 --> 00:05:27,500
basement or in the stands

79
00:05:23,590 --> 00:05:31,070
so the baseband and 32-bit mobile Apple

80
00:05:27,500 --> 00:05:34,180
devices is a Qualcomm chip in most cases

81
00:05:31,070 --> 00:05:36,740
all the devices used Intel chips but

82
00:05:34,180 --> 00:05:41,630
everything after the iPhone cheechee

83
00:05:36,740 --> 00:05:43,940
pretty much uses a Qualcomm chip one

84
00:05:41,630 --> 00:05:45,919
thing that was very special about such

85
00:05:43,940 --> 00:05:51,010
early chips or crop was that they

86
00:05:45,919 --> 00:05:54,940
supported voice over IP LTE calls and

87
00:05:51,010 --> 00:06:00,260
the architecture is mostly are 32-bit

88
00:05:54,940 --> 00:06:03,200
but the newer iPhone iPhone 5 from the

89
00:06:00,260 --> 00:06:06,830
32-bit Apple devices uses the hexagon

90
00:06:03,200 --> 00:06:08,960
DSP processor which is from Qualcomm

91
00:06:06,830 --> 00:06:12,260
itself they developed this processor and

92
00:06:08,960 --> 00:06:15,440
this processor also has some increased

93
00:06:12,260 --> 00:06:20,360
security mechanisms to prevent execution

94
00:06:15,440 --> 00:06:23,030
of certain battery communications for

95
00:06:20,360 --> 00:06:26,210
the base band on iOS Apple's operating

96
00:06:23,030 --> 00:06:27,739
system go through to demand calm calm

97
00:06:26,210 --> 00:06:30,049
calm Center

98
00:06:27,740 --> 00:06:32,150
to the kernel extension for the rest

99
00:06:30,050 --> 00:06:37,460
there is no references to the base band

100
00:06:32,150 --> 00:06:40,070
or whatsoever so to learn more about

101
00:06:37,460 --> 00:06:43,310
this basement shape and Apple devices I

102
00:06:40,070 --> 00:06:46,250
started to look at Apple firmware in the

103
00:06:43,310 --> 00:06:49,010
Apple firmware IPSW which is the format

104
00:06:46,250 --> 00:06:51,980
used by Apple and it's basically just

105
00:06:49,010 --> 00:06:54,039
chip zip file that you can download

106
00:06:51,980 --> 00:06:59,570
through iTunes

107
00:06:54,040 --> 00:07:03,650
there was another zip file called PDF W

108
00:06:59,570 --> 00:07:06,440
which is the baseband firmware and in

109
00:07:03,650 --> 00:07:09,940
that basement firmware another zip file

110
00:07:06,440 --> 00:07:14,630
as I said you can find binary images

111
00:07:09,940 --> 00:07:16,310
with an info property list file an XML

112
00:07:14,630 --> 00:07:19,610
file containing information about the

113
00:07:16,310 --> 00:07:24,920
images like the bundle ID which is just

114
00:07:19,610 --> 00:07:28,190
reverse DNS string and subversion

115
00:07:24,920 --> 00:07:38,060
information probably because Apple needs

116
00:07:28,190 --> 00:07:41,660
to know a lot of each device so the

117
00:07:38,060 --> 00:07:44,420
binary images are 32 bit elf binaries

118
00:07:41,660 --> 00:07:46,910
and that's good pretty convenient I'm

119
00:07:44,420 --> 00:07:50,540
taking a look because the elf for merge

120
00:07:46,910 --> 00:07:52,730
has a header containing a lot about the

121
00:07:50,540 --> 00:07:56,750
references and symbols used in the

122
00:07:52,730 --> 00:07:59,930
binary sadly the symbol tables and the

123
00:07:56,750 --> 00:08:02,530
simple segments were left out but a lot

124
00:07:59,930 --> 00:08:06,710
of information about the size of the

125
00:08:02,530 --> 00:08:11,619
segments and the codes still was in

126
00:08:06,710 --> 00:08:14,810
there what I also found through pin work

127
00:08:11,620 --> 00:08:17,600
in work is the fighting utility that you

128
00:08:14,810 --> 00:08:19,370
can use to examine firmware when you do

129
00:08:17,600 --> 00:08:21,920
not know what from rarely actually is

130
00:08:19,370 --> 00:08:23,810
you can use it on any file and it will

131
00:08:21,920 --> 00:08:28,130
tell you the offset of certain file

132
00:08:23,810 --> 00:08:30,290
types in a file so that you can learn a

133
00:08:28,130 --> 00:08:35,689
bit more about the file you can also

134
00:08:30,290 --> 00:08:38,630
look at the entropy for finding a lot

135
00:08:35,690 --> 00:08:40,700
about the structure of the file and I

136
00:08:38,630 --> 00:08:45,280
used it and I found

137
00:08:40,700 --> 00:08:47,480
that most basement images also had

138
00:08:45,280 --> 00:08:49,660
certificate at the ads so that means

139
00:08:47,480 --> 00:08:56,590
that they work outside with a ticket and

140
00:08:49,660 --> 00:09:00,110
certificates using sha-256 signatures

141
00:08:56,590 --> 00:09:02,180
and in the main basement image that you

142
00:09:00,110 --> 00:09:06,410
cannot see in the picture here and the

143
00:09:02,180 --> 00:09:10,270
presentation but in another I will show

144
00:09:06,410 --> 00:09:12,949
you it again you can see the AMS s

145
00:09:10,270 --> 00:09:15,199
basement image which is the operating

146
00:09:12,950 --> 00:09:18,860
system of the basement and it's build

147
00:09:15,200 --> 00:09:21,410
upon the ok L for kernel which is a

148
00:09:18,860 --> 00:09:25,940
hyper personal I'll talk about it more

149
00:09:21,410 --> 00:09:28,310
later so that operating system the okey

150
00:09:25,940 --> 00:09:31,430
L for kernel is just a custom

151
00:09:28,310 --> 00:09:35,930
proprietary fire variant of the original

152
00:09:31,430 --> 00:09:39,709
ok L for kernel and they also seem to

153
00:09:35,930 --> 00:09:42,339
implement some Linux kernel but you

154
00:09:39,710 --> 00:09:46,330
cannot see that as this is in the

155
00:09:42,340 --> 00:09:51,890
protected random access memory sorry

156
00:09:46,330 --> 00:09:53,690
protected memory internal memory so what

157
00:09:51,890 --> 00:09:55,610
I found from taking a look at this

158
00:09:53,690 --> 00:09:58,940
operating system is that there are

159
00:09:55,610 --> 00:10:03,100
shared memory devices over buses in this

160
00:09:58,940 --> 00:10:06,290
case high-speed USB that you can access

161
00:10:03,100 --> 00:10:08,870
except they are all in their own context

162
00:10:06,290 --> 00:10:13,790
as you can see here in the image on the

163
00:10:08,870 --> 00:10:17,000
right bottom you can see the do care for

164
00:10:13,790 --> 00:10:19,310
kernel starsk as it is a hypo first is

165
00:10:17,000 --> 00:10:20,930
to divide all drivers and different

166
00:10:19,310 --> 00:10:22,489
contacts and all apps and different

167
00:10:20,930 --> 00:10:24,979
contexts so that they are completely

168
00:10:22,490 --> 00:10:30,920
separated from each other prosecutor

169
00:10:24,980 --> 00:10:33,560
reasons now I'll show you a bit how this

170
00:10:30,920 --> 00:10:38,930
kernel looks like in either because Ida

171
00:10:33,560 --> 00:10:42,560
was pretty much able to get a lot of a

172
00:10:38,930 --> 00:10:48,380
lot of functions back from the the

173
00:10:42,560 --> 00:10:50,599
kernel one sec yeah so when looking at

174
00:10:48,380 --> 00:10:52,250
this you can immediately see that this

175
00:10:50,600 --> 00:10:54,020
is an arm image these are all

176
00:10:52,250 --> 00:10:56,720
instructions

177
00:10:54,020 --> 00:11:00,110
yeah references to after you air but

178
00:10:56,720 --> 00:11:03,020
let's take a start at the header at the

179
00:11:00,110 --> 00:11:05,660
header points you see that it tries to

180
00:11:03,020 --> 00:11:09,079
load some data there you go a little bit

181
00:11:05,660 --> 00:11:13,610
below and you see that it doesn't memory

182
00:11:09,080 --> 00:11:15,590
initialization I've had to type - I had

183
00:11:13,610 --> 00:11:19,040
a file - where I had the symbols and

184
00:11:15,590 --> 00:11:20,720
everything but I lost it sadly anyway as

185
00:11:19,040 --> 00:11:22,579
you can see the year is the first

186
00:11:20,720 --> 00:11:26,320
reference that tells you that this is

187
00:11:22,580 --> 00:11:32,990
the OTL for a kernel and this is the

188
00:11:26,320 --> 00:11:36,530
initialization and then this is very

189
00:11:32,990 --> 00:11:39,560
important when an error is detected this

190
00:11:36,530 --> 00:11:43,520
basement device will enter download mode

191
00:11:39,560 --> 00:11:46,760
which is a special mode a protocol from

192
00:11:43,520 --> 00:11:48,920
Qualcomm for restoring whenever

193
00:11:46,760 --> 00:11:52,460
something goes wrong on the base bands

194
00:11:48,920 --> 00:11:54,439
so you can flash restore images and

195
00:11:52,460 --> 00:11:56,560
emergency images I'll talk about them

196
00:11:54,440 --> 00:12:00,230
later

197
00:11:56,560 --> 00:12:05,569
so looking further there are a lot of

198
00:12:00,230 --> 00:12:12,920
more references to functionality even

199
00:12:05,570 --> 00:12:15,980
metrics so let's go to the strengths as

200
00:12:12,920 --> 00:12:22,339
this might look a bit of complicated to

201
00:12:15,980 --> 00:12:24,500
you but you if I go to metrics it will

202
00:12:22,340 --> 00:12:27,380
come clear to you that they also keep

203
00:12:24,500 --> 00:12:29,300
some metrics only toys and you're all

204
00:12:27,380 --> 00:12:33,520
the kind of metrics that they keep which

205
00:12:29,300 --> 00:12:33,520
is surprisingly a lot of metrics

206
00:12:33,760 --> 00:12:39,319
validation that kind of information so

207
00:12:37,130 --> 00:12:41,720
this is something to look at you because

208
00:12:39,320 --> 00:12:47,090
it's very custom kernel of the oki'll

209
00:12:41,720 --> 00:12:49,540
forecast aversion so I also discovered a

210
00:12:47,090 --> 00:12:52,070
crashes will jump to and fiber DRAM

211
00:12:49,540 --> 00:12:56,569
instead of the filesystem which make is

212
00:12:52,070 --> 00:12:58,520
it a lot of a lot harder to fuss because

213
00:12:56,570 --> 00:13:00,350
the crash locks you won't be able to see

214
00:12:58,520 --> 00:13:03,380
you won't be able to see what registers

215
00:13:00,350 --> 00:13:07,250
contain values so you won't be able to

216
00:13:03,380 --> 00:13:09,470
identify debug crashes run a core

217
00:13:07,250 --> 00:13:11,209
and they did this probably because they

218
00:13:09,470 --> 00:13:13,759
do not want their firmware to be

219
00:13:11,209 --> 00:13:19,250
analyzed and stare architecture to be

220
00:13:13,759 --> 00:13:22,990
broken and malicious way so let's talk a

221
00:13:19,250 --> 00:13:26,629
bit about the boot stages of the

222
00:13:22,990 --> 00:13:29,300
debasement chip at first you have the

223
00:13:26,629 --> 00:13:31,759
boot roll and the boot rom as you know

224
00:13:29,300 --> 00:13:34,878
can only be flashed once so you cannot

225
00:13:31,759 --> 00:13:37,089
change anything in here and the boot rom

226
00:13:34,879 --> 00:13:40,310
could change the root certificate

227
00:13:37,089 --> 00:13:44,029
authority hash and also the root

228
00:13:40,310 --> 00:13:48,138
certificate authority certificate used

229
00:13:44,029 --> 00:13:50,810
for code signing so that is where code

230
00:13:48,139 --> 00:13:53,540
signing will compare against and you

231
00:13:50,810 --> 00:13:55,279
also have this bootloader on the boot

232
00:13:53,540 --> 00:13:57,769
ROM which is called the primary

233
00:13:55,279 --> 00:14:01,189
bootloader so in a primary boot loader

234
00:13:57,769 --> 00:14:04,459
loads the bootloader from internal

235
00:14:01,189 --> 00:14:07,490
memory and that bootloader has a

236
00:14:04,459 --> 00:14:09,800
signature and that loads a custom kernel

237
00:14:07,490 --> 00:14:12,230
so like the okay elf or kernel with the

238
00:14:09,800 --> 00:14:17,750
Lynx girdle but the Linux kernel runs

239
00:14:12,230 --> 00:14:20,589
outside the trusted memory and it also

240
00:14:17,750 --> 00:14:24,199
has a signature everything is go outside

241
00:14:20,589 --> 00:14:27,379
so how does this look you have an elf

242
00:14:24,199 --> 00:14:31,729
binary with a header executable code

243
00:14:27,379 --> 00:14:34,490
segments the signature of this codes the

244
00:14:31,730 --> 00:14:36,319
root certificate there's the special at

245
00:14:34,490 --> 00:14:40,069
the station certificates and some

246
00:14:36,319 --> 00:14:42,680
padding so this header also contains

247
00:14:40,069 --> 00:14:45,229
reference to the signature the

248
00:14:42,680 --> 00:14:48,109
destination where the code should go

249
00:14:45,230 --> 00:14:51,470
into the memory of the base bands the

250
00:14:48,110 --> 00:14:53,930
size of the image and the actual code so

251
00:14:51,470 --> 00:14:57,199
when taking a look at the actual elf

252
00:14:53,930 --> 00:15:02,569
header we learn that there are other

253
00:14:57,199 --> 00:15:05,449
references and well in many times of

254
00:15:02,569 --> 00:15:09,079
bootloader vulnerabilities one single

255
00:15:05,449 --> 00:15:12,979
mistake in parsing this header or having

256
00:15:09,079 --> 00:15:16,130
a wrong reference or having control over

257
00:15:12,980 --> 00:15:19,309
reference without it happen without it

258
00:15:16,130 --> 00:15:20,990
being on the code signing checks kept by

259
00:15:19,309 --> 00:15:24,530
Paul's the secure boot

260
00:15:20,990 --> 00:15:27,530
so that's why I displayed this header

261
00:15:24,530 --> 00:15:30,260
here there are a lot of offsets but

262
00:15:27,530 --> 00:15:33,760
Qualcomm states that they are actually

263
00:15:30,260 --> 00:15:37,189
validated I'll talk about that later

264
00:15:33,760 --> 00:15:42,010
there's the hash table segments which

265
00:15:37,190 --> 00:15:45,050
also contains the code signatures so

266
00:15:42,010 --> 00:15:47,420
about the hash table segment if the hash

267
00:15:45,050 --> 00:15:50,990
table segment to read signatures of each

268
00:15:47,420 --> 00:15:54,079
part of the binary and a certificate

269
00:15:50,990 --> 00:15:56,960
chain the certificate chain is basically

270
00:15:54,080 --> 00:15:59,590
three certificates the root certificates

271
00:15:56,960 --> 00:16:03,820
the CA certificate and the attestation

272
00:15:59,590 --> 00:16:06,980
certificate and each certificate

273
00:16:03,820 --> 00:16:09,380
verifies the signature of the next

274
00:16:06,980 --> 00:16:12,230
certificate in the chain so you have the

275
00:16:09,380 --> 00:16:15,470
root key hash that's in the bootrom the

276
00:16:12,230 --> 00:16:18,110
root key hash validates the root

277
00:16:15,470 --> 00:16:20,570
certificate that root certificate

278
00:16:18,110 --> 00:16:23,990
verifies the signature of the CA

279
00:16:20,570 --> 00:16:28,990
certificates etc etc and this is how to

280
00:16:23,990 --> 00:16:32,390
secure boot mechanism kind of works so

281
00:16:28,990 --> 00:16:35,510
how do they how does Qualcomm parse

282
00:16:32,390 --> 00:16:39,290
their basement firmware when it's loaded

283
00:16:35,510 --> 00:16:43,580
well from their own documentation I was

284
00:16:39,290 --> 00:16:45,860
able to get the following an image is

285
00:16:43,580 --> 00:16:48,200
loaded into internal memory and that

286
00:16:45,860 --> 00:16:50,660
internal memory is protected and trusted

287
00:16:48,200 --> 00:16:54,350
but only available when the device is on

288
00:16:50,660 --> 00:16:57,439
make sense right but external flash

289
00:16:54,350 --> 00:17:00,650
memory and random access memory are not

290
00:16:57,440 --> 00:17:02,960
trusted just an image must be

291
00:17:00,650 --> 00:17:05,810
authenticated to it in the trus binary

292
00:17:02,960 --> 00:17:07,910
in internal memory now I'll talk about

293
00:17:05,810 --> 00:17:11,510
that a little bit more because there's a

294
00:17:07,910 --> 00:17:14,660
thing that they that sounds a lot secure

295
00:17:11,510 --> 00:17:17,869
but it is actually not that secure and

296
00:17:14,660 --> 00:17:22,209
of course the elf headers and the health

297
00:17:17,869 --> 00:17:22,208
program headers are parsed and validated

298
00:17:25,450 --> 00:17:32,950
eventually the hashes of the code sign

299
00:17:28,230 --> 00:17:35,800
signing also validated and then here's

300
00:17:32,950 --> 00:17:39,580
the thing about that first boundary that

301
00:17:35,800 --> 00:17:42,220
trusted zone that you can get the image

302
00:17:39,580 --> 00:17:46,270
copy to an internal memory from for

303
00:17:42,220 --> 00:17:51,100
example flash memory to get it allowed

304
00:17:46,270 --> 00:17:53,110
to be executed so the destination what

305
00:17:51,100 --> 00:17:57,280
address the code should be copied to and

306
00:17:53,110 --> 00:18:00,070
the size of the code must be within a

307
00:17:57,280 --> 00:18:02,710
white list now the destination for

308
00:18:00,070 --> 00:18:07,179
reverse-engineering bootloader that the

309
00:18:02,710 --> 00:18:09,820
code is copied to a 0x8 well 32-bit

310
00:18:07,180 --> 00:18:15,190
integer starting with 0 x8 and the rest

311
00:18:09,820 --> 00:18:18,520
zeros and an addition that they add to

312
00:18:15,190 --> 00:18:22,800
that checks is that the Aramaic is also

313
00:18:18,520 --> 00:18:26,800
self evaluated so you cannot cross any

314
00:18:22,800 --> 00:18:30,190
overflows by parsing these images except

315
00:18:26,800 --> 00:18:33,940
also death was not yet secured as

316
00:18:30,190 --> 00:18:35,890
qualcomm states it to be and the above

317
00:18:33,940 --> 00:18:38,980
applies to header certificates and

318
00:18:35,890 --> 00:18:43,300
orders size are all set calculated items

319
00:18:38,980 --> 00:18:45,790
that are used in the secure boot so at

320
00:18:43,300 --> 00:18:47,440
first i took a look at the actual

321
00:18:45,790 --> 00:18:49,770
implementation of the cryptography

322
00:18:47,440 --> 00:18:52,330
because believe it or believe it not

323
00:18:49,770 --> 00:18:56,889
cryptography is usually a thing that is

324
00:18:52,330 --> 00:18:58,899
hard to implement very correct and when

325
00:18:56,890 --> 00:19:00,940
you find a flaw in the cryptography it

326
00:18:58,900 --> 00:19:02,950
gets easier to get code execution at

327
00:19:00,940 --> 00:19:05,260
food because you can just assign your

328
00:19:02,950 --> 00:19:12,880
binary image or exploit a vulnerability

329
00:19:05,260 --> 00:19:14,830
in the signature checks so at first like

330
00:19:12,880 --> 00:19:17,080
I said there are three certificates the

331
00:19:14,830 --> 00:19:19,030
root certificate authority that verifies

332
00:19:17,080 --> 00:19:21,159
the art association certificate

333
00:19:19,030 --> 00:19:21,760
authority and optionally there's an

334
00:19:21,160 --> 00:19:24,430
objective

335
00:19:21,760 --> 00:19:27,180
attestation certificate that's unique

336
00:19:24,430 --> 00:19:30,490
for each firmware but it's optional

337
00:19:27,180 --> 00:19:33,310
though in all devices this attestation

338
00:19:30,490 --> 00:19:35,909
certificate is usually embedded because

339
00:19:33,310 --> 00:19:38,609
code signing is enforced

340
00:19:35,909 --> 00:19:39,779
some prediction devices you'll pretty

341
00:19:38,609 --> 00:19:43,139
much always find an attestation

342
00:19:39,779 --> 00:19:46,039
certificate certificates the are signed

343
00:19:43,139 --> 00:19:50,789
by the next certificate chain and the

344
00:19:46,039 --> 00:19:54,509
verifications is is done by calculating

345
00:19:50,789 --> 00:19:57,869
and shut 256 hash dishes of the root

346
00:19:54,509 --> 00:20:00,239
certificate authority at first and that

347
00:19:57,869 --> 00:20:02,968
was much the value that's stored in a

348
00:20:00,239 --> 00:20:07,289
Rob kind of like with the Nintendo

349
00:20:02,969 --> 00:20:10,229
switch sorry the Nintendo 3ds the boot

350
00:20:07,289 --> 00:20:13,229
night strap it also completed a hash

351
00:20:10,229 --> 00:20:14,899
value from shared with the value in the

352
00:20:13,229 --> 00:20:18,509
wrong

353
00:20:14,899 --> 00:20:21,119
server side signer cannot refer the

354
00:20:18,509 --> 00:20:23,999
authorization of roots certificate

355
00:20:21,119 --> 00:20:26,279
authorities because the root certificate

356
00:20:23,999 --> 00:20:28,409
authority signs at the station

357
00:20:26,279 --> 00:20:32,179
certificates directly and is insured to

358
00:20:28,409 --> 00:20:34,469
the wrong on device it means that if

359
00:20:32,179 --> 00:20:36,149
certificate gets compromised there is

360
00:20:34,469 --> 00:20:40,319
pretty much nothing that Qualcomm can do

361
00:20:36,149 --> 00:20:45,299
and there will always be well the

362
00:20:40,319 --> 00:20:47,190
possibility of signing your own code the

363
00:20:45,299 --> 00:20:49,079
root certificate authority and inter

364
00:20:47,190 --> 00:20:52,949
stations certificate authority are

365
00:20:49,079 --> 00:20:55,559
similar to SSL certificates and this at

366
00:20:52,949 --> 00:20:57,929
the station certificates is an important

367
00:20:55,559 --> 00:20:59,999
one and very different in comparison to

368
00:20:57,929 --> 00:21:03,029
other certificates because it contains

369
00:20:59,999 --> 00:21:06,989
some core specific information for

370
00:21:03,029 --> 00:21:13,199
Qualcomm encoded in organization unit

371
00:21:06,989 --> 00:21:15,149
fields so these fields I'll just quickly

372
00:21:13,199 --> 00:21:17,849
walk to him because they're important

373
00:21:15,149 --> 00:21:20,879
they serve also as a additional

374
00:21:17,849 --> 00:21:24,718
vegetation against downgrading to from

375
00:21:20,879 --> 00:21:28,529
firmware so let's say you are able to

376
00:21:24,719 --> 00:21:31,889
sign any codes then there's also this

377
00:21:28,529 --> 00:21:33,869
thing that's the software ID of the

378
00:21:31,889 --> 00:21:37,799
image is compared to the previous

379
00:21:33,869 --> 00:21:41,428
version that is installed and if this

380
00:21:37,799 --> 00:21:44,009
version is that isn't installed is

381
00:21:41,429 --> 00:21:45,869
higher than the version that you want to

382
00:21:44,009 --> 00:21:49,069
restore then it prevents it from

383
00:21:45,869 --> 00:21:49,069
downgrading to that version

384
00:21:49,590 --> 00:21:56,850
there is also debts each firmware is

385
00:21:52,470 --> 00:22:00,090
unique per hardware device and hardware

386
00:21:56,850 --> 00:22:04,500
identifier basically consists of a

387
00:22:00,090 --> 00:22:08,909
family unique chip ID basically and a

388
00:22:04,500 --> 00:22:13,590
model ID so that makes a signing process

389
00:22:08,910 --> 00:22:16,140
pretty unique to each device so that you

390
00:22:13,590 --> 00:22:21,350
cannot sign for a bunch of devices just

391
00:22:16,140 --> 00:22:24,660
for once device specific but like I said

392
00:22:21,350 --> 00:22:26,520
the attestation certificate is validated

393
00:22:24,660 --> 00:22:28,500
by the other certificates in the chain

394
00:22:26,520 --> 00:22:32,670
so Qualcomm pretty much signed for any

395
00:22:28,500 --> 00:22:37,290
device now there is also a debug field

396
00:22:32,670 --> 00:22:40,370
but of course when you patch it for for

397
00:22:37,290 --> 00:22:42,780
adding more debugging to the bootloader

398
00:22:40,370 --> 00:22:45,899
that won't work because it will break

399
00:22:42,780 --> 00:22:49,610
the code signing chain and this time

400
00:22:45,900 --> 00:22:49,610
value is 2 which is disabled

401
00:22:52,690 --> 00:22:56,440
oh yeah and then there's this field

402
00:22:54,400 --> 00:22:59,770
software for size

403
00:22:56,440 --> 00:23:04,750
first of all okay can I just change the

404
00:22:59,770 --> 00:23:07,570
size to my posted signatures but well

405
00:23:04,750 --> 00:23:09,010
they stayed in their secure pews the

406
00:23:07,570 --> 00:23:13,929
comments that it's not used for

407
00:23:09,010 --> 00:23:17,379
validation just for information only but

408
00:23:13,930 --> 00:23:20,680
this one the algorithm that's used is

409
00:23:17,380 --> 00:23:23,170
also for the verification of signatures

410
00:23:20,680 --> 00:23:25,690
is also stored in the organizational

411
00:23:23,170 --> 00:23:28,950
unit field or certificate and that's a

412
00:23:25,690 --> 00:23:32,770
weakness because shall one is a way

413
00:23:28,950 --> 00:23:37,180
weaker signature verification methods

414
00:23:32,770 --> 00:23:40,629
than 256 so it's considered a weakness

415
00:23:37,180 --> 00:23:44,910
of course most certificates nowadays go

416
00:23:40,630 --> 00:23:49,260
much 256 but since you can patch this

417
00:23:44,910 --> 00:23:52,180
yes that will break the signature chain

418
00:23:49,260 --> 00:23:54,490
if you patch this to show on it will you

419
00:23:52,180 --> 00:23:57,010
shall want to validate and basically

420
00:23:54,490 --> 00:23:59,110
relax the signature verification a

421
00:23:57,010 --> 00:24:01,540
little bit because even when the

422
00:23:59,110 --> 00:24:04,780
signature is broken it still tries to

423
00:24:01,540 --> 00:24:08,620
verify this which I want and when it

424
00:24:04,780 --> 00:24:10,870
compares this to the Turnitin 56 Shosh

425
00:24:08,620 --> 00:24:15,239
in the bootrom it will only compare it

426
00:24:10,870 --> 00:24:15,239
to the size of the sha-1 hash

427
00:24:15,700 --> 00:24:25,060
now the core Chrome operating system

428
00:24:19,420 --> 00:24:27,490
coming back to that again a MSS is very

429
00:24:25,060 --> 00:24:30,340
useful was very useful in reverse

430
00:24:27,490 --> 00:24:33,190
engineering how Qualcomm works when

431
00:24:30,340 --> 00:24:35,679
everything is boot loaded and started it

432
00:24:33,190 --> 00:24:39,160
also contains a lot of assets asserts

433
00:24:35,680 --> 00:24:41,890
two absolute paths with also the name of

434
00:24:39,160 --> 00:24:43,540
source code files I tried looking up on

435
00:24:41,890 --> 00:24:45,760
the internet but couldn't find as

436
00:24:43,540 --> 00:24:48,840
everything is proprietary I pretty much

437
00:24:45,760 --> 00:24:52,600
hope them to be leaked but they were not

438
00:24:48,840 --> 00:24:55,300
but eventually I started working on my

439
00:24:52,600 --> 00:25:00,909
own elf parser to analyze these files

440
00:24:55,300 --> 00:25:03,070
and parse them or easier and coming back

441
00:25:00,910 --> 00:25:06,040
to the okiya for kernel that's used in

442
00:25:03,070 --> 00:25:08,679
this operating system this code was once

443
00:25:06,040 --> 00:25:12,790
open source and you can still retrieve

444
00:25:08,680 --> 00:25:16,540
it through the web archive so if you go

445
00:25:12,790 --> 00:25:21,310
to web not archive.org and you go to the

446
00:25:16,540 --> 00:25:27,270
okie l4 kernel you websites okay oh four

447
00:25:21,310 --> 00:25:33,280
laps open kernel laps that was it

448
00:25:27,270 --> 00:25:35,139
open lips there you will see that it

449
00:25:33,280 --> 00:25:37,690
that you can still get the source code

450
00:25:35,140 --> 00:25:41,080
I'll release the source codes or my

451
00:25:37,690 --> 00:25:42,550
github repository of you already release

452
00:25:41,080 --> 00:25:44,879
it there because they removed it from

453
00:25:42,550 --> 00:25:48,430
the site and the reason for that is that

454
00:25:44,880 --> 00:25:52,150
well open collapse pretty much is

455
00:25:48,430 --> 00:25:53,890
duplicated since 2013 and everything

456
00:25:52,150 --> 00:25:56,620
that was once open source is now

457
00:25:53,890 --> 00:25:58,540
proprietary and private and they also

458
00:25:56,620 --> 00:26:01,060
remove the code their entire website is

459
00:25:58,540 --> 00:26:03,220
down which new up archive you can still

460
00:26:01,060 --> 00:26:06,000
get the source code so I compared that

461
00:26:03,220 --> 00:26:08,850
source code to the Ida image and it was

462
00:26:06,000 --> 00:26:11,850
almost the same

463
00:26:08,850 --> 00:26:16,080
almost any function that was originally

464
00:26:11,850 --> 00:26:22,259
for okay l4 was still used in the iPhone

465
00:26:16,080 --> 00:26:23,668
5s a MSS image now the OS bootloader is

466
00:26:22,259 --> 00:26:25,950
the operating system boot loader

467
00:26:23,669 --> 00:26:27,630
generally loaded each time that the base

468
00:26:25,950 --> 00:26:30,990
band is being booted up

469
00:26:27,630 --> 00:26:35,100
it's not I Oh s and a folder slash user

470
00:26:30,990 --> 00:26:39,600
slash firmware slash baseband you can

471
00:26:35,100 --> 00:26:43,158
find it there and it's loaded each time

472
00:26:39,600 --> 00:26:45,750
but of course it's also code signed and

473
00:26:43,159 --> 00:26:51,120
then I figured out what the header was

474
00:26:45,750 --> 00:26:54,029
as you can see here in the picture so it

475
00:26:51,120 --> 00:26:55,949
also says this image destination pointer

476
00:26:54,029 --> 00:26:58,649
that's a pretty important one because

477
00:26:55,950 --> 00:27:01,789
that will tell what address it should

478
00:26:58,649 --> 00:27:04,258
load the code in of the trusted memory

479
00:27:01,789 --> 00:27:06,690
so you can control that and when

480
00:27:04,259 --> 00:27:12,000
creating a firmer image basically if you

481
00:27:06,690 --> 00:27:15,450
just make it 0 X 8000 or within the

482
00:27:12,000 --> 00:27:17,970
boundaries then it will tell it for that

483
00:27:15,450 --> 00:27:20,070
it will be valid for that part but of

484
00:27:17,970 --> 00:27:23,909
course this code signing is not one of

485
00:27:20,070 --> 00:27:26,158
them if the device bootloader implements

486
00:27:23,909 --> 00:27:28,320
D load which is a protocol used by

487
00:27:26,159 --> 00:27:31,379
Qualcomm for emergency debugging and

488
00:27:28,320 --> 00:27:32,879
flashing there are two types of

489
00:27:31,379 --> 00:27:36,928
implementations of this protocol

490
00:27:32,879 --> 00:27:39,779
streaming T load and T load but this is

491
00:27:36,929 --> 00:27:41,700
amazing because each time the basement

492
00:27:39,779 --> 00:27:43,620
crashes so you just need to find a way

493
00:27:41,700 --> 00:27:46,340
to crush your baseband

494
00:27:43,620 --> 00:27:49,830
the device will enter streaming alert

495
00:27:46,340 --> 00:27:52,860
and this D load accepts commands via

496
00:27:49,830 --> 00:27:55,139
high speed USB that can be fast if you

497
00:27:52,860 --> 00:27:57,508
know the come on types luckily I found

498
00:27:55,139 --> 00:28:00,330
out the source libraries that pretty

499
00:27:57,509 --> 00:28:02,639
much already implemented the structures

500
00:28:00,330 --> 00:28:06,299
of these commands that you can set to it

501
00:28:02,639 --> 00:28:09,330
through routers be packets

502
00:28:06,299 --> 00:28:12,889
high-speed USB packets and this D load

503
00:28:09,330 --> 00:28:15,629
boat is on the door of the basement so

504
00:28:12,889 --> 00:28:18,289
yeah you can pretty much not break it

505
00:28:15,629 --> 00:28:21,289
it's to prevent the base band from

506
00:28:18,289 --> 00:28:21,289
breaking

507
00:28:21,950 --> 00:28:27,560
so here's some details that I was able

508
00:28:24,830 --> 00:28:31,159
to forensic ly recover from the iPhone 5

509
00:28:27,560 --> 00:28:37,030
through strengths utility or Linux

510
00:28:31,160 --> 00:28:39,890
through padlock through radar qu and Ida

511
00:28:37,030 --> 00:28:42,590
yeah so there are some internal names

512
00:28:39,890 --> 00:28:45,710
that I got for the specific basement

513
00:28:42,590 --> 00:28:47,990
version of the iPhone 5 also you can

514
00:28:45,710 --> 00:28:50,960
retrieve the data center that the

515
00:28:47,990 --> 00:28:53,930
basement was signed with by looking at

516
00:28:50,960 --> 00:28:57,710
the certificates you can see version

517
00:28:53,930 --> 00:28:59,810
numbers on the programmable ROM and the

518
00:28:57,710 --> 00:29:03,860
knobs which is pretty cool because the

519
00:28:59,810 --> 00:29:08,899
nut is from micro Tech which is what the

520
00:29:03,860 --> 00:29:12,280
empty stands for then it the 29 F means

521
00:29:08,900 --> 00:29:18,430
the 29 family of micron technology it's

522
00:29:12,280 --> 00:29:24,149
4 gigabytes of storage 16 K of pages and

523
00:29:18,430 --> 00:29:26,550
this is some revisions now

524
00:29:24,150 --> 00:29:29,100
the iPhone 5 is a little different to

525
00:29:26,550 --> 00:29:32,850
his predecessors because it uses the

526
00:29:29,100 --> 00:29:34,919
qualcomm hexagon DSP 6 processor what

527
00:29:32,850 --> 00:29:37,020
makes the hexagon is B 6 processor

528
00:29:34,920 --> 00:29:40,020
different from normal our processors is

529
00:29:37,020 --> 00:29:42,240
that the hexa-core processor implements

530
00:29:40,020 --> 00:29:44,639
some special memory protections that

531
00:29:42,240 --> 00:29:49,950
verify the context for which pointers

532
00:29:44,640 --> 00:29:52,590
are referenced this is - that's for what

533
00:29:49,950 --> 00:29:56,310
I understand this is to prevent

534
00:29:52,590 --> 00:29:59,429
attackers from executing from contacts

535
00:29:56,310 --> 00:30:01,050
where they shouldn't be executing which

536
00:29:59,430 --> 00:30:05,790
makes it harder to exploit this

537
00:30:01,050 --> 00:30:08,399
architecture but the hexagon SDK is

538
00:30:05,790 --> 00:30:10,440
publicly available and the special

539
00:30:08,400 --> 00:30:15,950
instructions you can even use with a

540
00:30:10,440 --> 00:30:15,950
hexagon SDK of course not all private

541
00:30:16,580 --> 00:30:23,939
instructions are in this SDK Bergere a

542
00:30:21,150 --> 00:30:27,480
lot of useful instructions will be in

543
00:30:23,940 --> 00:30:30,380
the SDK you compile source code for the

544
00:30:27,480 --> 00:30:34,370
hexagon which which you will use when

545
00:30:30,380 --> 00:30:39,030
exploiting box in the hexagon

546
00:30:34,370 --> 00:30:41,340
architecture dan this was like a gold

547
00:30:39,030 --> 00:30:45,090
mine to me I found there a special

548
00:30:41,340 --> 00:30:48,179
debugging modes try a streaming reload

549
00:30:45,090 --> 00:30:52,889
allows you to dump certain memory

550
00:30:48,180 --> 00:30:57,570
regions via a USB file serial command

551
00:30:52,890 --> 00:31:01,490
line so you can talk to us be lightspeed

552
00:30:57,570 --> 00:31:04,350
sorry you high speed USB interface

553
00:31:01,490 --> 00:31:07,080
buffers you catch up the topic who are

554
00:31:04,350 --> 00:31:12,580
buffers the door

555
00:31:07,080 --> 00:31:16,059
you can even do Rob and well

556
00:31:12,580 --> 00:31:18,070
some other core memory files which is

557
00:31:16,059 --> 00:31:21,399
pretty useful and I could show you how

558
00:31:18,070 --> 00:31:24,100
it looks like and either I wasn't able

559
00:31:21,399 --> 00:31:27,820
to use the x-rays this decompiler for

560
00:31:24,100 --> 00:31:32,590
this but luckily I was able to decode it

561
00:31:27,820 --> 00:31:35,678
with snowman she can see this is the

562
00:31:32,590 --> 00:31:39,820
code and this is very Tom suit and down

563
00:31:35,679 --> 00:31:45,220
here you can see but it can up it is

564
00:31:39,820 --> 00:31:50,950
basically well this is where the offset

565
00:31:45,220 --> 00:31:54,039
so the SDRAM is it offset 0 x8 0 0 0 0 0

566
00:31:50,950 --> 00:31:57,580
etc etc and this is the files it will

567
00:31:54,039 --> 00:32:02,379
dump it to the dogs will go into

568
00:31:57,580 --> 00:32:06,039
environment wrap so yeah that was pretty

569
00:32:02,380 --> 00:32:08,340
cool to discover are useful for future

570
00:32:06,039 --> 00:32:13,480
debugging when trying to analyze

571
00:32:08,340 --> 00:32:15,340
different ratified box in Sahara boat

572
00:32:13,480 --> 00:32:19,990
which is the recovery mode in which you

573
00:32:15,340 --> 00:32:24,189
can restore normal images like updating

574
00:32:19,990 --> 00:32:27,370
the OS bootloader etc etc this is also

575
00:32:24,190 --> 00:32:29,230
the mode in which each time the images

576
00:32:27,370 --> 00:32:33,219
are loaded what the basement is booted

577
00:32:29,230 --> 00:32:36,090
up so you can at first the file system

578
00:32:33,220 --> 00:32:41,200
is loaded that the internal apps

579
00:32:36,090 --> 00:32:42,908
bootloader is loaded and that the

580
00:32:41,200 --> 00:32:47,230
firmware and software images are loaded

581
00:32:42,909 --> 00:32:49,330
for the processor the boot authorization

582
00:32:47,230 --> 00:32:51,279
is done and a checksum is done to verify

583
00:32:49,330 --> 00:32:52,590
that would succeeded completely and

584
00:32:51,279 --> 00:32:55,630
everything went fine

585
00:32:52,590 --> 00:32:59,199
run section for executable code is

586
00:32:55,630 --> 00:33:01,600
created and also what I found here in

587
00:32:59,200 --> 00:33:04,210
this architecture is that there is no

588
00:33:01,600 --> 00:33:08,230
word exploit mitigations so that also

589
00:33:04,210 --> 00:33:14,110
means there is executable stack so

590
00:33:08,230 --> 00:33:16,659
pretty much yeah execute anywhere kokom

591
00:33:14,110 --> 00:33:18,580
also has a power management which they

592
00:33:16,659 --> 00:33:22,679
refer to as rpm but it's pretty

593
00:33:18,580 --> 00:33:22,678
complicated so I haven't looked into it

594
00:33:22,990 --> 00:33:28,870
so what mate analyzing is for

595
00:33:25,360 --> 00:33:31,750
easier I used tool searches bid walk and

596
00:33:28,870 --> 00:33:34,120
retire too but there wasn't that easy at

597
00:33:31,750 --> 00:33:36,760
the beginning what it made it really

598
00:33:34,120 --> 00:33:39,969
easier to analyze this perma is that the

599
00:33:36,760 --> 00:33:43,570
firmer I was not encrypted Finn Rourke

600
00:33:39,970 --> 00:33:47,410
screwed up the instruction it produced

601
00:33:43,570 --> 00:33:49,780
some rubbish some Lib files but it was

602
00:33:47,410 --> 00:33:51,910
maybe not that efficient at first but it

603
00:33:49,780 --> 00:33:55,960
was still informated as disclosed me

604
00:33:51,910 --> 00:33:57,850
that the images were elf images and it

605
00:33:55,960 --> 00:34:00,820
also disclosed me that the images were

606
00:33:57,850 --> 00:34:02,770
not encrypted and it also told me that

607
00:34:00,820 --> 00:34:05,500
there were three certificates and at

608
00:34:02,770 --> 00:34:07,870
what locations they are they were and I

609
00:34:05,500 --> 00:34:11,889
could extract a certificate but rarity

610
00:34:07,870 --> 00:34:14,889
at the station certificate etc etc but

611
00:34:11,889 --> 00:34:17,319
Archie was not quite useful because in

612
00:34:14,889 --> 00:34:18,909
this case because basically I didn't

613
00:34:17,320 --> 00:34:22,330
knew that there was an additional header

614
00:34:18,909 --> 00:34:26,139
for the well basically the qualcomm

615
00:34:22,330 --> 00:34:28,360
image is above the elf header so yeah

616
00:34:26,139 --> 00:34:32,230
that pretty much made me disassemble it

617
00:34:28,360 --> 00:34:35,050
wrong offset so yeah after debts

618
00:34:32,230 --> 00:34:37,060
I got returned to to work and I could

619
00:34:35,050 --> 00:34:41,110
disassemble the entire file from the

620
00:34:37,060 --> 00:34:42,699
right offset but my solution to this

621
00:34:41,110 --> 00:34:46,450
before I knew that there was this

622
00:34:42,699 --> 00:34:49,449
special elf sorry a special header above

623
00:34:46,449 --> 00:34:51,399
the elf header I started working on my

624
00:34:49,449 --> 00:34:53,679
own I'll Foster and it worked fine I

625
00:34:51,400 --> 00:34:57,400
just didn't have seek and see to search

626
00:34:53,679 --> 00:35:00,009
for the elf had had a magic and I

627
00:34:57,400 --> 00:35:02,060
started partially the elf image from

628
00:35:00,010 --> 00:35:05,730
there

629
00:35:02,060 --> 00:35:08,549
so if actually I also created a

630
00:35:05,730 --> 00:35:13,230
structure for the mobile basement file

631
00:35:08,550 --> 00:35:15,360
format and eventually I might work on an

632
00:35:13,230 --> 00:35:17,220
offset finder so that you can find

633
00:35:15,360 --> 00:35:20,270
common functions used in the bootloader

634
00:35:17,220 --> 00:35:22,950
and operating system for later batching

635
00:35:20,270 --> 00:35:25,140
curse that brings me to the following

636
00:35:22,950 --> 00:35:28,109
known vulnerability is a basement

637
00:35:25,140 --> 00:35:31,049
firmware it's not actual vulnerabilities

638
00:35:28,110 --> 00:35:33,450
these do executable stack and no address

639
00:35:31,050 --> 00:35:35,820
space layout randomization but it makes

640
00:35:33,450 --> 00:35:37,439
it pretty easy rental abilities are

641
00:35:35,820 --> 00:35:41,490
found for an attacker to override

642
00:35:37,440 --> 00:35:45,210
functions in the firmer like specific

643
00:35:41,490 --> 00:35:51,180
checks such as the well to signature

644
00:35:45,210 --> 00:35:53,400
checks and this yeah it's it I still see

645
00:35:51,180 --> 00:35:54,529
it as some kind of vulnerability because

646
00:35:53,400 --> 00:35:57,570
address space layout randomization

647
00:35:54,530 --> 00:36:00,120
should be implemented in such devices

648
00:35:57,570 --> 00:36:03,060
they were but that all the i-45 is not

649
00:36:00,120 --> 00:36:06,569
that old many devices already had a SLR

650
00:36:03,060 --> 00:36:08,820
back in that days but also it's not

651
00:36:06,570 --> 00:36:14,160
uncommon for basement chips not to use a

652
00:36:08,820 --> 00:36:16,350
cell or due to performance Denner is a

653
00:36:14,160 --> 00:36:19,560
buffer overflow that I found in public

654
00:36:16,350 --> 00:36:21,210
TV eastn I tried to use but then I

655
00:36:19,560 --> 00:36:24,380
figured it was just a buffer overflow

656
00:36:21,210 --> 00:36:29,430
that she overflow into a kernel debugger

657
00:36:24,380 --> 00:36:32,220
buffer and well you cannot control in

658
00:36:29,430 --> 00:36:34,950
any way through this so that was not

659
00:36:32,220 --> 00:36:39,180
sufficient and in the ancient times of

660
00:36:34,950 --> 00:36:42,720
the iPhone 4 there was an X lock 8 equal

661
00:36:39,180 --> 00:36:44,669
stack based overflow that was exploited

662
00:36:42,720 --> 00:36:48,149
for basement unlocking but sadly it's

663
00:36:44,670 --> 00:36:51,210
been patched so that brings me to the

664
00:36:48,150 --> 00:36:54,870
following cool thing that I again found

665
00:36:51,210 --> 00:36:57,300
is that on the forum I found Qualcomm XD

666
00:36:54,870 --> 00:36:58,830
app which is an extensible debugger for

667
00:36:57,300 --> 00:37:01,650
the Gawker basement

668
00:36:58,830 --> 00:37:06,390
I was pretty complicated because this

669
00:37:01,650 --> 00:37:08,190
base bed to be the license but the

670
00:37:06,390 --> 00:37:11,029
license was provided on the forum so I

671
00:37:08,190 --> 00:37:13,460
thought ok just for research purposes I

672
00:37:11,030 --> 00:37:17,810
try it out

673
00:37:13,460 --> 00:37:19,760
sadly this license was expired but as

674
00:37:17,810 --> 00:37:22,460
you can see I managed to patch the

675
00:37:19,760 --> 00:37:25,430
software and there was just one single

676
00:37:22,460 --> 00:37:30,109
jump not zero instruction that I could

677
00:37:25,430 --> 00:37:32,960
patch to job zero basically its Intel so

678
00:37:30,109 --> 00:37:35,690
it's not that hard in either you can use

679
00:37:32,960 --> 00:37:39,290
either Petra for that and that job not

680
00:37:35,690 --> 00:37:41,750
zero jump to a function returning the

681
00:37:39,290 --> 00:37:43,750
remaining days so I pretty much patch

682
00:37:41,750 --> 00:37:45,810
that

683
00:37:43,750 --> 00:37:45,810
you

684
00:37:46,920 --> 00:37:53,800
and good interior use for this tool but

685
00:37:51,640 --> 00:37:55,420
I've not been able to use this tool yet

686
00:37:53,800 --> 00:37:59,740
because I do not have a serial USB

687
00:37:55,420 --> 00:38:06,880
device for about working with the chrome

688
00:37:59,740 --> 00:38:08,830
high speed USB protocols then I decided

689
00:38:06,880 --> 00:38:10,840
that saucing probably was the best way

690
00:38:08,830 --> 00:38:14,440
to trigger some bucks in the waistband

691
00:38:10,840 --> 00:38:17,410
so I started researching how can I

692
00:38:14,440 --> 00:38:20,890
access logs for what a basement crashes

693
00:38:17,410 --> 00:38:23,379
and I know that logs are saved in iOS it

694
00:38:20,890 --> 00:38:27,069
can be synced to a PC by the Apple 5

695
00:38:23,380 --> 00:38:29,350
conduit protocol but locks did not

696
00:38:27,070 --> 00:38:32,800
contain any registers only imagine the

697
00:38:29,350 --> 00:38:35,049
error code when a crash occurred so I

698
00:38:32,800 --> 00:38:38,100
pretty much found how to enable

699
00:38:35,050 --> 00:38:40,480
extensive logging by reverse engineering

700
00:38:38,100 --> 00:38:43,509
complication center and Emin and iOS

701
00:38:40,480 --> 00:38:46,750
that talks to the basement and based on

702
00:38:43,510 --> 00:38:49,300
that I still got some more output but

703
00:38:46,750 --> 00:38:51,400
still the registers as basement crashes

704
00:38:49,300 --> 00:38:53,920
are stored in a basement at private RAM

705
00:38:51,400 --> 00:38:56,620
and the access to this environment Ram

706
00:38:53,920 --> 00:38:59,170
is not to be prohibited I wasn't able to

707
00:38:56,620 --> 00:39:01,210
access it but there are police or

708
00:38:59,170 --> 00:39:04,170
undocumented commands you can access to

709
00:39:01,210 --> 00:39:04,170
the environment rare

710
00:39:04,420 --> 00:39:10,750
so building the buzzer is quite a

711
00:39:08,349 --> 00:39:12,720
challenge and I'm still working on one

712
00:39:10,750 --> 00:39:17,349
because it takes a lot of effort to

713
00:39:12,720 --> 00:39:20,189
effectively force all protocols and

714
00:39:17,349 --> 00:39:24,250
these protocols can be very complicated

715
00:39:20,190 --> 00:39:26,590
but these are protocols used by Qualcomm

716
00:39:24,250 --> 00:39:29,590
which you can use for fussing the queue

717
00:39:26,590 --> 00:39:32,740
my protocol is pretty extended and it's

718
00:39:29,590 --> 00:39:36,130
a new complicated protocol but also you

719
00:39:32,740 --> 00:39:38,560
are complicated it means that yeah there

720
00:39:36,130 --> 00:39:41,470
might be bugs there so this is probably

721
00:39:38,560 --> 00:39:43,720
the most protocol profitable protocols

722
00:39:41,470 --> 00:39:47,919
when you want to first baseman's from

723
00:39:43,720 --> 00:39:49,990
Qualcomm you can also first rusa hard

724
00:39:47,920 --> 00:39:53,980
restore mode in which you can upload

725
00:39:49,990 --> 00:40:00,279
restore images or estilo data load

726
00:39:53,980 --> 00:40:02,680
interfaces for emergency resource but

727
00:40:00,280 --> 00:40:05,530
there is one protocol for Diagnostics

728
00:40:02,680 --> 00:40:07,390
that's also has a lot of commands and in

729
00:40:05,530 --> 00:40:10,599
the past there was this speaker pop

730
00:40:07,390 --> 00:40:13,000
commands for well letting you take a

731
00:40:10,599 --> 00:40:15,790
look at search of memory creations of

732
00:40:13,000 --> 00:40:18,280
the basement and this was exploited to

733
00:40:15,790 --> 00:40:22,779
again unlock a basement a carry-on large

734
00:40:18,280 --> 00:40:25,450
basement but it's patch now so also

735
00:40:22,780 --> 00:40:29,200
Dayak is a good interface of fuzzy

736
00:40:25,450 --> 00:40:32,529
classic true 80 cables is also a good

737
00:40:29,200 --> 00:40:34,450
way but it's a bit harder because Apple

738
00:40:32,530 --> 00:40:37,750
removed all serial interfaces to the

739
00:40:34,450 --> 00:40:40,000
basement so there's only a way to fuzz

740
00:40:37,750 --> 00:40:41,980
80 commands through their communication

741
00:40:40,000 --> 00:40:46,510
center and you would eat a jailbreak for

742
00:40:41,980 --> 00:40:48,310
that to access that communication center

743
00:40:46,510 --> 00:40:50,880
and I checked code into it for frozen

744
00:40:48,310 --> 00:40:50,880
key commands

745
00:40:51,820 --> 00:40:56,620
and yeah well there's another attack

746
00:40:54,370 --> 00:40:59,410
that you can do on lower level when you

747
00:40:56,620 --> 00:41:02,290
are in ASDA load and the load mode and

748
00:40:59,410 --> 00:41:06,100
that's by just trying out rather program

749
00:41:02,290 --> 00:41:09,100
images so building leaf Ezzor can be

750
00:41:06,100 --> 00:41:11,380
done on top of lip qmi which is an open

751
00:41:09,100 --> 00:41:16,870
source library for the queue my protocol

752
00:41:11,380 --> 00:41:20,440
for welcome lip Obst which is pretty

753
00:41:16,870 --> 00:41:23,520
much used for all other protocols in the

754
00:41:20,440 --> 00:41:23,520
queue my interface

755
00:41:23,550 --> 00:41:29,500
the 80 commands are of course many of

756
00:41:27,100 --> 00:41:32,290
them are proprietary but there is some

757
00:41:29,500 --> 00:41:35,950
documents online leaked or even

758
00:41:32,290 --> 00:41:38,770
documented by other researchers and well

759
00:41:35,950 --> 00:41:41,379
I've put a link up here too so 80

760
00:41:38,770 --> 00:41:47,140
commands that you might try out for

761
00:41:41,380 --> 00:41:49,660
fuzzy but well the GSM stack itself of

762
00:41:47,140 --> 00:41:52,509
base bands is also vulnerable aspect and

763
00:41:49,660 --> 00:41:54,370
this is the only expert respect on which

764
00:41:52,510 --> 00:41:58,750
you can remotely compromise basement

765
00:41:54,370 --> 00:42:00,790
devices so for for saying fire radio you

766
00:41:58,750 --> 00:42:03,810
would need to hack your f1 and screen

767
00:42:00,790 --> 00:42:07,590
radio installed on Linux and you can

768
00:42:03,810 --> 00:42:12,370
pretty much sense type-0 as a mass and

769
00:42:07,590 --> 00:42:16,210
other specific parts of the GSM stack

770
00:42:12,370 --> 00:42:22,060
that you can tortured and sent to fire

771
00:42:16,210 --> 00:42:24,610
radio so yeah in the past you could sent

772
00:42:22,060 --> 00:42:27,549
80 commands over serial interfaces like

773
00:42:24,610 --> 00:42:31,180
I said Bertier disabled nowadays the

774
00:42:27,550 --> 00:42:33,010
iPhone 5 and higher but now comes the

775
00:42:31,180 --> 00:42:35,319
cool stuff there have been four

776
00:42:33,010 --> 00:42:40,000
abilities in the secure boot of Qualcomm

777
00:42:35,320 --> 00:42:43,080
and honestly it was like a big big

778
00:42:40,000 --> 00:42:46,300
flowing welcome they cannot touch this

779
00:42:43,080 --> 00:42:48,759
because yeah you can pretty much restore

780
00:42:46,300 --> 00:42:51,130
to any bootloader in there because you

781
00:42:48,760 --> 00:42:54,190
can just let a bootloader always be

782
00:42:51,130 --> 00:42:57,400
valid so as you can see this is the

783
00:42:54,190 --> 00:43:02,470
secure dude file in which it compares

784
00:42:57,400 --> 00:43:05,620
the signature length but yeah it

785
00:43:02,470 --> 00:43:07,000
compares using the signature length from

786
00:43:05,620 --> 00:43:09,850
the image header instead of the

787
00:43:07,000 --> 00:43:15,070
certificate chain so in theory you can

788
00:43:09,850 --> 00:43:20,140
just bail person different lengths and

789
00:43:15,070 --> 00:43:23,530
make the image valid but the next one

790
00:43:20,140 --> 00:43:25,930
the next is I also have the code for

791
00:43:23,530 --> 00:43:29,110
this vulnerability but sadly due to

792
00:43:25,930 --> 00:43:33,069
proprietary reasons I will not disclose

793
00:43:29,110 --> 00:43:35,260
the code of this vulnerability here in

794
00:43:33,070 --> 00:43:38,340
this slide but I can disclose the

795
00:43:35,260 --> 00:43:40,870
problem the problem instead where

796
00:43:38,340 --> 00:43:44,830
basically I forgot your opponent's the

797
00:43:40,870 --> 00:43:47,259
entire image signatures entire signature

798
00:43:44,830 --> 00:43:50,680
verification so when you restore this

799
00:43:47,260 --> 00:43:52,960
bootloader it's affected you can restore

800
00:43:50,680 --> 00:43:55,629
to you well you can pretty much it's

801
00:43:52,960 --> 00:43:57,880
always valid so when loading an elf

802
00:43:55,630 --> 00:44:00,010
binary the secure boot loader was not

803
00:43:57,880 --> 00:44:01,570
probably verifying elf headers and the

804
00:44:00,010 --> 00:44:04,510
program had us before loading any

805
00:44:01,570 --> 00:44:06,370
subsequent segments from an elf file as

806
00:44:04,510 --> 00:44:08,370
a consequence it's possible to skip

807
00:44:06,370 --> 00:44:10,960
verification of the segment's entirely

808
00:44:08,370 --> 00:44:12,310
if the respective program header

809
00:44:10,960 --> 00:44:14,530
actually the points to a segment

810
00:44:12,310 --> 00:44:16,600
containing data used for cooking every

811
00:44:14,530 --> 00:44:19,480
clarification is missing so basically

812
00:44:16,600 --> 00:44:22,120
just remove the sacraments of the code

813
00:44:19,480 --> 00:44:23,950
signatures and the bootloader will be

814
00:44:22,120 --> 00:44:27,160
valid because there's insufficient

815
00:44:23,950 --> 00:44:30,520
policy this is a really really really

816
00:44:27,160 --> 00:44:35,319
big flaw in a basement bootloader secure

817
00:44:30,520 --> 00:44:38,170
food chain and this is the only way I

818
00:44:35,320 --> 00:44:43,000
know so far to get code execution of

819
00:44:38,170 --> 00:44:47,430
boot without actually having to do a lot

820
00:44:43,000 --> 00:44:50,350
of stack buffer overflow exploitation so

821
00:44:47,430 --> 00:44:52,509
yeah this is the best case of exploiting

822
00:44:50,350 --> 00:44:54,970
the base pads and since you can exploit

823
00:44:52,510 --> 00:44:57,370
this by just taking a side boot loader

824
00:44:54,970 --> 00:45:00,430
of this version but even a side

825
00:44:57,370 --> 00:45:01,810
bootloader you can restore always using

826
00:45:00,430 --> 00:45:04,359
a spark

827
00:45:01,810 --> 00:45:07,000
I believe the iPhone 4 as the iPhone 5

828
00:45:04,360 --> 00:45:09,600
are both affected by this book idea for

829
00:45:07,000 --> 00:45:09,600
for as well

830
00:45:10,560 --> 00:45:16,320
so future developments on creating tools

831
00:45:12,980 --> 00:45:21,840
useful for researching basement

832
00:45:16,320 --> 00:45:23,820
accessing interfaces of the of the

833
00:45:21,840 --> 00:45:26,700
basement and I also want to create a

834
00:45:23,820 --> 00:45:33,300
tool for loading custom for my images

835
00:45:26,700 --> 00:45:35,129
through the protocols of clock hope so

836
00:45:33,300 --> 00:45:36,750
you can restore cuz the boot loaders and

837
00:45:35,130 --> 00:45:39,960
that kind of things for future

838
00:45:36,750 --> 00:45:42,300
development screening confirm Ram and I

839
00:45:39,960 --> 00:45:46,440
of course will take a look at this image

840
00:45:42,300 --> 00:45:48,090
signature verification being missing in

841
00:45:46,440 --> 00:45:50,100
a specific version of the bootloader

842
00:45:48,090 --> 00:45:53,610
I'll try to find the specific boot order

843
00:45:50,100 --> 00:45:57,450
version so that you can use it use it to

844
00:45:53,610 --> 00:45:59,310
restore the custom program so these are

845
00:45:57,450 --> 00:46:01,319
some references I'll put these slides

846
00:45:59,310 --> 00:46:03,840
online after this presentation that you

847
00:46:01,320 --> 00:46:06,480
can use if you want to access these

848
00:46:03,840 --> 00:46:08,940
interfaces POSIX Nature has helped me a

849
00:46:06,480 --> 00:46:10,710
lot during his research so big shout out

850
00:46:08,940 --> 00:46:12,810
to him go follow him on Twitter

851
00:46:10,710 --> 00:46:16,170
it's POSIX nature just like here good

852
00:46:12,810 --> 00:46:19,140
job and then there is also some

853
00:46:16,170 --> 00:46:21,840
resources that I used as bokram is a

854
00:46:19,140 --> 00:46:24,870
very cool group researching local

855
00:46:21,840 --> 00:46:28,760
basement they have created custom

856
00:46:24,870 --> 00:46:32,359
firmware for open-source well some

857
00:46:28,760 --> 00:46:35,210
consumer-based local basement chips but

858
00:46:32,360 --> 00:46:38,190
yeah for the iphone 5 and everything

859
00:46:35,210 --> 00:46:40,320
basement is proprietary but a lot of

860
00:46:38,190 --> 00:46:43,350
information came from Ozma Crawford is

861
00:46:40,320 --> 00:46:45,900
presentation also Qualcomm has a lot of

862
00:46:43,350 --> 00:46:48,240
internal documentation but it's all

863
00:46:45,900 --> 00:46:51,110
proprietary confidential so you should

864
00:46:48,240 --> 00:46:53,939
just sign up signing up is free and

865
00:46:51,110 --> 00:46:55,640
anyone is allowed to sign up you can

866
00:46:53,940 --> 00:46:58,050
access the information there yourself

867
00:46:55,640 --> 00:47:01,310
just do not share it with other people

868
00:46:58,050 --> 00:47:03,630
whiskas that's the policy of Qualcomm

869
00:47:01,310 --> 00:47:06,000
then there is the cour telephony

870
00:47:03,630 --> 00:47:07,980
framework that you can look at from iOS

871
00:47:06,000 --> 00:47:09,840
where the communication center is based

872
00:47:07,980 --> 00:47:12,690
the Devon that communicates with

873
00:47:09,840 --> 00:47:16,310
baseband I took a look at someone who

874
00:47:12,690 --> 00:47:16,310
dumped a header files from metroburg

875
00:47:17,100 --> 00:47:22,650
also tutorial here on how to inject code

876
00:47:19,410 --> 00:47:24,480
communication center and debug and these

877
00:47:22,650 --> 00:47:29,310
libraries they were also very useful

878
00:47:24,480 --> 00:47:32,850
when creating tools for examining the

879
00:47:29,310 --> 00:47:34,950
basement then at the very last I want to

880
00:47:32,850 --> 00:47:38,100
give a big thanks to the developer of

881
00:47:34,950 --> 00:47:39,990
this utility this utility that provides

882
00:47:38,100 --> 00:47:43,140
the full command line for accessing

883
00:47:39,990 --> 00:47:46,290
protocols of Qualcomm so if you have a

884
00:47:43,140 --> 00:47:50,460
device that opens itself for Universal

885
00:47:46,290 --> 00:47:54,570
Serial bus communication via high-speed

886
00:47:50,460 --> 00:47:57,120
USB then you can use this tool to get a

887
00:47:54,570 --> 00:48:01,020
command shell and yeah interact to its

888
00:47:57,120 --> 00:48:03,029
all the protocols Oracle so that's the

889
00:48:01,020 --> 00:48:05,150
presentation for now are there any

890
00:48:03,030 --> 00:48:05,150
questions

