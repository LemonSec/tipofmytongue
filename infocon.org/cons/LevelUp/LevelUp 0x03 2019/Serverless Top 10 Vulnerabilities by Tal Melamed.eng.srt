1
00:00:05,759 --> 00:00:09,250
yeah all right thanks mash it was a

2
00:00:08,109 --> 00:00:12,280
great talk

3
00:00:09,250 --> 00:00:17,140
and takes everyone for coming good

4
00:00:12,280 --> 00:00:18,220
morning to you the Pacific owe all of

5
00:00:17,140 --> 00:00:20,529
you around the world

6
00:00:18,220 --> 00:00:23,970
my name is tal Muhammad I'm head of

7
00:00:20,529 --> 00:00:27,880
security research at particulate we're

8
00:00:23,970 --> 00:00:31,419
we're an Israel based startup when we

9
00:00:27,880 --> 00:00:34,480
have a server less security solution and

10
00:00:31,420 --> 00:00:38,260
in this talk I'm going to discuss the

11
00:00:34,480 --> 00:00:45,399
service security top 10 that we've

12
00:00:38,260 --> 00:00:50,140
created for and with OS know just a few

13
00:00:45,399 --> 00:00:53,170
words about me so yeah so my name is dal

14
00:00:50,140 --> 00:00:57,579
and you can follow me either of this

15
00:00:53,170 --> 00:00:59,649
handles links I have about 15 years more

16
00:00:57,579 --> 00:01:02,890
just more than 15 years in the

17
00:00:59,649 --> 00:01:06,729
information security field specializing

18
00:01:02,890 --> 00:01:11,819
you know OPSEC from web client based

19
00:01:06,729 --> 00:01:14,709
mobile iot devices and officer Ellis

20
00:01:11,819 --> 00:01:17,679
probably I can assume well I don't want

21
00:01:14,709 --> 00:01:19,660
to be presumptuous but probably some of

22
00:01:17,679 --> 00:01:23,800
you at least don't know what service is

23
00:01:19,660 --> 00:01:27,970
I didn't know what services for about a

24
00:01:23,800 --> 00:01:29,649
year ago so it's it's a kind of a new

25
00:01:27,970 --> 00:01:35,920
technology that we're going to discuss

26
00:01:29,649 --> 00:01:38,590
now see so yeah I mean we approached ago

27
00:01:35,920 --> 00:01:44,580
we provide a service security solution

28
00:01:38,590 --> 00:01:49,080
for companies that have they have

29
00:01:44,580 --> 00:01:53,410
momentum production certifications and

30
00:01:49,080 --> 00:01:58,569
now after I covered the housekeeping

31
00:01:53,410 --> 00:02:01,539
might start with a talk so before we

32
00:01:58,569 --> 00:02:03,970
start I'll just introduce you to serve

33
00:02:01,539 --> 00:02:05,619
on us for a brief intro to the

34
00:02:03,970 --> 00:02:07,959
technology because it still new and many

35
00:02:05,619 --> 00:02:12,760
people still haven't heard about it or

36
00:02:07,959 --> 00:02:17,040
it is no know about it so if we look

37
00:02:12,760 --> 00:02:19,179
back in the days where we had from

38
00:02:17,040 --> 00:02:20,679
solutions where everything

39
00:02:19,180 --> 00:02:25,019
including the data centers and the

40
00:02:20,680 --> 00:02:28,060
servers and everything was hosted on the

41
00:02:25,019 --> 00:02:30,189
on the premise on the word the

42
00:02:28,060 --> 00:02:33,519
organization was based and then

43
00:02:30,189 --> 00:02:38,159
throughout the years we went through the

44
00:02:33,519 --> 00:02:41,200
ants and now recently containers were

45
00:02:38,159 --> 00:02:44,138
there was a big hype through and this is

46
00:02:41,200 --> 00:02:46,899
still containers is still one of the

47
00:02:44,139 --> 00:02:48,939
most used technologies nowadays now the

48
00:02:46,900 --> 00:02:51,120
move to server lists if you look at this

49
00:02:48,939 --> 00:02:55,180
graph the move to server list really

50
00:02:51,120 --> 00:02:57,010
takes down takes out from the companies

51
00:02:55,180 --> 00:02:58,930
the organization that built or develop

52
00:02:57,010 --> 00:03:00,189
the application takes out most of the

53
00:02:58,930 --> 00:03:02,530
components that you need to deal with

54
00:03:00,189 --> 00:03:04,870
when you want to deploy or develop a

55
00:03:02,530 --> 00:03:07,450
service application and that includes

56
00:03:04,870 --> 00:03:09,180
the operations systems and the setups

57
00:03:07,450 --> 00:03:11,200
and the patching and monitoring

58
00:03:09,180 --> 00:03:12,010
scalability you don't have to deal with

59
00:03:11,200 --> 00:03:15,429
it anymore

60
00:03:12,010 --> 00:03:19,418
so the idea of service is basically you

61
00:03:15,430 --> 00:03:22,689
have an idea come up to the console or

62
00:03:19,419 --> 00:03:24,340
start with with the IDE and start write

63
00:03:22,689 --> 00:03:26,078
your code so the logic of the

64
00:03:24,340 --> 00:03:29,470
application and you don't need anything

65
00:03:26,079 --> 00:03:31,810
else you don't have to care about very

66
00:03:29,470 --> 00:03:34,180
purchasing or managing servers you don't

67
00:03:31,810 --> 00:03:36,400
have to make take care of your

68
00:03:34,180 --> 00:03:39,010
scalability and the service providers

69
00:03:36,400 --> 00:03:42,040
will take that care of that for you so

70
00:03:39,010 --> 00:03:44,620
all you are left with is the application

71
00:03:42,040 --> 00:03:47,970
which is the code your code and some

72
00:03:44,620 --> 00:03:51,879
configuration which is also limited

73
00:03:47,970 --> 00:03:55,680
handsome security challenges so and

74
00:03:51,879 --> 00:03:58,478
we'll discuss that so where are we on

75
00:03:55,680 --> 00:04:01,030
server list and he's it here to stay so

76
00:03:58,479 --> 00:04:05,650
we can see it so the first server list I

77
00:04:01,030 --> 00:04:09,720
think was in this type of service term

78
00:04:05,650 --> 00:04:13,959
was was first discussed about somewhere

79
00:04:09,720 --> 00:04:16,959
the thousand 14 I think and then the

80
00:04:13,959 --> 00:04:21,250
larger first branch of AWS lunching

81
00:04:16,959 --> 00:04:25,320
lambda which is the most famous service

82
00:04:21,250 --> 00:04:29,080
computing wonder functions was somewhere

83
00:04:25,320 --> 00:04:31,300
2016 so we're only less than three years

84
00:04:29,080 --> 00:04:33,128
from that and we're we're seeing a

85
00:04:31,300 --> 00:04:38,379
constant rising the technology I don't

86
00:04:33,129 --> 00:04:42,899
no if you were or heard about the AWS

87
00:04:38,379 --> 00:04:46,059
ring that's the biggest I think comes in

88
00:04:42,899 --> 00:04:48,429
technologies they have like 60,000

89
00:04:46,059 --> 00:04:50,679
people annually for their con was mainly

90
00:04:48,429 --> 00:04:54,448
about service and also about security

91
00:04:50,679 --> 00:04:57,399
which is good for us so there is a big

92
00:04:54,449 --> 00:05:01,119
conversation about service what it means

93
00:04:57,399 --> 00:05:03,059
and how it's good also for security but

94
00:05:01,119 --> 00:05:07,019
not enough as you can see in this graph

95
00:05:03,059 --> 00:05:09,459
there was just one cert through this

96
00:05:07,019 --> 00:05:12,039
week week and I'm pretty sure that's me

97
00:05:09,459 --> 00:05:14,409
so but we can see that people start

98
00:05:12,039 --> 00:05:16,929
talking about the technology so we

99
00:05:14,409 --> 00:05:18,909
wanted to make sure that the security is

100
00:05:16,929 --> 00:05:22,239
not left behind like every other

101
00:05:18,909 --> 00:05:24,819
technology coming in so who are the

102
00:05:22,240 --> 00:05:27,939
service providers course the big big

103
00:05:24,819 --> 00:05:30,429
players like you see big will club

104
00:05:27,939 --> 00:05:32,829
platform rate again as you're really

105
00:05:30,429 --> 00:05:35,649
dominating Wow AWS is really actually

106
00:05:32,829 --> 00:05:38,409
donating but the market I don't know

107
00:05:35,649 --> 00:05:40,809
about percentages but they're way ahead

108
00:05:38,409 --> 00:05:44,829
of everyone some other players that are

109
00:05:40,809 --> 00:05:47,860
joining in every time I know SAP just

110
00:05:44,829 --> 00:05:52,149
announced their recently announced there

111
00:05:47,860 --> 00:05:55,860
are several solution and so you know you

112
00:05:52,149 --> 00:05:58,449
see you can see that the big players are

113
00:05:55,860 --> 00:06:00,789
providing these solutions so you know

114
00:05:58,449 --> 00:06:02,909
this is something or you can assume that

115
00:06:00,789 --> 00:06:05,909
this is something that they believe in

116
00:06:02,909 --> 00:06:05,909
they

117
00:06:08,270 --> 00:06:13,289
they try to promote it presently so you

118
00:06:11,430 --> 00:06:15,120
can understand that it's going to stay

119
00:06:13,289 --> 00:06:17,520
and not only that if you think about

120
00:06:15,120 --> 00:06:19,770
who's who's there

121
00:06:17,520 --> 00:06:21,599
i'm ii see ya who is the firt war the

122
00:06:19,770 --> 00:06:23,729
first adopter for service using symbols

123
00:06:21,599 --> 00:06:26,819
you can see it they're very big players

124
00:06:23,729 --> 00:06:28,710
in the technology and also not really

125
00:06:26,819 --> 00:06:31,620
high-tech but you can see air BnB

126
00:06:28,710 --> 00:06:36,870
netflix is a big one yeah LOL kept it on

127
00:06:31,620 --> 00:06:38,940
one eye rover adobe this is not everyone

128
00:06:36,870 --> 00:06:43,520
this is just the big ones or first

129
00:06:38,940 --> 00:06:47,039
adopters then in the last reinvent AWS

130
00:06:43,520 --> 00:06:49,740
killed who's using server less and you

131
00:06:47,039 --> 00:06:51,900
can see that many companies many

132
00:06:49,740 --> 00:06:58,759
startups as well are studying going

133
00:06:51,900 --> 00:07:03,169
service for many reasons so I'll just

134
00:06:58,759 --> 00:07:03,169
numerate the few basic

135
00:07:03,479 --> 00:07:08,669
so why to go server less service

136
00:07:05,939 --> 00:07:10,529
infrastructure the goal beat is that you

137
00:07:08,669 --> 00:07:12,568
don't need to deal with it it all

138
00:07:10,529 --> 00:07:14,339
managed everything is managed by the

139
00:07:12,569 --> 00:07:16,439
service provider you come up you write

140
00:07:14,339 --> 00:07:18,360
your code and not only that you don't

141
00:07:16,439 --> 00:07:22,080
pay for what you don't use so you have

142
00:07:18,360 --> 00:07:23,490
an idea you want to write a code you

143
00:07:22,080 --> 00:07:26,308
don't have to deal with like servers and

144
00:07:23,490 --> 00:07:29,189
managing operation systems and security

145
00:07:26,309 --> 00:07:31,409
patches and not only that if no-one used

146
00:07:29,189 --> 00:07:33,960
your application or no one is using your

147
00:07:31,409 --> 00:07:37,469
code then you want paper it or at least

148
00:07:33,960 --> 00:07:39,508
you feel a some insignificant amount and

149
00:07:37,469 --> 00:07:41,849
when the applications start to scale up

150
00:07:39,509 --> 00:07:43,680
they take care of the scalability for

151
00:07:41,849 --> 00:07:49,080
you you of course you will have to pay

152
00:07:43,680 --> 00:07:52,039
for it but you don't have to a if it's

153
00:07:49,080 --> 00:07:55,349
not being used and the architecture is

154
00:07:52,039 --> 00:07:58,229
maybe the reason for your secure to

155
00:07:55,349 --> 00:08:01,339
discuss about security is that the

156
00:07:58,229 --> 00:08:05,219
purpose of service is or the type of

157
00:08:01,339 --> 00:08:10,469
architecture is a type of micro services

158
00:08:05,219 --> 00:08:12,449
so everything everything in the in the

159
00:08:10,469 --> 00:08:14,909
application should be small micro

160
00:08:12,449 --> 00:08:17,550
services each function should do its own

161
00:08:14,909 --> 00:08:19,438
job and you know you don't write a

162
00:08:17,550 --> 00:08:23,189
function that does the whole application

163
00:08:19,439 --> 00:08:26,159
process but you write a piece of code

164
00:08:23,189 --> 00:08:28,919
that does its job and that's it that end

165
00:08:26,159 --> 00:08:32,849
dies after and it's important to mention

166
00:08:28,919 --> 00:08:35,338
that functions are stateless so when

167
00:08:32,849 --> 00:08:38,490
they wake up and I say wake up but when

168
00:08:35,339 --> 00:08:40,769
they are being cold or invoked they are

169
00:08:38,490 --> 00:08:43,019
launched within a container that it's

170
00:08:40,769 --> 00:08:45,120
provided by the provider you don't have

171
00:08:43,019 --> 00:08:47,760
to deal with it but it doesn't it

172
00:08:45,120 --> 00:08:49,589
doesn't know what's behind it what speak

173
00:08:47,760 --> 00:08:52,529
before it or after it it just runs the

174
00:08:49,589 --> 00:08:54,510
code and dies and this is the ephemeral

175
00:08:52,529 --> 00:08:56,750
part so after the code dies you don't

176
00:08:54,510 --> 00:08:59,670
have access to anything left left there

177
00:08:56,750 --> 00:09:03,089
you have to deal with it in a various

178
00:08:59,670 --> 00:09:05,160
way so how do you a be care of of

179
00:09:03,089 --> 00:09:07,769
attempt occation so there are many

180
00:09:05,160 --> 00:09:09,480
challenges Aaron will discuss some of

181
00:09:07,769 --> 00:09:12,029
them and the operations of course

182
00:09:09,480 --> 00:09:14,760
because you don't have to do that to

183
00:09:12,029 --> 00:09:16,680
scale you don't have to make sure your

184
00:09:14,760 --> 00:09:17,069
operation system is up to date to patch

185
00:09:16,680 --> 00:09:20,189
for

186
00:09:17,070 --> 00:09:23,640
security your DevOps is really scaling

187
00:09:20,190 --> 00:09:24,980
down is left for other meaning other

188
00:09:23,640 --> 00:09:28,890
things to do

189
00:09:24,980 --> 00:09:31,080
alright so let's do a quick gap analysis

190
00:09:28,890 --> 00:09:32,699
and security and then I'll dive into the

191
00:09:31,080 --> 00:09:35,220
top ten

192
00:09:32,700 --> 00:09:37,100
we'll start with the cons so everything

193
00:09:35,220 --> 00:09:40,410
of course everything has accounting pros

194
00:09:37,100 --> 00:09:42,390
so you can look about about the fact

195
00:09:40,410 --> 00:09:44,880
that you have no servers and when I say

196
00:09:42,390 --> 00:09:47,010
no servers I mean you as a company that

197
00:09:44,880 --> 00:09:50,670
developed the application you don't have

198
00:09:47,010 --> 00:09:54,680
any servers so why is it a con because

199
00:09:50,670 --> 00:09:54,680
you cannot deploy anything if you don't

200
00:09:54,990 --> 00:09:58,260
on the computer you know you cannot

201
00:09:56,640 --> 00:10:00,449
detain you cannot monitor where it's

202
00:09:58,260 --> 00:10:03,360
your way you cannot prove security

203
00:10:00,450 --> 00:10:07,080
control where you put your firewall your

204
00:10:03,360 --> 00:10:09,570
ideas you don't because you don't own it

205
00:10:07,080 --> 00:10:12,900
another big con is that there is no

206
00:10:09,570 --> 00:10:16,140
perimeter in the traditional monolithic

207
00:10:12,900 --> 00:10:18,660
application we are all used to one

208
00:10:16,140 --> 00:10:21,390
protocol usually HTTP but not always

209
00:10:18,660 --> 00:10:24,060
coming in to your application this is

210
00:10:21,390 --> 00:10:26,250
the entry point for the user and this is

211
00:10:24,060 --> 00:10:29,579
where you put your all security arsenal

212
00:10:26,250 --> 00:10:31,680
to protect your application but when you

213
00:10:29,580 --> 00:10:33,990
move to server list this is pretty much

214
00:10:31,680 --> 00:10:35,790
gone you have this entry way through

215
00:10:33,990 --> 00:10:39,030
maybe API gateway but you have functions

216
00:10:35,790 --> 00:10:43,589
are triggered through many three events

217
00:10:39,030 --> 00:10:52,170
and events can occur from emails to MQTT

218
00:10:43,590 --> 00:10:54,300
to notifications to and creep entry is

219
00:10:52,170 --> 00:10:56,699
in the database changing to files

220
00:10:54,300 --> 00:11:00,959
uploaded each of them can trigger a

221
00:10:56,700 --> 00:11:03,300
function and you don't have this entry

222
00:11:00,960 --> 00:11:04,770
point to your application where where

223
00:11:03,300 --> 00:11:06,599
you can put all your security controls

224
00:11:04,770 --> 00:11:08,189
and of course this brings you more

225
00:11:06,600 --> 00:11:11,700
complexity in high velocity of the

226
00:11:08,190 --> 00:11:14,280
application of building multiple and

227
00:11:11,700 --> 00:11:16,560
many functions small functions rather

228
00:11:14,280 --> 00:11:19,050
than one big flow where you have when

229
00:11:16,560 --> 00:11:23,869
you build a big flow you can control it

230
00:11:19,050 --> 00:11:23,870
throughout the flow but when you build

231
00:11:29,100 --> 00:11:32,850
microservices versus control of the

232
00:11:31,230 --> 00:11:37,380
authentication on each of these

233
00:11:32,850 --> 00:11:40,380
functions separately but this is also

234
00:11:37,380 --> 00:11:42,720
something that you have to manage and of

235
00:11:40,380 --> 00:11:44,670
course the rapid that this type of

236
00:11:42,720 --> 00:11:46,980
technology allows you to develop in

237
00:11:44,670 --> 00:11:49,290
makes it harder for the security teams

238
00:11:46,980 --> 00:11:50,790
to pet to keep in pace if you have

239
00:11:49,290 --> 00:11:52,260
multiple function deployed every week

240
00:11:50,790 --> 00:11:54,510
it's harder for the security team to

241
00:11:52,260 --> 00:11:57,510
keep on track with that but there are

242
00:11:54,510 --> 00:11:59,340
also pros so yeah I think the biggest

243
00:11:57,510 --> 00:12:01,410
challenge actually had the biggest Pro

244
00:11:59,340 --> 00:12:03,630
actually there's no service think about

245
00:12:01,410 --> 00:12:06,569
it you don't have manage and to deal

246
00:12:03,630 --> 00:12:08,820
with anything any server just write up

247
00:12:06,570 --> 00:12:12,600
your codes take care of your application

248
00:12:08,820 --> 00:12:13,950
so OPSEC is all you are left with for

249
00:12:12,600 --> 00:12:16,020
security and everything else is managing

250
00:12:13,950 --> 00:12:18,480
maintained by the provider so

251
00:12:16,020 --> 00:12:19,319
fine-grained as I said so if think about

252
00:12:18,480 --> 00:12:22,020
it like that

253
00:12:19,320 --> 00:12:25,410
if each function does its own purpose

254
00:12:22,020 --> 00:12:28,620
like let's say a function needs to write

255
00:12:25,410 --> 00:12:32,750
an entry to a database that's it so it

256
00:12:28,620 --> 00:12:32,750
should run for like one second or even

257
00:12:34,420 --> 00:12:39,370
20 milliseconds and that's it so you can

258
00:12:37,000 --> 00:12:42,220
actually feel you could do it may be

259
00:12:39,370 --> 00:12:44,140
manually would be tough but if you could

260
00:12:42,220 --> 00:12:46,209
do could give this function the

261
00:12:44,140 --> 00:12:51,610
permissions and the excellent role to do

262
00:12:46,209 --> 00:12:54,910
this action only dissection this would

263
00:12:51,610 --> 00:12:58,269
really improve your attack surface or

264
00:12:54,910 --> 00:13:03,790
reduce your attack surface transparency

265
00:12:58,269 --> 00:13:06,850
I look at it like that if you deal with

266
00:13:03,790 --> 00:13:08,740
containers 4d download the container you

267
00:13:06,850 --> 00:13:11,200
running deploying a container you don't

268
00:13:08,740 --> 00:13:12,490
really know everything that's inside you

269
00:13:11,200 --> 00:13:14,860
might know the things that you need to

270
00:13:12,490 --> 00:13:18,579
but you also have to check which ports

271
00:13:14,860 --> 00:13:20,380
are open what what processes are

272
00:13:18,579 --> 00:13:22,269
installed there and running maybe you

273
00:13:20,380 --> 00:13:25,540
have a whole mobility there so now in

274
00:13:22,269 --> 00:13:27,700
service this doesn't exist because you

275
00:13:25,540 --> 00:13:29,140
interact only with what you need and you

276
00:13:27,700 --> 00:13:31,870
have only what you need so if you're

277
00:13:29,140 --> 00:13:36,850
running a Python function there is

278
00:13:31,870 --> 00:13:39,070
nothing inside but your Python code okay

279
00:13:36,850 --> 00:13:41,829
there are some forced libraries built in

280
00:13:39,070 --> 00:13:45,370
libraries but nothing is running there

281
00:13:41,829 --> 00:13:48,250
that shouldn't be running ports if you

282
00:13:45,370 --> 00:13:50,589
find a zero-day UV providers container

283
00:13:48,250 --> 00:13:53,020
that's that's a big thing and the fee

284
00:13:50,589 --> 00:14:02,560
morality is the fact that everything

285
00:13:53,020 --> 00:14:04,990
dies after they stop running ok I hope

286
00:14:02,560 --> 00:14:08,170
this is of course not enough to know

287
00:14:04,990 --> 00:14:12,310
about server less but it's all we can do

288
00:14:08,170 --> 00:14:15,040
so we can start diving to security I

289
00:14:12,310 --> 00:14:19,560
suggest this is a very big technology

290
00:14:15,040 --> 00:14:19,560
coming up and she probably would be

291
00:14:20,160 --> 00:14:27,209
would be part of the coming future so I

292
00:14:24,480 --> 00:14:29,260
suggest that if you're interested in

293
00:14:27,209 --> 00:14:30,849
keeping pace with the newest

294
00:14:29,260 --> 00:14:34,240
technologies read about it there are

295
00:14:30,850 --> 00:14:34,949
many security challenges and things to

296
00:14:34,240 --> 00:14:37,329
consider

297
00:14:34,949 --> 00:14:40,750
one of the project that we decided to

298
00:14:37,329 --> 00:14:44,079
open is the server stuff then of course

299
00:14:40,750 --> 00:14:48,610
if your knobs guys

300
00:14:44,079 --> 00:14:51,569
no stop and is a source for security

301
00:14:48,610 --> 00:14:54,670
risks and mitigations so we thought that

302
00:14:51,569 --> 00:14:57,309
maybe a OS serverless top 10 would be a

303
00:14:54,670 --> 00:15:01,929
good idea to raise awareness and we

304
00:14:57,309 --> 00:15:06,929
started that by taking the biggest

305
00:15:01,929 --> 00:15:10,959
security and service professionals and

306
00:15:06,929 --> 00:15:13,209
writing an interpretation of the

307
00:15:10,959 --> 00:15:15,790
original top 10 so people will start by

308
00:15:13,209 --> 00:15:18,279
understanding what is the difference

309
00:15:15,790 --> 00:15:21,399
when you shift to service because things

310
00:15:18,279 --> 00:15:23,649
aren't the same so this is the the

311
00:15:21,399 --> 00:15:27,399
current release if you go to the project

312
00:15:23,649 --> 00:15:30,009
you'll find a report stating the

313
00:15:27,399 --> 00:15:31,239
interpretation of top 10 in to server

314
00:15:30,009 --> 00:15:34,230
list

315
00:15:31,239 --> 00:15:37,869
fully the goal the project is to have

316
00:15:34,230 --> 00:15:39,730
course a several specific top 10 but we

317
00:15:37,869 --> 00:15:43,420
are currently running that the project

318
00:15:39,730 --> 00:15:48,519
we're hoping to get some in the wild

319
00:15:43,420 --> 00:15:51,189
data from companies to get this done

320
00:15:48,519 --> 00:15:54,129
yeah so there are some links here then

321
00:15:51,189 --> 00:15:58,089
you can get involved in and let's start

322
00:15:54,129 --> 00:16:00,699
by diving into them one by one and we'll

323
00:15:58,089 --> 00:16:03,459
see some demos and we'll see how they

324
00:16:00,699 --> 00:16:12,128
change when you need to serve us so I

325
00:16:03,459 --> 00:16:16,420
call SLS one so so we if we take the

326
00:16:12,129 --> 00:16:18,309
engine apart from the OS top-10 we call

327
00:16:16,420 --> 00:16:21,660
it interval is that the new term is

328
00:16:18,309 --> 00:16:25,749
event injection as I mentioned functions

329
00:16:21,660 --> 00:16:27,939
3 are trigger to events events can be an

330
00:16:25,749 --> 00:16:32,160
API call so you can understand a REST

331
00:16:27,939 --> 00:16:32,160
API but they can also be through

332
00:16:33,279 --> 00:16:40,569
as I said databases cloud storage

333
00:16:35,860 --> 00:16:42,819
etcetera and there are in this case so

334
00:16:40,569 --> 00:16:46,089
there are many uncontrolled entry points

335
00:16:42,819 --> 00:16:48,519
to your functions and you don't compute

336
00:16:46,089 --> 00:16:50,740
it's not enough to put not that it's not

337
00:16:48,519 --> 00:16:52,930
enough but you use some several times

338
00:16:50,740 --> 00:16:55,269
you can even if you can't even deploy a

339
00:16:52,930 --> 00:16:57,878
firewall because you know you you know

340
00:16:55,269 --> 00:17:00,550
have don't have a server to deploy that

341
00:16:57,879 --> 00:17:03,309
so where do you put your security

342
00:17:00,550 --> 00:17:05,889
control so there are still the

343
00:17:03,309 --> 00:17:08,559
traditional injection attacks command

344
00:17:05,890 --> 00:17:11,520
injection that's QL no SQL cetera they

345
00:17:08,559 --> 00:17:11,520
still leave and see

346
00:17:12,020 --> 00:17:17,750
but they are upset they are different so

347
00:17:15,319 --> 00:17:19,908
the entry point or the atop a vector

348
00:17:17,750 --> 00:17:23,539
would be different to your application

349
00:17:19,909 --> 00:17:26,709
and there are some new injection that

350
00:17:23,539 --> 00:17:31,010
you wouldn't consider when you develop

351
00:17:26,709 --> 00:17:33,620
normal traditional application so MQTT

352
00:17:31,010 --> 00:17:35,919
is now part so IOT is a big part of

353
00:17:33,620 --> 00:17:35,918
allah

354
00:17:38,440 --> 00:17:43,240
five so now you have MTP coming in you

355
00:17:40,720 --> 00:17:45,400
might end up with an injection same with

356
00:17:43,240 --> 00:17:48,790
emails so you know you can send an email

357
00:17:45,400 --> 00:17:51,340
that will trigger a function internally

358
00:17:48,790 --> 00:17:53,740
even so no one is really calling the

359
00:17:51,340 --> 00:17:56,199
function directly but the fact that an

360
00:17:53,740 --> 00:18:00,700
email will send to a specific address my

361
00:17:56,200 --> 00:18:03,780
trigger function and if you take for

362
00:18:00,700 --> 00:18:07,090
example the attachment file name or the

363
00:18:03,780 --> 00:18:12,250
subject you parse it you might end up

364
00:18:07,090 --> 00:18:16,720
with an injection and so the impact in

365
00:18:12,250 --> 00:18:20,590
this case would be different for each

366
00:18:16,720 --> 00:18:22,870
function because usually when I say

367
00:18:20,590 --> 00:18:27,370
usually I'm talking about AWS but each

368
00:18:22,870 --> 00:18:30,370
provider has its own type of security so

369
00:18:27,370 --> 00:18:33,909
one NWS for example which is the biggest

370
00:18:30,370 --> 00:18:35,709
provider you have a specific access

371
00:18:33,910 --> 00:18:38,500
control and permissions for each

372
00:18:35,710 --> 00:18:41,020
function so what can each function do

373
00:18:38,500 --> 00:18:43,780
and we'll get in that later into details

374
00:18:41,020 --> 00:18:46,120
so the the impact that if you have an

375
00:18:43,780 --> 00:18:47,740
injection in the code and your function

376
00:18:46,120 --> 00:18:51,489
is vulnerable to injection someone

377
00:18:47,740 --> 00:18:53,050
somehow managed to to exploit it the

378
00:18:51,490 --> 00:18:55,120
impact depends on the permission that

379
00:18:53,050 --> 00:18:57,159
the function can do in the account if

380
00:18:55,120 --> 00:18:59,260
the function can only write into the

381
00:18:57,160 --> 00:19:02,890
database yet you might end up with

382
00:18:59,260 --> 00:19:05,230
someone modifying your database but if

383
00:19:02,890 --> 00:19:08,410
the function has permissions to read the

384
00:19:05,230 --> 00:19:10,960
databases well they can also read the

385
00:19:08,410 --> 00:19:14,700
database or if your function has other

386
00:19:10,960 --> 00:19:18,010
permissions like creating users

387
00:19:14,700 --> 00:19:21,520
uploading or deleting or creating

388
00:19:18,010 --> 00:19:22,960
databases in cloud storage and changing

389
00:19:21,520 --> 00:19:25,960
permissions there are functions that

390
00:19:22,960 --> 00:19:27,910
change permissions deploying code Wow

391
00:19:25,960 --> 00:19:30,940
this is everything that we can actually

392
00:19:27,910 --> 00:19:33,430
find in the wild for customers they use

393
00:19:30,940 --> 00:19:35,200
a template for example template

394
00:19:33,430 --> 00:19:37,000
permissions because it's hard to do

395
00:19:35,200 --> 00:19:39,880
specific permission for each function

396
00:19:37,000 --> 00:19:42,040
manually so when they do that they end

397
00:19:39,880 --> 00:19:45,010
up with a bunch of functions that each

398
00:19:42,040 --> 00:19:47,020
of them has is over permissive and if

399
00:19:45,010 --> 00:19:49,180
there are some way somehow exploited

400
00:19:47,020 --> 00:19:52,530
they can do it very hard your count you

401
00:19:49,180 --> 00:19:56,070
can end up with wasting all your

402
00:19:52,530 --> 00:19:59,850
I hear or even taking a complete

403
00:19:56,070 --> 00:20:01,800
takeover for the account somehow I don't

404
00:19:59,850 --> 00:20:04,020
know so if they can create a user they

405
00:20:01,800 --> 00:20:07,950
can change permission then they you can

406
00:20:04,020 --> 00:20:10,450
end up with it so we we discussed the no

407
00:20:07,950 --> 00:20:11,990
perimeter so this is a before and after

408
00:20:10,450 --> 00:20:16,080
[Music]

409
00:20:11,990 --> 00:20:18,840
some kind of to illustrate how it looks

410
00:20:16,080 --> 00:20:20,580
so on the left side before monolithic

411
00:20:18,840 --> 00:20:24,030
application you had about a load

412
00:20:20,580 --> 00:20:26,580
balancer or any other gateway into your

413
00:20:24,030 --> 00:20:29,160
function into your code this is the only

414
00:20:26,580 --> 00:20:31,139
way here and in this case you can you

415
00:20:29,160 --> 00:20:34,590
can see that you can the functions are

416
00:20:31,140 --> 00:20:38,340
triggered from processing data of

417
00:20:34,590 --> 00:20:40,949
analytic data from uploading files from

418
00:20:38,340 --> 00:20:43,530
your gateway from your databases on the

419
00:20:40,950 --> 00:20:45,930
storage and whatever you have a

420
00:20:43,530 --> 00:20:47,970
partition when you start building

421
00:20:45,930 --> 00:20:52,080
circles you understand that this is a

422
00:20:47,970 --> 00:20:54,450
great thing you can trigger up code it's

423
00:20:52,080 --> 00:20:56,520
on everything this is great opportunity

424
00:20:54,450 --> 00:21:00,050
for developers for companies but it also

425
00:20:56,520 --> 00:21:02,970
raises about a few security issues that

426
00:21:00,050 --> 00:21:06,090
needs to be taken care of so here is an

427
00:21:02,970 --> 00:21:09,570
example scenario user sends in a male

428
00:21:06,090 --> 00:21:11,879
with a cv cv attached or whatever and

429
00:21:09,570 --> 00:21:14,340
daemon reaches the server server it

430
00:21:11,880 --> 00:21:17,730
doesn't build you it's it's of the

431
00:21:14,340 --> 00:21:20,159
provider and then you trigger an SNS

432
00:21:17,730 --> 00:21:21,630
notifications that triggers the lambda

433
00:21:20,160 --> 00:21:23,700
to read the file from database so

434
00:21:21,630 --> 00:21:25,980
whenever a files arrived into the server

435
00:21:23,700 --> 00:21:30,570
or into the cloud storage you trigger a

436
00:21:25,980 --> 00:21:32,700
function that will indirectly go to the

437
00:21:30,570 --> 00:21:36,510
database pull the file and process it

438
00:21:32,700 --> 00:21:39,150
and if the file name has some code

439
00:21:36,510 --> 00:21:41,400
injection and your function is horrible

440
00:21:39,150 --> 00:21:43,560
you will end up with a code engine and

441
00:21:41,400 --> 00:21:47,070
we'll see some examples let's see one

442
00:21:43,560 --> 00:21:51,840
now let's see how code injection in

443
00:21:47,070 --> 00:21:54,629
stereo SAP so I'll introduce you to DVS

444
00:21:51,840 --> 00:21:56,820
a I'll discuss we'll discuss it later a

445
00:21:54,630 --> 00:21:59,640
little bit more it's a damn vulnerable

446
00:21:56,820 --> 00:22:02,100
service application we developed a

447
00:21:59,640 --> 00:22:04,679
pretty go and donate it to all of us

448
00:22:02,100 --> 00:22:06,570
because this is where I think it we can

449
00:22:04,679 --> 00:22:11,399
we think it can grow

450
00:22:06,570 --> 00:22:15,529
best and you can purchase items here so

451
00:22:11,399 --> 00:22:18,899
for example item two the cars this is a

452
00:22:15,529 --> 00:22:21,749
usual process and this is all my hand

453
00:22:18,899 --> 00:22:24,449
present service you can submit and let's

454
00:22:21,749 --> 00:22:29,210
say for example that make sense a

455
00:22:24,450 --> 00:22:33,059
function with when I want to buy I add

456
00:22:29,210 --> 00:22:37,190
an invalid credit card number okay so of

457
00:22:33,059 --> 00:22:37,190
course the purchase will not succeed

458
00:22:37,669 --> 00:22:44,389
okay so it didn't go through now if I go

459
00:22:40,649 --> 00:22:47,969
to orders you'll see the order with

460
00:22:44,389 --> 00:22:51,658
payment failed this is the order ID the

461
00:22:47,970 --> 00:22:56,190
pending failed so now I'll just tell you

462
00:22:51,659 --> 00:22:58,320
the function that uses this or gets this

463
00:22:56,190 --> 00:23:00,480
information is vulnerable seizes the

464
00:22:58,320 --> 00:23:07,350
vulnerable dependencies and it's

465
00:23:00,480 --> 00:23:09,869
vulnerable to be checked so I have this

466
00:23:07,350 --> 00:23:12,350
function that usually if I look at the

467
00:23:09,869 --> 00:23:18,379
code let's see sorry if I look at the

468
00:23:12,350 --> 00:23:22,789
events on the verb to see I'll see a

469
00:23:18,379 --> 00:23:22,789
pull request from second

470
00:23:26,970 --> 00:23:37,929
let's try again so you can see yeah so

471
00:23:36,070 --> 00:23:40,659
you can see the requests here and the

472
00:23:37,929 --> 00:23:48,100
action is update and order ID with the

473
00:23:40,660 --> 00:23:54,880
items and another and another request is

474
00:23:48,100 --> 00:24:00,280
coming in with so yeah update because

475
00:23:54,880 --> 00:24:03,760
it's an order that was already launched

476
00:24:00,280 --> 00:24:06,970
so now this is the this is the original

477
00:24:03,760 --> 00:24:09,940
request now if I send it to repeater so

478
00:24:06,970 --> 00:24:12,910
I can manage it you can see that I know

479
00:24:09,940 --> 00:24:15,130
for that the function is vulnerable to

480
00:24:12,910 --> 00:24:19,059
subdue code injection through different

481
00:24:15,130 --> 00:24:23,760
ways to do there different ways that I

482
00:24:19,059 --> 00:24:26,320
can just try out some payloads so this

483
00:24:23,760 --> 00:24:29,379
what you can see here is this is the

484
00:24:26,320 --> 00:24:31,030
it's a code it's an exploit now let me

485
00:24:29,380 --> 00:24:34,650
take you through the exploits you

486
00:24:31,030 --> 00:24:37,570
understand how it looks but forget this

487
00:24:34,650 --> 00:24:40,030
example is just the header so that the

488
00:24:37,570 --> 00:24:41,799
function that handle this on the server

489
00:24:40,030 --> 00:24:43,899
side back end that one colored service

490
00:24:41,799 --> 00:24:49,150
article it's not a server that we own

491
00:24:43,900 --> 00:24:51,070
but on the back end is taking the the

492
00:24:49,150 --> 00:24:56,320
original requests of the action and then

493
00:24:51,070 --> 00:24:59,379
trigger invokes another function based

494
00:24:56,320 --> 00:25:01,899
on the input of the function of the

495
00:24:59,380 --> 00:25:04,510
action so if the function receives an

496
00:25:01,900 --> 00:25:08,710
action update it will trigger an update

497
00:25:04,510 --> 00:25:12,460
function on the backend so what we do

498
00:25:08,710 --> 00:25:14,500
here what it means it means a function

499
00:25:12,460 --> 00:25:16,450
has permissions to trigger functions

500
00:25:14,500 --> 00:25:19,419
other functions inside the application

501
00:25:16,450 --> 00:25:22,750
and of course you'll have to enumerate

502
00:25:19,419 --> 00:25:24,760
system and see what's inside but if you

503
00:25:22,750 --> 00:25:26,740
know that the function has permissions

504
00:25:24,760 --> 00:25:28,419
to trigger functions and the function

505
00:25:26,740 --> 00:25:29,970
somehow is vulnerable then you can

506
00:25:28,419 --> 00:25:32,710
trigger any function that you want

507
00:25:29,970 --> 00:25:35,520
unless of course it's restricted by the

508
00:25:32,710 --> 00:25:35,520
permissions and

509
00:25:36,300 --> 00:25:40,110
this case the permissions were set to

510
00:25:38,850 --> 00:25:40,980
any function because this is some kind

511
00:25:40,110 --> 00:25:43,740
of what function does

512
00:25:40,980 --> 00:25:45,780
it's just invokes function so if you

513
00:25:43,740 --> 00:25:48,270
look here you'll have to in order to

514
00:25:45,780 --> 00:25:51,450
exploit service application you have to

515
00:25:48,270 --> 00:25:54,840
get familiar with AWS for example if

516
00:25:51,450 --> 00:25:58,530
these are AWS functions that you have to

517
00:25:54,840 --> 00:26:01,020
get from you is a devil yes code and a

518
00:25:58,530 --> 00:26:06,059
Toledo versus decay for example of how

519
00:26:01,020 --> 00:26:09,510
to interact with functions or resources

520
00:26:06,059 --> 00:26:12,649
like databases so what you can see here

521
00:26:09,510 --> 00:26:18,200
is that I have code injection where I do

522
00:26:12,650 --> 00:26:21,900
require a SS SDK and then I create a new

523
00:26:18,200 --> 00:26:24,660
lambda lambda is is the name of handling

524
00:26:21,900 --> 00:26:27,030
function and then what I do is I'm doing

525
00:26:24,660 --> 00:26:30,660
an invocation of a function where the

526
00:26:27,030 --> 00:26:32,910
function name is VAD BSA admin update

527
00:26:30,660 --> 00:26:35,550
orders and the location type of express

528
00:26:32,910 --> 00:26:40,590
response and the payload which is P

529
00:26:35,550 --> 00:26:46,428
which is coming right before and then

530
00:26:40,590 --> 00:26:50,250
you can see that what when I'll do that

531
00:26:46,429 --> 00:26:54,210
yeah I'll just replace the order ID here

532
00:26:50,250 --> 00:27:01,320
with the order ID that with your order

533
00:26:54,210 --> 00:27:05,840
ID that was here here orders so here you

534
00:27:01,320 --> 00:27:05,840
can see it's payments

535
00:27:06,580 --> 00:27:19,240
fail and I took order ID and yeah

536
00:27:17,180 --> 00:27:19,240
you

537
00:27:22,140 --> 00:27:30,780
yeah and I just the items that I want

538
00:27:26,350 --> 00:27:30,780
around and now when i refresh that

539
00:27:35,160 --> 00:27:43,470
it is paid now right how was that

540
00:27:38,610 --> 00:27:45,840
possible because the function that has

541
00:27:43,470 --> 00:27:48,360
code injection has a permissions to

542
00:27:45,840 --> 00:27:51,480
invoke other functions so this is what I

543
00:27:48,360 --> 00:27:54,330
use this is just one way of doing an

544
00:27:51,480 --> 00:27:56,160
injection attack on server ask if you

545
00:27:54,330 --> 00:27:58,049
know that the function for example has

546
00:27:56,160 --> 00:27:59,910
permission to write into the database

547
00:27:58,049 --> 00:28:04,110
you can just write a code that writes

548
00:27:59,910 --> 00:28:07,380
into a database or you do new clients a

549
00:28:04,110 --> 00:28:09,178
DynamoDB and then you do dynamodb food

550
00:28:07,380 --> 00:28:11,820
item and you write an item into the

551
00:28:09,179 --> 00:28:14,610
database so the attacks are the same but

552
00:28:11,820 --> 00:28:18,270
the attack vectors and maybe the

553
00:28:14,610 --> 00:28:20,070
payloads of course are different and of

554
00:28:18,270 --> 00:28:22,200
course this is just one as I said there

555
00:28:20,070 --> 00:28:23,820
are many ways or other of injection

556
00:28:22,200 --> 00:28:27,929
attacks I'll show you another injection

557
00:28:23,820 --> 00:28:30,658
part of injection of that soon that the

558
00:28:27,929 --> 00:28:33,150
second thing that wolves discuss is the

559
00:28:30,659 --> 00:28:35,610
broken authentication for these dope ten

560
00:28:33,150 --> 00:28:39,210
again is taken from the top you original

561
00:28:35,610 --> 00:28:41,969
always top ten if you don't have a top

562
00:28:39,210 --> 00:28:44,940
ten design for suppose but this is

563
00:28:41,970 --> 00:28:47,220
coming so we did we said that the

564
00:28:44,940 --> 00:28:52,620
functions are stateless that means that

565
00:28:47,220 --> 00:28:54,720
you cannot you cannot put authentication

566
00:28:52,620 --> 00:28:56,789
into a session or something you don't

567
00:28:54,720 --> 00:28:59,610
have that anymore so how do you deal

568
00:28:56,789 --> 00:29:02,158
with that there are many ways to deal

569
00:28:59,610 --> 00:29:04,649
with that but the providers of course

570
00:29:02,159 --> 00:29:09,030
giving you some tools to do that

571
00:29:04,650 --> 00:29:12,720
so for AWS you have AWS Candido Camino

572
00:29:09,030 --> 00:29:17,668
which handles your authentication from

573
00:29:12,720 --> 00:29:23,820
outside the application it's it may be

574
00:29:17,669 --> 00:29:26,909
it would be less intuitive but it it

575
00:29:23,820 --> 00:29:29,010
works but you have to deal with that so

576
00:29:26,909 --> 00:29:33,409
for every function that runs up you have

577
00:29:29,010 --> 00:29:35,940
to know how to deal with the education

578
00:29:33,409 --> 00:29:37,950
so again you have multiple entry points

579
00:29:35,940 --> 00:29:40,260
so it's not enough to put the

580
00:29:37,950 --> 00:29:42,330
authentication on your function

581
00:29:40,260 --> 00:29:45,720
interacting with functions with the

582
00:29:42,330 --> 00:29:48,389
users but maybe someone somehow you have

583
00:29:45,720 --> 00:29:51,270
an injection or something some other

584
00:29:48,390 --> 00:29:53,730
in your application and somehow someone

585
00:29:51,270 --> 00:29:56,250
can trigger an internal because for

586
00:29:53,730 --> 00:29:58,290
example this admin function is a back

587
00:29:56,250 --> 00:30:00,900
office it's not it's not even open

588
00:29:58,290 --> 00:30:03,260
through the radiate their gateway there

589
00:30:00,900 --> 00:30:07,020
is no way to call this function directly

590
00:30:03,260 --> 00:30:09,750
but another function has the permissions

591
00:30:07,020 --> 00:30:12,840
to invoke functions or maybe there are

592
00:30:09,750 --> 00:30:16,620
an invoke through a normal service like

593
00:30:12,840 --> 00:30:18,419
like an email or a notification and if

594
00:30:16,620 --> 00:30:23,219
you don't put the authentication there

595
00:30:18,420 --> 00:30:25,890
you might end up with with a broken on

596
00:30:23,220 --> 00:30:30,030
authentication this is a simple flow so

597
00:30:25,890 --> 00:30:31,650
you have a function that's you do a pull

598
00:30:30,030 --> 00:30:35,399
request for example you can interact

599
00:30:31,650 --> 00:30:37,650
with your code also so you have you

600
00:30:35,400 --> 00:30:39,780
couldn't you do a commit sends an email

601
00:30:37,650 --> 00:30:42,240
to the manager which has two code review

602
00:30:39,780 --> 00:30:44,190
and then reply and then it triggers

603
00:30:42,240 --> 00:30:46,170
another function that approves or

604
00:30:44,190 --> 00:30:50,250
decline the pull request or even deploy

605
00:30:46,170 --> 00:30:52,590
the code but if we or the email itself

606
00:30:50,250 --> 00:30:54,360
for example the the address email

607
00:30:52,590 --> 00:30:55,020
address that you could be set up

608
00:30:54,360 --> 00:30:59,189
internally

609
00:30:55,020 --> 00:31:01,980
I'd say Co deploy at my old dot m ID my

610
00:30:59,190 --> 00:31:05,220
or comm then if someone can send an

611
00:31:01,980 --> 00:31:07,950
email to that email address then they

612
00:31:05,220 --> 00:31:12,090
can trigger a function same with other

613
00:31:07,950 --> 00:31:16,650
scenario like cloud storage three

614
00:31:12,090 --> 00:31:20,639
markets etcetera next thing is the

615
00:31:16,650 --> 00:31:24,780
sensitive data exposure so basically

616
00:31:20,640 --> 00:31:26,880
it's the same in the cloud so data are

617
00:31:24,780 --> 00:31:31,920
sensitive in the clouds and outside of

618
00:31:26,880 --> 00:31:35,850
it the maybe the most common scenarios

619
00:31:31,920 --> 00:31:39,450
for you to understand in serverless is

620
00:31:35,850 --> 00:31:43,740
that when you launch an application it

621
00:31:39,450 --> 00:31:46,020
runs into in a read-only space part from

622
00:31:43,740 --> 00:31:48,720
the slash damn library so everything you

623
00:31:46,020 --> 00:31:51,510
want to write you write into that slash

624
00:31:48,720 --> 00:31:53,550
stamp and if you don't delete it after

625
00:31:51,510 --> 00:31:55,920
what after you finish with it someone

626
00:31:53,550 --> 00:32:01,040
end up could end up there stealing your

627
00:31:55,920 --> 00:32:02,340
data data how do you put some

628
00:32:01,040 --> 00:32:04,290
configurations

629
00:32:02,340 --> 00:32:07,050
the function so you use environment

630
00:32:04,290 --> 00:32:09,680
variables if you put up key I've

631
00:32:07,050 --> 00:32:12,270
encrypted you put keys unencrypted

632
00:32:09,680 --> 00:32:14,130
someone can steal them and we'll see how

633
00:32:12,270 --> 00:32:18,540
we can still there since the environment

634
00:32:14,130 --> 00:32:22,050
variables in just a few minutes if you

635
00:32:18,540 --> 00:32:24,780
have buckets cloud storage like f3

636
00:32:22,050 --> 00:32:28,020
buckets or blobs as your blog's and you

637
00:32:24,780 --> 00:32:30,389
put sensitive data there then and you

638
00:32:28,020 --> 00:32:33,900
and the buckets are configured or

639
00:32:30,390 --> 00:32:39,870
insecure people can just browse them

640
00:32:33,900 --> 00:32:42,870
it's like the fire folder browsing that

641
00:32:39,870 --> 00:32:45,000
we used to see monolithic application

642
00:32:42,870 --> 00:32:47,760
then someone can just see the files that

643
00:32:45,000 --> 00:32:51,630
you have there and if you have sensitive

644
00:32:47,760 --> 00:32:52,650
files they might end up on the wrong

645
00:32:51,630 --> 00:32:54,840
hand in the wrong hands

646
00:32:52,650 --> 00:32:57,870
our tools I'll show them that shows you

647
00:32:54,840 --> 00:33:00,260
like open iot cameras etcetera that

648
00:32:57,870 --> 00:33:03,000
there are tools also that can show you

649
00:33:00,260 --> 00:33:10,470
open buckets and you can just browse

650
00:33:03,000 --> 00:33:13,470
there which is a big security issue ok

651
00:33:10,470 --> 00:33:15,330
so another sensitive information that

652
00:33:13,470 --> 00:33:17,490
you might want to pay attention to is

653
00:33:15,330 --> 00:33:20,490
the function keys so each function runs

654
00:33:17,490 --> 00:33:23,520
with government variables that holds its

655
00:33:20,490 --> 00:33:26,010
keys these keys are the keys that are

656
00:33:23,520 --> 00:33:27,510
used in the account to do what the

657
00:33:26,010 --> 00:33:31,440
function is allowed to do so if the

658
00:33:27,510 --> 00:33:34,230
function is allowed to write it to do a

659
00:33:31,440 --> 00:33:36,450
deal with the database these Keys will

660
00:33:34,230 --> 00:33:39,300
allow you to do the same thing this is

661
00:33:36,450 --> 00:33:42,590
what gives the function the ability to

662
00:33:39,300 --> 00:33:47,430
do that so you can see here there are

663
00:33:42,590 --> 00:33:51,720
AWS access key ID and the session token

664
00:33:47,430 --> 00:33:56,040
and the security token did peruse the

665
00:33:51,720 --> 00:33:58,470
actions every other environment valuable

666
00:33:56,040 --> 00:34:01,560
that you want to put here your keys to

667
00:33:58,470 --> 00:34:05,310
your meat or your keys to your Twitter

668
00:34:01,560 --> 00:34:09,360
account they will show so you better

669
00:34:05,310 --> 00:34:13,920
encrypt them and we'll see next an

670
00:34:09,360 --> 00:34:16,169
attack how you can steal this yeah if

671
00:34:13,920 --> 00:34:17,849
you skis you can do

672
00:34:16,168 --> 00:34:21,629
well function can do and you can run

673
00:34:17,849 --> 00:34:24,750
them from your computer at home you

674
00:34:21,629 --> 00:34:26,339
don't have to be off on premise on frame

675
00:34:24,750 --> 00:34:29,869
or something they are in the cloud and

676
00:34:26,339 --> 00:34:31,710
these keys can interact with clouds

677
00:34:29,869 --> 00:34:33,809
resources you can do it from your

678
00:34:31,710 --> 00:34:36,629
computer you just need to download the

679
00:34:33,809 --> 00:34:39,720
AWS SDK so you can run as you can see

680
00:34:36,629 --> 00:34:41,848
here it is DynamoDB lists tables with

681
00:34:39,719 --> 00:34:44,279
the stolen kid and you'll get the list

682
00:34:41,849 --> 00:34:46,159
of tables and you can do everything that

683
00:34:44,280 --> 00:34:51,089
the function these keys allow you to do

684
00:34:46,159 --> 00:34:54,619
okay we're keeping with we sure the time

685
00:34:51,089 --> 00:34:58,020
so I'll keep that do things faster so

686
00:34:54,619 --> 00:35:00,270
xxe and on external entity there are

687
00:34:58,020 --> 00:35:03,599
still there I would say they would be

688
00:35:00,270 --> 00:35:06,900
less common because usually they'll last

689
00:35:03,599 --> 00:35:10,859
with XML but if you do you can still be

690
00:35:06,900 --> 00:35:13,799
under VPC or you probably would use a

691
00:35:10,859 --> 00:35:17,848
built-in libraries which might if you

692
00:35:13,799 --> 00:35:22,020
are using secure version might not have

693
00:35:17,849 --> 00:35:23,790
access XE yeah that's sexy but it

694
00:35:22,020 --> 00:35:26,700
doesn't mean there they are not there as

695
00:35:23,790 --> 00:35:31,140
you can see here they are there and you

696
00:35:26,700 --> 00:35:33,180
can you can do that again it depends on

697
00:35:31,140 --> 00:35:35,819
the configuration of the function there

698
00:35:33,180 --> 00:35:37,410
is nothing new here rather than the

699
00:35:35,819 --> 00:35:40,920
function running in the cloud so you

700
00:35:37,410 --> 00:35:42,779
might not end up you might end up under

701
00:35:40,920 --> 00:35:45,540
50 seats who you won't be able to go

702
00:35:42,780 --> 00:35:52,380
outside and steal this data but it still

703
00:35:45,540 --> 00:35:55,109
stays ok broken access control I say I

704
00:35:52,380 --> 00:35:58,079
call broken access control in a server

705
00:35:55,109 --> 00:36:01,049
less over privileged functions and

706
00:35:58,079 --> 00:36:03,750
resources that means that function has a

707
00:36:01,049 --> 00:36:05,609
too permissive role if the function it

708
00:36:03,750 --> 00:36:07,470
needs only to write into the database

709
00:36:05,609 --> 00:36:09,750
but can do everything in the database

710
00:36:07,470 --> 00:36:12,660
not only that they can it can also do

711
00:36:09,750 --> 00:36:15,510
other things because the companies don't

712
00:36:12,660 --> 00:36:17,700
have the capacity or knowledge to write

713
00:36:15,510 --> 00:36:20,700
a specific and very specific permission

714
00:36:17,700 --> 00:36:23,640
then the function can do things that

715
00:36:20,700 --> 00:36:26,669
they shouldn't be doing and you need to

716
00:36:23,640 --> 00:36:30,210
understand how the permissions in the

717
00:36:26,670 --> 00:36:32,430
cloud provider works so for example

718
00:36:30,210 --> 00:36:35,250
this code it doesn't do anything

719
00:36:32,430 --> 00:36:37,470
important so this part function runs the

720
00:36:35,250 --> 00:36:41,550
function runs this code all it does it's

721
00:36:37,470 --> 00:36:43,740
reading a file from temp and creating a

722
00:36:41,550 --> 00:36:46,470
stream out of it so it doesn't really

723
00:36:43,740 --> 00:36:48,299
matter what it does so when you go when

724
00:36:46,470 --> 00:36:50,879
you say the developer to to the

725
00:36:48,300 --> 00:36:52,859
developer that writes this function okay

726
00:36:50,880 --> 00:36:54,330
you have to assign a permitting to the

727
00:36:52,859 --> 00:36:55,799
chemicals here to developer and they

728
00:36:54,330 --> 00:36:59,359
will come up with something like this

729
00:36:55,800 --> 00:37:04,200
this is how a policy for our permission

730
00:36:59,359 --> 00:37:08,009
looks like and they say okay I want to

731
00:37:04,200 --> 00:37:09,660
allow any action into an f3 bucket

732
00:37:08,010 --> 00:37:11,010
because the function reads the file from

733
00:37:09,660 --> 00:37:15,118
that's Reebok it downloads it and I

734
00:37:11,010 --> 00:37:18,920
think - yeah - temp and then reads it so

735
00:37:15,119 --> 00:37:22,440
I want to do to perform any action on f3

736
00:37:18,920 --> 00:37:25,740
from and on any every resource so if you

737
00:37:22,440 --> 00:37:28,520
go to the AWS examples online you might

738
00:37:25,740 --> 00:37:31,229
actually find that but this is not

739
00:37:28,520 --> 00:37:35,700
security so how would you do security

740
00:37:31,230 --> 00:37:37,619
you would have you would I back it as a

741
00:37:35,700 --> 00:37:40,410
specific bucket that the function can do

742
00:37:37,619 --> 00:37:43,650
and not only that you would put the

743
00:37:40,410 --> 00:37:45,660
actual specific action that the function

744
00:37:43,650 --> 00:37:48,420
should do so in this case not only the

745
00:37:45,660 --> 00:37:51,060
function can only do get object nothing

746
00:37:48,420 --> 00:37:53,369
from the bucket they can only do it from

747
00:37:51,060 --> 00:37:56,070
a specific bucket so if you do that for

748
00:37:53,369 --> 00:38:01,099
every function you can end up with a

749
00:37:56,070 --> 00:38:04,050
really really secure architecture okay

750
00:38:01,099 --> 00:38:07,619
yeah let's go through them so 6 is a

751
00:38:04,050 --> 00:38:10,349
security miss configuration functions as

752
00:38:07,619 --> 00:38:13,109
I said they not only interact with the

753
00:38:10,349 --> 00:38:15,270
user also in the environment the

754
00:38:13,109 --> 00:38:17,339
complexity of having thousands of

755
00:38:15,270 --> 00:38:19,710
functions or hundreds of function is

756
00:38:17,339 --> 00:38:23,160
difficult and you have to do to

757
00:38:19,710 --> 00:38:25,650
determine how many parallel invocations

758
00:38:23,160 --> 00:38:28,859
can you run and the timeout these can

759
00:38:25,650 --> 00:38:31,320
end up doing causing here denial service

760
00:38:28,859 --> 00:38:35,160
or denial well it depends on how you

761
00:38:31,320 --> 00:38:37,260
configure them a big problem with

762
00:38:35,160 --> 00:38:41,279
configuration is the f3 bucket so I'll

763
00:38:37,260 --> 00:38:43,900
show you a demo sorry there is a bucket

764
00:38:41,280 --> 00:38:47,529
that we're

765
00:38:43,900 --> 00:38:49,569
thieves there is a bad open bucket in

766
00:38:47,529 --> 00:38:51,579
this devious a application soap you can

767
00:38:49,569 --> 00:38:55,500
see here of an imbroglio HTTP tunnel and

768
00:38:51,579 --> 00:38:58,410
when I'll run I'll upload the bucket is

769
00:38:55,500 --> 00:39:01,860
configured and people can just

770
00:38:58,410 --> 00:39:05,250
load files today so it's okay on certain

771
00:39:01,860 --> 00:39:08,190
times but you have to deal with it so in

772
00:39:05,250 --> 00:39:10,950
this command so it's just basically copy

773
00:39:08,190 --> 00:39:14,070
any file even it doesn't exist to this

774
00:39:10,950 --> 00:39:17,430
specific bucket it will have a code

775
00:39:14,070 --> 00:39:21,740
injection here that says Carol into my

776
00:39:17,430 --> 00:39:25,830
the Anne work here with an Alice right

777
00:39:21,740 --> 00:39:28,319
so you can see that I got a request here

778
00:39:25,830 --> 00:39:32,450
when I press here I'll see that the LS

779
00:39:28,320 --> 00:39:36,420
show back end oh so sorry

780
00:39:32,450 --> 00:39:45,080
so since we have a short time I'll keep

781
00:39:36,420 --> 00:39:47,850
the ongoing LS how I examine the

782
00:39:45,080 --> 00:39:50,310
environment to see what's inside and

783
00:39:47,850 --> 00:39:53,759
let's say that I do now CD back-end and

784
00:39:50,310 --> 00:39:55,470
then again when I ask and then I'll know

785
00:39:53,760 --> 00:39:57,060
what's the next folder and the next

786
00:39:55,470 --> 00:40:02,370
folder and the next folder and

787
00:39:57,060 --> 00:40:04,920
eventually what I'll do is this so in

788
00:40:02,370 --> 00:40:07,140
this case what I'm doing is this yeah CD

789
00:40:04,920 --> 00:40:09,180
back and CD store City function I cannot

790
00:40:07,140 --> 00:40:12,600
put passions in the fund name so I have

791
00:40:09,180 --> 00:40:15,600
to do a CD each time then the family in

792
00:40:12,600 --> 00:40:19,799
etcetera see email and when I do here is

793
00:40:15,600 --> 00:40:22,560
I do a cat off the code wrap it in

794
00:40:19,800 --> 00:40:29,280
debate or and then sending it to my

795
00:40:22,560 --> 00:40:33,210
computer when I'll shoot that up so no

796
00:40:29,280 --> 00:40:37,560
code I just upload a file and I just I

797
00:40:33,210 --> 00:40:40,670
got a request here and now now when I

798
00:40:37,560 --> 00:40:45,570
look at the next one I can see a base 64

799
00:40:40,670 --> 00:40:48,240
which actually is a cat of the file name

800
00:40:45,570 --> 00:40:51,350
of the file so sorry

801
00:40:48,240 --> 00:40:51,350
I'll do this

802
00:41:00,540 --> 00:41:08,070
they 64 the code I'll get the code of

803
00:41:05,220 --> 00:41:12,149
the function running in your back-end so

804
00:41:08,070 --> 00:41:16,710
the thing same thing I can do is the the

805
00:41:12,150 --> 00:41:20,220
end of the ant farm adder which gives me

806
00:41:16,710 --> 00:41:22,260
the permissions they the environment

807
00:41:20,220 --> 00:41:30,660
variable which has the key so if I'll do

808
00:41:22,260 --> 00:41:36,109
the same thing here it's here so instead

809
00:41:30,660 --> 00:41:36,109
of cut this I'll do just

810
00:41:46,020 --> 00:41:54,710
another request Kinyon our have real

811
00:41:52,410 --> 00:41:54,710
quick

812
00:42:04,349 --> 00:42:10,390
sixty-four minus - decode I never see

813
00:42:07,720 --> 00:42:13,629
that now I have the security token the

814
00:42:10,390 --> 00:42:16,750
access key and second token and now I

815
00:42:13,630 --> 00:42:19,839
can send requests to the function Oh

816
00:42:16,750 --> 00:42:22,480
actually this resource service resources

817
00:42:19,839 --> 00:42:27,880
using these credentials and I might end

818
00:42:22,480 --> 00:42:29,470
up with many more things that India of

819
00:42:27,880 --> 00:42:32,549
the account or I can interact with

820
00:42:29,470 --> 00:42:38,740
databases and storages

821
00:42:32,549 --> 00:42:42,309
users all right let's keep up cross-site

822
00:42:38,740 --> 00:42:44,589
scripting so we have precise scripting

823
00:42:42,309 --> 00:42:46,170
it's just that now it's a little

824
00:42:44,589 --> 00:42:48,130
different because it's not our usual

825
00:42:46,170 --> 00:42:50,260
it's not a request

826
00:42:48,130 --> 00:42:52,030
going into the pumpkin and coming back

827
00:42:50,260 --> 00:42:54,579
to the to the backend and coming back in

828
00:42:52,030 --> 00:42:57,160
but it can also be through other

829
00:42:54,579 --> 00:43:00,640
resources so if you can see here I have

830
00:42:57,160 --> 00:43:02,529
a function that doesn't have and doesn't

831
00:43:00,640 --> 00:43:04,750
interact with an API a gateway or

832
00:43:02,530 --> 00:43:09,790
something so you don't really call the

833
00:43:04,750 --> 00:43:12,369
function the code but event an assonance

834
00:43:09,790 --> 00:43:13,750
or notification is sent when something

835
00:43:12,369 --> 00:43:16,869
out happened what say an email was that

836
00:43:13,750 --> 00:43:19,630
and I take that the the the subject of

837
00:43:16,869 --> 00:43:22,720
this email and then I put it into the

838
00:43:19,630 --> 00:43:24,760
function and then I want to show it

839
00:43:22,720 --> 00:43:26,500
somewhere in the application I might get

840
00:43:24,760 --> 00:43:28,960
up end up with a cross-site scripting

841
00:43:26,500 --> 00:43:31,089
that will send through an email this is

842
00:43:28,960 --> 00:43:34,270
not something that we used you before

843
00:43:31,089 --> 00:43:38,589
service many other scenarios but we

844
00:43:34,270 --> 00:43:43,540
don't have time to cover them all okay

845
00:43:38,589 --> 00:43:47,740
insecurity serialization again it's it's

846
00:43:43,540 --> 00:43:51,970
there it's not new so the service allows

847
00:43:47,740 --> 00:43:56,169
you or usually is very very common for

848
00:43:51,970 --> 00:43:58,240
either Python or no also java.net and

849
00:43:56,170 --> 00:44:01,059
now AWS announced that you can have

850
00:43:58,240 --> 00:44:06,250
bring your own language where you can

851
00:44:01,059 --> 00:44:08,589
run your own language so these

852
00:44:06,250 --> 00:44:11,500
vulnerabilities will usually occur

853
00:44:08,589 --> 00:44:13,210
through third-party libraries and you

854
00:44:11,500 --> 00:44:14,350
can still have just something that we

855
00:44:13,210 --> 00:44:17,200
find in a while so

856
00:44:14,350 --> 00:44:20,770
we actually found it on beat up a code

857
00:44:17,200 --> 00:44:24,299
or a code that is running its

858
00:44:20,770 --> 00:44:27,759
surveillance code that interact with

859
00:44:24,300 --> 00:44:29,770
with telegram map okay and it's one

860
00:44:27,760 --> 00:44:31,990
about to exit co2 sorry to

861
00:44:29,770 --> 00:44:35,350
disorganisation if I'll take this

862
00:44:31,990 --> 00:44:37,509
payload code here that does something

863
00:44:35,350 --> 00:44:43,630
that we saw before right so runtime dot

864
00:44:37,510 --> 00:44:50,490
get exact and then and equals n PI by 64

865
00:44:43,630 --> 00:44:50,490
wrap and curl into my my computer then

866
00:44:50,940 --> 00:44:57,060
and this and I will get just the

867
00:44:55,410 --> 00:44:58,410
environment variables including the keys

868
00:44:57,060 --> 00:45:02,339
or the code so again it's the same

869
00:44:58,410 --> 00:45:04,618
attack but you would attack it different

870
00:45:02,339 --> 00:45:06,839
know what you need what are the

871
00:45:04,619 --> 00:45:08,819
resources that you overdid for mentioned

872
00:45:06,839 --> 00:45:15,089
that you can extract out of your

873
00:45:08,819 --> 00:45:16,650
application okay okay vulnerable

874
00:45:15,089 --> 00:45:19,200
dependencies it's number nine on

875
00:45:16,650 --> 00:45:21,540
monolithic apps I'd say it would be at

876
00:45:19,200 --> 00:45:25,529
least number five we'll have to see on

877
00:45:21,540 --> 00:45:28,170
serverless because the fact that

878
00:45:25,530 --> 00:45:31,160
functions really do ten lines of code

879
00:45:28,170 --> 00:45:35,339
this is usually how we see it so doubt

880
00:45:31,160 --> 00:45:37,319
no sorry time 100 lines of code can get

881
00:45:35,339 --> 00:45:42,540
to three hundred even a thousand but

882
00:45:37,319 --> 00:45:47,250
usually even less so we'd say 100 200 is

883
00:45:42,540 --> 00:45:49,050
the average so how do you do so much or

884
00:45:47,250 --> 00:45:51,839
how you can do everything that you want

885
00:45:49,050 --> 00:45:54,270
to do in this 100 lines of code because

886
00:45:51,839 --> 00:45:57,299
you the function comes built in with

887
00:45:54,270 --> 00:46:00,690
bunch of dependencies that come in you

888
00:45:57,300 --> 00:46:03,869
need to the SDK the the front of the

889
00:46:00,690 --> 00:46:06,450
parsers you need something for your JWT

890
00:46:03,869 --> 00:46:09,300
open equation and you need everything so

891
00:46:06,450 --> 00:46:12,020
that the function the 100 lines of code

892
00:46:09,300 --> 00:46:15,060
that you wrote can do their job and

893
00:46:12,020 --> 00:46:17,609
usually this is ends up when with

894
00:46:15,060 --> 00:46:19,770
vulnerable dependencies and if we have a

895
00:46:17,609 --> 00:46:21,750
vulnerable dependency even in one of the

896
00:46:19,770 --> 00:46:24,180
functions and it's somehow vulnerable in

897
00:46:21,750 --> 00:46:27,420
your code then you might have end up

898
00:46:24,180 --> 00:46:29,250
with other exploits application so this

899
00:46:27,420 --> 00:46:37,430
is something that is very important to

900
00:46:29,250 --> 00:46:40,920
monitor on serve us at number 10 time

901
00:46:37,430 --> 00:46:43,549
number and be of the top ten the

902
00:46:40,920 --> 00:46:46,710
insufficient logging and monitoring so

903
00:46:43,550 --> 00:46:49,380
the the difference here is again that

904
00:46:46,710 --> 00:46:53,819
you don't own the infrastructure so you

905
00:46:49,380 --> 00:46:56,579
cannot put a logger or firewall or an

906
00:46:53,819 --> 00:46:57,810
IDs it will monitor your network or

907
00:46:56,579 --> 00:47:00,510
whatever it's not yours

908
00:46:57,810 --> 00:47:01,349
you cannot deploy anything but it's not

909
00:47:00,510 --> 00:47:03,210
there you are left

910
00:47:01,349 --> 00:47:04,680
cloning desert the provider is giving

911
00:47:03,210 --> 00:47:06,599
you the tools but

912
00:47:04,680 --> 00:47:08,460
you need to know first you need to know

913
00:47:06,599 --> 00:47:10,680
how to eat to interact with them so you

914
00:47:08,460 --> 00:47:14,910
actually have to call them and to

915
00:47:10,680 --> 00:47:19,529
process the information that get and but

916
00:47:14,910 --> 00:47:21,089
not only you need to do that but you

917
00:47:19,529 --> 00:47:23,369
need or how you can get the information

918
00:47:21,089 --> 00:47:25,319
that you need you want to get out of it

919
00:47:23,369 --> 00:47:29,069
because if you have them a 1 million

920
00:47:25,319 --> 00:47:31,500
location of a specific function how you

921
00:47:29,069 --> 00:47:34,259
can learn something from it you have so

922
00:47:31,500 --> 00:47:36,029
much data through your log again

923
00:47:34,260 --> 00:47:38,630
mechanism that you need to actually

924
00:47:36,029 --> 00:47:38,630
right

925
00:47:41,740 --> 00:47:45,819
your own logs and Monica you brought

926
00:47:44,260 --> 00:47:48,420
into my dream date yeah

927
00:47:45,820 --> 00:47:53,320
so you can actually get value from it

928
00:47:48,420 --> 00:47:56,200
there are of course tools for service

929
00:47:53,320 --> 00:47:57,400
that to use that we for you compose the

930
00:47:56,200 --> 00:47:59,890
company we provide solutions for

931
00:47:57,400 --> 00:48:01,450
everything that you saw here but there

932
00:47:59,890 --> 00:48:04,690
are companies that are not only for

933
00:48:01,450 --> 00:48:08,710
security for you can just they want to

934
00:48:04,690 --> 00:48:11,530
show you your debugging of your

935
00:48:08,710 --> 00:48:16,270
application exist so you have to know

936
00:48:11,530 --> 00:48:21,340
how to use it and what goes okay

937
00:48:16,270 --> 00:48:23,440
so we're to be done with that so how do

938
00:48:21,340 --> 00:48:25,360
you learn more because I'll tell you the

939
00:48:23,440 --> 00:48:27,310
truth I'm still learning about it so new

940
00:48:25,360 --> 00:48:30,820
technology we're still learning every

941
00:48:27,310 --> 00:48:32,830
day the security service security

942
00:48:30,820 --> 00:48:35,410
community is active and we're trying to

943
00:48:32,830 --> 00:48:38,890
learn more even I'll even tell you that

944
00:48:35,410 --> 00:48:41,080
the provider is so AWS Google they're

945
00:48:38,890 --> 00:48:43,359
still learning it well because they yeah

946
00:48:41,080 --> 00:48:46,610
they dealt with the security outside

947
00:48:43,360 --> 00:48:49,340
your app sack

948
00:48:46,610 --> 00:48:52,310
but you still own the code so the other

949
00:48:49,340 --> 00:48:56,030
one is still earning I have a blog that

950
00:48:52,310 --> 00:48:57,980
I cover a deep dive into each of the

951
00:48:56,030 --> 00:48:59,960
service attacks as we saw here with

952
00:48:57,980 --> 00:49:04,910
demos for every each and every one of

953
00:48:59,960 --> 00:49:08,660
them you can take a look I'll publish

954
00:49:04,910 --> 00:49:11,149
the net ones and I'm just going one by

955
00:49:08,660 --> 00:49:14,299
one there another thing is that the BSA

956
00:49:11,150 --> 00:49:16,700
is open you have two options so you can

957
00:49:14,300 --> 00:49:20,030
use this the online version so it's so

958
00:49:16,700 --> 00:49:22,549
several s server last fail you have an

959
00:49:20,030 --> 00:49:24,560
online version of the DSA where you can

960
00:49:22,550 --> 00:49:26,600
interact with it try to hack it right do

961
00:49:24,560 --> 00:49:29,180
whatever you want really and learn from

962
00:49:26,600 --> 00:49:32,660
it and you can have and we also have a

963
00:49:29,180 --> 00:49:35,680
published version of the code so you can

964
00:49:32,660 --> 00:49:38,690
install it in your own environment and

965
00:49:35,680 --> 00:49:41,180
so you can actually also modify and

966
00:49:38,690 --> 00:49:43,850
reconfigure it do it ever well have it

967
00:49:41,180 --> 00:49:46,399
in the marketplace

968
00:49:43,850 --> 00:49:49,520
cuz of the service markets soon my

969
00:49:46,400 --> 00:49:51,790
problem week so you can just click

970
00:49:49,520 --> 00:49:55,460
deploy and you'll have it in New York

971
00:49:51,790 --> 00:49:57,259
without anything else otherwise follow

972
00:49:55,460 --> 00:50:00,400
the instruction on the data project and

973
00:49:57,260 --> 00:50:03,330
we have an active Twitter account if you

974
00:50:00,400 --> 00:50:07,470
you want to shoot at

975
00:50:03,330 --> 00:50:10,500
into the DBS a or just to follow it or

976
00:50:07,470 --> 00:50:13,770
I'll pay you a small hint you actually

977
00:50:10,500 --> 00:50:16,500
the DVS a is vulnerable and has the

978
00:50:13,770 --> 00:50:18,600
Twitter some Twitter keys somewhere in

979
00:50:16,500 --> 00:50:22,410
the application so if you steal them you

980
00:50:18,600 --> 00:50:26,430
can actually tweet or where as a devious

981
00:50:22,410 --> 00:50:28,799
step itself will release a devious a

982
00:50:26,430 --> 00:50:30,960
exploiter because it's still very

983
00:50:28,800 --> 00:50:33,540
unknown so people not don't really

984
00:50:30,960 --> 00:50:35,400
understand it yet so I'm going to

985
00:50:33,540 --> 00:50:37,410
release a tool assume that you can even

986
00:50:35,400 --> 00:50:39,660
put a proxy behind it and see everything

987
00:50:37,410 --> 00:50:42,930
that it does which what it does is

988
00:50:39,660 --> 00:50:45,660
exploits different barriers of attacks

989
00:50:42,930 --> 00:50:48,649
it's the DV of the DVS a so you can see

990
00:50:45,660 --> 00:50:48,649
how you can

991
00:50:51,960 --> 00:50:56,470
so you can see how you can bet orders

992
00:50:55,000 --> 00:50:59,470
from the database or you can do

993
00:50:56,470 --> 00:51:01,500
impersonate to function still keys leak

994
00:50:59,470 --> 00:51:05,368
user

995
00:51:01,500 --> 00:51:08,970
there's axe Volvo this payment etc etc

996
00:51:05,369 --> 00:51:14,400
and think will be through this exploiter

997
00:51:08,970 --> 00:51:20,129
so you can learn about the DBS a that's

998
00:51:14,400 --> 00:51:22,050
it so thank you very much for joining

999
00:51:20,130 --> 00:51:24,840
especially you in the Pacific where it's

1000
00:51:22,050 --> 00:51:26,340
early in the morning this was the only

1001
00:51:24,840 --> 00:51:27,119
time I could do it because I have a

1002
00:51:26,340 --> 00:51:29,430
flight to catch

1003
00:51:27,119 --> 00:51:35,730
let me check if we have the questions on

1004
00:51:29,430 --> 00:51:37,379
the takes a crowd and then alright no

1005
00:51:35,730 --> 00:51:41,580
questions so thank you everyone for

1006
00:51:37,380 --> 00:51:44,810
joining and keep following on

1007
00:51:41,580 --> 00:51:48,779
surveillance I think it's going to be

1008
00:51:44,810 --> 00:51:51,330
technologies that we should watch thank

1009
00:51:48,780 --> 00:51:54,230
you awesome thank you so much towel

1010
00:51:51,330 --> 00:51:54,230
appreciate it

