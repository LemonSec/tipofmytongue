1
00:00:05,360 --> 00:00:10,520
here we go so yeah just John sorry

2
00:00:08,050 --> 00:00:12,530
getting loaded up there welcome back

3
00:00:10,520 --> 00:00:15,260
everyone we've got motors are talking

4
00:00:12,530 --> 00:00:17,779
about Mach oh and and really the motto

5
00:00:15,260 --> 00:00:19,790
binary format understanding how it works

6
00:00:17,779 --> 00:00:21,740
what the different components of it are

7
00:00:19,790 --> 00:00:24,320
and how that's relevant to attackers and

8
00:00:21,740 --> 00:00:27,320
defenders so I'll hand it over to you go

9
00:00:24,320 --> 00:00:31,009
ahead Marissa well thanks thanks

10
00:00:27,320 --> 00:00:33,020
hey my name's murk to them and I'm I'm

11
00:00:31,009 --> 00:00:35,780
an engineer on the mobile security team

12
00:00:33,020 --> 00:00:38,510
at square and I'm here to talk about the

13
00:00:35,780 --> 00:00:40,460
Marko binary format and kind of what

14
00:00:38,510 --> 00:00:46,789
happens when you release an app to the

15
00:00:40,460 --> 00:00:49,010
App Store so quick overview Marko binary

16
00:00:46,789 --> 00:00:53,329
format is the main executive wolf file

17
00:00:49,010 --> 00:00:55,550
format used on Mac OS and iOS it's used

18
00:00:53,329 --> 00:00:58,010
to store any compiled code you'd see if

19
00:00:55,550 --> 00:01:00,319
you're reversing an iPhone app so it's

20
00:00:58,010 --> 00:01:03,920
pretty important to know how to maneuver

21
00:01:00,320 --> 00:01:07,370
it and navigate through it most people

22
00:01:03,920 --> 00:01:09,890
that actually look at apps for a company

23
00:01:07,370 --> 00:01:11,840
or if you're just doing it for fun

24
00:01:09,890 --> 00:01:14,570
you're probably gonna look at apps

25
00:01:11,840 --> 00:01:16,100
through the App Store in some cases you

26
00:01:14,570 --> 00:01:20,539
might be given like an enterprise signed

27
00:01:16,100 --> 00:01:23,089
app or an app that is like private and

28
00:01:20,540 --> 00:01:24,530
so in these cases it wouldn't come from

29
00:01:23,090 --> 00:01:28,520
that store and you wouldn't have some of

30
00:01:24,530 --> 00:01:30,950
the technical problems that you would

31
00:01:28,520 --> 00:01:33,729
have went down when looking at apps from

32
00:01:30,950 --> 00:01:36,560
that store making mainly the encryption

33
00:01:33,730 --> 00:01:37,670
but in 90% of the cases you will be

34
00:01:36,560 --> 00:01:40,010
dealing with things through the app

35
00:01:37,670 --> 00:01:42,890
store and so I'm gonna go a little bit

36
00:01:40,010 --> 00:01:44,360
on the details of what exactly happens

37
00:01:42,890 --> 00:01:47,620
when you submit things to the app store

38
00:01:44,360 --> 00:01:52,220
and how the actual code looks different

39
00:01:47,620 --> 00:01:54,740
and this is pretty important kind of

40
00:01:52,220 --> 00:01:56,600
from two standpoints from attackers

41
00:01:54,740 --> 00:02:01,130
standpoint defender standpoint but I'll

42
00:01:56,600 --> 00:02:03,380
get into that later and so stay tuned

43
00:02:01,130 --> 00:02:06,220
for like why do you wanna do this it's

44
00:02:03,380 --> 00:02:10,519
good to know how to navigate the Mac oh

45
00:02:06,220 --> 00:02:13,400
it's just good to have fluency kind of I

46
00:02:10,519 --> 00:02:16,670
wouldn't say like a like a distance but

47
00:02:13,400 --> 00:02:19,040
it I mean elf is a file format maybe

48
00:02:16,670 --> 00:02:21,589
more people are familiar with

49
00:02:19,040 --> 00:02:22,040
but ma ko has enormous amount of

50
00:02:21,590 --> 00:02:24,769
information

51
00:02:22,040 --> 00:02:27,469
it's very descriptive and there's a lot

52
00:02:24,769 --> 00:02:30,250
of things that you can glean from the

53
00:02:27,469 --> 00:02:33,680
binary that can help in reversing and so

54
00:02:30,250 --> 00:02:34,939
it's it's very good it's important to be

55
00:02:33,680 --> 00:02:39,739
able to understand all the different

56
00:02:34,939 --> 00:02:42,140
nuances of it and again I keep talking

57
00:02:39,739 --> 00:02:44,689
about this point because I kind of do

58
00:02:42,140 --> 00:02:46,779
defense for my for my for my day job so

59
00:02:44,689 --> 00:02:49,819
it's kind of applicable to that but

60
00:02:46,780 --> 00:02:51,859
knowing about the Mokka format and how

61
00:02:49,819 --> 00:02:55,339
it interacts with App Store is actually

62
00:02:51,859 --> 00:02:57,590
kind of useful to develop like program

63
00:02:55,340 --> 00:03:00,379
verification of your app so if you're

64
00:02:57,590 --> 00:03:04,549
trying to develop some way to like

65
00:03:00,379 --> 00:03:06,590
ensure app integrity it might be a

66
00:03:04,549 --> 00:03:08,919
little bit counter to what maybe maybe

67
00:03:06,590 --> 00:03:10,819
most people are talking about here but

68
00:03:08,919 --> 00:03:13,430
defenders in the room will definitely

69
00:03:10,819 --> 00:03:18,260
appreciate the information I present

70
00:03:13,430 --> 00:03:20,810
here and last point if you're actually

71
00:03:18,260 --> 00:03:22,010
are ink stuff in the App Store you

72
00:03:20,810 --> 00:03:24,829
probably should have a good

73
00:03:22,010 --> 00:03:27,978
understanding of fair play and how apt

74
00:03:24,829 --> 00:03:29,810
decryption works and how you can do it I

75
00:03:27,979 --> 00:03:31,280
won't be going into the actual liking

76
00:03:29,810 --> 00:03:34,159
that II gritties of like the key

77
00:03:31,280 --> 00:03:35,750
exchanges and like how SharePoint works

78
00:03:34,159 --> 00:03:38,090
but I'll just go over a little bit about

79
00:03:35,750 --> 00:03:40,129
what it is and then actually how to

80
00:03:38,090 --> 00:03:41,479
decrypt apps there's a bunch of

81
00:03:40,129 --> 00:03:42,828
different tooling to do that I'll just

82
00:03:41,479 --> 00:03:49,040
show you like a very simple way that

83
00:03:42,829 --> 00:03:52,479
makes sense so quickly the Matco binary

84
00:03:49,040 --> 00:03:56,120
format is like has the core basics are

85
00:03:52,479 --> 00:03:59,090
it's it's like programmed through load

86
00:03:56,120 --> 00:04:02,510
commands and so load commands are kind

87
00:03:59,090 --> 00:04:04,849
of the structure that helps represent

88
00:04:02,510 --> 00:04:08,659
different aspects of the binary and each

89
00:04:04,849 --> 00:04:11,418
one of these like commands describe how

90
00:04:08,659 --> 00:04:13,280
the binary is loaded in memory but also

91
00:04:11,419 --> 00:04:18,139
way more than that it describes like

92
00:04:13,280 --> 00:04:21,168
metadata and it's it's very very useful

93
00:04:18,139 --> 00:04:26,449
stuff and so here's just a quick

94
00:04:21,168 --> 00:04:30,500
breakdown of a of a mock up firing I

95
00:04:26,449 --> 00:04:32,569
just putted the mappings that are used

96
00:04:30,500 --> 00:04:35,839
to actually map the code and

97
00:04:32,569 --> 00:04:41,509
into memory Ivan showed the rest oh but

98
00:04:35,839 --> 00:04:44,479
we're gonna actually go through that so

99
00:04:41,509 --> 00:04:48,379
basically there is a concept of segments

100
00:04:44,479 --> 00:04:53,419
and sections so segments are are defined

101
00:04:48,379 --> 00:04:57,860
by the load commands and they are what

102
00:04:53,419 --> 00:05:00,490
the actual kernel uses to take the piece

103
00:04:57,860 --> 00:05:07,309
of segment data and load it into memory

104
00:05:00,490 --> 00:05:10,669
and the sections are what we can we can

105
00:05:07,309 --> 00:05:13,509
see the kernel uses information from the

106
00:05:10,669 --> 00:05:16,639
Marco to actually jump into the segment

107
00:05:13,509 --> 00:05:18,259
and so you can kind of like look at the

108
00:05:16,639 --> 00:05:23,479
permissions on the segment's so like

109
00:05:18,259 --> 00:05:25,309
Texas executes data link to edit because

110
00:05:23,479 --> 00:05:27,800
a section that might be a little bit

111
00:05:25,309 --> 00:05:31,069
interesting not exactly intuitive but

112
00:05:27,800 --> 00:05:34,069
it's readable only and they have all

113
00:05:31,069 --> 00:05:37,159
different purposes of text make sense

114
00:05:34,069 --> 00:05:38,990
except exit executable code can be

115
00:05:37,159 --> 00:05:43,909
hooked and fast by exploiters and

116
00:05:38,990 --> 00:05:47,029
reversers data as you can see it has a

117
00:05:43,909 --> 00:05:51,469
lot of like objective-c sections and so

118
00:05:47,029 --> 00:05:53,749
a lot of like for at least for iOS well

119
00:05:51,469 --> 00:05:56,119
now there's like Swift but objective-c

120
00:05:53,749 --> 00:05:58,879
is like one of the languages used to

121
00:05:56,119 --> 00:06:01,189
develop iOS apps and so the data section

122
00:05:58,879 --> 00:06:03,949
actually has like the metadata

123
00:06:01,189 --> 00:06:07,969
associated with the objective-c data and

124
00:06:03,949 --> 00:06:09,229
so I'm not totally sure actually why

125
00:06:07,969 --> 00:06:11,990
they're in the data section but I can

126
00:06:09,229 --> 00:06:15,919
only first think that it's do the

127
00:06:11,990 --> 00:06:19,219
Swizzle annoying is like a first first

128
00:06:15,919 --> 00:06:21,019
class method to cook your own functions

129
00:06:19,219 --> 00:06:23,449
and it's like totally supported by the

130
00:06:21,019 --> 00:06:26,300
objective-c runtime and so I'm guessing

131
00:06:23,449 --> 00:06:29,360
there in the data so runtime can modify

132
00:06:26,300 --> 00:06:35,599
the pointers easily but otherwise

133
00:06:29,360 --> 00:06:37,789
doesn't make too much sense and yeah so

134
00:06:35,599 --> 00:06:43,490
I can I can go quickly if anyone's

135
00:06:37,789 --> 00:06:46,229
interested in the symbol resolution so I

136
00:06:43,490 --> 00:06:50,430
just wanted to point out that you

137
00:06:46,230 --> 00:06:52,830
like ask questions in the YouTube stream

138
00:06:50,430 --> 00:06:54,690
and then I can try to answer them if I'm

139
00:06:52,830 --> 00:06:58,979
going too fast for anything if you have

140
00:06:54,690 --> 00:07:03,810
any questions please feel free to ask

141
00:06:58,980 --> 00:07:06,180
them there but I can i'll just go

142
00:07:03,810 --> 00:07:09,900
quickly over symbol resolution just real

143
00:07:06,180 --> 00:07:12,000
quick in the green boxes if people are

144
00:07:09,900 --> 00:07:14,729
familiar with like how got similar

145
00:07:12,000 --> 00:07:17,430
resolution works on for elf it was

146
00:07:14,730 --> 00:07:19,380
pretty similar Marco but you have like

147
00:07:17,430 --> 00:07:21,870
the underscoring this were a symbol on

148
00:07:19,380 --> 00:07:24,350
just for a symbol stub and so these are

149
00:07:21,870 --> 00:07:27,510
were all the like imported functions

150
00:07:24,350 --> 00:07:32,610
some stubs are so they'll be like a call

151
00:07:27,510 --> 00:07:34,230
to like access or stat or any other sort

152
00:07:32,610 --> 00:07:36,420
of function that you you want to call

153
00:07:34,230 --> 00:07:40,590
that's nine your program and those will

154
00:07:36,420 --> 00:07:43,370
always call to some pointer and that

155
00:07:40,590 --> 00:07:45,450
pointer will always be inside the data

156
00:07:43,370 --> 00:07:47,880
segments are the data underscore

157
00:07:45,450 --> 00:07:52,680
underscore NL or the LA symbol pointer

158
00:07:47,880 --> 00:07:56,219
and it will point to a value in those

159
00:07:52,680 --> 00:07:58,860
sections and those sections have bytes

160
00:07:56,220 --> 00:08:01,920
that are like empty but when you

161
00:07:58,860 --> 00:08:04,620
actually go to go call that function the

162
00:08:01,920 --> 00:08:08,370
same way in elf how the got and the PLT

163
00:08:04,620 --> 00:08:10,290
have like a stub function that actually

164
00:08:08,370 --> 00:08:14,070
resolves the pointer when you actually

165
00:08:10,290 --> 00:08:16,230
eat it the pointer in the data segment

166
00:08:14,070 --> 00:08:18,810
will actually jump back to a text stub

167
00:08:16,230 --> 00:08:23,430
helper the stub helper will then call

168
00:08:18,810 --> 00:08:25,950
out to dy LD which is like you know s is

169
00:08:23,430 --> 00:08:32,060
a good Damian that's used to sound like

170
00:08:25,950 --> 00:08:37,500
the zygote for us and it will try to

171
00:08:32,059 --> 00:08:41,640
resolve different symbols and it does

172
00:08:37,500 --> 00:08:42,780
more than that but so do LD will then

173
00:08:41,640 --> 00:08:45,750
come back and actually write the

174
00:08:42,780 --> 00:08:47,339
pointers back into the data segment and

175
00:08:45,750 --> 00:08:48,750
so the next time you actually go and

176
00:08:47,340 --> 00:08:49,890
call things from the symbol stub you

177
00:08:48,750 --> 00:08:54,090
don't actually have to go all the way

178
00:08:49,890 --> 00:08:56,220
through back to the the text stub helper

179
00:08:54,090 --> 00:08:59,480
it'll just already be in data that's

180
00:08:56,220 --> 00:08:59,480
just quickly how that works

181
00:09:00,610 --> 00:09:05,529
this is I think in the previous slide I

182
00:09:03,040 --> 00:09:07,930
talked about the link edit segment and

183
00:09:05,529 --> 00:09:12,910
so the link to edit segment is super

184
00:09:07,930 --> 00:09:17,769
important but it's not totally like

185
00:09:12,910 --> 00:09:20,670
easier to read like it's a kind of a you

186
00:09:17,769 --> 00:09:23,260
you couldn't just parse the mock Oh

187
00:09:20,670 --> 00:09:25,870
format to understand what's in the link

188
00:09:23,260 --> 00:09:28,660
edit but explain a little bit how you

189
00:09:25,870 --> 00:09:32,620
can't press it it can come it has

190
00:09:28,660 --> 00:09:35,439
exports imports three locations and like

191
00:09:32,620 --> 00:09:36,730
binding information for symbols this is

192
00:09:35,440 --> 00:09:37,930
like super important if you're trying to

193
00:09:36,730 --> 00:09:40,450
like figure out like function entry

194
00:09:37,930 --> 00:09:42,880
points in the function or like figure

195
00:09:40,450 --> 00:09:45,519
out what the code is actually importing

196
00:09:42,880 --> 00:09:46,360
in so it's great the first thing you

197
00:09:45,519 --> 00:09:47,980
want to do when you're looking at

198
00:09:46,360 --> 00:09:51,250
application is like knowing what is

199
00:09:47,980 --> 00:09:53,709
calling and what and entry points are

200
00:09:51,250 --> 00:09:56,920
taken can I understand like the inputs

201
00:09:53,709 --> 00:09:59,140
and outputs would program the one thing

202
00:09:56,920 --> 00:10:01,689
you want to know here is the LC code

203
00:09:59,140 --> 00:10:02,949
signature so again these are all load

204
00:10:01,690 --> 00:10:04,720
commands so as I talked about earlier

205
00:10:02,950 --> 00:10:08,410
before lo commands are like the way that

206
00:10:04,720 --> 00:10:09,790
the Marco was mapped out and so most of

207
00:10:08,410 --> 00:10:12,459
the load commands here don't actually

208
00:10:09,790 --> 00:10:16,060
map a piece of memory into code from the

209
00:10:12,459 --> 00:10:19,479
kernel or the kernel doesn't use that to

210
00:10:16,060 --> 00:10:21,069
map code into the into the process this

211
00:10:19,480 --> 00:10:24,519
is just like the metadata that I was

212
00:10:21,070 --> 00:10:26,230
describing before and so there's besides

213
00:10:24,519 --> 00:10:30,070
the LC current signature there's also

214
00:10:26,230 --> 00:10:32,769
the LC data in code and LC function

215
00:10:30,070 --> 00:10:34,510
starts and these are really really

216
00:10:32,769 --> 00:10:35,860
important if you're ever writing a

217
00:10:34,510 --> 00:10:37,779
disassembler or if anyone's written

218
00:10:35,860 --> 00:10:39,730
assembler themselves

219
00:10:37,779 --> 00:10:42,010
if anyone's written like a recursive

220
00:10:39,730 --> 00:10:44,560
descent disassembler you would know how

221
00:10:42,010 --> 00:10:48,430
important LC data and code is basically

222
00:10:44,560 --> 00:10:51,219
just really recap there's a tooth

223
00:10:48,430 --> 00:10:55,390
problem with recursive descent were say

224
00:10:51,220 --> 00:10:58,839
that so quickly a side recursive descent

225
00:10:55,390 --> 00:11:00,310
is basically a technique where you start

226
00:10:58,839 --> 00:11:02,410
at a certain function you start

227
00:11:00,310 --> 00:11:04,959
disassembling bytes and then once you

228
00:11:02,410 --> 00:11:06,670
get to like a jump instruction you have

229
00:11:04,959 --> 00:11:10,180
the jump taken and you have the jump not

230
00:11:06,670 --> 00:11:12,550
taken and so you basically split your

231
00:11:10,180 --> 00:11:13,660
program into two different paths and you

232
00:11:12,550 --> 00:11:17,770
assume that

233
00:11:13,660 --> 00:11:19,390
the call the jump will be code and then

234
00:11:17,770 --> 00:11:21,900
you also seem that the bytes after the

235
00:11:19,390 --> 00:11:24,910
jump will also be codes in some cases

236
00:11:21,900 --> 00:11:28,510
there might not be a there might not be

237
00:11:24,910 --> 00:11:30,939
code after the jump oh sorry bytes after

238
00:11:28,510 --> 00:11:32,439
the jump there might be data instead and

239
00:11:30,940 --> 00:11:34,150
if there's just data

240
00:11:32,440 --> 00:11:35,320
it'll just be garbage instructions and

241
00:11:34,150 --> 00:11:37,780
will just leave you talked to nothing

242
00:11:35,320 --> 00:11:39,670
and so if you're writing this is on blur

243
00:11:37,780 --> 00:11:42,670
it's actually really really useful to

244
00:11:39,670 --> 00:11:44,709
know where data is inside the own inside

245
00:11:42,670 --> 00:11:47,199
code and sometimes data is just like

246
00:11:44,710 --> 00:11:49,270
embedded for in the in the text section

247
00:11:47,200 --> 00:11:52,120
for like it's not going to be modified

248
00:11:49,270 --> 00:11:53,319
at all you just stick it in there and so

249
00:11:52,120 --> 00:11:54,910
I'm having another section there just

250
00:11:53,320 --> 00:11:57,640
sticking the text it's kind of weird but

251
00:11:54,910 --> 00:12:01,240
it happens a lot and so this is

252
00:11:57,640 --> 00:12:03,010
basically an array of where in the code

253
00:12:01,240 --> 00:12:05,410
there's data and so you can skip over

254
00:12:03,010 --> 00:12:06,430
that data in the code it's an amazing

255
00:12:05,410 --> 00:12:12,850
way if you're trying to write is a

256
00:12:06,430 --> 00:12:17,109
simpler the other thing that it's it's

257
00:12:12,850 --> 00:12:20,140
it's a great will command might it's

258
00:12:17,110 --> 00:12:21,340
called the LC function starts and again

259
00:12:20,140 --> 00:12:24,970
if you're bringing it as assembler this

260
00:12:21,340 --> 00:12:27,160
is amazing because it tells you the

261
00:12:24,970 --> 00:12:29,200
address of functions within the mock oh

262
00:12:27,160 --> 00:12:31,030
and this was super awesome if you're

263
00:12:29,200 --> 00:12:35,380
trying writing disassembler again just

264
00:12:31,030 --> 00:12:37,990
because you don't have to like find

265
00:12:35,380 --> 00:12:39,850
heuristics of like oh this is the byte

266
00:12:37,990 --> 00:12:41,620
this is this is a function Prolog like

267
00:12:39,850 --> 00:12:43,360
oh let me start assembling here like

268
00:12:41,620 --> 00:12:46,660
this basically tells you exactly where

269
00:12:43,360 --> 00:12:50,980
to start small it's really really useful

270
00:12:46,660 --> 00:12:53,589
and yes I mean you know you can also use

271
00:12:50,980 --> 00:12:55,420
export symbol of symbols to know where

272
00:12:53,590 --> 00:12:57,880
functions are but this is a really good

273
00:12:55,420 --> 00:12:59,140
place to start if you're just like

274
00:12:57,880 --> 00:13:01,300
figure out like okay where should I

275
00:12:59,140 --> 00:13:04,390
start disassembling a large assemblers

276
00:13:01,300 --> 00:13:06,370
already use this but to try like

277
00:13:04,390 --> 00:13:07,689
enumerate what different functions so I

278
00:13:06,370 --> 00:13:09,490
can either if you're using either or

279
00:13:07,690 --> 00:13:11,650
something on the left hand side all the

280
00:13:09,490 --> 00:13:13,330
functions will probably populate i'm

281
00:13:11,650 --> 00:13:17,530
guessing they use LC function starts

282
00:13:13,330 --> 00:13:19,620
that hope they do but yeah that's kind

283
00:13:17,530 --> 00:13:21,550
of important information the link edit

284
00:13:19,620 --> 00:13:27,510
and now i'm going to talk a little bit

285
00:13:21,550 --> 00:13:27,510
about some kind of weird ease in mock Oh

286
00:13:27,610 --> 00:13:33,310
so if you kind of look at this picture

287
00:13:30,519 --> 00:13:36,089
right here you can see the LC segment

288
00:13:33,310 --> 00:13:38,949
and this is for the text segment and

289
00:13:36,089 --> 00:13:44,190
says on the file that it begins at zero

290
00:13:38,949 --> 00:13:47,079
bytes and it goes 200 it's 18 thousand x

291
00:13:44,190 --> 00:13:50,670
and in the file if you look at the

292
00:13:47,079 --> 00:13:57,339
section right the section starts at like

293
00:13:50,670 --> 00:13:59,139
52 5208 X and you can see that there's

294
00:13:57,339 --> 00:14:02,079
like a bunch of bytes missing

295
00:13:59,139 --> 00:14:03,820
it's like 21 thousand bytes and so this

296
00:14:02,079 --> 00:14:06,160
is just a quick document from like the

297
00:14:03,820 --> 00:14:10,959
Apple Docs and it would seem right it

298
00:14:06,160 --> 00:14:13,269
would look like the the section would

299
00:14:10,959 --> 00:14:14,920
start the first byte of the segment

300
00:14:13,269 --> 00:14:15,490
right so like right here there's a

301
00:14:14,920 --> 00:14:16,810
little diagram

302
00:14:15,490 --> 00:14:19,290
it's like psychically the segment

303
00:14:16,810 --> 00:14:22,930
command 1 it starts that section 1 right

304
00:14:19,290 --> 00:14:24,579
which is kind of weird right you would

305
00:14:22,930 --> 00:14:29,319
assume that it starts from the beginning

306
00:14:24,579 --> 00:14:31,300
and you know if you if we went back like

307
00:14:29,320 --> 00:14:36,610
to this slide you can see that for the

308
00:14:31,300 --> 00:14:39,609
data the the the beginning of the data

309
00:14:36,610 --> 00:14:42,940
segment starts are like oh X 1813

310
00:14:39,610 --> 00:14:44,649
thousand and the first section data and

311
00:14:42,940 --> 00:14:47,740
all symbol pointer also starts at the

312
00:14:44,649 --> 00:14:48,819
same offset fellow so you know it makes

313
00:14:47,740 --> 00:14:51,279
sense that it would start at the

314
00:14:48,819 --> 00:14:56,439
beginning for the text apparently it

315
00:14:51,279 --> 00:14:59,889
does not and sorry yeah and it does not

316
00:14:56,440 --> 00:15:02,819
and and the reason why is because the

317
00:14:59,889 --> 00:15:05,470
actual entire mokou header is within

318
00:15:02,819 --> 00:15:09,790
tech is within the first bytes of the

319
00:15:05,470 --> 00:15:12,519
text segment so you have the text

320
00:15:09,790 --> 00:15:15,449
segment the first the first 20 1000

321
00:15:12,519 --> 00:15:18,420
bytes are the actual NACO for the entire

322
00:15:15,449 --> 00:15:22,630
binary and it's within the text segment

323
00:15:18,420 --> 00:15:25,360
and and so the text section starts

324
00:15:22,630 --> 00:15:26,649
actually after the motto header which it

325
00:15:25,360 --> 00:15:28,420
seems a little bit weird right leg on

326
00:15:26,649 --> 00:15:29,949
elf you would have an actual header

327
00:15:28,420 --> 00:15:31,870
section and then the segment's will

328
00:15:29,949 --> 00:15:33,430
start and the beginning of the segment

329
00:15:31,870 --> 00:15:37,540
would be but also the beginning of the

330
00:15:33,430 --> 00:15:40,359
first section on maka that does not

331
00:15:37,540 --> 00:15:40,870
happen and I'm not totally exactly sure

332
00:15:40,360 --> 00:15:44,320
why this

333
00:15:40,870 --> 00:15:46,120
why this happens my best guess is that

334
00:15:44,320 --> 00:15:48,430
the kernel it knows that it needs to

335
00:15:46,120 --> 00:15:50,320
read things from the header anyways and

336
00:15:48,430 --> 00:15:52,120
so for them it might just be easier to

337
00:15:50,320 --> 00:15:54,790
just like take the entire text segment

338
00:15:52,120 --> 00:15:56,500
loaded memory and then start parsing it

339
00:15:54,790 --> 00:15:59,800
and then jump to the first text section

340
00:15:56,500 --> 00:16:03,640
when they start program execution if

341
00:15:59,800 --> 00:16:06,609
anyone has any like new kernel code like

342
00:16:03,640 --> 00:16:08,800
sources to like show me like why they

343
00:16:06,610 --> 00:16:09,640
put the header in the text segment

344
00:16:08,800 --> 00:16:11,410
that'd be great

345
00:16:09,640 --> 00:16:14,410
I'm just curious why that happens I

346
00:16:11,410 --> 00:16:17,140
haven't had been looked at dig into that

347
00:16:14,410 --> 00:16:19,900
but it's kind of interesting and I'll

348
00:16:17,140 --> 00:16:22,930
explain to you why it's interesting now

349
00:16:19,900 --> 00:16:28,900
and that is because what App Store does

350
00:16:22,930 --> 00:16:32,050
to the mock oh so the the App Store does

351
00:16:28,900 --> 00:16:35,410
two things to the the binary when you

352
00:16:32,050 --> 00:16:38,670
submit to the App Store and I'll talk

353
00:16:35,410 --> 00:16:43,510
about what happens in the mock Oh binary

354
00:16:38,670 --> 00:16:47,770
file format actually changes but they

355
00:16:43,510 --> 00:16:50,260
they do two things they they well from

356
00:16:47,770 --> 00:16:52,060
what from Heil ever from a higher level

357
00:16:50,260 --> 00:16:55,600
they do two things they encrypt the

358
00:16:52,060 --> 00:16:57,339
binary and then they also refine the

359
00:16:55,600 --> 00:17:00,220
binary so these are like the two main

360
00:16:57,340 --> 00:17:02,560
things that the app store does and you

361
00:17:00,220 --> 00:17:05,260
can see right here right so I kind of

362
00:17:02,560 --> 00:17:06,909
blurred out some of these names but you

363
00:17:05,260 --> 00:17:09,720
can see what I'm doing I'm using the Oh

364
00:17:06,910 --> 00:17:18,070
tool which is a available on most

365
00:17:09,720 --> 00:17:21,490
systems that and the first binary is a

366
00:17:18,069 --> 00:17:27,189
binary that is I dumped from a memory

367
00:17:21,490 --> 00:17:30,850
from Fermilab and and the second one is

368
00:17:27,190 --> 00:17:35,290
the same binary but before it went to

369
00:17:30,850 --> 00:17:38,709
the App Store and so you can see that

370
00:17:35,290 --> 00:17:41,889
there is a low command called the LC

371
00:17:38,710 --> 00:17:43,630
encryption info and within that the else

372
00:17:41,890 --> 00:17:50,890
encryption info basically it describes

373
00:17:43,630 --> 00:17:53,170
the how the binaries encrypted and it

374
00:17:50,890 --> 00:17:54,730
has a crypt off which describes and what

375
00:17:53,170 --> 00:17:56,770
all set

376
00:17:54,730 --> 00:17:59,350
encrypting the data and the size of how

377
00:17:56,770 --> 00:18:01,360
much days I shouldn't have been and then

378
00:17:59,350 --> 00:18:06,659
they have this script I need and the

379
00:18:01,360 --> 00:18:06,659
script ID on a piece of code that you

380
00:18:07,230 --> 00:18:12,340
haven't submitted to the App Store will

381
00:18:09,340 --> 00:18:17,168
be this is a zero because it's not

382
00:18:12,340 --> 00:18:24,030
encrypted so there's nothing to encrypt

383
00:18:17,169 --> 00:18:27,549
but I mean it's not encrypted but the

384
00:18:24,030 --> 00:18:30,399
I'm guessing the Xcode tools create a

385
00:18:27,549 --> 00:18:32,020
place to have Apple actually do an

386
00:18:30,400 --> 00:18:36,490
encryption because you have the crypt

387
00:18:32,020 --> 00:18:38,500
off and the crypt size but when you

388
00:18:36,490 --> 00:18:39,790
actually dump something from like an app

389
00:18:38,500 --> 00:18:42,100
that you've got from the App Store the

390
00:18:39,790 --> 00:18:44,020
crypt ID book we will be one right and

391
00:18:42,100 --> 00:18:46,000
again remember all this this is within

392
00:18:44,020 --> 00:18:49,120
the structure of the LC encryption code

393
00:18:46,000 --> 00:18:52,000
which is within the NACO header right so

394
00:18:49,120 --> 00:18:53,739
just remember this point the second

395
00:18:52,000 --> 00:18:59,200
thing they do is they actually refine

396
00:18:53,740 --> 00:19:03,010
that and when they resend app they add a

397
00:18:59,200 --> 00:19:05,660
whole bunch of their own kind of stuff

398
00:19:03,010 --> 00:19:08,749
to that and

399
00:19:05,660 --> 00:19:08,749
[Music]

400
00:19:08,930 --> 00:19:14,330
they basically include like their route

401
00:19:12,260 --> 00:19:17,480
Giroud cert maybe some sort of like

402
00:19:14,330 --> 00:19:20,689
intermediate sir as well but yeah but

403
00:19:17,480 --> 00:19:26,120
you can see that they pretty much almost

404
00:19:20,690 --> 00:19:32,930
like double the size right so you can

405
00:19:26,120 --> 00:19:34,820
see that it's about 170 73,000 before

406
00:19:32,930 --> 00:19:37,100
and then after

407
00:19:34,820 --> 00:19:39,850
the AppStore resize it it's about three

408
00:19:37,100 --> 00:19:42,409
hundred thirty six thousand bytes and so

409
00:19:39,850 --> 00:19:45,020
they they pretty much double the code

410
00:19:42,410 --> 00:19:48,140
signature and again this is and changes

411
00:19:45,020 --> 00:19:51,820
the the data size of this load command

412
00:19:48,140 --> 00:19:55,220
called the LC code signature and so

413
00:19:51,820 --> 00:19:56,929
basically on Amoco header level there

414
00:19:55,220 --> 00:19:58,820
are two different values that get

415
00:19:56,930 --> 00:20:02,240
changed when the Mach o goes to that

416
00:19:58,820 --> 00:20:04,970
store one is a crypt ID field and the

417
00:20:02,240 --> 00:20:08,690
second is the just the data size of the

418
00:20:04,970 --> 00:20:14,650
LC code solution and so these are two

419
00:20:08,690 --> 00:20:14,650
pretty important cards to understand and

420
00:20:16,990 --> 00:20:22,790
it's one right here so yeah so you can

421
00:20:20,660 --> 00:20:24,800
see so you can see right here it's I did

422
00:20:22,790 --> 00:20:29,180
a little bit of map with the values from

423
00:20:24,800 --> 00:20:33,110
the previous slides but the the length

424
00:20:29,180 --> 00:20:35,210
edit is of a certain size to could

425
00:20:33,110 --> 00:20:38,659
because signatures at the bottom of the

426
00:20:35,210 --> 00:20:45,590
entire binary and you can see right here

427
00:20:38,660 --> 00:20:48,290
that the code signatures at the bottom

428
00:20:45,590 --> 00:20:52,129
of the binary which is kind of useful to

429
00:20:48,290 --> 00:20:56,649
know from the defenders standpoint so if

430
00:20:52,130 --> 00:20:56,650
you wanted to have some sort of way to

431
00:20:57,550 --> 00:21:05,870
know what the true values are before you

432
00:21:00,830 --> 00:21:08,090
submit to the app store you can parse

433
00:21:05,870 --> 00:21:10,689
all of the sections of the link to edit

434
00:21:08,090 --> 00:21:15,169
all the way up until the cookie over and

435
00:21:10,690 --> 00:21:18,800
and then you can ignore the co-signature

436
00:21:15,170 --> 00:21:20,450
and that will be stable so the binary

437
00:21:18,800 --> 00:21:22,340
that you produce before you come into

438
00:21:20,450 --> 00:21:22,730
the App Store and after you submit to

439
00:21:22,340 --> 00:21:25,490
that

440
00:21:22,730 --> 00:21:27,560
up until the code signature they will

441
00:21:25,490 --> 00:21:29,060
not change they will not do anything

442
00:21:27,560 --> 00:21:33,679
different but the coding strip will be

443
00:21:29,060 --> 00:21:36,740
completely different the the last point

444
00:21:33,680 --> 00:21:38,780
there's just the Fairplay DRM and it's

445
00:21:36,740 --> 00:21:39,860
I'm not going to go to the degrees but

446
00:21:38,780 --> 00:21:41,210
there's definitely a bunch of

447
00:21:39,860 --> 00:21:43,189
information that thing Jonathan Levine

448
00:21:41,210 --> 00:21:46,400
has a really good post about customs

449
00:21:43,190 --> 00:21:48,020
co-signing they can read them about but

450
00:21:46,400 --> 00:21:51,110
it's just how Apple encrypts they're

451
00:21:48,020 --> 00:21:53,000
good and here's just a really quick way

452
00:21:51,110 --> 00:21:57,139
on how you can actually dump and that

453
00:21:53,000 --> 00:22:00,650
from the from from lab device so I'm

454
00:21:57,140 --> 00:22:02,750
using like the electro gentle break here

455
00:22:00,650 --> 00:22:06,830
is can come back and refer to this later

456
00:22:02,750 --> 00:22:11,660
but just basically you just figure out

457
00:22:06,830 --> 00:22:15,830
where the text segment is and then you

458
00:22:11,660 --> 00:22:19,420
just dump it out to the fall and that's

459
00:22:15,830 --> 00:22:22,689
pretty much how you get an unencrypted

460
00:22:19,420 --> 00:22:25,250
binary from an app store but from apps

461
00:22:22,690 --> 00:22:26,390
on your device that's jailbroken there's

462
00:22:25,250 --> 00:22:29,270
a bunch of tools that you can use these

463
00:22:26,390 --> 00:22:33,230
as well but I just kind of described do

464
00:22:29,270 --> 00:22:34,340
it in the ghetto style and yeah that's

465
00:22:33,230 --> 00:22:37,880
pretty much it

466
00:22:34,340 --> 00:22:40,850
it's Mako's pretty complex but it has a

467
00:22:37,880 --> 00:22:42,800
bunch of really cool information the App

468
00:22:40,850 --> 00:22:48,679
Store changes the Mach Oh a little bit

469
00:22:42,800 --> 00:22:52,909
and you can easily jump the app and you

470
00:22:48,680 --> 00:22:54,950
can also use it to try to verify your

471
00:22:52,910 --> 00:23:00,460
app before and after you release to the

472
00:22:54,950 --> 00:23:00,460
App Store and yep that's it

473
00:23:03,800 --> 00:23:05,860
you

474
00:23:16,100 --> 00:23:25,279
are there any questions or anything I

475
00:23:20,320 --> 00:23:27,320
can't actually see the like scream I

476
00:23:25,279 --> 00:23:30,649
mean I can I can see the length but I

477
00:23:27,320 --> 00:23:34,450
don't see the comments alrighty hey this

478
00:23:30,649 --> 00:23:40,689
is Sam let's see if we've got any

479
00:23:34,450 --> 00:23:43,729
comments no questions in the VA YouTube

480
00:23:40,690 --> 00:24:08,599
and let's see if there's anything via

481
00:23:43,729 --> 00:24:16,039
Twitter I don't think so nope it looks

482
00:24:08,599 --> 00:24:17,749
like we're good to go you guys have any

483
00:24:16,039 --> 00:24:23,559
questions definitely feel free to reach

484
00:24:17,749 --> 00:24:30,279
out to me on Twitter and my name is

485
00:24:23,559 --> 00:24:30,279
Atman is or yep cool thank you

