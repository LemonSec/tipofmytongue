1
00:00:05,620 --> 00:00:11,920
so we got one question they're from

2
00:00:09,170 --> 00:00:15,680
rudra 2016 which tool I use the most

3
00:00:11,920 --> 00:00:18,380
these days the tool I use the most is

4
00:00:15,680 --> 00:00:19,820
Visual Studio code because I am a less

5
00:00:18,380 --> 00:00:21,259
of a hacker and more of a developer

6
00:00:19,820 --> 00:00:26,770
because I'm actually building binary

7
00:00:21,259 --> 00:00:29,330
ninja now so I'm like coding and

8
00:00:26,770 --> 00:00:30,320
building things a little bit more so

9
00:00:29,330 --> 00:00:32,570
that's been that's been an interesting

10
00:00:30,320 --> 00:00:37,269
change but of course I'd have to say

11
00:00:32,570 --> 00:00:39,710
binary ninja beyond that all right yeah

12
00:00:37,269 --> 00:00:40,879
license is bug honey consider personal

13
00:00:39,710 --> 00:00:42,260
purpose and that's a good that's a great

14
00:00:40,879 --> 00:00:44,120
question actually about licensing for

15
00:00:42,260 --> 00:00:46,580
buyer ninja so I don't actually have a

16
00:00:44,120 --> 00:00:48,169
lot of slides on the licensing but we do

17
00:00:46,580 --> 00:00:51,799
have personal and we have commercial

18
00:00:48,170 --> 00:00:53,629
licensing and we consider if you're bug

19
00:00:51,799 --> 00:00:56,239
hunting for money it is a commercial use

20
00:00:53,629 --> 00:01:00,790
however we have a cool clause that's

21
00:00:56,239 --> 00:01:07,490
actually in our FAQ if we go to your

22
00:01:00,790 --> 00:01:09,049
fact that our ninja there is a see ya

23
00:01:07,490 --> 00:01:11,780
Thursday what do you consider commercial

24
00:01:09,049 --> 00:01:13,100
use question on our FAQ and it actually

25
00:01:11,780 --> 00:01:14,810
explains that we have what we call like

26
00:01:13,100 --> 00:01:16,759
a de minimis standard the idea being

27
00:01:14,810 --> 00:01:17,899
that if you're bug hunting for

28
00:01:16,759 --> 00:01:19,939
commercial purposes but you haven't

29
00:01:17,899 --> 00:01:21,380
actually made any money yet like you're

30
00:01:19,939 --> 00:01:23,148
not really commercial yet and so like

31
00:01:21,380 --> 00:01:24,920
until you've made five times the cost of

32
00:01:23,149 --> 00:01:26,119
a commercial license we just say like

33
00:01:24,920 --> 00:01:28,189
look don't even worry about it we don't

34
00:01:26,119 --> 00:01:29,719
consider that actually commercial so we

35
00:01:28,189 --> 00:01:31,788
encourage people to just use a personal

36
00:01:29,719 --> 00:01:33,288
license do bug hunting and then if

37
00:01:31,789 --> 00:01:34,340
there's not making a good chunk of money

38
00:01:33,289 --> 00:01:35,840
with it well then great we'd love for

39
00:01:34,340 --> 00:01:38,990
you to convert that to a commercial

40
00:01:35,840 --> 00:01:41,659
license we offer upgrades along the way

41
00:01:38,990 --> 00:01:43,249
so with that I think we are ready to get

42
00:01:41,659 --> 00:01:47,600
going so I'm gonna go ahead and kick it

43
00:01:43,249 --> 00:01:51,259
off with the the slides themselves so

44
00:01:47,600 --> 00:01:53,719
the talk is finding bugs with binary

45
00:01:51,259 --> 00:01:56,840
ninja to be clear it is not finding bugs

46
00:01:53,719 --> 00:01:58,969
in binary ninja that that's that's a

47
00:01:56,840 --> 00:02:00,020
separate talk and there's plenty of

48
00:01:58,969 --> 00:02:01,339
plenty of bugs have you found in ways

49
00:02:00,020 --> 00:02:03,020
you can help with that too

50
00:02:01,340 --> 00:02:03,950
yeah ask you later and we can we can

51
00:02:03,020 --> 00:02:07,310
kind of go into that

52
00:02:03,950 --> 00:02:10,880
I'm Jordan wines my bio is there a

53
00:02:07,310 --> 00:02:13,370
philatelist ETF I've done a decade of

54
00:02:10,880 --> 00:02:15,170
reverse engineering and VR I ran some

55
00:02:13,370 --> 00:02:16,670
teams doing those things I helped build

56
00:02:15,170 --> 00:02:18,970
several grand challenge I'm really

57
00:02:16,670 --> 00:02:21,280
passionate about capture the flags and

58
00:02:18,970 --> 00:02:22,930
how we visualize them to talk about them

59
00:02:21,280 --> 00:02:24,790
and present about them and I am the

60
00:02:22,930 --> 00:02:26,170
worst developer of binary ninja it's

61
00:02:24,790 --> 00:02:27,340
very important to make that clear

62
00:02:26,170 --> 00:02:28,809
there was a reason that I'm the one

63
00:02:27,340 --> 00:02:30,640
giving the talks and the rest of the

64
00:02:28,810 --> 00:02:32,320
team is still working on the product

65
00:02:30,640 --> 00:02:35,470
because they're much better developers

66
00:02:32,320 --> 00:02:37,150
than I am so binary ninja itself this is

67
00:02:35,470 --> 00:02:38,650
like the the slide I show like

68
00:02:37,150 --> 00:02:40,780
executives or like people that are like

69
00:02:38,650 --> 00:02:43,900
what's fire ninja like well it's this it

70
00:02:40,780 --> 00:02:44,650
converts bytes that the CPU runs into

71
00:02:43,900 --> 00:02:45,790
something that's a little more

72
00:02:44,650 --> 00:02:46,840
understandable for people right

73
00:02:45,790 --> 00:02:48,340
obviously I think the audience here

74
00:02:46,840 --> 00:02:50,440
probably has a better understanding of

75
00:02:48,340 --> 00:02:51,760
that but we're taking the disassembly

76
00:02:50,440 --> 00:02:53,170
we're taking opcodes and we're

77
00:02:51,760 --> 00:02:55,269
disassembling it and we're doing

78
00:02:53,170 --> 00:02:56,829
analysis on it for other things so a

79
00:02:55,270 --> 00:02:58,390
couple clarifications of what it isn't

80
00:02:56,830 --> 00:03:00,580
isn't it is a reverse engineering tool

81
00:02:58,390 --> 00:03:03,190
it's a disassembler it's a program

82
00:03:00,580 --> 00:03:05,380
analysis platform it's not a debugger

83
00:03:03,190 --> 00:03:06,790
where we have there's some debugging

84
00:03:05,380 --> 00:03:08,170
plugins but it's not primarily a

85
00:03:06,790 --> 00:03:10,120
debugger we're probably gonna be

86
00:03:08,170 --> 00:03:12,280
expanding that out later this year and

87
00:03:10,120 --> 00:03:14,110
it's also not a decompiler although i

88
00:03:12,280 --> 00:03:15,760
put a little like you know approximately

89
00:03:14,110 --> 00:03:17,320
not equal to that I don't think that's

90
00:03:15,760 --> 00:03:18,700
valid syntax is a regular language but

91
00:03:17,320 --> 00:03:20,200
hopefully you get what I'm saying

92
00:03:18,700 --> 00:03:21,700
because we we have our intermediate

93
00:03:20,200 --> 00:03:23,679
languages that actually provide a high

94
00:03:21,700 --> 00:03:25,959
level abstraction it's a little bit like

95
00:03:23,680 --> 00:03:27,850
a decompiler but it's not I want to be

96
00:03:25,959 --> 00:03:30,040
clear we do not yet have any compiler it

97
00:03:27,850 --> 00:03:31,959
is something that we're working on all

98
00:03:30,040 --> 00:03:34,630
right so what does binary ninja good for

99
00:03:31,959 --> 00:03:38,410
your bug hunting it's good for PE ma Co

100
00:03:34,630 --> 00:03:40,180
else I left off the end over all

101
00:03:38,410 --> 00:03:41,740
binaries was the next one if you just

102
00:03:40,180 --> 00:03:46,330
have any kind of binary executable code

103
00:03:41,740 --> 00:03:47,680
for X is 6 X 64 re 7 r v8 MIPS PowerPC

104
00:03:46,330 --> 00:03:49,630
and then there's many others those links

105
00:03:47,680 --> 00:03:50,980
on the slide notes with all the other

106
00:03:49,630 --> 00:03:55,090
third-party architectures that we

107
00:03:50,980 --> 00:03:56,890
support and firmware you some some

108
00:03:55,090 --> 00:03:58,150
assembly required right you have to know

109
00:03:56,890 --> 00:04:00,640
a little about the firmer structure we

110
00:03:58,150 --> 00:04:01,690
don't have built-in support for a lot of

111
00:04:00,640 --> 00:04:04,359
different for more formats but it's

112
00:04:01,690 --> 00:04:06,130
pretty easy to define where the code

113
00:04:04,360 --> 00:04:08,110
actual lives more importantly it's not

114
00:04:06,130 --> 00:04:09,430
good at web apps it's not good for Java

115
00:04:08,110 --> 00:04:11,680
it's like good for net it's not good for

116
00:04:09,430 --> 00:04:14,680
virtual machines it's not good for

117
00:04:11,680 --> 00:04:17,019
things that are not binary code that's

118
00:04:14,680 --> 00:04:20,108
hence the name right so that kind of

119
00:04:17,019 --> 00:04:20,738
gives you all right the design of buyer

120
00:04:20,108 --> 00:04:22,450
ninja

121
00:04:20,738 --> 00:04:24,070
I'm not going to go into a lot of detail

122
00:04:22,450 --> 00:04:25,960
for most of these but I just kind of

123
00:04:24,070 --> 00:04:28,060
want to talk about like why it's built

124
00:04:25,960 --> 00:04:29,530
the way it is it has a separable core

125
00:04:28,060 --> 00:04:31,750
which just means that like the thing

126
00:04:29,530 --> 00:04:32,498
that does the analysis is distinct from

127
00:04:31,750 --> 00:04:35,379
the

128
00:04:32,499 --> 00:04:37,960
the UI itself calls into the core and it

129
00:04:35,379 --> 00:04:39,879
does that through the same API that any

130
00:04:37,960 --> 00:04:40,810
third-party plugin can use and so that

131
00:04:39,879 --> 00:04:42,490
actually times the head of that the

132
00:04:40,810 --> 00:04:44,680
fourth one of API first that we really

133
00:04:42,490 --> 00:04:46,659
built the API is the most important

134
00:04:44,680 --> 00:04:48,189
thing and then we build the UI on top of

135
00:04:46,659 --> 00:04:49,240
that now we care about the UI a lot we

136
00:04:48,189 --> 00:04:52,569
think usability and UI is really

137
00:04:49,240 --> 00:04:54,189
important but from a analysis

138
00:04:52,569 --> 00:04:55,870
perspective we build it based on the API

139
00:04:54,189 --> 00:04:57,370
in that way like we're not cheating

140
00:04:55,870 --> 00:04:58,689
there's no like API that only we can

141
00:04:57,370 --> 00:05:00,219
access to do special things like

142
00:04:58,689 --> 00:05:03,460
literally everything in the UI is

143
00:05:00,219 --> 00:05:05,229
possible via the Python console via the

144
00:05:03,460 --> 00:05:06,909
the scripting that you could do

145
00:05:05,229 --> 00:05:08,258
separately from the user interface or if

146
00:05:06,909 --> 00:05:10,659
you were running your own plugin to link

147
00:05:08,259 --> 00:05:13,449
directly into it it's multi-threaded so

148
00:05:10,659 --> 00:05:15,909
just you know we built it for machines

149
00:05:13,449 --> 00:05:17,409
with lots of course because it's 2019 we

150
00:05:15,909 --> 00:05:18,789
should do that we had this cool idea

151
00:05:17,409 --> 00:05:21,819
called confidence I'll talk a little bit

152
00:05:18,789 --> 00:05:23,438
more and we have the illest design my

153
00:05:21,819 --> 00:05:25,270
apologies for the bed that joke

154
00:05:23,439 --> 00:05:27,430
hopefully that counts as entertainment

155
00:05:25,270 --> 00:05:29,049
for those who demanding that earlier we

156
00:05:27,430 --> 00:05:30,849
we do a lot of our analysis on

157
00:05:29,050 --> 00:05:32,110
intermediate languages so I'll talk a

158
00:05:30,849 --> 00:05:34,810
little with the I ELLs because that's

159
00:05:32,110 --> 00:05:37,270
really the key focus of why binary ninja

160
00:05:34,810 --> 00:05:39,639
is good for finding bugs is because of

161
00:05:37,270 --> 00:05:42,400
that I'll design so that separable core

162
00:05:39,639 --> 00:05:43,960
I mentioned that UI calls them to the

163
00:05:42,400 --> 00:05:46,120
same API plug is used you can do

164
00:05:43,960 --> 00:05:47,919
something like import binary ninja now I

165
00:05:46,120 --> 00:05:49,389
do have to caveat briefly there was

166
00:05:47,919 --> 00:05:50,770
mentioned earlier about the personal

167
00:05:49,389 --> 00:05:53,589
license but versus the commercial

168
00:05:50,770 --> 00:05:56,409
license their feature for peach feature

169
00:05:53,589 --> 00:05:58,839
parity in almost every way except for

170
00:05:56,409 --> 00:06:01,930
the commercial version you will use more

171
00:05:58,839 --> 00:06:03,399
cores on your machine just as faster it

172
00:06:01,930 --> 00:06:05,169
caches something out a little bit more

173
00:06:03,399 --> 00:06:07,060
the analysis will you save an analysis

174
00:06:05,169 --> 00:06:08,318
database and then the really the real

175
00:06:07,060 --> 00:06:10,960
kicker is the commercial version has a

176
00:06:08,319 --> 00:06:12,520
true headless support and by which I

177
00:06:10,960 --> 00:06:13,779
mean you can you can do this you can

178
00:06:12,520 --> 00:06:15,159
just like type Python import binary

179
00:06:13,779 --> 00:06:16,899
ninja and start scripting up and

180
00:06:15,159 --> 00:06:18,188
automating it a lot of people they'll

181
00:06:16,899 --> 00:06:21,300
get confused in this new oh wait does

182
00:06:18,189 --> 00:06:24,129
that mean the personal doesn't actually

183
00:06:21,300 --> 00:06:26,500
like support scripting and the API no no

184
00:06:24,129 --> 00:06:28,300
it absolutely does you just do it via

185
00:06:26,500 --> 00:06:30,939
the user interface so when I actually

186
00:06:28,300 --> 00:06:33,849
like flip over to the console in a

187
00:06:30,939 --> 00:06:35,949
binary I can still you know type in the

188
00:06:33,849 --> 00:06:37,509
API can access any of the the things

189
00:06:35,949 --> 00:06:39,879
that I want to do from the API I just do

190
00:06:37,509 --> 00:06:42,009
it through this this console or I do it

191
00:06:39,879 --> 00:06:44,019
via a plugin that I've written it I can

192
00:06:42,009 --> 00:06:46,120
I get like a trigger so you still have

193
00:06:44,019 --> 00:06:50,259
access to the same API it's

194
00:06:46,120 --> 00:06:52,180
not available without loading the UI you

195
00:06:50,259 --> 00:06:53,830
can link to link to it from any language

196
00:06:52,180 --> 00:06:55,419
they can call him to C or C++ which is

197
00:06:53,830 --> 00:06:57,580
basically every language because C is

198
00:06:55,419 --> 00:07:02,198
such the standard for sort of binary api

199
00:06:57,580 --> 00:07:04,539
compatibility and it's a the DLL dial-up

200
00:07:02,199 --> 00:07:06,400
or s o depending on your platform that

201
00:07:04,539 --> 00:07:08,438
you can just kind of call it so that's

202
00:07:06,400 --> 00:07:10,688
the acceptable core multi-threading yeah

203
00:07:08,439 --> 00:07:12,699
it's sports multi thirty not a lot to

204
00:07:10,689 --> 00:07:14,289
that confidence is as qua do that I like

205
00:07:12,699 --> 00:07:17,800
to mention it's something that doesn't

206
00:07:14,289 --> 00:07:19,180
show up right now in the current UI but

207
00:07:17,800 --> 00:07:20,439
it's built into the core of how about a

208
00:07:19,180 --> 00:07:23,580
ninja works it's gonna be more and more

209
00:07:20,439 --> 00:07:26,860
exposed as we develop more features that

210
00:07:23,580 --> 00:07:28,599
make it kind of available this kind of

211
00:07:26,860 --> 00:07:30,159
came about from some conversations with

212
00:07:28,599 --> 00:07:31,840
Alex author of who was like hey guys

213
00:07:30,159 --> 00:07:33,279
listen you need to have confidence built

214
00:07:31,840 --> 00:07:34,330
into your tool and they're like well you

215
00:07:33,279 --> 00:07:35,770
know what do you mean that kind of

216
00:07:34,330 --> 00:07:36,900
explained it we got pretty excited about

217
00:07:35,770 --> 00:07:39,068
it because it's a cool it's a cool idea

218
00:07:36,900 --> 00:07:41,318
reverse engineering is about taking a

219
00:07:39,069 --> 00:07:43,150
binary where you've lost a lot of

220
00:07:41,319 --> 00:07:45,129
information you've lost symbols you

221
00:07:43,150 --> 00:07:46,659
usually sometimes there's debugging

222
00:07:45,129 --> 00:07:48,159
information in the binary but right like

223
00:07:46,659 --> 00:07:49,599
you've still lost so you don't always

224
00:07:48,159 --> 00:07:51,159
maintain all of the information that was

225
00:07:49,599 --> 00:07:52,628
in the source code and then you're

226
00:07:51,159 --> 00:07:54,430
trying to recover that into a higher

227
00:07:52,629 --> 00:07:55,990
level abstraction something that you can

228
00:07:54,430 --> 00:07:57,219
understand because you want to find bugs

229
00:07:55,990 --> 00:07:58,719
because you want to modify things

230
00:07:57,219 --> 00:08:00,250
because you want to interoperate with

231
00:07:58,719 --> 00:08:01,689
some API whatever whatever your purpose

232
00:08:00,250 --> 00:08:03,610
is you want to kind of recover that

233
00:08:01,689 --> 00:08:06,370
higher-level understanding but that's a

234
00:08:03,610 --> 00:08:08,409
lossy process right it's not possible to

235
00:08:06,370 --> 00:08:10,689
perfectly recover in in most cases right

236
00:08:08,409 --> 00:08:12,219
like obviously something like Java where

237
00:08:10,689 --> 00:08:13,870
it's designed to maintain more that

238
00:08:12,219 --> 00:08:16,569
information you you can do a better

239
00:08:13,870 --> 00:08:17,710
recovery process with something like C

240
00:08:16,569 --> 00:08:20,439
or C++

241
00:08:17,710 --> 00:08:21,849
you cannot perfectly recover all types

242
00:08:20,439 --> 00:08:24,580
of source code like it's just not

243
00:08:21,849 --> 00:08:26,949
possible because compilers are not meant

244
00:08:24,580 --> 00:08:28,089
to be reversible transformations and so

245
00:08:26,949 --> 00:08:29,889
when you ever you have these kind of

246
00:08:28,089 --> 00:08:32,289
guesses and in fact here's my first

247
00:08:29,889 --> 00:08:34,149
twitch moment give me a thumbs up in

248
00:08:32,289 --> 00:08:36,370
chat if you've ever named a function

249
00:08:34,149 --> 00:08:38,140
maybe or put a question mark on it or

250
00:08:36,370 --> 00:08:39,610
been like like I think it's there copy

251
00:08:38,140 --> 00:08:41,229
but I don't know or this looks like hash

252
00:08:39,610 --> 00:08:44,229
function question mark like you don't

253
00:08:41,229 --> 00:08:45,399
really know because I think if you've

254
00:08:44,229 --> 00:08:46,750
been doing a lot of reverse engineering

255
00:08:45,399 --> 00:08:48,490
this is absolutely something that's come

256
00:08:46,750 --> 00:08:51,850
up and so I think that that that

257
00:08:48,490 --> 00:08:53,769
demonstrates that like this is a lossy

258
00:08:51,850 --> 00:08:56,410
process right you don't always have full

259
00:08:53,769 --> 00:08:57,850
confidence in the the assertions you're

260
00:08:56,410 --> 00:08:59,439
making like you're like this is store

261
00:08:57,850 --> 00:09:01,720
copy I think this is

262
00:08:59,440 --> 00:09:03,580
is whatever I think and so we actually

263
00:09:01,720 --> 00:09:05,530
have confidence built in to our data

264
00:09:03,580 --> 00:09:06,730
structures and we use it internally and

265
00:09:05,530 --> 00:09:07,839
we're gonna start exposing that more and

266
00:09:06,730 --> 00:09:09,550
more where you can actually like name a

267
00:09:07,840 --> 00:09:11,110
function and then say hey that function

268
00:09:09,550 --> 00:09:12,819
I just gave you that name of I'm

269
00:09:11,110 --> 00:09:14,680
actually only fifty percent confident of

270
00:09:12,820 --> 00:09:17,220
that and then we can make smart analysis

271
00:09:14,680 --> 00:09:19,239
decisions based on that or we can like

272
00:09:17,220 --> 00:09:20,860
collaborative decisions so when we pull

273
00:09:19,240 --> 00:09:22,960
data from multiple users and put it

274
00:09:20,860 --> 00:09:25,180
together we can be informed based on

275
00:09:22,960 --> 00:09:27,070
like the confidence that you have API

276
00:09:25,180 --> 00:09:28,449
first there's the API Doc's if you want

277
00:09:27,070 --> 00:09:30,640
to kind of go dig into it I'm not gonna

278
00:09:28,450 --> 00:09:32,410
do that now intermediate language design

279
00:09:30,640 --> 00:09:34,090
this is like several hours of

280
00:09:32,410 --> 00:09:35,920
conversation about the design of the i/o

281
00:09:34,090 --> 00:09:38,350
so this slides I'm just getting skipped

282
00:09:35,920 --> 00:09:40,209
there are lots of levels of il they go

283
00:09:38,350 --> 00:09:41,770
from low level il to be in love while

284
00:09:40,210 --> 00:09:44,200
we're working on a high level il that

285
00:09:41,770 --> 00:09:46,240
will be a part of the decompiler there's

286
00:09:44,200 --> 00:09:48,550
no thumbs up I mean you got the emoji I

287
00:09:46,240 --> 00:09:50,140
put plus one works - yeah that works as

288
00:09:48,550 --> 00:09:52,689
well at least this one so there's one

289
00:09:50,140 --> 00:09:55,180
person who has have named a functioning

290
00:09:52,690 --> 00:09:57,250
question market or maybe it's attribute

291
00:09:55,180 --> 00:10:01,209
il that really doesn't really matter

292
00:09:57,250 --> 00:10:02,380
right so so what like okay great you've

293
00:10:01,210 --> 00:10:05,290
got an eye out I want to show real quick

294
00:10:02,380 --> 00:10:08,110
a concrete example of why that sort of

295
00:10:05,290 --> 00:10:10,689
sort of matters so this is actually an N

296
00:10:08,110 --> 00:10:13,090
il view for a function so if I look at

297
00:10:10,690 --> 00:10:16,630
the actual disassembly this is a random

298
00:10:13,090 --> 00:10:17,800
old CTF challenge that I pulled up you

299
00:10:16,630 --> 00:10:18,910
can see you've got a conditional

300
00:10:17,800 --> 00:10:20,439
statement you've got some functions

301
00:10:18,910 --> 00:10:23,199
being called you've got data being read

302
00:10:20,440 --> 00:10:25,330
from Dennis segments you've got stack

303
00:10:23,200 --> 00:10:26,950
variables being referenced when you go

304
00:10:25,330 --> 00:10:28,540
to an il though notice it actually gets

305
00:10:26,950 --> 00:10:30,190
smaller like we've actually simplified

306
00:10:28,540 --> 00:10:31,839
the graph because we're getting we're

307
00:10:30,190 --> 00:10:35,860
throwing away some of those details we

308
00:10:31,840 --> 00:10:37,480
actually don't care about the alright we

309
00:10:35,860 --> 00:10:39,040
got a few more good there's some good

310
00:10:37,480 --> 00:10:40,000
reverses in the chat here to you there

311
00:10:39,040 --> 00:10:41,589
at least ones I'm willing to admit that

312
00:10:40,000 --> 00:10:44,950
they they named things they don't always

313
00:10:41,590 --> 00:10:46,960
know it sometimes and so like we things

314
00:10:44,950 --> 00:10:48,310
like the stack information like it's

315
00:10:46,960 --> 00:10:49,750
just a variable like you don't care

316
00:10:48,310 --> 00:10:51,310
whether one of the stack or wearing

317
00:10:49,750 --> 00:10:52,450
somewhere else unless you're you know

318
00:10:51,310 --> 00:10:53,800
looking for a stack based buffer

319
00:10:52,450 --> 00:10:54,970
overflows for example but like when

320
00:10:53,800 --> 00:10:56,620
you're trying to understand what the

321
00:10:54,970 --> 00:10:58,300
program is doing the programmer didn't

322
00:10:56,620 --> 00:10:59,740
say explicitly put this variable on the

323
00:10:58,300 --> 00:11:01,810
stack right it was just a local variable

324
00:10:59,740 --> 00:11:03,550
data declared and then the compiler

325
00:11:01,810 --> 00:11:04,750
handles that for them and so conversely

326
00:11:03,550 --> 00:11:06,430
when we do the opposite we kind of get

327
00:11:04,750 --> 00:11:09,280
back to this and so this is just much

328
00:11:06,430 --> 00:11:10,300
easier to eat much easier to read first

329
00:11:09,280 --> 00:11:12,630
of all like what I think one of the

330
00:11:10,300 --> 00:11:14,399
advantages of it

331
00:11:12,630 --> 00:11:16,110
and it's more concise so it's actually

332
00:11:14,399 --> 00:11:17,370
like less to look at than if you're

333
00:11:16,110 --> 00:11:19,139
looking used to looking at their

334
00:11:17,370 --> 00:11:21,420
disassembly okay so that's it's one

335
00:11:19,139 --> 00:11:22,110
thing but there's there's a lot more to

336
00:11:21,420 --> 00:11:25,740
it than that

337
00:11:22,110 --> 00:11:26,730
so first program analysis techniques I

338
00:11:25,740 --> 00:11:29,100
guess a second because I already covered

339
00:11:26,730 --> 00:11:31,350
one of them but program analysis

340
00:11:29,100 --> 00:11:33,060
techniques often rely on these

341
00:11:31,350 --> 00:11:34,649
intermediate languages they often

342
00:11:33,060 --> 00:11:37,529
require certain properties like there's

343
00:11:34,649 --> 00:11:39,839
SSA forms which allow you to like you

344
00:11:37,529 --> 00:11:41,459
never light a variable you only make a

345
00:11:39,839 --> 00:11:42,630
copy to it so if you change variable

346
00:11:41,459 --> 00:11:45,508
well you're actually just making a copy

347
00:11:42,630 --> 00:11:47,069
of it and this this relationship when

348
00:11:45,509 --> 00:11:48,540
you've done your intermediate language

349
00:11:47,069 --> 00:11:50,219
allows you to do things like really fast

350
00:11:48,540 --> 00:11:51,599
data flow and go back and track where

351
00:11:50,220 --> 00:11:53,009
things kind of came from so there's

352
00:11:51,600 --> 00:11:54,889
important reasons why from a program

353
00:11:53,009 --> 00:11:56,819
analysis perspective you need

354
00:11:54,889 --> 00:11:58,740
intermediate languages

355
00:11:56,819 --> 00:12:02,099
I like the write-once pone anywhere

356
00:11:58,740 --> 00:12:04,019
aspect of it the the idea is that if you

357
00:12:02,100 --> 00:12:05,550
write a plug-in on binary ninja to find

358
00:12:04,019 --> 00:12:07,589
vulnerabilities or to help you identify

359
00:12:05,550 --> 00:12:09,120
certain pieces of code and you do it on

360
00:12:07,589 --> 00:12:10,620
the in your media language you read it

361
00:12:09,120 --> 00:12:13,050
once right you're not writing it for arm

362
00:12:10,620 --> 00:12:14,160
and for xu6 in dips and PowerPC you

363
00:12:13,050 --> 00:12:15,479
should look like an embedded router it's

364
00:12:14,160 --> 00:12:17,459
right where they've got a lot of the

365
00:12:15,480 --> 00:12:18,990
same flaws that come up in these riders

366
00:12:17,459 --> 00:12:22,050
they're using the same OEM kits that

367
00:12:18,990 --> 00:12:24,480
card credit back doors or all sorts of

368
00:12:22,050 --> 00:12:25,620
kind of like low-hanging fruit but

369
00:12:24,480 --> 00:12:26,790
oftentimes it'll be on different

370
00:12:25,620 --> 00:12:28,050
architectures right likely to be an arm

371
00:12:26,790 --> 00:12:29,849
one they'll be a MIPS one so there's

372
00:12:28,050 --> 00:12:31,469
different CPU is in these architectures

373
00:12:29,850 --> 00:12:33,600
rather than rewriting your script you

374
00:12:31,470 --> 00:12:35,399
read it once on the i/o which is which

375
00:12:33,600 --> 00:12:37,769
is easier to do

376
00:12:35,399 --> 00:12:39,990
I mentioned the analysis of the results

377
00:12:37,769 --> 00:12:40,920
earlier I'm like you can just read it

378
00:12:39,990 --> 00:12:42,600
and understand a little bit more easily

379
00:12:40,920 --> 00:12:43,709
and then different aisles are

380
00:12:42,600 --> 00:12:45,990
appropriate from different questions

381
00:12:43,709 --> 00:12:49,949
it's kind of outside the scope of this

382
00:12:45,990 --> 00:12:51,720
short summary but the idea is that again

383
00:12:49,949 --> 00:12:53,459
I said earlier you know like if you care

384
00:12:51,720 --> 00:12:55,380
about something being on the stack and

385
00:12:53,459 --> 00:12:57,479
how far it is from the return address

386
00:12:55,380 --> 00:12:58,740
for example then you would you would

387
00:12:57,480 --> 00:13:00,959
want to use a different il and you would

388
00:12:58,740 --> 00:13:04,589
want to use for a different question but

389
00:13:00,959 --> 00:13:06,119
when I ask example okay so there are

390
00:13:04,589 --> 00:13:09,540
several good examples

391
00:13:06,120 --> 00:13:13,920
our friends at trilobites Sophia Ryan

392
00:13:09,540 --> 00:13:16,709
and Josh have all done blog posts and

393
00:13:13,920 --> 00:13:19,079
presentations and talked a lot about the

394
00:13:16,709 --> 00:13:22,649
way that ways that they've used binary

395
00:13:19,079 --> 00:13:25,060
ninja to to find vulnerabilities ways

396
00:13:22,649 --> 00:13:28,029
that they've

397
00:13:25,060 --> 00:13:30,579
I identified identified flaws that they

398
00:13:28,029 --> 00:13:32,350
can generically search through the il-4

399
00:13:30,580 --> 00:13:33,580
so there's some great post there that I

400
00:13:32,350 --> 00:13:35,580
hire recommend you check out I've got a

401
00:13:33,580 --> 00:13:37,540
link at the very last slide that

402
00:13:35,580 --> 00:13:38,980
includes a link to this slide deck so

403
00:13:37,540 --> 00:13:40,779
you can get to all of these references

404
00:13:38,980 --> 00:13:43,450
as well I think a tweet may have already

405
00:13:40,779 --> 00:13:45,939
gone out with it - from four-vector 35

406
00:13:43,450 --> 00:13:47,410
twitter with a link to the slides the

407
00:13:45,940 --> 00:13:51,399
automated opaque predicate removal is

408
00:13:47,410 --> 00:13:52,779
not strictly a vulnerability finding

409
00:13:51,399 --> 00:13:54,339
task it's just more of a reverse

410
00:13:52,779 --> 00:13:56,470
engineering one but I think it's a it's

411
00:13:54,339 --> 00:13:59,200
a really useful thing to talk about

412
00:13:56,470 --> 00:14:00,310
because obviously reverse engineering

413
00:13:59,200 --> 00:14:02,380
and vulnerability research are closely

414
00:14:00,310 --> 00:14:03,699
related when you're we were you know

415
00:14:02,380 --> 00:14:06,779
depending on the type of vulnerabilities

416
00:14:03,700 --> 00:14:09,850
you're looking for and a lot of

417
00:14:06,779 --> 00:14:11,500
obfuscation and anti analysis that

418
00:14:09,850 --> 00:14:12,730
happens at that are reverse engineering

419
00:14:11,500 --> 00:14:16,110
problems can become relevant in

420
00:14:12,730 --> 00:14:18,760
vulnerability research so we took a fun

421
00:14:16,110 --> 00:14:21,930
had this blog post that Peter one of the

422
00:14:18,760 --> 00:14:24,399
other cofounders of vector 35 did where

423
00:14:21,930 --> 00:14:26,140
you identify opaque predicates so fake

424
00:14:24,399 --> 00:14:28,510
products opaque predicates or when

425
00:14:26,140 --> 00:14:31,420
things like an office gating compiler

426
00:14:28,510 --> 00:14:33,279
will make some calculation where it

427
00:14:31,420 --> 00:14:35,290
knows in advance the results of the

428
00:14:33,279 --> 00:14:36,579
calculation and then you're like a

429
00:14:35,290 --> 00:14:37,899
conditional branch it's not really

430
00:14:36,579 --> 00:14:40,180
conditional though it just sort of looks

431
00:14:37,899 --> 00:14:42,339
conditional if you naively disassemble

432
00:14:40,180 --> 00:14:43,959
the code and then so if you then it

433
00:14:42,339 --> 00:14:46,899
followed both sides of the disassembly

434
00:14:43,959 --> 00:14:48,369
you're gonna end off end up like just

435
00:14:46,899 --> 00:14:49,630
assembling garbage or you're gonna end

436
00:14:48,370 --> 00:14:51,399
up misalign they're gonna intentionally

437
00:14:49,630 --> 00:14:52,839
throw off your analysis even though the

438
00:14:51,399 --> 00:14:55,089
program when it executes would never

439
00:14:52,839 --> 00:14:57,420
actually go down that route because it

440
00:14:55,089 --> 00:15:00,160
knows in advance like well I know the

441
00:14:57,420 --> 00:15:01,689
DAX is currently zero because I just set

442
00:15:00,160 --> 00:15:04,029
it to zero for instructions ago and

443
00:15:01,690 --> 00:15:05,529
therefore I'm gonna automatically you

444
00:15:04,029 --> 00:15:07,480
know jump here of zero and that's just

445
00:15:05,529 --> 00:15:09,130
it's just really a straight jump like

446
00:15:07,480 --> 00:15:11,350
you should you don't ever want to treat

447
00:15:09,130 --> 00:15:13,360
it as a conditional and so we showed how

448
00:15:11,350 --> 00:15:14,890
you can use the ILS and you can clean up

449
00:15:13,360 --> 00:15:16,959
these sort of automatically for you and

450
00:15:14,890 --> 00:15:18,910
rewrite the binary to get rid of a lot

451
00:15:16,959 --> 00:15:21,089
of these these obfuscation so that's

452
00:15:18,910 --> 00:15:23,230
really that I think the most powerful

453
00:15:21,089 --> 00:15:24,970
aspect of binary ninja there's a lot of

454
00:15:23,230 --> 00:15:26,140
other reverse engineering tools that are

455
00:15:24,970 --> 00:15:27,970
very you know there's several good

456
00:15:26,140 --> 00:15:29,350
quality or sintering tools that will do

457
00:15:27,970 --> 00:15:31,209
good work and you can interactively sit

458
00:15:29,350 --> 00:15:32,740
down and you can create structures and

459
00:15:31,209 --> 00:15:34,779
comments and build an understanding of a

460
00:15:32,740 --> 00:15:36,100
binary but I think that are like our

461
00:15:34,779 --> 00:15:38,140
focus has always been again on this

462
00:15:36,100 --> 00:15:39,760
automation of building code

463
00:15:38,140 --> 00:15:40,930
like doing something once it's fine but

464
00:15:39,760 --> 00:15:42,400
if you're doing it two or three times a

465
00:15:40,930 --> 00:15:43,510
little at certain point you should you

466
00:15:42,400 --> 00:15:45,490
should automate that you shouldn't be

467
00:15:43,510 --> 00:15:47,020
doing that by hand and that's where we

468
00:15:45,490 --> 00:15:49,750
think that working on the Isles makes

469
00:15:47,020 --> 00:15:51,550
makes a lot of sense so I'm gonna show

470
00:15:49,750 --> 00:15:53,470
one of these right now we're gonna pop

471
00:15:51,550 --> 00:15:56,189
up and this is actually if I go back to

472
00:15:53,470 --> 00:16:01,300
the example slide somewhat similar to

473
00:15:56,190 --> 00:16:05,950
the mem copy example that Sophia put up

474
00:16:01,300 --> 00:16:08,170
under the trilobites github page it's a

475
00:16:05,950 --> 00:16:10,300
little bit it does a few more things but

476
00:16:08,170 --> 00:16:11,530
it's very similar in concept the idea is

477
00:16:10,300 --> 00:16:12,699
that there are certain like dangerous

478
00:16:11,530 --> 00:16:15,910
functions right I think that like

479
00:16:12,700 --> 00:16:19,150
everybody knows for mastering

480
00:16:15,910 --> 00:16:20,890
vulnerability is exploitable and so like

481
00:16:19,150 --> 00:16:23,079
all source code scanners a lot of like

482
00:16:20,890 --> 00:16:24,819
tools can detect format string bugs

483
00:16:23,080 --> 00:16:26,920
where user input goes straight into a

484
00:16:24,820 --> 00:16:28,950
for mastering so there's there's certain

485
00:16:26,920 --> 00:16:31,870
like classes of things usually obvious

486
00:16:28,950 --> 00:16:34,210
mem copy should always be bounded right

487
00:16:31,870 --> 00:16:36,250
like if you have a mem copy and the

488
00:16:34,210 --> 00:16:37,510
length of the memo comes from user data

489
00:16:36,250 --> 00:16:39,850
and user can fit whatever they want well

490
00:16:37,510 --> 00:16:41,470
that's like always bad right it's how

491
00:16:39,850 --> 00:16:43,480
bad depends on other contexts before

492
00:16:41,470 --> 00:16:45,100
it's used but so there's there's a lot

493
00:16:43,480 --> 00:16:47,890
of these these questions you can ask on

494
00:16:45,100 --> 00:16:51,730
the IL and we are gonna look at a quick

495
00:16:47,890 --> 00:16:53,770
test program so this is just a program

496
00:16:51,730 --> 00:16:55,180
that does some dumb things with mem copy

497
00:16:53,770 --> 00:16:56,949
right link there's again several ways

498
00:16:55,180 --> 00:16:59,520
that you can do dumb things with mem

499
00:16:56,950 --> 00:17:02,320
copy so there's there's a few samples

500
00:16:59,520 --> 00:17:03,930
and then we have so this is actually an

501
00:17:02,320 --> 00:17:06,310
example script that we use we have a

502
00:17:03,930 --> 00:17:08,169
training class that we do on miner ninja

503
00:17:06,310 --> 00:17:09,579
we're doing a two day version of it

504
00:17:08,170 --> 00:17:12,880
coming up an infiltrate in a few months

505
00:17:09,579 --> 00:17:16,089
and this is just like the relevant bits

506
00:17:12,880 --> 00:17:18,550
of it that like a iterate over the il

507
00:17:16,089 --> 00:17:19,599
and look for interesting things so

508
00:17:18,550 --> 00:17:20,948
because we had this intermediate

509
00:17:19,599 --> 00:17:23,889
language we're actually doing dataflow

510
00:17:20,949 --> 00:17:24,910
and be able to track static data flow

511
00:17:23,890 --> 00:17:26,790
right so we're just looking we're not

512
00:17:24,910 --> 00:17:28,780
looking at like what is the value of

513
00:17:26,790 --> 00:17:29,920
this argument of the function we're

514
00:17:28,780 --> 00:17:31,030
looking at what are all the possible

515
00:17:29,920 --> 00:17:32,890
values that could come into this

516
00:17:31,030 --> 00:17:34,300
function was there a check beforehand

517
00:17:32,890 --> 00:17:36,370
that made sure it was less than 10 or

518
00:17:34,300 --> 00:17:38,110
less than 5 or was that sign or unsigned

519
00:17:36,370 --> 00:17:39,489
so we do all these these these will do

520
00:17:38,110 --> 00:17:41,740
this range analysis and we can actually

521
00:17:39,490 --> 00:17:44,260
check and say hey I know that this value

522
00:17:41,740 --> 00:17:45,910
must be less than 10 because this check

523
00:17:44,260 --> 00:17:47,440
that happen beforehand so it's safe

524
00:17:45,910 --> 00:17:50,050
because know the destination buffer for

525
00:17:47,440 --> 00:17:51,610
example is only 10 bytes long and so

526
00:17:50,050 --> 00:17:51,820
therefore it's always music what if the

527
00:17:51,610 --> 00:17:53,260
does

528
00:17:51,820 --> 00:17:55,600
a shoe buffer I know is only ten bytes

529
00:17:53,260 --> 00:17:57,700
long but it's not bounded at all or it's

530
00:17:55,600 --> 00:17:58,990
only it's bounded by 45 well then then

531
00:17:57,700 --> 00:18:01,120
we have the possibility for a buffer

532
00:17:58,990 --> 00:18:03,910
overflow so that's the the plug in there

533
00:18:01,120 --> 00:18:05,949
and we're gonna kick it off on that test

534
00:18:03,910 --> 00:18:10,450
binary so we've got the this is the

535
00:18:05,950 --> 00:18:15,280
compiled form of that source and let's

536
00:18:10,450 --> 00:18:17,500
look at it and I the il real quick just

537
00:18:15,280 --> 00:18:19,480
because I always prefer the aisles so

538
00:18:17,500 --> 00:18:23,820
we've got a couple of memcache now this

539
00:18:19,480 --> 00:18:25,950
is obviously a Couture program but if we

540
00:18:23,820 --> 00:18:28,929
run our member valach

541
00:18:25,950 --> 00:18:30,460
that or a log this is normally nobody

542
00:18:28,930 --> 00:18:32,290
gets me this is normally like the log

543
00:18:30,460 --> 00:18:33,160
error message which is like warning

544
00:18:32,290 --> 00:18:35,379
warning something terrible has happened

545
00:18:33,160 --> 00:18:36,370
but this case we just mean the person

546
00:18:35,380 --> 00:18:37,570
who wrote this program did something

547
00:18:36,370 --> 00:18:39,699
terrible and so you can see we've got

548
00:18:37,570 --> 00:18:41,980
some output it's saying the possible

549
00:18:39,700 --> 00:18:44,860
values here this is a range from

550
00:18:41,980 --> 00:18:47,580
negative maxint to max it so like this

551
00:18:44,860 --> 00:18:49,870
thing is like not really limited the the

552
00:18:47,580 --> 00:18:52,240
possible size and the mem copy is

553
00:18:49,870 --> 00:18:57,189
unlimited and if we look here so you can

554
00:18:52,240 --> 00:18:59,350
actually see by hovering over the the

555
00:18:57,190 --> 00:19:01,060
arguments here like what our data flow

556
00:18:59,350 --> 00:19:03,129
knows about the the limits of the

557
00:19:01,060 --> 00:19:04,810
arguments that's potentially a problem

558
00:19:03,130 --> 00:19:05,980
now it may not be a problem it may be

559
00:19:04,810 --> 00:19:08,710
did the functions they call this

560
00:19:05,980 --> 00:19:09,760
function bound those those arguments so

561
00:19:08,710 --> 00:19:11,560
it may still require some annual

562
00:19:09,760 --> 00:19:13,480
analysis like then you get till you've

563
00:19:11,560 --> 00:19:14,440
got a validate the results and there's

564
00:19:13,480 --> 00:19:16,630
several other ones as well right so

565
00:19:14,440 --> 00:19:19,180
there's there's different things that

566
00:19:16,630 --> 00:19:22,300
we're validating is the destination on

567
00:19:19,180 --> 00:19:25,420
the stack that's kind of back over on

568
00:19:22,300 --> 00:19:27,220
the Isle as well so all right that is

569
00:19:25,420 --> 00:19:29,170
one example again there are many many

570
00:19:27,220 --> 00:19:31,030
more and this is not meant to be this is

571
00:19:29,170 --> 00:19:34,210
really just a short 20 minute kind of

572
00:19:31,030 --> 00:19:36,790
introduction to the concepts and where

573
00:19:34,210 --> 00:19:39,490
these resources are so some of the other

574
00:19:36,790 --> 00:19:41,860
resources to get started with minor

575
00:19:39,490 --> 00:19:44,110
ninja if you're interested first our API

576
00:19:41,860 --> 00:19:45,760
itself is actually open source so the

577
00:19:44,110 --> 00:19:51,010
product is commercial we thought that

578
00:19:45,760 --> 00:19:52,120
the best way to to to get the product

579
00:19:51,010 --> 00:19:53,140
built the way that we wanted it was to

580
00:19:52,120 --> 00:19:54,250
be able to be a commercial piece of

581
00:19:53,140 --> 00:19:57,190
software where we could put a lot more

582
00:19:54,250 --> 00:19:58,330
resources and time and do it and but we

583
00:19:57,190 --> 00:20:00,430
do try to open source a lot of the

584
00:19:58,330 --> 00:20:02,169
components and and several the pieces so

585
00:20:00,430 --> 00:20:03,610
for example the API itself which

586
00:20:02,170 --> 00:20:05,480
includes information on the intermediate

587
00:20:03,610 --> 00:20:07,070
languages is all open

588
00:20:05,480 --> 00:20:08,540
we encourage other people if you wanted

589
00:20:07,070 --> 00:20:10,639
to make different open-source bindings

590
00:20:08,540 --> 00:20:12,220
we try to make it as easy as possible I

591
00:20:10,640 --> 00:20:15,470
know there's several people working on

592
00:20:12,220 --> 00:20:17,360
like Russ findings and their I think

593
00:20:15,470 --> 00:20:19,850
I've heard a rumor of an okay mo binding

594
00:20:17,360 --> 00:20:21,949
there's different different ones kind of

595
00:20:19,850 --> 00:20:25,040
in development but we primarily have C

596
00:20:21,950 --> 00:20:26,390
C++ and Python as the main ones that we

597
00:20:25,040 --> 00:20:27,980
use my age is what I'm using minor

598
00:20:26,390 --> 00:20:30,049
engine i'm mostly amusing the console

599
00:20:27,980 --> 00:20:31,940
quick and dirty little snippets that i'm

600
00:20:30,049 --> 00:20:34,030
that i'm looking as that kind of that BB

601
00:20:31,940 --> 00:20:37,250
that functions that show here earlier or

602
00:20:34,030 --> 00:20:40,178
current function star just to kind of

603
00:20:37,250 --> 00:20:42,470
interactively like poke around with with

604
00:20:40,179 --> 00:20:45,049
miners is actually really really handy

605
00:20:42,470 --> 00:20:46,429
so having that as a true like pythonic

606
00:20:45,049 --> 00:20:48,260
console and you can do iterators and

607
00:20:46,429 --> 00:20:50,299
normal kind of python things is it's

608
00:20:48,260 --> 00:20:51,890
really helpful our user documentation is

609
00:20:50,299 --> 00:20:54,080
actually also a part of of the github

610
00:20:51,890 --> 00:20:55,520
repo and so if you want to do a pull

611
00:20:54,080 --> 00:20:59,629
request for a type of whatever your more

612
00:20:55,520 --> 00:21:01,010
than one and welcome to the user

613
00:20:59,630 --> 00:21:02,390
documentation is online the api

614
00:21:01,010 --> 00:21:03,980
documentation is online the api

615
00:21:02,390 --> 00:21:06,049
documentation user documentation are

616
00:21:03,980 --> 00:21:07,580
also both offline so you can get those

617
00:21:06,049 --> 00:21:08,840
if you happen to got an airplane you can

618
00:21:07,580 --> 00:21:10,820
still pull up those docs that you can

619
00:21:08,840 --> 00:21:13,159
either search the api docs the offline

620
00:21:10,820 --> 00:21:14,570
HTML versions we've got a FAQ which I

621
00:21:13,160 --> 00:21:17,990
showed briefly we've had a lot of

622
00:21:14,570 --> 00:21:19,340
examples we've got the slack which has a

623
00:21:17,990 --> 00:21:20,360
really great community I highly

624
00:21:19,340 --> 00:21:22,280
recommend if you're all interested

625
00:21:20,360 --> 00:21:23,689
please check out the slack there's a ton

626
00:21:22,280 --> 00:21:25,070
of people in there this is a under four

627
00:21:23,690 --> 00:21:26,510
channels there's one just for people

628
00:21:25,070 --> 00:21:28,309
with reverse engineering questions

629
00:21:26,510 --> 00:21:30,020
unrelated to binary ninja we love

630
00:21:28,309 --> 00:21:31,790
helping people get started in reverse

631
00:21:30,020 --> 00:21:33,350
engineering and then there are several

632
00:21:31,790 --> 00:21:35,418
like sort of the unofficial help

633
00:21:33,350 --> 00:21:38,959
mechanisms there's a community plug-in

634
00:21:35,419 --> 00:21:40,190
repository which has tons of example

635
00:21:38,960 --> 00:21:41,720
plugins you can look through in the lots

636
00:21:40,190 --> 00:21:44,059
of nice functionality may actually want

637
00:21:41,720 --> 00:21:45,559
Josh Watson started streaming on twitch

638
00:21:44,059 --> 00:21:48,020
lately his effing around with binary

639
00:21:45,559 --> 00:21:49,520
ninja he's been doing that um lately

640
00:21:48,020 --> 00:21:51,379
those are super irritating he is really

641
00:21:49,520 --> 00:21:53,660
really knowledgeable about binary ninja

642
00:21:51,380 --> 00:21:55,190
and fun to watch so he's doing some cool

643
00:21:53,660 --> 00:21:58,299
stuff right now he's working on ad

644
00:21:55,190 --> 00:22:01,160
office cater for a like drm style

645
00:21:58,299 --> 00:22:03,679
protection packer which he's been

646
00:22:01,160 --> 00:22:05,690
building for fun and then the slack is

647
00:22:03,679 --> 00:22:10,309
both unofficial and official so that's

648
00:22:05,690 --> 00:22:13,400
the end of my my slide time if anybody

649
00:22:10,309 --> 00:22:15,260
has questions there's the link to the

650
00:22:13,400 --> 00:22:17,720
actual slides oh and thank you yes

651
00:22:15,260 --> 00:22:19,370
Josh's Twitter was excuse me Josh's

652
00:22:17,720 --> 00:22:21,800
twitch was missed mentioned

653
00:22:19,370 --> 00:22:25,370
in the slack chat as well I should've

654
00:22:21,800 --> 00:22:27,560
showed mention L doesn't actually link

655
00:22:25,370 --> 00:22:30,320
can you click it from here now you can

656
00:22:27,560 --> 00:22:45,200
copy pasted twitch so that's that yeah

657
00:22:30,320 --> 00:22:46,730
any other any other questions see

658
00:22:45,200 --> 00:22:50,480
there's a thumbs up told you you can do

659
00:22:46,730 --> 00:22:52,040
thumbs up thanks alright I had to wait 8

660
00:22:50,480 --> 00:22:53,450
seconds to make sure everyone's are for

661
00:22:52,040 --> 00:22:56,720
the delay make sure Evans had a chance I

662
00:22:53,450 --> 00:22:58,820
am actually a shmoocon right now so I'm

663
00:22:56,720 --> 00:23:01,160
here in DC so I'm gonna be heading back

664
00:22:58,820 --> 00:23:02,629
there wandering around to find me if you

665
00:23:01,160 --> 00:23:06,230
want some binary ninja stickers if you

666
00:23:02,630 --> 00:23:08,240
happen to be in the area for it if not

667
00:23:06,230 --> 00:23:09,410
definitely come join us and slack and

668
00:23:08,240 --> 00:23:11,980
would love to chat with you more about

669
00:23:09,410 --> 00:23:11,980
any this stuff

