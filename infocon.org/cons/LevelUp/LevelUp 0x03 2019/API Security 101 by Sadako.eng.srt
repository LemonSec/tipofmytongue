1
00:00:05,410 --> 00:00:11,600
hi everybody if you're me okay so this

2
00:00:10,070 --> 00:00:14,210
stuff first talk I'm doing here because

3
00:00:11,600 --> 00:00:16,790
this one is ApS security testing for

4
00:00:14,210 --> 00:00:20,630
hackers or impaired security testing one

5
00:00:16,790 --> 00:00:24,349
one so we're gonna go over some basic

6
00:00:20,630 --> 00:00:26,960
things about api's security mechanisms

7
00:00:24,350 --> 00:00:30,050
the different ways that you can approach

8
00:00:26,960 --> 00:00:34,540
testing an API and then some examples of

9
00:00:30,050 --> 00:00:37,760
some bugs that I have found in a px so a

10
00:00:34,540 --> 00:00:39,979
little bit about me uh yes I'm a

11
00:00:37,760 --> 00:00:43,280
security researcher and an engineer or

12
00:00:39,979 --> 00:00:45,640
get zip car specializing in web app

13
00:00:43,280 --> 00:00:48,470
coyote and infrastructure security and

14
00:00:45,640 --> 00:00:52,970
my dreams are own and do not represent

15
00:00:48,470 --> 00:00:56,629
my employer so right now what I'll do

16
00:00:52,970 --> 00:00:58,400
that this talk kind of clip into two

17
00:00:56,629 --> 00:01:01,129
parts so the first one is going to be an

18
00:00:58,400 --> 00:01:02,330
overview of API attack vectors and so

19
00:01:01,129 --> 00:01:04,188
I'll just go through some of the basic

20
00:01:02,330 --> 00:01:07,400
things that so you may or may not know

21
00:01:04,188 --> 00:01:11,270
and just talk through them with some

22
00:01:07,400 --> 00:01:14,600
famous examples from recently and then

23
00:01:11,270 --> 00:01:18,740
the next part I will talk about the bugs

24
00:01:14,600 --> 00:01:20,839
that I actually found so the first thing

25
00:01:18,740 --> 00:01:24,140
to kind of go over is common API

26
00:01:20,840 --> 00:01:25,370
security issues and a glance so one of

27
00:01:24,140 --> 00:01:27,530
things that I like to know to people is

28
00:01:25,370 --> 00:01:30,230
API bugs are a very common source of a

29
00:01:27,530 --> 00:01:32,420
lot of the newsroom here about security

30
00:01:30,230 --> 00:01:34,960
holes or people being able to access

31
00:01:32,420 --> 00:01:37,520
things they weren't supposed to

32
00:01:34,960 --> 00:01:40,789
everything from Twitter to Facebook to

33
00:01:37,520 --> 00:01:43,610
Google+ to smaller companies we see a

34
00:01:40,790 --> 00:01:45,740
lot of things about the API was misused

35
00:01:43,610 --> 00:01:48,590
or mishandled or access was given where

36
00:01:45,740 --> 00:01:51,140
it wasn't supposed to and so those kinds

37
00:01:48,590 --> 00:01:53,330
of things are really in public sphere

38
00:01:51,140 --> 00:01:55,490
now so I'd like to share this kind of

39
00:01:53,330 --> 00:01:59,060
information with people when they ask

40
00:01:55,490 --> 00:02:01,190
about those bigger news stories so

41
00:01:59,060 --> 00:02:02,930
security issues and bones of API is

42
00:02:01,190 --> 00:02:06,350
typically fall into a few distinct

43
00:02:02,930 --> 00:02:09,319
categories so there's there are a bunch

44
00:02:06,350 --> 00:02:11,659
more but the core ones that I want to

45
00:02:09,318 --> 00:02:14,119
focus on today were access controls with

46
00:02:11,659 --> 00:02:18,319
authorization and authentication rate

47
00:02:14,120 --> 00:02:20,689
limiting input validation HTTP methods

48
00:02:18,319 --> 00:02:22,518
third party API abuse and then some

49
00:02:20,689 --> 00:02:25,370
other application and logic errors that

50
00:02:22,519 --> 00:02:26,840
are kind of sprinkled throughout so the

51
00:02:25,370 --> 00:02:31,219
first one that we'll discuss is access

52
00:02:26,840 --> 00:02:33,200
controls so from the basic get-go we'll

53
00:02:31,219 --> 00:02:34,909
defer to some definitions here so

54
00:02:33,200 --> 00:02:36,589
authentication involves proving that you

55
00:02:34,909 --> 00:02:39,879
are who you say you are whether you're

56
00:02:36,590 --> 00:02:41,900
an admin or a guest or a developer

57
00:02:39,879 --> 00:02:44,060
authorization involves granting access

58
00:02:41,900 --> 00:02:46,849
to the resources that you requested

59
00:02:44,060 --> 00:02:48,920
based on your identity so access control

60
00:02:46,849 --> 00:02:51,319
schemes tend to follow a pattern this is

61
00:02:48,920 --> 00:02:53,720
very general it's not really pointing to

62
00:02:51,319 --> 00:02:56,030
any specific type of application but

63
00:02:53,720 --> 00:02:57,470
usually the client or user will make

64
00:02:56,030 --> 00:03:00,319
your request something that requires

65
00:02:57,470 --> 00:03:02,540
authentication of some sort the server

66
00:03:00,319 --> 00:03:07,040
will process that request and we'll

67
00:03:02,540 --> 00:03:09,620
check for a few things so those are an

68
00:03:07,040 --> 00:03:11,209
account or session already exists in a

69
00:03:09,620 --> 00:03:13,129
database or if you've already been on

70
00:03:11,209 --> 00:03:16,340
the site before if the requested

71
00:03:13,129 --> 00:03:18,048
resource is actually within the access

72
00:03:16,340 --> 00:03:20,629
scope of the client so are you actually

73
00:03:18,049 --> 00:03:22,579
authorized to view whatever resource

74
00:03:20,629 --> 00:03:24,349
here requesting if there's any other

75
00:03:22,579 --> 00:03:27,609
previous cookies or tokens that were

76
00:03:24,349 --> 00:03:31,879
used in the request that may be point to

77
00:03:27,609 --> 00:03:34,669
you having the authorization already if

78
00:03:31,879 --> 00:03:36,560
they're way to the earth the if the

79
00:03:34,669 --> 00:03:38,479
route to the resource is actually valid

80
00:03:36,560 --> 00:03:40,879
so how did you get there you get there

81
00:03:38,479 --> 00:03:44,120
from Google Dorking or did you get there

82
00:03:40,879 --> 00:03:46,099
from within the application itself any

83
00:03:44,120 --> 00:03:48,440
other conditions and then any other

84
00:03:46,099 --> 00:03:51,108
conditions the server might expect

85
00:03:48,440 --> 00:03:52,400
beyond this so it's successful the

86
00:03:51,109 --> 00:03:54,400
server will give you a token or a

87
00:03:52,400 --> 00:03:56,870
session ID or any other identifier to

88
00:03:54,400 --> 00:03:59,419
mark who you are throughout the session

89
00:03:56,870 --> 00:04:00,650
and then any other requests that need to

90
00:03:59,419 --> 00:04:04,790
be authenticated will follow this

91
00:04:00,650 --> 00:04:07,150
pattern again so some common ways that

92
00:04:04,790 --> 00:04:09,500
people test for access control bugs

93
00:04:07,150 --> 00:04:11,959
include numerating potentially

94
00:04:09,500 --> 00:04:15,199
restricted endpoints so anything in the

95
00:04:11,959 --> 00:04:18,978
admin scope developer test any internal

96
00:04:15,199 --> 00:04:23,570
API endpoints modifying session tokens

97
00:04:18,978 --> 00:04:26,419
so either reusing or you know modifying

98
00:04:23,570 --> 00:04:28,490
them in some way or or putting junk data

99
00:04:26,419 --> 00:04:30,650
in there attempting to bypass

100
00:04:28,490 --> 00:04:34,790
restrictions on access with I do

101
00:04:30,650 --> 00:04:36,650
indirect object reference and modifying

102
00:04:34,790 --> 00:04:38,960
your request with additional parameters

103
00:04:36,650 --> 00:04:41,570
so people put things like admin equals

104
00:04:38,960 --> 00:04:44,930
true or test equals one or things like

105
00:04:41,570 --> 00:04:46,669
that and modifying referrer headers that

106
00:04:44,930 --> 00:04:48,860
the application might expect so you can

107
00:04:46,669 --> 00:04:50,090
actually smooth those and say that you

108
00:04:48,860 --> 00:04:54,979
came from some other part of the

109
00:04:50,090 --> 00:04:59,239
application so a famous one from this

110
00:04:54,979 --> 00:05:02,419
past year was canary bread so Panera

111
00:04:59,240 --> 00:05:04,970
Bread had the API endpoint exposed that

112
00:05:02,419 --> 00:05:07,340
allowed for access to client information

113
00:05:04,970 --> 00:05:10,130
so this was you know credit cards and

114
00:05:07,340 --> 00:05:12,469
you know usernames emails addresses and

115
00:05:10,130 --> 00:05:14,600
also to other info and the client

116
00:05:12,470 --> 00:05:17,600
records were sequentially numbered so it

117
00:05:14,600 --> 00:05:19,699
was quite easy to enumerate the entire

118
00:05:17,600 --> 00:05:21,350
database by just incrementing and I

119
00:05:19,699 --> 00:05:23,810
think that figured what the actual

120
00:05:21,350 --> 00:05:25,160
amount was but there was about tens of

121
00:05:23,810 --> 00:05:29,360
millions of client records that were

122
00:05:25,160 --> 00:05:31,310
leaked through this so this is an

123
00:05:29,360 --> 00:05:33,229
example of just a access control bug

124
00:05:31,310 --> 00:05:35,180
where this definitely wasn't supposed to

125
00:05:33,229 --> 00:05:36,620
be something that a normal

126
00:05:35,180 --> 00:05:39,199
unauthenticated user was allowed to

127
00:05:36,620 --> 00:05:44,120
access this should be strictly for

128
00:05:39,199 --> 00:05:46,699
developers and authorized people so the

129
00:05:44,120 --> 00:05:49,970
next bug class that we have here input

130
00:05:46,699 --> 00:05:51,500
validation so input validation is super

131
00:05:49,970 --> 00:05:53,690
important and it's something a lot of

132
00:05:51,500 --> 00:05:57,020
people usually consider when they are

133
00:05:53,690 --> 00:05:58,849
hunting for any kinds of bugs but it's

134
00:05:57,020 --> 00:06:00,799
very very critical to remember that

135
00:05:58,849 --> 00:06:02,990
input is anything that the server takes

136
00:06:00,800 --> 00:06:05,419
in whether it's from a user third party

137
00:06:02,990 --> 00:06:06,830
apps or other internal mechanisms so

138
00:06:05,419 --> 00:06:09,109
common places to test input validation

139
00:06:06,830 --> 00:06:11,859
and API and being within the request

140
00:06:09,110 --> 00:06:14,120
header parameters within the URL

141
00:06:11,860 --> 00:06:17,840
parameters in the request like we said

142
00:06:14,120 --> 00:06:20,360
before file uploads for very very

143
00:06:17,840 --> 00:06:25,669
important ones as well to play with and

144
00:06:20,360 --> 00:06:27,169
different request methods to so

145
00:06:25,669 --> 00:06:28,639
depending on the architecture of the

146
00:06:27,169 --> 00:06:31,370
application specific parts of the

147
00:06:28,639 --> 00:06:33,710
request making process in unsafe ways so

148
00:06:31,370 --> 00:06:35,979
you see this with any any sort of web

149
00:06:33,710 --> 00:06:40,489
application whether it's in you know a

150
00:06:35,979 --> 00:06:43,039
API or an older application but the

151
00:06:40,490 --> 00:06:44,300
common bugs would be improper

152
00:06:43,039 --> 00:06:46,460
parameterization over

153
00:06:44,300 --> 00:06:48,919
Quest's within the application logic so

154
00:06:46,460 --> 00:06:51,469
are they just concatenated variables in

155
00:06:48,919 --> 00:06:55,068
in put together and treating all it put

156
00:06:51,470 --> 00:06:57,889
as trusted lack of input sanitation and

157
00:06:55,069 --> 00:07:01,159
escaping unsafe characters and all sorts

158
00:06:57,889 --> 00:07:03,740
of other sanitation there sanitization

159
00:07:01,159 --> 00:07:05,060
techniques improper handling the

160
00:07:03,740 --> 00:07:07,460
parameters which actually we'll get to

161
00:07:05,060 --> 00:07:10,789
in a second and insufficient controls

162
00:07:07,460 --> 00:07:14,590
for data types past so any past you know

163
00:07:10,789 --> 00:07:17,960
a PDF or a zip file or can you pass a

164
00:07:14,590 --> 00:07:19,090
bunch of Unicode and is that properly

165
00:07:17,960 --> 00:07:22,489
handled

166
00:07:19,090 --> 00:07:24,948
so another famous one another famous bug

167
00:07:22,490 --> 00:07:26,389
is an input validation bug that I

168
00:07:24,949 --> 00:07:29,270
thought was really interesting so

169
00:07:26,389 --> 00:07:32,870
Germany has an eID system that allows

170
00:07:29,270 --> 00:07:35,599
for people to identify there or use

171
00:07:32,870 --> 00:07:38,900
their real-life identity online and so

172
00:07:35,599 --> 00:07:41,870
some people had tested this and they

173
00:07:38,900 --> 00:07:44,359
found that the requests to the Eid

174
00:07:41,870 --> 00:07:46,060
system required request to be signed

175
00:07:44,360 --> 00:07:49,190
which is you know great access control

176
00:07:46,060 --> 00:07:51,380
and input validation and so the

177
00:07:49,190 --> 00:07:54,289
application didn't account for the same

178
00:07:51,380 --> 00:07:57,250
parameter occurring multiple times so if

179
00:07:54,289 --> 00:08:01,068
you were to put you know and user equals

180
00:07:57,250 --> 00:08:03,139
Andy and then end user equals Sam it

181
00:08:01,069 --> 00:08:05,150
would process the last the last

182
00:08:03,139 --> 00:08:07,219
parameter that was passed to the

183
00:08:05,150 --> 00:08:08,929
application so a lot for an attacker to

184
00:08:07,219 --> 00:08:11,990
get their initial request signed and

185
00:08:08,930 --> 00:08:15,169
processed and then piggyback onto the

186
00:08:11,990 --> 00:08:16,219
request with another parameter which

187
00:08:15,169 --> 00:08:17,359
means that they would be able to do

188
00:08:16,219 --> 00:08:19,639
things like change their identity

189
00:08:17,360 --> 00:08:21,110
entirely within the system so this

190
00:08:19,639 --> 00:08:22,969
person was able to actually change their

191
00:08:21,110 --> 00:08:25,819
first and last name within the German a

192
00:08:22,969 --> 00:08:27,529
ID system using this and so I'll have

193
00:08:25,819 --> 00:08:29,599
the slides available but there's a

194
00:08:27,529 --> 00:08:33,979
notion YouTube video and a blog post

195
00:08:29,599 --> 00:08:36,760
about it you can read so how many ways

196
00:08:33,979 --> 00:08:39,079
to test buzzing there's a lot on here

197
00:08:36,760 --> 00:08:40,429
there's things you can post forward your

198
00:08:39,078 --> 00:08:42,559
things you'd normally post for it any

199
00:08:40,429 --> 00:08:45,920
sort of application which is remote code

200
00:08:42,559 --> 00:08:48,410
execution cross-site scripting local and

201
00:08:45,920 --> 00:08:50,449
remote file inclusion sequel most sequel

202
00:08:48,410 --> 00:08:54,350
injection request splitting

203
00:08:50,449 --> 00:08:56,420
deserialization xx EE and anything else

204
00:08:54,350 --> 00:08:58,730
with template languages

205
00:08:56,420 --> 00:09:00,880
encoding errors which is another

206
00:08:58,730 --> 00:09:04,070
favorite of mine like junk characters

207
00:09:00,880 --> 00:09:05,480
control characters emojis and Unicode

208
00:09:04,070 --> 00:09:08,390
points that don't have any data

209
00:09:05,480 --> 00:09:10,340
associated with them which is a another

210
00:09:08,390 --> 00:09:15,770
thing that applications sometimes forget

211
00:09:10,340 --> 00:09:17,960
to include processing for file upload

212
00:09:15,770 --> 00:09:20,810
phoner abilities which would be can you

213
00:09:17,960 --> 00:09:24,650
upload a something with a gift header

214
00:09:20,810 --> 00:09:27,500
that's actually PHP or JavaScript and

215
00:09:24,650 --> 00:09:28,910
things like SS RF though tools are

216
00:09:27,500 --> 00:09:31,130
commonly used for these kinds of things

217
00:09:28,910 --> 00:09:33,829
are burp which is the gold standard in

218
00:09:31,130 --> 00:09:36,500
my view for fuzzing and using the

219
00:09:33,830 --> 00:09:39,590
repeater to insert junk data into

220
00:09:36,500 --> 00:09:42,650
requests other enumeration tools like go

221
00:09:39,590 --> 00:09:45,410
Buster Durov Astaire using set lists and

222
00:09:42,650 --> 00:09:48,410
other github repos that have a lot of

223
00:09:45,410 --> 00:09:51,770
Awesome fuzzing payloads as well as just

224
00:09:48,410 --> 00:09:54,350
general application parameters that

225
00:09:51,770 --> 00:09:55,670
might be useful and then custom scripts

226
00:09:54,350 --> 00:09:58,070
which I'll get into in a little bit too

227
00:09:55,670 --> 00:09:59,930
so pro tip here's a speed up your

228
00:09:58,070 --> 00:10:02,230
fuzzing by making head requests to API

229
00:09:59,930 --> 00:10:04,790
endpoints which I'll also get into later

230
00:10:02,230 --> 00:10:05,960
so right limiting so rate limiting is

231
00:10:04,790 --> 00:10:07,910
something that I think doesn't get as

232
00:10:05,960 --> 00:10:10,940
much attention as it should in a lot of

233
00:10:07,910 --> 00:10:13,400
applications because api's are built to

234
00:10:10,940 --> 00:10:17,540
expect a high load and a lot of requests

235
00:10:13,400 --> 00:10:19,640
and so this functionality of it can be

236
00:10:17,540 --> 00:10:22,630
actually used against it and we used to

237
00:10:19,640 --> 00:10:25,280
quickly enumerate an endpoint and so

238
00:10:22,630 --> 00:10:27,680
there's a lot of common ways to test for

239
00:10:25,280 --> 00:10:29,209
a rate limiting so you can make a bunch

240
00:10:27,680 --> 00:10:31,819
of requests and see what happens and

241
00:10:29,210 --> 00:10:34,430
check the headers to see if you get any

242
00:10:31,820 --> 00:10:37,490
responses back that are rate limiting

243
00:10:34,430 --> 00:10:39,290
tokens but you can also try to make

244
00:10:37,490 --> 00:10:41,330
requests in varying states of

245
00:10:39,290 --> 00:10:44,660
authentication so sometimes rate

246
00:10:41,330 --> 00:10:46,040
limiting bugs only happen or you are

247
00:10:44,660 --> 00:10:48,319
only rate limited if you are at a

248
00:10:46,040 --> 00:10:50,959
certain access level so you can try as

249
00:10:48,320 --> 00:10:54,350
an authenticated user authenticated as a

250
00:10:50,960 --> 00:10:56,990
developer as a bot with a deactivated

251
00:10:54,350 --> 00:11:00,140
account or user or with just bogus fake

252
00:10:56,990 --> 00:11:02,000
credentials general tso api wasn't

253
00:11:00,140 --> 00:11:03,470
properly implemented rate limiting can

254
00:11:02,000 --> 00:11:06,020
be used to make it have normal amount of

255
00:11:03,470 --> 00:11:08,830
requests and actually cause other issues

256
00:11:06,020 --> 00:11:12,520
like Dawson as well

257
00:11:08,830 --> 00:11:15,430
um restricting API area HTTP methods is

258
00:11:12,520 --> 00:11:17,650
another important thing to consider here

259
00:11:15,430 --> 00:11:19,030
so applications are built to support a

260
00:11:17,650 --> 00:11:21,340
lot of different methods for different

261
00:11:19,030 --> 00:11:24,480
purposes whether it's for inserting

262
00:11:21,340 --> 00:11:26,950
client records or accessing you know

263
00:11:24,480 --> 00:11:29,920
modifying certain things you can do put

264
00:11:26,950 --> 00:11:31,840
and delete requests and some of these

265
00:11:29,920 --> 00:11:35,140
methods can be accessed on authenticated

266
00:11:31,840 --> 00:11:38,430
and sometimes the scope of the HTTP

267
00:11:35,140 --> 00:11:41,199
methods is actually beyond what the

268
00:11:38,430 --> 00:11:42,849
application actually expects so there

269
00:11:41,200 --> 00:11:45,790
might be something that you can do a put

270
00:11:42,850 --> 00:11:49,480
request on or delete request on that is

271
00:11:45,790 --> 00:11:51,189
actually a get or post parameter and you

272
00:11:49,480 --> 00:11:53,230
basically would be able to find

273
00:11:51,190 --> 00:11:55,570
undocumented features of the API with

274
00:11:53,230 --> 00:11:59,680
this so though it's good to look at the

275
00:11:55,570 --> 00:12:02,170
API spec documentation and see what

276
00:11:59,680 --> 00:12:06,160
actual methods are requested and compare

277
00:12:02,170 --> 00:12:08,020
them to what HTTP methods are actually

278
00:12:06,160 --> 00:12:10,300
allowed based on what the server tells

279
00:12:08,020 --> 00:12:11,860
you and so even if they're not included

280
00:12:10,300 --> 00:12:13,420
in the application logic if an

281
00:12:11,860 --> 00:12:16,660
application is lazy with the way that it

282
00:12:13,420 --> 00:12:18,400
parses methods and has no logic the

283
00:12:16,660 --> 00:12:20,920
person is being really weird things can

284
00:12:18,400 --> 00:12:25,300
happen so the next thing that I have

285
00:12:20,920 --> 00:12:28,240
here is third party API abuse and so api

286
00:12:25,300 --> 00:12:30,430
is call other api is to do what they

287
00:12:28,240 --> 00:12:33,190
need to do and so the relationships

288
00:12:30,430 --> 00:12:35,410
between a target api and third party API

289
00:12:33,190 --> 00:12:38,140
is is typically trusted in some way and

290
00:12:35,410 --> 00:12:40,329
so because there's an implicit trust

291
00:12:38,140 --> 00:12:42,699
between different api's in certain

292
00:12:40,330 --> 00:12:45,520
scenarios either can be leveraged to

293
00:12:42,700 --> 00:12:47,860
access privileged resources and so there

294
00:12:45,520 --> 00:12:50,050
are some common ones here like request

295
00:12:47,860 --> 00:12:52,590
splitting to make additional requests to

296
00:12:50,050 --> 00:12:55,150
a third party API through a target API

297
00:12:52,590 --> 00:12:59,050
server side request forgery so you can

298
00:12:55,150 --> 00:13:01,420
use the API to resolve a URL and trick

299
00:12:59,050 --> 00:13:04,030
it into making requests in the context

300
00:13:01,420 --> 00:13:06,790
of the server itself so you can use it

301
00:13:04,030 --> 00:13:09,699
to enumerate the internal network or

302
00:13:06,790 --> 00:13:11,709
gain access to server metadata and then

303
00:13:09,700 --> 00:13:13,480
unhandled input from a third party so

304
00:13:11,710 --> 00:13:16,810
sometimes you might make a request to

305
00:13:13,480 --> 00:13:19,420
your third party API that gives back um

306
00:13:16,810 --> 00:13:22,599
data that was unexpected and it can

307
00:13:19,420 --> 00:13:27,279
cause unexpected outcomes within the

308
00:13:22,600 --> 00:13:31,470
Apio you're testing so I have some

309
00:13:27,279 --> 00:13:34,449
examples here that kind of tie in to the

310
00:13:31,470 --> 00:13:36,009
bugs that we just discussed so I'll kind

311
00:13:34,449 --> 00:13:39,849
of highlight them as I go through them

312
00:13:36,009 --> 00:13:43,899
so the first one here is it was in

313
00:13:39,850 --> 00:13:47,339
discord and so this cord has an API that

314
00:13:43,899 --> 00:13:49,779
is a very very robust it has a lot of

315
00:13:47,339 --> 00:13:51,790
data types that can be passed to it a

316
00:13:49,779 --> 00:13:55,810
lot of parameters and a lot of access

317
00:13:51,790 --> 00:13:58,569
controls on it and so with a partner of

318
00:13:55,810 --> 00:14:01,268
mine we were testing out the discord API

319
00:13:58,569 --> 00:14:03,490
to see what kinds of requests you can

320
00:14:01,269 --> 00:14:07,000
actually make and see how they are

321
00:14:03,490 --> 00:14:10,300
implemented within the application so we

322
00:14:07,000 --> 00:14:11,800
were testing the invite scheme so

323
00:14:10,300 --> 00:14:15,969
there's when you are inviting somebody

324
00:14:11,800 --> 00:14:18,399
to a discord server to chat they create

325
00:14:15,970 --> 00:14:22,569
a either a one-time-use

326
00:14:18,399 --> 00:14:27,100
invite code or a is that code that

327
00:14:22,569 --> 00:14:30,610
doesn't expire and so we found that the

328
00:14:27,100 --> 00:14:32,889
invite scheme for direct messages was

329
00:14:30,610 --> 00:14:34,839
the same as those for server invites and

330
00:14:32,889 --> 00:14:38,620
so we were playing around a bit just in

331
00:14:34,839 --> 00:14:40,300
in burke and we found that the PM invite

332
00:14:38,620 --> 00:14:41,620
codes are actually only used internally

333
00:14:40,300 --> 00:14:44,199
and assumed that a user is already

334
00:14:41,620 --> 00:14:47,529
authorized to be in a group DM if an

335
00:14:44,199 --> 00:14:49,719
invite is actually used as a discord

336
00:14:47,529 --> 00:14:51,939
also had two API is available to test

337
00:14:49,720 --> 00:14:54,339
all the stuff out on an older one and a

338
00:14:51,939 --> 00:14:56,230
newer one and so that's another an

339
00:14:54,339 --> 00:14:59,199
important thing to remember when you are

340
00:14:56,230 --> 00:15:01,300
looking at AP as a whole is are there

341
00:14:59,199 --> 00:15:03,880
more than one is there a development one

342
00:15:01,300 --> 00:15:06,609
is there one that is deprecated and for

343
00:15:03,880 --> 00:15:09,120
some reasons still available those are

344
00:15:06,610 --> 00:15:16,380
all really important things to consider

345
00:15:09,120 --> 00:15:20,620
in the second so our methodology here

346
00:15:16,380 --> 00:15:22,959
was we had written a script to enumerate

347
00:15:20,620 --> 00:15:25,300
invites and so we made a request to the

348
00:15:22,959 --> 00:15:29,138
API to see if an invite code was valid

349
00:15:25,300 --> 00:15:31,750
and you can actually figure out whether

350
00:15:29,139 --> 00:15:33,809
or not the code is valid by just making

351
00:15:31,750 --> 00:15:36,410
a head request and reading the response

352
00:15:33,809 --> 00:15:38,569
so for this we were able to make about

353
00:15:36,410 --> 00:15:41,149
hundred requests per second and we found

354
00:15:38,569 --> 00:15:43,579
about one valid invite for per minute

355
00:15:41,149 --> 00:15:45,589
and we've randomly generated invites

356
00:15:43,579 --> 00:15:48,410
rather than trying to brute force the

357
00:15:45,589 --> 00:15:51,290
entire key space because an invite code

358
00:15:48,410 --> 00:15:54,139
is six characters long alphanumeric and

359
00:15:51,290 --> 00:15:56,240
so trying to brute force that from

360
00:15:54,139 --> 00:15:58,699
beginning would take a while still

361
00:15:56,240 --> 00:16:00,769
doable but we felt it would be better to

362
00:15:58,699 --> 00:16:03,050
just try to randomize it and ended up

363
00:16:00,769 --> 00:16:05,449
finding out that generated codes seem to

364
00:16:03,050 --> 00:16:07,699
be used as seeds for future codes so we

365
00:16:05,449 --> 00:16:10,729
actually were taking valid codes and

366
00:16:07,699 --> 00:16:17,149
then changing parts of the code itself

367
00:16:10,730 --> 00:16:18,949
to check for further codes and we only

368
00:16:17,149 --> 00:16:20,839
enumerated temporary invites which are

369
00:16:18,949 --> 00:16:22,670
six characters although there are long

370
00:16:20,839 --> 00:16:25,939
term invites which are eight characters

371
00:16:22,670 --> 00:16:29,029
long and so here's an example requests

372
00:16:25,939 --> 00:16:31,250
we had successful requests versus failed

373
00:16:29,029 --> 00:16:35,060
requests so you're making this squirrel

374
00:16:31,250 --> 00:16:37,759
request it's authenticated as well to

375
00:16:35,060 --> 00:16:40,670
the discord API within a betray invite

376
00:16:37,759 --> 00:16:43,430
so the one on the left is lol yes the

377
00:16:40,670 --> 00:16:47,180
other one is a little no so lol yes one

378
00:16:43,430 --> 00:16:49,609
and gives a 200 response and the fails

379
00:16:47,180 --> 00:16:51,229
one gives a 404 so it's easy to write a

380
00:16:49,610 --> 00:16:54,589
quick Python script to be able to

381
00:16:51,230 --> 00:16:56,180
enumerate these things and see which

382
00:16:54,589 --> 00:16:59,060
ones were valid and which ones weren't

383
00:16:56,180 --> 00:17:01,519
and so the impact for this was we were

384
00:16:59,060 --> 00:17:06,109
able to join private servers as well as

385
00:17:01,519 --> 00:17:07,370
private root DNS so the DMS were strange

386
00:17:06,109 --> 00:17:10,458
and actually wish I had a screenshot

387
00:17:07,369 --> 00:17:12,079
included in here because the it looks

388
00:17:10,459 --> 00:17:15,100
the same as a server invite where you

389
00:17:12,079 --> 00:17:17,599
are invited to join a specific server

390
00:17:15,099 --> 00:17:20,030
but it just has a list of user names in

391
00:17:17,599 --> 00:17:21,948
them and you can just join and people

392
00:17:20,030 --> 00:17:24,020
were pretty freaked out when we found

393
00:17:21,949 --> 00:17:26,179
out about this but it is interesting

394
00:17:24,020 --> 00:17:28,010
because as researchers who don't really

395
00:17:26,179 --> 00:17:30,440
hang out on discord that much just

396
00:17:28,010 --> 00:17:34,190
jumping into a random group DM was kind

397
00:17:30,440 --> 00:17:38,770
of kind of funny and weird so yeah the

398
00:17:34,190 --> 00:17:40,700
next one that I have is due to mobile so

399
00:17:38,770 --> 00:17:43,639
if you haven't heard of due to mobile

400
00:17:40,700 --> 00:17:47,149
it's a website templating service that

401
00:17:43,640 --> 00:17:49,640
people use to make mobile websites for

402
00:17:47,149 --> 00:17:52,699
their

403
00:17:49,640 --> 00:17:55,250
their desktop website and so they

404
00:17:52,700 --> 00:17:56,929
basically templates the it takes an

405
00:17:55,250 --> 00:17:59,540
existing website and it turns it into a

406
00:17:56,929 --> 00:18:01,790
mobile-friendly template but it also has

407
00:17:59,540 --> 00:18:04,220
an API that's built in to process

408
00:18:01,790 --> 00:18:06,590
external links and convert them into a

409
00:18:04,220 --> 00:18:08,660
mobile safe format so it tries to script

410
00:18:06,590 --> 00:18:10,970
some JavaScript and CSS and attempts to

411
00:18:08,660 --> 00:18:14,780
load the websites into the preset theme

412
00:18:10,970 --> 00:18:17,210
which is interesting so right off the

413
00:18:14,780 --> 00:18:19,280
bat I was able to in testing this to get

414
00:18:17,210 --> 00:18:21,770
past the filtering mechanism and bypass

415
00:18:19,280 --> 00:18:24,830
javascript filtering with onload

416
00:18:21,770 --> 00:18:26,629
directives in image tags but I could

417
00:18:24,830 --> 00:18:29,960
also access the mobile sites internal

418
00:18:26,630 --> 00:18:32,690
rendering API to load other api's within

419
00:18:29,960 --> 00:18:34,340
the context of this website on there but

420
00:18:32,690 --> 00:18:37,130
where any website on their platform so

421
00:18:34,340 --> 00:18:39,770
there was about 30,000 websites and you

422
00:18:37,130 --> 00:18:44,059
could do the same thing to just load

423
00:18:39,770 --> 00:18:46,429
arbitrary URLs into the template of the

424
00:18:44,059 --> 00:18:49,639
website and so this allowed for xsrf

425
00:18:46,429 --> 00:18:55,370
attacks also on Duty's infrastructure as

426
00:18:49,640 --> 00:18:57,980
well as loading some of their internal

427
00:18:55,370 --> 00:19:01,340
resources as well so that's just the URL

428
00:18:57,980 --> 00:19:03,500
scheme is down there so a lot of things

429
00:19:01,340 --> 00:19:05,120
like this the doodle mobile API being

430
00:19:03,500 --> 00:19:11,929
used to access internal resources this

431
00:19:05,120 --> 00:19:15,260
is a router at one and 2.16 1.1 that one

432
00:19:11,929 --> 00:19:16,940
and yeah this one I wasn't able to

433
00:19:15,260 --> 00:19:18,620
actually sign into but the fact I could

434
00:19:16,940 --> 00:19:19,070
then use this to enumerate the rest of

435
00:19:18,620 --> 00:19:21,530
the network

436
00:19:19,070 --> 00:19:25,280
it's pretty scary but the real scary one

437
00:19:21,530 --> 00:19:29,210
is being able to load their US keys into

438
00:19:25,280 --> 00:19:31,399
any of the doodle mobile websites that

439
00:19:29,210 --> 00:19:34,070
were templated and so this is an example

440
00:19:31,400 --> 00:19:37,940
of being able to use one API to call

441
00:19:34,070 --> 00:19:41,000
another API and be able to enumerate

442
00:19:37,940 --> 00:19:43,130
information from there so the impact was

443
00:19:41,000 --> 00:19:45,080
it led to the disclosure of private AWS

444
00:19:43,130 --> 00:19:46,940
keys and sensitive information in the

445
00:19:45,080 --> 00:19:49,970
production AWS account for the whole

446
00:19:46,940 --> 00:19:52,190
enterprise through SSR F I was able to

447
00:19:49,970 --> 00:19:54,410
load and potentially modify internal

448
00:19:52,190 --> 00:19:57,710
router configs and other resources by

449
00:19:54,410 --> 00:20:01,610
accessing these and it was definitely a

450
00:19:57,710 --> 00:20:03,730
really interesting bug to explain and so

451
00:20:01,610 --> 00:20:06,309
with that 20 minutes

452
00:20:03,730 --> 00:20:07,510
if you have followup with me I do have

453
00:20:06,309 --> 00:20:10,418
any questions or comments or concerns

454
00:20:07,510 --> 00:20:10,990
feel free to email me at blackhat Zipcar

455
00:20:10,419 --> 00:20:13,539
com

456
00:20:10,990 --> 00:20:17,740
also if you are a security focused

457
00:20:13,539 --> 00:20:21,429
developer we are hiring and so you can

458
00:20:17,740 --> 00:20:24,460
hit me up as well the resume if you are

459
00:20:21,429 --> 00:20:26,230
looking to get into the space so with

460
00:20:24,460 --> 00:20:30,370
that I asked if there's any questions

461
00:20:26,230 --> 00:20:32,260
from the chat well somebody in the chat

462
00:20:30,370 --> 00:20:35,739
pass if there's any additional resources

463
00:20:32,260 --> 00:20:38,100
for reading about API hacking I mean all

464
00:20:35,740 --> 00:20:41,500
of us but I've looked at has nearly been

465
00:20:38,100 --> 00:20:42,100
tossed stuff as well as strand and block

466
00:20:41,500 --> 00:20:44,350
posts

467
00:20:42,100 --> 00:20:47,080
so a lot of the sort of thing is just

468
00:20:44,350 --> 00:20:50,740
stuff that I've ended up doing work or

469
00:20:47,080 --> 00:20:54,399
through other testing so I would just

470
00:20:50,740 --> 00:20:56,470
Google API hacking I guess somebody

471
00:20:54,399 --> 00:20:58,678
might go to thing not somebody has other

472
00:20:56,470 --> 00:20:58,679
things

