1
00:00:06,040 --> 00:00:15,350
okay cool well everyone here I'm really

2
00:00:11,900 --> 00:00:19,369
Gaurav I'm a white head and back hunter

3
00:00:15,350 --> 00:00:23,060
from Russia and I'm presenting my dog

4
00:00:19,369 --> 00:00:26,330
named him rocker approaching adobe

5
00:00:23,060 --> 00:00:29,749
experience manager web obscene bug

6
00:00:26,330 --> 00:00:33,379
bounty programs first of all I want to

7
00:00:29,749 --> 00:00:37,430
thank background for organizing level up

8
00:00:33,380 --> 00:00:44,270
and gave me an opportunity to present my

9
00:00:37,430 --> 00:00:47,120
research here I do security research and

10
00:00:44,270 --> 00:00:50,539
bug hunting I'm active on Bach route and

11
00:00:47,120 --> 00:00:52,788
haka one as well and also have a

12
00:00:50,539 --> 00:00:56,530
full-time job as senior security

13
00:00:52,789 --> 00:00:59,899
researcher in a software vendor company

14
00:00:56,530 --> 00:01:04,879
you can find my previous researches on a

15
00:00:59,899 --> 00:01:10,880
SlideShare and speak if you want you can

16
00:01:04,879 --> 00:01:13,190
also follow me on the Twitter why do I

17
00:01:10,880 --> 00:01:16,729
want to talk about the experience

18
00:01:13,190 --> 00:01:20,780
manager participating in background gist

19
00:01:16,730 --> 00:01:22,940
I realized that many targets are indeed

20
00:01:20,780 --> 00:01:26,210
adobe experience manager web

21
00:01:22,940 --> 00:01:29,120
applications and there are not so many

22
00:01:26,210 --> 00:01:32,539
researchers on the topic I think the

23
00:01:29,120 --> 00:01:36,400
main reason for that is because II am is

24
00:01:32,540 --> 00:01:39,800
an enterprise-grade software and

25
00:01:36,400 --> 00:01:43,610
researchers are not able to easily get

26
00:01:39,800 --> 00:01:45,050
trial focused installation of a am to

27
00:01:43,610 --> 00:01:48,520
play with

28
00:01:45,050 --> 00:01:52,970
there is just no such an option and

29
00:01:48,520 --> 00:01:55,490
license costs a lot of money in my case

30
00:01:52,970 --> 00:01:58,640
I was lucky to have a test installation

31
00:01:55,490 --> 00:02:01,460
I should say that am is quite complex

32
00:01:58,640 --> 00:02:04,430
pieced and many installations are

33
00:02:01,460 --> 00:02:08,538
insecure because of uninstalled security

34
00:02:04,430 --> 00:02:12,590
updates and various configurations as

35
00:02:08,538 --> 00:02:15,439
well I want to attract attention to and

36
00:02:12,590 --> 00:02:19,099
web apps in security and motivate bug

37
00:02:15,439 --> 00:02:23,060
hunters and security researchers to test

38
00:02:19,099 --> 00:02:25,730
security of my Bob's and maybe discover

39
00:02:23,060 --> 00:02:30,109
new vulnerabilities and hacking

40
00:02:25,730 --> 00:02:33,290
techniques in October of 2018

41
00:02:30,109 --> 00:02:37,489
I had similar talk at activity

42
00:02:33,290 --> 00:02:39,798
conference current talk has intersection

43
00:02:37,489 --> 00:02:43,700
with the past talk but they are not the

44
00:02:39,799 --> 00:02:46,120
same I edit additional tricks to the

45
00:02:43,700 --> 00:02:49,219
stock and also we'll talk about

46
00:02:46,120 --> 00:02:54,620
automation tools I've publicly released

47
00:02:49,219 --> 00:02:57,590
not wanna go onto an explicitly mentions

48
00:02:54,620 --> 00:03:02,780
that all content I'm presenting doesn't

49
00:02:57,590 --> 00:03:06,139
contain any of these only known tips are

50
00:03:02,780 --> 00:03:12,019
discussed I divided my talk into two

51
00:03:06,139 --> 00:03:16,099
parts with work examples and tools for

52
00:03:12,019 --> 00:03:20,359
bug hunting automation tools are

53
00:03:16,099 --> 00:03:22,879
publicly available on github if you have

54
00:03:20,359 --> 00:03:26,359
ideas or techniques and want to share

55
00:03:22,879 --> 00:03:33,679
them you can reach me and I will include

56
00:03:26,359 --> 00:03:37,729
them in my tools here I included public

57
00:03:33,680 --> 00:03:44,680
bug bounty programs known to me that

58
00:03:37,729 --> 00:03:47,209
have AM targets also I included public

59
00:03:44,680 --> 00:03:51,290
vulnerability disclosure programs with

60
00:03:47,209 --> 00:03:53,269
am targets I suppose some of mentioned

61
00:03:51,290 --> 00:03:59,209
companies have private bug bounty

62
00:03:53,269 --> 00:04:02,139
programs as well I want to share my

63
00:03:59,209 --> 00:04:06,829
personal achievements from 2018 I

64
00:04:02,139 --> 00:04:09,409
reported 84 duplicate box for a.m.

65
00:04:06,829 --> 00:04:10,939
targets on background and each one

66
00:04:09,409 --> 00:04:14,030
platforms

67
00:04:10,939 --> 00:04:17,029
the majority of Box RP ones and peaches

68
00:04:14,030 --> 00:04:19,430
and there's a pleasant bonus I've got

69
00:04:17,029 --> 00:04:24,590
two series from Adobe product security

70
00:04:19,430 --> 00:04:29,960
incident response team let's talk about

71
00:04:24,590 --> 00:04:30,500
bug categories I found among the ones I

72
00:04:29,960 --> 00:04:32,630
found

73
00:04:30,500 --> 00:04:38,470
remote code execution and

74
00:04:32,630 --> 00:04:42,920
secrets disclosure box among the two box

75
00:04:38,470 --> 00:04:46,750
eternal a seraph with high impact stored

76
00:04:42,920 --> 00:04:51,940
XSS application-level denial service

77
00:04:46,750 --> 00:04:55,210
with easy difficulty among p3 box

78
00:04:51,940 --> 00:05:01,340
internal a seraph with medium impact

79
00:04:55,210 --> 00:05:05,690
reflected excess application with medium

80
00:05:01,340 --> 00:05:10,700
goatee and flash based frenetic assess

81
00:05:05,690 --> 00:05:13,670
for e for severity here I want to

82
00:05:10,700 --> 00:05:17,930
highlight previous works about I am

83
00:05:13,670 --> 00:05:25,070
hacking I'm sorry if I forgot to mention

84
00:05:17,930 --> 00:05:29,870
somebody in the list okay let's discuss

85
00:05:25,070 --> 00:05:34,690
shortly basics of a.m. and we need more

86
00:05:29,870 --> 00:05:34,690
details ways to bypass a.m. dispatcher

87
00:05:35,170 --> 00:05:41,630
you can see here that M is quite complex

88
00:05:38,480 --> 00:05:44,870
it has many layers and the attack

89
00:05:41,630 --> 00:05:47,900
surface is quite big I want to

90
00:05:44,870 --> 00:05:52,160
especially outline three Apache projects

91
00:05:47,900 --> 00:05:55,789
that form the core of a.m. they are

92
00:05:52,160 --> 00:05:59,660
Apache felix Apaches link and Apache or

93
00:05:55,790 --> 00:06:00,590
JCR Apache felix is used to manage

94
00:05:59,660 --> 00:06:04,520
so-called

95
00:06:00,590 --> 00:06:08,780
osj bundles all functionality in DM is

96
00:06:04,520 --> 00:06:11,450
packed inside with J bundles I purchase

97
00:06:08,780 --> 00:06:14,690
Lincoln gives REST API for content

98
00:06:11,450 --> 00:06:20,000
repository and also gives the ability to

99
00:06:14,690 --> 00:06:22,880
expose service from OS j what Shivaji CR

100
00:06:20,000 --> 00:06:26,000
is a Content repository everything in

101
00:06:22,880 --> 00:06:33,200
EMS taught as properties for some knots

102
00:06:26,000 --> 00:06:36,560
and GCR in common am deployment scenario

103
00:06:33,200 --> 00:06:40,659
there are three main components both

104
00:06:36,560 --> 00:06:45,080
wings publish instance and dispersion

105
00:06:40,660 --> 00:06:45,940
also instances placed usually displays

106
00:06:45,080 --> 00:06:48,669
deep inside

107
00:06:45,940 --> 00:06:52,360
BACnet and it's not visible from the

108
00:06:48,670 --> 00:06:54,390
internet content is published on also

109
00:06:52,360 --> 00:06:58,180
instance and through replication

110
00:06:54,390 --> 00:07:01,180
mechanisms content is propagated to

111
00:06:58,180 --> 00:07:03,250
publish instances user normally

112
00:07:01,180 --> 00:07:07,240
communicates who is publish instance

113
00:07:03,250 --> 00:07:10,960
through AM dispatcher him this projects

114
00:07:07,240 --> 00:07:14,950
as reverse proxy there can be additional

115
00:07:10,960 --> 00:07:18,930
components seen between user and AM

116
00:07:14,950 --> 00:07:21,990
dispatcher for example various different

117
00:07:18,930 --> 00:07:26,830
application firewalls audience like

118
00:07:21,990 --> 00:07:30,100
Akamai or CloudFlare M could be deployed

119
00:07:26,830 --> 00:07:37,440
on premises or in the cloud for example

120
00:07:30,100 --> 00:07:40,300
in AWS we will focus on AM dispatcher

121
00:07:37,440 --> 00:07:46,210
physically AM dispatch is a module for

122
00:07:40,300 --> 00:07:48,970
web server Apache or IIS it filters out

123
00:07:46,210 --> 00:07:52,330
requests as don't win security policy

124
00:07:48,970 --> 00:07:57,400
and prevent them from reaching publish

125
00:07:52,330 --> 00:08:00,010
instance in theory stated in the

126
00:07:57,400 --> 00:08:03,429
official documentation from Adobe M

127
00:08:00,010 --> 00:08:07,419
dispatcher is an extra layer in layered

128
00:08:03,430 --> 00:08:12,340
am security however in practice we see

129
00:08:07,419 --> 00:08:14,020
that its own security layer the reality

130
00:08:12,340 --> 00:08:18,159
is that him

131
00:08:14,020 --> 00:08:20,590
it means rely on AM dispatch and rarely

132
00:08:18,160 --> 00:08:23,560
configure publish instance securely and

133
00:08:20,590 --> 00:08:27,609
install security updates in timely

134
00:08:23,560 --> 00:08:32,860
fashion that's very good for us bug

135
00:08:27,610 --> 00:08:36,490
hunters in my arsenal I have four

136
00:08:32,860 --> 00:08:40,300
methods to bypass the MB special first

137
00:08:36,490 --> 00:08:42,880
one is CV from 2016

138
00:08:40,299 --> 00:08:45,459
it still works quite well today the

139
00:08:42,880 --> 00:08:48,880
second one was discovered by me this

140
00:08:45,460 --> 00:08:52,870
year it allows to access some of the

141
00:08:48,880 --> 00:08:56,970
soviets by passing dispatcher west for

142
00:08:52,870 --> 00:08:56,970
CD and

143
00:08:57,160 --> 00:09:04,990
had multiple slashes and method works

144
00:09:00,510 --> 00:09:09,630
sometimes again against weirdest party

145
00:09:04,990 --> 00:09:12,700
policies and a seraph method might be

146
00:09:09,630 --> 00:09:17,650
Universal ribbon for dispatching by

147
00:09:12,700 --> 00:09:20,950
parts let's start with silly here you

148
00:09:17,650 --> 00:09:24,880
can see minimal dispatcher policy that

149
00:09:20,950 --> 00:09:28,120
was recommended by Adobe before our CD

150
00:09:24,880 --> 00:09:30,640
this policy is too restrictive usually

151
00:09:28,120 --> 00:09:35,290
you extend it by aging rules that allows

152
00:09:30,640 --> 00:09:37,540
customer requests policy contains rules

153
00:09:35,290 --> 00:09:40,480
that are applied sequentially to the

154
00:09:37,540 --> 00:09:43,709
incoming request and what's important

155
00:09:40,480 --> 00:09:47,830
are several rules can match the request

156
00:09:43,710 --> 00:09:51,970
but the worst truths it washes it is

157
00:09:47,830 --> 00:09:55,540
applied rule can be of two types

158
00:09:51,970 --> 00:09:57,880
I deny Oh allow if none of the rules

159
00:09:55,540 --> 00:10:04,060
much the requests default in my rule is

160
00:09:57,880 --> 00:10:09,640
applied that blocks the request here you

161
00:10:04,060 --> 00:10:13,959
can see the tail of the policy so here

162
00:10:09,640 --> 00:10:17,920
reach the bypass it stupidly simple if

163
00:10:13,960 --> 00:10:21,400
we try to access query builder Jason

164
00:10:17,920 --> 00:10:24,339
Soviet on wrote beam query builder de

165
00:10:21,400 --> 00:10:29,319
Jason our quest will be blocked by the

166
00:10:24,340 --> 00:10:32,560
dispatcher but if we add slash a dot CSS

167
00:10:29,320 --> 00:10:38,430
to the URL we can access query builder

168
00:10:32,560 --> 00:10:42,910
JSON servlet let's return to the policy

169
00:10:38,430 --> 00:10:47,589
if we add a slash a dot CSS to the URL

170
00:10:42,910 --> 00:10:52,420
our quest is allowed because of rule 0 0

171
00:10:47,590 --> 00:10:59,950
41 it has a low type and it's the last

172
00:10:52,420 --> 00:11:03,370
rules it matches our quest of course

173
00:10:59,950 --> 00:11:08,529
w6 this book and you should knew minimal

174
00:11:03,370 --> 00:11:12,730
spatial policy rule 0 0 41 that should

175
00:11:08,529 --> 00:11:15,550
allow access to CSS files now is changed

176
00:11:12,730 --> 00:11:18,579
now the dispatcher looks for the real

177
00:11:15,550 --> 00:11:21,370
extension at the URL and not for the

178
00:11:18,579 --> 00:11:27,459
last singles and of course it's make

179
00:11:21,370 --> 00:11:31,839
sense morals from the policy and the

180
00:11:27,459 --> 00:11:35,670
tail of it now if we are trying to

181
00:11:31,839 --> 00:11:40,389
access wrote in query builder Jason all

182
00:11:35,670 --> 00:11:43,240
been query builder to jason /k CSS they

183
00:11:40,389 --> 00:11:46,050
request is blocked because now this

184
00:11:43,240 --> 00:11:49,870
partial looks for the real extension i

185
00:11:46,050 --> 00:11:53,319
figured out that it's possible to access

186
00:11:49,870 --> 00:11:57,430
some tablets for example as I mentioned

187
00:11:53,320 --> 00:12:01,720
very build the query builder a Jason

188
00:11:57,430 --> 00:12:05,680
Soviet by aging dot let dot some

189
00:12:01,720 --> 00:12:11,230
extension to the URL and the technique

190
00:12:05,680 --> 00:12:13,899
purpose is to extend dispatcher in some

191
00:12:11,230 --> 00:12:17,920
cases we can bypass we will configure

192
00:12:13,899 --> 00:12:22,690
dispatcher by adding multiple flashes so

193
00:12:17,920 --> 00:12:25,390
if access to a slash eats the JSON is

194
00:12:22,690 --> 00:12:29,140
blocked we can try to access three

195
00:12:25,390 --> 00:12:34,149
slashes it's the JSON and sometimes it

196
00:12:29,140 --> 00:12:37,510
magically works set aside request

197
00:12:34,149 --> 00:12:41,740
forgery in some component on publish

198
00:12:37,510 --> 00:12:43,480
instance allows to bypassed explicit

199
00:12:41,740 --> 00:12:46,569
deny rules of the dispatcher

200
00:12:43,480 --> 00:12:51,370
I found that Seraphim are abilities

201
00:12:46,569 --> 00:12:54,010
which allow to some get requests and see

202
00:12:51,370 --> 00:12:58,180
the response are quite handy in that

203
00:12:54,010 --> 00:13:01,990
case because you can access GCR with

204
00:12:58,180 --> 00:13:06,899
default get servlet sheriff and grab

205
00:13:01,990 --> 00:13:12,940
secrets if access controls for GCR notes

206
00:13:06,899 --> 00:13:13,570
is misconfigured Seraphin open social

207
00:13:12,940 --> 00:13:16,720
progress

208
00:13:13,570 --> 00:13:21,820
and reporting services proc system with

209
00:13:16,720 --> 00:13:24,600
examples of such vulnerabilities the

210
00:13:21,820 --> 00:13:29,230
next part of the presentation is about

211
00:13:24,600 --> 00:13:34,779
automating bug hunting first - I built

212
00:13:29,230 --> 00:13:38,709
is a RC bondo project RC OSGi bundle

213
00:13:34,779 --> 00:13:42,610
allows you to get our C quickly if you

214
00:13:38,709 --> 00:13:43,750
have access to Felix console I included

215
00:13:42,610 --> 00:13:48,819
pre-built

216
00:13:43,750 --> 00:13:54,339
ohj bundle for am 6.2 it also works in

217
00:13:48,819 --> 00:13:57,279
the new OEM versions if you find that

218
00:13:54,339 --> 00:14:01,480
pre-built osj bundle is not suitable for

219
00:13:57,279 --> 00:14:05,439
you we want to change something in the

220
00:14:01,480 --> 00:14:10,779
code you can generate new skeleton using

221
00:14:05,440 --> 00:14:13,449
presented comments and then back port

222
00:14:10,779 --> 00:14:17,279
back the servlet class from my project

223
00:14:13,449 --> 00:14:22,079
tools in here created a skeleton project

224
00:14:17,279 --> 00:14:27,699
there is separate comment line for him

225
00:14:22,079 --> 00:14:30,339
russian 5.6 for all other am versions

226
00:14:27,699 --> 00:14:34,089
you have one comment line you should

227
00:14:30,339 --> 00:14:39,399
select archetype version correctly from

228
00:14:34,089 --> 00:14:43,540
the table presented on the slide bundle

229
00:14:39,399 --> 00:14:50,199
includes a sling sublet on pass feedback

230
00:14:43,540 --> 00:14:57,160
dot HTML solid has parameter ACMG as it

231
00:14:50,199 --> 00:15:00,370
accepts shall come out execute another

232
00:14:57,160 --> 00:15:04,060
project is a m-- rocket all set

233
00:15:00,370 --> 00:15:11,199
it includes several scripts written in

234
00:15:04,060 --> 00:15:15,369
python as main to is am hacker don't why

235
00:15:11,199 --> 00:15:22,180
it's can see am target vulnerabilities

236
00:15:15,370 --> 00:15:24,010
had miss configuration it implements am

237
00:15:22,180 --> 00:15:26,819
dispatcher bypass techniques i've

238
00:15:24,010 --> 00:15:29,549
described earlier

239
00:15:26,819 --> 00:15:32,459
in order to detect Sarah site request

240
00:15:29,549 --> 00:15:38,279
forgery issues you should run the tool

241
00:15:32,459 --> 00:15:40,670
from your peers and you need to do extra

242
00:15:38,279 --> 00:15:45,929
work to get something exploitable out of

243
00:15:40,670 --> 00:15:49,799
to output for example it can detect slim

244
00:15:45,929 --> 00:15:53,639
posts toilet availability and to get an

245
00:15:49,799 --> 00:15:58,199
exercise you should find not in GCR that

246
00:15:53,639 --> 00:16:02,749
allows minimis modification all gets

247
00:15:58,199 --> 00:16:02,748
credentials with some level of access

248
00:16:03,499 --> 00:16:11,369
here is the health message for the tool

249
00:16:06,899 --> 00:16:14,429
it supports multiple workers threats and

250
00:16:11,369 --> 00:16:18,649
ability to specify proxy for all

251
00:16:14,429 --> 00:16:24,149
requests with host parameter you specify

252
00:16:18,649 --> 00:16:26,929
IP address or hostname of you a VPS this

253
00:16:24,149 --> 00:16:30,629
is required for a seraph detection

254
00:16:26,929 --> 00:16:33,869
parameter port and allows you to specify

255
00:16:30,629 --> 00:16:40,009
a port number only the ps4 back

256
00:16:33,869 --> 00:16:40,009
connections default port number is 18

257
00:16:40,699 --> 00:16:52,309
commonly used common line is presented

258
00:16:43,679 --> 00:16:55,949
here currently am hacker implements 22

259
00:16:52,309 --> 00:16:56,510
unique checks they are listed on next

260
00:16:55,949 --> 00:16:59,599
three slides

261
00:16:56,510 --> 00:16:59,600
[Music]

262
00:17:05,550 --> 00:17:13,720
the next tool is am discover it takes

263
00:17:10,000 --> 00:17:17,560
list of URLs and detects AM web apps

264
00:17:13,720 --> 00:17:21,540
among them to implement logic to bypass

265
00:17:17,560 --> 00:17:23,129
AM dispatcher commonly used cold lines

266
00:17:21,540 --> 00:17:25,950
[Music]

267
00:17:23,130 --> 00:17:29,230
common line is presented on the slide

268
00:17:25,950 --> 00:17:34,330
with parameter workers you can specify

269
00:17:29,230 --> 00:17:36,130
the number of federal workers some

270
00:17:34,330 --> 00:17:39,340
numbers about the performance of the

271
00:17:36,130 --> 00:17:45,180
tool it took two days to scan lists of

272
00:17:39,340 --> 00:17:45,179
half a million URLs using 150 workers

273
00:17:46,530 --> 00:17:56,889
health message for AM discover the next

274
00:17:52,750 --> 00:17:59,590
tool is a mi Nam it traverses the CR

275
00:17:56,890 --> 00:18:06,730
using default gets over late its knees

276
00:17:59,590 --> 00:18:09,760
out user names and secrets here is the

277
00:18:06,730 --> 00:18:11,890
help message for the tool with parameter

278
00:18:09,760 --> 00:18:15,190
base you can specify not to start

279
00:18:11,890 --> 00:18:17,080
traversing from if you omit this

280
00:18:15,190 --> 00:18:21,220
parameter are not is selected

281
00:18:17,080 --> 00:18:24,129
automatically with parameter grub depth

282
00:18:21,220 --> 00:18:27,850
you can specify depths of the sub tree

283
00:18:24,130 --> 00:18:30,430
that is fetched in each iteration it

284
00:18:27,850 --> 00:18:34,270
affects speed of the tool but you can

285
00:18:30,430 --> 00:18:37,390
specify arbitrary large values if well

286
00:18:34,270 --> 00:18:41,350
used to watch am returns HTTP 300

287
00:18:37,390 --> 00:18:45,040
response without actual data parameter

288
00:18:41,350 --> 00:18:48,490
marks depths specify a grabbing depths

289
00:18:45,040 --> 00:18:52,020
by increasing this parameter you can get

290
00:18:48,490 --> 00:18:58,570
more data but it will take more time to

291
00:18:52,020 --> 00:19:00,820
outputs results in CSV format here you

292
00:18:58,570 --> 00:19:03,580
can see commonly used command lines

293
00:19:00,820 --> 00:19:06,100
first one is good for grabbing user

294
00:19:03,580 --> 00:19:13,379
names and second one is good for

295
00:19:06,100 --> 00:19:20,100
grabbing secrets the next pair of tools

296
00:19:13,380 --> 00:19:23,760
tools Seraph to RC and am so they helps

297
00:19:20,100 --> 00:19:26,310
to exploit a seraph in site catalyst

298
00:19:23,760 --> 00:19:30,060
soviet and auto provision and soviet as

299
00:19:26,310 --> 00:19:33,240
remote code execution what there are two

300
00:19:30,060 --> 00:19:39,389
prerequisite is a version should be

301
00:19:33,240 --> 00:19:43,380
specific I tested it on am 6.2 and if

302
00:19:39,390 --> 00:19:45,290
CFP 7 is not still installed exploit

303
00:19:43,380 --> 00:19:48,390
chain works perfectly

304
00:19:45,290 --> 00:19:54,060
another requirement application server

305
00:19:48,390 --> 00:19:56,490
server should allow JT is the default

306
00:19:54,060 --> 00:20:01,080
application server for a.m. and it

307
00:19:56,490 --> 00:20:03,390
supports HD this problem to get our C we

308
00:20:01,080 --> 00:20:06,510
expose reverse replication mechanism

309
00:20:03,390 --> 00:20:12,900
after joining am topology through a

310
00:20:06,510 --> 00:20:20,160
server here is the help message for a.m.

311
00:20:12,900 --> 00:20:24,540
as RF 2 RC 2 first you should run him

312
00:20:20,160 --> 00:20:27,570
server script on your VPS it mimics

313
00:20:24,540 --> 00:20:33,300
reverse application process by serving

314
00:20:27,570 --> 00:20:37,260
file response dot bin to start the

315
00:20:33,300 --> 00:20:40,860
attack you launch a seraph to our C

316
00:20:37,260 --> 00:20:45,480
script in Europe aramta you specify path

317
00:20:40,860 --> 00:20:48,990
to access site I catalyst of it order

318
00:20:45,480 --> 00:20:52,200
provisioning Soviet in a fake am

319
00:20:48,990 --> 00:20:57,060
parameter you specify hostname or IP

320
00:20:52,200 --> 00:21:02,580
address of your VPS where I am service

321
00:20:57,060 --> 00:21:06,540
script is running and if RC is possible

322
00:21:02,580 --> 00:21:10,080
you should see incoming connection to

323
00:21:06,540 --> 00:21:15,120
fake am server then you can access the

324
00:21:10,080 --> 00:21:20,220
shell using using past present on the

325
00:21:15,120 --> 00:21:23,620
slide the last tool is handy when you

326
00:21:20,220 --> 00:21:26,920
have credentials of privileged user

327
00:21:23,620 --> 00:21:27,699
but don't have access to felix consul of

328
00:21:26,920 --> 00:21:35,050
a.m.

329
00:21:27,700 --> 00:21:36,930
it works by uploading GL to apps not the

330
00:21:35,050 --> 00:21:41,830
rest of the slides will be devoted to

331
00:21:36,930 --> 00:21:44,730
methodology usually people install

332
00:21:41,830 --> 00:21:48,669
additional bundles and packages on him

333
00:21:44,730 --> 00:21:51,790
some packages include frameworks used by

334
00:21:48,670 --> 00:21:54,880
applications running on top of a.m.

335
00:21:51,790 --> 00:21:59,950
others include additional consoles or

336
00:21:54,880 --> 00:22:02,890
fiddles that is the administration some

337
00:21:59,950 --> 00:22:06,750
of them might be insecure and allow

338
00:22:02,890 --> 00:22:10,840
attacker to completely compromise a.m.

339
00:22:06,750 --> 00:22:14,250
the first example is Ruby console it was

340
00:22:10,840 --> 00:22:17,889
to execute up to Ruby scripts on here

341
00:22:14,250 --> 00:22:21,280
the problem is that it does doesn't have

342
00:22:17,890 --> 00:22:23,680
any authentication if you can bypass M

343
00:22:21,280 --> 00:22:26,110
dispatcher and access servlet that

344
00:22:23,680 --> 00:22:29,350
really console exposes you can run

345
00:22:26,110 --> 00:22:31,990
arbitrary code on air I have doubts that

346
00:22:29,350 --> 00:22:35,379
this bundle is intended for production

347
00:22:31,990 --> 00:22:42,130
environment however I quite often see it

348
00:22:35,380 --> 00:22:44,760
on popular sites sublet is located at

349
00:22:42,130 --> 00:22:48,550
the following password

350
00:22:44,760 --> 00:22:51,790
and here's example from bug bounty

351
00:22:48,550 --> 00:22:55,020
program I was able to execute up to a

352
00:22:51,790 --> 00:23:01,060
shell commands by sending post requests

353
00:22:55,020 --> 00:23:06,160
without any education the second example

354
00:23:01,060 --> 00:23:10,450
is a CSA M tools bundle it exposes

355
00:23:06,160 --> 00:23:15,220
fiddle that allows to execute scripts of

356
00:23:10,450 --> 00:23:19,570
different formats including JSP it may

357
00:23:15,220 --> 00:23:22,480
or may not require authentication here

358
00:23:19,570 --> 00:23:27,060
is the example of how you can execute

359
00:23:22,480 --> 00:23:27,060
JSP scripts using the Phaedo

360
00:23:28,660 --> 00:23:36,879
now let's observe what can you do with

361
00:23:31,930 --> 00:23:39,279
different levels of access to a.m.

362
00:23:36,879 --> 00:23:43,120
if you have credentials falls on user

363
00:23:39,279 --> 00:23:46,419
you can get RC or completely deface site

364
00:23:43,120 --> 00:23:51,789
or get persistent accessories it depends

365
00:23:46,419 --> 00:23:55,179
on access level you have how can you get

366
00:23:51,789 --> 00:23:58,840
the credentials in there are built-in

367
00:23:55,179 --> 00:24:02,679
users with default credentials admin and

368
00:23:58,840 --> 00:24:06,158
also are two of them sometimes you can

369
00:24:02,679 --> 00:24:10,419
find am web apps where the of

370
00:24:06,159 --> 00:24:12,610
credentials are much not changed you can

371
00:24:10,419 --> 00:24:17,639
also try to get the credentials where

372
00:24:12,610 --> 00:24:17,639
brute force attack working for us

373
00:24:18,869 --> 00:24:26,580
protection you can easily grab values

374
00:24:23,470 --> 00:24:31,629
names from properties of discharge notes

375
00:24:26,580 --> 00:24:33,939
notes usually have such properties as

376
00:24:31,629 --> 00:24:40,178
you see are created by GC our last

377
00:24:33,940 --> 00:24:43,289
modified by let's contain user names if

378
00:24:40,179 --> 00:24:47,110
you have credentials of previous user

379
00:24:43,289 --> 00:24:53,919
you can get RC there are several

380
00:24:47,110 --> 00:24:56,889
possibilities for access to felix

381
00:24:53,919 --> 00:25:02,409
console you can upload osj bundle and

382
00:24:56,889 --> 00:25:06,699
get our see here is the example from

383
00:25:02,409 --> 00:25:10,029
adobe immediately first using now login

384
00:25:06,700 --> 00:25:13,629
status so late I checked that admin

385
00:25:10,029 --> 00:25:18,009
admin credentials are valid then I

386
00:25:13,629 --> 00:25:20,259
specified much and replace roof over I

387
00:25:18,009 --> 00:25:23,320
did it just for convenience

388
00:25:20,259 --> 00:25:27,909
first rule it's a physician header to

389
00:25:23,320 --> 00:25:32,350
request and the second rule is for am

390
00:25:27,909 --> 00:25:36,249
dispatching by bus on the third step I

391
00:25:32,350 --> 00:25:43,330
uploaded was je bundle by exception past

392
00:25:36,249 --> 00:25:46,740
system console bundles there are the

393
00:25:43,330 --> 00:25:49,470
possibility is to use link scripting

394
00:25:46,740 --> 00:25:52,980
when Felix console is

395
00:25:49,470 --> 00:25:56,549
accessible you should create child's not

396
00:25:52,980 --> 00:25:59,220
of apps not and apologies in script to

397
00:25:56,549 --> 00:26:02,220
it there are several options to do it

398
00:25:59,220 --> 00:26:04,679
you can use sling for servlet Falls of

399
00:26:02,220 --> 00:26:07,890
case and my script

400
00:26:04,679 --> 00:26:10,799
our seasoning screen dot Sh

401
00:26:07,890 --> 00:26:16,710
from am hacker toolset automates this

402
00:26:10,799 --> 00:26:23,158
process if web draft is enabled in a.m.

403
00:26:16,710 --> 00:26:25,770
you can do that stuff using web dev if

404
00:26:23,159 --> 00:26:28,289
you have access as author user you can

405
00:26:25,770 --> 00:26:31,918
create new content modify or delete

406
00:26:28,289 --> 00:26:39,658
existing you can completely deface the

407
00:26:31,919 --> 00:26:42,980
site user you can manipulate content

408
00:26:39,659 --> 00:26:46,799
with sling post servlet

409
00:26:42,980 --> 00:26:51,270
or you can manipulate content for web

410
00:26:46,799 --> 00:26:56,668
dev if web dev is enabled for example

411
00:26:51,270 --> 00:27:00,450
you can use C rigs G light console that

412
00:26:56,669 --> 00:27:06,980
should be available at past Eric's G

413
00:27:00,450 --> 00:27:11,690
index doji's beam with credentials of

414
00:27:06,980 --> 00:27:15,570
unprivileged user you can try to find

415
00:27:11,690 --> 00:27:21,090
using query builder servlets what not

416
00:27:15,570 --> 00:27:24,450
are accessible to you for writing there

417
00:27:21,090 --> 00:27:28,860
is special are predicate with name has

418
00:27:24,450 --> 00:27:31,620
permission for that purpose after

419
00:27:28,860 --> 00:27:35,250
finding a suitable not you can try to

420
00:27:31,620 --> 00:27:41,879
modify existing or create in control

421
00:27:35,250 --> 00:27:45,929
content to get an XSS with anonymous

422
00:27:41,880 --> 00:27:49,200
user access you see similarly I can try

423
00:27:45,929 --> 00:27:51,900
to find notes in JCR for which you can

424
00:27:49,200 --> 00:27:55,200
add child nodes or has destroyed

425
00:27:51,900 --> 00:27:58,080
permission usually anonymous user has

426
00:27:55,200 --> 00:28:01,500
desire at a child node permission for

427
00:27:58,080 --> 00:28:02,679
content user generated not and you see

428
00:28:01,500 --> 00:28:04,980
our right

429
00:28:02,680 --> 00:28:12,730
for content user-generated its

430
00:28:04,980 --> 00:28:15,190
e-commerce smartly it's not here I want

431
00:28:12,730 --> 00:28:17,740
to share several tricks how to get

432
00:28:15,190 --> 00:28:20,860
resistant assess when you have write

433
00:28:17,740 --> 00:28:24,850
access to summaries are not the first

434
00:28:20,860 --> 00:28:27,399
one seems that you upload SVG image with

435
00:28:24,850 --> 00:28:32,379
JavaScript inside property will you or

436
00:28:27,400 --> 00:28:35,050
not it's quite widespread among M web

437
00:28:32,380 --> 00:28:39,130
apps that when you for example add slash

438
00:28:35,050 --> 00:28:42,669
a dot SVG to the URL content type of the

439
00:28:39,130 --> 00:28:47,500
response is changed to image SVG path

440
00:28:42,670 --> 00:28:52,050
XML the second trick assumes that you

441
00:28:47,500 --> 00:28:57,760
create property with name a a dot HTML

442
00:28:52,050 --> 00:29:00,520
damaged inside property trick utilizes

443
00:28:57,760 --> 00:29:03,940
ability over sling post-soviet to upload

444
00:29:00,520 --> 00:29:07,540
the file and specify mime type of the

445
00:29:03,940 --> 00:29:13,990
file let's observe examples for each

446
00:29:07,540 --> 00:29:18,250
trick I discussed here is the example

447
00:29:13,990 --> 00:29:21,370
from Twitter bug bounty I found him on

448
00:29:18,250 --> 00:29:24,850
twitter twitter comes up domain with

449
00:29:21,370 --> 00:29:28,360
accessible port soviet and due to strict

450
00:29:24,850 --> 00:29:34,120
CSP I needed to stage success payload on

451
00:29:28,360 --> 00:29:37,000
the first step I upload JavaScript on

452
00:29:34,120 --> 00:29:40,510
the second step uploaded this SVG file

453
00:29:37,000 --> 00:29:45,340
as it referenced JavaScript from step

454
00:29:40,510 --> 00:29:49,020
one later when I exist

455
00:29:45,340 --> 00:29:54,280
property of discharge node I had an XSS

456
00:29:49,020 --> 00:29:57,070
note that I edit / a dot SVG to the URL

457
00:29:54,280 --> 00:30:00,070
and as the result content type of the

458
00:29:57,070 --> 00:30:05,439
response was changed to image SVG

459
00:30:00,070 --> 00:30:08,889
plastics around next example illustrate

460
00:30:05,440 --> 00:30:12,580
second trick now I add property with

461
00:30:08,890 --> 00:30:19,510
name a dot HTML and well you I can't

462
00:30:12,580 --> 00:30:25,360
HTML now when I excess property I have

463
00:30:19,510 --> 00:30:30,158
an exercise the third trick I created

464
00:30:25,360 --> 00:30:34,408
and you not was named XSS and specified

465
00:30:30,159 --> 00:30:40,720
HTML content in GC our date parameter

466
00:30:34,409 --> 00:30:45,700
and the text HTML in GC are my 1 type

467
00:30:40,720 --> 00:30:49,440
parameter in post request when I try to

468
00:30:45,700 --> 00:30:56,529
observe you not al alert box appeared

469
00:30:49,440 --> 00:31:02,710
and we have access leaking secrets from

470
00:30:56,529 --> 00:31:06,039
GCR everything in a.m. is stored in the

471
00:31:02,710 --> 00:31:08,169
content repository that is a tree

472
00:31:06,039 --> 00:31:10,179
structure starting from the shell root

473
00:31:08,169 --> 00:31:13,539
node

474
00:31:10,179 --> 00:31:16,389
this rule also pilots all various

475
00:31:13,539 --> 00:31:19,570
secrets including passwords for

476
00:31:16,389 --> 00:31:21,969
databases or online services encryption

477
00:31:19,570 --> 00:31:24,639
keys secret tokens production

478
00:31:21,970 --> 00:31:27,279
configuration backups private

479
00:31:24,639 --> 00:31:32,439
information about users like emails from

480
00:31:27,279 --> 00:31:36,340
addresses and so on why is it possible

481
00:31:32,440 --> 00:31:38,799
to leak secrets because edmonds rely on

482
00:31:36,340 --> 00:31:44,769
a.m. dispatch and don't configure access

483
00:31:38,799 --> 00:31:47,918
controls in a Content repository for

484
00:31:44,769 --> 00:31:51,820
data exfiltration we can use built-in

485
00:31:47,919 --> 00:31:54,909
a.m. service like default get so little

486
00:31:51,820 --> 00:32:00,570
builder jason sublet query builder fit

487
00:31:54,909 --> 00:32:00,570
soviet GL search soviet and others

488
00:32:01,679 --> 00:32:08,760
default get soviet allows two edges are

489
00:32:05,049 --> 00:32:11,799
not with its properties it support

490
00:32:08,760 --> 00:32:13,799
supports various selectors and data

491
00:32:11,799 --> 00:32:17,440
formats for convenience

492
00:32:13,799 --> 00:32:21,940
select tidy allows to get formatted

493
00:32:17,440 --> 00:32:24,880
output select infinity allows to get one

494
00:32:21,940 --> 00:32:25,750
quest properties of the occurrences are

495
00:32:24,880 --> 00:32:29,290
not

496
00:32:25,750 --> 00:32:31,510
and all its children instead of infinity

497
00:32:29,290 --> 00:32:36,040
we can use numeric values that

498
00:32:31,510 --> 00:32:39,940
determines the depths - one is

499
00:32:36,040 --> 00:32:43,149
equivalent to infinity and the format

500
00:32:39,940 --> 00:32:48,390
rest allows to retrieve files that are

501
00:32:43,150 --> 00:32:52,390
normally stored inside JCR data property

502
00:32:48,390 --> 00:32:57,730
for example when we access road slash

503
00:32:52,390 --> 00:33:00,940
dot ID dot read dot JSON we are getting

504
00:32:57,730 --> 00:33:04,660
formatted Jason that contains nodes and

505
00:33:00,940 --> 00:33:11,800
their properties starting from result

506
00:33:04,660 --> 00:33:15,550
not with depth 3 you can use following

507
00:33:11,800 --> 00:33:17,879
approach for data exfiltration on the

508
00:33:15,550 --> 00:33:22,360
first step you get information about

509
00:33:17,880 --> 00:33:26,350
direct children of the CR route however

510
00:33:22,360 --> 00:33:30,219
in some cases listing for GL route is

511
00:33:26,350 --> 00:33:33,790
prohibited so you can try to guess not

512
00:33:30,220 --> 00:33:39,130
names common node names are content who

513
00:33:33,790 --> 00:33:43,180
VAR HC and on the second step you can

514
00:33:39,130 --> 00:33:47,410
start traverse GC r and dump not

515
00:33:43,180 --> 00:33:50,770
properties when depth select it out you

516
00:33:47,410 --> 00:33:57,630
can get dessert sub trees in one get

517
00:33:50,770 --> 00:34:00,700
request some common places to look into

518
00:33:57,630 --> 00:34:03,660
children nodes of HC usually contain

519
00:34:00,700 --> 00:34:07,860
various secrets the database connection

520
00:34:03,660 --> 00:34:12,450
strings with encryption keys and

521
00:34:07,860 --> 00:34:16,529
security tokens children nodes of ABS

522
00:34:12,449 --> 00:34:21,609
system config and EPS something config

523
00:34:16,530 --> 00:34:23,440
usually contain passwords children lots

524
00:34:21,610 --> 00:34:26,409
of world

525
00:34:23,440 --> 00:34:30,399
not may contain private information of

526
00:34:26,409 --> 00:34:35,440
users and children also of whom not

527
00:34:30,399 --> 00:34:39,589
contain a.m. users profiles with private

528
00:34:35,440 --> 00:34:43,168
information and hashed passwords

529
00:34:39,589 --> 00:34:45,750
normally properties like GC are created

530
00:34:43,168 --> 00:34:50,480
by Josiah last modified by a friend you

531
00:34:45,750 --> 00:34:54,030
know contain Allegan names of a.m. users

532
00:34:50,480 --> 00:34:57,359
here is the example from bug bounty

533
00:34:54,030 --> 00:35:00,300
program it was possible to pull database

534
00:34:57,359 --> 00:35:04,609
connection string and database passwords

535
00:35:00,300 --> 00:35:07,800
in clear-text text was out of Education

536
00:35:04,609 --> 00:35:12,049
this information was stored in child

537
00:35:07,800 --> 00:35:14,640
nodes of EPS redacted config note i

538
00:35:12,050 --> 00:35:21,960
bypassed a.m. dispatcher by just

539
00:35:14,640 --> 00:35:24,930
appending a /r a dot ICO to the URL here

540
00:35:21,960 --> 00:35:27,839
is another example with default get

541
00:35:24,930 --> 00:35:31,160
Soviet I was able to get private key

542
00:35:27,839 --> 00:35:36,240
from configuration for apartment module

543
00:35:31,160 --> 00:35:43,470
by navigating to this monkey realm are

544
00:35:36,240 --> 00:35:45,720
marked read query builder adjacent

545
00:35:43,470 --> 00:35:48,839
Soviet and query builder feed servlet

546
00:35:45,720 --> 00:35:51,810
allow to search things in GC are using

547
00:35:48,839 --> 00:35:54,450
various predicates link shown on the

548
00:35:51,810 --> 00:35:58,109
slide describes all supported predicates

549
00:35:54,450 --> 00:36:00,509
and details query builder jason soviets

550
00:35:58,109 --> 00:36:04,140
returns information about discharge

551
00:36:00,510 --> 00:36:07,020
notes and their properties query builder

552
00:36:04,140 --> 00:36:10,920
fit servlet returns information about GC

553
00:36:07,020 --> 00:36:13,259
are not smut no properties but nevermind

554
00:36:10,920 --> 00:36:18,349
in some cases we can achieve not

555
00:36:13,260 --> 00:36:18,349
properties through Lyon binary search on

556
00:36:19,010 --> 00:36:25,140
the slide I collected searches that

557
00:36:22,710 --> 00:36:31,500
often rescue me and give me security

558
00:36:25,140 --> 00:36:35,150
bugs let's proceed with examples

559
00:36:31,500 --> 00:36:38,339
this search gave me a path to zip

560
00:36:35,150 --> 00:36:42,720
archive with production configuration of

561
00:36:38,339 --> 00:36:48,480
am instances I was able to download this

562
00:36:42,720 --> 00:36:50,209
archive and configuration for remark

563
00:36:48,480 --> 00:36:54,970
I've included

564
00:36:50,210 --> 00:36:54,970
passwords for various networks

565
00:36:56,990 --> 00:37:03,609
this search gave me access to am uses

566
00:37:00,350 --> 00:37:13,549
profiles with sam'l tokens and hashed

567
00:37:03,610 --> 00:37:15,710
passwords this search allowed me to get

568
00:37:13,550 --> 00:37:22,070
database connection strings with

569
00:37:15,710 --> 00:37:24,830
passwords in clear-text last example

570
00:37:22,070 --> 00:37:27,280
with his permission a predicate I was

571
00:37:24,830 --> 00:37:32,750
able to figure out what you see are not

572
00:37:27,280 --> 00:37:35,930
writable by animus user later I was able

573
00:37:32,750 --> 00:37:41,960
to upload HTML file and go to system

574
00:37:35,930 --> 00:37:44,210
success let's look at several site

575
00:37:41,960 --> 00:37:50,960
request forgery vulnerabilities and the

576
00:37:44,210 --> 00:37:54,050
exploitation in am details of a self

577
00:37:50,960 --> 00:37:56,150
owner ability in OpenSocial shindig

578
00:37:54,050 --> 00:38:00,260
proxy had been publicly known for

579
00:37:56,150 --> 00:38:06,860
several years you can find blog post by

580
00:38:00,260 --> 00:38:11,210
Peter Atkins from 2016 that mentioned

581
00:38:06,860 --> 00:38:13,760
this vulnerability it allows to some get

582
00:38:11,210 --> 00:38:17,110
request to another to be real and see

583
00:38:13,760 --> 00:38:19,610
full response it's suitable for

584
00:38:17,110 --> 00:38:22,180
exfiltrating secrets from internal

585
00:38:19,610 --> 00:38:28,210
network services for example from

586
00:38:22,180 --> 00:38:31,029
metadata service in AWS it also allows

587
00:38:28,210 --> 00:38:33,710
to bypass in dispatcher and before

588
00:38:31,030 --> 00:38:39,860
secrets exfiltration using default get

589
00:38:33,710 --> 00:38:42,230
servlet oak very builder servlet and at

590
00:38:39,860 --> 00:38:45,500
the very least we can exploit a seraph

591
00:38:42,230 --> 00:38:51,980
as reflected XSS that last to my path

592
00:38:45,500 --> 00:38:54,410
exists filters in browsers here is the

593
00:38:51,980 --> 00:38:56,300
example from bug bounty program by

594
00:38:54,410 --> 00:39:00,529
exploiting server site request forgery

595
00:38:56,300 --> 00:39:03,420
and of social proxy I was able to access

596
00:39:00,530 --> 00:39:07,220
network service on localhost port

597
00:39:03,420 --> 00:39:10,559
dat that allowed me to read local files

598
00:39:07,220 --> 00:39:17,308
on the screenshot I demonstrated how I

599
00:39:10,559 --> 00:39:20,010
was able to reach errorlog a Seraphin

600
00:39:17,309 --> 00:39:22,349
reporting services proxy servlet is

601
00:39:20,010 --> 00:39:23,309
similar to what we have discussed

602
00:39:22,349 --> 00:39:26,130
previously

603
00:39:23,309 --> 00:39:28,920
I discovered this vulnerability in

604
00:39:26,130 --> 00:39:32,549
twenty twenty eighteen and it will be a

605
00:39:28,920 --> 00:39:35,549
sciencv ready for it it allows tools and

606
00:39:32,549 --> 00:39:40,440
get request to a number to URL and see

607
00:39:35,549 --> 00:39:43,349
the full response here is an example

608
00:39:40,440 --> 00:39:47,700
from bug bounty program I was able to

609
00:39:43,349 --> 00:39:50,180
read a raw credentials from metadata

610
00:39:47,700 --> 00:39:50,180
service

611
00:39:51,589 --> 00:39:58,529
another example shows how to bypass a

612
00:39:55,680 --> 00:40:01,828
dispatcher and exfiltrate secrets using

613
00:39:58,530 --> 00:40:05,970
default get sublet Here I am publish

614
00:40:01,829 --> 00:40:13,829
instance is running on localhost port 45

615
00:40:05,970 --> 00:40:18,118
of 3 this Seraph was found by me as well

616
00:40:13,829 --> 00:40:20,730
Dobis on cid free with a seraph in

617
00:40:18,119 --> 00:40:22,829
salesforce sequence over it we can send

618
00:40:20,730 --> 00:40:27,480
post requests to an arbitrary violence

619
00:40:22,829 --> 00:40:29,760
is a full response if internal network

620
00:40:27,480 --> 00:40:34,530
service does not differ differentiate

621
00:40:29,760 --> 00:40:36,750
between post and get requests we able to

622
00:40:34,530 --> 00:40:39,930
exfiltrate secrets from such sources and

623
00:40:36,750 --> 00:40:43,470
this is true for metadata services in

624
00:40:39,930 --> 00:40:46,830
cloud providers and of course that were

625
00:40:43,470 --> 00:40:48,379
released we cannot prove the service

626
00:40:46,830 --> 00:40:52,680
[Music]

627
00:40:48,380 --> 00:40:55,200
here is the example from Adobe BGP I was

628
00:40:52,680 --> 00:41:01,259
able to get credentials for the Amaral

629
00:40:55,200 --> 00:41:03,569
using a server and an example where I

630
00:41:01,260 --> 00:41:06,380
exploded as sheriff as

631
00:41:03,569 --> 00:41:06,380
XSS

632
00:41:08,880 --> 00:41:14,759
Seraph insight catalyst servlet allows

633
00:41:11,849 --> 00:41:20,369
tools and post requests without seeing

634
00:41:14,759 --> 00:41:23,009
the response to an arbitrary URL but we

635
00:41:20,369 --> 00:41:27,140
can send arbitrary headers in an HTTP

636
00:41:23,009 --> 00:41:30,029
request using a crlf or CR injection

637
00:41:27,140 --> 00:41:32,970
when specific a.m. version and

638
00:41:30,029 --> 00:41:37,220
application server server I used weekend

639
00:41:32,970 --> 00:41:37,220
she remote code execution from a seraph

640
00:41:37,729 --> 00:41:44,129
we can see that vulnerable parameter is

641
00:41:41,400 --> 00:41:46,890
data center are through sheriff

642
00:41:44,130 --> 00:41:49,979
injection in user name parameter we can

643
00:41:46,890 --> 00:41:55,140
send arbitrary headers headers in the

644
00:41:49,979 --> 00:41:57,509
request as the ref in auto provision

645
00:41:55,140 --> 00:42:01,920
Soviet is similar to a seraph inside

646
00:41:57,509 --> 00:42:04,349
catalyst soviet when there is a little

647
00:42:01,920 --> 00:42:06,960
difference with auto provisions so that

648
00:42:04,349 --> 00:42:10,710
we should send post request instead of

649
00:42:06,960 --> 00:42:14,029
yet to drill yourself vulnerable

650
00:42:10,710 --> 00:42:16,739
parameter is analytics not server

651
00:42:14,029 --> 00:42:19,319
assholes are laugh injection in

652
00:42:16,739 --> 00:42:23,119
analytics not user name parameter we can

653
00:42:19,319 --> 00:42:28,140
send our two headers in the request I

654
00:42:23,119 --> 00:42:31,499
was able to exclude a seraph to our C in

655
00:42:28,140 --> 00:42:34,489
am 6.2 which stopped to work when I

656
00:42:31,499 --> 00:42:36,629
install sieve is fixed Spock

657
00:42:34,489 --> 00:42:39,059
exploitation also requires JT

658
00:42:36,630 --> 00:42:42,029
application so but it's a default option

659
00:42:39,059 --> 00:42:44,640
for a.m. you can use tools from him

660
00:42:42,029 --> 00:42:54,059
rocket also to check if it's possible

661
00:42:44,640 --> 00:42:55,540
now let's see how it works in action so

662
00:42:54,059 --> 00:42:58,090
first time

663
00:42:55,540 --> 00:43:00,990
that RC not does not exist in this car

664
00:42:58,090 --> 00:43:03,150
it doesn't exist

665
00:43:00,990 --> 00:43:08,259
[Music]

666
00:43:03,150 --> 00:43:13,810
next time running tail command to see

667
00:43:08,260 --> 00:43:22,720
the request in excess lock now I know I

668
00:43:13,810 --> 00:43:28,029
get to this monk URL and the next slope

669
00:43:22,720 --> 00:43:31,359
who is he that would request to topology

670
00:43:28,030 --> 00:43:36,130
connector was successful now we can

671
00:43:31,360 --> 00:43:55,990
launch am server and wait for

672
00:43:36,130 --> 00:43:59,590
connections from outside we see the

673
00:43:55,990 --> 00:44:05,500
connection reverse replication process

674
00:43:59,590 --> 00:44:09,030
kicks in and we should see that not RC

675
00:44:05,500 --> 00:44:16,960
naught in this air was created by

676
00:44:09,030 --> 00:44:31,470
replication agent it was created and we

677
00:44:16,960 --> 00:44:31,470
can access our shell now yeah it works

678
00:44:37,020 --> 00:44:44,410
some old tricks as they can be relevant

679
00:44:40,990 --> 00:44:49,180
today if you find suddenly old a.m.

680
00:44:44,410 --> 00:44:51,640
version one of them is joie de

681
00:44:49,180 --> 00:44:55,750
civilisation bark in external job of

682
00:44:51,640 --> 00:44:58,690
Soviet soul takes file parameter from

683
00:44:55,750 --> 00:45:02,350
HTTP request and passes it to object

684
00:44:58,690 --> 00:45:06,630
input stream read of control and we have

685
00:45:02,350 --> 00:45:06,630
classical Javanese realization nation

686
00:45:07,590 --> 00:45:15,130
we hear we generate the civilization

687
00:45:10,960 --> 00:45:21,220
payload that should consume the memory

688
00:45:15,130 --> 00:45:25,450
space in Java he we sent our payload and

689
00:45:21,220 --> 00:45:28,180
see there that tell us that there is a

690
00:45:25,450 --> 00:45:35,649
problem with Java he failed to LK to

691
00:45:28,180 --> 00:45:39,210
quite memory another thing I think is xx

692
00:45:35,650 --> 00:45:42,760
he smokes general entity vulnerability

693
00:45:39,210 --> 00:45:48,250
in web dolphin fermentation I discovered

694
00:45:42,760 --> 00:45:53,110
Merkel in 2015 you can exploit it even

695
00:45:48,250 --> 00:45:57,040
prevent group budgeting equal you can

696
00:45:53,110 --> 00:45:59,770
quickly spot if web dev is enabled by

697
00:45:57,040 --> 00:46:05,820
sending optional option to request only

698
00:45:59,770 --> 00:46:05,820
can get request to pass CRX positive

699
00:46:05,940 --> 00:46:12,810
let's explore several cases for

700
00:46:08,710 --> 00:46:17,440
reflected XSS vulnerabilities in am

701
00:46:12,810 --> 00:46:22,299
there are several exercises in SPF files

702
00:46:17,440 --> 00:46:25,770
the world by France frozen we see M

703
00:46:22,300 --> 00:46:29,080
debug field had an XSS vulnerability

704
00:46:25,770 --> 00:46:33,600
previously additionally plenty of

705
00:46:29,080 --> 00:46:37,360
built-in so let's see on escaped HTML

706
00:46:33,600 --> 00:46:42,330
from users input in a JSON response and

707
00:46:37,360 --> 00:46:45,640
you can get reflected XSS for example a

708
00:46:42,330 --> 00:46:48,340
suggestion hello select is suitable for

709
00:46:45,640 --> 00:46:52,089
that it takes parameter with named

710
00:46:48,340 --> 00:46:54,240
prayer and returns its content back in

711
00:46:52,090 --> 00:46:57,520
JSON structure without escaping

712
00:46:54,240 --> 00:46:59,709
sometimes you can manipulate the content

713
00:46:57,520 --> 00:47:00,640
type header of the response by adding

714
00:46:59,710 --> 00:47:05,950
for example

715
00:47:00,640 --> 00:47:08,500
slash a dot HTML to the past 0 let's

716
00:47:05,950 --> 00:47:12,279
observe examples here you can see if

717
00:47:08,500 --> 00:47:16,660
they're based access in a video player

718
00:47:12,280 --> 00:47:18,890
notice here well here you can see

719
00:47:16,660 --> 00:47:23,839
example of XSS why

720
00:47:18,890 --> 00:47:27,410
vulnerable elysium debug filter and

721
00:47:23,840 --> 00:47:31,250
final example with suggestion handler

722
00:47:27,410 --> 00:47:36,710
servlet aging slash a dot HTM to the

723
00:47:31,250 --> 00:47:39,740
passport some proxies to change content

724
00:47:36,710 --> 00:47:44,600
type to text HTML and we have an

725
00:47:39,740 --> 00:47:46,759
exercise application level general

726
00:47:44,600 --> 00:47:49,779
service attacks are quite easy to

727
00:47:46,760 --> 00:47:53,180
implement against I am web applications

728
00:47:49,780 --> 00:47:55,370
you can create notable load on am

729
00:47:53,180 --> 00:47:58,069
instance by submitting these simple

730
00:47:55,370 --> 00:48:01,609
requests and some programs

731
00:47:58,070 --> 00:48:05,630
luckily accept application levels in our

732
00:48:01,610 --> 00:48:09,440
service divisions let's look at example

733
00:48:05,630 --> 00:48:14,180
it's in response to this simple get

734
00:48:09,440 --> 00:48:19,730
request I received big JSON 700

735
00:48:14,180 --> 00:48:23,690
megabytes it took took 6 mins from the

736
00:48:19,730 --> 00:48:25,850
server to return the response and I want

737
00:48:23,690 --> 00:48:28,910
to mention that this JSON is not a

738
00:48:25,850 --> 00:48:35,930
static file it's generated on the fly by

739
00:48:28,910 --> 00:48:39,350
x3 servlet in a.m. and in conclusion I'd

740
00:48:35,930 --> 00:48:40,700
like to say that a target is a gold mine

741
00:48:39,350 --> 00:48:43,220
for a buck hunter

742
00:48:40,700 --> 00:48:48,830
I hope my research will be helpful for

743
00:48:43,220 --> 00:48:52,879
the bug hunting community and what I

744
00:48:48,830 --> 00:48:56,930
want to say thank you to a crowd for

745
00:48:52,880 --> 00:48:59,110
organizing this wonderful event thank

746
00:48:56,930 --> 00:48:59,109
you

