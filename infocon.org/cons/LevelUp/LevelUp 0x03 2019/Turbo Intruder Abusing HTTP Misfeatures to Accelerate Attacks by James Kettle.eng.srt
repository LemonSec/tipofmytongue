1
00:00:05,350 --> 00:00:10,260
we setting good afternoon or evening or

2
00:00:08,680 --> 00:00:13,420
whatever time it is where you are and

3
00:00:10,260 --> 00:00:15,250
welcome to turbo in intruder abusing

4
00:00:13,420 --> 00:00:18,369
Haiti to be miss features to accelerate

5
00:00:15,250 --> 00:00:21,220
attacks last time that you made a

6
00:00:18,369 --> 00:00:24,759
serious effort to hack into a website I

7
00:00:21,220 --> 00:00:26,590
wonder how many requests did you send in

8
00:00:24,759 --> 00:00:29,050
between pollute forcing files and

9
00:00:26,590 --> 00:00:31,869
folders and usernames and passwords and

10
00:00:29,050 --> 00:00:34,360
maybe even virtual hosts you probably

11
00:00:31,869 --> 00:00:36,309
spent quite a long time configuring and

12
00:00:34,360 --> 00:00:39,129
running brute-force attacks and probably

13
00:00:36,309 --> 00:00:43,839
spit sent quite a few requests in the

14
00:00:39,130 --> 00:00:45,400
process and I do too but every time I

15
00:00:43,840 --> 00:00:47,110
stopped an attack I find myself

16
00:00:45,400 --> 00:00:49,300
wondering if I'd left that attack

17
00:00:47,110 --> 00:00:52,360
running for a few more minutes if I just

18
00:00:49,300 --> 00:00:54,160
sent an extra few thousand requests what

19
00:00:52,360 --> 00:00:56,050
I have found something crucial what I

20
00:00:54,160 --> 00:00:57,730
found that incredible file that was

21
00:00:56,050 --> 00:01:01,239
basically just a backdoor to the server

22
00:00:57,730 --> 00:01:03,790
or perhaps if I just sent my requests an

23
00:01:01,239 --> 00:01:05,829
extra 20 percent faster maybe the server

24
00:01:03,790 --> 00:01:07,720
would have just gone crazy and started

25
00:01:05,829 --> 00:01:10,589
dumping access logs on memory into the

26
00:01:07,720 --> 00:01:13,870
response for me like this one here and

27
00:01:10,590 --> 00:01:15,970
I'll never know but in this session I'm

28
00:01:13,870 --> 00:01:18,460
gonna introduce a tool designed to solve

29
00:01:15,970 --> 00:01:21,280
a brute-force problems by using a custom

30
00:01:18,460 --> 00:01:25,570
HTTP stack designed to send requests as

31
00:01:21,280 --> 00:01:27,640
fast as possible first of all I'm going

32
00:01:25,570 --> 00:01:29,649
to talk about what makes turbo intruder

33
00:01:27,640 --> 00:01:33,010
so fast and how you can make your own

34
00:01:29,650 --> 00:01:34,900
tooling equally fast if you want to then

35
00:01:33,010 --> 00:01:36,909
I'll do a live demo on how to use it

36
00:01:34,900 --> 00:01:38,549
which hopefully won't have any side

37
00:01:36,909 --> 00:01:41,049
effects on the live stream performance

38
00:01:38,549 --> 00:01:42,760
and then I'll talk about some of the

39
00:01:41,049 --> 00:01:45,010
other cool features that turbo intruder

40
00:01:42,760 --> 00:01:47,229
has other than simply running really

41
00:01:45,010 --> 00:01:49,510
quickly and after that I'll hopefully

42
00:01:47,229 --> 00:01:51,060
have time to answer maybe ten minutes of

43
00:01:49,510 --> 00:01:54,820
questions

44
00:01:51,060 --> 00:01:56,890
so traditionally tools designed for

45
00:01:54,820 --> 00:01:59,529
brute force have focused on achievement

46
00:01:56,890 --> 00:02:02,500
speeds through having tons and tons of

47
00:01:59,530 --> 00:02:05,229
concurrent T's TCP connections and

48
00:02:02,500 --> 00:02:07,990
originally this was done by having loads

49
00:02:05,229 --> 00:02:09,580
of threads but more recently you'll see

50
00:02:07,990 --> 00:02:11,890
some of these tools using asynchronous

51
00:02:09,580 --> 00:02:14,560
network stacks so that means they aren't

52
00:02:11,890 --> 00:02:16,988
putting so much load on your CPU with

53
00:02:14,560 --> 00:02:18,970
tons of threads but they're still

54
00:02:16,989 --> 00:02:20,860
running through what's fundamentally its

55
00:02:18,970 --> 00:02:24,910
same process which is they spend ages

56
00:02:20,860 --> 00:02:27,070
doing this TCP and TLS handshake before

57
00:02:24,910 --> 00:02:30,130
sending their requests and reading in

58
00:02:27,070 --> 00:02:32,650
the response now this approach is

59
00:02:30,130 --> 00:02:34,359
incredibly wasteful of time and

60
00:02:32,650 --> 00:02:36,640
bandwidth and actively creates

61
00:02:34,360 --> 00:02:39,250
bottlenecks that don't even need to

62
00:02:36,640 --> 00:02:41,709
exist so what I'm gonna do is I'm gonna

63
00:02:39,250 --> 00:02:43,930
kind of zoom in and focus on getting the

64
00:02:41,710 --> 00:02:46,630
best possible performance with one

65
00:02:43,930 --> 00:02:50,320
concurrent connection and and then scale

66
00:02:46,630 --> 00:02:53,709
up the number of threads later on now is

67
00:02:50,320 --> 00:02:54,310
anyone familiar with web security Skyler

68
00:02:53,709 --> 00:02:57,370
called

69
00:02:54,310 --> 00:03:00,280
skip finish it's a few years old but

70
00:02:57,370 --> 00:03:03,430
well if you've ever used it you will

71
00:03:00,280 --> 00:03:05,320
know this tool is ridiculously fast I

72
00:03:03,430 --> 00:03:06,850
have the first time I ever run it it

73
00:03:05,320 --> 00:03:11,290
just took out the server almost

74
00:03:06,850 --> 00:03:13,359
instantly it was amazing and skip which

75
00:03:11,290 --> 00:03:15,549
is what inspired turbo intruder because

76
00:03:13,360 --> 00:03:18,390
it proved that things could go so much

77
00:03:15,550 --> 00:03:20,650
faster than how fast most tools run and

78
00:03:18,390 --> 00:03:24,040
originally I thought okay skip which is

79
00:03:20,650 --> 00:03:27,700
so fast because it's written in C by L

80
00:03:24,040 --> 00:03:30,010
come tough and that is part of the

81
00:03:27,700 --> 00:03:32,018
reason why it's so fast but I dug into

82
00:03:30,010 --> 00:03:35,980
it and it looks like the core is that

83
00:03:32,019 --> 00:03:38,200
skip fish reuses connections just like

84
00:03:35,980 --> 00:03:40,959
web browsers do so rather than doing one

85
00:03:38,200 --> 00:03:42,760
TCP and TLS handshake per request it

86
00:03:40,959 --> 00:03:46,390
will do the handshake once and then send

87
00:03:42,760 --> 00:03:49,149
as many requests as possible over that

88
00:03:46,390 --> 00:03:51,820
connection which vastly reduced s-- the

89
00:03:49,150 --> 00:03:54,459
bottlenecks and with a single thread

90
00:03:51,820 --> 00:03:58,380
that leads to a roughly 400 percent

91
00:03:54,459 --> 00:04:02,890
speed increase over the normal approach

92
00:03:58,380 --> 00:04:05,470
so that's why skip fish is so fast and

93
00:04:02,890 --> 00:04:07,630
the very first version of turbo intruder

94
00:04:05,470 --> 00:04:10,150
was simply a hacked version of skip

95
00:04:07,630 --> 00:04:12,820
she's cut but then I found something

96
00:04:10,150 --> 00:04:15,340
that let me make turbo and shooter even

97
00:04:12,820 --> 00:04:19,000
faster and that is an old-school

98
00:04:15,340 --> 00:04:21,970
technology called HTTP pipelining now

99
00:04:19,000 --> 00:04:25,479
HTTP pipelining is not used by any

100
00:04:21,970 --> 00:04:27,640
modern browsers as far as I'm aware but

101
00:04:25,479 --> 00:04:31,539
it is supported by the majority of

102
00:04:27,640 --> 00:04:32,830
service and it's it works roughly the

103
00:04:31,539 --> 00:04:35,229
same as

104
00:04:32,830 --> 00:04:36,969
as her skip fish where you just send

105
00:04:35,229 --> 00:04:38,800
lots of requests over the sent over the

106
00:04:36,970 --> 00:04:40,449
same connection but instead of sending

107
00:04:38,800 --> 00:04:43,240
one and then immediately reading the

108
00:04:40,449 --> 00:04:45,940
response you send all of your requests

109
00:04:43,240 --> 00:04:49,720
back-to-back before you bother reading

110
00:04:45,940 --> 00:04:52,629
in in any responses and that has the

111
00:04:49,720 --> 00:04:54,879
effect of greatly minimizing the effect

112
00:04:52,629 --> 00:04:57,699
of latency and server processing time on

113
00:04:54,879 --> 00:05:01,180
how quickly you can send your requests

114
00:04:57,699 --> 00:05:06,060
so it almost makes it like running a

115
00:05:01,180 --> 00:05:08,800
brute-force attack on a local server and

116
00:05:06,060 --> 00:05:10,770
using this technique with turbo intruder

117
00:05:08,800 --> 00:05:15,370
with a single thread I was able to get a

118
00:05:10,770 --> 00:05:19,120
6000 percent speed increase compared to

119
00:05:15,370 --> 00:05:21,969
the original technique and this is so

120
00:05:19,120 --> 00:05:23,949
fast that it puts us in a really great

121
00:05:21,969 --> 00:05:26,349
situation where the number of concurrent

122
00:05:23,949 --> 00:05:28,629
connections that we have lined like the

123
00:05:26,349 --> 00:05:30,750
number of threads is no longer the

124
00:05:28,629 --> 00:05:33,849
bottleneck for how fast we can run and

125
00:05:30,750 --> 00:05:36,039
that's wonderful because multiple

126
00:05:33,849 --> 00:05:38,229
servers and firewalls implement rate

127
00:05:36,039 --> 00:05:41,169
limiting by constraining the number of

128
00:05:38,229 --> 00:05:43,630
concurrent connections but we can using

129
00:05:41,169 --> 00:05:49,150
a tiny number of connections still send

130
00:05:43,630 --> 00:05:51,990
requests really really fast so after I

131
00:05:49,150 --> 00:05:55,719
got pipelining working I always like

132
00:05:51,990 --> 00:05:57,310
okay that's cool I wonder if I can make

133
00:05:55,719 --> 00:05:59,259
this even faster by using an

134
00:05:57,310 --> 00:06:02,169
asynchronous Network stack rather than

135
00:05:59,259 --> 00:06:03,669
threats but but for actually because

136
00:06:02,169 --> 00:06:05,378
this technique is so fast by itself

137
00:06:03,669 --> 00:06:08,318
making an asynchronous made virtually no

138
00:06:05,379 --> 00:06:12,520
difference and I also tried HTTP 2 and

139
00:06:08,319 --> 00:06:15,490
likewise HTTP 2 didn't go any faster so

140
00:06:12,520 --> 00:06:20,710
I ended up dumping that code and we're

141
00:06:15,490 --> 00:06:24,879
just using old-fashioned threats so that

142
00:06:20,710 --> 00:06:26,770
is pretty much all the theory the next

143
00:06:24,879 --> 00:06:28,750
so now let's just have a look at how

144
00:06:26,770 --> 00:06:31,000
we're going to use it first off after

145
00:06:28,750 --> 00:06:33,460
installing turbo intruder which you can

146
00:06:31,000 --> 00:06:36,009
do via the Bapst or in fact in theory

147
00:06:33,460 --> 00:06:38,680
you can do it right now on follow a lot

148
00:06:36,009 --> 00:06:41,289
hopefully any way you select where you

149
00:06:38,680 --> 00:06:43,149
want to inject it in the request and you

150
00:06:41,289 --> 00:06:46,089
right-click and click send a turbo

151
00:06:43,149 --> 00:06:46,600
intruder that will pop open a window the

152
00:06:46,089 --> 00:06:48,640
looks on the

153
00:06:46,600 --> 00:06:51,280
like this so you've got your request in

154
00:06:48,640 --> 00:06:54,849
the top half and a snippet of Python

155
00:06:51,280 --> 00:06:58,059
code in the bottom half don't panic if

156
00:06:54,850 --> 00:07:00,790
you're not too familiar with Python this

157
00:06:58,060 --> 00:07:03,550
code barely needs to be tweaked most of

158
00:07:00,790 --> 00:07:05,410
the time so you don't need great great

159
00:07:03,550 --> 00:07:09,100
Python skills to achieve whatever you

160
00:07:05,410 --> 00:07:11,290
need you might also be thinking hang on

161
00:07:09,100 --> 00:07:14,190
a second if I was if I wanted to code

162
00:07:11,290 --> 00:07:17,830
Python I just use the requests library

163
00:07:14,190 --> 00:07:19,420
but or whatever Python library you use I

164
00:07:17,830 --> 00:07:22,330
can almost guarantee it won't support

165
00:07:19,420 --> 00:07:24,370
pipelining anything even if it does

166
00:07:22,330 --> 00:07:26,830
support pipelining it certainly won't

167
00:07:24,370 --> 00:07:29,010
support sending malformed requests and

168
00:07:26,830 --> 00:07:31,630
as hackers we want to be sending

169
00:07:29,010 --> 00:07:34,539
malformed requests

170
00:07:31,630 --> 00:07:36,640
where's turbos in intruder turbo

171
00:07:34,540 --> 00:07:39,220
intruders Network stack it just uses

172
00:07:36,640 --> 00:07:43,030
sockets it's coded by me and it lets you

173
00:07:39,220 --> 00:07:45,850
do pretty much whatever you want so now

174
00:07:43,030 --> 00:07:48,429
let's take a closer look at this Python

175
00:07:45,850 --> 00:07:51,250
code to begin with we've got the code

176
00:07:48,430 --> 00:07:53,320
that sets up the networks it's a stack

177
00:07:51,250 --> 00:07:55,870
and you could leave this as is for

178
00:07:53,320 --> 00:07:58,360
almost all the time but if you want to

179
00:07:55,870 --> 00:08:00,760
get the maximum speed possible then

180
00:07:58,360 --> 00:08:02,980
you'll want to tune these parameters

181
00:08:00,760 --> 00:08:05,890
here so I'm going to demo that shortly

182
00:08:02,980 --> 00:08:08,680
after that you'll want to start the

183
00:08:05,890 --> 00:08:11,169
engine and open your word list and start

184
00:08:08,680 --> 00:08:13,000
queuing up your requests now because

185
00:08:11,170 --> 00:08:15,660
we're starting the engine and then

186
00:08:13,000 --> 00:08:18,490
queuing the requests this is a streaming

187
00:08:15,660 --> 00:08:19,950
attack which means it's pretty low on

188
00:08:18,490 --> 00:08:23,320
memory usage too

189
00:08:19,950 --> 00:08:27,640
the final thing that we need to code is

190
00:08:23,320 --> 00:08:30,909
the mishandle response function so in

191
00:08:27,640 --> 00:08:33,760
burps normal intruder every response

192
00:08:30,910 --> 00:08:36,550
that you get from the server gets put in

193
00:08:33,760 --> 00:08:39,069
a giant table and this approach isn't

194
00:08:36,549 --> 00:08:42,130
really plausible for turbo intruder

195
00:08:39,070 --> 00:08:44,380
because at the speeds that turbo

196
00:08:42,130 --> 00:08:46,240
intruder runs the table will get

197
00:08:44,380 --> 00:08:49,330
ridiculously large and you'll run out of

198
00:08:46,240 --> 00:08:51,580
memory really quickly so instead I've

199
00:08:49,330 --> 00:08:54,400
made this handle handle response

200
00:08:51,580 --> 00:08:56,860
function which is a callback which gets

201
00:08:54,400 --> 00:08:59,400
invoked every time that you get a

202
00:08:56,860 --> 00:09:02,400
response from the server

203
00:08:59,400 --> 00:09:04,410
and in this you can write a tiny snippet

204
00:09:02,400 --> 00:09:07,020
of code to decide whether this

205
00:09:04,410 --> 00:09:12,300
particular response deserves to be added

206
00:09:07,020 --> 00:09:15,930
into the table or not so here's a

207
00:09:12,300 --> 00:09:19,890
screenshot of an attack run on a home

208
00:09:15,930 --> 00:09:22,349
computer with a normal residential voter

209
00:09:19,890 --> 00:09:25,860
just like the the rubbish one that BT

210
00:09:22,350 --> 00:09:29,910
sends you attacking an internet server

211
00:09:25,860 --> 00:09:32,430
sending HTTP requests if you look at the

212
00:09:29,910 --> 00:09:34,980
status bar you can see this attack has

213
00:09:32,430 --> 00:09:39,449
been running for 17 hours I ran it

214
00:09:34,980 --> 00:09:42,210
overnight it sent an average of twenty

215
00:09:39,450 --> 00:09:44,780
two thousand five hundred requests per

216
00:09:42,210 --> 00:09:50,700
second during that time for a total of

217
00:09:44,780 --> 00:09:53,250
1.4 billion requests and fen and because

218
00:09:50,700 --> 00:09:55,290
this is a streaming attack the memory

219
00:09:53,250 --> 00:09:58,710
usage during that time is pretty much

220
00:09:55,290 --> 00:10:01,439
flat at the time I took that screenshot

221
00:09:58,710 --> 00:10:03,990
it was flat three gigabytes since then

222
00:10:01,440 --> 00:10:06,480
I've made some optimizations and with a

223
00:10:03,990 --> 00:10:11,820
bit of luck you'll find it uses about

224
00:10:06,480 --> 00:10:13,290
one gig and thanks to all of that you

225
00:10:11,820 --> 00:10:16,380
can see in the top off we've

226
00:10:13,290 --> 00:10:19,500
successfully proof forced a completely

227
00:10:16,380 --> 00:10:20,939
random seven character file which is not

228
00:10:19,500 --> 00:10:23,310
something that I think you could achieve

229
00:10:20,940 --> 00:10:28,610
with pretty much any other tool out

230
00:10:23,310 --> 00:10:32,189
there let alone in this space of time so

231
00:10:28,610 --> 00:10:34,740
let's take a closer look at this tuning

232
00:10:32,190 --> 00:10:36,450
process so now the live demo begins and

233
00:10:34,740 --> 00:10:40,020
things potentially get a little bit more

234
00:10:36,450 --> 00:10:43,970
exciting if you look at the screen you

235
00:10:40,020 --> 00:10:50,160
should now see Ferb sweet so I'm gonna

236
00:10:43,970 --> 00:10:53,550
select my injection point and right

237
00:10:50,160 --> 00:10:56,610
click and click send to turbo intruder

238
00:10:53,550 --> 00:10:59,699
and you can just see where I selected

239
00:10:56,610 --> 00:11:01,770
has been replaced with a percent s which

240
00:10:59,700 --> 00:11:05,220
is simply the injection point this is

241
00:11:01,770 --> 00:11:07,530
where the payload is going to go so I'm

242
00:11:05,220 --> 00:11:09,840
gonna start out sending the these

243
00:11:07,530 --> 00:11:13,170
requests to Hacksaw which is my game on

244
00:11:09,840 --> 00:11:16,050
the internet and sending one request per

245
00:11:13,170 --> 00:11:18,750
second per connection just like Burke

246
00:11:16,050 --> 00:11:21,810
does with one concurrent connection in

247
00:11:18,750 --> 00:11:24,269
other words one thread this is just to

248
00:11:21,810 --> 00:11:27,268
get the kind of baseline speed so you

249
00:11:24,269 --> 00:11:30,899
can see here we're doing around 18

250
00:11:27,269 --> 00:11:33,089
requests per second so now we're going

251
00:11:30,899 --> 00:11:37,769
to try and optimize these values to run

252
00:11:33,089 --> 00:11:39,899
as fast as possible first of all I'm

253
00:11:37,769 --> 00:11:43,949
going to change requests per connection

254
00:11:39,899 --> 00:11:47,100
to 200 so this is reusing their

255
00:11:43,949 --> 00:11:51,359
connection as much as possible roughly

256
00:11:47,100 --> 00:11:52,560
like what skip fish does so if I set

257
00:11:51,360 --> 00:11:55,019
this running you can see I've

258
00:11:52,560 --> 00:11:57,779
immediately jumped to 80 requests per

259
00:11:55,019 --> 00:12:00,540
second so we're running about four times

260
00:11:57,779 --> 00:12:04,339
as fast with just a single concurrent

261
00:12:00,540 --> 00:12:08,790
connection so that's kind of cool right

262
00:12:04,339 --> 00:12:11,670
so now I'm going to try it oh yeah sorry

263
00:12:08,790 --> 00:12:13,740
one thing I meant to mention okay so

264
00:12:11,670 --> 00:12:16,769
this is doing 18 quests per second which

265
00:12:13,740 --> 00:12:19,380
is good but this reach voice count is

266
00:12:16,769 --> 00:12:21,029
slowly going up and that doesn't mean

267
00:12:19,380 --> 00:12:22,980
we're losing any requests because they

268
00:12:21,029 --> 00:12:24,839
are being retried automatically but it's

269
00:12:22,980 --> 00:12:27,480
an indication that we've set this value

270
00:12:24,839 --> 00:12:30,390
kind of too high so we're going to try

271
00:12:27,480 --> 00:12:33,089
and reduce it slightly so if I change

272
00:12:30,390 --> 00:12:36,930
this to 100 the server is going to stop

273
00:12:33,089 --> 00:12:38,670
dropping the connection and with any

274
00:12:36,930 --> 00:12:41,699
luck anyway yeah and so we've got the

275
00:12:38,670 --> 00:12:44,640
same speed but the retry count is flat

276
00:12:41,699 --> 00:12:46,589
on zero which means this attack is more

277
00:12:44,640 --> 00:12:49,500
or less optimal as far as the number of

278
00:12:46,589 --> 00:12:54,360
requests per connection good good good

279
00:12:49,500 --> 00:12:57,360
good okay okay so that's that now let's

280
00:12:54,360 --> 00:12:59,040
turn pipelining on I wonder how fast you

281
00:12:57,360 --> 00:13:01,500
think this was gonna go was doing 80

282
00:12:59,040 --> 00:13:06,240
requests per second how forces are gonna

283
00:13:01,500 --> 00:13:10,470
go now let's see shall we oh that's cool

284
00:13:06,240 --> 00:13:13,769
it's doing around about 1100 requests

285
00:13:10,470 --> 00:13:16,620
per second so it's going over 10 times

286
00:13:13,769 --> 00:13:19,610
faster than the previous technique and

287
00:13:16,620 --> 00:13:22,709
over 400 times faster than the original

288
00:13:19,610 --> 00:13:25,560
technique and as a result we've actually

289
00:13:22,709 --> 00:13:26,910
found something here our brute forces

290
00:13:25,560 --> 00:13:31,050
located

291
00:13:26,910 --> 00:13:32,760
file so that has maximized the speed per

292
00:13:31,050 --> 00:13:34,020
connection and now I'm just going to

293
00:13:32,760 --> 00:13:36,600
increase the number of concurrent

294
00:13:34,020 --> 00:13:40,980
connections now based on some testing I

295
00:13:36,600 --> 00:13:43,650
did earlier 20 is about light for this

296
00:13:40,980 --> 00:13:46,290
situation generally you're going to want

297
00:13:43,650 --> 00:13:49,560
a value in between like one and thirty

298
00:13:46,290 --> 00:13:53,040
year I think so if we set this running

299
00:13:49,560 --> 00:13:58,349
you can see we've jumped to hope around

300
00:13:53,040 --> 00:13:59,819
about 9700 requests per second I think I

301
00:13:58,350 --> 00:14:00,690
think we can do slightly better let me

302
00:13:59,820 --> 00:14:08,010
just try this again

303
00:14:00,690 --> 00:14:09,990
let me try 25 it's pretty variable you

304
00:14:08,010 --> 00:14:12,860
can see we're kind of doing we're pretty

305
00:14:09,990 --> 00:14:15,480
much doing exactly the same speed so

306
00:14:12,860 --> 00:14:17,640
10,000 requests per second is about is

307
00:14:15,480 --> 00:14:19,920
about the maximum speed that we can hear

308
00:14:17,640 --> 00:14:21,990
on this setup but that's still really

309
00:14:19,920 --> 00:14:25,439
not that bad especially bearing in mind

310
00:14:21,990 --> 00:14:28,170
these are HTTP connections and therefore

311
00:14:25,440 --> 00:14:30,360
if we leave this running for a few

312
00:14:28,170 --> 00:14:33,030
seconds then we find the final file

313
00:14:30,360 --> 00:14:35,870
which is that the end of the word list

314
00:14:33,030 --> 00:14:40,709
it means we've sent all 235 thousand

315
00:14:35,870 --> 00:14:45,840
requests in that 25 second period so

316
00:14:40,710 --> 00:14:47,370
that is the live demo that's how you

317
00:14:45,840 --> 00:14:49,040
tune it obviously if you don't need

318
00:14:47,370 --> 00:14:51,150
speed you don't need to bother tuning it

319
00:14:49,040 --> 00:14:52,199
now let's try it at the power point back

320
00:14:51,150 --> 00:14:55,620
boom

321
00:14:52,200 --> 00:14:58,770
okay so I've just been showing you how

322
00:14:55,620 --> 00:15:00,600
to do streaming attacks which are great

323
00:14:58,770 --> 00:15:02,460
for long-running attacks where you want

324
00:15:00,600 --> 00:15:05,040
a men where you want to minimize speed

325
00:15:02,460 --> 00:15:08,100
and maximize maximize speed minimize

326
00:15:05,040 --> 00:15:10,170
memory usage however if you want to find

327
00:15:08,100 --> 00:15:12,810
a race condition then a streaming attack

328
00:15:10,170 --> 00:15:15,300
is the opposite of what you want you

329
00:15:12,810 --> 00:15:18,329
want all your all your requests to hit

330
00:15:15,300 --> 00:15:19,890
the server at the same time so here you

331
00:15:18,330 --> 00:15:22,220
can see the codes changed slightly

332
00:15:19,890 --> 00:15:25,530
because I'm calling engine start

333
00:15:22,220 --> 00:15:27,690
after I'm cueing all the requests and

334
00:15:25,530 --> 00:15:30,930
the number of concurrent connections is

335
00:15:27,690 --> 00:15:33,330
equal to the number of requests that I

336
00:15:30,930 --> 00:15:35,489
am queueing it's so that means we can

337
00:15:33,330 --> 00:15:38,130
establish all those connections and then

338
00:15:35,490 --> 00:15:40,050
send all the requests at exactly the

339
00:15:38,130 --> 00:15:40,769
same time so they should hit the server

340
00:15:40,050 --> 00:15:43,920
at

341
00:15:40,769 --> 00:15:46,619
very close to the same time why might

342
00:15:43,920 --> 00:15:48,540
you want to do that well it can cause

343
00:15:46,619 --> 00:15:50,939
interesting things to happen for example

344
00:15:48,540 --> 00:15:53,849
here we're on a shopping cart on a bug

345
00:15:50,939 --> 00:15:56,790
bounty site we've got a cart total of 65

346
00:15:53,850 --> 00:15:59,160
dollars and I've got a single-use coupon

347
00:15:56,790 --> 00:16:01,649
which would give me some store credit

348
00:15:59,160 --> 00:16:04,949
but I've successfully apply this a whole

349
00:16:01,649 --> 00:16:08,610
bunch of times leading to a total

350
00:16:04,949 --> 00:16:12,329
discount of 84 dollars leading to an end

351
00:16:08,610 --> 00:16:14,249
final price of negative nineteen dollars

352
00:16:12,329 --> 00:16:19,498
so that's a pretty good turbo intruder

353
00:16:14,249 --> 00:16:23,129
discount so that is the core of what

354
00:16:19,499 --> 00:16:25,230
turbo in intruder is all about but while

355
00:16:23,129 --> 00:16:27,209
using it in my testing I found that

356
00:16:25,230 --> 00:16:30,660
making best use of it involves quite a

357
00:16:27,209 --> 00:16:32,939
few steps each of these is something

358
00:16:30,660 --> 00:16:39,089
that you have to do manually when you

359
00:16:32,939 --> 00:16:42,360
use it and I think all of these steps

360
00:16:39,089 --> 00:16:44,939
can be fully automated but to begin with

361
00:16:42,360 --> 00:16:47,569
I just picked the most annoying and

362
00:16:44,939 --> 00:16:50,670
tedious step which is coding the

363
00:16:47,569 --> 00:16:52,469
response screening function coding the

364
00:16:50,670 --> 00:16:56,309
callback to work out what should go in

365
00:16:52,470 --> 00:16:57,720
the table and what shouldn't so what

366
00:16:56,309 --> 00:16:59,219
I've done is implemented a fully

367
00:16:57,720 --> 00:17:01,529
automated solution which will basically

368
00:16:59,220 --> 00:17:04,380
handle this side of things fully

369
00:17:01,529 --> 00:17:09,270
automatically for you almost all of the

370
00:17:04,380 --> 00:17:11,189
time so if you launch turbo intruder you

371
00:17:09,270 --> 00:17:12,449
should see the default script which

372
00:17:11,189 --> 00:17:15,149
looks something like this

373
00:17:12,449 --> 00:17:17,389
and the key part is these engine dot Q

374
00:17:15,148 --> 00:17:20,010
lines in the middle that have this learn

375
00:17:17,388 --> 00:17:22,529
parameter what the learn parameter says

376
00:17:20,010 --> 00:17:25,439
is it tells turbo intruder to learn the

377
00:17:22,529 --> 00:17:29,010
response to these requests as being

378
00:17:25,439 --> 00:17:31,590
boring and if the and and if any future

379
00:17:29,010 --> 00:17:34,020
response is deemed as boring so then the

380
00:17:31,590 --> 00:17:37,158
interesting parameter in the handle

381
00:17:34,020 --> 00:17:40,679
response callback will be set to false

382
00:17:37,159 --> 00:17:43,889
so by teaching it to learn a random

383
00:17:40,679 --> 00:17:46,139
string a response is born and we have

384
00:17:43,889 --> 00:17:48,750
effectively filtering out all four four

385
00:17:46,139 --> 00:17:50,820
pages and the like without you the user

386
00:17:48,750 --> 00:17:54,120
actually happened to figure out what the

387
00:17:50,820 --> 00:17:55,770
404 page really looks like

388
00:17:54,120 --> 00:17:58,500
of course you can play with this

389
00:17:55,770 --> 00:17:59,760
yourself if you like so for example

390
00:17:58,500 --> 00:18:02,909
maybe they've got a Web Application

391
00:17:59,760 --> 00:18:06,120
Firewall and it blocks every request

392
00:18:02,909 --> 00:18:09,870
with the word admin in well you can say

393
00:18:06,120 --> 00:18:11,908
please learn the response to a block

394
00:18:09,870 --> 00:18:13,529
request as being boring and then you

395
00:18:11,909 --> 00:18:17,520
don't need to worry about it turning up

396
00:18:13,529 --> 00:18:19,200
in your table anymore so this is

397
00:18:17,520 --> 00:18:21,389
completely generic code which you

398
00:18:19,200 --> 00:18:24,750
generally shouldn't have to change and

399
00:18:21,390 --> 00:18:26,899
the end result is with no work you get

400
00:18:24,750 --> 00:18:30,990
automatic free handling of stuff like

401
00:18:26,899 --> 00:18:33,418
custom 404 pages and not only that but

402
00:18:30,990 --> 00:18:35,130
in numerating basically anything even if

403
00:18:33,419 --> 00:18:38,340
it's a user name or host or cookie

404
00:18:35,130 --> 00:18:40,169
header file folder or vote basically as

405
00:18:38,340 --> 00:18:42,090
long as the valid value gives you a

406
00:18:40,169 --> 00:18:43,890
significantly different response from an

407
00:18:42,090 --> 00:18:45,720
invalid one then turbo entry will

408
00:18:43,890 --> 00:18:47,820
automatically be able to spot the valid

409
00:18:45,720 --> 00:18:51,210
ones and put them in the table for you

410
00:18:47,820 --> 00:18:53,970
and this is based on logic from

411
00:18:51,210 --> 00:18:56,700
backslash pad scanner and as such it's

412
00:18:53,970 --> 00:18:59,490
capable of spotting some really quite

413
00:18:56,700 --> 00:19:01,559
subtle stuff for example on one site on

414
00:18:59,490 --> 00:19:03,630
a bug bounty site I found if you try and

415
00:19:01,559 --> 00:19:06,450
log in with an invalid password locks

416
00:19:03,630 --> 00:19:09,779
nots the account gets locked and it says

417
00:19:06,450 --> 00:19:12,809
your IP has been locked out please enter

418
00:19:09,779 --> 00:19:15,000
a correct user name or password but if

419
00:19:12,809 --> 00:19:17,190
you entered the correct password when

420
00:19:15,000 --> 00:19:19,230
the account is locked it says this

421
00:19:17,190 --> 00:19:21,480
account is locked but it no longer toes

422
00:19:19,230 --> 00:19:23,279
you please enter a correct user name or

423
00:19:21,480 --> 00:19:25,740
password so you can use that to secure

424
00:19:23,279 --> 00:19:27,240
to successfully brute-force someone's

425
00:19:25,740 --> 00:19:28,740
password even though the account is

426
00:19:27,240 --> 00:19:32,340
locked and then just wait five minutes

427
00:19:28,740 --> 00:19:34,320
and login and that kind of really subtle

428
00:19:32,340 --> 00:19:35,939
difference in the response is something

429
00:19:34,320 --> 00:19:38,330
that turbo intruders diffing is

430
00:19:35,940 --> 00:19:42,210
completely capable of noticing and

431
00:19:38,330 --> 00:19:44,399
flagging for you right there's just a

432
00:19:42,210 --> 00:19:46,890
few other random features that I'd like

433
00:19:44,399 --> 00:19:50,729
to mention before I wrap up so one of

434
00:19:46,890 --> 00:19:54,419
them is this word list dot observed

435
00:19:50,730 --> 00:19:57,059
words feature so this is a built in word

436
00:19:54,419 --> 00:19:59,909
list and the word list contains every

437
00:19:57,059 --> 00:20:02,360
word that turbo in her the turbo

438
00:19:59,909 --> 00:20:04,830
intruder has seen in your proxy traffic

439
00:20:02,360 --> 00:20:06,840
so that means it basically loads of

440
00:20:04,830 --> 00:20:07,919
keywords from the website that you've

441
00:20:06,840 --> 00:20:09,689
been testing

442
00:20:07,920 --> 00:20:11,430
and that can lead to all sorts of

443
00:20:09,690 --> 00:20:14,250
interesting findings that you'll just

444
00:20:11,430 --> 00:20:16,980
completely miss if you rely on using a

445
00:20:14,250 --> 00:20:20,250
static word list another cool feature

446
00:20:16,980 --> 00:20:22,920
worth highlighting is that in the handle

447
00:20:20,250 --> 00:20:25,440
in the handle response callback you can

448
00:20:22,920 --> 00:20:27,330
use vector engine to cue up more

449
00:20:25,440 --> 00:20:30,980
requests which is useful if you want to

450
00:20:27,330 --> 00:20:35,070
send some kind of complex multi-step

451
00:20:30,980 --> 00:20:37,620
attack and here in this specific example

452
00:20:35,070 --> 00:20:42,149
we're using it to do and the cursive

453
00:20:37,620 --> 00:20:45,449
Directory brute force the one other

454
00:20:42,150 --> 00:20:48,120
thing to mention is by default every

455
00:20:45,450 --> 00:20:50,220
entry that will use my network stack

456
00:20:48,120 --> 00:20:53,070
which means it's really fast but you

457
00:20:50,220 --> 00:20:56,340
miss out on some core burp features like

458
00:20:53,070 --> 00:20:58,620
handling of upstream proxies and SSL

459
00:20:56,340 --> 00:21:01,139
client certificates and that kind of

460
00:20:58,620 --> 00:21:02,870
stuff if you want those features

461
00:21:01,140 --> 00:21:05,730
combined with the features of turbo

462
00:21:02,870 --> 00:21:09,120
intruder then you can stick engine

463
00:21:05,730 --> 00:21:11,220
equals engine burp in the first line

464
00:21:09,120 --> 00:21:13,770
there and that will mean it will use

465
00:21:11,220 --> 00:21:16,280
burps Network stack so it will run

466
00:21:13,770 --> 00:21:18,240
slower but you'll get the rock-solid

467
00:21:16,280 --> 00:21:24,360
stability and other cool features

468
00:21:18,240 --> 00:21:27,090
offered by the core burp stack so that's

469
00:21:24,360 --> 00:21:28,889
pretty much it the three key takeaways

470
00:21:27,090 --> 00:21:32,010
the three key things you should

471
00:21:28,890 --> 00:21:33,720
definitely remember are that billion

472
00:21:32,010 --> 00:21:36,960
request attacks are now absolutely

473
00:21:33,720 --> 00:21:38,670
plausible bandwidth is not your

474
00:21:36,960 --> 00:21:41,880
bottleneck and the vast majority of

475
00:21:38,670 --> 00:21:43,740
cases and you can install burp

476
00:21:41,880 --> 00:21:46,710
violet you can install turbo intruder

477
00:21:43,740 --> 00:21:50,520
via the BAP store or download the jar

478
00:21:46,710 --> 00:21:54,300
from the github if you want okay cool

479
00:21:50,520 --> 00:21:55,050
so now I'm gonna oh yet don't forget to

480
00:21:54,300 --> 00:21:57,870
follow me on Twitter

481
00:21:55,050 --> 00:22:00,600
thank you if you asked any questions you

482
00:21:57,870 --> 00:22:04,979
have in the YouTube chat or on Twitter

483
00:22:00,600 --> 00:22:07,169
I'm gonna answer those yeah thanks James

484
00:22:04,980 --> 00:22:08,760
and what we said there you know anyone

485
00:22:07,170 --> 00:22:10,320
who's following along or anyone who's

486
00:22:08,760 --> 00:22:11,730
watching this after the fact James does

487
00:22:10,320 --> 00:22:13,620
handle on Twitter do you want to just

488
00:22:11,730 --> 00:22:16,290
share that with the audience for a quick

489
00:22:13,620 --> 00:22:19,299
James I will be no axe

490
00:22:16,290 --> 00:22:24,740
alright how do you spell that

491
00:22:19,299 --> 00:22:26,990
it's on the slightly yeah yeah yeah and

492
00:22:24,740 --> 00:22:28,399
you know beyond that anyone who's

493
00:22:26,990 --> 00:22:30,169
listening right now if you want to work

494
00:22:28,399 --> 00:22:32,600
off some things into the the YouTube

495
00:22:30,169 --> 00:22:33,649
chat we can have a have a quick Q&A at

496
00:22:32,600 --> 00:22:34,850
the back end this was a couple of

497
00:22:33,649 --> 00:22:37,100
questions already

498
00:22:34,850 --> 00:22:38,600
so James one of the questions that came

499
00:22:37,100 --> 00:22:39,740
out early on in the piece and you kind

500
00:22:38,600 --> 00:22:42,620
of addressed it but it'd be interesting

501
00:22:39,740 --> 00:22:44,600
to dive into it a little bit more like

502
00:22:42,620 --> 00:22:46,850
what kind of router can handle this like

503
00:22:44,600 --> 00:22:49,459
what kind of bandwidth do I need

504
00:22:46,850 --> 00:22:53,000
upstream to be able to make full use of

505
00:22:49,460 --> 00:22:54,110
turbo intruder running these from VBS or

506
00:22:53,000 --> 00:23:00,289
from different parts of the world

507
00:22:54,110 --> 00:23:03,908
whatever else all my testing has just

508
00:23:00,289 --> 00:23:06,260
been done over a normal residential

509
00:23:03,909 --> 00:23:08,899
connection I think the key thing to

510
00:23:06,260 --> 00:23:11,690
remember is that Haiti fee requests are

511
00:23:08,899 --> 00:23:14,590
really small compared to like streaming

512
00:23:11,690 --> 00:23:19,760
films and stuff so the bandwidth usage

513
00:23:14,590 --> 00:23:22,789
isn't really that high and yeah I would

514
00:23:19,760 --> 00:23:25,580
mention so turbo intruder can be run

515
00:23:22,789 --> 00:23:28,039
from the command line so you can put it

516
00:23:25,580 --> 00:23:30,049
on your on your VPS and run it from

517
00:23:28,039 --> 00:23:33,260
there if you want to do like a two-week

518
00:23:30,049 --> 00:23:37,149
attack and send thousands of billions of

519
00:23:33,260 --> 00:23:37,149
requests then you might want to do that

520
00:23:47,559 --> 00:24:04,760
with respect the pending on the server

521
00:23:58,909 --> 00:24:08,000
that you're testing so like that server

522
00:24:04,760 --> 00:24:10,220
that I demoed on is my own server but

523
00:24:08,000 --> 00:24:13,010
it's a real web server it's just running

524
00:24:10,220 --> 00:24:15,679
at nginx it's not it's not particularly

525
00:24:13,010 --> 00:24:20,919
powerful and on that I could go by the

526
00:24:15,679 --> 00:24:23,779
burp intruder would do maybe 500

527
00:24:20,919 --> 00:24:27,909
requests per second to it and I was able

528
00:24:23,779 --> 00:24:30,649
to get turbo intruder up to 30 thousands

529
00:24:27,909 --> 00:24:32,330
that's the best kind of bonus that I've

530
00:24:30,649 --> 00:24:32,678
seen but it's it's pretty common that

531
00:24:32,330 --> 00:24:35,740
you should

532
00:24:32,679 --> 00:24:39,759
be able to get several thousand requests

533
00:24:35,740 --> 00:24:40,330
for a second to to a server without too

534
00:24:39,759 --> 00:24:43,149
much trouble

535
00:24:40,330 --> 00:24:44,590
so you mark you mileage is going to vary

536
00:24:43,149 --> 00:24:48,100
depending on the application at the

537
00:24:44,590 --> 00:24:53,100
other end but this yeah that's the key

538
00:24:48,100 --> 00:24:55,928
factor but even if your connection Sox

539
00:24:53,100 --> 00:24:58,090
turbo intruder will still go faster than

540
00:24:55,929 --> 00:25:01,210
other things just because it's more

541
00:24:58,090 --> 00:25:04,389
economical with the networks off perfect

542
00:25:01,210 --> 00:25:05,769
so another question and again you kind

543
00:25:04,389 --> 00:25:07,928
of tapped on this when you were talking

544
00:25:05,769 --> 00:25:11,379
about balancing the retries with with

545
00:25:07,929 --> 00:25:13,749
the attack rate or the attempt rate but

546
00:25:11,379 --> 00:25:15,399
just to tap back into it how dangerous

547
00:25:13,749 --> 00:25:17,649
or heavy is this against production

548
00:25:15,399 --> 00:25:19,979
servers like what's your what's your

549
00:25:17,649 --> 00:25:22,449
kind of you know knock the box over

550
00:25:19,980 --> 00:25:26,830
experience against the sequel host of

551
00:25:22,450 --> 00:25:29,799
Apache or nginx server for example to be

552
00:25:26,830 --> 00:25:32,139
honest I haven't done very much testing

553
00:25:29,799 --> 00:25:35,200
of that side of things

554
00:25:32,139 --> 00:25:38,918
I think basically you need to be mindful

555
00:25:35,200 --> 00:25:41,470
of what going the classic thing that

556
00:25:38,919 --> 00:25:44,080
nginx would do it if the Skip fish would

557
00:25:41,470 --> 00:25:46,360
do is it would send loads of requests

558
00:25:44,080 --> 00:25:48,908
which would lead to their to the log

559
00:25:46,360 --> 00:25:53,549
files getting absolutely hammered and

560
00:25:48,909 --> 00:25:56,769
and the disk would basically die so I

561
00:25:53,549 --> 00:25:58,299
would definitely be mindful a with a

562
00:25:56,769 --> 00:26:00,429
small number of concurrent connections

563
00:25:58,299 --> 00:26:03,999
it will be really obvious when the

564
00:26:00,429 --> 00:26:05,679
server starts to struggle something I'm

565
00:26:03,999 --> 00:26:14,139
looking forward to in the future is

566
00:26:05,679 --> 00:26:17,100
someone that basically checks to comes

567
00:26:14,139 --> 00:26:34,629
up around the typical exclusion of

568
00:26:17,100 --> 00:26:36,309
service or DDoS attacks so one last

569
00:26:34,629 --> 00:26:38,549
question here real quick and thank you

570
00:26:36,309 --> 00:26:41,019
that's really cool seeing that feature

571
00:26:38,549 --> 00:26:42,920
where there is some sort of you know

572
00:26:41,019 --> 00:26:47,710
dynamic

573
00:26:42,920 --> 00:26:47,710
kind of feedback loop will read

574
00:26:49,360 --> 00:26:57,590
especially but last question here is

575
00:26:55,100 --> 00:26:59,449
there any Volkov and support when the

576
00:26:57,590 --> 00:27:01,549
separate turns 200 for everything so

577
00:26:59,450 --> 00:27:13,510
you're talking about some of the kind of

578
00:27:01,549 --> 00:27:16,520
dynamic yeah yeah so that automatic

579
00:27:13,510 --> 00:27:19,760
handling is based on is based on

580
00:27:16,520 --> 00:27:21,290
backslash pad scanner and if if you

581
00:27:19,760 --> 00:27:24,650
Google backslash power scanner you'll

582
00:27:21,290 --> 00:27:26,629
find a whole white paper covering in

583
00:27:24,650 --> 00:27:28,700
great detail how that stuff works but

584
00:27:26,630 --> 00:27:31,960
it's absolutely not just looking at it

585
00:27:28,700 --> 00:27:35,720
status code it looks at tons and tons of

586
00:27:31,960 --> 00:27:37,880
things like the status code the content

587
00:27:35,720 --> 00:27:39,530
type the word count on the page the

588
00:27:37,880 --> 00:27:42,410
number of bytes on the page the

589
00:27:39,530 --> 00:27:47,928
occurrence of certain keywords content

590
00:27:42,410 --> 00:27:49,880
links those different variables it and

591
00:27:47,929 --> 00:27:53,140
it just filters them to find out which

592
00:27:49,880 --> 00:27:53,140
ones are stable and then

593
00:27:56,560 --> 00:27:59,619
[Music]

594
00:28:01,210 --> 00:28:07,610
right next to me so it's these names

595
00:28:05,299 --> 00:28:09,080
this is a this is Jason one of the ones

596
00:28:07,610 --> 00:28:11,809
that was kind of between the lines here

597
00:28:09,080 --> 00:28:15,039
was doesn't support multiple insertion

598
00:28:11,809 --> 00:28:20,119
points like the normal intruder does

599
00:28:15,039 --> 00:28:23,119
okay so you can basically it only

600
00:28:20,119 --> 00:28:26,330
supports one insertion point solved but

601
00:28:23,119 --> 00:28:30,459
you can cute you've just got some Python

602
00:28:26,330 --> 00:28:33,860
why if I scroll back so that would that

603
00:28:30,460 --> 00:28:35,929
that target dogleg value is just the

604
00:28:33,860 --> 00:28:40,668
request so you can queue up completely

605
00:28:35,929 --> 00:28:43,309
arbitrary requests you don't have to use

606
00:28:40,669 --> 00:28:46,330
the insertion point system it's it's

607
00:28:43,309 --> 00:28:52,190
it's purely just there for convenience

608
00:28:46,330 --> 00:28:54,080
okay thank you all right beautiful so I

609
00:28:52,190 --> 00:28:56,360
mean with that you know thank you so

610
00:28:54,080 --> 00:28:58,428
much James it's it's very quickly what

611
00:28:56,360 --> 00:29:00,769
you guys have done here sort of

612
00:28:58,429 --> 00:29:03,110
reminiscent to me of what Sir Robert

613
00:29:00,769 --> 00:29:04,820
Graham did with war to end map rather

614
00:29:03,110 --> 00:29:08,570
when he released mask and like some of

615
00:29:04,820 --> 00:29:11,960
those tweaks around efficiency response

616
00:29:08,570 --> 00:29:14,629
it was a lot like that the web version

617
00:29:11,960 --> 00:29:16,519
of it so congrats on on you know having

618
00:29:14,629 --> 00:29:19,399
a work I know that parts hard as well

619
00:29:16,519 --> 00:29:22,100
and actually seeing it drop and get in

620
00:29:19,399 --> 00:29:24,678
front of a group of people at this point

621
00:29:22,100 --> 00:29:26,509
we are going to wrap this talk up and

622
00:29:24,679 --> 00:29:29,210
pause for a couple of minutes while we

623
00:29:26,509 --> 00:29:31,279
set up the synth so thank you so much

624
00:29:29,210 --> 00:29:33,559
for listing and again you know follow

625
00:29:31,279 --> 00:29:35,269
James on Twitter jump into the

626
00:29:33,559 --> 00:29:38,499
conversation any other questions that

627
00:29:35,269 --> 00:29:41,090
you'd like to get answers to if you

628
00:29:38,499 --> 00:29:43,490
watching this offline or after the fact

629
00:29:41,090 --> 00:29:44,720
or even if your online question answered

630
00:29:43,490 --> 00:29:47,710
Chuck it on Twitter and we'll do our

631
00:29:44,720 --> 00:29:47,710
best to get to that as well

