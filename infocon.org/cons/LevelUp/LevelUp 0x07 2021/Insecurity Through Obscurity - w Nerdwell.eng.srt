1
00:00:05,020 --> 00:00:11,759
[Music]

2
00:00:11,759 --> 00:00:13,440
so in this this presentation now

3
00:00:13,440 --> 00:00:15,759
as i mentioned earlier is by matt

4
00:00:15,759 --> 00:00:18,080
birdwell who's also known as nerdwell

5
00:00:18,080 --> 00:00:20,480
um hello on twitter you can find him at

6
00:00:20,480 --> 00:00:22,080
the real nerdwell he's one of our bug

7
00:00:22,080 --> 00:00:24,320
crowd ambassador ambassadors as well

8
00:00:24,320 --> 00:00:27,119
which is just really cool so matt's

9
00:00:27,119 --> 00:00:28,000
passionate about

10
00:00:28,000 --> 00:00:29,840
securing the internet and helping others

11
00:00:29,840 --> 00:00:31,840
achieve their infosec career goals

12
00:00:31,840 --> 00:00:33,520
he has been building and breaking it

13
00:00:33,520 --> 00:00:35,040
systems for 20 years

14
00:00:35,040 --> 00:00:36,719
and has experience in regulated

15
00:00:36,719 --> 00:00:38,800
industries like healthcare and public

16
00:00:38,800 --> 00:00:40,160
utilities

17
00:00:40,160 --> 00:00:42,480
and as the video mentioned this video is

18
00:00:42,480 --> 00:00:44,399
insecurity through obscurity

19
00:00:44,399 --> 00:00:47,760
so over to you

20
00:00:49,360 --> 00:00:53,680
all right thank you let's

21
00:00:54,719 --> 00:00:58,079
let's go back to the beginning okay

22
00:00:58,079 --> 00:01:03,120
so in security through security um

23
00:01:03,359 --> 00:01:07,600
you got a basic idea for me i will

24
00:01:07,600 --> 00:01:10,000
skip that so basically what this talk is

25
00:01:10,000 --> 00:01:11,040
about is uh

26
00:01:11,040 --> 00:01:14,159
code objectification and minification

27
00:01:14,159 --> 00:01:16,080
and how that impacts the security of

28
00:01:16,080 --> 00:01:18,479
android apps

29
00:01:18,479 --> 00:01:21,360
i came across it basically through some

30
00:01:21,360 --> 00:01:22,479
actual

31
00:01:22,479 --> 00:01:25,360
applications that i was working on and

32
00:01:25,360 --> 00:01:26,640
next thing i know i was

33
00:01:26,640 --> 00:01:30,159
going down a rabbit hole and came across

34
00:01:30,159 --> 00:01:30,560
some

35
00:01:30,560 --> 00:01:31,840
interesting stuff and some very

36
00:01:31,840 --> 00:01:34,560
surprising stuff and

37
00:01:34,560 --> 00:01:38,720
next thing i know really uh some

38
00:01:38,720 --> 00:01:42,000
very wide scale potential new attack

39
00:01:42,000 --> 00:01:43,680
factors

40
00:01:43,680 --> 00:01:47,119
however code obfuscation definitely

41
00:01:47,119 --> 00:01:48,880
poses a lot of problems for

42
00:01:48,880 --> 00:01:51,360
bug bounty hunters of course and

43
00:01:51,360 --> 00:01:52,560
developers but

44
00:01:52,560 --> 00:01:55,360
for us it provides some very interesting

45
00:01:55,360 --> 00:01:56,640
opportunities that we're going to talk

46
00:01:56,640 --> 00:01:58,320
about

47
00:01:58,320 --> 00:02:00,479
and we're also going to talk about how

48
00:02:00,479 --> 00:02:01,680
we can put this together

49
00:02:01,680 --> 00:02:04,079
with open source libraries and how we

50
00:02:04,079 --> 00:02:05,200
can still

51
00:02:05,200 --> 00:02:07,840
identify open source libraries even if

52
00:02:07,840 --> 00:02:09,520
there's obfuscation

53
00:02:09,520 --> 00:02:13,040
in play so of course

54
00:02:13,040 --> 00:02:14,640
lots of people have done a lot of

55
00:02:14,640 --> 00:02:17,280
research a lot of what i'm doing today

56
00:02:17,280 --> 00:02:20,239
will touch on like java insecure java

57
00:02:20,239 --> 00:02:22,480
object deserialization that's one of my

58
00:02:22,480 --> 00:02:23,840
favorite bugs

59
00:02:23,840 --> 00:02:26,640
it's a really good way to get code

60
00:02:26,640 --> 00:02:27,599
execution

61
00:02:27,599 --> 00:02:28,959
but there are definitely a lot of

62
00:02:28,959 --> 00:02:31,200
gotchas and

63
00:02:31,200 --> 00:02:34,239
what i came across here was

64
00:02:34,239 --> 00:02:36,160
a way potentially to get by some of

65
00:02:36,160 --> 00:02:38,879
those gotchas

66
00:02:38,959 --> 00:02:42,000
and there's also this is a lot of words

67
00:02:42,000 --> 00:02:42,560
but

68
00:02:42,560 --> 00:02:44,640
basically i didn't find anything that's

69
00:02:44,640 --> 00:02:46,720
actually on point with what

70
00:02:46,720 --> 00:02:48,640
i was looking into the closest i came to

71
00:02:48,640 --> 00:03:04,800
not available

72
00:03:04,800 --> 00:03:08,000
so there is a wide range of

73
00:03:08,000 --> 00:03:11,120
audience experience today i think so it

74
00:03:11,120 --> 00:03:12,640
will probably help to just

75
00:03:12,640 --> 00:03:16,079
lay some real quick foundation

76
00:03:16,400 --> 00:03:18,480
of course we have compiled languages and

77
00:03:18,480 --> 00:03:19,680
interpreted languages

78
00:03:19,680 --> 00:03:22,080
where compile language is compiled at

79
00:03:22,080 --> 00:03:22,879
build time

80
00:03:22,879 --> 00:03:25,760
to executable code and an interpreted

81
00:03:25,760 --> 00:03:26,640
language

82
00:03:26,640 --> 00:03:29,280
is compiled to an intermediate language

83
00:03:29,280 --> 00:03:30,879
which is then

84
00:03:30,879 --> 00:03:34,560
converted to executable code at runtime

85
00:03:34,560 --> 00:03:36,959
and this is especially important in the

86
00:03:36,959 --> 00:03:38,720
android environment because

87
00:03:38,720 --> 00:03:42,000
it is basically running java i'm sure a

88
00:03:42,000 --> 00:03:43,519
lot of people would be like no no no no

89
00:03:43,519 --> 00:03:44,799
it's not it's not i mean there have been

90
00:03:44,799 --> 00:03:46,159
lawsuits over it right

91
00:03:46,159 --> 00:03:49,360
but for our intents and purposes

92
00:03:49,360 --> 00:03:52,319
it's absolutely java and we're going to

93
00:03:52,319 --> 00:03:53,760
take advantage of that to the fullest

94
00:03:53,760 --> 00:03:56,000
extent possible

95
00:03:56,000 --> 00:03:58,000
and object-oriented programming will

96
00:03:58,000 --> 00:03:59,599
play a big role

97
00:03:59,599 --> 00:04:01,760
obviously java is an object-oriented

98
00:04:01,760 --> 00:04:03,200
programming language

99
00:04:03,200 --> 00:04:06,560
and it object-oriented

100
00:04:06,560 --> 00:04:08,879
nature of the language creates some

101
00:04:08,879 --> 00:04:10,560
unique challenges for us

102
00:04:10,560 --> 00:04:14,080
and then also some opportunities another

103
00:04:14,080 --> 00:04:17,759
interesting aspect of java

104
00:04:17,759 --> 00:04:19,519
the java runtime environment and the

105
00:04:19,519 --> 00:04:21,519
android the runtime environment

106
00:04:21,519 --> 00:04:25,040
is that the function name or method name

107
00:04:25,040 --> 00:04:29,199
is especially important when determining

108
00:04:29,199 --> 00:04:32,320
like how to branch to a particular set

109
00:04:32,320 --> 00:04:33,040
of code

110
00:04:33,040 --> 00:04:34,960
so like if you call a function in some

111
00:04:34,960 --> 00:04:37,040
java code it basically

112
00:04:37,040 --> 00:04:40,800
looks up the there's a series of things

113
00:04:40,800 --> 00:04:42,960
that it puts together and it's the codes

114
00:04:42,960 --> 00:04:46,080
decode the method signature like the

115
00:04:46,080 --> 00:04:47,120
return type

116
00:04:47,120 --> 00:04:50,240
the name the parameters and

117
00:04:50,240 --> 00:04:53,199
based on that knows where to go and

118
00:04:53,199 --> 00:04:53,680
that's

119
00:04:53,680 --> 00:04:55,440
actually going to play a very big role

120
00:04:55,440 --> 00:04:58,400
in what we're looking at here today

121
00:04:58,400 --> 00:05:00,160
and then of course java object

122
00:05:00,160 --> 00:05:04,160
deserialization and serialization

123
00:05:04,560 --> 00:05:06,880
i test on that a little bit but just in

124
00:05:06,880 --> 00:05:08,560
case

125
00:05:08,560 --> 00:05:10,000
some people are not that familiar with

126
00:05:10,000 --> 00:05:11,680
it basically

127
00:05:11,680 --> 00:05:15,120
uh what java allows developers to do is

128
00:05:15,120 --> 00:05:16,320
very easily take

129
00:05:16,320 --> 00:05:19,039
an in-memory object and then convert it

130
00:05:19,039 --> 00:05:19,680
to

131
00:05:19,680 --> 00:05:22,000
a fight stream that you can then send

132
00:05:22,000 --> 00:05:23,440
over

133
00:05:23,440 --> 00:05:26,320
the network or write to disk do all

134
00:05:26,320 --> 00:05:28,320
sorts of stuff with it and then once it

135
00:05:28,320 --> 00:05:31,600
arrives at the destination you can

136
00:05:31,600 --> 00:05:34,880
deserialize it into a new

137
00:05:34,880 --> 00:05:38,160
in-memory object and as it turns out

138
00:05:38,160 --> 00:05:41,919
there are a number of quote-unquote

139
00:05:41,919 --> 00:05:45,440
magic methods that get called in that

140
00:05:45,440 --> 00:05:46,400
process

141
00:05:46,400 --> 00:05:48,800
and that is generally where the

142
00:05:48,800 --> 00:05:50,160
insecurities arise

143
00:05:50,160 --> 00:05:52,080
in terms of object deserialization

144
00:05:52,080 --> 00:05:53,840
vulnerabilities

145
00:05:53,840 --> 00:05:57,280
and obfuscation and especially

146
00:05:57,280 --> 00:05:58,479
minimization

147
00:05:58,479 --> 00:06:01,600
actually plays a big role in breaking

148
00:06:01,600 --> 00:06:02,479
this sometimes

149
00:06:02,479 --> 00:06:04,800
which can have some you know security

150
00:06:04,800 --> 00:06:05,520
related

151
00:06:05,520 --> 00:06:08,639
implications and then also

152
00:06:08,639 --> 00:06:11,039
exposing the application potentially to

153
00:06:11,039 --> 00:06:12,479
attack factors

154
00:06:12,479 --> 00:06:16,240
that frankly i don't think

155
00:06:16,240 --> 00:06:19,280
people are looking at right now and i

156
00:06:19,280 --> 00:06:20,800
showed that original slide

157
00:06:20,800 --> 00:06:23,440
with the three pictures in terms of

158
00:06:23,440 --> 00:06:25,039
prior research

159
00:06:25,039 --> 00:06:28,400
one of the big outcomes from

160
00:06:28,400 --> 00:06:31,199
basically the guy who kind of brought

161
00:06:31,199 --> 00:06:32,840
this to light i think it was in

162
00:06:32,840 --> 00:06:36,160
2015 chris rohoff

163
00:06:36,160 --> 00:06:37,919
and he had a partner unfortunately i

164
00:06:37,919 --> 00:06:39,759
could never remember his name but

165
00:06:39,759 --> 00:06:41,759
uh why so serial i'm sure you guys are

166
00:06:41,759 --> 00:06:43,360
familiar with that if not

167
00:06:43,360 --> 00:06:45,360
definitely check it out on github it's

168
00:06:45,360 --> 00:06:46,560
very useful

169
00:06:46,560 --> 00:06:48,880
for for coming up with a quick proof of

170
00:06:48,880 --> 00:06:49,759
concept

171
00:06:49,759 --> 00:06:53,120
however it relies on known gadgets

172
00:06:53,120 --> 00:06:55,840
and in things like the apaches commons

173
00:06:55,840 --> 00:06:56,720
library

174
00:06:56,720 --> 00:06:59,680
there are a few that don't one of my

175
00:06:59,680 --> 00:07:00,319
favorites

176
00:07:00,319 --> 00:07:03,440
is the ur url dns gadget

177
00:07:03,440 --> 00:07:06,960
because it basically works on

178
00:07:06,960 --> 00:07:10,240
native java or android well no not

179
00:07:10,240 --> 00:07:11,520
android it works in

180
00:07:11,520 --> 00:07:13,599
native java and does not require any

181
00:07:13,599 --> 00:07:16,479
third-party libraries

182
00:07:16,479 --> 00:07:19,520
but it does not work in android which is

183
00:07:19,520 --> 00:07:20,319
a bummer

184
00:07:20,319 --> 00:07:23,599
because actually android relies

185
00:07:23,599 --> 00:07:27,199
on deserialization a whole lot

186
00:07:27,199 --> 00:07:30,080
like basically every time you want to

187
00:07:30,080 --> 00:07:30,560
send

188
00:07:30,560 --> 00:07:35,039
data to any significant amount of data

189
00:07:35,039 --> 00:07:38,240
to another application through an intent

190
00:07:38,240 --> 00:07:40,319
one of the most popular ways to do that

191
00:07:40,319 --> 00:07:41,520
is with

192
00:07:41,520 --> 00:07:45,280
parcels and bundles which implement a

193
00:07:45,280 --> 00:07:48,800
special type of serialization

194
00:07:48,800 --> 00:07:52,160
okay so

195
00:07:52,160 --> 00:07:55,120
what got me into this was i was hacking

196
00:07:55,120 --> 00:07:55,440
on

197
00:07:55,440 --> 00:07:59,599
an android app and basically

198
00:07:59,599 --> 00:08:04,159
super duper difficult to get through

199
00:08:04,800 --> 00:08:06,800
so let's but it was not something i had

200
00:08:06,800 --> 00:08:07,840
not seen before

201
00:08:07,840 --> 00:08:09,840
anyone who's done some web hacking has

202
00:08:09,840 --> 00:08:12,080
seen minimize javascript

203
00:08:12,080 --> 00:08:15,520
and i don't know if you've ever tried to

204
00:08:15,520 --> 00:08:17,520
browse it like pretty print it in the

205
00:08:17,520 --> 00:08:19,759
web tools or developer tools

206
00:08:19,759 --> 00:08:22,160
and then actually operate it in the

207
00:08:22,160 --> 00:08:24,800
developer tools but every time i do it

208
00:08:24,800 --> 00:08:28,240
i mean my laptop starts

209
00:08:28,240 --> 00:08:31,520
to take off and uh

210
00:08:31,520 --> 00:08:34,159
chokes on his memory so i mean that just

211
00:08:34,159 --> 00:08:36,000
speaks to

212
00:08:36,000 --> 00:08:39,200
even minimize like it's

213
00:08:39,200 --> 00:08:42,399
huge and gobbling up all the ram on a

214
00:08:42,399 --> 00:08:44,959
you know decent box so there is an

215
00:08:44,959 --> 00:08:47,120
actual legitimate use case for this

216
00:08:47,120 --> 00:08:51,200
and and we see in javascript we also see

217
00:08:51,200 --> 00:08:52,800
an android and

218
00:08:52,800 --> 00:08:56,399
the uh the google

219
00:08:56,399 --> 00:08:59,600
canonical reason for objectification is

220
00:08:59,600 --> 00:09:02,720
to reduce the apk file size which it

221
00:09:02,720 --> 00:09:03,839
does do

222
00:09:03,839 --> 00:09:06,880
somewhere between from my experience 30

223
00:09:06,880 --> 00:09:07,920
to 50

224
00:09:07,920 --> 00:09:10,560
so it's just substantial savings uh

225
00:09:10,560 --> 00:09:11,120
which

226
00:09:11,120 --> 00:09:14,240
not only has benefits for the

227
00:09:14,240 --> 00:09:17,120
publisher the author and then of course

228
00:09:17,120 --> 00:09:19,680
like the app stores in terms of

229
00:09:19,680 --> 00:09:22,000
the customers or users downloading it

230
00:09:22,000 --> 00:09:23,120
and bandwidth and all that

231
00:09:23,120 --> 00:09:26,560
but then also for us users

232
00:09:26,560 --> 00:09:28,480
you know if they tap the size that's all

233
00:09:28,480 --> 00:09:30,560
the more

234
00:09:30,560 --> 00:09:32,000
vulnerable apps we can load up on our

235
00:09:32,000 --> 00:09:33,680
phones

236
00:09:33,680 --> 00:09:35,920
and then i thought i'd throw this in

237
00:09:35,920 --> 00:09:36,880
there malware

238
00:09:36,880 --> 00:09:38,560
is one of the other places that we see

239
00:09:38,560 --> 00:09:40,080
obfuscation the most

240
00:09:40,080 --> 00:09:43,360
and there obviously it's not used for

241
00:09:43,360 --> 00:09:45,360
such

242
00:09:45,360 --> 00:09:48,720
legitimate means and it's also

243
00:09:48,720 --> 00:09:50,800
not used to make it smaller generally

244
00:09:50,800 --> 00:09:52,800
you'd see it like encrypted

245
00:09:52,800 --> 00:09:54,480
and it's actually very interesting the

246
00:09:54,480 --> 00:09:55,920
work that malware

247
00:09:55,920 --> 00:09:59,279
reverse engineers have to do but

248
00:09:59,279 --> 00:10:02,079
we're not quite going to get that today

249
00:10:02,079 --> 00:10:02,839
okay

250
00:10:02,839 --> 00:10:07,120
so how does android

251
00:10:07,120 --> 00:10:10,720
do obfuscation so in the past

252
00:10:10,720 --> 00:10:13,920
it used proguard which was a

253
00:10:13,920 --> 00:10:18,640
is a third-party tool and now it uses r8

254
00:10:18,640 --> 00:10:20,560
it actually operates in much the same

255
00:10:20,560 --> 00:10:21,920
way and

256
00:10:21,920 --> 00:10:25,199
even today when you are

257
00:10:25,360 --> 00:10:27,120
if you want to refine the way that it

258
00:10:27,120 --> 00:10:28,720
behaves you use

259
00:10:28,720 --> 00:10:32,000
proguard rules and basically

260
00:10:32,000 --> 00:10:35,760
the way that it works is it has a

261
00:10:35,760 --> 00:10:37,920
default dictionary which is the english

262
00:10:37,920 --> 00:10:39,040
alphabet

263
00:10:39,040 --> 00:10:41,600
a through z starting at the top working

264
00:10:41,600 --> 00:10:43,200
on the way down

265
00:10:43,200 --> 00:10:47,920
and renames all classes and members

266
00:10:47,920 --> 00:10:50,800
members being variables and functions or

267
00:10:50,800 --> 00:10:52,399
methods

268
00:10:52,399 --> 00:10:55,440
and once it gets to z

269
00:10:55,440 --> 00:10:58,640
then it goes to a a through z z

270
00:10:58,640 --> 00:11:02,160
then the aaa through zzzz

271
00:11:02,160 --> 00:11:06,959
and from you know i've watched a lot of

272
00:11:06,959 --> 00:11:09,440
education material and youtube channels

273
00:11:09,440 --> 00:11:10,640
and and

274
00:11:10,640 --> 00:11:12,800
read a lot of books and one thing that

275
00:11:12,800 --> 00:11:15,120
is pretty consistent across the board

276
00:11:15,120 --> 00:11:18,640
is people say don't even bother

277
00:11:18,640 --> 00:11:22,079
trying to understand that

278
00:11:22,079 --> 00:11:24,880
i mean and they have a point we'll get

279
00:11:24,880 --> 00:11:26,880
to that

280
00:11:26,880 --> 00:11:30,160
but so i had mentioned earlier that

281
00:11:30,160 --> 00:11:31,279
google says

282
00:11:31,279 --> 00:11:32,800
that the reason for obfuscation in

283
00:11:32,800 --> 00:11:34,720
android apps is to minimize the file

284
00:11:34,720 --> 00:11:37,040
size

285
00:11:37,440 --> 00:11:39,360
the developer forms and even some of the

286
00:11:39,360 --> 00:11:40,720
books

287
00:11:40,720 --> 00:11:43,600
actually refer to it as a means of

288
00:11:43,600 --> 00:11:45,600
securing the app

289
00:11:45,600 --> 00:11:47,920
basically thinking if they can make it

290
00:11:47,920 --> 00:11:48,880
more difficult

291
00:11:48,880 --> 00:11:51,920
for hackers to

292
00:11:51,920 --> 00:11:54,560
reverse engineer then all the more

293
00:11:54,560 --> 00:11:56,639
difficult to compromise their machine

294
00:11:56,639 --> 00:11:59,839
of course we know

295
00:12:00,079 --> 00:12:02,959
not only does security through obscurity

296
00:12:02,959 --> 00:12:03,839
not work

297
00:12:03,839 --> 00:12:05,440
what i'm going to show you today is it

298
00:12:05,440 --> 00:12:06,720
actually makes the application

299
00:12:06,720 --> 00:12:07,440
vulnerable

300
00:12:07,440 --> 00:12:09,600
in a place where it was not before which

301
00:12:09,600 --> 00:12:11,200
i think is kind of neat

302
00:12:11,200 --> 00:12:12,639
i don't know about you i'm always

303
00:12:12,639 --> 00:12:15,120
finding myself up against this battle

304
00:12:15,120 --> 00:12:18,560
and it's kind of neat to uh to actually

305
00:12:18,560 --> 00:12:21,040
say well

306
00:12:21,120 --> 00:12:25,040
not only is it not good it's bad

307
00:12:25,040 --> 00:12:27,920
okay and i put these exclamation points

308
00:12:27,920 --> 00:12:29,519
here they basically come straight from

309
00:12:29,519 --> 00:12:30,160
the

310
00:12:30,160 --> 00:12:33,760
android documentation which says

311
00:12:33,760 --> 00:12:37,200
don't let use the proguard rules to tell

312
00:12:37,200 --> 00:12:37,440
it

313
00:12:37,440 --> 00:12:40,079
to not change the name of your

314
00:12:40,079 --> 00:12:42,639
application entry points

315
00:12:42,639 --> 00:12:44,639
which is important because like if you

316
00:12:44,639 --> 00:12:46,160
renamed

317
00:12:46,160 --> 00:12:50,240
certain key functions or classes to aaa

318
00:12:50,240 --> 00:12:55,040
how would anyone know how to call it

319
00:12:55,040 --> 00:12:57,360
okay

320
00:12:58,320 --> 00:13:01,120
so we talked about this a little bit if

321
00:13:01,120 --> 00:13:01,839
you've ever

322
00:13:01,839 --> 00:13:04,320
reversed an application an android app

323
00:13:04,320 --> 00:13:06,240
that's been obfuscated then you'll

324
00:13:06,240 --> 00:13:06,959
recognize

325
00:13:06,959 --> 00:13:10,160
this tree on the left i just took this

326
00:13:10,160 --> 00:13:12,959
from some random application

327
00:13:12,959 --> 00:13:14,639
making sure it didn't have anything i

328
00:13:14,639 --> 00:13:16,480
did check before but yeah

329
00:13:16,480 --> 00:13:20,240
uh so so that's what it looks like and

330
00:13:20,240 --> 00:13:22,639
of course trying to make sense of that

331
00:13:22,639 --> 00:13:23,760
and especially

332
00:13:23,760 --> 00:13:27,040
trying to walk a hierarchical

333
00:13:27,040 --> 00:13:31,519
object-oriented structure is

334
00:13:31,519 --> 00:13:34,560
it's mind-numbing i mean very very

335
00:13:34,560 --> 00:13:36,000
difficult

336
00:13:36,000 --> 00:13:38,480
and it actually even a lot of the

337
00:13:38,480 --> 00:13:39,519
application

338
00:13:39,519 --> 00:13:42,000
like automation tools that we have don't

339
00:13:42,000 --> 00:13:43,440
handle it very well

340
00:13:43,440 --> 00:13:46,480
especially the ones that work on like

341
00:13:46,480 --> 00:13:49,040
things like java object deserialization

342
00:13:49,040 --> 00:13:49,839
they refer

343
00:13:49,839 --> 00:13:54,800
they rely on those magic methods names

344
00:13:54,800 --> 00:13:57,839
and if that magic method has been

345
00:13:57,839 --> 00:14:00,880
either removed from the app or renamed

346
00:14:00,880 --> 00:14:04,240
then then it doesn't know what to do

347
00:14:04,240 --> 00:14:07,519
um so

348
00:14:07,519 --> 00:14:10,720
in addition to renaming there is another

349
00:14:10,720 --> 00:14:13,360
element of what it does and i've

350
00:14:13,360 --> 00:14:14,720
actually found it to be incredibly

351
00:14:14,720 --> 00:14:15,680
annoying

352
00:14:15,680 --> 00:14:18,719
when i'm trying to

353
00:14:18,880 --> 00:14:21,680
like develop a plc for example is if you

354
00:14:21,680 --> 00:14:22,160
have

355
00:14:22,160 --> 00:14:25,600
a member or a even a class

356
00:14:25,600 --> 00:14:29,519
or a method that does not get used or

357
00:14:29,519 --> 00:14:31,360
the android studio doesn't think it gets

358
00:14:31,360 --> 00:14:33,279
used it just

359
00:14:33,279 --> 00:14:35,760
removes it and it's not in the release

360
00:14:35,760 --> 00:14:37,199
build

361
00:14:37,199 --> 00:14:40,240
so imagine for a second

362
00:14:40,240 --> 00:14:43,760
that you have a devops pipeline that you

363
00:14:43,760 --> 00:14:44,480
are

364
00:14:44,480 --> 00:14:47,360
pushing changes through multiple times a

365
00:14:47,360 --> 00:14:47,760
day

366
00:14:47,760 --> 00:14:50,639
and you're using instrumentation to

367
00:14:50,639 --> 00:14:52,880
automate a lot of your testing

368
00:14:52,880 --> 00:14:57,360
and stack traces

369
00:14:57,360 --> 00:15:00,720
comprised of a bunch of nested a dot

370
00:15:00,720 --> 00:15:03,519
v dot one dot or you know all that good

371
00:15:03,519 --> 00:15:05,120
garbage

372
00:15:05,120 --> 00:15:07,839
is not gonna be very helpful for

373
00:15:07,839 --> 00:15:09,040
troubleshooting problems

374
00:15:09,040 --> 00:15:13,120
so generally that's going to be done

375
00:15:13,120 --> 00:15:16,399
on on like a debug build which does not

376
00:15:16,399 --> 00:15:18,320
have minimization

377
00:15:18,320 --> 00:15:22,079
and then right before it hits the door

378
00:15:22,079 --> 00:15:25,519
we do a release build and some final

379
00:15:25,519 --> 00:15:26,160
testing

380
00:15:26,160 --> 00:15:29,519
and then push it out

381
00:15:29,920 --> 00:15:32,160
i'd be interested to see which how

382
00:15:32,160 --> 00:15:34,079
companies are

383
00:15:34,079 --> 00:15:35,440
where companies are doing their

384
00:15:35,440 --> 00:15:37,199
application security checks if they're

385
00:15:37,199 --> 00:15:38,000
doing in the

386
00:15:38,000 --> 00:15:40,000
in that pipeline is it before the

387
00:15:40,000 --> 00:15:41,360
release build or after

388
00:15:41,360 --> 00:15:44,000
because what i've found here is

389
00:15:44,000 --> 00:15:46,560
basically

390
00:15:47,199 --> 00:15:49,920
optimization and minimization and the

391
00:15:49,920 --> 00:15:51,600
removal element of that

392
00:15:51,600 --> 00:15:55,920
as well is fundamentally changing

393
00:15:55,920 --> 00:15:58,079
the structure of the code and so if

394
00:15:58,079 --> 00:16:00,560
you've performed all of your testing and

395
00:16:00,560 --> 00:16:02,880
application security tests against a

396
00:16:02,880 --> 00:16:04,399
debug build

397
00:16:04,399 --> 00:16:08,560
and then obfuscated it or minimized it

398
00:16:08,560 --> 00:16:11,199
without doing further testing that's no

399
00:16:11,199 --> 00:16:13,040
longer the same product

400
00:16:13,040 --> 00:16:16,079
by a long shot and

401
00:16:16,079 --> 00:16:18,480
google acknowledges that this is not a

402
00:16:18,480 --> 00:16:19,839
knock on the technology

403
00:16:19,839 --> 00:16:21,680
it like i said it has a legitimate

404
00:16:21,680 --> 00:16:24,160
purpose and they have addressed

405
00:16:24,160 --> 00:16:26,720
these issues there's a lot of other

406
00:16:26,720 --> 00:16:28,000
things i'm not really going to go into

407
00:16:28,000 --> 00:16:29,519
because they don't apply to bug bounty

408
00:16:29,519 --> 00:16:30,399
hunters but

409
00:16:30,399 --> 00:16:33,519
they do provide tools to help

410
00:16:33,519 --> 00:16:36,320
developers understand like a stack dump

411
00:16:36,320 --> 00:16:37,680
from a release build

412
00:16:37,680 --> 00:16:39,360
that they get through the app store for

413
00:16:39,360 --> 00:16:41,040
example

414
00:16:41,040 --> 00:16:42,959
but basically i mean it's generally

415
00:16:42,959 --> 00:16:45,199
understood that

416
00:16:45,199 --> 00:16:47,680
it makes it difficult if not possible to

417
00:16:47,680 --> 00:16:49,360
understand the code

418
00:16:49,360 --> 00:16:51,759
and and stack dumps and that kind of

419
00:16:51,759 --> 00:16:52,560
stuff

420
00:16:52,560 --> 00:16:56,000
however for us there's a

421
00:16:56,000 --> 00:16:58,160
that's a double-edged sword i i touched

422
00:16:58,160 --> 00:16:59,600
on a few of them right there

423
00:16:59,600 --> 00:17:02,880
but some other ones are and i'm speaking

424
00:17:02,880 --> 00:17:05,439
to these from

425
00:17:05,439 --> 00:17:09,760
from observations i've made in live apps

426
00:17:09,760 --> 00:17:13,599
i have basically a large number

427
00:17:13,599 --> 00:17:14,959
i don't think this is a surprise to

428
00:17:14,959 --> 00:17:17,439
anyone a huge number

429
00:17:17,439 --> 00:17:22,000
most perhaps android apps have a lot of

430
00:17:22,000 --> 00:17:25,280
vanilla third-party java

431
00:17:25,280 --> 00:17:28,480
dependencies and all the stuff that

432
00:17:28,480 --> 00:17:29,840
comes along with that

433
00:17:29,840 --> 00:17:32,240
like my personal favorite bug

434
00:17:32,240 --> 00:17:33,360
deserialization

435
00:17:33,360 --> 00:17:37,440
vulnerabilities and uh so

436
00:17:37,440 --> 00:17:40,640
once you have now let me back up

437
00:17:40,640 --> 00:17:43,039
developers do have the benefits of like

438
00:17:43,039 --> 00:17:43,679
gradle

439
00:17:43,679 --> 00:17:45,600
and some other things to help them

440
00:17:45,600 --> 00:17:46,960
automatically

441
00:17:46,960 --> 00:17:49,200
update those packages so i think that

442
00:17:49,200 --> 00:17:50,080
helps a lot

443
00:17:50,080 --> 00:17:53,440
but somehow i don't know how this is

444
00:17:53,440 --> 00:17:54,240
happening

445
00:17:54,240 --> 00:17:56,880
but somehow there are in these

446
00:17:56,880 --> 00:17:58,799
obfuscated release builds

447
00:17:58,799 --> 00:18:03,520
a lot of old dependencies that

448
00:18:03,679 --> 00:18:05,679
are known vulnerable and we're going to

449
00:18:05,679 --> 00:18:07,919
look at how we can find that

450
00:18:07,919 --> 00:18:11,360
in a minute another very interesting

451
00:18:11,360 --> 00:18:13,840
thing that i found

452
00:18:13,840 --> 00:18:15,840
that sometimes developers will fail to

453
00:18:15,840 --> 00:18:18,000
remove the qa instrumentation tools

454
00:18:18,000 --> 00:18:21,200
that help them automate uh like mojito

455
00:18:21,200 --> 00:18:24,080
and junit uh and they those actually

456
00:18:24,080 --> 00:18:24,640
rely

457
00:18:24,640 --> 00:18:26,799
on some other things under the hood like

458
00:18:26,799 --> 00:18:27,679
bite buddy

459
00:18:27,679 --> 00:18:30,720
ham crest which if you

460
00:18:30,720 --> 00:18:34,080
go look at those it is amazing i didn't

461
00:18:34,080 --> 00:18:34,960
even know that they

462
00:18:34,960 --> 00:18:38,320
had come this far but basically they let

463
00:18:38,320 --> 00:18:38,880
you

464
00:18:38,880 --> 00:18:42,080
create your own classes on the fly

465
00:18:42,080 --> 00:18:45,440
in the class path and some of them

466
00:18:45,440 --> 00:18:46,480
actually will do that

467
00:18:46,480 --> 00:18:50,160
upon deserialization so like if you know

468
00:18:50,160 --> 00:18:51,600
much about these serialization

469
00:18:51,600 --> 00:18:52,960
vulnerabilities one of the biggest

470
00:18:52,960 --> 00:18:53,600
challenges

471
00:18:53,600 --> 00:18:55,200
is having a vulnerable class in the

472
00:18:55,200 --> 00:18:57,440
class pack well if it has

473
00:18:57,440 --> 00:18:59,679
these instrumentation libraries you can

474
00:18:59,679 --> 00:19:00,720
create

475
00:19:00,720 --> 00:19:04,320
a an object to be deserialized and when

476
00:19:04,320 --> 00:19:06,080
that object is deserialized

477
00:19:06,080 --> 00:19:08,880
it creates a vulnerable classroom class

478
00:19:08,880 --> 00:19:09,440
path

479
00:19:09,440 --> 00:19:11,440
at your you know based upon how you

480
00:19:11,440 --> 00:19:12,720
choose it to be

481
00:19:12,720 --> 00:19:16,080
can't beat that and then

482
00:19:16,080 --> 00:19:18,880
i touched a little bit on it does hinder

483
00:19:18,880 --> 00:19:20,880
automated tools a lot

484
00:19:20,880 --> 00:19:25,280
and especially the removal aspect

485
00:19:25,280 --> 00:19:27,919
like read objects is a good example so

486
00:19:27,919 --> 00:19:28,799
when you

487
00:19:28,799 --> 00:19:32,480
have a serializable java object

488
00:19:32,480 --> 00:19:35,919
and you basically hand it off to be

489
00:19:35,919 --> 00:19:39,679
deserialized to the underlying api

490
00:19:39,679 --> 00:19:42,640
it calls this magic method read object

491
00:19:42,640 --> 00:19:44,559
and also like read resolve and read

492
00:19:44,559 --> 00:19:45,760
write

493
00:19:45,760 --> 00:19:49,760
something like that but

494
00:19:50,480 --> 00:19:53,600
that call is nowhere in the code and so

495
00:19:53,600 --> 00:19:55,919
as far as android studio is concerned

496
00:19:55,919 --> 00:19:58,320
that's never used and it will very

497
00:19:58,320 --> 00:19:59,120
gladly

498
00:19:59,120 --> 00:20:01,600
build your package without that method

499
00:20:01,600 --> 00:20:02,240
and

500
00:20:02,240 --> 00:20:05,520
i've seen that help and hurt so

501
00:20:05,520 --> 00:20:09,440
sometimes there will actually be some

502
00:20:09,440 --> 00:20:11,760
like business logic or access log access

503
00:20:11,760 --> 00:20:13,840
control logic in the read resolve

504
00:20:13,840 --> 00:20:17,039
method and

505
00:20:17,039 --> 00:20:18,559
a lot of people think about the read

506
00:20:18,559 --> 00:20:20,159
object method and they'll include that

507
00:20:20,159 --> 00:20:21,679
in the proguard rules

508
00:20:21,679 --> 00:20:24,799
and exclude it but if you don't do the

509
00:20:24,799 --> 00:20:27,919
same thing with read resolve

510
00:20:27,919 --> 00:20:31,520
in some cases it will actually lead to

511
00:20:31,520 --> 00:20:35,840
basically an access control bypass

512
00:20:36,080 --> 00:20:39,280
um and then

513
00:20:39,280 --> 00:20:44,159
so i see this as an opportunity

514
00:20:44,159 --> 00:20:46,559
obviously this is you got to get pretty

515
00:20:46,559 --> 00:20:47,440
deep in the

516
00:20:47,440 --> 00:20:49,520
weeds on this and every single

517
00:20:49,520 --> 00:20:51,280
application is different

518
00:20:51,280 --> 00:20:53,600
so there's no doubt i mean it's

519
00:20:53,600 --> 00:20:54,480
difficult

520
00:20:54,480 --> 00:20:58,080
it's hard to automate and there's a lot

521
00:20:58,080 --> 00:20:59,280
of

522
00:20:59,280 --> 00:21:00,960
risk that you are going to basically

523
00:21:00,960 --> 00:21:03,440
come out the other end empty-handed

524
00:21:03,440 --> 00:21:07,360
however definitely is less competition

525
00:21:07,360 --> 00:21:10,960
which generally means fewer dupes and

526
00:21:10,960 --> 00:21:12,960
the nature of these bugs that you will

527
00:21:12,960 --> 00:21:14,240
find when you do find them

528
00:21:14,240 --> 00:21:17,520
is pretty severe so

529
00:21:17,520 --> 00:21:20,960
you know maybe a quality over quantity

530
00:21:20,960 --> 00:21:21,760
thing

531
00:21:21,760 --> 00:21:25,120
to uh to to juggle there and then again

532
00:21:25,120 --> 00:21:28,720
i put this as an opportunity because

533
00:21:28,720 --> 00:21:31,280
the don't change name of app entry

534
00:21:31,280 --> 00:21:34,720
points because a lot of times

535
00:21:34,799 --> 00:21:36,799
developers are just either going with

536
00:21:36,799 --> 00:21:38,000
the defaults

537
00:21:38,000 --> 00:21:40,960
or it breaks their app like if you

538
00:21:40,960 --> 00:21:42,080
google

539
00:21:42,080 --> 00:21:44,720
uh pro guard broke serialization it's

540
00:21:44,720 --> 00:21:45,919
all over the place and they're like oh

541
00:21:45,919 --> 00:21:47,520
yeah just you know copy paste this one

542
00:21:47,520 --> 00:21:48,960
thing off of uh

543
00:21:48,960 --> 00:21:52,320
stack overflow and it works you know and

544
00:21:52,320 --> 00:21:53,200
uh

545
00:21:53,200 --> 00:21:56,240
it works but

546
00:21:56,240 --> 00:21:57,919
who knows what else it's doing in your

547
00:21:57,919 --> 00:21:59,360
particular app

548
00:21:59,360 --> 00:22:01,360
and then one last thing i'll add on this

549
00:22:01,360 --> 00:22:02,960
is

550
00:22:02,960 --> 00:22:05,520
every time you rebuild the app it

551
00:22:05,520 --> 00:22:06,720
changes

552
00:22:06,720 --> 00:22:09,840
the obfuscated result and so

553
00:22:09,840 --> 00:22:12,559
there are several several opportunities

554
00:22:12,559 --> 00:22:14,720
for the bug bounty hunter

555
00:22:14,720 --> 00:22:18,720
as a result the first is

556
00:22:18,720 --> 00:22:21,919
obviously new bugs but then the second

557
00:22:21,919 --> 00:22:24,080
is

558
00:22:25,360 --> 00:22:28,320
like entirely new code paths that the

559
00:22:28,320 --> 00:22:29,200
developer

560
00:22:29,200 --> 00:22:32,159
did not intend and in fact could not

561
00:22:32,159 --> 00:22:32,960
have

562
00:22:32,960 --> 00:22:35,679
anticipated because they did not exist

563
00:22:35,679 --> 00:22:38,080
at the time

564
00:22:38,080 --> 00:22:40,559
they did their testing they did not

565
00:22:40,559 --> 00:22:41,840
exist until

566
00:22:41,840 --> 00:22:44,559
after it was released and or obfuscated

567
00:22:44,559 --> 00:22:47,120
in a release build

568
00:22:47,120 --> 00:22:51,600
so i mean that's pretty neat okay

569
00:22:53,520 --> 00:22:57,200
so so

570
00:22:57,919 --> 00:23:00,720
a couple novel attacks i say that

571
00:23:00,720 --> 00:23:02,640
because i could not find

572
00:23:02,640 --> 00:23:05,520
any other instances of it so if anyone

573
00:23:05,520 --> 00:23:06,799
is doing it i forgot

574
00:23:06,799 --> 00:23:10,240
i apologize for that uh but basically

575
00:23:10,240 --> 00:23:12,240
we're going to treat the android app as

576
00:23:12,240 --> 00:23:14,320
a java app and in fact

577
00:23:14,320 --> 00:23:17,760
what i generally do is run decks to jar

578
00:23:17,760 --> 00:23:20,559
and and actually convert it to an actual

579
00:23:20,559 --> 00:23:21,200
java app

580
00:23:21,200 --> 00:23:25,200
and what that lets you do is

581
00:23:25,280 --> 00:23:27,120
so if there's a let's say there's a

582
00:23:27,120 --> 00:23:28,799
vulnerable

583
00:23:28,799 --> 00:23:31,520
object class with the deserialization

584
00:23:31,520 --> 00:23:32,720
bug

585
00:23:32,720 --> 00:23:35,039
it actually lets you just run java to

586
00:23:35,039 --> 00:23:36,480
see it at the command line

587
00:23:36,480 --> 00:23:39,679
dash jar with what was an apk but it's

588
00:23:39,679 --> 00:23:40,720
now a jar

589
00:23:40,720 --> 00:23:43,440
and you can instantiate that class and

590
00:23:43,440 --> 00:23:44,320
create your own

591
00:23:44,320 --> 00:23:46,640
instance and it makes it a little bit

592
00:23:46,640 --> 00:23:47,679
easier to

593
00:23:47,679 --> 00:23:51,440
to attack it also helps you

594
00:23:51,440 --> 00:23:55,200
so if you can so like i actually do most

595
00:23:55,200 --> 00:23:57,600
of my android testing on a non-rooted

596
00:23:57,600 --> 00:24:01,200
phone which obviously makes it difficult

597
00:24:01,200 --> 00:24:05,120
it's probably silly of me but it's just

598
00:24:05,120 --> 00:24:06,720
there's several reasons why i did that

599
00:24:06,720 --> 00:24:08,640
anyway what helps

600
00:24:08,640 --> 00:24:10,480
is being able to take that apk convert

601
00:24:10,480 --> 00:24:12,720
it to a jar and then if i want to

602
00:24:12,720 --> 00:24:14,880
exercise a particular code block i can

603
00:24:14,880 --> 00:24:17,200
do that and i can do it in a

604
00:24:17,200 --> 00:24:19,200
environment where i have debug

605
00:24:19,200 --> 00:24:20,320
capabilities

606
00:24:20,320 --> 00:24:25,039
and uh and i don't need group

607
00:24:27,840 --> 00:24:31,200
so i'll touch on this again the method

608
00:24:31,200 --> 00:24:31,760
name

609
00:24:31,760 --> 00:24:34,960
is central to resolution and

610
00:24:34,960 --> 00:24:38,720
invocation of function calls in java

611
00:24:38,720 --> 00:24:42,559
and so what happens is

612
00:24:42,559 --> 00:24:45,200
if uh well i'm going to show you a

613
00:24:45,200 --> 00:24:46,720
better picture here but i'll explain it

614
00:24:46,720 --> 00:24:47,360
now

615
00:24:47,360 --> 00:24:50,960
if you have two classes

616
00:24:50,960 --> 00:24:54,320
and they have the same parent

617
00:24:54,320 --> 00:24:57,279
and one of them let's say they're it's a

618
00:24:57,279 --> 00:24:59,679
person class and you have man and woman

619
00:24:59,679 --> 00:25:02,799
and woman has a function that man does

620
00:25:02,799 --> 00:25:03,440
not have

621
00:25:03,440 --> 00:25:04,960
and man has a function that woman does

622
00:25:04,960 --> 00:25:07,120
not have

623
00:25:07,120 --> 00:25:10,000
and then you

624
00:25:10,480 --> 00:25:15,279
obfuscate those classes

625
00:25:15,279 --> 00:25:18,559
it's just going after numerically so

626
00:25:18,559 --> 00:25:20,240
the uh the function that the woman had

627
00:25:20,240 --> 00:25:22,480
that the man didn't could be

628
00:25:22,480 --> 00:25:26,400
it could become c and then the function

629
00:25:26,400 --> 00:25:28,240
that the man had that the woman didn't

630
00:25:28,240 --> 00:25:30,080
also becomes seen

631
00:25:30,080 --> 00:25:32,720
and you get in this situation where if

632
00:25:32,720 --> 00:25:33,520
you can get

633
00:25:33,520 --> 00:25:37,600
the the application to deserialize

634
00:25:37,600 --> 00:25:41,760
the wrong class and that uh

635
00:25:41,760 --> 00:25:45,679
read object implementation calls

636
00:25:45,679 --> 00:25:48,960
c you've just

637
00:25:48,960 --> 00:25:53,039
expanded the potential range of

638
00:25:53,039 --> 00:25:56,159
of gadgets substantially

639
00:25:56,159 --> 00:25:58,240
and i'll explain that a little bit more

640
00:25:58,240 --> 00:26:00,480
in a second

641
00:26:00,480 --> 00:26:03,520
okay so thinking of this in terms of a

642
00:26:03,520 --> 00:26:03,919
tale

643
00:26:03,919 --> 00:26:07,039
of four classes what we have on the left

644
00:26:07,039 --> 00:26:09,120
is a friendly class writes a vulnerable

645
00:26:09,120 --> 00:26:11,039
class so

646
00:26:11,039 --> 00:26:14,240
not necessarily evil just a third-party

647
00:26:14,240 --> 00:26:14,960
library

648
00:26:14,960 --> 00:26:18,000
that no one realized is vulnerable on

649
00:26:18,000 --> 00:26:19,960
the left

650
00:26:19,960 --> 00:26:24,960
unobfuscated basically

651
00:26:24,960 --> 00:26:28,320
we have i'm going to go down to the read

652
00:26:28,320 --> 00:26:29,520
object method here

653
00:26:29,520 --> 00:26:31,600
we're going to read an object off of

654
00:26:31,600 --> 00:26:33,440
that stream and then call

655
00:26:33,440 --> 00:26:37,120
a function upon that object

656
00:26:37,120 --> 00:26:40,640
this is a very simplified

657
00:26:40,640 --> 00:26:42,480
use case i mean anybody who's written

658
00:26:42,480 --> 00:26:44,559
java is going to know that

659
00:26:44,559 --> 00:26:46,880
that code will not compile but it's it's

660
00:26:46,880 --> 00:26:49,200
for illustrative purposes

661
00:26:49,200 --> 00:26:51,600
when it's obfuscated that class will

662
00:26:51,600 --> 00:26:52,240
become a

663
00:26:52,240 --> 00:26:55,600
a and string becomes a

664
00:26:55,600 --> 00:26:57,840
you know going down the line there what

665
00:26:57,840 --> 00:26:58,720
you end up with

666
00:26:58,720 --> 00:27:02,640
is at the bottom y dot b

667
00:27:02,640 --> 00:27:06,159
and that is very generic and stepping

668
00:27:06,159 --> 00:27:07,760
over to the vulnerable class

669
00:27:07,760 --> 00:27:11,600
we have a similar structure

670
00:27:11,600 --> 00:27:13,760
it doesn't have to have the same names

671
00:27:13,760 --> 00:27:14,640
and in fact

672
00:27:14,640 --> 00:27:18,399
that's where the

673
00:27:18,399 --> 00:27:21,679
the novelty of this comes from

674
00:27:21,679 --> 00:27:25,120
so in this instance also with the read

675
00:27:25,120 --> 00:27:26,880
object we instantiate it and we call

676
00:27:26,880 --> 00:27:27,840
upon

677
00:27:27,840 --> 00:27:31,760
a function upon the instantiated object

678
00:27:31,760 --> 00:27:34,480
and but that one has a different name

679
00:27:34,480 --> 00:27:35,760
it's run command and it's

680
00:27:35,760 --> 00:27:39,200
it runs you know the shell

681
00:27:39,200 --> 00:27:41,360
well when we obfuscate that we get bb

682
00:27:41,360 --> 00:27:42,720
and so on

683
00:27:42,720 --> 00:27:45,440
uh moral of the story being the very

684
00:27:45,440 --> 00:27:46,159
last line

685
00:27:46,159 --> 00:27:48,960
in both cases you end up with y dot b

686
00:27:48,960 --> 00:27:50,240
and so

687
00:27:50,240 --> 00:27:54,080
if you are attacking an an application

688
00:27:54,080 --> 00:27:55,279
and looking for

689
00:27:55,279 --> 00:27:58,960
vulnerable java object deserialization

690
00:27:58,960 --> 00:28:02,880
a key element to that is a class to the

691
00:28:02,880 --> 00:28:06,080
class path that you can deserialize and

692
00:28:06,080 --> 00:28:06,559
that

693
00:28:06,559 --> 00:28:09,919
has a function with the same method

694
00:28:09,919 --> 00:28:10,559
signature

695
00:28:10,559 --> 00:28:12,080
as that which is called in the

696
00:28:12,080 --> 00:28:14,320
vulnerable read object method

697
00:28:14,320 --> 00:28:18,080
and that's a mouthful but

698
00:28:18,960 --> 00:28:22,159
what this does is instead of having to

699
00:28:22,159 --> 00:28:23,520
call

700
00:28:23,520 --> 00:28:26,720
uh my full name upper which is

701
00:28:26,720 --> 00:28:28,880
very unlikely to exist in any other

702
00:28:28,880 --> 00:28:30,960
class now all you have to have is a

703
00:28:30,960 --> 00:28:31,679
class

704
00:28:31,679 --> 00:28:33,760
with the function b which is basically

705
00:28:33,760 --> 00:28:36,159
every class

706
00:28:36,159 --> 00:28:38,640
and now the key there though is being

707
00:28:38,640 --> 00:28:41,520
able to get it to deserialize it but

708
00:28:41,520 --> 00:28:43,919
look into deserialization that we're not

709
00:28:43,919 --> 00:28:46,159
actually worried about it completing

710
00:28:46,159 --> 00:28:50,399
the deserialization process so

711
00:28:50,399 --> 00:28:54,080
kind of neat so we i've illustrated it

712
00:28:54,080 --> 00:28:56,720
here a little bit

713
00:28:57,600 --> 00:29:01,000
basically if i was to take the

714
00:29:01,000 --> 00:29:03,600
unobfuscated vulnerable class from the

715
00:29:03,600 --> 00:29:04,720
first picture

716
00:29:04,720 --> 00:29:07,600
over here and pass it into this read

717
00:29:07,600 --> 00:29:09,039
object method

718
00:29:09,039 --> 00:29:13,120
i would get amongst other things

719
00:29:13,120 --> 00:29:16,720
no such method error if i

720
00:29:16,720 --> 00:29:20,000
take this bb object

721
00:29:20,000 --> 00:29:22,559
serialized and hand it to this read

722
00:29:22,559 --> 00:29:25,200
object method

723
00:29:25,600 --> 00:29:29,360
i get profit

724
00:29:30,399 --> 00:29:34,639
okay so with that let me

725
00:29:36,000 --> 00:29:39,360
switch over here to well i think i need

726
00:29:39,360 --> 00:29:40,159
to change

727
00:29:40,159 --> 00:29:44,240
my window

728
00:29:45,039 --> 00:29:55,840
bear with me up here

729
00:30:06,840 --> 00:30:09,840
okay

730
00:30:10,320 --> 00:30:13,679
okay so

731
00:30:13,679 --> 00:30:15,840
so this is a class that i did that on

732
00:30:15,840 --> 00:30:18,080
and

733
00:30:20,840 --> 00:30:22,799
basically

734
00:30:22,799 --> 00:30:26,000
we have so

735
00:30:26,000 --> 00:30:27,760
and this is where if you look it up or

736
00:30:27,760 --> 00:30:29,279
you know you watch a youtube video or

737
00:30:29,279 --> 00:30:31,200
some education material they're like

738
00:30:31,200 --> 00:30:33,279
yeah i mean it's it's you can't even

739
00:30:33,279 --> 00:30:34,640
make sense of it

740
00:30:34,640 --> 00:30:36,000
and so they have a good point i'm

741
00:30:36,000 --> 00:30:37,200
sitting here trying to think of how best

742
00:30:37,200 --> 00:30:38,799
to explain it to you

743
00:30:38,799 --> 00:30:41,120
uh it's difficult so basically though

744
00:30:41,120 --> 00:30:41,840
what we have

745
00:30:41,840 --> 00:30:45,840
is a is

746
00:30:46,720 --> 00:30:51,440
our parent so okay

747
00:30:51,440 --> 00:30:54,320
somewhere here we have an abstract class

748
00:30:54,320 --> 00:30:56,640
let's go look

749
00:30:56,640 --> 00:30:58,880
f

750
00:31:00,880 --> 00:31:03,679
okay so basically in my source code this

751
00:31:03,679 --> 00:31:04,159
is

752
00:31:04,159 --> 00:31:08,559
just a real basic plc we have a

753
00:31:08,559 --> 00:31:11,679
a like a root level abstract

754
00:31:11,679 --> 00:31:14,720
parent class and it's got just some you

755
00:31:14,720 --> 00:31:15,919
know random function

756
00:31:15,919 --> 00:31:18,240
it's not defined here other than the

757
00:31:18,240 --> 00:31:19,519
fact that it exists

758
00:31:19,519 --> 00:31:22,320
so it has to be declared it's declared

759
00:31:22,320 --> 00:31:24,240
here not defined in the

760
00:31:24,240 --> 00:31:27,840
in the child so d

761
00:31:27,840 --> 00:31:31,120
and e are two

762
00:31:31,120 --> 00:31:33,919
classes basically like man and woman in

763
00:31:33,919 --> 00:31:34,399
the

764
00:31:34,399 --> 00:31:37,760
as i just was describing before uh that

765
00:31:37,760 --> 00:31:40,000
extend that abstract class and implement

766
00:31:40,000 --> 00:31:41,200
some unique

767
00:31:41,200 --> 00:31:44,399
behavior of their own and what you end

768
00:31:44,399 --> 00:31:44,960
up with

769
00:31:44,960 --> 00:31:48,559
is if you look here so

770
00:31:48,559 --> 00:31:51,840
a comes from

771
00:31:52,080 --> 00:31:55,120
well they have their own a and then they

772
00:31:55,120 --> 00:31:55,600
have

773
00:31:55,600 --> 00:31:59,440
a as is defined in the parent abstract

774
00:31:59,440 --> 00:32:00,880
class

775
00:32:00,880 --> 00:32:04,799
and the key here is if you look here

776
00:32:04,799 --> 00:32:06,640
they have the same name same parameters

777
00:32:06,640 --> 00:32:08,320
same return type meaning

778
00:32:08,320 --> 00:32:11,279
they're the same signature and being

779
00:32:11,279 --> 00:32:12,799
from the same parent

780
00:32:12,799 --> 00:32:16,960
you can craft a payload that will get

781
00:32:16,960 --> 00:32:20,000
d to deserialize e

782
00:32:20,000 --> 00:32:23,120
and well

783
00:32:23,120 --> 00:32:24,320
i think it's the other way around that

784
00:32:24,320 --> 00:32:26,559
they're vulnerable i have to look but

785
00:32:26,559 --> 00:32:29,279
that's the basic premise of it and uh

786
00:32:29,279 --> 00:32:31,760
it's actually

787
00:32:31,760 --> 00:32:35,120
all over the place once you start

788
00:32:35,120 --> 00:32:37,279
looking at it once you start

789
00:32:37,279 --> 00:32:40,840
considering proxy classes and

790
00:32:40,840 --> 00:32:43,840
um

791
00:32:44,320 --> 00:32:47,360
interfaces and stuff

792
00:32:47,519 --> 00:32:50,399
it's it's very interesting so if you

793
00:32:50,399 --> 00:32:52,240
look at some of the work

794
00:32:52,240 --> 00:32:54,799
from matthias kaiser in particular he

795
00:32:54,799 --> 00:32:55,279
found

796
00:32:55,279 --> 00:32:58,000
a lot of the proxy gadgets that use

797
00:32:58,000 --> 00:32:59,600
invoker handler

798
00:32:59,600 --> 00:33:03,519
and he illustrates the gadget chain

799
00:33:03,519 --> 00:33:06,960
and it highlights basically

800
00:33:06,960 --> 00:33:09,039
that having a function with the same

801
00:33:09,039 --> 00:33:10,000
name

802
00:33:10,000 --> 00:33:12,960
is essential and that that's one of the

803
00:33:12,960 --> 00:33:16,000
biggest hurdles to overcome

804
00:33:16,000 --> 00:33:18,480
well this basically eliminates that for

805
00:33:18,480 --> 00:33:19,600
you

806
00:33:19,600 --> 00:33:22,080
the difficulty becomes at this point

807
00:33:22,080 --> 00:33:23,519
just getting a class

808
00:33:23,519 --> 00:33:24,720
that you're going to be able to call

809
00:33:24,720 --> 00:33:27,919
that method on and that's where

810
00:33:27,919 --> 00:33:31,519
uh where proxy classes and reflection

811
00:33:31,519 --> 00:33:33,360
especially will help you

812
00:33:33,360 --> 00:33:37,600
which let me switch back

813
00:33:37,679 --> 00:33:41,200
takes us onto our next slide

814
00:33:48,799 --> 00:33:53,840
yeah okay okay so

815
00:33:56,240 --> 00:34:00,159
so the way i came upon this

816
00:34:00,159 --> 00:34:03,360
actually was

817
00:34:03,360 --> 00:34:06,159
i was working on an app and i don't

818
00:34:06,159 --> 00:34:08,159
remember exactly what i saw but i just

819
00:34:08,159 --> 00:34:09,760
saw like a function name or something

820
00:34:09,760 --> 00:34:11,520
that was

821
00:34:11,520 --> 00:34:15,040
odd a lot of times you'll see

822
00:34:15,040 --> 00:34:17,280
a lot of the code is obfuscated but not

823
00:34:17,280 --> 00:34:19,040
all of it and that goes back to those

824
00:34:19,040 --> 00:34:20,159
proguard rules

825
00:34:20,159 --> 00:34:23,599
and so some class was not and there's a

826
00:34:23,599 --> 00:34:24,560
third party library

827
00:34:24,560 --> 00:34:26,639
and it it was one of these qa

828
00:34:26,639 --> 00:34:27,760
instrumentation

829
00:34:27,760 --> 00:34:31,280
classes or tools and

830
00:34:31,280 --> 00:34:32,639
and it was something like you know

831
00:34:32,639 --> 00:34:34,800
create class and i was like wait a

832
00:34:34,800 --> 00:34:35,599
minute

833
00:34:35,599 --> 00:34:37,520
you've got a class that creates classes

834
00:34:37,520 --> 00:34:39,040
in your class path

835
00:34:39,040 --> 00:34:43,280
i want that and uh and sure enough

836
00:34:43,280 --> 00:34:45,839
that's exactly what it was and so i had

837
00:34:45,839 --> 00:34:47,280
a lot of fun with this but

838
00:34:47,280 --> 00:34:50,480
it also became pretty challenging so i

839
00:34:50,480 --> 00:34:51,679
knew that i had

840
00:34:51,679 --> 00:34:55,359
mojito in the class path and i knew

841
00:34:55,359 --> 00:34:58,480
that i could create a mock as they call

842
00:34:58,480 --> 00:34:59,119
it

843
00:34:59,119 --> 00:35:02,320
a serializable mock that will

844
00:35:02,320 --> 00:35:04,240
create a class in the class path of my

845
00:35:04,240 --> 00:35:06,160
choosing upon deserialization

846
00:35:06,160 --> 00:35:09,440
which is like the holy grail of

847
00:35:09,440 --> 00:35:12,480
of deterioration

848
00:35:12,480 --> 00:35:16,000
however it was really goofy some of the

849
00:35:16,000 --> 00:35:16,800
classes were

850
00:35:16,800 --> 00:35:19,680
were obfuscated and some weren't and so

851
00:35:19,680 --> 00:35:20,640
getting that

852
00:35:20,640 --> 00:35:23,839
to work was very very challenging

853
00:35:23,839 --> 00:35:27,040
and what i came down to was looking for

854
00:35:27,040 --> 00:35:30,320
static values in the source that did not

855
00:35:30,320 --> 00:35:30,960
get changed

856
00:35:30,960 --> 00:35:34,160
by objection and actually i failed to

857
00:35:34,160 --> 00:35:34,560
put

858
00:35:34,560 --> 00:35:36,320
i wanted to put another slide there has

859
00:35:36,320 --> 00:35:38,000
been some research on this

860
00:35:38,000 --> 00:35:42,000
and they basically suggested

861
00:35:42,000 --> 00:35:45,040
basically a similar approach uh and it's

862
00:35:45,040 --> 00:35:45,920
the

863
00:35:45,920 --> 00:35:48,320
if you have a serializable class the uid

864
00:35:48,320 --> 00:35:49,200
here will

865
00:35:49,200 --> 00:35:52,320
will be a very clear telltale sign

866
00:35:52,320 --> 00:35:55,200
because that's a theoretically should be

867
00:35:55,200 --> 00:35:57,040
a unique number to that class

868
00:35:57,040 --> 00:35:59,200
and you can go to github put that in

869
00:35:59,200 --> 00:36:00,480
there and find out

870
00:36:00,480 --> 00:36:04,079
what what library is in that application

871
00:36:04,079 --> 00:36:06,720
so it's a really good way like if you

872
00:36:06,720 --> 00:36:08,480
just open up jdx gui

873
00:36:08,480 --> 00:36:10,880
do a search across the entire app for

874
00:36:10,880 --> 00:36:12,560
serial version uid

875
00:36:12,560 --> 00:36:17,599
anything that's not uh 0 or 42l

876
00:36:17,599 --> 00:36:19,280
and there's a big long number like this

877
00:36:19,280 --> 00:36:21,119
that's basically a fingerprint

878
00:36:21,119 --> 00:36:25,599
and you can run from there but even then

879
00:36:25,599 --> 00:36:28,160
even say with maquito not every single

880
00:36:28,160 --> 00:36:29,040
class in that

881
00:36:29,040 --> 00:36:31,680
library is serializable not all of them

882
00:36:31,680 --> 00:36:33,040
are going to have that value

883
00:36:33,040 --> 00:36:34,400
in fact not all of them are going to

884
00:36:34,400 --> 00:36:36,800
have a string

885
00:36:36,800 --> 00:36:39,200
which is another useful tool for

886
00:36:39,200 --> 00:36:40,400
fingerprinting them

887
00:36:40,400 --> 00:36:44,720
so if you have a class that

888
00:36:44,720 --> 00:36:46,000
a third-party library it's been

889
00:36:46,000 --> 00:36:48,160
obfuscated and it writes an

890
00:36:48,160 --> 00:36:51,359
error message to the log or file or

891
00:36:51,359 --> 00:36:52,560
something like that

892
00:36:52,560 --> 00:36:54,480
well that can also be fingerprints if

893
00:36:54,480 --> 00:36:56,160
it's in quotes odds are

894
00:36:56,160 --> 00:36:58,000
it's not going to be touched by proguard

895
00:36:58,000 --> 00:37:00,240
or r8 and then

896
00:37:00,240 --> 00:37:02,480
you can use that where it became very

897
00:37:02,480 --> 00:37:04,480
challenging is when you have a class

898
00:37:04,480 --> 00:37:08,480
kind of like that abstract class that

899
00:37:08,480 --> 00:37:10,480
well not kind of like it's exactly like

900
00:37:10,480 --> 00:37:13,359
a parent abstract class or an interface

901
00:37:13,359 --> 00:37:16,960
that doesn't do a lot and by design

902
00:37:16,960 --> 00:37:20,079
well you still likely will need to know

903
00:37:20,079 --> 00:37:22,960
the entire hierarchical structure to be

904
00:37:22,960 --> 00:37:24,400
able to successfully

905
00:37:24,400 --> 00:37:27,920
exploit and so those are the challenging

906
00:37:27,920 --> 00:37:28,400
ones

907
00:37:28,400 --> 00:37:31,599
and it was very fun the approach i took

908
00:37:31,599 --> 00:37:35,200
was basically established all the ones

909
00:37:35,200 --> 00:37:36,160
that i can

910
00:37:36,160 --> 00:37:39,280
using the static from fingerprint

911
00:37:39,280 --> 00:37:42,079
capabilities and then literally go

912
00:37:42,079 --> 00:37:42,640
through

913
00:37:42,640 --> 00:37:45,119
the remaining classes by hand and say

914
00:37:45,119 --> 00:37:46,160
okay so like

915
00:37:46,160 --> 00:37:50,000
this one imports these libraries

916
00:37:50,000 --> 00:37:52,560
and then it's got these variables of

917
00:37:52,560 --> 00:37:54,000
this type

918
00:37:54,000 --> 00:37:56,400
and then they're all gobbly goop names

919
00:37:56,400 --> 00:37:57,839
but i know the type

920
00:37:57,839 --> 00:37:59,839
and i know how many functions they have

921
00:37:59,839 --> 00:38:02,400
i know how many what they return

922
00:38:02,400 --> 00:38:04,800
so that helped a lot and actually i was

923
00:38:04,800 --> 00:38:06,960
basically able to

924
00:38:06,960 --> 00:38:10,240
fully uh

925
00:38:10,240 --> 00:38:11,680
i'm not sure what the right word is but

926
00:38:11,680 --> 00:38:14,078
basically

927
00:38:15,280 --> 00:38:18,640
document the uh the entire class

928
00:38:18,640 --> 00:38:20,800
structure that i needed to be able to

929
00:38:20,800 --> 00:38:24,000
provide that serializable mock to have

930
00:38:24,000 --> 00:38:26,400
it deserialized

931
00:38:26,400 --> 00:38:30,160
and then that's what i found out

932
00:38:30,400 --> 00:38:32,400
uh it had renamed the read resolve

933
00:38:32,400 --> 00:38:33,760
method which was key

934
00:38:33,760 --> 00:38:37,040
to to instantiating that class

935
00:38:37,040 --> 00:38:38,880
and the whole exploit didn't work and i

936
00:38:38,880 --> 00:38:40,400
had to go a different way

937
00:38:40,400 --> 00:38:43,599
but that was just that one app

938
00:38:43,599 --> 00:38:45,920
and there are definitely others where

939
00:38:45,920 --> 00:38:48,079
that is not the case

940
00:38:48,079 --> 00:38:50,720
and going back to you know the copy

941
00:38:50,720 --> 00:38:52,960
paste from stack overflow

942
00:38:52,960 --> 00:38:56,160
the one i see the most often basically

943
00:38:56,160 --> 00:38:57,040
has like

944
00:38:57,040 --> 00:38:58,880
read object read resolve right object

945
00:38:58,880 --> 00:39:00,560
write resolve so

946
00:39:00,560 --> 00:39:03,440
if they fail to remove instrumentation

947
00:39:03,440 --> 00:39:05,280
libraries

948
00:39:05,280 --> 00:39:08,960
a huge gaping hole

949
00:39:08,960 --> 00:39:11,760
and basically

950
00:39:12,320 --> 00:39:16,560
you know unprecedented opportunity for

951
00:39:16,560 --> 00:39:20,400
rce however it is

952
00:39:20,400 --> 00:39:25,280
difficult and time consuming but

953
00:39:25,280 --> 00:39:27,440
the payoff is pretty big as well thank

954
00:39:27,440 --> 00:39:29,200
you very much that was uh that was

955
00:39:29,200 --> 00:39:31,280
certainly was a real deep dive into

956
00:39:31,280 --> 00:39:33,280
into object deserialization in in

957
00:39:33,280 --> 00:39:34,480
android

958
00:39:34,480 --> 00:39:37,760
um the uh the one thing that stood out

959
00:39:37,760 --> 00:39:39,440
to me that i wanted to ask

960
00:39:39,440 --> 00:39:43,280
was um has do kotlin apps

961
00:39:43,280 --> 00:39:45,359
are they vulnerable to similar to

962
00:39:45,359 --> 00:39:47,040
similar desiralization or it's been a

963
00:39:47,040 --> 00:39:47,920
while since i've

964
00:39:47,920 --> 00:39:49,760
i've authored any android applications

965
00:39:49,760 --> 00:39:52,160
but uh i'm certainly interested to to

966
00:39:52,160 --> 00:39:53,359
find out if kotlin's

967
00:39:53,359 --> 00:39:55,760
vulnerable to the same sort of yeah

968
00:39:55,760 --> 00:39:56,560
actually

969
00:39:56,560 --> 00:40:00,640
that's uh something i want that's my

970
00:40:00,640 --> 00:40:03,280
well not my next but it's on the list i

971
00:40:03,280 --> 00:40:05,280
basically have zero experience with it

972
00:40:05,280 --> 00:40:07,280
but what i did find as i was going

973
00:40:07,280 --> 00:40:08,640
through there is the way that it's

974
00:40:08,640 --> 00:40:09,680
implemented

975
00:40:09,680 --> 00:40:12,720
is using basically these new uh

976
00:40:12,720 --> 00:40:17,440
uses lambdas a whole lot and so

977
00:40:17,440 --> 00:40:19,280
that's that's perfect when you have

978
00:40:19,280 --> 00:40:21,040
something that is using

979
00:40:21,040 --> 00:40:26,000
uh dynamic typing on the fly

980
00:40:26,000 --> 00:40:28,880
yeah super cool yeah i think there's

981
00:40:28,880 --> 00:40:30,640
some opportunity there

982
00:40:30,640 --> 00:40:33,920
yeah absolutely yeah it's a

983
00:40:33,920 --> 00:40:35,440
there's yeah there's certainly a lot of

984
00:40:35,440 --> 00:40:37,119
a lot of research that can be done in in

985
00:40:37,119 --> 00:40:38,000
the kotlin area for

986
00:40:38,000 --> 00:40:40,240
sure

987
00:40:42,240 --> 00:40:45,680
so the you mentioned there was a

988
00:40:45,680 --> 00:40:48,640
um a static id there in in one of your

989
00:40:48,640 --> 00:40:49,599
last

990
00:40:49,599 --> 00:40:51,760
one of your last slides there is there a

991
00:40:51,760 --> 00:40:53,680
good reference for those static values

992
00:40:53,680 --> 00:40:56,240
that are available online as there may

993
00:40:56,240 --> 00:40:57,520
be someone keeping track of them on

994
00:40:57,520 --> 00:40:58,240
github for

995
00:40:58,240 --> 00:41:03,440
for bounty hunters or i'm not sure i

996
00:41:03,440 --> 00:41:06,480
i don't think so but

997
00:41:06,480 --> 00:41:08,240
there could be there was definitely some

998
00:41:08,240 --> 00:41:10,319
research done i wouldn't be surprised if

999
00:41:10,319 --> 00:41:11,520
those people

1000
00:41:11,520 --> 00:41:14,720
had done it what i did was actually just

1001
00:41:14,720 --> 00:41:17,119
plug it into the search uh at the top

1002
00:41:17,119 --> 00:41:18,400
right and

1003
00:41:18,400 --> 00:41:20,880
like eight times out of ten it would

1004
00:41:20,880 --> 00:41:21,520
tell me

1005
00:41:21,520 --> 00:41:24,400
bam there it is and actually what's cool

1006
00:41:24,400 --> 00:41:25,440
is a lot of times it would

1007
00:41:25,440 --> 00:41:27,599
increment it would change in versions so

1008
00:41:27,599 --> 00:41:30,640
it not only can it tell you the class

1009
00:41:30,640 --> 00:41:32,079
but in some instances it will actually

1010
00:41:32,079 --> 00:41:34,400
tell you a version

1011
00:41:34,400 --> 00:41:36,800
and help you fingerprint if it's

1012
00:41:36,800 --> 00:41:37,599
vulnerable

1013
00:41:37,599 --> 00:41:40,079
yeah are there um is there any tooling

1014
00:41:40,079 --> 00:41:42,000
to comparatively fuzz that so you can

1015
00:41:42,000 --> 00:41:42,960
take the github

1016
00:41:42,960 --> 00:41:45,280
version of a tool and comparatively fuzz

1017
00:41:45,280 --> 00:41:46,240
the method

1018
00:41:46,240 --> 00:41:49,359
the method and class names

1019
00:41:49,359 --> 00:41:52,720
not that i know of but that would be the

1020
00:41:52,720 --> 00:41:55,440
cool project there we go yeah someone

1021
00:41:55,440 --> 00:41:56,319
someone watching this

1022
00:41:56,319 --> 00:41:58,720
is can go and run with that that'd be a

1023
00:41:58,720 --> 00:41:59,599
be a good

1024
00:41:59,599 --> 00:42:03,040
useful project machine learning on it

1025
00:42:03,040 --> 00:42:05,520
yeah very true very true actually as it

1026
00:42:05,520 --> 00:42:07,280
might be

1027
00:42:07,280 --> 00:42:09,520
seems to be a theme kind of bubbling up

1028
00:42:09,520 --> 00:42:11,359
out of this level up

1029
00:42:11,359 --> 00:42:13,200
yeah i guess yeah we're starting another

1030
00:42:13,200 --> 00:42:15,440
startup right

1031
00:42:15,440 --> 00:42:17,520
beyond that as well uh you mentioned not

1032
00:42:17,520 --> 00:42:19,760
renaming certain entry points two

1033
00:42:19,760 --> 00:42:20,960
questions of that

1034
00:42:20,960 --> 00:42:22,720
could you fuzz that which it sounds like

1035
00:42:22,720 --> 00:42:24,079
you could and

1036
00:42:24,079 --> 00:42:27,040
is there any known reference points for

1037
00:42:27,040 --> 00:42:28,960
those entry like beyond entry points

1038
00:42:28,960 --> 00:42:30,000
anything else you just shouldn't

1039
00:42:30,000 --> 00:42:32,800
rename when you're exploring with this

1040
00:42:32,800 --> 00:42:33,359
oh

1041
00:42:33,359 --> 00:42:35,280
that's a good question actually uh i

1042
00:42:35,280 --> 00:42:37,440
meant to mention

1043
00:42:37,440 --> 00:42:39,680
i think developers don't consider read

1044
00:42:39,680 --> 00:42:40,880
object actually

1045
00:42:40,880 --> 00:42:43,599
is an entry point into your application

1046
00:42:43,599 --> 00:42:45,599
and so

1047
00:42:45,599 --> 00:42:49,040
yeah it's easy to forget that and uh

1048
00:42:49,040 --> 00:42:51,520
and all the other ones and if you're

1049
00:42:51,520 --> 00:42:52,319
using you know

1050
00:42:52,319 --> 00:42:55,119
jax b or the xml deserializer all of

1051
00:42:55,119 --> 00:42:55,520
those

1052
00:42:55,520 --> 00:42:58,880
are places where data can become

1053
00:42:58,880 --> 00:43:01,119
you know crossed into the control plane

1054
00:43:01,119 --> 00:43:03,040
and i would say

1055
00:43:03,040 --> 00:43:06,319
yeah yeah that's good

1056
00:43:06,319 --> 00:43:10,000
yeah it was interesting talker it um

1057
00:43:10,000 --> 00:43:11,520
what are what are the current projects

1058
00:43:11,520 --> 00:43:13,040
you're kind of looking at beyond so with

1059
00:43:13,040 --> 00:43:14,560
the theory and everything you've kind of

1060
00:43:14,560 --> 00:43:16,000
presented there what's the

1061
00:43:16,000 --> 00:43:17,359
what's the area of this that you're kind

1062
00:43:17,359 --> 00:43:20,560
of diving into most at the moment

1063
00:43:20,560 --> 00:43:24,560
um well actually i guess the apartment

1064
00:43:24,560 --> 00:43:26,400
was the thing i end up spending the most

1065
00:43:26,400 --> 00:43:27,599
time on

1066
00:43:27,599 --> 00:43:30,560
uh just because i mean the problem with

1067
00:43:30,560 --> 00:43:32,240
this is it is incredibly

1068
00:43:32,240 --> 00:43:34,160
tedious and time consuming and next

1069
00:43:34,160 --> 00:43:35,760
thing you know you're like

1070
00:43:35,760 --> 00:43:39,200
your head's spinning so

1071
00:43:39,200 --> 00:43:41,200
don't make a lot of progress on that one

1072
00:43:41,200 --> 00:43:42,319
but

1073
00:43:42,319 --> 00:43:44,000
it's something i kind of come back to

1074
00:43:44,000 --> 00:43:46,319
every once in a while

1075
00:43:46,319 --> 00:43:48,480
i have the idea that like you could

1076
00:43:48,480 --> 00:43:50,400
basically hit all the

1077
00:43:50,400 --> 00:43:54,560
google app store the play or

1078
00:43:54,560 --> 00:43:58,400
absent yeah

1079
00:43:58,400 --> 00:44:00,000
so these these techniques for

1080
00:44:00,000 --> 00:44:02,160
deserialization do they apply at all to

1081
00:44:02,160 --> 00:44:02,640
ios

1082
00:44:02,640 --> 00:44:04,160
applications or is a completely

1083
00:44:04,160 --> 00:44:06,160
different world or is

1084
00:44:06,160 --> 00:44:07,760
is there anything we can take away to

1085
00:44:07,760 --> 00:44:10,160
for people who to only look at ios

1086
00:44:10,160 --> 00:44:13,200
perhaps i'm not sure i mean i've done a

1087
00:44:13,200 --> 00:44:15,119
little bit of ios but just because it's

1088
00:44:15,119 --> 00:44:16,000
a black box

1089
00:44:16,000 --> 00:44:18,560
and uh

1090
00:44:19,200 --> 00:44:20,720
i don't know so last time i played with

1091
00:44:20,720 --> 00:44:22,000
it like you couldn't really get to the

1092
00:44:22,000 --> 00:44:23,280
source code it was like

1093
00:44:23,280 --> 00:44:25,040
signed and encrypted and that's

1094
00:44:25,040 --> 00:44:26,480
basically when i stopped so

1095
00:44:26,480 --> 00:44:29,920
i mean if it's using java absolutely

1096
00:44:29,920 --> 00:44:32,640
yeah i mean all of these so all these

1097
00:44:32,640 --> 00:44:34,640
apply to java apps as well

1098
00:44:34,640 --> 00:44:37,280
and you know proguard is not only an

1099
00:44:37,280 --> 00:44:38,560
android thing it's

1100
00:44:38,560 --> 00:44:41,280
actually i think it came from the java

1101
00:44:41,280 --> 00:44:42,240
world

1102
00:44:42,240 --> 00:44:45,920
yeah just on the um you know you're

1103
00:44:45,920 --> 00:44:47,119
talking about your

1104
00:44:47,119 --> 00:44:48,640
your projects and it being time

1105
00:44:48,640 --> 00:44:50,000
consuming it's another question that

1106
00:44:50,000 --> 00:44:51,440
we've had come in from discord is there

1107
00:44:51,440 --> 00:44:53,359
any parts of your analysis that you you

1108
00:44:53,359 --> 00:44:53,920
typically

1109
00:44:53,920 --> 00:44:56,000
automate if you if you're giving

1110
00:44:56,000 --> 00:44:57,760
automation tips to

1111
00:44:57,760 --> 00:45:00,640
to seasoned or even new android hackers

1112
00:45:00,640 --> 00:45:03,200
what would they be

1113
00:45:03,680 --> 00:45:06,880
so i do uh automate when i can i did not

1114
00:45:06,880 --> 00:45:07,920
in this

1115
00:45:07,920 --> 00:45:10,000
i i was trying to think of how i could

1116
00:45:10,000 --> 00:45:11,599
um

1117
00:45:11,599 --> 00:45:13,359
there's probably some some ways but i

1118
00:45:13,359 --> 00:45:15,119
basically

1119
00:45:15,119 --> 00:45:18,319
did it manually uh but i actually

1120
00:45:18,319 --> 00:45:21,040
participated in the um in like the darpa

1121
00:45:21,040 --> 00:45:22,480
cyber grand challenge

1122
00:45:22,480 --> 00:45:25,520
a while back so like i mean i

1123
00:45:25,520 --> 00:45:28,400
you know you didn't see my name i didn't

1124
00:45:28,400 --> 00:45:30,160
go to black hair or jeffcon so you know

1125
00:45:30,160 --> 00:45:31,440
i obviously didn't do that good

1126
00:45:31,440 --> 00:45:34,160
but it just the learning experience was

1127
00:45:34,160 --> 00:45:34,880
amazing

1128
00:45:34,880 --> 00:45:37,680
and uh so i did kind of work on a bunch

1129
00:45:37,680 --> 00:45:38,560
of tools

1130
00:45:38,560 --> 00:45:40,800
not really tools but you know i do a lot

1131
00:45:40,800 --> 00:45:41,920
of like ida

1132
00:45:41,920 --> 00:45:46,960
scripting and uh i guess on that

1133
00:45:46,960 --> 00:45:49,119
beyond like android studio and ida what

1134
00:45:49,119 --> 00:45:51,280
are your what's your toolkit consist of

1135
00:45:51,280 --> 00:45:52,720
because it's the in the public realm

1136
00:45:52,720 --> 00:45:53,760
that people could kind of go and have a

1137
00:45:53,760 --> 00:45:55,119
look at

1138
00:45:55,119 --> 00:45:58,319
yeah so uh so actually

1139
00:45:58,319 --> 00:46:02,160
mostly i was using middle proxy

1140
00:46:02,160 --> 00:46:05,200
for like all my web application testing

1141
00:46:05,200 --> 00:46:08,160
and actually i didn't really switch over

1142
00:46:08,160 --> 00:46:08,800
until

1143
00:46:08,800 --> 00:46:11,520
to burp so i needed like to produce some

1144
00:46:11,520 --> 00:46:13,599
burp logs in a particular format

1145
00:46:13,599 --> 00:46:16,000
and i mean i've used burp before but i

1146
00:46:16,000 --> 00:46:17,440
like the uh

1147
00:46:17,440 --> 00:46:19,920
i was just familiar with with minimum

1148
00:46:19,920 --> 00:46:20,800
proxy

1149
00:46:20,800 --> 00:46:24,400
um but now i don't ever use it anymore

1150
00:46:24,400 --> 00:46:28,400
so i mean nice to have a cool gui

1151
00:46:28,400 --> 00:46:31,760
um and then either i mean you know i'm

1152
00:46:31,760 --> 00:46:32,480
uh

1153
00:46:32,480 --> 00:46:34,160
i guess the pro version of that it's

1154
00:46:34,160 --> 00:46:36,000
worth every penny

1155
00:46:36,000 --> 00:46:39,359
yeah if you've got the access to it it's

1156
00:46:39,359 --> 00:46:42,640
uh yeah have you played have you played

1157
00:46:42,640 --> 00:46:44,960
around with guydra at all

1158
00:46:44,960 --> 00:46:48,720
i know a little bit i played uh

1159
00:46:48,720 --> 00:46:52,799
with that and uh rodari and i

1160
00:46:54,720 --> 00:46:57,760
steep learning curve i guess that i was

1161
00:46:57,760 --> 00:46:59,839
familiar with yeah with either so i

1162
00:46:59,839 --> 00:47:01,920
would definitely like to because i mean

1163
00:47:01,920 --> 00:47:04,640
if it's just good and it's free yeah

1164
00:47:04,640 --> 00:47:05,440
it's an interest

1165
00:47:05,440 --> 00:47:07,440
yeah exactly that's the reason i ask

1166
00:47:07,440 --> 00:47:09,200
because obviously you know ida pro and

1167
00:47:09,200 --> 00:47:11,040
it's the same with a lot of these

1168
00:47:11,040 --> 00:47:13,040
you know static analysis tools you spend

1169
00:47:13,040 --> 00:47:14,400
years building out your own particular

1170
00:47:14,400 --> 00:47:16,000
workflows on top of them it's not easy

1171
00:47:16,000 --> 00:47:17,599
to just kind of rip and replace it off

1172
00:47:17,599 --> 00:47:19,200
to something else but

1173
00:47:19,200 --> 00:47:21,040
you know for folks that don't have

1174
00:47:21,040 --> 00:47:22,960
access to a to a commercial license

1175
00:47:22,960 --> 00:47:24,160
provider

1176
00:47:24,160 --> 00:47:25,599
or a commercial instance of it and they

1177
00:47:25,599 --> 00:47:27,359
don't want to go down the you know

1178
00:47:27,359 --> 00:47:30,480
shady um bittorrent route

1179
00:47:30,480 --> 00:47:34,079
um geidra is a legit option

1180
00:47:34,079 --> 00:47:35,599
that's what i've heard and then you can

1181
00:47:35,599 --> 00:47:38,160
do you know like arm i guess

1182
00:47:38,160 --> 00:47:41,680
and and x64 and yeah

1183
00:47:41,680 --> 00:47:43,520
yeah there's a lot of a lot of um a lot

1184
00:47:43,520 --> 00:47:44,880
of pros a lot of architecture

1185
00:47:44,880 --> 00:47:46,240
compatibility built into it

1186
00:47:46,240 --> 00:47:48,079
this is you know from from what i

1187
00:47:48,079 --> 00:47:49,760
haven't frankly played around a time

1188
00:47:49,760 --> 00:47:51,440
with it myself but

1189
00:47:51,440 --> 00:47:53,280
i think when it was first released there

1190
00:47:53,280 --> 00:47:54,480
was that initial

1191
00:47:54,480 --> 00:47:56,240
this is an nsa thing and i'm a bit

1192
00:47:56,240 --> 00:47:58,160
freaked out kind of reaction that

1193
00:47:58,160 --> 00:47:59,839
everyone had and since then you know

1194
00:47:59,839 --> 00:48:01,040
it's turned into oh this is actually a

1195
00:48:01,040 --> 00:48:02,400
pretty great tool

1196
00:48:02,400 --> 00:48:06,480
yeah so they have a resources

1197
00:48:06,480 --> 00:48:09,359
yeah true taking it back to to android

1198
00:48:09,359 --> 00:48:10,160
for a moment

1199
00:48:10,160 --> 00:48:11,520
so if somebody was watching the

1200
00:48:11,520 --> 00:48:12,960
presentation and wanted to get a start

1201
00:48:12,960 --> 00:48:13,359
with

1202
00:48:13,359 --> 00:48:15,040
with looking at deserialization in

1203
00:48:15,040 --> 00:48:16,960
android what's a what's a fairly simple

1204
00:48:16,960 --> 00:48:18,839
path they could they could follow to do

1205
00:48:18,839 --> 00:48:20,240
that

1206
00:48:20,240 --> 00:48:23,119
so uh so right now actually

1207
00:48:23,119 --> 00:48:24,720
unfortunately there are no

1208
00:48:24,720 --> 00:48:27,920
to my knowledge like uh uh

1209
00:48:27,920 --> 00:48:30,960
public gadgets that work in android so

1210
00:48:30,960 --> 00:48:31,760
like

1211
00:48:31,760 --> 00:48:34,319
in in a web app or any other java

1212
00:48:34,319 --> 00:48:35,599
environment you would go

1213
00:48:35,599 --> 00:48:38,800
get wi-fi serial actually i kind of went

1214
00:48:38,800 --> 00:48:40,720
deep on the url dns

1215
00:48:40,720 --> 00:48:42,559
gadget to find out why it does not work

1216
00:48:42,559 --> 00:48:44,079
at android and it's

1217
00:48:44,079 --> 00:48:47,440
it's like this one tiny little

1218
00:48:47,440 --> 00:48:49,040
change but it's enough to make it not

1219
00:48:49,040 --> 00:48:50,800
work

1220
00:48:50,800 --> 00:48:54,240
so the downside is

1221
00:48:54,240 --> 00:48:56,319
for deserialization in android is it's

1222
00:48:56,319 --> 00:48:58,240
pretty much a one-off

1223
00:48:58,240 --> 00:49:01,599
per application thing but that's also

1224
00:49:01,599 --> 00:49:02,559
the upside

1225
00:49:02,559 --> 00:49:04,160
because that's the kind of thing that

1226
00:49:04,160 --> 00:49:05,760
automated tools don't find

1227
00:49:05,760 --> 00:49:08,079
developers don't or application security

1228
00:49:08,079 --> 00:49:10,160
engineers a lot of times won't find

1229
00:49:10,160 --> 00:49:13,280
and uh you know they can generally

1230
00:49:13,280 --> 00:49:17,839
be quite impactful

1231
00:49:18,240 --> 00:49:21,680
that's good so um i guess the last touch

1232
00:49:21,680 --> 00:49:22,079
you know

1233
00:49:22,079 --> 00:49:23,680
what you've got and what's out there

1234
00:49:23,680 --> 00:49:25,200
beyond the two kind of fuzzing

1235
00:49:25,200 --> 00:49:27,359
little startups we quickly spun out

1236
00:49:27,359 --> 00:49:29,440
what's uh what's your dream tool in this

1237
00:49:29,440 --> 00:49:30,960
space that you'd love to see if someone

1238
00:49:30,960 --> 00:49:31,680
was watching this

1239
00:49:31,680 --> 00:49:33,040
like i just want to poke and build

1240
00:49:33,040 --> 00:49:35,280
something what's the uh

1241
00:49:35,280 --> 00:49:36,559
what's the one thing you wish you could

1242
00:49:36,559 --> 00:49:38,640
have in your tool kit oh man

1243
00:49:38,640 --> 00:49:41,040
i do i think for me it would be

1244
00:49:41,040 --> 00:49:42,559
something that can

1245
00:49:42,559 --> 00:49:46,400
um reliably emulate

1246
00:49:46,400 --> 00:49:49,920
uh like router and iot

1247
00:49:49,920 --> 00:49:53,119
firmware that has

1248
00:49:53,119 --> 00:49:57,680
nvram you know that you don't auto like

1249
00:49:57,680 --> 00:49:59,760
i can always get it to go until it needs

1250
00:49:59,760 --> 00:50:01,680
to hit that and then i have to go like

1251
00:50:01,680 --> 00:50:05,200
compile my own nvram dot so so

1252
00:50:05,200 --> 00:50:07,280
that would be cool that's interesting

1253
00:50:07,280 --> 00:50:09,359
are you are you aware of

1254
00:50:09,359 --> 00:50:10,960
you're aware of anyone who's so you're

1255
00:50:10,960 --> 00:50:12,480
talking about like um

1256
00:50:12,480 --> 00:50:15,839
virtualization kind of uh

1257
00:50:15,839 --> 00:50:18,559
you know bare metal level virtualization

1258
00:50:18,559 --> 00:50:21,359
of android is that is that accurate

1259
00:50:21,359 --> 00:50:24,480
uh well yeah actually android and also

1260
00:50:24,480 --> 00:50:26,319
like uh

1261
00:50:26,319 --> 00:50:29,040
any iot stuff rather you know light

1262
00:50:29,040 --> 00:50:31,040
bulbs yeah yeah right

1263
00:50:31,040 --> 00:50:33,520
got it so i actually started playing

1264
00:50:33,520 --> 00:50:35,599
around with i got a raspberry pi

1265
00:50:35,599 --> 00:50:39,200
and a uh beaglebone

1266
00:50:39,200 --> 00:50:42,960
black so i was able to

1267
00:50:42,960 --> 00:50:45,200
to do some of that and you know actually

1268
00:50:45,200 --> 00:50:46,000
just

1269
00:50:46,000 --> 00:50:48,000
run the firmware on it but there's still

1270
00:50:48,000 --> 00:50:49,599
some use cases where being able to run

1271
00:50:49,599 --> 00:50:50,800
it in keemu

1272
00:50:50,800 --> 00:50:53,839
would be helpful and still a very manual

1273
00:50:53,839 --> 00:50:54,720
process

1274
00:50:54,720 --> 00:50:56,000
there's a lot of good things yeah for

1275
00:50:56,000 --> 00:50:58,400
sure i i was just i was just checking

1276
00:50:58,400 --> 00:50:59,680
them because i know i know of an

1277
00:50:59,680 --> 00:51:01,119
organization that's working on that i

1278
00:51:01,119 --> 00:51:03,040
don't think they've released it yet but

1279
00:51:03,040 --> 00:51:05,920
when they do we'll make a bit of a to do

1280
00:51:05,920 --> 00:51:07,040
about that because yeah it's

1281
00:51:07,040 --> 00:51:08,960
it's a common thing i mean it's access

1282
00:51:08,960 --> 00:51:10,079
to hardware

1283
00:51:10,079 --> 00:51:11,760
all the variations of different hardware

1284
00:51:11,760 --> 00:51:13,760
that exist out there you know it applies

1285
00:51:13,760 --> 00:51:14,240
to

1286
00:51:14,240 --> 00:51:16,880
like major iot like automotive hacking

1287
00:51:16,880 --> 00:51:18,800
all sorts of other stuff as well so

1288
00:51:18,800 --> 00:51:20,400
the idea of simplifying that and making

1289
00:51:20,400 --> 00:51:22,000
it available as a platform

1290
00:51:22,000 --> 00:51:25,040
is a is a pretty neat thing

1291
00:51:25,040 --> 00:51:28,800
yeah and yeah and like being in the

1292
00:51:28,800 --> 00:51:30,319
critical infrastructure space there's a

1293
00:51:30,319 --> 00:51:33,200
lot of stuff that we can't

1294
00:51:33,200 --> 00:51:36,640
uh really probably test

1295
00:51:36,640 --> 00:51:38,400
because it's it doesn't get physical

1296
00:51:38,400 --> 00:51:40,559
because we'll talk about i imagine

1297
00:51:40,559 --> 00:51:43,040
right oh that would be awesome we've got

1298
00:51:43,040 --> 00:51:44,400
one more we've got one more question

1299
00:51:44,400 --> 00:51:46,000
that came in from discord from fat fred

1300
00:51:46,000 --> 00:51:48,960
will you be my sensei

1301
00:51:48,960 --> 00:51:51,280
well i think i love fat friends i'll be

1302
00:51:51,280 --> 00:51:53,200
yours if you'll be mine

1303
00:51:53,200 --> 00:51:55,440
oh there you go mutual mutual sensei

1304
00:51:55,440 --> 00:51:58,000
it's it's all happening at level up

1305
00:51:58,000 --> 00:51:59,920
now look as we as we wrap up mate i

1306
00:51:59,920 --> 00:52:01,760
really appreciate the um

1307
00:52:01,760 --> 00:52:02,880
you going through all of that is there

1308
00:52:02,880 --> 00:52:04,559
anything any kind of parting party

1309
00:52:04,559 --> 00:52:05,760
comments you want to make to the

1310
00:52:05,760 --> 00:52:10,319
to the viewers uh just

1311
00:52:10,319 --> 00:52:14,400
have fun stay positive you know

1312
00:52:14,480 --> 00:52:19,839
hacks for fun and uh i hacked the planet

1313
00:52:20,079 --> 00:52:22,160
awesome awesome all right well thank you

1314
00:52:22,160 --> 00:52:23,520
so much um

1315
00:52:23,520 --> 00:52:25,280
and yeah if you if you want to um if

1316
00:52:25,280 --> 00:52:26,880
you're able to jump across into the the

1317
00:52:26,880 --> 00:52:28,720
discord as well reminded everyone who's

1318
00:52:28,720 --> 00:52:30,079
viewing that we are

1319
00:52:30,079 --> 00:52:32,800
on on discord so discord.levelup.sh if

1320
00:52:32,800 --> 00:52:34,240
you haven't signed up already or if you

1321
00:52:34,240 --> 00:52:34,720
are

1322
00:52:34,720 --> 00:52:36,880
we can carry on the q a and and go a

1323
00:52:36,880 --> 00:52:38,160
little bit deeper into that stuff as

1324
00:52:38,160 --> 00:52:39,680
well there is the qr code

1325
00:52:39,680 --> 00:52:42,400
thank you very much amp for uh spotting

1326
00:52:42,400 --> 00:52:43,599
us in the control room there

1327
00:52:43,599 --> 00:52:47,810
and uh yeah thanks again

1328
00:52:47,810 --> 00:52:56,810
[Music]

