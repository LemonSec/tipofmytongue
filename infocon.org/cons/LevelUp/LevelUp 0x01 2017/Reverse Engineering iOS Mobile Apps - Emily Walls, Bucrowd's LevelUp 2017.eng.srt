1
00:00:07,960 --> 00:00:15,820
<font color="#CCCCCC">all right higher</font><font color="#E5E5E5"> ones like senses</font>

2
00:00:13,900 --> 00:00:21,070
<font color="#CCCCCC">nice laws and I'll be teaching you about</font>

3
00:00:15,820 --> 00:00:22,630
reverse engineering<font color="#CCCCCC"> and iOS so am</font><font color="#E5E5E5"> i well</font>

4
00:00:21,070 --> 00:00:24,939
I'm currently a student<font color="#CCCCCC"> at the</font>

5
00:00:22,630 --> 00:00:27,220
University of Waterloo<font color="#E5E5E5"> working</font><font color="#CCCCCC"> in my</font>

6
00:00:24,939 --> 00:00:29,529
<font color="#CCCCCC">Bachelors</font><font color="#E5E5E5"> of software</font><font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> and I</font>

7
00:00:27,220 --> 00:00:31,360
<font color="#CCCCCC">graduated</font><font color="#E5E5E5"> in under eight years in the</font>

8
00:00:29,529 --> 00:00:34,660
<font color="#E5E5E5">past I've enjoyed their companies such</font>

9
00:00:31,360 --> 00:00:36,190
as Facebook Square and<font color="#E5E5E5"> look</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> well</font>

10
00:00:34,660 --> 00:00:38,319
I've<font color="#E5E5E5"> been at this</font><font color="#CCCCCC"> osmotic to John's</font>

11
00:00:36,190 --> 00:00:41,349
<font color="#E5E5E5">about</font><font color="#CCCCCC"> twelve I started</font><font color="#E5E5E5"> learning about</font>

12
00:00:38,320 --> 00:00:43,840
reverse<font color="#E5E5E5"> engineering when I was 19 and I</font>

13
00:00:41,350 --> 00:00:49,149
was reversing malware and doing<font color="#CCCCCC"> CTF when</font>

14
00:00:43,840 --> 00:00:50,770
I was 20<font color="#E5E5E5"> so</font><font color="#CCCCCC"> why worry about mobile or</font>

15
00:00:49,149 --> 00:00:54,160
<font color="#E5E5E5">Marxist</font>

16
00:00:50,770 --> 00:00:56,680
the iOS<font color="#E5E5E5"> diverse engineering well today</font>

17
00:00:54,160 --> 00:00:58,510
<font color="#CCCCCC">mobile is a very popular medium and as a</font>

18
00:00:56,680 --> 00:01:00,670
result more information is stored on

19
00:00:58,510 --> 00:01:03,730
mobile devices<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> security is</font>

20
00:01:00,670 --> 00:01:07,300
important we know<font color="#E5E5E5"> mobile malware exists</font>

21
00:01:03,730 --> 00:01:09,280
and is a<font color="#E5E5E5"> serious threat</font><font color="#CCCCCC"> even on iOS so</font>

22
00:01:07,300 --> 00:01:16,120
reverse engineering<font color="#E5E5E5"> mobile apps helps</font>

23
00:01:09,280 --> 00:01:17,950
with this my<font color="#CCCCCC"> goal today I</font><font color="#E5E5E5"> drew</font><font color="#CCCCCC"> through</font>

24
00:01:16,120 --> 00:01:19,930
to an array of iOS reverse engineering

25
00:01:17,950 --> 00:01:22,420
tools and give you the skills to<font color="#CCCCCC"> get</font>

26
00:01:19,930 --> 00:01:26,290
started on reverse engineering<font color="#E5E5E5"> iOS apps</font>

27
00:01:22,420 --> 00:01:30,820
I also hope this<font color="#E5E5E5"> talking spa learn more</font>

28
00:01:26,290 --> 00:01:33,760
about the tools on<font color="#CCCCCC"> your own the overview</font>

29
00:01:30,820 --> 00:01:35,350
<font color="#E5E5E5">of</font><font color="#CCCCCC"> what I'll talk about today is first</font>

30
00:01:33,760 --> 00:01:37,600
I'll give a<font color="#E5E5E5"> brief introduction to</font>

31
00:01:35,350 --> 00:01:41,949
rehearsing including the compilation

32
00:01:37,600 --> 00:01:45,429
<font color="#E5E5E5">process and disassembly algorithms then</font>

33
00:01:41,950 --> 00:01:47,560
I'll<font color="#E5E5E5"> talk I'll talk about the i/o sure</font>

34
00:01:45,430 --> 00:01:51,070
the tools are discussed<font color="#E5E5E5"> our Wireshark</font>

35
00:01:47,560 --> 00:01:54,759
<font color="#E5E5E5">clutch</font><font color="#CCCCCC"> dump decrypted strings mmm</font>

36
00:01:51,070 --> 00:01:55,570
<font color="#E5E5E5">O'Toole</font><font color="#CCCCCC"> class don't Ida</font><font color="#E5E5E5"> Pro GTV and</font>

37
00:01:54,759 --> 00:01:57,670
<font color="#CCCCCC">saccharine</font>

38
00:01:55,570 --> 00:01:59,229
I'll go through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tools in the order</font>

39
00:01:57,670 --> 00:02:02,320
in which I<font color="#CCCCCC"> would use them</font><font color="#E5E5E5"> if I'm a</font>

40
00:01:59,229 --> 00:02:04,479
reverse engineering an app I will<font color="#E5E5E5"> demo</font>

41
00:02:02,320 --> 00:02:07,270
many of the tools<font color="#E5E5E5"> using a version of a</font>

42
00:02:04,479 --> 00:02:08,740
popular game which I've changed from a

43
00:02:07,270 --> 00:02:11,320
<font color="#CCCCCC">third-party website and that from the</font>

44
00:02:08,740 --> 00:02:13,540
iTunes Store<font color="#CCCCCC"> however I already own this</font>

45
00:02:11,320 --> 00:02:16,269
game and it's free<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> completely</font>

46
00:02:13,540 --> 00:02:18,070
legitimate<font color="#CCCCCC"> part of my reasoning was that</font>

47
00:02:16,270 --> 00:02:20,770
this version<font color="#E5E5E5"> might be more interesting</font>

48
00:02:18,070 --> 00:02:22,600
<font color="#CCCCCC">than the original if it was modified</font><font color="#E5E5E5"> but</font>

49
00:02:20,770 --> 00:02:25,300
I don't do it deep enough<font color="#E5E5E5"> analysis for</font>

50
00:02:22,600 --> 00:02:30,609
<font color="#E5E5E5">an actual bug bounty but this is helpful</font>

51
00:02:25,300 --> 00:02:32,140
for interesting the process so first

52
00:02:30,610 --> 00:02:34,600
I'll give a brief<font color="#E5E5E5"> overview of the</font>

53
00:02:32,140 --> 00:02:40,569
compilation process<font color="#E5E5E5"> specifically in the</font>

54
00:02:34,600 --> 00:02:42,189
context of C C++ or Objective C so this

55
00:02:40,569 --> 00:02:44,888
<font color="#E5E5E5">into the</font><font color="#CCCCCC"> source-code</font><font color="#E5E5E5"> going into the</font>

56
00:02:42,189 --> 00:02:46,840
preprocessor<font color="#E5E5E5"> the preprocessor takes</font>

57
00:02:44,889 --> 00:02:49,420
preprocessor directives which begin with

58
00:02:46,840 --> 00:02:50,889
<font color="#E5E5E5">a pound and replaces them</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> tokens</font>

59
00:02:49,420 --> 00:02:53,379
the compiler<font color="#E5E5E5"> will understand</font>

60
00:02:50,889 --> 00:02:55,180
for<font color="#E5E5E5"> example pound include statements are</font>

61
00:02:53,379 --> 00:02:57,819
replaced with<font color="#E5E5E5"> the contents of the</font>

62
00:02:55,180 --> 00:02:59,799
specified<font color="#CCCCCC"> files these directives are</font>

63
00:02:57,819 --> 00:03:04,958
just shortcuts which need to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> expanded</font>

64
00:02:59,799 --> 00:03:07,840
for<font color="#CCCCCC"> the compiler</font><font color="#E5E5E5"> the compiler takes this</font>

65
00:03:04,959 --> 00:03:11,079
code and translates<font color="#E5E5E5"> it into assembly</font>

66
00:03:07,840 --> 00:03:13,510
<font color="#E5E5E5">code this is a</font><font color="#CCCCCC"> lower-level</font><font color="#E5E5E5"> type of code</font>

67
00:03:11,079 --> 00:03:16,060
and is specific to the architecture of

68
00:03:13,510 --> 00:03:20,019
the device for iOS this will be arm

69
00:03:16,060 --> 00:03:22,030
assembly<font color="#E5E5E5"> the assembler takes this</font>

70
00:03:20,019 --> 00:03:24,760
assembly code and translates it<font color="#E5E5E5"> into</font>

71
00:03:22,030 --> 00:03:27,239
<font color="#CCCCCC">machine code</font><font color="#E5E5E5"> the machine code files are</font>

72
00:03:24,760 --> 00:03:29,649
called object files these<font color="#CCCCCC"> alter</font><font color="#E5E5E5"> files</font>

73
00:03:27,239 --> 00:03:31,840
can contain references to external

74
00:03:29,650 --> 00:03:33,370
libraries which will be unresolved at

75
00:03:31,840 --> 00:03:35,169
this point<font color="#E5E5E5"> because</font><font color="#CCCCCC"> there in other</font>

76
00:03:33,370 --> 00:03:40,209
<font color="#CCCCCC">objects files the assembler doesn't know</font>

77
00:03:35,169 --> 00:03:41,949
about so finally the<font color="#E5E5E5"> object files from</font>

78
00:03:40,209 --> 00:03:44,829
the assembler<font color="#E5E5E5"> and all linked libraries</font>

79
00:03:41,949 --> 00:03:48,189
are sent to the linker which combines

80
00:03:44,829 --> 00:03:50,109
them into<font color="#CCCCCC"> a final executable unlike the</font>

81
00:03:48,189 --> 00:03:51,970
assembler<font color="#E5E5E5"> the linker is able to resolve</font>

82
00:03:50,109 --> 00:03:54,299
references to the libraries<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

83
00:03:51,970 --> 00:03:54,299
objects

84
00:03:54,510 --> 00:04:00,040
some important<font color="#CCCCCC"> definitions so this</font>

85
00:03:57,580 --> 00:04:02,710
assembly<font color="#CCCCCC"> is a computer program that</font>

86
00:04:00,040 --> 00:04:04,269
examines<font color="#E5E5E5"> another computer program and it</font>

87
00:04:02,710 --> 00:04:06,150
<font color="#CCCCCC">sells to</font><font color="#E5E5E5"> generate assembly language</font>

88
00:04:04,270 --> 00:04:09,310
source code that would in theory

89
00:04:06,150 --> 00:04:11,260
<font color="#E5E5E5">reproduce the target program this</font>

90
00:04:09,310 --> 00:04:16,420
<font color="#E5E5E5">assembly</font><font color="#CCCCCC"> is the code generated by a</font>

91
00:04:11,260 --> 00:04:17,980
disassembler<font color="#CCCCCC"> a</font><font color="#E5E5E5"> compiler is a computer</font>

92
00:04:16,420 --> 00:04:21,820
program<font color="#E5E5E5"> performing the</font><font color="#CCCCCC"> reverse operation</font>

93
00:04:17,980 --> 00:04:23,800
<font color="#CCCCCC">to that</font><font color="#E5E5E5"> of a compiler so in the</font>

94
00:04:21,820 --> 00:04:25,480
compilation flowchart<font color="#E5E5E5"> decompiling</font>

95
00:04:23,800 --> 00:04:28,120
<font color="#E5E5E5">reverses the process between the</font>

96
00:04:25,480 --> 00:04:30,070
assembler and<font color="#CCCCCC"> compiler and disassemble</font>

97
00:04:28,120 --> 00:04:34,810
waiting reverses the process between<font color="#CCCCCC"> the</font>

98
00:04:30,070 --> 00:04:36,550
assembler and the final program there

99
00:04:34,810 --> 00:04:39,450
are<font color="#CCCCCC"> two algorithms</font><font color="#E5E5E5"> for disassembling</font>

100
00:04:36,550 --> 00:04:41,710
linear<font color="#CCCCCC"> sweep and recursive traversal</font>

101
00:04:39,450 --> 00:04:44,050
<font color="#E5E5E5">linear sweep is the simpler of the two</font>

102
00:04:41,710 --> 00:04:46,299
it starts at the<font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> of the code</font>

103
00:04:44,050 --> 00:04:48,400
section and disassembles<font color="#E5E5E5"> every</font>

104
00:04:46,300 --> 00:04:51,130
instruction<font color="#E5E5E5"> in order until</font><font color="#CCCCCC"> it reaches</font>

105
00:04:48,400 --> 00:04:53,200
the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> it makes no time to understand</font>

106
00:04:51,130 --> 00:04:56,969
the control flow for instance<font color="#E5E5E5"> branch</font>

107
00:04:53,200 --> 00:04:59,200
instructions like<font color="#CCCCCC"> SL statements</font><font color="#E5E5E5"> or loops</font>

108
00:04:56,970 --> 00:05:00,880
not every<font color="#E5E5E5"> byte is actually an</font>

109
00:04:59,200 --> 00:05:03,750
instruction or<font color="#CCCCCC"> part</font><font color="#E5E5E5"> of an instruction</font>

110
00:05:00,880 --> 00:05:06,909
the data will also<font color="#E5E5E5"> get disassembled</font><font color="#CCCCCC"> for</font>

111
00:05:03,750 --> 00:05:09,280
<font color="#CCCCCC">example in this</font><font color="#E5E5E5"> diagram suppose the blue</font>

112
00:05:06,910 --> 00:05:12,490
represents of branch<font color="#CCCCCC"> instruction and the</font>

113
00:05:09,280 --> 00:05:14,260
red<font color="#CCCCCC"> represents data linear</font><font color="#E5E5E5"> sweets will</font>

114
00:05:12,490 --> 00:05:16,150
interpret all<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> as instructions</font>

115
00:05:14,260 --> 00:05:18,490
without<font color="#E5E5E5"> considering what the blue</font>

116
00:05:16,150 --> 00:05:23,650
instruction is thus the<font color="#CCCCCC"> red will get</font>

117
00:05:18,490 --> 00:05:25,660
interpreted as a just now recursive

118
00:05:23,650 --> 00:05:29,140
traversal<font color="#E5E5E5"> is the more complicated</font>

119
00:05:25,660 --> 00:05:30,430
disassembling algorithm it tries<font color="#CCCCCC"> to</font>

120
00:05:29,140 --> 00:05:31,870
understand<font color="#E5E5E5"> the control flow of the</font>

121
00:05:30,430 --> 00:05:33,340
<font color="#E5E5E5">program</font>

122
00:05:31,870 --> 00:05:35,710
<font color="#E5E5E5">checking branch destructions and</font>

123
00:05:33,340 --> 00:05:37,239
disassembling at their offsets this

124
00:05:35,710 --> 00:05:39,698
generally increases the accuracy of the

125
00:05:37,240 --> 00:05:42,550
disassembly<font color="#E5E5E5"> but I won't get into methods</font>

126
00:05:39,699 --> 00:05:45,910
of<font color="#E5E5E5"> bypassing it this is the algorithm</font>

127
00:05:42,550 --> 00:05:48,960
<font color="#CCCCCC">that</font><font color="#E5E5E5"> Ida Pro uses as an example in this</font>

128
00:05:45,910 --> 00:05:50,260
<font color="#E5E5E5">diagram</font><font color="#CCCCCC"> again where blue is a branches</font>

129
00:05:48,960 --> 00:05:51,789
<font color="#CCCCCC">Redis data</font>

130
00:05:50,260 --> 00:05:53,979
recursive traversal<font color="#CCCCCC"> we'll get to the</font>

131
00:05:51,790 --> 00:05:56,910
blue<font color="#E5E5E5"> instruction realizes the branch and</font>

132
00:05:53,979 --> 00:05:59,289
then go to its offset<font color="#E5E5E5"> where it can</font>

133
00:05:56,910 --> 00:06:05,500
disassembling<font color="#E5E5E5"> so the red will not get</font>

134
00:05:59,290 --> 00:06:08,169
disassembled iOS applications are

135
00:06:05,500 --> 00:06:09,729
written<font color="#E5E5E5"> in Objective C Swift C or</font>

136
00:06:08,169 --> 00:06:12,700
Objective C<font color="#CCCCCC"> class class such as</font>

137
00:06:09,729 --> 00:06:14,610
Objective C with some<font color="#CCCCCC"> c++ features these</font>

138
00:06:12,700 --> 00:06:17,229
executables<font color="#E5E5E5"> are compiled in the arm so</font>

139
00:06:14,610 --> 00:06:19,060
<font color="#CCCCCC">that I'm focusing</font><font color="#E5E5E5"> on reverse engineering</font>

140
00:06:17,229 --> 00:06:20,500
iOS apps<font color="#CCCCCC"> I won't get into too much</font>

141
00:06:19,060 --> 00:06:23,470
<font color="#E5E5E5">detail about the security</font><font color="#CCCCCC"> architecture</font>

142
00:06:20,500 --> 00:06:26,530
<font color="#CCCCCC">by us</font><font color="#E5E5E5"> but I want you like</font><font color="#CCCCCC"> a couple of</font>

143
00:06:23,470 --> 00:06:28,810
noteworthy aspects<font color="#E5E5E5"> so</font><font color="#CCCCCC"> obstinacy</font><font color="#E5E5E5"> code</font>

144
00:06:26,530 --> 00:06:32,289
<font color="#E5E5E5">signed from a trusted authority to run</font>

145
00:06:28,810 --> 00:06:35,610
and run on a device usually<font color="#E5E5E5"> this is</font>

146
00:06:32,289 --> 00:06:38,080
Apple<font color="#E5E5E5"> but it</font><font color="#CCCCCC"> can also be enterprises</font>

147
00:06:35,610 --> 00:06:41,020
<font color="#CCCCCC">Enterprise certificates allow companies</font>

148
00:06:38,080 --> 00:06:43,270
to have their own internal apps<font color="#E5E5E5"> cosign</font>

149
00:06:41,020 --> 00:06:45,549
and<font color="#CCCCCC"> goes deeper in that device</font><font color="#E5E5E5"> end of</font>

150
00:06:43,270 --> 00:06:47,859
the device<font color="#E5E5E5"> only allows pages in memory</font>

151
00:06:45,550 --> 00:06:50,860
from<font color="#E5E5E5"> the signed source to be executed</font>

152
00:06:47,860 --> 00:06:53,169
<font color="#CCCCCC">and as I'm sure</font><font color="#E5E5E5"> most of you are aware</font>

153
00:06:50,860 --> 00:06:57,729
<font color="#E5E5E5">the</font><font color="#CCCCCC"> way to get around</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> through</font>

154
00:06:53,169 --> 00:07:00,310
jailbreaking<font color="#E5E5E5"> also iOS uses sandboxing</font>

155
00:06:57,729 --> 00:07:03,430
which is more fine-grained<font color="#E5E5E5"> than regular</font>

156
00:07:00,310 --> 00:07:05,680
<font color="#CCCCCC">unix permissions sandboxing specifies</font>

157
00:07:03,430 --> 00:07:11,320
exactly what each<font color="#E5E5E5"> app is allowed to</font>

158
00:07:05,680 --> 00:07:12,669
<font color="#CCCCCC">access so again the tools for iOS</font>

159
00:07:11,320 --> 00:07:15,550
<font color="#E5E5E5">service engineering that I'll talk about</font>

160
00:07:12,669 --> 00:07:18,219
are Wireshark collection<font color="#E5E5E5"> dump decrypted</font>

161
00:07:15,550 --> 00:07:21,150
strings<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then O'Toole</font>

162
00:07:18,220 --> 00:07:27,580
class dump

163
00:07:21,150 --> 00:07:29,500
<font color="#CCCCCC">gdb at</font><font color="#E5E5E5"> secret Wireshark is a packet</font>

164
00:07:27,580 --> 00:07:31,690
analysis tool that's able<font color="#CCCCCC"> to read or</font>

165
00:07:29,500 --> 00:07:34,330
write<font color="#E5E5E5"> hundreds of file formats for</font>

166
00:07:31,690 --> 00:07:36,790
<font color="#E5E5E5">traffic captures well certainly not</font>

167
00:07:34,330 --> 00:07:38,530
<font color="#CCCCCC">I was specific it is an asset in Iowa's</font>

168
00:07:36,790 --> 00:07:41,200
<font color="#E5E5E5">reverse engineering to caption network</font>

169
00:07:38,530 --> 00:07:43,630
traffic<font color="#E5E5E5"> packet analysis is helpful for</font>

170
00:07:41,200 --> 00:07:46,060
reverse<font color="#E5E5E5"> engineering because it allows</font>

171
00:07:43,630 --> 00:07:48,070
you<font color="#E5E5E5"> to see how an app is interacting</font>

172
00:07:46,060 --> 00:07:53,470
with<font color="#E5E5E5"> the Internet in ways that might be</font>

173
00:07:48,070 --> 00:07:55,480
less obvious<font color="#CCCCCC"> through static analysis the</font>

174
00:07:53,470 --> 00:07:57,820
method<font color="#E5E5E5"> that I find easiest to capture</font>

175
00:07:55,480 --> 00:07:59,740
traffic<font color="#E5E5E5"> on an</font><font color="#CCCCCC"> iOS device which doesn't</font>

176
00:07:57,820 --> 00:08:00,550
<font color="#E5E5E5">need to be jailbroken</font><font color="#CCCCCC"> is to use</font>

177
00:07:59,740 --> 00:08:01,870
Wireshark

178
00:08:00,550 --> 00:08:05,140
with the device plugged into my computer

179
00:08:01,870 --> 00:08:07,030
through<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> to do this you'll need</font><font color="#E5E5E5"> two</font>

180
00:08:05,140 --> 00:08:10,750
<font color="#E5E5E5">devices</font><font color="#CCCCCC"> CEO</font><font color="#E5E5E5"> ID which you</font><font color="#CCCCCC"> can get</font><font color="#E5E5E5"> from</font>

181
00:08:07,030 --> 00:08:14,169
<font color="#E5E5E5">Xcode in the devices window</font><font color="#CCCCCC"> in terminal</font>

182
00:08:10,750 --> 00:08:16,540
<font color="#E5E5E5">use the</font><font color="#CCCCCC"> r VI CTL command to</font><font color="#E5E5E5"> create a</font>

183
00:08:14,170 --> 00:08:18,580
virtual interface this will appear in

184
00:08:16,540 --> 00:08:20,010
Wireshark<font color="#CCCCCC"> and you simply double</font><font color="#E5E5E5"> click it</font>

185
00:08:18,580 --> 00:08:22,450
<font color="#E5E5E5">to begin the capture</font>

186
00:08:20,010 --> 00:08:24,940
so here's an<font color="#CCCCCC"> example of some output</font><font color="#E5E5E5"> I</font>

187
00:08:22,450 --> 00:08:27,280
captured from<font color="#E5E5E5"> my phone</font><font color="#CCCCCC"> where I opened up</font>

188
00:08:24,940 --> 00:08:29,830
the game and<font color="#E5E5E5"> let it play some</font><font color="#CCCCCC"> add-on</font>

189
00:08:27,280 --> 00:08:32,140
<font color="#CCCCCC">setup the ID has nothing to do</font><font color="#E5E5E5"> with</font>

190
00:08:29,830 --> 00:08:40,809
<font color="#CCCCCC">Hello Kitty</font><font color="#E5E5E5"> so I don't know why</font>

191
00:08:32,140 --> 00:08:43,030
Hello Kitty packets were sent a useful

192
00:08:40,809 --> 00:08:45,609
feature<font color="#E5E5E5"> of my check is its ability to</font>

193
00:08:43,030 --> 00:08:47,709
<font color="#E5E5E5">filter packets for instance they can be</font>

194
00:08:45,610 --> 00:08:50,020
filtered<font color="#E5E5E5"> by protocol so here's an</font>

195
00:08:47,710 --> 00:08:53,380
example<font color="#E5E5E5"> using the same capture from</font><font color="#CCCCCC"> the</font>

196
00:08:50,020 --> 00:08:57,340
previous slide when I filtered by SSL

197
00:08:53,380 --> 00:09:00,640
and<font color="#E5E5E5"> HTTP since TLS was renamed</font><font color="#CCCCCC"> to SSL</font>

198
00:08:57,340 --> 00:09:03,340
you'll see two LS<font color="#E5E5E5"> v 1.2 as the protocol</font>

199
00:09:00,640 --> 00:09:04,689
<font color="#CCCCCC">for some of these I can't view the</font>

200
00:09:03,340 --> 00:09:06,250
content of<font color="#E5E5E5"> these packets right now</font>

201
00:09:04,690 --> 00:09:08,890
because<font color="#E5E5E5"> I</font><font color="#CCCCCC"> wasn't using</font><font color="#E5E5E5"> a self-signed</font>

202
00:09:06,250 --> 00:09:11,380
certificate to decrypt the<font color="#E5E5E5"> encrypted</font>

203
00:09:08,890 --> 00:09:16,650
<font color="#E5E5E5">traffic if you want to get around</font><font color="#CCCCCC"> HTTP</font>

204
00:09:11,380 --> 00:09:16,650
you should watch<font color="#E5E5E5"> Ben stock or Tim stock</font>

205
00:09:18,450 --> 00:09:24,220
so the process of statically analyzing

206
00:09:21,670 --> 00:09:27,849
iOS apps<font color="#E5E5E5"> begins by overcoming</font><font color="#CCCCCC"> fairplay</font>

207
00:09:24,220 --> 00:09:30,430
encryption<font color="#CCCCCC"> I asked</font><font color="#E5E5E5"> by Nerys libraries</font>

208
00:09:27,850 --> 00:09:33,280
and plugins are encrypted<font color="#E5E5E5"> but get</font>

209
00:09:30,430 --> 00:09:34,339
dynamically decrypted at runtime<font color="#CCCCCC"> so you</font>

210
00:09:33,280 --> 00:09:36,709
get the unencrypted

211
00:09:34,339 --> 00:09:39,350
requires running the binary and<font color="#E5E5E5"> dumping</font>

212
00:09:36,709 --> 00:09:41,079
its contents to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> disk well this can</font>

213
00:09:39,350 --> 00:09:43,850
be done manually with a debugger

214
00:09:41,079 --> 00:09:46,339
collection dump decrypted<font color="#CCCCCC"> or more modern</font>

215
00:09:43,850 --> 00:09:49,220
tools<font color="#E5E5E5"> each of which</font>

216
00:09:46,339 --> 00:09:50,990
<font color="#CCCCCC">Plus since this requires</font><font color="#E5E5E5"> a shell access</font>

217
00:09:49,220 --> 00:09:54,139
these programs can<font color="#E5E5E5"> only run on</font>

218
00:09:50,990 --> 00:09:55,910
<font color="#E5E5E5">jailbroken iOS devices personally I</font>

219
00:09:54,139 --> 00:09:58,579
don't<font color="#E5E5E5"> have a preference between either</font>

220
00:09:55,910 --> 00:10:04,699
<font color="#E5E5E5">one</font><font color="#CCCCCC"> I just bumped a lot better than</font>

221
00:09:58,579 --> 00:10:06,290
<font color="#E5E5E5">using a debugger strings is a basic</font>

222
00:10:04,699 --> 00:10:09,139
command-line tool that outputs the

223
00:10:06,290 --> 00:10:11,180
strings in a<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> in this screenshot</font>

224
00:10:09,139 --> 00:10:13,819
from the from running strings on the

225
00:10:11,180 --> 00:10:16,279
game you can<font color="#E5E5E5"> see an error message you</font>

226
00:10:13,819 --> 00:10:19,009
must subclass unity www connection

227
00:10:16,279 --> 00:10:22,069
delegate so this is from the Unity game

228
00:10:19,009 --> 00:10:24,499
<font color="#CCCCCC">engine library error messages are often</font>

229
00:10:22,069 --> 00:10:26,240
useful<font color="#E5E5E5"> for reverse engineering</font><font color="#CCCCCC"> because</font>

230
00:10:24,499 --> 00:10:28,279
they provide<font color="#E5E5E5"> information about what a</font>

231
00:10:26,240 --> 00:10:31,490
<font color="#CCCCCC">binary is doing in an easy-to-find</font>

232
00:10:28,279 --> 00:10:35,300
format opening a binary<font color="#E5E5E5"> and strings and</font>

233
00:10:31,490 --> 00:10:37,730
sizing the output through grep is<font color="#E5E5E5"> can</font>

234
00:10:35,300 --> 00:10:39,439
more quickly<font color="#E5E5E5"> and easily find suspicious</font>

235
00:10:37,730 --> 00:10:43,040
behavior than having to go<font color="#CCCCCC"> through a</font>

236
00:10:39,439 --> 00:10:46,009
disassembler this<font color="#CCCCCC"> s string in</font><font color="#E5E5E5"> this</font>

237
00:10:43,040 --> 00:10:48,319
output<font color="#E5E5E5"> is a for mastering for some kind</font>

238
00:10:46,009 --> 00:10:55,779
of URL<font color="#CCCCCC"> though it isn't</font><font color="#E5E5E5"> clear from</font><font color="#CCCCCC"> this</font>

239
00:10:48,319 --> 00:10:57,349
if it's for a local URL<font color="#E5E5E5"> or a remote URL</font>

240
00:10:55,779 --> 00:11:00,199
either way

241
00:10:57,350 --> 00:11:03,079
URLs are also<font color="#CCCCCC"> useful because</font><font color="#E5E5E5"> they show</font>

242
00:11:00,199 --> 00:11:04,550
how a binary<font color="#E5E5E5"> is interacting with</font><font color="#CCCCCC"> local</font>

243
00:11:03,079 --> 00:11:06,469
files or<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Internet</font>

244
00:11:04,550 --> 00:11:12,199
which can sometimes be suspicious

245
00:11:06,470 --> 00:11:14,559
<font color="#E5E5E5">behavior mmm</font><font color="#CCCCCC"> is a tool</font><font color="#E5E5E5"> to display as a</font>

246
00:11:12,199 --> 00:11:17,508
symbol table<font color="#E5E5E5"> of an object file</font>

247
00:11:14,559 --> 00:11:20,269
additionally there is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dash M option</font>

248
00:11:17,509 --> 00:11:24,499
for<font color="#CCCCCC"> mock o files which displays the</font><font color="#E5E5E5"> mark</font>

249
00:11:20,269 --> 00:11:27,259
of symbols<font color="#E5E5E5"> more verbose</font><font color="#CCCCCC"> Li so the top</font>

250
00:11:24,499 --> 00:11:29,629
here is<font color="#CCCCCC"> the regular and M output or a</font>

251
00:11:27,259 --> 00:11:33,379
part of<font color="#E5E5E5"> the regular</font><font color="#CCCCCC"> and I'm output for</font>

252
00:11:29,629 --> 00:11:37,279
that<font color="#E5E5E5"> game now the bottom is the verbose</font>

253
00:11:33,379 --> 00:11:39,529
output<font color="#E5E5E5"> the regular output you</font><font color="#CCCCCC"> see use</font>

254
00:11:37,279 --> 00:11:42,259
the single letters to identify the

255
00:11:39,529 --> 00:11:46,730
symbol type so capital<font color="#E5E5E5"> u whereas the</font>

256
00:11:42,259 --> 00:11:49,269
full type has<font color="#E5E5E5"> the full type isms the</font>

257
00:11:46,730 --> 00:11:52,399
verbose output so undefined

258
00:11:49,269 --> 00:11:54,589
moreover more information about<font color="#E5E5E5"> a symbol</font>

259
00:11:52,399 --> 00:11:58,850
is given<font color="#E5E5E5"> for the verbose output such as</font>

260
00:11:54,589 --> 00:12:00,300
<font color="#CCCCCC">weak and external</font><font color="#E5E5E5"> and also the library</font>

261
00:11:58,850 --> 00:12:06,510
<font color="#E5E5E5">where they're from such as</font>

262
00:12:00,300 --> 00:12:08,670
<font color="#E5E5E5">C++ on</font><font color="#CCCCCC"> OSX there is a program called</font>

263
00:12:06,510 --> 00:12:12,360
<font color="#E5E5E5">ultra which provides</font><font color="#CCCCCC"> information about</font>

264
00:12:08,670 --> 00:12:14,670
object files examples of<font color="#E5E5E5"> information it</font>

265
00:12:12,360 --> 00:12:18,210
can provide include the header<font color="#E5E5E5"> the text</font>

266
00:12:14,670 --> 00:12:20,040
section<font color="#E5E5E5"> contents the data and the</font>

267
00:12:18,210 --> 00:12:22,620
objective<font color="#CCCCCC"> c section contents is</font><font color="#E5E5E5"> fit</font>

268
00:12:20,040 --> 00:12:25,140
<font color="#CCCCCC">samarco object file and</font><font color="#E5E5E5"> also a list of</font>

269
00:12:22,620 --> 00:12:27,660
<font color="#CCCCCC">libraries the binary imports this</font>

270
00:12:25,140 --> 00:12:29,370
information is useful because<font color="#E5E5E5"> it can</font>

271
00:12:27,660 --> 00:12:30,719
<font color="#E5E5E5">help give an overview of certain</font>

272
00:12:29,370 --> 00:12:33,330
behaviors<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> expect from the</font>

273
00:12:30,720 --> 00:12:34,140
application without having<font color="#CCCCCC"> to deeply</font>

274
00:12:33,330 --> 00:12:36,600
analyze it

275
00:12:34,140 --> 00:12:40,170
it's also helpful for<font color="#CCCCCC"> assuring the</font><font color="#E5E5E5"> low</font>

276
00:12:36,600 --> 00:12:42,470
<font color="#E5E5E5">commence</font><font color="#CCCCCC"> auto also contains of this</font>

277
00:12:40,170 --> 00:12:48,900
assembler<font color="#E5E5E5"> but when you want to analyze</font>

278
00:12:42,470 --> 00:12:51,780
<font color="#E5E5E5">more closely class dump is an</font><font color="#CCCCCC"> open</font>

279
00:12:48,900 --> 00:12:54,209
<font color="#CCCCCC">source static analysis tool for iOS that</font>

280
00:12:51,780 --> 00:12:58,260
gives<font color="#E5E5E5"> objective-c headers for iOS binary</font>

281
00:12:54,210 --> 00:13:01,830
library it provides the<font color="#E5E5E5"> same information</font>

282
00:12:58,260 --> 00:13:05,730
as<font color="#CCCCCC"> O'Tool - oh gee</font><font color="#E5E5E5"> but it's more</font>

283
00:13:01,830 --> 00:13:09,150
<font color="#E5E5E5">readable and compact so here's some</font>

284
00:13:05,730 --> 00:13:11,820
class<font color="#E5E5E5"> of</font><font color="#CCCCCC"> output on the</font><font color="#E5E5E5"> left contrasted</font>

285
00:13:09,150 --> 00:13:15,990
with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual -</font><font color="#CCCCCC"> Oh V output on the</font>

286
00:13:11,820 --> 00:13:18,470
right<font color="#E5E5E5"> the cost of output is way more</font>

287
00:13:15,990 --> 00:13:22,170
readable<font color="#E5E5E5"> and looks like objective-c</font>

288
00:13:18,470 --> 00:13:27,060
unlike the<font color="#CCCCCC"> ocho output the syntax</font>

289
00:13:22,170 --> 00:13:30,270
highlighting in my editor also<font color="#E5E5E5"> helps at</font>

290
00:13:27,060 --> 00:13:32,339
a pro is<font color="#E5E5E5"> very famous disassembler and</font>

291
00:13:30,270 --> 00:13:36,210
debugger<font color="#E5E5E5"> and I know</font><font color="#CCCCCC"> Ben talked</font><font color="#E5E5E5"> about</font>

292
00:13:32,340 --> 00:13:38,040
this in his<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> out of roses</font><font color="#E5E5E5"> kind of</font>

293
00:13:36,210 --> 00:13:40,890
functionality<font color="#CCCCCC"> for instance it is</font>

294
00:13:38,040 --> 00:13:42,390
programmable<font color="#CCCCCC"> through plugins so if</font>

295
00:13:40,890 --> 00:13:44,449
you're familiar with reverse engineering

296
00:13:42,390 --> 00:13:47,040
<font color="#E5E5E5">you're probably familiar with Ida Pro</font>

297
00:13:44,450 --> 00:13:49,860
because it is so powerful<font color="#E5E5E5"> and versatile</font>

298
00:13:47,040 --> 00:13:55,620
it is<font color="#E5E5E5"> naturally an asset in iOS our</font>

299
00:13:49,860 --> 00:13:57,570
<font color="#E5E5E5">first thing or any type of reversing so</font>

300
00:13:55,620 --> 00:14:01,710
I opened<font color="#E5E5E5"> the game at NIDA Pro I went</font>

301
00:13:57,570 --> 00:14:03,990
through the string window and then to

302
00:14:01,710 --> 00:14:05,930
find interesting strings<font color="#E5E5E5"> I sorted them</font>

303
00:14:03,990 --> 00:14:08,220
<font color="#E5E5E5">by their length in descending order</font>

304
00:14:05,930 --> 00:14:10,140
longer string some more content which

305
00:14:08,220 --> 00:14:12,570
makes them<font color="#E5E5E5"> possibly more interesting a</font>

306
00:14:10,140 --> 00:14:15,900
string is interesting if<font color="#E5E5E5"> it indicates</font>

307
00:14:12,570 --> 00:14:17,820
<font color="#E5E5E5">potential suspicious behavior</font><font color="#CCCCCC"> so you can</font>

308
00:14:15,900 --> 00:14:20,610
see it says this is a game it imports a

309
00:14:17,820 --> 00:14:24,870
<font color="#E5E5E5">lot of libraries and mostly these really</font>

310
00:14:20,610 --> 00:14:28,020
long<font color="#E5E5E5"> string</font><font color="#CCCCCC"> a selection of these</font>

311
00:14:24,870 --> 00:14:31,260
<font color="#CCCCCC">libraries at</font><font color="#E5E5E5"> unity Facebook crashlytics</font>

312
00:14:28,020 --> 00:14:33,960
<font color="#CCCCCC">and ad networks</font><font color="#E5E5E5"> some of these are also</font>

313
00:14:31,260 --> 00:14:35,819
sequel database queries which could be

314
00:14:33,960 --> 00:14:38,550
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> but after I took</font><font color="#E5E5E5"> a closer</font>

315
00:14:35,820 --> 00:14:41,040
<font color="#CCCCCC">look I realized they really worried</font>

316
00:14:38,550 --> 00:14:43,520
other strings<font color="#E5E5E5"> not shown here</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> could</font>

317
00:14:41,040 --> 00:14:46,110
<font color="#CCCCCC">be interesting ones that look encrypted</font>

318
00:14:43,520 --> 00:14:51,150
<font color="#E5E5E5">strings are usually only encrypted when</font>

319
00:14:46,110 --> 00:14:52,650
the developers want them hidden so when

320
00:14:51,150 --> 00:14:54,959
I went<font color="#CCCCCC"> through the strings I came across</font>

321
00:14:52,650 --> 00:14:58,590
this<font color="#E5E5E5"> start location tracking string</font>

322
00:14:54,960 --> 00:15:00,570
which caught my<font color="#CCCCCC"> eye</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'll click in the</font>

323
00:14:58,590 --> 00:15:01,290
<font color="#E5E5E5">string around me</font><font color="#CCCCCC"> to selector and the</font>

324
00:15:00,570 --> 00:15:03,930
disassembly

325
00:15:01,290 --> 00:15:06,390
<font color="#CCCCCC">in iOS development</font><font color="#E5E5E5"> a selector is</font>

326
00:15:03,930 --> 00:15:08,609
basically a way to<font color="#E5E5E5"> reference a method</font>

327
00:15:06,390 --> 00:15:10,019
well it seems<font color="#CCCCCC"> reasonable for</font><font color="#E5E5E5"> the app to</font>

328
00:15:08,610 --> 00:15:11,819
track<font color="#CCCCCC"> location for</font>

329
00:15:10,019 --> 00:15:14,249
<font color="#E5E5E5">as for instance</font><font color="#CCCCCC"> I thought the name</font>

330
00:15:11,819 --> 00:15:16,738
sounded suspicious<font color="#E5E5E5"> plus when I use the</font>

331
00:15:14,249 --> 00:15:20,279
regular version<font color="#E5E5E5"> of the app it's never</font>

332
00:15:16,739 --> 00:15:21,149
asked for location permissions the data

333
00:15:20,279 --> 00:15:23,790
<font color="#CCCCCC">xrefs</font>

334
00:15:21,149 --> 00:15:25,410
or data cross references<font color="#E5E5E5"> below indicate</font>

335
00:15:23,790 --> 00:15:30,509
that<font color="#E5E5E5"> this is called in the</font><font color="#CCCCCC"> stair</font><font color="#E5E5E5"> method</font>

336
00:15:25,410 --> 00:15:32,730
of the I am nice class<font color="#E5E5E5"> double-clicking</font>

337
00:15:30,509 --> 00:15:35,339
on<font color="#E5E5E5"> this symbol takes us to the actual</font>

338
00:15:32,730 --> 00:15:38,129
method as indicated by<font color="#CCCCCC"> this underscore</font>

339
00:15:35,339 --> 00:15:42,839
underscore<font color="#E5E5E5"> obviously to underscore met</font>

340
00:15:38,129 --> 00:15:45,019
symbol either<font color="#E5E5E5"> allows you to see the</font>

341
00:15:42,839 --> 00:15:47,850
<font color="#CCCCCC">cross references to</font><font color="#E5E5E5"> wear from a symbol</font>

342
00:15:45,019 --> 00:15:51,420
cross references show from where<font color="#E5E5E5"> symbols</font>

343
00:15:47,850 --> 00:15:54,239
referenced<font color="#CCCCCC"> I wish some other locations</font>

344
00:15:51,420 --> 00:15:55,618
such<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a method this is important to</font>

345
00:15:54,239 --> 00:15:58,079
understand the control flow of the

346
00:15:55,619 --> 00:16:00,059
<font color="#CCCCCC">application there are</font><font color="#E5E5E5"> no cross</font>

347
00:15:58,079 --> 00:16:02,189
references to the symbol which<font color="#CCCCCC"> means it</font>

348
00:16:00,059 --> 00:16:04,019
isn't<font color="#CCCCCC"> called from anywhere but I could</font>

349
00:16:02,189 --> 00:16:06,269
see the<font color="#CCCCCC"> grass references from</font><font color="#E5E5E5"> it which</font>

350
00:16:04,019 --> 00:16:10,139
are the<font color="#CCCCCC"> methods it costs methods or</font>

351
00:16:06,269 --> 00:16:12,269
functions<font color="#E5E5E5"> and I'd like to see methods</font>

352
00:16:10,139 --> 00:16:15,660
are<font color="#E5E5E5"> called bypassing selectors to</font>

353
00:16:12,269 --> 00:16:18,269
<font color="#E5E5E5">obviously underscore message</font><font color="#CCCCCC"> send which</font>

354
00:16:15,660 --> 00:16:20,790
is seen on<font color="#CCCCCC"> the right this makes it more</font>

355
00:16:18,269 --> 00:16:24,449
difficult<font color="#CCCCCC"> to view which selectors are</font>

356
00:16:20,790 --> 00:16:26,699
called by a method so an example<font color="#CCCCCC"> of</font>

357
00:16:24,449 --> 00:16:28,939
<font color="#E5E5E5">using this function is shown here in</font>

358
00:16:26,699 --> 00:16:31,799
<font color="#E5E5E5">this sixth in this section of</font>

359
00:16:28,939 --> 00:16:34,290
disassembly from the I am nice<font color="#E5E5E5"> start</font>

360
00:16:31,799 --> 00:16:37,499
<font color="#CCCCCC">method</font><font color="#E5E5E5"> the hard part of objective-c</font>

361
00:16:34,290 --> 00:16:40,199
reversing is following these objective-c

362
00:16:37,499 --> 00:16:42,149
messages and calls to<font color="#CCCCCC"> know which method</font>

363
00:16:40,199 --> 00:16:47,729
<font color="#E5E5E5">is being</font><font color="#CCCCCC"> called here and</font><font color="#E5E5E5"> its arguments</font>

364
00:16:42,149 --> 00:16:49,860
requires some arm knowledge now you

365
00:16:47,730 --> 00:16:51,509
might be thinking<font color="#E5E5E5"> wait you said Ida was</font>

366
00:16:49,860 --> 00:16:53,600
<font color="#E5E5E5">programmable</font><font color="#CCCCCC"> when you just write a</font>

367
00:16:51,509 --> 00:16:56,399
plug-in<font color="#CCCCCC"> to improve the call graphs here</font>

368
00:16:53,600 --> 00:16:58,799
well<font color="#E5E5E5"> that's a very difficult problem</font><font color="#CCCCCC"> and</font>

369
00:16:56,399 --> 00:17:01,199
<font color="#E5E5E5">it's definitely a pain point</font><font color="#CCCCCC"> as using</font>

370
00:16:58,799 --> 00:17:03,959
<font color="#E5E5E5">static analysis for</font><font color="#CCCCCC"> iOS reverse</font>

371
00:17:01,199 --> 00:17:06,240
engineering to solve this<font color="#E5E5E5"> problem</font>

372
00:17:03,959 --> 00:17:09,089
requires<font color="#E5E5E5"> knowing the register values</font><font color="#CCCCCC"> I</font>

373
00:17:06,240 --> 00:17:11,490
<font color="#CCCCCC">have these function calls</font><font color="#E5E5E5"> as a</font><font color="#CCCCCC"> Objective</font>

374
00:17:09,089 --> 00:17:12,839
<font color="#CCCCCC">C message then calls</font><font color="#E5E5E5"> which might not</font>

375
00:17:11,490 --> 00:17:14,819
always be predicted from this

376
00:17:12,839 --> 00:17:17,369
<font color="#CCCCCC">disassembly is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> disassembly</font><font color="#E5E5E5"> is</font>

377
00:17:14,819 --> 00:17:19,438
incorrect<font color="#E5E5E5"> for instance if the binary had</font>

378
00:17:17,369 --> 00:17:23,010
some<font color="#E5E5E5"> phone of obfuscation</font><font color="#CCCCCC"> to trick Ida</font>

379
00:17:19,439 --> 00:17:23,770
Pro this should require dynamic analysis

380
00:17:23,010 --> 00:17:25,420
now

381
00:17:23,770 --> 00:17:28,710
<font color="#CCCCCC">today's find a plugin that claimed to</font>

382
00:17:25,420 --> 00:17:31,810
solve this but the<font color="#CCCCCC"> plugin called a</font>

383
00:17:28,710 --> 00:17:33,400
obviously helper plugin<font color="#CCCCCC"> so about please</font>

384
00:17:31,810 --> 00:17:40,120
point<font color="#E5E5E5"> three hours to run on this game</font>

385
00:17:33,400 --> 00:17:42,910
and<font color="#E5E5E5"> made no changes gdb is the famous</font>

386
00:17:40,120 --> 00:17:46,239
command line to bugger<font color="#E5E5E5"> it is much</font>

387
00:17:42,910 --> 00:17:49,690
simpler than<font color="#E5E5E5"> Ida Pro but</font><font color="#CCCCCC"> is therefore a</font>

388
00:17:46,240 --> 00:17:52,750
faster and easier<font color="#E5E5E5"> to set up it can be</font>

389
00:17:49,690 --> 00:17:55,870
run on an iOS<font color="#E5E5E5"> device</font><font color="#CCCCCC"> directly</font><font color="#E5E5E5"> ideally</font>

390
00:17:52,750 --> 00:17:57,970
through an SSH session<font color="#E5E5E5"> but it can also</font>

391
00:17:55,870 --> 00:18:00,699
connect<font color="#CCCCCC"> to debug server</font><font color="#E5E5E5"> allowing you to</font>

392
00:17:57,970 --> 00:18:05,260
<font color="#E5E5E5">debug</font><font color="#CCCCCC"> an iOS app remotely</font><font color="#E5E5E5"> so what is</font>

393
00:18:00,700 --> 00:18:07,090
debug server well you use debug server

394
00:18:05,260 --> 00:18:11,260
to establish a remote debug session

395
00:18:07,090 --> 00:18:13,500
<font color="#E5E5E5">connection over Wi-Fi or USB see books</font>

396
00:18:11,260 --> 00:18:16,180
<font color="#CCCCCC">if it</font><font color="#E5E5E5"> runs on the iOS</font><font color="#CCCCCC"> device directly</font>

397
00:18:13,500 --> 00:18:18,340
<font color="#E5E5E5">when this connection is set up you can</font>

398
00:18:16,180 --> 00:18:24,190
use<font color="#E5E5E5"> gdb to connect to the server to</font>

399
00:18:18,340 --> 00:18:27,159
debug the process remotely<font color="#CCCCCC"> side crips</font>

400
00:18:24,190 --> 00:18:29,200
is a dynamic analysis tool for iOS

401
00:18:27,160 --> 00:18:31,420
applications<font color="#E5E5E5"> that provides a more</font>

402
00:18:29,200 --> 00:18:33,660
<font color="#E5E5E5">readable way of modifying or viewing</font>

403
00:18:31,420 --> 00:18:36,370
<font color="#CCCCCC">information about a program at</font><font color="#E5E5E5"> runtime</font>

404
00:18:33,660 --> 00:18:39,490
<font color="#E5E5E5">the console uses JavaScript and</font>

405
00:18:36,370 --> 00:18:41,229
Objective C syntax unfortunately it

406
00:18:39,490 --> 00:18:43,360
doesn't allow breakpoints to<font color="#E5E5E5"> be used so</font>

407
00:18:41,230 --> 00:18:46,590
it can work as a debugger<font color="#CCCCCC"> but it still</font>

408
00:18:43,360 --> 00:18:49,629
provides<font color="#E5E5E5"> a lot of useful functionality</font>

409
00:18:46,590 --> 00:18:52,060
<font color="#CCCCCC">some</font><font color="#E5E5E5"> examples of basic</font><font color="#CCCCCC"> informations that</font>

410
00:18:49,630 --> 00:18:55,750
<font color="#CCCCCC">psychics</font><font color="#E5E5E5"> can provide our</font><font color="#CCCCCC"> class</font>

411
00:18:52,060 --> 00:18:57,580
information<font color="#E5E5E5"> about UI components in this</font>

412
00:18:55,750 --> 00:19:00,670
<font color="#E5E5E5">class commands that I ran here I</font>

413
00:18:57,580 --> 00:19:03,210
assigned one of<font color="#E5E5E5"> these to a variable so I</font>

414
00:19:00,670 --> 00:19:06,700
can use<font color="#E5E5E5"> it later in place of that</font>

415
00:19:03,210 --> 00:19:11,700
objective-c code but<font color="#CCCCCC"> you can do way more</font>

416
00:19:06,700 --> 00:19:13,990
interesting things inside crypt<font color="#E5E5E5"> also</font>

417
00:19:11,700 --> 00:19:16,330
worth noting is that<font color="#E5E5E5"> when you're using</font>

418
00:19:13,990 --> 00:19:18,460
<font color="#CCCCCC">side</font><font color="#E5E5E5"> cups it is helpful to also use</font>

419
00:19:16,330 --> 00:19:21,070
class stuff so you<font color="#CCCCCC"> know which methods</font>

420
00:19:18,460 --> 00:19:22,930
and variables<font color="#E5E5E5"> exist in the class if you</font>

421
00:19:21,070 --> 00:19:25,270
try using an unrecognized selector on a

422
00:19:22,930 --> 00:19:27,820
class you'll crash the app which will

423
00:19:25,270 --> 00:19:34,030
then also kill side crips<font color="#E5E5E5"> as shown here</font>

424
00:19:27,820 --> 00:19:35,980
when<font color="#E5E5E5"> I try this so I asked</font>

425
00:19:34,030 --> 00:19:37,250
<font color="#E5E5E5">reverse-engineering uses a wide variety</font>

426
00:19:35,980 --> 00:19:40,700
<font color="#E5E5E5">of tools</font>

427
00:19:37,250 --> 00:19:42,020
and I hope now<font color="#E5E5E5"> you feel inspired so try</font>

428
00:19:40,700 --> 00:19:46,670
these tools out on your own

429
00:19:42,020 --> 00:19:56,629
learn learn more about them<font color="#CCCCCC"> so any</font>

430
00:19:46,670 --> 00:20:05,750
questions<font color="#CCCCCC"> so the question is at any</font>

431
00:19:56,630 --> 00:20:10,640
tools for<font color="#CCCCCC"> IP</font><font color="#E5E5E5"> patching</font><font color="#CCCCCC"> I know</font><font color="#E5E5E5"> when I when</font>

432
00:20:05,750 --> 00:20:15,800
I decrypted<font color="#E5E5E5"> iOS apps manually one part</font>

433
00:20:10,640 --> 00:20:17,930
of that<font color="#CCCCCC"> method was to</font><font color="#E5E5E5"> there was some bit</font>

434
00:20:15,800 --> 00:20:21,409
that you had to flip in the<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> and</font>

435
00:20:17,930 --> 00:20:24,320
you use that<font color="#E5E5E5"> with a hex editor but</font>

436
00:20:21,410 --> 00:20:27,950
<font color="#E5E5E5">obviously that's very low level I'm not</font>

437
00:20:24,320 --> 00:20:31,090
<font color="#CCCCCC">aware of</font><font color="#E5E5E5"> more high level tools but</font><font color="#CCCCCC"> it</font>

438
00:20:27,950 --> 00:20:31,090
won't surprise me<font color="#CCCCCC"> if there were any</font>

439
00:20:36,880 --> 00:20:42,680
great<font color="#CCCCCC"> this isn't great</font><font color="#E5E5E5"> Emily really</font>

440
00:20:40,220 --> 00:20:50,560
<font color="#E5E5E5">appreciate it and we had some</font><font color="#CCCCCC"> cans of</font>

441
00:20:42,680 --> 00:20:50,560
your<font color="#E5E5E5"> means</font><font color="#CCCCCC"> thank you thank you</font>

