1
00:00:03,100 --> 00:00:10,090
Cerie defenses or controls that we need

2
00:00:06,910 --> 00:00:11,949
to master to write secure software a lot

3
00:00:10,090 --> 00:00:13,809
of this material comes from the OWASA

4
00:00:11,949 --> 00:00:15,910
foundation so that people and

5
00:00:13,809 --> 00:00:20,140
organizations around the world can make

6
00:00:15,910 --> 00:00:23,020
informed decisions about web and API and

7
00:00:20,140 --> 00:00:25,210
mobile and all forms of applications

8
00:00:23,020 --> 00:00:27,939
security risk we're going to look at one

9
00:00:25,210 --> 00:00:30,970
of our documentation projects at the OS

10
00:00:27,940 --> 00:00:34,600
Foundation which is the OAuth proactive

11
00:00:30,970 --> 00:00:37,870
controls this project is a list of the

12
00:00:34,600 --> 00:00:40,359
top 10 defensive practices that you need

13
00:00:37,870 --> 00:00:43,260
to master to write secure software and

14
00:00:40,359 --> 00:00:46,059
my name again is Jim medico I'm a

15
00:00:43,260 --> 00:00:49,059
volunteer for the Olas Foundation I used

16
00:00:46,059 --> 00:00:51,699
to be a board member for a wasp and I'm

17
00:00:49,059 --> 00:00:54,399
primarily a Java programmer who focuses

18
00:00:51,699 --> 00:00:58,769
on security engineering our first

19
00:00:54,399 --> 00:01:02,109
control of our top 10 list is to define

20
00:00:58,769 --> 00:01:04,539
security requirements the question that

21
00:01:02,109 --> 00:01:07,329
I asked most companies is what does

22
00:01:04,540 --> 00:01:09,909
security mean to you what does security

23
00:01:07,329 --> 00:01:12,969
mean to you or what do you define a

24
00:01:09,909 --> 00:01:15,450
piece of secure software to be and very

25
00:01:12,969 --> 00:01:18,820
often the answers that I get are

26
00:01:15,450 --> 00:01:21,280
philosophical and as a developer I like

27
00:01:18,820 --> 00:01:23,979
philosophy but it doesn't help me write

28
00:01:21,280 --> 00:01:26,680
secure software I'm an engineer I need

29
00:01:23,979 --> 00:01:28,950
requirements and so I believe all secure

30
00:01:26,680 --> 00:01:32,380
software starts with the clear

31
00:01:28,950 --> 00:01:34,570
definition of what security means from a

32
00:01:32,380 --> 00:01:36,460
requirement point of view for example

33
00:01:34,570 --> 00:01:38,548
you look at the Microsoft STL this is

34
00:01:36,460 --> 00:01:40,990
one of the most popular software

35
00:01:38,549 --> 00:01:42,909
development life cycles that we see in

36
00:01:40,990 --> 00:01:45,280
the world today and very early on

37
00:01:42,909 --> 00:01:48,869
they're suggesting the second thing you

38
00:01:45,280 --> 00:01:52,509
should do is to establish clear security

39
00:01:48,869 --> 00:01:55,600
requirements and pretty much any sdlc

40
00:01:52,509 --> 00:01:57,490
any software development lifecycle that

41
00:01:55,600 --> 00:01:59,740
we look at is going to ask about

42
00:01:57,490 --> 00:02:02,109
requirement definition so what are the

43
00:01:59,740 --> 00:02:04,030
projects at the Olas foundation this is

44
00:02:02,109 --> 00:02:06,729
one of the closest things that we have

45
00:02:04,030 --> 00:02:09,340
to a standard is called the ASVs

46
00:02:06,729 --> 00:02:11,680
standard the application security

47
00:02:09,340 --> 00:02:14,350
verification standard we're currently at

48
00:02:11,680 --> 00:02:16,130
version 3.0 point 1 version 4 will be

49
00:02:14,350 --> 00:02:19,310
released at the end of this year

50
00:02:16,130 --> 00:02:22,790
this is a set of requirements that was

51
00:02:19,310 --> 00:02:25,640
built for and built by developers who do

52
00:02:22,790 --> 00:02:29,540
security engineering it defines three

53
00:02:25,640 --> 00:02:32,000
levels of risk that describes individual

54
00:02:29,540 --> 00:02:34,400
controls that you need to master to

55
00:02:32,000 --> 00:02:38,300
write secure software it's very similar

56
00:02:34,400 --> 00:02:40,010
to other standards like ISO 27000 4

57
00:02:38,300 --> 00:02:41,900
which is another secure software

58
00:02:40,010 --> 00:02:44,600
standard but it goes into a lot more

59
00:02:41,900 --> 00:02:46,400
detail you'll see three level and this

60
00:02:44,600 --> 00:02:49,760
is something that I recommend you and

61
00:02:46,400 --> 00:02:52,190
Nepal who are trying to build or manage

62
00:02:49,760 --> 00:02:54,290
secure software this is a standard that

63
00:02:52,190 --> 00:02:57,230
you should be looking at to help to help

64
00:02:54,290 --> 00:02:59,720
us understand the philosophy point of

65
00:02:57,230 --> 00:03:01,940
view but from an engineering point of

66
00:02:59,720 --> 00:03:04,750
view how do we build a secure web

67
00:03:01,940 --> 00:03:06,980
application how do we build a secure API

68
00:03:04,750 --> 00:03:09,470
level there's three tiers or

69
00:03:06,980 --> 00:03:11,840
requirements level one is easily

70
00:03:09,470 --> 00:03:13,820
scalable in terms of verifying for

71
00:03:11,840 --> 00:03:16,340
security level two is a bit more

72
00:03:13,820 --> 00:03:18,739
challenging to test they're much more

73
00:03:16,340 --> 00:03:20,660
challenging controls and level three is

74
00:03:18,740 --> 00:03:23,330
going to be our most difficult controls

75
00:03:20,660 --> 00:03:25,400
that we reserved for military or banking

76
00:03:23,330 --> 00:03:27,890
or infrastructure when you look at the

77
00:03:25,400 --> 00:03:30,680
standard you'll see this right here it's

78
00:03:27,890 --> 00:03:33,679
a list of individual engineering

79
00:03:30,680 --> 00:03:36,560
requirements broken down into three

80
00:03:33,680 --> 00:03:38,630
tiers of severity and this is a way for

81
00:03:36,560 --> 00:03:41,390
you those of you who are doing software

82
00:03:38,630 --> 00:03:43,490
development or who are responsible for

83
00:03:41,390 --> 00:03:46,220
software who work for the government or

84
00:03:43,490 --> 00:03:48,740
banks or telecom banks government

85
00:03:46,220 --> 00:03:51,140
telecom you've got to master secure

86
00:03:48,740 --> 00:03:53,720
software as part of your security

87
00:03:51,140 --> 00:03:56,420
discipline for those organizations this

88
00:03:53,720 --> 00:03:59,780
standard the application security

89
00:03:56,420 --> 00:04:01,940
verification standard it's free it's an

90
00:03:59,780 --> 00:04:04,190
open source document there should help

91
00:04:01,940 --> 00:04:06,170
you get started in defining what

92
00:04:04,190 --> 00:04:09,050
security is of your software all right

93
00:04:06,170 --> 00:04:11,899
second the second of our top ten we're

94
00:04:09,050 --> 00:04:14,950
talking about the wasp proactive

95
00:04:11,900 --> 00:04:18,170
controls it's a top ten list of

96
00:04:14,950 --> 00:04:20,149
Defense's that you want to master defer

97
00:04:18,170 --> 00:04:22,760
to build and maintain secure software

98
00:04:20,149 --> 00:04:25,130
this presentation I'll release do the

99
00:04:22,760 --> 00:04:28,820
conference so you'll get a copy of this

100
00:04:25,130 --> 00:04:31,159
at the end so level to leverage secured

101
00:04:28,820 --> 00:04:33,020
frameworks and libraries when you're a

102
00:04:31,160 --> 00:04:33,770
developer built trying to build secure

103
00:04:33,020 --> 00:04:35,930
software

104
00:04:33,770 --> 00:04:39,289
you shouldn't have to start from scratch

105
00:04:35,930 --> 00:04:42,710
we can leverage a lot of different

106
00:04:39,290 --> 00:04:45,230
built-in security in the frameworks that

107
00:04:42,710 --> 00:04:48,500
drive the world today I like Apache

108
00:04:45,230 --> 00:04:51,320
Shiro here they do great access control

109
00:04:48,500 --> 00:04:54,170
that's very detailed we have the Django

110
00:04:51,320 --> 00:04:56,659
framework from the Python world which

111
00:04:54,170 --> 00:04:59,720
really was built from the ground up with

112
00:04:56,660 --> 00:05:02,630
security in mind we have spring security

113
00:04:59,720 --> 00:05:05,630
also for the Java world spring security

114
00:05:02,630 --> 00:05:08,000
has a lot of default built-in security

115
00:05:05,630 --> 00:05:10,880
just like spring boot does as well

116
00:05:08,000 --> 00:05:13,010
so the goal here is we want it we don't

117
00:05:10,880 --> 00:05:15,650
want to have to start from scratch we

118
00:05:13,010 --> 00:05:18,320
want to leverage open source that's

119
00:05:15,650 --> 00:05:20,090
already doing security well and there

120
00:05:18,320 --> 00:05:23,270
are many examples of this in the world

121
00:05:20,090 --> 00:05:25,510
and so but why do we care about what

122
00:05:23,270 --> 00:05:28,010
what what makes these third-party

123
00:05:25,510 --> 00:05:31,820
libraries a challenge in the world today

124
00:05:28,010 --> 00:05:34,370
is that they themselves are filled with

125
00:05:31,820 --> 00:05:37,130
bugs as well all software has security

126
00:05:34,370 --> 00:05:40,250
bugs so here's a list of security bugs

127
00:05:37,130 --> 00:05:42,620
that we've seen in common open source

128
00:05:40,250 --> 00:05:45,170
software that can do damage to your

129
00:05:42,620 --> 00:05:48,320
organization so we're looking at a lot

130
00:05:45,170 --> 00:05:50,450
of remote code execution in open source

131
00:05:48,320 --> 00:05:53,090
software it doesn't get any more

132
00:05:50,450 --> 00:05:54,260
damaging than this how about this one

133
00:05:53,090 --> 00:05:56,570
this is CVE

134
00:05:54,260 --> 00:06:01,340
this is a common vulnerability

135
00:05:56,570 --> 00:06:03,770
numeration from 2017 5638 does anybody

136
00:06:01,340 --> 00:06:09,260
know why the whole world cares about

137
00:06:03,770 --> 00:06:12,320
this individual bug Equifax this is one

138
00:06:09,260 --> 00:06:14,719
of the greatest breaches of sensitive

139
00:06:12,320 --> 00:06:16,610
data in the history of the u.s. and it

140
00:06:14,720 --> 00:06:17,000
infected many other countries around the

141
00:06:16,610 --> 00:06:19,040
world

142
00:06:17,000 --> 00:06:22,460
this led everyone's driver's license

143
00:06:19,040 --> 00:06:25,250
credit history finance history extremely

144
00:06:22,460 --> 00:06:29,299
detailed and the reason that data was

145
00:06:25,250 --> 00:06:32,510
lost is because one server image Koufax

146
00:06:29,300 --> 00:06:35,630
was not patched and we knew about this

147
00:06:32,510 --> 00:06:37,849
this is a public issue that most that a

148
00:06:35,630 --> 00:06:40,129
large number of people patch even

149
00:06:37,849 --> 00:06:42,558
in fact they packs most of their servers

150
00:06:40,129 --> 00:06:44,270
except for one and that led to the

151
00:06:42,559 --> 00:06:46,249
greatest breach so if you're going to

152
00:06:44,270 --> 00:06:48,859
use security frameworks that's great

153
00:06:46,249 --> 00:06:51,770
you've got to keep your software up to

154
00:06:48,860 --> 00:06:54,589
date in the world of infrastructure

155
00:06:51,770 --> 00:06:56,240
security updating your operating system

156
00:06:54,589 --> 00:06:58,699
I think it's not that difficult these

157
00:06:56,240 --> 00:07:00,770
days it's become easier over time when

158
00:06:58,699 --> 00:07:03,919
you get a security patch you can usually

159
00:07:00,770 --> 00:07:05,299
update your operating system with good

160
00:07:03,919 --> 00:07:07,669
assurance that you're not going to

161
00:07:05,300 --> 00:07:10,580
destroy your organization when we look

162
00:07:07,669 --> 00:07:13,299
at developers building software that's

163
00:07:10,580 --> 00:07:15,469
not the case if we just start updating

164
00:07:13,300 --> 00:07:17,419
libraries that we care about and

165
00:07:15,469 --> 00:07:19,009
building software we're going to break

166
00:07:17,419 --> 00:07:21,769
software so this becomes a very

167
00:07:19,009 --> 00:07:24,169
challenging issue so what I recommend is

168
00:07:21,769 --> 00:07:26,360
you know every application has these

169
00:07:24,169 --> 00:07:28,938
issues every application uses third

170
00:07:26,360 --> 00:07:30,830
party software one of the projects from

171
00:07:28,939 --> 00:07:33,589
the OWASP Foundation which one of our

172
00:07:30,830 --> 00:07:36,438
flagship open-source projects it's

173
00:07:33,589 --> 00:07:39,080
called the Olas dependency check project

174
00:07:36,439 --> 00:07:41,809
this is a utility that you can run

175
00:07:39,080 --> 00:07:43,998
against your software codebase and it

176
00:07:41,809 --> 00:07:46,430
will alert you if you're using any

177
00:07:43,999 --> 00:07:49,099
third-party libraries that have known

178
00:07:46,430 --> 00:07:50,930
security vulnerabilities registered in

179
00:07:49,099 --> 00:07:53,719
them we also have a program called

180
00:07:50,930 --> 00:07:56,209
retire j/s one of my friends in Norway

181
00:07:53,719 --> 00:07:57,680
that looks at your JavaScript code and

182
00:07:56,209 --> 00:07:59,360
will let you know if there's any

183
00:07:57,680 --> 00:08:01,639
security vulnerabilities and the

184
00:07:59,360 --> 00:08:03,259
JavaScript libraries you're using so

185
00:08:01,639 --> 00:08:06,379
this is important when we're using

186
00:08:03,259 --> 00:08:09,050
third-party libraries and frameworks and

187
00:08:06,379 --> 00:08:12,619
and other utilities to help us build

188
00:08:09,050 --> 00:08:15,709
software we have got to on a daily basis

189
00:08:12,619 --> 00:08:17,329
check our code base to make sure that

190
00:08:15,709 --> 00:08:19,189
utilities that were using and the

191
00:08:17,329 --> 00:08:22,039
frameworks we're using are up-to-date

192
00:08:19,189 --> 00:08:24,139
and don't have any known vulnerabilities

193
00:08:22,039 --> 00:08:26,179
in them there's a very challenging part

194
00:08:24,139 --> 00:08:29,779
of secure software development number

195
00:08:26,179 --> 00:08:32,838
three so we're talking about the wasp

196
00:08:29,779 --> 00:08:35,779
proactive controls defenses that all

197
00:08:32,839 --> 00:08:38,689
software developers need to master to

198
00:08:35,779 --> 00:08:41,630
write and maintain secure software let's

199
00:08:38,688 --> 00:08:43,458
talk about secure database access those

200
00:08:41,630 --> 00:08:46,279
of us who've done security for a long

201
00:08:43,458 --> 00:08:48,560
time we know about sequel

202
00:08:46,279 --> 00:08:51,230
Injection who lit the room has heard

203
00:08:48,560 --> 00:08:53,209
about sequel injection before who's

204
00:08:51,230 --> 00:08:56,660
heard about sequel injection some of you

205
00:08:53,209 --> 00:09:00,138
who took class with me yesterday okay

206
00:08:56,660 --> 00:09:06,769
you stand up get up how do you stop

207
00:09:00,139 --> 00:09:09,589
sequel injection parametrize queries

208
00:09:06,769 --> 00:09:11,449
give him give applause that's good so

209
00:09:09,589 --> 00:09:11,990
this the oh you may sit down - thank you

210
00:09:11,449 --> 00:09:15,769
sir

211
00:09:11,990 --> 00:09:19,220
the only way that you can build secure

212
00:09:15,769 --> 00:09:22,490
database queries in software not through

213
00:09:19,220 --> 00:09:26,259
validation not by using a garbage Web

214
00:09:22,490 --> 00:09:29,329
Application Firewall you need to build

215
00:09:26,259 --> 00:09:32,540
parameterize queries because look at

216
00:09:29,329 --> 00:09:35,748
this email address is this AJ this is a

217
00:09:32,540 --> 00:09:37,939
really mail address yes it is who has

218
00:09:35,749 --> 00:09:43,129
anybody not agree is this a real email

219
00:09:37,939 --> 00:09:45,709
address and not only is it a real email

220
00:09:43,129 --> 00:09:48,139
address it's live this is one of my

221
00:09:45,709 --> 00:09:50,719
email addresses so if you don't believe

222
00:09:48,139 --> 00:09:52,639
me that this is a real email address go

223
00:09:50,720 --> 00:09:54,500
ahead and send me some email and I'll

224
00:09:52,639 --> 00:09:58,490
respond to you buh-buh-buh-buh my

225
00:09:54,500 --> 00:10:01,730
response be believe it's real the

226
00:09:58,490 --> 00:10:05,149
problem with this valid email address is

227
00:10:01,730 --> 00:10:07,639
that it's painfully dangerous to put

228
00:10:05,149 --> 00:10:09,800
into a sequel statement this is RFC

229
00:10:07,639 --> 00:10:12,350
compliant it will validate as a

230
00:10:09,800 --> 00:10:15,170
legitimate email address it's active

231
00:10:12,350 --> 00:10:17,120
right now do you believe hey Venus do

232
00:10:15,170 --> 00:10:19,370
you believe me because if if you don't

233
00:10:17,120 --> 00:10:22,279
go ahead and try it go ahead try because

234
00:10:19,370 --> 00:10:24,500
we'll see but it's unsafe for SQL here's

235
00:10:22,279 --> 00:10:26,569
a basic select statement or I'm

236
00:10:24,500 --> 00:10:29,410
selecting data from a customer table

237
00:10:26,569 --> 00:10:32,179
where someone entered in this new and

238
00:10:29,410 --> 00:10:34,329
valid email address there's my valid

239
00:10:32,179 --> 00:10:37,730
email address and here's the final query

240
00:10:34,329 --> 00:10:39,199
select data from the customer table look

241
00:10:37,730 --> 00:10:42,350
at the bottom one actually right right

242
00:10:39,199 --> 00:10:43,790
there select ID Social Security number

243
00:10:42,350 --> 00:10:46,850
credit card number mother's maiden name

244
00:10:43,790 --> 00:10:50,569
from the customers table where email is

245
00:10:46,850 --> 00:10:53,660
Jim or one does not equal manna cocom

246
00:10:50,569 --> 00:10:55,079
the last bit there one does not equal

247
00:10:53,660 --> 00:10:57,689
manna code calm

248
00:10:55,080 --> 00:11:00,830
in there that's called a universal truth

249
00:10:57,690 --> 00:11:03,510
attack it's always true which means

250
00:11:00,830 --> 00:11:05,520
everything from the customers table will

251
00:11:03,510 --> 00:11:10,439
be returned this is what sequel

252
00:11:05,520 --> 00:11:13,290
injection is yes J Bobby tables is wrong

253
00:11:10,440 --> 00:11:16,260
so that but know what Bobby table said

254
00:11:13,290 --> 00:11:19,500
was I hope you've learned to sanitize

255
00:11:16,260 --> 00:11:22,380
your inputs you don't do database you

256
00:11:19,500 --> 00:11:25,560
don't do input sanitization to stop

257
00:11:22,380 --> 00:11:28,680
sequel injection you stand up yeah how

258
00:11:25,560 --> 00:11:33,989
do you stop sequel injection prepared

259
00:11:28,680 --> 00:11:36,510
statements or clutter Buster Bobby

260
00:11:33,990 --> 00:11:38,670
tables this is a cartoon that's famous

261
00:11:36,510 --> 00:11:41,220
that talks about sequel injection and

262
00:11:38,670 --> 00:11:44,670
the answer that he gave in that cartoon

263
00:11:41,220 --> 00:11:47,280
is wrong you don't sanitize inputs you

264
00:11:44,670 --> 00:11:49,020
prohibit rise queries like this so

265
00:11:47,280 --> 00:11:51,630
here's the secure usage I'm building a

266
00:11:49,020 --> 00:11:53,910
query update employees set name is

267
00:11:51,630 --> 00:11:56,340
question mark where the ID is question

268
00:11:53,910 --> 00:12:00,300
mark we bind this potentially dangerous

269
00:11:56,340 --> 00:12:02,010
data into those placeholders and sequel

270
00:12:00,300 --> 00:12:03,510
injection goes away it's really that

271
00:12:02,010 --> 00:12:05,910
simple this is one of the most

272
00:12:03,510 --> 00:12:08,010
destructive vulnerabilities in a web

273
00:12:05,910 --> 00:12:10,740
application but it's one of the easiest

274
00:12:08,010 --> 00:12:12,960
to fix and when you do use parameterize

275
00:12:10,740 --> 00:12:15,330
queries the performance of your

276
00:12:12,960 --> 00:12:18,120
application goes up dramatically now

277
00:12:15,330 --> 00:12:20,600
there's a website called Bobby tables

278
00:12:18,120 --> 00:12:23,430
this will show you how to do

279
00:12:20,600 --> 00:12:25,980
parameterize queries in every major

280
00:12:23,430 --> 00:12:28,829
language is anybody here a programmer

281
00:12:25,980 --> 00:12:31,020
who's a programmer anybody here work

282
00:12:28,830 --> 00:12:32,060
with one you're the only programmer

283
00:12:31,020 --> 00:12:34,620
hello sir

284
00:12:32,060 --> 00:12:37,380
did anybody here work with programmers

285
00:12:34,620 --> 00:12:39,480
is anybody here do security and is

286
00:12:37,380 --> 00:12:44,640
responsible for the work of other

287
00:12:39,480 --> 00:12:47,220
programmers Wow okay so go here's your

288
00:12:44,640 --> 00:12:49,620
job every money go find the programmer

289
00:12:47,220 --> 00:12:52,170
and show them these websites Bobby

290
00:12:49,620 --> 00:12:54,150
tables and some of these resources this

291
00:12:52,170 --> 00:12:56,670
will teach them about what sequel

292
00:12:54,150 --> 00:12:58,819
injection is and how to fix it it's not

293
00:12:56,670 --> 00:13:02,280
that difficult and it's extremely

294
00:12:58,820 --> 00:13:04,050
important to the security of Nepal okay

295
00:13:02,280 --> 00:13:05,130
we're talking about defense we're

296
00:13:04,050 --> 00:13:08,189
looking at thief

297
00:13:05,130 --> 00:13:11,970
it's category 4 when you're building a

298
00:13:08,190 --> 00:13:15,660
when you're building a user interface in

299
00:13:11,970 --> 00:13:18,540
the web if I put a character like this

300
00:13:15,660 --> 00:13:21,329
on the web the web though the web

301
00:13:18,540 --> 00:13:24,569
browser will think this is code and will

302
00:13:21,330 --> 00:13:26,520
and it will cause a code to execute that

303
00:13:24,570 --> 00:13:28,650
may have come from an attacker this

304
00:13:26,520 --> 00:13:31,350
called cross-site scripting is the name

305
00:13:28,650 --> 00:13:34,290
of that attack category or JavaScript or

306
00:13:31,350 --> 00:13:38,010
content injection on the web we want to

307
00:13:34,290 --> 00:13:40,530
escape data we want to take all

308
00:13:38,010 --> 00:13:44,189
dangerous characters like this and

309
00:13:40,530 --> 00:13:47,030
convert them to a form like this which

310
00:13:44,190 --> 00:13:50,280
will display a less than symbol without

311
00:13:47,030 --> 00:13:53,699
treating it like code this is the most

312
00:13:50,280 --> 00:13:56,819
important defense when doing any kind of

313
00:13:53,700 --> 00:13:59,850
injection defense whenever I take data

314
00:13:56,820 --> 00:14:02,340
that a user submitted their name some

315
00:13:59,850 --> 00:14:04,500
some data field they entered their

316
00:14:02,340 --> 00:14:08,100
profile whatever any data that a user

317
00:14:04,500 --> 00:14:10,770
submits before we add that data to a

318
00:14:08,100 --> 00:14:13,440
parser like a sequel statement or before

319
00:14:10,770 --> 00:14:18,600
we add it to a browser before we add it

320
00:14:13,440 --> 00:14:21,120
to an LDAP call we have to escape it so

321
00:14:18,600 --> 00:14:25,170
we convert it to the proper format so

322
00:14:21,120 --> 00:14:27,840
it's just display or just just data and

323
00:14:25,170 --> 00:14:30,630
not actual code that's being executed

324
00:14:27,840 --> 00:14:33,510
there are many ways for an attacker to

325
00:14:30,630 --> 00:14:36,270
upload data to your application or to

326
00:14:33,510 --> 00:14:39,510
your server so it gets treated like code

327
00:14:36,270 --> 00:14:42,810
do you want attackers executing code on

328
00:14:39,510 --> 00:14:45,720
your server what's the answer no no you

329
00:14:42,810 --> 00:14:48,060
don't so the jump ahead here a bit the

330
00:14:45,720 --> 00:14:49,980
solution if we look at these projects

331
00:14:48,060 --> 00:14:53,430
those of you who are dotnet developers

332
00:14:49,980 --> 00:14:56,010
we have the the Microsoft encoder it's a

333
00:14:53,430 --> 00:14:58,949
it's escaping library to build a user

334
00:14:56,010 --> 00:15:01,410
interface in the world of Java we have

335
00:14:58,950 --> 00:15:03,840
an OAuth project the Oh wash Java

336
00:15:01,410 --> 00:15:07,110
encoder project this is a bunch of

337
00:15:03,840 --> 00:15:10,050
escaping routines and coding routines to

338
00:15:07,110 --> 00:15:12,290
take dangerous data and make it safe

339
00:15:10,050 --> 00:15:15,030
before you add it to your application

340
00:15:12,290 --> 00:15:16,209
what else do we have here here and

341
00:15:15,030 --> 00:15:18,699
here's other

342
00:15:16,209 --> 00:15:20,829
escaping libraries in every major

343
00:15:18,699 --> 00:15:22,628
language again I'm gonna give you a copy

344
00:15:20,829 --> 00:15:24,819
of these slides we're gonna move fast

345
00:15:22,629 --> 00:15:28,269
but you'll have access to these slides

346
00:15:24,819 --> 00:15:33,040
to to look into the details later on so

347
00:15:28,269 --> 00:15:36,189
Ruby on Rails PHP Java Scala dotnet go

348
00:15:33,040 --> 00:15:39,129
all of these different projects all of

349
00:15:36,189 --> 00:15:42,009
these different languages have escaping

350
00:15:39,129 --> 00:15:44,709
or encoding libraries built into them in

351
00:15:42,009 --> 00:15:47,139
some way so you can you can stop these

352
00:15:44,709 --> 00:15:48,969
injection attacks here's some other

353
00:15:47,139 --> 00:15:49,720
resources there's many kinds of

354
00:15:48,970 --> 00:15:52,480
injection

355
00:15:49,720 --> 00:15:53,290
there's command injection remote code

356
00:15:52,480 --> 00:15:55,660
execution

357
00:15:53,290 --> 00:15:58,149
there's LDAP injection there's all

358
00:15:55,660 --> 00:16:00,129
different ways that attackers can run

359
00:15:58,149 --> 00:16:02,139
code on your server here are some

360
00:16:00,129 --> 00:16:04,509
additional things you can read to learn

361
00:16:02,139 --> 00:16:06,639
about this and be careful cross-site

362
00:16:04,509 --> 00:16:09,790
scripting in all these forms of

363
00:16:06,639 --> 00:16:13,269
injection they are extremely destructive

364
00:16:09,790 --> 00:16:15,879
and often difficult to build in a secure

365
00:16:13,269 --> 00:16:18,670
fashion well so you want to use

366
00:16:15,879 --> 00:16:21,459
different tools to scan your code and

367
00:16:18,670 --> 00:16:24,610
scan your applications to look for these

368
00:16:21,459 --> 00:16:26,229
issues and here's a variety of resources

369
00:16:24,610 --> 00:16:28,600
that you can read to learn more about

370
00:16:26,230 --> 00:16:31,529
cross-site scripting is anybody here

371
00:16:28,600 --> 00:16:34,480
doing bug bounties at all bug bounties

372
00:16:31,529 --> 00:16:37,689
cross-site scripting is an easy thing to

373
00:16:34,480 --> 00:16:40,209
find in bug bounties I know plenty of

374
00:16:37,689 --> 00:16:42,519
people who make a living scanning for

375
00:16:40,209 --> 00:16:44,799
cross-site scripting reporting

376
00:16:42,519 --> 00:16:48,069
cross-site scripting and making money by

377
00:16:44,799 --> 00:16:50,769
using this page right here the cross

378
00:16:48,069 --> 00:16:53,199
site scripting filter evasion cheechee

379
00:16:50,769 --> 00:16:55,809
it's how you can build an attack that

380
00:16:53,199 --> 00:16:58,209
will get through filters and above

381
00:16:55,809 --> 00:17:01,329
bounty to let you find cross-site

382
00:16:58,209 --> 00:17:04,178
scripting so you can make some money

383
00:17:01,329 --> 00:17:07,629
there we go we like that alright level 5

384
00:17:04,179 --> 00:17:11,110
the number the fifth most important

385
00:17:07,630 --> 00:17:13,539
control that you need to master is input

386
00:17:11,109 --> 00:17:16,569
validation that's our next topic of

387
00:17:13,539 --> 00:17:19,770
discussion input validation one of the

388
00:17:16,569 --> 00:17:23,470
projects that I liked is called the wasp

389
00:17:19,770 --> 00:17:26,429
HTML sanitizer project this is a

390
00:17:23,470 --> 00:17:28,870
specialized filter a specialized

391
00:17:26,429 --> 00:17:32,860
validation layer what do you

392
00:17:28,870 --> 00:17:35,860
sir is author in HTML we may want to add

393
00:17:32,860 --> 00:17:39,779
that HTML to our website this is a

394
00:17:35,860 --> 00:17:43,000
project that will take HTML from a user

395
00:17:39,779 --> 00:17:45,460
and make sure it's safe that we can

396
00:17:43,000 --> 00:17:47,799
display to another user and this is a

397
00:17:45,460 --> 00:17:50,620
relatively important control because

398
00:17:47,799 --> 00:17:54,370
it's extremely complicated it's an easy

399
00:17:50,620 --> 00:17:57,219
way to attack a website and so what we

400
00:17:54,370 --> 00:18:01,449
do is we build a policy we say I'm going

401
00:17:57,220 --> 00:18:03,610
to allow HTTP and HTTPS URLs I'm gonna

402
00:18:01,450 --> 00:18:06,279
allow image tags I'm gonna allow border

403
00:18:03,610 --> 00:18:09,699
and height and wit and everything else

404
00:18:06,279 --> 00:18:13,539
every other HTML tag will get removed

405
00:18:09,700 --> 00:18:17,610
from input this library is important

406
00:18:13,539 --> 00:18:21,490
again because it allows a user to author

407
00:18:17,610 --> 00:18:24,939
HTML submit it up to your server so you

408
00:18:21,490 --> 00:18:28,299
can display it to other users in a safe

409
00:18:24,940 --> 00:18:32,590
fashion a lot of websites will let users

410
00:18:28,299 --> 00:18:34,870
put HTML tags in there in there and

411
00:18:32,590 --> 00:18:37,029
their input this is a difficult thing to

412
00:18:34,870 --> 00:18:39,100
do in a secure fashion and if you look

413
00:18:37,029 --> 00:18:41,020
at all of these other websites here all

414
00:18:39,100 --> 00:18:44,289
these other projects here we look at

415
00:18:41,020 --> 00:18:48,330
JavaScript Python php.net Ruby on Rails

416
00:18:44,289 --> 00:18:52,029
they all have some kind of specialized

417
00:18:48,330 --> 00:18:55,059
HTML validator built in it's available

418
00:18:52,029 --> 00:18:57,490
to your programmers we've been focusing

419
00:18:55,059 --> 00:19:00,879
on web security for well over a decade

420
00:18:57,490 --> 00:19:04,450
now the knowledge to build secure web

421
00:19:00,880 --> 00:19:07,270
applications is there if we if we just

422
00:19:04,450 --> 00:19:10,360
inform developers of how to do it

423
00:19:07,270 --> 00:19:12,700
correctly they will at least try to

424
00:19:10,360 --> 00:19:15,340
build secure software and again the

425
00:19:12,700 --> 00:19:17,950
libraries and the tools that we need to

426
00:19:15,340 --> 00:19:21,370
get this right is there and available

427
00:19:17,950 --> 00:19:24,120
for all of us we just have to use it but

428
00:19:21,370 --> 00:19:24,120
your question because

429
00:19:26,960 --> 00:19:44,730
tell me that one more time if you cannot

430
00:19:30,240 --> 00:19:47,040
control validation so if the let's talk

431
00:19:44,730 --> 00:19:49,560
about building the secure user interface

432
00:19:47,040 --> 00:19:51,990
on the web if the data that you're

433
00:19:49,560 --> 00:19:54,419
adding to a web page is just a string

434
00:19:51,990 --> 00:19:56,760
like it's not there's no markup in it

435
00:19:54,420 --> 00:20:00,420
there's no HTML it's just display data

436
00:19:56,760 --> 00:20:03,570
then you want to use escaping if the

437
00:20:00,420 --> 00:20:06,960
data that a user is submitting is HTML

438
00:20:03,570 --> 00:20:10,350
then you want to use an HTML sanitizer

439
00:20:06,960 --> 00:20:13,470
like we see here right if the user is

440
00:20:10,350 --> 00:20:16,560
building JavaScript programs well they

441
00:20:13,470 --> 00:20:19,560
have to use safe JavaScript functions to

442
00:20:16,560 --> 00:20:21,960
display data if you're taking JavaScript

443
00:20:19,560 --> 00:20:25,110
or advertisement for a third party you

444
00:20:21,960 --> 00:20:27,990
want a sandbox it in like a sandboxed

445
00:20:25,110 --> 00:20:30,479
iframe if you're dealing with JSON if

446
00:20:27,990 --> 00:20:33,270
you're if you're embedding JSON you want

447
00:20:30,480 --> 00:20:36,200
to serialize JSON the point I'm trying

448
00:20:33,270 --> 00:20:38,520
to make Vegas it's complicated and

449
00:20:36,200 --> 00:20:43,710
especially when it comes to sequel

450
00:20:38,520 --> 00:20:45,990
injection just said good parameterize

451
00:20:43,710 --> 00:20:47,460
queries he knows it's easier when it

452
00:20:45,990 --> 00:20:50,460
comes to building a secure user

453
00:20:47,460 --> 00:20:52,740
interface the web is wicked complicated

454
00:20:50,460 --> 00:20:54,840
only getting more complicated we need

455
00:20:52,740 --> 00:20:56,280
all of this knowledge to get it right

456
00:20:54,840 --> 00:20:58,199
and I'm looking and we're just I'm

457
00:20:56,280 --> 00:21:00,840
talking about one little slice of an

458
00:20:58,200 --> 00:21:06,770
HTML sanitization so what you can do

459
00:21:00,840 --> 00:21:09,870
though because is you can do you can do

460
00:21:06,770 --> 00:21:13,430
content security policy this is also

461
00:21:09,870 --> 00:21:16,709
extremely complicated but it's another

462
00:21:13,430 --> 00:21:18,930
standard that you can you can add to

463
00:21:16,710 --> 00:21:22,050
your web page that when the browser gets

464
00:21:18,930 --> 00:21:24,690
this policy it will limit what's allowed

465
00:21:22,050 --> 00:21:28,050
to execute in the browser I wish there

466
00:21:24,690 --> 00:21:30,720
was an easy answer there's not building

467
00:21:28,050 --> 00:21:33,120
the secure web page with lots of

468
00:21:30,720 --> 00:21:34,190
different kinds of data is extremely

469
00:21:33,120 --> 00:21:36,418
complicated

470
00:21:34,190 --> 00:21:41,039
all right we're we're where are we here

471
00:21:36,419 --> 00:21:43,859
so let's talk about oh yeah so we're

472
00:21:41,039 --> 00:21:47,009
talking about input validation and we're

473
00:21:43,859 --> 00:21:49,228
talking about complicated forms of input

474
00:21:47,009 --> 00:21:51,450
validation do you ever see a website

475
00:21:49,229 --> 00:21:56,159
that lets you upload files to that

476
00:21:51,450 --> 00:21:59,039
website hey Jay how much damage can you

477
00:21:56,159 --> 00:22:01,739
do if you're allowed to upload files to

478
00:21:59,039 --> 00:22:06,690
a website and that feature is built with

479
00:22:01,739 --> 00:22:09,299
poor security yeah once you have command

480
00:22:06,690 --> 00:22:22,649
injection that's no longer my server

481
00:22:09,299 --> 00:22:24,570
that's your server you what I like is

482
00:22:22,649 --> 00:22:27,629
they never seem to give honors before

483
00:22:24,570 --> 00:22:30,809
the gift shells that there is an attack

484
00:22:27,629 --> 00:22:31,498
where you could build a specialized gift

485
00:22:30,809 --> 00:22:34,859
image

486
00:22:31,499 --> 00:22:37,169
it was named doc gift it had the header

487
00:22:34,859 --> 00:22:40,228
of the gift but the rent that was a

488
00:22:37,169 --> 00:22:42,330
shell so I upload the gift and you said

489
00:22:40,229 --> 00:22:45,779
a no problem put it up on your server

490
00:22:42,330 --> 00:22:47,099
and I just navigate to that file and add

491
00:22:45,779 --> 00:22:49,049
an operating system command as a

492
00:22:47,099 --> 00:22:52,229
parameter and I got a shell on your

493
00:22:49,049 --> 00:22:55,679
server using a gift that's insane

494
00:22:52,229 --> 00:22:57,989
so the when it comes to file upload it's

495
00:22:55,679 --> 00:23:00,779
a very difficult control that's

496
00:22:57,989 --> 00:23:02,849
necessary to build secure software well

497
00:23:00,779 --> 00:23:06,239
let's talk about images real quick when

498
00:23:02,849 --> 00:23:08,279
J uploads some evil gift to my server

499
00:23:06,239 --> 00:23:11,580
what I want to do is I'm gonna upload

500
00:23:08,279 --> 00:23:14,580
that gift into a into a program called

501
00:23:11,580 --> 00:23:17,129
image magic that will verify if it

502
00:23:14,580 --> 00:23:19,978
really is an image I'll then take the

503
00:23:17,129 --> 00:23:22,109
image change it by one pixel and save it

504
00:23:19,979 --> 00:23:23,879
and if that's not a real image if it's

505
00:23:22,109 --> 00:23:26,749
some kind of shell to do command

506
00:23:23,879 --> 00:23:29,849
injection that it's not the the

507
00:23:26,749 --> 00:23:32,159
verification process will fail if it is

508
00:23:29,849 --> 00:23:34,678
a real image the verification process

509
00:23:32,159 --> 00:23:37,309
will succeed and we can then save the

510
00:23:34,679 --> 00:23:40,730
file again I'm trying to

511
00:23:37,309 --> 00:23:43,490
that there are situations where building

512
00:23:40,730 --> 00:23:46,340
security controls like file upload

513
00:23:43,490 --> 00:23:48,620
especially it's very complicated

514
00:23:46,340 --> 00:23:50,990
make sure your developers have the right

515
00:23:48,620 --> 00:23:54,320
expertise to build these features

516
00:23:50,990 --> 00:23:58,190
securely or turn them off or turn them

517
00:23:54,320 --> 00:24:01,759
off right and OneNote even valid data

518
00:23:58,190 --> 00:24:04,129
can cause injection a lot of books will

519
00:24:01,759 --> 00:24:06,379
tell your developers to do a lot of

520
00:24:04,129 --> 00:24:09,619
input validation but here I am

521
00:24:06,379 --> 00:24:12,490
validating an email address it's a valid

522
00:24:09,619 --> 00:24:15,999
email address but it's still extremely

523
00:24:12,490 --> 00:24:18,649
dangerous so be careful about about

524
00:24:15,999 --> 00:24:21,919
secure building secure software is

525
00:24:18,649 --> 00:24:24,709
complicated it takes a lot of expertise

526
00:24:21,919 --> 00:24:27,740
to get right and you need to have that

527
00:24:24,710 --> 00:24:35,509
expertise in your development teams if

528
00:24:27,740 --> 00:24:40,340
you want to do secure software hey hey 9

529
00:24:35,509 --> 00:24:42,820
outside ok I see the phone has your

530
00:24:40,340 --> 00:24:42,820
phone I'll talk

531
00:24:47,380 --> 00:24:56,240
I'm in the middle of a talk right now

532
00:24:50,370 --> 00:24:56,239
[Laughter]

533
00:24:57,220 --> 00:25:01,730
all right let's look at category that

534
00:24:59,929 --> 00:25:04,279
was for humor purpose only I'm only

535
00:25:01,730 --> 00:25:05,059
kidding I'm only namaste sir I'm only

536
00:25:04,279 --> 00:25:07,669
kiddin

537
00:25:05,059 --> 00:25:09,470
how boy I was using you for humor only

538
00:25:07,669 --> 00:25:12,769
I'm sorry it's for fun okay sorry about

539
00:25:09,470 --> 00:25:16,669
that let's talk okay class six are

540
00:25:12,769 --> 00:25:18,259
number six know one more everybody I

541
00:25:16,669 --> 00:25:19,759
just embarrassed him that's never

542
00:25:18,259 --> 00:25:22,269
everybody give them namaste you ready

543
00:25:19,759 --> 00:25:28,759
ready one two three

544
00:25:22,269 --> 00:25:30,110
namaste all right let's do c66 implement

545
00:25:28,759 --> 00:25:32,750
digital identity

546
00:25:30,110 --> 00:25:35,649
I wouldn't recommend and this is a very

547
00:25:32,750 --> 00:25:40,519
important part of secure software it's

548
00:25:35,649 --> 00:25:42,199
missed 863 look it's an American

549
00:25:40,519 --> 00:25:45,169
standard this is our National Institute

550
00:25:42,200 --> 00:25:48,409
of Standards I'm not recommending it to

551
00:25:45,169 --> 00:25:50,179
Nepal lightly this is so well built it's

552
00:25:48,409 --> 00:25:52,279
one of the best standards on

553
00:25:50,179 --> 00:25:54,799
authentication I have ever seen I

554
00:25:52,279 --> 00:25:55,940
recommend everybody in the world read

555
00:25:54,799 --> 00:25:57,980
this we're going to look at some of the

556
00:25:55,940 --> 00:26:01,029
details right now can anybody tell me

557
00:25:57,980 --> 00:26:08,059
what is authentication

558
00:26:01,029 --> 00:26:10,549
what's authentication it's it helps go

559
00:26:08,059 --> 00:26:13,940
for it it's verifying that some entity

560
00:26:10,549 --> 00:26:16,940
is who they claim to be its identity it

561
00:26:13,940 --> 00:26:19,340
could be a server it could be a user we

562
00:26:16,940 --> 00:26:22,070
want to establish their identity as the

563
00:26:19,340 --> 00:26:25,340
first layer and any piece of secure

564
00:26:22,070 --> 00:26:27,980
software so my big question is and by

565
00:26:25,340 --> 00:26:30,678
the way we could talk about identity for

566
00:26:27,980 --> 00:26:33,440
weeks it's a very complex topic I want

567
00:26:30,679 --> 00:26:37,370
to focus on one issue and that's how do

568
00:26:33,440 --> 00:26:39,860
we manage passwords for our users can

569
00:26:37,370 --> 00:26:42,350
anybody tell me when you're building in

570
00:26:39,860 --> 00:26:44,449
a web application and somebody gives you

571
00:26:42,350 --> 00:26:47,899
a password when they register for an

572
00:26:44,450 --> 00:26:52,009
account how should we not store that

573
00:26:47,899 --> 00:26:52,370
password plaintext so that's a good

574
00:26:52,009 --> 00:26:54,200
answer

575
00:26:52,370 --> 00:26:57,469
that's that's how you don't do it I want

576
00:26:54,200 --> 00:27:00,230
to explain how you do do it when someone

577
00:26:57,470 --> 00:27:03,200
your database and sees the passwords of

578
00:27:00,230 --> 00:27:06,200
your users they can use super computing

579
00:27:03,200 --> 00:27:09,649
power to crack that password here is a

580
00:27:06,200 --> 00:27:13,309
hash cracking rig this rig was defined

581
00:27:09,649 --> 00:27:15,739
in an ARS technica article in 2012 and

582
00:27:13,309 --> 00:27:18,559
four of these computers networked

583
00:27:15,740 --> 00:27:20,990
together could crack any Windows seven

584
00:27:18,559 --> 00:27:23,809
password any Windows seven password in

585
00:27:20,990 --> 00:27:26,120
about six hours so this is the problem

586
00:27:23,809 --> 00:27:27,889
with modern password storage even some

587
00:27:26,120 --> 00:27:30,649
of the biggest companies get this wrong

588
00:27:27,889 --> 00:27:34,820
there's also online services to help us

589
00:27:30,649 --> 00:27:36,709
do hash cracking for free and so let's

590
00:27:34,820 --> 00:27:38,960
talk about how to get this right we're

591
00:27:36,710 --> 00:27:41,539
gonna look at these six different ideas

592
00:27:38,960 --> 00:27:44,299
of what it really means to do secure

593
00:27:41,539 --> 00:27:47,899
password storage again the situation is

594
00:27:44,299 --> 00:27:51,019
some user registers to use your website

595
00:27:47,899 --> 00:27:54,590
as part of that registration they give

596
00:27:51,019 --> 00:27:58,370
you a password and it's your job it's

597
00:27:54,590 --> 00:28:01,549
your job to take that password and store

598
00:27:58,370 --> 00:28:04,820
it in a secure fashion so even if

599
00:28:01,549 --> 00:28:06,710
someone steals your database data the

600
00:28:04,820 --> 00:28:11,029
passwords going to be as protected as

601
00:28:06,710 --> 00:28:13,309
can be step number one we want to not

602
00:28:11,029 --> 00:28:15,620
limit the password strength we should

603
00:28:13,309 --> 00:28:18,830
allow any character and very long

604
00:28:15,620 --> 00:28:21,949
passwords the the NIST standard says the

605
00:28:18,830 --> 00:28:25,340
minimum password should be 8 and then we

606
00:28:21,950 --> 00:28:27,860
should support at least 64 character

607
00:28:25,340 --> 00:28:30,740
passwords I think 8 is too small I

608
00:28:27,860 --> 00:28:33,229
recommend 10 but and if you don't have

609
00:28:30,740 --> 00:28:36,710
multi-factor most of my customers are

610
00:28:33,230 --> 00:28:39,830
doing 16 as their minimum password size

611
00:28:36,710 --> 00:28:42,710
so I'll leave it at that for now number

612
00:28:39,830 --> 00:28:46,399
two we want to use a modern password

613
00:28:42,710 --> 00:28:49,220
policy scheme a lot of the password

614
00:28:46,399 --> 00:28:53,110
policies that we use today are wrong

615
00:28:49,220 --> 00:28:56,149
they're bad they don't actually help us

616
00:28:53,110 --> 00:28:58,668
compete with the modern attacks that

617
00:28:56,149 --> 00:29:01,610
attackers use against web services today

618
00:28:58,669 --> 00:29:03,769
so here's my advice don't limit the

619
00:29:01,610 --> 00:29:07,490
characters or the length of passwords

620
00:29:03,769 --> 00:29:08,060
have at least 10 characters up to 64 the

621
00:29:07,490 --> 00:29:10,340
sting

622
00:29:08,060 --> 00:29:11,990
nerd says eight i recommend more block

623
00:29:10,340 --> 00:29:14,840
passwords that have dictionary words

624
00:29:11,990 --> 00:29:18,110
block passwords have repetition like six

625
00:29:14,840 --> 00:29:20,600
days in a row block content specific

626
00:29:18,110 --> 00:29:23,689
passwords like a username or the name of

627
00:29:20,600 --> 00:29:25,760
your company or service check against

628
00:29:23,690 --> 00:29:28,610
the list of common passwords in the

629
00:29:25,760 --> 00:29:31,250
world today troy honks and Daniel Miller

630
00:29:28,610 --> 00:29:34,100
they maintain open source databases of

631
00:29:31,250 --> 00:29:37,070
known passwords we should block between

632
00:29:34,100 --> 00:29:39,980
50 to a hundred and fifty thousand of

633
00:29:37,070 --> 00:29:42,889
the most common passwords in use in the

634
00:29:39,980 --> 00:29:45,260
world today because that's how attackers

635
00:29:42,890 --> 00:29:47,450
go after your software we should

636
00:29:45,260 --> 00:29:50,180
throttle or manage route force attacks

637
00:29:47,450 --> 00:29:52,730
we should not force these special

638
00:29:50,180 --> 00:29:54,620
character rules they're nonsense and we

639
00:29:52,730 --> 00:29:56,630
should oh and stop using security

640
00:29:54,620 --> 00:29:59,540
questions I can look up your Facebook

641
00:29:56,630 --> 00:30:01,970
account and find the answer also no more

642
00:29:59,540 --> 00:30:04,790
mandatory password expiration and

643
00:30:01,970 --> 00:30:07,300
encourages bad behavior and we need to

644
00:30:04,790 --> 00:30:10,190
support Unicode in our password as well

645
00:30:07,300 --> 00:30:13,879
including emoji these are not my ideas

646
00:30:10,190 --> 00:30:16,910
this is from mist 863 so welcome to

647
00:30:13,880 --> 00:30:18,440
ThreatCon because I have homework for

648
00:30:16,910 --> 00:30:23,240
you and everybody else

649
00:30:18,440 --> 00:30:25,400
go read mist 863 B and look at the new

650
00:30:23,240 --> 00:30:28,430
password rules this is one of the

651
00:30:25,400 --> 00:30:34,100
biggest changes that we see in password

652
00:30:28,430 --> 00:30:40,029
policy in the rule today J why why don't

653
00:30:34,100 --> 00:30:41,678
they support you know their passwords

654
00:30:40,029 --> 00:30:44,740
I've seen banks that don't report

655
00:30:41,679 --> 00:30:47,710
ridiculous and this this is why the

656
00:30:44,740 --> 00:30:49,960
leader of this standards Jim Fenton this

657
00:30:47,710 --> 00:30:51,879
is why Jim put this in there we need to

658
00:30:49,960 --> 00:30:54,249
support special characters there was a

659
00:30:51,879 --> 00:30:56,559
US Bank recently some security

660
00:30:54,249 --> 00:30:59,169
professional she made her password

661
00:30:56,559 --> 00:31:03,070
like smiley face smiley face pooh pooh

662
00:30:59,169 --> 00:31:06,039
pooh and a ham and a turkey seriously

663
00:31:03,070 --> 00:31:07,689
all emoji and it crashed the whole Bank

664
00:31:06,039 --> 00:31:09,908
for a day cuz they weren't ready to

665
00:31:07,690 --> 00:31:12,460
support you but people are gonna use

666
00:31:09,909 --> 00:31:14,499
emoji in their password we have got to

667
00:31:12,460 --> 00:31:19,990
be ready for it I agree with you the

668
00:31:14,499 --> 00:31:22,149
other one some banks they only allow 8

669
00:31:19,990 --> 00:31:26,019
character passwords why because there

670
00:31:22,149 --> 00:31:28,869
are cheap bastards and they're not

671
00:31:26,019 --> 00:31:31,330
willing to upgrade their mainframe which

672
00:31:28,869 --> 00:31:36,610
is a limit of eight character password

673
00:31:31,330 --> 00:31:38,499
seriously oh it's like really old

674
00:31:36,610 --> 00:31:40,719
mainframe technology has an eight

675
00:31:38,499 --> 00:31:42,519
character hard limit and there's a lot

676
00:31:40,720 --> 00:31:44,980
of people that stealing is cobalt

677
00:31:42,519 --> 00:31:48,669
because of how reliable it is and so

678
00:31:44,980 --> 00:31:51,029
update your frickin software really cuz

679
00:31:48,669 --> 00:31:54,519
most banks are like hmm should we

680
00:31:51,029 --> 00:31:57,009
upgrade our infrastructure to make sure

681
00:31:54,519 --> 00:31:58,840
we support long passwords or should we

682
00:31:57,009 --> 00:32:03,039
give that money to the executives for

683
00:31:58,840 --> 00:32:04,480
bonuses hard I'm making a joke well it's

684
00:32:03,039 --> 00:32:06,789
kind of true but I'm making a bad joke

685
00:32:04,480 --> 00:32:09,639
not as true this is not a jest true

686
00:32:06,789 --> 00:32:11,860
let's move on okay we're talking about

687
00:32:09,639 --> 00:32:15,459
how to start how to store sensitive

688
00:32:11,860 --> 00:32:20,918
tasks first right so how much time I

689
00:32:15,460 --> 00:32:25,269
have Jenny okay the next thing we want

690
00:32:20,919 --> 00:32:27,399
to do is use a modern algorithm to store

691
00:32:25,269 --> 00:32:30,009
the password I'm sorry first we do a

692
00:32:27,399 --> 00:32:33,059
hash so you give me a password I'm gonna

693
00:32:30,009 --> 00:32:36,429
cash it so a very long password is now

694
00:32:33,059 --> 00:32:39,070
512 bits we're not gonna stop there the

695
00:32:36,429 --> 00:32:41,799
next thing we do is we add a salt this

696
00:32:39,070 --> 00:32:44,950
is a random string that's unique for

697
00:32:41,799 --> 00:32:47,168
everybody's account I attach a salt to

698
00:32:44,950 --> 00:32:49,639
the password before I protect it and

699
00:32:47,169 --> 00:32:52,459
even if two people have

700
00:32:49,639 --> 00:32:54,649
same password it will look different in

701
00:32:52,459 --> 00:32:58,070
this in the database because they each

702
00:32:54,649 --> 00:33:00,439
have a different salt next use a modern

703
00:32:58,070 --> 00:33:02,958
algorithm this is the most important

704
00:33:00,440 --> 00:33:07,669
slide in this section you want to use P

705
00:33:02,959 --> 00:33:11,690
crypt s crypt or or argon to I these are

706
00:33:07,669 --> 00:33:15,799
the only good three algorithms in the

707
00:33:11,690 --> 00:33:18,469
world today to properly store a password

708
00:33:15,799 --> 00:33:22,549
from your user anything else you choose

709
00:33:18,469 --> 00:33:26,419
is a bad idea and if you look at pH P it

710
00:33:22,549 --> 00:33:29,299
has B crypt and argon two I built into

711
00:33:26,419 --> 00:33:31,820
the language natively so it's easy for

712
00:33:29,299 --> 00:33:33,979
developers to use these defenses so

713
00:33:31,820 --> 00:33:37,279
here's the basic workflow for password

714
00:33:33,979 --> 00:33:39,649
storage hash the password and a fault a

715
00:33:37,279 --> 00:33:43,190
large random string unique for every

716
00:33:39,649 --> 00:33:46,129
user then use P crypt and as a final

717
00:33:43,190 --> 00:33:48,619
step go ahead and encrypt the final step

718
00:33:46,129 --> 00:33:51,129
as well if you wish to there's also a

719
00:33:48,619 --> 00:33:53,869
good cheat sheet called the OAuth

720
00:33:51,129 --> 00:33:56,208
password storage cheat sheet that

721
00:33:53,869 --> 00:33:58,039
several of us have worked on as well as

722
00:33:56,209 --> 00:34:01,909
these other standards right we have the

723
00:33:58,039 --> 00:34:06,200
ASVs standard we have the authentication

724
00:34:01,909 --> 00:34:08,509
cheat sheet we have missed 863 - 3 that

725
00:34:06,200 --> 00:34:11,089
talks about these new rules and if I

726
00:34:08,509 --> 00:34:15,529
could add one more I would add the a

727
00:34:11,089 --> 00:34:17,690
wasp password storage cheat sheet where

728
00:34:15,529 --> 00:34:22,460
we talk about these rules in great

729
00:34:17,690 --> 00:34:25,159
detail so far so good all right we got

730
00:34:22,460 --> 00:34:28,730
three more we're at 7 we're talking

731
00:34:25,159 --> 00:34:30,769
about the top 10 defensive controls that

732
00:34:28,730 --> 00:34:33,289
we can add to software let's talk about

733
00:34:30,768 --> 00:34:36,138
access control this is a very common

734
00:34:33,289 --> 00:34:38,629
attack it's called privilege escalation

735
00:34:36,139 --> 00:34:41,960
it's a way for an attacker with low

736
00:34:38,629 --> 00:34:44,328
level access to conduct many forms of

737
00:34:41,960 --> 00:34:46,819
attacks that will give them elevated

738
00:34:44,329 --> 00:34:49,490
access in some way sometimes these are

739
00:34:46,819 --> 00:34:52,339
complex attacks but often they're

740
00:34:49,489 --> 00:34:55,308
relatively easy even in Windows to this

741
00:34:52,339 --> 00:34:58,849
day if you give me a normal user account

742
00:34:55,309 --> 00:35:01,039
on most versions of Windows most

743
00:34:58,849 --> 00:35:01,859
attackers I know of will be able to gain

744
00:35:01,039 --> 00:35:03,900
admin

745
00:35:01,859 --> 00:35:06,328
access in a relatively short amount of

746
00:35:03,900 --> 00:35:09,960
time using open source tools like

747
00:35:06,329 --> 00:35:15,989
Metasploit even to this day so access

748
00:35:09,960 --> 00:35:18,539
control is a very design heavy subject a

749
00:35:15,989 --> 00:35:22,039
lot of these mistakes that we make in

750
00:35:18,539 --> 00:35:26,180
software we can fix them after the fact

751
00:35:22,039 --> 00:35:32,549
boom that's the earth is what the Venus

752
00:35:26,180 --> 00:35:35,879
hangout for one sec what's that the

753
00:35:32,549 --> 00:35:38,730
water so this is a very design heavy

754
00:35:35,880 --> 00:35:40,499
topic unfortunately the point I want to

755
00:35:38,730 --> 00:35:42,599
make is when you're building new

756
00:35:40,499 --> 00:35:45,868
software for government for your

757
00:35:42,599 --> 00:35:47,460
telecoms for healthcare for banking for

758
00:35:45,869 --> 00:35:50,309
whatever you that's important to the

759
00:35:47,460 --> 00:35:53,849
country make sure you spend a lot of

760
00:35:50,309 --> 00:35:56,789
time upfront designing your access

761
00:35:53,849 --> 00:35:59,160
control with a great deal of detail once

762
00:35:56,789 --> 00:36:02,130
you've made a choice on a certain kind

763
00:35:59,160 --> 00:36:04,440
of access control design is very

764
00:36:02,130 --> 00:36:08,940
difficult to change it after you've

765
00:36:04,440 --> 00:36:11,190
released that software so we have so the

766
00:36:08,940 --> 00:36:13,289
most common way of doing access control

767
00:36:11,190 --> 00:36:17,190
is is with roles role based access

768
00:36:13,289 --> 00:36:19,890
control this is a very weak form of

769
00:36:17,190 --> 00:36:22,319
access control programming we want to

770
00:36:19,890 --> 00:36:25,558
move to a modern standard like claims

771
00:36:22,319 --> 00:36:28,950
write come in a roll I'll say check if

772
00:36:25,559 --> 00:36:32,130
the user is a certain role in claims on

773
00:36:28,950 --> 00:36:35,279
a claims based access control I'm asking

774
00:36:32,130 --> 00:36:38,069
in code if the user can access a certain

775
00:36:35,279 --> 00:36:40,980
feature this is what modern access

776
00:36:38,069 --> 00:36:43,140
control requires in the u.s. we have a

777
00:36:40,980 --> 00:36:45,960
standard called a back write called

778
00:36:43,140 --> 00:36:48,749
attribute based access control because

779
00:36:45,960 --> 00:36:52,680
role based access control has failed in

780
00:36:48,749 --> 00:36:55,169
the US government in many ways so in

781
00:36:52,680 --> 00:36:58,049
Japan here so consider attribute based

782
00:36:55,170 --> 00:37:01,950
access control make sure you can support

783
00:36:58,049 --> 00:37:04,049
data specific access control as well and

784
00:37:01,950 --> 00:37:06,569
here are some things you can read to

785
00:37:04,049 --> 00:37:08,839
look into this more we have the access

786
00:37:06,569 --> 00:37:14,880
control cheechee and we have a special

787
00:37:08,839 --> 00:37:17,400
publication 800-53 rolled its again the

788
00:37:14,880 --> 00:37:20,310
tribute based access control standard

789
00:37:17,400 --> 00:37:23,090
those of you again banking government

790
00:37:20,310 --> 00:37:25,950
telecom healthcare your access control

791
00:37:23,090 --> 00:37:28,320
requirements are very complicated and

792
00:37:25,950 --> 00:37:30,899
these are the documents that will help

793
00:37:28,320 --> 00:37:33,720
you design access control properly

794
00:37:30,900 --> 00:37:34,620
before you build big projects for big

795
00:37:33,720 --> 00:37:37,259
organizations

796
00:37:34,620 --> 00:37:41,100
all right level 8 we're one thing that

797
00:37:37,260 --> 00:37:45,360
almost done now folks the eighth control

798
00:37:41,100 --> 00:37:48,660
is protect data everywhere who - who is

799
00:37:45,360 --> 00:37:54,030
in class with me yesterday who was in

800
00:37:48,660 --> 00:37:59,430
class how often should we use HTTPS

801
00:37:54,030 --> 00:38:04,430
everybody always is there ever a good

802
00:37:59,430 --> 00:38:08,609
excuse to use HTTP in the web sites no

803
00:38:04,430 --> 00:38:10,770
this is a big problem in Nepal right go

804
00:38:08,610 --> 00:38:13,050
look at Nepal Airlines we just took a

805
00:38:10,770 --> 00:38:15,960
look at it yesterday the homepage of

806
00:38:13,050 --> 00:38:18,360
Nepal Airlines is HTTP

807
00:38:15,960 --> 00:38:20,700
does anybody know anyone from Nepal

808
00:38:18,360 --> 00:38:23,250
Airlines who works there I want you to

809
00:38:20,700 --> 00:38:25,100
call them I want you to call them what

810
00:38:23,250 --> 00:38:30,200
are you gonna tell them

811
00:38:25,100 --> 00:38:34,740
aged how often should they use HTTP

812
00:38:30,200 --> 00:38:37,500
always that's right so the first thing

813
00:38:34,740 --> 00:38:39,419
we want to do is use HTTPS

814
00:38:37,500 --> 00:38:41,460
what about without inside of your

815
00:38:39,420 --> 00:38:44,610
company what if I have a private web

816
00:38:41,460 --> 00:38:48,360
service that's on our intranet class

817
00:38:44,610 --> 00:38:51,750
should we use HTTPS yes is there ever a

818
00:38:48,360 --> 00:38:54,600
good excuse to use HTTP thank you I'm

819
00:38:51,750 --> 00:38:56,850
just just tuck this double-checking so

820
00:38:54,600 --> 00:38:59,130
when we run crypting data with HTTPS

821
00:38:56,850 --> 00:39:00,480
there's all these standards that we want

822
00:38:59,130 --> 00:39:02,580
to look at I'm not going to go through

823
00:39:00,480 --> 00:39:05,190
them all now there's a lot of good

824
00:39:02,580 --> 00:39:08,549
knowledge out there so the first one is

825
00:39:05,190 --> 00:39:11,520
strict Transport Security but I want I

826
00:39:08,550 --> 00:39:17,220
want to take a look at the website SSL

827
00:39:11,520 --> 00:39:19,440
labs again SSL L ABS comm this is a way

828
00:39:17,220 --> 00:39:22,709
you can you can add your own website to

829
00:39:19,440 --> 00:39:26,100
this tool and it will verify how good

830
00:39:22,710 --> 00:39:30,120
your HTTPS is for a certain website

831
00:39:26,100 --> 00:39:33,150
it's not enough to do HTTP you have to

832
00:39:30,120 --> 00:39:34,710
do it in a well configured way so I'm

833
00:39:33,150 --> 00:39:38,300
not going to talk about this now this is

834
00:39:34,710 --> 00:39:41,160
this is pretty old knowledge age HTTP

835
00:39:38,300 --> 00:39:45,300
everywhere and you do it in a well

836
00:39:41,160 --> 00:39:49,170
configured way and use the website SSL

837
00:39:45,300 --> 00:39:50,670
labs comm to verify that the work you

838
00:39:49,170 --> 00:39:52,800
did is done correctly

839
00:39:50,670 --> 00:39:54,810
hey sir the plaid shirt you're shaking

840
00:39:52,800 --> 00:39:59,280
your head no are you saying don't do

841
00:39:54,810 --> 00:40:02,690
HTTPS no how often should you do HTTPS

842
00:39:59,280 --> 00:40:04,260
at your website sir not another plan guy

843
00:40:02,690 --> 00:40:08,040
everyday everywhere

844
00:40:04,260 --> 00:40:10,680
you're forgiven okay good so let's talk

845
00:40:08,040 --> 00:40:12,390
about stored cryptography stored crypto

846
00:40:10,680 --> 00:40:15,359
so let's say we want to build some

847
00:40:12,390 --> 00:40:17,370
crypto and store data in our application

848
00:40:15,360 --> 00:40:20,220
with stored cryptography you're probably

849
00:40:17,370 --> 00:40:21,990
going to do is AES you want to avoid ECB

850
00:40:20,220 --> 00:40:23,759
mode because it's basically plaintext

851
00:40:21,990 --> 00:40:25,200
you probably want to use gala lock

852
00:40:23,760 --> 00:40:27,900
counter mode which is one of the most

853
00:40:25,200 --> 00:40:30,029
rigorous forms of AES it's not always

854
00:40:27,900 --> 00:40:33,540
available so you may be stuck with using

855
00:40:30,030 --> 00:40:35,760
AES CBC mode hello which requires mac

856
00:40:33,540 --> 00:40:37,590
and eat a unique initialization vector

857
00:40:35,760 --> 00:40:39,540
per message you have to get your padding

858
00:40:37,590 --> 00:40:41,520
correct you have to get key storage and

859
00:40:39,540 --> 00:40:43,410
key management right and you have to

860
00:40:41,520 --> 00:40:45,480
probably isolate this cryptographic

861
00:40:43,410 --> 00:40:47,279
process in a separate service that just

862
00:40:45,480 --> 00:40:49,350
gives you confidentiality you got an H

863
00:40:47,280 --> 00:40:50,820
Mac your ciphertext to get integrity you

864
00:40:49,350 --> 00:40:52,140
also should derive integrity and

865
00:40:50,820 --> 00:40:53,370
confidentiality keys from the same

866
00:40:52,140 --> 00:40:55,259
master key using a technique called

867
00:40:53,370 --> 00:40:57,029
labeling and don't forget generate a

868
00:40:55,260 --> 00:41:00,720
master key and good luck with that

869
00:40:57,030 --> 00:41:02,700
nobody gets this stuff right building

870
00:41:00,720 --> 00:41:05,189
applied crypto with way too complicated

871
00:41:02,700 --> 00:41:07,770
even amongst the top experts in the

872
00:41:05,190 --> 00:41:09,930
world we get it wrong so you should be

873
00:41:07,770 --> 00:41:12,630
using a well vetted cryptographic

874
00:41:09,930 --> 00:41:15,540
library I think the best one out there

875
00:41:12,630 --> 00:41:17,760
is Google tink you know Google is an

876
00:41:15,540 --> 00:41:20,009
interesting company a little bit of evil

877
00:41:17,760 --> 00:41:21,270
a lot of good they do some good Google

878
00:41:20,010 --> 00:41:23,460
people here I love you don't get me

879
00:41:21,270 --> 00:41:25,620
wrong you work for an evil company but

880
00:41:23,460 --> 00:41:27,990
you do good so it's all right Google

881
00:41:25,620 --> 00:41:30,600
tink is one of the best projects I've

882
00:41:27,990 --> 00:41:33,689
ever seen out of Google right Google

883
00:41:30,600 --> 00:41:34,710
tink allows me to connect two very

884
00:41:33,690 --> 00:41:37,230
popular

885
00:41:34,710 --> 00:41:39,390
management services like the Amazon key

886
00:41:37,230 --> 00:41:43,380
management service and similar natively

887
00:41:39,390 --> 00:41:47,520
it uses all strong highly secure

888
00:41:43,380 --> 00:41:50,070
defaults it's it's there's Java C++ go

889
00:41:47,520 --> 00:41:52,380
and Objective C available that has all

890
00:41:50,070 --> 00:41:54,930
interoperable cryptography this would

891
00:41:52,380 --> 00:41:57,480
take me hundreds of thousands of hours

892
00:41:54,930 --> 00:42:00,299
to build at its open-source well

893
00:41:57,480 --> 00:42:01,170
maintained and again integration with

894
00:42:00,300 --> 00:42:03,780
key vaults

895
00:42:01,170 --> 00:42:05,970
you should never store a key on a server

896
00:42:03,780 --> 00:42:09,089
or in your database it should be an

897
00:42:05,970 --> 00:42:11,129
affordable cryptographic vault is there

898
00:42:09,089 --> 00:42:14,000
is the common answer that we talked

899
00:42:11,130 --> 00:42:17,070
about today Google tanks one of the best

900
00:42:14,000 --> 00:42:18,960
this other library lib sodium is from

901
00:42:17,070 --> 00:42:22,500
Dan Bernstein and his team another

902
00:42:18,960 --> 00:42:24,900
excellent another excellent library to

903
00:42:22,500 --> 00:42:27,210
help you to apply crypto then this is

904
00:42:24,900 --> 00:42:29,400
just incredibly difficult that the most

905
00:42:27,210 --> 00:42:32,599
difficult part of doing cryptographic

906
00:42:29,400 --> 00:42:36,810
storage is doing key management and in

907
00:42:32,599 --> 00:42:39,450
2018 we have good solutions key vaults

908
00:42:36,810 --> 00:42:41,549
secrets vaults one of the more popular

909
00:42:39,450 --> 00:42:44,160
in the commercial world is the vault

910
00:42:41,550 --> 00:42:47,490
project from a company called hi-c Corp

911
00:42:44,160 --> 00:42:50,670
and every major cloud service also has

912
00:42:47,490 --> 00:42:53,189
vaults to store keys and be careful this

913
00:42:50,670 --> 00:42:55,470
is really tough to get right we have the

914
00:42:53,190 --> 00:42:58,170
transport layer protection cheat sheet

915
00:42:55,470 --> 00:43:00,569
there's the documentation from SSL labs

916
00:42:58,170 --> 00:43:02,730
some of the best out there and then

917
00:43:00,570 --> 00:43:05,460
there's the OAuth cryptographic storage

918
00:43:02,730 --> 00:43:08,130
cheat sheet this is a tough topic so

919
00:43:05,460 --> 00:43:10,619
study hard before you build those kinds

920
00:43:08,130 --> 00:43:13,050
of cryptographic services almost done

921
00:43:10,619 --> 00:43:15,150
here we want to do lots of logging you

922
00:43:13,050 --> 00:43:17,940
know one of the theories that I see in

923
00:43:15,150 --> 00:43:20,970
the world today is teaching developers

924
00:43:17,940 --> 00:43:24,180
to do security engineering is very

925
00:43:20,970 --> 00:43:26,549
difficult it takes years to become a

926
00:43:24,180 --> 00:43:29,069
good security engineer so what I see

927
00:43:26,550 --> 00:43:31,680
some companies do is they tried to write

928
00:43:29,070 --> 00:43:35,089
secure software but they focus more on

929
00:43:31,680 --> 00:43:38,910
telemetry and logging they log

930
00:43:35,089 --> 00:43:42,390
everything every single little option of

931
00:43:38,910 --> 00:43:45,330
every user they log it with great detail

932
00:43:42,390 --> 00:43:47,520
so we can monitor what's happening in an

933
00:43:45,330 --> 00:43:49,680
application so we can do

934
00:43:47,520 --> 00:43:53,280
early when we're at when we're under an

935
00:43:49,680 --> 00:43:56,490
attack so log a lot now logging is a bit

936
00:43:53,280 --> 00:43:59,579
of a boring topic doing logging well is

937
00:43:56,490 --> 00:44:01,859
is not even that difficult and if you do

938
00:43:59,579 --> 00:44:05,460
logging well it will give you a measure

939
00:44:01,859 --> 00:44:07,680
of intrusion detection that no product

940
00:44:05,460 --> 00:44:11,190
can give you we need developers to log

941
00:44:07,680 --> 00:44:14,308
security events inside of code to do

942
00:44:11,190 --> 00:44:16,980
this well so here we have the OAuth

943
00:44:14,309 --> 00:44:18,990
logging project the OAuth security

944
00:44:16,980 --> 00:44:21,329
logging project and the lodging cheat

945
00:44:18,990 --> 00:44:24,089
sheet that will talk about these topics

946
00:44:21,329 --> 00:44:26,010
in detail it's not very exciting but it

947
00:44:24,089 --> 00:44:28,710
is very important to secure development

948
00:44:26,010 --> 00:44:31,980
last but not least we need to handle

949
00:44:28,710 --> 00:44:33,839
errors in our application development so

950
00:44:31,980 --> 00:44:37,440
we want to manage these exceptions in a

951
00:44:33,839 --> 00:44:40,380
centralized manner we want to ensure

952
00:44:37,440 --> 00:44:42,780
that unexpected behavior and application

953
00:44:40,380 --> 00:44:44,760
is handled correctly this is pretty easy

954
00:44:42,780 --> 00:44:47,730
to do it's just something that a lot of

955
00:44:44,760 --> 00:44:50,130
developers they they skip it and then

956
00:44:47,730 --> 00:44:52,290
later on when bugs happen in code and

957
00:44:50,130 --> 00:44:54,690
errors happen during real time it

958
00:44:52,290 --> 00:44:57,390
becomes difficult to manage those if

959
00:44:54,690 --> 00:45:01,040
we're not doing air handling correctly

960
00:44:57,390 --> 00:45:05,670
so the conclusion here is we have got to

961
00:45:01,040 --> 00:45:07,950
proactively with intention early make

962
00:45:05,670 --> 00:45:10,950
the decision that we want to build

963
00:45:07,950 --> 00:45:14,939
secure software we should use a standard

964
00:45:10,950 --> 00:45:17,549
like ASVs to define what our security

965
00:45:14,940 --> 00:45:20,400
requirements are for our developers we

966
00:45:17,549 --> 00:45:24,420
can also use the Olas cheat sheet series

967
00:45:20,400 --> 00:45:26,280
to help inform developers what secure

968
00:45:24,420 --> 00:45:29,339
software construction is all about

969
00:45:26,280 --> 00:45:32,490
there's many other there's many other

970
00:45:29,339 --> 00:45:34,259
resources that a wasp that developers

971
00:45:32,490 --> 00:45:37,109
can use to learn more about building

972
00:45:34,260 --> 00:45:39,599
secure software and next Jay likes this

973
00:45:37,109 --> 00:45:43,140
we can't just get away with building

974
00:45:39,599 --> 00:45:45,750
secure software we have to test we who

975
00:45:43,140 --> 00:45:48,328
here is a hacker who's a hacker nobody's

976
00:45:45,750 --> 00:45:49,829
a hacker ok so those of you who are

977
00:45:48,329 --> 00:45:51,930
hackers weren't admit to who

978
00:45:49,829 --> 00:45:52,290
professional security testers is what I

979
00:45:51,930 --> 00:45:55,790
meant

980
00:45:52,290 --> 00:46:00,230
security testers we need to verify

981
00:45:55,790 --> 00:46:03,290
security in our software continuously

982
00:46:00,230 --> 00:46:06,230
once or twice a year not like every but

983
00:46:03,290 --> 00:46:09,079
every day we should be testing for

984
00:46:06,230 --> 00:46:12,829
security every day that we're building

985
00:46:09,079 --> 00:46:16,400
software continuous in a loop using

986
00:46:12,829 --> 00:46:19,250
automation and tools and pen testers and

987
00:46:16,400 --> 00:46:21,890
everything else we can do to verify if

988
00:46:19,250 --> 00:46:25,820
that application is being built securely

989
00:46:21,890 --> 00:46:28,490
the earlier we find security bugs and

990
00:46:25,820 --> 00:46:30,410
software the cheaper it's gonna be to

991
00:46:28,490 --> 00:46:33,319
fix those bugs what a lot of companies

992
00:46:30,410 --> 00:46:35,569
do is they let developers build whatever

993
00:46:33,320 --> 00:46:38,720
software they want and then a week

994
00:46:35,570 --> 00:46:41,000
before we have to go live let's do a

995
00:46:38,720 --> 00:46:43,970
little testing how's that working for

996
00:46:41,000 --> 00:46:47,210
you because it doesn't work that's

997
00:46:43,970 --> 00:46:49,759
called the hamster wheel of pain you're

998
00:46:47,210 --> 00:46:52,339
running on a hamster wheel and how are

999
00:46:49,760 --> 00:46:56,390
you going you're going nowhere you're

1000
00:46:52,339 --> 00:46:59,000
repeating the same mistakes so when when

1001
00:46:56,390 --> 00:47:01,029
in a software life cycle should you

1002
00:46:59,000 --> 00:47:03,980
start thinking about security because

1003
00:47:01,030 --> 00:47:06,200
from the very beginning and how often

1004
00:47:03,980 --> 00:47:10,069
should you be testing your software for

1005
00:47:06,200 --> 00:47:12,319
security on a regular continuous basis

1006
00:47:10,069 --> 00:47:14,150
and I'm not making this up this is

1007
00:47:12,319 --> 00:47:17,300
something the security industry has

1008
00:47:14,150 --> 00:47:20,359
taught me for a decade now and it's not

1009
00:47:17,300 --> 00:47:23,569
easy it takes great commitment it takes

1010
00:47:20,359 --> 00:47:26,119
a whole community of people to work

1011
00:47:23,569 --> 00:47:29,509
together to care about this it takes

1012
00:47:26,119 --> 00:47:32,450
years of hard work and that hard work

1013
00:47:29,510 --> 00:47:34,819
will be rewarded with more hard work

1014
00:47:32,450 --> 00:47:36,470
that's right thank you very much for

1015
00:47:34,819 --> 00:47:39,800
being here everybody before I finish

1016
00:47:36,470 --> 00:47:42,020
does anybody have any questions as we

1017
00:47:39,800 --> 00:47:44,210
finish this up most of the that we are

1018
00:47:42,020 --> 00:47:46,790
using now for user authentication Active

1019
00:47:44,210 --> 00:47:47,480
Directory as that okay so what do you

1020
00:47:46,790 --> 00:47:49,880
recommend

1021
00:47:47,480 --> 00:47:52,340
whether to use the same connectivity for

1022
00:47:49,880 --> 00:47:55,490
user authentication or it's better to

1023
00:47:52,340 --> 00:47:57,380
use the their own teleportal either are

1024
00:47:55,490 --> 00:47:59,060
we here authentications it's a complex

1025
00:47:57,380 --> 00:48:02,390
question to answer if you marks number

1026
00:47:59,060 --> 00:48:04,520
one LDAP does not scale well for a large

1027
00:48:02,390 --> 00:48:07,910
number of users LDAP is usually for an

1028
00:48:04,520 --> 00:48:09,770
enterprise Active Directory often has

1029
00:48:07,910 --> 00:48:11,540
that same limitation as well

1030
00:48:09,770 --> 00:48:15,320
where Active Directory is good for an

1031
00:48:11,540 --> 00:48:17,660
organization maybe it rarely scales for

1032
00:48:15,320 --> 00:48:20,180
millions of users so it depends on how

1033
00:48:17,660 --> 00:48:23,920
many users are trying to support the

1034
00:48:20,180 --> 00:48:26,089
trend in the u.s. is stop building

1035
00:48:23,920 --> 00:48:28,460
authentication that's the real trend

1036
00:48:26,090 --> 00:48:32,090
because if you look at these different

1037
00:48:28,460 --> 00:48:34,390
standards the expertise that you need to

1038
00:48:32,090 --> 00:48:37,070
build your own authentication is

1039
00:48:34,390 --> 00:48:39,650
dramatic it's hundreds of requirements

1040
00:48:37,070 --> 00:48:41,690
so a lot of what I see my customers in

1041
00:48:39,650 --> 00:48:45,920
the u.s. doing they're using services

1042
00:48:41,690 --> 00:48:49,310
like being identity octa or zero these

1043
00:48:45,920 --> 00:48:50,990
formal identity providers but their

1044
00:48:49,310 --> 00:48:53,720
marks they're like mafia though they're

1045
00:48:50,990 --> 00:48:55,970
so expensive and once you once you start

1046
00:48:53,720 --> 00:48:58,339
using them it's hard to roll away from

1047
00:48:55,970 --> 00:49:00,980
them and you're paying big money so if

1048
00:48:58,340 --> 00:49:03,500
you are gonna build it yourself you want

1049
00:49:00,980 --> 00:49:06,050
to have testing in place early on and

1050
00:49:03,500 --> 00:49:07,720
you don't want any average developer to

1051
00:49:06,050 --> 00:49:11,540
work on this you want to have very

1052
00:49:07,720 --> 00:49:12,859
senior architect level security expert

1053
00:49:11,540 --> 00:49:14,990
developers working on your

1054
00:49:12,859 --> 00:49:17,420
authentication layer so this is not an

1055
00:49:14,990 --> 00:49:19,970
easy there's no easy answer here you can

1056
00:49:17,420 --> 00:49:22,100
build it yourself and you'll get you'll

1057
00:49:19,970 --> 00:49:24,319
be able to achieve better scale and

1058
00:49:22,100 --> 00:49:26,960
Active Directory or LDAP but you're

1059
00:49:24,320 --> 00:49:29,150
gonna need great expertise to do it you

1060
00:49:26,960 --> 00:49:30,500
can use Active Directory and LDAP will

1061
00:49:29,150 --> 00:49:32,300
take you a lot of work to build

1062
00:49:30,500 --> 00:49:34,790
infrastructure around it and achieve

1063
00:49:32,300 --> 00:49:38,330
scalability and you can buy octave or

1064
00:49:34,790 --> 00:49:41,090
pin identity or off zero you can use

1065
00:49:38,330 --> 00:49:43,730
those services but you're gonna pay big

1066
00:49:41,090 --> 00:49:45,859
money and it requires a lot of expertise

1067
00:49:43,730 --> 00:49:48,320
to configure them those are some of the

1068
00:49:45,859 --> 00:49:50,930
trade-offs in the world today is it is

1069
00:49:48,320 --> 00:49:52,840
important because it's the key for

1070
00:49:50,930 --> 00:49:54,850
identity what works you can

1071
00:49:52,840 --> 00:49:57,880
I see Samba which one of my businesses

1072
00:49:54,850 --> 00:50:00,520
does we we started a small business of

1073
00:49:57,880 --> 00:50:02,770
Ventus memory whatever and we just went

1074
00:50:00,520 --> 00:50:05,350
for day one we did not even build a

1075
00:50:02,770 --> 00:50:08,320
logging system we just used a Google

1076
00:50:05,350 --> 00:50:10,870
login facebook login and Twitter login

1077
00:50:08,320 --> 00:50:12,970
as our first robot because then we

1078
00:50:10,870 --> 00:50:16,290
people could use multi factor those

1079
00:50:12,970 --> 00:50:19,359
providers have relatively decent

1080
00:50:16,290 --> 00:50:23,170
identity protection Facebook not so much

1081
00:50:19,360 --> 00:50:25,000
weight it had some mistakes recently so

1082
00:50:23,170 --> 00:50:26,980
that's another choice if your startup

1083
00:50:25,000 --> 00:50:30,730
and you're just beginning to build

1084
00:50:26,980 --> 00:50:32,920
software use Open ID Connect use one of

1085
00:50:30,730 --> 00:50:35,440
the other providers that gets you

1086
00:50:32,920 --> 00:50:38,440
started and ASRA company grows even more

1087
00:50:35,440 --> 00:50:41,320
you can make another decision about how

1088
00:50:38,440 --> 00:50:43,930
to use a more heavy waste logging system

1089
00:50:41,320 --> 00:50:47,020
there's a complex answer to a complex

1090
00:50:43,930 --> 00:50:57,190
question and other questions I guess

1091
00:50:47,020 --> 00:50:58,570
because most most third party did

1092
00:50:57,190 --> 00:51:02,160
they'll say well we know security will

1093
00:50:58,570 --> 00:51:04,300
be fine right I'm kidding here so

1094
00:51:02,160 --> 00:51:07,450
usually you want to have a contract

1095
00:51:04,300 --> 00:51:10,300
process what I like to do is I set

1096
00:51:07,450 --> 00:51:13,000
security requirements before I even get

1097
00:51:10,300 --> 00:51:15,100
a third party group involved and I say

1098
00:51:13,000 --> 00:51:18,820
here's your 200 requirements for

1099
00:51:15,100 --> 00:51:21,700
software development and that's in my

1100
00:51:18,820 --> 00:51:23,710
contract around how they have to build

1101
00:51:21,700 --> 00:51:25,870
software and if they're smart they'll

1102
00:51:23,710 --> 00:51:28,060
debate those requirements with me before

1103
00:51:25,870 --> 00:51:29,529
they sign the dotted line if by the way

1104
00:51:28,060 --> 00:51:31,000
I've done this I read my main

1105
00:51:29,530 --> 00:51:32,620
requirements I'm using fifty

1106
00:51:31,000 --> 00:51:34,210
requirements for software development

1107
00:51:32,620 --> 00:51:36,759
and I'm trying to hire a third party

1108
00:51:34,210 --> 00:51:38,230
group some of the groups are like no

1109
00:51:36,760 --> 00:51:40,690
problem this is part of our practice

1110
00:51:38,230 --> 00:51:43,000
already we'll sign that no problem other

1111
00:51:40,690 --> 00:51:44,710
third party groups are like all this no

1112
00:51:43,000 --> 00:51:45,550
no we can't do this this is too

1113
00:51:44,710 --> 00:51:48,250
complicated

1114
00:51:45,550 --> 00:51:51,070
well there's your answer right the best

1115
00:51:48,250 --> 00:51:53,950
I have you is this is got to be in your

1116
00:51:51,070 --> 00:51:55,869
contract process it once the contract is

1117
00:51:53,950 --> 00:51:57,759
out and they're ready software for you

1118
00:51:55,869 --> 00:51:59,319
too late and there's two kinds of

1119
00:51:57,759 --> 00:52:02,049
contracts I want contracts for

1120
00:51:59,319 --> 00:52:03,970
third-party developers that are part of

1121
00:52:02,049 --> 00:52:06,130
my development team or the way that our

1122
00:52:03,970 --> 00:52:08,410
building software for me is an outsource

1123
00:52:06,130 --> 00:52:10,420
group and I want contracts for them

1124
00:52:08,410 --> 00:52:11,499
around requirements but if I'm buying

1125
00:52:10,420 --> 00:52:14,230
software

1126
00:52:11,499 --> 00:52:16,569
I want requirements for service level

1127
00:52:14,230 --> 00:52:18,940
agreements on how fast they need to fix

1128
00:52:16,569 --> 00:52:21,308
security bugs because I never want to

1129
00:52:18,940 --> 00:52:23,799
things are not buying software I want

1130
00:52:21,309 --> 00:52:26,230
the right to audit your software to look

1131
00:52:23,799 --> 00:52:28,660
for security bugs and I wanted to greem

1132
00:52:26,230 --> 00:52:30,940
it from you when I find security bugs of

1133
00:52:28,660 --> 00:52:33,999
your code I want an agreement in the

1134
00:52:30,940 --> 00:52:35,710
contract around how long it takes you to

1135
00:52:33,999 --> 00:52:38,379
give me a version with those bugs fixed

1136
00:52:35,710 --> 00:52:40,809
and if and once you bought the software

1137
00:52:38,380 --> 00:52:43,690
or hire developers without putting your

1138
00:52:40,809 --> 00:52:47,769
contract is too late that's the best I

1139
00:52:43,690 --> 00:52:49,450
got for you any more questions it's been

1140
00:52:47,769 --> 00:52:51,008
a great honor to be here I love being

1141
00:52:49,450 --> 00:52:52,930
here in Nepal thank you all for being

1142
00:52:51,009 --> 00:52:57,499
here as well

1143
00:52:52,930 --> 00:52:57,499
[Applause]

