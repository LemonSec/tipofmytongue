1
00:00:03,330 --> 00:00:07,259
thank you all for being here at

2
00:00:05,069 --> 00:00:08,910
ThreatCon my name is jim manikan and i

3
00:00:07,259 --> 00:00:11,970
want to talk to you about a really

4
00:00:08,910 --> 00:00:15,269
important aspect of application security

5
00:00:11,970 --> 00:00:19,170
this is about process this is about the

6
00:00:15,269 --> 00:00:21,300
software development lifecycle all right

7
00:00:19,170 --> 00:00:22,919
that's right back to your seat so we got

8
00:00:21,300 --> 00:00:27,150
to talk on let's get let's get back to

9
00:00:22,919 --> 00:00:29,579
your seats all right my name is jim

10
00:00:27,150 --> 00:00:30,898
amico I'll be your presenter today I'm

11
00:00:29,579 --> 00:00:33,690
really happy to be here this is my

12
00:00:30,899 --> 00:00:35,519
second ThreatCon so again really happy

13
00:00:33,690 --> 00:00:37,949
to be here in DePaul we're gonna talk

14
00:00:35,519 --> 00:00:40,199
about the building blocks of the

15
00:00:37,949 --> 00:00:44,370
software development lifecycle that's

16
00:00:40,199 --> 00:00:46,320
what SDLC means SDLC means process how

17
00:00:44,370 --> 00:00:49,739
are we as a group of people gonna

18
00:00:46,320 --> 00:00:52,140
organize to build secure software we'll

19
00:00:49,739 --> 00:00:55,010
take a look at security requirements and

20
00:00:52,140 --> 00:00:58,410
the whole idea of we need to plan for

21
00:00:55,010 --> 00:01:00,420
security security doesn't just happen it

22
00:00:58,410 --> 00:01:03,390
never just happens when you're building

23
00:01:00,420 --> 00:01:05,880
software you have to intentionally

24
00:01:03,390 --> 00:01:08,790
decide that you want to build secure

25
00:01:05,880 --> 00:01:11,039
software and have a process around that

26
00:01:08,790 --> 00:01:12,810
idea to have any chance of writing

27
00:01:11,040 --> 00:01:14,550
secure software will look at threat

28
00:01:12,810 --> 00:01:15,900
modeling as one of the activities and

29
00:01:14,550 --> 00:01:18,179
different kinds of secure coding

30
00:01:15,900 --> 00:01:20,100
techniques as well as some monitoring

31
00:01:18,180 --> 00:01:21,750
after the fact so let's go to the

32
00:01:20,100 --> 00:01:23,970
beginning let's look at the building

33
00:01:21,750 --> 00:01:26,580
blocks of what a secure lifecycle looks

34
00:01:23,970 --> 00:01:29,940
like matter what kind of software

35
00:01:26,580 --> 00:01:31,860
process you have your there's gonna be

36
00:01:29,940 --> 00:01:34,320
some kind of early analysis phase

37
00:01:31,860 --> 00:01:36,030
business analysis there'll be some kind

38
00:01:34,320 --> 00:01:39,270
of design phase where you're doing

39
00:01:36,030 --> 00:01:41,190
technical design prepping your plan some

40
00:01:39,270 --> 00:01:43,530
kind of implementation phase where

41
00:01:41,190 --> 00:01:46,020
you're coding and building software some

42
00:01:43,530 --> 00:01:48,720
kind of testing phase and some kind of

43
00:01:46,020 --> 00:01:50,160
operational monitoring phase it doesn't

44
00:01:48,720 --> 00:01:52,260
matter how you're building software

45
00:01:50,160 --> 00:01:55,410
you're gonna run across these five

46
00:01:52,260 --> 00:01:58,710
phases and each one of these phases of

47
00:01:55,410 --> 00:02:01,740
building software requires security in

48
00:01:58,710 --> 00:02:04,800
some way and let's define this so this

49
00:02:01,740 --> 00:02:07,259
is an old joke about project management

50
00:02:04,800 --> 00:02:09,239
and software security this picture here

51
00:02:07,260 --> 00:02:11,400
is how the customer described the

52
00:02:09,239 --> 00:02:13,800
problem this is how the project leader

53
00:02:11,400 --> 00:02:15,840
understood it this is how the analyst

54
00:02:13,800 --> 00:02:16,710
designed it this is how the programmer

55
00:02:15,840 --> 00:02:18,570
wrote it the

56
00:02:16,710 --> 00:02:20,760
now the business consultant described it

57
00:02:18,570 --> 00:02:23,070
this is how the project was documented a

58
00:02:20,760 --> 00:02:25,739
little bit too true in the world of

59
00:02:23,070 --> 00:02:27,150
agile this is what operations installed

60
00:02:25,740 --> 00:02:29,850
and this is how the customer was built

61
00:02:27,150 --> 00:02:31,350
the whole point is is that it is how it

62
00:02:29,850 --> 00:02:34,290
was supported and this is what the

63
00:02:31,350 --> 00:02:37,109
customer actually needed the whole point

64
00:02:34,290 --> 00:02:40,019
is is that poor communication always

65
00:02:37,110 --> 00:02:42,210
leads to epic failure and software

66
00:02:40,020 --> 00:02:44,790
development so what is a secure software

67
00:02:42,210 --> 00:02:47,070
developer I cycle it's communication

68
00:02:44,790 --> 00:02:49,650
between all of the players involved in

69
00:02:47,070 --> 00:02:52,200
writing that software your testing team

70
00:02:49,650 --> 00:02:54,960
your automation team your developers

71
00:02:52,200 --> 00:02:57,810
your management all need to be on the

72
00:02:54,960 --> 00:03:01,080
same page defining what secure software

73
00:02:57,810 --> 00:03:03,510
is to have any chance of building secure

74
00:03:01,080 --> 00:03:05,670
software and here in Nepal there's some

75
00:03:03,510 --> 00:03:07,560
amazing developers who write software

76
00:03:05,670 --> 00:03:10,380
for your banking system for

77
00:03:07,560 --> 00:03:12,390
infrastructure for power there is a lot

78
00:03:10,380 --> 00:03:15,720
of software being built here in Nepal

79
00:03:12,390 --> 00:03:20,100
and it requires precision and discipline

80
00:03:15,720 --> 00:03:23,060
to achieve security so a good step

81
00:03:20,100 --> 00:03:24,810
number one is to publish a document

82
00:03:23,060 --> 00:03:27,390
describing your software development

83
00:03:24,810 --> 00:03:30,300
lifecycle and this seems petty to a lot

84
00:03:27,390 --> 00:03:32,730
of people but this is like my indicator

85
00:03:30,300 --> 00:03:36,000
when analyzing a team this is my

86
00:03:32,730 --> 00:03:38,549
indicator if this group cares about

87
00:03:36,000 --> 00:03:40,530
building secure software if I see some

88
00:03:38,550 --> 00:03:43,140
kind of document whether it's up-to-date

89
00:03:40,530 --> 00:03:44,610
or not it's usually a sign that they're

90
00:03:43,140 --> 00:03:47,399
moving in the right direction in terms

91
00:03:44,610 --> 00:03:49,560
of process to write secure software so

92
00:03:47,400 --> 00:03:53,550
but but let's let's be realistic though

93
00:03:49,560 --> 00:03:55,860
this is a list of ideas from the

94
00:03:53,550 --> 00:03:58,110
automotive Linux group this is a group

95
00:03:55,860 --> 00:03:59,850
that builds software specifically for

96
00:03:58,110 --> 00:04:02,430
automobiles and one of the

97
00:03:59,850 --> 00:04:04,739
characteristics of this world is unlike

98
00:04:02,430 --> 00:04:07,140
Tesla in most of the world of

99
00:04:04,740 --> 00:04:09,930
automotives when you push software to

100
00:04:07,140 --> 00:04:12,480
that car it is painfully difficult to

101
00:04:09,930 --> 00:04:15,750
update that software to this day

102
00:04:12,480 --> 00:04:19,349
picture time excuse me okay to this to

103
00:04:15,750 --> 00:04:21,690
this day to this day you usually have to

104
00:04:19,350 --> 00:04:24,420
bring a car to a dealer to get software

105
00:04:21,690 --> 00:04:26,640
updated so and and you're talking about

106
00:04:24,420 --> 00:04:28,020
people's lives you're talking about the

107
00:04:26,640 --> 00:04:29,710
safety of people when you talk about

108
00:04:28,020 --> 00:04:31,599
automotive software

109
00:04:29,710 --> 00:04:34,780
so they really need to get secure

110
00:04:31,600 --> 00:04:36,400
software right the first time as best as

111
00:04:34,780 --> 00:04:38,770
possible and here are some of the

112
00:04:36,400 --> 00:04:41,020
principles from this very precise group

113
00:04:38,770 --> 00:04:43,719
in terms of writing software security is

114
00:04:41,020 --> 00:04:46,479
invasive it cannot be applied as if at

115
00:04:43,720 --> 00:04:49,509
the end of the project and you must be

116
00:04:46,479 --> 00:04:51,789
developing with security turned on so if

117
00:04:49,509 --> 00:04:53,979
you're using a dev server or some kind

118
00:04:51,789 --> 00:04:57,759
of local build environment you want all

119
00:04:53,979 --> 00:05:00,219
of your security turned on HTTPS your

120
00:04:57,759 --> 00:05:03,310
authentication system all the different

121
00:05:00,220 --> 00:05:06,130
pieces of security we want that turned

122
00:05:03,310 --> 00:05:08,020
on in our development process as early

123
00:05:06,130 --> 00:05:10,449
as possible back when I was writing

124
00:05:08,020 --> 00:05:14,258
software we would do things like have a

125
00:05:10,449 --> 00:05:17,289
dev server where we didn't have HTTP

126
00:05:14,259 --> 00:05:18,940
turned on and we would just code to http

127
00:05:17,289 --> 00:05:20,860
and get it working and when we would

128
00:05:18,940 --> 00:05:23,320
push this stuff live things would break

129
00:05:20,860 --> 00:05:25,180
because we weren't developing what

130
00:05:23,320 --> 00:05:27,880
security turned on this is a really

131
00:05:25,180 --> 00:05:30,160
important concept also don't

132
00:05:27,880 --> 00:05:32,889
underestimate the resistance of your

133
00:05:30,160 --> 00:05:35,919
developer team a developer team by

134
00:05:32,889 --> 00:05:38,500
itself will almost never write secure

135
00:05:35,919 --> 00:05:40,870
software we need to put roadblocks and

136
00:05:38,500 --> 00:05:44,409
checks and all kinds of automation in

137
00:05:40,870 --> 00:05:47,680
place to achieve security the developers

138
00:05:44,409 --> 00:05:50,590
for 50 years have been trained to get

139
00:05:47,680 --> 00:05:53,260
the job done they get they get awarded

140
00:05:50,590 --> 00:05:56,229
for completing functionality for pushing

141
00:05:53,260 --> 00:05:58,469
code live Mario how often did developers

142
00:05:56,229 --> 00:06:02,258
get awarded for writing secure software

143
00:05:58,470 --> 00:06:05,050
never and who gets all the glory in the

144
00:06:02,259 --> 00:06:07,419
industry of security the hackers the bug

145
00:06:05,050 --> 00:06:10,680
finders and like Mario was saying in his

146
00:06:07,419 --> 00:06:12,870
keynote we need to change that model so

147
00:06:10,680 --> 00:06:14,800
developers who are fixing bugs

148
00:06:12,870 --> 00:06:16,960
developers who are writing secure

149
00:06:14,800 --> 00:06:19,599
software developers who care about

150
00:06:16,960 --> 00:06:20,409
strict process and security they should

151
00:06:19,599 --> 00:06:21,909
be rewarded

152
00:06:20,409 --> 00:06:23,620
now pen testers I know you're a pen

153
00:06:21,909 --> 00:06:26,110
tester Mario pen testers are important

154
00:06:23,620 --> 00:06:29,259
we need to find bugs but we need to

155
00:06:26,110 --> 00:06:30,789
glorify the fixers way more than we do

156
00:06:29,259 --> 00:06:32,560
now that was a point you were making in

157
00:06:30,789 --> 00:06:35,770
your keynote and I agree and another

158
00:06:32,560 --> 00:06:38,930
important point is if your team writing

159
00:06:35,770 --> 00:06:42,380
software does not have an

160
00:06:38,930 --> 00:06:45,259
applications security expert embedded

161
00:06:42,380 --> 00:06:47,900
with the team from day one your chance

162
00:06:45,259 --> 00:06:51,250
of doing secure software is near zero

163
00:06:47,900 --> 00:06:54,258
and this is a difficult problem because

164
00:06:51,250 --> 00:06:56,449
even to this day to get authentication

165
00:06:54,259 --> 00:06:58,490
right to get user interface security

166
00:06:56,449 --> 00:07:02,240
right to get access control right and

167
00:06:58,490 --> 00:07:04,970
all the other esoteric bugs that show up

168
00:07:02,240 --> 00:07:08,600
in secure software it is an expertise

169
00:07:04,970 --> 00:07:12,080
that is that is a unique that is that is

170
00:07:08,600 --> 00:07:14,900
difficult to achieve and necessary to

171
00:07:12,080 --> 00:07:17,090
build secure software and that expert

172
00:07:14,900 --> 00:07:18,080
may be a member of your team and may be

173
00:07:17,090 --> 00:07:20,419
a consultant

174
00:07:18,080 --> 00:07:22,580
it may be an online service that you're

175
00:07:20,419 --> 00:07:25,280
using to get to get advice from another

176
00:07:22,580 --> 00:07:27,979
from another consultant but embracing

177
00:07:25,280 --> 00:07:31,250
the need to have an expert on your team

178
00:07:27,979 --> 00:07:34,940
is critical and fundamental to writing

179
00:07:31,250 --> 00:07:37,639
secure software a team of developers who

180
00:07:34,940 --> 00:07:41,210
write software without that expertise

181
00:07:37,639 --> 00:07:44,120
will always build insecure software in

182
00:07:41,210 --> 00:07:46,849
my experience and so what we're looking

183
00:07:44,120 --> 00:07:48,979
at is to again to embed software to

184
00:07:46,849 --> 00:07:51,139
embed security in the requirement phase

185
00:07:48,979 --> 00:07:53,389
in there in the technical building phase

186
00:07:51,139 --> 00:07:55,669
while you're coding while you're testing

187
00:07:53,389 --> 00:07:58,430
and during deployment operations every

188
00:07:55,669 --> 00:08:01,990
phase needs to account for security in

189
00:07:58,430 --> 00:08:04,880
some way this is my vision of what your

190
00:08:01,990 --> 00:08:07,669
sdlc should be and and this is not

191
00:08:04,880 --> 00:08:11,659
really standard the the point I want to

192
00:08:07,669 --> 00:08:14,299
address is before developer start coding

193
00:08:11,659 --> 00:08:16,580
what should be in place this is the

194
00:08:14,300 --> 00:08:19,550
question I'm trying to address most

195
00:08:16,580 --> 00:08:22,340
teams I work with they have an idea and

196
00:08:19,550 --> 00:08:24,680
just start writing code and decide to

197
00:08:22,340 --> 00:08:26,960
add security on later in some way and

198
00:08:24,680 --> 00:08:29,720
this is a big fail so I think that

199
00:08:26,960 --> 00:08:32,750
writing writing software it's expensive

200
00:08:29,720 --> 00:08:35,209
it's time-consuming requires a lot of

201
00:08:32,750 --> 00:08:37,219
precision to get right and what this

202
00:08:35,208 --> 00:08:39,619
tells us is that we need to have

203
00:08:37,219 --> 00:08:42,380
developers prepared to write secure

204
00:08:39,620 --> 00:08:45,110
software before they start so look at

205
00:08:42,380 --> 00:08:48,020
this look at this the code and test prep

206
00:08:45,110 --> 00:08:51,170
phase you should have a automation

207
00:08:48,020 --> 00:08:51,980
system in place that checks for security

208
00:08:51,170 --> 00:08:54,620
as your code

209
00:08:51,980 --> 00:08:57,170
you should be using specific frameworks

210
00:08:54,620 --> 00:08:59,870
and specific libraries that achieve

211
00:08:57,170 --> 00:09:02,329
security that that your team understands

212
00:08:59,870 --> 00:09:05,060
how to use and secure your developers

213
00:09:02,329 --> 00:09:07,579
and your QA team should all be trained

214
00:09:05,060 --> 00:09:10,040
in security in some way and we should be

215
00:09:07,579 --> 00:09:12,800
ready with the test plan around how

216
00:09:10,040 --> 00:09:15,019
we're gonna test for security along the

217
00:09:12,800 --> 00:09:17,660
avenue of writing software and almost

218
00:09:15,019 --> 00:09:19,550
nobody does this very more more so these

219
00:09:17,660 --> 00:09:21,740
days but very often teams to start

220
00:09:19,550 --> 00:09:25,819
writing code they'll deal with security

221
00:09:21,740 --> 00:09:28,760
later and this is always a failure and a

222
00:09:25,820 --> 00:09:32,180
very expensive failure in my experience

223
00:09:28,760 --> 00:09:35,990
more pictures excuse me thank you all

224
00:09:32,180 --> 00:09:38,870
right so so what is DevOps one of the

225
00:09:35,990 --> 00:09:40,639
main changes that we see to software

226
00:09:38,870 --> 00:09:43,399
development in the last two or three

227
00:09:40,639 --> 00:09:45,889
years is the moving towards DevOps and

228
00:09:43,399 --> 00:09:47,930
what is DevOps now a lot of people have

229
00:09:45,889 --> 00:09:50,149
different definitions here's my real

230
00:09:47,930 --> 00:09:52,760
definition of it it's automation it's

231
00:09:50,149 --> 00:09:55,339
it's really about making sure that every

232
00:09:52,760 --> 00:09:58,250
phase of the lifecycle has some kind of

233
00:09:55,339 --> 00:10:00,470
repeatable testing in place to enable

234
00:09:58,250 --> 00:10:03,350
developers to work fast but still

235
00:10:00,470 --> 00:10:05,180
achieve a rich suite of automation in

236
00:10:03,350 --> 00:10:06,889
terms of security testing that we'll

237
00:10:05,180 --> 00:10:09,500
look at later in this presentation and

238
00:10:06,889 --> 00:10:12,110
this is not a standard definition we can

239
00:10:09,500 --> 00:10:14,540
go read gene Kim's book on DevOps and

240
00:10:12,110 --> 00:10:16,970
the whole movement around this but I

241
00:10:14,540 --> 00:10:21,079
think it all comes down to when you're

242
00:10:16,970 --> 00:10:23,000
writing code every time you build every

243
00:10:21,079 --> 00:10:26,989
time you check code into your code

244
00:10:23,000 --> 00:10:30,139
repository a large suite of tests should

245
00:10:26,990 --> 00:10:33,440
be run every single time and as you

246
00:10:30,139 --> 00:10:36,139
mature this capability the benefits are

247
00:10:33,440 --> 00:10:38,630
dramatic when I look at teams who do

248
00:10:36,139 --> 00:10:41,480
automated security testing versus the

249
00:10:38,630 --> 00:10:45,230
teams that do not those that do move

250
00:10:41,480 --> 00:10:47,089
faster and a much more secure way that

251
00:10:45,230 --> 00:10:49,970
doesn't stop the need for pen testers

252
00:10:47,089 --> 00:10:53,000
but if we have good automated testing

253
00:10:49,970 --> 00:10:55,100
then we can direct our pen testers to

254
00:10:53,000 --> 00:10:57,440
look at the difficult things why would

255
00:10:55,100 --> 00:11:01,010
you want to waste a skilled pen testers

256
00:10:57,440 --> 00:11:04,150
time at looking for petty bs like XSS

257
00:11:01,010 --> 00:11:06,160
that's a waste of your talent no tester

258
00:11:04,150 --> 00:11:08,829
look for that garbage anymore we should

259
00:11:06,160 --> 00:11:10,540
use automation to do it move on and look

260
00:11:08,830 --> 00:11:12,520
at the difficult things like our crypto

261
00:11:10,540 --> 00:11:15,130
lairs our authentication lairs our

262
00:11:12,520 --> 00:11:17,199
password stores all the our integration

263
00:11:15,130 --> 00:11:19,570
with identity providers that's the stuff

264
00:11:17,200 --> 00:11:21,580
we need to look at look at how about new

265
00:11:19,570 --> 00:11:23,860
standard it's like Oh auth and open ID

266
00:11:21,580 --> 00:11:26,770
connect these are insanely complicated

267
00:11:23,860 --> 00:11:29,590
take a lot it takes a lot of time to

268
00:11:26,770 --> 00:11:32,640
analyze them carefully that's what our

269
00:11:29,590 --> 00:11:34,780
penetration tester should be looking for

270
00:11:32,640 --> 00:11:37,090
that's too easy that's shooting fish in

271
00:11:34,780 --> 00:11:39,280
a barrel these days justice my take on

272
00:11:37,090 --> 00:11:41,770
this let's move on here now what DevOps

273
00:11:39,280 --> 00:11:44,709
is about it's about automating the

274
00:11:41,770 --> 00:11:47,079
building of software the automating the

275
00:11:44,710 --> 00:11:48,430
testing of software the to point the

276
00:11:47,080 --> 00:11:50,950
deployment and the monitoring of

277
00:11:48,430 --> 00:11:53,920
software and this is not something you

278
00:11:50,950 --> 00:11:57,400
can buy you can't just buy a DevOps and

279
00:11:53,920 --> 00:11:59,680
start using it you usually want to build

280
00:11:57,400 --> 00:12:02,290
this yourself through open-source the

281
00:11:59,680 --> 00:12:04,540
most common DevOps infrastructure

282
00:12:02,290 --> 00:12:06,730
software is a product called Jenkins

283
00:12:04,540 --> 00:12:09,160
which is open source and now how you

284
00:12:06,730 --> 00:12:11,620
build and how you compile all these

285
00:12:09,160 --> 00:12:14,560
steps of the construction deployment of

286
00:12:11,620 --> 00:12:16,930
software becomes automated and you don't

287
00:12:14,560 --> 00:12:19,839
get this for free you have to code and

288
00:12:16,930 --> 00:12:23,620
build it you have to tune and build this

289
00:12:19,840 --> 00:12:25,420
yourself specific to each team but then

290
00:12:23,620 --> 00:12:28,570
let's talk more about what that means

291
00:12:25,420 --> 00:12:30,160
and so when we look at continuous

292
00:12:28,570 --> 00:12:32,650
delivery and continuous integration

293
00:12:30,160 --> 00:12:35,140
these are the most important parts of

294
00:12:32,650 --> 00:12:37,449
DevOps a lot of people challenge this

295
00:12:35,140 --> 00:12:39,460
definition but I ask you if you're doing

296
00:12:37,450 --> 00:12:40,900
DevOps that automation then what are you

297
00:12:39,460 --> 00:12:44,290
doing you know you're not really doing

298
00:12:40,900 --> 00:12:47,939
DevOps in my opinion so continuous

299
00:12:44,290 --> 00:12:50,650
delivery gives you deployment automation

300
00:12:47,940 --> 00:12:53,110
trunk based development test automation

301
00:12:50,650 --> 00:12:55,630
and we're gonna then the whole benefit

302
00:12:53,110 --> 00:12:58,650
of DevOps --is we begin to address

303
00:12:55,630 --> 00:13:01,660
security earlier in the lifecycle the

304
00:12:58,650 --> 00:13:04,540
moment your first developer writes the

305
00:13:01,660 --> 00:13:07,089
first line of code that line of code

306
00:13:04,540 --> 00:13:09,459
should go through hundreds of security

307
00:13:07,090 --> 00:13:12,100
tests so and that should happen every

308
00:13:09,460 --> 00:13:14,680
time you're writing and checking in code

309
00:13:12,100 --> 00:13:16,990
so it's a natural part of how you write

310
00:13:14,680 --> 00:13:20,020
software this is why we

311
00:13:16,990 --> 00:13:22,480
prepare our teams before we start

312
00:13:20,020 --> 00:13:25,079
writing software we want to have Jenkins

313
00:13:22,480 --> 00:13:28,779
and all these security testing tools

314
00:13:25,080 --> 00:13:30,820
configured and in place on day one all

315
00:13:28,779 --> 00:13:33,570
the way through the project and again

316
00:13:30,820 --> 00:13:36,100
it's rare where teams want to do this

317
00:13:33,570 --> 00:13:39,550
and so but we'll come back to these

318
00:13:36,100 --> 00:13:42,730
principles of how to wire in testing

319
00:13:39,550 --> 00:13:45,279
tools in just a few moments let's take a

320
00:13:42,730 --> 00:13:48,220
step back one of the things that I like

321
00:13:45,279 --> 00:13:50,770
to ask is what does secure software mean

322
00:13:48,220 --> 00:13:52,149
to you anybody in the room can you

323
00:13:50,770 --> 00:13:55,329
define for me

324
00:13:52,149 --> 00:14:01,360
what secure software is what do you

325
00:13:55,330 --> 00:14:04,029
think Mario I'm gonna play it is but but

326
00:14:01,360 --> 00:14:06,570
how do we approach secure software as a

327
00:14:04,029 --> 00:14:08,470
team without a clear common

328
00:14:06,570 --> 00:14:11,070
understanding of what we're approaching

329
00:14:08,470 --> 00:14:13,540
my answer to this question is

330
00:14:11,070 --> 00:14:19,120
establishing clear security requirements

331
00:14:13,540 --> 00:14:21,939
I believe that we can reduce security to

332
00:14:19,120 --> 00:14:24,640
a list of technical requirements that we

333
00:14:21,940 --> 00:14:27,220
inform to the developers who likes to do

334
00:14:24,640 --> 00:14:29,890
requirements and and like project

335
00:14:27,220 --> 00:14:31,870
documentation in the current era that

336
00:14:29,890 --> 00:14:35,500
would be nobody but when it comes to

337
00:14:31,870 --> 00:14:37,930
security our entire world of development

338
00:14:35,500 --> 00:14:42,040
the entire world of software developers

339
00:14:37,930 --> 00:14:43,719
we are all new at this so my belief is

340
00:14:42,040 --> 00:14:45,520
when you are all beginning to build

341
00:14:43,720 --> 00:14:48,100
software you're building banking

342
00:14:45,520 --> 00:14:51,819
software infrastructure software power

343
00:14:48,100 --> 00:14:54,579
generation power grid software that we

344
00:14:51,820 --> 00:14:55,270
should understand what security should

345
00:14:54,579 --> 00:14:57,729
look like

346
00:14:55,270 --> 00:14:59,560
before we begin those projects one of

347
00:14:57,730 --> 00:15:01,810
the standards that I work on to achieve

348
00:14:59,560 --> 00:15:04,510
that that helps build this requirement

349
00:15:01,810 --> 00:15:06,670
list is from the Olas foundation this is

350
00:15:04,510 --> 00:15:09,970
the open web application security

351
00:15:06,670 --> 00:15:13,660
project it's the application security

352
00:15:09,970 --> 00:15:17,770
verification standard version 4.0 this

353
00:15:13,660 --> 00:15:21,279
is approximately 280 requirements in

354
00:15:17,770 --> 00:15:23,980
three different levels of severity to

355
00:15:21,279 --> 00:15:26,140
help inform the developer of what secure

356
00:15:23,980 --> 00:15:28,180
software is so that question I just

357
00:15:26,140 --> 00:15:28,850
asked you what is secure software my

358
00:15:28,180 --> 00:15:31,910
answer

359
00:15:28,850 --> 00:15:36,109
listen for web and api's it's

360
00:15:31,910 --> 00:15:38,600
approximately 280 specific technical

361
00:15:36,109 --> 00:15:40,910
requirements that you need to address in

362
00:15:38,600 --> 00:15:43,279
some way during software development now

363
00:15:40,910 --> 00:15:45,649
and again very few people like to do

364
00:15:43,279 --> 00:15:47,869
this but it's important that all of us

365
00:15:45,649 --> 00:15:50,720
writing software together are on the

366
00:15:47,869 --> 00:15:52,549
same page around what what what secure

367
00:15:50,720 --> 00:15:54,979
software really means here's a little

368
00:15:52,549 --> 00:15:58,369
excerpt from the standard here we are

369
00:15:54,979 --> 00:16:00,709
defining that verify the definition and

370
00:15:58,369 --> 00:16:03,139
security analysis of an applications

371
00:16:00,709 --> 00:16:05,569
high-level architecture and connected

372
00:16:03,139 --> 00:16:09,619
remote services this is level 2 not

373
00:16:05,569 --> 00:16:11,478
every this is like any software that has

374
00:16:09,619 --> 00:16:14,419
sensitive data should account for this

375
00:16:11,479 --> 00:16:16,819
requirement or down here verify the use

376
00:16:14,419 --> 00:16:19,029
of unique or special low privilege

377
00:16:16,819 --> 00:16:21,259
operating system accounts for all

378
00:16:19,029 --> 00:16:23,089
application components services and

379
00:16:21,259 --> 00:16:25,879
servers when you're running a web server

380
00:16:23,089 --> 00:16:28,399
the operating system account running

381
00:16:25,879 --> 00:16:30,679
that web server should have the least

382
00:16:28,399 --> 00:16:33,499
privilege in play should have as least

383
00:16:30,679 --> 00:16:35,869
access necessary to run that particular

384
00:16:33,499 --> 00:16:38,929
active web server and and I'm just

385
00:16:35,869 --> 00:16:41,359
mentioning a few here and this standard

386
00:16:38,929 --> 00:16:44,869
is not meant for you to follow perfectly

387
00:16:41,359 --> 00:16:47,779
the way you use a standard like ASVs is

388
00:16:44,869 --> 00:16:50,689
to take what we have and for get

389
00:16:47,779 --> 00:16:52,759
specific for your team start with level

390
00:16:50,689 --> 00:16:55,368
1 get that's about a hundred

391
00:16:52,759 --> 00:16:58,039
requirements get that done well in your

392
00:16:55,369 --> 00:17:00,589
team when you've achieved level 1 work

393
00:16:58,039 --> 00:17:02,479
your way up or maybe you don't like our

394
00:17:00,589 --> 00:17:05,089
levels maybe you want to fork the

395
00:17:02,479 --> 00:17:07,159
standard for your team and build and use

396
00:17:05,089 --> 00:17:10,668
those requirements to build your own

397
00:17:07,159 --> 00:17:13,250
standard I'm less concerned about you

398
00:17:10,669 --> 00:17:16,759
following this exact standard I'm more

399
00:17:13,250 --> 00:17:19,128
concerned that you have an idea of where

400
00:17:16,759 --> 00:17:21,139
you're going before you start writing

401
00:17:19,128 --> 00:17:23,240
code and having a list of security

402
00:17:21,138 --> 00:17:26,089
requirements I can't say enough how

403
00:17:23,240 --> 00:17:28,549
fundamental this is and helping educate

404
00:17:26,089 --> 00:17:33,529
and drive your software teams in the

405
00:17:28,549 --> 00:17:36,350
right direction and so let's jump ahead

406
00:17:33,529 --> 00:17:38,299
here a little bit the other big question

407
00:17:36,350 --> 00:17:41,379
is well I have a lot of existing

408
00:17:38,299 --> 00:17:44,490
software right now who works

409
00:17:41,380 --> 00:17:47,440
a company with a lot of legacy software

410
00:17:44,490 --> 00:17:50,950
anybody and how much of that legacy

411
00:17:47,440 --> 00:17:54,310
software has has good security probably

412
00:17:50,950 --> 00:17:57,520
big zero right so we have to approach

413
00:17:54,310 --> 00:17:59,470
this problem I think it's getting easier

414
00:17:57,520 --> 00:18:02,139
to write secure software but the bigger

415
00:17:59,470 --> 00:18:03,010
problem is all the legacy software we

416
00:18:02,140 --> 00:18:05,860
have out there today

417
00:18:03,010 --> 00:18:08,140
so I recommend two approaches and so

418
00:18:05,860 --> 00:18:09,219
when you're first looking at old

419
00:18:08,140 --> 00:18:11,560
software

420
00:18:09,220 --> 00:18:14,500
I recommend the concept of a security

421
00:18:11,560 --> 00:18:17,679
sprint this is the idea that we're gonna

422
00:18:14,500 --> 00:18:20,830
look at one problem one micro problem

423
00:18:17,680 --> 00:18:23,280
like XSS or sequel injection and have

424
00:18:20,830 --> 00:18:26,409
everybody on the team every single

425
00:18:23,280 --> 00:18:29,860
developer on that team spend a couple

426
00:18:26,410 --> 00:18:32,500
hours or a day or a couple days fixing

427
00:18:29,860 --> 00:18:35,139
just that one problem this should

428
00:18:32,500 --> 00:18:37,540
accomplish two goals goal number one you

429
00:18:35,140 --> 00:18:39,760
fixed out you fix those bugs and by the

430
00:18:37,540 --> 00:18:42,520
way if you're not committed to fixing

431
00:18:39,760 --> 00:18:44,920
bugs and software you're not doing

432
00:18:42,520 --> 00:18:50,280
security let me try this again if your

433
00:18:44,920 --> 00:18:50,280
teams are not committed passionately

434
00:19:36,100 --> 00:19:41,750
and you've also educated at your team on

435
00:19:40,070 --> 00:19:44,260
how to fix those bugs

436
00:19:41,750 --> 00:19:46,820
so this problem shouldn't show up again

437
00:19:44,260 --> 00:19:50,180
ideally and this is the power of a

438
00:19:46,820 --> 00:19:51,679
security sprint the other thing is once

439
00:19:50,180 --> 00:19:54,290
you've gone through your security

440
00:19:51,680 --> 00:19:55,760
sprints for dedicated issues we

441
00:19:54,290 --> 00:19:58,970
shouldn't have to go back to those

442
00:19:55,760 --> 00:20:02,000
sprints those issues should be fixed and

443
00:19:58,970 --> 00:20:04,430
dealt with every sprint from that point

444
00:20:02,000 --> 00:20:07,190
on I've done this with several different

445
00:20:04,430 --> 00:20:10,160
teams recently and we've taken large

446
00:20:07,190 --> 00:20:12,590
teams who had no idea what things like

447
00:20:10,160 --> 00:20:15,020
sequel injection were to having all

448
00:20:12,590 --> 00:20:16,669
sequel injection eliminated in their

449
00:20:15,020 --> 00:20:19,400
company within a matter of a couple

450
00:20:16,670 --> 00:20:21,800
weeks so this is a very powerful process

451
00:20:19,400 --> 00:20:24,320
to consider when dealing with older

452
00:20:21,800 --> 00:20:27,980
software all right where else are we

453
00:20:24,320 --> 00:20:32,929
going here let's so let's talk about the

454
00:20:27,980 --> 00:20:35,390
actual coding phase so once we have our

455
00:20:32,930 --> 00:20:38,030
automation in place and we're ready to

456
00:20:35,390 --> 00:20:40,490
start coding what does it take to really

457
00:20:38,030 --> 00:20:42,440
write secure software well again like I

458
00:20:40,490 --> 00:20:44,360
mentioned earlier we need secure coding

459
00:20:42,440 --> 00:20:46,940
libraries and different security

460
00:20:44,360 --> 00:20:49,610
services and frameworks like these days

461
00:20:46,940 --> 00:20:51,140
if you're building a user interface you

462
00:20:49,610 --> 00:20:53,240
probably shouldn't do it from scratch

463
00:20:51,140 --> 00:20:57,110
you should probably use something like

464
00:20:53,240 --> 00:20:59,690
react or angular or view where many of

465
00:20:57,110 --> 00:21:01,550
the problems of user interface security

466
00:20:59,690 --> 00:21:03,980
are addressed if we're going to build

467
00:21:01,550 --> 00:21:06,200
authentication we should not build this

468
00:21:03,980 --> 00:21:09,110
ourselves we should use a formal

469
00:21:06,200 --> 00:21:12,050
identity provider or identity provider

470
00:21:09,110 --> 00:21:15,199
service once we have all those pieces in

471
00:21:12,050 --> 00:21:17,230
place now we can educate our team how to

472
00:21:15,200 --> 00:21:19,850
use those components in a secure fashion

473
00:21:17,230 --> 00:21:22,340
we want to make sure our developers are

474
00:21:19,850 --> 00:21:24,679
aware of these security issues this is a

475
00:21:22,340 --> 00:21:27,409
little self-serving but your teams need

476
00:21:24,680 --> 00:21:30,080
to be educated on how to write secure

477
00:21:27,410 --> 00:21:32,360
code even just the basics will go a long

478
00:21:30,080 --> 00:21:35,570
way in helping your team construct

479
00:21:32,360 --> 00:21:38,060
secure software like I mentioned earlier

480
00:21:35,570 --> 00:21:40,490
we want to have secure coding standards

481
00:21:38,060 --> 00:21:42,590
and requirements so we're all moving in

482
00:21:40,490 --> 00:21:44,840
the same direction as to what secure

483
00:21:42,590 --> 00:21:47,439
software should look like and we want to

484
00:21:44,840 --> 00:21:48,770
have security audits and code reviews

485
00:21:47,440 --> 00:21:50,900
penetration tests

486
00:21:48,770 --> 00:21:54,290
sting and automated testing as much as

487
00:21:50,900 --> 00:21:57,680
we can when we have all these pieces in

488
00:21:54,290 --> 00:22:00,770
place we can move fast we can innovate

489
00:21:57,680 --> 00:22:03,410
fast we can build functionality fast and

490
00:22:00,770 --> 00:22:05,270
have an infrastructure of security

491
00:22:03,410 --> 00:22:07,190
around the software that we're

492
00:22:05,270 --> 00:22:10,160
developing but it takes a little

493
00:22:07,190 --> 00:22:12,050
planning some automation construction

494
00:22:10,160 --> 00:22:15,260
and a commitment to working on your

495
00:22:12,050 --> 00:22:18,379
security environment before you start

496
00:22:15,260 --> 00:22:20,030
writing code and so secure coding

497
00:22:18,380 --> 00:22:23,420
libraries are really I'm going to jump

498
00:22:20,030 --> 00:22:26,210
ahead here a little bit here let's take

499
00:22:23,420 --> 00:22:29,120
em and by the way every single study

500
00:22:26,210 --> 00:22:32,440
I've ever looked at they say that the

501
00:22:29,120 --> 00:22:35,209
cost to fix security bugs is is

502
00:22:32,440 --> 00:22:37,430
radically more expensive late in the

503
00:22:35,210 --> 00:22:39,200
lifecycle right so here's the cost of

504
00:22:37,430 --> 00:22:41,930
security but here's the cost of software

505
00:22:39,200 --> 00:22:43,700
bugs a real famous study from IBM from a

506
00:22:41,930 --> 00:22:46,640
couple years ago they're showing that

507
00:22:43,700 --> 00:22:50,420
it's about if you fix a bug early in the

508
00:22:46,640 --> 00:22:53,270
SDLC during the design or early phases

509
00:22:50,420 --> 00:22:55,820
the cost to fix a bug is like 25

510
00:22:53,270 --> 00:22:58,639
American dollars right yet if you're

511
00:22:55,820 --> 00:23:01,340
trying to fix a bug in production late

512
00:22:58,640 --> 00:23:04,640
in the lifecycle that becomes a fifteen

513
00:23:01,340 --> 00:23:06,889
sixteen thousand dollar problem so not

514
00:23:04,640 --> 00:23:09,980
only is it wise to address security

515
00:23:06,890 --> 00:23:12,410
early in the lifecycle it saves you

516
00:23:09,980 --> 00:23:14,840
money if you believe you're eventually

517
00:23:12,410 --> 00:23:18,020
gonna be forced to fix these bugs then

518
00:23:14,840 --> 00:23:20,360
the cost to do so early is almost

519
00:23:18,020 --> 00:23:22,660
nothing and the cost to fix bugs in

520
00:23:20,360 --> 00:23:26,419
production is extraordinarily painful

521
00:23:22,660 --> 00:23:29,270
every single study I've ever looked at

522
00:23:26,420 --> 00:23:31,460
says the same thing that the cost to

523
00:23:29,270 --> 00:23:33,860
build secured to the cost of fixed bugs

524
00:23:31,460 --> 00:23:35,840
in production is hundreds of times more

525
00:23:33,860 --> 00:23:36,620
than addressing it early in the

526
00:23:35,840 --> 00:23:41,000
lifecycle

527
00:23:36,620 --> 00:23:44,120
so again planning automation preparation

528
00:23:41,000 --> 00:23:46,520
before rewrites of software is critical

529
00:23:44,120 --> 00:23:49,580
for modern security so there are three

530
00:23:46,520 --> 00:23:52,070
kinds of tools I want to address before

531
00:23:49,580 --> 00:23:53,780
we finish this presentation that we need

532
00:23:52,070 --> 00:23:56,570
to have as part of our automated

533
00:23:53,780 --> 00:23:59,389
security testing the first one is static

534
00:23:56,570 --> 00:24:00,658
analysis is anybody here use static

535
00:23:59,390 --> 00:24:04,769
analysis and there were

536
00:24:00,659 --> 00:24:07,379
at all this is called sassed in our

537
00:24:04,769 --> 00:24:10,019
industry or static application security

538
00:24:07,379 --> 00:24:13,228
testing this is all about using a tool

539
00:24:10,019 --> 00:24:15,509
to look at your code for vulnerabilities

540
00:24:13,229 --> 00:24:18,090
there's a whole industry around these

541
00:24:15,509 --> 00:24:20,460
tools in the world of Ruby on Rails we

542
00:24:18,090 --> 00:24:23,189
have break man in the world of Java

543
00:24:20,460 --> 00:24:25,349
there's many different tools like

544
00:24:23,190 --> 00:24:27,590
fortify and check marks that address

545
00:24:25,349 --> 00:24:31,408
these problems these tools are expensive

546
00:24:27,590 --> 00:24:34,199
but these tools are necessary to make

547
00:24:31,409 --> 00:24:36,869
sure that every time a developer checks

548
00:24:34,200 --> 00:24:39,599
a piece of code into github or checks a

549
00:24:36,869 --> 00:24:42,599
piece of code into into your code

550
00:24:39,599 --> 00:24:44,759
repository that a suite of security

551
00:24:42,599 --> 00:24:48,059
tests is done automatically

552
00:24:44,759 --> 00:24:51,330
before that check-in is accepted and so

553
00:24:48,059 --> 00:24:53,789
this again this is basically it's called

554
00:24:51,330 --> 00:24:55,678
static analysis because you're looking

555
00:24:53,789 --> 00:24:57,629
at the code now not the running

556
00:24:55,679 --> 00:25:03,179
application but the actual code base

557
00:24:57,629 --> 00:25:06,658
itself this is testing this is security

558
00:25:03,179 --> 00:25:09,179
automated testing tool class one my

559
00:25:06,659 --> 00:25:11,249
belief is if you're working at a bank if

560
00:25:09,179 --> 00:25:13,379
you're working for the government if

561
00:25:11,249 --> 00:25:16,409
you're working for infrastructure and

562
00:25:13,379 --> 00:25:19,820
you're not using a static analysis tool

563
00:25:16,409 --> 00:25:22,289
to check for security bugs every day I

564
00:25:19,820 --> 00:25:24,210
consider it to be negligence from a

565
00:25:22,289 --> 00:25:26,340
security point of view this is nothing

566
00:25:24,210 --> 00:25:29,159
special this is something everybody

567
00:25:26,340 --> 00:25:30,689
writing software should be using the

568
00:25:29,159 --> 00:25:33,570
second kind of tool we should be

569
00:25:30,690 --> 00:25:36,929
considering is dynamic application

570
00:25:33,570 --> 00:25:40,678
testing a - tool anybody here use burp

571
00:25:36,929 --> 00:25:44,489
in their work burp who use the scanner

572
00:25:40,679 --> 00:25:47,849
inside of burp that is a - tool and by

573
00:25:44,489 --> 00:25:50,999
the way burp is very inexpensive and the

574
00:25:47,849 --> 00:25:53,609
the scanner inside of burp does better

575
00:25:50,999 --> 00:25:55,859
than some tools that are hundreds of

576
00:25:53,609 --> 00:26:01,139
thousands of dollars so burp and burp

577
00:25:55,859 --> 00:26:03,949
Pro is a very powerful - tool what burp

578
00:26:01,139 --> 00:26:06,570
does is it scans the application

579
00:26:03,950 --> 00:26:09,359
simulating the activity of a penetration

580
00:26:06,570 --> 00:26:11,820
tester looking for bugs this is a little

581
00:26:09,359 --> 00:26:14,159
bit more difficult to deploy as a tool

582
00:26:11,820 --> 00:26:16,350
but and it's only useful

583
00:26:14,160 --> 00:26:18,480
later in the lifecycle when you can

584
00:26:16,350 --> 00:26:20,429
actually build a running version of the

585
00:26:18,480 --> 00:26:22,590
application this is why I think we

586
00:26:20,430 --> 00:26:25,350
should start with the static analysis

587
00:26:22,590 --> 00:26:27,990
tool with a static analysis tool we're

588
00:26:25,350 --> 00:26:31,620
looking at the code we can use those

589
00:26:27,990 --> 00:26:33,930
tools immediately day one when you first

590
00:26:31,620 --> 00:26:36,659
start writing software and then down the

591
00:26:33,930 --> 00:26:39,000
road when you have a running version of

592
00:26:36,660 --> 00:26:42,600
your application we can start using a

593
00:26:39,000 --> 00:26:45,320
dash tool and so the combination of

594
00:26:42,600 --> 00:26:48,689
these two tools are extremely powerful

595
00:26:45,320 --> 00:26:51,300
static analysis code scanning tools they

596
00:26:48,690 --> 00:26:53,790
look for theoretical bugs dynamic

597
00:26:51,300 --> 00:26:55,950
scanning tools look for real-world bugs

598
00:26:53,790 --> 00:26:58,950
and together it gives you a really

599
00:26:55,950 --> 00:27:02,330
strong idea of what bugs are gonna be in

600
00:26:58,950 --> 00:27:05,640
your software and it's relatively

601
00:27:02,330 --> 00:27:08,730
relatively easy to deploy these in the

602
00:27:05,640 --> 00:27:11,580
modern era the third kind of tool is

603
00:27:08,730 --> 00:27:14,250
looking for third-party libraries that

604
00:27:11,580 --> 00:27:18,060
are insecure so this so again I believe

605
00:27:14,250 --> 00:27:21,540
we all want three basic classes of tools

606
00:27:18,060 --> 00:27:24,090
running every single day as we're

607
00:27:21,540 --> 00:27:26,820
building code static analysis looking

608
00:27:24,090 --> 00:27:29,370
for code level problems dynamic analysis

609
00:27:26,820 --> 00:27:31,110
scanning your app simulating the

610
00:27:29,370 --> 00:27:34,639
activity of a penetration tester and the

611
00:27:31,110 --> 00:27:37,590
third class of tools relatively new is

612
00:27:34,640 --> 00:27:40,350
third-party library scanners in my

613
00:27:37,590 --> 00:27:43,470
opinion the problem of third-party

614
00:27:40,350 --> 00:27:45,240
libraries is the most severe problem

615
00:27:43,470 --> 00:27:47,640
when it comes to building secure

616
00:27:45,240 --> 00:27:49,590
software who here writes software or

617
00:27:47,640 --> 00:27:52,770
works with software developers as part

618
00:27:49,590 --> 00:27:56,189
of their job who here's coding how many

619
00:27:52,770 --> 00:28:00,540
third-party libraries are you using in

620
00:27:56,190 --> 00:28:06,960
development anybody know what do you

621
00:28:00,540 --> 00:28:10,080
think what's that loud so many yes how

622
00:28:06,960 --> 00:28:13,070
many hundreds sometimes and how many of

623
00:28:10,080 --> 00:28:16,139
those libraries are perfectly secure

624
00:28:13,070 --> 00:28:19,260
almost none of them even some of the

625
00:28:16,140 --> 00:28:21,660
most important security libraries that

626
00:28:19,260 --> 00:28:24,210
we depend on they themselves have

627
00:28:21,660 --> 00:28:26,280
vulnerabilities and problems so one of

628
00:28:24,210 --> 00:28:26,780
the things I recommend is that you use

629
00:28:26,280 --> 00:28:29,000
one of

630
00:28:26,780 --> 00:28:31,610
these third-party library scanning tools

631
00:28:29,000 --> 00:28:34,450
from the Olas foundation one of our

632
00:28:31,610 --> 00:28:36,800
flagship products is called the ojas

633
00:28:34,450 --> 00:28:39,650
dependency check product this is

634
00:28:36,800 --> 00:28:42,560
extremely powerful it's something you

635
00:28:39,650 --> 00:28:45,530
can for free wire into your software

636
00:28:42,560 --> 00:28:48,200
development process so every single time

637
00:28:45,530 --> 00:28:48,680
a developer tries to check in a piece of

638
00:28:48,200 --> 00:28:52,100
code

639
00:28:48,680 --> 00:28:54,560
um this tool will test if any of the

640
00:28:52,100 --> 00:28:57,709
third-party libraries have an own

641
00:28:54,560 --> 00:29:00,080
security bug to force you to update that

642
00:28:57,710 --> 00:29:04,040
library there's also a tool called

643
00:29:00,080 --> 00:29:05,750
retired to retire j/s which looks at the

644
00:29:04,040 --> 00:29:08,270
JavaScript that you're using on your

645
00:29:05,750 --> 00:29:10,970
website to make sure it's not out of

646
00:29:08,270 --> 00:29:14,150
date with the known security bug I've

647
00:29:10,970 --> 00:29:16,430
run retire j s as a plugin in my browser

648
00:29:14,150 --> 00:29:18,890
and i watched like some of the biggest

649
00:29:16,430 --> 00:29:21,410
banks some of the biggest money transfer

650
00:29:18,890 --> 00:29:23,900
services government websites medical

651
00:29:21,410 --> 00:29:27,230
websites all on their home page with

652
00:29:23,900 --> 00:29:29,270
dozens of insecure libraries driving

653
00:29:27,230 --> 00:29:31,520
their website and this problem needs to

654
00:29:29,270 --> 00:29:35,350
stop so the whole point is when i

655
00:29:31,520 --> 00:29:38,150
started working on software the idea was

656
00:29:35,350 --> 00:29:40,490
let's use a piece of third-party code

657
00:29:38,150 --> 00:29:42,740
let's use up a third-party open source

658
00:29:40,490 --> 00:29:45,740
library let's put it into our

659
00:29:42,740 --> 00:29:48,500
application and if it's working don't

660
00:29:45,740 --> 00:29:51,610
fix anything leave it alone never update

661
00:29:48,500 --> 00:29:53,030
it if it's working and this idea is

662
00:29:51,610 --> 00:29:56,120
terrible

663
00:29:53,030 --> 00:29:59,330
today when it comes to security today

664
00:29:56,120 --> 00:30:03,020
when you're using third-party libraries

665
00:29:59,330 --> 00:30:05,659
you want to check every single day if

666
00:30:03,020 --> 00:30:08,810
any of those libraries are out of date

667
00:30:05,660 --> 00:30:11,210
and if they are update them right away

668
00:30:08,810 --> 00:30:14,179
and this is something that nobody wants

669
00:30:11,210 --> 00:30:17,330
to do nobody cares about this this is

670
00:30:14,180 --> 00:30:20,870
why we have so many security problems in

671
00:30:17,330 --> 00:30:23,149
the world today the one last so that one

672
00:30:20,870 --> 00:30:25,870
last thing I want to talk about is we

673
00:30:23,150 --> 00:30:29,450
need some kind of center of excellence

674
00:30:25,870 --> 00:30:32,090
most developers I meet they want to

675
00:30:29,450 --> 00:30:34,760
write secure software but they need help

676
00:30:32,090 --> 00:30:37,459
they need to ask questions they need to

677
00:30:34,760 --> 00:30:40,010
have a portal to go to to understand

678
00:30:37,460 --> 00:30:41,600
best practices for your company

679
00:30:40,010 --> 00:30:43,640
so this is the most and put this is one

680
00:30:41,600 --> 00:30:46,550
of the most important people issues is

681
00:30:43,640 --> 00:30:49,190
that you need to have an expert as part

682
00:30:46,550 --> 00:30:51,740
of your team as part of your company to

683
00:30:49,190 --> 00:30:54,740
help drive these standards when it comes

684
00:30:51,740 --> 00:30:55,520
to writing secure software so what's the

685
00:30:54,740 --> 00:30:57,590
lesson here

686
00:30:55,520 --> 00:31:00,620
number one have an expert in place

687
00:30:57,590 --> 00:31:03,580
number two have a automation static

688
00:31:00,620 --> 00:31:06,860
analysis dynamic analysis and

689
00:31:03,580 --> 00:31:09,500
third-party library scanners as the

690
00:31:06,860 --> 00:31:11,240
basics that you need in your software

691
00:31:09,500 --> 00:31:14,450
development team to write secure

692
00:31:11,240 --> 00:31:16,660
software without these four things the

693
00:31:14,450 --> 00:31:19,610
chance of you writing secure software

694
00:31:16,660 --> 00:31:20,090
quickly goes to zero why are you

695
00:31:19,610 --> 00:31:22,520
laughing

696
00:31:20,090 --> 00:31:25,669
what any comments over there no it's ok

697
00:31:22,520 --> 00:31:28,550
it's ok I'm no he's like no no go away

698
00:31:25,670 --> 00:31:30,470
Jim ok it's fine we we I'm gonna do a

699
00:31:28,550 --> 00:31:32,570
shortened talk to make sure we have our

700
00:31:30,470 --> 00:31:35,390
break our next talk will be at noon

701
00:31:32,570 --> 00:31:38,540
before I finish up though does anybody

702
00:31:35,390 --> 00:31:41,110
have any questions about anything we

703
00:31:38,540 --> 00:31:41,110
just talked about

704
00:31:46,690 --> 00:31:51,129
well I thank you all for being here at

705
00:31:48,700 --> 00:31:52,960
ThreatCon if you have any questions for

706
00:31:51,129 --> 00:31:56,649
me about building secure software

707
00:31:52,960 --> 00:31:59,169
I'm Jim at Monaco comm please enjoy your

708
00:31:56,649 --> 00:32:02,228
break we'll be back at noon for our next

709
00:31:59,169 --> 00:32:05,039
talk in 15 minutes thank you very much

710
00:32:02,229 --> 00:32:05,039
for your time everybody

