1
00:01:36,550 --> 00:01:44,470
for recording do I sound<font color="#E5E5E5"> okay hear</font><font color="#CCCCCC"> me in</font>

2
00:01:40,420 --> 00:01:48,220
the back oh alright so this is

3
00:01:44,470 --> 00:01:51,400
cryptography 0 2 128 in 15 minutes

4
00:01:48,220 --> 00:01:52,780
because it's a 15 minute time slot so

5
00:01:51,400 --> 00:01:57,280
our goal is to cram as much cryptography

6
00:01:52,780 --> 00:01:59,740
into 15 minutes as possible I am NOT a

7
00:01:57,280 --> 00:02:01,930
mathy person so I<font color="#CCCCCC"> don't explain</font>

8
00:01:59,740 --> 00:02:03,100
cryptography in terms of math which if

9
00:02:01,930 --> 00:02:04,630
your math a person may be a bad thing

10
00:02:03,100 --> 00:02:09,220
but I<font color="#CCCCCC"> think for most of you that's going</font>

11
00:02:04,630 --> 00:02:10,780
to be a good<font color="#E5E5E5"> thing I work blue team so</font>

12
00:02:09,220 --> 00:02:14,050
I'm thinking<font color="#CCCCCC"> practically about what does</font>

13
00:02:10,780 --> 00:02:15,700
this mean<font color="#CCCCCC"> to me not o theoretically an</font>

14
00:02:14,050 --> 00:02:18,010
attacker could maybe I want to know

15
00:02:15,700 --> 00:02:21,010
cannon attack or do it or can't they win

16
00:02:18,010 --> 00:02:24,429
can they win<font color="#E5E5E5"> campaign so it's going to</font>

17
00:02:21,010 --> 00:02:25,600
<font color="#E5E5E5">be very</font><font color="#CCCCCC"> practical and it's a subject</font>

18
00:02:24,430 --> 00:02:27,160
like cryptography and we're cramming

19
00:02:25,600 --> 00:02:30,820
into<font color="#E5E5E5"> 15 minutes so this is going to be</font>

20
00:02:27,160 --> 00:02:32,620
<font color="#CCCCCC">very fast-paced so I am vegt I</font><font color="#E5E5E5"> saima</font>

21
00:02:30,820 --> 00:02:34,239
<font color="#CCCCCC">Bloomsburg University Alumni I graduated</font>

22
00:02:32,620 --> 00:02:37,570
with degrees in digital forensics and

23
00:02:34,240 --> 00:02:40,030
anthropology i'm a huge nerd I'm play of

24
00:02:37,570 --> 00:02:41,500
the games and I run<font color="#E5E5E5"> of the Linux I have</font>

25
00:02:40,030 --> 00:02:43,420
never shown up to a LAN party running

26
00:02:41,500 --> 00:02:45,489
anything except one I'm proud of that

27
00:02:43,420 --> 00:02:47,829
<font color="#E5E5E5">I'm currently working for the blue team</font>

28
00:02:45,489 --> 00:02:53,440
for one of<font color="#E5E5E5"> our sponsors g3 technologies</font>

29
00:02:47,830 --> 00:02:55,060
<font color="#CCCCCC">okay so who deals with crypto well if</font>

30
00:02:53,440 --> 00:02:57,190
you do digital forensics to deal with

31
00:02:55,060 --> 00:02:59,680
crypto if you do I are<font color="#E5E5E5"> you deal with</font>

32
00:02:57,190 --> 00:03:01,989
crypto if you do<font color="#E5E5E5"> Red Team you do with</font>

33
00:02:59,680 --> 00:03:04,600
crypto if you do blue team you with

34
00:03:01,989 --> 00:03:08,230
crypto if you connect to<font color="#E5E5E5"> the internet on</font>

35
00:03:04,600 --> 00:03:10,630
your smartphone yoohoo crypto so this<font color="#CCCCCC"> is</font>

36
00:03:08,230 --> 00:03:11,980
relevant<font color="#E5E5E5"> everybody although Baylor talk</font>

37
00:03:10,630 --> 00:03:14,769
seems pretty cool so<font color="#E5E5E5"> I wouldn't have</font>

38
00:03:11,980 --> 00:03:15,730
<font color="#E5E5E5">blamed you had gone to this topics we're</font>

39
00:03:14,770 --> 00:03:17,980
going to cover symmetric cryptography

40
00:03:15,730 --> 00:03:19,869
stuff like a s where you<font color="#E5E5E5"> have one key on</font>

41
00:03:17,980 --> 00:03:22,750
both sides both em crypt and decrypt

42
00:03:19,870 --> 00:03:24,580
asymmetric cryptography where one key

43
00:03:22,750 --> 00:03:26,170
encrypt and then the other Wendy<font color="#CCCCCC"> Crips</font>

44
00:03:24,580 --> 00:03:27,970
and then the other person also has a key

45
00:03:26,170 --> 00:03:31,660
pair one of<font color="#E5E5E5"> which encrypts the other</font>

46
00:03:27,970 --> 00:03:34,870
windy<font color="#CCCCCC"> crypts</font><font color="#E5E5E5"> Pasha's um who hears</font>

47
00:03:31,660 --> 00:03:35,890
forensic background<font color="#CCCCCC"> okay so you should</font>

48
00:03:34,870 --> 00:03:38,530
all<font color="#E5E5E5"> be familiar with hashes</font>

49
00:03:35,890 --> 00:03:40,268
pseudo-random number generators these

50
00:03:38,530 --> 00:03:41,769
are actually really important as we're

51
00:03:40,269 --> 00:03:44,110
about to see this one of the four<font color="#E5E5E5"> things</font>

52
00:03:41,769 --> 00:03:46,810
you need to do cryptography ours actual

53
00:03:44,110 --> 00:03:49,120
random numbers that practically can't be

54
00:03:46,810 --> 00:03:50,110
attacked cryptographic protocols you get

55
00:03:49,120 --> 00:03:52,300
really do much

56
00:03:50,110 --> 00:03:55,120
with just one algorithm with one

57
00:03:52,300 --> 00:03:58,240
primitive you have to fit them together

58
00:03:55,120 --> 00:04:00,940
to<font color="#CCCCCC"> do something meaningful and then</font>

59
00:03:58,240 --> 00:04:02,170
slide general attacks so when you're

60
00:04:00,940 --> 00:04:03,070
designing a cryptographic protocol

61
00:04:02,170 --> 00:04:04,540
you're thinking well what<font color="#E5E5E5"> can the</font>

62
00:04:03,070 --> 00:04:06,370
attacker know and generally you're not

63
00:04:04,540 --> 00:04:08,410
thinking well the attacker can know how

64
00:04:06,370 --> 00:04:10,990
many milliseconds it takes me to do my

65
00:04:08,410 --> 00:04:12,340
calculations that's<font color="#CCCCCC"> a side channel it's</font>

66
00:04:10,990 --> 00:04:16,359
not<font color="#E5E5E5"> it's not attacking the crypto</font>

67
00:04:12,340 --> 00:04:18,430
directly it's chatting it into it so for

68
00:04:16,358 --> 00:04:19,899
things that are necessary for strong

69
00:04:18,430 --> 00:04:22,270
cryptography you want to be<font color="#E5E5E5"> successful</font>

70
00:04:19,899 --> 00:04:23,349
you have strong algorithms probably know

71
00:04:22,270 --> 00:04:24,700
if this is<font color="#CCCCCC"> the easiest</font><font color="#E5E5E5"> to get right</font>

72
00:04:23,350 --> 00:04:26,230
because I can just give you<font color="#E5E5E5"> a list of</font>

73
00:04:24,700 --> 00:04:28,419
use these algorithms don't use these

74
00:04:26,230 --> 00:04:29,890
algorithms or if you want to<font color="#E5E5E5"> break it</font>

75
00:04:28,419 --> 00:04:31,180
down you can use these algorithms in

76
00:04:29,890 --> 00:04:33,789
these circumstances but<font color="#E5E5E5"> not these</font>

77
00:04:31,180 --> 00:04:35,500
circumstances so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the easiest</font>

78
00:04:33,790 --> 00:04:37,210
part you're<font color="#E5E5E5"> going to configure SSH</font>

79
00:04:35,500 --> 00:04:41,230
you're going to configure a cell for a

80
00:04:37,210 --> 00:04:42,880
<font color="#CCCCCC">website that that's the easy part next</font>

81
00:04:41,230 --> 00:04:45,550
one a source of random numbers when

82
00:04:42,880 --> 00:04:46,990
you're making a key to<font color="#CCCCCC"> actually be</font><font color="#E5E5E5"> able</font>

83
00:04:45,550 --> 00:04:49,000
to do some kind<font color="#E5E5E5"> of encryption or</font>

84
00:04:46,990 --> 00:04:51,520
decryption it has to be<font color="#E5E5E5"> random so the</font>

85
00:04:49,000 --> 00:04:52,870
attacker can guess it and then we're

86
00:04:51,520 --> 00:04:54,219
constantly making nonces and

87
00:04:52,870 --> 00:04:55,690
initialization vectors that also

88
00:04:54,220 --> 00:04:59,380
generally have to have some entropy to

89
00:04:55,690 --> 00:05:00,669
them this<font color="#CCCCCC"> is often</font><font color="#E5E5E5"> mess up but it's</font>

90
00:04:59,380 --> 00:05:02,650
pretty easily solvable you just need to

91
00:05:00,669 --> 00:05:05,650
make sure<font color="#E5E5E5"> that you do it and you don't</font>

92
00:05:02,650 --> 00:05:07,330
forget about it next correct

93
00:05:05,650 --> 00:05:08,830
implementation making an implementation

94
00:05:07,330 --> 00:05:10,810
of an<font color="#E5E5E5"> algorithm that doesn't have side</font>

95
00:05:08,830 --> 00:05:13,210
channels is really hard ensuring that

96
00:05:10,810 --> 00:05:14,890
your implementation of something does

97
00:05:13,210 --> 00:05:18,010
what you think it does is hard and

98
00:05:14,890 --> 00:05:21,070
lastly robust protocols arguably we've

99
00:05:18,010 --> 00:05:23,500
never done this if you look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

100
00:05:21,070 --> 00:05:25,510
history of a complex protocol like pls

101
00:05:23,500 --> 00:05:28,630
and<font color="#E5E5E5"> SSL which would you use the yo</font>

102
00:05:25,510 --> 00:05:30,159
connect to google<font color="#E5E5E5"> the</font><font color="#CCCCCC"> HTTPS yes Forster</font>

103
00:05:28,630 --> 00:05:32,080
means is actually going through<font color="#E5E5E5"> an</font>

104
00:05:30,160 --> 00:05:34,840
encrypted tunnel that's a complex

105
00:05:32,080 --> 00:05:36,940
protocol with like four different major

106
00:05:34,840 --> 00:05:39,820
steps and<font color="#E5E5E5"> you know four different kinds</font>

107
00:05:36,940 --> 00:05:41,620
<font color="#E5E5E5">of cryptography going into it ah it's</font>

108
00:05:39,820 --> 00:05:44,349
had issue after issue after issue after

109
00:05:41,620 --> 00:05:46,690
issue why is this big ugly and complex

110
00:05:44,350 --> 00:05:50,350
making a correct protocol is really

111
00:05:46,690 --> 00:05:53,290
really hard so we're<font color="#E5E5E5"> going to start</font><font color="#CCCCCC"> with</font>

112
00:05:50,350 --> 00:05:54,669
symmetric cryptography going to talk

113
00:05:53,290 --> 00:05:58,690
about block ciphers and stream ciphers

114
00:05:54,669 --> 00:06:01,030
is the requirements for<font color="#E5E5E5"> a symmetric</font>

115
00:05:58,690 --> 00:06:02,380
cipher if the attacker<font color="#E5E5E5"> seats out what</font>

116
00:06:01,030 --> 00:06:03,940
they<font color="#CCCCCC"> are not allowed to know what the</font>

117
00:06:02,380 --> 00:06:06,010
<font color="#CCCCCC">input is this is the whole you know</font>

118
00:06:03,940 --> 00:06:07,600
point of doing this is that if I have a

119
00:06:06,010 --> 00:06:10,480
secret message<font color="#E5E5E5"> that I need to tell dr.</font>

120
00:06:07,600 --> 00:06:12,670
montante<font color="#E5E5E5"> I encrypt it dr. montante also</font>

121
00:06:10,480 --> 00:06:14,500
knows the<font color="#E5E5E5"> secret key</font><font color="#CCCCCC"> I encrypt it with</font>

122
00:06:12,670 --> 00:06:16,030
the key hand it to him I can also hand

123
00:06:14,500 --> 00:06:18,490
it to Rio and Rio can't find out what

124
00:06:16,030 --> 00:06:19,809
the message was and then dr. montaje can

125
00:06:18,490 --> 00:06:22,600
find out with met Strich because he also

126
00:06:19,810 --> 00:06:26,920
has the key<font color="#CCCCCC"> okay the</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that</font>

127
00:06:22,600 --> 00:06:29,710
he can't recover the key because if you

128
00:06:26,920 --> 00:06:31,480
can<font color="#E5E5E5"> recover the key then you can then</font>

129
00:06:29,710 --> 00:06:34,390
decrypt it as well results requirement

130
00:06:31,480 --> 00:06:35,920
it's not always relevant but there are

131
00:06:34,390 --> 00:06:38,200
situations where an attacker can

132
00:06:35,920 --> 00:06:40,510
actually hand a good<font color="#E5E5E5"> guy data to be</font>

133
00:06:38,200 --> 00:06:42,370
encrypted and<font color="#CCCCCC"> exceed</font><font color="#E5E5E5"> the output so in a</font>

134
00:06:40,510 --> 00:06:44,020
situation like that<font color="#E5E5E5"> it's important that</font>

135
00:06:42,370 --> 00:06:45,520
the attacker not be able to find<font color="#E5E5E5"> the key</font>

136
00:06:44,020 --> 00:06:51,340
from doing that even<font color="#E5E5E5"> if they can do it a</font>

137
00:06:45,520 --> 00:06:54,880
bunch of times ciphers start start start

138
00:06:51,340 --> 00:06:57,340
easy route 13 the transposition cipher

139
00:06:54,880 --> 00:07:00,940
rotates through the alphabet 13 forward

140
00:06:57,340 --> 00:07:04,390
that sounds pretty secure right you know

141
00:07:00,940 --> 00:07:08,650
fixed key and 26 should be even more

142
00:07:04,390 --> 00:07:13,120
secure write something about I only know

143
00:07:08,650 --> 00:07:15,070
<font color="#E5E5E5">one company</font><font color="#CCCCCC"> that is ignorant enough to</font>

144
00:07:13,120 --> 00:07:17,140
actually use rot13 to try to<font color="#E5E5E5"> protect</font>

145
00:07:15,070 --> 00:07:21,669
something I'll<font color="#E5E5E5"> let you guess what</font>

146
00:07:17,140 --> 00:07:23,440
company that is so I bring this up<font color="#E5E5E5"> for</font>

147
00:07:21,669 --> 00:07:25,120
dreams<font color="#CCCCCC"> 1 it's a classic example of a</font>

148
00:07:23,440 --> 00:07:25,990
simple cipher that<font color="#E5E5E5"> caesar wrap your head</font>

149
00:07:25,120 --> 00:07:27,460
around the other one is it's a

150
00:07:25,990 --> 00:07:29,200
transposition cipher which is going<font color="#E5E5E5"> to</font>

151
00:07:27,460 --> 00:07:33,520
come<font color="#E5E5E5"> back up later we talked about black</font>

152
00:07:29,200 --> 00:07:35,469
fibers the actual<font color="#E5E5E5"> real parent cipher of</font>

153
00:07:33,520 --> 00:07:38,620
<font color="#CCCCCC">all modern</font><font color="#E5E5E5"> cryptography is the one time</font>

154
00:07:35,470 --> 00:07:39,970
<font color="#E5E5E5">pad so in a one-time pad you have a key</font>

155
00:07:38,620 --> 00:07:42,610
that is the<font color="#E5E5E5"> same length as your message</font>

156
00:07:39,970 --> 00:07:44,500
<font color="#E5E5E5">you take your low entropy message that's</font>

157
00:07:42,610 --> 00:07:46,990
human readable and your random we have

158
00:07:44,500 --> 00:07:49,450
<font color="#E5E5E5">to be true random key and use or them</font>

159
00:07:46,990 --> 00:07:51,760
together and then you get gobbledygook

160
00:07:49,450 --> 00:07:53,229
out that looks random then<font color="#E5E5E5"> if you take</font>

161
00:07:51,760 --> 00:07:54,520
that<font color="#E5E5E5"> same one-time pad again you soared</font>

162
00:07:53,230 --> 00:07:56,440
across again you get your input out

163
00:07:54,520 --> 00:08:00,549
we're<font color="#E5E5E5"> going to talk about in a little</font>

164
00:07:56,440 --> 00:08:02,110
bit more detail limitations here the key

165
00:08:00,550 --> 00:08:05,320
size is equal to the message size if I

166
00:08:02,110 --> 00:08:06,790
have a one gig file I want to transfer

167
00:08:05,320 --> 00:08:09,430
<font color="#E5E5E5">to you I either they need to through</font>

168
00:08:06,790 --> 00:08:12,250
some out secure outside channel give you

169
00:08:09,430 --> 00:08:13,960
a gig one-time pad or I had to have

170
00:08:12,250 --> 00:08:15,190
already given you a really<font color="#CCCCCC"> big one time</font>

171
00:08:13,960 --> 00:08:17,590
pad that you're now using a chunk of<font color="#E5E5E5"> it</font>

172
00:08:15,190 --> 00:08:17,889
so you're moving huge keys around which

173
00:08:17,590 --> 00:08:21,729
is

174
00:08:17,889 --> 00:08:23,110
<font color="#CCCCCC">impractical and how it works</font><font color="#E5E5E5"> is the</font>

175
00:08:21,729 --> 00:08:26,229
cipher texts the<font color="#CCCCCC"> Playtex resort /</font>

176
00:08:23,110 --> 00:08:28,870
one-time pad so stock codes or who here

177
00:08:26,229 --> 00:08:30,370
knows<font color="#E5E5E5"> Zork if</font><font color="#CCCCCC"> i give you</font><font color="#E5E5E5"> a bite two</font>

178
00:08:28,870 --> 00:08:33,370
bites you<font color="#E5E5E5"> could throw them together who</font>

179
00:08:30,370 --> 00:08:34,899
here has never heard absorb before<font color="#E5E5E5"> okay</font>

180
00:08:33,370 --> 00:08:38,500
so a couple of our forensic students

181
00:08:34,899 --> 00:08:40,149
that's that's great<font color="#CCCCCC"> I was</font><font color="#E5E5E5"> very</font>

182
00:08:38,500 --> 00:08:41,740
disappointed when my friends with math

183
00:08:40,149 --> 00:08:43,479
classes didn't cover this but<font color="#E5E5E5"> did cover</font>

184
00:08:41,740 --> 00:08:45,700
like all kinds of other things<font color="#CCCCCC"> that</font>

185
00:08:43,479 --> 00:08:47,680
weren't important so you<font color="#CCCCCC"> take two bits</font>

186
00:08:45,700 --> 00:08:50,079
of<font color="#CCCCCC"> the time if the bits are different it</font>

187
00:08:47,680 --> 00:08:54,459
so the output is<font color="#E5E5E5"> a one if there's the</font>

188
00:08:50,079 --> 00:09:00,010
same the output<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a 0 so 0 0 0 0 1 1 is</font>

189
00:08:54,459 --> 00:09:01,510
a 0 0 1 is a 110 is a<font color="#CCCCCC"> one ok it</font>

190
00:09:00,010 --> 00:09:05,920
preserves the difference the cool thing

191
00:09:01,510 --> 00:09:08,019
about this is that it's reversible so

192
00:09:05,920 --> 00:09:10,000
plug the encrypt and decrypt look at the

193
00:09:08,019 --> 00:09:13,180
column we've got 110 so we're going to

194
00:09:10,000 --> 00:09:15,579
secret key again 01 so the output is<font color="#E5E5E5"> 1</font>

195
00:09:13,180 --> 00:09:19,209
we've reversed it and this works across

196
00:09:15,579 --> 00:09:22,149
the entire thing so once I've had really

197
00:09:19,209 --> 00:09:25,209
really<font color="#E5E5E5"> simple except when it's not so</font>

198
00:09:22,149 --> 00:09:29,829
when you reuse a one-time pad<font color="#CCCCCC"> zorry to</font>

199
00:09:25,209 --> 00:09:31,779
puppy if you it's one time because you

200
00:09:29,829 --> 00:09:35,019
<font color="#E5E5E5">can only use it once if you use</font><font color="#CCCCCC"> that</font>

201
00:09:31,779 --> 00:09:37,480
<font color="#E5E5E5">same key again you're going to break the</font>

202
00:09:35,019 --> 00:09:40,000
security of both of<font color="#E5E5E5"> them there is is</font>

203
00:09:37,480 --> 00:09:41,890
because you can encrypt to you can zorb

204
00:09:40,000 --> 00:09:43,660
together to remove the key and you'll

205
00:09:41,890 --> 00:09:46,990
end<font color="#E5E5E5"> up with</font><font color="#CCCCCC"> a mash of the two messages</font>

206
00:09:43,660 --> 00:09:48,519
if you have more than two things that's

207
00:09:46,990 --> 00:09:50,800
been encrypted with the same one-time

208
00:09:48,519 --> 00:09:53,350
pad you can do even more fun stuff<font color="#E5E5E5"> this</font>

209
00:09:50,800 --> 00:09:55,269
also<font color="#E5E5E5"> allows you to guess plain</font><font color="#CCCCCC"> text if</font>

210
00:09:53,350 --> 00:09:56,890
you<font color="#E5E5E5"> guess correctly you'll decrypt the</font>

211
00:09:55,269 --> 00:10:01,660
<font color="#E5E5E5">plaintext for all of them and other</font>

212
00:09:56,890 --> 00:10:04,959
stuff like that so example this first

213
00:10:01,660 --> 00:10:06,550
message<font color="#E5E5E5"> suncast bitmap Zord against the</font>

214
00:10:04,959 --> 00:10:09,130
one-time pad get gobbledygook out

215
00:10:06,550 --> 00:10:11,349
different message zorgons one-time pad

216
00:10:09,130 --> 00:10:13,060
get gobbly gook out zuhr the two

217
00:10:11,350 --> 00:10:16,360
encrypted messages together completely

218
00:10:13,060 --> 00:10:17,890
removes the encryption but it's a jumble

219
00:10:16,360 --> 00:10:21,550
of the two messages but the encryption

220
00:10:17,890 --> 00:10:22,990
<font color="#E5E5E5">Scott and thank you to crypto Smith for</font>

221
00:10:21,550 --> 00:10:24,189
doing a really great visual

222
00:10:22,990 --> 00:10:28,320
representation of what this actually

223
00:10:24,190 --> 00:10:31,380
looks so

224
00:10:28,320 --> 00:10:33,000
for a couple we have<font color="#CCCCCC"> a two issues with</font>

225
00:10:31,380 --> 00:10:34,560
one-time pads right one of them is<font color="#CCCCCC"> that</font>

226
00:10:33,000 --> 00:10:36,150
we have<font color="#E5E5E5"> this whole reuse issue where we</font>

227
00:10:34,560 --> 00:10:37,979
have<font color="#E5E5E5"> to generate a</font><font color="#CCCCCC"> 100-percent unique</font>

228
00:10:36,150 --> 00:10:39,870
pad for every message we want<font color="#E5E5E5"> to encrypt</font>

229
00:10:37,980 --> 00:10:41,850
and the other one is that<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to</font>

230
00:10:39,870 --> 00:10:44,520
move around these huge keys of the same

231
00:10:41,850 --> 00:10:46,380
size of the message stream ciphers are a

232
00:10:44,520 --> 00:10:48,750
way to solve that so the<font color="#E5E5E5"> first thing we</font>

233
00:10:46,380 --> 00:10:50,550
do is we<font color="#CCCCCC"> don't exchange a one-time pad</font>

234
00:10:48,750 --> 00:10:52,170
we have a pseudo-random number generator

235
00:10:50,550 --> 00:10:54,569
that will generate a pad basement seed

236
00:10:52,170 --> 00:10:56,310
then we exchange seeds we both generate

237
00:10:54,570 --> 00:10:59,550
the same pad and then<font color="#E5E5E5"> we can do</font><font color="#CCCCCC"> one-time</font>

238
00:10:56,310 --> 00:11:01,650
pad with it and logically this is how

239
00:10:59,550 --> 00:11:03,810
stream ciphers work even though

240
00:11:01,650 --> 00:11:05,310
internally the the pseudo-random number

241
00:11:03,810 --> 00:11:07,890
generator in the<font color="#CCCCCC"> combination step are</font>

242
00:11:05,310 --> 00:11:09,930
mixed together this is still logically

243
00:11:07,890 --> 00:11:11,189
how you can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about there's</font>

244
00:11:09,930 --> 00:11:13,050
important because you can still do the

245
00:11:11,190 --> 00:11:17,700
whole<font color="#E5E5E5"> boring together thing brings the</font>

246
00:11:13,050 --> 00:11:18,750
other thing they take a<font color="#E5E5E5"> not we're</font><font color="#CCCCCC"> going</font>

247
00:11:17,700 --> 00:11:21,060
to talk about that<font color="#CCCCCC"> more but right now</font>

248
00:11:18,750 --> 00:11:23,280
usually<font color="#E5E5E5"> know that I can keep using the</font>

249
00:11:21,060 --> 00:11:25,469
same seed the same key and just change

250
00:11:23,280 --> 00:11:26,939
my number used once and as long as I

251
00:11:25,470 --> 00:11:30,090
<font color="#CCCCCC">never repeat that number and key</font>

252
00:11:26,940 --> 00:11:32,250
<font color="#E5E5E5">together I will</font><font color="#CCCCCC"> always</font><font color="#E5E5E5"> be secure because</font>

253
00:11:30,090 --> 00:11:35,730
<font color="#E5E5E5">the nonce changes the output but then it</font>

254
00:11:32,250 --> 00:11:37,680
can be attack or narrowing so block

255
00:11:35,730 --> 00:11:40,440
ciphers stream cipher is taking a bit

256
00:11:37,680 --> 00:11:42,359
another bit and encrypts them here's the

257
00:11:40,440 --> 00:11:45,150
<font color="#E5E5E5">next bit you know also</font><font color="#CCCCCC"> think it was</font>

258
00:11:42,360 --> 00:11:47,280
encrypting a stream at a time watched

259
00:11:45,150 --> 00:11:49,110
over<font color="#CCCCCC"> six of junk and grips takes the</font>

260
00:11:47,280 --> 00:11:52,439
<font color="#E5E5E5">next chunk grips takes the next jump</font>

261
00:11:49,110 --> 00:11:55,020
<font color="#E5E5E5">Crips</font><font color="#CCCCCC"> there's time</font><font color="#E5E5E5"> Chris generally</font>

262
00:11:52,440 --> 00:11:57,870
old-school block ciphers were<font color="#CCCCCC"> 64-bit</font>

263
00:11:55,020 --> 00:12:00,630
blocks newer good ones are 128 bit

264
00:11:57,870 --> 00:12:03,090
blocks are not going to go over why that

265
00:12:00,630 --> 00:12:05,040
matters but<font color="#E5E5E5"> it does so the most common</font>

266
00:12:03,090 --> 00:12:07,800
construction for how a block cipher

267
00:12:05,040 --> 00:12:09,270
actually works is that it be a

268
00:12:07,800 --> 00:12:12,810
substitution to say<font color="#CCCCCC"> four plus</font><font color="#E5E5E5"> those</font>

269
00:12:09,270 --> 00:12:14,730
transposition cipher so a substitution

270
00:12:12,810 --> 00:12:17,099
cipher is something really<font color="#E5E5E5"> easy like if</font>

271
00:12:14,730 --> 00:12:19,650
i say rio no really I mean been in this

272
00:12:17,100 --> 00:12:21,930
email and I send dr. montante an email

273
00:12:19,650 --> 00:12:23,579
and every<font color="#E5E5E5"> time he sees Rio he goes meta</font>

274
00:12:21,930 --> 00:12:25,650
that actually that means been that's a

275
00:12:23,580 --> 00:12:27,360
substitution cipher and it turns out

276
00:12:25,650 --> 00:12:29,459
that if<font color="#CCCCCC"> you combine a substitution</font>

277
00:12:27,360 --> 00:12:31,680
cipher in a transposition cipher like

278
00:12:29,460 --> 00:12:32,790
rot13 but not rotating through an

279
00:12:31,680 --> 00:12:35,160
alphabet protonating through all

280
00:12:32,790 --> 00:12:37,770
possible bite values and that where that

281
00:12:35,160 --> 00:12:40,110
substance or the rotation of<font color="#E5E5E5"> the</font>

282
00:12:37,770 --> 00:12:41,850
transposition depends on the key you<font color="#E5E5E5"> can</font>

283
00:12:40,110 --> 00:12:44,550
actually<font color="#E5E5E5"> have a publicly known</font>

284
00:12:41,850 --> 00:12:46,199
substitution cipher and it was

285
00:12:44,550 --> 00:12:49,258
<font color="#E5E5E5">constructed correctly you can substitute</font>

286
00:12:46,199 --> 00:12:51,209
rotate mix the stuff<font color="#E5E5E5"> around substitute</font>

287
00:12:49,259 --> 00:12:52,649
mix the stuff around substitute mixed

288
00:12:51,209 --> 00:12:55,680
stuff around and if you do<font color="#E5E5E5"> that for</font>

289
00:12:52,649 --> 00:12:57,839
enough rounds it becomes infeasible to

290
00:12:55,680 --> 00:12:59,729
figure out what the input was or what

291
00:12:57,839 --> 00:13:02,910
the key was based on<font color="#E5E5E5"> the output and</font>

292
00:12:59,730 --> 00:13:07,199
that's how des works and<font color="#CCCCCC"> that's how a es</font>

293
00:13:02,910 --> 00:13:08,880
works so stream ciphers everything onto

294
00:13:07,199 --> 00:13:12,149
his one-time pad you<font color="#CCCCCC"> can never reuse a</font>

295
00:13:08,880 --> 00:13:14,130
key stream ciphers<font color="#E5E5E5"> at least good ones</font>

296
00:13:12,149 --> 00:13:16,139
take a second value it's either an

297
00:13:14,130 --> 00:13:20,130
initialization vector which means<font color="#E5E5E5"> that</font>

298
00:13:16,139 --> 00:13:23,310
<font color="#E5E5E5">it's unique and random or not the number</font>

299
00:13:20,130 --> 00:13:25,199
used once a nonce doesn't need to be

300
00:13:23,310 --> 00:13:27,630
random you may started in a random place

301
00:13:25,199 --> 00:13:29,250
but it can just be a counter just has to

302
00:13:27,630 --> 00:13:33,750
<font color="#CCCCCC">be unique and never be reused with the</font>

303
00:13:29,250 --> 00:13:36,389
same key so for example<font color="#E5E5E5"> of how this is</font>

304
00:13:33,750 --> 00:13:38,519
failed in<font color="#CCCCCC"> practice rc4 inside of web</font>

305
00:13:36,389 --> 00:13:42,000
anybody have the<font color="#E5E5E5"> raytheon</font><font color="#CCCCCC"> singla jigs</font>

306
00:13:38,519 --> 00:13:44,130
breathing on challenge codes I know

307
00:13:42,000 --> 00:13:45,690
we've come to have them there's our c4

308
00:13:44,130 --> 00:13:50,100
on there for you to try to break our c4

309
00:13:45,690 --> 00:13:51,509
so our c4 has its own issues but when

310
00:13:50,100 --> 00:13:53,279
they implemented in weapon was during a

311
00:13:51,509 --> 00:13:55,079
time when the government had

312
00:13:53,279 --> 00:13:55,860
restrictions on strong cryptography you

313
00:13:55,079 --> 00:13:58,410
weren't allowed<font color="#E5E5E5"> to have strong</font>

314
00:13:55,860 --> 00:14:01,380
cryptography so they restricted both the

315
00:13:58,410 --> 00:14:04,920
key size but also<font color="#E5E5E5"> the initialization</font>

316
00:14:01,380 --> 00:14:07,860
vector 24 bits means there's two to<font color="#E5E5E5"> the</font>

317
00:14:04,920 --> 00:14:09,779
24 possibilities for that<font color="#E5E5E5"> initialization</font>

318
00:14:07,860 --> 00:14:11,699
vector<font color="#E5E5E5"> it means eventually you encrypt</font>

319
00:14:09,779 --> 00:14:13,410
enough packets moving over<font color="#E5E5E5"> your Wi-Fi</font>

320
00:14:11,699 --> 00:14:15,269
channel eventually it's going to repeat

321
00:14:13,410 --> 00:14:19,199
and when it repeats you'll have the same

322
00:14:15,269 --> 00:14:22,500
team the same not used and<font color="#CCCCCC"> you can then</font>

323
00:14:19,199 --> 00:14:24,479
decrypt that's content even<font color="#CCCCCC"> if you</font>

324
00:14:22,500 --> 00:14:26,970
replace<font color="#CCCCCC"> our c4</font><font color="#E5E5E5"> with something stronger</font>

325
00:14:24,480 --> 00:14:28,889
something like a<font color="#E5E5E5"> counter mode or</font><font color="#CCCCCC"> ChaCha</font>

326
00:14:26,970 --> 00:14:30,630
20 as long as the initialization vector

327
00:14:28,889 --> 00:14:38,389
was that short you would always<font color="#E5E5E5"> have</font>

328
00:14:30,630 --> 00:14:38,389
these repeating nonsense yeah<font color="#CCCCCC"> okay</font>

329
00:14:40,370 --> 00:14:50,630
if we had already exchanged a one-time

330
00:14:48,980 --> 00:14:53,330
pad and I wanted<font color="#E5E5E5"> to give you another one</font>

331
00:14:50,630 --> 00:14:55,730
<font color="#E5E5E5">that was the same size and the first one</font>

332
00:14:53,330 --> 00:14:57,710
was trust insecure so we knew we were

333
00:14:55,730 --> 00:15:00,860
allowed to use it I could then send you

334
00:14:57,710 --> 00:15:04,220
a second<font color="#CCCCCC"> one using the first one</font><font color="#E5E5E5"> and</font>

335
00:15:00,860 --> 00:15:07,100
then we<font color="#E5E5E5"> could use the second one for</font>

336
00:15:04,220 --> 00:15:08,930
something else<font color="#E5E5E5"> but we're still stuck</font>

337
00:15:07,100 --> 00:15:12,320
with the same exact situation in terms

338
00:15:08,930 --> 00:15:14,270
<font color="#E5E5E5">of who has what keys right we still have</font>

339
00:15:12,320 --> 00:15:16,100
we started with one usable key and we

340
00:15:14,270 --> 00:15:20,390
ended with one usable key of whatever

341
00:15:16,100 --> 00:15:21,620
size so we absolutely can but there's

342
00:15:20,390 --> 00:15:24,980
not really a point does<font color="#E5E5E5"> it make sense</font>

343
00:15:21,620 --> 00:15:29,150
we're<font color="#E5E5E5"> going to get to the key</font><font color="#CCCCCC"> change</font>

344
00:15:24,980 --> 00:15:31,580
<font color="#CCCCCC">when we get out of symmetric</font><font color="#E5E5E5"> Gupta okay</font>

345
00:15:29,150 --> 00:15:35,839
so stream ciphers that are good didn't

346
00:15:31,580 --> 00:15:37,070
you should use not our c4<font color="#CCCCCC"> chacha 20</font><font color="#E5E5E5"> AES</font>

347
00:15:35,839 --> 00:15:39,470
and counter mode we're going to get<font color="#E5E5E5"> to</font>

348
00:15:37,070 --> 00:15:42,290
how a<font color="#E5E5E5"> s which</font><font color="#CCCCCC"> is a block cipher is also</font>

349
00:15:39,470 --> 00:15:45,709
a stream cipher and they SGC n which is

350
00:15:42,290 --> 00:15:47,540
a counter mode that has authentication

351
00:15:45,709 --> 00:15:50,180
built into it instead<font color="#E5E5E5"> of doing your own</font>

352
00:15:47,540 --> 00:15:53,329
doing a message authentication code to

353
00:15:50,180 --> 00:15:55,880
check whether<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> was changed so</font>

354
00:15:53,330 --> 00:15:57,709
block ciphers one block at a time is his

355
00:15:55,880 --> 00:15:59,810
head script block that's on crip the

356
00:15:57,709 --> 00:16:01,939
block pass it on different block modes

357
00:15:59,810 --> 00:16:04,939
do different things for<font color="#E5E5E5"> example ECB mode</font>

358
00:16:01,940 --> 00:16:08,029
just<font color="#E5E5E5"> grabs a chunk encrypts it passes it</font>

359
00:16:04,940 --> 00:16:10,370
on the problem with that<font color="#E5E5E5"> is that the</font>

360
00:16:08,029 --> 00:16:12,770
same input data will perform<font color="#E5E5E5"> the same</font>

361
00:16:10,370 --> 00:16:13,910
output data every single time we're

362
00:16:12,770 --> 00:16:16,550
<font color="#E5E5E5">going to see what that actually looks</font>

363
00:16:13,910 --> 00:16:18,469
like in a minute good news about block

364
00:16:16,550 --> 00:16:19,849
ciphers they resist the Kokiri use thing

365
00:16:18,470 --> 00:16:22,700
so even if you don't<font color="#CCCCCC"> have an answer to</font>

366
00:16:19,850 --> 00:16:24,680
say we're initialization vector you want

367
00:16:22,700 --> 00:16:26,120
one for a reason<font color="#CCCCCC"> you're going to see but</font>

368
00:16:24,680 --> 00:16:27,920
even<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you don't have one</font><font color="#CCCCCC"> you can do</font>

369
00:16:26,120 --> 00:16:29,870
the whole soaring stuff together to get

370
00:16:27,920 --> 00:16:32,240
stuff out you can't do it<font color="#E5E5E5"> resist that</font>

371
00:16:29,870 --> 00:16:35,720
I'm the technical term for the

372
00:16:32,240 --> 00:16:38,990
substitute rotate<font color="#CCCCCC"> thing is perm uation</font>

373
00:16:35,720 --> 00:16:41,540
substitution so the perm you<font color="#E5E5E5"> ate is</font><font color="#CCCCCC"> the</font>

374
00:16:38,990 --> 00:16:43,220
<font color="#E5E5E5">change it and the substitute is map one</font>

375
00:16:41,540 --> 00:16:46,189
symbol input<font color="#E5E5E5"> two different symbol output</font>

376
00:16:43,220 --> 00:16:47,570
<font color="#CCCCCC">okay this leads to an avalanche effect</font>

377
00:16:46,190 --> 00:16:49,490
which is<font color="#E5E5E5"> also important for hashes where</font>

378
00:16:47,570 --> 00:16:53,030
if you change one bit of<font color="#E5E5E5"> the input every</font>

379
00:16:49,490 --> 00:16:53,750
bit of the output changes different blog

380
00:16:53,030 --> 00:16:57,140
modes we're going to

381
00:16:53,750 --> 00:16:58,460
<font color="#E5E5E5">way</font><font color="#CCCCCC"> okay for example counter mode take</font>

382
00:16:57,140 --> 00:17:00,620
some of the input puts it back into the

383
00:16:58,460 --> 00:17:03,170
important<font color="#E5E5E5"> and has a counter on it so it</font>

384
00:17:00,620 --> 00:17:05,780
turns<font color="#CCCCCC"> aes or some other block cipher</font>

385
00:17:03,170 --> 00:17:07,670
into a stream cipher and that once did

386
00:17:05,780 --> 00:17:10,069
<font color="#CCCCCC">you do that it behaves</font><font color="#E5E5E5"> like a stream</font>

387
00:17:07,670 --> 00:17:11,089
cipher then it has the soaring against

388
00:17:10,069 --> 00:17:14,270
this health issues and<font color="#CCCCCC"> things like that</font>

389
00:17:11,089 --> 00:17:17,119
good blocks<font color="#CCCCCC"> loads use an initialization</font>

390
00:17:14,270 --> 00:17:23,240
nectar or not block ciphers to love and

391
00:17:17,119 --> 00:17:24,469
use a s in CBC mode the the of a s ones

392
00:17:23,240 --> 00:17:26,990
that are turned into<font color="#CCCCCC"> streams types are</font>

393
00:17:24,470 --> 00:17:34,790
also<font color="#E5E5E5"> good but there are pluses okay</font>

394
00:17:26,990 --> 00:17:39,020
nobody's going<font color="#CCCCCC"> to laugh don't worry so</font>

395
00:17:34,790 --> 00:17:41,149
this is ECB<font color="#E5E5E5"> versus CBC for that image</font>

396
00:17:39,020 --> 00:17:49,580
anybody want<font color="#E5E5E5"> to want to take</font><font color="#CCCCCC"> a guess</font>

397
00:17:41,150 --> 00:17:55,280
what the issue is with ECB mode you can

398
00:17:49,580 --> 00:17:57,830
<font color="#CCCCCC">still see it so though the white blocks</font>

399
00:17:55,280 --> 00:18:00,560
up in the corner get encrypted to a

400
00:17:57,830 --> 00:18:03,379
particular value<font color="#E5E5E5"> that is glitter</font><font color="#CCCCCC"> Lee</font>

401
00:18:00,560 --> 00:18:05,480
being interpreted still as pixels and

402
00:18:03,380 --> 00:18:07,970
everywhere that it's the same white

403
00:18:05,480 --> 00:18:10,250
pixel value it's the same<font color="#CCCCCC"> kind of ugly</font>

404
00:18:07,970 --> 00:18:12,410
looking black pixel value<font color="#CCCCCC"> outside and</font>

405
00:18:10,250 --> 00:18:14,150
then every other place that's<font color="#E5E5E5"> the same</font>

406
00:18:12,410 --> 00:18:17,030
exact pixel value turns into the same

407
00:18:14,150 --> 00:18:20,090
exact bit value that is then being still

408
00:18:17,030 --> 00:18:22,700
interpreted so you<font color="#CCCCCC"> still see the shape</font>

409
00:18:20,090 --> 00:18:26,840
what may be an<font color="#CCCCCC"> even better</font><font color="#E5E5E5"> example is</font>

410
00:18:22,700 --> 00:18:28,700
this tux linux penguin this<font color="#CCCCCC"> is very very</font>

411
00:18:26,840 --> 00:18:32,240
there's a version of a very famous one

412
00:18:28,700 --> 00:18:34,160
because the using tux the linux mascot

413
00:18:32,240 --> 00:18:36,800
is an example of ECB mode is kind of a

414
00:18:34,160 --> 00:18:37,970
tradition<font color="#CCCCCC"> app but i don't</font><font color="#E5E5E5"> know if you</font>

415
00:18:36,800 --> 00:18:39,980
can<font color="#E5E5E5"> see it we even still see the</font>

416
00:18:37,970 --> 00:18:41,780
individual like chunk of two pixels or

417
00:18:39,980 --> 00:18:46,790
whatever it is it's one<font color="#E5E5E5"> block worth of</font>

418
00:18:41,780 --> 00:18:52,570
data so all right questions on symmetric

419
00:18:46,790 --> 00:18:52,570
crypto Gregory first

420
00:18:56,690 --> 00:19:02,270
so to a security professional ECB is a

421
00:18:59,240 --> 00:19:03,980
joke the problem is that missed when

422
00:19:02,270 --> 00:19:06,440
they made the standard didn't actually

423
00:19:03,980 --> 00:19:08,060
test their block modes so they came up

424
00:19:06,440 --> 00:19:09,440
with like six or eight different block

425
00:19:08,060 --> 00:19:14,419
modes and you only really want to use

426
00:19:09,440 --> 00:19:24,590
<font color="#CCCCCC">one of them most of them are fine ECB is</font>

427
00:19:14,420 --> 00:19:26,810
really not yet so the reason<font color="#E5E5E5"> why I use</font>

428
00:19:24,590 --> 00:19:28,970
images in that example is because the

429
00:19:26,810 --> 00:19:31,220
human<font color="#E5E5E5"> eye can see the issues with ECB</font>

430
00:19:28,970 --> 00:19:33,110
mode the same issue exists no matter

431
00:19:31,220 --> 00:19:34,970
what your data is if it's any kind<font color="#CCCCCC"> of</font>

432
00:19:33,110 --> 00:19:37,969
predictable structured data the

433
00:19:34,970 --> 00:19:39,290
structure will be<font color="#E5E5E5"> preserved at a bit as</font>

434
00:19:37,970 --> 00:19:42,710
a resolution of whatever your block

435
00:19:39,290 --> 00:19:44,629
sizes so the issue exists regardless of

436
00:19:42,710 --> 00:19:45,890
what you're doing<font color="#CCCCCC"> but pictures / bitmaps</font>

437
00:19:44,630 --> 00:20:01,430
particularly are really nice<font color="#E5E5E5"> because you</font>

438
00:19:45,890 --> 00:20:03,050
can see the issue there's a performance

439
00:20:01,430 --> 00:20:04,610
I don't actually<font color="#E5E5E5"> know if there's a big</font>

440
00:20:03,050 --> 00:20:07,010
performance difference I think<font color="#CCCCCC"> strange</font>

441
00:20:04,610 --> 00:20:19,850
<font color="#CCCCCC">diapers maybe slightly softer you know</font>

442
00:20:07,010 --> 00:20:23,150
there seems to be a smiled preference

443
00:20:19,850 --> 00:20:25,070
for using stream ciphers these days as

444
00:20:23,150 --> 00:20:28,970
partially because we'd prefer

445
00:20:25,070 --> 00:20:30,679
authenticated encryption so chacha 20

446
00:20:28,970 --> 00:20:33,980
actually has a message<font color="#E5E5E5"> authentication</font>

447
00:20:30,680 --> 00:20:35,780
code that it uses<font color="#E5E5E5"> asgn uses the gallio's</font>

448
00:20:33,980 --> 00:20:37,790
counter mode message authentication code

449
00:20:35,780 --> 00:20:39,980
all the ones<font color="#E5E5E5"> that they made it where</font>

450
00:20:37,790 --> 00:20:41,510
it's<font color="#E5E5E5"> the authentication the basically</font>

451
00:20:39,980 --> 00:20:44,930
it's a sign hash of the<font color="#E5E5E5"> stuff so you</font>

452
00:20:41,510 --> 00:20:46,190
<font color="#CCCCCC">know that it wasn't tampered with for</font>

453
00:20:44,930 --> 00:20:47,870
the ones that is built in with that high

454
00:20:46,190 --> 00:20:49,430
performance the ones we've done out of

455
00:20:47,870 --> 00:20:51,469
stream ciphers and it's part of why they

456
00:20:49,430 --> 00:20:52,880
prefer them ultimately in terms of

457
00:20:51,470 --> 00:20:54,440
security you<font color="#E5E5E5"> can have a completely</font>

458
00:20:52,880 --> 00:20:56,780
secure block flavor or a completely

459
00:20:54,440 --> 00:20:58,070
secure stream cipher and my

460
00:20:56,780 --> 00:21:00,350
<font color="#E5E5E5">understanding is the biggest impact on</font>

461
00:20:58,070 --> 00:21:02,270
performance barring weird things where

462
00:21:00,350 --> 00:21:04,939
you're<font color="#E5E5E5"> getting your data is what the</font>

463
00:21:02,270 --> 00:21:07,700
algorithm you use is so I'd it's your

464
00:21:04,940 --> 00:21:09,929
question any other questions before<font color="#CCCCCC"> we</font>

465
00:21:07,700 --> 00:21:14,460
move on

466
00:21:09,929 --> 00:21:17,820
<font color="#E5E5E5">okay that was symmetric this is a</font>

467
00:21:14,460 --> 00:21:20,490
symmetric we have two keys per person or

468
00:21:17,820 --> 00:21:22,230
four people talking<font color="#CCCCCC"> right so</font>

469
00:21:20,490 --> 00:21:23,730
requirements given a public key the

470
00:21:22,230 --> 00:21:27,960
attacker must not be able<font color="#E5E5E5"> to find the</font>

471
00:21:23,730 --> 00:21:29,610
private key so I have a public key<font color="#E5E5E5"> I</font>

472
00:21:27,960 --> 00:21:31,080
give it to dr. montante he is a public

473
00:21:29,610 --> 00:21:33,449
hehe gives it to me he's allowed to give

474
00:21:31,080 --> 00:21:36,629
it to all<font color="#CCCCCC"> of you as well it's public but</font>

475
00:21:33,450 --> 00:21:39,240
<font color="#CCCCCC">if Rio evil</font><font color="#E5E5E5"> Rio wants to try to find one</font>

476
00:21:36,629 --> 00:21:42,959
<font color="#E5E5E5">of our private keys he shouldn't</font><font color="#CCCCCC"> be able</font>

477
00:21:39,240 --> 00:21:44,279
<font color="#CCCCCC">to from knowing our public key next</font>

478
00:21:42,960 --> 00:21:45,869
given a cyber attacks an attacker must

479
00:21:44,279 --> 00:21:47,700
not be able to recover the<font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> say</font>

480
00:21:45,869 --> 00:21:50,879
basic encryption if it's encrypted you

481
00:21:47,700 --> 00:21:53,850
can't decrypt it next<font color="#E5E5E5"> given the a</font>

482
00:21:50,879 --> 00:21:55,289
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> and a public key for the</font>

483
00:21:53,850 --> 00:21:58,080
private key that did the encryption you

484
00:21:55,289 --> 00:21:59,879
also can't find the plain text or the

485
00:21:58,080 --> 00:22:01,408
<font color="#CCCCCC">private key right because you're</font><font color="#E5E5E5"> going</font>

486
00:21:59,879 --> 00:22:03,809
<font color="#E5E5E5">to have more information</font><font color="#CCCCCC"> and you have to</font>

487
00:22:01,409 --> 00:22:05,909
worry more about data leakage and again

488
00:22:03,809 --> 00:22:07,080
given the ability of data encrypted by

489
00:22:05,909 --> 00:22:08,639
the private<font color="#CCCCCC"> key of</font><font color="#E5E5E5"> the attacker must not</font>

490
00:22:07,080 --> 00:22:10,049
to be able<font color="#E5E5E5"> to recover the private key</font>

491
00:22:08,639 --> 00:22:12,418
there<font color="#E5E5E5"> are many situations where an</font>

492
00:22:10,049 --> 00:22:14,580
attacker it's not<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the time but live</font>

493
00:22:12,419 --> 00:22:16,679
protocols where an attacker can give you

494
00:22:14,580 --> 00:22:18,869
a<font color="#CCCCCC"> good guy data to have it encrypted and</font>

495
00:22:16,679 --> 00:22:20,309
I can see the output so if that<font color="#E5E5E5"> happens</font>

496
00:22:18,869 --> 00:22:24,330
it's important that they not be able to

497
00:22:20,309 --> 00:22:26,850
use<font color="#CCCCCC"> that to recover the private key okay</font>

498
00:22:24,330 --> 00:22:28,350
so it's back to crypto AKA public key

499
00:22:26,850 --> 00:22:29,969
cryptography because it requires a

500
00:22:28,350 --> 00:22:32,730
public key and a private key it's often

501
00:22:29,970 --> 00:22:36,059
called public key cryptography every

502
00:22:32,730 --> 00:22:39,179
<font color="#E5E5E5">person generates a key pair the public</font>

503
00:22:36,059 --> 00:22:41,220
key encrypt and the private key decrypt

504
00:22:39,179 --> 00:22:43,200
but if you encrypt with the private key

505
00:22:41,220 --> 00:22:45,179
you encrypt or you decrypt with the

506
00:22:43,200 --> 00:22:47,549
public key so we can use this as a

507
00:22:45,179 --> 00:22:49,139
secure messaging protocol right dr.

508
00:22:47,549 --> 00:22:52,230
montante and<font color="#E5E5E5"> I know know each other's</font>

509
00:22:49,139 --> 00:22:54,539
public keys I have a message<font color="#CCCCCC"> I encrypt</font>

510
00:22:52,230 --> 00:22:57,059
it I hand it to dr. montante I also hand

511
00:22:54,539 --> 00:23:00,149
it to Rio Rio doesn't know dr. montante

512
00:22:57,059 --> 00:23:02,970
is private key so he can't decrypt it

513
00:23:00,149 --> 00:23:05,039
dr. montante does so I know the<font color="#CCCCCC"> only</font>

514
00:23:02,970 --> 00:23:09,539
person who can possibly decrypt the

515
00:23:05,039 --> 00:23:11,759
message is the<font color="#E5E5E5"> intended recipient now on</font>

516
00:23:09,539 --> 00:23:14,429
the flip side how does dr. montante know

517
00:23:11,759 --> 00:23:17,820
it was me that<font color="#E5E5E5"> sent him the message well</font>

518
00:23:14,429 --> 00:23:21,090
if<font color="#E5E5E5"> I take a hash of the message and then</font>

519
00:23:17,820 --> 00:23:22,559
I encrypt it with my<font color="#CCCCCC"> private key then my</font>

520
00:23:21,090 --> 00:23:24,029
public key will be able<font color="#E5E5E5"> to decrypt that</font>

521
00:23:22,559 --> 00:23:27,149
but it's<font color="#E5E5E5"> not a secret just</font>

522
00:23:24,029 --> 00:23:30,029
well by doing that I proven I've signed

523
00:23:27,149 --> 00:23:31,799
it in such a way that nobody else could

524
00:23:30,029 --> 00:23:34,409
possibly have tampered with the message

525
00:23:31,799 --> 00:23:37,019
so then dr. montante gets it calculates

526
00:23:34,409 --> 00:23:39,960
pash he decrypts using my public key the

527
00:23:37,019 --> 00:23:53,580
sign<font color="#CCCCCC"> passion bola hash was</font><font color="#E5E5E5"> the same he</font>

528
00:23:39,960 --> 00:24:06,960
knows it was for me for a handshake for

529
00:23:53,580 --> 00:24:09,449
what for Wi-Fi so<font color="#CCCCCC"> I believe like TLS</font>

530
00:24:06,960 --> 00:24:12,450
uses a three-way handshake and it's

531
00:24:09,450 --> 00:24:21,330
doing<font color="#E5E5E5"> this the one</font><font color="#CCCCCC"> that I know</font><font color="#E5E5E5"> of this</font>

532
00:24:12,450 --> 00:24:23,639
for is Wi-Fi 4shared keys no<font color="#E5E5E5"> a little</font>

533
00:24:21,330 --> 00:24:24,928
<font color="#E5E5E5">different but yes there is a back and</font>

534
00:24:23,639 --> 00:24:30,839
forth that goes on and we're going to

535
00:24:24,929 --> 00:24:32,759
talk about that next so<font color="#E5E5E5"> really mentioned</font>

536
00:24:30,839 --> 00:24:34,499
well how do we get keys back and forth

537
00:24:32,759 --> 00:24:36,330
like you know with<font color="#E5E5E5"> a one-time pad or</font>

538
00:24:34,499 --> 00:24:40,049
with something<font color="#E5E5E5"> else well the answer</font><font color="#CCCCCC"> is I</font>

539
00:24:36,330 --> 00:24:42,570
can encrypt a key with dr. Mann tante's

540
00:24:40,049 --> 00:24:44,580
public key and then<font color="#E5E5E5"> I know only he has</font>

541
00:24:42,570 --> 00:24:46,559
that key and<font color="#CCCCCC"> then we now have exchanged</font>

542
00:24:44,580 --> 00:24:47,549
a key and practically if we were

543
00:24:46,559 --> 00:24:49,019
actually going<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> something like</font>

544
00:24:47,549 --> 00:24:50,429
encrypted email that's how we would do

545
00:24:49,019 --> 00:24:52,289
it the body<font color="#E5E5E5"> of the email would be</font>

546
00:24:50,429 --> 00:24:54,330
encrypted with something like AES and I

547
00:24:52,289 --> 00:24:55,830
would give him that AES key using public

548
00:24:54,330 --> 00:24:57,809
key encryption the reason is<font color="#CCCCCC"> because</font>

549
00:24:55,830 --> 00:24:59,580
public key encryption really only works

550
00:24:57,809 --> 00:25:05,249
on messages smaller than the key size

551
00:24:59,580 --> 00:25:06,389
the other so the simple option is to

552
00:25:05,249 --> 00:25:08,039
just use encryption like I<font color="#CCCCCC"> just</font>

553
00:25:06,389 --> 00:25:10,649
described a better thing to do is do

554
00:25:08,039 --> 00:25:12,839
little fancy mathematics where I know

555
00:25:10,649 --> 00:25:14,639
dr. montante is public key and<font color="#E5E5E5"> he knows</font>

556
00:25:12,839 --> 00:25:17,309
my public key and<font color="#CCCCCC"> we can exchange back</font>

557
00:25:14,639 --> 00:25:20,218
and forth a couple of non stal use and

558
00:25:17,309 --> 00:25:23,399
we can actually come to an agreement on

559
00:25:20,219 --> 00:25:25,379
a key and<font color="#E5E5E5"> Rio can watch everything going</font>

560
00:25:23,399 --> 00:25:27,599
back on<font color="#CCCCCC"> the fourth on the network and</font><font color="#E5E5E5"> he</font>

561
00:25:25,379 --> 00:25:29,580
can know both of our public keys and he

562
00:25:27,599 --> 00:25:32,129
still can't<font color="#E5E5E5"> figure out what key we</font>

563
00:25:29,580 --> 00:25:35,309
agreed on and this is based on the same

564
00:25:32,129 --> 00:25:37,520
mathematics as so RSA like the

565
00:25:35,309 --> 00:25:39,800
encryption or in the terms of<font color="#E5E5E5"> a look</font>

566
00:25:37,520 --> 00:25:44,389
curve based<font color="#E5E5E5"> on Sam mathas elliptical</font>

567
00:25:39,800 --> 00:25:46,040
curve other stuff<font color="#E5E5E5"> the this exchange is</font>

568
00:25:44,390 --> 00:25:47,930
called diffie-hellman key exchange or 2p

569
00:25:46,040 --> 00:25:50,750
<font color="#E5E5E5">Hellman key</font><font color="#CCCCCC"> agreements and that's</font><font color="#E5E5E5"> how</font>

570
00:25:47,930 --> 00:25:52,550
practically how two people can exchange

571
00:25:50,750 --> 00:25:54,800
a key every<font color="#E5E5E5"> time you go to a</font><font color="#CCCCCC"> website</font>

572
00:25:52,550 --> 00:25:56,419
there's this whole verification of<font color="#CCCCCC"> the</font>

573
00:25:54,800 --> 00:25:59,360
<font color="#E5E5E5">websites certificate which I'm about to</font>

574
00:25:56,420 --> 00:26:01,850
talk<font color="#CCCCCC"> about and then you've picked a</font>

575
00:25:59,360 --> 00:26:03,800
bikini and<font color="#E5E5E5"> then you do diffie-hellman</font>

576
00:26:01,850 --> 00:26:06,080
some variation of difficult man to

577
00:26:03,800 --> 00:26:07,700
exchange a key and then in within<font color="#E5E5E5"> your</font>

578
00:26:06,080 --> 00:26:12,320
TLS connection and all your data is

579
00:26:07,700 --> 00:26:17,510
encrypted with that symmetric key so

580
00:26:12,320 --> 00:26:18,950
certificate is<font color="#E5E5E5"> okay so dr. montante</font>

581
00:26:17,510 --> 00:26:21,170
wants to know what messages for<font color="#CCCCCC"> me and</font>

582
00:26:18,950 --> 00:26:22,820
he<font color="#CCCCCC"> knows it's from a particular key how</font>

583
00:26:21,170 --> 00:26:25,070
does he know that to my key well

584
00:26:22,820 --> 00:26:27,260
certificates are a public statement of

585
00:26:25,070 --> 00:26:30,350
this is who I am so it's got data about

586
00:26:27,260 --> 00:26:33,680
you practically they have like your

587
00:26:30,350 --> 00:26:36,409
business<font color="#E5E5E5"> your address fully qualified</font>

588
00:26:33,680 --> 00:26:40,970
domain name<font color="#E5E5E5"> and email bunch of stuff</font>

589
00:26:36,410 --> 00:26:43,850
looks which is very silly and then the

590
00:26:40,970 --> 00:26:46,550
public key<font color="#E5E5E5"> and then it's signed so again</font>

591
00:26:43,850 --> 00:26:48,560
we have hash and then encrypted with a

592
00:26:46,550 --> 00:26:50,629
<font color="#E5E5E5">private key of some trusted third party</font>

593
00:26:48,560 --> 00:26:53,659
or some equivalent signature algorithm

594
00:26:50,630 --> 00:26:55,700
so that then I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know who this</font>

595
00:26:53,660 --> 00:26:57,290
<font color="#CCCCCC">person is but I see that they're signed</font>

596
00:26:55,700 --> 00:26:59,120
their certificate is signed by that

597
00:26:57,290 --> 00:27:00,560
person I don't<font color="#CCCCCC"> know who they are but I</font>

598
00:26:59,120 --> 00:27:02,090
see their certificate signed by that

599
00:27:00,560 --> 00:27:04,040
person you can chain this back up until

600
00:27:02,090 --> 00:27:05,360
you find somebody<font color="#E5E5E5"> that I trust if I</font>

601
00:27:04,040 --> 00:27:07,639
don't<font color="#CCCCCC"> find anybody I trust I don't trust</font>

602
00:27:05,360 --> 00:27:09,979
that certificate this is how this is

603
00:27:07,640 --> 00:27:14,270
called public key infrastructure it is a

604
00:27:09,980 --> 00:27:15,950
royal pain to manage record and this<font color="#E5E5E5"> is</font>

605
00:27:14,270 --> 00:27:18,170
how when you go to a website you know

606
00:27:15,950 --> 00:27:21,260
that google com is actually google com

607
00:27:18,170 --> 00:27:22,550
is that you connect your browser grabs a

608
00:27:21,260 --> 00:27:24,770
certificate it looks to that certificate

609
00:27:22,550 --> 00:27:26,180
is signed by and follows the chain up

610
00:27:24,770 --> 00:27:29,690
<font color="#E5E5E5">and then it checks whether or not it</font>

611
00:27:26,180 --> 00:27:31,490
trust the top of that list same thing if

612
00:27:29,690 --> 00:27:32,660
<font color="#E5E5E5">you like your oh you're on Windows</font>

613
00:27:31,490 --> 00:27:34,490
you're going to install something it

614
00:27:32,660 --> 00:27:36,260
says you know from oracle corporation

615
00:27:34,490 --> 00:27:38,150
well the reason it knows it's from

616
00:27:36,260 --> 00:27:41,450
oracle is because of<font color="#CCCCCC"> that binary you're</font>

617
00:27:38,150 --> 00:27:42,920
installing was signed with Oracle's with

618
00:27:41,450 --> 00:27:46,130
a<font color="#E5E5E5"> private key associated with</font><font color="#CCCCCC"> Oracle</font>

619
00:27:42,920 --> 00:27:47,900
certificate you can then verify okay so

620
00:27:46,130 --> 00:27:48,920
algorithms to know and use carefully you

621
00:27:47,900 --> 00:27:51,059
may have noticed there are a couple more

622
00:27:48,920 --> 00:27:52,440
requirements in terms of what

623
00:27:51,059 --> 00:27:55,230
need to<font color="#E5E5E5"> do to be secured that's because</font>

624
00:27:52,440 --> 00:27:57,450
these are more<font color="#E5E5E5"> fragile than symmetric</font>

625
00:27:55,230 --> 00:28:00,960
algorithms so it's<font color="#CCCCCC"> actually easier to</font>

626
00:27:57,450 --> 00:28:03,840
screw up<font color="#CCCCCC"> asymmetric stuff used carefully</font>

627
00:28:00,960 --> 00:28:05,399
RSA is still<font color="#CCCCCC"> okay have to be careful</font>

628
00:28:03,840 --> 00:28:07,168
with<font color="#E5E5E5"> what it's being used for but you</font>

629
00:28:05,399 --> 00:28:09,600
can still use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> okay and productively</font>

630
00:28:07,169 --> 00:28:11,039
diffie-hellman there's a version called

631
00:28:09,600 --> 00:28:13,980
ephemeral diffie-hellman that's<font color="#CCCCCC"> what the</font>

632
00:28:11,039 --> 00:28:15,929
e stands for prefer that one you means

633
00:28:13,980 --> 00:28:17,820
you keeping a key thank you<font color="#E5E5E5"> for like two</font>

634
00:28:15,929 --> 00:28:22,320
minutes something<font color="#E5E5E5"> like that instead of</font>

635
00:28:17,820 --> 00:28:25,408
using<font color="#CCCCCC"> the same to you forever so we have</font>

636
00:28:22,320 --> 00:28:27,418
the<font color="#E5E5E5"> Edwards curve digital signature</font>

637
00:28:25,409 --> 00:28:29,789
algorithm so there's a different one

638
00:28:27,419 --> 00:28:32,369
that's not based on Edwards curves<font color="#E5E5E5"> it's</font>

639
00:28:29,789 --> 00:28:35,999
ecdsa elliptical curb digital signature

640
00:28:32,369 --> 00:28:36,869
algorithm that one's curves are junk you

641
00:28:35,999 --> 00:28:38,070
can't write a constant time

642
00:28:36,869 --> 00:28:40,439
implementation which we're going to talk

643
00:28:38,070 --> 00:28:42,418
about why that matters later Edwards

644
00:28:40,440 --> 00:28:44,970
curve one doesn't<font color="#CCCCCC"> have that issue it's</font>

645
00:28:42,419 --> 00:28:46,409
constant time they also made<font color="#CCCCCC"> it so you</font>

646
00:28:44,970 --> 00:28:47,700
don't<font color="#CCCCCC"> need a nonce to do the signature</font>

647
00:28:46,409 --> 00:28:50,190
because<font color="#E5E5E5"> it's using</font><font color="#CCCCCC"> a hash to generate</font>

648
00:28:47,700 --> 00:28:52,860
the knots value so that's<font color="#E5E5E5"> cool and then</font>

649
00:28:50,190 --> 00:28:54,600
elliptical curve diffie-hellman is the

650
00:28:52,860 --> 00:28:57,149
lipstick which is dip Yellen but based

651
00:28:54,600 --> 00:28:59,248
on an elliptical curves so<font color="#E5E5E5"> RSA is</font>

652
00:28:57,149 --> 00:29:01,469
basically<font color="#CCCCCC"> multiplied as an encryption</font>

653
00:28:59,249 --> 00:29:03,809
function elliptical curves are

654
00:29:01,470 --> 00:29:06,090
multiplied across a weird graph as an

655
00:29:03,809 --> 00:29:07,350
encryption function so that's that's the

656
00:29:06,090 --> 00:29:08,549
difference a lot of people<font color="#CCCCCC"> like</font>

657
00:29:07,350 --> 00:29:10,199
elliptical curves because they're

658
00:29:08,549 --> 00:29:11,970
stronger for the same key size and

659
00:29:10,200 --> 00:29:13,379
they're still fasting<font color="#CCCCCC"> feud stuff but you</font>

660
00:29:11,970 --> 00:29:15,600
can do diffie-hellman using that

661
00:29:13,379 --> 00:29:19,830
mathematics as a basis and you<font color="#E5E5E5"> still</font>

662
00:29:15,600 --> 00:29:34,830
want the ephemeral version so questions

663
00:29:19,830 --> 00:29:36,059
about asymmetric cryptography yeah you

664
00:29:34,830 --> 00:29:38,668
<font color="#E5E5E5">never have to make</font><font color="#CCCCCC"> loo your browser to</font>

665
00:29:36,059 --> 00:29:41,999
<font color="#E5E5E5">use for that for you and the reason for</font>

666
00:29:38,669 --> 00:29:44,909
that<font color="#E5E5E5"> is because bra websites don't</font>

667
00:29:41,999 --> 00:29:46,980
verify users users only need to verify

668
00:29:44,909 --> 00:29:49,110
the website so it doesn't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> matter</font>

669
00:29:46,980 --> 00:29:50,369
what your browser does it can generate a

670
00:29:49,110 --> 00:29:52,590
new one<font color="#E5E5E5"> every day or new whatever</font>

671
00:29:50,369 --> 00:29:53,850
connection or whatever<font color="#E5E5E5"> it wants my guess</font>

672
00:29:52,590 --> 00:29:55,559
is for performance reasons they probably

673
00:29:53,850 --> 00:29:57,928
don't go that far but I don't actually

674
00:29:55,559 --> 00:29:59,610
<font color="#E5E5E5">know but it's because you're only</font>

675
00:29:57,929 --> 00:30:02,540
verifying the website that your<font color="#E5E5E5"> browser</font>

676
00:29:59,610 --> 00:30:12,350
can do more or less whatever<font color="#E5E5E5"> it</font><font color="#CCCCCC"> wants</font>

677
00:30:02,540 --> 00:30:14,870
for performance reasons there's a lot of

678
00:30:12,350 --> 00:30:17,629
cashing that goes on but if it<font color="#E5E5E5"> doesn't</font>

679
00:30:14,870 --> 00:30:20,060
have<font color="#E5E5E5"> the one then yet it will have to go</font>

680
00:30:17,630 --> 00:30:22,310
out and<font color="#CCCCCC"> pull</font><font color="#E5E5E5"> the next one or get it from</font>

681
00:30:20,060 --> 00:30:24,320
the website itself you can<font color="#E5E5E5"> actually have</font>

682
00:30:22,310 --> 00:30:26,179
your website<font color="#E5E5E5"> set up to not only provide</font>

683
00:30:24,320 --> 00:30:27,770
its own certificate but also the limits

684
00:30:26,180 --> 00:30:30,050
find it and potentially the entire chain

685
00:30:27,770 --> 00:30:31,129
so it has<font color="#CCCCCC"> to get it</font><font color="#E5E5E5"> from somewhere and</font>

686
00:30:30,050 --> 00:30:31,940
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> really matter where it gets it</font>

687
00:30:31,130 --> 00:30:35,930
because it's cryptographically

688
00:30:31,940 --> 00:30:44,060
guaranteed whether it's correct<font color="#CCCCCC"> sites</font>

689
00:30:35,930 --> 00:30:45,500
<font color="#CCCCCC">your question other questions I was</font>

690
00:30:44,060 --> 00:30:50,810
<font color="#E5E5E5">expecting lots of questions on a</font>

691
00:30:45,500 --> 00:30:53,990
symmetric Wow hashes know them love them

692
00:30:50,810 --> 00:30:55,399
use them all the time so a hash is an

693
00:30:53,990 --> 00:30:57,770
<font color="#E5E5E5">algorithm that takes a variable sized</font>

694
00:30:55,400 --> 00:31:01,430
input and produces a fixed size output I

695
00:30:57,770 --> 00:31:04,310
can mean I can do a blank cash you can

696
00:31:01,430 --> 00:31:07,010
do a hash of nothing and it will produce

697
00:31:04,310 --> 00:31:09,050
the<font color="#E5E5E5"> hash you can do a hash of a few bits</font>

698
00:31:07,010 --> 00:31:11,150
you<font color="#CCCCCC"> can do a hash of a few bikes you can</font>

699
00:31:09,050 --> 00:31:13,970
do a hash<font color="#E5E5E5"> a few gigs you can do a hash</font>

700
00:31:11,150 --> 00:31:16,010
of a terabyte you do a hash of a

701
00:31:13,970 --> 00:31:17,390
petabyte if the hash output is always

702
00:31:16,010 --> 00:31:20,120
going<font color="#E5E5E5"> to be the same fixed number of</font>

703
00:31:17,390 --> 00:31:22,160
bits out doesn't<font color="#E5E5E5"> matter how much data</font>

704
00:31:20,120 --> 00:31:26,629
you shoved through it the other thing<font color="#CCCCCC"> is</font>

705
00:31:22,160 --> 00:31:29,930
a<font color="#E5E5E5"> 1-bit change in the input will produce</font>

706
00:31:26,630 --> 00:31:32,570
a dramatic change in the output<font color="#CCCCCC"> looks</font>

707
00:31:29,930 --> 00:31:34,940
<font color="#CCCCCC">like same avalanche thing that we talked</font>

708
00:31:32,570 --> 00:31:37,760
about<font color="#E5E5E5"> with block ciphers very very</font>

709
00:31:34,940 --> 00:31:39,380
important hashes<font color="#CCCCCC"> has to be one way had</font>

710
00:31:37,760 --> 00:31:41,030
given an output the attacker must not be

711
00:31:39,380 --> 00:31:44,660
able<font color="#E5E5E5"> to find an input anybody go to the</font>

712
00:31:41,030 --> 00:31:46,280
<font color="#E5E5E5">hash reversal talk yesterday</font><font color="#CCCCCC"> okay one</font>

713
00:31:44,660 --> 00:31:49,160
person he did a really<font color="#CCCCCC"> good job of</font>

714
00:31:46,280 --> 00:31:52,010
explaining hash functions and all that

715
00:31:49,160 --> 00:31:53,300
stuff<font color="#CCCCCC"> so</font><font color="#E5E5E5"> go on iron geek calm and go</font>

716
00:31:52,010 --> 00:31:55,879
watch that talk because it was<font color="#CCCCCC"> awesome</font>

717
00:31:53,300 --> 00:31:57,379
given an input and<font color="#E5E5E5"> output must not do</font>

718
00:31:55,880 --> 00:31:59,000
the<font color="#E5E5E5"> attack must not be able to find a</font>

719
00:31:57,380 --> 00:32:02,270
second input with the same output thanks

720
00:31:59,000 --> 00:32:06,830
certificate right Rio has evil Rio has

721
00:32:02,270 --> 00:32:07,879
my public key and my certificate my

722
00:32:06,830 --> 00:32:10,970
certain areas my public key my

723
00:32:07,880 --> 00:32:13,790
information about me a hash of that and

724
00:32:10,970 --> 00:32:15,170
in the<font color="#E5E5E5"> ashes sign if he can so he knows</font>

725
00:32:13,790 --> 00:32:15,570
the<font color="#E5E5E5"> input</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the output of the hash</font>

726
00:32:15,170 --> 00:32:18,060
from

727
00:32:15,570 --> 00:32:20,520
if he can find a different public key

728
00:32:18,060 --> 00:32:23,040
one that he generates it'll hash to the

729
00:32:20,520 --> 00:32:26,010
same thing he can forge a certificate

730
00:32:23,040 --> 00:32:27,690
<font color="#CCCCCC">that looks real that verifies you do the</font>

731
00:32:26,010 --> 00:32:31,260
signature verification it verifies as

732
00:32:27,690 --> 00:32:33,930
being mine but<font color="#E5E5E5"> actually it's it this is</font>

733
00:32:31,260 --> 00:32:36,330
why getting<font color="#E5E5E5"> away from sha-1 is so</font>

734
00:32:33,930 --> 00:32:38,460
important<font color="#CCCCCC"> because if you're going to</font><font color="#E5E5E5"> a</font>

735
00:32:36,330 --> 00:32:40,980
website shell one collisions means

736
00:32:38,460 --> 00:32:42,750
somebody can manually as well as VPN

737
00:32:40,980 --> 00:32:45,570
connections and everything else<font color="#CCCCCC"> to use</font>

738
00:32:42,750 --> 00:32:47,280
<font color="#CCCCCC">okay so this is</font><font color="#E5E5E5"> called collision</font>

739
00:32:45,570 --> 00:32:48,840
resistance that you can't<font color="#E5E5E5"> find us</font>

740
00:32:47,280 --> 00:32:52,290
another input<font color="#CCCCCC"> that'll have the same</font>

741
00:32:48,840 --> 00:32:56,970
output so hashes know and love Shah

742
00:32:52,290 --> 00:33:00,870
<font color="#E5E5E5">three like two skeins</font><font color="#CCCCCC"> sha256 and shop at</font>

743
00:32:56,970 --> 00:33:03,870
12 these are all<font color="#E5E5E5"> good the figure</font><font color="#CCCCCC"> shows</font>

744
00:33:00,870 --> 00:33:07,469
have been<font color="#E5E5E5"> around for a while they're</font>

745
00:33:03,870 --> 00:33:08,550
still solid shot three like two and sky

746
00:33:07,470 --> 00:33:11,370
and<font color="#CCCCCC"> are all from the Shah three</font>

747
00:33:08,550 --> 00:33:14,700
competition the keck keck is the

748
00:33:11,370 --> 00:33:16,229
algorithm that one and became sha-3 but

749
00:33:14,700 --> 00:33:17,580
the other two finalists were also really

750
00:33:16,230 --> 00:33:19,080
strong and there are a lot of people

751
00:33:17,580 --> 00:33:23,159
<font color="#E5E5E5">that prefer Blake to over show three</font>

752
00:33:19,080 --> 00:33:25,649
hashes to burn and salt<font color="#CCCCCC"> the earth md5</font>

753
00:33:23,160 --> 00:33:27,870
and sha-1 shall what is expensive to

754
00:33:25,650 --> 00:33:29,550
find a collision but governments can do

755
00:33:27,870 --> 00:33:32,550
it companies can probably do it as well

756
00:33:29,550 --> 00:33:33,990
md5 is trivial you can generate a

757
00:33:32,550 --> 00:33:36,899
collision on your laptop of seconds

758
00:33:33,990 --> 00:33:40,770
which means that<font color="#E5E5E5"> for forensics you can't</font>

759
00:33:36,900 --> 00:33:42,570
trust md5 for example that shows

760
00:33:40,770 --> 00:33:44,400
software reference library is a list of

761
00:33:42,570 --> 00:33:45,689
hashes of known<font color="#E5E5E5"> good stuff that you can</font>

762
00:33:44,400 --> 00:33:48,810
ignore in a forensic investigation

763
00:33:45,690 --> 00:33:51,600
pretty sure its distributors md5 they

764
00:33:48,810 --> 00:33:53,580
may have improved that now I could have

765
00:33:51,600 --> 00:33:55,050
a malicious file that I find a collision

766
00:33:53,580 --> 00:33:57,090
for something that's in the NS RL and

767
00:33:55,050 --> 00:33:58,590
then voila it's being emitted from your

768
00:33:57,090 --> 00:34:02,459
forensic investigation because you

769
00:33:58,590 --> 00:34:05,159
trusted empty pot if you absolutely have

770
00:34:02,460 --> 00:34:07,110
to use md5 to compare to somebody else's

771
00:34:05,160 --> 00:34:09,450
md5 hash that's fine just make sure<font color="#CCCCCC"> that</font>

772
00:34:07,110 --> 00:34:14,580
<font color="#E5E5E5">you have some hash it's a</font>

773
00:34:09,449 --> 00:34:16,049
cryptographically secure one<font color="#E5E5E5"> we're also</font>

774
00:34:14,580 --> 00:34:18,299
going to<font color="#E5E5E5"> talk about password hashing I</font>

775
00:34:16,050 --> 00:34:21,960
know we had a password hash reversal

776
00:34:18,300 --> 00:34:24,120
talk yesterday<font color="#E5E5E5"> I've incorporated into my</font>

777
00:34:21,960 --> 00:34:27,510
<font color="#E5E5E5">job so if you're going to store a</font>

778
00:34:24,120 --> 00:34:28,828
password you do want to<font color="#E5E5E5"> hash the</font>

779
00:34:27,510 --> 00:34:31,529
password

780
00:34:28,829 --> 00:34:33,479
so how<font color="#E5E5E5"> this works is I oven I'm a</font>

781
00:34:31,529 --> 00:34:35,518
website in my database I have a hash for

782
00:34:33,478 --> 00:34:37,468
a certain user so many blogs on claiming

783
00:34:35,518 --> 00:34:39,629
<font color="#E5E5E5">to be that user they hand me a string</font>

784
00:34:37,469 --> 00:34:41,039
that's<font color="#E5E5E5"> their password</font><font color="#CCCCCC"> I hash it and</font>

785
00:34:39,629 --> 00:34:42,449
compare the hash the hash is the same

786
00:34:41,039 --> 00:34:47,129
the<font color="#E5E5E5"> string inputs were the same the</font>

787
00:34:42,449 --> 00:34:49,558
person knows the bathroom so what type

788
00:34:47,129 --> 00:34:50,848
of hash do we want<font color="#E5E5E5"> to use well we don't</font>

789
00:34:49,559 --> 00:34:51,839
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to use the</font><font color="#E5E5E5"> same hash as we use for</font>

790
00:34:50,849 --> 00:34:53,940
something<font color="#E5E5E5"> else you need something</font>

791
00:34:51,839 --> 00:34:56,159
specifically designed for passwords or

792
00:34:53,940 --> 00:34:58,380
for he de River a shin that key

793
00:34:56,159 --> 00:35:01,769
derivation<font color="#CCCCCC"> is really</font><font color="#E5E5E5"> syntax to want</font>

794
00:34:58,380 --> 00:35:04,289
something insulted and iterated so

795
00:35:01,769 --> 00:35:06,149
assault<font color="#E5E5E5"> is a value that</font><font color="#CCCCCC"> can be known by</font>

796
00:35:04,289 --> 00:35:08,729
the attacker when they steal the hash

797
00:35:06,150 --> 00:35:10,619
but you don't want them to know before

798
00:35:08,729 --> 00:35:12,209
<font color="#CCCCCC">that and it's stored with the hash in</font>

799
00:35:10,619 --> 00:35:14,819
<font color="#CCCCCC">plaintext is just there and it's a</font>

800
00:35:12,209 --> 00:35:17,399
second<font color="#CCCCCC"> input to the hashing algorithm</font>

801
00:35:14,819 --> 00:35:19,170
that'll change the output think of this

802
00:35:17,400 --> 00:35:20,999
is kind of<font color="#E5E5E5"> like</font><font color="#CCCCCC"> the nonce when we're</font>

803
00:35:19,170 --> 00:35:24,989
doing encryption<font color="#CCCCCC"> eiv</font><font color="#E5E5E5"> something can be</font>

804
00:35:20,999 --> 00:35:26,609
known the goal of assault is to prevent

805
00:35:24,989 --> 00:35:28,499
pre-computation attacks that the

806
00:35:26,609 --> 00:35:31,319
attacker only finds out the salt value

807
00:35:28,499 --> 00:35:33,269
once they've actually stolen the hash so

808
00:35:31,319 --> 00:35:35,130
they can couldn't have done<font color="#CCCCCC"> any work to</font>

809
00:35:33,269 --> 00:35:38,788
speed things up before they steal the

810
00:35:35,130 --> 00:35:40,499
hatch<font color="#CCCCCC"> okay so traditionally this would</font>

811
00:35:38,789 --> 00:35:42,299
be a rainbow table it's an optimized

812
00:35:40,499 --> 00:35:44,519
space optimization on a lookup table

813
00:35:42,299 --> 00:35:47,400
where the attacker just has a list of

814
00:35:44,519 --> 00:35:48,479
fancy list again talk yesterday explain

815
00:35:47,400 --> 00:35:51,779
<font color="#E5E5E5">this much better than I ever could of</font>

816
00:35:48,479 --> 00:35:53,819
what input<font color="#CCCCCC"> maps what output and so they</font>

817
00:35:51,779 --> 00:35:55,619
see the output they<font color="#E5E5E5"> just look it up in</font>

818
00:35:53,819 --> 00:35:57,239
the<font color="#E5E5E5"> dictionary just a dictionary lookup</font>

819
00:35:55,619 --> 00:35:59,549
to crack your password that's a

820
00:35:57,239 --> 00:36:02,069
pre-computation attack to do something

821
00:35:59,549 --> 00:36:03,959
<font color="#E5E5E5">like that against hash that has a salt</font>

822
00:36:02,069 --> 00:36:06,690
it's now exponentially larger because

823
00:36:03,959 --> 00:36:11,848
<font color="#E5E5E5">you have to then calculate every input x</font>

824
00:36:06,690 --> 00:36:14,039
every salt value go talk yesterday the

825
00:36:11,849 --> 00:36:15,779
bloom reversal technique also defeated

826
00:36:14,039 --> 00:36:17,609
will reversals a whole lot faster<font color="#CCCCCC"> than</font>

827
00:36:15,779 --> 00:36:20,549
rainbow tables but it's also

828
00:36:17,609 --> 00:36:22,769
exponentially larger if it's salted and

829
00:36:20,549 --> 00:36:25,019
iterated hatches are slow so when you're

830
00:36:22,769 --> 00:36:28,319
practically because hash functions can't

831
00:36:25,019 --> 00:36:29,729
be reversed you have to guess inputs to

832
00:36:28,319 --> 00:36:31,949
see if the<font color="#CCCCCC"> output is correct as an</font>

833
00:36:29,729 --> 00:36:35,249
attacker that's what you have to do so

834
00:36:31,949 --> 00:36:37,559
the slower the hash<font color="#CCCCCC"> function is the</font>

835
00:36:35,249 --> 00:36:38,968
longer it<font color="#CCCCCC"> takes an attacker you can get</font>

836
00:36:37,559 --> 00:36:40,650
a hash<font color="#CCCCCC"> function you increase the work</font>

837
00:36:38,969 --> 00:36:41,999
factor until it's taking like 15

838
00:36:40,650 --> 00:36:44,279
milliseconds

839
00:36:41,999 --> 00:36:49,019
that is<font color="#E5E5E5"> going to take</font><font color="#CCCCCC"> the attacker for</font>

840
00:36:44,279 --> 00:36:52,139
ever so next which what algorithms you

841
00:36:49,019 --> 00:36:54,598
want to use argon<font color="#E5E5E5"> 2's scripts and bcrypt</font>

842
00:36:52,139 --> 00:36:56,429
in that order so what<font color="#CCCCCC"> are the issues</font>

843
00:36:54,599 --> 00:36:58,169
here is that the attackers generally

844
00:36:56,429 --> 00:37:00,839
have better nicer more specialized

845
00:36:58,169 --> 00:37:02,669
hardware than the good guys do great one

846
00:37:00,839 --> 00:37:04,828
is GPUs right if you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do</font>

847
00:37:02,669 --> 00:37:08,519
Bitcoin mining is basically<font color="#E5E5E5"> this type of</font>

848
00:37:04,829 --> 00:37:11,639
operation hash you know<font color="#E5E5E5"> password</font>

849
00:37:08,519 --> 00:37:13,049
cracking you<font color="#E5E5E5"> can use a GPU that means</font>

850
00:37:11,639 --> 00:37:15,629
the attacker is really cracking a lot

851
00:37:13,049 --> 00:37:17,129
faster<font color="#CCCCCC"> than you're using it so something</font>

852
00:37:15,629 --> 00:37:19,618
that will crush your website the

853
00:37:17,129 --> 00:37:21,808
attacker can play strip you want to even

854
00:37:19,619 --> 00:37:23,759
that imbalance between attacker and

855
00:37:21,809 --> 00:37:25,709
defender and you do that by choosing a

856
00:37:23,759 --> 00:37:27,989
hash function a password hashing

857
00:37:25,709 --> 00:37:30,509
algorithm that is<font color="#CCCCCC"> also hard for</font>

858
00:37:27,989 --> 00:37:32,669
attackers for example decrypt doesn't

859
00:37:30,509 --> 00:37:34,799
run very fast on GPUs so even though you

860
00:37:32,669 --> 00:37:36,299
can paralyze it on the GPU it's still

861
00:37:34,799 --> 00:37:38,639
running so slow that you would be better

862
00:37:36,299 --> 00:37:43,229
off with cpu as opposed to something

863
00:37:38,639 --> 00:37:46,979
like<font color="#CCCCCC"> sha-256 cribs or pbk day of two</font>

864
00:37:43,229 --> 00:37:51,118
that runs like 100 times faster on a GPU

865
00:37:46,979 --> 00:37:54,419
than it does on a cpu all right<font color="#E5E5E5"> argon to</font>

866
00:37:51,119 --> 00:37:56,969
an<font color="#E5E5E5"> S crypt gain this equalizing force by</font>

867
00:37:54,419 --> 00:37:58,348
being memory hard there's a time memory

868
00:37:56,969 --> 00:38:00,479
trade-off the more memory attacker

869
00:37:58,349 --> 00:38:01,949
throws at it the faster it runs if your

870
00:38:00,479 --> 00:38:04,408
memory constraint is going to run<font color="#E5E5E5"> really</font>

871
00:38:01,949 --> 00:38:06,689
slow this means that even<font color="#E5E5E5"> if an attacker</font>

872
00:38:04,409 --> 00:38:09,539
builds like a super customize a sick or

873
00:38:06,689 --> 00:38:12,449
<font color="#CCCCCC">fpga board that that board all it does</font>

874
00:38:09,539 --> 00:38:13,709
is calculate that hash they're still

875
00:38:12,449 --> 00:38:16,499
going to have to stick a big Ram<font color="#E5E5E5"> notch</font>

876
00:38:13,709 --> 00:38:17,879
<font color="#CCCCCC">upon it and</font><font color="#E5E5E5"> RAM is expensive so this is</font>

877
00:38:16,499 --> 00:38:19,138
<font color="#E5E5E5">going to drive up the price is going</font><font color="#CCCCCC"> to</font>

878
00:38:17,879 --> 00:38:22,078
keep things equal between a tachometer

879
00:38:19,139 --> 00:38:23,369
if you have to be standardized you have

880
00:38:22,079 --> 00:38:25,199
to use something in this standard use

881
00:38:23,369 --> 00:38:27,869
pbk<font color="#E5E5E5"> df2 but turn on the pepper feature</font>

882
00:38:25,199 --> 00:38:29,909
<font color="#E5E5E5">TB heyday of two as i mentioned</font>

883
00:38:27,869 --> 00:38:31,559
accelerates on GPU and everything else

884
00:38:29,909 --> 00:38:33,929
it doesn't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> this equalizing factor</font>

885
00:38:31,559 --> 00:38:37,229
which<font color="#CCCCCC"> is why you should exceed this</font>

886
00:38:33,929 --> 00:38:38,819
standard and use something else but if

887
00:38:37,229 --> 00:38:40,348
you have to be standardized<font color="#CCCCCC"> USP pKa</font><font color="#E5E5E5"> of</font>

888
00:38:38,819 --> 00:38:42,299
<font color="#CCCCCC">you and then use the pepper feature the</font>

889
00:38:40,349 --> 00:38:44,369
pepper feature is actually an encryption

890
00:38:42,299 --> 00:38:46,709
key that encrypts the passwords as well

891
00:38:44,369 --> 00:38:48,329
so that<font color="#E5E5E5"> and then you store it someplace</font>

892
00:38:46,709 --> 00:38:49,828
<font color="#E5E5E5">else other than when your passwords are</font>

893
00:38:48,329 --> 00:38:52,349
so then you've increased the attackers

894
00:38:49,829 --> 00:38:53,579
work this isn't foolproof because of the

895
00:38:52,349 --> 00:38:55,380
attacker is completely in<font color="#CCCCCC"> your system</font>

896
00:38:53,579 --> 00:38:58,500
they can steal that as well

897
00:38:55,380 --> 00:39:01,170
doing<font color="#E5E5E5"> something that snow protects you</font>

898
00:38:58,500 --> 00:39:04,079
no matter what the attack does things

899
00:39:01,170 --> 00:39:06,180
not to do don't store the passwords in

900
00:39:04,079 --> 00:39:10,589
plain text hopefully this crowd that

901
00:39:06,180 --> 00:39:12,299
makes intuitive sense<font color="#CCCCCC"> to don't</font><font color="#E5E5E5"> don't</font>

902
00:39:10,589 --> 00:39:15,029
encrypt them being having having<font color="#E5E5E5"> to be</font>

903
00:39:12,299 --> 00:39:16,380
reversible<font color="#E5E5E5"> is bad particular because</font>

904
00:39:15,029 --> 00:39:18,029
<font color="#E5E5E5">you're gonna have to have the key around</font>

905
00:39:16,380 --> 00:39:21,029
someplace to then be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> check</font>

906
00:39:18,029 --> 00:39:22,049
candidate passwords you're comparing so

907
00:39:21,029 --> 00:39:24,480
that's<font color="#E5E5E5"> not what we want we want the</font>

908
00:39:22,049 --> 00:39:27,450
one-way function of the hash that's not

909
00:39:24,480 --> 00:39:29,130
reversible and<font color="#E5E5E5"> then don't swim in a</font>

910
00:39:27,450 --> 00:39:31,710
straight md5 or straight anything else

911
00:39:29,130 --> 00:39:33,000
it needs<font color="#E5E5E5"> to be salted iterated otherwise</font>

912
00:39:31,710 --> 00:39:34,529
rainbow tables and<font color="#CCCCCC"> the really crazy</font>

913
00:39:33,000 --> 00:39:35,910
stuff that<font color="#E5E5E5"> the noblest guys we're</font>

914
00:39:34,529 --> 00:39:37,859
talking<font color="#E5E5E5"> about yesterday will work and</font>

915
00:39:35,910 --> 00:39:42,990
you can crack like<font color="#E5E5E5"> really crazy</font>

916
00:39:37,859 --> 00:39:45,210
passwords in like 15 minutes all right

917
00:39:42,990 --> 00:39:48,109
questions about hashing and password

918
00:39:45,210 --> 00:39:48,109
storage in<font color="#E5E5E5"> the back</font>

919
00:39:55,510 --> 00:40:00,730
yeah you can think<font color="#E5E5E5"> of them as being the</font>

920
00:39:57,610 --> 00:40:02,440
same thing it's the exact same idea in

921
00:40:00,730 --> 00:40:04,840
there by having something that's going

922
00:40:02,440 --> 00:40:07,660
to<font color="#E5E5E5"> be different for every person were</font>

923
00:40:04,840 --> 00:40:10,810
you know adding uniqueness so another

924
00:40:07,660 --> 00:40:13,149
issue if you<font color="#E5E5E5"> don't have a salt if both i</font>

925
00:40:10,810 --> 00:40:14,860
and<font color="#E5E5E5"> rio have the same password</font><font color="#CCCCCC"> we're</font>

926
00:40:13,150 --> 00:40:16,360
going to have the same<font color="#E5E5E5"> salt it'll</font><font color="#CCCCCC"> save</font>

927
00:40:14,860 --> 00:40:18,130
so many time ago these two people use

928
00:40:16,360 --> 00:40:19,330
the same password if<font color="#E5E5E5"> you have the salt</font>

929
00:40:18,130 --> 00:40:27,820
is different and it prevents

930
00:40:19,330 --> 00:40:33,700
pre-computation thank you for next isn't

931
00:40:27,820 --> 00:40:35,320
isn't that what's used in decrypt we'll

932
00:40:33,700 --> 00:40:36,850
have<font color="#E5E5E5"> to double check that but</font><font color="#CCCCCC"> I believe</font>

933
00:40:35,320 --> 00:40:38,740
<font color="#CCCCCC">that the the magic the special sauce</font>

934
00:40:36,850 --> 00:40:41,950
that makes decrypt work is that<font color="#CCCCCC"> it has</font>

935
00:40:38,740 --> 00:40:43,689
low fishes really expensive key set up

936
00:40:41,950 --> 00:40:50,609
step and that's the<font color="#E5E5E5"> part that's really</font>

937
00:40:43,690 --> 00:40:50,610
slow on GPU so we can<font color="#E5E5E5"> double check that</font>

938
00:41:01,420 --> 00:41:04,750
on how fast you want to crack it

939
00:41:02,530 --> 00:41:06,490
practically it still runs fairly fast on

940
00:41:04,750 --> 00:41:07,809
a GPU with a decent<font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of memory the</font>

941
00:41:06,490 --> 00:41:10,660
thing is it's a time memory trade-off

942
00:41:07,809 --> 00:41:13,089
the more RAM you give the algorithm the

943
00:41:10,660 --> 00:41:16,359
faster you can get it to run the less

944
00:41:13,089 --> 00:41:17,770
Ram you have the slower it runs so it's

945
00:41:16,359 --> 00:41:19,660
<font color="#E5E5E5">not like EU you need a certain amount</font>

946
00:41:17,770 --> 00:41:21,190
<font color="#CCCCCC">its leads to trade off the more you give</font>

947
00:41:19,660 --> 00:41:35,230
it the faster you can crack it that make

948
00:41:21,190 --> 00:41:37,089
<font color="#E5E5E5">sense what one terabyte of memory is</font>

949
00:41:35,230 --> 00:41:39,910
going to be oodles and oodles and oodles

950
00:41:37,089 --> 00:41:41,470
of money like Ram RAM gets exponentially

951
00:41:39,910 --> 00:41:42,520
expensive the more you have so if you're

952
00:41:41,470 --> 00:41:43,629
going<font color="#E5E5E5"> to try to crack a bunch of these</font>

953
00:41:42,520 --> 00:41:53,650
<font color="#E5E5E5">things it's going to be very</font><font color="#CCCCCC"> very</font>

954
00:41:43,630 --> 00:41:55,630
expensive no no I can't even<font color="#E5E5E5"> imagine</font>

955
00:41:53,650 --> 00:41:58,089
that the other cool<font color="#CCCCCC"> thing about like</font>

956
00:41:55,630 --> 00:41:59,950
argon 2 and s script is that they<font color="#CCCCCC"> are</font>

957
00:41:58,089 --> 00:42:01,509
also intended to be<font color="#E5E5E5"> parallelized so you</font>

958
00:41:59,950 --> 00:42:03,009
actually force the attacker to use a

959
00:42:01,510 --> 00:42:04,750
certain<font color="#CCCCCC"> number of threads to efficiently</font>

960
00:42:03,010 --> 00:42:09,579
calculate your stuff so if you're on

961
00:42:04,750 --> 00:42:11,079
like a 16 thread Xeon you optimize it

962
00:42:09,579 --> 00:42:12,400
for that number and then that's going<font color="#E5E5E5"> to</font>

963
00:42:11,079 --> 00:42:14,859
eat up that many channels in the

964
00:42:12,400 --> 00:42:27,089
attacker tacker system we get in the

965
00:42:14,859 --> 00:42:30,210
back no we

966
00:42:27,089 --> 00:42:32,819
have shall run<font color="#CCCCCC"> chawan be gone now if not</font>

967
00:42:30,210 --> 00:42:35,249
sooner if not a few years ago so the

968
00:42:32,819 --> 00:42:36,808
research<font color="#E5E5E5"> paper that Google took and ran</font>

969
00:42:35,249 --> 00:42:38,459
with I forget here they were<font color="#E5E5E5"> doing the</font>

970
00:42:36,809 --> 00:42:40,289
research side by side with it's been

971
00:42:38,460 --> 00:42:42,630
known for years that you will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

972
00:42:40,289 --> 00:42:45,269
<font color="#E5E5E5">find collisions in sha-1 it's just that</font>

973
00:42:42,630 --> 00:42:47,849
<font color="#CCCCCC">nobody</font><font color="#E5E5E5"> had proven it and to put the nail</font>

974
00:42:45,269 --> 00:42:49,558
in<font color="#CCCCCC"> shaa ones coffin</font><font color="#E5E5E5"> Google actually came</font>

975
00:42:47,849 --> 00:42:51,660
out that got the<font color="#CCCCCC"> supercomputer they did</font>

976
00:42:49,559 --> 00:42:54,660
it and they calculated a sha-1 collision

977
00:42:51,660 --> 00:42:56,098
<font color="#E5E5E5">2020s too late today is too late we</font>

978
00:42:54,660 --> 00:43:00,269
needed to have this stuff gone years ago

979
00:42:56,099 --> 00:43:03,420
it's actually<font color="#CCCCCC"> very likely that china has</font>

980
00:43:00,269 --> 00:43:04,979
<font color="#CCCCCC">been intercepting VPN traffic by forging</font>

981
00:43:03,420 --> 00:43:07,799
certificates which either means they

982
00:43:04,979 --> 00:43:09,419
broke our essay or they broke sha<font color="#E5E5E5"> wan so</font>

983
00:43:07,799 --> 00:43:20,519
this<font color="#E5E5E5"> is an issue and it needed to have</font>

984
00:43:09,420 --> 00:43:23,279
installed a long time ago so you stored

985
00:43:20,519 --> 00:43:24,808
in the database with the<font color="#E5E5E5"> password so</font>

986
00:43:23,279 --> 00:43:27,059
window when a person creates a user

987
00:43:24,809 --> 00:43:28,680
account you randomly<font color="#E5E5E5"> generate them</font>

988
00:43:27,059 --> 00:43:30,719
assault preferably through a good source

989
00:43:28,680 --> 00:43:32,969
of randomness which<font color="#E5E5E5"> I might be the next</font>

990
00:43:30,719 --> 00:43:34,469
thing we talked about and then you just

991
00:43:32,969 --> 00:43:37,650
get stored in the database if you look

992
00:43:34,469 --> 00:43:39,390
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the X shadow file on Linux you're</font>

993
00:43:37,650 --> 00:43:42,150
actually going<font color="#E5E5E5"> to see a little number</font>

994
00:43:39,390 --> 00:43:43,799
that tells you hey this<font color="#E5E5E5"> is what version</font>

995
00:43:42,150 --> 00:43:45,839
of hashing algorithm we have you're

996
00:43:43,799 --> 00:43:48,599
going to see a salt value a separator

997
00:43:45,839 --> 00:43:50,308
and then the hash right that's<font color="#CCCCCC"> exactly</font>

998
00:43:48,599 --> 00:43:51,930
how you'd sort in a database for users

999
00:43:50,309 --> 00:43:53,789
logging in or<font color="#CCCCCC"> anything else you just</font>

1000
00:43:51,930 --> 00:44:00,749
<font color="#E5E5E5">generate the salt and you store it with</font>

1001
00:43:53,789 --> 00:44:02,670
their password that<font color="#E5E5E5"> makes sense right so</font>

1002
00:44:00,749 --> 00:44:05,160
the whole point is that<font color="#CCCCCC"> you want to</font>

1003
00:44:02,670 --> 00:44:09,539
<font color="#E5E5E5">prevent pre-computation username is</font>

1004
00:44:05,160 --> 00:44:11,339
publicly known long before that so there

1005
00:44:09,539 --> 00:44:13,349
are systems that have done that but it's

1006
00:44:11,339 --> 00:44:16,680
<font color="#E5E5E5">not a good idea it's much better to</font>

1007
00:44:13,349 --> 00:44:20,609
choose it'd be random in particular

1008
00:44:16,680 --> 00:44:22,440
device vendors also did that for like

1009
00:44:20,609 --> 00:44:24,630
Wi-Fi and other things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that for</font>

1010
00:44:22,440 --> 00:44:26,999
<font color="#CCCCCC">theirs where it was the vendor name that</font>

1011
00:44:24,630 --> 00:44:28,769
was the salt<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> really bad</font>

1012
00:44:26,999 --> 00:44:29,999
which is why on a lot of like routers

1013
00:44:28,769 --> 00:44:31,828
and stuff you<font color="#E5E5E5"> like to see vendor name</font>

1014
00:44:29,999 --> 00:44:33,839
dash something something something godly

1015
00:44:31,829 --> 00:44:35,099
cook because they're still using it<font color="#E5E5E5"> as</font>

1016
00:44:33,839 --> 00:44:37,590
the salt but now they've changed it so

1017
00:44:35,099 --> 00:44:53,370
their name is different Kirkuk

1018
00:44:37,590 --> 00:44:56,040
I have no<font color="#E5E5E5"> idea so it's been known for</font>

1019
00:44:53,370 --> 00:44:58,950
quite a few years the sha-1 was having

1020
00:44:56,040 --> 00:45:00,450
problems<font color="#E5E5E5"> and that's why they put up</font><font color="#CCCCCC"> shop</font>

1021
00:44:58,950 --> 00:45:01,859
<font color="#CCCCCC">3 when they started the shell three</font>

1022
00:45:00,450 --> 00:45:04,560
competition because they thought that

1023
00:45:01,860 --> 00:45:06,630
shot two would be<font color="#E5E5E5"> broken as well but as</font>

1024
00:45:04,560 --> 00:45:09,810
far as I know nobody's found any any

1025
00:45:06,630 --> 00:45:10,920
like cracks in sha2 that are<font color="#E5E5E5"> going to</font>

1026
00:45:09,810 --> 00:45:13,259
<font color="#E5E5E5">make it</font><font color="#CCCCCC"> look like it's going to</font><font color="#E5E5E5"> be</font>

1027
00:45:10,920 --> 00:45:15,360
<font color="#CCCCCC">broken</font><font color="#E5E5E5"> in a few years sha1 we knew it</font>

1028
00:45:13,260 --> 00:45:16,500
was going to be<font color="#CCCCCC"> broken shot to it's not</font>

1029
00:45:15,360 --> 00:45:19,560
looking like it's going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> broken</font>

1030
00:45:16,500 --> 00:45:21,360
quickly so there's I<font color="#CCCCCC"> don't have data to</font>

1031
00:45:19,560 --> 00:45:36,810
guess<font color="#E5E5E5"> probably not in the next few years</font>

1032
00:45:21,360 --> 00:45:38,490
right

1033
00:45:36,810 --> 00:45:40,049
so collision resistance is not a

1034
00:45:38,490 --> 00:45:42,029
requirement of a password hashing

1035
00:45:40,050 --> 00:45:44,730
function you don't care whether or not

1036
00:45:42,030 --> 00:45:46,800
there are collisions you care about that

1037
00:45:44,730 --> 00:45:52,080
for certificates and<font color="#CCCCCC"> file verification</font>

1038
00:45:46,800 --> 00:45:55,590
so you can have a super crazy you know

1039
00:45:52,080 --> 00:45:58,049
sháá 2048 that's based on Shah three

1040
00:45:55,590 --> 00:45:59,760
and it's super powerful it's still not a

1041
00:45:58,050 --> 00:46:01,890
good way to store a password because

1042
00:45:59,760 --> 00:46:04,140
it's not<font color="#E5E5E5"> salted and it's not iterated</font>

1043
00:46:01,890 --> 00:46:07,470
and it will<font color="#E5E5E5"> accelerate really fast on a</font>

1044
00:46:04,140 --> 00:46:08,879
GPU that make sense so you actually want

1045
00:46:07,470 --> 00:46:09,839
to<font color="#CCCCCC"> use a goal whole different set of</font>

1046
00:46:08,880 --> 00:46:10,800
requirements and<font color="#CCCCCC"> everything's you're</font>

1047
00:46:09,840 --> 00:46:13,140
looking for when you're storing a

1048
00:46:10,800 --> 00:46:16,220
password compared to comparing two files

1049
00:46:13,140 --> 00:46:16,220
to prove through the same

1050
00:46:30,410 --> 00:46:35,899
you can still you can still run

1051
00:46:31,490 --> 00:46:37,250
paralyzes very very well on a GPU now

1052
00:46:35,900 --> 00:46:39,589
you're not using anywhere near enough

1053
00:46:37,250 --> 00:46:43,670
memory you want to use a few Meg's /

1054
00:46:39,589 --> 00:46:45,890
require at least a couple Meg's / / hash

1055
00:46:43,670 --> 00:46:47,059
when you're doing that calculation so

1056
00:46:45,890 --> 00:46:51,828
that's what<font color="#E5E5E5"> you can do with that script</font>

1057
00:46:47,059 --> 00:46:57,920
in argon too so accept any other

1058
00:46:51,829 --> 00:46:58,970
questions before<font color="#CCCCCC"> I move on okay and I</font>

1059
00:46:57,920 --> 00:47:01,280
was right<font color="#E5E5E5"> to the random number</font>

1060
00:46:58,970 --> 00:47:02,509
<font color="#E5E5E5">generators our nags so the requirements</font>

1061
00:47:01,280 --> 00:47:04,579
for a cryptographically secure

1062
00:47:02,510 --> 00:47:06,140
pseudo-random generator every

1063
00:47:04,579 --> 00:47:08,329
programming language out there has some

1064
00:47:06,140 --> 00:47:10,670
kind of ran function or a random object

1065
00:47:08,329 --> 00:47:12,470
that<font color="#E5E5E5"> will give you a random numbers they</font>

1066
00:47:10,670 --> 00:47:14,869
are not cryptographically secure in fact

1067
00:47:12,470 --> 00:47:21,140
if<font color="#CCCCCC"> your do have any red team people yeah</font>

1068
00:47:14,869 --> 00:47:23,539
that's depressing so do<font color="#E5E5E5"> we have any</font>

1069
00:47:21,140 --> 00:47:26,750
<font color="#E5E5E5">other blue team people in you okay there</font>

1070
00:47:23,539 --> 00:47:29,990
we<font color="#CCCCCC"> go so if you're</font><font color="#E5E5E5"> saying generating a</font>

1071
00:47:26,750 --> 00:47:32,210
user token or a session cookie or a

1072
00:47:29,990 --> 00:47:34,609
password reset code or<font color="#CCCCCC"> anything else</font>

1073
00:47:32,210 --> 00:47:38,299
like that using an off-the-shelf ran

1074
00:47:34,609 --> 00:47:41,538
function from PHP JavaScript Java sea's

1075
00:47:38,299 --> 00:47:43,069
<font color="#CCCCCC">people us whatever by seeing one maybe</font>

1076
00:47:41,539 --> 00:47:44,690
two of those outputs an attacker can

1077
00:47:43,069 --> 00:47:46,130
recover the internal state of student

1078
00:47:44,690 --> 00:47:48,410
random number generator and figure out

1079
00:47:46,130 --> 00:47:49,579
every number it will ever generate shoes

1080
00:47:48,410 --> 00:47:52,910
I can<font color="#E5E5E5"> figure out</font><font color="#CCCCCC"> the next</font><font color="#E5E5E5"> one that's</font>

1081
00:47:49,579 --> 00:47:53,930
going<font color="#E5E5E5"> to be generated</font><font color="#CCCCCC"> okay I've</font><font color="#E5E5E5"> seen</font>

1082
00:47:52,910 --> 00:47:56,480
demonstrations where people actually

1083
00:47:53,930 --> 00:47:58,970
reset their own password find that and

1084
00:47:56,480 --> 00:48:00,799
then reset somebody else's<font color="#E5E5E5"> password they</font>

1085
00:47:58,970 --> 00:48:04,759
don't have the<font color="#CCCCCC"> email for but then they</font>

1086
00:48:00,799 --> 00:48:06,380
know what the code is going to be so you

1087
00:48:04,760 --> 00:48:08,059
don't want to use a regular

1088
00:48:06,380 --> 00:48:10,880
pseudo-random number generator you want

1089
00:48:08,059 --> 00:48:11,900
to use a cryptographically secure one so

1090
00:48:10,880 --> 00:48:13,099
the requirements given the output the

1091
00:48:11,900 --> 00:48:14,990
attacker must not be able<font color="#E5E5E5"> to predict</font>

1092
00:48:13,099 --> 00:48:18,440
this see this seed value is just like a

1093
00:48:14,990 --> 00:48:19,490
key<font color="#CCCCCC"> okay it has to be a secret the</font>

1094
00:48:18,440 --> 00:48:21,319
attacker knows<font color="#CCCCCC"> that they can generate</font>

1095
00:48:19,490 --> 00:48:23,149
the entire string and then two then

1096
00:48:21,319 --> 00:48:24,470
given the output the attacker must not

1097
00:48:23,150 --> 00:48:25,849
be able to<font color="#E5E5E5"> figure out the next thing so</font>

1098
00:48:24,470 --> 00:48:27,890
the reason I<font color="#CCCCCC"> just told you as well is</font>

1099
00:48:25,849 --> 00:48:30,289
not<font color="#E5E5E5"> the previous things so if we do</font>

1100
00:48:27,890 --> 00:48:31,430
<font color="#CCCCCC">something like generate a nonce value</font>

1101
00:48:30,289 --> 00:48:32,990
that's going to be publicly known and

1102
00:48:31,430 --> 00:48:35,240
then we generate a key that's going to

1103
00:48:32,990 --> 00:48:36,558
be publicly known or that it has to be a

1104
00:48:35,240 --> 00:48:37,759
secret it's really really importantly

1105
00:48:36,559 --> 00:48:39,470
attack or not be able to figure<font color="#E5E5E5"> out what</font>

1106
00:48:37,760 --> 00:48:42,650
the next<font color="#E5E5E5"> thing to be generated will be</font>

1107
00:48:39,470 --> 00:48:43,520
or vice versa so these are actually

1108
00:48:42,650 --> 00:48:45,680
really<font color="#E5E5E5"> easy to build</font>

1109
00:48:43,520 --> 00:48:47,870
if you have a secure hash function you

1110
00:48:45,680 --> 00:48:49,370
just need a<font color="#CCCCCC"> seed and a counter and then</font>

1111
00:48:47,870 --> 00:48:50,509
that counter is a number used once never

1112
00:48:49,370 --> 00:48:51,920
<font color="#E5E5E5">going to be repeated which means you're</font>

1113
00:48:50,510 --> 00:48:55,610
<font color="#E5E5E5">going have unique values output from the</font>

1114
00:48:51,920 --> 00:48:57,380
hash which really easy most things<font color="#CCCCCC"> that</font>

1115
00:48:55,610 --> 00:48:58,940
do hash-based pseudo-random number

1116
00:48:57,380 --> 00:49:00,500
generators are shoving way more data

1117
00:48:58,940 --> 00:49:02,960
into them because<font color="#E5E5E5"> they're also using as</font>

1118
00:49:00,500 --> 00:49:04,970
an entropy collector given a secure

1119
00:49:02,960 --> 00:49:06,590
stream cipher you can make a PNG out of

1120
00:49:04,970 --> 00:49:09,109
it by just having an encrypted zeros<font color="#E5E5E5"> I</font>

1121
00:49:06,590 --> 00:49:10,730
mentioned<font color="#E5E5E5"> before that logically they are</font>

1122
00:49:09,110 --> 00:49:12,500
a pseudo-random number generator if it's

1123
00:49:10,730 --> 00:49:14,060
secure as a stream cipher it's equally

1124
00:49:12,500 --> 00:49:17,570
secures<font color="#CCCCCC"> a pseudo-random number generator</font>

1125
00:49:14,060 --> 00:49:19,279
and vice versa practically most

1126
00:49:17,570 --> 00:49:20,510
cryptographically secure random number

1127
00:49:19,280 --> 00:49:22,520
generators are made out of stream

1128
00:49:20,510 --> 00:49:25,340
ciphers either<font color="#CCCCCC"> chacha 20 or a s and</font>

1129
00:49:22,520 --> 00:49:27,080
counter mode which brings us to give it

1130
00:49:25,340 --> 00:49:29,300
a secure block cipher you can run it in

1131
00:49:27,080 --> 00:49:30,680
a block mode that turns it into a stream

1132
00:49:29,300 --> 00:49:32,120
cipher and voila you have a stream

1133
00:49:30,680 --> 00:49:34,549
cipher encrypt<font color="#E5E5E5"> Algiers you've got random</font>

1134
00:49:32,120 --> 00:49:37,370
numbers so<font color="#CCCCCC"> if these are easy to build</font>

1135
00:49:34,550 --> 00:49:39,290
how do they fail so I mentioned<font color="#CCCCCC"> before</font>

1136
00:49:37,370 --> 00:49:41,630
number one reason people don't use them

1137
00:49:39,290 --> 00:49:44,150
all right there in<font color="#E5E5E5"> their PHP app and</font>

1138
00:49:41,630 --> 00:49:45,950
there's like you know land same thing

1139
00:49:44,150 --> 00:49:49,820
with see same thing with everything else

1140
00:49:45,950 --> 00:49:52,609
you<font color="#CCCCCC"> don't use it that problem the other</font>

1141
00:49:49,820 --> 00:49:55,340
one is you need entropy in that seat ok

1142
00:49:52,610 --> 00:49:56,690
so we're cheating here we're not

1143
00:49:55,340 --> 00:50:00,830
actually generating I'm going to output

1144
00:49:56,690 --> 00:50:02,420
you know a 256-bit key and I'm then I'm

1145
00:50:00,830 --> 00:50:03,740
going<font color="#E5E5E5"> to generate</font><font color="#CCCCCC"> ten more of them or</font>

1146
00:50:02,420 --> 00:50:05,990
100 more of<font color="#E5E5E5"> them where I'm going to</font><font color="#CCCCCC"> be</font>

1147
00:50:03,740 --> 00:50:07,490
<font color="#E5E5E5">generating random naw nonces for</font>

1148
00:50:05,990 --> 00:50:10,879
hundreds of connections on my system

1149
00:50:07,490 --> 00:50:13,729
over the next couple of days uh I don't

1150
00:50:10,880 --> 00:50:16,700
have you know a couple<font color="#E5E5E5"> gigs of random</font>

1151
00:50:13,730 --> 00:50:19,040
data to pull those out<font color="#E5E5E5"> of we're cheating</font>

1152
00:50:16,700 --> 00:50:21,379
all we have is<font color="#E5E5E5"> a short little seed which</font>

1153
00:50:19,040 --> 00:50:22,940
means that to take that seed and expand

1154
00:50:21,380 --> 00:50:24,860
it to something<font color="#E5E5E5"> big you</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to make</font>

1155
00:50:22,940 --> 00:50:27,560
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that there's actually some entropy</font>

1156
00:50:24,860 --> 00:50:30,380
in the<font color="#E5E5E5"> sea what is entities entropy</font>

1157
00:50:27,560 --> 00:50:32,150
technically its randomness from the

1158
00:50:30,380 --> 00:50:34,430
statistical or mathematical sense

1159
00:50:32,150 --> 00:50:37,640
practically and should be a stuff an

1160
00:50:34,430 --> 00:50:39,169
attacker cannot possibly know if there's

1161
00:50:37,640 --> 00:50:41,720
no way the attacker can ever find it out

1162
00:50:39,170 --> 00:50:43,790
that's an acceptable source of<font color="#E5E5E5"> ramen so</font>

1163
00:50:41,720 --> 00:50:46,310
how linux<font color="#E5E5E5"> does this is hard</font><font color="#CCCCCC"> drive head</font>

1164
00:50:43,790 --> 00:50:48,170
timing jitter there's just the physical

1165
00:50:46,310 --> 00:50:49,610
system of a hard<font color="#E5E5E5"> drive or it's got the</font>

1166
00:50:48,170 --> 00:50:52,700
platter and the<font color="#E5E5E5"> head moving back over to</font>

1167
00:50:49,610 --> 00:50:53,480
read<font color="#E5E5E5"> data that's not predictable there's</font>

1168
00:50:52,700 --> 00:50:55,310
always<font color="#E5E5E5"> going to be a little bit</font>

1169
00:50:53,480 --> 00:50:56,130
<font color="#E5E5E5">difference between each head and then as</font>

1170
00:50:55,310 --> 00:50:58,080
it wears down

1171
00:50:56,130 --> 00:51:00,360
<font color="#E5E5E5">things like that the other one is</font><font color="#CCCCCC"> mouse</font>

1172
00:50:58,080 --> 00:51:01,980
and keyboard events we're not actually

1173
00:51:00,360 --> 00:51:03,510
good at generating randomness but if

1174
00:51:01,980 --> 00:51:05,220
you're recording every little twitch of

1175
00:51:03,510 --> 00:51:07,110
our mouse and the tiny timing

1176
00:51:05,220 --> 00:51:08,939
differences between keystrokes<font color="#CCCCCC"> but it's</font>

1177
00:51:07,110 --> 00:51:12,450
good<font color="#CCCCCC"> enough</font><font color="#E5E5E5"> Tigers not gonna be able to</font>

1178
00:51:08,940 --> 00:51:14,790
recover that embedded<font color="#E5E5E5"> systems and</font>

1179
00:51:12,450 --> 00:51:16,140
virtual systems also have often have

1180
00:51:14,790 --> 00:51:20,400
issues with its if you have a headless

1181
00:51:16,140 --> 00:51:23,730
server no user input with an SSD there

1182
00:51:20,400 --> 00:51:25,410
goes all your entropy<font color="#E5E5E5"> okay same thing</font>

1183
00:51:23,730 --> 00:51:28,050
with embedded systems raspberry PI's

1184
00:51:25,410 --> 00:51:29,640
other things<font color="#E5E5E5"> like that on virtual</font>

1185
00:51:28,050 --> 00:51:31,740
machines it's not touching any actual

1186
00:51:29,640 --> 00:51:33,000
hardware and it probably doesn't have

1187
00:51:31,740 --> 00:51:34,319
user interaction for talking the

1188
00:51:33,000 --> 00:51:36,120
enterprise probably served with no user

1189
00:51:34,320 --> 00:51:40,230
interaction so again a situation where

1190
00:51:36,120 --> 00:51:41,430
maybe<font color="#E5E5E5"> there could be failure to and of</font>

1191
00:51:40,230 --> 00:51:42,660
course<font color="#CCCCCC"> there the pseudo-random number</font>

1192
00:51:41,430 --> 00:51:44,759
generators that never had entropy in the

1193
00:51:42,660 --> 00:51:46,890
first place<font color="#E5E5E5"> I have yet</font><font color="#CCCCCC"> to see somebody</font>

1194
00:51:44,760 --> 00:51:48,780
<font color="#E5E5E5">do a new reverse engineering of windows</font>

1195
00:51:46,890 --> 00:51:50,879
script gender annum but the<font color="#E5E5E5"> last one was</font>

1196
00:51:48,780 --> 00:51:53,040
of<font color="#E5E5E5"> Windows 2000 and they didn't have an</font>

1197
00:51:50,880 --> 00:51:54,570
entropy source they had a hood

1198
00:51:53,040 --> 00:51:56,220
everything in the kitchen sink in terms

1199
00:51:54,570 --> 00:51:59,250
of the internal state of the machine

1200
00:51:56,220 --> 00:52:01,919
machine named the process block a bunch

1201
00:51:59,250 --> 00:52:03,750
<font color="#E5E5E5">of other things and then the time to act</font>

1202
00:52:01,920 --> 00:52:07,290
as<font color="#CCCCCC"> an OPS that would never output the</font>

1203
00:52:03,750 --> 00:52:09,240
same thing twice actually no actual or

1204
00:52:07,290 --> 00:52:11,490
very little actual entropy going into

1205
00:52:09,240 --> 00:52:12,660
the output trees an attacker gets on

1206
00:52:11,490 --> 00:52:18,629
<font color="#E5E5E5">your system they can find the stuff out</font>

1207
00:52:12,660 --> 00:52:21,270
<font color="#CCCCCC">okay another</font><font color="#E5E5E5"> way they can fail as it can</font>

1208
00:52:18,630 --> 00:52:24,060
have a backdoor name so our government

1209
00:52:21,270 --> 00:52:25,560
specifically NSA was so happy as to

1210
00:52:24,060 --> 00:52:28,200
create us a backdoor pseudo-random

1211
00:52:25,560 --> 00:52:30,840
number generator and that to<font color="#E5E5E5"> NIST this</font>

1212
00:52:28,200 --> 00:52:32,370
is the standardized it people started

1213
00:52:30,840 --> 00:52:34,230
putting it<font color="#E5E5E5"> in library thank goodness</font>

1214
00:52:32,370 --> 00:52:35,490
they didn't put it as the default random

1215
00:52:34,230 --> 00:52:39,030
number generator too many of them

1216
00:52:35,490 --> 00:52:41,459
juniper systems who produces netscreen

1217
00:52:39,030 --> 00:52:43,140
routers thankfully they're not they're

1218
00:52:41,460 --> 00:52:45,570
not a sponsor so<font color="#E5E5E5"> i can i can pick on</font>

1219
00:52:43,140 --> 00:52:46,950
them they've changed a whole bunch of

1220
00:52:45,570 --> 00:52:48,930
stuff and<font color="#E5E5E5"> how they deal with random</font>

1221
00:52:46,950 --> 00:52:50,609
numbers to turn this back toward

1222
00:52:48,930 --> 00:52:52,319
pseudo-random number generator into a

1223
00:52:50,610 --> 00:52:54,540
functioning backdoor for their VPN

1224
00:52:52,320 --> 00:52:55,680
connection and it's like a list of like

1225
00:52:54,540 --> 00:52:58,320
six different things they had to change

1226
00:52:55,680 --> 00:53:00,000
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> it working but the end of the day</font>

1227
00:52:58,320 --> 00:53:01,860
they generate a nonce before the key for

1228
00:53:00,000 --> 00:53:03,690
<font color="#CCCCCC">that connection you tack or seize the</font>

1229
00:53:01,860 --> 00:53:05,220
noms with a bigger not big enough you

1230
00:53:03,690 --> 00:53:07,260
can do optimizations on it and the

1231
00:53:05,220 --> 00:53:08,759
attacker takes that<font color="#E5E5E5"> and generate the</font>

1232
00:53:07,260 --> 00:53:09,430
next thing this<font color="#E5E5E5"> is based on the</font>

1233
00:53:08,760 --> 00:53:11,380
elliptical curve

1234
00:53:09,430 --> 00:53:13,210
cryptography which should seem a bit odd

1235
00:53:11,380 --> 00:53:15,430
right because<font color="#E5E5E5"> elliptical curves are used</font>

1236
00:53:13,210 --> 00:53:17,530
for asymmetric cryptography where you

1237
00:53:15,430 --> 00:53:20,259
have secret values that are transforming

1238
00:53:17,530 --> 00:53:22,329
other values and that's exactly<font color="#E5E5E5"> how this</font>

1239
00:53:20,260 --> 00:53:24,940
works where there's a secret value that

1240
00:53:22,329 --> 00:53:28,150
will transform outputs to the next

1241
00:53:24,940 --> 00:53:30,069
output and if you know that<font color="#E5E5E5"> secret then</font>

1242
00:53:28,150 --> 00:53:31,809
you can see any output from the

1243
00:53:30,069 --> 00:53:33,730
pseudo-random number generator and you

1244
00:53:31,809 --> 00:53:36,130
can predict the<font color="#E5E5E5"> next one so I see the</font>

1245
00:53:33,730 --> 00:53:38,740
non predicts the next thing that's going

1246
00:53:36,130 --> 00:53:41,950
to<font color="#E5E5E5"> be the key so that's how this works</font>

1247
00:53:38,740 --> 00:53:44,379
<font color="#E5E5E5">thankfully well there so it is but bad</font>

1248
00:53:41,950 --> 00:53:46,839
news foreign intelligence<font color="#E5E5E5"> probably</font>

1249
00:53:44,380 --> 00:53:48,550
somebody man just break into two number

1250
00:53:46,839 --> 00:53:50,170
systems change the elliptical curve they

1251
00:53:48,550 --> 00:53:52,210
were using that changes the secret key

1252
00:53:50,170 --> 00:53:53,950
juniper and whoever whatever

1253
00:53:52,210 --> 00:53:56,109
three-letter agency<font color="#CCCCCC"> problems the NSA</font>

1254
00:53:53,950 --> 00:53:58,450
told them to put it in no longer had

1255
00:53:56,109 --> 00:54:00,819
access to the back door somebody else

1256
00:53:58,450 --> 00:54:02,828
<font color="#E5E5E5">did Juniper's</font><font color="#CCCCCC"> a pretty big name when it</font>

1257
00:54:00,819 --> 00:54:05,770
comes to government contractors business

1258
00:54:02,829 --> 00:54:07,599
etc juniper<font color="#E5E5E5"> went oh crap somebody else</font>

1259
00:54:05,770 --> 00:54:08,980
is using<font color="#E5E5E5"> our back door we need to tell</font>

1260
00:54:07,599 --> 00:54:10,329
people so they switched<font color="#E5E5E5"> it back and</font>

1261
00:54:08,980 --> 00:54:11,530
somebody was like<font color="#CCCCCC"> whoa what's going on</font>

1262
00:54:10,329 --> 00:54:13,390
here and<font color="#E5E5E5"> then they figured out oh no</font>

1263
00:54:11,530 --> 00:54:18,130
juniper had put the back dooring years

1264
00:54:13,390 --> 00:54:23,710
ago so they finally removed it questions

1265
00:54:18,130 --> 00:54:26,109
about HP randomness random numbers back

1266
00:54:23,710 --> 00:54:35,170
door repair and<font color="#CCCCCC"> geez why you should care</font>

1267
00:54:26,109 --> 00:54:36,910
yeah so so<font color="#CCCCCC"> are</font><font color="#E5E5E5"> I say an elliptical</font>

1268
00:54:35,170 --> 00:54:38,920
curves are all based on mathematics

1269
00:54:36,910 --> 00:54:46,509
involving primes and multiplications and

1270
00:54:38,920 --> 00:54:47,829
stuff like that no I have no idea so

1271
00:54:46,510 --> 00:54:50,020
that's the<font color="#E5E5E5"> thing i know</font><font color="#CCCCCC"> Prime's are</font>

1272
00:54:47,829 --> 00:54:52,569
important but<font color="#CCCCCC"> i have yet to find an</font>

1273
00:54:50,020 --> 00:54:54,609
actual cryptographer who can<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> to</font>

1274
00:54:52,569 --> 00:54:58,380
me why they matter why it has to be

1275
00:54:54,609 --> 00:54:58,380
prime or anything else like that

1276
00:55:04,829 --> 00:55:11,130
so in if it wasn't a prime it would be

1277
00:55:08,400 --> 00:55:13,499
easier<font color="#E5E5E5"> to factor okay do you know if</font>

1278
00:55:11,130 --> 00:55:15,930
that holds true for the problems in

1279
00:55:13,499 --> 00:55:17,129
elliptic curve cryptography sorry my

1280
00:55:15,930 --> 00:55:18,690
guess<font color="#CCCCCC"> is that it does because that's</font>

1281
00:55:17,130 --> 00:55:20,940
<font color="#E5E5E5">also a like you can do it one way but</font>

1282
00:55:18,690 --> 00:55:27,390
starting put it back thing so all right

1283
00:55:20,940 --> 00:55:32,339
thank<font color="#CCCCCC"> you any other questions I've been</font>

1284
00:55:27,390 --> 00:55:35,999
doing on harm I'm pretty much out of

1285
00:55:32,339 --> 00:55:38,940
time that's always exciting protocols

1286
00:55:35,999 --> 00:55:40,379
verticals are bad the more complicated

1287
00:55:38,940 --> 00:55:42,239
<font color="#CCCCCC">in protocol</font><font color="#E5E5E5"> hanging action see this is</font>

1288
00:55:40,380 --> 00:55:43,380
fine we're complicated protocol the more

1289
00:55:42,239 --> 00:55:45,569
<font color="#CCCCCC">vulnerable it is</font><font color="#E5E5E5"> I was going to go</font>

1290
00:55:43,380 --> 00:55:48,119
through examples of every<font color="#E5E5E5"> single step of</font>

1291
00:55:45,569 --> 00:55:52,619
TLS and SSL can be vulnerable but I'm

1292
00:55:48,119 --> 00:55:55,920
<font color="#E5E5E5">going to skip that</font><font color="#CCCCCC"> okay let me have</font>

1293
00:55:52,619 --> 00:55:58,079
side-channel attacks when you're doing

1294
00:55:55,920 --> 00:55:59,369
stuff you can leak data about the key

1295
00:55:58,079 --> 00:56:02,130
this falls into one of two categories

1296
00:55:59,369 --> 00:56:04,769
either the attacker can guess something

1297
00:56:02,130 --> 00:56:06,029
directly for example guessing a password

1298
00:56:04,769 --> 00:56:08,129
based on how long it takes<font color="#CCCCCC"> to do the</font>

1299
00:56:06,029 --> 00:56:09,930
string comparison or whether what

1300
00:56:08,130 --> 00:56:11,640
they're looking at like power the<font color="#E5E5E5"> cash</font>

1301
00:56:09,930 --> 00:56:15,180
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> CPU or something else like that</font>

1302
00:56:11,640 --> 00:56:18,479
you can actually figure<font color="#E5E5E5"> out what some of</font>

1303
00:56:15,180 --> 00:56:20,848
the bits of<font color="#CCCCCC"> the key are so side channels</font>

1304
00:56:18,479 --> 00:56:22,919
are an<font color="#E5E5E5"> issue why you don't want to use</font>

1305
00:56:20,849 --> 00:56:24,479
myths elliptical curves for a lot of

1306
00:56:22,920 --> 00:56:25,979
stuff is because this<font color="#E5E5E5"> ellipse are curves</font>

1307
00:56:24,479 --> 00:56:29,519
you can't have a constant time

1308
00:56:25,979 --> 00:56:31,680
implementation so how long the signature

1309
00:56:29,519 --> 00:56:35,129
function takes actually leaks

1310
00:56:31,680 --> 00:56:36,598
information about the key it's really

1311
00:56:35,130 --> 00:56:37,859
really hard<font color="#E5E5E5"> almost impossible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write</font>

1312
00:56:36,599 --> 00:56:44,579
an implementation that's not true for

1313
00:56:37,859 --> 00:56:46,380
<font color="#CCCCCC">okay recap we had to skip almost all of</font>

1314
00:56:44,579 --> 00:56:48,239
cryptographic protocols I apologize<font color="#CCCCCC"> but</font>

1315
00:56:46,380 --> 00:56:53,609
you now know<font color="#CCCCCC"> all of the primitives that</font>

1316
00:56:48,239 --> 00:56:55,829
go into a protocol like that the reason

1317
00:56:53,609 --> 00:56:57,029
we need corrective limitations is

1318
00:56:55,829 --> 00:56:58,739
largely because of side-channel attacks

1319
00:56:57,029 --> 00:57:00,119
even if you have a logically correct

1320
00:56:58,739 --> 00:57:02,699
implementation<font color="#E5E5E5"> it can still have issues</font>

1321
00:57:00,119 --> 00:57:04,859
kriffing and leaked data let me talked

1322
00:57:02,699 --> 00:57:07,739
about cryptographic primitives this is a

1323
00:57:04,859 --> 00:57:09,119
symmetric like a s asymmetric like RSA

1324
00:57:07,739 --> 00:57:10,859
and a lipstick incurved if you Hellman

1325
00:57:09,119 --> 00:57:13,650
hashes and pseudo-random number

1326
00:57:10,859 --> 00:57:15,509
generators quick before I pass this over

1327
00:57:13,650 --> 00:57:16,949
to the next<font color="#E5E5E5"> person do we have any</font>

1328
00:57:15,509 --> 00:57:18,480
questions concerns roaring screams

1329
00:57:16,949 --> 00:57:39,600
aspirations or snide remarks

1330
00:57:18,480 --> 00:57:41,850
very great so<font color="#CCCCCC"> it's elliptical curve</font>

1331
00:57:39,600 --> 00:57:42,930
digital signature algorithm is the thing

1332
00:57:41,850 --> 00:57:44,609
that's particularly vulnerable to that

1333
00:57:42,930 --> 00:57:47,220
and the reason<font color="#E5E5E5"> is to implement the</font>

1334
00:57:44,609 --> 00:57:50,310
mathematics for that curve you have<font color="#E5E5E5"> to</font>

1335
00:57:47,220 --> 00:57:52,230
<font color="#E5E5E5">have like a bunch of</font><font color="#CCCCCC"> different stuff</font>

1336
00:57:50,310 --> 00:57:53,820
depending on what<font color="#E5E5E5"> it does so there's a</font>

1337
00:57:52,230 --> 00:57:55,950
whole<font color="#CCCCCC"> bunch of conditional branch logic</font>

1338
00:57:53,820 --> 00:57:57,630
and depending on what stuff it is you're

1339
00:57:55,950 --> 00:58:00,270
signing it will go to<font color="#E5E5E5"> a different branch</font>

1340
00:57:57,630 --> 00:58:02,100
in the code and that's that's required

1341
00:58:00,270 --> 00:58:05,490
for creating a proximal invitation of

1342
00:58:02,100 --> 00:58:08,600
that that's why so it's maybe you can do

1343
00:58:05,490 --> 00:58:08,600
it but it's really really<font color="#CCCCCC"> hard</font>

