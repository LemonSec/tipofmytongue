1
00:00:00,000 --> 00:00:12,210
the coolest<font color="#E5E5E5"> one of the day that lame</font>

2
00:00:04,589 --> 00:00:22,890
like Sam's previous talk<font color="#CCCCCC"> alright so what</font>

3
00:00:12,210 --> 00:00:25,590
we're going<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right hey it's a quick</font>

4
00:00:22,890 --> 00:00:28,769
show hand how<font color="#CCCCCC"> many people who do we have</font>

5
00:00:25,590 --> 00:00:32,040
your computer<font color="#CCCCCC"> science majors or for the</font>

6
00:00:28,769 --> 00:00:36,180
game your size yeah all right you guys

7
00:00:32,040 --> 00:00:39,450
are the best<font color="#CCCCCC"> okay so my name is</font><font color="#E5E5E5"> mark</font>

8
00:00:36,180 --> 00:00:40,649
sanders<font color="#E5E5E5"> I'm going to talk about the</font>

9
00:00:39,450 --> 00:00:44,280
general<font color="#E5E5E5"> topic a little bit of what's</font>

10
00:00:40,649 --> 00:00:46,980
called hash reverse or password recovery

11
00:00:44,280 --> 00:00:48,329
but now i'm also going to take the

12
00:00:46,980 --> 00:00:50,190
advantage of the fact that i'm here<font color="#E5E5E5"> at</font>

13
00:00:48,329 --> 00:00:53,579
bloom con that Bloomsburg University to

14
00:00:50,190 --> 00:00:55,709
discuss a new algorithm that we've

15
00:00:53,579 --> 00:00:57,750
developed where i work at noblesse

16
00:00:55,710 --> 00:00:59,789
called the bloom reverse the happy

17
00:00:57,750 --> 00:01:01,920
coincidence it's called that and you'll

18
00:00:59,789 --> 00:01:03,390
understand why it's called that but it's

19
00:01:01,920 --> 00:01:06,810
<font color="#E5E5E5">not because I'm here but</font><font color="#CCCCCC"> I think it's</font>

20
00:01:03,390 --> 00:01:08,400
also kind of convenient and nice so I

21
00:01:06,810 --> 00:01:11,700
work for an organization called noblesse

22
00:01:08,400 --> 00:01:14,820
we're a nonprofit research and

23
00:01:11,700 --> 00:01:17,729
development and consulting company in

24
00:01:14,820 --> 00:01:20,399
Northern Virginia area near Washington

25
00:01:17,729 --> 00:01:22,710
DC we have a booth downstairs and a

26
00:01:20,400 --> 00:01:25,380
particular<font color="#CCCCCC"> interest to this crowd we do</font>

27
00:01:22,710 --> 00:01:27,839
internships and they're paid so you

28
00:01:25,380 --> 00:01:30,479
should look us up online and every year

29
00:01:27,840 --> 00:01:32,460
we do I<font color="#E5E5E5"> think we think what about 60 in</font>

30
00:01:30,479 --> 00:01:38,070
turn a year something like that<font color="#CCCCCC"> very</font>

31
00:01:32,460 --> 00:01:39,720
competitive and we even have here Erica

32
00:01:38,070 --> 00:01:43,229
<font color="#CCCCCC">who's last time I can ever remember how</font>

33
00:01:39,720 --> 00:01:45,450
to say I car may see juicy is a<font color="#CCCCCC"> lump</font>

34
00:01:43,229 --> 00:01:47,970
here from<font color="#E5E5E5"> Bloomberg who started as an</font>

35
00:01:45,450 --> 00:01:50,009
intern and now it<font color="#CCCCCC"> works for us so it's a</font>

36
00:01:47,970 --> 00:01:53,039
great<font color="#E5E5E5"> a great place to work it's a lot</font>

37
00:01:50,009 --> 00:01:55,560
of<font color="#CCCCCC"> fun and</font><font color="#E5E5E5"> also I'd like to point out</font>

38
00:01:53,040 --> 00:01:58,469
some of<font color="#CCCCCC"> my colleagues who helps on some</font>

39
00:01:55,560 --> 00:02:01,500
of this work Tyler<font color="#E5E5E5"> Baris Mark Walters</font>

40
00:01:58,469 --> 00:02:03,630
Scott Lou and Sam gross who's here

41
00:02:01,500 --> 00:02:05,280
former professor is it helps<font color="#E5E5E5"> with some</font>

42
00:02:03,630 --> 00:02:06,720
of the optimization and math work on

43
00:02:05,280 --> 00:02:11,520
this as well

44
00:02:06,720 --> 00:02:14,010
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and so who am i uh i spent about</font>

45
00:02:11,520 --> 00:02:15,930
17 years supporting the department of

46
00:02:14,010 --> 00:02:17,670
defense and intelligence my education my

47
00:02:15,930 --> 00:02:20,220
<font color="#E5E5E5">undergrad was in computer science which</font>

48
00:02:17,670 --> 00:02:21,780
is why<font color="#CCCCCC"> i like you</font><font color="#E5E5E5"> guys my Master's was</font>

49
00:02:20,220 --> 00:02:27,150
in management votes from George Mason

50
00:02:21,780 --> 00:02:28,860
University in in Virginia I've been

51
00:02:27,150 --> 00:02:32,670
various jobs in the past right now I'm a

52
00:02:28,860 --> 00:02:34,500
manager of a data analytics group at

53
00:02:32,670 --> 00:02:36,780
noblesse I've been<font color="#CCCCCC"> a computational</font>

54
00:02:34,500 --> 00:02:38,070
linguists at one point and program

55
00:02:36,780 --> 00:02:41,670
managers for various kinds of fun things

56
00:02:38,070 --> 00:02:46,530
for the<font color="#E5E5E5"> DoD last year I gave</font><font color="#CCCCCC"> a</font>

57
00:02:41,670 --> 00:02:48,958
presentation on the Ashley Madison you

58
00:02:46,530 --> 00:02:50,280
know leak where a lot of people's sad

59
00:02:48,959 --> 00:02:52,140
information was leaked all over the

60
00:02:50,280 --> 00:02:56,850
Internet what's a particular interest

61
00:02:52,140 --> 00:02:59,070
for this talk is the fact that there's a

62
00:02:56,850 --> 00:03:01,560
group date<font color="#E5E5E5"> named cynosure prime that was</font>

63
00:02:59,070 --> 00:03:03,750
able to what they called crack 11

64
00:03:01,560 --> 00:03:05,100
million of the password a little bit

65
00:03:03,750 --> 00:03:09,090
more<font color="#E5E5E5"> to 11 million disasters that relate</font>

66
00:03:05,100 --> 00:03:10,680
as part of that that<font color="#E5E5E5"> leak so what I'm</font>

67
00:03:09,090 --> 00:03:12,120
really interested<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about is how</font>

68
00:03:10,680 --> 00:03:15,239
do they do that what<font color="#E5E5E5"> and what does</font><font color="#CCCCCC"> that</font>

69
00:03:12,120 --> 00:03:18,000
mean<font color="#CCCCCC"> to crack a password last year what</font>

70
00:03:15,239 --> 00:03:19,530
I talked about<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit was some of</font>

71
00:03:18,000 --> 00:03:22,200
the<font color="#CCCCCC"> implementation flaws that Ashley</font>

72
00:03:19,530 --> 00:03:23,880
Madison had in the code of how they

73
00:03:22,200 --> 00:03:25,980
actually manage the passwords and user

74
00:03:23,880 --> 00:03:28,590
accounts and it turns out as we have

75
00:03:25,980 --> 00:03:31,049
seen more and more leaks happen on the

76
00:03:28,590 --> 00:03:33,239
internet that it's fairly common

77
00:03:31,050 --> 00:03:36,870
practice for organizations to have very

78
00:03:33,239 --> 00:03:38,400
poor password management policies so

79
00:03:36,870 --> 00:03:39,900
that when their password information was

80
00:03:38,400 --> 00:03:41,760
leaked onto the internet it's fairly

81
00:03:39,900 --> 00:03:46,380
easy to actually figure<font color="#E5E5E5"> out what their</font>

82
00:03:41,760 --> 00:03:50,609
passwords are so Wikipedia talks about

83
00:03:46,380 --> 00:03:52,530
you know Patrick cracking in terms of a

84
00:03:50,610 --> 00:03:54,900
<font color="#E5E5E5">process of recovering password given</font>

85
00:03:52,530 --> 00:03:58,290
what's called<font color="#E5E5E5"> I ate a password hash or a</font>

86
00:03:54,900 --> 00:04:02,100
digest there's a bunch of different

87
00:03:58,290 --> 00:04:03,209
<font color="#E5E5E5">approaches for for doing this the common</font>

88
00:04:02,100 --> 00:04:04,590
approach that<font color="#CCCCCC"> Wikipedia talks about his</font>

89
00:04:03,209 --> 00:04:06,360
brute force and I'll actually talk a

90
00:04:04,590 --> 00:04:07,769
little bit about that but then just also

91
00:04:06,360 --> 00:04:12,200
<font color="#E5E5E5">what are called algorithmic approaches</font>

92
00:04:07,769 --> 00:04:12,200
to trying to reverse these things

93
00:04:14,370 --> 00:04:17,040
so<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to start</font><font color="#E5E5E5"> with just some</font>

94
00:04:15,599 --> 00:04:19,380
definitions if you're not familiar with

95
00:04:17,040 --> 00:04:21,180
this you know this topic just you can

96
00:04:19,380 --> 00:04:22,229
kind of get an idea and by<font color="#E5E5E5"> the end of</font>

97
00:04:21,180 --> 00:04:24,570
this talk is going<font color="#E5E5E5"> to be this is going</font>

98
00:04:22,229 --> 00:04:26,550
<font color="#E5E5E5">to get pretty in depth but hopefully a</font>

99
00:04:24,570 --> 00:04:28,889
little follow a lot of this if you're

100
00:04:26,550 --> 00:04:31,979
not into this topic directly but the

101
00:04:28,889 --> 00:04:35,280
basic idea is that a hash function is

102
00:04:31,979 --> 00:04:37,560
some process where you take a password

103
00:04:35,280 --> 00:04:38,880
say I've<font color="#CCCCCC"> had to release some passwords a</font>

104
00:04:37,560 --> 00:04:41,669
terrible password by the way don't ever

105
00:04:38,880 --> 00:04:43,110
use that but they have a password<font color="#E5E5E5"> I put</font>

106
00:04:41,669 --> 00:04:44,880
it through my hash function and i end up

107
00:04:43,110 --> 00:04:47,520
with what for this talk are going to

108
00:04:44,880 --> 00:04:50,039
call it digests colloquially a lot of

109
00:04:47,520 --> 00:04:51,990
<font color="#E5E5E5">people call them hashes but really the</font>

110
00:04:50,039 --> 00:04:54,539
sort<font color="#E5E5E5"> of the formal term is a digest and</font>

111
00:04:51,990 --> 00:04:56,370
it'll it'll be<font color="#E5E5E5"> maybe look something like</font>

112
00:04:54,539 --> 00:05:02,490
this it's a big long alphanumeric string

113
00:04:56,370 --> 00:05:04,410
so a hash function is a one-way function

114
00:05:02,490 --> 00:05:07,770
there's a<font color="#E5E5E5"> lot of interesting math and</font>

115
00:05:04,410 --> 00:05:09,960
theory behind one-way functions but for

116
00:05:07,770 --> 00:05:11,969
purposes of this talk will consider a

117
00:05:09,960 --> 00:05:15,750
hash function to be I'm<font color="#CCCCCC"> gonna need some</font>

118
00:05:11,970 --> 00:05:17,250
<font color="#E5E5E5">notation here H and the password to BP</font>

119
00:05:15,750 --> 00:05:19,979
and the digest that's produced by that

120
00:05:17,250 --> 00:05:21,990
<font color="#E5E5E5">tubidy and the basic idea is you can see</font>

121
00:05:19,979 --> 00:05:23,969
<font color="#E5E5E5">for example I have what we're going to</font>

122
00:05:21,990 --> 00:05:26,070
call keys those we can also consider<font color="#E5E5E5"> it</font>

123
00:05:23,970 --> 00:05:29,010
as a password but it can really be any

124
00:05:26,070 --> 00:05:31,289
string of any length and they will go

125
00:05:29,010 --> 00:05:32,880
through some hash function and produce a

126
00:05:31,289 --> 00:05:35,430
digest so in this example here you<font color="#E5E5E5"> see</font>

127
00:05:32,880 --> 00:05:41,190
Lisa Smith<font color="#E5E5E5"> after going to the hash</font>

128
00:05:35,430 --> 00:05:43,110
function<font color="#CCCCCC"> is the hash or the digest 01 so</font>

129
00:05:41,190 --> 00:05:45,270
how to<font color="#E5E5E5"> hashes work here is probably the</font>

130
00:05:43,110 --> 00:05:47,880
worst possible<font color="#CCCCCC"> hash you can ever imagine</font>

131
00:05:45,270 --> 00:05:49,289
but<font color="#CCCCCC"> it's a nice simple example is</font>

132
00:05:47,880 --> 00:05:51,690
actually sort of like the starter hello

133
00:05:49,289 --> 00:05:53,669
world hash hash function that people

134
00:05:51,690 --> 00:05:56,280
learn so for example<font color="#E5E5E5"> if I</font><font color="#CCCCCC"> have a</font>

135
00:05:53,669 --> 00:05:57,810
password my passwords password one I get

136
00:05:56,280 --> 00:05:59,760
the ASCII codes for all the letters add

137
00:05:57,810 --> 00:06:02,729
them<font color="#E5E5E5"> up I have a number that number is</font>

138
00:05:59,760 --> 00:06:05,310
nine hundred that's my digest very very

139
00:06:02,729 --> 00:06:07,440
<font color="#E5E5E5">simple the question is if I were to give</font>

140
00:06:05,310 --> 00:06:08,940
you 900 and tell you that belongs<font color="#E5E5E5"> to</font>

141
00:06:07,440 --> 00:06:10,889
some password<font color="#E5E5E5"> and not let you know what</font>

142
00:06:08,940 --> 00:06:12,990
that password is could<font color="#CCCCCC"> you figure out</font>

143
00:06:10,889 --> 00:06:14,940
that it was password<font color="#E5E5E5"> one with no other</font>

144
00:06:12,990 --> 00:06:18,229
knowledge at all and that's essentially

145
00:06:14,940 --> 00:06:18,229
what this topic<font color="#E5E5E5"> is about</font>

146
00:06:18,889 --> 00:06:21,620
there's also a concept called

147
00:06:19,909 --> 00:06:23,479
cryptographic hashes so hash functions

148
00:06:21,620 --> 00:06:25,939
are used all over computer science for a

149
00:06:23,479 --> 00:06:27,469
wide variety<font color="#CCCCCC"> reasons we started hash</font>

150
00:06:25,939 --> 00:06:30,199
tables you probably produce<font color="#CCCCCC"> them on your</font>

151
00:06:27,469 --> 00:06:31,699
on your<font color="#E5E5E5"> own there's also other kinds of</font>

152
00:06:30,199 --> 00:06:34,639
hatchets which are used for various

153
00:06:31,699 --> 00:06:37,219
types of database functions and indexing

154
00:06:34,639 --> 00:06:39,259
they have various different kinds of

155
00:06:37,219 --> 00:06:40,370
properties what we're specifically

156
00:06:39,259 --> 00:06:42,439
interested in here are what are called

157
00:06:40,370 --> 00:06:47,180
cryptographic hashes and it's

158
00:06:42,439 --> 00:06:49,189
essentially five major attributes of a

159
00:06:47,180 --> 00:06:51,199
cryptographic hash so the<font color="#E5E5E5"> first one is</font>

160
00:06:49,189 --> 00:06:53,210
<font color="#CCCCCC">there deterministic</font><font color="#E5E5E5"> which means that if</font>

161
00:06:51,199 --> 00:06:55,039
I were to give a cryptographic hash

162
00:06:53,210 --> 00:06:57,590
function the same<font color="#E5E5E5"> password over and over</font>

163
00:06:55,039 --> 00:06:59,180
again I will<font color="#CCCCCC"> get the same digest over</font>

164
00:06:57,590 --> 00:07:01,279
and over again I won't<font color="#CCCCCC"> ever get</font>

165
00:06:59,180 --> 00:07:02,300
something different or variable another

166
00:07:01,279 --> 00:07:05,689
one is<font color="#E5E5E5"> that they're very quick to</font>

167
00:07:02,300 --> 00:07:11,180
compute<font color="#CCCCCC"> the</font><font color="#E5E5E5"> digest but the reverse is</font>

168
00:07:05,689 --> 00:07:14,120
very<font color="#E5E5E5"> very difficult or intractable the</font>

169
00:07:11,180 --> 00:07:16,669
number four is that if I were to say

170
00:07:14,120 --> 00:07:19,129
have password one and compute the digest

171
00:07:16,669 --> 00:07:20,930
for that and then make computer digest

172
00:07:19,129 --> 00:07:22,909
for something that's password to even

173
00:07:20,930 --> 00:07:24,349
I've only changed one letter the digest

174
00:07:22,909 --> 00:07:27,169
will be completely<font color="#E5E5E5"> different and there's</font>

175
00:07:24,349 --> 00:07:29,389
no correlation I can easily<font color="#E5E5E5"> determine</font>

176
00:07:27,169 --> 00:07:31,430
between the passwords and the digest

177
00:07:29,389 --> 00:07:33,229
even given<font color="#E5E5E5"> small changes</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> password</font>

178
00:07:31,430 --> 00:07:36,319
there's actually an entire<font color="#E5E5E5"> class of</font>

179
00:07:33,229 --> 00:07:38,060
passwords that try<font color="#E5E5E5"> to preserve the small</font>

180
00:07:36,319 --> 00:07:39,139
similarities and those are actually very

181
00:07:38,060 --> 00:07:42,949
<font color="#CCCCCC">interesting topic</font><font color="#E5E5E5"> but they're not</font>

182
00:07:39,139 --> 00:07:44,689
cryptographic hashes and then the<font color="#E5E5E5"> other</font>

183
00:07:42,949 --> 00:07:46,729
question here this actually recently

184
00:07:44,689 --> 00:07:49,250
been in the news have even kind<font color="#E5E5E5"> of</font>

185
00:07:46,729 --> 00:07:51,529
looking a little bit from computer

186
00:07:49,250 --> 00:07:53,240
security news that it's very very

187
00:07:51,529 --> 00:07:56,300
difficult to compute two different

188
00:07:53,240 --> 00:07:58,250
passwords that will that will force<font color="#E5E5E5"> a</font>

189
00:07:56,300 --> 00:08:00,889
collision what a collision means that

190
00:07:58,250 --> 00:08:05,270
they<font color="#E5E5E5"> will both produce the same digest</font>

191
00:08:00,889 --> 00:08:07,219
recently talked about this very very

192
00:08:05,270 --> 00:08:09,378
briefly but recently Google announced

193
00:08:07,219 --> 00:08:12,589
the ability to generate collisions and

194
00:08:09,379 --> 00:08:15,649
sha-1 and they showed some examples of

195
00:08:12,589 --> 00:08:17,719
from two different PDF they're

196
00:08:15,649 --> 00:08:21,589
completely different PDFs but they they

197
00:08:17,719 --> 00:08:23,210
compute to the same sha-1 digest and

198
00:08:21,589 --> 00:08:25,099
that's that's forcing a collision so

199
00:08:23,210 --> 00:08:27,529
that's kind of an<font color="#CCCCCC"> interesting an</font>

200
00:08:25,099 --> 00:08:29,149
<font color="#E5E5E5">interesting problem and so just some</font>

201
00:08:27,529 --> 00:08:30,469
real examples of what our cryptographic

202
00:08:29,149 --> 00:08:32,230
hash is actually not always the

203
00:08:30,469 --> 00:08:34,390
cryptographic hashes but

204
00:08:32,230 --> 00:08:36,580
md5 is a very common one it's used all

205
00:08:34,390 --> 00:08:38,140
over the<font color="#E5E5E5"> place is actually now misused</font>

206
00:08:36,580 --> 00:08:40,600
it's a very very very broken

207
00:08:38,140 --> 00:08:44,049
cryptographic hash but you can see some

208
00:08:40,600 --> 00:08:46,960
examples where FF has md5 password 123

209
00:08:44,049 --> 00:08:50,079
that produces this long alphanumeric

210
00:08:46,960 --> 00:08:53,440
digest and password 1234 produced with

211
00:08:50,080 --> 00:08:55,420
something looks completely different key

212
00:08:53,440 --> 00:08:57,550
singing again it doesn't matter what the

213
00:08:55,420 --> 00:08:59,199
length of the input string is i'm using

214
00:08:57,550 --> 00:09:01,510
<font color="#CCCCCC">i'm talking about password today but it</font>

215
00:08:59,200 --> 00:09:03,850
could be it could be the entire<font color="#E5E5E5"> text</font><font color="#CCCCCC"> of</font>

216
00:09:01,510 --> 00:09:06,280
warm piece the digest will be exactly

217
00:09:03,850 --> 00:09:09,730
the same length that's another sort<font color="#E5E5E5"> of</font>

218
00:09:06,280 --> 00:09:12,579
property<font color="#E5E5E5"> of hash functions and digest</font>

219
00:09:09,730 --> 00:09:16,030
this is a whole other entire families of

220
00:09:12,580 --> 00:09:19,360
cryptographic hash functions the sha-1

221
00:09:16,030 --> 00:09:22,630
is very widely used is actually it was

222
00:09:19,360 --> 00:09:25,120
the topic of the<font color="#CCCCCC"> google</font><font color="#E5E5E5"> research and</font>

223
00:09:22,630 --> 00:09:28,540
they were designed<font color="#E5E5E5"> by the NSA there's</font>

224
00:09:25,120 --> 00:09:30,970
some conspiracy theories at NSA you know

225
00:09:28,540 --> 00:09:33,459
specifically weaken the algorithms but

226
00:09:30,970 --> 00:09:35,080
you know that's just<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of fun and</font>

227
00:09:33,460 --> 00:09:36,670
there's also ones that you might<font color="#CCCCCC"> have</font>

228
00:09:35,080 --> 00:09:38,800
also<font color="#E5E5E5"> heard of cyclic redundancy checks</font>

229
00:09:36,670 --> 00:09:42,280
which are often used to help<font color="#E5E5E5"> determine</font>

230
00:09:38,800 --> 00:09:44,290
that if a file has been tampered<font color="#CCCCCC"> with or</font>

231
00:09:42,280 --> 00:09:45,880
damaged in some way and these<font color="#CCCCCC"> are all</font>

232
00:09:44,290 --> 00:09:48,579
different kinds of use cases<font color="#E5E5E5"> that you</font>

233
00:09:45,880 --> 00:09:52,930
can use hash functions for if you

234
00:09:48,580 --> 00:09:54,460
attended to talk this morning on chip

235
00:09:52,930 --> 00:09:56,500
off they did they talked<font color="#CCCCCC"> about how you</font>

236
00:09:54,460 --> 00:09:59,260
can forensically treat files by taking a

237
00:09:56,500 --> 00:10:00,640
a producing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> digests of a file and</font>

238
00:09:59,260 --> 00:10:02,290
<font color="#E5E5E5">then when you work with the file you</font>

239
00:10:00,640 --> 00:10:04,060
then produce the digest at the end of

240
00:10:02,290 --> 00:10:05,920
<font color="#E5E5E5">the work to verify that you haven't</font>

241
00:10:04,060 --> 00:10:07,630
damaged<font color="#E5E5E5"> or altered the file in some way</font>

242
00:10:05,920 --> 00:10:10,900
so there's lots of different<font color="#CCCCCC"> use cases</font>

243
00:10:07,630 --> 00:10:12,189
for core hashes<font color="#E5E5E5"> alright so let's talk a</font>

244
00:10:10,900 --> 00:10:15,069
little bit about hash is being one-way

245
00:10:12,190 --> 00:10:17,140
functions but just<font color="#E5E5E5"> introduce some more</font>

246
00:10:15,070 --> 00:10:18,730
notation so H of<font color="#E5E5E5"> P equals D that means</font>

247
00:10:17,140 --> 00:10:21,160
I'm hashing the password I'm producing a

248
00:10:18,730 --> 00:10:23,170
digest there's no simple reverse

249
00:10:21,160 --> 00:10:24,790
function such that<font color="#CCCCCC"> I man introduce a new</font>

250
00:10:23,170 --> 00:10:26,860
<font color="#E5E5E5">note piece of notation here are which</font>

251
00:10:24,790 --> 00:10:28,750
<font color="#E5E5E5">means the reverse of the digest</font>

252
00:10:26,860 --> 00:10:30,940
<font color="#E5E5E5">guarantees you retrieve the original</font>

253
00:10:28,750 --> 00:10:34,330
password if you think about this this is

254
00:10:30,940 --> 00:10:37,000
kind of<font color="#E5E5E5"> obvious too because I'm mapping</font>

255
00:10:34,330 --> 00:10:38,560
passwords in to digest there's an

256
00:10:37,000 --> 00:10:40,840
infinite number of possible collisions

257
00:10:38,560 --> 00:10:42,489
so given<font color="#E5E5E5"> some digest I can actually</font>

258
00:10:40,840 --> 00:10:44,020
<font color="#E5E5E5">produce an infinite number of possible</font>

259
00:10:42,490 --> 00:10:45,590
what we're going to call<font color="#E5E5E5"> quote-unquote</font>

260
00:10:44,020 --> 00:10:47,449
passwords that map to that

261
00:10:45,590 --> 00:10:50,600
Jeff so it's actually<font color="#E5E5E5"> very very</font>

262
00:10:47,450 --> 00:10:53,450
<font color="#E5E5E5">difficult to do this it's a little</font><font color="#CCCCCC"> bit</font>

263
00:10:50,600 --> 00:10:55,430
<font color="#CCCCCC">of little bit more definition so we're</font>

264
00:10:53,450 --> 00:10:58,190
going to call something the password

265
00:10:55,430 --> 00:10:59,959
space and if you think<font color="#CCCCCC"> about sort</font><font color="#E5E5E5"> of a</font>

266
00:10:58,190 --> 00:11:01,730
set of rules for what passwords to me

267
00:10:59,960 --> 00:11:04,730
we've<font color="#E5E5E5"> all produced passwords for online</font>

268
00:11:01,730 --> 00:11:05,690
accounts or here at<font color="#CCCCCC"> Bloomsburg you know</font>

269
00:11:04,730 --> 00:11:07,700
they tell you you have<font color="#E5E5E5"> to have like a</font>

270
00:11:05,690 --> 00:11:10,100
digit you had to have<font color="#E5E5E5"> special</font><font color="#CCCCCC"> character</font>

271
00:11:07,700 --> 00:11:12,110
and uppercase letters if you if you look

272
00:11:10,100 --> 00:11:13,550
<font color="#CCCCCC">at all those rules we renewed all the</font>

273
00:11:12,110 --> 00:11:15,860
possible passwords under those rules

274
00:11:13,550 --> 00:11:17,359
that's called the password space so a

275
00:11:15,860 --> 00:11:21,110
very simple password space here might be

276
00:11:17,360 --> 00:11:25,370
<font color="#E5E5E5">five digit numeric pin that produces</font>

277
00:11:21,110 --> 00:11:27,530
100,000 possible password but five digit

278
00:11:25,370 --> 00:11:30,320
alphanumeric pins this is 60<font color="#E5E5E5"> million</font>

279
00:11:27,530 --> 00:11:33,290
possible password so just a slight

280
00:11:30,320 --> 00:11:36,110
<font color="#E5E5E5">change in rules can actually drastically</font>

281
00:11:33,290 --> 00:11:37,790
increase the password space and then

282
00:11:36,110 --> 00:11:39,620
there's also<font color="#E5E5E5"> what's called the digest</font>

283
00:11:37,790 --> 00:11:41,569
space that's<font color="#E5E5E5"> all the possible digests</font>

284
00:11:39,620 --> 00:11:43,970
given a specific hashing approach

285
00:11:41,570 --> 00:11:46,760
approach this again gonna give you an

286
00:11:43,970 --> 00:11:49,820
idea let me go back<font color="#CCCCCC"> here so if you see</font>

287
00:11:46,760 --> 00:11:52,010
these digests under md5 see how long

288
00:11:49,820 --> 00:11:54,410
they are they can be there actually a

289
00:11:52,010 --> 00:11:57,530
hexadecimal so they can<font color="#E5E5E5"> have 16 possible</font>

290
00:11:54,410 --> 00:12:01,010
values<font color="#CCCCCC"> for each number and that's so is</font>

291
00:11:57,530 --> 00:12:02,390
its each the number of possible<font color="#CCCCCC"> digested</font>

292
00:12:01,010 --> 00:12:05,870
computers and under md5 is

293
00:12:02,390 --> 00:12:09,710
extraordinarily huge number and that's

294
00:12:05,870 --> 00:12:11,600
<font color="#E5E5E5">called the digest space again just a</font>

295
00:12:09,710 --> 00:12:14,810
little<font color="#CCCCCC"> bit more reddish reiteration and</font>

296
00:12:11,600 --> 00:12:17,390
collisions you see in this example on

297
00:12:14,810 --> 00:12:19,670
the right John Smith and Sandra Dee they

298
00:12:17,390 --> 00:12:23,600
both hash to the same value in the term

299
00:12:19,670 --> 00:12:26,510
for that is a collision it what<font color="#E5E5E5"> that</font>

300
00:12:23,600 --> 00:12:28,220
means is that if you're reversing given

301
00:12:26,510 --> 00:12:31,310
a digestion you trying to reproduce the

302
00:12:28,220 --> 00:12:32,630
password<font color="#CCCCCC"> that produce that</font><font color="#E5E5E5"> digest you</font>

303
00:12:31,310 --> 00:12:34,430
actually it doesn't really matter which

304
00:12:32,630 --> 00:12:37,340
one you get they're both actually the

305
00:12:34,430 --> 00:12:39,439
equivalent password so just by coming up

306
00:12:37,340 --> 00:12:40,550
with one basically satisfies the

307
00:12:39,440 --> 00:12:43,940
requirement for coming<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with any of</font>

308
00:12:40,550 --> 00:12:45,469
<font color="#E5E5E5">them just here's</font><font color="#CCCCCC"> the here's Google's</font>

309
00:12:43,940 --> 00:12:47,990
announcement this<font color="#E5E5E5"> was on februari 23rd</font>

310
00:12:45,470 --> 00:12:50,750
announcing a sha-1 collision so this has

311
00:12:47,990 --> 00:12:52,130
<font color="#CCCCCC">been</font><font color="#E5E5E5"> this is pretty topical and that's</font>

312
00:12:50,750 --> 00:12:53,030
<font color="#CCCCCC">actually that's outside</font><font color="#E5E5E5"> of the scope of</font>

313
00:12:52,130 --> 00:12:55,340
<font color="#E5E5E5">this talk it's actually really</font>

314
00:12:53,030 --> 00:12:59,060
interesting look into<font color="#E5E5E5"> I believe it was</font>

315
00:12:55,340 --> 00:12:59,529
one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> online git repository someone</font>

316
00:12:59,060 --> 00:13:02,619
actually

317
00:12:59,529 --> 00:13:05,350
floated both PDF knowing that<font color="#CCCCCC"> they use</font>

318
00:13:02,620 --> 00:13:08,499
sha-1 as their file deduplication

319
00:13:05,350 --> 00:13:12,220
mechanism and crash the<font color="#E5E5E5"> system so let a</font>

320
00:13:08,499 --> 00:13:14,259
lot of<font color="#E5E5E5"> fun involved in that so just a</font>

321
00:13:12,220 --> 00:13:16,449
really simple example of how servers

322
00:13:14,259 --> 00:13:18,999
might store this information when<font color="#CCCCCC"> you</font>

323
00:13:16,449 --> 00:13:21,008
log into a system and you give<font color="#CCCCCC"> it your</font>

324
00:13:18,999 --> 00:13:22,449
username<font color="#CCCCCC"> and password that system</font>

325
00:13:21,009 --> 00:13:24,129
doesn't actually keep your password

326
00:13:22,449 --> 00:13:27,040
there's lots<font color="#E5E5E5"> of different schemes</font>

327
00:13:24,129 --> 00:13:29,050
mechanism mechanisms for how they store

328
00:13:27,040 --> 00:13:31,449
this information but generally what they

329
00:13:29,050 --> 00:13:33,878
store is your username<font color="#E5E5E5"> and the digest of</font>

330
00:13:31,449 --> 00:13:35,258
your password and the theory is<font color="#CCCCCC"> that if</font>

331
00:13:33,879 --> 00:13:37,209
<font color="#E5E5E5">someone were to break into this is going</font>

332
00:13:35,259 --> 00:13:38,620
to store the password file all they

333
00:13:37,209 --> 00:13:39,819
<font color="#E5E5E5">would get would be the digest and that</font>

334
00:13:38,620 --> 00:13:43,959
would<font color="#CCCCCC"> be very very difficult for</font><font color="#E5E5E5"> them to</font>

335
00:13:39,819 --> 00:13:45,878
then we produce the passwords so as we

336
00:13:43,959 --> 00:13:48,579
saw as we've seen with a lot of<font color="#E5E5E5"> these</font>

337
00:13:45,879 --> 00:13:50,350
<font color="#E5E5E5">big leaks like Ashley Madison that's not</font>

338
00:13:48,579 --> 00:13:54,069
the<font color="#CCCCCC"> case it's possible very frequently</font>

339
00:13:50,350 --> 00:13:55,360
to recover the<font color="#E5E5E5"> password and just a</font>

340
00:13:54,069 --> 00:13:57,670
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit of hot diagnose logins work</font>

341
00:13:55,360 --> 00:13:58,870
is a very very<font color="#CCCCCC"> simple example</font><font color="#E5E5E5"> the idea</font>

342
00:13:57,670 --> 00:14:01,300
is either inna you may send your

343
00:13:58,870 --> 00:14:03,790
username<font color="#CCCCCC"> and password to a service they</font>

344
00:14:01,300 --> 00:14:05,979
will hash your password<font color="#CCCCCC"> and produce the</font>

345
00:14:03,790 --> 00:14:07,899
digest and compare that<font color="#E5E5E5"> digest so the</font>

346
00:14:05,980 --> 00:14:08,980
one they have in their file and that

347
00:14:07,899 --> 00:14:11,559
will determine whether<font color="#CCCCCC"> you're then</font>

348
00:14:08,980 --> 00:14:13,480
authorized to use the<font color="#E5E5E5"> service or not</font>

349
00:14:11,559 --> 00:14:14,709
<font color="#E5E5E5">sometimes the hashing happens on your</font>

350
00:14:13,480 --> 00:14:16,269
side something<font color="#E5E5E5"> happens it happens on</font>

351
00:14:14,709 --> 00:14:18,758
their side<font color="#CCCCCC"> to sort</font><font color="#E5E5E5"> of depends on what</font>

352
00:14:16,269 --> 00:14:23,350
the<font color="#CCCCCC"> scheme ISM and how they design your</font>

353
00:14:18,759 --> 00:14:26,199
system so just again there's no easily

354
00:14:23,350 --> 00:14:30,040
computable reverse function<font color="#CCCCCC"> r of da</font>

355
00:14:26,199 --> 00:14:32,019
equals<font color="#CCCCCC"> p but even though art of DV</font>

356
00:14:30,040 --> 00:14:33,969
equals P doesn't exist we can sort of

357
00:14:32,019 --> 00:14:35,350
pretend that it does and if we<font color="#E5E5E5"> live in a</font>

358
00:14:33,970 --> 00:14:39,459
world<font color="#E5E5E5"> of pretend a lot of things are</font>

359
00:14:35,350 --> 00:14:42,160
possible<font color="#CCCCCC"> all right so everyone's smart</font>

360
00:14:39,459 --> 00:14:44,378
in the land of make-believe and so let's

361
00:14:42,160 --> 00:14:46,600
talk<font color="#CCCCCC"> about what</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> means right so</font>

362
00:14:44,379 --> 00:14:47,980
here's here's the simplest idea alright

363
00:14:46,600 --> 00:14:49,990
so let's simulate our of the equal C

364
00:14:47,980 --> 00:14:51,220
using what's called<font color="#E5E5E5"> brute-forcing and</font>

365
00:14:49,990 --> 00:14:53,589
that basically means we're going<font color="#E5E5E5"> to</font>

366
00:14:51,220 --> 00:14:55,689
given a set of rules we're<font color="#E5E5E5"> going to</font>

367
00:14:53,589 --> 00:14:56,920
design a patchwork space and we're<font color="#CCCCCC"> just</font>

368
00:14:55,689 --> 00:14:59,649
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> simply start trying all the</font>

369
00:14:56,920 --> 00:15:01,660
passwords in that space and hash each of

370
00:14:59,649 --> 00:15:05,499
those passwords until they produce a

371
00:15:01,660 --> 00:15:08,110
digest that is the digest that we desire

372
00:15:05,499 --> 00:15:10,389
right so here's a little pseudo code and

373
00:15:08,110 --> 00:15:12,790
you can<font color="#E5E5E5"> see given some digest I have a</font>

374
00:15:10,389 --> 00:15:13,360
set of you<font color="#CCCCCC"> know p that is</font><font color="#E5E5E5"> designed some</font>

375
00:15:12,790 --> 00:15:14,500
passwords

376
00:15:13,360 --> 00:15:16,570
<font color="#CCCCCC">face and I'm</font><font color="#E5E5E5"> just going to</font><font color="#CCCCCC"> try them all</font>

377
00:15:14,500 --> 00:15:19,149
then hash them to see if<font color="#E5E5E5"> it matches the</font>

378
00:15:16,570 --> 00:15:20,680
digest and if it does i'm going to kick

379
00:15:19,149 --> 00:15:22,930
out and now<font color="#E5E5E5"> i know now i know what</font>

380
00:15:20,680 --> 00:15:25,089
either the original password was or some

381
00:15:22,930 --> 00:15:26,199
equivalent password and that's<font color="#E5E5E5"> the key</font>

382
00:15:25,089 --> 00:15:29,019
factor here and<font color="#CCCCCC"> i'm going to</font><font color="#E5E5E5"> do a little</font>

383
00:15:26,200 --> 00:15:31,000
<font color="#E5E5E5">live demonstration so this is on I think</font>

384
00:15:29,019 --> 00:15:33,220
it's eight digit pin my colleague time I

385
00:15:31,000 --> 00:15:34,899
<font color="#CCCCCC">Barris wrote this code and I'm going to</font>

386
00:15:33,220 --> 00:15:36,640
<font color="#E5E5E5">I'm going to brute force that and this</font>

387
00:15:34,899 --> 00:15:39,760
is the worst<font color="#E5E5E5"> case example where the pin</font>

388
00:15:36,640 --> 00:15:40,569
that I'm trying<font color="#E5E5E5"> to recover is all 9 i'm</font>

389
00:15:39,760 --> 00:15:42,459
gonna start<font color="#E5E5E5"> at the beginning of the</font>

390
00:15:40,570 --> 00:15:44,410
Patrick space and I'm going<font color="#E5E5E5"> to print out</font>

391
00:15:42,459 --> 00:15:45,399
an example<font color="#E5E5E5"> and this can give you it I</font>

392
00:15:44,410 --> 00:15:46,750
just want<font color="#CCCCCC"> to kind of give you an idea of</font>

393
00:15:45,399 --> 00:15:47,920
rough order of magnitude like what does

394
00:15:46,750 --> 00:15:50,140
<font color="#E5E5E5">this look like when I'm doing</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> and</font>

395
00:15:47,920 --> 00:15:55,060
how<font color="#E5E5E5"> long does this take</font><font color="#CCCCCC"> all right so</font>

396
00:15:50,140 --> 00:16:02,439
<font color="#CCCCCC">here's its tried 10 million try to 20</font>

397
00:15:55,060 --> 00:16:03,339
million 30 million from about and almost

398
00:16:02,440 --> 00:16:05,470
30 million so we're about<font color="#E5E5E5"> a third</font>

399
00:16:03,339 --> 00:16:09,040
through the<font color="#E5E5E5"> space this is a very very</font>

400
00:16:05,470 --> 00:16:10,510
small space and the you can't see if the

401
00:16:09,040 --> 00:16:14,709
code is already provided with the digest

402
00:16:10,510 --> 00:16:17,500
that<font color="#E5E5E5"> it's tried to hang question this is</font>

403
00:16:14,709 --> 00:16:22,599
<font color="#CCCCCC">shawn 512 so this is still under this</font>

404
00:16:17,500 --> 00:16:26,320
standard considered to be a secure hash

405
00:16:22,600 --> 00:16:28,300
pipe cryptographic hash<font color="#CCCCCC"> ok you can</font>

406
00:16:26,320 --> 00:16:29,649
imagine though on a much larger password

407
00:16:28,300 --> 00:16:31,569
space this<font color="#CCCCCC"> is going to take a lot longer</font>

408
00:16:29,649 --> 00:16:32,620
and most of our passwords are not just

409
00:16:31,570 --> 00:16:34,810
pins they're going to be have

410
00:16:32,620 --> 00:16:36,760
alphanumerics are going to have you know

411
00:16:34,810 --> 00:16:39,219
loving 12-digit special characters all

412
00:16:36,760 --> 00:16:41,199
kinds of things but you know just<font color="#E5E5E5"> real</font>

413
00:16:39,220 --> 00:16:42,610
simply you can<font color="#E5E5E5"> see and this is by the</font>

414
00:16:41,199 --> 00:16:44,109
way this is<font color="#E5E5E5"> running single threaded so</font>

415
00:16:42,610 --> 00:16:47,079
this is a really<font color="#CCCCCC"> really worst-case</font>

416
00:16:44,110 --> 00:16:49,600
scenario ideally you eat<font color="#CCCCCC"> multi-thread</font>

417
00:16:47,079 --> 00:16:52,479
this or use a GPU or something to try to

418
00:16:49,600 --> 00:16:57,670
attack this problem but we're almost

419
00:16:52,480 --> 00:17:01,899
done so on this reasonably modern laptop

420
00:16:57,670 --> 00:17:07,418
single-threaded performance sha-512 it

421
00:17:01,899 --> 00:17:09,939
takes<font color="#CCCCCC"> there we go about there we go</font>

422
00:17:07,419 --> 00:17:12,160
about 90 seconds members consistent

423
00:17:09,939 --> 00:17:14,140
across multiple runs of this to reverse

424
00:17:12,160 --> 00:17:17,949
that right so it's found I found the pin

425
00:17:14,140 --> 00:17:21,339
which was all<font color="#E5E5E5"> nines we're</font><font color="#CCCCCC"> very excited</font>

426
00:17:17,949 --> 00:17:23,530
about that<font color="#CCCCCC"> so you can imagine if</font><font color="#E5E5E5"> I had</font>

427
00:17:21,339 --> 00:17:24,550
60 million passwords let's say I was you

428
00:17:23,530 --> 00:17:26,619
know<font color="#E5E5E5"> I receive the Ashley Madison</font>

429
00:17:24,550 --> 00:17:27,129
password list and I was<font color="#E5E5E5"> trying to</font>

430
00:17:26,619 --> 00:17:28,840
reverse the

431
00:17:27,130 --> 00:17:31,060
and<font color="#E5E5E5"> I was able to get to pay 11 million</font>

432
00:17:28,840 --> 00:17:33,699
of those at 90 seconds of pop that's

433
00:17:31,060 --> 00:17:40,780
quite a long time right so this takes so

434
00:17:33,700 --> 00:17:48,550
this takes a long<font color="#E5E5E5"> time yeah for each for</font>

435
00:17:40,780 --> 00:17:50,440
each file you can but remember the pep

436
00:17:48,550 --> 00:17:56,770
in that kind of example is going to be

437
00:17:50,440 --> 00:17:58,360
much bigger than<font color="#CCCCCC"> this so yeah yeah yeah</font>

438
00:17:56,770 --> 00:17:59,320
you can<font color="#E5E5E5"> yeah you can check you</font><font color="#CCCCCC"> can check</font>

439
00:17:58,360 --> 00:18:01,659
it against all of that and that would be

440
00:17:59,320 --> 00:18:03,429
a feat up this<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to go actually</font>

441
00:18:01,660 --> 00:18:05,260
through so many ideas about how you can

442
00:18:03,430 --> 00:18:07,420
speed this up but<font color="#E5E5E5"> that would</font><font color="#CCCCCC"> be an</font>

443
00:18:05,260 --> 00:18:09,280
example there's different ways you can

444
00:18:07,420 --> 00:18:13,420
parallel eyes the problem that would<font color="#E5E5E5"> be</font>

445
00:18:09,280 --> 00:18:14,830
an idea right so but the basic premise

446
00:18:13,420 --> 00:18:18,400
is we want<font color="#E5E5E5"> to make the pass workspace</font>

447
00:18:14,830 --> 00:18:20,409
smaller and the truth<font color="#E5E5E5"> of it is we don't</font>

448
00:18:18,400 --> 00:18:21,970
all just use a you know string of random

449
00:18:20,410 --> 00:18:24,910
characters for our passwords we have

450
00:18:21,970 --> 00:18:26,980
something we have to remember or if

451
00:18:24,910 --> 00:18:29,110
we're terrible personal like<font color="#CCCCCC"> i am</font><font color="#E5E5E5"> you</font>

452
00:18:26,980 --> 00:18:30,610
<font color="#E5E5E5">probably write it down somewhere or take</font>

453
00:18:29,110 --> 00:18:31,899
a picture of it and put on your phone as

454
00:18:30,610 --> 00:18:34,570
we<font color="#E5E5E5"> heard this morning that's really</font>

455
00:18:31,900 --> 00:18:36,160
awful terrible idea<font color="#E5E5E5"> but there's all</font>

456
00:18:34,570 --> 00:18:37,480
kinds of strategies for this right so a

457
00:18:36,160 --> 00:18:40,030
real simple<font color="#E5E5E5"> one is to do what's called a</font>

458
00:18:37,480 --> 00:18:42,520
dictionary model where you have a list

459
00:18:40,030 --> 00:18:44,470
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> English words and then I'm going</font>

460
00:18:42,520 --> 00:18:46,600
<font color="#CCCCCC">to actually a little example here right</font>

461
00:18:44,470 --> 00:18:48,520
and then you have some rule about how

462
00:18:46,600 --> 00:18:49,840
you permute each dictionary word so you

463
00:18:48,520 --> 00:18:52,210
can produce some variants of that word

464
00:18:49,840 --> 00:18:54,040
and<font color="#E5E5E5"> then you just sort of use those as</font>

465
00:18:52,210 --> 00:18:57,280
<font color="#CCCCCC">the inputs right so you've you're</font>

466
00:18:54,040 --> 00:18:58,720
shrinking the space down to something

467
00:18:57,280 --> 00:19:01,000
more manageable to<font color="#CCCCCC"> take</font><font color="#E5E5E5"> less time to</font>

468
00:18:58,720 --> 00:19:02,680
compute there's other ones too that look

469
00:19:01,000 --> 00:19:04,150
at like type ability modeling right so

470
00:19:02,680 --> 00:19:06,340
you don't want<font color="#CCCCCC"> a</font><font color="#E5E5E5"> password that's really</font>

471
00:19:04,150 --> 00:19:07,330
hard to type so now you have to be able

472
00:19:06,340 --> 00:19:10,659
to remember it and you have to<font color="#E5E5E5"> be able</font>

473
00:19:07,330 --> 00:19:12,490
to type it easily or you could look<font color="#E5E5E5"> at</font>

474
00:19:10,660 --> 00:19:14,470
<font color="#CCCCCC">you know profiles a human memory like</font>

475
00:19:12,490 --> 00:19:15,970
how long have password be and what

476
00:19:14,470 --> 00:19:18,040
complexity can<font color="#E5E5E5"> the</font><font color="#CCCCCC"> passwords have that</font>

477
00:19:15,970 --> 00:19:19,300
the average person conservative members

478
00:19:18,040 --> 00:19:21,940
there's all kinds<font color="#E5E5E5"> of rules around this</font>

479
00:19:19,300 --> 00:19:23,830
<font color="#CCCCCC">and ideas about this approach but the</font>

480
00:19:21,940 --> 00:19:25,240
basic idea is you know that's<font color="#CCCCCC"> cheadle</font>

481
00:19:23,830 --> 00:19:26,379
let's get rid of most of the<font color="#CCCCCC"> factors</font>

482
00:19:25,240 --> 00:19:29,200
<font color="#CCCCCC">that we don't think that people could</font>

483
00:19:26,380 --> 00:19:31,060
ever use some<font color="#CCCCCC"> other ideas to make it</font>

484
00:19:29,200 --> 00:19:32,470
faster right so instead of starting at

485
00:19:31,060 --> 00:19:34,570
the beginning of a password space and

486
00:19:32,470 --> 00:19:35,830
trying every single one because in this

487
00:19:34,570 --> 00:19:37,960
case you<font color="#CCCCCC"> know you saw a</font><font color="#E5E5E5"> sort of a</font>

488
00:19:35,830 --> 00:19:39,610
worst-case example where the password

489
00:19:37,960 --> 00:19:40,900
was actually at the end<font color="#E5E5E5"> of the space I</font>

490
00:19:39,610 --> 00:19:43,000
can just randomly

491
00:19:40,900 --> 00:19:45,550
<font color="#E5E5E5">sampled across the space and hope that</font>

492
00:19:43,000 --> 00:19:46,870
that speeds it up and that<font color="#CCCCCC"> can actually</font>

493
00:19:45,550 --> 00:19:49,629
be a<font color="#E5E5E5"> performance improvement believe it</font>

494
00:19:46,870 --> 00:19:51,070
or not but you also want<font color="#E5E5E5"> to keep track</font>

495
00:19:49,630 --> 00:19:52,660
of what you tried in the past so you

496
00:19:51,070 --> 00:19:55,389
don't<font color="#CCCCCC"> just keep trying the same thing</font>

497
00:19:52,660 --> 00:19:57,370
and you want good entropy sources so

498
00:19:55,390 --> 00:19:58,780
that as you randomly sample you don't

499
00:19:57,370 --> 00:20:00,370
get stuck in non-productive clusters

500
00:19:58,780 --> 00:20:04,600
where the password is maybe over here

501
00:20:00,370 --> 00:20:05,830
parallel<font color="#E5E5E5"> lines right you can use GPUs</font>

502
00:20:04,600 --> 00:20:08,439
that sort of the hot topic right now

503
00:20:05,830 --> 00:20:09,820
here's<font color="#E5E5E5"> my little animation the best I</font>

504
00:20:08,440 --> 00:20:14,170
<font color="#E5E5E5">can do in PowerPoint right so I found</font>

505
00:20:09,820 --> 00:20:16,179
found the password one of the<font color="#E5E5E5"> problems</font>

506
00:20:14,170 --> 00:20:18,520
is that not all of the hash algorithms

507
00:20:16,180 --> 00:20:22,030
have a GPU implementation and quite

508
00:20:18,520 --> 00:20:24,370
frequently the way that passwords are

509
00:20:22,030 --> 00:20:26,260
hash is that someone will assault the

510
00:20:24,370 --> 00:20:28,000
password space or they'll modify the

511
00:20:26,260 --> 00:20:30,879
algorithm lightly or wrap it within

512
00:20:28,000 --> 00:20:36,220
another approach in getting that to work

513
00:20:30,880 --> 00:20:37,660
on a GP can be very very<font color="#CCCCCC"> challenging so</font>

514
00:20:36,220 --> 00:20:38,920
these are posters actually this is this

515
00:20:37,660 --> 00:20:40,360
is sort of<font color="#CCCCCC"> what</font><font color="#E5E5E5"> the state of the art is</font>

516
00:20:38,920 --> 00:20:42,340
you can go on the internet<font color="#CCCCCC"> today and you</font>

517
00:20:40,360 --> 00:20:44,199
<font color="#CCCCCC">can download these tools John the Ripper</font>

518
00:20:42,340 --> 00:20:46,030
hash cat<font color="#CCCCCC"> Dave Grohl and</font><font color="#E5E5E5"> they use</font>

519
00:20:44,200 --> 00:20:47,140
different strategies different

520
00:20:46,030 --> 00:20:50,410
approaches for trying to reverse

521
00:20:47,140 --> 00:20:52,090
passwords<font color="#E5E5E5"> you know a lot of them have do</font>

522
00:20:50,410 --> 00:20:53,350
<font color="#E5E5E5">you have some pretty cool GPU</font>

523
00:20:52,090 --> 00:20:58,689
implementations for a lot of the hash

524
00:20:53,350 --> 00:20:59,469
algorithm I think<font color="#CCCCCC"> having hash</font><font color="#E5E5E5"> got</font>

525
00:20:58,690 --> 00:21:02,320
actually has a very sophisticated

526
00:20:59,470 --> 00:21:03,640
dictionary based approach which can

527
00:21:02,320 --> 00:21:05,470
actually really speed things up quite a

528
00:21:03,640 --> 00:21:09,820
bit but it still<font color="#E5E5E5"> takes time it takes a</font>

529
00:21:05,470 --> 00:21:12,490
lot of time<font color="#E5E5E5"> to crack each password so</font>

530
00:21:09,820 --> 00:21:13,389
what's another<font color="#E5E5E5"> approach right so we you</font>

531
00:21:12,490 --> 00:21:16,870
know<font color="#E5E5E5"> we've talked about how we can</font>

532
00:21:13,390 --> 00:21:19,780
<font color="#E5E5E5">muffler our way through doing this so</font>

533
00:21:16,870 --> 00:21:22,840
there's<font color="#E5E5E5"> a there's a wonderful research</font>

534
00:21:19,780 --> 00:21:25,360
or martin hellman if you have study in a

535
00:21:22,840 --> 00:21:26,770
cryptography doll you'll be familiar

536
00:21:25,360 --> 00:21:29,590
something called the diffie-hellman

537
00:21:26,770 --> 00:21:31,180
<font color="#CCCCCC">exchange is</font><font color="#E5E5E5"> the same Hellman not the</font>

538
00:21:29,590 --> 00:21:34,270
helm and mayonnaise guy different that's

539
00:21:31,180 --> 00:21:35,350
a different guy confusing<font color="#E5E5E5"> I get confused</font>

540
00:21:34,270 --> 00:21:38,500
<font color="#E5E5E5">about all the time because I'm always</font>

541
00:21:35,350 --> 00:21:39,639
thinking about food but<font color="#E5E5E5"> he also is known</font>

542
00:21:38,500 --> 00:21:42,130
for coming up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> an approach called</font>

543
00:21:39,640 --> 00:21:44,290
rainbow table and if you<font color="#CCCCCC"> ever heard of</font>

544
00:21:42,130 --> 00:21:45,610
rainbow tables on the<font color="#CCCCCC"> Internet I'm</font><font color="#E5E5E5"> going</font>

545
00:21:44,290 --> 00:21:46,420
<font color="#E5E5E5">to actually go through a little bit an</font>

546
00:21:45,610 --> 00:21:47,530
explanation what they are because

547
00:21:46,420 --> 00:21:50,710
they're really cool it's actually a

548
00:21:47,530 --> 00:21:53,860
really elegant and cool way of having a

549
00:21:50,710 --> 00:21:54,460
time-space trade-off for reversing

550
00:21:53,860 --> 00:21:55,959
passwords

551
00:21:54,460 --> 00:21:58,450
they have some downsides but they're

552
00:21:55,960 --> 00:22:00,250
pretty interesting right so just<font color="#E5E5E5"> kind of</font>

553
00:21:58,450 --> 00:22:02,740
few more<font color="#CCCCCC"> definitions to help explain</font>

554
00:22:00,250 --> 00:22:04,150
<font color="#E5E5E5">what a rainbow table is so we talked</font>

555
00:22:02,740 --> 00:22:05,890
<font color="#CCCCCC">about what a hash function is so you can</font>

556
00:22:04,150 --> 00:22:08,200
see here I have a slight change<font color="#E5E5E5"> of the</font>

557
00:22:05,890 --> 00:22:11,080
notation right so<font color="#E5E5E5"> I have h of P sub</font><font color="#CCCCCC"> n</font>

558
00:22:08,200 --> 00:22:13,330
equals d sub n right so assume that<font color="#E5E5E5"> I</font>

559
00:22:11,080 --> 00:22:16,090
have some ordering to the password

560
00:22:13,330 --> 00:22:17,379
digest pairs and then his key

561
00:22:16,090 --> 00:22:20,409
contribution is coming up with what's

562
00:22:17,380 --> 00:22:23,110
called a reduction function and what

563
00:22:20,410 --> 00:22:26,170
that does that map digest back into the

564
00:22:23,110 --> 00:22:28,360
password space it's not<font color="#E5E5E5"> a reversal it's</font>

565
00:22:26,170 --> 00:22:30,220
just some rule set that says if I have

566
00:22:28,360 --> 00:22:31,479
some digest and I run it<font color="#E5E5E5"> to this</font>

567
00:22:30,220 --> 00:22:33,460
function<font color="#CCCCCC"> i will produce something which</font>

568
00:22:31,480 --> 00:22:36,490
is valid of against the rules of the

569
00:22:33,460 --> 00:22:37,630
password space<font color="#CCCCCC"> ok so you can kind of</font>

570
00:22:36,490 --> 00:22:41,800
think it may be like an inverse of a

571
00:22:37,630 --> 00:22:43,330
hash function not a reverse and what's

572
00:22:41,800 --> 00:22:45,190
cool about this if you use them in

573
00:22:43,330 --> 00:22:47,379
sequence you<font color="#CCCCCC"> can produce what's called a</font>

574
00:22:45,190 --> 00:22:50,710
hash chain so you can see here<font color="#CCCCCC"> i</font><font color="#E5E5E5"> have h</font>

575
00:22:47,380 --> 00:22:54,010
of<font color="#E5E5E5"> P sub</font><font color="#CCCCCC"> N equals</font><font color="#E5E5E5"> V sub n</font><font color="#CCCCCC"> be then the</font>

576
00:22:50,710 --> 00:22:55,690
reverse of d sub n equals P sub n plus 1

577
00:22:54,010 --> 00:22:58,150
so I kind<font color="#E5E5E5"> of move forward in this chain</font>

578
00:22:55,690 --> 00:23:00,160
and then I'd<font color="#E5E5E5"> I take the hash of that and</font>

579
00:22:58,150 --> 00:23:03,640
I take the reduction of that and so on

580
00:23:00,160 --> 00:23:07,900
and<font color="#E5E5E5"> so forth right and what a rainbow</font>

581
00:23:03,640 --> 00:23:11,980
table is simply a set of hash chains<font color="#CCCCCC"> ok</font>

582
00:23:07,900 --> 00:23:14,260
so you<font color="#E5E5E5"> can see here I'm calling here at</font>

583
00:23:11,980 --> 00:23:17,890
the top and hash chain see<font color="#E5E5E5"> I'm going to</font>

584
00:23:14,260 --> 00:23:19,960
call it C sub 1 right which is the set

585
00:23:17,890 --> 00:23:21,970
of where the list<font color="#E5E5E5"> of passwords and</font>

586
00:23:19,960 --> 00:23:23,800
digest in the sequence that they would

587
00:23:21,970 --> 00:23:29,110
<font color="#CCCCCC">be produced if you were to alternate</font>

588
00:23:23,800 --> 00:23:30,399
between hashing and reducing I have been

589
00:23:29,110 --> 00:23:31,419
<font color="#CCCCCC">talking about the algorithm I think it's</font>

590
00:23:30,400 --> 00:23:33,040
a lot more interesting<font color="#CCCCCC"> if you can just</font>

591
00:23:31,420 --> 00:23:36,670
sort of see it i<font color="#E5E5E5"> have an example i</font><font color="#CCCCCC"> can</font>

592
00:23:33,040 --> 00:23:38,830
show you but<font color="#E5E5E5"> the key contribution here</font>

593
00:23:36,670 --> 00:23:41,530
and why this is important is that since

594
00:23:38,830 --> 00:23:44,649
<font color="#E5E5E5">you know what this password was at the</font>

595
00:23:41,530 --> 00:23:48,280
start<font color="#E5E5E5"> of a chain and then you alternate</font>

596
00:23:44,650 --> 00:23:50,710
through some number of the hashes in the

597
00:23:48,280 --> 00:23:53,260
reduction function you'll know what the

598
00:23:50,710 --> 00:23:54,880
last<font color="#E5E5E5"> digest was that was produced which</font>

599
00:23:53,260 --> 00:23:56,410
means you can throw away all the junk in

600
00:23:54,880 --> 00:23:57,760
the middle and all you<font color="#E5E5E5"> have to do is</font>

601
00:23:56,410 --> 00:24:00,220
store the first passwords and last

602
00:23:57,760 --> 00:24:01,720
digest and you can reproduce fairly

603
00:24:00,220 --> 00:24:03,940
trivially all the stuff that<font color="#E5E5E5"> was in the</font>

604
00:24:01,720 --> 00:24:05,410
middle of that and that saves an

605
00:24:03,940 --> 00:24:07,170
enormous amount of space so you can

606
00:24:05,410 --> 00:24:08,820
<font color="#CCCCCC">imagine if I have a</font>

607
00:24:07,170 --> 00:24:11,430
hash chain that goes on for millions of

608
00:24:08,820 --> 00:24:12,750
terms I can<font color="#CCCCCC"> eat a store a million you</font>

609
00:24:11,430 --> 00:24:14,670
know the million of those<font color="#E5E5E5"> terms are key</font>

610
00:24:12,750 --> 00:24:16,260
to store the first and<font color="#CCCCCC"> laughs of that</font>

611
00:24:14,670 --> 00:24:18,930
and easily we compute what's in the

612
00:24:16,260 --> 00:24:21,450
middle<font color="#E5E5E5"> okay so it's better than brute</font>

613
00:24:18,930 --> 00:24:24,090
force in the sense that<font color="#E5E5E5"> I only need to</font>

614
00:24:21,450 --> 00:24:26,100
work within a single chain rather than

615
00:24:24,090 --> 00:24:28,350
having to try things across<font color="#CCCCCC"> the entire</font>

616
00:24:26,100 --> 00:24:30,209
password space if you really<font color="#E5E5E5"> think about</font>

617
00:24:28,350 --> 00:24:32,610
it can<font color="#E5E5E5"> kind of squint a little bit this</font>

618
00:24:30,210 --> 00:24:34,860
is really a<font color="#CCCCCC"> very novel way of reducing</font>

619
00:24:32,610 --> 00:24:36,090
the password space so that we're<font color="#CCCCCC"> looking</font>

620
00:24:34,860 --> 00:24:37,469
at the space that only belongs in<font color="#CCCCCC"> the</font>

621
00:24:36,090 --> 00:24:40,980
chain it's a little harder to<font color="#E5E5E5"> describe</font>

622
00:24:37,470 --> 00:24:43,560
without doing a display what's cool is

623
00:24:40,980 --> 00:24:45,270
that into another another part of<font color="#E5E5E5"> this</font>

624
00:24:43,560 --> 00:24:47,070
that<font color="#E5E5E5"> someone has to pre-compute the</font>

625
00:24:45,270 --> 00:24:49,200
rainbow table to start with right you

626
00:24:47,070 --> 00:24:51,270
have to somebody have to<font color="#E5E5E5"> compute from</font>

627
00:24:49,200 --> 00:24:53,040
the first password to the last digest

628
00:24:51,270 --> 00:24:55,500
and answer store out of stuff somewhere

629
00:24:53,040 --> 00:24:56,879
that takes a long time to do turns out

630
00:24:55,500 --> 00:24:59,250
this is such a common approach you<font color="#E5E5E5"> can</font>

631
00:24:56,880 --> 00:25:01,200
just go online and buy sets of rainbow

632
00:24:59,250 --> 00:25:03,540
tables I<font color="#E5E5E5"> forget what side of gothos on</font>

633
00:25:01,200 --> 00:25:05,790
but it's<font color="#E5E5E5"> pretty easy to look up for</font>

634
00:25:03,540 --> 00:25:07,290
<font color="#CCCCCC">twenty seven hundred dollars available</font>

635
00:25:05,790 --> 00:25:10,080
by paypal they'll ship you a six

636
00:25:07,290 --> 00:25:14,070
terabyte hard drive with rainbow tables

637
00:25:10,080 --> 00:25:15,840
for md5 and sha-1 and was at ncl m which

638
00:25:14,070 --> 00:25:19,500
is a thing<font color="#E5E5E5"> to hash function and he uses</font>

639
00:25:15,840 --> 00:25:21,510
you know it's<font color="#E5E5E5"> not terribly expensive</font>

640
00:25:19,500 --> 00:25:26,520
compared to compute resources necessary

641
00:25:21,510 --> 00:25:27,690
to build this in the first place<font color="#CCCCCC"> and so</font>

642
00:25:26,520 --> 00:25:29,670
here's just a quick example of<font color="#E5E5E5"> how our</font>

643
00:25:27,690 --> 00:25:31,500
rainbow table might work<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm going to</font>

644
00:25:29,670 --> 00:25:34,500
have a rainbow table of<font color="#E5E5E5"> to change fairly</font>

645
00:25:31,500 --> 00:25:37,110
trivial chain one starts with password

646
00:25:34,500 --> 00:25:40,230
one and digest three chain two starts

647
00:25:37,110 --> 00:25:42,060
with password for and digest for so I

648
00:25:40,230 --> 00:25:45,660
have a digest I want to reverse died

649
00:25:42,060 --> 00:25:47,280
just two is I<font color="#CCCCCC"> just two in the rainbow</font>

650
00:25:45,660 --> 00:25:48,450
table so I'm going to<font color="#E5E5E5"> compare</font><font color="#CCCCCC"> to see one</font>

651
00:25:47,280 --> 00:25:52,080
and<font color="#E5E5E5"> that means are going to look at the</font>

652
00:25:48,450 --> 00:25:55,170
last I Jeff in c1 and now it's<font color="#E5E5E5"> not in</font>

653
00:25:52,080 --> 00:25:57,629
there d 2 does not<font color="#E5E5E5"> equal d3 what</font><font color="#CCCCCC"> about</font>

654
00:25:55,170 --> 00:26:01,500
you know it in<font color="#CCCCCC"> the second chain now</font><font color="#E5E5E5"> d 2</font>

655
00:25:57,630 --> 00:26:05,190
is<font color="#E5E5E5"> not be four so I have to do is reduce</font>

656
00:26:01,500 --> 00:26:08,430
d to produce another password hash<font color="#E5E5E5"> that</font>

657
00:26:05,190 --> 00:26:10,950
<font color="#E5E5E5">I'm gonna get d3 try again when i do</font>

658
00:26:08,430 --> 00:26:13,200
that i find that<font color="#CCCCCC"> ya b3 is in the first</font>

659
00:26:10,950 --> 00:26:15,300
chain that<font color="#E5E5E5"> means now i know i have from</font>

660
00:26:13,200 --> 00:26:17,280
knowledge that<font color="#E5E5E5"> d2 is somewhere in the</font>

661
00:26:15,300 --> 00:26:18,870
first chain

662
00:26:17,280 --> 00:26:21,030
<font color="#CCCCCC">alright so</font><font color="#E5E5E5"> I'm going to take the first</font>

663
00:26:18,870 --> 00:26:25,469
password from that chain I'm<font color="#E5E5E5"> going to</font>

664
00:26:21,030 --> 00:26:27,030
hash it reduce that hash that and I'm

665
00:26:25,470 --> 00:26:29,280
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find that deep when i arrived</font>

666
00:26:27,030 --> 00:26:30,870
at d2 I now know<font color="#CCCCCC"> what the password was</font>

667
00:26:29,280 --> 00:26:33,510
that produce that and that's how you

668
00:26:30,870 --> 00:26:34,949
reverse with regular table<font color="#E5E5E5"> basically how</font>

669
00:26:33,510 --> 00:26:39,690
the algorithms were kind<font color="#E5E5E5"> of nice</font>

670
00:26:34,950 --> 00:26:43,020
<font color="#CCCCCC">Nelligan so one of the downsides of</font>

671
00:26:39,690 --> 00:26:47,190
rainbow tables is that it's<font color="#CCCCCC"> very hard to</font>

672
00:26:43,020 --> 00:26:48,600
construct reduction functions that

673
00:26:47,190 --> 00:26:51,090
ensure that you cover the entire

674
00:26:48,600 --> 00:26:52,919
password space so when you<font color="#CCCCCC"> pre-compute</font>

675
00:26:51,090 --> 00:26:54,300
these tables you want to make<font color="#CCCCCC"> sure you</font>

676
00:26:52,920 --> 00:26:56,640
cover as much of the space as possible

677
00:26:54,300 --> 00:26:59,010
so that when you do try to attempt a

678
00:26:56,640 --> 00:27:00,720
reversal you're you're guaranteeing

679
00:26:59,010 --> 00:27:02,580
you're looking within the space that you

680
00:27:00,720 --> 00:27:07,710
want let me<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> go back here yeah</font>

681
00:27:02,580 --> 00:27:09,300
here on the list for<font color="#E5E5E5"> sale though they</font>

682
00:27:07,710 --> 00:27:10,920
actually list the success rate in

683
00:27:09,300 --> 00:27:13,440
another way of interpreting that is that

684
00:27:10,920 --> 00:27:15,480
is the password space that that table

685
00:27:13,440 --> 00:27:17,160
covers so they don't cover one hundred

686
00:27:15,480 --> 00:27:18,720
percent of the password space if you

687
00:27:17,160 --> 00:27:20,670
some here say ninety six point eight

688
00:27:18,720 --> 00:27:22,020
percent that meant the reduction

689
00:27:20,670 --> 00:27:24,870
functions that they're<font color="#E5E5E5"> using we're not</font>

690
00:27:22,020 --> 00:27:29,580
able<font color="#E5E5E5"> to map into those sort of weird</font>

691
00:27:24,870 --> 00:27:33,330
parts of the password space and<font color="#CCCCCC"> we mean</font>

692
00:27:29,580 --> 00:27:35,100
<font color="#CCCCCC">here</font><font color="#E5E5E5"> in you know worst case if you saw</font>

693
00:27:33,330 --> 00:27:36,960
my little trivial example<font color="#E5E5E5"> I started with</font>

694
00:27:35,100 --> 00:27:39,240
the digest that wasn't in any of the

695
00:27:36,960 --> 00:27:42,120
chain so I had to do some computation on

696
00:27:39,240 --> 00:27:44,310
that digest eventually find one there's

697
00:27:42,120 --> 00:27:46,469
the chance that I could do that forever

698
00:27:44,310 --> 00:27:47,520
and never in<font color="#E5E5E5"> you know never end up with</font>

699
00:27:46,470 --> 00:27:49,950
<font color="#E5E5E5">something that match one of the change</font>

700
00:27:47,520 --> 00:27:55,110
sadface but you know that's<font color="#CCCCCC"> just the way</font>

701
00:27:49,950 --> 00:27:57,840
it goes there's you know a lot<font color="#E5E5E5"> of also</font>

702
00:27:55,110 --> 00:28:01,290
discussion in difficulty around how<font color="#CCCCCC"> long</font>

703
00:27:57,840 --> 00:28:04,080
should a chain be so that<font color="#E5E5E5"> I can balance</font>

704
00:28:01,290 --> 00:28:06,120
storage versus compute time when I'm

705
00:28:04,080 --> 00:28:09,570
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to do a reversal not always clear</font>

706
00:28:06,120 --> 00:28:12,209
what the optimal<font color="#CCCCCC"> solution is excuse me</font>

707
00:28:09,570 --> 00:28:13,980
and there's some other problems so if I

708
00:28:12,210 --> 00:28:15,900
<font color="#E5E5E5">craft a reduction function that produces</font>

709
00:28:13,980 --> 00:28:18,960
<font color="#E5E5E5">a password that's somewhere prior in the</font>

710
00:28:15,900 --> 00:28:20,340
chain<font color="#E5E5E5"> I produce a loop and that means I</font>

711
00:28:18,960 --> 00:28:22,080
can basically to circle around in the

712
00:28:20,340 --> 00:28:23,490
same chain forever and that's not that's

713
00:28:22,080 --> 00:28:25,290
not very desirable it's not something we

714
00:28:23,490 --> 00:28:27,180
want<font color="#CCCCCC"> to do now or I could have</font><font color="#E5E5E5"> two</font>

715
00:28:25,290 --> 00:28:30,389
<font color="#E5E5E5">chains that at some point merge into one</font>

716
00:28:27,180 --> 00:28:31,140
another it's also a problem so actually

717
00:28:30,390 --> 00:28:35,310
<font color="#E5E5E5">modern</font>

718
00:28:31,140 --> 00:28:37,020
from a modern rainbow table

719
00:28:35,310 --> 00:28:38,970
implementations actually use a sequence

720
00:28:37,020 --> 00:28:41,250
of reduction<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> it's again</font>

721
00:28:38,970 --> 00:28:43,530
producing one is difficult producing

722
00:28:41,250 --> 00:28:44,910
multiple is even more difficult<font color="#E5E5E5"> but it</font>

723
00:28:43,530 --> 00:28:47,430
will use that sequence of reduction

724
00:28:44,910 --> 00:28:49,260
function in a specific order and that

725
00:28:47,430 --> 00:28:50,670
order is known so that when you go to

726
00:28:49,260 --> 00:28:55,410
reduce the reversal it's pretty easy<font color="#CCCCCC"> to</font>

727
00:28:50,670 --> 00:28:57,510
<font color="#CCCCCC">figure that</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> alright so based on some</font>

728
00:28:55,410 --> 00:28:59,250
research we did it noblesse we came up

729
00:28:57,510 --> 00:29:00,450
with a new idea what I'm saying this<font color="#E5E5E5"> is</font>

730
00:28:59,250 --> 00:29:03,990
better or worse it's just a different

731
00:29:00,450 --> 00:29:06,030
approach but the idea is again how do we

732
00:29:03,990 --> 00:29:07,740
shrink the<font color="#E5E5E5"> pasture space or how do we</font>

733
00:29:06,030 --> 00:29:10,500
not visit parts of the<font color="#CCCCCC"> pasture space</font>

734
00:29:07,740 --> 00:29:13,920
that we know for certain are not going

735
00:29:10,500 --> 00:29:15,990
to contain a successful reversal and saw

736
00:29:13,920 --> 00:29:19,380
say when it starts to a password space

737
00:29:15,990 --> 00:29:20,970
and then<font color="#CCCCCC"> eventually i'll find there</font><font color="#E5E5E5"> a</font>

738
00:29:19,380 --> 00:29:23,370
little<font color="#CCCCCC"> green bar that's the password</font><font color="#E5E5E5"> i'm</font>

739
00:29:20,970 --> 00:29:24,870
looking for how do I ignore the rest of

740
00:29:23,370 --> 00:29:29,280
the space that white space but I don't

741
00:29:24,870 --> 00:29:30,389
want to deal<font color="#CCCCCC"> with okay so just kind of a</font>

742
00:29:29,280 --> 00:29:31,889
<font color="#CCCCCC">little bit of an explanation</font><font color="#E5E5E5"> the</font>

743
00:29:30,390 --> 00:29:34,260
background on this let's say I<font color="#CCCCCC"> have a</font>

744
00:29:31,890 --> 00:29:37,710
password space that is just two digit

745
00:29:34,260 --> 00:29:39,510
pins very<font color="#E5E5E5"> very trivial Patrick space and</font>

746
00:29:37,710 --> 00:29:41,400
I have a digest space that are three

747
00:29:39,510 --> 00:29:44,400
digit alphas again a very very trivial

748
00:29:41,400 --> 00:29:45,870
and simple digest space<font color="#CCCCCC"> all right so</font>

749
00:29:44,400 --> 00:29:48,090
what hash function does it will take

750
00:29:45,870 --> 00:29:49,320
some set of passwords and map them over

751
00:29:48,090 --> 00:29:51,209
to the digest space and there's no

752
00:29:49,320 --> 00:29:55,500
particular ordering or what you know

753
00:29:51,210 --> 00:29:57,210
about how those end up but the<font color="#E5E5E5"> problem</font>

754
00:29:55,500 --> 00:29:58,680
is in the historically the issues we've

755
00:29:57,210 --> 00:30:00,660
always been trying<font color="#E5E5E5"> to track this</font>

756
00:29:58,680 --> 00:30:02,790
specifically the specific mapping

757
00:30:00,660 --> 00:30:04,470
between a passage and digest and what we

758
00:30:02,790 --> 00:30:06,780
thought maybe would be a different ideas

759
00:30:04,470 --> 00:30:08,250
instead of tracking<font color="#E5E5E5"> the you know these</font>

760
00:30:06,780 --> 00:30:11,970
specific mappings what if we track

761
00:30:08,250 --> 00:30:13,860
regions of mapping so in this<font color="#E5E5E5"> idea what</font>

762
00:30:11,970 --> 00:30:15,690
if we segment the password space into

763
00:30:13,860 --> 00:30:18,330
equal sized segments you see on the left

764
00:30:15,690 --> 00:30:20,160
you know I had zero to you know if I had

765
00:30:18,330 --> 00:30:22,290
<font color="#E5E5E5">0 to 99 before I can't actually fit all</font>

766
00:30:20,160 --> 00:30:25,080
the segments on the slide but now i have

767
00:30:22,290 --> 00:30:27,420
0 to 10 11 to 20<font color="#CCCCCC"> and 21</font><font color="#E5E5E5"> to 30 and so on</font>

768
00:30:25,080 --> 00:30:29,699
<font color="#E5E5E5">and so forth and then the digest space</font>

769
00:30:27,420 --> 00:30:30,960
again<font color="#CCCCCC"> i don't</font><font color="#E5E5E5"> know where the passwords</font>

770
00:30:29,700 --> 00:30:32,280
from that segment are going to end up so

771
00:30:30,960 --> 00:30:35,760
<font color="#E5E5E5">i have to map it to the entire digestive</font>

772
00:30:32,280 --> 00:30:38,460
face for each segment and that's just

773
00:30:35,760 --> 00:30:42,919
<font color="#E5E5E5">this is just</font><font color="#CCCCCC"> sort of a little background</font>

774
00:30:38,460 --> 00:30:44,299
on how we came up with the idea so just

775
00:30:42,919 --> 00:30:46,909
I'm going<font color="#E5E5E5"> to dig into this little bit so</font>

776
00:30:44,299 --> 00:30:49,100
<font color="#E5E5E5">I have a region a password region 0 to</font>

777
00:30:46,909 --> 00:30:51,980
10 I have a digest space you know the

778
00:30:49,100 --> 00:30:53,779
entire digestive<font color="#E5E5E5"> ace so for those 10</font>

779
00:30:51,980 --> 00:30:55,549
passwords<font color="#CCCCCC"> if I hash those i end up with</font>

780
00:30:53,779 --> 00:30:58,759
you the red bars which are going<font color="#E5E5E5"> to be</font>

781
00:30:55,549 --> 00:31:01,039
the specific hashes or specific digests

782
00:30:58,759 --> 00:31:05,419
in that<font color="#E5E5E5"> digest space so you can see avg</font>

783
00:31:01,039 --> 00:31:08,840
<font color="#CCCCCC">boy which I</font><font color="#E5E5E5"> btz and so on so just</font><font color="#CCCCCC"> keep</font>

784
00:31:05,419 --> 00:31:10,639
that in mind and<font color="#E5E5E5"> what this</font><font color="#CCCCCC"> means</font><font color="#E5E5E5"> is that</font>

785
00:31:08,840 --> 00:31:13,970
if<font color="#E5E5E5"> I want to do a reversal theoretically</font>

786
00:31:10,639 --> 00:31:17,809
if I'm given from digest say btz I know

787
00:31:13,970 --> 00:31:21,590
<font color="#E5E5E5">that btz is within the region or the</font>

788
00:31:17,809 --> 00:31:23,960
segment of 0 0 to 10 because btz is in

789
00:31:21,590 --> 00:31:26,539
is one of the digest that<font color="#E5E5E5"> I have in that</font>

790
00:31:23,960 --> 00:31:29,690
map digest face and let's say I'm given

791
00:31:26,539 --> 00:31:33,440
some other digests CHP I know it's<font color="#E5E5E5"> not</font>

792
00:31:29,690 --> 00:31:36,049
in the space 0 0 to 10 because it's not

793
00:31:33,440 --> 00:31:38,840
one of the present digest so i can use

794
00:31:36,049 --> 00:31:40,730
this<font color="#CCCCCC"> information to try to figure out</font>

795
00:31:38,840 --> 00:31:42,918
<font color="#E5E5E5">how i can search the password space so</font>

796
00:31:40,730 --> 00:31:45,440
for<font color="#E5E5E5"> example CHP I since I know it's not</font>

797
00:31:42,919 --> 00:31:47,690
in 0 0 to 10 I don't bother trying<font color="#E5E5E5"> to</font>

798
00:31:45,440 --> 00:31:49,669
brute force that small space to create a

799
00:31:47,690 --> 00:31:53,570
reversal it just saves myself some time

800
00:31:49,669 --> 00:31:56,480
just a<font color="#CCCCCC"> little bit a few</font><font color="#E5E5E5"> more definitions</font>

801
00:31:53,570 --> 00:31:58,668
for this approach so let's<font color="#E5E5E5"> say I have a</font>

802
00:31:56,480 --> 00:32:01,909
we talked about the bastard space a

803
00:31:58,669 --> 00:32:05,600
segment then is just<font color="#E5E5E5"> a non-overlapping</font>

804
00:32:01,909 --> 00:32:07,220
contiguous region of that password space

805
00:32:05,600 --> 00:32:09,949
and we like the<font color="#CCCCCC"> segment</font><font color="#E5E5E5"> to be equal</font>

806
00:32:07,220 --> 00:32:12,950
sized the digest space we've talked

807
00:32:09,950 --> 00:32:15,049
about<font color="#E5E5E5"> for the digest set is the specific</font>

808
00:32:12,950 --> 00:32:20,659
set of digests that are produced under

809
00:32:15,049 --> 00:32:22,220
some passwords face a little bit more so

810
00:32:20,659 --> 00:32:23,690
again just kind of read this is a

811
00:32:22,220 --> 00:32:27,259
reiteration of what we've talked about

812
00:32:23,690 --> 00:32:29,389
let's say<font color="#E5E5E5"> I have 10 equally partition</font>

813
00:32:27,259 --> 00:32:31,369
segments will call them p sub a piece of

814
00:32:29,389 --> 00:32:33,678
BP<font color="#E5E5E5"> subscene those are segments</font><font color="#CCCCCC"> to the</font>

815
00:32:31,369 --> 00:32:37,908
password space and<font color="#E5E5E5"> I have equivalent</font>

816
00:32:33,679 --> 00:32:42,019
digest or digest sets d sub ad sub B and

817
00:32:37,909 --> 00:32:45,409
so on this implies that a password in<font color="#CCCCCC"> P</font>

818
00:32:42,019 --> 00:32:47,989
sub a is in d sub a right or digestive

819
00:32:45,409 --> 00:32:50,539
and if I want<font color="#E5E5E5"> to simulate the reversal</font>

820
00:32:47,989 --> 00:32:52,970
<font color="#E5E5E5">of some digest in the password space all</font>

821
00:32:50,539 --> 00:32:55,158
<font color="#E5E5E5">I need to do is see if d is an element</font>

822
00:32:52,970 --> 00:32:56,300
of have a<font color="#E5E5E5"> little example here d is an</font>

823
00:32:55,159 --> 00:32:58,700
element of

824
00:32:56,300 --> 00:33:01,340
I just said V sub a and if it is that

825
00:32:58,700 --> 00:33:05,870
implies that p is in the password

826
00:33:01,340 --> 00:33:07,340
segment p sub a right so here's just a

827
00:33:05,870 --> 00:33:09,860
quick little you know again some more

828
00:33:07,340 --> 00:33:11,179
examples so given<font color="#E5E5E5"> the same digest that</font>

829
00:33:09,860 --> 00:33:14,570
we were talking<font color="#E5E5E5"> about before and</font><font color="#CCCCCC"> i have</font>

830
00:33:11,180 --> 00:33:17,450
some of the listed up here btz is an

831
00:33:14,570 --> 00:33:20,120
element of d sub a therefore the

832
00:33:17,450 --> 00:33:24,320
password that<font color="#E5E5E5"> produces that digest must</font>

833
00:33:20,120 --> 00:33:27,739
be in the segment piece of a and DHI is

834
00:33:24,320 --> 00:33:30,980
not an<font color="#E5E5E5"> element of the digested DFA</font>

835
00:33:27,740 --> 00:33:34,250
therefore P is not an<font color="#E5E5E5"> element of the</font>

836
00:33:30,980 --> 00:33:37,580
passwords space piece of a so what does

837
00:33:34,250 --> 00:33:40,070
<font color="#E5E5E5">this</font><font color="#CCCCCC"> mean what this means is that if we</font>

838
00:33:37,580 --> 00:33:41,929
segment a space this way we only<font color="#E5E5E5"> need to</font>

839
00:33:40,070 --> 00:33:43,639
store the first and last passwords for

840
00:33:41,930 --> 00:33:49,880
some segments so that's a nice little

841
00:33:43,640 --> 00:33:51,290
cost<font color="#CCCCCC"> saving and that makes a little bit</font>

842
00:33:49,880 --> 00:33:52,850
similar<font color="#E5E5E5"> to a rainbow table but we still</font>

843
00:33:51,290 --> 00:33:54,680
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> store all the digest somewhere</font>

844
00:33:52,850 --> 00:33:58,129
right so it's a little bit bigger than a

845
00:33:54,680 --> 00:33:59,540
rainbow table but we<font color="#E5E5E5"> can guarantee</font>

846
00:33:58,130 --> 00:34:01,700
coverage coverage of the entire

847
00:33:59,540 --> 00:34:04,129
passwords face so we're covering the

848
00:34:01,700 --> 00:34:05,420
<font color="#E5E5E5">whole space we can guarantee that we</font>

849
00:34:04,130 --> 00:34:07,580
also just like<font color="#E5E5E5"> a rainbow table we have</font>

850
00:34:05,420 --> 00:34:09,918
<font color="#CCCCCC">to pre-compute all this stuff and in</font>

851
00:34:07,580 --> 00:34:12,049
store it somewhere but once it's stored

852
00:34:09,918 --> 00:34:17,569
you can see you can<font color="#CCCCCC"> sell it online and</font>

853
00:34:12,050 --> 00:34:20,120
make money<font color="#CCCCCC"> right great but it should be</font>

854
00:34:17,570 --> 00:34:22,220
<font color="#E5E5E5">much faster to simulate our V equals P</font>

855
00:34:20,120 --> 00:34:24,049
because we don't we start with a digest

856
00:34:22,219 --> 00:34:25,879
that doesn't match one of the chains in

857
00:34:24,050 --> 00:34:27,260
<font color="#E5E5E5">the rainbow table we have</font><font color="#CCCCCC"> to do some</font>

858
00:34:25,880 --> 00:34:29,090
work<font color="#E5E5E5"> to try to see if we can force a</font>

859
00:34:27,260 --> 00:34:33,140
match this case we don't<font color="#E5E5E5"> have to do that</font>

860
00:34:29,090 --> 00:34:35,750
so what if we<font color="#E5E5E5"> can also officially store</font>

861
00:34:33,139 --> 00:34:37,790
the digest right now we'd have to store

862
00:34:35,750 --> 00:34:39,679
all the digest that we produce but what

863
00:34:37,790 --> 00:34:41,900
<font color="#E5E5E5">if we could do this in a smaller you</font>

864
00:34:39,679 --> 00:34:45,560
know a smaller way and also in a way

865
00:34:41,900 --> 00:34:53,330
<font color="#CCCCCC">it's very quick</font><font color="#E5E5E5"> to look up and there's a</font>

866
00:34:45,560 --> 00:34:57,139
<font color="#E5E5E5">lot of ideas about that yeah yeah we</font>

867
00:34:53,330 --> 00:34:58,220
want<font color="#E5E5E5"> to optimize yeah</font>

868
00:34:57,139 --> 00:34:59,839
yeah we don't want to do a string and

869
00:34:58,220 --> 00:35:01,700
search look through that we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want</font>

870
00:34:59,839 --> 00:35:02,869
to store all the digest we don't<font color="#CCCCCC"> we</font>

871
00:35:01,700 --> 00:35:07,700
don't<font color="#E5E5E5"> really you know we don't really</font>

872
00:35:02,869 --> 00:35:08,839
<font color="#E5E5E5">need</font><font color="#CCCCCC"> all that information so you know we</font>

873
00:35:07,700 --> 00:35:10,279
did some searching through different

874
00:35:08,839 --> 00:35:11,900
kinds of algorithms for the computer

875
00:35:10,279 --> 00:35:13,970
<font color="#E5E5E5">science students</font><font color="#CCCCCC"> of some of these would</font>

876
00:35:11,900 --> 00:35:15,470
look<font color="#E5E5E5"> familiar right so we don't want</font><font color="#CCCCCC"> to</font>

877
00:35:13,970 --> 00:35:17,959
<font color="#CCCCCC">do a string search through all the</font>

878
00:35:15,470 --> 00:35:19,490
digests we could we could pick all the

879
00:35:17,960 --> 00:35:21,619
digest and produce something called a

880
00:35:19,490 --> 00:35:23,390
try or a tree and that<font color="#CCCCCC"> could they could</font>

881
00:35:21,619 --> 00:35:24,799
<font color="#CCCCCC">be very fast then we</font><font color="#E5E5E5"> have to store that</font>

882
00:35:23,390 --> 00:35:26,930
somewhere so we're still storing all the

883
00:35:24,799 --> 00:35:30,470
information there's lots<font color="#E5E5E5"> of different</font>

884
00:35:26,930 --> 00:35:33,529
<font color="#E5E5E5">ideas about how to do this well we</font>

885
00:35:30,470 --> 00:35:36,078
finally hit upon was some really groovy

886
00:35:33,529 --> 00:35:37,579
technology producing the 70s by a guy

887
00:35:36,079 --> 00:35:38,720
named Burton<font color="#E5E5E5"> Howard bloom and now you</font>

888
00:35:37,579 --> 00:35:40,910
<font color="#E5E5E5">know why it's called the bloom reverse</font>

889
00:35:38,720 --> 00:35:43,279
not named up to the school unfortunately

890
00:35:40,910 --> 00:35:44,930
but it's the paper that were most

891
00:35:43,279 --> 00:35:46,339
interested in was called space-time

892
00:35:44,930 --> 00:35:49,098
trade-offs and hash coding with

893
00:35:46,339 --> 00:35:53,000
allowable errors and it was in publish

894
00:35:49,099 --> 00:35:54,650
an ACM and<font color="#E5E5E5"> July</font><font color="#CCCCCC"> of a 1970 and the</font>

895
00:35:53,000 --> 00:35:58,339
<font color="#E5E5E5">particular problem he</font><font color="#CCCCCC"> was trying to</font>

896
00:35:54,650 --> 00:36:00,260
solve back then was that<font color="#CCCCCC"> disk unlike</font>

897
00:35:58,339 --> 00:36:02,599
today we're very<font color="#CCCCCC"> very expensive and</font>

898
00:36:00,260 --> 00:36:04,819
they're very<font color="#E5E5E5"> very slow so if you wanted</font>

899
00:36:02,599 --> 00:36:08,269
to do like a database lookup to see is

900
00:36:04,819 --> 00:36:09,859
<font color="#E5E5E5">something in a database you didn't</font>

901
00:36:08,269 --> 00:36:11,839
really<font color="#E5E5E5"> actually want to go check the</font>

902
00:36:09,859 --> 00:36:15,140
disk for that information because<font color="#CCCCCC"> it was</font>

903
00:36:11,839 --> 00:36:18,200
it just took so long and the information

904
00:36:15,140 --> 00:36:19,910
<font color="#CCCCCC">may not even be there so that kind of</font>

905
00:36:18,200 --> 00:36:22,069
looks like a set membership test right

906
00:36:19,910 --> 00:36:24,589
is the<font color="#E5E5E5"> data you want now</font><font color="#CCCCCC"> in litter the</font>

907
00:36:22,069 --> 00:36:26,538
stuff that's on the disk and when he

908
00:36:24,589 --> 00:36:31,609
came up<font color="#E5E5E5"> with was a pretty a pretty</font>

909
00:36:26,539 --> 00:36:32,900
elegant solution so lets us certainly

910
00:36:31,609 --> 00:36:35,598
have a bit array it doesn't really

911
00:36:32,900 --> 00:36:37,910
<font color="#E5E5E5">matter what the length is i'm here i'm</font>

912
00:36:35,599 --> 00:36:42,440
just<font color="#E5E5E5"> using</font><font color="#CCCCCC"> my trivial example of 8 bits</font>

913
00:36:37,910 --> 00:36:45,200
<font color="#CCCCCC">ok they're indexed right and</font><font color="#E5E5E5"> i want to</font>

914
00:36:42,440 --> 00:36:46,700
insert some data ABC when<font color="#CCCCCC"> i'm in his</font>

915
00:36:45,200 --> 00:36:48,618
context what he would be asserting is

916
00:36:46,700 --> 00:36:50,689
that ABC will be stored on disk

917
00:36:48,619 --> 00:36:54,200
somewhere but anyone now wants to stored

918
00:36:50,690 --> 00:36:55,670
in this data structure so we're<font color="#E5E5E5"> going to</font>

919
00:36:54,200 --> 00:36:57,230
take several hash functions and these

920
00:36:55,670 --> 00:36:58,789
don't have to be cryptographic hashes

921
00:36:57,230 --> 00:37:00,259
this can be anything<font color="#E5E5E5"> as long as they</font>

922
00:36:58,789 --> 00:37:03,470
have properties of being well

923
00:37:00,259 --> 00:37:07,029
distributed and have and you know<font color="#E5E5E5"> they</font>

924
00:37:03,470 --> 00:37:07,029
have sort of various other qualities

925
00:37:07,079 --> 00:37:12,450
but we want<font color="#E5E5E5"> to produce a base-10 digest</font>

926
00:37:10,529 --> 00:37:14,369
so if you saw before<font color="#E5E5E5"> what I</font><font color="#CCCCCC"> have we're</font>

927
00:37:12,450 --> 00:37:16,140
basic steam digests we just want to

928
00:37:14,369 --> 00:37:17,969
change to different base to base 10

929
00:37:16,140 --> 00:37:19,950
right so if i have<font color="#E5E5E5"> several different</font>

930
00:37:17,969 --> 00:37:21,989
hash functions i go<font color="#E5E5E5"> ahead</font><font color="#CCCCCC"> and produce</font>

931
00:37:19,950 --> 00:37:24,359
those digests and I'll just I'll just

932
00:37:21,989 --> 00:37:26,940
mod them by the length of the bit array

933
00:37:24,359 --> 00:37:29,489
and those produce indexes into that bit

934
00:37:26,940 --> 00:37:32,069
array and those indexes are the bits

935
00:37:29,489 --> 00:37:33,989
that I slip right so now you see I have

936
00:37:32,069 --> 00:37:36,209
someone's in there and I'm asserting

937
00:37:33,989 --> 00:37:41,670
that that information is now inserted in

938
00:37:36,209 --> 00:37:43,288
the bitter a right and so I can keep

939
00:37:41,670 --> 00:37:44,999
doing this for all of the values that I

940
00:37:43,289 --> 00:37:47,910
want<font color="#E5E5E5"> to store all the things I want to</font>

941
00:37:44,999 --> 00:37:51,209
assert we're on on that<font color="#E5E5E5"> disk right so</font>

942
00:37:47,910 --> 00:37:54,390
let's<font color="#E5E5E5"> put some more bits see we've gone</font>

943
00:37:51,209 --> 00:37:55,979
through this process correctly right so

944
00:37:54,390 --> 00:37:59,788
how do<font color="#E5E5E5"> I actually test this for set</font>

945
00:37:55,979 --> 00:38:02,069
membership how does this work so i would

946
00:37:59,789 --> 00:38:04,319
i'd like<font color="#CCCCCC"> to know for example is d e f in</font>

947
00:38:02,069 --> 00:38:08,009
my did array is<font color="#CCCCCC"> it in my set of values</font>

948
00:38:04,319 --> 00:38:09,930
so I'm<font color="#E5E5E5"> going to just use the same hash</font>

949
00:38:08,009 --> 00:38:11,309
functions<font color="#E5E5E5"> I used before and it producing</font>

950
00:38:09,930 --> 00:38:14,098
the indexes i'm going to mod them by the

951
00:38:11,309 --> 00:38:16,319
length of the bit array like it<font color="#CCCCCC"> 0 7 and</font>

952
00:38:14,099 --> 00:38:18,029
<font color="#CCCCCC">6 and</font><font color="#E5E5E5"> i'm just gonna look up the bits</font>

953
00:38:16,319 --> 00:38:21,808
that we're at those at<font color="#E5E5E5"> this location</font>

954
00:38:18,029 --> 00:38:24,119
<font color="#E5E5E5">okay i'm going to do a bitwise and of</font>

955
00:38:21,809 --> 00:38:26,880
those values and as a result of that

956
00:38:24,119 --> 00:38:28,769
anding is a<font color="#CCCCCC"> 0 then i can assert that the</font>

957
00:38:26,880 --> 00:38:34,259
value was never inserted into the set

958
00:38:28,769 --> 00:38:37,499
and that's<font color="#E5E5E5"> a guaranteed let's do another</font>

959
00:38:34,259 --> 00:38:38,699
example is ABC in elements that you saw

960
00:38:37,499 --> 00:38:40,468
how i<font color="#E5E5E5"> went to the process of inserting</font>

961
00:38:38,699 --> 00:38:41,969
that before so we kind of know it's in

962
00:38:40,469 --> 00:38:43,799
there so it<font color="#E5E5E5"> better be or if</font><font color="#CCCCCC"> i go through</font>

963
00:38:41,969 --> 00:38:45,630
this okay<font color="#E5E5E5"> i'm going to go to the same</font>

964
00:38:43,799 --> 00:38:49,589
process we're going to hash it a few

965
00:38:45,630 --> 00:38:53,130
times mod it get some indexes look up

966
00:38:49,589 --> 00:38:55,949
the bits bitwise and O's and one and one

967
00:38:53,130 --> 00:38:59,160
and one is one so<font color="#E5E5E5"> I can assert that the</font>

968
00:38:55,949 --> 00:39:04,349
value is likely in the set that likely

969
00:38:59,160 --> 00:39:06,209
is it is a key part<font color="#CCCCCC"> of how this works so</font>

970
00:39:04,349 --> 00:39:08,459
if you assume over time I insert a

971
00:39:06,209 --> 00:39:10,890
number of values it's<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> that</font>

972
00:39:08,459 --> 00:39:12,629
those values after their hash and then

973
00:39:10,890 --> 00:39:14,519
mod it again I'm<font color="#E5E5E5"> gonna have some</font>

974
00:39:12,630 --> 00:39:17,519
<font color="#E5E5E5">collisions with in this bit space I</font>

975
00:39:14,519 --> 00:39:19,819
could get<font color="#CCCCCC"> both positives and that false</font>

976
00:39:17,519 --> 00:39:21,830
positive rate is controllable

977
00:39:19,820 --> 00:39:23,870
by the length<font color="#E5E5E5"> of the bid array and the</font>

978
00:39:21,830 --> 00:39:25,880
number of hash functions you use if you

979
00:39:23,870 --> 00:39:27,410
look online there's some calculate

980
00:39:25,880 --> 00:39:29,870
there's some calculators that you can

981
00:39:27,410 --> 00:39:31,879
use<font color="#CCCCCC"> to determine how long a bit array</font>

982
00:39:29,870 --> 00:39:33,920
should be how many hash functions you

983
00:39:31,880 --> 00:39:37,100
should use to<font color="#CCCCCC"> achieve a desired false</font>

984
00:39:33,920 --> 00:39:42,230
positive rate but the math isn't very

985
00:39:37,100 --> 00:39:44,480
very hard all right but we know<font color="#E5E5E5"> the</font>

986
00:39:42,230 --> 00:39:46,640
converse is also different right so if I

987
00:39:44,480 --> 00:39:48,590
get a<font color="#E5E5E5"> zero in any one of the indexes I</font>

988
00:39:46,640 --> 00:39:50,120
know it's not in there because nothing

989
00:39:48,590 --> 00:39:54,590
was ever inserted to flip that bit right

990
00:39:50,120 --> 00:39:56,600
all right<font color="#CCCCCC"> so this algorithm is called a</font>

991
00:39:54,590 --> 00:39:58,790
bloom filter named after certain however

992
00:39:56,600 --> 00:40:00,980
bloom but now you guys can claim the

993
00:39:58,790 --> 00:40:03,080
same<font color="#CCCCCC"> after here's what I won't tell</font>

994
00:40:00,980 --> 00:40:05,630
anybody<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right this</font><font color="#E5E5E5"> is used all over</font>

995
00:40:03,080 --> 00:40:07,400
the<font color="#E5E5E5"> place if you've ever liked in</font><font color="#CCCCCC"> chrome</font>

996
00:40:05,630 --> 00:40:09,470
<font color="#E5E5E5">or something tried</font><font color="#CCCCCC"> to go</font><font color="#E5E5E5"> to a website</font>

997
00:40:07,400 --> 00:40:10,850
and immediately comes back and says hey

998
00:40:09,470 --> 00:40:13,040
this fight<font color="#CCCCCC"> is probably suspicious are</font>

999
00:40:10,850 --> 00:40:15,170
bad<font color="#CCCCCC"> Google actually does that look up in</font>

1000
00:40:13,040 --> 00:40:18,920
your browser in a bloom filter they've

1001
00:40:15,170 --> 00:40:20,810
pre cashed a ton of what they know our

1002
00:40:18,920 --> 00:40:22,820
bad websites in some bloom filter<font color="#E5E5E5"> that's</font>

1003
00:40:20,810 --> 00:40:24,140
inside<font color="#CCCCCC"> of your browser that way you</font>

1004
00:40:22,820 --> 00:40:26,510
don't actually have<font color="#CCCCCC"> to try to go to</font><font color="#E5E5E5"> that</font>

1005
00:40:24,140 --> 00:40:29,990
site and<font color="#E5E5E5"> potentially be attacked by that</font>

1006
00:40:26,510 --> 00:40:32,600
fight they're used all over the place in

1007
00:40:29,990 --> 00:40:34,580
databases so databases will segment

1008
00:40:32,600 --> 00:40:36,170
their data in different files and rather

1009
00:40:34,580 --> 00:40:38,090
<font color="#E5E5E5">than have</font><font color="#CCCCCC"> to see if the information</font><font color="#E5E5E5"> you</font>

1010
00:40:36,170 --> 00:40:40,040
want is in all those files they'll check

1011
00:40:38,090 --> 00:40:42,290
bloom filters first and once the

1012
00:40:40,040 --> 00:40:44,300
determent likely or possible it's in a

1013
00:40:42,290 --> 00:40:47,090
given file they'll actually go and check

1014
00:40:44,300 --> 00:40:52,310
that file at that<font color="#E5E5E5"> point to actually look</font>

1015
00:40:47,090 --> 00:40:54,020
up<font color="#E5E5E5"> the real data excuse me then</font><font color="#CCCCCC"> you know</font>

1016
00:40:52,310 --> 00:40:56,480
<font color="#CCCCCC">that if you use one such as a bid you</font>

1017
00:40:54,020 --> 00:40:58,880
can't get a feel for how they work you

1018
00:40:56,480 --> 00:41:00,800
can actually you can design<font color="#E5E5E5"> a bloom</font>

1019
00:40:58,880 --> 00:41:04,040
filter to have a desired false positive

1020
00:41:00,800 --> 00:41:06,020
rate for a given cardinality of the set

1021
00:41:04,040 --> 00:41:08,090
you're trying to store in it if you

1022
00:41:06,020 --> 00:41:09,440
exceed the cardinality the false

1023
00:41:08,090 --> 00:41:13,400
positive rate will increase very rapidly

1024
00:41:09,440 --> 00:41:14,900
and<font color="#E5E5E5"> it certain</font><font color="#CCCCCC"> options</font><font color="#E5E5E5"> how they work the</font>

1025
00:41:13,400 --> 00:41:17,330
idea is and let's assemble all these

1026
00:41:14,900 --> 00:41:20,030
pieces right so in a bloom reverse

1027
00:41:17,330 --> 00:41:22,040
system there's two phases when it's our

1028
00:41:20,030 --> 00:41:23,810
construction a little bit like little

1029
00:41:22,040 --> 00:41:26,000
blue with a rainbow table you<font color="#CCCCCC"> have to</font>

1030
00:41:23,810 --> 00:41:27,230
pre-compute some stuff<font color="#E5E5E5"> you can kind of</font>

1031
00:41:26,000 --> 00:41:29,200
<font color="#E5E5E5">see here in this diagram</font><font color="#CCCCCC"> I start</font><font color="#E5E5E5"> with a</font>

1032
00:41:27,230 --> 00:41:32,230
password space in the last

1033
00:41:29,200 --> 00:41:35,140
I segmented into equal sized segments<font color="#CCCCCC"> I</font>

1034
00:41:32,230 --> 00:41:38,050
hash all the passwords in that segment

1035
00:41:35,140 --> 00:41:40,390
and produce a digest set and then I take

1036
00:41:38,050 --> 00:41:43,150
that<font color="#E5E5E5"> set and insert it into a bloom</font>

1037
00:41:40,390 --> 00:41:44,830
filter associated with<font color="#E5E5E5"> that set and then</font>

1038
00:41:43,150 --> 00:41:47,620
the bloom filter I just call that filter

1039
00:41:44,830 --> 00:41:51,340
the name of the first and<font color="#E5E5E5"> last password</font>

1040
00:41:47,620 --> 00:41:54,220
within that set pretty easy<font color="#E5E5E5"> right do a</font>

1041
00:41:51,340 --> 00:41:57,700
reverse I just see if a digest is in any

1042
00:41:54,220 --> 00:42:00,370
of the bloom filters and if it is I now

1043
00:41:57,700 --> 00:42:02,589
have a digest set that I know<font color="#E5E5E5"> that I</font>

1044
00:42:00,370 --> 00:42:04,600
want<font color="#E5E5E5"> to work with and I have to just</font>

1045
00:42:02,590 --> 00:42:07,000
simply an end know the corresponding

1046
00:42:04,600 --> 00:42:08,290
segment of the Patrick space belongs to

1047
00:42:07,000 --> 00:42:10,840
and I just brute force that little tiny

1048
00:42:08,290 --> 00:42:13,090
segment and if you remember since we

1049
00:42:10,840 --> 00:42:14,770
have a<font color="#CCCCCC"> false-positive possibility I may</font>

1050
00:42:13,090 --> 00:42:16,990
end<font color="#E5E5E5"> up with multiple bloom filters and</font>

1051
00:42:14,770 --> 00:42:19,390
say hey yeah I have<font color="#CCCCCC"> that digest that's</font>

1052
00:42:16,990 --> 00:42:21,580
<font color="#E5E5E5">okay because I'm still eliminating most</font>

1053
00:42:19,390 --> 00:42:22,990
of the password space ok so I'm<font color="#E5E5E5"> going to</font>

1054
00:42:21,580 --> 00:42:24,940
just do a quick example I'm going to<font color="#E5E5E5"> I'm</font>

1055
00:42:22,990 --> 00:42:27,939
going to run<font color="#E5E5E5"> one example it's the same</font>

1056
00:42:24,940 --> 00:42:29,710
<font color="#E5E5E5">problem right all nine</font><font color="#CCCCCC"> is the pin I have</font>

1057
00:42:27,940 --> 00:42:32,050
a digest there's the digest up there

1058
00:42:29,710 --> 00:42:33,760
there's a shot by 12 it's reversing it

1059
00:42:32,050 --> 00:42:36,550
we saw it took about 90 seconds before

1060
00:42:33,760 --> 00:42:38,680
now we're done<font color="#E5E5E5"> six seconds single</font>

1061
00:42:36,550 --> 00:42:43,210
threaded on a cpu did the same problem

1062
00:42:38,680 --> 00:42:45,730
the bloom filters that make this up are

1063
00:42:43,210 --> 00:42:47,320
about eight hundred megabytes and this

1064
00:42:45,730 --> 00:42:49,450
is with<font color="#E5E5E5"> a false positive rate of five</font>

1065
00:42:47,320 --> 00:42:51,640
percent so if i increase the false

1066
00:42:49,450 --> 00:42:52,930
positive rate the amount of storage i

1067
00:42:51,640 --> 00:42:54,279
need shrinks but the amount<font color="#E5E5E5"> of</font>

1068
00:42:52,930 --> 00:42:59,109
computation<font color="#E5E5E5"> i need to do the reverse</font>

1069
00:42:54,280 --> 00:43:00,850
increases<font color="#CCCCCC"> okay so getting close to the</font>

1070
00:42:59,110 --> 00:43:03,430
end here but this does introduce one new

1071
00:43:00,850 --> 00:43:05,830
problem potentially<font color="#CCCCCC"> I have to search all</font>

1072
00:43:03,430 --> 00:43:08,200
of those bloom filters on a very large

1073
00:43:05,830 --> 00:43:10,240
password space I could have millions of

1074
00:43:08,200 --> 00:43:11,890
bloom filters that I need to<font color="#E5E5E5"> search so</font>

1075
00:43:10,240 --> 00:43:16,629
how do i how do I deal with that problem

1076
00:43:11,890 --> 00:43:18,910
how do I avoid this yeah you blew<font color="#E5E5E5"> them</font>

1077
00:43:16,630 --> 00:43:21,070
to<font color="#E5E5E5"> a throw your bloom filters there you</font>

1078
00:43:18,910 --> 00:43:24,549
go hey yo dawg i herd you liek bloom

1079
00:43:21,070 --> 00:43:26,050
filters and your bloom filters so yeah

1080
00:43:24,550 --> 00:43:27,550
it's<font color="#E5E5E5"> for the computer science guide</font>

1081
00:43:26,050 --> 00:43:31,420
you'll see this looks like a<font color="#E5E5E5"> classic big</font>

1082
00:43:27,550 --> 00:43:32,890
o log n algorithm right so a little bit

1083
00:43:31,420 --> 00:43:35,500
more storage you can even make the false

1084
00:43:32,890 --> 00:43:36,520
false positive parts of this really

1085
00:43:35,500 --> 00:43:39,250
<font color="#E5E5E5">really high and</font><font color="#CCCCCC"> it will still work</font>

1086
00:43:36,520 --> 00:43:42,570
you'll see in this really<font color="#E5E5E5"> really simple</font>

1087
00:43:39,250 --> 00:43:44,340
example I<font color="#CCCCCC"> searched</font>

1088
00:43:42,570 --> 00:43:45,900
most bloom filters and<font color="#E5E5E5"> I searched it</font>

1089
00:43:44,340 --> 00:43:48,000
tells<font color="#E5E5E5"> me which one if that I have it or</font>

1090
00:43:45,900 --> 00:43:49,470
<font color="#CCCCCC">not I searched maybe the second layer</font>

1091
00:43:48,000 --> 00:43:52,680
and it tells me sort of<font color="#E5E5E5"> which one means</font>

1092
00:43:49,470 --> 00:43:54,299
may have may have that digest and then I

1093
00:43:52,680 --> 00:43:56,250
<font color="#E5E5E5">searched the subset underneath of that</font>

1094
00:43:54,300 --> 00:43:59,040
and so on and so forth through all the

1095
00:43:56,250 --> 00:44:01,470
layers until I find the<font color="#E5E5E5"> candidate</font>

1096
00:43:59,040 --> 00:44:04,560
password spaces I want to reverse then I

1097
00:44:01,470 --> 00:44:07,259
reverse those the reason this is faster

1098
00:44:04,560 --> 00:44:13,259
as you can see in this example I had to

1099
00:44:07,260 --> 00:44:14,640
visit<font color="#CCCCCC"> 123456 bloom filters to figure out</font>

1100
00:44:13,260 --> 00:44:16,710
what the candidate password spaces were

1101
00:44:14,640 --> 00:44:19,049
at the bottom layer whereas if<font color="#E5E5E5"> i did a</font>

1102
00:44:16,710 --> 00:44:21,720
linear search<font color="#CCCCCC"> I'd have</font><font color="#E5E5E5"> to search 1 2 3</font><font color="#CCCCCC"> 4</font>

1103
00:44:19,050 --> 00:44:23,520
5<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> 7 8 8 bloom filters I've already</font>

1104
00:44:21,720 --> 00:44:26,759
reduced this if you can<font color="#E5E5E5"> imagine this in</font>

1105
00:44:23,520 --> 00:44:29,370
a much larger system this is<font color="#E5E5E5"> actually</font>

1106
00:44:26,760 --> 00:44:31,560
actually is magnified quite a bit if you

1107
00:44:29,370 --> 00:44:33,330
want to see this in action get ready i'm

1108
00:44:31,560 --> 00:44:34,500
gonna do the same thing now we call this

1109
00:44:33,330 --> 00:44:39,330
a logarithmic search a bloom filter

1110
00:44:34,500 --> 00:44:41,400
don't blink done<font color="#E5E5E5"> ok so I reverse the</font>

1111
00:44:39,330 --> 00:44:45,450
same<font color="#CCCCCC"> password in point zero two seconds</font>

1112
00:44:41,400 --> 00:44:48,300
and it's<font color="#E5E5E5"> about the data for this is</font>

1113
00:44:45,450 --> 00:44:53,370
about to make a<font color="#E5E5E5"> good bite we're going to</font>

1114
00:44:48,300 --> 00:44:54,960
<font color="#E5E5E5">do this ya know the script will won't</font>

1115
00:44:53,370 --> 00:44:56,339
<font color="#CCCCCC">let me run it again but you can actually</font>

1116
00:44:54,960 --> 00:45:03,990
show<font color="#E5E5E5"> you I can actually show you the</font>

1117
00:44:56,340 --> 00:45:05,880
know it man it's done if you point

1118
00:45:03,990 --> 00:45:09,629
pointed to I<font color="#E5E5E5"> told you</font><font color="#CCCCCC"> about to blink I</font>

1119
00:45:05,880 --> 00:45:11,580
made you promise<font color="#CCCCCC"> right so you can see</font>

1120
00:45:09,630 --> 00:45:14,070
here's here's all these bloom filters

1121
00:45:11,580 --> 00:45:18,029
that's the linear search if you want to

1122
00:45:14,070 --> 00:45:19,470
see I'll get<font color="#E5E5E5"> you one second yeah you</font>

1123
00:45:18,030 --> 00:45:21,450
want to see<font color="#E5E5E5"> the logarithmic search you</font>

1124
00:45:19,470 --> 00:45:22,770
see there's the topmost layer and each

1125
00:45:21,450 --> 00:45:34,020
of those folders there's another layer

1126
00:45:22,770 --> 00:45:34,710
deeper within the structure yeah yeah so

1127
00:45:34,020 --> 00:45:36,390
you can do that

1128
00:45:34,710 --> 00:45:39,750
so if you look<font color="#E5E5E5"> at these these each of</font>

1129
00:45:36,390 --> 00:45:42,060
these filters is a couple megabytes<font color="#CCCCCC"> four</font>

1130
00:45:39,750 --> 00:45:43,500
megabytes right so it's<font color="#E5E5E5"> you know you</font>

1131
00:45:42,060 --> 00:45:44,730
<font color="#E5E5E5">only have</font><font color="#CCCCCC"> to and actually</font><font color="#E5E5E5"> don't even</font>

1132
00:45:43,500 --> 00:45:49,589
<font color="#E5E5E5">have to read the entire filter off a</font>

1133
00:45:44,730 --> 00:45:50,670
disk in most operating systems will

1134
00:45:49,589 --> 00:45:55,080
support something<font color="#E5E5E5"> called memory mapping</font>

1135
00:45:50,670 --> 00:45:57,690
files so you actually it will make the

1136
00:45:55,080 --> 00:45:59,279
file appear as if it's in RAM and then

1137
00:45:57,690 --> 00:46:00,480
the caching mechanism of the virtual

1138
00:45:59,280 --> 00:46:02,490
memory mechanism and the operating

1139
00:46:00,480 --> 00:46:05,970
system we'll just load up a page worth

1140
00:46:02,490 --> 00:46:07,709
of data so like a few kilobytes so it's

1141
00:46:05,970 --> 00:46:10,379
theoretically for each of these bloom

1142
00:46:07,710 --> 00:46:12,270
filters<font color="#E5E5E5"> were maybe only be looking up 20</font>

1143
00:46:10,380 --> 00:46:22,050
kilobytes of data for each filter that

1144
00:46:12,270 --> 00:46:30,930
we're doing<font color="#E5E5E5"> a check yeah in the filter</font>

1145
00:46:22,050 --> 00:46:32,640
yeah exactly<font color="#E5E5E5"> that's correct good you're</font>

1146
00:46:30,930 --> 00:46:35,430
basically<font color="#CCCCCC"> asking it hey filter do you</font>

1147
00:46:32,640 --> 00:46:38,040
have this and it'll say yes you can't

1148
00:46:35,430 --> 00:46:40,980
always trust it but but if you construct

1149
00:46:38,040 --> 00:46:43,020
the system with the knowledge of the

1150
00:46:40,980 --> 00:46:44,700
cardinality the set that's in there you

1151
00:46:43,020 --> 00:46:53,520
can control for what<font color="#E5E5E5"> that false positive</font>

1152
00:46:44,700 --> 00:46:57,060
rate is yeah it says yes<font color="#CCCCCC"> but it's wrong</font>

1153
00:46:53,520 --> 00:46:59,250
yeah and in the cost for that is in this

1154
00:46:57,060 --> 00:47:00,660
case it gives you it gives you a little

1155
00:46:59,250 --> 00:47:02,609
<font color="#E5E5E5">bit of the password space at your brute</font>

1156
00:47:00,660 --> 00:47:05,310
force and it's<font color="#CCCCCC"> actually not in</font><font color="#E5E5E5"> there and</font>

1157
00:47:02,609 --> 00:47:07,259
you just move on from there right we

1158
00:47:05,310 --> 00:47:11,190
don't<font color="#E5E5E5"> get sad about it we just try</font>

1159
00:47:07,260 --> 00:47:13,410
something else<font color="#E5E5E5"> right</font><font color="#CCCCCC"> all right so you</font>

1160
00:47:11,190 --> 00:47:15,750
saw how it performs we've actually done

1161
00:47:13,410 --> 00:47:17,819
a bunch of testing on this one of the

1162
00:47:15,750 --> 00:47:20,040
cool things<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this is that this is</font>

1163
00:47:17,820 --> 00:47:21,450
<font color="#E5E5E5">an asymmetric algorithm so the</font>

1164
00:47:20,040 --> 00:47:23,700
construction started this is very very

1165
00:47:21,450 --> 00:47:25,410
<font color="#E5E5E5">difficult and expensive so you can use</font>

1166
00:47:23,700 --> 00:47:28,230
<font color="#CCCCCC">some expensive equipment do it once and</font>

1167
00:47:25,410 --> 00:47:30,629
save off the result but the reversal is

1168
00:47:28,230 --> 00:47:33,540
very very<font color="#E5E5E5"> cheap you'll see here's some</font>

1169
00:47:30,630 --> 00:47:35,640
different examples let me kind<font color="#E5E5E5"> of skip</font>

1170
00:47:33,540 --> 00:47:37,050
through here and kind of show you some

1171
00:47:35,640 --> 00:47:39,990
assistance we tested this on so like<font color="#E5E5E5"> a</font>

1172
00:47:37,050 --> 00:47:42,300
pc running<font color="#CCCCCC"> an SSD reverse construction</font>

1173
00:47:39,990 --> 00:47:45,029
took 188 seconds and this is on a

1174
00:47:42,300 --> 00:47:46,099
password space of just 10 to seven

1175
00:47:45,030 --> 00:47:49,069
passwords

1176
00:47:46,099 --> 00:47:51,019
with it with different you know false

1177
00:47:49,069 --> 00:47:52,430
positive rights but the best times we

1178
00:47:51,019 --> 00:47:55,729
were getting a reversal<font color="#E5E5E5"> of you know to</font>

1179
00:47:52,430 --> 00:47:57,589
10 to the second on we have a we have at

1180
00:47:55,729 --> 00:48:00,288
nolas we have some super computers and

1181
00:47:57,589 --> 00:48:02,150
some compute clusters it turns out

1182
00:48:00,289 --> 00:48:04,130
actually they were slower and this is

1183
00:48:02,150 --> 00:48:07,670
this for single threading because the

1184
00:48:04,130 --> 00:48:10,640
file i/o so again you have<font color="#E5E5E5"> to read data</font>

1185
00:48:07,670 --> 00:48:13,190
up you know in so if you're<font color="#E5E5E5"> the file</font>

1186
00:48:10,640 --> 00:48:15,589
system or the storage mechanism using is

1187
00:48:13,190 --> 00:48:17,630
slow for random access it can slow

1188
00:48:15,589 --> 00:48:19,729
things down you'll<font color="#E5E5E5"> see we actually ran</font>

1189
00:48:17,630 --> 00:48:21,319
it on a raspberry pi<font color="#CCCCCC"> 2 it was able to</font>

1190
00:48:19,729 --> 00:48:25,160
reverse a password in about two seconds

1191
00:48:21,319 --> 00:48:26,569
that's livable<font color="#E5E5E5"> I can do that right so in</font>

1192
00:48:25,160 --> 00:48:28,910
theory we could figure out what

1193
00:48:26,569 --> 00:48:31,160
<font color="#E5E5E5">construct the fastest build it on that</font>

1194
00:48:28,910 --> 00:48:32,690
save that off and then we can do

1195
00:48:31,160 --> 00:48:35,239
reversal on something very very slow and

1196
00:48:32,690 --> 00:48:37,519
cheap so the<font color="#E5E5E5"> idea in the idea here is</font>

1197
00:48:35,239 --> 00:48:40,190
what if we wanted<font color="#E5E5E5"> to produce like field</font>

1198
00:48:37,519 --> 00:48:41,089
kits<font color="#CCCCCC"> that could go out two teams or</font>

1199
00:48:40,190 --> 00:48:43,130
something that wanted to reverse

1200
00:48:41,089 --> 00:48:44,630
something or something so that everybody

1201
00:48:43,130 --> 00:48:47,630
could reverse password we just do it

1202
00:48:44,630 --> 00:48:59,630
<font color="#E5E5E5">once and give</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to everybody</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> all</font>

1203
00:48:47,630 --> 00:49:01,549
<font color="#E5E5E5">right that's it yeah most of the time</font>

1204
00:48:59,630 --> 00:49:03,710
it's from law enforcement so they

1205
00:49:01,549 --> 00:49:07,339
they've gotten a warrant<font color="#E5E5E5"> or something in</font>

1206
00:49:03,710 --> 00:49:08,299
a sees a server somewhere and they they

1207
00:49:07,339 --> 00:49:10,788
need to figure out sort of what the

1208
00:49:08,299 --> 00:49:11,630
passwords are there on that server and

1209
00:49:10,789 --> 00:49:14,660
that's<font color="#E5E5E5"> usually part of an investigation</font>

1210
00:49:11,630 --> 00:49:17,059
this doesn't always<font color="#E5E5E5"> work right because</font>

1211
00:49:14,660 --> 00:49:21,140
you have to know<font color="#E5E5E5"> because we freak and</font>

1212
00:49:17,059 --> 00:49:25,279
the password<font color="#E5E5E5"> face and we</font><font color="#CCCCCC"> freak and the</font>

1213
00:49:21,140 --> 00:49:26,779
hash<font color="#E5E5E5"> average that we're reversing but so</font>

1214
00:49:25,279 --> 00:49:28,969
if they're using<font color="#CCCCCC"> that server has some</font>

1215
00:49:26,779 --> 00:49:30,529
kind of you know they're salting the

1216
00:49:28,969 --> 00:49:35,089
space<font color="#E5E5E5"> or they're trying</font><font color="#CCCCCC"> to get a weird</font>

1217
00:49:30,529 --> 00:49:36,680
you know variation<font color="#E5E5E5"> of a hash scheme then</font>

1218
00:49:35,089 --> 00:49:38,029
we're kind of in the<font color="#E5E5E5"> system that we</font>

1219
00:49:36,680 --> 00:49:41,359
built won't work for that and want<font color="#E5E5E5"> to</font>

1220
00:49:38,029 --> 00:49:44,210
try something else but you know we can

1221
00:49:41,359 --> 00:49:46,999
<font color="#E5E5E5">even if even if they use a hash function</font>

1222
00:49:44,210 --> 00:49:48,469
that we're aware of but maybe they've

1223
00:49:46,999 --> 00:49:50,450
used it's on a password from outside of

1224
00:49:48,469 --> 00:49:51,859
our password space it only cost us two

1225
00:49:50,450 --> 00:49:53,239
tenths of a second to figure it<font color="#E5E5E5"> out and</font>

1226
00:49:51,859 --> 00:49:55,470
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> brute force</font>

1227
00:49:53,239 --> 00:50:06,390
something outside of<font color="#CCCCCC"> this day</font>

1228
00:49:55,470 --> 00:50:08,339
yeah so that's that's that's a real

1229
00:50:06,390 --> 00:50:10,319
problem to defeat for<font color="#E5E5E5"> most of these</font>

1230
00:50:08,340 --> 00:50:12,869
types of systems<font color="#E5E5E5"> is default passwords</font>

1231
00:50:10,320 --> 00:50:14,640
what salting does it's basically

1232
00:50:12,869 --> 00:50:16,980
something that you sort of add maybe to

1233
00:50:14,640 --> 00:50:18,720
the password before you hash it and that

1234
00:50:16,980 --> 00:50:20,490
<font color="#CCCCCC">makes the password place much much much</font>

1235
00:50:18,720 --> 00:50:25,169
much larger not saying it's not

1236
00:50:20,490 --> 00:50:27,390
defeatable we could in theory you know

1237
00:50:25,170 --> 00:50:29,310
<font color="#E5E5E5">we could hash forgiving passwords all</font>

1238
00:50:27,390 --> 00:50:31,650
the possible salts within a certain salt

1239
00:50:29,310 --> 00:50:33,869
space and but then you end up<font color="#E5E5E5"> with you</font>

1240
00:50:31,650 --> 00:50:38,820
know<font color="#E5E5E5"> sort of magnifies the storage</font>

1241
00:50:33,869 --> 00:50:47,099
requirements of the system any other

1242
00:50:38,820 --> 00:50:48,390
question yeah so yeah so that's a good

1243
00:50:47,099 --> 00:50:52,500
question right so with rainbow tables

1244
00:50:48,390 --> 00:50:55,799
again like if you so you use very very

1245
00:50:52,500 --> 00:51:00,089
short chain chain links because you want

1246
00:50:55,800 --> 00:51:02,280
<font color="#E5E5E5">to</font><font color="#CCCCCC"> feed up the computer time then you</font>

1247
00:51:00,089 --> 00:51:04,410
<font color="#CCCCCC">end up a lot</font><font color="#E5E5E5"> of storage use longer</font>

1248
00:51:02,280 --> 00:51:05,730
chains you increase the compute time you

1249
00:51:04,410 --> 00:51:08,759
reduce the storage of the<font color="#E5E5E5"> rainbow table</font>

1250
00:51:05,730 --> 00:51:10,830
this is a little<font color="#CCCCCC"> bit like that the the</font>

1251
00:51:08,760 --> 00:51:13,109
thing that sort<font color="#E5E5E5"> of controls that here is</font>

1252
00:51:10,830 --> 00:51:14,880
the false positive rate so if I said a

1253
00:51:13,109 --> 00:51:16,410
really really high false positive rate

1254
00:51:14,880 --> 00:51:19,950
the storage requirements get much

1255
00:51:16,410 --> 00:51:22,319
smaller but the commute time goes up for

1256
00:51:19,950 --> 00:51:23,759
the reversal if I said a small false

1257
00:51:22,320 --> 00:51:26,849
positive rate than that store it goes up

1258
00:51:23,760 --> 00:51:30,390
but the compute I'm you know goes down

1259
00:51:26,849 --> 00:51:31,890
one interesting<font color="#CCCCCC"> thing is different hash</font>

1260
00:51:30,390 --> 00:51:36,810
functions produce digest of different

1261
00:51:31,890 --> 00:51:38,670
lengths and so if I have I mean example

1262
00:51:36,810 --> 00:51:42,000
you saw today with sha-512 but if<font color="#E5E5E5"> I use</font>

1263
00:51:38,670 --> 00:51:43,500
some other you know hash function that

1264
00:51:42,000 --> 00:51:45,210
produces digest that are four times as

1265
00:51:43,500 --> 00:51:46,859
long the bloom filters actually don't

1266
00:51:45,210 --> 00:51:49,230
get any bigger there's the same five

1267
00:51:46,859 --> 00:51:50,400
blue filters care about how<font color="#CCCCCC"> many things</font>

1268
00:51:49,230 --> 00:51:53,130
you're inserting into that not the

1269
00:51:50,400 --> 00:51:55,859
length of ok so the storage requirements

1270
00:51:53,130 --> 00:51:57,480
it can depend really what you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> sort</font>

1271
00:51:55,859 --> 00:51:59,910
of what<font color="#E5E5E5"> your goals are I would</font><font color="#CCCCCC"> say in</font>

1272
00:51:57,480 --> 00:52:03,690
general they're probably a little bit

1273
00:51:59,910 --> 00:52:06,060
bigger than bloomin rainbow tables but

1274
00:52:03,690 --> 00:52:08,250
if<font color="#E5E5E5"> we will be willing to sacrifice a</font>

1275
00:52:06,060 --> 00:52:08,940
little bit more compute tire<font color="#CCCCCC"> Musil to 10</font>

1276
00:52:08,250 --> 00:52:10,710
20 seconds

1277
00:52:08,940 --> 00:52:12,630
big deal let's say let's say we said it

1278
00:52:10,710 --> 00:52:15,030
<font color="#E5E5E5">gold five seconds to reverse the</font>

1279
00:52:12,630 --> 00:52:16,079
password then I could probably build a

1280
00:52:15,030 --> 00:52:32,670
system that would be smaller than a

1281
00:52:16,079 --> 00:52:34,109
rainbow table yeah oh so like for google

1282
00:52:32,670 --> 00:52:35,400
yeah so I mean<font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know the</font>

1283
00:52:34,109 --> 00:52:39,990
specifics of the scheme that they used

1284
00:52:35,400 --> 00:52:42,569
but in general what happens is I'm you

1285
00:52:39,990 --> 00:52:45,660
<font color="#E5E5E5">know most systems when you</font><font color="#CCCCCC"> login</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font>

1286
00:52:42,569 --> 00:52:47,279
system you know they first off<font color="#E5E5E5"> it's you</font>

1287
00:52:45,660 --> 00:52:48,540
should be doing<font color="#E5E5E5"> over HTTPS so it's going</font>

1288
00:52:47,280 --> 00:52:50,849
to<font color="#E5E5E5"> be an encrypted communication anyways</font>

1289
00:52:48,540 --> 00:52:52,560
but likely you won't<font color="#E5E5E5"> even be sending</font>

1290
00:52:50,849 --> 00:52:55,170
your password<font color="#E5E5E5"> into clear you probably</font>

1291
00:52:52,560 --> 00:52:58,078
hash it on your side but you could send

1292
00:52:55,170 --> 00:53:00,480
it to them they will then hash your your

1293
00:52:58,079 --> 00:53:02,130
password a lot<font color="#E5E5E5"> of times what systems</font>

1294
00:53:00,480 --> 00:53:05,280
will do that do use what are called salt

1295
00:53:02,130 --> 00:53:06,960
every user will have<font color="#CCCCCC"> a different salt</font>

1296
00:53:05,280 --> 00:53:09,510
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that they'll be known on their side</font>

1297
00:53:06,960 --> 00:53:12,510
so when they receive your your<font color="#E5E5E5"> username</font>

1298
00:53:09,510 --> 00:53:14,910
so look up your soap catch that to the

1299
00:53:12,510 --> 00:53:16,770
password<font color="#CCCCCC"> that you use</font><font color="#E5E5E5"> sent hash it then</font>

1300
00:53:14,910 --> 00:53:18,328
on their side<font color="#E5E5E5"> and then compare the</font>

1301
00:53:16,770 --> 00:53:21,619
digest against what they store<font color="#E5E5E5"> and</font>

1302
00:53:18,329 --> 00:53:21,619
that's how they do the authentication

1303
00:54:00,990 --> 00:54:05,669
in the case of Ashley Madison to they

1304
00:54:02,490 --> 00:54:07,950
over time they actually changed the hash

1305
00:54:05,670 --> 00:54:09,960
<font color="#CCCCCC">function that they use but because they</font>

1306
00:54:07,950 --> 00:54:11,730
don't store the original password they

1307
00:54:09,960 --> 00:54:13,110
had they didn't you know what they

1308
00:54:11,730 --> 00:54:14,730
didn't<font color="#E5E5E5"> really have an easy way to get</font>

1309
00:54:13,110 --> 00:54:16,980
<font color="#E5E5E5">the original password to rehash it with</font>

1310
00:54:14,730 --> 00:54:19,890
the new scheme so they kept track of

1311
00:54:16,980 --> 00:54:23,190
which which users used wish which

1312
00:54:19,890 --> 00:54:26,129
hashing scheme and so<font color="#E5E5E5"> that 11 million or</font>

1313
00:54:23,190 --> 00:54:28,350
so that were reversed were the 11

1314
00:54:26,130 --> 00:54:30,660
million that used the simplest hashing

1315
00:54:28,350 --> 00:54:33,000
scheme and that's that was basically how

1316
00:54:30,660 --> 00:54:35,460
they were reversed but there's other

1317
00:54:33,000 --> 00:54:37,860
ones that<font color="#CCCCCC"> were hatched with a much more</font>

1318
00:54:35,460 --> 00:54:39,600
difficult scheme they're not possible to

1319
00:54:37,860 --> 00:54:41,730
deal with the you know to reverse this

1320
00:54:39,600 --> 00:54:45,750
kind of<font color="#E5E5E5"> way so the the probably the best</font>

1321
00:54:41,730 --> 00:54:48,119
password hashing hash function that I'm

1322
00:54:45,750 --> 00:54:49,800
aware of its called<font color="#E5E5E5"> bcrypt and the</font>

1323
00:54:48,119 --> 00:54:53,220
reason that one works is because there's

1324
00:54:49,800 --> 00:54:55,440
a it will send your password through

1325
00:54:53,220 --> 00:54:56,790
rounds through the hashing function over

1326
00:54:55,440 --> 00:54:59,010
and over again to<font color="#E5E5E5"> try to obfuscate that</font>

1327
00:54:56,790 --> 00:55:00,630
but the number<font color="#CCCCCC"> of rounds can</font><font color="#E5E5E5"> be millions</font>

1328
00:54:59,010 --> 00:55:02,430
and millions and<font color="#CCCCCC"> millions around and</font>

1329
00:55:00,630 --> 00:55:05,160
that's called<font color="#E5E5E5"> it I think they call it an</font>

1330
00:55:02,430 --> 00:55:07,890
effort factor when you hash that which

1331
00:55:05,160 --> 00:55:11,069
means that to reverse something if you

1332
00:55:07,890 --> 00:55:12,600
try a password you<font color="#CCCCCC"> have to then do all</font>

1333
00:55:11,070 --> 00:55:38,160
that computation just to produce the

1334
00:55:12,600 --> 00:55:39,350
digest to compare yeah that's right<font color="#CCCCCC"> yeah</font>

1335
00:55:38,160 --> 00:55:40,730
so that yeah that

1336
00:55:39,350 --> 00:55:42,650
police is the password<font color="#E5E5E5"> space that's</font>

1337
00:55:40,730 --> 00:55:44,000
basically<font color="#CCCCCC"> it so if this imagine if our</font>

1338
00:55:42,650 --> 00:55:45,860
password for all just four digit pins

1339
00:55:44,000 --> 00:55:48,350
you can get in anyone's account after

1340
00:55:45,860 --> 00:55:51,560
you know 10,000 tries for a<font color="#E5E5E5"> computer</font>

1341
00:55:48,350 --> 00:55:52,850
10,000<font color="#CCCCCC"> is nothing but you know they</font>

1342
00:55:51,560 --> 00:55:54,470
wanted to use all this other stuff and

1343
00:55:52,850 --> 00:55:56,779
actually one of the problems that comes

1344
00:55:54,470 --> 00:55:58,189
along<font color="#E5E5E5"> as people they don't</font><font color="#CCCCCC"> necessarily</font>

1345
00:55:56,780 --> 00:56:00,200
understand that's what they're doing

1346
00:55:58,190 --> 00:56:02,090
with their password rules and they'll

1347
00:56:00,200 --> 00:56:03,890
overprescribe<font color="#CCCCCC"> rule sets have actually</font>

1348
00:56:02,090 --> 00:56:05,690
shrink the password space they'll say

1349
00:56:03,890 --> 00:56:07,819
like your first letter has to be

1350
00:56:05,690 --> 00:56:09,560
uppercase and your third character<font color="#E5E5E5"> has</font>

1351
00:56:07,820 --> 00:56:10,820
to be a<font color="#E5E5E5"> special character right and</font>

1352
00:56:09,560 --> 00:56:12,740
those types of things<font color="#E5E5E5"> actually shrink</font>

1353
00:56:10,820 --> 00:56:14,180
the space it's when they allow you to

1354
00:56:12,740 --> 00:56:15,379
<font color="#E5E5E5">sort of put anything in any space that</font>

1355
00:56:14,180 --> 00:56:27,830
you end up with<font color="#CCCCCC"> this</font><font color="#E5E5E5"> very very large</font>

1356
00:56:15,380 --> 00:56:30,050
patch replaces all right yeah there is

1357
00:56:27,830 --> 00:56:31,250
if you look around github there's a

1358
00:56:30,050 --> 00:56:32,930
whole bunch<font color="#CCCCCC"> of implementations of bloom</font>

1359
00:56:31,250 --> 00:56:36,200
filters they're actually not very hard

1360
00:56:32,930 --> 00:56:40,399
to program but there's a bunch of<font color="#E5E5E5"> them</font>

1361
00:56:36,200 --> 00:56:42,620
what the what most of them assume though

1362
00:56:40,400 --> 00:56:44,870
is that you're going<font color="#E5E5E5"> to operate on them</font>

1363
00:56:42,620 --> 00:56:46,790
when they're in RAM so they build<font color="#CCCCCC"> the</font>

1364
00:56:44,870 --> 00:56:49,910
bloom filter in<font color="#E5E5E5"> RAM and they the</font>

1365
00:56:46,790 --> 00:56:52,040
operations run in RAM what what we did

1366
00:56:49,910 --> 00:56:53,690
is<font color="#CCCCCC"> we thought well what if we</font><font color="#E5E5E5"> have a</font>

1367
00:56:52,040 --> 00:56:55,759
system doesn't have enough RAM this

1368
00:56:53,690 --> 00:56:56,990
space is much cheaper than<font color="#E5E5E5"> Ram let's</font>

1369
00:56:55,760 --> 00:56:58,550
come up with a way<font color="#CCCCCC"> of writing about the</font>

1370
00:56:56,990 --> 00:57:00,529
disk and that's those actually are

1371
00:56:58,550 --> 00:57:02,210
harder to find<font color="#CCCCCC"> I I</font><font color="#E5E5E5"> don't think we ever</font>

1372
00:57:00,530 --> 00:57:05,180
found money that we really liked and a

1373
00:57:02,210 --> 00:57:06,980
lot of the ones<font color="#E5E5E5"> that we found require</font>

1374
00:57:05,180 --> 00:57:09,799
you to read the entire filter first into

1375
00:57:06,980 --> 00:57:11,510
<font color="#CCCCCC">Ram to do the operation so what we will</font>

1376
00:57:09,800 --> 00:57:13,550
be came up with this idea<font color="#E5E5E5"> of memory</font>

1377
00:57:11,510 --> 00:57:21,380
mapping the file so when we had to look

1378
00:57:13,550 --> 00:57:25,670
<font color="#E5E5E5">at certain parts of the file not yet</font>

1379
00:57:21,380 --> 00:57:29,450
where is you know corporate things we'd

1380
00:57:25,670 --> 00:57:31,460
like to open<font color="#E5E5E5"> source it but that's the</font>

1381
00:57:29,450 --> 00:57:32,899
<font color="#CCCCCC">whole algorithm so it's not it's not too</font>

1382
00:57:31,460 --> 00:57:36,170
hard to do they actually the code for

1383
00:57:32,900 --> 00:57:40,940
this is 100 miles long a couple<font color="#E5E5E5"> hundred</font>

1384
00:57:36,170 --> 00:57:43,670
lines not it's<font color="#E5E5E5"> not too hard yeah I'm</font>

1385
00:57:40,940 --> 00:57:45,140
gonna write a paper first<font color="#CCCCCC"> and yeah I'm</font>

1386
00:57:43,670 --> 00:57:46,670
is scary lawyer people we<font color="#E5E5E5"> have to talk</font>

1387
00:57:45,140 --> 00:57:49,839
<font color="#E5E5E5">to you to figure out how to open source</font>

1388
00:57:46,670 --> 00:57:49,840
<font color="#E5E5E5">and stuff right</font>

1389
00:57:50,309 --> 00:58:01,019
yeah that's that should be yeah exactly

1390
00:57:58,289 --> 00:58:03,420
what we<font color="#CCCCCC"> should do so yeah</font><font color="#E5E5E5"> and actually I</font>

1391
00:58:01,019 --> 00:58:04,529
haven't this<font color="#E5E5E5"> was actually the first</font>

1392
00:58:03,420 --> 00:58:06,329
thing we've talked about this in public

1393
00:58:04,529 --> 00:58:07,920
I haven't<font color="#E5E5E5"> been allowed to talk</font><font color="#CCCCCC"> about</font>

1394
00:58:06,329 --> 00:58:09,869
this for<font color="#E5E5E5"> about a year because</font>

1395
00:58:07,920 --> 00:58:11,819
potentially you can<font color="#E5E5E5"> consider it as</font>

1396
00:58:09,869 --> 00:58:15,119
breaking certain hash algorithm so you

1397
00:58:11,819 --> 00:58:17,369
saw sha-512 point zero two seconds on a

1398
00:58:15,119 --> 00:58:19,499
you know four year old laptop in a you

1399
00:58:17,369 --> 00:58:21,539
know that's we broke that we broke shop

1400
00:58:19,499 --> 00:58:23,279
512 but it's still in this standard so

1401
00:58:21,539 --> 00:58:28,920
there<font color="#E5E5E5"> are some sensitivities around that</font>

1402
00:58:23,279 --> 00:58:33,079
we have to be careful of all right

1403
00:58:28,920 --> 00:58:33,079
somebody else<font color="#E5E5E5"> okay</font>

1404
00:58:34,000 --> 00:58:41,059
[Applause]

