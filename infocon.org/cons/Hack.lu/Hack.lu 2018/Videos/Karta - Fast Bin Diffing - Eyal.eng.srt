1
00:00:03,280 --> 00:00:11,678
let's start<font color="#E5E5E5"> I'll present a</font><font color="#CCCCCC"> kata basic</font>

2
00:00:07,420 --> 00:00:12,849
currently<font color="#E5E5E5"> either plug-in in Python</font><font color="#CCCCCC"> my</font>

3
00:00:11,679 --> 00:00:18,250
motivation was

4
00:00:12,849 --> 00:00:20,320
I usually<font color="#E5E5E5"> analyze huge</font><font color="#CCCCCC"> films and we want</font>

5
00:00:18,250 --> 00:00:22,570
to find<font color="#CCCCCC"> open</font><font color="#E5E5E5"> source libraries inside</font>

6
00:00:20,320 --> 00:00:26,470
<font color="#E5E5E5">them we want to find open necessarily</font>

7
00:00:22,570 --> 00:00:28,180
PNG easily gzip like<font color="#E5E5E5"> a winter and we</font>

8
00:00:26,470 --> 00:00:30,609
want to find it automatically instead of

9
00:00:28,180 --> 00:00:32,680
me reanalyzing netizen<font color="#CCCCCC"> NP over and over</font>

10
00:00:30,609 --> 00:00:38,219
again

11
00:00:32,680 --> 00:00:38,219
I couldn't find or use practically

12
00:00:38,820 --> 00:00:44,469
current solutions because if you read

13
00:00:42,010 --> 00:00:47,680
<font color="#CCCCCC">the</font><font color="#E5E5E5"> terms of dynamics of</font><font color="#CCCCCC"> bindiya</font><font color="#E5E5E5"> they</font>

14
00:00:44,469 --> 00:00:51,579
say that more<font color="#CCCCCC"> than 100,000 functions and</font>

15
00:00:47,680 --> 00:00:55,260
<font color="#E5E5E5">they crash and if you want to try other</font>

16
00:00:51,579 --> 00:01:00,039
solutions such as<font color="#E5E5E5"> ADF over for instance</font>

17
00:00:55,260 --> 00:01:03,579
<font color="#E5E5E5">it will take roughly 90 minutes in my</font>

18
00:01:00,039 --> 00:01:06,399
<font color="#CCCCCC">field</font><font color="#E5E5E5"> in this</font><font color="#CCCCCC"> sixty thousand functions</font>

19
00:01:03,579 --> 00:01:09,270
<font color="#E5E5E5">farewell it will have a database of free</font>

20
00:01:06,399 --> 00:01:12,070
<font color="#CCCCCC">Jigga bytes</font><font color="#E5E5E5"> and it will crash either</font>

21
00:01:09,270 --> 00:01:14,020
we need another<font color="#E5E5E5"> solution</font><font color="#CCCCCC"> something what</font>

22
00:01:12,070 --> 00:01:17,619
will<font color="#E5E5E5"> fit the size of the open source and</font>

23
00:01:14,020 --> 00:01:20,500
not the<font color="#E5E5E5"> size of the femoral usually the</font>

24
00:01:17,619 --> 00:01:22,930
complexity of most of the tools is<font color="#E5E5E5"> it</font>

25
00:01:20,500 --> 00:01:24,790
depends<font color="#E5E5E5"> on n which is pretty loud is</font><font color="#CCCCCC"> the</font>

26
00:01:22,930 --> 00:01:27,310
size of<font color="#E5E5E5"> the film we want the tool</font>

27
00:01:24,790 --> 00:01:30,130
depends on<font color="#E5E5E5"> K the library size Z leave</font>

28
00:01:27,310 --> 00:01:32,799
has roughly 100 functions<font color="#E5E5E5"> so it should</font>

29
00:01:30,130 --> 00:01:37,810
find its chest<font color="#CCCCCC"> and it shouldn't take 2</font>

30
00:01:32,799 --> 00:01:41,560
<font color="#CCCCCC">hours</font><font color="#E5E5E5"> and crash essentially we want to</font>

31
00:01:37,810 --> 00:01:44,229
map and<font color="#E5E5E5"> map the functions we can see</font>

32
00:01:41,560 --> 00:01:47,020
<font color="#E5E5E5">over there which is much smaller than</font>

33
00:01:44,229 --> 00:01:51,039
the entire<font color="#E5E5E5"> graph of</font><font color="#CCCCCC"> femur</font>

34
00:01:47,020 --> 00:01:54,759
if we zoom<font color="#CCCCCC"> in we can see that we have</font>

35
00:01:51,040 --> 00:01:57,220
inside<font color="#CCCCCC"> our</font><font color="#E5E5E5"> library we have files the</font>

36
00:01:54,759 --> 00:01:59,860
compiler compiles the first file to an

37
00:01:57,220 --> 00:02:01,920
object file after which it compiles the

38
00:01:59,860 --> 00:02:05,500
second<font color="#E5E5E5"> file to an object file in there</font>

39
00:02:01,920 --> 00:02:07,450
put adjacent in the<font color="#E5E5E5"> binary blob after</font>

40
00:02:05,500 --> 00:02:11,200
which you have the third file and so on

41
00:02:07,450 --> 00:02:13,450
<font color="#CCCCCC">and so on if we</font><font color="#E5E5E5"> have the source code of</font>

42
00:02:11,200 --> 00:02:15,399
<font color="#E5E5E5">the open source which we have and we</font>

43
00:02:13,450 --> 00:02:16,459
compile it on<font color="#E5E5E5"> our own we get the</font><font color="#CCCCCC"> object</font>

44
00:02:15,400 --> 00:02:19,610
<font color="#CCCCCC">files for it</font>

45
00:02:16,460 --> 00:02:22,430
file<font color="#E5E5E5"> if we take the data of what</font>

46
00:02:19,610 --> 00:02:25,880
functions are positioned in each file

47
00:02:22,430 --> 00:02:29,810
<font color="#E5E5E5">and we try to graphically locate them in</font>

48
00:02:25,880 --> 00:02:32,180
<font color="#E5E5E5">the binary we could do a much faster</font>

49
00:02:29,810 --> 00:02:36,320
<font color="#E5E5E5">solution instead</font><font color="#CCCCCC"> of searching for</font>

50
00:02:32,180 --> 00:02:40,070
function a from file<font color="#CCCCCC"> B all over the film</font>

51
00:02:36,320 --> 00:02:42,650
<font color="#E5E5E5">we can find the a file a dot o we know</font>

52
00:02:40,070 --> 00:02:46,549
<font color="#CCCCCC">what functions we should find there and</font>

53
00:02:42,650 --> 00:02:52,460
we can<font color="#CCCCCC"> look for them only in this tight</font>

54
00:02:46,550 --> 00:02:55,520
<font color="#E5E5E5">region</font><font color="#CCCCCC"> Kota is</font><font color="#E5E5E5"> Russian</font><font color="#CCCCCC"> for mia and</font>

55
00:02:52,460 --> 00:02:57,890
essentially we want<font color="#E5E5E5"> to map our film what</font>

56
00:02:55,520 --> 00:03:00,740
we start<font color="#CCCCCC"> with</font><font color="#E5E5E5"> is that we search for</font>

57
00:02:57,890 --> 00:03:02,839
<font color="#E5E5E5">anchor functions functions with unique</font>

58
00:03:00,740 --> 00:03:06,680
long strings unique constants

59
00:03:02,840 --> 00:03:09,830
<font color="#E5E5E5">cryptographic constants and</font><font color="#CCCCCC"> we find them</font>

60
00:03:06,680 --> 00:03:12,560
as we presented<font color="#E5E5E5"> it inside a library</font>

61
00:03:09,830 --> 00:03:15,080
<font color="#E5E5E5">after</font><font color="#CCCCCC"> we found</font><font color="#E5E5E5"> anchor functions we</font>

62
00:03:12,560 --> 00:03:17,630
essentially know where the library<font color="#E5E5E5"> will</font>

63
00:03:15,080 --> 00:03:20,090
reside in<font color="#CCCCCC"> the film</font><font color="#E5E5E5"> and we can zoom in if</font>

64
00:03:17,630 --> 00:03:23,540
you have 100 functions we<font color="#CCCCCC"> have roughly</font>

65
00:03:20,090 --> 00:03:25,520
200 candidate functions and not<font color="#E5E5E5"> 60,000</font>

66
00:03:23,540 --> 00:03:28,549
functions we'll need to compare so it's

67
00:03:25,520 --> 00:03:30,320
much faster<font color="#E5E5E5"> after we have found</font>

68
00:03:28,550 --> 00:03:33,620
<font color="#CCCCCC">Representatives we need to find the</font>

69
00:03:30,320 --> 00:03:35,989
borders of<font color="#CCCCCC"> the files</font><font color="#E5E5E5"> so we have graph</font>

70
00:03:33,620 --> 00:03:39,500
representatives of several<font color="#E5E5E5"> files and</font>

71
00:03:35,990 --> 00:03:41,660
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> get on better</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> better once we</font>

72
00:03:39,500 --> 00:03:44,990
match and compare additional functions

73
00:03:41,660 --> 00:03:47,390
so yeah we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> if you take a look at</font>

74
00:03:44,990 --> 00:03:52,090
<font color="#CCCCCC">several of the files we'll find the</font>

75
00:03:47,390 --> 00:03:56,329
exact borders will find additional<font color="#E5E5E5"> files</font>

76
00:03:52,090 --> 00:03:59,330
and once we matched all the<font color="#CCCCCC"> ones we</font>

77
00:03:56,330 --> 00:04:00,980
<font color="#CCCCCC">matched</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the files</font><font color="#E5E5E5"> we know how where</font>

78
00:03:59,330 --> 00:04:05,050
the<font color="#CCCCCC"> library is and what are the</font>

79
00:04:00,980 --> 00:04:08,329
functions let's look at it in action

80
00:04:05,050 --> 00:04:12,050
<font color="#E5E5E5">this is the film of HP's</font><font color="#CCCCCC"> window we</font>

81
00:04:08,330 --> 00:04:20,090
showed<font color="#E5E5E5"> yesterday if you</font><font color="#CCCCCC"> want to find Lea</font>

82
00:04:12,050 --> 00:04:24,800
<font color="#CCCCCC">P&G for instance I can skip the list of</font>

83
00:04:20,089 --> 00:04:27,169
strings because<font color="#E5E5E5"> that's item once we have</font>

84
00:04:24,800 --> 00:04:29,780
the list<font color="#CCCCCC"> of strings and an initial</font>

85
00:04:27,169 --> 00:04:30,229
constant search<font color="#E5E5E5"> I will find the anchor</font>

86
00:04:29,780 --> 00:04:33,950
func

87
00:04:30,230 --> 00:04:36,170
and zoom in on<font color="#E5E5E5"> lip Eng</font><font color="#CCCCCC"> and soon enough</font>

88
00:04:33,950 --> 00:04:39,440
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> identify that it's a specific</font>

89
00:04:36,170 --> 00:04:48,050
<font color="#E5E5E5">version of lip Eng using an indeed</font><font color="#CCCCCC"> have</font>

90
00:04:39,440 --> 00:04:50,210
identifiable<font color="#E5E5E5"> plug in my</font><font color="#CCCCCC"> die is slow we</font>

91
00:04:48,050 --> 00:04:52,130
have the<font color="#E5E5E5"> version of lip Eng</font><font color="#CCCCCC"> it found all</font>

92
00:04:50,210 --> 00:04:53,690
of the<font color="#CCCCCC"> anchor functions already roughly</font>

93
00:04:52,130 --> 00:04:59,030
for the functions

94
00:04:53,690 --> 00:05:01,160
now it's zooms in<font color="#CCCCCC"> and analyzes only the</font>

95
00:04:59,030 --> 00:05:02,780
functions in<font color="#E5E5E5"> the relevant scope instead</font>

96
00:05:01,160 --> 00:05:05,270
of all<font color="#E5E5E5"> of the functions</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> femur</font>

97
00:05:02,780 --> 00:05:10,070
<font color="#E5E5E5">meaning that it will be much</font><font color="#CCCCCC"> faster than</font>

98
00:05:05,270 --> 00:05:15,830
<font color="#CCCCCC">analyzing</font><font color="#E5E5E5"> a few gigabytes</font><font color="#CCCCCC"> DB if it was</font>

99
00:05:10,070 --> 00:05:19,040
<font color="#E5E5E5">therefore this is actually the slowest</font>

100
00:05:15,830 --> 00:05:20,960
part once I have finished analyzing<font color="#E5E5E5"> the</font>

101
00:05:19,040 --> 00:05:33,530
specific functions<font color="#E5E5E5"> it finished it all</font>

102
00:05:20,960 --> 00:05:35,450
and in just<font color="#CCCCCC"> 5 seconds it analyzed all of</font>

103
00:05:33,530 --> 00:05:38,960
the binary<font color="#E5E5E5"> functions in the chosen scope</font>

104
00:05:35,450 --> 00:05:42,260
<font color="#E5E5E5">and now it will start matching the</font>

105
00:05:38,960 --> 00:05:48,349
functions themselves and we're nearly

106
00:05:42,260 --> 00:05:51,530
done so<font color="#CCCCCC"> under way we</font><font color="#E5E5E5"> found library</font>

107
00:05:48,350 --> 00:05:56,540
functions external functions such as STL

108
00:05:51,530 --> 00:05:59,179
2d memset<font color="#E5E5E5"> free CLC 32 inflate and sto</font>

109
00:05:56,540 --> 00:06:02,450
land because<font color="#E5E5E5"> Lee</font><font color="#CCCCCC"> PNG uses them</font><font color="#E5E5E5"> and we</font>

110
00:05:59,180 --> 00:06:06,020
can derive their addresses<font color="#CCCCCC"> but most</font>

111
00:06:02,450 --> 00:06:10,010
important is that we<font color="#CCCCCC"> found</font><font color="#E5E5E5"> Lee PNG we</font>

112
00:06:06,020 --> 00:06:12,500
have a anchor files we have<font color="#E5E5E5"> a lot of</font>

113
00:06:10,010 --> 00:06:17,180
<font color="#E5E5E5">other files and if you look on</font><font color="#CCCCCC"> it we can</font>

114
00:06:12,500 --> 00:06:19,190
save it<font color="#E5E5E5"> where exact matches all over the</font>

115
00:06:17,180 --> 00:06:21,020
only<font color="#E5E5E5"> functions will</font><font color="#CCCCCC"> be missed or</font>

116
00:06:19,190 --> 00:06:24,100
functions without excess because no one

117
00:06:21,020 --> 00:06:28,400
uses them<font color="#E5E5E5"> and we practically don't care</font>

118
00:06:24,100 --> 00:06:30,650
<font color="#E5E5E5">if we look closely we can</font><font color="#CCCCCC"> see but when I</font>

119
00:06:28,400 --> 00:06:33,380
manually<font color="#E5E5E5"> analyzed it</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> miss some</font>

120
00:06:30,650 --> 00:06:35,929
function<font color="#CCCCCC"> here sub something and he told</font>

121
00:06:33,380 --> 00:06:39,800
me it should<font color="#CCCCCC"> be PNG read in it too</font>

122
00:06:35,930 --> 00:06:42,170
<font color="#E5E5E5">before we have PG read in it and after</font>

123
00:06:39,800 --> 00:06:43,680
it<font color="#E5E5E5"> we have pinzhi read in it free so</font><font color="#CCCCCC"> the</font>

124
00:06:42,170 --> 00:06:47,370
<font color="#E5E5E5">plugin is actually better</font>

125
00:06:43,680 --> 00:06:49,500
<font color="#E5E5E5">manual analyzes of the functions and</font>

126
00:06:47,370 --> 00:06:51,479
<font color="#E5E5E5">invert</font><font color="#CCCCCC"> it you right-click you input all</font>

127
00:06:49,500 --> 00:06:54,030
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> symbols and you have all of the</font>

128
00:06:51,479 --> 00:06:57,270
open source<font color="#E5E5E5"> on this few it worked on</font>

129
00:06:54,030 --> 00:06:59,729
<font color="#E5E5E5">open</font><font color="#CCCCCC"> SSL with roughly 3,000 functions</font><font color="#E5E5E5"> in</font>

130
00:06:57,270 --> 00:07:03,000
the<font color="#E5E5E5"> open source</font><font color="#CCCCCC"> with roughly 10 false</font>

131
00:06:59,729 --> 00:07:08,339
positives<font color="#E5E5E5"> that's it</font>

132
00:07:03,000 --> 00:07:08,339
[Applause]

