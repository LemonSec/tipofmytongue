1
00:00:02,670 --> 00:00:08,109
good afternoon<font color="#E5E5E5"> ladies and gentlemen and</font>

2
00:00:05,410 --> 00:00:11,290
<font color="#E5E5E5">thank you for thank you</font><font color="#CCCCCC"> for having</font><font color="#E5E5E5"> me</font>

3
00:00:08,109 --> 00:00:14,139
<font color="#CCCCCC">here again it's kind of a hard</font><font color="#E5E5E5"> act to</font>

4
00:00:11,290 --> 00:00:16,990
follow<font color="#CCCCCC"> Eleanor and Ange but</font><font color="#E5E5E5"> I'll try and</font>

5
00:00:14,139 --> 00:00:21,549
<font color="#E5E5E5">do my</font><font color="#CCCCCC"> best to keep</font><font color="#E5E5E5"> you technically</font>

6
00:00:16,990 --> 00:00:26,278
entertained<font color="#E5E5E5"> my talk is about</font><font color="#CCCCCC"> armed</font>

7
00:00:21,550 --> 00:00:29,010
<font color="#E5E5E5">shellcode this talk is inspired by</font>

8
00:00:26,279 --> 00:00:33,070
efforts of many legends<font color="#E5E5E5"> in the past</font>

9
00:00:29,010 --> 00:00:35,890
<font color="#E5E5E5">notably this was my first inspiration</font>

10
00:00:33,070 --> 00:00:37,829
<font color="#E5E5E5">came from</font><font color="#CCCCCC"> Spooner manscape when they</font>

11
00:00:35,890 --> 00:00:41,260
were still<font color="#CCCCCC"> doing the Metasploit</font><font color="#E5E5E5"> 2.0</font>

12
00:00:37,829 --> 00:00:45,329
framework and they<font color="#E5E5E5"> presented a talk at</font>

13
00:00:41,260 --> 00:00:48,099
at blackhat I think 2005 or 2006<font color="#E5E5E5"> about</font>

14
00:00:45,329 --> 00:00:52,149
<font color="#E5E5E5">what kind of what</font><font color="#CCCCCC"> kind of tricks do you</font>

15
00:00:48,100 --> 00:00:54,329
<font color="#E5E5E5">do after a IP control and they dive</font><font color="#CCCCCC"> into</font>

16
00:00:52,149 --> 00:00:57,820
a lot<font color="#E5E5E5"> of variety of different shellcode</font>

17
00:00:54,329 --> 00:01:00,160
<font color="#E5E5E5">now the x86 world is full of mature</font>

18
00:00:57,820 --> 00:01:01,960
shellcode we all have<font color="#E5E5E5"> meterpreter</font><font color="#CCCCCC"> and</font>

19
00:01:00,160 --> 00:01:05,560
<font color="#CCCCCC">stage shell codes and whatever</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> you</font>

20
00:01:01,960 --> 00:01:06,460
the arm world doesn't so I started

21
00:01:05,560 --> 00:01:09,670
writing<font color="#E5E5E5"> things up</font>

22
00:01:06,460 --> 00:01:13,199
these are scribbles from my notes<font color="#CCCCCC"> oops</font>

23
00:01:09,670 --> 00:01:16,510
this<font color="#E5E5E5"> is not my</font><font color="#CCCCCC"> usual laser pointer</font><font color="#E5E5E5"> right</font>

24
00:01:13,200 --> 00:01:20,290
so<font color="#E5E5E5"> I have a few tricks to present these</font>

25
00:01:16,510 --> 00:01:23,259
are<font color="#E5E5E5"> classified as tricks at best and the</font>

26
00:01:20,290 --> 00:01:25,450
<font color="#E5E5E5">tricks has been inspired by the</font><font color="#CCCCCC"> likes of</font>

27
00:01:23,259 --> 00:01:27,670
<font color="#CCCCCC">Ang who walked up the stage a few</font>

28
00:01:25,450 --> 00:01:31,530
minutes ago<font color="#CCCCCC"> and Travis good speed for</font>

29
00:01:27,670 --> 00:01:34,540
<font color="#CCCCCC">POC</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> GTFO and part</font><font color="#E5E5E5"> of metric involves</font>

30
00:01:31,530 --> 00:01:37,360
shellcode polyglots<font color="#CCCCCC"> I</font><font color="#E5E5E5"> too am a big fan</font>

31
00:01:34,540 --> 00:01:41,170
<font color="#CCCCCC">of polyglots</font><font color="#E5E5E5"> and let me take you on this</font>

32
00:01:37,360 --> 00:01:43,240
journey<font color="#CCCCCC"> so my name is Sami</font><font color="#E5E5E5"> Lucia quick</font>

33
00:01:41,170 --> 00:01:45,130
background<font color="#CCCCCC"> I'll give you a very brief</font>

34
00:01:43,240 --> 00:01:47,530
background<font color="#E5E5E5"> about our shellcode just to</font>

35
00:01:45,130 --> 00:01:49,000
kind of get you a little<font color="#E5E5E5"> familiar with</font>

36
00:01:47,530 --> 00:01:53,439
the three-letter acronyms<font color="#CCCCCC"> that are</font>

37
00:01:49,000 --> 00:01:54,970
popping<font color="#E5E5E5"> up on</font><font color="#CCCCCC"> the screen and then we're</font>

38
00:01:53,439 --> 00:01:56,619
<font color="#E5E5E5">going to talk</font><font color="#CCCCCC"> about two things</font><font color="#E5E5E5"> I</font>

39
00:01:54,970 --> 00:01:58,929
<font color="#E5E5E5">initially started talking about three</font>

40
00:01:56,619 --> 00:02:02,829
<font color="#E5E5E5">things but the problem</font><font color="#CCCCCC"> of cache</font>

41
00:01:58,930 --> 00:02:04,540
coherency<font color="#CCCCCC"> and in arm systems has</font><font color="#E5E5E5"> been</font>

42
00:02:02,829 --> 00:02:06,070
solved<font color="#E5E5E5"> rather easily</font><font color="#CCCCCC"> I had a very</font>

43
00:02:04,540 --> 00:02:08,500
complicated<font color="#E5E5E5"> technique so I'm not going</font>

44
00:02:06,070 --> 00:02:10,478
<font color="#E5E5E5">to</font><font color="#CCCCCC"> present that</font><font color="#E5E5E5"> but I'm</font><font color="#CCCCCC"> gonna focus</font><font color="#E5E5E5"> on</font>

45
00:02:08,500 --> 00:02:13,660
two techniques one is<font color="#E5E5E5"> how do we get</font>

46
00:02:10,479 --> 00:02:15,160
around space limitation in shellcode<font color="#E5E5E5"> one</font>

47
00:02:13,660 --> 00:02:16,450
of the things I like to do<font color="#E5E5E5"> for fun is</font>

48
00:02:15,160 --> 00:02:18,940
write exploits

49
00:02:16,450 --> 00:02:21,220
you are<font color="#CCCCCC"> always limited by</font><font color="#E5E5E5"> some space</font>

50
00:02:18,940 --> 00:02:25,329
crunches<font color="#CCCCCC"> and a few</font><font color="#E5E5E5"> critical exploits so</font>

51
00:02:21,220 --> 00:02:26,980
I put together an arm<font color="#E5E5E5"> egg hunter and the</font>

52
00:02:25,330 --> 00:02:31,810
second trick that I'm going<font color="#CCCCCC"> to present</font>

53
00:02:26,980 --> 00:02:34,420
is quantum leap<font color="#CCCCCC"> shell core which</font>

54
00:02:31,810 --> 00:02:35,620
<font color="#E5E5E5">involves polyglot instructions and then</font>

55
00:02:34,420 --> 00:02:37,299
of course<font color="#E5E5E5"> we'll have demos and I'm</font>

56
00:02:35,620 --> 00:02:39,160
hoping that<font color="#E5E5E5"> the demos work so that I</font>

57
00:02:37,300 --> 00:02:39,760
<font color="#CCCCCC">don't look like a</font><font color="#E5E5E5"> complete fool</font><font color="#CCCCCC"> in front</font>

58
00:02:39,160 --> 00:02:43,269
<font color="#CCCCCC">of you</font>

59
00:02:39,760 --> 00:02:45,970
here we go<font color="#CCCCCC"> very</font><font color="#E5E5E5"> quick</font><font color="#CCCCCC"> introduction to</font>

60
00:02:43,269 --> 00:02:47,650
arms shell coding<font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to talk</font>

61
00:02:45,970 --> 00:02:52,359
<font color="#CCCCCC">about instructions and such but</font>

62
00:02:47,650 --> 00:02:57,250
typically<font color="#E5E5E5"> whenever you find our shell</font>

63
00:02:52,360 --> 00:03:00,640
<font color="#E5E5E5">code in the wild you have two parts</font><font color="#CCCCCC"> to</font>

64
00:02:57,250 --> 00:03:02,950
the shell code arm as you<font color="#E5E5E5"> know has fixed</font>

65
00:03:00,640 --> 00:03:05,160
<font color="#E5E5E5">with instructions so every instruction's</font>

66
00:03:02,950 --> 00:03:07,899
opcode and<font color="#CCCCCC"> operands are four bytes long</font>

67
00:03:05,160 --> 00:03:09,880
which to the<font color="#E5E5E5"> shell code writer is a</font>

68
00:03:07,900 --> 00:03:11,980
blessing and a curse<font color="#E5E5E5"> the blessing is</font>

69
00:03:09,880 --> 00:03:14,260
<font color="#CCCCCC">that the shell code stays compact</font><font color="#E5E5E5"> the</font>

70
00:03:11,980 --> 00:03:16,298
curse is<font color="#CCCCCC"> that you cannot avoid bad</font>

71
00:03:14,260 --> 00:03:19,120
characters like null bytes will sneak in

72
00:03:16,299 --> 00:03:21,540
and ugly things will sneak in so one of

73
00:03:19,120 --> 00:03:24,400
the things that our shell coders do is

74
00:03:21,540 --> 00:03:26,769
<font color="#E5E5E5">always implement</font><font color="#CCCCCC"> something like an arm</font>

75
00:03:24,400 --> 00:03:30,370
to thumb switch<font color="#E5E5E5"> what you see in the blue</font>

76
00:03:26,769 --> 00:03:32,980
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> little snippet</font><font color="#E5E5E5"> of arm code which</font>

77
00:03:30,370 --> 00:03:35,230
very<font color="#E5E5E5"> quickly performs a branch to an</font>

78
00:03:32,980 --> 00:03:37,840
<font color="#E5E5E5">odd-numbered address</font><font color="#CCCCCC"> flipping the</font>

79
00:03:35,230 --> 00:03:39,340
processor into<font color="#E5E5E5"> thumb mode now arm as you</font>

80
00:03:37,840 --> 00:03:41,850
know<font color="#E5E5E5"> is one of those weird processor</font>

81
00:03:39,340 --> 00:03:44,140
which has<font color="#E5E5E5"> two instruction sets</font>

82
00:03:41,850 --> 00:03:47,380
simultaneously on it you have<font color="#E5E5E5"> the four</font>

83
00:03:44,140 --> 00:03:50,230
byte arm instructions and then a thumb

84
00:03:47,380 --> 00:03:51,609
is smaller than an arm well it's

85
00:03:50,230 --> 00:03:53,798
supposed<font color="#E5E5E5"> to be half the</font><font color="#CCCCCC"> size of that I'm</font>

86
00:03:51,609 --> 00:03:56,260
but<font color="#E5E5E5"> that'd be</font><font color="#CCCCCC"> very weird but a thumb</font>

87
00:03:53,799 --> 00:03:58,209
instruction<font color="#E5E5E5"> is</font><font color="#CCCCCC"> two bytes</font><font color="#E5E5E5"> and it makes</font>

88
00:03:56,260 --> 00:04:00,548
the<font color="#CCCCCC"> shellcode not only more compact</font><font color="#E5E5E5"> but</font>

89
00:03:58,209 --> 00:04:02,470
gets rid of a<font color="#E5E5E5"> lot of bad characters so</font>

90
00:04:00,549 --> 00:04:04,120
<font color="#CCCCCC">shell coders prefer this technique they</font>

91
00:04:02,470 --> 00:04:05,739
will switch to thermode and then the

92
00:04:04,120 --> 00:04:08,620
rest of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> in green goes on</font>

93
00:04:05,739 --> 00:04:11,560
in<font color="#CCCCCC"> thumb so if you</font><font color="#E5E5E5"> kind of disassemble</font>

94
00:04:08,620 --> 00:04:14,859
it it looks somewhat like<font color="#E5E5E5"> this you have</font>

95
00:04:11,560 --> 00:04:17,769
the four byte blue code that switches to

96
00:04:14,859 --> 00:04:19,510
the<font color="#E5E5E5"> two byte aligned green code and then</font>

97
00:04:17,769 --> 00:04:24,849
whatever literal pools you<font color="#E5E5E5"> may have this</font>

98
00:04:19,510 --> 00:04:26,919
<font color="#E5E5E5">is typically how shell code works now</font>

99
00:04:24,849 --> 00:04:30,308
<font color="#E5E5E5">I'm going to get</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> quickly to the</font>

100
00:04:26,919 --> 00:04:33,339
first problem<font color="#CCCCCC"> that is how do we navigate</font>

101
00:04:30,309 --> 00:04:37,239
through<font color="#E5E5E5"> shellcode which is limited</font><font color="#CCCCCC"> to</font>

102
00:04:33,339 --> 00:04:40,769
very<font color="#E5E5E5"> tight spaces now I'm taking a stack</font>

103
00:04:37,239 --> 00:04:43,359
<font color="#E5E5E5">overflow as an example in this case</font><font color="#CCCCCC"> you</font>

104
00:04:40,769 --> 00:04:44,919
<font color="#CCCCCC">may</font><font color="#E5E5E5"> have a local buffer</font><font color="#CCCCCC"> you may have a</font>

105
00:04:43,359 --> 00:04:48,068
local<font color="#E5E5E5"> variable somewhere in the stack</font>

106
00:04:44,919 --> 00:04:52,479
<font color="#CCCCCC">now we may have constraints</font><font color="#E5E5E5"> in the size</font>

107
00:04:48,069 --> 00:04:54,849
of the<font color="#CCCCCC"> payload for example what if by</font>

108
00:04:52,479 --> 00:04:56,949
increasing<font color="#E5E5E5"> your payload you're going to</font>

109
00:04:54,849 --> 00:04:59,739
accidentally overwrite a local variable

110
00:04:56,949 --> 00:05:02,099
this will cause a seg fault<font color="#E5E5E5"> you go past</font>

111
00:04:59,739 --> 00:05:06,239
the<font color="#CCCCCC"> end of</font><font color="#E5E5E5"> the stack this is a seg fault</font>

112
00:05:02,099 --> 00:05:09,128
and sometimes<font color="#E5E5E5"> these will create problems</font>

113
00:05:06,239 --> 00:05:10,299
this<font color="#CCCCCC"> is not an old problem this</font><font color="#E5E5E5"> is I</font>

114
00:05:09,129 --> 00:05:12,369
mean<font color="#E5E5E5"> sorry this is not</font><font color="#CCCCCC"> a new problem</font>

115
00:05:10,299 --> 00:05:15,039
this<font color="#CCCCCC"> is old</font><font color="#E5E5E5"> this has been solved before</font>

116
00:05:12,369 --> 00:05:19,539
there's many solutions<font color="#E5E5E5"> and one of the</font>

117
00:05:15,039 --> 00:05:21,489
<font color="#CCCCCC">popular solutions is the egg hunter now</font>

118
00:05:19,539 --> 00:05:24,009
the egg hunter has been<font color="#E5E5E5"> invented many</font>

119
00:05:21,489 --> 00:05:25,628
<font color="#E5E5E5">years ago there's nothing new here to</font>

120
00:05:24,009 --> 00:05:27,969
give you a very quick theory about how

121
00:05:25,629 --> 00:05:31,269
the<font color="#CCCCCC"> armed</font><font color="#E5E5E5"> egg hunt I mean how egg Hunter</font>

122
00:05:27,969 --> 00:05:33,459
works<font color="#E5E5E5"> you kind of load the real</font>

123
00:05:31,269 --> 00:05:35,949
<font color="#CCCCCC">shellcode anywhere you like in</font><font color="#E5E5E5"> the</font>

124
00:05:33,459 --> 00:05:38,619
memory where there's space but you

125
00:05:35,949 --> 00:05:41,079
prefix the shellcode with two markers

126
00:05:38,619 --> 00:05:43,269
<font color="#CCCCCC">two eggs two four byte values</font>

127
00:05:41,079 --> 00:05:47,259
concatenated successively<font color="#E5E5E5"> with one</font>

128
00:05:43,269 --> 00:05:51,639
another<font color="#E5E5E5"> and then the egg hunter code</font>

129
00:05:47,259 --> 00:05:53,709
searches the memory page after page<font color="#E5E5E5"> to</font>

130
00:05:51,639 --> 00:05:56,349
see these two two markers appear<font color="#E5E5E5"> in</font>

131
00:05:53,709 --> 00:05:58,539
<font color="#E5E5E5">succession if they do then they know</font>

132
00:05:56,349 --> 00:06:01,688
<font color="#E5E5E5">that hey the shell is here let's jump to</font>

133
00:05:58,539 --> 00:06:06,369
it and<font color="#E5E5E5"> off</font><font color="#CCCCCC"> you go now the whole process</font>

134
00:06:01,689 --> 00:06:07,689
<font color="#E5E5E5">of scanning memory non-destructively how</font>

135
00:06:06,369 --> 00:06:09,369
do you go through<font color="#E5E5E5"> virtual memory space</font>

136
00:06:07,689 --> 00:06:10,449
and say is this<font color="#E5E5E5"> page here is this page</font>

137
00:06:09,369 --> 00:06:12,249
<font color="#E5E5E5">here is</font><font color="#CCCCCC"> ass page</font><font color="#E5E5E5"> here</font>

138
00:06:10,449 --> 00:06:14,619
what if the page is not here if you're

139
00:06:12,249 --> 00:06:16,299
in user land you'll cause a seg fault so

140
00:06:14,619 --> 00:06:19,360
you<font color="#E5E5E5"> go to have the colonel do this for</font>

141
00:06:16,299 --> 00:06:21,789
you<font color="#E5E5E5"> and this happens by using some</font>

142
00:06:19,360 --> 00:06:24,129
syscall which you really don't you

143
00:06:21,789 --> 00:06:25,869
really<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need but the moment you</font>

144
00:06:24,129 --> 00:06:28,599
<font color="#E5E5E5">have a cyst call which takes in a memory</font>

145
00:06:25,869 --> 00:06:30,219
address<font color="#CCCCCC"> as one of</font><font color="#E5E5E5"> the arguments here on</font>

146
00:06:28,599 --> 00:06:32,199
the<font color="#CCCCCC"> syscall of the sysvol</font><font color="#E5E5E5"> comes back as</font>

147
00:06:30,219 --> 00:06:34,089
failure then it says<font color="#CCCCCC"> okay the memory</font>

148
00:06:32,199 --> 00:06:35,799
access was not there that<font color="#E5E5E5"> means the page</font>

149
00:06:34,089 --> 00:06:37,389
doesn't exist<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you go on this</font>

150
00:06:35,799 --> 00:06:40,209
technique was what was documented by

151
00:06:37,389 --> 00:06:42,489
<font color="#E5E5E5">spoon and I'm</font><font color="#CCCCCC"> a Spooner manscape to</font>

152
00:06:40,209 --> 00:06:43,780
safely determine whether a memory page

153
00:06:42,489 --> 00:06:47,260
exists or not

154
00:06:43,780 --> 00:06:51,760
once you find<font color="#E5E5E5"> it great you transfer the</font>

155
00:06:47,260 --> 00:06:53,950
control<font color="#E5E5E5"> so nothing new here let me give</font>

156
00:06:51,760 --> 00:06:56,620
you a recap<font color="#CCCCCC"> of what happens in the</font>

157
00:06:53,950 --> 00:06:59,460
present day<font color="#CCCCCC"> and age if you use an egg</font>

158
00:06:56,620 --> 00:07:02,170
<font color="#E5E5E5">hunter</font><font color="#CCCCCC"> specifically an arm egg hunter</font>

159
00:06:59,460 --> 00:07:04,659
<font color="#E5E5E5">you may choose to load</font><font color="#CCCCCC"> your shellcode up</font>

160
00:07:02,170 --> 00:07:06,970
<font color="#E5E5E5">anywhere you like</font><font color="#CCCCCC"> for example here</font><font color="#E5E5E5"> I've</font>

161
00:07:04,660 --> 00:07:09,640
loaded in the heap<font color="#CCCCCC"> and you notice that</font>

162
00:07:06,970 --> 00:07:12,130
it has<font color="#E5E5E5"> been prefixed by two markers of</font>

163
00:07:09,640 --> 00:07:13,840
arbitrary choice<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> called it hack</font>

164
00:07:12,130 --> 00:07:15,820
hack here but my production shellcode

165
00:07:13,840 --> 00:07:19,659
always uses Abba<font color="#CCCCCC"> Abba because I like</font>

166
00:07:15,820 --> 00:07:22,750
<font color="#E5E5E5">Abba very much</font><font color="#CCCCCC"> and then you have your</font>

167
00:07:19,660 --> 00:07:25,030
stack overflow<font color="#CCCCCC"> the usual stuff you have</font>

168
00:07:22,750 --> 00:07:26,830
your<font color="#CCCCCC"> rob chain</font><font color="#E5E5E5"> but now you can't place</font>

169
00:07:25,030 --> 00:07:31,960
the whole shellcode there<font color="#E5E5E5"> so you place a</font>

170
00:07:26,830 --> 00:07:33,580
little<font color="#E5E5E5"> stub the egg</font><font color="#CCCCCC"> hunter okay sorry</font>

171
00:07:31,960 --> 00:07:35,229
important step before the<font color="#CCCCCC"> rob</font><font color="#E5E5E5"> chain the</font>

172
00:07:33,580 --> 00:07:37,359
<font color="#CCCCCC">rob chain is very necessary</font><font color="#E5E5E5"> I kind of</font>

173
00:07:35,230 --> 00:07:39,100
forgot<font color="#E5E5E5"> that point because today you have</font>

174
00:07:37,360 --> 00:07:41,380
something called data execution

175
00:07:39,100 --> 00:07:44,320
prevention which makes the memory

176
00:07:41,380 --> 00:07:46,360
non-executable<font color="#CCCCCC"> if you really want to use</font>

177
00:07:44,320 --> 00:07:49,409
it<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to have the</font><font color="#CCCCCC"> rob chain</font>

178
00:07:46,360 --> 00:07:53,200
to apply<font color="#CCCCCC"> em</font><font color="#E5E5E5"> protect make the memory</font>

179
00:07:49,410 --> 00:07:56,020
executable again and then once your

180
00:07:53,200 --> 00:07:58,300
stack is executable<font color="#CCCCCC"> you can then jump</font>

181
00:07:56,020 --> 00:08:01,419
your shellcode<font color="#E5E5E5"> your shellcode will</font>

182
00:07:58,300 --> 00:08:05,380
execute and then<font color="#E5E5E5"> the egg hunter goes</font>

183
00:08:01,419 --> 00:08:09,880
through scanning<font color="#E5E5E5"> page after page until</font>

184
00:08:05,380 --> 00:08:12,310
<font color="#E5E5E5">it finds</font><font color="#CCCCCC"> the pattern it finds both of</font>

185
00:08:09,880 --> 00:08:16,659
these eggs<font color="#E5E5E5"> and then it says</font><font color="#CCCCCC"> okay</font>

186
00:08:12,310 --> 00:08:20,890
shellcodes<font color="#CCCCCC"> been confirmed</font><font color="#E5E5E5"> now let's jump</font>

187
00:08:16,660 --> 00:08:23,919
here what's<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> happen order</font>

188
00:08:20,890 --> 00:08:29,830
failure this will not work simply

189
00:08:23,919 --> 00:08:34,030
because<font color="#E5E5E5"> the memory at the heat is not</font>

190
00:08:29,830 --> 00:08:36,280
executable reacted so data execution

191
00:08:34,030 --> 00:08:38,559
prevention<font color="#CCCCCC"> I mean of course it has</font><font color="#E5E5E5"> been</font>

192
00:08:36,280 --> 00:08:41,559
solved by this<font color="#CCCCCC"> rob chain over</font><font color="#E5E5E5"> here but</font>

193
00:08:38,559 --> 00:08:43,449
<font color="#E5E5E5">using a rope chain you only apply</font><font color="#CCCCCC"> an</font>

194
00:08:41,559 --> 00:08:45,609
<font color="#E5E5E5">product</font><font color="#CCCCCC"> to a certain region typically in</font>

195
00:08:43,450 --> 00:08:47,350
the same vicinity<font color="#CCCCCC"> I'm sure you can build</font>

196
00:08:45,610 --> 00:08:49,450
a custom<font color="#E5E5E5"> rob chain to apply and protect</font>

197
00:08:47,350 --> 00:08:52,810
<font color="#CCCCCC">to different</font><font color="#E5E5E5"> regions and then do it but</font>

198
00:08:49,450 --> 00:08:55,959
like I say a good shellcode must be

199
00:08:52,810 --> 00:08:57,609
delivered in style<font color="#E5E5E5"> so the shellcode</font>

200
00:08:55,959 --> 00:09:00,099
<font color="#E5E5E5">should do all the style</font>

201
00:08:57,610 --> 00:09:04,120
by itself<font color="#E5E5E5"> and that's what I did I wrote</font>

202
00:09:00,100 --> 00:09:08,440
the<font color="#CCCCCC"> EM protect egg hunter which is as</font>

203
00:09:04,120 --> 00:09:10,060
best classified as a trick so without

204
00:09:08,440 --> 00:09:11,709
much<font color="#CCCCCC"> further ado let me show you what</font>

205
00:09:10,060 --> 00:09:14,260
the<font color="#CCCCCC"> armed</font><font color="#E5E5E5"> em protect egg hunter does</font>

206
00:09:11,709 --> 00:09:21,899
<font color="#E5E5E5">there's very minor modifications in the</font>

207
00:09:14,260 --> 00:09:26,589
<font color="#E5E5E5">shell code essentially you want to use</font>

208
00:09:21,899 --> 00:09:29,110
instead<font color="#E5E5E5"> of using a</font><font color="#CCCCCC"> guest syscall</font><font color="#E5E5E5"> you</font>

209
00:09:26,589 --> 00:09:32,500
want to use em<font color="#E5E5E5"> protect as the page</font>

210
00:09:29,110 --> 00:09:35,649
checking syscall itself which means that

211
00:09:32,500 --> 00:09:39,880
the first time you get<font color="#E5E5E5"> control of shell</font>

212
00:09:35,649 --> 00:09:42,010
code your stack memories<font color="#E5E5E5"> are</font><font color="#CCCCCC"> WX</font><font color="#E5E5E5"> but now</font>

213
00:09:39,880 --> 00:09:44,740
as you're keeping<font color="#CCCCCC"> on going searching</font>

214
00:09:42,010 --> 00:09:47,260
through the memory pages the<font color="#E5E5E5"> syscall</font>

215
00:09:44,740 --> 00:09:49,420
that you're using to<font color="#CCCCCC"> test the memory is</font>

216
00:09:47,260 --> 00:09:51,069
<font color="#E5E5E5">M protect and as you keep searching</font>

217
00:09:49,420 --> 00:09:54,310
<font color="#CCCCCC">through</font><font color="#E5E5E5"> the pages</font><font color="#CCCCCC"> you're marking them</font>

218
00:09:51,070 --> 00:09:56,529
<font color="#CCCCCC">rwx</font><font color="#E5E5E5"> through and through which means by</font>

219
00:09:54,310 --> 00:10:00,339
the<font color="#E5E5E5"> time you get to</font><font color="#CCCCCC"> your heap</font><font color="#E5E5E5"> the heap</font>

220
00:09:56,529 --> 00:10:04,630
will be painted executable we have our

221
00:10:00,339 --> 00:10:04,920
eggs in place<font color="#E5E5E5"> boom you jump and off you</font>

222
00:10:04,630 --> 00:10:08,470
go

223
00:10:04,920 --> 00:10:10,990
so this is the<font color="#E5E5E5"> M protect egg hunter that</font>

224
00:10:08,470 --> 00:10:11,410
<font color="#E5E5E5">I want to share with you and I'll show</font>

225
00:10:10,990 --> 00:10:14,320
<font color="#E5E5E5">you</font>

226
00:10:11,410 --> 00:10:16,899
as always<font color="#E5E5E5"> I'll show you a demo of how</font>

227
00:10:14,320 --> 00:10:18,790
<font color="#E5E5E5">it's done and then we'll go to the</font>

228
00:10:16,899 --> 00:10:26,410
<font color="#E5E5E5">second</font><font color="#CCCCCC"> part that</font><font color="#E5E5E5"> is the polyglot she'll</font>

229
00:10:18,790 --> 00:10:27,790
go<font color="#CCCCCC"> right there more time I'm</font><font color="#E5E5E5"> hoping you</font>

230
00:10:26,410 --> 00:10:30,550
can<font color="#E5E5E5"> read the text all the</font><font color="#CCCCCC"> way at the</font>

231
00:10:27,790 --> 00:10:33,930
<font color="#E5E5E5">back is it good or do I need to</font><font color="#CCCCCC"> increase</font>

232
00:10:30,550 --> 00:10:37,359
the<font color="#E5E5E5"> font I'll go very</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> thank you</font>

233
00:10:33,930 --> 00:10:44,699
right now I'm going<font color="#E5E5E5"> to show you two</font>

234
00:10:37,360 --> 00:10:44,699
pieces<font color="#CCCCCC"> of code there</font><font color="#E5E5E5"> is a victim code</font>

235
00:10:49,440 --> 00:10:58,209
right here<font color="#CCCCCC"> is here</font><font color="#E5E5E5"> is a classic stack</font>

236
00:10:54,130 --> 00:11:00,250
overflow bug<font color="#E5E5E5"> the shell</font><font color="#CCCCCC"> code is a series</font>

237
00:10:58,209 --> 00:11:02,199
of<font color="#E5E5E5"> armed breakpoint instructions which</font>

238
00:11:00,250 --> 00:11:04,690
I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Mel lock and load it into</font>

239
00:11:02,199 --> 00:11:08,800
the heap<font color="#CCCCCC"> and of course I'm going to</font>

240
00:11:04,690 --> 00:11:11,290
prefix it with<font color="#E5E5E5"> these two</font><font color="#CCCCCC"> eggs and then</font>

241
00:11:08,800 --> 00:11:13,870
down<font color="#CCCCCC"> here you have your you</font><font color="#E5E5E5"> have</font>

242
00:11:11,290 --> 00:11:16,569
classic buffer overflow the dreaded

243
00:11:13,870 --> 00:11:20,880
string copy which keeps<font color="#E5E5E5"> us employed and</font>

244
00:11:16,570 --> 00:11:27,519
in business for more<font color="#CCCCCC"> than 30 years now</font>

245
00:11:20,880 --> 00:11:34,569
<font color="#E5E5E5">right okay sorry I have</font><font color="#CCCCCC"> to refer to</font><font color="#E5E5E5"> my</font>

246
00:11:27,519 --> 00:11:41,670
notes<font color="#CCCCCC"> a little bit let me show you the</font>

247
00:11:34,569 --> 00:11:41,670
code<font color="#E5E5E5"> so here I</font><font color="#CCCCCC"> have the egg hunter code</font>

248
00:11:43,170 --> 00:11:46,329
I'm not going<font color="#E5E5E5"> to show the classic egg</font>

249
00:11:45,339 --> 00:11:48,550
hunter because that<font color="#E5E5E5"> doesn't make sense</font>

250
00:11:46,329 --> 00:11:49,930
anyway anyway let me straight<font color="#CCCCCC"> there we</font>

251
00:11:48,550 --> 00:11:51,579
go and<font color="#E5E5E5"> show you this a good hundred code</font>

252
00:11:49,930 --> 00:11:54,160
by<font color="#E5E5E5"> the way all the shell code is already</font>

253
00:11:51,579 --> 00:11:56,709
<font color="#E5E5E5">up on github</font><font color="#CCCCCC"> you can feel</font><font color="#E5E5E5"> free to steal</font>

254
00:11:54,160 --> 00:12:01,719
it modify<font color="#CCCCCC"> it if you modify please let me</font>

255
00:11:56,709 --> 00:12:06,489
know because I love new tricks<font color="#E5E5E5"> the core</font>

256
00:12:01,720 --> 00:12:08,649
of the egg<font color="#CCCCCC"> Hunter</font><font color="#E5E5E5"> loop is over here the</font>

257
00:12:06,490 --> 00:12:12,579
<font color="#E5E5E5">SIS call that I'm using to test the</font>

258
00:12:08,649 --> 00:12:16,899
pages is<font color="#CCCCCC"> M protect which is hex seven</font>

259
00:12:12,579 --> 00:12:19,420
Delta and I increment<font color="#E5E5E5"> the pointer by hex</font>

260
00:12:16,899 --> 00:12:22,540
<font color="#CCCCCC">one thousand bytes at a time</font><font color="#E5E5E5"> and every</font>

261
00:12:19,420 --> 00:12:25,870
time<font color="#CCCCCC"> I apply the SIS</font><font color="#E5E5E5"> call to invoke</font><font color="#CCCCCC"> M</font>

262
00:12:22,540 --> 00:12:29,380
protect<font color="#E5E5E5"> I am also marking the memory</font>

263
00:12:25,870 --> 00:12:31,720
protection as<font color="#CCCCCC"> RW X</font><font color="#E5E5E5"> so if the page exists</font>

264
00:12:29,380 --> 00:12:34,149
it becomes executable if it doesn't if

265
00:12:31,720 --> 00:12:37,240
it's like<font color="#CCCCCC"> Ino memory then keep on going</font>

266
00:12:34,149 --> 00:12:39,040
<font color="#E5E5E5">and once you find a valid page then you</font>

267
00:12:37,240 --> 00:12:43,329
check<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> presence of the two eggs</font>

268
00:12:39,040 --> 00:12:46,180
if the eggs<font color="#CCCCCC"> exist</font><font color="#E5E5E5"> then over here you</font>

269
00:12:43,329 --> 00:12:47,560
<font color="#E5E5E5">simply jump to the shellcode</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not</font>

270
00:12:46,180 --> 00:12:51,099
going<font color="#E5E5E5"> to go into the details of the</font>

271
00:12:47,560 --> 00:12:58,119
assembly but rather let's see<font color="#E5E5E5"> this using</font>

272
00:12:51,100 --> 00:13:00,339
a demo<font color="#CCCCCC"> I have the the script</font><font color="#E5E5E5"> to do the</font>

273
00:12:58,120 --> 00:13:02,529
shellcode so here's your egg<font color="#CCCCCC"> Hunter code</font>

274
00:13:00,339 --> 00:13:05,649
<font color="#E5E5E5">this is going to search</font><font color="#CCCCCC"> for the pattern</font>

275
00:13:02,529 --> 00:13:09,519
<font color="#E5E5E5">hack hack loaded anywhere in the process</font>

276
00:13:05,649 --> 00:13:11,529
memory<font color="#CCCCCC"> down below you</font><font color="#E5E5E5"> see the</font><font color="#CCCCCC"> rob</font><font color="#E5E5E5"> chain</font>

277
00:13:09,519 --> 00:13:14,319
<font color="#E5E5E5">this whole stuff is the</font><font color="#CCCCCC"> rob chain to</font>

278
00:13:11,529 --> 00:13:16,569
apply the first<font color="#E5E5E5"> stem protect to get the</font>

279
00:13:14,319 --> 00:13:20,079
stack executable<font color="#E5E5E5"> and the egg</font><font color="#CCCCCC"> hundred</font>

280
00:13:16,569 --> 00:13:22,469
code running<font color="#E5E5E5"> and let's let's now see</font><font color="#CCCCCC"> how</font>

281
00:13:20,079 --> 00:13:22,469
<font color="#E5E5E5">it goes</font>

282
00:13:27,520 --> 00:13:39,970
<font color="#E5E5E5">got this and while I'm</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> it let me</font>

283
00:13:30,470 --> 00:13:45,260
also get<font color="#E5E5E5"> the final call got it</font>

284
00:13:39,970 --> 00:13:53,779
<font color="#CCCCCC">okay so first let me show you the</font><font color="#E5E5E5"> code</font>

285
00:13:45,260 --> 00:13:56,000
running<font color="#E5E5E5"> normally I'm going to run crash</font>

286
00:13:53,779 --> 00:14:05,180
the whole program with the classic stack

287
00:13:56,000 --> 00:14:08,240
overflow there we go good enough<font color="#E5E5E5"> you</font>

288
00:14:05,180 --> 00:14:10,160
should<font color="#CCCCCC"> get a segmentation</font><font color="#E5E5E5"> fault</font><font color="#CCCCCC"> you see</font>

289
00:14:08,240 --> 00:14:13,850
the program<font color="#CCCCCC"> counter in your control</font><font color="#E5E5E5"> the</font>

290
00:14:10,160 --> 00:14:15,890
stack memory<font color="#CCCCCC"> is the stack memory</font><font color="#E5E5E5"> is also</font>

291
00:14:13,850 --> 00:14:20,270
overwritten<font color="#CCCCCC"> you stick the egg hunter</font>

292
00:14:15,890 --> 00:14:21,800
over<font color="#E5E5E5"> here at the stack and then see how</font>

293
00:14:20,270 --> 00:14:24,020
it<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> if I look at the memory</font>

294
00:14:21,800 --> 00:14:26,750
permissions<font color="#CCCCCC"> currently data execution</font>

295
00:14:24,020 --> 00:14:31,339
prevention is on and the stack is<font color="#E5E5E5"> not</font>

296
00:14:26,750 --> 00:14:36,350
executable<font color="#E5E5E5"> however I also have the</font>

297
00:14:31,339 --> 00:14:39,170
<font color="#CCCCCC">shellcode that is already present loaded</font>

298
00:14:36,350 --> 00:14:42,560
up in the<font color="#E5E5E5"> heap</font><font color="#CCCCCC"> so here's my heap memory</font>

299
00:14:39,170 --> 00:14:45,699
<font color="#E5E5E5">at eleven thousand hex and</font><font color="#CCCCCC"> I'm going to</font>

300
00:14:42,560 --> 00:14:50,150
search the heap memory<font color="#E5E5E5"> for this string</font>

301
00:14:45,700 --> 00:14:54,410
<font color="#E5E5E5">hat now I find the string at two</font>

302
00:14:50,150 --> 00:14:57,829
<font color="#CCCCCC">locations</font><font color="#E5E5E5"> so if I now dump the memory at</font>

303
00:14:54,410 --> 00:15:00,110
the first location I find here it is

304
00:14:57,830 --> 00:15:02,270
this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> original</font><font color="#E5E5E5"> shell for</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> hack</font>

305
00:15:00,110 --> 00:15:05,000
<font color="#E5E5E5">hack and then all this stuff that you</font>

306
00:15:02,270 --> 00:15:07,010
see are the<font color="#E5E5E5"> breakpoints the demo I'm</font>

307
00:15:05,000 --> 00:15:09,020
going<font color="#E5E5E5"> to give you is the first demo is</font>

308
00:15:07,010 --> 00:15:11,810
we're going to successfully<font color="#E5E5E5"> reach the</font>

309
00:15:09,020 --> 00:15:14,600
breakpoint<font color="#E5E5E5"> having seen the having seen</font>

310
00:15:11,810 --> 00:15:19,729
<font color="#CCCCCC">DM protect egg Hunter apply rwx to all</font>

311
00:15:14,600 --> 00:15:21,470
the all the memory pages so first first

312
00:15:19,730 --> 00:15:23,150
demo and then<font color="#E5E5E5"> the second one will do</font>

313
00:15:21,470 --> 00:15:31,839
with the real<font color="#CCCCCC"> shellcode to prove that</font>

314
00:15:23,150 --> 00:15:36,520
the egg<font color="#CCCCCC"> hunter works</font><font color="#E5E5E5"> I'm gonna do a run</font>

315
00:15:31,839 --> 00:15:41,580
<font color="#E5E5E5">Rob demo so</font>

316
00:15:36,520 --> 00:15:44,319
here we go<font color="#E5E5E5"> the egg hunters effectively</font><font color="#CCCCCC"> I</font>

317
00:15:41,580 --> 00:15:47,710
mean this has crashed it has crashed at

318
00:15:44,320 --> 00:15:49,990
program counter 48 48 48 48 and<font color="#E5E5E5"> em</font>

319
00:15:47,710 --> 00:15:52,600
protect<font color="#CCCCCC"> has happened so if I look</font><font color="#E5E5E5"> at the</font>

320
00:15:49,990 --> 00:15:56,140
process memory<font color="#CCCCCC"> layout</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see that</font>

321
00:15:52,600 --> 00:15:58,990
the stack is<font color="#CCCCCC"> now executable the egg</font>

322
00:15:56,140 --> 00:16:01,210
Hunter code is where my stack pointer

323
00:15:58,990 --> 00:16:04,300
points to<font color="#E5E5E5"> all this stuff is the egg</font>

324
00:16:01,210 --> 00:16:06,460
Hunter code if this code runs<font color="#E5E5E5"> then it's</font>

325
00:16:04,300 --> 00:16:08,859
going<font color="#E5E5E5"> to scan the heap and then it's</font>

326
00:16:06,460 --> 00:16:11,200
going<font color="#E5E5E5"> to land me</font><font color="#CCCCCC"> into it's going to land</font>

327
00:16:08,860 --> 00:16:14,980
<font color="#E5E5E5">me into the</font><font color="#CCCCCC"> breakpoints so I'm going to</font>

328
00:16:11,200 --> 00:16:19,930
<font color="#E5E5E5">run the stuff again this time without</font>

329
00:16:14,980 --> 00:16:28,480
crashing at 48 48 48 48 and effectively

330
00:16:19,930 --> 00:16:29,800
we will reach the breakpoints so now I'm

331
00:16:28,480 --> 00:16:32,170
going<font color="#E5E5E5"> to run it with a final payload</font>

332
00:16:29,800 --> 00:16:34,000
<font color="#E5E5E5">without crashing which means the first</font>

333
00:16:32,170 --> 00:16:35,500
<font color="#E5E5E5">time</font><font color="#CCCCCC"> pro tect goes through the egg</font><font color="#E5E5E5"> hunt</font>

334
00:16:34,000 --> 00:16:39,160
<font color="#E5E5E5">or goes through and protects everything</font>

335
00:16:35,500 --> 00:16:41,800
<font color="#E5E5E5">in the heap and sure</font><font color="#CCCCCC"> enough now you see</font>

336
00:16:39,160 --> 00:16:44,949
your program counter<font color="#E5E5E5"> has already reached</font>

337
00:16:41,800 --> 00:16:48,160
the breakpoints<font color="#E5E5E5"> in the heap this memory</font>

338
00:16:44,950 --> 00:16:51,370
address<font color="#E5E5E5"> that you see here 11010 this is</font>

339
00:16:48,160 --> 00:16:55,810
the address<font color="#CCCCCC"> after the hack hack the</font>

340
00:16:51,370 --> 00:16:58,540
string is over here<font color="#E5E5E5"> this is the string</font>

341
00:16:55,810 --> 00:17:02,969
at eleven thousand eight<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> 11,000</font>

342
00:16:58,540 --> 00:17:05,369
<font color="#CCCCCC">x10 that's where your program counter is</font>

343
00:17:02,970 --> 00:17:08,920
program counter is<font color="#E5E5E5"> now in the heap and</font>

344
00:17:05,369 --> 00:17:10,929
if<font color="#E5E5E5"> I look at the</font><font color="#CCCCCC"> virtual</font><font color="#E5E5E5"> memory map you</font>

345
00:17:08,920 --> 00:17:14,380
can now see that<font color="#CCCCCC"> not only is a stack and</font>

346
00:17:10,930 --> 00:17:17,950
protected but<font color="#E5E5E5"> the egg</font><font color="#CCCCCC"> hunter went and</font>

347
00:17:14,380 --> 00:17:21,610
<font color="#E5E5E5">applied this all over the process binary</font>

348
00:17:17,950 --> 00:17:23,620
until it<font color="#E5E5E5"> found the payload and now the</font>

349
00:17:21,609 --> 00:17:26,560
depth issue is not a problem<font color="#E5E5E5"> anymore the</font>

350
00:17:23,619 --> 00:17:29,649
shell code itself<font color="#E5E5E5"> is</font><font color="#CCCCCC"> self-contained to</font>

351
00:17:26,560 --> 00:17:32,860
bypass the remainder<font color="#CCCCCC"> non non-executable</font>

352
00:17:29,650 --> 00:17:37,240
memory pages<font color="#E5E5E5"> and jump to a valid memory</font>

353
00:17:32,860 --> 00:17:39,580
page<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that was just a demo with the</font>

354
00:17:37,240 --> 00:17:43,750
breakpoints and<font color="#E5E5E5"> of course no demo is</font>

355
00:17:39,580 --> 00:17:48,360
complete without<font color="#E5E5E5"> the some shells</font>

356
00:17:43,750 --> 00:17:52,410
actually popping<font color="#E5E5E5"> up</font><font color="#CCCCCC"> so let me get this</font>

357
00:17:48,360 --> 00:17:52,409
<font color="#CCCCCC">is this one called egg Vic</font>

358
00:17:53,190 --> 00:18:00,610
and this is real shellcode this this

359
00:17:57,640 --> 00:18:09,570
launches<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> been shell so I'm going</font>

360
00:18:00,610 --> 00:18:09,570
to run a victim the breakpoint<font color="#E5E5E5"> I'm sorry</font>

361
00:18:11,250 --> 00:18:28,179
and smell and<font color="#CCCCCC"> running the final code now</font>

362
00:18:25,539 --> 00:18:32,020
when you do it<font color="#CCCCCC"> boom you're dropped</font><font color="#E5E5E5"> into</font>

363
00:18:28,179 --> 00:18:37,380
a shell code<font color="#E5E5E5"> execute everything</font><font color="#CCCCCC"> is great</font>

364
00:18:32,020 --> 00:18:40,049
and sure enough commands are running and

365
00:18:37,380 --> 00:18:43,419
and then you then you<font color="#E5E5E5"> kind of crash</font>

366
00:18:40,049 --> 00:18:49,900
right so<font color="#E5E5E5"> that was the that was the first</font>

367
00:18:43,419 --> 00:18:52,330
demo I will now go<font color="#CCCCCC"> on to</font><font color="#E5E5E5"> the polyglot</font>

368
00:18:49,900 --> 00:19:05,200
<font color="#CCCCCC">shell code</font><font color="#E5E5E5"> which I'm sure is</font><font color="#CCCCCC"> what you're</font>

369
00:18:52,330 --> 00:19:06,820
<font color="#E5E5E5">really waiting</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> okay right so for the</font>

370
00:19:05,200 --> 00:19:11,440
polyglot shell code<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to set some</font>

371
00:19:06,820 --> 00:19:14,649
context over<font color="#E5E5E5"> here we we go back to the</font>

372
00:19:11,440 --> 00:19:16,960
classic<font color="#CCCCCC"> arm shellcode diagram the first</font>

373
00:19:14,650 --> 00:19:18,549
<font color="#E5E5E5">part in the shell code anatomy is that</font>

374
00:19:16,960 --> 00:19:20,200
you're gonna switch to thumb mode<font color="#E5E5E5"> and</font>

375
00:19:18,549 --> 00:19:21,908
the rest<font color="#E5E5E5"> of the shell code is</font>

376
00:19:20,200 --> 00:19:23,950
implemented in thumb mode<font color="#E5E5E5"> we've seen</font>

377
00:19:21,909 --> 00:19:26,140
this<font color="#E5E5E5"> for reasons that I'm going to</font>

378
00:19:23,950 --> 00:19:28,960
<font color="#E5E5E5">mention again</font><font color="#CCCCCC"> it's compact or it's bad</font>

379
00:19:26,140 --> 00:19:30,610
characters and other things<font color="#E5E5E5"> now whenever</font>

380
00:19:28,960 --> 00:19:32,650
you're talking<font color="#E5E5E5"> about shell code and</font>

381
00:19:30,610 --> 00:19:34,570
you're discussing<font color="#CCCCCC"> this with</font><font color="#E5E5E5"> a bunch of</font>

382
00:19:32,650 --> 00:19:37,809
people in the hallway<font color="#E5E5E5"> track at any</font>

383
00:19:34,570 --> 00:19:39,760
conference<font color="#E5E5E5"> some bright guy is always</font>

384
00:19:37,809 --> 00:19:42,010
going<font color="#E5E5E5"> to come up and say hey I</font><font color="#CCCCCC"> can</font>

385
00:19:39,760 --> 00:19:43,419
signature this this shell code is going

386
00:19:42,010 --> 00:19:45,280
to be signature able I'm<font color="#CCCCCC"> going to write</font>

387
00:19:43,419 --> 00:19:46,780
some<font color="#CCCCCC"> yarra rules</font><font color="#E5E5E5"> and I'm going to do</font>

388
00:19:45,280 --> 00:19:49,090
<font color="#E5E5E5">this</font><font color="#CCCCCC"> IDs thing which was invented</font>

389
00:19:46,780 --> 00:19:50,950
<font color="#E5E5E5">several years ago and catch you in your</font>

390
00:19:49,090 --> 00:19:52,899
act now one of the things that<font color="#E5E5E5"> really</font>

391
00:19:50,950 --> 00:19:55,360
drives me mad is<font color="#CCCCCC"> the word signature I</font>

392
00:19:52,900 --> 00:19:57,730
mean<font color="#E5E5E5"> too long have we done InfoSec by</font>

393
00:19:55,360 --> 00:19:59,799
rules signatures and updates<font color="#CCCCCC"> there's a</font>

394
00:19:57,730 --> 00:20:03,140
very<font color="#E5E5E5"> reactive technology just like</font><font color="#CCCCCC"> the</font>

395
00:19:59,799 --> 00:20:05,150
<font color="#CCCCCC">dinosaurs</font><font color="#E5E5E5"> and they need to die</font>

396
00:20:03,140 --> 00:20:07,580
anyways I will<font color="#E5E5E5"> not ranked about</font>

397
00:20:05,150 --> 00:20:09,410
signatures again but<font color="#E5E5E5"> whenever I'm</font>

398
00:20:07,580 --> 00:20:12,740
confronted<font color="#E5E5E5"> with signatures it only</font>

399
00:20:09,410 --> 00:20:14,780
drives me a little further<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> up</font>

400
00:20:12,740 --> 00:20:17,840
with<font color="#E5E5E5"> something that not only bypasses a</font>

401
00:20:14,780 --> 00:20:19,670
particular signature but entire class of

402
00:20:17,840 --> 00:20:21,500
signatures and<font color="#CCCCCC"> it come up with a</font>

403
00:20:19,670 --> 00:20:24,110
<font color="#E5E5E5">different class of doing things and</font>

404
00:20:21,500 --> 00:20:26,809
that's<font color="#E5E5E5"> what I did</font><font color="#CCCCCC"> and the next thing was</font>

405
00:20:24,110 --> 00:20:28,309
Travis<font color="#CCCCCC"> good speed</font><font color="#E5E5E5"> he he told me he was</font>

406
00:20:26,809 --> 00:20:30,379
<font color="#CCCCCC">actually playing with a good watch at</font>

407
00:20:28,309 --> 00:20:32,149
the time and he<font color="#E5E5E5"> is saying that hey you</font>

408
00:20:30,380 --> 00:20:34,760
know<font color="#CCCCCC"> what your trick will also work on</font>

409
00:20:32,150 --> 00:20:36,410
some processors which are humble only

410
00:20:34,760 --> 00:20:37,730
it's like I didn't know that<font color="#E5E5E5"> there was</font>

411
00:20:36,410 --> 00:20:40,460
something<font color="#E5E5E5"> called just thumb only</font>

412
00:20:37,730 --> 00:20:42,410
processors but yes some cortex m0

413
00:20:40,460 --> 00:20:45,110
processors do not contain<font color="#E5E5E5"> the</font><font color="#CCCCCC"> arm</font>

414
00:20:42,410 --> 00:20:47,630
<font color="#E5E5E5">instruction set they're only from mode</font>

415
00:20:45,110 --> 00:20:49,610
<font color="#E5E5E5">so now if you like</font><font color="#CCCCCC"> you know popularly do</font>

416
00:20:47,630 --> 00:20:51,320
an overflow or a<font color="#CCCCCC"> thump</font><font color="#E5E5E5"> only processor</font>

417
00:20:49,610 --> 00:20:54,649
and your instruction is in harm mode

418
00:20:51,320 --> 00:20:57,168
you're<font color="#E5E5E5"> going to get a</font><font color="#CCCCCC"> sigil</font><font color="#E5E5E5"> and die so</font>

419
00:20:54,650 --> 00:21:00,190
this led<font color="#CCCCCC"> me to come up</font><font color="#E5E5E5"> with the whole</font>

420
00:20:57,169 --> 00:21:04,150
theory<font color="#CCCCCC"> of one shellcode to run them all</font>

421
00:21:00,190 --> 00:21:08,030
the goals of quantum leap shellcode is

422
00:21:04,150 --> 00:21:10,880
something like<font color="#E5E5E5"> this you may start an arm</font>

423
00:21:08,030 --> 00:21:15,139
mode the first<font color="#E5E5E5"> thing you want to do is</font>

424
00:21:10,880 --> 00:21:16,460
<font color="#E5E5E5">very quickly leap to thumb mode and then</font>

425
00:21:15,140 --> 00:21:20,750
the rest<font color="#E5E5E5"> of a shellcode should be in</font>

426
00:21:16,460 --> 00:21:24,400
thumb mode which is usual but if you

427
00:21:20,750 --> 00:21:27,559
started in thumb mode the same

428
00:21:24,400 --> 00:21:30,610
instructions that<font color="#E5E5E5"> cause you to switch to</font>

429
00:21:27,559 --> 00:21:33,290
thermode in thumb mode should do nothing

430
00:21:30,610 --> 00:21:37,418
<font color="#CCCCCC">they should</font><font color="#E5E5E5"> let you just pass through</font>

431
00:21:33,290 --> 00:21:41,178
and stay in thumb this<font color="#E5E5E5"> is the Newton's</font>

432
00:21:37,419 --> 00:21:43,700
first law of arm shell coding code that

433
00:21:41,179 --> 00:21:47,270
starts<font color="#CCCCCC"> in arm remains</font><font color="#E5E5E5"> in arm</font><font color="#CCCCCC"> unless it's</font>

434
00:21:43,700 --> 00:21:48,710
acted upon by an external<font color="#E5E5E5"> switch</font><font color="#CCCCCC"> with</font>

435
00:21:47,270 --> 00:21:52,040
with<font color="#E5E5E5"> great apologies to the famous</font>

436
00:21:48,710 --> 00:21:54,290
<font color="#E5E5E5">scientist but the same switch should</font>

437
00:21:52,040 --> 00:21:57,799
keep you<font color="#CCCCCC"> in thumb if</font><font color="#E5E5E5"> you start in thumb</font>

438
00:21:54,290 --> 00:22:01,129
so this is what this<font color="#CCCCCC"> is what the whole</font>

439
00:21:57,799 --> 00:22:04,520
stunt is about polyglot instructions

440
00:22:01,130 --> 00:22:08,080
that do one thing in arm but do nothing

441
00:22:04,520 --> 00:22:11,059
<font color="#CCCCCC">in thumb and not destroy our code</font><font color="#E5E5E5"> for</font>

442
00:22:08,080 --> 00:22:13,610
<font color="#CCCCCC">now the attack is you know nice and</font>

443
00:22:11,059 --> 00:22:15,470
<font color="#E5E5E5">academic it's worth publishing in pop or</font>

444
00:22:13,610 --> 00:22:16,939
<font color="#CCCCCC">GTFO</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> i'm sure there will be some</font>

445
00:22:15,470 --> 00:22:19,210
<font color="#E5E5E5">practical applications</font>

446
00:22:16,940 --> 00:22:22,460
<font color="#E5E5E5">to this stunt coming out in the future</font>

447
00:22:19,210 --> 00:22:23,870
<font color="#E5E5E5">so what do we need to build quantum leap</font>

448
00:22:22,460 --> 00:22:27,740
<font color="#E5E5E5">shellcode</font><font color="#CCCCCC"> and this is what</font><font color="#E5E5E5"> I'm going to</font>

449
00:22:23,870 --> 00:22:29,689
explain<font color="#CCCCCC"> you just a</font><font color="#E5E5E5"> little bit as far</font><font color="#CCCCCC"> as</font>

450
00:22:27,740 --> 00:22:32,120
<font color="#E5E5E5">I mean I'm gonna try and keep it as</font>

451
00:22:29,690 --> 00:22:34,910
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> without going too much details</font>

452
00:22:32,120 --> 00:22:39,669
into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> depth</font><font color="#E5E5E5"> of arm and</font><font color="#CCCCCC"> thumb</font>

453
00:22:34,910 --> 00:22:43,760
instruction<font color="#CCCCCC"> encoding if we can create</font>

454
00:22:39,670 --> 00:22:47,390
<font color="#CCCCCC">well-designed</font><font color="#E5E5E5"> or rather well encoded arm</font>

455
00:22:43,760 --> 00:22:51,410
instructions you'll get a<font color="#E5E5E5"> four byte</font>

456
00:22:47,390 --> 00:22:54,410
sequence in arm which does<font color="#E5E5E5"> something but</font>

457
00:22:51,410 --> 00:22:57,530
<font color="#E5E5E5">the same sequence when you break up the</font>

458
00:22:54,410 --> 00:23:00,280
<font color="#E5E5E5">four bytes into two two byte thumbs the</font>

459
00:22:57,530 --> 00:23:04,970
thumb instructions simply pass through

460
00:23:00,280 --> 00:23:09,340
non-destructively to pull this off<font color="#E5E5E5"> we</font>

461
00:23:04,970 --> 00:23:12,080
have to<font color="#CCCCCC"> leverage a few cool features</font>

462
00:23:09,340 --> 00:23:17,449
that the arm<font color="#E5E5E5"> instruction set provides us</font>

463
00:23:12,080 --> 00:23:19,610
and you<font color="#E5E5E5"> know this is there's no formal</font>

464
00:23:17,450 --> 00:23:21,320
theory of doing this all about polyglots

465
00:23:19,610 --> 00:23:23,330
<font color="#CCCCCC">polygraphs are all about lateral</font>

466
00:23:21,320 --> 00:23:25,340
<font color="#E5E5E5">thinking so one of the things that</font>

467
00:23:23,330 --> 00:23:27,919
struck me very<font color="#E5E5E5"> interesting studying arm</font>

468
00:23:25,340 --> 00:23:29,830
instructions<font color="#E5E5E5"> was that all arm</font>

469
00:23:27,920 --> 00:23:32,780
instructions can<font color="#CCCCCC"> be made conditional</font>

470
00:23:29,830 --> 00:23:34,659
<font color="#E5E5E5">they're predicated instructions any</font>

471
00:23:32,780 --> 00:23:36,980
instruction can<font color="#CCCCCC"> be applied with</font>

472
00:23:34,660 --> 00:23:38,840
<font color="#E5E5E5">conditional checking that the</font>

473
00:23:36,980 --> 00:23:41,990
instruction triggers only<font color="#E5E5E5"> if a condition</font>

474
00:23:38,840 --> 00:23:44,209
is<font color="#E5E5E5"> met</font><font color="#CCCCCC"> or not</font><font color="#E5E5E5"> so this becomes very</font>

475
00:23:41,990 --> 00:23:46,270
helpful<font color="#E5E5E5"> and then of course</font><font color="#CCCCCC"> you need some</font>

476
00:23:44,210 --> 00:23:49,370
luck<font color="#E5E5E5"> and perseverance and in iterations</font>

477
00:23:46,270 --> 00:23:51,980
<font color="#E5E5E5">the name quantum leap shellcode was</font>

478
00:23:49,370 --> 00:23:54,590
credited<font color="#CCCCCC"> to one of my friends</font><font color="#E5E5E5"> named</font>

479
00:23:51,980 --> 00:23:57,290
<font color="#CCCCCC">dial-up</font><font color="#E5E5E5"> this was</font><font color="#CCCCCC"> invented coined</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> 44</font>

480
00:23:54,590 --> 00:23:59,780
<font color="#CCCCCC">con a couple of months ago</font><font color="#E5E5E5"> so now let's</font>

481
00:23:57,290 --> 00:24:02,649
see what<font color="#E5E5E5"> happens if you transform arm</font>

482
00:23:59,780 --> 00:24:05,180
instructions to thumb<font color="#E5E5E5"> rather forcibly</font>

483
00:24:02,650 --> 00:24:06,680
<font color="#E5E5E5">here we begin with the same arm to thumb</font>

484
00:24:05,180 --> 00:24:09,470
<font color="#E5E5E5">switch this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> part that we're</font>

485
00:24:06,680 --> 00:24:11,540
trying<font color="#E5E5E5"> to modify so this stuff is the</font>

486
00:24:09,470 --> 00:24:15,530
<font color="#E5E5E5">arm code the green stuff is just</font>

487
00:24:11,540 --> 00:24:19,399
placeholder thumb code if we force the

488
00:24:15,530 --> 00:24:21,230
arm disassembly<font color="#E5E5E5"> into thumb view the</font>

489
00:24:19,400 --> 00:24:25,780
instructions that<font color="#E5E5E5"> you get for these</font>

490
00:24:21,230 --> 00:24:29,720
<font color="#E5E5E5">eight bytes will be something</font><font color="#CCCCCC"> like this</font>

491
00:24:25,780 --> 00:24:32,480
the first<font color="#E5E5E5"> thumb instruction</font><font color="#CCCCCC"> is</font>

492
00:24:29,720 --> 00:24:34,670
S stands for<font color="#E5E5E5"> arithmetic shift right with</font>

493
00:24:32,480 --> 00:24:36,590
status update<font color="#CCCCCC"> so your shifting right</font><font color="#E5E5E5"> one</font>

494
00:24:34,670 --> 00:24:38,720
register with so many bytes whatever it

495
00:24:36,590 --> 00:24:41,240
is fine<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is non-destructive</font><font color="#CCCCCC"> that's</font>

496
00:24:38,720 --> 00:24:43,400
cool<font color="#E5E5E5"> but the second instructions that</font>

497
00:24:41,240 --> 00:24:46,730
<font color="#E5E5E5">you get this</font><font color="#CCCCCC"> is a branch instruction</font>

498
00:24:43,400 --> 00:24:48,350
<font color="#CCCCCC">this branch is to an offset</font><font color="#E5E5E5"> now branch</font>

499
00:24:46,730 --> 00:24:50,000
instructions are destructive they take

500
00:24:48,350 --> 00:24:50,360
away control<font color="#E5E5E5"> from our shellcode and kill</font>

501
00:24:50,000 --> 00:24:53,780
us

502
00:24:50,360 --> 00:24:55,969
<font color="#E5E5E5">and the next instruction the BX</font>

503
00:24:53,780 --> 00:24:58,810
instruction if you split it into<font color="#E5E5E5"> an arm</font>

504
00:24:55,970 --> 00:25:02,720
<font color="#E5E5E5">thumb instruction this becomes like a</font>

505
00:24:58,810 --> 00:25:04,520
highly complicated<font color="#E5E5E5"> vector floating point</font>

506
00:25:02,720 --> 00:25:06,440
thumb<font color="#CCCCCC"> to instruction which I don't</font><font color="#E5E5E5"> know</font>

507
00:25:04,520 --> 00:25:08,270
what the bloody hell it does<font color="#E5E5E5"> and I</font>

508
00:25:06,440 --> 00:25:09,620
definitely<font color="#CCCCCC"> don't want it</font><font color="#E5E5E5"> as a part of my</font>

509
00:25:08,270 --> 00:25:11,690
<font color="#CCCCCC">shellcode because it's gonna kill</font><font color="#E5E5E5"> me</font>

510
00:25:09,620 --> 00:25:13,159
<font color="#CCCCCC">looks too large and large things kill</font>

511
00:25:11,690 --> 00:25:16,520
you

512
00:25:13,160 --> 00:25:18,740
so the whole art<font color="#E5E5E5"> of polyglot in this</font>

513
00:25:16,520 --> 00:25:20,750
relies upon you wanting to<font color="#E5E5E5"> avoid</font>

514
00:25:18,740 --> 00:25:23,030
destructive instructions so no branches

515
00:25:20,750 --> 00:25:24,920
<font color="#CCCCCC">no load store cause you</font><font color="#E5E5E5"> might be loading</font>

516
00:25:23,030 --> 00:25:26,990
from memory address that doesn't exist

517
00:25:24,920 --> 00:25:29,390
<font color="#CCCCCC">right into memory that's not writable no</font>

518
00:25:26,990 --> 00:25:30,710
<font color="#CCCCCC">floating-point</font><font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> the other</font>

519
00:25:29,390 --> 00:25:32,960
<font color="#E5E5E5">rule is that they should work</font><font color="#CCCCCC"> on a</font>

520
00:25:30,710 --> 00:25:35,750
<font color="#CCCCCC">Raspberry Pi one or some</font><font color="#E5E5E5"> dumb by IP</font>

521
00:25:32,960 --> 00:25:37,760
camera which is<font color="#CCCCCC"> arm v6 core</font><font color="#E5E5E5"> so we do not</font>

522
00:25:35,750 --> 00:25:40,040
want<font color="#E5E5E5"> from two instructions as well the</font>

523
00:25:37,760 --> 00:25:42,200
lowest<font color="#E5E5E5"> possible denominator and of</font>

524
00:25:40,040 --> 00:25:45,200
course we don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to see Gil no no</font>

525
00:25:42,200 --> 00:25:46,850
illegal instructions so with this you

526
00:25:45,200 --> 00:25:48,980
got<font color="#CCCCCC"> to play around with Harmon from</font>

527
00:25:46,850 --> 00:25:52,790
decoding<font color="#E5E5E5"> which is what I'm going to show</font>

528
00:25:48,980 --> 00:25:55,400
<font color="#E5E5E5">you a quick primer on arm and some</font>

529
00:25:52,790 --> 00:25:58,100
decoding so we take the four byte arm

530
00:25:55,400 --> 00:26:00,530
instruction we take add r1 comma PC

531
00:25:58,100 --> 00:26:02,270
comma<font color="#CCCCCC"> one</font><font color="#E5E5E5"> which basically adds one</font><font color="#CCCCCC"> to</font>

532
00:26:00,530 --> 00:26:05,450
your program counter this is<font color="#CCCCCC"> responsible</font>

533
00:26:02,270 --> 00:26:07,910
for<font color="#E5E5E5"> the thumb switch part of it if you</font>

534
00:26:05,450 --> 00:26:11,450
want<font color="#E5E5E5"> to decode it into individual big</font>

535
00:26:07,910 --> 00:26:16,550
patterns the decoding bits look like

536
00:26:11,450 --> 00:26:19,670
this you have and<font color="#CCCCCC"> have</font><font color="#E5E5E5"> colored these</font>

537
00:26:16,550 --> 00:26:22,580
regions each each color has<font color="#CCCCCC"> a specific</font>

538
00:26:19,670 --> 00:26:25,640
meaning<font color="#CCCCCC"> so yeah</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> four bits are</font>

539
00:26:22,580 --> 00:26:28,100
the conditional bits then you have the

540
00:26:25,640 --> 00:26:29,750
immediate flag you have the opcode that

541
00:26:28,100 --> 00:26:33,379
is in red you have<font color="#E5E5E5"> the status bit in</font>

542
00:26:29,750 --> 00:26:36,050
purple and the last the<font color="#E5E5E5"> the least</font>

543
00:26:33,380 --> 00:26:42,020
significant<font color="#E5E5E5"> four bits of the most</font>

544
00:26:36,050 --> 00:26:43,230
significant<font color="#CCCCCC"> 16 bits confusing yes is the</font>

545
00:26:42,020 --> 00:26:45,120
first operand then

546
00:26:43,230 --> 00:26:46,620
have the<font color="#CCCCCC"> destination</font><font color="#E5E5E5"> and then you have</font>

547
00:26:45,120 --> 00:26:49,379
the second operand<font color="#E5E5E5"> this is this is how</font>

548
00:26:46,620 --> 00:26:50,850
the instruction is encoding<font color="#E5E5E5"> now we're</font>

549
00:26:49,380 --> 00:26:52,320
going<font color="#E5E5E5"> to split it into two thumb</font>

550
00:26:50,850 --> 00:26:55,740
instructions so the<font color="#E5E5E5"> the least</font>

551
00:26:52,320 --> 00:26:58,020
<font color="#E5E5E5">significant half word comes first this</font>

552
00:26:55,740 --> 00:26:59,040
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the first thumb instruction and this</font>

553
00:26:58,020 --> 00:27:01,129
is going<font color="#CCCCCC"> to be the</font><font color="#E5E5E5"> second thumb</font>

554
00:26:59,040 --> 00:27:06,299
instruction<font color="#E5E5E5"> in succession</font>

555
00:27:01,130 --> 00:27:09,630
now the second thumb instruction<font color="#CCCCCC"> this</font>

556
00:27:06,299 --> 00:27:13,530
one is controlled<font color="#E5E5E5"> the opcode of this</font>

557
00:27:09,630 --> 00:27:16,950
instruction is controlled by largely the

558
00:27:13,530 --> 00:27:21,899
conditional flags<font color="#E5E5E5"> and partially</font>

559
00:27:16,950 --> 00:27:25,190
influenced by this operand<font color="#E5E5E5"> one this is</font>

560
00:27:21,900 --> 00:27:28,620
<font color="#E5E5E5">very tricky to control sometimes the the</font>

561
00:27:25,190 --> 00:27:31,470
the thumb instruction<font color="#E5E5E5"> one this opcode is</font>

562
00:27:28,620 --> 00:27:33,059
controlled by the operands<font color="#E5E5E5"> and you can</font>

563
00:27:31,470 --> 00:27:34,620
change<font color="#CCCCCC"> the operands at will so you can</font>

564
00:27:33,059 --> 00:27:37,860
influence this awkward rather easily

565
00:27:34,620 --> 00:27:41,549
<font color="#CCCCCC">this is</font><font color="#E5E5E5"> easier to control but now how do</font>

566
00:27:37,860 --> 00:27:46,110
<font color="#E5E5E5">we turn</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> into two thumb instructions</font>

567
00:27:41,549 --> 00:27:48,179
<font color="#E5E5E5">let's see so the first one translates</font>

568
00:27:46,110 --> 00:27:50,309
into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> arithmetic shift</font><font color="#E5E5E5"> right that I</font>

569
00:27:48,179 --> 00:27:52,169
showed<font color="#CCCCCC"> you this is innocent</font>

570
00:27:50,309 --> 00:27:55,799
this is<font color="#E5E5E5"> non destructive this</font><font color="#CCCCCC"> is going to</font>

571
00:27:52,169 --> 00:27:59,760
be<font color="#E5E5E5"> okay the opcode for</font><font color="#CCCCCC"> a SRS</font><font color="#E5E5E5"> is</font>

572
00:27:55,799 --> 00:28:02,100
basically influenced<font color="#E5E5E5"> by the destination</font>

573
00:27:59,760 --> 00:28:03,570
bits<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you see so essentially the</font>

574
00:28:02,100 --> 00:28:07,290
destination bits tell you that<font color="#E5E5E5"> this is</font>

575
00:28:03,570 --> 00:28:09,750
our 1 0 0 0<font color="#CCCCCC"> 1 is registered</font><font color="#E5E5E5"> 1 and that</font>

576
00:28:07,290 --> 00:28:12,240
is responsible for the choice of<font color="#E5E5E5"> the</font>

577
00:28:09,750 --> 00:28:16,140
opcode<font color="#E5E5E5"> ASRs that you see in the thumb</font>

578
00:28:12,240 --> 00:28:20,970
mode so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> survive this the</font>

579
00:28:16,140 --> 00:28:24,419
next<font color="#E5E5E5"> one becomes the</font><font color="#CCCCCC"> branch instruction</font>

580
00:28:20,970 --> 00:28:27,240
<font color="#E5E5E5">and these bits the opcode for the branch</font>

581
00:28:24,419 --> 00:28:31,080
instruction<font color="#CCCCCC"> is controlled by the</font>

582
00:28:27,240 --> 00:28:34,590
conditionals<font color="#E5E5E5"> and this is disaster so we</font>

583
00:28:31,080 --> 00:28:37,830
what we want to now do is<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want to</font>

584
00:28:34,590 --> 00:28:40,770
avoid this destructive branch<font color="#CCCCCC"> if we want</font>

585
00:28:37,830 --> 00:28:43,559
to<font color="#E5E5E5"> change this branch opcode we now need</font>

586
00:28:40,770 --> 00:28:47,040
to<font color="#E5E5E5"> go back and modify the conditionals</font>

587
00:28:43,559 --> 00:28:48,960
<font color="#E5E5E5">in the original arm instruction but now</font>

588
00:28:47,040 --> 00:28:50,730
we kind<font color="#E5E5E5"> of have</font><font color="#CCCCCC"> a problem if we go back</font>

589
00:28:48,960 --> 00:28:53,070
and<font color="#E5E5E5"> add conditional execution to the arm</font>

590
00:28:50,730 --> 00:28:55,500
<font color="#CCCCCC">instruction we are not guaranteed its</font>

591
00:28:53,070 --> 00:28:57,040
execution<font color="#E5E5E5"> so how do you turn a</font>

592
00:28:55,500 --> 00:28:59,530
conditional execution

593
00:28:57,040 --> 00:29:00,870
into unconditional execution which is

594
00:28:59,530 --> 00:29:03,970
guaranteed<font color="#CCCCCC"> to exist</font>

595
00:29:00,870 --> 00:29:07,239
execute always but still retain

596
00:29:03,970 --> 00:29:10,210
conditional ability well<font color="#E5E5E5"> you choose</font>

597
00:29:07,240 --> 00:29:12,880
<font color="#CCCCCC">complimentary conditions so you</font><font color="#E5E5E5"> turn a</font>

598
00:29:10,210 --> 00:29:15,490
regular<font color="#E5E5E5"> instruction into a set of</font><font color="#CCCCCC"> two</font>

599
00:29:12,880 --> 00:29:18,510
instructions<font color="#E5E5E5"> each with</font><font color="#CCCCCC"> complimentary</font>

600
00:29:15,490 --> 00:29:20,620
conditions so<font color="#CCCCCC"> ad now becomes a difficult</font>

601
00:29:18,510 --> 00:29:22,930
<font color="#E5E5E5">immediately followed by add if not</font>

602
00:29:20,620 --> 00:29:24,850
equals<font color="#E5E5E5"> one of them is going to execute</font>

603
00:29:22,930 --> 00:29:27,970
<font color="#E5E5E5">no matter what the conditions are</font><font color="#CCCCCC"> and</font>

604
00:29:24,850 --> 00:29:31,990
you<font color="#E5E5E5"> therefore introduce the conditional</font>

605
00:29:27,970 --> 00:29:35,290
flag<font color="#CCCCCC"> but still kept the execution</font><font color="#E5E5E5"> intact</font>

606
00:29:31,990 --> 00:29:39,430
<font color="#CCCCCC">and now with this conditional flag being</font>

607
00:29:35,290 --> 00:29:42,730
added in what you now see is now<font color="#CCCCCC"> ad</font>

608
00:29:39,430 --> 00:29:44,820
becomes add any and add EQ the most

609
00:29:42,730 --> 00:29:49,360
significant<font color="#E5E5E5"> four bits will change</font>

610
00:29:44,820 --> 00:29:52,090
<font color="#E5E5E5">allowing you to control the operand of</font>

611
00:29:49,360 --> 00:29:54,850
the second thumb<font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> or rather</font>

612
00:29:52,090 --> 00:29:59,290
the<font color="#E5E5E5"> yeah so now let's see what happens</font>

613
00:29:54,850 --> 00:30:04,780
if<font color="#E5E5E5"> we do this add any and add EQ how do</font>

614
00:29:59,290 --> 00:30:06,550
the splits<font color="#E5E5E5"> to thumb look like so these</font>

615
00:30:04,780 --> 00:30:09,580
are the two<font color="#CCCCCC"> complementary arm conditions</font>

616
00:30:06,550 --> 00:30:11,530
<font color="#E5E5E5">arm instructions we split the first one</font>

617
00:30:09,580 --> 00:30:15,120
this is<font color="#E5E5E5"> arithmetic</font><font color="#CCCCCC"> shift</font><font color="#E5E5E5"> right which is</font>

618
00:30:11,530 --> 00:30:18,070
<font color="#E5E5E5">great no problem the second instruction</font>

619
00:30:15,120 --> 00:30:21,250
now becomes another arithmetic<font color="#CCCCCC"> shift</font>

620
00:30:18,070 --> 00:30:24,700
right because<font color="#E5E5E5"> they add if add if not</font>

621
00:30:21,250 --> 00:30:27,610
equals this<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> zero</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> one got</font>

622
00:30:24,700 --> 00:30:30,070
copied into the opcode<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the second</font>

623
00:30:27,610 --> 00:30:32,740
<font color="#E5E5E5">thumb instruction which we now influence</font>

624
00:30:30,070 --> 00:30:35,590
<font color="#E5E5E5">and control very</font><font color="#CCCCCC"> well so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> two non</font>

625
00:30:32,740 --> 00:30:39,480
destructive instructions<font color="#E5E5E5"> and the second</font>

626
00:30:35,590 --> 00:30:43,449
one<font color="#E5E5E5"> similarly is another shift right and</font>

627
00:30:39,480 --> 00:30:45,190
this is logical<font color="#E5E5E5"> shift left</font><font color="#CCCCCC"> so these two</font>

628
00:30:43,450 --> 00:30:46,930
instructions<font color="#E5E5E5"> became some big shift</font>

629
00:30:45,190 --> 00:30:49,690
instructions which are not going to

630
00:30:46,930 --> 00:30:53,020
bother us<font color="#CCCCCC"> so as a result</font><font color="#E5E5E5"> we have no</font>

631
00:30:49,690 --> 00:30:57,640
destructive instructions<font color="#E5E5E5"> in some mode at</font>

632
00:30:53,020 --> 00:31:00,490
all this in our mode<font color="#E5E5E5"> will add one to the</font>

633
00:30:57,640 --> 00:31:01,990
program counter in register one in<font color="#E5E5E5"> thumb</font>

634
00:31:00,490 --> 00:31:03,730
mode it<font color="#CCCCCC"> is going to do some weird</font><font color="#E5E5E5"> big</font>

635
00:31:01,990 --> 00:31:06,940
shifting which it doesn't matter just

636
00:31:03,730 --> 00:31:09,310
<font color="#E5E5E5">gonna pass us through so these two</font>

637
00:31:06,940 --> 00:31:10,509
tricks that I showed<font color="#CCCCCC"> you first splitting</font>

638
00:31:09,310 --> 00:31:13,690
the arm into<font color="#E5E5E5"> two thumbs</font>

639
00:31:10,509 --> 00:31:16,149
second finding out the regions<font color="#E5E5E5"> in the</font>

640
00:31:13,690 --> 00:31:19,899
encoding<font color="#E5E5E5"> which</font><font color="#CCCCCC"> influenced both</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> op</font>

641
00:31:16,149 --> 00:31:21,879
<font color="#CCCCCC">codes and third is</font><font color="#E5E5E5"> to turn the regular</font>

642
00:31:19,899 --> 00:31:24,428
<font color="#CCCCCC">instruction into a conditional</font>

643
00:31:21,879 --> 00:31:26,168
unconditional instructions<font color="#CCCCCC"> a pair of</font>

644
00:31:24,429 --> 00:31:29,139
conditional<font color="#E5E5E5"> and conditional instructions</font>

645
00:31:26,169 --> 00:31:31,169
<font color="#E5E5E5">this lets you control the values of the</font>

646
00:31:29,139 --> 00:31:33,939
resulting from and this<font color="#E5E5E5"> is the basis of</font>

647
00:31:31,169 --> 00:31:38,409
polyglot<font color="#CCCCCC"> Eng some instructions with</font><font color="#E5E5E5"> arm</font>

648
00:31:33,940 --> 00:31:40,119
instructions<font color="#E5E5E5"> and now your code what we</font>

649
00:31:38,409 --> 00:31:42,009
really wanted to do is if you<font color="#E5E5E5"> start an</font>

650
00:31:40,119 --> 00:31:43,509
arm<font color="#E5E5E5"> you want to switch to thumb if you</font>

651
00:31:42,009 --> 00:31:46,749
start in thumb you want<font color="#E5E5E5"> to stay in thumb</font>

652
00:31:43,509 --> 00:31:50,399
<font color="#E5E5E5">so the final optimized quantum leap code</font>

653
00:31:46,749 --> 00:31:54,039
hastily<font color="#E5E5E5"> optimized I say is like this</font>

654
00:31:50,399 --> 00:31:56,948
every every<font color="#E5E5E5"> arm instruction appears in</font>

655
00:31:54,039 --> 00:31:59,408
two pairs so first you add some value to

656
00:31:56,949 --> 00:32:01,119
<font color="#E5E5E5">a program counter</font><font color="#CCCCCC"> you cannot do a branch</font>

657
00:31:59,409 --> 00:32:03,639
to a register<font color="#CCCCCC"> because the branch causes</font>

658
00:32:01,119 --> 00:32:05,948
destructive some instructions<font color="#E5E5E5"> instead of</font>

659
00:32:03,639 --> 00:32:08,529
doing the branch<font color="#E5E5E5"> I push a register</font><font color="#CCCCCC"> onto</font>

660
00:32:05,949 --> 00:32:10,899
the stack and<font color="#CCCCCC"> pop it back into the</font>

661
00:32:08,529 --> 00:32:12,489
program<font color="#CCCCCC"> counter</font><font color="#E5E5E5"> because I do push and</font>

662
00:32:10,899 --> 00:32:13,658
pop I also have to save the stack

663
00:32:12,489 --> 00:32:16,029
pointer because I don't want to screw

664
00:32:13,659 --> 00:32:19,179
<font color="#CCCCCC">that up</font><font color="#E5E5E5"> but by the time you do all this</font>

665
00:32:16,029 --> 00:32:21,069
stuff<font color="#E5E5E5"> you will land into thumb mode if</font>

666
00:32:19,179 --> 00:32:23,319
you<font color="#CCCCCC"> look at this stuff it is</font><font color="#E5E5E5"> the same</font>

667
00:32:21,069 --> 00:32:25,418
instructions but but forced into thumb

668
00:32:23,319 --> 00:32:31,989
mode<font color="#CCCCCC"> this will do some bit shifting and</font>

669
00:32:25,419 --> 00:32:33,579
not hurt you<font color="#E5E5E5"> okay so I know this there's</font>

670
00:32:31,989 --> 00:32:36,579
<font color="#CCCCCC">8 minutes left I'm going to</font><font color="#E5E5E5"> get to the</font>

671
00:32:33,579 --> 00:32:47,249
demo first<font color="#E5E5E5"> once we do the demo then we</font>

672
00:32:36,579 --> 00:32:50,399
will do questions and<font color="#E5E5E5"> answers</font><font color="#CCCCCC"> ok a</font>

673
00:32:47,249 --> 00:32:50,399
little bit

674
00:32:57,149 --> 00:33:10,090
so now let's see how we go about

675
00:33:00,749 --> 00:33:13,659
arriving at this<font color="#CCCCCC"> I'll show the</font><font color="#E5E5E5"> first</font>

676
00:33:10,090 --> 00:33:15,459
<font color="#CCCCCC">snippet of code this is called universal</font>

677
00:33:13,659 --> 00:33:22,299
mode<font color="#CCCCCC"> zero I called it universal mode</font>

678
00:33:15,460 --> 00:33:24,489
<font color="#E5E5E5">until I came up with quantum leap so</font>

679
00:33:22,299 --> 00:33:26,379
here's your simple code which is switch

680
00:33:24,489 --> 00:33:34,749
<font color="#E5E5E5">to thumb and then you're in thumb and</font>

681
00:33:26,379 --> 00:33:37,590
then let me disassemble this I'm going

682
00:33:34,749 --> 00:33:41,230
to disassemble this<font color="#E5E5E5"> in</font><font color="#CCCCCC"> arm mode</font><font color="#E5E5E5"> at first</font>

683
00:33:37,590 --> 00:33:42,970
so this is the arm disassembly<font color="#CCCCCC"> to</font>

684
00:33:41,230 --> 00:33:45,940
instructions in our the rest in thumb

685
00:33:42,970 --> 00:33:52,269
and now I'm going to force<font color="#E5E5E5"> thumb</font>

686
00:33:45,940 --> 00:33:54,700
disassembly if you force thumb

687
00:33:52,269 --> 00:33:58,840
disassembly<font color="#E5E5E5"> these two highlighted</font>

688
00:33:54,700 --> 00:34:01,299
instructions become these ugly

689
00:33:58,840 --> 00:34:03,549
instructions that<font color="#E5E5E5"> I first showed you so</font>

690
00:34:01,299 --> 00:34:05,739
this<font color="#CCCCCC"> is no good</font><font color="#E5E5E5"> this branch is going</font><font color="#CCCCCC"> to</font>

691
00:34:03,549 --> 00:34:07,379
kill us<font color="#E5E5E5"> and this vector floating point</font>

692
00:34:05,739 --> 00:34:11,579
is<font color="#E5E5E5"> also going to kill us</font>

693
00:34:07,379 --> 00:34:15,759
<font color="#E5E5E5">so iterating this i came to some</font>

694
00:34:11,579 --> 00:34:21,940
<font color="#E5E5E5">different approaches where let me</font>

695
00:34:15,760 --> 00:34:26,500
actually go straight<font color="#CCCCCC"> go straight</font><font color="#E5E5E5"> to yeah</font>

696
00:34:21,940 --> 00:34:27,909
let<font color="#E5E5E5"> me go to universal mode too so I did</font>

697
00:34:26,500 --> 00:34:35,379
some work with<font color="#CCCCCC"> complimentary</font>

698
00:34:27,909 --> 00:34:37,000
instructions so this was my<font color="#CCCCCC"> primitive</font>

699
00:34:35,379 --> 00:34:40,058
approach<font color="#E5E5E5"> so okay instead of doing the</font>

700
00:34:37,000 --> 00:34:42,730
<font color="#E5E5E5">add and branch</font><font color="#CCCCCC"> I did the add</font><font color="#E5E5E5"> two times</font>

701
00:34:40,059 --> 00:34:44,710
<font color="#E5E5E5">so this is with carry set and this</font><font color="#CCCCCC"> is</font>

702
00:34:42,730 --> 00:34:46,449
with carry clear<font color="#CCCCCC"> I was playing around</font>

703
00:34:44,710 --> 00:34:48,339
<font color="#E5E5E5">with the register</font><font color="#CCCCCC"> so that I</font><font color="#E5E5E5"> don't get</font>

704
00:34:46,449 --> 00:34:53,529
null<font color="#CCCCCC"> bytes or</font><font color="#E5E5E5"> any weird bikes in there</font>

705
00:34:48,339 --> 00:34:56,918
<font color="#E5E5E5">so by the</font><font color="#CCCCCC"> end of this I get</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> four</font>

706
00:34:53,530 --> 00:34:59,170
pointing to the thumb code with an

707
00:34:56,918 --> 00:35:01,328
<font color="#E5E5E5">odd-numbered bit so it will switch to</font>

708
00:34:59,170 --> 00:35:03,940
thumb and then instead of the branch<font color="#CCCCCC"> I</font>

709
00:35:01,329 --> 00:35:06,579
use a move command to move the register

710
00:35:03,940 --> 00:35:08,720
into the program counter<font color="#CCCCCC"> the problem</font>

711
00:35:06,579 --> 00:35:11,080
with this is<font color="#E5E5E5"> this generates this</font>

712
00:35:08,720 --> 00:35:15,129
but it generates<font color="#E5E5E5"> thumb-2 instructions</font>

713
00:35:11,080 --> 00:35:18,170
I'll show you this stuff<font color="#CCCCCC"> if I do</font>

714
00:35:15,130 --> 00:35:21,020
<font color="#E5E5E5">universal mode - that's</font><font color="#CCCCCC"> ok but if I</font>

715
00:35:18,170 --> 00:35:24,650
force it into thumb mode<font color="#E5E5E5"> this generates</font>

716
00:35:21,020 --> 00:35:26,990
<font color="#CCCCCC">two thumb</font><font color="#E5E5E5"> two instructions these will</font>

717
00:35:24,650 --> 00:35:29,599
not<font color="#CCCCCC"> work on an aren't v6 core these</font><font color="#E5E5E5"> will</font>

718
00:35:26,990 --> 00:35:30,830
only<font color="#E5E5E5"> work on an arm v7 course oh well</font>

719
00:35:29,599 --> 00:35:32,810
this<font color="#E5E5E5"> is acceptable</font>

720
00:35:30,830 --> 00:35:34,450
I want still<font color="#E5E5E5"> the lowest common</font>

721
00:35:32,810 --> 00:35:37,099
denominator<font color="#CCCCCC"> because</font><font color="#E5E5E5"> like I said</font>

722
00:35:34,450 --> 00:35:38,930
shellcode is<font color="#E5E5E5"> all about style</font><font color="#CCCCCC"> right so</font>

723
00:35:37,099 --> 00:35:42,320
you can't be violating style principles

724
00:35:38,930 --> 00:35:46,390
here<font color="#E5E5E5"> so you want</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> so that led</font>

725
00:35:42,320 --> 00:35:50,630
me<font color="#E5E5E5"> to the third iteration which is now</font>

726
00:35:46,390 --> 00:35:54,770
<font color="#E5E5E5">quantum leap for this is the final shell</font>

727
00:35:50,630 --> 00:35:57,440
code which will<font color="#E5E5E5"> switch to thumb if you</font>

728
00:35:54,770 --> 00:35:59,090
start<font color="#E5E5E5"> an arm mode you have the add you</font>

729
00:35:57,440 --> 00:36:04,119
<font color="#CCCCCC">have the move</font><font color="#E5E5E5"> you save the stack pointer</font>

730
00:35:59,090 --> 00:36:06,890
into<font color="#CCCCCC"> our four then you</font><font color="#E5E5E5"> push our</font><font color="#CCCCCC"> four</font>

731
00:36:04,119 --> 00:36:10,730
<font color="#CCCCCC">sorry we we add the program counter to</font>

732
00:36:06,890 --> 00:36:13,368
<font color="#E5E5E5">our</font><font color="#CCCCCC"> 10 we push it into</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> 10 and pop it</font>

733
00:36:10,730 --> 00:36:14,990
into PC we push the stack pointer as our

734
00:36:13,369 --> 00:36:17,359
four<font color="#E5E5E5"> and pop it back into the stack</font>

735
00:36:14,990 --> 00:36:19,459
pointer<font color="#CCCCCC"> now all the thump instructions</font>

736
00:36:17,359 --> 00:36:21,848
<font color="#CCCCCC">end up being innocent</font><font color="#E5E5E5"> pass-through</font>

737
00:36:19,460 --> 00:36:25,670
instructions this<font color="#CCCCCC"> are to arrive at this</font>

738
00:36:21,849 --> 00:36:27,770
simply requires<font color="#CCCCCC"> a</font><font color="#E5E5E5"> long loop of trial and</font>

739
00:36:25,670 --> 00:36:29,900
<font color="#E5E5E5">error you you tweak a few</font><font color="#CCCCCC"> bits until</font><font color="#E5E5E5"> you</font>

740
00:36:27,770 --> 00:36:32,540
get instructions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> work on both sides</font>

741
00:36:29,900 --> 00:36:35,240
and<font color="#CCCCCC"> so then</font><font color="#E5E5E5"> I have the</font><font color="#CCCCCC"> shellcode at the</font>

742
00:36:32,540 --> 00:36:37,730
<font color="#CCCCCC">end</font><font color="#E5E5E5"> to test for it I'm going to do two</font>

743
00:36:35,240 --> 00:36:39,319
tests one is I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to start an hour</font>

744
00:36:37,730 --> 00:36:41,480
mode switch to thumb and get<font color="#E5E5E5"> the shell</font>

745
00:36:39,320 --> 00:36:43,970
and then second is I'm going<font color="#E5E5E5"> to flip</font><font color="#CCCCCC"> to</font>

746
00:36:41,480 --> 00:36:45,740
thumb mode stay in thumb mode through

747
00:36:43,970 --> 00:36:55,520
the polyglot<font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> and then still</font>

748
00:36:45,740 --> 00:36:55,859
get the<font color="#CCCCCC"> shell so let's do this so</font><font color="#E5E5E5"> this</font>

749
00:36:55,520 --> 00:36:59,869
<font color="#CCCCCC">is</font>

750
00:36:55,859 --> 00:37:03,019
first test the test<font color="#CCCCCC"> and</font><font color="#E5E5E5"> arm is simple</font>

751
00:36:59,869 --> 00:37:06,029
<font color="#CCCCCC">you start an arm mode</font><font color="#E5E5E5"> this is code 32</font>

752
00:37:03,019 --> 00:37:08,160
<font color="#E5E5E5">this stuff is the assembled bytes of the</font>

753
00:37:06,029 --> 00:37:10,529
quantum<font color="#E5E5E5"> leap code which should switch</font>

754
00:37:08,160 --> 00:37:12,859
you to the thumb and this is the thumb

755
00:37:10,529 --> 00:37:16,739
code which should drop you into<font color="#CCCCCC"> a shell</font>

756
00:37:12,859 --> 00:37:21,180
<font color="#E5E5E5">so I'm going to do that if I just run</font>

757
00:37:16,739 --> 00:37:23,430
quantum<font color="#CCCCCC"> tests</font><font color="#E5E5E5"> arm</font><font color="#CCCCCC"> I should get a shell</font>

758
00:37:21,180 --> 00:37:26,399
<font color="#E5E5E5">which means we went from arm to thumb</font>

759
00:37:23,430 --> 00:37:29,848
and boom you have<font color="#E5E5E5"> a shell everything</font>

760
00:37:26,400 --> 00:37:30,569
works<font color="#E5E5E5"> the</font><font color="#CCCCCC"> switch happened now comes</font><font color="#E5E5E5"> the</font>

761
00:37:29,849 --> 00:37:33,119
tricky<font color="#E5E5E5"> part</font>

762
00:37:30,569 --> 00:37:35,160
<font color="#CCCCCC">if you start in thumb mode then</font><font color="#E5E5E5"> you have</font>

763
00:37:33,119 --> 00:37:41,130
to stay in some more<font color="#E5E5E5"> without switching</font>

764
00:37:35,160 --> 00:37:42,960
<font color="#E5E5E5">back so this is</font><font color="#CCCCCC"> I I don't</font><font color="#E5E5E5"> have a thumb</font>

765
00:37:41,130 --> 00:37:45,779
only processor for the demo so<font color="#E5E5E5"> I</font>

766
00:37:42,960 --> 00:37:48,059
artificially forced a thumb<font color="#CCCCCC"> switch but</font>

767
00:37:45,779 --> 00:37:50,880
after the thumb switch<font color="#CCCCCC"> I have the same</font>

768
00:37:48,059 --> 00:37:52,980
polyglot code over<font color="#CCCCCC"> here</font><font color="#E5E5E5"> we should keep</font>

769
00:37:50,880 --> 00:37:55,319
you in<font color="#E5E5E5"> thumb mode and not play any</font>

770
00:37:52,980 --> 00:37:58,799
tricks<font color="#E5E5E5"> not crash on you not do any</font>

771
00:37:55,319 --> 00:38:03,569
signals<font color="#E5E5E5"> and then still drop you into</font><font color="#CCCCCC"> a</font>

772
00:37:58,799 --> 00:38:17,329
shell so here let me gdb this and show

773
00:38:03,569 --> 00:38:19,739
you set a breakpoint<font color="#CCCCCC"> will</font><font color="#E5E5E5"> start it and</font>

774
00:38:17,329 --> 00:38:22,739
skip to the<font color="#E5E5E5"> first two instructions which</font>

775
00:38:19,739 --> 00:38:24,989
<font color="#E5E5E5">will now switch me into thumb mode so</font>

776
00:38:22,739 --> 00:38:26,789
now I'm in thumb mode<font color="#CCCCCC"> this at this</font><font color="#E5E5E5"> point</font>

777
00:38:24,989 --> 00:38:29,369
we can assume that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> started on a</font>

778
00:38:26,789 --> 00:38:31,859
thumb<font color="#CCCCCC"> boli processor and the rest of</font>

779
00:38:29,369 --> 00:38:33,539
these<font color="#E5E5E5"> instructions over here all the</font>

780
00:38:31,859 --> 00:38:35,700
stuff<font color="#CCCCCC"> that you see</font><font color="#E5E5E5"> this is the polyglot</font>

781
00:38:33,539 --> 00:38:38,549
code<font color="#E5E5E5"> but now running as thump</font>

782
00:38:35,700 --> 00:38:45,328
instructions<font color="#E5E5E5"> if I dump the instructions</font>

783
00:38:38,549 --> 00:38:48,089
in arm<font color="#E5E5E5"> these are the arm instructions at</font>

784
00:38:45,329 --> 00:38:53,160
the<font color="#E5E5E5"> program counter right</font><font color="#CCCCCC"> now and if I</font>

785
00:38:48,089 --> 00:38:55,140
dump the same instructions in thumb the

786
00:38:53,160 --> 00:38:56,848
same instructions look like this I had

787
00:38:55,140 --> 00:39:00,690
<font color="#E5E5E5">move</font><font color="#CCCCCC"> compared something-something</font>

788
00:38:56,849 --> 00:39:05,400
subtract all non-destructive<font color="#E5E5E5"> and if I</font>

789
00:39:00,690 --> 00:39:07,739
now skip ahead by<font color="#CCCCCC"> 16 instructions skip</font>

790
00:39:05,400 --> 00:39:09,200
through<font color="#CCCCCC"> all these thumb instructions we</font>

791
00:39:07,739 --> 00:39:12,650
will<font color="#E5E5E5"> see that we</font>

792
00:39:09,200 --> 00:39:16,160
<font color="#CCCCCC">stay</font><font color="#E5E5E5"> in some mode the flag was thumb to</font>

793
00:39:12,650 --> 00:39:21,530
<font color="#E5E5E5">begin with sorry this was thumb to begin</font>

794
00:39:16,160 --> 00:39:25,910
with and<font color="#E5E5E5"> after doing the step through</font><font color="#CCCCCC"> I</font>

795
00:39:21,530 --> 00:39:29,510
stay in thumb mode and now I'm able<font color="#E5E5E5"> to</font>

796
00:39:25,910 --> 00:39:37,930
<font color="#E5E5E5">run my shellcode if I do a continue and</font>

797
00:39:29,510 --> 00:39:40,430
boom<font color="#CCCCCC"> I'm dropped to my shell</font><font color="#E5E5E5"> so that's</font>

798
00:39:37,930 --> 00:39:45,020
that's the demo<font color="#CCCCCC"> it worked and</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> very</font>

799
00:39:40,430 --> 00:39:48,740
glad it did<font color="#CCCCCC"> ok so yes</font><font color="#E5E5E5"> to kind of</font>

800
00:39:45,020 --> 00:39:50,930
conclude these are some beginning

801
00:39:48,740 --> 00:39:53,000
<font color="#E5E5E5">exploratory tricks in shell code there's</font>

802
00:39:50,930 --> 00:39:55,069
a lot of work to be done<font color="#E5E5E5"> are</font><font color="#CCCCCC"> done</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> our</font>

803
00:39:53,000 --> 00:39:57,770
shell code<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> definitely not as mature</font>

804
00:39:55,070 --> 00:39:59,480
as the x86 world hopefully<font color="#CCCCCC"> what I've</font>

805
00:39:57,770 --> 00:40:00,829
done is going<font color="#E5E5E5"> to inspire a few more</font>

806
00:39:59,480 --> 00:40:03,980
things and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to start</font>

807
00:40:00,829 --> 00:40:06,170
seeing a swelling<font color="#E5E5E5"> of creative our</font><font color="#CCCCCC"> shell</font>

808
00:40:03,980 --> 00:40:07,940
<font color="#CCCCCC">code floating around and maybe make its</font>

809
00:40:06,170 --> 00:40:09,980
way into the Metasploit framework to be

810
00:40:07,940 --> 00:40:11,990
used like plug and<font color="#E5E5E5"> play click and drop</font>

811
00:40:09,980 --> 00:40:14,420
shell code<font color="#CCCCCC"> sometimes I would love that I</font>

812
00:40:11,990 --> 00:40:16,520
would certainly love<font color="#CCCCCC"> to not write shell</font>

813
00:40:14,420 --> 00:40:20,869
code by<font color="#CCCCCC"> hand anymore and use automatic</font>

814
00:40:16,520 --> 00:40:23,000
<font color="#E5E5E5">tools</font><font color="#CCCCCC"> the other thing is sure if you</font>

815
00:40:20,869 --> 00:40:24,890
want to write a<font color="#CCCCCC"> Riera rule</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> yarra this</font>

816
00:40:23,000 --> 00:40:26,750
<font color="#E5E5E5">good luck</font><font color="#CCCCCC"> and I can come up with</font>

817
00:40:24,890 --> 00:40:29,299
<font color="#E5E5E5">hundreds of different polyglot</font>

818
00:40:26,750 --> 00:40:30,980
combinations dynamically generated which

819
00:40:29,300 --> 00:40:34,720
means that I also<font color="#E5E5E5"> achieve my personal</font>

820
00:40:30,980 --> 00:40:36,950
vendetta against signature-based InfoSec

821
00:40:34,720 --> 00:40:38,779
<font color="#E5E5E5">so with this I want to conclude the</font>

822
00:40:36,950 --> 00:40:40,339
shellcodes<font color="#E5E5E5"> up there my slides are going</font>

823
00:40:38,780 --> 00:40:43,730
<font color="#E5E5E5">to be up on SlideShare as soon as I get</font>

824
00:40:40,339 --> 00:40:52,130
<font color="#E5E5E5">off the</font><font color="#CCCCCC"> stage</font><font color="#E5E5E5"> play with it and thank you</font>

825
00:40:43,730 --> 00:40:53,630
<font color="#CCCCCC">very much</font><font color="#E5E5E5"> questions any this is</font><font color="#CCCCCC"> the</font>

826
00:40:52,130 --> 00:40:55,369
first time I've seen a presentation<font color="#CCCCCC"> of</font>

827
00:40:53,630 --> 00:40:56,810
yours on mobile<font color="#CCCCCC"> there is no questions</font>

828
00:40:55,369 --> 00:41:01,400
<font color="#E5E5E5">that's because I sped through it and I</font>

829
00:40:56,810 --> 00:41:03,410
was<font color="#CCCCCC"> very dense with the code sure okay</font>

830
00:41:01,400 --> 00:41:05,420
if you do have any<font color="#E5E5E5"> questions you do go</font>

831
00:41:03,410 --> 00:41:07,609
<font color="#E5E5E5">through my github stuff and find find me</font>

832
00:41:05,420 --> 00:41:09,500
later I'll be<font color="#E5E5E5"> here we'll all be doing</font>

833
00:41:07,609 --> 00:41:11,299
<font color="#E5E5E5">yoga tomorrow at 8 a.m.</font><font color="#CCCCCC"> you're welcome</font>

834
00:41:09,500 --> 00:41:12,890
<font color="#E5E5E5">to join</font><font color="#CCCCCC"> us as well</font><font color="#E5E5E5"> but don't ask me I'm</font>

835
00:41:11,300 --> 00:41:14,490
<font color="#CCCCCC">shell coding stuff</font><font color="#E5E5E5"> during yoga I might</font>

836
00:41:12,890 --> 00:41:17,319
break<font color="#CCCCCC"> my back</font>

837
00:41:14,490 --> 00:41:18,490
right<font color="#CCCCCC"> well enjoy</font><font color="#E5E5E5"> Luxembourg enjoy</font><font color="#CCCCCC"> hack</font>

838
00:41:17,320 --> 00:41:19,530
<font color="#CCCCCC">Liu thank</font><font color="#E5E5E5"> you very much for your time</font>

839
00:41:18,490 --> 00:41:22,589
and<font color="#E5E5E5"> attention</font>

840
00:41:19,530 --> 00:41:22,589
[Applause]

