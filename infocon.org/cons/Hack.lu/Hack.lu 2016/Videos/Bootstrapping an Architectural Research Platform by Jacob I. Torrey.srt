1
00:00:05,040 --> 00:00:09,400
it's a very exclusive group those of you

2
00:00:07,720 --> 00:00:12,040
without the the invites were all told to

3
00:00:09,400 --> 00:00:16,930
leave so thank you guys for<font color="#CCCCCC"> for keeping</font>

4
00:00:12,040 --> 00:00:19,330
this hush-hush so basically<font color="#E5E5E5"> I kind of to</font>

5
00:00:16,930 --> 00:00:21,310
play off what Klaus said is that I'm

6
00:00:19,330 --> 00:00:23,320
been<font color="#CCCCCC"> doing a lot of architectural</font>

7
00:00:21,310 --> 00:00:25,509
research so stuff that happens either

8
00:00:23,320 --> 00:00:26,920
below the operating system or even at

9
00:00:25,510 --> 00:00:29,769
the firmware level or the hardware<font color="#CCCCCC"> level</font>

10
00:00:26,920 --> 00:00:31,090
and I found that a lot of<font color="#CCCCCC"> people</font><font color="#E5E5E5"> are</font>

11
00:00:29,769 --> 00:00:33,970
starting to get into this I've seen a

12
00:00:31,090 --> 00:00:36,219
lot of cash side-channel attacks and the

13
00:00:33,970 --> 00:00:37,989
RO hammer research got more people

14
00:00:36,219 --> 00:00:40,989
interest in this kind<font color="#CCCCCC"> of low level area</font>

15
00:00:37,989 --> 00:00:43,149
and I've gotten a lot<font color="#CCCCCC"> of emails almost</font>

16
00:00:40,989 --> 00:00:45,129
every week invariably with very poor

17
00:00:43,149 --> 00:00:47,500
<font color="#E5E5E5">English asking me questions about how to</font>

18
00:00:45,129 --> 00:00:50,530
fix a bug in my code that I wrote back

19
00:00:47,500 --> 00:00:52,750
in two thousand eight so basically my

20
00:00:50,530 --> 00:00:55,270
goal is<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> reflect back on the last</font>

21
00:00:52,750 --> 00:00:58,539
few<font color="#E5E5E5"> years and figure out how I can</font>

22
00:00:55,270 --> 00:01:01,000
accelerate other people from doing this

23
00:00:58,539 --> 00:01:02,230
so that they can be<font color="#E5E5E5"> better at doing this</font>

24
00:01:01,000 --> 00:01:05,410
little<font color="#E5E5E5"> level research which I find to be</font>

25
00:01:02,230 --> 00:01:07,479
very very interesting so as noted<font color="#CCCCCC"> this</font>

26
00:01:05,410 --> 00:01:11,798
is a<font color="#E5E5E5"> very different format from the</font>

27
00:01:07,479 --> 00:01:14,140
usual talks so feedback is welcomed so

28
00:01:11,799 --> 00:01:15,850
Klaus was very<font color="#E5E5E5"> happy and very popular</font>

29
00:01:14,140 --> 00:01:18,130
tweet I don't know if you saw this as i

30
00:01:15,850 --> 00:01:19,479
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> even know</font><font color="#E5E5E5"> how many retweets but he</font>

31
00:01:18,130 --> 00:01:21,070
came<font color="#E5E5E5"> all the way from his house in</font>

32
00:01:19,479 --> 00:01:22,929
<font color="#E5E5E5">Luxembourg just to see me talk so</font>

33
00:01:21,070 --> 00:01:26,529
clearly I've got a pretty strong<font color="#E5E5E5"> fan</font>

34
00:01:22,930 --> 00:01:28,659
base right there it's very<font color="#E5E5E5"> easy to tweet</font>

35
00:01:26,530 --> 00:01:31,360
fake things and create them so if you're

36
00:01:28,659 --> 00:01:33,460
<font color="#CCCCCC">ever looking for</font><font color="#E5E5E5"> you know you want one</font>

37
00:01:31,360 --> 00:01:36,549
direction to tweet at you for your kids

38
00:01:33,460 --> 00:01:39,908
you can press them or<font color="#CCCCCC"> whatnot it's</font><font color="#E5E5E5"> quite</font>

39
00:01:36,549 --> 00:01:41,979
straightforward so ever<font color="#E5E5E5"> I talked briefly</font>

40
00:01:39,909 --> 00:01:43,600
that I'm not going to talk about any

41
00:01:41,979 --> 00:01:45,399
really<font color="#E5E5E5"> cutting-edge new research just</font>

42
00:01:43,600 --> 00:01:48,220
<font color="#E5E5E5">more</font><font color="#CCCCCC"> about how ways that you</font><font color="#E5E5E5"> guys can do</font>

43
00:01:45,399 --> 00:01:49,930
your research more efficiently and then

44
00:01:48,220 --> 00:01:52,899
also the slides are quite worthy and

45
00:01:49,930 --> 00:01:54,579
verbose not because<font color="#E5E5E5"> I like reading off</font>

46
00:01:52,899 --> 00:01:55,689
my slides but so that if you guys can

47
00:01:54,579 --> 00:01:57,639
<font color="#CCCCCC">come back</font><font color="#E5E5E5"> to these later they'll be</font>

48
00:01:55,689 --> 00:02:01,570
published and<font color="#E5E5E5"> you have a place to jump</font>

49
00:01:57,640 --> 00:02:04,659
off from so real<font color="#E5E5E5"> quick I work in denver</font>

50
00:02:01,570 --> 00:02:06,579
colorado in the US i work for but don't

51
00:02:04,659 --> 00:02:08,590
speak for a shirt information security

52
00:02:06,579 --> 00:02:10,899
<font color="#CCCCCC">we're a</font><font color="#E5E5E5"> small like 200 person research</font>

53
00:02:08,590 --> 00:02:12,400
firm that's<font color="#E5E5E5"> all we do I leave the</font><font color="#CCCCCC"> low</font>

54
00:02:10,899 --> 00:02:14,379
<font color="#CCCCCC">level computer</font><font color="#E5E5E5"> architectures research</font>

55
00:02:12,400 --> 00:02:15,910
group and as<font color="#E5E5E5"> I said I'd like to play an</font>

56
00:02:14,379 --> 00:02:19,510
<font color="#E5E5E5">Intel privilege levels</font>

57
00:02:15,910 --> 00:02:21,850
less than or<font color="#CCCCCC"> equal to zero so what</font><font color="#E5E5E5"> is a</font>

58
00:02:19,510 --> 00:02:24,250
privilege level so in x86 which is the

59
00:02:21,850 --> 00:02:27,480
Intel system that most computers here

60
00:02:24,250 --> 00:02:29,800
are running<font color="#E5E5E5"> other than the iPad probably</font>

61
00:02:27,480 --> 00:02:31,570
back in the old days when they first

62
00:02:29,800 --> 00:02:34,090
came out they had no separation of

63
00:02:31,570 --> 00:02:36,010
privileges and so any mal behaving or

64
00:02:34,090 --> 00:02:37,810
misbehaving application could overwrite

65
00:02:36,010 --> 00:02:40,209
kernel memory or do whatever they needed

66
00:02:37,810 --> 00:02:42,700
<font color="#CCCCCC">to so that</font><font color="#E5E5E5"> was kind of a bad thing and</font>

67
00:02:40,210 --> 00:02:45,340
<font color="#E5E5E5">so the 386 added</font><font color="#CCCCCC"> protected mode and</font>

68
00:02:42,700 --> 00:02:46,989
separation so now one misbehaving

69
00:02:45,340 --> 00:02:49,420
application really can't trash the

70
00:02:46,990 --> 00:02:52,480
kernel or other applications officially

71
00:02:49,420 --> 00:02:53,649
they're designated rings 043 worth zero

72
00:02:52,480 --> 00:02:55,540
being the most privileged and three

73
00:02:53,650 --> 00:02:58,720
being the least and then unofficially

74
00:02:55,540 --> 00:03:00,609
there's also minus<font color="#E5E5E5"> one two and three so</font>

75
00:02:58,720 --> 00:03:02,230
when you're setting<font color="#E5E5E5"> out to about do some</font>

76
00:03:00,610 --> 00:03:03,970
architectural research you need<font color="#E5E5E5"> to</font>

77
00:03:02,230 --> 00:03:06,579
figure<font color="#CCCCCC"> out what ring the plane because</font>

78
00:03:03,970 --> 00:03:08,410
<font color="#E5E5E5">typically the higher the ring or the</font>

79
00:03:06,580 --> 00:03:10,420
less privileged it is easier it is to

80
00:03:08,410 --> 00:03:12,250
start getting access to it so it's

81
00:03:10,420 --> 00:03:15,190
<font color="#E5E5E5">really nice</font><font color="#CCCCCC"> and easy to write a program</font>

82
00:03:12,250 --> 00:03:17,020
in<font color="#E5E5E5"> user space because you</font><font color="#CCCCCC"> have all the</font>

83
00:03:15,190 --> 00:03:18,370
debugging tools you have a compiler if

84
00:03:17,020 --> 00:03:20,440
it crashes it doesn't blue screen or

85
00:03:18,370 --> 00:03:22,209
triple fault the box if you have to

86
00:03:20,440 --> 00:03:24,100
write<font color="#E5E5E5"> something in OS level or sits a</font>

87
00:03:22,209 --> 00:03:25,570
management mode you really have<font color="#E5E5E5"> no idea</font>

88
00:03:24,100 --> 00:03:27,700
<font color="#E5E5E5">what you're doing and the debugging</font>

89
00:03:25,570 --> 00:03:29,049
tools for that is very<font color="#CCCCCC"> very expensive so</font>

90
00:03:27,700 --> 00:03:30,369
you first want to<font color="#CCCCCC"> figure out what level</font>

91
00:03:29,050 --> 00:03:34,510
you<font color="#E5E5E5"> need to play at and then figure out</font>

92
00:03:30,370 --> 00:03:36,250
how to get there<font color="#E5E5E5"> as easy as possible so</font>

93
00:03:34,510 --> 00:03:37,959
virtual memory I talked about<font color="#CCCCCC"> this very</font>

94
00:03:36,250 --> 00:03:40,540
briefly at my lightning talking about

95
00:03:37,959 --> 00:03:43,600
maybe 10 seconds one of the more

96
00:03:40,540 --> 00:03:46,209
powerful<font color="#E5E5E5"> features for OS is to basically</font>

97
00:03:43,600 --> 00:03:48,070
<font color="#E5E5E5">control and master their processes is a</font>

98
00:03:46,209 --> 00:03:50,170
concept of virtual memory and paging

99
00:03:48,070 --> 00:03:52,209
basically more privileged code can

100
00:03:50,170 --> 00:03:54,940
isolate and then manage the the paging

101
00:03:52,209 --> 00:03:56,410
the<font color="#E5E5E5"> view of memory for less privileged</font>

102
00:03:54,940 --> 00:03:58,620
processing so that could<font color="#E5E5E5"> be an operating</font>

103
00:03:56,410 --> 00:04:01,180
system managing applications or a

104
00:03:58,620 --> 00:04:03,250
hypervisor or VMM managing operating

105
00:04:01,180 --> 00:04:04,510
systems so real quick the CPU has a

106
00:04:03,250 --> 00:04:07,120
register that<font color="#E5E5E5"> I talked about yesterday</font>

107
00:04:04,510 --> 00:04:09,730
my lightning talks cr3 which has a

108
00:04:07,120 --> 00:04:12,340
pointer to the page tables and whenever

109
00:04:09,730 --> 00:04:13,359
you access a pointer you're going to go

110
00:04:12,340 --> 00:04:15,220
<font color="#E5E5E5">through you're going</font><font color="#CCCCCC"> to look up that</font>

111
00:04:13,360 --> 00:04:16,840
directory you're going to find that<font color="#CCCCCC"> they</font>

112
00:04:15,220 --> 00:04:17,829
might have a pointer to a page table and

113
00:04:16,839 --> 00:04:19,570
it's going<font color="#E5E5E5"> to go find that and then</font>

114
00:04:17,829 --> 00:04:23,020
eventually it's going<font color="#E5E5E5"> to get the</font><font color="#CCCCCC"> address</font>

115
00:04:19,570 --> 00:04:24,610
to look up so kind of slow but pretty

116
00:04:23,020 --> 00:04:26,020
impressive<font color="#CCCCCC"> and very powerful and that's</font>

117
00:04:24,610 --> 00:04:27,880
why when you're at a user space

118
00:04:26,020 --> 00:04:29,680
application you can have<font color="#CCCCCC"> two</font>

119
00:04:27,880 --> 00:04:31,000
applications that have the<font color="#E5E5E5"> same point</font>

120
00:04:29,680 --> 00:04:34,630
that's pointing different memory because

121
00:04:31,000 --> 00:04:36,220
they have<font color="#CCCCCC"> different page tables memory</font>

122
00:04:34,630 --> 00:04:37,389
access is quite slow and you can see

123
00:04:36,220 --> 00:04:40,419
that<font color="#E5E5E5"> that was only like three or four</font>

124
00:04:37,389 --> 00:04:44,139
lookups for a single byte of memory if

125
00:04:40,419 --> 00:04:45,880
you were on a virtualized system and you

126
00:04:44,139 --> 00:04:48,039
had<font color="#E5E5E5"> 64-bit it could be I think upwards</font>

127
00:04:45,880 --> 00:04:49,600
of nine<font color="#E5E5E5"> memory translations and access</font>

128
00:04:48,039 --> 00:04:52,900
<font color="#CCCCCC">to memory which is</font><font color="#E5E5E5"> very very very slow</font>

129
00:04:49,600 --> 00:04:55,479
so basically the CPU defaults to always

130
00:04:52,900 --> 00:04:57,880
accessing<font color="#E5E5E5"> cash and cash save a lot of</font>

131
00:04:55,479 --> 00:04:59,199
time<font color="#E5E5E5"> and it has a caching hierarchy as</font>

132
00:04:57,880 --> 00:05:01,570
well because<font color="#E5E5E5"> cache is quite expensive</font>

133
00:04:59,199 --> 00:05:02,800
and<font color="#E5E5E5"> the bigger it is the longer it takes</font>

134
00:05:01,570 --> 00:05:04,509
to search through it so usually they

135
00:05:02,800 --> 00:05:07,449
like to kind of have this cascading

136
00:05:04,509 --> 00:05:10,449
hierarchy of l1 l2 and then l3 is<font color="#CCCCCC"> a</font>

137
00:05:07,449 --> 00:05:12,789
shared resource between different<font color="#E5E5E5"> CPU</font>

138
00:05:10,449 --> 00:05:14,289
cores which been done some<font color="#E5E5E5"> very</font>

139
00:05:12,789 --> 00:05:18,009
interesting side channel research in

140
00:05:14,289 --> 00:05:20,070
that lately how memory is cash is very

141
00:05:18,009 --> 00:05:22,479
difficult kind of combination between

142
00:05:20,070 --> 00:05:24,070
control register bits bits and paging

143
00:05:22,479 --> 00:05:27,820
structures and then some other registers

144
00:05:24,070 --> 00:05:29,979
called the MTR RS<font color="#E5E5E5"> it's extra things if</font>

145
00:05:27,820 --> 00:05:31,539
you're interested so new<font color="#E5E5E5"> CPUs have</font>

146
00:05:29,979 --> 00:05:33,490
something called cat cash allocation

147
00:05:31,539 --> 00:05:35,979
technology which allows you to kind<font color="#E5E5E5"> of</font>

148
00:05:33,490 --> 00:05:38,590
hard allocate certain regions of cash to

149
00:05:35,979 --> 00:05:41,469
certain vm source<font color="#CCCCCC"> curtain scores try to</font>

150
00:05:38,590 --> 00:05:43,659
help give more performance to certain

151
00:05:41,470 --> 00:05:45,400
systems and then another one was

152
00:05:43,659 --> 00:05:47,139
invisible things lab showed an smm

153
00:05:45,400 --> 00:05:49,690
attack or system management attack where

154
00:05:47,139 --> 00:05:51,159
since the controller the memory

155
00:05:49,690 --> 00:05:54,099
controller determined if you could

156
00:05:51,159 --> 00:05:55,690
access system management mode and the

157
00:05:54,099 --> 00:05:58,210
<font color="#CCCCCC">cpu basically says</font><font color="#E5E5E5"> i'm in system</font>

158
00:05:55,690 --> 00:06:00,039
management mode but because the<font color="#E5E5E5"> cpu</font>

159
00:05:58,210 --> 00:06:01,840
talks directly to the cash if you change

160
00:06:00,039 --> 00:06:03,729
just a management mode to be<font color="#CCCCCC"> cacheable</font>

161
00:06:01,840 --> 00:06:05,770
it would access<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cache rather than</font>

162
00:06:03,729 --> 00:06:07,539
going out to the<font color="#E5E5E5"> controller hub memory</font>

163
00:06:05,770 --> 00:06:08,859
controller hub<font color="#E5E5E5"> and then you could</font>

164
00:06:07,539 --> 00:06:10,930
<font color="#E5E5E5">actually break into assistant manager</font>

165
00:06:08,860 --> 00:06:15,220
mode very<font color="#E5E5E5"> very easily so you can now</font>

166
00:06:10,930 --> 00:06:17,080
lock mtrs for certain regions so there's

167
00:06:15,220 --> 00:06:18,520
also a cash for these virtual to

168
00:06:17,080 --> 00:06:20,169
physical address translation this has

169
00:06:18,520 --> 00:06:23,109
been most of my research over the last

170
00:06:20,169 --> 00:06:26,650
few years has been<font color="#E5E5E5"> to TL be so</font>

171
00:06:23,110 --> 00:06:28,270
translation lookaside I logically if you

172
00:06:26,650 --> 00:06:30,729
were to look<font color="#E5E5E5"> at the Intel manual there's</font>

173
00:06:28,270 --> 00:06:31,870
<font color="#E5E5E5">really kind of one it</font><font color="#CCCCCC"> just give it a</font>

174
00:06:30,729 --> 00:06:34,419
virtual address<font color="#E5E5E5"> and a physical address</font>

175
00:06:31,870 --> 00:06:36,370
pairing<font color="#CCCCCC"> and we'll save</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> for later if</font>

176
00:06:34,419 --> 00:06:38,169
you actually were to like take an x-ray

177
00:06:36,370 --> 00:06:39,700
of<font color="#E5E5E5"> a cpu you'd see that there are</font>

178
00:06:38,169 --> 00:06:41,409
between<font color="#E5E5E5"> two</font><font color="#CCCCCC"> or three there's one for</font>

179
00:06:39,700 --> 00:06:42,969
instructions one for data and then one

180
00:06:41,409 --> 00:06:44,369
that can<font color="#CCCCCC"> be shared between them</font>

181
00:06:42,969 --> 00:06:46,569
and this is a very straightforward

182
00:06:44,369 --> 00:06:48,429
diagram if you access memory if it's

183
00:06:46,569 --> 00:06:55,029
already<font color="#E5E5E5"> cached great if not go through</font>

184
00:06:48,429 --> 00:06:56,859
and cash it then the IDT and I VT these

185
00:06:55,029 --> 00:06:58,360
are the interrupt vector and interrupt

186
00:06:56,860 --> 00:07:00,399
descriptor tables relatively or

187
00:06:58,360 --> 00:07:02,139
respectively this is kind of<font color="#E5E5E5"> the main</font>

188
00:07:00,399 --> 00:07:04,089
mechanism for both the operating system

189
00:07:02,139 --> 00:07:06,039
<font color="#E5E5E5">or a hypervisor to respond to</font><font color="#CCCCCC"> hardware</font>

190
00:07:04,089 --> 00:07:08,259
events you plug in a new USB stick or

191
00:07:06,039 --> 00:07:10,029
your hard drive is finished loading off

192
00:07:08,259 --> 00:07:12,909
a page of memory or<font color="#E5E5E5"> block out of the</font>

193
00:07:10,029 --> 00:07:14,289
hard drive and it can give you an

194
00:07:12,909 --> 00:07:17,709
interrupts you're not constantly pulling

195
00:07:14,289 --> 00:07:19,599
on that device the IDT is in protected

196
00:07:17,709 --> 00:07:21,119
mode<font color="#CCCCCC"> in the IV T's in real mode</font><font color="#E5E5E5"> I'll</font>

197
00:07:19,599 --> 00:07:23,679
<font color="#E5E5E5">talk about that</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit later</font>

198
00:07:21,119 --> 00:07:26,199
basically you feel pain table and<font color="#E5E5E5"> memory</font>

199
00:07:23,679 --> 00:07:28,268
<font color="#CCCCCC">and you pass a pointer to that into a</font>

200
00:07:26,199 --> 00:07:30,039
<font color="#E5E5E5">certain register and then</font><font color="#CCCCCC"> this is how</font>

201
00:07:28,269 --> 00:07:31,239
<font color="#E5E5E5">you can jump from one privilege level to</font>

202
00:07:30,039 --> 00:07:33,669
another so if you're<font color="#E5E5E5"> going to make a</font>

203
00:07:31,239 --> 00:07:37,328
system call this is how you<font color="#E5E5E5"> kind of use</font>

204
00:07:33,669 --> 00:07:38,589
that and so I believe was int8 used to

205
00:07:37,329 --> 00:07:42,699
be the one<font color="#E5E5E5"> that you could</font><font color="#CCCCCC"> use to switch</font>

206
00:07:38,589 --> 00:07:44,379
on some operating systems virtualization

207
00:07:42,699 --> 00:07:46,419
this is the first unofficial ring ring

208
00:07:44,379 --> 00:07:48,659
minus one so<font color="#E5E5E5"> I'm sure you guys have all</font>

209
00:07:46,419 --> 00:07:51,489
heard of at least sin or virtual box or

210
00:07:48,659 --> 00:07:53,199
kvm basically the same thing that<font color="#CCCCCC"> an</font>

211
00:07:51,489 --> 00:07:55,659
operating system can do<font color="#E5E5E5"> to applications</font>

212
00:07:53,199 --> 00:07:58,389
a hypervisor can do<font color="#CCCCCC"> to operating systems</font>

213
00:07:55,659 --> 00:07:59,889
so<font color="#E5E5E5"> originally before they added hardware</font>

214
00:07:58,389 --> 00:08:01,929
support it was kind of in a happy way

215
00:07:59,889 --> 00:08:04,389
where you were doing dynamic binary

216
00:08:01,929 --> 00:08:06,339
translations or your kind of pushing the

217
00:08:04,389 --> 00:08:08,919
operating systems into a slightly lower

218
00:08:06,339 --> 00:08:11,159
ring but not the full lower ring but now

219
00:08:08,919 --> 00:08:13,808
you have CPUs most every CPU has

220
00:08:11,159 --> 00:08:16,209
unmodified OS support with this ax men

221
00:08:13,809 --> 00:08:18,489
called<font color="#E5E5E5"> vtx so that basically just allows</font>

222
00:08:16,209 --> 00:08:19,959
you to you<font color="#E5E5E5"> know set up applications that</font>

223
00:08:18,489 --> 00:08:26,198
are operating<font color="#E5E5E5"> systems and then manage</font>

224
00:08:19,959 --> 00:08:27,669
them quite simply if you want to preempt

225
00:08:26,199 --> 00:08:31,059
the operating system one way to do that

226
00:08:27,669 --> 00:08:32,649
<font color="#E5E5E5">is by hooking things really early a lot</font>

227
00:08:31,059 --> 00:08:34,659
of<font color="#E5E5E5"> the modern operating systems do a</font>

228
00:08:32,649 --> 00:08:36,789
really good job<font color="#E5E5E5"> of preventing patching</font>

229
00:08:34,659 --> 00:08:38,110
so you've mayra heard of patch guard so

230
00:08:36,789 --> 00:08:39,848
one way you<font color="#E5E5E5"> can get in there if you want</font>

231
00:08:38,110 --> 00:08:42,729
to instrument the operating system or do

232
00:08:39,849 --> 00:08:45,069
something<font color="#E5E5E5"> else is to preamp that through</font>

233
00:08:42,729 --> 00:08:47,319
hooking the<font color="#E5E5E5"> boot process so a system</font>

234
00:08:45,069 --> 00:08:51,849
starts up in 16-bit real mode kind of

235
00:08:47,319 --> 00:08:53,529
like that kind of fail MBR rootkit and

236
00:08:51,850 --> 00:08:56,620
you hope<font color="#CCCCCC"> that they've they've copied the</font>

237
00:08:53,529 --> 00:08:58,779
and changed the 16-bit to 30

238
00:08:56,620 --> 00:09:00,370
a bit properly because it needs to

239
00:08:58,779 --> 00:09:02,920
support backwards compatibility to das

240
00:09:00,370 --> 00:09:06,460
and that's what legacy BIOS runs in this

241
00:09:02,920 --> 00:09:07,930
is a<font color="#E5E5E5"> 16-bit mode but most every system</font>

242
00:09:06,460 --> 00:09:10,630
these days is more modern it has

243
00:09:07,930 --> 00:09:12,520
something<font color="#CCCCCC"> called UEFI the universal</font>

244
00:09:10,630 --> 00:09:14,529
extensive firmware interface where

245
00:09:12,520 --> 00:09:16,540
basically it runs almost like a light

246
00:09:14,529 --> 00:09:18,880
operating<font color="#CCCCCC"> system shell in protected mode</font>

247
00:09:16,540 --> 00:09:20,170
for extra performance and extra features

248
00:09:18,880 --> 00:09:22,570
and then you can do a<font color="#E5E5E5"> whole bunch of</font>

249
00:09:20,170 --> 00:09:23,770
cool stuff there<font color="#E5E5E5"> so depending</font><font color="#CCCCCC"> on what</font>

250
00:09:22,570 --> 00:09:28,089
system you're on you're<font color="#E5E5E5"> going to have to</font>

251
00:09:23,770 --> 00:09:30,130
hook bios or hook you fi so bios

252
00:09:28,089 --> 00:09:33,040
basically it loads it off of a<font color="#E5E5E5"> ROM or a</font>

253
00:09:30,130 --> 00:09:35,500
flash and then it initializes the system

254
00:09:33,040 --> 00:09:36,670
as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the ivt it configure system</font>

255
00:09:35,500 --> 00:09:38,290
management mode and so<font color="#E5E5E5"> that's what's</font>

256
00:09:36,670 --> 00:09:39,819
<font color="#CCCCCC">it's a management is there for is</font><font color="#E5E5E5"> for</font>

257
00:09:38,290 --> 00:09:42,160
bios<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to persist through the</font>

258
00:09:39,820 --> 00:09:43,900
boot process and then<font color="#CCCCCC"> hopefully locks it</font>

259
00:09:42,160 --> 00:09:45,790
up in the<font color="#E5E5E5"> past that used to not do that</font>

260
00:09:43,900 --> 00:09:47,890
and it was very<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> to play</font><font color="#E5E5E5"> and system</font>

261
00:09:45,790 --> 00:09:49,810
management mode very easily and then

262
00:09:47,890 --> 00:09:51,550
execute specie I option roms to

263
00:09:49,810 --> 00:09:53,560
configure these hardware devices so if

264
00:09:51,550 --> 00:09:55,150
you have a raid controller your<font color="#CCCCCC"> BIOS</font>

265
00:09:53,560 --> 00:09:57,189
might not know how to configure and talk

266
00:09:55,150 --> 00:09:59,290
to that rate control directly so it'll

267
00:09:57,190 --> 00:10:01,000
ask the raid controller hey hook the ivt

268
00:09:59,290 --> 00:10:03,699
process for loading blocks off a disk

269
00:10:01,000 --> 00:10:06,010
and<font color="#E5E5E5"> you set yourself up and then pass it</font>

270
00:10:03,700 --> 00:10:07,720
back to<font color="#E5E5E5"> me and then finally</font><font color="#CCCCCC"> obviously</font>

271
00:10:06,010 --> 00:10:09,850
the bootloader gets called and then the

272
00:10:07,720 --> 00:10:14,050
<font color="#E5E5E5">bootloader has basically an API for this</font>

273
00:10:09,850 --> 00:10:15,370
<font color="#E5E5E5">ivt to call certain functions some of</font>

274
00:10:14,050 --> 00:10:16,990
which are<font color="#CCCCCC"> designed to be hooked by</font><font color="#E5E5E5"> the</font>

275
00:10:15,370 --> 00:10:18,010
operating system<font color="#E5E5E5"> for the bios tell them</font>

276
00:10:16,990 --> 00:10:20,920
hey we've gotten to this part<font color="#E5E5E5"> of the</font>

277
00:10:18,010 --> 00:10:26,830
<font color="#E5E5E5">boot process or hey this device is ready</font>

278
00:10:20,920 --> 00:10:28,870
for you with efi basically you're really

279
00:10:26,830 --> 00:10:30,760
quickly loading into protected mode and

280
00:10:28,870 --> 00:10:32,589
then it configures identity map page

281
00:10:30,760 --> 00:10:33,880
table so that means a virtual address is

282
00:10:32,589 --> 00:10:36,130
just mapped directly to the same

283
00:10:33,880 --> 00:10:38,830
physical address and then it has an IDT

284
00:10:36,130 --> 00:10:40,630
rather than ivt a configure system

285
00:10:38,830 --> 00:10:43,480
management mode which<font color="#CCCCCC"> is called runtime</font>

286
00:10:40,630 --> 00:10:45,400
services and again hopefully locks it

287
00:10:43,480 --> 00:10:47,950
there was a lot of work in the last

288
00:10:45,400 --> 00:10:50,410
couple years by oh that was the leg book

289
00:10:47,950 --> 00:10:52,360
or guys now<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> Apple doing</font>

290
00:10:50,410 --> 00:10:53,709
exploitation<font color="#CCCCCC"> of this because the source</font>

291
00:10:52,360 --> 00:10:55,660
code the reference implementation is

292
00:10:53,709 --> 00:10:57,459
open so you can just<font color="#CCCCCC"> throw something</font>

293
00:10:55,660 --> 00:11:00,640
like Coverity or some other form of

294
00:10:57,459 --> 00:11:01,869
fuzzer at it or systemic<font color="#E5E5E5"> analysis tool</font>

295
00:11:00,640 --> 00:11:03,490
and you can<font color="#E5E5E5"> actually find</font>

296
00:11:01,870 --> 00:11:05,350
vulnerabilities and then all your bios

297
00:11:03,490 --> 00:11:07,300
vendors do is they copied that reference

298
00:11:05,350 --> 00:11:10,279
implementation change out the logo for

299
00:11:07,300 --> 00:11:12,709
theirs and then they sell it again so

300
00:11:10,279 --> 00:11:16,160
interesting places for vulnerability

301
00:11:12,709 --> 00:11:18,349
research as well this one also execute

302
00:11:16,160 --> 00:11:20,120
<font color="#E5E5E5">PC option roms but it's an environment</font>

303
00:11:18,350 --> 00:11:22,819
called the<font color="#CCCCCC"> dxz</font><font color="#E5E5E5"> the driver execution</font>

304
00:11:20,120 --> 00:11:24,620
environment and then basically it runs a

305
00:11:22,819 --> 00:11:25,878
PE file which could be either an

306
00:11:24,620 --> 00:11:28,100
application that<font color="#E5E5E5"> runs and then</font>

307
00:11:25,879 --> 00:11:30,579
terminates or it can then load an

308
00:11:28,100 --> 00:11:34,160
operating system etc and it passes<font color="#E5E5E5"> a</font>

309
00:11:30,579 --> 00:11:35,930
punch-up system table which is basically

310
00:11:34,160 --> 00:11:37,850
an array of function pointers for all

311
00:11:35,930 --> 00:11:41,899
the services that it provides to the

312
00:11:37,850 --> 00:11:43,029
next application being run so if you

313
00:11:41,899 --> 00:11:45,050
wanted to hook the boot process

314
00:11:43,029 --> 00:11:46,999
basically<font color="#E5E5E5"> you figure out if you're on</font>

315
00:11:45,050 --> 00:11:48,829
bio story fi so you want to<font color="#CCCCCC"> start really</font>

316
00:11:46,999 --> 00:11:50,990
easily with like a<font color="#E5E5E5"> boot loader skeleton</font>

317
00:11:48,829 --> 00:11:52,878
so that could be<font color="#E5E5E5"> even simpler than grub</font>

318
00:11:50,990 --> 00:11:55,040
basically you<font color="#E5E5E5"> want to hook the boot</font>

319
00:11:52,879 --> 00:11:57,920
process and then basically run the boot

320
00:11:55,040 --> 00:12:01,248
<font color="#CCCCCC">process so you can hook ivt really</font>

321
00:11:57,920 --> 00:12:03,139
easily so<font color="#CCCCCC"> if you wanted to do that you</font>

322
00:12:01,249 --> 00:12:05,209
know you just<font color="#CCCCCC"> basically hook any ivt</font>

323
00:12:03,139 --> 00:12:07,970
entry put<font color="#CCCCCC"> yourself in memory somewhere</font>

324
00:12:05,209 --> 00:12:10,910
and then you'd be able<font color="#CCCCCC"> to get inter kind</font>

325
00:12:07,970 --> 00:12:14,360
of man in the middle these OS to bios

326
00:12:10,910 --> 00:12:16,160
calls in if I you can basically just

327
00:12:14,360 --> 00:12:18,860
develop an application it gets run and

328
00:12:16,160 --> 00:12:20,600
then use the<font color="#E5E5E5"> EFI services load image and</font>

329
00:12:18,860 --> 00:12:23,209
then start image to start the operating

330
00:12:20,600 --> 00:12:24,829
system but<font color="#E5E5E5"> you can change the pointer so</font>

331
00:12:23,209 --> 00:12:26,719
you could basically hook any function

332
00:12:24,829 --> 00:12:28,219
pointer from the boot services and then

333
00:12:26,720 --> 00:12:29,629
the operating system when it's loading

334
00:12:28,220 --> 00:12:32,480
will call you<font color="#E5E5E5"> first so you can kind of</font>

335
00:12:29,629 --> 00:12:34,579
get really early access to how the efi

336
00:12:32,480 --> 00:12:40,129
bootloader is running for operating

337
00:12:34,579 --> 00:12:41,449
system as I<font color="#CCCCCC"> mentioned before patch guard</font>

338
00:12:40,129 --> 00:12:43,879
makes interrupt hooking quite a bit<font color="#E5E5E5"> more</font>

339
00:12:41,449 --> 00:12:45,319
<font color="#E5E5E5">difficult so XP or seven is probably</font>

340
00:12:43,879 --> 00:12:46,579
preferable unless you want to go up the

341
00:12:45,319 --> 00:12:48,889
hypervisor route which we'll talk<font color="#E5E5E5"> about</font>

342
00:12:46,579 --> 00:12:50,359
a little bit later when you<font color="#CCCCCC"> are hooking</font>

343
00:12:48,889 --> 00:12:51,680
a hypervisor or the interrupts you want

344
00:12:50,360 --> 00:12:53,360
to make sure<font color="#E5E5E5"> your compiler doesn't</font>

345
00:12:51,680 --> 00:12:55,160
destroy register<font color="#CCCCCC"> States because you're</font>

346
00:12:53,360 --> 00:12:57,589
<font color="#E5E5E5">not necessarily setting up the proper</font>

347
00:12:55,160 --> 00:13:00,079
frame pointer and you're<font color="#E5E5E5"> not saving the</font>

348
00:12:57,589 --> 00:13:02,899
variables the same way you can also

349
00:13:00,079 --> 00:13:05,269
<font color="#E5E5E5">confer configure a hypervisor to trap on</font>

350
00:13:02,899 --> 00:13:06,709
any kernel level interrupts and<font color="#E5E5E5"> so it</font>

351
00:13:05,269 --> 00:13:08,509
might actually be easier and I think it

352
00:13:06,709 --> 00:13:09,949
actually is to write a hypervisor to

353
00:13:08,509 --> 00:13:11,420
trap on certain stuff and I'll talk

354
00:13:09,949 --> 00:13:14,540
<font color="#E5E5E5">about that a little bit later rather</font>

355
00:13:11,420 --> 00:13:16,998
<font color="#E5E5E5">than trying to patch</font><font color="#CCCCCC"> colonel so here's a</font>

356
00:13:14,540 --> 00:13:18,559
couple<font color="#E5E5E5"> examples for this stuff so if you</font>

357
00:13:16,999 --> 00:13:20,779
were to trap page faults which is what

358
00:13:18,559 --> 00:13:23,810
the shadow Walker memory hiding rootkit

359
00:13:20,779 --> 00:13:26,750
by English 2005 2008 by

360
00:13:23,810 --> 00:13:28,579
<font color="#CCCCCC">cheri Sparks and Jamie Butler basically</font>

361
00:13:26,750 --> 00:13:30,410
they hooked the page fault handler to

362
00:13:28,580 --> 00:13:33,620
figure out if the<font color="#CCCCCC"> virtual address was</font>

363
00:13:30,410 --> 00:13:35,990
being accessed for purposes of reading

364
00:13:33,620 --> 00:13:38,029
data it would pass it to one place which

365
00:13:35,990 --> 00:13:40,279
was<font color="#CCCCCC"> probably the unmodified windows</font>

366
00:13:38,029 --> 00:13:42,080
<font color="#E5E5E5">kernel and if it was being accessed like</font>

367
00:13:40,279 --> 00:13:44,570
as a call or a jump for data or

368
00:13:42,080 --> 00:13:47,770
instruction fetch it would point it to a

369
00:13:44,570 --> 00:13:49,880
rootkit and so anti virus or a

370
00:13:47,770 --> 00:13:51,470
anti-rootkit system would be scanning

371
00:13:49,880 --> 00:13:54,830
memory and when it reached those pages

372
00:13:51,470 --> 00:13:57,110
it would get directed to the benign

373
00:13:54,830 --> 00:13:58,250
official windows version but then if you

374
00:13:57,110 --> 00:14:02,720
actually jump to it when it got

375
00:13:58,250 --> 00:14:05,510
scheduled in it would run the malicious

376
00:14:02,720 --> 00:14:06,920
code again you have the TLB there so you

377
00:14:05,510 --> 00:14:08,240
<font color="#CCCCCC">might not necessarily actually have to</font>

378
00:14:06,920 --> 00:14:10,130
trigger the page fault so you got to

379
00:14:08,240 --> 00:14:13,700
invalidate<font color="#CCCCCC"> that if you want to retrigger</font>

380
00:14:10,130 --> 00:14:16,070
that fault the general protection faults

381
00:14:13,700 --> 00:14:18,500
another one that's pretty common for for

382
00:14:16,070 --> 00:14:20,600
hooking that's was used by the<font color="#CCCCCC"> PAX gr</font>

383
00:14:18,500 --> 00:14:22,360
security guys to emulate the no execute

384
00:14:20,600 --> 00:14:24,890
bit before it existed in<font color="#CCCCCC"> Hardware</font>

385
00:14:22,360 --> 00:14:26,330
basically if the mapping is valid but

386
00:14:24,890 --> 00:14:28,490
the permissions are wrong it'll trigger

387
00:14:26,330 --> 00:14:30,920
that fault and so what they did is they

388
00:14:28,490 --> 00:14:32,660
<font color="#E5E5E5">basically said</font><font color="#CCCCCC"> that all the user space</font>

389
00:14:30,920 --> 00:14:35,209
applications that were being protected

390
00:14:32,660 --> 00:14:36,740
could only be accessed in ring 0 even

391
00:14:35,210 --> 00:14:39,050
though they were being run in ring<font color="#E5E5E5"> 3 and</font>

392
00:14:36,740 --> 00:14:41,870
if the type<font color="#CCCCCC"> of access was a data access</font>

393
00:14:39,050 --> 00:14:44,060
they would set the bit to allow<font color="#CCCCCC"> it Prime</font>

394
00:14:41,870 --> 00:14:45,830
the TLB and then reset it without and

395
00:14:44,060 --> 00:14:47,660
viola and validating that TLB have

396
00:14:45,830 --> 00:14:50,390
essentially splitting out the data tlv

397
00:14:47,660 --> 00:14:52,160
in the instruction TLB so that the<font color="#CCCCCC"> CPU</font>

398
00:14:50,390 --> 00:14:53,360
had a different view<font color="#E5E5E5"> of memory depending</font>

399
00:14:52,160 --> 00:14:57,110
on whether or not<font color="#E5E5E5"> is trying to execute</font>

400
00:14:53,360 --> 00:14:58,790
code or read code and so basically<font color="#CCCCCC"> they</font>

401
00:14:57,110 --> 00:15:00,850
were able to enforce the no execute bit

402
00:14:58,790 --> 00:15:04,660
way back<font color="#E5E5E5"> in the day</font><font color="#CCCCCC"> before that was a</font>

403
00:15:00,850 --> 00:15:06,860
hardware feature a very minimal impact

404
00:15:04,660 --> 00:15:08,780
another one we're seeing a<font color="#E5E5E5"> lot now is</font>

405
00:15:06,860 --> 00:15:10,520
performance counters basically<font color="#CCCCCC"> Intel</font>

406
00:15:08,780 --> 00:15:14,260
provides a whole bunch of registers out

407
00:15:10,520 --> 00:15:16,490
there that you can use to see different

408
00:15:14,260 --> 00:15:17,959
introspect into how the CPU is running

409
00:15:16,490 --> 00:15:20,390
to tune your code if you're<font color="#E5E5E5"> writing</font>

410
00:15:17,959 --> 00:15:23,150
something<font color="#E5E5E5"> very performant or they've</font>

411
00:15:20,390 --> 00:15:25,970
been kind of misused lately or used more

412
00:15:23,150 --> 00:15:28,040
creatively lately to be able<font color="#E5E5E5"> to do all</font>

413
00:15:25,970 --> 00:15:29,330
sorts of interesting<font color="#E5E5E5"> things so the nice</font>

414
00:15:28,040 --> 00:15:31,370
thing<font color="#CCCCCC"> is is usually they're accessible</font>

415
00:15:29,330 --> 00:15:34,310
as the kernel mode but they have AP is

416
00:15:31,370 --> 00:15:36,500
to export them a varying quality just

417
00:15:34,310 --> 00:15:37,520
some examples is you can track the last

418
00:15:36,500 --> 00:15:38,810
branch<font color="#E5E5E5"> or process</font>

419
00:15:37,520 --> 00:15:41,600
maids if you wanted to kind of do some

420
00:15:38,810 --> 00:15:42,949
<font color="#E5E5E5">form of ghetto control flow integrity</font>

421
00:15:41,600 --> 00:15:45,650
you can<font color="#E5E5E5"> kind of see</font><font color="#CCCCCC"> to make sure the</font>

422
00:15:42,950 --> 00:15:48,020
branch was actually something which

423
00:15:45,650 --> 00:15:50,329
should<font color="#E5E5E5"> be you can do the cache miss</font>

424
00:15:48,020 --> 00:15:53,329
counter which was used by some folks at

425
00:15:50,330 --> 00:15:55,220
black hat last year to detect row hammer

426
00:15:53,330 --> 00:15:58,040
attacks because it was<font color="#E5E5E5"> causing</font><font color="#CCCCCC"> that cash</font>

427
00:15:55,220 --> 00:15:59,630
failure rate to go<font color="#E5E5E5"> sky-high they could</font>

428
00:15:58,040 --> 00:16:01,010
just<font color="#E5E5E5"> really quickly read that register</font>

429
00:15:59,630 --> 00:16:04,070
and say<font color="#CCCCCC"> alright someone is trying to row</font>

430
00:16:01,010 --> 00:16:05,390
hammer us we should<font color="#E5E5E5"> take precautions and</font>

431
00:16:04,070 --> 00:16:07,580
then one another one is if you're

432
00:16:05,390 --> 00:16:09,020
looking for a research topic you<font color="#CCCCCC"> can</font>

433
00:16:07,580 --> 00:16:10,940
actually<font color="#E5E5E5"> get</font><font color="#CCCCCC"> the number of misses in</font><font color="#E5E5E5"> the</font>

434
00:16:09,020 --> 00:16:12,860
TLB and similar<font color="#CCCCCC"> to that row hammer you</font>

435
00:16:10,940 --> 00:16:16,520
could probably detect<font color="#CCCCCC"> a TLB splitting</font>

436
00:16:12,860 --> 00:16:21,530
attack based on how many misses the TLB

437
00:16:16,520 --> 00:16:23,060
has compared to normal operation so if

438
00:16:21,530 --> 00:16:24,500
you wanted to do more of this control

439
00:16:23,060 --> 00:16:25,790
flow integrity or kind of figure out

440
00:16:24,500 --> 00:16:28,960
<font color="#E5E5E5">what the program is doing you can do</font>

441
00:16:25,790 --> 00:16:31,849
branch tracing so<font color="#E5E5E5"> originally it was a</font>

442
00:16:28,960 --> 00:16:33,440
very low overhead but low power so<font color="#E5E5E5"> you</font>

443
00:16:31,850 --> 00:16:34,580
only record a certain number of last

444
00:16:33,440 --> 00:16:36,170
branches and they came<font color="#E5E5E5"> out with</font>

445
00:16:34,580 --> 00:16:38,060
something<font color="#E5E5E5"> called BTS which is a much</font>

446
00:16:36,170 --> 00:16:41,329
higher amount but really high overhead

447
00:16:38,060 --> 00:16:42,920
it was like cripplingly slow the new sky

448
00:16:41,330 --> 00:16:45,350
lake and newer<font color="#CCCCCC"> CPUs have something</font>

449
00:16:42,920 --> 00:16:47,270
called<font color="#E5E5E5"> Intel PT that basically you have</font>

450
00:16:45,350 --> 00:16:49,250
a ring buffer to some<font color="#E5E5E5"> other process and</font>

451
00:16:47,270 --> 00:16:51,470
it basically can track all of<font color="#CCCCCC"> the</font>

452
00:16:49,250 --> 00:16:53,960
processors behavior with a certain

453
00:16:51,470 --> 00:16:55,640
application so lower overhead and much

454
00:16:53,960 --> 00:16:57,170
higher power so<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to</font>

455
00:16:55,640 --> 00:16:59,180
<font color="#E5E5E5">be very interesting to see because now</font>

456
00:16:57,170 --> 00:17:01,699
you<font color="#E5E5E5"> can start instrumenting you know</font>

457
00:16:59,180 --> 00:17:04,040
fuzz or static<font color="#CCCCCC"> analysis or symbolic</font>

458
00:17:01,700 --> 00:17:06,470
execution far more quickly because<font color="#CCCCCC"> of</font>

459
00:17:04,040 --> 00:17:08,209
the hardware analysis capabilities they

460
00:17:06,470 --> 00:17:11,180
put in there and if you're interested

461
00:17:08,209 --> 00:17:15,380
there's a github link to<font color="#CCCCCC"> intel's code</font>

462
00:17:11,180 --> 00:17:17,600
for that so a vm exit so similar to

463
00:17:15,380 --> 00:17:20,300
interrupts but the hypervisor gets

464
00:17:17,599 --> 00:17:22,040
notified when certain events occur some

465
00:17:20,300 --> 00:17:24,319
of them are mandatory to trigger a vm

466
00:17:22,040 --> 00:17:25,609
exit and some are configurable so one

467
00:17:24,319 --> 00:17:28,280
way if<font color="#E5E5E5"> you're trying to figure</font><font color="#CCCCCC"> out if</font>

468
00:17:25,609 --> 00:17:30,260
you are being<font color="#E5E5E5"> run in a hyper hyper visor</font>

469
00:17:28,280 --> 00:17:32,420
and you're<font color="#E5E5E5"> not planning on</font><font color="#CCCCCC"> it you can</font>

470
00:17:30,260 --> 00:17:34,010
call instruction like the cpuid which

471
00:17:32,420 --> 00:17:36,230
will<font color="#E5E5E5"> always trigger hypervisor and</font>

472
00:17:34,010 --> 00:17:39,770
<font color="#E5E5E5">that'll basically force that hypervisor</font>

473
00:17:36,230 --> 00:17:42,380
<font color="#E5E5E5">fault and take a lot longer if you don't</font>

474
00:17:39,770 --> 00:17:43,850
have another feature called<font color="#E5E5E5"> v pit your</font>

475
00:17:42,380 --> 00:17:45,980
TL bees will be flushed and then it

476
00:17:43,850 --> 00:17:47,389
comes back and then there's a few

477
00:17:45,980 --> 00:17:49,760
interesting events that i think are

478
00:17:47,390 --> 00:17:51,350
curious like the hardware random number

479
00:17:49,760 --> 00:17:53,870
generator is one that<font color="#CCCCCC"> you can</font>

480
00:17:51,350 --> 00:17:55,340
be notified of if you're a hypervisor so

481
00:17:53,870 --> 00:17:57,918
if you have a hypervisor<font color="#E5E5E5"> and you want to</font>

482
00:17:55,340 --> 00:18:00,379
play some crypto tricks on people that's

483
00:17:57,919 --> 00:18:03,110
a good<font color="#E5E5E5"> one any moving to the control</font>

484
00:18:00,380 --> 00:18:06,350
registers MSR cpuid as<font color="#CCCCCC"> I mentioned in</font>

485
00:18:03,110 --> 00:18:08,178
any i/o to hardware devices<font color="#E5E5E5"> time stamp</font>

486
00:18:06,350 --> 00:18:10,309
counter if you want to try to detect if

487
00:18:08,179 --> 00:18:11,929
you're<font color="#E5E5E5"> being hyper-v virtual eyes you</font>

488
00:18:10,309 --> 00:18:13,970
can actually<font color="#E5E5E5"> set it up to automatically</font>

489
00:18:11,929 --> 00:18:15,770
skew the time step can or to hide the

490
00:18:13,970 --> 00:18:18,410
amount of<font color="#E5E5E5"> time the processor is taking</font>

491
00:18:15,770 --> 00:18:22,429
to run the hypervisor a metal so you can

492
00:18:18,410 --> 00:18:25,940
single step obviously EPT faults again

493
00:18:22,429 --> 00:18:28,580
analogous to what you see in page faults

494
00:18:25,940 --> 00:18:30,679
but they again go the hypervisor<font color="#E5E5E5"> and</font>

495
00:18:28,580 --> 00:18:35,090
allow hypervisor to manage OS as via

496
00:18:30,679 --> 00:18:36,530
memory you can also just trap on<font color="#CCCCCC"> the</font>

497
00:18:35,090 --> 00:18:38,750
page fault as well<font color="#E5E5E5"> so that's what I did</font>

498
00:18:36,530 --> 00:18:41,030
<font color="#CCCCCC">I'll</font><font color="#E5E5E5"> talk about a little bit later to be</font>

499
00:18:38,750 --> 00:18:46,010
able<font color="#E5E5E5"> to not fight</font><font color="#CCCCCC"> with the operating</font>

500
00:18:41,030 --> 00:18:47,510
system's memory manager system

501
00:18:46,010 --> 00:18:50,360
management<font color="#CCCCCC"> mode again Rebecca</font><font color="#E5E5E5"> spent too</font>

502
00:18:47,510 --> 00:18:52,309
much time on this<font color="#E5E5E5"> it's ring- to again</font>

503
00:18:50,360 --> 00:18:54,559
unofficial basically it was an old

504
00:18:52,309 --> 00:18:56,750
version or an old kind<font color="#E5E5E5"> of mode like the</font>

505
00:18:54,559 --> 00:18:58,789
appendix<font color="#CCCCCC"> in people's bodies</font><font color="#E5E5E5"> it's kind of</font>

506
00:18:56,750 --> 00:19:00,980
not way there as much for<font color="#E5E5E5"> much purpose</font>

507
00:18:58,789 --> 00:19:04,730
anymore but basically back in the day

508
00:19:00,980 --> 00:19:07,610
when chipsets were very difficult to

509
00:19:04,730 --> 00:19:09,860
control without a CPI they allowed you

510
00:19:07,610 --> 00:19:11,689
to put in privileged code transparently

511
00:19:09,860 --> 00:19:14,479
the operating system so you could handle

512
00:19:11,690 --> 00:19:16,010
thermal events you could turn the system

513
00:19:14,480 --> 00:19:17,480
off back in the<font color="#CCCCCC"> day</font><font color="#E5E5E5"> remember he says</font>

514
00:19:16,010 --> 00:19:19,190
it's now safe to turn off your computer

515
00:19:17,480 --> 00:19:21,230
that is<font color="#E5E5E5"> because it didn't necessarily</font>

516
00:19:19,190 --> 00:19:24,620
have the code to actually turn off<font color="#CCCCCC"> the</font>

517
00:19:21,230 --> 00:19:27,169
power supply a lot of entrusted research

518
00:19:24,620 --> 00:19:29,418
in this area<font color="#E5E5E5"> but it's now protected and</font>

519
00:19:27,169 --> 00:19:31,299
now they use it<font color="#CCCCCC"> for free if</font><font color="#E5E5E5"> I it's the</font>

520
00:19:29,419 --> 00:19:34,370
highest privilege on the system minus

521
00:19:31,299 --> 00:19:36,889
one kind of caveat it has full access<font color="#E5E5E5"> to</font>

522
00:19:34,370 --> 00:19:38,360
system memory and then other<font color="#CCCCCC"> than side</font>

523
00:19:36,890 --> 00:19:43,280
channels is very difficult<font color="#CCCCCC"> to</font><font color="#E5E5E5"> detect</font>

524
00:19:38,360 --> 00:19:44,330
this execution we're going to skim

525
00:19:43,280 --> 00:19:47,960
through a lot<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> already talked</font>

526
00:19:44,330 --> 00:19:49,010
about that caching attack so it's

527
00:19:47,960 --> 00:19:50,600
entered through another type of

528
00:19:49,010 --> 00:19:53,120
interrupt happily name the system

529
00:19:50,600 --> 00:19:54,770
management interrupt SMI it'll handle

530
00:19:53,120 --> 00:19:56,928
the interrupt and return and all the

531
00:19:54,770 --> 00:19:58,549
hardware will actually save all those

532
00:19:56,929 --> 00:20:01,880
registers and flags so it's really

533
00:19:58,549 --> 00:20:03,590
stealthy mode of execution and you can

534
00:20:01,880 --> 00:20:04,610
actually<font color="#E5E5E5"> run a second hypervisor in</font>

535
00:20:03,590 --> 00:20:05,809
system management mode

536
00:20:04,610 --> 00:20:07,189
so you can have<font color="#CCCCCC"> two of them running kind</font>

537
00:20:05,809 --> 00:20:09,559
of<font color="#E5E5E5"> in concert at the same time and</font>

538
00:20:07,190 --> 00:20:10,910
that's<font color="#E5E5E5"> called a STM there's an</font><font color="#CCCCCC"> open</font>

539
00:20:09,559 --> 00:20:14,990
<font color="#CCCCCC">source reference implementation but I've</font>

540
00:20:10,910 --> 00:20:17,710
never<font color="#E5E5E5"> seen it deployed so put all this</font>

541
00:20:14,990 --> 00:20:20,720
in context now that you have a lot of

542
00:20:17,710 --> 00:20:22,010
alphabet soup for acronyms we're<font color="#E5E5E5"> going</font>

543
00:20:20,720 --> 00:20:24,440
<font color="#E5E5E5">to go through kind of a quick case study</font>

544
00:20:22,010 --> 00:20:26,629
and then how I sold it in the past which

545
00:20:24,440 --> 00:20:28,070
was suboptimal and now how I would do it

546
00:20:26,630 --> 00:20:29,990
now and if you're<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> do something</font>

547
00:20:28,070 --> 00:20:33,830
<font color="#E5E5E5">in this field maybe how you could do it</font>

548
00:20:29,990 --> 00:20:35,870
to speed up your process so what I

549
00:20:33,830 --> 00:20:37,428
wanted to do is the TLB splitting that

550
00:20:35,870 --> 00:20:39,949
was done in shadow Walker and the<font color="#CCCCCC"> GR</font>

551
00:20:37,429 --> 00:20:42,770
security but on more modern CPUs where

552
00:20:39,950 --> 00:20:44,960
they now have a second layer stl B which

553
00:20:42,770 --> 00:20:47,000
is basically as to the right of those

554
00:20:44,960 --> 00:20:50,270
highlighted in red there's another one

555
00:20:47,000 --> 00:20:52,040
with bi-directional data flow so what<font color="#E5E5E5"> I</font>

556
00:20:50,270 --> 00:20:54,410
had<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to do is to trap on</font>

557
00:20:52,040 --> 00:20:55,899
memory accesses differentiate whether or

558
00:20:54,410 --> 00:20:58,070
not it<font color="#CCCCCC"> was a code instruction fetch</font>

559
00:20:55,900 --> 00:20:59,960
manage memory without the operating

560
00:20:58,070 --> 00:21:01,580
system interfering so windows XP you

561
00:20:59,960 --> 00:21:03,260
could pretty much do whatever you wanted

562
00:21:01,580 --> 00:21:05,570
with<font color="#CCCCCC"> the memory and page tables and it</font>

563
00:21:03,260 --> 00:21:07,250
would not<font color="#E5E5E5"> care or notice windows seven</font>

564
00:21:05,570 --> 00:21:10,129
and now a newer are obviously much

565
00:21:07,250 --> 00:21:11,809
better minimized performance impact and

566
00:21:10,130 --> 00:21:14,000
then I had no knowledge of the source

567
00:21:11,809 --> 00:21:17,928
code or access for what the programs

568
00:21:14,000 --> 00:21:19,910
that i was kind of mucking with so<font color="#CCCCCC"> i</font>

569
00:21:17,929 --> 00:21:21,950
needed<font color="#CCCCCC"> a thin hypervisor that supported</font>

570
00:21:19,910 --> 00:21:24,380
in a modern operating system it had<font color="#CCCCCC"> to</font>

571
00:21:21,950 --> 00:21:25,880
have<font color="#E5E5E5"> v pit which is the tag teal be</font>

572
00:21:24,380 --> 00:21:28,610
entry to prevent it from flushing every

573
00:21:25,880 --> 00:21:31,040
time the exit occurred and then<font color="#CCCCCC"> i</font><font color="#E5E5E5"> needed</font>

574
00:21:28,610 --> 00:21:33,559
to be able<font color="#E5E5E5"> to use structures for EPT</font>

575
00:21:31,040 --> 00:21:35,120
which had a more granular execute only

576
00:21:33,559 --> 00:21:37,549
permission<font color="#E5E5E5"> that allowed me to kind of</font>

577
00:21:35,120 --> 00:21:42,139
enforce that separation between data and

578
00:21:37,549 --> 00:21:44,240
<font color="#E5E5E5">and code even with an</font><font color="#CCCCCC"> STL be and I</font>

579
00:21:42,140 --> 00:21:46,220
didn't realize I needed this until i was

580
00:21:44,240 --> 00:21:48,559
already under contract with DARPA under

581
00:21:46,220 --> 00:21:50,390
a cyber fast-track program for Mudge and

582
00:21:48,559 --> 00:21:52,129
I didn't realize this until about maybe

583
00:21:50,390 --> 00:21:53,780
a month a month and a half into a

584
00:21:52,130 --> 00:21:55,960
four-month effort and I had to deliver

585
00:21:53,780 --> 00:21:58,790
<font color="#E5E5E5">it so I had to do</font><font color="#CCCCCC"> something really fast</font>

586
00:21:55,960 --> 00:22:00,980
we do a<font color="#E5E5E5"> lot of research with Zen and kvm</font>

587
00:21:58,790 --> 00:22:03,020
but it's way too big of a code base to

588
00:22:00,980 --> 00:22:05,179
start trying<font color="#CCCCCC"> to change so I needed</font>

589
00:22:03,020 --> 00:22:06,889
<font color="#E5E5E5">something really quick that I could kind</font>

590
00:22:05,179 --> 00:22:08,690
of do so I could work on my hypothesis

591
00:22:06,890 --> 00:22:11,750
and not trying to reverse engineer and

592
00:22:08,690 --> 00:22:15,890
come up to<font color="#E5E5E5"> speed on a 150,000 line</font>

593
00:22:11,750 --> 00:22:17,809
hypervisor so I started with a kernel

594
00:22:15,890 --> 00:22:18,540
driver for windows 7 before I realized

595
00:22:17,809 --> 00:22:21,240
that<font color="#E5E5E5"> I</font>

596
00:22:18,540 --> 00:22:22,800
needed to not have a kernel driver<font color="#E5E5E5"> I ran</font>

597
00:22:21,240 --> 00:22:26,130
into<font color="#E5E5E5"> these issues and windows seven</font>

598
00:22:22,800 --> 00:22:28,470
<font color="#E5E5E5">would blue screen so i had to switch so</font>

599
00:22:26,130 --> 00:22:30,930
i found a rootkit on rootkits calm it

600
00:22:28,470 --> 00:22:33,210
was a hypervisor rootkit cleaned it up

601
00:22:30,930 --> 00:22:34,740
added and debug support for EPT and veep

602
00:22:33,210 --> 00:22:36,180
it so back in today like it was like

603
00:22:34,740 --> 00:22:38,730
three people in<font color="#E5E5E5"> the world that had ever</font>

604
00:22:36,180 --> 00:22:40,440
implemented<font color="#CCCCCC"> veep it and EPT and</font><font color="#E5E5E5"> I had to</font>

605
00:22:38,730 --> 00:22:42,120
<font color="#E5E5E5">find them from the Zen mailing list and</font>

606
00:22:40,440 --> 00:22:45,420
email them questions<font color="#CCCCCC"> about why it would</font>

607
00:22:42,120 --> 00:22:48,260
sometimes crash a few seconds after and

608
00:22:45,420 --> 00:22:50,910
then sometimes it wouldn't crash so

609
00:22:48,260 --> 00:22:53,250
frustrating then<font color="#CCCCCC"> I added some kernel</font>

610
00:22:50,910 --> 00:22:56,340
callbacks to monitor when this process

611
00:22:53,250 --> 00:22:58,440
creation created an<font color="#E5E5E5"> ad-hoc hyper call so</font>

612
00:22:56,340 --> 00:22:59,730
basically really insecure it just would

613
00:22:58,440 --> 00:23:01,710
read some stuff out of<font color="#E5E5E5"> some registers</font>

614
00:22:59,730 --> 00:23:03,420
and act on it and then it was a very

615
00:23:01,710 --> 00:23:07,350
limited didn't have time to rewrite it

616
00:23:03,420 --> 00:23:10,080
so<font color="#CCCCCC"> if I were doing</font><font color="#E5E5E5"> it today I would use</font>

617
00:23:07,350 --> 00:23:12,959
the bear flank hypervisor which is an

618
00:23:10,080 --> 00:23:14,970
<font color="#E5E5E5">open source hypervisor developed in part</font>

619
00:23:12,960 --> 00:23:17,160
when we actually fund some developers to

620
00:23:14,970 --> 00:23:19,140
work on it but<font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> whole bunch of</font>

621
00:23:17,160 --> 00:23:21,300
folks basically trying to<font color="#E5E5E5"> create a</font>

622
00:23:19,140 --> 00:23:23,730
really extensible and simple<font color="#CCCCCC"> way to</font>

623
00:23:21,300 --> 00:23:27,330
start doing<font color="#E5E5E5"> low level research and very</font>

624
00:23:23,730 --> 00:23:29,100
quickly so why bear flank it's open

625
00:23:27,330 --> 00:23:30,210
source so you can dig into it it's

626
00:23:29,100 --> 00:23:32,070
really<font color="#E5E5E5"> lightweight it doesn't do</font>

627
00:23:30,210 --> 00:23:35,280
anything<font color="#CCCCCC"> it doesn't need to do and it's</font>

628
00:23:32,070 --> 00:23:38,490
very extensible so it's<font color="#E5E5E5"> like probably</font>

629
00:23:35,280 --> 00:23:40,550
<font color="#E5E5E5">out of the ten thousand lines of code it</font>

630
00:23:38,490 --> 00:23:44,700
has<font color="#E5E5E5"> one hundred percent test coverage</font>

631
00:23:40,550 --> 00:23:48,120
and two full static analysis<font color="#E5E5E5"> passing so</font>

632
00:23:44,700 --> 00:23:50,640
probably of that 10,000 very very few of

633
00:23:48,120 --> 00:23:52,469
those are actually hypervisor code so if

634
00:23:50,640 --> 00:23:54,360
you<font color="#E5E5E5"> don't want to research how</font><font color="#CCCCCC"> vtx works</font>

635
00:23:52,470 --> 00:23:56,100
or you don't want to read the manuals i

636
00:23:54,360 --> 00:23:58,110
would say use this to focus your

637
00:23:56,100 --> 00:23:59,790
hypervisor it supports three mega

638
00:23:58,110 --> 00:24:03,750
operating systems just leased by the

639
00:23:59,790 --> 00:24:05,970
year the end of the<font color="#CCCCCC"> year and</font><font color="#E5E5E5"> the nice</font>

640
00:24:03,750 --> 00:24:07,800
thing<font color="#CCCCCC"> is is that it's written in c++ and</font>

641
00:24:05,970 --> 00:24:10,050
so you<font color="#E5E5E5"> can just subclass the hypervisor</font>

642
00:24:07,800 --> 00:24:12,090
and then just overwrite whatever

643
00:24:10,050 --> 00:24:13,830
functions you need so if you wanted to

644
00:24:12,090 --> 00:24:15,830
add veep it support something that I had

645
00:24:13,830 --> 00:24:18,389
to figure<font color="#E5E5E5"> out on my</font><font color="#CCCCCC"> own and kind</font><font color="#E5E5E5"> of</font>

646
00:24:15,830 --> 00:24:19,889
struggle through there's actually an

647
00:24:18,390 --> 00:24:22,020
example of how<font color="#E5E5E5"> you could do that it's</font>

648
00:24:19,890 --> 00:24:24,210
less than<font color="#E5E5E5"> 10 lines of code to add veep</font>

649
00:24:22,020 --> 00:24:26,580
it so if i had this tool it would save

650
00:24:24,210 --> 00:24:31,040
me a lot of time<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> want to trap on</font>

651
00:24:26,580 --> 00:24:32,519
certain model specific registers so last

652
00:24:31,040 --> 00:24:34,019
2015 black

653
00:24:32,519 --> 00:24:35,249
they presented an attack for system

654
00:24:34,019 --> 00:24:38,429
management mode called into<font color="#CCCCCC"> the memory</font>

655
00:24:35,249 --> 00:24:40,080
<font color="#E5E5E5">hole</font><font color="#CCCCCC"> Christopher dolmas basically</font>

656
00:24:38,429 --> 00:24:41,639
allowing you to break into system

657
00:24:40,080 --> 00:24:44,609
management mode by writing<font color="#E5E5E5"> to a certain</font>

658
00:24:41,639 --> 00:24:46,049
MSR I wrote a blog post basically saying

659
00:24:44,609 --> 00:24:48,779
that<font color="#E5E5E5"> if you could just use a hypervisor</font>

660
00:24:46,049 --> 00:24:52,080
to block that ms are you would be able

661
00:24:48,779 --> 00:24:53,940
<font color="#E5E5E5">to prevent this unpreventable attack if</font>

662
00:24:52,080 --> 00:24:56,129
you're curious on how to do<font color="#CCCCCC"> that you can</font>

663
00:24:53,940 --> 00:24:58,859
<font color="#E5E5E5">just grab this which is a little bit</font>

664
00:24:56,129 --> 00:25:00,269
<font color="#E5E5E5">longer it's about 25 lines of code and</font>

665
00:24:58,859 --> 00:25:01,978
you'd be able<font color="#CCCCCC"> to use this thin</font>

666
00:25:00,269 --> 00:25:03,839
hypervisor with very little performance

667
00:25:01,979 --> 00:25:05,959
impact and prevent your system from

668
00:25:03,839 --> 00:25:10,139
getting owned by an unfixable

669
00:25:05,959 --> 00:25:12,419
vulnerability<font color="#CCCCCC"> on top</font><font color="#E5E5E5"> of that there's an</font>

670
00:25:10,139 --> 00:25:15,208
abstraction layer called lib vmi so

671
00:25:12,419 --> 00:25:17,219
basically if you are trying<font color="#E5E5E5"> to monitor a</font>

672
00:25:15,209 --> 00:25:20,399
process or do malware analysis where the

673
00:25:17,219 --> 00:25:21,719
malware is very picky about what the

674
00:25:20,399 --> 00:25:23,189
environment it runs in doesn't like

675
00:25:21,719 --> 00:25:26,070
seeing<font color="#E5E5E5"> the buggers it doesn't like</font>

676
00:25:23,190 --> 00:25:29,219
getting touched basically it provides a

677
00:25:26,070 --> 00:25:31,139
really simple user space<font color="#CCCCCC"> API to trace</font>

678
00:25:29,219 --> 00:25:33,029
modify or trap on the execution of

679
00:25:31,139 --> 00:25:35,309
software and another guest so you can

680
00:25:33,029 --> 00:25:37,259
<font color="#E5E5E5">actually set up your analysis vm</font><font color="#CCCCCC"> and</font>

681
00:25:35,309 --> 00:25:38,579
then your target vm and so you can set

682
00:25:37,259 --> 00:25:39,690
that up and kind of clone that however

683
00:25:38,579 --> 00:25:42,418
you<font color="#E5E5E5"> want and then</font><font color="#CCCCCC"> you can do your</font>

684
00:25:39,690 --> 00:25:44,249
<font color="#E5E5E5">analysis from somewhere else it's really</font>

685
00:25:42,419 --> 00:25:46,049
nice and that you<font color="#CCCCCC"> can support all sorts</font>

686
00:25:44,249 --> 00:25:48,450
different hypervisors operating systems

687
00:25:46,049 --> 00:25:50,489
architectures it<font color="#E5E5E5"> integrates with recall</font>

688
00:25:48,450 --> 00:25:52,619
so you can<font color="#CCCCCC"> just basically use</font><font color="#E5E5E5"> windows</font>

689
00:25:50,489 --> 00:25:54,119
symbol tables and<font color="#CCCCCC"> wince into sensible</font>

690
00:25:52,619 --> 00:25:55,978
names it will kind<font color="#E5E5E5"> of find all that</font>

691
00:25:54,119 --> 00:25:57,988
stuff for you<font color="#CCCCCC"> if you're looking for some</font>

692
00:25:55,979 --> 00:26:01,109
use cases we gave it training at

693
00:25:57,989 --> 00:26:03,659
troopers which all the documents and<font color="#E5E5E5"> the</font>

694
00:26:01,109 --> 00:26:05,668
code and<font color="#E5E5E5"> stuff is all up on github and</font>

695
00:26:03,659 --> 00:26:07,709
basically we were able<font color="#E5E5E5"> to do a cracka me</font>

696
00:26:05,669 --> 00:26:09,719
where you have<font color="#E5E5E5"> an another vm a server</font>

697
00:26:07,709 --> 00:26:11,940
<font color="#E5E5E5">that requires a challenge password and</font>

698
00:26:09,719 --> 00:26:13,859
that was drawing from a whole page of

699
00:26:11,940 --> 00:26:15,959
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> that was all randomized and</font><font color="#E5E5E5"> so by</font>

700
00:26:13,859 --> 00:26:18,239
doing the kind of really fast memory

701
00:26:15,959 --> 00:26:19,769
tracing across the vm we were able to

702
00:26:18,239 --> 00:26:21,779
<font color="#E5E5E5">figure out exactly which of those eight</font>

703
00:26:19,769 --> 00:26:23,579
characters of the four thousand or so

704
00:26:21,779 --> 00:26:25,169
we're actually being<font color="#CCCCCC"> used and we were</font>

705
00:26:23,579 --> 00:26:28,339
able<font color="#E5E5E5"> to break that crack me without</font>

706
00:26:25,169 --> 00:26:30,450
actually ever touching that system

707
00:26:28,339 --> 00:26:31,799
simple visor is another example of

708
00:26:30,450 --> 00:26:35,129
something that is pretty<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> out there</font>

709
00:26:31,799 --> 00:26:38,249
basically it is very stripped down it's

710
00:26:35,129 --> 00:26:40,859
done by Alex iOS go from CrowdStrike

711
00:26:38,249 --> 00:26:43,619
<font color="#E5E5E5">it's 10 lines of assembly and then 500</font>

712
00:26:40,859 --> 00:26:46,439
<font color="#CCCCCC">lines of see it can support windows</font>

713
00:26:43,619 --> 00:26:48,600
64-bit if you're trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out</font>

714
00:26:46,440 --> 00:26:50,580
how<font color="#CCCCCC"> vtx actually works and</font><font color="#E5E5E5"> you don't</font>

715
00:26:48,600 --> 00:26:52,379
want<font color="#E5E5E5"> to read the manuals or you've read</font>

716
00:26:50,580 --> 00:26:54,210
them already and<font color="#E5E5E5"> you don't seem to</font>

717
00:26:52,379 --> 00:26:56,699
understand something or it doesn't seem

718
00:26:54,210 --> 00:26:59,789
<font color="#E5E5E5">to make sense this is a self documenting</font>

719
00:26:56,700 --> 00:27:01,620
self proving manual it can load and

720
00:26:59,789 --> 00:27:03,330
unload wall<font color="#CCCCCC"> windows is executing so you</font>

721
00:27:01,620 --> 00:27:05,518
can basically introspect on the host OS

722
00:27:03,330 --> 00:27:07,769
without having to do a whole bunch<font color="#E5E5E5"> of</font>

723
00:27:05,519 --> 00:27:10,710
more complicated VMM configuration or

724
00:27:07,769 --> 00:27:13,669
installing xan etc similar to that is

725
00:27:10,710 --> 00:27:16,200
hyper platform done by<font color="#E5E5E5"> Satoshi tanda and</font>

726
00:27:13,669 --> 00:27:17,639
it's a<font color="#E5E5E5"> little bit more robust and</font>

727
00:27:16,200 --> 00:27:19,799
extensible for<font color="#E5E5E5"> windows specific</font>

728
00:27:17,639 --> 00:27:21,240
virtualization but all this stuff is

729
00:27:19,799 --> 00:27:23,399
kind of going to get<font color="#E5E5E5"> sucked into bear</font>

730
00:27:21,240 --> 00:27:27,330
flank they're all working<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> bare</font>

731
00:27:23,399 --> 00:27:29,219
<font color="#E5E5E5">flank project now if you want to just</font>

732
00:27:27,330 --> 00:27:30,779
play in ring<font color="#CCCCCC"> to basically there are some</font>

733
00:27:29,220 --> 00:27:32,370
skeleton kernel modules out there that

734
00:27:30,779 --> 00:27:34,649
allow you to just kind of hop into

735
00:27:32,370 --> 00:27:36,479
kernel space Linux is a lot easier

736
00:27:34,649 --> 00:27:38,399
<font color="#CCCCCC">because</font><font color="#E5E5E5"> it's you don't need to</font>

737
00:27:36,480 --> 00:27:40,039
necessarily sign the drivers windows 10

738
00:27:38,399 --> 00:27:43,350
we had two talked earlier about windows

739
00:27:40,039 --> 00:27:44,940
signing for for kernel code so you

740
00:27:43,350 --> 00:27:46,439
<font color="#CCCCCC">either sign up by a trust certificate</font>

741
00:27:44,940 --> 00:27:48,629
use one of the hacks they talked<font color="#E5E5E5"> about</font>

742
00:27:46,440 --> 00:27:50,340
in our the talk yesterday or you can

743
00:27:48,629 --> 00:27:53,789
disable signature verification to be

744
00:27:50,340 --> 00:27:56,100
able<font color="#E5E5E5"> to execute if you want to play an</font>

745
00:27:53,789 --> 00:27:57,779
EFI it's<font color="#E5E5E5"> actually really nice compared</font>

746
00:27:56,100 --> 00:27:59,969
to bios because there's a reference

747
00:27:57,779 --> 00:28:01,919
implementation it's open source there's

748
00:27:59,970 --> 00:28:03,299
another<font color="#E5E5E5"> one called canoe efi which</font>

749
00:28:01,919 --> 00:28:06,600
allows you to do development really

750
00:28:03,299 --> 00:28:08,549
easily or if you<font color="#E5E5E5"> want to just introspect</font>

751
00:28:06,600 --> 00:28:10,320
and kind of hook the boot process you

752
00:28:08,549 --> 00:28:13,049
can download the shim loader which was

753
00:28:10,320 --> 00:28:15,779
developed back in the day when<font color="#CCCCCC"> Microsoft</font>

754
00:28:13,049 --> 00:28:17,970
refused to unlock and boot unsigned

755
00:28:15,779 --> 00:28:19,409
stuff and so Linux wouldn't boot shim

756
00:28:17,970 --> 00:28:21,120
was something that Microsoft sign that

757
00:28:19,409 --> 00:28:23,370
allow you<font color="#E5E5E5"> to run other operating systems</font>

758
00:28:21,120 --> 00:28:25,799
but<font color="#E5E5E5"> basically what it does if</font><font color="#CCCCCC"> you look</font>

759
00:28:23,370 --> 00:28:27,658
at<font color="#E5E5E5"> the code it just as a PE application</font>

760
00:28:25,799 --> 00:28:29,730
even<font color="#E5E5E5"> signed and then just hook certain</font>

761
00:28:27,659 --> 00:28:31,830
functions in the boot service table and

762
00:28:29,730 --> 00:28:33,990
then it passes execution something else

763
00:28:31,830 --> 00:28:36,149
with those callbacks registered so it's

764
00:28:33,990 --> 00:28:41,009
very<font color="#CCCCCC"> easy to use</font><font color="#E5E5E5"> that as a platform for</font>

765
00:28:36,149 --> 00:28:43,080
modifying boot process on efi something

766
00:28:41,009 --> 00:28:45,419
else is kind<font color="#E5E5E5"> of my current research is</font>

767
00:28:43,080 --> 00:28:48,299
puff library so physically on cloneable

768
00:28:45,419 --> 00:28:50,549
functions they expose the manufacturing

769
00:28:48,299 --> 00:28:52,980
process kind of evident in ic

770
00:28:50,549 --> 00:28:55,529
development to software for device

771
00:28:52,980 --> 00:28:58,230
specific responses so basically<font color="#CCCCCC"> you can</font>

772
00:28:55,529 --> 00:29:00,280
request and give a challenge and then

773
00:28:58,230 --> 00:29:03,700
you're going to<font color="#E5E5E5"> get a device specific</font>

774
00:29:00,280 --> 00:29:05,290
return and so<font color="#E5E5E5"> that means two pieces of</font>

775
00:29:03,700 --> 00:29:07,270
say memory that roll off the assembly

776
00:29:05,290 --> 00:29:09,060
line right next to<font color="#E5E5E5"> each other will have</font>

777
00:29:07,270 --> 00:29:10,840
very different characteristics

778
00:29:09,060 --> 00:29:12,820
unfortunately the very hardware-specific

779
00:29:10,840 --> 00:29:16,240
they vary with temperature in<font color="#CCCCCC"> Hardware</font>

780
00:29:12,820 --> 00:29:18,010
age thus far has been mostly academic

781
00:29:16,240 --> 00:29:19,450
research and very little source code or

782
00:29:18,010 --> 00:29:22,210
<font color="#CCCCCC">non-commercial projects have been</font>

783
00:29:19,450 --> 00:29:24,180
published<font color="#E5E5E5"> so we basically have an</font>

784
00:29:22,210 --> 00:29:26,200
abstraction layer error correction and

785
00:29:24,180 --> 00:29:30,790
we're trying<font color="#E5E5E5"> to get a paper published</font>

786
00:29:26,200 --> 00:29:32,380
next week basically for<font color="#CCCCCC"> a ubiquitous</font>

787
00:29:30,790 --> 00:29:33,940
source of puffs that is available<font color="#E5E5E5"> and</font>

788
00:29:32,380 --> 00:29:36,190
accessible through software and most

789
00:29:33,940 --> 00:29:38,410
every system most every laptop basically

790
00:29:36,190 --> 00:29:40,630
and it provides a<font color="#E5E5E5"> very simple seal and</font>

791
00:29:38,410 --> 00:29:42,760
unseal API so you can lock data to a

792
00:29:40,630 --> 00:29:44,260
specific platform so if<font color="#E5E5E5"> you have you're</font>

793
00:29:42,760 --> 00:29:45,790
doing a red team<font color="#CCCCCC"> and you want to lock up</font>

794
00:29:44,260 --> 00:29:47,410
some data or you have a piece of

795
00:29:45,790 --> 00:29:50,230
ransomware and you want to tie it to

796
00:29:47,410 --> 00:29:51,730
only I mean hypothetically you wanted to

797
00:29:50,230 --> 00:29:53,350
tie it to<font color="#E5E5E5"> only that platform you can</font>

798
00:29:51,730 --> 00:29:54,700
<font color="#E5E5E5">actually do it so that even if someone</font>

799
00:29:53,350 --> 00:29:56,260
were<font color="#E5E5E5"> to grab that they would</font><font color="#CCCCCC"> be unable</font>

800
00:29:54,700 --> 00:29:58,860
to<font color="#E5E5E5"> recover those keys unless they were</font>

801
00:29:56,260 --> 00:30:00,790
executing on the exact same system I

802
00:29:58,860 --> 00:30:04,689
have no<font color="#E5E5E5"> idea how we're doing that in</font>

803
00:30:00,790 --> 00:30:08,649
time but like getting close<font color="#CCCCCC"> to being</font>

804
00:30:04,690 --> 00:30:10,870
<font color="#CCCCCC">done so the goal of this project was</font>

805
00:30:08,650 --> 00:30:14,380
once you have a research question that

806
00:30:10,870 --> 00:30:16,090
requires something further down I wanted

807
00:30:14,380 --> 00:30:17,770
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make it really</font><font color="#CCCCCC"> easy for people to</font>

808
00:30:16,090 --> 00:30:19,449
hopefully figure out what features you

809
00:30:17,770 --> 00:30:21,670
need on the platform or what features

810
00:30:19,450 --> 00:30:23,260
are even available on the platform how

811
00:30:21,670 --> 00:30:25,240
you can get<font color="#CCCCCC"> access them very quickly</font>

812
00:30:23,260 --> 00:30:27,040
there's a lot<font color="#CCCCCC"> of really interesting</font>

813
00:30:25,240 --> 00:30:28,750
research projects in this space and

814
00:30:27,040 --> 00:30:30,340
there are so many more tools now that I

815
00:30:28,750 --> 00:30:34,180
<font color="#E5E5E5">just didn't want to see</font><font color="#CCCCCC"> that constant</font>

816
00:30:30,340 --> 00:30:36,129
reduplication of effort both IRC and

817
00:30:34,180 --> 00:30:39,130
<font color="#E5E5E5">Twitter is a good resource for getting</font>

818
00:30:36,130 --> 00:30:41,830
perspective and asking<font color="#CCCCCC"> questions the</font>

819
00:30:39,130 --> 00:30:43,870
bear flank specifically that has like

820
00:30:41,830 --> 00:30:45,730
all of the hypervisor developers are

821
00:30:43,870 --> 00:30:47,649
just constantly emailing ridiculous

822
00:30:45,730 --> 00:30:49,900
questions to each other so you're happy

823
00:30:47,650 --> 00:30:52,540
<font color="#E5E5E5">to jump in there so hopefully this</font>

824
00:30:49,900 --> 00:30:54,370
helped share my experiences because I

825
00:30:52,540 --> 00:30:56,680
made a lot of mistakes in<font color="#E5E5E5"> the past and</font>

826
00:30:54,370 --> 00:30:59,620
hopefully you<font color="#E5E5E5"> guys don't make those same</font>

827
00:30:56,680 --> 00:31:02,320
mistakes and don't email me with silly

828
00:30:59,620 --> 00:31:05,679
questions in the future so thank you all

829
00:31:02,320 --> 00:31:08,409
very much for<font color="#E5E5E5"> listening my friend Thomas</font>

830
00:31:05,680 --> 00:31:10,960
he<font color="#CCCCCC"> use watching a live feed and it</font>

831
00:31:08,410 --> 00:31:13,340
really improved his life so please<font color="#E5E5E5"> don't</font>

832
00:31:10,960 --> 00:31:15,110
hesitate to reach<font color="#E5E5E5"> out on</font><font color="#CCCCCC"> Twitter or</font>

833
00:31:13,340 --> 00:31:18,790
in<font color="#E5E5E5"> person i'll be here the rest of</font>

834
00:31:15,110 --> 00:31:18,790
conference so thank you any questions

835
00:31:23,500 --> 00:31:30,440
cool all<font color="#CCCCCC"> right ask some questions to</font>

836
00:31:29,030 --> 00:31:34,430
show that you could follow along I'll

837
00:31:30,440 --> 00:31:44,240
admit<font color="#CCCCCC"> I I didn't understand but I'm not</font>

838
00:31:34,430 --> 00:31:45,830
that technical questions well you can

839
00:31:44,240 --> 00:31:47,630
grab Jacob in<font color="#E5E5E5"> the bar later he'll be</font>

840
00:31:45,830 --> 00:31:50,090
there having a beer so and then

841
00:31:47,630 --> 00:31:51,620
<font color="#E5E5E5">PowerPoint karaoke and at the PowerPoint</font>

842
00:31:50,090 --> 00:31:56,000
KROQ probably want to talk to<font color="#E5E5E5"> him before</font>

843
00:31:51,620 --> 00:32:00,100
that alright thanks a lot Jacob and see

844
00:31:56,000 --> 00:32:00,100
you later for kuroki<font color="#CCCCCC"> all right sign up</font>

