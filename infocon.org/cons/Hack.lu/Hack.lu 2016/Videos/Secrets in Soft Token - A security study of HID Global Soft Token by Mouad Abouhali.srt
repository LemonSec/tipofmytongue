1
00:00:02,530 --> 00:00:16,390
let's give him a hand and good luck what

2
00:00:04,500 --> 00:00:18,369
thank you hi everybody<font color="#CCCCCC"> all right so how</font>

3
00:00:16,390 --> 00:00:21,010
are<font color="#CCCCCC"> you</font><font color="#E5E5E5"> I'm very glad to be here today</font>

4
00:00:18,369 --> 00:00:25,000
<font color="#E5E5E5">to share with you all the</font><font color="#CCCCCC"> findings that</font>

5
00:00:21,010 --> 00:00:28,390
we came across with my team when<font color="#E5E5E5"> we</font>

6
00:00:25,000 --> 00:00:32,980
started analyzing the hid two-factor

7
00:00:28,390 --> 00:00:35,559
application yeah so I<font color="#CCCCCC"> think now it's</font>

8
00:00:32,980 --> 00:00:38,949
three months ago<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> decided to go</font>

9
00:00:35,559 --> 00:00:41,409
for<font color="#CCCCCC"> this security analysis so yeah I'm</font>

10
00:00:38,949 --> 00:00:45,269
particularly excited to show you today

11
00:00:41,409 --> 00:00:47,859
all the interesting stuff<font color="#E5E5E5"> that are</font>

12
00:00:45,269 --> 00:00:52,420
implemented inside this type of

13
00:00:47,859 --> 00:00:56,170
application so for that I'm going to

14
00:00:52,420 --> 00:00:59,829
<font color="#CCCCCC">follow the DISA genda there is mainly</font>

15
00:00:56,170 --> 00:01:02,859
for parts the three first one are he

16
00:00:59,829 --> 00:01:05,349
just lay the ground for the last one

17
00:01:02,859 --> 00:01:09,009
because the interesting as you can get

18
00:01:05,349 --> 00:01:12,929
here the<font color="#E5E5E5"> interesting points are in the</font>

19
00:01:09,009 --> 00:01:16,540
last one so<font color="#E5E5E5"> before that I hope</font><font color="#CCCCCC"> to</font>

20
00:01:12,930 --> 00:01:19,000
present you some some some key points

21
00:01:16,540 --> 00:01:22,180
that will help you to understand all the

22
00:01:19,000 --> 00:01:25,810
overview of<font color="#E5E5E5"> the analysis so the first</font>

23
00:01:22,180 --> 00:01:28,360
part consists mainly in introducing the

24
00:01:25,810 --> 00:01:31,509
application how we test how does it work

25
00:01:28,360 --> 00:01:33,310
which<font color="#E5E5E5"> is the infrastructure that</font><font color="#CCCCCC"> is</font>

26
00:01:31,509 --> 00:01:35,649
generally<font color="#CCCCCC"> used to implement this kind of</font>

27
00:01:33,310 --> 00:01:38,079
application then I'll move to<font color="#CCCCCC"> the</font>

28
00:01:35,649 --> 00:01:42,700
overall methodology that I followed all

29
00:01:38,079 --> 00:01:47,530
over the analysis two together the the

30
00:01:42,700 --> 00:01:50,439
information<font color="#E5E5E5"> form for this analysis and I</font>

31
00:01:47,530 --> 00:01:53,950
think this<font color="#CCCCCC"> is also an interesting one I</font>

32
00:01:50,439 --> 00:01:56,229
will just<font color="#CCCCCC"> show you all the security</font>

33
00:01:53,950 --> 00:01:58,630
mechanisms that were deployed by the

34
00:01:56,229 --> 00:02:00,939
application to protect yourself<font color="#E5E5E5"> it's</font>

35
00:01:58,630 --> 00:02:03,670
very interesting here to see how this

36
00:02:00,939 --> 00:02:08,500
kind<font color="#E5E5E5"> of application are protecting let's</font>

37
00:02:03,670 --> 00:02:11,800
say their intellectual property<font color="#E5E5E5"> oh the</font>

38
00:02:08,500 --> 00:02:14,560
first<font color="#E5E5E5"> part I think everybody</font><font color="#CCCCCC"> here is</font>

39
00:02:11,800 --> 00:02:16,150
very<font color="#CCCCCC"> familiar with</font><font color="#E5E5E5"> the hardware token so</font>

40
00:02:14,560 --> 00:02:19,120
I<font color="#E5E5E5"> guess that's</font>

41
00:02:16,150 --> 00:02:22,090
at least one of<font color="#E5E5E5"> you are using this kind</font>

42
00:02:19,120 --> 00:02:25,030
<font color="#E5E5E5">of</font><font color="#CCCCCC"> application so here you have a</font>

43
00:02:22,090 --> 00:02:29,010
hardware token but the an end user is

44
00:02:25,030 --> 00:02:32,769
using to generate<font color="#E5E5E5"> a one-time password so</font>

45
00:02:29,010 --> 00:02:36,879
this is embedded in a hardware<font color="#E5E5E5"> device so</font>

46
00:02:32,769 --> 00:02:38,950
yeah we can till now understand how

47
00:02:36,879 --> 00:02:41,560
things are implemented behind the scene

48
00:02:38,950 --> 00:02:44,379
but yeah the user here just getting<font color="#E5E5E5"> a</font>

49
00:02:41,560 --> 00:02:47,530
one-time password and send it with its

50
00:02:44,379 --> 00:02:49,510
login and password to the VPN gateway or

51
00:02:47,530 --> 00:02:51,159
whatever you want something that will

52
00:02:49,510 --> 00:02:53,500
educate you against<font color="#CCCCCC"> a remote</font>

53
00:02:51,159 --> 00:02:55,690
infrastructure and the<font color="#CCCCCC"> idea there is to</font>

54
00:02:53,500 --> 00:02:58,750
have an access to your internal network

55
00:02:55,690 --> 00:03:02,530
so now<font color="#E5E5E5"> take the hardware part and</font>

56
00:02:58,750 --> 00:03:05,409
replace it with a software part for our

57
00:03:02,530 --> 00:03:09,909
case we are talking<font color="#CCCCCC"> about each ad hid</font>

58
00:03:05,409 --> 00:03:12,189
logo that you<font color="#E5E5E5"> can see here each time so</font>

59
00:03:09,909 --> 00:03:15,700
that the end user<font color="#E5E5E5"> here is going</font><font color="#CCCCCC"> to use a</font>

60
00:03:12,189 --> 00:03:19,138
mobile phone as a device to authenticate

61
00:03:15,700 --> 00:03:22,298
himself against an authentication

62
00:03:19,139 --> 00:03:24,699
gateway so the application<font color="#E5E5E5"> will be a</font>

63
00:03:22,299 --> 00:03:27,510
start on a mobile device here which I ed

64
00:03:24,699 --> 00:03:30,609
can be installed on different flavors as

65
00:03:27,510 --> 00:03:34,840
Windows Phone blackberry iphone and

66
00:03:30,609 --> 00:03:36,400
android OS again here then user just

67
00:03:34,840 --> 00:03:43,000
<font color="#CCCCCC">grab a one-time password from the</font>

68
00:03:36,400 --> 00:03:45,579
application so the hid pop-ups<font color="#E5E5E5"> pop-ups</font>

69
00:03:43,000 --> 00:03:47,560
<font color="#E5E5E5">and information here that you can see</font>

70
00:03:45,579 --> 00:03:49,209
<font color="#CCCCCC">and the end user</font><font color="#E5E5E5"> can get the one-time</font>

71
00:03:47,560 --> 00:03:53,440
password and send it again with his

72
00:03:49,209 --> 00:03:59,319
login and password to the VPN gateway as

73
00:03:53,440 --> 00:04:01,810
<font color="#E5E5E5">I show here so for</font><font color="#CCCCCC"> our study as i</font>

74
00:03:59,319 --> 00:04:03,849
previously show here there is many

75
00:04:01,810 --> 00:04:06,790
flavor of the application for our study

76
00:04:03,849 --> 00:04:10,179
we decide to focus only on the<font color="#E5E5E5"> endroit</font>

77
00:04:06,790 --> 00:04:12,790
<font color="#CCCCCC">one but i</font><font color="#E5E5E5"> but i am telling you also that</font>

78
00:04:10,180 --> 00:04:15,129
we<font color="#E5E5E5"> decided after to go for the other</font>

79
00:04:12,790 --> 00:04:17,589
operating system just to compare the

80
00:04:15,129 --> 00:04:20,849
result that<font color="#E5E5E5"> we obtain that you rena our</font>

81
00:04:17,589 --> 00:04:25,659
analysis regarding the android<font color="#CCCCCC"> version</font>

82
00:04:20,849 --> 00:04:27,460
yeah and as you know the on Royd market

83
00:04:25,659 --> 00:04:29,169
is the only market that offers the

84
00:04:27,460 --> 00:04:30,070
possibility to get rapidly and

85
00:04:29,169 --> 00:04:32,289
efficiently

86
00:04:30,070 --> 00:04:34,900
application package as the<font color="#E5E5E5"> opposite of</font>

87
00:04:32,290 --> 00:04:37,660
the other source if you one<font color="#CCCCCC"> day decided</font>

88
00:04:34,900 --> 00:04:39,640
to<font color="#E5E5E5"> go to for a microsoft</font><font color="#CCCCCC"> store to grab</font>

89
00:04:37,660 --> 00:04:43,570
an application it's not that easy as you

90
00:04:39,640 --> 00:04:47,200
can think yeah so we decided<font color="#E5E5E5"> to go for</font>

91
00:04:43,570 --> 00:04:50,650
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Android version the main risk that</font>

92
00:04:47,200 --> 00:04:53,740
we wanted to assess here was to<font color="#CCCCCC"> check if</font>

93
00:04:50,650 --> 00:04:59,560
an attacker who had who has the ability

94
00:04:53,740 --> 00:05:02,940
to<font color="#CCCCCC"> go and steal the device to assess the</font>

95
00:04:59,560 --> 00:05:06,130
risk if the<font color="#E5E5E5"> attacker is able then to</font>

96
00:05:02,940 --> 00:05:08,080
stole all the configuration files that

97
00:05:06,130 --> 00:05:11,500
belong to the<font color="#E5E5E5"> application and replay</font>

98
00:05:08,080 --> 00:05:13,270
them without<font color="#CCCCCC"> having any secrets so that</font>

99
00:05:11,500 --> 00:05:17,170
was the major risk that we wanted<font color="#E5E5E5"> to</font>

100
00:05:13,270 --> 00:05:19,390
assess and consequently we wanted also

101
00:05:17,170 --> 00:05:22,110
to know how don't you<font color="#E5E5E5"> have the</font>

102
00:05:19,390 --> 00:05:25,300
application protects itself against all

103
00:05:22,110 --> 00:05:27,880
reverse-engineer mechanism how the whole

104
00:05:25,300 --> 00:05:31,990
application identifies itself that is

105
00:05:27,880 --> 00:05:35,219
that it is<font color="#E5E5E5"> running under root root of</font>

106
00:05:31,990 --> 00:05:38,320
<font color="#CCCCCC">devices and so on so that is our</font><font color="#E5E5E5"> main</font>

107
00:05:35,220 --> 00:05:40,810
objectives but<font color="#E5E5E5"> before that all i want to</font>

108
00:05:38,320 --> 00:05:43,810
show you now<font color="#CCCCCC"> it just</font><font color="#E5E5E5"> a brief quick</font>

109
00:05:40,810 --> 00:05:46,990
overview on<font color="#CCCCCC"> how the application</font><font color="#E5E5E5"> is used</font>

110
00:05:43,810 --> 00:05:49,900
on a daily basis on real life so once

111
00:05:46,990 --> 00:05:53,320
the user grab the application<font color="#CCCCCC"> as tallied</font>

112
00:05:49,900 --> 00:05:56,650
on its mobile device and our case on

113
00:05:53,320 --> 00:06:02,980
droid one he has to start it for the

114
00:05:56,650 --> 00:06:06,700
<font color="#E5E5E5">first</font><font color="#CCCCCC"> time the application should talk</font>

115
00:06:02,980 --> 00:06:09,190
with a second part the<font color="#E5E5E5"> second part here</font>

116
00:06:06,700 --> 00:06:12,310
is the smart token management portal so

117
00:06:09,190 --> 00:06:16,300
this component can it comes into<font color="#E5E5E5"> play to</font>

118
00:06:12,310 --> 00:06:20,230
<font color="#E5E5E5">ensure the enrollment process so the</font>

119
00:06:16,300 --> 00:06:21,910
user for the first time get a serial

120
00:06:20,230 --> 00:06:25,540
number that the application generates

121
00:06:21,910 --> 00:06:29,080
for the during the first execution the

122
00:06:25,540 --> 00:06:31,150
user as you can get here manually has to

123
00:06:29,080 --> 00:06:34,479
achieve all the<font color="#CCCCCC"> inner one process so he</font>

124
00:06:31,150 --> 00:06:37,299
takes the Syrian number and send it to

125
00:06:34,480 --> 00:06:39,790
<font color="#CCCCCC">the</font><font color="#E5E5E5"> management portal the management</font>

126
00:06:37,300 --> 00:06:42,700
portal then generates an activation code

127
00:06:39,790 --> 00:06:44,430
and the user again get this activation

128
00:06:42,700 --> 00:06:47,250
code and

129
00:06:44,430 --> 00:06:51,210
submitted to<font color="#E5E5E5"> the application and finally</font>

130
00:06:47,250 --> 00:06:54,090
the user get a<font color="#CCCCCC"> register a registration</font>

131
00:06:51,210 --> 00:06:55,859
code that he has to send to the final

132
00:06:54,090 --> 00:06:57,929
application to terminate all the

133
00:06:55,860 --> 00:06:59,940
allurement process as you can see here

134
00:06:57,930 --> 00:07:01,350
there<font color="#E5E5E5"> is no internet or network</font>

135
00:06:59,940 --> 00:07:07,580
connection between the two components

136
00:07:01,350 --> 00:07:11,040
<font color="#E5E5E5">all the stuff is carried out manually so</font>

137
00:07:07,580 --> 00:07:14,250
when we started our analysis we the

138
00:07:11,040 --> 00:07:16,560
first thing<font color="#CCCCCC"> that we we start to begin in</font>

139
00:07:14,250 --> 00:07:19,110
it so it<font color="#E5E5E5"> was a study in the let's say</font>

140
00:07:16,560 --> 00:07:21,870
the security mechanism that the von der

141
00:07:19,110 --> 00:07:26,090
itself promotes during in hit<font color="#CCCCCC"> in its</font>

142
00:07:21,870 --> 00:07:29,940
communication documents and here is some

143
00:07:26,090 --> 00:07:32,190
security means that normally are

144
00:07:29,940 --> 00:07:34,770
deployed and implemented into the

145
00:07:32,190 --> 00:07:38,670
application but for<font color="#E5E5E5"> us which</font><font color="#CCCCCC"> is the most</font>

146
00:07:34,770 --> 00:07:41,520
<font color="#CCCCCC">interesting is the</font><font color="#E5E5E5"> the first one so it</font>

147
00:07:38,670 --> 00:07:43,890
appears<font color="#CCCCCC"> that the application has some</font>

148
00:07:41,520 --> 00:07:48,049
several mechanism against<font color="#E5E5E5"> reverse</font>

149
00:07:43,890 --> 00:07:50,969
engineering so they deployed all

150
00:07:48,050 --> 00:07:53,280
education techniques and symbols

151
00:07:50,970 --> 00:07:56,010
<font color="#E5E5E5">tripping to remove all the information</font>

152
00:07:53,280 --> 00:07:58,650
that can attacker<font color="#CCCCCC"> grab</font><font color="#E5E5E5"> urinates analysis</font>

153
00:07:56,010 --> 00:08:02,520
so when we see something like this we

154
00:07:58,650 --> 00:08:04,679
prepare ourself psychologically to to to

155
00:08:02,520 --> 00:08:05,880
deal with this kind of application and

156
00:08:04,680 --> 00:08:09,720
the second point<font color="#E5E5E5"> that I want to</font>

157
00:08:05,880 --> 00:08:11,969
underline here is a other means so

158
00:08:09,720 --> 00:08:14,880
normally<font color="#E5E5E5"> the application should not work</font>

159
00:08:11,970 --> 00:08:18,240
under a jailbroken or a rooted device so

160
00:08:14,880 --> 00:08:20,640
that the first observation unfortunately

161
00:08:18,240 --> 00:08:22,140
when we started our analysis the first

162
00:08:20,640 --> 00:08:26,370
step simply failed because the

163
00:08:22,140 --> 00:08:30,330
application run normally under an on

164
00:08:26,370 --> 00:08:33,980
droid emulator for instance we carry on

165
00:08:30,330 --> 00:08:36,689
our middleware our agenda so here I just

166
00:08:33,980 --> 00:08:38,760
<font color="#E5E5E5">representing the global methodology that</font>

167
00:08:36,690 --> 00:08:42,720
I<font color="#CCCCCC"> followed during the analysis nothing</font>

168
00:08:38,760 --> 00:08:45,569
new here so<font color="#E5E5E5"> 22 main component two main</font>

169
00:08:42,720 --> 00:08:49,230
phases I can I go back<font color="#E5E5E5"> and forth between</font>

170
00:08:45,570 --> 00:08:53,400
two two main techniques code analysis so

171
00:08:49,230 --> 00:08:55,860
here<font color="#E5E5E5"> I mainly used Ida pro for reading</font>

172
00:08:53,400 --> 00:08:57,480
the java bytecode and for the<font color="#E5E5E5"> begin the</font>

173
00:08:55,860 --> 00:09:00,060
java bytecode

174
00:08:57,480 --> 00:09:02,490
but as you know there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> plethora of</font>

175
00:09:00,060 --> 00:09:05,880
tools<font color="#E5E5E5"> that you can use for this kind of</font>

176
00:09:02,490 --> 00:09:07,889
techniques and<font color="#E5E5E5"> the second technique is</font>

177
00:09:05,880 --> 00:09:09,899
the<font color="#E5E5E5"> Behavioral Analysis so the idea here</font>

178
00:09:07,889 --> 00:09:11,670
just to run the application and grab all

179
00:09:09,899 --> 00:09:13,980
the logs and the<font color="#E5E5E5"> information that the</font>

180
00:09:11,670 --> 00:09:16,439
application can generate and there are

181
00:09:13,980 --> 00:09:20,130
an emulator for instance here and try to

182
00:09:16,440 --> 00:09:22,470
analyze all these all these logs so the

183
00:09:20,130 --> 00:09:24,930
main result that we should mention here

184
00:09:22,470 --> 00:09:28,709
is that firstly the application creates

185
00:09:24,930 --> 00:09:32,630
<font color="#E5E5E5">two configuration files the OTP token</font>

186
00:09:28,709 --> 00:09:35,599
device on the OTP token status and

187
00:09:32,630 --> 00:09:39,779
massively use a crypto functions

188
00:09:35,600 --> 00:09:43,560
especially EAS operations this result

189
00:09:39,779 --> 00:09:46,560
was obtained by<font color="#CCCCCC"> roy box dynamic analysis</font>

190
00:09:43,560 --> 00:09:49,170
tools so yeah from here when we came

191
00:09:46,560 --> 00:09:52,768
across this observation we stopped and

192
00:09:49,170 --> 00:09:54,209
we told our our customer that yeah

193
00:09:52,769 --> 00:09:56,760
indeed there is a problem<font color="#CCCCCC"> with this</font>

194
00:09:54,209 --> 00:10:00,300
application because it uses all you'll

195
00:09:56,760 --> 00:10:03,149
always the same encryption key for its

196
00:10:00,300 --> 00:10:05,040
us operations and whatever the package

197
00:10:03,149 --> 00:10:08,130
we downloaded from the market store we

198
00:10:05,040 --> 00:10:10,829
always found these keys so<font color="#E5E5E5"> we stopped</font>

199
00:10:08,130 --> 00:10:14,010
here and yeah we decided to go deeper

200
00:10:10,829 --> 00:10:17,339
<font color="#CCCCCC">and further into this analysis so we</font>

201
00:10:14,010 --> 00:10:21,420
opened<font color="#E5E5E5"> the box and</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> thing we we</font>

202
00:10:17,339 --> 00:10:23,819
face it up was the<font color="#E5E5E5"> security mechanism</font>

203
00:10:21,420 --> 00:10:26,250
that was used by<font color="#E5E5E5"> application to protect</font>

204
00:10:23,819 --> 00:10:30,000
yourself<font color="#E5E5E5"> the first one the first</font>

205
00:10:26,250 --> 00:10:32,279
mechanism it was the name<font color="#CCCCCC"> of fist</font>

206
00:10:30,000 --> 00:10:34,529
occasion so it's a simple mechanism but

207
00:10:32,279 --> 00:10:38,339
it can be very very hard for an ally

208
00:10:34,529 --> 00:10:40,980
list and an analyst to to get at you to

209
00:10:38,339 --> 00:10:43,290
deal with this<font color="#E5E5E5"> kind of techniques the</font>

210
00:10:40,980 --> 00:10:46,230
idea is very simple here we<font color="#E5E5E5"> just replace</font>

211
00:10:43,290 --> 00:10:49,949
all the meaningful information that can

212
00:10:46,230 --> 00:10:53,580
be embedded into<font color="#E5E5E5"> the application by</font>

213
00:10:49,950 --> 00:10:55,770
by a non minute mineral full names as

214
00:10:53,580 --> 00:10:59,190
you can<font color="#E5E5E5"> see here and why not using</font>

215
00:10:55,770 --> 00:11:01,470
Unicode<font color="#E5E5E5"> character so reading this kind</font>

216
00:10:59,190 --> 00:11:07,650
of code I can assure you<font color="#CCCCCC"> that is very</font>

217
00:11:01,470 --> 00:11:11,390
<font color="#CCCCCC">very hard yeah and the</font><font color="#E5E5E5"> idea here is my</font>

218
00:11:07,650 --> 00:11:14,790
main work consisted in translating these

219
00:11:11,390 --> 00:11:18,510
these names into something that<font color="#E5E5E5"> has has</font>

220
00:11:14,790 --> 00:11:20,760
meaning inside it so yeah so I refactor

221
00:11:18,510 --> 00:11:23,480
it all the code to have something<font color="#CCCCCC"> like</font>

222
00:11:20,760 --> 00:11:26,040
<font color="#CCCCCC">this so that was the first mechanism</font>

223
00:11:23,480 --> 00:11:29,010
then it comes as a string of fist

224
00:11:26,040 --> 00:11:31,199
occasion a simple simple thing<font color="#E5E5E5"> also here</font>

225
00:11:29,010 --> 00:11:34,800
nothing in you the<font color="#CCCCCC"> application try to</font>

226
00:11:31,200 --> 00:11:39,000
protect<font color="#CCCCCC"> yourself by by hiding all its</font>

227
00:11:34,800 --> 00:11:41,640
strings actually when<font color="#CCCCCC"> we started looking</font>

228
00:11:39,000 --> 00:11:43,860
for some specials rings are those that

229
00:11:41,640 --> 00:11:47,520
are<font color="#E5E5E5"> related to do a application</font>

230
00:11:43,860 --> 00:11:49,680
<font color="#E5E5E5">configuration file as here the UTP token</font>

231
00:11:47,520 --> 00:11:52,470
device we didn't find them in the

232
00:11:49,680 --> 00:11:54,030
application and yeah we we started

233
00:11:52,470 --> 00:11:56,610
guessing that there is a kind<font color="#E5E5E5"> of</font>

234
00:11:54,030 --> 00:11:59,550
mechanism of this kind<font color="#E5E5E5"> of magazine was</font>

235
00:11:56,610 --> 00:12:02,340
really implemented by<font color="#E5E5E5"> the application at</font>

236
00:11:59,550 --> 00:12:04,109
the opposite when we started filtering

237
00:12:02,340 --> 00:12:06,900
all the strings that were ever in the

238
00:12:04,110 --> 00:12:12,770
application we came across some

239
00:12:06,900 --> 00:12:16,470
interesting ones those ones that<font color="#CCCCCC"> are</font>

240
00:12:12,770 --> 00:12:20,910
strings that revealed the use of some

241
00:12:16,470 --> 00:12:22,950
cute cryptographic functions and by by

242
00:12:20,910 --> 00:12:26,010
digging into internet and by comparing

243
00:12:22,950 --> 00:12:29,310
<font color="#E5E5E5">the code we were we found out</font><font color="#CCCCCC"> that it</font>

244
00:12:26,010 --> 00:12:31,590
<font color="#CCCCCC">was a punchy cancel library that we was</font>

245
00:12:29,310 --> 00:12:36,569
used by the<font color="#E5E5E5"> application and that helped</font>

246
00:12:31,590 --> 00:12:41,100
us to refactor a big<font color="#E5E5E5"> a big part of the</font>

247
00:12:36,570 --> 00:12:44,430
application yeah to<font color="#CCCCCC"> mitigate this kind</font>

248
00:12:41,100 --> 00:12:46,860
of techniques nothing new also here just

249
00:12:44,430 --> 00:12:49,130
we have we spotted the function<font color="#CCCCCC"> that was</font>

250
00:12:46,860 --> 00:12:53,190
in charge to decrypt all the strings

251
00:12:49,130 --> 00:12:55,980
we're out we wrote an IDC script<font color="#CCCCCC"> i under</font>

252
00:12:53,190 --> 00:12:58,800
either who grabs all the output of<font color="#E5E5E5"> these</font>

253
00:12:55,980 --> 00:13:01,770
scripts so here as you can see at your

254
00:12:58,800 --> 00:13:03,410
right on your<font color="#E5E5E5"> right you can see all</font><font color="#CCCCCC"> the</font>

255
00:13:01,770 --> 00:13:05,810
strings that we can

256
00:13:03,410 --> 00:13:08,589
that we were able<font color="#E5E5E5"> to grab during a</font>

257
00:13:05,810 --> 00:13:11,479
simple execution of the application and

258
00:13:08,589 --> 00:13:14,029
here we were really bit happy because we

259
00:13:11,480 --> 00:13:15,769
saw<font color="#E5E5E5"> something in with so new things that</font>

260
00:13:14,029 --> 00:13:18,410
<font color="#E5E5E5">were interesting interesting for us</font>

261
00:13:15,769 --> 00:13:21,079
especially the use of the standard<font color="#CCCCCC"> Java</font>

262
00:13:18,410 --> 00:13:23,410
<font color="#CCCCCC">API so here we</font><font color="#E5E5E5"> we are sure that we can</font>

263
00:13:21,079 --> 00:13:26,420
break somewhere to get more information

264
00:13:23,410 --> 00:13:29,360
that was<font color="#E5E5E5"> the second main the third one</font>

265
00:13:26,420 --> 00:13:32,870
was the<font color="#E5E5E5"> java reflection another layer of</font>

266
00:13:29,360 --> 00:13:36,139
a fist<font color="#CCCCCC"> occation this one yeah when you</font>

267
00:13:32,870 --> 00:13:37,850
wake up you you you you come across this

268
00:13:36,139 --> 00:13:40,970
one easily when you start reading<font color="#E5E5E5"> the</font>

269
00:13:37,850 --> 00:13:44,600
code each<font color="#E5E5E5"> time</font><font color="#CCCCCC"> you try to follow a call</font>

270
00:13:40,970 --> 00:13:47,300
of a function you just you have a wall

271
00:13:44,600 --> 00:13:49,579
front of you because instead of using

272
00:13:47,300 --> 00:13:53,269
just a direct<font color="#E5E5E5"> call the application is</font>

273
00:13:49,579 --> 00:13:56,300
using three call to to call<font color="#CCCCCC"> one or two</font>

274
00:13:53,269 --> 00:13:58,370
to achieve one application and yeah so

275
00:13:56,300 --> 00:14:00,199
the java reflection techniques is just

276
00:13:58,370 --> 00:14:03,889
the property of<font color="#E5E5E5"> a class to inspect</font>

277
00:14:00,199 --> 00:14:06,649
itself and to have the<font color="#CCCCCC"> ability to call a</font>

278
00:14:03,889 --> 00:14:09,199
method or automotive I an attribute of

279
00:14:06,649 --> 00:14:13,250
this class but by inspecting itself and

280
00:14:09,199 --> 00:14:15,889
generally we use a 3 3<font color="#CCCCCC"> EP is for</font><font color="#E5E5E5"> name</font>

281
00:14:13,250 --> 00:14:18,620
get metal and invoke EP is to implement

282
00:14:15,889 --> 00:14:22,730
this kind of techniques so here<font color="#E5E5E5"> are the</font>

283
00:14:18,620 --> 00:14:24,620
mitigations yeah no real mitigation just

284
00:14:22,730 --> 00:14:27,110
using I'd approach to spot this kind of

285
00:14:24,620 --> 00:14:30,259
techniques and dill and we live with

286
00:14:27,110 --> 00:14:34,459
that and during the analysis we spotted

287
00:14:30,259 --> 00:14:37,399
all the<font color="#E5E5E5"> the meaning of each function and</font>

288
00:14:34,459 --> 00:14:40,729
we refactor we rename or each function

289
00:14:37,399 --> 00:14:43,279
and finally yeah the most interest

290
00:14:40,730 --> 00:14:46,660
interesting one was the class encryption

291
00:14:43,279 --> 00:14:51,110
mechanism so the application actually

292
00:14:46,660 --> 00:14:53,870
embedded itself to airway to bite

293
00:14:51,110 --> 00:14:56,870
<font color="#CCCCCC">airways</font><font color="#E5E5E5"> that's that corresponded to the</font>

294
00:14:53,870 --> 00:14:59,750
real functional application so when you

295
00:14:56,870 --> 00:15:01,160
start reading<font color="#E5E5E5"> the let's say the</font><font color="#CCCCCC"> android</font>

296
00:14:59,750 --> 00:15:03,050
application the code of the<font color="#E5E5E5"> android</font>

297
00:15:01,160 --> 00:15:05,750
application there is nothing interesting

298
00:15:03,050 --> 00:15:08,649
in that portion of code but when you

299
00:15:05,750 --> 00:15:12,160
when you<font color="#E5E5E5"> arrive at this</font><font color="#CCCCCC"> level of</font>

300
00:15:08,649 --> 00:15:14,660
mechanism you start<font color="#CCCCCC"> and understanding</font>

301
00:15:12,160 --> 00:15:16,309
the things that are behind<font color="#E5E5E5"> the scene</font>

302
00:15:14,660 --> 00:15:17,209
<font color="#E5E5E5">because the application start to decrypt</font>

303
00:15:16,309 --> 00:15:19,490
a part of the

304
00:15:17,209 --> 00:15:22,998
<font color="#CCCCCC">vacation and this part corresponds to</font>

305
00:15:19,490 --> 00:15:24,769
the real functional application that was

306
00:15:22,999 --> 00:15:29,809
the first<font color="#E5E5E5"> point the second point is a</font>

307
00:15:24,769 --> 00:15:32,660
yeah<font color="#E5E5E5"> I generally use the same anchor eus</font>

308
00:15:29,809 --> 00:15:34,610
encryption key and IV airwave to<font color="#CCCCCC"> the</font>

309
00:15:32,660 --> 00:15:36,949
<font color="#CCCCCC">Crypt and encrypt this anyway so</font>

310
00:15:34,610 --> 00:15:38,959
whatever the package that you download

311
00:15:36,949 --> 00:15:43,099
from the market store<font color="#CCCCCC"> android Mikus or</font>

312
00:15:38,959 --> 00:15:45,529
you will always end with this which this

313
00:15:43,100 --> 00:15:48,800
due to error<font color="#CCCCCC"> Airways that corresponds to</font>

314
00:15:45,529 --> 00:15:55,639
the encryption keys you use by<font color="#E5E5E5"> es for</font>

315
00:15:48,800 --> 00:16:00,109
<font color="#E5E5E5">it's a decryption process so for for the</font>

316
00:15:55,639 --> 00:16:02,179
mitigation what we done here just

317
00:16:00,110 --> 00:16:04,069
remember the result that<font color="#E5E5E5"> we I'm</font>

318
00:16:02,179 --> 00:16:07,309
displaying here is the result<font color="#CCCCCC"> of the</font>

319
00:16:04,069 --> 00:16:11,839
string deal for education phase that's

320
00:16:07,309 --> 00:16:14,480
came just before and when we read all

321
00:16:11,839 --> 00:16:17,809
the strings<font color="#E5E5E5"> the order is very important</font>

322
00:16:14,480 --> 00:16:20,660
because the older reflects the order of

323
00:16:17,809 --> 00:16:22,309
the application of the application so we

324
00:16:20,660 --> 00:16:24,618
can<font color="#E5E5E5"> easily spot the use of</font><font color="#CCCCCC"> a</font>

325
00:16:22,309 --> 00:16:27,879
cryptographic function and then we can

326
00:16:24,619 --> 00:16:29,990
just<font color="#E5E5E5"> break at</font><font color="#CCCCCC"> the right moment and</font>

327
00:16:27,879 --> 00:16:31,939
especially here the moment where the

328
00:16:29,990 --> 00:16:34,459
application<font color="#CCCCCC"> will start to decrypt itself</font>

329
00:16:31,939 --> 00:16:36,618
so we can stop there and<font color="#E5E5E5"> dump all the</font>

330
00:16:34,459 --> 00:16:40,489
content from the<font color="#E5E5E5"> memory and here again</font>

331
00:16:36,619 --> 00:16:43,730
we come across we are with the a Java

332
00:16:40,490 --> 00:16:46,009
byte little bittle obfuscated but we can

333
00:16:43,730 --> 00:16:49,850
be officiated easily and start<font color="#E5E5E5"> reading</font>

334
00:16:46,009 --> 00:16:52,399
the go so at<font color="#CCCCCC"> this level we had we deal</font>

335
00:16:49,850 --> 00:16:54,799
with all the security mechanism and we

336
00:16:52,399 --> 00:16:57,259
are able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> start reading the code yeah</font>

337
00:16:54,799 --> 00:16:59,029
just reading the code probably do begin

338
00:16:57,259 --> 00:17:07,779
it and trying to understand how<font color="#CCCCCC"> things</font>

339
00:16:59,029 --> 00:17:07,779
<font color="#E5E5E5">works behind so the unpartitioned one so</font>

340
00:17:07,929 --> 00:17:18,319
once we had the code we asked ourselves

341
00:17:13,148 --> 00:17:19,760
what are we looking for now really we

342
00:17:18,319 --> 00:17:23,688
<font color="#CCCCCC">are looking for something like</font><font color="#E5E5E5"> this</font>

343
00:17:19,760 --> 00:17:26,240
<font color="#CCCCCC">because the algorithm used for</font>

344
00:17:23,689 --> 00:17:28,459
generating<font color="#E5E5E5"> one-time password is it's a</font>

345
00:17:26,240 --> 00:17:30,700
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> a standard algorithm it's not</font>

346
00:17:28,459 --> 00:17:32,800
<font color="#E5E5E5">something you is not something up</font>

347
00:17:30,700 --> 00:17:36,340
you it's<font color="#E5E5E5"> something known where everybody</font>

348
00:17:32,800 --> 00:17:38,790
so<font color="#E5E5E5"> we just took their AFC here and try</font>

349
00:17:36,340 --> 00:17:43,300
to understand the content of the AFC and

350
00:17:38,790 --> 00:17:45,580
<font color="#E5E5E5">yeah draw this kind of schema to try to</font>

351
00:17:43,300 --> 00:17:49,840
understand what what are<font color="#CCCCCC"> we looking for</font>

352
00:17:45,580 --> 00:17:52,030
<font color="#E5E5E5">so for our case we</font><font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to find</font>

353
00:17:49,840 --> 00:17:57,760
<font color="#E5E5E5">portion of code that implements this</font>

354
00:17:52,030 --> 00:18:00,340
kind<font color="#E5E5E5"> of algorithm so what we have</font><font color="#CCCCCC"> here</font>

355
00:17:57,760 --> 00:18:03,760
to understand the logic we have various

356
00:18:00,340 --> 00:18:06,100
elements the first one regard the you

357
00:18:03,760 --> 00:18:07,900
remember the decrypted a way that

358
00:18:06,100 --> 00:18:10,330
contain the functional application

359
00:18:07,900 --> 00:18:12,490
functional code and we have something

360
00:18:10,330 --> 00:18:14,290
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> got from</font><font color="#CCCCCC"> the behavior analysis</font>

361
00:18:12,490 --> 00:18:18,100
we know that the application use mainly

362
00:18:14,290 --> 00:18:20,050
to configuration file so for us the main

363
00:18:18,100 --> 00:18:21,939
entry point will<font color="#CCCCCC"> be the to</font><font color="#E5E5E5"> configuration</font>

364
00:18:20,050 --> 00:18:24,180
<font color="#E5E5E5">file so we are going to aside from this</font>

365
00:18:21,940 --> 00:18:26,670
file trust back all the element that

366
00:18:24,180 --> 00:18:30,280
that deal with this file all the

367
00:18:26,670 --> 00:18:32,740
mechanism and functions that manipulate

368
00:18:30,280 --> 00:18:36,220
these files to find the how the

369
00:18:32,740 --> 00:18:39,070
application works the the first step

370
00:18:36,220 --> 00:18:42,940
that we carry out carried out was just

371
00:18:39,070 --> 00:18:46,389
<font color="#CCCCCC">to find how the application read and</font>

372
00:18:42,940 --> 00:18:49,690
write to these files and for that we

373
00:18:46,390 --> 00:18:53,230
wrote a proof of concept so we read the

374
00:18:49,690 --> 00:18:54,760
Java code and we decided<font color="#E5E5E5"> to write a</font>

375
00:18:53,230 --> 00:18:58,630
proof of concept to understand how

376
00:18:54,760 --> 00:19:04,360
things<font color="#CCCCCC"> works and at the</font><font color="#E5E5E5"> end</font><font color="#CCCCCC"> we had our</font>

377
00:18:58,630 --> 00:19:07,120
proper parser of these two files so here

378
00:19:04,360 --> 00:19:10,030
at the bottom<font color="#CCCCCC"> you have the first file</font>

379
00:19:07,120 --> 00:19:12,010
which<font color="#CCCCCC"> is the OTP token device and the</font>

380
00:19:10,030 --> 00:19:14,470
second file which is<font color="#E5E5E5"> the OTP device</font>

381
00:19:12,010 --> 00:19:16,240
status now I'm telling<font color="#E5E5E5"> you</font><font color="#CCCCCC"> that the</font>

382
00:19:14,470 --> 00:19:19,360
first the most important one<font color="#E5E5E5"> is the</font>

383
00:19:16,240 --> 00:19:22,350
bottom one and the second one is not

384
00:19:19,360 --> 00:19:25,689
<font color="#E5E5E5">such as important as the first one</font><font color="#CCCCCC"> and</font>

385
00:19:22,350 --> 00:19:28,419
the methodology here is what I what I

386
00:19:25,690 --> 00:19:30,820
did really in real life I took every

387
00:19:28,420 --> 00:19:33,160
parameter every line so I took the<font color="#E5E5E5"> first</font>

388
00:19:30,820 --> 00:19:36,090
one the second one and so on<font color="#E5E5E5"> and started</font>

389
00:19:33,160 --> 00:19:38,760
try facing back each parameter and

390
00:19:36,090 --> 00:19:41,919
trying to understand<font color="#CCCCCC"> how the application</font>

391
00:19:38,760 --> 00:19:44,650
generates these parameters and how the

392
00:19:41,920 --> 00:19:46,450
applications use this parameter<font color="#CCCCCC"> pair</font>

393
00:19:44,650 --> 00:19:49,750
<font color="#E5E5E5">meters when it reads the configuration</font>

394
00:19:46,450 --> 00:19:54,460
file so it was a really<font color="#CCCCCC"> tough work but</font>

395
00:19:49,750 --> 00:19:57,730
he<font color="#E5E5E5"> what I put in red is the result of my</font>

396
00:19:54,460 --> 00:19:59,860
study that correspond of the most

397
00:19:57,730 --> 00:20:02,170
important one<font color="#E5E5E5"> so we are</font><font color="#CCCCCC"> going now to</font>

398
00:19:59,860 --> 00:20:06,570
trust back all these red parameters to

399
00:20:02,170 --> 00:20:09,730
understand how the application works so

400
00:20:06,570 --> 00:20:12,879
yeah that was<font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of code that we</font>

401
00:20:09,730 --> 00:20:15,820
had we I had to deal with the first day

402
00:20:12,880 --> 00:20:17,980
something unreadable I don't know if

403
00:20:15,820 --> 00:20:21,370
someone here is able to read this kind

404
00:20:17,980 --> 00:20:24,460
<font color="#E5E5E5">of code but after eliminating all the</font>

405
00:20:21,370 --> 00:20:27,179
obfuscation mechanism refactoring the

406
00:20:24,460 --> 00:20:30,610
code we<font color="#E5E5E5"> came to something like this and</font>

407
00:20:27,180 --> 00:20:32,770
this time we<font color="#CCCCCC"> can see that is very easy</font>

408
00:20:30,610 --> 00:20:35,919
to read the code and understand<font color="#E5E5E5"> what is</font>

409
00:20:32,770 --> 00:20:38,610
behind the scene so from<font color="#E5E5E5"> now the main</font>

410
00:20:35,920 --> 00:20:44,580
work was<font color="#CCCCCC"> just reading the code and</font>

411
00:20:38,610 --> 00:20:47,860
understand how things works for us the

412
00:20:44,580 --> 00:20:51,280
entry point as I told you was the OTP

413
00:20:47,860 --> 00:20:54,610
token device so I we took this file and

414
00:20:51,280 --> 00:20:57,250
we started analyzing each parameter the

415
00:20:54,610 --> 00:20:59,080
third red parameter you remember will

416
00:20:57,250 --> 00:21:02,170
store it in this kind of file and it

417
00:20:59,080 --> 00:21:04,899
seems that is this parameter is the<font color="#CCCCCC"> one</font>

418
00:21:02,170 --> 00:21:07,480
that one time password key which is

419
00:21:04,900 --> 00:21:10,840
encrypted using a three days or

420
00:21:07,480 --> 00:21:14,740
algorithm so here<font color="#CCCCCC"> we have the 11 sorry</font>

421
00:21:10,840 --> 00:21:17,770
you have<font color="#E5E5E5"> the one time key that is</font>

422
00:21:14,740 --> 00:21:23,170
submitted 23 / des and the encrypted

423
00:21:17,770 --> 00:21:26,889
form is stored into this file yeah so we

424
00:21:23,170 --> 00:21:31,300
just the first<font color="#CCCCCC"> finding now we are</font><font color="#E5E5E5"> going</font>

425
00:21:26,890 --> 00:21:32,920
to trust back the<font color="#E5E5E5"> the one time key to</font>

426
00:21:31,300 --> 00:21:37,870
understand how how this key<font color="#E5E5E5"> is generated</font>

427
00:21:32,920 --> 00:21:39,910
so be careful here previously I'm

428
00:21:37,870 --> 00:21:43,659
mentioning here that the Quixote p is

429
00:21:39,910 --> 00:21:46,570
about 24 bytes but in in<font color="#E5E5E5"> reality</font><font color="#CCCCCC"> the key</font>

430
00:21:43,660 --> 00:21:48,730
is presented into two main parts one

431
00:21:46,570 --> 00:21:51,340
part corresponds to 20 bytes and the

432
00:21:48,730 --> 00:21:54,010
second correspond to<font color="#E5E5E5"> 4 bytes and the</font>

433
00:21:51,340 --> 00:21:56,139
four bytes are generated using yeah

434
00:21:54,010 --> 00:21:57,320
firstly I call this function get random

435
00:21:56,140 --> 00:21:59,929
because<font color="#CCCCCC"> I</font>

436
00:21:57,320 --> 00:22:01,610
<font color="#E5E5E5">but just reading the code quickly I</font>

437
00:21:59,929 --> 00:22:04,669
thought<font color="#CCCCCC"> that is something generating</font>

438
00:22:01,610 --> 00:22:07,840
something random but in real life<font color="#E5E5E5"> it was</font>

439
00:22:04,669 --> 00:22:13,909
not such as random<font color="#E5E5E5"> because it just took</font>

440
00:22:07,840 --> 00:22:18,110
the current time in millisecond and<font color="#E5E5E5"> user</font>

441
00:22:13,909 --> 00:22:21,139
and implement a<font color="#CCCCCC"> char one on the on this</font>

442
00:22:18,110 --> 00:22:25,699
seed and extract for<font color="#E5E5E5"> bite from this from</font>

443
00:22:21,139 --> 00:22:28,039
this from this result so here if if you

444
00:22:25,700 --> 00:22:30,230
can<font color="#CCCCCC"> say yes this function</font><font color="#E5E5E5"> is kind of</font>

445
00:22:28,039 --> 00:22:32,539
deterministic<font color="#E5E5E5"> if you have the same the</font>

446
00:22:30,230 --> 00:22:35,000
<font color="#CCCCCC">same current time releasing on each time</font>

447
00:22:32,539 --> 00:22:39,080
we can get each time<font color="#CCCCCC"> the same four bytes</font>

448
00:22:35,000 --> 00:22:42,409
just make this information here and<font color="#E5E5E5"> we</font>

449
00:22:39,080 --> 00:22:46,539
will come back<font color="#CCCCCC"> adjust to</font><font color="#E5E5E5"> that so I carry</font>

450
00:22:42,409 --> 00:22:51,379
on once we have<font color="#E5E5E5"> these four bytes the</font>

451
00:22:46,539 --> 00:22:52,700
idea here to see how the 20 20 bytes

452
00:22:51,379 --> 00:22:56,539
that we have at<font color="#E5E5E5"> the beginning are</font>

453
00:22:52,700 --> 00:22:58,940
generated so the schema here shows you

454
00:22:56,539 --> 00:23:02,120
that you have application is using<font color="#CCCCCC"> PB</font>

455
00:22:58,940 --> 00:23:04,789
<font color="#CCCCCC">Khedive to to generate these 20 bytes</font>

456
00:23:02,120 --> 00:23:06,590
using the activation code<font color="#E5E5E5"> and remember</font>

457
00:23:04,789 --> 00:23:09,440
the activation code<font color="#CCCCCC"> is something that is</font>

458
00:23:06,590 --> 00:23:13,699
generated by<font color="#CCCCCC"> the server and it's also</font>

459
00:23:09,440 --> 00:23:15,649
using the salt which is the rivet from

460
00:23:13,700 --> 00:23:17,690
the Syrian number so also<font color="#E5E5E5"> here the</font>

461
00:23:15,649 --> 00:23:20,719
function<font color="#E5E5E5"> that is that generates the</font>

462
00:23:17,690 --> 00:23:24,019
sausage the domestic function that take

463
00:23:20,720 --> 00:23:31,009
the Syrian number i generate the<font color="#CCCCCC"> same</font>

464
00:23:24,019 --> 00:23:34,070
value each time<font color="#CCCCCC"> okay now so we</font><font color="#E5E5E5"> so the</font>

465
00:23:31,009 --> 00:23:37,279
key OTP park what is interesting<font color="#CCCCCC"> to see</font>

466
00:23:34,070 --> 00:23:39,200
now the key I part here<font color="#CCCCCC"> the sum of</font><font color="#E5E5E5"> the</font>

467
00:23:37,279 --> 00:23:44,840
key that is used by Joe application to

468
00:23:39,200 --> 00:23:46,759
encrypt the the ki AAP ki yeah the

469
00:23:44,840 --> 00:23:50,870
application is again the<font color="#CCCCCC"> ppk</font><font color="#E5E5E5"> tf2</font>

470
00:23:46,759 --> 00:23:52,669
algorithm for that and this time the

471
00:23:50,870 --> 00:23:54,168
application uses a master key what<font color="#CCCCCC"> I am</font>

472
00:23:52,669 --> 00:23:56,360
calling here<font color="#E5E5E5"> a master</font><font color="#CCCCCC"> key and we are</font>

473
00:23:54,169 --> 00:23:58,399
going little<font color="#E5E5E5"> bit further to see how this</font>

474
00:23:56,360 --> 00:24:01,129
master key generated yea master key

475
00:23:58,399 --> 00:24:03,768
again the Syrian number submitted to the

476
00:24:01,129 --> 00:24:08,918
determinist feministic functions to get

477
00:24:03,769 --> 00:24:11,450
the key I for the encryption task so

478
00:24:08,919 --> 00:24:14,000
here<font color="#E5E5E5"> we can start to</font>

479
00:24:11,450 --> 00:24:17,929
to<font color="#E5E5E5"> ask ourselves where is the pin</font>

480
00:24:14,000 --> 00:24:20,149
<font color="#E5E5E5">because as as</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> told you at the</font>

481
00:24:17,929 --> 00:24:23,120
beginning when the user ends its

482
00:24:20,149 --> 00:24:25,189
enrollment process he should protect all

483
00:24:23,120 --> 00:24:27,739
<font color="#CCCCCC">the information using a pin so where is</font>

484
00:24:25,190 --> 00:24:30,230
<font color="#CCCCCC">the pin on all</font><font color="#E5E5E5"> this stuff so yeah the</font>

485
00:24:27,740 --> 00:24:32,570
pin is used here to<font color="#E5E5E5"> generate the master</font>

486
00:24:30,230 --> 00:24:37,010
key so the pin that can<font color="#E5E5E5"> be a digit</font>

487
00:24:32,570 --> 00:24:39,980
between four and 12 digit is<font color="#E5E5E5"> is</font>

488
00:24:37,010 --> 00:24:44,419
submitted to share 256 and then encoded

489
00:24:39,980 --> 00:24:47,419
with base64 the same process is executed

490
00:24:44,419 --> 00:24:49,070
is done on the Android ID and as you

491
00:24:47,419 --> 00:24:51,169
know the<font color="#CCCCCC"> underneath on droid ID is a</font>

492
00:24:49,070 --> 00:24:54,049
security attribute used by on droid

493
00:24:51,169 --> 00:24:58,639
devices to uniquely identify an

494
00:24:54,049 --> 00:25:00,559
unalloyed device and I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that the</font>

495
00:24:58,639 --> 00:25:02,899
idea here was to use something<font color="#E5E5E5"> that is</font>

496
00:25:00,559 --> 00:25:06,110
very specific<font color="#CCCCCC"> to each device but as you</font>

497
00:25:02,899 --> 00:25:07,789
know the<font color="#CCCCCC"> unraid ID can be modified on an</font>

498
00:25:06,110 --> 00:25:11,059
emulator<font color="#E5E5E5"> or on our own delivered device</font>

499
00:25:07,789 --> 00:25:13,070
as you like so we do the<font color="#CCCCCC"> same thing on</font>

500
00:25:11,059 --> 00:25:15,830
the Android ID and we get we can<font color="#E5E5E5"> contain</font>

501
00:25:13,070 --> 00:25:21,230
a you concatenate the both element and

502
00:25:15,830 --> 00:25:25,549
we get<font color="#CCCCCC"> the master key so the third</font>

503
00:25:21,230 --> 00:25:28,700
windbg just having this in mind we can

504
00:25:25,549 --> 00:25:32,450
<font color="#E5E5E5">state that an attacker</font><font color="#CCCCCC"> can clone an</font>

505
00:25:28,700 --> 00:25:34,580
enrolled hids of token application so he

506
00:25:32,450 --> 00:25:37,159
had to copy to hid configuration files

507
00:25:34,580 --> 00:25:41,570
the OTP token device on the OTP token

508
00:25:37,159 --> 00:25:44,000
status and for that<font color="#E5E5E5"> he need a root</font>

509
00:25:41,570 --> 00:25:45,889
access on<font color="#CCCCCC"> the device so at</font><font color="#E5E5E5"> this level</font>

510
00:25:44,000 --> 00:25:47,840
<font color="#E5E5E5">you can imagine all the scenario the</font>

511
00:25:45,889 --> 00:25:50,570
attacker has an physical access to the

512
00:25:47,840 --> 00:25:53,779
device he stole a device he<font color="#CCCCCC"> rued the</font>

513
00:25:50,570 --> 00:25:56,330
device remotely access to devices an

514
00:25:53,779 --> 00:25:58,220
unknown exploit as you like but the idea

515
00:25:56,330 --> 00:26:00,649
here just to get them access to<font color="#E5E5E5"> the</font>

516
00:25:58,220 --> 00:26:05,840
configuration<font color="#E5E5E5"> file and get them he has</font>

517
00:26:00,649 --> 00:26:09,168
also to get<font color="#CCCCCC"> android ID for for the</font>

518
00:26:05,840 --> 00:26:11,658
victim device if the attacker has both

519
00:26:09,169 --> 00:26:14,990
of this information he can clone the

520
00:26:11,659 --> 00:26:18,110
application and use it but the<font color="#E5E5E5"> problem</font>

521
00:26:14,990 --> 00:26:20,659
is the attacker has to have a valid<font color="#E5E5E5"> pin</font>

522
00:26:18,110 --> 00:26:22,519
to have<font color="#E5E5E5"> valid one time password but</font>

523
00:26:20,659 --> 00:26:25,200
because the trick here is that<font color="#E5E5E5"> the</font>

524
00:26:22,519 --> 00:26:28,320
application generates

525
00:26:25,200 --> 00:26:31,230
a value and one time value whatever<font color="#E5E5E5"> the</font>

526
00:26:28,320 --> 00:26:35,059
<font color="#CCCCCC">the pin is submitted to the application</font>

527
00:26:31,230 --> 00:26:38,399
so as<font color="#E5E5E5"> you can guess here if the attacker</font>

528
00:26:35,059 --> 00:26:40,168
go for a social engineering scenario or

529
00:26:38,399 --> 00:26:41,760
try to understand a keylogger on the

530
00:26:40,169 --> 00:26:43,679
device or something<font color="#E5E5E5"> like this the idea</font>

531
00:26:41,760 --> 00:26:47,789
just<font color="#E5E5E5"> to get the pin if the attacker had</font>

532
00:26:43,679 --> 00:26:49,950
valid pin and satisfies the two

533
00:26:47,789 --> 00:26:52,769
prerequisites that I just underlined

534
00:26:49,950 --> 00:26:55,889
here he can close the application so we

535
00:26:52,769 --> 00:26:59,820
did<font color="#E5E5E5"> the test and actually</font><font color="#CCCCCC"> the test was</font>

536
00:26:55,889 --> 00:27:02,158
ok because we had a varied access to the

537
00:26:59,820 --> 00:27:05,700
to the<font color="#E5E5E5"> test platform that we are we were</font>

538
00:27:02,159 --> 00:27:10,010
were using<font color="#E5E5E5"> ok so that was the first when</font>

539
00:27:05,700 --> 00:27:12,389
<font color="#CCCCCC">I VG but the question as you know as a</font>

540
00:27:10,010 --> 00:27:18,870
researcher we we have<font color="#E5E5E5"> always questions</font>

541
00:27:12,389 --> 00:27:22,469
there is another<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to get the pin so</font>

542
00:27:18,870 --> 00:27:24,899
come<font color="#E5E5E5"> back to the schema that summarizes</font>

543
00:27:22,470 --> 00:27:26,909
the how the master key generated but

544
00:27:24,899 --> 00:27:29,850
this time instead of using<font color="#E5E5E5"> the master</font>

545
00:27:26,909 --> 00:27:33,450
key as a result we<font color="#CCCCCC"> are using a variable</font>

546
00:27:29,850 --> 00:27:36,299
or I'm calling he just something ravish

547
00:27:33,450 --> 00:27:39,570
<font color="#CCCCCC">to to to</font><font color="#E5E5E5"> illustrate the meaning of the</font>

548
00:27:36,299 --> 00:27:42,840
variable and this variable is used in

549
00:27:39,570 --> 00:27:46,500
the code and effectively<font color="#CCCCCC"> what's what's</font>

550
00:27:42,840 --> 00:27:48,389
happening it's a when I was<font color="#E5E5E5"> reading the</font>

551
00:27:46,500 --> 00:27:52,260
code i came across this portion of code

552
00:27:48,389 --> 00:27:55,789
yeah<font color="#E5E5E5"> i was very happy because the</font>

553
00:27:52,260 --> 00:28:00,510
application indeed read stores the pin

554
00:27:55,789 --> 00:28:04,260
in its configuration file using a<font color="#CCCCCC"> sha256</font>

555
00:28:00,510 --> 00:28:07,820
algorithm and it was<font color="#E5E5E5"> a it was ok i was</font>

556
00:28:04,260 --> 00:28:10,139
<font color="#E5E5E5">very happy but fuel line after i</font>

557
00:28:07,820 --> 00:28:11,970
identified that the application<font color="#E5E5E5"> this</font>

558
00:28:10,139 --> 00:28:13,709
code brush is never executed because the

559
00:28:11,970 --> 00:28:16,139
application is just in a kind of a flag

560
00:28:13,710 --> 00:28:18,269
variable and this flag is always said to

561
00:28:16,139 --> 00:28:21,389
fallen and this branch code is never

562
00:28:18,269 --> 00:28:24,330
executed so<font color="#E5E5E5"> i suspect that there was a</font>

563
00:28:21,389 --> 00:28:26,850
time where the pain of the application

564
00:28:24,330 --> 00:28:29,480
was stored in the shadow 56 in the in

565
00:28:26,850 --> 00:28:32,480
the configuration<font color="#E5E5E5"> file ok so here again</font>

566
00:28:29,480 --> 00:28:32,480
fail

567
00:28:33,570 --> 00:28:41,220
so after a cup of<font color="#CCCCCC"> coffee or more with my</font>

568
00:28:37,820 --> 00:28:43,500
team we decided to<font color="#E5E5E5"> go and reanalyze all</font>

569
00:28:41,220 --> 00:28:45,780
the stuff to spot if there is something

570
00:28:43,500 --> 00:28:48,450
interesting to grab the pin code of the

571
00:28:45,780 --> 00:28:50,520
<font color="#E5E5E5">of the application because for us it's</font>

572
00:28:48,450 --> 00:28:52,620
very class if we can get the pin code

573
00:28:50,520 --> 00:28:54,570
from the application itself without

574
00:28:52,620 --> 00:28:58,260
going for a social engineer in a

575
00:28:54,570 --> 00:29:01,110
scenario or something<font color="#E5E5E5"> like this remember</font>

576
00:28:58,260 --> 00:29:03,780
I put all everything in one slide to

577
00:29:01,110 --> 00:29:05,879
have a<font color="#E5E5E5"> big of a view of the internal</font>

578
00:29:03,780 --> 00:29:08,460
function and<font color="#CCCCCC"> funk functionalities of the</font>

579
00:29:05,880 --> 00:29:12,150
application here you find<font color="#E5E5E5"> also the ITP</font>

580
00:29:08,460 --> 00:29:15,120
token device then encrypted the<font color="#E5E5E5"> key OTP</font>

581
00:29:12,150 --> 00:29:19,830
uses to generate the one-time password

582
00:29:15,120 --> 00:29:22,080
here we also we spot the key<font color="#CCCCCC"> ogp split</font>

583
00:29:19,830 --> 00:29:26,280
it in two parts the<font color="#E5E5E5"> 20 bytes and the</font>

584
00:29:22,080 --> 00:29:28,980
four bytes ok so here we draw all the

585
00:29:26,280 --> 00:29:32,100
<font color="#CCCCCC">stuff in a in a whiteboard and we</font>

586
00:29:28,980 --> 00:29:40,890
started to think where<font color="#CCCCCC"> is what we can do</font>

587
00:29:32,100 --> 00:29:43,679
here to get the pin in fact the OTP key

588
00:29:40,890 --> 00:29:46,980
is 24 bytes the 20 bytes are generated

589
00:29:43,680 --> 00:29:50,490
using biblical<font color="#CCCCCC"> ef-2 algorithm but the</font>

590
00:29:46,980 --> 00:29:52,890
four bytes that comes at the end of the

591
00:29:50,490 --> 00:29:55,080
Quixote<font color="#E5E5E5"> p are generated using</font><font color="#CCCCCC"> xiao an</font>

592
00:29:52,890 --> 00:29:57,720
algorithm seeded by the system get

593
00:29:55,080 --> 00:30:02,040
current time<font color="#E5E5E5"> melissa gone so the idea</font>

594
00:29:57,720 --> 00:30:05,670
<font color="#CCCCCC">here if i get the value that was used</font><font color="#E5E5E5"> to</font>

595
00:30:02,040 --> 00:30:10,080
generate the sha-1 value here if<font color="#E5E5E5"> i get</font>

596
00:30:05,670 --> 00:30:16,290
<font color="#E5E5E5">the return value of this function i have</font>

597
00:30:10,080 --> 00:30:23,639
the four bytes and the problem now from

598
00:30:16,290 --> 00:30:26,700
where can<font color="#E5E5E5"> i get this value because if</font>

599
00:30:23,640 --> 00:30:28,680
you take<font color="#CCCCCC"> this schema if</font><font color="#E5E5E5"> i have the</font>

600
00:30:26,700 --> 00:30:33,840
correct value of the current time in a

601
00:30:28,680 --> 00:30:38,940
millisecond I can generate the a 4-byte

602
00:30:33,840 --> 00:30:42,000
here if I have the four byte here I can

603
00:30:38,940 --> 00:30:43,740
do I kind of brute force because the the

604
00:30:42,000 --> 00:30:46,110
pin I don't know I don't know the pin

605
00:30:43,740 --> 00:30:47,430
but but I'm looking for the pin so i can

606
00:30:46,110 --> 00:30:51,360
brute<font color="#CCCCCC"> force here the</font>

607
00:30:47,430 --> 00:30:54,480
by inserted at this at this part the on

608
00:30:51,360 --> 00:30:57,629
droid ID ID value i know this value so<font color="#E5E5E5"> i</font>

609
00:30:54,480 --> 00:31:00,870
can redo all this mechanism to have to

610
00:30:57,630 --> 00:31:04,080
decrypt the key but<font color="#CCCCCC"> i need somewhere a</font>

611
00:31:00,870 --> 00:31:07,949
stop condition for me to stop the brute

612
00:31:04,080 --> 00:31:10,679
<font color="#CCCCCC">force so when I decrypt the Triple DES</font>

613
00:31:07,950 --> 00:31:13,350
encrypted value I need something<font color="#E5E5E5"> to tell</font>

614
00:31:10,680 --> 00:31:16,200
me<font color="#E5E5E5"> you are on the right way you have the</font>

615
00:31:13,350 --> 00:31:19,469
right key so the stop condition here is

616
00:31:16,200 --> 00:31:23,400
these four bytes so<font color="#E5E5E5"> if I got the five</font>

617
00:31:19,470 --> 00:31:25,380
the four byte the valid for bites I have

618
00:31:23,400 --> 00:31:27,840
my stop condition if and I have my stop

619
00:31:25,380 --> 00:31:31,530
condition I have my valid pin but the

620
00:31:27,840 --> 00:31:33,300
problem<font color="#CCCCCC"> is where what is what was the</font>

621
00:31:31,530 --> 00:31:35,250
the value that was used by the

622
00:31:33,300 --> 00:31:40,260
application to generate these four bytes

623
00:31:35,250 --> 00:31:43,440
and guess what in the configuration file

624
00:31:40,260 --> 00:31:45,450
the application stores two values to

625
00:31:43,440 --> 00:31:47,820
<font color="#CCCCCC">timestamps the beginning of</font><font color="#E5E5E5"> the</font>

626
00:31:45,450 --> 00:31:50,610
arraignment process and the end of the

627
00:31:47,820 --> 00:31:55,919
ormond enrollment process so if<font color="#CCCCCC"> i have</font>

628
00:31:50,610 --> 00:31:58,350
<font color="#CCCCCC">these two values</font><font color="#E5E5E5"> i can guess where this</font>

629
00:31:55,920 --> 00:32:02,280
operation has been carried out between

630
00:31:58,350 --> 00:32:04,199
this range of time values so<font color="#E5E5E5"> i have the</font>

631
00:32:02,280 --> 00:32:06,360
time values i can now brute force all

632
00:32:04,200 --> 00:32:07,980
<font color="#E5E5E5">the four bytes that are possible because</font>

633
00:32:06,360 --> 00:32:09,870
<font color="#CCCCCC">i have</font><font color="#E5E5E5"> the beginning and the end of the</font>

634
00:32:07,980 --> 00:32:12,390
process<font color="#E5E5E5"> i can generate all the four</font>

635
00:32:09,870 --> 00:32:14,669
bytes if I have all these four bytes I

636
00:32:12,390 --> 00:32:16,680
can go then for the other side<font color="#E5E5E5"> to a</font>

637
00:32:14,670 --> 00:32:19,230
brute force attack<font color="#E5E5E5"> submitting all the</font>

638
00:32:16,680 --> 00:32:21,690
pins that I want<font color="#E5E5E5"> to find and I have my</font>

639
00:32:19,230 --> 00:32:24,720
stop condition you can<font color="#E5E5E5"> get here that we</font>

640
00:32:21,690 --> 00:32:26,580
have some collisions and for that in

641
00:32:24,720 --> 00:32:30,510
consequence we are going to have a

642
00:32:26,580 --> 00:32:32,340
number of candidate pin and yeah i<font color="#E5E5E5"> will</font>

643
00:32:30,510 --> 00:32:35,520
show you after how we can choose<font color="#CCCCCC"> the</font>

644
00:32:32,340 --> 00:32:44,459
right one but yeah that was the attack

645
00:32:35,520 --> 00:32:46,860
that we can trigger to get the pin so

646
00:32:44,460 --> 00:32:48,720
yeah as I said before this was our stop

647
00:32:46,860 --> 00:32:51,300
condition to trigger a brute force

648
00:32:48,720 --> 00:32:53,910
attack and get and get to be so here I

649
00:32:51,300 --> 00:32:56,330
am showing you the proof of concept that

650
00:32:53,910 --> 00:32:59,340
we develop it in an intern to

651
00:32:56,330 --> 00:33:01,158
<font color="#E5E5E5">demonstrate this attack so this</font>

652
00:32:59,340 --> 00:33:05,779
proof-of-concept just too

653
00:33:01,159 --> 00:33:08,840
as parameter the the configuration file

654
00:33:05,779 --> 00:33:10,549
and basin based on<font color="#E5E5E5"> the content of this</font>

655
00:33:08,840 --> 00:33:13,580
configuration file he try<font color="#E5E5E5"> to do the</font>

656
00:33:10,549 --> 00:33:16,460
brute<font color="#CCCCCC"> force and as you see here there is</font>

657
00:33:13,580 --> 00:33:20,989
a lot of candidates but what we did is

658
00:33:16,460 --> 00:33:25,009
just<font color="#E5E5E5"> to try to do a statistical analysis</font>

659
00:33:20,989 --> 00:33:28,190
to see which<font color="#CCCCCC"> one is the most possible</font>

660
00:33:25,009 --> 00:33:36,830
one regarding the<font color="#E5E5E5"> the execution of the</font>

661
00:33:28,190 --> 00:33:39,440
operation during<font color="#E5E5E5"> the time so to conclude</font>

662
00:33:36,830 --> 00:33:41,449
that was an interesting study in terms

663
00:33:39,440 --> 00:33:44,599
of technical challenge and result as you

664
00:33:41,450 --> 00:33:49,009
<font color="#E5E5E5">can see an attacker now is able to steal</font>

665
00:33:44,599 --> 00:33:50,928
the configuration file and retrieve the

666
00:33:49,009 --> 00:33:55,820
pin without going for a social

667
00:33:50,929 --> 00:33:58,669
<font color="#E5E5E5">engineering or stealing the pin the</font>

668
00:33:55,820 --> 00:34:01,129
study took one month workload I think

669
00:33:58,669 --> 00:34:04,639
the<font color="#CCCCCC"> Vinaya BTW has been</font><font color="#E5E5E5"> reported to the</font>

670
00:34:01,129 --> 00:34:06,649
<font color="#E5E5E5">vendor on july than 90s and the Wonder</font>

671
00:34:04,639 --> 00:34:10,250
was very<font color="#E5E5E5"> responsive and currently is</font>

672
00:34:06,649 --> 00:34:11,960
working on a patch a patch for this

673
00:34:10,250 --> 00:34:14,329
version of<font color="#CCCCCC"> the application and that the</font>

674
00:34:11,960 --> 00:34:20,649
same of the same time is working<font color="#E5E5E5"> for our</font>

675
00:34:14,329 --> 00:34:20,649
new design of the application questions

676
00:34:34,119 --> 00:34:40,040
yeah yeah I understand the question so

677
00:34:36,500 --> 00:34:46,040
the idea here it was other place that we

678
00:34:40,040 --> 00:34:48,409
<font color="#E5E5E5">can get the time stamps yeah so in our</font>

679
00:34:46,040 --> 00:34:52,129
real life what we did before<font color="#CCCCCC"> coming to</font>

680
00:34:48,409 --> 00:34:55,129
<font color="#CCCCCC">this to this finding so we decided to</font><font color="#E5E5E5"> go</font>

681
00:34:52,129 --> 00:34:58,339
for<font color="#CCCCCC"> the file configuration creation time</font>

682
00:34:55,129 --> 00:35:00,470
<font color="#E5E5E5">stamp so the first idea idea was dead so</font>

683
00:34:58,339 --> 00:35:03,290
we need the<font color="#E5E5E5"> time we need we need at a</font>

684
00:35:00,470 --> 00:35:04,700
time stamp so we just went for the time

685
00:35:03,290 --> 00:35:07,009
type of the<font color="#E5E5E5"> creation of the</font>

686
00:35:04,700 --> 00:35:09,040
configuration file and from there we

687
00:35:07,010 --> 00:35:12,170
started we started our brute force but

688
00:35:09,040 --> 00:35:14,960
with the with having some time to

689
00:35:12,170 --> 00:35:17,930
realize all the stuff we spotted these

690
00:35:14,960 --> 00:35:20,170
two values so if we<font color="#CCCCCC"> don't have if</font><font color="#E5E5E5"> we</font>

691
00:35:17,930 --> 00:35:25,848
didn't have these two variables I think

692
00:35:20,170 --> 00:35:41,859
we we will able to use the creation file

693
00:35:25,849 --> 00:35:41,859
time stamp did that answer your question

694
00:35:42,790 --> 00:35:53,330
any further questions all right well

695
00:35:50,270 --> 00:35:55,540
then I<font color="#CCCCCC"> think we should say</font><font color="#E5E5E5"> thank</font><font color="#CCCCCC"> you to</font>

696
00:35:53,330 --> 00:35:55,540
what

