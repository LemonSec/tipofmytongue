1
00:00:05,990 --> 00:00:13,620
okay I am talking<font color="#CCCCCC"> about cracking</font><font color="#E5E5E5"> and or</font>

2
00:00:10,020 --> 00:00:15,629
an egg and cooking the chicken so

3
00:00:13,620 --> 00:00:19,169
<font color="#E5E5E5">basically what this is about for those</font>

4
00:00:15,630 --> 00:00:21,060
who you think it's a culinary expose I

5
00:00:19,169 --> 00:00:23,460
actually found a vulnerability in the

6
00:00:21,060 --> 00:00:25,079
<font color="#E5E5E5">PCI Express specification that</font><font color="#CCCCCC"> allows</font>

7
00:00:23,460 --> 00:00:29,369
you to break out a virtual memory on any

8
00:00:25,079 --> 00:00:31,050
system with PCI Express so if<font color="#CCCCCC"> that was</font>

9
00:00:29,369 --> 00:00:32,729
<font color="#CCCCCC">just a soup of acronyms here's a couple</font>

10
00:00:31,050 --> 00:00:34,350
terms that will add more acronyms to

11
00:00:32,729 --> 00:00:37,288
that soup so we'll have real alphabet

12
00:00:34,350 --> 00:00:38,850
soup so virtual memory basically it's

13
00:00:37,289 --> 00:00:41,039
what allows a process the thing is

14
00:00:38,850 --> 00:00:42,870
<font color="#CCCCCC">running on its own and it prevents other</font>

15
00:00:41,039 --> 00:00:45,449
processes from interfering with it or

16
00:00:42,870 --> 00:00:47,010
hacking into<font color="#E5E5E5"> the OS the MCH is the</font>

17
00:00:45,449 --> 00:00:48,570
<font color="#E5E5E5">memory controller hub is like the chip</font>

18
00:00:47,010 --> 00:00:52,349
on the system that<font color="#CCCCCC"> manages all that</font>

19
00:00:48,570 --> 00:00:54,329
memory memory mapped i/o is basically a

20
00:00:52,350 --> 00:00:55,739
device or device registers<font color="#CCCCCC"> that are</font>

21
00:00:54,329 --> 00:00:57,449
mapped in as if they were in physical

22
00:00:55,739 --> 00:00:59,909
memory it's newer and faster and better

23
00:00:57,449 --> 00:01:02,099
<font color="#E5E5E5">than Portillo</font><font color="#CCCCCC"> portico is</font><font color="#E5E5E5"> like the legacy</font>

24
00:00:59,909 --> 00:01:04,709
one that<font color="#CCCCCC"> CPUs used to be able to</font>

25
00:01:02,100 --> 00:01:06,090
communicate<font color="#CCCCCC"> with old devices more</font>

26
00:01:04,709 --> 00:01:08,070
acronyms for those of you who have<font color="#E5E5E5"> not</font>

27
00:01:06,090 --> 00:01:09,570
had a fill so TLB is the translation

28
00:01:08,070 --> 00:01:12,270
lookaside buffer it's a cache that

29
00:01:09,570 --> 00:01:14,789
<font color="#E5E5E5">caches recently</font><font color="#CCCCCC"> used virtual to physical</font>

30
00:01:12,270 --> 00:01:16,679
address translations we're going<font color="#E5E5E5"> to skip</font>

31
00:01:14,790 --> 00:01:19,439
<font color="#E5E5E5">over that one it's a PCI configuration</font>

32
00:01:16,680 --> 00:01:21,270
space is all the registers that<font color="#CCCCCC"> can</font>

33
00:01:19,439 --> 00:01:23,130
figure<font color="#E5E5E5"> all the devices on your platforms</font>

34
00:01:21,270 --> 00:01:24,750
if you have a graphics card there are

35
00:01:23,130 --> 00:01:25,890
registers in there that you can use<font color="#CCCCCC"> to</font>

36
00:01:24,750 --> 00:01:27,930
configure that<font color="#E5E5E5"> and that's how your</font>

37
00:01:25,890 --> 00:01:31,320
driver tells you how to use<font color="#E5E5E5"> certain</font>

38
00:01:27,930 --> 00:01:33,270
features of<font color="#E5E5E5"> that graphics card the ECAM</font>

39
00:01:31,320 --> 00:01:36,119
is in the extended configuration space

40
00:01:33,270 --> 00:01:37,798
for new<font color="#E5E5E5"> or PCI Express devices and then</font>

41
00:01:36,119 --> 00:01:40,079
the CR three<font color="#E5E5E5"> registers are registered on</font>

42
00:01:37,799 --> 00:01:42,390
the CPU that<font color="#CCCCCC"> tells the CPU where to look</font>

43
00:01:40,079 --> 00:01:45,059
to do virtual to physical address

44
00:01:42,390 --> 00:01:47,250
translations so a picture for those<font color="#CCCCCC"> you</font>

45
00:01:45,060 --> 00:01:50,759
don't<font color="#CCCCCC"> like the acronyms this is a</font>

46
00:01:47,250 --> 00:01:52,649
virtual memory so basically your virtual

47
00:01:50,759 --> 00:01:54,450
<font color="#CCCCCC">address is on</font><font color="#E5E5E5"> the top so the first few</font>

48
00:01:52,649 --> 00:01:56,579
is kind of like an offset for your page

49
00:01:54,450 --> 00:01:58,770
directory entry number and then that

50
00:01:56,579 --> 00:02:00,298
gets combined with the CR<font color="#CCCCCC"> 3 value it</font>

51
00:01:58,770 --> 00:02:01,798
finds that look up and then it goes and

52
00:02:00,299 --> 00:02:06,030
ends up mapping in an<font color="#E5E5E5"> actual physical</font>

53
00:02:01,799 --> 00:02:07,409
<font color="#E5E5E5">page you can add extra layers of</font>

54
00:02:06,030 --> 00:02:09,030
indirection if you want so if you're a

55
00:02:07,409 --> 00:02:11,820
hypervisor you can add in a whole nother

56
00:02:09,030 --> 00:02:13,500
layer or if you want to use<font color="#E5E5E5"> 64-bit or</font>

57
00:02:11,820 --> 00:02:15,140
smaller pages you can add it up to like

58
00:02:13,500 --> 00:02:17,270
I think nine levels of indirection

59
00:02:15,140 --> 00:02:20,390
which is<font color="#E5E5E5"> very slow so that's where the</font>

60
00:02:17,270 --> 00:02:22,580
TLB comes in so basically why do I care

61
00:02:20,390 --> 00:02:24,230
right so virtual memory is kind of a

62
00:02:22,580 --> 00:02:26,600
protective feature or a promise<font color="#E5E5E5"> of the</font>

63
00:02:24,230 --> 00:02:27,859
<font color="#E5E5E5">platform once you start up as an</font>

64
00:02:26,600 --> 00:02:29,420
operating<font color="#E5E5E5"> system and you control these</font>

65
00:02:27,860 --> 00:02:31,730
page tables you have control<font color="#E5E5E5"> over the</font>

66
00:02:29,420 --> 00:02:33,559
platform unless you<font color="#E5E5E5"> can access the page</font>

67
00:02:31,730 --> 00:02:35,390
tables<font color="#E5E5E5"> you're kind of locked out right</font>

68
00:02:33,560 --> 00:02:36,590
you can't add mappings to the page

69
00:02:35,390 --> 00:02:39,109
tables but you don't know where<font color="#CCCCCC"> the</font><font color="#E5E5E5"> page</font>

70
00:02:36,590 --> 00:02:40,490
tables are<font color="#CCCCCC"> in memory unless you're the</font>

71
00:02:39,110 --> 00:02:42,590
operating system this is that<font color="#E5E5E5"> chicken</font>

72
00:02:40,490 --> 00:02:43,880
the<font color="#E5E5E5"> egg problem but since we're going to</font>

73
00:02:42,590 --> 00:02:45,050
<font color="#E5E5E5">be cracking that egg and then also</font>

74
00:02:43,880 --> 00:02:46,940
cooking the chicken we're going to

75
00:02:45,050 --> 00:02:49,459
basically break that thing it also

76
00:02:46,940 --> 00:02:51,410
protects against many types of attack so

77
00:02:49,459 --> 00:02:53,660
our goal in essence is to map an

78
00:02:51,410 --> 00:02:55,700
arbitrary physical memory which requires

79
00:02:53,660 --> 00:02:57,049
modifying the page tables which requires

80
00:02:55,700 --> 00:03:00,079
knowing where they are<font color="#E5E5E5"> in virtual memory</font>

81
00:02:57,050 --> 00:03:01,519
before we can<font color="#E5E5E5"> change them so we could be</font>

82
00:03:00,080 --> 00:03:03,830
Colonel shellcode we could be live

83
00:03:01,519 --> 00:03:06,050
memory forensics etc so in this first

84
00:03:03,830 --> 00:03:08,300
scenario we have ring<font color="#CCCCCC"> 0 control but we</font>

85
00:03:06,050 --> 00:03:11,090
don't necessarily<font color="#E5E5E5"> have control over the</font>

86
00:03:08,300 --> 00:03:12,709
operating system and we want to do this

87
00:03:11,090 --> 00:03:14,480
in an OS independent way because

88
00:03:12,709 --> 00:03:16,660
architectural hacks are far more fun is

89
00:03:14,480 --> 00:03:20,929
you can't really patch the architecture

90
00:03:16,660 --> 00:03:22,820
so we know where the physical address of

91
00:03:20,930 --> 00:03:24,290
the page tables are that's in CR three

92
00:03:22,820 --> 00:03:25,519
but we don't know where they're mapped

93
00:03:24,290 --> 00:03:28,880
into virtual memory so we can't actually

94
00:03:25,519 --> 00:03:30,380
just access them the operating system

95
00:03:28,880 --> 00:03:32,150
usually hard codes that so if you're on

96
00:03:30,380 --> 00:03:33,590
Windows you just basically go to see in

97
00:03:32,150 --> 00:03:36,079
all zeros and you have the virtual

98
00:03:33,590 --> 00:03:38,420
address but I think those attacks are a

99
00:03:36,079 --> 00:03:40,430
lame so let's try to<font color="#E5E5E5"> do it more fun so</font>

100
00:03:38,420 --> 00:03:42,260
our chicken<font color="#E5E5E5"> and egg problem is the fact</font>

101
00:03:40,430 --> 00:03:44,870
that we<font color="#E5E5E5"> don't know where the virtual</font>

102
00:03:42,260 --> 00:03:47,570
pointer is for the page tables but we do

103
00:03:44,870 --> 00:03:49,280
know the physical<font color="#CCCCCC"> all right this is a</font>

104
00:03:47,570 --> 00:03:50,870
talk usually I give over 40<font color="#CCCCCC"> minutes and</font>

105
00:03:49,280 --> 00:03:53,900
<font color="#E5E5E5">so I'm trying to condense it down so</font>

106
00:03:50,870 --> 00:03:56,120
it's going to be fast so what we need we

107
00:03:53,900 --> 00:03:58,489
need to control just 32 bits of memory

108
00:03:56,120 --> 00:04:00,049
at a known physical address oh look at

109
00:03:58,489 --> 00:04:03,680
that it's already giving<font color="#CCCCCC"> me the red flag</font>

110
00:04:00,049 --> 00:04:08,360
I have a timer of here you know Klaus

111
00:04:03,680 --> 00:04:10,880
right so if<font color="#E5E5E5"> we can get 32 bits of memory</font>

112
00:04:08,360 --> 00:04:12,829
we can bootstrap everything so let's go

113
00:04:10,880 --> 00:04:15,470
look at this PCI Express<font color="#CCCCCC"> ECAM one more</font>

114
00:04:12,829 --> 00:04:17,720
time so<font color="#CCCCCC"> portillo used to be how you</font>

115
00:04:15,470 --> 00:04:19,728
configure port pci devices is very very

116
00:04:17,720 --> 00:04:21,859
<font color="#E5E5E5">slow youth access it like no more than</font>

117
00:04:19,728 --> 00:04:23,750
<font color="#E5E5E5">one D word at a time and you had to</font>

118
00:04:21,858 --> 00:04:27,680
stand to request / you send an address

119
00:04:23,750 --> 00:04:28,849
to see if 80 X<font color="#E5E5E5"> cf8 and then you had to</font>

120
00:04:27,680 --> 00:04:30,349
send the data to see

121
00:04:28,849 --> 00:04:31,819
see so it's very very<font color="#E5E5E5"> slow so they came</font>

122
00:04:30,349 --> 00:04:35,599
up<font color="#E5E5E5"> with a way</font><font color="#CCCCCC"> to access it faster for</font>

123
00:04:31,819 --> 00:04:37,819
<font color="#CCCCCC">PCI Express PCI Express is faster what</font>

124
00:04:35,599 --> 00:04:40,808
<font color="#CCCCCC">ecam does is it basically shadows those</font>

125
00:04:37,819 --> 00:04:43,849
registers into physical memory at the

126
00:04:40,809 --> 00:04:46,879
MCH level and the base address of this

127
00:04:43,849 --> 00:04:49,639
is stored in a<font color="#CCCCCC"> PCI Express register</font>

128
00:04:46,879 --> 00:04:51,289
which you can access report<font color="#E5E5E5"> I oh so what</font>

129
00:04:49,639 --> 00:04:53,270
do we do we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to create a page</font>

130
00:04:51,289 --> 00:04:56,240
table entry a single page directory

131
00:04:53,270 --> 00:04:58,039
entry that we put somewhere in pci

132
00:04:56,240 --> 00:05:00,080
config space that we can use port io to

133
00:04:58,039 --> 00:05:01,639
write<font color="#E5E5E5"> to and we also know the physical</font>

134
00:05:00,080 --> 00:05:04,188
address of the base<font color="#CCCCCC"> of all of</font><font color="#E5E5E5"> PCI</font>

135
00:05:01,639 --> 00:05:06,050
<font color="#E5E5E5">Express and then we can mark it</font>

136
00:05:04,189 --> 00:05:09,529
basically as present that maps in our

137
00:05:06,050 --> 00:05:12,499
existing operating system cr3 value we

138
00:05:09,529 --> 00:05:14,479
insert that using port<font color="#E5E5E5"> i/o and then we</font>

139
00:05:12,499 --> 00:05:16,279
<font color="#CCCCCC">try to figure out where that physical</font>

140
00:05:14,479 --> 00:05:18,139
address is and then we can<font color="#E5E5E5"> basically set</font>

141
00:05:16,279 --> 00:05:19,969
the CR<font color="#CCCCCC"> 3 to that and</font><font color="#E5E5E5"> we can recursively</font>

142
00:05:18,139 --> 00:05:21,979
map in the operators and page tables

143
00:05:19,969 --> 00:05:23,539
create a<font color="#E5E5E5"> new recursive mapping that we</font>

144
00:05:21,979 --> 00:05:26,269
know for this<font color="#E5E5E5"> page tables at a known</font>

145
00:05:23,539 --> 00:05:28,188
virtual address and then be<font color="#CCCCCC"> able to do</font>

146
00:05:26,269 --> 00:05:29,809
whatever<font color="#E5E5E5"> we need to do so the issue is</font>

147
00:05:28,189 --> 00:05:32,209
is<font color="#CCCCCC"> that if you're just writing to</font>

148
00:05:29,809 --> 00:05:34,399
arbitrary registers and PCI config space

149
00:05:32,209 --> 00:05:38,269
we might crash the system conveniently

150
00:05:34,399 --> 00:05:40,309
<font color="#CCCCCC">Intel made a register called</font><font color="#E5E5E5"> scratch pad</font>

151
00:05:38,269 --> 00:05:42,499
data which just says do<font color="#E5E5E5"> whatever you</font>

152
00:05:40,309 --> 00:05:44,360
<font color="#CCCCCC">want with this it doesn't</font><font color="#E5E5E5"> do anything so</font>

153
00:05:42,499 --> 00:05:48,680
it's exactly<font color="#E5E5E5"> 32 bits long which is</font>

154
00:05:44,360 --> 00:05:50,329
perfect so<font color="#CCCCCC"> thank you Intel and so now</font>

155
00:05:48,680 --> 00:05:53,029
basically we're able to do that and<font color="#E5E5E5"> then</font>

156
00:05:50,329 --> 00:05:54,199
we can use<font color="#E5E5E5"> the PCI Express bar register</font>

157
00:05:53,029 --> 00:05:56,180
to figure out where in physical memory

158
00:05:54,199 --> 00:05:59,059
and we get<font color="#E5E5E5"> this really nice recursive</font>

159
00:05:56,180 --> 00:06:00,709
memory so we're going to change<font color="#CCCCCC"> cr3 to</font>

160
00:05:59,059 --> 00:06:02,569
point which<font color="#CCCCCC"> is actually tricking the CPU</font>

161
00:06:00,709 --> 00:06:04,579
into using device memory as its page

162
00:06:02,569 --> 00:06:07,879
tables which should not happen but

163
00:06:04,579 --> 00:06:09,829
thanks<font color="#E5E5E5"> to pci express that can happen it</font>

164
00:06:07,879 --> 00:06:12,050
won't trash the TLB because the kernel

165
00:06:09,829 --> 00:06:13,219
code is marked as global the CPU doesn't

166
00:06:12,050 --> 00:06:14,749
realize it's doing anything wrong

167
00:06:13,219 --> 00:06:16,669
because it's<font color="#CCCCCC"> just asking for</font><font color="#E5E5E5"> memory from</font>

168
00:06:14,749 --> 00:06:19,009
<font color="#E5E5E5">the MCH and the MCH doesn't know why</font>

169
00:06:16,669 --> 00:06:20,448
you're using<font color="#E5E5E5"> that memory and then it's</font>

170
00:06:19,009 --> 00:06:22,219
going<font color="#E5E5E5"> to look for the real page</font>

171
00:06:20,449 --> 00:06:24,649
directory the ones the operating system

172
00:06:22,219 --> 00:06:26,990
uses to figure out where there's a free

173
00:06:24,649 --> 00:06:28,459
entry switch back<font color="#CCCCCC"> to see our three back</font>

174
00:06:26,990 --> 00:06:30,379
to the operating system and continue on

175
00:06:28,459 --> 00:06:31,759
but now we<font color="#CCCCCC"> have a virtual pointer to the</font>

176
00:06:30,379 --> 00:06:33,649
operating system address and we can do

177
00:06:31,759 --> 00:06:35,089
<font color="#E5E5E5">whatever we want and it's like 30 lines</font>

178
00:06:33,649 --> 00:06:37,249
of assembly you probably can't read<font color="#CCCCCC"> that</font>

179
00:06:35,089 --> 00:06:38,749
it's really small but basically there's

180
00:06:37,249 --> 00:06:39,919
like four lines of map that actually

181
00:06:38,749 --> 00:06:41,580
matters and if you guys want to<font color="#E5E5E5"> I can</font>

182
00:06:39,919 --> 00:06:43,889
send to you later so

183
00:06:41,580 --> 00:06:45,990
it's very complicated as you<font color="#E5E5E5"> have to</font>

184
00:06:43,889 --> 00:06:47,699
make<font color="#CCCCCC"> sure that you're not like caching</font>

185
00:06:45,990 --> 00:06:48,720
or going outside<font color="#E5E5E5"> of your cash boundaries</font>

186
00:06:47,699 --> 00:06:52,439
while you're doing it but it's pretty

187
00:06:48,720 --> 00:06:54,569
<font color="#E5E5E5">easy so why is this the case it's a</font>

188
00:06:52,439 --> 00:06:56,219
feature creep basically they kept adding

189
00:06:54,569 --> 00:06:57,870
more features and then didn't look how

190
00:06:56,219 --> 00:07:00,150
<font color="#CCCCCC">that might have gone back and changed</font>

191
00:06:57,870 --> 00:07:01,770
some of the earlier assumptions so the

192
00:07:00,150 --> 00:07:03,810
ECAM is for higher performance and

193
00:07:01,770 --> 00:07:04,979
obviously platform manufacturers always

194
00:07:03,810 --> 00:07:06,689
want<font color="#E5E5E5"> to sell things that are faster and</font>

195
00:07:04,979 --> 00:07:07,949
newer and they<font color="#CCCCCC"> don't necessarily</font><font color="#E5E5E5"> look at</font>

196
00:07:06,689 --> 00:07:09,629
how<font color="#CCCCCC"> that might impact previous</font>

197
00:07:07,949 --> 00:07:11,759
assumptions this happens all the time

198
00:07:09,629 --> 00:07:15,330
there's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> smm caching bug the virtual</font>

199
00:07:11,759 --> 00:07:16,889
machine side channels etc so if you want

200
00:07:15,330 --> 00:07:18,690
<font color="#E5E5E5">to do this you can do live forensics so</font>

201
00:07:16,889 --> 00:07:20,879
if you<font color="#E5E5E5"> don't necessarily</font><font color="#CCCCCC"> trust the OSAP</font>

202
00:07:18,690 --> 00:07:23,370
I to do memory if you need full memory

203
00:07:20,879 --> 00:07:25,020
access or if you want<font color="#E5E5E5"> to you know for</font>

204
00:07:23,370 --> 00:07:26,340
<font color="#E5E5E5">reasons have general Colonel</font><font color="#CCCCCC"> shell code</font>

205
00:07:25,020 --> 00:07:28,409
and you want to access<font color="#E5E5E5"> full system</font>

206
00:07:26,340 --> 00:07:30,270
memory and memory mapped i/o without

207
00:07:28,409 --> 00:07:36,029
calling any system calls that might be

208
00:07:30,270 --> 00:07:37,409
logged so I complained to Intel about

209
00:07:36,029 --> 00:07:38,699
this and they said oh don't worry son of

210
00:07:37,409 --> 00:07:41,879
vulnerabilities you already had journal

211
00:07:38,699 --> 00:07:43,169
Colonel access so let's see if in how

212
00:07:41,879 --> 00:07:46,710
many 10 minutes<font color="#E5E5E5"> we have like two and a</font>

213
00:07:43,169 --> 00:07:49,469
half one minute if I can go from this to

214
00:07:46,710 --> 00:07:51,690
ring three so two more terms DMA direct

215
00:07:49,469 --> 00:07:54,930
memory access and<font color="#E5E5E5"> ATA is the legacy disk</font>

216
00:07:51,690 --> 00:07:57,360
access mechanism so what you can do is

217
00:07:54,930 --> 00:07:59,009
you can<font color="#CCCCCC"> use a TA DMA to basically tell</font>

218
00:07:57,360 --> 00:08:01,589
the hard drive to write to memory at a

219
00:07:59,009 --> 00:08:03,060
known location so you can either use

220
00:08:01,589 --> 00:08:04,529
that to overwrite the kernel or the

221
00:08:03,060 --> 00:08:06,360
interrupt vector table or in our

222
00:08:04,529 --> 00:08:08,099
scripture table but you need to actually

223
00:08:06,360 --> 00:08:09,960
be able<font color="#E5E5E5"> to write to physical memory and</font>

224
00:08:08,099 --> 00:08:11,849
have poured<font color="#E5E5E5"> I oh so you can use portico</font>

225
00:08:09,960 --> 00:08:13,349
from ring<font color="#CCCCCC"> three as long as you have I</font>

226
00:08:11,849 --> 00:08:15,539
opl which is something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> like x</font>

227
00:08:13,349 --> 00:08:17,039
server and stuff runs with so you can

228
00:08:15,539 --> 00:08:18,659
actually set<font color="#CCCCCC"> up a table in the ECAM</font>

229
00:08:17,039 --> 00:08:20,250
pointing to the memory dress from which

230
00:08:18,659 --> 00:08:21,839
basically follow you want to write to

231
00:08:20,250 --> 00:08:23,099
you can<font color="#E5E5E5"> write</font><font color="#CCCCCC"> the payload to the disk</font>

232
00:08:21,839 --> 00:08:24,990
and then use part<font color="#CCCCCC"> I would tell the</font><font color="#E5E5E5"> disk</font>

233
00:08:23,099 --> 00:08:26,699
and the DMA control to read it and that

234
00:08:24,990 --> 00:08:29,789
just happens by the disk outside of the

235
00:08:26,699 --> 00:08:31,169
CPU so let's see here this is<font color="#E5E5E5"> what the</font>

236
00:08:29,789 --> 00:08:34,229
table<font color="#E5E5E5"> will look like which you can just</font>

237
00:08:31,169 --> 00:08:35,880
shove<font color="#CCCCCC"> into the ECAM and then you can</font>

238
00:08:34,229 --> 00:08:37,919
send those kind of rub<font color="#CCCCCC"> bytes and now</font>

239
00:08:35,880 --> 00:08:39,990
basically have full<font color="#E5E5E5"> read/write access to</font>

240
00:08:37,919 --> 00:08:41,880
the entire memory space from ring<font color="#E5E5E5"> three</font>

241
00:08:39,990 --> 00:08:45,029
and what you do with that is an exercise

242
00:08:41,880 --> 00:08:46,529
left to the reader so few caveats v TD

243
00:08:45,029 --> 00:08:48,930
is on most systems and<font color="#E5E5E5"> they can block</font>

244
00:08:46,529 --> 00:08:50,730
DMA and then also newer drivers are an

245
00:08:48,930 --> 00:08:54,180
HCI mode which is<font color="#E5E5E5"> far more complicated</font>

246
00:08:50,730 --> 00:08:55,290
to do so conclusions nifty trick not

247
00:08:54,180 --> 00:08:57,180
exactly a security hole

248
00:08:55,290 --> 00:08:59,399
you have there already have some level

249
00:08:57,180 --> 00:09:02,008
of access but x86 is full of weird

250
00:08:59,399 --> 00:09:04,019
machines new architectural features

251
00:09:02,009 --> 00:09:06,120
probably create broken and<font color="#CCCCCC"> variants and</font>

252
00:09:04,019 --> 00:09:07,769
<font color="#E5E5E5">this is just one</font><font color="#CCCCCC"> example Intel's pretty</font>

253
00:09:06,120 --> 00:09:10,019
cool hopefully<font color="#E5E5E5"> they can take a joke and</font>

254
00:09:07,769 --> 00:09:12,690
if you want more<font color="#CCCCCC"> details in pok or GTFO</font>

255
00:09:10,019 --> 00:09:16,579
0<font color="#CCCCCC"> X 5 I have all the source code and a</font>

256
00:09:12,690 --> 00:09:16,579
whole bunch<font color="#E5E5E5"> of more details so thank you</font>

