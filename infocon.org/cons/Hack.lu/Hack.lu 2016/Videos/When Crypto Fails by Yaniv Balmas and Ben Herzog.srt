1
00:00:03,150 --> 00:00:10,720
hey everyone thank you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for</font>

2
00:00:06,790 --> 00:00:12,370
coming to our talk my name is univ with

3
00:00:10,720 --> 00:00:14,559
me here is ben were both<font color="#CCCCCC"> security</font>

4
00:00:12,370 --> 00:00:16,930
researchers and we work at check point

5
00:00:14,559 --> 00:00:19,119
software technologies and we're here

6
00:00:16,930 --> 00:00:22,720
<font color="#E5E5E5">today to talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you about cryptographic</font>

7
00:00:19,119 --> 00:00:25,029
failures and<font color="#CCCCCC"> the thing is you know if</font>

8
00:00:22,720 --> 00:00:27,220
<font color="#E5E5E5">you're if you did anything to do with</font>

9
00:00:25,029 --> 00:00:29,050
malware for the past few years then you

10
00:00:27,220 --> 00:00:33,040
probably know that cryptography<font color="#CCCCCC"> is</font>

11
00:00:29,050 --> 00:00:35,710
something that really<font color="#E5E5E5"> mal really started</font>

12
00:00:33,040 --> 00:00:38,320
using a lot during the past few years

13
00:00:35,710 --> 00:00:41,020
right so more malware is using

14
00:00:38,320 --> 00:00:43,870
cryptography and more malware is using

15
00:00:41,020 --> 00:00:45,820
<font color="#E5E5E5">better cryptography and this sometimes</font>

16
00:00:43,870 --> 00:00:48,339
can put malware researchers and<font color="#CCCCCC"> malvo</font>

17
00:00:45,820 --> 00:00:50,680
analyst in some kind of a sticky

18
00:00:48,340 --> 00:00:53,250
position where they are expected to show

19
00:00:50,680 --> 00:00:56,079
abilities that are usually reserved to

20
00:00:53,250 --> 00:00:58,210
<font color="#E5E5E5">mathematic phd's or crypto analysts</font>

21
00:00:56,079 --> 00:01:00,609
right you<font color="#E5E5E5"> are now expected to break this</font>

22
00:00:58,210 --> 00:01:02,770
crypto system and sometimes this test

23
00:01:00,609 --> 00:01:05,800
can look a bit big and you know you

24
00:01:02,770 --> 00:01:07,810
don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to do it so we</font><font color="#CCCCCC"> pre</font>

25
00:01:05,800 --> 00:01:10,570
<font color="#E5E5E5">we prepare this presentation in order to</font>

26
00:01:07,810 --> 00:01:13,720
show you<font color="#E5E5E5"> that this is</font><font color="#CCCCCC"> actually rarely</font>

27
00:01:10,570 --> 00:01:15,729
the case<font color="#E5E5E5"> because most times the bugs are</font>

28
00:01:13,720 --> 00:01:18,340
not actually in cryptography but the

29
00:01:15,729 --> 00:01:21,490
bugs are in the man implementing

30
00:01:18,340 --> 00:01:24,820
cryptography right and in order<font color="#E5E5E5"> to do</font>

31
00:01:21,490 --> 00:01:27,100
that we find<font color="#CCCCCC"> pick the few examples that</font>

32
00:01:24,820 --> 00:01:29,559
we've researched during the past<font color="#CCCCCC"> few</font>

33
00:01:27,100 --> 00:01:32,380
years and hopefully<font color="#E5E5E5"> you can have some</font>

34
00:01:29,560 --> 00:01:34,840
takeaways on the methods<font color="#E5E5E5"> and techniques</font>

35
00:01:32,380 --> 00:01:36,490
you could use in order<font color="#E5E5E5"> to fight against</font>

36
00:01:34,840 --> 00:01:38,530
this cryptography and maybe turn the

37
00:01:36,490 --> 00:01:42,310
tables on the malware authors and use

38
00:01:38,530 --> 00:01:45,640
this cryptography against them just a

39
00:01:42,310 --> 00:01:47,320
short<font color="#CCCCCC"> disclaimer before we begin all the</font>

40
00:01:45,640 --> 00:01:51,220
examples you're going to see<font color="#CCCCCC"> here have</font>

41
00:01:47,320 --> 00:01:54,309
either already been fixed or published

42
00:01:51,220 --> 00:01:56,310
before and that is<font color="#CCCCCC"> because we really</font>

43
00:01:54,310 --> 00:01:58,810
believe that<font color="#E5E5E5"> you know sometimes we see</font>

44
00:01:56,310 --> 00:02:01,149
individual individual researchers or

45
00:01:58,810 --> 00:02:03,640
even AV companies or security companies

46
00:02:01,149 --> 00:02:06,549
just posting you<font color="#E5E5E5"> know hey we found this</font>

47
00:02:03,640 --> 00:02:09,699
crypto bug in this malware and it's a

48
00:02:06,549 --> 00:02:12,160
great blog post<font color="#E5E5E5"> and it also gets great</font>

49
00:02:09,699 --> 00:02:14,200
PR but we believe it's<font color="#E5E5E5"> the wrong</font><font color="#CCCCCC"> thing</font>

50
00:02:12,160 --> 00:02:15,870
to do because all you're actually doing

51
00:02:14,200 --> 00:02:17,579
is giving<font color="#E5E5E5"> the</font><font color="#CCCCCC"> maillot</font><font color="#E5E5E5"> others</font>

52
00:02:15,870 --> 00:02:21,239
the exact information they need in order

53
00:02:17,580 --> 00:02:24,000
to go and fix their malware get up and

54
00:02:21,239 --> 00:02:25,980
get a new version out there and now your

55
00:02:24,000 --> 00:02:29,700
blog post is your event<font color="#E5E5E5"> and the entire</font>

56
00:02:25,980 --> 00:02:33,959
industry just lots lost his edge on this

57
00:02:29,700 --> 00:02:36,119
malware so there<font color="#E5E5E5"> is nothing new we</font>

58
00:02:33,959 --> 00:02:39,329
disclose all all the new findings we

59
00:02:36,120 --> 00:02:42,060
have privately with the community<font color="#CCCCCC"> and</font>

60
00:02:39,329 --> 00:02:43,379
the<font color="#E5E5E5"> example themselves actually are not</font>

61
00:02:42,060 --> 00:02:45,870
<font color="#E5E5E5">really important at least</font><font color="#CCCCCC"> in my opinion</font>

62
00:02:43,379 --> 00:02:47,970
what<font color="#E5E5E5"> is important is the takeaways from</font>

63
00:02:45,870 --> 00:02:50,280
these<font color="#CCCCCC"> examples and now without further</font>

64
00:02:47,970 --> 00:02:52,910
<font color="#E5E5E5">ado I will let them present the first</font>

65
00:02:50,280 --> 00:02:56,010
few examples<font color="#E5E5E5"> okay thank you anything</font>

66
00:02:52,910 --> 00:02:57,629
<font color="#CCCCCC">okay so the first category of</font><font color="#E5E5E5"> creep of</font>

67
00:02:56,010 --> 00:03:00,179
failure the freedom to talk about is

68
00:02:57,629 --> 00:03:01,828
voodoo programming now voodoo

69
00:03:00,180 --> 00:03:03,720
programming is programming that stems

70
00:03:01,829 --> 00:03:05,519
from a warm fuzzy feeling in your gut

71
00:03:03,720 --> 00:03:07,620
<font color="#E5E5E5">that the code you're writing right now</font>

72
00:03:05,519 --> 00:03:11,159
kind of seems like it could be<font color="#E5E5E5"> the right</font>

73
00:03:07,620 --> 00:03:13,079
idea in theory so you know some crypto

74
00:03:11,159 --> 00:03:15,269
failures completely wreck curricula

75
00:03:13,079 --> 00:03:17,040
systems and then other critical failures

76
00:03:15,269 --> 00:03:18,780
don't do that much<font color="#E5E5E5"> damage they mainly</font>

77
00:03:17,040 --> 00:03:20,940
give us a window into the paranoid

78
00:03:18,780 --> 00:03:22,680
delusional soul of a<font color="#CCCCCC"> moral developer and</font>

79
00:03:20,940 --> 00:03:24,870
the way that fundamentally they have no

80
00:03:22,680 --> 00:03:27,329
<font color="#E5E5E5">idea what they are doing so let's talk</font>

81
00:03:24,870 --> 00:03:29,280
about juice it's the granddaddy of all

82
00:03:27,329 --> 00:03:31,019
banking<font color="#E5E5E5"> Trojans it infected millions of</font>

83
00:03:29,280 --> 00:03:32,700
machines and caused tens of millions of

84
00:03:31,019 --> 00:03:34,769
<font color="#E5E5E5">dollars</font><font color="#CCCCCC"> in damages but we're not here to</font>

85
00:03:32,700 --> 00:03:36,540
talk<font color="#E5E5E5"> about that today we're here to talk</font>

86
00:03:34,769 --> 00:03:39,060
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way the deuce encrypts its</font>

87
00:03:36,540 --> 00:03:40,379
outgoing traffic it to encrypt its

88
00:03:39,060 --> 00:03:43,519
outgoing traffic it uses something

89
00:03:40,379 --> 00:03:46,108
called<font color="#CCCCCC"> rc4 now rc4 is a stream cipher</font>

90
00:03:43,519 --> 00:03:48,540
invented during the<font color="#E5E5E5"> 80s by ron rivest</font>

91
00:03:46,109 --> 00:03:51,599
and it's really<font color="#E5E5E5"> popular tears in malware</font>

92
00:03:48,540 --> 00:03:53,849
for two reasons first of all our c4 is

93
00:03:51,599 --> 00:03:56,040
really easy to implement if you look<font color="#E5E5E5"> at</font>

94
00:03:53,849 --> 00:03:58,980
<font color="#E5E5E5">the image up during the slide half the</font>

95
00:03:56,040 --> 00:04:01,198
rc4 logic is already in there and the

96
00:03:58,980 --> 00:04:04,410
second<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> rc4 so popular tears in</font>

97
00:04:01,199 --> 00:04:05,970
malware is that it's good enough I mean

98
00:04:04,410 --> 00:04:08,340
yes<font color="#CCCCCC"> you</font><font color="#E5E5E5"> may</font><font color="#CCCCCC"> have heard about attacks on</font>

99
00:04:05,970 --> 00:04:10,709
our c4 and so on but for such a use case

100
00:04:08,340 --> 00:04:14,190
of encrypting outgoing traffic of

101
00:04:10,709 --> 00:04:16,349
malware our c4 should do but you know

102
00:04:14,190 --> 00:04:18,719
this is<font color="#E5E5E5"> guys did</font><font color="#CCCCCC"> not agree so they</font>

103
00:04:16,349 --> 00:04:21,209
<font color="#CCCCCC">decided to</font><font color="#E5E5E5"> introduce their own redesign</font>

104
00:04:18,720 --> 00:04:25,050
from the ground up of our c4 that we

105
00:04:21,209 --> 00:04:27,150
like to call<font color="#CCCCCC"> zark for now if you look at</font>

106
00:04:25,050 --> 00:04:28,590
<font color="#CCCCCC">the</font><font color="#E5E5E5"> dark for and compare it against</font><font color="#CCCCCC"> RC</font>

107
00:04:27,150 --> 00:04:29,580
form you'll see that the actual

108
00:04:28,590 --> 00:04:32,099
difference is just

109
00:04:29,580 --> 00:04:34,198
those last<font color="#E5E5E5"> two</font><font color="#CCCCCC"> lungs what they do is</font>

110
00:04:32,099 --> 00:04:36,479
<font color="#CCCCCC">that once you have the rc4 ciphertext</font>

111
00:04:34,199 --> 00:04:39,629
those last two lines take each bite of

112
00:04:36,479 --> 00:04:41,460
the resulting ciphertext and<font color="#CCCCCC"> xor it with</font>

113
00:04:39,629 --> 00:04:44,430
the next<font color="#E5E5E5"> byte to create a new and</font>

114
00:04:41,460 --> 00:04:46,289
improved<font color="#E5E5E5"> ciphertext now you know by now</font>

115
00:04:44,430 --> 00:04:48,120
I've told<font color="#CCCCCC"> this</font><font color="#E5E5E5"> story to many people and</font>

116
00:04:46,289 --> 00:04:50,430
what they all<font color="#E5E5E5"> had in common was a</font>

117
00:04:48,120 --> 00:04:53,639
complete lack<font color="#E5E5E5"> of a reaction to that last</font>

118
00:04:50,430 --> 00:04:56,009
<font color="#E5E5E5">part which is</font><font color="#CCCCCC"> a pity because guys if you</font>

119
00:04:53,639 --> 00:04:58,020
take<font color="#CCCCCC"> a cryptosystem and to the end of</font>

120
00:04:56,009 --> 00:05:00,449
that cryptosystem you append<font color="#E5E5E5"> a constant</font>

121
00:04:58,020 --> 00:05:03,030
linear transformation you have added

122
00:05:00,449 --> 00:05:04,949
zero security<font color="#E5E5E5"> to that crypto system none</font>

123
00:05:03,030 --> 00:05:07,068
it's completely<font color="#E5E5E5"> useless it's like</font>

124
00:05:04,949 --> 00:05:10,620
relaying your cipher text in pig latin

125
00:05:07,069 --> 00:05:12,509
now out there<font color="#CCCCCC"> you know it's</font><font color="#E5E5E5"> just it's</font>

126
00:05:10,620 --> 00:05:14,009
not that just there is<font color="#CCCCCC"> this guys</font><font color="#E5E5E5"> that do</font>

127
00:05:12,509 --> 00:05:16,919
this kind of thing out there there<font color="#E5E5E5"> is a</font>

128
00:05:14,009 --> 00:05:18,840
veritable sea of malware doing all of

129
00:05:16,919 --> 00:05:20,909
those changes in introducing all of

130
00:05:18,840 --> 00:05:23,969
those tweaks to crypto that's been<font color="#E5E5E5"> known</font>

131
00:05:20,909 --> 00:05:26,310
<font color="#CCCCCC">to work so we're left with only</font><font color="#E5E5E5"> one</font>

132
00:05:23,969 --> 00:05:30,629
question that's natural to ask which is

133
00:05:26,310 --> 00:05:32,460
why why do the<font color="#E5E5E5"> Zeus guys do this now we</font>

134
00:05:30,629 --> 00:05:34,620
can't read the minds<font color="#E5E5E5"> of Marvel</font>

135
00:05:32,460 --> 00:05:36,419
developers but we<font color="#E5E5E5"> have a working theory</font>

136
00:05:34,620 --> 00:05:38,400
so let's<font color="#E5E5E5"> put ourselves in their shoes</font>

137
00:05:36,419 --> 00:05:40,830
for a moment and<font color="#E5E5E5"> syd word from their</font>

138
00:05:38,400 --> 00:05:42,739
paranoid point of view they believe<font color="#CCCCCC"> that</font>

139
00:05:40,830 --> 00:05:45,089
somewhere out there does this<font color="#E5E5E5"> shady guy</font>

140
00:05:42,740 --> 00:05:46,740
wakes up every morning and says to

141
00:05:45,089 --> 00:05:49,259
himself haha today I'm<font color="#E5E5E5"> going to read me</font>

142
00:05:46,740 --> 00:05:51,210
some Zeus traffic and this guy has

143
00:05:49,259 --> 00:05:54,029
access to a magic box which is<font color="#E5E5E5"> capable</font>

144
00:05:51,210 --> 00:05:56,370
of staring rc4 ciphertext straight in

145
00:05:54,029 --> 00:05:59,159
the face and decrypting it just like

146
00:05:56,370 --> 00:06:00,900
<font color="#CCCCCC">that without having the king now I am</font>

147
00:05:59,159 --> 00:06:02,339
not capable of such a feat and<font color="#E5E5E5"> I am</font>

148
00:06:00,900 --> 00:06:05,339
<font color="#E5E5E5">going to guess that nobody in this room</font>

149
00:06:02,339 --> 00:06:07,800
is<font color="#E5E5E5"> capable of such a fever but this guy</font>

150
00:06:05,339 --> 00:06:10,409
<font color="#CCCCCC">can do it and the Zeus guys cannot bear</font>

151
00:06:07,800 --> 00:06:12,599
to live with<font color="#E5E5E5"> this kind of friend so in</font>

152
00:06:10,409 --> 00:06:14,460
their desperation they resort to the

153
00:06:12,599 --> 00:06:17,159
only trick they can think<font color="#E5E5E5"> of resorting</font>

154
00:06:14,460 --> 00:06:19,680
<font color="#E5E5E5">to witches in this case a Jedi mind</font>

155
00:06:17,159 --> 00:06:22,500
trick which means that they<font color="#E5E5E5"> take their</font>

156
00:06:19,680 --> 00:06:25,110
hand extended forward and saying mr.

157
00:06:22,500 --> 00:06:28,500
agent this is not<font color="#E5E5E5"> the algorithm you</font>

158
00:06:25,110 --> 00:06:31,379
looking for because you see your magic

159
00:06:28,500 --> 00:06:33,360
box works on our c4 and we're<font color="#E5E5E5"> using zark</font>

160
00:06:31,379 --> 00:06:35,250
<font color="#CCCCCC">fourth completely different it has this</font>

161
00:06:33,360 --> 00:06:38,009
linear transformation at the end and

162
00:06:35,250 --> 00:06:40,080
what they<font color="#CCCCCC"> expect to happen is for</font><font color="#E5E5E5"> this</font>

163
00:06:38,009 --> 00:06:42,689
agent guide to Justin or go stand in the

164
00:06:40,080 --> 00:06:44,369
corner<font color="#E5E5E5"> and cry now</font>

165
00:06:42,689 --> 00:06:45,959
actually what would happen if we assumed

166
00:06:44,369 --> 00:06:48,119
it's such a guy with such a capability

167
00:06:45,959 --> 00:06:50,129
even exist at all is<font color="#E5E5E5"> that he's going to</font>

168
00:06:48,119 --> 00:06:52,319
take<font color="#E5E5E5"> five minutes to figure out what</font>

169
00:06:50,129 --> 00:06:54,449
they did<font color="#CCCCCC"> right look at some reverse the</font>

170
00:06:52,319 --> 00:06:57,629
samples look at some traffic captures

171
00:06:54,449 --> 00:06:59,849
and put two and two together and figure

172
00:06:57,629 --> 00:07:02,759
out what they<font color="#CCCCCC"> did and like take the Sark</font>

173
00:06:59,849 --> 00:07:05,009
for ciphertext apply the inverse linear

174
00:07:02,759 --> 00:07:06,809
transformation to it and then run his

175
00:07:05,009 --> 00:07:09,319
magic box on it and now he has the

176
00:07:06,809 --> 00:07:11,459
<font color="#E5E5E5">plaintext and</font><font color="#CCCCCC"> we're back at square one</font>

177
00:07:09,319 --> 00:07:12,959
actually we're<font color="#CCCCCC"> not quite back at square</font>

178
00:07:11,459 --> 00:07:14,999
one because earlier this guy had a

179
00:07:12,959 --> 00:07:16,439
problem<font color="#E5E5E5"> right he woke up every</font><font color="#CCCCCC"> morning</font>

180
00:07:14,999 --> 00:07:18,389
and he wanted<font color="#E5E5E5"> to look at this traffic</font>

181
00:07:16,439 --> 00:07:20,999
and he had to fish it out from the sea

182
00:07:18,389 --> 00:07:23,579
of<font color="#E5E5E5"> other rc4 encrypted traffic but now</font>

183
00:07:20,999 --> 00:07:26,069
Zeus is using its own encryption scheme

184
00:07:23,579 --> 00:07:28,619
that only Jesus uses which is arc for

185
00:07:26,069 --> 00:07:31,110
and we<font color="#E5E5E5"> just a slab established that this</font>

186
00:07:28,619 --> 00:07:33,209
guy can<font color="#CCCCCC"> the croods art form so</font><font color="#E5E5E5"> only has</font>

187
00:07:31,110 --> 00:07:35,179
to do is<font color="#CCCCCC"> easy peasy Lee take his zone</font>

188
00:07:33,209 --> 00:07:37,769
for the crypto and search the web for

189
00:07:35,179 --> 00:07:40,018
traffic that can be decrypted using this

190
00:07:37,769 --> 00:07:43,949
decrypter and by lunch is going<font color="#E5E5E5"> to have</font>

191
00:07:40,019 --> 00:07:46,469
all<font color="#E5E5E5"> this traffic so even if we adopt the</font>

192
00:07:43,949 --> 00:07:48,899
assumptions<font color="#E5E5E5"> that the Zeus guys started</font>

193
00:07:46,469 --> 00:07:50,429
here working with we end up with the

194
00:07:48,899 --> 00:07:52,469
conclusion that the Zeus guys may<font color="#CCCCCC"> have</font>

195
00:07:50,429 --> 00:07:54,029
tried<font color="#CCCCCC"> to disguise their traffic but they</font>

196
00:07:52,469 --> 00:07:58,139
ended up just<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> more attention to</font>

197
00:07:54,029 --> 00:08:00,839
<font color="#E5E5E5">it okay so next example that we're going</font>

198
00:07:58,139 --> 00:08:02,339
<font color="#E5E5E5">to talk about is Linux encoder links</font>

199
00:08:00,839 --> 00:08:04,860
recorder is the first ransomware

200
00:08:02,339 --> 00:08:07,529
reported that was targeted at the linux

201
00:08:04,860 --> 00:08:10,379
operating system discovered around late

202
00:08:07,529 --> 00:08:12,239
2015 and actually it mainly propagates

203
00:08:10,379 --> 00:08:14,219
<font color="#E5E5E5">via vulnerability that was discovered at</font>

204
00:08:12,239 --> 00:08:16,529
<font color="#E5E5E5">checkpoint so here's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> link in case you</font>

205
00:08:14,219 --> 00:08:18,689
care about that now on the face of it

206
00:08:16,529 --> 00:08:22,469
linux encoder knows how to do encryption

207
00:08:18,689 --> 00:08:24,509
it<font color="#E5E5E5"> uses the</font><font color="#CCCCCC"> AES algorithm it uses it in</font>

208
00:08:22,469 --> 00:08:27,869
the CBC mode of operation so you cannot

209
00:08:24,509 --> 00:08:29,789
see the penguin<font color="#E5E5E5"> and it uses</font><font color="#CCCCCC"> third party</font>

210
00:08:27,869 --> 00:08:32,279
<font color="#E5E5E5">open-source crypto libraries which means</font>

211
00:08:29,789 --> 00:08:35,129
that<font color="#E5E5E5"> the chances for strange homebrew</font>

212
00:08:32,279 --> 00:08:37,110
crypto bugs are lowered compared to if

213
00:08:35,129 --> 00:08:40,050
they didn't now much like ever

214
00:08:37,110 --> 00:08:42,269
ransomware of its kind when Linux

215
00:08:40,049 --> 00:08:44,490
encoder runs across a victim file it

216
00:08:42,269 --> 00:08:46,439
generates a session key in<font color="#E5E5E5"> order to</font>

217
00:08:44,490 --> 00:08:48,540
perform the encryption and in order to

218
00:08:46,439 --> 00:08:51,300
randomly generate a session key you need

219
00:08:48,540 --> 00:08:53,189
access to a source of randomness now if

220
00:08:51,300 --> 00:08:54,870
your own linux and you need to randomly

221
00:08:53,189 --> 00:08:56,000
generate a number usually you would use

222
00:08:54,870 --> 00:08:58,280
Dave random order

223
00:08:56,000 --> 00:09:00,260
you random but those guys<font color="#E5E5E5"> came into it</font>

224
00:08:58,280 --> 00:09:02,209
in a very windows frame of mind so they

225
00:09:00,260 --> 00:09:03,770
decided<font color="#E5E5E5"> to use the current timestamp as</font>

226
00:09:02,210 --> 00:09:05,960
a random<font color="#E5E5E5"> seed to generate a random</font>

227
00:09:03,770 --> 00:09:08,689
number now even<font color="#CCCCCC"> if you're on Windows</font>

228
00:09:05,960 --> 00:09:10,820
that's not the best<font color="#E5E5E5"> way to do</font><font color="#CCCCCC"> it but</font>

229
00:09:08,690 --> 00:09:12,980
those guys setting themselves what the

230
00:09:10,820 --> 00:09:15,500
hell is going<font color="#E5E5E5"> to work right why spend</font>

231
00:09:12,980 --> 00:09:17,120
<font color="#E5E5E5">any more time on it and indeed if you're</font>

232
00:09:15,500 --> 00:09:19,970
<font color="#CCCCCC">going to look</font><font color="#E5E5E5"> at the links and code</font>

233
00:09:17,120 --> 00:09:22,700
executable the very first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> it does</font>

234
00:09:19,970 --> 00:09:24,740
is pull a random value based on the

235
00:09:22,700 --> 00:09:27,590
current timestamp as of the execution

236
00:09:24,740 --> 00:09:29,690
time and then that random value is used

237
00:09:27,590 --> 00:09:31,730
<font color="#CCCCCC">to later pseudo randomly generate all</font>

238
00:09:29,690 --> 00:09:34,610
<font color="#CCCCCC">the other random</font><font color="#E5E5E5"> values including all</font>

239
00:09:31,730 --> 00:09:37,610
the average session Keys everything so

240
00:09:34,610 --> 00:09:39,170
let's go over<font color="#CCCCCC"> what we just did we use</font>

241
00:09:37,610 --> 00:09:41,630
the current timestamp to generate a

242
00:09:39,170 --> 00:09:43,819
session key we use the session key to

243
00:09:41,630 --> 00:09:47,000
encrypt the victim file we wrote the

244
00:09:43,820 --> 00:09:49,070
victim file to disk so where's the catch

245
00:09:47,000 --> 00:09:51,200
let's think about that for a moment we

246
00:09:49,070 --> 00:09:53,390
just<font color="#CCCCCC"> created a new file with new and</font>

247
00:09:51,200 --> 00:09:56,870
encrypted content and another new thing

248
00:09:53,390 --> 00:09:59,180
<font color="#E5E5E5">this new file has is a new time stamp do</font>

249
00:09:56,870 --> 00:10:01,970
you see where<font color="#E5E5E5"> this is going ok do you</font>

250
00:09:59,180 --> 00:10:03,800
see it now right what's<font color="#CCCCCC"> going to happen</font>

251
00:10:01,970 --> 00:10:05,870
the victim now has access to the newly

252
00:10:03,800 --> 00:10:08,060
created<font color="#E5E5E5"> encrypted file which has a time</font>

253
00:10:05,870 --> 00:10:10,010
stamp which is<font color="#E5E5E5"> kind of like</font><font color="#CCCCCC"> the old time</font>

254
00:10:08,060 --> 00:10:11,479
stamp which can be used<font color="#E5E5E5"> to generate the</font>

255
00:10:10,010 --> 00:10:13,580
session key which can be used<font color="#CCCCCC"> to decrypt</font>

256
00:10:11,480 --> 00:10:16,040
the file this is kind<font color="#E5E5E5"> of like the</font>

257
00:10:13,580 --> 00:10:18,230
<font color="#CCCCCC">villain</font><font color="#E5E5E5"> of the movie taken calling Liam</font>

258
00:10:16,040 --> 00:10:20,060
Neeson and sang to him I have your

259
00:10:18,230 --> 00:10:21,800
<font color="#E5E5E5">daughter I'll never tell you where she</font>

260
00:10:20,060 --> 00:10:24,459
is<font color="#E5E5E5"> but you should</font><font color="#CCCCCC"> note the two seconds</font>

261
00:10:21,800 --> 00:10:28,160
ago<font color="#CCCCCC"> she was at</font><font color="#E5E5E5"> the hotel lobby that's a</font>

262
00:10:24,460 --> 00:10:30,620
now<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> the community could not</font>

263
00:10:28,160 --> 00:10:33,770
just let this excellent design choice

264
00:10:30,620 --> 00:10:35,480
pass by without comment i believe the

265
00:10:33,770 --> 00:10:39,800
credit is due to the gadget bitdefender

266
00:10:35,480 --> 00:10:43,010
for a spotting decision now this<font color="#CCCCCC"> is</font>

267
00:10:39,800 --> 00:10:46,099
completely useless advice<font color="#CCCCCC"> kurtas in the</font>

268
00:10:43,010 --> 00:10:48,350
crack I mean running<font color="#CCCCCC"> the hash function</font>

269
00:10:46,100 --> 00:10:50,540
<font color="#CCCCCC">at the timer is going to add zero</font>

270
00:10:48,350 --> 00:10:52,220
<font color="#E5E5E5">security but you know the Linux encoder</font>

271
00:10:50,540 --> 00:10:54,469
guys they took one look at this and we

272
00:10:52,220 --> 00:10:56,690
fly dies they said to themselves yes

273
00:10:54,470 --> 00:10:59,390
that's what we need in order to<font color="#E5E5E5"> improve</font>

274
00:10:56,690 --> 00:11:01,040
our runs and<font color="#CCCCCC"> we're more hashing and soon</font>

275
00:10:59,390 --> 00:11:03,050
enough a new<font color="#E5E5E5"> and</font><font color="#CCCCCC"> improved version of</font>

276
00:11:01,040 --> 00:11:05,240
<font color="#E5E5E5">Linux encoder came out we generate</font>

277
00:11:03,050 --> 00:11:08,060
session Keys by taking the<font color="#E5E5E5"> current</font>

278
00:11:05,240 --> 00:11:09,320
<font color="#E5E5E5">timestamp and invoking a hash function</font>

279
00:11:08,060 --> 00:11:12,079
on it

280
00:11:09,320 --> 00:11:14,060
eight<font color="#E5E5E5"> times in succession eight times</font>

281
00:11:12,080 --> 00:11:15,680
now as we all know that eight<font color="#E5E5E5"> times as</font>

282
00:11:14,060 --> 00:11:18,560
secure is using the hash<font color="#CCCCCC"> function just</font>

283
00:11:15,680 --> 00:11:21,079
once now to be<font color="#E5E5E5"> completely fair to the</font>

284
00:11:18,560 --> 00:11:23,719
<font color="#E5E5E5">lumix encoder guys they did fix the</font>

285
00:11:21,080 --> 00:11:25,880
original problem they made<font color="#E5E5E5"> sure that the</font>

286
00:11:23,720 --> 00:11:28,220
encrypted<font color="#CCCCCC"> the file time stamps will have</font>

287
00:11:25,880 --> 00:11:29,870
the same time stamps as a victim file so

288
00:11:28,220 --> 00:11:32,570
the attack<font color="#CCCCCC"> I described earlier was no</font>

289
00:11:29,870 --> 00:11:35,630
<font color="#E5E5E5">longer viable but there was a slight</font>

290
00:11:32,570 --> 00:11:38,840
issue left though they forgot<font color="#CCCCCC"> to tell</font>

291
00:11:35,630 --> 00:11:41,600
<font color="#CCCCCC">Paul or</font><font color="#E5E5E5"> SSL what hashing function to use</font>

292
00:11:38,840 --> 00:11:43,280
so as a result all eight calls to the

293
00:11:41,600 --> 00:11:45,530
hash and logic did not actually do

294
00:11:43,280 --> 00:11:47,959
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> and what happened is that the</font>

295
00:11:45,530 --> 00:11:49,459
<font color="#E5E5E5">seed</font><font color="#CCCCCC"> that was appended to the end of</font>

296
00:11:47,960 --> 00:11:52,250
each file for the purposes of

297
00:11:49,460 --> 00:11:54,260
verification was identical to the key

298
00:11:52,250 --> 00:11:57,500
that<font color="#E5E5E5"> you needed</font><font color="#CCCCCC"> to use in order to</font>

299
00:11:54,260 --> 00:11:59,510
decrypt the file so basically what this

300
00:11:57,500 --> 00:12:01,310
ransomware did was encrypt all the

301
00:11:59,510 --> 00:12:03,200
victim files and to the end of each file

302
00:12:01,310 --> 00:12:06,229
appended the key that you<font color="#E5E5E5"> could</font><font color="#CCCCCC"> use in</font>

303
00:12:03,200 --> 00:12:09,620
order<font color="#E5E5E5"> to decrypt the file right but you</font>

304
00:12:06,230 --> 00:12:11,090
know except<font color="#CCCCCC"> for</font><font color="#E5E5E5"> one this one act of</font>

305
00:12:09,620 --> 00:12:14,600
kindness the runs were now works

306
00:12:11,090 --> 00:12:16,700
perfectly so what are<font color="#CCCCCC"> our takeaways from</font>

307
00:12:14,600 --> 00:12:18,410
those two<font color="#E5E5E5"> examples first of all if our</font>

308
00:12:16,700 --> 00:12:20,390
encryption is not<font color="#E5E5E5"> broken don't fix it</font>

309
00:12:18,410 --> 00:12:21,800
second of all if you're up against

310
00:12:20,390 --> 00:12:23,810
time-based<font color="#E5E5E5"> crypto which means</font>

311
00:12:21,800 --> 00:12:25,280
cryptography that uses the current

312
00:12:23,810 --> 00:12:27,199
timestamp in order to generate random

313
00:12:25,280 --> 00:12:28,520
keys and so on you should follow<font color="#E5E5E5"> the</font>

314
00:12:27,200 --> 00:12:30,380
time stamps because you might find

315
00:12:28,520 --> 00:12:32,240
something<font color="#E5E5E5"> interesting and fruit of all</font>

316
00:12:30,380 --> 00:12:33,740
and most importantly don't listen to the

317
00:12:32,240 --> 00:12:37,580
clock because<font color="#E5E5E5"> he's probably trying to</font>

318
00:12:33,740 --> 00:12:39,320
troll you now the next<font color="#CCCCCC"> category that</font>

319
00:12:37,580 --> 00:12:41,630
we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk about is what we</font>

320
00:12:39,320 --> 00:12:44,240
like to call the copy and paste problem

321
00:12:41,630 --> 00:12:46,310
now I'm<font color="#E5E5E5"> sure nobody in this room as a</font>

322
00:12:44,240 --> 00:12:47,720
recopied and basic code but I hear it's

323
00:12:46,310 --> 00:12:51,650
something common that people sometimes

324
00:12:47,720 --> 00:12:53,270
do now one example of people<font color="#E5E5E5"> doing it is</font>

325
00:12:51,650 --> 00:12:56,240
<font color="#E5E5E5">the crypto defense ransomware which</font>

326
00:12:53,270 --> 00:12:57,949
first appeared around 2014 and it's a

327
00:12:56,240 --> 00:12:59,720
clone of crypto wall which is a clone of

328
00:12:57,950 --> 00:13:01,700
cryptolocker you can see up there the

329
00:12:59,720 --> 00:13:03,770
ransom notes for crypto wall and crypto

330
00:13:01,700 --> 00:13:05,870
defend their<font color="#E5E5E5"> nearly identical I can</font>

331
00:13:03,770 --> 00:13:08,510
barely tell the difference so how does

332
00:13:05,870 --> 00:13:11,690
<font color="#E5E5E5">cripple defense perform encryption well</font>

333
00:13:08,510 --> 00:13:14,240
on the face of it pretty well it uses

334
00:13:11,690 --> 00:13:16,580
public key encryption chooses the RSA

335
00:13:14,240 --> 00:13:19,100
algorithm and what happens is that when

336
00:13:16,580 --> 00:13:21,140
an infected machine gets it it first

337
00:13:19,100 --> 00:13:22,760
generates a private key<font color="#CCCCCC"> and the public</font>

338
00:13:21,140 --> 00:13:26,360
key the public key is

339
00:13:22,760 --> 00:13:28,730
<font color="#CCCCCC">use to</font><font color="#E5E5E5"> encrypt the files on the victim</font>

340
00:13:26,360 --> 00:13:30,890
system the private key gets sent over to

341
00:13:28,730 --> 00:13:33,110
the C&C server and now only the<font color="#CCCCCC"> cincy</font>

342
00:13:30,890 --> 00:13:35,000
server can decrypt the files now

343
00:13:33,110 --> 00:13:37,460
actually if you're writing runs around

344
00:13:35,000 --> 00:13:39,410
not that you should but if you are<font color="#E5E5E5"> what</font>

345
00:13:37,460 --> 00:13:42,110
you should do is generate the keys on

346
00:13:39,410 --> 00:13:44,540
<font color="#CCCCCC">the server side so we rate this ransom</font>

347
00:13:42,110 --> 00:13:47,420
were designed to stars out of<font color="#E5E5E5"> 5 but</font>

348
00:13:44,540 --> 00:13:49,400
actually<font color="#E5E5E5"> I've seen ransomware earned</font>

349
00:13:47,420 --> 00:13:51,740
good money that<font color="#E5E5E5"> I would have rated zero</font>

350
00:13:49,400 --> 00:13:53,420
stars out of<font color="#E5E5E5"> 5 that's not really a big</font>

351
00:13:51,740 --> 00:13:55,760
<font color="#E5E5E5">issue it's</font><font color="#CCCCCC"> not the best possible design</font>

352
00:13:53,420 --> 00:13:57,829
that we are<font color="#E5E5E5"> looking at here but it's a</font>

353
00:13:55,760 --> 00:14:00,590
working design and in order<font color="#E5E5E5"> to make this</font>

354
00:13:57,830 --> 00:14:02,900
working design<font color="#E5E5E5"> a reality the accretor</font>

355
00:14:00,590 --> 00:14:05,450
defense guys needed access to a working

356
00:14:02,900 --> 00:14:07,100
implementation of our same now one way

357
00:14:05,450 --> 00:14:10,250
to do it<font color="#E5E5E5"> is to use the windows native</font>

358
00:14:07,100 --> 00:14:11,960
cryptographic<font color="#E5E5E5"> API directly and another</font>

359
00:14:10,250 --> 00:14:13,970
way is to use a third-party rapper

360
00:14:11,960 --> 00:14:16,400
rapper library for it but they decided

361
00:14:13,970 --> 00:14:18,350
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> the native API directly maybe</font>

362
00:14:16,400 --> 00:14:20,120
because<font color="#E5E5E5"> it's less bulky maybe because it</font>

363
00:14:18,350 --> 00:14:22,120
draws less attention maybe just because

364
00:14:20,120 --> 00:14:24,200
all the cool kids are doing it but

365
00:14:22,120 --> 00:14:26,090
anyway if you're going to<font color="#E5E5E5"> use the</font>

366
00:14:24,200 --> 00:14:28,160
windows native crypto API to encrypt

367
00:14:26,090 --> 00:14:30,770
stuff you're going<font color="#E5E5E5"> to be to have to be</font>

368
00:14:28,160 --> 00:14:33,530
familiar<font color="#CCCCCC"> with those free functions the</font>

369
00:14:30,770 --> 00:14:35,180
first of<font color="#E5E5E5"> which is script acquire context</font>

370
00:14:33,530 --> 00:14:37,430
because you know this<font color="#CCCCCC"> is Windows you</font>

371
00:14:35,180 --> 00:14:40,130
can't do anything<font color="#CCCCCC"> without acquiring a</font>

372
00:14:37,430 --> 00:14:42,560
context first now in order<font color="#E5E5E5"> to properly</font>

373
00:14:40,130 --> 00:14:43,939
invoke the cryptic Rio context function

374
00:14:42,560 --> 00:14:45,680
we're going to have to do one of<font color="#E5E5E5"> my</font>

375
00:14:43,940 --> 00:14:47,870
personal favorite things in the whole

376
00:14:45,680 --> 00:14:49,880
wide world and look at<font color="#E5E5E5"> the msdn</font>

377
00:14:47,870 --> 00:14:52,070
documentation now all<font color="#E5E5E5"> of this is</font>

378
00:14:49,880 --> 00:14:53,689
fascinating stuff but excuse me if<font color="#CCCCCC"> I</font>

379
00:14:52,070 --> 00:14:56,570
scheme right over to the<font color="#E5E5E5"> fire to the</font>

380
00:14:53,690 --> 00:14:58,190
function prototype and now if you look

381
00:14:56,570 --> 00:14:59,600
<font color="#E5E5E5">at</font><font color="#CCCCCC"> the parameters it's pretty easy</font><font color="#E5E5E5"> to</font>

382
00:14:58,190 --> 00:15:01,100
figure<font color="#E5E5E5"> out what should go in the first</font>

383
00:14:59,600 --> 00:15:04,640
four parameters but the last parameter

384
00:15:01,100 --> 00:15:06,440
is the flags parameter<font color="#CCCCCC"> okay now hands up</font>

385
00:15:04,640 --> 00:15:08,090
everybody here knows to tell me point

386
00:15:06,440 --> 00:15:12,590
blank what should go in the flags

387
00:15:08,090 --> 00:15:15,380
parameter here<font color="#CCCCCC"> okay I applied either so</font>

388
00:15:12,590 --> 00:15:16,940
I scroll down<font color="#E5E5E5"> to the documentation for</font>

389
00:15:15,380 --> 00:15:18,860
the flags parameter actually<font color="#CCCCCC"> this wall</font>

390
00:15:16,940 --> 00:15:21,800
of text is<font color="#CCCCCC"> the documentation for just</font>

391
00:15:18,860 --> 00:15:25,250
one flag and skimming it quickly<font color="#E5E5E5"> I</font>

392
00:15:21,800 --> 00:15:27,770
discover several things first of all the

393
00:15:25,250 --> 00:15:30,290
flags reliable should usually be set to

394
00:15:27,770 --> 00:15:32,270
<font color="#E5E5E5">zero but on the other hand the crib</font>

395
00:15:30,290 --> 00:15:35,390
verify context flag should usually be

396
00:15:32,270 --> 00:15:35,720
set so in<font color="#CCCCCC"> summary this variable should</font>

397
00:15:35,390 --> 00:15:38,810
use

398
00:15:35,720 --> 00:15:40,610
maybe set both<font color="#E5E5E5"> to 0 and 2 not</font><font color="#CCCCCC"> 0 now I'm</font>

399
00:15:38,810 --> 00:15:43,040
a reverse engineer not a quantum

400
00:15:40,610 --> 00:15:45,139
physicists so I really<font color="#E5E5E5"> don't know what</font>

401
00:15:43,040 --> 00:15:47,029
<font color="#CCCCCC">to do with this information and by now</font>

402
00:15:45,139 --> 00:15:49,370
I'm dazed and confused so I scroll down

403
00:15:47,029 --> 00:15:52,459
some more<font color="#E5E5E5"> and by golly I hit the</font><font color="#CCCCCC"> jackpot</font>

404
00:15:49,370 --> 00:15:54,379
it's a<font color="#E5E5E5"> fully-formed call to creep the</font>

405
00:15:52,459 --> 00:15:56,300
quiet context<font color="#E5E5E5"> right there in the msdn</font>

406
00:15:54,379 --> 00:16:00,350
documentation and what is the flags

407
00:15:56,300 --> 00:16:02,930
reliable it's<font color="#CCCCCC"> zero it's just 0 so my</font>

408
00:16:00,350 --> 00:16:04,910
confusion is over and the same goes for

409
00:16:02,930 --> 00:16:06,920
<font color="#CCCCCC">the critical defense guys why because</font>

410
00:16:04,910 --> 00:16:09,199
they went for<font color="#E5E5E5"> the exact same mental</font>

411
00:16:06,920 --> 00:16:10,639
process that I just outlined how we do

412
00:16:09,199 --> 00:16:12,319
we know this because if you look at the

413
00:16:10,639 --> 00:16:14,660
<font color="#CCCCCC">cripple defense executable this same</font>

414
00:16:12,319 --> 00:16:18,469
exact<font color="#E5E5E5"> code appears there verbatim</font><font color="#CCCCCC"> word</font>

415
00:16:14,660 --> 00:16:20,170
for word so problem solved right and in

416
00:16:18,470 --> 00:16:22,370
the copy pasted code and all of that but

417
00:16:20,170 --> 00:16:24,079
you know<font color="#CCCCCC"> I'm starting to get second</font>

418
00:16:22,370 --> 00:16:27,230
thoughts about all of this documentation

419
00:16:24,079 --> 00:16:29,359
that we<font color="#CCCCCC"> skimmed so let's roll back for a</font>

420
00:16:27,230 --> 00:16:31,759
moment and look at the documentation for

421
00:16:29,360 --> 00:16:34,160
the crib verify context flag now what

422
00:16:31,759 --> 00:16:36,230
does<font color="#E5E5E5"> the same when this flag is set</font>

423
00:16:34,160 --> 00:16:38,209
temporary public private keepers can be

424
00:16:36,230 --> 00:16:40,730
created but they are not resisted now we

425
00:16:38,209 --> 00:16:43,099
did not set the flag so let us take the

426
00:16:40,730 --> 00:16:45,470
contrapositive of this statement when

427
00:16:43,100 --> 00:16:47,689
this flag is not set temporary public

428
00:16:45,470 --> 00:16:50,480
private keepers can be created and they

429
00:16:47,689 --> 00:16:52,370
are persistent in plain English<font color="#E5E5E5"> what</font>

430
00:16:50,480 --> 00:16:53,990
this means is<font color="#E5E5E5"> that the super secret key</font>

431
00:16:52,370 --> 00:16:57,019
that we are keeping away from the victim

432
00:16:53,990 --> 00:16:59,360
<font color="#CCCCCC">and asking money for it a copy of it is</font>

433
00:16:57,019 --> 00:17:00,949
getting<font color="#E5E5E5"> the persistent local historian</font>

434
00:16:59,360 --> 00:17:04,339
somewhere under the users application

435
00:17:00,949 --> 00:17:05,959
data folder right not exactly what the

436
00:17:04,339 --> 00:17:09,198
critical defense guys must have had in

437
00:17:05,959 --> 00:17:11,270
mind<font color="#E5E5E5"> okay so what</font><font color="#CCCCCC"> are our takeaways from</font>

438
00:17:09,199 --> 00:17:13,250
this example first of all the less

439
00:17:11,270 --> 00:17:14,839
intuitive the API it might be more

440
00:17:13,250 --> 00:17:17,539
difficult to reverse engineer but it's

441
00:17:14,839 --> 00:17:19,789
also more difficult to<font color="#E5E5E5"> work with so it</font>

442
00:17:17,539 --> 00:17:22,459
might be<font color="#E5E5E5"> more difficult to actually dig</font>

443
00:17:19,789 --> 00:17:25,849
down but the chances of finding some

444
00:17:22,459 --> 00:17:28,100
juicy mistake go up and second of all if

445
00:17:25,849 --> 00:17:29,840
you get hit by ransomware go check your

446
00:17:28,099 --> 00:17:32,209
local<font color="#E5E5E5"> keystore because who knows this</font>

447
00:17:29,840 --> 00:17:34,010
might be your lucky day after all so

448
00:17:32,210 --> 00:17:35,929
without even further ado I'm going to

449
00:17:34,010 --> 00:17:41,690
pass this thing right back<font color="#E5E5E5"> onto anything</font>

450
00:17:35,929 --> 00:17:45,200
thanks man<font color="#CCCCCC"> okay so to our next category</font>

451
00:17:41,690 --> 00:17:47,780
which is reinventing the square wheel I

452
00:17:45,200 --> 00:17:49,310
guess this needs no further explanation

453
00:17:47,780 --> 00:17:50,899
kind of self<font color="#CCCCCC"> express</font>

454
00:17:49,310 --> 00:17:52,879
don't worry right so let's jump right

455
00:17:50,900 --> 00:17:55,670
ahead to the next<font color="#E5E5E5"> example which is</font>

456
00:17:52,880 --> 00:17:57,920
another<font color="#E5E5E5"> runs over they are not all wrong</font>

457
00:17:55,670 --> 00:18:00,320
somewhere<font color="#E5E5E5"> don't worry so this one is</font>

458
00:17:57,920 --> 00:18:02,360
called petia you most of you probably

459
00:18:00,320 --> 00:18:04,540
heard of it and that's<font color="#E5E5E5"> because it was</font>

460
00:18:02,360 --> 00:18:07,760
pretty famous like in the<font color="#E5E5E5"> beginning of</font>

461
00:18:04,540 --> 00:18:10,520
2016<font color="#E5E5E5"> I think and</font><font color="#CCCCCC"> that was actually the</font>

462
00:18:07,760 --> 00:18:13,190
<font color="#CCCCCC">first ones were to ever encrypt the NBR</font>

463
00:18:10,520 --> 00:18:15,470
right so FD R stands for master boot

464
00:18:13,190 --> 00:18:17,420
record and that<font color="#E5E5E5"> means that this specific</font>

465
00:18:15,470 --> 00:18:19,700
run somewhere did not<font color="#E5E5E5"> only take your</font>

466
00:18:17,420 --> 00:18:21,680
files as hostage but it actually took

467
00:18:19,700 --> 00:18:23,060
your entire operating system is all

468
00:18:21,680 --> 00:18:25,670
stretched right so after<font color="#E5E5E5"> you've been</font>

469
00:18:23,060 --> 00:18:28,040
<font color="#E5E5E5">infected and rebooted the machine you</font>

470
00:18:25,670 --> 00:18:31,850
are presented with this very scary red

471
00:18:28,040 --> 00:18:33,710
skull ransom noting demanding you to pay

472
00:18:31,850 --> 00:18:35,270
the<font color="#CCCCCC"> money</font><font color="#E5E5E5"> obviously on another computer</font>

473
00:18:33,710 --> 00:18:39,470
because your computer is completely

474
00:18:35,270 --> 00:18:42,440
unusable now and that's practically it

475
00:18:39,470 --> 00:18:44,600
now I always<font color="#CCCCCC"> like to say that when you</font>

476
00:18:42,440 --> 00:18:46,310
are reading code or reading assembly or

477
00:18:44,600 --> 00:18:48,770
researching something that you<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get</font>

478
00:18:46,310 --> 00:18:52,370
rather intimate knowledge of the guys

479
00:18:48,770 --> 00:18:54,170
who wrote this code right and we had the

480
00:18:52,370 --> 00:18:56,810
same feeling here and we try to think

481
00:18:54,170 --> 00:18:58,820
who are those guys behind the petty

482
00:18:56,810 --> 00:19:00,889
around somewhere who are they and we

483
00:18:58,820 --> 00:19:04,340
gave<font color="#E5E5E5"> this a bit of thoughts I think</font>

484
00:19:00,890 --> 00:19:06,410
maybe too much thought and<font color="#E5E5E5"> then it kind</font>

485
00:19:04,340 --> 00:19:08,929
of finally hit us and now we know who

486
00:19:06,410 --> 00:19:12,110
those guys are you see those guy those

487
00:19:08,930 --> 00:19:14,240
guys are simply malware hipsters that's

488
00:19:12,110 --> 00:19:18,350
what they are<font color="#CCCCCC"> they like doing stuff in</font>

489
00:19:14,240 --> 00:19:20,180
the unusual way right so they did<font color="#CCCCCC"> it all</font>

490
00:19:18,350 --> 00:19:22,280
over the<font color="#E5E5E5"> place I mean look at the</font><font color="#CCCCCC"> MBR</font>

491
00:19:20,180 --> 00:19:24,050
<font color="#E5E5E5">encryption thing we can argue whether or</font>

492
00:19:22,280 --> 00:19:25,520
not this was a good choice right it

493
00:19:24,050 --> 00:19:27,649
might have been good<font color="#CCCCCC"> might've been bad</font>

494
00:19:25,520 --> 00:19:30,260
but what we can't argue about is that

495
00:19:27,650 --> 00:19:32,720
this thing it was innovative<font color="#E5E5E5"> it was the</font>

496
00:19:30,260 --> 00:19:35,270
<font color="#CCCCCC">first time to ever been seen right and</font>

497
00:19:32,720 --> 00:19:38,570
this goes on throughout the code and

498
00:19:35,270 --> 00:19:40,760
more specifically this is also true for

499
00:19:38,570 --> 00:19:42,770
the choice of encryption<font color="#E5E5E5"> algorithm for</font>

500
00:19:40,760 --> 00:19:44,810
this right i mean<font color="#E5E5E5"> i can imagine those</font>

501
00:19:42,770 --> 00:19:46,850
petty a guy<font color="#E5E5E5"> sitting in a table and</font>

502
00:19:44,810 --> 00:19:49,070
saying oh we're<font color="#CCCCCC"> not going to use</font><font color="#E5E5E5"> any of</font>

503
00:19:46,850 --> 00:19:51,169
<font color="#E5E5E5">this come on encryption algorithm any of</font>

504
00:19:49,070 --> 00:19:52,730
this capitalistic encryption algorithms

505
00:19:51,170 --> 00:19:55,100
we're going<font color="#E5E5E5"> to use something over own</font>

506
00:19:52,730 --> 00:19:57,980
<font color="#CCCCCC">sumter something unique something we</font>

507
00:19:55,100 --> 00:19:59,899
can't<font color="#E5E5E5"> write and since he can't was where</font>

508
00:19:57,980 --> 00:20:01,610
they were aiming for they had only one

509
00:19:59,900 --> 00:20:02,960
logical choice for encryption algorithm

510
00:20:01,610 --> 00:20:07,039
which is the cell

511
00:20:02,960 --> 00:20:08,690
<font color="#E5E5E5">20</font><font color="#CCCCCC"> keystream such a satellite so if you</font>

512
00:20:07,039 --> 00:20:11,179
if<font color="#E5E5E5"> you're not familiar with</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> okay</font>

513
00:20:08,690 --> 00:20:13,340
it's kind of a hipster ish encryption

514
00:20:11,179 --> 00:20:15,140
algorithm but all you need to know<font color="#CCCCCC"> about</font>

515
00:20:13,340 --> 00:20:17,658
<font color="#E5E5E5">it that this is a stream cipher so that</font>

516
00:20:15,140 --> 00:20:20,270
means that<font color="#E5E5E5"> basically it needs to produce</font>

517
00:20:17,659 --> 00:20:22,070
a key stream then this case<font color="#CCCCCC"> 3 will be X</font>

518
00:20:20,270 --> 00:20:24,200
sword with<font color="#E5E5E5"> the plaintext producing the</font>

519
00:20:22,070 --> 00:20:27,889
<font color="#E5E5E5">ciphertext and the same goes backwards</font>

520
00:20:24,200 --> 00:20:29,710
and so on and<font color="#E5E5E5"> so forth now in order</font><font color="#CCCCCC"> to</font>

521
00:20:27,890 --> 00:20:32,539
do in order<font color="#E5E5E5"> to produce this key stream</font>

522
00:20:29,710 --> 00:20:35,149
we have this struct here right and it

523
00:20:32,539 --> 00:20:37,370
has some variables to it some are

524
00:20:35,149 --> 00:20:41,199
constant volume variables like the Sigma

525
00:20:37,370 --> 00:20:43,939
which is<font color="#E5E5E5"> just a string expand 32 byte k</font>

526
00:20:41,200 --> 00:20:47,029
you have an IV you have<font color="#E5E5E5"> something called</font>

527
00:20:43,940 --> 00:20:48,830
a 64 bit string position we just marks

528
00:20:47,029 --> 00:20:51,169
your position in the current key screen

529
00:20:48,830 --> 00:20:53,510
generation and then<font color="#E5E5E5"> most importantly we</font>

530
00:20:51,169 --> 00:20:55,940
have<font color="#CCCCCC"> two chunks of sixteen bytes that</font>

531
00:20:53,510 --> 00:20:57,980
contain the password right now once we

532
00:20:55,940 --> 00:20:59,659
<font color="#CCCCCC">have this strut we only need to pass it</font>

533
00:20:57,980 --> 00:21:01,580
through this very nice mathematical

534
00:20:59,659 --> 00:21:04,130
diagram which is actually<font color="#E5E5E5"> pretty easy</font>

535
00:21:01,580 --> 00:21:06,678
and if you're wondering it's called it's

536
00:21:04,130 --> 00:21:09,679
used something called I think it rotates

537
00:21:06,679 --> 00:21:11,419
or prng or something like that it's

538
00:21:09,679 --> 00:21:13,130
actually<font color="#CCCCCC"> pretty easy and then the output</font>

539
00:21:11,419 --> 00:21:16,010
of this thing is just the<font color="#CCCCCC"> keystream</font>

540
00:21:13,130 --> 00:21:18,200
that's<font color="#E5E5E5"> pretty much it and now we are</font>

541
00:21:16,010 --> 00:21:20,179
<font color="#E5E5E5">faced with a problem with a very</font>

542
00:21:18,200 --> 00:21:22,700
difficult problem actually a prominent

543
00:21:20,179 --> 00:21:25,159
humanity has faced for many years<font color="#E5E5E5"> and</font>

544
00:21:22,700 --> 00:21:27,649
it's<font color="#E5E5E5"> still unsolved and I'm of course</font>

545
00:21:25,159 --> 00:21:31,190
referring<font color="#CCCCCC"> to the problem that</font><font color="#E5E5E5"> how do you</font>

546
00:21:27,649 --> 00:21:33,709
know how spicy or salsa is I mean how do

547
00:21:31,190 --> 00:21:36,350
you<font color="#E5E5E5"> do that so we like to tackle this</font>

548
00:21:33,710 --> 00:21:38,990
very hard problems and so we gave some

549
00:21:36,350 --> 00:21:40,789
<font color="#CCCCCC">of our best engineers to try and find a</font>

550
00:21:38,990 --> 00:21:42,740
solution for<font color="#E5E5E5"> this thing and then set</font><font color="#CCCCCC"> on</font>

551
00:21:40,789 --> 00:21:44,450
these days and nights and we are now

552
00:21:42,740 --> 00:21:48,260
proud to present to you for the very

553
00:21:44,450 --> 00:21:50,840
first time ever our salsa o meter right

554
00:21:48,260 --> 00:21:53,600
so this thermometer here can sense

555
00:21:50,840 --> 00:21:55,730
exactly how spicy each salsa is

556
00:21:53,600 --> 00:21:58,039
including of<font color="#CCCCCC"> course our cells are twenty</font>

557
00:21:55,730 --> 00:22:00,350
implementation and as you as you can see

558
00:21:58,039 --> 00:22:02,179
at<font color="#E5E5E5"> the moment it's like the most the</font>

559
00:22:00,350 --> 00:22:04,158
hottest the hottest pepper in the world

560
00:22:02,179 --> 00:22:06,110
right something you<font color="#CCCCCC"> wouldn't want to</font><font color="#E5E5E5"> go</font>

561
00:22:04,159 --> 00:22:08,659
near without any chemical protection so

562
00:22:06,110 --> 00:22:11,090
stuff<font color="#E5E5E5"> like that and that's nice but</font>

563
00:22:08,659 --> 00:22:14,450
let's see how the Pythia others helped

564
00:22:11,090 --> 00:22:16,418
us reduce this spiciness level right so

565
00:22:14,450 --> 00:22:19,419
salsa failure number

566
00:22:16,419 --> 00:22:21,879
on I told<font color="#E5E5E5"> you about the 64 bit stream</font>

567
00:22:19,419 --> 00:22:23,440
<font color="#CCCCCC">position right the petty authors thought</font>

568
00:22:21,879 --> 00:22:26,949
it was a good idea to store this value

569
00:22:23,440 --> 00:22:28,779
in the UN 32 for some reason I don't

570
00:22:26,950 --> 00:22:31,779
know<font color="#E5E5E5"> why</font><font color="#CCCCCC"> but this of course forces the</font>

571
00:22:28,779 --> 00:22:33,609
four<font color="#CCCCCC"> hi bytes to be constant zeros and</font>

572
00:22:31,779 --> 00:22:35,529
completely relevant to the entire

573
00:22:33,609 --> 00:22:37,989
<font color="#E5E5E5">keystream generation process and our</font>

574
00:22:35,529 --> 00:22:40,450
salsa lammeter senses that and says that

575
00:22:37,989 --> 00:22:42,759
this is no longer<font color="#CCCCCC"> this very very hot</font>

576
00:22:40,450 --> 00:22:45,039
pepper but it's still a pretty<font color="#E5E5E5"> hot</font>

577
00:22:42,759 --> 00:22:49,149
pepper<font color="#E5E5E5"> I guess because it's</font><font color="#CCCCCC"> not such a</font>

578
00:22:45,039 --> 00:22:50,619
<font color="#E5E5E5">big fuckup but it is it</font><font color="#CCCCCC"> is a fact then</font>

579
00:22:49,149 --> 00:22:52,779
the petty authors of course<font color="#E5E5E5"> don't give</font>

580
00:22:50,619 --> 00:22:55,418
up and they produce salsa failure number

581
00:22:52,779 --> 00:22:58,450
two now as I said<font color="#E5E5E5"> before this is a ed</font>

582
00:22:55,419 --> 00:23:00,609
rotex or PNG and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> rotate left is</font>

583
00:22:58,450 --> 00:23:03,399
actually one of the main functions used

584
00:23:00,609 --> 00:23:05,350
everywhere along this key stream

585
00:23:03,399 --> 00:23:07,600
generation thing and what you see<font color="#CCCCCC"> in the</font>

586
00:23:05,350 --> 00:23:10,178
blue box here is the simply they rotate

587
00:23:07,600 --> 00:23:12,219
left implementation taken from<font color="#CCCCCC"> C</font>

588
00:23:10,179 --> 00:23:14,649
standard libraries right and the red box

589
00:23:12,220 --> 00:23:17,259
is the platy implementation and now

590
00:23:14,649 --> 00:23:19,840
another thing i didn't mention before if

591
00:23:17,259 --> 00:23:21,850
you don't<font color="#E5E5E5"> know the NBR is based on 16</font>

592
00:23:19,840 --> 00:23:24,100
bit architecture while petia was

593
00:23:21,850 --> 00:23:27,100
originally designed for today 32-bit

594
00:23:24,100 --> 00:23:29,498
right so these<font color="#E5E5E5"> guys had</font><font color="#CCCCCC"> to shift the</font>

595
00:23:27,100 --> 00:23:31,389
arguments from<font color="#CCCCCC"> 32b to</font><font color="#E5E5E5"> 16 bits which is</font>

596
00:23:29,499 --> 00:23:34,509
exactly what they did<font color="#CCCCCC"> and did it quite</font>

597
00:23:31,389 --> 00:23:36,668
well however they very conveniently for

598
00:23:34,509 --> 00:23:38,859
us forgot to do the same for the

599
00:23:36,669 --> 00:23:40,899
constant values so they kept the cherry

600
00:23:38,859 --> 00:23:43,480
to value<font color="#CCCCCC"> there and what you have in the</font>

601
00:23:40,899 --> 00:23:45,459
red box there is<font color="#E5E5E5"> absolutely not what</font>

602
00:23:43,480 --> 00:23:47,799
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> left I don't know what it is maybe</font>

603
00:23:45,460 --> 00:23:50,710
something more similar to shift left is

604
00:23:47,799 --> 00:23:53,289
not<font color="#E5E5E5"> even that however this is a very</font>

605
00:23:50,710 --> 00:23:55,450
major fuckup and<font color="#E5E5E5"> ours our sauce ohmmeter</font>

606
00:23:53,289 --> 00:23:57,908
senses that and says<font color="#E5E5E5"> this is no longer</font>

607
00:23:55,450 --> 00:24:00,789
destroy red hot pepper but now it's some

608
00:23:57,909 --> 00:24:02,769
kind of greenish<font color="#CCCCCC"> steel hottish</font><font color="#E5E5E5"> Bay</font>

609
00:24:00,789 --> 00:24:04,960
pepper you know<font color="#E5E5E5"> steel impractical to</font>

610
00:24:02,769 --> 00:24:08,470
break this but this<font color="#CCCCCC"> is absolutely</font><font color="#E5E5E5"> not</font>

611
00:24:04,960 --> 00:24:10,869
salsa 20 anymore and luckily for us the

612
00:24:08,470 --> 00:24:13,509
<font color="#CCCCCC">PTA guys just don't give up and they</font>

613
00:24:10,869 --> 00:24:15,668
produce salsa failure number three what

614
00:24:13,509 --> 00:24:18,399
you see here is the<font color="#E5E5E5"> main function we</font>

615
00:24:15,669 --> 00:24:20,080
call<font color="#CCCCCC"> it the s20 hash function this is</font>

616
00:24:18,399 --> 00:24:21,668
the core function responsible of

617
00:24:20,080 --> 00:24:24,279
producing the key stream from the

618
00:24:21,669 --> 00:24:27,039
extractives you've seen before<font color="#E5E5E5"> right and</font>

619
00:24:24,279 --> 00:24:30,659
there's a very very major fuckup in

620
00:24:27,039 --> 00:24:33,010
there can anybody maybe spot it

621
00:24:30,659 --> 00:24:37,450
okay let<font color="#E5E5E5"> me give you a clue it's here</font>

622
00:24:33,010 --> 00:24:39,760
since can you spot it<font color="#E5E5E5"> no yeah well it's</font>

623
00:24:37,450 --> 00:24:42,370
very simple<font color="#CCCCCC"> you see the blue</font><font color="#E5E5E5"> of course</font>

624
00:24:39,760 --> 00:24:44,080
is the right implementation and what it

625
00:24:42,370 --> 00:24:46,539
<font color="#E5E5E5">does it just process four bytes at a</font>

626
00:24:44,080 --> 00:24:48,309
time and then jumps ahead four bytes to

627
00:24:46,539 --> 00:24:50,919
the next four bytes in order to you know

628
00:24:48,309 --> 00:24:53,918
produce the history that's it now<font color="#E5E5E5"> again</font>

629
00:24:50,919 --> 00:24:56,679
we have the shift from<font color="#E5E5E5"> 32 bit to 16 bits</font>

630
00:24:53,919 --> 00:24:58,990
and what<font color="#E5E5E5"> these guys did is process two</font>

631
00:24:56,679 --> 00:25:01,750
bites at a time and then jump ahead four

632
00:24:58,990 --> 00:25:03,250
<font color="#CCCCCC">bytes very nice patio guys so what does</font>

633
00:25:01,750 --> 00:25:05,529
<font color="#E5E5E5">this</font><font color="#CCCCCC"> mean this of course means that</font>

634
00:25:03,250 --> 00:25:07,750
every other<font color="#E5E5E5"> two bite will be completely</font>

635
00:25:05,529 --> 00:25:10,600
irrelevant now to the entire<font color="#CCCCCC"> kisten</font>

636
00:25:07,750 --> 00:25:12,850
generation process so with this<font color="#E5E5E5"> single</font>

637
00:25:10,600 --> 00:25:15,699
fuck up they just reduce the<font color="#E5E5E5"> complexity</font>

638
00:25:12,850 --> 00:25:18,600
by half you see but by just not changing

639
00:25:15,700 --> 00:25:21,880
a constant value very nice<font color="#E5E5E5"> very nice but</font>

640
00:25:18,600 --> 00:25:24,250
again<font color="#CCCCCC"> our salsa meter says that now this</font>

641
00:25:21,880 --> 00:25:27,210
is no longer pepper at all but it's kind

642
00:25:24,250 --> 00:25:29,970
of some kind of a Tabasco sauce maybe

643
00:25:27,210 --> 00:25:32,679
but<font color="#E5E5E5"> fill the hot kind of Tabasco sauce</font>

644
00:25:29,970 --> 00:25:34,840
and why am<font color="#CCCCCC"> I saying the hot kind of</font>

645
00:25:32,679 --> 00:25:36,820
Tabasco sauce not a normal one well

646
00:25:34,840 --> 00:25:39,370
<font color="#E5E5E5">because you see usually</font><font color="#CCCCCC"> what we want to</font>

647
00:25:36,820 --> 00:25:40,629
do is to brute force this<font color="#CCCCCC"> thing right</font>

648
00:25:39,370 --> 00:25:43,209
and if we want to brute force this thing

649
00:25:40,630 --> 00:25:45,100
then think about it first of<font color="#E5E5E5"> all let's</font>

650
00:25:43,210 --> 00:25:47,679
get rid of<font color="#E5E5E5"> all the unrelated lights</font>

651
00:25:45,100 --> 00:25:50,019
because they are not<font color="#E5E5E5"> used and now the</font>

652
00:25:47,679 --> 00:25:51,730
bites were left with some of them if you

653
00:25:50,019 --> 00:25:53,799
remember our constant values and

654
00:25:51,730 --> 00:25:55,360
constant values don't<font color="#E5E5E5"> really interest us</font>

655
00:25:53,799 --> 00:25:57,100
if<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to brute force so let's get</font>

656
00:25:55,360 --> 00:25:59,289
rid of<font color="#E5E5E5"> them also and now we are only</font>

657
00:25:57,100 --> 00:26:01,000
left with a password light right and if

658
00:25:59,289 --> 00:26:03,879
you can count those bikes then you see

659
00:26:01,000 --> 00:26:06,370
that we are<font color="#E5E5E5"> still left with 16 bytes now</font>

660
00:26:03,880 --> 00:26:08,830
60 bytes is very very<font color="#E5E5E5"> far from the</font>

661
00:26:06,370 --> 00:26:10,809
<font color="#E5E5E5">complexity we started with but it's</font>

662
00:26:08,830 --> 00:26:15,908
still pretty<font color="#E5E5E5"> impractical to brute force</font>

663
00:26:10,809 --> 00:26:18,760
16 bytes right it is so luckily for us

664
00:26:15,909 --> 00:26:22,090
the petty guys introduce this nice

665
00:26:18,760 --> 00:26:24,519
function we call that key expand I have

666
00:26:22,090 --> 00:26:26,799
absolutely<font color="#CCCCCC"> no idea whites</font><font color="#E5E5E5"> here it's not</font>

667
00:26:24,519 --> 00:26:29,260
even part of the salsa<font color="#CCCCCC"> 20 implementation</font>

668
00:26:26,799 --> 00:26:32,799
it has nothing to do with<font color="#CCCCCC"> it and what it</font>

669
00:26:29,260 --> 00:26:36,129
does is that it's used<font color="#E5E5E5"> to represent each</font>

670
00:26:32,799 --> 00:26:37,960
password character by two bytes it's not

671
00:26:36,130 --> 00:26:40,899
<font color="#E5E5E5">Unicode it's just some kind of strange</font>

672
00:26:37,960 --> 00:26:43,010
encoding I have no<font color="#E5E5E5"> idea why it's you why</font>

673
00:26:40,899 --> 00:26:46,189
is it<font color="#CCCCCC"> even there but</font>

674
00:26:43,010 --> 00:26:48,200
what this does is in for us list instead

675
00:26:46,190 --> 00:26:51,140
of brute forcing 16 bytes now we only

676
00:26:48,200 --> 00:26:52,690
<font color="#CCCCCC">have to brute force</font><font color="#E5E5E5"> eight bytes thanks</font>

677
00:26:51,140 --> 00:26:56,210
to this function thank you but<font color="#CCCCCC"> yeah guys</font>

678
00:26:52,690 --> 00:26:57,350
and not only<font color="#E5E5E5"> its eight password</font>

679
00:26:56,210 --> 00:26:59,270
characters that we have to brute force

680
00:26:57,350 --> 00:27:01,850
but if you remember that<font color="#CCCCCC"> the user</font>

681
00:26:59,270 --> 00:27:03,290
<font color="#E5E5E5">actually has to enter this password to</font>

682
00:27:01,850 --> 00:27:05,270
his keyboard because he has no other

683
00:27:03,290 --> 00:27:07,670
option right then it's<font color="#E5E5E5"> not only eight</font>

684
00:27:05,270 --> 00:27:10,700
characters it's aight printable

685
00:27:07,670 --> 00:27:12,800
characters which is completely<font color="#CCCCCC"> insane at</font>

686
00:27:10,700 --> 00:27:15,620
this point our cells on withers suffered

687
00:27:12,800 --> 00:27:17,720
from a sudden crash our engineers is

688
00:27:15,620 --> 00:27:18,770
still working to debugging this this

689
00:27:17,720 --> 00:27:20,720
problem we<font color="#E5E5E5"> don't know what's the problem</font>

690
00:27:18,770 --> 00:27:22,520
<font color="#E5E5E5">but the current estimation that this is</font>

691
00:27:20,720 --> 00:27:26,210
no<font color="#CCCCCC"> longer salsa but it's some kind of a</font>

692
00:27:22,520 --> 00:27:28,910
cucumber salad or something and of

693
00:27:26,210 --> 00:27:31,550
course the picture was introduced after

694
00:27:28,910 --> 00:27:34,640
this was found and and<font color="#CCCCCC"> betty i made a</font>

695
00:27:31,550 --> 00:27:38,000
new<font color="#E5E5E5"> version with without this bugs so</font>

696
00:27:34,640 --> 00:27:41,360
<font color="#CCCCCC">take aways first of all arguments diane</font>

697
00:27:38,000 --> 00:27:42,920
types they are kind of important so take

698
00:27:41,360 --> 00:27:45,050
a look<font color="#E5E5E5"> at them and the other</font><font color="#CCCCCC"> thing is</font>

699
00:27:42,920 --> 00:27:47,870
<font color="#CCCCCC">that whenever a program and it needs</font><font color="#E5E5E5"> to</font>

700
00:27:45,050 --> 00:27:50,990
shift from<font color="#E5E5E5"> one architecture to to</font>

701
00:27:47,870 --> 00:27:53,840
another<font color="#CCCCCC"> flight form 64 to 32 from 32 to</font>

702
00:27:50,990 --> 00:27:55,400
16 then you might find bugs and if you

703
00:27:53,840 --> 00:27:58,040
will find<font color="#E5E5E5"> that you will probably find</font>

704
00:27:55,400 --> 00:27:59,840
them in the<font color="#CCCCCC"> argument types or in the</font>

705
00:27:58,040 --> 00:28:01,580
constant values at<font color="#E5E5E5"> least that would be</font>

706
00:27:59,840 --> 00:28:04,399
the first<font color="#E5E5E5"> place i would go look for them</font>

707
00:28:01,580 --> 00:28:08,629
so if<font color="#E5E5E5"> you have this situation go look</font>

708
00:28:04,400 --> 00:28:11,540
there and now<font color="#CCCCCC"> for our last example which</font>

709
00:28:08,630 --> 00:28:13,940
is not a ransomware it's the nuclear

710
00:28:11,540 --> 00:28:17,510
exploit kit some of you might have heard

711
00:28:13,940 --> 00:28:20,360
<font color="#E5E5E5">of it it's been very active between 2011</font>

712
00:28:17,510 --> 00:28:22,190
<font color="#E5E5E5">to the 2016 and actually its operation</font>

713
00:28:20,360 --> 00:28:25,699
completely cysts right<font color="#E5E5E5"> after we</font>

714
00:28:22,190 --> 00:28:27,860
published our very extended report on it

715
00:28:25,700 --> 00:28:32,390
so you can if you feel<font color="#CCCCCC"> like reading it</font>

716
00:28:27,860 --> 00:28:34,879
this these are links and now exploit

717
00:28:32,390 --> 00:28:38,660
<font color="#E5E5E5">kids we had a presentation</font><font color="#CCCCCC"> about it</font>

718
00:28:34,880 --> 00:28:41,030
let's stay here yesterday here it was

719
00:28:38,660 --> 00:28:43,760
very<font color="#E5E5E5"> nice and it showed a very very</font>

720
00:28:41,030 --> 00:28:46,850
<font color="#E5E5E5">complex ecosystem right it's very</font>

721
00:28:43,760 --> 00:28:48,200
complex it's too complex for me so we're

722
00:28:46,850 --> 00:28:50,270
<font color="#E5E5E5">not really interested in this entire</font>

723
00:28:48,200 --> 00:28:51,980
ecosystem but the thing is then it's

724
00:28:50,270 --> 00:28:55,040
very<font color="#E5E5E5"> complex for a very good reason</font>

725
00:28:51,980 --> 00:28:56,990
these guys everybody is trying to catch

726
00:28:55,040 --> 00:28:59,059
them and<font color="#E5E5E5"> they have to keep their system</font>

727
00:28:56,990 --> 00:29:01,520
as complex as possible they do

728
00:28:59,059 --> 00:29:03,800
everything they can in order to prevent

729
00:29:01,520 --> 00:29:06,050
from being caught right but we're<font color="#CCCCCC"> not</font>

730
00:29:03,800 --> 00:29:08,419
interested in all that as I<font color="#CCCCCC"> said we're</font>

731
00:29:06,050 --> 00:29:10,610
only interested interested in the say

732
00:29:08,420 --> 00:29:13,130
obstruction of communication between the

733
00:29:10,610 --> 00:29:16,070
victim and<font color="#CCCCCC"> the nuclear panel right so</font>

734
00:29:13,130 --> 00:29:18,290
what happens here basically the victim

735
00:29:16,070 --> 00:29:20,240
sends an HTTP request this request

736
00:29:18,290 --> 00:29:21,950
somehow gets to the nuclear panel and

737
00:29:20,240 --> 00:29:24,920
then the<font color="#E5E5E5"> nuclear Parnell serves the</font>

738
00:29:21,950 --> 00:29:27,980
victim back<font color="#CCCCCC"> when obfuscator Taylor right</font>

739
00:29:24,920 --> 00:29:31,610
with office can exploit and then in

740
00:29:27,980 --> 00:29:33,710
order<font color="#E5E5E5"> to the office</font><font color="#CCCCCC"> kds exploit those to</font>

741
00:29:31,610 --> 00:29:35,990
the nuclear panel and the victim needs

742
00:29:33,710 --> 00:29:37,640
to share a key right and the way they

743
00:29:35,990 --> 00:29:40,190
decided to do that is using

744
00:29:37,640 --> 00:29:42,980
diffie-hellman key exchange which is

745
00:29:40,190 --> 00:29:45,890
pretty smart<font color="#E5E5E5"> you must admit</font><font color="#CCCCCC"> I mean I was</font>

746
00:29:42,980 --> 00:29:47,210
pretty impressed by that so just a bit

747
00:29:45,890 --> 00:29:48,350
about diffie-hellman if you don't know

748
00:29:47,210 --> 00:29:50,809
<font color="#E5E5E5">I'm not going to teach you about the</font>

749
00:29:48,350 --> 00:29:52,939
film on however you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> Ellis and you</font>

750
00:29:50,809 --> 00:29:55,160
have Bob and you have an unsecured

751
00:29:52,940 --> 00:29:57,170
channel between them and those two guys

752
00:29:55,160 --> 00:29:58,760
needs to share a key<font color="#E5E5E5"> between them right</font>

753
00:29:57,170 --> 00:30:04,160
so they do something<font color="#E5E5E5"> that looks like</font>

754
00:29:58,760 --> 00:30:06,290
this this is the fellow and at the<font color="#E5E5E5"> end</font>

755
00:30:04,160 --> 00:30:08,090
of this process<font color="#E5E5E5"> you have a shirt key and</font>

756
00:30:06,290 --> 00:30:10,070
nobody in the middle sniffing the

757
00:30:08,090 --> 00:30:12,800
communication can know this key only

758
00:30:10,070 --> 00:30:16,300
<font color="#E5E5E5">Alice and Bob no sense right and then</font>

759
00:30:12,800 --> 00:30:18,860
this could be very very elegantly

760
00:30:16,300 --> 00:30:21,260
represented by this mathematical formula

761
00:30:18,860 --> 00:30:23,270
right and this formula has to be

762
00:30:21,260 --> 00:30:25,250
calculated<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> server side that's how</font>

763
00:30:23,270 --> 00:30:28,100
<font color="#E5E5E5">you do diffie-hellman that's it now</font>

764
00:30:25,250 --> 00:30:30,920
let's see how nuclear nuclear guys have

765
00:30:28,100 --> 00:30:33,770
decided to to implement this so this is

766
00:30:30,920 --> 00:30:36,950
<font color="#CCCCCC">the actual implementation in PHP taken</font>

767
00:30:33,770 --> 00:30:38,780
from the nuclear exploit kit what you

768
00:30:36,950 --> 00:30:40,640
see here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> exactly the calculation of</font>

769
00:30:38,780 --> 00:30:42,590
the<font color="#E5E5E5"> formula just seen before that's</font>

770
00:30:40,640 --> 00:30:44,510
that's it right and if you'll take a

771
00:30:42,590 --> 00:30:46,550
look there is a function there dunno if

772
00:30:44,510 --> 00:30:48,920
<font color="#CCCCCC">you can see it</font><font color="#E5E5E5"> it's called get GMP and</font>

773
00:30:46,550 --> 00:30:51,230
this<font color="#E5E5E5"> function is pretty easy all it does</font>

774
00:30:48,920 --> 00:30:53,360
is<font color="#E5E5E5"> just take the parameter passed to it</font>

775
00:30:51,230 --> 00:30:56,090
argument passed to it and base64 decode

776
00:30:53,360 --> 00:30:58,879
it and return the decoded value back<font color="#E5E5E5"> to</font>

777
00:30:56,090 --> 00:31:00,199
the main function that's it now what<font color="#E5E5E5"> you</font>

778
00:30:58,880 --> 00:31:03,620
see<font color="#E5E5E5"> here is the actual communication</font>

779
00:31:00,200 --> 00:31:07,370
<font color="#CCCCCC">it's json.parse with a beam sent from</font>

780
00:31:03,620 --> 00:31:10,639
the victim to the nuclear panel I wonder

781
00:31:07,370 --> 00:31:13,070
if anybody can spot the problem here

782
00:31:10,640 --> 00:31:15,830
no yeah it's kind of hard to spot but

783
00:31:13,070 --> 00:31:18,020
the thing is that<font color="#E5E5E5"> these parameters they</font>

784
00:31:15,830 --> 00:31:21,980
are not base64 encoded at all<font color="#E5E5E5"> they're</font>

785
00:31:18,020 --> 00:31:23,360
<font color="#E5E5E5">just X values so oopsie but what does</font>

786
00:31:21,980 --> 00:31:26,870
<font color="#E5E5E5">this</font><font color="#CCCCCC"> actually mean for our</font>

787
00:31:23,360 --> 00:31:29,209
implementation take a<font color="#E5E5E5"> look at that so</font>

788
00:31:26,870 --> 00:31:33,020
they get jumpy function you just saw

789
00:31:29,210 --> 00:31:35,210
before receives non basics before I call

790
00:31:33,020 --> 00:31:37,490
the volume right so when the base64

791
00:31:35,210 --> 00:31:41,420
decode function gets this value what it

792
00:31:37,490 --> 00:31:44,720
returns is false right and false is just

793
00:31:41,420 --> 00:31:46,220
<font color="#CCCCCC">0 so this thing returns a 0 right and</font>

794
00:31:44,720 --> 00:31:49,910
let's take<font color="#E5E5E5"> a look at the main function</font>

795
00:31:46,220 --> 00:31:51,680
now so you have<font color="#CCCCCC"> the G&P far</font><font color="#E5E5E5"> apart</font>

796
00:31:49,910 --> 00:31:53,330
letters which receive a zero making this

797
00:31:51,680 --> 00:31:55,250
is<font color="#CCCCCC"> zero and then the a parameter</font>

798
00:31:53,330 --> 00:31:58,159
receiving a zero<font color="#E5E5E5"> making this is zero so</font>

799
00:31:55,250 --> 00:32:00,560
it's 0 to the power of<font color="#CCCCCC"> the modular</font><font color="#E5E5E5"> zero</font>

800
00:31:58,160 --> 00:32:02,810
which just so happens to be the exact

801
00:32:00,560 --> 00:32:05,659
equivalent of the entire efficiency of

802
00:32:02,810 --> 00:32:10,600
<font color="#E5E5E5">this algorithm which is you guessed at</font>

803
00:32:05,660 --> 00:32:14,810
<font color="#E5E5E5">zero hooks so a lot of code for nothing</font>

804
00:32:10,600 --> 00:32:18,639
and well that's<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> it I just want</font>

805
00:32:14,810 --> 00:32:21,139
<font color="#CCCCCC">to finish with it with one</font><font color="#E5E5E5"> quote from us</font>

806
00:32:18,640 --> 00:32:23,240
if you<font color="#E5E5E5"> consider cryptography</font><font color="#CCCCCC"> to be a</font>

807
00:32:21,140 --> 00:32:25,610
magic black box then either you don't

808
00:32:23,240 --> 00:32:28,880
understand cryptography or it doesn't

809
00:32:25,610 --> 00:32:31,070
understand you that's some tanks and

810
00:32:28,880 --> 00:32:32,810
credits for other guys doing research on

811
00:32:31,070 --> 00:32:36,620
the<font color="#E5E5E5"> same things and some jokes that we</font>

812
00:32:32,810 --> 00:32:40,360
took<font color="#E5E5E5"> form other researchers and that's</font>

813
00:32:36,620 --> 00:32:40,360
basically thank you very<font color="#CCCCCC"> much</font>

814
00:32:48,570 --> 00:33:03,760
any questions hi sinks what about<font color="#CCCCCC"> actual</font>

815
00:33:02,170 --> 00:33:06,340
<font color="#E5E5E5">sharings have bat tricks between each</font>

816
00:33:03,760 --> 00:33:09,100
<font color="#CCCCCC">other's can</font><font color="#E5E5E5"> you what about actors</font>

817
00:33:06,340 --> 00:33:11,320
sharing like that tricks between each

818
00:33:09,100 --> 00:33:13,840
<font color="#E5E5E5">other's and you know you find it across</font>

819
00:33:11,320 --> 00:33:18,040
a singer and<font color="#CCCCCC"> confer has been presenting</font>

820
00:33:13,840 --> 00:33:20,799
in 2012 on that did you<font color="#E5E5E5"> spot like people</font>

821
00:33:18,040 --> 00:33:23,770
<font color="#CCCCCC">who</font><font color="#E5E5E5"> sharing this broken stuff between</font>

822
00:33:20,799 --> 00:33:25,809
different families actors email yes yeah

823
00:33:23,770 --> 00:33:30,418
security I believe the diffie-hellman

824
00:33:25,809 --> 00:33:33,610
trick was originally implemented in in

825
00:33:30,419 --> 00:33:35,590
angular rating or some other exploit kit

826
00:33:33,610 --> 00:33:37,120
so they are sharing<font color="#E5E5E5"> that or they are</font>

827
00:33:35,590 --> 00:33:39,879
copying that I don't know but there's

828
00:33:37,120 --> 00:33:41,770
nothing we<font color="#E5E5E5"> certain implementations you</font>

829
00:33:39,880 --> 00:33:43,660
know what what like this<font color="#E5E5E5"> is kind of</font>

830
00:33:41,770 --> 00:33:45,429
broken implementation like I mean you

831
00:33:43,660 --> 00:33:47,950
know adding this linear kind of stuff at

832
00:33:45,429 --> 00:33:49,720
the end and you know as a copying each

833
00:33:47,950 --> 00:33:51,429
other as I sharing the code between

834
00:33:49,720 --> 00:33:54,070
different you mean are they coping the

835
00:33:51,429 --> 00:33:55,510
the<font color="#E5E5E5"> fuck-ups yeah yeah yeah you only get</font>

836
00:33:54,070 --> 00:33:57,220
this kind of problem because people you

837
00:33:55,510 --> 00:33:58,690
know they improvise and try to do it

838
00:33:57,220 --> 00:34:00,250
themselves and start of trying to copy a

839
00:33:58,690 --> 00:34:01,809
working solution that's how<font color="#E5E5E5"> you get</font>

840
00:34:00,250 --> 00:34:03,460
there in the<font color="#CCCCCC"> first place usually it</font>

841
00:34:01,809 --> 00:34:05,020
might happen we haven't seen anything

842
00:34:03,460 --> 00:34:15,990
like<font color="#CCCCCC"> that I will be</font><font color="#E5E5E5"> very happy to find</font>

843
00:34:05,020 --> 00:34:15,989
<font color="#E5E5E5">something like anyone else thank you</font>

844
00:34:16,589 --> 00:34:18,649
you

