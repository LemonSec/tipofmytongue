1
00:00:02,520 --> 00:00:09,540
thank you<font color="#CCCCCC"> thank you very much welcome</font>

2
00:00:06,930 --> 00:00:11,730
everyone<font color="#E5E5E5"> to our talk</font><font color="#CCCCCC"> about exploited</font>

3
00:00:09,540 --> 00:00:15,538
generation and<font color="#E5E5E5"> JavaScript analysis</font>

4
00:00:11,730 --> 00:00:16,860
automation between debug we will try to

5
00:00:15,539 --> 00:00:22,939
<font color="#E5E5E5">come up with a longer name but we</font>

6
00:00:16,860 --> 00:00:25,470
couldn't so few notes about myself i

7
00:00:22,940 --> 00:00:27,990
have paid too much public information

8
00:00:25,470 --> 00:00:29,700
about myself on google so just search my

9
00:00:27,990 --> 00:00:34,820
name and<font color="#E5E5E5"> you will know everything about</font>

10
00:00:29,700 --> 00:00:39,510
me but<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have a wife three-year-old son</font>

11
00:00:34,820 --> 00:00:42,720
my number one<font color="#CCCCCC"> hobby is hiking injury so</font>

12
00:00:39,510 --> 00:00:46,190
i tried now to sit every time next to

13
00:00:42,720 --> 00:00:49,350
the computer and<font color="#E5E5E5"> i have plenty of</font>

14
00:00:46,190 --> 00:00:52,440
unimportant certification and some more

15
00:00:49,350 --> 00:00:58,280
useful ones like the ones from offensive

16
00:00:52,440 --> 00:01:01,440
security and we close<font color="#CCCCCC"> hey good morning</font>

17
00:00:58,280 --> 00:01:04,170
<font color="#E5E5E5">i'm mostly off the grid so</font><font color="#CCCCCC"> i'm a kind</font><font color="#E5E5E5"> of</font>

18
00:01:01,440 --> 00:01:07,100
paranoid person so you will not find<font color="#E5E5E5"> me</font>

19
00:01:04,170 --> 00:01:09,899
too much on me on google i can promise

20
00:01:07,100 --> 00:01:12,589
just a little<font color="#E5E5E5"> bit of information about</font>

21
00:01:09,899 --> 00:01:15,749
<font color="#E5E5E5">myself yeah I'm married I have two kids</font>

22
00:01:12,590 --> 00:01:18,090
<font color="#CCCCCC">and myself I'm</font><font color="#E5E5E5"> not so much of a third</font>

23
00:01:15,749 --> 00:01:19,469
collector although<font color="#CCCCCC"> I'm i'm interested a</font>

24
00:01:18,090 --> 00:01:22,560
lot of drinks and<font color="#E5E5E5"> i typically do</font>

25
00:01:19,469 --> 00:01:25,380
<font color="#E5E5E5">addendum but the one that potentially is</font>

26
00:01:22,560 --> 00:01:28,350
relevant for this presentation is<font color="#E5E5E5"> ajax</font>

27
00:01:25,380 --> 00:01:30,658
reverse engineering malware so as for

28
00:01:28,350 --> 00:01:33,869
hobbies you know<font color="#CCCCCC"> i'm also kind of the</font>

29
00:01:30,659 --> 00:01:38,869
hiker and I typically try a new sport

30
00:01:33,869 --> 00:01:42,109
every year backed each<font color="#E5E5E5"> other thank you</font>

31
00:01:38,869 --> 00:01:45,359
so our first part of the talk is the

32
00:01:42,109 --> 00:01:49,439
automated exploit generation<font color="#CCCCCC"> within</font>

33
00:01:45,359 --> 00:01:52,439
<font color="#E5E5E5">debug so the oh no at least people who</font>

34
00:01:49,439 --> 00:01:57,419
<font color="#CCCCCC">anytime wrote or try to write an exploit</font>

35
00:01:52,439 --> 00:02:00,318
or develop an exploit how annoying it

36
00:01:57,419 --> 00:02:04,889
can be sometimes so it's a heavily

37
00:02:00,319 --> 00:02:09,330
manual intensive process to dig into in

38
00:02:04,889 --> 00:02:11,579
inside the debugger and we want all the

39
00:02:09,330 --> 00:02:14,140
the challenges venue when you start a

40
00:02:11,580 --> 00:02:17,140
debugger you start the process

41
00:02:14,140 --> 00:02:19,660
and you realize that<font color="#CCCCCC"> oh I forgot</font><font color="#E5E5E5"> to put</font>

42
00:02:17,140 --> 00:02:22,569
in the reg point and then you start<font color="#E5E5E5"> over</font>

43
00:02:19,660 --> 00:02:25,870
and then you realize oh I did it<font color="#E5E5E5"> a typo</font>

44
00:02:22,569 --> 00:02:28,239
in my exploit ok let's start over stop

45
00:02:25,870 --> 00:02:30,160
the debugger start the debugger start

46
00:02:28,240 --> 00:02:36,370
the process attach<font color="#CCCCCC"> the process to the</font>

47
00:02:30,160 --> 00:02:39,790
debugger continue crash it and so on it

48
00:02:36,370 --> 00:02:43,870
can be really<font color="#E5E5E5"> time-consuming many times</font>

49
00:02:39,790 --> 00:02:46,090
and<font color="#E5E5E5"> also frustrating in in some cases</font>

50
00:02:43,870 --> 00:02:50,320
especially when you are<font color="#E5E5E5"> progressing</font>

51
00:02:46,090 --> 00:02:52,450
towards the end and you tend to<font color="#E5E5E5"> rush we</font>

52
00:02:50,320 --> 00:02:58,359
tend<font color="#E5E5E5"> to make more and more mistakes in</font>

53
00:02:52,450 --> 00:03:01,988
our little exploit code on the other

54
00:02:58,360 --> 00:03:04,150
<font color="#E5E5E5">hand talking about classic buffer</font>

55
00:03:01,989 --> 00:03:09,970
overflows so not talking about Colonel

56
00:03:04,150 --> 00:03:12,250
exploits or difficult heap exploits and

57
00:03:09,970 --> 00:03:14,980
on browsers and hip spring and all these

58
00:03:12,250 --> 00:03:18,760
fancy stuff but if you look on one

59
00:03:14,980 --> 00:03:21,820
classic buffer overflow exploit<font color="#E5E5E5"> it's</font>

60
00:03:18,760 --> 00:03:25,359
quite standard process how you really

61
00:03:21,820 --> 00:03:28,299
<font color="#E5E5E5">develop an exploit so you usually</font>

62
00:03:25,360 --> 00:03:31,390
started finding the<font color="#CCCCCC"> eip finding out that</font>

63
00:03:28,299 --> 00:03:34,720
you can control the IP what is the

64
00:03:31,390 --> 00:03:38,738
offset on your buffer to overwrite the

65
00:03:34,720 --> 00:03:41,290
IP then<font color="#CCCCCC"> you will start we examine the</font>

66
00:03:38,739 --> 00:03:45,579
memory layout how much<font color="#E5E5E5"> space you have in</font>

67
00:03:41,290 --> 00:03:49,450
various places which registers point to

68
00:03:45,579 --> 00:03:52,900
your buffer then you will try to somehow

69
00:03:49,450 --> 00:03:55,720
jump to your Shack whole week using one

70
00:03:52,900 --> 00:03:57,430
of the registers then you will generate

71
00:03:55,720 --> 00:04:01,180
the shellcode usually probably

72
00:03:57,430 --> 00:04:04,239
<font color="#E5E5E5">metasploit and at the end put it</font><font color="#CCCCCC"> all</font>

73
00:04:01,180 --> 00:04:07,720
together<font color="#E5E5E5"> and you will get a working</font>

74
00:04:04,239 --> 00:04:10,600
exploit but this is usually there are

75
00:04:07,720 --> 00:04:12,760
some corner cases when you need to<font color="#CCCCCC"> come</font>

76
00:04:10,600 --> 00:04:15,160
up with some really creative ideas but

77
00:04:12,760 --> 00:04:17,589
if you look the majority of plastic

78
00:04:15,160 --> 00:04:23,979
buffer overflows I think this

79
00:04:17,589 --> 00:04:27,219
methodology covers most of it so I was

80
00:04:23,979 --> 00:04:29,870
<font color="#E5E5E5">thinking why we cannot automate this</font>

81
00:04:27,220 --> 00:04:32,349
entire process there are<font color="#E5E5E5"> two start</font>

82
00:04:29,870 --> 00:04:36,729
already doing some part of it like

83
00:04:32,349 --> 00:04:39,919
trying to<font color="#E5E5E5"> help you to develop and</font>

84
00:04:36,729 --> 00:04:43,849
exploit<font color="#CCCCCC"> it but none of them automating</font>

85
00:04:39,919 --> 00:04:47,090
the entire flow so my goal<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to create</font>

86
00:04:43,849 --> 00:04:50,690
a tool<font color="#E5E5E5"> which</font><font color="#CCCCCC"> can do the entire extra</font>

87
00:04:47,090 --> 00:04:54,770
development for you from a crash<font color="#E5E5E5"> till</font>

88
00:04:50,690 --> 00:04:58,340
working exploit and if possible with

89
00:04:54,770 --> 00:05:02,840
zero<font color="#E5E5E5"> manual interaction so I wrote a</font>

90
00:04:58,340 --> 00:05:05,869
tool in Python which uses the py KD

91
00:05:02,840 --> 00:05:09,318
library and maybe a<font color="#E5E5E5"> few words about this</font>

92
00:05:05,870 --> 00:05:13,970
one this library is developed i believe

93
00:05:09,319 --> 00:05:15,889
by a<font color="#E5E5E5"> russian team and basically it</font>

94
00:05:13,970 --> 00:05:18,889
allows you to interact with wind above

95
00:05:15,889 --> 00:05:21,620
directly from<font color="#CCCCCC"> python there are two way</font>

96
00:05:18,889 --> 00:05:25,490
street you can either run<font color="#CCCCCC"> python scripts</font>

97
00:05:21,620 --> 00:05:29,509
with this library inside<font color="#CCCCCC"> vin debug or it</font>

98
00:05:25,490 --> 00:05:32,150
<font color="#E5E5E5">allows you to actually invoke windy box</font>

99
00:05:29,509 --> 00:05:34,009
start the process in<font color="#CCCCCC"> windy bug directly</font>

100
00:05:32,150 --> 00:05:38,810
from<font color="#CCCCCC"> Python so you don't even need to</font>

101
00:05:34,009 --> 00:05:41,599
open windy bug for anything and and<font color="#E5E5E5"> it's</font>

102
00:05:38,810 --> 00:05:45,349
<font color="#E5E5E5">really helpful it has a very good and</font>

103
00:05:41,599 --> 00:05:50,150
rich API you can query the values in<font color="#E5E5E5"> the</font>

104
00:05:45,349 --> 00:05:52,460
register registers search the memory do

105
00:05:50,150 --> 00:05:57,919
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> stock which which can help you</font>

106
00:05:52,460 --> 00:06:00,318
to explore the environment and I already

107
00:05:57,919 --> 00:06:06,789
list the tool but we will share the link

108
00:06:00,319 --> 00:06:12,620
after<font color="#CCCCCC"> the talk so what to can do as of</font>

109
00:06:06,789 --> 00:06:16,340
right now again this works for classic

110
00:06:12,620 --> 00:06:21,080
buffer overflow so nothing more it can

111
00:06:16,340 --> 00:06:25,789
also bypass SLR with the method<font color="#E5E5E5"> of it</font>

112
00:06:21,080 --> 00:06:29,960
will try to look for dls which doesn't

113
00:06:25,789 --> 00:06:31,520
have the ASL ASL our flag so we look for

114
00:06:29,960 --> 00:06:35,029
my dues where the memory is not

115
00:06:31,520 --> 00:06:37,639
randomized of one load and if you want

116
00:06:35,029 --> 00:06:39,430
it can try to search only those ones for

117
00:06:37,639 --> 00:06:42,110
assembly code

118
00:06:39,430 --> 00:06:45,530
<font color="#E5E5E5">it's worse for file and network-based</font>

119
00:06:42,110 --> 00:06:47,720
exploits it's important because when<font color="#E5E5E5"> you</font>

120
00:06:45,530 --> 00:06:49,489
automate it for network based exploits

121
00:06:47,720 --> 00:06:52,460
you have to start the process wait a

122
00:06:49,490 --> 00:06:55,610
little bit and<font color="#CCCCCC"> then send your exploit on</font>

123
00:06:52,460 --> 00:06:59,770
the<font color="#CCCCCC"> other end on a file-based exploits</font>

124
00:06:55,610 --> 00:07:03,860
for<font color="#E5E5E5"> example of an opening let's say mp3</font>

125
00:06:59,770 --> 00:07:05,690
list file you<font color="#CCCCCC"> need to generate the file</font>

126
00:07:03,860 --> 00:07:08,720
and then open the process download that

127
00:07:05,690 --> 00:07:11,480
fire to the process so the workflow is

128
00:07:08,720 --> 00:07:15,200
is a little bit different and it can

129
00:07:11,480 --> 00:07:18,850
basically develop a working exploit from

130
00:07:15,200 --> 00:07:21,140
a simple crash and again it can automate

131
00:07:18,850 --> 00:07:23,960
anything and you<font color="#CCCCCC"> don't have to start in</font>

132
00:07:21,140 --> 00:07:28,880
debug you can just run this script and

133
00:07:23,960 --> 00:07:33,169
it will do everything<font color="#E5E5E5"> for you so how</font>

134
00:07:28,880 --> 00:07:37,280
does it<font color="#E5E5E5"> work it will sort of processing</font>

135
00:07:33,169 --> 00:07:39,409
<font color="#CCCCCC">vin debug from</font><font color="#E5E5E5"> python it will send in</font>

136
00:07:37,280 --> 00:07:43,190
the<font color="#E5E5E5"> crash and i will talk about later on</font>

137
00:07:39,410 --> 00:07:45,950
<font color="#E5E5E5">how you give the input twit how you</font>

138
00:07:43,190 --> 00:07:50,090
actually write exploit so it can repeat

139
00:07:45,950 --> 00:07:53,680
the tool if you find the<font color="#CCCCCC"> eip offset it</font>

140
00:07:50,090 --> 00:07:58,190
will analyze the the memory it will find

141
00:07:53,680 --> 00:08:01,700
registers pointing to your buffer it

142
00:07:58,190 --> 00:08:04,700
will find all the bad characters which

143
00:08:01,700 --> 00:08:09,289
is not supported<font color="#CCCCCC"> by the application or</font>

144
00:08:04,700 --> 00:08:11,419
which can make your exploit at work it

145
00:08:09,290 --> 00:08:15,290
will find ways to jump to your shellcode

146
00:08:11,419 --> 00:08:18,260
it will try<font color="#CCCCCC"> various methods like jumping</font>

147
00:08:15,290 --> 00:08:23,930
to a register calling the register or

148
00:08:18,260 --> 00:08:26,750
pushing the register value and returning

149
00:08:23,930 --> 00:08:30,020
to<font color="#CCCCCC"> it it will generate the shellcode now</font>

150
00:08:26,750 --> 00:08:33,020
this<font color="#E5E5E5"> part is</font><font color="#CCCCCC"> very chooses</font><font color="#E5E5E5"> metasploit to</font>

151
00:08:30,020 --> 00:08:36,919
generate the shellcode at this point is

152
00:08:33,020 --> 00:08:39,439
hard-coded to cock that exe as a share

153
00:08:36,919 --> 00:08:42,348
<font color="#E5E5E5">code but you can essentially place that</font>

154
00:08:39,440 --> 00:08:44,089
line with anything so but you need

155
00:08:42,349 --> 00:08:46,220
<font color="#CCCCCC">metasploit to generate the shell code</font>

156
00:08:44,089 --> 00:08:47,990
and it will generate the shack code

157
00:08:46,220 --> 00:08:51,070
without with knowing over the bed

158
00:08:47,990 --> 00:08:53,180
characters and at the end it will put

159
00:08:51,070 --> 00:08:55,730
everything together

160
00:08:53,180 --> 00:08:59,719
and it will successful run the exploit

161
00:08:55,730 --> 00:09:02,360
and it will also save the exploit for

162
00:08:59,720 --> 00:09:04,010
you so if it's a Wi-Fi base it will be

163
00:09:02,360 --> 00:09:06,860
<font color="#E5E5E5">already saved because the file is</font>

164
00:09:04,010 --> 00:09:11,540
ordered<font color="#E5E5E5"> there but if it's like a</font>

165
00:09:06,860 --> 00:09:14,920
network-based exploit it can save<font color="#CCCCCC"> it for</font>

166
00:09:11,540 --> 00:09:19,099
you so you<font color="#E5E5E5"> can use the exploit later on</font>

167
00:09:14,920 --> 00:09:23,300
<font color="#E5E5E5">I have a demo be didn't sacrifice</font>

168
00:09:19,100 --> 00:09:29,410
animals for the demo<font color="#E5E5E5"> guts so we decided</font>

169
00:09:23,300 --> 00:09:29,410
to<font color="#E5E5E5"> go with videos and not with livestock</font>

170
00:09:29,860 --> 00:09:39,440
so this is that the application start

171
00:09:32,570 --> 00:09:41,570
and let me zoom into so it will start

172
00:09:39,440 --> 00:09:44,470
with sending in a pattern you for

173
00:09:41,570 --> 00:09:48,350
familiar with this from<font color="#CCCCCC"> metasploit it</font>

174
00:09:44,470 --> 00:09:52,010
uses its own pattern generator and it

175
00:09:48,350 --> 00:09:58,490
will identify<font color="#CCCCCC"> the offset for the eip</font>

176
00:09:52,010 --> 00:10:02,089
over right so let's continue<font color="#E5E5E5"> you can see</font>

177
00:09:58,490 --> 00:10:04,100
that<font color="#E5E5E5"> it's restarting the application in</font>

178
00:10:02,089 --> 00:10:07,040
the<font color="#E5E5E5"> background for the demo</font><font color="#CCCCCC"> I'm using</font>

179
00:10:04,100 --> 00:10:08,709
<font color="#CCCCCC">mini</font><font color="#E5E5E5"> sure it's a very odd application</font>

180
00:10:07,040 --> 00:10:14,329
exploit but it's very good for

181
00:10:08,709 --> 00:10:19,880
demonstration and then it will start to

182
00:10:14,330 --> 00:10:21,980
find<font color="#E5E5E5"> bad characters and and it will also</font>

183
00:10:19,880 --> 00:10:25,250
log you a bunch of other outputs to the

184
00:10:21,980 --> 00:10:28,310
screen so<font color="#E5E5E5"> you will have a very rich load</font>

185
00:10:25,250 --> 00:10:38,900
information for later use in case you

186
00:10:28,310 --> 00:10:43,359
need so now it will try to<font color="#E5E5E5"> find all the</font>

187
00:10:38,900 --> 00:10:46,100
bad characters it takes a few seconds

188
00:10:43,360 --> 00:10:55,339
it's still much much faster than doing

189
00:10:46,100 --> 00:10:57,500
this by hand so if zoom into it so we

190
00:10:55,339 --> 00:11:00,529
can<font color="#E5E5E5"> see that it found all the red</font>

191
00:10:57,500 --> 00:11:04,190
<font color="#CCCCCC">corrupters it</font><font color="#E5E5E5"> will save it for later use</font>

192
00:11:00,529 --> 00:11:06,540
and basically at<font color="#E5E5E5"> that point it already</font>

193
00:11:04,190 --> 00:11:09,240
knows which registers point to your

194
00:11:06,540 --> 00:11:13,650
buffer and it will start to search all

195
00:11:09,240 --> 00:11:17,250
<font color="#CCCCCC">of the modules all of the loaded modules</font>

196
00:11:13,650 --> 00:11:21,270
for usable assembly instruction how to

197
00:11:17,250 --> 00:11:25,260
jump to your<font color="#E5E5E5"> share pod and by</font><font color="#CCCCCC"> default it</font>

198
00:11:21,270 --> 00:11:27,710
will try to find jump yes be in this

199
00:11:25,260 --> 00:11:40,020
case or jump to the Reggie to the

200
00:11:27,710 --> 00:11:44,040
specific register so let's continue so

201
00:11:40,020 --> 00:11:47,220
let me zoom in one more time so<font color="#E5E5E5"> it's</font>

202
00:11:44,040 --> 00:11:49,140
search through all the<font color="#CCCCCC"> dls and it's</font>

203
00:11:47,220 --> 00:11:53,670
recorded all the memory location where

204
00:11:49,140 --> 00:11:55,620
<font color="#CCCCCC">it found useable instructions and then</font>

205
00:11:53,670 --> 00:11:58,520
it will generate the shellcode with the

206
00:11:55,620 --> 00:11:58,520
use of<font color="#CCCCCC"> metasploit</font>

207
00:12:11,550 --> 00:12:18,349
and basically at the end it successfully

208
00:12:16,709 --> 00:12:24,209
crush the application and can lounge

209
00:12:18,350 --> 00:12:28,339
cock and the only thing<font color="#E5E5E5"> I gave to the</font>

210
00:12:24,209 --> 00:12:33,329
application initially it falls the crash

211
00:12:28,339 --> 00:12:35,630
information so how do we<font color="#CCCCCC"> use this so</font>

212
00:12:33,329 --> 00:12:40,560
there<font color="#CCCCCC"> is some people</font><font color="#E5E5E5"> that has to happen</font>

213
00:12:35,630 --> 00:12:42,269
you cannot just<font color="#E5E5E5"> take any POC code that</font>

214
00:12:40,560 --> 00:12:44,279
will catch the application give it to

215
00:12:42,269 --> 00:12:49,040
the tool because it cannot interact with

216
00:12:44,279 --> 00:12:51,930
it I came up<font color="#CCCCCC"> with an</font><font color="#E5E5E5"> exploit class and</font>

217
00:12:49,040 --> 00:12:55,439
there are some functions inside to it

218
00:12:51,930 --> 00:12:58,529
and which has to be<font color="#E5E5E5"> populated mainly the</font>

219
00:12:55,440 --> 00:13:03,000
exploit function which basically defines

220
00:12:58,529 --> 00:13:06,750
how you catch the application again this

221
00:13:03,000 --> 00:13:09,870
is<font color="#E5E5E5"> written in Python so basically you</font>

222
00:13:06,750 --> 00:13:13,200
have to populate this function in order

223
00:13:09,870 --> 00:13:16,920
to work and the other thing<font color="#CCCCCC"> you have to</font>

224
00:13:13,200 --> 00:13:19,320
do is you have<font color="#E5E5E5"> this self that buffer the</font>

225
00:13:16,920 --> 00:13:23,550
buffer is a internal variable to the

226
00:13:19,320 --> 00:13:27,300
<font color="#E5E5E5">class and that basically did it's a list</font>

227
00:13:23,550 --> 00:13:30,810
of strings which are the building blocks

228
00:13:27,300 --> 00:13:33,930
of<font color="#CCCCCC"> the of your buffer so it's mainly</font>

229
00:13:30,810 --> 00:13:37,020
split to three places before<font color="#E5E5E5"> AIP</font>

230
00:13:33,930 --> 00:13:42,959
<font color="#E5E5E5">overwrite the</font><font color="#CCCCCC"> eip override</font><font color="#E5E5E5"> and after the</font>

231
00:13:37,020 --> 00:13:44,670
eip overwrite part and the reason you

232
00:13:42,959 --> 00:13:46,920
have I have<font color="#CCCCCC"> to have this class is</font>

233
00:13:44,670 --> 00:13:50,849
<font color="#CCCCCC">because because i have to modify the</font>

234
00:13:46,920 --> 00:13:53,819
buffer on<font color="#CCCCCC"> the fly based</font><font color="#E5E5E5"> on the</font>

235
00:13:50,850 --> 00:13:56,190
<font color="#CCCCCC">information I gathered during the</font>

236
00:13:53,820 --> 00:14:00,329
analysis so that buffer is constantly

237
00:13:56,190 --> 00:14:03,630
evolving either with the patterns or

238
00:14:00,329 --> 00:14:09,239
with the bad characters 3 argent and so

239
00:14:03,630 --> 00:14:12,560
on and there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> another function which</font>

240
00:14:09,240 --> 00:14:17,430
have to be populated in case of

241
00:14:12,560 --> 00:14:20,250
network-based exploits that's the save

242
00:14:17,430 --> 00:14:23,160
function in case you want to save your

243
00:14:20,250 --> 00:14:26,250
<font color="#E5E5E5">exploit for future and why you wouldn't</font>

244
00:14:23,160 --> 00:14:30,930
want to do that<font color="#E5E5E5"> and it would</font><font color="#CCCCCC"> be</font>

245
00:14:26,250 --> 00:14:33,449
basically the very same function than

246
00:14:30,930 --> 00:14:36,628
this exploit it would be just writing

247
00:14:33,449 --> 00:14:39,990
out everything<font color="#CCCCCC"> you put here you right</font>

248
00:14:36,629 --> 00:14:43,889
you right<font color="#E5E5E5"> down to a file and you</font><font color="#CCCCCC"> write</font>

249
00:14:39,990 --> 00:14:47,040
out was the<font color="#E5E5E5"> de buffer to a file and</font>

250
00:14:43,889 --> 00:14:49,980
that's it and in case<font color="#CCCCCC"> of buff 5 based</font>

251
00:14:47,040 --> 00:14:53,329
exploits you<font color="#E5E5E5"> already have</font><font color="#CCCCCC"> the file on</font>

252
00:14:49,980 --> 00:14:59,069
the disk so you don't need<font color="#CCCCCC"> to save it</font>

253
00:14:53,329 --> 00:15:00,930
<font color="#E5E5E5">additionally I test it with a bunch of</font>

254
00:14:59,069 --> 00:15:04,160
application I have other videos as<font color="#CCCCCC"> well</font>

255
00:15:00,930 --> 00:15:07,170
<font color="#CCCCCC">if and i will post them later on</font>

256
00:15:04,160 --> 00:15:12,439
probably in youtube if anyone is

257
00:15:07,170 --> 00:15:15,300
<font color="#E5E5E5">interested it works pretty well reliably</font>

258
00:15:12,439 --> 00:15:17,129
probably big challenges if you need to

259
00:15:15,300 --> 00:15:22,069
interrupt with the application in order

260
00:15:17,129 --> 00:15:27,199
to crash it then can<font color="#E5E5E5"> be a challenge</font><font color="#CCCCCC"> but</font>

261
00:15:22,069 --> 00:15:34,290
generally it it works and for the future

262
00:15:27,199 --> 00:15:36,630
based on<font color="#E5E5E5"> this I plant with the seh based</font>

263
00:15:34,290 --> 00:15:40,560
overflows because i<font color="#CCCCCC"> think this those can</font>

264
00:15:36,630 --> 00:15:43,500
be automated as well add more logic to

265
00:15:40,560 --> 00:15:47,130
make more tricky jumps to the share code

266
00:15:43,500 --> 00:15:53,339
and maybe Assad DP bypass with

267
00:15:47,130 --> 00:15:59,430
generating rope chains to the exploit so

268
00:15:53,339 --> 00:16:03,240
that was my part thank you hey<font color="#E5E5E5"> Thank</font><font color="#CCCCCC"> You</font>

269
00:15:59,430 --> 00:16:05,880
<font color="#E5E5E5">Java so funny thing that job and I both</font>

270
00:16:03,240 --> 00:16:07,589
attended the same most awesome windows

271
00:16:05,880 --> 00:16:10,680
exploitation training provided by

272
00:16:07,589 --> 00:16:13,259
<font color="#CCCCCC">coraline where we got our inspiration</font>

273
00:16:10,680 --> 00:16:16,859
from yet i'm going to look at the

274
00:16:13,259 --> 00:16:19,379
completely reverse angle of it so how we

275
00:16:16,860 --> 00:16:23,129
could use automation for reverse

276
00:16:19,379 --> 00:16:25,500
engineering tasks so how many reverse

277
00:16:23,129 --> 00:16:29,390
engineers do we have in this room hands

278
00:16:25,500 --> 00:16:32,240
up good see a few<font color="#E5E5E5"> hands</font>

279
00:16:29,390 --> 00:16:34,790
so now you wouldn't want<font color="#CCCCCC"> to waste your</font>

280
00:16:32,240 --> 00:16:37,610
<font color="#E5E5E5">time on reversing</font><font color="#CCCCCC"> non-malicious</font><font color="#E5E5E5"> code</font>

281
00:16:34,790 --> 00:16:39,709
with you so what's the virtual oh you

282
00:16:37,610 --> 00:16:41,240
<font color="#E5E5E5">get some sort of hint from our</font>

283
00:16:39,710 --> 00:16:45,160
particular code is being malicious

284
00:16:41,240 --> 00:16:47,570
either from a sandbox analysis engine

285
00:16:45,160 --> 00:16:50,660
never mind whether it's<font color="#E5E5E5"> you know free or</font>

286
00:16:47,570 --> 00:16:53,360
commercial or the<font color="#E5E5E5"> level two teams from</font>

287
00:16:50,660 --> 00:16:55,850
<font color="#CCCCCC">the blue team notices bad behavior so</font>

288
00:16:53,360 --> 00:16:59,510
<font color="#E5E5E5">what once the thing lands on your desk</font>

289
00:16:55,850 --> 00:17:01,580
need to figure<font color="#E5E5E5"> out how it works and what</font>

290
00:16:59,510 --> 00:17:05,209
it does with it whether it is<font color="#CCCCCC"> already</font>

291
00:17:01,580 --> 00:17:06,650
<font color="#E5E5E5">known or not and in the kids of browser</font>

292
00:17:05,209 --> 00:17:08,800
exploit<font color="#CCCCCC"> a</font><font color="#E5E5E5"> malware it comes down to</font>

293
00:17:06,650 --> 00:17:12,350
figuring<font color="#E5E5E5"> out the</font><font color="#CCCCCC"> JavaScript part of it</font>

294
00:17:08,800 --> 00:17:15,409
isolating the shellcode understanding

295
00:17:12,349 --> 00:17:19,219
the vulnerability and honestly it's

296
00:17:15,410 --> 00:17:21,550
quite a time-consuming process and it is

297
00:17:19,220 --> 00:17:24,709
coming with a number<font color="#E5E5E5"> of challenges so</font>

298
00:17:21,550 --> 00:17:26,780
one of them being is<font color="#CCCCCC"> that it can be</font>

299
00:17:24,709 --> 00:17:28,730
analyzed in<font color="#E5E5E5"> the browser zone debugger</font>

300
00:17:26,780 --> 00:17:30,470
but then you have to spend<font color="#CCCCCC"> some time</font>

301
00:17:28,730 --> 00:17:35,540
figuring<font color="#E5E5E5"> out the correct breakpoints you</font>

302
00:17:30,470 --> 00:17:38,990
have to set up it can be extracted<font color="#E5E5E5"> from</font>

303
00:17:35,540 --> 00:17:42,110
the page and<font color="#E5E5E5"> you're using an external</font>

304
00:17:38,990 --> 00:17:47,300
javascript engine to to analyze the code

305
00:17:42,110 --> 00:17:49,459
<font color="#E5E5E5">and to catch it if needed and last but</font>

306
00:17:47,300 --> 00:17:51,740
not least you have to sometimes deal

307
00:17:49,460 --> 00:17:54,440
with the problems of code containing

308
00:17:51,740 --> 00:18:01,730
anti debugging or anti reverse and

309
00:17:54,440 --> 00:18:03,680
techniques thus quite a warning so we

310
00:18:01,730 --> 00:18:06,140
are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to unleash a one tool</font>

311
00:18:03,680 --> 00:18:08,750
solves all problems of<font color="#CCCCCC"> your reverse</font>

312
00:18:06,140 --> 00:18:11,720
engineering problems nor are<font color="#CCCCCC"> we going to</font>

313
00:18:08,750 --> 00:18:13,010
fully automate the whole<font color="#CCCCCC"> process I don't</font>

314
00:18:11,720 --> 00:18:15,220
<font color="#CCCCCC">believe it's it's entirely possible</font>

315
00:18:13,010 --> 00:18:19,520
leader<font color="#E5E5E5"> after all it's called reverse</font>

316
00:18:15,220 --> 00:18:21,830
engineering right so what we're going to

317
00:18:19,520 --> 00:18:26,720
do is do a bit of code the obfuscation

318
00:18:21,830 --> 00:18:27,949
and the the methodology goes like okay

319
00:18:26,720 --> 00:18:32,630
you want to<font color="#E5E5E5"> catch the function before</font>

320
00:18:27,950 --> 00:18:35,450
the they execute you play some sort of

321
00:18:32,630 --> 00:18:38,909
break point if needed a overload the

322
00:18:35,450 --> 00:18:43,979
functions you locate the exploit code

323
00:18:38,909 --> 00:18:47,429
you understand the shocker so our

324
00:18:43,979 --> 00:18:49,259
approach to<font color="#E5E5E5"> this was to put</font><font color="#CCCCCC"> together a</font>

325
00:18:47,429 --> 00:18:52,470
tool that can automate the other d

326
00:18:49,259 --> 00:18:54,840
obfuscation now javaScript office<font color="#E5E5E5"> gators</font>

327
00:18:52,470 --> 00:18:57,840
used several techniques variable name

328
00:18:54,840 --> 00:19:01,049
mangling character substitutes function

329
00:18:57,840 --> 00:19:06,080
expressions arrow functions lambdas if

330
00:19:01,049 --> 00:19:08,700
he's and most often evals so evaluates

331
00:19:06,080 --> 00:19:13,769
work you've noted gladly since

332
00:19:08,700 --> 00:19:16,379
javascript is not a class language you

333
00:19:13,769 --> 00:19:20,399
don't<font color="#E5E5E5"> have to deal with reflections so</font>

334
00:19:16,379 --> 00:19:25,309
there<font color="#E5E5E5"> are a dozen or so</font><font color="#CCCCCC"> javascript d</font>

335
00:19:20,399 --> 00:19:28,168
obfuscator zout there but we wanted to

336
00:19:25,309 --> 00:19:30,979
come<font color="#CCCCCC"> up with a simple yet effective</font>

337
00:19:28,169 --> 00:19:34,099
solution resolving the issue of

338
00:19:30,979 --> 00:19:38,220
reversing natively so are<font color="#E5E5E5"> going to</font>

339
00:19:34,099 --> 00:19:41,479
reinvent<font color="#E5E5E5"> the wheel here well maybe but</font>

340
00:19:38,220 --> 00:19:45,299
our real is going to be a bit different

341
00:19:41,479 --> 00:19:48,239
so we want<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> it impossible for</font><font color="#E5E5E5"> the</font>

342
00:19:45,299 --> 00:19:50,700
<font color="#E5E5E5">JavaScript code like the malicious code</font>

343
00:19:48,239 --> 00:19:54,869
to figure it ever out that it's<font color="#E5E5E5"> being</font>

344
00:19:50,700 --> 00:19:57,389
debugged for bits being reversed we have

345
00:19:54,869 --> 00:19:59,668
to want<font color="#E5E5E5"> to have the malware run in its</font>

346
00:19:57,389 --> 00:20:04,109
most natural environment that is the

347
00:19:59,669 --> 00:20:06,869
browser itself so it<font color="#CCCCCC"> would be very nice</font>

348
00:20:04,109 --> 00:20:09,509
if we could somehow get it to stop at

349
00:20:06,869 --> 00:20:12,359
the<font color="#E5E5E5"> point where the exploit starts to</font>

350
00:20:09,509 --> 00:20:18,389
run and want you<font color="#E5E5E5"> to have the minimum</font>

351
00:20:12,359 --> 00:20:20,340
manual interaction so this pretty much

352
00:20:18,389 --> 00:20:22,498
comes in handy<font color="#E5E5E5"> when the JavaScript code</font>

353
00:20:20,340 --> 00:20:25,049
is trying to run a browser exploit with

354
00:20:22,499 --> 00:20:30,450
the heat spray and use after free

355
00:20:25,049 --> 00:20:32,399
situation for example so well breaking

356
00:20:30,450 --> 00:20:35,909
out<font color="#CCCCCC"> of the jail you know breaking our</font>

357
00:20:32,399 --> 00:20:38,008
<font color="#CCCCCC">JavaScript code from the strongest</font>

358
00:20:35,909 --> 00:20:41,009
natural environment doesn't always work

359
00:20:38,009 --> 00:20:44,789
as good so why not you know why don't<font color="#CCCCCC"> we</font>

360
00:20:41,009 --> 00:20:46,879
break into it and the idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to do harm</font>

361
00:20:44,789 --> 00:20:49,919
is the awesome powers of<font color="#CCCCCC"> wind</font><font color="#E5E5E5"> debug and</font>

362
00:20:46,879 --> 00:20:52,320
a bit of<font color="#E5E5E5"> Python code that goes along</font>

363
00:20:49,919 --> 00:20:57,830
with it using<font color="#CCCCCC"> the same PI KD</font>

364
00:20:52,320 --> 00:21:02,428
windy bug extension and the code<font color="#E5E5E5"> is</font>

365
00:20:57,830 --> 00:21:07,259
hosted at github well we will see at the

366
00:21:02,429 --> 00:21:12,000
final slide so what can<font color="#CCCCCC"> I do for the</font>

367
00:21:07,259 --> 00:21:14,360
<font color="#CCCCCC">moment it works for 4i 11d obfuscates</font>

368
00:21:12,000 --> 00:21:17,130
evil based code stops at the exploit

369
00:21:14,360 --> 00:21:20,850
each session is being logged to a new

370
00:21:17,130 --> 00:21:27,000
file and most of the above the process

371
00:21:20,850 --> 00:21:30,199
is fully automated so you know where

372
00:21:27,000 --> 00:21:34,830
since we want<font color="#E5E5E5"> to break into the jail</font>

373
00:21:30,200 --> 00:21:36,600
want<font color="#E5E5E5"> to find the right function so you</font>

374
00:21:34,830 --> 00:21:41,158
know word of warning the school has to

375
00:21:36,600 --> 00:21:43,289
<font color="#CCCCCC">be maintained in a sense</font><font color="#E5E5E5"> that each major</font>

376
00:21:41,159 --> 00:21:45,330
version of the browser and each vendor

377
00:21:43,289 --> 00:21:47,460
has a very different implementation of

378
00:21:45,330 --> 00:21:49,350
the JavaScript engine obviously very

379
00:21:47,460 --> 00:21:53,879
different debug symbols that go along

380
00:21:49,350 --> 00:21:58,289
with it so we're<font color="#E5E5E5"> going to do to try to</font>

381
00:21:53,879 --> 00:21:59,789
figure<font color="#E5E5E5"> out the JavaScript engines points</font>

382
00:21:58,289 --> 00:22:02,070
were actually evaluation is happening

383
00:21:59,789 --> 00:22:04,259
and we're going<font color="#E5E5E5"> to use dynamic arguments</font>

384
00:22:02,070 --> 00:22:07,590
for that to make sure that we don't

385
00:22:04,259 --> 00:22:11,059
confuse the<font color="#E5E5E5"> the source code with the the</font>

386
00:22:07,590 --> 00:22:13,500
actual<font color="#E5E5E5"> dynamically evaluated code so</font>

387
00:22:11,059 --> 00:22:15,629
finding the pointer to the argument<font color="#CCCCCC"> is</font>

388
00:22:13,500 --> 00:22:19,320
the next thing so you want to make sure

389
00:22:15,629 --> 00:22:21,870
that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> you know log</font>

390
00:22:19,320 --> 00:22:26,879
whatever is being already evaluated not

391
00:22:21,870 --> 00:22:29,908
you know the string that goes you know

392
00:22:26,879 --> 00:22:34,009
in there before<font color="#CCCCCC"> the the obfuscation</font>

393
00:22:29,909 --> 00:22:36,990
happens so once if you figure out the

394
00:22:34,009 --> 00:22:40,080
the argument<font color="#CCCCCC"> you need to figure</font><font color="#E5E5E5"> out the</font>

395
00:22:36,990 --> 00:22:42,269
location to it and I'm not<font color="#CCCCCC"> sure how many</font>

396
00:22:40,080 --> 00:22:43,799
<font color="#E5E5E5">people are familiar with the what you</font>

397
00:22:42,269 --> 00:22:46,139
know different when debug extensions

398
00:22:43,799 --> 00:22:48,179
like Mona for example as one of the

399
00:22:46,139 --> 00:22:51,508
great tools and it helps you a lot with

400
00:22:48,179 --> 00:22:52,860
finding you know<font color="#E5E5E5"> X in memory but as good</font>

401
00:22:51,509 --> 00:22:55,530
as it is unfortunately I couldn't figure

402
00:22:52,860 --> 00:23:00,260
out for the life of me how it

403
00:22:55,530 --> 00:23:03,780
could give me in a most simple way to

404
00:23:00,260 --> 00:23:07,500
get a pointer from the current registers

405
00:23:03,780 --> 00:23:11,310
to<font color="#CCCCCC"> a memory address so for the first</font>

406
00:23:07,500 --> 00:23:14,790
reason I created a<font color="#E5E5E5"> Python helper</font>

407
00:23:11,310 --> 00:23:17,460
application this chain that pie it works

408
00:23:14,790 --> 00:23:22,560
<font color="#E5E5E5">like you provide the address when</font><font color="#CCCCCC"> you</font>

409
00:23:17,460 --> 00:23:27,090
want to point to and then the level of

410
00:23:22,560 --> 00:23:29,610
recursion or iterations of point on the

411
00:23:27,090 --> 00:23:33,959
references this starting register that

412
00:23:29,610 --> 00:23:36,449
you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to start from and a range of</font>

413
00:23:33,960 --> 00:23:39,930
words that<font color="#E5E5E5"> you want them to</font><font color="#CCCCCC"> come up with</font>

414
00:23:36,450 --> 00:23:42,810
so this will<font color="#E5E5E5"> help you in many cases most</font>

415
00:23:39,930 --> 00:23:45,840
often able you will use either the<font color="#E5E5E5"> ESP</font>

416
00:23:42,810 --> 00:23:50,610
register well<font color="#CCCCCC"> obviously most things are</font>

417
00:23:45,840 --> 00:23:52,290
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the stack or in certain cases the CCX</font>

418
00:23:50,610 --> 00:23:57,629
register which contains a pointer to

419
00:23:52,290 --> 00:24:01,170
this so<font color="#CCCCCC"> oh no it's it's a longer story</font>

420
00:23:57,630 --> 00:24:04,290
but you figure out that the the most

421
00:24:01,170 --> 00:24:06,210
obvious codes from the from<font color="#CCCCCC"> the symbols</font>

422
00:24:04,290 --> 00:24:08,879
from Internet Explorer don't point to

423
00:24:06,210 --> 00:24:13,350
what you're after and<font color="#E5E5E5"> you have to dig</font>

424
00:24:08,880 --> 00:24:14,580
deeper so at the end of<font color="#E5E5E5"> this</font>

425
00:24:13,350 --> 00:24:16,590
presentation the code that<font color="#E5E5E5"> we're</font>

426
00:24:14,580 --> 00:24:19,379
<font color="#E5E5E5">releasing is not just the code but also</font>

427
00:24:16,590 --> 00:24:21,230
the methodology so we're providing<font color="#CCCCCC"> a</font>

428
00:24:19,380 --> 00:24:23,730
full tutorial on how you can actually

429
00:24:21,230 --> 00:24:25,050
figure these things out and later on you

430
00:24:23,730 --> 00:24:30,890
will be<font color="#E5E5E5"> able to maintain</font><font color="#CCCCCC"> four different</font>

431
00:24:25,050 --> 00:24:35,840
browsers so once you<font color="#CCCCCC"> have the logging</font>

432
00:24:30,890 --> 00:24:38,490
<font color="#E5E5E5">breakpoint you start to automate things</font>

433
00:24:35,840 --> 00:24:40,560
not sure how many<font color="#E5E5E5"> of you have you have</font>

434
00:24:38,490 --> 00:24:42,330
you try to debug directly into the

435
00:24:40,560 --> 00:24:45,389
browser's it's not the<font color="#E5E5E5"> most easy thing</font>

436
00:24:42,330 --> 00:24:49,110
and attaching to debugger even is not

437
00:24:45,390 --> 00:24:51,480
simple so<font color="#E5E5E5"> we put</font><font color="#CCCCCC"> together some</font><font color="#E5E5E5"> Queen</font>

438
00:24:49,110 --> 00:24:53,729
debug script files that create a unique

439
00:24:51,480 --> 00:24:55,770
lock five for each session ignore the

440
00:24:53,730 --> 00:25:01,290
<font color="#E5E5E5">unneeded breaks make sure</font><font color="#CCCCCC"> that you set</font>

441
00:24:55,770 --> 00:25:03,389
up the correct levels of exception

442
00:25:01,290 --> 00:25:04,889
handling so ignore the ones<font color="#E5E5E5"> you don't</font>

443
00:25:03,390 --> 00:25:07,230
<font color="#E5E5E5">really care</font><font color="#CCCCCC"> about</font>

444
00:25:04,890 --> 00:25:09,720
and you only catch those ones that that

445
00:25:07,230 --> 00:25:11,880
you need to win debug syntax is not

446
00:25:09,720 --> 00:25:15,510
exactly user-friendly so I put together

447
00:25:11,880 --> 00:25:19,170
one short method to you know encompass

448
00:25:15,510 --> 00:25:22,680
the sinner in a<font color="#CCCCCC"> 29 ER and ultimately you</font>

449
00:25:19,170 --> 00:25:25,410
set up the<font color="#CCCCCC"> breakpoint so again time is</font>

450
00:25:22,680 --> 00:25:28,500
short and we didn't pray enough long

451
00:25:25,410 --> 00:25:33,720
enough for the demo gods so we have here

452
00:25:28,500 --> 00:25:38,130
a simple video so what going<font color="#E5E5E5"> to it is to</font>

453
00:25:33,720 --> 00:25:40,980
be here on<font color="#CCCCCC"> the screen is the WDS file so</font>

454
00:25:38,130 --> 00:25:43,410
<font color="#CCCCCC">the script win debug script</font><font color="#E5E5E5"> sets up the</font>

455
00:25:40,980 --> 00:25:45,540
<font color="#E5E5E5">breakpoint now this</font><font color="#CCCCCC"> is the the simplest</font>

456
00:25:43,410 --> 00:25:50,190
possible version of you know<font color="#E5E5E5"> trying to</font>

457
00:25:45,540 --> 00:25:54,930
figure out how evaluate works as again

458
00:25:50,190 --> 00:25:57,980
you<font color="#E5E5E5"> want to have a dynamic argument to</font>

459
00:25:54,930 --> 00:26:02,460
it so<font color="#E5E5E5"> you don't confuse the source code</font>

460
00:25:57,980 --> 00:26:04,560
so as you<font color="#E5E5E5"> go further on and seems to</font>

461
00:26:02,460 --> 00:26:07,230
<font color="#E5E5E5">work then you try to go a bit of a</font>

462
00:26:04,560 --> 00:26:10,230
stress testing to see if you found the

463
00:26:07,230 --> 00:26:13,440
the<font color="#E5E5E5"> correct thing and if it works for</font>

464
00:26:10,230 --> 00:26:17,910
for a number<font color="#CCCCCC"> of a quick succession of</font>

465
00:26:13,440 --> 00:26:19,740
course to evil and further on if you

466
00:26:17,910 --> 00:26:24,270
really want to test it you<font color="#E5E5E5"> can use any</font>

467
00:26:19,740 --> 00:26:26,160
evil bomb that does a recursive your

468
00:26:24,270 --> 00:26:27,629
valuation until you know the<font color="#CCCCCC"> stack</font>

469
00:26:26,160 --> 00:26:35,190
overflows actually it will kill<font color="#E5E5E5"> the</font>

470
00:26:27,630 --> 00:26:39,960
browser and here's a an example of a

471
00:26:35,190 --> 00:26:43,920
simple office keishon so all it needs to

472
00:26:39,960 --> 00:26:46,020
do is actually here on this I lot<font color="#E5E5E5"> of PS</font>

473
00:26:43,920 --> 00:26:48,720
this is a powershell script that does

474
00:26:46,020 --> 00:26:51,270
the automation of attaching to the

475
00:26:48,720 --> 00:26:53,880
debugger and you use your browser as you

476
00:26:51,270 --> 00:26:56,010
would normally suggest you know you

477
00:26:53,880 --> 00:26:59,760
navigating in the browser window and as

478
00:26:56,010 --> 00:27:06,530
soon as the evil starts it is<font color="#E5E5E5"> getting</font>

479
00:26:59,760 --> 00:27:12,120
logged to DM to the logger window so

480
00:27:06,530 --> 00:27:13,580
this is<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> chest test making sure</font>

481
00:27:12,120 --> 00:27:16,070
<font color="#E5E5E5">that you know</font>

482
00:27:13,580 --> 00:27:18,860
it's<font color="#E5E5E5"> it's able to to catch up with</font>

483
00:27:16,070 --> 00:27:28,070
what's happening and we're not using

484
00:27:18,860 --> 00:27:29,990
invalid pointers and here's the already

485
00:27:28,070 --> 00:27:33,560
d<font color="#E5E5E5"> office cated code at the bottom of the</font>

486
00:27:29,990 --> 00:27:36,710
screen from the next sample and

487
00:27:33,560 --> 00:27:40,129
ultimately we can<font color="#E5E5E5"> try to see how it</font>

488
00:27:36,710 --> 00:27:41,630
handles a serious stress test so

489
00:27:40,130 --> 00:27:44,930
basically this is the recursive eval

490
00:27:41,630 --> 00:27:49,100
which is a as you<font color="#CCCCCC"> sure to see completely</font>

491
00:27:44,930 --> 00:27:51,200
<font color="#E5E5E5">crush the browser so you know it can</font>

492
00:27:49,100 --> 00:27:58,610
handle even very stressful situations

493
00:27:51,200 --> 00:28:05,900
and what you get is ultimately<font color="#E5E5E5"> the</font>

494
00:27:58,610 --> 00:28:10,129
browser crashes you get a log file out

495
00:28:05,900 --> 00:28:14,570
of it which will hopefully cigna few

496
00:28:10,130 --> 00:28:17,570
seconds so you get<font color="#CCCCCC"> a new lock file free</font>

497
00:28:14,570 --> 00:28:22,840
for each session that you run this yeah

498
00:28:17,570 --> 00:28:22,840
evil<font color="#CCCCCC"> Iser this is what I named it</font>

499
00:28:38,690 --> 00:28:46,410
so here<font color="#E5E5E5"> we are new oldie all the outputs</font>

500
00:28:41,730 --> 00:28:49,800
and yeah somewhere in the in there you

501
00:28:46,410 --> 00:28:54,990
will see the actual d obfuscating code

502
00:28:49,800 --> 00:28:57,090
as well and if you ever wonder how many

503
00:28:54,990 --> 00:29:02,070
times you know the<font color="#CCCCCC"> d browser was able to</font>

504
00:28:57,090 --> 00:29:05,669
handle the recursive evals and yeah you

505
00:29:02,070 --> 00:29:08,520
can you can see that<font color="#E5E5E5"> it's you know it's</font>

506
00:29:05,670 --> 00:29:12,510
<font color="#E5E5E5">9,000 times before the browser decided</font>

507
00:29:08,520 --> 00:29:14,280
to be fully crash so<font color="#E5E5E5"> this is just the</font>

508
00:29:12,510 --> 00:29:16,200
the proof of concept so national

509
00:29:14,280 --> 00:29:21,330
actually<font color="#E5E5E5"> actually let's see an actual</font>

510
00:29:16,200 --> 00:29:24,240
exploit so this is<font color="#E5E5E5"> going to use a heap</font>

511
00:29:21,330 --> 00:29:28,020
spray but<font color="#CCCCCC"> I use after three so this is</font>

512
00:29:24,240 --> 00:29:30,900
<font color="#CCCCCC">the original code and that was working</font>

513
00:29:28,020 --> 00:29:33,300
on originally when we experiment with

514
00:29:30,900 --> 00:29:34,890
DVD exploit and this is a very heavily

515
00:29:33,300 --> 00:29:40,590
applicated multiple times obfuscated

516
00:29:34,890 --> 00:29:42,150
information about the same code so i

517
00:29:40,590 --> 00:29:43,649
think it's it's<font color="#CCCCCC"> office kid like at</font><font color="#E5E5E5"> least</font>

518
00:29:42,150 --> 00:29:48,180
three or four times with different

519
00:29:43,650 --> 00:29:55,820
mechanisms of obfuscation and again

520
00:29:48,180 --> 00:30:01,230
we're firing up the DI visor and once we

521
00:29:55,820 --> 00:30:03,899
open up the the office gated code not

522
00:30:01,230 --> 00:30:07,020
only<font color="#E5E5E5"> you get the DA office cated string</font>

523
00:30:03,900 --> 00:30:08,690
in<font color="#CCCCCC"> the output and also later on you'll</font>

524
00:30:07,020 --> 00:30:12,629
see<font color="#E5E5E5"> log</font><font color="#CCCCCC"> fiber</font><font color="#E5E5E5"> also you're getting a</font>

525
00:30:08,690 --> 00:30:14,970
break point into the<font color="#E5E5E5"> virtual protocol</font>

526
00:30:12,630 --> 00:30:19,380
that<font color="#CCCCCC"> is actually the final step in the</font>

527
00:30:14,970 --> 00:30:23,040
<font color="#E5E5E5">in the rope chain so you know it's a bit</font>

528
00:30:19,380 --> 00:30:25,320
tricky to figure out you know<font color="#CCCCCC"> how to put</font>

529
00:30:23,040 --> 00:30:27,530
together<font color="#E5E5E5"> the break points for you for</font>

530
00:30:25,320 --> 00:30:29,820
the virtual protect in order to you know

531
00:30:27,530 --> 00:30:32,190
differentiate your real virtual protects

532
00:30:29,820 --> 00:30:34,230
from the from the<font color="#E5E5E5"> crashes but that's</font>

533
00:30:32,190 --> 00:30:36,660
also going to be released in the<font color="#E5E5E5"> code I</font>

534
00:30:34,230 --> 00:30:40,650
don't<font color="#E5E5E5"> have time for that but the point</font>

535
00:30:36,660 --> 00:30:44,160
<font color="#E5E5E5">is that it's very</font><font color="#CCCCCC"> nice because you get a</font>

536
00:30:40,650 --> 00:30:47,790
at the same time a bit of the

537
00:30:44,160 --> 00:30:51,390
<font color="#E5E5E5">or a dr</font><font color="#CCCCCC"> Fisk edit code and at the same</font>

538
00:30:47,790 --> 00:30:52,710
time you get your hand on the point

539
00:30:51,390 --> 00:30:55,800
where they actually crash so you can

540
00:30:52,710 --> 00:31:00,690
immediately analyzed the<font color="#CCCCCC"> ramada itself</font>

541
00:30:55,800 --> 00:31:03,450
as a it's trying to do<font color="#E5E5E5"> its badness so</font>

542
00:31:00,690 --> 00:31:05,760
for future plans we want to document

543
00:31:03,450 --> 00:31:07,830
some methodologies for for edge and

544
00:31:05,760 --> 00:31:10,770
chrome as well the same<font color="#E5E5E5"> thing works</font>

545
00:31:07,830 --> 00:31:13,560
pretty much the same<font color="#E5E5E5"> as just different</font>

546
00:31:10,770 --> 00:31:16,530
symbols mind you if you want to work

547
00:31:13,560 --> 00:31:18,060
with the witch chrome then you have to

548
00:31:16,530 --> 00:31:19,950
understand that<font color="#E5E5E5"> the the chrome debug</font>

549
00:31:18,060 --> 00:31:22,200
symbols are almost 1 gigabyte inside so

550
00:31:19,950 --> 00:31:26,100
you<font color="#E5E5E5"> better have a very large virtual</font>

551
00:31:22,200 --> 00:31:30,210
memory machine<font color="#E5E5E5"> ok and here are the</font>

552
00:31:26,100 --> 00:31:33,330
source<font color="#CCCCCC"> codes both our parts are released</font>

553
00:31:30,210 --> 00:31:36,540
on on github so that pretty much

554
00:31:33,330 --> 00:31:41,429
concludes the demonstration and today's

555
00:31:36,540 --> 00:31:43,790
talks so if you have any questions<font color="#E5E5E5"> to</font>

556
00:31:41,430 --> 00:31:43,790
anybody

