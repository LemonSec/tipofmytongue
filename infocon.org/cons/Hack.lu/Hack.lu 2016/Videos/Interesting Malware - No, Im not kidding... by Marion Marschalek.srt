1
00:00:03,380 --> 00:00:12,840
hello welcome<font color="#E5E5E5"> good morning such as my</font>

2
00:00:08,580 --> 00:00:15,509
ears is it really loud<font color="#CCCCCC"> okay welcome to</font>

3
00:00:12,840 --> 00:00:17,040
my talk about the interesting mower<font color="#E5E5E5"> I am</font>

4
00:00:15,509 --> 00:00:20,189
super proud of<font color="#CCCCCC"> the title they came up</font>

5
00:00:17,040 --> 00:00:25,020
with cuz it's like it matches<font color="#CCCCCC"> the topics</font>

6
00:00:20,189 --> 00:00:27,599
so well first of all<font color="#E5E5E5"> I'm here with my</font>

7
00:00:25,020 --> 00:00:29,160
linux machine that I'm not having under

8
00:00:27,599 --> 00:00:31,559
control I can't represent so this is a

9
00:00:29,160 --> 00:00:33,450
windows vm and the vm says it's not

10
00:00:31,559 --> 00:00:37,019
activated which is actually not<font color="#CCCCCC"> sure why</font>

11
00:00:33,450 --> 00:00:40,530
do have license it's just<font color="#E5E5E5"> the</font><font color="#CCCCCC"> TBM</font>

12
00:00:37,019 --> 00:00:43,469
wouldn't recognize my license anyway

13
00:00:40,530 --> 00:00:45,269
that's a different problem so today I'm

14
00:00:43,469 --> 00:00:47,190
here<font color="#CCCCCC"> to speak about the interesting over</font>

15
00:00:45,269 --> 00:00:48,929
to you know I'm<font color="#E5E5E5"> really not kidding</font>

16
00:00:47,190 --> 00:00:50,879
that's interesting<font color="#E5E5E5"> wineries and</font><font color="#CCCCCC"> the</font>

17
00:00:48,929 --> 00:00:52,920
topic<font color="#E5E5E5"> like that the title came up</font>

18
00:00:50,879 --> 00:00:55,440
because so many people are ranting about

19
00:00:52,920 --> 00:00:56,909
how boring usual windows malware has

20
00:00:55,440 --> 00:00:59,070
become and that is really<font color="#CCCCCC"> true like we</font>

21
00:00:56,909 --> 00:01:02,370
have masses of malware and I promise you

22
00:00:59,070 --> 00:01:05,519
most of it is not interesting so this

23
00:01:02,370 --> 00:01:08,310
one is again my name is<font color="#E5E5E5"> Marian up in</font>

24
00:01:05,519 --> 00:01:11,070
here a<font color="#E5E5E5"> couple of times</font><font color="#CCCCCC"> um currently I</font>

25
00:01:08,310 --> 00:01:12,659
work for cheetah advanced analytics

26
00:01:11,070 --> 00:01:17,579
which is a<font color="#E5E5E5"> company based in</font><font color="#CCCCCC"> b'ham</font><font color="#E5E5E5"> and</font>

27
00:01:12,659 --> 00:01:19,770
does know where analysis this slide I

28
00:01:17,579 --> 00:01:21,809
also designed myself super<font color="#E5E5E5"> proud about</font>

29
00:01:19,770 --> 00:01:25,530
the code i go to seek great perhaps

30
00:01:21,810 --> 00:01:28,710
which is the cradle of my work which is

31
00:01:25,530 --> 00:01:30,509
<font color="#E5E5E5">what binary LS usually do many people</font>

32
00:01:28,710 --> 00:01:32,729
think that<font color="#E5E5E5"> we look at binaries and like</font>

33
00:01:30,509 --> 00:01:33,810
find out<font color="#E5E5E5"> the ultimate truth because</font><font color="#CCCCCC"> it's</font>

34
00:01:32,729 --> 00:01:36,270
zeros and ones right there could be

35
00:01:33,810 --> 00:01:38,430
nothing about<font color="#E5E5E5"> guessing but usually a lot</font>

36
00:01:36,270 --> 00:01:40,259
<font color="#E5E5E5">of my job is pulling up hypothesis and</font>

37
00:01:38,430 --> 00:01:42,810
proving them or denying them<font color="#E5E5E5"> and yet</font>

38
00:01:40,259 --> 00:01:47,460
<font color="#E5E5E5">having still a long list of gases which</font>

39
00:01:42,810 --> 00:01:51,960
are<font color="#E5E5E5"> more or less true or not also binary</font>

40
00:01:47,460 --> 00:01:53,908
analysis itself it's not<font color="#E5E5E5"> about digging</font>

41
00:01:51,960 --> 00:01:55,829
in other people's underwear<font color="#CCCCCC"> i found</font><font color="#E5E5E5"> out</font>

42
00:01:53,909 --> 00:01:57,359
because the more interesting the more

43
00:01:55,829 --> 00:01:58,919
popular piece of bella is<font color="#E5E5E5"> the more</font>

44
00:01:57,359 --> 00:02:01,859
embarrassing<font color="#CCCCCC"> it is for the people who</font>

45
00:01:58,920 --> 00:02:04,109
wrote it when you take it apart<font color="#E5E5E5"> happen</font>

46
00:02:01,859 --> 00:02:05,280
so in the past but then just recently a

47
00:02:04,109 --> 00:02:07,949
friend pointed out that we're actually

48
00:02:05,280 --> 00:02:13,310
not not that<font color="#E5E5E5"> much digging around in dirt</font>

49
00:02:07,950 --> 00:02:15,410
but what we do is we criticize art

50
00:02:13,310 --> 00:02:16,640
so there<font color="#E5E5E5"> is less interesting virus and</font>

51
00:02:15,410 --> 00:02:17,720
there's more<font color="#E5E5E5"> interesting binaries and</font>

52
00:02:16,640 --> 00:02:20,238
the more interesting ones are actually

53
00:02:17,720 --> 00:02:22,790
art that<font color="#CCCCCC"> have been built by software</font>

54
00:02:20,239 --> 00:02:25,250
developers the banner isn't gonna be

55
00:02:22,790 --> 00:02:27,679
speaking<font color="#E5E5E5"> about today oh I actually</font>

56
00:02:25,250 --> 00:02:30,500
<font color="#E5E5E5">started working on with the friend of</font>

57
00:02:27,680 --> 00:02:31,880
mine we wanted to credit at this point

58
00:02:30,500 --> 00:02:34,640
some of you might have<font color="#CCCCCC"> heard about</font><font color="#E5E5E5"> them</font>

59
00:02:31,880 --> 00:02:36,200
his name is Morgan he's like really good

60
00:02:34,640 --> 00:02:40,609
at digging up interesting binaries

61
00:02:36,200 --> 00:02:42,250
thanks to him I got<font color="#CCCCCC"> my hands on a couple</font>

62
00:02:40,610 --> 00:02:46,250
<font color="#CCCCCC">of boundaries that we named a shark at</font>

63
00:02:42,250 --> 00:02:50,120
this picture should represent the

64
00:02:46,250 --> 00:02:52,640
<font color="#E5E5E5">Wonderland that Ellis was lost in where</font>

65
00:02:50,120 --> 00:02:56,209
<font color="#CCCCCC">Sasha cat was walking around because</font>

66
00:02:52,640 --> 00:03:01,839
josh jacket is kind of the spirit animal

67
00:02:56,209 --> 00:03:06,319
of these crazy wineries<font color="#E5E5E5"> all together</font>

68
00:03:01,840 --> 00:03:10,030
come on yeah all together the set of

69
00:03:06,319 --> 00:03:13,640
wineries consists of five<font color="#E5E5E5"> malware pieces</font>

70
00:03:10,030 --> 00:03:15,950
the interesting or the at<font color="#E5E5E5"> first sight</font>

71
00:03:13,640 --> 00:03:18,350
interesting part about these matters is

72
00:03:15,950 --> 00:03:21,200
that the oldest one of them has been

73
00:03:18,350 --> 00:03:23,870
<font color="#E5E5E5">compiled more than 10 years ago like</font>

74
00:03:21,200 --> 00:03:26,540
2002 and the newest one that we found in

75
00:03:23,870 --> 00:03:30,819
2011 which makes a<font color="#E5E5E5"> time span</font><font color="#CCCCCC"> of about</font>

76
00:03:26,540 --> 00:03:34,480
<font color="#CCCCCC">nine years this is a very</font><font color="#E5E5E5"> long time to</font>

77
00:03:30,819 --> 00:03:38,450
<font color="#E5E5E5">write one specific family of numbers</font>

78
00:03:34,480 --> 00:03:39,950
this<font color="#CCCCCC"> is actually one of the wealthy</font>

79
00:03:38,450 --> 00:03:41,810
colors and operation of the longest

80
00:03:39,950 --> 00:03:44,179
running operations that have been

81
00:03:41,810 --> 00:03:47,030
witnessed one of the operations that's

82
00:03:44,180 --> 00:03:49,489
reaching back in time the farthest but

83
00:03:47,030 --> 00:03:51,250
also okay look<font color="#E5E5E5"> at these times x very</font>

84
00:03:49,489 --> 00:03:54,940
closely there's two in there from

85
00:03:51,250 --> 00:03:57,440
2007-2008 which stayed on the same day

86
00:03:54,940 --> 00:03:58,819
this usually is an indicator that people

87
00:03:57,440 --> 00:04:00,920
have forged<font color="#E5E5E5"> time stamps on their</font>

88
00:03:58,819 --> 00:04:04,069
binaries so I wouldn't take these

89
00:04:00,920 --> 00:04:06,940
<font color="#CCCCCC">compulsives as we trustworthy what is</font>

90
00:04:04,069 --> 00:04:09,679
interesting<font color="#CCCCCC"> about these point is is that</font>

91
00:04:06,940 --> 00:04:12,920
although the time stamps might be forged

92
00:04:09,680 --> 00:04:14,989
they have indeed been written for very

93
00:04:12,920 --> 00:04:19,310
old operating systems<font color="#E5E5E5"> I will tell you</font>

94
00:04:14,989 --> 00:04:21,350
about this in a minute so let's<font color="#E5E5E5"> take a</font>

95
00:04:19,310 --> 00:04:23,260
look at the first off

96
00:04:21,350 --> 00:04:25,880
this<font color="#E5E5E5"> interesting set of by the reason</font>

97
00:04:23,260 --> 00:04:29,599
compiling<font color="#E5E5E5"> 2002 but actually targeting</font>

98
00:04:25,880 --> 00:04:31,790
platforms to the<font color="#E5E5E5"> far older back in the</font>

99
00:04:29,600 --> 00:04:33,260
days when when the<font color="#CCCCCC"> patron boys were</font>

100
00:04:31,790 --> 00:04:37,400
still thing and people are still playing

101
00:04:33,260 --> 00:04:42,140
minesweeper<font color="#E5E5E5"> hold this called the implant</font>

102
00:04:37,400 --> 00:04:44,750
<font color="#E5E5E5">from 2002 was designed to interact</font><font color="#CCCCCC"> with</font>

103
00:04:42,140 --> 00:04:47,690
the driver installed on the<font color="#E5E5E5"> infected</font>

104
00:04:44,750 --> 00:04:51,080
machine sending ioctl to a device name

105
00:04:47,690 --> 00:04:52,790
is our 2892 this is actually about this

106
00:04:51,080 --> 00:04:54,560
functionality most we could find out so

107
00:04:52,790 --> 00:04:56,690
we<font color="#E5E5E5"> never got our hands on on the driver</font>

108
00:04:54,560 --> 00:04:59,540
which has<font color="#CCCCCC"> it this control component</font>

109
00:04:56,690 --> 00:05:01,610
furthermore this component would act as

110
00:04:59,540 --> 00:05:03,320
<font color="#E5E5E5">a harness so we</font><font color="#CCCCCC"> searched for security</font>

111
00:05:01,610 --> 00:05:05,300
products installed on the infected

112
00:05:03,320 --> 00:05:06,830
<font color="#E5E5E5">machine can I have a look at these</font>

113
00:05:05,300 --> 00:05:09,140
security products I'm<font color="#E5E5E5"> not</font><font color="#CCCCCC"> sure they</font>

114
00:05:06,830 --> 00:05:11,570
don't look like modern-day antivirus

115
00:05:09,140 --> 00:05:16,190
firewalls well<font color="#CCCCCC"> define it there is</font>

116
00:05:11,570 --> 00:05:20,390
software like dat card security guard

117
00:05:16,190 --> 00:05:22,670
and the<font color="#CCCCCC"> soul alarm firewall and eat the</font>

118
00:05:20,390 --> 00:05:25,370
real as a network monitoring tool which

119
00:05:22,670 --> 00:05:29,690
I think was abolished years ago before i

120
00:05:25,370 --> 00:05:32,630
started using snippers so<font color="#CCCCCC"> it was being</font>

121
00:05:29,690 --> 00:05:38,230
searched for our also phone back in the

122
00:05:32,630 --> 00:05:41,300
days furthermore the binary would drop

123
00:05:38,230 --> 00:05:43,100
<font color="#CCCCCC">an executable a 4 kilobyte executable</font>

124
00:05:41,300 --> 00:05:45,770
which would be<font color="#E5E5E5"> used to spawn other</font>

125
00:05:43,100 --> 00:05:47,840
processes so topping that binary

126
00:05:45,770 --> 00:05:50,359
redirecting the input handles and

127
00:05:47,840 --> 00:05:52,760
spawning a<font color="#E5E5E5"> third-party process would</font>

128
00:05:50,360 --> 00:05:54,620
mean that the execution harness would

129
00:05:52,760 --> 00:05:57,200
still have control over the executed

130
00:05:54,620 --> 00:05:58,820
binary this wallet was able to protect

131
00:05:57,200 --> 00:06:00,469
this executed process from other

132
00:05:58,820 --> 00:06:05,200
security products installed on the

133
00:06:00,470 --> 00:06:07,700
system an interesting point about this

134
00:06:05,200 --> 00:06:10,840
dis dropping mechanism was it would

135
00:06:07,700 --> 00:06:13,880
check the PE header of the<font color="#E5E5E5"> third-party</font>

136
00:06:10,840 --> 00:06:16,250
executable it would start out search for

137
00:06:13,880 --> 00:06:19,520
the PE header but also check whether it

138
00:06:16,250 --> 00:06:21,380
had a valid any<font color="#E5E5E5"> Heather no I my short</font>

139
00:06:19,520 --> 00:06:23,750
analyst life I've never<font color="#E5E5E5"> heard of any</font>

140
00:06:21,380 --> 00:06:25,640
before<font color="#E5E5E5"> Google hadn't found out it's the</font>

141
00:06:23,750 --> 00:06:29,200
new executable header which was there

142
00:06:25,640 --> 00:06:31,490
before PE was even a thing on systems

143
00:06:29,200 --> 00:06:33,630
also interesting about the binary was

144
00:06:31,490 --> 00:06:34,800
that there was lot of<font color="#E5E5E5"> strings in there</font>

145
00:06:33,630 --> 00:06:36,450
one of them saying something like

146
00:06:34,800 --> 00:06:39,150
running this kind of applications

147
00:06:36,450 --> 00:06:42,650
forbidden because 16-bit or dos on an<font color="#E5E5E5"> on</font>

148
00:06:39,150 --> 00:06:42,650
<font color="#E5E5E5">line expat from are forbidden</font>

149
00:06:42,950 --> 00:06:48,810
furthermore when looking into the new

150
00:06:45,870 --> 00:06:51,450
executable binary format one would find

151
00:06:48,810 --> 00:06:54,420
out that it was<font color="#E5E5E5"> used on windows 1.0 to</font>

152
00:06:51,450 --> 00:06:58,080
three point X and on multitasking<font color="#E5E5E5"> ms-dos</font>

153
00:06:54,420 --> 00:07:00,750
4.0 platforms so this was a long time

154
00:06:58,080 --> 00:07:02,550
<font color="#E5E5E5">before i started to analyze know some</font>

155
00:07:00,750 --> 00:07:05,520
some time<font color="#E5E5E5"> before 2002 when the binary</font>

156
00:07:02,550 --> 00:07:08,850
supposedly was compiled so from this

157
00:07:05,520 --> 00:07:10,469
first implant we can say that the the

158
00:07:08,850 --> 00:07:14,460
<font color="#E5E5E5">family we're looking at are targeting</font>

159
00:07:10,470 --> 00:07:16,830
like super old platforms all right let's

160
00:07:14,460 --> 00:07:18,120
go on there's some<font color="#E5E5E5"> more batteries</font><font color="#CCCCCC"> i'm</font>

161
00:07:16,830 --> 00:07:22,469
going<font color="#E5E5E5"> to look at these implants were</font>

162
00:07:18,120 --> 00:07:25,320
compiled supposedly 2007 to 2011 these

163
00:07:22,470 --> 00:07:28,530
implants were somewhat different from

164
00:07:25,320 --> 00:07:30,060
the first one but the the four that's

165
00:07:28,530 --> 00:07:32,419
<font color="#E5E5E5">fall into this group were all very</font>

166
00:07:30,060 --> 00:07:34,670
similar to the olive followed the same

167
00:07:32,420 --> 00:07:37,140
objectives and just developed over time

168
00:07:34,670 --> 00:07:39,060
which will<font color="#CCCCCC"> also be talking about later</font>

169
00:07:37,140 --> 00:07:41,340
and this development<font color="#CCCCCC"> looked like</font>

170
00:07:39,060 --> 00:07:44,040
basically what the implants did were

171
00:07:41,340 --> 00:07:45,570
espionage<font color="#CCCCCC"> covered this icon handlers on</font>

172
00:07:44,040 --> 00:07:47,280
the machine and they did it<font color="#CCCCCC"> very</font>

173
00:07:45,570 --> 00:07:49,409
carefully like you were<font color="#CCCCCC"> very</font><font color="#E5E5E5"> carefully</font>

174
00:07:47,280 --> 00:07:52,530
to not be detected and<font color="#E5E5E5"> do not catch any</font>

175
00:07:49,410 --> 00:07:54,750
attention on the<font color="#CCCCCC"> infected system now</font>

176
00:07:52,530 --> 00:07:58,200
what does<font color="#CCCCCC"> an oh yeah here's my</font><font color="#E5E5E5"> Sasha I</font>

177
00:07:54,750 --> 00:08:00,510
cadogan actual implant what is what's an

178
00:07:58,200 --> 00:08:02,729
icon<font color="#E5E5E5"> handler and I can either on Windows</font>

179
00:08:00,510 --> 00:08:04,710
is actually an extension for the windows

180
00:08:02,730 --> 00:08:06,570
shell which basically means a plugin for

181
00:08:04,710 --> 00:08:09,270
the<font color="#CCCCCC"> Windows Explorer as you see today</font>

182
00:08:06,570 --> 00:08:11,490
like an icon<font color="#E5E5E5"> handler can be installed to</font>

183
00:08:09,270 --> 00:08:14,280
manage loading off of icons for specific

184
00:08:11,490 --> 00:08:16,260
file types in this case here the

185
00:08:14,280 --> 00:08:18,630
<font color="#E5E5E5">binaries would be an icon idler for</font>

186
00:08:16,260 --> 00:08:20,400
linked files which technically means

187
00:08:18,630 --> 00:08:21,960
whenever<font color="#E5E5E5"> Windows Explorer allows a link</font>

188
00:08:20,400 --> 00:08:24,810
file and little icon for the link file

189
00:08:21,960 --> 00:08:27,419
this handler would be invoked this

190
00:08:24,810 --> 00:08:29,010
happens<font color="#CCCCCC"> every time someone loads the</font>

191
00:08:27,420 --> 00:08:33,270
desktop which basically is whenever a

192
00:08:29,010 --> 00:08:35,549
user logs<font color="#CCCCCC"> on to the windows machine</font><font color="#E5E5E5"> the</font>

193
00:08:33,270 --> 00:08:38,340
shell in our case or in the case of

194
00:08:35,549 --> 00:08:39,839
these binaries was the program manager

195
00:08:38,340 --> 00:08:42,240
because apparently when they<font color="#E5E5E5"> were</font>

196
00:08:39,840 --> 00:08:44,490
written the windows explorer wasn't yet

197
00:08:42,240 --> 00:08:47,100
<font color="#E5E5E5">I think so the binaries really</font><font color="#CCCCCC"> look for</font>

198
00:08:44,490 --> 00:08:51,279
the program dot exe

199
00:08:47,100 --> 00:08:53,500
they are<font color="#CCCCCC"> registered as com servers which</font>

200
00:08:51,279 --> 00:08:55,839
means they serve their functionality is

201
00:08:53,500 --> 00:08:57,940
calm objects at runtime and the objects

202
00:08:55,839 --> 00:09:00,639
yet perform the actual work of the

203
00:08:57,940 --> 00:09:02,019
malware a very nice definition of what

204
00:09:00,639 --> 00:09:04,180
the shell extension actually is was

205
00:09:02,019 --> 00:09:05,920
written by<font color="#CCCCCC"> Michael</font><font color="#E5E5E5"> done shell extensions</font>

206
00:09:04,180 --> 00:09:07,719
are really<font color="#CCCCCC"> common objects that had some</font>

207
00:09:05,920 --> 00:09:10,120
kind of functionality to the<font color="#E5E5E5"> Windows</font>

208
00:09:07,720 --> 00:09:11,560
<font color="#E5E5E5">Explorer that's that shell extensions</font>

209
00:09:10,120 --> 00:09:13,089
really can do anything<font color="#E5E5E5"> so it doesn't</font>

210
00:09:11,560 --> 00:09:14,829
need to help anything to do with the

211
00:09:13,089 --> 00:09:16,360
actual icon lets being loaded but you

212
00:09:14,829 --> 00:09:18,099
can<font color="#E5E5E5"> really highly enter malware within</font>

213
00:09:16,360 --> 00:09:22,930
the icon<font color="#CCCCCC"> idler and not having anything</font>

214
00:09:18,100 --> 00:09:25,329
to do with the actual icon furthermore<font color="#E5E5E5"> I</font>

215
00:09:22,930 --> 00:09:29,050
can be said that these I can handlers

216
00:09:25,329 --> 00:09:32,620
were written in C kind<font color="#E5E5E5"> of but not really</font>

217
00:09:29,050 --> 00:09:35,829
but really see that looked like C++ or

218
00:09:32,620 --> 00:09:38,139
that wanted to<font color="#CCCCCC"> look like C++ which is</font>

219
00:09:35,829 --> 00:09:40,239
curious because usually you don't draw

220
00:09:38,139 --> 00:09:42,880
it up shell extensions or I can I

221
00:09:40,240 --> 00:09:46,720
dealers in C let a guy on<font color="#E5E5E5"> Stack Overflow</font>

222
00:09:42,880 --> 00:09:48,550
<font color="#E5E5E5">mention that this could be noticed as a</font>

223
00:09:46,720 --> 00:09:50,760
violation<font color="#E5E5E5"> of the Geneva Convention</font>

224
00:09:48,550 --> 00:09:53,769
program is rights in most jurisdictions

225
00:09:50,760 --> 00:09:55,750
so yeah the binaries are actually with

226
00:09:53,769 --> 00:09:59,920
me someone who<font color="#E5E5E5"> knows see very well but</font>

227
00:09:55,750 --> 00:10:01,569
try to emulate functionality from C++ so

228
00:09:59,920 --> 00:10:03,000
you wouldn't find C++ structures within

229
00:10:01,569 --> 00:10:06,219
these binaries but you would point

230
00:10:03,000 --> 00:10:09,639
objects that were like implemented<font color="#E5E5E5"> as</font>

231
00:10:06,220 --> 00:10:15,279
structures and<font color="#E5E5E5"> Mary structures that we</font>

232
00:10:09,639 --> 00:10:19,870
used like C C++ objects also we talking

233
00:10:15,279 --> 00:10:21,970
about<font color="#E5E5E5"> this in a minute um before all</font>

234
00:10:19,870 --> 00:10:25,660
right like the implementation of the

235
00:10:21,970 --> 00:10:27,850
icon idler of course before<font color="#E5E5E5"> um you can</font>

236
00:10:25,660 --> 00:10:29,800
be loaded as I can Hitler you should

237
00:10:27,850 --> 00:10:34,449
delete the icon cash otherwise seconds

238
00:10:29,800 --> 00:10:37,029
or not we love it<font color="#E5E5E5"> and then how this</font>

239
00:10:34,449 --> 00:10:39,189
works is the<font color="#E5E5E5"> binary has to be installed</font>

240
00:10:37,029 --> 00:10:41,380
as an<font color="#CCCCCC"> in-process</font><font color="#E5E5E5"> server which means a</font>

241
00:10:39,190 --> 00:10:43,930
calm server which later<font color="#E5E5E5"> on can handle</font>

242
00:10:41,380 --> 00:10:46,630
the objects<font color="#CCCCCC"> that are being served by the</font>

243
00:10:43,930 --> 00:10:48,910
server this works with the<font color="#CCCCCC"> listed</font>

244
00:10:46,630 --> 00:10:51,040
registry<font color="#CCCCCC"> key so the first step the</font>

245
00:10:48,910 --> 00:10:53,860
malicious dll has to be registered as a

246
00:10:51,040 --> 00:10:57,069
server and later on the icon<font color="#CCCCCC"> Hitler can</font>

247
00:10:53,860 --> 00:10:59,290
serve the malicious<font color="#CCCCCC"> or the malware</font>

248
00:10:57,069 --> 00:11:03,430
objects whether<font color="#E5E5E5"> I did</font>

249
00:10:59,290 --> 00:11:05,230
education class ID the implant is not

250
00:11:03,430 --> 00:11:08,529
only stealthy it's also very sensitive

251
00:11:05,230 --> 00:11:10,839
<font color="#E5E5E5">and plant here I try to sketch out my</font>

252
00:11:08,529 --> 00:11:12,220
<font color="#CCCCCC">first engineering process on the one</font>

253
00:11:10,839 --> 00:11:13,870
single function that would try to

254
00:11:12,220 --> 00:11:15,279
determine the<font color="#E5E5E5"> Windows operating system</font>

255
00:11:13,870 --> 00:11:17,259
and was<font color="#E5E5E5"> running out which is rather</font>

256
00:11:15,279 --> 00:11:20,050
sketchy and Matt kata this function was

257
00:11:17,259 --> 00:11:23,440
huge and try to<font color="#E5E5E5"> find all the details</font>

258
00:11:20,050 --> 00:11:25,508
<font color="#E5E5E5">about the installed operating system the</font>

259
00:11:23,440 --> 00:11:28,829
specific points down to<font color="#E5E5E5"> a function that</font>

260
00:11:25,509 --> 00:11:31,930
determines which operating system and

261
00:11:28,829 --> 00:11:37,138
which line of<font color="#CCCCCC"> Windows operating systems</font>

262
00:11:31,930 --> 00:11:40,060
is installed on the machine where most

263
00:11:37,139 --> 00:11:43,540
in most<font color="#E5E5E5"> cases the melville would want to</font>

264
00:11:40,060 --> 00:11:46,060
know whether it's a<font color="#CCCCCC"> wintry</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Windows or</font>

265
00:11:43,540 --> 00:11:47,709
a win32 and T platform which makes a

266
00:11:46,060 --> 00:11:50,349
major difference or made a major

267
00:11:47,709 --> 00:11:53,170
difference like 10 years<font color="#CCCCCC"> ago in with</font>

268
00:11:50,350 --> 00:11:55,269
indeed the windows 32 API and the AP

269
00:11:53,170 --> 00:11:57,339
icons that are actually<font color="#CCCCCC"> available on the</font>

270
00:11:55,269 --> 00:12:00,670
system's began well furthermore the

271
00:11:57,339 --> 00:12:02,380
function would find out the specifics

272
00:12:00,670 --> 00:12:05,680
about the operating system in<font color="#E5E5E5"> the patch</font>

273
00:12:02,380 --> 00:12:07,269
law that was installed this information

274
00:12:05,680 --> 00:12:10,930
throughout execution will<font color="#CCCCCC"> be used to</font>

275
00:12:07,269 --> 00:12:14,410
determine which functions to call in the

276
00:12:10,930 --> 00:12:16,000
<font color="#E5E5E5">run because a lot of functionality</font>

277
00:12:14,410 --> 00:12:19,089
within these binaries will be

278
00:12:16,000 --> 00:12:21,339
implemented redundantly so you will<font color="#CCCCCC"> have</font>

279
00:12:19,089 --> 00:12:23,500
for<font color="#CCCCCC"> example one function which</font><font color="#E5E5E5"> treated</font>

280
00:12:21,339 --> 00:12:26,639
the windows NT line and one function

281
00:12:23,500 --> 00:12:29,380
which treated the win32 windows line

282
00:12:26,639 --> 00:12:35,110
which resulted in a lot of redundant

283
00:12:29,380 --> 00:12:36,939
code within this binary as<font color="#CCCCCC"> I mentioned</font>

284
00:12:35,110 --> 00:12:41,130
<font color="#CCCCCC">they will do very fine-grained OS</font>

285
00:12:36,940 --> 00:12:43,959
version detection and lead<font color="#CCCCCC"> to a lot of</font>

286
00:12:41,130 --> 00:12:47,470
interesting old school windows code

287
00:12:43,959 --> 00:12:50,170
within the binary one example for that

288
00:12:47,470 --> 00:12:52,959
is the process enumeration that is

289
00:12:50,170 --> 00:12:55,660
implemented within the malware I really

290
00:12:52,959 --> 00:12:56,859
have this very<font color="#E5E5E5"> simple handler we're in</font>

291
00:12:55,660 --> 00:12:58,480
the<font color="#CCCCCC"> beginning you</font><font color="#E5E5E5"> can see there is</font><font color="#CCCCCC"> the</font>

292
00:12:56,860 --> 00:13:00,579
check of the<font color="#CCCCCC"> Windows operating system</font>

293
00:12:58,480 --> 00:13:05,170
with determined whether it's Windows NT

294
00:13:00,579 --> 00:13:10,839
or the<font color="#E5E5E5"> wintry to windows line of</font><font color="#CCCCCC"> Windows</font>

295
00:13:05,170 --> 00:13:13,240
and you can see that for the non windows

296
00:13:10,839 --> 00:13:18,310
NT line it will use the

297
00:13:13,240 --> 00:13:20,310
JP is that Mel r analysts no to helping

298
00:13:18,310 --> 00:13:24,670
in the writing processes which is the

299
00:13:20,310 --> 00:13:27,369
<font color="#CCCCCC">coop 32 snapshot and process the rating</font>

300
00:13:24,670 --> 00:13:30,490
first process 32 next which is the<font color="#CCCCCC"> usual</font>

301
00:13:27,370 --> 00:13:31,990
<font color="#E5E5E5">ap is the one would expect and on the</font>

302
00:13:30,490 --> 00:13:33,850
upper<font color="#E5E5E5"> part of the screen you can see how</font>

303
00:13:31,990 --> 00:13:36,279
old Windows operating systems would

304
00:13:33,850 --> 00:13:39,339
perform this very same task I just never

305
00:13:36,279 --> 00:13:42,189
work with the CW query system

306
00:13:39,339 --> 00:13:45,490
information API that<font color="#CCCCCC"> was back in the</font>

307
00:13:42,190 --> 00:13:47,680
days when these these<font color="#CCCCCC"> aunty rappers were</font>

308
00:13:45,490 --> 00:13:49,540
not created yet the API that will be

309
00:13:47,680 --> 00:13:53,020
used to in am right<font color="#E5E5E5"> processes on a</font>

310
00:13:49,540 --> 00:13:55,270
Windows platform this API delivers the

311
00:13:53,020 --> 00:13:57,339
system process information structure and

312
00:13:55,270 --> 00:13:59,860
within<font color="#E5E5E5"> there you can find a pointer a</font>

313
00:13:57,339 --> 00:14:01,720
linked list between all the running

314
00:13:59,860 --> 00:14:04,570
processes on the system and<font color="#E5E5E5"> gather the</font>

315
00:14:01,720 --> 00:14:07,120
names from the processes as usual

316
00:14:04,570 --> 00:14:10,149
<font color="#CCCCCC">Microsoft put online a very great</font>

317
00:14:07,120 --> 00:14:13,060
documentation for this kind of API where

318
00:14:10,149 --> 00:14:15,100
you can see a lot of the values in there

319
00:14:13,060 --> 00:14:17,680
are reserves reserved reserved reserved

320
00:14:15,100 --> 00:14:19,930
and I can tell<font color="#CCCCCC"> you at the offset 70</font>

321
00:14:17,680 --> 00:14:21,760
within<font color="#E5E5E5"> this structure you will find the</font>

322
00:14:19,930 --> 00:14:23,800
actual process name of the process

323
00:14:21,760 --> 00:14:26,020
you're looking at for this list the

324
00:14:23,800 --> 00:14:27,880
malware would iterate through the

325
00:14:26,020 --> 00:14:33,160
running processes and gather the names

326
00:14:27,880 --> 00:14:36,189
of the running processes<font color="#E5E5E5"> all right this</font>

327
00:14:33,160 --> 00:14:39,100
habit of adapting to different operating

328
00:14:36,190 --> 00:14:40,680
systems it can<font color="#CCCCCC"> be seen throughout all of</font>

329
00:14:39,100 --> 00:14:44,230
the binary<font color="#E5E5E5"> so someone put a lot of</font>

330
00:14:40,680 --> 00:14:47,319
effort into<font color="#E5E5E5"> adapting his binary to the</font>

331
00:14:44,230 --> 00:14:48,700
different operating system version was

332
00:14:47,320 --> 00:14:53,880
also very interesting was that the whole

333
00:14:48,700 --> 00:14:57,550
binary was written in a very strangely

334
00:14:53,880 --> 00:14:58,779
unstructured manner so if<font color="#CCCCCC"> I looked when</font>

335
00:14:57,550 --> 00:15:01,630
I looked<font color="#E5E5E5"> at the binaries I had a feeling</font>

336
00:14:58,779 --> 00:15:04,810
like I could<font color="#CCCCCC"> have written them kind</font><font color="#E5E5E5"> of</font>

337
00:15:01,630 --> 00:15:06,640
because um what the developers did was

338
00:15:04,810 --> 00:15:08,589
basically<font color="#E5E5E5"> just stacking functionality on</font>

339
00:15:06,640 --> 00:15:10,270
top of<font color="#E5E5E5"> each other another software</font>

340
00:15:08,589 --> 00:15:12,579
developer when I write software I like

341
00:15:10,270 --> 00:15:14,850
punch it together and copy paste from

342
00:15:12,579 --> 00:15:18,099
stucco also want like make it run and

343
00:15:14,850 --> 00:15:19,450
I'm sure these people didn't have<font color="#E5E5E5"> Stack</font>

344
00:15:18,100 --> 00:15:22,690
<font color="#E5E5E5">Overflow available when they wrote the</font>

345
00:15:19,450 --> 00:15:24,579
binaries um they kind of did the same

346
00:15:22,690 --> 00:15:25,510
thing they call functions whenever they

347
00:15:24,579 --> 00:15:26,888
felt like they have to<font color="#E5E5E5"> call the</font>

348
00:15:25,510 --> 00:15:29,619
functions there is no no

349
00:15:26,889 --> 00:15:31,749
<font color="#E5E5E5">of all software design in there except</font>

350
00:15:29,619 --> 00:15:35,339
for<font color="#CCCCCC"> one piece of functionality which is</font>

351
00:15:31,749 --> 00:15:38,859
to see to communication how to see to

352
00:15:35,339 --> 00:15:41,439
that describes how the other

353
00:15:38,859 --> 00:15:43,899
communication from the machine to the

354
00:15:41,439 --> 00:15:47,709
remote server is implemented<font color="#CCCCCC"> so they're</font>

355
00:15:43,899 --> 00:15:50,169
basically<font color="#E5E5E5"> the Malheur will go to arm a</font>

356
00:15:47,709 --> 00:15:52,449
communication object<font color="#E5E5E5"> I call</font><font color="#CCCCCC"> it which</font>

357
00:15:50,169 --> 00:15:53,980
<font color="#E5E5E5">contains the domain to be contacted the</font>

358
00:15:52,449 --> 00:15:55,839
data that should be communicated to the

359
00:15:53,980 --> 00:15:58,569
to the<font color="#E5E5E5"> sea to server the</font><font color="#CCCCCC"> filename it</font>

360
00:15:55,839 --> 00:16:02,079
foul balls to be<font color="#E5E5E5"> Santa</font><font color="#CCCCCC"> to be downloaded</font>

361
00:15:58,569 --> 00:16:03,579
<font color="#E5E5E5">and a lot of timeout values and on the</font>

362
00:16:02,079 --> 00:16:05,378
other<font color="#E5E5E5"> hand will have the communication</font>

363
00:16:03,579 --> 00:16:06,699
handler which in the binary is totally

364
00:16:05,379 --> 00:16:09,429
detached from the actual communication

365
00:16:06,699 --> 00:16:11,349
object where the hell would then build

366
00:16:09,429 --> 00:16:14,619
the connection<font color="#CCCCCC"> to Z tutor and send</font><font color="#E5E5E5"> and</font>

367
00:16:11,350 --> 00:16:16,569
receive data this<font color="#E5E5E5"> communication handler</font>

368
00:16:14,619 --> 00:16:18,639
will be injected<font color="#CCCCCC"> into a default browser</font>

369
00:16:16,569 --> 00:16:21,069
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> installed on</font><font color="#E5E5E5"> the system this is</font>

370
00:16:18,639 --> 00:16:23,949
<font color="#E5E5E5">something that we also see in common</font>

371
00:16:21,069 --> 00:16:26,229
melbourne today we barely ever seen come

372
00:16:23,949 --> 00:16:27,729
on Barbara today is that the mother

373
00:16:26,230 --> 00:16:30,040
would disable the remote administration

374
00:16:27,730 --> 00:16:33,850
service before the communication process

375
00:16:30,040 --> 00:16:35,319
and reenable it afterwards I did a lot

376
00:16:33,850 --> 00:16:37,899
<font color="#CCCCCC">of good thing I</font><font color="#E5E5E5"> couldn't quite find out</font>

377
00:16:35,319 --> 00:16:40,389
how r us would disturb the browser

378
00:16:37,899 --> 00:16:42,459
injection and the execution from code

379
00:16:40,389 --> 00:16:45,669
within the browser but apparently back

380
00:16:42,459 --> 00:16:47,819
in the days that was a<font color="#E5E5E5"> problem the</font>

381
00:16:45,669 --> 00:16:49,779
communication object would be

382
00:16:47,819 --> 00:16:51,429
transferred to<font color="#E5E5E5"> the communication error</font>

383
00:16:49,779 --> 00:16:52,779
through a pipe and from there the

384
00:16:51,429 --> 00:16:56,949
communication<font color="#E5E5E5"> through the default</font>

385
00:16:52,779 --> 00:16:58,769
browser would be<font color="#E5E5E5"> performed what is</font>

386
00:16:56,949 --> 00:17:03,219
interesting<font color="#CCCCCC"> though is that this</font>

387
00:16:58,769 --> 00:17:04,569
functionality isn't centralized sort of

388
00:17:03,220 --> 00:17:06,669
within<font color="#E5E5E5"> the binary but it's called</font>

389
00:17:04,569 --> 00:17:10,240
whenever<font color="#E5E5E5"> the people who wrote the binary</font>

390
00:17:06,669 --> 00:17:11,889
felt like calling that<font color="#E5E5E5"> API which again</font>

391
00:17:10,240 --> 00:17:14,199
gives me the feeling that there<font color="#CCCCCC"> was no</font>

392
00:17:11,888 --> 00:17:18,250
particular software designer involved in

393
00:17:14,199 --> 00:17:19,870
the process again for this browser

394
00:17:18,250 --> 00:17:22,179
injection process we see two different

395
00:17:19,869 --> 00:17:24,369
implementations which I will now<font color="#CCCCCC"> explain</font>

396
00:17:22,179 --> 00:17:30,370
in detail so<font color="#E5E5E5"> we had the sort of</font>

397
00:17:24,369 --> 00:17:32,678
classical style injection where the

398
00:17:30,370 --> 00:17:36,120
mellow would create a practically<font color="#E5E5E5"> a</font>

399
00:17:32,679 --> 00:17:38,880
remote process within the browser

400
00:17:36,120 --> 00:17:42,060
executable browser process

401
00:17:38,880 --> 00:17:43,710
I didn't do<font color="#CCCCCC"> this in a totally normal</font>

402
00:17:42,060 --> 00:17:46,169
raid 0 because nothing in this binary is

403
00:17:43,710 --> 00:17:49,800
implemented in<font color="#E5E5E5"> a totally normal way it</font>

404
00:17:46,170 --> 00:17:51,690
<font color="#E5E5E5">will for example gather the API for a</font>

405
00:17:49,800 --> 00:17:52,889
load library not by calling it proc

406
00:17:51,690 --> 00:17:54,720
address but we're searching for the

407
00:17:52,890 --> 00:17:57,990
offset of load library within its own

408
00:17:54,720 --> 00:18:00,150
<font color="#CCCCCC">process so for loading this API we</font>

409
00:17:57,990 --> 00:18:02,850
searched his<font color="#E5E5E5"> own process space for load</font>

410
00:18:00,150 --> 00:18:06,390
library routine they will create a

411
00:18:02,850 --> 00:18:09,780
browser instance in suspended<font color="#E5E5E5"> mode as we</font>

412
00:18:06,390 --> 00:18:12,420
know it and we'll go<font color="#CCCCCC"> on</font><font color="#E5E5E5"> to then load its</font>

413
00:18:09,780 --> 00:18:15,800
own library in the<font color="#E5E5E5"> process of the</font>

414
00:18:12,420 --> 00:18:18,000
<font color="#E5E5E5">suspended ought to suspend the browser</font>

415
00:18:15,800 --> 00:18:20,460
this would be performed<font color="#CCCCCC"> in the way that</font>

416
00:18:18,000 --> 00:18:21,780
<font color="#E5E5E5">it would allocate memory within the</font>

417
00:18:20,460 --> 00:18:23,880
process space of the<font color="#E5E5E5"> suspended browser</font>

418
00:18:21,780 --> 00:18:25,290
and write its file in there and then

419
00:18:23,880 --> 00:18:30,320
search for<font color="#E5E5E5"> the load library function</font>

420
00:18:25,290 --> 00:18:33,090
within the remote process to load this

421
00:18:30,320 --> 00:18:35,939
<font color="#E5E5E5">the string technically like this library</font>

422
00:18:33,090 --> 00:18:38,840
within the other process then loaded

423
00:18:35,940 --> 00:18:41,040
with in the remote process it would

424
00:18:38,840 --> 00:18:42,899
write the communication<font color="#E5E5E5"> object I</font>

425
00:18:41,040 --> 00:18:46,350
described<font color="#CCCCCC"> before to the suspended</font>

426
00:18:42,900 --> 00:18:48,720
process and invoke the communication

427
00:18:46,350 --> 00:18:51,600
handler I described before within these

428
00:18:48,720 --> 00:18:54,360
<font color="#CCCCCC">suspended browser process and this</font><font color="#E5E5E5"> will</font>

429
00:18:51,600 --> 00:18:57,360
then run as a remote thread this<font color="#CCCCCC"> is sort</font>

430
00:18:54,360 --> 00:18:59,040
of like what we see today now the ritual

431
00:18:57,360 --> 00:19:01,590
version of this browser injection looks

432
00:18:59,040 --> 00:19:06,200
a bit different and makes use of less

433
00:19:01,590 --> 00:19:08,820
win32<font color="#CCCCCC"> API is namely in this process the</font>

434
00:19:06,200 --> 00:19:10,620
<font color="#CCCCCC">Malraux would first craft a bigger data</font>

435
00:19:08,820 --> 00:19:12,960
structure this data structure consists

436
00:19:10,620 --> 00:19:14,340
of a set of API so I will use<font color="#CCCCCC"> later it</font>

437
00:19:12,960 --> 00:19:16,530
<font color="#E5E5E5">will consist of a piece of shell code</font>

438
00:19:14,340 --> 00:19:18,929
which would then later on be used to

439
00:19:16,530 --> 00:19:21,480
create<font color="#E5E5E5"> the threat within the browser</font>

440
00:19:18,930 --> 00:19:23,450
process I would again contain the

441
00:19:21,480 --> 00:19:26,910
communication object i just described

442
00:19:23,450 --> 00:19:29,970
and it will contain a marker which would

443
00:19:26,910 --> 00:19:32,300
later on be used to find the entry point

444
00:19:29,970 --> 00:19:36,840
of the<font color="#E5E5E5"> shellcode to override that</font>

445
00:19:32,300 --> 00:19:40,379
address again<font color="#CCCCCC"> a suspended browser</font>

446
00:19:36,840 --> 00:19:42,689
process is created and then the malabar

447
00:19:40,380 --> 00:19:44,340
would write the entire data structure to

448
00:19:42,690 --> 00:19:47,910
<font color="#CCCCCC">the remote process override the entry</font>

449
00:19:44,340 --> 00:19:50,750
<font color="#E5E5E5">point and technically replace the code</font>

450
00:19:47,910 --> 00:19:52,800
within the suspended browser with its

451
00:19:50,750 --> 00:19:54,510
with its shell card

452
00:19:52,800 --> 00:19:57,810
it will then search for<font color="#E5E5E5"> the outside of</font>

453
00:19:54,510 --> 00:20:01,860
the<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> to patch the the entry</font>

454
00:19:57,810 --> 00:20:03,600
point<font color="#E5E5E5"> and then just resume the suspended</font>

455
00:20:01,860 --> 00:20:05,280
process this is<font color="#E5E5E5"> been a process then</font>

456
00:20:03,600 --> 00:20:07,439
would load the shellcode that was just

457
00:20:05,280 --> 00:20:12,000
written to his entry point which would

458
00:20:07,440 --> 00:20:13,500
then load the malware library to the

459
00:20:12,000 --> 00:20:15,000
process and again invoke the

460
00:20:13,500 --> 00:20:19,680
communication handler with a pointer to

461
00:20:15,000 --> 00:20:20,940
the communication object this is it

462
00:20:19,680 --> 00:20:22,890
sounds a bit more<font color="#E5E5E5"> simple and the other</font>

463
00:20:20,940 --> 00:20:24,660
process before but in fact this<font color="#E5E5E5"> is all</font>

464
00:20:22,890 --> 00:20:27,480
implemented<font color="#E5E5E5"> without using the classical</font>

465
00:20:24,660 --> 00:20:32,970
win32<font color="#CCCCCC"> API</font><font color="#E5E5E5"> s which we nowadays know for</font>

466
00:20:27,480 --> 00:20:37,910
process injection the<font color="#E5E5E5"> CT communication</font>

467
00:20:32,970 --> 00:20:41,850
overall would um use about<font color="#CCCCCC"> 6 to 10</font>

468
00:20:37,910 --> 00:20:44,130
hard-coded domain names<font color="#CCCCCC"> 6 yola versions</font>

469
00:20:41,850 --> 00:20:46,080
10 to my name is the newer versions<font color="#CCCCCC"> I've</font>

470
00:20:44,130 --> 00:20:48,390
pasted some examples here and these

471
00:20:46,080 --> 00:20:50,580
domains would be referenced by an index

472
00:20:48,390 --> 00:20:53,130
number so technically within the binary

473
00:20:50,580 --> 00:20:55,620
you do<font color="#E5E5E5"> not really see the strings but</font>

474
00:20:53,130 --> 00:20:59,040
you always see the reference index

475
00:20:55,620 --> 00:21:00,360
number this domain is handled by the

476
00:20:59,040 --> 00:21:02,250
communication object which is

477
00:21:00,360 --> 00:21:06,479
<font color="#E5E5E5">technically a structure but not really</font><font color="#CCCCCC"> a</font>

478
00:21:02,250 --> 00:21:09,570
object<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of an object and it would</font><font color="#CCCCCC"> be</font>

479
00:21:06,480 --> 00:21:12,420
dictated by D index number communication

480
00:21:09,570 --> 00:21:15,540
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the sea to what many happen as he</font>

481
00:21:12,420 --> 00:21:18,270
HTTP query string content so when the

482
00:21:15,540 --> 00:21:21,389
minor<font color="#CCCCCC"> II would run you would</font><font color="#E5E5E5"> see the UM</font>

483
00:21:18,270 --> 00:21:23,580
the<font color="#CCCCCC"> content of what</font><font color="#E5E5E5"> Amell ever wanted to</font>

484
00:21:21,390 --> 00:21:26,850
<font color="#E5E5E5">communicate as a as an obfuscated string</font>

485
00:21:23,580 --> 00:21:28,370
within the HTTP query another

486
00:21:26,850 --> 00:21:32,610
interesting<font color="#CCCCCC"> point about the domain style</font>

487
00:21:28,370 --> 00:21:36,090
these were single by kaspersky around

488
00:21:32,610 --> 00:21:37,740
2009 so apparently run 2009 kaspersky

489
00:21:36,090 --> 00:21:42,780
has already been analyzing these

490
00:21:37,740 --> 00:21:44,490
binaries keylogging finally I get to the

491
00:21:42,780 --> 00:21:47,129
actual functionality so what you've<font color="#E5E5E5"> seen</font>

492
00:21:44,490 --> 00:21:49,050
before<font color="#E5E5E5"> um also like still that the</font>

493
00:21:47,130 --> 00:21:51,180
structure around the binary the key

494
00:21:49,050 --> 00:21:52,950
logging is one of the things<font color="#CCCCCC"> they</font><font color="#E5E5E5"> could</font>

495
00:21:51,180 --> 00:21:54,810
determine the binary is actually

496
00:21:52,950 --> 00:21:56,910
intending to do as a malicious action on

497
00:21:54,810 --> 00:21:58,679
the machine this would work with a

498
00:21:56,910 --> 00:22:00,450
global<font color="#E5E5E5"> windows hook a global windows</font>

499
00:21:58,680 --> 00:22:03,660
hook is a functionality in windows which

500
00:22:00,450 --> 00:22:05,470
allows you to load um<font color="#E5E5E5"> dll so to load</font>

501
00:22:03,660 --> 00:22:08,350
your custom code

502
00:22:05,470 --> 00:22:09,909
<font color="#E5E5E5">in two processes running on the Windows</font>

503
00:22:08,350 --> 00:22:11,320
desktop so with the global windows hook

504
00:22:09,909 --> 00:22:15,370
you can actually<font color="#E5E5E5"> load your malware into</font>

505
00:22:11,320 --> 00:22:18,460
all desktop processes there are melvar

506
00:22:15,370 --> 00:22:22,600
would load a<font color="#E5E5E5"> would filter for</font><font color="#CCCCCC"> windows</font>

507
00:22:18,460 --> 00:22:24,010
messages for window messages there<font color="#CCCCCC"> are</font>

508
00:22:22,600 --> 00:22:26,949
fed would search for the key first<font color="#E5E5E5"> this</font>

509
00:22:24,010 --> 00:22:29,260
<font color="#E5E5E5">is key down message which technically is</font>

510
00:22:26,950 --> 00:22:34,480
any key stroke or any system key that is

511
00:22:29,260 --> 00:22:37,629
being being used on<font color="#CCCCCC"> the keyboard</font><font color="#E5E5E5"> I will</font>

512
00:22:34,480 --> 00:22:41,890
<font color="#E5E5E5">then go on to craft a structure within</font>

513
00:22:37,630 --> 00:22:44,559
the within the<font color="#E5E5E5"> remote process where the</font>

514
00:22:41,890 --> 00:22:46,659
key logging was happening<font color="#CCCCCC"> across</font><font color="#E5E5E5"> the</font>

515
00:22:44,559 --> 00:22:49,840
structure with a specific identifiers

516
00:22:46,659 --> 00:22:51,610
and also crafted with the handle with a

517
00:22:49,840 --> 00:22:54,280
handle<font color="#E5E5E5"> to the window where the keystroke</font>

518
00:22:51,610 --> 00:22:57,370
was captured and there's a key text or

519
00:22:54,280 --> 00:23:00,908
else is a code of the keys shot that was

520
00:22:57,370 --> 00:23:03,549
being captured then I will<font color="#CCCCCC"> go on to</font>

521
00:23:00,909 --> 00:23:07,480
translate the<font color="#E5E5E5"> system keys to specific</font>

522
00:23:03,549 --> 00:23:10,780
codes and also saw them in the<font color="#CCCCCC"> object</font>

523
00:23:07,480 --> 00:23:13,450
and<font color="#CCCCCC"> write out all of that to a view on</font>

524
00:23:10,780 --> 00:23:15,129
the other side the malware binary that

525
00:23:13,450 --> 00:23:16,960
was the running would watch<font color="#E5E5E5"> out</font><font color="#CCCCCC"> for that</font>

526
00:23:15,130 --> 00:23:19,390
view and parse the data<font color="#E5E5E5"> that would</font>

527
00:23:16,960 --> 00:23:22,030
receive<font color="#E5E5E5"> I will find the keystrokes</font>

528
00:23:19,390 --> 00:23:25,330
identified by we mentioned<font color="#E5E5E5"> identifiers</font>

529
00:23:22,030 --> 00:23:27,039
and also fetch name of the window that

530
00:23:25,330 --> 00:23:29,860
<font color="#CCCCCC">was associated with the window handle</font>

531
00:23:27,039 --> 00:23:32,230
that was stored within the object they

532
00:23:29,860 --> 00:23:34,120
will then<font color="#E5E5E5"> write all the data to a temp</font>

533
00:23:32,230 --> 00:23:35,950
file<font color="#E5E5E5"> this way a keylogger would know</font>

534
00:23:34,120 --> 00:23:37,809
which window has received which

535
00:23:35,950 --> 00:23:40,809
keystroke and<font color="#CCCCCC"> structured the temporal</font>

536
00:23:37,809 --> 00:23:44,710
accordingly to get the key strokes which

537
00:23:40,809 --> 00:23:47,950
refer<font color="#CCCCCC"> to specific windows interestingly</font>

538
00:23:44,710 --> 00:23:51,130
at a point the temp files that the malwa

539
00:23:47,950 --> 00:23:54,850
would write their names would start<font color="#CCCCCC"> with</font>

540
00:23:51,130 --> 00:23:57,570
the field and the D and then<font color="#E5E5E5"> F just to</font>

541
00:23:54,850 --> 00:24:00,870
mention<font color="#E5E5E5"> that at some point</font>

542
00:23:57,570 --> 00:24:02,730
another functionality that<font color="#E5E5E5"> I personally</font>

543
00:24:00,870 --> 00:24:04,770
found was the file system enumeration so

544
00:24:02,730 --> 00:24:07,560
the malware will go on and a number<font color="#E5E5E5"> of</font>

545
00:24:04,770 --> 00:24:09,840
<font color="#E5E5E5">the file system like other members do</font>

546
00:24:07,560 --> 00:24:12,210
today as well and gather<font color="#E5E5E5"> information</font>

547
00:24:09,840 --> 00:24:15,659
about specific files it will find in

548
00:24:12,210 --> 00:24:17,700
file system it was a number<font color="#CCCCCC"> 86 drives</font>

549
00:24:15,660 --> 00:24:19,740
and<font color="#E5E5E5"> walk the entire file system that</font>

550
00:24:17,700 --> 00:24:23,040
<font color="#CCCCCC">they could find the</font><font color="#E5E5E5"> interesting on this</font>

551
00:24:19,740 --> 00:24:27,120
functionality was that strings being

552
00:24:23,040 --> 00:24:29,010
used within that function were being so

553
00:24:27,120 --> 00:24:31,889
the strings within the<font color="#CCCCCC"> the binary were</font>

554
00:24:29,010 --> 00:24:34,860
decrypted<font color="#E5E5E5"> runtime and would only be</font>

555
00:24:31,890 --> 00:24:36,840
decrypted for their specific use so

556
00:24:34,860 --> 00:24:38,100
whenever an<font color="#E5E5E5"> API needed one of the</font>

557
00:24:36,840 --> 00:24:39,840
hard-coded strings<font color="#E5E5E5"> the string will be</font>

558
00:24:38,100 --> 00:24:42,030
decrypted the<font color="#E5E5E5"> API would be called with</font>

559
00:24:39,840 --> 00:24:44,490
the decrypted string and later on the

560
00:24:42,030 --> 00:24:47,129
string and<font color="#CCCCCC"> memory would be encrypted</font>

561
00:24:44,490 --> 00:24:51,210
again so at runtime is very unlikely to

562
00:24:47,130 --> 00:24:57,450
find clear text strings that the lover

563
00:24:51,210 --> 00:24:59,450
was going to use again the the<font color="#CCCCCC"> fastest</font>

564
00:24:57,450 --> 00:25:01,770
my narration was implemented<font color="#E5E5E5"> for</font>

565
00:24:59,450 --> 00:25:03,360
different<font color="#E5E5E5"> versions of Windows new</font>

566
00:25:01,770 --> 00:25:05,850
version would use the<font color="#E5E5E5"> fine first file</font>

567
00:25:03,360 --> 00:25:09,419
van<font color="#E5E5E5"> next file and find clothes</font><font color="#CCCCCC"> ap</font><font color="#E5E5E5"> is</font>

568
00:25:05,850 --> 00:25:13,350
that we know from malware today and the

569
00:25:09,420 --> 00:25:15,930
retro version would use<font color="#CCCCCC"> comb now</font>

570
00:25:13,350 --> 00:25:18,899
analysts in the room we know that comb

571
00:25:15,930 --> 00:25:21,060
is a nightmare com stands for the

572
00:25:18,900 --> 00:25:23,820
component object model which is<font color="#E5E5E5"> a</font>

573
00:25:21,060 --> 00:25:27,720
splendid invention that<font color="#CCCCCC"> Microsoft had</font>

574
00:25:23,820 --> 00:25:29,850
where you can um instrument the<font color="#E5E5E5"> Windows</font>

575
00:25:27,720 --> 00:25:31,200
operating system through the component

576
00:25:29,850 --> 00:25:34,169
object model which means that

577
00:25:31,200 --> 00:25:36,840
technically you can<font color="#CCCCCC"> well you can access</font>

578
00:25:34,170 --> 00:25:38,400
a<font color="#E5E5E5"> windows functionality through abstract</font>

579
00:25:36,840 --> 00:25:40,649
objects that<font color="#E5E5E5"> you can request from the</font>

580
00:25:38,400 --> 00:25:42,930
operating system and these objects will

581
00:25:40,650 --> 00:25:47,550
then provide<font color="#E5E5E5"> the functionality that</font>

582
00:25:42,930 --> 00:25:54,120
usually<font color="#CCCCCC"> the windows 32 API provides how</font>

583
00:25:47,550 --> 00:25:57,419
does it look like here I can see code

584
00:25:54,120 --> 00:25:58,949
which is probably one of the best

585
00:25:57,420 --> 00:26:02,490
documentation so you can find about

586
00:25:58,950 --> 00:26:05,400
<font color="#E5E5E5">these component object model objects</font>

587
00:26:02,490 --> 00:26:09,060
that Microsoft provides I grabbed this

588
00:26:05,400 --> 00:26:11,559
from the wine implementation and it

589
00:26:09,060 --> 00:26:14,590
describes the I shall<font color="#E5E5E5"> link a</font>

590
00:26:11,559 --> 00:26:17,379
object so here on top you can see the

591
00:26:14,590 --> 00:26:22,360
class ID which<font color="#CCCCCC"> is the identifier of this</font>

592
00:26:17,379 --> 00:26:26,350
specific object and here you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> the</font>

593
00:26:22,360 --> 00:26:30,699
<font color="#E5E5E5">V table which describes the object out</font>

594
00:26:26,350 --> 00:26:35,049
later look in in<font color="#CCCCCC"> Maori so you can see</font>

595
00:26:30,700 --> 00:26:36,610
this can be quite hard if you see a I

596
00:26:35,049 --> 00:26:38,740
come up track being with reached from

597
00:26:36,610 --> 00:26:40,840
the operating system which would kind of

598
00:26:38,740 --> 00:26:44,499
like look like<font color="#E5E5E5"> this to find</font><font color="#CCCCCC"> out which</font>

599
00:26:40,840 --> 00:26:45,999
functions are actually called yet this

600
00:26:44,499 --> 00:26:49,059
is all<font color="#E5E5E5"> implemented with a copy and</font>

601
00:26:45,999 --> 00:26:51,730
instance API or you can retrieve an

602
00:26:49,059 --> 00:26:54,399
object associated with<font color="#CCCCCC"> a specific class</font>

603
00:26:51,730 --> 00:26:57,580
ID and this object afterwards serves you

604
00:26:54,399 --> 00:27:02,049
the functionality which is provided by

605
00:26:57,580 --> 00:27:04,629
the specific class in the end in the

606
00:27:02,049 --> 00:27:06,220
binary<font color="#E5E5E5"> you see API calls that look kind</font>

607
00:27:04,629 --> 00:27:08,830
of like what is listed down here you

608
00:27:06,220 --> 00:27:11,230
have a pointer to the<font color="#E5E5E5"> object you just</font>

609
00:27:08,830 --> 00:27:13,689
<font color="#E5E5E5">associated and an offset which points to</font>

610
00:27:11,230 --> 00:27:16,480
the specific normal function but it is

611
00:27:13,690 --> 00:27:18,789
not a<font color="#E5E5E5"> short way to find out which</font>

612
00:27:16,480 --> 00:27:23,049
<font color="#CCCCCC">functions</font><font color="#E5E5E5"> actually called within the</font>

613
00:27:18,789 --> 00:27:24,669
binary all right all that about the

614
00:27:23,049 --> 00:27:26,799
<font color="#CCCCCC">functionality let me get to</font><font color="#E5E5E5"> the</font>

615
00:27:24,669 --> 00:27:29,529
execution flow so one of<font color="#E5E5E5"> the most</font>

616
00:27:26,799 --> 00:27:30,789
<font color="#CCCCCC">challenging parts of these binaries was</font>

617
00:27:29,529 --> 00:27:33,639
as mentioned before they're not

618
00:27:30,789 --> 00:27:35,649
structured can you don't go and analyze

619
00:27:33,639 --> 00:27:37,479
<font color="#CCCCCC">a specific function</font><font color="#E5E5E5"> and then see in</font>

620
00:27:35,649 --> 00:27:39,879
which context dysfunction is being cold

621
00:27:37,480 --> 00:27:41,619
and where it pops up but you have to go

622
00:27:39,879 --> 00:27:46,840
<font color="#CCCCCC">like my function my functional function</font>

623
00:27:41,619 --> 00:27:49,480
and um it is just really hard<font color="#E5E5E5"> to find</font>

624
00:27:46,840 --> 00:27:50,980
out how they relate together there's

625
00:27:49,480 --> 00:27:52,990
also because the<font color="#E5E5E5"> authors put some</font>

626
00:27:50,980 --> 00:27:57,100
special effort into obfuscating their

627
00:27:52,990 --> 00:28:00,279
execution flow which shall release them

628
00:27:57,100 --> 00:28:03,549
this slides of first of all the binaries

629
00:28:00,279 --> 00:28:06,249
would watch out<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a terminal services</font>

630
00:28:03,549 --> 00:28:08,230
notification to launch their malicious

631
00:28:06,249 --> 00:28:11,200
activity a terminal services

632
00:28:08,230 --> 00:28:12,789
notification isn't used often anymore

633
00:28:11,200 --> 00:28:15,309
and mother an operating system<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

634
00:28:12,789 --> 00:28:17,619
it has<font color="#CCCCCC"> been duplicated at some point but</font>

635
00:28:15,309 --> 00:28:19,389
then windows XP and downwards this is

636
00:28:17,619 --> 00:28:21,428
still a thing a terminal services

637
00:28:19,389 --> 00:28:23,769
education can notify running process

638
00:28:21,429 --> 00:28:24,280
about<font color="#E5E5E5"> the windows user logging on to</font>

639
00:28:23,769 --> 00:28:26,080
this

640
00:28:24,280 --> 00:28:28,629
stuff so this would<font color="#CCCCCC"> be the point where</font>

641
00:28:26,080 --> 00:28:31,750
the melvar would start it's malicious

642
00:28:28,630 --> 00:28:35,440
activity furthermore the binary will be

643
00:28:31,750 --> 00:28:37,840
structured in functional race so after

644
00:28:35,440 --> 00:28:40,810
<font color="#E5E5E5">after the launch letter set up of the</font>

645
00:28:37,840 --> 00:28:44,770
<font color="#CCCCCC">Melbourne execution would</font><font color="#E5E5E5"> be referred to</font>

646
00:28:40,810 --> 00:28:47,620
functionaries<font color="#E5E5E5"> which would then execute</font>

647
00:28:44,770 --> 00:28:49,300
the initialization to set up and the

648
00:28:47,620 --> 00:28:52,270
actual functionality I will talk about

649
00:28:49,300 --> 00:28:54,310
that in<font color="#CCCCCC"> a second configuration data</font>

650
00:28:52,270 --> 00:28:55,960
after Melbourne will be stored in<font color="#CCCCCC"> queues</font>

651
00:28:54,310 --> 00:28:57,639
so a lot of configuration data is

652
00:28:55,960 --> 00:28:59,320
statically stored within the binary<font color="#CCCCCC"> as</font>

653
00:28:57,640 --> 00:29:02,560
<font color="#CCCCCC">lists in the</font><font color="#E5E5E5"> race or then be loaded at</font>

654
00:28:59,320 --> 00:29:04,240
runtime and we've done in two queues

655
00:29:02,560 --> 00:29:06,639
which would later serve the

656
00:29:04,240 --> 00:29:09,610
configuration data two functions lot of

657
00:29:06,640 --> 00:29:11,530
the configuration data is<font color="#E5E5E5"> not indicated</font>

658
00:29:09,610 --> 00:29:13,030
<font color="#E5E5E5">by strings or with any descriptions</font>

659
00:29:11,530 --> 00:29:15,629
which will tell you which configuration

660
00:29:13,030 --> 00:29:17,770
<font color="#CCCCCC">error that is that this part but</font>

661
00:29:15,630 --> 00:29:20,050
wouldn't like<font color="#E5E5E5"> be very hard to find out</font>

662
00:29:17,770 --> 00:29:24,850
what the configuration data<font color="#E5E5E5"> would</font>

663
00:29:20,050 --> 00:29:26,500
actually be supposed to serve the OS

664
00:29:24,850 --> 00:29:28,149
version determination as mentioned

665
00:29:26,500 --> 00:29:31,330
<font color="#CCCCCC">before spread throughout the</font><font color="#E5E5E5"> whole</font>

666
00:29:28,150 --> 00:29:33,040
binary so with<font color="#E5E5E5"> this determination of</font>

667
00:29:31,330 --> 00:29:36,460
battery would decide which execution

668
00:29:33,040 --> 00:29:39,790
path to take in the future<font color="#CCCCCC"> and this also</font>

669
00:29:36,460 --> 00:29:41,590
makes um this also distorts the binary

670
00:29:39,790 --> 00:29:46,060
further so the following of the

671
00:29:41,590 --> 00:29:48,189
<font color="#E5E5E5">execution</font><font color="#CCCCCC"> part is really</font><font color="#E5E5E5"> hard also I</font>

672
00:29:46,060 --> 00:29:49,960
would<font color="#E5E5E5"> use it will make heavy use of the</font>

673
00:29:48,190 --> 00:29:52,390
registry and store run time data within

674
00:29:49,960 --> 00:29:54,340
the registry and unload it again the

675
00:29:52,390 --> 00:29:55,720
data points with an execution which

676
00:29:54,340 --> 00:29:57,610
makes it<font color="#E5E5E5"> very hard to statically follow</font>

677
00:29:55,720 --> 00:30:07,720
which data is stored there and when it

678
00:29:57,610 --> 00:30:09,100
is<font color="#E5E5E5"> used and virtual machines but yeah</font>

679
00:30:07,720 --> 00:30:12,480
anyway on the next slide when it finally

680
00:30:09,100 --> 00:30:14,800
loads I will explain further about the

681
00:30:12,480 --> 00:30:17,650
<font color="#E5E5E5">function erase i just mentioned this one</font>

682
00:30:14,800 --> 00:30:19,480
here so the function erase that<font color="#E5E5E5"> i</font>

683
00:30:17,650 --> 00:30:21,250
mentioned are actually reaches lists

684
00:30:19,480 --> 00:30:23,740
within the binary you will have large

685
00:30:21,250 --> 00:30:27,310
lists on function offsets stored within

686
00:30:23,740 --> 00:30:29,770
the executable which one would suppose

687
00:30:27,310 --> 00:30:33,159
<font color="#E5E5E5">are addressed directly but they're</font>

688
00:30:29,770 --> 00:30:35,470
actually<font color="#CCCCCC"> not they are iterated in fact</font>

689
00:30:33,160 --> 00:30:36,490
the malware has several functions which

690
00:30:35,470 --> 00:30:40,260
iterate through this

691
00:30:36,490 --> 00:30:43,000
list and find their specific array of

692
00:30:40,260 --> 00:30:45,160
functions so one iteration for example

693
00:30:43,000 --> 00:30:48,010
would go from an offset and just always

694
00:30:45,160 --> 00:30:50,100
jump three bytes further in the hope of

695
00:30:48,010 --> 00:30:52,030
finally hitting and<font color="#E5E5E5"> function offset</font>

696
00:30:50,100 --> 00:30:53,469
that's very<font color="#CCCCCC"> interesting because like</font>

697
00:30:52,030 --> 00:30:56,770
binary people we would expect there to

698
00:30:53,470 --> 00:30:59,110
be<font color="#E5E5E5"> a two or a four or a nato 16 but the</font>

699
00:30:56,770 --> 00:31:03,360
spire<font color="#E5E5E5"> I used three</font><font color="#CCCCCC"> which actually means</font>

700
00:30:59,110 --> 00:31:07,090
that only every fourth memory offset

701
00:31:03,360 --> 00:31:09,129
will be will be hit and all the other

702
00:31:07,090 --> 00:31:13,840
chumps like go into the dark they don't

703
00:31:09,130 --> 00:31:16,929
find any ballot offset which in the end

704
00:31:13,840 --> 00:31:18,820
leads to very distorted array<font color="#CCCCCC"> Saudi</font>

705
00:31:16,929 --> 00:31:20,950
erase that I've been talking about<font color="#E5E5E5"> I</font>

706
00:31:18,820 --> 00:31:23,260
actually hidden within the list there's

707
00:31:20,950 --> 00:31:25,030
three<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> they're iterated from</font>

708
00:31:23,260 --> 00:31:26,410
different directions who would have one

709
00:31:25,030 --> 00:31:28,090
iteration which<font color="#E5E5E5"> stole it from the top</font>

710
00:31:26,410 --> 00:31:31,120
who would go down by three bites every

711
00:31:28,090 --> 00:31:34,209
time until<font color="#CCCCCC"> it found all the</font>

712
00:31:31,120 --> 00:31:35,709
initialization functions there will be

713
00:31:34,210 --> 00:31:38,200
<font color="#E5E5E5">another iteration which should start</font>

714
00:31:35,710 --> 00:31:40,000
some bites further up<font color="#CCCCCC"> the top with also</font>

715
00:31:38,200 --> 00:31:42,400
iterate where three bites down would

716
00:31:40,000 --> 00:31:44,110
find a<font color="#E5E5E5"> set up array and also there will</font>

717
00:31:42,400 --> 00:31:47,080
be a teardown array which sorry from the

718
00:31:44,110 --> 00:31:50,169
bottom and iterate its way up with three

719
00:31:47,080 --> 00:31:53,080
bites every time this is a setup

720
00:31:50,170 --> 00:31:55,059
function array as i call it here's the

721
00:31:53,080 --> 00:31:58,110
<font color="#E5E5E5">Josh I Cadogan because when analyzing</font>

722
00:31:55,059 --> 00:32:00,580
that I felt like<font color="#E5E5E5"> that stupid cat and</font>

723
00:31:58,110 --> 00:32:02,620
there's another<font color="#E5E5E5"> array which does the</font>

724
00:32:00,580 --> 00:32:05,139
same thing with an iteration of seven

725
00:32:02,620 --> 00:32:08,110
<font color="#E5E5E5">bites which is also not four or eight or</font>

726
00:32:05,140 --> 00:32:10,900
anything we would expect this other

727
00:32:08,110 --> 00:32:12,729
arrayed oh um had a different purpose

728
00:32:10,900 --> 00:32:15,250
namely would serve the actual

729
00:32:12,730 --> 00:32:20,770
functionality of the binary there<font color="#E5E5E5"> would</font>

730
00:32:15,250 --> 00:32:24,010
see a structure<font color="#CCCCCC"> of to function offsets</font>

731
00:32:20,770 --> 00:32:28,420
each indicated by an index so you can

732
00:32:24,010 --> 00:32:30,460
see that<font color="#E5E5E5"> you have to up there on top and</font>

733
00:32:28,420 --> 00:32:33,850
afterwards<font color="#E5E5E5"> 2003 and</font><font color="#CCCCCC"> then there was a B</font>

734
00:32:30,460 --> 00:32:36,520
and C let's see the index numbers for

735
00:32:33,850 --> 00:32:38,649
these specific functionalities then

736
00:32:36,520 --> 00:32:40,240
these nationalities would have an init

737
00:32:38,650 --> 00:32:42,100
handler where all the data structures

738
00:32:40,240 --> 00:32:44,740
were initialized and the handlers were

739
00:32:42,100 --> 00:32:48,030
opened and then you would<font color="#CCCCCC"> have the</font>

740
00:32:44,740 --> 00:32:49,730
actual action function where the

741
00:32:48,030 --> 00:32:55,520
intention the

742
00:32:49,730 --> 00:32:58,700
functionality was loaded at the same

743
00:32:55,520 --> 00:33:01,760
time the arguments for<font color="#E5E5E5"> the specific</font>

744
00:32:58,700 --> 00:33:04,520
functions will be<font color="#E5E5E5"> served out of the ques</font>

745
00:33:01,760 --> 00:33:08,120
I mentioned<font color="#E5E5E5"> before that were in alert</font>

746
00:33:04,520 --> 00:33:10,670
initialized within the init handlers so

747
00:33:08,120 --> 00:33:13,489
within the action functions<font color="#E5E5E5"> one will</font>

748
00:33:10,670 --> 00:33:15,470
only find and access 2a q were some

749
00:33:13,490 --> 00:33:18,080
random<font color="#E5E5E5"> American configuration value</font>

750
00:33:15,470 --> 00:33:22,240
would be retrieved to<font color="#CCCCCC"> then serve as the</font>

751
00:33:18,080 --> 00:33:25,340
configuration of that specific function

752
00:33:22,240 --> 00:33:27,830
and here is that<font color="#E5E5E5"> stupid cat again</font>

753
00:33:25,340 --> 00:33:32,659
because this was a bit<font color="#E5E5E5"> more crazy than</font>

754
00:33:27,830 --> 00:33:36,110
the other functionaries before at this

755
00:33:32,660 --> 00:33:37,700
point<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to share this quote</font>

756
00:33:36,110 --> 00:33:39,639
<font color="#CCCCCC">from Lewis Carroll it would be so nice</font>

757
00:33:37,700 --> 00:33:41,690
if something made sense for a change

758
00:33:39,640 --> 00:33:43,160
within the binary and within the

759
00:33:41,690 --> 00:33:44,900
function<font color="#E5E5E5"> either so</font><font color="#CCCCCC"> all together spent</font>

760
00:33:43,160 --> 00:33:46,640
about three months just<font color="#E5E5E5"> try to figure</font>

761
00:33:44,900 --> 00:33:48,470
out which configuration value would

762
00:33:46,640 --> 00:33:52,730
belong to which function and what would

763
00:33:48,470 --> 00:33:57,350
it in yet invoke within their respective

764
00:33:52,730 --> 00:34:00,110
handlers also our malware is being

765
00:33:57,350 --> 00:34:02,419
sneaky it doesn't only try to hide as a

766
00:34:00,110 --> 00:34:05,659
like an idler and try to hide it<font color="#CCCCCC"> CTO</font>

767
00:34:02,420 --> 00:34:08,060
communication very well it also tries to

768
00:34:05,660 --> 00:34:11,659
hide from security products that were

769
00:34:08,060 --> 00:34:14,420
installed in the system specifically

770
00:34:11,659 --> 00:34:17,779
ever try to hide from antivirus but

771
00:34:14,420 --> 00:34:19,250
unlike the<font color="#E5E5E5"> usual malware I'm looking</font><font color="#CCCCCC"> at</font>

772
00:34:17,780 --> 00:34:22,610
it would only try to hide from one

773
00:34:19,250 --> 00:34:25,310
specific antivirus it was for example

774
00:34:22,610 --> 00:34:28,780
search for<font color="#CCCCCC"> a VP that exe process if you</font>

775
00:34:25,310 --> 00:34:31,730
have looked at malware before that

776
00:34:28,780 --> 00:34:35,630
refers to the kaspersky antivirus

777
00:34:31,730 --> 00:34:37,610
product it<font color="#E5E5E5"> will also check whether any</font>

778
00:34:35,630 --> 00:34:39,470
kaspersky version<font color="#E5E5E5"> I was installed if any</font>

779
00:34:37,610 --> 00:34:40,700
and<font color="#E5E5E5"> wouldn't see if the behavior blocker</font>

780
00:34:39,469 --> 00:34:44,029
or the parental control of kaspersky

781
00:34:40,699 --> 00:34:46,969
<font color="#E5E5E5">were installed activated later on would</font>

782
00:34:44,030 --> 00:34:50,270
adapt<font color="#CCCCCC"> its</font><font color="#E5E5E5"> functionality based on the</font>

783
00:34:46,969 --> 00:34:52,609
information that this antivirus check

784
00:34:50,270 --> 00:34:54,830
would retrieve so<font color="#E5E5E5"> we'll see is the</font>

785
00:34:52,610 --> 00:34:56,690
kaspersky be here a blocker active it

786
00:34:54,830 --> 00:34:59,250
was active for should probably not start

787
00:34:56,690 --> 00:35:02,220
the key logging component

788
00:34:59,250 --> 00:35:04,820
and so on and<font color="#E5E5E5"> so forth the different</font>

789
00:35:02,220 --> 00:35:06,990
kaspersky versions were what as a

790
00:35:04,820 --> 00:35:08,940
structure within the x rays you would

791
00:35:06,990 --> 00:35:11,939
again have like a beautiful<font color="#E5E5E5"> array with</font>

792
00:35:08,940 --> 00:35:12,990
indexes and within their you would find

793
00:35:11,940 --> 00:35:14,790
all<font color="#E5E5E5"> the registry keys and values</font>

794
00:35:12,990 --> 00:35:17,729
associated with the specific<font color="#CCCCCC"> burst</font>

795
00:35:14,790 --> 00:35:19,410
diversions and this mentioned<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would</font>

796
00:35:17,730 --> 00:35:21,810
be a consistent search so the story

797
00:35:19,410 --> 00:35:23,670
execution you see love checks for

798
00:35:21,810 --> 00:35:25,500
operating system checks for the install

799
00:35:23,670 --> 00:35:28,170
kaspersky version and also checks for

800
00:35:25,500 --> 00:35:32,310
other installed firewall products and

801
00:35:28,170 --> 00:35:34,770
security solutions come at me bro if

802
00:35:32,310 --> 00:35:36,420
someone's interested<font color="#CCCCCC"> i pasted all the</font>

803
00:35:34,770 --> 00:35:37,740
registry keys from<font color="#CCCCCC"> the different</font>

804
00:35:36,420 --> 00:35:39,150
kaspersky version on the<font color="#E5E5E5"> slide of</font>

805
00:35:37,740 --> 00:35:41,970
someone maybe wants to use them in the

806
00:35:39,150 --> 00:35:44,850
future or I don't know<font color="#CCCCCC"> also did</font>

807
00:35:41,970 --> 00:35:46,319
<font color="#CCCCCC">motivation so what for example see</font>

808
00:35:44,850 --> 00:35:49,440
whether<font color="#CCCCCC"> they're writing execution</font>

809
00:35:46,320 --> 00:35:51,840
restrictions within the security

810
00:35:49,440 --> 00:35:53,460
policies of the running systems that

811
00:35:51,840 --> 00:35:55,710
will prevent<font color="#CCCCCC"> DLLs from being</font><font color="#E5E5E5"> executed</font>

812
00:35:53,460 --> 00:35:59,700
and that was<font color="#E5E5E5"> the case</font><font color="#CCCCCC"> you wouldn't try</font>

813
00:35:55,710 --> 00:36:01,350
to load further<font color="#CCCCCC"> dll's and also as</font>

814
00:35:59,700 --> 00:36:03,600
mentioned they would search for other

815
00:36:01,350 --> 00:36:07,350
security products which if you look

816
00:36:03,600 --> 00:36:09,810
<font color="#E5E5E5">through that list or again not the most</font>

817
00:36:07,350 --> 00:36:12,150
up-to-date security product anymore and

818
00:36:09,810 --> 00:36:14,970
what many focus and detecting keyloggers

819
00:36:12,150 --> 00:36:18,330
so most of the process of the<font color="#CCCCCC"> polls</font>

820
00:36:14,970 --> 00:36:20,129
<font color="#E5E5E5">listed here have special functionality</font>

821
00:36:18,330 --> 00:36:22,980
to detect keylogging and detect the

822
00:36:20,130 --> 00:36:25,290
specific hooking<font color="#E5E5E5"> that the malware</font>

823
00:36:22,980 --> 00:36:27,570
performs unless mentioned if one of

824
00:36:25,290 --> 00:36:29,430
these<font color="#E5E5E5"> products one of these</font><font color="#CCCCCC"> processes is</font>

825
00:36:27,570 --> 00:36:31,290
found<font color="#E5E5E5"> running in the system the</font>

826
00:36:29,430 --> 00:36:32,970
<font color="#CCCCCC">melbourne would not stop running would</font>

827
00:36:31,290 --> 00:36:38,520
go on running but we decide to not

828
00:36:32,970 --> 00:36:40,080
install its keel over component which<font color="#E5E5E5"> i</font>

829
00:36:38,520 --> 00:36:42,060
thought was actually as you'd rather

830
00:36:40,080 --> 00:36:44,790
quite smart because<font color="#CCCCCC"> tomorrow you usually</font>

831
00:36:42,060 --> 00:36:46,710
see today it has security checks on on

832
00:36:44,790 --> 00:36:48,600
the startup like first<font color="#E5E5E5"> as random Packer</font>

833
00:36:46,710 --> 00:36:50,610
<font color="#CCCCCC">and then there's some security checks</font>

834
00:36:48,600 --> 00:36:52,049
like it's their antivirus sister virtual

835
00:36:50,610 --> 00:36:55,170
<font color="#E5E5E5">machine running on this or anything</font>

836
00:36:52,050 --> 00:36:58,020
awkward and if so most mal washer stops

837
00:36:55,170 --> 00:37:00,000
running muscle and don't<font color="#E5E5E5"> have like a</font>

838
00:36:58,020 --> 00:37:02,190
fine-grained decision-making what they

839
00:37:00,000 --> 00:37:03,870
should perform and<font color="#E5E5E5"> what not if specific</font>

840
00:37:02,190 --> 00:37:04,920
security products are installed on the

841
00:37:03,870 --> 00:37:06,660
system

842
00:37:04,920 --> 00:37:10,500
of course you have more<font color="#CCCCCC"> invasion</font><font color="#E5E5E5"> there</font>

843
00:37:06,660 --> 00:37:13,740
<font color="#E5E5E5">is more searching for products that</font>

844
00:37:10,500 --> 00:37:16,770
would scan the network traffic so the

845
00:37:13,740 --> 00:37:19,649
main<font color="#CCCCCC"> focus of evasion was one on the</font>

846
00:37:16,770 --> 00:37:24,270
<font color="#CCCCCC">keylogger</font><font color="#E5E5E5"> and be on evasion of network</font>

847
00:37:19,650 --> 00:37:25,770
<font color="#CCCCCC">capturing tools which kind of points you</font>

848
00:37:24,270 --> 00:37:27,450
in the direction that<font color="#CCCCCC"> that was the main</font>

849
00:37:25,770 --> 00:37:29,730
purpose<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to malware</font><font color="#CCCCCC"> login keystrokes</font>

850
00:37:27,450 --> 00:37:31,230
and sending out the data it was looking

851
00:37:29,730 --> 00:37:33,870
through the keystrokes out of the

852
00:37:31,230 --> 00:37:36,510
network but altogether if<font color="#CCCCCC"> you think</font>

853
00:37:33,870 --> 00:37:38,549
<font color="#E5E5E5">about the Cherokee lager that could</font><font color="#CCCCCC"> be</font>

854
00:37:36,510 --> 00:37:41,010
done a lot simpler they could be done a

855
00:37:38,550 --> 00:37:42,780
lot less software engineering to just

856
00:37:41,010 --> 00:37:43,980
implement the random key logger that he

857
00:37:42,780 --> 00:37:48,990
could install in the system<font color="#E5E5E5"> and they</font>

858
00:37:43,980 --> 00:37:53,790
would send out data from the<font color="#CCCCCC"> network all</font>

859
00:37:48,990 --> 00:37:55,620
right one<font color="#CCCCCC"> of the last things that was</font>

860
00:37:53,790 --> 00:37:58,020
interesting about the evasion was that

861
00:37:55,620 --> 00:38:00,930
the data that<font color="#E5E5E5"> the malware would store</font>

862
00:37:58,020 --> 00:38:03,270
within the registry at<font color="#E5E5E5"> runtime would be</font>

863
00:38:00,930 --> 00:38:06,720
obfuscated it when the kaspersky is

864
00:38:03,270 --> 00:38:08,970
clear product was installed this is some

865
00:38:06,720 --> 00:38:11,549
functionality that was not present in

866
00:38:08,970 --> 00:38:14,430
the older binaries from 2007 but was

867
00:38:11,550 --> 00:38:16,670
added in the batteries from from 2011

868
00:38:14,430 --> 00:38:18,870
which kind of gives<font color="#E5E5E5"> you a hint that</font>

869
00:38:16,670 --> 00:38:20,790
kaspersky probably came up<font color="#E5E5E5"> with the</font>

870
00:38:18,870 --> 00:38:22,500
signature or some kind of detection for

871
00:38:20,790 --> 00:38:24,240
the data that the mal was right<font color="#E5E5E5"> into</font>

872
00:38:22,500 --> 00:38:25,680
registry and that the authors of the

873
00:38:24,240 --> 00:38:28,560
malware don't realize the<font color="#CCCCCC"> D</font><font color="#E5E5E5"> you should</font>

874
00:38:25,680 --> 00:38:30,629
probably hide their registry data from

875
00:38:28,560 --> 00:38:33,779
the<font color="#CCCCCC"> plane side</font><font color="#E5E5E5"> of kaspersky and then he</font>

876
00:38:30,630 --> 00:38:36,060
started<font color="#CCCCCC"> to office created your header</font>

877
00:38:33,780 --> 00:38:39,870
and<font color="#CCCCCC"> carry the cried Alice so let me</font>

878
00:38:36,060 --> 00:38:42,360
<font color="#E5E5E5">recap what I just told you the batteries</font>

879
00:38:39,870 --> 00:38:45,630
<font color="#CCCCCC">are written in C++ but actually want to</font>

880
00:38:42,360 --> 00:38:48,660
be a written C but actually are aiming

881
00:38:45,630 --> 00:38:51,390
to<font color="#E5E5E5"> be a C++ there are structures in</font>

882
00:38:48,660 --> 00:38:53,549
there being used like objects but<font color="#E5E5E5"> aren't</font>

883
00:38:51,390 --> 00:38:56,040
really objects you look at objects

884
00:38:53,550 --> 00:38:57,690
within C++ prior usually you find memory

885
00:38:56,040 --> 00:38:59,460
structures tell you how the object is

886
00:38:57,690 --> 00:39:02,460
supposed to look like that's called<font color="#CCCCCC"> V</font>

887
00:38:59,460 --> 00:39:06,390
tables if you have a mid-table you are

888
00:39:02,460 --> 00:39:07,770
somewhat able to link some<font color="#CCCCCC"> object</font><font color="#E5E5E5"> that</font>

889
00:39:06,390 --> 00:39:11,190
is being accentuated within a function

890
00:39:07,770 --> 00:39:12,840
and find out which member functions are

891
00:39:11,190 --> 00:39:17,100
those that<font color="#E5E5E5"> are being called in the</font>

892
00:39:12,840 --> 00:39:17,890
course of the of the execution with the

893
00:39:17,100 --> 00:39:21,040
primary<font color="#CCCCCC"> this</font>

894
00:39:17,890 --> 00:39:22,690
props possible because as the objects

895
00:39:21,040 --> 00:39:25,750
<font color="#E5E5E5">weren't actually objects these memory</font>

896
00:39:22,690 --> 00:39:28,120
structures were not there so they were

897
00:39:25,750 --> 00:39:30,550
just beyond as structures and they don't

898
00:39:28,120 --> 00:39:32,440
be used as objects but without the

899
00:39:30,550 --> 00:39:34,450
memory structures pointing you to a

900
00:39:32,440 --> 00:39:36,340
table<font color="#E5E5E5"> which function belong to which</font>

901
00:39:34,450 --> 00:39:39,759
object it was<font color="#CCCCCC"> very hard to actually</font>

902
00:39:36,340 --> 00:39:43,870
follow down which functions were called

903
00:39:39,760 --> 00:39:46,390
at at runtime<font color="#E5E5E5"> well so the binary looks</font>

904
00:39:43,870 --> 00:39:49,779
obfuscated at but it isn't<font color="#CCCCCC"> really alpha</font>

905
00:39:46,390 --> 00:39:52,299
scattered yeah I think<font color="#E5E5E5"> that that I found</font>

906
00:39:49,780 --> 00:39:54,040
that this intentional obfuscation is the

907
00:39:52,300 --> 00:39:56,470
function<font color="#E5E5E5"> arrays that are being called in</font>

908
00:39:54,040 --> 00:39:58,620
a very very strange iteration but the

909
00:39:56,470 --> 00:40:02,020
<font color="#E5E5E5">rest of the code is really just</font>

910
00:39:58,620 --> 00:40:05,529
awkwardly written it's not beautiful

911
00:40:02,020 --> 00:40:09,040
<font color="#E5E5E5">plain seek out not beautiful plain x86</font>

912
00:40:05,530 --> 00:40:11,260
code but certainly something that that

913
00:40:09,040 --> 00:40:14,710
was written by by authors who knew how

914
00:40:11,260 --> 00:40:16,600
to use x86 themselves so I talked about

915
00:40:14,710 --> 00:40:18,370
<font color="#E5E5E5">this with a</font><font color="#CCCCCC"> friend to the</font><font color="#E5E5E5"> software</font>

916
00:40:16,600 --> 00:40:20,650
developer and who has been developing

917
00:40:18,370 --> 00:40:23,589
software for quite a time and he said

918
00:40:20,650 --> 00:40:25,870
what I scribed looks like someone wrote

919
00:40:23,590 --> 00:40:29,820
this binary nothing unusual see but may

920
00:40:25,870 --> 00:40:32,710
watch parts of it in x86 assembly

921
00:40:29,820 --> 00:40:35,350
although there's a lot of a lot a lot<font color="#CCCCCC"> a</font>

922
00:40:32,710 --> 00:40:37,330
lot<font color="#E5E5E5"> of code win these binaries where</font>

923
00:40:35,350 --> 00:40:39,339
again we have a keylogger that rides

924
00:40:37,330 --> 00:40:41,080
keystrokes so temp file it sends<font color="#CCCCCC"> it to</font>

925
00:40:39,340 --> 00:40:43,780
the sea to server but the battery

926
00:40:41,080 --> 00:40:47,590
actually supports a lot more functions

927
00:40:43,780 --> 00:40:51,250
that at first look like that code so i

928
00:40:47,590 --> 00:40:53,020
was expecting<font color="#E5E5E5"> to find a lot</font><font color="#CCCCCC"> of a lot of</font>

929
00:40:51,250 --> 00:40:55,480
dead functionality in there that just

930
00:40:53,020 --> 00:40:58,030
serves<font color="#E5E5E5"> a confusion purpose but in the</font>

931
00:40:55,480 --> 00:41:00,360
end<font color="#E5E5E5"> for</font><font color="#CCCCCC"> all the seemingly dead code</font><font color="#E5E5E5"> i</font>

932
00:40:58,030 --> 00:41:03,250
found some kind of link back to the main

933
00:41:00,360 --> 00:41:04,600
execution flow so that code that looked

934
00:41:03,250 --> 00:41:08,920
at before it turned out to<font color="#CCCCCC"> be not that</font>

935
00:41:04,600 --> 00:41:10,600
<font color="#E5E5E5">Dad which is very confusing and</font><font color="#CCCCCC"> again</font>

936
00:41:08,920 --> 00:41:13,860
<font color="#E5E5E5">there is no need module separation which</font>

937
00:41:10,600 --> 00:41:13,860
makes the whole thing<font color="#CCCCCC"> just really ugly</font>

938
00:41:17,220 --> 00:41:23,230
oops and here we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the big picture</font>

939
00:41:21,160 --> 00:41:27,220
sketch so<font color="#CCCCCC"> I tried to outline how the</font>

940
00:41:23,230 --> 00:41:28,930
whole binary execution flow works you

941
00:41:27,220 --> 00:41:30,759
can see on top there is straight arrows

942
00:41:28,930 --> 00:41:31,779
because this is what I'm sure off there

943
00:41:30,760 --> 00:41:33,940
is like the setup

944
00:41:31,780 --> 00:41:35,830
routine the install see<font color="#E5E5E5"> I can handler</font>

945
00:41:33,940 --> 00:41:38,770
<font color="#E5E5E5">and it starts to log on monitor to see</font>

946
00:41:35,830 --> 00:41:41,410
<font color="#E5E5E5">when the user logs on and then</font><font color="#CCCCCC"> inbox the</font>

947
00:41:38,770 --> 00:41:46,150
<font color="#E5E5E5">setup and initialization factionalism</font>

948
00:41:41,410 --> 00:41:48,339
from there things<font color="#E5E5E5"> go sideways so somehow</font>

949
00:41:46,150 --> 00:41:51,310
execution<font color="#E5E5E5"> is deferred to the control</font>

950
00:41:48,340 --> 00:41:55,750
function array and from there the key

951
00:41:51,310 --> 00:41:59,110
logger is invoked<font color="#E5E5E5"> and the enumeration of</font>

952
00:41:55,750 --> 00:42:01,390
the other file system and also<font color="#E5E5E5"> one</font>

953
00:41:59,110 --> 00:42:04,600
functionality that<font color="#CCCCCC"> is sort of the dead</font>

954
00:42:01,390 --> 00:42:06,700
<font color="#E5E5E5">end so the the</font><font color="#CCCCCC"> DLL has functionality to</font>

955
00:42:04,600 --> 00:42:08,710
load another dll and<font color="#E5E5E5"> invoke specific</font>

956
00:42:06,700 --> 00:42:11,500
exports of that yellow but as I don't

957
00:42:08,710 --> 00:42:17,020
have to deal ow I can't really tell<font color="#E5E5E5"> what</font>

958
00:42:11,500 --> 00:42:20,290
this<font color="#E5E5E5"> is supposed to do in the end of my</font>

959
00:42:17,020 --> 00:42:21,700
analysis process<font color="#E5E5E5"> I went on to compare</font>

960
00:42:20,290 --> 00:42:23,770
the different versions<font color="#E5E5E5"> of the</font>

961
00:42:21,700 --> 00:42:26,200
executables as I had because as

962
00:42:23,770 --> 00:42:28,000
mentioned the old versions do not have

963
00:42:26,200 --> 00:42:30,520
any invasion from kaspersky security

964
00:42:28,000 --> 00:42:32,830
products and the newer versions do and

965
00:42:30,520 --> 00:42:34,750
it turns out that<font color="#E5E5E5"> there is indeed about</font>

966
00:42:32,830 --> 00:42:38,020
<font color="#E5E5E5">the ten percent difference between these</font>

967
00:42:34,750 --> 00:42:39,910
two binary that's exactly the functions

968
00:42:38,020 --> 00:42:42,130
to deal with the kaspersky product

969
00:42:39,910 --> 00:42:44,140
enumeration<font color="#E5E5E5"> and the checks whether</font>

970
00:42:42,130 --> 00:42:46,720
kaspersky products<font color="#E5E5E5"> for running on the</font>

971
00:42:44,140 --> 00:42:50,740
system so we<font color="#E5E5E5"> could really see that the</font>

972
00:42:46,720 --> 00:42:52,689
the binaries<font color="#CCCCCC"> you've developed</font><font color="#E5E5E5"> over time</font>

973
00:42:50,740 --> 00:42:54,939
so the first binary is written at<font color="#CCCCCC"> the</font>

974
00:42:52,690 --> 00:42:56,380
point where kaspersky did not yet know

975
00:42:54,940 --> 00:42:58,210
about<font color="#CCCCCC"> that malware then</font><font color="#E5E5E5"> apparently</font>

976
00:42:56,380 --> 00:43:00,610
kaspersky found other but<font color="#CCCCCC"> at lower and</font>

977
00:42:58,210 --> 00:43:02,410
the malware authors adapted to this

978
00:43:00,610 --> 00:43:06,120
kaspersky knowledge to hide their

979
00:43:02,410 --> 00:43:06,120
binaries again for their detection

980
00:43:06,240 --> 00:43:11,560
finally what did<font color="#E5E5E5"> we learn from</font><font color="#CCCCCC"> these</font>

981
00:43:08,860 --> 00:43:14,380
binaries so the one side we have targets

982
00:43:11,560 --> 00:43:16,150
with<font color="#CCCCCC"> preferably</font><font color="#E5E5E5"> interesting data because</font>

983
00:43:14,380 --> 00:43:21,010
they were worth that someone designed

984
00:43:16,150 --> 00:43:24,070
this crazy piece<font color="#E5E5E5"> of malware for them or</font>

985
00:43:21,010 --> 00:43:25,960
for probably a limited number of targets

986
00:43:24,070 --> 00:43:28,300
<font color="#CCCCCC">you should</font><font color="#E5E5E5"> also probably update</font><font color="#CCCCCC"> their</font>

987
00:43:25,960 --> 00:43:29,950
operating systems at some point um

988
00:43:28,300 --> 00:43:32,140
they're interesting us to have rather

989
00:43:29,950 --> 00:43:34,149
cool<font color="#CCCCCC"> member dedicated to them so</font>

990
00:43:32,140 --> 00:43:36,850
whatever happens in their operation on

991
00:43:34,150 --> 00:43:39,580
their machines with writing a smart key

992
00:43:36,850 --> 00:43:41,470
logger for them and<font color="#CCCCCC"> also rather show</font>

993
00:43:39,580 --> 00:43:43,359
<font color="#E5E5E5">their kaspersky customers</font>

994
00:43:41,470 --> 00:43:47,859
on the other side what do we know about

995
00:43:43,359 --> 00:43:49,900
the offender<font color="#CCCCCC"> um they probably got money</font>

996
00:43:47,859 --> 00:43:52,359
they<font color="#E5E5E5"> probably got time and they probably</font>

997
00:43:49,900 --> 00:43:54,849
got programmers with mad skills on

998
00:43:52,359 --> 00:43:56,700
videoed<font color="#CCCCCC"> Windows platforms they also have</font>

999
00:43:54,849 --> 00:43:59,560
really crazy software designer so

1000
00:43:56,700 --> 00:44:01,000
whoever laid out that winery did not

1001
00:43:59,560 --> 00:44:03,779
have the intention of making it

1002
00:44:01,000 --> 00:44:06,340
maintainable and scalable and like

1003
00:44:03,780 --> 00:44:09,160
giving<font color="#E5E5E5"> other developers later on the</font>

1004
00:44:06,340 --> 00:44:10,660
opportunity to develop further and also

1005
00:44:09,160 --> 00:44:13,210
<font color="#E5E5E5">they know kaspersky products rather</font>

1006
00:44:10,660 --> 00:44:16,299
quite well I would pressure that's some

1007
00:44:13,210 --> 00:44:18,910
are borderline illegal given all the

1008
00:44:16,300 --> 00:44:25,150
detailed information he had about the

1009
00:44:18,910 --> 00:44:29,950
kaspersky products<font color="#CCCCCC"> alright if my virtual</font>

1010
00:44:25,150 --> 00:44:32,080
machine doesn't die right now I think

1011
00:44:29,950 --> 00:44:33,609
<font color="#CCCCCC">that was about it with the talk anyway</font>

1012
00:44:32,080 --> 00:44:36,069
soon there should be the last slide

1013
00:44:33,609 --> 00:44:38,109
coming up and I thank you<font color="#E5E5E5"> very much for</font>

1014
00:44:36,070 --> 00:44:41,250
<font color="#CCCCCC">your attention if</font><font color="#E5E5E5"> you have any questions</font>

1015
00:44:38,109 --> 00:44:41,250
I'm happy to answer them now

