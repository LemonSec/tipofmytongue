1
00:00:02,879 --> 00:00:03,199
hi

2
00:00:03,199 --> 00:00:05,359
i'm jay peel i'm cto over it in

3
00:00:05,359 --> 00:00:06,319
guardians

4
00:00:06,319 --> 00:00:08,960
here to talk about attacking kubernetes

5
00:00:08,960 --> 00:00:10,000
at kringle con

6
00:00:10,000 --> 00:00:13,200
where i am freezing my took us off

7
00:00:13,200 --> 00:00:15,280
i think it's because i keep reaching

8
00:00:15,280 --> 00:00:16,320
into the ice

9
00:00:16,320 --> 00:00:19,600
to get the freshest of the sushi so this

10
00:00:19,600 --> 00:00:20,960
talk is all demo

11
00:00:20,960 --> 00:00:24,000
it is tied to last year's story from the

12
00:00:24,000 --> 00:00:25,920
holiday hack challenge where the tooth

13
00:00:25,920 --> 00:00:26,880
fairy was the villain

14
00:00:26,880 --> 00:00:30,080
and we're continuing by saying that she

15
00:00:30,080 --> 00:00:32,079
left a logic bomb behind running in a

16
00:00:32,079 --> 00:00:33,680
kubernetes cluster and

17
00:00:33,680 --> 00:00:35,520
if we don't deactivate that logic bomb

18
00:00:35,520 --> 00:00:37,040
it would be bad

19
00:00:37,040 --> 00:00:40,399
like egon spangler bad

20
00:00:40,399 --> 00:00:43,520
so uh one of her developers luckily

21
00:00:43,520 --> 00:00:46,559
has found redemption and wants to help

22
00:00:46,559 --> 00:00:47,760
us out

23
00:00:47,760 --> 00:00:49,200
and kent's going to try to help us get

24
00:00:49,200 --> 00:00:51,039
the logic bombs password before

25
00:00:51,039 --> 00:00:54,160
it causes bad things to happen so what

26
00:00:54,160 --> 00:00:55,600
is kent

27
00:00:55,600 --> 00:00:57,440
what's ken's starting point he has

28
00:00:57,440 --> 00:00:58,960
complete administrative privilege

29
00:00:58,960 --> 00:01:02,320
in his namespace a very common thing

30
00:01:02,320 --> 00:01:05,519
for organizations to do but

31
00:01:05,519 --> 00:01:07,439
outside of his namespace he has very

32
00:01:07,439 --> 00:01:08,880
little privilege he's kind of got read

33
00:01:08,880 --> 00:01:11,200
only and he can only read some things so

34
00:01:11,200 --> 00:01:14,159
this cluster is staged uh in gke

35
00:01:14,159 --> 00:01:16,240
google's managed kubernetes service

36
00:01:16,240 --> 00:01:18,720
um which creates nodes as virtual

37
00:01:18,720 --> 00:01:19,759
machine instances

38
00:01:19,759 --> 00:01:22,400
gc instances uh in a google cloud

39
00:01:22,400 --> 00:01:24,000
project

40
00:01:24,000 --> 00:01:27,200
so kent's got some ideas about how he

41
00:01:27,200 --> 00:01:28,159
might do things

42
00:01:28,159 --> 00:01:30,159
um but let's go straight into our demo

43
00:01:30,159 --> 00:01:32,320
so if you like what we're doing if you

44
00:01:32,320 --> 00:01:34,000
like what you're seeing here if you're

45
00:01:34,000 --> 00:01:35,920
really interested please come take a

46
00:01:35,920 --> 00:01:38,320
look at in guardians kubernetes work

47
00:01:38,320 --> 00:01:40,560
in general and especially our open

48
00:01:40,560 --> 00:01:42,159
source paradise program

49
00:01:42,159 --> 00:01:43,840
so with that said i'm going to go right

50
00:01:43,840 --> 00:01:45,439
into demo so

51
00:01:45,439 --> 00:01:48,479
kent is uh on the kubernetes cluster

52
00:01:48,479 --> 00:01:50,000
he's just doing a quick like look at all

53
00:01:50,000 --> 00:01:51,439
the namespaces that are out there there

54
00:01:51,439 --> 00:01:52,159
are a ton

55
00:01:52,159 --> 00:01:53,920
he knows that the thing he's looking for

56
00:01:53,920 --> 00:01:55,520
is probably a secret

57
00:01:55,520 --> 00:01:57,119
um that's in one of those name spaces

58
00:01:57,119 --> 00:01:58,640
but he doesn't know which one

59
00:01:58,640 --> 00:02:00,560
and he probably doesn't even have access

60
00:02:00,560 --> 00:02:02,159
to list the secrets

61
00:02:02,159 --> 00:02:04,719
um he made a list of namespaces we can

62
00:02:04,719 --> 00:02:06,159
kind of see the one that he's got

63
00:02:06,159 --> 00:02:07,360
developer kent

64
00:02:07,360 --> 00:02:09,280
um and developer kent he can list

65
00:02:09,280 --> 00:02:10,479
secrets and get there

66
00:02:10,479 --> 00:02:12,160
and get their contents and even create

67
00:02:12,160 --> 00:02:14,800
new ones um but outside of that

68
00:02:14,800 --> 00:02:17,520
in the cluster at large um if you were

69
00:02:17,520 --> 00:02:19,520
to even go namespace.namespace you can't

70
00:02:19,520 --> 00:02:20,000
list

71
00:02:20,000 --> 00:02:21,920
you can't list or read secrets in the

72
00:02:21,920 --> 00:02:24,160
other things so he's going to start by

73
00:02:24,160 --> 00:02:26,080
just creating a quick

74
00:02:26,080 --> 00:02:28,800
um pod in kubernetes in the kind of one

75
00:02:28,800 --> 00:02:29,920
of the simpler ways

76
00:02:29,920 --> 00:02:32,800
we're going to use coop controls dry run

77
00:02:32,800 --> 00:02:34,800
and tell it hey can you give me a quick

78
00:02:34,800 --> 00:02:37,920
definition a quick manifest for pod

79
00:02:37,920 --> 00:02:39,440
that's going to run nginx i'm going to

80
00:02:39,440 --> 00:02:42,000
call it kent to the dry cleaners a

81
00:02:42,000 --> 00:02:44,480
reference to the movie real genius

82
00:02:44,480 --> 00:02:48,319
which you absolutely have to see so

83
00:02:48,319 --> 00:02:50,640
so we've written out that manifest it

84
00:02:50,640 --> 00:02:51,920
says uh it says

85
00:02:51,920 --> 00:02:54,959
a yaml file and um

86
00:02:54,959 --> 00:02:57,120
we can take that file and just run this

87
00:02:57,120 --> 00:02:59,040
command one more time or copy and paste

88
00:02:59,040 --> 00:03:00,400
and write it out to a pod file

89
00:03:00,400 --> 00:03:03,040
we're gonna run coop control create and

90
00:03:03,040 --> 00:03:04,959
that's gonna create our kent the dry

91
00:03:04,959 --> 00:03:05,920
cleaners pod

92
00:03:05,920 --> 00:03:08,800
and now kent's gonna exec into this pod

93
00:03:08,800 --> 00:03:10,480
because that'll put him in the cluster

94
00:03:10,480 --> 00:03:12,400
instead of on his mac laptop

95
00:03:12,400 --> 00:03:14,400
um he's also gonna install jq real quick

96
00:03:14,400 --> 00:03:16,640
because it's json query

97
00:03:16,640 --> 00:03:18,959
um as uh carlos venturamini at in

98
00:03:18,959 --> 00:03:20,159
guardians has taught me

99
00:03:20,159 --> 00:03:23,360
it's an incredibly useful tool um for

100
00:03:23,360 --> 00:03:26,000
you know for going through and both

101
00:03:26,000 --> 00:03:26,640
querying

102
00:03:26,640 --> 00:03:29,120
and changing json on the fly really

103
00:03:29,120 --> 00:03:29,680
easily

104
00:03:29,680 --> 00:03:33,120
so um kent's first step is to go and

105
00:03:33,120 --> 00:03:33,760
talk to

106
00:03:33,760 --> 00:03:37,280
uh the cloud providers metadata uh api

107
00:03:37,280 --> 00:03:40,879
and uh because uh cloud instances will

108
00:03:40,879 --> 00:03:42,400
very very often have

109
00:03:42,400 --> 00:03:44,000
service accounts kind of like i am

110
00:03:44,000 --> 00:03:46,239
accounts um and

111
00:03:46,239 --> 00:03:48,480
uh and so he wants to see you know those

112
00:03:48,480 --> 00:03:49,519
those accounts

113
00:03:49,519 --> 00:03:51,599
in gcp they'll have they'll often have

114
00:03:51,599 --> 00:03:53,280
real read only

115
00:03:53,280 --> 00:03:56,159
but read to every bucket um and that can

116
00:03:56,159 --> 00:03:56,879
be pretty cool

117
00:03:56,879 --> 00:03:58,720
so he's gonna go and basically query and

118
00:03:58,720 --> 00:04:00,080
find out what service counts he's got

119
00:04:00,080 --> 00:04:02,879
it looks like two bus to cube and

120
00:04:02,879 --> 00:04:04,959
default but default is assembling

121
00:04:04,959 --> 00:04:07,519
basically to bust a coupe so he'll ask

122
00:04:07,519 --> 00:04:08,720
we're gonna do another query and

123
00:04:08,720 --> 00:04:09,519
basically

124
00:04:09,519 --> 00:04:12,879
ask the metadate api if we can have

125
00:04:12,879 --> 00:04:16,320
a uh a token that we can use to

126
00:04:16,320 --> 00:04:17,680
authenticate to the

127
00:04:17,680 --> 00:04:20,560
to the google cloud services so we just

128
00:04:20,560 --> 00:04:21,680
throw token

129
00:04:21,680 --> 00:04:23,919
uh the default and then the token on the

130
00:04:23,919 --> 00:04:26,160
end of that and then we can take that

131
00:04:26,160 --> 00:04:27,840
and we're just gonna parse it out with

132
00:04:27,840 --> 00:04:29,600
jq um

133
00:04:29,600 --> 00:04:32,720
so we're going to um

134
00:04:32,720 --> 00:04:35,919
toss that into jq and get at that

135
00:04:35,919 --> 00:04:38,160
uh access token field and so we get that

136
00:04:38,160 --> 00:04:40,400
access token field we throw through said

137
00:04:40,400 --> 00:04:40,800
to

138
00:04:40,800 --> 00:04:43,520
pull off the quotation marks and now we

139
00:04:43,520 --> 00:04:45,040
have something that we can put into a

140
00:04:45,040 --> 00:04:46,320
variable we could call that variable

141
00:04:46,320 --> 00:04:46,880
token

142
00:04:46,880 --> 00:04:49,520
and token is that is now that token it's

143
00:04:49,520 --> 00:04:50,240
only going to

144
00:04:50,240 --> 00:04:53,840
things only alive for 3 600 seconds

145
00:04:53,840 --> 00:04:55,440
but during that time it's useful to us

146
00:04:55,440 --> 00:04:56,880
we could pull one another one if we want

147
00:04:56,880 --> 00:04:58,639
to we'll need the project id

148
00:04:58,639 --> 00:05:01,360
as a number not just as a name um but

149
00:05:01,360 --> 00:05:03,120
the metadata api will happily give that

150
00:05:03,120 --> 00:05:04,880
to us at which point we can start doing

151
00:05:04,880 --> 00:05:07,039
authenticator requests we're going to do

152
00:05:07,039 --> 00:05:08,960
um an authenticated request against the

153
00:05:08,960 --> 00:05:10,800
storage api where we're presenting a

154
00:05:10,800 --> 00:05:12,479
token as a bearer token

155
00:05:12,479 --> 00:05:15,199
storage api for bucket storage we do our

156
00:05:15,199 --> 00:05:16,000
slash b

157
00:05:16,000 --> 00:05:17,600
which means i want to list all the

158
00:05:17,600 --> 00:05:19,199
buckets that are

159
00:05:19,199 --> 00:05:22,080
available in this project and the first

160
00:05:22,080 --> 00:05:23,840
thing we get is basically something that

161
00:05:23,840 --> 00:05:24,479
says nope

162
00:05:24,479 --> 00:05:28,400
sorry no good um this is basically uh

163
00:05:28,400 --> 00:05:30,320
workload identity it's that's uh hitting

164
00:05:30,320 --> 00:05:31,199
us here

165
00:05:31,199 --> 00:05:33,919
uh a gke feature a friend of mine aaron

166
00:05:33,919 --> 00:05:35,360
small helped ship

167
00:05:35,360 --> 00:05:38,479
and this is um

168
00:05:38,479 --> 00:05:40,560
and this is making it so that we're not

169
00:05:40,560 --> 00:05:42,880
getting we're not getting the nodes

170
00:05:42,880 --> 00:05:45,919
uh kent's not getting the nodes uh uh

171
00:05:45,919 --> 00:05:48,000
service account he's he's getting one

172
00:05:48,000 --> 00:05:49,280
that's mapped to his

173
00:05:49,280 --> 00:05:51,919
to this specific workload which is

174
00:05:51,919 --> 00:05:53,199
turning out to be useless so we're gonna

175
00:05:53,199 --> 00:05:54,800
have to try something else

176
00:05:54,800 --> 00:05:56,639
and so now kent's gonna try something

177
00:05:56,639 --> 00:05:59,039
else he's going to create another pod

178
00:05:59,039 --> 00:06:01,039
and this pod it's a little hard to

179
00:06:01,039 --> 00:06:02,800
follow with the word wrap so we'll do it

180
00:06:02,800 --> 00:06:04,400
a second time this pod

181
00:06:04,400 --> 00:06:07,840
is going to um it's gonna be the same

182
00:06:07,840 --> 00:06:09,199
kind of nginx pod

183
00:06:09,199 --> 00:06:11,360
um he's gonna call the pod privilege as

184
00:06:11,360 --> 00:06:13,600
a name but use the same image

185
00:06:13,600 --> 00:06:16,080
but uh we're gonna we're gonna have the

186
00:06:16,080 --> 00:06:18,400
the dry run kick this thing out as json

187
00:06:18,400 --> 00:06:21,840
throw it into jq and have jq set

188
00:06:21,840 --> 00:06:25,120
uh the specification

189
00:06:25,120 --> 00:06:27,759
for one of the pod's containers and make

190
00:06:27,759 --> 00:06:29,039
that container have

191
00:06:29,039 --> 00:06:31,120
the uh have the security context

192
00:06:31,120 --> 00:06:32,160
privileged

193
00:06:32,160 --> 00:06:35,039
and privileged pods privilege containers

194
00:06:35,039 --> 00:06:35,919
you should

195
00:06:35,919 --> 00:06:38,400
basically never have um you'll have it

196
00:06:38,400 --> 00:06:40,639
with a few of the control plane

197
00:06:40,639 --> 00:06:42,560
elements but you really shouldn't have

198
00:06:42,560 --> 00:06:44,319
anybody else creating their own

199
00:06:44,319 --> 00:06:46,639
um so this is a json version that

200
00:06:46,639 --> 00:06:48,000
manifests where security

201
00:06:48,000 --> 00:06:51,680
context um has privilege set to true

202
00:06:51,680 --> 00:06:53,680
and so we've written it out to a file

203
00:06:53,680 --> 00:06:55,360
called yaml but it's json

204
00:06:55,360 --> 00:06:58,160
and uh code control doesn't care so we

205
00:06:58,160 --> 00:06:59,680
tell kube control here you go

206
00:06:59,680 --> 00:07:01,599
stage this it creates pod called

207
00:07:01,599 --> 00:07:03,039
privileged and

208
00:07:03,039 --> 00:07:05,520
kent execs into it and the first thing

209
00:07:05,520 --> 00:07:06,319
we see is

210
00:07:06,319 --> 00:07:07,840
this is what makes a privilege product

211
00:07:07,840 --> 00:07:10,720
privilege pod um

212
00:07:10,720 --> 00:07:13,360
it's among other things we have all of

213
00:07:13,360 --> 00:07:14,400
these devices

214
00:07:14,400 --> 00:07:16,639
from the host from the machine that this

215
00:07:16,639 --> 00:07:18,319
container is running on

216
00:07:18,319 --> 00:07:22,000
published into the container um and

217
00:07:22,000 --> 00:07:24,960
that is no bueno for defenders luckily

218
00:07:24,960 --> 00:07:26,080
our defender here is

219
00:07:26,080 --> 00:07:28,960
tooth fairy and uh and we're trying to

220
00:07:28,960 --> 00:07:31,039
you know uh we're trying to

221
00:07:31,039 --> 00:07:33,520
uh fix things so we've got uh one of

222
00:07:33,520 --> 00:07:34,400
those devices

223
00:07:34,400 --> 00:07:37,520
is dev sda the the actual hard drive raw

224
00:07:37,520 --> 00:07:38,080
device

225
00:07:38,080 --> 00:07:41,440
from the uh from the virtual machine so

226
00:07:41,440 --> 00:07:43,759
um we do a quick after just to see which

227
00:07:43,759 --> 00:07:45,840
partitions are which looks like sda1's

228
00:07:45,840 --> 00:07:47,360
probably uh going to be really really

229
00:07:47,360 --> 00:07:49,360
useful to us and so we mount

230
00:07:49,360 --> 00:07:51,759
sda1 into slash mount we trued into

231
00:07:51,759 --> 00:07:53,599
there so that we basically

232
00:07:53,599 --> 00:07:56,319
as we explore the file system um in this

233
00:07:56,319 --> 00:07:57,199
shell we're gonna

234
00:07:57,199 --> 00:08:00,639
we we're in the file system for the host

235
00:08:00,639 --> 00:08:03,039
um for that hard disk not the file

236
00:08:03,039 --> 00:08:04,639
system for the container

237
00:08:04,639 --> 00:08:06,879
and so i know i can find in home

238
00:08:06,879 --> 00:08:08,639
communities bin a copy kube control

239
00:08:08,639 --> 00:08:09,759
which i'm gonna want

240
00:08:09,759 --> 00:08:13,360
and here or kent's going to want and

241
00:08:13,360 --> 00:08:15,599
so we'll find some other things like

242
00:08:15,599 --> 00:08:17,520
take a quick look at os release to see

243
00:08:17,520 --> 00:08:17,919
yup

244
00:08:17,919 --> 00:08:20,720
my the container may have been debian

245
00:08:20,720 --> 00:08:21,120
but

246
00:08:21,120 --> 00:08:24,479
the host is ubuntu we can see the

247
00:08:24,479 --> 00:08:27,360
the name of this it's a gk you know that

248
00:08:27,360 --> 00:08:27,759
you know

249
00:08:27,759 --> 00:08:31,280
ends in that fj9 um we can see it's a

250
00:08:31,280 --> 00:08:32,958
kubernetes you know look at the message

251
00:08:32,958 --> 00:08:33,599
of the day

252
00:08:33,599 --> 00:08:35,760
just kind of get a feel for yup this is

253
00:08:35,760 --> 00:08:36,958
a node

254
00:08:36,958 --> 00:08:39,120
so let's look at something else that's

255
00:08:39,120 --> 00:08:40,080
really really useful

256
00:08:40,080 --> 00:08:42,479
it makes one of the ways that we can

257
00:08:42,479 --> 00:08:43,599
really really make this

258
00:08:43,599 --> 00:08:46,959
attack count there's a kublet

259
00:08:46,959 --> 00:08:49,040
and there's a coup proxy both of which

260
00:08:49,040 --> 00:08:51,279
on on every node and they both have

261
00:08:51,279 --> 00:08:51,839
their own

262
00:08:51,839 --> 00:08:54,080
search to make requests against the api

263
00:08:54,080 --> 00:08:54,880
server

264
00:08:54,880 --> 00:08:57,120
um we're going to use the kublets

265
00:08:57,120 --> 00:08:59,200
because the kubelet has to

266
00:08:59,200 --> 00:09:01,360
connect the api server to the container

267
00:09:01,360 --> 00:09:03,200
runtime whether it's docker container d

268
00:09:03,200 --> 00:09:04,080
or whatever

269
00:09:04,080 --> 00:09:06,959
and it has to the cool thing is that it

270
00:09:06,959 --> 00:09:08,560
for any pods that are running

271
00:09:08,560 --> 00:09:11,519
on this machine on this instance this

272
00:09:11,519 --> 00:09:12,560
virtual machine

273
00:09:12,560 --> 00:09:14,160
the kubelet is going to be the thing

274
00:09:14,160 --> 00:09:15,600
that's that's uh

275
00:09:15,600 --> 00:09:18,560
getting the secrets from the uh that's

276
00:09:18,560 --> 00:09:19,760
getting the secrets

277
00:09:19,760 --> 00:09:23,279
um from uh from the kubernetes control

278
00:09:23,279 --> 00:09:24,000
plane and

279
00:09:24,000 --> 00:09:27,040
passing it into the containers

280
00:09:27,040 --> 00:09:28,640
um we're staging these connectors with

281
00:09:28,640 --> 00:09:30,240
those and so the google will

282
00:09:30,240 --> 00:09:31,600
be able to read all the secrets for

283
00:09:31,600 --> 00:09:33,920
anything that's staged on itself but not

284
00:09:33,920 --> 00:09:35,360
on other on other uh

285
00:09:35,360 --> 00:09:38,560
but not in other instances um so

286
00:09:38,560 --> 00:09:40,640
there's a coupe config which refers to

287
00:09:40,640 --> 00:09:41,920
this pki

288
00:09:41,920 --> 00:09:44,959
um this pki directories you know client

289
00:09:44,959 --> 00:09:45,519
cert

290
00:09:45,519 --> 00:09:48,160
uh if we look at that client cert um we

291
00:09:48,160 --> 00:09:49,360
find something we like

292
00:09:49,360 --> 00:09:51,519
which is it's going to have not just a

293
00:09:51,519 --> 00:09:53,120
public key but also

294
00:09:53,120 --> 00:09:55,360
private key so this is going to let us

295
00:09:55,360 --> 00:09:57,120
authenticate to kubernetes

296
00:09:57,120 --> 00:10:00,560
as the kublet's service as the kublet's

297
00:10:00,560 --> 00:10:04,160
kubernetes service account and so um

298
00:10:04,160 --> 00:10:06,000
we're just doing quick lists like get

299
00:10:06,000 --> 00:10:08,399
all the get a list of all the pods

300
00:10:08,399 --> 00:10:10,640
um we see that you know while there were

301
00:10:10,640 --> 00:10:12,240
tons of name spaces the only three

302
00:10:12,240 --> 00:10:14,160
really in play or kube system with the

303
00:10:14,160 --> 00:10:15,519
control plane and

304
00:10:15,519 --> 00:10:17,279
developer kent that we're playing with

305
00:10:17,279 --> 00:10:19,600
and then this other thing gps

306
00:10:19,600 --> 00:10:21,600
a reference to last year's holiday

307
00:10:21,600 --> 00:10:23,040
hackathon which was

308
00:10:23,040 --> 00:10:26,000
impressive and fun as heck and there are

309
00:10:26,000 --> 00:10:28,160
all these pods in gps called logic bomb

310
00:10:28,160 --> 00:10:28,880
passwords

311
00:10:28,880 --> 00:10:30,079
remember we're looking for the logic

312
00:10:30,079 --> 00:10:32,640
bombs password so that's good for us

313
00:10:32,640 --> 00:10:35,680
um so we need to find ones that that

314
00:10:35,680 --> 00:10:36,560
have that are

315
00:10:36,560 --> 00:10:38,880
that are staged on the same node on this

316
00:10:38,880 --> 00:10:40,399
fj9 node

317
00:10:40,399 --> 00:10:43,279
and so we're going to grab for just fj9

318
00:10:43,279 --> 00:10:45,040
and these are the pods

319
00:10:45,040 --> 00:10:46,560
on the cluster that are staged to this

320
00:10:46,560 --> 00:10:48,000
one and we see a bunch of control plane

321
00:10:48,000 --> 00:10:49,120
elements but we also see

322
00:10:49,120 --> 00:10:52,240
four of those logic bomb passwords and

323
00:10:52,240 --> 00:10:55,440
um and so let's go and look at the um

324
00:10:55,440 --> 00:10:56,800
let's go and look at the logic bomb

325
00:10:56,800 --> 00:10:59,519
passwords kind of status and definition

326
00:10:59,519 --> 00:11:01,600
to find out what their secrets are so

327
00:11:01,600 --> 00:11:02,800
that we can go and

328
00:11:02,800 --> 00:11:06,160
request those secrets so we'll take

329
00:11:06,160 --> 00:11:09,360
our we'll take our coop control

330
00:11:09,360 --> 00:11:12,079
um continuing to use the kublet's cert

331
00:11:12,079 --> 00:11:13,519
we'll get the pog definition

332
00:11:13,519 --> 00:11:16,079
for this specific pod we'll ask for it

333
00:11:16,079 --> 00:11:17,200
in in uh

334
00:11:17,200 --> 00:11:20,079
yaml um we forgot to enter the namespace

335
00:11:20,079 --> 00:11:22,079
we have that namespace in and we see

336
00:11:22,079 --> 00:11:24,160
there's a volume called logic bomb

337
00:11:24,160 --> 00:11:26,000
shutdown it's provided

338
00:11:26,000 --> 00:11:28,560
its contents come straight from the

339
00:11:28,560 --> 00:11:30,040
secret called

340
00:11:30,040 --> 00:11:32,160
logic.bomb.shutdown and they're passed

341
00:11:32,160 --> 00:11:32,880
in

342
00:11:32,880 --> 00:11:35,519
and placed on the file system in the

343
00:11:35,519 --> 00:11:36,880
etsy directory

344
00:11:36,880 --> 00:11:39,279
um so what we're going to do is

345
00:11:39,279 --> 00:11:40,959
basically ask for that

346
00:11:40,959 --> 00:11:44,640
ask for the copy of that secret um

347
00:11:44,640 --> 00:11:48,480
and so if we um

348
00:11:48,480 --> 00:11:50,480
so just one more time noting that that's

349
00:11:50,480 --> 00:11:51,920
this that we're going for secrets that

350
00:11:51,920 --> 00:11:52,959
are only held by

351
00:11:52,959 --> 00:11:55,120
pods that are running on this node

352
00:11:55,120 --> 00:11:56,240
that's that's really

353
00:11:56,240 --> 00:11:59,200
critical to understand we're going to uh

354
00:11:59,200 --> 00:12:00,320
do our coupe config

355
00:12:00,320 --> 00:12:02,320
ask for the secret you know the first

356
00:12:02,320 --> 00:12:03,680
one just gives us the metadata from the

357
00:12:03,680 --> 00:12:05,200
secret so if we ask for an output in

358
00:12:05,200 --> 00:12:07,760
json or yaml we'll get the actual secret

359
00:12:07,760 --> 00:12:08,639
and so

360
00:12:08,639 --> 00:12:10,880
we ask for json realizing we don't have

361
00:12:10,880 --> 00:12:13,120
jq in here we asked for an enamel

362
00:12:13,120 --> 00:12:15,440
and then we're going to grab out part

363
00:12:15,440 --> 00:12:16,240
one

364
00:12:16,240 --> 00:12:19,120
um so we can just get that uh the data

365
00:12:19,120 --> 00:12:19,680
and it's

366
00:12:19,680 --> 00:12:22,399
uh it is base 64 encoded so we're going

367
00:12:22,399 --> 00:12:25,360
to parse that throw it into awk

368
00:12:25,360 --> 00:12:27,360
um try to toss it in the base64 but

369
00:12:27,360 --> 00:12:28,800
there's a space so we'll just we'll

370
00:12:28,800 --> 00:12:30,320
change the way we're using awk

371
00:12:30,320 --> 00:12:32,720
and we get it and here's our password it

372
00:12:32,720 --> 00:12:35,200
says first password is a line from real

373
00:12:35,200 --> 00:12:36,800
genius the kent says

374
00:12:36,800 --> 00:12:39,279
you will rue the day um but it says

375
00:12:39,279 --> 00:12:40,800
you'll need a second password got you

376
00:12:40,800 --> 00:12:43,120
got one flag you got one more flag to go

377
00:12:43,120 --> 00:12:45,040
and that's going to be found in a

378
00:12:45,040 --> 00:12:47,360
storage bucket in a gcs storage bucket

379
00:12:47,360 --> 00:12:49,200
so we know our next target

380
00:12:49,200 --> 00:12:50,959
is to get that storage bucket access so

381
00:12:50,959 --> 00:12:53,680
it's time to it's time to try harder

382
00:12:53,680 --> 00:12:58,079
on that on uh on the uh on the gcs

383
00:12:58,079 --> 00:13:01,200
um on the gcs attack path

384
00:13:01,200 --> 00:13:03,920
so let's go and try something else so

385
00:13:03,920 --> 00:13:05,839
kent goes and basically says okay i'm

386
00:13:05,839 --> 00:13:07,040
going to try a different kind of thing

387
00:13:07,040 --> 00:13:08,399
instead of privileged now i'm going to

388
00:13:08,399 --> 00:13:10,000
make my pods start with

389
00:13:10,000 --> 00:13:13,200
with the host network set to true which

390
00:13:13,200 --> 00:13:13,600
means

391
00:13:13,600 --> 00:13:15,200
it's going to instead of starting its

392
00:13:15,200 --> 00:13:16,959
own network namespace

393
00:13:16,959 --> 00:13:18,720
it's going to use then it's going to use

394
00:13:18,720 --> 00:13:20,560
the network namespace

395
00:13:20,560 --> 00:13:22,959
belonging to the virtual machine it's on

396
00:13:22,959 --> 00:13:23,760
which

397
00:13:23,760 --> 00:13:26,880
can evade workload identity and

398
00:13:26,880 --> 00:13:30,240
so um we're going to stage that um

399
00:13:30,240 --> 00:13:32,560
pod kent's going to exec into that pod

400
00:13:32,560 --> 00:13:33,760
and now he's going to

401
00:13:33,760 --> 00:13:36,320
curl the metadata api we see a different

402
00:13:36,320 --> 00:13:37,040
service count

403
00:13:37,040 --> 00:13:38,800
this one looks like what we're used to

404
00:13:38,800 --> 00:13:40,399
when metadata when

405
00:13:40,399 --> 00:13:42,720
when workload identity isn't in play so

406
00:13:42,720 --> 00:13:44,800
we get asks for an access token

407
00:13:44,800 --> 00:13:46,639
um i'm going to try to parse that out

408
00:13:46,639 --> 00:13:48,000
with jq

409
00:13:48,000 --> 00:13:50,800
um realize jq is not there so add jq

410
00:13:50,800 --> 00:13:51,279
real quick

411
00:13:51,279 --> 00:13:52,560
since this is recorded i was able to

412
00:13:52,560 --> 00:13:55,199
skip past that and so we've got the

413
00:13:55,199 --> 00:13:56,560
access token

414
00:13:56,560 --> 00:13:59,760
um we're parsing out with jq and ripping

415
00:13:59,760 --> 00:14:00,959
off the

416
00:14:00,959 --> 00:14:04,000
double quotes and um

417
00:14:04,000 --> 00:14:06,399
that gives us and that gives us what we

418
00:14:06,399 --> 00:14:07,360
need so now we're going to

419
00:14:07,360 --> 00:14:10,399
set gcp token to that and now we're

420
00:14:10,399 --> 00:14:12,880
going to construct our curl request

421
00:14:12,880 --> 00:14:16,399
to list buckets against that you know

422
00:14:16,399 --> 00:14:17,600
against that uh

423
00:14:17,600 --> 00:14:20,320
bucket storage api using a bearer token

424
00:14:20,320 --> 00:14:20,720
now

425
00:14:20,720 --> 00:14:22,959
the first time i write this i use token

426
00:14:22,959 --> 00:14:24,880
instead of gcp tokens so we don't use

427
00:14:24,880 --> 00:14:26,560
the right bearer token and we're not

428
00:14:26,560 --> 00:14:30,240
authorized but uh i

429
00:14:30,240 --> 00:14:33,360
or kent figures this out and uh

430
00:14:33,360 --> 00:14:35,600
uses the right bearer token and here we

431
00:14:35,600 --> 00:14:36,720
go we've got

432
00:14:36,720 --> 00:14:39,120
a list of storage buckets there's only

433
00:14:39,120 --> 00:14:41,120
one there's only one bucket it's called

434
00:14:41,120 --> 00:14:43,040
tooth fairy second password uh

435
00:14:43,040 --> 00:14:45,360
that's a pretty good name uh that's a

436
00:14:45,360 --> 00:14:47,279
pretty i have a lot of hope there

437
00:14:47,279 --> 00:14:50,720
and uh and now we're gonna do b

438
00:14:50,720 --> 00:14:52,959
then the bucket name then o for objects

439
00:14:52,959 --> 00:14:54,480
give me a list of objects

440
00:14:54,480 --> 00:14:57,120
and there's only one object and that one

441
00:14:57,120 --> 00:14:58,720
object is

442
00:14:58,720 --> 00:15:02,160
uh a file called secondpassword.text

443
00:15:02,160 --> 00:15:04,240
and so we're going to take you can take

444
00:15:04,240 --> 00:15:05,760
this nice little media link

445
00:15:05,760 --> 00:15:08,800
and paste it right in so after our you

446
00:15:08,800 --> 00:15:09,120
know

447
00:15:09,120 --> 00:15:11,920
after our headers we can throw in that

448
00:15:11,920 --> 00:15:12,800
media link

449
00:15:12,800 --> 00:15:15,199
and we're gonna get the uh renew the

450
00:15:15,199 --> 00:15:17,279
file and we got the contents that file

451
00:15:17,279 --> 00:15:19,040
the second password which is

452
00:15:19,040 --> 00:15:21,120
in the immortal words of socrates i

453
00:15:21,120 --> 00:15:22,800
drank what

454
00:15:22,800 --> 00:15:24,720
so hey thanks for watching if you

455
00:15:24,720 --> 00:15:26,560
enjoyed this please dig into kubernetes

456
00:15:26,560 --> 00:15:28,320
and cloud native security some more

457
00:15:28,320 --> 00:15:30,160
i'd love to talk kubernetes with you

458
00:15:30,160 --> 00:15:31,759
here in the north pole or even

459
00:15:31,759 --> 00:15:33,360
collaborate with you on in guardian's

460
00:15:33,360 --> 00:15:34,959
open source kubernetes penetration

461
00:15:34,959 --> 00:15:36,720
testing tool paradise

462
00:15:36,720 --> 00:15:39,040
um also kubernetes is cool in that there

463
00:15:39,040 --> 00:15:40,320
are a ton of people who are not just

464
00:15:40,320 --> 00:15:41,839
doing great work but they're also eager

465
00:15:41,839 --> 00:15:42,959
to share with others

466
00:15:42,959 --> 00:15:45,279
and help people get involved i'd

467
00:15:45,279 --> 00:15:47,199
recommend following a number of notable

468
00:15:47,199 --> 00:15:49,040
kubernetes security folks work

469
00:15:49,040 --> 00:15:50,800
and i've listed their twitter handles

470
00:15:50,800 --> 00:15:52,880
here but go looking also for their

471
00:15:52,880 --> 00:15:54,720
talks their blog posts their books their

472
00:15:54,720 --> 00:15:56,800
tools um

473
00:15:56,800 --> 00:15:58,800
uh by the way the kubernetes project has

474
00:15:58,800 --> 00:16:00,160
a new special interest group sig

475
00:16:00,160 --> 00:16:01,680
security and it's a really welcoming

476
00:16:01,680 --> 00:16:02,240
community

477
00:16:02,240 --> 00:16:05,199
looking for more hackers so thanks a lot

478
00:16:05,199 --> 00:16:06,480
i'll see you around kringlecon in the

479
00:16:06,480 --> 00:16:14,160
holiday hack challenge bye-bye

