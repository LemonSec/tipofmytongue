1
00:00:02,320 --> 00:00:04,319
hello and welcome to kringlecon

2
00:00:04,319 --> 00:00:07,200
3. in this talk i'm going to tell you

3
00:00:07,200 --> 00:00:10,160
some random facts about something called

4
00:00:10,160 --> 00:00:13,519
a mersenne twister but first of all

5
00:00:13,519 --> 00:00:16,000
let me introduce myself hi i'm tom

6
00:00:16,000 --> 00:00:16,800
liston

7
00:00:16,800 --> 00:00:18,800
i'm new this year to counter hack

8
00:00:18,800 --> 00:00:20,320
challenges

9
00:00:20,320 --> 00:00:22,400
but i'm not at all new to security in

10
00:00:22,400 --> 00:00:24,000
fact i'm i'm kind of old i've been

11
00:00:24,000 --> 00:00:25,760
around for quite a while and i've done a

12
00:00:25,760 --> 00:00:27,359
number of things in the field of

13
00:00:27,359 --> 00:00:29,359
security

14
00:00:29,359 --> 00:00:31,760
you're listening to me today because you

15
00:00:31,760 --> 00:00:32,880
decided to click

16
00:00:32,880 --> 00:00:36,079
play on this video everybody makes bad

17
00:00:36,079 --> 00:00:37,680
choices every now and again so

18
00:00:37,680 --> 00:00:39,840
so don't feel too bad about it but

19
00:00:39,840 --> 00:00:40,800
realize that

20
00:00:40,800 --> 00:00:44,079
it's on you

21
00:00:44,079 --> 00:00:46,000
let's talk a little bit begin all of

22
00:00:46,000 --> 00:00:48,000
this let's talk a little bit about

23
00:00:48,000 --> 00:00:52,399
uh randomness in software

24
00:00:52,399 --> 00:00:54,239
anybody who's ever used a computer for

25
00:00:54,239 --> 00:00:56,079
any period of time has had

26
00:00:56,079 --> 00:00:58,559
at some point the computer freak out and

27
00:00:58,559 --> 00:01:00,320
start doing weird things

28
00:01:00,320 --> 00:01:03,600
on them seemingly random things

29
00:01:03,600 --> 00:01:05,840
and now while that may have happened

30
00:01:05,840 --> 00:01:07,040
it's not because of

31
00:01:07,040 --> 00:01:10,080
software software is not

32
00:01:10,080 --> 00:01:13,439
random software is by its very nature

33
00:01:13,439 --> 00:01:16,880
incredibly deterministic it does exactly

34
00:01:16,880 --> 00:01:19,680
what it's programmed to do

35
00:01:19,680 --> 00:01:22,960
so what we find is that generating true

36
00:01:22,960 --> 00:01:25,360
randomness in software is actually

37
00:01:25,360 --> 00:01:28,320
incredibly incredibly hard

38
00:01:28,320 --> 00:01:31,920
while you can do some things with

39
00:01:31,920 --> 00:01:34,240
hardware that will allow you to

40
00:01:34,240 --> 00:01:37,759
access a source of true randomness

41
00:01:37,759 --> 00:01:40,000
most operating systems and most

42
00:01:40,000 --> 00:01:41,200
computers

43
00:01:41,200 --> 00:01:44,799
probably don't have a good way to access

44
00:01:44,799 --> 00:01:48,799
a true source of hardware randomness

45
00:01:48,799 --> 00:01:51,520
and so when developers are creating

46
00:01:51,520 --> 00:01:53,360
programming languages one of the things

47
00:01:53,360 --> 00:01:54,000
that they try

48
00:01:54,000 --> 00:01:57,040
to do is they try to be very os or very

49
00:01:57,040 --> 00:01:59,600
system agnostic so they don't really

50
00:01:59,600 --> 00:02:00,159
have any

51
00:02:00,159 --> 00:02:03,680
sort of good cross-platform means

52
00:02:03,680 --> 00:02:05,439
by which they can generate true

53
00:02:05,439 --> 00:02:06,799
randomness or

54
00:02:06,799 --> 00:02:09,119
access hardware that would give them

55
00:02:09,119 --> 00:02:11,760
access to true randomness

56
00:02:11,760 --> 00:02:14,800
so most software languages most

57
00:02:14,800 --> 00:02:16,640
programming languages

58
00:02:16,640 --> 00:02:19,520
have some sort of pseudo-random number

59
00:02:19,520 --> 00:02:20,640
generator

60
00:02:20,640 --> 00:02:22,959
well what is a pseudo-random number

61
00:02:22,959 --> 00:02:24,319
generator

62
00:02:24,319 --> 00:02:26,080
a pseudo-random number generator is

63
00:02:26,080 --> 00:02:28,400
pretty much exactly what it sounds like

64
00:02:28,400 --> 00:02:30,959
it generates numbers that appear to be

65
00:02:30,959 --> 00:02:32,000
random

66
00:02:32,000 --> 00:02:34,720
but that actually are very deterministic

67
00:02:34,720 --> 00:02:35,760
in nature

68
00:02:35,760 --> 00:02:37,760
and that sounds like a pretty perfect

69
00:02:37,760 --> 00:02:40,560
match for software which as i said

70
00:02:40,560 --> 00:02:42,640
is in and of itself pretty much

71
00:02:42,640 --> 00:02:44,640
deterministic

72
00:02:44,640 --> 00:02:46,720
the output of a pseudo-random number

73
00:02:46,720 --> 00:02:47,760
generator is

74
00:02:47,760 --> 00:02:51,040
generally determined by an initial value

75
00:02:51,040 --> 00:02:54,000
oftentimes called a seed and that you

76
00:02:54,000 --> 00:02:56,560
you can generate that seed value

77
00:02:56,560 --> 00:02:58,879
itself somewhat randomly by you know

78
00:02:58,879 --> 00:03:00,800
oftentimes people will use the current

79
00:03:00,800 --> 00:03:02,319
time of day or the

80
00:03:02,319 --> 00:03:04,560
number of milliseconds since the machine

81
00:03:04,560 --> 00:03:06,000
started

82
00:03:06,000 --> 00:03:09,680
but but here's the thing no matter how

83
00:03:09,680 --> 00:03:12,560
randomly you may generate that seed

84
00:03:12,560 --> 00:03:13,120
value

85
00:03:13,120 --> 00:03:16,560
if you use the same seed value again

86
00:03:16,560 --> 00:03:19,840
you're going to get the same string of

87
00:03:19,840 --> 00:03:20,959
random numbers

88
00:03:20,959 --> 00:03:22,720
out of your pseudo-random number

89
00:03:22,720 --> 00:03:24,799
generator remember

90
00:03:24,799 --> 00:03:28,400
pseudo random it's an algorithm

91
00:03:28,400 --> 00:03:33,840
same input same output

92
00:03:33,920 --> 00:03:36,560
most of the time statisticians and

93
00:03:36,560 --> 00:03:38,799
people who care about this kind of stuff

94
00:03:38,799 --> 00:03:40,560
will not talk about what makes a

95
00:03:40,560 --> 00:03:43,599
pseudo-random number generator good

96
00:03:43,599 --> 00:03:46,080
they'll talk about the kinds of problems

97
00:03:46,080 --> 00:03:48,000
that makes a pseudo net random number

98
00:03:48,000 --> 00:03:48,799
generator

99
00:03:48,799 --> 00:03:51,680
bad and one of the biggest ones is

100
00:03:51,680 --> 00:03:53,519
something called the period of the

101
00:03:53,519 --> 00:03:55,760
pseudo random number generator

102
00:03:55,760 --> 00:03:57,599
that's the amount of numbers that the

103
00:03:57,599 --> 00:03:59,599
pseudo random number generator

104
00:03:59,599 --> 00:04:03,519
algorithm can generate before it begins

105
00:04:03,519 --> 00:04:05,920
generating the same sequence over and

106
00:04:05,920 --> 00:04:08,239
over again

107
00:04:08,239 --> 00:04:10,480
some pseudo-random number generation

108
00:04:10,480 --> 00:04:11,680
algorithms

109
00:04:11,680 --> 00:04:14,080
have a period that's dependent on the

110
00:04:14,080 --> 00:04:16,560
seed and that can be really really bad

111
00:04:16,560 --> 00:04:19,358
because if you pick the wrong seed value

112
00:04:19,358 --> 00:04:21,440
either accidentally or if you

113
00:04:21,440 --> 00:04:23,040
happen to choose one of them because

114
00:04:23,040 --> 00:04:24,479
that's the number of

115
00:04:24,479 --> 00:04:26,479
milliseconds since the machine started

116
00:04:26,479 --> 00:04:28,080
off you can end up with some

117
00:04:28,080 --> 00:04:31,120
really bad

118
00:04:31,199 --> 00:04:33,759
random numbers being generated bad from

119
00:04:33,759 --> 00:04:34,400
the

120
00:04:34,400 --> 00:04:37,280
perspective of being statistically bad

121
00:04:37,280 --> 00:04:39,120
now there's a ton of other tests that

122
00:04:39,120 --> 00:04:40,560
get done

123
00:04:40,560 --> 00:04:42,160
when they're trying to look at the

124
00:04:42,160 --> 00:04:43,919
statistic statistical

125
00:04:43,919 --> 00:04:46,720
soundness of a pseudo-random number

126
00:04:46,720 --> 00:04:48,639
generator algorithm

127
00:04:48,639 --> 00:04:52,000
uh you want your ou uh the the

128
00:04:52,000 --> 00:04:54,880
numbers that are generated to be uh

129
00:04:54,880 --> 00:04:56,960
distributed uniformly that means that

130
00:04:56,960 --> 00:04:57,600
you want

131
00:04:57,600 --> 00:04:59,680
this you want big numbers and small

132
00:04:59,680 --> 00:05:01,360
numbers all mixed up if you're

133
00:05:01,360 --> 00:05:03,039
if you're just if you're creating

134
00:05:03,039 --> 00:05:04,800
numbers within a range

135
00:05:04,800 --> 00:05:08,479
you don't want uh successive values

136
00:05:08,479 --> 00:05:11,759
to be correlated in any in any way so

137
00:05:11,759 --> 00:05:13,759
meaning you don't want like if it

138
00:05:13,759 --> 00:05:15,520
generates the number seven

139
00:05:15,520 --> 00:05:17,520
you don't want it to always after that

140
00:05:17,520 --> 00:05:18,720
generate the number

141
00:05:18,720 --> 00:05:21,360
12 or you don't want it to always

142
00:05:21,360 --> 00:05:22,160
generate

143
00:05:22,160 --> 00:05:24,000
a small number then a big number then a

144
00:05:24,000 --> 00:05:26,000
small number than a big number

145
00:05:26,000 --> 00:05:28,560
all of these things play into what makes

146
00:05:28,560 --> 00:05:30,560
a pseudo-random number generator good

147
00:05:30,560 --> 00:05:32,160
and there's a ton of other statistical

148
00:05:32,160 --> 00:05:33,199
tests this is

149
00:05:33,199 --> 00:05:35,280
not something that i want to get into i

150
00:05:35,280 --> 00:05:37,360
hated statistics in college

151
00:05:37,360 --> 00:05:39,600
i'm sure you did too if you're a

152
00:05:39,600 --> 00:05:43,039
statistician i apologize but hey

153
00:05:43,039 --> 00:05:46,000
we're gonna move on

154
00:05:46,240 --> 00:05:48,800
so let's talk about the current state of

155
00:05:48,800 --> 00:05:50,960
pseudorandom number generators first of

156
00:05:50,960 --> 00:05:51,440
all

157
00:05:51,440 --> 00:05:53,759
there are a ton of different algorithms

158
00:05:53,759 --> 00:05:54,960
that can be used

159
00:05:54,960 --> 00:05:57,840
as a pseudo-random number generator uh

160
00:05:57,840 --> 00:05:59,680
up until 1997

161
00:05:59,680 --> 00:06:01,120
most of the pseudo-random number

162
00:06:01,120 --> 00:06:03,280
generators uh that were

163
00:06:03,280 --> 00:06:06,080
in in programming language languages

164
00:06:06,080 --> 00:06:06,880
were

165
00:06:06,880 --> 00:06:10,000
of a type known as a linear congruential

166
00:06:10,000 --> 00:06:12,000
generator

167
00:06:12,000 --> 00:06:14,560
those were horribly bad from a

168
00:06:14,560 --> 00:06:16,880
statistical perspective

169
00:06:16,880 --> 00:06:20,319
and in fact they were so bad that

170
00:06:20,319 --> 00:06:23,919
they really couldn't be used uh when

171
00:06:23,919 --> 00:06:25,919
you were doing some kind of heavy duty

172
00:06:25,919 --> 00:06:27,680
research that required

173
00:06:27,680 --> 00:06:30,800
uh random numbers uh

174
00:06:30,800 --> 00:06:34,160
to be used in in your research

175
00:06:34,160 --> 00:06:38,160
in 1997 makoto matsumoto

176
00:06:38,160 --> 00:06:41,840
and takuji nishimura developed a new

177
00:06:41,840 --> 00:06:42,720
class

178
00:06:42,720 --> 00:06:44,720
of pseudorandom number generation

179
00:06:44,720 --> 00:06:46,880
algorithm called the mercen

180
00:06:46,880 --> 00:06:48,800
twister we're going to talk a little bit

181
00:06:48,800 --> 00:06:50,720
about where it got that name from in a

182
00:06:50,720 --> 00:06:51,440
bit

183
00:06:51,440 --> 00:06:53,680
but understand that this new type of

184
00:06:53,680 --> 00:06:56,720
pseudo-random number generator

185
00:06:56,720 --> 00:07:00,840
first of all is now the most widely used

186
00:07:00,840 --> 00:07:02,080
implementation

187
00:07:02,080 --> 00:07:04,560
of pseudorandom number generators in

188
00:07:04,560 --> 00:07:07,120
software and in fact there's a specific

189
00:07:07,120 --> 00:07:11,280
version of that algorithm called mt19937

190
00:07:11,280 --> 00:07:15,440
that is absolutely the most widely used

191
00:07:15,440 --> 00:07:18,479
version of that mersenne twister

192
00:07:18,479 --> 00:07:20,960
algorithm

193
00:07:20,960 --> 00:07:23,599
what's nice about the mercen twister is

194
00:07:23,599 --> 00:07:25,919
that it avoids

195
00:07:25,919 --> 00:07:28,800
all of those statistical pitfalls that

196
00:07:28,800 --> 00:07:30,000
keep statisticians

197
00:07:30,000 --> 00:07:32,000
up at night it has a first of all it has

198
00:07:32,000 --> 00:07:34,160
a huge period

199
00:07:34,160 --> 00:07:36,800
the name mercen twister the mercen

200
00:07:36,800 --> 00:07:38,960
portion of that comes from the fact

201
00:07:38,960 --> 00:07:42,000
that the um period

202
00:07:42,000 --> 00:07:44,080
of the pseudorandom number generator can

203
00:07:44,080 --> 00:07:46,080
actually be set

204
00:07:46,080 --> 00:07:49,199
and it's set based on a class

205
00:07:49,199 --> 00:07:52,960
of prime numbers known as mercen primes

206
00:07:52,960 --> 00:07:56,840
so for example the period for the

207
00:07:56,840 --> 00:07:58,400
mt1993c

208
00:07:58,400 --> 00:08:02,319
mercen twister is based on the prime

209
00:08:02,319 --> 00:08:07,199
number that is 2 to the 19937

210
00:08:07,199 --> 00:08:10,800
minus 1. now let's just take a look

211
00:08:10,800 --> 00:08:13,840
here is that number

212
00:08:14,639 --> 00:08:17,680
it's a huge huge period just for

213
00:08:17,680 --> 00:08:18,639
comparison

214
00:08:18,639 --> 00:08:20,960
that's a number that is about four times

215
00:08:20,960 --> 00:08:21,759
0.3

216
00:08:21,759 --> 00:08:26,800
times 10 to the 5921st power

217
00:08:26,800 --> 00:08:30,160
times the number of atoms

218
00:08:30,160 --> 00:08:33,039
in the known observable universe that is

219
00:08:33,039 --> 00:08:33,440
a

220
00:08:33,440 --> 00:08:36,640
big big number and it gives

221
00:08:36,640 --> 00:08:41,679
the mercen twister an enormous period

222
00:08:41,679 --> 00:08:44,080
that's the amount of numbers that it can

223
00:08:44,080 --> 00:08:44,800
generate

224
00:08:44,800 --> 00:08:48,080
before it will begin generating the same

225
00:08:48,080 --> 00:08:48,800
sequence

226
00:08:48,800 --> 00:08:51,760
again so in addition to having a huge

227
00:08:51,760 --> 00:08:52,720
period

228
00:08:52,720 --> 00:08:55,279
the mercen twister also avoids all of

229
00:08:55,279 --> 00:08:56,080
those other

230
00:08:56,080 --> 00:08:58,560
or at least most all of those other

231
00:08:58,560 --> 00:09:00,320
statistical pitfalls it

232
00:09:00,320 --> 00:09:04,080
passes almost every test for statistical

233
00:09:04,080 --> 00:09:05,360
randomness

234
00:09:05,360 --> 00:09:07,120
and what's really really nice about the

235
00:09:07,120 --> 00:09:08,959
mercen twister is

236
00:09:08,959 --> 00:09:11,600
it's actually relatively straightforward

237
00:09:11,600 --> 00:09:13,680
to be implemented in software and it

238
00:09:13,680 --> 00:09:14,240
works

239
00:09:14,240 --> 00:09:17,040
relatively quickly probably the most

240
00:09:17,040 --> 00:09:19,200
important point though

241
00:09:19,200 --> 00:09:21,440
for those in the open source software

242
00:09:21,440 --> 00:09:24,920
community is that the mercen twister

243
00:09:24,920 --> 00:09:26,800
mt19937

244
00:09:26,800 --> 00:09:30,080
is not encumbered by any kind of patent

245
00:09:30,080 --> 00:09:32,880
and because of that it's been adopted in

246
00:09:32,880 --> 00:09:33,839
dozens and

247
00:09:33,839 --> 00:09:35,920
dozens of different open and closed

248
00:09:35,920 --> 00:09:37,279
source projects

249
00:09:37,279 --> 00:09:38,880
some of the ones you might be familiar

250
00:09:38,880 --> 00:09:41,040
with are things like

251
00:09:41,040 --> 00:09:43,360
the language python the random number

252
00:09:43,360 --> 00:09:44,399
generation

253
00:09:44,399 --> 00:09:47,360
within the language python is based on

254
00:09:47,360 --> 00:09:50,080
the mt19937

255
00:09:50,080 --> 00:09:52,160
mercen twister pseudo random number

256
00:09:52,160 --> 00:09:54,320
generator as is the pseudorandom number

257
00:09:54,320 --> 00:09:56,000
generator in pascal

258
00:09:56,000 --> 00:09:59,200
php ruby sage math

259
00:09:59,200 --> 00:10:03,200
excel dozens and dozens of other

260
00:10:03,200 --> 00:10:06,240
software projects use this pseudo-random

261
00:10:06,240 --> 00:10:09,200
number generator

262
00:10:09,760 --> 00:10:13,360
the mt19937 pseudo-random number

263
00:10:13,360 --> 00:10:15,200
generator as i said

264
00:10:15,200 --> 00:10:18,240
is considered to be statistically

265
00:10:18,240 --> 00:10:20,880
sound when it comes to the generation of

266
00:10:20,880 --> 00:10:22,720
pseudorandom numbers

267
00:10:22,720 --> 00:10:26,800
but don't mistake statistically sound

268
00:10:26,800 --> 00:10:30,079
for secure and let's talk about why that

269
00:10:30,079 --> 00:10:30,640
is

270
00:10:30,640 --> 00:10:33,600
what it means to be secure is very

271
00:10:33,600 --> 00:10:35,200
different from what it means to be

272
00:10:35,200 --> 00:10:36,560
statistically

273
00:10:36,560 --> 00:10:38,640
sound in the generation of random

274
00:10:38,640 --> 00:10:40,079
numbers

275
00:10:40,079 --> 00:10:43,680
what if i told you that simply by having

276
00:10:43,680 --> 00:10:47,680
access to a few hundred recent values

277
00:10:47,680 --> 00:10:49,680
from a pseudo-random number generator in

278
00:10:49,680 --> 00:10:51,040
a language like

279
00:10:51,040 --> 00:10:54,959
python you could then

280
00:10:54,959 --> 00:10:59,200
predict all of the upcoming values

281
00:10:59,200 --> 00:11:03,519
with 100 percent accuracy

282
00:11:03,920 --> 00:11:06,240
that sounds crazy but let's talk about

283
00:11:06,240 --> 00:11:08,160
how it happens

284
00:11:08,160 --> 00:11:11,680
the 32-bit version of the mt19937

285
00:11:11,680 --> 00:11:13,600
pseudorandom number generator keeps

286
00:11:13,600 --> 00:11:14,000
track

287
00:11:14,000 --> 00:11:17,120
of its current state with an array

288
00:11:17,120 --> 00:11:20,160
of 624

289
00:11:20,160 --> 00:11:23,120
32-bit integers that's how it keeps

290
00:11:23,120 --> 00:11:23,680
track of

291
00:11:23,680 --> 00:11:27,600
where it is and and what it's going to

292
00:11:27,600 --> 00:11:30,160
be outputting

293
00:11:30,160 --> 00:11:34,000
it goes through that list of those 624

294
00:11:34,000 --> 00:11:35,360
32-bit integers

295
00:11:35,360 --> 00:11:38,399
pulls them out one by one

296
00:11:38,399 --> 00:11:40,880
and then hands them back to the user as

297
00:11:40,880 --> 00:11:43,279
the pseudo-random number

298
00:11:43,279 --> 00:11:44,959
after it's been pushed through what's

299
00:11:44,959 --> 00:11:46,800
called a tempering function

300
00:11:46,800 --> 00:11:49,839
and this tempering function is designed

301
00:11:49,839 --> 00:11:53,279
to make the output more statistically

302
00:11:53,279 --> 00:11:55,680
well distributed and this is part of the

303
00:11:55,680 --> 00:11:57,680
algorithm that was developed

304
00:11:57,680 --> 00:12:00,880
back in 1997

305
00:12:00,880 --> 00:12:03,680
the really big important thing here is

306
00:12:03,680 --> 00:12:05,519
this

307
00:12:05,519 --> 00:12:07,440
everything that that tempering function

308
00:12:07,440 --> 00:12:08,639
does

309
00:12:08,639 --> 00:12:12,320
is reversible and we're going to talk in

310
00:12:12,320 --> 00:12:12,959
a minute about

311
00:12:12,959 --> 00:12:16,000
why that's very very important

312
00:12:16,000 --> 00:12:17,959
so once it's gone through all of those

313
00:12:17,959 --> 00:12:19,519
624 numbers

314
00:12:19,519 --> 00:12:21,440
it's pushed them all out to the user

315
00:12:21,440 --> 00:12:23,519
through that tempering function

316
00:12:23,519 --> 00:12:26,000
it then uses a different function called

317
00:12:26,000 --> 00:12:28,160
the twister function which is actually a

318
00:12:28,160 --> 00:12:32,399
linear feedback shift register function

319
00:12:32,399 --> 00:12:35,040
and it goes back to then pulling numbers

320
00:12:35,040 --> 00:12:36,399
off of that array again

321
00:12:36,399 --> 00:12:38,399
pushing them out through that tempering

322
00:12:38,399 --> 00:12:41,839
function out to the user

323
00:12:44,240 --> 00:12:47,200
now i said that it was important that

324
00:12:47,200 --> 00:12:48,880
that tempering function was

325
00:12:48,880 --> 00:12:52,399
reversible and here's why

326
00:12:52,399 --> 00:12:54,959
if the tempering function is reversible

327
00:12:54,959 --> 00:12:56,440
we have the potential to

328
00:12:56,440 --> 00:13:01,519
recreate that state

329
00:13:01,519 --> 00:13:05,360
array within the mt19937 pseudorandom

330
00:13:05,360 --> 00:13:06,480
number generator

331
00:13:06,480 --> 00:13:09,920
simply by taking the last 624 random

332
00:13:09,920 --> 00:13:11,519
values that we're given

333
00:13:11,519 --> 00:13:12,959
running them through a function that

334
00:13:12,959 --> 00:13:14,800
reverses the effect of that tempering

335
00:13:14,800 --> 00:13:16,399
function and then stuffing those

336
00:13:16,399 --> 00:13:18,800
untempered values back into an array of

337
00:13:18,800 --> 00:13:21,839
our own

338
00:13:22,639 --> 00:13:28,600
we can then use that array in our own

339
00:13:28,600 --> 00:13:31,680
mt19937 pseudorandom number generator

340
00:13:31,680 --> 00:13:32,560
and start

341
00:13:32,560 --> 00:13:35,839
generating random numbers using that

342
00:13:35,839 --> 00:13:38,399
and what we'll find is we're generating

343
00:13:38,399 --> 00:13:39,680
the same

344
00:13:39,680 --> 00:13:42,720
random numbers as the original

345
00:13:42,720 --> 00:13:44,880
random number generator we have in

346
00:13:44,880 --> 00:13:45,760
effect

347
00:13:45,760 --> 00:13:48,800
cloned the random number generator now i

348
00:13:48,800 --> 00:13:50,079
know what you're thinking

349
00:13:50,079 --> 00:13:52,399
we don't have to hit this at exactly the

350
00:13:52,399 --> 00:13:54,399
right time right before that twister

351
00:13:54,399 --> 00:13:56,639
function is being used

352
00:13:56,639 --> 00:13:59,120
the reason being is because that's a

353
00:13:59,120 --> 00:14:00,639
linear congruential shift

354
00:14:00,639 --> 00:14:03,519
register kind of function it actually

355
00:14:03,519 --> 00:14:04,079
works

356
00:14:04,079 --> 00:14:07,120
cyclically on this uh array

357
00:14:07,120 --> 00:14:09,199
and we don't have to hit it at right the

358
00:14:09,199 --> 00:14:10,959
right time just because of that

359
00:14:10,959 --> 00:14:12,480
you're gonna have to trust me because

360
00:14:12,480 --> 00:14:14,399
that that's the case because the the

361
00:14:14,399 --> 00:14:16,079
mathematics involved require

362
00:14:16,079 --> 00:14:18,480
a whole lot more time than i have time

363
00:14:18,480 --> 00:14:21,360
to explain here

364
00:14:22,320 --> 00:14:23,920
just so you can see how all of this

365
00:14:23,920 --> 00:14:25,839
works i've made some python code

366
00:14:25,839 --> 00:14:27,839
available to you it actually

367
00:14:27,839 --> 00:14:31,600
uses a created class

368
00:14:31,600 --> 00:14:34,880
for an mt19937 pseudorandom number

369
00:14:34,880 --> 00:14:36,240
generator to clone

370
00:14:36,240 --> 00:14:39,279
python's built-in random number

371
00:14:39,279 --> 00:14:41,440
generator and displays the content

372
00:14:41,440 --> 00:14:44,880
side by side on the screen for you

373
00:14:44,880 --> 00:14:47,120
i've given you the github repository for

374
00:14:47,120 --> 00:14:49,040
it it's on my github repository you can

375
00:14:49,040 --> 00:14:50,639
go and grab the code

376
00:14:50,639 --> 00:14:52,480
you can import it as a module and play

377
00:14:52,480 --> 00:14:54,480
around with this kind of stuff yourself

378
00:14:54,480 --> 00:14:58,480
or if you just run the code itself

379
00:14:58,480 --> 00:15:00,320
it'll actually do a demonstration

380
00:15:00,320 --> 00:15:02,639
showing you it cloning

381
00:15:02,639 --> 00:15:05,360
the uh the output of python's

382
00:15:05,360 --> 00:15:07,199
pseudo-random number generator the

383
00:15:07,199 --> 00:15:09,440
32-bit version

384
00:15:09,440 --> 00:15:11,360
if you want to use it on your own and

385
00:15:11,360 --> 00:15:14,320
and try to

386
00:15:14,320 --> 00:15:16,800
clone a random number generator in

387
00:15:16,800 --> 00:15:19,279
python or in other languages

388
00:15:19,279 --> 00:15:21,199
understand this what you're going to

389
00:15:21,199 --> 00:15:22,480
need to figure out is

390
00:15:22,480 --> 00:15:25,279
how does that language or that

391
00:15:25,279 --> 00:15:27,839
application

392
00:15:27,839 --> 00:15:30,320
create other types of values so yeah if

393
00:15:30,320 --> 00:15:31,040
it's if it's

394
00:15:31,040 --> 00:15:33,199
just giving you the 32-bit integers

395
00:15:33,199 --> 00:15:35,680
that's pretty easy to do

396
00:15:35,680 --> 00:15:38,079
but what if they're talking about floats

397
00:15:38,079 --> 00:15:39,600
how does the application

398
00:15:39,600 --> 00:15:43,360
use the output the 32-bit integer output

399
00:15:43,360 --> 00:15:46,480
from the mt-19937 pseudorandom number

400
00:15:46,480 --> 00:15:48,399
generator how does it use that to create

401
00:15:48,399 --> 00:15:49,360
those floats

402
00:15:49,360 --> 00:15:51,360
or how does it use it to create numbers

403
00:15:51,360 --> 00:15:53,600
that fall within a specific range or

404
00:15:53,600 --> 00:15:55,600
how does it use it to create 64-bit

405
00:15:55,600 --> 00:15:57,600
integers

406
00:15:57,600 --> 00:16:00,320
i will tell you this it takes a little

407
00:16:00,320 --> 00:16:00,800
bit of

408
00:16:00,800 --> 00:16:02,720
looking and a little bit of examination

409
00:16:02,720 --> 00:16:04,800
but you can usually figure out how it's

410
00:16:04,800 --> 00:16:07,120
how the the application is using those

411
00:16:07,120 --> 00:16:09,120
32-bit integers to create

412
00:16:09,120 --> 00:16:12,160
those other types of numbers remember

413
00:16:12,160 --> 00:16:13,600
most programs

414
00:16:13,600 --> 00:16:15,279
and especially most programming

415
00:16:15,279 --> 00:16:17,360
languages are very concerned

416
00:16:17,360 --> 00:16:20,399
with speed and so they're going to use

417
00:16:20,399 --> 00:16:23,759
potentially the simplest method possible

418
00:16:23,759 --> 00:16:26,639
to take for example 32-bit integers and

419
00:16:26,639 --> 00:16:27,040
make

420
00:16:27,040 --> 00:16:30,240
a 64-bit integer or take a 32-bit

421
00:16:30,240 --> 00:16:31,440
integer and turn it into a

422
00:16:31,440 --> 00:16:33,040
floating-point number

423
00:16:33,040 --> 00:16:36,399
so given that information giving

424
00:16:36,399 --> 00:16:38,880
given that kind of background method of

425
00:16:38,880 --> 00:16:40,320
thinking they're going to be doing

426
00:16:40,320 --> 00:16:42,160
something as quickly as possible you can

427
00:16:42,160 --> 00:16:43,839
usually figure out what it is

428
00:16:43,839 --> 00:16:46,240
they're doing so just to wrap things all

429
00:16:46,240 --> 00:16:47,519
up remember

430
00:16:47,519 --> 00:16:50,000
randomness in computing is a whole lot

431
00:16:50,000 --> 00:16:53,040
harder than you'd think

432
00:16:53,040 --> 00:16:55,279
remember statistically sound randomness

433
00:16:55,279 --> 00:16:58,399
isn't necessarily secure randomness

434
00:16:58,399 --> 00:17:00,959
the most widely used pseudorandom number

435
00:17:00,959 --> 00:17:02,079
generator

436
00:17:02,079 --> 00:17:05,679
out there today mt19937

437
00:17:05,679 --> 00:17:08,079
is actually while it's statistically

438
00:17:08,079 --> 00:17:08,720
sound it's

439
00:17:08,720 --> 00:17:12,160
horribly insecure it's used in dozens of

440
00:17:12,160 --> 00:17:14,079
applications and programming languages

441
00:17:14,079 --> 00:17:15,439
python ruby r

442
00:17:15,439 --> 00:17:18,959
php excel etc and it's something that is

443
00:17:18,959 --> 00:17:21,520
just begging to be exploited

444
00:17:21,520 --> 00:17:24,240
so if you have any questions you can

445
00:17:24,240 --> 00:17:25,760
email me at t-listing

446
00:17:25,760 --> 00:17:27,760
counterhack.com once again up on the

447
00:17:27,760 --> 00:17:29,200
screen you'll see

448
00:17:29,200 --> 00:17:30,960
the location on github where you can go

449
00:17:30,960 --> 00:17:32,559
and download

450
00:17:32,559 --> 00:17:35,919
the python code that demonstrates this

451
00:17:35,919 --> 00:17:38,720
uh also finally one one final thing is

452
00:17:38,720 --> 00:17:40,000
my my twitter handle

453
00:17:40,000 --> 00:17:43,679
is at t listin so um

454
00:17:43,679 --> 00:17:45,760
thank you very very much for attending

455
00:17:45,760 --> 00:17:47,039
the kringle con talk

456
00:17:47,039 --> 00:17:50,320
today and i hope you have a wonderful

457
00:17:50,320 --> 00:17:51,919
wonderful holiday season

458
00:17:51,919 --> 00:17:58,480
thank you

