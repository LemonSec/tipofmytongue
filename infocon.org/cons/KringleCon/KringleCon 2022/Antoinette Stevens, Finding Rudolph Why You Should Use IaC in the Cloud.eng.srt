1
00:00:03,780 --> 00:00:06,869
[Music]

2
00:00:08,058 --> 00:00:11,160
hi my name is Antoinette Stevens and I

3
00:00:11,160 --> 00:00:13,620
am a senior security engineer I'm so

4
00:00:13,620 --> 00:00:15,540
excited to be here at kringlecon to give

5
00:00:15,540 --> 00:00:18,420
you my talk finding Rudolph why you

6
00:00:18,420 --> 00:00:21,359
should use IAC in the cloud for those of

7
00:00:21,359 --> 00:00:23,939
you who might not know IAC stands for

8
00:00:23,939 --> 00:00:26,640
infrastructure as code I'm going to talk

9
00:00:26,640 --> 00:00:28,920
to you a little bit about why I think

10
00:00:28,920 --> 00:00:30,960
IAC is important for your security

11
00:00:30,960 --> 00:00:32,279
posture

12
00:00:32,279 --> 00:00:36,059
so what does it mean when I say normal

13
00:00:36,059 --> 00:00:37,920
it's one of the major challenges of

14
00:00:37,920 --> 00:00:40,140
detection and response finding what our

15
00:00:40,140 --> 00:00:42,660
normal is we want to know what normal or

16
00:00:42,660 --> 00:00:44,579
average Behavior looks like so that it's

17
00:00:44,579 --> 00:00:46,379
easier to write detection rules for the

18
00:00:46,379 --> 00:00:49,079
anomalies and outliers having a solid

19
00:00:49,079 --> 00:00:51,480
sense of normal means that we have fewer

20
00:00:51,480 --> 00:00:53,640
false positives and more value and

21
00:00:53,640 --> 00:00:56,039
confidence in our alerts when it comes

22
00:00:56,039 --> 00:00:58,079
to the cloud we can create a sense of

23
00:00:58,079 --> 00:01:00,059
normal through policy and configuration

24
00:01:00,059 --> 00:01:02,460
uniformity we probably all know the

25
00:01:02,460 --> 00:01:04,140
story of Rudolph the Red-Nosed Reindeer

26
00:01:04,140 --> 00:01:06,960
and like Rudolph we want to create an

27
00:01:06,960 --> 00:01:09,060
environment where any deviation from the

28
00:01:09,060 --> 00:01:11,460
normal is immediately obvious and easily

29
00:01:11,460 --> 00:01:14,179
identified

30
00:01:15,200 --> 00:01:18,180
for this talk I'm going to focus mainly

31
00:01:18,180 --> 00:01:20,880
on AWS and terraform I'll let you read

32
00:01:20,880 --> 00:01:22,619
the official description but if you've

33
00:01:22,619 --> 00:01:24,840
never heard of it you can think of AWS

34
00:01:24,840 --> 00:01:26,880
as a collection of services hosted in

35
00:01:26,880 --> 00:01:29,220
the cloud the services we'll be focusing

36
00:01:29,220 --> 00:01:31,560
on for our example are listed here but

37
00:01:31,560 --> 00:01:34,920
AWS has many more

38
00:01:34,920 --> 00:01:37,140
terraform is an infrastructure as code

39
00:01:37,140 --> 00:01:40,619
platform owned by hashicorp it is fairly

40
00:01:40,619 --> 00:01:42,780
platform agnostic and can support many

41
00:01:42,780 --> 00:01:44,460
different types of platforms and

42
00:01:44,460 --> 00:01:46,619
Technology

43
00:01:46,619 --> 00:01:48,540
to demonstrate the usefulness of

44
00:01:48,540 --> 00:01:50,759
terraform I will be walking you through

45
00:01:50,759 --> 00:01:53,040
an example which built infrastructure in

46
00:01:53,040 --> 00:01:55,619
AWS to implement the metric filter and

47
00:01:55,619 --> 00:01:59,040
alarms found in the CIS AWS foundation's

48
00:01:59,040 --> 00:02:01,740
Benchmark metric filters Define the

49
00:02:01,740 --> 00:02:04,320
terms and patterns to look for in log

50
00:02:04,320 --> 00:02:07,079
data as it is sent to cloudwatch logs

51
00:02:07,079 --> 00:02:09,840
the alarms are used to create alerts for

52
00:02:09,840 --> 00:02:11,819
matches of the patterns defined in the

53
00:02:11,819 --> 00:02:13,080
metric filter

54
00:02:13,080 --> 00:02:15,840
there are 14 metric filters and alarms

55
00:02:15,840 --> 00:02:18,959
that CIS recommends building these out

56
00:02:18,959 --> 00:02:21,300
by hand can be time consuming and

57
00:02:21,300 --> 00:02:22,400
tedious

58
00:02:22,400 --> 00:02:25,379
terraform would allow us to Define all

59
00:02:25,379 --> 00:02:27,959
of the infrastructure we need once and

60
00:02:27,959 --> 00:02:30,360
reuse parts of the configuration to

61
00:02:30,360 --> 00:02:32,220
create the metric filters and alarms

62
00:02:32,220 --> 00:02:34,260
needed

63
00:02:34,260 --> 00:02:36,840
before continuing there are some basic

64
00:02:36,840 --> 00:02:38,580
concepts about terraform that I'd like

65
00:02:38,580 --> 00:02:41,459
to explain terraform code is written in

66
00:02:41,459 --> 00:02:43,920
the hashicorp configuration language and

67
00:02:43,920 --> 00:02:45,959
is stored in files with the dot TF

68
00:02:45,959 --> 00:02:49,140
extension you can use a single TF file

69
00:02:49,140 --> 00:02:51,720
for your configuration or you can create

70
00:02:51,720 --> 00:02:53,760
many files and organize them into

71
00:02:53,760 --> 00:02:56,940
modules modules are very useful for more

72
00:02:56,940 --> 00:02:59,340
complex configurations and allow us to

73
00:02:59,340 --> 00:03:01,860
reuse bits of code and make it easier to

74
00:03:01,860 --> 00:03:03,780
organize our code and understand the

75
00:03:03,780 --> 00:03:04,980
configuration

76
00:03:04,980 --> 00:03:07,140
from this folder structure you can

77
00:03:07,140 --> 00:03:09,480
already see which the AWS Services I'm

78
00:03:09,480 --> 00:03:11,519
using from a general programming

79
00:03:11,519 --> 00:03:13,800
perspective you can think of modules as

80
00:03:13,800 --> 00:03:16,260
being similar to functions they are

81
00:03:16,260 --> 00:03:18,480
reusable blocks of code that can accept

82
00:03:18,480 --> 00:03:21,360
variables and return outputs as seen in

83
00:03:21,360 --> 00:03:26,780
the variables.tf and outputs.tf files

84
00:03:27,420 --> 00:03:30,500
every terraform module starts with

85
00:03:30,500 --> 00:03:33,480
main.tf which is where resources are

86
00:03:33,480 --> 00:03:36,239
defined by default here is an example of

87
00:03:36,239 --> 00:03:39,239
the main.tf file for this module

88
00:03:39,239 --> 00:03:41,819
as I mentioned before terraform can work

89
00:03:41,819 --> 00:03:43,620
with many different platforms called

90
00:03:43,620 --> 00:03:46,980
providers for our example we'll be using

91
00:03:46,980 --> 00:03:50,540
the AWS provider and specifying the

92
00:03:50,540 --> 00:03:53,340
us-east-1 region

93
00:03:53,340 --> 00:03:55,980
you'll also notice I've defined a

94
00:03:55,980 --> 00:03:58,580
variable called common underscore tags

95
00:03:58,580 --> 00:04:01,920
these are a key value mapping that will

96
00:04:01,920 --> 00:04:04,860
be used to set tagging on AWS resources

97
00:04:04,860 --> 00:04:07,319
within this block you'll notice that I'm

98
00:04:07,319 --> 00:04:11,220
using var.team and var.contact which are

99
00:04:11,220 --> 00:04:14,099
variables defined by the module I've

100
00:04:14,099 --> 00:04:17,220
defined a sub module named cloudtrail

101
00:04:17,220 --> 00:04:19,380
specified where the code for this module

102
00:04:19,380 --> 00:04:21,418
can be found and passed common

103
00:04:21,418 --> 00:04:23,880
underscore tags as the value for a

104
00:04:23,880 --> 00:04:25,860
variable defined by the cloudtrail

105
00:04:25,860 --> 00:04:29,520
sub-module called Tags

106
00:04:29,520 --> 00:04:32,699
below I've defined another sub module

107
00:04:32,699 --> 00:04:34,860
called metric underscore alarm

108
00:04:34,860 --> 00:04:38,880
underscore 3 underscore one which uses

109
00:04:38,880 --> 00:04:42,000
the cloud watch module code and passes

110
00:04:42,000 --> 00:04:44,460
more variables defined by the cloudwatch

111
00:04:44,460 --> 00:04:45,600
module

112
00:04:45,600 --> 00:04:49,080
tags cloudtrail underscore Cloud watch

113
00:04:49,080 --> 00:04:52,259
underscore group underscore name pattern

114
00:04:52,259 --> 00:04:56,180
and Metric underscore name

115
00:04:56,180 --> 00:04:59,580
okay all of that was a lot so if you're

116
00:04:59,580 --> 00:05:01,139
feeling a little confused right now

117
00:05:01,139 --> 00:05:03,479
don't worry the main thing I want to

118
00:05:03,479 --> 00:05:06,300
convey is that we can create variables

119
00:05:06,300 --> 00:05:09,060
and return outputs for modules and we

120
00:05:09,060 --> 00:05:11,280
can Define many modules using a single

121
00:05:11,280 --> 00:05:15,258
Source making it reusable

122
00:05:15,720 --> 00:05:18,419
the module I've defined so far only

123
00:05:18,419 --> 00:05:20,940
implements one of the metric filters and

124
00:05:20,940 --> 00:05:23,460
alarms needed but to create more you

125
00:05:23,460 --> 00:05:25,080
only need to copy and paste the block

126
00:05:25,080 --> 00:05:26,880
and switch out the name of the module

127
00:05:26,880 --> 00:05:29,580
the metric name and the pattern The

128
00:05:29,580 --> 00:05:32,100
Source tags and cloudwatch group name

129
00:05:32,100 --> 00:05:34,560
variables all stay the same

130
00:05:34,560 --> 00:05:36,539
here's what it looks like when I'm ready

131
00:05:36,539 --> 00:05:38,460
to see what infrastructure will be built

132
00:05:38,460 --> 00:05:41,780
in AWS

133
00:05:43,080 --> 00:05:45,479
running terraform and knit will

134
00:05:45,479 --> 00:05:47,220
initialize all of the modules and

135
00:05:47,220 --> 00:05:49,020
plugins that I need for my terraform

136
00:05:49,020 --> 00:05:50,520
project

137
00:05:50,520 --> 00:05:53,160
running terraform plan will tell me what

138
00:05:53,160 --> 00:05:55,620
resources terraform will create and how

139
00:05:55,620 --> 00:05:57,419
they will be configured without making

140
00:05:57,419 --> 00:06:00,419
any changes to my AWS environment

141
00:06:00,419 --> 00:06:03,180
here I'm asked to provide values for the

142
00:06:03,180 --> 00:06:07,199
variables I've defined for this module

143
00:06:07,199 --> 00:06:10,020
after terraform plan runs it will output

144
00:06:10,020 --> 00:06:12,000
information about what will be built in

145
00:06:12,000 --> 00:06:13,259
AWS

146
00:06:13,259 --> 00:06:15,720
and you'll notice that the variables I

147
00:06:15,720 --> 00:06:18,300
specified earlier are being used in the

148
00:06:18,300 --> 00:06:19,199
tags

149
00:06:19,199 --> 00:06:21,660
as I scroll up feel free to pause the

150
00:06:21,660 --> 00:06:23,400
video to take a closer look at the

151
00:06:23,400 --> 00:06:24,840
configurations

152
00:06:24,840 --> 00:06:26,639
you'll see that some of the values can

153
00:06:26,639 --> 00:06:28,500
only be known after we run terraform

154
00:06:28,500 --> 00:06:31,740
apply but you'll also see that we have a

155
00:06:31,740 --> 00:06:33,660
lot of flexibility in how resources are

156
00:06:33,660 --> 00:06:36,840
defined after running terraform apply I

157
00:06:36,840 --> 00:06:38,699
can go over to AWS and take a look at

158
00:06:38,699 --> 00:06:40,800
the changes that have been made here

159
00:06:40,800 --> 00:06:42,720
you'll see that I've enabled cloudtrail

160
00:06:42,720 --> 00:06:45,060
and have all the configurations that I

161
00:06:45,060 --> 00:06:47,160
specified from my terraform

162
00:06:47,160 --> 00:06:50,280
configurations right here including the

163
00:06:50,280 --> 00:06:51,600
tags

164
00:06:51,600 --> 00:06:54,360
I unfortunately don't have the time to

165
00:06:54,360 --> 00:06:55,740
go through and show you all of the

166
00:06:55,740 --> 00:06:57,419
resources that I created through

167
00:06:57,419 --> 00:07:00,120
terraform for this project however I do

168
00:07:00,120 --> 00:07:01,860
want to make sure that you see the cloud

169
00:07:01,860 --> 00:07:03,840
watch configurations that were set up

170
00:07:03,840 --> 00:07:06,060
you'll see that the logs are streaming

171
00:07:06,060 --> 00:07:08,759
in from cloudtrail you'll see that the

172
00:07:08,759 --> 00:07:10,860
tags have been created and also the

173
00:07:10,860 --> 00:07:13,199
metric filters are present and you'll

174
00:07:13,199 --> 00:07:15,479
also see that the metric alarm has been

175
00:07:15,479 --> 00:07:17,100
created as well

176
00:07:17,100 --> 00:07:20,099
from here you can set up alerts that are

177
00:07:20,099 --> 00:07:23,759
triggered from the alarm using SNS or

178
00:07:23,759 --> 00:07:25,680
you can also trigger a Lambda function

179
00:07:25,680 --> 00:07:27,720
to take some action for you based on

180
00:07:27,720 --> 00:07:29,160
that alarm

181
00:07:29,160 --> 00:07:31,740
and there you have it writing that whole

182
00:07:31,740 --> 00:07:34,800
module took me about an hour

183
00:07:34,800 --> 00:07:37,620
that's after months and months of

184
00:07:37,620 --> 00:07:39,479
struggling with terraform so if it takes

185
00:07:39,479 --> 00:07:41,039
you a little longer don't feel

186
00:07:41,039 --> 00:07:44,280
self-conscious at all it was a steep

187
00:07:44,280 --> 00:07:47,160
learning curve for me personally so I

188
00:07:47,160 --> 00:07:49,380
really encourage you to take the time to

189
00:07:49,380 --> 00:07:51,240
read the documentation on the terraform

190
00:07:51,240 --> 00:07:54,419
website and also pick up a really useful

191
00:07:54,419 --> 00:07:57,539
book that I found called terraform up

192
00:07:57,539 --> 00:07:59,940
and running I really enjoyed this book

193
00:07:59,940 --> 00:08:02,160
because I felt like it laid out from

194
00:08:02,160 --> 00:08:04,740
beginning to end exactly how to set up a

195
00:08:04,740 --> 00:08:07,319
terraform project and write modules it

196
00:08:07,319 --> 00:08:09,120
also had really cool tips and tricks

197
00:08:09,120 --> 00:08:11,099
about how you can do things like looping

198
00:08:11,099 --> 00:08:14,039
and how you can do more with the mapping

199
00:08:14,039 --> 00:08:16,560
function for those key value pairs I

200
00:08:16,560 --> 00:08:18,419
really enjoyed this book I think you

201
00:08:18,419 --> 00:08:20,220
should pick it up I think it'll really

202
00:08:20,220 --> 00:08:22,979
level up your terraform abilities just

203
00:08:22,979 --> 00:08:24,780
to slightly correct myself I mentioned

204
00:08:24,780 --> 00:08:26,520
that I found this book it was actually

205
00:08:26,520 --> 00:08:29,699
recommended to me by another engineer

206
00:08:29,699 --> 00:08:32,039
that I really respect it's always good

207
00:08:32,039 --> 00:08:33,839
to surround yourself with people who

208
00:08:33,839 --> 00:08:35,940
know how to find the resources that can

209
00:08:35,940 --> 00:08:37,559
help others

210
00:08:37,559 --> 00:08:40,140
now that we've done a little bit of an

211
00:08:40,140 --> 00:08:42,179
overview about terraform and I mean

212
00:08:42,179 --> 00:08:44,940
overview there is so much that I didn't

213
00:08:44,940 --> 00:08:46,920
get to cover I didn't dive very deep

214
00:08:46,920 --> 00:08:48,779
into a lot of things we just don't have

215
00:08:48,779 --> 00:08:51,180
the time for it but now I get to make my

216
00:08:51,180 --> 00:08:53,459
pitch to you about why I think you

217
00:08:53,459 --> 00:08:55,440
should be using infrastructure as code

218
00:08:55,440 --> 00:08:58,680
for your Cloud environments the first

219
00:08:58,680 --> 00:09:01,500
one is policy enforcement if your

220
00:09:01,500 --> 00:09:03,779
company would like to enforce a policy

221
00:09:03,779 --> 00:09:05,640
for example around the configuration of

222
00:09:05,640 --> 00:09:08,399
S3 buckets using terraform you can

223
00:09:08,399 --> 00:09:10,140
create a module that defines all of

224
00:09:10,140 --> 00:09:12,600
those configurations and have your users

225
00:09:12,600 --> 00:09:14,580
use that module whenever they're

226
00:09:14,580 --> 00:09:17,100
creating an S3 bucket you can easily do

227
00:09:17,100 --> 00:09:20,160
things like specify encryption on the

228
00:09:20,160 --> 00:09:22,440
bucket you can specify the lifecycle

229
00:09:22,440 --> 00:09:25,080
configurations it's really useful if you

230
00:09:25,080 --> 00:09:26,820
know that there is a baseline that you

231
00:09:26,820 --> 00:09:29,220
need to have for different resources in

232
00:09:29,220 --> 00:09:30,480
AWS

233
00:09:30,480 --> 00:09:32,880
next is Version Control and change

234
00:09:32,880 --> 00:09:34,920
management using a centralized

235
00:09:34,920 --> 00:09:37,380
repository and a remote back-end which

236
00:09:37,380 --> 00:09:39,000
you should look up on terraform's

237
00:09:39,000 --> 00:09:41,339
website what a remote backend is you can

238
00:09:41,339 --> 00:09:43,560
control what resources get spun up and

239
00:09:43,560 --> 00:09:45,540
what kinds of changes are made to the

240
00:09:45,540 --> 00:09:48,120
configuration through pull requests and

241
00:09:48,120 --> 00:09:50,640
merge requests since changes made by

242
00:09:50,640 --> 00:09:53,220
your terraform user are expected you can

243
00:09:53,220 --> 00:09:55,440
create alerts on changes made by any

244
00:09:55,440 --> 00:09:59,300
other user in a production environment

245
00:09:59,519 --> 00:10:02,640
through CI CD automation you can use the

246
00:10:02,640 --> 00:10:04,740
CI CD Pipeline and ensure that your

247
00:10:04,740 --> 00:10:06,600
configuration and resources that you

248
00:10:06,600 --> 00:10:09,060
defined in your terraform module are

249
00:10:09,060 --> 00:10:11,160
consistent of what's in your AWS

250
00:10:11,160 --> 00:10:15,300
environment right through CI CD we can

251
00:10:15,300 --> 00:10:18,060
create an immutable AWS environment

252
00:10:18,060 --> 00:10:20,640
through the use of terraform

253
00:10:20,640 --> 00:10:22,920
with all of these three concepts

254
00:10:22,920 --> 00:10:25,620
combined we can create a sense of normal

255
00:10:25,620 --> 00:10:27,959
in our Cloud environment so that

256
00:10:27,959 --> 00:10:29,580
anything that wasn't made by our

257
00:10:29,580 --> 00:10:32,040
terraform user any resources that get

258
00:10:32,040 --> 00:10:33,660
spun up that weren't defined in our

259
00:10:33,660 --> 00:10:36,899
terraform configuration anything like

260
00:10:36,899 --> 00:10:39,120
that we can alert on it and it's

261
00:10:39,120 --> 00:10:42,060
immediately a higher Fidelity alert so

262
00:10:42,060 --> 00:10:45,180
please don't underestimate the value of

263
00:10:45,180 --> 00:10:46,140
normal

264
00:10:46,140 --> 00:10:47,899
now you're probably thinking to yourself

265
00:10:47,899 --> 00:10:51,480
what are the downsides and I want to be

266
00:10:51,480 --> 00:10:53,579
honest with you about what that is the

267
00:10:53,579 --> 00:10:56,100
first one I want to mention is that a

268
00:10:56,100 --> 00:10:58,079
lot of us can be a little lazy with the

269
00:10:58,079 --> 00:10:59,700
I am permissions that we give to our

270
00:10:59,700 --> 00:11:01,860
terraform user some people will just

271
00:11:01,860 --> 00:11:04,680
grant it immediate admin access if

272
00:11:04,680 --> 00:11:06,540
that's what you're going to do no

273
00:11:06,540 --> 00:11:08,820
judgment from me okay do what you have

274
00:11:08,820 --> 00:11:10,740
to do but make sure that the credentials

275
00:11:10,740 --> 00:11:13,800
for that user are safe otherwise if you

276
00:11:13,800 --> 00:11:16,040
have the time and the mental capacity

277
00:11:16,040 --> 00:11:19,019
feel free to give it the specific access

278
00:11:19,019 --> 00:11:21,779
that it needs to run the configurations

279
00:11:21,779 --> 00:11:24,779
now if you're using the same terraform

280
00:11:24,779 --> 00:11:27,420
user for a very large configuration say

281
00:11:27,420 --> 00:11:30,000
you have a centralized Enterprise wide

282
00:11:30,000 --> 00:11:32,399
terraform Repository

283
00:11:32,399 --> 00:11:34,200
that's probably not going to be possible

284
00:11:34,200 --> 00:11:35,880
and it's probably going to be terribly

285
00:11:35,880 --> 00:11:39,480
tedious so using the admin role in AWS

286
00:11:39,480 --> 00:11:41,700
is probably the easiest and best way to

287
00:11:41,700 --> 00:11:44,100
go just make sure that those credentials

288
00:11:44,100 --> 00:11:45,779
are safe

289
00:11:45,779 --> 00:11:49,140
another downfall is that not every

290
00:11:49,140 --> 00:11:52,380
resource is Thoroughly defined in the

291
00:11:52,380 --> 00:11:55,740
terraform AWS provider and so sometimes

292
00:11:55,740 --> 00:11:57,720
you'll run into situations where you

293
00:11:57,720 --> 00:11:59,160
want to build out a resource in

294
00:11:59,160 --> 00:12:02,279
terraform and it might not be fully

295
00:12:02,279 --> 00:12:04,800
implemented or even available in those

296
00:12:04,800 --> 00:12:06,600
cases you might either have to build it

297
00:12:06,600 --> 00:12:10,019
manually or just use the AWS CLI in

298
00:12:10,019 --> 00:12:12,300
these cases it's best to discuss with

299
00:12:12,300 --> 00:12:14,940
your team the best direction to go and

300
00:12:14,940 --> 00:12:17,279
make sure that if you do have detections

301
00:12:17,279 --> 00:12:20,160
in place to identify manual actions

302
00:12:20,160 --> 00:12:23,100
there's some type of allow list that

303
00:12:23,100 --> 00:12:26,459
will not alert on that behavior

304
00:12:26,459 --> 00:12:29,519
as we all know there's no Silver Bullet

305
00:12:29,519 --> 00:12:31,140
in security

306
00:12:31,140 --> 00:12:33,779
my Approach is just one of many that you

307
00:12:33,779 --> 00:12:36,899
can add to your Cloud security posture I

308
00:12:36,899 --> 00:12:38,579
believe that this approach works best

309
00:12:38,579 --> 00:12:42,420
for high value accounts anything that is

310
00:12:42,420 --> 00:12:44,880
storing very sensitive information your

311
00:12:44,880 --> 00:12:47,579
customer information any account or

312
00:12:47,579 --> 00:12:49,740
environment that should not change often

313
00:12:49,740 --> 00:12:51,899
I believe this approach works really

314
00:12:51,899 --> 00:12:53,100
well

315
00:12:53,100 --> 00:12:55,500
if you have test or experiment accounts

316
00:12:55,500 --> 00:12:58,019
this might not be the best approach

317
00:12:58,019 --> 00:13:01,380
take what you learned here and apply it

318
00:13:01,380 --> 00:13:04,200
in the best way you see fit for your

319
00:13:04,200 --> 00:13:05,459
environment

320
00:13:05,459 --> 00:13:07,800
thank you so much for listening to my

321
00:13:07,800 --> 00:13:10,920
pitch for why you should use IAC in your

322
00:13:10,920 --> 00:13:13,560
Cloud environment this has been finding

323
00:13:13,560 --> 00:13:14,880
Rudolph

324
00:13:14,880 --> 00:13:18,060
I hope that this was informational for

325
00:13:18,060 --> 00:13:19,920
you I hope that maybe you learned

326
00:13:19,920 --> 00:13:22,380
something new if you did let me know

327
00:13:22,380 --> 00:13:24,480
drop me a line you can find me on

328
00:13:24,480 --> 00:13:27,180
Twitter at Mastodon my handles are on

329
00:13:27,180 --> 00:13:29,540
the screen

330
00:13:31,920 --> 00:13:35,000
[Music]

331
00:13:35,600 --> 00:13:38,600
thank you

