1
00:00:03,780 --> 00:00:06,869
[Music]

2
00:00:07,700 --> 00:00:10,800
thank you hello and greetings from the

3
00:00:10,800 --> 00:00:14,280
North Pole my name is Melissa bishoping

4
00:00:14,280 --> 00:00:16,379
if you'd like to chat more after this or

5
00:00:16,379 --> 00:00:18,300
just follow me for lots of cat pictures

6
00:00:18,300 --> 00:00:20,400
you can find me via my socials here on

7
00:00:20,400 --> 00:00:21,240
the screen

8
00:00:21,240 --> 00:00:23,160
I'm posting mostly in the federal verse

9
00:00:23,160 --> 00:00:25,920
these days so I recommend starting there

10
00:00:25,920 --> 00:00:28,320
I'm here today excited to present to you

11
00:00:28,320 --> 00:00:30,480
on the topic of JavaScript obfuscation

12
00:00:30,480 --> 00:00:34,220
so let's go ahead and get started

13
00:00:37,380 --> 00:00:39,059
so what are you going to learn about

14
00:00:39,059 --> 00:00:41,340
today if you're new to the topic we'll

15
00:00:41,340 --> 00:00:43,079
talk a little bit about what obfuscation

16
00:00:43,079 --> 00:00:45,960
is and what it isn't then we'll discuss

17
00:00:45,960 --> 00:00:47,700
briefly why someone would even want to

18
00:00:47,700 --> 00:00:49,879
make complex code harder to understand

19
00:00:49,879 --> 00:00:52,140
this is one of those situations too

20
00:00:52,140 --> 00:00:54,000
where both threat actors as well as

21
00:00:54,000 --> 00:00:55,980
legitimate developers have very good

22
00:00:55,980 --> 00:00:58,680
reasons to want to obfuscate their code

23
00:00:58,680 --> 00:01:01,199
lastly we're going to talk about how to

24
00:01:01,199 --> 00:01:04,799
de-obfuscate some of this code yourself

25
00:01:04,799 --> 00:01:08,760
so to start with what is obfuscation by

26
00:01:08,760 --> 00:01:10,439
its own definition in the most basic

27
00:01:10,439 --> 00:01:12,960
terms it's taking plain readable code

28
00:01:12,960 --> 00:01:15,780
such as outputting hello world

29
00:01:15,780 --> 00:01:17,520
and putting it through a series of

30
00:01:17,520 --> 00:01:20,159
operations to make it complex lengthy

31
00:01:20,159 --> 00:01:22,680
out of order generally pretty impossible

32
00:01:22,680 --> 00:01:24,600
for a human to read through like they

33
00:01:24,600 --> 00:01:26,939
would have the original script we'll see

34
00:01:26,939 --> 00:01:28,680
some examples of that later on that'll

35
00:01:28,680 --> 00:01:30,780
illustrate what I mean by this

36
00:01:30,780 --> 00:01:32,820
this obfuscation has little to no

37
00:01:32,820 --> 00:01:35,220
meaning to a computer though so while it

38
00:01:35,220 --> 00:01:37,740
may take ages for humans to reverse what

39
00:01:37,740 --> 00:01:39,960
the code is doing the computer can work

40
00:01:39,960 --> 00:01:41,280
through the logic and piece it back

41
00:01:41,280 --> 00:01:43,680
together quickly the final result is

42
00:01:43,680 --> 00:01:45,540
that the code does exactly what the

43
00:01:45,540 --> 00:01:47,880
original did even when obfuscated

44
00:01:47,880 --> 00:01:51,119
an important Point obfuscation is not

45
00:01:51,119 --> 00:01:53,759
synonymous with encoding hashing

46
00:01:53,759 --> 00:01:56,040
compiling or encrypting and we're going

47
00:01:56,040 --> 00:01:57,420
to quickly talk about some of these

48
00:01:57,420 --> 00:01:59,880
differences

49
00:01:59,880 --> 00:02:03,659
so obfuscation obfuscation is using

50
00:02:03,659 --> 00:02:06,479
logic variables functions renaming

51
00:02:06,479 --> 00:02:08,459
arguments to garble the code in a way

52
00:02:08,459 --> 00:02:10,800
that makes it non-human readable this

53
00:02:10,800 --> 00:02:12,360
can happen inside scripts like

54
00:02:12,360 --> 00:02:15,300
Powershell python JavaScript or you

55
00:02:15,300 --> 00:02:17,160
could have that obfuscated code inside

56
00:02:17,160 --> 00:02:19,200
of compiled code

57
00:02:19,200 --> 00:02:22,080
by its design obfuscation is reversible

58
00:02:22,080 --> 00:02:24,120
so remember the output of the code

59
00:02:24,120 --> 00:02:25,739
Remains the Same even if it's been

60
00:02:25,739 --> 00:02:27,780
obfuscated so it requires no special

61
00:02:27,780 --> 00:02:30,480
keys no passwords nothing else in order

62
00:02:30,480 --> 00:02:33,540
to function as design you the human just

63
00:02:33,540 --> 00:02:35,220
can't read it as clearly

64
00:02:35,220 --> 00:02:37,560
note this isn't a security feature

65
00:02:37,560 --> 00:02:39,780
obscured code is not protected against

66
00:02:39,780 --> 00:02:41,580
being reverse engineered it's just

67
00:02:41,580 --> 00:02:43,500
layered to make it harder to to do

68
00:02:43,500 --> 00:02:45,120
manually

69
00:02:45,120 --> 00:02:47,819
so encoding on the other hand is used to

70
00:02:47,819 --> 00:02:49,140
convert data into something else

71
00:02:49,140 --> 00:02:51,000
entirely so that it could be easier to

72
00:02:51,000 --> 00:02:52,700
consume by another product or service

73
00:02:52,700 --> 00:02:55,379
it's also reversible and isn't meant to

74
00:02:55,379 --> 00:02:57,540
keep your data secret it's simply meant

75
00:02:57,540 --> 00:02:59,340
to make the process of data input and

76
00:02:59,340 --> 00:03:02,160
output more portable between systems

77
00:03:02,160 --> 00:03:05,220
think of things like base64 this is used

78
00:03:05,220 --> 00:03:07,440
to send data between two systems so

79
00:03:07,440 --> 00:03:09,900
there's no misinterpretation so even

80
00:03:09,900 --> 00:03:11,340
when two systems might have

81
00:03:11,340 --> 00:03:13,319
misinterpreted the original plain text

82
00:03:13,319 --> 00:03:15,720
Data differently they haven't agreed

83
00:03:15,720 --> 00:03:17,640
upon standard in this encoding method so

84
00:03:17,640 --> 00:03:18,900
they're sure to get the same results

85
00:03:18,900 --> 00:03:21,800
when they decode the same data

86
00:03:21,800 --> 00:03:25,080
encrypting something else entirely the

87
00:03:25,080 --> 00:03:26,340
purpose of encryption is data

88
00:03:26,340 --> 00:03:28,200
confidentiality it's meant to keep

89
00:03:28,200 --> 00:03:30,120
things secret and prevent ease of

90
00:03:30,120 --> 00:03:32,580
interception this leverages algorithms

91
00:03:32,580 --> 00:03:34,739
to encrypt and requires a key to decrypt

92
00:03:34,739 --> 00:03:37,140
now this talk isn't going to delve into

93
00:03:37,140 --> 00:03:38,760
all the different types of encryption

94
00:03:38,760 --> 00:03:40,379
but just know there's several methods

95
00:03:40,379 --> 00:03:42,299
and algorithms that we use every single

96
00:03:42,299 --> 00:03:44,760
day it's not the same as obfuscation

97
00:03:44,760 --> 00:03:47,340
because it's only reversible if you have

98
00:03:47,340 --> 00:03:48,420
the key and it's meant for

99
00:03:48,420 --> 00:03:50,519
confidentiality not just making it a

100
00:03:50,519 --> 00:03:53,220
difficult obstacle

101
00:03:53,220 --> 00:03:55,560
so why do we use obfuscation if it's

102
00:03:55,560 --> 00:03:57,540
easily reversible and not secret how is

103
00:03:57,540 --> 00:04:00,180
this how is this useful to us well if

104
00:04:00,180 --> 00:04:02,220
you're on the nice list you probably are

105
00:04:02,220 --> 00:04:03,900
using obfuscation to make your code

106
00:04:03,900 --> 00:04:06,000
harder for maybe a competitor to reverse

107
00:04:06,000 --> 00:04:08,159
your intellectual property or maybe an

108
00:04:08,159 --> 00:04:09,780
attempt to hide functions when the code

109
00:04:09,780 --> 00:04:11,580
would otherwise be readable such as

110
00:04:11,580 --> 00:04:14,159
JavaScript in the browser more on that

111
00:04:14,159 --> 00:04:15,239
shortly

112
00:04:15,239 --> 00:04:17,339
if you're on the naughty list maybe

113
00:04:17,339 --> 00:04:19,199
you're using obfuscation to bypass

114
00:04:19,199 --> 00:04:20,820
security tools that would look for

115
00:04:20,820 --> 00:04:22,860
specific strings or form signatures

116
00:04:22,860 --> 00:04:25,860
easily indicative of malicious use or

117
00:04:25,860 --> 00:04:27,540
you could be using it to constantly

118
00:04:27,540 --> 00:04:29,340
evolve and change the way your code

119
00:04:29,340 --> 00:04:32,100
appears so the same code can be reused

120
00:04:32,100 --> 00:04:33,900
without detection by just changing the

121
00:04:33,900 --> 00:04:36,500
obfuscation

122
00:04:39,479 --> 00:04:42,240
so what are some attributes of good

123
00:04:42,240 --> 00:04:43,560
obfuscation

124
00:04:43,560 --> 00:04:46,320
well it should be potent potency refers

125
00:04:46,320 --> 00:04:48,840
to how hard it is to de-obfuscate by a

126
00:04:48,840 --> 00:04:50,759
human being even if that person is

127
00:04:50,759 --> 00:04:52,759
writing scripts to automate the process

128
00:04:52,759 --> 00:04:55,259
layers of obfuscation techniques

129
00:04:55,259 --> 00:04:57,360
combined using multiple methods help

130
00:04:57,360 --> 00:04:58,740
ensure this

131
00:04:58,740 --> 00:05:01,800
your code should also be resilient how

132
00:05:01,800 --> 00:05:04,199
easy is it for me to write some python

133
00:05:04,199 --> 00:05:07,139
to do the de-obfuscation for me if it's

134
00:05:07,139 --> 00:05:08,880
easy then the obfuscation wasn't

135
00:05:08,880 --> 00:05:10,259
resilient

136
00:05:10,259 --> 00:05:12,139
and while there's a lot of

137
00:05:12,139 --> 00:05:15,240
de-obfuscation toolkits available stuff

138
00:05:15,240 --> 00:05:17,699
on GitHub various websites you can go to

139
00:05:17,699 --> 00:05:19,320
seriously just Google them you'll find

140
00:05:19,320 --> 00:05:21,840
like a ton these tools aren't effective

141
00:05:21,840 --> 00:05:23,699
against sophisticated and resilient

142
00:05:23,699 --> 00:05:25,620
obfuscation

143
00:05:25,620 --> 00:05:28,919
lastly it should be low cost and I don't

144
00:05:28,919 --> 00:05:31,259
mean cost in dollars I mean cost on the

145
00:05:31,259 --> 00:05:33,960
endpoint itself cost and memory and CPU

146
00:05:33,960 --> 00:05:36,960
performance if the obfuscation makes the

147
00:05:36,960 --> 00:05:39,419
program significantly larger or requires

148
00:05:39,419 --> 00:05:41,460
significantly more resources to run

149
00:05:41,460 --> 00:05:43,979
because of all the added functions it

150
00:05:43,979 --> 00:05:45,780
could cause a performance hit that might

151
00:05:45,780 --> 00:05:47,759
be noticed now if you're selling

152
00:05:47,759 --> 00:05:49,800
software this is bad because then your

153
00:05:49,800 --> 00:05:51,479
software is going to seem bloated it'll

154
00:05:51,479 --> 00:05:53,100
impact some business critical operations

155
00:05:53,100 --> 00:05:55,080
might even take down a couple of systems

156
00:05:55,080 --> 00:05:57,960
and that's bad for you now if you're a

157
00:05:57,960 --> 00:05:59,639
threat actor The increased performance

158
00:05:59,639 --> 00:06:01,620
hit May raise suspicions and get you

159
00:06:01,620 --> 00:06:04,280
caught faster

160
00:06:05,520 --> 00:06:07,919
there's a lot of techniques that can be

161
00:06:07,919 --> 00:06:09,780
used to obfuscate JavaScript this list

162
00:06:09,780 --> 00:06:12,419
here on the screen is not exhaustive but

163
00:06:12,419 --> 00:06:13,860
I've only got a few minutes so I wanted

164
00:06:13,860 --> 00:06:15,539
to just touch on some of the most common

165
00:06:15,539 --> 00:06:17,460
ones these are some of the most common

166
00:06:17,460 --> 00:06:20,520
you'll see these methods usually get

167
00:06:20,520 --> 00:06:22,680
combined together very rarely is it

168
00:06:22,680 --> 00:06:26,460
obfuscated using only one technique and

169
00:06:26,460 --> 00:06:28,440
there may be some nuances to how they're

170
00:06:28,440 --> 00:06:30,300
employed depending on like what browser

171
00:06:30,300 --> 00:06:31,979
is being used or other environmental

172
00:06:31,979 --> 00:06:33,840
considerations that a person who is

173
00:06:33,840 --> 00:06:36,419
writing the code may use to make the

174
00:06:36,419 --> 00:06:38,100
decision on which techniques they

175
00:06:38,100 --> 00:06:41,840
leverage and how they Implement them

176
00:06:42,780 --> 00:06:44,039
so

177
00:06:44,039 --> 00:06:46,740
uh D obfuscation

178
00:06:46,740 --> 00:06:49,080
this is not an all-encompassing workflow

179
00:06:49,080 --> 00:06:51,000
there's a million ways to do it I just

180
00:06:51,000 --> 00:06:52,680
wanted to give you a couple of ideas to

181
00:06:52,680 --> 00:06:54,539
work from so what might it look like

182
00:06:54,539 --> 00:06:56,580
while you're thinking through the

183
00:06:56,580 --> 00:06:58,259
obfuscation and how you would approach

184
00:06:58,259 --> 00:07:00,259
it if someone handed you obfuscated code

185
00:07:00,259 --> 00:07:02,639
here's your starting point like I said

186
00:07:02,639 --> 00:07:05,639
there are so many other ways to do this

187
00:07:05,639 --> 00:07:07,139
almost always you're going to want to

188
00:07:07,139 --> 00:07:09,060
start by beautifying code to take it

189
00:07:09,060 --> 00:07:11,220
from the giant wall of complicated text

190
00:07:11,220 --> 00:07:12,900
into something a little more structured

191
00:07:12,900 --> 00:07:16,139
with your indents and code blocks then

192
00:07:16,139 --> 00:07:18,000
you might want to attempt using some of

193
00:07:18,000 --> 00:07:19,979
those known di obfuscators we talked

194
00:07:19,979 --> 00:07:22,020
about or some scripts available in the

195
00:07:22,020 --> 00:07:23,880
wild this might get you a couple of

196
00:07:23,880 --> 00:07:26,280
threads to pull on but I doubt it would

197
00:07:26,280 --> 00:07:28,319
be sufficient to return the code

198
00:07:28,319 --> 00:07:30,780
perfectly to its original form

199
00:07:30,780 --> 00:07:32,580
uh you're going to want to look maybe

200
00:07:32,580 --> 00:07:35,039
for unused Snippets or unused variables

201
00:07:35,039 --> 00:07:36,780
you can even use things in like notepad

202
00:07:36,780 --> 00:07:39,240
plus plus just Ctrl F on the function

203
00:07:39,240 --> 00:07:41,400
name and see if it doesn't show up

204
00:07:41,400 --> 00:07:44,400
anywhere else it's a common technique to

205
00:07:44,400 --> 00:07:46,560
try and add in some of those things that

206
00:07:46,560 --> 00:07:49,440
are defined but never used just as noise

207
00:07:49,440 --> 00:07:51,300
to muddy up the waters

208
00:07:51,300 --> 00:07:54,060
Leverage The debugging in the console to

209
00:07:54,060 --> 00:07:55,740
see maybe if you can add some console

210
00:07:55,740 --> 00:07:57,780
logging to return things as they're

211
00:07:57,780 --> 00:08:00,180
processing or add some break points

212
00:08:00,180 --> 00:08:02,220
and maybe work yourself through the code

213
00:08:02,220 --> 00:08:04,860
and as you begin to understand what

214
00:08:04,860 --> 00:08:07,199
those functions or variables do rename

215
00:08:07,199 --> 00:08:08,280
them into something that's human

216
00:08:08,280 --> 00:08:09,780
readable like give them a name that

217
00:08:09,780 --> 00:08:12,539
makes sense in your head and work

218
00:08:12,539 --> 00:08:14,220
through putting that code back in its

219
00:08:14,220 --> 00:08:16,020
correct order so that it flows logically

220
00:08:16,020 --> 00:08:18,539
like I said a couple of minutes ago a

221
00:08:18,539 --> 00:08:20,220
common technique is to reorder the

222
00:08:20,220 --> 00:08:22,620
functions this may also mean that you

223
00:08:22,620 --> 00:08:24,539
have to remove some additional loops and

224
00:08:24,539 --> 00:08:26,220
rearrange a couple of things so that it

225
00:08:26,220 --> 00:08:29,419
flows logically again

226
00:08:30,180 --> 00:08:33,899
so did you know that you can from super

227
00:08:33,899 --> 00:08:36,360
easy de-obfuscate JavaScript right in

228
00:08:36,360 --> 00:08:38,580
the browser you can open devtools in

229
00:08:38,580 --> 00:08:39,779
something like Chrome or Edge or

230
00:08:39,779 --> 00:08:41,159
whatever your browser is and immediately

231
00:08:41,159 --> 00:08:43,080
begin exploring any JavaScript that's

232
00:08:43,080 --> 00:08:45,660
executing and interact directly with the

233
00:08:45,660 --> 00:08:47,399
console and various debugging tools that

234
00:08:47,399 --> 00:08:50,040
are included right there I added a link

235
00:08:50,040 --> 00:08:51,779
because Google has a great write-up on

236
00:08:51,779 --> 00:08:54,060
this and the toolkit that's available to

237
00:08:54,060 --> 00:08:56,459
you it's really informative it's totally

238
00:08:56,459 --> 00:08:58,140
free and they also have a demo

239
00:08:58,140 --> 00:09:00,500
environment you can see here that Google

240
00:09:00,500 --> 00:09:03,240
chrome.github.io has an environment you

241
00:09:03,240 --> 00:09:04,620
can play around with some of these tools

242
00:09:04,620 --> 00:09:06,660
as you're learning and you'll learn a

243
00:09:06,660 --> 00:09:08,040
ton in the process not just about

244
00:09:08,040 --> 00:09:10,320
de-obfuscation but about how JavaScript

245
00:09:10,320 --> 00:09:13,940
debugging happens in console

246
00:09:14,459 --> 00:09:16,680
so now let's talk about some actual

247
00:09:16,680 --> 00:09:19,380
examples here's a quick sample of some

248
00:09:19,380 --> 00:09:21,959
JavaScript so Santa is into automation

249
00:09:21,959 --> 00:09:23,880
this year and we got a snippet from a

250
00:09:23,880 --> 00:09:25,800
site he's building to manage his naughty

251
00:09:25,800 --> 00:09:27,240
or nice list with the elves here in the

252
00:09:27,240 --> 00:09:29,580
North Pole now for full disclosure Santa

253
00:09:29,580 --> 00:09:32,279
nor myself our professional developers

254
00:09:32,279 --> 00:09:33,899
and it's kind of busy this time of year

255
00:09:33,899 --> 00:09:35,760
so don't consider this a JavaScript

256
00:09:35,760 --> 00:09:37,800
tutorial this is probably the least

257
00:09:37,800 --> 00:09:40,380
effective way to write this but this is

258
00:09:40,380 --> 00:09:42,300
about obfuscating code not writing nice

259
00:09:42,300 --> 00:09:43,680
performance code

260
00:09:43,680 --> 00:09:46,380
so we can see here it looks like Santa

261
00:09:46,380 --> 00:09:48,779
makes a list okay now he's checking it

262
00:09:48,779 --> 00:09:50,580
twice and then there's an output of the

263
00:09:50,580 --> 00:09:52,080
naughty list and then he finds out who's

264
00:09:52,080 --> 00:09:55,200
nice all right easy enough right but

265
00:09:55,200 --> 00:09:56,820
because kids these days are more tech

266
00:09:56,820 --> 00:09:59,220
savvy than ever Santa has decided to

267
00:09:59,220 --> 00:10:01,380
employ some obfuscation just in case

268
00:10:01,380 --> 00:10:03,120
someone tries to get access and figure

269
00:10:03,120 --> 00:10:04,860
out how to modify that list so they can

270
00:10:04,860 --> 00:10:08,839
ensure they come up as nice

271
00:10:09,300 --> 00:10:11,940
so some very basic obfuscation run

272
00:10:11,940 --> 00:10:13,500
through a tool online but you can

273
00:10:13,500 --> 00:10:16,080
already see how this immediately stops

274
00:10:16,080 --> 00:10:18,540
it being understood by the human eye you

275
00:10:18,540 --> 00:10:21,420
can't walk through this logically in the

276
00:10:21,420 --> 00:10:22,740
first example you could walk through

277
00:10:22,740 --> 00:10:24,600
exactly what it did there were clearly

278
00:10:24,600 --> 00:10:26,459
named variables and functions that made

279
00:10:26,459 --> 00:10:28,500
sense based on what they did and here

280
00:10:28,500 --> 00:10:31,080
you're given a lot of confusion and no

281
00:10:31,080 --> 00:10:32,760
structure because it's just a giant wall

282
00:10:32,760 --> 00:10:33,720
of text

283
00:10:33,720 --> 00:10:35,820
now if you want to actually play with

284
00:10:35,820 --> 00:10:38,339
this example I have made it available on

285
00:10:38,339 --> 00:10:40,019
my gitlab the link is right here on the

286
00:10:40,019 --> 00:10:42,000
screen but I also wanted to say there's

287
00:10:42,000 --> 00:10:43,680
tons of other examples of this kind of

288
00:10:43,680 --> 00:10:46,140
thing all over the Internet of varying

289
00:10:46,140 --> 00:10:47,820
levels of difficulty so feel free to

290
00:10:47,820 --> 00:10:49,380
explore different levels of challenges

291
00:10:49,380 --> 00:10:52,760
and obfuscation styles

292
00:10:52,860 --> 00:10:55,500
and before I go I wanted to leave you

293
00:10:55,500 --> 00:10:56,940
with a couple of links to different

294
00:10:56,940 --> 00:10:58,740
tools and learning resources that you

295
00:10:58,740 --> 00:11:01,560
might find valuable this absolutely is

296
00:11:01,560 --> 00:11:03,480
not a comprehensive list but maybe a

297
00:11:03,480 --> 00:11:04,920
good launching point if you found this

298
00:11:04,920 --> 00:11:06,540
interesting and want to dive deeper into

299
00:11:06,540 --> 00:11:09,480
the topic one other thing a quick note

300
00:11:09,480 --> 00:11:11,279
on some of those automated tools like I

301
00:11:11,279 --> 00:11:13,740
said a few slides ago you may and

302
00:11:13,740 --> 00:11:15,720
probably will require some additional

303
00:11:15,720 --> 00:11:17,940
work in addition to whatever your tools

304
00:11:17,940 --> 00:11:19,920
output so use those tools as a starting

305
00:11:19,920 --> 00:11:22,260
point or a learning opportunity and

306
00:11:22,260 --> 00:11:24,000
don't get discouraged if the DI

307
00:11:24,000 --> 00:11:28,399
obfuscation appears incomplete initially

308
00:11:28,440 --> 00:11:30,779
thank you again for letting me join you

309
00:11:30,779 --> 00:11:32,459
at the North Pole this season I hope you

310
00:11:32,459 --> 00:11:35,160
learned something interesting stay safe

311
00:11:35,160 --> 00:11:39,260
stay warm and happy hacking

312
00:11:41,320 --> 00:11:48,190
[Music]

