1
00:00:03,780 --> 00:00:06,869
[Music]

2
00:00:07,760 --> 00:00:10,920
thank you hello my name is Mark Baggett

3
00:00:10,920 --> 00:00:12,540
and it is my distinct pleasure to be

4
00:00:12,540 --> 00:00:15,839
with you here today at kringlecon oh my

5
00:00:15,839 --> 00:00:18,600
goodness has has Santa and the elves

6
00:00:18,600 --> 00:00:21,480
done outdone themselves again this year

7
00:00:21,480 --> 00:00:24,359
with such an amazing conference and such

8
00:00:24,359 --> 00:00:27,180
an amazing event so awesome to be here

9
00:00:27,180 --> 00:00:28,500
at the North Pole I'm here to talk to

10
00:00:28,500 --> 00:00:30,840
you about a presentation that I put

11
00:00:30,840 --> 00:00:34,079
together called Python's non-issue and

12
00:00:34,079 --> 00:00:35,940
there you see my Twitter handle if you'd

13
00:00:35,940 --> 00:00:38,280
like to follow me

14
00:00:38,280 --> 00:00:41,280
so a little bit about me I am a pen

15
00:00:41,280 --> 00:00:43,260
tester an incident response consultant

16
00:00:43,260 --> 00:00:44,760
I'm also a senior instructor for the

17
00:00:44,760 --> 00:00:46,440
Sans Institute I'm the author of sans

18
00:00:46,440 --> 00:00:49,379
SEC 573 which is automating information

19
00:00:49,379 --> 00:00:53,520
security with python and SEC 673 which

20
00:00:53,520 --> 00:00:57,059
is Advanced 573. uh I'm also the

21
00:00:57,059 --> 00:00:59,160
co-author of a new course that should be

22
00:00:59,160 --> 00:01:02,699
coming out sometime in 2023 called SEC

23
00:01:02,699 --> 00:01:05,339
406 which is an introduction to Linux

24
00:01:05,339 --> 00:01:07,920
security and administration

25
00:01:07,920 --> 00:01:10,560
um a GSE and I've been involved with the

26
00:01:10,560 --> 00:01:12,000
information security Community for a

27
00:01:12,000 --> 00:01:14,400
good bit that last bit at the bottom

28
00:01:14,400 --> 00:01:17,040
um is pretty cool I my name appears in

29
00:01:17,040 --> 00:01:18,420
the source code for medicine Place seven

30
00:01:18,420 --> 00:01:20,460
times even though I've never actually

31
00:01:20,460 --> 00:01:22,380
written a module

32
00:01:22,380 --> 00:01:25,560
for Metasploit at all it's just uh other

33
00:01:25,560 --> 00:01:28,740
people have given me credits in TTP for

34
00:01:28,740 --> 00:01:30,840
ttps I've come up with in different

35
00:01:30,840 --> 00:01:32,939
modules they've created so

36
00:01:32,939 --> 00:01:34,500
um thank you for that

37
00:01:34,500 --> 00:01:36,360
so what I wanted to talk to you about

38
00:01:36,360 --> 00:01:40,320
today is Nan in Python it's short for

39
00:01:40,320 --> 00:01:44,280
not a number and it's been the source of

40
00:01:44,280 --> 00:01:46,500
different errors in many different

41
00:01:46,500 --> 00:01:48,600
programming languages for a long time

42
00:01:48,600 --> 00:01:52,939
but never python or so we thought until

43
00:01:52,939 --> 00:01:56,820
well some infosec Legends like Robert

44
00:01:56,820 --> 00:01:59,640
Hansen and Zach Jones recently gave a

45
00:01:59,640 --> 00:02:04,259
presentation on Nan and well their

46
00:02:04,259 --> 00:02:06,000
presentation has sparked some

47
00:02:06,000 --> 00:02:09,080
controversy between them and the python

48
00:02:09,080 --> 00:02:11,099
python Consortium I'm not going to get

49
00:02:11,099 --> 00:02:13,440
into that there here but

50
00:02:13,440 --> 00:02:15,780
um it is a very good presentation and

51
00:02:15,780 --> 00:02:16,860
you should check it out I've got a

52
00:02:16,860 --> 00:02:19,620
GitHub link there on the slide for you

53
00:02:19,620 --> 00:02:23,220
to go and take a look at what I really

54
00:02:23,220 --> 00:02:26,040
want to talk about here is how Nan is

55
00:02:26,040 --> 00:02:28,260
intended to be used how they have shown

56
00:02:28,260 --> 00:02:31,620
that well it can be abused and produce

57
00:02:31,620 --> 00:02:35,280
some unexpected results in the way that

58
00:02:35,280 --> 00:02:37,440
python processes these values so

59
00:02:37,440 --> 00:02:40,440
consider this little example of a

60
00:02:40,440 --> 00:02:41,819
program you have here I've written a

61
00:02:41,819 --> 00:02:43,019
function called

62
00:02:43,019 --> 00:02:46,800
find highest it takes in a value called

63
00:02:46,800 --> 00:02:48,959
a Target list and the first thing it

64
00:02:48,959 --> 00:02:51,000
does is it establishes this highest

65
00:02:51,000 --> 00:02:54,120
variable and sets it to a value of zero

66
00:02:54,120 --> 00:02:55,860
then it's going to go through each of

67
00:02:55,860 --> 00:02:57,540
the different values that are in the

68
00:02:57,540 --> 00:03:01,920
Target list and if the current value is

69
00:03:01,920 --> 00:03:04,800
higher than the current value that's

70
00:03:04,800 --> 00:03:06,900
stored in the variable highest it

71
00:03:06,900 --> 00:03:08,580
becomes the highest so it's just going

72
00:03:08,580 --> 00:03:10,019
to go through each of the values say are

73
00:03:10,019 --> 00:03:12,420
you the highest no okay next are you the

74
00:03:12,420 --> 00:03:15,180
highest no yeah or yes you are higher

75
00:03:15,180 --> 00:03:17,040
than my current highest you become the

76
00:03:17,040 --> 00:03:18,239
highest go to the next one are you

77
00:03:18,239 --> 00:03:20,280
higher than my current highest yes okay

78
00:03:20,280 --> 00:03:21,840
you become the highest and when it's

79
00:03:21,840 --> 00:03:24,239
done it Returns the highest value as you

80
00:03:24,239 --> 00:03:26,580
can see here this works just fine on

81
00:03:26,580 --> 00:03:28,620
this first example where I called find

82
00:03:28,620 --> 00:03:31,920
highest and I passed 5 10 20.

83
00:03:31,920 --> 00:03:34,080
um it returned back to number 20. so all

84
00:03:34,080 --> 00:03:35,700
was good but then as soon as I called

85
00:03:35,700 --> 00:03:37,800
Flying highest and I give it some

86
00:03:37,800 --> 00:03:39,900
negative values where nothing in the

87
00:03:39,900 --> 00:03:42,840
list is above the highest value

88
00:03:42,840 --> 00:03:46,620
my function fails it's unable to find

89
00:03:46,620 --> 00:03:49,620
that highest value

90
00:03:49,620 --> 00:03:51,959
so python has some special values that

91
00:03:51,959 --> 00:03:54,420
you can use to solve problems like this

92
00:03:54,420 --> 00:03:57,480
right it's got the infinity value or if

93
00:03:57,480 --> 00:03:59,819
you call the float function and you pass

94
00:03:59,819 --> 00:04:02,519
it in the string INF or actually you can

95
00:04:02,519 --> 00:04:04,620
pass it in the word infinity or

96
00:04:04,620 --> 00:04:06,299
uppercase lowercase versions of INF

97
00:04:06,299 --> 00:04:08,220
there's lots of different combinations

98
00:04:08,220 --> 00:04:11,939
of the string INF you can pass to it and

99
00:04:11,939 --> 00:04:14,459
it will return back a value that is

100
00:04:14,459 --> 00:04:16,680
equal to Infinity it's a number that's

101
00:04:16,680 --> 00:04:19,440
higher than every other number floating

102
00:04:19,440 --> 00:04:21,478
Point number integer it's higher than

103
00:04:21,478 --> 00:04:23,639
every other number we can use that in

104
00:04:23,639 --> 00:04:25,020
our programs to solve things like this

105
00:04:25,020 --> 00:04:29,400
there's also a minus INF and there is

106
00:04:29,400 --> 00:04:31,560
which is negative Infinity lower than

107
00:04:31,560 --> 00:04:33,120
every other value and there's also an

108
00:04:33,120 --> 00:04:34,860
Nan which will give you back a value

109
00:04:34,860 --> 00:04:37,440
that's not a number so let's look at how

110
00:04:37,440 --> 00:04:41,840
we could use these in their intended way

111
00:04:42,419 --> 00:04:45,360
here's an example of the intended use of

112
00:04:45,360 --> 00:04:48,360
minus INF right so let's go back to the

113
00:04:48,360 --> 00:04:50,880
earlier find highest program we had a

114
00:04:50,880 --> 00:04:53,340
problem before and that was initially I

115
00:04:53,340 --> 00:04:55,680
set my highest to be equal to zero which

116
00:04:55,680 --> 00:04:58,199
means if my target list didn't have any

117
00:04:58,199 --> 00:05:01,440
values in it that were higher than zero

118
00:05:01,440 --> 00:05:04,199
then the function returned back zero

119
00:05:04,199 --> 00:05:07,320
well now I can set my highest value

120
00:05:07,320 --> 00:05:10,080
initially to negative Infinity which

121
00:05:10,080 --> 00:05:11,580
means it doesn't matter what's in the

122
00:05:11,580 --> 00:05:13,919
list at least one of those values in the

123
00:05:13,919 --> 00:05:16,320
list is going to be higher than negative

124
00:05:16,320 --> 00:05:19,139
Infinity so this now solves the problem

125
00:05:19,139 --> 00:05:21,060
that I had earlier where if I passed in

126
00:05:21,060 --> 00:05:23,580
a list of all negative numbers that it

127
00:05:23,580 --> 00:05:26,460
was unable to find the highest now I can

128
00:05:26,460 --> 00:05:29,039
use those special values in Python to

129
00:05:29,039 --> 00:05:32,960
solve certain types of problems

130
00:05:34,139 --> 00:05:37,380
so what is the intended use of Nan or

131
00:05:37,380 --> 00:05:39,419
not a number well there's certain

132
00:05:39,419 --> 00:05:41,220
mathematical calculations that just

133
00:05:41,220 --> 00:05:43,199
don't make sense right if you were to

134
00:05:43,199 --> 00:05:45,720
ask your your math professor your math

135
00:05:45,720 --> 00:05:47,580
teacher hey what is the result of this

136
00:05:47,580 --> 00:05:50,039
you would say that's not a legal

137
00:05:50,039 --> 00:05:52,680
operation it doesn't return back a value

138
00:05:52,680 --> 00:05:54,900
that is actually a number a very common

139
00:05:54,900 --> 00:05:56,220
example that you might have seen before

140
00:05:56,220 --> 00:05:58,320
is dividing something by zero right you

141
00:05:58,320 --> 00:06:02,220
can't divide something by zero and most

142
00:06:02,220 --> 00:06:03,720
programming languages in fact if you

143
00:06:03,720 --> 00:06:05,220
divide by zero they actually produce an

144
00:06:05,220 --> 00:06:07,020
error they crash the program and they

145
00:06:07,020 --> 00:06:08,820
say zero division error but they don't

146
00:06:08,820 --> 00:06:11,039
have to they could have instead of

147
00:06:11,039 --> 00:06:12,660
crashing the program return back some

148
00:06:12,660 --> 00:06:15,120
value to say hey that was an illegal

149
00:06:15,120 --> 00:06:16,860
operation and there's there's no result

150
00:06:16,860 --> 00:06:19,139
for that and that's what Nan is many

151
00:06:19,139 --> 00:06:21,300
different functions that we have in

152
00:06:21,300 --> 00:06:22,680
programming languages instead of

153
00:06:22,680 --> 00:06:25,319
crashing the program if it produces an

154
00:06:25,319 --> 00:06:27,660
invalid mathematical result then it

155
00:06:27,660 --> 00:06:29,639
gives us back an Nan for example

156
00:06:29,639 --> 00:06:33,300
Infinity minus infinity in Python is one

157
00:06:33,300 --> 00:06:35,340
example of that so down here you can see

158
00:06:35,340 --> 00:06:38,220
I import the math function there is a

159
00:06:38,220 --> 00:06:39,780
function that we can use to validate

160
00:06:39,780 --> 00:06:42,900
whether or not something is a valid

161
00:06:42,900 --> 00:06:45,960
number is a number and inside the math

162
00:06:45,960 --> 00:06:48,539
module there's a function called is Nan

163
00:06:48,539 --> 00:06:51,240
and if I do any of those illegal

164
00:06:51,240 --> 00:06:53,699
mathematical operations then it will

165
00:06:53,699 --> 00:06:55,500
tell me that yep that returned not a

166
00:06:55,500 --> 00:06:56,940
number so this is actually equivalent to

167
00:06:56,940 --> 00:07:00,060
Infinity minus infinity in Python this

168
00:07:00,060 --> 00:07:01,800
is a very large number with python

169
00:07:01,800 --> 00:07:03,720
internally ends up storing as Infinity

170
00:07:03,720 --> 00:07:06,960
so Infinity minus infinity is not a

171
00:07:06,960 --> 00:07:10,199
number infinity divided by Infinity is

172
00:07:10,199 --> 00:07:13,560
not a number so if I wanted to test my

173
00:07:13,560 --> 00:07:16,620
programs and see how are they going to

174
00:07:16,620 --> 00:07:18,780
behave when I feed it something that's

175
00:07:18,780 --> 00:07:22,020
not a number then I could use this float

176
00:07:22,020 --> 00:07:25,020
Nan to generate such a value pass it in

177
00:07:25,020 --> 00:07:26,639
and see that result so that's the

178
00:07:26,639 --> 00:07:30,300
intended use of Nan

179
00:07:30,300 --> 00:07:31,919
now we get to one of the more

180
00:07:31,919 --> 00:07:34,500
interesting findings in

181
00:07:34,500 --> 00:07:35,940
um Robert Hanson there are snakes and

182
00:07:35,940 --> 00:07:38,520
Zach Jones's presentation and that is

183
00:07:38,520 --> 00:07:41,460
what happens when you sort lists that

184
00:07:41,460 --> 00:07:43,740
have these special values in them well

185
00:07:43,740 --> 00:07:45,539
if you just have negative infinity and

186
00:07:45,539 --> 00:07:47,819
positive Infinity in them they behave

187
00:07:47,819 --> 00:07:49,199
pretty much the way you expect right

188
00:07:49,199 --> 00:07:50,520
here I have a list that has a negative

189
00:07:50,520 --> 00:07:52,319
infinity and a positive Infinity in it

190
00:07:52,319 --> 00:07:54,300
when I sort it negative Infinity is the

191
00:07:54,300 --> 00:07:55,620
lowest value it goes to one side

192
00:07:55,620 --> 00:07:58,199
positive Infinity the other side but

193
00:07:58,199 --> 00:08:01,500
when I have not a number in that list it

194
00:08:01,500 --> 00:08:04,319
really throws a wrench in the entire

195
00:08:04,319 --> 00:08:05,880
machine and everything just falls apart

196
00:08:05,880 --> 00:08:07,500
so here I'm going to create a couple of

197
00:08:07,500 --> 00:08:09,900
values just to shorten um my list that

198
00:08:09,900 --> 00:08:11,940
I'm typing out here I'll create NN is

199
00:08:11,940 --> 00:08:13,620
going to be a not a number and I is

200
00:08:13,620 --> 00:08:15,720
going to be negative infinity and I is

201
00:08:15,720 --> 00:08:17,639
going to be a positive Infinity here I'm

202
00:08:17,639 --> 00:08:19,560
going to sort a list that has some

203
00:08:19,560 --> 00:08:21,000
values in there you can see I've got a

204
00:08:21,000 --> 00:08:22,800
not a number here I've got a negative

205
00:08:22,800 --> 00:08:24,360
infinity and a positive Infinity in

206
00:08:24,360 --> 00:08:26,879
there you see that when it sorts it well

207
00:08:26,879 --> 00:08:30,419
it kind of where the n n was it broke it

208
00:08:30,419 --> 00:08:33,479
down into two lists almost right so the

209
00:08:33,479 --> 00:08:34,679
the

210
00:08:34,679 --> 00:08:36,000
um negative Infinity positive Infinity

211
00:08:36,000 --> 00:08:37,500
the things on the right hand side of

212
00:08:37,500 --> 00:08:38,399
this

213
00:08:38,399 --> 00:08:40,260
um those got sorted the things on the

214
00:08:40,260 --> 00:08:42,059
left hand side well actually those you

215
00:08:42,059 --> 00:08:43,380
can't tell because it was one and two

216
00:08:43,380 --> 00:08:45,240
trust me it's sorted those values so

217
00:08:45,240 --> 00:08:47,399
it's kind of like putting an n in there

218
00:08:47,399 --> 00:08:49,140
split the list in half and gave you two

219
00:08:49,140 --> 00:08:51,120
independent sorts you might think oh I

220
00:08:51,120 --> 00:08:53,399
can use NN to sort these two values nope

221
00:08:53,399 --> 00:08:54,899
that's not it's what that's not what's

222
00:08:54,899 --> 00:08:57,120
happening here here if I just put an NN

223
00:08:57,120 --> 00:08:59,220
in the middle of this thing notice that

224
00:08:59,220 --> 00:09:02,160
the numbers on the right the 6 and the

225
00:09:02,160 --> 00:09:03,839
one from the right hand side they got

226
00:09:03,839 --> 00:09:06,660
shifted over here to the left

227
00:09:06,660 --> 00:09:09,000
um and the 9 and the 10 stayed over here

228
00:09:09,000 --> 00:09:10,260
on the right so I looked at them like

229
00:09:10,260 --> 00:09:12,720
maybe maybe what's going on here is well

230
00:09:12,720 --> 00:09:14,640
eight was the biggest value that was

231
00:09:14,640 --> 00:09:17,339
before the NN so maybe those values on

232
00:09:17,339 --> 00:09:19,860
the left are all sorted anything up up

233
00:09:19,860 --> 00:09:21,720
to eight is to the left nope that's not

234
00:09:21,720 --> 00:09:23,880
what's happening here either we'll check

235
00:09:23,880 --> 00:09:25,680
out this last example here we got an NN

236
00:09:25,680 --> 00:09:28,620
and an i and an i in here and somehow

237
00:09:28,620 --> 00:09:32,459
our other 14 is left to the right hand

238
00:09:32,459 --> 00:09:34,220
side of not a number

239
00:09:34,220 --> 00:09:37,260
and all the numbers up to 20 are being

240
00:09:37,260 --> 00:09:42,420
sorted so 14 is greater than 20 in this

241
00:09:42,420 --> 00:09:46,740
combination so in this list oddly so

242
00:09:46,740 --> 00:09:50,399
what is happening here well

243
00:09:50,399 --> 00:09:52,680
just think of it as making absolutely no

244
00:09:52,680 --> 00:09:54,959
sense whatsoever because functionally

245
00:09:54,959 --> 00:09:56,580
that's what happens now what's happening

246
00:09:56,580 --> 00:09:58,560
underneath the hood here is the swords

247
00:09:58,560 --> 00:10:00,420
using what's called a merge list where

248
00:10:00,420 --> 00:10:02,160
it's splitting it in half and splitting

249
00:10:02,160 --> 00:10:03,660
it in half and splitting it in half and

250
00:10:03,660 --> 00:10:05,220
splitting in half and then at the bottom

251
00:10:05,220 --> 00:10:07,560
it's then comparing this number to this

252
00:10:07,560 --> 00:10:09,360
number and at some point it says is not

253
00:10:09,360 --> 00:10:11,940
a number greater than some other number

254
00:10:11,940 --> 00:10:13,740
and the answer is no it's it's not

255
00:10:13,740 --> 00:10:15,360
greater than that it's not less than

256
00:10:15,360 --> 00:10:18,120
that it's it's not a number right so

257
00:10:18,120 --> 00:10:20,160
there actually is some value that says

258
00:10:20,160 --> 00:10:22,320
yes or no but it it's not a correct

259
00:10:22,320 --> 00:10:24,420
answer whatever the answer is and so it

260
00:10:24,420 --> 00:10:25,980
does this merge sort and then it takes

261
00:10:25,980 --> 00:10:28,140
these at some point it falls apart as

262
00:10:28,140 --> 00:10:29,700
it's breaking in half and when it puts

263
00:10:29,700 --> 00:10:31,620
it back together things just go back

264
00:10:31,620 --> 00:10:34,560
together in jumbled ways so here you can

265
00:10:34,560 --> 00:10:35,700
see that we're just we're just going to

266
00:10:35,700 --> 00:10:39,360
have unexpected results coming back from

267
00:10:39,360 --> 00:10:43,200
a sort function if I put an n a n into

268
00:10:43,200 --> 00:10:46,519
that list

269
00:10:47,640 --> 00:10:50,160
so the question becomes how does one get

270
00:10:50,160 --> 00:10:54,120
an Nan INF or negative Infinity into a

271
00:10:54,120 --> 00:10:56,579
list and the answer is well if the

272
00:10:56,579 --> 00:11:00,120
program is accepting untrusted input and

273
00:11:00,120 --> 00:11:01,940
then passing that to the float function

274
00:11:01,940 --> 00:11:04,800
then it's trivial to do it right so here

275
00:11:04,800 --> 00:11:06,779
for example you'll see that I have a

276
00:11:06,779 --> 00:11:08,519
little list called Target list I've got

277
00:11:08,519 --> 00:11:10,860
a function called add values which takes

278
00:11:10,860 --> 00:11:13,019
in my target list and what this is going

279
00:11:13,019 --> 00:11:14,279
to do is it's going to call the input

280
00:11:14,279 --> 00:11:16,320
function the input will accept any

281
00:11:16,320 --> 00:11:17,880
string and it's going to store that in

282
00:11:17,880 --> 00:11:20,459
the variable new value then I'm going to

283
00:11:20,459 --> 00:11:23,579
take that untrusted value in sort of new

284
00:11:23,579 --> 00:11:25,620
value inside of new value pass it to the

285
00:11:25,620 --> 00:11:27,480
float function and append that value to

286
00:11:27,480 --> 00:11:28,680
my list

287
00:11:28,680 --> 00:11:31,680
so now if I call add value and I pass it

288
00:11:31,680 --> 00:11:33,420
in my target list and I type in an 8

289
00:11:33,420 --> 00:11:35,399
well the number eight was turned into a

290
00:11:35,399 --> 00:11:38,279
float and added to the list but if when

291
00:11:38,279 --> 00:11:40,620
I call it if I pass in if I enter the

292
00:11:40,620 --> 00:11:44,760
string n a n then an n a n is added to

293
00:11:44,760 --> 00:11:47,339
my list and now that can be used to

294
00:11:47,339 --> 00:11:50,459
break sort functions

295
00:11:50,459 --> 00:11:52,019
now things are about to get interesting

296
00:11:52,019 --> 00:11:54,240
if you can break sort then you can break

297
00:11:54,240 --> 00:11:56,160
all of the functions that depend upon

298
00:11:56,160 --> 00:11:59,459
sort like Max and Min Min finds the

299
00:11:59,459 --> 00:12:01,800
smallest value that's in a list in Max

300
00:12:01,800 --> 00:12:04,620
what finds the largest value in a list

301
00:12:04,620 --> 00:12:06,899
so if programs depend upon those we can

302
00:12:06,899 --> 00:12:08,880
change the behavior and the expected

303
00:12:08,880 --> 00:12:10,920
outcome of those programs here's an

304
00:12:10,920 --> 00:12:13,620
example of a program that has two lists

305
00:12:13,620 --> 00:12:15,420
it's got a list of players and their

306
00:12:15,420 --> 00:12:17,279
Associated scores so Chris has a score

307
00:12:17,279 --> 00:12:20,880
of 96 Ed has 95 and so forth and the way

308
00:12:20,880 --> 00:12:23,160
that we determine who has the highest

309
00:12:23,160 --> 00:12:25,680
score is we zip together the list of

310
00:12:25,680 --> 00:12:28,019
scores with the list of players and then

311
00:12:28,019 --> 00:12:30,480
we find the maximum value in that list

312
00:12:30,480 --> 00:12:32,820
and here you can say that Tom has the

313
00:12:32,820 --> 00:12:34,019
highest score

314
00:12:34,019 --> 00:12:36,480
but now as the attacker I get to come

315
00:12:36,480 --> 00:12:39,959
along and I get to put values into these

316
00:12:39,959 --> 00:12:43,019
Associated lists so I insert myself in

317
00:12:43,019 --> 00:12:45,600
position zero of the players list and I

318
00:12:45,600 --> 00:12:49,139
insert my score as not a number in

319
00:12:49,139 --> 00:12:52,800
position zero of the scores list

320
00:12:52,800 --> 00:12:56,100
now when you have a not a number as the

321
00:12:56,100 --> 00:12:58,200
first item in the list this actually

322
00:12:58,200 --> 00:13:01,139
behaves very predictably whereas before

323
00:13:01,139 --> 00:13:03,300
we saw it it was unpredictable results

324
00:13:03,300 --> 00:13:05,579
if not a number is the first item in the

325
00:13:05,579 --> 00:13:08,399
list it is very predictable it will be

326
00:13:08,399 --> 00:13:11,279
both the highest value and the lowest

327
00:13:11,279 --> 00:13:13,980
value in the list when you call Max and

328
00:13:13,980 --> 00:13:17,040
Min so here I call Max I um tell it to

329
00:13:17,040 --> 00:13:18,839
zip together my scores and my players

330
00:13:18,839 --> 00:13:21,779
who's got the highest score Mark has the

331
00:13:21,779 --> 00:13:23,820
highest score who's got the lowest score

332
00:13:23,820 --> 00:13:26,940
Mark also has the lowest score in this

333
00:13:26,940 --> 00:13:29,940
list I have full control over where I am

334
00:13:29,940 --> 00:13:32,279
in this list

335
00:13:32,279 --> 00:13:33,720
so that's really what I have for you

336
00:13:33,720 --> 00:13:35,700
today what conclusions can we draw from

337
00:13:35,700 --> 00:13:36,899
this and what do we have to know as

338
00:13:36,899 --> 00:13:39,240
attackers and Defenders well for the

339
00:13:39,240 --> 00:13:41,279
Defenders it all comes down to input

340
00:13:41,279 --> 00:13:43,800
validation right we have to make sure

341
00:13:43,800 --> 00:13:45,899
our developers aren't sorting lists that

342
00:13:45,899 --> 00:13:48,120
have Nan inside of them because it's

343
00:13:48,120 --> 00:13:51,300
going to cause unexpected outputs and

344
00:13:51,300 --> 00:13:54,360
unexpected results from their code

345
00:13:54,360 --> 00:13:56,880
if they're going to be confirming that

346
00:13:56,880 --> 00:14:01,680
values are well not not a number or yes

347
00:14:01,680 --> 00:14:02,700
if they're going to be doing input

348
00:14:02,700 --> 00:14:04,560
validation then what they need to do is

349
00:14:04,560 --> 00:14:07,079
use math is Nan inside their python

350
00:14:07,079 --> 00:14:08,820
programs confirm that these things are

351
00:14:08,820 --> 00:14:09,540
not

352
00:14:09,540 --> 00:14:12,540
not in numbers for attackers what this

353
00:14:12,540 --> 00:14:16,019
means is well we can try and insert nans

354
00:14:16,019 --> 00:14:18,600
into program lists and things like that

355
00:14:18,600 --> 00:14:21,720
to see how they handle how they handle

356
00:14:21,720 --> 00:14:25,680
those types of values if we put an Nan

357
00:14:25,680 --> 00:14:27,540
inside a list it's going to behave in

358
00:14:27,540 --> 00:14:29,760
very unexpected ways if we put an

359
00:14:29,760 --> 00:14:32,220
Infinity inside of a list that's going

360
00:14:32,220 --> 00:14:33,660
to be the highest value that's in that

361
00:14:33,660 --> 00:14:35,399
list if we put a negative Infinity then

362
00:14:35,399 --> 00:14:36,899
we can guarantee that that will be the

363
00:14:36,899 --> 00:14:40,500
lowest value in the list guarantee

364
00:14:40,500 --> 00:14:42,480
assuming there's not an Nan in there

365
00:14:42,480 --> 00:14:45,600
breaking everything else okay all right

366
00:14:45,600 --> 00:14:47,699
thanks for giving me your time I hope

367
00:14:47,699 --> 00:14:49,800
you enjoyed this talk and have a great

368
00:14:49,800 --> 00:14:52,639
time at greenvillecon

369
00:14:55,220 --> 00:14:58,299
[Music]

370
00:14:58,579 --> 00:15:01,579
thank you

