1
00:00:00,000 --> 00:00:04,950
hello everyone my name is mark Baggett

2
00:00:02,070 --> 00:00:09,300
welcome to krinkle con and my talk on

3
00:00:04,950 --> 00:00:12,210
escaping Python shells first I'd like to

4
00:00:09,300 --> 00:00:14,670
thank Santa Claus for inviting me here

5
00:00:12,210 --> 00:00:17,369
to talk I have always dreamed of

6
00:00:14,670 --> 00:00:19,140
speaking at Kringle con and it's just

7
00:00:17,369 --> 00:00:21,359
has this been an amazing conference just

8
00:00:19,140 --> 00:00:24,300
to go around and see all the things with

9
00:00:21,359 --> 00:00:25,500
that i know all of you have many of the

10
00:00:24,300 --> 00:00:26,730
things you could be doing here at this

11
00:00:25,500 --> 00:00:29,220
conference there's a lot of things going

12
00:00:26,730 --> 00:00:31,109
on so let me just jump right into the

13
00:00:29,220 --> 00:00:34,469
material if you guys wouldn't mind here

14
00:00:31,109 --> 00:00:36,090
in the front the balloon heads if you

15
00:00:34,469 --> 00:00:37,590
wouldn't mind pulling down your your

16
00:00:36,090 --> 00:00:40,260
balloon just a little bit so the people

17
00:00:37,590 --> 00:00:41,730
in behind you can see I appreciate that

18
00:00:40,260 --> 00:00:44,010
very much

19
00:00:41,730 --> 00:00:47,160
all right so my name is Mark Baggett I

20
00:00:44,010 --> 00:00:49,890
am a senior instructor for sans I'm also

21
00:00:47,160 --> 00:00:51,690
the author of SEC 573 which is

22
00:00:49,890 --> 00:00:55,140
automating information security with

23
00:00:51,690 --> 00:00:57,989
Python there we talk about developing

24
00:00:55,140 --> 00:01:00,899
tools in Python how to apply Python

25
00:00:57,989 --> 00:01:03,320
development skills to forensics to

26
00:01:00,899 --> 00:01:05,280
defense and Incident Response

27
00:01:03,320 --> 00:01:07,740
we've got my master's degree in

28
00:01:05,280 --> 00:01:10,950
information security got my GSE and I've

29
00:01:07,740 --> 00:01:13,229
been doing this for a while so if you

30
00:01:10,950 --> 00:01:14,700
would like to follow along with me

31
00:01:13,229 --> 00:01:16,619
during the presentation I've got a

32
00:01:14,700 --> 00:01:19,970
couple of URLs you can go to you can go

33
00:01:16,619 --> 00:01:24,000
to tinyurl.com slash pythons secrets

34
00:01:19,970 --> 00:01:26,070
there you will find some code samples

35
00:01:24,000 --> 00:01:29,490
that you'll see me using throughout

36
00:01:26,070 --> 00:01:30,839
today's presentation also you can go

37
00:01:29,490 --> 00:01:33,179
directly to it if you don't trust tiny

38
00:01:30,840 --> 00:01:35,369
URLs at gist github.com

39
00:01:33,180 --> 00:01:36,509
i'm slash mark Baggett there you'll see

40
00:01:35,369 --> 00:01:38,460
several presentations that I've done

41
00:01:36,509 --> 00:01:40,409
this one's called pythons sinister

42
00:01:38,460 --> 00:01:42,720
secrets and if you click on that you'll

43
00:01:40,409 --> 00:01:45,509
find once again that same code that you

44
00:01:42,720 --> 00:01:47,908
can go directly to with tinyurl so I'm

45
00:01:45,509 --> 00:01:51,450
talking to you today about how to escape

46
00:01:47,909 --> 00:01:54,140
from restricted Python shells there's a

47
00:01:51,450 --> 00:01:56,130
couple of different techniques that well

48
00:01:54,140 --> 00:01:58,500
systems administrators will take in

49
00:01:56,130 --> 00:02:01,589
order to try and create a Python

50
00:01:58,500 --> 00:02:03,360
environment where you can go in and they

51
00:02:01,590 --> 00:02:04,649
can use these environments for education

52
00:02:03,360 --> 00:02:07,049
for teaching you how to do things in

53
00:02:04,649 --> 00:02:09,628
Python and but they don't want you to

54
00:02:07,049 --> 00:02:11,910
have full control of the system and as

55
00:02:09,628 --> 00:02:13,799
you'll see here it's it's almost

56
00:02:11,910 --> 00:02:16,740
impossible to create

57
00:02:13,800 --> 00:02:18,720
a Python shell that gives you the

58
00:02:16,740 --> 00:02:23,190
interactivity that you need to be able

59
00:02:18,720 --> 00:02:25,230
to really experience Python without also

60
00:02:23,190 --> 00:02:27,030
giving you the ability to access the

61
00:02:25,230 --> 00:02:29,100
underlying system so I'm gonna talk

62
00:02:27,030 --> 00:02:31,500
about a couple of techniques and how we

63
00:02:29,100 --> 00:02:33,960
can get around those so one technique

64
00:02:31,500 --> 00:02:37,650
that systems administrators will use is

65
00:02:33,960 --> 00:02:40,620
to to override the modules that are in

66
00:02:37,650 --> 00:02:42,540
memory on a system with other functions

67
00:02:40,620 --> 00:02:44,850
so in this case I'm importing the Syst

68
00:02:42,540 --> 00:02:47,730
module this is where you would go to get

69
00:02:44,850 --> 00:02:50,790
access to the modules that are built in

70
00:02:47,730 --> 00:02:53,010
to Python and loaded in memory by the

71
00:02:50,790 --> 00:02:57,810
Python interpreter so inside this system

72
00:02:53,010 --> 00:02:59,399
and then go into modules os got systems

73
00:02:57,810 --> 00:03:02,070
and I'm going to overwrite the system

74
00:02:59,400 --> 00:03:04,110
function in there with a function that

75
00:03:02,070 --> 00:03:06,030
just prints stop hacking and I'll do the

76
00:03:04,110 --> 00:03:07,950
same thing for the P open function here

77
00:03:06,030 --> 00:03:09,840
where I'm going to overwrite that with a

78
00:03:07,950 --> 00:03:12,540
function that just stops just as stop

79
00:03:09,840 --> 00:03:14,040
hacking then once I've overwritten those

80
00:03:12,540 --> 00:03:17,040
functions in memory I can delete the

81
00:03:14,040 --> 00:03:19,709
system module and then if at some point

82
00:03:17,040 --> 00:03:22,350
later in time you come and you import

83
00:03:19,709 --> 00:03:24,600
the OS module and then you do something

84
00:03:22,350 --> 00:03:26,609
like oh s dot system trying to execute

85
00:03:24,600 --> 00:03:29,310
that system function inside the OS

86
00:03:26,610 --> 00:03:31,489
module you don't actually get to call OS

87
00:03:29,310 --> 00:03:33,660
dot system instead what you get is

88
00:03:31,489 --> 00:03:36,540
executing my a little function up here

89
00:03:33,660 --> 00:03:37,739
that just prints stop hacking so this is

90
00:03:36,540 --> 00:03:39,390
one technique that some systems

91
00:03:37,739 --> 00:03:42,390
administrators we used create a

92
00:03:39,390 --> 00:03:46,559
restricted Python shell but this is

93
00:03:42,390 --> 00:03:49,920
futile if someone can load modules

94
00:03:46,560 --> 00:03:54,360
import modules then they can also reload

95
00:03:49,920 --> 00:03:56,730
modules so in spite on three there is a

96
00:03:54,360 --> 00:03:58,110
module called import Lib and if you call

97
00:03:56,730 --> 00:04:00,359
import lib dot

98
00:03:58,110 --> 00:04:02,400
reload you can tell it to reload

99
00:04:00,360 --> 00:04:05,160
specific modules so for example I can

100
00:04:02,400 --> 00:04:06,840
tell it to reload the OS module from

101
00:04:05,160 --> 00:04:08,730
disk at which point it reaches out to

102
00:04:06,840 --> 00:04:10,800
the hard drive and it reloads that

103
00:04:08,730 --> 00:04:12,780
module overwriting the nasty function

104
00:04:10,800 --> 00:04:15,780
that I put in memory so that now you can

105
00:04:12,780 --> 00:04:17,790
call OS dot system and then run a

106
00:04:15,780 --> 00:04:20,579
function such as ID and it no longer

107
00:04:17,790 --> 00:04:22,500
executes that my function that's no

108
00:04:20,579 --> 00:04:25,349
longer in memory now the valid code is

109
00:04:22,500 --> 00:04:27,780
back in memory so if someone is

110
00:04:25,350 --> 00:04:30,150
overwriting functions in memory then

111
00:04:27,780 --> 00:04:31,950
simply reloading the module will allow

112
00:04:30,150 --> 00:04:36,299
you to get back the original

113
00:04:31,950 --> 00:04:39,750
functionality another way that systems

114
00:04:36,300 --> 00:04:42,450
administrators will try and create a

115
00:04:39,750 --> 00:04:44,400
restricted Python shell is they'll have

116
00:04:42,450 --> 00:04:46,889
Python and launched a child process and

117
00:04:44,400 --> 00:04:49,229
then they'll filter the input in the

118
00:04:46,889 --> 00:04:52,440
parent process and then pass that down

119
00:04:49,230 --> 00:04:53,760
to the child process so for example here

120
00:04:52,440 --> 00:04:55,410
you don't you don't really have to

121
00:04:53,760 --> 00:04:58,380
understand everything that's going in on

122
00:04:55,410 --> 00:05:00,600
here but I import read lines which is

123
00:04:58,380 --> 00:05:02,550
going to give me access to the command

124
00:05:00,600 --> 00:05:04,710
line reading things as they're being

125
00:05:02,550 --> 00:05:07,440
typed on the keyboard and I import code

126
00:05:04,710 --> 00:05:10,859
code is gonna allow me to execute down

127
00:05:07,440 --> 00:05:12,960
here I call code interact a new shell

128
00:05:10,860 --> 00:05:15,960
and in this shell I want the read

129
00:05:12,960 --> 00:05:19,020
function for this shell to be equal to

130
00:05:15,960 --> 00:05:20,430
this thing I've called read filter and

131
00:05:19,020 --> 00:05:22,950
if we come up here and look in read

132
00:05:20,430 --> 00:05:25,290
filter I can see that out I'll use the

133
00:05:22,950 --> 00:05:27,180
input function to collect things on the

134
00:05:25,290 --> 00:05:29,729
keyboard and then I'm just gonna check

135
00:05:27,180 --> 00:05:31,860
to see if whatever is typed in the on

136
00:05:29,729 --> 00:05:36,060
the command line or in the Python shell

137
00:05:31,860 --> 00:05:38,790
includes the words import eval exec or

138
00:05:36,060 --> 00:05:41,100
compile those four keywords are

139
00:05:38,790 --> 00:05:42,870
notoriously dangerous and usually

140
00:05:41,100 --> 00:05:45,270
tightly controlled if someone's trying

141
00:05:42,870 --> 00:05:46,800
to create a restricted Python

142
00:05:45,270 --> 00:05:48,750
environment because with these things

143
00:05:46,800 --> 00:05:53,039
well import as we saw earlier can be

144
00:05:48,750 --> 00:05:55,080
used to load modules eval can be used to

145
00:05:53,039 --> 00:05:58,229
pass it a script in the form of a string

146
00:05:55,080 --> 00:06:00,840
and it'll execute that script exec can

147
00:05:58,229 --> 00:06:02,940
as well and compile will compile we'll

148
00:06:00,840 --> 00:06:05,130
take a script and turn it into bytecode

149
00:06:02,940 --> 00:06:07,440
we're gonna look at each of these so

150
00:06:05,130 --> 00:06:11,280
this is one way that people will do this

151
00:06:07,440 --> 00:06:14,580
and this is almost effective which means

152
00:06:11,280 --> 00:06:17,460
it's 100% not effective you it doesn't

153
00:06:14,580 --> 00:06:18,570
work then we'll look at a couple of

154
00:06:17,460 --> 00:06:21,000
different ways we could get around that

155
00:06:18,570 --> 00:06:23,010
so if someone has read for example if

156
00:06:21,000 --> 00:06:25,110
someone has restricted the exec function

157
00:06:23,010 --> 00:06:29,460
right they they don't allow you to run

158
00:06:25,110 --> 00:06:31,140
exec well so for example here I'm in a

159
00:06:29,460 --> 00:06:35,370
restricted shell and I just type import

160
00:06:31,140 --> 00:06:40,110
OS well the import command is forbidden

161
00:06:35,370 --> 00:06:40,560
and in this this example the the x'q

162
00:06:40,110 --> 00:06:42,210
come

163
00:06:40,560 --> 00:06:45,510
can still be used so what I can do is I

164
00:06:42,210 --> 00:06:48,750
can say exec and then I could build a

165
00:06:45,510 --> 00:06:51,000
string that says import OS now if my

166
00:06:48,750 --> 00:06:52,770
string simply said import OS then that

167
00:06:51,000 --> 00:06:55,050
filter that's looking to see does my

168
00:06:52,770 --> 00:06:58,710
line contain the word import anywhere

169
00:06:55,050 --> 00:07:02,280
would block it so I'll break my import

170
00:06:58,710 --> 00:07:05,190
statement into two strings so my first

171
00:07:02,280 --> 00:07:09,030
string says iymp and then I'll add party

172
00:07:05,190 --> 00:07:11,490
space OS which becomes in portal s so

173
00:07:09,030 --> 00:07:13,888
then when I exact that string it imports

174
00:07:11,490 --> 00:07:17,760
the OS module and now I can run OS

175
00:07:13,889 --> 00:07:20,340
system and run the ID function there now

176
00:07:17,760 --> 00:07:23,310
exec you'll see takes a straight string

177
00:07:20,340 --> 00:07:25,260
of Python code and it'll execute it it

178
00:07:23,310 --> 00:07:28,680
expects that this string is going to be

179
00:07:25,260 --> 00:07:32,930
a series of Python keywords and not a

180
00:07:28,680 --> 00:07:36,419
call to a function that exists in Python

181
00:07:32,930 --> 00:07:39,919
eval is another dangerous command that

182
00:07:36,419 --> 00:07:43,560
is off than controlled what eval does is

183
00:07:39,919 --> 00:07:47,010
it works just like exec but instead of

184
00:07:43,560 --> 00:07:49,440
having just a straight-up Python command

185
00:07:47,010 --> 00:07:52,560
that's being passed to eval it is

186
00:07:49,440 --> 00:07:54,780
expecting you to give a Python function

187
00:07:52,560 --> 00:07:56,610
or a call to a Python function it's

188
00:07:54,780 --> 00:07:59,010
expecting that whatever's inside of the

189
00:07:56,610 --> 00:08:02,580
string that you pass it is going to have

190
00:07:59,010 --> 00:08:04,530
a return value so here we try to import

191
00:08:02,580 --> 00:08:08,010
the OS module it doesn't allow us to do

192
00:08:04,530 --> 00:08:11,719
that so another way I could import OS is

193
00:08:08,010 --> 00:08:15,229
I could call the import function and

194
00:08:11,720 --> 00:08:17,880
pass it OS so underscore underscore

195
00:08:15,229 --> 00:08:20,400
import underscore underscore is a

196
00:08:17,880 --> 00:08:22,350
function version of the import command

197
00:08:20,400 --> 00:08:25,620
so here I'm going to try and call the

198
00:08:22,350 --> 00:08:27,479
import function and import OS and again

199
00:08:25,620 --> 00:08:32,370
you can see the command is forbidden why

200
00:08:27,479 --> 00:08:34,708
well because import the letters iymp ort

201
00:08:32,370 --> 00:08:38,190
are on my line and that's being filtered

202
00:08:34,708 --> 00:08:41,489
by that input filter but I can take this

203
00:08:38,190 --> 00:08:43,650
and break it down into two strings so if

204
00:08:41,490 --> 00:08:46,350
I just take this line here put it image

205
00:08:43,650 --> 00:08:50,100
from my quotes as I am and then add

206
00:08:46,350 --> 00:08:52,920
port1 dur score underscore OS then it

207
00:08:50,100 --> 00:08:54,480
right now instead of using exec I'm

208
00:08:52,920 --> 00:08:56,279
going to call eval because

209
00:08:54,480 --> 00:08:58,529
this is a function and not a statement

210
00:08:56,279 --> 00:09:02,579
I'm going to call eval this is going to

211
00:08:58,529 --> 00:09:05,579
execute that function and return back to

212
00:09:02,579 --> 00:09:08,250
me the operating system or the OS that

213
00:09:05,579 --> 00:09:11,790
was called it's going to load that

214
00:09:08,250 --> 00:09:15,149
module into this variable named OS so

215
00:09:11,790 --> 00:09:19,110
now I can call OS system and execute

216
00:09:15,149 --> 00:09:20,940
functions within it compile is another

217
00:09:19,110 --> 00:09:22,350
one that it's awful restrictive but I'm

218
00:09:20,940 --> 00:09:24,029
going to show these to you in the form

219
00:09:22,350 --> 00:09:26,250
of a demonstration so I'm gonna come

220
00:09:24,029 --> 00:09:27,990
over here to a Python shell and let's

221
00:09:26,250 --> 00:09:31,980
just let me actually get out of this and

222
00:09:27,990 --> 00:09:34,440
let's cat my restricted shelf UI here

223
00:09:31,980 --> 00:09:36,630
you can see I've got my miry filter and

224
00:09:34,440 --> 00:09:38,639
this is going to filter out whatever's

225
00:09:36,630 --> 00:09:40,230
in the black list and I'm actually gonna

226
00:09:38,639 --> 00:09:41,760
run this for different times with four

227
00:09:40,230 --> 00:09:43,589
different restrictions the first time

228
00:09:41,760 --> 00:09:46,500
I'm going to have a black list that

229
00:09:43,589 --> 00:09:49,649
blacks air that blocks import eval and

230
00:09:46,500 --> 00:09:52,920
compile the second time I'm gonna I'm

231
00:09:49,649 --> 00:09:55,709
gonna block import eval your import exec

232
00:09:52,920 --> 00:09:59,099
and compile and the last time I'm going

233
00:09:55,709 --> 00:10:01,319
to blacklist import exec and eval and

234
00:09:59,100 --> 00:10:04,050
then this very last time I'm going to

235
00:10:01,319 --> 00:10:06,240
block all four of the dangerous commands

236
00:10:04,050 --> 00:10:07,920
and see what we can do there all right

237
00:10:06,240 --> 00:10:11,670
so let's run this thing here so I'm

238
00:10:07,920 --> 00:10:13,800
gonna say Python 3 restricted show and

239
00:10:11,670 --> 00:10:21,149
it comes up with my restricted shell so

240
00:10:13,800 --> 00:10:22,500
much I import hey or exec exact I can

241
00:10:21,149 --> 00:10:24,089
see that it tells me that's a built-in

242
00:10:22,500 --> 00:10:26,399
function which means it works if I tried

243
00:10:24,089 --> 00:10:28,529
eval I can see that that's forbidden I

244
00:10:26,399 --> 00:10:29,880
could try to compile and see that one is

245
00:10:28,529 --> 00:10:33,449
forbidden so the only one that's not

246
00:10:29,880 --> 00:10:37,139
forbidden here is exec so I want to

247
00:10:33,449 --> 00:10:39,300
import the OS module and then run an OS

248
00:10:37,139 --> 00:10:40,860
that's call OS system to execute a

249
00:10:39,300 --> 00:10:43,620
command on it on the remote system so

250
00:10:40,860 --> 00:10:46,110
I'm going to let's do this if I tried to

251
00:10:43,620 --> 00:10:48,360
just say import OS alright it doesn't

252
00:10:46,110 --> 00:10:58,310
like that let's put it inside a quotes

253
00:10:48,360 --> 00:11:00,779
though and pass that to exec ok and

254
00:10:58,310 --> 00:11:01,130
still doesn't like that because it can

255
00:11:00,779 --> 00:11:04,689
still

256
00:11:01,130 --> 00:11:07,010
my string so let's break up the string

257
00:11:04,690 --> 00:11:11,390
and it seemed to work so now I can call

258
00:11:07,010 --> 00:11:12,980
OS dot system and I can give it a

259
00:11:11,390 --> 00:11:18,830
command that I want to run such as the

260
00:11:12,980 --> 00:11:20,750
ID command or the LS command oops or a

261
00:11:18,830 --> 00:11:24,860
Kaos command which does nothing how

262
00:11:20,750 --> 00:11:27,650
about the LS command all right typing is

263
00:11:24,860 --> 00:11:28,280
hard close quote close parenthesis there

264
00:11:27,650 --> 00:11:31,340
you go

265
00:11:28,280 --> 00:11:33,740
so that runs the LS command all right so

266
00:11:31,340 --> 00:11:36,950
in this case exec was allowed let me hit

267
00:11:33,740 --> 00:11:39,260
control D to get out of that and now i'm

268
00:11:36,950 --> 00:11:40,640
i'm in a new restricted show so let's

269
00:11:39,260 --> 00:11:46,460
see what commands work here I'm gonna

270
00:11:40,640 --> 00:11:50,660
try import doesn't work exec doesn't

271
00:11:46,460 --> 00:11:53,330
work eval eval works compile compile

272
00:11:50,660 --> 00:11:56,420
doesn't work work but eval works so in

273
00:11:53,330 --> 00:11:58,820
this case eval wants a function so I

274
00:11:56,420 --> 00:12:04,219
could try and call the function version

275
00:11:58,820 --> 00:12:06,950
of import and see what happens here

276
00:12:04,220 --> 00:12:17,090
that's again forbidden let's break that

277
00:12:06,950 --> 00:12:19,880
down into a string let's put this into a

278
00:12:17,090 --> 00:12:22,700
module called OS and I need to break

279
00:12:19,880 --> 00:12:26,210
that string somewhere so I don't have

280
00:12:22,700 --> 00:12:29,330
the word import in my string and I call

281
00:12:26,210 --> 00:12:35,330
OS dot system and give it a command such

282
00:12:29,330 --> 00:12:38,330
as ID okay so if the eval function is

283
00:12:35,330 --> 00:12:42,290
blocked then we can use this syntax to

284
00:12:38,330 --> 00:12:44,240
get around that and execute code all

285
00:12:42,290 --> 00:12:45,860
right let's hit control D try our next

286
00:12:44,240 --> 00:12:49,610
restricted show alright so what do we

287
00:12:45,860 --> 00:12:53,780
have here let's try it import nope let's

288
00:12:49,610 --> 00:12:56,420
try exec eval all of those are blocked

289
00:12:53,780 --> 00:12:58,640
but compile compile is still allowed so

290
00:12:56,420 --> 00:13:00,760
what does compile do well compiled takes

291
00:12:58,640 --> 00:13:03,350
a string and it turns it into bytecode

292
00:13:00,760 --> 00:13:07,819
so what I could do is do something like

293
00:13:03,350 --> 00:13:12,230
this I could say code equals compile

294
00:13:07,820 --> 00:13:13,890
let's just say import well let's say I'm

295
00:13:12,230 --> 00:13:21,580
gonna have to break this up

296
00:13:13,890 --> 00:13:23,890
m+ port OS okay so it's also gonna take

297
00:13:21,580 --> 00:13:26,440
a second parameter which is a blank

298
00:13:23,890 --> 00:13:29,470
string and then a third parameter which

299
00:13:26,440 --> 00:13:32,440
is the word single it says compile that

300
00:13:29,470 --> 00:13:36,780
single line into byte code okay so now

301
00:13:32,440 --> 00:13:39,850
code if I look at it well it contains a

302
00:13:36,780 --> 00:13:43,240
Python code object now you can't just

303
00:13:39,850 --> 00:13:44,710
run this I need to I need to have find a

304
00:13:43,240 --> 00:13:46,300
way to execute it so what I can do is I

305
00:13:44,710 --> 00:13:48,550
can create a function here I'm just

306
00:13:46,300 --> 00:13:51,699
gonna create a function called a that

307
00:13:48,550 --> 00:13:56,260
does nothing and then I'm gonna say a

308
00:13:51,700 --> 00:13:58,870
dot a dot underscore underscore code is

309
00:13:56,260 --> 00:14:02,350
equal to my code variable overwriting

310
00:13:58,870 --> 00:14:06,010
the existing code on that function now

311
00:14:02,350 --> 00:14:11,980
when I run a hopefully that imported OS

312
00:14:06,010 --> 00:14:14,890
so let's try OS dot system ID you see

313
00:14:11,980 --> 00:14:18,700
that in fact it did import my OS module

314
00:14:14,890 --> 00:14:22,090
and I was still able to execute code

315
00:14:18,700 --> 00:14:25,660
right so that's what you can do if

316
00:14:22,090 --> 00:14:28,090
import exec and compile are blocked

317
00:14:25,660 --> 00:14:34,469
let's try one last one and that is what

318
00:14:28,090 --> 00:14:34,470
happens if execute the ID command code

319
00:14:34,589 --> 00:14:41,850
hmm let's see here let's let me try that

320
00:14:38,189 --> 00:14:45,180
again shall one shell to shell 3 let's

321
00:14:41,850 --> 00:14:47,149
try this last this last restricted shell

322
00:14:45,180 --> 00:14:51,739
I'll here

323
00:14:47,149 --> 00:14:55,769
import is is blocked exec is blocked

324
00:14:51,740 --> 00:14:58,379
evals block compile is blocked so how

325
00:14:55,769 --> 00:15:00,240
can I get around here well in this

326
00:14:58,379 --> 00:15:01,709
restricted shell I can't use any of the

327
00:15:00,240 --> 00:15:04,829
tricks that I've used before but what I

328
00:15:01,709 --> 00:15:06,719
can do is I can go back to a different

329
00:15:04,829 --> 00:15:12,239
machine a machine that I control for

330
00:15:06,720 --> 00:15:13,949
example here is here here is a different

331
00:15:12,240 --> 00:15:17,220
computer one that's controlled by the

332
00:15:13,949 --> 00:15:21,540
attacker sorry so here I'm going to type

333
00:15:17,220 --> 00:15:23,490
Python 3 and then I'm going to put into

334
00:15:21,540 --> 00:15:26,430
Python 3 a little module that I've

335
00:15:23,490 --> 00:15:29,759
created called make object ok and you

336
00:15:26,430 --> 00:15:32,189
can grab a copy of make object on from

337
00:15:29,759 --> 00:15:35,639
my github what make object does is it

338
00:15:32,189 --> 00:15:38,459
turns a Python function that's in memory

339
00:15:35,639 --> 00:15:43,160
into a string so here I can create a

340
00:15:38,459 --> 00:15:45,930
function let's just call this def bypass

341
00:15:43,160 --> 00:15:48,149
doesn't take in any arguments and in

342
00:15:45,930 --> 00:15:53,729
here what bypass is going to do is going

343
00:15:48,149 --> 00:15:59,279
to import OS it's going to print boom to

344
00:15:53,730 --> 00:16:01,670
the screen and then I'm going to print

345
00:15:59,279 --> 00:16:05,430
the results of calling OS system and

346
00:16:01,670 --> 00:16:07,259
passing it the ID command so now I've

347
00:16:05,430 --> 00:16:09,239
got my function called bypass I would

348
00:16:07,259 --> 00:16:11,519
like to take it out of memory on this

349
00:16:09,240 --> 00:16:16,800
Python system and move it to the other

350
00:16:11,519 --> 00:16:19,649
system so first let me paste my get

351
00:16:16,800 --> 00:16:22,649
object function into this and then I'm

352
00:16:19,649 --> 00:16:26,399
gonna call get object or make object

353
00:16:22,649 --> 00:16:30,269
excuse me and I'm gonna pass I'm gonna

354
00:16:26,399 --> 00:16:33,779
pass that my function called bypass and

355
00:16:30,269 --> 00:16:35,910
when I do it creates this string that I

356
00:16:33,779 --> 00:16:38,129
can just copy and paste into the remote

357
00:16:35,910 --> 00:16:40,550
system now so let's do that let's just

358
00:16:38,129 --> 00:16:40,550
take this

359
00:16:40,740 --> 00:16:48,160
and copy it I'll come back over here and

360
00:16:44,730 --> 00:16:50,590
none of those commands know the previous

361
00:16:48,160 --> 00:16:54,400
commands worked so let me paste this in

362
00:16:50,590 --> 00:16:57,790
here and so this created a function

363
00:16:54,400 --> 00:17:01,000
called a and then it used some

364
00:16:57,790 --> 00:17:02,469
typecasting to create a new code object

365
00:17:01,000 --> 00:17:04,599
passing in all of the object and here

366
00:17:02,470 --> 00:17:07,720
you can see these are passed in as byte

367
00:17:04,599 --> 00:17:10,449
codes now all the functions in here such

368
00:17:07,720 --> 00:17:13,530
as OS and system and others are passed

369
00:17:10,450 --> 00:17:16,000
into strings which means if I needed to

370
00:17:13,530 --> 00:17:18,399
break these things up for example if

371
00:17:16,000 --> 00:17:23,260
system was blocked well I could just

372
00:17:18,400 --> 00:17:25,690
change that to sis plus stem and that

373
00:17:23,260 --> 00:17:28,300
would work just fine so now what happens

374
00:17:25,690 --> 00:17:30,940
when I run my a function you can see

375
00:17:28,300 --> 00:17:33,340
that boom is printed it imported my OS

376
00:17:30,940 --> 00:17:36,730
module and then still executed the code

377
00:17:33,340 --> 00:17:40,030
so depending upon how they are

378
00:17:36,730 --> 00:17:42,640
attempting to secure the Python terminal

379
00:17:40,030 --> 00:17:45,129
there's almost always a way to bypass it

380
00:17:42,640 --> 00:17:48,870
and it gets even worse than this because

381
00:17:45,130 --> 00:17:51,670
built into Python itself there are

382
00:17:48,870 --> 00:17:53,800
modules and functions that already exist

383
00:17:51,670 --> 00:17:57,370
inside of every Python program such that

384
00:17:53,800 --> 00:18:00,100
there's always a way for the attackers

385
00:17:57,370 --> 00:18:03,639
to run code inside those Python windows

386
00:18:00,100 --> 00:18:06,610
as a matter of fact I impossible is

387
00:18:03,640 --> 00:18:08,590
never a word we should use in

388
00:18:06,610 --> 00:18:12,100
information security but I I dare say

389
00:18:08,590 --> 00:18:15,580
that it is extremely difficult to ever

390
00:18:12,100 --> 00:18:17,709
build an interactive Python program or

391
00:18:15,580 --> 00:18:20,740
interactive Python shell that can

392
00:18:17,710 --> 00:18:23,020
restrict a user completely and keep them

393
00:18:20,740 --> 00:18:26,800
from executing things on the operating

394
00:18:23,020 --> 00:18:30,400
system short of building a custom

395
00:18:26,800 --> 00:18:31,930
interpreter from scratch well that's all

396
00:18:30,400 --> 00:18:34,960
I have for you thank you for coming out

397
00:18:31,930 --> 00:18:38,560
to my talk here at Kringle con enjoy the

398
00:18:34,960 --> 00:18:42,180
rest of your month here at Kringle con

399
00:18:38,560 --> 00:18:42,179
and have a great day

