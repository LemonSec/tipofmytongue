1
00:00:00,030 --> 00:00:04,589
hey my name is Chris Davis I'm going to

2
00:00:02,100 --> 00:00:07,379
show you how to decrypt and analyze HP

3
00:00:04,589 --> 00:00:08,370
to traffic and wire shortcut so the

4
00:00:07,379 --> 00:00:11,428
tools that were gonna be using for this

5
00:00:08,370 --> 00:00:13,230
is Wireshark Chrome and curl Wireshark

6
00:00:11,429 --> 00:00:15,480
does the traffic analysis and the

7
00:00:13,230 --> 00:00:18,029
decryption piece while Chrome and curl

8
00:00:15,480 --> 00:00:20,430
allow you to store SSL keys to be able

9
00:00:18,029 --> 00:00:22,800
to decrypt the benefit of Chrome's you

10
00:00:20,430 --> 00:00:24,660
can interact with the website you can

11
00:00:22,800 --> 00:00:26,550
use things like in developer tools which

12
00:00:24,660 --> 00:00:27,029
makes interacting with website a lot

13
00:00:26,550 --> 00:00:29,310
easier

14
00:00:27,029 --> 00:00:32,099
kuroh obviously can be used to help

15
00:00:29,310 --> 00:00:33,930
automate command line interaction again

16
00:00:32,098 --> 00:00:37,110
you can script things up like maybe you

17
00:00:33,930 --> 00:00:39,899
had an API that was HP to enabled and

18
00:00:37,110 --> 00:00:42,329
you needed to automate a task and but

19
00:00:39,899 --> 00:00:44,640
also store the SSL keys for debugging

20
00:00:42,329 --> 00:00:46,530
later this is you would use Chrome for

21
00:00:44,640 --> 00:00:48,000
that so why do we want to use these

22
00:00:46,530 --> 00:00:49,800
unfortunately because there's not a lot

23
00:00:48,000 --> 00:00:51,690
of HTTP to support and a lot of common

24
00:00:49,800 --> 00:00:53,070
tools and frameworks right now for

25
00:00:51,690 --> 00:00:56,099
example one of my favorites is Python

26
00:00:53,070 --> 00:00:57,239
requests it does not have HP to support

27
00:00:56,100 --> 00:01:00,329
as of the time of writing this

28
00:00:57,239 --> 00:01:01,858
unfortunately so I want to quickly show

29
00:01:00,329 --> 00:01:04,349
you or at least give you the commands

30
00:01:01,859 --> 00:01:06,060
you need to build curl with HP - and as

31
00:01:04,349 --> 00:01:08,130
a cell support because at least on

32
00:01:06,060 --> 00:01:10,140
Ubuntu 1604 which is what I use I found

33
00:01:08,130 --> 00:01:12,479
that curl did not have HTTP to support

34
00:01:10,140 --> 00:01:14,640
built-in so I had to go through and I

35
00:01:12,479 --> 00:01:16,259
had to rebuild it myself I had to remove

36
00:01:14,640 --> 00:01:18,000
and then rebuild it myself so these were

37
00:01:16,259 --> 00:01:20,009
the commands that I had used to to be

38
00:01:18,000 --> 00:01:22,830
able to accomplish that it also requires

39
00:01:20,009 --> 00:01:25,710
curl 7.59 or greater to be able to do HP

40
00:01:22,830 --> 00:01:27,810
- also to be able to store the SSL key

41
00:01:25,710 --> 00:01:29,339
logs as well so I had to build that with

42
00:01:27,810 --> 00:01:31,619
that support built in - otherwise you

43
00:01:29,340 --> 00:01:35,130
can't pass the SSL key log environment

44
00:01:31,619 --> 00:01:36,990
variable so going back to what I was

45
00:01:35,130 --> 00:01:38,759
saying the SL key log file can be

46
00:01:36,990 --> 00:01:40,559
specified when we run our curl command

47
00:01:38,759 --> 00:01:43,500
which case we can we just give it the

48
00:01:40,560 --> 00:01:44,909
environment variable equals SSL key logs

49
00:01:43,500 --> 00:01:46,950
about text that's just an arbitrary flat

50
00:01:44,909 --> 00:01:50,040
file txt file location that you want to

51
00:01:46,950 --> 00:01:52,079
specify again and then curl and whatever

52
00:01:50,040 --> 00:01:54,540
curl commands and parameters you want to

53
00:01:52,079 --> 00:01:56,820
pass it including the URL of HTTP -

54
00:01:54,540 --> 00:01:59,340
enabled server again when you do that it

55
00:01:56,820 --> 00:02:02,429
saves that those SSL keys so that we can

56
00:01:59,340 --> 00:02:03,840
decrypt it in water shark later so for

57
00:02:02,430 --> 00:02:05,579
the demo here I'm gonna show you how to

58
00:02:03,840 --> 00:02:08,429
use Chrome to actually store those as a

59
00:02:05,579 --> 00:02:10,649
sub key log so that we can decrypt them

60
00:02:08,429 --> 00:02:12,150
with Wireshark so here again I'm using

61
00:02:10,649 --> 00:02:14,040
this on Windows but I believe the same

62
00:02:12,150 --> 00:02:16,530
can be done with actually Firefox

63
00:02:14,040 --> 00:02:17,670
in chromium on Linux as well I don't not

64
00:02:16,530 --> 00:02:20,069
exactly sure what those command lines

65
00:02:17,670 --> 00:02:22,829
would be but I've been using cogito the

66
00:02:20,069 --> 00:02:25,349
- - SSL key log file path and again I'm

67
00:02:22,830 --> 00:02:27,239
just passing specifying a flat text file

68
00:02:25,349 --> 00:02:30,810
on my desktop and then I'm passing in

69
00:02:27,239 --> 00:02:33,930
the parameter of my local HP - enabled

70
00:02:30,810 --> 00:02:35,099
web server before I move on though I

71
00:02:33,930 --> 00:02:37,830
wanted to show you a couple quick

72
00:02:35,099 --> 00:02:39,869
Wireshark filters so Wireshark is nice

73
00:02:37,830 --> 00:02:42,360
and that it does have Wireshark filters

74
00:02:39,870 --> 00:02:43,890
built in for HP - now which makes things

75
00:02:42,360 --> 00:02:47,760
really easy right for example we could

76
00:02:43,890 --> 00:02:49,529
do HP - headers method equals get if we

77
00:02:47,760 --> 00:02:52,709
wanted it to get just HP - we could type

78
00:02:49,530 --> 00:02:54,599
in just HP - we can specify a path for

79
00:02:52,709 --> 00:02:57,090
example if we were going to grab we

80
00:02:54,599 --> 00:02:59,220
wanted to see styles that CSS we could

81
00:02:57,090 --> 00:03:01,440
specify the path we could also specify a

82
00:02:59,220 --> 00:03:04,140
cookie for example maybe we were trying

83
00:03:01,440 --> 00:03:05,190
to debug users login interaction we need

84
00:03:04,140 --> 00:03:06,920
to see what kind of cookies they were

85
00:03:05,190 --> 00:03:09,510
getting we could specify that

86
00:03:06,920 --> 00:03:11,970
additionally if we wanted to see just

87
00:03:09,510 --> 00:03:15,298
the data itself we could do HP - data

88
00:03:11,970 --> 00:03:18,569
data and then we could also search

89
00:03:15,299 --> 00:03:21,329
inside of HTTP - for arbitrary values

90
00:03:18,569 --> 00:03:23,310
for example username right so if there's

91
00:03:21,329 --> 00:03:25,290
a username form field and a password

92
00:03:23,310 --> 00:03:27,209
form field we could do HP to contains

93
00:03:25,290 --> 00:03:29,010
and then username and then it would

94
00:03:27,209 --> 00:03:30,720
water search smart enough to be able to

95
00:03:29,010 --> 00:03:34,649
parse through HP - and then find that

96
00:03:30,720 --> 00:03:36,959
traffic for us I'm going to show you how

97
00:03:34,650 --> 00:03:39,299
to capture a traffic and then decrypt it

98
00:03:36,959 --> 00:03:41,099
with Wireshark and use Google Chrome to

99
00:03:39,299 --> 00:03:44,340
store those keys so first thing we want

100
00:03:41,099 --> 00:03:47,730
to do is set a traffic capture I'm using

101
00:03:44,340 --> 00:03:50,310
raw caps since by default Wireshark is

102
00:03:47,730 --> 00:03:51,988
unable to sniff localhost on Windows

103
00:03:50,310 --> 00:03:55,799
machines they can on Linux but not on

104
00:03:51,989 --> 00:03:57,180
Windows alright and finally we need to

105
00:03:55,799 --> 00:04:01,940
open up command prompt and we need to

106
00:03:57,180 --> 00:04:08,129
start Chrome with the SSL key log

107
00:04:01,940 --> 00:04:09,660
argument okay so there's our HP -

108
00:04:08,129 --> 00:04:12,090
enabled web interface running on

109
00:04:09,660 --> 00:04:13,680
localhost that we opened up with command

110
00:04:12,090 --> 00:04:16,139
prompt and as you can see we actually

111
00:04:13,680 --> 00:04:17,639
have our SSL client random keys here so

112
00:04:16,139 --> 00:04:21,060
it is actually already storing it thanks

113
00:04:17,639 --> 00:04:22,590
to Chrome we open up Chrome and we can

114
00:04:21,060 --> 00:04:24,160
inspect the traffic here on the web site

115
00:04:22,590 --> 00:04:26,260
and we can do a network

116
00:04:24,160 --> 00:04:27,790
sure and let's just type something in

117
00:04:26,260 --> 00:04:29,409
right so at this point maybe you're a

118
00:04:27,790 --> 00:04:31,120
pen tester and you're trying to analyze

119
00:04:29,410 --> 00:04:32,080
a webform login right maybe you're

120
00:04:31,120 --> 00:04:33,790
trying to hack it you're trying to

121
00:04:32,080 --> 00:04:35,289
figure out what's going on with it or

122
00:04:33,790 --> 00:04:37,660
maybe you're a web developer and there's

123
00:04:35,290 --> 00:04:40,660
an error or you're trying to store those

124
00:04:37,660 --> 00:04:41,940
keys or you know be able to to debug

125
00:04:40,660 --> 00:04:44,530
what's going on with a web application

126
00:04:41,940 --> 00:04:45,670
so in this case let's just say we're

127
00:04:44,530 --> 00:04:47,049
trying to login it doesn't really matter

128
00:04:45,670 --> 00:04:49,030
what we type in here but let's go and

129
00:04:47,050 --> 00:04:51,660
generate some traffic and chrome

130
00:04:49,030 --> 00:04:54,400
actually sees this as the h2 protocol

131
00:04:51,660 --> 00:04:55,480
it's able to interact with it and so we

132
00:04:54,400 --> 00:04:56,919
can see that it's actually making the

133
00:04:55,480 --> 00:04:59,350
login request and we can see our

134
00:04:56,920 --> 00:05:01,090
response even here but that's it that's

135
00:04:59,350 --> 00:05:03,310
all we needed to do so we created some

136
00:05:01,090 --> 00:05:05,109
traffic let's go ahead and close our web

137
00:05:03,310 --> 00:05:06,370
server let's make sure our keys yep

138
00:05:05,110 --> 00:05:08,980
there's more keys for each of those

139
00:05:06,370 --> 00:05:12,690
requests that we made and then let's go

140
00:05:08,980 --> 00:05:15,730
ahead and close our traffic's capture

141
00:05:12,690 --> 00:05:21,040
and then we're going to open up our pcap

142
00:05:15,730 --> 00:05:22,360
flower open okay so the first thing

143
00:05:21,040 --> 00:05:24,580
we're going to notice is that all it

144
00:05:22,360 --> 00:05:27,790
sees is SSL traffic right it sees the

145
00:05:24,580 --> 00:05:29,289
the certificate exchange right and it

146
00:05:27,790 --> 00:05:31,690
can't really do anything with it

147
00:05:29,290 --> 00:05:33,430
right it does see that it's port 4 4 3 3

148
00:05:31,690 --> 00:05:35,500
which is web server that we had set up

149
00:05:33,430 --> 00:05:37,090
but again it can't evaluate as HP 2

150
00:05:35,500 --> 00:05:38,770
because it's all encrypted so what we

151
00:05:37,090 --> 00:05:40,570
can do is Wireshark actually gives us

152
00:05:38,770 --> 00:05:42,370
the option to provide it and as to sell

153
00:05:40,570 --> 00:05:44,770
key log files the one that we just

154
00:05:42,370 --> 00:05:46,240
created in which case it can decrypt the

155
00:05:44,770 --> 00:05:49,630
traffic and then we can evaluate

156
00:05:46,240 --> 00:05:50,919
evaluate it as HP 2 so what we want to

157
00:05:49,630 --> 00:05:53,500
do is you want to go to edit and we want

158
00:05:50,919 --> 00:05:55,060
to go down to preferences and then once

159
00:05:53,500 --> 00:05:57,340
we open up preferences we want to click

160
00:05:55,060 --> 00:06:03,910
on the protocols tree and then we want

161
00:05:57,340 --> 00:06:06,010
to go down to SSL here's a cell under

162
00:06:03,910 --> 00:06:07,570
the premaster secret log file name I

163
00:06:06,010 --> 00:06:10,840
want to open that up and we want to

164
00:06:07,570 --> 00:06:13,120
specify the SSL key log file that we had

165
00:06:10,840 --> 00:06:14,530
created when we do that we can actually

166
00:06:13,120 --> 00:06:16,120
see immediately that some of the traffic

167
00:06:14,530 --> 00:06:17,919
was decrypted so let's go ahead and go

168
00:06:16,120 --> 00:06:20,320
back over to our Wireshark filters that

169
00:06:17,919 --> 00:06:23,859
we provide earlier so fortunately

170
00:06:20,320 --> 00:06:26,020
Wireshark knows how to evaluate hb2 so

171
00:06:23,860 --> 00:06:27,610
HTTP 2 is the filter we type in and when

172
00:06:26,020 --> 00:06:30,099
we do that we can automatically see all

173
00:06:27,610 --> 00:06:32,740
of the HP 2 traffic now one thing to

174
00:06:30,100 --> 00:06:34,719
know is there's you can see that the TCP

175
00:06:32,740 --> 00:06:37,360
stream number is the same

176
00:06:34,719 --> 00:06:39,789
the entire session the entire session is

177
00:06:37,360 --> 00:06:41,409
one TCP stream and that's the the

178
00:06:39,789 --> 00:06:44,438
performance benefit over aged people one

179
00:06:41,409 --> 00:06:45,909
got one because before HP 1.1 what every

180
00:06:44,439 --> 00:06:47,589
time it needed a resource from the

181
00:06:45,909 --> 00:06:49,719
server it would have to reestablish the

182
00:06:47,589 --> 00:06:52,539
TCP handshake and create a new TCP

183
00:06:49,719 --> 00:06:54,669
stream request the resource get back the

184
00:06:52,539 --> 00:06:56,679
response and then close the TCP stream

185
00:06:54,669 --> 00:06:59,019
for example if I was getting index.html

186
00:06:56,679 --> 00:07:00,369
then that HTML would have an image in it

187
00:06:59,019 --> 00:07:01,569
they would have JavaScript in it it

188
00:07:00,369 --> 00:07:03,009
would have all those things each and

189
00:07:01,569 --> 00:07:05,829
every single one of those would have to

190
00:07:03,009 --> 00:07:09,039
be as its own separate TCP request and

191
00:07:05,829 --> 00:07:11,110
we can actually see in here that it's

192
00:07:09,039 --> 00:07:14,589
doing the same thing doing the same core

193
00:07:11,110 --> 00:07:17,019
concept it's grabbing styles.css it's

194
00:07:14,589 --> 00:07:19,119
making post requests to slash a API

195
00:07:17,019 --> 00:07:21,009
slash log and it's making its grabbing

196
00:07:19,119 --> 00:07:22,989
some JavaScript files but each and every

197
00:07:21,009 --> 00:07:25,959
single one of those is done in r1 TCP

198
00:07:22,989 --> 00:07:28,659
stream instead of mini TCP streams so

199
00:07:25,959 --> 00:07:30,399
just looking at here we can actually go

200
00:07:28,659 --> 00:07:34,360
down to where we had done the post API

201
00:07:30,399 --> 00:07:35,919
login and we can actually open up packet

202
00:07:34,360 --> 00:07:38,679
here and Wireshark has already evaluated

203
00:07:35,919 --> 00:07:41,318
it's already parsed all the the hp2

204
00:07:38,679 --> 00:07:42,789
headers and it's provided to us in a

205
00:07:41,319 --> 00:07:44,649
nice little graphical interface we can

206
00:07:42,789 --> 00:07:47,199
actually select just like any other

207
00:07:44,649 --> 00:07:49,929
protocol analysis in Wireshark we can

208
00:07:47,199 --> 00:07:52,389
actually select that value and we can

209
00:07:49,929 --> 00:07:54,159
apply it as a filter and it'll

210
00:07:52,389 --> 00:07:57,279
automatically apply that for us so if we

211
00:07:54,159 --> 00:07:59,649
did HP do header die value equals post

212
00:07:57,279 --> 00:08:01,959
it gives us all of our post requests

213
00:07:59,649 --> 00:08:06,099
which are the the five requests that we

214
00:08:01,959 --> 00:08:08,349
had made previously additionally hb2 has

215
00:08:06,099 --> 00:08:10,619
lots of filters so if we do type in HB 2

216
00:08:08,349 --> 00:08:12,729
and then a period will actually see

217
00:08:10,619 --> 00:08:14,769
Wireshark will populate a bunch of

218
00:08:12,729 --> 00:08:18,669
filters here for us right header values

219
00:08:14,769 --> 00:08:20,919
flag values data values it's it's smart

220
00:08:18,669 --> 00:08:24,248
enough to be able to parse HTTP 2 and

221
00:08:20,919 --> 00:08:27,068
make your life a little bit easier so ok

222
00:08:24,249 --> 00:08:30,099
so we we wanted to evaluate the the post

223
00:08:27,069 --> 00:08:33,550
login right so as we can see here HB 2

224
00:08:30,099 --> 00:08:37,208
has all of our header values so we have

225
00:08:33,549 --> 00:08:38,588
a post all of these things here but

226
00:08:37,208 --> 00:08:40,119
again I think what we're interested in

227
00:08:38,589 --> 00:08:44,229
is the username and the password

228
00:08:40,120 --> 00:08:46,990
form field data and as we can see here

229
00:08:44,229 --> 00:08:47,769
that's nowhere to be found it's actually

230
00:08:46,990 --> 00:08:49,959
not in

231
00:08:47,769 --> 00:08:52,170
Paquette so let's take a look here

232
00:08:49,959 --> 00:08:54,670
because of the way that HP two works

233
00:08:52,170 --> 00:08:57,248
frame number let's start with this

234
00:08:54,670 --> 00:09:01,540
packet here so two four five zeros so

235
00:08:57,249 --> 00:09:05,529
framed number it's greater than or equal

236
00:09:01,540 --> 00:09:07,360
to 2 for five zero so we see here that

237
00:09:05,529 --> 00:09:10,449
the post request from the client is made

238
00:09:07,360 --> 00:09:12,819
for API slash login and then in another

239
00:09:10,449 --> 00:09:15,008
packet in a data packet down further we

240
00:09:12,819 --> 00:09:16,689
actually have the post parameters being

241
00:09:15,009 --> 00:09:18,249
sent and so we could actually do this is

242
00:09:16,689 --> 00:09:21,519
where we got that other filter here that

243
00:09:18,249 --> 00:09:23,679
I was specifying before HP to data data

244
00:09:21,519 --> 00:09:27,939
and if we type that in we can actually

245
00:09:23,679 --> 00:09:30,339
see just the data request right to the

246
00:09:27,939 --> 00:09:32,529
server and from the server data requests

247
00:09:30,339 --> 00:09:35,709
okay so now we're interested in the

248
00:09:32,529 --> 00:09:38,350
username form field so we can do HP to

249
00:09:35,709 --> 00:09:40,599
data data and ampersand understand HP to

250
00:09:38,350 --> 00:09:42,699
contains now the contains feature says

251
00:09:40,600 --> 00:09:44,350
take this protocol I want to find only

252
00:09:42,699 --> 00:09:46,899
inside of these protocols which would be

253
00:09:44,350 --> 00:09:49,749
HP to I want to find this value right

254
00:09:46,899 --> 00:09:51,850
and so we're specifying username we do

255
00:09:49,749 --> 00:09:54,639
that we can actually see again just the

256
00:09:51,850 --> 00:09:58,360
data that has the username form field

257
00:09:54,639 --> 00:10:00,369
value and here we can again we can see

258
00:09:58,360 --> 00:10:01,959
our username and our password and again

259
00:10:00,369 --> 00:10:04,059
this will be come in handy because maybe

260
00:10:01,959 --> 00:10:06,878
you were trying to figure out what the

261
00:10:04,059 --> 00:10:08,799
client-side web application is doing to

262
00:10:06,879 --> 00:10:10,809
the data before it's sent to the server

263
00:10:08,799 --> 00:10:12,459
right and maybe that will help us either

264
00:10:10,809 --> 00:10:14,529
in the pen test or maybe that'll help us

265
00:10:12,459 --> 00:10:16,118
in debugging our application again

266
00:10:14,529 --> 00:10:17,799
another useful one I just want to point

267
00:10:16,119 --> 00:10:20,379
out I don't think is applicable to this

268
00:10:17,799 --> 00:10:22,240
demo but HP headers that set the cookie

269
00:10:20,379 --> 00:10:24,429
right so we can actually parse out

270
00:10:22,240 --> 00:10:26,249
cookie values that way finally the only

271
00:10:24,429 --> 00:10:28,990
thing I wanted to point out as well is

272
00:10:26,249 --> 00:10:31,749
when even after it's been decrypted

273
00:10:28,990 --> 00:10:34,720
unfortunately we can't just do right

274
00:10:31,749 --> 00:10:36,639
click follow TCP stream because when we

275
00:10:34,720 --> 00:10:38,410
do that it just sees it as that SSL

276
00:10:36,639 --> 00:10:40,299
values unfortunately which is just not

277
00:10:38,410 --> 00:10:42,549
super helpful it was if it was HP 1.1

278
00:10:40,299 --> 00:10:44,799
and it was just you know HTTP be without

279
00:10:42,549 --> 00:10:46,540
H without Lissa's he'll we can actually

280
00:10:44,799 --> 00:10:48,549
right click and view that stream and

281
00:10:46,540 --> 00:10:50,410
then see it in plain text again

282
00:10:48,549 --> 00:10:52,649
unfortunately Wireshark does not do that

283
00:10:50,410 --> 00:10:56,379
so it's not completely perfect finally

284
00:10:52,649 --> 00:10:59,040
it will also not allow us to export HTTP

285
00:10:56,379 --> 00:11:02,440
to objects right so when we needed that

286
00:10:59,040 --> 00:11:04,990
HTML or that specific JavaScript file

287
00:11:02,440 --> 00:11:07,570
we can't export it through here we can't

288
00:11:04,990 --> 00:11:08,770
do export objects HP unfortunately just

289
00:11:07,570 --> 00:11:13,140
doesn't show it because it's linked to

290
00:11:08,770 --> 00:11:13,140
the HP protocol not HTTP to

