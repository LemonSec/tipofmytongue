1
00:00:00,030 --> 00:00:04,950
welcome Kringle Con attendees to http/2

2
00:00:03,000 --> 00:00:05,339
because one is in fact the loneliest

3
00:00:04,950 --> 00:00:07,980
number

4
00:00:05,339 --> 00:00:09,360
my name is Chris LG I work at counter

5
00:00:07,980 --> 00:00:11,219
hack challenges building things and

6
00:00:09,360 --> 00:00:13,709
breaking things I'm also in the Army

7
00:00:11,219 --> 00:00:15,450
National Guard I am on the Twitter's I

8
00:00:13,710 --> 00:00:16,890
have too many E's in my last name some

9
00:00:15,450 --> 00:00:18,689
certs and a singing Justin Bieber

10
00:00:16,890 --> 00:00:21,779
toothbrush Chris Davis and I are gonna

11
00:00:18,690 --> 00:00:23,340
talk to you today about HTTP 1.1 and 2.0

12
00:00:21,779 --> 00:00:25,980
and some of the differences there

13
00:00:23,340 --> 00:00:28,410
because it's 2.0 is a technology that

14
00:00:25,980 --> 00:00:30,330
most of us are less familiar with but

15
00:00:28,410 --> 00:00:33,149
it's really pervasive and and we'll look

16
00:00:30,330 --> 00:00:36,660
at that going forward so each created

17
00:00:33,149 --> 00:00:40,770
about 18 years apart and and kind of

18
00:00:36,660 --> 00:00:43,260
preceded by HTTP 9 and 1.0 but really

19
00:00:40,770 --> 00:00:45,719
dot 9 1 and 1.1 aren't are terribly

20
00:00:43,260 --> 00:00:46,800
different at least in terms of the vast

21
00:00:45,719 --> 00:00:52,020
works we're gonna look at today

22
00:00:46,800 --> 00:00:53,849
so with 1.1 and 2.0 they're both gonna

23
00:00:52,020 --> 00:00:57,449
be available in any browser you're using

24
00:00:53,850 --> 00:00:59,570
Safari Chrome Firefox edge whatever they

25
00:00:57,449 --> 00:01:03,599
will speak both of these technologies

26
00:00:59,570 --> 00:01:05,610
now with 1.1 our headers are all ASCII

27
00:01:03,600 --> 00:01:07,770
they're all human readable each header

28
00:01:05,610 --> 00:01:11,130
is a line of code a line of ASCII text

29
00:01:07,770 --> 00:01:13,350
where with 200 it's all byte codes it's

30
00:01:11,130 --> 00:01:15,360
binary so we're not able to read it

31
00:01:13,350 --> 00:01:16,589
anymore but but it's computers talking

32
00:01:15,360 --> 00:01:18,659
to computers so that they can be a

33
00:01:16,590 --> 00:01:20,009
little more compact and how they

34
00:01:18,659 --> 00:01:24,630
communicate so that that saves a little

35
00:01:20,009 --> 00:01:27,930
bit of overhead there also with 1.1 it's

36
00:01:24,630 --> 00:01:29,789
really a connectionless technology your

37
00:01:27,930 --> 00:01:31,710
your client your web browser asks for

38
00:01:29,790 --> 00:01:33,650
one file at a time and gets it back from

39
00:01:31,710 --> 00:01:36,899
the web server one one file at a time

40
00:01:33,650 --> 00:01:38,640
where with 2.0 is it is connection

41
00:01:36,900 --> 00:01:42,180
oriented you will see the term stream

42
00:01:38,640 --> 00:01:43,799
pop up a few times to where basically a

43
00:01:42,180 --> 00:01:46,380
web server can send a bunch of files at

44
00:01:43,799 --> 00:01:50,640
once with a single TCP handshake and a

45
00:01:46,380 --> 00:01:52,079
single tear down at the end with 1.1 we

46
00:01:50,640 --> 00:01:55,170
do still have some unencrypted just

47
00:01:52,079 --> 00:01:56,939
regular HTTP websites but of course most

48
00:01:55,170 --> 00:01:59,490
things we're doing anything sensitive on

49
00:01:56,939 --> 00:02:01,619
are gonna be TLS and that's you know

50
00:01:59,490 --> 00:02:04,500
your social media your email or whatever

51
00:02:01,619 --> 00:02:08,008
with with 200 the RFC actually allows

52
00:02:04,500 --> 00:02:10,889
for an unencrypted HTTP 2 connection but

53
00:02:08,008 --> 00:02:12,559
no browser will speak it really the only

54
00:02:10,889 --> 00:02:16,399
tool I've found that will

55
00:02:12,560 --> 00:02:20,690
unencrypted 2.0 is curl and we'll play

56
00:02:16,400 --> 00:02:22,790
with that here a little bit and finally

57
00:02:20,690 --> 00:02:24,410
with 1.1 that's that's absolutely

58
00:02:22,790 --> 00:02:26,840
totally available in any web server

59
00:02:24,410 --> 00:02:28,670
you're going to go to you really have to

60
00:02:26,840 --> 00:02:29,690
have to contrive an instance where it

61
00:02:28,670 --> 00:02:32,559
where it that wouldn't be available

62
00:02:29,690 --> 00:02:35,540
whereas with tuna no it isn't completely

63
00:02:32,560 --> 00:02:37,640
available across the entire internet but

64
00:02:35,540 --> 00:02:40,549
with any top site with most top sites

65
00:02:37,640 --> 00:02:43,640
it's gonna be up so if we look at the

66
00:02:40,550 --> 00:02:45,920
top alexa sites that fit on my slide all

67
00:02:43,640 --> 00:02:47,540
but three are speaking to data already

68
00:02:45,920 --> 00:02:49,540
and if you think about it from the

69
00:02:47,540 --> 00:02:51,980
perspective of these major providers

70
00:02:49,540 --> 00:02:54,230
there there's a cost savings there right

71
00:02:51,980 --> 00:02:56,179
with with these binary headers with with

72
00:02:54,230 --> 00:02:59,209
fewer tcp handshakes and tear downs

73
00:02:56,180 --> 00:03:01,819
there there are a few fewer bytes in

74
00:02:59,209 --> 00:03:03,290
each transaction for a user which when

75
00:03:01,819 --> 00:03:06,319
you're dealing on the scale of these

76
00:03:03,290 --> 00:03:08,179
type of systems then that could be a

77
00:03:06,319 --> 00:03:13,458
significant cost savings in terms of

78
00:03:08,180 --> 00:03:14,930
network infrastructure so pictorially we

79
00:03:13,459 --> 00:03:17,530
can we can sort of think of it this way

80
00:03:14,930 --> 00:03:20,600
where with 1.1 we would request a URL

81
00:03:17,530 --> 00:03:22,220
like slash or index and then we would

82
00:03:20,600 --> 00:03:24,620
get that HTML file back from the server

83
00:03:22,220 --> 00:03:27,290
and then that since that file referenced

84
00:03:24,620 --> 00:03:29,239
a JavaScript script that needs to be

85
00:03:27,290 --> 00:03:31,069
added then we request it we get it back

86
00:03:29,239 --> 00:03:33,410
it referencing some image we request it

87
00:03:31,069 --> 00:03:35,540
we get it back maybe some CSS request to

88
00:03:33,410 --> 00:03:37,430
get it back all is individual

89
00:03:35,540 --> 00:03:39,890
connections with a three-way handshake

90
00:03:37,430 --> 00:03:42,590
the push of the file and then the

91
00:03:39,890 --> 00:03:45,078
four-way teardown with two now no it is

92
00:03:42,590 --> 00:03:46,700
it is simpler it's a little more kind of

93
00:03:45,079 --> 00:03:48,500
fancy and how it does things but but

94
00:03:46,700 --> 00:03:50,988
there's a single request for slash or

95
00:03:48,500 --> 00:03:53,180
index and then the server can send back

96
00:03:50,989 --> 00:03:56,209
all the files that are necessary in a

97
00:03:53,180 --> 00:04:00,380
single push so again less less overhead

98
00:03:56,209 --> 00:04:03,019
in terms of network traffic to look at

99
00:04:00,380 --> 00:04:06,530
it a bit lower level let's kind of dive

100
00:04:03,019 --> 00:04:11,239
into curl here but so we've got here

101
00:04:06,530 --> 00:04:13,340
just curl or give me a web site - v4

102
00:04:11,239 --> 00:04:15,889
verbose without this curl would just

103
00:04:13,340 --> 00:04:17,269
return the HTML or whatever content

104
00:04:15,889 --> 00:04:18,829
comes back from the server it wouldn't

105
00:04:17,269 --> 00:04:21,858
tell us what's going on kind of under

106
00:04:18,829 --> 00:04:26,330
the hood I'm gonna spin going to specify

107
00:04:21,858 --> 00:04:28,008
- - HTTP - because I want to talk HTTP -

108
00:04:26,330 --> 00:04:29,750
because that's what this talk is about

109
00:04:28,009 --> 00:04:34,340
then we're gonna give it a specific URL

110
00:04:29,750 --> 00:04:37,879
HTTP colon slash slash WWB TOCOM slash

111
00:04:34,340 --> 00:04:39,919
that's the website I want then I'm going

112
00:04:37,879 --> 00:04:42,110
to do this little shorthand for put

113
00:04:39,919 --> 00:04:43,909
standard error into standard out I'm

114
00:04:42,110 --> 00:04:45,440
gonna do this because in order to show

115
00:04:43,909 --> 00:04:47,629
this one screen at a time I'm going to

116
00:04:45,440 --> 00:04:51,770
pipe standard out through the command

117
00:04:47,629 --> 00:04:53,870
les without putting standard error in a

118
00:04:51,770 --> 00:04:56,750
standard out we wouldn't be able to see

119
00:04:53,870 --> 00:04:58,250
the the information that curl is going

120
00:04:56,750 --> 00:05:00,860
to give us about the handshake stuff

121
00:04:58,250 --> 00:05:03,169
when we curl for Bhosle we get the TLS

122
00:05:00,860 --> 00:05:06,409
handshake information and and all that

123
00:05:03,169 --> 00:05:08,508
all that connection errata in standard

124
00:05:06,409 --> 00:05:10,099
error so if we didn't put it into

125
00:05:08,509 --> 00:05:11,539
standard out then it would it would fly

126
00:05:10,099 --> 00:05:12,889
by and wouldn't get caught by the less

127
00:05:11,539 --> 00:05:14,270
command so that's just a little

128
00:05:12,889 --> 00:05:17,090
shorthand there again to combine

129
00:05:14,270 --> 00:05:21,620
standard error and standard out so off

130
00:05:17,090 --> 00:05:24,500
we go our browser curl goes ahead and

131
00:05:21,620 --> 00:05:27,710
reaches out to Baidu and then offers up

132
00:05:24,500 --> 00:05:29,900
a couple different connection methods

133
00:05:27,710 --> 00:05:32,359
using application layer protocol

134
00:05:29,900 --> 00:05:34,489
negotiation or al p.m. it's offering h2

135
00:05:32,360 --> 00:05:38,029
which is just shorthand for HTTP to let

136
00:05:34,490 --> 00:05:40,580
you might guess and then also 1.1 and

137
00:05:38,029 --> 00:05:42,319
then goes forward I'm kind of finished

138
00:05:40,580 --> 00:05:44,840
as a TLS handshake now notice that these

139
00:05:42,319 --> 00:05:46,909
these offerings that the two and the one

140
00:05:44,840 --> 00:05:49,130
that one these happen is part of the TLS

141
00:05:46,909 --> 00:05:50,120
handshake this is this is before any get

142
00:05:49,130 --> 00:05:51,740
requests or anything like that

143
00:05:50,120 --> 00:05:54,440
that's as well they're still determining

144
00:05:51,740 --> 00:05:57,020
how they want to speak securely so so

145
00:05:54,440 --> 00:05:59,379
those are the offers the Baidu server

146
00:05:57,020 --> 00:06:02,299
comes back it says great let's talk 1.1

147
00:05:59,379 --> 00:06:05,000
some certificate information and then

148
00:06:02,300 --> 00:06:06,620
here curl is showing us the regular

149
00:06:05,000 --> 00:06:08,750
ASCII request that we're used to seeing

150
00:06:06,620 --> 00:06:10,639
right as web app pentesters we're used

151
00:06:08,750 --> 00:06:12,919
to get and the slash and all this the

152
00:06:10,639 --> 00:06:15,080
host the user agent which of course here

153
00:06:12,919 --> 00:06:17,990
is curled and then give me back anything

154
00:06:15,080 --> 00:06:20,770
any type of data and then the web server

155
00:06:17,990 --> 00:06:23,960
responds with a typical ASCII header of

156
00:06:20,770 --> 00:06:27,680
200 okay here's some stuff that's coming

157
00:06:23,960 --> 00:06:29,948
at you I don't cache things here's a

158
00:06:27,680 --> 00:06:32,990
cookie so I can so I can track your

159
00:06:29,949 --> 00:06:37,789
status as we go through and then of

160
00:06:32,990 --> 00:06:39,110
course after that comes the HTML now

161
00:06:37,789 --> 00:06:45,159
it's gonna look sim

162
00:06:39,110 --> 00:06:49,310
with with Google we're going to offer

163
00:06:45,159 --> 00:06:53,240
HTTP 2 and 1.1 will complete our TLS

164
00:06:49,310 --> 00:06:56,000
handshake certificates and then Google

165
00:06:53,240 --> 00:06:58,250
says hey let's talk HTTP 2 right I want

166
00:06:56,000 --> 00:07:00,370
to save that little bit of overhead and

167
00:06:58,250 --> 00:07:03,050
you're able to talk it so here we go

168
00:07:00,370 --> 00:07:06,229
now this get request looks a little

169
00:07:03,050 --> 00:07:09,319
funny right because we're talking two we

170
00:07:06,229 --> 00:07:11,210
asked for two we got two back and and

171
00:07:09,319 --> 00:07:13,849
here's our header requesting one not one

172
00:07:11,210 --> 00:07:18,138
I think what happened here with curl is

173
00:07:13,849 --> 00:07:19,909
that it knows we want to see an ASCII

174
00:07:18,139 --> 00:07:22,669
header because we gave it the dash V for

175
00:07:19,909 --> 00:07:24,020
verbose but of course there are no ASCII

176
00:07:22,669 --> 00:07:26,270
headers so it's got to make something up

177
00:07:24,020 --> 00:07:29,448
just just for these for these human eyes

178
00:07:26,270 --> 00:07:31,729
looking at it so it just sort of

179
00:07:29,449 --> 00:07:33,349
defaults to showing get slash HTTP 1.1

180
00:07:31,729 --> 00:07:35,270
even though this really is a 2 dot or

181
00:07:33,349 --> 00:07:38,120
request and we can see that in the

182
00:07:35,270 --> 00:07:40,128
response from google HTTP slash to 200

183
00:07:38,120 --> 00:07:42,229
this is an okay of course this is

184
00:07:40,129 --> 00:07:45,080
actually coming back and forth as byte

185
00:07:42,229 --> 00:07:48,529
codes but kind of kind of abstracting as

186
00:07:45,080 --> 00:07:50,479
as ASCII for us for us humans so we see

187
00:07:48,529 --> 00:07:53,270
that response maybe some headers were

188
00:07:50,479 --> 00:07:55,310
less used to seeing it's still setting

189
00:07:53,270 --> 00:07:57,650
some cookies right because Google still

190
00:07:55,310 --> 00:08:00,400
going to track certain things and then

191
00:07:57,650 --> 00:08:04,818
looking farther down we get the HTML

192
00:08:00,400 --> 00:08:05,089
coming back from Google so there we have

193
00:08:04,819 --> 00:08:08,750
it

194
00:08:05,089 --> 00:08:10,520
just HTTP to at a high level and now

195
00:08:08,750 --> 00:08:12,080
Chris Davis we'll talk more about

196
00:08:10,520 --> 00:08:15,669
looking at the traffic in depth and

197
00:08:12,080 --> 00:08:15,669
decoding it in Wireshark

