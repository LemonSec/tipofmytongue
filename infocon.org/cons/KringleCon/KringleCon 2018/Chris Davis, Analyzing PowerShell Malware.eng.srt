1
00:00:00,030 --> 00:00:05,100
hey my name is Chris Davis I'm going to

2
00:00:02,460 --> 00:00:07,200
be demoing how to analyze powershell

3
00:00:05,100 --> 00:00:10,530
malware by using the code that's the

4
00:00:07,200 --> 00:00:11,490
malware author gives you again I just

5
00:00:10,530 --> 00:00:12,870
said my Chris name is Chris Davis

6
00:00:11,490 --> 00:00:14,790
Messina your technical analyst for

7
00:00:12,870 --> 00:00:17,970
counter hack challenge developers last

8
00:00:14,790 --> 00:00:19,400
pentester guc number 144 at the osep and

9
00:00:17,970 --> 00:00:21,390
a bunch of other certs

10
00:00:19,400 --> 00:00:23,430
so tools that I'm gonna be using for

11
00:00:21,390 --> 00:00:25,560
this demo or PowerShell ISE for

12
00:00:23,430 --> 00:00:27,660
debugging and maybe using wireshark I'm

13
00:00:25,560 --> 00:00:30,029
going to be using process monitor proc

14
00:00:27,660 --> 00:00:32,130
dump power dump which is a quick little

15
00:00:30,029 --> 00:00:34,079
script that I wrote up really it's just

16
00:00:32,130 --> 00:00:36,149
strings on steroids gives you a little

17
00:00:34,079 --> 00:00:38,360
bit of extra versatility but a basic

18
00:00:36,149 --> 00:00:40,770
logic built-in but nothing too special

19
00:00:38,360 --> 00:00:43,430
outside that we are using Aleppo which

20
00:00:40,770 --> 00:00:46,140
is going to be or as a Python ole's tool

21
00:00:43,430 --> 00:00:49,460
library which allows us to pull VBA

22
00:00:46,140 --> 00:00:51,780
macros out of a Word document safely

23
00:00:49,460 --> 00:00:54,390
again the thing to keep in mind here is

24
00:00:51,780 --> 00:00:56,489
that we want to practice OPSEC always we

25
00:00:54,390 --> 00:00:58,079
never want to run malware or analyze

26
00:00:56,489 --> 00:00:59,370
malware from our host system or host

27
00:00:58,079 --> 00:01:01,289
environment right so we don't to run

28
00:00:59,370 --> 00:01:03,209
that on our production machine our

29
00:01:01,289 --> 00:01:04,470
production network because we could be

30
00:01:03,210 --> 00:01:07,140
giving ourselves away we could be

31
00:01:04,470 --> 00:01:10,110
spreading infection further right if we

32
00:01:07,140 --> 00:01:12,090
start interacting with the this sc2

33
00:01:10,110 --> 00:01:13,650
server for example we might be giving

34
00:01:12,090 --> 00:01:15,119
ourselves away and that the hacker might

35
00:01:13,650 --> 00:01:16,710
change his tactics at that point that's

36
00:01:15,119 --> 00:01:18,390
why typically I always run it in a

37
00:01:16,710 --> 00:01:21,389
virtual machine or a docker instance and

38
00:01:18,390 --> 00:01:23,700
then I also typically always have a VPN

39
00:01:21,390 --> 00:01:25,710
setup as well so that if I do generate

40
00:01:23,700 --> 00:01:27,450
traffic and I am touching or interacting

41
00:01:25,710 --> 00:01:29,240
with the c2 server or the malware

42
00:01:27,450 --> 00:01:31,439
authors server in some way shape or form

43
00:01:29,240 --> 00:01:33,329
again it's coming from a different IP

44
00:01:31,439 --> 00:01:40,258
address I'm not giving my organization

45
00:01:33,329 --> 00:01:42,030
away at that point okay so for this part

46
00:01:40,259 --> 00:01:44,250
we're going to imagine that we've just

47
00:01:42,030 --> 00:01:46,290
came to a machine that was a we suspect

48
00:01:44,250 --> 00:01:47,820
is infected the user had reported that

49
00:01:46,290 --> 00:01:49,799
they got a malicious email they opened

50
00:01:47,820 --> 00:01:51,329
that email it looked like it was from

51
00:01:49,799 --> 00:01:54,060
Amazon saying that they had received

52
00:01:51,329 --> 00:01:55,740
their invoice for a very large order so

53
00:01:54,060 --> 00:01:59,040
they opened it up and they saw something

54
00:01:55,740 --> 00:02:00,960
like this for example all right at this

55
00:01:59,040 --> 00:02:02,130
point obviously we wouldn't do that on

56
00:02:00,960 --> 00:02:04,140
the machine there we would want to

57
00:02:02,130 --> 00:02:05,460
enable the content especially what we

58
00:02:04,140 --> 00:02:07,320
would do is we take the document off

59
00:02:05,460 --> 00:02:09,119
move it over to a virtual machine and

60
00:02:07,320 --> 00:02:11,510
then maybe inspect it further from there

61
00:02:09,119 --> 00:02:13,760
so we would take this document

62
00:02:11,510 --> 00:02:15,798
and move it onto a virtual machine of

63
00:02:13,760 --> 00:02:18,620
some kind within a segregated safe

64
00:02:15,799 --> 00:02:20,690
environment and then let's go ahead and

65
00:02:18,620 --> 00:02:22,400
change into that directory and now this

66
00:02:20,690 --> 00:02:24,829
again seems that you had done the pip

67
00:02:22,400 --> 00:02:28,610
install olie tools so that we'd have the

68
00:02:24,830 --> 00:02:30,349
O L evb a command available to us

69
00:02:28,610 --> 00:02:36,319
actually let's make sure that we got

70
00:02:30,349 --> 00:02:39,890
that file yeah a exe and then we're

71
00:02:36,319 --> 00:02:41,390
gonna give it our name of our doc M as

72
00:02:39,890 --> 00:02:43,309
soon as we run that we immediately see

73
00:02:41,390 --> 00:02:46,040
that there's a VBA macro here with auto

74
00:02:43,310 --> 00:02:47,540
open available to it and then then

75
00:02:46,040 --> 00:02:50,599
inside of here is a PowerShell dot exe

76
00:02:47,540 --> 00:02:52,910
script with the dash W hidden flag so

77
00:02:50,599 --> 00:02:55,160
what this the dash W hidden flag means

78
00:02:52,910 --> 00:02:56,930
is okay so we suspect that there's

79
00:02:55,160 --> 00:02:58,849
probably a malicious PowerShell running

80
00:02:56,930 --> 00:03:00,260
somewhere on the machine so we would

81
00:02:58,849 --> 00:03:02,840
probably open up our task manager and we

82
00:03:00,260 --> 00:03:04,250
would see oh you know yeah I don't I

83
00:03:02,840 --> 00:03:05,450
don't see this here right there's no

84
00:03:04,250 --> 00:03:06,799
there's nothing in here as far as we can

85
00:03:05,450 --> 00:03:09,200
see and I think if we even ran a

86
00:03:06,799 --> 00:03:10,760
PowerShell command of get - process we

87
00:03:09,200 --> 00:03:13,099
wouldn't see the PowerShell command and

88
00:03:10,760 --> 00:03:15,560
that either it's because of this - W

89
00:03:13,099 --> 00:03:17,000
hidden command but fortunately there are

90
00:03:15,560 --> 00:03:18,950
tools that allow us to be able to see

91
00:03:17,000 --> 00:03:20,780
those hidden processes for example

92
00:03:18,950 --> 00:03:23,328
process Explorer which is what I'm going

93
00:03:20,780 --> 00:03:29,720
to demo here we can actually run that as

94
00:03:23,329 --> 00:03:31,040
administrator and is when we do it just

95
00:03:29,720 --> 00:03:32,840
it's a little bit more versatile it has

96
00:03:31,040 --> 00:03:34,010
a lot more tools built into it directly

97
00:03:32,840 --> 00:03:36,410
and gives us a little bit more power

98
00:03:34,010 --> 00:03:39,709
over viewing processes and managing

99
00:03:36,410 --> 00:03:42,319
processes and so here again we can

100
00:03:39,709 --> 00:03:44,359
actually see that there is a PowerShell

101
00:03:42,319 --> 00:03:46,190
process running on the machine so and

102
00:03:44,359 --> 00:03:47,540
it's a handling scenario especially if

103
00:03:46,190 --> 00:03:49,069
it's a new malware that's that's not

104
00:03:47,540 --> 00:03:51,168
seen not you don't really know what's

105
00:03:49,069 --> 00:03:52,910
going on with it at this point what we

106
00:03:51,169 --> 00:04:02,180
would probably want to do is go ahead

107
00:03:52,910 --> 00:04:03,530
and take a process dump of that that so

108
00:04:02,180 --> 00:04:06,410
we're going to take a process dump of

109
00:04:03,530 --> 00:04:08,690
that so again fortunately for us they

110
00:04:06,410 --> 00:04:15,430
have let me change into my admin tools

111
00:04:08,690 --> 00:04:19,430
folder and we have the proc dump - ma

112
00:04:15,430 --> 00:04:24,030
and we're going to grab that process ID

113
00:04:19,430 --> 00:04:28,650
here so we're going to grab 6 6 1 6 6

114
00:04:24,030 --> 00:04:31,080
six one six again is assuming we ran

115
00:04:28,650 --> 00:04:33,570
that as administrator okay so it created

116
00:04:31,080 --> 00:04:37,289
a process dump for us here so now we

117
00:04:33,570 --> 00:04:39,240
have a process dump okay so at this

118
00:04:37,290 --> 00:04:41,340
point we've taken our memory dump of the

119
00:04:39,240 --> 00:04:42,990
the hidden power shell process that was

120
00:04:41,340 --> 00:04:44,760
running on the actively infected machine

121
00:04:42,990 --> 00:04:45,990
again at that point we would probably

122
00:04:44,760 --> 00:04:47,700
hand that off to the incident handling

123
00:04:45,990 --> 00:04:48,690
team to decide on what they wanted to do

124
00:04:47,700 --> 00:04:50,789
with that whether they wanted to kill

125
00:04:48,690 --> 00:04:52,919
the infection immediately or perhaps

126
00:04:50,790 --> 00:04:54,210
they wanted to you know study a little

127
00:04:52,919 --> 00:04:55,770
bit further and what I was doing on the

128
00:04:54,210 --> 00:04:57,599
machine see if it pivots somewhere else

129
00:04:55,770 --> 00:04:58,590
whatever right we don't care about that

130
00:04:57,600 --> 00:05:01,050
again we're just doing the malware

131
00:04:58,590 --> 00:05:02,909
analysis piece that's it's a handling on

132
00:05:01,050 --> 00:05:04,500
that is outside of the scope of what

133
00:05:02,910 --> 00:05:06,320
we're doing here so onto the malware

134
00:05:04,500 --> 00:05:08,760
analysis piece as we have done before

135
00:05:06,320 --> 00:05:10,710
again we had our Amazon here I'll run

136
00:05:08,760 --> 00:05:16,169
this a Love Bug command one more time

137
00:05:10,710 --> 00:05:17,669
maybe Amazon and again we had gotten our

138
00:05:16,169 --> 00:05:18,750
malicious PowerShell process that's how

139
00:05:17,669 --> 00:05:20,010
we found out that it was running his

140
00:05:18,750 --> 00:05:23,130
PowerShell and we grabbed that memory

141
00:05:20,010 --> 00:05:25,289
dump but so anyways we need to take this

142
00:05:23,130 --> 00:05:26,460
malicious PowerShell and study a little

143
00:05:25,290 --> 00:05:28,590
bit further right we need to figure out

144
00:05:26,460 --> 00:05:31,739
what it's doing we can see from here

145
00:05:28,590 --> 00:05:34,500
that it's using base64 and it's also

146
00:05:31,740 --> 00:05:36,690
compressed likely gzip compression so

147
00:05:34,500 --> 00:05:38,130
the first thing that would have to do

148
00:05:36,690 --> 00:05:41,280
here is we would have to come up with

149
00:05:38,130 --> 00:05:43,469
our own custom coding to be able to

150
00:05:41,280 --> 00:05:46,349
convert this from base64 and then once

151
00:05:43,470 --> 00:05:48,720
it's converted from a 64 to gzipped

152
00:05:46,350 --> 00:05:51,600
binary data we'd have to unzip it and

153
00:05:48,720 --> 00:05:54,210
then to its plain text format now again

154
00:05:51,600 --> 00:05:55,590
we could code up our own custom format

155
00:05:54,210 --> 00:05:57,270
for all this right we could make a

156
00:05:55,590 --> 00:05:59,159
Python script that would go through and

157
00:05:57,270 --> 00:06:02,010
do those things for us or we can just

158
00:05:59,160 --> 00:06:04,860
use the the command itself use the

159
00:06:02,010 --> 00:06:10,710
command that the Malheur author provided

160
00:06:04,860 --> 00:06:12,120
us right so what we're gonna do is going

161
00:06:10,710 --> 00:06:13,229
to take away that - hidden command

162
00:06:12,120 --> 00:06:14,600
because we don't want it to be hidden we

163
00:06:13,229 --> 00:06:17,849
actually want to go see what's going on

164
00:06:14,600 --> 00:06:20,190
BB a macro has a specific scaped format

165
00:06:17,850 --> 00:06:22,410
for quotes so we never remove that and

166
00:06:20,190 --> 00:06:24,990
now it's in the proper format so now the

167
00:06:22,410 --> 00:06:26,550
thing with PowerShell is basically

168
00:06:24,990 --> 00:06:29,760
what's happening is it's pulling a

169
00:06:26,550 --> 00:06:31,830
string down converting it from Bey 64

170
00:06:29,760 --> 00:06:33,390
and converting it to gzip and then

171
00:06:31,830 --> 00:06:35,789
converting it into a regular string and

172
00:06:33,390 --> 00:06:37,260
then it's using ie X which in PowerShell

173
00:06:35,789 --> 00:06:39,719
is invoke expression

174
00:06:37,260 --> 00:06:41,219
and it's executing more PowerShell

175
00:06:39,720 --> 00:06:43,230
basically but so we can just remove that

176
00:06:41,220 --> 00:06:45,630
IEX so that it doesn't execute it and

177
00:06:43,230 --> 00:06:48,120
instead of executing it we're gonna have

178
00:06:45,630 --> 00:06:55,230
it out to a file out - file and we're

179
00:06:48,120 --> 00:06:58,020
going to say dropper dot ps1 okay so

180
00:06:55,230 --> 00:07:01,110
there's dropper dot ps1 and when we look

181
00:06:58,020 --> 00:07:02,940
at that it's just more PowerShell so the

182
00:07:01,110 --> 00:07:05,910
powershell that's inside of that is

183
00:07:02,940 --> 00:07:07,770
actually gzip encoded data that says hey

184
00:07:05,910 --> 00:07:09,990
let's invoke a web request well let's go

185
00:07:07,770 --> 00:07:13,169
to this URL and download something

186
00:07:09,990 --> 00:07:15,840
called not an evil PS file dot CSS huh

187
00:07:13,170 --> 00:07:18,240
okay that's suspicious so again once

188
00:07:15,840 --> 00:07:20,760
again we see this IX here so we can get

189
00:07:18,240 --> 00:07:23,250
rid of that IX let's go ahead and

190
00:07:20,760 --> 00:07:24,840
highlight this content again we're just

191
00:07:23,250 --> 00:07:26,460
using the code that the malware author

192
00:07:24,840 --> 00:07:29,250
gave us we're just changing it up a

193
00:07:26,460 --> 00:07:36,419
little bit so we're going to once again

194
00:07:29,250 --> 00:07:41,940
just out - file we're gonna go with a

195
00:07:36,420 --> 00:07:44,130
source ps1 and we see there's our source

196
00:07:41,940 --> 00:07:46,650
type ps1 we're gonna take a look at that

197
00:07:44,130 --> 00:07:49,740
real fast and looks like our source code

198
00:07:46,650 --> 00:07:51,150
for the malware so we need to do a

199
00:07:49,740 --> 00:07:52,620
little bit further analysis on this it's

200
00:07:51,150 --> 00:07:55,140
kind of hard to see that from a terminal

201
00:07:52,620 --> 00:07:57,300
so let's actually go ahead and open this

202
00:07:55,140 --> 00:08:01,050
up really fast see if we can clean this

203
00:07:57,300 --> 00:08:03,900
code up maybe get a better view from it

204
00:08:01,050 --> 00:08:05,430
I like to use a visual studio code again

205
00:08:03,900 --> 00:08:07,650
you don't have to use Visual Studio code

206
00:08:05,430 --> 00:08:09,620
this is just my own terminal letter or

207
00:08:07,650 --> 00:08:12,450
text editor that I like to use the most

208
00:08:09,620 --> 00:08:14,550
so as we can see this is kind of a pain

209
00:08:12,450 --> 00:08:15,719
in the butt to read so at this point

210
00:08:14,550 --> 00:08:18,600
probably what I would do is I would try

211
00:08:15,720 --> 00:08:19,650
to clean this up look for example it

212
00:08:18,600 --> 00:08:25,470
looks like they have everything on one

213
00:08:19,650 --> 00:08:26,580
line let's go ahead and get rid of let's

214
00:08:25,470 --> 00:08:30,300
go ahead and change everything to new

215
00:08:26,580 --> 00:08:31,530
line characters and actually I could go

216
00:08:30,300 --> 00:08:32,789
through and spend the next couple

217
00:08:31,530 --> 00:08:33,990
minutes cleaning this out but I'm gonna

218
00:08:32,789 --> 00:08:37,199
go ahead over that part and I'll come

219
00:08:33,990 --> 00:08:38,640
back here in a second okay at this point

220
00:08:37,200 --> 00:08:40,620
I've taken a little bit of time to clean

221
00:08:38,640 --> 00:08:42,900
it up basically I just did like

222
00:08:40,620 --> 00:08:44,790
replacing semicolons with newline

223
00:08:42,900 --> 00:08:45,810
characters and then did some tab

224
00:08:44,790 --> 00:08:47,819
indenting just to make it a little

225
00:08:45,810 --> 00:08:48,920
easier to read so the first thing we can

226
00:08:47,820 --> 00:08:50,629
see is that there's some

227
00:08:48,920 --> 00:08:52,729
crypto function here creating an AAS

228
00:08:50,629 --> 00:08:55,670
managed object looks like maybe some

229
00:08:52,730 --> 00:08:57,980
kind of conversion functions here then

230
00:08:55,670 --> 00:09:00,170
we have an encryption function and then

231
00:08:57,980 --> 00:09:02,989
at a decryption function and then we

232
00:09:00,170 --> 00:09:04,248
have a main function named hacks which

233
00:09:02,989 --> 00:09:07,129
is being called at the very end of the

234
00:09:04,249 --> 00:09:08,720
source file so before we actually do

235
00:09:07,129 --> 00:09:09,739
we're not gonna actually just run this

236
00:09:08,720 --> 00:09:19,819
from here we're actually gonna run this

237
00:09:09,739 --> 00:09:23,329
in PowerShell ISE PowerShell ISE will

238
00:09:19,819 --> 00:09:25,849
allow us to actually set breakpoints and

239
00:09:23,329 --> 00:09:29,089
view the data as it's being transmitted

240
00:09:25,850 --> 00:09:31,369
and to call the functions so let's go

241
00:09:29,089 --> 00:09:33,980
ahead and open up our file we have

242
00:09:31,369 --> 00:09:38,569
source ok so at the very bottom we have

243
00:09:33,980 --> 00:09:40,069
our hacks we can do f9 on the very first

244
00:09:38,569 --> 00:09:41,689
line to set our breakpoint and then

245
00:09:40,069 --> 00:09:43,699
we'll just take it one by one step by

246
00:09:41,689 --> 00:09:46,459
step and I think actually before I do

247
00:09:43,699 --> 00:09:49,608
that I'm actually going to comment out

248
00:09:46,459 --> 00:09:52,279
this start - sleep because what it's

249
00:09:49,609 --> 00:09:54,259
doing is it's actually going in a loop

250
00:09:52,279 --> 00:09:57,079
it's constantly retrieving something and

251
00:09:54,259 --> 00:09:59,329
sending it sending back the results we

252
00:09:57,079 --> 00:10:00,709
don't really care to wait 30 seconds so

253
00:09:59,329 --> 00:10:03,290
we're just gonna comment that line out

254
00:10:00,709 --> 00:10:06,018
and then set our breakpoint on line 52

255
00:10:03,290 --> 00:10:10,309
we'll go ahead and play and then as we

256
00:10:06,019 --> 00:10:11,720
get C our C - variable it is not defined

257
00:10:10,309 --> 00:10:14,238
yet because it hasn't actually ran that

258
00:10:11,720 --> 00:10:16,699
line so we're gonna step over that then

259
00:10:14,239 --> 00:10:19,639
we're going to step over ID we can check

260
00:10:16,699 --> 00:10:22,128
ID really fast and we can see that it

261
00:10:19,639 --> 00:10:26,299
actually created a random 32 bit length

262
00:10:22,129 --> 00:10:29,509
I think it's 32 byte yeah so it's 32

263
00:10:26,299 --> 00:10:31,879
bytes long so let's continue to step

264
00:10:29,509 --> 00:10:34,549
over that we don't care about the SSL

265
00:10:31,879 --> 00:10:36,139
validation here this is important right

266
00:10:34,549 --> 00:10:38,600
this is the one that it's trying to hide

267
00:10:36,139 --> 00:10:41,629
so it's making a web request sending in

268
00:10:38,600 --> 00:10:45,379
our ID and our Jerry value of reg I

269
00:10:41,629 --> 00:10:47,449
guess register so let's see what the

270
00:10:45,379 --> 00:10:50,379
results are so let's step over that and

271
00:10:47,449 --> 00:10:52,939
let's see what he is so again if we were

272
00:10:50,379 --> 00:10:53,630
monitoring this with Wireshark or we had

273
00:10:52,939 --> 00:10:55,880
a

274
00:10:53,630 --> 00:10:59,180
our organization had full packet capture

275
00:10:55,880 --> 00:11:00,560
it would see this but it wouldn't it

276
00:10:59,180 --> 00:11:02,890
would see the request but it would be

277
00:11:00,560 --> 00:11:05,780
encrypted because it's using HTTP right

278
00:11:02,890 --> 00:11:08,660
so the only way that we can actually see

279
00:11:05,780 --> 00:11:10,699
this key is in memory and so we have our

280
00:11:08,660 --> 00:11:13,939
key and then we have something being

281
00:11:10,700 --> 00:11:15,890
defined called actions a/c TNS I'm

282
00:11:13,940 --> 00:11:18,290
assuming actions so let's continue to

283
00:11:15,890 --> 00:11:20,900
step over our functions here while true

284
00:11:18,290 --> 00:11:22,969
or in our loop it's defining some

285
00:11:20,900 --> 00:11:25,040
parameters with now it's saying

286
00:11:22,970 --> 00:11:27,400
requesting a CT

287
00:11:25,040 --> 00:11:31,699
so it's requesting an action possibly

288
00:11:27,400 --> 00:11:34,850
here we go into our another post request

289
00:11:31,700 --> 00:11:38,450
being sent to our c2 server let's go

290
00:11:34,850 --> 00:11:40,370
ahead and step over that and so data has

291
00:11:38,450 --> 00:11:41,570
just been grabbed let's see what the

292
00:11:40,370 --> 00:11:45,740
data was sent back

293
00:11:41,570 --> 00:11:48,800
ok so data is sent back as just some

294
00:11:45,740 --> 00:11:51,080
long string we can see that it's only

295
00:11:48,800 --> 00:11:54,199
hex characters so it's probably hex

296
00:11:51,080 --> 00:11:59,660
encoding let's say let's go ahead and

297
00:11:54,200 --> 00:12:07,010
decode that hex encoding let's have a

298
00:11:59,660 --> 00:12:08,780
quick online hex decoder and ok yeah so

299
00:12:07,010 --> 00:12:09,860
it's just binary data and that's

300
00:12:08,780 --> 00:12:13,640
probably because all of this is

301
00:12:09,860 --> 00:12:16,220
encrypted so it's sending the data over

302
00:12:13,640 --> 00:12:20,060
to encrypted Channel so yes let's

303
00:12:16,220 --> 00:12:22,130
continue on so stepping over this ok so

304
00:12:20,060 --> 00:12:25,579
we can see that actions is appending

305
00:12:22,130 --> 00:12:31,400
here step over that just take a look at

306
00:12:25,580 --> 00:12:34,310
that variable ok so it's just saving it

307
00:12:31,400 --> 00:12:36,260
in somewhere and then here we have

308
00:12:34,310 --> 00:12:38,630
action as being defined as being

309
00:12:36,260 --> 00:12:40,819
decrypted so let's uh let's actually let

310
00:12:38,630 --> 00:12:47,240
the function run and see what it decrypt

311
00:12:40,820 --> 00:12:50,390
says okay so there's action oh wow ok so

312
00:12:47,240 --> 00:12:53,780
that binary data this binary data here

313
00:12:50,390 --> 00:12:56,030
this encrypted data actually decrypt

314
00:12:53,780 --> 00:12:57,980
using the key that we had grabbed from

315
00:12:56,030 --> 00:13:01,550
memory that I was trying to hide from us

316
00:12:57,980 --> 00:13:03,080
over the network via it equates to get

317
00:13:01,550 --> 00:13:05,870
child item and now we see that it's

318
00:13:03,080 --> 00:13:08,540
actually executing using IEX

319
00:13:05,870 --> 00:13:12,080
here it's executing that command and

320
00:13:08,540 --> 00:13:14,689
it's gonna save it to a string named res

321
00:13:12,080 --> 00:13:18,260
or a variable named res so let's step

322
00:13:14,690 --> 00:13:21,589
over this one and then let's see what

323
00:13:18,260 --> 00:13:23,420
the response looks like oh so yeah it's

324
00:13:21,589 --> 00:13:25,730
it's retrieving the standard out of the

325
00:13:23,420 --> 00:13:28,219
exit the command execution storing it to

326
00:13:25,730 --> 00:13:29,570
the variable and then it's checking to

327
00:13:28,220 --> 00:13:31,550
make sure that there's the command was

328
00:13:29,570 --> 00:13:34,700
executed properly and then let's step

329
00:13:31,550 --> 00:13:37,430
over that and now we have params being

330
00:13:34,700 --> 00:13:40,070
defined with the by D the response and

331
00:13:37,430 --> 00:13:42,170
data and the data is being running run

332
00:13:40,070 --> 00:13:45,529
through the encryption function here so

333
00:13:42,170 --> 00:13:49,610
if we step over this yeah we should be

334
00:13:45,529 --> 00:13:53,990
able to see our params and then if we

335
00:13:49,610 --> 00:13:56,180
did this data data there there's our

336
00:13:53,990 --> 00:13:58,670
data so this is actually the encrypted

337
00:13:56,180 --> 00:14:05,359
data so if we actually did encrypt and

338
00:13:58,670 --> 00:14:06,740
then our key we would get back that

339
00:14:05,360 --> 00:14:09,350
standard out so at this point what it's

340
00:14:06,740 --> 00:14:12,260
doing is it's creating a random ID it's

341
00:14:09,350 --> 00:14:14,959
registering itself it gets back a key

342
00:14:12,260 --> 00:14:17,779
when it registers itself the key is then

343
00:14:14,959 --> 00:14:20,660
used to retrieve commands from the

344
00:14:17,779 --> 00:14:23,510
server over regular port 80 HTTP

345
00:14:20,660 --> 00:14:25,640
requests it retrieves the commands

346
00:14:23,510 --> 00:14:28,220
decrypts those commands and then runs

347
00:14:25,640 --> 00:14:30,529
them takes a standard L encrypts them

348
00:14:28,220 --> 00:14:32,330
again and then sends them back but on

349
00:14:30,529 --> 00:14:35,029
top of that it's saving them I'm

350
00:14:32,330 --> 00:14:36,709
assuming so that the hacker can look up

351
00:14:35,029 --> 00:14:38,839
the past history and past commands that

352
00:14:36,709 --> 00:14:40,010
it's ran before I'm assuming that's what

353
00:14:38,839 --> 00:14:42,470
that's for

354
00:14:40,010 --> 00:14:45,459
and then we come over here and again

355
00:14:42,470 --> 00:14:48,529
this is our last one being sent it's

356
00:14:45,459 --> 00:14:51,579
sending it back as a post parameter so

357
00:14:48,529 --> 00:14:53,990
let's step over that and then it's

358
00:14:51,580 --> 00:14:56,990
storing something called die and it's

359
00:14:53,990 --> 00:15:00,589
200 or request 200 I'm assuming so if

360
00:14:56,990 --> 00:15:02,690
die does not equal 200 then quit right

361
00:15:00,589 --> 00:15:05,540
maybe this is its way of killing the by

362
00:15:02,690 --> 00:15:06,890
if it decides it wants to kill it okay

363
00:15:05,540 --> 00:15:08,510
so what we're gonna do next is take our

364
00:15:06,890 --> 00:15:10,550
PowerShell memory dump that we had taken

365
00:15:08,510 --> 00:15:12,319
from earlier on the infected machine

366
00:15:10,550 --> 00:15:13,969
we're going to parse that with power

367
00:15:12,320 --> 00:15:15,800
dome to see if we can find the key in

368
00:15:13,970 --> 00:15:17,810
memory and the commands that were around

369
00:15:15,800 --> 00:15:20,329
in memory if we can then we can

370
00:15:17,810 --> 00:15:22,579
we'll eat decrypt those and know exactly

371
00:15:20,330 --> 00:15:23,750
what then our author is up to so first

372
00:15:22,580 --> 00:15:26,779
thing we're going to do is we're gonna

373
00:15:23,750 --> 00:15:29,450
want to take go to power dump download

374
00:15:26,779 --> 00:15:31,730
that we have that saved here so I'm

375
00:15:29,450 --> 00:15:34,279
going to go ahead and open up PowerShell

376
00:15:31,730 --> 00:15:36,200
change directory to my malware directory

377
00:15:34,279 --> 00:15:37,610
and again just to stress this again

378
00:15:36,200 --> 00:15:40,910
OPSEC you should be running this in a

379
00:15:37,610 --> 00:15:44,150
virtual environment okay so I'm actually

380
00:15:40,910 --> 00:15:47,689
going to drop in to bash for this it's a

381
00:15:44,150 --> 00:15:51,470
little bit nicer than Python power dump

382
00:15:47,690 --> 00:15:54,050
top I okay so there's power dump we're

383
00:15:51,470 --> 00:15:57,760
gonna go ahead and load a memory dump

384
00:15:54,050 --> 00:16:02,329
file we should be able to see it here

385
00:15:57,760 --> 00:16:05,270
 up here it is okay okay so we're

386
00:16:02,330 --> 00:16:07,580
gonna load that okay that's a little bit

387
00:16:05,270 --> 00:16:09,230
more go back it's not processed so we're

388
00:16:07,580 --> 00:16:11,240
going to have that process now this

389
00:16:09,230 --> 00:16:12,980
could take up to five minutes for this

390
00:16:11,240 --> 00:16:14,960
to run so I'm gonna cut out on this

391
00:16:12,980 --> 00:16:18,170
section and then come back once this is

392
00:16:14,960 --> 00:16:20,450
done running okay cool so this actually

393
00:16:18,170 --> 00:16:23,240
ran relatively quickly finished about

394
00:16:20,450 --> 00:16:24,950
about a minute and a half so it did find

395
00:16:23,240 --> 00:16:27,350
some script blocks and it did find some

396
00:16:24,950 --> 00:16:29,510
variables in memory which is nice and is

397
00:16:27,350 --> 00:16:31,339
asking me if I want to save it for a

398
00:16:29,510 --> 00:16:33,370
quick processing later this just makes

399
00:16:31,339 --> 00:16:36,020
it to where if you have to restart

400
00:16:33,370 --> 00:16:37,580
powered up it'll make a little saved

401
00:16:36,020 --> 00:16:39,530
files that we have to wait two or three

402
00:16:37,580 --> 00:16:42,560
minutes for that to process so we're

403
00:16:39,530 --> 00:16:44,390
gonna go ahead and save that okay so our

404
00:16:42,560 --> 00:16:45,859
file has been loaded and it's also been

405
00:16:44,390 --> 00:16:48,530
processed so let's go ahead and jump

406
00:16:45,860 --> 00:16:50,780
into the option number four which is

407
00:16:48,530 --> 00:16:53,000
going to let us search for variables

408
00:16:50,780 --> 00:16:54,890
that were stored in memory so as we can

409
00:16:53,000 --> 00:16:57,320
see once we do that there's 11,000

410
00:16:54,890 --> 00:16:59,870
possible values stored in memory string

411
00:16:57,320 --> 00:17:01,580
stored in memory we don't they we need

412
00:16:59,870 --> 00:17:04,069
to selectively reduce that down if we

413
00:17:01,580 --> 00:17:05,750
can at all possible so one of the things

414
00:17:04,069 --> 00:17:08,869
that we know is it's all in hex right so

415
00:17:05,750 --> 00:17:10,339
the values will be a through F so we

416
00:17:08,869 --> 00:17:12,020
have a through F we're gonna give it

417
00:17:10,339 --> 00:17:15,319
some regex that will do that so a

418
00:17:12,020 --> 00:17:17,179
through F and 0 through 9 because that's

419
00:17:15,319 --> 00:17:20,060
all of them that's the possible range of

420
00:17:17,179 --> 00:17:21,410
characters for hex so we're and then

421
00:17:20,060 --> 00:17:22,730
we're gonna save the beginning of the

422
00:17:21,410 --> 00:17:25,819
string at the end at the end of the

423
00:17:22,730 --> 00:17:28,220
string plus one or more of them so again

424
00:17:25,819 --> 00:17:30,320
that's a matches saying at the beginning

425
00:17:28,220 --> 00:17:33,380
of the string and then it's going

426
00:17:30,320 --> 00:17:35,210
a through F or a capital A through F or

427
00:17:33,380 --> 00:17:38,269
zero through nine and we're gonna have

428
00:17:35,210 --> 00:17:41,269
at least one or more possible so matches

429
00:17:38,269 --> 00:17:44,269
so once we type that in we now have only

430
00:17:41,269 --> 00:17:46,429
nine thousand and ten possible parallel

431
00:17:44,269 --> 00:17:47,539
powershell variables in memory so what

432
00:17:46,429 --> 00:17:49,700
else do we know about the key we know

433
00:17:47,539 --> 00:17:52,639
that the key was 32 bytes in total

434
00:17:49,700 --> 00:17:54,529
length on top of being hex encoded so

435
00:17:52,639 --> 00:17:58,070
let's go ahead and give it the length of

436
00:17:54,529 --> 00:18:00,860
equals 32 when we do length of equals 32

437
00:17:58,070 --> 00:18:02,689
we get seven possible variables that

438
00:18:00,860 --> 00:18:04,370
were stored in memory and we can just

439
00:18:02,690 --> 00:18:06,019
kind of click through this and we can

440
00:18:04,370 --> 00:18:07,908
see those values

441
00:18:06,019 --> 00:18:09,200
okay so there's seven possible ones

442
00:18:07,909 --> 00:18:11,210
that's not too bad we can definitely

443
00:18:09,200 --> 00:18:13,690
work with that so let's just go ahead

444
00:18:11,210 --> 00:18:16,399
and dump those it's dumping it to

445
00:18:13,690 --> 00:18:20,389
variable values file called variable

446
00:18:16,399 --> 00:18:22,189
values so it's a jump over here let's

447
00:18:20,389 --> 00:18:29,928
make sure we save that real fast

448
00:18:22,190 --> 00:18:32,179
somewhere here possible keys alright

449
00:18:29,929 --> 00:18:34,789
let's let's clear this now because we've

450
00:18:32,179 --> 00:18:36,649
found what could possibly be the keys or

451
00:18:34,789 --> 00:18:38,658
no one clear that and now we'll go back

452
00:18:36,649 --> 00:18:40,100
to up to 11,000 possible variables and

453
00:18:38,659 --> 00:18:42,350
now what we're gonna want to search for

454
00:18:40,100 --> 00:18:43,279
and the commands ever run right so at

455
00:18:42,350 --> 00:18:45,500
this point if it's been running for

456
00:18:43,279 --> 00:18:47,870
quite a while it's sure to have quite a

457
00:18:45,500 --> 00:18:50,179
big string stored up in memory a comma

458
00:18:47,870 --> 00:18:52,250
separated value string stored in memory

459
00:18:50,179 --> 00:18:54,769
of all of the encrypted commands that

460
00:18:52,250 --> 00:18:57,139
hit was needed to run previously or that

461
00:18:54,769 --> 00:18:58,370
it had ran previously so let's let's

462
00:18:57,139 --> 00:19:00,889
look for that right so we're gonna have

463
00:18:58,370 --> 00:19:02,779
the length is at least greater than I

464
00:19:00,889 --> 00:19:04,250
don't know a thousand at this point is

465
00:19:02,779 --> 00:19:07,460
probably going to be pretty large so

466
00:19:04,250 --> 00:19:08,960
once we do that we get down to 518

467
00:19:07,460 --> 00:19:11,360
variables and we're going to do matches

468
00:19:08,960 --> 00:19:15,019
now we know it's gonna have a comma in

469
00:19:11,360 --> 00:19:16,610
it right because it's a CSV bring us

470
00:19:15,019 --> 00:19:18,549
down to 38 power shell variable member

471
00:19:16,610 --> 00:19:21,799
reason and we know that there are all

472
00:19:18,549 --> 00:19:24,500
CSV encrypted hex blah so they're all

473
00:19:21,799 --> 00:19:28,100
again they're all hex values right so

474
00:19:24,500 --> 00:19:31,750
let's go ahead and do steal that hex

475
00:19:28,100 --> 00:19:31,750
projects that we had from before so

476
00:19:32,529 --> 00:19:37,610
there's our hex reg X but we're going to

477
00:19:35,269 --> 00:19:41,480
add in the comma in because it's a CSV

478
00:19:37,610 --> 00:19:43,040
or delimited so there and we're going to

479
00:19:41,480 --> 00:19:49,550
close that off

480
00:19:43,040 --> 00:19:52,309
forget to do a matches matches close the

481
00:19:49,550 --> 00:19:55,370
brackets plus one or more at the end of

482
00:19:52,309 --> 00:19:56,990
the string and close the quotes I want

483
00:19:55,370 --> 00:19:58,729
to do that we have 24 powershell

484
00:19:56,990 --> 00:20:00,590
variables and it could be storing these

485
00:19:58,730 --> 00:20:01,910
in multiple places that's why we're

486
00:20:00,590 --> 00:20:04,010
getting 24 so let's just take a quick

487
00:20:01,910 --> 00:20:06,110
look and again we're sending the data

488
00:20:04,010 --> 00:20:09,470
that we're expecting to see so let's

489
00:20:06,110 --> 00:20:13,370
just go ahead and dump those now okay so

490
00:20:09,470 --> 00:20:16,000
those are also dumped again let's go

491
00:20:13,370 --> 00:20:19,870
ahead and go in here move this over and

492
00:20:16,000 --> 00:20:28,340
now we have possible keys and possible

493
00:20:19,870 --> 00:20:30,830
commands okay and from here I'm going to

494
00:20:28,340 --> 00:20:32,270
jump back over to creating using the

495
00:20:30,830 --> 00:20:34,370
functions that it gave us we can write

496
00:20:32,270 --> 00:20:36,200
just a couple extra lines of code and we

497
00:20:34,370 --> 00:20:38,030
can parse through here until we find

498
00:20:36,200 --> 00:20:41,750
that appropriate or the right key that

499
00:20:38,030 --> 00:20:43,309
we're looking for so okay so at this

500
00:20:41,750 --> 00:20:45,710
point we've had power dump go through

501
00:20:43,309 --> 00:20:47,450
the memory dump we found seven possible

502
00:20:45,710 --> 00:20:49,910
keys that could be used and then we save

503
00:20:47,450 --> 00:20:51,710
those to a flat text file and then we

504
00:20:49,910 --> 00:20:53,630
also had power dump go through and find

505
00:20:51,710 --> 00:20:55,850
all of the possible commands and these

506
00:20:53,630 --> 00:20:57,650
are all again all encrypted commands so

507
00:20:55,850 --> 00:21:00,320
we can actually take these values now

508
00:20:57,650 --> 00:21:03,230
and run over each key and attempt to

509
00:21:00,320 --> 00:21:04,879
decrypt each command and then assuming

510
00:21:03,230 --> 00:21:06,679
we get the right key then we should get

511
00:21:04,880 --> 00:21:07,790
a proper and valid command so that's

512
00:21:06,679 --> 00:21:09,620
what we're gonna do is we want to take

513
00:21:07,790 --> 00:21:11,389
these possible keys we're going to

514
00:21:09,620 --> 00:21:12,830
create a new PowerShell file and in this

515
00:21:11,390 --> 00:21:15,080
PowerShell file we're actually just

516
00:21:12,830 --> 00:21:17,240
going to copy verbatim almost everything

517
00:21:15,080 --> 00:21:20,449
that the malware pros are provided to us

518
00:21:17,240 --> 00:21:21,679
so we're gonna have a new file here and

519
00:21:20,450 --> 00:21:23,870
you can see here I've already taken the

520
00:21:21,679 --> 00:21:25,670
time to take the keys and put them into

521
00:21:23,870 --> 00:21:27,979
an array called keys and then I took the

522
00:21:25,670 --> 00:21:30,410
commands and I put them into an array

523
00:21:27,980 --> 00:21:31,760
called commands and what we're gonna do

524
00:21:30,410 --> 00:21:33,530
is we're gonna actually just loop over

525
00:21:31,760 --> 00:21:34,730
each of those and so that's what I've

526
00:21:33,530 --> 00:21:36,649
done here with this code is I've just

527
00:21:34,730 --> 00:21:38,750
done set four key and keys and for

528
00:21:36,650 --> 00:21:39,890
command in commands and we're going to

529
00:21:38,750 --> 00:21:42,170
do is run it through the decryption

530
00:21:39,890 --> 00:21:44,450
function provided to us by the mail or

531
00:21:42,170 --> 00:21:47,240
author so we're gonna need to copy those

532
00:21:44,450 --> 00:21:49,870
those commands are those functions so we

533
00:21:47,240 --> 00:21:52,130
come over to our malware source file

534
00:21:49,870 --> 00:21:53,719
we're gonna copy everything except for

535
00:21:52,130 --> 00:21:55,070
the bot code function right because we

536
00:21:53,720 --> 00:21:56,450
don't want it to be a bot we just want

537
00:21:55,070 --> 00:21:58,700
it to decrypt

538
00:21:56,450 --> 00:22:01,370
and copy everything except for the bot

539
00:21:58,700 --> 00:22:04,190
function and we're just using the code

540
00:22:01,370 --> 00:22:05,750
provided to us and we're gonna copy

541
00:22:04,190 --> 00:22:09,200
those and we're gonna paste them into

542
00:22:05,750 --> 00:22:11,570
our new file so that I pasted so we have

543
00:22:09,200 --> 00:22:13,310
our for loop and then at the very end of

544
00:22:11,570 --> 00:22:14,870
our for loop we're gonna run it we're

545
00:22:13,310 --> 00:22:18,080
going to run the decryption function and

546
00:22:14,870 --> 00:22:20,300
now what's gonna happen here is if it is

547
00:22:18,080 --> 00:22:21,800
the valid key then what's going to

548
00:22:20,300 --> 00:22:23,870
happen is it's going to print it out in

549
00:22:21,800 --> 00:22:26,210
a valid ASCII if it's not it's just

550
00:22:23,870 --> 00:22:28,790
gonna be some binary data which we don't

551
00:22:26,210 --> 00:22:30,170
care about right and if we don't care

552
00:22:28,790 --> 00:22:32,120
about it then that's not the right key

553
00:22:30,170 --> 00:22:33,140
so what we've done here is I've taken a

554
00:22:32,120 --> 00:22:34,669
little bit of regex

555
00:22:33,140 --> 00:22:36,800
and it's looking through the balla to

556
00:22:34,670 --> 00:22:39,650
ASCII range and it says if the decrypted

557
00:22:36,800 --> 00:22:41,000
text is valid ASCII then we know that it

558
00:22:39,650 --> 00:22:42,740
is our valid key which we're going to

559
00:22:41,000 --> 00:22:44,810
save and then we're gonna add it to our

560
00:22:42,740 --> 00:22:45,980
decrypted commands and at the very end

561
00:22:44,810 --> 00:22:49,129
we're gonna print both of those things

562
00:22:45,980 --> 00:22:52,640
so if this works correctly we should be

563
00:22:49,130 --> 00:22:53,930
able to get our answer and we did so as

564
00:22:52,640 --> 00:22:55,970
we can see here we can see the very

565
00:22:53,930 --> 00:22:59,360
first command that was run was net user

566
00:22:55,970 --> 00:23:01,100
then we had an IP config and then LS and

567
00:22:59,360 --> 00:23:05,260
it looks like the the hacker actually

568
00:23:01,100 --> 00:23:08,899
ran commands multiple times in a row but

569
00:23:05,260 --> 00:23:11,360
again we have our valid crypto key here

570
00:23:08,900 --> 00:23:13,280
too so using this information we can

571
00:23:11,360 --> 00:23:15,590
refine our script so we can toss it into

572
00:23:13,280 --> 00:23:17,870
another for loop and we can automate the

573
00:23:15,590 --> 00:23:19,280
process for all of the infected machines

574
00:23:17,870 --> 00:23:21,979
we can go through each and every

575
00:23:19,280 --> 00:23:25,190
infected machine find the valid key in

576
00:23:21,980 --> 00:23:27,140
memory use that key decrypt the commands

577
00:23:25,190 --> 00:23:29,870
and then send them back to us and we'll

578
00:23:27,140 --> 00:23:33,280
know what the hacker did on each and

579
00:23:29,870 --> 00:23:35,629
every machine across our environment

580
00:23:33,280 --> 00:23:37,700
okay so on final note I just wanted to

581
00:23:35,630 --> 00:23:39,620
reiterate keep in mind that this may not

582
00:23:37,700 --> 00:23:42,260
be exactly how all malware authors do

583
00:23:39,620 --> 00:23:45,860
that right PowerShell commands that web

584
00:23:42,260 --> 00:23:47,930
get a string that then executes smore

585
00:23:45,860 --> 00:23:50,810
PowerShell is very indicative of a lot

586
00:23:47,930 --> 00:23:52,670
of common malware but again you may have

587
00:23:50,810 --> 00:23:55,070
something like Python a PI installer

588
00:23:52,670 --> 00:23:57,530
binary with Python code inside of it or

589
00:23:55,070 --> 00:23:59,270
C sharp either way both the PI installer

590
00:23:57,530 --> 00:24:01,250
situation can be extracted from the

591
00:23:59,270 --> 00:24:03,110
binary and c-sharp can can use something

592
00:24:01,250 --> 00:24:06,080
like Dante reflector for example and

593
00:24:03,110 --> 00:24:08,360
pull out the entire c-sharp source code

594
00:24:06,080 --> 00:24:10,010
either way that remains the same don't

595
00:24:08,360 --> 00:24:12,500
reinvent the wheel use the code

596
00:24:10,010 --> 00:24:14,510
- you making small tweaks here and there

597
00:24:12,500 --> 00:24:16,430
and then you can better analyze the

598
00:24:14,510 --> 00:24:18,260
malware debug it figure out what it's

599
00:24:16,430 --> 00:24:19,910
doing what it looks like and then maybe

600
00:24:18,260 --> 00:24:21,890
from there you can use that to better

601
00:24:19,910 --> 00:24:24,590
assist you and your instead of handling

602
00:24:21,890 --> 00:24:26,000
in response to an active infection right

603
00:24:24,590 --> 00:24:27,770
maybe you can find the key in memory

604
00:24:26,000 --> 00:24:31,370
that that you can then use to decrypt

605
00:24:27,770 --> 00:24:33,470
something of important value right also

606
00:24:31,370 --> 00:24:34,520
again OPSEC OPSEC is huge right you want

607
00:24:33,470 --> 00:24:36,830
to make sure that you run these things

608
00:24:34,520 --> 00:24:38,000
inside of a contained isolated

609
00:24:36,830 --> 00:24:40,639
environment whether that's a virtual

610
00:24:38,000 --> 00:24:42,020
machine a docker image or etc also keep

611
00:24:40,640 --> 00:24:43,550
it segregated from your network because

612
00:24:42,020 --> 00:24:45,290
you never know I might have an active

613
00:24:43,550 --> 00:24:47,090
exploit that it could reach out and then

614
00:24:45,290 --> 00:24:48,500
exploit something further even while

615
00:24:47,090 --> 00:24:51,169
you're doing your analysis so whether

616
00:24:48,500 --> 00:24:53,780
that's post only network communications

617
00:24:51,170 --> 00:24:56,600
inside of a VM or maybe you're doing a

618
00:24:53,780 --> 00:24:58,220
VPN right just always make sure that you

619
00:24:56,600 --> 00:25:00,469
you're practicing OPSEC so that you

620
00:24:58,220 --> 00:25:02,480
don't trip off the hackers to what

621
00:25:00,470 --> 00:25:05,060
you're doing but also to keep yourself

622
00:25:02,480 --> 00:25:07,010
safe and then again finally use all the

623
00:25:05,060 --> 00:25:08,570
tools in this demo I didn't didn't show

624
00:25:07,010 --> 00:25:09,860
it but I was running Wireshark in the

625
00:25:08,570 --> 00:25:11,600
background it's a running process

626
00:25:09,860 --> 00:25:13,820
monitor so I could see what's file

627
00:25:11,600 --> 00:25:16,010
handles it was hooking into registry

628
00:25:13,820 --> 00:25:17,270
keys stuff like that just in case it did

629
00:25:16,010 --> 00:25:19,100
right I would rather have that

630
00:25:17,270 --> 00:25:21,350
information when I started my analysis

631
00:25:19,100 --> 00:25:25,750
and does not have it again process dump

632
00:25:21,350 --> 00:25:25,750
process explorer etc that's it

