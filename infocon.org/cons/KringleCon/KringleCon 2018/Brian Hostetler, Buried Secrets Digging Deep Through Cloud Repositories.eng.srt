1
00:00:00,000 --> 00:00:03,210
hello and welcome to think on and this

2
00:00:01,680 --> 00:00:04,859
talk we discussing tools and techniques

3
00:00:03,210 --> 00:00:07,290
available to locate passwords and keys

4
00:00:04,859 --> 00:00:08,940
and public repos such as github and how

5
00:00:07,290 --> 00:00:10,740
InfoSec professionals can utilize these

6
00:00:08,940 --> 00:00:11,759
tools to prevent public's closures of

7
00:00:10,740 --> 00:00:13,799
sensitive information

8
00:00:11,759 --> 00:00:15,179
my name is Brian Mosteller you can

9
00:00:13,799 --> 00:00:16,919
follow me on twitter at hostler brian

10
00:00:15,179 --> 00:00:19,410
three had mixed background networks

11
00:00:16,920 --> 00:00:20,789
sysadmin InfoSec currently working with

12
00:00:19,410 --> 00:00:22,500
a legendary and talented counter high

13
00:00:20,789 --> 00:00:24,750
team under the airforce education with

14
00:00:22,500 --> 00:00:25,920
Anna Street program I have a passion for

15
00:00:24,750 --> 00:00:27,119
lifelong learning and educating our

16
00:00:25,920 --> 00:00:29,250
community about the latest and Kosek

17
00:00:27,119 --> 00:00:30,179
tools and techniques as is claiming the

18
00:00:29,250 --> 00:00:31,560
constant this presentation is not

19
00:00:30,179 --> 00:00:34,010
endorsed nor an official position of the

20
00:00:31,560 --> 00:00:35,940
Air Force or a Department of Defense

21
00:00:34,010 --> 00:00:37,620
quick overview what we cover in this

22
00:00:35,940 --> 00:00:39,210
presentation we're going to go over some

23
00:00:37,620 --> 00:00:40,739
very recent examples of private data and

24
00:00:39,210 --> 00:00:42,690
release close and exploit in the public

25
00:00:40,739 --> 00:00:43,800
cloud we will cover why these tools and

26
00:00:42,690 --> 00:00:45,449
techniques are important to red and blue

27
00:00:43,800 --> 00:00:47,250
teams to locate and identify leaked data

28
00:00:45,450 --> 00:00:48,750
then we will provide a quick overview

29
00:00:47,250 --> 00:00:51,300
that requirements to install a pocket

30
00:00:48,750 --> 00:00:52,649
repository dating tool finally we walk

31
00:00:51,300 --> 00:00:54,629
you through the solution process and

32
00:00:52,649 --> 00:00:57,000
demonstrate the capability on a sample

33
00:00:54,629 --> 00:01:01,199
cloud repository to show how easy it is

34
00:00:57,000 --> 00:01:04,799
to locate leaked information can't steal

35
00:01:01,199 --> 00:01:06,390
a private key Vasser been made public so

36
00:01:04,799 --> 00:01:07,830
these are some of the many high profile

37
00:01:06,390 --> 00:01:09,840
examples of invert and key disclosure

38
00:01:07,830 --> 00:01:11,220
discovery and cost associated poor

39
00:01:09,840 --> 00:01:14,400
hygiene before developers commit to

40
00:01:11,220 --> 00:01:15,900
cloud repos in September 2017 cyber

41
00:01:14,400 --> 00:01:18,720
security company up guard discovered

42
00:01:15,900 --> 00:01:20,369
over 100 gigs of classified data that

43
00:01:18,720 --> 00:01:22,259
belong to the Pentagon mistakenly left

44
00:01:20,369 --> 00:01:24,840
exposed on an unsecured Amazon Web

45
00:01:22,259 --> 00:01:26,189
Services public cloud server is likely

46
00:01:24,840 --> 00:01:29,130
to have been accessible anyone the cloud

47
00:01:26,189 --> 00:01:30,899
for years that same year drone maker DJI

48
00:01:29,130 --> 00:01:33,089
lift is privatized to sell firmware keys

49
00:01:30,900 --> 00:01:34,170
open to the world on get in addition to

50
00:01:33,090 --> 00:01:36,420
AWS credentials

51
00:01:34,170 --> 00:01:39,960
moreover s3 silos feel sensitive

52
00:01:36,420 --> 00:01:41,460
customer data we're also wheat uber

53
00:01:39,960 --> 00:01:44,070
posts or URLs repos they contain a

54
00:01:41,460 --> 00:01:45,960
security key which allowed my authorized

55
00:01:44,070 --> 00:01:49,258
access to the names and driver's license

56
00:01:45,960 --> 00:01:51,000
numbers about 50,000 their drivers DXE

57
00:01:49,259 --> 00:01:52,500
wanted largest IT consulting firms in

58
00:01:51,000 --> 00:01:55,649
the world and a burly upload as private

59
00:01:52,500 --> 00:01:57,930
keys to an unsecured git repo the

60
00:01:55,649 --> 00:01:59,729
private keys were used to launch 244

61
00:01:57,930 --> 00:02:02,159
Atos virtual machines over the course of

62
00:01:59,729 --> 00:02:06,450
four days prompting in to have to pay

63
00:02:02,159 --> 00:02:07,829
around 64,000 rectify the issue so as

64
00:02:06,450 --> 00:02:09,330
you can see no company organization has

65
00:02:07,829 --> 00:02:10,440
immunities mistakes and I luckily more

66
00:02:09,330 --> 00:02:11,670
in the future as more and more

67
00:02:10,440 --> 00:02:15,060
organizations move there

68
00:02:11,670 --> 00:02:17,069
to the cloud there are multitude of

69
00:02:15,060 --> 00:02:19,140
open-source tools available to search

70
00:02:17,069 --> 00:02:21,780
repos for passwords or private keys and

71
00:02:19,140 --> 00:02:22,890
emergently committed repo security

72
00:02:21,780 --> 00:02:24,270
scanner is the command-line interface

73
00:02:22,890 --> 00:02:25,589
tool the fond secrets

74
00:02:24,270 --> 00:02:32,730
accidentally committed to get repo

75
00:02:25,590 --> 00:02:36,000
passwords and private keys get leaks is

76
00:02:32,730 --> 00:02:38,190
another popular tool to oughta get repos

77
00:02:36,000 --> 00:02:43,860
for secrets before you push them to the

78
00:02:38,190 --> 00:02:45,660
cloud for this talk we'll be focusing on

79
00:02:43,860 --> 00:02:47,489
truffle hog an effective tool that digs

80
00:02:45,660 --> 00:02:49,920
deep into commit history and branches to

81
00:02:47,489 --> 00:02:51,299
find secrets accidentally committed more

82
00:02:49,920 --> 00:02:53,190
importantly developers can run this tool

83
00:02:51,299 --> 00:02:54,810
on local files to ensure that there are

84
00:02:53,190 --> 00:02:57,750
no secrets before push pushing the

85
00:02:54,810 --> 00:02:58,920
public repos if these tools don't meet

86
00:02:57,750 --> 00:03:00,269
your requirements you can always cook

87
00:02:58,920 --> 00:03:05,790
your own just make sure you share it out

88
00:03:00,269 --> 00:03:06,830
with the infoset community so what is

89
00:03:05,790 --> 00:03:09,540
that this truffle ugh

90
00:03:06,830 --> 00:03:11,459
it's named after domestic pigs with keen

91
00:03:09,540 --> 00:03:12,840
sense of smell truffle hogs are utilized

92
00:03:11,459 --> 00:03:16,230
for locating prized truffle mushrooms

93
00:03:12,840 --> 00:03:17,400
buried deep underground truffle log is a

94
00:03:16,230 --> 00:03:18,810
Python script that can be found on

95
00:03:17,400 --> 00:03:20,820
github written by Dylan Airy

96
00:03:18,810 --> 00:03:22,530
and info set committee contributors it

97
00:03:20,820 --> 00:03:27,299
looks for a different price leap

98
00:03:22,530 --> 00:03:28,829
passwords and keys to get started with

99
00:03:27,299 --> 00:03:31,019
installing trouble log there are a few

100
00:03:28,829 --> 00:03:32,670
basic requirements you will need to know

101
00:03:31,019 --> 00:03:33,989
basic commands and your chosen operating

102
00:03:32,670 --> 00:03:36,089
system to navigate through out file

103
00:03:33,989 --> 00:03:39,299
systems you will need get installed on

104
00:03:36,090 --> 00:03:46,109
your local operating environment along

105
00:03:39,299 --> 00:03:47,250
with basic git commands so installing it

106
00:03:46,109 --> 00:03:52,549
is pretty straightforward you said to

107
00:03:47,250 --> 00:03:52,549
the site run a few commands on Linux

108
00:03:52,850 --> 00:04:00,290
same thing with Mac for Windows you just

109
00:03:56,340 --> 00:04:00,290
download the executable and install

110
00:04:03,909 --> 00:04:09,649
now if you and your team are completely

111
00:04:06,379 --> 00:04:10,340
new to get to github don't know where a

112
00:04:09,650 --> 00:04:12,790
start

113
00:04:10,340 --> 00:04:15,140
I highly recommend that you check out a

114
00:04:12,790 --> 00:04:17,659
charmer Lowe's intro to sprinting

115
00:04:15,140 --> 00:04:19,070
workshop it's a workshop designed for

116
00:04:17,660 --> 00:04:21,109
beginners to help them learn the basic

117
00:04:19,070 --> 00:04:26,090
school's skills necessary to contribute

118
00:04:21,108 --> 00:04:28,400
to open source projects covers

119
00:04:26,090 --> 00:04:29,929
everything you need to know from you

120
00:04:28,400 --> 00:04:39,710
know cloning repositories to run

121
00:04:29,930 --> 00:04:41,720
commands its navigating repos you're

122
00:04:39,710 --> 00:04:44,570
also going to need Python latest version

123
00:04:41,720 --> 00:04:46,460
is three go ahead and download it if you

124
00:04:44,570 --> 00:04:49,820
already have it for Windows is an

125
00:04:46,460 --> 00:04:51,138
executable we can run Linux Mac already

126
00:04:49,820 --> 00:04:59,360
has installed just make sure you're on

127
00:04:51,139 --> 00:05:01,910
the latest version we're gonna then need

128
00:04:59,360 --> 00:05:04,759
to clone the repository or local machine

129
00:05:01,910 --> 00:05:10,970
and then run a pip install to install

130
00:05:04,759 --> 00:05:12,080
the Python script now I'm going to walk

131
00:05:10,970 --> 00:05:13,400
you through the installation process and

132
00:05:12,080 --> 00:05:15,130
provide demonstration the truffle blog

133
00:05:13,400 --> 00:05:17,239
in action against the sample repository

134
00:05:15,130 --> 00:05:21,349
so first thing what I need to do is open

135
00:05:17,240 --> 00:05:24,349
up a terminal and we'll go ahead and

136
00:05:21,349 --> 00:05:31,010
open up the truffle hog readme file as

137
00:05:24,349 --> 00:05:32,810
well so we have that up as a guide so

138
00:05:31,010 --> 00:05:39,229
first thing I need to do is get clone

139
00:05:32,810 --> 00:05:40,520
and the truffle hog URL so as you can

140
00:05:39,229 --> 00:05:44,630
see already have installed locally on my

141
00:05:40,520 --> 00:05:48,320
machine after that you have to change

142
00:05:44,630 --> 00:05:49,639
directory in the truffle hog and it

143
00:05:48,320 --> 00:05:53,180
creates two folders to go and do that

144
00:05:49,639 --> 00:05:55,360
twice and make sure you run a pip

145
00:05:53,180 --> 00:05:55,360
install

146
00:05:59,640 --> 00:06:05,950
after that as you can see already out

147
00:06:02,050 --> 00:06:07,360
requirements satisfied and then we're

148
00:06:05,950 --> 00:06:12,130
gonna run the command against their

149
00:06:07,360 --> 00:06:16,800
sample repository which is up here to do

150
00:06:12,130 --> 00:06:25,060
that we're gonna call python version 3

151
00:06:16,800 --> 00:06:27,880
truffle hog yep truffle hog pie just our

152
00:06:25,060 --> 00:06:29,350
Python script and then we can just go

153
00:06:27,880 --> 00:06:33,280
ahead and grab this and the pace on the

154
00:06:29,350 --> 00:06:36,070
tail in as an example repo to run

155
00:06:33,280 --> 00:06:37,780
against and what this does is it comes

156
00:06:36,070 --> 00:06:40,690
through the entire repository and looks

157
00:06:37,780 --> 00:06:44,140
for any passwords or or keys that are

158
00:06:40,690 --> 00:06:47,730
out there you know as you can see

159
00:06:44,140 --> 00:06:47,729
there's quite a bit in their sample repo

160
00:06:49,590 --> 00:06:55,450
now developers can also run a command

161
00:06:52,840 --> 00:06:57,010
against their local repository before

162
00:06:55,450 --> 00:06:59,890
pushing out to the cloud and that's just

163
00:06:57,010 --> 00:07:02,289
running that Python PI script against

164
00:06:59,890 --> 00:07:03,760
their local repository and ensuring that

165
00:07:02,290 --> 00:07:07,480
there's no passwords or keys before

166
00:07:03,760 --> 00:07:10,320
committing to a public repo to prevent

167
00:07:07,480 --> 00:07:10,320
any leaks like this

168
00:07:20,470 --> 00:07:23,740
so that completes our presentation to

169
00:07:22,360 --> 00:07:25,440
review we have learned about common

170
00:07:23,740 --> 00:07:27,310
commit mistakes developers make and

171
00:07:25,440 --> 00:07:29,200
justification utilize tools such as

172
00:07:27,310 --> 00:07:31,510
truffle hog to run checks before pushing

173
00:07:29,200 --> 00:07:33,159
updates to the cloud next we review

174
00:07:31,510 --> 00:07:35,250
popular tools available to red-blue

175
00:07:33,160 --> 00:07:37,510
teams to utilize for testing purposes

176
00:07:35,250 --> 00:07:40,300
finally we have illustrated the pressing

177
00:07:37,510 --> 00:07:42,190
need for red blue team seat to evolve

178
00:07:40,300 --> 00:07:45,400
and contribute to products such as these

179
00:07:42,190 --> 00:07:47,610
to improve cloud security practices for

180
00:07:45,400 --> 00:07:52,989
more tips are moving sensitive data from

181
00:07:47,610 --> 00:07:53,740
public repos head to github help thanks

182
00:07:52,990 --> 00:07:56,850
for watching

183
00:07:53,740 --> 00:07:56,850
[Music]

184
00:08:03,630 --> 00:08:11,009
[Music]

