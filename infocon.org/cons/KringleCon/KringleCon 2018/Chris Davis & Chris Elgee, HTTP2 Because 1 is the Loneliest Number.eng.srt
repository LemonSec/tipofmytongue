1
00:00:00,030 --> 00:00:04,950
welcome Kringle Con attendees to http/2

2
00:00:03,000 --> 00:00:05,339
because one is in fact the loneliest

3
00:00:04,950 --> 00:00:07,950
number

4
00:00:05,339 --> 00:00:09,389
my name is Chris LG I work at counter

5
00:00:07,950 --> 00:00:11,219
hack challenges building things and

6
00:00:09,389 --> 00:00:13,709
breaking things I'm also in the Army

7
00:00:11,219 --> 00:00:15,480
National Guard I am on the Twitter's I

8
00:00:13,710 --> 00:00:16,890
have too many E's in my last name some

9
00:00:15,480 --> 00:00:18,750
certs and a singing Justin Bieber

10
00:00:16,890 --> 00:00:21,960
toothbrush Chris Davis and I'm going to

11
00:00:18,750 --> 00:00:23,340
talk to you today about HTTP 1.1 and 2.0

12
00:00:21,960 --> 00:00:25,980
and some of the differences there

13
00:00:23,340 --> 00:00:28,439
because it's 2.0 is a technology that

14
00:00:25,980 --> 00:00:30,480
most of us are less familiar with but

15
00:00:28,439 --> 00:00:33,450
it's really pervasive and we'll look at

16
00:00:30,480 --> 00:00:37,170
that going forward so each created about

17
00:00:33,450 --> 00:00:41,730
18 years apart and and kind of preceded

18
00:00:37,170 --> 00:00:44,309
by HTTP 9 and 1.0 but really dot 9 1 and

19
00:00:41,730 --> 00:00:46,050
1.1 aren't are terribly different at

20
00:00:44,309 --> 00:00:46,949
least in terms of the aspects we're

21
00:00:46,050 --> 00:00:52,019
going to look at today

22
00:00:46,950 --> 00:00:53,850
so with 1.1 and 2.0 they're both gonna

23
00:00:52,020 --> 00:00:57,449
be available in any browser you're using

24
00:00:53,850 --> 00:00:59,570
Safari Chrome Firefox edge whatever they

25
00:00:57,449 --> 00:01:03,599
will speak both of these technologies

26
00:00:59,570 --> 00:01:05,610
now with 1.1 our headers are all ascii

27
00:01:03,600 --> 00:01:07,770
they're all human readable each header

28
00:01:05,610 --> 00:01:11,130
is a line of code a line of ascii text

29
00:01:07,770 --> 00:01:13,350
where with 200 it's all byte codes it's

30
00:01:11,130 --> 00:01:15,420
binary so we're not able to read it

31
00:01:13,350 --> 00:01:16,589
anymore but but it's computers talking

32
00:01:15,420 --> 00:01:18,659
to computers so that they can be a

33
00:01:16,590 --> 00:01:20,009
little more compact and how they

34
00:01:18,659 --> 00:01:24,630
communicate so that that saves a little

35
00:01:20,009 --> 00:01:27,900
bit of overhead there also with 1.1 it's

36
00:01:24,630 --> 00:01:29,789
really a connectionless technology your

37
00:01:27,900 --> 00:01:31,710
your client your web browser asks for

38
00:01:29,790 --> 00:01:33,720
one file at a time and gets it back from

39
00:01:31,710 --> 00:01:36,899
the web server one one file at a time

40
00:01:33,720 --> 00:01:38,640
we're with 200 it's it is connection

41
00:01:36,900 --> 00:01:42,180
oriented you will see the term stream

42
00:01:38,640 --> 00:01:43,799
pop up a few times to where basically a

43
00:01:42,180 --> 00:01:46,380
web server can send a bunch of files at

44
00:01:43,799 --> 00:01:50,640
once with a single TCP handshake and a

45
00:01:46,380 --> 00:01:52,079
single tear down at the end with 1.1 we

46
00:01:50,640 --> 00:01:55,170
do still have some unencrypted just

47
00:01:52,079 --> 00:01:56,939
regular HTTP websites but of course most

48
00:01:55,170 --> 00:01:59,490
things we're doing anything sensitive on

49
00:01:56,939 --> 00:02:01,619
are gonna be TLS and that's you know

50
00:01:59,490 --> 00:02:04,500
your social media your email or whatever

51
00:02:01,619 --> 00:02:08,008
with with 200 the RFC actually allows

52
00:02:04,500 --> 00:02:10,889
for an unencrypted HTTP 2 connection but

53
00:02:08,008 --> 00:02:12,359
no browser will speak it really the only

54
00:02:10,889 --> 00:02:13,500
tool i've found that will that will

55
00:02:12,360 --> 00:02:16,800
speak unencrypted

56
00:02:13,500 --> 00:02:17,450
2.0 is curl and will play without here a

57
00:02:16,800 --> 00:02:22,170
little bit

58
00:02:17,450 --> 00:02:24,149
and finally with 1.1 that's that's

59
00:02:22,170 --> 00:02:26,640
absolutely totally available in any web

60
00:02:24,150 --> 00:02:28,320
server you're going to go to you really

61
00:02:26,640 --> 00:02:29,609
have to have to contrive an instance

62
00:02:28,320 --> 00:02:31,680
where it where it that wouldn't be

63
00:02:29,610 --> 00:02:35,040
available whereas with 2.0 it isn't

64
00:02:31,680 --> 00:02:37,110
completely available across the entire

65
00:02:35,040 --> 00:02:40,170
Internet but with any top site with most

66
00:02:37,110 --> 00:02:42,900
top sites it's going to be up so if we

67
00:02:40,170 --> 00:02:45,059
look at the top Alexa sites that fit on

68
00:02:42,900 --> 00:02:47,340
my slide all but three are speaking to

69
00:02:45,060 --> 00:02:48,660
doto already and if you think about it

70
00:02:47,340 --> 00:02:51,630
from the perspective of these major

71
00:02:48,660 --> 00:02:53,010
providers there there's a cost savings

72
00:02:51,630 --> 00:02:55,620
there right with with these binary

73
00:02:53,010 --> 00:02:57,420
headers with with fewer tcp handshakes

74
00:02:55,620 --> 00:03:00,480
and tear downs there there are a few

75
00:02:57,420 --> 00:03:02,399
fewer bytes in each transaction for a

76
00:03:00,480 --> 00:03:06,060
user which when you're dealing on the

77
00:03:02,400 --> 00:03:07,709
scale of these type of systems then that

78
00:03:06,060 --> 00:03:11,959
could be a significant cost savings in

79
00:03:07,709 --> 00:03:14,400
terms of network infrastructure so

80
00:03:11,959 --> 00:03:16,560
pictorially we can we can sort of think

81
00:03:14,400 --> 00:03:20,100
of it this way where with 1.1 we would

82
00:03:16,560 --> 00:03:21,750
request a URL like slash or index and

83
00:03:20,100 --> 00:03:23,910
then we would get that HTML file back

84
00:03:21,750 --> 00:03:27,030
from the server and then that since that

85
00:03:23,910 --> 00:03:28,859
file referenced a JavaScript script that

86
00:03:27,030 --> 00:03:30,570
needs to be added then we request it we

87
00:03:28,860 --> 00:03:32,790
get it back it referencing some image we

88
00:03:30,570 --> 00:03:35,519
request it we get it back maybe some CSS

89
00:03:32,790 --> 00:03:37,440
request to get it back all is individual

90
00:03:35,519 --> 00:03:39,870
connections with a three-way handshake

91
00:03:37,440 --> 00:03:42,600
the push of the file and then the

92
00:03:39,870 --> 00:03:45,060
four-way teardown with two not oh it is

93
00:03:42,600 --> 00:03:46,680
it is simpler it's a little more kind of

94
00:03:45,060 --> 00:03:48,510
fancy and how it does things but but

95
00:03:46,680 --> 00:03:51,000
there's a single request for slash or

96
00:03:48,510 --> 00:03:53,190
index and then the server can send back

97
00:03:51,000 --> 00:03:56,220
all the files that are necessary in a

98
00:03:53,190 --> 00:04:00,390
single push so again less less overhead

99
00:03:56,220 --> 00:04:03,030
in terms of network traffic to look at

100
00:04:00,390 --> 00:04:08,540
it a bit lower level let's kind of dive

101
00:04:03,030 --> 00:04:08,540
into curl here a bit so we've got here

102
00:04:09,590 --> 00:04:15,450
discourage for verbose without this curl

103
00:04:12,959 --> 00:04:16,978
would just return the HTML or whatever

104
00:04:15,450 --> 00:04:18,599
content comes back from the server it

105
00:04:16,978 --> 00:04:21,599
wouldn't tell us what's going on kind of

106
00:04:18,600 --> 00:04:24,630
under the hood I'm gonna say I'm gonna

107
00:04:21,599 --> 00:04:26,820
specify - - HTTP - because I want to

108
00:04:24,630 --> 00:04:28,020
talk HTTP -

109
00:04:26,820 --> 00:04:29,730
because that's what this talk is about

110
00:04:28,020 --> 00:04:34,340
then we're gonna give it a specific URL

111
00:04:29,730 --> 00:04:37,890
HTTP colon slash slash WWB TOCOM slash

112
00:04:34,340 --> 00:04:39,929
that's the website I want then I'm gonna

113
00:04:37,890 --> 00:04:42,120
do this little shorthand for put

114
00:04:39,930 --> 00:04:43,920
standard error into standard out I'm

115
00:04:42,120 --> 00:04:45,450
gonna do this because in order to show

116
00:04:43,920 --> 00:04:47,640
this one screen at a time I'm going to

117
00:04:45,450 --> 00:04:51,780
pipe standard out through the command

118
00:04:47,640 --> 00:04:53,880
less without putting standard error in a

119
00:04:51,780 --> 00:04:56,820
standard out we wouldn't be able to see

120
00:04:53,880 --> 00:04:58,920
the information that curl is going to

121
00:04:56,820 --> 00:05:00,870
give us about the handshake stuff when

122
00:04:58,920 --> 00:05:03,180
we curl for Bhosle we get the TLS

123
00:05:00,870 --> 00:05:06,390
handshake information and and all that

124
00:05:03,180 --> 00:05:08,490
all that connection errata in standard

125
00:05:06,390 --> 00:05:10,110
error so if we didn't put it into

126
00:05:08,490 --> 00:05:11,520
standard out then it would it would fly

127
00:05:10,110 --> 00:05:12,900
by and wouldn't get caught by the less

128
00:05:11,520 --> 00:05:14,280
command so that's just a little

129
00:05:12,900 --> 00:05:17,340
shorthand there again to combine

130
00:05:14,280 --> 00:05:21,630
standard error to set it out so off we

131
00:05:17,340 --> 00:05:24,510
go our browser curl goes ahead and

132
00:05:21,630 --> 00:05:27,690
reaches out to Baidu and then offers up

133
00:05:24,510 --> 00:05:29,909
a couple different connection methods

134
00:05:27,690 --> 00:05:32,370
using application layer protocol

135
00:05:29,910 --> 00:05:34,260
negotiation or al p.m. suffering h2

136
00:05:32,370 --> 00:05:38,010
which is just shorthand for HTTP to

137
00:05:34,260 --> 00:05:40,320
legend might guess and then also 1.1 and

138
00:05:38,010 --> 00:05:41,789
then goes forward I'm in kind of

139
00:05:40,320 --> 00:05:44,460
finished as a TLS handshake now notice

140
00:05:41,790 --> 00:05:46,170
that these these offerings that the two

141
00:05:44,460 --> 00:05:47,789
and the one that one these happen is

142
00:05:46,170 --> 00:05:49,740
part of the TLS handshake this is this

143
00:05:47,790 --> 00:05:50,250
is before any get requests or anything

144
00:05:49,740 --> 00:05:51,780
like that

145
00:05:50,250 --> 00:05:54,450
that's as well they're still determining

146
00:05:51,780 --> 00:05:57,030
how they want to speak securely so so

147
00:05:54,450 --> 00:06:00,390
those are the offers the Baidu server

148
00:05:57,030 --> 00:06:02,669
comes back it says great Lusaka 1.1 some

149
00:06:00,390 --> 00:06:05,460
certificate information and then here

150
00:06:02,670 --> 00:06:06,960
curl is showing us the regular ASCII

151
00:06:05,460 --> 00:06:09,180
request that we're used to seeing right

152
00:06:06,960 --> 00:06:11,489
as web app pentesters we're used to get

153
00:06:09,180 --> 00:06:13,290
in the slash and all this the host the

154
00:06:11,490 --> 00:06:16,230
user agent which of course here is curl

155
00:06:13,290 --> 00:06:18,540
and then give me back anything any type

156
00:06:16,230 --> 00:06:22,280
of data and then the web server responds

157
00:06:18,540 --> 00:06:25,170
with a typical ASCII header of 200 okay

158
00:06:22,280 --> 00:06:28,500
here's some stuff that's coming at you I

159
00:06:25,170 --> 00:06:31,320
don't cache things here's a cookie so I

160
00:06:28,500 --> 00:06:33,900
can so I can track your status as we go

161
00:06:31,320 --> 00:06:38,280
through and then of course after that

162
00:06:33,900 --> 00:06:41,039
comes the HTML now it's going to look

163
00:06:38,280 --> 00:06:46,349
similar with

164
00:06:41,040 --> 00:06:49,970
with Google we're going to offer HTTP 2

165
00:06:46,350 --> 00:06:53,790
and 1.1 will complete our TLS handshake

166
00:06:49,970 --> 00:06:56,190
certificates and then Google says hey

167
00:06:53,790 --> 00:06:58,530
let's talk HTTP 2 right I want to save

168
00:06:56,190 --> 00:07:01,680
that a little bit of overhead and you're

169
00:06:58,530 --> 00:07:03,450
able to talk it so here we go now

170
00:07:01,680 --> 00:07:06,450
this get request looks a little funny

171
00:07:03,450 --> 00:07:09,810
right because we're talking - we asked

172
00:07:06,450 --> 00:07:12,060
for - we got two back and and here's our

173
00:07:09,810 --> 00:07:16,500
header requesting one not one I think

174
00:07:12,060 --> 00:07:18,330
what happened here with curl is that it

175
00:07:16,500 --> 00:07:20,300
knows we want to see an ASCII header

176
00:07:18,330 --> 00:07:22,950
because we gave it the - V for verbose

177
00:07:20,300 --> 00:07:24,330
but of course there are no ASCII headers

178
00:07:22,950 --> 00:07:26,250
so it's got to make something up just

179
00:07:24,330 --> 00:07:29,460
just for these for these human eyes

180
00:07:26,250 --> 00:07:31,710
looking at it so it just sort of

181
00:07:29,460 --> 00:07:33,120
defaults to showing get slash HTTP one

182
00:07:31,710 --> 00:07:35,280
that one even though this really is a 2

183
00:07:33,120 --> 00:07:38,130
dot request and we can see that in the

184
00:07:35,280 --> 00:07:40,138
response from google HTTP slash - 200

185
00:07:38,130 --> 00:07:42,210
this is an okay of course this is

186
00:07:40,139 --> 00:07:45,120
actually coming back and forth is byte

187
00:07:42,210 --> 00:07:48,539
codes but kind of kind of abstracting as

188
00:07:45,120 --> 00:07:50,490
as ASCII for us for us humans so we see

189
00:07:48,539 --> 00:07:53,280
that response maybe some headers were

190
00:07:50,490 --> 00:07:55,229
less used to seeing it's still setting

191
00:07:53,280 --> 00:07:57,450
some cookies right because Google's

192
00:07:55,229 --> 00:07:59,219
still going to track certain things and

193
00:07:57,450 --> 00:08:04,680
then looking farther down we get the

194
00:07:59,220 --> 00:08:05,070
HTML coming back from Google so there we

195
00:08:04,680 --> 00:08:08,760
have it

196
00:08:05,070 --> 00:08:10,919
just HTTP - at a high level and now

197
00:08:08,760 --> 00:08:12,990
Chris Davis will talk more about looking

198
00:08:10,919 --> 00:08:15,630
at the traffic in depth and decoding it

199
00:08:12,990 --> 00:08:17,520
in Wireshark hey my name is Chris Davis

200
00:08:15,630 --> 00:08:20,159
I'm going to show you how to decrypt and

201
00:08:17,520 --> 00:08:22,020
analyze HP to traffic and Wireshark cut

202
00:08:20,160 --> 00:08:24,570
so the tools that were gonna be using

203
00:08:22,020 --> 00:08:27,150
for this is Wireshark Chrome and curl

204
00:08:24,570 --> 00:08:29,310
Wireshark does the traffic analysis and

205
00:08:27,150 --> 00:08:31,799
the decryption piece while Chrome and

206
00:08:29,310 --> 00:08:34,409
curl allow you to store SSL keys to be

207
00:08:31,800 --> 00:08:36,810
able to decrypt the benefit of CROs you

208
00:08:34,409 --> 00:08:38,640
can interact with the website you can

209
00:08:36,809 --> 00:08:40,529
use things like in developer tools which

210
00:08:38,640 --> 00:08:41,159
makes interacting with website a lot

211
00:08:40,529 --> 00:08:43,380
easier

212
00:08:41,159 --> 00:08:46,140
kuroh obviously can be used to help

213
00:08:43,380 --> 00:08:47,910
automate command line interaction again

214
00:08:46,140 --> 00:08:51,240
you can script things up like maybe you

215
00:08:47,910 --> 00:08:52,560
had an API that was HP - enabled and you

216
00:08:51,240 --> 00:08:55,200
needed to automate a

217
00:08:52,560 --> 00:08:58,109
tasks and but also store the SSL keys

218
00:08:55,200 --> 00:09:00,210
for debugging later this is you would

219
00:08:58,110 --> 00:09:01,680
use Chrome for that so why do we want to

220
00:09:00,210 --> 00:09:03,210
use these unfortunately because there's

221
00:09:01,680 --> 00:09:04,979
not a lot of HTTP to support and a lot

222
00:09:03,210 --> 00:09:06,720
of common tools and frameworks right now

223
00:09:04,980 --> 00:09:09,720
for example one of my favorites is

224
00:09:06,720 --> 00:09:11,220
Python requests it does not have HP to

225
00:09:09,720 --> 00:09:14,100
support as of the time of writing this

226
00:09:11,220 --> 00:09:15,570
unfortunately so what do they quickly

227
00:09:14,100 --> 00:09:17,940
show you or at least give you the

228
00:09:15,570 --> 00:09:19,740
commands you need to build curl with HP

229
00:09:17,940 --> 00:09:21,810
- and as a sales support because at

230
00:09:19,740 --> 00:09:23,760
least on Ubuntu 1604 which is what I use

231
00:09:21,810 --> 00:09:26,010
I found that curl did not have HTTP to

232
00:09:23,760 --> 00:09:28,410
support built-in so I had to go through

233
00:09:26,010 --> 00:09:30,029
and I had to rebuild it myself I had to

234
00:09:28,410 --> 00:09:31,290
remove and then rebuild it myself so

235
00:09:30,029 --> 00:09:33,480
these were the commands that I had used

236
00:09:31,290 --> 00:09:36,000
to to be able to accomplish that it also

237
00:09:33,480 --> 00:09:39,029
requires curl 7.5 9 or greater to be

238
00:09:36,000 --> 00:09:41,250
able to do HV - also to be able to store

239
00:09:39,029 --> 00:09:42,750
the SSL key logs as well so I had to

240
00:09:41,250 --> 00:09:45,120
build that with that support built-in -

241
00:09:42,750 --> 00:09:48,930
otherwise you can't pass the SSL key log

242
00:09:45,120 --> 00:09:50,370
environment variable so going back to

243
00:09:48,930 --> 00:09:52,140
what I was just saying the SL key log

244
00:09:50,370 --> 00:09:54,360
file can be specified when we run our

245
00:09:52,140 --> 00:09:56,030
curl command which case we can we just

246
00:09:54,360 --> 00:09:58,290
give it the environment variable equals

247
00:09:56,030 --> 00:10:00,390
SSL key logs about text that's just an

248
00:09:58,290 --> 00:10:02,760
arbitrary flat file text file location

249
00:10:00,390 --> 00:10:05,339
that you want to specify again and then

250
00:10:02,760 --> 00:10:07,080
curl and whatever curl commands and

251
00:10:05,339 --> 00:10:10,140
parameters you want to pass it including

252
00:10:07,080 --> 00:10:12,089
the URL of HTTP to enabled server again

253
00:10:10,140 --> 00:10:13,860
when you do that it saves that those SSL

254
00:10:12,089 --> 00:10:18,060
keys so that we can decrypt it in

255
00:10:13,860 --> 00:10:19,560
Wireshark later show you how to use

256
00:10:18,060 --> 00:10:22,469
Chrome to actually store those as a

257
00:10:19,560 --> 00:10:24,569
selkie logs so that we can decrypt them

258
00:10:22,470 --> 00:10:26,130
with Wireshark so here again I'm using

259
00:10:24,570 --> 00:10:28,200
this on Windows but I believe the same

260
00:10:26,130 --> 00:10:30,510
can be done with actually Firefox in

261
00:10:28,200 --> 00:10:31,680
chromium on Linux as well I don't not

262
00:10:30,510 --> 00:10:33,780
exactly sure what those command lines

263
00:10:31,680 --> 00:10:36,750
would be but I've been using Kebede oh

264
00:10:33,780 --> 00:10:39,180
the - - ssl key log file path and again

265
00:10:36,750 --> 00:10:41,100
I'm just passing specifying a flat text

266
00:10:39,180 --> 00:10:44,459
file on my desktop and then I'm passing

267
00:10:41,100 --> 00:10:47,730
in the parameter of my local HP -

268
00:10:44,459 --> 00:10:48,750
enabled web server before I move on

269
00:10:47,730 --> 00:10:51,570
though I wanted to show you a couple

270
00:10:48,750 --> 00:10:53,520
quick Wireshark filters so Wireshark is

271
00:10:51,570 --> 00:10:55,890
nice in that it does have Wireshark

272
00:10:53,520 --> 00:10:57,390
filters built in for HP - now which

273
00:10:55,890 --> 00:11:00,000
makes things really easy right for

274
00:10:57,390 --> 00:11:02,250
example we could do HP - got headers

275
00:11:00,000 --> 00:11:04,340
method equals get if we wanted it to get

276
00:11:02,250 --> 00:11:07,190
just HP - we could type in just a

277
00:11:04,340 --> 00:11:09,250
we can specify a path for example if we

278
00:11:07,190 --> 00:11:12,380
were going to grab we wanted to see

279
00:11:09,250 --> 00:11:14,210
styles.css we could specify the path we

280
00:11:12,380 --> 00:11:16,670
could also specify a cookie for example

281
00:11:14,210 --> 00:11:18,710
maybe we were trying to debug users log

282
00:11:16,670 --> 00:11:19,790
in interaction we need to see what kind

283
00:11:18,710 --> 00:11:22,910
of cookies they were getting we could

284
00:11:19,790 --> 00:11:25,069
specify that additionally if we wanted

285
00:11:22,910 --> 00:11:28,300
to see just the data itself we could do

286
00:11:25,070 --> 00:11:32,230
HP to data data and then we could also

287
00:11:28,300 --> 00:11:35,150
search inside of HTTP - for arbitrary

288
00:11:32,230 --> 00:11:37,100
values for example username right so if

289
00:11:35,150 --> 00:11:38,779
there's a username form field and a

290
00:11:37,100 --> 00:11:41,089
password form field we could do HP to

291
00:11:38,779 --> 00:11:42,740
contains and then a username and then it

292
00:11:41,089 --> 00:11:44,300
would water search smart enough to be

293
00:11:42,740 --> 00:11:48,170
able to parse through HP two and then

294
00:11:44,300 --> 00:11:50,479
find that traffic for us I'm going to

295
00:11:48,170 --> 00:11:52,880
show you how to capture traffic and then

296
00:11:50,480 --> 00:11:54,710
decrypt it with Wireshark and use Google

297
00:11:52,880 --> 00:11:56,720
Chrome to store those keys so first

298
00:11:54,710 --> 00:12:00,290
thing we want to do is set a traffic

299
00:11:56,720 --> 00:12:03,200
capture I'm using rock caps since by

300
00:12:00,290 --> 00:12:05,120
default Wireshark is unable to sniff

301
00:12:03,200 --> 00:12:07,670
localhost on Windows machines they can

302
00:12:05,120 --> 00:12:09,800
on Linux but not on Windows all right

303
00:12:07,670 --> 00:12:11,180
let me close that and finally we need to

304
00:12:09,800 --> 00:12:15,910
open up command prompt and we need to

305
00:12:11,180 --> 00:12:22,130
start Chrome with the SSL key log

306
00:12:15,910 --> 00:12:23,660
argument okay so there's our HP -

307
00:12:22,130 --> 00:12:26,060
enabled web interface running on

308
00:12:23,660 --> 00:12:27,650
localhost that we opened up with command

309
00:12:26,060 --> 00:12:30,140
prompt and as you can see we actually

310
00:12:27,650 --> 00:12:31,640
have our SSL client random keys here so

311
00:12:30,140 --> 00:12:35,030
it is actually already storing it thanks

312
00:12:31,640 --> 00:12:36,589
to Chrome we open up Chrome and we can

313
00:12:35,030 --> 00:12:39,260
inspect the traffic here on the web site

314
00:12:36,589 --> 00:12:41,000
and we can do a network capture and

315
00:12:39,260 --> 00:12:42,500
let's just type something in right so at

316
00:12:41,000 --> 00:12:44,240
this point maybe you're a pen tester and

317
00:12:42,500 --> 00:12:45,560
you're trying to analyze a web form

318
00:12:44,240 --> 00:12:46,430
login right maybe you're trying to hack

319
00:12:45,560 --> 00:12:47,390
it you're trying to figure out what's

320
00:12:46,430 --> 00:12:48,949
going on with it

321
00:12:47,390 --> 00:12:50,500
or maybe you're a web developer and

322
00:12:48,950 --> 00:12:53,650
there's an error or you're trying to

323
00:12:50,500 --> 00:12:55,640
store those keys or you know be able to

324
00:12:53,650 --> 00:12:58,250
debug what's going on with the web

325
00:12:55,640 --> 00:12:59,390
application so in this case let's just

326
00:12:58,250 --> 00:13:00,770
say we're trying to login it doesn't

327
00:12:59,390 --> 00:13:02,510
really matter what we type in here but

328
00:13:00,770 --> 00:13:04,490
let's go and generate some traffic and

329
00:13:02,510 --> 00:13:07,939
chrome actually sees this as the h2

330
00:13:04,490 --> 00:13:08,990
protocol it's able to interact with it

331
00:13:07,940 --> 00:13:10,880
and so we can see that it's actually

332
00:13:08,990 --> 00:13:13,220
making a login request and we can see

333
00:13:10,880 --> 00:13:14,930
our response even here but that's it

334
00:13:13,220 --> 00:13:15,850
that's all we needed to do so we created

335
00:13:14,930 --> 00:13:17,888
some traffic let's

336
00:13:15,850 --> 00:13:19,839
go ahead and close our web server let's

337
00:13:17,889 --> 00:13:21,160
make sure our keys yep there's more keys

338
00:13:19,839 --> 00:13:24,130
for each of those requests that we made

339
00:13:21,160 --> 00:13:28,209
and then let's go ahead and close our

340
00:13:24,130 --> 00:13:34,630
traffic's capture and then we're going

341
00:13:28,209 --> 00:13:35,739
to open up our pcap flower open okay so

342
00:13:34,630 --> 00:13:38,050
the first thing we're going to notice is

343
00:13:35,740 --> 00:13:40,240
that all it sees is SSL traffic right

344
00:13:38,050 --> 00:13:42,550
it sees the the certificate exchange

345
00:13:40,240 --> 00:13:44,800
right and I can't really do anything

346
00:13:42,550 --> 00:13:47,170
with it right it does see that it's port

347
00:13:44,800 --> 00:13:49,329
4 4 3 3 which is web server that we had

348
00:13:47,170 --> 00:13:51,069
set up but again it can't evaluate as HP

349
00:13:49,329 --> 00:13:52,750
- because it's all encrypted so what we

350
00:13:51,069 --> 00:13:54,579
can do is Wireshark actually gives us

351
00:13:52,750 --> 00:13:56,199
the option to provide it and as to sell

352
00:13:54,579 --> 00:13:58,750
key log files the one that we just

353
00:13:56,199 --> 00:14:00,729
created in which case it can decrypt the

354
00:13:58,750 --> 00:14:03,670
traffic and then we can evaluate it

355
00:14:00,730 --> 00:14:04,990
value 8 it as HP - so what we want to do

356
00:14:03,670 --> 00:14:07,719
is you want to go to edit and we want to

357
00:14:04,990 --> 00:14:09,130
go down to preferences and then once we

358
00:14:07,720 --> 00:14:11,380
open up preferences we want to click on

359
00:14:09,130 --> 00:14:18,040
the protocols tree and then we want to

360
00:14:11,380 --> 00:14:20,439
go down to SSL here's a cell under the

361
00:14:18,040 --> 00:14:22,120
premaster secret log file name I want to

362
00:14:20,439 --> 00:14:25,319
open that up and we want to specify the

363
00:14:22,120 --> 00:14:27,220
SSL key log file that we had created

364
00:14:25,319 --> 00:14:28,660
when we do that we can actually see

365
00:14:27,220 --> 00:14:30,279
immediately that some of the traffic was

366
00:14:28,660 --> 00:14:31,990
decrypted so let's go ahead and go back

367
00:14:30,279 --> 00:14:34,810
over to our search filters that we

368
00:14:31,990 --> 00:14:38,829
provide earlier so fortunately Wireshark

369
00:14:34,810 --> 00:14:40,239
knows how to evaluate hb2 so HTTP 2 is

370
00:14:38,829 --> 00:14:42,310
the filter we type in and when we do

371
00:14:40,240 --> 00:14:44,500
that we can automatically see all of the

372
00:14:42,310 --> 00:14:47,079
HP 2 traffic now one thing to know is

373
00:14:44,500 --> 00:14:49,180
there's you can see that the TCP stream

374
00:14:47,079 --> 00:14:52,180
member is the same for the entire

375
00:14:49,180 --> 00:14:54,279
session the entire session is one tcp

376
00:14:52,180 --> 00:14:56,258
stream and that's the the performance

377
00:14:54,279 --> 00:14:59,170
benefit over h people 1.1 because before

378
00:14:56,259 --> 00:15:00,220
HP 1.1 would every time it needed a

379
00:14:59,170 --> 00:15:02,110
resource from the server

380
00:15:00,220 --> 00:15:04,290
it would have to reestablish the TCP

381
00:15:02,110 --> 00:15:06,519
handshake and create a new TCP stream

382
00:15:04,290 --> 00:15:08,649
request the resource get back the

383
00:15:06,519 --> 00:15:10,689
response and then close the TCP stream

384
00:15:08,649 --> 00:15:13,000
for example if I was getting index.html

385
00:15:10,689 --> 00:15:14,410
then that HTML would have an image in it

386
00:15:13,000 --> 00:15:15,699
they would have JavaScript in it would

387
00:15:14,410 --> 00:15:17,649
have all those things each and every

388
00:15:15,699 --> 00:15:20,229
single one of those would have to be its

389
00:15:17,649 --> 00:15:23,470
own separate TCP request we can actually

390
00:15:20,230 --> 00:15:25,660
see in here that it's doing the same

391
00:15:23,470 --> 00:15:28,910
thing doing the same core concept it's

392
00:15:25,660 --> 00:15:31,130
grabbing style.css it's

393
00:15:28,910 --> 00:15:33,439
making post requests to slash API slash

394
00:15:31,130 --> 00:15:35,000
log and it's making describing some

395
00:15:33,440 --> 00:15:36,980
JavaScript files but each and every

396
00:15:35,000 --> 00:15:39,950
single one of those is done in r1 TCP

397
00:15:36,980 --> 00:15:42,650
stream instead of mini TCP streams so

398
00:15:39,950 --> 00:15:44,390
just looking at here we can actually go

399
00:15:42,650 --> 00:15:48,350
down to where we had done the post API

400
00:15:44,390 --> 00:15:49,910
login and we can actually open up packet

401
00:15:48,350 --> 00:15:52,670
here and Wireshark has already evaluated

402
00:15:49,910 --> 00:15:55,310
it's already parsed all the the hp-2

403
00:15:52,670 --> 00:15:56,719
headers and it's provided to us in a

404
00:15:55,310 --> 00:15:58,640
nice little graphical interface we can

405
00:15:56,720 --> 00:16:01,190
actually select just like any other

406
00:15:58,640 --> 00:16:03,920
protocol analysis in Wireshark we can

407
00:16:01,190 --> 00:16:06,380
actually select that value and we can

408
00:16:03,920 --> 00:16:08,150
apply it as a filter and it'll

409
00:16:06,380 --> 00:16:11,270
automatically apply that for us so if we

410
00:16:08,150 --> 00:16:13,610
did HP do header dye value equals post

411
00:16:11,270 --> 00:16:15,860
it gives us all of our post requests

412
00:16:13,610 --> 00:16:19,340
which are the the five requests that

413
00:16:15,860 --> 00:16:21,740
we've made previously additionally hb2

414
00:16:19,340 --> 00:16:24,320
has lots of filters so if we do type in

415
00:16:21,740 --> 00:16:26,720
HB two and then a period will actually

416
00:16:24,320 --> 00:16:28,160
see Wireshark will populate a bunch of

417
00:16:26,720 --> 00:16:32,450
filters here for us write it header

418
00:16:28,160 --> 00:16:34,640
values flag values data values it's it's

419
00:16:32,450 --> 00:16:36,670
smart enough to be able to parse HTTP 2

420
00:16:34,640 --> 00:16:40,670
and make your life a little bit easier

421
00:16:36,670 --> 00:16:42,680
so okay so we we wanted to evaluate the

422
00:16:40,670 --> 00:16:46,240
the post login right so as we can see

423
00:16:42,680 --> 00:16:50,839
here HB 2 has all of our header values

424
00:16:46,240 --> 00:16:52,010
so we have a post all of these things

425
00:16:50,840 --> 00:16:53,630
here but again I think what we're

426
00:16:52,010 --> 00:16:54,110
interested in is the username and the

427
00:16:53,630 --> 00:16:58,220
password

428
00:16:54,110 --> 00:17:00,980
form field data and as we can see here

429
00:16:58,220 --> 00:17:03,710
that's nowhere to be found it's actually

430
00:17:00,980 --> 00:17:06,160
not in this packet so let's take a look

431
00:17:03,710 --> 00:17:08,660
here because of the way that HP 2 works

432
00:17:06,160 --> 00:17:11,630
frame number let's start with this

433
00:17:08,660 --> 00:17:16,970
packet here so 2 4 5 zeros so framed

434
00:17:11,630 --> 00:17:20,240
number it's greater than or equal to 2 4

435
00:17:16,970 --> 00:17:22,220
5 0 so we see here that the post request

436
00:17:20,240 --> 00:17:25,220
from the client is made for API slash

437
00:17:22,220 --> 00:17:27,410
login and then in another packet in a

438
00:17:25,220 --> 00:17:29,540
data packet down further we actually

439
00:17:27,410 --> 00:17:31,130
have the post parameters being sent and

440
00:17:29,540 --> 00:17:32,420
so we could actually do this is where we

441
00:17:31,130 --> 00:17:35,840
got that other filter here that I was

442
00:17:32,420 --> 00:17:39,710
specifying before HP to data data and if

443
00:17:35,840 --> 00:17:42,260
we type that in we can actually see just

444
00:17:39,710 --> 00:17:45,200
the data request right to the server

445
00:17:42,260 --> 00:17:46,790
and from the server data requests okay

446
00:17:45,200 --> 00:17:50,360
so now we're interested in the username

447
00:17:46,790 --> 00:17:53,059
form field so we can do HP to data data

448
00:17:50,360 --> 00:17:55,490
and ampersand understand HP to contains

449
00:17:53,059 --> 00:17:57,440
now the contains feature says take this

450
00:17:55,490 --> 00:17:59,030
protocol I want to find only inside of

451
00:17:57,440 --> 00:18:01,160
these protocols which would be HP - I

452
00:17:59,030 --> 00:18:04,490
want to find this value right and so

453
00:18:01,160 --> 00:18:06,020
we're specifying username we do that we

454
00:18:04,490 --> 00:18:09,040
can actually see again just the data

455
00:18:06,020 --> 00:18:12,559
that has the username form field value

456
00:18:09,040 --> 00:18:14,450
and here we can again we can see our

457
00:18:12,559 --> 00:18:16,129
username in our password and again this

458
00:18:14,450 --> 00:18:18,049
would be come in handy because maybe you

459
00:18:16,130 --> 00:18:20,870
were trying to figure out what the

460
00:18:18,049 --> 00:18:22,790
client-side web application is doing to

461
00:18:20,870 --> 00:18:24,799
the data before it's sent to the server

462
00:18:22,790 --> 00:18:26,450
right and maybe that will help us either

463
00:18:24,799 --> 00:18:28,520
in the pen test or maybe that'll help us

464
00:18:26,450 --> 00:18:30,140
in debugging our application again

465
00:18:28,520 --> 00:18:31,760
another useful one I just want to point

466
00:18:30,140 --> 00:18:34,250
out I don't think is applicable to this

467
00:18:31,760 --> 00:18:36,230
demo but HP headers that set the cookie

468
00:18:34,250 --> 00:18:38,419
right so we can actually parse out

469
00:18:36,230 --> 00:18:40,210
cookie values that way finally the only

470
00:18:38,419 --> 00:18:42,980
thing I wanted to point out as well is

471
00:18:40,210 --> 00:18:45,740
when even after it's been decrypted

472
00:18:42,980 --> 00:18:48,710
unfortunately we can't just do right

473
00:18:45,740 --> 00:18:50,600
click follow TCP stream because when we

474
00:18:48,710 --> 00:18:52,400
do that it just sees it as that SSL

475
00:18:50,600 --> 00:18:54,918
values unfortunately which is just not

476
00:18:52,400 --> 00:18:56,780
super helpful is if it was HP 1.1 and it

477
00:18:54,919 --> 00:18:58,790
was just you know HTTP be without page

478
00:18:56,780 --> 00:19:00,530
without list as hell we can actually

479
00:18:58,790 --> 00:19:02,540
right click and view that stream and

480
00:19:00,530 --> 00:19:04,370
then see it in plain text again

481
00:19:02,540 --> 00:19:06,639
unfortunately Wireshark does not do that

482
00:19:04,370 --> 00:19:10,370
so it's not completely perfect finally

483
00:19:06,640 --> 00:19:13,000
it will also not allow us to export HTTP

484
00:19:10,370 --> 00:19:15,799
to objects right so when we needed that

485
00:19:13,000 --> 00:19:16,429
index.html or that specific JavaScript

486
00:19:15,799 --> 00:19:18,980
file

487
00:19:16,429 --> 00:19:21,559
we can't export it through here we can't

488
00:19:18,980 --> 00:19:22,760
do export objects HP unfortunately just

489
00:19:21,559 --> 00:19:27,059
doesn't show it because it's linked to

490
00:19:22,760 --> 00:19:29,290
the HTTP protocol not HTTP to

491
00:19:27,059 --> 00:19:31,270
Chris thanks so much for that deep dive

492
00:19:29,290 --> 00:19:33,700
into the protocol I think it's great for

493
00:19:31,270 --> 00:19:35,679
people to be able to pull apart HTTP -

494
00:19:33,700 --> 00:19:37,420
in Wireshark and analyze it you never

495
00:19:35,679 --> 00:19:39,250
know when that kind of skill might come

496
00:19:37,420 --> 00:19:40,870
in handy if there are no questions

497
00:19:39,250 --> 00:19:44,220
thanks so much feel free to hit us up on

498
00:19:40,870 --> 00:19:44,219
Twitter and enjoy the rest of the con

