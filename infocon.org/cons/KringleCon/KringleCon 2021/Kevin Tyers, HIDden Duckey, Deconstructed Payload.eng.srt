1
00:00:05,800 --> 00:00:11,318
[Music]

2
00:00:12,000 --> 00:00:14,320
good evening good morning good afternoon

3
00:00:14,320 --> 00:00:16,320
good middle of the night whenever you're

4
00:00:16,320 --> 00:00:18,080
watching this from wherever you're

5
00:00:18,080 --> 00:00:19,680
watching this i greatly appreciate you

6
00:00:19,680 --> 00:00:21,279
taking a few minutes to hang out with me

7
00:00:21,279 --> 00:00:22,960
and talk about human interface device

8
00:00:22,960 --> 00:00:23,920
attacks

9
00:00:23,920 --> 00:00:26,480
the title of my talk is hidden ducky

10
00:00:26,480 --> 00:00:28,800
deconstructed payload my name's kevin

11
00:00:28,800 --> 00:00:32,000
tires i'm a sans sec 504 instructor in

12
00:00:32,000 --> 00:00:34,320
my day job i work for a large financial

13
00:00:34,320 --> 00:00:35,520
institution

14
00:00:35,520 --> 00:00:37,840
and i'm a huge python and keyboard

15
00:00:37,840 --> 00:00:39,680
enthusiast which kind of led me down the

16
00:00:39,680 --> 00:00:42,000
path of learning about hidden devices

17
00:00:42,000 --> 00:00:43,520
without further ado let's go ahead and

18
00:00:43,520 --> 00:00:45,600
jump on in

19
00:00:45,600 --> 00:00:48,640
so what is a human interface device

20
00:00:48,640 --> 00:00:50,079
attack

21
00:00:50,079 --> 00:00:52,559
well this is using some sort of device

22
00:00:52,559 --> 00:00:55,360
in our case maybe a evil usb rubber

23
00:00:55,360 --> 00:00:57,840
ducky that you plug into a machine and

24
00:00:57,840 --> 00:01:00,800
it is able to act like it is a keyboard

25
00:01:00,800 --> 00:01:02,239
now a lot of people think about like

26
00:01:02,239 --> 00:01:03,680
auto run attacks when it comes to

27
00:01:03,680 --> 00:01:05,438
plugging in usbs to machines but that's

28
00:01:05,438 --> 00:01:07,040
not the only threat vector here in fact

29
00:01:07,040 --> 00:01:08,560
this one is arguably a little bit more

30
00:01:08,560 --> 00:01:10,560
dangerous because even if your company

31
00:01:10,560 --> 00:01:12,560
blocks say mass storage devices being

32
00:01:12,560 --> 00:01:14,640
attached to your machines usually they

33
00:01:14,640 --> 00:01:16,400
don't block keyboards which is good for

34
00:01:16,400 --> 00:01:17,759
someone like me again because i like

35
00:01:17,759 --> 00:01:20,080
custom keyboards but it can be a little

36
00:01:20,080 --> 00:01:21,600
bit dangerous

37
00:01:21,600 --> 00:01:24,400
so hidden devices are able to be plugged

38
00:01:24,400 --> 00:01:26,880
into a machine and again run input as if

39
00:01:26,880 --> 00:01:29,040
it was a user sitting at the keyboard

40
00:01:29,040 --> 00:01:30,560
and that means that anything you could

41
00:01:30,560 --> 00:01:32,479
do with a keyboard which is quite a lot

42
00:01:32,479 --> 00:01:34,799
on almost every operating system you can

43
00:01:34,799 --> 00:01:37,119
do and you can emulate with a hit attack

44
00:01:37,119 --> 00:01:38,079
device

45
00:01:38,079 --> 00:01:39,840
so it's commonly usb but it actually

46
00:01:39,840 --> 00:01:41,280
doesn't have to be there are wireless

47
00:01:41,280 --> 00:01:43,200
versions of this using tools like jacket

48
00:01:43,200 --> 00:01:45,759
if you've ever heard of that um

49
00:01:45,759 --> 00:01:47,600
so here right we have our usb rubber

50
00:01:47,600 --> 00:01:49,439
ducky we have an unlocked machine that

51
00:01:49,439 --> 00:01:51,280
someone's walked away from which i

52
00:01:51,280 --> 00:01:52,720
suspect when we all start going back to

53
00:01:52,720 --> 00:01:54,079
the office we're gonna see people

54
00:01:54,079 --> 00:01:55,439
leaving their machines unlocked a little

55
00:01:55,439 --> 00:01:57,200
bit more because we've probably not been

56
00:01:57,200 --> 00:01:59,439
as diligent about intelligent about it

57
00:01:59,439 --> 00:02:01,200
at home

58
00:02:01,200 --> 00:02:02,399
and you're able to just run some

59
00:02:02,399 --> 00:02:03,759
commands in this case maybe i have

60
00:02:03,759 --> 00:02:04,880
something that's able to open up a

61
00:02:04,880 --> 00:02:07,280
terminal and curl down an evil

62
00:02:07,280 --> 00:02:08,959
executable we run it put in the

63
00:02:08,959 --> 00:02:10,479
background we kill the shell so there's

64
00:02:10,479 --> 00:02:12,800
no history and now i have a piece of

65
00:02:12,800 --> 00:02:15,520
piece of malware running on your network

66
00:02:15,520 --> 00:02:17,200
let's take a look at duckyscript just

67
00:02:17,200 --> 00:02:18,800
briefly so you can get an idea of some

68
00:02:18,800 --> 00:02:20,840
of the things you can do with hit

69
00:02:20,840 --> 00:02:22,800
attack

70
00:02:22,800 --> 00:02:23,760
so in this case we're going to talk

71
00:02:23,760 --> 00:02:25,520
about ducky script and we'll come back

72
00:02:25,520 --> 00:02:27,040
to this example towards the end of the

73
00:02:27,040 --> 00:02:28,879
talk as we're demonstrating how to

74
00:02:28,879 --> 00:02:30,959
decode these ducky scripts

75
00:02:30,959 --> 00:02:32,959
so in this case you can see we're typing

76
00:02:32,959 --> 00:02:35,760
gui r which brings up a run prompt then

77
00:02:35,760 --> 00:02:37,920
we type in powershell and we do a run as

78
00:02:37,920 --> 00:02:39,680
to try to run as administrator and we do

79
00:02:39,680 --> 00:02:42,720
alt y to bypass the prompt that comes up

80
00:02:42,720 --> 00:02:44,560
and then we're adding a user in this

81
00:02:44,560 --> 00:02:45,840
case we're adding santa with the

82
00:02:45,840 --> 00:02:48,319
password of class to the machine in

83
00:02:48,319 --> 00:02:50,239
question and we're adding santa to the

84
00:02:50,239 --> 00:02:51,840
administrator's group because let's be

85
00:02:51,840 --> 00:02:52,959
honest he probably should have been

86
00:02:52,959 --> 00:02:54,800
there to begin with

87
00:02:54,800 --> 00:02:58,080
then we enter we exit out of that and lo

88
00:02:58,080 --> 00:03:00,239
and behold we've been able to add a user

89
00:03:00,239 --> 00:03:01,840
to this machine

90
00:03:01,840 --> 00:03:03,280
and i have a couple links here at the

91
00:03:03,280 --> 00:03:05,440
bottom that will get you more

92
00:03:05,440 --> 00:03:08,480
information and documentation about the

93
00:03:08,480 --> 00:03:10,560
duckyscript language that you can use to

94
00:03:10,560 --> 00:03:12,080
write these payloads

95
00:03:12,080 --> 00:03:13,760
and the one thing about this is again it

96
00:03:13,760 --> 00:03:15,760
looks just like a keyboard input but

97
00:03:15,760 --> 00:03:17,440
it's very very fast so if someone

98
00:03:17,440 --> 00:03:18,959
doesn't realize what's going on they

99
00:03:18,959 --> 00:03:20,480
might plug this into their machine and

100
00:03:20,480 --> 00:03:21,599
you know it would take less than two

101
00:03:21,599 --> 00:03:24,080
seconds for this attack to execute

102
00:03:24,080 --> 00:03:26,080
so it can be very very interesting and

103
00:03:26,080 --> 00:03:28,560
dangerous

104
00:03:28,720 --> 00:03:30,080
all right let's go ahead and talk about

105
00:03:30,080 --> 00:03:33,040
hid attack devices now how we actually

106
00:03:33,040 --> 00:03:35,840
deliver these malicious payloads

107
00:03:35,840 --> 00:03:37,599
so probably the most common hit attack

108
00:03:37,599 --> 00:03:39,760
device that people know about is the usb

109
00:03:39,760 --> 00:03:41,120
rubber ducky but there's also things

110
00:03:41,120 --> 00:03:43,519
like bad usb where you hide a little you

111
00:03:43,519 --> 00:03:46,400
know machine inside of a usb cable that

112
00:03:46,400 --> 00:03:47,920
just looks like a regular charging cable

113
00:03:47,920 --> 00:03:49,760
but when you plug it in your machine

114
00:03:49,760 --> 00:03:51,840
gets owned there's also a whole

115
00:03:51,840 --> 00:03:54,319
beautiful world of custom keyboards that

116
00:03:54,319 --> 00:03:56,239
are actually able to do very similar

117
00:03:56,239 --> 00:03:58,879
functionality to this uh using a toolset

118
00:03:58,879 --> 00:04:01,599
called qmk and i actually gave a talk

119
00:04:01,599 --> 00:04:03,680
webcast on this for sans earlier this

120
00:04:03,680 --> 00:04:05,680
year you can check out at this link or

121
00:04:05,680 --> 00:04:07,360
you can scan that qr code and that will

122
00:04:07,360 --> 00:04:08,560
get you there the talk is called

123
00:04:08,560 --> 00:04:10,560
maniacal keyboards it's a really deep

124
00:04:10,560 --> 00:04:12,560
dive into some of the really interesting

125
00:04:12,560 --> 00:04:14,159
things you can do with mechanical

126
00:04:14,159 --> 00:04:17,440
keyboards for this area

127
00:04:17,440 --> 00:04:20,639
so to actually load the payload onto a

128
00:04:20,639 --> 00:04:22,720
usb rubber ducky it's pretty simple you

129
00:04:22,720 --> 00:04:24,960
create a duckyscript.txt which is just

130
00:04:24,960 --> 00:04:26,720
your ducky script that you want to run

131
00:04:26,720 --> 00:04:28,960
and then you can use say the java

132
00:04:28,960 --> 00:04:30,800
encoder which is sort of the default one

133
00:04:30,800 --> 00:04:32,560
that you would find on github and then

134
00:04:32,560 --> 00:04:34,080
you feed it in the ducky code and it

135
00:04:34,080 --> 00:04:37,440
spits out a inject.bin file and that is

136
00:04:37,440 --> 00:04:38,960
a binary file that we're going to be

137
00:04:38,960 --> 00:04:40,400
looking at here for the second half of

138
00:04:40,400 --> 00:04:42,800
the talk we move that onto a micro sd

139
00:04:42,800 --> 00:04:45,040
card we put that micro sd card into our

140
00:04:45,040 --> 00:04:47,840
usb rubber ducky and then we hack the

141
00:04:47,840 --> 00:04:49,440
planet so

142
00:04:49,440 --> 00:04:51,840
let's get into how we actually decode

143
00:04:51,840 --> 00:04:53,600
those ducky payloads so if you found a

144
00:04:53,600 --> 00:04:56,240
usb rubber ducky device you know either

145
00:04:56,240 --> 00:04:58,080
maybe the help desk turns it in or some

146
00:04:58,080 --> 00:04:59,840
helpful user you find a suspicious

147
00:04:59,840 --> 00:05:01,280
looking thumb drive on the ground you

148
00:05:01,280 --> 00:05:03,600
open it you see a micro sd card

149
00:05:03,600 --> 00:05:05,600
let's see what these commands are

150
00:05:05,600 --> 00:05:07,360
all right for this last part of the talk

151
00:05:07,360 --> 00:05:08,639
i'm gonna go ahead and kill the camera

152
00:05:08,639 --> 00:05:10,479
so we can focus on what's going on on

153
00:05:10,479 --> 00:05:13,680
screen so let's jump into decoding ducky

154
00:05:13,680 --> 00:05:15,520
payloads and i had an incredible amount

155
00:05:15,520 --> 00:05:17,360
of fun uh putting this section together

156
00:05:17,360 --> 00:05:19,759
and i hope you have fun watching it

157
00:05:19,759 --> 00:05:23,199
so let's say you have a usb rubber ducky

158
00:05:23,199 --> 00:05:24,960
that you find and you can see my little

159
00:05:24,960 --> 00:05:26,720
video here on the left on how to

160
00:05:26,720 --> 00:05:28,400
actually get at that micro sd card if

161
00:05:28,400 --> 00:05:30,000
you've never done it before you pop off

162
00:05:30,000 --> 00:05:31,360
the case

163
00:05:31,360 --> 00:05:33,759
crack it open and then in there you're

164
00:05:33,759 --> 00:05:36,080
going to see a little micro sd card you

165
00:05:36,080 --> 00:05:37,199
pull that out and you can actually see

166
00:05:37,199 --> 00:05:39,039
mine's actually starting to to get worn

167
00:05:39,039 --> 00:05:41,039
out i've worn off the labeling on that

168
00:05:41,039 --> 00:05:42,960
i've pulled it in and out so much

169
00:05:42,960 --> 00:05:44,800
and then you just plug it into a micro

170
00:05:44,800 --> 00:05:47,280
sd card reader i plugged it into my mac

171
00:05:47,280 --> 00:05:49,520
and it just popped up in finder another

172
00:05:49,520 --> 00:05:51,199
really important thing to keep in mind

173
00:05:51,199 --> 00:05:53,039
is that if you're on mac right you can

174
00:05:53,039 --> 00:05:55,360
just cd into volumes and then the usb

175
00:05:55,360 --> 00:05:57,680
device or if you're on linux right it's

176
00:05:57,680 --> 00:05:59,520
just going to get mounted in the mnt

177
00:05:59,520 --> 00:06:01,759
directory off your route

178
00:06:01,759 --> 00:06:04,240
so you can grab the inject.bin

179
00:06:04,240 --> 00:06:08,800
off of the device for later analysis so

180
00:06:08,800 --> 00:06:12,160
let's look at how the ducky script gets

181
00:06:12,160 --> 00:06:14,560
encoded into an inject.bin file and see

182
00:06:14,560 --> 00:06:16,000
if we can figure out kind of how it

183
00:06:16,000 --> 00:06:17,120
works

184
00:06:17,120 --> 00:06:19,600
and here on our left side we have the

185
00:06:19,600 --> 00:06:22,160
ducky script of string a which means all

186
00:06:22,160 --> 00:06:23,440
it's going to do you're going to plug it

187
00:06:23,440 --> 00:06:26,080
in and it's going to type a

188
00:06:26,080 --> 00:06:28,880
and then when we use xxd to look at the

189
00:06:28,880 --> 00:06:30,639
inject.bin

190
00:06:30,639 --> 00:06:33,759
all you see is 0 4 0 0. and already it

191
00:06:33,759 --> 00:06:35,520
looks a little bit weird to me and i'll

192
00:06:35,520 --> 00:06:37,440
go into why that is in a moment

193
00:06:37,440 --> 00:06:40,000
but let's add some more input into the

194
00:06:40,000 --> 00:06:41,919
ducky script to see what happens when it

195
00:06:41,919 --> 00:06:43,520
comes out the other side

196
00:06:43,520 --> 00:06:45,840
well in this case i put abc which again

197
00:06:45,840 --> 00:06:47,120
all it's going to do is you're going to

198
00:06:47,120 --> 00:06:48,479
plug the keyboard in

199
00:06:48,479 --> 00:06:51,280
or the ducky in and type abc

200
00:06:51,280 --> 00:06:53,720
and the inject.bin has

201
00:06:53,720 --> 00:06:55,440
040506.

202
00:06:55,440 --> 00:06:58,479
now i immediately knew that that was not

203
00:06:58,479 --> 00:07:01,120
the ascii codes for a b and c in fact i

204
00:07:01,120 --> 00:07:02,800
used python to verify that here i said

205
00:07:02,800 --> 00:07:04,639
what is the you know

206
00:07:04,639 --> 00:07:07,840
hex value of a and it's

207
00:07:07,840 --> 00:07:10,160
you know ox 61 which is exactly what i

208
00:07:10,160 --> 00:07:13,440
expect but ox61 is not o4

209
00:07:13,440 --> 00:07:15,599
and it just so happens i've watched a

210
00:07:15,599 --> 00:07:18,479
lot of videos about usb devices and hid

211
00:07:18,479 --> 00:07:21,280
uh hit attacks so i knew that

212
00:07:21,280 --> 00:07:22,800
what we were probably dealing with here

213
00:07:22,800 --> 00:07:25,199
was called scan codes

214
00:07:25,199 --> 00:07:28,720
so i went on to the internet and i found

215
00:07:28,720 --> 00:07:32,639
a list of usb hid scan codes and this

216
00:07:32,639 --> 00:07:35,680
fantastic github here has all the scan

217
00:07:35,680 --> 00:07:38,000
codes for usb and as you can see at the

218
00:07:38,000 --> 00:07:41,759
bottom here the key a scan code is o4

219
00:07:41,759 --> 00:07:44,879
key b is o5 key c is o6 which matches

220
00:07:44,879 --> 00:07:47,759
what we saw in the previous slide

221
00:07:47,759 --> 00:07:48,800
so

222
00:07:48,800 --> 00:07:51,199
now i want to figure out how modifiers

223
00:07:51,199 --> 00:07:53,919
work so we kind of know what to look for

224
00:07:53,919 --> 00:07:55,840
and how to find these scan codes well

225
00:07:55,840 --> 00:07:57,039
let's see what happens if i do a

226
00:07:57,039 --> 00:07:59,360
lowercase a and a capital a well the

227
00:07:59,360 --> 00:08:01,120
inject.band on the other side comes out

228
00:08:01,120 --> 00:08:03,840
as zero four zero zero zero four zero

229
00:08:03,840 --> 00:08:04,800
two

230
00:08:04,800 --> 00:08:07,440
so knowing this we can sort of infer

231
00:08:07,440 --> 00:08:09,440
that that zero two is probably important

232
00:08:09,440 --> 00:08:11,199
so i looked for zero two and that hid

233
00:08:11,199 --> 00:08:13,759
scan code github gist and i found that

234
00:08:13,759 --> 00:08:17,039
that was a modifier for left shift

235
00:08:17,039 --> 00:08:18,160
and i'll be honest i didn't know this

236
00:08:18,160 --> 00:08:19,360
until i looked but there's actually

237
00:08:19,360 --> 00:08:21,440
different scan codes for left and right

238
00:08:21,440 --> 00:08:23,520
modifier keys which is pretty neat

239
00:08:23,520 --> 00:08:27,360
so we can see that o 0 0 is an a with no

240
00:08:27,360 --> 00:08:32,399
shift o 4 0 2 is an a with a shift

241
00:08:32,399 --> 00:08:34,799
that's pretty neat

242
00:08:34,799 --> 00:08:36,880
let's say we wanted to look at what gui

243
00:08:36,880 --> 00:08:41,039
r looks like to launch a uh a run window

244
00:08:41,039 --> 00:08:45,200
in windows so here we see do we do gui r

245
00:08:45,200 --> 00:08:47,760
and that gives us 1508 now 15 is the

246
00:08:47,760 --> 00:08:51,440
scan code for r and 08 we can see is l

247
00:08:51,440 --> 00:08:54,240
meta or the meta key this is also called

248
00:08:54,240 --> 00:08:55,519
the windows key it can be called the

249
00:08:55,519 --> 00:08:56,800
command key

250
00:08:56,800 --> 00:08:58,640
i've heard it called super there's all

251
00:08:58,640 --> 00:09:00,480
sorts of names for it but ultimately

252
00:09:00,480 --> 00:09:03,040
it's our gui key in this case we see 15

253
00:09:03,040 --> 00:09:05,440
again as r and 08 is gui combine those

254
00:09:05,440 --> 00:09:07,680
together you have gui r it's pretty neat

255
00:09:07,680 --> 00:09:09,200
if you had to do this by hand you're

256
00:09:09,200 --> 00:09:10,640
starting to starting to think that you

257
00:09:10,640 --> 00:09:13,360
might be able to do it

258
00:09:13,360 --> 00:09:14,800
and let's actually look at an

259
00:09:14,800 --> 00:09:16,000
interesting example because i was

260
00:09:16,000 --> 00:09:18,880
curious how did control alt delete work

261
00:09:18,880 --> 00:09:20,640
because i assumed it was only these half

262
00:09:20,640 --> 00:09:23,440
words or two bytes that encoded all of

263
00:09:23,440 --> 00:09:25,120
the information so how would we encode

264
00:09:25,120 --> 00:09:27,360
encode multiple modifiers

265
00:09:27,360 --> 00:09:30,080
well if i put in ctrl alt delete into a

266
00:09:30,080 --> 00:09:34,000
ducky script i get out 4c05

267
00:09:34,000 --> 00:09:36,399
now 4c is delete

268
00:09:36,399 --> 00:09:39,040
and o5 well that doesn't appear in the

269
00:09:39,040 --> 00:09:40,240
modifiers

270
00:09:40,240 --> 00:09:41,519
interesting

271
00:09:41,519 --> 00:09:44,160
but i noticed that if you add the

272
00:09:44,160 --> 00:09:47,120
control and the alt values together

273
00:09:47,120 --> 00:09:50,399
you get o5 so that's pretty neat so yeah

274
00:09:50,399 --> 00:09:51,440
if you're holding down multiple

275
00:09:51,440 --> 00:09:53,120
modifiers the scan code is just that

276
00:09:53,120 --> 00:09:55,200
second byte with the uh scan codes

277
00:09:55,200 --> 00:09:57,440
combined so you might be looking at this

278
00:09:57,440 --> 00:10:00,000
and thinking this is cool and i can kind

279
00:10:00,000 --> 00:10:01,440
of understand it maybe you're the kind

280
00:10:01,440 --> 00:10:04,320
of person who's uh you know base64

281
00:10:04,320 --> 00:10:06,160
decoded by hand once because you wanted

282
00:10:06,160 --> 00:10:08,160
to try it out that's what i've done but

283
00:10:08,160 --> 00:10:09,600
usually you want a tool that can do this

284
00:10:09,600 --> 00:10:11,200
for you and you have a few options in

285
00:10:11,200 --> 00:10:13,640
this area uh the first one is

286
00:10:13,640 --> 00:10:16,240
ducktoolkit.com it's a pretty cool

287
00:10:16,240 --> 00:10:18,800
online resource where you can encode and

288
00:10:18,800 --> 00:10:20,800
decode ducky scripts

289
00:10:20,800 --> 00:10:22,880
i have found the encoding is just about

290
00:10:22,880 --> 00:10:25,040
perfect i have found a couple instances

291
00:10:25,040 --> 00:10:27,040
where the decode doesn't work exactly as

292
00:10:27,040 --> 00:10:28,160
i'm expecting it so that's just

293
00:10:28,160 --> 00:10:30,200
something to be aware of

294
00:10:30,200 --> 00:10:32,959
duckydecode.pl yes that is a perl script

295
00:10:32,959 --> 00:10:35,920
in 2021 is actually still pretty good it

296
00:10:35,920 --> 00:10:38,160
actually comes with the

297
00:10:38,160 --> 00:10:39,200
github

298
00:10:39,200 --> 00:10:41,279
where the usb rubber ducky code is

299
00:10:41,279 --> 00:10:43,040
hosted for hack five so you definitely

300
00:10:43,040 --> 00:10:44,880
have that available

301
00:10:44,880 --> 00:10:46,560
but i would like you to consider

302
00:10:46,560 --> 00:10:48,320
checking out a tool that i wrote called

303
00:10:48,320 --> 00:10:49,360
mallard

304
00:10:49,360 --> 00:10:52,240
i had been looking for a reason all year

305
00:10:52,240 --> 00:10:55,040
to write a usb rubber ducky decoder and

306
00:10:55,040 --> 00:10:56,800
i got this strike of inspiration a few

307
00:10:56,800 --> 00:10:58,399
weeks ago when i was talking to josh

308
00:10:58,399 --> 00:11:00,160
wright that i was going to not only

309
00:11:00,160 --> 00:11:01,600
write something that decoded ducky

310
00:11:01,600 --> 00:11:03,680
payloads but it was also going to do

311
00:11:03,680 --> 00:11:05,440
some analysis so we'll take a look at

312
00:11:05,440 --> 00:11:07,200
that in a second and here's the link to

313
00:11:07,200 --> 00:11:09,440
that or a qr code you can scan to go to

314
00:11:09,440 --> 00:11:12,160
my github and get that tool

315
00:11:12,160 --> 00:11:13,360
so

316
00:11:13,360 --> 00:11:15,040
let's step back let's look at that

317
00:11:15,040 --> 00:11:17,680
original um ducky script that we saw at

318
00:11:17,680 --> 00:11:19,920
the beginning and look at the inject.bin

319
00:11:19,920 --> 00:11:21,360
that comes out of that you can see here

320
00:11:21,360 --> 00:11:23,440
that 1508 that starts it's off that's

321
00:11:23,440 --> 00:11:25,680
that gooey r we've already seen and then

322
00:11:25,680 --> 00:11:28,320
we have this long string and here i've

323
00:11:28,320 --> 00:11:30,240
highlighted santa on the left in the

324
00:11:30,240 --> 00:11:31,839
ducky script and also where it exists in

325
00:11:31,839 --> 00:11:33,120
inject.bin

326
00:11:33,120 --> 00:11:35,120
and you can see right yeah we see shifts

327
00:11:35,120 --> 00:11:37,279
and we see you know that 0402 which we

328
00:11:37,279 --> 00:11:39,519
know is a so we see that a couple times

329
00:11:39,519 --> 00:11:41,120
and again it's cool party trick to be

330
00:11:41,120 --> 00:11:44,000
able to read the hex on this but

331
00:11:44,000 --> 00:11:46,000
is these um you know as these ducky

332
00:11:46,000 --> 00:11:47,519
scripts get longer and longer right

333
00:11:47,519 --> 00:11:48,720
we're not going to want to have to look

334
00:11:48,720 --> 00:11:49,839
at the hex to figure out what they're

335
00:11:49,839 --> 00:11:51,040
doing so

336
00:11:51,040 --> 00:11:53,120
let's use mallard to look

337
00:11:53,120 --> 00:11:55,200
so mallard is a tool that i wrote in

338
00:11:55,200 --> 00:11:57,440
python 3. it does absolutely require

339
00:11:57,440 --> 00:11:59,839
python 3.7 because i use a few libraries

340
00:11:59,839 --> 00:12:01,680
that are new to that version of python

341
00:12:01,680 --> 00:12:03,920
we're on python 3.10 right now so it's

342
00:12:03,920 --> 00:12:06,639
not like it's a scandalously new by any

343
00:12:06,639 --> 00:12:09,120
means so if you're ever checking it out

344
00:12:09,120 --> 00:12:11,360
go ahead and you know just run python

345
00:12:11,360 --> 00:12:14,880
mallard h it'll give you the help output

346
00:12:14,880 --> 00:12:16,880
and you can see here right we can feed

347
00:12:16,880 --> 00:12:18,639
it a particular file by default it just

348
00:12:18,639 --> 00:12:20,320
looks like it looks for inject.bin in

349
00:12:20,320 --> 00:12:21,600
your directory

350
00:12:21,600 --> 00:12:23,600
if you don't want to do any analysis you

351
00:12:23,600 --> 00:12:25,600
give it the dash a

352
00:12:25,600 --> 00:12:27,440
you can send the output to a file you

353
00:12:27,440 --> 00:12:28,959
can send the analysis to a file and you

354
00:12:28,959 --> 00:12:30,560
can even enable debugging if you're

355
00:12:30,560 --> 00:12:33,839
trying to add some functionality to it

356
00:12:33,839 --> 00:12:36,160
so here's an example of running mallard

357
00:12:36,160 --> 00:12:38,560
so on my machine i have an inject.bin

358
00:12:38,560 --> 00:12:40,240
just sitting in that directory and i run

359
00:12:40,240 --> 00:12:42,399
python3 mallard

360
00:12:42,399 --> 00:12:43,360
and

361
00:12:43,360 --> 00:12:45,040
this is with no previous knowledge of

362
00:12:45,040 --> 00:12:46,560
what the ducky script was like obviously

363
00:12:46,560 --> 00:12:48,000
i knew what it was because i wrote it

364
00:12:48,000 --> 00:12:50,399
but mallard had no idea it only had the

365
00:12:50,399 --> 00:12:51,760
inject drop in

366
00:12:51,760 --> 00:12:54,480
and it came out just about perfect i'm

367
00:12:54,480 --> 00:12:56,959
very proud of how this toll works and

368
00:12:56,959 --> 00:12:58,639
again that differentiator that you can

369
00:12:58,639 --> 00:13:00,399
see there at the bottom is i'm doing

370
00:13:00,399 --> 00:13:02,639
some analysis and commentary

371
00:13:02,639 --> 00:13:04,560
on this on the

372
00:13:04,560 --> 00:13:06,480
on the ducky script that it was analyzed

373
00:13:06,480 --> 00:13:09,519
right so we see it uh run was opened

374
00:13:09,519 --> 00:13:11,839
and you can see it says gooey r right so

375
00:13:11,839 --> 00:13:13,120
it's possible windows attack

376
00:13:13,120 --> 00:13:15,600
powershell's invoked a user was added a

377
00:13:15,600 --> 00:13:17,920
user ad was added to the admins group so

378
00:13:17,920 --> 00:13:20,000
i'm adding more and more of these

379
00:13:20,000 --> 00:13:22,560
detections and analyses to mallard so

380
00:13:22,560 --> 00:13:23,760
that when you

381
00:13:23,760 --> 00:13:26,079
run a ducty script or an inject i've

382
00:13:26,079 --> 00:13:27,279
been through it that you don't have to

383
00:13:27,279 --> 00:13:28,560
think about it too much it should just

384
00:13:28,560 --> 00:13:30,079
kind of give you an idea of what's going

385
00:13:30,079 --> 00:13:30,880
on

386
00:13:30,880 --> 00:13:32,320
and then at the bottom i just included a

387
00:13:32,320 --> 00:13:34,399
more complicated invocation

388
00:13:34,399 --> 00:13:36,320
of the tool where i have you know python

389
00:13:36,320 --> 00:13:38,079
mallard and then i give it a

390
00:13:38,079 --> 00:13:40,320
test file that's not inject.bin i

391
00:13:40,320 --> 00:13:41,920
disable um

392
00:13:41,920 --> 00:13:43,519
the analysis mode and i turn on

393
00:13:43,519 --> 00:13:46,160
debugging so

394
00:13:46,160 --> 00:13:47,839
thank you so much for taking some time

395
00:13:47,839 --> 00:13:50,079
to hang out with me and learn about hit

396
00:13:50,079 --> 00:13:51,680
attacks and learn about this tool

397
00:13:51,680 --> 00:13:53,760
mallard that i released please check it

398
00:13:53,760 --> 00:13:55,360
out let me know what you think of it my

399
00:13:55,360 --> 00:13:57,120
email is here you can probably figure

400
00:13:57,120 --> 00:13:58,560
out what those special characters are

401
00:13:58,560 --> 00:14:00,560
supposed to be but if not look up those

402
00:14:00,560 --> 00:14:03,600
usb scan codes otherwise enjoy holiday

403
00:14:03,600 --> 00:14:06,079
hack challenge enjoy crinkle con enjoy

404
00:14:06,079 --> 00:14:08,880
2022 if you see me uh teaching at a sans

405
00:14:08,880 --> 00:14:10,959
event please stop by and say hello or if

406
00:14:10,959 --> 00:14:12,959
you take sec 504 with me i look forward

407
00:14:12,959 --> 00:14:15,980
to having you in class thank you

408
00:14:15,980 --> 00:14:19,210
[Music]

