1
00:00:05,800 --> 00:00:11,318
[Music]

2
00:00:15,599 --> 00:00:18,160
hello everyone my name is berkey and i'm

3
00:00:18,160 --> 00:00:20,400
a security engineer at google where i

4
00:00:20,400 --> 00:00:23,119
work on web framework security

5
00:00:23,119 --> 00:00:25,439
today i'm going to show you how you can

6
00:00:25,439 --> 00:00:26,720
eliminate cross-site scripting

7
00:00:26,720 --> 00:00:28,480
vulnerabilities from your angular

8
00:00:28,480 --> 00:00:29,679
application

9
00:00:29,679 --> 00:00:32,000
by adopting a new web platform security

10
00:00:32,000 --> 00:00:36,000
mechanism called trusted types

11
00:00:36,000 --> 00:00:37,120
let's start with a little bit of

12
00:00:37,120 --> 00:00:39,280
background

13
00:00:39,280 --> 00:00:41,920
google's vrp is a bug monthly program

14
00:00:41,920 --> 00:00:44,559
that pays external security researchers

15
00:00:44,559 --> 00:00:47,200
for reporting vulnerabilities

16
00:00:47,200 --> 00:00:50,000
looking at two data from 2018 and the

17
00:00:50,000 --> 00:00:52,559
total payouts by vulnerability class we

18
00:00:52,559 --> 00:00:54,079
can see that crosstalk scripting

19
00:00:54,079 --> 00:00:55,760
accounts for more than a third of the

20
00:00:55,760 --> 00:00:57,520
entire budget

21
00:00:57,520 --> 00:00:59,199
and considering that almost half the

22
00:00:59,199 --> 00:01:02,000
budget isn't even on web related issues

23
00:01:02,000 --> 00:01:04,479
we can see that xss is by far the most

24
00:01:04,479 --> 00:01:07,280
expensive type of web vulnerability

25
00:01:07,280 --> 00:01:09,360
and this graph looks largely the same

26
00:01:09,360 --> 00:01:11,280
even today as well as if you look at

27
00:01:11,280 --> 00:01:14,479
other bug monty programs

28
00:01:14,720 --> 00:01:16,479
cross-site scripting vulnerabilities

29
00:01:16,479 --> 00:01:19,040
occur when a web application passes user

30
00:01:19,040 --> 00:01:21,200
input which hasn't been escaped or

31
00:01:21,200 --> 00:01:22,400
sanitized

32
00:01:22,400 --> 00:01:25,360
into an html or script context that the

33
00:01:25,360 --> 00:01:28,400
browser then interprets and executes

34
00:01:28,400 --> 00:01:30,640
this can be serious as an attacker may

35
00:01:30,640 --> 00:01:32,640
be able to leverage this to leak

36
00:01:32,640 --> 00:01:35,119
sensitive data from users or perform

37
00:01:35,119 --> 00:01:37,840
actions on their behalf

38
00:01:37,840 --> 00:01:40,000
this can happen both because of unsafe

39
00:01:40,000 --> 00:01:42,960
server-side and client-side rendering

40
00:01:42,960 --> 00:01:46,000
client-side or dom-based xss which we

41
00:01:46,000 --> 00:01:47,520
are going to focus on

42
00:01:47,520 --> 00:01:49,680
occurs when the application passes user

43
00:01:49,680 --> 00:01:52,240
input to one of the dangerous dom apis

44
00:01:52,240 --> 00:01:55,200
which we call injection sinks

45
00:01:55,200 --> 00:01:57,360
on the right you can see some examples

46
00:01:57,360 --> 00:01:59,360
of injection syncs

47
00:01:59,360 --> 00:02:02,399
eval is probably the most recognized one

48
00:02:02,399 --> 00:02:04,640
but assigning to innerhtml or

49
00:02:04,640 --> 00:02:07,360
script.source are other good examples

50
00:02:07,360 --> 00:02:10,000
and will cause xss if passed untrusted

51
00:02:10,000 --> 00:02:11,920
user input

52
00:02:11,920 --> 00:02:13,680
there have been a number of attempts at

53
00:02:13,680 --> 00:02:15,920
mitigating dom-based access

54
00:02:15,920 --> 00:02:18,080
including content security policies

55
00:02:18,080 --> 00:02:20,720
static code analysis and access as

56
00:02:20,720 --> 00:02:23,360
detection in browsers

57
00:02:23,360 --> 00:02:24,640
while most of these are helped

58
00:02:24,640 --> 00:02:26,800
considerably as we saw on the previous

59
00:02:26,800 --> 00:02:29,520
slide access that xss is still a huge

60
00:02:29,520 --> 00:02:31,920
threat

61
00:02:32,720 --> 00:02:34,480
expanding a bit on content security

62
00:02:34,480 --> 00:02:35,599
policies

63
00:02:35,599 --> 00:02:37,760
they allow you to restrict which scripts

64
00:02:37,760 --> 00:02:40,480
are allowed to run on your page

65
00:02:40,480 --> 00:02:42,080
they are configured by having your web

66
00:02:42,080 --> 00:02:44,560
server send an http header

67
00:02:44,560 --> 00:02:45,840
for example

68
00:02:45,840 --> 00:02:47,840
a content security policy header with a

69
00:02:47,840 --> 00:02:51,599
value of script source example.com

70
00:02:51,599 --> 00:02:54,319
will make the browser block execution of

71
00:02:54,319 --> 00:02:56,080
any scripts that are not loaded over

72
00:02:56,080 --> 00:02:59,680
https from example.com

73
00:02:59,680 --> 00:03:01,680
this ensures that only scripts that you

74
00:03:01,680 --> 00:03:05,360
trust are executed on your page

75
00:03:05,360 --> 00:03:08,080
while a good csp policy may limit or

76
00:03:08,080 --> 00:03:10,560
even block impact from tarmac ss in your

77
00:03:10,560 --> 00:03:11,760
application

78
00:03:11,760 --> 00:03:13,440
it does not address the root cause of

79
00:03:13,440 --> 00:03:15,519
these vulnerabilities which are unsafe

80
00:03:15,519 --> 00:03:17,599
uses of injection sinks

81
00:03:17,599 --> 00:03:19,920
and indeed attackers may still be able

82
00:03:19,920 --> 00:03:22,720
to deface your website or use it for

83
00:03:22,720 --> 00:03:25,440
fishing attacks

84
00:03:26,400 --> 00:03:27,440
luckily

85
00:03:27,440 --> 00:03:29,680
angular does a great job of limiting

86
00:03:29,680 --> 00:03:32,959
direct interaction with injection sinks

87
00:03:32,959 --> 00:03:34,959
it provides a templating language that

88
00:03:34,959 --> 00:03:37,760
ensures that all interpolated user input

89
00:03:37,760 --> 00:03:41,760
is escaped or sanitized before rendering

90
00:03:41,760 --> 00:03:44,000
if you need to bypass sanitization you

91
00:03:44,000 --> 00:03:46,400
must explicitly call one of the bypass

92
00:03:46,400 --> 00:03:48,879
security trust functions which marks the

93
00:03:48,879 --> 00:03:51,440
value as safe for injection into a

94
00:03:51,440 --> 00:03:53,560
specific context

95
00:03:53,560 --> 00:03:54,879
[Music]

96
00:03:54,879 --> 00:03:57,040
but even if a secure web framework such

97
00:03:57,040 --> 00:03:59,439
as angular is used there are still many

98
00:03:59,439 --> 00:04:02,080
opportunities for direct dom interaction

99
00:04:02,080 --> 00:04:04,959
that could lead to xss

100
00:04:04,959 --> 00:04:06,239
for example

101
00:04:06,239 --> 00:04:08,720
there is nothing that forces a developer

102
00:04:08,720 --> 00:04:11,439
to use angular snapbetting language

103
00:04:11,439 --> 00:04:13,519
so they may still call out to the dom

104
00:04:13,519 --> 00:04:15,040
directly

105
00:04:15,040 --> 00:04:16,959
and in some cases this may even be

106
00:04:16,959 --> 00:04:19,279
necessary

107
00:04:19,279 --> 00:04:20,959
external javascript libraries that the

108
00:04:20,959 --> 00:04:23,199
application depends on are also a common

109
00:04:23,199 --> 00:04:25,280
source of exercise vulnerabilities as

110
00:04:25,280 --> 00:04:27,040
they frequently perform direct dom

111
00:04:27,040 --> 00:04:29,040
interaction

112
00:04:29,040 --> 00:04:30,639
and both of these points are especially

113
00:04:30,639 --> 00:04:33,600
true in enterprise scale applications

114
00:04:33,600 --> 00:04:35,600
where there is often little oversight

115
00:04:35,600 --> 00:04:39,360
over what code gets checked in

116
00:04:39,759 --> 00:04:41,840
this brings us to the main subject which

117
00:04:41,840 --> 00:04:43,070
is trusted types

118
00:04:43,070 --> 00:04:46,320
[Music]

119
00:04:46,320 --> 00:04:48,800
trusted types is a new web browser api

120
00:04:48,800 --> 00:04:50,479
that allows you to completely block

121
00:04:50,479 --> 00:04:53,520
write access to injection 6.

122
00:04:53,520 --> 00:04:55,360
they are csp feature

123
00:04:55,360 --> 00:04:57,199
and are configured by serving a csb

124
00:04:57,199 --> 00:05:00,080
header with required trusted types for

125
00:05:00,080 --> 00:05:01,919
script

126
00:05:01,919 --> 00:05:04,320
when enabled any attempt at using an

127
00:05:04,320 --> 00:05:06,400
injection sync will be blocked by the

128
00:05:06,400 --> 00:05:07,360
browser

129
00:05:07,360 --> 00:05:09,840
throwing an exception also known as a

130
00:05:09,840 --> 00:05:12,639
trusted types violation

131
00:05:12,639 --> 00:05:14,080
angular has recently been made

132
00:05:14,080 --> 00:05:16,240
compatible with trusted types

133
00:05:16,240 --> 00:05:18,080
meaning that using angular and its

134
00:05:18,080 --> 00:05:20,080
templating language will not cause any

135
00:05:20,080 --> 00:05:22,160
violations

136
00:05:22,160 --> 00:05:23,759
when running your angular application

137
00:05:23,759 --> 00:05:26,560
locally you can enable trusted types by

138
00:05:26,560 --> 00:05:31,320
adding the csb header to angular.json

139
00:05:47,680 --> 00:05:49,759
you can verify that it works

140
00:05:49,759 --> 00:05:51,759
by opening the developer console in your

141
00:05:51,759 --> 00:05:52,960
application

142
00:05:52,960 --> 00:05:57,198
and executing eval on a plain string

143
00:06:00,240 --> 00:06:02,560
enabling just trusted types makes an

144
00:06:02,560 --> 00:06:04,800
application very secure but it can also

145
00:06:04,800 --> 00:06:06,720
break its functionality

146
00:06:06,720 --> 00:06:08,960
so before rolling this out to production

147
00:06:08,960 --> 00:06:10,960
we first need to need to identify the

148
00:06:10,960 --> 00:06:15,280
trusted types of violations and fix them

149
00:06:15,840 --> 00:06:17,120
there are a few different ways to

150
00:06:17,120 --> 00:06:18,840
identify trusted types

151
00:06:18,840 --> 00:06:21,360
violations the simplest way is to run

152
00:06:21,360 --> 00:06:23,919
ng-serve and open the application in a

153
00:06:23,919 --> 00:06:25,759
browser

154
00:06:25,759 --> 00:06:27,919
trusted types of violations will surface

155
00:06:27,919 --> 00:06:30,560
as exceptions in the developer console

156
00:06:30,560 --> 00:06:32,840
and contain a stack

157
00:06:32,840 --> 00:06:35,199
trace enabling trusted types in

158
00:06:35,199 --> 00:06:37,280
angular.json will also cause trusted

159
00:06:37,280 --> 00:06:41,039
types to be enforced in end-to-end tests

160
00:06:41,039 --> 00:06:44,000
running ng e2e is a good source of

161
00:06:44,000 --> 00:06:45,919
violations if the tests are

162
00:06:45,919 --> 00:06:48,560
comprehensive

163
00:06:48,560 --> 00:06:50,960
it is also possible to use static code

164
00:06:50,960 --> 00:06:52,319
analysis

165
00:06:52,319 --> 00:06:54,639
we've developed a tool called tsac that

166
00:06:54,639 --> 00:06:56,800
looks for trusted types violations in

167
00:06:56,800 --> 00:06:59,199
typescript code

168
00:06:59,199 --> 00:07:01,919
finally you can use a feature of csp

169
00:07:01,919 --> 00:07:04,160
known as report only mode which allows

170
00:07:04,160 --> 00:07:06,880
you to collect and analyze csp reports

171
00:07:06,880 --> 00:07:09,120
containing trusted test violations from

172
00:07:09,120 --> 00:07:11,759
actual users without causing production

173
00:07:11,759 --> 00:07:13,199
brackets

174
00:07:13,199 --> 00:07:15,440
this is a good practice before deploying

175
00:07:15,440 --> 00:07:18,560
any csp feature

176
00:07:19,120 --> 00:07:21,280
now when you've identified usage of an

177
00:07:21,280 --> 00:07:23,199
injection sync that is causing a trusted

178
00:07:23,199 --> 00:07:24,639
types violation

179
00:07:24,639 --> 00:07:26,560
you need to refactor that code in a way

180
00:07:26,560 --> 00:07:29,199
that does not cause a violation

181
00:07:29,199 --> 00:07:30,479
first and foremost

182
00:07:30,479 --> 00:07:32,160
you should be using angular's templating

183
00:07:32,160 --> 00:07:34,880
language whenever possible

184
00:07:34,880 --> 00:07:37,120
otherwise here are some common examples

185
00:07:37,120 --> 00:07:41,039
of violations and save alternatives

186
00:07:41,039 --> 00:07:42,880
if you're assigning plain text to any

187
00:07:42,880 --> 00:07:45,840
html you can assign the text to text

188
00:07:45,840 --> 00:07:48,400
content instead

189
00:07:48,400 --> 00:07:49,919
if you're constructing some simple

190
00:07:49,919 --> 00:07:51,599
inline html

191
00:07:51,599 --> 00:07:55,120
you can use save dom apis instead

192
00:07:55,120 --> 00:07:56,840
for example

193
00:07:56,840 --> 00:07:59,199
document.createelement set attribute

194
00:07:59,199 --> 00:08:03,039
text content and append child

195
00:08:03,039 --> 00:08:05,199
if you're creating inline event handlers

196
00:08:05,199 --> 00:08:06,800
using strings

197
00:08:06,800 --> 00:08:09,360
you should be using add event listener

198
00:08:09,360 --> 00:08:12,960
or angular's event bindings instead

199
00:08:12,960 --> 00:08:14,879
if you're creating web workers

200
00:08:14,879 --> 00:08:16,639
and you're using webpack

201
00:08:16,639 --> 00:08:18,120
you can use

202
00:08:18,120 --> 00:08:21,120
import.meta.url to instruct webpack to

203
00:08:21,120 --> 00:08:23,360
to inline the workerscript in a way that

204
00:08:23,360 --> 00:08:26,160
is compatible with trusted types

205
00:08:26,160 --> 00:08:28,319
these are some common examples

206
00:08:28,319 --> 00:08:30,240
but sometimes there is simply no safe

207
00:08:30,240 --> 00:08:32,799
alternative

208
00:08:33,519 --> 00:08:35,919
as a last resort trusted types writes a

209
00:08:35,919 --> 00:08:37,760
mechanism known as trusted types

210
00:08:37,760 --> 00:08:39,279
policies

211
00:08:39,279 --> 00:08:41,440
these policies allow the application to

212
00:08:41,440 --> 00:08:43,919
produce values that are safe for use in

213
00:08:43,919 --> 00:08:46,240
specific injection syncs without causing

214
00:08:46,240 --> 00:08:48,640
a trusted types of violation

215
00:08:48,640 --> 00:08:50,320
sinks require one of three different

216
00:08:50,320 --> 00:08:52,240
types of values depending on the nature

217
00:08:52,240 --> 00:08:53,360
of the sink

218
00:08:53,360 --> 00:08:55,920
either trusted html for example when

219
00:08:55,920 --> 00:08:58,160
assigning to any html

220
00:08:58,160 --> 00:09:00,080
trusted script for example when a

221
00:09:00,080 --> 00:09:01,680
calling eval

222
00:09:01,680 --> 00:09:04,320
or trusted script url for example when

223
00:09:04,320 --> 00:09:06,480
creating a worker

224
00:09:06,480 --> 00:09:08,560
policies are simple javascript objects

225
00:09:08,560 --> 00:09:11,600
defined by the application

226
00:09:11,600 --> 00:09:13,600
on the right is an example of an

227
00:09:13,600 --> 00:09:15,360
application that wants to assign

228
00:09:15,360 --> 00:09:17,519
potentially untrusted user input to

229
00:09:17,519 --> 00:09:20,560
inner html in a safe way

230
00:09:20,560 --> 00:09:22,399
it starts by defining a trusted type

231
00:09:22,399 --> 00:09:25,040
policy using the trustedtypes.create

232
00:09:25,040 --> 00:09:26,399
policy api

233
00:09:26,399 --> 00:09:28,640
and giving giving it a name of

234
00:09:28,640 --> 00:09:31,600
sanitize.html

235
00:09:31,600 --> 00:09:34,000
the createhtml function defines how

236
00:09:34,000 --> 00:09:36,399
unsaved user input should be transformed

237
00:09:36,399 --> 00:09:38,320
or validated to ensure that the

238
00:09:38,320 --> 00:09:41,120
resulting html is trusted

239
00:09:41,120 --> 00:09:43,920
in this case the dom purify library is

240
00:09:43,920 --> 00:09:46,640
used to sanitize the html

241
00:09:46,640 --> 00:09:48,640
the application can then pass untrusted

242
00:09:48,640 --> 00:09:51,680
html to the policies create html

243
00:09:51,680 --> 00:09:52,640
function

244
00:09:52,640 --> 00:09:55,600
which sanitizes the html and returns a

245
00:09:55,600 --> 00:09:58,160
trust.html value

246
00:09:58,160 --> 00:10:00,000
this value can then be assigned to any

247
00:10:00,000 --> 00:10:02,320
html without causing a trusted types

248
00:10:02,320 --> 00:10:04,240
violation

249
00:10:04,240 --> 00:10:06,560
in this way trusted types forces any

250
00:10:06,560 --> 00:10:08,880
security sensitive code into trusted

251
00:10:08,880 --> 00:10:10,720
types policies

252
00:10:10,720 --> 00:10:13,120
and as a result these policies must be

253
00:10:13,120 --> 00:10:17,560
scrutinized for security

254
00:10:18,720 --> 00:10:20,959
once all the violations have been fixed

255
00:10:20,959 --> 00:10:22,560
trusted types can be enabled in

256
00:10:22,560 --> 00:10:24,240
production

257
00:10:24,240 --> 00:10:26,560
going forward we must also ensure that

258
00:10:26,560 --> 00:10:29,360
no new trusted types violations appear

259
00:10:29,360 --> 00:10:32,079
as that may break the application

260
00:10:32,079 --> 00:10:33,600
the approach is similar to how we

261
00:10:33,600 --> 00:10:36,480
originally identified violations

262
00:10:36,480 --> 00:10:37,920
by enabling trusted types in

263
00:10:37,920 --> 00:10:39,680
angular.json

264
00:10:39,680 --> 00:10:41,279
trusted types will be enabled in

265
00:10:41,279 --> 00:10:43,040
development mode

266
00:10:43,040 --> 00:10:44,959
developers should thus cast any new

267
00:10:44,959 --> 00:10:46,959
violations when they are developing a

268
00:10:46,959 --> 00:10:48,560
feature

269
00:10:48,560 --> 00:10:50,880
the same applies for end-to-end tests

270
00:10:50,880 --> 00:10:52,800
which should be run as part of your ci

271
00:10:52,800 --> 00:10:54,560
pipeline

272
00:10:54,560 --> 00:10:57,360
tsac our static code analysis tool can

273
00:10:57,360 --> 00:10:59,440
be added as a pre-submit check to your

274
00:10:59,440 --> 00:11:01,760
code repository

275
00:11:01,760 --> 00:11:04,000
and in the unlikely case any violations

276
00:11:04,000 --> 00:11:06,399
make it into production you will be

277
00:11:06,399 --> 00:11:10,320
notified through csp reports

278
00:11:11,760 --> 00:11:13,760
one final feature of trusted types that

279
00:11:13,760 --> 00:11:15,519
i will want to tell you about is

280
00:11:15,519 --> 00:11:18,240
restricting policy creation

281
00:11:18,240 --> 00:11:20,480
this is useful as when you rolled out

282
00:11:20,480 --> 00:11:21,760
trusted types

283
00:11:21,760 --> 00:11:23,680
trusted type's policies will remain as

284
00:11:23,680 --> 00:11:25,760
the only place where security sensitive

285
00:11:25,760 --> 00:11:28,720
code lives in your application

286
00:11:28,720 --> 00:11:30,959
policy creation can be restricted by

287
00:11:30,959 --> 00:11:32,480
explicitly listing the names of the

288
00:11:32,480 --> 00:11:35,040
allowed policies in the trusted types

289
00:11:35,040 --> 00:11:38,079
directive in your csp header

290
00:11:38,079 --> 00:11:40,240
in the example on the slide

291
00:11:40,240 --> 00:11:42,480
only the two policies named sanitize

292
00:11:42,480 --> 00:11:46,399
html and angular are allowed

293
00:11:46,399 --> 00:11:48,240
trying to create a policy with any other

294
00:11:48,240 --> 00:11:50,160
name or using the same name more than

295
00:11:50,160 --> 00:11:52,240
once will result in a trusted types

296
00:11:52,240 --> 00:11:54,079
violation

297
00:11:54,079 --> 00:11:56,079
restricting policy creation gives you

298
00:11:56,079 --> 00:11:57,680
even stronger guarantees about the

299
00:11:57,680 --> 00:11:59,519
security of your application

300
00:11:59,519 --> 00:12:01,519
and is especially useful in enterprise

301
00:12:01,519 --> 00:12:03,680
scale applications where you may want

302
00:12:03,680 --> 00:12:05,279
may not want developers to create

303
00:12:05,279 --> 00:12:09,560
arbitrary trusted types policies

304
00:12:10,000 --> 00:12:12,000
angular itself may create a number of

305
00:12:12,000 --> 00:12:13,839
trusted types policies which you can

306
00:12:13,839 --> 00:12:16,240
either allow or block using the trusted

307
00:12:16,240 --> 00:12:18,480
types directive

308
00:12:18,480 --> 00:12:21,600
the angular and angular bundler policies

309
00:12:21,600 --> 00:12:23,680
are required for basic angular

310
00:12:23,680 --> 00:12:24,959
functionality

311
00:12:24,959 --> 00:12:27,920
and are always safe to allow

312
00:12:27,920 --> 00:12:30,800
the angular unsafe bypass policy

313
00:12:30,800 --> 00:12:32,720
is created when any of the bypass

314
00:12:32,720 --> 00:12:35,760
security trust functions are called

315
00:12:35,760 --> 00:12:37,440
depending on whether you allow this

316
00:12:37,440 --> 00:12:39,680
policy you can control whether you want

317
00:12:39,680 --> 00:12:42,240
to allow calls to bypass security trust

318
00:12:42,240 --> 00:12:45,040
in your application

319
00:12:45,040 --> 00:12:46,639
angular unsafety

320
00:12:46,639 --> 00:12:48,560
is required if you need to use angular's

321
00:12:48,560 --> 00:12:50,560
just in time compilation

322
00:12:50,560 --> 00:12:52,720
but using ahead of time compilation is

323
00:12:52,720 --> 00:12:54,399
strongly encouraged not only for

324
00:12:54,399 --> 00:12:56,480
security but also for performance

325
00:12:56,480 --> 00:12:58,399
reasons

326
00:12:58,399 --> 00:13:00,480
finally if you want to use the angular

327
00:13:00,480 --> 00:13:02,079
dev tools while developing your

328
00:13:02,079 --> 00:13:03,279
application

329
00:13:03,279 --> 00:13:05,279
you need to allow the angular dev tools

330
00:13:05,279 --> 00:13:07,519
policy but make sure you only do this

331
00:13:07,519 --> 00:13:10,000
locally

332
00:13:10,399 --> 00:13:12,480
wrapping up

333
00:13:12,480 --> 00:13:14,399
these are the steps you need in order to

334
00:13:14,399 --> 00:13:16,639
deploy trusted types

335
00:13:16,639 --> 00:13:18,639
you start by enabling trusted types in

336
00:13:18,639 --> 00:13:20,639
report only mode

337
00:13:20,639 --> 00:13:22,880
you look for trusted types of violations

338
00:13:22,880 --> 00:13:24,880
either locally by navigating around your

339
00:13:24,880 --> 00:13:27,839
application or by looking at csp reports

340
00:13:27,839 --> 00:13:30,079
from users

341
00:13:30,079 --> 00:13:32,560
you fix these violations by refactoring

342
00:13:32,560 --> 00:13:35,200
code to use save dom apis

343
00:13:35,200 --> 00:13:37,440
used using trusted types policies as a

344
00:13:37,440 --> 00:13:39,680
last resort

345
00:13:39,680 --> 00:13:41,279
when you're confident you fixed all

346
00:13:41,279 --> 00:13:43,279
trust types violations

347
00:13:43,279 --> 00:13:45,279
drop the report only mode and start

348
00:13:45,279 --> 00:13:47,760
enforcing trusted types

349
00:13:47,760 --> 00:13:50,560
finally you can rely on end-to-end tests

350
00:13:50,560 --> 00:13:52,480
and continuous integration to prevent

351
00:13:52,480 --> 00:13:55,600
any new violations

352
00:13:56,240 --> 00:13:58,079
to get an idea of how effective trusted

353
00:13:58,079 --> 00:14:00,720
types are we analyzed dom-based xss

354
00:14:00,720 --> 00:14:03,199
reports from last year's google vrp

355
00:14:03,199 --> 00:14:04,240
program

356
00:14:04,240 --> 00:14:07,040
and found that i found that at least 61

357
00:14:07,040 --> 00:14:09,120
of the reported vulnerabilities would

358
00:14:09,120 --> 00:14:11,839
have been mitigated by trusted types

359
00:14:11,839 --> 00:14:13,360
and note that this only includes

360
00:14:13,360 --> 00:14:15,680
vulnerabilities that were already missed

361
00:14:15,680 --> 00:14:17,279
by google's static code analysis

362
00:14:17,279 --> 00:14:20,160
pipeline and security reviews which

363
00:14:20,160 --> 00:14:23,279
which is pretty impressive

364
00:14:25,199 --> 00:14:27,279
we've seen how trusted types forces you

365
00:14:27,279 --> 00:14:29,839
to use safe apis and moves security

366
00:14:29,839 --> 00:14:31,360
sensitive code into trusted types

367
00:14:31,360 --> 00:14:33,279
policies that can't be reviewed in

368
00:14:33,279 --> 00:14:35,040
isolation

369
00:14:35,040 --> 00:14:36,720
even in browsers that do not support

370
00:14:36,720 --> 00:14:38,000
tested types

371
00:14:38,000 --> 00:14:39,600
this still increases the security of

372
00:14:39,600 --> 00:14:42,959
your application considerably

373
00:14:42,959 --> 00:14:44,480
but trusted types gives you more than

374
00:14:44,480 --> 00:14:45,600
that

375
00:14:45,600 --> 00:14:47,120
i was recently playing around with one

376
00:14:47,120 --> 00:14:49,120
of my angular applications when i ran

377
00:14:49,120 --> 00:14:51,760
into a trusted types violation

378
00:14:51,760 --> 00:14:54,000
i thought to myself oh no i must have

379
00:14:54,000 --> 00:14:56,240
forgotten to refactor some insecure code

380
00:14:56,240 --> 00:14:58,240
in my application

381
00:14:58,240 --> 00:15:00,560
but after digging into the stack trace i

382
00:15:00,560 --> 00:15:02,000
noticed that the violation was coming

383
00:15:02,000 --> 00:15:05,040
from inside the angular framework

384
00:15:05,040 --> 00:15:07,279
i was using international analyzation in

385
00:15:07,279 --> 00:15:09,600
my angular application and it turned out

386
00:15:09,600 --> 00:15:11,519
that in certain scenarios

387
00:15:11,519 --> 00:15:14,000
angular was not escaping user input that

388
00:15:14,000 --> 00:15:16,639
went through the i89 pipeline

389
00:15:16,639 --> 00:15:18,160
i had discovered a crosstalk scripting

390
00:15:18,160 --> 00:15:21,279
vulnerability in angular itself

391
00:15:21,279 --> 00:15:23,199
but because i was enforcing trusted

392
00:15:23,199 --> 00:15:26,000
types my application was immune to the

393
00:15:26,000 --> 00:15:28,320
vulnerability at least in browsers that

394
00:15:28,320 --> 00:15:29,390
support trusted types

395
00:15:29,390 --> 00:15:30,880
[Music]

396
00:15:30,880 --> 00:15:32,800
and the same principle applies to

397
00:15:32,800 --> 00:15:34,959
obscure but potentially dangerous code

398
00:15:34,959 --> 00:15:37,120
paths in both your application and in

399
00:15:37,120 --> 00:15:39,360
third-party dependencies they're simply

400
00:15:39,360 --> 00:15:41,839
blocked

401
00:15:42,880 --> 00:15:44,160
so that's it

402
00:15:44,160 --> 00:15:46,000
thank you for listening and i hope i've

403
00:15:46,000 --> 00:15:48,240
inspired you to give trusted types a try

404
00:15:48,240 --> 00:15:51,880
in your anchor application

405
00:15:59,040 --> 00:16:01,120
you

