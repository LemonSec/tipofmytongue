1
00:00:05,800 --> 00:00:11,318
[Music]

2
00:00:13,759 --> 00:00:16,000
hello and welcome to elf university's

3
00:00:16,000 --> 00:00:17,600
electrical engineering and computer

4
00:00:17,600 --> 00:00:21,359
science course 302 fpga design for

5
00:00:21,359 --> 00:00:23,199
embedded systems

6
00:00:23,199 --> 00:00:27,199
it's day four an introduction to verilog

7
00:00:27,199 --> 00:00:29,599
i'm your professor quirky petabyte and

8
00:00:29,599 --> 00:00:31,359
i've been looking forward to this class

9
00:00:31,359 --> 00:00:33,520
for some time now

10
00:00:33,520 --> 00:00:36,079
let's start off by reviewing some of the

11
00:00:36,079 --> 00:00:39,040
information that we've already covered

12
00:00:39,040 --> 00:00:42,800
an fpga is a field programmable gate

13
00:00:42,800 --> 00:00:46,160
array it's an integrated circuit or chip

14
00:00:46,160 --> 00:00:49,200
that can be used to design custom task

15
00:00:49,200 --> 00:00:51,280
specific digital logic

16
00:00:51,280 --> 00:00:54,000
an fpga is almost magical in that it

17
00:00:54,000 --> 00:00:57,039
allows you to create and edit actual

18
00:00:57,039 --> 00:00:59,600
digital logic circuitry

19
00:00:59,600 --> 00:01:02,160
its close cousin the async is an

20
00:01:02,160 --> 00:01:04,959
application specific integrated circuit

21
00:01:04,959 --> 00:01:06,799
generally speaking once a design is

22
00:01:06,799 --> 00:01:09,360
created tested and proven to work on an

23
00:01:09,360 --> 00:01:12,320
fpga that design can then be used to

24
00:01:12,320 --> 00:01:16,000
create an application specific ic

25
00:01:16,000 --> 00:01:18,400
asics are cheaper and faster for

26
00:01:18,400 --> 00:01:20,240
production at scale

27
00:01:20,240 --> 00:01:23,119
custom task specific digital logic can

28
00:01:23,119 --> 00:01:26,000
be orders of magnitude faster or more

29
00:01:26,000 --> 00:01:28,159
power efficient when compared with

30
00:01:28,159 --> 00:01:30,240
software running on a more general

31
00:01:30,240 --> 00:01:33,759
purpose cpu

32
00:01:33,759 --> 00:01:35,360
let's review some of the other

33
00:01:35,360 --> 00:01:37,280
information that we've covered over the

34
00:01:37,280 --> 00:01:39,119
last three days

35
00:01:39,119 --> 00:01:42,000
we covered the history of the fpga when

36
00:01:42,000 --> 00:01:44,479
they were originally developed as north

37
00:01:44,479 --> 00:01:47,680
pole technology back in the 1950s

38
00:01:47,680 --> 00:01:49,600
they leaked to the human world then in

39
00:01:49,600 --> 00:01:52,479
the mid 1980s and they're still in use

40
00:01:52,479 --> 00:01:53,520
today

41
00:01:53,520 --> 00:01:56,320
fpgas and a6 well we're not using them

42
00:01:56,320 --> 00:01:57,280
as much

43
00:01:57,280 --> 00:01:59,439
here up at the north pole because we

44
00:01:59,439 --> 00:02:02,399
have sentient ai uh based on quantum

45
00:02:02,399 --> 00:02:04,159
computing and nanotechnology that have

46
00:02:04,159 --> 00:02:07,280
replaced most of our elves working on

47
00:02:07,280 --> 00:02:09,440
design

48
00:02:09,440 --> 00:02:11,920
why should we learn this technology then

49
00:02:11,920 --> 00:02:14,720
well fpga development is a wonderful

50
00:02:14,720 --> 00:02:16,720
introduction to parallel processing

51
00:02:16,720 --> 00:02:19,280
concepts

52
00:02:19,280 --> 00:02:20,959
the technologies that we're going to be

53
00:02:20,959 --> 00:02:22,959
using in our class we've discussed a

54
00:02:22,959 --> 00:02:24,720
little bit we're going to be beginning

55
00:02:24,720 --> 00:02:28,319
with old school verilog 2005 and as the

56
00:02:28,319 --> 00:02:30,560
class progresses we'll introduce system

57
00:02:30,560 --> 00:02:33,599
verilog remember as i always say you

58
00:02:33,599 --> 00:02:36,080
need to learn to walk before you learn

59
00:02:36,080 --> 00:02:38,480
to run

60
00:02:39,680 --> 00:02:43,440
let's do a quick introduction to verilog

61
00:02:43,440 --> 00:02:45,840
it's important to understand and compare

62
00:02:45,840 --> 00:02:47,920
and contrast the difference between

63
00:02:47,920 --> 00:02:49,200
developing

64
00:02:49,200 --> 00:02:51,680
integrated digital

65
00:02:51,680 --> 00:02:53,440
logic circuits

66
00:02:53,440 --> 00:02:55,280
is what which was what we're going to be

67
00:02:55,280 --> 00:02:57,440
doing in verilog we want to contrast

68
00:02:57,440 --> 00:02:59,440
that with developing software in a

69
00:02:59,440 --> 00:03:01,760
programming language

70
00:03:01,760 --> 00:03:04,000
this class assumes that you have some

71
00:03:04,000 --> 00:03:07,360
sort of a background in programming but

72
00:03:07,360 --> 00:03:09,599
i'm telling you right now you need to

73
00:03:09,599 --> 00:03:11,599
forget all of that

74
00:03:11,599 --> 00:03:15,360
we're not i repeat emphatically not

75
00:03:15,360 --> 00:03:17,599
programming a computer you need to get

76
00:03:17,599 --> 00:03:20,000
that idea out of your head we're doing

77
00:03:20,000 --> 00:03:22,319
something very very different

78
00:03:22,319 --> 00:03:24,879
we're going to be designing hardware in

79
00:03:24,879 --> 00:03:27,200
what is called a hardware description

80
00:03:27,200 --> 00:03:29,040
language hdl

81
00:03:29,040 --> 00:03:30,720
and the type of hardware description

82
00:03:30,720 --> 00:03:33,920
language we're using is called verilog

83
00:03:33,920 --> 00:03:36,640
do not approach writing in an hdl with

84
00:03:36,640 --> 00:03:38,319
the same mindset you use when

85
00:03:38,319 --> 00:03:39,599
programming

86
00:03:39,599 --> 00:03:42,640
and hdl describes the function and

87
00:03:42,640 --> 00:03:45,040
interconnection of digital logic

88
00:03:45,040 --> 00:03:46,400
components

89
00:03:46,400 --> 00:03:48,879
it's not an interpreted or executed

90
00:03:48,879 --> 00:03:54,080
language like uh pastel or python or c

91
00:03:54,080 --> 00:03:56,319
you must unlearn what you've learned

92
00:03:56,319 --> 00:04:01,079
because we're not writing programs

93
00:04:01,439 --> 00:04:03,439
let's talk about the difference between

94
00:04:03,439 --> 00:04:05,840
those two concepts

95
00:04:05,840 --> 00:04:08,319
if we were writing code in c for an

96
00:04:08,319 --> 00:04:11,280
arduino to blink an led we would use a

97
00:04:11,280 --> 00:04:14,799
loop that included delays in this case

98
00:04:14,799 --> 00:04:16,560
you can see here this is the code for

99
00:04:16,560 --> 00:04:20,399
the blink sketchup for an arduino we

100
00:04:20,399 --> 00:04:22,960
have some setup that runs and as we as

101
00:04:22,960 --> 00:04:24,639
the power comes on to the board and

102
00:04:24,639 --> 00:04:26,960
initializes things but then it jumps

103
00:04:26,960 --> 00:04:29,600
into this loop where we do a digital

104
00:04:29,600 --> 00:04:33,440
right to turn the led high or turn it on

105
00:04:33,440 --> 00:04:34,880
we then delay for a thousand

106
00:04:34,880 --> 00:04:36,240
milliseconds

107
00:04:36,240 --> 00:04:38,880
then we write again to turn the led off

108
00:04:38,880 --> 00:04:40,479
and we delay for another thousand

109
00:04:40,479 --> 00:04:42,240
milliseconds and then begin looping

110
00:04:42,240 --> 00:04:44,400
around again and again

111
00:04:44,400 --> 00:04:47,199
this is how you would write code in c to

112
00:04:47,199 --> 00:04:48,560
blink a light

113
00:04:48,560 --> 00:04:52,000
but we're not writing programs

114
00:04:52,000 --> 00:04:54,479
here is the same concept developed in

115
00:04:54,479 --> 00:04:55,840
verilog

116
00:04:55,840 --> 00:04:58,639
notice we're not writing loops

117
00:04:58,639 --> 00:05:01,440
we're creating actions that take place

118
00:05:01,440 --> 00:05:05,600
based on specific events in this case

119
00:05:05,600 --> 00:05:09,440
rising clock edges the clock on our

120
00:05:09,440 --> 00:05:13,039
system here runs at 100 megahertz and we

121
00:05:13,039 --> 00:05:14,400
are

122
00:05:14,400 --> 00:05:18,320
trapping on every positive clock edge of

123
00:05:18,320 --> 00:05:20,880
either the clock or the reset bus and

124
00:05:20,880 --> 00:05:24,880
we're doing things when that happens

125
00:05:24,880 --> 00:05:28,720
so for example when our board is reset

126
00:05:28,720 --> 00:05:30,479
we're going to be doing these things

127
00:05:30,479 --> 00:05:32,400
we're going to set our counter to zero

128
00:05:32,400 --> 00:05:34,639
and set our blinker value to zero as

129
00:05:34,639 --> 00:05:36,800
well that's our equivalent of the

130
00:05:36,800 --> 00:05:38,320
initialization

131
00:05:38,320 --> 00:05:42,400
in our c program for the arduino

132
00:05:42,400 --> 00:05:45,280
every time our 100 megahertz clock line

133
00:05:45,280 --> 00:05:47,520
goes high we're going to perform other

134
00:05:47,520 --> 00:05:50,159
actions

135
00:05:50,479 --> 00:05:54,479
so for example every time the clock goes

136
00:05:54,479 --> 00:05:58,000
high we increment our one second counter

137
00:05:58,000 --> 00:06:00,479
when our one second counter

138
00:06:00,479 --> 00:06:04,160
uh reaches 100 million we know a second

139
00:06:04,160 --> 00:06:06,400
has gone by because our clock runs at

140
00:06:06,400 --> 00:06:08,639
100 megahertz

141
00:06:08,639 --> 00:06:11,120
when that happens we do some very

142
00:06:11,120 --> 00:06:13,280
specific things as well

143
00:06:13,280 --> 00:06:15,680
we set our counter back to zero so we

144
00:06:15,680 --> 00:06:18,160
can begin counting the next second

145
00:06:18,160 --> 00:06:20,800
and then we set the blinker value if

146
00:06:20,800 --> 00:06:23,120
it's a one to be a zero or if it's a

147
00:06:23,120 --> 00:06:25,440
zero we set it to be a one

148
00:06:25,440 --> 00:06:28,800
this blinker register's value is tied to

149
00:06:28,800 --> 00:06:32,800
our blinky output which is then in turn

150
00:06:32,800 --> 00:06:34,880
tied to an led

151
00:06:34,880 --> 00:06:37,919
on the board

152
00:06:38,080 --> 00:06:40,560
this is very very different from the

153
00:06:40,560 --> 00:06:44,000
loop-based concept that we saw in our c

154
00:06:44,000 --> 00:06:45,840
program to blink the lights on the

155
00:06:45,840 --> 00:06:48,840
arduino

156
00:06:49,680 --> 00:06:52,800
let's talk about some of the hdl

157
00:06:52,800 --> 00:06:55,440
concepts that are evident in our blink

158
00:06:55,440 --> 00:06:57,680
module this was written for digital and

159
00:06:57,680 --> 00:06:59,759
spaces three board and it highlights

160
00:06:59,759 --> 00:07:02,160
some very important points about writing

161
00:07:02,160 --> 00:07:04,880
hdl or verilog code

162
00:07:04,880 --> 00:07:08,000
modules have inputs and outputs these

163
00:07:08,000 --> 00:07:09,840
inputs and outputs are connected to

164
00:07:09,840 --> 00:07:13,199
real-world things in this case the 100

165
00:07:13,199 --> 00:07:15,120
megahertz clock on our board and the

166
00:07:15,120 --> 00:07:18,319
reset line make up our inputs while our

167
00:07:18,319 --> 00:07:20,960
output which we call blinky is connected

168
00:07:20,960 --> 00:07:23,039
up to an led

169
00:07:23,039 --> 00:07:25,919
we don't really have variables either

170
00:07:25,919 --> 00:07:28,160
data is actually stored in registers

171
00:07:28,160 --> 00:07:31,039
which are physical digital logic

172
00:07:31,039 --> 00:07:35,280
components that exist on our board

173
00:07:35,280 --> 00:07:36,560
we perform

174
00:07:36,560 --> 00:07:39,360
actions based on events clock edges

175
00:07:39,360 --> 00:07:42,080
board resets power cycles

176
00:07:42,080 --> 00:07:44,319
even something as simple as monitoring a

177
00:07:44,319 --> 00:07:46,879
button push is performed in the context

178
00:07:46,879 --> 00:07:49,759
of a clock edge button pushes also have

179
00:07:49,759 --> 00:07:52,960
to be debounced using smaller separate

180
00:07:52,960 --> 00:07:55,360
verilog modules and we'll cover that in

181
00:07:55,360 --> 00:07:58,000
a later class but the thing to recall

182
00:07:58,000 --> 00:07:59,919
and the thing to understand is that all

183
00:07:59,919 --> 00:08:01,680
of this activity

184
00:08:01,680 --> 00:08:05,199
all of this activity occurs in parallel

185
00:08:05,199 --> 00:08:08,080
which makes fpgas in digital logic

186
00:08:08,080 --> 00:08:13,479
design incredibly powerful

187
00:08:14,319 --> 00:08:15,680
as if to

188
00:08:15,680 --> 00:08:18,560
push forth this idea that we're not

189
00:08:18,560 --> 00:08:21,919
programming and writing software here is

190
00:08:21,919 --> 00:08:24,879
our blink code implemented as

191
00:08:24,879 --> 00:08:27,680
interconnected logic dates within our

192
00:08:27,680 --> 00:08:29,039
fpga

193
00:08:29,039 --> 00:08:31,120
this is the actual

194
00:08:31,120 --> 00:08:34,080
outcome of what you would consider to be

195
00:08:34,080 --> 00:08:38,080
the compiling stamp step of our verilog

196
00:08:38,080 --> 00:08:40,640
code it creates these interconnected

197
00:08:40,640 --> 00:08:44,399
logic circuits within our fpga to the

198
00:08:44,399 --> 00:08:47,680
left hand side you can see two inputs

199
00:08:47,680 --> 00:08:50,399
our clock input and our reset line input

200
00:08:50,399 --> 00:08:53,120
to the far right we see blinky which is

201
00:08:53,120 --> 00:08:58,160
our output that will go to the led

202
00:08:58,880 --> 00:09:02,800
let's take a look at today's assignment

203
00:09:02,800 --> 00:09:04,800
as you know our semester project is

204
00:09:04,800 --> 00:09:07,040
creating a sound chip for the new curse

205
00:09:07,040 --> 00:09:08,800
about karen doll

206
00:09:08,800 --> 00:09:10,480
before we can make her say that

207
00:09:10,480 --> 00:09:12,480
trademark phrase that has made her

208
00:09:12,480 --> 00:09:13,519
famous

209
00:09:13,519 --> 00:09:16,480
let me talk to your manager we first

210
00:09:16,480 --> 00:09:18,880
need to get her making noise

211
00:09:18,880 --> 00:09:22,000
remember we have to walk before we run

212
00:09:22,000 --> 00:09:24,080
we're going to start by using verilog to

213
00:09:24,080 --> 00:09:26,720
create a simple square wave generation

214
00:09:26,720 --> 00:09:28,000
module

215
00:09:28,000 --> 00:09:31,600
the idea will be to divide 125 megahertz

216
00:09:31,600 --> 00:09:34,560
clock frequency of the fpga we're using

217
00:09:34,560 --> 00:09:37,279
for this design to provide whatever

218
00:09:37,279 --> 00:09:39,440
frequency we'll need to create karen's

219
00:09:39,440 --> 00:09:40,800
voice

220
00:09:40,800 --> 00:09:43,839
in our blink module we divided the basis

221
00:09:43,839 --> 00:09:47,360
3's 100 megahertz clock frequency down

222
00:09:47,360 --> 00:09:50,720
to create a 2 hertz square wave to blink

223
00:09:50,720 --> 00:09:52,800
the led

224
00:09:52,800 --> 00:09:53,680
now

225
00:09:53,680 --> 00:09:56,800
in our assignment the required frequency

226
00:09:56,800 --> 00:09:59,839
will be specified as a 32-bit inter

227
00:09:59,839 --> 00:10:03,040
input register called freak

228
00:10:03,040 --> 00:10:05,279
the value is going to be passed in as

229
00:10:05,279 --> 00:10:08,560
six digits specifying a frequency

230
00:10:08,560 --> 00:10:10,560
of

231
00:10:10,560 --> 00:10:11,760
four

232
00:10:11,760 --> 00:10:14,959
digits of actual numerics and two

233
00:10:14,959 --> 00:10:17,839
decimal digits for example if we passed

234
00:10:17,839 --> 00:10:20,240
in the value two three four five six

235
00:10:20,240 --> 00:10:26,279
seven we'll be specifying uh a 2

236
00:10:26,279 --> 00:10:29,360
345.67 hertz square wave

237
00:10:29,360 --> 00:10:31,600
you should then output that square wave

238
00:10:31,600 --> 00:10:34,079
alternating between one and zero at the

239
00:10:34,079 --> 00:10:39,359
desired frequency to the wave out output

240
00:10:40,399 --> 00:10:41,839
remember

241
00:10:41,839 --> 00:10:44,320
a square wave should have a half duty

242
00:10:44,320 --> 00:10:47,279
cycle meaning that it's high or one for

243
00:10:47,279 --> 00:10:50,480
half the cycle and low or zero for the

244
00:10:50,480 --> 00:10:52,160
other half

245
00:10:52,160 --> 00:10:54,959
our led in the blink module was on for

246
00:10:54,959 --> 00:10:57,440
one second then it was off for one

247
00:10:57,440 --> 00:11:00,320
second it was being driven by a two

248
00:11:00,320 --> 00:11:02,160
hertz square wave

249
00:11:02,160 --> 00:11:05,040
not a one hertz square wave this is

250
00:11:05,040 --> 00:11:06,640
critically important because if you

251
00:11:06,640 --> 00:11:08,480
don't take this into account you'll be

252
00:11:08,480 --> 00:11:10,640
creating the wrong frequency

253
00:11:10,640 --> 00:11:13,120
to create a one hertz square wave in

254
00:11:13,120 --> 00:11:15,279
blink we would count to

255
00:11:15,279 --> 00:11:19,200
50 million not to 100 million

256
00:11:19,200 --> 00:11:21,120
to be as accurate as possible when

257
00:11:21,120 --> 00:11:22,800
creating your square wave at a

258
00:11:22,800 --> 00:11:24,880
particular frequency you're going to be

259
00:11:24,880 --> 00:11:26,880
required to do some mathematical

260
00:11:26,880 --> 00:11:30,000
rounding mathematical rounding is when

261
00:11:30,000 --> 00:11:33,040
if something has a 0.5

262
00:11:33,040 --> 00:11:33,920
or

263
00:11:33,920 --> 00:11:37,519
greater we round up if the decimal is

264
00:11:37,519 --> 00:11:41,279
0.5 is below 0.5 we round down

265
00:11:41,279 --> 00:11:43,040
you're all smart students who have a lot

266
00:11:43,040 --> 00:11:44,640
of programming experience under your

267
00:11:44,640 --> 00:11:46,399
belt so i'm sure you'll figure it all

268
00:11:46,399 --> 00:11:49,600
out but just in case i may have slipped

269
00:11:49,600 --> 00:11:52,800
a little hint into my introduction on

270
00:11:52,800 --> 00:11:56,399
the homework website

271
00:11:56,399 --> 00:11:58,760
thank you for attending today's

272
00:11:58,760 --> 00:12:01,519
eecs 302 lecture

273
00:12:01,519 --> 00:12:04,720
uh tomorrow's lecture day five will be

274
00:12:04,720 --> 00:12:07,120
on pulse with modulation as we move

275
00:12:07,120 --> 00:12:10,480
forward in making cursing out karen say

276
00:12:10,480 --> 00:12:12,399
her trademark phrase

277
00:12:12,399 --> 00:12:15,519
have a wonderful day and remember

278
00:12:15,519 --> 00:12:18,720
verilog is very user-friendly

279
00:12:18,720 --> 00:12:23,320
it's just very choosy about its friends

280
00:12:26,720 --> 00:12:28,800
you

