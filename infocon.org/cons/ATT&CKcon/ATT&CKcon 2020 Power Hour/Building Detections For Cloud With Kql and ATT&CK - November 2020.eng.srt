1
00:00:00,080 --> 00:00:02,440
- Our next speaker, I think
is gonna be taking the prize

2
00:00:02,440 --> 00:00:04,163
for farthest away today.

3
00:00:04,163 --> 00:00:07,006
We have Nitya Garg from LinkedIn.

4
00:00:07,006 --> 00:00:08,467
- Alright, good morning, good afternoon,

5
00:00:08,467 --> 00:00:10,570
good evening to all of you.

6
00:00:10,570 --> 00:00:13,650
My name is Nitya and I'm
from Bangalore, India.

7
00:00:13,650 --> 00:00:16,680
Today I will be presenting
on building detections

8
00:00:16,680 --> 00:00:19,147
for cloud, with KQL and ATT&CK.

9
00:00:19,990 --> 00:00:22,919
Before I start, a brief
introduction about me.

10
00:00:22,920 --> 00:00:26,140
I have over 7 years of
experience in cybersecurity,

11
00:00:26,140 --> 00:00:29,750
most of which has been focused
on analyzing intrusions,

12
00:00:29,750 --> 00:00:33,410
responding to security incidents
and building detections.

13
00:00:33,410 --> 00:00:36,559
Currently I'm working as
information security engineer

14
00:00:36,559 --> 00:00:39,629
for threat mitigation and
incident response team

15
00:00:39,630 --> 00:00:41,040
at LinkedIn.

16
00:00:41,040 --> 00:00:44,240
I have a blog that I use as a
platform to share my thoughts,

17
00:00:44,240 --> 00:00:48,010
learnings and experiences
on InfoSec and on life.

18
00:00:48,010 --> 00:00:50,510
I can be found on Twitter
by handles, nitya__garg.

19
00:00:54,070 --> 00:00:55,420
Alright, let's get started.

20
00:00:58,420 --> 00:01:00,670
Our agenda for today's
presentation includes,

21
00:01:00,670 --> 00:01:02,580
introducing MITRE ATT&CK for cloud.

22
00:01:02,580 --> 00:01:04,580
What is new in MITRE ATT&CK for cloud

23
00:01:04,580 --> 00:01:05,850
and how we can leverage it

24
00:01:05,850 --> 00:01:08,259
for building detections in cloud?

25
00:01:08,260 --> 00:01:11,030
I will then talk about the
overall high level process

26
00:01:11,030 --> 00:01:13,130
for developing a detection.

27
00:01:13,130 --> 00:01:14,899
As an example, I will discuss

28
00:01:14,900 --> 00:01:17,190
about the cloud-based technique T1528

29
00:01:17,190 --> 00:01:21,090
which is Steal Application Access Token.

30
00:01:21,090 --> 00:01:23,710
I will be covering what
the ATT&CK technique is,

31
00:01:23,710 --> 00:01:26,529
what log sources and
events can be monitored.

32
00:01:26,530 --> 00:01:29,140
And how to write the detection query

33
00:01:29,140 --> 00:01:31,363
for this ATT&CK technique?

34
00:01:36,300 --> 00:01:38,327
I would like to begin with a statement,

35
00:01:38,327 --> 00:01:41,270
attackers have to succeed at every stage,

36
00:01:41,270 --> 00:01:44,063
defenders have to catch them at any one.

37
00:01:45,090 --> 00:01:47,460
Well the more popular opinion,

38
00:01:47,460 --> 00:01:50,039
all the say is something
contradictory to it

39
00:01:50,040 --> 00:01:52,520
that defenders have to
be right every time.

40
00:01:52,520 --> 00:01:55,006
Well, attackers have to be right once.

41
00:01:55,007 --> 00:01:56,680
And the reason many believe so

42
00:01:56,680 --> 00:01:59,720
is because it takes one unpacked system,

43
00:01:59,720 --> 00:02:02,857
a one negligent user or one (indistinct)

44
00:02:02,857 --> 00:02:05,823
of a foreign attacker to get
a foothold inside the network.

45
00:02:06,820 --> 00:02:09,560
But if they're familiar
with the attack life cycle,

46
00:02:09,560 --> 00:02:12,670
you know that from the very
early reconnaissance stage,

47
00:02:12,670 --> 00:02:15,750
to the final data exfiltration stage

48
00:02:15,750 --> 00:02:18,610
and attacker has to not
only succeed at every stage

49
00:02:18,610 --> 00:02:21,830
but they have to also cover
their tracks all the time.

50
00:02:21,830 --> 00:02:25,180
And that opens multiple
windows for a defender

51
00:02:25,180 --> 00:02:26,230
to detect the attack.

52
00:02:28,180 --> 00:02:30,810
This approach is also called
defense in depth, which is

53
00:02:30,810 --> 00:02:34,630
like leveraging multiple
redundant defensive measures.

54
00:02:34,630 --> 00:02:37,430
And while the strategy
has been a core component

55
00:02:37,430 --> 00:02:40,490
of enterprise security for some time now,

56
00:02:40,490 --> 00:02:42,680
it is equally applicable and efficient

57
00:02:42,680 --> 00:02:44,700
for cloud security as well.

58
00:02:44,700 --> 00:02:48,380
But as we know, cloud technology
is relatively new domain

59
00:02:48,380 --> 00:02:49,940
which is still growing and evolving.

60
00:02:49,940 --> 00:02:53,570
So how do we build a
resilient detection strategy

61
00:02:53,570 --> 00:02:55,980
for cloud while still learning about it?

62
00:02:55,980 --> 00:02:57,173
Where do we even start?

63
00:03:01,438 --> 00:03:04,530
Well MITRE ATT&CK has
made a job a little easy

64
00:03:04,530 --> 00:03:07,230
in finding answers to these questions.

65
00:03:07,230 --> 00:03:09,769
So what MITRE has done,
it has created a database

66
00:03:09,770 --> 00:03:12,350
of all the known ATT&CK
techniques for cloud.

67
00:03:12,350 --> 00:03:14,308
And these techniques are grouped under 10

68
00:03:14,308 --> 00:03:18,100
different tactics or
post exploitation stages.

69
00:03:18,100 --> 00:03:20,440
This database is constantly updated

70
00:03:20,440 --> 00:03:22,090
with many renown individuals

71
00:03:22,090 --> 00:03:24,503
and organizations contributing to get it.

72
00:03:25,586 --> 00:03:28,520
ATT&CK framework can be leveraged
for threat intelligence,

73
00:03:28,520 --> 00:03:31,960
detection and analytics,
adversary simulation, assessment

74
00:03:31,960 --> 00:03:34,720
and engineering, but for the
scope of this presentation,

75
00:03:34,720 --> 00:03:37,670
I will be discussing on how to use ATT&CK

76
00:03:37,670 --> 00:03:39,762
for building detections in cloud.

77
00:03:41,680 --> 00:03:43,370
But let us first understand

78
00:03:43,370 --> 00:03:45,413
the detection development process.

79
00:03:48,980 --> 00:03:51,810
So the first step when
developing a detection is

80
00:03:51,810 --> 00:03:54,270
to select the ATT&CK
technique for which you want

81
00:03:54,270 --> 00:03:55,653
to build a detection for.

82
00:03:56,510 --> 00:03:58,590
Now it can be that you're already familiar

83
00:03:58,590 --> 00:04:00,430
with that specific ATT&CK technique,

84
00:04:00,430 --> 00:04:02,790
what is it and how it works?

85
00:04:02,790 --> 00:04:05,079
And in that case you can skip the step two

86
00:04:05,080 --> 00:04:06,750
and straight away go to step three.

87
00:04:06,750 --> 00:04:09,240
But many of times it
happens that we may not be

88
00:04:09,240 --> 00:04:11,990
very well aware of it, and
that is common understandable,

89
00:04:11,990 --> 00:04:15,473
ATT&CK database is huge and
no one knows everything.

90
00:04:16,450 --> 00:04:18,490
And that is when the step two

91
00:04:18,490 --> 00:04:20,579
about researching the ATT&CK technique

92
00:04:20,579 --> 00:04:22,409
becomes very important.

93
00:04:22,410 --> 00:04:24,410
Now, before we can go and start building

94
00:04:24,410 --> 00:04:27,300
the detection itself, we
need to do our homework

95
00:04:27,300 --> 00:04:29,610
like study and research
about that technique,

96
00:04:29,610 --> 00:04:32,450
how that ATT&CK works
and what is its relevance

97
00:04:32,450 --> 00:04:34,320
at your organization.

98
00:04:34,320 --> 00:04:37,520
Is the ATT&CK technique
applicable to your environment,

99
00:04:37,520 --> 00:04:39,712
and if yes then how it can be exploited.

100
00:04:42,000 --> 00:04:43,870
So ATT&CK gives a detailed description

101
00:04:43,870 --> 00:04:44,950
of the ATT&CK technique,

102
00:04:44,950 --> 00:04:48,510
and it also gives multiple
references to other links

103
00:04:48,510 --> 00:04:51,130
and resources that can be
helpful when researching

104
00:04:51,130 --> 00:04:52,313
about that technique.

105
00:04:54,550 --> 00:04:57,430
The next step is to
identify the data sources

106
00:04:57,430 --> 00:04:59,210
that you need to monitor and leverage

107
00:04:59,210 --> 00:05:01,150
for building that detection.

108
00:05:01,150 --> 00:05:03,929
Now ATT&CK list on all
the potential data sources

109
00:05:03,930 --> 00:05:06,687
that are applicable for
that ATT&CK technique.

110
00:05:06,687 --> 00:05:09,800
After the identification
of the data sources,

111
00:05:09,800 --> 00:05:13,550
you may have to check the
availability in your environment.

112
00:05:13,550 --> 00:05:16,220
If they're available,
you can go to step four,

113
00:05:16,220 --> 00:05:18,490
but in case the required logs are missing,

114
00:05:18,490 --> 00:05:21,490
that can be a blocker in your
detection development process.

115
00:05:22,480 --> 00:05:24,670
But let us say that you
have the required data,

116
00:05:24,670 --> 00:05:26,050
so it's available.

117
00:05:26,050 --> 00:05:27,430
So next what?

118
00:05:27,430 --> 00:05:30,980
Now before you start writing
the actual detection query,

119
00:05:30,980 --> 00:05:35,320
try to visualize and hypothesize
the detection scenario,

120
00:05:35,320 --> 00:05:37,469
how that ATT&CK technique can be exploited

121
00:05:37,470 --> 00:05:39,640
in your environment and
what are the events you need

122
00:05:39,640 --> 00:05:41,203
to monitor to detect it.

123
00:05:42,830 --> 00:05:45,250
And once the detection
scenario picture is clear

124
00:05:45,250 --> 00:05:48,580
in your head or even you
have written down in a paper,

125
00:05:48,580 --> 00:05:52,260
review the logs for those
identify data sources

126
00:05:52,260 --> 00:05:54,450
to know and understand what events

127
00:05:54,450 --> 00:05:57,426
and fields can be monitored and logged.

128
00:05:57,427 --> 00:05:59,010
And then comes the main step

129
00:05:59,010 --> 00:06:01,113
of writing the detection query itself.

130
00:06:03,710 --> 00:06:06,680
And before you deploy the
detection query to production,

131
00:06:06,680 --> 00:06:09,100
try to revisit the detection query.

132
00:06:09,100 --> 00:06:11,920
It is rare that a detection written,

133
00:06:11,920 --> 00:06:15,720
in the first attempt itself
is a high efficacy detection.

134
00:06:15,720 --> 00:06:18,600
So fine-tuning the detection
to reduce the number

135
00:06:18,600 --> 00:06:21,943
of potential false positive
is always a good practice.

136
00:06:27,750 --> 00:06:30,260
Let us now see how to
implement this process

137
00:06:30,260 --> 00:06:32,300
for writing the detection query for one

138
00:06:32,300 --> 00:06:34,993
of the MITRE ATT&CK techniques for cloud.

139
00:06:34,993 --> 00:06:36,960
The cloud-based technique
that I have chosen

140
00:06:36,960 --> 00:06:40,823
for this presentation is Steal
Application Access Token.

141
00:06:42,622 --> 00:06:45,200
And mostly Steal Application Access Token,

142
00:06:45,200 --> 00:06:48,330
and they use them in place
of login credentials.

143
00:06:48,330 --> 00:06:50,070
So application access token,

144
00:06:50,070 --> 00:06:52,830
they are used to make
authorized API requests

145
00:06:52,830 --> 00:06:56,180
on behalf of the user and
they are used the formally way

146
00:06:56,180 --> 00:06:59,463
to access resources in
cloud-based applications.

147
00:07:00,810 --> 00:07:04,300
So in this type of attack,
attackers try to trick the users

148
00:07:04,300 --> 00:07:07,310
into granting a malicious
application access

149
00:07:07,310 --> 00:07:10,117
to sensitive data and other resources.

150
00:07:11,625 --> 00:07:15,290
Or this is one, commonly
implemented framework

151
00:07:15,290 --> 00:07:18,740
that issues token to users
for access to systems.

152
00:07:18,740 --> 00:07:22,880
So if in your organization you
have implemented any commonly

153
00:07:22,880 --> 00:07:26,890
used OAuth service like Azure
active directory or on Okta.

154
00:07:26,890 --> 00:07:29,770
It is very likely that this
ATT&CK technique is relevant

155
00:07:29,770 --> 00:07:31,530
to your organization as well.

156
00:07:33,350 --> 00:07:35,600
The data sources that
are identified by ATT&CK

157
00:07:35,600 --> 00:07:38,560
for this technique includes
Azure activity logs

158
00:07:38,560 --> 00:07:40,173
and OAuth audit logs.

159
00:07:42,880 --> 00:07:44,650
So we learned about ATT&CK technique

160
00:07:44,650 --> 00:07:46,739
and defined the data sources

161
00:07:46,740 --> 00:07:49,527
and the next step now
is to build detection.

162
00:07:54,670 --> 00:07:57,060
So to get some detection ideas, we go back

163
00:07:57,060 --> 00:07:59,940
to ATT&CK and read what it
says about the detection.

164
00:07:59,940 --> 00:08:03,170
And this is what they have
mentioned on their website

165
00:08:03,170 --> 00:08:05,210
for this particular ATT&CK technique.

166
00:08:05,210 --> 00:08:08,849
Security analysts can filter
for apps that are authorized

167
00:08:08,850 --> 00:08:11,250
by a small number of users,

168
00:08:11,250 --> 00:08:13,970
apps requesting high risk permissions

169
00:08:13,970 --> 00:08:15,670
and permissions that are in incongruos

170
00:08:15,670 --> 00:08:17,670
with the apps purpose.

171
00:08:17,670 --> 00:08:21,040
Admins to identify
privilege escalation actions

172
00:08:21,040 --> 00:08:24,160
such as role creations
or policy modifications

173
00:08:24,160 --> 00:08:25,840
which could be the actions performed

174
00:08:25,840 --> 00:08:27,816
after the initial access.

175
00:08:32,520 --> 00:08:34,219
To simplify ATT&CK suggestions,

176
00:08:34,220 --> 00:08:37,040
I've created bullet point out of these.

177
00:08:37,039 --> 00:08:39,530
So the first detection
idea that we can pull

178
00:08:39,530 --> 00:08:42,370
from what ATT&CKs is about the detection,

179
00:08:42,370 --> 00:08:45,300
is monitor for high
severity permissions granted

180
00:08:45,300 --> 00:08:46,880
to an application.

181
00:08:46,880 --> 00:08:48,793
So any application requesting

182
00:08:48,793 --> 00:08:51,740
for some high severity
permissions like reading

183
00:08:51,740 --> 00:08:55,180
and sending emails, writing
to mailbox settings,

184
00:08:55,180 --> 00:08:56,849
writing all users profiles.

185
00:08:56,850 --> 00:09:00,190
That can be a red flag and
it should be looked up for.

186
00:09:00,190 --> 00:09:03,810
Second, monitor for applications
sending permission requests

187
00:09:03,810 --> 00:09:05,439
for too many users.

188
00:09:05,440 --> 00:09:08,910
So if the same application is
sending permission requests

189
00:09:08,910 --> 00:09:11,650
to many users, it could
be trying to compromise

190
00:09:11,650 --> 00:09:13,980
as many accounts as possible.

191
00:09:13,980 --> 00:09:15,810
So you may want to verify that

192
00:09:15,810 --> 00:09:20,113
if it doesn't authorize action
or it's a potential abuse.

193
00:09:22,080 --> 00:09:24,930
Third, monitor for
privilege escalation actions

194
00:09:24,930 --> 00:09:28,199
such as role creations
or policy modification.

195
00:09:28,200 --> 00:09:30,060
Now after the initial compromise,

196
00:09:30,060 --> 00:09:33,160
attackers usually try
to escalate privilege

197
00:09:33,160 --> 00:09:37,250
in order to search for more
sensitive and valuable data.

198
00:09:37,250 --> 00:09:41,123
So monitoring for such actions
can be additional detection.

199
00:09:47,830 --> 00:09:49,960
So now we have some detection ideas

200
00:09:49,960 --> 00:09:51,380
on how to build a detection

201
00:09:51,380 --> 00:09:54,650
for potential OAuth access token abuse.

202
00:09:54,650 --> 00:09:58,040
The next step is to monitor the
logs for those events sites.

203
00:09:58,040 --> 00:10:00,670
Now, depending on which OAuth service

204
00:10:00,670 --> 00:10:02,780
you have implemented in your organization,

205
00:10:02,780 --> 00:10:05,023
you should review the audit logs for same.

206
00:10:05,970 --> 00:10:08,780
Here, I have listed down the event types

207
00:10:08,780 --> 00:10:11,510
for the Azure active directory.

208
00:10:11,510 --> 00:10:14,633
So the first event type is
the add OAuth2PermissionGrant,

209
00:10:16,010 --> 00:10:19,482
which is generated in the
usage of OAuth2PermissionGrant.

210
00:10:19,482 --> 00:10:21,720
OAuth2PermissionGrant is a resource type

211
00:10:21,720 --> 00:10:24,130
that represents the permissions granted

212
00:10:24,130 --> 00:10:26,387
to an OAuth application.

213
00:10:26,387 --> 00:10:28,979
Second is add delegated permission grants,

214
00:10:28,980 --> 00:10:31,220
delegated permissions
are those permissions

215
00:10:31,220 --> 00:10:33,410
which are delegated to an application

216
00:10:33,410 --> 00:10:36,319
from the authorization of a signed in user

217
00:10:36,320 --> 00:10:37,793
or the resource owner.

218
00:10:39,110 --> 00:10:41,310
Third is consent to applications.

219
00:10:41,310 --> 00:10:43,579
This event type is generated
whenever a user consents

220
00:10:43,580 --> 00:10:47,320
or grants permission to an application.

221
00:10:47,320 --> 00:10:49,179
And the last two event types are related

222
00:10:49,179 --> 00:10:51,180
to service principals.

223
00:10:51,180 --> 00:10:53,640
Service principals are
same as service accounts

224
00:10:53,640 --> 00:10:55,683
but they're called principals in Azure.

225
00:10:57,400 --> 00:10:59,790
So add service principal
event type is logged

226
00:10:59,790 --> 00:11:01,969
whenever a new service
principal is created,

227
00:11:01,970 --> 00:11:04,763
and add app role assignment is logged when

228
00:11:04,763 --> 00:11:07,740
a new service principal is
assigned an application tool.

229
00:11:14,810 --> 00:11:17,607
So this is a detection
query within KQL to detect

230
00:11:17,607 --> 00:11:21,738
when a high risk permission
is granted to an application.

231
00:11:21,738 --> 00:11:24,710
Check your stance for
Kusto query language.

232
00:11:24,710 --> 00:11:26,620
Kusto query language is a simple,

233
00:11:26,620 --> 00:11:29,210
yet powerful language to query structured,

234
00:11:29,210 --> 00:11:31,830
semi-structured and unstructured data.

235
00:11:31,830 --> 00:11:34,110
The language is very
expressive and it is very easy

236
00:11:34,110 --> 00:11:36,543
to read and understand the query intent.

237
00:11:37,700 --> 00:11:40,190
So what do we do in this detection query?

238
00:11:40,190 --> 00:11:42,810
We define a list of high-risk permissions

239
00:11:42,810 --> 00:11:45,969
which are not usually
requested for or granted.

240
00:11:45,970 --> 00:11:48,070
And that list has been given a name

241
00:11:48,070 --> 00:11:50,150
as high risk permissions,

242
00:11:50,150 --> 00:11:52,480
we spent in some sensitive permissions

243
00:11:52,480 --> 00:11:55,640
like user reads writes all and similar.

244
00:11:55,640 --> 00:11:58,920
The next statement in the
query, it defines the table name

245
00:11:58,920 --> 00:12:01,892
in which we're interested
in searching the events for.

246
00:12:03,050 --> 00:12:05,410
So as I mentioned before,
it should be the audit logs

247
00:12:05,410 --> 00:12:07,640
of the OAuth service
which you have implemented

248
00:12:07,640 --> 00:12:09,100
in your organization.

249
00:12:09,100 --> 00:12:10,780
Here it is audit logs that stands

250
00:12:10,780 --> 00:12:13,653
for Azure active directory audit logs.

251
00:12:16,330 --> 00:12:19,160
So we then check for
the event type can send

252
00:12:19,160 --> 00:12:20,819
to applications.

253
00:12:20,820 --> 00:12:23,020
So this event type is generated

254
00:12:23,020 --> 00:12:26,872
whenever a user grants
permission to an application.

255
00:12:28,320 --> 00:12:30,590
And the next few steps
in the detection grade,

256
00:12:30,590 --> 00:12:34,050
they extract some important
fields like application name,

257
00:12:34,050 --> 00:12:37,290
application ID, user
name and the IP address

258
00:12:37,290 --> 00:12:39,880
who granted permission to the application.

259
00:12:39,880 --> 00:12:42,263
And all of these fields are very important

260
00:12:42,263 --> 00:12:45,430
for the security analysts
or the incident responders

261
00:12:45,430 --> 00:12:47,870
when they are investigating the outlook.

262
00:12:47,870 --> 00:12:50,080
But the main condition
here which is checked

263
00:12:50,080 --> 00:12:51,930
in this detection query is to look

264
00:12:51,930 --> 00:12:54,349
for the value in the scope field.

265
00:12:54,350 --> 00:12:57,480
So the scope field contains
speak permission name,

266
00:12:57,480 --> 00:13:00,390
and if that permission name matches with

267
00:13:00,390 --> 00:13:03,040
what we have defined in our list

268
00:13:03,040 --> 00:13:04,719
for the high risk permission,

269
00:13:04,720 --> 00:13:08,280
this detection query will
show the results for that.

270
00:13:20,360 --> 00:13:23,198
So the image shows here
one sample query results

271
00:13:23,198 --> 00:13:25,829
that were pulled by running
the KQL detection querry

272
00:13:25,830 --> 00:13:28,360
which I just discussed in the last slide.

273
00:13:28,360 --> 00:13:30,050
So as we can see from the image,

274
00:13:30,050 --> 00:13:32,910
the application has been given
some high risk permissions

275
00:13:32,910 --> 00:13:37,339
like user read-write, privileged
access results and similar

276
00:13:37,340 --> 00:13:41,253
which runs an application
to do sensitive operations.

277
00:13:48,100 --> 00:13:50,710
So we learned today how
to leverage MITRE ATT&CK

278
00:13:50,710 --> 00:13:52,770
for building detections in clouds,

279
00:13:52,770 --> 00:13:56,050
what are the high level steps
for developing a detection.

280
00:13:56,050 --> 00:13:57,979
We also learned about the
cloud-based technique,

281
00:13:57,980 --> 00:13:59,940
Steal Application Access Token

282
00:13:59,940 --> 00:14:02,660
and how to write the detection query.

283
00:14:02,660 --> 00:14:05,372
And that brings me to the
end of this presentation.

284
00:14:07,400 --> 00:14:08,540
Thank you so much,

285
00:14:08,540 --> 00:14:09,829
thank you to all the (indistinct)

286
00:14:09,830 --> 00:14:13,840
and to the MITRE ATT&CK team
which did a wonderful job.

287
00:14:13,840 --> 00:14:14,673
- Thank you.

288
00:14:14,673 --> 00:14:15,980
And that was an excellent
presentation as well

289
00:14:15,980 --> 00:14:18,420
as we knew we had to deal
with time difference.

290
00:14:18,420 --> 00:14:20,040
So definitely appreciate
you staying up so late

291
00:14:20,040 --> 00:14:22,380
and sharing all this great knowledge.

292
00:14:22,380 --> 00:14:24,516
- (indistinct) mean no worries.

293
00:14:24,516 --> 00:14:25,469
- Oh, like you said,

294
00:14:25,470 --> 00:14:26,950
I think one of them really powerful things

295
00:14:26,950 --> 00:14:30,367
you said is that, attackers
have to succeed on every stage

296
00:14:30,367 --> 00:14:32,839
but defenders like you said,
we just can find one stage

297
00:14:32,840 --> 00:14:35,510
and find one clue and run that down.

298
00:14:35,510 --> 00:14:37,960
But as you said, that takes a
lot of homework as a defender,

299
00:14:37,960 --> 00:14:42,350
you can't just swing for the
fences and hope for the best.

300
00:14:42,350 --> 00:14:44,923
So what advice would
you give to people for,

301
00:14:45,810 --> 00:14:49,250
like I said I think your KQL
query example was perfect

302
00:14:49,250 --> 00:14:51,650
but you know that involves
so much knowledge,

303
00:14:51,650 --> 00:14:53,410
like you have to know
what data is available.

304
00:14:53,410 --> 00:14:55,530
What inform or what kind
of advice would you give

305
00:14:55,530 --> 00:14:57,160
to people who are just starting with cloud

306
00:14:57,160 --> 00:14:59,209
and like figuring out what
are those data sources

307
00:14:59,210 --> 00:15:00,560
and how do you access them?

308
00:15:03,400 --> 00:15:04,233
- Sure.

309
00:15:04,233 --> 00:15:07,829
So, I will listed down
that, ATT&CK helps us there

310
00:15:07,830 --> 00:15:10,890
like it will show on that
ATT&CK technique page itself,

311
00:15:10,890 --> 00:15:13,610
it will show you what are the data sources

312
00:15:13,610 --> 00:15:15,040
that you can leverage for,

313
00:15:15,040 --> 00:15:17,620
you know monitoring that
particular technique.

314
00:15:17,620 --> 00:15:20,227
So you just have to check
that whether those logs

315
00:15:20,227 --> 00:15:23,250
are available in your
environment and if that technique

316
00:15:23,250 --> 00:15:26,160
is applicable to be explored
in your environment.

317
00:15:26,160 --> 00:15:28,250
So for example, for this talk

318
00:15:28,250 --> 00:15:30,990
I talked about the Steal
Application Access Token.

319
00:15:30,990 --> 00:15:34,493
So it says that you
need to have audit logs.

320
00:15:35,413 --> 00:15:37,140
Whichever service you have implemented

321
00:15:37,140 --> 00:15:39,650
in your environment like Okta, Google,

322
00:15:39,650 --> 00:15:40,819
Azure active directory,

323
00:15:40,820 --> 00:15:44,080
so you may want to check that
you have audit logs available

324
00:15:44,080 --> 00:15:45,400
for them and how you can leverage.

325
00:15:45,400 --> 00:15:47,959
So I think starting with the attack itself

326
00:15:47,960 --> 00:15:49,670
can help you there.

327
00:15:49,670 --> 00:15:50,502
- That makes sense,

328
00:15:50,503 --> 00:15:52,150
probably helps us well
prioritize, like you said.

329
00:15:52,150 --> 00:15:54,790
I think your your selection
of a technique was spot on

330
00:15:54,790 --> 00:15:56,349
because that's when we
actually see very often

331
00:15:56,350 --> 00:15:58,310
with like the tokens are so vital

332
00:15:58,310 --> 00:15:59,709
in these cloud environments.

333
00:16:00,870 --> 00:16:02,580
But you know, final question I had is

334
00:16:02,580 --> 00:16:05,930
I think you kinda
displayed the power of KQL,

335
00:16:05,930 --> 00:16:07,640
do you have any advice
or resources for people

336
00:16:07,640 --> 00:16:09,030
that are interested in like learning more,

337
00:16:09,030 --> 00:16:10,230
like how did you learn KQL?

338
00:16:10,230 --> 00:16:11,940
Was is it something that
you just kinda get on

339
00:16:11,940 --> 00:16:12,773
and start playing with?

340
00:16:12,773 --> 00:16:14,350
Are there any great
resources that you can point

341
00:16:14,350 --> 00:16:15,943
to or kinda share with others?

342
00:16:16,780 --> 00:16:17,613
- Yeah, sure.

343
00:16:17,613 --> 00:16:21,710
So Microsoft has done a very
good documentation on KQL.

344
00:16:21,710 --> 00:16:26,710
So, it has given all the
proper known syntax available

345
00:16:27,430 --> 00:16:30,569
for all the fields and whatever.

346
00:16:30,570 --> 00:16:33,900
It has capabilities, so you
can start from there itself

347
00:16:33,900 --> 00:16:35,900
and then there's a very
good source available

348
00:16:35,900 --> 00:16:38,730
on Pluralsight for it,
so maybe that's something

349
00:16:38,730 --> 00:16:40,560
that you can check out.

350
00:16:40,560 --> 00:16:43,760
But yeah, a good starting
point will be to start

351
00:16:43,760 --> 00:16:45,720
from the Microsoft documentation itself,

352
00:16:45,720 --> 00:16:47,220
they've done a good job there.

353
00:16:47,220 --> 00:16:48,053
- Yep.

354
00:16:48,053 --> 00:16:49,180
I think a couple of people
are already dropping those

355
00:16:49,180 --> 00:16:50,790
in slack so thank you for sharing

356
00:16:50,790 --> 00:16:52,420
that great insight and great knowledge.

357
00:16:52,420 --> 00:16:53,252
- Sure.
- And with that,

358
00:16:53,253 --> 00:16:54,500
I'm gonna turn it back over to Adam.

359
00:16:54,500 --> 00:16:55,450
- [Adam] Thank you.

