1
00:00:01,130 --> 00:00:03,589
- [Female Host] Please join
me in welcoming Tony Lambert.

2
00:00:03,589 --> 00:00:04,691
(applause)

3
00:00:04,691 --> 00:00:08,417
- Thank you.

4
00:00:09,990 --> 00:00:13,490
All right, so this talk started off

5
00:00:13,490 --> 00:00:16,270
with a nebulous,

6
00:00:16,270 --> 00:00:18,550
cloudy mission from one of the managers

7
00:00:18,550 --> 00:00:20,530
at Red Canary, Joe Mulls.

8
00:00:20,530 --> 00:00:22,000
If you've ever met Joe,

9
00:00:22,000 --> 00:00:24,310
he has this propensity to talk

10
00:00:24,310 --> 00:00:25,590
with his hands waving all the time.

11
00:00:25,590 --> 00:00:28,540
When talks at a full tilt
he looks like a windmill.

12
00:00:28,540 --> 00:00:30,650
And when he talked to us,

13
00:00:30,650 --> 00:00:32,347
he said, "Hey, we have
a lot of people asking

14
00:00:32,347 --> 00:00:35,467
"about Linux coverage,
we want to expand things,

15
00:00:35,467 --> 00:00:37,530
"We want to make things better."

16
00:00:37,530 --> 00:00:39,871
And as we did more research,

17
00:00:39,871 --> 00:00:44,330
we started looking at what
public research existed,

18
00:00:44,330 --> 00:00:46,550
and there's not a whole
lot of public research

19
00:00:46,550 --> 00:00:48,890
except for like a few
very notable instances

20
00:00:48,890 --> 00:00:51,440
where people talk about their
data server Linux systems

21
00:00:51,440 --> 00:00:52,750
being breached.

22
00:00:52,750 --> 00:00:55,530
Everybody and their
brother has an IOT device

23
00:00:55,530 --> 00:00:57,070
that's been breached however.

24
00:00:57,070 --> 00:00:59,780
And we can glean some things from that.

25
00:00:59,780 --> 00:01:02,245
So we really dove into figuring out

26
00:01:02,245 --> 00:01:05,250
some of the payloads that bad guys use,

27
00:01:05,250 --> 00:01:06,600
some of the tools that are used

28
00:01:06,600 --> 00:01:09,512
and how to do process
monitoring around this.

29
00:01:10,730 --> 00:01:13,270
So, a little bit about me, my name's Tony,

30
00:01:13,270 --> 00:01:15,107
I work at Red Canary.

31
00:01:15,108 --> 00:01:18,230
Most of my day job is finding
out what bad guys use,

32
00:01:18,230 --> 00:01:20,780
how they use it and how to detect it.

33
00:01:20,780 --> 00:01:24,070
Recovering systems admin, I
used to work in the higher ed

34
00:01:24,070 --> 00:01:26,250
and state government sort of areas,

35
00:01:26,250 --> 00:01:27,610
so it was interesting.

36
00:01:27,610 --> 00:01:29,420
And it's an entirely different environment

37
00:01:29,420 --> 00:01:32,050
than Red Canary is and I love the change.

38
00:01:32,050 --> 00:01:33,380
I used to teach on the side

39
00:01:33,380 --> 00:01:34,479
and I still love to teach,

40
00:01:34,480 --> 00:01:36,280
that's why I'm here doing this.

41
00:01:36,280 --> 00:01:38,040
This is also kind of why I'm attracted

42
00:01:38,040 --> 00:01:38,920
to threat intelligence.

43
00:01:38,920 --> 00:01:41,170
Because when you start
looking at intelligence,

44
00:01:41,170 --> 00:01:45,000
it's lifelong education,
just by another name.

45
00:01:45,000 --> 00:01:46,120
When you really think about it,

46
00:01:46,120 --> 00:01:48,850
it's like when we have
intelligence-driven security,

47
00:01:48,850 --> 00:01:50,490
it just means we're educating ourselves

48
00:01:50,490 --> 00:01:52,300
before we defend.

49
00:01:52,300 --> 00:01:53,133
So.

50
00:01:55,030 --> 00:01:57,400
I wanted to start off
talking a little bit about

51
00:01:57,400 --> 00:02:00,230
what an actual alertable technique is.

52
00:02:00,230 --> 00:02:03,500
We deal a lot with alerts in
various parts of our lives.

53
00:02:03,500 --> 00:02:05,870
Alerts aren't necessarily
just something that happens

54
00:02:05,870 --> 00:02:07,390
with security products,

55
00:02:07,390 --> 00:02:09,360
they happen with your
smoke detector at home,

56
00:02:09,360 --> 00:02:12,000
they happen in all sorts
of areas of your life.

57
00:02:12,000 --> 00:02:14,230
You may have a car alarm,
something like that.

58
00:02:14,230 --> 00:02:16,730
And I want to show what the differences

59
00:02:16,730 --> 00:02:19,010
between an alert from
your security product

60
00:02:19,010 --> 00:02:20,899
an alert in your daily life

61
00:02:20,900 --> 00:02:24,410
and how we can draw some of that context

62
00:02:24,410 --> 00:02:26,160
from the daily life that
lets you immediately know

63
00:02:26,160 --> 00:02:29,220
something is wrong and put
it in your security products.

64
00:02:29,220 --> 00:02:32,060
Figure out how to make
you alerts not suck.

65
00:02:32,060 --> 00:02:34,330
We wanna cover a little
bit of decision criteria,

66
00:02:34,330 --> 00:02:35,963
how do you make a good alert?

67
00:02:37,860 --> 00:02:41,030
If you wanna go at it from a
systematic repeatable process,

68
00:02:41,030 --> 00:02:43,490
how can you grade some of these things?

69
00:02:43,490 --> 00:02:45,320
There's no matrices involved with this,

70
00:02:45,320 --> 00:02:46,410
there's no spread sheets,

71
00:02:46,410 --> 00:02:49,609
so it's significantly less structured

72
00:02:49,610 --> 00:02:51,200
than some of the previous talks,

73
00:02:51,200 --> 00:02:54,079
but we're gonna talk a little
bit about it anecdotally.

74
00:02:54,080 --> 00:02:57,174
And we're gonna cover
some actual hard, fast

75
00:02:57,174 --> 00:02:59,600
to the weeds analytics

76
00:02:59,600 --> 00:03:02,150
that we have actually
implemented in our organization

77
00:03:02,150 --> 00:03:04,980
that have been relatively
high fidelity for us,

78
00:03:04,980 --> 00:03:08,780
some that haven't and some
that absolutely sucked

79
00:03:08,780 --> 00:03:10,760
when we tried them out.

80
00:03:10,760 --> 00:03:12,810
Hopefully this is gonna
help you a little bit.

81
00:03:12,810 --> 00:03:14,460
This is stuff that's been derived

82
00:03:14,460 --> 00:03:17,330
from adversary payloads, raw data.

83
00:03:17,330 --> 00:03:18,920
It's something that's not necessarily

84
00:03:18,920 --> 00:03:20,380
from a synthesized report.

85
00:03:20,380 --> 00:03:22,493
This is stuff that is seen in the wild.

86
00:03:24,170 --> 00:03:27,089
To start off, we have to
define what an alert is.

87
00:03:27,090 --> 00:03:27,923
At its core,

88
00:03:27,923 --> 00:03:30,460
an alert is going to be
some sort of notification

89
00:03:30,460 --> 00:03:33,780
that an abnormal condition has
occurred in the environment.

90
00:03:33,780 --> 00:03:37,120
If you have a car alarm, it
mean somebody's breaking in.

91
00:03:37,120 --> 00:03:38,300
If you have a smoke detector,

92
00:03:38,300 --> 00:03:40,760
this means there's smoke
somewhere in the house.

93
00:03:40,760 --> 00:03:43,239
Something is going on that
you don't want to go on

94
00:03:43,240 --> 00:03:45,313
and you need to fix it really quickly.

95
00:03:46,720 --> 00:03:47,990
The idea behind an alert though

96
00:03:47,990 --> 00:03:51,070
is for you to understand
what's going on and act,

97
00:03:51,070 --> 00:03:53,350
you have to have some greater context.

98
00:03:53,350 --> 00:03:55,640
You have to know why the alert has fired,

99
00:03:55,640 --> 00:03:56,880
you have to know what condition

100
00:03:56,880 --> 00:03:58,790
that alert is telling you about,

101
00:03:58,790 --> 00:04:01,560
and you need to know
how to act afterwards.

102
00:04:01,560 --> 00:04:04,260
So, for example, with a smoke detector,

103
00:04:04,260 --> 00:04:07,070
the context for this alert,

104
00:04:07,070 --> 00:04:08,570
there is smoke in your bedroom,

105
00:04:08,570 --> 00:04:10,459
you need to get out fast.

106
00:04:10,460 --> 00:04:13,090
If you had security products that gave you

107
00:04:13,090 --> 00:04:15,715
that kind of immediacy,
that kind of context,

108
00:04:15,715 --> 00:04:17,850
and we've all had those smoke detectors

109
00:04:17,850 --> 00:04:19,660
that go off and there's no smoke,

110
00:04:19,660 --> 00:04:21,050
stuff like that.

111
00:04:21,050 --> 00:04:22,230
False positives.

112
00:04:22,230 --> 00:04:25,220
The more you can provide that context in,

113
00:04:25,220 --> 00:04:27,283
the happier your analysts are gonna be.

114
00:04:28,290 --> 00:04:31,813
With anything, your alerts
require care and feeding.

115
00:04:32,740 --> 00:04:36,360
We try to look at alerts
as a diagnostic process

116
00:04:36,360 --> 00:04:38,930
of something that is going
wrong in your environment.

117
00:04:38,930 --> 00:04:40,680
When you go to the doctor,

118
00:04:40,680 --> 00:04:44,130
some of your care requires
some care and feeding.

119
00:04:44,130 --> 00:04:47,180
You may have an individualized
care plan for you.

120
00:04:47,180 --> 00:04:49,110
This is going to be the same
thing with your alerting.

121
00:04:49,110 --> 00:04:50,040
This is going to be the same thing

122
00:04:50,040 --> 00:04:51,920
with your security program.

123
00:04:51,920 --> 00:04:54,020
Any security program that
you implement is going to be

124
00:04:54,020 --> 00:04:56,530
a little bit different from your friends.

125
00:04:56,530 --> 00:04:58,609
The best security program
is one you can stick to,

126
00:04:58,610 --> 00:05:00,100
like an exercise plan.

127
00:05:00,100 --> 00:05:02,120
So, as long as you can keep with it,

128
00:05:02,120 --> 00:05:03,660
as long as you can keep tuning,

129
00:05:03,660 --> 00:05:05,410
you're going to get better at this.

130
00:05:07,300 --> 00:05:09,480
What does the alert work flow look like?

131
00:05:09,480 --> 00:05:12,070
Most of the time we have a
condition that's occurred

132
00:05:12,070 --> 00:05:14,880
and the alert will fire soon afterwards.

133
00:05:14,880 --> 00:05:16,810
Just because the condition has occurred,

134
00:05:16,810 --> 00:05:19,500
doesn't necessarily guarantee
the alert will fire.

135
00:05:19,500 --> 00:05:22,180
This is a really good thing to focus on

136
00:05:22,180 --> 00:05:24,531
when you look at sensor placement.

137
00:05:24,531 --> 00:05:27,570
If a fire happens in a house
and there's no smoke detector,

138
00:05:27,570 --> 00:05:28,620
there's no alert.

139
00:05:28,620 --> 00:05:30,010
It's the same thing in your network

140
00:05:30,010 --> 00:05:31,349
or on your end points.

141
00:05:31,350 --> 00:05:33,700
If an activity happens on an end point

142
00:05:33,700 --> 00:05:35,729
or across a network and there's no sensor,

143
00:05:35,730 --> 00:05:36,900
you won't get an alert.

144
00:05:36,900 --> 00:05:40,719
So, to move on down the workflow
we have to have a sensor

145
00:05:40,720 --> 00:05:42,777
somewhere between two and three.

146
00:05:42,777 --> 00:05:45,530
And if the alert fires,
defender investigates,

147
00:05:45,530 --> 00:05:47,809
your analyst comes in for the day,

148
00:05:47,810 --> 00:05:49,510
they check their email in Outlook,

149
00:05:49,510 --> 00:05:52,530
they grab their coffee and
then finally they dial in

150
00:05:52,530 --> 00:05:54,630
and they start looking at
their high priority alerts

151
00:05:54,630 --> 00:05:55,463
in the SIM.

152
00:05:56,956 --> 00:05:59,680
Eventually the alert has to go somewhere.

153
00:05:59,680 --> 00:06:02,460
There's an escalate and there's a hide.

154
00:06:02,460 --> 00:06:05,210
Your escalation may be to
a threat intelligence team,

155
00:06:05,210 --> 00:06:07,950
your escalation may be to
an instant response team,

156
00:06:07,951 --> 00:06:09,680
that alert has to go somewhere

157
00:06:09,680 --> 00:06:12,230
or else it's dropped in a bottomless hole.

158
00:06:12,230 --> 00:06:13,340
If you wanna hide things,

159
00:06:13,340 --> 00:06:15,780
you have to document false positives.

160
00:06:15,780 --> 00:06:17,169
And every time you have a hide,

161
00:06:17,170 --> 00:06:20,520
you should learn something
new about your organization.

162
00:06:20,520 --> 00:06:22,060
We talk a lot about threat hunting,

163
00:06:22,060 --> 00:06:24,440
that there's no such thing
as an unsuccessful hunt.

164
00:06:24,440 --> 00:06:27,090
Because every time you hunt
you learn something new,

165
00:06:27,090 --> 00:06:28,400
And you should have documentation.

166
00:06:28,400 --> 00:06:30,580
The same thing should be
true with your alerts.

167
00:06:30,580 --> 00:06:33,890
Every time you have a false positive alert

168
00:06:33,890 --> 00:06:36,300
it doesn't mean that it
was an unsuccessful alert,

169
00:06:36,300 --> 00:06:38,000
just means you know something new.

170
00:06:39,720 --> 00:06:42,030
There is some problems with alerts.

171
00:06:42,030 --> 00:06:46,510
And I have to say my wife
helped me proof read my slides

172
00:06:46,510 --> 00:06:47,670
and she's a wonderful person

173
00:06:47,670 --> 00:06:50,010
and she panicked when
she saw this picture.

174
00:06:50,010 --> 00:06:53,640
Because she's not used to having
more than 10 unread emails

175
00:06:53,640 --> 00:06:55,610
in her inbox at a time.

176
00:06:55,610 --> 00:06:57,480
If you buy a security product,

177
00:06:57,480 --> 00:06:59,571
most of the time, if you
leave it at its default,

178
00:06:59,571 --> 00:07:01,830
there's a lot of context missing.

179
00:07:01,830 --> 00:07:04,659
When you buy something
from security vendor X,

180
00:07:04,660 --> 00:07:08,330
vendor X has no idea what's
going on in your environment.

181
00:07:08,330 --> 00:07:11,159
You may have a special snowflake product

182
00:07:11,160 --> 00:07:13,430
that is only in the auto industry.

183
00:07:13,430 --> 00:07:15,390
You may have something in
the department of energy

184
00:07:15,390 --> 00:07:18,640
that has never seen the
light of day anywhere else.

185
00:07:18,640 --> 00:07:22,320
So that may cause tons and
tons of false positives.

186
00:07:22,320 --> 00:07:24,530
Vendors will err on high volume by default

187
00:07:24,530 --> 00:07:26,799
because they don't want
you to miss something,

188
00:07:26,800 --> 00:07:28,803
they just tell you everything.

189
00:07:29,920 --> 00:07:31,070
For you to make things better,

190
00:07:31,070 --> 00:07:32,830
you have to give a little bit of context.

191
00:07:32,830 --> 00:07:35,890
You have to show analyst
why it's important,

192
00:07:35,890 --> 00:07:36,979
what to do afterwards,

193
00:07:36,980 --> 00:07:40,163
and provide guidance for
this escalation process.

194
00:07:41,480 --> 00:07:42,670
So as we set down the path

195
00:07:42,670 --> 00:07:44,350
of trying to make alerts better,

196
00:07:44,350 --> 00:07:48,280
we have to take some time
to do a systematic process

197
00:07:48,280 --> 00:07:50,619
of what actually makes an alert better.

198
00:07:50,620 --> 00:07:52,840
What do we qualify as a good alert?

199
00:07:52,840 --> 00:07:55,929
Theoretically, we want an
alert to take very little time

200
00:07:55,930 --> 00:07:57,330
to investigate.

201
00:07:57,330 --> 00:07:59,550
We want that alert to have enough context

202
00:07:59,550 --> 00:08:01,890
that that analyst can come up,

203
00:08:01,890 --> 00:08:04,000
have that alert right
in front of their face,

204
00:08:04,000 --> 00:08:06,367
they can say "all right, thing
number one, thing number two,

205
00:08:06,367 --> 00:08:08,527
"thing number three has happened,

206
00:08:08,527 --> 00:08:10,357
"we don't have to do a
lot of investigation,

207
00:08:10,357 --> 00:08:12,457
"we can just follow back to the origin,

208
00:08:12,457 --> 00:08:14,997
"and then mark up all this information,

209
00:08:14,997 --> 00:08:16,437
"give it to our instant responders,

210
00:08:16,437 --> 00:08:19,090
"and they can go towards remediation."

211
00:08:19,090 --> 00:08:21,729
the quicker they can do
that investigation process

212
00:08:21,730 --> 00:08:23,370
the better the alert is going to be.

213
00:08:23,370 --> 00:08:25,580
You can go on to more alerts afterwards,

214
00:08:25,580 --> 00:08:28,116
or take a break afterwards.

215
00:08:28,116 --> 00:08:31,340
We want alerts to be fairly significant

216
00:08:31,340 --> 00:08:33,089
in terms of abnormality.

217
00:08:33,090 --> 00:08:35,117
We don't want an alert that says,

218
00:08:35,116 --> 00:08:38,986
"Hey, somebody has logged
off a Windows computer

219
00:08:38,986 --> 00:08:41,469
"somewhere at like 5 o'clock."

220
00:08:41,470 --> 00:08:44,440
That's an alert, it's
not a significant alert.

221
00:08:44,440 --> 00:08:46,470
What the less significant alerts do

222
00:08:46,470 --> 00:08:49,970
is it trains your
personnel to ignore alerts.

223
00:08:49,970 --> 00:08:51,890
That's not something that you wanna do.

224
00:08:51,890 --> 00:08:54,250
How would you feel every time

225
00:08:54,250 --> 00:08:56,860
you cook dinner and your
smoke detector goes off?

226
00:08:56,860 --> 00:08:58,590
Sooner or later you're
going to learn to ignore

227
00:08:58,590 --> 00:09:01,150
the smoke detector, and there's
a real fire in the house.

228
00:09:01,150 --> 00:09:04,000
It's the same thing with security alerts.

229
00:09:04,000 --> 00:09:07,670
We want to have a low time to respond

230
00:09:07,670 --> 00:09:09,160
for any sort of alerts.

231
00:09:09,160 --> 00:09:12,270
We want things to be quick to investigate

232
00:09:12,270 --> 00:09:14,270
and quick to remediate.

233
00:09:14,270 --> 00:09:16,199
The more information you
can have in this alert

234
00:09:16,200 --> 00:09:20,290
to lead your instant responds
to inform your remediation

235
00:09:20,290 --> 00:09:21,860
the better it's going to be,

236
00:09:21,860 --> 00:09:23,900
the happier your IR is going to be.

237
00:09:23,900 --> 00:09:25,810
The happier your analysts are going to be.

238
00:09:25,810 --> 00:09:28,109
Everybody's just happy,
it's a win all around.

239
00:09:29,860 --> 00:09:32,730
So we wanted to take a look at some alerts

240
00:09:32,730 --> 00:09:35,310
for the Linux side that don't suck.

241
00:09:35,310 --> 00:09:37,162
They worked really well for us.

242
00:09:38,170 --> 00:09:39,760
Tell you about the ones
that didn't work well

243
00:09:39,760 --> 00:09:41,010
on towards the end.

244
00:09:41,010 --> 00:09:42,480
All of these have been, like I said,

245
00:09:42,480 --> 00:09:45,723
derived from real life adversary tools.

246
00:09:46,810 --> 00:09:48,729
My wife has been actually
kind of entertained

247
00:09:48,730 --> 00:09:51,350
by me snake-handling payloads at home.

248
00:09:51,350 --> 00:09:52,730
Figuring out what bad guys use

249
00:09:52,730 --> 00:09:53,970
and looking at the malware.

250
00:09:53,970 --> 00:09:57,200
So it's been an interesting
experience with this.

251
00:09:57,200 --> 00:10:00,030
The first one I wanted
to touch is timestomping.

252
00:10:00,030 --> 00:10:01,560
If you're not familiar with timestomping,

253
00:10:01,560 --> 00:10:04,900
this is going to be a practice
of changing timestamps

254
00:10:04,900 --> 00:10:07,760
on a system to hide adversary activity.

255
00:10:07,760 --> 00:10:10,380
This happens in opportunistic attacks,

256
00:10:10,380 --> 00:10:13,140
this happens in targeted attacks,

257
00:10:13,140 --> 00:10:15,520
anywhere that a bad guy can drop a file,

258
00:10:15,520 --> 00:10:17,720
they're going to wanna try
to shield that it's there

259
00:10:17,720 --> 00:10:20,363
or slow defenders down
in forensic analysis.

260
00:10:21,260 --> 00:10:24,580
Most commonly in some of
these opportunistic scripts,

261
00:10:24,580 --> 00:10:26,260
we see the touch command,

262
00:10:26,260 --> 00:10:28,270
if you're not familiar with Linux side,

263
00:10:28,270 --> 00:10:30,870
touch will be used to modify timestamps

264
00:10:30,870 --> 00:10:32,090
or create empty files.

265
00:10:32,090 --> 00:10:35,410
Most of the time, we'll
see touch with an -acmr

266
00:10:35,410 --> 00:10:36,980
command line flags.

267
00:10:36,980 --> 00:10:39,670
What this does is it's
a change access time,

268
00:10:39,670 --> 00:10:42,020
create time, modification time

269
00:10:42,020 --> 00:10:44,000
and we're using a reference file,

270
00:10:44,000 --> 00:10:45,980
we're taking the timestamps from one file

271
00:10:45,980 --> 00:10:48,330
and planting it over on another.

272
00:10:48,330 --> 00:10:52,120
We have to think of what's the
bad guy's intent with this?

273
00:10:52,120 --> 00:10:54,890
They wanna make whatever
file they're timestomping

274
00:10:54,890 --> 00:10:57,030
look like it was there at
the time of installation

275
00:10:57,030 --> 00:10:58,523
alongside the NSH.

276
00:11:00,000 --> 00:11:03,290
Most of the time when we see
time stamps being modified

277
00:11:03,290 --> 00:11:05,689
this is going to be something
from an installation,

278
00:11:05,690 --> 00:11:07,770
something from normal system management.

279
00:11:07,770 --> 00:11:10,140
Most of time, with
normal system management,

280
00:11:10,140 --> 00:11:13,060
you're not going to see
all of the timestamps

281
00:11:13,060 --> 00:11:14,800
being modified at the same time,

282
00:11:14,800 --> 00:11:17,020
and you're probably not going
to see all of the timestamps

283
00:11:17,020 --> 00:11:18,460
being modified at the same time

284
00:11:18,460 --> 00:11:21,650
from timestamps of a file that
is already been originally

285
00:11:21,650 --> 00:11:23,300
installed on a system.

286
00:11:23,300 --> 00:11:25,630
This is going to be something
that is really suspicious

287
00:11:25,630 --> 00:11:26,939
right off the bat.

288
00:11:26,940 --> 00:11:30,610
It gives your analyst some
quick investigation time.

289
00:11:30,610 --> 00:11:32,710
They can look for what
issued this command,

290
00:11:32,710 --> 00:11:34,220
they can look for the origin of the file

291
00:11:34,220 --> 00:11:35,360
that's being timestomped.

292
00:11:35,360 --> 00:11:37,480
They immediately have
two investigative leads

293
00:11:37,480 --> 00:11:38,900
that they can run to ground.

294
00:11:38,900 --> 00:11:41,300
And you've also informed your IR team,

295
00:11:41,301 --> 00:11:42,450
we definitely know

296
00:11:42,450 --> 00:11:44,240
that this file is
probably going to be evil,

297
00:11:44,240 --> 00:11:45,810
we're going to have to get rid of it,

298
00:11:45,810 --> 00:11:48,642
and they get a head start on things.

299
00:11:50,920 --> 00:11:53,870
The next one is diving a little
bit into process injection.

300
00:11:54,800 --> 00:11:57,510
This is notoriously kind of
weird on the Windows side,

301
00:11:57,510 --> 00:12:00,450
it's still just as
weird on the Linux side.

302
00:12:00,450 --> 00:12:03,360
Some of the techniques are odd to spot,

303
00:12:03,360 --> 00:12:05,730
like ptrace, some of those.

304
00:12:05,730 --> 00:12:07,350
For the one we're covering here,

305
00:12:07,350 --> 00:12:09,410
we're going to cover process injection

306
00:12:09,410 --> 00:12:11,209
using LD_PRELOAD.

307
00:12:11,210 --> 00:12:14,320
If you haven't floated around
Unix circles for a while,

308
00:12:14,320 --> 00:12:16,660
LD_PRELOAD was this
wonderful functionality

309
00:12:16,660 --> 00:12:19,500
from the the glibc library

310
00:12:19,500 --> 00:12:23,500
that let's you specify
a shared object library

311
00:12:23,500 --> 00:12:25,560
the Linux equivalent of a DLL,

312
00:12:25,560 --> 00:12:28,380
and inject that DLL into any process

313
00:12:28,380 --> 00:12:30,860
that is running for a
particular user context.

314
00:12:30,860 --> 00:12:34,730
So, let's imagine, that
you have an SSH process.

315
00:12:34,730 --> 00:12:38,800
You want your adversary's
library that steals credentials

316
00:12:38,800 --> 00:12:40,652
to load into this process.

317
00:12:43,319 --> 00:12:46,699
You want PS to not return
back malicious processes

318
00:12:46,700 --> 00:12:49,450
whenever you get started
investigating things.

319
00:12:49,450 --> 00:12:52,870
You can preload a malicious
library into these processes

320
00:12:52,870 --> 00:12:54,990
to manipulate output, steal credentials,

321
00:12:54,990 --> 00:12:56,540
do something else.

322
00:12:56,540 --> 00:12:58,890
So most of the time, this
happens on the user side,

323
00:12:58,890 --> 00:13:01,015
but it can happen at the system level.

324
00:13:01,015 --> 00:13:03,030
If you have tools in your environment

325
00:13:03,030 --> 00:13:05,339
that lets you audit command line flags

326
00:13:05,340 --> 00:13:06,800
or that especially at the

327
00:13:07,870 --> 00:13:09,720
environment variable level,

328
00:13:09,720 --> 00:13:11,770
this is going to be really
awesome if you can look for

329
00:13:11,770 --> 00:13:14,960
LD_PRELOAD in your specified
environment variables.

330
00:13:14,960 --> 00:13:16,270
There are very few times

331
00:13:16,270 --> 00:13:18,180
that you're probably
going to be using this

332
00:13:18,180 --> 00:13:19,189
in your environment.

333
00:13:19,190 --> 00:13:22,780
The only time that I've
seen in our dataset

334
00:13:22,780 --> 00:13:24,310
where it's being used legitimately

335
00:13:24,310 --> 00:13:25,359
is for folks that are using

336
00:13:25,360 --> 00:13:27,654
very specific monitoring software.

337
00:13:27,654 --> 00:13:29,630
And if you're using that
monitoring software,

338
00:13:29,630 --> 00:13:30,840
you're probably going to know.

339
00:13:30,840 --> 00:13:32,090
Your systems admins are going to know,

340
00:13:32,090 --> 00:13:35,020
this is going to be a
documented exception.

341
00:13:35,020 --> 00:13:36,600
The thing that is much less common

342
00:13:36,600 --> 00:13:40,440
is going to be modification
of this ld.so.preload file.

343
00:13:40,440 --> 00:13:43,690
This let's you define
preloads for the entire system

344
00:13:43,690 --> 00:13:46,948
that the root user will execute a process

345
00:13:46,948 --> 00:13:48,837
and it'll preload in.

346
00:13:48,837 --> 00:13:52,610
Your apache user may specify a process

347
00:13:52,610 --> 00:13:54,090
and that preload comes in.

348
00:13:54,090 --> 00:13:56,110
You end up defining
something that gets preloaded

349
00:13:56,110 --> 00:13:58,210
for the entire system.

350
00:13:58,210 --> 00:13:59,600
The really cool thing about this

351
00:13:59,600 --> 00:14:01,870
is it's really quick to respond to.

352
00:14:01,870 --> 00:14:04,010
You can delete the ld.so.preload file

353
00:14:04,010 --> 00:14:05,770
without harming the rest of your system,

354
00:14:05,770 --> 00:14:06,760
most of the time.

355
00:14:06,760 --> 00:14:08,500
If you have one of the
monitoring solutions

356
00:14:08,500 --> 00:14:09,920
you may not wanna do that.

357
00:14:09,920 --> 00:14:13,020
You can typically unset, undefine
your environment variable

358
00:14:13,020 --> 00:14:15,650
and it'll help clean this up very quickly.

359
00:14:15,650 --> 00:14:17,760
And you can go and tackle

360
00:14:17,760 --> 00:14:21,720
whatever library has been
specified inside that variable.

361
00:14:21,720 --> 00:14:23,324
It's very quick to respond to.

362
00:14:23,324 --> 00:14:25,890
The really cool thing,
this is used by rootkits

363
00:14:25,890 --> 00:14:28,010
this is used by user space rootkits

364
00:14:28,010 --> 00:14:29,439
to hide activity all the time,

365
00:14:29,440 --> 00:14:32,270
hide network connections,
hide process activity.

366
00:14:32,270 --> 00:14:35,740
By doing just a little
bit of quick deletion,

367
00:14:35,740 --> 00:14:37,320
unset environment variables,

368
00:14:37,320 --> 00:14:39,610
you can undo the
functionality of a rootkit

369
00:14:39,610 --> 00:14:41,300
that may be hiding processes

370
00:14:41,300 --> 00:14:43,500
and go after the real
threat on your system.

371
00:14:45,200 --> 00:14:48,850
And the final one for
the ones that don't suck.

372
00:14:48,850 --> 00:14:51,160
I wanted to talk a little
bit about masquerading.

373
00:14:51,160 --> 00:14:54,469
Masquerading, we talk a lot
more about on the Windows side

374
00:14:54,470 --> 00:14:58,000
because every process
likes to hide its SVC host.

375
00:14:58,000 --> 00:15:00,610
On the Linux side, we see
some of the same things.

376
00:15:00,610 --> 00:15:03,920
If you dissect some of the opportunistic,

377
00:15:03,920 --> 00:15:06,390
crypto mining, resource hijacking scripts

378
00:15:06,390 --> 00:15:09,310
from the past, you'll see
a lot of process names

379
00:15:09,310 --> 00:15:13,152
that look like kworkerds,
kthreadds, kthrottle, kaudit.

380
00:15:14,030 --> 00:15:15,240
Things like this.

381
00:15:15,240 --> 00:15:17,010
These are intended to confuse defenders

382
00:15:17,010 --> 00:15:19,860
and make them think that they're
looking at a kernel thread.

383
00:15:19,860 --> 00:15:21,270
When you're looking at a Linux system,

384
00:15:21,270 --> 00:15:23,890
when you do ps and look
for all the processes,

385
00:15:23,890 --> 00:15:26,410
chances are you've seen
some weird-looking processes

386
00:15:26,410 --> 00:15:29,160
that start with K and
have brackets around them.

387
00:15:29,160 --> 00:15:32,510
And those are processes that
correspond with Kernel threads.

388
00:15:32,510 --> 00:15:35,540
They don't have binary
images that back them discs,

389
00:15:35,540 --> 00:15:36,990
they don't have a path,

390
00:15:36,990 --> 00:15:40,210
they don't have a valid
MD5 hash, things like that.

391
00:15:40,210 --> 00:15:43,180
So whenever you do see
a process named kworker,

392
00:15:43,180 --> 00:15:45,650
whenever you do see one that's
named after a kernel thread,

393
00:15:45,650 --> 00:15:48,360
or has the name of a
kernel thread inside it,

394
00:15:48,360 --> 00:15:51,600
and it's represented in
something that has a path,

395
00:15:51,600 --> 00:15:53,230
especially temporary directory,

396
00:15:53,230 --> 00:15:54,063
this is going to be something

397
00:15:54,063 --> 00:15:55,319
that is immediately suspicious,

398
00:15:55,320 --> 00:15:57,940
immediately should fire an alert

399
00:15:57,940 --> 00:15:59,720
and investigate for your crew.

400
00:15:59,720 --> 00:16:00,970
This is going to be quick to investigate,

401
00:16:00,970 --> 00:16:03,210
you just find what has dropped that file,

402
00:16:03,210 --> 00:16:05,500
you find if you have the right tooling,

403
00:16:05,500 --> 00:16:08,380
you can go back and figure
out what processes executed

404
00:16:08,380 --> 00:16:09,213
around that time,

405
00:16:09,213 --> 00:16:11,089
what files were dropped around that time.

406
00:16:11,090 --> 00:16:13,483
And run it to ground from there.

407
00:16:14,670 --> 00:16:16,853
You may have noticed a trend so far.

408
00:16:19,230 --> 00:16:23,003
Which tactic have all of
these analytics fallen into?

409
00:16:26,100 --> 00:16:27,980
Yeah, I heard "evasion" all right.

410
00:16:27,980 --> 00:16:29,890
So, defense evasion.

411
00:16:29,890 --> 00:16:33,560
We've typically seen with
various public research

412
00:16:33,560 --> 00:16:35,489
and payloads that attackers will follow

413
00:16:35,490 --> 00:16:38,010
kind of a specific methodology.

414
00:16:38,010 --> 00:16:40,670
They'll compromise a web app,
they'll compromise a database,

415
00:16:40,670 --> 00:16:43,020
something that is a
public-facing application,

416
00:16:43,020 --> 00:16:46,760
use cURL or wget to pull down a payload

417
00:16:46,760 --> 00:16:49,125
and then execute that payload
immediately afterwards.

418
00:16:49,125 --> 00:16:51,770
In Windowsland, we call
this living off the land.

419
00:16:51,770 --> 00:16:54,790
Because they're using built-in
tools to the operating system

420
00:16:54,790 --> 00:16:57,319
to download and operate their exploits.

421
00:16:57,320 --> 00:17:00,820
With any sort of living
off the land opportunity

422
00:17:00,820 --> 00:17:02,290
for an adversary,

423
00:17:02,290 --> 00:17:04,490
we have to assume that their capabilities

424
00:17:04,490 --> 00:17:06,490
are the same as your system's admins.

425
00:17:06,490 --> 00:17:07,790
We have to assume that they're the same

426
00:17:07,790 --> 00:17:09,089
as your desktop admins.

427
00:17:09,089 --> 00:17:11,869
What is going to be the
telling difference here

428
00:17:11,869 --> 00:17:14,189
is that we have to figure out

429
00:17:14,190 --> 00:17:17,076
what the adversary's intent is.

430
00:17:17,076 --> 00:17:20,250
The most functional analytics for us

431
00:17:20,250 --> 00:17:22,099
had been the ones that show intent.

432
00:17:22,099 --> 00:17:24,879
Masquerading shows really clear intent.

433
00:17:24,880 --> 00:17:26,630
There's no reason a kernel
thread should be living

434
00:17:26,630 --> 00:17:28,070
in a temporary directory.

435
00:17:28,069 --> 00:17:29,500
This is definitely going to be evil

436
00:17:29,500 --> 00:17:31,440
and we can track it down a lot better.

437
00:17:31,440 --> 00:17:34,370
We're going to see this trend continue on.

438
00:17:34,370 --> 00:17:37,729
Here are the analytics that
we can kind of make work.

439
00:17:37,730 --> 00:17:39,450
They start off a little bit noisy,

440
00:17:39,450 --> 00:17:40,830
but as you tune them in your environment

441
00:17:40,830 --> 00:17:42,750
they're going to get a lot better.

442
00:17:42,750 --> 00:17:44,950
Remote file copy, this is
going to be where an attacker

443
00:17:44,950 --> 00:17:48,437
tries to download and execute their tools,

444
00:17:48,437 --> 00:17:51,550
most of the time using a cURL
command going to pastebin

445
00:17:51,550 --> 00:17:53,139
is going to be evil.

446
00:17:53,140 --> 00:17:54,970
If you have a business case

447
00:17:54,970 --> 00:17:56,490
where this is legitimate
in your environment

448
00:17:56,490 --> 00:17:57,510
please contact me,

449
00:17:57,510 --> 00:17:59,060
I will want to know.
(all laughing)

450
00:17:59,060 --> 00:18:00,540
And we can work it out from there.

451
00:18:00,540 --> 00:18:02,340
We can find if there's a better way.

452
00:18:06,546 --> 00:18:07,620
And so that is probably going to lead

453
00:18:07,620 --> 00:18:09,090
to a high fidelity alert.

454
00:18:09,090 --> 00:18:11,929
What is less high fidelity
is going to be something like

455
00:18:11,930 --> 00:18:15,170
cURL or wget reaching out
to a random IP address

456
00:18:15,170 --> 00:18:17,902
to download a Mirai
variant or some other tool

457
00:18:17,902 --> 00:18:21,250
that is going to infect an IOT system.

458
00:18:21,250 --> 00:18:23,170
What you'll have to do is
you'll have to figure out

459
00:18:23,170 --> 00:18:26,110
what IP address is, what
scopes are usually talked to

460
00:18:26,110 --> 00:18:28,709
by your systems, and then
start alerting on the things

461
00:18:28,710 --> 00:18:30,760
that are outside those scopes.

462
00:18:30,760 --> 00:18:32,960
So if you look for wget

463
00:18:32,960 --> 00:18:36,320
and an IP address that's
outside your scope of management

464
00:18:36,320 --> 00:18:38,820
that's something that can turn
into a high fidelity alert

465
00:18:38,820 --> 00:18:40,520
depending on your environment.

466
00:18:40,520 --> 00:18:42,180
If you manage a large IP space,

467
00:18:42,180 --> 00:18:45,223
I'm very sorry, that's going to get rough.

468
00:18:46,260 --> 00:18:48,220
The next one is going
to be remote services

469
00:18:48,220 --> 00:18:49,610
for lateral movement.

470
00:18:49,610 --> 00:18:53,389
This is an actual example
of what I believe rock

471
00:18:53,390 --> 00:18:54,270
or another threat actor

472
00:18:54,270 --> 00:18:56,570
that's done opportunistic crypto currency,

473
00:18:56,570 --> 00:18:57,950
resource hijacking,

474
00:18:57,950 --> 00:19:01,010
what they do to try to
move laterally on a system.

475
00:19:01,010 --> 00:19:03,710
If you've ever done
key-based authentication

476
00:19:03,710 --> 00:19:08,300
and configuration for Linux
systems or Unix systems,

477
00:19:08,300 --> 00:19:12,850
you'll typically see that
there's an authorized host file

478
00:19:12,850 --> 00:19:14,810
and there's going to be
all your good key stuff

479
00:19:14,810 --> 00:19:16,040
that goes with it.

480
00:19:16,040 --> 00:19:17,899
What these opportunistic scripts will do

481
00:19:17,900 --> 00:19:20,660
is they'll parse that authorized host file

482
00:19:20,660 --> 00:19:23,580
and try to contact every
host that you've contacted

483
00:19:23,580 --> 00:19:25,490
in that authorized file

484
00:19:25,490 --> 00:19:29,050
and try to issue a cURL
command like cURL@pastebin.com

485
00:19:29,050 --> 00:19:29,990
in the payload.

486
00:19:29,990 --> 00:19:33,090
And funnel that script into
a batch shell or SH shell,

487
00:19:33,090 --> 00:19:34,750
something like that.

488
00:19:34,750 --> 00:19:37,720
This is going to be a little
bit more high fidelity

489
00:19:37,720 --> 00:19:39,540
depending on site that's being used.

490
00:19:39,540 --> 00:19:41,638
We found that sometimes however,

491
00:19:41,638 --> 00:19:45,439
this matches up with an
application deployment pattern.

492
00:19:45,440 --> 00:19:47,980
If you deploy docker in your environment,

493
00:19:47,980 --> 00:19:50,680
if you deploy some cloud
stuff in your environment,

494
00:19:50,680 --> 00:19:54,280
some installers, depending
on how you use them,

495
00:19:54,280 --> 00:19:55,530
might match this pattern,

496
00:19:55,530 --> 00:19:57,129
you just have to tune those out.

497
00:19:58,680 --> 00:20:01,513
And now, this is the hall of shame.

498
00:20:03,560 --> 00:20:06,849
Anything discovery is going to suck.

499
00:20:06,849 --> 00:20:07,760
(all laughing)

500
00:20:07,760 --> 00:20:11,520
And mostly it's because
operating system noise.

501
00:20:11,520 --> 00:20:14,210
When you log on to a system in Linux

502
00:20:14,210 --> 00:20:16,317
and it has the little prompt that says,

503
00:20:16,317 --> 00:20:19,680
"You're logged into this
host with this username"

504
00:20:19,680 --> 00:20:22,300
how do you think that all gets generated?

505
00:20:22,300 --> 00:20:24,040
Recon commands.

506
00:20:24,040 --> 00:20:26,470
And if you're going to
alert on recon commands

507
00:20:26,470 --> 00:20:29,790
or any sort of combination
of recon commands,

508
00:20:29,790 --> 00:20:31,500
it's going to be really rough on you.

509
00:20:31,500 --> 00:20:33,260
What works best for us

510
00:20:33,260 --> 00:20:36,560
is looking for some sort
of cluster of activity

511
00:20:36,560 --> 00:20:39,389
where we can say okay,
there's maybe a little bit

512
00:20:40,482 --> 00:20:43,440
of user recon, little
bit of network recon,

513
00:20:43,440 --> 00:20:48,430
little bit of what users are on a system.

514
00:20:48,430 --> 00:20:51,010
When it occurs in a cluster like this,

515
00:20:51,010 --> 00:20:53,370
chances are you're more
likely to find somebody

516
00:20:53,370 --> 00:20:54,639
that is enumerating a system,

517
00:20:54,640 --> 00:20:57,720
looking for privilege
exploitation vulnerabilities.

518
00:20:57,720 --> 00:20:59,891
It's not going to something
that's alertable on,

519
00:20:59,891 --> 00:21:00,780
this is going to be something

520
00:21:00,780 --> 00:21:03,040
that you're examining
logs or examining a report

521
00:21:03,040 --> 00:21:03,963
after the fact.

522
00:21:06,170 --> 00:21:07,003
The use of Sudo.

523
00:21:09,330 --> 00:21:10,960
It's admin's favorite,
helps you make sandwiches,

524
00:21:10,960 --> 00:21:12,020
helps you do all the things

525
00:21:12,020 --> 00:21:13,903
that admins don't want you to do.

526
00:21:14,910 --> 00:21:17,120
This is going to make long investigations

527
00:21:17,120 --> 00:21:18,669
with very little return.

528
00:21:18,670 --> 00:21:20,480
You're going to have
very long rabbit holes

529
00:21:20,480 --> 00:21:22,930
that your analysts run down
and get nothing out of it.

530
00:21:22,930 --> 00:21:24,710
Because you're going to flag

531
00:21:24,710 --> 00:21:26,210
on every time your system's admin

532
00:21:26,210 --> 00:21:28,040
is trying to do something
on a Linux system.

533
00:21:28,040 --> 00:21:29,340
It's gonna make the admins mad,

534
00:21:29,340 --> 00:21:30,419
gonna make the analysts mad,

535
00:21:30,420 --> 00:21:31,830
gonna make the managers mad,

536
00:21:31,830 --> 00:21:34,129
and everybody's just gonna have a bad day.

537
00:21:34,130 --> 00:21:37,444
If you really have to look at Sudo

538
00:21:37,444 --> 00:21:39,190
altering in your environment,

539
00:21:39,190 --> 00:21:41,570
do it in an audit, do it in a report,

540
00:21:41,570 --> 00:21:46,200
something where it's not a
continuous monitoring effort.

541
00:21:46,200 --> 00:21:48,960
I have to make one caveat with this.

542
00:21:48,960 --> 00:21:50,190
When I made these slides,

543
00:21:50,190 --> 00:21:53,050
I did not account for the
edge case vulnerability

544
00:21:53,050 --> 00:21:54,580
from a couple of weeks ago

545
00:21:54,580 --> 00:21:58,830
with Sudo with a negative one
username and all that mess.

546
00:21:58,830 --> 00:22:01,929
That one's a high fidelity
alert. (all laughing)

547
00:22:01,930 --> 00:22:02,763
Get that one in.

548
00:22:02,763 --> 00:22:06,352
But otherwise, it's better
for reporting and audits.

549
00:22:07,750 --> 00:22:09,560
The final one,

550
00:22:09,560 --> 00:22:10,950
I have to include this

551
00:22:10,950 --> 00:22:13,050
because we did have somebody ask about it.

552
00:22:14,740 --> 00:22:17,087
If you're not familiar
with Unix and Linux land,

553
00:22:17,087 --> 00:22:21,360
rm and rf means delete
all files recursively

554
00:22:21,360 --> 00:22:23,169
and force the deletion.

555
00:22:23,170 --> 00:22:26,500
Root is obviously the equivalent
of c-drive from Windows

556
00:22:26,500 --> 00:22:28,250
over on the Linux system.

557
00:22:28,250 --> 00:22:31,210
And theoretically, this is going to delete

558
00:22:31,210 --> 00:22:32,200
everything on the system

559
00:22:32,200 --> 00:22:33,940
and it's going to do it very quickly.

560
00:22:33,940 --> 00:22:35,180
When somebody approached us

561
00:22:35,180 --> 00:22:36,740
with a question about this analytic

562
00:22:36,740 --> 00:22:39,200
and says, "Can you guys detect on this?"

563
00:22:39,200 --> 00:22:43,247
we said, "Well, we can
write an analytic for it.

564
00:22:43,247 --> 00:22:46,930
"But it relies on your
basically winning a race."

565
00:22:46,930 --> 00:22:49,200
and so what about winning this race?

566
00:22:49,200 --> 00:22:52,310
And you have to rely on
your sensor making it back

567
00:22:52,310 --> 00:22:55,300
to the server that this
rm rf command has arrived

568
00:22:55,300 --> 00:22:58,476
before the rm rf has
messed up your sensor.

569
00:22:58,476 --> 00:23:01,800
You're not gonna win the
race 95% of the time.

570
00:23:01,800 --> 00:23:04,280
Especially, we're in the land of SSDs now

571
00:23:04,280 --> 00:23:06,910
and really high speed xeon processors,

572
00:23:06,910 --> 00:23:09,990
so you're just not going
to win it most of the time.

573
00:23:09,990 --> 00:23:12,200
If you do win it, again, let me know.

574
00:23:12,200 --> 00:23:13,860
I wanna see how this comes up.

575
00:23:13,860 --> 00:23:18,083
And I would additionally argue
that if you ever see this

576
00:23:18,084 --> 00:23:21,740
have this alert and you
actually get a hit on it,

577
00:23:21,740 --> 00:23:25,650
the bad guys probably didn't
get a successful execution

578
00:23:25,650 --> 00:23:28,270
because most of the time
on modern Linux systems,

579
00:23:28,270 --> 00:23:31,580
you also have to include a flag
that says no-preserve-root.

580
00:23:31,580 --> 00:23:33,297
Because modern Linux systems said

581
00:23:33,297 --> 00:23:35,037
"Hey, we need to put some guard rails

582
00:23:35,037 --> 00:23:37,900
"on this sucker before people
start blowing things up".

583
00:23:37,900 --> 00:23:40,720
And that's one of the
good things about it.

584
00:23:40,720 --> 00:23:43,730
Most of the time, your
help desk is going to know

585
00:23:43,730 --> 00:23:46,040
that something has gone
wrong with this system

586
00:23:46,040 --> 00:23:48,433
before you know if somebody has wiped it.

587
00:23:49,489 --> 00:23:52,363
It's just something that happens.

588
00:23:53,940 --> 00:23:55,040
And hopefully there'll be evidence

589
00:23:55,040 --> 00:23:56,090
for you to figure out what happened

590
00:23:56,090 --> 00:23:57,800
when you get there.

591
00:23:57,800 --> 00:24:01,332
So, close up, got five minutes left.

592
00:24:02,290 --> 00:24:03,770
Alert where you can, where possible.

593
00:24:03,770 --> 00:24:05,440
The first ones,

594
00:24:05,440 --> 00:24:07,823
alert on as much of those as you can.

595
00:24:09,310 --> 00:24:10,250
Report and hunt,

596
00:24:10,250 --> 00:24:12,870
do cluster analysis where
you can't otherwise.

597
00:24:12,870 --> 00:24:15,629
I wanted to additionally
share some resources

598
00:24:15,630 --> 00:24:17,570
that I thought were awesome.

599
00:24:17,570 --> 00:24:19,169
The most successful organizations

600
00:24:19,170 --> 00:24:21,910
we've talked to so far
that haven't been using

601
00:24:21,910 --> 00:24:25,620
some sort of process
monitoring commercial tool,

602
00:24:25,620 --> 00:24:28,379
had been using some form of OS query

603
00:24:28,380 --> 00:24:29,715
auditd combinations thereof

604
00:24:29,715 --> 00:24:32,530
trying to figure it
out in the environment.

605
00:24:32,530 --> 00:24:34,320
If you wanna learn about auditd

606
00:24:34,320 --> 00:24:36,860
and you wanna be able to
implement some attack-style

607
00:24:36,860 --> 00:24:38,469
analytics for auditd,

608
00:24:38,470 --> 00:24:41,970
both of these resources are
really awesome to do that.

609
00:24:41,970 --> 00:24:44,010
Bfuzzy, I'm not sure
what your real name is,

610
00:24:44,010 --> 00:24:45,100
but thank you dude.

611
00:24:45,100 --> 00:24:48,312
And Florian Roth has
really good auditd project,

612
00:24:49,270 --> 00:24:52,020
both of them have some really
high fidelity alerts in there,

613
00:24:52,020 --> 00:24:54,210
some of them won't.

614
00:24:54,210 --> 00:24:56,100
Some of the alerts won't be high fidelity,

615
00:24:56,100 --> 00:24:59,892
so just use what you can
and improve the rest.

