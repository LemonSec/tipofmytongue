1
00:00:11,280 --> 00:00:13,040
the next couple talks

2
00:00:13,040 --> 00:00:14,719
i don't have a great way to fit them put

3
00:00:14,719 --> 00:00:16,320
them into sort of a continuing running

4
00:00:16,320 --> 00:00:17,760
theme a little bit more

5
00:00:17,760 --> 00:00:19,600
potpourri

6
00:00:19,600 --> 00:00:21,439
but our next speaker is going to be

7
00:00:21,439 --> 00:00:23,920
jared stroud from lacework

8
00:00:23,920 --> 00:00:25,599
it's it's great to have jared visiting

9
00:00:25,599 --> 00:00:27,920
us back at mitre again

10
00:00:27,920 --> 00:00:29,519
i mean we've heard a lot about activity

11
00:00:29,519 --> 00:00:32,960
taking place last few days in windows

12
00:00:32,960 --> 00:00:35,360
and a bit of cloud

13
00:00:35,360 --> 00:00:38,079
but we really struggled to gather the

14
00:00:38,079 --> 00:00:39,840
information that we needed to create the

15
00:00:39,840 --> 00:00:42,160
tax containers matrix

16
00:00:42,160 --> 00:00:44,640
there's not a ton out there and so when

17
00:00:44,640 --> 00:00:47,200
we saw jared's uh proposal talking in

18
00:00:47,200 --> 00:00:49,680
the space it was a really easy decision

19
00:00:49,680 --> 00:00:51,199
so please help me welcome the stage

20
00:00:51,199 --> 00:00:52,160
jared

21
00:00:52,160 --> 00:00:54,160
hello

22
00:00:54,160 --> 00:00:56,399
that con how are we doing sure might

23
00:00:56,399 --> 00:00:59,440
come i hope so

24
00:00:59,440 --> 00:01:01,359
and it is so

25
00:01:01,359 --> 00:01:04,239
my name is jared stroud i am currently a

26
00:01:04,239 --> 00:01:06,080
security researcher at lacework

27
00:01:06,080 --> 00:01:08,000
specifically on late work labs the

28
00:01:08,000 --> 00:01:10,240
security research team what that means

29
00:01:10,240 --> 00:01:12,720
is that we focus on all things container

30
00:01:12,720 --> 00:01:16,080
linux and cloud threat related so this

31
00:01:16,080 --> 00:01:18,960
kind of leads us into the next uh part

32
00:01:18,960 --> 00:01:20,159
of my talk of what we're going to be

33
00:01:20,159 --> 00:01:22,240
talking about today

34
00:01:22,240 --> 00:01:23,040
so

35
00:01:23,040 --> 00:01:25,759
as you know the pandemics were roared on

36
00:01:25,759 --> 00:01:28,159
and more people are working remote

37
00:01:28,159 --> 00:01:30,560
we've also noticed the same shift of uh

38
00:01:30,560 --> 00:01:33,040
normal workloads from like on-prem data

39
00:01:33,040 --> 00:01:35,119
centers get moved to the cloud and

40
00:01:35,119 --> 00:01:36,960
usually that ends up looking like

41
00:01:36,960 --> 00:01:38,560
containers now depending on how this

42
00:01:38,560 --> 00:01:40,159
group gets deployed sometimes it's

43
00:01:40,159 --> 00:01:41,439
docker sometimes it's kubernetes

44
00:01:41,439 --> 00:01:43,200
sometimes it's a cloud native resource

45
00:01:43,200 --> 00:01:45,200
but we're going to talk about what that

46
00:01:45,200 --> 00:01:47,280
looks like from the point of view of the

47
00:01:47,280 --> 00:01:48,560
attacker and the point of view of the

48
00:01:48,560 --> 00:01:50,320
defender additionally we're going to

49
00:01:50,320 --> 00:01:52,000
look at how we collected that data with

50
00:01:52,000 --> 00:01:53,600
some custom built honey pots that we

51
00:01:53,600 --> 00:01:55,360
built we'll analyze the data a little

52
00:01:55,360 --> 00:01:57,520
bit and we'll leave off on some

53
00:01:57,520 --> 00:01:59,439
additional container focus defenses that

54
00:01:59,439 --> 00:02:01,360
everyone can walk away with today to

55
00:02:01,360 --> 00:02:03,119
kind of improve the security pressure of

56
00:02:03,119 --> 00:02:05,840
their organization a little bit

57
00:02:05,840 --> 00:02:08,160
so for those playing buzzword bingo at

58
00:02:08,160 --> 00:02:10,160
home i've tweeted out a card so please

59
00:02:10,160 --> 00:02:12,000
feel free to fill in the blanks as i go

60
00:02:12,000 --> 00:02:13,599
through some of the buzzwords here but

61
00:02:13,599 --> 00:02:16,480
as enterprises shift left and adopt

62
00:02:16,480 --> 00:02:19,280
these devops tools to deploy whatever it

63
00:02:19,280 --> 00:02:21,680
is their product is to consumers faster

64
00:02:21,680 --> 00:02:24,000
they're also taking on additional risk

65
00:02:24,000 --> 00:02:26,400
as we take the ansibles terraforms etc

66
00:02:26,400 --> 00:02:28,879
of the world and use those to scale we

67
00:02:28,879 --> 00:02:31,920
can also misconfigure at scale and this

68
00:02:31,920 --> 00:02:33,680
is where you get a lot of opportunistic

69
00:02:33,680 --> 00:02:36,879
attackers taking advantage of those gaps

70
00:02:36,879 --> 00:02:39,360
for example in october we saw some

71
00:02:39,360 --> 00:02:41,440
pretty interesting things around uh get

72
00:02:41,440 --> 00:02:43,360
lab with specifically remote code

73
00:02:43,360 --> 00:02:46,239
execution uh vulnerabilities options

74
00:02:46,239 --> 00:02:48,000
opportunistic attackers solve this and

75
00:02:48,000 --> 00:02:50,160
leverage that to deploy crypto miners

76
00:02:50,160 --> 00:02:52,400
mirai bots etc

77
00:02:52,400 --> 00:02:54,080
now the reason that i bring up gitlab

78
00:02:54,080 --> 00:02:55,599
specifically is because gitlab has a

79
00:02:55,599 --> 00:02:57,519
bunch of really interesting integrations

80
00:02:57,519 --> 00:03:00,239
into ci cd deployments so if i go to you

81
00:03:00,239 --> 00:03:02,080
and say hey bad news it looks like your

82
00:03:02,080 --> 00:03:03,840
gitlab server got popped you might have

83
00:03:03,840 --> 00:03:06,159
to go oh we also have git lab runners

84
00:03:06,159 --> 00:03:08,400
that hit on these targets that deploy to

85
00:03:08,400 --> 00:03:10,319
our kubernetes service and then suddenly

86
00:03:10,319 --> 00:03:11,840
you have a bunch of additional things to

87
00:03:11,840 --> 00:03:13,760
dive down

88
00:03:13,760 --> 00:03:16,000
so when we started seeing some of these

89
00:03:16,000 --> 00:03:18,080
attacks they're also going back to the

90
00:03:18,080 --> 00:03:20,000
misconfiguration piece of just cloud

91
00:03:20,000 --> 00:03:21,680
service dashboards being exposed where

92
00:03:21,680 --> 00:03:23,680
they shouldn't be or even just exposed

93
00:03:23,680 --> 00:03:26,560
apis from the docker container we looked

94
00:03:26,560 --> 00:03:28,400
at how we can go about collecting this

95
00:03:28,400 --> 00:03:30,879
data better to dive into analysis and

96
00:03:30,879 --> 00:03:32,000
this is where we kind of came up with

97
00:03:32,000 --> 00:03:33,599
building a honeypot

98
00:03:33,599 --> 00:03:35,280
so when i say honeypot just so we all

99
00:03:35,280 --> 00:03:37,120
have kind of the same nomenclature

100
00:03:37,120 --> 00:03:39,040
talking about emulating a service to a

101
00:03:39,040 --> 00:03:41,120
specific level of fidelity so that we

102
00:03:41,120 --> 00:03:43,360
can go ahead and collect or trick out an

103
00:03:43,360 --> 00:03:45,120
attacker throwing their exploit throwing

104
00:03:45,120 --> 00:03:47,360
their payload we can collect it safely

105
00:03:47,360 --> 00:03:49,760
and analyze it now i use a specific word

106
00:03:49,760 --> 00:03:52,799
here level of fidelity and this comes up

107
00:03:52,799 --> 00:03:54,480
into the this comes into conversation

108
00:03:54,480 --> 00:03:56,000
where you talk about the kind of data

109
00:03:56,000 --> 00:03:58,319
that you want to collect for example

110
00:03:58,319 --> 00:04:00,640
when log4j came out everyone was

111
00:04:00,640 --> 00:04:02,080
throwing that in their payloads and just

112
00:04:02,080 --> 00:04:03,680
spraying it across the internet if you

113
00:04:03,680 --> 00:04:06,799
had a netcat listener on port 9200 or

114
00:04:06,799 --> 00:04:09,200
just port 80 etc you're probably going

115
00:04:09,200 --> 00:04:11,200
to catch that opportunistic attack if

116
00:04:11,200 --> 00:04:12,080
you're looking for something more

117
00:04:12,080 --> 00:04:13,760
targeted then you've got to play a

118
00:04:13,760 --> 00:04:15,040
little bit more with how you're actually

119
00:04:15,040 --> 00:04:16,560
going to interact with those that are

120
00:04:16,560 --> 00:04:19,120
throwing payloads at you

121
00:04:19,120 --> 00:04:20,320
and this is kind of where you start

122
00:04:20,320 --> 00:04:21,918
having the conversation of like is this

123
00:04:21,918 --> 00:04:23,680
enough to trick an attacker that's

124
00:04:23,680 --> 00:04:25,199
really going to throw a payload at me or

125
00:04:25,199 --> 00:04:26,960
am i just looking for what's out there

126
00:04:26,960 --> 00:04:30,320
kind of spanning the internet

127
00:04:30,320 --> 00:04:31,759
so whale honey

128
00:04:31,759 --> 00:04:34,400
the docker focus honey pot that we built

129
00:04:34,400 --> 00:04:35,759
works like this

130
00:04:35,759 --> 00:04:37,840
uh effectively you have a container

131
00:04:37,840 --> 00:04:40,080
deployed that has the default port two

132
00:04:40,080 --> 00:04:41,919
three seven five looks like an unsecured

133
00:04:41,919 --> 00:04:43,199
docker socket

134
00:04:43,199 --> 00:04:44,880
the attacker sees this they throw their

135
00:04:44,880 --> 00:04:47,120
payload and we emulate the docker api

136
00:04:47,120 --> 00:04:48,800
based on the publicly available docker

137
00:04:48,800 --> 00:04:51,120
api engine documentation we take that

138
00:04:51,120 --> 00:04:53,040
data and we just throw it to a plain

139
00:04:53,040 --> 00:04:55,199
text flat file for you to do with it

140
00:04:55,199 --> 00:04:57,040
what you will when we were doing the

141
00:04:57,040 --> 00:04:58,800
initial research we saw a lot of honey

142
00:04:58,800 --> 00:05:00,560
pots were really heavily tied to

143
00:05:00,560 --> 00:05:02,560
specific databases and when you look at

144
00:05:02,560 --> 00:05:04,160
like that from a researcher perspective

145
00:05:04,160 --> 00:05:05,600
it goes okay now i've got to deploy all

146
00:05:05,600 --> 00:05:07,520
this additional infrastructure when

147
00:05:07,520 --> 00:05:09,039
really if i just take that plain text

148
00:05:09,039 --> 00:05:11,120
file i can then use it and enrich it

149
00:05:11,120 --> 00:05:13,039
however i want so we wanted this to be

150
00:05:13,039 --> 00:05:16,000
super easy to one review because at the

151
00:05:16,000 --> 00:05:17,680
end of the day a honeypot is supposed to

152
00:05:17,680 --> 00:05:19,280
be deployed to emulate a vulnerable

153
00:05:19,280 --> 00:05:20,880
service and you don't want to deploy

154
00:05:20,880 --> 00:05:22,479
additional risk in your infrastructure

155
00:05:22,479 --> 00:05:24,800
then two ingest it with the tools that

156
00:05:24,800 --> 00:05:26,400
you use that you're comfortable with so

157
00:05:26,400 --> 00:05:28,080
that way you can do your research on

158
00:05:28,080 --> 00:05:30,479
your own

159
00:05:32,000 --> 00:05:34,479
so some quick stats that we saw over uh

160
00:05:34,479 --> 00:05:37,120
running this for about a year now we had

161
00:05:37,120 --> 00:05:40,320
244 unique payloads targeting the api

162
00:05:40,320 --> 00:05:41,840
container create

163
00:05:41,840 --> 00:05:43,759
now endpoint now that endpoint as the

164
00:05:43,759 --> 00:05:46,320
name implies is for creating containers

165
00:05:46,320 --> 00:05:48,639
so out of all of those we only had two

166
00:05:48,639 --> 00:05:51,440
24 payloads with the privilege set flag

167
00:05:51,440 --> 00:05:53,120
set to true and if you're unfamiliar

168
00:05:53,120 --> 00:05:54,080
with that

169
00:05:54,080 --> 00:05:55,919
in regards to the docker engine what

170
00:05:55,919 --> 00:05:57,440
that does is eliminate some of the

171
00:05:57,440 --> 00:05:59,360
security settings that are typically in

172
00:05:59,360 --> 00:06:01,600
place with a docker container that gets

173
00:06:01,600 --> 00:06:03,680
deployed effectively it makes the

174
00:06:03,680 --> 00:06:05,039
container that gets deployed just like a

175
00:06:05,039 --> 00:06:07,840
normal process on the host machine

176
00:06:07,840 --> 00:06:09,440
the other interesting thing we saw were

177
00:06:09,440 --> 00:06:11,440
three additional sas services getting

178
00:06:11,440 --> 00:06:14,240
used regularly in some of these attacks

179
00:06:14,240 --> 00:06:16,160
docker hub to no surprise for

180
00:06:16,160 --> 00:06:17,440
adversaries looking to stage

181
00:06:17,440 --> 00:06:19,919
capabilities we saw ngrok which is a

182
00:06:19,919 --> 00:06:21,600
reverse tunneling service that allows

183
00:06:21,600 --> 00:06:24,880
developers to expose locally say a dev

184
00:06:24,880 --> 00:06:25,919
instance that they're working on

185
00:06:25,919 --> 00:06:27,840
publicly to the internet and then also

186
00:06:27,840 --> 00:06:29,919
wework scope which is a legitimate

187
00:06:29,919 --> 00:06:31,039
container orchestration and

188
00:06:31,039 --> 00:06:32,479
administration tool

189
00:06:32,479 --> 00:06:35,840
notably ngrok was leveraged 146 times in

190
00:06:35,840 --> 00:06:38,000
different payloads the interesting thing

191
00:06:38,000 --> 00:06:39,440
that we're seeing here with container

192
00:06:39,440 --> 00:06:40,960
focused attacks and more things that are

193
00:06:40,960 --> 00:06:42,560
cloud native for those playing buzzword

194
00:06:42,560 --> 00:06:44,560
bingo at home is that we're moving from

195
00:06:44,560 --> 00:06:46,560
that same kind of living off the land

196
00:06:46,560 --> 00:06:48,800
attacks to living off the sas these

197
00:06:48,800 --> 00:06:50,880
services that i've listed here are free

198
00:06:50,880 --> 00:06:52,639
or have free trials and they don't cost

199
00:06:52,639 --> 00:06:54,639
anything for the attacker to set up so

200
00:06:54,639 --> 00:06:55,919
just like they're making our lives

201
00:06:55,919 --> 00:06:58,080
easier it their lives easier as well

202
00:06:58,080 --> 00:06:59,120
when they don't have to think about

203
00:06:59,120 --> 00:07:02,000
infrastructure

204
00:07:02,000 --> 00:07:03,440
out of all of these attacks the kill

205
00:07:03,440 --> 00:07:04,960
chain kind of breaks down into three

206
00:07:04,960 --> 00:07:08,000
separate ways one the attacker deploys a

207
00:07:08,000 --> 00:07:09,599
container and they're going to go ahead

208
00:07:09,599 --> 00:07:11,120
and bring down a dropper script which

209
00:07:11,120 --> 00:07:12,880
will then do nasty things

210
00:07:12,880 --> 00:07:15,120
a stage container gets deployed or the

211
00:07:15,120 --> 00:07:17,680
attacker tries to attach to bin bash in

212
00:07:17,680 --> 00:07:19,520
the container that's been deployed for

213
00:07:19,520 --> 00:07:20,960
our honeypot anything that was been

214
00:07:20,960 --> 00:07:22,479
bashed we didn't care about we wanted

215
00:07:22,479 --> 00:07:23,440
the payloads that were going to get

216
00:07:23,440 --> 00:07:25,520
dropped so that we could investigate so

217
00:07:25,520 --> 00:07:27,039
now we're going to dive into what i

218
00:07:27,039 --> 00:07:29,360
thought was a pretty interesting post x

219
00:07:29,360 --> 00:07:30,560
payload dropped by one of these

220
00:07:30,560 --> 00:07:32,160
containers

221
00:07:32,160 --> 00:07:34,639
so this is a nice little json blob that

222
00:07:34,639 --> 00:07:36,000
our whale honey

223
00:07:36,000 --> 00:07:38,080
docker honey pot will will give you once

224
00:07:38,080 --> 00:07:40,319
someone's thrown a payload at it if we

225
00:07:40,319 --> 00:07:41,919
look at the first red star we see a

226
00:07:41,919 --> 00:07:44,560
command that first shreds to the mount

227
00:07:44,560 --> 00:07:46,400
directory if we go ahead and jump down

228
00:07:46,400 --> 00:07:48,240
to the bottom red star we see that this

229
00:07:48,240 --> 00:07:51,120
is a bind mount so the underlying hosts

230
00:07:51,120 --> 00:07:53,120
file system the root file system is

231
00:07:53,120 --> 00:07:55,280
being mounted into slash mount and then

232
00:07:55,280 --> 00:07:57,280
we're shreding to that effectively about

233
00:07:57,280 --> 00:07:59,440
to operate on the underlying host's file

234
00:07:59,440 --> 00:08:02,319
system the next commands install curl

235
00:08:02,319 --> 00:08:04,879
and then set a cron job to go ahead and

236
00:08:04,879 --> 00:08:06,879
download and execute a specific file

237
00:08:06,879 --> 00:08:10,080
called cronby every minute or so

238
00:08:10,080 --> 00:08:12,240
so what this is allowing the attackers

239
00:08:12,240 --> 00:08:13,360
to do

240
00:08:13,360 --> 00:08:15,680
is kind of have that host pivot from an

241
00:08:15,680 --> 00:08:18,400
exposed docker api endpoint to then

242
00:08:18,400 --> 00:08:20,319
execute data on the host

243
00:08:20,319 --> 00:08:22,080
and then this is where we see a shell

244
00:08:22,080 --> 00:08:23,840
script get brought into place that then

245
00:08:23,840 --> 00:08:26,479
brings down additional payloads of those

246
00:08:26,479 --> 00:08:29,520
payloads we saw we see uh the first

247
00:08:29,520 --> 00:08:31,599
thing is that the the

248
00:08:31,599 --> 00:08:33,360
purpose of a lot of these is to deploy

249
00:08:33,360 --> 00:08:35,519
cryptocurrency miners to monetize that

250
00:08:35,519 --> 00:08:37,200
initial access

251
00:08:37,200 --> 00:08:38,559
so we see killing of other

252
00:08:38,559 --> 00:08:39,919
cryptocurrency miners because we don't

253
00:08:39,919 --> 00:08:41,039
want to introduce more noise into the

254
00:08:41,039 --> 00:08:42,640
environment we see the own

255
00:08:42,640 --> 00:08:44,399
cryptocurrency miner getting deployed

256
00:08:44,399 --> 00:08:46,240
and then for persistent mechanisms we're

257
00:08:46,240 --> 00:08:48,160
actually seeing open source root kits

258
00:08:48,160 --> 00:08:50,240
such as diamorphine getting deployed

259
00:08:50,240 --> 00:08:53,839
some ld preload root kits to hide um

260
00:08:53,839 --> 00:08:55,920
some syscall interaction with

261
00:08:55,920 --> 00:08:57,760
listing contents of directories as well

262
00:08:57,760 --> 00:09:00,800
as dropping ssh keys for persistence as

263
00:09:00,800 --> 00:09:03,600
we dive into that a little bit more

264
00:09:03,600 --> 00:09:06,160
the overall bash script was about 1500

265
00:09:06,160 --> 00:09:09,519
lines and additional ttps included

266
00:09:09,519 --> 00:09:12,640
killing cloud monitoring agents that are

267
00:09:12,640 --> 00:09:14,399
in specific clouds such as alibaba where

268
00:09:14,399 --> 00:09:15,360
you see

269
00:09:15,360 --> 00:09:17,279
a utility called alion

270
00:09:17,279 --> 00:09:20,080
getting killed the additional ssh keys

271
00:09:20,080 --> 00:09:22,480
for continued access diamorphine as i

272
00:09:22,480 --> 00:09:24,560
just mentioned etc the two notable

273
00:09:24,560 --> 00:09:26,640
things that always we see with crypto

274
00:09:26,640 --> 00:09:28,640
jacking attacks almost always i should

275
00:09:28,640 --> 00:09:31,360
say are a c2 agent getting deployed in

276
00:09:31,360 --> 00:09:33,839
the form of an irc bot and these

277
00:09:33,839 --> 00:09:35,519
utilities that i have listed here

278
00:09:35,519 --> 00:09:38,080
tsunami kaiten or ziggy startups they're

279
00:09:38,080 --> 00:09:40,800
all about the same with a little bit of

280
00:09:40,800 --> 00:09:43,120
differences in the code base and the

281
00:09:43,120 --> 00:09:44,560
nice thing about these is that some

282
00:09:44,560 --> 00:09:45,920
researchers actually have the source

283
00:09:45,920 --> 00:09:47,680
code and they publish to github so you

284
00:09:47,680 --> 00:09:49,200
can dive into it and actually see what

285
00:09:49,200 --> 00:09:50,959
the underlying source code looks like to

286
00:09:50,959 --> 00:09:53,040
see what your detections map to

287
00:09:53,040 --> 00:09:55,519
the final thing that was executed

288
00:09:55,519 --> 00:09:57,600
by this bash script was a curl command

289
00:09:57,600 --> 00:10:00,160
to an attacker controlled ip with a uri

290
00:10:00,160 --> 00:10:02,880
of id check along with the output of the

291
00:10:02,880 --> 00:10:05,600
id command to see what the user id was

292
00:10:05,600 --> 00:10:07,519
of this attack so what this does from

293
00:10:07,519 --> 00:10:09,760
the attacker is a really lightweight way

294
00:10:09,760 --> 00:10:12,880
of saying okay i have user id 0 root on

295
00:10:12,880 --> 00:10:15,120
these hosts i know my ssh key has been

296
00:10:15,120 --> 00:10:17,360
dropped and if successful those irc bots

297
00:10:17,360 --> 00:10:18,880
should be calling back too so we've

298
00:10:18,880 --> 00:10:20,640
established a bunch of different ways

299
00:10:20,640 --> 00:10:22,160
that we should still have access to

300
00:10:22,160 --> 00:10:25,120
these victim hosts

301
00:10:25,120 --> 00:10:26,560
we're going to dive in a little bit more

302
00:10:26,560 --> 00:10:28,880
to those ld preload attacks an

303
00:10:28,880 --> 00:10:30,959
interesting thing that we found is that

304
00:10:30,959 --> 00:10:32,240
a lot of the attackers that are focusing

305
00:10:32,240 --> 00:10:33,519
on container focus attacks and the

306
00:10:33,519 --> 00:10:35,839
payloads we've researched are leveraging

307
00:10:35,839 --> 00:10:37,760
open source tooling

308
00:10:37,760 --> 00:10:40,480
no shock there but they're not doing

309
00:10:40,480 --> 00:10:42,399
almost any modification to the

310
00:10:42,399 --> 00:10:44,640
underlying code so on the right here we

311
00:10:44,640 --> 00:10:47,200
have guido pseudo-decompilation

312
00:10:47,200 --> 00:10:49,839
output of the shared object and on the

313
00:10:49,839 --> 00:10:51,200
left we actually have the original

314
00:10:51,200 --> 00:10:52,959
source code from a utility called lib

315
00:10:52,959 --> 00:10:55,200
process hider what lib process hider

316
00:10:55,200 --> 00:10:56,959
does is create a nice little bash script

317
00:10:56,959 --> 00:10:58,959
so that way you can quickly build

318
00:10:58,959 --> 00:11:01,040
shared objects that will hook specific

319
00:11:01,040 --> 00:11:03,440
statistics calls and hide processes to

320
00:11:03,440 --> 00:11:05,600
the right here where you see a process

321
00:11:05,600 --> 00:11:07,600
to filter on that stir comp

322
00:11:07,600 --> 00:11:09,040
function if you were to double click

323
00:11:09,040 --> 00:11:10,480
that engine it would take you to the

324
00:11:10,480 --> 00:11:12,640
string that it's filtering in this case

325
00:11:12,640 --> 00:11:14,480
it's xm xmrig a very popular

326
00:11:14,480 --> 00:11:17,600
cryptocurrency mining utility

327
00:11:17,600 --> 00:11:19,360
similar with diamorphine and if you're

328
00:11:19,360 --> 00:11:21,519
not familiar also another open source

329
00:11:21,519 --> 00:11:23,519
utility that you can go and play with

330
00:11:23,519 --> 00:11:25,760
diamorphine rookie offers some of the

331
00:11:25,760 --> 00:11:27,040
functionality that you would expect when

332
00:11:27,040 --> 00:11:28,720
someone says root kit kernel level root

333
00:11:28,720 --> 00:11:30,480
kit but the interesting thing here if

334
00:11:30,480 --> 00:11:31,760
you've ever played around with the linux

335
00:11:31,760 --> 00:11:33,519
kernel and building kernel modules you

336
00:11:33,519 --> 00:11:35,680
have to build against a specific target

337
00:11:35,680 --> 00:11:37,920
this bash script went ahead and

338
00:11:37,920 --> 00:11:39,360
installed the kernel headers and built

339
00:11:39,360 --> 00:11:41,600
the kernel module on target to then

340
00:11:41,600 --> 00:11:42,959
install it

341
00:11:42,959 --> 00:11:45,360
introducing a bunch more artifacts that

342
00:11:45,360 --> 00:11:47,360
you could build into your detection

343
00:11:47,360 --> 00:11:48,560
routine

344
00:11:48,560 --> 00:11:50,880
a final note here is kind of pivoting on

345
00:11:50,880 --> 00:11:52,399
strings so maybe you're not a reverse

346
00:11:52,399 --> 00:11:54,320
engineer or someone that spends a whole

347
00:11:54,320 --> 00:11:57,680
lot of time in say geidra ida etc that's

348
00:11:57,680 --> 00:12:00,480
okay the value that we're kind of trying

349
00:12:00,480 --> 00:12:02,240
to show here is just running strings on

350
00:12:02,240 --> 00:12:03,600
some of these executables and doing some

351
00:12:03,600 --> 00:12:05,920
quick googles might result in better

352
00:12:05,920 --> 00:12:08,880
fidelity of finding out what this is so

353
00:12:08,880 --> 00:12:10,399
that way you can make actionable next

354
00:12:10,399 --> 00:12:12,399
steps in your incident response plan

355
00:12:12,399 --> 00:12:13,839
it's not going to happen all the time

356
00:12:13,839 --> 00:12:15,040
but in some of the use cases that we've

357
00:12:15,040 --> 00:12:17,200
seen here it's been really

358
00:12:17,200 --> 00:12:20,079
an interesting data point

359
00:12:20,079 --> 00:12:21,920
so to kind of move on from that a couple

360
00:12:21,920 --> 00:12:22,959
of the other interesting things that

361
00:12:22,959 --> 00:12:24,560
we've seen with just our data set of

362
00:12:24,560 --> 00:12:27,040
exposed docker api are these drive-by

363
00:12:27,040 --> 00:12:28,720
compromises if you will so you have that

364
00:12:28,720 --> 00:12:30,560
exposed docker api we're going to go

365
00:12:30,560 --> 00:12:32,560
ahead and do not pictured here for that

366
00:12:32,560 --> 00:12:34,160
same kind of mount technique and then

367
00:12:34,160 --> 00:12:36,079
just echo a public key into an

368
00:12:36,079 --> 00:12:38,399
authorized keys file and then later scan

369
00:12:38,399 --> 00:12:40,160
the internet try to log in

370
00:12:40,160 --> 00:12:42,079
nothing super crazy

371
00:12:42,079 --> 00:12:43,600
and this is probably the most

372
00:12:43,600 --> 00:12:44,639
interesting one that we've found

373
00:12:44,639 --> 00:12:45,680
recently

374
00:12:45,680 --> 00:12:48,399
leveraging again a legitimate

375
00:12:48,399 --> 00:12:50,079
systems administration utility called

376
00:12:50,079 --> 00:12:52,399
scope and what this does is it deploys a

377
00:12:52,399 --> 00:12:54,079
docker container in an environment with

378
00:12:54,079 --> 00:12:56,560
a specific service token that then calls

379
00:12:56,560 --> 00:12:58,560
back to weaveworks

380
00:12:58,560 --> 00:13:00,240
actual product and that way you can log

381
00:13:00,240 --> 00:13:02,079
into a ui and then see all of the

382
00:13:02,079 --> 00:13:04,720
containers that you can orchestrate so

383
00:13:04,720 --> 00:13:06,560
here obviously with that service token

384
00:13:06,560 --> 00:13:08,720
you have a great point to pivot on in

385
00:13:08,720 --> 00:13:10,800
your environment and see okay where else

386
00:13:10,800 --> 00:13:12,560
is this deployed let's go ahead and hunt

387
00:13:12,560 --> 00:13:15,519
a little bit deeper to see where this is

388
00:13:15,519 --> 00:13:18,240
currently running

389
00:13:18,240 --> 00:13:20,480
and again probably to surprise of no one

390
00:13:20,480 --> 00:13:22,240
docker hub being leveraged to again

391
00:13:22,240 --> 00:13:24,639
stage capabilities masquerade as a

392
00:13:24,639 --> 00:13:27,519
potential uh apache runtime with a vague

393
00:13:27,519 --> 00:13:30,320
username but as we dived into the actual

394
00:13:30,320 --> 00:13:32,639
container itself it was executing

395
00:13:32,639 --> 00:13:34,399
similar techniques that we saw earlier

396
00:13:34,399 --> 00:13:36,880
with curling a external payload piping

397
00:13:36,880 --> 00:13:39,519
to bash and performing those execution

398
00:13:39,519 --> 00:13:42,320
steps that we already discussed

399
00:13:42,320 --> 00:13:44,639
to dive into the ngrok piece here if

400
00:13:44,639 --> 00:13:46,399
familiar ngrok will actually generate

401
00:13:46,399 --> 00:13:48,880
you for free a unique sub domain so that

402
00:13:48,880 --> 00:13:50,560
way you can serve your web app well

403
00:13:50,560 --> 00:13:52,160
again this is costing nothing to the

404
00:13:52,160 --> 00:13:53,760
attackers and they're leveraging you

405
00:13:53,760 --> 00:13:55,279
know their own infrastructure at home

406
00:13:55,279 --> 00:13:57,600
say like a vm they have a little folder

407
00:13:57,600 --> 00:13:59,440
they run ngrok out of there and then

408
00:13:59,440 --> 00:14:01,680
suddenly they have a legitimate domain

409
00:14:01,680 --> 00:14:04,000
that they can then serve payloads from

410
00:14:04,000 --> 00:14:05,600
take it down and you know they didn't

411
00:14:05,600 --> 00:14:08,399
cost them anything

412
00:14:09,040 --> 00:14:09,839
so

413
00:14:09,839 --> 00:14:10,880
things that we're going to talk about

414
00:14:10,880 --> 00:14:12,880
now are how do we improve our defenses

415
00:14:12,880 --> 00:14:14,480
and how do we actually

416
00:14:14,480 --> 00:14:16,160
stop these types of attacks and some of

417
00:14:16,160 --> 00:14:18,399
the more advanced defensive strategies

418
00:14:18,399 --> 00:14:20,560
so out of the box this is not news to

419
00:14:20,560 --> 00:14:22,399
anybody but don't expose the docker

420
00:14:22,399 --> 00:14:24,720
socket right no news there

421
00:14:24,720 --> 00:14:26,399
have strong ingress and egress rules

422
00:14:26,399 --> 00:14:27,680
we've heard these things before we

423
00:14:27,680 --> 00:14:29,440
understand them

424
00:14:29,440 --> 00:14:30,320
but there's a couple of really

425
00:14:30,320 --> 00:14:31,680
interesting things if you're leveraging

426
00:14:31,680 --> 00:14:33,120
docker in production called docker

427
00:14:33,120 --> 00:14:35,199
content trust and what docker content

428
00:14:35,199 --> 00:14:36,959
trust will do is actually enforce

429
00:14:36,959 --> 00:14:38,880
digital signatures for runtime

430
00:14:38,880 --> 00:14:40,480
verification of the images in your

431
00:14:40,480 --> 00:14:43,120
environment so this does induce or

432
00:14:43,120 --> 00:14:45,040
introduce the overhead of having to do

433
00:14:45,040 --> 00:14:47,040
key management and all of those

434
00:14:47,040 --> 00:14:48,480
wonderful things that come along with it

435
00:14:48,480 --> 00:14:50,720
but again it'll stop that scenario where

436
00:14:50,720 --> 00:14:52,639
it's like hey this isn't signed by my

437
00:14:52,639 --> 00:14:56,399
organization don't run this

438
00:14:56,560 --> 00:14:58,720
as we look at uh kubernetes-based

439
00:14:58,720 --> 00:15:00,560
deployments you can leverage um

440
00:15:00,560 --> 00:15:03,120
administration controllers such as opa

441
00:15:03,120 --> 00:15:04,560
an open source

442
00:15:04,560 --> 00:15:06,959
policy agent as the name says to prevent

443
00:15:06,959 --> 00:15:08,880
pods from getting deployed from specific

444
00:15:08,880 --> 00:15:10,639
registries or without specific

445
00:15:10,639 --> 00:15:12,399
capabilities that might be risky to your

446
00:15:12,399 --> 00:15:13,839
environment if you're not familiar with

447
00:15:13,839 --> 00:15:15,920
what an administration controller is

448
00:15:15,920 --> 00:15:18,399
effectively it's another api your

449
00:15:18,399 --> 00:15:20,560
initial manifest will hit to the

450
00:15:20,560 --> 00:15:22,480
inspective to a lower deny think of it

451
00:15:22,480 --> 00:15:25,440
almost like se linux to a certain extent

452
00:15:25,440 --> 00:15:27,199
going forth into kind of the cloud

453
00:15:27,199 --> 00:15:28,560
native environment depending on what

454
00:15:28,560 --> 00:15:29,839
you're using what you're deploying there

455
00:15:29,839 --> 00:15:32,079
may be tools already available for you

456
00:15:32,079 --> 00:15:34,320
to deploy signed images so that way you

457
00:15:34,320 --> 00:15:35,600
can ensure that you're not deploying

458
00:15:35,600 --> 00:15:37,920
something that isn't meant to be in that

459
00:15:37,920 --> 00:15:40,399
environment specifically thinking of

460
00:15:40,399 --> 00:15:42,560
gke's binary authorization which makes

461
00:15:42,560 --> 00:15:43,920
sure that workloads are signed and it

462
00:15:43,920 --> 00:15:45,040
integrates with their key signing

463
00:15:45,040 --> 00:15:48,079
service and aws eks has image signing on

464
00:15:48,079 --> 00:15:50,800
their roadmap

465
00:15:51,279 --> 00:15:52,880
now the final thing to have a

466
00:15:52,880 --> 00:15:54,560
conversation about is actually limiting

467
00:15:54,560 --> 00:15:56,240
the underlying sys calls that your

468
00:15:56,240 --> 00:15:58,560
application makes now this takes a lot

469
00:15:58,560 --> 00:16:00,560
of time and if you're iterating quickly

470
00:16:00,560 --> 00:16:01,839
it can be kind of a little bit of

471
00:16:01,839 --> 00:16:04,720
whack-a-mole of ensuring that you're not

472
00:16:04,720 --> 00:16:06,800
breaking your application with this but

473
00:16:06,800 --> 00:16:08,720
what it does is greatly reduce the

474
00:16:08,720 --> 00:16:10,720
underlying syscalls that your uh

475
00:16:10,720 --> 00:16:12,639
application can make and it can be super

476
00:16:12,639 --> 00:16:14,480
powerful in terms of limiting what that

477
00:16:14,480 --> 00:16:15,279
uh

478
00:16:15,279 --> 00:16:17,120
rate of boom would look like in the

479
00:16:17,120 --> 00:16:19,279
event that you had a compromised

480
00:16:19,279 --> 00:16:21,519
container

481
00:16:21,519 --> 00:16:22,880
up until this point we've really just

482
00:16:22,880 --> 00:16:24,480
talked about opportunistic attacks and

483
00:16:24,480 --> 00:16:26,160
some steps that you can take to limit

484
00:16:26,160 --> 00:16:28,160
that type of exposure let's say you're

485
00:16:28,160 --> 00:16:29,440
in the situation where you're looking to

486
00:16:29,440 --> 00:16:32,000
kind of improve those that have obtained

487
00:16:32,000 --> 00:16:33,279
keys and are maybe doing something a

488
00:16:33,279 --> 00:16:35,519
little bit manual uh in your aws

489
00:16:35,519 --> 00:16:36,639
environment

490
00:16:36,639 --> 00:16:38,079
over at lacework labs we did a little

491
00:16:38,079 --> 00:16:39,759
bit of research of leveraging amazon

492
00:16:39,759 --> 00:16:42,160
event bridge which allows us to define

493
00:16:42,160 --> 00:16:43,279
custom

494
00:16:43,279 --> 00:16:44,399
cloud

495
00:16:44,399 --> 00:16:46,480
trail patterns to look for to then take

496
00:16:46,480 --> 00:16:48,880
action on so this is an event driven

497
00:16:48,880 --> 00:16:50,959
utility that once we see a specific

498
00:16:50,959 --> 00:16:52,959
action do a thing and in this case we

499
00:16:52,959 --> 00:16:54,959
fired a lambda function now that thing

500
00:16:54,959 --> 00:16:56,560
that we were looking for in the case of

501
00:16:56,560 --> 00:16:58,639
the blog post that we have here is a

502
00:16:58,639 --> 00:17:00,079
specific

503
00:17:00,079 --> 00:17:01,920
specific registry image we had hosted in

504
00:17:01,920 --> 00:17:05,199
our ecr with an enticing name of say

505
00:17:05,199 --> 00:17:07,199
database secrets something like that to

506
00:17:07,199 --> 00:17:09,839
get someone to poke at our ecr image in

507
00:17:09,839 --> 00:17:11,280
the event keys were compromised and

508
00:17:11,280 --> 00:17:13,760
reconnaissance activity had taken place

509
00:17:13,760 --> 00:17:15,599
that being said you can leverage this

510
00:17:15,599 --> 00:17:17,439
same type of methodology to build

511
00:17:17,439 --> 00:17:19,520
detections in your own environment kind

512
00:17:19,520 --> 00:17:21,359
of like canary token asks around say

513
00:17:21,359 --> 00:17:23,520
like s3 files or buckets

514
00:17:23,520 --> 00:17:27,359
really any aws resource

515
00:17:28,079 --> 00:17:29,440
so with all that being said just went

516
00:17:29,440 --> 00:17:30,799
through a bunch of stuff we are

517
00:17:30,799 --> 00:17:33,280
releasing this today so it is on github

518
00:17:33,280 --> 00:17:36,720
at lacework dev laceworks hyphen dev

519
00:17:36,720 --> 00:17:39,360
slash whale honey hyphen public and uh

520
00:17:39,360 --> 00:17:41,120
you know pull requests welcome it's just

521
00:17:41,120 --> 00:17:43,280
a pretty straightforward uh python flask

522
00:17:43,280 --> 00:17:44,640
app that allowed us to collect a bunch

523
00:17:44,640 --> 00:17:46,480
of really interesting data

524
00:17:46,480 --> 00:17:48,880
and just kind of quickly recap for the

525
00:17:48,880 --> 00:17:50,799
attack ttps that we saw we've seen

526
00:17:50,799 --> 00:17:52,400
containers get deployed to escape from

527
00:17:52,400 --> 00:17:54,480
host with post-compromised payloads

528
00:17:54,480 --> 00:17:56,559
ending up as shell scripts and pairing

529
00:17:56,559 --> 00:17:58,320
defenses through their shell scripts of

530
00:17:58,320 --> 00:18:00,320
killing things like se linux and app

531
00:18:00,320 --> 00:18:01,360
armor

532
00:18:01,360 --> 00:18:03,520
deploying keys for persistence as well

533
00:18:03,520 --> 00:18:05,840
as ld preload hijacking and installing

534
00:18:05,840 --> 00:18:07,840
kernel objects such as

535
00:18:07,840 --> 00:18:09,840
installing rootkits such as dimorphine

536
00:18:09,840 --> 00:18:11,600
as we look to the right for defending

537
00:18:11,600 --> 00:18:13,120
obviously you never get away from

538
00:18:13,120 --> 00:18:15,679
limiting that ingress egress points but

539
00:18:15,679 --> 00:18:17,360
also looking at enforcing signed

540
00:18:17,360 --> 00:18:19,120
container images and implementing

541
00:18:19,120 --> 00:18:22,080
security policies uh such as oppa to

542
00:18:22,080 --> 00:18:23,840
prevent

543
00:18:23,840 --> 00:18:25,600
specific type of deployments and you

544
00:18:25,600 --> 00:18:27,520
also have finally the proactive defense

545
00:18:27,520 --> 00:18:30,240
approach that we talked about with honey

546
00:18:30,240 --> 00:18:31,200
tokens

547
00:18:31,200 --> 00:18:33,280
so with that we have reached the end of

548
00:18:33,280 --> 00:18:35,039
the presentation and thank you all so

549
00:18:35,039 --> 00:18:36,240
much for letting me come talk about

550
00:18:36,240 --> 00:18:38,880
kubernetes in containers

551
00:18:38,880 --> 00:18:43,120
[Applause]

552
00:18:43,120 --> 00:18:45,360
and yet another tool drop um i promise

553
00:18:45,360 --> 00:18:46,880
we didn't plan that we didn't ask for

554
00:18:46,880 --> 00:18:48,480
that but it shows speaks a lot towards

555
00:18:48,480 --> 00:18:49,760
the community here and how willing you

556
00:18:49,760 --> 00:18:51,679
are to know everyone to kind of share

557
00:18:51,679 --> 00:18:53,360
and you know like i said yesterday not

558
00:18:53,360 --> 00:18:55,120
start from scratch you know really learn

559
00:18:55,120 --> 00:18:56,559
from each other's lessons and each other

560
00:18:56,559 --> 00:18:58,160
each other's tools excellent

561
00:18:58,160 --> 00:19:00,559
presentation we have actually some a lot

562
00:19:00,559 --> 00:19:02,880
of time for questions so let's hear it

563
00:19:02,880 --> 00:19:04,799
um i'm gonna you know work on one of the

564
00:19:04,799 --> 00:19:06,080
biases i've been doing i know i've been

565
00:19:06,080 --> 00:19:08,559
selecting up front um so anyone in the

566
00:19:08,559 --> 00:19:12,799
room uh question for jared

567
00:19:13,600 --> 00:19:15,280
okay i'll take the opportunity myself

568
00:19:15,280 --> 00:19:16,799
then i had a couple of um interesting

569
00:19:16,799 --> 00:19:19,200
things so i've you know obviously a big

570
00:19:19,200 --> 00:19:20,480
fan been reading a lot of your threat

571
00:19:20,480 --> 00:19:22,880
research thanks and you know really from

572
00:19:22,880 --> 00:19:25,120
an enterprise perspective

573
00:19:25,120 --> 00:19:27,120
what would be your advice in terms of

574
00:19:27,120 --> 00:19:28,559
you know i think a lot of what you

575
00:19:28,559 --> 00:19:30,559
highlighted kind of you know highlights

576
00:19:30,559 --> 00:19:32,480
the problem we have with you know

577
00:19:32,480 --> 00:19:34,559
crypto my uh jacking and kind of

578
00:19:34,559 --> 00:19:36,000
resource hijacking kind of in the attack

579
00:19:36,000 --> 00:19:37,039
framework

580
00:19:37,039 --> 00:19:38,960
how how would you sub you know kind of

581
00:19:38,960 --> 00:19:40,799
recommend enterprises and organizations

582
00:19:40,799 --> 00:19:42,240
kind of fit that into their threat model

583
00:19:42,240 --> 00:19:43,840
like is that something that's a high

584
00:19:43,840 --> 00:19:45,440
priority or how do you how do you kind

585
00:19:45,440 --> 00:19:47,280
of prioritize and work into that that's

586
00:19:47,280 --> 00:19:49,280
a great point so oftentimes when i've

587
00:19:49,280 --> 00:19:50,880
run into this i think people kind of

588
00:19:50,880 --> 00:19:52,880
brush it away like oh it's just crypto

589
00:19:52,880 --> 00:19:54,640
jacking the way that i like to rephrase

590
00:19:54,640 --> 00:19:56,480
that is someone gained access to your

591
00:19:56,480 --> 00:19:58,160
environment and then we just leave it

592
00:19:58,160 --> 00:19:59,679
open-ended then we go okay then what

593
00:19:59,679 --> 00:20:01,440
well then they deployed this but it

594
00:20:01,440 --> 00:20:03,600
could have led to something much worse

595
00:20:03,600 --> 00:20:05,360
or perhaps it did depending on the logs

596
00:20:05,360 --> 00:20:06,400
that are available

597
00:20:06,400 --> 00:20:09,280
so i think um overall some people think

598
00:20:09,280 --> 00:20:10,960
of crypto jacking as just a monetary

599
00:20:10,960 --> 00:20:12,480
expense and don't understand the total

600
00:20:12,480 --> 00:20:14,880
impact that it can have on their uh

601
00:20:14,880 --> 00:20:17,360
underlying enterprise and bottom line

602
00:20:17,360 --> 00:20:18,880
exactly because it's not just like you

603
00:20:18,880 --> 00:20:20,559
said it's you know a little minor here

604
00:20:20,559 --> 00:20:22,880
you know a couple cpu cycles here

605
00:20:22,880 --> 00:20:25,679
impact uh you know availability could be

606
00:20:25,679 --> 00:20:28,159
a loss of that system but also as we see

607
00:20:28,159 --> 00:20:29,840
more adversaries go to that access

608
00:20:29,840 --> 00:20:30,880
brokering and you know in your

609
00:20:30,880 --> 00:20:32,240
experience have you seen any of the

610
00:20:32,240 --> 00:20:34,559
overlap there of you know crypto jacker

611
00:20:34,559 --> 00:20:35,760
turns into

612
00:20:35,760 --> 00:20:38,080
more of a campaign so i don't have any

613
00:20:38,080 --> 00:20:39,679
evidence of direct linkage but by all

614
00:20:39,679 --> 00:20:41,280
means right with some of the examples

615
00:20:41,280 --> 00:20:43,200
that we gave today people are deploying

616
00:20:43,200 --> 00:20:45,200
uh remote access utilities and then they

617
00:20:45,200 --> 00:20:47,200
want to monetize your infrastructure as

618
00:20:47,200 --> 00:20:48,640
much as they can so let's start with the

619
00:20:48,640 --> 00:20:50,720
cryptojacking and see what happens yeah

620
00:20:50,720 --> 00:20:52,400
like uh i think it needs to be looked at

621
00:20:52,400 --> 00:20:54,159
more but from that point of a strategic

622
00:20:54,159 --> 00:20:56,480
view excellent and one of the uh see a

623
00:20:56,480 --> 00:20:57,919
couple hands going up i'll circle around

624
00:20:57,919 --> 00:21:00,000
a second sorry but i got a little bit of

625
00:21:00,000 --> 00:21:01,440
a thread here so one of the things that

626
00:21:01,440 --> 00:21:03,520
i saw really resonated in your talk and

627
00:21:03,520 --> 00:21:05,200
connected to what otis was talking about

628
00:21:05,200 --> 00:21:07,600
earlier was the importance as defenders

629
00:21:07,600 --> 00:21:09,280
to understand your system you went

630
00:21:09,280 --> 00:21:11,600
through a lot of really really deep

631
00:21:11,600 --> 00:21:13,600
technical ideas what are recommendations

632
00:21:13,600 --> 00:21:14,960
would you have for organizations in

633
00:21:14,960 --> 00:21:17,440
terms of i'm defending this this is my

634
00:21:17,440 --> 00:21:20,000
surface here this is my org i like oda

635
00:21:20,000 --> 00:21:21,840
said earlier i need to understand this

636
00:21:21,840 --> 00:21:24,240
better than the adversary absolutely so

637
00:21:24,240 --> 00:21:25,360
there's a bunch of different ways to

638
00:21:25,360 --> 00:21:27,280
deploy containers in all of these cloud

639
00:21:27,280 --> 00:21:28,880
environments on-prem et cetera

640
00:21:28,880 --> 00:21:30,559
understanding how you're deploying those

641
00:21:30,559 --> 00:21:32,000
today and then looking at what the

642
00:21:32,000 --> 00:21:33,919
defenses are around those utilities is

643
00:21:33,919 --> 00:21:35,840
going to be kind of a critical step one

644
00:21:35,840 --> 00:21:38,000
and then step two kind of depends on

645
00:21:38,000 --> 00:21:39,840
however you uh have your current

646
00:21:39,840 --> 00:21:42,000
production applications getting deployed

647
00:21:42,000 --> 00:21:43,600
and uh please don't schmoob ball me or

648
00:21:43,600 --> 00:21:44,799
throw anything at me but change

649
00:21:44,799 --> 00:21:46,880
management uh i know that's a big one

650
00:21:46,880 --> 00:21:47,840
kind of keeping track of the

651
00:21:47,840 --> 00:21:50,400
organization but uh i saw a couple hands

652
00:21:50,400 --> 00:21:53,200
come up here uh yeah i wanted to ask you

653
00:21:53,200 --> 00:21:54,960
and you actually

654
00:21:54,960 --> 00:21:57,039
thank you um

655
00:21:57,039 --> 00:21:59,120
one thing that that worries me all the

656
00:21:59,120 --> 00:21:59,919
time

657
00:21:59,919 --> 00:22:01,679
and another i always talk about what

658
00:22:01,679 --> 00:22:03,440
keeps me up at night this is starting to

659
00:22:03,440 --> 00:22:05,360
as i'm moving more into this

660
00:22:05,360 --> 00:22:06,159
um

661
00:22:06,159 --> 00:22:08,640
with the you know you know the ci cd

662
00:22:08,640 --> 00:22:10,240
yeah pipelines

663
00:22:10,240 --> 00:22:12,480
how do you start mapping that because

664
00:22:12,480 --> 00:22:14,799
i'm like a traditional endpoint defender

665
00:22:14,799 --> 00:22:17,440
to map my network i can sort of map my

666
00:22:17,440 --> 00:22:19,360
endpoints

667
00:22:19,360 --> 00:22:21,919
but when i have code coming in as

668
00:22:21,919 --> 00:22:23,440
infrastructure and now they're just

669
00:22:23,440 --> 00:22:25,520
being deployed here and there sure how

670
00:22:25,520 --> 00:22:27,600
do you start mapping that so that's a

671
00:22:27,600 --> 00:22:29,440
really one question one sec uh repeating

672
00:22:29,440 --> 00:22:31,280
for the live audience uh really great

673
00:22:31,280 --> 00:22:32,720
question i really want you to dive into

674
00:22:32,720 --> 00:22:33,600
this but

675
00:22:33,600 --> 00:22:35,840
um you know as we start to look into you

676
00:22:35,840 --> 00:22:38,400
know orchestration and ci cd how do you

677
00:22:38,400 --> 00:22:40,000
how do you map that and how do you track

678
00:22:40,000 --> 00:22:41,360
that in the same way you would do you

679
00:22:41,360 --> 00:22:43,520
know traditional platforms or domains

680
00:22:43,520 --> 00:22:46,159
absolutely so uh there's a really good

681
00:22:46,159 --> 00:22:48,400
open source utility or i should say like

682
00:22:48,400 --> 00:22:50,799
framework called salsa slsa and that

683
00:22:50,799 --> 00:22:52,240
kind of talks about mapping out your

684
00:22:52,240 --> 00:22:54,240
supply chain which includes you know how

685
00:22:54,240 --> 00:22:55,919
are you deploying tools what does your

686
00:22:55,919 --> 00:22:58,240
ci cd look like and where does it end up

687
00:22:58,240 --> 00:23:00,559
so kind of seeing where you go from you

688
00:23:00,559 --> 00:23:03,120
know git repo to production and and

689
00:23:03,120 --> 00:23:04,880
following that thread i think is super

690
00:23:04,880 --> 00:23:06,640
important and then along the way as you

691
00:23:06,640 --> 00:23:08,240
have these service accounts and api

692
00:23:08,240 --> 00:23:09,600
bindings you know have those

693
00:23:09,600 --> 00:23:11,280
conversations of go okay if we had to

694
00:23:11,280 --> 00:23:12,799
you know roll these api keys or all

695
00:23:12,799 --> 00:23:14,880
these ssh keys how easily can we do that

696
00:23:14,880 --> 00:23:17,200
today and what happens if we have to do

697
00:23:17,200 --> 00:23:18,480
that you know who's the change

698
00:23:18,480 --> 00:23:20,080
management who has access to these

699
00:23:20,080 --> 00:23:21,840
things having those conversations today

700
00:23:21,840 --> 00:23:23,600
versus you know in the war room when

701
00:23:23,600 --> 00:23:25,520
things are going on uh we'll definitely

702
00:23:25,520 --> 00:23:28,639
avoid some some headaches

703
00:23:29,280 --> 00:23:31,760
um another uh big one i you kind of

704
00:23:31,760 --> 00:23:33,600
caught caught me off guard i was on your

705
00:23:33,600 --> 00:23:34,720
github like trying to read and i was

706
00:23:34,720 --> 00:23:36,000
like okay i gotta get up here and take

707
00:23:36,000 --> 00:23:38,720
care of jared um looking at the honey

708
00:23:38,720 --> 00:23:40,159
pot yeah no

709
00:23:40,159 --> 00:23:42,080
that's ty even tying back to the earlier

710
00:23:42,080 --> 00:23:44,240
conversation about engage

711
00:23:44,240 --> 00:23:45,919
i know you do a lot of really awesome

712
00:23:45,919 --> 00:23:47,440
like you know projects and research in

713
00:23:47,440 --> 00:23:49,120
the space what recommendations would you

714
00:23:49,120 --> 00:23:50,720
have for folks you know interest like

715
00:23:50,720 --> 00:23:51,760
looking at that github and saying you

716
00:23:51,760 --> 00:23:53,600
know what do i or how do i how do i

717
00:23:53,600 --> 00:23:55,039
safely deploy this and what are kind of

718
00:23:55,039 --> 00:23:56,240
you know getting back to that engaged

719
00:23:56,240 --> 00:23:57,679
talk how do i what are my goals and how

720
00:23:57,679 --> 00:23:59,919
do i like outline in doing this in a

721
00:23:59,919 --> 00:24:03,440
safe but also you know impactful um wait

722
00:24:03,440 --> 00:24:05,120
great question so when you talk about

723
00:24:05,120 --> 00:24:06,960
honey pots um there's always a

724
00:24:06,960 --> 00:24:08,640
conversation of never deploy something

725
00:24:08,640 --> 00:24:10,640
that you don't fully trust or don't

726
00:24:10,640 --> 00:24:12,640
fully understand so

727
00:24:12,640 --> 00:24:14,480
in this case we have as simple as

728
00:24:14,480 --> 00:24:16,720
possible basic python flask app that

729
00:24:16,720 --> 00:24:18,799
just logs the requests as it comes in do

730
00:24:18,799 --> 00:24:20,240
with it what you will

731
00:24:20,240 --> 00:24:22,080
if you start looking at like broader

732
00:24:22,080 --> 00:24:23,840
honeypot projects there's a lot that

733
00:24:23,840 --> 00:24:25,760
have been around for a while not updated

734
00:24:25,760 --> 00:24:28,159
they use you know whatever version of a

735
00:24:28,159 --> 00:24:31,200
specific database and if you just go

736
00:24:31,200 --> 00:24:32,720
off deploying these things you may be

737
00:24:32,720 --> 00:24:34,640
actually introducing more risk just like

738
00:24:34,640 --> 00:24:35,840
you would with any application that

739
00:24:35,840 --> 00:24:37,600
you're deploying so you never get away

740
00:24:37,600 --> 00:24:39,120
from this is still an application that

741
00:24:39,120 --> 00:24:40,400
i'm deploying in my environment i need

742
00:24:40,400 --> 00:24:41,760
to know the left and right bounds and

743
00:24:41,760 --> 00:24:43,360
the specific security controls i have to

744
00:24:43,360 --> 00:24:45,440
have around this and you know the open

745
00:24:45,440 --> 00:24:47,600
firewalls sports and all that great

746
00:24:47,600 --> 00:24:49,600
things so especially with honey pots you

747
00:24:49,600 --> 00:24:50,720
know if you're wrong it's gonna be a

748
00:24:50,720 --> 00:24:52,880
really bad day

749
00:24:52,880 --> 00:24:56,640
very bad yeah um so you know and this is

750
00:24:56,640 --> 00:24:57,919
kind of you know almost a personal

751
00:24:57,919 --> 00:24:59,360
question a lot of ways

752
00:24:59,360 --> 00:25:00,559
um

753
00:25:00,559 --> 00:25:03,279
how what i know i i've tried to read

754
00:25:03,279 --> 00:25:04,720
your blogs i have to read them a couple

755
00:25:04,720 --> 00:25:06,159
times i'm like there's just so much like

756
00:25:06,159 --> 00:25:08,159
information there sure what would you

757
00:25:08,159 --> 00:25:09,600
recommend in terms of first steps in

758
00:25:09,600 --> 00:25:11,360
terms of learning the space because like

759
00:25:11,360 --> 00:25:13,120
you know one of the themes of the day is

760
00:25:13,120 --> 00:25:15,279
like venturing into new domains and new

761
00:25:15,279 --> 00:25:17,760
spaces like kubernetes cloud yeah is it

762
00:25:17,760 --> 00:25:18,960
something where you need to really get

763
00:25:18,960 --> 00:25:21,200
hands-on and kind of feel it or is there

764
00:25:21,200 --> 00:25:22,720
you know a process or a recommendation

765
00:25:22,720 --> 00:25:24,720
that you could share absolutely so uh

766
00:25:24,720 --> 00:25:26,000
the great thing about this industry is

767
00:25:26,000 --> 00:25:27,600
that there's a bunch of crazy things

768
00:25:27,600 --> 00:25:30,159
online to go forth and dive into um and

769
00:25:30,159 --> 00:25:32,240
it can be overwhelming for sure the

770
00:25:32,240 --> 00:25:34,159
value of kind of spending you know a

771
00:25:34,159 --> 00:25:35,919
couple hours at night or on a weekend or

772
00:25:35,919 --> 00:25:38,000
something exploring these things

773
00:25:38,000 --> 00:25:39,039
will just

774
00:25:39,039 --> 00:25:41,360
unlock so many opportunities and you

775
00:25:41,360 --> 00:25:42,799
know specifically personally speaking

776
00:25:42,799 --> 00:25:45,039
i'm big home lab fan so uh you know if

777
00:25:45,039 --> 00:25:46,159
you see honey pots you're interested in

778
00:25:46,159 --> 00:25:48,400
it uh you know deploy one in a vm poke

779
00:25:48,400 --> 00:25:50,240
at it see what you can do uh big fans of

780
00:25:50,240 --> 00:25:52,000
that kind of approach yeah

781
00:25:52,000 --> 00:25:53,840
and uh one of the you know other things

782
00:25:53,840 --> 00:25:55,919
i'm kind of nerding out uh here on jared

783
00:25:55,919 --> 00:25:59,200
sorry but um i appreciated the fact that

784
00:25:59,200 --> 00:26:01,600
in a lot of your blogs it went from you

785
00:26:01,600 --> 00:26:03,760
know you described your process you

786
00:26:03,760 --> 00:26:06,000
described you know how the you know kind

787
00:26:06,000 --> 00:26:08,000
of thoughts you went into work um the

788
00:26:08,000 --> 00:26:09,200
setup you know this is how you would

789
00:26:09,200 --> 00:26:12,000
actually build this thing all the way to

790
00:26:12,000 --> 00:26:13,840
intel production you know any lessons

791
00:26:13,840 --> 00:26:15,919
learned tips in terms of you know

792
00:26:15,919 --> 00:26:17,520
really capturing you know getting back

793
00:26:17,520 --> 00:26:19,760
to yesterday's big theme that story in

794
00:26:19,760 --> 00:26:21,600
terms of you know how

795
00:26:21,600 --> 00:26:23,360
kind of striking that balance i think in

796
00:26:23,360 --> 00:26:25,600
your case you have a very broad audience

797
00:26:25,600 --> 00:26:26,799
where you know there's some folks that

798
00:26:26,799 --> 00:26:28,000
you know you've been watching twitter

799
00:26:28,000 --> 00:26:29,600
before there are some folks that are

800
00:26:29,600 --> 00:26:30,720
like you know pointing out ingrock and

801
00:26:30,720 --> 00:26:32,000
like little things like you have that

802
00:26:32,000 --> 00:26:32,720
like

803
00:26:32,720 --> 00:26:34,720
that reach but also um you did a really

804
00:26:34,720 --> 00:26:36,720
great job kind of you know almost making

805
00:26:36,720 --> 00:26:39,919
it like a 101 where hey like you know

806
00:26:39,919 --> 00:26:42,080
do this you know like like johnny said

807
00:26:42,080 --> 00:26:44,480
yesterday take risk learn something and

808
00:26:44,480 --> 00:26:47,120
by the end in my experience personally

809
00:26:47,120 --> 00:26:48,320
read it once i was like oh there's a

810
00:26:48,320 --> 00:26:49,760
little stuff a bunch of that over my

811
00:26:49,760 --> 00:26:51,600
head read it again a little more and a

812
00:26:51,600 --> 00:26:53,200
little more how do you what's your kind

813
00:26:53,200 --> 00:26:54,480
of take in terms of you know striking

814
00:26:54,480 --> 00:26:56,880
that balance that's a great question uh

815
00:26:56,880 --> 00:26:58,320
i don't think i have a great answer yeah

816
00:26:58,320 --> 00:27:00,799
yeah probably great uh starting small um

817
00:27:00,799 --> 00:27:02,080
and kind of by doing what you can with

818
00:27:02,080 --> 00:27:04,960
what you got right um so you know

819
00:27:04,960 --> 00:27:06,320
for this uh some of the blogs we put out

820
00:27:06,320 --> 00:27:08,559
here uh we focus pretty heavily on aws

821
00:27:08,559 --> 00:27:10,400
but by all means if you're like a gcp

822
00:27:10,400 --> 00:27:12,400
shop or insert on-prem or whatever have

823
00:27:12,400 --> 00:27:14,480
you look at how you can kind of like uh

824
00:27:14,480 --> 00:27:15,919
map some of those things and that's an

825
00:27:15,919 --> 00:27:17,679
exercise in its own right of how you can

826
00:27:17,679 --> 00:27:19,600
go about getting similar data sources

827
00:27:19,600 --> 00:27:21,520
and and deepening diving into that yeah

828
00:27:21,520 --> 00:27:23,600
so really really yeah but i think it's

829
00:27:23,600 --> 00:27:25,360
always hard when you start research to

830
00:27:25,360 --> 00:27:27,200
know your goals and you know know your

831
00:27:27,200 --> 00:27:28,960
process but like like you said like

832
00:27:28,960 --> 00:27:30,480
iterate and kind of capture that and you

833
00:27:30,480 --> 00:27:32,080
know tune it over time

834
00:27:32,080 --> 00:27:34,240
coming up on time here but you know one

835
00:27:34,240 --> 00:27:35,760
final question unless there's something

836
00:27:35,760 --> 00:27:38,960
you don't want to cut sorry

837
00:27:42,399 --> 00:27:44,480
really interesting question um for the

838
00:27:44,480 --> 00:27:46,960
live audience how do you feel about you

839
00:27:46,960 --> 00:27:49,120
know kind of that model of you know

840
00:27:49,120 --> 00:27:50,880
provider versus i think it's called like

841
00:27:50,880 --> 00:27:53,200
almost a dichotomy of you as the user

842
00:27:53,200 --> 00:27:55,120
versus the provider in terms of you know

843
00:27:55,120 --> 00:27:56,640
eula's terms of service you know how

844
00:27:56,640 --> 00:27:58,159
does that is that really something you

845
00:27:58,159 --> 00:28:00,000
can exploit for security or is something

846
00:28:00,000 --> 00:28:01,679
that maybe a barrier or is a little bit

847
00:28:01,679 --> 00:28:04,399
of both so anything with a eula they

848
00:28:04,399 --> 00:28:06,640
have better lawyers than i do so by all

849
00:28:06,640 --> 00:28:08,240
means understand what those left and

850
00:28:08,240 --> 00:28:10,000
right bounds are and don't cross them

851
00:28:10,000 --> 00:28:12,159
right specifically uh bringing up cloud

852
00:28:12,159 --> 00:28:13,679
providers and like pen tests obviously

853
00:28:13,679 --> 00:28:14,960
there's specific left and right

854
00:28:14,960 --> 00:28:16,480
engagements around this

855
00:28:16,480 --> 00:28:18,240
in this case for what we did here right

856
00:28:18,240 --> 00:28:20,559
it was uh just listening on a specific

857
00:28:20,559 --> 00:28:22,640
port and incoming data just got logged

858
00:28:22,640 --> 00:28:24,799
to disk nothing super fancy about that

859
00:28:24,799 --> 00:28:27,679
but by all means you know if it's

860
00:28:27,679 --> 00:28:28,960
something that you're looking at

861
00:28:28,960 --> 00:28:30,399
deploying definitely make sure that

862
00:28:30,399 --> 00:28:32,240
you've uh got all the things crossed

863
00:28:32,240 --> 00:28:34,080
with legal before you do that

864
00:28:34,080 --> 00:28:35,840
shared security model just remembered it

865
00:28:35,840 --> 00:28:37,440
yeah that was like cat said earlier

866
00:28:37,440 --> 00:28:39,600
vocabulary is very hard uh final

867
00:28:39,600 --> 00:28:41,840
question is you know along that same

868
00:28:41,840 --> 00:28:43,840
vein

869
00:28:43,840 --> 00:28:46,159
when you do kind of have you know your

870
00:28:46,159 --> 00:28:47,520
your hands up there's only so much you

871
00:28:47,520 --> 00:28:49,440
can do as a user what's your advice i

872
00:28:49,440 --> 00:28:51,120
know it's probably come up in your space

873
00:28:51,120 --> 00:28:52,320
in working with the vendors you know

874
00:28:52,320 --> 00:28:53,760
there's only like especially with some

875
00:28:53,760 --> 00:28:55,360
of these vendors where you might not be

876
00:28:55,360 --> 00:28:57,200
it's not open source so you have to talk

877
00:28:57,200 --> 00:28:58,799
to them is there any advice or any

878
00:28:58,799 --> 00:29:00,480
approaches that we can use to kind of

879
00:29:00,480 --> 00:29:02,399
like i said bridge that gap in terms of

880
00:29:02,399 --> 00:29:05,039
responsibility between user and you know

881
00:29:05,039 --> 00:29:06,640
service provider at the end of the day

882
00:29:06,640 --> 00:29:08,399
everyone's human and you know if he goes

883
00:29:08,399 --> 00:29:09,679
i'm like hey i got my problem i was

884
00:29:09,679 --> 00:29:11,360
expecting a i got b

885
00:29:11,360 --> 00:29:12,880
just approaching it like you were like a

886
00:29:12,880 --> 00:29:13,919
conversation just because it's over

887
00:29:13,919 --> 00:29:15,200
email you know i don't think i treat it

888
00:29:15,200 --> 00:29:17,919
any differently so just approaching it

889
00:29:17,919 --> 00:29:19,919
in a normal fashion like a conversation

890
00:29:19,919 --> 00:29:21,360
lawyers are people too lawyers people

891
00:29:21,360 --> 00:29:24,840
too thank you

892
00:29:24,890 --> 00:29:28,469
[Applause]

893
00:29:30,960 --> 00:29:33,039
you

