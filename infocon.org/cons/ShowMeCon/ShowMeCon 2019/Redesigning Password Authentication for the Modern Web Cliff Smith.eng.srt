1
00:00:00,000 --> 00:00:04,500
like that instead what we're going to do

2
00:00:02,280 --> 00:00:06,720
is we're going to re-engineer the way

3
00:00:04,500 --> 00:00:09,030
password authentication works on the web

4
00:00:06,720 --> 00:00:11,250
by way of preview we're going to do

5
00:00:09,030 --> 00:00:13,290
client-side hashing we're going to use

6
00:00:11,250 --> 00:00:14,940
an H Mac for authentication we will talk

7
00:00:13,290 --> 00:00:16,859
in detail about what that means later

8
00:00:14,940 --> 00:00:18,660
and we're going to add a lot of

9
00:00:16,859 --> 00:00:20,699
resistance to some of the common attacks

10
00:00:18,660 --> 00:00:23,070
against passwords as they are used in

11
00:00:20,699 --> 00:00:25,050
the web browser now this is a perennial

12
00:00:23,070 --> 00:00:27,869
topic of conversation client-side

13
00:00:25,050 --> 00:00:30,150
hashing specifically on stack overflow

14
00:00:27,869 --> 00:00:31,740
and on every other programmer discussion

15
00:00:30,150 --> 00:00:33,719
site on the web most of the sources

16
00:00:31,740 --> 00:00:35,820
there agree that it's a bad idea but we

17
00:00:33,719 --> 00:00:38,340
have two improvements over the way that

18
00:00:35,820 --> 00:00:40,410
this is usually discussed we're going to

19
00:00:38,340 --> 00:00:44,250
actually move the password form out of

20
00:00:40,410 --> 00:00:45,809
the Dom out of the web page and well

21
00:00:44,250 --> 00:00:47,309
like I said we're gonna use an h-back to

22
00:00:45,809 --> 00:00:49,410
authenticate instead of just sending the

23
00:00:47,309 --> 00:00:51,510
password over the wire so this is gonna

24
00:00:49,410 --> 00:00:54,209
be fairly technical feel free to shout

25
00:00:51,510 --> 00:00:55,260
out questions or anything like that so

26
00:00:54,210 --> 00:00:57,660
like I said I work for parameter

27
00:00:55,260 --> 00:00:59,430
security I primarily play offense I

28
00:00:57,660 --> 00:01:02,190
break into web applications I break into

29
00:00:59,430 --> 00:01:03,780
network servers when I do research and

30
00:01:02,190 --> 00:01:05,399
teaching and speaking and training that

31
00:01:03,780 --> 00:01:07,830
is usually on the defensive side so I

32
00:01:05,400 --> 00:01:10,350
train programmers and and stuff like

33
00:01:07,830 --> 00:01:12,450
that my alphabet soup resume is on this

34
00:01:10,350 --> 00:01:14,759
slide if you care most critically I'm

35
00:01:12,450 --> 00:01:16,830
not a cryptographer I don't have PhD in

36
00:01:14,760 --> 00:01:18,390
crypto or any kind of degree in it no

37
00:01:16,830 --> 00:01:19,798
formal training whatsoever and to be

38
00:01:18,390 --> 00:01:22,619
honest I'm probably not qualified to

39
00:01:19,799 --> 00:01:27,390
have opinions on the subject that being

40
00:01:22,619 --> 00:01:28,560
said let's talk crypto so let's start by

41
00:01:27,390 --> 00:01:31,200
addressing an important threshold

42
00:01:28,560 --> 00:01:33,540
question there are a lot of folks out

43
00:01:31,200 --> 00:01:35,460
there who think the password security is

44
00:01:33,540 --> 00:01:38,549
just not a thing anymore or it won't be

45
00:01:35,460 --> 00:01:39,899
very shortly either because a passwords

46
00:01:38,549 --> 00:01:43,500
are about to go the way of the dodo bird

47
00:01:39,900 --> 00:01:45,630
or B technologies like multi factor auth

48
00:01:43,500 --> 00:01:47,250
etcetera are going to mean that password

49
00:01:45,630 --> 00:01:48,630
security just doesn't matter as much

50
00:01:47,250 --> 00:01:50,520
anymore because there are other coups

51
00:01:48,630 --> 00:01:53,009
you have to jump through to compromise

52
00:01:50,520 --> 00:01:55,860
an account I disagree I think

53
00:01:53,009 --> 00:01:58,290
multi-factor off wonderful development I

54
00:01:55,860 --> 00:02:00,719
think it's more widespread adoption is

55
00:01:58,290 --> 00:02:02,909
going to be fantastic for info SEC but

56
00:02:00,719 --> 00:02:04,770
password security in my opinion still

57
00:02:02,909 --> 00:02:07,050
matters and it is going to matter for a

58
00:02:04,770 --> 00:02:09,900
very very long time

59
00:02:07,050 --> 00:02:11,190
and so let's take care of an easy one

60
00:02:09,900 --> 00:02:14,040
really quickly who here thinks that

61
00:02:11,190 --> 00:02:17,090
biometric off is going to mean passwords

62
00:02:14,040 --> 00:02:20,190
are done or they're not going to matter

63
00:02:17,090 --> 00:02:22,560
okay I won't preach to the choir but the

64
00:02:20,190 --> 00:02:24,030
argument goes like this what happens

65
00:02:22,560 --> 00:02:26,250
when someone creates a model of your

66
00:02:24,030 --> 00:02:28,350
face good enough to fool a facial

67
00:02:26,250 --> 00:02:31,050
recognition scanner you will be forever

68
00:02:28,350 --> 00:02:34,200
and irrevocably hosed the moment your

69
00:02:31,050 --> 00:02:37,260
biometric identity gets compromised kick

70
00:02:34,200 --> 00:02:39,149
that one out the door right now but the

71
00:02:37,260 --> 00:02:40,859
standards that I think provide the best

72
00:02:39,150 --> 00:02:43,140
argument for the passwords don't matter

73
00:02:40,860 --> 00:02:44,400
anymore crowd our set of standards

74
00:02:43,140 --> 00:02:45,600
coming from a group called the phyto

75
00:02:44,400 --> 00:02:47,060
Alliance and let's talk through them

76
00:02:45,600 --> 00:02:50,040
just a little bit to show what they do

77
00:02:47,060 --> 00:02:52,830
for authentication and security the

78
00:02:50,040 --> 00:02:54,510
basic idea of these systems is that we

79
00:02:52,830 --> 00:02:57,420
have a public private key pair that

80
00:02:54,510 --> 00:02:59,640
usually is stored on a USB token that

81
00:02:57,420 --> 00:03:03,600
looks just like that anybody have one of

82
00:02:59,640 --> 00:03:03,899
those a yubico key mines right here love

83
00:03:03,600 --> 00:03:05,910
it

84
00:03:03,900 --> 00:03:08,490
excellent of the best security purchases

85
00:03:05,910 --> 00:03:10,470
I've ever made personally and so the

86
00:03:08,490 --> 00:03:13,230
basic idea is that when you enroll this

87
00:03:10,470 --> 00:03:15,239
device in your account you send the

88
00:03:13,230 --> 00:03:16,769
public key to the server that stores

89
00:03:15,239 --> 00:03:18,810
your password and everything else and

90
00:03:16,770 --> 00:03:20,820
then when you want to authenticate you

91
00:03:18,810 --> 00:03:22,590
plug this into your computer you perform

92
00:03:20,820 --> 00:03:25,320
a physical gesture you touch that gold

93
00:03:22,590 --> 00:03:27,690
key in the case of a yubico key and then

94
00:03:25,320 --> 00:03:29,519
your client cryptographically signs a

95
00:03:27,690 --> 00:03:31,620
challenge message and sends that

96
00:03:29,520 --> 00:03:33,600
signature back to the server this

97
00:03:31,620 --> 00:03:35,910
provides all kinds of security benefits

98
00:03:33,600 --> 00:03:38,489
perhaps most importantly there's nothing

99
00:03:35,910 --> 00:03:40,320
to fish there's no secret that the user

100
00:03:38,489 --> 00:03:42,810
is typing in that we can trick them into

101
00:03:40,320 --> 00:03:44,459
telling us there's nothing to sniff off

102
00:03:42,810 --> 00:03:47,340
the wire if we do sniff it off the wire

103
00:03:44,459 --> 00:03:49,200
all we've got is a single signed message

104
00:03:47,340 --> 00:03:52,110
we can't reuse that for future

105
00:03:49,200 --> 00:03:53,730
authentication attempts and so there are

106
00:03:52,110 --> 00:03:56,070
two different ways that this type of

107
00:03:53,730 --> 00:03:58,920
this these standards can be deployed

108
00:03:56,070 --> 00:04:01,200
first there's the u2f standard which is

109
00:03:58,920 --> 00:04:02,299
universal second factor it's just a

110
00:04:01,200 --> 00:04:06,600
second factor of authentication

111
00:04:02,300 --> 00:04:09,209
something you have that complements the

112
00:04:06,600 --> 00:04:11,430
password which is something you know

113
00:04:09,209 --> 00:04:14,130
very very good all right class is in

114
00:04:11,430 --> 00:04:15,840
session so if you two F is adopted

115
00:04:14,130 --> 00:04:18,029
universally passwords do become a little

116
00:04:15,840 --> 00:04:20,858
less important arguably and you can also

117
00:04:18,029 --> 00:04:22,869
use this key as a single

118
00:04:20,858 --> 00:04:25,299
factor password free authentication

119
00:04:22,870 --> 00:04:27,689
system people been doing this for years

120
00:04:25,300 --> 00:04:30,129
I think back in 2014 I want to say

121
00:04:27,689 --> 00:04:32,830
someone implemented password free

122
00:04:30,129 --> 00:04:35,860
authentication using the secure Enclave

123
00:04:32,830 --> 00:04:37,870
on the iPhone and using undocumented API

124
00:04:35,860 --> 00:04:40,750
functions that let you do exactly this

125
00:04:37,870 --> 00:04:42,069
and of course web often is the name of

126
00:04:40,750 --> 00:04:44,830
the standard that integrates this into a

127
00:04:42,069 --> 00:04:47,979
browser it's worth knowing so with all

128
00:04:44,830 --> 00:04:51,159
this is the phyto alliance going to kill

129
00:04:47,979 --> 00:04:53,318
passwords and I think the answer is No

130
00:04:51,159 --> 00:04:56,139
first reason web often the standard lets

131
00:04:53,319 --> 00:04:58,000
us do this in the web browser has a baby

132
00:04:56,139 --> 00:05:00,340
standard it's less than three months old

133
00:04:58,000 --> 00:05:03,400
right the crypto that lets us do that by

134
00:05:00,340 --> 00:05:06,188
the way very old in that the RSA paper

135
00:05:03,400 --> 00:05:08,138
the paper that announced one of the most

136
00:05:06,189 --> 00:05:11,409
important public key cryptosystems on

137
00:05:08,139 --> 00:05:13,090
the planet it was published in 1977 the

138
00:05:11,409 --> 00:05:16,139
movie Smokey and the Bandit was still in

139
00:05:13,090 --> 00:05:19,119
post when this cryptography came out and

140
00:05:16,139 --> 00:05:21,129
that is that is a lesson worth learning

141
00:05:19,120 --> 00:05:23,560
that it's not the technology it's not

142
00:05:21,129 --> 00:05:25,240
the crypto the math that prevents us

143
00:05:23,560 --> 00:05:27,009
from doing good things with off and

144
00:05:25,240 --> 00:05:29,050
other types of security it's the

145
00:05:27,009 --> 00:05:30,789
standards it's the documents and the

146
00:05:29,050 --> 00:05:32,589
rule sets by which we agree how to

147
00:05:30,789 --> 00:05:34,270
deploy this in an in a interoperable

148
00:05:32,589 --> 00:05:36,699
manner I think that's true across the

149
00:05:34,270 --> 00:05:38,490
board so it's far too early to say that

150
00:05:36,699 --> 00:05:41,469
passwords are going to be murdered by

151
00:05:38,490 --> 00:05:44,199
the phyto to authentication system

152
00:05:41,469 --> 00:05:46,599
anybody have a service where there's a

153
00:05:44,199 --> 00:05:49,659
remember me next time option where you

154
00:05:46,599 --> 00:05:51,069
don't have to insert your USB key you

155
00:05:49,659 --> 00:05:54,279
don't have to do the second factor

156
00:05:51,069 --> 00:05:58,060
there's potential bypass mechanism what

157
00:05:54,279 --> 00:06:00,129
happens if you lose your token cost you

158
00:05:58,060 --> 00:06:01,900
more to replace it might be harder to

159
00:06:00,129 --> 00:06:05,229
regain access to your account depending

160
00:06:01,900 --> 00:06:07,179
on exactly how its deployed and let's

161
00:06:05,229 --> 00:06:08,859
also be honest the people in this room

162
00:06:07,180 --> 00:06:10,960
we're all interested in security at

163
00:06:08,860 --> 00:06:13,419
least some what how many of the average

164
00:06:10,960 --> 00:06:16,120
users do you think are really gonna be

165
00:06:13,419 --> 00:06:18,099
that interested now I'm gonna get up on

166
00:06:16,120 --> 00:06:20,400
my soapbox a little bit as security

167
00:06:18,099 --> 00:06:22,479
professionals yes it is our job to

168
00:06:20,400 --> 00:06:24,008
evangelize to preach the gospel of

169
00:06:22,479 --> 00:06:25,900
security and to encourage people to

170
00:06:24,009 --> 00:06:28,569
build good habits but at the same time

171
00:06:25,900 --> 00:06:29,630
it's also our job to meet people where

172
00:06:28,569 --> 00:06:31,300
they are

173
00:06:29,630 --> 00:06:34,010
make the digital world a safer place

174
00:06:31,300 --> 00:06:36,670
even for people who don't always take

175
00:06:34,010 --> 00:06:41,060
our advice which is everybody so

176
00:06:36,670 --> 00:06:42,590
dismount passwords one of the biggest

177
00:06:41,060 --> 00:06:45,350
benefits of passwords is that they are

178
00:06:42,590 --> 00:06:48,109
ultra portable anyplace you have a

179
00:06:45,350 --> 00:06:50,240
keyboard you have the ability to enter a

180
00:06:48,110 --> 00:06:52,460
password you can borrow somebody's phone

181
00:06:50,240 --> 00:06:54,290
you can go to a conference center and

182
00:06:52,460 --> 00:06:56,870
use their public computer and type your

183
00:06:54,290 --> 00:06:59,180
password in which does have its own set

184
00:06:56,870 --> 00:07:01,550
of security risks no doubt but in terms

185
00:06:59,180 --> 00:07:04,100
of accessibility passwords really can't

186
00:07:01,550 --> 00:07:06,080
be beat and of course password breaches

187
00:07:04,100 --> 00:07:07,730
can be remedied quickly hell of a lot

188
00:07:06,080 --> 00:07:09,859
easier to get a new password than to get

189
00:07:07,730 --> 00:07:11,360
a new face or to get new fingerprints

190
00:07:09,860 --> 00:07:14,390
even if you live in the men in black

191
00:07:11,360 --> 00:07:17,030
universe so in short my opinion on this

192
00:07:14,390 --> 00:07:20,930
until this is what google's registration

193
00:07:17,030 --> 00:07:22,460
page looks like until we see insert your

194
00:07:20,930 --> 00:07:24,500
hardware security key and press the

195
00:07:22,460 --> 00:07:26,539
enroll button with a tiny little option

196
00:07:24,500 --> 00:07:29,270
underneath it says I'll use a password

197
00:07:26,540 --> 00:07:30,860
instead if you want until this is the

198
00:07:29,270 --> 00:07:33,770
world we live in we need to care about

199
00:07:30,860 --> 00:07:36,370
password security that's my humble

200
00:07:33,770 --> 00:07:39,710
opinion so with that question addressed

201
00:07:36,370 --> 00:07:43,760
let's look at the way passwords are done

202
00:07:39,710 --> 00:07:46,370
in the web browser the web don't

203
00:07:43,760 --> 00:07:48,349
password good that's my opinion and the

204
00:07:46,370 --> 00:07:50,120
core of the reason why is that we send

205
00:07:48,350 --> 00:07:53,480
the password across the wire every

206
00:07:50,120 --> 00:07:54,860
single time we authenticate so Dave

207
00:07:53,480 --> 00:07:57,140
Vaughn actually an imagination is

208
00:07:54,860 --> 00:07:58,820
talking about attacking passwords doing

209
00:07:57,140 --> 00:08:01,880
offline attacks crafting dictionaries

210
00:07:58,820 --> 00:08:03,740
all that kind of stuff but this is what

211
00:08:01,880 --> 00:08:06,530
it looks like from the defensive side if

212
00:08:03,740 --> 00:08:07,730
you log in you literally post a request

213
00:08:06,530 --> 00:08:10,700
to the server that says here's my

214
00:08:07,730 --> 00:08:12,560
username and here's my password the

215
00:08:10,700 --> 00:08:14,570
server pulls the salt out of the

216
00:08:12,560 --> 00:08:17,090
database salted hashes are designed to

217
00:08:14,570 --> 00:08:18,860
prevent pre-computation attacks you deny

218
00:08:17,090 --> 00:08:20,570
the attacker an economy of scale because

219
00:08:18,860 --> 00:08:23,450
in short you have to attack the

220
00:08:20,570 --> 00:08:25,640
passwords one at a time so two users

221
00:08:23,450 --> 00:08:27,800
could have the same password and because

222
00:08:25,640 --> 00:08:30,409
we add a random string to the password

223
00:08:27,800 --> 00:08:31,790
before we hash it those two passwords

224
00:08:30,410 --> 00:08:33,440
even though they might be the same they

225
00:08:31,790 --> 00:08:35,080
might have different hashes that's a

226
00:08:33,440 --> 00:08:37,880
brief summary of why we salt passwords

227
00:08:35,080 --> 00:08:39,229
so what's the problem with this what's

228
00:08:37,880 --> 00:08:41,409
the problem with sending passwords

229
00:08:39,229 --> 00:08:43,840
across the wire like that well

230
00:08:41,409 --> 00:08:45,850
all kinds of things it's capital B bad

231
00:08:43,840 --> 00:08:47,320
there are flaws in the transport layer

232
00:08:45,850 --> 00:08:49,780
all the time now I'm not talking about

233
00:08:47,320 --> 00:08:51,730
plain text HTTP who in here uses plain

234
00:08:49,780 --> 00:08:53,740
text HTTP for any production service

235
00:08:51,730 --> 00:08:57,220
who's willing to admit that out loud

236
00:08:53,740 --> 00:09:01,150
nobody good what is the the free source

237
00:08:57,220 --> 00:09:02,980
for SSL Certificates anybody know let's

238
00:09:01,150 --> 00:09:04,959
encrypt yes everyone in this room should

239
00:09:02,980 --> 00:09:07,660
know about let's encrypt it makes SSL

240
00:09:04,960 --> 00:09:10,510
TLS so much more accessible and it is an

241
00:09:07,660 --> 00:09:13,900
absolutely indispensable part of the web

242
00:09:10,510 --> 00:09:16,330
security ecosystem there's a buzzword

243
00:09:13,900 --> 00:09:18,819
for you so flaws in the transport layer

244
00:09:16,330 --> 00:09:20,320
who remembers heartbleed anybody ever

245
00:09:18,820 --> 00:09:21,730
popped in real life anybody ever

246
00:09:20,320 --> 00:09:24,430
exploited it and gotten some useful

247
00:09:21,730 --> 00:09:26,980
information yep we've gotten passwords

248
00:09:24,430 --> 00:09:28,770
before just having the password in RAM

249
00:09:26,980 --> 00:09:31,750
could be dangerous

250
00:09:28,770 --> 00:09:33,460
CAS can be compromised it has happened

251
00:09:31,750 --> 00:09:35,380
more than once trusty Co not too long

252
00:09:33,460 --> 00:09:38,590
ago in February 2018 it was discovered

253
00:09:35,380 --> 00:09:41,110
that about 500 rogue SSL certificates

254
00:09:38,590 --> 00:09:42,570
were issued by that CA it's a big ol

255
00:09:41,110 --> 00:09:45,670
honkin mess to clean up

256
00:09:42,570 --> 00:09:47,740
SSL certificates are the foundation of

257
00:09:45,670 --> 00:09:49,390
the trust that makes the web work and

258
00:09:47,740 --> 00:09:52,030
when that trust is compromised holy

259
00:09:49,390 --> 00:09:54,280
goodness do you have problems so that

260
00:09:52,030 --> 00:09:57,280
the transport layer can betray us side

261
00:09:54,280 --> 00:09:59,110
channel leakage Twitter and github both

262
00:09:57,280 --> 00:10:00,550
had recent problems with passwords

263
00:09:59,110 --> 00:10:05,050
anybody know where the passwords were

264
00:10:00,550 --> 00:10:06,849
leaked in plain text log files passwords

265
00:10:05,050 --> 00:10:08,770
are stored in plain text and log files

266
00:10:06,850 --> 00:10:10,360
now as far as I know they didn't have

267
00:10:08,770 --> 00:10:13,750
evidence that anybody actually stole

268
00:10:10,360 --> 00:10:15,160
them but that is a big glaring security

269
00:10:13,750 --> 00:10:16,230
hole to have them just sitting there in

270
00:10:15,160 --> 00:10:19,300
plain text

271
00:10:16,230 --> 00:10:21,070
rogue JavaScript all over the place

272
00:10:19,300 --> 00:10:22,599
cross-site scripting for example any

273
00:10:21,070 --> 00:10:24,850
time there's malicious JavaScript

274
00:10:22,600 --> 00:10:26,860
running in a browser tab the creator of

275
00:10:24,850 --> 00:10:29,500
that JavaScript can mess with you they

276
00:10:26,860 --> 00:10:33,040
can present you a fake looking login

277
00:10:29,500 --> 00:10:34,780
form or if they XSS another site they

278
00:10:33,040 --> 00:10:36,520
can literally use JavaScript to capture

279
00:10:34,780 --> 00:10:39,730
your keystrokes one at a time and phone

280
00:10:36,520 --> 00:10:41,890
them home to another server just out of

281
00:10:39,730 --> 00:10:43,750
curiosity when I was prepping this I

282
00:10:41,890 --> 00:10:45,370
went to yahoo.com and tracked how many

283
00:10:43,750 --> 00:10:47,320
different JavaScript files were loaded

284
00:10:45,370 --> 00:10:50,640
and executed in my browser with all my

285
00:10:47,320 --> 00:10:53,980
ad blockers off any guesses how many

286
00:10:50,640 --> 00:10:57,069
well 15 anybody else

287
00:10:53,980 --> 00:11:01,060
not 5,000 so more than 50 less than

288
00:10:57,070 --> 00:11:03,040
5,000 it was 173 loaded from 17

289
00:11:01,060 --> 00:11:05,500
different domains if I'm an attacker

290
00:11:03,040 --> 00:11:07,390
that's a big attack surface I got a lot

291
00:11:05,500 --> 00:11:08,710
of different SSL private keys I could

292
00:11:07,390 --> 00:11:10,660
compromise a lot of different web

293
00:11:08,710 --> 00:11:12,160
servers I could pop and control that

294
00:11:10,660 --> 00:11:14,709
JavaScript running in your browser and

295
00:11:12,160 --> 00:11:19,180
of course the big granddaddy of them all

296
00:11:14,710 --> 00:11:21,370
fishing fishing is one of the biggest

297
00:11:19,180 --> 00:11:23,109
attack vectors in real breaches and one

298
00:11:21,370 --> 00:11:25,060
of the reasons why it's so dangerous is

299
00:11:23,110 --> 00:11:26,410
that those of us who have good passwords

300
00:11:25,060 --> 00:11:29,380
who's proud of their password in here

301
00:11:26,410 --> 00:11:31,060
I am the the password to get into this

302
00:11:29,380 --> 00:11:32,740
laptop right here is like 40 characters

303
00:11:31,060 --> 00:11:37,030
or something like that it's a decent

304
00:11:32,740 --> 00:11:38,500
password but if someone can fish me so

305
00:11:37,030 --> 00:11:40,240
long as we're sending passwords and

306
00:11:38,500 --> 00:11:42,160
plaintext over the wire someone fishes

307
00:11:40,240 --> 00:11:45,700
me they got my password no matter how

308
00:11:42,160 --> 00:11:47,439
strong it is now passwords present a

309
00:11:45,700 --> 00:11:49,660
very unique security problem they are

310
00:11:47,440 --> 00:11:51,720
used for authentication but we all know

311
00:11:49,660 --> 00:11:55,660
that people including our beloved users

312
00:11:51,720 --> 00:11:57,940
reuse passwords so a password if you

313
00:11:55,660 --> 00:11:59,949
steal it can not only get you into the

314
00:11:57,940 --> 00:12:02,380
account where you found it it can get

315
00:11:59,950 --> 00:12:04,930
you into other accounts a password from

316
00:12:02,380 --> 00:12:07,360
Twitter might get you into someone's you

317
00:12:04,930 --> 00:12:09,040
know Charles Schwab account or into

318
00:12:07,360 --> 00:12:10,000
their yachts dot-com account or whatever

319
00:12:09,040 --> 00:12:13,020
else it might be

320
00:12:10,000 --> 00:12:15,340
now passwords obviously aren't the only

321
00:12:13,020 --> 00:12:17,350
sensitive thing we transmit over the web

322
00:12:15,340 --> 00:12:19,510
we transmit social security numbers

323
00:12:17,350 --> 00:12:20,680
sometimes credit card numbers that you

324
00:12:19,510 --> 00:12:23,860
know whatever else people care about

325
00:12:20,680 --> 00:12:25,479
keeping private but passwords there's a

326
00:12:23,860 --> 00:12:27,910
certain automaticity with the way we

327
00:12:25,480 --> 00:12:29,380
type them in we see a login prompt our

328
00:12:27,910 --> 00:12:31,569
fingers are used to typing in our

329
00:12:29,380 --> 00:12:32,740
password well you don't have to think

330
00:12:31,570 --> 00:12:33,790
about the letters and numbers you're

331
00:12:32,740 --> 00:12:35,950
typing when you type your password

332
00:12:33,790 --> 00:12:38,860
sometimes if it's a password you used

333
00:12:35,950 --> 00:12:40,300
for a long time anybody else experienced

334
00:12:38,860 --> 00:12:41,350
that where your fingers just know what

335
00:12:40,300 --> 00:12:43,810
to type and you don't have to think

336
00:12:41,350 --> 00:12:46,060
about it that makes it a lot easier to

337
00:12:43,810 --> 00:12:48,699
get someone's password than to get their

338
00:12:46,060 --> 00:12:50,410
social with phishing well that happens

339
00:12:48,700 --> 00:12:52,930
as well can you think of another

340
00:12:50,410 --> 00:12:55,209
protocol that we use as frequently and

341
00:12:52,930 --> 00:12:56,790
that we do as many different things in

342
00:12:55,210 --> 00:13:00,040
than HTTP

343
00:12:56,790 --> 00:13:05,880
does anybody Bank over SSH does anybody

344
00:13:00,040 --> 00:13:05,880
do online dating through SFTP

345
00:13:06,100 --> 00:13:10,720
not that I know of phishing is a silver

346
00:13:08,650 --> 00:13:13,030
bullet and it's a dangerous one but the

347
00:13:10,720 --> 00:13:14,440
unique aspect of passwords that works in

348
00:13:13,030 --> 00:13:15,910
our favor is that technically speaking

349
00:13:14,440 --> 00:13:17,230
the server doesn't have to know what

350
00:13:15,910 --> 00:13:18,760
your password is they don't even have

351
00:13:17,230 --> 00:13:21,340
theoretically have to have the hash of

352
00:13:18,760 --> 00:13:23,590
it all they have to have is a way that

353
00:13:21,340 --> 00:13:26,410
is cryptographically sound of verifying

354
00:13:23,590 --> 00:13:28,150
that you have the password that's going

355
00:13:26,410 --> 00:13:30,400
to be what we rely on when we build our

356
00:13:28,150 --> 00:13:31,660
better authentication system now like I

357
00:13:30,400 --> 00:13:34,240
said there are a million Stack Overflow

358
00:13:31,660 --> 00:13:35,949
threads about this here's the way people

359
00:13:34,240 --> 00:13:38,200
typically suggest doing client-side

360
00:13:35,950 --> 00:13:39,850
password hashing you send the salt to

361
00:13:38,200 --> 00:13:42,160
the browser when the user types in their

362
00:13:39,850 --> 00:13:45,760
username JavaScript running in the

363
00:13:42,160 --> 00:13:47,829
browser does shop 256 or pbkdf2 of the

364
00:13:45,760 --> 00:13:50,380
password and salt and then submits that

365
00:13:47,830 --> 00:13:52,720
value in the forum this is how people

366
00:13:50,380 --> 00:13:54,340
usually suggest doing it there are a

367
00:13:52,720 --> 00:13:57,130
couple problems with it as people are

368
00:13:54,340 --> 00:13:58,320
want to point out online when you do

369
00:13:57,130 --> 00:14:00,760
this you're making the hash the password

370
00:13:58,320 --> 00:14:03,700
the hash itself is the shared secret

371
00:14:00,760 --> 00:14:06,010
that you have to submit over the wire so

372
00:14:03,700 --> 00:14:08,620
you're just you know substituting one

373
00:14:06,010 --> 00:14:10,030
weak point for another in a way and if

374
00:14:08,620 --> 00:14:11,830
you're doing this with JavaScript that

375
00:14:10,030 --> 00:14:13,060
sits in the browser what happens if

376
00:14:11,830 --> 00:14:14,800
you've got an active man in the middle

377
00:14:13,060 --> 00:14:16,359
who can modify your network traffic what

378
00:14:14,800 --> 00:14:18,760
happens if you're actually on a phishing

379
00:14:16,360 --> 00:14:21,850
site that looks like twitter.com but

380
00:14:18,760 --> 00:14:23,920
isn't your fishing guy doesn't have to

381
00:14:21,850 --> 00:14:26,080
put this JavaScript in there they can

382
00:14:23,920 --> 00:14:28,329
just watch you type the password in and

383
00:14:26,080 --> 00:14:30,220
get it in plaintext so this approach

384
00:14:28,330 --> 00:14:31,660
doesn't really get you too much but I

385
00:14:30,220 --> 00:14:33,190
really do believe the client-side

386
00:14:31,660 --> 00:14:35,589
password hashing can give us a lot of

387
00:14:33,190 --> 00:14:37,510
benefits and we can demonstrate it so

388
00:14:35,590 --> 00:14:39,450
let's build a better solution a better

389
00:14:37,510 --> 00:14:40,960
way to do client-side password hashing

390
00:14:39,450 --> 00:14:43,480
brick-by-brick

391
00:14:40,960 --> 00:14:45,130
so what attacks are we trying to prevent

392
00:14:43,480 --> 00:14:47,470
first of all talked about most of them

393
00:14:45,130 --> 00:14:49,450
already forgery of authentication data

394
00:14:47,470 --> 00:14:52,300
we want to make sure that a third party

395
00:14:49,450 --> 00:14:55,270
attacker can't forge whatever stuff it

396
00:14:52,300 --> 00:14:56,949
is we use to prove who we are we want to

397
00:14:55,270 --> 00:14:58,300
prevent sniffing or passive

398
00:14:56,950 --> 00:15:00,550
man-in-the-middle attacks and that can

399
00:14:58,300 --> 00:15:01,900
be somehow you have a network position

400
00:15:00,550 --> 00:15:04,719
where you can listen to what's going on

401
00:15:01,900 --> 00:15:07,090
or if you record the traffic and find a

402
00:15:04,720 --> 00:15:09,040
way to decrypt it later if an SSL

403
00:15:07,090 --> 00:15:12,360
private key is popped after the fact

404
00:15:09,040 --> 00:15:14,380
that's why forward secrecy is a thing so

405
00:15:12,360 --> 00:15:15,880
active man-in-the-middle attacks are

406
00:15:14,380 --> 00:15:17,710
ones where the attacker can actually

407
00:15:15,880 --> 00:15:19,730
modify the traffic in real time they can

408
00:15:17,710 --> 00:15:21,940
modify the way your web page works they

409
00:15:19,730 --> 00:15:25,279
add or remove JavaScript or do whatever

410
00:15:21,940 --> 00:15:27,620
fishing the attacker impersonates the

411
00:15:25,279 --> 00:15:29,630
targeted site and then records the data

412
00:15:27,620 --> 00:15:31,240
you type in and uses it later this is

413
00:15:29,630 --> 00:15:34,010
the big one the granddaddy of all

414
00:15:31,240 --> 00:15:35,060
password attacks and lastly relay

415
00:15:34,010 --> 00:15:37,610
attacks this one's going to become

416
00:15:35,060 --> 00:15:41,060
pretty important that's where your

417
00:15:37,610 --> 00:15:42,560
attacker is sets up a phishing site but

418
00:15:41,060 --> 00:15:44,959
instead of just recording the data and

419
00:15:42,560 --> 00:15:46,790
using it later behind the scenes they're

420
00:15:44,959 --> 00:15:48,920
actually creating an active session on

421
00:15:46,790 --> 00:15:50,510
the targeted site and just passing

422
00:15:48,920 --> 00:15:53,000
through the authentication data that you

423
00:15:50,510 --> 00:15:55,069
submitted we will go through that one in

424
00:15:53,000 --> 00:15:56,329
detail a little bit later goals what are

425
00:15:55,070 --> 00:15:57,860
we trying to do with this new system we

426
00:15:56,329 --> 00:16:00,260
want to resist all of these attacks as

427
00:15:57,860 --> 00:16:01,790
best as we can now if we design a new

428
00:16:00,260 --> 00:16:03,709
authentication system there's going to

429
00:16:01,790 --> 00:16:05,360
be a new set of attacks that we have to

430
00:16:03,709 --> 00:16:07,699
defend against there are gonna be some

431
00:16:05,360 --> 00:16:09,649
server to client attacks that we need to

432
00:16:07,699 --> 00:16:11,719
defend against and we will do that we

433
00:16:09,649 --> 00:16:13,490
want to maximize the cost of attacking a

434
00:16:11,720 --> 00:16:15,440
user and getting their password and one

435
00:16:13,490 --> 00:16:17,000
of the biggest ways we do that is that

436
00:16:15,440 --> 00:16:19,639
we're gonna set things up so that even

437
00:16:17,000 --> 00:16:21,889
if the attacker fishes us sniffs traffic

438
00:16:19,639 --> 00:16:24,769
whatever instead of having the plaintext

439
00:16:21,889 --> 00:16:27,110
password they have some big ole massive

440
00:16:24,769 --> 00:16:28,579
bytes and to recover our plaintext

441
00:16:27,110 --> 00:16:30,319
password you're gonna have to do what

442
00:16:28,579 --> 00:16:32,569
Dave Vaughn is doing an imagination and

443
00:16:30,319 --> 00:16:35,420
run some kind of offline password attack

444
00:16:32,569 --> 00:16:37,579
so even if my social engineering works

445
00:16:35,420 --> 00:16:39,050
as the attacker I'm still gonna be up

446
00:16:37,579 --> 00:16:42,079
against a difficult computational

447
00:16:39,050 --> 00:16:45,260
problem before I can actually recover

448
00:16:42,079 --> 00:16:47,029
your plaintext password we Dowe to keep

449
00:16:45,260 --> 00:16:48,740
all the benefits of passwords meaning

450
00:16:47,029 --> 00:16:50,540
we've got to maintain portability we

451
00:16:48,740 --> 00:16:52,850
can't have some extra device that we

452
00:16:50,540 --> 00:16:55,010
need to use and for that reason because

453
00:16:52,850 --> 00:16:56,360
all we're relying on is a password we do

454
00:16:55,010 --> 00:16:58,519
not have access to public key

455
00:16:56,360 --> 00:17:01,399
cryptography at all we have to use only

456
00:16:58,519 --> 00:17:03,260
symmetric encryption and/or hashing

457
00:17:01,399 --> 00:17:04,640
other one-way algorithms basically we're

458
00:17:03,260 --> 00:17:06,859
gonna do our best impression of the

459
00:17:04,640 --> 00:17:08,630
phyto standards using only a password

460
00:17:06,859 --> 00:17:10,549
and yes what we do here in this talk

461
00:17:08,630 --> 00:17:12,410
will take a lot of guidance from those

462
00:17:10,549 --> 00:17:15,319
standards especially the origin binding

463
00:17:12,410 --> 00:17:17,240
feature which we will get to and we need

464
00:17:15,319 --> 00:17:18,740
to allow this system to roll over and

465
00:17:17,240 --> 00:17:21,530
replace the cryptographic primitives

466
00:17:18,740 --> 00:17:24,380
meaning the hash functions one of the

467
00:17:21,530 --> 00:17:25,819
biggest benefits of TLS and one of the

468
00:17:24,380 --> 00:17:27,919
reasons why that protocol is going to

469
00:17:25,819 --> 00:17:29,480
stand the test of time not only our

470
00:17:27,919 --> 00:17:32,419
cryptographers working on it improving

471
00:17:29,480 --> 00:17:33,130
it but you can swap out every single

472
00:17:32,419 --> 00:17:35,350
block

473
00:17:33,130 --> 00:17:37,060
Seifer every single hash algorithm and

474
00:17:35,350 --> 00:17:39,639
you can swap out the key exchange method

475
00:17:37,060 --> 00:17:42,179
TLS allows you to do that so years ago

476
00:17:39,640 --> 00:17:44,740
we used to use md5 in TLS connections

477
00:17:42,180 --> 00:17:46,660
md5 is busted

478
00:17:44,740 --> 00:17:49,330
it is super busted we don't use it

479
00:17:46,660 --> 00:17:51,790
anymore all we had to do change a couple

480
00:17:49,330 --> 00:17:54,250
lines of configuration in your Apache

481
00:17:51,790 --> 00:17:56,830
comm file so we want to have that

482
00:17:54,250 --> 00:17:59,830
flexibility as well to survive changes

483
00:17:56,830 --> 00:18:01,230
in crypto best practices we are going to

484
00:17:59,830 --> 00:18:03,760
do challenge/response authentication

485
00:18:01,230 --> 00:18:06,760
this is critical because it prevents

486
00:18:03,760 --> 00:18:08,680
trivial reuse of authentication data an

487
00:18:06,760 --> 00:18:10,840
attacker can't just write down your

488
00:18:08,680 --> 00:18:14,170
authentication data and reuse it on the

489
00:18:10,840 --> 00:18:17,020
same site the tool we are going to use

490
00:18:14,170 --> 00:18:19,780
to prove our identity is called an H Mac

491
00:18:17,020 --> 00:18:22,360
a hash based message authentication code

492
00:18:19,780 --> 00:18:24,040
also known as a keyed hash the

493
00:18:22,360 --> 00:18:25,419
construction is a little bit weird and

494
00:18:24,040 --> 00:18:27,220
it looks artificial if you're looking at

495
00:18:25,420 --> 00:18:28,330
it for the first time it's in an RFC if

496
00:18:27,220 --> 00:18:30,430
you're actually interested

497
00:18:28,330 --> 00:18:32,020
the point is it's basically does the

498
00:18:30,430 --> 00:18:33,640
same thing as a hash it does a big

499
00:18:32,020 --> 00:18:36,160
mathematical computation that can't

500
00:18:33,640 --> 00:18:39,550
easily be reversed except it uses a key

501
00:18:36,160 --> 00:18:41,560
in there a secret key and an H Mac in

502
00:18:39,550 --> 00:18:42,490
effect does a good impression of a

503
00:18:41,560 --> 00:18:46,510
digital signature

504
00:18:42,490 --> 00:18:49,240
if someone you're talking to signs a

505
00:18:46,510 --> 00:18:51,250
message using a key or a rather say that

506
00:18:49,240 --> 00:18:53,380
again if the user you're talking to

507
00:18:51,250 --> 00:18:54,490
gives you a correct H Mac of a message

508
00:18:53,380 --> 00:18:56,770
you've just presented

509
00:18:54,490 --> 00:18:59,050
you have good verification that the

510
00:18:56,770 --> 00:19:02,410
person you're talking to has that key

511
00:18:59,050 --> 00:19:03,700
that pre shared key so that's why an H

512
00:19:02,410 --> 00:19:07,750
Mac is a good method of authentication

513
00:19:03,700 --> 00:19:09,670
why it works and again H max have an

514
00:19:07,750 --> 00:19:12,130
underlying hash algorithm underneath

515
00:19:09,670 --> 00:19:15,400
them we're gonna use sha-256 here that

516
00:19:12,130 --> 00:19:17,350
hash algorithm can be swapped out so

517
00:19:15,400 --> 00:19:19,150
more concretely here's what we're gonna

518
00:19:17,350 --> 00:19:22,689
do we are gonna hash the password on the

519
00:19:19,150 --> 00:19:23,980
client side to login the client is going

520
00:19:22,690 --> 00:19:26,590
to get a challenge message from the

521
00:19:23,980 --> 00:19:28,570
server what is a one-time use challenge

522
00:19:26,590 --> 00:19:32,050
message also called a short one syllable

523
00:19:28,570 --> 00:19:33,520
word for it anybody know it anuncio is

524
00:19:32,050 --> 00:19:35,800
the general term I was thinking of yeah

525
00:19:33,520 --> 00:19:37,389
so we're gonna get that challenge the

526
00:19:35,800 --> 00:19:39,820
client is also going to get the password

527
00:19:37,390 --> 00:19:42,250
from the user obviously the client will

528
00:19:39,820 --> 00:19:44,830
compute the password hash use that hash

529
00:19:42,250 --> 00:19:47,230
as the key to generate an H Mac of the

530
00:19:44,830 --> 00:19:49,149
challenged to verify the server is going

531
00:19:47,230 --> 00:19:51,220
to pull the stored password hash out and

532
00:19:49,149 --> 00:19:54,658
compute that same Mac and compare the

533
00:19:51,220 --> 00:19:58,510
results here it is visually to start out

534
00:19:54,659 --> 00:20:00,669
the browser visits the login page the

535
00:19:58,510 --> 00:20:02,169
server then says ok ready to log you in

536
00:20:00,669 --> 00:20:05,850
here's your challenge message I want an

537
00:20:02,169 --> 00:20:08,320
H Mac of it using your password the user

538
00:20:05,850 --> 00:20:09,879
the physical human being using the

539
00:20:08,320 --> 00:20:12,129
system says ok browser here's my

540
00:20:09,880 --> 00:20:14,649
password the browser that browser then

541
00:20:12,130 --> 00:20:16,269
computes the password hash computes the

542
00:20:14,649 --> 00:20:18,219
H Mac of the challenged message and

543
00:20:16,269 --> 00:20:22,269
sends that across the wire to the server

544
00:20:18,220 --> 00:20:25,059
the password only traverses this gap

545
00:20:22,269 --> 00:20:27,220
here which is the gap between a keyboard

546
00:20:25,059 --> 00:20:30,940
and something running inside your

547
00:20:27,220 --> 00:20:32,500
computer but that's something running

548
00:20:30,940 --> 00:20:35,080
inside the computer is not going to be a

549
00:20:32,500 --> 00:20:36,730
webpage it's critical again like we

550
00:20:35,080 --> 00:20:38,529
talked about for this to resist phishing

551
00:20:36,730 --> 00:20:40,630
and again if this is implemented with

552
00:20:38,529 --> 00:20:43,659
JavaScript all of our fancy crypto our H

553
00:20:40,630 --> 00:20:45,909
Max and our Elemental PQRS T's are

554
00:20:43,659 --> 00:20:49,330
implemented in JavaScript inside the Dom

555
00:20:45,909 --> 00:20:51,370
any one of those 173 JavaScript files

556
00:20:49,330 --> 00:20:55,178
running inside your browser window can

557
00:20:51,370 --> 00:20:57,250
mess with it so we are going to create a

558
00:20:55,179 --> 00:20:58,510
form that exists outside the webpage

559
00:20:57,250 --> 00:21:00,970
itself we're going to use a browser

560
00:20:58,510 --> 00:21:02,110
extension to do it unfortunately we're

561
00:21:00,970 --> 00:21:03,909
going to set it up we're gonna take

562
00:21:02,110 --> 00:21:06,580
advantage of features of the web

563
00:21:03,909 --> 00:21:09,549
extensions api for firefox and even

564
00:21:06,580 --> 00:21:12,428
chrome that ensure that javascript

565
00:21:09,549 --> 00:21:14,740
running inside the browser can't Forge

566
00:21:12,429 --> 00:21:17,019
these GUI elements effectively we're

567
00:21:14,740 --> 00:21:19,299
gonna set it up so that the user has to

568
00:21:17,019 --> 00:21:20,830
do an interaction with the browser so

569
00:21:19,299 --> 00:21:22,929
that they're confident they are speaking

570
00:21:20,830 --> 00:21:25,928
to the browser Authenticator module and

571
00:21:22,929 --> 00:21:27,909
not the web page can anybody else think

572
00:21:25,929 --> 00:21:30,490
of another scenario where in order to

573
00:21:27,909 --> 00:21:32,590
log into something a computer perhaps

574
00:21:30,490 --> 00:21:35,909
you have to do something very specific

575
00:21:32,590 --> 00:21:35,908
with your keyboard

576
00:21:36,600 --> 00:21:42,549
anybody use a well-known commercial

577
00:21:38,649 --> 00:21:45,100
operating system called windows what

578
00:21:42,549 --> 00:21:47,650
keys in some configurations do you have

579
00:21:45,100 --> 00:21:50,260
to hit before you can login

580
00:21:47,650 --> 00:21:51,460
control-alt-delete and there's something

581
00:21:50,260 --> 00:21:53,200
very important about that key

582
00:21:51,460 --> 00:21:55,390
combination in the core windows api

583
00:21:53,200 --> 00:22:00,100
anybody done any win32 api program you

584
00:21:55,390 --> 00:22:02,200
know okay all right thanks so in the

585
00:22:00,100 --> 00:22:03,580
core of any win32 api program he have

586
00:22:02,200 --> 00:22:05,770
what's called an event loop a message

587
00:22:03,580 --> 00:22:07,210
loop where messages from the operating

588
00:22:05,770 --> 00:22:10,629
system are passed to your code these

589
00:22:07,210 --> 00:22:12,370
messages include keyboard events and you

590
00:22:10,630 --> 00:22:13,900
can tell when someone presses ctrl s

591
00:22:12,370 --> 00:22:15,429
that's why microsoft word can save a

592
00:22:13,900 --> 00:22:18,070
document you can tell when someone

593
00:22:15,430 --> 00:22:20,230
presses I don't know ctrl backspace

594
00:22:18,070 --> 00:22:22,990
that's how word can delete a whole word

595
00:22:20,230 --> 00:22:25,920
at once the operating system will never

596
00:22:22,990 --> 00:22:28,570
pass you an event for control-alt-delete

597
00:22:25,920 --> 00:22:31,840
the core of the Windows operating system

598
00:22:28,570 --> 00:22:35,409
ensures that that gesture that action of

599
00:22:31,840 --> 00:22:38,050
pressing ctrl delete can only be trapped

600
00:22:35,410 --> 00:22:41,440
and responded to by the operating system

601
00:22:38,050 --> 00:22:43,360
itself so we're gonna take a cue from

602
00:22:41,440 --> 00:22:45,550
that and we're going to ensure with our

603
00:22:43,360 --> 00:22:47,979
use of the web extensions API that

604
00:22:45,550 --> 00:22:50,740
there's no good way for an attacker with

605
00:22:47,980 --> 00:22:53,500
a phishing site to convincingly Forge

606
00:22:50,740 --> 00:22:55,300
the form elements so again even if the

607
00:22:53,500 --> 00:22:56,800
user visits a phishing site our goal is

608
00:22:55,300 --> 00:22:59,409
for the attacker to be no better off

609
00:22:56,800 --> 00:23:01,030
than if they just sniff the traffic the

610
00:22:59,410 --> 00:23:04,240
active man-in-the-middle approach will

611
00:23:01,030 --> 00:23:06,490
add no value to the attackers job to the

612
00:23:04,240 --> 00:23:08,890
attackers efforts if the users trained

613
00:23:06,490 --> 00:23:10,600
properly so again we're gonna use a

614
00:23:08,890 --> 00:23:12,040
browser extension we're going to use

615
00:23:10,600 --> 00:23:13,870
something called the native messaging

616
00:23:12,040 --> 00:23:15,820
API to do this and if we have time and

617
00:23:13,870 --> 00:23:17,169
people for some sick reason are actually

618
00:23:15,820 --> 00:23:19,720
interested we'll look at the code but

619
00:23:17,170 --> 00:23:22,000
it's not a great feeling to implement

620
00:23:19,720 --> 00:23:24,030
the crypto and JavaScript you know we'd

621
00:23:22,000 --> 00:23:26,470
much rather implement it in native code

622
00:23:24,030 --> 00:23:28,480
fortunately the web extensions API let

623
00:23:26,470 --> 00:23:30,850
us load a piece of native software on a

624
00:23:28,480 --> 00:23:32,800
client's computer and communicate with

625
00:23:30,850 --> 00:23:36,129
it in messages those messages exist

626
00:23:32,800 --> 00:23:38,260
completely outside the Dom so the user

627
00:23:36,130 --> 00:23:40,120
will click a toolbar button password

628
00:23:38,260 --> 00:23:43,080
form will appear in an extension pop-up

629
00:23:40,120 --> 00:23:46,120
and malicious JavaScript cannot spawn it

630
00:23:43,080 --> 00:23:48,399
benefits well write a summary just go

631
00:23:46,120 --> 00:23:49,810
through it one more time and a demo is

632
00:23:48,400 --> 00:23:51,460
going to be coming soon a server is

633
00:23:49,810 --> 00:23:53,679
gonna present a challenge inside a web

634
00:23:51,460 --> 00:23:55,990
page the browser Authenticator is going

635
00:23:53,680 --> 00:23:57,370
to display its secure form it's going to

636
00:23:55,990 --> 00:23:59,710
get the password and it's going to pull

637
00:23:57,370 --> 00:24:01,030
the challenge from the page the browser

638
00:23:59,710 --> 00:24:02,770
Authenticator will compute

639
00:24:01,030 --> 00:24:05,620
password hash that shared secret and

640
00:24:02,770 --> 00:24:07,420
compute the H Mac of the challenge the

641
00:24:05,620 --> 00:24:09,189
Authenticator will put the H Mac back

642
00:24:07,420 --> 00:24:11,590
into the webpage using the execute

643
00:24:09,190 --> 00:24:14,440
script API and the user will submit the

644
00:24:11,590 --> 00:24:16,689
form if the H Mac is correct will login

645
00:24:14,440 --> 00:24:18,160
there are some important details to go

646
00:24:16,690 --> 00:24:20,380
through here the devil is always in the

647
00:24:18,160 --> 00:24:22,500
details we're gonna need to construct

648
00:24:20,380 --> 00:24:24,520
this challenge message in a way that

649
00:24:22,500 --> 00:24:27,310
specifically prevents phishing and

650
00:24:24,520 --> 00:24:28,840
replay attacks we also need to protect

651
00:24:27,310 --> 00:24:30,879
against certain attacks against the

652
00:24:28,840 --> 00:24:32,590
Authenticator itself there are some

653
00:24:30,880 --> 00:24:34,600
tricks a malicious person might use to

654
00:24:32,590 --> 00:24:36,820
try to get the Authenticator to cough up

655
00:24:34,600 --> 00:24:39,429
something that's easier to attack then

656
00:24:36,820 --> 00:24:40,899
the H Mac were intending to create we

657
00:24:39,430 --> 00:24:42,610
also got a handle registration and

658
00:24:40,900 --> 00:24:44,110
password changes that's going to be one

659
00:24:42,610 --> 00:24:45,250
of the weak points of this system tell

660
00:24:44,110 --> 00:24:50,020
you right now and then finally we'll get

661
00:24:45,250 --> 00:24:51,520
to a demo so pre-computation attacks you

662
00:24:50,020 --> 00:24:53,889
might have heard of rainbow tables are

663
00:24:51,520 --> 00:24:56,260
wearing tacker goes through a dictionary

664
00:24:53,890 --> 00:24:58,090
and pre computes the hashes of all these

665
00:24:56,260 --> 00:25:00,610
different passwords and stores it on

666
00:24:58,090 --> 00:25:03,100
their machine if your hashes are not

667
00:25:00,610 --> 00:25:05,080
salted that means an attacker can look

668
00:25:03,100 --> 00:25:08,080
up a password hash that they've stolen

669
00:25:05,080 --> 00:25:09,460
in constant time meaning they can tell

670
00:25:08,080 --> 00:25:11,350
you exactly how long it's gonna take to

671
00:25:09,460 --> 00:25:13,450
tell whether they've got that password

672
00:25:11,350 --> 00:25:14,949
hash in their database and again check

673
00:25:13,450 --> 00:25:16,060
out Dave's talk on iron geek if you want

674
00:25:14,950 --> 00:25:19,090
to know more about that because I'm sure

675
00:25:16,060 --> 00:25:21,730
we'll be discussing it so if the

676
00:25:19,090 --> 00:25:24,550
attacker this expression here on our

677
00:25:21,730 --> 00:25:27,100
slide H Mac of hash of password + salt

678
00:25:24,550 --> 00:25:29,500
and the challenge that is the expression

679
00:25:27,100 --> 00:25:31,949
we're computing if the attacker can

680
00:25:29,500 --> 00:25:34,270
pre-select both a salt and a challenge

681
00:25:31,950 --> 00:25:37,030
the attacker can pre-compute the whole

682
00:25:34,270 --> 00:25:39,400
thing so they can build a rainbow table

683
00:25:37,030 --> 00:25:42,370
and precompute password hashes for our

684
00:25:39,400 --> 00:25:43,750
authentication system we need protect

685
00:25:42,370 --> 00:25:44,979
against that we got two tricks we're

686
00:25:43,750 --> 00:25:46,360
going to use to do that first of all

687
00:25:44,980 --> 00:25:48,280
we're gonna add a timestamp to the

688
00:25:46,360 --> 00:25:50,679
challenge that challenge message is

689
00:25:48,280 --> 00:25:52,120
going to include a 32-bit integer that

690
00:25:50,680 --> 00:25:53,740
represents the timestamp on the server

691
00:25:52,120 --> 00:25:56,919
that's going to protect against

692
00:25:53,740 --> 00:25:58,420
pre-computation attacks and the clients

693
00:25:56,920 --> 00:26:01,330
gonna have to allow for some time zone

694
00:25:58,420 --> 00:26:03,670
differences but you know that is that is

695
00:26:01,330 --> 00:26:05,260
very doable and it also protects against

696
00:26:03,670 --> 00:26:06,310
accidental reuse of the challenge

697
00:26:05,260 --> 00:26:08,230
parameters if our random number

698
00:26:06,310 --> 00:26:10,149
generator for some reason coughs up the

699
00:26:08,230 --> 00:26:12,970
same number twice second and most

700
00:26:10,150 --> 00:26:14,350
importantly the child the client is also

701
00:26:12,970 --> 00:26:16,450
going to select a portion

702
00:26:14,350 --> 00:26:19,389
Challenge message whoo you're familiar

703
00:26:16,450 --> 00:26:22,270
with ntlm authentication or SMB in

704
00:26:19,390 --> 00:26:25,299
abasing those protocols SMB does that as

705
00:26:22,270 --> 00:26:26,918
well at least with ntlm version to both

706
00:26:25,299 --> 00:26:28,929
sides select the challenge

707
00:26:26,919 --> 00:26:30,940
what's the attack that the server could

708
00:26:28,929 --> 00:26:32,049
do if they controlled all the parameters

709
00:26:30,940 --> 00:26:35,890
well at the very least it's a

710
00:26:32,049 --> 00:26:38,289
pre-computation attack so and the the

711
00:26:35,890 --> 00:26:40,030
crypto theory term all chosen plaintext

712
00:26:38,289 --> 00:26:41,440
attacks are going to be shut down by

713
00:26:40,030 --> 00:26:43,629
this whole procedure because the server

714
00:26:41,440 --> 00:26:46,960
can't select the whole plaintext that

715
00:26:43,630 --> 00:26:49,090
we're gonna generate the H Mac for all

716
00:26:46,960 --> 00:26:50,440
right relay attacks this is this is one

717
00:26:49,090 --> 00:26:52,750
of my favorite examples of an attack

718
00:26:50,440 --> 00:26:54,549
against this let's say a bad guy sets up

719
00:26:52,750 --> 00:26:58,510
a phishing website and convinces you

720
00:26:54,549 --> 00:27:00,100
that they're the good guy if we just

721
00:26:58,510 --> 00:27:02,070
have these parameters that are selected

722
00:27:00,100 --> 00:27:04,570
by the server and the client

723
00:27:02,070 --> 00:27:05,830
the SERP that the bad guy can just pass

724
00:27:04,570 --> 00:27:07,570
through those parameters to the other

725
00:27:05,830 --> 00:27:09,428
end of the connection they will set up a

726
00:27:07,570 --> 00:27:12,370
real connection to the legitimate

727
00:27:09,429 --> 00:27:13,950
website and things happen in this order

728
00:27:12,370 --> 00:27:16,360
first we get a challenge from the server

729
00:27:13,950 --> 00:27:18,580
then the client sends a challenge to the

730
00:27:16,360 --> 00:27:20,530
server so if I'm the guy in the middle

731
00:27:18,580 --> 00:27:22,360
here I can just take the server

732
00:27:20,530 --> 00:27:25,480
challenge I was presented to presented

733
00:27:22,360 --> 00:27:27,549
with pass it along to the browser when

734
00:27:25,480 --> 00:27:29,980
the browser authenticates I can take

735
00:27:27,549 --> 00:27:32,620
their challenge pass it along to the

736
00:27:29,980 --> 00:27:34,870
real server and suddenly I have actually

737
00:27:32,620 --> 00:27:36,908
successfully just replayed

738
00:27:34,870 --> 00:27:38,918
authentication data or relayed rather

739
00:27:36,909 --> 00:27:43,390
authentication data from my legitimate

740
00:27:38,919 --> 00:27:45,280
browser to the server I then have full

741
00:27:43,390 --> 00:27:46,929
control over that connection they're

742
00:27:45,280 --> 00:27:48,879
going to interact with me thinking I'm

743
00:27:46,929 --> 00:27:51,490
legitimate site and on the backend I

744
00:27:48,880 --> 00:27:53,679
actually have a live session with the

745
00:27:51,490 --> 00:27:55,390
real site and at that point I own the

746
00:27:53,679 --> 00:27:57,400
victim's account I don't own the

747
00:27:55,390 --> 00:28:00,940
password but I own the account at this

748
00:27:57,400 --> 00:28:02,760
point so it can't be so simple to just

749
00:28:00,940 --> 00:28:04,570
pass through all those parameters and

750
00:28:02,760 --> 00:28:07,059
there's a trick that we're going to

751
00:28:04,570 --> 00:28:08,649
borrow from the phyto standard and that

752
00:28:07,059 --> 00:28:10,299
is going to be that well we will use the

753
00:28:08,650 --> 00:28:14,140
origin string as part of the challenge

754
00:28:10,299 --> 00:28:16,240
as well the origin is a piece of the the

755
00:28:14,140 --> 00:28:17,289
Dom the document object model the model

756
00:28:16,240 --> 00:28:19,539
you interact with when you write

757
00:28:17,289 --> 00:28:21,100
JavaScript that runs in a browser this

758
00:28:19,539 --> 00:28:23,110
origin string is already really really

759
00:28:21,100 --> 00:28:25,030
important for web security because it's

760
00:28:23,110 --> 00:28:27,129
part of the same origin policy any web

761
00:28:25,030 --> 00:28:27,710
programmers in the crowd know

762
00:28:27,130 --> 00:28:30,080
all right so this

763
00:28:27,710 --> 00:28:32,510
same origin policy a few the same origin

764
00:28:30,080 --> 00:28:34,970
policy prevents JavaScript from just

765
00:28:32,510 --> 00:28:37,549
arbitrarily sending requests to another

766
00:28:34,970 --> 00:28:39,860
domain and reading their output that's

767
00:28:37,549 --> 00:28:43,100
why we can't just plop down an image tag

768
00:28:39,860 --> 00:28:45,080
at you know gmail.com and use javascript

769
00:28:43,100 --> 00:28:47,090
to read the output and just read your

770
00:28:45,080 --> 00:28:49,250
your mailbox we're gonna do the same

771
00:28:47,090 --> 00:28:50,720
thing we are going to put the origin

772
00:28:49,250 --> 00:28:53,120
string which is going to look like this

773
00:28:50,720 --> 00:28:55,429
it will have a protocol handler and a

774
00:28:53,120 --> 00:28:59,029
domain name if we're using a

775
00:28:55,429 --> 00:29:00,500
non-standard port for HTTP or HTTPS the

776
00:28:59,029 --> 00:29:03,350
port will appear in the origin string as

777
00:29:00,500 --> 00:29:06,140
well so this means that if our bad guy

778
00:29:03,350 --> 00:29:08,620
tries to do this here with the origin

779
00:29:06,140 --> 00:29:11,029
binding feature enabled the

780
00:29:08,620 --> 00:29:13,010
authentication data you get from the

781
00:29:11,029 --> 00:29:15,470
browser is only gonna work for evil that

782
00:29:13,010 --> 00:29:18,140
dot example.com you can't unwind all

783
00:29:15,470 --> 00:29:20,450
those computations and reinsert real dot

784
00:29:18,140 --> 00:29:22,490
example.com and then relay the

785
00:29:20,450 --> 00:29:23,840
authentication to the real site so

786
00:29:22,490 --> 00:29:26,240
origin binding protects against this

787
00:29:23,840 --> 00:29:27,439
kind of live relay attack all right so

788
00:29:26,240 --> 00:29:28,760
to summarize what we're gonna put the

789
00:29:27,440 --> 00:29:30,919
challenge message we have a server

790
00:29:28,760 --> 00:29:32,750
timestamp a 32-bit little-endian integer

791
00:29:30,919 --> 00:29:34,190
is what we're gonna do we have the

792
00:29:32,750 --> 00:29:36,190
server challenge we have the client

793
00:29:34,190 --> 00:29:38,899
challenge and we have the origin string

794
00:29:36,190 --> 00:29:40,909
the Authenticator the browser

795
00:29:38,899 --> 00:29:42,439
Authenticator computes the secret which

796
00:29:40,909 --> 00:29:45,200
is the hash of the password plus the

797
00:29:42,440 --> 00:29:47,240
salt the actual response the actual

798
00:29:45,200 --> 00:29:49,909
message that gets sent to the server

799
00:29:47,240 --> 00:29:51,789
that gets checked is an H Mac of the

800
00:29:49,909 --> 00:29:57,700
challenge message consisting of all this

801
00:29:51,789 --> 00:30:00,110
using this secret as the key clears mud

802
00:29:57,700 --> 00:30:01,669
there are also some attacks against the

803
00:30:00,110 --> 00:30:05,149
Authenticator that we have to prepare

804
00:30:01,669 --> 00:30:06,890
for so like we said we want to be able

805
00:30:05,149 --> 00:30:08,840
to swap out the hashing algorithm right

806
00:30:06,890 --> 00:30:10,370
and have the Authenticator use a better

807
00:30:08,840 --> 00:30:12,860
hash if we figure out there's a better

808
00:30:10,370 --> 00:30:14,750
one out there that means the server has

809
00:30:12,860 --> 00:30:17,360
some control over the computations that

810
00:30:14,750 --> 00:30:19,700
the authenticators doing what if some

811
00:30:17,360 --> 00:30:22,908
day somebody figures out a trick to make

812
00:30:19,700 --> 00:30:25,100
the Authenticator spit out a hash or an

813
00:30:22,909 --> 00:30:28,070
H Mac that happens to be very easy to

814
00:30:25,100 --> 00:30:29,689
attack because of some weakness that

815
00:30:28,070 --> 00:30:31,789
some cryptographers somewhere figured

816
00:30:29,690 --> 00:30:34,700
out we're gonna have to prevent against

817
00:30:31,789 --> 00:30:36,350
that so they're gonna need to be certain

818
00:30:34,700 --> 00:30:37,460
there's needs to be a floor on the

819
00:30:36,350 --> 00:30:38,779
configuration of all these hash

820
00:30:37,460 --> 00:30:40,490
algorithms there need to be certain

821
00:30:38,779 --> 00:30:43,220
minimum standards

822
00:30:40,490 --> 00:30:45,430
in our case we're gonna use the argon to

823
00:30:43,220 --> 00:30:47,480
password hashing algorithm it was in

824
00:30:45,430 --> 00:30:49,670
2015 it was the winner of a password

825
00:30:47,480 --> 00:30:51,410
hashing competition run by a team of

826
00:30:49,670 --> 00:30:52,730
cryptographers it is a memory hard

827
00:30:51,410 --> 00:30:54,530
function like bcrypt

828
00:30:52,730 --> 00:30:57,080
meaning that not only do you need a lot

829
00:30:54,530 --> 00:31:00,139
of CPU or GPU cycles to attack this hash

830
00:30:57,080 --> 00:31:02,030
offline you also need a lot of memory

831
00:31:00,140 --> 00:31:04,490
and the algorithm is designed so that

832
00:31:02,030 --> 00:31:07,190
it's not easy to just exchange a memory

833
00:31:04,490 --> 00:31:08,590
for more time and of course Moore's law

834
00:31:07,190 --> 00:31:10,880
does not apply to Ram

835
00:31:08,590 --> 00:31:13,550
processor speed doubles every 18 months

836
00:31:10,880 --> 00:31:15,080
RAM does not get half as expensive every

837
00:31:13,550 --> 00:31:18,169
18 months and it doesn't get twice as

838
00:31:15,080 --> 00:31:19,879
fast every 18 months so we're going to

839
00:31:18,170 --> 00:31:21,350
take advantage of that or the creators

840
00:31:19,880 --> 00:31:22,910
of Oregon to took advantage of that when

841
00:31:21,350 --> 00:31:24,409
they designed it there are three

842
00:31:22,910 --> 00:31:26,030
parameters that you have to choose

843
00:31:24,410 --> 00:31:27,830
whenever you're implementing argonne to

844
00:31:26,030 --> 00:31:29,690
unfortunately how many iterations you're

845
00:31:27,830 --> 00:31:31,100
gonna do in all of the magic that

846
00:31:29,690 --> 00:31:34,550
happens inside the box in arrow diagram

847
00:31:31,100 --> 00:31:36,199
how much memory you want to force the

848
00:31:34,550 --> 00:31:39,379
Authenticator to use and how many

849
00:31:36,200 --> 00:31:40,970
threads are gonna run at once this is

850
00:31:39,380 --> 00:31:43,190
another interesting illustration the

851
00:31:40,970 --> 00:31:45,020
minute you make something confusing or

852
00:31:43,190 --> 00:31:47,150
difficult to use the minute you give

853
00:31:45,020 --> 00:31:49,370
somebody a choice that they have to make

854
00:31:47,150 --> 00:31:52,280
before they're going to use your product

855
00:31:49,370 --> 00:31:53,899
or your tool or your standard they just

856
00:31:52,280 --> 00:31:55,580
get that much more likely to say and

857
00:31:53,900 --> 00:31:59,330
forget it it's not worth it I'm just

858
00:31:55,580 --> 00:32:01,129
going to go back to using md5 so again

859
00:31:59,330 --> 00:32:02,990
remember as security professionals we

860
00:32:01,130 --> 00:32:05,330
always have to put ourself in the users

861
00:32:02,990 --> 00:32:07,850
shoes we need to make things easy to use

862
00:32:05,330 --> 00:32:10,310
we need to make them accessible and we

863
00:32:07,850 --> 00:32:12,590
need to we need to anticipate some

864
00:32:10,310 --> 00:32:16,310
resistance to what we do as security

865
00:32:12,590 --> 00:32:18,530
people so anyway we are going to use

866
00:32:16,310 --> 00:32:22,300
sha-256 as our hash algorithm for the H

867
00:32:18,530 --> 00:32:25,570
Mac itself for that second step sha-256

868
00:32:22,300 --> 00:32:28,190
sha-256 is unbroken as far as we know

869
00:32:25,570 --> 00:32:29,960
other password operations so of course

870
00:32:28,190 --> 00:32:32,060
we have to log in but we have to also be

871
00:32:29,960 --> 00:32:34,550
able to register we have to be able to

872
00:32:32,060 --> 00:32:36,370
do a password reset so you get the

873
00:32:34,550 --> 00:32:39,290
password reset link in your email and

874
00:32:36,370 --> 00:32:41,479
you you click on it you submit a new

875
00:32:39,290 --> 00:32:44,270
password password change is where you're

876
00:32:41,480 --> 00:32:46,190
already logged in you re authenticate by

877
00:32:44,270 --> 00:32:48,710
typing in your current password and then

878
00:32:46,190 --> 00:32:50,810
you provide a new password everybody who

879
00:32:48,710 --> 00:32:52,790
writes any kind of authentication system

880
00:32:50,810 --> 00:32:53,840
is requiring their users to log back in

881
00:32:52,790 --> 00:32:57,800
before changing their

882
00:32:53,840 --> 00:32:59,780
word right right okay so again these

883
00:32:57,800 --> 00:33:01,760
these other operations where we have to

884
00:32:59,780 --> 00:33:04,490
actually send the secret to the server

885
00:33:01,760 --> 00:33:07,010
enroll the secret so to speak are going

886
00:33:04,490 --> 00:33:08,150
to be one of the weak points but we have

887
00:33:07,010 --> 00:33:13,790
ways to do it so that it's relatively

888
00:33:08,150 --> 00:33:17,210
secure so let's get to the demo and I've

889
00:33:13,790 --> 00:33:18,860
prepared for the demo gods to try to

890
00:33:17,210 --> 00:33:20,570
ruin my day and make this demo not work

891
00:33:18,860 --> 00:33:23,929
I have a pre-recorded video of all this

892
00:33:20,570 --> 00:33:26,659
going on so and of course now I get to

893
00:33:23,930 --> 00:33:28,430
go whoa with the microphone mounted on

894
00:33:26,660 --> 00:33:29,570
the table which is always fun actually

895
00:33:28,430 --> 00:33:31,490
no what no I'm gonna hold it because you

896
00:33:29,570 --> 00:33:32,870
can't hear me there all right so a bit

897
00:33:31,490 --> 00:33:34,220
of what we've got on the screen in front

898
00:33:32,870 --> 00:33:37,550
of us that big ol square is the

899
00:33:34,220 --> 00:33:40,380
magnifier we've got a demo sitting here

900
00:33:37,550 --> 00:33:42,280
in our browser a demo Vissel system I am

901
00:33:40,380 --> 00:33:45,160
[Music]

902
00:33:42,280 --> 00:33:47,690
shocking the minute I talk about having

903
00:33:45,160 --> 00:33:50,150
beaten the demo gods my network

904
00:33:47,690 --> 00:33:53,480
connection drops I deserve that I think

905
00:33:50,150 --> 00:33:58,850
I begged for that to happen all right so

906
00:33:53,480 --> 00:34:00,560
here's what we're gonna do we're gonna

907
00:33:58,850 --> 00:34:05,030
see it we're gonna give this one go and

908
00:34:00,560 --> 00:34:06,770
if not we're going all right which one

909
00:34:05,030 --> 00:34:09,790
of you created an access point called

910
00:34:06,770 --> 00:34:09,790
not show me Kahn

911
00:34:10,020 --> 00:34:17,009
I was almost fooled by it I swear

912
00:34:14,330 --> 00:34:20,489
alright anybody know what the passcode

913
00:34:17,010 --> 00:34:23,220
is for this it's it's casino I kid you

914
00:34:20,489 --> 00:34:25,379
not that is the four years I've been at

915
00:34:23,219 --> 00:34:29,399
this con that has been the running joke

916
00:34:25,379 --> 00:34:30,929
of the conference so let's try this one

917
00:34:29,399 --> 00:34:33,929
more time see if we can get to our demo

918
00:34:30,929 --> 00:34:35,700
here so I am really bad at a lot of

919
00:34:33,929 --> 00:34:37,710
things and among them I am bad at coming

920
00:34:35,699 --> 00:34:42,449
up with names for things so right now

921
00:34:37,710 --> 00:35:00,180
this system is called crass word so we

922
00:34:42,449 --> 00:35:03,930
will give this one more go hang on all

923
00:35:00,180 --> 00:35:06,720
right there we go so just to look at the

924
00:35:03,930 --> 00:35:09,390
lay of the land again we have on our

925
00:35:06,720 --> 00:35:10,919
right burp suite which is going to let

926
00:35:09,390 --> 00:35:13,350
us look at our HTTP requests and

927
00:35:10,920 --> 00:35:15,869
responses and on the bottom here we are

928
00:35:13,350 --> 00:35:17,460
doing tail - f on a log created by our

929
00:35:15,869 --> 00:35:21,950
native messaging host the component that

930
00:35:17,460 --> 00:35:24,240
actually does the crypto stuff for us so

931
00:35:21,950 --> 00:35:27,720
we're gonna register into account here

932
00:35:24,240 --> 00:35:31,169
let's make the username we'll just call

933
00:35:27,720 --> 00:35:32,459
it SMC all right now the web page is

934
00:35:31,170 --> 00:35:34,020
telling us you use the crafts word

935
00:35:32,460 --> 00:35:36,619
extension to provide a password well

936
00:35:34,020 --> 00:35:39,750
this little lock icon is our extension

937
00:35:36,619 --> 00:35:41,700
all right we click on it and now we get

938
00:35:39,750 --> 00:35:44,670
this little form again it exists

939
00:35:41,700 --> 00:35:46,529
completely outside the Dom JavaScript

940
00:35:44,670 --> 00:35:49,320
running in the page cannot interact with

941
00:35:46,530 --> 00:35:52,109
this form we will make our password the

942
00:35:49,320 --> 00:35:55,500
word test because we're all about good

943
00:35:52,109 --> 00:35:56,910
passwords around these parts now we see

944
00:35:55,500 --> 00:35:58,859
in the log that are authenticated the

945
00:35:56,910 --> 00:36:01,470
native messaging component has done the

946
00:35:58,859 --> 00:36:03,299
crypto for us and that message was

947
00:36:01,470 --> 00:36:05,730
passed from the browser extension to

948
00:36:03,300 --> 00:36:07,350
this native messaging host the type is a

949
00:36:05,730 --> 00:36:09,630
new password that's the type of

950
00:36:07,350 --> 00:36:11,220
operation we're doing test is our

951
00:36:09,630 --> 00:36:13,140
password and here the hash config

952
00:36:11,220 --> 00:36:15,660
parameter so we're doing six iterations

953
00:36:13,140 --> 00:36:17,609
our exponent on the memory usage is 16

954
00:36:15,660 --> 00:36:21,118
we're going to do two threads the hash

955
00:36:17,609 --> 00:36:23,130
is going to be 32 bytes long the salt is

956
00:36:21,119 --> 00:36:23,400
being generated on the client side which

957
00:36:23,130 --> 00:36:24,480
we

958
00:36:23,400 --> 00:36:28,410
to do to prevent some of those

959
00:36:24,480 --> 00:36:30,089
pre-computation attacks so now the

960
00:36:28,410 --> 00:36:31,710
webpage knows that we've submitted the

961
00:36:30,089 --> 00:36:35,339
password but all it's gotten there is

962
00:36:31,710 --> 00:36:37,529
that that hash it doesn't have the

963
00:36:35,339 --> 00:36:38,970
plaintext password so now we've

964
00:36:37,529 --> 00:36:41,369
registered and let's look at what just

965
00:36:38,970 --> 00:36:44,308
happened in the background this was our

966
00:36:41,369 --> 00:36:48,539
post request we submitted our username

967
00:36:44,309 --> 00:36:49,799
which is SMC and we submitted to hash we

968
00:36:48,539 --> 00:36:52,410
also submitted the salt that we

969
00:36:49,799 --> 00:36:54,589
generated on the client-side nowhere in

970
00:36:52,410 --> 00:36:57,118
this request does the word test appear

971
00:36:54,589 --> 00:36:58,680
this is the vulnerable point we have to

972
00:36:57,119 --> 00:37:01,140
send the actual password hash to the

973
00:36:58,680 --> 00:37:03,180
server but we never had to show the Dom

974
00:37:01,140 --> 00:37:04,890
or the server what our actual plaintext

975
00:37:03,180 --> 00:37:07,200
password was gives us a lot of

976
00:37:04,890 --> 00:37:11,038
resistance against phishing now we will

977
00:37:07,200 --> 00:37:15,450
log in we start off by providing our

978
00:37:11,039 --> 00:37:16,789
username which was SMC now let's look at

979
00:37:15,450 --> 00:37:21,180
what just happened in the background

980
00:37:16,789 --> 00:37:23,250
this request to crash word config so we

981
00:37:21,180 --> 00:37:25,288
requested some configuration information

982
00:37:23,250 --> 00:37:26,970
for SMC the reason we have to do that in

983
00:37:25,289 --> 00:37:29,400
the background is we need to know what

984
00:37:26,970 --> 00:37:31,078
our salt is we're recomputing the

985
00:37:29,400 --> 00:37:33,299
password hash client-side so we need to

986
00:37:31,079 --> 00:37:35,400
know the salt any geeks out there who

987
00:37:33,299 --> 00:37:37,730
can say why it's not a security problem

988
00:37:35,400 --> 00:37:40,049
for salts to be disclosed to the browser

989
00:37:37,730 --> 00:37:44,760
to be a matter of public records so to

990
00:37:40,049 --> 00:37:46,890
speak speed well yeah the real reason

991
00:37:44,760 --> 00:37:49,020
why it's not a security problem assaults

992
00:37:46,890 --> 00:37:51,299
only job is to be different for every

993
00:37:49,020 --> 00:37:53,160
account the salt does not need to be

994
00:37:51,299 --> 00:37:55,529
secret all we're doing is forwarding

995
00:37:53,160 --> 00:37:56,940
pre-computation attacks so so long as

996
00:37:55,529 --> 00:37:59,279
the salts are different for every

997
00:37:56,940 --> 00:38:01,980
account the attacker has to attack these

998
00:37:59,279 --> 00:38:03,240
hashes offline one at a time you deny

999
00:38:01,980 --> 00:38:05,400
the attacker that economy of scale

1000
00:38:03,240 --> 00:38:08,520
that's the only point if I know your

1001
00:38:05,400 --> 00:38:10,260
salt before hand doesn't help me I still

1002
00:38:08,520 --> 00:38:14,788
have to crack your hash one at a time

1003
00:38:10,260 --> 00:38:16,529
so we have that config going on in the

1004
00:38:14,789 --> 00:38:19,680
background here so now we can use our

1005
00:38:16,529 --> 00:38:22,650
extension we click our lock icon and now

1006
00:38:19,680 --> 00:38:25,020
we just get a login form we say submit

1007
00:38:22,650 --> 00:38:26,640
password and we get the operation

1008
00:38:25,020 --> 00:38:30,089
happening in our native messaging host

1009
00:38:26,640 --> 00:38:32,609
we got a login request our password was

1010
00:38:30,089 --> 00:38:35,490
test our salt was passed through from

1011
00:38:32,609 --> 00:38:37,140
the server and now we have our H Mac

1012
00:38:35,490 --> 00:38:41,549
dated down here I'll go ahead and zoom

1013
00:38:37,140 --> 00:38:45,420
on that the server's timestamp was this

1014
00:38:41,549 --> 00:38:47,730
one five six number this value here was

1015
00:38:45,420 --> 00:38:50,309
the server-side challenge the challenge

1016
00:38:47,730 --> 00:38:51,599
that the server gave us this is the

1017
00:38:50,309 --> 00:38:54,750
challenge component that we as the

1018
00:38:51,599 --> 00:38:56,220
client created and most importantly well

1019
00:38:54,750 --> 00:38:58,289
not most importantly but importantly

1020
00:38:56,220 --> 00:39:01,470
here at the end is our origin string

1021
00:38:58,289 --> 00:39:03,420
demo crafts were calm if they try to

1022
00:39:01,470 --> 00:39:06,209
reuse this authentication exchange on

1023
00:39:03,420 --> 00:39:09,329
Twitter calm ain't gonna get nowhere has

1024
00:39:06,210 --> 00:39:11,400
its origin bound so that H Mac was then

1025
00:39:09,329 --> 00:39:13,500
inserted into the Dom client-side

1026
00:39:11,400 --> 00:39:15,420
javascript in the browser knows that it

1027
00:39:13,500 --> 00:39:17,339
has the token it knows that crafts word

1028
00:39:15,420 --> 00:39:19,109
has done its job but it couldn't

1029
00:39:17,339 --> 00:39:21,808
interact with the process of us typing

1030
00:39:19,109 --> 00:39:24,930
our password into the Authenticator we

1031
00:39:21,809 --> 00:39:27,089
now log in and there we are logged in as

1032
00:39:24,930 --> 00:39:31,640
SMC we'll look at the post to the login

1033
00:39:27,089 --> 00:39:34,950
method all we posted was our username

1034
00:39:31,640 --> 00:39:36,299
the token which was the H Mac and the

1035
00:39:34,950 --> 00:39:37,169
challenge that we generated on the

1036
00:39:36,299 --> 00:39:41,160
client side

1037
00:39:37,170 --> 00:39:45,690
notice that this value 2 for 3 DF is the

1038
00:39:41,160 --> 00:39:47,759
same as this component of the challenge

1039
00:39:45,690 --> 00:39:50,190
message that the Authenticator generated

1040
00:39:47,759 --> 00:39:52,410
in H Mac for that was generated

1041
00:39:50,190 --> 00:39:53,519
client-side so now let's look at the

1042
00:39:52,410 --> 00:39:55,319
other ones when you change your

1043
00:39:53,519 --> 00:39:56,640
passwords so in this scenario the

1044
00:39:55,319 --> 00:39:59,069
password change means that we're logged

1045
00:39:56,640 --> 00:40:00,480
in but we just tell this the application

1046
00:39:59,069 --> 00:40:04,170
we want a new password for our own

1047
00:40:00,480 --> 00:40:05,789
reasons the form now is different we

1048
00:40:04,170 --> 00:40:07,829
need to enter our current password and

1049
00:40:05,789 --> 00:40:13,619
we need to choose a new password so the

1050
00:40:07,829 --> 00:40:18,359
login with test we will use a longer

1051
00:40:13,619 --> 00:40:21,960
password and we'll click this Change

1052
00:40:18,359 --> 00:40:24,089
button so down here we have a message in

1053
00:40:21,960 --> 00:40:26,720
the native messaging host it says change

1054
00:40:24,089 --> 00:40:29,549
password the existing password was test

1055
00:40:26,720 --> 00:40:33,990
the new password was loan balda longer

1056
00:40:29,549 --> 00:40:35,849
password so now we see that our native

1057
00:40:33,990 --> 00:40:39,930
messaging host generated that H Mac to

1058
00:40:35,849 --> 00:40:41,490
log in but it also just generated the

1059
00:40:39,930 --> 00:40:45,328
hash for the new password we'd have to

1060
00:40:41,490 --> 00:40:48,618
do both operations at once now so we

1061
00:40:45,329 --> 00:40:48,619
will now say change password

1062
00:40:49,510 --> 00:40:57,010
and now it's broken knocking so again we

1063
00:40:54,850 --> 00:40:59,710
see both components happening at once in

1064
00:40:57,010 --> 00:41:01,119
burp suite we submitted our token we

1065
00:40:59,710 --> 00:41:03,220
submitted our challenge which is exactly

1066
00:41:01,119 --> 00:41:06,070
what we did when we logged in and we

1067
00:41:03,220 --> 00:41:08,799
also have the hash and the salt for the

1068
00:41:06,070 --> 00:41:10,600
new password so it all just happened at

1069
00:41:08,800 --> 00:41:13,240
once again completely outside the

1070
00:41:10,600 --> 00:41:16,150
browser the Dom never even sees the

1071
00:41:13,240 --> 00:41:18,910
actual password so we preceded the

1072
00:41:16,150 --> 00:41:20,080
database with a password reset token I

1073
00:41:18,910 --> 00:41:23,319
don't know why I'm holding my clicker

1074
00:41:20,080 --> 00:41:26,500
all the time we will do reset token

1075
00:41:23,320 --> 00:41:28,180
equals reset underscore smc that's a

1076
00:41:26,500 --> 00:41:31,660
totally secure password reset token as

1077
00:41:28,180 --> 00:41:34,210
you all know so you know each step of

1078
00:41:31,660 --> 00:41:35,799
this operation the webpage itself is

1079
00:41:34,210 --> 00:41:37,540
taking a step back and saying all right

1080
00:41:35,800 --> 00:41:39,190
I know it's time for you to do something

1081
00:41:37,540 --> 00:41:40,810
with your password I'll step back and

1082
00:41:39,190 --> 00:41:42,550
let you talk to your Authenticator alone

1083
00:41:40,810 --> 00:41:44,560
you know it's a little bit like when

1084
00:41:42,550 --> 00:41:46,000
your employer wants a note from you to

1085
00:41:44,560 --> 00:41:47,650
make sure that you were actually sick

1086
00:41:46,000 --> 00:41:49,240
when you were out for a week they don't

1087
00:41:47,650 --> 00:41:50,560
want to walk into the exam room with you

1088
00:41:49,240 --> 00:41:52,629
and stick the little camera thing up

1089
00:41:50,560 --> 00:41:54,670
your nose to see if your sinuses are

1090
00:41:52,630 --> 00:41:56,320
actually clogged they just let you and

1091
00:41:54,670 --> 00:41:58,470
your physician do what you need to do

1092
00:41:56,320 --> 00:42:01,060
and also take the result once it's done

1093
00:41:58,470 --> 00:42:03,100
that's what the the webpage now has to

1094
00:42:01,060 --> 00:42:04,270
do the webpage is not in the password

1095
00:42:03,100 --> 00:42:10,930
handling business anymore

1096
00:42:04,270 --> 00:42:15,009
our Authenticator is so our new password

1097
00:42:10,930 --> 00:42:17,589
is going to be bad so now we again have

1098
00:42:15,010 --> 00:42:19,300
that new password message this operation

1099
00:42:17,590 --> 00:42:21,490
is the same password reset is the same

1100
00:42:19,300 --> 00:42:23,050
as registering a new account because

1101
00:42:21,490 --> 00:42:24,250
it's just saying I don't need to login I

1102
00:42:23,050 --> 00:42:28,300
just need to tell you what I want my new

1103
00:42:24,250 --> 00:42:29,950
password to be so we reset it faster

1104
00:42:28,300 --> 00:42:34,990
it's been reset we can now log in with

1105
00:42:29,950 --> 00:42:43,089
smc we'll go back to crass word and we

1106
00:42:34,990 --> 00:42:47,049
can log in as bad and we're back in so

1107
00:42:43,090 --> 00:42:48,850
that is the basic operation of this

1108
00:42:47,050 --> 00:42:55,540
whole thing now let's talk a bit more

1109
00:42:48,850 --> 00:43:03,180
about the impact man you look happy

1110
00:42:55,540 --> 00:43:03,180
so you will go back to presenter mode

1111
00:43:03,270 --> 00:43:10,840
and we will restart a presentation all

1112
00:43:08,320 --> 00:43:12,760
right our demo is done so the good

1113
00:43:10,840 --> 00:43:14,980
things what Bette ooh all right what

1114
00:43:12,760 --> 00:43:17,020
benefit did we get from this the h map

1115
00:43:14,980 --> 00:43:19,330
this authentication token we sent can't

1116
00:43:17,020 --> 00:43:21,910
be forged barring a really deeply broken

1117
00:43:19,330 --> 00:43:23,710
hash function we have resistance to

1118
00:43:21,910 --> 00:43:25,960
sniffing and passive man-in-the-middle

1119
00:43:23,710 --> 00:43:27,760
attacks when we login we have resistant

1120
00:43:25,960 --> 00:43:30,730
resistance to active man in the middle

1121
00:43:27,760 --> 00:43:32,230
attacks so long as the user knows that

1122
00:43:30,730 --> 00:43:34,810
they should only be telling their

1123
00:43:32,230 --> 00:43:36,640
password our Authenticator the user

1124
00:43:34,810 --> 00:43:38,529
behaves the way we want them to they

1125
00:43:36,640 --> 00:43:41,109
won't even tell their password to a

1126
00:43:38,530 --> 00:43:43,870
malicious web page I know that's the

1127
00:43:41,110 --> 00:43:45,730
significant task of the user we also

1128
00:43:43,870 --> 00:43:47,799
have resistance to replay attacks and

1129
00:43:45,730 --> 00:43:51,970
relay attacks direct due to origin

1130
00:43:47,800 --> 00:43:54,640
binding and we have in general if the if

1131
00:43:51,970 --> 00:43:56,379
a bad guy wants to attack us they have

1132
00:43:54,640 --> 00:43:58,060
to not only spend more money to do it

1133
00:43:56,380 --> 00:44:00,010
they have to use multiple techniques at

1134
00:43:58,060 --> 00:44:03,130
once they might have to social engineer

1135
00:44:00,010 --> 00:44:05,110
us and have a cracking server the bad

1136
00:44:03,130 --> 00:44:06,730
yes we have indeed made the hash the

1137
00:44:05,110 --> 00:44:08,680
password the hash is now the shared

1138
00:44:06,730 --> 00:44:10,150
secret we're using to authenticate we do

1139
00:44:08,680 --> 00:44:12,700
have to send it over the wire when we

1140
00:44:10,150 --> 00:44:15,390
register to change the password if the

1141
00:44:12,700 --> 00:44:18,279
attacker does sniff the hash in transit

1142
00:44:15,390 --> 00:44:19,960
they are able to compromise the account

1143
00:44:18,280 --> 00:44:22,180
now notice that they don't have the

1144
00:44:19,960 --> 00:44:25,090
password and even if they trick us into

1145
00:44:22,180 --> 00:44:26,770
registering on a malicious site we're

1146
00:44:25,090 --> 00:44:29,950
not going to have given them our hash

1147
00:44:26,770 --> 00:44:32,259
for the real site reason being salts are

1148
00:44:29,950 --> 00:44:34,810
generated client-side so long as there's

1149
00:44:32,260 --> 00:44:36,880
no collision in our two salts even if we

1150
00:44:34,810 --> 00:44:39,070
use the same password to register on two

1151
00:44:36,880 --> 00:44:43,510
different sites the actual shared secret

1152
00:44:39,070 --> 00:44:45,640
is not going to be the same so again the

1153
00:44:43,510 --> 00:44:47,440
operations that set the password are the

1154
00:44:45,640 --> 00:44:50,529
closest thing to an Achilles heel we

1155
00:44:47,440 --> 00:44:53,080
have we are present preventing reuse of

1156
00:44:50,530 --> 00:44:55,410
the F hash that's a new development in

1157
00:44:53,080 --> 00:44:58,540
the in the mathematical community it's

1158
00:44:55,410 --> 00:45:02,710
it's it's like an f-stop it's an F hash

1159
00:44:58,540 --> 00:45:04,720
I'm kidding it's just a typo so the what

1160
00:45:02,710 --> 00:45:06,070
the folks on Stack Overflow I know I'm

1161
00:45:04,720 --> 00:45:06,890
trying to liven things up here we talk

1162
00:45:06,070 --> 00:45:08,450
about cryptography

1163
00:45:06,890 --> 00:45:11,440
it's the most boring thing on the planet

1164
00:45:08,450 --> 00:45:14,598
so this is actually the most interesting

1165
00:45:11,440 --> 00:45:17,000
weakness of this system if the bad guy

1166
00:45:14,599 --> 00:45:19,309
actually pops our database and gets our

1167
00:45:17,000 --> 00:45:22,010
password hashes they can actually log

1168
00:45:19,309 --> 00:45:26,029
into every account now that is the

1169
00:45:22,010 --> 00:45:28,130
biggest weakness of this whole system in

1170
00:45:26,029 --> 00:45:30,200
a normal traditional password hashing

1171
00:45:28,130 --> 00:45:31,849
system if the bad guy compromises the

1172
00:45:30,200 --> 00:45:33,439
authentication database they still got

1173
00:45:31,849 --> 00:45:34,880
to crack the plain text password because

1174
00:45:33,440 --> 00:45:37,549
you have to send the plaintext password

1175
00:45:34,880 --> 00:45:40,220
across the wire to login here's my

1176
00:45:37,549 --> 00:45:44,420
argument for why the phishing resistance

1177
00:45:40,220 --> 00:45:45,799
we get outweighs this weakness if the

1178
00:45:44,420 --> 00:45:48,349
bad guy has compromised the

1179
00:45:45,799 --> 00:45:49,910
authentication database that's probably

1180
00:45:48,349 --> 00:45:53,000
not the only thing they've compromised

1181
00:45:49,910 --> 00:45:56,180
you've probably already got really huge

1182
00:45:53,000 --> 00:45:58,430
problems on your hands so increasing the

1183
00:45:56,180 --> 00:46:00,440
impact of a total database breach a

1184
00:45:58,430 --> 00:46:02,960
little bit by allowing the bad guy to

1185
00:46:00,440 --> 00:46:04,700
log in immediately is not that much

1186
00:46:02,960 --> 00:46:06,980
there's not that much space between

1187
00:46:04,700 --> 00:46:09,259
those two scenarios because the bad guy

1188
00:46:06,980 --> 00:46:10,849
has probably already compromised a lot

1189
00:46:09,260 --> 00:46:13,910
of data that's caused you a lot of

1190
00:46:10,849 --> 00:46:17,779
headaches with HIPAA and gdpr and

1191
00:46:13,910 --> 00:46:20,868
whatever else we care about the ugly

1192
00:46:17,779 --> 00:46:22,250
what do we do about mobile what about

1193
00:46:20,869 --> 00:46:23,779
this whole password portability thing

1194
00:46:22,250 --> 00:46:25,640
mobile devices have a keyboard writte

1195
00:46:23,779 --> 00:46:27,890
problem is they don't have the native

1196
00:46:25,640 --> 00:46:29,390
messaging API it's just a completely

1197
00:46:27,890 --> 00:46:32,390
different animal in terms of writing a

1198
00:46:29,390 --> 00:46:33,680
browser extension so that's something

1199
00:46:32,390 --> 00:46:35,210
that needs to be figured out and it

1200
00:46:33,680 --> 00:46:36,440
probably is going to mean that the

1201
00:46:35,210 --> 00:46:38,539
browser has to be rewritten pretty

1202
00:46:36,440 --> 00:46:40,009
significantly and we need to be able to

1203
00:46:38,539 --> 00:46:42,799
support other user agents what about

1204
00:46:40,009 --> 00:46:45,799
double you get you know command-line

1205
00:46:42,799 --> 00:46:47,538
browsers I use them they matter so I

1206
00:46:45,799 --> 00:46:49,250
actually sounded really arrogant if I

1207
00:46:47,539 --> 00:46:50,240
use them therefore they matter but I

1208
00:46:49,250 --> 00:46:52,849
don't know

1209
00:46:50,240 --> 00:46:54,078
anyway I those programmers those

1210
00:46:52,849 --> 00:46:56,210
developers and maintain errs are

1211
00:46:54,079 --> 00:46:58,970
probably gonna be a little slower to

1212
00:46:56,210 --> 00:47:00,559
adopt this which may impact our ability

1213
00:46:58,970 --> 00:47:02,750
to make this universally usable

1214
00:47:00,559 --> 00:47:05,930
we don't want to be using an extension

1215
00:47:02,750 --> 00:47:08,359
to do this and again the resistance to

1216
00:47:05,930 --> 00:47:10,308
phishing is behavioral at its core it

1217
00:47:08,359 --> 00:47:12,500
requires the user to get used to

1218
00:47:10,309 --> 00:47:14,299
communicating only with crafts word with

1219
00:47:12,500 --> 00:47:16,490
our Authenticator when they're typing

1220
00:47:14,299 --> 00:47:19,600
their password in order for this to work

1221
00:47:16,490 --> 00:47:22,060
it has to be adopted across the board or

1222
00:47:19,600 --> 00:47:23,710
as broadly as possible users need to

1223
00:47:22,060 --> 00:47:25,150
know what that means when they click

1224
00:47:23,710 --> 00:47:28,090
that lock icon and they need to know

1225
00:47:25,150 --> 00:47:29,410
instinctively why it's dangerous that it

1226
00:47:28,090 --> 00:47:31,030
is dangerous and that they shouldn't be

1227
00:47:29,410 --> 00:47:33,910
typing their password directly into the

1228
00:47:31,030 --> 00:47:35,410
webpage so the way forward for this and

1229
00:47:33,910 --> 00:47:37,299
that this is just a random research

1230
00:47:35,410 --> 00:47:39,339
project that hopefully made interesting

1231
00:47:37,300 --> 00:47:41,950
conference talk fodder but if this

1232
00:47:39,340 --> 00:47:43,270
actually is going to work cryptographers

1233
00:47:41,950 --> 00:47:45,009
need to pay attention to it we need some

1234
00:47:43,270 --> 00:47:47,920
professionals to actually vet the crypto

1235
00:47:45,010 --> 00:47:49,480
okay everyone including me likes to give

1236
00:47:47,920 --> 00:47:51,580
the advice don't roll your own crypto

1237
00:47:49,480 --> 00:47:53,230
and we tried to minimize the impact of

1238
00:47:51,580 --> 00:47:54,910
it in this that's why we didn't try to

1239
00:47:53,230 --> 00:47:57,070
replace the H Mac algorithm with

1240
00:47:54,910 --> 00:48:00,190
something new we just used a standard

1241
00:47:57,070 --> 00:48:01,870
implementation of RFC 2104 but we need

1242
00:48:00,190 --> 00:48:03,280
some attention from cryptographers this

1243
00:48:01,870 --> 00:48:05,529
needs to be written into a formalized

1244
00:48:03,280 --> 00:48:08,410
standard it needs to be portable and it

1245
00:48:05,530 --> 00:48:11,440
needs to be written so that any browser

1246
00:48:08,410 --> 00:48:13,569
developer be it brave or whatever other

1247
00:48:11,440 --> 00:48:15,190
new browsers is on the block so that

1248
00:48:13,570 --> 00:48:17,320
they can make their browser work with

1249
00:48:15,190 --> 00:48:20,470
this standard as well it needs to be

1250
00:48:17,320 --> 00:48:21,850
core browser functionality and we

1251
00:48:20,470 --> 00:48:23,470
obviously need to have major vetting on

1252
00:48:21,850 --> 00:48:26,350
the code that actually implements the

1253
00:48:23,470 --> 00:48:29,080
crypto because it takes years and lots

1254
00:48:26,350 --> 00:48:30,730
of effort to avoid timing leaks and

1255
00:48:29,080 --> 00:48:34,170
other side channel problems with code

1256
00:48:30,730 --> 00:48:36,490
that does cryptographic functions so

1257
00:48:34,170 --> 00:48:38,740
that is the way I would like to see

1258
00:48:36,490 --> 00:48:40,839
password authentication done on the web

1259
00:48:38,740 --> 00:48:43,029
I think there are real concrete benefits

1260
00:48:40,840 --> 00:48:45,400
to it and if anybody knows someone on

1261
00:48:43,030 --> 00:48:46,660
the mozilla developer team send them a

1262
00:48:45,400 --> 00:48:49,750
link to this talk after it's up on

1263
00:48:46,660 --> 00:48:54,190
Adrienne's website if you got any

1264
00:48:49,750 --> 00:48:55,240
questions we have 53 seconds left all

1265
00:48:54,190 --> 00:48:56,680
right I will be around I'll be at the

1266
00:48:55,240 --> 00:48:58,330
parameter booth for at some point if

1267
00:48:56,680 --> 00:49:01,589
anybody wants to come talk otherwise

1268
00:48:58,330 --> 00:49:01,590
thank you very much injury dead

