1
00:00:00,190 --> 00:00:04,270
to clock a mess or start right on I have
demos so

2
00:00:04,270 --> 00:00:07,460
I'm hoping we don't go over if we do
what we always have fun out

3
00:00:07,460 --> 00:00:11,550
on I now the screen over there

4
00:00:11,550 --> 00:00:16,920
%ah I think therefore a poon all my
name's Alex Jeff Gray I go buy a cell

5
00:00:16,920 --> 00:00:20,260
on again sort of why did yesterday on

6
00:00:20,260 --> 00:00:24,760
I some people have called me a hacker
some people have called me a geek

7
00:00:24,760 --> 00:00:28,859
a innovator the future and before the
end of today

8
00:00:28,859 --> 00:00:34,579
at least five you will call me an ass to
my face

9
00:00:34,579 --> 00:00:38,770
on all why am I doing this talk what is
about

10
00:00:38,770 --> 00:00:44,660
on I've been to a lot of conferences and
up to this point I haven't seen one

11
00:00:44,660 --> 00:00:46,039
which really goes from

12
00:00:46,039 --> 00:00:49,329
I see an application to

13
00:00:49,329 --> 00:00:53,860
here's an exploit so this talk is going
to systematically go through the process

14
00:00:53,860 --> 00:00:54,110
%uh

15
00:00:54,050 --> 00:00:58,859
we find an application we test this
application we follows the application

16
00:00:58,859 --> 00:01:03,750
we find a bug we then move it all the
way to an exploit we overcome a few

17
00:01:03,750 --> 00:01:07,770
obstacles with that exploit on in really
stepping it

18
00:01:07,770 --> 00:01:11,450
all the way through the steps if you
want to take notes feel free if

19
00:01:11,450 --> 00:01:15,770
sure will be online later on I'm not
gonna be able to go into a tiny detail

20
00:01:15,770 --> 00:01:20,759
on each step but the information you get
here should be enough for you can go out

21
00:01:20,759 --> 00:01:21,250
and

22
00:01:21,250 --> 00:01:26,820
and do this on starting off we're going
to be looking at TFTP application

23
00:01:26,820 --> 00:01:31,400
it actually I have found it all this 1i
have fun live during testing

24
00:01:31,400 --> 00:01:34,939
this same application has been tested to
DAP

25
00:01:34,939 --> 00:01:38,829
on I am going to be exploring in a way
which I haven't seen

26
00:01:38,829 --> 00:01:42,630
on just being all the jump up the stack
a little bit more

27
00:01:42,630 --> 00:01:46,860
on it's used for backups a lot a Cisco
routers use it to a backup for running

28
00:01:46,860 --> 00:01:47,680
configures

29
00:01:47,680 --> 00:01:53,920
all so first I guess or jumping right in
as we need the application to test it

30
00:01:53,920 --> 00:01:57,030
on if you're doing this can you do it
and nap in the system

31
00:01:57,030 --> 00:02:00,790
you find running something how do you
get well there's

32
00:02:00,790 --> 00:02:04,219
really too obvious ways that you're
actually doing this test

33
00:02:04,219 --> 00:02:08,610
legitimately we're actually doing have
access to the company

34
00:02:08,610 --> 00:02:11,700
you can ask for it its

35
00:02:11,700 --> 00:02:14,890
okay on the second way is really there's

36
00:02:14,890 --> 00:02:18,670
application databases online you can
find the version you need a it's really

37
00:02:18,670 --> 00:02:19,640
easy to find the version

38
00:02:19,640 --> 00:02:23,550
and map and what not on so first thing

39
00:02:23,550 --> 00:02:27,670
TFTP we have to learn it before we can
pony

40
00:02:27,670 --> 00:02:32,209
before answer fussing at the No what in
the world that is how it communicates

41
00:02:32,209 --> 00:02:35,290
really on a very basic level on

42
00:02:35,290 --> 00:02:39,170
all the way down and we look at two ways
we can find out

43
00:02:39,170 --> 00:02:43,010
how that protocol works firstly is
looking at the RFC

44
00:02:43,010 --> 00:02:46,760
which is usually a pretty big document
on this a lot of usually different

45
00:02:46,760 --> 00:02:50,769
write-ups on a it's a huge document

46
00:02:50,769 --> 00:02:54,640
however we only actually need a few
parts ever

47
00:02:54,640 --> 00:02:59,340
one of which is how this communication
happens is there a preamble

48
00:02:59,340 --> 00:03:03,030
is there a handshake that happens is
there

49
00:03:03,030 --> 00:03:06,640
we have to communicate login Anna
connection is made

50
00:03:06,640 --> 00:03:10,110
tunnels generated with TFTP its really
simple

51
00:03:10,110 --> 00:03:13,890
you send a request to Jojo stay sends a
request

52
00:03:13,890 --> 00:03:17,019
in the are on wrk he was a right request

53
00:03:17,019 --> 00:03:20,250
and hose be sent back you know attack so

54
00:03:20,250 --> 00:03:23,489
this is like the perfect application of
Oz

55
00:03:23,489 --> 00:03:27,849
because you don't need a hand shake it
makes it so easy we send one packet and

56
00:03:27,849 --> 00:03:28,400
then

57
00:03:28,400 --> 00:03:33,629
were off the next most important part

58
00:03:33,629 --> 00:03:37,250
is the packet itself what is the packet
look like

59
00:03:37,250 --> 00:03:41,099
in very simply there's an up to an
operation coder

60
00:03:41,099 --> 00:03:47,040
between same up here 1234 data request
technology may write request we're going

61
00:03:47,040 --> 00:03:48,340
to look at the right request

62
00:03:48,340 --> 00:03:52,970
the file name on all by its the mode in
a novel by its

63
00:03:52,970 --> 00:03:56,239
everyone look more when the world those
mods are

64
00:03:56,239 --> 00:04:01,140
there's in your doctor in new mail you
can do on that

65
00:04:01,140 --> 00:04:05,110
ASCII her ASCII ok after all

66
00:04:05,110 --> 00:04:10,260
but there's a bunch of different modes
again a we have to know what the pack it

67
00:04:10,260 --> 00:04:12,310
looks like the next step

68
00:04:12,310 --> 00:04:15,400
again what makes it a little bit more
clear as when they actually look at

69
00:04:15,400 --> 00:04:16,478
Wireshark

70
00:04:16,479 --> 00:04:22,759
we can look this is a right request
because the opcode was too

71
00:04:22,759 --> 00:04:27,060
again winding up the RFC a there's a
jerk on a

72
00:04:27,060 --> 00:04:32,090
let's look at the actual data again and
I want you guys to be very specific

73
00:04:32,090 --> 00:04:35,729
there's been no bite which starts a
there's the opcode a

74
00:04:35,729 --> 00:04:39,350
the file name up another no I'll buy it

75
00:04:39,350 --> 00:04:42,460
the mold and then another know by

76
00:04:42,460 --> 00:04:45,650
all this information really ties back to
again

77
00:04:45,650 --> 00:04:50,530
the RFC I want this to be abundantly
clear how much just past the lineup

78
00:04:50,530 --> 00:04:54,130
in really a how easy it is to understand
a protocol on that

79
00:04:54,130 --> 00:04:57,630
byte level

80
00:04:57,630 --> 00:05:01,380
know is we've done that we can actually
in start buzzing

81
00:05:01,380 --> 00:05:05,419
fuzzy essentially is at fry the basic
levels

82
00:05:05,419 --> 00:05:09,550
throwing random crap at the fang
intelligent random crap

83
00:05:09,550 --> 00:05:13,350
at the application and see how it reacts

84
00:05:13,350 --> 00:05:16,850
on this can be done manually it can also
be done automatically

85
00:05:16,850 --> 00:05:20,410
it can also be done super automatically
on

86
00:05:20,410 --> 00:05:25,080
things like solely impeach are two
applications that you fussing

87
00:05:25,080 --> 00:05:28,220
and they can you some incredible
automation from

88
00:05:28,220 --> 00:05:32,210
on you could set up VM's which are
running the application

89
00:05:32,210 --> 00:05:36,690
it wolf Ste you and start fussing the
application when it registers a crash

90
00:05:36,690 --> 00:05:39,830
go grab the stack traces save those to a
file

91
00:05:39,830 --> 00:05:44,630
automatically reboot the VM and then
start fighting again

92
00:05:44,630 --> 00:05:48,729
a spike is actually included in to
backtrack distro to the

93
00:05:48,729 --> 00:05:53,080
excellent distro and it's it's really
simple to use the most real simple it is

94
00:05:53,080 --> 00:05:53,820
by

95
00:05:53,820 --> 00:05:56,979
us making a template on viewer is
application

96
00:05:56,979 --> 00:06:01,210
fuzzing reduce protocol fuzzing of
protocol fuzzing is used in a lot a

97
00:06:01,210 --> 00:06:02,770
SCADA systems

98
00:06:02,770 --> 00:06:07,460
application can be everything from web
services

99
00:06:07,460 --> 00:06:11,949
to in bauza are of form fielder

100
00:06:11,949 --> 00:06:15,600
you even use intelligent sequel
fathering which would just

101
00:06:15,600 --> 00:06:20,270
for a sequel commands

102
00:06:20,270 --> 00:06:23,620
life on this

103
00:06:23,620 --> 00:06:27,430
before I jump into I will be trying if
you guys can't see anything during the

104
00:06:27,430 --> 00:06:31,330
live demo tell me I can zoom in and
showed a little bit more clear

105
00:06:31,330 --> 00:06:34,460
I know with these big screen sometimes
you can't see it as much

106
00:06:34,460 --> 00:06:41,060
us or we're doing it live

107
00:06:41,060 --> 00:06:45,830
I know live demos can get a little man
not nests on our tryin

108
00:06:45,830 --> 00:06:50,639
show it the way it but I really want you
guys to watch systematically how

109
00:06:50,639 --> 00:06:57,639
how we go about this really we want to
do is wear start of the application

110
00:06:58,270 --> 00:07:05,270
we're starting heard about divider I use
Ali works great

111
00:07:05,830 --> 00:07:10,880
researcher the executors ball

112
00:07:10,880 --> 00:07:14,509
as you can see in CR right in there if
process idea

113
00:07:14,509 --> 00:07:21,130
attach it run at we are now running our
application insider departure

114
00:07:21,130 --> 00:07:24,240
at this point we wanna rock load up our

115
00:07:24,240 --> 00:07:31,240
flaws in Tampa

116
00:07:36,370 --> 00:07:43,370
it to you we know to YouTube he packed
it so one second

117
00:07:51,020 --> 00:07:58,020
just so I don't lose my spot here

118
00:07:59,120 --> 00:08:06,120
no yes little bit more

119
00:08:09,139 --> 00:08:12,189
we put our pic IP address which is
running the server

120
00:08:12,189 --> 00:08:15,770
the poor

121
00:08:15,770 --> 00:08:19,740
in the Templar

122
00:08:19,740 --> 00:08:26,740
here so I can show this to you

123
00:08:33,879 --> 00:08:37,120
I know I showed this up on the screen I
wanna you to search

124
00:08:37,120 --> 00:08:40,629
see this is exactly what the template
looks like that

125
00:08:40,629 --> 00:08:44,060
that spike uses again to are no by

126
00:08:44,060 --> 00:08:47,509
the motor the file name annulled by it

127
00:08:47,509 --> 00:08:51,360
the motor side following the motor
annulled by

128
00:08:51,360 --> 00:08:55,649
in sleep usually makes it a little bit
more stable just because it's no way

129
00:08:55,649 --> 00:09:00,079
in O'Hare a second before it sends the
next request that just one millisecond

130
00:09:00,079 --> 00:09:04,209
on with in this spike you and set again

131
00:09:04,209 --> 00:09:07,540
binary strings what's the actual tax
bite which is

132
00:09:07,540 --> 00:09:10,879
going across the wire immense string
variables

133
00:09:10,879 --> 00:09:15,009
we saw file about tax than on the ASCII

134
00:09:15,009 --> 00:09:18,100
go as as the mod in the Wireshark
capture

135
00:09:18,100 --> 00:09:22,019
in specifying here setting underscored
variable

136
00:09:22,019 --> 00:09:26,009
of was that parameter and spike has
within its

137
00:09:26,009 --> 00:09:31,259
testing set it has

138
00:09:31,259 --> 00:09:38,259
about 5,000 tasks it does per protocol

139
00:09:47,420 --> 00:09:50,980
so we want to start testing variable
wanna

140
00:09:50,980 --> 00:09:54,730
which is 0 which is the file name

141
00:09:54,730 --> 00:09:58,400
we just started test zeroing rob the
five thousand

142
00:09:58,400 --> 00:10:01,970
from the kick this off

143
00:10:01,970 --> 00:10:05,730
and go on over to our other screen and
watch this if you notice

144
00:10:05,730 --> 00:10:10,160
immediately the application pauses being
go ahead and cancel this

145
00:10:10,160 --> 00:10:14,080
looks like that was the one that caused
a

146
00:10:14,080 --> 00:10:17,770
and we know there's something really
interesting

147
00:10:17,770 --> 00:10:21,340
it's not gonna be a straight yeah I P O
overwrite

148
00:10:21,340 --> 00:10:24,780
however we did get a couple we did get a
couple

149
00:10:24,780 --> 00:10:28,030
registers to actually club collapse on a
ser o

150
00:10:28,030 --> 00:10:31,540
overwrite Lucier

151
00:10:31,540 --> 00:10:38,540
offer stored in EC X when followers
stack pointer

152
00:10:39,110 --> 00:10:43,380
in the biggest thing we'll all look as
the

153
00:10:43,380 --> 00:10:49,860
the SCH chain and we notice

154
00:10:49,860 --> 00:10:56,860
that 41 41 41 41 which is

155
00:10:57,270 --> 00:11:00,950
on over right spike senza

156
00:11:00,950 --> 00:11:05,620
set a big offer a is rink at capture and
Wireshark

157
00:11:05,620 --> 00:11:09,010
in it over wrote this SCH handler now

158
00:11:09,010 --> 00:11:13,060
without going into a lot of detail
essentially a on these exception

159
00:11:13,060 --> 00:11:13,790
handlers

160
00:11:13,790 --> 00:11:18,690
work within Windows if it ever happens
at hand it off to this exception handler

161
00:11:18,690 --> 00:11:22,110
if it if it's broken it will keep
jumping up

162
00:11:22,110 --> 00:11:25,970
they'll keep jumping up those exceptions
so the operating system is it just

163
00:11:25,970 --> 00:11:30,260
crumble 11 application crashes so it's
an intelligent way of handling those

164
00:11:30,260 --> 00:11:30,930
errors

165
00:11:30,930 --> 00:11:36,530
so I was able to again

166
00:11:36,530 --> 00:11:40,670
what we're able to do now is we can now
we want to read duplicate this

167
00:11:40,670 --> 00:11:45,260
in a Python script her whatever your
script is so we can understand it

168
00:11:45,260 --> 00:11:52,260
read duplicating give us something to
move on from a

169
00:12:16,269 --> 00:12:23,269
so this is a century from USC that
alright Haas

170
00:12:37,530 --> 00:12:44,530
well all

171
00:12:52,380 --> 00:12:59,380
miss even make this a little better to
see really fast

172
00:13:09,630 --> 00:13:15,680
that 30

173
00:13:15,680 --> 00:13:19,089
little bit better yes you now

174
00:13:19,089 --> 00:13:22,980
awesome again this is party fun it
creates a socket

175
00:13:22,980 --> 00:13:27,000
reset the host port essentially this is
the information we're interested and we

176
00:13:27,000 --> 00:13:29,769
wanna read duplicate exactly what we're
seeing

177
00:13:29,769 --> 00:13:33,750
in it now only in spite but also in

178
00:13:33,750 --> 00:13:37,550
what lawyers sure to recreate that
packet format

179
00:13:37,550 --> 00:13:41,910
within something we can at we know
looking at Spike

180
00:13:41,910 --> 00:13:45,029
ATL jump back on over to that

181
00:13:45,029 --> 00:13:49,640
Iran irish Grand in this window

182
00:13:49,640 --> 00:13:53,269
that it was about five thousand by its
within the file name which

183
00:13:53,269 --> 00:13:57,570
cause that crashed to happen so
essentially just recreate the

184
00:13:57,570 --> 00:14:01,190
within Python we set up our know by
eight are

185
00:14:01,190 --> 00:14:04,370
are right now to the file name a

186
00:14:04,370 --> 00:14:07,950
and then net now ask you just to throw
in the motor

187
00:14:07,950 --> 00:14:14,950
followed by an all by so

188
00:14:16,709 --> 00:14:23,709
just make sure we have this right let's
run it again a and redo bookie the crash

189
00:14:32,539 --> 00:14:37,110
we attach a debugger

190
00:14:37,110 --> 00:14:40,780
it's running run its

191
00:14:40,780 --> 00:14:46,400
we had the exact same crash so

192
00:14:46,400 --> 00:14:53,400
if we want to hijack this handler we
have five thousand a is 4-1 in axes

193
00:14:55,640 --> 00:14:59,250
a we have to figure out where in the
world that is

194
00:14:59,250 --> 00:15:02,790
I can we do this fast efficient

195
00:15:02,790 --> 00:15:07,130
there's really two ways of doing it we
can either with 5,000 by

196
00:15:07,130 --> 00:15:12,660
offer we can separate it go tour you
know 2500 ages 2500 be

197
00:15:12,660 --> 00:15:16,330
is and then keep cut in half and I'll
take seven to eight ties are you get

198
00:15:16,330 --> 00:15:17,740
something we can understand that

199
00:15:17,740 --> 00:15:22,340
on menos Metasploit the Metasploit
Framework is a really cool to or

200
00:15:22,340 --> 00:15:27,860
which allows us to find this a lot
faster is essentially comes up with a

201
00:15:27,860 --> 00:15:28,870
systematic

202
00:15:28,870 --> 00:15:32,750
range love I guess not numbers and
letters

203
00:15:32,750 --> 00:15:35,750
which then you can search and find the
exact position

204
00:15:35,750 --> 00:15:41,400
so we're gonna generate one does

205
00:15:41,400 --> 00:15:45,800
call pattern created under the tools
directory new want to create one which

206
00:15:45,800 --> 00:15:46,100
is

207
00:15:46,100 --> 00:15:51,480
5,000 bytes long NC comes up this big

208
00:15:51,480 --> 00:15:56,820
ridiculous try to strengthen seed of to
watch me Thai Pattana

209
00:15:56,820 --> 00:16:00,180
Rd editor

210
00:16:00,180 --> 00:16:05,480
say century all we're doing is we're
taking that same morning or putting in

211
00:16:05,480 --> 00:16:06,230
our file

212
00:16:06,230 --> 00:16:13,230
I'm over this tax will slow the better
and then we get to run this

213
00:16:20,980 --> 00:16:24,769
unfortunate this application you can has
restarted inside the departure

214
00:16:24,769 --> 00:16:31,769
yes yes opening up in reattach a

215
00:16:37,260 --> 00:16:40,120
sorry no reattach here well-run

216
00:16:40,120 --> 00:16:45,360
exact same exploit we got our crash

217
00:16:45,360 --> 00:16:52,360
and we have this really weird lookin
string down the secular

218
00:16:52,980 --> 00:16:56,050
what's cool about this

219
00:16:56,050 --> 00:17:01,250
you know zoom insincere really cool but
let us when this to all

220
00:17:01,250 --> 00:17:08,250
design go ahead and copy to clipboard

221
00:17:11,790 --> 00:17:15,809
go back to that same pattern creator

222
00:17:15,809 --> 00:17:22,809
look at the office at ok

223
00:17:25,550 --> 00:17:28,740
grab this off Sat that we found

224
00:17:28,740 --> 00:17:35,740
copy in the strain in all tell us the
exact bites

225
00:17:35,980 --> 00:17:41,059
which leads

226
00:17:41,059 --> 00:17:44,850
to us hijacking the handler so

227
00:17:44,850 --> 00:17:49,520
1,496 bytes and we're gonna hit the
handler right on the nose

228
00:17:49,520 --> 00:17:56,520
where do a quick test this is we want to
make sure we're accurate

229
00:17:58,240 --> 00:18:03,809
and once we set this we don't want to
deviate from that 5,000 is me know

230
00:18:03,809 --> 00:18:04,450
that's gonna

231
00:18:04,450 --> 00:18:11,450
or any other controller crash that way

232
00:18:16,140 --> 00:18:23,140
reattach it

233
00:18:24,340 --> 00:18:27,619
we put our number in here 1,496

234
00:18:27,619 --> 00:18:31,210
we follow life forward p/e is M&A

235
00:18:31,210 --> 00:18:38,210
3,760 for which is just you know
whatever's left up she is

236
00:18:44,480 --> 00:18:49,250
we send that's because the same crash
wanna make sure we were accurate and we

237
00:18:49,250 --> 00:18:49,660
were

238
00:18:49,660 --> 00:18:54,310
dead-on four bytes exactly where we
wanna

239
00:18:54,310 --> 00:19:01,310
we can follow any image we follow the in
the stack

240
00:19:10,009 --> 00:19:14,710
and see exactly where we overrode a so
it's close us down

241
00:19:14,710 --> 00:19:21,710
let's take the next step

242
00:19:26,500 --> 00:19:32,080
stature we run it

243
00:19:32,080 --> 00:19:36,170
so at this point we we have then the
staff we have control over say

244
00:19:36,170 --> 00:19:40,100
exception handler we know it vet Arbaugh
for

245
00:19:40,100 --> 00:19:43,150
is above bats in we know exactly

246
00:19:43,150 --> 00:19:49,310
only what's up this is the one we just
sent

247
00:19:49,310 --> 00:19:56,310
we know that we hit the set exception
handler right at the B is

248
00:19:56,870 --> 00:20:00,130
we know we have this wonderful space up
here

249
00:20:00,130 --> 00:20:03,260
will be four we know how the sex after
handler works

250
00:20:03,260 --> 00:20:08,770
a stack except family works what we need
a pop pop a rat we need to pop

251
00:20:08,770 --> 00:20:13,460
to spots of the stack so we can actually
get excusable code

252
00:20:13,460 --> 00:20:16,940
or order to do that again

253
00:20:16,940 --> 00:20:20,980
menace boys ago is a great framework use
for exploitation

254
00:20:20,980 --> 00:20:25,130
we can't

255
00:20:25,130 --> 00:20:29,740
just scan for a pop pop rat in the
executors

256
00:20:29,740 --> 00:20:34,450
and the execute avoid running dll's
there's one problem within Windows

257
00:20:34,450 --> 00:20:38,640
within the whole sides in that area

258
00:20:38,640 --> 00:20:42,350
there's one thing with a few really
prevents us using air

259
00:20:42,350 --> 00:20:45,700
said exception handlers

260
00:20:45,700 --> 00:20:50,230
short against them being all the USAID
exception handlers from

261
00:20:50,230 --> 00:20:53,300
other dll's in that's safe Seah

262
00:20:53,300 --> 00:20:57,630
there's a great module four ali-a which
allows you to search

263
00:20:57,630 --> 00:21:01,240
dll's that are loaded which are needed
for this execute a ball

264
00:21:01,240 --> 00:21:04,460
so all these are loaded problemas

265
00:21:04,460 --> 00:21:08,730
this operating system was created under
every single one Obama

266
00:21:08,730 --> 00:21:15,070
was created with that flag on Windows
compiled so we can't use on however

267
00:21:15,070 --> 00:21:21,440
sort of good a is that the actual server
execute a ball

268
00:21:21,440 --> 00:21:24,780
it's not compiled with a

269
00:21:24,780 --> 00:21:28,740
however fierce sucky problem I ran into
an exporting

270
00:21:28,740 --> 00:21:34,440
us anyone see what it is has to do with
a null byte

271
00:21:34,440 --> 00:21:37,890
the entire range that's loaded into has

272
00:21:37,890 --> 00:21:41,050
annulled by Dan has 20 secs to each
other

273
00:21:41,050 --> 00:21:44,430
which when the RO judging by the RFC

274
00:21:44,430 --> 00:21:49,740
when Matt's ran through the application
it will hit your expect the next part on

275
00:21:49,740 --> 00:21:51,300
expect either a motor

276
00:21:51,300 --> 00:21:55,410
profile name when it hits that no bite
so wat we need to figure out a way

277
00:21:55,410 --> 00:21:56,330
around that

278
00:21:56,330 --> 00:22:00,180
right now we're just put on hold the
first we need to find a pop opera at

279
00:22:00,180 --> 00:22:07,180
so again we can use P Es Cana

280
00:22:15,160 --> 00:22:18,770
search the execute a boy and boom
there's a problem

281
00:22:18,770 --> 00:22:24,260
we have anyone to

282
00:22:24,260 --> 00:22:29,370
is you really care what it's popping off
the stack

283
00:22:29,370 --> 00:22:36,370
we just needed to pop two things of the
stack

284
00:22:39,710 --> 00:22:44,460
3 grabbed wanna I just grabbed a this
one right here

285
00:22:44,460 --> 00:22:48,260
we can run this if you want essentially
what we want is we want redirection

286
00:22:48,260 --> 00:22:53,910
to go down I'll redirection which we
hijacking the SEA Chandler

287
00:22:53,910 --> 00:22:58,430
in jump over to our pop opera let's run
this one really fast

288
00:22:58,430 --> 00:23:01,620
and we should build start understanding
you know

289
00:23:01,620 --> 00:23:08,620
how we're gonna circumvent some the
security in get our payload in there

290
00:23:14,930 --> 00:23:21,669
you start the application

291
00:23:21,669 --> 00:23:26,470
attach a debugger

292
00:23:26,470 --> 00:23:32,840
run week after crass if we look i'd set
a breakpoint

293
00:23:32,840 --> 00:23:36,920
we overrode a with our pop pop a raft

294
00:23:36,920 --> 00:23:40,450
I'm gonna go ahead and pop passes
exception

295
00:23:40,450 --> 00:23:44,610
your shift at nine we then chump

296
00:23:44,610 --> 00:23:49,710
with an execution back to the pop operat

297
00:23:49,710 --> 00:23:56,710
now lets you know how this works in
showing the stack we run the first part

298
00:24:00,410 --> 00:24:03,620
and it pops the first one of the staff
to see down here

299
00:24:03,620 --> 00:24:08,150
or on the next one

300
00:24:08,150 --> 00:24:11,160
it pops the next one of the staff

301
00:24:11,160 --> 00:24:14,650
and returned or other offer

302
00:24:14,650 --> 00:24:17,730
our ritual operation in here

303
00:24:17,730 --> 00:24:21,540
awesome

304
00:24:21,540 --> 00:24:26,160
this is not always the best feeling when
you only have four bytes to fit in like

305
00:24:26,160 --> 00:24:27,380
a three hundred by

306
00:24:27,380 --> 00:24:31,770
exploit so we now have to figure out how
in the world we're gonna get outta

307
00:24:31,770 --> 00:24:38,510
us anyone have an idea all we have all
this space up here from our

308
00:24:38,510 --> 00:24:42,760
original exploit let's use some %uh that

309
00:24:42,760 --> 00:24:46,200
from this all we can do is

310
00:24:46,200 --> 00:24:53,200
but let's just jump up the stack all
over

311
00:25:02,980 --> 00:25:09,980
know we ran into that nobody earlier
which I did want to come back to

312
00:25:15,570 --> 00:25:19,930
this will not be able to get past
because it has this

313
00:25:19,930 --> 00:25:26,760
know by tonight right here what will
happen is where it gets passed over the

314
00:25:26,760 --> 00:25:27,940
wire like this thick

315
00:25:27,940 --> 00:25:31,590
application go i'd you know well what's
going on

316
00:25:31,590 --> 00:25:35,740
is it will see our file name: this no
bite

317
00:25:35,740 --> 00:25:39,460
as in the RFC here

318
00:25:39,460 --> 00:25:42,630
this novel by it and then I'll hit the
motherload

319
00:25:42,630 --> 00:25:46,850
it won't actually create a package
application in use

320
00:25:46,850 --> 00:25:50,180
so what we can do is we can actually
have leverage the

321
00:25:50,180 --> 00:25:53,530
its the own Pro its own protocol against
itself

322
00:25:53,530 --> 00:25:57,380
the way we do this maybe this will make
it a little bit more clear

323
00:25:57,380 --> 00:26:01,420
is we can use

324
00:26:01,420 --> 00:26:05,070
been no bite which the RFC users or TFTP

325
00:26:05,070 --> 00:26:08,820
uses and its protocol to overwrite that
last but

326
00:26:08,820 --> 00:26:12,120
so instead of passing it here

327
00:26:12,120 --> 00:26:16,010
we can't pass it

328
00:26:16,010 --> 00:26:23,010
right after the file name in leverage
the protocol and we can get the jump we

329
00:26:23,650 --> 00:26:28,490
want

330
00:26:28,490 --> 00:26:33,299
so we have explored exploiter we get we
hijacked the set handler

331
00:26:33,299 --> 00:26:37,120
we have our pop-up right now we're stuck
with like like four bytes

332
00:26:37,120 --> 00:26:40,149
or four bites that we can't do any tho

333
00:26:40,149 --> 00:26:43,450
there's no space for exploit so I
mentioned

334
00:26:43,450 --> 00:26:48,630
let's jump up the stack we can do this
with the simple so

335
00:26:48,630 --> 00:26:54,640
short jump commander right there and we
just feel the other two spots

336
00:26:54,640 --> 00:27:01,640
knobs

337
00:27:03,840 --> 00:27:10,190
we run this we catch IOException we pass
a

338
00:27:10,190 --> 00:27:14,200
reader pop pop rats we are now under
short drum

339
00:27:14,200 --> 00:27:17,560
and we jumped approximately 128 bytes

340
00:27:17,560 --> 00:27:22,630
up the stack awesome we have a 128 bytes
the fit something and

341
00:27:22,630 --> 00:27:27,330
at this point we could do I can take
hunter and a country's central search

342
00:27:27,330 --> 00:27:30,460
them the memory frame in look for your
payload

343
00:27:30,460 --> 00:27:34,090
cool but not nearly as cool as not
wasting

344
00:27:34,090 --> 00:27:37,800
memory and space to make your really
obvious to the and user

345
00:27:37,800 --> 00:27:42,170
you know their CPU spy 200 we start on
the space up here

346
00:27:42,170 --> 00:27:46,790
which we can use we just have to figure
all we have jumping to a

347
00:27:46,790 --> 00:27:51,150
nope we can systematically trying to
jump off her hijacker

348
00:27:51,150 --> 00:27:55,310
but what's great about exploitation is
that a lot of people have done it

349
00:27:55,310 --> 00:28:02,310
and people can waste a lot more time the
man Aaron Adams came up with

350
00:28:03,130 --> 00:28:10,130
excellent way

351
00:28:15,100 --> 00:28:18,390
a controlling the stack in making those
large drops

352
00:28:18,390 --> 00:28:23,350
in here does originally wrote it and
frack article

353
00:28:23,350 --> 00:28:27,470
62 you are up are issue 62 article 7

354
00:28:27,470 --> 00:28:31,210
on it allows us to jump approximately
512 bytes

355
00:28:31,210 --> 00:28:34,790
up the stack essentially does this by
popping on

356
00:28:34,790 --> 00:28:39,490
EC axe of the stack we can add to it
then we documented

357
00:28:39,490 --> 00:28:43,250
twice and then we can we just jump right
to it

358
00:28:43,250 --> 00:28:50,250
so it's compiled out

359
00:29:02,200 --> 00:29:09,200
ever right here copy that

360
00:29:11,580 --> 00:29:14,540
we now have that our application right
here

361
00:29:14,540 --> 00:29:19,300
at this point

362
00:29:19,300 --> 00:29:23,160
again something really important I know
if we want to keep this number extremely

363
00:29:23,160 --> 00:29:24,080
consistent

364
00:29:24,080 --> 00:29:29,490
throughout is if that moves everything
moves within our staff exception handler

365
00:29:29,490 --> 00:29:32,710
everything goes along with that we're
we're not gonna lie Nepali want

366
00:29:32,710 --> 00:29:35,870
sure wanna make sure we keep all their
numbers very consistent

367
00:29:35,870 --> 00:29:40,270
sorry I throw and I'm just throwing up a
buncha breaks and their

368
00:29:40,270 --> 00:29:44,350
much a processor CPU interrupts
overthrowing knopf

369
00:29:44,350 --> 00:29:50,230
we stronger longer drum back at this
point we're going to it and/or stage 1

370
00:29:50,230 --> 00:29:53,640
which is good or short jump back it then
going to execute this

371
00:29:53,640 --> 00:29:57,420
which will be arsed you are staged to
which will then jump back a little

372
00:29:57,420 --> 00:29:58,140
further

373
00:29:58,140 --> 00:30:05,140
in a go-ahead low that one up

374
00:30:05,420 --> 00:30:10,610
restart the application a

375
00:30:10,610 --> 00:30:17,610
opener debugger

376
00:30:18,950 --> 00:30:21,920
dat shit runat run rx

377
00:30:21,920 --> 00:30:26,830
are are skeleton coda past the exception

378
00:30:26,830 --> 00:30:31,780
we had our pop pop a rat in an hour over

379
00:30:31,780 --> 00:30:35,840
pop-up

380
00:30:35,840 --> 00:30:40,540
returner we had a short jumper we're
back to 128 by its

381
00:30:40,540 --> 00:30:47,540
we had an OPS lotta we now have Aaron
Adams coded

382
00:30:49,280 --> 00:30:56,280
which you can see in the registers

383
00:30:59,100 --> 00:31:05,330
documents twice we then get ready for
jump

384
00:31:05,330 --> 00:31:08,470
in now we have a

385
00:31:08,470 --> 00:31:12,660
equal we have about 512 bytes to work
with

386
00:31:12,660 --> 00:31:16,560
which is awesome

387
00:31:16,560 --> 00:31:20,670
we had stage one we had stage 2 now
every time a space

388
00:31:20,670 --> 00:31:23,780
so great

389
00:31:23,780 --> 00:31:29,290
we have space for exploit code we're you
know just generate one

390
00:31:29,290 --> 00:31:36,290
and hope not to run into anymore
problems

391
00:31:42,710 --> 00:31:49,710
it that running jump on over

392
00:31:53,320 --> 00:32:00,320
saw the type it out on its generators
for shell

393
00:32:05,900 --> 00:32:08,900
wanna make sure you grab one with me
which is going coda

394
00:32:08,900 --> 00:32:13,290
actually with no no bites pass them as a

395
00:32:13,290 --> 00:32:16,630
encoder their role in all by its

396
00:32:16,630 --> 00:32:23,630
drop at our are next on

397
00:32:23,660 --> 00:32:30,660
this will take a second to generate

398
00:32:31,940 --> 00:32:35,230
so at this point we're passing it we
have enough space to throw down a

399
00:32:35,230 --> 00:32:42,230
however pay loader

400
00:32:53,320 --> 00:33:00,320
we drop it in right here

401
00:33:01,010 --> 00:33:04,740
we make sure we have all the spacing
right I this is the quick length

402
00:33:04,740 --> 00:33:09,070
and out length measurement within Python
just so I don't have to keep calculating

403
00:33:09,070 --> 00:33:09,510
at

404
00:33:09,510 --> 00:33:13,960
because

405
00:33:13,960 --> 00:33:18,720
without fail every time into the payload
doesn't work something

406
00:33:18,720 --> 00:33:21,940
you know we might get weird encoding
format so

407
00:33:21,940 --> 00:33:26,290
that size might change so

408
00:33:26,290 --> 00:33:30,190
you burn up so the same wheel loader
shellcode a

409
00:33:30,190 --> 00:33:36,049
weaver long jump back save it

410
00:33:36,049 --> 00:33:41,400
were running weird come across one

411
00:33:41,400 --> 00:33:46,150
last hurdle past the exception

412
00:33:46,150 --> 00:33:49,590
pop operat first jump

413
00:33:49,590 --> 00:33:55,049
second jump we turn up slather

414
00:33:55,049 --> 00:34:02,049
Sep a listener on the side let ronna

415
00:34:03,330 --> 00:34:08,550
in the yen access violation what sucked
about this as I had to go through the

416
00:34:08,550 --> 00:34:11,950
payload one by that time the is easier
ways of doing it

417
00:34:11,950 --> 00:34:17,460
and I came across a formatting air
within the exploit which

418
00:34:17,460 --> 00:34:23,240
the application can handle this by

419
00:34:23,240 --> 00:34:26,520
right here two-out

420
00:34:26,520 --> 00:34:31,000
to up actually with in there RFC if I
would have paid attention

421
00:34:31,000 --> 00:34:34,330
is doesn't allow backslashes within

422
00:34:34,330 --> 00:34:37,960
with within the the protocol it does it
registers

423
00:34:37,960 --> 00:34:41,530
I could debugging commander then TFTP
year which isn't allowed

424
00:34:41,530 --> 00:34:46,080
so are we get around this weary
generator Sameer

425
00:34:46,080 --> 00:34:49,560
payload be passed to an encoder

426
00:34:49,560 --> 00:34:56,560
with two outs saying we don't want that

427
00:34:56,629 --> 00:35:02,240
reloaded and the

428
00:35:02,240 --> 00:35:09,240
so we no longer have a sub out a slash
in a for forward slash into

429
00:35:14,120 --> 00:35:19,790
launcher debugger one more time within
all exploitation there's always back and

430
00:35:19,790 --> 00:35:22,560
forth and I haven't come across one
which has been straight for you sure

431
00:35:22,560 --> 00:35:23,580
there's always some

432
00:35:23,580 --> 00:35:29,040
jumper encoding you have to get around
runner application

433
00:35:29,040 --> 00:35:36,040
checker exploit

434
00:35:37,970 --> 00:35:42,109
ever listener setup launcher the
breakpoint hits

435
00:35:42,109 --> 00:35:46,240
we passer shot sup churner with the pop
up right

436
00:35:46,240 --> 00:35:53,140
we were short jump back Aaron Adams long
drum

437
00:35:53,140 --> 00:35:57,049
we're now in our NOP slather we let
ronna

438
00:35:57,049 --> 00:36:04,049
make it nice and visual close by

439
00:36:08,950 --> 00:36:15,950
bring this over eventually

440
00:36:17,470 --> 00:36:19,810
we will run

441
00:36:19,810 --> 00:36:26,810
once the application this point

442
00:36:28,850 --> 00:36:33,380
want our final exploits in game shell

443
00:36:33,380 --> 00:36:36,610
we now have

444
00:36:36,610 --> 00:36:40,080
access to the application in the back
and a

445
00:36:40,080 --> 00:36:46,520
we had our buying cell be access the
files

446
00:36:46,520 --> 00:36:50,950
and access to the mission

447
00:36:50,950 --> 00:36:54,490
goal

448
00:36:54,490 --> 00:37:01,490
here

449
00:37:01,620 --> 00:37:05,570
thanks guys again I know sometimes like
tellows are very meh not messing going

450
00:37:05,570 --> 00:37:06,080
from

451
00:37:06,080 --> 00:37:09,280
I wonder sure the complete steps through
overcoming

452
00:37:09,280 --> 00:37:12,740
again obstacles like jumping not having
enough shellcode

453
00:37:12,740 --> 00:37:16,350
there's always away again if you can get
around that usually are

454
00:37:16,350 --> 00:37:20,020
always away just have to keep working
out a thanks guys thanks for coming to

455
00:37:20,020 --> 00:37:20,430
my talk

