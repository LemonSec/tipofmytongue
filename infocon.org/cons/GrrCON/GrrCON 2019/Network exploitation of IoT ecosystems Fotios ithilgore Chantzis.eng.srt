1
00:00:05,330 --> 00:00:14,570
well good afternoon everybody last one

2
00:00:11,370 --> 00:00:14,570
of the day and they're like dead now

3
00:00:14,839 --> 00:00:22,680
okay

4
00:00:15,990 --> 00:00:24,509
let's run it again good afternoon it's

5
00:00:22,680 --> 00:00:26,130
the last talk of the day you guys made

6
00:00:24,510 --> 00:00:29,130
it all the way through two days of

7
00:00:26,130 --> 00:00:31,799
gherkin and here you are in ballroom see

8
00:00:29,130 --> 00:00:33,750
the anything track I really hope that's

9
00:00:31,800 --> 00:00:36,570
why you came because that's what you're

10
00:00:33,750 --> 00:00:38,420
gonna see if that's not why you're here

11
00:00:36,570 --> 00:00:42,930
you got ten seconds before I lock you in

12
00:00:38,420 --> 00:00:47,039
a couple things last time I got to say

13
00:00:42,930 --> 00:00:50,940
this a don't congregate in the fire

14
00:00:47,039 --> 00:00:52,410
exits I have rather large and sometimes

15
00:00:50,940 --> 00:00:53,460
friendly but sometimes maybe not so

16
00:00:52,410 --> 00:00:54,419
friendly people over there who will

17
00:00:53,460 --> 00:00:56,280
remove you quickly

18
00:00:54,420 --> 00:00:59,699
so either you're entering out it's that

19
00:00:56,280 --> 00:01:03,539
simple cell phones we've made it all the

20
00:00:59,699 --> 00:01:07,130
way today nobody yet has had a phone go

21
00:01:03,539 --> 00:01:10,920
off in here don't be the one shut it off

22
00:01:07,130 --> 00:01:14,339
turn it off silence whatever and don't

23
00:01:10,920 --> 00:01:15,960
browse videos cuz they make noise even

24
00:01:14,340 --> 00:01:18,600
if it's on silent right you know how to

25
00:01:15,960 --> 00:01:20,399
use phones we're all in tech here right

26
00:01:18,600 --> 00:01:23,789
cool awesome

27
00:01:20,400 --> 00:01:27,290
so speaking of phones we are talking IOT

28
00:01:23,790 --> 00:01:30,210
we're talking I oh t ecosystems and how

29
00:01:27,290 --> 00:01:32,790
researchers are finding new exploits not

30
00:01:30,210 --> 00:01:36,570
just in is individual devices but in

31
00:01:32,790 --> 00:01:38,729
those entire ecosystems so with that one

32
00:01:36,570 --> 00:01:41,210
last time I'm turning it over to photos

33
00:01:38,729 --> 00:01:41,210
Shanta's

34
00:01:44,310 --> 00:01:56,979
alright this working okay so I'll be

35
00:01:53,830 --> 00:02:00,450
talking about network exploitation of

36
00:01:56,979 --> 00:02:05,229
IOT ecosystems focusing mainly on the

37
00:02:00,450 --> 00:02:14,080
protocol side so if you thinks about me

38
00:02:05,229 --> 00:02:17,620
first - I started dabbling in network

39
00:02:14,080 --> 00:02:20,470
security when I first started being

40
00:02:17,620 --> 00:02:22,930
involved in the enema projects I'm sure

41
00:02:20,470 --> 00:02:27,040
you've all used 10 mop or are using

42
00:02:22,930 --> 00:02:30,819
daily so I started being a developer

43
00:02:27,040 --> 00:02:33,760
there I developed the N crack Network

44
00:02:30,819 --> 00:02:35,768
authentication cracking - I hope you're

45
00:02:33,760 --> 00:02:39,060
all using that instead of Hydra because

46
00:02:35,769 --> 00:02:39,060
that's my competitor

47
00:02:39,930 --> 00:02:46,299
my main job involves doing security

48
00:02:43,840 --> 00:02:50,790
assessments penetration tests red team

49
00:02:46,299 --> 00:02:53,980
engagements against many medical devices

50
00:02:50,790 --> 00:02:56,890
but medical devices III see it as a

51
00:02:53,980 --> 00:02:59,410
subset of IOT systems and sometimes we

52
00:02:56,890 --> 00:03:01,720
also test you know facilities all sorts

53
00:02:59,410 --> 00:03:09,609
of things that include sensors cameras

54
00:03:01,720 --> 00:03:12,310
everything IOT other than that my focus

55
00:03:09,609 --> 00:03:14,590
as a researcher has been on network

56
00:03:12,310 --> 00:03:17,709
protocol exploitation so one of the

57
00:03:14,590 --> 00:03:20,350
highlights was exploiting TCP and

58
00:03:17,709 --> 00:03:22,959
specifically the persist timer which is

59
00:03:20,350 --> 00:03:25,000
an inherent functionality of TCP and the

60
00:03:22,959 --> 00:03:30,370
funny thing about that was that even

61
00:03:25,000 --> 00:03:34,480
even though it's a flaw in the TCP

62
00:03:30,370 --> 00:03:37,090
itself you cannot easily solve that by

63
00:03:34,480 --> 00:03:40,630
you know changing the TCP specification

64
00:03:37,090 --> 00:03:43,690
itself that would take you know dozens

65
00:03:40,630 --> 00:03:46,900
of I don't know years maybe to change

66
00:03:43,690 --> 00:03:51,700
something so fundamental as the TCP

67
00:03:46,900 --> 00:03:55,239
protocol implementation in all devices

68
00:03:51,700 --> 00:03:55,989
that use it so that's the that's one of

69
00:03:55,239 --> 00:03:58,810
the main

70
00:03:55,990 --> 00:04:00,580
advantages of you know researching

71
00:03:58,810 --> 00:04:02,410
Network protocols if you find that this

72
00:04:00,580 --> 00:04:03,940
design flow something that isn't

73
00:04:02,410 --> 00:04:06,070
necessarily in the implementation but

74
00:04:03,940 --> 00:04:08,579
something that is in how the you know

75
00:04:06,070 --> 00:04:11,260
the protocol itself is has been designed

76
00:04:08,580 --> 00:04:13,540
then it's really difficult to fix

77
00:04:11,260 --> 00:04:16,360
you have to usually improvise with

78
00:04:13,540 --> 00:04:19,599
workarounds and you need to find

79
00:04:16,360 --> 00:04:21,610
creative solutions other than that some

80
00:04:19,600 --> 00:04:24,400
of the other things have done is video

81
00:04:21,610 --> 00:04:27,070
course on mastering nmap right now I'm

82
00:04:24,400 --> 00:04:29,650
also pursuing a PhD on the side and I've

83
00:04:27,070 --> 00:04:34,270
also been literally writing a book on a

84
00:04:29,650 --> 00:04:40,469
protocol IOT hiking so that might be

85
00:04:34,270 --> 00:04:43,599
upcoming I don't know maybe next year so

86
00:04:40,470 --> 00:04:46,390
this is what we're gonna see today it's

87
00:04:43,600 --> 00:04:50,380
gonna be a lot of different protocols

88
00:04:46,390 --> 00:04:53,800
and abducts on them so we're gonna be

89
00:04:50,380 --> 00:04:55,630
talking about DICOM which is used in you

90
00:04:53,800 --> 00:04:59,320
know medical devices we're gonna be

91
00:04:55,630 --> 00:05:05,050
talking about ipv6 RTSP few things about

92
00:04:59,320 --> 00:05:08,530
laura 1ws discovery and on v4 IP cameras

93
00:05:05,050 --> 00:05:12,280
you P&P not so much but anyway you all

94
00:05:08,530 --> 00:05:17,890
know that IOT in IOT the S stands for

95
00:05:12,280 --> 00:05:19,719
security and there's no s in there so as

96
00:05:17,890 --> 00:05:21,729
I said before why research network

97
00:05:19,720 --> 00:05:24,370
protocols I don't know if you guys

98
00:05:21,730 --> 00:05:26,770
remember the DNS Kaminski bug you know

99
00:05:24,370 --> 00:05:30,490
really old bug and found in the DNS

100
00:05:26,770 --> 00:05:34,780
infrastructure it's it was a really neat

101
00:05:30,490 --> 00:05:37,180
you know security finding because again

102
00:05:34,780 --> 00:05:38,979
you had to have all the different

103
00:05:37,180 --> 00:05:42,340
companies you know cooperate with each

104
00:05:38,980 --> 00:05:44,950
other in to find a solution against that

105
00:05:42,340 --> 00:05:46,780
because it was inherent in the protocol

106
00:05:44,950 --> 00:05:49,300
itself it wasn't just an implementation

107
00:05:46,780 --> 00:05:54,359
bug on say you know a specific DNS

108
00:05:49,300 --> 00:05:57,550
server so when you when you are research

109
00:05:54,360 --> 00:05:59,680
network protocols they reveal

110
00:05:57,550 --> 00:06:01,720
fundamental issues about some of these

111
00:05:59,680 --> 00:06:04,030
security assumptions for example we'll

112
00:06:01,720 --> 00:06:06,730
see today I'm gonna be talking about

113
00:06:04,030 --> 00:06:09,739
mdns and DNS SB as well

114
00:06:06,730 --> 00:06:11,300
there is this assumption that all the

115
00:06:09,740 --> 00:06:14,120
participants in the network are

116
00:06:11,300 --> 00:06:16,580
cooperating so there is good faith in

117
00:06:14,120 --> 00:06:18,560
them that they're gonna be they're not

118
00:06:16,580 --> 00:06:22,370
gonna be doing anything malicious which

119
00:06:18,560 --> 00:06:24,260
of course is a flawed assumption and

120
00:06:22,370 --> 00:06:27,650
then the other thing is that like the

121
00:06:24,260 --> 00:06:31,310
DCP Percy's timer attacked that I had

122
00:06:27,650 --> 00:06:33,289
found when you find a successful when

123
00:06:31,310 --> 00:06:35,960
you successfully find an attack against

124
00:06:33,290 --> 00:06:37,850
the protocols they work everywhere they

125
00:06:35,960 --> 00:06:39,799
they are not you know tied into a

126
00:06:37,850 --> 00:06:42,590
specific you know flow in a specific

127
00:06:39,800 --> 00:06:44,690
software every software will use the

128
00:06:42,590 --> 00:06:48,409
same protocol so you can pretty much

129
00:06:44,690 --> 00:06:50,540
execute the attack everywhere design

130
00:06:48,410 --> 00:06:52,910
problems also can point to the weak

131
00:06:50,540 --> 00:06:55,760
spots in the implementation we're gonna

132
00:06:52,910 --> 00:06:59,660
see how by abusing the WS discovery

133
00:06:55,760 --> 00:07:03,710
protocol which is widely used in video

134
00:06:59,660 --> 00:07:08,720
management for for managing different IP

135
00:07:03,710 --> 00:07:13,719
cameras how this can reveal some flaws

136
00:07:08,720 --> 00:07:17,480
in the in the implementation itself so

137
00:07:13,720 --> 00:07:20,540
let's start with M DNS and the NSS the

138
00:07:17,480 --> 00:07:24,230
ambience is the multicast DNS so it's

139
00:07:20,540 --> 00:07:27,710
used in local networks it's it's very

140
00:07:24,230 --> 00:07:31,400
similar to DNS and you're gonna see it's

141
00:07:27,710 --> 00:07:34,849
using as a source and destination UDP

142
00:07:31,400 --> 00:07:39,590
port five three five three as you know

143
00:07:34,850 --> 00:07:42,410
DNS uses five three and then it uses the

144
00:07:39,590 --> 00:07:45,380
dot local domain it can also potentially

145
00:07:42,410 --> 00:07:47,930
be used to resolve global names too but

146
00:07:45,380 --> 00:07:50,110
this is not advised for obvious reasons

147
00:07:47,930 --> 00:07:52,580
because again this would be too risky

148
00:07:50,110 --> 00:07:54,290
there is a there are two phases that

149
00:07:52,580 --> 00:07:57,500
we're gonna see in a minute the probing

150
00:07:54,290 --> 00:08:01,850
and announcing and the multicast DNS

151
00:07:57,500 --> 00:08:04,490
ghost-hunting can't hunt with the DNS

152
00:08:01,850 --> 00:08:08,180
service discovery protocol which again

153
00:08:04,490 --> 00:08:11,450
is basically a way for devices on the

154
00:08:08,180 --> 00:08:14,240
network to ask other devices other nodes

155
00:08:11,450 --> 00:08:16,190
about what services they offer for

156
00:08:14,240 --> 00:08:18,380
example there might be you know a

157
00:08:16,190 --> 00:08:20,310
workstation and saying and asking on the

158
00:08:18,380 --> 00:08:22,590
network is there any printing

159
00:08:20,310 --> 00:08:27,300
service on the network does anyone have

160
00:08:22,590 --> 00:08:28,500
a printer here and this automates it's

161
00:08:27,300 --> 00:08:31,560
considered a zero configuration

162
00:08:28,500 --> 00:08:35,340
networking as we say which means that

163
00:08:31,560 --> 00:08:37,530
it's used for automation and for you

164
00:08:35,340 --> 00:08:38,760
know helping the end user not having to

165
00:08:37,530 --> 00:08:40,530
deal with a lot of you know

166
00:08:38,760 --> 00:08:43,530
configuration and setting up and all

167
00:08:40,530 --> 00:08:48,150
that stuff but again automation usually

168
00:08:43,530 --> 00:08:51,630
leads to insecurity in there the records

169
00:08:48,150 --> 00:08:54,090
that the necessity uses are again very

170
00:08:51,630 --> 00:08:56,370
similar in structure as the DNS records

171
00:08:54,090 --> 00:08:59,730
that you all have seen so there is the

172
00:08:56,370 --> 00:09:02,760
pointer record that points to specific

173
00:08:59,730 --> 00:09:05,820
instance we're gonna see an example

174
00:09:02,760 --> 00:09:09,210
later the service record which includes

175
00:09:05,820 --> 00:09:12,390
the target host and the port and the

176
00:09:09,210 --> 00:09:16,710
host name you can see at the end this is

177
00:09:12,390 --> 00:09:21,120
from a war shark dump for example this

178
00:09:16,710 --> 00:09:24,060
reveals that there is a test instance of

179
00:09:21,120 --> 00:09:27,720
an IP psi PPS is the internet printing

180
00:09:24,060 --> 00:09:30,359
protocol running over TLS so there is

181
00:09:27,720 --> 00:09:33,000
this instance running to IPPs on the

182
00:09:30,360 --> 00:09:37,680
network on this host going to dot local

183
00:09:33,000 --> 00:09:41,520
on port 8000 and this record will be

184
00:09:37,680 --> 00:09:44,339
accompanied as we're gonna see in a few

185
00:09:41,520 --> 00:09:45,510
seconds by an a record which includes

186
00:09:44,340 --> 00:09:49,170
that you know the host name resolution

187
00:09:45,510 --> 00:09:52,620
like DNS does so this host name resolves

188
00:09:49,170 --> 00:09:55,729
to IP address X and there is also the

189
00:09:52,620 --> 00:09:57,930
txt record that includes some additional

190
00:09:55,730 --> 00:10:01,140
information such as the specific URL

191
00:09:57,930 --> 00:10:06,030
that the printing service is listening

192
00:10:01,140 --> 00:10:09,270
on so let's see the different the two

193
00:10:06,030 --> 00:10:13,170
faces there is first the probing face so

194
00:10:09,270 --> 00:10:16,260
this one says you know that we have an

195
00:10:13,170 --> 00:10:19,229
end an end device workstation that is

196
00:10:16,260 --> 00:10:21,930
asking on the note local network it does

197
00:10:19,230 --> 00:10:25,320
anyone else on the network have test

198
00:10:21,930 --> 00:10:28,349
IPPs disappear local so actually this is

199
00:10:25,320 --> 00:10:32,820
this is a printer asking that wants to

200
00:10:28,350 --> 00:10:34,230
register itself on the network about for

201
00:10:32,820 --> 00:10:36,600
this specific

202
00:10:34,230 --> 00:10:39,390
instance name so the printer will send

203
00:10:36,600 --> 00:10:42,600
that to make sure that there is no other

204
00:10:39,390 --> 00:10:46,770
printer on the network having the exact

205
00:10:42,600 --> 00:10:49,230
same instance name and host name so if

206
00:10:46,770 --> 00:10:50,910
no one hurts if no one replies after a

207
00:10:49,230 --> 00:10:53,930
couple of seconds then the printer will

208
00:10:50,910 --> 00:10:57,839
move on to the announcement phase and

209
00:10:53,930 --> 00:11:00,150
the announcement phase will send a multi

210
00:10:57,840 --> 00:11:02,520
custom DNS response on the local network

211
00:11:00,150 --> 00:11:04,650
that contains all the newly registered

212
00:11:02,520 --> 00:11:07,980
records and as you can see they're

213
00:11:04,650 --> 00:11:12,990
highlighted in the red box this includes

214
00:11:07,980 --> 00:11:16,170
the Pointer service and txt records and

215
00:11:12,990 --> 00:11:20,160
VA and you know the the for a is for

216
00:11:16,170 --> 00:11:23,729
ipv6 for name resolution and having all

217
00:11:20,160 --> 00:11:26,130
this any participant on the network any

218
00:11:23,730 --> 00:11:30,090
other node on the network will be able

219
00:11:26,130 --> 00:11:34,500
to then connect in the future to that

220
00:11:30,090 --> 00:11:37,290
printer to to send a print job so what's

221
00:11:34,500 --> 00:11:40,020
the scenarios here let's say a Macbook

222
00:11:37,290 --> 00:11:41,790
user wants to print a document and the

223
00:11:40,020 --> 00:11:44,340
system has an already pre-configured

224
00:11:41,790 --> 00:11:49,920
network printer let's say with a name

225
00:11:44,340 --> 00:11:52,830
test so the fundamental flaw in this

226
00:11:49,920 --> 00:11:55,650
protocol is that it is irrelevant if

227
00:11:52,830 --> 00:12:00,210
this service had been discovered in the

228
00:11:55,650 --> 00:12:02,490
past which means that if you know if

229
00:12:00,210 --> 00:12:05,940
that mark book a user had already used

230
00:12:02,490 --> 00:12:10,320
this printer on this specific instance

231
00:12:05,940 --> 00:12:12,480
name it doesn't matter if it's already

232
00:12:10,320 --> 00:12:15,150
configured in its settings that you know

233
00:12:12,480 --> 00:12:16,980
this I want to always be using this

234
00:12:15,150 --> 00:12:20,579
specific printer it doesn't matter with

235
00:12:16,980 --> 00:12:23,010
some DNS and this has been done so that

236
00:12:20,580 --> 00:12:25,770
it's flexible because say the printer in

237
00:12:23,010 --> 00:12:28,560
the in the future changes its IP address

238
00:12:25,770 --> 00:12:30,900
or changes its hostname we want to still

239
00:12:28,560 --> 00:12:35,219
be able to have this you know automated

240
00:12:30,900 --> 00:12:39,540
discovery of the of the printer service

241
00:12:35,220 --> 00:12:42,000
so the Mac OS client will always be

242
00:12:39,540 --> 00:12:44,160
sending every time it wants to use the

243
00:12:42,000 --> 00:12:47,600
printing service will be sending a new

244
00:12:44,160 --> 00:12:50,420
query asking where this test service is

245
00:12:47,600 --> 00:12:54,880
and of course this leaves the potential

246
00:12:50,420 --> 00:12:57,439
of it being abused to do mdns poisoning

247
00:12:54,880 --> 00:13:00,710
so you can see that you know it will be

248
00:12:57,440 --> 00:13:03,770
asking this is how the N DNS query will

249
00:13:00,710 --> 00:13:08,180
look like asking about that test IPPs

250
00:13:03,770 --> 00:13:11,060
local service that you know the

251
00:13:08,180 --> 00:13:14,150
legitimate printer will reply in the

252
00:13:11,060 --> 00:13:15,770
same way that it's with the same types

253
00:13:14,150 --> 00:13:18,380
of packets as it had done in the

254
00:13:15,770 --> 00:13:20,240
announcement phase so it will send this

255
00:13:18,380 --> 00:13:24,110
triplet the Pointer service and the xt

256
00:13:20,240 --> 00:13:29,390
record and the a records for a hostname

257
00:13:24,110 --> 00:13:31,490
resolution and the txt records in the

258
00:13:29,390 --> 00:13:34,760
printers response which will contain you

259
00:13:31,490 --> 00:13:39,230
know the exact URL as you can see there

260
00:13:34,760 --> 00:13:42,710
it's over HTTPS because it's IPPs and

261
00:13:39,230 --> 00:13:44,390
then so the maquas client with this

262
00:13:42,710 --> 00:13:46,670
response from the printer now knows

263
00:13:44,390 --> 00:13:48,319
everything it needs to connect to the

264
00:13:46,670 --> 00:13:51,770
printer and send the document it knows

265
00:13:48,320 --> 00:13:55,130
the instance name test by the PDR the

266
00:13:51,770 --> 00:13:57,470
pointer record it knows the exact host

267
00:13:55,130 --> 00:14:01,189
name and the tcp port from the service

268
00:13:57,470 --> 00:14:04,190
record and it knows how this host name

269
00:14:01,190 --> 00:14:07,220
of going to dot local resolves to the to

270
00:14:04,190 --> 00:14:10,100
this particular IP address that's in on

271
00:14:07,220 --> 00:14:14,570
the a record and then the exact URL as

272
00:14:10,100 --> 00:14:18,020
we said on the txt record so how does

273
00:14:14,570 --> 00:14:20,540
the mdns poison look like the attacker

274
00:14:18,020 --> 00:14:22,880
listens for multicast i'm DNS traffic on

275
00:14:20,540 --> 00:14:27,410
the UDP port five three five three this

276
00:14:22,880 --> 00:14:30,200
is number one he they need to be on the

277
00:14:27,410 --> 00:14:32,780
on the local network so and then the

278
00:14:30,200 --> 00:14:35,000
client the mock book needs to discover

279
00:14:32,780 --> 00:14:37,370
the test network printer and we'll send

280
00:14:35,000 --> 00:14:39,410
the mdns query as we said it needs to do

281
00:14:37,370 --> 00:14:43,370
that every time so it will always need

282
00:14:39,410 --> 00:14:45,949
to send a new M DNS query then the

283
00:14:43,370 --> 00:14:47,870
attacker can will be continuously

284
00:14:45,950 --> 00:14:52,190
sending mark replies to poison their

285
00:14:47,870 --> 00:14:55,340
clients cars so there are number four I

286
00:14:52,190 --> 00:14:58,640
have an if the race is one so it's like

287
00:14:55,340 --> 00:15:01,070
you have to win the race condition there

288
00:14:58,640 --> 00:15:04,640
before the actual printer

289
00:15:01,070 --> 00:15:08,030
replies with a legitimate response but

290
00:15:04,640 --> 00:15:10,760
this is this isn't so hard to attain

291
00:15:08,030 --> 00:15:12,829
because you can actually be you can

292
00:15:10,760 --> 00:15:16,610
actually begin poisoning the gas

293
00:15:12,830 --> 00:15:20,330
even before the printer starts sending

294
00:15:16,610 --> 00:15:23,720
the the legitimate response so you can

295
00:15:20,330 --> 00:15:26,990
just it will be noisy on the network but

296
00:15:23,720 --> 00:15:30,350
you can just do that continuously sent

297
00:15:26,990 --> 00:15:33,560
even before the M DNS query is sent by

298
00:15:30,350 --> 00:15:36,500
the client the MacBook and then when

299
00:15:33,560 --> 00:15:42,739
that happens the attacker will say okay

300
00:15:36,500 --> 00:15:45,770
this this instance of test dot IPPs bla

301
00:15:42,740 --> 00:15:48,710
bla is on this IP address which will be

302
00:15:45,770 --> 00:15:51,110
his and then the client will send the

303
00:15:48,710 --> 00:15:52,910
document to the attacker instead of the

304
00:15:51,110 --> 00:15:55,940
legitimate printer the attacker will

305
00:15:52,910 --> 00:15:58,790
then forwards it to the printer and then

306
00:15:55,940 --> 00:16:12,380
the attack successful so I have a demo

307
00:15:58,790 --> 00:16:13,849
here for a lot I will not be super

308
00:16:12,380 --> 00:16:19,790
visible but I'll explain what's

309
00:16:13,850 --> 00:16:23,450
happening so on the right we have an IP

310
00:16:19,790 --> 00:16:26,020
P server which runs on Ubuntu this

311
00:16:23,450 --> 00:16:29,060
basically replicates the printer

312
00:16:26,020 --> 00:16:31,699
emulates the the printer and I did that

313
00:16:29,060 --> 00:16:37,689
so that we have you know you can see the

314
00:16:31,700 --> 00:16:41,080
output so the attacker is on on Kali the

315
00:16:37,690 --> 00:16:45,950
initially will see a legitimate response

316
00:16:41,080 --> 00:16:48,440
from the legitimate connection from the

317
00:16:45,950 --> 00:16:52,790
MacBook so this is when on the right

318
00:16:48,440 --> 00:16:56,120
when we the MacBook connects to the IPP

319
00:16:52,790 --> 00:16:59,420
server running on the Ubuntu and you

320
00:16:56,120 --> 00:17:01,400
know it gets everything done so it

321
00:16:59,420 --> 00:17:06,109
successfully censored document then

322
00:17:01,400 --> 00:17:10,869
we're gonna start our poisoner as you

323
00:17:06,109 --> 00:17:15,050
can see here on the icon

324
00:17:10,869 --> 00:17:18,709
on the on the left bottom part of the

325
00:17:15,050 --> 00:17:20,810
screen we have our own IPP server as an

326
00:17:18,710 --> 00:17:23,840
attacker just to showcase how this would

327
00:17:20,810 --> 00:17:25,879
look like on the attackers end and on

328
00:17:23,839 --> 00:17:28,040
the temp directory we don't have any any

329
00:17:25,880 --> 00:17:31,040
file so we don't have any document

330
00:17:28,040 --> 00:17:42,500
stolen yet we're gonna start our

331
00:17:31,040 --> 00:17:44,860
poisoner and we're gonna wait after for

332
00:17:42,500 --> 00:17:48,920
a few seconds so that the macbook

333
00:17:44,860 --> 00:17:51,110
resends v you know it has a new document

334
00:17:48,920 --> 00:17:56,330
that is gonna print you can see there

335
00:17:51,110 --> 00:17:58,010
that we send back replies that the

336
00:17:56,330 --> 00:18:00,679
service is running on our end and now

337
00:17:58,010 --> 00:18:04,520
the the client the macbook will connect

338
00:18:00,680 --> 00:18:07,040
to us instead and we'll send the

339
00:18:04,520 --> 00:18:09,320
document the print job actually to our

340
00:18:07,040 --> 00:18:13,120
end and that's the document that we got

341
00:18:09,320 --> 00:18:16,550
there and that's a very easy way to

342
00:18:13,120 --> 00:18:19,659
poison the mdns case and still documents

343
00:18:16,550 --> 00:18:19,659
on the local network

344
00:18:38,200 --> 00:18:53,420
Christie okay all right and then so

345
00:18:50,630 --> 00:18:56,240
we're done with mdns for now

346
00:18:53,420 --> 00:18:57,920
Laura that was another protocol I'm not

347
00:18:56,240 --> 00:19:00,500
gonna go in depth for this one because

348
00:18:57,920 --> 00:19:03,710
it would take a known presentation a

349
00:19:00,500 --> 00:19:06,910
whole presentation for this but Laura is

350
00:19:03,710 --> 00:19:10,870
interesting because it hasn't been

351
00:19:06,910 --> 00:19:13,790
researched so much there are a couple of

352
00:19:10,870 --> 00:19:17,810
presentations I think one on besides

353
00:19:13,790 --> 00:19:20,740
London by and WR and a couple of fat

354
00:19:17,810 --> 00:19:23,629
there you know dissertation thesis on

355
00:19:20,740 --> 00:19:26,600
exploiting Laura and Laura one so Laura

356
00:19:23,630 --> 00:19:30,530
is the long-range protocol it's used in

357
00:19:26,600 --> 00:19:33,740
Nyota ecosystems for sensors it's a low

358
00:19:30,530 --> 00:19:37,310
powered long range protocol so it's used

359
00:19:33,740 --> 00:19:41,090
for sensors so devices that you want to

360
00:19:37,310 --> 00:19:43,190
have a battery of even up to many years

361
00:19:41,090 --> 00:19:45,590
like five to ten years it's supposed to

362
00:19:43,190 --> 00:19:47,600
to last so it's supposed to have a low

363
00:19:45,590 --> 00:19:49,459
data rate so when you send for example

364
00:19:47,600 --> 00:19:53,120
when you have a temperature sensor or

365
00:19:49,460 --> 00:19:56,210
like a humidity sensor on a farm and it

366
00:19:53,120 --> 00:19:59,000
wants to continuously send like not

367
00:19:56,210 --> 00:20:01,460
continuously on once in a while a few

368
00:19:59,000 --> 00:20:04,250
data about you know the temperature or

369
00:20:01,460 --> 00:20:06,080
the humidity laura is a really good

370
00:20:04,250 --> 00:20:08,630
protocol because it has this long range

371
00:20:06,080 --> 00:20:12,830
capability we're talking about over a

372
00:20:08,630 --> 00:20:17,150
mile usually so it would be very costly

373
00:20:12,830 --> 00:20:19,189
to use like for Z or Wi-Fi or whatever

374
00:20:17,150 --> 00:20:21,590
else for for long range because you know

375
00:20:19,190 --> 00:20:24,590
the battery wouldn't last that long

376
00:20:21,590 --> 00:20:26,929
and also of course it's much much longer

377
00:20:24,590 --> 00:20:30,470
range than short range radio like

378
00:20:26,930 --> 00:20:35,540
Bluetooth and ZigBee or whatnot

379
00:20:30,470 --> 00:20:38,480
so in the u.s. it uses this frequency it

380
00:20:35,540 --> 00:20:41,180
has the architecture is based on you

381
00:20:38,480 --> 00:20:43,160
have some some gateway which that one

382
00:20:41,180 --> 00:20:44,649
you don't care about being low powered

383
00:20:43,160 --> 00:20:47,389
so it's connected

384
00:20:44,649 --> 00:20:49,369
you know power outlet and it forwards

385
00:20:47,389 --> 00:20:53,299
the different pockets that it gets from

386
00:20:49,369 --> 00:20:55,789
the sensors to some to a network server

387
00:20:53,299 --> 00:20:58,580
but then forwards it to an application

388
00:20:55,789 --> 00:21:03,289
server so I was researching this as part

389
00:20:58,580 --> 00:21:06,350
of writing the book and a few of the

390
00:21:03,289 --> 00:21:11,450
equipment that I used was you know I I

391
00:21:06,350 --> 00:21:15,820
just bought from Aliexpress and eBay and

392
00:21:11,450 --> 00:21:18,769
whatnot some some really cool USB

393
00:21:15,820 --> 00:21:21,799
devices that can be used to talk Laura

394
00:21:18,769 --> 00:21:24,019
and one of the things that I discovered

395
00:21:21,799 --> 00:21:25,610
while researching that other than the

396
00:21:24,019 --> 00:21:30,289
common attacks that have already been

397
00:21:25,610 --> 00:21:32,449
documented is that it's very simple to

398
00:21:30,289 --> 00:21:34,759
capture traffic because this is supposed

399
00:21:32,450 --> 00:21:37,990
to be a broadcast protocol so if you

400
00:21:34,759 --> 00:21:41,169
want to make a sniffer 'that doesn't

401
00:21:37,990 --> 00:21:44,419
necessarily have to decrypt anything

402
00:21:41,169 --> 00:21:46,850
because normally Laura will have to use

403
00:21:44,419 --> 00:21:48,740
when it's you know used in normal

404
00:21:46,850 --> 00:21:52,998
environments it will eventually have to

405
00:21:48,740 --> 00:21:56,419
use AES encrypted payloads but one of

406
00:21:52,999 --> 00:21:58,039
the highlights it would say that you

407
00:21:56,419 --> 00:22:00,100
know came after some experimentation it

408
00:21:58,039 --> 00:22:03,110
was the spreading factor which is

409
00:22:00,100 --> 00:22:07,879
basically an attribute on the Laura

410
00:22:03,110 --> 00:22:09,408
protocol that determines how long the

411
00:22:07,879 --> 00:22:11,959
packet will stay on the air and there's

412
00:22:09,409 --> 00:22:16,039
different radio configurations for that

413
00:22:11,960 --> 00:22:18,619
because you might have different nodes

414
00:22:16,039 --> 00:22:21,169
different devices sending Laura packets

415
00:22:18,619 --> 00:22:23,330
in different distances and you want to

416
00:22:21,169 --> 00:22:28,240
use the right spreading factor for that

417
00:22:23,330 --> 00:22:32,240
so if you want to to make a successful

418
00:22:28,240 --> 00:22:34,220
sniffer no matter if it's if you will

419
00:22:32,240 --> 00:22:36,799
have to find you know hard code it is

420
00:22:34,220 --> 00:22:39,980
later to decrypt the traffic you have to

421
00:22:36,799 --> 00:22:42,499
spare too you have to basically be

422
00:22:39,980 --> 00:22:44,509
cognizant of the fact that the different

423
00:22:42,499 --> 00:22:46,759
packets might be using a different

424
00:22:44,509 --> 00:22:48,679
spreading factor so you might miss a lot

425
00:22:46,759 --> 00:22:52,309
of packets if you don't continuously

426
00:22:48,679 --> 00:22:55,100
switch between say the two most

427
00:22:52,309 --> 00:22:58,070
prevalent ones which is 7 and 11 as far

428
00:22:55,100 --> 00:23:01,820
as I saw but ideally you might want to

429
00:22:58,070 --> 00:23:03,770
sweets between 8 9 and 10 so for Laura

430
00:23:01,820 --> 00:23:06,350
I'm not gonna be taking any anymore

431
00:23:03,770 --> 00:23:08,810
I just wanted to mention that it's a

432
00:23:06,350 --> 00:23:12,139
really cool protocol if you want to do

433
00:23:08,810 --> 00:23:14,510
some research I've I've demonstrated

434
00:23:12,140 --> 00:23:19,790
some other attacks oh there's one that's

435
00:23:14,510 --> 00:23:22,640
called a bit flippin attack where it's

436
00:23:19,790 --> 00:23:24,800
it depends on how the network and

437
00:23:22,640 --> 00:23:27,850
application server handle the encrypted

438
00:23:24,800 --> 00:23:32,419
payload but one of the other things that

439
00:23:27,850 --> 00:23:33,949
is another thing to highlight in this is

440
00:23:32,420 --> 00:23:38,630
that there are different two different

441
00:23:33,950 --> 00:23:41,180
modes of Java of a node joining the

442
00:23:38,630 --> 00:23:43,550
network so there is one called

443
00:23:41,180 --> 00:23:46,040
activation by personalization a BP and

444
00:23:43,550 --> 00:23:50,690
the over-the-air activation or DAA and

445
00:23:46,040 --> 00:23:53,570
the ATP's use normally when you do a

446
00:23:50,690 --> 00:23:55,370
prototyping but the thing is that it is

447
00:23:53,570 --> 00:23:58,070
very insecure because you have to hard

448
00:23:55,370 --> 00:24:01,100
code the encryption keys on the end

449
00:23:58,070 --> 00:24:03,980
device and of course when you have you

450
00:24:01,100 --> 00:24:06,110
know the sensors lying on on some

451
00:24:03,980 --> 00:24:08,510
physically insecure facility you can

452
00:24:06,110 --> 00:24:10,610
just extract the encryption keys and

453
00:24:08,510 --> 00:24:13,040
then reuse them and then even if you

454
00:24:10,610 --> 00:24:15,610
have an encrypted payload you can't just

455
00:24:13,040 --> 00:24:15,610
decrypt it

456
00:24:15,790 --> 00:24:23,000
then if you thinks about ipv6 while you

457
00:24:20,690 --> 00:24:27,520
research think network protocols a cool

458
00:24:23,000 --> 00:24:31,280
thing to keep in mind is that the RFC's

459
00:24:27,520 --> 00:24:34,160
are using you know specific keywords the

460
00:24:31,280 --> 00:24:37,190
request for comments the the theoretical

461
00:24:34,160 --> 00:24:39,830
specifications of the protocols use you

462
00:24:37,190 --> 00:24:41,120
know keywords like masked or sued and

463
00:24:39,830 --> 00:24:44,000
there is a fundamental difference

464
00:24:41,120 --> 00:24:46,370
between these two so masked is like the

465
00:24:44,000 --> 00:24:50,210
vendor implementing the protocol so if

466
00:24:46,370 --> 00:24:52,459
Cisco like implements tcp/ip or ipv6 or

467
00:24:50,210 --> 00:24:56,150
whatever and there are routers must

468
00:24:52,460 --> 00:24:59,990
means that the hundred percent have to

469
00:24:56,150 --> 00:25:02,360
make it the way that the the RFC says

470
00:24:59,990 --> 00:25:04,130
otherwise you know there will be there

471
00:25:02,360 --> 00:25:05,209
would be chaos like the different

472
00:25:04,130 --> 00:25:07,280
devices wouldn't be able to communicate

473
00:25:05,210 --> 00:25:08,750
with themselves because everyone will

474
00:25:07,280 --> 00:25:11,870
would be implementing whatever they

475
00:25:08,750 --> 00:25:14,630
wanted but the shoot keyword is

476
00:25:11,870 --> 00:25:19,360
you know the fun lies because the shoot

477
00:25:14,630 --> 00:25:21,800
doesn't you know mandate the

478
00:25:19,360 --> 00:25:25,010
implementing it that way so it's open

479
00:25:21,800 --> 00:25:27,290
for interpretation and that was also how

480
00:25:25,010 --> 00:25:29,379
I found you know flaws like that this be

481
00:25:27,290 --> 00:25:34,850
persist timer attacks and other

482
00:25:29,380 --> 00:25:38,420
interesting protocol vulnerabilities and

483
00:25:34,850 --> 00:25:42,679
one of the things that they did and the

484
00:25:38,420 --> 00:25:46,280
committee for the ipv6 changed must to

485
00:25:42,680 --> 00:25:49,130
shoot for using IPSec in ipv6 so that

486
00:25:46,280 --> 00:25:51,770
means that now you know they thought

487
00:25:49,130 --> 00:25:54,140
that because IPSec really wasn't so

488
00:25:51,770 --> 00:25:56,389
widely deployed or it was too hard to

489
00:25:54,140 --> 00:25:59,480
configure we're gonna make it optional

490
00:25:56,390 --> 00:26:03,050
and this of course leaves a lot of room

491
00:25:59,480 --> 00:26:05,800
for interesting things so with ipv6 one

492
00:26:03,050 --> 00:26:07,610
of the other interesting facts is that

493
00:26:05,800 --> 00:26:12,379
specifically for medical device that

494
00:26:07,610 --> 00:26:14,449
we've tested it's often overlooked by

495
00:26:12,380 --> 00:26:16,520
the firewall configuration so we've seen

496
00:26:14,450 --> 00:26:21,470
for example some really really critical

497
00:26:16,520 --> 00:26:24,050
medical devices being completely

498
00:26:21,470 --> 00:26:27,320
exposing olden or network services on

499
00:26:24,050 --> 00:26:30,260
ipv6 and Bing and having a firewall and

500
00:26:27,320 --> 00:26:32,929
ipv4 and that's because you know they

501
00:26:30,260 --> 00:26:35,860
just thought ipv6 doesn't matter or they

502
00:26:32,930 --> 00:26:38,720
didn't know it existed or whatever but

503
00:26:35,860 --> 00:26:43,520
so it's always cool to use for example n

504
00:26:38,720 --> 00:26:46,960
mod -6 and you know test the IP address

505
00:26:43,520 --> 00:26:49,100
the ipv6 address of any IOT system

506
00:26:46,960 --> 00:26:53,210
because you'll be surprised what you

507
00:26:49,100 --> 00:26:56,810
find and then all the the same stuff

508
00:26:53,210 --> 00:26:59,170
that the same spoofing and cache

509
00:26:56,810 --> 00:27:03,649
poisoning attacks that work in IP before

510
00:26:59,170 --> 00:27:06,710
like the ICMP before a direct attack

511
00:27:03,650 --> 00:27:08,960
which is a way of normally this was used

512
00:27:06,710 --> 00:27:11,990
the ICMP before attack as you probably

513
00:27:08,960 --> 00:27:15,620
already know is that it was quality of

514
00:27:11,990 --> 00:27:18,020
service so when there was a router might

515
00:27:15,620 --> 00:27:19,939
say to a workstation you know what you

516
00:27:18,020 --> 00:27:22,730
should now go through that route there

517
00:27:19,940 --> 00:27:23,690
instead of me because you know I have a

518
00:27:22,730 --> 00:27:26,720
lot of work

519
00:27:23,690 --> 00:27:29,559
in my in my part so it will send

520
00:27:26,720 --> 00:27:33,139
especially in crafted ICMP packet and

521
00:27:29,559 --> 00:27:35,240
the workstation will then have to follow

522
00:27:33,139 --> 00:27:38,178
another route and of course an attacker

523
00:27:35,240 --> 00:27:40,309
can do the same so that they reroute all

524
00:27:38,179 --> 00:27:43,309
the traffic to them in the same exact

525
00:27:40,309 --> 00:27:48,200
thing works for ipv6 this is this is a

526
00:27:43,309 --> 00:27:50,570
known fact also there is a another cache

527
00:27:48,200 --> 00:27:55,610
poisoning attack on the local link the

528
00:27:50,570 --> 00:27:57,799
NDP and another interesting thing their

529
00:27:55,610 --> 00:28:02,299
husband done some research on this link

530
00:27:57,799 --> 00:28:06,168
there by this guy ipv6 extension headers

531
00:28:02,299 --> 00:28:08,570
are a big complex mess because it's by

532
00:28:06,169 --> 00:28:12,220
design it's it's complicated so this

533
00:28:08,570 --> 00:28:15,769
allow a lot of you know features future

534
00:28:12,220 --> 00:28:18,559
you know extra stuff to be added to ipv6

535
00:28:15,769 --> 00:28:22,330
but the way it's designed can lead to a

536
00:28:18,559 --> 00:28:25,460
lot of attacks neighbor cache posing

537
00:28:22,330 --> 00:28:31,759
basically looks a lot like ARP cache

538
00:28:25,460 --> 00:28:33,500
poisoning and then Smart Homes so let's

539
00:28:31,759 --> 00:28:37,460
talk a little bit about that and then go

540
00:28:33,500 --> 00:28:41,470
to IP cameras IOT sensor so attacks that

541
00:28:37,460 --> 00:28:43,580
we have seen while testing IOT stuff

542
00:28:41,470 --> 00:28:45,740
it's cool to see anaesthetic

543
00:28:43,580 --> 00:28:47,899
unauthenticated debug network services

544
00:28:45,740 --> 00:28:52,700
so if there are some you know

545
00:28:47,899 --> 00:28:55,399
proprietary debugging services lying

546
00:28:52,700 --> 00:28:58,970
around that you know you can connect and

547
00:28:55,399 --> 00:29:02,508
then gain privileged access replay

548
00:28:58,970 --> 00:29:05,629
attacks so another interesting thing is

549
00:29:02,509 --> 00:29:08,600
that a lot of medical device vendors

550
00:29:05,629 --> 00:29:10,330
especially at least in the past mostly

551
00:29:08,600 --> 00:29:13,370
now I think they have started to learn

552
00:29:10,330 --> 00:29:15,320
they they are trying to reinvent the

553
00:29:13,370 --> 00:29:17,779
wheel or they think they have you know

554
00:29:15,320 --> 00:29:19,730
smarter people than the best

555
00:29:17,779 --> 00:29:21,169
cryptographers in the world and they

556
00:29:19,730 --> 00:29:23,269
think they are gonna invent their own

557
00:29:21,169 --> 00:29:25,100
encryption scheme and of course it's

558
00:29:23,269 --> 00:29:29,570
never encryption so with we've seen

559
00:29:25,100 --> 00:29:31,490
things like you know actually steam that

560
00:29:29,570 --> 00:29:33,200
was encoding not even encryption or

561
00:29:31,490 --> 00:29:35,750
we've seen things that you know they

562
00:29:33,200 --> 00:29:37,610
have extra operation with a fixed byte

563
00:29:35,750 --> 00:29:39,530
value without even having

564
00:29:37,610 --> 00:29:41,090
secret key or when they have a secret

565
00:29:39,530 --> 00:29:44,649
its are hard-coded

566
00:29:41,090 --> 00:29:47,928
so another problem they're all together

567
00:29:44,650 --> 00:29:50,600
or having mobile apps that you know ask

568
00:29:47,929 --> 00:29:53,750
for permissions that shouldn't like have

569
00:29:50,600 --> 00:29:56,659
you ever you know installed an IP camera

570
00:29:53,750 --> 00:29:59,090
in your home network where the mobile

571
00:29:56,660 --> 00:30:01,370
app of controlling it asks for I don't

572
00:29:59,090 --> 00:30:06,860
know to access your contacts or whatever

573
00:30:01,370 --> 00:30:09,799
that doesn't make any sense one of an

574
00:30:06,860 --> 00:30:12,199
example of a learner ability for for an

575
00:30:09,799 --> 00:30:14,629
IP camera which was supposed to be

576
00:30:12,200 --> 00:30:16,880
security I become her was that we

577
00:30:14,630 --> 00:30:19,520
extracted the firmware we looked into

578
00:30:16,880 --> 00:30:21,380
some of the HTTP server configuration

579
00:30:19,520 --> 00:30:22,760
files and then found this interesting

580
00:30:21,380 --> 00:30:27,290
keywords called

581
00:30:22,760 --> 00:30:31,040
skip oath which of course what what

582
00:30:27,290 --> 00:30:33,830
would that mean so we access those URLs

583
00:30:31,040 --> 00:30:35,960
that's you know this T word was next to

584
00:30:33,830 --> 00:30:37,850
without a vindication at one of them you

585
00:30:35,960 --> 00:30:44,210
could just take camera snapshot like

586
00:30:37,850 --> 00:30:47,110
that so and coming to the own roof and

587
00:30:44,210 --> 00:30:49,309
WS discovery so on with is a

588
00:30:47,110 --> 00:30:53,020
interoperability protocol that was

589
00:30:49,309 --> 00:30:57,530
designed so that the different I camera

590
00:30:53,020 --> 00:31:00,200
manufacturers know how to speak a common

591
00:30:57,530 --> 00:31:02,809
language whenever they they they want to

592
00:31:00,200 --> 00:31:05,299
communicate with IP camera software and

593
00:31:02,809 --> 00:31:07,160
it goes hand in hand with WS discovery

594
00:31:05,299 --> 00:31:10,490
which again is considered as zero

595
00:31:07,160 --> 00:31:13,190
configuration protocol so the way it

596
00:31:10,490 --> 00:31:15,850
works is this is taken this diagram is

597
00:31:13,190 --> 00:31:18,860
taken from the official specification

598
00:31:15,850 --> 00:31:21,980
but it's a bit confusing because the

599
00:31:18,860 --> 00:31:24,260
client is actually the IP camera our

600
00:31:21,980 --> 00:31:28,340
software and the target services the

601
00:31:24,260 --> 00:31:32,000
camera so WS discovery is used whenever

602
00:31:28,340 --> 00:31:35,540
you have an IP camera software a video

603
00:31:32,000 --> 00:31:37,850
management server so imagine for example

604
00:31:35,540 --> 00:31:40,940
you have a huge company that has you

605
00:31:37,850 --> 00:31:43,399
know a lot of different IP cameras for

606
00:31:40,940 --> 00:31:45,620
physical security and you want a

607
00:31:43,400 --> 00:31:49,100
centralized way to manage them so you

608
00:31:45,620 --> 00:31:50,409
have all of these cameras you know send

609
00:31:49,100 --> 00:31:53,469
their video feed

610
00:31:50,410 --> 00:31:55,420
to a specific server but then you know

611
00:31:53,470 --> 00:31:58,000
you can configure them from from there

612
00:31:55,420 --> 00:32:02,410
you have an you know an administrator

613
00:31:58,000 --> 00:32:04,840
operator that does all the setup so the

614
00:32:02,410 --> 00:32:07,630
WS discovery is supposed to help them

615
00:32:04,840 --> 00:32:11,830
Auto configure and Toto discover this

616
00:32:07,630 --> 00:32:14,410
this IP cameras so the client which is

617
00:32:11,830 --> 00:32:16,990
again as I said in this case the the

618
00:32:14,410 --> 00:32:20,320
video management server will send a

619
00:32:16,990 --> 00:32:25,330
broadcast request on the network over

620
00:32:20,320 --> 00:32:27,970
UDP port 3 702 on this IP address the

621
00:32:25,330 --> 00:32:33,360
multicast address and it will ask if

622
00:32:27,970 --> 00:32:36,850
there is you know any IP camera service

623
00:32:33,360 --> 00:32:39,459
on the network and then for any IP

624
00:32:36,850 --> 00:32:41,199
camera that you know just arrived on the

625
00:32:39,460 --> 00:32:44,680
network that you know you just plugged

626
00:32:41,200 --> 00:32:48,910
it in in the ethernet or wireless access

627
00:32:44,680 --> 00:32:50,830
point it will send back a unicast it

628
00:32:48,910 --> 00:32:52,960
will send back a reply back to the to

629
00:32:50,830 --> 00:32:58,990
the to the server that are not sent the

630
00:32:52,960 --> 00:33:06,280
original query and this will look like

631
00:32:58,990 --> 00:33:09,100
this so the the the only thing that you

632
00:33:06,280 --> 00:33:11,560
that you need to do to replicate this

633
00:33:09,100 --> 00:33:16,149
this kind of thing as an attacker is

634
00:33:11,560 --> 00:33:19,000
that in the same network you can

635
00:33:16,150 --> 00:33:21,160
actually emulate a fake IP camera so

636
00:33:19,000 --> 00:33:24,240
when the server the video management

637
00:33:21,160 --> 00:33:27,940
server have sensed this broadcast query

638
00:33:24,240 --> 00:33:31,080
as an attacker you can say Here I am I'm

639
00:33:27,940 --> 00:33:34,030
a camera that you know listens on this

640
00:33:31,080 --> 00:33:36,040
that is on the network and the only

641
00:33:34,030 --> 00:33:38,500
thing you have to do and this is white

642
00:33:36,040 --> 00:33:41,230
so the these attacks are so simple and

643
00:33:38,500 --> 00:33:43,120
so interesting it's because they work

644
00:33:41,230 --> 00:33:44,380
out of the box the only thing you have

645
00:33:43,120 --> 00:33:46,449
to do it's basically just you know

646
00:33:44,380 --> 00:33:48,850
capture traffic on the network see this

647
00:33:46,450 --> 00:33:52,420
broadcast query broadcast with you don't

648
00:33:48,850 --> 00:33:58,360
even have to be among the middle and see

649
00:33:52,420 --> 00:34:02,890
this see this message ID which is just a

650
00:33:58,360 --> 00:34:03,740
you know UUID identifier and reply back

651
00:34:02,890 --> 00:34:08,899
to

652
00:34:03,740 --> 00:34:13,820
original query with this there relates

653
00:34:08,899 --> 00:34:15,888
to XML entity being having this this

654
00:34:13,820 --> 00:34:17,929
value from from the original packet that

655
00:34:15,889 --> 00:34:20,450
the server sent and that's all you need

656
00:34:17,929 --> 00:34:25,399
to basically just reply as a legitimate

657
00:34:20,449 --> 00:34:27,529
supposedly camera on the network and an

658
00:34:25,399 --> 00:34:32,839
example here on how this looks like this

659
00:34:27,530 --> 00:34:35,419
is a comma latex cameraman and you just

660
00:34:32,839 --> 00:34:37,429
listening on the on the network for for

661
00:34:35,418 --> 00:34:40,699
this broadcast query and then you send

662
00:34:37,429 --> 00:34:43,609
back a reply to the server and then you

663
00:34:40,699 --> 00:34:45,859
have all of a sudden a new camera appear

664
00:34:43,609 --> 00:34:47,418
there with you know this address but

665
00:34:45,859 --> 00:34:52,569
this is completely fake this is an

666
00:34:47,418 --> 00:34:55,279
attacker just fading an IP camera and

667
00:34:52,570 --> 00:35:08,750
actually let's let's see the video first

668
00:34:55,280 --> 00:35:13,400
that I have here before this attack all

669
00:35:08,750 --> 00:35:20,240
right so this is the video management

670
00:35:13,400 --> 00:35:23,330
server that we are using so we have a

671
00:35:20,240 --> 00:35:27,200
way to discover to automatically

672
00:35:23,330 --> 00:35:29,779
discover new cameras so as an operator

673
00:35:27,200 --> 00:35:31,399
of the management server we're gonna you

674
00:35:29,780 --> 00:35:34,640
know scan the network so this will send

675
00:35:31,400 --> 00:35:36,740
the initial broadcast query and then you

676
00:35:34,640 --> 00:35:40,339
know we don't have any camera yet so now

677
00:35:36,740 --> 00:35:43,868
as an attacker we're gonna listen for

678
00:35:40,339 --> 00:35:49,339
this broadcast as an operator risk under

679
00:35:43,869 --> 00:35:51,200
the network and now we we've got this

680
00:35:49,339 --> 00:35:54,200
query from the server and then we reply

681
00:35:51,200 --> 00:35:56,450
back with thing and now all of a sudden

682
00:35:54,200 --> 00:35:59,899
you know a new camera appears from their

683
00:35:56,450 --> 00:36:03,200
list and that's the beginning that's

684
00:35:59,900 --> 00:36:08,270
only the beginning so now we want to go

685
00:36:03,200 --> 00:36:11,029
further and we'll send a reply back to

686
00:36:08,270 --> 00:36:13,590
the server but this time it will not be

687
00:36:11,030 --> 00:36:16,820
as good-looking

688
00:36:13,590 --> 00:36:20,880
so now we send that you know malicious

689
00:36:16,820 --> 00:36:25,940
corrupted payload on the against the

690
00:36:20,880 --> 00:36:30,990
server and this time because this is XML

691
00:36:25,940 --> 00:36:34,530
now it crosses the server so it's a

692
00:36:30,990 --> 00:36:38,430
memory corruption bug against the video

693
00:36:34,530 --> 00:36:41,220
management server which can also be a

694
00:36:38,430 --> 00:36:51,779
remote code execution attack which we're

695
00:36:41,220 --> 00:36:55,620
not gonna show so what kind of attacks

696
00:36:51,780 --> 00:36:57,750
can we do with with this memory

697
00:36:55,620 --> 00:37:00,810
corruption due to XML parsing bugs

698
00:36:57,750 --> 00:37:05,900
because this is using soap queries so

699
00:37:00,810 --> 00:37:07,560
it's XML XML parsers are notorious for

700
00:37:05,900 --> 00:37:09,440
memory corruption vulnerabilities

701
00:37:07,560 --> 00:37:13,110
because you know complicated software

702
00:37:09,440 --> 00:37:16,950
parsers so you can impersonate a real

703
00:37:13,110 --> 00:37:18,620
camera and you can actually cause a

704
00:37:16,950 --> 00:37:22,080
denial of service on the real camera

705
00:37:18,620 --> 00:37:25,529
which means that if you reply back first

706
00:37:22,080 --> 00:37:27,150
until it's determined camera tries to to

707
00:37:25,530 --> 00:37:29,160
reply at the same time

708
00:37:27,150 --> 00:37:31,800
yours will appear with this IP address

709
00:37:29,160 --> 00:37:35,310
and then what this means is that not

710
00:37:31,800 --> 00:37:37,410
only will the the legitimate camera not

711
00:37:35,310 --> 00:37:41,930
appear on the server list as it should

712
00:37:37,410 --> 00:37:45,120
but you would also be able to

713
00:37:41,930 --> 00:37:50,009
potentially make the operator of the

714
00:37:45,120 --> 00:37:52,500
device send credentials that he would

715
00:37:50,010 --> 00:37:54,330
use to authenticate to the original

716
00:37:52,500 --> 00:37:57,270
camera and then you can capture those

717
00:37:54,330 --> 00:37:59,520
credentials so and the other thing is

718
00:37:57,270 --> 00:38:02,400
that usually with this type of software

719
00:37:59,520 --> 00:38:04,380
you have a password reuse so they might

720
00:38:02,400 --> 00:38:06,120
be using the same type of username and

721
00:38:04,380 --> 00:38:09,030
password to authenticate against other

722
00:38:06,120 --> 00:38:12,750
cameras so that's an easy way to you

723
00:38:09,030 --> 00:38:15,450
know just compromise the whole IP camera

724
00:38:12,750 --> 00:38:21,930
network you can also send artificial

725
00:38:15,450 --> 00:38:23,460
video input and also in some of those IP

726
00:38:21,930 --> 00:38:26,640
camera management software you might

727
00:38:23,460 --> 00:38:29,950
have some URLs that

728
00:38:26,640 --> 00:38:33,730
can't be fed malicious links so that the

729
00:38:29,950 --> 00:38:36,310
operator inside can be full too you know

730
00:38:33,730 --> 00:38:39,490
just click on the those and have

731
00:38:36,310 --> 00:38:42,250
something malicious pop-up to them and

732
00:38:39,490 --> 00:38:44,500
then there's another concept that needs

733
00:38:42,250 --> 00:38:47,590
further investigation there is the

734
00:38:44,500 --> 00:38:51,010
concept of discovery proxies in the WS

735
00:38:47,590 --> 00:38:54,460
discovery which basically are proxy

736
00:38:51,010 --> 00:38:57,280
servers in the form of web servers that

737
00:38:54,460 --> 00:38:59,800
could potentially allow the ws discovery

738
00:38:57,280 --> 00:39:02,800
attacks over the internet instead of

739
00:38:59,800 --> 00:39:09,910
just being limited on the on the local

740
00:39:02,800 --> 00:39:12,700
network RTSP RDP are disappear real time

741
00:39:09,910 --> 00:39:15,339
streaming protocol real-time Transfer

742
00:39:12,700 --> 00:39:17,950
Protocol and real-time control protocol

743
00:39:15,340 --> 00:39:22,410
so what are these they are used by IP

744
00:39:17,950 --> 00:39:26,620
cameras to send the video feed we are

745
00:39:22,410 --> 00:39:30,450
99% done encrypting we've almost never

746
00:39:26,620 --> 00:39:33,130
seen a camera sent an encrypted payload

747
00:39:30,450 --> 00:39:38,470
using those protocols actually you have

748
00:39:33,130 --> 00:39:40,060
to use SRTP which is never used and

749
00:39:38,470 --> 00:39:43,390
there is no message authentication and

750
00:39:40,060 --> 00:39:46,540
integrity so all of this you know are

751
00:39:43,390 --> 00:39:51,000
nice attack vectors so how does this

752
00:39:46,540 --> 00:39:55,870
look like the RTSP is more or less like

753
00:39:51,000 --> 00:39:58,300
VHS style network so you're using it as

754
00:39:55,870 --> 00:40:00,160
a client say a browser connecting to an

755
00:39:58,300 --> 00:40:02,920
IP camera to see its video feed and

756
00:40:00,160 --> 00:40:05,410
initially you send it this options

757
00:40:02,920 --> 00:40:09,070
request to so the server replies with

758
00:40:05,410 --> 00:40:11,620
what kind of specific requests it can

759
00:40:09,070 --> 00:40:16,150
accept then you say you send it as a

760
00:40:11,620 --> 00:40:19,509
client describe request which that's the

761
00:40:16,150 --> 00:40:21,400
interesting part the the camera which is

762
00:40:19,510 --> 00:40:24,880
the server in this case will reply back

763
00:40:21,400 --> 00:40:28,960
with session description protocol

764
00:40:24,880 --> 00:40:32,980
packets the SDP in this packet we're

765
00:40:28,960 --> 00:40:35,410
gonna use in this demonstration to

766
00:40:32,980 --> 00:40:39,100
basically understand what kind of

767
00:40:35,410 --> 00:40:39,940
encoding the camera uses so if it's you

768
00:40:39,100 --> 00:40:44,859
know some

769
00:40:39,940 --> 00:40:49,839
specific 8.26 for in video encoder or

770
00:40:44,859 --> 00:40:52,259
something along those lines then we're

771
00:40:49,839 --> 00:40:55,299
using we are sending a setup request

772
00:40:52,260 --> 00:40:59,230
that basically negotiates the the ports

773
00:40:55,299 --> 00:41:01,509
over which the RTP stream is going to be

774
00:40:59,230 --> 00:41:05,829
sent RTP will contain the video and

775
00:41:01,510 --> 00:41:10,329
audio data of the of the IP camera and

776
00:41:05,829 --> 00:41:11,950
then there's also the rtcp a protocol

777
00:41:10,329 --> 00:41:14,410
that comes into the picture but is not

778
00:41:11,950 --> 00:41:17,799
so important here that contains meta

779
00:41:14,410 --> 00:41:20,558
information about you know the whole

780
00:41:17,799 --> 00:41:22,200
streaming so like statistics and things

781
00:41:20,559 --> 00:41:25,539
like that

782
00:41:22,200 --> 00:41:28,319
and then the the thing that I was trying

783
00:41:25,539 --> 00:41:31,270
to do was that although there was a

784
00:41:28,319 --> 00:41:32,950
video that was a tool that was

785
00:41:31,270 --> 00:41:37,869
demonstrated at Def Con

786
00:41:32,950 --> 00:41:39,759
a few years ago video snarf I wasn't

787
00:41:37,869 --> 00:41:42,039
able to successfully use it in in some

788
00:41:39,760 --> 00:41:44,980
of the test cases and what I wanted to

789
00:41:42,039 --> 00:41:48,730
do was demonstrate that you know to some

790
00:41:44,980 --> 00:41:52,180
stakeholders that using RTSP while not

791
00:41:48,730 --> 00:41:54,430
using SRTP which is encrypted is a you

792
00:41:52,180 --> 00:41:58,270
know is a is a no-no and why is that

793
00:41:54,430 --> 00:42:00,339
because you can actually play back the

794
00:41:58,270 --> 00:42:06,029
video and i want to demonstrate how this

795
00:42:00,339 --> 00:42:08,500
this can be done so i I basically used

796
00:42:06,029 --> 00:42:11,829
you know these two tools these three

797
00:42:08,500 --> 00:42:13,690
tools were Sarkar TB tools and ffmpeg to

798
00:42:11,829 --> 00:42:16,470
do that and I'm gonna show you a

799
00:42:13,690 --> 00:42:16,470
demonstration of that

800
00:42:26,130 --> 00:42:35,670
so by starting from just the you know

801
00:42:31,259 --> 00:42:38,720
the dump the pickup file and just having

802
00:42:35,670 --> 00:42:42,539
downloaded RTP tools we go to the SDP

803
00:42:38,720 --> 00:42:48,058
packet of the RTP stream we save it as

804
00:42:42,539 --> 00:42:51,930
as a file then we do some edits there

805
00:42:48,059 --> 00:42:54,839
because we wanted to now have a local FM

806
00:42:51,930 --> 00:42:59,190
peg server running so we specify the

807
00:42:54,839 --> 00:43:01,558
local host there then we also specify a

808
00:42:59,190 --> 00:43:07,190
local port say 5,000 that doesn't matter

809
00:43:01,559 --> 00:43:10,950
and this contains the the original

810
00:43:07,190 --> 00:43:16,140
encoding then we go to work it has a way

811
00:43:10,950 --> 00:43:19,189
to extract the RTP data stream which can

812
00:43:16,140 --> 00:43:24,920
then be played back by the RTP tools

813
00:43:19,190 --> 00:43:29,839
then we go to RTP tools we're gonna

814
00:43:24,920 --> 00:43:32,700
start that and basically we're gonna

815
00:43:29,839 --> 00:43:36,440
start an ffmpeg server we're gonna play

816
00:43:32,700 --> 00:43:40,410
back the RTP dump to it and the ffmpeg

817
00:43:36,440 --> 00:43:45,269
will use the SDP file that we just that

818
00:43:40,410 --> 00:43:47,910
we extracted to basically output the the

819
00:43:45,269 --> 00:43:52,140
the final video file from the original

820
00:43:47,910 --> 00:43:55,979
pickup and that's what we wanted to show

821
00:43:52,140 --> 00:43:57,839
that you know just by having an attacker

822
00:43:55,979 --> 00:43:59,788
that has a tainted money in the middle

823
00:43:57,839 --> 00:44:02,670
position in your network would be able

824
00:43:59,789 --> 00:44:06,299
to capture this traffic and then will be

825
00:44:02,670 --> 00:44:08,940
able to play back whatever your you're

826
00:44:06,299 --> 00:44:14,009
seeing and this is the you know the

827
00:44:08,940 --> 00:44:17,609
output video that we that we extracted

828
00:44:14,009 --> 00:44:24,499
from that from the pickup and it's such

829
00:44:17,609 --> 00:44:24,499
a simple as that so

830
00:44:24,590 --> 00:44:36,450
almost and in terms of medical things so

831
00:44:30,840 --> 00:44:40,070
very interesting things here some of the

832
00:44:36,450 --> 00:44:42,509
things we've tested were you know

833
00:44:40,070 --> 00:44:44,570
pacemakers heart rate monitors all of

834
00:44:42,510 --> 00:44:47,010
these cool stuff

835
00:44:44,570 --> 00:44:50,580
there there is public research on that

836
00:44:47,010 --> 00:44:53,810
so I can freely talk about it so there

837
00:44:50,580 --> 00:44:57,390
there has been an interesting way of

838
00:44:53,810 --> 00:45:01,200
attacking pacemakers that are you know

839
00:44:57,390 --> 00:45:03,180
implantable cardiac devices that are you

840
00:45:01,200 --> 00:45:06,180
know critical for the survival of the

841
00:45:03,180 --> 00:45:09,060
patient they have these home monitoring

842
00:45:06,180 --> 00:45:13,950
devices those are basically used by

843
00:45:09,060 --> 00:45:16,170
physicians they continuously send data

844
00:45:13,950 --> 00:45:20,609
to the cloud so that the physician the

845
00:45:16,170 --> 00:45:23,190
doctor can regularly monitor that to see

846
00:45:20,610 --> 00:45:24,690
if there is some kind of anomaly saying

847
00:45:23,190 --> 00:45:29,120
that in the heart rate of the of the

848
00:45:24,690 --> 00:45:32,100
patient and the way this work is that

849
00:45:29,120 --> 00:45:35,490
the home monitoring device of course has

850
00:45:32,100 --> 00:45:38,009
to use a short-range radio protocol and

851
00:45:35,490 --> 00:45:41,580
interact with the implantable device but

852
00:45:38,010 --> 00:45:43,230
of course this leaves you know an attack

853
00:45:41,580 --> 00:45:45,540
surface there because the home

854
00:45:43,230 --> 00:45:51,360
monitoring device again will have to be

855
00:45:45,540 --> 00:45:54,920
connected to the Internet and some of

856
00:45:51,360 --> 00:45:59,120
the research that is publicly available

857
00:45:54,920 --> 00:46:01,500
basically what they did was that they

858
00:45:59,120 --> 00:46:03,210
after you as an attacker after you've

859
00:46:01,500 --> 00:46:08,100
gained access to the home enduring

860
00:46:03,210 --> 00:46:10,650
device which in that case was using you

861
00:46:08,100 --> 00:46:13,230
know was just connected to the local

862
00:46:10,650 --> 00:46:16,650
router Wi-Fi router of the of the

863
00:46:13,230 --> 00:46:19,050
patient's home network there was a way

864
00:46:16,650 --> 00:46:22,530
that there was a master key basically

865
00:46:19,050 --> 00:46:25,290
that was in only implantable device of

866
00:46:22,530 --> 00:46:27,390
the same manufacturer and you could use

867
00:46:25,290 --> 00:46:30,020
that if when you compromised the home

868
00:46:27,390 --> 00:46:37,230
monitoring device you could use that to

869
00:46:30,020 --> 00:46:40,500
remotely send a shock to the pacemaker

870
00:46:37,230 --> 00:46:46,320
so that tells you that you can remotely

871
00:46:40,500 --> 00:46:48,359
even kill someone V there are a lot of

872
00:46:46,320 --> 00:46:51,140
interesting stuff on the medical devices

873
00:46:48,359 --> 00:46:53,430
these are just some of the you know

874
00:46:51,140 --> 00:46:55,980
common vulnerabilities

875
00:46:53,430 --> 00:46:58,770
the problem with medical devices is that

876
00:46:55,980 --> 00:47:01,290
you know they have to go through a long

877
00:46:58,770 --> 00:47:02,910
and rigorous patching cycle so one of

878
00:47:01,290 --> 00:47:06,300
the other days when I was talking with

879
00:47:02,910 --> 00:47:10,560
you know one of an engineer from a

880
00:47:06,300 --> 00:47:12,750
vendor they they are making a blood

881
00:47:10,560 --> 00:47:15,180
analyzer and for example he was saying

882
00:47:12,750 --> 00:47:17,550
that you know even if you find as you

883
00:47:15,180 --> 00:47:21,180
know a vulnerability we we have to wait

884
00:47:17,550 --> 00:47:23,700
I don't know many months until we go

885
00:47:21,180 --> 00:47:25,350
through all the the quality assurance

886
00:47:23,700 --> 00:47:27,359
the testing that we have to do because

887
00:47:25,350 --> 00:47:30,600
if we patch that thing and that thing

888
00:47:27,359 --> 00:47:34,080
ends up making a mistake like a floating

889
00:47:30,600 --> 00:47:36,060
point error calculation error on the on

890
00:47:34,080 --> 00:47:38,160
the blood analysis on the blood results

891
00:47:36,060 --> 00:47:40,470
then you know a patient might be

892
00:47:38,160 --> 00:47:43,259
diagnosed that if he has you know an

893
00:47:40,470 --> 00:47:46,950
infectious disease when he really

894
00:47:43,260 --> 00:47:48,720
doesn't so all of them most of the

895
00:47:46,950 --> 00:47:51,629
medical devices especially the critical

896
00:47:48,720 --> 00:47:53,879
ones have a very slow patching and

897
00:47:51,630 --> 00:47:54,660
update process and that leaves a large

898
00:47:53,880 --> 00:47:59,160
attack

899
00:47:54,660 --> 00:48:01,740
window we don't have a lot of time so

900
00:47:59,160 --> 00:48:07,109
I'll go through this quickly some

901
00:48:01,740 --> 00:48:08,430
interesting vulnerabilities okay one one

902
00:48:07,109 --> 00:48:11,460
really common thing we've seen is that

903
00:48:08,430 --> 00:48:13,770
there is some of these devices embedded

904
00:48:11,460 --> 00:48:17,609
medical devices usually they are very

905
00:48:13,770 --> 00:48:19,770
very sensitive to even you know a

906
00:48:17,609 --> 00:48:21,480
network versioning scan so we've seen

907
00:48:19,770 --> 00:48:23,580
some of these devices crossing reboot

908
00:48:21,480 --> 00:48:32,010
just by standing up just by doing an

909
00:48:23,580 --> 00:48:37,410
nmap - SP which is really sad and other

910
00:48:32,010 --> 00:48:40,710
things are that we have we have lack of

911
00:48:37,410 --> 00:48:42,899
mutual authentication so there is you

912
00:48:40,710 --> 00:48:44,820
know a server component to the medical

913
00:48:42,900 --> 00:48:48,090
device that doesn't authenticate the

914
00:48:44,820 --> 00:48:49,859
client or when they use TLS

915
00:48:48,090 --> 00:48:51,410
there isn't any any

916
00:48:49,859 --> 00:48:55,308
a mutual authentication so you can

917
00:48:51,410 --> 00:48:58,558
impersonate the one or the other and

918
00:48:55,309 --> 00:49:01,440
just a few things about DICOM real quick

919
00:48:58,559 --> 00:49:04,799
so daikon is used for park servers which

920
00:49:01,440 --> 00:49:11,130
are basically media servers for hosting

921
00:49:04,799 --> 00:49:15,089
large images of medical of medical

922
00:49:11,130 --> 00:49:16,769
imaging so ultrasound CT scanners PET

923
00:49:15,089 --> 00:49:19,828
scanners all of that usually they have

924
00:49:16,769 --> 00:49:21,779
images that are maybe 4 gigabytes

925
00:49:19,829 --> 00:49:23,640
sometimes because they want a very high

926
00:49:21,779 --> 00:49:30,900
resolution for the doctor to be able to

927
00:49:23,640 --> 00:49:32,848
you know do the diagnosis so with Park

928
00:49:30,900 --> 00:49:36,239
servers they are using the daikon

929
00:49:32,849 --> 00:49:39,719
protocol which is a network and the file

930
00:49:36,239 --> 00:49:41,339
protocol at the same time some of the

931
00:49:39,719 --> 00:49:43,289
biggest problems is that documentation

932
00:49:41,339 --> 00:49:47,519
is you know it's a very old protocol

933
00:49:43,289 --> 00:49:49,109
really complex and it's unencrypted 99%

934
00:49:47,519 --> 00:49:52,919
of the time almost always we've never

935
00:49:49,109 --> 00:49:55,680
actually seen being acquitted and there

936
00:49:52,920 --> 00:49:56,999
is a big flaw in the authentication so

937
00:49:55,680 --> 00:49:59,279
we don't have a lot of time to talk

938
00:49:56,999 --> 00:50:03,808
about that but there's this associated

939
00:49:59,279 --> 00:50:05,699
request that basically is used for a

940
00:50:03,809 --> 00:50:08,309
client to authenticate to a pax server

941
00:50:05,699 --> 00:50:12,089
which is you know the media server

942
00:50:08,309 --> 00:50:14,430
hosting all the images and that they

943
00:50:12,089 --> 00:50:17,069
don't use normal authentication with a

944
00:50:14,430 --> 00:50:19,049
username and password they just use the

945
00:50:17,069 --> 00:50:22,650
applique application entity title as

946
00:50:19,049 --> 00:50:24,180
they call it ad which can be really

947
00:50:22,650 --> 00:50:26,099
easily brute forcible because it's

948
00:50:24,180 --> 00:50:28,828
usually something that resembles a host

949
00:50:26,099 --> 00:50:31,859
name so you can do some guessing there

950
00:50:28,829 --> 00:50:36,900
or might be something really really easy

951
00:50:31,859 --> 00:50:40,920
to do again guess so I made a module for

952
00:50:36,900 --> 00:50:43,920
n crack which is extensible as a network

953
00:50:40,920 --> 00:50:46,979
writing tool and I made some really easy

954
00:50:43,920 --> 00:50:49,979
way to you know brute force this

955
00:50:46,979 --> 00:50:53,788
associate request and then I just use

956
00:50:49,979 --> 00:50:56,399
another Python script by using this PI

957
00:50:53,789 --> 00:50:58,229
DICOM and PI net diagram library that

958
00:50:56,400 --> 00:50:59,910
basically can also brute force the C

959
00:50:58,229 --> 00:51:02,718
file request which is the second

960
00:50:59,910 --> 00:51:02,719
component of the

961
00:51:03,270 --> 00:51:08,280
another type of request that DICOM that

962
00:51:05,580 --> 00:51:11,130
Park server used as a form of additional

963
00:51:08,280 --> 00:51:13,950
authentication which is not always used

964
00:51:11,130 --> 00:51:16,220
by the way so if you brute force first

965
00:51:13,950 --> 00:51:18,598
the one and then the other so there's no

966
00:51:16,220 --> 00:51:21,629
it's not even the same type of brute

967
00:51:18,599 --> 00:51:25,980
force authentication so it's a only our

968
00:51:21,630 --> 00:51:29,520
when algorithmic complexity not or when

969
00:51:25,980 --> 00:51:31,200
to the power of two so it's it's really

970
00:51:29,520 --> 00:51:33,240
easy to brute force it and then you can

971
00:51:31,200 --> 00:51:35,279
you know access protected health

972
00:51:33,240 --> 00:51:38,759
information so base it sensitive

973
00:51:35,280 --> 00:51:41,280
information in one of the last things

974
00:51:38,760 --> 00:51:43,020
since we're ending another interesting

975
00:51:41,280 --> 00:51:47,400
attack was the malware embedded in the

976
00:51:43,020 --> 00:51:50,009
icon that was recently published so it

977
00:51:47,400 --> 00:51:54,599
was a way to basically embed a portable

978
00:51:50,010 --> 00:51:57,180
executable files inside the DICOM images

979
00:51:54,599 --> 00:52:00,540
and then be able to you know have some

980
00:51:57,180 --> 00:52:04,169
malware in it and I think that's that's

981
00:52:00,540 --> 00:52:07,220
it our resources I don't think we have

982
00:52:04,170 --> 00:52:07,220
time for questions

983
00:52:10,710 --> 00:52:20,679
[Applause]

