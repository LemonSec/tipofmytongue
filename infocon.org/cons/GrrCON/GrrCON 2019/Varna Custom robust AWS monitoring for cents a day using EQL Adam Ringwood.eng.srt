1
00:00:20,029 --> 00:00:26,250
look it is at the time I heard a good

2
00:00:23,369 --> 00:00:28,050
cell phone ring it's very cool so good

3
00:00:26,250 --> 00:00:31,619
afternoon I think it's afternoon now or

4
00:00:28,050 --> 00:00:33,739
close enough to it welcome back to your

5
00:00:31,619 --> 00:00:35,550
conne 2019 so in this session

6
00:00:33,739 --> 00:00:37,440
Annamarie woods can be talking about

7
00:00:35,550 --> 00:00:40,680
Varna what she explained to me very

8
00:00:37,440 --> 00:00:43,230
shortly is a Swedish name for alarm

9
00:00:40,680 --> 00:00:48,809
so do not be alarmed he's gonna tell you

10
00:00:43,230 --> 00:00:51,000
some really good stuff so yeah hi how's

11
00:00:48,809 --> 00:00:53,190
it going so yeah I'm gonna talk about

12
00:00:51,000 --> 00:00:54,329
Varna and this mic has a very short

13
00:00:53,190 --> 00:00:58,140
distance so I'm gonna have to kind of

14
00:00:54,329 --> 00:01:00,989
eat it but Varna is a tool for

15
00:00:58,140 --> 00:01:02,489
monitoring AWS so we're just kind of

16
00:01:00,989 --> 00:01:05,188
gonna get started and I'll explain

17
00:01:02,489 --> 00:01:07,140
what's going on first off I'd like to

18
00:01:05,188 --> 00:01:08,548
preface this with I'm going to make a

19
00:01:07,140 --> 00:01:11,100
mistake probably multiple times

20
00:01:08,549 --> 00:01:13,590
throughout this talk I work with AWS all

21
00:01:11,100 --> 00:01:15,809
day every day and my brain has just gone

22
00:01:13,590 --> 00:01:18,630
scrambled due to acronyms and very

23
00:01:15,810 --> 00:01:20,490
similar names and I'm going to call

24
00:01:18,630 --> 00:01:23,070
cloud trail which is the service that

25
00:01:20,490 --> 00:01:24,600
Varna works with cloud watch because I

26
00:01:23,070 --> 00:01:26,429
also work with that on the day to day

27
00:01:24,600 --> 00:01:28,559
basis so please forgive me in advance

28
00:01:26,430 --> 00:01:30,450
when I do this just horribly and know

29
00:01:28,560 --> 00:01:35,430
that I mean cloud trail and when I'm

30
00:01:30,450 --> 00:01:38,549
saying this so this talk is for small

31
00:01:35,430 --> 00:01:40,740
shops I think to kind of start off it's

32
00:01:38,549 --> 00:01:42,720
really hard to do AWS security really

33
00:01:40,740 --> 00:01:44,189
well as a small shop right it's much

34
00:01:42,720 --> 00:01:46,259
easier if you have a team of eight

35
00:01:44,189 --> 00:01:48,750
people whose whole job it is is to

36
00:01:46,259 --> 00:01:50,220
configure your iam policies and all of

37
00:01:48,750 --> 00:01:50,460
your security groups and everything like

38
00:01:50,220 --> 00:01:52,649
that

39
00:01:50,460 --> 00:01:54,360
this talk is distinctly not for those

40
00:01:52,649 --> 00:01:56,100
people this talk is for people who are a

41
00:01:54,360 --> 00:01:58,290
single person or maybe a small team of

42
00:01:56,100 --> 00:01:59,579
one or two that they're running an AWS

43
00:01:58,290 --> 00:02:01,079
account and they don't feel like they

44
00:01:59,579 --> 00:02:01,860
have any visibility or monitoring over

45
00:02:01,079 --> 00:02:04,860
it

46
00:02:01,860 --> 00:02:06,750
it is also hopefully an inspiration to

47
00:02:04,860 --> 00:02:08,788
people to build and like distribute

48
00:02:06,750 --> 00:02:10,770
smaller security tools I think a lot of

49
00:02:08,788 --> 00:02:12,869
tooling around this industry is very

50
00:02:10,770 --> 00:02:13,560
large and requires like 50 pages of

51
00:02:12,870 --> 00:02:15,630
documents

52
00:02:13,560 --> 00:02:17,520
to read through no one really likes

53
00:02:15,630 --> 00:02:18,660
doing that right no one likes getting up

54
00:02:17,520 --> 00:02:20,160
on a 9:00 a.m. and being like I'm gonna

55
00:02:18,660 --> 00:02:22,950
read Doc's til noon to figure out how

56
00:02:20,160 --> 00:02:24,989
something works not fun this tool is

57
00:02:22,950 --> 00:02:27,000
designed to be immensely practical to

58
00:02:24,989 --> 00:02:28,650
you five minutes after you walk out

59
00:02:27,000 --> 00:02:30,209
these doors and read the setup guide and

60
00:02:28,650 --> 00:02:31,890
get it running there shouldn't be any

61
00:02:30,209 --> 00:02:35,580
complicated things about it if there is

62
00:02:31,890 --> 00:02:36,779
that's a bug you should contact me as I

63
00:02:35,580 --> 00:02:39,510
mentioned this talk is not for people

64
00:02:36,780 --> 00:02:41,069
who run really big security teams you

65
00:02:39,510 --> 00:02:42,599
probably have better tooling available

66
00:02:41,069 --> 00:02:46,200
for you that you paid a lot of money for

67
00:02:42,599 --> 00:02:47,880
you should probably use that it does not

68
00:02:46,200 --> 00:02:50,160
solve all your problems it will not

69
00:02:47,880 --> 00:02:52,019
solve all of your problems probably any

70
00:02:50,160 --> 00:02:53,730
of your problems in a protective way in

71
00:02:52,019 --> 00:02:55,170
some sense which is that if you need

72
00:02:53,730 --> 00:02:57,060
this tool it is because someone has

73
00:02:55,170 --> 00:02:58,679
broken into your account and bad things

74
00:02:57,060 --> 00:03:01,370
are happening to you and it will not

75
00:02:58,680 --> 00:03:03,090
save you if you want to talk about

76
00:03:01,370 --> 00:03:05,370
protections which i think is really

77
00:03:03,090 --> 00:03:07,260
important and I think it's kind of a bad

78
00:03:05,370 --> 00:03:09,209
move on my part to release a tool that

79
00:03:07,260 --> 00:03:11,130
only does monitoring without any

80
00:03:09,209 --> 00:03:13,110
protections but unfortunately

81
00:03:11,130 --> 00:03:15,109
protections in AWS due to how user

82
00:03:13,110 --> 00:03:17,069
accounts work and how you can get

83
00:03:15,110 --> 00:03:19,230
authentication in and out of AWS

84
00:03:17,069 --> 00:03:20,608
accounts is very difficult if you want

85
00:03:19,230 --> 00:03:21,690
to talk to me about this I'm happy to

86
00:03:20,609 --> 00:03:23,430
chat with you afterwards I will

87
00:03:21,690 --> 00:03:28,049
literally talk your ear about this topic

88
00:03:23,430 --> 00:03:30,090
for hours of the time so as I mentioned

89
00:03:28,049 --> 00:03:31,859
my name is Adam I'm security R&D

90
00:03:30,090 --> 00:03:33,690
engineer I've worked with I'm game for a

91
00:03:31,859 --> 00:03:36,630
bit and now I'm working in elastic

92
00:03:33,690 --> 00:03:38,880
because elastic bought and game my day

93
00:03:36,630 --> 00:03:41,040
job is I work with a bunch of malware

94
00:03:38,880 --> 00:03:42,510
and a bunch of big data and that sort of

95
00:03:41,040 --> 00:03:45,090
thing and that's actually how this tool

96
00:03:42,510 --> 00:03:46,560
kind of grew it is a tool that we use

97
00:03:45,090 --> 00:03:50,280
internally to secure some of our

98
00:03:46,560 --> 00:03:52,109
accounts and that's why we're here this

99
00:03:50,280 --> 00:03:54,480
is my Twitter if you have angry feedback

100
00:03:52,109 --> 00:03:56,459
or nice feedback but typically it seems

101
00:03:54,480 --> 00:03:58,828
to be mostly angry you can tweet at me

102
00:03:56,459 --> 00:04:01,950
and send me spicy memes and I will

103
00:03:58,829 --> 00:04:03,510
appreciate it it's really quick let's

104
00:04:01,950 --> 00:04:05,310
let's start off with just a high-level

105
00:04:03,510 --> 00:04:06,540
overview of what cloud trail is really

106
00:04:05,310 --> 00:04:09,090
quick because it will help people

107
00:04:06,540 --> 00:04:10,980
understand what this told us so cloud

108
00:04:09,090 --> 00:04:13,739
trail is this tool that Amazon basically

109
00:04:10,980 --> 00:04:16,349
made to instrument their kind of control

110
00:04:13,739 --> 00:04:17,639
plane and the the way of saying this in

111
00:04:16,350 --> 00:04:19,769
two different ways every time you spin

112
00:04:17,639 --> 00:04:22,620
up like an ec2 instance every time you

113
00:04:19,769 --> 00:04:24,390
spin up a new user every time you modify

114
00:04:22,620 --> 00:04:26,889
like a bucket policy or something like

115
00:04:24,390 --> 00:04:29,620
that Amazon actually makes an event

116
00:04:26,889 --> 00:04:31,060
in cloud trail and has like a full

117
00:04:29,620 --> 00:04:34,060
history of that and when that happens

118
00:04:31,060 --> 00:04:35,770
and this is really nice the sole problem

119
00:04:34,060 --> 00:04:38,020
with this is the cloud trail was never

120
00:04:35,770 --> 00:04:40,508
designed to be interacted with as a mere

121
00:04:38,020 --> 00:04:42,250
mortal it is very much designed around

122
00:04:40,509 --> 00:04:43,599
the fact that you have like some scripts

123
00:04:42,250 --> 00:04:47,319
or something that you use to interact

124
00:04:43,599 --> 00:04:49,840
with it it's interface consists of two

125
00:04:47,319 --> 00:04:52,210
things a set of log files that get

126
00:04:49,840 --> 00:04:53,948
dumped into an s3 bucket which we'll

127
00:04:52,210 --> 00:04:55,870
cover in a second and then a very

128
00:04:53,949 --> 00:04:58,060
limited like ninety day search window

129
00:04:55,870 --> 00:05:00,190
that you can also pull up and this

130
00:04:58,060 --> 00:05:01,870
search window is fabulously limited and

131
00:05:00,190 --> 00:05:09,039
doesn't let you query for most things

132
00:05:01,870 --> 00:05:10,810
you want so in this this is what an s3

133
00:05:09,039 --> 00:05:13,000
bucket with a bunch of cloud trail looks

134
00:05:10,810 --> 00:05:14,590
logs looks like so if you want to

135
00:05:13,000 --> 00:05:16,539
monitor your cloud trail normally and

136
00:05:14,590 --> 00:05:18,460
you're just like hi I wonder what

137
00:05:16,539 --> 00:05:20,349
happened on Tuesday at 10 a.m. the

138
00:05:18,460 --> 00:05:21,638
normal course of action if you don't if

139
00:05:20,349 --> 00:05:23,800
you actually need to look through the

140
00:05:21,639 --> 00:05:24,490
full ones is you have to go to this

141
00:05:23,800 --> 00:05:26,139
bucket ah

142
00:05:24,490 --> 00:05:27,610
navigate through a bunch of folders

143
00:05:26,139 --> 00:05:30,250
because there's an extensive folder

144
00:05:27,610 --> 00:05:34,509
hierarchy go find the sections you need

145
00:05:30,250 --> 00:05:36,069
grab them all uncompress them can cat

146
00:05:34,509 --> 00:05:38,349
them all together and then sort them by

147
00:05:36,069 --> 00:05:39,940
time and now you're ready to go I have

148
00:05:38,349 --> 00:05:41,860
yet to meet someone who has done this in

149
00:05:39,940 --> 00:05:45,099
less than 10 minutes if you have you're

150
00:05:41,860 --> 00:05:47,289
amazing it's horribly unusable for most

151
00:05:45,099 --> 00:05:49,060
humans it's pretty convenient for BOTS

152
00:05:47,289 --> 00:05:51,460
which is why I wrote a bot to talk to it

153
00:05:49,060 --> 00:05:54,430
but it is not the most intuitive

154
00:05:51,460 --> 00:05:57,099
straightforward setup so what does an

155
00:05:54,430 --> 00:05:58,449
event look like oh that guy cropped so

156
00:05:57,099 --> 00:06:00,520
this is kind of what an event looks like

157
00:05:58,449 --> 00:06:02,759
it's just a bunch of messy data that

158
00:06:00,520 --> 00:06:04,750
basically gets posted like this and

159
00:06:02,759 --> 00:06:06,490
we'll talk a little bit why this is

160
00:06:04,750 --> 00:06:08,589
complicated but first off let's really

161
00:06:06,490 --> 00:06:11,139
quickly talk about what's in every event

162
00:06:08,589 --> 00:06:12,879
just so you can see every event has

163
00:06:11,139 --> 00:06:14,440
these fields in it

164
00:06:12,879 --> 00:06:16,180
and they're pretty straightforward it's

165
00:06:14,440 --> 00:06:19,509
the region you're running stuff in it's

166
00:06:16,180 --> 00:06:21,639
a global GU ID that gets generated it's

167
00:06:19,509 --> 00:06:23,379
the type of event so in this case it's

168
00:06:21,639 --> 00:06:24,339
an assumed role it's from where it's

169
00:06:23,379 --> 00:06:26,020
from

170
00:06:24,339 --> 00:06:27,370
there's the event type which there's a

171
00:06:26,020 --> 00:06:28,900
fabulous document that you should read

172
00:06:27,370 --> 00:06:31,839
because I don't understand it still and

173
00:06:28,900 --> 00:06:33,789
it may be understandable to you

174
00:06:31,839 --> 00:06:35,709
and then there's account ID which is

175
00:06:33,789 --> 00:06:37,630
pretty important and then there's source

176
00:06:35,709 --> 00:06:38,639
IP and there's user agent there's

177
00:06:37,630 --> 00:06:40,680
actually one kind of

178
00:06:38,639 --> 00:06:42,240
cool note about source IP and user agent

179
00:06:40,680 --> 00:06:43,889
so if you've spent a bunch of time

180
00:06:42,240 --> 00:06:45,539
looking at cloud trail logs you'll

181
00:06:43,889 --> 00:06:48,180
notice that pretty frequently Amazon

182
00:06:45,539 --> 00:06:51,270
like right here I was put in their IP

183
00:06:48,180 --> 00:06:52,889
address for and their user agents as

184
00:06:51,270 --> 00:06:55,889
like their URL for their internal

185
00:06:52,889 --> 00:06:58,499
services when you interact with the

186
00:06:55,889 --> 00:07:00,930
console the web console and AWS and you

187
00:06:58,499 --> 00:07:03,060
actually are what will happen is that it

188
00:07:00,930 --> 00:07:05,099
will include your IP and your user

189
00:07:03,060 --> 00:07:07,529
agents so if you make a user from the

190
00:07:05,099 --> 00:07:09,659
console instead of actually getting the

191
00:07:07,529 --> 00:07:11,969
web console servers in this spot it'll

192
00:07:09,659 --> 00:07:13,500
actually proxy through the users IP and

193
00:07:11,969 --> 00:07:15,539
the users user agent this is

194
00:07:13,500 --> 00:07:17,520
tremendously useful and allows you to do

195
00:07:15,539 --> 00:07:18,990
some like interesting geoip stuff that

196
00:07:17,520 --> 00:07:21,900
you normally wouldn't be able to do and

197
00:07:18,990 --> 00:07:24,569
a bunch of stuff like this now here's

198
00:07:21,900 --> 00:07:27,448
the complicated part this is what I like

199
00:07:24,569 --> 00:07:29,729
to call the wild card fields so these

200
00:07:27,449 --> 00:07:32,520
three things are defined basically in

201
00:07:29,729 --> 00:07:34,800
spec and then there's no other structure

202
00:07:32,520 --> 00:07:38,128
to them so every time you get an event

203
00:07:34,800 --> 00:07:39,960
ah is it it appears to me roughly that

204
00:07:38,129 --> 00:07:41,249
you can define this yourself so some

205
00:07:39,960 --> 00:07:42,539
people will put a bunch of request

206
00:07:41,249 --> 00:07:44,580
parameters in there that might be useful

207
00:07:42,539 --> 00:07:46,080
some people will put a bunch of response

208
00:07:44,580 --> 00:07:47,250
elements in there for instance if you're

209
00:07:46,080 --> 00:07:49,020
logging in through the console the

210
00:07:47,250 --> 00:07:50,819
console login event tells you whether

211
00:07:49,020 --> 00:07:53,279
that logon succeeded or not this is

212
00:07:50,819 --> 00:07:54,659
pretty useful as far as I can tell these

213
00:07:53,279 --> 00:07:57,449
are like vaguely documented or

214
00:07:54,659 --> 00:07:58,529
documented exactly nowhere so if you

215
00:07:57,449 --> 00:08:00,960
want to write rules you have to

216
00:07:58,529 --> 00:08:02,430
basically cause the event to happen that

217
00:08:00,960 --> 00:08:04,229
you're looking for and then actually

218
00:08:02,430 --> 00:08:06,180
look through the metadata of these like

219
00:08:04,229 --> 00:08:06,960
elements to find the structure of them

220
00:08:06,180 --> 00:08:09,210
to write rules

221
00:08:06,960 --> 00:08:10,649
I really wish this was not the case and

222
00:08:09,210 --> 00:08:13,799
I'm sorry to tell you it is because it

223
00:08:10,649 --> 00:08:15,379
is horrible as a user experience and

224
00:08:13,800 --> 00:08:18,389
then there's the user identity field

225
00:08:15,379 --> 00:08:20,219
Amazon has about like five or six

226
00:08:18,389 --> 00:08:22,379
different ways to be authenticated to an

227
00:08:20,219 --> 00:08:23,879
AWS account all of which are fairly

228
00:08:22,379 --> 00:08:25,830
complicated and come with some like

229
00:08:23,879 --> 00:08:27,960
interesting conditions attached to them

230
00:08:25,830 --> 00:08:29,818
so there is literally an entire like

231
00:08:27,960 --> 00:08:32,490
three page doc about how to interpret

232
00:08:29,819 --> 00:08:34,380
this user identity field and if you care

233
00:08:32,490 --> 00:08:36,329
a lot about AWS security you should go

234
00:08:34,380 --> 00:08:38,219
read it it's made several things more

235
00:08:36,328 --> 00:08:40,968
clear to me but it's much too long to

236
00:08:38,219 --> 00:08:40,969
talk about right now

237
00:08:41,279 --> 00:08:45,269
cloud trial Doc's are pretty confusing

238
00:08:43,409 --> 00:08:46,890
and not that straightforward but in real

239
00:08:45,269 --> 00:08:48,060
talk I understand that I'm like spending

240
00:08:46,890 --> 00:08:50,670
a bunch of time harping on a team that

241
00:08:48,060 --> 00:08:52,530
is a team of making real humans and I

242
00:08:50,670 --> 00:08:53,969
want like AWS people if they see

243
00:08:52,530 --> 00:08:55,410
this to know that I don't actually just

244
00:08:53,970 --> 00:08:57,090
all hate them and I have a tremendous

245
00:08:55,410 --> 00:09:00,530
amount of respect for what they do I

246
00:08:57,090 --> 00:09:03,540
just think they could do slightly better

247
00:09:00,530 --> 00:09:04,560
so we've talked about cloud trail which

248
00:09:03,540 --> 00:09:06,540
is the source of where we're gonna get

249
00:09:04,560 --> 00:09:07,589
the security data from Amazon now we're

250
00:09:06,540 --> 00:09:09,150
going to talk a little bit about equal

251
00:09:07,590 --> 00:09:12,150
which is how we run a query that data

252
00:09:09,150 --> 00:09:14,430
and constructs rules so equal is a query

253
00:09:12,150 --> 00:09:15,930
language for JSON like data and what

254
00:09:14,430 --> 00:09:18,900
this really means is that equal runs

255
00:09:15,930 --> 00:09:20,849
over data that you don't know the schema

256
00:09:18,900 --> 00:09:22,260
of in advance and as we talked about

257
00:09:20,850 --> 00:09:24,720
right there's all these fields and

258
00:09:22,260 --> 00:09:27,480
events that get defined per event type

259
00:09:24,720 --> 00:09:29,250
and are not predefined so this is what

260
00:09:27,480 --> 00:09:31,800
equal really starts to shine through and

261
00:09:29,250 --> 00:09:33,900
show its power up it's primarily used

262
00:09:31,800 --> 00:09:36,599
for security rules and analytics we use

263
00:09:33,900 --> 00:09:38,280
it in game product for instance but it's

264
00:09:36,600 --> 00:09:39,900
totally open source and you can go use

265
00:09:38,280 --> 00:09:42,000
it yourself on an e JSON like data you

266
00:09:39,900 --> 00:09:44,040
want that's actually how I'm using it I

267
00:09:42,000 --> 00:09:47,610
don't have any secret inside package or

268
00:09:44,040 --> 00:09:48,990
anything it's got a bunch of really

269
00:09:47,610 --> 00:09:51,210
useful features that you may not expect

270
00:09:48,990 --> 00:09:53,970
one of which I like to explicitly call

271
00:09:51,210 --> 00:09:55,890
out is actually sequences will maybe see

272
00:09:53,970 --> 00:09:57,900
an example later depending on how fast I

273
00:09:55,890 --> 00:09:59,310
go but sequences allow you to do this

274
00:09:57,900 --> 00:10:01,470
cool thing that if you have a collection

275
00:09:59,310 --> 00:10:04,050
of events in order you can actually go

276
00:10:01,470 --> 00:10:05,880
and say hey I'm looking for a series of

277
00:10:04,050 --> 00:10:07,589
events that happened maybe someone

278
00:10:05,880 --> 00:10:09,360
turning off some security controls for

279
00:10:07,589 --> 00:10:11,130
instance and then doing something

280
00:10:09,360 --> 00:10:13,020
against that object that the security

281
00:10:11,130 --> 00:10:14,970
controls would have prevented each of

282
00:10:13,020 --> 00:10:17,069
those in isolation may not be suspicious

283
00:10:14,970 --> 00:10:18,480
but if one user account does them

284
00:10:17,070 --> 00:10:20,040
immediately back to back in ten minutes

285
00:10:18,480 --> 00:10:21,300
oh boy

286
00:10:20,040 --> 00:10:22,890
someone should probably go look at that

287
00:10:21,300 --> 00:10:23,969
I don't know if someone had the reason

288
00:10:22,890 --> 00:10:27,900
to do that but it's at least worth

289
00:10:23,970 --> 00:10:29,880
looking into so really quick let's kind

290
00:10:27,900 --> 00:10:33,030
of talk about an equal rule as they look

291
00:10:29,880 --> 00:10:34,470
for like normal security analytics this

292
00:10:33,030 --> 00:10:36,540
is a process rule where we have a

293
00:10:34,470 --> 00:10:37,950
subtype create and you can see this is

294
00:10:36,540 --> 00:10:40,980
basically just a rule looking for

295
00:10:37,950 --> 00:10:42,660
someone running reg C and then looking

296
00:10:40,980 --> 00:10:44,880
for several command-line arguments on

297
00:10:42,660 --> 00:10:46,829
there this is about as basic as it comes

298
00:10:44,880 --> 00:10:47,850
it's pretty easy to write and it conveys

299
00:10:46,830 --> 00:10:49,320
kind of the structure of the language

300
00:10:47,850 --> 00:10:50,970
equal has all the things you would

301
00:10:49,320 --> 00:10:51,450
expect a normal query language to have

302
00:10:50,970 --> 00:10:53,850
right

303
00:10:51,450 --> 00:10:56,460
it has equals equals ands ORS and all

304
00:10:53,850 --> 00:10:57,690
that it has recursive or researches and

305
00:10:56,460 --> 00:11:00,150
that sort of stuff which will kind of

306
00:10:57,690 --> 00:11:01,709
get to later but it's very easy you can

307
00:11:00,150 --> 00:11:03,660
pick this up in five minutes nothing is

308
00:11:01,709 --> 00:11:05,699
very complicated about it there's a very

309
00:11:03,660 --> 00:11:07,319
nice document online that one of my code

310
00:11:05,699 --> 00:11:10,679
workers maintains that has all of the

311
00:11:07,319 --> 00:11:12,599
kind of the overview of this language so

312
00:11:10,679 --> 00:11:15,179
we're gonna now quickly break for a

313
00:11:12,600 --> 00:11:19,579
short demo because I fear the demo gods

314
00:11:15,179 --> 00:11:21,899
a bunch and didn't want to tempt them so

315
00:11:19,579 --> 00:11:24,299
really quick let's kind of talk before

316
00:11:21,899 --> 00:11:26,910
we kind of launch into this equal has

317
00:11:24,299 --> 00:11:29,519
basically two parts to how it works part

318
00:11:26,910 --> 00:11:30,749
one is every time a cloud trail log file

319
00:11:29,519 --> 00:11:33,449
gets dumped in this bucket that we

320
00:11:30,749 --> 00:11:36,449
talked about earlier equal gets an event

321
00:11:33,449 --> 00:11:38,790
from cloud from s3 and launches a lambda

322
00:11:36,449 --> 00:11:40,949
where it goes ahead and pulls down all

323
00:11:38,790 --> 00:11:43,290
of the files that it may want to look at

324
00:11:40,949 --> 00:11:45,868
recently so we search back about 60

325
00:11:43,290 --> 00:11:47,699
minutes to two hours the reason we do

326
00:11:45,869 --> 00:11:49,829
this is for those sequences I mentioned

327
00:11:47,699 --> 00:11:51,329
so that like the amount of time you want

328
00:11:49,829 --> 00:11:53,099
to look back is how long you can

329
00:11:51,329 --> 00:11:55,229
construct a sequence right if you're not

330
00:11:53,100 --> 00:11:57,329
looking for three hours back if you have

331
00:11:55,230 --> 00:11:58,679
a sequence that happens you know four

332
00:11:57,329 --> 00:12:00,988
and three hours back and then in an hour

333
00:11:58,679 --> 00:12:03,419
it won't pick it up the other part is

334
00:12:00,989 --> 00:12:05,579
this web interface um I think the user

335
00:12:03,419 --> 00:12:07,169
interface is pretty important in most

336
00:12:05,579 --> 00:12:08,729
security products it should be nice to

337
00:12:07,169 --> 00:12:10,199
use it should be simple to use you

338
00:12:08,730 --> 00:12:12,839
should understand what you're looking at

339
00:12:10,199 --> 00:12:14,910
very clearly Mara is intentionally

340
00:12:12,839 --> 00:12:16,619
pretty minimalist and that's because I

341
00:12:14,910 --> 00:12:18,629
have to stare at it a couple times a day

342
00:12:16,619 --> 00:12:20,009
and I don't want to have to click 17,000

343
00:12:18,629 --> 00:12:23,459
buttons every time I try and do

344
00:12:20,009 --> 00:12:25,259
something so what we're looking at here

345
00:12:23,459 --> 00:12:26,998
is this is the web interface for varna

346
00:12:25,259 --> 00:12:28,769
and this is designed to be deployed

347
00:12:26,999 --> 00:12:30,509
however you wanted to play it I'm not

348
00:12:28,769 --> 00:12:32,429
solving your auth problem because there

349
00:12:30,509 --> 00:12:35,999
are 47 thousand ways enterprises off

350
00:12:32,429 --> 00:12:37,289
apps as I've discovered and what we're

351
00:12:35,999 --> 00:12:38,789
looking at here is this is the first

352
00:12:37,289 --> 00:12:41,009
kind of screen of varna that we look at

353
00:12:38,789 --> 00:12:42,209
which is this is the list of rules all

354
00:12:41,009 --> 00:12:44,399
of these are getting released with Farah

355
00:12:42,209 --> 00:12:46,319
as well and i consider most of these to

356
00:12:44,399 --> 00:12:48,419
be very suspicious right if these are

357
00:12:46,319 --> 00:12:50,878
happening if someone is making new users

358
00:12:48,419 --> 00:12:54,149
in your account if someone is logging in

359
00:12:50,879 --> 00:12:55,799
his root root is a I am user that you

360
00:12:54,149 --> 00:12:57,059
basically can't get rid of any of the

361
00:12:55,799 --> 00:12:58,949
permissions from and so is very

362
00:12:57,059 --> 00:13:02,129
dangerous in AWS permissions it's

363
00:12:58,949 --> 00:13:03,419
exactly like it works on Linux those are

364
00:13:02,129 --> 00:13:04,799
all kind of suspicious things and you

365
00:13:03,419 --> 00:13:06,509
should know about them so we think this

366
00:13:04,799 --> 00:13:09,059
is pretty good like set of core checks

367
00:13:06,509 --> 00:13:11,309
that'll get you some of the stuff and

368
00:13:09,059 --> 00:13:13,259
you can scroll through and you can copy

369
00:13:11,309 --> 00:13:15,350
and paste any of these rules we'll see

370
00:13:13,259 --> 00:13:17,879
why that's kind of important in a second

371
00:13:15,350 --> 00:13:18,860
this is the list of alerts so this is a

372
00:13:17,879 --> 00:13:20,990
list of every reason

373
00:13:18,860 --> 00:13:22,520
that's fired and you can see we're

374
00:13:20,990 --> 00:13:24,560
looking right now through an alert and

375
00:13:22,520 --> 00:13:26,180
this is actually triggered off of the

376
00:13:24,560 --> 00:13:28,280
authorized security group rule I showed

377
00:13:26,180 --> 00:13:30,020
you and we'll talk about that a little

378
00:13:28,280 --> 00:13:31,790
bit later but basically tells you when

379
00:13:30,020 --> 00:13:34,460
someone tries to make your security

380
00:13:31,790 --> 00:13:35,630
group open to the world and so what you

381
00:13:34,460 --> 00:13:37,250
can see is you can scroll through and

382
00:13:35,630 --> 00:13:39,020
look at all these alerts like you would

383
00:13:37,250 --> 00:13:41,750
normally these are the full details of

384
00:13:39,020 --> 00:13:43,520
the cloud trail alerts except they also

385
00:13:41,750 --> 00:13:45,020
include some Barnette specific metadata

386
00:13:43,520 --> 00:13:48,350
fields you may find interesting or

387
00:13:45,020 --> 00:13:52,460
useful you can also click to see only

388
00:13:48,350 --> 00:13:54,230
unacknowledged alerts so in varna there

389
00:13:52,460 --> 00:13:56,720
is kind of the system of acknowledging

390
00:13:54,230 --> 00:13:59,200
alerts which we'll see so you'll see we

391
00:13:56,720 --> 00:14:01,250
just marked that alert is acknowledged

392
00:13:59,200 --> 00:14:03,170
varna is a monitoring tool it's a

393
00:14:01,250 --> 00:14:04,760
visibility tool and so inevitably

394
00:14:03,170 --> 00:14:06,290
they're going to be false positives

395
00:14:04,760 --> 00:14:08,300
right somebody is going to have to login

396
00:14:06,290 --> 00:14:09,530
a couple months ago I had to log in with

397
00:14:08,300 --> 00:14:10,939
the root account to fix an IM

398
00:14:09,530 --> 00:14:13,010
permissions issue that I accidentally

399
00:14:10,940 --> 00:14:15,410
screwed up right that's a normal thing

400
00:14:13,010 --> 00:14:17,300
right and you will as administrators or

401
00:14:15,410 --> 00:14:19,160
as security personnel as always probably

402
00:14:17,300 --> 00:14:22,640
trip the same rules that you set up to

403
00:14:19,160 --> 00:14:24,800
detect anomalous action so the

404
00:14:22,640 --> 00:14:28,250
acknowledge system is more so away when

405
00:14:24,800 --> 00:14:29,990
rules get either emailed to you or sorry

406
00:14:28,250 --> 00:14:32,450
alerts get either emailed or slack to

407
00:14:29,990 --> 00:14:34,220
you they'll also include a link to

408
00:14:32,450 --> 00:14:36,080
acknowledge them and basically the way

409
00:14:34,220 --> 00:14:38,690
this operates for us and I can't tell

410
00:14:36,080 --> 00:14:40,640
you how to run your team is that we have

411
00:14:38,690 --> 00:14:42,950
a slack channel that all of our people

412
00:14:40,640 --> 00:14:44,390
sit in and when one of these alerts pops

413
00:14:42,950 --> 00:14:46,010
up we can kind of quickly go around the

414
00:14:44,390 --> 00:14:48,080
room and say like hey was this any of us

415
00:14:46,010 --> 00:14:50,030
if so click the acknowledge button if

416
00:14:48,080 --> 00:14:52,430
not oopsies that's bad you should go

417
00:14:50,030 --> 00:14:55,610
figure out in practice this is like the

418
00:14:52,430 --> 00:14:57,650
minimal flow I find to successfully kind

419
00:14:55,610 --> 00:15:00,380
of curate these alerts in varna actually

420
00:14:57,650 --> 00:15:02,540
also includes a cron job so it'll remind

421
00:15:00,380 --> 00:15:04,250
you once a morning or whatever you set

422
00:15:02,540 --> 00:15:06,380
it because you can control how often it

423
00:15:04,250 --> 00:15:08,240
does - like hey you have 15

424
00:15:06,380 --> 00:15:09,830
unacknowledged alerts and it'll take you

425
00:15:08,240 --> 00:15:11,240
to this unacknowledged alert page so

426
00:15:09,830 --> 00:15:15,890
that you can look through them and like

427
00:15:11,240 --> 00:15:18,560
acknowledge them Marnell also has this

428
00:15:15,890 --> 00:15:22,460
feature that lets you run past searches

429
00:15:18,560 --> 00:15:24,079
in a way with full context so you can go

430
00:15:22,460 --> 00:15:27,350
back as far as you of cloud trail

431
00:15:24,080 --> 00:15:29,210
history to go do searches so right now

432
00:15:27,350 --> 00:15:30,880
we're actually going to do a quick

433
00:15:29,210 --> 00:15:32,530
search and we're going to look

434
00:15:30,880 --> 00:15:34,270
console.log in that i did earlier this

435
00:15:32,530 --> 00:15:35,860
week when I was developing things and

436
00:15:34,270 --> 00:15:37,720
you'll see this is actually going to

437
00:15:35,860 --> 00:15:39,190
take a second my mouse is actually gonna

438
00:15:37,720 --> 00:15:40,900
suspend for a second because this is

439
00:15:39,190 --> 00:15:43,330
actually pulling all the files off of s

440
00:15:40,900 --> 00:15:44,709
3 and then decompressing them and

441
00:15:43,330 --> 00:15:47,050
sorting them and getting them all ready

442
00:15:44,710 --> 00:15:49,330
for you this is why there's kind of a

443
00:15:47,050 --> 00:15:51,729
search limit Suvarna and how far back

444
00:15:49,330 --> 00:15:52,900
you can go in practice the search limit

445
00:15:51,730 --> 00:15:55,690
is how much money you're willing to pay

446
00:15:52,900 --> 00:15:57,610
Amazon for and lambda runtime in

447
00:15:55,690 --> 00:15:59,140
practice we figured out it's about three

448
00:15:57,610 --> 00:16:00,880
hours because humans really don't like

449
00:15:59,140 --> 00:16:03,310
to wait for their produce to go longer

450
00:16:00,880 --> 00:16:06,850
than that I have some interesting ideas

451
00:16:03,310 --> 00:16:09,219
about how to make marna do like multiple

452
00:16:06,850 --> 00:16:11,260
day searches and stuff but that's kind

453
00:16:09,220 --> 00:16:12,970
of out of scope and so you'll see I

454
00:16:11,260 --> 00:16:14,560
pulled up this alert I'm not gonna click

455
00:16:12,970 --> 00:16:16,420
on it because that's actually our real

456
00:16:14,560 --> 00:16:18,219
company's data and I can't edit the

457
00:16:16,420 --> 00:16:21,670
database to make that alert not say

458
00:16:18,220 --> 00:16:22,900
private things about us but it's the

459
00:16:21,670 --> 00:16:25,449
same thing as you would expect from the

460
00:16:22,900 --> 00:16:26,770
other alerts page now we're actually

461
00:16:25,450 --> 00:16:28,330
gonna do what kind of weird alert here

462
00:16:26,770 --> 00:16:29,680
one of the things that's kind of cool

463
00:16:28,330 --> 00:16:32,020
about equal that I think doesn't get

464
00:16:29,680 --> 00:16:33,880
talked about enough or isn't talked

465
00:16:32,020 --> 00:16:35,980
about in security tooling enough is how

466
00:16:33,880 --> 00:16:38,590
visibility and exploring your data works

467
00:16:35,980 --> 00:16:40,480
so right here one of the first questions

468
00:16:38,590 --> 00:16:42,430
that anyone asks about cloud trail when

469
00:16:40,480 --> 00:16:45,070
they get access to it is like what is

470
00:16:42,430 --> 00:16:46,959
happening there are thousands - you know

471
00:16:45,070 --> 00:16:48,670
tens of thousands of cloud trail events

472
00:16:46,960 --> 00:16:50,320
for every 5 or 10 minute period that

473
00:16:48,670 --> 00:16:53,709
you're looking at it is just an

474
00:16:50,320 --> 00:16:55,060
unbelievable deluge of data and so we're

475
00:16:53,710 --> 00:16:57,070
gonna show you a query right now that

476
00:16:55,060 --> 00:16:58,839
equal allows us to run and then Barnett

477
00:16:57,070 --> 00:17:00,490
handles for us intelligently where we're

478
00:16:58,840 --> 00:17:02,110
gonna say hey I want every event that

479
00:17:00,490 --> 00:17:05,620
has an event name which is all of them

480
00:17:02,110 --> 00:17:07,750
and I want to know a count of what event

481
00:17:05,619 --> 00:17:09,760
name that was so what you're gonna see

482
00:17:07,750 --> 00:17:11,530
here is we're gonna wait again this is

483
00:17:09,760 --> 00:17:13,839
all being done real time and I didn't

484
00:17:11,530 --> 00:17:17,050
edit this video which I probably should

485
00:17:13,839 --> 00:17:18,429
have but seemed disingenuous but what

486
00:17:17,050 --> 00:17:20,530
you're gonna see here is that varna is

487
00:17:18,430 --> 00:17:22,780
going to pull up all of these results

488
00:17:20,530 --> 00:17:25,060
for us and so you can see in that 30

489
00:17:22,780 --> 00:17:27,369
minute period we were requiring two

490
00:17:25,060 --> 00:17:30,010
people asked to create a log stream one

491
00:17:27,369 --> 00:17:31,419
person has to discover an endpoint 6

492
00:17:30,010 --> 00:17:32,890
times we call the describe container

493
00:17:31,420 --> 00:17:34,630
instance rate all of these are fairly

494
00:17:32,890 --> 00:17:36,520
normal things but they're very useful

495
00:17:34,630 --> 00:17:38,350
for starting to get kind of a picture of

496
00:17:36,520 --> 00:17:41,050
what is happening in your account right

497
00:17:38,350 --> 00:17:41,580
we know why all of these things are

498
00:17:41,050 --> 00:17:43,020
happening

499
00:17:41,580 --> 00:17:44,490
our account right we've gone through and

500
00:17:43,020 --> 00:17:46,770
we've done the checks and said like okay

501
00:17:44,490 --> 00:17:48,870
when we monitor this thing it causes

502
00:17:46,770 --> 00:17:50,910
these alerts in the backend it's very

503
00:17:48,870 --> 00:17:52,229
useful to kind of take a large approach

504
00:17:50,910 --> 00:17:54,390
to this rate if something's happening

505
00:17:52,230 --> 00:17:56,280
2,000 times in your account you should

506
00:17:54,390 --> 00:17:59,430
probably know why that's happening to

507
00:17:56,280 --> 00:18:05,639
some extent all right I think this is

508
00:17:59,430 --> 00:18:07,110
the end of the video yep ah all right so

509
00:18:05,640 --> 00:18:11,400
let's talk a little bit about the costs

510
00:18:07,110 --> 00:18:14,070
of mark so varna is kind of hard to cost

511
00:18:11,400 --> 00:18:16,110
because AWS I swear to god makes this

512
00:18:14,070 --> 00:18:18,330
purposely hard to tell how much anything

513
00:18:16,110 --> 00:18:21,240
costs and there's about a half a dozen

514
00:18:18,330 --> 00:18:23,010
nickel-and-dime charges but is best less

515
00:18:21,240 --> 00:18:24,390
I can tell we've read it in prod I've

516
00:18:23,010 --> 00:18:26,100
done some like rough benchmarking I've

517
00:18:24,390 --> 00:18:28,890
insulted another account just like a

518
00:18:26,100 --> 00:18:31,320
naked account to run it can run as low

519
00:18:28,890 --> 00:18:33,150
as five bucks a month or in the

520
00:18:31,320 --> 00:18:34,950
configuration we run it in and that I

521
00:18:33,150 --> 00:18:36,780
recommend you run it in it's about

522
00:18:34,950 --> 00:18:40,380
fifteen dollars it's a little bit less

523
00:18:36,780 --> 00:18:43,320
than that it's a one 9mo DB table and an

524
00:18:40,380 --> 00:18:45,480
index and it's some lambda and s3 and

525
00:18:43,320 --> 00:18:46,649
that's actually how it all runs and I

526
00:18:45,480 --> 00:18:48,540
would like to point out because one of

527
00:18:46,650 --> 00:18:50,940
my co-workers them made me say this

528
00:18:48,540 --> 00:18:52,470
it's serverless and so really you're

529
00:18:50,940 --> 00:18:54,540
paying Amazon to use their servers but

530
00:18:52,470 --> 00:18:56,070
there isn't any maintenance you have to

531
00:18:54,540 --> 00:18:57,659
do about a box or anything right you

532
00:18:56,070 --> 00:18:59,610
don't have to patch an operating system

533
00:18:57,660 --> 00:19:02,040
the whole idea is that this is really

534
00:18:59,610 --> 00:19:04,139
easy to kind of attach into your AWS

535
00:19:02,040 --> 00:19:06,180
account and have it run all the time for

536
00:19:04,140 --> 00:19:11,640
very low cost with very low friction and

537
00:19:06,180 --> 00:19:14,190
it's an easy tool to use Varna makes

538
00:19:11,640 --> 00:19:15,810
some unusual best practice choices and

539
00:19:14,190 --> 00:19:17,910
that's part of that's because I come

540
00:19:15,810 --> 00:19:19,740
from a very software oriented team we

541
00:19:17,910 --> 00:19:20,910
write a lot of software but it's also

542
00:19:19,740 --> 00:19:22,560
because I think some things about

543
00:19:20,910 --> 00:19:24,210
security that I'd like to hopefully

544
00:19:22,560 --> 00:19:24,929
convey with you when you use this tool

545
00:19:24,210 --> 00:19:26,910
ah

546
00:19:24,930 --> 00:19:28,860
I think version control for a lot of

547
00:19:26,910 --> 00:19:31,440
security settings is very important

548
00:19:28,860 --> 00:19:33,479
because often times knowing when rules

549
00:19:31,440 --> 00:19:35,100
or settings were modified for security

550
00:19:33,480 --> 00:19:37,140
tools is very important because it

551
00:19:35,100 --> 00:19:40,409
changes when you can observe and what

552
00:19:37,140 --> 00:19:42,540
you can see so we keep this all in get

553
00:19:40,410 --> 00:19:44,400
including our rules we keep our rules in

554
00:19:42,540 --> 00:19:47,430
a subdirectory on a sub repo that we

555
00:19:44,400 --> 00:19:49,800
install in and then ideally you want to

556
00:19:47,430 --> 00:19:52,260
update this VI CDI CD so you have a

557
00:19:49,800 --> 00:19:54,530
github account or a get lab or whatever

558
00:19:52,260 --> 00:19:57,050
did host the choice you use

559
00:19:54,530 --> 00:19:58,550
you commit basically all of that into

560
00:19:57,050 --> 00:20:00,620
here and then when you're when you're

561
00:19:58,550 --> 00:20:02,389
see ICD notices changes it picks them up

562
00:20:00,620 --> 00:20:05,449
bundles them up and deploys them out to

563
00:20:02,390 --> 00:20:07,550
prod for you this allows you to always

564
00:20:05,450 --> 00:20:10,400
have kind of a time in record of like

565
00:20:07,550 --> 00:20:14,360
hey you know John went in and modified

566
00:20:10,400 --> 00:20:16,250
the no MF a check to exclude this user

567
00:20:14,360 --> 00:20:19,280
because they can't use MF a I don't know

568
00:20:16,250 --> 00:20:21,050
why that is but hypothetical and it

569
00:20:19,280 --> 00:20:22,850
allows you to also write really good

570
00:20:21,050 --> 00:20:25,760
commit messages and have very good

571
00:20:22,850 --> 00:20:27,830
documentation part of git or any like C

572
00:20:25,760 --> 00:20:29,450
ICD kind of version control paradigm

573
00:20:27,830 --> 00:20:31,340
you're using is that you can have a

574
00:20:29,450 --> 00:20:33,590
modified log here and so you can go back

575
00:20:31,340 --> 00:20:35,389
and say like hey we last modified this

576
00:20:33,590 --> 00:20:37,909
rule for this reason and that's why it

577
00:20:35,390 --> 00:20:40,490
happened one other thing I just like

578
00:20:37,910 --> 00:20:42,560
didn't kind of fit naturally varna is

579
00:20:40,490 --> 00:20:45,530
designed to have a pretty low level of

580
00:20:42,560 --> 00:20:49,370
alerts right it emails people and slacks

581
00:20:45,530 --> 00:20:52,040
people when it sees things and people

582
00:20:49,370 --> 00:20:53,689
hate alerts like viscerally so varna is

583
00:20:52,040 --> 00:20:55,639
pretty designed around the idea that you

584
00:20:53,690 --> 00:20:58,070
should have maybe less than one alert a

585
00:20:55,640 --> 00:20:59,840
day firing we guard against things that

586
00:20:58,070 --> 00:21:01,909
we think attackers are going to do as

587
00:20:59,840 --> 00:21:03,530
like course when they get into an

588
00:21:01,910 --> 00:21:06,260
account that looks very suspicious to

589
00:21:03,530 --> 00:21:08,360
defenders but we don't try and alert on

590
00:21:06,260 --> 00:21:11,030
like things that would spam tens or

591
00:21:08,360 --> 00:21:12,679
dozens of a you know per day because

592
00:21:11,030 --> 00:21:13,310
people don't want to acknowledge that

593
00:21:12,680 --> 00:21:15,170
many alerts

594
00:21:13,310 --> 00:21:18,649
our production of aren't instance I

595
00:21:15,170 --> 00:21:20,390
think probably spits out maybe five

596
00:21:18,650 --> 00:21:22,160
alerts a month or something it's pretty

597
00:21:20,390 --> 00:21:23,540
low traffic and that's the way we kind

598
00:21:22,160 --> 00:21:24,830
of like it it's not supposed to be a

599
00:21:23,540 --> 00:21:26,480
thing that we have to check every day

600
00:21:24,830 --> 00:21:29,659
and Congrats I didn't touch my laptop

601
00:21:26,480 --> 00:21:33,940
long enough and so you need to basically

602
00:21:29,660 --> 00:21:36,380
tune it to have pretty low alert fatigue

603
00:21:33,940 --> 00:21:37,790
so let's talk about some of those equal

604
00:21:36,380 --> 00:21:39,890
analytics that we're dropping with Lorna

605
00:21:37,790 --> 00:21:43,100
because I like talking about cloud trail

606
00:21:39,890 --> 00:21:44,750
stuff so here's one and this is the

607
00:21:43,100 --> 00:21:46,760
simplest rule you could possibly make

608
00:21:44,750 --> 00:21:48,710
and if I could convince you to do one

609
00:21:46,760 --> 00:21:50,330
thing in your AWS account today it's

610
00:21:48,710 --> 00:21:53,750
probably that you should run this rule

611
00:21:50,330 --> 00:21:55,010
in varna root accounts an AWS are really

612
00:21:53,750 --> 00:21:57,080
bad security paradigm if you're

613
00:21:55,010 --> 00:21:58,790
depending on them it's very hard to

614
00:21:57,080 --> 00:22:02,060
limit their access it's very hard to

615
00:21:58,790 --> 00:22:04,250
like track or make them observable and

616
00:22:02,060 --> 00:22:06,200
so we just alert on everybody who logs

617
00:22:04,250 --> 00:22:08,420
in is room it should never happen all of

618
00:22:06,200 --> 00:22:09,800
our people have you know sam'l or other

619
00:22:08,420 --> 00:22:13,460
means of getting into the account with

620
00:22:09,800 --> 00:22:15,350
better credentials secure better secure

621
00:22:13,460 --> 00:22:17,090
credentials and so we just basically

622
00:22:15,350 --> 00:22:21,980
bury our root things in a box under a

623
00:22:17,090 --> 00:22:23,540
bed so here is the bucket login check

624
00:22:21,980 --> 00:22:24,679
which is actually wrong they're supposed

625
00:22:23,540 --> 00:22:26,178
to be not in front of that request

626
00:22:24,679 --> 00:22:28,820
parameters that's what I get for copying

627
00:22:26,179 --> 00:22:30,530
this late at night and basically what

628
00:22:28,820 --> 00:22:33,320
this rule does is it's very simple it

629
00:22:30,530 --> 00:22:34,940
says hey if we're putting a bucket login

630
00:22:33,320 --> 00:22:36,830
configuration together we should make

631
00:22:34,940 --> 00:22:38,990
sure that it's enabled we never want

632
00:22:36,830 --> 00:22:41,030
certain of our buckets to have logging

633
00:22:38,990 --> 00:22:42,650
that it gets turned off and so this lets

634
00:22:41,030 --> 00:22:44,600
us know if somebody goes into s3 either

635
00:22:42,650 --> 00:22:47,179
the console or the API and turns off the

636
00:22:44,600 --> 00:22:50,300
bucket logging that just pops us right

637
00:22:47,179 --> 00:22:51,830
away um like I was saying this is sort

638
00:22:50,300 --> 00:22:53,510
of an example of how you can see how

639
00:22:51,830 --> 00:22:56,178
request parameters has weird key

640
00:22:53,510 --> 00:22:57,740
structure the way you tell this is that

641
00:22:56,179 --> 00:22:59,720
there's a bucket logging status and then

642
00:22:57,740 --> 00:23:01,490
logging enabled there is no consistency

643
00:22:59,720 --> 00:23:04,010
to this you can have calls that touch

644
00:23:01,490 --> 00:23:06,290
the same sort of base primitive in AWS

645
00:23:04,010 --> 00:23:09,679
and they will use differences I'm sorry

646
00:23:06,290 --> 00:23:11,928
I wish I could help you there here's

647
00:23:09,679 --> 00:23:14,240
probably a good rule to demonstrate some

648
00:23:11,929 --> 00:23:16,010
of the flexibility of varna and equal

649
00:23:14,240 --> 00:23:17,750
and show you how you can kind of dig

650
00:23:16,010 --> 00:23:20,330
into these very complicated JSON

651
00:23:17,750 --> 00:23:22,370
structures so security group updates are

652
00:23:20,330 --> 00:23:24,830
actually kind of a really gnarly mess

653
00:23:22,370 --> 00:23:27,050
and basically how they work is there's

654
00:23:24,830 --> 00:23:29,060
an array of IP permissions that get

655
00:23:27,050 --> 00:23:31,550
shipped to you and then inside that

656
00:23:29,060 --> 00:23:33,440
array of IP permissions there's also an

657
00:23:31,550 --> 00:23:34,490
array of IP ranges so we have to search

658
00:23:33,440 --> 00:23:36,410
through this like complicated

659
00:23:34,490 --> 00:23:38,480
multi-level structure to construct this

660
00:23:36,410 --> 00:23:41,090
rule right it still only took me about

661
00:23:38,480 --> 00:23:42,800
ten minutes and basically what this rule

662
00:23:41,090 --> 00:23:44,659
does is it says hey every time there's

663
00:23:42,800 --> 00:23:46,639
an IP permission change for a security

664
00:23:44,660 --> 00:23:49,940
group we want to check if the protocol

665
00:23:46,640 --> 00:23:51,650
is TCP if the port is 22 and if one of

666
00:23:49,940 --> 00:23:53,810
the ranges is its changing is the whole

667
00:23:51,650 --> 00:23:56,150
world and basically this is because

668
00:23:53,810 --> 00:23:58,159
people really like to pop into AWS

669
00:23:56,150 --> 00:24:01,400
accounts and they really like to enable

670
00:23:58,160 --> 00:24:03,260
literally everything in the world for

671
00:24:01,400 --> 00:24:06,500
security groups so that they can get to

672
00:24:03,260 --> 00:24:08,929
them from other places warning varna is

673
00:24:06,500 --> 00:24:10,130
beta we use this in production you

674
00:24:08,929 --> 00:24:12,140
should use your head and like actually

675
00:24:10,130 --> 00:24:14,450
look at it and like understand what it's

676
00:24:12,140 --> 00:24:16,190
doing before you do so there will be

677
00:24:14,450 --> 00:24:17,929
bugs a bunch of this code actually

678
00:24:16,190 --> 00:24:19,700
changed within the last two weeks

679
00:24:17,929 --> 00:24:20,870
because I was releasing it and I had

680
00:24:19,700 --> 00:24:23,330
code Jam and so I fixed

681
00:24:20,870 --> 00:24:24,979
it up for you all but if there bugs you

682
00:24:23,330 --> 00:24:27,230
can DM ear there's a github issues

683
00:24:24,980 --> 00:24:29,030
tracker and we'll get them fixed out

684
00:24:27,230 --> 00:24:33,500
look at the rules make sure they work

685
00:24:29,030 --> 00:24:34,910
for you if you have work that's you want

686
00:24:33,500 --> 00:24:37,160
to see in varna that you really want

687
00:24:34,910 --> 00:24:39,080
we're pretty happy it's pretty stable

688
00:24:37,160 --> 00:24:40,850
and self-contained for us but I'd love

689
00:24:39,080 --> 00:24:43,240
to talk to people know how they want to

690
00:24:40,850 --> 00:24:43,240
extend it

