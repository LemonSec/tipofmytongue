1
00:00:00,030 --> 00:00:12,740
with no<font color="#CCCCCC"> visual aids</font><font color="#E5E5E5"> how's that something</font>

2
00:00:02,090 --> 00:00:12,740
<font color="#E5E5E5">no this is this is</font><font color="#CCCCCC"> a code flow graph</font><font color="#E5E5E5"> so</font>

3
00:00:15,410 --> 00:00:21,270
<font color="#CCCCCC">welcome my name is</font><font color="#E5E5E5"> Atlas I have been</font>

4
00:00:19,020 --> 00:00:21,810
here for<font color="#E5E5E5"> well since the beginning</font><font color="#CCCCCC"> of</font>

5
00:00:21,270 --> 00:00:24,198
gherkin

6
00:00:21,810 --> 00:00:26,759
I love gherkin I even<font color="#CCCCCC"> wore the t-shirt</font>

7
00:00:24,199 --> 00:00:29,580
<font color="#CCCCCC">Chris</font><font color="#E5E5E5"> thought that I wasn't sporting</font>

8
00:00:26,760 --> 00:00:35,100
enough though so I went for the the head

9
00:00:29,580 --> 00:00:39,000
gasket here little<font color="#E5E5E5"> bit about me I've</font>

10
00:00:35,100 --> 00:00:41,879
been I've<font color="#CCCCCC"> been very very</font><font color="#E5E5E5"> fortunate</font><font color="#CCCCCC"> I've</font>

11
00:00:39,000 --> 00:00:44,370
had a good career<font color="#CCCCCC"> path dragged me</font>

12
00:00:41,879 --> 00:00:46,019
through<font color="#CCCCCC"> I don't know you told me</font><font color="#E5E5E5"> to tell</font>

13
00:00:44,370 --> 00:00:51,000
<font color="#E5E5E5">you when I</font><font color="#CCCCCC"> was ready</font><font color="#E5E5E5"> to start whoever's</font>

14
00:00:46,020 --> 00:00:53,730
recording<font color="#CCCCCC"> okay oh</font><font color="#E5E5E5"> good all right so a</font>

15
00:00:51,000 --> 00:00:55,379
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> about me</font><font color="#CCCCCC"> I got my start</font>

16
00:00:53,730 --> 00:00:59,309
professionally breaking out<font color="#CCCCCC"> of vmware</font>

17
00:00:55,379 --> 00:01:04,470
<font color="#E5E5E5">and then from there</font><font color="#CCCCCC"> breaking out into</font>

18
00:00:59,309 --> 00:01:08,000
power meters and power systems I've been

19
00:01:04,470 --> 00:01:11,460
doing<font color="#E5E5E5"> programmatic disassembly and</font>

20
00:01:08,000 --> 00:01:13,770
<font color="#E5E5E5">debugging blurring the lines between</font>

21
00:01:11,460 --> 00:01:14,039
static<font color="#E5E5E5"> and</font><font color="#CCCCCC"> dynamic analysis</font><font color="#E5E5E5"> for about 13</font>

22
00:01:13,770 --> 00:01:19,798
years

23
00:01:14,040 --> 00:01:21,840
<font color="#CCCCCC">I love honestly this</font><font color="#E5E5E5"> everybody has their</font>

24
00:01:19,799 --> 00:01:23,700
own thing<font color="#CCCCCC"> right and what</font><font color="#E5E5E5"> gets you up in</font>

25
00:01:21,840 --> 00:01:26,670
<font color="#E5E5E5">the</font><font color="#CCCCCC"> morning what what makes you feel</font>

26
00:01:23,700 --> 00:01:30,479
<font color="#E5E5E5">like you're in</font><font color="#CCCCCC"> your groove doing things</font>

27
00:01:26,670 --> 00:01:32,210
your<font color="#CCCCCC"> way and</font><font color="#E5E5E5"> being powerful most of you</font>

28
00:01:30,479 --> 00:01:39,900
<font color="#CCCCCC">probably know</font><font color="#E5E5E5"> what I'm talking about</font>

29
00:01:32,210 --> 00:01:41,850
for me it's typically<font color="#E5E5E5"> Python command</font>

30
00:01:39,900 --> 00:01:44,340
line<font color="#E5E5E5"> and doing everything from the</font>

31
00:01:41,850 --> 00:01:47,070
Python command line interactive Python

32
00:01:44,340 --> 00:01:52,649
coding copy<font color="#E5E5E5"> and paste into a text file</font>

33
00:01:47,070 --> 00:01:57,320
you're done<font color="#E5E5E5"> so about 13 years</font><font color="#CCCCCC"> ago I got</font>

34
00:01:52,649 --> 00:02:02,189
involved in disassembly<font color="#E5E5E5"> in Python and</font>

35
00:01:57,320 --> 00:02:06,689
very quickly found great power<font color="#E5E5E5"> to</font><font color="#CCCCCC"> walk</font>

36
00:02:02,189 --> 00:02:11,310
<font color="#E5E5E5">through entire paths of code maybe make</font>

37
00:02:06,689 --> 00:02:12,450
some logic reasoning about<font color="#CCCCCC"> the code but</font>

38
00:02:11,310 --> 00:02:17,160
then I've

39
00:02:12,450 --> 00:02:21,149
<font color="#E5E5E5">and emulation so for a very large chunk</font>

40
00:02:17,160 --> 00:02:24,090
<font color="#CCCCCC">of my career that from the command line</font>

41
00:02:21,150 --> 00:02:24,840
disassembly thing grew into from the

42
00:02:24,090 --> 00:02:28,170
<font color="#E5E5E5">command line</font>

43
00:02:24,840 --> 00:02:31,020
emulation<font color="#E5E5E5"> you know most of you when you</font>

44
00:02:28,170 --> 00:02:36,720
<font color="#E5E5E5">think of emulation raise your hands how</font>

45
00:02:31,020 --> 00:02:40,260
many of<font color="#CCCCCC"> you think</font><font color="#E5E5E5"> of name or some sort</font>

46
00:02:36,720 --> 00:02:45,450
of super and<font color="#E5E5E5"> NES emulator or something</font>

47
00:02:40,260 --> 00:02:49,590
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay only</font><font color="#CCCCCC"> a couple of you</font><font color="#E5E5E5"> all</font>

48
00:02:45,450 --> 00:02:53,690
<font color="#E5E5E5">right</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> we get the truth</font><font color="#CCCCCC"> so this is</font>

49
00:02:49,590 --> 00:02:56,459
not<font color="#E5E5E5"> that now I mean it's a</font><font color="#CCCCCC"> very powerful</font>

50
00:02:53,690 --> 00:02:57,840
<font color="#E5E5E5">type of emulation but we'll talk more</font>

51
00:02:56,459 --> 00:03:00,330
about the different options<font color="#E5E5E5"> here in a</font>

52
00:02:57,840 --> 00:03:17,220
<font color="#E5E5E5">minute</font><font color="#CCCCCC"> as soon as I can show you my</font>

53
00:03:00,330 --> 00:03:25,650
slides<font color="#E5E5E5"> if it works</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> with it it</font>

54
00:03:17,220 --> 00:03:31,340
looks good on my side Keep Calm it

55
00:03:25,650 --> 00:03:46,170
worked on my box so<font color="#E5E5E5"> what is emulation</font>

56
00:03:31,340 --> 00:03:47,760
<font color="#CCCCCC">hand anyone you're pretending to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a</font>

57
00:03:46,170 --> 00:03:50,040
chip that<font color="#E5E5E5"> you're not perfect that's</font>

58
00:03:47,760 --> 00:03:52,649
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> where I was</font><font color="#E5E5E5"> heading so what is a</font>

59
00:03:50,040 --> 00:03:54,269
computer<font color="#CCCCCC"> system everything boils down to</font>

60
00:03:52,650 --> 00:03:56,579
<font color="#E5E5E5">the</font><font color="#CCCCCC"> grassroots with me right</font><font color="#E5E5E5"> from</font>

61
00:03:54,269 --> 00:03:58,170
<font color="#E5E5E5">photons and electrons</font><font color="#CCCCCC"> you know now we're</font>

62
00:03:56,579 --> 00:04:06,980
into a chip what is a computer<font color="#E5E5E5"> system</font>

63
00:03:58,170 --> 00:04:11,100
<font color="#E5E5E5">well it's what Vince what was there's a</font>

64
00:04:06,980 --> 00:04:15,328
rock that thinks<font color="#E5E5E5"> indeed Wow we'll have</font>

65
00:04:11,100 --> 00:04:19,200
discussions over<font color="#E5E5E5"> beer later</font><font color="#CCCCCC"> a computer</font>

66
00:04:15,329 --> 00:04:23,760
<font color="#E5E5E5">system is what it is a processor made up</font>

67
00:04:19,200 --> 00:04:26,270
of memory made up of special memory

68
00:04:23,760 --> 00:04:31,880
known as registers

69
00:04:26,270 --> 00:04:34,560
some peripherals<font color="#E5E5E5"> and some ability</font><font color="#CCCCCC"> to</font>

70
00:04:31,880 --> 00:04:37,170
listen<font color="#E5E5E5"> to</font><font color="#CCCCCC"> whatever code needs</font><font color="#E5E5E5"> to be run</font>

71
00:04:34,560 --> 00:04:39,270
<font color="#E5E5E5">and to do it okay so those may major</font>

72
00:04:37,170 --> 00:04:42,000
things so if we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to write an</font>

73
00:04:39,270 --> 00:04:47,159
emulator we're not going to<font color="#E5E5E5"> in here not</font>

74
00:04:42,000 --> 00:04:48,990
enough time if we're gonna write<font color="#CCCCCC"> in an</font>

75
00:04:47,160 --> 00:04:51,330
emulator<font color="#E5E5E5"> what are we gonna do we're</font>

76
00:04:48,990 --> 00:04:55,860
going<font color="#E5E5E5"> to fake out some sort of a memory</font>

77
00:04:51,330 --> 00:04:58,500
map we're going to write code<font color="#CCCCCC"> to</font>

78
00:04:55,860 --> 00:05:03,240
interpret bytes<font color="#E5E5E5"> from that memory map as</font>

79
00:04:58,500 --> 00:05:09,780
code<font color="#E5E5E5"> and further code to do the things</font>

80
00:05:03,240 --> 00:05:11,400
to that<font color="#CCCCCC"> memory map that fake memory that</font>

81
00:05:09,780 --> 00:05:13,530
would have been<font color="#E5E5E5"> done for by another</font>

82
00:05:11,400 --> 00:05:15,870
<font color="#E5E5E5">computer system basically I'm writing in</font>

83
00:05:13,530 --> 00:05:24,210
Python by the way another computer

84
00:05:15,870 --> 00:05:29,880
system why well<font color="#E5E5E5"> because it's fun this</font><font color="#CCCCCC"> is</font>

85
00:05:24,210 --> 00:05:40,400
<font color="#E5E5E5">really a problem so here if I turn this</font>

86
00:05:29,880 --> 00:05:40,400
around<font color="#CCCCCC"> I could</font>

87
00:05:41,420 --> 00:05:46,220
[Laughter]

88
00:05:51,669 --> 00:06:00,340
how many hackers does it take to break

89
00:05:53,780 --> 00:06:00,340
it just<font color="#E5E5E5"> one just one I'm guilty there</font>

90
00:06:02,270 --> 00:06:09,560
[Laughter]

91
00:06:05,110 --> 00:06:12,639
<font color="#E5E5E5">okay so why in Python well because I</font>

92
00:06:09,560 --> 00:06:14,840
said so<font color="#CCCCCC"> and you're here and I'm here so</font>

93
00:06:12,639 --> 00:06:18,620
that's what that's the<font color="#E5E5E5"> answer</font>

94
00:06:14,840 --> 00:06:20,179
I love Python<font color="#E5E5E5"> it just makes me happy</font>

95
00:06:18,620 --> 00:06:22,250
plus I write really<font color="#E5E5E5"> shitty looking code</font>

96
00:06:20,180 --> 00:06:27,020
and Python makes it so<font color="#CCCCCC"> that I had at</font>

97
00:06:22,250 --> 00:06:28,870
least<font color="#E5E5E5"> have</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> formatting so I Python</font>

98
00:06:27,020 --> 00:06:32,990
<font color="#CCCCCC">asthma is one of my closest</font><font color="#E5E5E5"> friends</font>

99
00:06:28,870 --> 00:06:36,110
<font color="#E5E5E5">vivisect</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> vivisect a binary analysis</font>

100
00:06:32,990 --> 00:06:40,669
<font color="#CCCCCC">framework is my tooling of choice for</font>

101
00:06:36,110 --> 00:06:42,979
both disassembly<font color="#CCCCCC"> slash emulation and in</font>

102
00:06:40,669 --> 00:06:47,090
<font color="#E5E5E5">debugging there's a</font><font color="#CCCCCC"> built-in debugger</font>

103
00:06:42,979 --> 00:06:49,250
<font color="#E5E5E5">cross-platform</font><font color="#CCCCCC"> and built-in disassembly</font>

104
00:06:47,090 --> 00:06:50,659
an emulation framework<font color="#E5E5E5"> pure Python</font>

105
00:06:49,250 --> 00:06:52,280
except for the hooks into<font color="#E5E5E5"> the operating</font>

106
00:06:50,659 --> 00:06:58,009
system required for this assembler for

107
00:06:52,280 --> 00:06:59,359
<font color="#E5E5E5">deep debugging and you've probably heard</font>

108
00:06:58,009 --> 00:07:00,590
<font color="#CCCCCC">me</font><font color="#E5E5E5"> tell if you come to my talks you</font>

109
00:06:59,360 --> 00:07:02,360
probably heard me<font color="#CCCCCC"> talk about vivisect</font>

110
00:07:00,590 --> 00:07:03,979
before vivisect

111
00:07:02,360 --> 00:07:06,259
<font color="#E5E5E5">is made up of a</font><font color="#CCCCCC"> bunch of different</font>

112
00:07:03,979 --> 00:07:08,150
components<font color="#CCCCCC"> I've talked about several</font><font color="#E5E5E5"> of</font>

113
00:07:06,259 --> 00:07:11,000
them namely<font color="#CCCCCC"> symbolics probably heard me</font>

114
00:07:08,150 --> 00:07:13,219
talk<font color="#CCCCCC"> about Symbolics before I haven't</font>

115
00:07:11,000 --> 00:07:15,110
talked too much about emulation<font color="#CCCCCC"> Rutley</font>

116
00:07:13,219 --> 00:07:17,150
because by the time<font color="#E5E5E5"> I got</font><font color="#CCCCCC"> really good at</font>

117
00:07:15,110 --> 00:07:18,620
<font color="#E5E5E5">emulation I was under</font><font color="#CCCCCC"> scim bollocks and</font>

118
00:07:17,150 --> 00:07:21,080
I thought oh<font color="#E5E5E5"> my gosh this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> best</font>

119
00:07:18,620 --> 00:07:22,520
<font color="#E5E5E5">thing since sliced bread turns out both</font>

120
00:07:21,080 --> 00:07:24,919
are<font color="#CCCCCC"> very powerful</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> they answer</font>

121
00:07:22,520 --> 00:07:30,198
different problems<font color="#E5E5E5"> so we're going to</font>

122
00:07:24,919 --> 00:07:32,448
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about emulation today</font><font color="#E5E5E5"> and a couple</font>

123
00:07:30,199 --> 00:07:35,360
<font color="#E5E5E5">different types of emulation</font><font color="#CCCCCC"> the first</font>

124
00:07:32,449 --> 00:07:37,909
type of emulation<font color="#E5E5E5"> is real emulation this</font>

125
00:07:35,360 --> 00:07:40,039
is where I create<font color="#CCCCCC"> space for</font><font color="#E5E5E5"> an entire</font>

126
00:07:37,909 --> 00:07:43,940
system<font color="#E5E5E5"> or program</font>

127
00:07:40,039 --> 00:07:47,300
I can<font color="#E5E5E5"> I can mock up a kernel in the</font>

128
00:07:43,940 --> 00:07:51,139
emulator<font color="#E5E5E5"> all I need is the program what</font>

129
00:07:47,300 --> 00:07:53,539
I find myself doing<font color="#E5E5E5"> a lot is mocking up</font>

130
00:07:51,139 --> 00:07:55,820
an embedded computer<font color="#E5E5E5"> system like those</font>

131
00:07:53,539 --> 00:07:58,700
that<font color="#E5E5E5"> run in cars</font>

132
00:07:55,820 --> 00:08:00,440
so I create this<font color="#CCCCCC"> I create this computer</font>

133
00:07:58,700 --> 00:08:02,900
<font color="#E5E5E5">system I start at the reset vector and</font>

134
00:08:00,440 --> 00:08:06,880
then I emulate the code within this

135
00:08:02,900 --> 00:08:12,260
contract these confines of memory and

136
00:08:06,880 --> 00:08:13,640
aside from peripheral access like the

137
00:08:12,260 --> 00:08:15,260
things<font color="#E5E5E5"> that talk to a monitor</font><font color="#CCCCCC"> or the</font>

138
00:08:13,640 --> 00:08:19,070
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that talk to a network adapter or</font>

139
00:08:15,260 --> 00:08:23,360
whatever pretty much an emulator does a

140
00:08:19,070 --> 00:08:25,070
great deal towards mocking up the<font color="#E5E5E5"> system</font>

141
00:08:23,360 --> 00:08:27,110
that<font color="#E5E5E5"> I'm trying to that I'm trying to</font>

142
00:08:25,070 --> 00:08:30,260
<font color="#E5E5E5">test and I don't have to have a running</font>

143
00:08:27,110 --> 00:08:32,150
<font color="#E5E5E5">process for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> thing on an</font>

144
00:08:30,260 --> 00:08:36,919
architecture that's<font color="#E5E5E5"> supposed to</font><font color="#CCCCCC"> run that</font>

145
00:08:32,150 --> 00:08:39,110
<font color="#E5E5E5">thing is does that follow for the</font>

146
00:08:36,919 --> 00:08:41,929
analysis that<font color="#E5E5E5"> I want to do</font><font color="#CCCCCC"> I don't want</font>

147
00:08:39,110 --> 00:08:44,020
to have to actually<font color="#E5E5E5"> go find a PowerPC</font>

148
00:08:41,929 --> 00:08:46,790
chip that<font color="#E5E5E5"> has the right architecture</font>

149
00:08:44,020 --> 00:08:50,569
<font color="#E5E5E5">instruction module because PowerPC oh my</font>

150
00:08:46,790 --> 00:08:53,890
gosh that's<font color="#E5E5E5"> in it's insane</font><font color="#CCCCCC"> I don't want</font>

151
00:08:50,570 --> 00:08:56,600
to have to have the thing have the right

152
00:08:53,890 --> 00:08:59,510
the right memory mapped i/o for the

153
00:08:56,600 --> 00:09:02,150
serial<font color="#E5E5E5"> port or the or the the can bus</font>

154
00:08:59,510 --> 00:09:04,490
adapter<font color="#E5E5E5"> no I don't need that</font><font color="#CCCCCC"> what I want</font>

155
00:09:02,150 --> 00:09:08,360
to do is be able<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> on my laptop</font>

156
00:09:04,490 --> 00:09:10,280
<font color="#CCCCCC">and when it calls out</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a peripheral I</font>

157
00:09:08,360 --> 00:09:12,050
can make it interactive<font color="#CCCCCC"> I can have it</font>

158
00:09:10,280 --> 00:09:14,810
<font color="#E5E5E5">spit out something saying hey I wrote</font>

159
00:09:12,050 --> 00:09:18,560
this<font color="#CCCCCC"> to there you've</font><font color="#E5E5E5"> got to make sense</font>

160
00:09:14,810 --> 00:09:22,430
<font color="#E5E5E5">of it or if it needs information</font><font color="#CCCCCC"> I can</font>

161
00:09:18,560 --> 00:09:28,089
provide it that's<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> full-on</font>

162
00:09:22,430 --> 00:09:31,430
emulation many people have done<font color="#E5E5E5"> that</font>

163
00:09:28,090 --> 00:09:33,470
anybody heard of chemo or<font color="#CCCCCC"> queueing you</font>

164
00:09:31,430 --> 00:09:37,040
depends on<font color="#E5E5E5"> how what part of the country</font>

165
00:09:33,470 --> 00:09:41,840
<font color="#CCCCCC">I</font><font color="#E5E5E5"> come from I think so</font><font color="#CCCCCC"> they do this</font><font color="#E5E5E5"> very</font>

166
00:09:37,040 --> 00:09:44,959
<font color="#CCCCCC">well and actually other tools have been</font>

167
00:09:41,840 --> 00:09:46,820
<font color="#E5E5E5">built on</font><font color="#CCCCCC"> queuing you to try to provide</font>

168
00:09:44,960 --> 00:09:48,530
<font color="#E5E5E5">some hooks into the emulation process</font>

169
00:09:46,820 --> 00:09:51,700
much<font color="#CCCCCC"> like what I'm what I find myself</font>

170
00:09:48,530 --> 00:09:57,939
<font color="#E5E5E5">doing most of the time and that is</font>

171
00:09:51,700 --> 00:10:03,429
partial emulation<font color="#E5E5E5"> or</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> sorry that is a</font>

172
00:09:57,939 --> 00:10:04,929
<font color="#E5E5E5">sudo emulation sudo emulation or what</font>

173
00:10:03,429 --> 00:10:07,899
we'll talk<font color="#E5E5E5"> about in a few</font><font color="#CCCCCC"> minutes as a</font>

174
00:10:04,929 --> 00:10:10,179
workspace emulator<font color="#CCCCCC"> I take the thing that</font>

175
00:10:07,899 --> 00:10:13,359
I'm testing<font color="#E5E5E5"> disassembling tearing apart</font>

176
00:10:10,179 --> 00:10:17,348
making sense of like my<font color="#CCCCCC"> IDE Oh opening</font>

177
00:10:13,359 --> 00:10:19,439
but<font color="#CCCCCC"> it's vivisecting and I</font><font color="#E5E5E5"> wrap an</font>

178
00:10:17,349 --> 00:10:22,749
emulator<font color="#E5E5E5"> around a function for</font><font color="#CCCCCC"> example</font>

179
00:10:19,439 --> 00:10:25,659
<font color="#E5E5E5">if I wrap an emulator around a function</font>

180
00:10:22,749 --> 00:10:28,029
and I work and<font color="#E5E5E5"> I have the emulator</font>

181
00:10:25,659 --> 00:10:31,179
emulate through that function<font color="#CCCCCC"> I have a</font>

182
00:10:28,029 --> 00:10:33,339
great<font color="#E5E5E5"> deal of control even</font><font color="#CCCCCC"> so much</font><font color="#E5E5E5"> as to</font>

183
00:10:31,179 --> 00:10:37,169
do things that the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> wouldn't do</font>

184
00:10:33,339 --> 00:10:44,739
like there's a great<font color="#E5E5E5"> deal</font><font color="#CCCCCC"> of value</font><font color="#E5E5E5"> from</font>

185
00:10:37,169 --> 00:10:47,470
emulating through every code block that

186
00:10:44,739 --> 00:10:52,869
a function offers and seeing what data

187
00:10:47,470 --> 00:10:55,179
what<font color="#E5E5E5"> data is put into where so I'm</font>

188
00:10:52,869 --> 00:10:57,279
really<font color="#CCCCCC"> ad-hoc here so please forgive me</font>

189
00:10:55,179 --> 00:10:59,228
<font color="#E5E5E5">if you if I see little dribbles of blood</font>

190
00:10:57,279 --> 00:11:05,769
coming<font color="#CCCCCC"> out here I</font><font color="#E5E5E5"> will try to ramp it</font>

191
00:10:59,229 --> 00:11:08,019
<font color="#E5E5E5">back but so we've talked</font><font color="#CCCCCC"> about real</font>

192
00:11:05,769 --> 00:11:09,970
emulation<font color="#E5E5E5"> this is pseudo emulation where</font>

193
00:11:08,019 --> 00:11:15,339
I focus<font color="#E5E5E5"> on a different</font><font color="#CCCCCC"> on a particular</font>

194
00:11:09,970 --> 00:11:16,689
<font color="#E5E5E5">area and</font><font color="#CCCCCC"> then I hook in an analysis</font>

195
00:11:15,339 --> 00:11:18,999
module<font color="#E5E5E5"> which we'll talk</font><font color="#CCCCCC"> about a little</font>

196
00:11:16,689 --> 00:11:22,149
<font color="#E5E5E5">bit and then I</font><font color="#CCCCCC"> just say he'll go run</font>

197
00:11:18,999 --> 00:11:24,909
this function<font color="#CCCCCC"> oh by the way I've got</font>

198
00:11:22,149 --> 00:11:28,029
options<font color="#E5E5E5"> here</font><font color="#CCCCCC"> like follow all the code</font>

199
00:11:24,909 --> 00:11:30,519
paths<font color="#E5E5E5"> or at least all the code flow</font><font color="#CCCCCC"> so</font>

200
00:11:28,029 --> 00:11:34,449
if I hit<font color="#E5E5E5"> a conditional branch what</font>

201
00:11:30,519 --> 00:11:36,699
should happen right<font color="#E5E5E5"> there's some flag</font>

202
00:11:34,449 --> 00:11:39,939
that gets checked and based on<font color="#E5E5E5"> the value</font>

203
00:11:36,699 --> 00:11:43,299
<font color="#CCCCCC">of that flag one direction should be</font>

204
00:11:39,939 --> 00:11:46,149
<font color="#E5E5E5">taken over another well for some</font>

205
00:11:43,299 --> 00:11:48,249
<font color="#E5E5E5">analyses taking both makes a lot of</font>

206
00:11:46,149 --> 00:11:50,289
sense<font color="#E5E5E5"> so we hit</font>

207
00:11:48,249 --> 00:11:52,689
so<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> emulate a long we'll hit a</font>

208
00:11:50,289 --> 00:11:55,119
conditional branch and we'll say we're

209
00:11:52,689 --> 00:11:56,889
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> go this</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> but Q this one for</font>

210
00:11:55,119 --> 00:12:03,249
later<font color="#CCCCCC"> will do</font><font color="#E5E5E5"> more analysis we take an</font>

211
00:11:56,889 --> 00:12:05,949
emulator snapshot and store it then we

212
00:12:03,249 --> 00:12:10,910
take the branch and we flow on through

213
00:12:05,949 --> 00:12:14,608
and we're able to do things<font color="#CCCCCC"> laia</font><font color="#E5E5E5"> like</font>

214
00:12:10,910 --> 00:12:16,949
tract values through registers or more

215
00:12:14,609 --> 00:12:21,899
importantly see what they see what<font color="#E5E5E5"> gets</font>

216
00:12:16,949 --> 00:12:25,589
done with them so if if I turn<font color="#CCCCCC"> on a flag</font>

217
00:12:21,899 --> 00:12:29,329
that says<font color="#E5E5E5"> track all the reads and then I</font>

218
00:12:25,589 --> 00:12:32,999
kick on my I<font color="#E5E5E5"> kick off my run function</font>

219
00:12:29,329 --> 00:12:36,209
analysis<font color="#E5E5E5"> it'll go through all of the</font>

220
00:12:32,999 --> 00:12:40,109
paths<font color="#E5E5E5"> tracking all of</font><font color="#CCCCCC"> the things all</font><font color="#E5E5E5"> the</font>

221
00:12:36,209 --> 00:12:43,649
<font color="#E5E5E5">locations that</font><font color="#CCCCCC"> are read from and storing</font>

222
00:12:40,109 --> 00:12:47,339
what<font color="#E5E5E5"> operator out</font><font color="#CCCCCC"> what opcode actually</font>

223
00:12:43,649 --> 00:12:51,539
did the reading more importantly for<font color="#E5E5E5"> me</font>

224
00:12:47,339 --> 00:12:54,059
most often I like<font color="#E5E5E5"> to track writes so I</font>

225
00:12:51,539 --> 00:12:55,619
kick up<font color="#CCCCCC"> my I turn I bring up my</font><font color="#E5E5E5"> emulator</font>

226
00:12:54,059 --> 00:12:59,069
set it up<font color="#E5E5E5"> for the function that I'm</font><font color="#CCCCCC"> in</font>

227
00:12:55,619 --> 00:13:02,879
and that I'm analyzing<font color="#E5E5E5"> and I'll say</font>

228
00:12:59,069 --> 00:13:05,759
<font color="#E5E5E5">emulate through this function allow</font>

229
00:13:02,879 --> 00:13:08,850
emulation of<font color="#E5E5E5"> the same instructions up to</font>

230
00:13:05,759 --> 00:13:12,509
five times what<font color="#E5E5E5"> happens if I</font><font color="#CCCCCC"> get into</font><font color="#E5E5E5"> a</font>

231
00:13:08,850 --> 00:13:15,269
loop fifth time through boom that is

232
00:13:12,509 --> 00:13:18,269
done and then that cue that<font color="#E5E5E5"> I was</font>

233
00:13:15,269 --> 00:13:27,109
talking<font color="#CCCCCC"> about earlier</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> path is</font>

234
00:13:18,269 --> 00:13:27,109
then analyzed you're doing great

235
00:13:40,669 --> 00:13:54,689
where did the firmware come from<font color="#E5E5E5"> I could</font>

236
00:13:43,199 --> 00:13:58,169
tell<font color="#E5E5E5"> you about I'd have to kill you so</font>

237
00:13:54,689 --> 00:13:59,789
typically what I find myself doing the

238
00:13:58,169 --> 00:14:01,709
initial part<font color="#E5E5E5"> of an assessment is go out</font>

239
00:13:59,789 --> 00:14:04,129
<font color="#E5E5E5">and track</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> the firmware if I pull it</font>

240
00:14:01,709 --> 00:14:06,809
<font color="#CCCCCC">off of a device that's that's one way</font>

241
00:14:04,129 --> 00:14:08,489
and a lot of ECU's and in a car<font color="#E5E5E5"> will</font>

242
00:14:06,809 --> 00:14:17,069
just give up the ghost if you<font color="#E5E5E5"> know the</font>

243
00:14:08,489 --> 00:14:19,439
magic things yeah I'm often downloading

244
00:14:17,069 --> 00:14:21,858
it<font color="#E5E5E5"> a lot of vendors is like hey here's a</font>

245
00:14:19,439 --> 00:14:21,858
<font color="#E5E5E5">firmware download</font>

246
00:14:23,980 --> 00:14:30,650
and that<font color="#E5E5E5"> actually leads</font><font color="#CCCCCC"> me to another</font>

247
00:14:27,440 --> 00:14:33,200
<font color="#E5E5E5">point with emulation I don't need the</font>

248
00:14:30,650 --> 00:14:36,110
full<font color="#E5E5E5"> bootloader to do a lot of the</font>

249
00:14:33,200 --> 00:14:38,690
things<font color="#E5E5E5"> that I need</font><font color="#CCCCCC"> and so for some</font>

250
00:14:36,110 --> 00:14:42,770
systems<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were able to</font><font color="#E5E5E5"> download a chunk</font>

251
00:14:38,690 --> 00:14:44,870
of the<font color="#CCCCCC"> firmware but the bootloader is</font>

252
00:14:42,770 --> 00:14:46,370
not included in<font color="#E5E5E5"> that probably</font><font color="#CCCCCC"> because</font>

253
00:14:44,870 --> 00:14:49,490
<font color="#CCCCCC">they never want to</font><font color="#E5E5E5"> update it</font><font color="#CCCCCC"> because if</font>

254
00:14:46,370 --> 00:14:52,730
you<font color="#CCCCCC"> Bourque the the bootloader</font><font color="#E5E5E5"> you kind</font>

255
00:14:49,490 --> 00:14:55,160
<font color="#E5E5E5">of got an RMA it as opposed to if you if</font>

256
00:14:52,730 --> 00:14:57,200
you<font color="#CCCCCC"> Bork the the current updates</font><font color="#E5E5E5"> the</font>

257
00:14:55,160 --> 00:14:58,640
thing just<font color="#E5E5E5"> doesn't work it reboots into</font>

258
00:14:57,200 --> 00:15:02,450
the bootloader<font color="#E5E5E5"> again and says okay try</font>

259
00:14:58,640 --> 00:15:06,680
<font color="#CCCCCC">again but</font><font color="#E5E5E5"> sometimes that bootloader has</font>

260
00:15:02,450 --> 00:15:11,390
some code that<font color="#CCCCCC"> can</font><font color="#E5E5E5"> be interesting so big</font>

261
00:15:06,680 --> 00:15:17,569
big long conversation so<font color="#E5E5E5"> I gather my</font>

262
00:15:11,390 --> 00:15:19,370
thoughts here so are you with me so<font color="#CCCCCC"> far</font>

263
00:15:17,570 --> 00:15:21,910
if I lost<font color="#E5E5E5"> you should</font><font color="#CCCCCC"> I go back</font><font color="#E5E5E5"> and like</font>

264
00:15:19,370 --> 00:15:21,910
sing a song

265
00:15:28,330 --> 00:15:34,400
so who would anybody somebody asked me

266
00:15:32,480 --> 00:15:36,590
<font color="#E5E5E5">about the bracelet earlier anybody else</font>

267
00:15:34,400 --> 00:15:43,310
notice it<font color="#E5E5E5"> anybody know what</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> is</font>

268
00:15:36,590 --> 00:15:46,940
why I'm wearing<font color="#E5E5E5"> a bracelet close but no</font>

269
00:15:43,310 --> 00:15:50,119
so might my daughter wanted to go down

270
00:15:46,940 --> 00:15:53,210
and hang out<font color="#CCCCCC"> with her friends at a swing</font>

271
00:15:50,120 --> 00:15:55,640
dancing<font color="#E5E5E5"> extravaganza down here in gr</font>

272
00:15:53,210 --> 00:15:57,530
they get together once a week<font color="#E5E5E5"> so she</font>

273
00:15:55,640 --> 00:15:59,990
allowed me<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> along and I had</font><font color="#CCCCCC"> a lot</font>

274
00:15:57,530 --> 00:16:01,400
<font color="#CCCCCC">of fun and I recognized a couple</font><font color="#E5E5E5"> of your</font>

275
00:15:59,990 --> 00:16:03,200
faces there you<font color="#E5E5E5"> don't have to say</font>

276
00:16:01,400 --> 00:16:05,900
anything but<font color="#CCCCCC"> Chris but Jim you're</font>

277
00:16:03,200 --> 00:16:19,550
amazing<font color="#E5E5E5"> this guy</font><font color="#CCCCCC"> asked</font><font color="#E5E5E5"> him to dance</font>

278
00:16:05,900 --> 00:16:21,949
later ladies so emulation so what I like

279
00:16:19,550 --> 00:16:24,469
<font color="#E5E5E5">I refer to emulation in in these two</font>

280
00:16:21,950 --> 00:16:27,380
<font color="#CCCCCC">categories the real emulation we talked</font>

281
00:16:24,470 --> 00:16:29,210
about<font color="#E5E5E5"> and workspace emulation and the</font>

282
00:16:27,380 --> 00:16:30,920
<font color="#E5E5E5">workspace workspace emulation is the</font>

283
00:16:29,210 --> 00:16:32,900
stuff<font color="#E5E5E5"> that we've just been</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

284
00:16:30,920 --> 00:16:35,349
<font color="#E5E5E5">where we're able to change the way that</font>

285
00:16:32,900 --> 00:16:38,720
the emulator actually works to<font color="#CCCCCC"> get</font>

286
00:16:35,350 --> 00:16:41,720
analysis<font color="#E5E5E5"> fast one of those things that</font>

287
00:16:38,720 --> 00:16:46,610
<font color="#E5E5E5">were able to track is if if I track all</font>

288
00:16:41,720 --> 00:16:50,000
the<font color="#CCCCCC"> rights when I'm done I say hey max</font>

289
00:16:46,610 --> 00:16:54,140
of<font color="#E5E5E5"> max hit of five times so in any loop</font>

290
00:16:50,000 --> 00:16:59,290
<font color="#CCCCCC">I bounce through five times I should</font>

291
00:16:54,140 --> 00:17:03,500
have if<font color="#CCCCCC"> I if I see that</font><font color="#E5E5E5"> I'm tracking</font>

292
00:16:59,290 --> 00:17:07,119
<font color="#E5E5E5">five rights from the same address from</font>

293
00:17:03,500 --> 00:17:10,550
<font color="#E5E5E5">the same opcode to incrementing</font>

294
00:17:07,119 --> 00:17:12,579
addresses what does that sound<font color="#E5E5E5"> like to</font>

295
00:17:10,550 --> 00:17:12,579
you

296
00:17:13,359 --> 00:17:21,290
what's that writing an array<font color="#E5E5E5"> that's a</font>

297
00:17:17,420 --> 00:17:25,100
good option<font color="#E5E5E5"> how about a</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> C function</font>

298
00:17:21,290 --> 00:17:29,090
that does that exact same<font color="#E5E5E5"> thing it's</font>

299
00:17:25,099 --> 00:17:29,959
called mem copy<font color="#E5E5E5"> add in a couple other</font>

300
00:17:29,090 --> 00:17:32,720
conditions

301
00:17:29,960 --> 00:17:35,720
it's called stir copy there there are

302
00:17:32,720 --> 00:17:36,990
various<font color="#E5E5E5"> things that we can tell by</font>

303
00:17:35,720 --> 00:17:41,669
simply saying<font color="#E5E5E5"> okay</font>

304
00:17:36,990 --> 00:17:42,869
this little<font color="#E5E5E5"> analysis monitor and the in</font>

305
00:17:41,669 --> 00:17:46,460
this configuration

306
00:17:42,869 --> 00:17:48,809
you know max loop whatever five times go

307
00:17:46,460 --> 00:17:53,100
and I do that<font color="#E5E5E5"> for all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> discovered</font>

308
00:17:48,809 --> 00:17:56,220
functions in<font color="#E5E5E5"> this system and then I spit</font>

309
00:17:53,100 --> 00:18:00,629
out all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ones that write to</font>

310
00:17:56,220 --> 00:18:03,059
<font color="#E5E5E5">sequential data in a loop some of those</font>

311
00:18:00,629 --> 00:18:07,879
<font color="#E5E5E5">are simply clearing space that</font><font color="#CCCCCC"> that I</font>

312
00:18:03,059 --> 00:18:10,529
will<font color="#CCCCCC"> give you so memset basically</font>

313
00:18:07,879 --> 00:18:13,080
although<font color="#E5E5E5"> you'll you'd be surprised how</font>

314
00:18:10,529 --> 00:18:17,580
<font color="#CCCCCC">many functions like in the</font><font color="#E5E5E5"> windows in</font>

315
00:18:13,080 --> 00:18:21,350
132<font color="#CCCCCC"> DLL or user</font><font color="#E5E5E5"> 32 Colonel Thursday</font>

316
00:18:17,580 --> 00:18:25,199
<font color="#CCCCCC">there are an inordinate</font><font color="#E5E5E5"> number of memory</font>

317
00:18:21,350 --> 00:18:28,799
<font color="#E5E5E5">write loops that</font><font color="#CCCCCC"> you might be able</font><font color="#E5E5E5"> to</font>

318
00:18:25,200 --> 00:18:30,799
use for<font color="#CCCCCC"> your exploit so this is all</font><font color="#E5E5E5"> very</font>

319
00:18:28,799 --> 00:18:40,980
<font color="#CCCCCC">interesting stuff that that</font><font color="#E5E5E5"> has been</font>

320
00:18:30,799 --> 00:18:44,299
proven<font color="#E5E5E5"> out to be very</font><font color="#CCCCCC"> helpful</font><font color="#E5E5E5"> i cost</font>

321
00:18:40,980 --> 00:18:44,299
<font color="#CCCCCC">hardware to do bad things</font>

322
00:18:50,509 --> 00:18:56,879
let me take a sneak<font color="#CCCCCC"> peek here and I</font>

323
00:18:54,899 --> 00:18:58,110
<font color="#CCCCCC">wanna</font><font color="#E5E5E5"> before I go into the</font><font color="#CCCCCC"> next thing</font>

324
00:18:56,879 --> 00:18:59,490
I'm<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about I</font><font color="#E5E5E5"> want to know I</font>

325
00:18:58,110 --> 00:19:02,029
want<font color="#CCCCCC"> to make sure there's</font><font color="#E5E5E5"> not stuff</font><font color="#CCCCCC"> that</font>

326
00:18:59,490 --> 00:19:02,029
I'm forgetting

327
00:19:11,179 --> 00:19:30,110
I have Wi-Fi turned off or I did<font color="#E5E5E5"> okay so</font>

328
00:19:24,720 --> 00:19:30,110
oh okay<font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> that I was forgetting</font>

329
00:19:33,370 --> 00:19:39,830
so we end<font color="#E5E5E5"> up that there was one last</font>

330
00:19:36,710 --> 00:19:43,880
snippet of work space<font color="#E5E5E5"> simulation that I</font>

331
00:19:39,830 --> 00:19:48,168
want to<font color="#E5E5E5"> throw in</font><font color="#CCCCCC"> there I want the</font>

332
00:19:43,880 --> 00:19:50,720
ability<font color="#E5E5E5"> to say a memory dereference or</font>

333
00:19:48,169 --> 00:19:55,330
something reading from memory<font color="#E5E5E5"> if that</font>

334
00:19:50,720 --> 00:19:55,330
memory address doesn't<font color="#E5E5E5"> exist</font><font color="#CCCCCC"> don't fail</font>

335
00:19:56,230 --> 00:20:01,700
so within<font color="#E5E5E5"> the workspace emulator there's</font>

336
00:19:59,450 --> 00:20:03,500
a setting<font color="#CCCCCC"> that I turn</font><font color="#E5E5E5"> on that says if I</font>

337
00:20:01,700 --> 00:20:06,650
read somewhere that<font color="#CCCCCC"> doesn't exist</font><font color="#E5E5E5"> in my</font>

338
00:20:03,500 --> 00:20:09,650
memory<font color="#E5E5E5"> maps</font><font color="#CCCCCC"> returned all A's so if it's</font>

339
00:20:06,650 --> 00:20:12,799
a 32-bit number<font color="#E5E5E5"> a</font><font color="#CCCCCC"> a a a all capitals you</font>

340
00:20:09,650 --> 00:20:14,870
know the<font color="#CCCCCC"> four one four one</font><font color="#E5E5E5"> drill it's</font>

341
00:20:12,799 --> 00:20:18,139
amazing how easy that<font color="#CCCCCC"> is to identify</font>

342
00:20:14,870 --> 00:20:20,899
when you're walking<font color="#CCCCCC"> through emulation</font>

343
00:20:18,140 --> 00:20:29,840
analysis<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> walking off with</font><font color="#CCCCCC"> my</font>

344
00:20:20,900 --> 00:20:33,590
laptop<font color="#E5E5E5"> okay well if your includes with</font>

345
00:20:29,840 --> 00:20:42,039
him I'm doubly scared actually<font color="#CCCCCC"> I know</font>

346
00:20:33,590 --> 00:20:42,039
where you live<font color="#E5E5E5"> David so</font>

347
00:20:52,250 --> 00:20:59,999
[Applause]

348
00:21:05,230 --> 00:21:10,490
all right here we<font color="#CCCCCC"> go</font><font color="#E5E5E5"> we talked about</font>

349
00:21:08,870 --> 00:21:12,919
this flight emulation is cool<font color="#E5E5E5"> right</font>

350
00:21:10,490 --> 00:21:14,929
that's the reason<font color="#CCCCCC"> that we're here</font>

351
00:21:12,920 --> 00:21:16,429
emulation enables behavioral analysis

352
00:21:14,929 --> 00:21:19,190
<font color="#E5E5E5">emulation monitors we talked about</font>

353
00:21:16,429 --> 00:21:22,640
briefly<font color="#CCCCCC"> we'll talk about more partial</font>

354
00:21:19,190 --> 00:21:25,070
emulation allows me to<font color="#E5E5E5"> operate through</font>

355
00:21:22,640 --> 00:21:26,900
snippets of code where<font color="#E5E5E5"> the thing that</font>

356
00:21:25,070 --> 00:21:30,830
I'm referencing<font color="#E5E5E5"> may not have been</font>

357
00:21:26,900 --> 00:21:32,990
initialized or<font color="#CCCCCC"> exists</font><font color="#E5E5E5"> and yet I can</font>

358
00:21:30,830 --> 00:21:35,480
survive and move on because<font color="#CCCCCC"> oftentimes</font>

359
00:21:32,990 --> 00:21:37,910
<font color="#E5E5E5">there are things where heck the emulator</font>

360
00:21:35,480 --> 00:21:39,490
might I might not even<font color="#E5E5E5"> have have the</font>

361
00:21:37,910 --> 00:21:42,620
instruction that<font color="#E5E5E5"> needs to be emulated</font>

362
00:21:39,490 --> 00:21:46,370
<font color="#CCCCCC">because of you know new architecture</font>

363
00:21:42,620 --> 00:21:48,469
<font color="#CCCCCC">changes</font><font color="#E5E5E5"> and yet it can survive to the</font>

364
00:21:46,370 --> 00:21:50,689
next<font color="#E5E5E5"> thing most often those things are</font>

365
00:21:48,470 --> 00:21:59,060
not really<font color="#E5E5E5"> pertinent for security</font>

366
00:21:50,690 --> 00:22:03,660
analysis<font color="#CCCCCC"> well there we this is perfect</font>

367
00:21:59,060 --> 00:22:03,659
[Laughter]

368
00:22:09,460 --> 00:22:17,179
<font color="#CCCCCC">okay so example I like</font><font color="#E5E5E5"> I like hex</font>

369
00:22:13,640 --> 00:22:19,850
I like career or you know<font color="#E5E5E5"> mono font</font>

370
00:22:17,179 --> 00:22:21,980
<font color="#E5E5E5">stuff in all of my talks have to have it</font>

371
00:22:19,850 --> 00:22:23,928
<font color="#E5E5E5">even</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> my talks about how to create</font><font color="#CCCCCC"> a</font>

372
00:22:21,980 --> 00:22:27,050
good environment for cyber ninja<font color="#CCCCCC"> this</font><font color="#E5E5E5"> I</font>

373
00:22:23,929 --> 00:22:33,320
throw in a some hacks I have to so

374
00:22:27,050 --> 00:22:35,510
anybody can not read this<font color="#CCCCCC"> ok ok I'll</font>

375
00:22:33,320 --> 00:22:39,260
make sure it's available<font color="#CCCCCC"> I</font><font color="#E5E5E5"> know you</font><font color="#CCCCCC"> get</font>

376
00:22:35,510 --> 00:22:42,379
you'll get<font color="#CCCCCC"> a copy so we we import for</font>

377
00:22:39,260 --> 00:22:45,170
this example<font color="#CCCCCC"> I go with the raw emulator</font>

378
00:22:42,380 --> 00:22:47,600
<font color="#E5E5E5">like the full-on like no special frills</font>

379
00:22:45,170 --> 00:22:51,710
whatsoever<font color="#E5E5E5"> the thing that I wrote for</font>

380
00:22:47,600 --> 00:22:53,209
arm so I import the<font color="#E5E5E5"> env env the name of</font>

381
00:22:51,710 --> 00:22:57,020
the disassembly emulation framework

382
00:22:53,210 --> 00:23:01,309
<font color="#E5E5E5">within vivisect dot arches yes arches</font>

383
00:22:57,020 --> 00:23:04,280
has<font color="#CCCCCC"> no ii don't</font><font color="#E5E5E5"> ask arm mu for the</font>

384
00:23:01,309 --> 00:23:05,720
<font color="#CCCCCC">emulator i give</font><font color="#E5E5E5"> it a name</font><font color="#CCCCCC"> AAA</font><font color="#E5E5E5"> just</font>

385
00:23:04,280 --> 00:23:08,540
because<font color="#E5E5E5"> i</font>

386
00:23:05,720 --> 00:23:13,060
create an emulator<font color="#CCCCCC"> by calling our member</font>

387
00:23:08,540 --> 00:23:15,580
<font color="#E5E5E5">I add a memory map at address</font><font color="#CCCCCC"> zero with</font>

388
00:23:13,060 --> 00:23:18,169
memory permissions read/write/execute

389
00:23:15,580 --> 00:23:21,139
<font color="#CCCCCC">give it a name binary blob and</font><font color="#E5E5E5"> then I</font>

390
00:23:18,170 --> 00:23:23,630
read in this binary<font color="#E5E5E5"> thing and that</font>

391
00:23:21,140 --> 00:23:27,380
shoves all those bytes in at a memory

392
00:23:23,630 --> 00:23:29,480
map<font color="#E5E5E5"> within the workspace at</font><font color="#CCCCCC"> 0 because</font>

393
00:23:27,380 --> 00:23:33,200
this<font color="#CCCCCC"> particular binary</font><font color="#E5E5E5"> wants to be at 0</font>

394
00:23:29,480 --> 00:23:35,090
<font color="#E5E5E5">I set my program counter at 0</font><font color="#CCCCCC"> I can set</font>

395
00:23:33,200 --> 00:23:36,950
my register<font color="#E5E5E5"> now there are several ways</font>

396
00:23:35,090 --> 00:23:38,959
<font color="#E5E5E5">to set registers but set register by</font>

397
00:23:36,950 --> 00:23:41,210
name<font color="#E5E5E5"> because I want to give it a string</font>

398
00:23:38,960 --> 00:23:43,070
<font color="#CCCCCC">are</font><font color="#E5E5E5"> 0 if I said just set register and</font>

399
00:23:41,210 --> 00:23:46,520
gave it a number<font color="#E5E5E5"> 0 on this architecture</font>

400
00:23:43,070 --> 00:23:48,230
that would<font color="#E5E5E5"> work anyway</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> wow i</font>

401
00:23:46,520 --> 00:23:51,700
fat-fingered that that's supposed<font color="#E5E5E5"> to say</font>

402
00:23:48,230 --> 00:23:55,730
Atlas and<font color="#E5E5E5"> leet-speak</font><font color="#CCCCCC"> but whatever</font><font color="#E5E5E5"> and</font>

403
00:23:51,700 --> 00:23:59,660
then<font color="#E5E5E5"> I get registered by name</font><font color="#CCCCCC"> r0</font><font color="#E5E5E5"> and I</font>

404
00:23:55,730 --> 00:24:03,020
print that in hex<font color="#CCCCCC"> I can then</font><font color="#E5E5E5"> stop</font><font color="#CCCCCC"> II</font>

405
00:23:59,660 --> 00:24:05,300
step instruction and it execute the next

406
00:24:03,020 --> 00:24:06,200
instruction and increments the<font color="#E5E5E5"> pro of</font>

407
00:24:05,300 --> 00:24:10,399
<font color="#CCCCCC">the program</font><font color="#E5E5E5"> counter</font>

408
00:24:06,200 --> 00:24:14,420
I get program counter<font color="#CCCCCC"> we're at four we</font>

409
00:24:10,400 --> 00:24:17,120
were at<font color="#CCCCCC"> 0 so super</font><font color="#E5E5E5"> simple I wanted to I</font>

410
00:24:14,420 --> 00:24:20,690
wanted<font color="#CCCCCC"> to not make</font><font color="#E5E5E5"> your brain hurt</font><font color="#CCCCCC"> early</font>

411
00:24:17,120 --> 00:24:24,409
on in<font color="#E5E5E5"> the talk if that's really</font>

412
00:24:20,690 --> 00:24:28,190
cumbersome and it is because it's made

413
00:24:24,410 --> 00:24:31,130
for programmatic analysis<font color="#CCCCCC"> I wrote in</font>

414
00:24:28,190 --> 00:24:34,040
Atlas utils a little utility<font color="#E5E5E5"> called run</font>

415
00:24:31,130 --> 00:24:37,940
step it basically tries<font color="#E5E5E5"> to create a</font>

416
00:24:34,040 --> 00:24:39,560
debugger type interface<font color="#E5E5E5"> so you see all</font>

417
00:24:37,940 --> 00:24:41,530
the register values and in this

418
00:24:39,560 --> 00:24:45,470
particular<font color="#CCCCCC"> register</font><font color="#E5E5E5"> in this particular</font>

419
00:24:41,530 --> 00:24:47,960
emulator I have<font color="#E5E5E5"> preceded set values into</font>

420
00:24:45,470 --> 00:24:50,960
the registers so that I know if<font color="#CCCCCC"> they</font>

421
00:24:47,960 --> 00:24:53,240
show up<font color="#E5E5E5"> because they're gonna hand</font>

422
00:24:50,960 --> 00:24:57,350
they're gonna bring in values as

423
00:24:53,240 --> 00:25:01,580
arguments right<font color="#E5E5E5"> so as arguments if I see</font>

424
00:24:57,350 --> 00:25:03,830
<font color="#CCCCCC">4 1 5 6 1 0 0 1 then I know</font><font color="#E5E5E5"> that that's</font>

425
00:25:01,580 --> 00:25:07,429
<font color="#E5E5E5">going to be</font><font color="#CCCCCC"> R 0</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> from the very</font>

426
00:25:03,830 --> 00:25:11,439
start<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> function blah blah blah my</font>

427
00:25:07,430 --> 00:25:15,080
program counter is<font color="#E5E5E5"> 0 my current programs</font>

428
00:25:11,440 --> 00:25:18,530
<font color="#E5E5E5">program state register and then anything</font>

429
00:25:15,080 --> 00:25:19,490
<font color="#E5E5E5">that is being accessed</font><font color="#CCCCCC"> as an operand in</font>

430
00:25:18,530 --> 00:25:21,230
the instruction

431
00:25:19,490 --> 00:25:23,600
<font color="#CCCCCC">I just</font><font color="#E5E5E5"> go grab</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and spit out the</font>

432
00:25:21,230 --> 00:25:25,550
<font color="#E5E5E5">contents so in this case it's a branch</font>

433
00:25:23,600 --> 00:25:30,590
there's nothing<font color="#E5E5E5"> helpful but hey you know</font>

434
00:25:25,550 --> 00:25:32,629
I didn't want to burn a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> time so</font>

435
00:25:30,590 --> 00:25:35,120
this<font color="#E5E5E5"> is an environment</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I can very</font>

436
00:25:32,630 --> 00:25:37,640
easily just<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> enter and watch code</font>

437
00:25:35,120 --> 00:25:39,020
<font color="#E5E5E5">execute I can change values</font><font color="#CCCCCC"> to make sure</font>

438
00:25:37,640 --> 00:25:43,059
that the code flows in a certain way

439
00:25:39,020 --> 00:25:45,559
this is very<font color="#CCCCCC"> powerful for my interactive</font>

440
00:25:43,059 --> 00:25:47,570
<font color="#E5E5E5">learning and getting to know</font><font color="#CCCCCC"> I'm more</font>

441
00:25:45,559 --> 00:25:55,520
<font color="#E5E5E5">flirting with with the code at this</font>

442
00:25:47,570 --> 00:25:58,100
point so here we're talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the</font>

443
00:25:55,520 --> 00:26:00,679
workspace emulator<font color="#E5E5E5"> don't freak out I</font>

444
00:25:58,100 --> 00:26:04,010
just<font color="#E5E5E5"> wanted to throw in the code that</font>

445
00:26:00,679 --> 00:26:08,720
<font color="#E5E5E5">that creates the base for the workspace</font>

446
00:26:04,010 --> 00:26:11,629
emulator<font color="#E5E5E5"> notice that the log</font><font color="#CCCCCC"> write and</font>

447
00:26:08,720 --> 00:26:13,900
the log read<font color="#E5E5E5"> arguments are just part of</font>

448
00:26:11,630 --> 00:26:16,190
<font color="#E5E5E5">the the workspace emulator these</font>

449
00:26:13,900 --> 00:26:18,620
basically<font color="#E5E5E5"> tell the emulator whether or</font>

450
00:26:16,190 --> 00:26:22,400
not to store any reads and writes that

451
00:26:18,620 --> 00:26:26,659
happen during the emulation so we store

452
00:26:22,400 --> 00:26:31,450
some<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> we can hook things and and</font>

453
00:26:26,660 --> 00:26:33,590
wrap in Python code to emulate behavior

454
00:26:31,450 --> 00:26:35,809
uninitialized use<font color="#E5E5E5"> so the workspace</font>

455
00:26:33,590 --> 00:26:38,300
emulator is really<font color="#CCCCCC"> actually a workhorse</font>

456
00:26:35,809 --> 00:26:40,910
<font color="#E5E5E5">it wraps in a ton of stuff that</font><font color="#CCCCCC"> you may</font>

457
00:26:38,300 --> 00:26:44,840
or<font color="#CCCCCC"> may not</font><font color="#E5E5E5"> use but it's really nice</font><font color="#CCCCCC"> to</font>

458
00:26:40,910 --> 00:26:47,030
<font color="#E5E5E5">have like uninitialized use if I</font><font color="#CCCCCC"> grab in</font>

459
00:26:44,840 --> 00:26:48,620
an analysis if I grab some register

460
00:26:47,030 --> 00:26:54,500
that's not been initialized<font color="#CCCCCC"> I want to</font>

461
00:26:48,620 --> 00:27:01,239
know<font color="#E5E5E5"> that so we store stuff we store a</font>

462
00:26:54,500 --> 00:27:04,510
path now a path in vivisect emulation<font color="#E5E5E5"> is</font>

463
00:27:01,240 --> 00:27:08,090
actually an efficient way<font color="#CCCCCC"> of storing</font>

464
00:27:04,510 --> 00:27:11,600
tracking information<font color="#E5E5E5"> about the emulation</font>

465
00:27:08,090 --> 00:27:14,178
through a<font color="#E5E5E5"> function in a way that's like</font>

466
00:27:11,600 --> 00:27:16,428
<font color="#CCCCCC">a tree so you start at a root and then</font>

467
00:27:14,179 --> 00:27:19,520
as you branch<font color="#E5E5E5"> off it actually creates</font>

468
00:27:16,429 --> 00:27:23,470
different branches into<font color="#CCCCCC"> a tree of</font>

469
00:27:19,520 --> 00:27:26,540
different possibilities<font color="#E5E5E5"> so you may say</font>

470
00:27:23,470 --> 00:27:29,230
at the end<font color="#E5E5E5"> you may have five different</font>

471
00:27:26,540 --> 00:27:32,389
<font color="#E5E5E5">paths through a</font><font color="#CCCCCC"> function and you'll see</font>

472
00:27:29,230 --> 00:27:32,679
that broken<font color="#E5E5E5"> out into a tree if you if</font>

473
00:27:32,390 --> 00:27:36,909
you

474
00:27:32,679 --> 00:27:39,340
visualize this path I don't expect you

475
00:27:36,909 --> 00:27:40,779
to memorize that but I want you to be

476
00:27:39,340 --> 00:27:42,490
<font color="#E5E5E5">aware of it because it may come in</font><font color="#CCCCCC"> two</font>

477
00:27:40,779 --> 00:27:46,059
things later if I end up<font color="#E5E5E5"> with time to</font>

478
00:27:42,490 --> 00:27:49,299
talk<font color="#E5E5E5"> about it uh and</font><font color="#CCCCCC"> then this</font><font color="#E5E5E5"> right</font>

479
00:27:46,059 --> 00:27:53,529
<font color="#CCCCCC">here in</font><font color="#E5E5E5"> mu Mong this stores an emulator</font>

480
00:27:49,299 --> 00:27:56,080
<font color="#E5E5E5">an emulator monitor that basically has</font>

481
00:27:53,529 --> 00:27:59,289
the ability to create<font color="#CCCCCC"> a</font><font color="#E5E5E5"> pre hook and a</font>

482
00:27:56,080 --> 00:28:02,499
post hook for execution before<font color="#CCCCCC"> and after</font>

483
00:27:59,289 --> 00:28:05,169
every<font color="#E5E5E5"> opcode is in is executed my</font>

484
00:28:02,499 --> 00:28:08,519
monitor gets code execution with the

485
00:28:05,169 --> 00:28:11,559
current context<font color="#E5E5E5"> so that it can say hey</font>

486
00:28:08,519 --> 00:28:13,840
<font color="#E5E5E5">this</font><font color="#CCCCCC"> actually is the thing I'm looking</font>

487
00:28:11,559 --> 00:28:15,668
<font color="#CCCCCC">for right now</font><font color="#E5E5E5"> boom I can print it out I</font>

488
00:28:13,840 --> 00:28:17,350
can store it<font color="#CCCCCC"> whatever maybe</font><font color="#E5E5E5"> I'm looking</font>

489
00:28:15,669 --> 00:28:20,200
<font color="#CCCCCC">for hundreds</font><font color="#E5E5E5"> or thousands so I store it</font>

490
00:28:17,350 --> 00:28:24,428
<font color="#E5E5E5">and I can analyze it later</font><font color="#CCCCCC"> I might</font><font color="#E5E5E5"> not</font>

491
00:28:20,200 --> 00:28:26,200
want<font color="#E5E5E5"> to execute that opcode so maybe</font>

492
00:28:24,429 --> 00:28:28,360
there's<font color="#E5E5E5"> something that I have that I</font>

493
00:28:26,200 --> 00:28:31,929
<font color="#E5E5E5">have that I can do in the pre hook the</font>

494
00:28:28,360 --> 00:28:34,539
post hook can then check<font color="#E5E5E5"> and say hey did</font>

495
00:28:31,929 --> 00:28:43,690
I write right here let's go do some

496
00:28:34,539 --> 00:28:45,249
preliminary analysis so we've talked

497
00:28:43,690 --> 00:28:47,409
about the analysis module class a<font color="#E5E5E5"> little</font>

498
00:28:45,249 --> 00:28:50,019
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> the run function class</font>

499
00:28:47,409 --> 00:28:52,090
<font color="#CCCCCC">run</font><font color="#E5E5E5"> function has a number</font><font color="#CCCCCC"> of our</font>

500
00:28:50,019 --> 00:28:53,559
arguments that that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> use but the</font>

501
00:28:52,090 --> 00:28:56,230
ones<font color="#E5E5E5"> you want to be aware of is the</font><font color="#CCCCCC"> max</font>

502
00:28:53,559 --> 00:28:58,658
hit so<font color="#E5E5E5"> that it can follow through loops</font>

503
00:28:56,230 --> 00:29:00,369
<font color="#E5E5E5">and not just go on forever you've heard</font>

504
00:28:58,659 --> 00:29:04,840
of the halting principle<font color="#CCCCCC"> all right the</font>

505
00:29:00,369 --> 00:29:06,970
halting problem path tracking<font color="#CCCCCC"> we've</font>

506
00:29:04,840 --> 00:29:08,529
talked about<font color="#E5E5E5"> that and</font><font color="#CCCCCC"> readwrite logging</font>

507
00:29:06,970 --> 00:29:10,659
apparently I threw this in here to

508
00:29:08,529 --> 00:29:13,480
remind<font color="#E5E5E5"> myself that I wanted to talk</font>

509
00:29:10,659 --> 00:29:14,769
about<font color="#E5E5E5"> these things the one thing we</font>

510
00:29:13,480 --> 00:29:16,600
haven't talked about is emulation

511
00:29:14,769 --> 00:29:21,789
<font color="#E5E5E5">snapshots I'll tell you about that in a</font>

512
00:29:16,600 --> 00:29:24,658
second so<font color="#CCCCCC"> a couple applications of</font>

513
00:29:21,789 --> 00:29:28,929
emulation<font color="#E5E5E5"> that are</font><font color="#CCCCCC"> already in use today</font>

514
00:29:24,659 --> 00:29:30,610
<font color="#E5E5E5">within vivisect there's a function</font>

515
00:29:28,929 --> 00:29:34,360
emulate<font color="#E5E5E5"> to here and you see this on the</font>

516
00:29:30,610 --> 00:29:35,168
<font color="#E5E5E5">next slide then calling convention</font>

517
00:29:34,360 --> 00:29:39,029
analysis

518
00:29:35,169 --> 00:29:43,059
who knows what a calling convention is

519
00:29:39,029 --> 00:29:45,519
<font color="#E5E5E5">okay about</font><font color="#CCCCCC"> a quarter of</font><font color="#E5E5E5"> you because</font>

520
00:29:43,059 --> 00:29:46,330
compilers need to allow you<font color="#E5E5E5"> to write</font>

521
00:29:45,519 --> 00:29:49,510
code

522
00:29:46,330 --> 00:29:52,139
that leverages other<font color="#E5E5E5"> code bases those</font>

523
00:29:49,510 --> 00:29:55,840
other code bases known as libraries

524
00:29:52,140 --> 00:29:59,950
create functions that adhere to<font color="#E5E5E5"> some</font>

525
00:29:55,840 --> 00:30:03,760
particular<font color="#CCCCCC"> way of</font><font color="#E5E5E5"> handing</font><font color="#CCCCCC"> and arguments</font>

526
00:29:59,950 --> 00:30:05,440
<font color="#E5E5E5">and returning values and a couple other</font>

527
00:30:03,760 --> 00:30:08,440
things<font color="#E5E5E5"> but that's basically what it is</font><font color="#CCCCCC"> a</font>

528
00:30:05,440 --> 00:30:11,289
<font color="#E5E5E5">contract saying if I'm using lid CMM</font>

529
00:30:08,440 --> 00:30:13,210
copy<font color="#CCCCCC"> I know that that has this</font>

530
00:30:11,289 --> 00:30:16,120
<font color="#E5E5E5">particular way</font><font color="#CCCCCC"> that it wants me to hand</font>

531
00:30:13,210 --> 00:30:19,480
in arguments<font color="#CCCCCC"> and it will return a value</font>

532
00:30:16,120 --> 00:30:21,279
in this<font color="#E5E5E5"> particular way so the calling</font>

533
00:30:19,480 --> 00:30:25,299
code the<font color="#E5E5E5"> compiler can make that thing</font>

534
00:30:21,279 --> 00:30:28,690
<font color="#CCCCCC">work well with the library</font><font color="#E5E5E5"> so turns out</font>

535
00:30:25,299 --> 00:30:31,629
reverse engineering benefits greatly

536
00:30:28,690 --> 00:30:35,110
from<font color="#E5E5E5"> being able to automatically spit</font>

537
00:30:31,630 --> 00:30:39,330
out<font color="#E5E5E5"> hey this is this</font><font color="#CCCCCC"> kite</font><font color="#E5E5E5"> this has this</font>

538
00:30:35,110 --> 00:30:42,549
many arguments<font color="#E5E5E5"> and it returns an integer</font>

539
00:30:39,330 --> 00:30:45,070
emulation dot py is also<font color="#E5E5E5"> basically some</font>

540
00:30:42,549 --> 00:30:47,740
<font color="#E5E5E5">of the same analysis stuff for different</font>

541
00:30:45,070 --> 00:30:49,418
architectures is possibly code that's

542
00:30:47,740 --> 00:30:52,809
something within<font color="#E5E5E5"> the core functionality</font>

543
00:30:49,419 --> 00:30:58,179
of vivisect<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> MMU code is also</font>

544
00:30:52,809 --> 00:31:03,639
<font color="#E5E5E5">another module so so emulator state or</font>

545
00:30:58,179 --> 00:31:06,669
emulate to here when you're<font color="#E5E5E5"> looking at a</font>

546
00:31:03,639 --> 00:31:10,059
function<font color="#E5E5E5"> in the vivisect window you</font>

547
00:31:06,669 --> 00:31:12,789
<font color="#E5E5E5">right click on the function itself or</font>

548
00:31:10,059 --> 00:31:15,330
actually anything<font color="#E5E5E5"> in the function sorry</font>

549
00:31:12,789 --> 00:31:17,950
<font color="#E5E5E5">you you</font><font color="#CCCCCC"> right-click</font><font color="#E5E5E5"> on the address</font>

550
00:31:15,330 --> 00:31:20,049
<font color="#E5E5E5">location of an OP code that you're</font>

551
00:31:17,950 --> 00:31:22,840
interested in<font color="#CCCCCC"> you go down to the</font>

552
00:31:20,049 --> 00:31:26,590
function menu and you choose show

553
00:31:22,840 --> 00:31:29,500
emulator<font color="#CCCCCC"> state</font><font color="#E5E5E5"> now what happens is</font><font color="#CCCCCC"> very</font>

554
00:31:26,590 --> 00:31:33,639
rapidly<font color="#CCCCCC"> a lightweight emulator is</font>

555
00:31:29,500 --> 00:31:36,610
cranked up a workspace emulator and code

556
00:31:33,639 --> 00:31:41,168
path is found from<font color="#E5E5E5"> the start to there</font>

557
00:31:36,610 --> 00:31:44,469
and the values in the operands are then

558
00:31:41,169 --> 00:31:47,549
displayed<font color="#CCCCCC"> to you shown</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> here so we</font>

559
00:31:44,470 --> 00:31:52,269
run an emulator down to 3 T<font color="#E5E5E5"> 3 to do e</font>

560
00:31:47,549 --> 00:31:55,149
and stack<font color="#E5E5E5"> Delta 0 we've not actually</font>

561
00:31:52,269 --> 00:31:59,330
<font color="#E5E5E5">changed the stack at all here's the OP</font>

562
00:31:55,149 --> 00:32:02,600
<font color="#CCCCCC">code there are two comes in</font>

563
00:31:59,330 --> 00:32:04,899
having this<font color="#E5E5E5"> value well that was put in</font>

564
00:32:02,600 --> 00:32:09,408
by two<font color="#E5E5E5"> different instructions here move</font>

565
00:32:04,899 --> 00:32:11,600
<font color="#E5E5E5">move wide and move top these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> these</font>

566
00:32:09,409 --> 00:32:15,619
are<font color="#CCCCCC"> arm instructions that</font><font color="#E5E5E5"> are used to</font>

567
00:32:11,600 --> 00:32:18,649
populate<font color="#E5E5E5"> a 32-bit value within a</font>

568
00:32:15,619 --> 00:32:23,269
register because<font color="#E5E5E5"> arm instructions are</font>

569
00:32:18,649 --> 00:32:26,658
all how big 32 bits or in a lot<font color="#CCCCCC"> of cases</font>

570
00:32:23,269 --> 00:32:29,299
<font color="#E5E5E5">for thumb mode 16 bits</font><font color="#CCCCCC"> so how do you</font>

571
00:32:26,659 --> 00:32:31,309
load in a<font color="#E5E5E5"> 32</font><font color="#CCCCCC"> bit number into a register</font>

572
00:32:29,299 --> 00:32:34,489
<font color="#E5E5E5">if you've only got 32 bits to work with</font>

573
00:32:31,309 --> 00:32:35,960
in the<font color="#E5E5E5"> first place this</font><font color="#CCCCCC"> is how so this</font>

574
00:32:34,489 --> 00:32:38,019
actually throws off a lot<font color="#E5E5E5"> of</font>

575
00:32:35,960 --> 00:32:41,169
disassembler<font color="#E5E5E5"> static analysis tools</font>

576
00:32:38,019 --> 00:32:43,759
<font color="#E5E5E5">because this is an this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> an address</font>

577
00:32:41,169 --> 00:32:48,730
<font color="#E5E5E5">for this chip that I'm looking at this</font>

578
00:32:43,759 --> 00:32:52,700
is an address<font color="#CCCCCC"> into RAM but</font><font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> like</font>

579
00:32:48,730 --> 00:32:54,980
<font color="#CCCCCC">Yeoh</font><font color="#E5E5E5"> c and 801 are the two numbers that</font>

580
00:32:52,700 --> 00:32:59,359
<font color="#E5E5E5">I'm looking at turns out I'm actually</font>

581
00:32:54,980 --> 00:33:02,929
<font color="#E5E5E5">looking at 801 Oh a</font><font color="#CCCCCC"> Oh C as an address</font>

582
00:32:59,359 --> 00:33:04,850
and since it's a dereference<font color="#E5E5E5"> it says the</font>

583
00:33:02,929 --> 00:33:09,109
dereference of r2 is actually a

584
00:33:04,850 --> 00:33:11,059
dereference of this and that<font color="#E5E5E5"> is unknown</font>

585
00:33:09,109 --> 00:33:18,830
because<font color="#CCCCCC"> we don't have</font><font color="#E5E5E5"> that memory mapped</font>

586
00:33:11,059 --> 00:33:20,809
into<font color="#E5E5E5"> the emulator here's the calling</font>

587
00:33:18,830 --> 00:33:23,689
convention<font color="#E5E5E5"> example I wanted to show</font><font color="#CCCCCC"> you</font>

588
00:33:20,809 --> 00:33:26,239
<font color="#E5E5E5">here's a function it's a system</font><font color="#CCCCCC"> five and</font>

589
00:33:23,690 --> 00:33:29,749
<font color="#CCCCCC">b64</font><font color="#E5E5E5"> call there's basically everything on</font>

590
00:33:26,239 --> 00:33:31,220
POSIX<font color="#E5E5E5"> in 64-bit</font><font color="#CCCCCC"> mode has this calling</font>

591
00:33:29,749 --> 00:33:34,249
convention<font color="#E5E5E5"> so I don't really have to</font>

592
00:33:31,220 --> 00:33:37,039
work hard<font color="#CCCCCC"> to figure</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> that part but it</font>

593
00:33:34,249 --> 00:33:40,369
returns<font color="#E5E5E5"> an integer and it has these</font>

594
00:33:37,039 --> 00:33:43,429
arguments<font color="#E5E5E5"> hand it in to it</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> three</font>

595
00:33:40,369 --> 00:33:44,139
<font color="#E5E5E5">four five in</font><font color="#CCCCCC"> these particular registers</font>

596
00:33:43,429 --> 00:33:47,359
in that order

597
00:33:44,139 --> 00:33:52,399
furthermore<font color="#E5E5E5"> going through all of the</font>

598
00:33:47,359 --> 00:33:56,480
emulation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the of the function the</font>

599
00:33:52,399 --> 00:33:58,939
emulator analysis tool found all of

600
00:33:56,480 --> 00:34:08,119
<font color="#E5E5E5">these local stack variables referenced</font>

601
00:33:58,940 --> 00:34:09,679
<font color="#E5E5E5">throughout the code well there's some</font>

602
00:34:08,119 --> 00:34:11,179
interesting<font color="#E5E5E5"> code that makes all that</font>

603
00:34:09,679 --> 00:34:12,440
happen I won't go through too much of it

604
00:34:11,179 --> 00:34:14,960
I don't want to make<font color="#E5E5E5"> your ears bleed and</font>

605
00:34:12,440 --> 00:34:16,668
we're running<font color="#CCCCCC"> low on time but notice</font>

606
00:34:14,960 --> 00:34:18,530
that<font color="#E5E5E5"> notice at the top this is actually</font>

607
00:34:16,668 --> 00:34:21,440
a very common<font color="#CCCCCC"> thing for a vivisect</font>

608
00:34:18,530 --> 00:34:24,319
analysis module there's a function

609
00:34:21,440 --> 00:34:26,839
called<font color="#E5E5E5"> analyze function it receives in a</font>

610
00:34:24,319 --> 00:34:29,779
vivisect workspace<font color="#E5E5E5"> and the function</font>

611
00:34:26,839 --> 00:34:32,469
virtual address the function address we

612
00:34:29,780 --> 00:34:34,760
<font color="#E5E5E5">immediately tell the works bit of the</font>

613
00:34:32,469 --> 00:34:37,158
vivisect<font color="#E5E5E5"> workspace to give me an</font>

614
00:34:34,760 --> 00:34:39,200
emulator<font color="#E5E5E5"> this is going to return a</font>

615
00:34:37,159 --> 00:34:42,710
<font color="#E5E5E5">workspace emulator for that particular</font>

616
00:34:39,199 --> 00:34:44,689
architecture we create an analysis

617
00:34:42,710 --> 00:34:47,629
module which we'll talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> here on</font>

618
00:34:44,690 --> 00:34:50,980
another slide for this particular<font color="#E5E5E5"> one we</font>

619
00:34:47,629 --> 00:34:54,109
snap that in as<font color="#E5E5E5"> the emulation monitor</font>

620
00:34:50,980 --> 00:34:56,750
using set emulation monitor and then we

621
00:34:54,109 --> 00:35:01,430
call run function<font color="#CCCCCC"> max hit 1 all I want</font>

622
00:34:56,750 --> 00:35:04,579
is code coverage does this make sense

623
00:35:01,430 --> 00:35:10,940
when I say code coverage<font color="#CCCCCC"> I could do it</font>

624
00:35:04,579 --> 00:35:15,920
like this and<font color="#CCCCCC"> like I</font><font color="#E5E5E5"> know where we then</font>

625
00:35:10,940 --> 00:35:19,430
say hey can I do I have an API already

626
00:35:15,920 --> 00:35:21,950
defined<font color="#E5E5E5"> for this function if not build</font>

627
00:35:19,430 --> 00:35:24,230
it build function API and it hands in

628
00:35:21,950 --> 00:35:27,558
the emulator and the emulation module<font color="#E5E5E5"> or</font>

629
00:35:24,230 --> 00:35:30,589
monitor and build function API does all

630
00:35:27,559 --> 00:35:34,790
the real heavy<font color="#E5E5E5"> lifting</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> analysis we</font>

631
00:35:30,589 --> 00:35:39,440
then set up the<font color="#E5E5E5"> API do some stuff get</font>

632
00:35:34,790 --> 00:35:41,990
<font color="#E5E5E5">the stack offset and then we create all</font>

633
00:35:39,440 --> 00:35:44,450
the all the<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> the</font>

634
00:35:41,990 --> 00:35:44,808
arguments<font color="#E5E5E5"> and the local registers</font><font color="#CCCCCC"> yada</font>

635
00:35:44,450 --> 00:35:48,578
<font color="#CCCCCC">yada</font>

636
00:35:44,809 --> 00:35:48,579
<font color="#E5E5E5">then we add in the analysis</font><font color="#CCCCCC"> results</font>

637
00:35:48,730 --> 00:35:58,049
what's that right<font color="#E5E5E5"> here</font>

638
00:35:55,170 --> 00:36:01,530
<font color="#CCCCCC">I couldn't fit it on that slide so I so</font>

639
00:35:58,049 --> 00:36:04,170
I<font color="#E5E5E5"> referred</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> later I'm glad you're</font>

640
00:36:01,530 --> 00:36:05,359
following<font color="#CCCCCC"> along so built function API</font>

641
00:36:04,170 --> 00:36:10,559
what the hell is that

642
00:36:05,359 --> 00:36:12,839
turns out<font color="#E5E5E5"> its function actually defined</font>

643
00:36:10,559 --> 00:36:15,900
in calling<font color="#CCCCCC"> py it's not just in an</font>

644
00:36:12,839 --> 00:36:17,819
intrinsic thing and it's it does all the

645
00:36:15,900 --> 00:36:19,440
heavy<font color="#CCCCCC"> lifting I again I won't</font><font color="#E5E5E5"> go through</font>

646
00:36:17,819 --> 00:36:21,119
all<font color="#E5E5E5"> this but I do want to say the</font>

647
00:36:19,440 --> 00:36:24,960
emulation monitor just keeps track<font color="#CCCCCC"> of</font>

648
00:36:21,119 --> 00:36:28,140
all<font color="#E5E5E5"> of the maximum stack offset that has</font>

649
00:36:24,960 --> 00:36:31,170
been that's<font color="#E5E5E5"> been found during an</font>

650
00:36:28,140 --> 00:36:33,660
emulation run so the max stack offset

651
00:36:31,170 --> 00:36:35,730
and we divide<font color="#E5E5E5"> that by four in this</font>

652
00:36:33,660 --> 00:36:38,848
<font color="#CCCCCC">32-bit case</font><font color="#E5E5E5"> and that's the argument</font>

653
00:36:35,730 --> 00:36:42,660
count if the argument<font color="#CCCCCC"> can't this</font><font color="#E5E5E5"> is for</font>

654
00:36:38,849 --> 00:36:44,160
i386<font color="#E5E5E5"> 32-bit just so you know there's a</font>

655
00:36:42,660 --> 00:36:48,058
lot there's a few things that<font color="#CCCCCC"> are kind</font>

656
00:36:44,160 --> 00:36:50,430
of assumed here we start off with<font color="#CCCCCC"> C</font>

657
00:36:48,059 --> 00:36:52,619
<font color="#E5E5E5">deckle</font><font color="#CCCCCC"> C this</font><font color="#E5E5E5"> is that dozen calling</font>

658
00:36:50,430 --> 00:36:55,230
conventions<font color="#E5E5E5"> we start off with</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> deckle</font>

659
00:36:52,619 --> 00:36:56,760
because why not<font color="#CCCCCC"> very likely it's going</font>

660
00:36:55,230 --> 00:37:02,549
<font color="#E5E5E5">to be C</font><font color="#CCCCCC"> deco</font><font color="#E5E5E5"> unless we can prove</font>

661
00:36:56,760 --> 00:37:05,190
<font color="#E5E5E5">otherwise</font><font color="#CCCCCC"> if it returns bytes meaning at</font>

662
00:37:02,549 --> 00:37:09,000
<font color="#CCCCCC">the very end of the function when it</font>

663
00:37:05,190 --> 00:37:12,000
hits when it does the return if it

664
00:37:09,000 --> 00:37:14,490
<font color="#CCCCCC">returns like 8 ret 8 anybody know that</font>

665
00:37:12,000 --> 00:37:17,309
<font color="#CCCCCC">one</font><font color="#E5E5E5"> on until architecture ret 8 says</font>

666
00:37:14,490 --> 00:37:19,229
well return<font color="#E5E5E5"> down here to this place but</font>

667
00:37:17,309 --> 00:37:23,309
then knock off eight bytes off this off

668
00:37:19,230 --> 00:37:25,950
the off the<font color="#E5E5E5"> stack which</font><font color="#CCCCCC"> is called Kali</font>

669
00:37:23,309 --> 00:37:30,030
clean up the guy who got called cleans

670
00:37:25,950 --> 00:37:32,669
up the call stack<font color="#E5E5E5"> so if that's found to</font>

671
00:37:30,030 --> 00:37:35,609
be non none then we know what standard

672
00:37:32,670 --> 00:37:39,599
call<font color="#E5E5E5"> C</font><font color="#CCCCCC"> deckle doesn't do that blah blah</font>

673
00:37:35,609 --> 00:37:42,180
blah<font color="#E5E5E5"> stack index undefined keys this</font><font color="#CCCCCC"> is</font>

674
00:37:39,599 --> 00:37:45,660
<font color="#CCCCCC">really cool the emulator as I said</font>

675
00:37:42,180 --> 00:37:48,058
before tracks on initialized accesses

676
00:37:45,660 --> 00:37:49,680
<font color="#E5E5E5">I've stuff so in the next slide which</font>

677
00:37:48,059 --> 00:37:52,170
<font color="#E5E5E5">this function was too big for</font><font color="#CCCCCC"> me to</font>

678
00:37:49,680 --> 00:37:54,480
<font color="#E5E5E5">actually have you see it and fit it all</font>

679
00:37:52,170 --> 00:37:56,369
on<font color="#E5E5E5"> the side so this is</font><font color="#CCCCCC"> that reference</font>

680
00:37:54,480 --> 00:37:57,900
point this is<font color="#CCCCCC"> not read this is not the</font>

681
00:37:56,369 --> 00:38:00,720
second<font color="#E5E5E5"> time this is</font><font color="#CCCCCC"> like the pivotal</font>

682
00:37:57,900 --> 00:38:03,869
point so then we walk through the the

683
00:38:00,720 --> 00:38:07,509
undefined<font color="#E5E5E5"> keys and we try to figure out</font>

684
00:38:03,869 --> 00:38:10,480
just how many<font color="#E5E5E5"> are</font>

685
00:38:07,510 --> 00:38:11,920
how many of the actual<font color="#CCCCCC"> things that are</font>

686
00:38:10,480 --> 00:38:14,800
used for<font color="#CCCCCC"> that calling convention</font>

687
00:38:11,920 --> 00:38:16,810
arguments are<font color="#CCCCCC"> use that we know if we hit</font>

688
00:38:14,800 --> 00:38:19,510
one<font color="#E5E5E5"> that's not been uninitialized</font><font color="#CCCCCC"> had</font>

689
00:38:16,810 --> 00:38:20,980
uninitialized used<font color="#E5E5E5"> that's the end of our</font>

690
00:38:19,510 --> 00:38:31,350
arguments we've got like four or

691
00:38:20,980 --> 00:38:31,350
<font color="#CCCCCC">whatever it</font><font color="#E5E5E5"> is okay</font>

692
00:38:34,420 --> 00:38:41,920
<font color="#E5E5E5">analysis monitor this is the guy that</font>

693
00:38:37,090 --> 00:38:43,030
<font color="#CCCCCC">gets caught created and plugged in it's</font>

694
00:38:41,920 --> 00:38:48,280
<font color="#E5E5E5">pretty simple really</font>

695
00:38:43,030 --> 00:38:52,570
it subclasses vivisect<font color="#CCCCCC"> MPM you monitor</font>

696
00:38:48,280 --> 00:38:54,790
analysis monitor we give it a set up a

697
00:38:52,570 --> 00:38:56,770
constructor and then if we define

698
00:38:54,790 --> 00:38:59,980
pre-hook then that pre-hook gets called

699
00:38:56,770 --> 00:39:02,530
before<font color="#E5E5E5"> every instruction in this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> we</font>

700
00:38:59,980 --> 00:39:05,830
<font color="#CCCCCC">just look to see</font><font color="#E5E5E5"> if the OP is in what's</font>

701
00:39:02,530 --> 00:39:07,570
called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bad ops list</font><font color="#E5E5E5"> so we we go</font>

702
00:39:05,830 --> 00:39:08,799
through and<font color="#E5E5E5"> we identify a bunch of</font>

703
00:39:07,570 --> 00:39:11,650
things<font color="#E5E5E5"> that really just should never</font>

704
00:39:08,800 --> 00:39:15,150
<font color="#E5E5E5">happen like instructions that happen</font>

705
00:39:11,650 --> 00:39:19,600
that decode from<font color="#E5E5E5"> all zeros or all ffff</font>

706
00:39:15,150 --> 00:39:22,150
<font color="#E5E5E5">and that's in this list</font><font color="#CCCCCC"> so if the opcode</font>

707
00:39:19,600 --> 00:39:24,370
<font color="#E5E5E5">is in that list then</font><font color="#CCCCCC"> we just stop</font>

708
00:39:22,150 --> 00:39:29,470
there's an<font color="#E5E5E5"> exception there says this</font>

709
00:39:24,370 --> 00:39:32,319
can't be we're done otherwise<font color="#E5E5E5"> we call</font>

710
00:39:29,470 --> 00:39:34,870
the<font color="#E5E5E5"> parents pre-hook and then we check</font>

711
00:39:32,320 --> 00:39:39,790
this is that bit if it's a<font color="#E5E5E5"> return and</font>

712
00:39:34,870 --> 00:39:42,580
it's got an operand<font color="#E5E5E5"> then grab that</font>

713
00:39:39,790 --> 00:39:44,440
<font color="#E5E5E5">operand</font><font color="#CCCCCC"> it's got an immediate value</font><font color="#E5E5E5"> and</font>

714
00:39:42,580 --> 00:39:46,630
<font color="#CCCCCC">we'll store</font><font color="#E5E5E5"> that because that's</font>

715
00:39:44,440 --> 00:39:50,410
important information<font color="#CCCCCC"> for the standard</font>

716
00:39:46,630 --> 00:39:52,510
call no I<font color="#E5E5E5"> do not mean</font><font color="#CCCCCC"> for you to become</font>

717
00:39:50,410 --> 00:39:53,920
great experts at calling conventions

718
00:39:52,510 --> 00:39:56,620
here<font color="#E5E5E5"> I just</font><font color="#CCCCCC"> wanted to give</font><font color="#E5E5E5"> you some</font>

719
00:39:53,920 --> 00:40:01,420
pragmatic examples of how emulation is

720
00:39:56,620 --> 00:40:04,569
already in use for amd64<font color="#E5E5E5"> I cut out</font><font color="#CCCCCC"> a ton</font>

721
00:40:01,420 --> 00:40:07,360
of stuff but for if if the calling

722
00:40:04,570 --> 00:40:09,220
<font color="#CCCCCC">convention is system five amd64</font><font color="#E5E5E5"> call was</font>

723
00:40:07,360 --> 00:40:11,140
really easy it just<font color="#E5E5E5"> says if it was if it</font>

724
00:40:09,220 --> 00:40:15,970
<font color="#CCCCCC">was</font><font color="#E5E5E5"> brought in from an elf file that's</font>

725
00:40:11,140 --> 00:40:18,609
the default calling convention if the<font color="#CCCCCC"> MU</font>

726
00:40:15,970 --> 00:40:21,450
<font color="#CCCCCC">on stack max is</font><font color="#E5E5E5"> greater than zero go</font>

727
00:40:18,610 --> 00:40:24,640
through and just<font color="#E5E5E5"> dig through</font>

728
00:40:21,450 --> 00:40:28,750
how many<font color="#CCCCCC"> arguments we've run into if</font>

729
00:40:24,640 --> 00:40:33,190
we've got like<font color="#E5E5E5"> 40 arguments bail</font>

730
00:40:28,750 --> 00:40:37,570
<font color="#E5E5E5">something's wrong and then we set up the</font>

731
00:40:33,190 --> 00:40:41,320
API another use that<font color="#E5E5E5"> I actually like a</font>

732
00:40:37,570 --> 00:40:44,620
lot<font color="#E5E5E5"> pointer analysis when when running a</font>

733
00:40:41,320 --> 00:40:46,840
vivisect analysis pass at the very end

734
00:40:44,620 --> 00:40:47,710
of everything<font color="#E5E5E5"> when you've taken all</font><font color="#CCCCCC"> of</font>

735
00:40:46,840 --> 00:40:49,840
<font color="#E5E5E5">your entry points and you've</font>

736
00:40:47,710 --> 00:40:53,620
disassembled them<font color="#E5E5E5"> and stored</font><font color="#CCCCCC"> information</font>

737
00:40:49,840 --> 00:40:56,860
<font color="#E5E5E5">about them then any pointer</font><font color="#CCCCCC"> that we can</font>

738
00:40:53,620 --> 00:40:58,359
<font color="#E5E5E5">find in memory that's not defined and</font>

739
00:40:56,860 --> 00:41:01,900
doesn't have something<font color="#CCCCCC"> known about it</font>

740
00:40:58,360 --> 00:41:05,320
gets run through this function<font color="#E5E5E5"> analyze</font>

741
00:41:01,900 --> 00:41:09,550
pointer we see first of all hey if

742
00:41:05,320 --> 00:41:11,980
there's already a<font color="#E5E5E5"> location if we've</font>

743
00:41:09,550 --> 00:41:17,830
analyzed<font color="#E5E5E5"> that location already get out</font>

744
00:41:11,980 --> 00:41:20,980
otherwise<font color="#CCCCCC"> is it probably a string</font><font color="#E5E5E5"> if so</font>

745
00:41:17,830 --> 00:41:23,830
hey make<font color="#CCCCCC"> it a string</font><font color="#E5E5E5"> is it probably</font>

746
00:41:20,980 --> 00:41:28,540
<font color="#CCCCCC">unicode if if so cool</font>

747
00:41:23,830 --> 00:41:36,340
make a<font color="#CCCCCC"> unicode is it probably code G</font>

748
00:41:28,540 --> 00:41:37,470
where's it it's probably<font color="#CCCCCC"> code</font><font color="#E5E5E5"> Paul on</font>

749
00:41:36,340 --> 00:41:40,750
the next slide

750
00:41:37,470 --> 00:41:42,850
<font color="#E5E5E5">it is probably code so we go a little</font>

751
00:41:40,750 --> 00:41:44,770
<font color="#E5E5E5">bit deeper</font><font color="#CCCCCC"> hey is this executable</font>

752
00:41:42,850 --> 00:41:48,640
<font color="#E5E5E5">because this is if this isn't executable</font>

753
00:41:44,770 --> 00:41:50,380
than you know<font color="#E5E5E5"> it's good if it has a</font>

754
00:41:48,640 --> 00:41:52,330
function<font color="#CCCCCC"> signature because it turns out</font>

755
00:41:50,380 --> 00:41:54,720
compilers like to use pretty similar

756
00:41:52,330 --> 00:41:58,720
types of bytes that start out every

757
00:41:54,720 --> 00:42:00,520
function called a function Prolog if

758
00:41:58,720 --> 00:42:07,720
it's if it fits<font color="#E5E5E5"> into a function</font>

759
00:42:00,520 --> 00:42:09,759
<font color="#CCCCCC">signature then cool if yeah if we've</font>

760
00:42:07,720 --> 00:42:12,339
already analyzed for whether<font color="#CCCCCC"> it's code</font>

761
00:42:09,760 --> 00:42:15,100
then bail<font color="#E5E5E5"> because it obviously</font><font color="#CCCCCC"> isn't</font>

762
00:42:12,340 --> 00:42:17,440
because it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> been defined</font><font color="#CCCCCC"> alright</font>

763
00:42:15,100 --> 00:42:18,520
now<font color="#E5E5E5"> once we've gotten all</font><font color="#CCCCCC"> that crap out</font>

764
00:42:17,440 --> 00:42:21,760
<font color="#E5E5E5">of the way let's just administrative</font>

765
00:42:18,520 --> 00:42:25,540
garbage the next thing is give me an

766
00:42:21,760 --> 00:42:27,930
emulator slap in this watcher emulation

767
00:42:25,540 --> 00:42:27,930
monitor

768
00:42:29,890 --> 00:42:42,150
function<font color="#CCCCCC"> max</font><font color="#E5E5E5"> hit one if it makes it</font>

769
00:42:35,350 --> 00:42:45,580
<font color="#CCCCCC">through without bailing</font><font color="#E5E5E5"> like bad</font><font color="#CCCCCC"> op or</font>

770
00:42:42,150 --> 00:42:48,250
you know memory<font color="#E5E5E5"> or just like undefined</font>

771
00:42:45,580 --> 00:42:51,220
or something bad happens then it's

772
00:42:48,250 --> 00:42:54,190
clearly not<font color="#CCCCCC"> coke if it gets all the way</font>

773
00:42:51,220 --> 00:42:59,919
<font color="#E5E5E5">through and it looks</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> then return</font>

774
00:42:54,190 --> 00:43:03,420
true it's probably code<font color="#CCCCCC"> Watchers</font>

775
00:42:59,920 --> 00:43:09,720
mentioned<font color="#E5E5E5"> no time for it go check it out</font>

776
00:43:03,420 --> 00:43:11,350
we can also look at wait what<font color="#E5E5E5"> damn it</font><font color="#CCCCCC"> I</font>

777
00:43:09,720 --> 00:43:13,779
got ahead of<font color="#E5E5E5"> myself</font>

778
00:43:11,350 --> 00:43:17,049
<font color="#CCCCCC">I</font><font color="#E5E5E5"> guess he's too confused so that was</font>

779
00:43:13,780 --> 00:43:18,730
one thing<font color="#CCCCCC"> for following</font><font color="#E5E5E5"> pointers this is</font>

780
00:43:17,050 --> 00:43:20,710
another one that<font color="#E5E5E5"> runs at the end of code</font>

781
00:43:18,730 --> 00:43:24,430
<font color="#E5E5E5">that</font><font color="#CCCCCC"> looks at anything</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we've</font>

782
00:43:20,710 --> 00:43:27,310
<font color="#E5E5E5">identified as a pointer do the exact</font>

783
00:43:24,430 --> 00:43:30,009
<font color="#CCCCCC">same</font><font color="#E5E5E5"> thing is it is it executable have</font>

784
00:43:27,310 --> 00:43:32,799
we tried it<font color="#CCCCCC"> already</font><font color="#E5E5E5"> get an emulator slap</font>

785
00:43:30,010 --> 00:43:38,950
and<font color="#CCCCCC"> watcher run function</font><font color="#E5E5E5"> see if it's</font>

786
00:43:32,800 --> 00:43:41,650
good<font color="#CCCCCC"> a</font><font color="#E5E5E5"> word</font><font color="#CCCCCC"> about snapshots I have a</font>

787
00:43:38,950 --> 00:43:43,689
<font color="#E5E5E5">couple minutes but not much one of the</font>

788
00:43:41,650 --> 00:43:46,780
cool<font color="#CCCCCC"> things about an emulator</font><font color="#E5E5E5"> for this</font>

789
00:43:43,690 --> 00:43:49,570
type of<font color="#E5E5E5"> work is that I can emulate</font>

790
00:43:46,780 --> 00:43:52,900
through to a particular point<font color="#E5E5E5"> in</font>

791
00:43:49,570 --> 00:43:55,540
emulation<font color="#E5E5E5"> maybe that may be the point</font>

792
00:43:52,900 --> 00:43:59,620
that allows an attacker<font color="#E5E5E5"> to provide it in</font>

793
00:43:55,540 --> 00:44:02,529
input<font color="#E5E5E5"> I can save a snapshot of it</font>

794
00:43:59,620 --> 00:44:06,130
I can provide inputs to it and allow

795
00:44:02,530 --> 00:44:10,090
emulation to go and after some

796
00:44:06,130 --> 00:44:13,020
predetermined<font color="#CCCCCC"> blah trigger I can say</font>

797
00:44:10,090 --> 00:44:16,360
forget<font color="#E5E5E5"> it it didn't work snap</font><font color="#CCCCCC"> back just</font>

798
00:44:13,020 --> 00:44:17,440
slam the<font color="#E5E5E5"> original context into</font><font color="#CCCCCC"> the</font>

799
00:44:16,360 --> 00:44:22,360
emulator<font color="#CCCCCC"> and go again</font>

800
00:44:17,440 --> 00:44:25,480
so<font color="#E5E5E5"> emulation fuzzing so here I get</font><font color="#CCCCCC"> a</font>

801
00:44:22,360 --> 00:44:27,780
snapshot of an emulator<font color="#E5E5E5"> and in emulators</font>

802
00:44:25,480 --> 00:44:32,290
just to<font color="#CCCCCC"> register values memory tupple</font>

803
00:44:27,780 --> 00:44:33,720
<font color="#CCCCCC">okay so it takes basically all the all</font>

804
00:44:32,290 --> 00:44:36,550
the<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> makes up the emulator</font>

805
00:44:33,720 --> 00:44:39,310
offers it up and then there's a there's

806
00:44:36,550 --> 00:44:41,620
<font color="#CCCCCC">another one called set EMU snap</font><font color="#E5E5E5"> that</font>

807
00:44:39,310 --> 00:44:43,259
you'll see in a second so<font color="#E5E5E5"> I just wanted</font>

808
00:44:41,620 --> 00:44:44,759
to show<font color="#E5E5E5"> you the registers</font>

809
00:44:43,260 --> 00:44:48,020
this is that register<font color="#E5E5E5"> that we just set</font>

810
00:44:44,760 --> 00:44:51,030
earlier<font color="#CCCCCC"> into four seven</font><font color="#E5E5E5"> eight four five</font>

811
00:44:48,020 --> 00:44:57,120
and<font color="#E5E5E5"> a bunch of zeros here's our four</font>

812
00:44:51,030 --> 00:45:00,000
because we<font color="#E5E5E5"> executed that one opcode if I</font>

813
00:44:57,120 --> 00:45:02,490
set the zero register which<font color="#CCCCCC"> is our zero</font>

814
00:45:00,000 --> 00:45:05,970
on<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> till one three three seven hex</font>

815
00:45:02,490 --> 00:45:08,640
<font color="#E5E5E5">and then I slammed that snapshot back in</font>

816
00:45:05,970 --> 00:45:10,950
back<font color="#E5E5E5"> into the emulator basically just</font>

817
00:45:08,640 --> 00:45:15,930
get rid<font color="#E5E5E5"> of everything and</font><font color="#CCCCCC"> put this back</font>

818
00:45:10,950 --> 00:45:17,669
into<font color="#E5E5E5"> memory and</font><font color="#CCCCCC"> then I get register 0</font><font color="#E5E5E5"> it</font>

819
00:45:15,930 --> 00:45:24,330
returns the original value<font color="#E5E5E5"> not the one</font>

820
00:45:17,670 --> 00:45:29,160
<font color="#E5E5E5">that I said</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> gdb no problem this is</font>

821
00:45:24,330 --> 00:45:31,200
just a copy of the<font color="#E5E5E5"> other picture Rob</font>

822
00:45:29,160 --> 00:45:35,520
<font color="#E5E5E5">caches we don't have time to talk</font>

823
00:45:31,200 --> 00:45:37,919
<font color="#E5E5E5">through a decent analysis of Rob gadgets</font>

824
00:45:35,520 --> 00:45:39,660
and I actually<font color="#E5E5E5"> honestly would get shot</font>

825
00:45:37,920 --> 00:45:41,310
if I told you a lot of<font color="#CCCCCC"> the things that I</font>

826
00:45:39,660 --> 00:45:43,740
can do with with emulation and<font color="#E5E5E5"> Rob</font>

827
00:45:41,310 --> 00:45:47,220
gadgets but here's some<font color="#E5E5E5"> things to tickle</font>

828
00:45:43,740 --> 00:45:50,310
your brain<font color="#E5E5E5"> a monitor or code that</font>

829
00:45:47,220 --> 00:45:52,379
<font color="#E5E5E5">watches for op is</font><font color="#CCCCCC"> return start at</font><font color="#E5E5E5"> zero</font>

830
00:45:50,310 --> 00:45:53,640
don't necessarily go to a<font color="#E5E5E5"> return</font>

831
00:45:52,380 --> 00:45:54,870
<font color="#CCCCCC">instruction because sometimes on</font>

832
00:45:53,640 --> 00:45:58,680
different architectures that<font color="#E5E5E5"> can look</font>

833
00:45:54,870 --> 00:46:01,470
<font color="#CCCCCC">very different and</font><font color="#E5E5E5"> sometimes yeah</font>

834
00:45:58,680 --> 00:46:04,649
anyway whatever<font color="#E5E5E5"> start at zero increment</font>

835
00:46:01,470 --> 00:46:08,279
by one go from a set amount of

836
00:46:04,650 --> 00:46:10,500
instructions and<font color="#E5E5E5"> then bail if I haven't</font>

837
00:46:08,280 --> 00:46:12,660
gotten to<font color="#CCCCCC"> a return bail</font><font color="#E5E5E5"> if I get to a</font>

838
00:46:10,500 --> 00:46:18,300
return<font color="#CCCCCC"> before then now we do</font><font color="#E5E5E5"> some</font>

839
00:46:12,660 --> 00:46:20,819
<font color="#CCCCCC">analyses things like does the stack</font>

840
00:46:18,300 --> 00:46:23,910
pointer now hold the value of some other

841
00:46:20,820 --> 00:46:27,990
register that's very interesting

842
00:46:23,910 --> 00:46:29,640
<font color="#CCCCCC">information is</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> 401 less turns out</font>

843
00:46:27,990 --> 00:46:34,740
increment and decrement is actually very

844
00:46:29,640 --> 00:46:37,770
<font color="#E5E5E5">powerful</font><font color="#CCCCCC"> Rob gadget have we written the</font>

845
00:46:34,740 --> 00:46:43,830
<font color="#CCCCCC">value in r5</font><font color="#E5E5E5"> into the location pointed to</font>

846
00:46:37,770 --> 00:46:45,330
by<font color="#E5E5E5"> r4 this is called a magic right r5</font>

847
00:46:43,830 --> 00:46:47,940
and r6<font color="#E5E5E5"> are they loaded from</font><font color="#CCCCCC"> the stack</font>

848
00:46:45,330 --> 00:46:50,910
<font color="#E5E5E5">that's super powerful especially if our</font>

849
00:46:47,940 --> 00:46:53,370
<font color="#CCCCCC">five and four r6 are really the parts of</font>

850
00:46:50,910 --> 00:46:55,399
the magic right I<font color="#E5E5E5"> found this once in a</font>

851
00:46:53,370 --> 00:46:59,339
<font color="#E5E5E5">version of Firefox it was beaut</font>

852
00:46:55,400 --> 00:47:01,470
<font color="#E5E5E5">it's like I could I had arbitrary</font>

853
00:46:59,339 --> 00:47:03,839
<font color="#CCCCCC">readwrite all I needed was</font><font color="#E5E5E5"> just to fill</font>

854
00:47:01,470 --> 00:47:06,439
<font color="#CCCCCC">up the stack with what</font><font color="#E5E5E5"> where it was</font>

855
00:47:03,839 --> 00:47:08,578
amazing<font color="#E5E5E5"> it's real</font>

856
00:47:06,440 --> 00:47:12,240
the next part though is<font color="#E5E5E5"> you got to look</font>

857
00:47:08,579 --> 00:47:15,030
<font color="#E5E5E5">for the bad stuff if you write to some</font>

858
00:47:12,240 --> 00:47:17,430
clobbering place in memory<font color="#CCCCCC"> or a place</font>

859
00:47:15,030 --> 00:47:26,070
<font color="#E5E5E5">that doesn't exist that's kind of a</font>

860
00:47:17,430 --> 00:47:27,960
problem<font color="#E5E5E5"> no I love</font><font color="#CCCCCC"> Symbolics I have in</font>

861
00:47:26,070 --> 00:47:30,210
<font color="#E5E5E5">recent years come to</font><font color="#CCCCCC"> recognize</font><font color="#E5E5E5"> that</font>

862
00:47:27,960 --> 00:47:36,240
symbolic analysis and graph theory is a

863
00:47:30,210 --> 00:47:38,730
super<font color="#E5E5E5"> powerful form of analysis but</font>

864
00:47:36,240 --> 00:47:41,339
emulation still is<font color="#E5E5E5"> very powerful and</font>

865
00:47:38,730 --> 00:47:49,460
<font color="#E5E5E5">they solve different problems and have</font>

866
00:47:41,339 --> 00:47:52,470
both capabilities is<font color="#E5E5E5"> super powerful</font><font color="#CCCCCC"> your</font>

867
00:47:49,460 --> 00:47:55,410
bug hunters welcome<font color="#E5E5E5"> there's always cool</font>

868
00:47:52,470 --> 00:47:57,598
stuff to be<font color="#CCCCCC"> done on vivisect</font><font color="#E5E5E5"> and new</font>

869
00:47:55,410 --> 00:48:01,859
architectures to implement bugs to

870
00:47:57,599 --> 00:48:06,839
squish functionality to add we welcome

871
00:48:01,859 --> 00:48:09,359
some<font color="#E5E5E5"> eyes and</font><font color="#CCCCCC"> then I included a</font><font color="#E5E5E5"> little</font>

872
00:48:06,839 --> 00:48:11,819
cheat sheet<font color="#E5E5E5"> how to get involved with</font>

873
00:48:09,359 --> 00:48:14,430
<font color="#E5E5E5">interactive vivisect get into Python</font>

874
00:48:11,819 --> 00:48:17,099
import vivisect<font color="#E5E5E5"> create a workspace by</font>

875
00:48:14,430 --> 00:48:19,618
saying<font color="#CCCCCC"> DIF active workspace</font><font color="#E5E5E5"> and then</font>

876
00:48:17,099 --> 00:48:22,680
either<font color="#E5E5E5"> if I already have a vivisect</font>

877
00:48:19,619 --> 00:48:26,130
workspace created<font color="#CCCCCC"> PW load workspace and</font>

878
00:48:22,680 --> 00:48:28,020
<font color="#E5E5E5">then I give it a name if not load from</font>

879
00:48:26,130 --> 00:48:30,750
file<font color="#E5E5E5"> and I give it</font><font color="#CCCCCC"> a file name of the</font>

880
00:48:28,020 --> 00:48:33,720
thing<font color="#E5E5E5"> that I want to go analyze I kick</font>

881
00:48:30,750 --> 00:48:36,000
off<font color="#E5E5E5"> an analysis pass by calling analyze</font>

882
00:48:33,720 --> 00:48:38,430
and at the end I save workspace<font color="#CCCCCC"> I do</font>

883
00:48:36,000 --> 00:48:44,660
this actually<font color="#CCCCCC"> on either one if I do any</font>

884
00:48:38,430 --> 00:48:47,069
changes<font color="#CCCCCC"> to it that's</font><font color="#E5E5E5"> it if you</font><font color="#CCCCCC"> want to</font>

885
00:48:44,660 --> 00:48:51,089
get in and<font color="#E5E5E5"> play with the emulator</font>

886
00:48:47,069 --> 00:48:54,119
start off with<font color="#E5E5E5"> that use the</font><font color="#CCCCCC"> vivisect</font>

887
00:48:51,089 --> 00:48:56,578
workspace get emulator get memory<font color="#CCCCCC"> maps</font>

888
00:48:54,119 --> 00:49:01,200
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a cool way to show you the</font>

889
00:48:56,579 --> 00:49:04,800
memory<font color="#E5E5E5"> maps in the memory subsystem we</font>

890
00:49:01,200 --> 00:49:07,169
can add memory<font color="#E5E5E5"> maps we can parse op</font>

891
00:49:04,800 --> 00:49:09,570
codes and actually get a vivisect<font color="#E5E5E5"> opcode</font>

892
00:49:07,170 --> 00:49:12,550
object back

893
00:49:09,570 --> 00:49:15,220
we can step<font color="#E5E5E5"> through one instruction or</font>

894
00:49:12,550 --> 00:49:16,960
run an entire function<font color="#E5E5E5"> we can set the</font>

895
00:49:15,220 --> 00:49:18,310
<font color="#E5E5E5">program counter</font><font color="#CCCCCC"> and getting is the same</font>

896
00:49:16,960 --> 00:49:22,360
thing without<font color="#E5E5E5"> the program counter</font>

897
00:49:18,310 --> 00:49:26,100
argument we can set a register by name

898
00:49:22,360 --> 00:49:29,140
<font color="#CCCCCC">or get it without</font><font color="#E5E5E5"> this vowel argument</font>

899
00:49:26,100 --> 00:49:31,480
<font color="#CCCCCC">gonna read memory</font><font color="#E5E5E5"> give it an address and</font>

900
00:49:29,140 --> 00:49:32,680
<font color="#E5E5E5">then just the number of bytes</font><font color="#CCCCCC"> we're</font>

901
00:49:31,480 --> 00:49:34,450
<font color="#E5E5E5">gonna write memory I didn't</font><font color="#CCCCCC"> include that</font>

902
00:49:32,680 --> 00:49:38,259
in there but write memory<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very</font>

903
00:49:34,450 --> 00:49:40,240
similar read mem value if we've if we

904
00:49:38,260 --> 00:49:43,650
know we<font color="#E5E5E5"> want a 32-bit</font><font color="#CCCCCC"> integer we just</font>

905
00:49:40,240 --> 00:49:47,549
hand this address in with a number<font color="#CCCCCC"> four</font>

906
00:49:43,650 --> 00:49:53,890
<font color="#CCCCCC">four four bytes</font><font color="#E5E5E5"> not bits and help</font><font color="#CCCCCC"> emu</font>

907
00:49:47,550 --> 00:49:56,080
very helpful vivisect has a integrated

908
00:49:53,890 --> 00:49:58,120
server component that allows<font color="#E5E5E5"> for</font>

909
00:49:56,080 --> 00:50:00,819
collaborative disassembly emulation

910
00:49:58,120 --> 00:50:03,640
tooling whatever what I'll often do is

911
00:50:00,820 --> 00:50:05,860
I'll have<font color="#E5E5E5"> the GUI up against a server</font>

912
00:50:03,640 --> 00:50:08,890
<font color="#E5E5E5">that hosts the vivisect workspace and</font>

913
00:50:05,860 --> 00:50:11,260
then my<font color="#E5E5E5"> command-line tool also connects</font>

914
00:50:08,890 --> 00:50:13,990
to the same server same workspace<font color="#E5E5E5"> and</font>

915
00:50:11,260 --> 00:50:16,300
then what I do in the<font color="#CCCCCC"> command-line</font><font color="#E5E5E5"> gets</font>

916
00:50:13,990 --> 00:50:17,950
kicked<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> GUI easily</font><font color="#E5E5E5"> now I can do</font>

917
00:50:16,300 --> 00:50:25,720
it<font color="#CCCCCC"> in the GUI but it's</font><font color="#E5E5E5"> just it's not</font><font color="#CCCCCC"> my</font>

918
00:50:17,950 --> 00:50:30,250
<font color="#E5E5E5">Python so in conclusion interactive</font>

919
00:50:25,720 --> 00:50:34,149
Python static<font color="#E5E5E5"> analysis emulation and</font>

920
00:50:30,250 --> 00:50:34,890
<font color="#CCCCCC">Symbolics I love it all go play go and</font>

921
00:50:34,150 --> 00:50:41,620
do great<font color="#E5E5E5"> things</font>

922
00:50:34,890 --> 00:50:47,049
<font color="#CCCCCC">pass</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> what you have learned and then I</font>

923
00:50:41,620 --> 00:50:48,910
left some crap at the end so<font color="#E5E5E5"> - yeah I</font>

924
00:50:47,050 --> 00:50:51,780
<font color="#CCCCCC">won't tell you anyway</font><font color="#E5E5E5"> thank you very</font>

925
00:50:48,910 --> 00:50:51,779
<font color="#CCCCCC">much any questions</font>

926
00:50:52,060 --> 00:50:59,860
[Applause]

