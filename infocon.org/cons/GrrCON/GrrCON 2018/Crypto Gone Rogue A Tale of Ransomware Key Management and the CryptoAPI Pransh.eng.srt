1
00:00:01,140 --> 00:00:06,210
<font color="#E5E5E5">okay let's get started</font>

2
00:00:03,300 --> 00:00:09,570
<font color="#E5E5E5">hello everybody</font><font color="#CCCCCC"> welcome thank you</font><font color="#E5E5E5"> for</font>

3
00:00:06,210 --> 00:00:12,120
<font color="#CCCCCC">coming we're</font><font color="#E5E5E5"> very excited to be here</font><font color="#CCCCCC"> so</font>

4
00:00:09,570 --> 00:00:14,820
this<font color="#E5E5E5"> talk is about ransomware key</font>

5
00:00:12,120 --> 00:00:16,740
<font color="#E5E5E5">management and the crypto API basically</font>

6
00:00:14,820 --> 00:00:19,350
<font color="#CCCCCC">we all know what ransomware is</font><font color="#E5E5E5"> and what</font>

7
00:00:16,740 --> 00:00:20,698
it<font color="#CCCCCC"> does but during this talk we</font><font color="#E5E5E5"> want to</font>

8
00:00:19,350 --> 00:00:23,010
discuss the<font color="#E5E5E5"> intricacies of key</font>

9
00:00:20,699 --> 00:00:24,810
<font color="#E5E5E5">management in ransomware discuss why</font>

10
00:00:23,010 --> 00:00:27,150
that's important<font color="#E5E5E5"> and then discuss</font>

11
00:00:24,810 --> 00:00:30,960
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> how it is implemented</font><font color="#E5E5E5"> in terms</font>

12
00:00:27,150 --> 00:00:33,059
of crypto API functions on the<font color="#E5E5E5"> host so</font>

13
00:00:30,960 --> 00:00:35,280
this<font color="#CCCCCC"> would be agenda or</font><font color="#E5E5E5"> the structure of</font>

14
00:00:33,059 --> 00:00:37,980
the talk we<font color="#CCCCCC"> started with a little bit of</font>

15
00:00:35,280 --> 00:00:40,649
an introduction<font color="#E5E5E5"> and then we go ahead</font><font color="#CCCCCC"> and</font>

16
00:00:37,980 --> 00:00:42,930
discuss a particular<font color="#E5E5E5"> key management</font>

17
00:00:40,649 --> 00:00:44,280
<font color="#E5E5E5">scheme or a key management model known</font>

18
00:00:42,930 --> 00:00:47,910
<font color="#CCCCCC">as</font><font color="#E5E5E5"> the hybrid scheme which</font><font color="#CCCCCC"> is employed</font>

19
00:00:44,280 --> 00:00:49,739
and modern ransomware<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then we move</font>

20
00:00:47,910 --> 00:00:51,919
on to the<font color="#CCCCCC"> implementation details</font><font color="#E5E5E5"> where</font>

21
00:00:49,739 --> 00:00:54,899
<font color="#E5E5E5">we'll look at the details of crypto API</font>

22
00:00:51,920 --> 00:00:57,960
<font color="#E5E5E5">the cryptographic service providers on a</font>

23
00:00:54,899 --> 00:00:58,350
Windows machine<font color="#CCCCCC"> and</font><font color="#E5E5E5"> CNG and things like</font>

24
00:00:57,960 --> 00:01:01,379
<font color="#E5E5E5">that</font>

25
00:00:58,350 --> 00:01:04,290
and then finally we will take<font color="#E5E5E5"> the not</font>

26
00:01:01,379 --> 00:01:06,600
Petya ransomware disassemble it<font color="#E5E5E5"> and try</font>

27
00:01:04,290 --> 00:01:08,939
to understand<font color="#E5E5E5"> the crypto API functions</font>

28
00:01:06,600 --> 00:01:11,009
as they are<font color="#E5E5E5"> being used in the not petia</font>

29
00:01:08,939 --> 00:01:13,408
ransomware<font color="#CCCCCC"> and all and their that</font><font color="#E5E5E5"> are</font>

30
00:01:11,010 --> 00:01:16,890
being used<font color="#E5E5E5"> in all basically</font><font color="#CCCCCC"> almost all</font>

31
00:01:13,409 --> 00:01:18,330
modern ransomware finally we kind of put

32
00:01:16,890 --> 00:01:21,119
it all together in the form of

33
00:01:18,330 --> 00:01:23,520
ransomware<font color="#CCCCCC"> pseudocode</font><font color="#E5E5E5"> and then we</font>

34
00:01:21,119 --> 00:01:26,250
conclude the presentation<font color="#CCCCCC"> so a little</font>

35
00:01:23,520 --> 00:01:28,220
<font color="#E5E5E5">bit about us i'm fran chubachi I'm a PhD</font>

36
00:01:26,250 --> 00:01:31,200
candidate<font color="#CCCCCC"> at Michigan State University</font>

37
00:01:28,220 --> 00:01:31,829
<font color="#CCCCCC">the doc pictured is my one-year-old</font>

38
00:01:31,200 --> 00:01:33,479
puppy

39
00:01:31,829 --> 00:01:35,729
she's<font color="#E5E5E5"> the Dalmatian her name is Gabby</font>

40
00:01:33,479 --> 00:01:38,100
<font color="#CCCCCC">and she her favorite thing to do is</font>

41
00:01:35,729 --> 00:01:40,200
bring me a rope<font color="#E5E5E5"> to play with</font><font color="#CCCCCC"> to play</font><font color="#E5E5E5"> tug</font>

42
00:01:38,100 --> 00:01:41,970
<font color="#CCCCCC">of</font><font color="#E5E5E5"> war</font><font color="#CCCCCC"> with and especially</font><font color="#E5E5E5"> when I'm</font>

43
00:01:40,200 --> 00:01:43,979
working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> something important</font><font color="#CCCCCC"> like if</font>

44
00:01:41,970 --> 00:01:45,450
I'm<font color="#CCCCCC"> creating a presentation</font><font color="#E5E5E5"> so there are</font>

45
00:01:43,979 --> 00:01:48,060
any imperfections<font color="#CCCCCC"> in the presentation</font>

46
00:01:45,450 --> 00:01:50,040
today<font color="#E5E5E5"> we're gonna blame it on Gabby all</font>

47
00:01:48,060 --> 00:01:53,549
the work<font color="#CCCCCC"> that I do</font><font color="#E5E5E5"> I do with my</font><font color="#CCCCCC"> advisor</font>

48
00:01:50,040 --> 00:01:55,049
<font color="#E5E5E5">dr. n buddy he when he's not in his</font>

49
00:01:53,549 --> 00:01:59,070
<font color="#E5E5E5">office you can find him surfing or</font>

50
00:01:55,049 --> 00:02:01,110
canoeing<font color="#E5E5E5"> or playing hockey so let's talk</font>

51
00:01:59,070 --> 00:02:03,960
a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about why we're still</font>

52
00:02:01,110 --> 00:02:07,069
<font color="#E5E5E5">discussing ransomware in 2018 it's such</font>

53
00:02:03,960 --> 00:02:09,329
a 2017 thing isn't<font color="#E5E5E5"> it well not really</font>

54
00:02:07,069 --> 00:02:11,160
cryptid that the truth of the<font color="#CCCCCC"> matter is</font>

55
00:02:09,330 --> 00:02:11,970
<font color="#E5E5E5">that cryptid jacking has overshadowed</font>

56
00:02:11,160 --> 00:02:14,430
ransomware

57
00:02:11,970 --> 00:02:16,940
quite a bit in 2018

58
00:02:14,430 --> 00:02:20,310
because the same set of<font color="#CCCCCC"> cyber</font><font color="#E5E5E5"> criminals</font>

59
00:02:16,940 --> 00:02:23,340
<font color="#E5E5E5">financially motivated once go for go for</font>

60
00:02:20,310 --> 00:02:25,890
<font color="#CCCCCC">a</font><font color="#E5E5E5"> crypto jacking</font><font color="#CCCCCC"> that have interest in</font>

61
00:02:23,340 --> 00:02:28,049
ransomware so basically<font color="#E5E5E5"> crypto jacking</font>

62
00:02:25,890 --> 00:02:30,029
is a little easier<font color="#E5E5E5"> than ransomware</font>

63
00:02:28,049 --> 00:02:31,650
<font color="#E5E5E5">because of the acrobatics involved in</font>

64
00:02:30,030 --> 00:02:33,030
terms<font color="#E5E5E5"> of encryption routines and</font>

65
00:02:31,650 --> 00:02:35,610
<font color="#E5E5E5">basically things we're gonna see in this</font>

66
00:02:33,030 --> 00:02:38,580
<font color="#E5E5E5">presentation it's just easier</font><font color="#CCCCCC"> to do if</font>

67
00:02:35,610 --> 00:02:41,879
you can if you can download a mall a

68
00:02:38,580 --> 00:02:45,780
mining malware covertly<font color="#E5E5E5"> mining on</font>

69
00:02:41,879 --> 00:02:48,840
someone's computer<font color="#E5E5E5"> so so that's why I</font>

70
00:02:45,780 --> 00:02:51,480
believe<font color="#CCCCCC"> that crypto jacking</font><font color="#E5E5E5"> has stolen a</font>

71
00:02:48,840 --> 00:02:53,519
lot<font color="#E5E5E5"> of ransomware it's Thunder in 2018</font>

72
00:02:51,480 --> 00:02:57,209
but we're still seeing<font color="#E5E5E5"> instances of</font>

73
00:02:53,519 --> 00:02:58,680
ransomware like Sam Sam which<font color="#E5E5E5"> Sam Sam is</font>

74
00:02:57,209 --> 00:03:00,000
important for<font color="#E5E5E5"> two</font><font color="#CCCCCC"> reasons one has</font>

75
00:02:58,680 --> 00:03:01,769
changed its attack vector from the

76
00:03:00,000 --> 00:03:04,250
normal fishing<font color="#E5E5E5"> and exploiting a</font>

77
00:03:01,769 --> 00:03:07,109
vulnerability like eternal blue<font color="#E5E5E5"> to</font>

78
00:03:04,250 --> 00:03:09,780
actually exploiting<font color="#E5E5E5"> weakly secure RDP</font>

79
00:03:07,109 --> 00:03:11,310
sessions<font color="#E5E5E5"> also it is a targeted attack</font><font color="#CCCCCC"> so</font>

80
00:03:09,780 --> 00:03:13,379
as as opposed to the generic

81
00:03:11,310 --> 00:03:16,920
<font color="#E5E5E5">spray-and-pray kind of an approach that</font>

82
00:03:13,379 --> 00:03:21,030
ransomware<font color="#E5E5E5"> have used in the past</font><font color="#CCCCCC"> Sam Sam</font>

83
00:03:16,920 --> 00:03:23,578
chooses its targets wisely<font color="#E5E5E5"> so these are</font>

84
00:03:21,030 --> 00:03:26,639
<font color="#CCCCCC">just news headlines from from about a</font>

85
00:03:23,579 --> 00:03:28,590
month<font color="#E5E5E5"> ago about ransomware so the point</font>

86
00:03:26,639 --> 00:03:31,680
of<font color="#E5E5E5"> this is that ransomware is still very</font>

87
00:03:28,590 --> 00:03:32,940
<font color="#E5E5E5">much alive and kicking</font><font color="#CCCCCC"> so we all know</font>

88
00:03:31,680 --> 00:03:34,950
the<font color="#CCCCCC"> necessary elements of ransomware</font>

89
00:03:32,940 --> 00:03:36,389
I'll go<font color="#CCCCCC"> over this very quickly the first</font>

90
00:03:34,950 --> 00:03:38,488
thing is<font color="#E5E5E5"> to do is infiltrate the</font>

91
00:03:36,389 --> 00:03:40,019
computer<font color="#E5E5E5"> there's a lot of attack vectors</font>

92
00:03:38,489 --> 00:03:42,540
here<font color="#E5E5E5"> you can do social engineering</font>

93
00:03:40,019 --> 00:03:44,010
fishing you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> or you can exploit a</font>

94
00:03:42,540 --> 00:03:46,739
vulnerability like eternal blue and

95
00:03:44,010 --> 00:03:48,810
spread like worm<font color="#CCCCCC"> or you know exploit</font>

96
00:03:46,739 --> 00:03:51,150
<font color="#E5E5E5">weakly secure RDP session so whatever</font>

97
00:03:48,810 --> 00:03:52,709
you need to<font color="#E5E5E5"> do to get into</font><font color="#CCCCCC"> a host now</font>

98
00:03:51,150 --> 00:03:54,269
the next<font color="#E5E5E5"> thing to do is acquire an</font>

99
00:03:52,709 --> 00:03:55,769
encryption secret<font color="#E5E5E5"> this is very important</font>

100
00:03:54,269 --> 00:03:58,620
<font color="#E5E5E5">because you need to have a unique</font>

101
00:03:55,769 --> 00:04:00,030
encryption secret per<font color="#E5E5E5"> victim because if</font>

102
00:03:58,620 --> 00:04:01,470
you have the same<font color="#E5E5E5"> encryption key let's</font>

103
00:04:00,030 --> 00:04:03,329
say for every victim then victims would

104
00:04:01,470 --> 00:04:05,069
share keys among themselves and that

105
00:04:03,329 --> 00:04:07,049
would make that<font color="#CCCCCC"> will come from</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font>

106
00:04:05,069 --> 00:04:09,089
compromise<font color="#E5E5E5"> the</font><font color="#CCCCCC"> whole ransomware campaign</font>

107
00:04:07,049 --> 00:04:11,609
so<font color="#E5E5E5"> you need to have</font><font color="#CCCCCC"> a unique encryption</font>

108
00:04:09,090 --> 00:04:13,980
key<font color="#E5E5E5"> per victim so it needs to somehow</font>

109
00:04:11,609 --> 00:04:16,680
acquire that once it acquires that<font color="#E5E5E5"> it</font>

110
00:04:13,980 --> 00:04:19,079
goes ahead<font color="#E5E5E5"> and uses it to encrypt users</font>

111
00:04:16,680 --> 00:04:21,630
data<font color="#E5E5E5"> and then demands a ransom</font><font color="#CCCCCC"> so that's</font>

112
00:04:19,079 --> 00:04:24,630
pretty<font color="#CCCCCC"> straightforward there but exactly</font>

113
00:04:21,630 --> 00:04:26,460
how is key management important so key

114
00:04:24,630 --> 00:04:27,659
management<font color="#CCCCCC"> is crucial to a</font><font color="#E5E5E5"> ransom</font><font color="#CCCCCC"> or</font>

115
00:04:26,460 --> 00:04:30,960
operation just<font color="#E5E5E5"> like any other</font>

116
00:04:27,660 --> 00:04:34,650
<font color="#CCCCCC">a cryptographic</font><font color="#E5E5E5"> operation</font><font color="#CCCCCC"> key management</font>

117
00:04:30,960 --> 00:04:36,539
lies at the heart of ransomware<font color="#CCCCCC"> the the</font>

118
00:04:34,650 --> 00:04:39,179
<font color="#E5E5E5">fundamental constraint on a ransomware</font>

119
00:04:36,540 --> 00:04:41,010
<font color="#E5E5E5">operator or developer is</font><font color="#CCCCCC"> that the</font>

120
00:04:39,180 --> 00:04:43,380
attacker needs exclusive access to<font color="#E5E5E5"> the</font>

121
00:04:41,010 --> 00:04:45,960
key if to have<font color="#E5E5E5"> leverage over the victim</font>

122
00:04:43,380 --> 00:04:48,450
and it is<font color="#CCCCCC"> complicated it's not</font><font color="#E5E5E5"> always</font>

123
00:04:45,960 --> 00:04:50,909
easy to do ransomware<font color="#CCCCCC"> opera developers</font>

124
00:04:48,450 --> 00:04:52,920
are known for<font color="#CCCCCC"> cargo</font><font color="#E5E5E5"> called programming</font>

125
00:04:50,910 --> 00:04:55,440
copy pasting and<font color="#CCCCCC"> they're they're known</font>

126
00:04:52,920 --> 00:04:59,190
<font color="#CCCCCC">to make mistakes and in a study</font><font color="#E5E5E5"> done</font>

127
00:04:55,440 --> 00:05:01,290
<font color="#CCCCCC">only</font><font color="#E5E5E5"> about 6% of the</font><font color="#CCCCCC"> 1,300 ransomware</font>

128
00:04:59,190 --> 00:05:03,570
<font color="#E5E5E5">that variants that were studied only</font>

129
00:05:01,290 --> 00:05:05,040
about<font color="#E5E5E5"> 6% were actually effective so we</font>

130
00:05:03,570 --> 00:05:06,450
<font color="#CCCCCC">know that they make mistakes</font><font color="#E5E5E5"> and they</font>

131
00:05:05,040 --> 00:05:08,130
get key management wrong so if we can

132
00:05:06,450 --> 00:05:10,950
get if<font color="#E5E5E5"> you understand it better</font><font color="#CCCCCC"> than</font>

133
00:05:08,130 --> 00:05:12,300
they do then<font color="#CCCCCC"> we have an advantage so</font><font color="#E5E5E5"> we</font>

134
00:05:10,950 --> 00:05:15,780
<font color="#CCCCCC">are do assume that ransomware will</font>

135
00:05:12,300 --> 00:05:17,970
always find victims and finding flaws in

136
00:05:15,780 --> 00:05:19,289
key<font color="#E5E5E5"> management will</font><font color="#CCCCCC"> help us recover</font>

137
00:05:17,970 --> 00:05:21,960
files<font color="#E5E5E5"> without paying the ransom</font><font color="#CCCCCC"> so</font>

138
00:05:19,290 --> 00:05:24,360
that's the that's<font color="#CCCCCC"> our motivation the</font>

139
00:05:21,960 --> 00:05:26,280
evolution of key management<font color="#E5E5E5"> well we're</font>

140
00:05:24,360 --> 00:05:28,080
only<font color="#E5E5E5"> going to discuss the hybrid</font>

141
00:05:26,280 --> 00:05:31,679
encryption scheme<font color="#E5E5E5"> during this talk for</font>

142
00:05:28,080 --> 00:05:33,990
<font color="#E5E5E5">the sake of time but basically key</font>

143
00:05:31,680 --> 00:05:36,320
management<font color="#E5E5E5"> has evolved quite a bit and</font>

144
00:05:33,990 --> 00:05:38,790
ransomware variants or starting

145
00:05:36,320 --> 00:05:41,550
2005-2006 when GP code and such

146
00:05:38,790 --> 00:05:42,900
ransomware first coming<font color="#E5E5E5"> out the way they</font>

147
00:05:41,550 --> 00:05:44,760
implement key management<font color="#E5E5E5"> now is a little</font>

148
00:05:42,900 --> 00:05:46,440
<font color="#E5E5E5">different and it's evolved if you want</font>

149
00:05:44,760 --> 00:05:49,560
to read the details<font color="#CCCCCC"> of the evolution of</font>

150
00:05:46,440 --> 00:05:51,900
key management ransomware<font color="#CCCCCC"> we've we've</font>

151
00:05:49,560 --> 00:05:54,450
discussed in<font color="#E5E5E5"> detail in our paper listed</font>

152
00:05:51,900 --> 00:05:55,919
on the slide but what<font color="#E5E5E5"> they're using</font>

153
00:05:54,450 --> 00:05:57,599
right<font color="#E5E5E5"> now and what's important for the</font>

154
00:05:55,919 --> 00:05:59,039
sake of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> presentation as a hybrid</font>

155
00:05:57,600 --> 00:06:00,290
encryption scheme which<font color="#CCCCCC"> is called a</font>

156
00:05:59,040 --> 00:06:02,250
hybrid encryption scheme because

157
00:06:00,290 --> 00:06:05,280
combination of symmetric and asymmetric

158
00:06:02,250 --> 00:06:07,950
encryption<font color="#E5E5E5"> so basically they take a</font>

159
00:06:05,280 --> 00:06:10,229
symmetric key to encrypt users data but

160
00:06:07,950 --> 00:06:12,270
then they use the attackers public key

161
00:06:10,230 --> 00:06:14,250
and<font color="#CCCCCC"> a symmetric key</font><font color="#E5E5E5"> to encrypt</font><font color="#CCCCCC"> the</font>

162
00:06:12,270 --> 00:06:16,260
symmetric key once the symmetric key is

163
00:06:14,250 --> 00:06:18,240
done encrypting the users data<font color="#E5E5E5"> so that's</font>

164
00:06:16,260 --> 00:06:19,740
why it's<font color="#E5E5E5"> called a hybrid encryption</font>

165
00:06:18,240 --> 00:06:22,890
scheme since it's a combination<font color="#E5E5E5"> of two</font>

166
00:06:19,740 --> 00:06:24,840
different<font color="#E5E5E5"> encryption schemes so the the</font>

167
00:06:22,890 --> 00:06:27,570
diagram<font color="#CCCCCC"> over</font><font color="#E5E5E5"> there kind</font><font color="#CCCCCC"> of explains how</font>

168
00:06:24,840 --> 00:06:29,460
<font color="#E5E5E5">how this</font><font color="#CCCCCC"> has done you the ransomware has</font>

169
00:06:27,570 --> 00:06:32,099
the attackers public key embedded in it

170
00:06:29,460 --> 00:06:34,169
<font color="#E5E5E5">it it gets in the host generates the</font>

171
00:06:32,100 --> 00:06:36,240
symmetric key on the host and then uses

172
00:06:34,169 --> 00:06:38,940
the use<font color="#CCCCCC"> that symmetric</font><font color="#E5E5E5"> key to</font><font color="#CCCCCC"> encrypt</font>

173
00:06:36,240 --> 00:06:41,310
the files<font color="#E5E5E5"> and then it goes ahead and and</font>

174
00:06:38,940 --> 00:06:42,900
uses the public<font color="#CCCCCC"> he embedded</font><font color="#E5E5E5"> in there</font><font color="#CCCCCC"> to</font>

175
00:06:41,310 --> 00:06:44,820
the<font color="#CCCCCC"> symmetric-key</font><font color="#E5E5E5"> and safely</font><font color="#CCCCCC"> store it</font>

176
00:06:42,900 --> 00:06:46,979
and the attacker of<font color="#E5E5E5"> course holds</font><font color="#CCCCCC"> the</font>

177
00:06:44,820 --> 00:06:49,560
private key and and there<font color="#E5E5E5"> are variations</font>

178
00:06:46,980 --> 00:06:51,410
to<font color="#CCCCCC"> this</font><font color="#E5E5E5"> approach but basically hybrid</font>

179
00:06:49,560 --> 00:06:54,090
encryption scheme works in this manner

180
00:06:51,410 --> 00:06:55,770
<font color="#E5E5E5">so let's take a look at</font><font color="#CCCCCC"> implementation</font>

181
00:06:54,090 --> 00:06:57,780
<font color="#E5E5E5">details so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> a kind of understand</font><font color="#CCCCCC"> how</font>

182
00:06:55,770 --> 00:07:00,450
the hybrid encryption scheme works now

183
00:06:57,780 --> 00:07:01,830
but<font color="#CCCCCC"> how is it</font><font color="#E5E5E5"> implemented</font><font color="#CCCCCC"> so to</font>

184
00:07:00,450 --> 00:07:04,320
understand<font color="#CCCCCC"> how</font><font color="#E5E5E5"> it's implemented we have</font>

185
00:07:01,830 --> 00:07:05,669
to understand how crypto API works in

186
00:07:04,320 --> 00:07:09,540
Windows<font color="#E5E5E5"> because that's what these</font>

187
00:07:05,670 --> 00:07:11,520
ransomware use so the crypto API is just

188
00:07:09,540 --> 00:07:13,200
<font color="#CCCCCC">like any other API provides the</font><font color="#E5E5E5"> level of</font>

189
00:07:11,520 --> 00:07:14,700
<font color="#E5E5E5">abstraction to programmers if you want</font>

190
00:07:13,200 --> 00:07:16,229
to do cryptographic<font color="#E5E5E5"> tasks you don't want</font>

191
00:07:14,700 --> 00:07:19,229
to be<font color="#E5E5E5"> writing all</font><font color="#CCCCCC"> that complicated</font>

192
00:07:16,230 --> 00:07:21,600
<font color="#E5E5E5">crypto code so there are sets of DLLs</font>

193
00:07:19,230 --> 00:07:24,180
that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> available that will let</font>

194
00:07:21,600 --> 00:07:29,820
you do this<font color="#CCCCCC"> and</font><font color="#E5E5E5"> crypto API is the way to</font>

195
00:07:24,180 --> 00:07:33,300
<font color="#E5E5E5">access those so</font><font color="#CCCCCC"> csps are on the other</font>

196
00:07:29,820 --> 00:07:35,490
hand are the actual<font color="#E5E5E5"> sets of</font><font color="#CCCCCC"> dll's</font><font color="#E5E5E5"> that</font>

197
00:07:33,300 --> 00:07:38,580
are used<font color="#E5E5E5"> for implementing these</font>

198
00:07:35,490 --> 00:07:40,530
<font color="#E5E5E5">cryptographic primitives so crypt</font><font color="#CCCCCC"> csps</font>

199
00:07:38,580 --> 00:07:42,539
are cryptographic service providers and

200
00:07:40,530 --> 00:07:44,669
each CSP is signed by<font color="#CCCCCC"> Microsoft and</font>

201
00:07:42,540 --> 00:07:46,920
<font color="#E5E5E5">needs</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be validated</font><font color="#CCCCCC"> for it to be used</font>

202
00:07:44,670 --> 00:07:49,050
on a Windows<font color="#E5E5E5"> host and they are the ones</font>

203
00:07:46,920 --> 00:07:51,300
that<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> hold all the actual</font>

204
00:07:49,050 --> 00:07:55,800
functionality<font color="#E5E5E5"> that these ransomware need</font>

205
00:07:51,300 --> 00:07:57,120
to perform<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> CNG I briefly</font>

206
00:07:55,800 --> 00:08:01,410
<font color="#E5E5E5">wanted to mention it because starting</font>

207
00:07:57,120 --> 00:08:04,830
<font color="#E5E5E5">from Windows</font><font color="#CCCCCC"> Vista</font><font color="#E5E5E5"> CNG cryptography</font>

208
00:08:01,410 --> 00:08:07,470
<font color="#E5E5E5">API next generation has replaced crypto</font>

209
00:08:04,830 --> 00:08:08,969
API<font color="#E5E5E5"> but most of the functionality is the</font>

210
00:08:07,470 --> 00:08:14,190
<font color="#CCCCCC">same so everything we're talking about</font>

211
00:08:08,970 --> 00:08:16,350
still applies so this is a very simple

212
00:08:14,190 --> 00:08:18,930
sketch of how ransomware communicates

213
00:08:16,350 --> 00:08:21,840
with the DLLs on<font color="#E5E5E5"> the computer in terms</font>

214
00:08:18,930 --> 00:08:24,150
of the<font color="#E5E5E5"> crypt functions that it needs so</font>

215
00:08:21,840 --> 00:08:26,010
if you remove<font color="#E5E5E5"> all other</font><font color="#CCCCCC"> unnecessary</font>

216
00:08:24,150 --> 00:08:27,599
details like how<font color="#E5E5E5"> it spreads like</font><font color="#CCCCCC"> warm</font>

217
00:08:26,010 --> 00:08:30,060
and<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> that and we were and we just</font>

218
00:08:27,600 --> 00:08:33,480
focus on<font color="#E5E5E5"> the crypto part on the host</font>

219
00:08:30,060 --> 00:08:35,309
<font color="#E5E5E5">this is what it</font><font color="#CCCCCC"> needs so ransomware</font><font color="#E5E5E5"> when</font>

220
00:08:33,480 --> 00:08:39,510
it executes it demands<font color="#CCCCCC"> access to the</font>

221
00:08:35,309 --> 00:08:41,880
<font color="#E5E5E5">advanced API to for for the crypto</font>

222
00:08:39,510 --> 00:08:43,679
functions that it needs and then that

223
00:08:41,880 --> 00:08:45,960
will forward the call to the crypt<font color="#CCCCCC"> SP</font>

224
00:08:43,679 --> 00:08:47,599
<font color="#CCCCCC">dot</font><font color="#E5E5E5"> DLL which</font><font color="#CCCCCC"> will check</font><font color="#E5E5E5"> which is</font>

225
00:08:45,960 --> 00:08:50,640
<font color="#E5E5E5">basically responsible</font><font color="#CCCCCC"> for checking the</font>

226
00:08:47,600 --> 00:08:53,040
<font color="#E5E5E5">signature of the CSP or validates the</font>

227
00:08:50,640 --> 00:08:55,230
CSP<font color="#E5E5E5"> and once it's found that the CSP is</font>

228
00:08:53,040 --> 00:08:57,599
valid it will forward<font color="#E5E5E5"> the call to the</font>

229
00:08:55,230 --> 00:08:59,220
<font color="#E5E5E5">you'll</font><font color="#CCCCCC"> CSP</font><font color="#E5E5E5"> and the CSP will provide the</font>

230
00:08:57,600 --> 00:09:03,150
functionality<font color="#CCCCCC"> the ransomware</font><font color="#E5E5E5"> is looking</font>

231
00:08:59,220 --> 00:09:06,380
for so why not why use<font color="#CCCCCC"> the native crypto</font>

232
00:09:03,150 --> 00:09:09,569
API<font color="#E5E5E5"> the simple answer to this is</font><font color="#CCCCCC"> that</font>

233
00:09:06,380 --> 00:09:12,000
it's easy for<font color="#E5E5E5"> them</font><font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> it's</font>

234
00:09:09,570 --> 00:09:13,890
there's a more there's<font color="#CCCCCC"> more of a</font>

235
00:09:12,000 --> 00:09:16,130
<font color="#CCCCCC">likelihood to</font><font color="#E5E5E5"> make a mistake if you're</font>

236
00:09:13,890 --> 00:09:18,030
trying<font color="#CCCCCC"> to implement all of</font><font color="#E5E5E5"> this</font>

237
00:09:16,130 --> 00:09:19,710
functionality yourself in your

238
00:09:18,030 --> 00:09:21,510
ransomware<font color="#E5E5E5"> and they make mistakes all</font>

239
00:09:19,710 --> 00:09:23,490
<font color="#CCCCCC">the time like</font><font color="#E5E5E5"> I've stated previously so</font>

240
00:09:21,510 --> 00:09:26,000
they want to<font color="#CCCCCC"> be using the native crypto</font>

241
00:09:23,490 --> 00:09:29,820
API that<font color="#E5E5E5"> makes things easier</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> them</font>

242
00:09:26,000 --> 00:09:31,860
so<font color="#E5E5E5"> let's with that let's try to</font>

243
00:09:29,820 --> 00:09:34,470
understand the<font color="#E5E5E5"> actual crypto API</font>

244
00:09:31,860 --> 00:09:37,110
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the ransomware is using</font>

245
00:09:34,470 --> 00:09:40,170
so for<font color="#E5E5E5"> this we'll take a take a look at</font>

246
00:09:37,110 --> 00:09:42,090
the not picky around somewhere and so

247
00:09:40,170 --> 00:09:43,469
this is once the<font color="#CCCCCC"> knot Petya ransomware</font>

248
00:09:42,090 --> 00:09:45,510
<font color="#E5E5E5">and fix the hose this</font><font color="#CCCCCC"> is the ransom</font>

249
00:09:43,470 --> 00:09:48,330
<font color="#CCCCCC">message</font><font color="#E5E5E5"> that you're greeted</font><font color="#CCCCCC"> with and</font>

250
00:09:45,510 --> 00:09:50,189
we're all familiar with this screen<font color="#CCCCCC"> so</font>

251
00:09:48,330 --> 00:09:52,590
we went ahead<font color="#E5E5E5"> and disassembled the knot</font>

252
00:09:50,190 --> 00:09:54,300
Petya ransomware<font color="#E5E5E5"> once you disassemble</font><font color="#CCCCCC"> a</font>

253
00:09:52,590 --> 00:09:57,000
mall where most of<font color="#E5E5E5"> the times you'll come</font>

254
00:09:54,300 --> 00:09:58,859
across<font color="#CCCCCC"> you know some sort of upx packing</font>

255
00:09:57,000 --> 00:10:00,270
so you have to unpack them all<font color="#E5E5E5"> where but</font>

256
00:09:58,860 --> 00:10:02,400
after<font color="#E5E5E5"> that you can actually read through</font>

257
00:10:00,270 --> 00:10:04,470
the through<font color="#CCCCCC"> it's assembly code and so</font>

258
00:10:02,400 --> 00:10:06,000
that's what we're trying<font color="#E5E5E5"> to do and what</font>

259
00:10:04,470 --> 00:10:08,940
what<font color="#E5E5E5"> our objective is to identify the</font>

260
00:10:06,000 --> 00:10:12,060
actual<font color="#E5E5E5"> functions in the DLLs that it</font>

261
00:10:08,940 --> 00:10:14,660
needs to<font color="#CCCCCC"> execute so so the ransom</font>

262
00:10:12,060 --> 00:10:17,250
message<font color="#E5E5E5"> is pretty easy to spot you know</font>

263
00:10:14,660 --> 00:10:18,959
<font color="#E5E5E5">because it's all in text form oops your</font>

264
00:10:17,250 --> 00:10:20,850
files are encrypted and then what

265
00:10:18,960 --> 00:10:22,650
<font color="#E5E5E5">follows next is I believe</font><font color="#CCCCCC"> the Bitcoin</font>

266
00:10:20,850 --> 00:10:24,870
address and and the attackers email

267
00:10:22,650 --> 00:10:27,540
address and so on<font color="#E5E5E5"> so but that's not</font><font color="#CCCCCC"> our</font>

268
00:10:24,870 --> 00:10:29,610
objective<font color="#E5E5E5"> here our objective is to find</font>

269
00:10:27,540 --> 00:10:32,040
<font color="#E5E5E5">out what</font><font color="#CCCCCC"> dll's is</font><font color="#E5E5E5"> using and what exact</font>

270
00:10:29,610 --> 00:10:35,280
function it's using in those<font color="#CCCCCC"> dll's</font>

271
00:10:32,040 --> 00:10:40,140
so we use a<font color="#CCCCCC"> bunch of</font><font color="#E5E5E5"> tools to identify</font>

272
00:10:35,280 --> 00:10:41,579
<font color="#CCCCCC">which DLLs</font><font color="#E5E5E5"> are being used so if if these</font>

273
00:10:40,140 --> 00:10:42,900
tools if you give it the<font color="#CCCCCC"> application</font>

274
00:10:41,580 --> 00:10:44,790
they'll they'll tell you what kind<font color="#CCCCCC"> of</font>

275
00:10:42,900 --> 00:10:48,959
what were the dependencies for this

276
00:10:44,790 --> 00:10:51,360
application<font color="#CCCCCC"> so we we come across</font><font color="#E5E5E5"> two</font>

277
00:10:48,960 --> 00:10:55,160
important<font color="#E5E5E5"> DLL so we're</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> advanced</font>

278
00:10:51,360 --> 00:10:58,110
<font color="#E5E5E5">API and the crypt 32 DLL</font><font color="#CCCCCC"> which basically</font>

279
00:10:55,160 --> 00:11:00,480
<font color="#E5E5E5">provide the</font><font color="#CCCCCC"> crypt function</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a crypto</font>

280
00:10:58,110 --> 00:11:02,520
functionality to the ransomware<font color="#E5E5E5"> then</font>

281
00:11:00,480 --> 00:11:04,920
there are some other<font color="#E5E5E5"> DLL on there for</font>

282
00:11:02,520 --> 00:11:06,840
example the kernel32.dll that's used for

283
00:11:04,920 --> 00:11:08,430
directory traversal while you're trying

284
00:11:06,840 --> 00:11:11,640
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> the next file</font>

285
00:11:08,430 --> 00:11:13,680
to encrypt and so on so those<font color="#E5E5E5"> are the</font>

286
00:11:11,640 --> 00:11:17,330
<font color="#CCCCCC">list</font><font color="#E5E5E5"> of BL that not Petya ransomware</font>

287
00:11:13,680 --> 00:11:21,890
needs and then we take<font color="#E5E5E5"> a closer look at</font>

288
00:11:17,330 --> 00:11:25,529
at the list of imports<font color="#E5E5E5"> and we see that</font>

289
00:11:21,890 --> 00:11:28,770
<font color="#E5E5E5">from advanced</font><font color="#CCCCCC"> API 32</font><font color="#E5E5E5"> it's it's demanding</font>

290
00:11:25,529 --> 00:11:31,950
<font color="#E5E5E5">a bunch of crypt functions for example</font>

291
00:11:28,770 --> 00:11:35,310
crypt<font color="#E5E5E5"> destroy key Krypton</font><font color="#CCCCCC"> rate key crypt</font>

292
00:11:31,950 --> 00:11:36,839
and crypt<font color="#CCCCCC"> and so on so we want to look</font>

293
00:11:35,310 --> 00:11:38,790
<font color="#E5E5E5">at what</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> these functions are</font>

294
00:11:36,839 --> 00:11:41,730
doing and why the ransomware needs these

295
00:11:38,790 --> 00:11:43,520
functions<font color="#E5E5E5"> and and how</font><font color="#CCCCCC"> it's using these</font>

296
00:11:41,730 --> 00:11:47,640
functions<font color="#CCCCCC"> to encrypt a user's computer</font>

297
00:11:43,520 --> 00:11:49,560
<font color="#E5E5E5">so so we we zero</font><font color="#CCCCCC"> in on the crypto API</font>

298
00:11:47,640 --> 00:11:50,670
calls again it says<font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> of</font>

299
00:11:49,560 --> 00:11:53,459
stuff<font color="#E5E5E5"> going on here</font>

300
00:11:50,670 --> 00:11:55,380
for example<font color="#E5E5E5"> not</font><font color="#CCCCCC"> Patil so tries to spread</font>

301
00:11:53,459 --> 00:11:57,390
by exploiting<font color="#E5E5E5"> the SMB vulnerability and</font>

302
00:11:55,380 --> 00:11:59,850
so on so we're we're leaving all<font color="#CCCCCC"> of that</font>

303
00:11:57,390 --> 00:12:01,589
<font color="#E5E5E5">aside and we're focusing on the crypto</font>

304
00:11:59,850 --> 00:12:04,680
API<font color="#CCCCCC"> calls so this is like a zoomed out</font>

305
00:12:01,589 --> 00:12:07,620
version of the crypto API calls<font color="#E5E5E5"> that is</font>

306
00:12:04,680 --> 00:12:10,620
trying<font color="#E5E5E5"> to make and so the first thing</font>

307
00:12:07,620 --> 00:12:13,290
that<font color="#E5E5E5"> we encounter is cryptic wire</font>

308
00:12:10,620 --> 00:12:14,820
context so that's<font color="#E5E5E5"> we're establishing a</font>

309
00:12:13,290 --> 00:12:16,529
crypto context and we'll discuss the

310
00:12:14,820 --> 00:12:18,570
details<font color="#CCCCCC"> of</font><font color="#E5E5E5"> what that function does but</font>

311
00:12:16,529 --> 00:12:20,760
that's<font color="#E5E5E5"> where it kind of begins and then</font>

312
00:12:18,570 --> 00:12:23,010
it goes ahead<font color="#CCCCCC"> and generates an</font><font color="#E5E5E5"> aes</font>

313
00:12:20,760 --> 00:12:25,200
128-bit key<font color="#E5E5E5"> now these are all</font>

314
00:12:23,010 --> 00:12:27,990
subroutines that<font color="#E5E5E5"> we can expand</font><font color="#CCCCCC"> upon but</font>

315
00:12:25,200 --> 00:12:30,990
this is a zoomed out version<font color="#E5E5E5"> now this</font>

316
00:12:27,990 --> 00:12:33,870
subroutine<font color="#E5E5E5"> generated AES 128 bit key</font>

317
00:12:30,990 --> 00:12:36,810
wasn't<font color="#E5E5E5"> named this of</font><font color="#CCCCCC"> course it had a</font><font color="#E5E5E5"> it</font>

318
00:12:33,870 --> 00:12:38,130
had a<font color="#E5E5E5"> weird name</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we renamed it for</font>

319
00:12:36,810 --> 00:12:39,719
the purposes<font color="#E5E5E5"> of this presentation</font><font color="#CCCCCC"> so</font>

320
00:12:38,130 --> 00:12:41,820
<font color="#CCCCCC">that it's easier to understand what's</font>

321
00:12:39,720 --> 00:12:43,560
<font color="#CCCCCC">going</font><font color="#E5E5E5"> on in</font><font color="#CCCCCC"> that subroutine</font><font color="#E5E5E5"> so once you</font>

322
00:12:41,820 --> 00:12:45,420
go ahead<font color="#E5E5E5"> and study your subroutine you</font>

323
00:12:43,560 --> 00:12:47,640
can go ahead<font color="#E5E5E5"> and rename</font><font color="#CCCCCC"> it so that you</font>

324
00:12:45,420 --> 00:12:52,140
<font color="#CCCCCC">so that it's easier for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> then</font>

325
00:12:47,640 --> 00:12:53,819
<font color="#CCCCCC">analyze the overall picture so next</font><font color="#E5E5E5"> it</font>

326
00:12:52,140 --> 00:12:56,430
tries to encrypt user files using<font color="#E5E5E5"> a</font>

327
00:12:53,820 --> 00:12:58,500
subroutine<font color="#E5E5E5"> then it displays</font><font color="#CCCCCC"> the ransom</font>

328
00:12:56,430 --> 00:13:02,430
message<font color="#CCCCCC"> destroys the key from memory</font><font color="#E5E5E5"> and</font>

329
00:12:58,500 --> 00:13:04,380
then releases the<font color="#E5E5E5"> crypto context so now</font>

330
00:13:02,430 --> 00:13:08,670
to take<font color="#E5E5E5"> a deeper</font><font color="#CCCCCC"> look at exactly</font><font color="#E5E5E5"> what</font>

331
00:13:04,380 --> 00:13:11,760
these functions allow the ransomware to

332
00:13:08,670 --> 00:13:13,439
do so beginning with cryptic<font color="#CCCCCC"> wire</font>

333
00:13:11,760 --> 00:13:16,770
context so this is the first thing<font color="#CCCCCC"> that</font>

334
00:13:13,440 --> 00:13:19,829
you'll see<font color="#CCCCCC"> are ransomware do do if it's</font>

335
00:13:16,770 --> 00:13:22,290
<font color="#E5E5E5">using the crypto API because this is</font>

336
00:13:19,829 --> 00:13:24,689
what will<font color="#E5E5E5"> allow it to make calls</font>

337
00:13:22,290 --> 00:13:26,130
to the to the CSP so we just<font color="#E5E5E5"> discussed</font>

338
00:13:24,690 --> 00:13:28,560
<font color="#CCCCCC">that the cryptographic service providers</font>

339
00:13:26,130 --> 00:13:30,509
are the sets<font color="#E5E5E5"> of DLLs</font><font color="#CCCCCC"> that provide the</font>

340
00:13:28,560 --> 00:13:31,079
actual cryptographic functionality to a

341
00:13:30,509 --> 00:13:33,990
ransomware

342
00:13:31,079 --> 00:13:38,219
and so to able<font color="#CCCCCC"> to talk to them it needs</font>

343
00:13:33,990 --> 00:13:40,050
to establish<font color="#E5E5E5"> a handle to the to the to</font>

344
00:13:38,220 --> 00:13:44,220
the CSP<font color="#CCCCCC"> and to establish that handle</font>

345
00:13:40,050 --> 00:13:45,899
<font color="#CCCCCC">cryptic wire context is used so</font><font color="#E5E5E5"> so let's</font>

346
00:13:44,220 --> 00:13:47,759
take a look at this<font color="#E5E5E5"> it acquires a handle</font>

347
00:13:45,899 --> 00:13:51,029
to a key container within<font color="#E5E5E5"> a</font><font color="#CCCCCC"> CSP</font><font color="#E5E5E5"> and</font>

348
00:13:47,759 --> 00:13:54,480
returns<font color="#E5E5E5"> the return handle can</font><font color="#CCCCCC"> be used to</font>

349
00:13:51,029 --> 00:13:56,100
make calls<font color="#E5E5E5"> to the CSP so this this C++</font>

350
00:13:54,480 --> 00:13:59,759
code example is<font color="#E5E5E5"> taken straight from the</font>

351
00:13:56,100 --> 00:14:02,639
<font color="#E5E5E5">Microsoft documentation which shows how</font>

352
00:13:59,759 --> 00:14:05,970
to<font color="#CCCCCC"> use this function so basically you</font>

353
00:14:02,639 --> 00:14:08,160
provide it<font color="#CCCCCC"> you you</font><font color="#E5E5E5"> provided the handle</font>

354
00:14:05,970 --> 00:14:10,019
<font color="#CCCCCC">the the address for where the handle</font>

355
00:14:08,160 --> 00:14:12,930
<font color="#CCCCCC">will be</font><font color="#E5E5E5"> stored as the first parameter</font>

356
00:14:10,019 --> 00:14:15,060
and<font color="#E5E5E5"> then you also specify which CSP you</font>

357
00:14:12,930 --> 00:14:18,329
want to use<font color="#E5E5E5"> so the other parameter you</font>

358
00:14:15,060 --> 00:14:20,310
see in there<font color="#CCCCCC"> is the provider RSA full or</font>

359
00:14:18,329 --> 00:14:22,709
the<font color="#E5E5E5"> probe RSA full and that's one of the</font>

360
00:14:20,310 --> 00:14:27,569
<font color="#E5E5E5">CSP is that this ransomware</font><font color="#CCCCCC"> is trying to</font>

361
00:14:22,709 --> 00:14:29,518
use<font color="#E5E5E5"> so so so you can specify the CSP you</font>

362
00:14:27,569 --> 00:14:31,349
want to use and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> specify where</font>

363
00:14:29,519 --> 00:14:33,630
the<font color="#E5E5E5"> handle to the CSP is going to be and</font>

364
00:14:31,350 --> 00:14:34,949
and so then you now<font color="#CCCCCC"> have acquired a</font>

365
00:14:33,630 --> 00:14:39,209
handle to the CSP and<font color="#E5E5E5"> you can now talk</font>

366
00:14:34,949 --> 00:14:41,099
<font color="#CCCCCC">to the CSP so once your once you have</font>

367
00:14:39,209 --> 00:14:41,819
done<font color="#CCCCCC"> that</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> you can go ahead</font><font color="#E5E5E5"> and start</font>

368
00:14:41,100 --> 00:14:43,470
<font color="#CCCCCC">making calls</font>

369
00:14:41,819 --> 00:14:45,630
so the first call you make<font color="#CCCCCC"> is of course</font>

370
00:14:43,470 --> 00:14:46,680
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> give me a new symmetric key</font>

371
00:14:45,630 --> 00:14:50,370
because they need a new<font color="#E5E5E5"> encryption</font>

372
00:14:46,680 --> 00:14:52,920
secret per victim<font color="#E5E5E5"> so to generate a new</font>

373
00:14:50,370 --> 00:14:57,389
symmetric key so this<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> zoomed-in for</font>

374
00:14:52,920 --> 00:15:00,599
a part for the generate a is symmetric

375
00:14:57,389 --> 00:15:01,649
AES 128 bit symmetric key so over here

376
00:15:00,600 --> 00:15:04,019
they're trying<font color="#CCCCCC"> to generate a new</font>

377
00:15:01,649 --> 00:15:06,750
symmetric key on the victim so this will

378
00:15:04,019 --> 00:15:08,370
be unique to<font color="#E5E5E5"> every victim and they'll</font>

379
00:15:06,750 --> 00:15:11,339
use the crib gen key function for this

380
00:15:08,370 --> 00:15:13,680
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> responsible for</font><font color="#E5E5E5"> generating a</font>

381
00:15:11,339 --> 00:15:15,959
symmetric key or a public/private key

382
00:15:13,680 --> 00:15:18,300
pair<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> will randomly generate a</font>

383
00:15:15,959 --> 00:15:21,569
symmetric key that the ransomware needs

384
00:15:18,300 --> 00:15:24,258
and then<font color="#E5E5E5"> a handle to that symmetric key</font>

385
00:15:21,569 --> 00:15:26,969
will<font color="#CCCCCC"> be returned to the ransomware</font><font color="#E5E5E5"> and</font>

386
00:15:24,259 --> 00:15:29,310
and<font color="#E5E5E5"> again there's the C plus for</font><font color="#CCCCCC"> example</font>

387
00:15:26,970 --> 00:15:32,610
of how to do it<font color="#CCCCCC"> you you've got a you've</font>

388
00:15:29,310 --> 00:15:34,018
got<font color="#E5E5E5"> to specify</font><font color="#CCCCCC"> the the handle to</font><font color="#E5E5E5"> the CSP</font>

389
00:15:32,610 --> 00:15:35,430
as one of<font color="#E5E5E5"> the parameters you've got to</font>

390
00:15:34,019 --> 00:15:35,910
specify<font color="#CCCCCC"> which encryption algorithm</font>

391
00:15:35,430 --> 00:15:38,069
<font color="#E5E5E5">you're going to</font>

392
00:15:35,910 --> 00:15:40,260
use so in this case the<font color="#E5E5E5"> ransomware wants</font>

393
00:15:38,070 --> 00:15:43,110
to<font color="#E5E5E5"> use they yes</font><font color="#CCCCCC"> 128 algorithm so it will</font>

394
00:15:40,260 --> 00:15:45,569
<font color="#CCCCCC">specify</font><font color="#E5E5E5"> that and then it will go</font><font color="#CCCCCC"> ahead</font>

395
00:15:43,110 --> 00:15:49,260
and acquire the handle to<font color="#E5E5E5"> the key stored</font>

396
00:15:45,570 --> 00:15:51,060
in in that<font color="#E5E5E5"> parameter they are H key so</font>

397
00:15:49,260 --> 00:15:52,860
then you know you've created a key now

398
00:15:51,060 --> 00:15:54,750
so the next<font color="#CCCCCC"> thing you do is</font><font color="#E5E5E5"> very</font>

399
00:15:52,860 --> 00:15:58,490
<font color="#CCCCCC">straightforward you</font><font color="#E5E5E5"> go ahead and use</font>

400
00:15:54,750 --> 00:16:02,040
this key<font color="#CCCCCC"> to encrypt</font><font color="#E5E5E5"> the users files so</font>

401
00:15:58,490 --> 00:16:03,980
<font color="#CCCCCC">so this is a zoomed in version of the</font>

402
00:16:02,040 --> 00:16:06,030
subroutine which is responsible<font color="#E5E5E5"> for</font>

403
00:16:03,980 --> 00:16:07,890
<font color="#E5E5E5">going through the directories and</font>

404
00:16:06,030 --> 00:16:11,220
subdirectories and encrypting users user

405
00:16:07,890 --> 00:16:12,840
files<font color="#E5E5E5"> so we see the that they have</font>

406
00:16:11,220 --> 00:16:14,760
<font color="#CCCCCC">embedded that embedded part in there</font>

407
00:16:12,840 --> 00:16:17,250
with where it's<font color="#E5E5E5"> talking about the file</font>

408
00:16:14,760 --> 00:16:20,700
types<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is interested in encrypting</font>

409
00:16:17,250 --> 00:16:23,310
<font color="#E5E5E5">so the dot</font><font color="#CCCCCC"> 3d</font><font color="#E5E5E5"> s dot 7z</font><font color="#CCCCCC"> store some zip</font>

410
00:16:20,700 --> 00:16:25,950
files being<font color="#E5E5E5"> encrypted ASP that backup</font>

411
00:16:23,310 --> 00:16:28,050
files<font color="#E5E5E5"> so</font><font color="#CCCCCC"> those there are many file types</font>

412
00:16:25,950 --> 00:16:29,520
<font color="#E5E5E5">that this ransomware is interested in</font>

413
00:16:28,050 --> 00:16:32,760
<font color="#CCCCCC">crypting so we'll go</font><font color="#E5E5E5"> ahead and</font><font color="#CCCCCC"> search</font>

414
00:16:29,520 --> 00:16:36,120
through<font color="#E5E5E5"> the files and folders for those</font>

415
00:16:32,760 --> 00:16:38,340
specific<font color="#CCCCCC"> file types and</font><font color="#E5E5E5"> and once it</font>

416
00:16:36,120 --> 00:16:40,050
encounters a directory with<font color="#E5E5E5"> a</font>

417
00:16:38,340 --> 00:16:42,840
subdirectory in it it will call itself

418
00:16:40,050 --> 00:16:46,589
<font color="#E5E5E5">and and try to encrypt those that</font><font color="#CCCCCC"> find</font>

419
00:16:42,840 --> 00:16:48,870
next<font color="#E5E5E5"> file</font><font color="#CCCCCC"> a function that you</font><font color="#E5E5E5"> see at the</font>

420
00:16:46,590 --> 00:16:50,310
at the<font color="#CCCCCC"> very bottom</font><font color="#E5E5E5"> highlighted at the</font>

421
00:16:48,870 --> 00:16:52,290
very bottom<font color="#CCCCCC"> that that comes from</font>

422
00:16:50,310 --> 00:16:55,079
kernel32 that lets you find<font color="#CCCCCC"> the next</font>

423
00:16:52,290 --> 00:16:58,650
file and go through one file<font color="#CCCCCC"> you know at</font>

424
00:16:55,080 --> 00:16:59,880
a<font color="#CCCCCC"> time through a directory so it's clear</font>

425
00:16:58,650 --> 00:17:02,400
<font color="#CCCCCC">what it's trying</font><font color="#E5E5E5"> to do over here search</font>

426
00:16:59,880 --> 00:17:04,920
through the directories<font color="#E5E5E5"> and and then to</font>

427
00:17:02,400 --> 00:17:06,480
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> encrypt the files that</font><font color="#CCCCCC"> it's</font>

428
00:17:04,920 --> 00:17:09,420
interested in encrypting it will use the

429
00:17:06,480 --> 00:17:12,750
<font color="#CCCCCC">crypt and crypt function so of course</font><font color="#E5E5E5"> at</font>

430
00:17:09,420 --> 00:17:15,090
this<font color="#E5E5E5"> I've also put the crib decrypt a</font>

431
00:17:12,750 --> 00:17:16,619
function in this<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> but it's not in</font>

432
00:17:15,089 --> 00:17:19,709
<font color="#E5E5E5">Christian of course it's not interested</font>

433
00:17:16,619 --> 00:17:21,119
in decrypting anything at this point<font color="#CCCCCC"> but</font>

434
00:17:19,710 --> 00:17:23,730
<font color="#E5E5E5">they are the exact opposites of each</font>

435
00:17:21,119 --> 00:17:25,919
other as is clear<font color="#E5E5E5"> so crypt and crypt can</font>

436
00:17:23,730 --> 00:17:28,620
be used to encrypt the files<font color="#E5E5E5"> so all it</font>

437
00:17:25,920 --> 00:17:30,660
needs is the<font color="#E5E5E5"> handle to the key so the</font>

438
00:17:28,620 --> 00:17:33,780
generated<font color="#E5E5E5"> AES symmetric key will</font><font color="#CCCCCC"> be</font>

439
00:17:30,660 --> 00:17:35,700
provided<font color="#E5E5E5"> and then that handle can be</font>

440
00:17:33,780 --> 00:17:37,290
<font color="#CCCCCC">used to go ahead and</font><font color="#E5E5E5"> crip start</font>

441
00:17:35,700 --> 00:17:38,760
encrypting the files<font color="#E5E5E5"> you don't even need</font>

442
00:17:37,290 --> 00:17:41,250
to<font color="#E5E5E5"> specify which algorithm to use</font>

443
00:17:38,760 --> 00:17:43,379
<font color="#CCCCCC">because the key will specify which</font>

444
00:17:41,250 --> 00:17:46,470
algorithm to use<font color="#E5E5E5"> if it's an aes 26 a</font>

445
00:17:43,380 --> 00:17:48,930
128-bit<font color="#E5E5E5"> key then it will use the AES</font>

446
00:17:46,470 --> 00:17:50,360
encryption algorithm to to go ahead<font color="#E5E5E5"> and</font>

447
00:17:48,930 --> 00:17:53,009
encrypt

448
00:17:50,360 --> 00:17:55,799
all right so<font color="#E5E5E5"> so next the next thing to</font>

449
00:17:53,009 --> 00:17:57,059
do<font color="#E5E5E5"> like we talked about the hybrid</font>

450
00:17:55,799 --> 00:17:59,370
encryption scheme that these modern

451
00:17:57,059 --> 00:18:01,889
<font color="#CCCCCC">ransomware use and so the next</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for</font>

452
00:17:59,370 --> 00:18:03,408
<font color="#E5E5E5">these ransomware to do is to use the</font>

453
00:18:01,889 --> 00:18:06,750
attackers public key somehow to

454
00:18:03,409 --> 00:18:08,850
safeguard or secure<font color="#E5E5E5"> this symmetric key</font>

455
00:18:06,750 --> 00:18:13,080
once it's done with<font color="#E5E5E5"> this encryption job</font>

456
00:18:08,850 --> 00:18:15,389
<font color="#CCCCCC">on the victims computer</font><font color="#E5E5E5"> so so to do this</font>

457
00:18:13,080 --> 00:18:16,860
<font color="#CCCCCC">at the attackers public key is embedded</font>

458
00:18:15,389 --> 00:18:19,168
in the ransomware like we talked<font color="#E5E5E5"> about</font>

459
00:18:16,860 --> 00:18:21,000
before and<font color="#CCCCCC"> that long string</font><font color="#E5E5E5"> that you see</font>

460
00:18:19,169 --> 00:18:23,820
in the first<font color="#E5E5E5"> highlighted</font><font color="#CCCCCC"> red boxes is</font>

461
00:18:21,000 --> 00:18:27,179
<font color="#E5E5E5">the attackers public key in the case of</font>

462
00:18:23,820 --> 00:18:29,009
not Petya ransomware<font color="#E5E5E5"> so it uses this so</font>

463
00:18:27,179 --> 00:18:32,789
<font color="#E5E5E5">that's a if I remember correctly that's</font>

464
00:18:29,009 --> 00:18:35,850
a<font color="#CCCCCC"> RSA to 0</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> 8 bit key and that</font><font color="#E5E5E5"> public</font>

465
00:18:32,789 --> 00:18:38,820
key is used to encrypt the symmetric key

466
00:18:35,850 --> 00:18:41,370
so in order<font color="#E5E5E5"> to so so right now that is a</font>

467
00:18:38,820 --> 00:18:43,529
<font color="#CCCCCC">method as a string</font><font color="#E5E5E5"> in the in the</font>

468
00:18:41,370 --> 00:18:46,649
ransomware<font color="#CCCCCC"> but to bring it in the</font>

469
00:18:43,529 --> 00:18:49,169
context of the CSP<font color="#E5E5E5"> so that the CSP can</font>

470
00:18:46,649 --> 00:18:51,768
use<font color="#CCCCCC"> it to encrypt the symmetric key</font><font color="#E5E5E5"> we</font>

471
00:18:49,169 --> 00:18:55,710
have<font color="#CCCCCC"> to use the Krypton portkey function</font>

472
00:18:51,769 --> 00:18:58,169
so the ransomware goes ahead and uses

473
00:18:55,710 --> 00:19:02,159
the crypt import key function to<font color="#E5E5E5"> bring</font>

474
00:18:58,169 --> 00:19:05,519
this embedded attackers public key into

475
00:19:02,159 --> 00:19:08,549
context of the<font color="#CCCCCC"> Opta of the rate</font><font color="#E5E5E5"> of the</font>

476
00:19:05,519 --> 00:19:11,429
CSP and then<font color="#E5E5E5"> freeze the memory by</font><font color="#CCCCCC"> using</font>

477
00:19:08,549 --> 00:19:14,519
<font color="#E5E5E5">local</font><font color="#CCCCCC"> 3 and then so crypt import key</font>

478
00:19:11,429 --> 00:19:16,500
transfers a key from a key blob to a CSP

479
00:19:14,519 --> 00:19:19,259
<font color="#CCCCCC">and brings it</font><font color="#E5E5E5"> into the context of the</font>

480
00:19:16,500 --> 00:19:21,570
CSP and<font color="#E5E5E5"> now it can be used to encrypt</font>

481
00:19:19,259 --> 00:19:22,889
the symmetric key so so now we've

482
00:19:21,570 --> 00:19:24,720
safeguarded<font color="#E5E5E5"> the symmetric key be</font>

483
00:19:22,889 --> 00:19:29,250
encrypted<font color="#E5E5E5"> using the attackers public key</font>

484
00:19:24,720 --> 00:19:30,659
and and now we can't<font color="#CCCCCC"> so but but</font><font color="#E5E5E5"> before</font>

485
00:19:29,250 --> 00:19:32,639
we<font color="#E5E5E5"> can do that</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> export the</font>

486
00:19:30,659 --> 00:19:34,230
symmetric key<font color="#CCCCCC"> to a keyblob and so do</font>

487
00:19:32,639 --> 00:19:36,570
that this<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> the opposite of what</font>

488
00:19:34,230 --> 00:19:38,970
<font color="#E5E5E5">Krypton</font><font color="#CCCCCC"> portkey was trying to do this</font>

489
00:19:36,570 --> 00:19:41,370
one is trying<font color="#E5E5E5"> to export the symmetric</font>

490
00:19:38,970 --> 00:19:43,289
key<font color="#E5E5E5"> in from from the context of</font><font color="#CCCCCC"> the CSP</font>

491
00:19:41,370 --> 00:19:44,459
into a key blob so that it can be

492
00:19:43,289 --> 00:19:46,860
encrypted<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the other but</font><font color="#E5E5E5"> the</font>

493
00:19:44,460 --> 00:19:48,840
attackers public key so the<font color="#E5E5E5"> crypt export</font>

494
00:19:46,860 --> 00:19:53,330
key function is used for this purpose

495
00:19:48,840 --> 00:19:57,000
<font color="#CCCCCC">and</font><font color="#E5E5E5"> and all you need to</font><font color="#CCCCCC"> do is specify</font>

496
00:19:53,330 --> 00:19:59,158
what the handle to<font color="#E5E5E5"> the key and and then</font>

497
00:19:57,000 --> 00:20:02,340
allocate memory for<font color="#E5E5E5"> that key and</font><font color="#CCCCCC"> then do</font>

498
00:19:59,159 --> 00:20:03,480
the actual exporting so this will

499
00:20:02,340 --> 00:20:07,470
securely transfer the

500
00:20:03,480 --> 00:20:10,020
from the CSP<font color="#E5E5E5"> to a qiblah</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> thing and</font>

501
00:20:07,470 --> 00:20:12,230
a<font color="#E5E5E5"> very important step is</font><font color="#CCCCCC"> to destroy the</font>

502
00:20:10,020 --> 00:20:14,520
key<font color="#E5E5E5"> and believe it or not sometimes</font>

503
00:20:12,230 --> 00:20:16,920
<font color="#E5E5E5">ransomware developers forget to do this</font>

504
00:20:14,520 --> 00:20:19,139
<font color="#E5E5E5">which is why you have websites like</font><font color="#CCCCCC"> no</font>

505
00:20:16,920 --> 00:20:20,670
<font color="#CCCCCC">more ransom which can</font><font color="#E5E5E5"> make a</font><font color="#CCCCCC"> decrypter</font>

506
00:20:19,140 --> 00:20:22,260
for a particular<font color="#E5E5E5"> ransomware</font><font color="#CCCCCC"> Varian</font>

507
00:20:20,670 --> 00:20:24,210
<font color="#E5E5E5">because they've neglected to do let's</font>

508
00:20:22,260 --> 00:20:26,580
say<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example one of these steps</font><font color="#E5E5E5"> like</font>

509
00:20:24,210 --> 00:20:28,830
wipe the key from memory<font color="#E5E5E5"> if they don't</font>

510
00:20:26,580 --> 00:20:30,389
wipe<font color="#E5E5E5"> it from memory</font><font color="#CCCCCC"> or they leave</font><font color="#E5E5E5"> a copy</font>

511
00:20:28,830 --> 00:20:32,040
of it on<font color="#CCCCCC"> disk somewhere</font><font color="#E5E5E5"> then it can be</font>

512
00:20:30,390 --> 00:20:33,600
recovered<font color="#CCCCCC"> using one of those</font><font color="#E5E5E5"> decrypt</font>

513
00:20:32,040 --> 00:20:35,610
errs<font color="#E5E5E5"> so the point is that they make</font>

514
00:20:33,600 --> 00:20:37,020
mistakes<font color="#CCCCCC"> and so if you understand</font><font color="#E5E5E5"> these</font>

515
00:20:35,610 --> 00:20:40,709
functions better than they do then it

516
00:20:37,020 --> 00:20:42,540
<font color="#E5E5E5">helps us quickly</font><font color="#CCCCCC"> attack them so crib</font>

517
00:20:40,710 --> 00:20:44,070
<font color="#E5E5E5">destroy key is important to execute</font>

518
00:20:42,540 --> 00:20:45,990
unfortunately in the case<font color="#E5E5E5"> of this</font>

519
00:20:44,070 --> 00:20:49,110
ransomware they did it right and they

520
00:20:45,990 --> 00:20:50,790
destroyed<font color="#E5E5E5"> the key from memory and and so</font>

521
00:20:49,110 --> 00:20:53,969
it cannot<font color="#E5E5E5"> be recovered once this</font>

522
00:20:50,790 --> 00:20:56,040
function executes so crib just<font color="#E5E5E5"> destroyed</font>

523
00:20:53,970 --> 00:20:58,740
key is responsible<font color="#CCCCCC"> for removing</font><font color="#E5E5E5"> the key</font>

524
00:20:56,040 --> 00:21:01,950
from<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> releases</font><font color="#E5E5E5"> the handle to the</font>

525
00:20:58,740 --> 00:21:03,750
<font color="#E5E5E5">key parameter and invalidates key and</font>

526
00:21:01,950 --> 00:21:06,030
ensures that it cannot be<font color="#CCCCCC"> used again the</font>

527
00:21:03,750 --> 00:21:08,790
<font color="#E5E5E5">usage is very simple you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need to</font>

528
00:21:06,030 --> 00:21:10,290
provide<font color="#E5E5E5"> the handle to the key</font><font color="#CCCCCC"> n keep</font>

529
00:21:08,790 --> 00:21:12,050
crib destroy key will<font color="#E5E5E5"> take care of the</font>

530
00:21:10,290 --> 00:21:15,240
rest

531
00:21:12,050 --> 00:21:17,460
finally you<font color="#E5E5E5"> have crypt release context</font>

532
00:21:15,240 --> 00:21:21,180
and that's<font color="#E5E5E5"> the final step that</font><font color="#CCCCCC"> that you</font>

533
00:21:17,460 --> 00:21:23,250
need to do and it is<font color="#E5E5E5"> an opposite of what</font>

534
00:21:21,180 --> 00:21:25,350
quick crypt<font color="#E5E5E5"> acquire context was doing in</font>

535
00:21:23,250 --> 00:21:27,450
the beginning<font color="#CCCCCC"> crypt</font><font color="#E5E5E5"> acquire context was</font>

536
00:21:25,350 --> 00:21:29,280
making sure we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the handle to the</font>

537
00:21:27,450 --> 00:21:31,950
CSP so we can make all of<font color="#E5E5E5"> these calls</font>

538
00:21:29,280 --> 00:21:34,290
<font color="#E5E5E5">and access all these functions and crypt</font>

539
00:21:31,950 --> 00:21:36,600
release key<font color="#CCCCCC"> hypocrite release context is</font>

540
00:21:34,290 --> 00:21:39,120
doing the exact opposite which is<font color="#E5E5E5"> it's</font>

541
00:21:36,600 --> 00:21:41,219
trying to release the handle to the<font color="#E5E5E5"> CSP</font>

542
00:21:39,120 --> 00:21:44,340
so you can no<font color="#CCCCCC"> longer</font><font color="#E5E5E5"> make calls to the</font>

543
00:21:41,220 --> 00:21:46,680
CSP so this is the final<font color="#CCCCCC"> step that any</font>

544
00:21:44,340 --> 00:21:48,300
<font color="#E5E5E5">function any application access</font>

545
00:21:46,680 --> 00:21:51,540
encrypted<font color="#E5E5E5"> functionality using the crypto</font>

546
00:21:48,300 --> 00:21:53,669
API on<font color="#CCCCCC"> Windows wouldn't need to</font><font color="#E5E5E5"> do so</font>

547
00:21:51,540 --> 00:21:55,500
<font color="#E5E5E5">crypt release context release</font><font color="#CCCCCC"> of the</font>

548
00:21:53,670 --> 00:21:58,560
handle to<font color="#E5E5E5"> the CSP just need to provided</font>

549
00:21:55,500 --> 00:22:02,160
the the<font color="#E5E5E5"> the handle to the CSP</font><font color="#CCCCCC"> and it</font>

550
00:21:58,560 --> 00:22:06,000
will release<font color="#E5E5E5"> the handle so to tie it all</font>

551
00:22:02,160 --> 00:22:08,010
together<font color="#E5E5E5"> in that so</font><font color="#CCCCCC"> to put it all</font>

552
00:22:06,000 --> 00:22:09,390
together<font color="#CCCCCC"> this is not specific to</font><font color="#E5E5E5"> the</font>

553
00:22:08,010 --> 00:22:10,740
<font color="#CCCCCC">knot Petya ransomware what we were</font>

554
00:22:09,390 --> 00:22:12,300
discussing up till now<font color="#CCCCCC"> all the assembly</font>

555
00:22:10,740 --> 00:22:14,310
<font color="#E5E5E5">we were seeing where it was specific to</font>

556
00:22:12,300 --> 00:22:16,649
the<font color="#CCCCCC"> knot Petya ransomware</font><font color="#E5E5E5"> but this is a</font>

557
00:22:14,310 --> 00:22:17,429
generic<font color="#E5E5E5"> pseudocode that</font><font color="#CCCCCC"> we came up</font><font color="#E5E5E5"> with</font>

558
00:22:16,650 --> 00:22:19,800
after<font color="#E5E5E5"> looking at</font>

559
00:22:17,430 --> 00:22:23,520
many<font color="#E5E5E5"> variants many modern ransomware</font>

560
00:22:19,800 --> 00:22:26,850
variants that<font color="#E5E5E5"> are successful and they</font>

561
00:22:23,520 --> 00:22:28,500
all follow this kind<font color="#E5E5E5"> of a scheme</font><font color="#CCCCCC"> so if</font>

562
00:22:26,850 --> 00:22:30,480
you go about<font color="#E5E5E5"> putting this in the form of</font>

563
00:22:28,500 --> 00:22:34,710
pseudocode<font color="#CCCCCC"> we'll see</font><font color="#E5E5E5"> that it starts with</font>

564
00:22:30,480 --> 00:22:36,690
<font color="#CCCCCC">a main function at the</font><font color="#E5E5E5"> top where where</font>

565
00:22:34,710 --> 00:22:38,400
it will generate the<font color="#E5E5E5"> handle to the CSP</font>

566
00:22:36,690 --> 00:22:39,960
<font color="#E5E5E5">and the next thing it will call some</font>

567
00:22:38,400 --> 00:22:42,810
subroutines<font color="#CCCCCC"> each subroutine has a</font>

568
00:22:39,960 --> 00:22:44,700
specific task<font color="#CCCCCC"> for example this first</font>

569
00:22:42,810 --> 00:22:46,500
subroutine is responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> generating</font>

570
00:22:44,700 --> 00:22:47,880
the<font color="#E5E5E5"> key so when it needs the key it will</font>

571
00:22:46,500 --> 00:22:50,760
<font color="#E5E5E5">make the call to the subroutine that</font>

572
00:22:47,880 --> 00:22:52,380
<font color="#CCCCCC">will generate</font><font color="#E5E5E5"> the key so in this we're</font>

573
00:22:50,760 --> 00:22:54,840
<font color="#CCCCCC">using again</font><font color="#E5E5E5"> like I mentioned</font><font color="#CCCCCC"> before</font>

574
00:22:52,380 --> 00:22:56,430
<font color="#CCCCCC">Krypton key to generate the key the</font>

575
00:22:54,840 --> 00:22:58,139
algorithm<font color="#E5E5E5"> that is being specified over</font>

576
00:22:56,430 --> 00:23:01,770
<font color="#E5E5E5">there is the second parameter to that</font>

577
00:22:58,140 --> 00:23:04,170
<font color="#E5E5E5">function which is the the AES 128 bit</font>

578
00:23:01,770 --> 00:23:05,780
<font color="#E5E5E5">and that's what the key is</font><font color="#CCCCCC"> being</font>

579
00:23:04,170 --> 00:23:09,060
<font color="#CCCCCC">generated and</font><font color="#E5E5E5"> will be stored in that</font>

580
00:23:05,780 --> 00:23:11,760
<font color="#E5E5E5">symmetric key variable and in the end</font>

581
00:23:09,060 --> 00:23:13,440
and and then the this<font color="#E5E5E5"> function will</font>

582
00:23:11,760 --> 00:23:15,600
return the symmetric key<font color="#E5E5E5"> generated and</font>

583
00:23:13,440 --> 00:23:17,700
the you know<font color="#E5E5E5"> control returns back</font><font color="#CCCCCC"> to</font>

584
00:23:15,600 --> 00:23:19,649
main<font color="#E5E5E5"> then the next function is or</font>

585
00:23:17,700 --> 00:23:21,300
subroutine is executed which is you know

586
00:23:19,650 --> 00:23:24,900
go<font color="#E5E5E5"> ahead and start encrypting the files</font>

587
00:23:21,300 --> 00:23:26,850
using<font color="#E5E5E5"> the symmetric key and</font><font color="#CCCCCC"> that is you</font>

588
00:23:24,900 --> 00:23:28,950
know<font color="#E5E5E5"> traverse go through the directories</font>

589
00:23:26,850 --> 00:23:30,389
and find out the file types<font color="#E5E5E5"> that you're</font>

590
00:23:28,950 --> 00:23:32,160
interested<font color="#E5E5E5"> in the extensions you're</font>

591
00:23:30,390 --> 00:23:34,950
interested in and use the key<font color="#E5E5E5"> to encrypt</font>

592
00:23:32,160 --> 00:23:37,050
<font color="#E5E5E5">it return control back</font><font color="#CCCCCC"> to main and</font>

593
00:23:34,950 --> 00:23:39,780
<font color="#E5E5E5">finally the next function</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> call which</font>

594
00:23:37,050 --> 00:23:42,930
<font color="#E5E5E5">is which we call</font><font color="#CCCCCC"> a cleanup function and</font>

595
00:23:39,780 --> 00:23:46,740
this function<font color="#E5E5E5"> is responsible for making</font>

596
00:23:42,930 --> 00:23:49,320
<font color="#E5E5E5">sure that making sure that the they</font><font color="#CCCCCC"> are</font>

597
00:23:46,740 --> 00:23:51,090
they encode the AES key<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the symmetric</font>

598
00:23:49,320 --> 00:23:53,580
key that they've<font color="#CCCCCC"> used to encrypt</font><font color="#E5E5E5"> the</font>

599
00:23:51,090 --> 00:23:55,530
data and they encrypt it using the

600
00:23:53,580 --> 00:23:57,870
attackers public key and<font color="#CCCCCC"> that is safely</font>

601
00:23:55,530 --> 00:23:59,790
<font color="#E5E5E5">stored</font><font color="#CCCCCC"> on the victim's machine and then</font>

602
00:23:57,870 --> 00:24:03,060
after<font color="#E5E5E5"> that they'll display the ransom</font>

603
00:23:59,790 --> 00:24:04,590
notes<font color="#E5E5E5"> and then and then and then free</font>

604
00:24:03,060 --> 00:24:05,940
<font color="#CCCCCC">the memory make sure</font><font color="#E5E5E5"> that everything is</font>

605
00:24:04,590 --> 00:24:13,320
<font color="#E5E5E5">white so that the key cannot be</font>

606
00:24:05,940 --> 00:24:15,690
recovered and so<font color="#CCCCCC"> I so in conclusion we</font>

607
00:24:13,320 --> 00:24:19,649
have we assumed that ransomware has

608
00:24:15,690 --> 00:24:23,040
<font color="#CCCCCC">infiltrated</font><font color="#E5E5E5"> host and and because it will</font>

609
00:24:19,650 --> 00:24:24,480
continue<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> victims</font><font color="#CCCCCC"> and what can we</font>

610
00:24:23,040 --> 00:24:26,190
do<font color="#E5E5E5"> from this</font><font color="#CCCCCC"> point on once the files</font>

611
00:24:24,480 --> 00:24:28,650
<font color="#E5E5E5">have been encrypted is there a way</font><font color="#CCCCCC"> for</font>

612
00:24:26,190 --> 00:24:31,140
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to quickly reverse the encryption get</font>

613
00:24:28,650 --> 00:24:31,320
victims<font color="#E5E5E5"> their files back</font><font color="#CCCCCC"> without paying</font>

614
00:24:31,140 --> 00:24:33,900
the

615
00:24:31,320 --> 00:24:35,669
<font color="#CCCCCC">handsome of course</font><font color="#E5E5E5"> and so the only the</font>

616
00:24:33,900 --> 00:24:37,530
<font color="#CCCCCC">only thing we can do is hope that</font>

617
00:24:35,670 --> 00:24:40,050
<font color="#E5E5E5">they've made a mistake</font><font color="#CCCCCC"> in implementing</font>

618
00:24:37,530 --> 00:24:42,450
key management<font color="#E5E5E5"> and use that to our</font>

619
00:24:40,050 --> 00:24:44,610
advantage<font color="#CCCCCC"> an empirical analysis suggests</font>

620
00:24:42,450 --> 00:24:47,460
<font color="#E5E5E5">like I said a study done by</font><font color="#CCCCCC"> Carazo</font>

621
00:24:44,610 --> 00:24:50,159
<font color="#CCCCCC">Tollan about 2015 in their paper their</font>

622
00:24:47,460 --> 00:24:51,690
study about<font color="#CCCCCC"> 1300 ransomware variance and</font>

623
00:24:50,160 --> 00:24:53,040
they found<font color="#CCCCCC"> only 6% are effective so we</font>

624
00:24:51,690 --> 00:24:56,010
<font color="#E5E5E5">know that they make mistakes and they're</font>

625
00:24:53,040 --> 00:24:58,500
<font color="#E5E5E5">not the best programmers out</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> so so</font>

626
00:24:56,010 --> 00:25:00,000
so that that's why it pays<font color="#CCCCCC"> to</font><font color="#E5E5E5"> pay</font>

627
00:24:58,500 --> 00:25:01,740
<font color="#CCCCCC">attention to key management</font><font color="#E5E5E5"> and make</font>

628
00:25:00,000 --> 00:25:04,800
sure we understand it<font color="#CCCCCC"> better</font><font color="#E5E5E5"> than they</font>

629
00:25:01,740 --> 00:25:06,660
do and<font color="#E5E5E5"> and this allows us to</font><font color="#CCCCCC"> quickly</font>

630
00:25:04,800 --> 00:25:09,060
attack flaws and ransomware to recover

631
00:25:06,660 --> 00:25:11,760
<font color="#E5E5E5">files and then we can start</font><font color="#CCCCCC"> contributing</font>

632
00:25:09,060 --> 00:25:14,429
our own<font color="#CCCCCC"> decrypt errs</font><font color="#E5E5E5"> to efforts like no</font>

633
00:25:11,760 --> 00:25:16,170
<font color="#E5E5E5">more ransomware where we can help</font>

634
00:25:14,430 --> 00:25:20,070
victims<font color="#E5E5E5"> get their files back without</font>

635
00:25:16,170 --> 00:25:22,080
paying the ransom<font color="#E5E5E5"> that's it</font>

636
00:25:20,070 --> 00:25:30,989
thank<font color="#E5E5E5"> you very</font><font color="#CCCCCC"> much</font>

637
00:25:22,080 --> 00:25:30,989
[Applause]

