1
00:00:00,000 --> 00:00:11,730
ready<font color="#CCCCCC"> okay</font>

2
00:00:07,859 --> 00:00:13,440
welcome to binary ninja<font color="#CCCCCC"> vs idea pro our</font>

3
00:00:11,730 --> 00:00:15,210
<font color="#CCCCCC">i think i had a different title</font>

4
00:00:13,440 --> 00:00:17,640
<font color="#E5E5E5">originally</font><font color="#CCCCCC"> in it using binary Ninja to</font>

5
00:00:15,210 --> 00:00:19,439
attack modern malware we work<font color="#E5E5E5"> my</font>

6
00:00:17,640 --> 00:00:20,730
associate and I just<font color="#E5E5E5"> wrote</font><font color="#CCCCCC"> I'm we</font>

7
00:00:19,439 --> 00:00:22,260
weren't exactly sure what to call it

8
00:00:20,730 --> 00:00:25,830
basically we wanted to do a little

9
00:00:22,260 --> 00:00:27,480
investigation in this new reverse

10
00:00:25,830 --> 00:00:29,549
engineering tool called binary<font color="#CCCCCC"> ninja</font>

11
00:00:27,480 --> 00:00:31,410
<font color="#E5E5E5">just to play with it figured out and see</font>

12
00:00:29,550 --> 00:00:33,960
how it works and see if it's as good as

13
00:00:31,410 --> 00:00:34,980
the kind of reigning champion which of

14
00:00:33,960 --> 00:00:37,559
course if you know anything about

15
00:00:34,980 --> 00:00:40,468
<font color="#E5E5E5">reverse engineering</font><font color="#CCCCCC"> prevent the reigning</font>

16
00:00:37,559 --> 00:00:41,550
<font color="#CCCCCC">champions</font><font color="#E5E5E5"> I'd approach so let me give</font>

17
00:00:40,469 --> 00:00:43,800
you a little background<font color="#E5E5E5"> in case you're</font>

18
00:00:41,550 --> 00:00:45,569
not familiar with reverse engineering

19
00:00:43,800 --> 00:00:46,890
and you know that whole scene<font color="#CCCCCC"> i know</font>

20
00:00:45,570 --> 00:00:49,140
<font color="#E5E5E5">everybody comes to these conferences</font>

21
00:00:46,890 --> 00:00:50,789
with very different levels of experience

22
00:00:49,140 --> 00:00:52,379
some of your maybe<font color="#E5E5E5"> master reverse</font>

23
00:00:50,789 --> 00:00:54,210
engineers and some of you maybe haven't

24
00:00:52,379 --> 00:00:55,199
really heard a lot about it and<font color="#CCCCCC"> kind of</font>

25
00:00:54,210 --> 00:00:57,899
<font color="#E5E5E5">want to learn a little something about</font>

26
00:00:55,199 --> 00:00:58,949
it so there's at least three main

27
00:00:57,899 --> 00:01:00,780
reasons you might want to<font color="#CCCCCC"> reverse</font>

28
00:00:58,949 --> 00:01:04,140
<font color="#CCCCCC">engineer code probably the</font><font color="#E5E5E5"> most</font>

29
00:01:00,780 --> 00:01:06,750
prevalent reason is malware analysis<font color="#E5E5E5"> so</font>

30
00:01:04,140 --> 00:01:08,729
in and particularly on the<font color="#CCCCCC"> windows</font>

31
00:01:06,750 --> 00:01:10,590
environment<font color="#E5E5E5"> right</font><font color="#CCCCCC"> i know some of the</font>

32
00:01:08,729 --> 00:01:12,900
<font color="#CCCCCC">linux people out there</font><font color="#E5E5E5"> and embedded</font>

33
00:01:10,590 --> 00:01:14,310
systems people probably<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> don't</font>

34
00:01:12,900 --> 00:01:16,619
think much of that but the fact is

35
00:01:14,310 --> 00:01:18,540
<font color="#CCCCCC">Microsoft still owns about eighty</font>

36
00:01:16,619 --> 00:01:21,360
percent of the enterprise<font color="#E5E5E5"> and if you're</font>

37
00:01:18,540 --> 00:01:22,439
writing commodity malware<font color="#E5E5E5"> ransomware or</font>

38
00:01:21,360 --> 00:01:24,780
you know the sort of<font color="#E5E5E5"> the run-of-the-mill</font>

39
00:01:22,439 --> 00:01:27,419
junk<font color="#CCCCCC"> you're not going to write it for</font>

40
00:01:24,780 --> 00:01:28,680
some obscure system that has like<font color="#CCCCCC"> point</font>

41
00:01:27,420 --> 00:01:30,270
<font color="#CCCCCC">zero one</font><font color="#E5E5E5"> percent of the market right</font>

42
00:01:28,680 --> 00:01:31,439
probably you might if<font color="#E5E5E5"> you're a</font>

43
00:01:30,270 --> 00:01:32,970
<font color="#E5E5E5">nation-state and you're going after</font>

44
00:01:31,439 --> 00:01:36,360
automobiles<font color="#E5E5E5"> or you know you definitely</font>

45
00:01:32,970 --> 00:01:37,650
might but generally a lot of the garbage

46
00:01:36,360 --> 00:01:39,090
malware and stuff we see<font color="#E5E5E5"> it's written</font>

47
00:01:37,650 --> 00:01:41,189
for<font color="#CCCCCC"> windows and its kind of the</font>

48
00:01:39,090 --> 00:01:42,810
<font color="#E5E5E5">commodity stuff so reverse engineering</font>

49
00:01:41,189 --> 00:01:44,548
<font color="#E5E5E5">for malware analysis particularly to</font>

50
00:01:42,810 --> 00:01:45,360
kind of look at all the daily stuff so

51
00:01:44,549 --> 00:01:47,759
to speak

52
00:01:45,360 --> 00:01:49,590
that's the most common use case and<font color="#CCCCCC"> I've</font>

53
00:01:47,759 --> 00:01:50,670
actually got a class on<font color="#E5E5E5"> pluralsight</font>

54
00:01:49,590 --> 00:01:53,159
which if you haven't heard of<font color="#CCCCCC"> it's an</font>

55
00:01:50,670 --> 00:01:54,960
online<font color="#E5E5E5"> training company</font><font color="#CCCCCC"> i'm called</font>

56
00:01:53,159 --> 00:01:57,750
advanced malware analysis<font color="#E5E5E5"> combating</font>

57
00:01:54,960 --> 00:02:00,059
exploit kits and I go over<font color="#E5E5E5"> distribution</font>

58
00:01:57,750 --> 00:02:02,460
<font color="#E5E5E5">landing exploit kids payloads effects</font>

59
00:02:00,060 --> 00:02:04,259
<font color="#CCCCCC">IOC's tracking clean up all that stuff</font>

60
00:02:02,460 --> 00:02:05,429
if you want to like take a deep dive

61
00:02:04,259 --> 00:02:07,230
course<font color="#E5E5E5"> in</font><font color="#CCCCCC"> at</font>

62
00:02:05,430 --> 00:02:09,720
we're not going to get that deep into

63
00:02:07,230 --> 00:02:12,060
our analysis today<font color="#CCCCCC"> in fact</font><font color="#E5E5E5"> this talk is</font>

64
00:02:09,720 --> 00:02:13,980
not really about how to do<font color="#CCCCCC"> malware now</font>

65
00:02:12,060 --> 00:02:16,230
<font color="#E5E5E5">since it's more about comparing a couple</font>

66
00:02:13,980 --> 00:02:18,329
of tools since one of them<font color="#E5E5E5"> is</font><font color="#CCCCCC"> so new a</font>

67
00:02:16,230 --> 00:02:19,590
lot<font color="#E5E5E5"> of people haven't heard of it</font>

68
00:02:18,330 --> 00:02:21,330
the other reason<font color="#E5E5E5"> you might do malware</font>

69
00:02:19,590 --> 00:02:24,120
analysis is for vulnerability research

70
00:02:21,330 --> 00:02:26,250
<font color="#CCCCCC">our reverse engineering I'm sorry's 4br</font>

71
00:02:24,120 --> 00:02:28,320
<font color="#E5E5E5">basically and that's a pretty common</font>

72
00:02:26,250 --> 00:02:28,890
thing<font color="#E5E5E5"> so if you're hunting for bugs</font>

73
00:02:28,320 --> 00:02:30,959
<font color="#E5E5E5">you're looking for vulnerabilities</font>

74
00:02:28,890 --> 00:02:33,179
you're trying to write exploits all that

75
00:02:30,959 --> 00:02:34,920
stuff especially obviously against

76
00:02:33,180 --> 00:02:37,830
<font color="#CCCCCC">clothes for</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> you gotta</font><font color="#E5E5E5"> reverse</font>

77
00:02:34,920 --> 00:02:39,359
<font color="#CCCCCC">engineer the code</font><font color="#E5E5E5"> a great example that's</font>

78
00:02:37,830 --> 00:02:40,739
hot right now<font color="#CCCCCC"> his car hacking you might</font>

79
00:02:39,360 --> 00:02:41,730
have to<font color="#CCCCCC"> reverse engineer the firmware</font>

80
00:02:40,739 --> 00:02:43,410
<font color="#E5E5E5">dump it off</font>

81
00:02:41,730 --> 00:02:44,700
reverse it figure out how it works

82
00:02:43,410 --> 00:02:46,709
figure out what<font color="#E5E5E5"> messages</font><font color="#CCCCCC"> that sends to</font>

83
00:02:44,700 --> 00:02:48,420
the canvas whatever it may be<font color="#E5E5E5"> and you</font>

84
00:02:46,709 --> 00:02:50,910
can do that for any system<font color="#CCCCCC"> right skata</font>

85
00:02:48,420 --> 00:02:54,359
<font color="#CCCCCC">cars</font><font color="#E5E5E5"> windows linux it doesn't matter</font>

86
00:02:50,910 --> 00:02:55,590
that whole thing<font color="#E5E5E5"> works across the board</font>

87
00:02:54,360 --> 00:02:57,239
the third reason you might<font color="#CCCCCC"> do reverse</font>

88
00:02:55,590 --> 00:02:58,500
engineering and this actually happens

89
00:02:57,239 --> 00:03:00,000
more than people might think<font color="#CCCCCC"> its</font>

90
00:02:58,500 --> 00:03:02,760
developers actually do<font color="#E5E5E5"> believe</font><font color="#CCCCCC"> it or</font><font color="#E5E5E5"> not</font>

91
00:03:00,000 --> 00:03:04,560
<font color="#E5E5E5">a lot of times they're developing some</font>

92
00:03:02,760 --> 00:03:06,329
<font color="#E5E5E5">low-level thing like you know kind of a</font>

93
00:03:04,560 --> 00:03:07,170
<font color="#E5E5E5">low-level kernel driver or something</font>

94
00:03:06,330 --> 00:03:08,790
like that and there's a lot of

95
00:03:07,170 --> 00:03:10,829
<font color="#CCCCCC">closed-source API is that they might</font>

96
00:03:08,790 --> 00:03:13,620
want to have access to and they might

97
00:03:10,830 --> 00:03:14,220
not be<font color="#E5E5E5"> well documented and so it's kind</font>

98
00:03:13,620 --> 00:03:15,900
of a nightmare

99
00:03:14,220 --> 00:03:17,190
it's sort of a<font color="#E5E5E5"> developer's worst-case</font>

100
00:03:15,900 --> 00:03:19,620
scenario that they actually have to go

101
00:03:17,190 --> 00:03:22,829
ahead and<font color="#CCCCCC"> reverse engineer some you know</font>

102
00:03:19,620 --> 00:03:24,510
<font color="#E5E5E5">driver whatever dll or something to try</font>

103
00:03:22,830 --> 00:03:26,489
to figure out how an<font color="#CCCCCC"> API even works it's</font>

104
00:03:24,510 --> 00:03:27,870
not ideal but it does actually<font color="#E5E5E5"> happen</font>

105
00:03:26,489 --> 00:03:29,970
more than you<font color="#E5E5E5"> think particularly the</font>

106
00:03:27,870 --> 00:03:31,410
security space<font color="#CCCCCC"> you're writing a virus</font>

107
00:03:29,970 --> 00:03:33,450
engine something like that a lot of

108
00:03:31,410 --> 00:03:34,890
times you're touching<font color="#E5E5E5"> parts of the</font>

109
00:03:33,450 --> 00:03:37,200
system that really shouldn't

110
00:03:34,890 --> 00:03:38,488
most people aren't touching<font color="#CCCCCC"> right in</font><font color="#E5E5E5"> a</font>

111
00:03:37,200 --> 00:03:40,380
good example that would be if you're

112
00:03:38,489 --> 00:03:42,450
<font color="#E5E5E5">writing a hardware driver you're</font>

113
00:03:40,380 --> 00:03:44,640
interfacing sort of and well-known<font color="#E5E5E5"> pass</font>

114
00:03:42,450 --> 00:03:46,738
<font color="#E5E5E5">plug-and-play</font><font color="#CCCCCC"> how to print that sort of</font>

115
00:03:44,640 --> 00:03:49,018
thing very cool<font color="#CCCCCC"> but if you're writing a</font>

116
00:03:46,739 --> 00:03:50,310
<font color="#CCCCCC">navy engine it's a software driver</font>

117
00:03:49,019 --> 00:03:52,140
you're not really touching any hardware

118
00:03:50,310 --> 00:03:53,910
and so you have to touch parts of the

119
00:03:52,140 --> 00:03:55,470
filtering stack and stuff that it's<font color="#E5E5E5"> well</font>

120
00:03:53,910 --> 00:03:59,820
<font color="#E5E5E5">documented but maybe not in every case</font>

121
00:03:55,470 --> 00:04:04,350
<font color="#CCCCCC">so it's a</font><font color="#E5E5E5"> little different so that's</font>

122
00:03:59,820 --> 00:04:06,090
<font color="#CCCCCC">kinda why today's learning is again</font>

123
00:04:04,350 --> 00:04:07,680
<font color="#E5E5E5">trying to figure out how good is this</font>

124
00:04:06,090 --> 00:04:09,690
new tool how does it compare to<font color="#CCCCCC"> ida and</font>

125
00:04:07,680 --> 00:04:11,910
let's take a peek at it with an example

126
00:04:09,690 --> 00:04:15,000
so<font color="#E5E5E5"> I kind of call it</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> pro and that's</font>

127
00:04:11,910 --> 00:04:15,989
their old icon for the reverse

128
00:04:15,000 --> 00:04:17,779
engineering<font color="#CCCCCC"> tool i approached</font><font color="#E5E5E5"> been</font>

129
00:04:15,989 --> 00:04:19,639
around forever that's you know

130
00:04:17,779 --> 00:04:21,469
that's her<font color="#E5E5E5"> that beautiful lady right</font>

131
00:04:19,639 --> 00:04:23,060
there<font color="#CCCCCC"> I remember at least talking to one</font>

132
00:04:21,470 --> 00:04:25,250
of my reverse engineering friends and he

133
00:04:23,060 --> 00:04:26,750
said you know your life is kind of sad

134
00:04:25,250 --> 00:04:28,400
when the only lady you've seen in two

135
00:04:26,750 --> 00:04:31,250
weeks is the reverse engineering lady

136
00:04:28,400 --> 00:04:34,190
like the<font color="#E5E5E5"> you know it is what it is right</font>

137
00:04:31,250 --> 00:04:36,680
so anyway<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> ninja</font><font color="#E5E5E5"> is a newer tool</font>

138
00:04:34,190 --> 00:04:39,050
<font color="#CCCCCC">it's written by a friend of mine Jordan</font>

139
00:04:36,680 --> 00:04:40,610
<font color="#CCCCCC">wines he runs a company called vector</font><font color="#E5E5E5"> 35</font>

140
00:04:39,050 --> 00:04:42,919
down in<font color="#CCCCCC"> melbourne florida and he's got a</font>

141
00:04:40,610 --> 00:04:44,570
few guys<font color="#CCCCCC"> he works with</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're doing</font>

142
00:04:42,919 --> 00:04:45,889
some really cool stuff<font color="#E5E5E5"> and they decided</font>

143
00:04:44,570 --> 00:04:49,370
because they do a lot of vulnerability

144
00:04:45,889 --> 00:04:51,680
research to write their own tool<font color="#E5E5E5"> they</font>

145
00:04:49,370 --> 00:04:53,660
wanted to create something that was a

146
00:04:51,680 --> 00:04:55,040
little faster a little cheaper a little

147
00:04:53,660 --> 00:04:57,500
more flexible for the kind of work they

148
00:04:55,040 --> 00:04:58,910
do<font color="#E5E5E5"> and so when he told me about it I was</font>

149
00:04:57,500 --> 00:05:00,169
like that's really exciting<font color="#CCCCCC"> i want to</font>

150
00:04:58,910 --> 00:05:02,750
demo like let me have a beta version

151
00:05:00,169 --> 00:05:06,590
<font color="#E5E5E5">i'll give it a try and we'll take a work</font>

152
00:05:02,750 --> 00:05:10,400
and see you know how it works so the

153
00:05:06,590 --> 00:05:12,289
other thing<font color="#CCCCCC"> i want to do in this talk is</font>

154
00:05:10,400 --> 00:05:14,630
kind of a<font color="#CCCCCC"> call to action</font><font color="#E5E5E5"> like you can do</font>

155
00:05:12,290 --> 00:05:16,850
it you can do<font color="#CCCCCC"> eet there however</font><font color="#E5E5E5"> that guy</font>

156
00:05:14,630 --> 00:05:18,469
says it right<font color="#E5E5E5"> you can you can go out</font>

157
00:05:16,850 --> 00:05:20,810
there and try it i encourage you to you

158
00:05:18,470 --> 00:05:22,880
know get involved with either tool they

159
00:05:20,810 --> 00:05:25,520
have demos for both<font color="#CCCCCC"> Ida and binary just</font>

160
00:05:22,880 --> 00:05:26,630
so you can you know I take the code

161
00:05:25,520 --> 00:05:28,940
sample that<font color="#CCCCCC"> i'm going to show you at the</font>

162
00:05:26,630 --> 00:05:30,169
end we put it up on get lab<font color="#E5E5E5"> you can grab</font>

163
00:05:28,940 --> 00:05:31,550
that you can download it you can play

164
00:05:30,169 --> 00:05:34,190
with it<font color="#E5E5E5"> in both</font><font color="#CCCCCC"> and you can kind of get</font>

165
00:05:31,550 --> 00:05:37,400
a sense for how they work on your own<font color="#E5E5E5"> so</font>

166
00:05:34,190 --> 00:05:39,200
<font color="#CCCCCC">whom I</font><font color="#E5E5E5"> my name's</font><font color="#CCCCCC"> Jared aman I've been</font>

167
00:05:37,400 --> 00:05:41,210
around the scene for<font color="#E5E5E5"> a long time</font><font color="#CCCCCC"> 16</font>

168
00:05:39,200 --> 00:05:43,820
<font color="#E5E5E5">years my work for binary defense systems</font>

169
00:05:41,210 --> 00:05:45,859
<font color="#CCCCCC">on the CTO of the next-gen software</font>

170
00:05:43,820 --> 00:05:47,300
product called vision that we're

171
00:05:45,860 --> 00:05:48,860
creating<font color="#CCCCCC"> their that's my day job and I</font>

172
00:05:47,300 --> 00:05:50,870
do a lot of other things<font color="#E5E5E5"> too</font>

173
00:05:48,860 --> 00:05:52,250
<font color="#CCCCCC">I do a lot of training</font><font color="#E5E5E5"> like a black hat</font>

174
00:05:50,870 --> 00:05:56,300
and other conferences<font color="#E5E5E5"> through my video</font>

175
00:05:52,250 --> 00:05:58,610
labs and other stuff too<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I've got a</font>

176
00:05:56,300 --> 00:06:00,680
few<font color="#CCCCCC"> com guys that I</font><font color="#E5E5E5"> kind of partner</font>

177
00:05:58,610 --> 00:06:03,680
<font color="#E5E5E5">without a lot of this</font><font color="#CCCCCC"> i'm just roche I</font>

178
00:06:00,680 --> 00:06:05,570
<font color="#E5E5E5">nine</font><font color="#CCCCCC"> he's a professor at DSU</font><font color="#E5E5E5"> and he does</font>

179
00:06:03,680 --> 00:06:07,490
helps me with stuff and he does

180
00:06:05,570 --> 00:06:09,289
<font color="#CCCCCC">part-time our analysis for chromium and</font>

181
00:06:07,490 --> 00:06:11,300
so a lot of these folks are pretty busy

182
00:06:09,289 --> 00:06:13,820
as well as another associate of ours and

183
00:06:11,300 --> 00:06:18,080
<font color="#CCCCCC">Joshua blade</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> kind of who we</font>

184
00:06:13,820 --> 00:06:20,599
are so let's talk about binary ninja

185
00:06:18,080 --> 00:06:22,880
what does it do<font color="#E5E5E5"> well it does a lot of</font>

186
00:06:20,600 --> 00:06:24,590
the things that<font color="#E5E5E5"> you'd expect any</font>

187
00:06:22,880 --> 00:06:26,990
<font color="#CCCCCC">disassembler to do so you take a fully</font>

188
00:06:24,590 --> 00:06:29,239
compiled program typically written in<font color="#CCCCCC"> C</font>

189
00:06:26,990 --> 00:06:30,350
<font color="#CCCCCC">C++ some other language like that could</font>

190
00:06:29,240 --> 00:06:34,520
be compiled<font color="#CCCCCC"> forever</font>

191
00:06:30,350 --> 00:06:37,340
<font color="#CCCCCC">86</font><font color="#E5E5E5"> 64-bit x86 could be compiled</font><font color="#CCCCCC"> for arm</font>

192
00:06:34,520 --> 00:06:39,260
<font color="#E5E5E5">32</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> 64-bit whatever it may be</font><font color="#CCCCCC"> and</font>

193
00:06:37,340 --> 00:06:40,849
<font color="#E5E5E5">again there's that reason that you might</font>

194
00:06:39,260 --> 00:06:42,680
want<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> it you stick it in the</font>

195
00:06:40,850 --> 00:06:46,340
disassembler and you have to look at the

196
00:06:42,680 --> 00:06:48,680
<font color="#CCCCCC">assembly</font><font color="#E5E5E5"> and there's a lot of</font>

197
00:06:46,340 --> 00:06:50,239
interactive capability that it's useful

198
00:06:48,680 --> 00:06:51,950
beyond that because looking at

199
00:06:50,240 --> 00:06:54,590
<font color="#E5E5E5">assemblies pretty painful</font>

200
00:06:51,950 --> 00:06:56,300
you've ever<font color="#CCCCCC"> seen</font><font color="#E5E5E5"> you know move this</font><font color="#CCCCCC"> beam</font>

201
00:06:54,590 --> 00:06:58,010
<font color="#E5E5E5">that</font><font color="#CCCCCC"> register remove this value to that</font>

202
00:06:56,300 --> 00:07:01,160
register<font color="#CCCCCC"> populace register push that</font>

203
00:06:58,010 --> 00:07:04,010
register<font color="#CCCCCC"> jump je ne</font><font color="#E5E5E5"> call whatever it's</font>

204
00:07:01,160 --> 00:07:06,560
like if you're really into assembly it's

205
00:07:04,010 --> 00:07:09,530
you know becomes more intuitive but<font color="#E5E5E5"> it's</font>

206
00:07:06,560 --> 00:07:11,390
<font color="#E5E5E5">not so intuitive from the get-go</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> how</font>

207
00:07:09,530 --> 00:07:12,679
do you get into it how do you sort of

208
00:07:11,390 --> 00:07:13,969
immerse<font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> in well first you need</font>

209
00:07:12,680 --> 00:07:15,260
to learn the language that it was

210
00:07:13,970 --> 00:07:17,810
originally written right so if<font color="#E5E5E5"> you're</font>

211
00:07:15,260 --> 00:07:19,130
not AC programmer<font color="#CCCCCC"> the chance</font><font color="#E5E5E5"> that you're</font>

212
00:07:17,810 --> 00:07:22,730
<font color="#CCCCCC">going to be</font><font color="#E5E5E5"> able to understand assembly</font>

213
00:07:19,130 --> 00:07:24,680
is sort of unlikely<font color="#CCCCCC"> so probably you want</font>

214
00:07:22,730 --> 00:07:26,690
to learn a little bit about the original

215
00:07:24,680 --> 00:07:29,000
language that<font color="#E5E5E5"> it's written first and</font>

216
00:07:26,690 --> 00:07:31,070
then you can learn the architecture

217
00:07:29,000 --> 00:07:32,330
which<font color="#CCCCCC"> this whole like semester courses</font>

218
00:07:31,070 --> 00:07:33,860
<font color="#E5E5E5">in college on architecture computer</font>

219
00:07:32,330 --> 00:07:37,580
architecture you can learn about that

220
00:07:33,860 --> 00:07:39,080
but there's hope<font color="#E5E5E5"> you're not a programmer</font>

221
00:07:37,580 --> 00:07:40,760
to be able to use<font color="#CCCCCC"> some of these</font><font color="#E5E5E5"> tools</font><font color="#CCCCCC"> to</font>

222
00:07:39,080 --> 00:07:43,190
and that's why these tools like<font color="#E5E5E5"> a pro</font>

223
00:07:40,760 --> 00:07:45,349
and<font color="#CCCCCC"> fire</font><font color="#E5E5E5"> ninja</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> are so popular</font>

224
00:07:43,190 --> 00:07:47,600
because they make that sort of work

225
00:07:45,350 --> 00:07:49,160
<font color="#E5E5E5">accessible to someone who may not be a</font>

226
00:07:47,600 --> 00:07:50,600
programmer for example<font color="#E5E5E5"> they have a</font>

227
00:07:49,160 --> 00:07:51,980
strings window so you can see all the

228
00:07:50,600 --> 00:07:53,510
strings that are in the binary even if

229
00:07:51,980 --> 00:07:56,390
you don't really understand<font color="#CCCCCC"> the</font><font color="#E5E5E5"> assembly</font>

230
00:07:53,510 --> 00:07:58,490
<font color="#E5E5E5">they can sometimes do things like</font>

231
00:07:56,390 --> 00:08:00,380
decompile<font color="#CCCCCC"> like going to step further</font>

232
00:07:58,490 --> 00:08:01,970
than<font color="#CCCCCC"> disassembled idea has a decompiler</font>

233
00:08:00,380 --> 00:08:04,040
so<font color="#E5E5E5"> it can try to translate the assembly</font>

234
00:08:01,970 --> 00:08:05,930
back to see which makes it more readable

235
00:08:04,040 --> 00:08:11,030
with if this else that<font color="#E5E5E5"> that sort of</font>

236
00:08:05,930 --> 00:08:12,140
logic<font color="#CCCCCC"> in binary</font><font color="#E5E5E5"> digit has sort of half</font>

237
00:08:11,030 --> 00:08:13,909
of that they have an intermediate

238
00:08:12,140 --> 00:08:15,260
representation that gives you a little

239
00:08:13,910 --> 00:08:16,250
bit of the logic that's a little higher

240
00:08:15,260 --> 00:08:18,110
level than you something but they

241
00:08:16,250 --> 00:08:19,640
haven't actually<font color="#E5E5E5"> build a decompiler yet</font>

242
00:08:18,110 --> 00:08:21,920
<font color="#CCCCCC">and so</font><font color="#E5E5E5"> that's what we'll talk about kind</font>

243
00:08:19,640 --> 00:08:23,690
of comparing and contrasting<font color="#E5E5E5"> some of the</font>

244
00:08:21,920 --> 00:08:26,120
different features that make these tools

245
00:08:23,690 --> 00:08:29,510
so useful and accessible in a different

246
00:08:26,120 --> 00:08:31,760
level<font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> one of the first things</font>

247
00:08:29,510 --> 00:08:34,250
people want to know is what does it cost

248
00:08:31,760 --> 00:08:35,750
ok and the binary<font color="#E5E5E5"> engine model is pretty</font>

249
00:08:34,250 --> 00:08:36,950
<font color="#E5E5E5">straightforward there's a demo obviously</font>

250
00:08:35,750 --> 00:08:41,340
they both have a demo for free you can

251
00:08:36,950 --> 00:08:43,650
try it<font color="#CCCCCC"> by Ninja has a</font><font color="#E5E5E5"> $99 model</font>

252
00:08:41,340 --> 00:08:45,750
for personal and professional<font color="#E5E5E5"> for four</font>

253
00:08:43,650 --> 00:08:47,459
hundred dollars and that's quite a bit

254
00:08:45,750 --> 00:08:50,580
cheaper than<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> if you've ever looked</font>

255
00:08:47,460 --> 00:08:53,010
at pricing out<font color="#CCCCCC"> items so you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> bien</font>

256
00:08:50,580 --> 00:08:54,660
<font color="#CCCCCC">orb engine</font><font color="#E5E5E5"> or however</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> keep my short</font>

257
00:08:53,010 --> 00:08:56,250
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of saying binary injury time I</font>

258
00:08:54,660 --> 00:08:57,750
just say<font color="#CCCCCC"> Benjamin bien</font><font color="#E5E5E5"> that's a little</font>

259
00:08:56,250 --> 00:08:59,040
cheaper for sure so that's you know

260
00:08:57,750 --> 00:09:00,540
that's one<font color="#E5E5E5"> in</font><font color="#CCCCCC"> theirs</font>

261
00:08:59,040 --> 00:09:01,680
it's a little easier to understand<font color="#CCCCCC"> too</font>

262
00:09:00,540 --> 00:09:03,329
if you've ever looked at the pricing

263
00:09:01,680 --> 00:09:05,939
model for<font color="#CCCCCC"> Ida pro you go to the website</font>

264
00:09:03,330 --> 00:09:07,260
<font color="#E5E5E5">you try to read a bunch of stuff you</font>

265
00:09:05,940 --> 00:09:08,610
read some more stuff to try to figure

266
00:09:07,260 --> 00:09:10,830
out what zone you're in and if you need

267
00:09:08,610 --> 00:09:13,230
a name<font color="#E5E5E5"> for a type and at the end you're</font>

268
00:09:10,830 --> 00:09:15,210
scratching<font color="#E5E5E5"> your head going huh</font>

269
00:09:13,230 --> 00:09:16,710
which one do<font color="#CCCCCC"> i need it's</font><font color="#E5E5E5"> kind of</font>

270
00:09:15,210 --> 00:09:18,480
confusing and it's kind of expensive but

271
00:09:16,710 --> 00:09:20,400
eventually you'll figure out that you

272
00:09:18,480 --> 00:09:22,950
can buy it<font color="#E5E5E5"> for</font><font color="#CCCCCC"> one architecture so you</font>

273
00:09:20,400 --> 00:09:25,170
can buy it for windows like<font color="#CCCCCC"> ninja works</font>

274
00:09:22,950 --> 00:09:27,570
on<font color="#E5E5E5"> whatever works</font><font color="#CCCCCC"> on sir it's all</font>

275
00:09:25,170 --> 00:09:29,400
<font color="#E5E5E5">written in</font><font color="#CCCCCC"> python so it'll run in in</font><font color="#E5E5E5"> mac</font>

276
00:09:27,570 --> 00:09:30,870
or<font color="#E5E5E5"> windows or</font><font color="#CCCCCC"> linux so you don't have to</font>

277
00:09:29,400 --> 00:09:32,730
buy a separate version for each you can

278
00:09:30,870 --> 00:09:34,800
run either<font color="#CCCCCC"> where I do you have to buy it</font>

279
00:09:32,730 --> 00:09:36,960
for the one you want to run it and then

280
00:09:34,800 --> 00:09:38,849
you can either get a<font color="#E5E5E5"> named or floating</font>

281
00:09:36,960 --> 00:09:41,580
and there's different extensions you can

282
00:09:38,850 --> 00:09:43,320
get pro or<font color="#E5E5E5"> or standard and you can get</font>

283
00:09:41,580 --> 00:09:45,270
you can add on the decompiler by the

284
00:09:43,320 --> 00:09:46,350
<font color="#E5E5E5">time</font><font color="#CCCCCC"> y'all</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> be up to say</font>

285
00:09:45,270 --> 00:09:47,699
<font color="#CCCCCC">three thousand dollars</font><font color="#E5E5E5"> so it's</font>

286
00:09:46,350 --> 00:09:52,110
definitely<font color="#E5E5E5"> an order of magnitude more</font>

287
00:09:47,700 --> 00:09:53,490
<font color="#E5E5E5">expect expensive</font><font color="#CCCCCC"> so there's that</font><font color="#E5E5E5"> some</font>

288
00:09:52,110 --> 00:09:55,260
people don't care about that some people

289
00:09:53,490 --> 00:09:59,580
do you know<font color="#E5E5E5"> depends</font><font color="#CCCCCC"> on where you're at</font>

290
00:09:55,260 --> 00:10:01,380
so the interface are fairly similar<font color="#CCCCCC"> been</font>

291
00:09:59,580 --> 00:10:03,300
just got<font color="#CCCCCC"> kinda more</font><font color="#E5E5E5"> that hacker</font><font color="#CCCCCC"> looked</font>

292
00:10:01,380 --> 00:10:04,710
<font color="#CCCCCC">at sort</font><font color="#E5E5E5"> of dark background</font><font color="#CCCCCC"> looking where</font>

293
00:10:03,300 --> 00:10:06,329
<font color="#E5E5E5">is his white by default but you can</font>

294
00:10:04,710 --> 00:10:08,760
customize<font color="#CCCCCC"> an idea so the look-and-feel</font>

295
00:10:06,330 --> 00:10:10,170
<font color="#CCCCCC">is sort of E and take that with a grain</font>

296
00:10:08,760 --> 00:10:10,980
of salt because you can customize that

297
00:10:10,170 --> 00:10:13,020
either way

298
00:10:10,980 --> 00:10:14,370
<font color="#E5E5E5">basically you just take your executable</font>

299
00:10:13,020 --> 00:10:16,439
or your deal or whatever it is you want

300
00:10:14,370 --> 00:10:18,000
to reverse and just drop it on<font color="#E5E5E5"> you can</font>

301
00:10:16,440 --> 00:10:19,410
just open the<font color="#CCCCCC"> GUI and drop it in there</font>

302
00:10:18,000 --> 00:10:20,850
and<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> start disassembling it for</font>

303
00:10:19,410 --> 00:10:23,520
either one they both work the same way

304
00:10:20,850 --> 00:10:25,860
in that regard so that works

305
00:10:23,520 --> 00:10:27,420
they both have a linear disassembly<font color="#E5E5E5"> view</font>

306
00:10:25,860 --> 00:10:29,160
so you can<font color="#E5E5E5"> just look at the</font><font color="#CCCCCC"> Assembly</font>

307
00:10:27,420 --> 00:10:31,260
<font color="#E5E5E5">kind of one instruction at a time</font><font color="#CCCCCC"> they</font>

308
00:10:29,160 --> 00:10:33,480
both<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> textview</font><font color="#E5E5E5"> want to get just</font>

309
00:10:31,260 --> 00:10:34,439
the data<font color="#E5E5E5"> and they both have a graph you</font>

310
00:10:33,480 --> 00:10:36,120
and<font color="#E5E5E5"> you can switch back and forth</font>

311
00:10:34,440 --> 00:10:38,370
between<font color="#E5E5E5"> pretty easily just hit the space</font>

312
00:10:36,120 --> 00:10:40,230
key on your keyboard and you can switch

313
00:10:38,370 --> 00:10:41,850
between graph and flat<font color="#CCCCCC"> view so that's</font>

314
00:10:40,230 --> 00:10:43,200
pretty standard stuff that you expect

315
00:10:41,850 --> 00:10:44,850
out of your reverse engineering tool

316
00:10:43,200 --> 00:10:48,480
<font color="#E5E5E5">that's why these tools are better than</font>

317
00:10:44,850 --> 00:10:50,550
just looking at the<font color="#CCCCCC"> hexamon editor</font><font color="#E5E5E5"> some</font>

318
00:10:48,480 --> 00:10:52,770
<font color="#CCCCCC">reno raw form or something because these</font>

319
00:10:50,550 --> 00:10:54,030
tools give you the ability to zoom in

320
00:10:52,770 --> 00:10:56,069
and zoom out on the ground

321
00:10:54,030 --> 00:10:58,260
<font color="#CCCCCC">send you can add comments and you can</font>

322
00:10:56,070 --> 00:10:59,520
rename functions<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> either one of</font>

323
00:10:58,260 --> 00:11:01,740
<font color="#E5E5E5">them a lot of the hotkeys</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the same</font>

324
00:10:59,520 --> 00:11:03,030
same you can hit and<font color="#CCCCCC"> rename function</font><font color="#E5E5E5"> to</font>

325
00:11:01,740 --> 00:11:05,010
like<font color="#CCCCCC"> oh I think</font><font color="#E5E5E5"> I know</font><font color="#CCCCCC"> what this does</font>

326
00:11:03,030 --> 00:11:06,959
<font color="#CCCCCC">it's the crypto or whatever so that</font>

327
00:11:05,010 --> 00:11:08,790
<font color="#CCCCCC">interactive that's what I</font><font color="#E5E5E5"> da stands for</font>

328
00:11:06,960 --> 00:11:10,680
the interactive disassembler<font color="#E5E5E5"> that</font>

329
00:11:08,790 --> 00:11:13,949
interactive<font color="#E5E5E5"> pneus is really what makes</font>

330
00:11:10,680 --> 00:11:16,229
the difference<font color="#CCCCCC"> in bingen</font><font color="#E5E5E5"> the strings</font>

331
00:11:13,950 --> 00:11:17,520
window is down at the very bottom you

332
00:11:16,230 --> 00:11:19,020
click down there and you can pop up

333
00:11:17,520 --> 00:11:22,530
another menu<font color="#E5E5E5"> you can find the strings</font>

334
00:11:19,020 --> 00:11:23,939
window from<font color="#E5E5E5"> there so one thing that's</font>

335
00:11:22,530 --> 00:11:25,410
nice about<font color="#CCCCCC"> ninja that's slightly</font>

336
00:11:23,940 --> 00:11:28,290
different than<font color="#CCCCCC"> Ida is</font><font color="#E5E5E5"> you can have</font>

337
00:11:25,410 --> 00:11:29,699
multiple programs<font color="#E5E5E5"> inside the same main</font>

338
00:11:28,290 --> 00:11:32,760
window and they show up as different

339
00:11:29,700 --> 00:11:34,680
tabs<font color="#CCCCCC"> in Venice</font><font color="#E5E5E5"> inja so it doesn't quite</font>

340
00:11:32,760 --> 00:11:36,390
work<font color="#CCCCCC"> yeah but in the long run what their</font>

341
00:11:34,680 --> 00:11:38,489
view for that tool is if you have an

342
00:11:36,390 --> 00:11:40,080
executable that depends on 10 or 20

343
00:11:38,490 --> 00:11:41,940
different<font color="#CCCCCC"> DLLs you</font><font color="#E5E5E5"> could put them all in</font>

344
00:11:40,080 --> 00:11:44,310
the same project and<font color="#E5E5E5"> they would even be</font>

345
00:11:41,940 --> 00:11:46,530
some cohesion<font color="#E5E5E5"> there</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> with either</font>

346
00:11:44,310 --> 00:11:48,540
<font color="#E5E5E5">you have to basically open up each</font><font color="#CCCCCC"> CLL</font>

347
00:11:46,530 --> 00:11:50,160
<font color="#E5E5E5">or executable as a separate program</font>

348
00:11:48,540 --> 00:11:51,270
<font color="#E5E5E5">window which is not really a big deal</font>

349
00:11:50,160 --> 00:11:54,780
but it's just kind of one of those

350
00:11:51,270 --> 00:11:56,760
subtle differences that you'll see the

351
00:11:54,780 --> 00:11:58,079
log window and output<font color="#E5E5E5"> pretty similar</font>

352
00:11:56,760 --> 00:11:59,430
they both have an area at the bottom of

353
00:11:58,080 --> 00:12:01,230
<font color="#E5E5E5">the disassembler where you can get</font>

354
00:11:59,430 --> 00:12:02,579
output if you're running a script or if

355
00:12:01,230 --> 00:12:03,900
<font color="#E5E5E5">there's an error when it opens it or</font>

356
00:12:02,580 --> 00:12:05,970
anything like that you'll see that in a

357
00:12:03,900 --> 00:12:07,680
very similar way that they both have a

358
00:12:05,970 --> 00:12:11,040
scripting window

359
00:12:07,680 --> 00:12:12,839
the idea is<font color="#CCCCCC"> just kind of a small sliver</font>

360
00:12:11,040 --> 00:12:14,250
of<font color="#E5E5E5"> an interactive you want to run</font><font color="#CCCCCC"> python</font>

361
00:12:12,840 --> 00:12:16,920
kind of on the fly that's one of the

362
00:12:14,250 --> 00:12:18,480
cool things that any good interactive

363
00:12:16,920 --> 00:12:20,400
disassembly<font color="#CCCCCC"> tools been</font><font color="#E5E5E5"> allowed to do</font>

364
00:12:18,480 --> 00:12:22,350
which is to extend it with your own code

365
00:12:20,400 --> 00:12:24,510
you can write Python extensions<font color="#E5E5E5"> to</font>

366
00:12:22,350 --> 00:12:25,920
whatever you can imagine

367
00:12:24,510 --> 00:12:28,140
<font color="#E5E5E5">search the entire thing for certain</font>

368
00:12:25,920 --> 00:12:29,339
instruction or whatever you need to do

369
00:12:28,140 --> 00:12:30,930
<font color="#E5E5E5">as a reverse engineer that might be</font>

370
00:12:29,340 --> 00:12:33,600
tedious to do manually you can automate

371
00:12:30,930 --> 00:12:34,949
it<font color="#CCCCCC"> through scripting and that's the way</font>

372
00:12:33,600 --> 00:12:36,120
the future for everything<font color="#CCCCCC"> by the way if</font>

373
00:12:34,950 --> 00:12:37,320
you guys haven't<font color="#E5E5E5"> noticed it's a little</font>

374
00:12:36,120 --> 00:12:39,510
bunny trail talking about that but

375
00:12:37,320 --> 00:12:41,490
automation right<font color="#E5E5E5"> we see</font><font color="#CCCCCC"> the DevOps</font><font color="#E5E5E5"> we</font>

376
00:12:39,510 --> 00:12:43,890
see<font color="#CCCCCC"> an IT operations we see everywhere</font>

377
00:12:41,490 --> 00:12:45,840
<font color="#CCCCCC">everything's being like let the robots</font>

378
00:12:43,890 --> 00:12:47,040
do the easy stuff as Paul Nelson said

379
00:12:45,840 --> 00:12:48,360
yesterday when<font color="#CCCCCC"> I'm starting to</font><font color="#E5E5E5"> think he</font>

380
00:12:47,040 --> 00:12:50,760
<font color="#E5E5E5">was once said that I like that</font><font color="#CCCCCC"> was</font>

381
00:12:48,360 --> 00:12:52,200
<font color="#E5E5E5">catchy let the robots</font><font color="#CCCCCC"> too easy stuff so</font>

382
00:12:50,760 --> 00:12:56,610
anyway<font color="#CCCCCC"> on</font><font color="#E5E5E5"> we want to be able to extend</font>

383
00:12:52,200 --> 00:12:58,920
our tools as well<font color="#CCCCCC"> um so Otto analysis is</font>

384
00:12:56,610 --> 00:13:02,520
what happens when you throw the

385
00:12:58,920 --> 00:13:04,140
executable into the tool<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> to plug</font>

386
00:13:02,520 --> 00:13:05,069
and chug and do a lot of hard work to

387
00:13:04,140 --> 00:13:06,840
try to pull it<font color="#E5E5E5"> off</font>

388
00:13:05,070 --> 00:13:08,250
<font color="#CCCCCC">part it's</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> really complicated thing</font>

389
00:13:06,840 --> 00:13:09,960
<font color="#CCCCCC">it's basically</font><font color="#E5E5E5"> the opposite of what</font><font color="#CCCCCC"> a</font>

390
00:13:08,250 --> 00:13:11,850
<font color="#E5E5E5">compiler does so</font><font color="#CCCCCC"> i don't know if</font><font color="#E5E5E5"> you've</font>

391
00:13:09,960 --> 00:13:14,160
ever<font color="#E5E5E5"> you know look at the source code</font>

392
00:13:11,850 --> 00:13:16,170
for like<font color="#CCCCCC"> GCC or a compiler or something</font>

393
00:13:14,160 --> 00:13:18,810
but it's fairly complex<font color="#CCCCCC"> what compilers</font>

394
00:13:16,170 --> 00:13:20,670
<font color="#E5E5E5">the whole study of in academia called</font>

395
00:13:18,810 --> 00:13:23,310
compiler<font color="#E5E5E5"> theory brightest and it's a</font>

396
00:13:20,670 --> 00:13:25,110
<font color="#E5E5E5">non-trivial area of expertise and it's</font>

397
00:13:23,310 --> 00:13:27,390
kind of the same with this decompiling

398
00:13:25,110 --> 00:13:29,280
<font color="#E5E5E5">is that same idea of let me take all</font>

399
00:13:27,390 --> 00:13:31,439
these<font color="#E5E5E5"> raw instructions</font><font color="#CCCCCC"> bites as</font><font color="#E5E5E5"> they</font>

400
00:13:29,280 --> 00:13:33,030
were<font color="#CCCCCC"> and try</font><font color="#E5E5E5"> to pull</font><font color="#CCCCCC"> him back and figure</font>

401
00:13:31,440 --> 00:13:35,280
out what the original logic of this

402
00:13:33,030 --> 00:13:38,189
program wasn't piece it together and do

403
00:13:35,280 --> 00:13:39,720
a lot of extra things like figure out<font color="#CCCCCC"> oh</font>

404
00:13:38,190 --> 00:13:41,490
<font color="#CCCCCC">there's debug symbols i can pull those</font>

405
00:13:39,720 --> 00:13:43,560
in and automatically<font color="#E5E5E5"> renamed things for</font>

406
00:13:41,490 --> 00:13:45,600
you and<font color="#E5E5E5"> oh here's the imports that uses</font>

407
00:13:43,560 --> 00:13:47,819
the<font color="#CCCCCC"> DLLs it depends on</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> think the</font>

408
00:13:45,600 --> 00:13:49,050
functions that exports and all of that

409
00:13:47,820 --> 00:13:52,170
kind of stuff is part of the<font color="#CCCCCC"> audio</font>

410
00:13:49,050 --> 00:13:55,020
analysis and the binary engine<font color="#E5E5E5"> was very</font>

411
00:13:52,170 --> 00:13:56,579
fast<font color="#CCCCCC"> they have a</font><font color="#E5E5E5"> very well threaded</font>

412
00:13:55,020 --> 00:14:00,120
<font color="#CCCCCC">well-thought-out architecture that makes</font>

413
00:13:56,580 --> 00:14:02,250
their analysis very fast<font color="#CCCCCC"> it's not as</font>

414
00:14:00,120 --> 00:14:04,560
thorough<font color="#CCCCCC"> dough</font><font color="#E5E5E5"> and the reason for that</font>

415
00:14:02,250 --> 00:14:06,480
is when you look at a pro it's been in

416
00:14:04,560 --> 00:14:09,239
existence and being heavily used in our

417
00:14:06,480 --> 00:14:10,680
industry for like 20 years<font color="#CCCCCC"> and binge has</font>

418
00:14:09,240 --> 00:14:13,860
been selling for about three months now

419
00:14:10,680 --> 00:14:15,300
so you know it is what it is right it's

420
00:14:13,860 --> 00:14:18,000
cheaper and stuff like that<font color="#CCCCCC"> it's great</font>

421
00:14:15,300 --> 00:14:20,219
tool<font color="#E5E5E5"> you know everything is good but the</font>

422
00:14:18,000 --> 00:14:21,450
<font color="#E5E5E5">sword that the too long didn't read if</font>

423
00:14:20,220 --> 00:14:23,730
you fall asleep halfway through<font color="#E5E5E5"> me</font>

424
00:14:21,450 --> 00:14:26,040
talking about this is<font color="#E5E5E5"> it's great tool</font>

425
00:14:23,730 --> 00:14:27,810
<font color="#E5E5E5">totally recommend you try</font><font color="#CCCCCC"> it's not quite</font>

426
00:14:26,040 --> 00:14:29,459
as<font color="#E5E5E5"> full-featured yet</font><font color="#CCCCCC"> and you would</font>

427
00:14:27,810 --> 00:14:32,160
expect that right out of a company<font color="#CCCCCC"> a</font>

428
00:14:29,460 --> 00:14:34,710
<font color="#E5E5E5">tool</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> so new so no surprise on</font>

429
00:14:32,160 --> 00:14:37,680
that I wouldn't think when you look at

430
00:14:34,710 --> 00:14:39,390
the hotkeys<font color="#E5E5E5"> like you can</font><font color="#CCCCCC"> type G and then</font>

431
00:14:37,680 --> 00:14:41,400
type<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a dress and</font><font color="#E5E5E5"> you'll jump right to</font>

432
00:14:39,390 --> 00:14:42,900
that location in the binary so one of

433
00:14:41,400 --> 00:14:44,400
the things that these tools do for<font color="#E5E5E5"> you</font>

434
00:14:42,900 --> 00:14:46,110
they're basically like a<font color="#E5E5E5"> lower</font><font color="#CCCCCC"> rates for</font>

435
00:14:44,400 --> 00:14:48,569
<font color="#E5E5E5">the virtual addresses that map to the</font>

436
00:14:46,110 --> 00:14:51,630
assembly instructions are corresponding

437
00:14:48,570 --> 00:14:52,980
and show<font color="#CCCCCC"> they may or may not be the</font>

438
00:14:51,630 --> 00:14:55,050
address that the program really runs

439
00:14:52,980 --> 00:14:56,550
that depending on<font color="#CCCCCC"> a SLR or whatever is</font>

440
00:14:55,050 --> 00:14:58,109
in play but if it's not that will

441
00:14:56,550 --> 00:15:00,000
actually be the address that runs out<font color="#CCCCCC"> so</font>

442
00:14:58,110 --> 00:15:02,250
<font color="#CCCCCC">you can jump to that address and do</font>

443
00:15:00,000 --> 00:15:06,570
whatever investigation<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> hit end</font>

444
00:15:02,250 --> 00:15:07,950
to rename comments<font color="#E5E5E5"> procedures all that</font>

445
00:15:06,570 --> 00:15:08,760
good stuff and one of the things that's

446
00:15:07,950 --> 00:15:10,020
<font color="#CCCCCC">kind of cool</font>

447
00:15:08,760 --> 00:15:12,120
here's a little video renaming a

448
00:15:10,020 --> 00:15:13,500
function to this<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> decided I</font>

449
00:15:12,120 --> 00:15:14,990
<font color="#E5E5E5">didn't want to</font><font color="#CCCCCC"> rename</font><font color="#E5E5E5"> that you can hit</font>

450
00:15:13,500 --> 00:15:16,520
basically controls your<font color="#CCCCCC"> app</font>

451
00:15:14,990 --> 00:15:18,380
<font color="#CCCCCC">louisiana on a mac and</font><font color="#E5E5E5"> undo that it's</font>

452
00:15:16,520 --> 00:15:20,360
not a real exciting<font color="#E5E5E5"> feature to be able</font>

453
00:15:18,380 --> 00:15:22,040
to undo a little thing but ideas never

454
00:15:20,360 --> 00:15:24,589
had that in 20 years<font color="#E5E5E5"> they've never had</font>

455
00:15:22,040 --> 00:15:26,449
the ability to undo something so the<font color="#E5E5E5"> BN</font>

456
00:15:24,589 --> 00:15:28,279
folks<font color="#E5E5E5"> . that they would add at least</font>

457
00:15:26,450 --> 00:15:29,870
something for sure that that they<font color="#E5E5E5"> don't</font>

458
00:15:28,279 --> 00:15:34,100
have so they have a new feature which is

459
00:15:29,870 --> 00:15:35,990
<font color="#E5E5E5">i would say helpful</font><font color="#CCCCCC"> they both</font><font color="#E5E5E5"> have</font>

460
00:15:34,100 --> 00:15:37,130
what's called<font color="#E5E5E5"> cross-referencing and</font>

461
00:15:35,990 --> 00:15:38,450
that's a really important thing when

462
00:15:37,130 --> 00:15:40,670
you're doing reverse engineering to be

463
00:15:38,450 --> 00:15:42,620
able to tell that<font color="#CCCCCC"> hoe this function it's</font>

464
00:15:40,670 --> 00:15:44,089
called from these<font color="#CCCCCC"> ten places you might</font>

465
00:15:42,620 --> 00:15:46,220
want to do that for a lot of reasons

466
00:15:44,089 --> 00:15:47,570
<font color="#CCCCCC">think about vulnerability analysis for</font>

467
00:15:46,220 --> 00:15:50,180
example if there's a<font color="#CCCCCC"> if there's a</font>

468
00:15:47,570 --> 00:15:52,399
dangerous<font color="#CCCCCC"> API like</font><font color="#E5E5E5"> stir copy or sprint</font>

469
00:15:50,180 --> 00:15:55,010
<font color="#E5E5E5">at for something you can you</font><font color="#CCCCCC"> can quickly</font>

470
00:15:52,399 --> 00:15:57,350
<font color="#E5E5E5">walk those cross-references find out all</font>

471
00:15:55,010 --> 00:15:59,420
the locations that dangerous<font color="#CCCCCC"> a PI API</font><font color="#E5E5E5"> is</font>

472
00:15:57,350 --> 00:16:00,680
used in<font color="#E5E5E5"> and audit that code and</font>

473
00:15:59,420 --> 00:16:01,729
potentially find a vulnerability in

474
00:16:00,680 --> 00:16:03,349
short order if you know what you're

475
00:16:01,730 --> 00:16:04,850
doing so<font color="#E5E5E5"> having the ability to do</font>

476
00:16:03,350 --> 00:16:06,920
<font color="#CCCCCC">cross-references</font><font color="#E5E5E5"> is really important</font>

477
00:16:04,850 --> 00:16:08,270
they both have that ability<font color="#CCCCCC"> I think I</font>

478
00:16:06,920 --> 00:16:10,610
<font color="#CCCCCC">was</font><font color="#E5E5E5"> probably a little more full-featured</font>

479
00:16:08,270 --> 00:16:11,750
but it is what it is and this is where

480
00:16:10,610 --> 00:16:14,060
you'll really see some of the more

481
00:16:11,750 --> 00:16:16,670
full-featured<font color="#CCCCCC"> miss of IDA</font><font color="#E5E5E5"> when you just</font>

482
00:16:14,060 --> 00:16:20,209
simply load a program into both of them

483
00:16:16,670 --> 00:16:21,890
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> notice that typically</font><font color="#CCCCCC"> ninja</font><font color="#E5E5E5"> is</font>

484
00:16:20,209 --> 00:16:23,420
not always finding<font color="#CCCCCC"> main so that's</font><font color="#E5E5E5"> a</font>

485
00:16:21,890 --> 00:16:24,529
really interesting and important thing

486
00:16:23,420 --> 00:16:26,660
that's helpful

487
00:16:24,529 --> 00:16:28,670
it kinda<font color="#CCCCCC"> it's one less thing you have to</font>

488
00:16:26,660 --> 00:16:31,579
do<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> reverse engineer</font>

489
00:16:28,670 --> 00:16:33,800
<font color="#CCCCCC">ok so</font><font color="#E5E5E5"> all like</font><font color="#CCCCCC"> C programs or whatever it</font>

490
00:16:31,579 --> 00:16:35,719
is<font color="#CCCCCC"> DLLs dealers have a</font><font color="#E5E5E5"> dll entry</font><font color="#CCCCCC"> Colonel</font>

491
00:16:33,800 --> 00:16:37,490
drivers have a you know an entry point

492
00:16:35,720 --> 00:16:39,589
as well but most<font color="#CCCCCC"> likessee programs they</font>

493
00:16:37,490 --> 00:16:40,940
have a main function right and you want

494
00:16:39,589 --> 00:16:41,899
to start there because the user code

495
00:16:40,940 --> 00:16:44,390
that was<font color="#CCCCCC"> program</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be</font>

496
00:16:41,899 --> 00:16:45,800
somewhere off made<font color="#E5E5E5"> but the compiler</font>

497
00:16:44,390 --> 00:16:47,959
actually adds another function<font color="#CCCCCC"> two main</font>

498
00:16:45,800 --> 00:16:49,160
called start and it calls made from

499
00:16:47,959 --> 00:16:50,719
start and that's how<font color="#CCCCCC"> command-line</font>

500
00:16:49,160 --> 00:16:52,010
arguments to the programs are pushed to

501
00:16:50,720 --> 00:16:56,570
<font color="#CCCCCC">mean you'll see like a push push push</font>

502
00:16:52,010 --> 00:16:58,189
<font color="#E5E5E5">call to</font><font color="#CCCCCC"> Maine or move call and I was</font>

503
00:16:56,570 --> 00:16:59,660
pretty good at finding<font color="#CCCCCC"> mean for you so</font>

504
00:16:58,190 --> 00:17:01,339
typically<font color="#CCCCCC"> it will start you in the main</font>

505
00:16:59,660 --> 00:17:04,339
routine and<font color="#CCCCCC"> named it as well</font><font color="#E5E5E5"> like you're</font>

506
00:17:01,339 --> 00:17:07,100
in<font color="#CCCCCC"> Maine so and in many cases busy will</font>

507
00:17:04,339 --> 00:17:09,079
not do that<font color="#CCCCCC"> so you don't know if you can</font>

508
00:17:07,099 --> 00:17:11,569
read the screen or not up there behind

509
00:17:09,079 --> 00:17:13,399
me but you'll see in some cases<font color="#E5E5E5"> you'll</font>

510
00:17:11,569 --> 00:17:15,800
see like a call to sub underscore

511
00:17:13,400 --> 00:17:18,530
virtual address<font color="#E5E5E5"> and</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> ninja</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> pro</font>

512
00:17:15,800 --> 00:17:20,359
you see a call to<font color="#CCCCCC"> t main CRT startup</font><font color="#E5E5E5"> or</font>

513
00:17:18,530 --> 00:17:22,379
<font color="#E5E5E5">whatever so it actually found</font><font color="#CCCCCC"> main</font><font color="#E5E5E5"> and</font>

514
00:17:20,359 --> 00:17:23,639
you started inside<font color="#E5E5E5"> that backed out of it</font>

515
00:17:22,380 --> 00:17:25,290
<font color="#CCCCCC">manual</font><font color="#E5E5E5"> just so that you could see the</font>

516
00:17:23,640 --> 00:17:27,420
function name and where it's called from

517
00:17:25,290 --> 00:17:28,290
start but so the<font color="#CCCCCC"> auto analysis is</font>

518
00:17:27,420 --> 00:17:31,650
definitely more full-featured

519
00:17:28,290 --> 00:17:33,600
<font color="#E5E5E5">particularly as it relates to windows</font>

520
00:17:31,650 --> 00:17:37,290
stuff<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I his bread-and-butter</font><font color="#E5E5E5"> is</font>

521
00:17:33,600 --> 00:17:38,459
living on the<font color="#E5E5E5"> windows world where</font><font color="#CCCCCC"> Jordan</font>

522
00:17:37,290 --> 00:17:40,379
his group they do a lot of her

523
00:17:38,460 --> 00:17:42,510
vulnerability analysis and they do a lot

524
00:17:40,380 --> 00:17:44,160
of that on<font color="#E5E5E5"> linux and embedded systems</font>

525
00:17:42,510 --> 00:17:45,900
and stuff like that so they want to have

526
00:17:44,160 --> 00:17:47,730
<font color="#CCCCCC">Windows support</font><font color="#E5E5E5"> and a decent</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> support</font>

527
00:17:45,900 --> 00:17:50,190
everything like that but it hasn't been

528
00:17:47,730 --> 00:17:52,140
there like their core business like idea

529
00:17:50,190 --> 00:17:55,350
has been so when you put in a<font color="#CCCCCC"> windows</font>

530
00:17:52,140 --> 00:17:59,460
<font color="#E5E5E5">binary into</font><font color="#CCCCCC"> Ida it's going</font><font color="#E5E5E5"> to be pretty</font>

531
00:17:55,350 --> 00:18:01,439
good at finding<font color="#E5E5E5"> very subtle things and</font>

532
00:17:59,460 --> 00:18:03,960
here are some named items that it found

533
00:18:01,440 --> 00:18:05,970
there's a there's this new feature in

534
00:18:03,960 --> 00:18:07,470
<font color="#CCCCCC">windows 8 and windows</font><font color="#E5E5E5"> 10 called</font>

535
00:18:05,970 --> 00:18:09,060
<font color="#CCCCCC">control-flow</font><font color="#E5E5E5"> guard i gave a talk about</font>

536
00:18:07,470 --> 00:18:10,770
that last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> shook on if you want to</font>

537
00:18:09,060 --> 00:18:14,520
learn more about what<font color="#CCCCCC"> control-flow guard</font>

538
00:18:10,770 --> 00:18:16,740
is but<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> finds that basically before</font><font color="#CCCCCC"> a</font>

539
00:18:14,520 --> 00:18:19,200
what used to be just a single call and

540
00:18:16,740 --> 00:18:20,820
newly compiled<font color="#E5E5E5"> very very new windows</font>

541
00:18:19,200 --> 00:18:22,860
binaries<font color="#CCCCCC"> it's been compiled a visual</font>

542
00:18:20,820 --> 00:18:25,500
<font color="#E5E5E5">studio 2015 newer only works on</font><font color="#CCCCCC"> windows</font>

543
00:18:22,860 --> 00:18:27,540
8<font color="#CCCCCC"> or</font><font color="#E5E5E5"> 10 basically before every indirect</font>

544
00:18:25,500 --> 00:18:29,100
<font color="#E5E5E5">jump you'll see another call to check to</font>

545
00:18:27,540 --> 00:18:30,990
see if the address of the call that's

546
00:18:29,100 --> 00:18:33,300
about to happen<font color="#E5E5E5"> is a valid address so</font>

547
00:18:30,990 --> 00:18:34,680
they do basically<font color="#CCCCCC"> pointer checking with</font>

548
00:18:33,300 --> 00:18:37,110
something called<font color="#CCCCCC"> control-flow gardener</font>

549
00:18:34,680 --> 00:18:39,390
<font color="#CCCCCC">and</font><font color="#E5E5E5"> they're guarding the control flow of</font>

550
00:18:37,110 --> 00:18:42,840
your program basically where if you look

551
00:18:39,390 --> 00:18:45,540
at on the left there by<font color="#E5E5E5"> ninja just sees</font>

552
00:18:42,840 --> 00:18:47,610
it as a call<font color="#CCCCCC"> d-word</font><font color="#E5E5E5"> data underscore some</font>

553
00:18:45,540 --> 00:18:50,159
address it doesn't it<font color="#E5E5E5"> didn't</font><font color="#CCCCCC"> auto</font>

554
00:18:47,610 --> 00:18:52,800
recognize that that's the guard check<font color="#CCCCCC"> i</font>

555
00:18:50,160 --> 00:18:55,020
call<font color="#CCCCCC"> F</font><font color="#E5E5E5"> corner which is what it's called</font>

556
00:18:52,800 --> 00:18:57,120
<font color="#CCCCCC">an SDN terms so the</font><font color="#E5E5E5"> msdn names are</font>

557
00:18:55,020 --> 00:18:57,750
<font color="#E5E5E5">little goofy but</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> knows what they</font>

558
00:18:57,120 --> 00:19:01,590
are

559
00:18:57,750 --> 00:19:03,720
<font color="#CCCCCC">ok so</font><font color="#E5E5E5"> you see that</font><font color="#CCCCCC"> it is well in the</font>

560
00:19:01,590 --> 00:19:05,879
<font color="#E5E5E5">interface window so</font><font color="#CCCCCC"> freaked here with</font>

561
00:19:03,720 --> 00:19:08,160
for<font color="#E5E5E5"> example i have found like men copy</font>

562
00:19:05,880 --> 00:19:09,840
and<font color="#CCCCCC"> stir copy and all they like</font><font color="#E5E5E5"> library</font>

563
00:19:08,160 --> 00:19:12,510
functions that this program was linked

564
00:19:09,840 --> 00:19:15,000
against it often does a pretty good job

565
00:19:12,510 --> 00:19:17,100
if<font color="#E5E5E5"> it can</font><font color="#CCCCCC"> finding that we're in this</font>

566
00:19:15,000 --> 00:19:18,750
case you have to manually<font color="#E5E5E5"> name</font><font color="#CCCCCC"> those and</font>

567
00:19:17,100 --> 00:19:21,179
<font color="#CCCCCC">ninja</font><font color="#E5E5E5"> you do you see that they're just</font>

568
00:19:18,750 --> 00:19:23,130
called sub underscore virtual address<font color="#CCCCCC"> so</font>

569
00:19:21,180 --> 00:19:24,960
they're not labeled<font color="#CCCCCC"> which you know it's</font>

570
00:19:23,130 --> 00:19:26,610
not hard to get over that<font color="#E5E5E5"> it's just one</font>

571
00:19:24,960 --> 00:19:27,870
more thing as a reverse<font color="#E5E5E5"> engineering like</font>

572
00:19:26,610 --> 00:19:29,399
<font color="#E5E5E5">you're like any little thing</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

573
00:19:27,870 --> 00:19:33,239
have to do is good because it's kind of

574
00:19:29,400 --> 00:19:34,380
<font color="#E5E5E5">a tedious painful sort of task anyway so</font>

575
00:19:33,240 --> 00:19:35,290
if there's one<font color="#CCCCCC"> less thing you have</font><font color="#E5E5E5"> to do</font>

576
00:19:34,380 --> 00:19:40,000
that's a good thing

577
00:19:35,290 --> 00:19:41,230
one place that<font color="#E5E5E5"> ninja excels in and</font><font color="#CCCCCC"> i</font>

578
00:19:40,000 --> 00:19:43,210
already<font color="#E5E5E5"> mentioned this is because of</font>

579
00:19:41,230 --> 00:19:45,070
their vulnerability research background

580
00:19:43,210 --> 00:19:47,710
is they've done a really good job with

581
00:19:45,070 --> 00:19:49,990
patching<font color="#E5E5E5"> modifying binaries changing</font>

582
00:19:47,710 --> 00:19:51,010
binaries adding shellcode anything sort

583
00:19:49,990 --> 00:19:52,030
of hacker ish

584
00:19:51,010 --> 00:19:53,320
they're pretty good at that because

585
00:19:52,030 --> 00:19:55,870
that's the kind of stuff that they've

586
00:19:53,320 --> 00:19:57,610
focused on<font color="#CCCCCC"> so being able to change the</font>

587
00:19:55,870 --> 00:19:59,320
binary<font color="#E5E5E5"> you know right within the</font>

588
00:19:57,610 --> 00:20:02,649
graphical interface is something that

589
00:19:59,320 --> 00:20:06,610
you can do well in<font color="#E5E5E5"> Ninja</font><font color="#CCCCCC"> they've also</font>

590
00:20:02,650 --> 00:20:10,300
taken a lot of time to represent the

591
00:20:06,610 --> 00:20:11,919
internal database as it is<font color="#CCCCCC"> of all the</font>

592
00:20:10,300 --> 00:20:13,330
assembly instructions basically that's

593
00:20:11,920 --> 00:20:15,400
how these tools work<font color="#E5E5E5"> as they create a</font>

594
00:20:13,330 --> 00:20:17,500
mapping between sort of the data bytes

595
00:20:15,400 --> 00:20:19,210
themselves in the instructions and what

596
00:20:17,500 --> 00:20:20,620
the you know<font color="#CCCCCC"> the interactive database</font>

597
00:20:19,210 --> 00:20:23,140
thinks about those so that<font color="#E5E5E5"> it can do</font>

598
00:20:20,620 --> 00:20:25,209
operations<font color="#E5E5E5"> on like walk</font><font color="#CCCCCC"> cross references</font>

599
00:20:23,140 --> 00:20:26,500
and have a list of all the<font color="#E5E5E5"> subroutines</font>

600
00:20:25,210 --> 00:20:27,610
and all that kind of stuff<font color="#E5E5E5"> they have</font>

601
00:20:26,500 --> 00:20:30,100
what's called an intermediate language

602
00:20:27,610 --> 00:20:31,600
and<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> and that's basically without</font>

603
00:20:30,100 --> 00:20:33,010
getting too technical because now you're

604
00:20:31,600 --> 00:20:34,300
down into sort of the compiler three if

605
00:20:33,010 --> 00:20:35,590
you really want to describe it and<font color="#E5E5E5"> talk</font>

606
00:20:34,300 --> 00:20:37,149
about it and get into the weeds it's

607
00:20:35,590 --> 00:20:39,550
basically a slightly higher level

608
00:20:37,150 --> 00:20:41,980
representation of the<font color="#E5E5E5"> assembly and that</font>

609
00:20:39,550 --> 00:20:44,770
gives you the ability to do a number of

610
00:20:41,980 --> 00:20:45,820
things<font color="#E5E5E5"> it it allows you to</font><font color="#CCCCCC"> reverse</font>

611
00:20:44,770 --> 00:20:48,760
<font color="#CCCCCC">engineering a slightly more</font>

612
00:20:45,820 --> 00:20:50,530
<font color="#E5E5E5">cross-platform manner</font><font color="#CCCCCC"> so if you're used</font>

613
00:20:48,760 --> 00:20:52,000
to looking at a<font color="#E5E5E5"> x86 and suddenly</font>

614
00:20:50,530 --> 00:20:53,740
somebody throws an<font color="#CCCCCC"> arm binary at you</font>

615
00:20:52,000 --> 00:20:55,300
normally it's like oh crap<font color="#CCCCCC"> i don't know</font>

616
00:20:53,740 --> 00:20:56,770
how to look at that I don't know arm

617
00:20:55,300 --> 00:20:59,139
<font color="#CCCCCC">because the</font><font color="#E5E5E5"> assembly is totally</font>

618
00:20:56,770 --> 00:21:00,310
<font color="#CCCCCC">different but</font><font color="#E5E5E5"> if there's an IL</font><font color="#CCCCCC"> involve</font>

619
00:20:59,140 --> 00:21:02,350
take a look

620
00:21:00,310 --> 00:21:06,070
you'll<font color="#E5E5E5"> see that normally like an x86 and</font>

621
00:21:02,350 --> 00:21:08,320
jump looks like a je<font color="#E5E5E5"> where the</font><font color="#CCCCCC"> IL looks</font>

622
00:21:06,070 --> 00:21:11,530
like<font color="#E5E5E5"> if</font><font color="#CCCCCC"> because that's what</font><font color="#E5E5E5"> a je</font><font color="#CCCCCC"> it's</font>

623
00:21:08,320 --> 00:21:14,860
jump<font color="#E5E5E5"> if some condition if something is</font>

624
00:21:11,530 --> 00:21:15,790
equal or<font color="#CCCCCC"> jle</font><font color="#E5E5E5"> JLG</font><font color="#CCCCCC"> jumping</font><font color="#E5E5E5"> something is</font>

625
00:21:14,860 --> 00:21:18,580
greater<font color="#E5E5E5"> than</font><font color="#CCCCCC"> it's basically a</font>

626
00:21:15,790 --> 00:21:20,770
conditional jump a branch statement if

627
00:21:18,580 --> 00:21:23,350
you will and we write those and<font color="#E5E5E5"> see as</font>

628
00:21:20,770 --> 00:21:25,090
<font color="#CCCCCC">if</font><font color="#E5E5E5"> and so we'd like to be able to see</font>

629
00:21:23,350 --> 00:21:26,740
that as<font color="#E5E5E5"> an if possible</font><font color="#CCCCCC"> and you can do</font>

630
00:21:25,090 --> 00:21:28,300
that<font color="#CCCCCC"> without its not folding</font><font color="#E5E5E5"> compiler</font>

631
00:21:26,740 --> 00:21:31,150
you still see some assembly in there but

632
00:21:28,300 --> 00:21:34,120
some of the logic is in the<font color="#E5E5E5"> eye of form</font>

633
00:21:31,150 --> 00:21:36,940
and<font color="#CCCCCC"> we see that same thing on the arm</font>

634
00:21:34,120 --> 00:21:38,020
<font color="#CCCCCC">even though the assembly instructions i</font>

635
00:21:36,940 --> 00:21:40,150
don't know<font color="#E5E5E5"> if you can read them again</font>

636
00:21:38,020 --> 00:21:43,090
<font color="#CCCCCC">you know the the assembly instructions</font>

637
00:21:40,150 --> 00:21:44,830
look very different but the branch still

638
00:21:43,090 --> 00:21:47,230
looks like if when you look at the<font color="#CCCCCC"> aisle</font>

639
00:21:44,830 --> 00:21:49,689
version of it so that's quite helpful

640
00:21:47,230 --> 00:21:52,030
and quite useful<font color="#CCCCCC"> so one of the questions</font>

641
00:21:49,690 --> 00:21:53,380
<font color="#E5E5E5">I get people are like oh you're going to</font>

642
00:21:52,030 --> 00:21:55,330
talk about<font color="#E5E5E5"> binary</font><font color="#CCCCCC"> ninja cool what</font>

643
00:21:53,380 --> 00:21:58,270
architectures<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> support</font>

644
00:21:55,330 --> 00:22:01,960
well it supports x86 and arm<font color="#E5E5E5"> and mips</font>

645
00:21:58,270 --> 00:22:04,120
<font color="#E5E5E5">and 6502</font><font color="#CCCCCC"> so they've got a number of</font>

646
00:22:01,960 --> 00:22:05,410
things they support which is great

647
00:22:04,120 --> 00:22:07,840
<font color="#CCCCCC">that's a pretty good list those are the</font>

648
00:22:05,410 --> 00:22:10,090
primary targets that people<font color="#E5E5E5"> compile</font>

649
00:22:07,840 --> 00:22:12,730
software<font color="#E5E5E5"> for</font><font color="#CCCCCC"> four fully compiled</font><font color="#E5E5E5"> native</font>

650
00:22:10,090 --> 00:22:14,530
software if you on the other hand look

651
00:22:12,730 --> 00:22:16,480
at the list of things that<font color="#E5E5E5"> I</font><font color="#CCCCCC"> do support</font>

652
00:22:14,530 --> 00:22:18,220
<font color="#E5E5E5">its kind of ridiculously long they</font>

653
00:22:16,480 --> 00:22:20,740
support every weird architecture you can

654
00:22:18,220 --> 00:22:22,270
imagine and<font color="#E5E5E5"> I i zoomed in on a few here</font>

655
00:22:20,740 --> 00:22:24,880
because<font color="#CCCCCC"> I thought</font><font color="#E5E5E5"> they were</font><font color="#CCCCCC"> humor</font><font color="#E5E5E5"> state</font>

656
00:22:22,270 --> 00:22:26,168
you can you can<font color="#E5E5E5"> reverse-engineer stuff</font>

657
00:22:24,880 --> 00:22:29,169
that's been<font color="#E5E5E5"> targeted for the</font><font color="#CCCCCC"> qualcomm</font>

658
00:22:26,169 --> 00:22:30,730
<font color="#CCCCCC">snapdragon the gameboy few to</font><font color="#E5E5E5"> all this</font>

659
00:22:29,169 --> 00:22:32,620
weird<font color="#E5E5E5"> architectures that like I don't</font>

660
00:22:30,730 --> 00:22:34,870
even know about me you know right like

661
00:22:32,620 --> 00:22:37,659
maybe I've heard of them but they're not

662
00:22:34,870 --> 00:22:41,229
real common in every case but<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> can</font>

663
00:22:37,660 --> 00:22:43,960
disassemble<font color="#CCCCCC"> on which is pretty cool</font><font color="#E5E5E5"> to</font>

664
00:22:41,230 --> 00:22:47,710
balance that and to be fair<font color="#CCCCCC"> digit kid</font>

665
00:22:43,960 --> 00:22:49,990
also<font color="#CCCCCC"> decompile them</font><font color="#E5E5E5"> given another</font><font color="#CCCCCC"> add-on</font>

666
00:22:47,710 --> 00:22:51,820
so basically you'll have to write the<font color="#CCCCCC"> an</font>

667
00:22:49,990 --> 00:22:53,590
<font color="#E5E5E5">extension which is part of why they</font>

668
00:22:51,820 --> 00:22:56,168
spend so much time engineering that<font color="#CCCCCC"> I'll</font>

669
00:22:53,590 --> 00:22:59,559
<font color="#E5E5E5">because writing the extension on top of</font>

670
00:22:56,169 --> 00:23:01,960
the<font color="#E5E5E5"> aisle is if you are pretty familiar</font>

671
00:22:59,559 --> 00:23:03,520
with their stuff<font color="#E5E5E5"> relatively</font>

672
00:23:01,960 --> 00:23:04,750
<font color="#E5E5E5">straightforward and I say that in sort</font>

673
00:23:03,520 --> 00:23:06,280
of a loose term<font color="#E5E5E5"> right depending on how</font>

674
00:23:04,750 --> 00:23:07,360
<font color="#CCCCCC">come from BR</font><font color="#E5E5E5"> coding and stuff like that</font>

675
00:23:06,280 --> 00:23:09,309
right everybody<font color="#CCCCCC"> comes from a different</font>

676
00:23:07,360 --> 00:23:12,490
<font color="#CCCCCC">background but if you're a coder it's</font>

677
00:23:09,309 --> 00:23:13,780
relatively easy to extend<font color="#CCCCCC"> to two one</font><font color="#E5E5E5"> of</font>

678
00:23:12,490 --> 00:23:14,980
these other platforms and you know a lot

679
00:23:13,780 --> 00:23:19,720
about the architecture

680
00:23:14,980 --> 00:23:21,429
<font color="#CCCCCC">alright so let me give you a little</font>

681
00:23:19,720 --> 00:23:23,500
example and<font color="#E5E5E5"> talk about a little piece of</font>

682
00:23:21,429 --> 00:23:25,299
<font color="#E5E5E5">now I</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how you compare</font><font color="#CCCCCC"> two tools like</font>

683
00:23:23,500 --> 00:23:26,890
this other than<font color="#CCCCCC"> look-and-feel in price</font>

684
00:23:25,299 --> 00:23:29,049
so right and as it is right now<font color="#E5E5E5"> we</font>

685
00:23:26,890 --> 00:23:31,450
basically we've talked features<font color="#CCCCCC"> we've</font>

686
00:23:29,049 --> 00:23:32,950
<font color="#CCCCCC">talked</font><font color="#E5E5E5"> to look and feel we talked price</font>

687
00:23:31,450 --> 00:23:35,200
and you can use this sort of analysis

688
00:23:32,950 --> 00:23:36,460
some of you<font color="#CCCCCC"> I t folks can you do this</font>

689
00:23:35,200 --> 00:23:38,290
all the time you may not even realize

690
00:23:36,460 --> 00:23:39,460
that you compare<font color="#E5E5E5"> vendors all the time</font>

691
00:23:38,290 --> 00:23:40,809
right you're like well this router has

692
00:23:39,460 --> 00:23:42,640
this feature<font color="#E5E5E5"> and this writer</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> this</font>

693
00:23:40,809 --> 00:23:45,879
<font color="#E5E5E5">feature but this one</font><font color="#CCCCCC"> cost this much and</font>

694
00:23:42,640 --> 00:23:47,710
so many people<font color="#CCCCCC"> and ITR very used to</font>

695
00:23:45,880 --> 00:23:51,190
doing this kind of analysis so you can

696
00:23:47,710 --> 00:23:52,080
do it<font color="#E5E5E5"> as we've done basically based on</font>

697
00:23:51,190 --> 00:23:54,360
features

698
00:23:52,080 --> 00:23:56,399
<font color="#CCCCCC">and price and everything like that</font><font color="#E5E5E5"> you</font>

699
00:23:54,360 --> 00:23:58,320
can also do it with more of a lab<font color="#CCCCCC"> test</font>

700
00:23:56,399 --> 00:23:59,879
<font color="#E5E5E5">and you might do that to an IT right you</font>

701
00:23:58,320 --> 00:24:01,379
might actually try the router and throw

702
00:23:59,880 --> 00:24:03,360
a bunch of traffic<font color="#CCCCCC"> and</font><font color="#E5E5E5"> see if it rolls</font>

703
00:24:01,380 --> 00:24:05,370
over<font color="#E5E5E5"> whatever type of equipment</font><font color="#CCCCCC"> you're</font>

704
00:24:03,360 --> 00:24:07,168
testing<font color="#CCCCCC"> that's kinda what we wanted</font><font color="#E5E5E5"> to</font>

705
00:24:05,370 --> 00:24:09,959
do that same sort of thing here it's

706
00:24:07,169 --> 00:24:11,880
like well let's just take a little piece

707
00:24:09,960 --> 00:24:13,440
of malware and it doesn't have to be

708
00:24:11,880 --> 00:24:15,539
anything in particular so we found a

709
00:24:13,440 --> 00:24:17,399
dropper<font color="#CCCCCC"> josh and i both have access to</font>

710
00:24:15,539 --> 00:24:19,500
<font color="#CCCCCC">malware a lot because we</font><font color="#E5E5E5"> work with it</font>

711
00:24:17,399 --> 00:24:21,510
you know<font color="#E5E5E5"> for our day job sometimes</font>

712
00:24:19,500 --> 00:24:22,950
so we had a piece of malware handy<font color="#CCCCCC"> now</font>

713
00:24:21,510 --> 00:24:24,149
<font color="#E5E5E5">that's the md5 if you want to look it up</font>

714
00:24:22,950 --> 00:24:26,159
on<font color="#E5E5E5"> virustotal but there's nothing</font>

715
00:24:24,149 --> 00:24:29,459
special about this<font color="#E5E5E5"> malware it's a fairly</font>

716
00:24:26,159 --> 00:24:31,860
simple dropper<font color="#E5E5E5"> very run-of-the-mill and</font>

717
00:24:29,460 --> 00:24:34,139
the problem with it<font color="#E5E5E5"> though is a couple</font>

718
00:24:31,860 --> 00:24:37,320
of things first most malware is compact

719
00:24:34,139 --> 00:24:40,019
so unpacking<font color="#CCCCCC"> his kind</font><font color="#E5E5E5"> of a pain</font><font color="#CCCCCC"> and this</font>

720
00:24:37,320 --> 00:24:42,658
is where<font color="#CCCCCC"> I de definitely is superior</font>

721
00:24:40,019 --> 00:24:44,370
rules the<font color="#CCCCCC"> rules</font><font color="#E5E5E5"> because it is able to</font>

722
00:24:42,659 --> 00:24:46,320
run things you can do so you can do

723
00:24:44,370 --> 00:24:47,729
dynamic<font color="#E5E5E5"> working</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> it basically includes</font>

724
00:24:46,320 --> 00:24:49,678
a debugger and stuff like that you can't

725
00:24:47,730 --> 00:24:52,470
do that all by ninjas all static

726
00:24:49,679 --> 00:24:55,139
analysis and so a lot of the way that

727
00:24:52,470 --> 00:24:56,760
malware analyst<font color="#E5E5E5"> get past the packer</font>

728
00:24:55,139 --> 00:24:57,840
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of spending like three weeks</font><font color="#CCCCCC"> of</font>

729
00:24:56,760 --> 00:24:59,789
<font color="#E5E5E5">their life trying to reverse engineer</font>

730
00:24:57,840 --> 00:25:01,350
the algorithm for the packer and<font color="#CCCCCC"> the</font>

731
00:24:59,789 --> 00:25:02,879
<font color="#E5E5E5">encrypted stuff they just run</font><font color="#CCCCCC"> it to a</font>

732
00:25:01,350 --> 00:25:04,500
certain<font color="#E5E5E5"> point and then they</font><font color="#CCCCCC"> stop it and</font>

733
00:25:02,880 --> 00:25:06,029
then they<font color="#E5E5E5"> dump it right because it has</font>

734
00:25:04,500 --> 00:25:08,370
done pack itself to do anything useful

735
00:25:06,029 --> 00:25:10,799
<font color="#CCCCCC">and in real life so</font><font color="#E5E5E5"> instead of trying to</font>

736
00:25:08,370 --> 00:25:12,959
go after purely statically<font color="#E5E5E5"> they use a</font>

737
00:25:10,799 --> 00:25:14,908
combination of static and dynamic

738
00:25:12,960 --> 00:25:16,350
analysis<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> makes sense right you</font>

739
00:25:14,909 --> 00:25:18,659
always want to like let's just cut to

740
00:25:16,350 --> 00:25:21,240
the chase if it has to unpack itself to

741
00:25:18,659 --> 00:25:23,370
run<font color="#CCCCCC"> i'll just wait</font><font color="#E5E5E5"> till it does that and</font>

742
00:25:21,240 --> 00:25:24,960
then<font color="#CCCCCC"> I'll grab the real inner binary</font>

743
00:25:23,370 --> 00:25:27,658
that is the malware<font color="#E5E5E5"> right i don't want</font>

744
00:25:24,960 --> 00:25:29,490
<font color="#E5E5E5">to spend time on the packer so that had</font>

745
00:25:27,659 --> 00:25:31,049
to be done first so we did that so that

746
00:25:29,490 --> 00:25:33,690
we<font color="#E5E5E5"> could look at</font><font color="#CCCCCC"> them both fairly and</font>

747
00:25:31,049 --> 00:25:35,639
then we created a script that each tool

748
00:25:33,690 --> 00:25:37,200
could run statically to do the rest kind

749
00:25:35,639 --> 00:25:38,279
of the rest of the<font color="#CCCCCC"> workers some not</font>

750
00:25:37,200 --> 00:25:41,789
<font color="#E5E5E5">really even read the rest of the</font><font color="#CCCCCC"> work</font>

751
00:25:38,279 --> 00:25:43,980
but some<font color="#E5E5E5"> task within the process of our</font>

752
00:25:41,789 --> 00:25:45,658
analysis to kind of figure out which

753
00:25:43,980 --> 00:25:47,850
tool has a better plug-in architecture

754
00:25:45,659 --> 00:25:51,360
which one is<font color="#E5E5E5"> it easier harder to write</font>

755
00:25:47,850 --> 00:25:53,879
an extension for which one execute

756
00:25:51,360 --> 00:25:55,949
faster<font color="#E5E5E5"> when the</font><font color="#CCCCCC"> plugin is executed</font><font color="#E5E5E5"> that</font>

757
00:25:53,880 --> 00:25:59,039
sort of thing is what we wanted to do

758
00:25:55,950 --> 00:26:01,020
and what it does is pretty common thing

759
00:25:59,039 --> 00:26:02,879
that a lot of malware<font color="#E5E5E5"> shellcode also</font>

760
00:26:01,020 --> 00:26:05,310
does this is basically they

761
00:26:02,880 --> 00:26:07,650
have a hash of an<font color="#CCCCCC"> API</font><font color="#E5E5E5"> and so the way you</font>

762
00:26:05,310 --> 00:26:09,929
call<font color="#CCCCCC"> windows functions within a</font>

763
00:26:07,650 --> 00:26:11,700
<font color="#E5E5E5">shellcode or malware a lot of times is</font>

764
00:26:09,930 --> 00:26:13,230
they sort of dynamically<font color="#E5E5E5"> resolve the</font>

765
00:26:11,700 --> 00:26:15,000
<font color="#E5E5E5">api's they want to call so they may want</font>

766
00:26:13,230 --> 00:26:17,940
to load a library<font color="#CCCCCC"> they might want to</font>

767
00:26:15,000 --> 00:26:18,990
allocate memory<font color="#CCCCCC"> they may want to you</font>

768
00:26:17,940 --> 00:26:21,060
know download something off the internet

769
00:26:18,990 --> 00:26:23,280
<font color="#CCCCCC">they may want</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> when exact execute</font>

770
00:26:21,060 --> 00:26:25,020
something whatever it is they<font color="#CCCCCC"> those</font>

771
00:26:23,280 --> 00:26:27,270
functions are not sort of directly

772
00:26:25,020 --> 00:26:29,100
embedded in the<font color="#CCCCCC"> shell code or the other</font>

773
00:26:27,270 --> 00:26:30,870
malware<font color="#CCCCCC"> they're sort of dynamically</font>

774
00:26:29,100 --> 00:26:33,179
resolved they find the address of

775
00:26:30,870 --> 00:26:36,149
<font color="#CCCCCC">kernel32 and</font><font color="#E5E5E5"> then they walk the export</font>

776
00:26:33,180 --> 00:26:38,490
table and then they do some<font color="#E5E5E5"> hashing</font>

777
00:26:36,150 --> 00:26:40,140
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> Dakota string that's basically the</font>

778
00:26:38,490 --> 00:26:41,850
representation of the function they want

779
00:26:40,140 --> 00:26:44,220
and<font color="#CCCCCC"> then they call that function it's</font>

780
00:26:41,850 --> 00:26:46,679
<font color="#E5E5E5">kind of just a common level of</font>

781
00:26:44,220 --> 00:26:50,580
indirection if you will so that's what

782
00:26:46,680 --> 00:26:52,200
we decided to do for our problem was and

783
00:26:50,580 --> 00:26:54,030
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> motivation for that is of course</font>

784
00:26:52,200 --> 00:26:56,220
this is the inner<font color="#CCCCCC"> jumped malware which</font>

785
00:26:54,030 --> 00:26:57,389
we call just<font color="#CCCCCC"> dumped up in</font><font color="#E5E5E5"> if you just do</font>

786
00:26:56,220 --> 00:26:58,680
a strings on<font color="#E5E5E5"> it you don't see any</font>

787
00:26:57,390 --> 00:27:00,360
strings you don't see that it<font color="#E5E5E5"> calls</font>

788
00:26:58,680 --> 00:27:01,860
virtual<font color="#CCCCCC"> Alec</font><font color="#E5E5E5"> you don't see that it calls</font>

789
00:27:00,360 --> 00:27:03,360
me<font color="#E5E5E5"> an exact you don't see and that's</font>

790
00:27:01,860 --> 00:27:04,709
what you really want to know<font color="#CCCCCC"> you can do</font>

791
00:27:03,360 --> 00:27:06,419
this again dynamically in fact most

792
00:27:04,710 --> 00:27:08,160
malware<font color="#CCCCCC"> analyst do this dynamically</font><font color="#E5E5E5"> in</font>

793
00:27:06,420 --> 00:27:11,010
fairness<font color="#E5E5E5"> they put in some kind of a</font>

794
00:27:08,160 --> 00:27:12,210
sandbox cage<font color="#E5E5E5"> they let it run they see</font>

795
00:27:11,010 --> 00:27:13,410
what it does it connects out the

796
00:27:12,210 --> 00:27:15,750
internet download stuff and then they

797
00:27:13,410 --> 00:27:17,520
just capture the<font color="#E5E5E5"> runtime analysis and</font>

798
00:27:15,750 --> 00:27:19,170
they don't fiddle<font color="#CCCCCC"> a whole lot with</font><font color="#E5E5E5"> the</font>

799
00:27:17,520 --> 00:27:21,660
static analysis because it's sort of

800
00:27:19,170 --> 00:27:25,080
<font color="#CCCCCC">needlessly</font><font color="#E5E5E5"> complicating and needlessly</font>

801
00:27:21,660 --> 00:27:27,720
<font color="#E5E5E5">time-consuming that's why it for</font><font color="#CCCCCC"> runtime</font>

802
00:27:25,080 --> 00:27:30,330
<font color="#E5E5E5">analysis is</font><font color="#CCCCCC"> it's quite important for</font><font color="#E5E5E5"> our</font>

803
00:27:27,720 --> 00:27:32,100
<font color="#CCCCCC">bomb may or may not be the case for</font>

804
00:27:30,330 --> 00:27:34,260
vulnerability analysis and that's why

805
00:27:32,100 --> 00:27:36,540
again this is a fair exercise<font color="#CCCCCC"> in a fair</font>

806
00:27:34,260 --> 00:27:38,400
<font color="#E5E5E5">you know sort of study because for</font>

807
00:27:36,540 --> 00:27:40,200
vulnerability analysis you might do some

808
00:27:38,400 --> 00:27:41,760
dynamic execution might<font color="#CCCCCC"> do fuzzing and</font>

809
00:27:40,200 --> 00:27:43,650
all that kind of stuff but it's in many

810
00:27:41,760 --> 00:27:45,420
cases to find the deeper the<font color="#E5E5E5"> Buried bug</font>

811
00:27:43,650 --> 00:27:46,950
some static analysis<font color="#CCCCCC"> and reversing of</font>

812
00:27:45,420 --> 00:27:48,510
the internals really is needed to figure

813
00:27:46,950 --> 00:27:50,220
out how to even get going<font color="#CCCCCC"> fuzzing</font><font color="#E5E5E5"> if</font>

814
00:27:48,510 --> 00:27:55,260
it's truly<font color="#CCCCCC"> closed source</font><font color="#E5E5E5"> and stuff so</font>

815
00:27:50,220 --> 00:27:57,120
that was the motivation<font color="#E5E5E5"> there so now the</font>

816
00:27:55,260 --> 00:27:58,890
problem is that when you look at the

817
00:27:57,120 --> 00:28:01,830
<font color="#E5E5E5">code statically you'll see a bunch of</font>

818
00:27:58,890 --> 00:28:04,530
indirect calls like<font color="#CCCCCC"> Holly</font><font color="#E5E5E5"> ax and it does</font>

819
00:28:01,830 --> 00:28:06,480
it doesn't say call virtual<font color="#CCCCCC"> Alec</font><font color="#E5E5E5"> or call</font>

820
00:28:04,530 --> 00:28:07,889
when exactly call whatever which is what

821
00:28:06,480 --> 00:28:10,650
we want to see<font color="#E5E5E5"> we want to see what it's</font>

822
00:28:07,890 --> 00:28:11,710
doing so because it doesn't have that we

823
00:28:10,650 --> 00:28:14,799
have to sort of

824
00:28:11,710 --> 00:28:16,059
get that so what is in this case<font color="#CCCCCC"> CX how</font>

825
00:28:14,799 --> 00:28:18,039
<font color="#E5E5E5">can we figure that out</font>

826
00:28:16,059 --> 00:28:19,480
well as<font color="#E5E5E5"> i mentioned probably one of the</font>

827
00:28:18,039 --> 00:28:21,309
simplest ways if you can run<font color="#E5E5E5"> it</font>

828
00:28:19,480 --> 00:28:22,809
dynamically like you can<font color="#CCCCCC"> either</font><font color="#E5E5E5"> you can</font>

829
00:28:21,309 --> 00:28:25,418
actually just set a<font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> on that</font>

830
00:28:22,809 --> 00:28:27,970
call<font color="#E5E5E5"> run it to that</font><font color="#CCCCCC"> point and</font><font color="#E5E5E5"> then look</font>

831
00:28:25,419 --> 00:28:29,830
in memory and you'll see that<font color="#E5E5E5"> Dax</font><font color="#CCCCCC"> if you</font>

832
00:28:27,970 --> 00:28:32,350
can see<font color="#E5E5E5"> it there</font><font color="#CCCCCC"> is actually kernel32</font>

833
00:28:29,830 --> 00:28:35,289
virtual<font color="#CCCCCC"> island for example so dynamic</font>

834
00:28:32,350 --> 00:28:36,549
analysis is quite useful but we're sort

835
00:28:35,289 --> 00:28:38,350
of pretending for the sake of this

836
00:28:36,549 --> 00:28:40,539
exercise that we want to do it

837
00:28:38,350 --> 00:28:41,949
statically for both tools to give a sort

838
00:28:40,539 --> 00:28:44,860
of a fair comparison

839
00:28:41,950 --> 00:28:48,100
so how do we solve<font color="#E5E5E5"> this statically</font><font color="#CCCCCC"> so if</font>

840
00:28:44,860 --> 00:28:53,168
you look at the code<font color="#E5E5E5"> this approach of</font>

841
00:28:48,100 --> 00:28:56,168
locating<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> and then resolving a hash</font>

842
00:28:53,169 --> 00:28:58,659
with some internal algorithm and then

843
00:28:56,169 --> 00:29:00,730
calling that hash is a pretty common

844
00:28:58,659 --> 00:29:02,200
thing<font color="#E5E5E5"> and so we've seen this pattern</font>

845
00:29:00,730 --> 00:29:03,610
<font color="#CCCCCC">code before we kind of have a good</font>

846
00:29:02,200 --> 00:29:04,659
understanding of how it works

847
00:29:03,610 --> 00:29:05,949
I'm not gonna walk through all the

848
00:29:04,659 --> 00:29:07,360
details because<font color="#CCCCCC"> I would absolutely put</font>

849
00:29:05,950 --> 00:29:09,789
<font color="#E5E5E5">everyone to sleep and</font><font color="#CCCCCC"> we be here</font><font color="#E5E5E5"> for a</font>

850
00:29:07,360 --> 00:29:11,770
while so<font color="#CCCCCC"> i'm going</font><font color="#E5E5E5"> to skip you a lot of</font>

851
00:29:09,789 --> 00:29:14,260
the very<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> nitty-gritty and kind</font>

852
00:29:11,770 --> 00:29:16,000
of gloss over some of the details but

853
00:29:14,260 --> 00:29:17,950
suffice it to say that we understand how

854
00:29:16,000 --> 00:29:21,850
this algorithm works it works something

855
00:29:17,950 --> 00:29:24,130
like<font color="#E5E5E5"> find it in</font><font color="#CCCCCC"> dll name find the export</font>

856
00:29:21,850 --> 00:29:25,539
<font color="#E5E5E5">create the hash and you do that for</font>

857
00:29:24,130 --> 00:29:28,929
however many functions you want to call

858
00:29:25,539 --> 00:29:32,860
that's kind of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> high-level experience</font>

859
00:29:28,929 --> 00:29:36,010
<font color="#CCCCCC">ok cool</font><font color="#E5E5E5"> so how do we write a</font><font color="#CCCCCC"> plug-in for</font>

860
00:29:32,860 --> 00:29:37,870
<font color="#CCCCCC">Ida and for binary</font><font color="#E5E5E5"> ninja</font><font color="#CCCCCC"> i'll show you a</font>

861
00:29:36,010 --> 00:29:39,940
little bit about how to do that so<font color="#E5E5E5"> I</font>

862
00:29:37,870 --> 00:29:41,979
typically you have to import<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's in</font>

863
00:29:39,940 --> 00:29:43,539
<font color="#CCCCCC">Python that's a</font><font color="#E5E5E5"> very common language in</font>

864
00:29:41,980 --> 00:29:46,270
sort of<font color="#CCCCCC"> a hackerspace everybody right</font>

865
00:29:43,539 --> 00:29:48,879
stuff in<font color="#CCCCCC"> Python except which</font><font color="#E5E5E5"> project</font>

866
00:29:46,270 --> 00:29:50,649
which shall not be named the<font color="#CCCCCC"> metasploit</font>

867
00:29:48,880 --> 00:29:52,149
project<font color="#E5E5E5"> they write everything in</font><font color="#CCCCCC"> Ruby so</font>

868
00:29:50,649 --> 00:29:53,350
there's probably other tools to that are

869
00:29:52,149 --> 00:29:55,120
useful<font color="#E5E5E5"> that are written something else</font>

870
00:29:53,350 --> 00:29:57,549
but many security tools<font color="#E5E5E5"> are in</font><font color="#CCCCCC"> Python</font>

871
00:29:55,120 --> 00:30:00,129
<font color="#E5E5E5">and so your</font><font color="#CCCCCC"> python script</font><font color="#E5E5E5"> you're going</font>

872
00:29:57,549 --> 00:30:02,529
to import<font color="#E5E5E5"> like the idea</font><font color="#CCCCCC"> API or in this</font>

873
00:30:00,130 --> 00:30:05,260
case binary<font color="#E5E5E5"> ninjas</font><font color="#CCCCCC"> API and</font><font color="#E5E5E5"> at some point</font>

874
00:30:02,529 --> 00:30:07,210
you're going to call<font color="#CCCCCC"> we call this</font>

875
00:30:05,260 --> 00:30:09,010
<font color="#CCCCCC">plug-in</font><font color="#E5E5E5"> the resolve</font><font color="#CCCCCC"> API calls it's not</font>

876
00:30:07,210 --> 00:30:10,330
very original name for the<font color="#CCCCCC"> plug-in but</font>

877
00:30:09,010 --> 00:30:11,620
<font color="#E5E5E5">that's what it does so that's what we</font>

878
00:30:10,330 --> 00:30:13,270
named it so you can just right-click

879
00:30:11,620 --> 00:30:14,379
inside<font color="#CCCCCC"> a burning engine</font><font color="#E5E5E5"> you can run that</font>

880
00:30:13,270 --> 00:30:17,230
plug and that's how it works really

881
00:30:14,380 --> 00:30:19,840
<font color="#E5E5E5">straightforward in the documentation for</font>

882
00:30:17,230 --> 00:30:21,970
this<font color="#CCCCCC"> is all online it's fairly involved</font>

883
00:30:19,840 --> 00:30:22,770
<font color="#E5E5E5">you'll definitely want to be sort of a</font>

884
00:30:21,970 --> 00:30:24,690
<font color="#CCCCCC">plug-in writer</font>

885
00:30:22,770 --> 00:30:26,670
<font color="#CCCCCC">kotor type to make any sense of this at</font>

886
00:30:24,690 --> 00:30:28,590
all<font color="#E5E5E5"> but if you want to go out there and</font>

887
00:30:26,670 --> 00:30:30,840
dig into it<font color="#E5E5E5"> I definitely encourage you</font>

888
00:30:28,590 --> 00:30:32,459
to do that<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> made our example source</font>

889
00:30:30,840 --> 00:30:33,720
code<font color="#CCCCCC"> and this malware samples</font><font color="#E5E5E5"> everything</font>

890
00:30:32,460 --> 00:30:36,120
available online you can go and check it

891
00:30:33,720 --> 00:30:39,180
out so at this point<font color="#E5E5E5"> instead of me just</font>

892
00:30:36,120 --> 00:30:42,360
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> I'd like to stop and give you a</font>

893
00:30:39,180 --> 00:30:46,500
little demo<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you home doing some time</font>

894
00:30:42,360 --> 00:30:50,639
<font color="#CCCCCC">i'm good on</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> so what I've done is</font>

895
00:30:46,500 --> 00:30:54,120
this is the script for binary ninja<font color="#CCCCCC"> this</font>

896
00:30:50,640 --> 00:30:55,500
is what the actual code looks like<font color="#CCCCCC"> I've</font>

897
00:30:54,120 --> 00:30:56,610
<font color="#E5E5E5">got</font><font color="#CCCCCC"> a few hard-coded</font><font color="#E5E5E5"> strings in there</font>

898
00:30:55,500 --> 00:30:58,050
<font color="#E5E5E5">that if you want to run this</font><font color="#CCCCCC"> you'll have</font>

899
00:30:56,610 --> 00:30:59,520
to change it on<font color="#E5E5E5"> your so I'm sure this</font>

900
00:30:58,050 --> 00:31:01,590
code could be improved

901
00:30:59,520 --> 00:31:02,970
just for the record<font color="#CCCCCC"> it's not meant to be</font>

902
00:31:01,590 --> 00:31:05,669
sort of production quality but it's a

903
00:31:02,970 --> 00:31:09,930
good test<font color="#E5E5E5"> and it's got all the code that</font>

904
00:31:05,670 --> 00:31:13,080
includes the<font color="#E5E5E5"> bits for hashing and</font><font color="#CCCCCC"> api</font>

905
00:31:09,930 --> 00:31:14,490
creation and at least<font color="#CCCCCC"> four binary</font><font color="#E5E5E5"> ninja</font>

906
00:31:13,080 --> 00:31:16,080
<font color="#CCCCCC">the important part and I'll go over this</font>

907
00:31:14,490 --> 00:31:17,610
briefly at the end this is sort of the

908
00:31:16,080 --> 00:31:21,060
important part of<font color="#E5E5E5"> the code where we</font>

909
00:31:17,610 --> 00:31:23,189
resolve the code and<font color="#CCCCCC"> i'll talk</font><font color="#E5E5E5"> through a</font>

910
00:31:21,060 --> 00:31:25,230
kind of briefly in slide<font color="#E5E5E5"> where but if</font>

911
00:31:23,190 --> 00:31:26,700
again<font color="#CCCCCC"> each one of these scripts as a few</font>

912
00:31:25,230 --> 00:31:28,770
<font color="#CCCCCC">underlines so I</font><font color="#E5E5E5"> don't want to bore you</font>

913
00:31:26,700 --> 00:31:30,570
to death but this is the<font color="#CCCCCC"> plug-in code</font>

914
00:31:28,770 --> 00:31:33,450
that we have from a<font color="#E5E5E5"> high level</font><font color="#CCCCCC"> for</font>

915
00:31:30,570 --> 00:31:36,480
binary<font color="#E5E5E5"> ninja and this is the same code</font>

916
00:31:33,450 --> 00:31:39,750
written for<font color="#CCCCCC"> Ida so we can see that we</font>

917
00:31:36,480 --> 00:31:41,130
import<font color="#E5E5E5"> IDC and I da utilities instead of</font>

918
00:31:39,750 --> 00:31:44,370
binary images so you're importing some

919
00:31:41,130 --> 00:31:46,530
different libraries and the code is

920
00:31:44,370 --> 00:31:49,350
going to be fairly similar at parts

921
00:31:46,530 --> 00:31:53,100
especially the logic where you know<font color="#E5E5E5"> d</font>

922
00:31:49,350 --> 00:31:58,560
hashing<font color="#CCCCCC"> the the data are stored decoding</font>

923
00:31:53,100 --> 00:31:59,909
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the actual</font><font color="#CCCCCC"> walking</font><font color="#E5E5E5"> of the functions</font>

924
00:31:58,560 --> 00:32:04,830
and stuff it's a little bit different

925
00:31:59,910 --> 00:32:06,450
idea has this structure where you walk

926
00:32:04,830 --> 00:32:07,980
the<font color="#CCCCCC"> segments</font><font color="#E5E5E5"> in an executable and</font><font color="#CCCCCC"> then</font>

927
00:32:06,450 --> 00:32:09,030
you walk<font color="#E5E5E5"> all the functions with and you</font>

928
00:32:07,980 --> 00:32:10,320
walk all the instructions in the

929
00:32:09,030 --> 00:32:13,379
function<font color="#CCCCCC"> and you can look for certain</font>

930
00:32:10,320 --> 00:32:14,850
instructions like<font color="#E5E5E5"> a call and then if you</font>

931
00:32:13,380 --> 00:32:17,130
find<font color="#E5E5E5"> them when you're looking for you</font>

932
00:32:14,850 --> 00:32:19,409
can do whatever logic you have so<font color="#CCCCCC"> it's</font>

933
00:32:17,130 --> 00:32:21,660
<font color="#E5E5E5">it takes a little while how to learn how</font>

934
00:32:19,410 --> 00:32:23,280
to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> these plugins out it's not like</font>

935
00:32:21,660 --> 00:32:24,870
insanely complicated but it definitely

936
00:32:23,280 --> 00:32:26,370
if you've never done this you know it's

937
00:32:24,870 --> 00:32:28,050
in you don't know python and you're not

938
00:32:26,370 --> 00:32:29,340
a coder<font color="#E5E5E5"> might take you you know a couple</font>

939
00:32:28,050 --> 00:32:30,810
weeks to come up to speed but it's

940
00:32:29,340 --> 00:32:33,030
definitely something that you can do so

941
00:32:30,810 --> 00:32:34,770
<font color="#CCCCCC">i would I don't want to</font><font color="#E5E5E5"> don't you on</font>

942
00:32:33,030 --> 00:32:35,910
that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think it's definitely doable</font>

943
00:32:34,770 --> 00:32:37,770
I've already run

944
00:32:35,910 --> 00:32:39,120
<font color="#CCCCCC">plug-in</font><font color="#E5E5E5"> idea because it's really slow</font>

945
00:32:37,770 --> 00:32:40,889
<font color="#E5E5E5">and</font><font color="#CCCCCC"> ayah so I</font><font color="#E5E5E5"> didn't want to run that</font>

946
00:32:39,120 --> 00:32:42,090
live so that's one place for binary

947
00:32:40,890 --> 00:32:43,950
<font color="#CCCCCC">engine</font><font color="#E5E5E5"> works for whatever reason it</font>

948
00:32:42,090 --> 00:32:45,030
might just be because we didn't optimize

949
00:32:43,950 --> 00:32:47,100
our code or something might have been

950
00:32:45,030 --> 00:32:48,720
something we did wrong but it seemed

951
00:32:47,100 --> 00:32:51,000
like it<font color="#E5E5E5"> ran a lot faster and binary</font>

952
00:32:48,720 --> 00:32:52,290
ninja in particular they include support

953
00:32:51,000 --> 00:32:54,180
for threading so we<font color="#E5E5E5"> could have made it</font>

954
00:32:52,290 --> 00:32:55,770
even faster<font color="#CCCCCC"> in binary image if we use</font>

955
00:32:54,180 --> 00:32:58,740
<font color="#E5E5E5">threading which we didn't but it was</font>

956
00:32:55,770 --> 00:33:01,830
still a lot faster there<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> look</font>

957
00:32:58,740 --> 00:33:03,450
at the place where<font color="#CCCCCC"> now these d words</font>

958
00:33:01,830 --> 00:33:06,090
these data<font color="#CCCCCC"> addresses there's nothing</font>

959
00:33:03,450 --> 00:33:07,350
there<font color="#E5E5E5"> by default because statically when</font>

960
00:33:06,090 --> 00:33:09,300
you look<font color="#E5E5E5"> at data section of an</font>

961
00:33:07,350 --> 00:33:10,679
executable<font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> oh this data hasn't</font>

962
00:33:09,300 --> 00:33:12,389
been initialized<font color="#CCCCCC"> it could because it</font>

963
00:33:10,680 --> 00:33:14,910
doesn't happen until<font color="#CCCCCC"> runtime so there's</font>

964
00:33:12,390 --> 00:33:16,350
nothing there to look at but we were

965
00:33:14,910 --> 00:33:18,300
able to leave comments<font color="#E5E5E5"> there they</font>

966
00:33:16,350 --> 00:33:20,129
basically say this is<font color="#E5E5E5"> closed handle or</font>

967
00:33:18,300 --> 00:33:22,470
this is create process for this is exit

968
00:33:20,130 --> 00:33:23,880
process whatever the api's<font color="#E5E5E5"> are we kind</font>

969
00:33:22,470 --> 00:33:26,490
<font color="#E5E5E5">of just named</font><font color="#CCCCCC"> them in comments</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font>

970
00:33:23,880 --> 00:33:28,560
approach so that was how this thing runs

971
00:33:26,490 --> 00:33:33,300
when it when it executes<font color="#E5E5E5"> its it's not</font>

972
00:33:28,560 --> 00:33:37,950
really too exciting<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i will show you</font>

973
00:33:33,300 --> 00:33:41,040
how it runs inside<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> ninja</font><font color="#CCCCCC"> whoops</font>

974
00:33:37,950 --> 00:33:43,020
<font color="#E5E5E5">let me just minimize this</font><font color="#CCCCCC"> is pioneering</font>

975
00:33:41,040 --> 00:33:45,300
<font color="#CCCCCC">you can just take the file you can just</font>

976
00:33:43,020 --> 00:33:49,170
drop<font color="#E5E5E5"> it on binary ninja</font><font color="#CCCCCC"> it will open it</font>

977
00:33:45,300 --> 00:33:51,750
up and you can<font color="#CCCCCC"> right-click and you can</font>

978
00:33:49,170 --> 00:33:53,670
click on the<font color="#CCCCCC"> plug-in that</font><font color="#E5E5E5"> you right now</font>

979
00:33:51,750 --> 00:33:55,890
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> putting put this</font><font color="#CCCCCC"> plug-in</font>

980
00:33:53,670 --> 00:33:57,480
<font color="#E5E5E5">beforehand into the plugins folder and</font>

981
00:33:55,890 --> 00:33:59,250
obviously it has to be working and

982
00:33:57,480 --> 00:34:00,900
tested so<font color="#CCCCCC"> I've already done all that so</font>

983
00:33:59,250 --> 00:34:03,060
<font color="#CCCCCC">I'm kind of hiding you from the messy</font>

984
00:34:00,900 --> 00:34:04,470
details if you will<font color="#E5E5E5"> but once the</font>

985
00:34:03,060 --> 00:34:06,450
elements all that's working then you can

986
00:34:04,470 --> 00:34:09,090
just click resolve<font color="#CCCCCC"> API calls and let me</font>

987
00:34:06,450 --> 00:34:12,030
go to the<font color="#E5E5E5"> the function where this</font>

988
00:34:09,090 --> 00:34:15,780
happens for so when<font color="#CCCCCC"> i</font><font color="#E5E5E5"> run it you should</font>

989
00:34:12,030 --> 00:34:17,850
see there's a slight delay<font color="#E5E5E5"> and then you</font>

990
00:34:15,780 --> 00:34:19,530
should see some of those data terms<font color="#E5E5E5"> get</font>

991
00:34:17,850 --> 00:34:21,569
renamed<font color="#CCCCCC"> on if you</font><font color="#E5E5E5"> just saw</font><font color="#CCCCCC"> a change</font><font color="#E5E5E5"> or</font>

992
00:34:19,530 --> 00:34:23,100
not but this thing here got a<font color="#E5E5E5"> comment</font>

993
00:34:21,570 --> 00:34:24,540
after<font color="#E5E5E5"> it and this this was data</font>

994
00:34:23,100 --> 00:34:27,360
underscore whatever now it says

995
00:34:24,540 --> 00:34:28,770
<font color="#CCCCCC">closehandle</font><font color="#E5E5E5"> so we just what you could</font>

996
00:34:27,360 --> 00:34:30,390
have<font color="#E5E5E5"> done manually by hitting and</font>

997
00:34:28,770 --> 00:34:31,860
<font color="#E5E5E5">pulling</font><font color="#CCCCCC"> in renaming it manually we just</font>

998
00:34:30,389 --> 00:34:35,520
wrote a script that does that for you

999
00:34:31,860 --> 00:34:38,310
and we<font color="#E5E5E5"> found that it was doable for</font>

1000
00:34:35,520 --> 00:34:40,000
either one both<font color="#E5E5E5"> island by ninja writing</font>

1001
00:34:38,310 --> 00:34:42,040
the script was

1002
00:34:40,000 --> 00:34:43,629
you know there<font color="#E5E5E5"> were enough examples and</font>

1003
00:34:42,040 --> 00:34:45,879
stuff out there and documentation for

1004
00:34:43,629 --> 00:34:49,239
both tools that we could write a script

1005
00:34:45,879 --> 00:34:50,889
that worked on either one<font color="#CCCCCC"> so there's</font>

1006
00:34:49,239 --> 00:34:52,899
<font color="#E5E5E5">that it i don't know if it was</font>

1007
00:34:50,889 --> 00:34:55,060
necessarily way easier way harder on

1008
00:34:52,899 --> 00:34:57,910
either one there were some benefits<font color="#CCCCCC"> one</font>

1009
00:34:55,060 --> 00:34:59,710
way<font color="#E5E5E5"> or the other</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> were interesting</font>

1010
00:34:57,910 --> 00:35:01,060
<font color="#E5E5E5">one thing</font><font color="#CCCCCC"> i want to do too since i</font>

1011
00:34:59,710 --> 00:35:03,130
haven't done this yet<font color="#CCCCCC"> i just kind of</font>

1012
00:35:01,060 --> 00:35:05,080
<font color="#E5E5E5">talked through and kind of</font><font color="#CCCCCC"> Gloucester</font><font color="#E5E5E5"> it</font>

1013
00:35:03,130 --> 00:35:07,840
if you<font color="#CCCCCC"> one of the ways that you want to</font>

1014
00:35:05,080 --> 00:35:09,490
learn<font color="#CCCCCC"> reverse engineering is just take a</font>

1015
00:35:07,840 --> 00:35:12,010
simple C program like here<font color="#E5E5E5"> I've got</font><font color="#CCCCCC"> a</font>

1016
00:35:09,490 --> 00:35:14,379
<font color="#CCCCCC">c++ program just called board at CP it's</font>

1017
00:35:12,010 --> 00:35:17,260
just some<font color="#CCCCCC"> c++ program it's nothing</font>

1018
00:35:14,380 --> 00:35:19,870
really exciting<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> just take that</font>

1019
00:35:17,260 --> 00:35:23,290
compile it once you've compiled<font color="#E5E5E5"> and you</font>

1020
00:35:19,870 --> 00:35:24,910
have an executable<font color="#CCCCCC"> then you can just</font>

1021
00:35:23,290 --> 00:35:26,650
open up<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> pro which I've already</font>

1022
00:35:24,910 --> 00:35:28,390
done<font color="#CCCCCC"> I've already have an ID be that I</font>

1023
00:35:26,650 --> 00:35:30,220
open and save it so just drop that on

1024
00:35:28,390 --> 00:35:33,370
the<font color="#CCCCCC"> idea pro</font><font color="#E5E5E5"> icon right click it and</font>

1025
00:35:30,220 --> 00:35:35,290
you'll see that<font color="#CCCCCC"> i did a good job i don't</font>

1026
00:35:33,370 --> 00:35:37,779
know<font color="#E5E5E5"> if you can read this or not but it</font>

1027
00:35:35,290 --> 00:35:38,140
started me in the main program<font color="#CCCCCC"> you</font><font color="#E5E5E5"> read</font>

1028
00:35:37,780 --> 00:35:39,580
<font color="#E5E5E5">that</font>

1029
00:35:38,140 --> 00:35:41,980
<font color="#E5E5E5">yeah you can kind of read that maybe if</font>

1030
00:35:39,580 --> 00:35:43,330
you have good vision<font color="#CCCCCC"> and if you look</font>

1031
00:35:41,980 --> 00:35:44,740
down through<font color="#E5E5E5"> did a pretty good job of</font>

1032
00:35:43,330 --> 00:35:47,020
like resolving some of the common

1033
00:35:44,740 --> 00:35:48,549
library functions like<font color="#CCCCCC"> aty and even did</font>

1034
00:35:47,020 --> 00:35:51,610
a pretty good job of when this<font color="#E5E5E5"> when the</font>

1035
00:35:48,550 --> 00:35:54,010
constructor for the main object is

1036
00:35:51,610 --> 00:35:56,140
called it shows<font color="#CCCCCC"> board colon colon board</font>

1037
00:35:54,010 --> 00:35:58,750
which is the c++ syntax for initializing

1038
00:35:56,140 --> 00:36:00,339
that object basically<font color="#CCCCCC"> you can see that</font>

1039
00:35:58,750 --> 00:36:01,420
in the code<font color="#E5E5E5"> to the way you learn</font><font color="#CCCCCC"> reverse</font>

1040
00:36:00,340 --> 00:36:03,430
<font color="#CCCCCC">engineering</font><font color="#E5E5E5"> as you write some code</font>

1041
00:36:01,420 --> 00:36:07,690
<font color="#CCCCCC">here's the eighth yaaay</font>

1042
00:36:03,430 --> 00:36:09,819
so this line of<font color="#CCCCCC"> C++ code</font><font color="#E5E5E5"> maps to like</font>

1043
00:36:07,690 --> 00:36:11,320
this block of<font color="#E5E5E5"> assembly basically and</font>

1044
00:36:09,820 --> 00:36:13,240
that's how you learn this<font color="#CCCCCC"> you go oh</font>

1045
00:36:11,320 --> 00:36:14,680
<font color="#E5E5E5">that's how that looks and you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> go</font>

1046
00:36:13,240 --> 00:36:16,810
back<font color="#CCCCCC"> and</font><font color="#E5E5E5"> forth and that's kind of how</font>

1047
00:36:14,680 --> 00:36:18,310
you learn this whole thing<font color="#CCCCCC"> so let's see</font>

1048
00:36:16,810 --> 00:36:21,190
what does it look like in binary<font color="#CCCCCC"> image</font>

1049
00:36:18,310 --> 00:36:21,970
<font color="#CCCCCC">if we take that same program</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> DSC and</font>

1050
00:36:21,190 --> 00:36:25,780
<font color="#CCCCCC">throw</font><font color="#E5E5E5"> it in</font>

1051
00:36:21,970 --> 00:36:27,100
<font color="#CCCCCC">inja it doesn't find main by because</font>

1052
00:36:25,780 --> 00:36:29,080
it's not quite as good at that

1053
00:36:27,100 --> 00:36:32,200
<font color="#CCCCCC">especially in</font><font color="#E5E5E5"> windows</font><font color="#CCCCCC"> so we'll have to</font>

1054
00:36:29,080 --> 00:36:34,270
find that it's probably one of these

1055
00:36:32,200 --> 00:36:38,980
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> actually this is another function</font>

1056
00:36:34,270 --> 00:36:42,009
after start that calls<font color="#CCCCCC"> main so here</font><font color="#E5E5E5"> I</font>

1057
00:36:38,980 --> 00:36:44,500
<font color="#CCCCCC">caic a</font><font color="#E5E5E5"> move move move call which I just</font>

1058
00:36:42,010 --> 00:36:46,930
happen to recognize as essentially<font color="#CCCCCC"> main</font>

1059
00:36:44,500 --> 00:36:49,390
<font color="#E5E5E5">so this is made</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> could type</font><font color="#CCCCCC"> in and</font>

1060
00:36:46,930 --> 00:36:51,020
call this name and rename it<font color="#CCCCCC"> so once you</font>

1061
00:36:49,390 --> 00:36:52,040
find<font color="#CCCCCC"> him it's not terribly difficult</font>

1062
00:36:51,020 --> 00:36:53,450
<font color="#E5E5E5">if you're good at this you could find</font>

1063
00:36:52,040 --> 00:36:57,410
yourself but it was nice that<font color="#CCCCCC"> i</font><font color="#E5E5E5"> found it</font>

1064
00:36:53,450 --> 00:37:01,009
for me<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> look for that same block</font>

1065
00:36:57,410 --> 00:37:03,649
<font color="#E5E5E5">the 80 y 80 why</font><font color="#CCCCCC"> I like how they put the</font>

1066
00:37:01,010 --> 00:37:06,320
msvcrt.dll<font color="#CCCCCC"> why so they show you what</font>

1067
00:37:03,650 --> 00:37:08,390
what<font color="#E5E5E5"> dll not just the</font><font color="#CCCCCC"> API name</font><font color="#E5E5E5"> that they</font>

1068
00:37:06,320 --> 00:37:09,620
gave<font color="#E5E5E5"> you the</font><font color="#CCCCCC"> DLLs</font><font color="#E5E5E5"> why like that</font><font color="#CCCCCC"> that's a</font>

1069
00:37:08,390 --> 00:37:10,790
<font color="#CCCCCC">little different than what i did so</font>

1070
00:37:09,620 --> 00:37:13,100
that's<font color="#CCCCCC"> kinda cool</font>

1071
00:37:10,790 --> 00:37:16,040
<font color="#E5E5E5">you can read that if you can't let's see</font>

1072
00:37:13,100 --> 00:37:18,650
if<font color="#CCCCCC"> I can see probably fail</font><font color="#E5E5E5"> on this</font>

1073
00:37:16,040 --> 00:37:20,540
epically<font color="#E5E5E5"> how do i zoom</font>

1074
00:37:18,650 --> 00:37:23,540
<font color="#E5E5E5">yeah so you can you can take like this</font>

1075
00:37:20,540 --> 00:37:27,170
and you can zoom in and out and make

1076
00:37:23,540 --> 00:37:29,210
this<font color="#E5E5E5"> is big as I want and then what</font>

1077
00:37:27,170 --> 00:37:31,220
<font color="#CCCCCC">didn't do</font><font color="#E5E5E5"> though the constructor this is</font>

1078
00:37:29,210 --> 00:37:32,660
that<font color="#CCCCCC"> board colon colon</font><font color="#E5E5E5"> board didn't do</font>

1079
00:37:31,220 --> 00:37:34,580
anything with that<font color="#E5E5E5"> it's not able to</font>

1080
00:37:32,660 --> 00:37:36,290
parse like the<font color="#CCCCCC"> pdb symbols or anything</font>

1081
00:37:34,580 --> 00:37:37,850
the names<font color="#CCCCCC"> are the importer a lot of the</font>

1082
00:37:36,290 --> 00:37:39,470
stuff that<font color="#CCCCCC"> it is a little better</font>

1083
00:37:37,850 --> 00:37:41,210
opponent apart and automatically

1084
00:37:39,470 --> 00:37:43,160
renaming functions it didn't do that<font color="#E5E5E5"> so</font>

1085
00:37:41,210 --> 00:37:45,080
you know you take the good with the bad

1086
00:37:43,160 --> 00:37:47,450
<font color="#CCCCCC">i expect it</font><font color="#E5E5E5"> will improve a lot over the</font>

1087
00:37:45,080 --> 00:37:48,680
next year<font color="#CCCCCC"> so you know that's one of</font>

1088
00:37:47,450 --> 00:37:50,270
those things that may not do this right

1089
00:37:48,680 --> 00:37:51,529
this second but a year from now it's

1090
00:37:50,270 --> 00:37:53,060
still going to be cheaper<font color="#E5E5E5"> than</font><font color="#CCCCCC"> I'd it's</font>

1091
00:37:51,530 --> 00:37:54,950
<font color="#E5E5E5">going to have a lot of this so keep</font>

1092
00:37:53,060 --> 00:37:57,380
watching<font color="#E5E5E5"> to keep following it you know</font>

1093
00:37:54,950 --> 00:38:00,620
keep keep your eye on it because<font color="#CCCCCC"> I think</font>

1094
00:37:57,380 --> 00:38:01,790
<font color="#E5E5E5">it's pretty pretty solid tool even</font>

1095
00:38:00,620 --> 00:38:02,779
<font color="#CCCCCC">though doesn't have every little thing</font>

1096
00:38:01,790 --> 00:38:08,930
just yet

1097
00:38:02,780 --> 00:38:11,180
<font color="#CCCCCC">alright so kick back over to the script</font>

1098
00:38:08,930 --> 00:38:13,250
so this was the<font color="#CCCCCC"> binges script and this</font>

1099
00:38:11,180 --> 00:38:14,839
bit here this get function<font color="#E5E5E5"> at that's</font>

1100
00:38:13,250 --> 00:38:17,360
<font color="#E5E5E5">kind of how we get started to access the</font>

1101
00:38:14,840 --> 00:38:20,240
assembly and from there we can do this

1102
00:38:17,360 --> 00:38:22,790
for<font color="#CCCCCC"> Block in maine . low-level aisle and</font>

1103
00:38:20,240 --> 00:38:25,879
<font color="#E5E5E5">we can begin to walk through all of the</font>

1104
00:38:22,790 --> 00:38:27,890
blocks in the main<font color="#CCCCCC"> aisle</font><font color="#E5E5E5"> so that's kind</font>

1105
00:38:25,880 --> 00:38:29,300
of how you get started on that you get

1106
00:38:27,890 --> 00:38:31,370
<font color="#CCCCCC">it</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> the blocks and the rest</font>

1107
00:38:29,300 --> 00:38:33,110
of that<font color="#E5E5E5"> as i said i'll leave that to an</font>

1108
00:38:31,370 --> 00:38:35,270
exercise for the reader that's where we

1109
00:38:33,110 --> 00:38:38,570
<font color="#E5E5E5">check for the</font><font color="#CCCCCC"> API calls that's kind of</font>

1110
00:38:35,270 --> 00:38:40,940
the logic that does<font color="#CCCCCC"> the the hashing and</font>

1111
00:38:38,570 --> 00:38:42,650
the<font color="#CCCCCC"> idea script looks fairly similar we</font>

1112
00:38:40,940 --> 00:38:45,200
have this area here where you do four

1113
00:38:42,650 --> 00:38:47,300
segments in segments and then<font color="#CCCCCC"> for</font>

1114
00:38:45,200 --> 00:38:49,520
functions in those segments and then you

1115
00:38:47,300 --> 00:38:51,530
can do<font color="#CCCCCC"> forehead</font><font color="#E5E5E5"> in all the different</font>

1116
00:38:49,520 --> 00:38:52,670
heads to iterate the<font color="#E5E5E5"> block so the logic</font>

1117
00:38:51,530 --> 00:38:54,680
is a little different as far as the

1118
00:38:52,670 --> 00:38:56,330
<font color="#CCCCCC">api's</font><font color="#E5E5E5"> and the way you access the</font>

1119
00:38:54,680 --> 00:38:58,250
internal database that both of these

1120
00:38:56,330 --> 00:39:00,500
tools exposed to the reverse engineer

1121
00:38:58,250 --> 00:39:02,730
the extension writer<font color="#E5E5E5"> but ultimately the</font>

1122
00:39:00,500 --> 00:39:05,670
logic where you do the check<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AP</font>

1123
00:39:02,730 --> 00:39:07,109
call is somewhat similar<font color="#E5E5E5"> one subtle</font>

1124
00:39:05,670 --> 00:39:09,150
difference that was interesting was the

1125
00:39:07,109 --> 00:39:11,819
fact that the<font color="#CCCCCC"> aisle allows you to</font>

1126
00:39:09,150 --> 00:39:14,100
directly access<font color="#E5E5E5"> registers at any point</font>

1127
00:39:11,820 --> 00:39:16,980
so it's really nice and<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> ninja to</font>

1128
00:39:14,100 --> 00:39:19,650
be able to say<font color="#E5E5E5"> may not get Regice value</font>

1129
00:39:16,980 --> 00:39:22,260
at<font color="#CCCCCC"> I want ESI</font><font color="#E5E5E5"> and you can get the value</font>

1130
00:39:19,650 --> 00:39:25,050
<font color="#CCCCCC">of psi at that point</font><font color="#E5E5E5"> and now you've got</font>

1131
00:39:22,260 --> 00:39:26,369
what was the<font color="#CCCCCC"> API hash source so that was</font>

1132
00:39:25,050 --> 00:39:27,810
<font color="#E5E5E5">we needed that piece of data for the</font>

1133
00:39:26,369 --> 00:39:30,750
script whatever it is<font color="#E5E5E5"> it was really easy</font>

1134
00:39:27,810 --> 00:39:32,040
to access an idea was very accessible as

1135
00:39:30,750 --> 00:39:34,380
well but you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do just a little</font>

1136
00:39:32,040 --> 00:39:36,000
bit more work with the<font color="#CCCCCC"> api's to kind of</font>

1137
00:39:34,380 --> 00:39:37,619
<font color="#CCCCCC">fanatical that data</font><font color="#E5E5E5"> out it wasn't as</font>

1138
00:39:36,000 --> 00:39:39,000
<font color="#CCCCCC">straightforward to say give me the value</font>

1139
00:39:37,619 --> 00:39:40,410
<font color="#CCCCCC">at ESI you</font><font color="#E5E5E5"> kind of have to walk</font>

1140
00:39:39,000 --> 00:39:43,200
backwards a little bit and find the

1141
00:39:40,410 --> 00:39:44,759
value from a certain point so<font color="#CCCCCC"> I feel</font>

1142
00:39:43,200 --> 00:39:46,290
<font color="#E5E5E5">like you could screw that up easier and</font>

1143
00:39:44,760 --> 00:39:50,340
<font color="#CCCCCC">an idea because they don't directly</font>

1144
00:39:46,290 --> 00:39:51,810
<font color="#CCCCCC">excess</font><font color="#E5E5E5"> registers so one of the things</font>

1145
00:39:50,340 --> 00:39:52,980
that you can do<font color="#CCCCCC"> in vinegar</font><font color="#E5E5E5"> that's also</font>

1146
00:39:51,810 --> 00:39:54,720
really nice that doesn't work quite as

1147
00:39:52,980 --> 00:39:55,890
well in<font color="#CCCCCC"> in ida</font><font color="#E5E5E5"> is you can run this</font>

1148
00:39:54,720 --> 00:39:58,020
script just from the command line you

1149
00:39:55,890 --> 00:39:59,910
can<font color="#E5E5E5"> do</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> resolve</font><font color="#CCCCCC"> API is that</font><font color="#E5E5E5"> pie so</font>

1150
00:39:58,020 --> 00:40:01,440
you can get this you can<font color="#CCCCCC"> headless</font>

1151
00:39:59,910 --> 00:40:03,118
without the<font color="#CCCCCC"> GUI basically you can run</font>

1152
00:40:01,440 --> 00:40:05,070
the<font color="#CCCCCC"> script so having a true batch mode</font>

1153
00:40:03,119 --> 00:40:06,570
is really nice if you want to run this

1154
00:40:05,070 --> 00:40:07,980
across the thousand different ways or

1155
00:40:06,570 --> 00:40:10,200
something you don't have to open up the

1156
00:40:07,980 --> 00:40:11,880
<font color="#E5E5E5">now we're in the</font><font color="#CCCCCC"> GUI and kind of you</font>

1157
00:40:10,200 --> 00:40:14,790
know manually<font color="#CCCCCC"> right click each one</font><font color="#E5E5E5"> step</font>

1158
00:40:11,880 --> 00:40:16,680
<font color="#E5E5E5">the</font><font color="#CCCCCC"> headless options really awesome</font><font color="#E5E5E5"> so</font>

1159
00:40:14,790 --> 00:40:19,920
the code that we make available on

1160
00:40:16,680 --> 00:40:22,049
github<font color="#CCCCCC"> / bday labs and</font><font color="#E5E5E5"> dirty combine</font>

1161
00:40:19,920 --> 00:40:24,330
<font color="#CCCCCC">image that's why firstly says</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> Derby</font>

1162
00:40:22,050 --> 00:40:26,220
<font color="#E5E5E5">so and the docs have been the</font><font color="#CCCCCC"> binger</font>

1163
00:40:24,330 --> 00:40:28,109
<font color="#CCCCCC">docks</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> to dr. both there if you</font>

1164
00:40:26,220 --> 00:40:32,700
want to go and find the data associated

1165
00:40:28,109 --> 00:40:34,170
with this<font color="#E5E5E5"> and congratulations you did</font><font color="#CCCCCC"> as</font>

1166
00:40:32,700 --> 00:40:36,299
<font color="#E5E5E5">my best that was my best buddy the elf</font>

1167
00:40:34,170 --> 00:40:38,040
voice<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not very good at that voice</font>

1168
00:40:36,300 --> 00:40:40,800
but if you want to contact me on<font color="#CCCCCC"> Twitter</font>

1169
00:40:38,040 --> 00:40:42,869
manager<font color="#CCCCCC"> de</font><font color="#E5E5E5"> mots info add to either</font>

1170
00:40:40,800 --> 00:40:44,310
<font color="#CCCCCC">binary defense or VA</font><font color="#E5E5E5"> labs depending on</font>

1171
00:40:42,869 --> 00:40:46,320
you know what company<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to get</font>

1172
00:40:44,310 --> 00:40:49,770
ahold of you can find me there

1173
00:40:46,320 --> 00:40:51,660
<font color="#E5E5E5">that's all</font><font color="#CCCCCC"> i have but i do have a</font>

1174
00:40:49,770 --> 00:40:54,090
dinosaur still have some cards so

1175
00:40:51,660 --> 00:40:55,890
<font color="#E5E5E5">anybody wants to come up after</font><font color="#CCCCCC"> that's</font>

1176
00:40:54,090 --> 00:40:57,180
the<font color="#CCCCCC"> end of the talk so go ahead and</font>

1177
00:40:55,890 --> 00:40:58,680
applause<font color="#CCCCCC"> will cut</font><font color="#E5E5E5"> it there and then you</font>

1178
00:40:57,180 --> 00:40:59,970
can you guys<font color="#E5E5E5"> come up after if you want</font>

1179
00:40:58,680 --> 00:41:01,440
to grab a<font color="#E5E5E5"> card or something and</font><font color="#CCCCCC"> i'll</font>

1180
00:40:59,970 --> 00:41:09,350
give this to whoever comes up with the

1181
00:41:01,440 --> 00:41:09,350
first questions that third group

