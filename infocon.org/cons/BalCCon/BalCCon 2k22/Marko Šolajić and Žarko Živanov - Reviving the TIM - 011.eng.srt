1
00:00:00,570 --> 00:00:12,710
[Music]

2
00:00:18,800 --> 00:00:21,130
thank you

3
00:00:21,130 --> 00:00:24,660
[Music]

4
00:00:24,660 --> 00:00:27,320
next up I'll talk by Marco challenge

5
00:00:27,320 --> 00:00:31,400
Reviving the team 0-11

6
00:00:33,300 --> 00:00:35,480
yeah

7
00:00:36,059 --> 00:00:39,719
hello everyone I hope that you know why

8
00:00:39,719 --> 00:00:43,500
you are here because this talk is about

9
00:00:43,500 --> 00:00:46,020
a very very old Hardware that is not

10
00:00:46,020 --> 00:00:51,120
used for I don't know probably 40 30 or

11
00:00:51,120 --> 00:00:52,559
40 years

12
00:00:52,559 --> 00:00:56,760
anyhow this is about the work that Marco

13
00:00:56,760 --> 00:01:01,020
and me did for the last five six years

14
00:01:01,020 --> 00:01:04,379
on and off working on one of the

15
00:01:04,379 --> 00:01:05,479
remaining

16
00:01:05,479 --> 00:01:09,840
team 0-11 machines

17
00:01:09,840 --> 00:01:14,100
so we will start with a short history

18
00:01:14,100 --> 00:01:19,020
the machine is made around 86 87 but

19
00:01:19,020 --> 00:01:22,080
team led by nether Dunwich and the two

20
00:01:22,080 --> 00:01:24,960
more people were included Milan padich

21
00:01:24,960 --> 00:01:27,140
and lubishagavilovich

22
00:01:27,140 --> 00:01:31,560
somewhere around 87 that project was

23
00:01:31,560 --> 00:01:35,100
picked up by Institute mikhailo Popin

24
00:01:35,100 --> 00:01:38,759
from Belgrade and they decided to mass

25
00:01:38,759 --> 00:01:42,420
produce the machine for the schools at

26
00:01:42,420 --> 00:01:43,380
the time

27
00:01:43,380 --> 00:01:46,920
there was a debate which computer should

28
00:01:46,920 --> 00:01:50,700
be used in our schools and

29
00:01:50,700 --> 00:01:52,920
there were several projects actually

30
00:01:52,920 --> 00:01:55,740
started at the same time and some

31
00:01:55,740 --> 00:01:57,899
schools got one computer other schools

32
00:01:57,899 --> 00:02:00,659
got the other one a lot of Belgrade

33
00:02:00,659 --> 00:02:04,640
schools got this one here

34
00:02:04,920 --> 00:02:09,060
and because all of those computers were

35
00:02:09,060 --> 00:02:12,239
incorporate incompatible between them it

36
00:02:12,239 --> 00:02:13,340
was

37
00:02:13,340 --> 00:02:18,120
quite hard to actually make the books

38
00:02:18,120 --> 00:02:20,400
about for students to to learn the

39
00:02:20,400 --> 00:02:21,560
programming

40
00:02:21,560 --> 00:02:23,959
but anyhow

41
00:02:23,959 --> 00:02:28,379
in 87 this machine will won the gold

42
00:02:28,379 --> 00:02:30,780
plaque at the fair

43
00:02:30,780 --> 00:02:33,120
uchila 87 or

44
00:02:33,120 --> 00:02:37,500
let's say Learning Materials 87

45
00:02:37,500 --> 00:02:41,640
the the next year machine actually went

46
00:02:41,640 --> 00:02:44,280
into schools and was started to be used

47
00:02:44,280 --> 00:02:49,200
mostly in Belgrade but some of the uh

48
00:02:49,200 --> 00:02:51,900
machines ended up all over the Serbia

49
00:02:51,900 --> 00:02:56,640
but as I said mostly Belgrade around 12

50
00:02:56,640 --> 00:03:00,860
000 1200 units were produced

51
00:03:00,860 --> 00:03:05,519
and most of them were for just schools I

52
00:03:05,519 --> 00:03:09,540
don't know if we had actually any way to

53
00:03:09,540 --> 00:03:13,019
buy to buy them if you are not a school

54
00:03:13,019 --> 00:03:16,620
at the time many magazines computer

55
00:03:16,620 --> 00:03:19,319
magazines from Yugoslavia wrote texts

56
00:03:19,319 --> 00:03:22,019
about this machine praising it praising

57
00:03:22,019 --> 00:03:25,080
its capabilities praising its price and

58
00:03:25,080 --> 00:03:28,640
how it could compete with the XD

59
00:03:28,640 --> 00:03:31,500
machines that were starting to become

60
00:03:31,500 --> 00:03:32,400
popular

61
00:03:32,400 --> 00:03:36,780
but has everything that was complete

62
00:03:36,780 --> 00:03:39,959
competing with PC compatibles somewhere

63
00:03:39,959 --> 00:03:42,319
around

64
00:03:42,620 --> 00:03:46,519
beginning of the 90s PC compatibles so

65
00:03:46,519 --> 00:03:49,680
as you probably know or do not know

66
00:03:49,680 --> 00:03:52,980
actually took over everything and all

67
00:03:52,980 --> 00:03:55,200
other systems or other architectures

68
00:03:55,200 --> 00:03:58,019
were practically thrown away that

69
00:03:58,019 --> 00:03:59,760
includes and

70
00:03:59,760 --> 00:04:04,019
uh remaining Machines of this type and

71
00:04:04,019 --> 00:04:07,560
mostly there were either thrown away or

72
00:04:07,560 --> 00:04:10,159
disassembled for the parts

73
00:04:10,159 --> 00:04:12,720
I'm not sure how many of the machines

74
00:04:12,720 --> 00:04:15,720
survived until this day

75
00:04:15,720 --> 00:04:19,918
I'm personally aware of about six or

76
00:04:19,918 --> 00:04:22,639
seven of them

77
00:04:22,740 --> 00:04:25,440
I don't think that there is more than a

78
00:04:25,440 --> 00:04:29,840
50 60 of them now alive

79
00:04:30,600 --> 00:04:34,860
uh that is not the worst case regarding

80
00:04:34,860 --> 00:04:37,979
the preserving of history of computing

81
00:04:37,979 --> 00:04:40,380
the worst cases with the software

82
00:04:40,380 --> 00:04:43,620
written for this machine because none of

83
00:04:43,620 --> 00:04:46,740
it survived the only thing that survived

84
00:04:46,740 --> 00:04:50,160
was just one copy of a system floppy

85
00:04:50,160 --> 00:04:51,060
disk

86
00:04:51,060 --> 00:04:53,240
that was

87
00:04:53,240 --> 00:04:56,820
significantly altered from the system

88
00:04:56,820 --> 00:04:58,740
this that came originally with machine

89
00:04:58,740 --> 00:05:04,100
and that is all that we have today

90
00:05:04,100 --> 00:05:07,440
uh from time to time something pops up

91
00:05:07,440 --> 00:05:08,720
but

92
00:05:08,720 --> 00:05:11,660
mostly some basic programs somebody

93
00:05:11,660 --> 00:05:14,220
photographed from a piece of paper or

94
00:05:14,220 --> 00:05:16,220
something like that

95
00:05:16,220 --> 00:05:19,919
uh so what's inside the machine it's

96
00:05:19,919 --> 00:05:24,560
based around the hitachi's HD 64180

97
00:05:24,560 --> 00:05:27,440
processor it has

98
00:05:27,440 --> 00:05:31,919
256 case of ram video output supports

99
00:05:31,919 --> 00:05:34,979
four shades of green that includes black

100
00:05:34,979 --> 00:05:38,340
and it's running a version of CPM

101
00:05:38,340 --> 00:05:41,120
operating system

102
00:05:41,120 --> 00:05:43,680
actually some

103
00:05:43,680 --> 00:05:48,180
the magazines that I mentioned had the

104
00:05:48,180 --> 00:05:50,940
series of articles about building this

105
00:05:50,940 --> 00:05:52,740
machine by yourself

106
00:05:52,740 --> 00:05:54,720
so you could buy the motherboard you

107
00:05:54,720 --> 00:05:57,180
could buy the parts and assemble it at

108
00:05:57,180 --> 00:06:01,020
home of course the case wasn't part of

109
00:06:01,020 --> 00:06:04,800
that and the keyboard you could use

110
00:06:04,800 --> 00:06:09,180
another one but about those details we

111
00:06:09,180 --> 00:06:11,340
will talk later

112
00:06:11,340 --> 00:06:14,060
uh so what's that

113
00:06:14,060 --> 00:06:18,300
hd64 whatever processor it is actually a

114
00:06:18,300 --> 00:06:22,800
set 80 based embedded microprocessor uh

115
00:06:22,800 --> 00:06:25,259
it has set 80 core which added

116
00:06:25,259 --> 00:06:30,120
peripherals so it has uh mmu units it

117
00:06:30,120 --> 00:06:34,500
has dma timers and so on but mostly it

118
00:06:34,500 --> 00:06:39,000
is set 80 with also some instructions

119
00:06:39,000 --> 00:06:41,160
added for example it had the

120
00:06:41,160 --> 00:06:43,740
instructions for multiplying which was

121
00:06:43,740 --> 00:06:47,039
used in several places in the OS for the

122
00:06:47,039 --> 00:06:49,280
machine itself

123
00:06:49,280 --> 00:06:53,759
Hitachi later license that CPU back to

124
00:06:53,759 --> 00:06:57,780
zlog and the zlog first produced their

125
00:06:57,780 --> 00:07:00,000
variant which was more or less exact

126
00:07:00,000 --> 00:07:04,440
copy only with set in the name and then

127
00:07:04,440 --> 00:07:07,199
with some enhancements they made the

128
00:07:07,199 --> 00:07:11,580
dialog z180 and that was maybe something

129
00:07:11,580 --> 00:07:15,199
you heard of if you know what z80

130
00:07:15,199 --> 00:07:18,380
actually is

131
00:07:18,380 --> 00:07:21,780
for the rest of the hardware keyboard

132
00:07:21,780 --> 00:07:24,000
is actually keyboard with serial

133
00:07:24,000 --> 00:07:27,900
communication so it uses uh it has its

134
00:07:27,900 --> 00:07:30,599
own CPU and apron and program that runs

135
00:07:30,599 --> 00:07:33,360
and you will sell your communication to

136
00:07:33,360 --> 00:07:36,960
send data to the motherboard itself

137
00:07:36,960 --> 00:07:42,120
uh machine has a floppy drive and the

138
00:07:42,120 --> 00:07:44,940
floppy controller based on chips that

139
00:07:44,940 --> 00:07:47,520
were available at the time it has serial

140
00:07:47,520 --> 00:07:50,160
parallel ports at the back and the power

141
00:07:50,160 --> 00:07:54,840
supply that generates 5 plus 12 and -12

142
00:07:54,840 --> 00:07:57,080
voltages

143
00:07:57,080 --> 00:07:59,900
for the

144
00:07:59,900 --> 00:08:03,300
video output I will give the words to

145
00:08:03,300 --> 00:08:06,419
Marco because he was the one who worked

146
00:08:06,419 --> 00:08:09,300
most of the details Marco

147
00:08:09,300 --> 00:08:12,720
thank you the

148
00:08:12,720 --> 00:08:15,539
if you take a look at the the monitor

149
00:08:15,539 --> 00:08:18,840
you will see only text and mostly it was

150
00:08:18,840 --> 00:08:22,680
text based but the display has

151
00:08:22,680 --> 00:08:27,060
full resolution of 512 by 256 pixels

152
00:08:27,060 --> 00:08:31,680
with two bits of two bits per pixel and

153
00:08:31,680 --> 00:08:34,940
the video memory is

154
00:08:34,940 --> 00:08:38,880
inside the CPUs input output output

155
00:08:38,880 --> 00:08:43,880
space and it's based from 8 000 hex

156
00:08:43,880 --> 00:08:47,339
the text mode which is 80 by 24

157
00:08:47,339 --> 00:08:51,180
characters is actually all realized in

158
00:08:51,180 --> 00:08:54,720
software so software is generating this

159
00:08:54,720 --> 00:08:56,040
text

160
00:08:56,040 --> 00:08:58,860
the monitor is a classic 12-inch green

161
00:08:58,860 --> 00:09:01,800
monitor it's fixed to the case you

162
00:09:01,800 --> 00:09:03,720
cannot move it

163
00:09:03,720 --> 00:09:08,399
but if some service is required the

164
00:09:08,399 --> 00:09:11,820
motherboard can be pulled out so there

165
00:09:11,820 --> 00:09:14,040
are four screws on the back

166
00:09:14,040 --> 00:09:17,220
and you pull out the front part of the

167
00:09:17,220 --> 00:09:19,500
computer with where everything is

168
00:09:19,500 --> 00:09:21,480
actually faced to the chassis

169
00:09:21,480 --> 00:09:25,200
uh regarding the graphics we will talk

170
00:09:25,200 --> 00:09:27,300
about later

171
00:09:27,300 --> 00:09:32,160
but the machine is fully capable of

172
00:09:32,160 --> 00:09:33,899
slow but

173
00:09:33,899 --> 00:09:37,220
Four Color graphics

174
00:09:39,000 --> 00:09:40,160
okay

175
00:09:40,160 --> 00:09:45,000
as for the software uh 250 case of RAM

176
00:09:45,000 --> 00:09:48,720
is used as 60k RAM for the processor

177
00:09:48,720 --> 00:09:51,360
processor itself and the rest of the

178
00:09:51,360 --> 00:09:55,920
memory is used as RAM disks so you could

179
00:09:55,920 --> 00:09:58,380
copy program to Ram disk and run it much

180
00:09:58,380 --> 00:10:00,800
faster than you would do from the floppy

181
00:10:00,800 --> 00:10:03,540
user programs so we're not actually

182
00:10:03,540 --> 00:10:08,339
limited to those for 64k of ram but you

183
00:10:08,339 --> 00:10:10,680
could call some Sim stem function and

184
00:10:10,680 --> 00:10:13,740
reserve some part of that Ram disk for

185
00:10:13,740 --> 00:10:17,519
yourself and use it as any way you want

186
00:10:17,519 --> 00:10:21,480
but you needed to be aware of the memory

187
00:10:21,480 --> 00:10:23,820
management unit I need you needed to

188
00:10:23,820 --> 00:10:25,459
handle it yourself

189
00:10:25,459 --> 00:10:28,740
the CPM operating system that was run on

190
00:10:28,740 --> 00:10:33,420
it was actually the cpr3 which is uh

191
00:10:33,420 --> 00:10:38,279
let's say enhancement of the CPM 2.2 the

192
00:10:38,279 --> 00:10:40,740
whole operating system was back then in

193
00:10:40,740 --> 00:10:43,440
public domain meaning more or less open

194
00:10:43,440 --> 00:10:44,579
source

195
00:10:44,579 --> 00:10:48,420
and it was highly comparable so it was

196
00:10:48,420 --> 00:10:51,120
adjusted for the hardware that this

197
00:10:51,120 --> 00:10:53,720
machine had

198
00:10:53,820 --> 00:10:57,120
uh the authors of the machine made the

199
00:10:57,120 --> 00:11:00,560
program that actually emulates terminal

200
00:11:00,560 --> 00:11:05,640
they called it emu and that program also

201
00:11:05,640 --> 00:11:08,940
draws the characters on the screen so uh

202
00:11:08,940 --> 00:11:11,399
it inside it's it is the software

203
00:11:11,399 --> 00:11:13,680
implementation of that character screen

204
00:11:13,680 --> 00:11:15,360
Marco mentioned

205
00:11:15,360 --> 00:11:19,980
characters are initially English Latin

206
00:11:19,980 --> 00:11:21,839
but you could switch the characters to

207
00:11:21,839 --> 00:11:24,180
the Cyrillic and then all the output

208
00:11:24,180 --> 00:11:26,060
would be in Cyrillic

209
00:11:26,060 --> 00:11:30,360
for that you had two programs that

210
00:11:30,360 --> 00:11:33,000
actually just rewrote the parts of the

211
00:11:33,000 --> 00:11:37,260
ram that program emu was using the part

212
00:11:37,260 --> 00:11:40,019
where definitions for the characters

213
00:11:40,019 --> 00:11:41,779
were

214
00:11:41,779 --> 00:11:44,459
you also had the possibility to

215
00:11:44,459 --> 00:11:47,100
configure what will be run at boot time

216
00:11:47,100 --> 00:11:49,440
so you could make some programs to run

217
00:11:49,440 --> 00:11:53,779
automatically as the machine starts

218
00:11:54,260 --> 00:11:57,240
uh since the machine was intended for

219
00:11:57,240 --> 00:11:58,579
school use

220
00:11:58,579 --> 00:12:01,620
there were some comparison interpreters

221
00:12:01,620 --> 00:12:05,279
available mostly G basic

222
00:12:05,279 --> 00:12:09,300
uh that was standard G basic used at

223
00:12:09,300 --> 00:12:12,959
time for CPM but which added codes to

224
00:12:12,959 --> 00:12:17,160
handle teams video capabilities there

225
00:12:17,160 --> 00:12:20,100
was also turbo Pascal 2.0

226
00:12:20,100 --> 00:12:23,040
treated in the same way so they wrote a

227
00:12:23,040 --> 00:12:26,640
library that could be used in from

228
00:12:26,640 --> 00:12:28,740
inside turbo pascals so you could write

229
00:12:28,740 --> 00:12:31,680
graphical programs the problem was that

230
00:12:31,680 --> 00:12:34,440
you could actually use that Library only

231
00:12:34,440 --> 00:12:36,800
if you run the program from the

232
00:12:36,800 --> 00:12:41,000
duropascals IDE itself

233
00:12:43,940 --> 00:12:47,399
there was also

234
00:12:47,399 --> 00:12:50,100
assembler evolved so you could write

235
00:12:50,100 --> 00:12:53,899
programs in set 80 assembly

236
00:12:53,899 --> 00:12:57,320
since it was running the CPM

237
00:12:57,320 --> 00:13:00,540
many more programming languages were

238
00:13:00,540 --> 00:13:03,139
available but unfortunately

239
00:13:03,139 --> 00:13:06,899
the graphics support was written only 4G

240
00:13:06,899 --> 00:13:10,920
basic and that turbo pascals so most of

241
00:13:10,920 --> 00:13:13,560
the other software was

242
00:13:13,560 --> 00:13:17,599
not that usable on the machine

243
00:13:20,160 --> 00:13:22,760
foreign

244
00:13:23,300 --> 00:13:27,480
so uh that is the short history about

245
00:13:27,480 --> 00:13:32,240
what happened uh in the past

246
00:13:33,180 --> 00:13:36,480
so up until two years ago there was uh

247
00:13:36,480 --> 00:13:39,779
no emulator for these machines meaning

248
00:13:39,779 --> 00:13:43,260
that anyone who wanted to try out even

249
00:13:43,260 --> 00:13:46,139
that one floppy that remained could do

250
00:13:46,139 --> 00:13:49,560
it only if it he had or she had the

251
00:13:49,560 --> 00:13:52,320
hardware itself so if he had the machine

252
00:13:52,320 --> 00:13:55,440
itself to run the software on it

253
00:13:55,440 --> 00:13:56,940
uh

254
00:13:56,940 --> 00:14:00,300
milk drug milanovic I don't know if he's

255
00:14:00,300 --> 00:14:02,160
here right now

256
00:14:02,160 --> 00:14:06,779
actually wrote emulator from Team 14 a

257
00:14:06,779 --> 00:14:12,260
long time ago inside the Mame but that

258
00:14:12,260 --> 00:14:17,339
emulation lacked the set 180 specifics

259
00:14:17,339 --> 00:14:21,899
so the emulation of set 180 wasn't quite

260
00:14:21,899 --> 00:14:25,620
finished mostly it missed it was missing

261
00:14:25,620 --> 00:14:28,500
the mmu and dma parts

262
00:14:28,500 --> 00:14:31,380
and that remained like that for a long

263
00:14:31,380 --> 00:14:33,420
time so that was actually the main

264
00:14:33,420 --> 00:14:38,279
reason why the emulator wasn't available

265
00:14:38,420 --> 00:14:42,480
uh all of that of course means that even

266
00:14:42,480 --> 00:14:45,480
those who want to Tinker something with

267
00:14:45,480 --> 00:14:49,860
that software could either hex analyze a

268
00:14:49,860 --> 00:14:52,560
floppy image or find someone who

269
00:14:52,560 --> 00:14:54,660
actually has the machine and to try

270
00:14:54,660 --> 00:14:57,199
something out

271
00:14:57,199 --> 00:14:59,459
in the reviews that were in the

272
00:14:59,459 --> 00:15:03,199
magazines at the time the viewers

273
00:15:03,199 --> 00:15:05,639
mentioned that they got with the machine

274
00:15:05,639 --> 00:15:06,920
they got

275
00:15:06,920 --> 00:15:09,899
operating system sources so they could

276
00:15:09,899 --> 00:15:12,180
adjust some settings for the machine and

277
00:15:12,180 --> 00:15:16,040
recompiled operating system itself

278
00:15:16,040 --> 00:15:19,380
the problem is that all those disks were

279
00:15:19,380 --> 00:15:23,040
also lost I mean we have the operating

280
00:15:23,040 --> 00:15:26,220
system the main version but we do not

281
00:15:26,220 --> 00:15:28,500
have configuration files that were used

282
00:15:28,500 --> 00:15:32,100
for the team and we do not have source

283
00:15:32,100 --> 00:15:34,440
for the custom software that was written

284
00:15:34,440 --> 00:15:40,260
so it is kind of hard to to go back and

285
00:15:40,260 --> 00:15:41,600
try to

286
00:15:41,600 --> 00:15:45,480
recompile the system at the moment

287
00:15:45,480 --> 00:15:47,720
uh

288
00:15:47,720 --> 00:15:51,199
as I said from time to time someone

289
00:15:51,199 --> 00:15:54,360
posts on some Forum hey I found my

290
00:15:54,360 --> 00:15:57,180
software from from Team from my high

291
00:15:57,180 --> 00:15:59,699
school days here is the photograph of

292
00:15:59,699 --> 00:16:02,880
the source that I printed out and those

293
00:16:02,880 --> 00:16:06,779
are mostly basic or Pascal programs but

294
00:16:06,779 --> 00:16:11,399
anything more serious is lost we know

295
00:16:11,399 --> 00:16:14,459
from those magazine articles that there

296
00:16:14,459 --> 00:16:16,920
were games developed for the machine we

297
00:16:16,920 --> 00:16:18,240
know that there were some educational

298
00:16:18,240 --> 00:16:21,959
software available but as I said nothing

299
00:16:21,959 --> 00:16:24,120
of that is

300
00:16:24,120 --> 00:16:27,620
preserved and

301
00:16:27,620 --> 00:16:29,180
making

302
00:16:29,180 --> 00:16:32,940
any development for the machine is very

303
00:16:32,940 --> 00:16:36,300
very hard if you do not have all of this

304
00:16:36,300 --> 00:16:39,899
things during

305
00:16:41,279 --> 00:16:45,500
period from 2013 to 2018

306
00:16:45,500 --> 00:16:49,500
various people on some retro Forum from

307
00:16:49,500 --> 00:16:52,339
Serbia benchmark.rs

308
00:16:52,339 --> 00:16:55,139
try to document the hardware of the

309
00:16:55,139 --> 00:16:57,959
machine mostly a few of the guys that

310
00:16:57,959 --> 00:17:01,019
actually had the machine and uh

311
00:17:01,019 --> 00:17:05,419
were able to analyze what's inside

312
00:17:05,419 --> 00:17:08,220
they actually made some modifications to

313
00:17:08,220 --> 00:17:11,339
the hardware uh mostly based for the

314
00:17:11,339 --> 00:17:14,339
machines that were made from kits and

315
00:17:14,339 --> 00:17:16,919
they reverse engineered the motherboard

316
00:17:16,919 --> 00:17:19,679
and some of them made their own replicas

317
00:17:19,679 --> 00:17:21,419
of the computer

318
00:17:21,419 --> 00:17:22,740
uh

319
00:17:22,740 --> 00:17:26,699
also another serial interface was

320
00:17:26,699 --> 00:17:29,540
introduced so you could use the

321
00:17:29,540 --> 00:17:33,500
more easily findable

322
00:17:33,780 --> 00:17:36,419
XT keyboards for it so you could

323
00:17:36,419 --> 00:17:39,000
actually if you make a replica of the

324
00:17:39,000 --> 00:17:41,280
computer you could use a keyboard that

325
00:17:41,280 --> 00:17:45,179
you can find and interface with it

326
00:17:45,179 --> 00:17:46,260
uh

327
00:17:46,260 --> 00:17:48,539
uh so not not much of the development

328
00:17:48,539 --> 00:17:53,000
happened until 2019

329
00:17:53,000 --> 00:17:57,179
that year that one image that we have of

330
00:17:57,179 --> 00:17:58,980
the floppy

331
00:17:58,980 --> 00:18:02,280
was its configuration was made for the

332
00:18:02,280 --> 00:18:04,820
CPM tools Library

333
00:18:04,820 --> 00:18:08,160
CPM tools is a library that allows you

334
00:18:08,160 --> 00:18:11,760
to read and write files from and to

335
00:18:11,760 --> 00:18:14,480
various CPM images

336
00:18:14,480 --> 00:18:18,600
when I say various images

337
00:18:18,600 --> 00:18:22,620
the thing with computers that use CPM is

338
00:18:22,620 --> 00:18:26,520
that almost every computer had its own

339
00:18:26,520 --> 00:18:29,880
way of writing floppy disks so it was

340
00:18:29,880 --> 00:18:33,000
mostly similar but not the same some had

341
00:18:33,000 --> 00:18:38,280
different uh layout of the floppy some

342
00:18:38,280 --> 00:18:40,559
had some data at the beginning some had

343
00:18:40,559 --> 00:18:42,840
it at the end and so on so they were

344
00:18:42,840 --> 00:18:47,100
mostly uh incompatible between them that

345
00:18:47,100 --> 00:18:51,720
CPM tools library was made to actually

346
00:18:51,720 --> 00:18:55,500
uh solve that problem by making every

347
00:18:55,500 --> 00:18:58,280
floppy configurable so you have a

348
00:18:58,280 --> 00:19:01,200
configuration for every format of the

349
00:19:01,200 --> 00:19:04,260
CPM where you can say this thing is here

350
00:19:04,260 --> 00:19:06,539
this thing is here I don't know

351
00:19:06,539 --> 00:19:10,200
directories over there and so on so a

352
00:19:10,200 --> 00:19:12,780
file like that was made for themes

353
00:19:12,780 --> 00:19:17,039
format and we were finally been able to

354
00:19:17,039 --> 00:19:21,620
copy to make new images of the floppies

355
00:19:21,620 --> 00:19:24,299
transfer them to the real floppy and run

356
00:19:24,299 --> 00:19:28,080
on the team itself so we could start to

357
00:19:28,080 --> 00:19:31,020
experiment with its software and trying

358
00:19:31,020 --> 00:19:33,860
to change things

359
00:19:33,860 --> 00:19:39,299
uh also to ease the process batch script

360
00:19:39,299 --> 00:19:42,840
was made to easily put files onto a

361
00:19:42,840 --> 00:19:46,879
image and extract them back

362
00:19:49,220 --> 00:19:54,480
next thing that was done uh Marco and I

363
00:19:54,480 --> 00:19:57,480
let's say rediscovered the video

364
00:19:57,480 --> 00:20:00,320
organization of the team's memory

365
00:20:00,320 --> 00:20:04,500
as he said the memory is located in the

366
00:20:04,500 --> 00:20:07,500
iospace of the set 80 processor

367
00:20:07,500 --> 00:20:10,260
that one of the differences between that

368
00:20:10,260 --> 00:20:13,740
Hitachi and real set 80 is that Hitachi

369
00:20:13,740 --> 00:20:19,460
has 60k of input output space 64k sorry

370
00:20:19,460 --> 00:20:23,039
so the upper part of 32k is actually

371
00:20:23,039 --> 00:20:25,220
used for video outputs

372
00:20:25,220 --> 00:20:29,280
the memory is organized in a relatively

373
00:20:29,280 --> 00:20:31,919
weird way

374
00:20:31,919 --> 00:20:33,860
so

375
00:20:33,860 --> 00:20:37,980
you have here a table that gives you

376
00:20:37,980 --> 00:20:40,799
locations from 8

377
00:20:40,799 --> 00:20:44,100
000 hacks until the end of the

378
00:20:44,100 --> 00:20:45,740
addressable memory

379
00:20:45,740 --> 00:20:49,260
and the video memory or is organized by

380
00:20:49,260 --> 00:20:52,380
columns of four pixels so

381
00:20:52,380 --> 00:20:56,700
a location 8000 has a

382
00:20:56,700 --> 00:21:00,419
pixels from zero zero to three zero so

383
00:21:00,419 --> 00:21:03,960
uh first is the X second is the y

384
00:21:03,960 --> 00:21:05,160
coordinate

385
00:21:05,160 --> 00:21:10,620
uh over here is how the each pixel is

386
00:21:10,620 --> 00:21:13,260
represented with two bits so the lowest

387
00:21:13,260 --> 00:21:18,360
two bits represent the pixel at X zero

388
00:21:18,360 --> 00:21:25,039
the next two bits uh with X1 X2 and X3

389
00:21:25,039 --> 00:21:29,460
next location holds the uh next four

390
00:21:29,460 --> 00:21:33,140
bits in the column so practically until

391
00:21:33,140 --> 00:21:37,320
eight zero FF you have uh First Column

392
00:21:37,320 --> 00:21:40,500
of four pixels for the video memory then

393
00:21:40,500 --> 00:21:43,559
at this address start second column of

394
00:21:43,559 --> 00:21:46,940
four pixels and so on

395
00:21:46,940 --> 00:21:50,120
I haven't seen the video organization

396
00:21:50,120 --> 00:21:52,679
like this before

397
00:21:52,679 --> 00:21:57,299
so it was uh kind of unusual but one

398
00:21:57,299 --> 00:22:01,200
thing that is let's say uh interesting

399
00:22:01,200 --> 00:22:04,039
is that because of this organization

400
00:22:04,039 --> 00:22:07,080
calculating the address if you have X

401
00:22:07,080 --> 00:22:09,740
and Y coordinates It's relatively simple

402
00:22:09,740 --> 00:22:13,799
all you need to do is to divide the x

403
00:22:13,799 --> 00:22:15,480
coordinate by four

404
00:22:15,480 --> 00:22:18,919
uh multiplied by 206

405
00:22:18,919 --> 00:22:22,679
256 then you add Y coordinates that

406
00:22:22,679 --> 00:22:26,100
actually I mean you add Y coordinates to

407
00:22:26,100 --> 00:22:28,980
the upper part of the address that

408
00:22:28,980 --> 00:22:32,280
automatically gives you the row you need

409
00:22:32,280 --> 00:22:35,400
to address and then you make a mask to

410
00:22:35,400 --> 00:22:38,340
actually address switch pixels you want

411
00:22:38,340 --> 00:22:42,600
so it is a strange organization but as I

412
00:22:42,600 --> 00:22:45,360
said calculating the address in bits is

413
00:22:45,360 --> 00:22:47,940
relatively simple when you know how to

414
00:22:47,940 --> 00:22:50,900
go to there

415
00:22:53,940 --> 00:22:56,100
as I mentioned the

416
00:22:56,100 --> 00:22:59,520
team on its system disk had two programs

417
00:22:59,520 --> 00:23:02,400
one to set Latin font and one to set

418
00:23:02,400 --> 00:23:04,020
Cyrillic font

419
00:23:04,020 --> 00:23:08,520
uh in 2021 we analyzed the font

420
00:23:08,520 --> 00:23:12,919
structure that was mostly Marcus part

421
00:23:12,919 --> 00:23:17,039
and he found where in that executable

422
00:23:17,039 --> 00:23:20,159
file the font definition is and we found

423
00:23:20,159 --> 00:23:24,480
the how that six by eight characters

424
00:23:24,480 --> 00:23:27,240
were actually defined then using that

425
00:23:27,240 --> 00:23:29,700
information I made a program that can

426
00:23:29,700 --> 00:23:34,100
convert that data into a bitmap and back

427
00:23:34,100 --> 00:23:37,559
so we could actually make our own fonts

428
00:23:37,559 --> 00:23:40,100
for the machine

429
00:23:40,280 --> 00:23:45,120
uh next thing uh we actually didn't have

430
00:23:45,120 --> 00:23:47,220
anything to work with because there was

431
00:23:47,220 --> 00:23:52,140
no emulator I found uh one open source

432
00:23:52,140 --> 00:23:55,440
emulator for the CPM called the nccpm

433
00:23:55,440 --> 00:24:00,360
emulator and uh its source code was uh

434
00:24:00,360 --> 00:24:03,960
very well written and I came to the idea

435
00:24:03,960 --> 00:24:06,960
to somehow hack the team's video

436
00:24:06,960 --> 00:24:09,360
organization into it

437
00:24:09,360 --> 00:24:14,700
so the end result of I think two days

438
00:24:14,700 --> 00:24:19,140
trying out various stuff was that if I

439
00:24:19,140 --> 00:24:21,539
start that emulator it could open the

440
00:24:21,539 --> 00:24:24,780
X11 window and inside that window the

441
00:24:24,780 --> 00:24:28,740
graphics would be displayed actually

442
00:24:28,740 --> 00:24:32,159
what I did was just to intercept reads

443
00:24:32,159 --> 00:24:34,799
and writes to the iospace inside the

444
00:24:34,799 --> 00:24:38,700
emulator and interpret those rights as

445
00:24:38,700 --> 00:24:41,159
right to a buffer and then I display the

446
00:24:41,159 --> 00:24:45,059
buffer inside separate windows so that

447
00:24:45,059 --> 00:24:50,000
allowed me at least to try out

448
00:24:50,000 --> 00:24:53,880
addressing the pixels on the team itself

449
00:24:53,880 --> 00:24:59,280
so uh that was not a real emulator uh

450
00:24:59,280 --> 00:25:02,159
the original nccpm emulator actually

451
00:25:02,159 --> 00:25:05,760
emulates just the processor and the

452
00:25:05,760 --> 00:25:08,700
operating system and it runs at the

453
00:25:08,700 --> 00:25:12,179
speed that your host machine runs so it

454
00:25:12,179 --> 00:25:15,240
runs very very fast compar comparing to

455
00:25:15,240 --> 00:25:17,820
the actual machines at the time so I had

456
00:25:17,820 --> 00:25:21,440
to put some empirically

457
00:25:21,440 --> 00:25:24,840
decided poses inside the drawing itself

458
00:25:24,840 --> 00:25:28,679
to get something like drawing speeds of

459
00:25:28,679 --> 00:25:32,159
the real team but as I said only the

460
00:25:32,159 --> 00:25:34,500
screen was emulated and it's not the the

461
00:25:34,500 --> 00:25:36,980
real emulator

462
00:25:36,980 --> 00:25:41,520
next we found out Mike's enhanced small

463
00:25:41,520 --> 00:25:44,520
C compiler that is actually a c compiler

464
00:25:44,520 --> 00:25:46,799
for the CPM operating system

465
00:25:46,799 --> 00:25:50,220
and we find out that using this compiler

466
00:25:50,220 --> 00:25:52,440
we could compile C programs that could

467
00:25:52,440 --> 00:25:56,179
actually run on the real team

468
00:25:57,260 --> 00:26:01,440
how is compiled used well you run nccpm

469
00:26:01,440 --> 00:26:04,200
emulator inside the emulator you run the

470
00:26:04,200 --> 00:26:08,760
compiler and get the binary files out so

471
00:26:08,760 --> 00:26:11,760
because the original emulator is

472
00:26:11,760 --> 00:26:14,039
actually uh

473
00:26:14,039 --> 00:26:17,340
CLI program from common prompt so

474
00:26:17,340 --> 00:26:19,799
everything could be written into scripts

475
00:26:19,799 --> 00:26:22,559
and automated so you could write some

476
00:26:22,559 --> 00:26:24,320
make like

477
00:26:24,320 --> 00:26:28,320
file to actually compile the source code

478
00:26:28,320 --> 00:26:31,440
into binary file assemble it into floppy

479
00:26:31,440 --> 00:26:34,440
image transfer that image to the

480
00:26:34,440 --> 00:26:37,740
emulator and try it out

481
00:26:37,740 --> 00:26:38,880
uh

482
00:26:38,880 --> 00:26:43,640
since we got that video emulation

483
00:26:43,640 --> 00:26:47,100
working then I was able to actually

484
00:26:47,100 --> 00:26:50,400
start to try out some graphical routines

485
00:26:50,400 --> 00:26:52,580
for it

486
00:26:52,580 --> 00:26:55,440
first thing that one of the first things

487
00:26:55,440 --> 00:26:59,700
I did was trying to display some tiles

488
00:26:59,700 --> 00:27:02,700
on its screen and made the script that

489
00:27:02,700 --> 00:27:06,440
could convert PNG images into

490
00:27:06,440 --> 00:27:09,600
array data that was included into C

491
00:27:09,600 --> 00:27:12,900
programs and used to directly write that

492
00:27:12,900 --> 00:27:15,179
data into video memory

493
00:27:15,179 --> 00:27:19,020
so I was actually after some

494
00:27:19,020 --> 00:27:24,659
experimentation able to draw various

495
00:27:24,659 --> 00:27:28,080
characters from games that I found

496
00:27:28,080 --> 00:27:31,740
online and were able to for example draw

497
00:27:31,740 --> 00:27:36,320
Pac-Man and dizzy and so on

498
00:27:36,559 --> 00:27:40,860
next thing was trying out to plot lines

499
00:27:40,860 --> 00:27:45,320
pixels individual pixels and lines

500
00:27:45,320 --> 00:27:48,240
that compiler that I mentioned had

501
00:27:48,240 --> 00:27:50,820
already implemented the graphic library

502
00:27:50,820 --> 00:27:52,820
for another

503
00:27:52,820 --> 00:27:56,340
computer CPM computer made by amstrad

504
00:27:56,340 --> 00:28:01,679
amstrad PCB and it had graphical library

505
00:28:01,679 --> 00:28:04,640
that could that could drive lines

506
00:28:04,640 --> 00:28:09,120
I tried that Library written in C uh

507
00:28:09,120 --> 00:28:12,539
compiled it to team and actually got the

508
00:28:12,539 --> 00:28:15,840
lines drawn but the problem was that it

509
00:28:15,840 --> 00:28:19,340
was very very slow

510
00:28:19,559 --> 00:28:23,760
then I decided to do something that I

511
00:28:23,760 --> 00:28:26,520
really didn't want to do and that is to

512
00:28:26,520 --> 00:28:29,520
try to write that pixel and line drawing

513
00:28:29,520 --> 00:28:32,840
routines in the set 80 assembly

514
00:28:32,840 --> 00:28:37,080
I'm from the Commodore 64 background and

515
00:28:37,080 --> 00:28:40,279
used a lot of

516
00:28:40,279 --> 00:28:44,039
6502 assembly and I still write it today

517
00:28:44,039 --> 00:28:49,559
as something fun that I like to do and I

518
00:28:49,559 --> 00:28:51,659
never actually wrote any it's at 80

519
00:28:51,659 --> 00:28:55,020
assembly Norm I don't think I ever seen

520
00:28:55,020 --> 00:28:56,100
one

521
00:28:56,100 --> 00:29:00,120
so I found some online sources and

522
00:29:00,120 --> 00:29:03,179
started to learn it and started to

523
00:29:03,179 --> 00:29:07,440
program that routines and I must say it

524
00:29:07,440 --> 00:29:10,620
was a relatively painful experience for

525
00:29:10,620 --> 00:29:12,020
me

526
00:29:12,020 --> 00:29:15,059
let's say I don't do not like titanity

527
00:29:15,059 --> 00:29:19,760
assembly that much but I managed to make

528
00:29:19,760 --> 00:29:24,120
a code that is I don't know

529
00:29:24,120 --> 00:29:26,580
four or five times faster than what was

530
00:29:26,580 --> 00:29:31,919
written from compiled C and I I was very

531
00:29:31,919 --> 00:29:34,100
satisfied with that

532
00:29:34,100 --> 00:29:37,140
there were things that were initially

533
00:29:37,140 --> 00:29:40,399
made for drawing those

534
00:29:40,399 --> 00:29:43,980
tiles I also made this assembly I get I

535
00:29:43,980 --> 00:29:46,919
got a pretty good speed out of them too

536
00:29:46,919 --> 00:29:51,720
so uh although writing to our space with

537
00:29:51,720 --> 00:29:54,500
set 80 isn't very fast

538
00:29:54,500 --> 00:29:57,539
using the these methods we were able to

539
00:29:57,539 --> 00:29:59,760
actually make some animations on the

540
00:29:59,760 --> 00:30:03,419
team screens so there was I mean it was

541
00:30:03,419 --> 00:30:05,520
fast enough

542
00:30:05,520 --> 00:30:08,159
um I actually tried to

543
00:30:08,159 --> 00:30:11,580
engage some of the spectrum people that

544
00:30:11,580 --> 00:30:15,539
programmed satiety much more than me to

545
00:30:15,539 --> 00:30:18,360
try to optimize the code but so far

546
00:30:18,360 --> 00:30:21,980
there was no interest in that so

547
00:30:21,980 --> 00:30:25,140
that's my self-taught set they decode

548
00:30:25,140 --> 00:30:26,240
this

549
00:30:26,240 --> 00:30:29,700
currently the faster there is and I'm

550
00:30:29,700 --> 00:30:31,500
really not a really good set 80

551
00:30:31,500 --> 00:30:34,159
programmer

552
00:30:35,059 --> 00:30:37,700
uh next thing

553
00:30:37,700 --> 00:30:42,299
as I said Team uses six by eight pixel

554
00:30:42,299 --> 00:30:45,240
fonts to display its uh

555
00:30:45,240 --> 00:30:47,120
characters

556
00:30:47,120 --> 00:30:50,100
since the organization of video memory

557
00:30:50,100 --> 00:30:53,299
is that we have four pixels in a row

558
00:30:53,299 --> 00:30:56,460
printing uh characters that are six

559
00:30:56,460 --> 00:30:59,760
pixel wide then includes a lot of

560
00:30:59,760 --> 00:31:03,720
Shifting if you are trying to write some

561
00:31:03,720 --> 00:31:07,080
parts of those characters into columns

562
00:31:07,080 --> 00:31:08,880
so uh

563
00:31:08,880 --> 00:31:11,480
in summary uh

564
00:31:11,480 --> 00:31:15,059
drawing the characters on the screen was

565
00:31:15,059 --> 00:31:16,200
uh

566
00:31:16,200 --> 00:31:18,059
let's say slow

567
00:31:18,059 --> 00:31:21,960
so I came to the idea to skip that

568
00:31:21,960 --> 00:31:25,140
shifting part and to use the eight by

569
00:31:25,140 --> 00:31:28,500
eight characters so I will skip the

570
00:31:28,500 --> 00:31:32,279
shifting and it turned out that uh of

571
00:31:32,279 --> 00:31:34,980
course writing characters that way was

572
00:31:34,980 --> 00:31:37,740
much much faster so that became team

573
00:31:37,740 --> 00:31:42,179
print library that operates uh with

574
00:31:42,179 --> 00:31:45,539
strings in similar fashion that uh

575
00:31:45,539 --> 00:31:49,500
original retains to but uses this 8x8

576
00:31:49,500 --> 00:31:54,480
pixels and 8x8 fonts and drawing is

577
00:31:54,480 --> 00:31:56,940
really really fast

578
00:31:56,940 --> 00:31:59,220
uh

579
00:31:59,220 --> 00:32:02,159
in a routine I also added someone asked

580
00:32:02,159 --> 00:32:05,880
me if I could write characters inversed

581
00:32:05,880 --> 00:32:09,120
so I say okay let's try and it was

582
00:32:09,120 --> 00:32:12,720
relatively easy to implement so you

583
00:32:12,720 --> 00:32:16,640
could do a lot of this that stuff too

584
00:32:16,940 --> 00:32:20,279
additionally because we found the

585
00:32:20,279 --> 00:32:23,279
archive online that has many City

586
00:32:23,279 --> 00:32:26,760
Spectrum fonts in PNG formats I also

587
00:32:26,760 --> 00:32:30,240
made a program that converts those pngs

588
00:32:30,240 --> 00:32:32,460
into fonts that could be used with these

589
00:32:32,460 --> 00:32:36,960
libraries so practically we had a ton of

590
00:32:36,960 --> 00:32:38,580
fonts available

591
00:32:38,580 --> 00:32:41,899
from that moment on

592
00:32:42,419 --> 00:32:44,720
and then in

593
00:32:44,720 --> 00:32:48,539
2022 Mildred Milano which finally came

594
00:32:48,539 --> 00:32:50,779
around to finish set

595
00:32:50,779 --> 00:32:54,059
180 implementation inside the mama

596
00:32:54,059 --> 00:32:58,679
emulator and he first tried one other

597
00:32:58,679 --> 00:33:01,440
computer that used that processor and

598
00:33:01,440 --> 00:33:04,380
that emulation started to work and then

599
00:33:04,380 --> 00:33:08,279
he actually finished the uh

600
00:33:08,279 --> 00:33:11,700
teams emulation and

601
00:33:11,700 --> 00:33:14,460
that was middle

602
00:33:14,460 --> 00:33:18,899
of this year and we finally had the way

603
00:33:18,899 --> 00:33:19,760
to

604
00:33:19,760 --> 00:33:21,380
actually

605
00:33:21,380 --> 00:33:24,240
compile something and run on the

606
00:33:24,240 --> 00:33:26,760
emulator and see how it works

607
00:33:26,760 --> 00:33:30,980
so some experiments were made

608
00:33:30,980 --> 00:33:34,679
I actually finally find out that my

609
00:33:34,679 --> 00:33:37,559
simple implementation of I mean it's not

610
00:33:37,559 --> 00:33:39,659
full implementation just moving of the

611
00:33:39,659 --> 00:33:40,679
Sprites

612
00:33:40,679 --> 00:33:43,740
for the Space Invaders were quite quite

613
00:33:43,740 --> 00:33:46,320
fast on the team and uh

614
00:33:46,320 --> 00:33:48,840
I was really really concerned about the

615
00:33:48,840 --> 00:33:51,019
speed

616
00:33:51,179 --> 00:33:54,659
also Marco made another game he will

617
00:33:54,659 --> 00:33:58,460
talk about it okay not uh adapted a game

618
00:33:58,460 --> 00:34:04,159
and that game ran pretty well too

619
00:34:04,320 --> 00:34:08,699
but before we continue to that part we

620
00:34:08,699 --> 00:34:12,119
are going to go back go back a few years

621
00:34:12,119 --> 00:34:15,179
to 2016.

622
00:34:15,179 --> 00:34:18,119
uh Mark was trying to find out about

623
00:34:18,119 --> 00:34:21,418
some internals of the files on that

624
00:34:21,418 --> 00:34:25,440
system disk and inside some that system

625
00:34:25,440 --> 00:34:31,040
mdl file he found mentions of

626
00:34:31,040 --> 00:34:33,379
micromint SB

627
00:34:33,379 --> 00:34:36,239
180 single board computer

628
00:34:36,239 --> 00:34:40,199
so we try to find out what is that micro

629
00:34:40,199 --> 00:34:44,099
bit SB 180 in what it is doing inside

630
00:34:44,099 --> 00:34:49,460
the team's system files

631
00:34:49,500 --> 00:34:53,580
it turned out that sb180 is an open

632
00:34:53,580 --> 00:34:57,440
source CPM computer that was based on

633
00:34:57,440 --> 00:34:59,839
hitachi's HD

634
00:34:59,839 --> 00:35:04,700
64180 processor that used 20

635
00:35:04,700 --> 00:35:09,480
256 K of ram that used 9266 fabric

636
00:35:09,480 --> 00:35:12,720
controller that you had serial parallel

637
00:35:12,720 --> 00:35:17,940
port and the zc pr3 OS was used and used

638
00:35:17,940 --> 00:35:19,980
its serial connection to communicate

639
00:35:19,980 --> 00:35:21,740
with the keyboard

640
00:35:21,740 --> 00:35:26,040
so that was quite quite similar to what

641
00:35:26,040 --> 00:35:27,480
team does

642
00:35:27,480 --> 00:35:30,300
also all the plans for that computer

643
00:35:30,300 --> 00:35:34,280
were printed in a byte from September

644
00:35:34,280 --> 00:35:38,220
1985 meaning all the hardware details

645
00:35:38,220 --> 00:35:42,079
all the software was available

646
00:35:42,079 --> 00:35:45,420
that back then was called public domain

647
00:35:45,420 --> 00:35:48,300
today we would call it open source or

648
00:35:48,300 --> 00:35:50,900
open Hardware

649
00:35:53,040 --> 00:35:54,420
we find

650
00:35:54,420 --> 00:35:57,420
uh I think you'll find out yeah inside

651
00:35:57,420 --> 00:36:01,320
one adverts from 1985 in our magazine

652
00:36:01,320 --> 00:36:05,339
there was uh something

653
00:36:05,480 --> 00:36:08,700
made by Institute mihailo Popin the same

654
00:36:08,700 --> 00:36:10,920
Institute that actually produced team

655
00:36:10,920 --> 00:36:11,880
machines

656
00:36:11,880 --> 00:36:14,880
and that was a terminal for IBM deck and

657
00:36:14,880 --> 00:36:17,820
Honeywell mainframes that used serial

658
00:36:17,820 --> 00:36:22,020
keyboards with CDP 1802 processor and

659
00:36:22,020 --> 00:36:23,660
had Graphics

660
00:36:23,660 --> 00:36:30,180
512 by 256 pixels or 80 by 24 characters

661
00:36:30,180 --> 00:36:32,880
and if you looked at the picture of that

662
00:36:32,880 --> 00:36:36,060
machine it looks very very similar to

663
00:36:36,060 --> 00:36:39,078
this theme Here

664
00:36:39,980 --> 00:36:43,560
Marco then analyze electric schemes of

665
00:36:43,560 --> 00:36:47,099
team and sb180 and it turned out that

666
00:36:47,099 --> 00:36:48,599
they are

667
00:36:48,599 --> 00:36:53,900
let's say not identical but probably 95

668
00:36:53,900 --> 00:36:57,780
98 identical

669
00:36:57,780 --> 00:37:01,680
so we started to ask ourselves what is

670
00:37:01,680 --> 00:37:05,700
exactly that team 011 computer that was

671
00:37:05,700 --> 00:37:09,000
glorified in our magazines at a time as

672
00:37:09,000 --> 00:37:10,880
a pinnacle of

673
00:37:10,880 --> 00:37:14,880
domestic engineering and programming and

674
00:37:14,880 --> 00:37:18,079
and so on and so on

675
00:37:19,040 --> 00:37:22,980
uh any connection between team and that

676
00:37:22,980 --> 00:37:26,160
project from bite magazine was as we

677
00:37:26,160 --> 00:37:29,820
know of mentioned only once in a

678
00:37:29,820 --> 00:37:32,520
magazine in our magazine as a side note

679
00:37:32,520 --> 00:37:35,160
in an article about some other computer

680
00:37:35,160 --> 00:37:37,260
so

681
00:37:37,260 --> 00:37:38,160
um

682
00:37:38,160 --> 00:37:41,760
actually no one at the time wanted to

683
00:37:41,760 --> 00:37:44,700
mention that computer is actually based

684
00:37:44,700 --> 00:37:46,500
on Open Source Hardware that was

685
00:37:46,500 --> 00:37:49,520
published two years earlier

686
00:37:49,520 --> 00:37:53,339
generally I am I like open source all of

687
00:37:53,339 --> 00:37:56,579
my projects that I do for me are

688
00:37:56,579 --> 00:38:00,960
actually open source and I think using

689
00:38:00,960 --> 00:38:03,300
other people's work that is open source

690
00:38:03,300 --> 00:38:06,180
to learn to adapt and to make new things

691
00:38:06,180 --> 00:38:08,700
is something that is encouraging the

692
00:38:08,700 --> 00:38:10,680
open source Community I mean it is

693
00:38:10,680 --> 00:38:13,859
something I guess maybe many of you

694
00:38:13,859 --> 00:38:15,780
already did or do

695
00:38:15,780 --> 00:38:17,359
but

696
00:38:17,359 --> 00:38:19,980
using someone's work and then

697
00:38:19,980 --> 00:38:22,500
representing as your own and getting

698
00:38:22,500 --> 00:38:24,420
praise for that is something that I

699
00:38:24,420 --> 00:38:28,680
think is really not okay I will just I

700
00:38:28,680 --> 00:38:32,099
would just like to add uh that actually

701
00:38:32,099 --> 00:38:36,839
this is not the only project that was uh

702
00:38:36,839 --> 00:38:39,380
done in a similar fashion

703
00:38:39,380 --> 00:38:42,660
there was also a project from the

704
00:38:42,660 --> 00:38:44,359
magazine muy micro

705
00:38:44,359 --> 00:38:48,480
which was published in Slovenia but also

706
00:38:48,480 --> 00:38:51,780
with server Croatian issue

707
00:38:51,780 --> 00:38:55,160
and they also had a do-it-yourself

708
00:38:55,160 --> 00:38:59,160
computer called muy micro Slovenia

709
00:38:59,160 --> 00:39:02,160
but it turned out that also that

710
00:39:02,160 --> 00:39:04,320
computer was a clone of a different

711
00:39:04,320 --> 00:39:08,359
single board computer called the

712
00:39:08,359 --> 00:39:13,680
if I remember correctly the big board or

713
00:39:13,680 --> 00:39:16,320
something like that you can Google it

714
00:39:16,320 --> 00:39:20,280
and I I looked at the the motherboards

715
00:39:20,280 --> 00:39:22,619
and they are the same and they also

716
00:39:22,619 --> 00:39:25,079
haven't mentioned that their computer

717
00:39:25,079 --> 00:39:28,280
which is also CPM 2.2 machine

718
00:39:28,280 --> 00:39:32,040
also has graphics and so on is a clone

719
00:39:32,040 --> 00:39:34,380
of that computer so

720
00:39:34,380 --> 00:39:39,480
probably that was the case with with uh

721
00:39:39,480 --> 00:39:42,599
with other projects that we maybe don't

722
00:39:42,599 --> 00:39:45,020
know of

723
00:39:46,380 --> 00:39:50,160
okay so if you get all the data that we

724
00:39:50,160 --> 00:39:53,400
gathered what can we say what is Team

725
00:39:53,400 --> 00:39:54,780
011

726
00:39:54,780 --> 00:39:58,560
so we could say that his exact clone of

727
00:39:58,560 --> 00:40:01,800
the SB 180 computer open source project

728
00:40:01,800 --> 00:40:04,920
published two years early earlier

729
00:40:04,920 --> 00:40:07,980
it seems that its Graphics keyboard and

730
00:40:07,980 --> 00:40:11,400
case were taken from The mikhailo pupin

731
00:40:11,400 --> 00:40:13,920
Institute project that was also made two

732
00:40:13,920 --> 00:40:16,140
years earlier

733
00:40:16,140 --> 00:40:19,400
uh its operating system was extended

734
00:40:19,400 --> 00:40:23,640
with some software to allow usage of the

735
00:40:23,640 --> 00:40:27,599
its video output and several libraries

736
00:40:27,599 --> 00:40:31,020
were written for the gbasic kentura

737
00:40:31,020 --> 00:40:33,440
Pascal

738
00:40:33,440 --> 00:40:38,400
and when you look at that then you could

739
00:40:38,400 --> 00:40:41,940
see that maybe it's not that much done

740
00:40:41,940 --> 00:40:43,640
by our people

741
00:40:43,640 --> 00:40:47,119
regarding this computer but

742
00:40:47,119 --> 00:40:51,119
the machine was actually used for I

743
00:40:51,119 --> 00:40:53,400
think at least a period of five six

744
00:40:53,400 --> 00:40:57,300
years in high schools in Belgrade and

745
00:40:57,300 --> 00:40:59,900
other parts of Yugoslavia

746
00:40:59,900 --> 00:41:05,099
and that machine was actually a

747
00:41:05,099 --> 00:41:08,460
something that many of our I.T experts

748
00:41:08,460 --> 00:41:11,579
today started with and it is a school

749
00:41:11,579 --> 00:41:14,940
computer that is regarded by many with

750
00:41:14,940 --> 00:41:18,240
uh with let's say font memories I mean

751
00:41:18,240 --> 00:41:20,460
it is a machine where they learn to

752
00:41:20,460 --> 00:41:23,240
program and

753
00:41:23,240 --> 00:41:26,460
that is something that defined them at

754
00:41:26,460 --> 00:41:28,320
the time and then they became

755
00:41:28,320 --> 00:41:31,260
programmers and I.T professionals that

756
00:41:31,260 --> 00:41:33,800
they are today

757
00:41:34,680 --> 00:41:37,680
uh I will give the words to Marco

758
00:41:37,680 --> 00:41:40,940
regarding some

759
00:41:40,940 --> 00:41:44,280
experimentation with the team Hardware

760
00:41:44,280 --> 00:41:46,820
itself

761
00:41:47,220 --> 00:41:50,400
okay so since we didn't have the

762
00:41:50,400 --> 00:41:52,859
emulator uh

763
00:41:52,859 --> 00:41:56,160
we could only experiment on a real

764
00:41:56,160 --> 00:42:00,060
machine I have actually I got from

765
00:42:00,060 --> 00:42:03,359
charcoal a blank motherboard

766
00:42:03,359 --> 00:42:06,900
and I assembled uh

767
00:42:06,900 --> 00:42:10,260
the computer from scratch

768
00:42:10,260 --> 00:42:14,820
and then I wanted to experiment so I uh

769
00:42:14,820 --> 00:42:18,540
since we knew that SB 180 has the same

770
00:42:18,540 --> 00:42:21,660
hardware and everything is the same I

771
00:42:21,660 --> 00:42:25,380
tried to insert the SB 180 boot ROM into

772
00:42:25,380 --> 00:42:27,839
team 011.

773
00:42:27,839 --> 00:42:34,560
it sort of wanted to work but uh it only

774
00:42:34,560 --> 00:42:38,180
printed out on the serial Port that

775
00:42:38,180 --> 00:42:41,700
the floppy controller is bad and that

776
00:42:41,700 --> 00:42:45,560
was it nothing else oh yeah a few pixels

777
00:42:45,560 --> 00:42:49,578
uh turned on on the screen

778
00:42:49,760 --> 00:42:54,180
then with Team 011 boot ROM I tried it

779
00:42:54,180 --> 00:42:59,960
tried to boot from the SB 180 boot disk

780
00:42:59,960 --> 00:43:03,060
it would work sometimes

781
00:43:03,060 --> 00:43:05,819
I didn't know why

782
00:43:05,819 --> 00:43:09,420
but then I came to the conclusion if I

783
00:43:09,420 --> 00:43:13,020
first booted from Team 011 disk

784
00:43:13,020 --> 00:43:17,940
and then put in a USB 180 disk and reset

785
00:43:17,940 --> 00:43:21,420
the machine it would boot up

786
00:43:21,420 --> 00:43:25,319
if I booted stress turned on turned off

787
00:43:25,319 --> 00:43:27,720
the machine and on again and tried to

788
00:43:27,720 --> 00:43:31,200
boot from SB 180 boot disk it wouldn't

789
00:43:31,200 --> 00:43:32,220
work

790
00:43:32,220 --> 00:43:35,819
I had no clue what happened there

791
00:43:35,819 --> 00:43:38,700
then I tried to analyze the startup

792
00:43:38,700 --> 00:43:43,800
sequence of Team 011's boot disk and I

793
00:43:43,800 --> 00:43:47,099
saw that the first command in the

794
00:43:47,099 --> 00:43:48,720
startup sequence

795
00:43:48,720 --> 00:43:52,500
must be the initialization of the ram

796
00:43:52,500 --> 00:43:53,819
disk

797
00:43:53,819 --> 00:43:55,140
uh

798
00:43:55,140 --> 00:43:58,740
if I don't initialize the ram disk the

799
00:43:58,740 --> 00:44:00,720
machine would crash it would start

800
00:44:00,720 --> 00:44:03,000
looping around somewhere trying to

801
00:44:03,000 --> 00:44:06,780
access the disk but nothing would happen

802
00:44:06,780 --> 00:44:11,700
uh that actually defeated the purpose of

803
00:44:11,700 --> 00:44:13,920
the hard disk because

804
00:44:13,920 --> 00:44:16,680
on each boot you have to initialize it

805
00:44:16,680 --> 00:44:19,400
if you don't initialize it

806
00:44:19,400 --> 00:44:23,819
then you cannot run the machine if you

807
00:44:23,819 --> 00:44:29,480
try to add commands because zcpr3 has

808
00:44:29,480 --> 00:44:32,819
flow commands if you try to add commands

809
00:44:32,819 --> 00:44:36,540
to check if the hard disk if the the ram

810
00:44:36,540 --> 00:44:39,900
disk is initialized or not

811
00:44:39,900 --> 00:44:44,240
uh it would also crash

812
00:44:44,599 --> 00:44:48,560
only if the if the ram disk was

813
00:44:48,560 --> 00:44:51,000
initialized and then the machine reset

814
00:44:51,000 --> 00:44:54,000
then it would not initialize the ram

815
00:44:54,000 --> 00:44:55,619
disk and

816
00:44:55,619 --> 00:44:59,520
so it would perform the check if the the

817
00:44:59,520 --> 00:45:02,460
ram disk is not initialized then

818
00:45:02,460 --> 00:45:04,440
nothing

819
00:45:04,440 --> 00:45:08,220
I tried disassembling the the code for

820
00:45:08,220 --> 00:45:11,160
the

821
00:45:11,160 --> 00:45:14,040
for the ram disk initialization command

822
00:45:14,040 --> 00:45:18,480
but there were issues because online

823
00:45:18,480 --> 00:45:22,560
disassemblers uh cannot handle the hd64

824
00:45:22,560 --> 00:45:24,420
180 op codes

825
00:45:24,420 --> 00:45:26,940
I didn't know what was happening I saw

826
00:45:26,940 --> 00:45:30,300
some trash commands

827
00:45:30,300 --> 00:45:32,880
and then I said okay I will

828
00:45:32,880 --> 00:45:36,960
probably stay away from that until the

829
00:45:36,960 --> 00:45:39,920
emulator works

830
00:45:41,099 --> 00:45:45,420
then we got the emulator and maim has a

831
00:45:45,420 --> 00:45:47,060
very nice

832
00:45:47,060 --> 00:45:51,000
debugging environment where you can step

833
00:45:51,000 --> 00:45:53,160
through the code where you can set

834
00:45:53,160 --> 00:45:55,740
breakpoints where you can see the entire

835
00:45:55,740 --> 00:45:59,520
memory content at one glance

836
00:45:59,520 --> 00:46:02,880
and then I started actually single

837
00:46:02,880 --> 00:46:05,640
stepping from address 0 to

838
00:46:05,640 --> 00:46:10,700
to the the to the successful boot

839
00:46:11,099 --> 00:46:12,359
and

840
00:46:12,359 --> 00:46:14,579
I found a lot

841
00:46:14,579 --> 00:46:18,079
of nasty patches

842
00:46:18,079 --> 00:46:22,940
because SB 180 system and the entire

843
00:46:22,940 --> 00:46:26,540
zcpr3 is available on

844
00:46:26,540 --> 00:46:30,619
archive.org and on a few other

845
00:46:30,619 --> 00:46:33,359
CPM resource sites

846
00:46:33,359 --> 00:46:39,180
I found the source code for the SB 180

847
00:46:39,180 --> 00:46:44,040
boot ROM and then I compared it to to uh

848
00:46:44,040 --> 00:46:47,460
to the team bootram

849
00:46:47,460 --> 00:46:52,680
uh there was a lot of patches the system

850
00:46:52,680 --> 00:46:56,579
was jumping over the place even in an

851
00:46:56,579 --> 00:47:00,560
empty so the

852
00:47:00,780 --> 00:47:03,240
the busy whoop SO waiting for a command

853
00:47:03,240 --> 00:47:04,800
it would

854
00:47:04,800 --> 00:47:09,300
go somewhere else and return back

855
00:47:09,300 --> 00:47:14,280
uh the main Loop was actually patched to

856
00:47:14,280 --> 00:47:16,440
support the software terminal the main

857
00:47:16,440 --> 00:47:18,780
Loop of the operating system is actually

858
00:47:18,780 --> 00:47:21,780
blinking the cursor

859
00:47:21,780 --> 00:47:23,220
uh

860
00:47:23,220 --> 00:47:26,940
then I found out that the command

861
00:47:26,940 --> 00:47:32,280
processor is at address hex b9000 but

862
00:47:32,280 --> 00:47:35,640
when you run the the

863
00:47:35,640 --> 00:47:38,640
recommend to see how much TPA or

864
00:47:38,640 --> 00:47:40,160
transient program

865
00:47:40,160 --> 00:47:42,240
space you have

866
00:47:42,240 --> 00:47:47,400
it says that you have 48k so until C

867
00:47:47,400 --> 00:47:49,740
1000 hex

868
00:47:49,740 --> 00:47:53,280
so what was actually happening is that

869
00:47:53,280 --> 00:47:56,760
the ram disk is used as Shadow Ram

870
00:47:56,760 --> 00:47:59,880
when you are inside of a program for

871
00:47:59,880 --> 00:48:01,980
example wordstar

872
00:48:01,980 --> 00:48:05,400
you don't need the command processor

873
00:48:05,400 --> 00:48:08,220
so the program can be loaded over the

874
00:48:08,220 --> 00:48:11,180
command processor

875
00:48:11,599 --> 00:48:15,060
the problem not the problem the the the

876
00:48:15,060 --> 00:48:18,540
the secret of initializing the ram disk

877
00:48:18,540 --> 00:48:21,540
is actually copying that command

878
00:48:21,540 --> 00:48:25,020
processor to the ram disk and having a

879
00:48:25,020 --> 00:48:28,640
stash there having a secure copy

880
00:48:28,640 --> 00:48:33,060
the program was actually copying the

881
00:48:33,060 --> 00:48:35,099
part of the memory to the ram disk

882
00:48:35,099 --> 00:48:37,380
created a

883
00:48:37,380 --> 00:48:40,020
directory entry in the ram disk and set

884
00:48:40,020 --> 00:48:42,720
the that directory entry as a system

885
00:48:42,720 --> 00:48:47,160
file so no no program can erase it

886
00:48:47,160 --> 00:48:51,740
and then when you exit a running program

887
00:48:51,740 --> 00:48:55,260
whether it overwrote the command

888
00:48:55,260 --> 00:48:59,160
processor or not the system call for a

889
00:48:59,160 --> 00:49:01,560
worm boot was patched

890
00:49:01,560 --> 00:49:05,220
so it loads the command press processor

891
00:49:05,220 --> 00:49:08,160
back from the the shadow Rams for from

892
00:49:08,160 --> 00:49:09,720
the uh

893
00:49:09,720 --> 00:49:14,220
uh RAM disk and then returns to execute

894
00:49:14,220 --> 00:49:17,598
the command processor

895
00:49:18,660 --> 00:49:22,400
so a lot of things I

896
00:49:22,400 --> 00:49:25,859
have done with the analysis but I cannot

897
00:49:25,859 --> 00:49:28,520
cover them here

898
00:49:28,520 --> 00:49:30,980
but my

899
00:49:30,980 --> 00:49:34,619
goals are to document the boot from this

900
00:49:34,619 --> 00:49:35,700
assembly

901
00:49:35,700 --> 00:49:37,380
uh

902
00:49:37,380 --> 00:49:40,740
it's actually quite simple erase the the

903
00:49:40,740 --> 00:49:42,839
video RAM

904
00:49:42,839 --> 00:49:46,200
check if the disk is inserted if the

905
00:49:46,200 --> 00:49:49,079
disk is inserted load the

906
00:49:49,079 --> 00:49:54,119
first track into memory at 8 000 hex and

907
00:49:54,119 --> 00:49:56,660
jump there

908
00:49:56,720 --> 00:50:00,119
second goal would be to make sense out

909
00:50:00,119 --> 00:50:02,640
of all the patches done done to the

910
00:50:02,640 --> 00:50:04,700
operating system

911
00:50:04,700 --> 00:50:07,800
uh I tried following the source code

912
00:50:07,800 --> 00:50:11,760
with the disassembly I found

913
00:50:11,760 --> 00:50:15,720
similarities uh but I found some uh

914
00:50:15,720 --> 00:50:19,079
stuff that's not that still doesn't make

915
00:50:19,079 --> 00:50:21,180
any sense to me

916
00:50:21,180 --> 00:50:25,380
and since the zcpr3 source code is

917
00:50:25,380 --> 00:50:28,020
available I would like to implement all

918
00:50:28,020 --> 00:50:29,540
of those

919
00:50:29,540 --> 00:50:33,540
patches perhaps more sandwich into the

920
00:50:33,540 --> 00:50:38,900
OS because the OS has a

921
00:50:39,119 --> 00:50:43,740
the OS has Provisions to do that it has

922
00:50:43,740 --> 00:50:47,339
files where you can

923
00:50:47,339 --> 00:50:50,640
say how the terminal emulator is working

924
00:50:50,640 --> 00:50:55,260
is to say how how the input and outputs

925
00:50:55,260 --> 00:50:57,420
are handled and so on

926
00:50:57,420 --> 00:51:01,980
and I found that there is a banked

927
00:51:01,980 --> 00:51:05,960
portable bios for CPM computers

928
00:51:05,960 --> 00:51:10,440
which uses the advantage of that mmu in

929
00:51:10,440 --> 00:51:12,300
inside the processor

930
00:51:12,300 --> 00:51:15,480
so my goal would be to adapt that to

931
00:51:15,480 --> 00:51:20,180
team 011 so we can actually gain more

932
00:51:20,180 --> 00:51:24,359
TPA space we can run larger programs

933
00:51:24,359 --> 00:51:26,520
on the machine because you are now

934
00:51:26,520 --> 00:51:29,240
limited to 48k

935
00:51:29,240 --> 00:51:34,200
I found some programs which don't want

936
00:51:34,200 --> 00:51:38,540
to run they ask for 56k

937
00:51:39,420 --> 00:51:43,980
and of course with jarkos Graphics

938
00:51:43,980 --> 00:51:49,559
libraries and uh Emulator working and uh

939
00:51:49,559 --> 00:51:53,760
that uh might small C compiler

940
00:51:53,760 --> 00:51:57,780
I adapted the game which was written by

941
00:51:57,780 --> 00:51:59,900
Miguel Garcia

942
00:51:59,900 --> 00:52:02,460
for the uh

943
00:52:02,460 --> 00:52:03,800
amstrad

944
00:52:03,800 --> 00:52:08,780
word processors which also run CPM

945
00:52:08,780 --> 00:52:14,059
and I added the support for team 011

946
00:52:14,059 --> 00:52:19,220
graphics and used extensively

947
00:52:19,220 --> 00:52:23,599
libraries for both text Graphics Styles

948
00:52:23,599 --> 00:52:27,920
and everything else and fonts

949
00:52:27,920 --> 00:52:32,480
I will demo the game later here

950
00:52:32,700 --> 00:52:35,040
and

951
00:52:35,040 --> 00:52:38,520
that is it yeah the game was written in

952
00:52:38,520 --> 00:52:41,220
Mike's enhanced small C compiler

953
00:52:41,220 --> 00:52:43,020
and

954
00:52:43,020 --> 00:52:45,619
yeah all the graphics assets were

955
00:52:45,619 --> 00:52:49,640
converted with Jacques tools

956
00:52:52,619 --> 00:52:53,720
okay

957
00:52:53,720 --> 00:52:57,500
we are near the end and the question

958
00:52:57,500 --> 00:53:01,079
regarding with the team 011 is what to

959
00:53:01,079 --> 00:53:02,880
do now

960
00:53:02,880 --> 00:53:06,660
um generally Marco me and the

961
00:53:06,660 --> 00:53:09,680
small retro community that exists in

962
00:53:09,680 --> 00:53:14,599
Serbia we really do not like that

963
00:53:14,599 --> 00:53:16,980
practically all software written for

964
00:53:16,980 --> 00:53:19,920
that machine is lost for example when we

965
00:53:19,920 --> 00:53:21,619
presented the machine at some

966
00:53:21,619 --> 00:53:24,859
exhibitions like this year's balcon

967
00:53:24,859 --> 00:53:28,800
before we didn't have anything to run on

968
00:53:28,800 --> 00:53:31,200
the machine itself we can show the the

969
00:53:31,200 --> 00:53:36,299
green screen and nothing

970
00:53:36,559 --> 00:53:40,319
so what is the only thing that we could

971
00:53:40,319 --> 00:53:42,900
do well we could write the new games by

972
00:53:42,900 --> 00:53:45,440
ourselves of course

973
00:53:45,440 --> 00:53:49,380
uh so the current tool chain from for

974
00:53:49,380 --> 00:53:52,819
team zero zero 11 consists of

975
00:53:52,819 --> 00:53:56,819
nccpm emulator that run that could that

976
00:53:56,819 --> 00:54:00,599
we use to run the C compiler

977
00:54:00,599 --> 00:54:03,300
uh we have Graphics libraries for the

978
00:54:03,300 --> 00:54:06,859
team that are written for that compiler

979
00:54:06,859 --> 00:54:11,460
CPM tools library is used to generate

980
00:54:11,460 --> 00:54:15,839
floppy images and the main team

981
00:54:15,839 --> 00:54:20,520
011 emulator is used to actually run the

982
00:54:20,520 --> 00:54:21,859
code

983
00:54:21,859 --> 00:54:25,740
all of this is integrated again into a

984
00:54:25,740 --> 00:54:28,040
bash script that

985
00:54:28,040 --> 00:54:32,160
does all of those steps for you so you

986
00:54:32,160 --> 00:54:34,200
just run the script the script then

987
00:54:34,200 --> 00:54:35,780
calls the

988
00:54:35,780 --> 00:54:39,540
CPM emulator compiles the program if at

989
00:54:39,540 --> 00:54:41,579
any step there are some errors it stops

990
00:54:41,579 --> 00:54:45,660
of course and then generates the floppy

991
00:54:45,660 --> 00:54:51,200
image then runs the emulator then uses

992
00:54:51,680 --> 00:54:55,800
simulated key presses to temporarily run

993
00:54:55,800 --> 00:54:58,740
emulator at full speed until the point

994
00:54:58,740 --> 00:55:00,780
where the game or whatever you are

995
00:55:00,780 --> 00:55:02,640
compiling is loaded then slows the

996
00:55:02,640 --> 00:55:05,579
emulator to the 100 100 speed and then

997
00:55:05,579 --> 00:55:07,319
you can test the code

998
00:55:07,319 --> 00:55:10,859
all of this now takes less than five

999
00:55:10,859 --> 00:55:14,339
seconds on my machine so I can make some

1000
00:55:14,339 --> 00:55:16,200
changes to the code around the script

1001
00:55:16,200 --> 00:55:18,420
and five seconds later I can see it

1002
00:55:18,420 --> 00:55:19,380
running

1003
00:55:19,380 --> 00:55:21,480
so uh

1004
00:55:21,480 --> 00:55:26,400
in this past few years we came from not

1005
00:55:26,400 --> 00:55:28,619
having anything for the machine to

1006
00:55:28,619 --> 00:55:32,220
having at least one two chain to make

1007
00:55:32,220 --> 00:55:35,700
new games programs or whatever

1008
00:55:35,700 --> 00:55:36,859
um

1009
00:55:36,859 --> 00:55:40,619
during my dabbling with retro computers

1010
00:55:40,619 --> 00:55:43,760
I found out about uh

1011
00:55:43,760 --> 00:55:48,480
one IDE that uses a kind of Pascal

1012
00:55:48,480 --> 00:55:51,240
language to program a lot of retro

1013
00:55:51,240 --> 00:55:55,680
computers and my current plan is to try

1014
00:55:55,680 --> 00:55:58,559
to adapt all those libraries to that IDE

1015
00:55:58,559 --> 00:56:02,099
if I manage to do that then there will

1016
00:56:02,099 --> 00:56:05,040
be a quite nice environment to actually

1017
00:56:05,040 --> 00:56:07,440
write a new software but that is some

1018
00:56:07,440 --> 00:56:10,280
future work

1019
00:56:10,800 --> 00:56:15,359
just links to all the tools

1020
00:56:15,359 --> 00:56:19,559
all the tools are mentioned at

1021
00:56:19,559 --> 00:56:25,079
my repository for team 011 tools and all

1022
00:56:25,079 --> 00:56:27,960
the scripts that I mentioned are

1023
00:56:27,960 --> 00:56:30,599
actually there

1024
00:56:30,599 --> 00:56:35,220
so that concludes this talk do you have

1025
00:56:35,220 --> 00:56:39,119
any questions or do you just want some

1026
00:56:39,119 --> 00:56:41,720
Club mate to

1027
00:56:41,720 --> 00:56:45,618
and go to the next one

1028
00:56:53,480 --> 00:56:56,579
Institute exists

1029
00:56:56,579 --> 00:56:59,520
today also is it really possible that

1030
00:56:59,520 --> 00:57:02,160
they didn't preserve anything about the

1031
00:57:02,160 --> 00:57:05,460
machine did you try to get in contact

1032
00:57:05,460 --> 00:57:08,700
with them it did cross our minds to do

1033
00:57:08,700 --> 00:57:13,259
that but we didn't unfortunately

1034
00:57:15,200 --> 00:57:19,619
yes I know I know for example a few

1035
00:57:19,619 --> 00:57:22,260
years back I contacted a guy who was

1036
00:57:22,260 --> 00:57:24,020
working on the

1037
00:57:24,020 --> 00:57:28,740
Peckham 32 and pack on 64 machines back

1038
00:57:28,740 --> 00:57:32,160
in the 80s and he was quite helpful to

1039
00:57:32,160 --> 00:57:34,500
explain me some details about those so

1040
00:57:34,500 --> 00:57:36,540
that is actually very good preposition

1041
00:57:36,540 --> 00:57:39,500
thank you

1042
00:57:40,500 --> 00:57:43,800
we will only need to find some older

1043
00:57:43,800 --> 00:57:46,200
workers there who remember still what

1044
00:57:46,200 --> 00:57:51,020
team was actually at back in the days

1045
00:57:58,640 --> 00:58:05,220
uh so what happened with the team 020

1046
00:58:05,220 --> 00:58:09,059
uh well team 020 was actually if I

1047
00:58:09,059 --> 00:58:13,319
remember correctly uh an XT clones so uh

1048
00:58:13,319 --> 00:58:15,180
those machines were also made for

1049
00:58:15,180 --> 00:58:18,119
schools uh I don't know if they were

1050
00:58:18,119 --> 00:58:20,839
selled as

1051
00:58:20,839 --> 00:58:25,220
for private owners but

1052
00:58:25,220 --> 00:58:29,400
they do not have anything uh similar

1053
00:58:29,400 --> 00:58:32,099
with this machine except the case I

1054
00:58:32,099 --> 00:58:34,079
think they used the similar or the same

1055
00:58:34,079 --> 00:58:37,460
case but inside it's is a classic

1056
00:58:37,460 --> 00:58:41,280
IBM compatible machine they also made

1057
00:58:41,280 --> 00:58:45,599
the team 030 if I remember correctly and

1058
00:58:45,599 --> 00:58:50,240
that one was 386 computer

1059
00:58:54,720 --> 00:58:57,618
any other questions

1060
00:59:03,299 --> 00:59:06,180
yeah but can it run Doom

1061
00:59:06,180 --> 00:59:09,480
because essentially it's a deity so

1062
00:59:09,480 --> 00:59:11,819
maybe some of us can work on and create

1063
00:59:11,819 --> 00:59:15,900
a doom actually there is uh uh version

1064
00:59:15,900 --> 00:59:19,260
of Doom for static spectrum that runs

1065
00:59:19,260 --> 00:59:21,319
relatively fast

1066
00:59:21,319 --> 00:59:25,440
uh it could probably be adapted to this

1067
00:59:25,440 --> 00:59:28,200
computer but then we will need someone

1068
00:59:28,200 --> 00:59:31,140
who knows set 80 assembly much much

1069
00:59:31,140 --> 00:59:35,059
better than I do and does not hate it

1070
00:59:35,059 --> 00:59:38,760
but I think it is possible only I do not

1071
00:59:38,760 --> 00:59:40,440
think that it could run full screen

1072
00:59:40,440 --> 00:59:43,859
because for example just erasing the

1073
00:59:43,859 --> 00:59:46,260
whole screen takes about half a second

1074
00:59:46,260 --> 00:59:49,859
or around a second so you would need to

1075
00:59:49,859 --> 00:59:52,440
play with which was smaller window to

1076
00:59:52,440 --> 00:59:54,660
actually get any kind of animation on it

1077
00:59:54,660 --> 00:59:57,079
yeah I've always

1078
00:59:57,079 --> 01:00:00,059
I will reset the machine now so you can

1079
01:00:00,059 --> 01:00:01,980
see actually the speed that the the

1080
01:00:01,980 --> 01:00:04,980
screen gets erased

1081
01:00:04,980 --> 01:00:07,200
and that is at full speed or the

1082
01:00:07,200 --> 01:00:09,319
processor yeah

1083
01:00:09,319 --> 01:00:12,900
as I said I I think it could be made in

1084
01:00:12,900 --> 01:00:15,420
some for example a quarter of the screen

1085
01:00:15,420 --> 01:00:17,940
or something like that but we need some

1086
01:00:17,940 --> 01:00:20,839
someone to do it

1087
01:00:24,540 --> 01:00:27,180
okay then thank you very much for

1088
01:00:27,180 --> 01:00:31,559
listening I hope that you learned some

1089
01:00:31,559 --> 01:00:34,440
um interesting pieces of the Yugoslav

1090
01:00:34,440 --> 01:00:39,480
computer history and maybe at next

1091
01:00:39,480 --> 01:00:42,420
balcon we will be able to show you some

1092
01:00:42,420 --> 01:00:45,180
new games for the machine but I cannot

1093
01:00:45,180 --> 01:00:46,859
promise anything

1094
01:00:46,859 --> 01:00:48,350
thank you very much

1095
01:00:48,350 --> 01:00:57,630
[Applause]

1096
01:00:57,630 --> 01:01:10,219
[Music]

1097
01:01:13,370 --> 01:01:18,599
[Music]

1098
01:01:18,599 --> 01:01:21,380
foreign

