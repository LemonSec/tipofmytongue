1
00:00:00,080 --> 00:00:16,909
[Music]

2
00:00:18,980 --> 00:00:21,130
thank you

3
00:00:21,130 --> 00:00:23,699
[Music]

4
00:00:23,699 --> 00:00:26,039
our next talk will be kubernetes

5
00:00:26,039 --> 00:00:28,199
security talent and opportunity for Mark

6
00:00:28,199 --> 00:00:30,859
in void

7
00:00:34,739 --> 00:00:37,260
so hello everyone my name is Mark I've

8
00:00:37,260 --> 00:00:39,239
been working for like I.T security

9
00:00:39,239 --> 00:00:41,280
Consulting for the last 10 years maybe

10
00:00:41,280 --> 00:00:43,379
in the areas of technical security pen

11
00:00:43,379 --> 00:00:45,960
testing application security which has

12
00:00:45,960 --> 00:00:48,000
eventually led me to kubernetes security

13
00:00:48,000 --> 00:00:50,520
topics I'm working for certitude we're a

14
00:00:50,520 --> 00:00:51,960
consulting company based in Vienna

15
00:00:51,960 --> 00:00:55,800
advising clients on I.T security matters

16
00:00:55,800 --> 00:00:57,360
and we're hiring so if you're interested

17
00:00:57,360 --> 00:00:59,820
get in touch

18
00:00:59,820 --> 00:01:02,579
so what I'm am I talking about today

19
00:01:02,579 --> 00:01:04,379
um maybe let's let me ask you a question

20
00:01:04,379 --> 00:01:06,000
first who of you has already worked with

21
00:01:06,000 --> 00:01:08,900
Docker containers

22
00:01:09,000 --> 00:01:10,860
okay most of you who of you has already

23
00:01:10,860 --> 00:01:12,540
run their containers in the kubernetes

24
00:01:12,540 --> 00:01:14,400
cluster

25
00:01:14,400 --> 00:01:16,740
okay that's good most of you so um who

26
00:01:16,740 --> 00:01:18,840
have you has already worked with or

27
00:01:18,840 --> 00:01:22,380
thought about kubernetes security topics

28
00:01:22,380 --> 00:01:24,900
a few okay that's perfect audience so I

29
00:01:24,900 --> 00:01:26,280
will give you a brief introduction I

30
00:01:26,280 --> 00:01:28,439
will keep it very brief into containers

31
00:01:28,439 --> 00:01:29,820
and kubernetes

32
00:01:29,820 --> 00:01:31,740
and then we will talk about

33
00:01:31,740 --> 00:01:33,540
um security topics like container

34
00:01:33,540 --> 00:01:35,759
isolation kubernetes attack vectors

35
00:01:35,759 --> 00:01:38,159
common vulnerabilities that we see in

36
00:01:38,159 --> 00:01:39,780
the wild

37
00:01:39,780 --> 00:01:41,939
um yeah there's a particular issue with

38
00:01:41,939 --> 00:01:44,040
multi-tenancy so how can different

39
00:01:44,040 --> 00:01:46,079
different customers work on the same

40
00:01:46,079 --> 00:01:48,600
cluster is it even possible and we'll

41
00:01:48,600 --> 00:01:50,159
also talk about opportunities for

42
00:01:50,159 --> 00:01:52,380
security so there are some new risks but

43
00:01:52,380 --> 00:01:54,960
there are also new challenges that we

44
00:01:54,960 --> 00:01:58,220
should also be aware of

45
00:01:58,860 --> 00:02:01,439
so this is um basic overview of a

46
00:02:01,439 --> 00:02:03,000
kubernetes custom

47
00:02:03,000 --> 00:02:04,920
on the left side we see a kubernetes

48
00:02:04,920 --> 00:02:07,020
masternode and on the right side a

49
00:02:07,020 --> 00:02:09,780
worker node usually a cluster has three

50
00:02:09,780 --> 00:02:11,060
to five

51
00:02:11,060 --> 00:02:13,620
masternodes at least one which is kind

52
00:02:13,620 --> 00:02:15,840
of the control

53
00:02:15,840 --> 00:02:18,239
the control setup of the cluster and on

54
00:02:18,239 --> 00:02:20,340
the on on the other hand on the Riker

55
00:02:20,340 --> 00:02:22,620
nodes we have maybe three maybe a

56
00:02:22,620 --> 00:02:24,239
hundred so it could be a few hundreds

57
00:02:24,239 --> 00:02:27,840
this is where the actual workloads will

58
00:02:27,840 --> 00:02:31,020
be deployed so um

59
00:02:31,020 --> 00:02:33,300
kubernetes is an orchestrator for Docker

60
00:02:33,300 --> 00:02:36,300
containers we have microservices so we

61
00:02:36,300 --> 00:02:37,800
don't have large applications anymore

62
00:02:37,800 --> 00:02:40,020
but we we kind of have a lot of

63
00:02:40,020 --> 00:02:41,959
different components apis or whatever

64
00:02:41,959 --> 00:02:44,040
but they need to be orchestrated because

65
00:02:44,040 --> 00:02:45,720
we need many of them and we need to kind

66
00:02:45,720 --> 00:02:47,099
of organize that

67
00:02:47,099 --> 00:02:49,440
and make sure that like networks are set

68
00:02:49,440 --> 00:02:52,200
up between them and redundancy and all

69
00:02:52,200 --> 00:02:53,580
these issues are configured and

70
00:02:53,580 --> 00:02:54,599
addressed

71
00:02:54,599 --> 00:02:58,560
so kubernetes is what makes this or what

72
00:02:58,560 --> 00:03:00,000
allows us to orchestrate these

73
00:03:00,000 --> 00:03:01,860
containers and there is the cube API

74
00:03:01,860 --> 00:03:03,660
server on the master node which is the

75
00:03:03,660 --> 00:03:06,599
most Central component of kubernetes and

76
00:03:06,599 --> 00:03:09,060
it's an API and everything that we do in

77
00:03:09,060 --> 00:03:10,500
a kubernetes class that goes through the

78
00:03:10,500 --> 00:03:13,080
API the etcd is a database that stores

79
00:03:13,080 --> 00:03:15,360
our state the controller manager makes

80
00:03:15,360 --> 00:03:17,280
sure that sort of managers make sure

81
00:03:17,280 --> 00:03:18,900
that the cluster is in the good health

82
00:03:18,900 --> 00:03:20,760
so whenever I detect something that's

83
00:03:20,760 --> 00:03:23,159
not as it should be then it tries to

84
00:03:23,159 --> 00:03:25,620
restore a good and healthy status in the

85
00:03:25,620 --> 00:03:27,900
cluster at this schedule as the name

86
00:03:27,900 --> 00:03:30,000
says is for scheduling workloads so

87
00:03:30,000 --> 00:03:31,560
whenever we want to run a new container

88
00:03:31,560 --> 00:03:34,200
in a cluster then the scheduler decides

89
00:03:34,200 --> 00:03:36,420
which nodes this workload will run on

90
00:03:36,420 --> 00:03:40,040
based on the configuration

91
00:03:40,200 --> 00:03:42,540
when we're talking about security it's

92
00:03:42,540 --> 00:03:45,060
also very important to consider how

93
00:03:45,060 --> 00:03:47,220
nodes work so we have a cubelet the

94
00:03:47,220 --> 00:03:49,140
cubelet is like a kubernetes agent so

95
00:03:49,140 --> 00:03:50,819
whenever we want to have a node that

96
00:03:50,819 --> 00:03:52,500
should be part of a kubernetes cluster

97
00:03:52,500 --> 00:03:54,599
we installed the cubelet and configure

98
00:03:54,599 --> 00:03:56,760
it so that it kind of can connect to the

99
00:03:56,760 --> 00:03:59,099
API server and that makes our nodes part

100
00:03:59,099 --> 00:04:01,799
of the cluster and the Q proxy component

101
00:04:01,799 --> 00:04:03,480
is also kind of an agent running on each

102
00:04:03,480 --> 00:04:05,519
node but it's for networking so it

103
00:04:05,519 --> 00:04:07,140
configures the the networking on the

104
00:04:07,140 --> 00:04:08,879
Node so that the traffic reaches our

105
00:04:08,879 --> 00:04:11,540
containers

106
00:04:11,640 --> 00:04:13,799
when we zoom into the cubelets OR into

107
00:04:13,799 --> 00:04:17,459
this into this agent on our nodes then

108
00:04:17,459 --> 00:04:20,040
we have the following components

109
00:04:20,040 --> 00:04:20,579
um

110
00:04:20,579 --> 00:04:21,959
on the left side you have the cubelet

111
00:04:21,959 --> 00:04:23,940
and then we have a container runtime

112
00:04:23,940 --> 00:04:25,979
that could be docker

113
00:04:25,979 --> 00:04:28,860
as it was until now let's say most of

114
00:04:28,860 --> 00:04:32,340
the time but in future I will probably

115
00:04:32,340 --> 00:04:34,800
be more something like cryo or container

116
00:04:34,800 --> 00:04:38,040
D but yeah in simple terms it's it's

117
00:04:38,040 --> 00:04:41,160
kind of a Docker run time

118
00:04:41,160 --> 00:04:43,500
and yeah more technically we have the

119
00:04:43,500 --> 00:04:45,360
Run C component and the Run C component

120
00:04:45,360 --> 00:04:48,000
is it actually configures our containers

121
00:04:48,000 --> 00:04:50,040
yeah which are processes and it makes

122
00:04:50,040 --> 00:04:51,419
sure that they are running on the

123
00:04:51,419 --> 00:04:53,880
operating system kind of isolated with

124
00:04:53,880 --> 00:04:56,639
their own file system things like that

125
00:04:56,639 --> 00:05:02,220
and these green bubbles CRI and oci are

126
00:05:02,220 --> 00:05:04,500
standards so it's the open container

127
00:05:04,500 --> 00:05:05,880
interface and the container runtime

128
00:05:05,880 --> 00:05:07,680
interface and it makes sure that all

129
00:05:07,680 --> 00:05:09,120
these components are pluggable so

130
00:05:09,120 --> 00:05:11,580
kubernetes is very modular so you can

131
00:05:11,580 --> 00:05:14,280
exchange certain components

132
00:05:14,280 --> 00:05:16,139
um I don't know do you see my mouse no

133
00:05:16,139 --> 00:05:18,300
okay so um

134
00:05:18,300 --> 00:05:20,160
formally or you could also use Docker

135
00:05:20,160 --> 00:05:22,320
instead of cryo or container D and you

136
00:05:22,320 --> 00:05:23,940
can pick a cryo or you can pick

137
00:05:23,940 --> 00:05:25,740
container these are these options and

138
00:05:25,740 --> 00:05:27,419
all these standards

139
00:05:27,419 --> 00:05:29,940
um make this possible make it make it to

140
00:05:29,940 --> 00:05:31,560
a modular and so flexible but it's also

141
00:05:31,560 --> 00:05:32,880
difficult to talk about kubernetes

142
00:05:32,880 --> 00:05:34,740
security because I'm talking about

143
00:05:34,740 --> 00:05:36,960
playing kubernetes the default setup so

144
00:05:36,960 --> 00:05:38,759
to say but there could be many flavors

145
00:05:38,759 --> 00:05:40,860
like with Linux distributions there are

146
00:05:40,860 --> 00:05:43,220
many of them

147
00:05:44,280 --> 00:05:46,560
the kubernetes objects

148
00:05:46,560 --> 00:05:47,940
um so kubernetes objects are

149
00:05:47,940 --> 00:05:50,160
configurations

150
00:05:50,160 --> 00:05:52,800
um that configure our workloads when we

151
00:05:52,800 --> 00:05:55,259
have Docker containers Docker containers

152
00:05:55,259 --> 00:05:57,539
are not really known by kubernetes

153
00:05:57,539 --> 00:06:00,300
kubernetes only like they are known but

154
00:06:00,300 --> 00:06:01,919
they're not objects actually they're the

155
00:06:01,919 --> 00:06:03,840
smallest object that's used in

156
00:06:03,840 --> 00:06:06,180
kubernetes is a port and within a plot

157
00:06:06,180 --> 00:06:07,860
you can configure your Docker containers

158
00:06:07,860 --> 00:06:09,240
to run

159
00:06:09,240 --> 00:06:10,919
um the other objects like a service a

160
00:06:10,919 --> 00:06:13,560
service make sure that your traffic

161
00:06:13,560 --> 00:06:15,960
reaches your pod so it's a configuration

162
00:06:15,960 --> 00:06:17,759
that just says

163
00:06:17,759 --> 00:06:19,380
um whenever there's traffic to this IP

164
00:06:19,380 --> 00:06:21,720
and this port it should be designed for

165
00:06:21,720 --> 00:06:24,300
one of these pods then there is for

166
00:06:24,300 --> 00:06:26,639
example a replica set which makes sure

167
00:06:26,639 --> 00:06:28,380
that there is some redundancy so I can

168
00:06:28,380 --> 00:06:30,419
configure a replica set where I say okay

169
00:06:30,419 --> 00:06:32,460
this port should run three times and

170
00:06:32,460 --> 00:06:34,319
there is another plot that should scale

171
00:06:34,319 --> 00:06:36,720
10 times for redundancy and for

172
00:06:36,720 --> 00:06:38,280
scalability

173
00:06:38,280 --> 00:06:41,340
and there are many many objects um you

174
00:06:41,340 --> 00:06:44,340
don't have to understand all of them

175
00:06:44,340 --> 00:06:46,199
the basic one or the main one is a pod

176
00:06:46,199 --> 00:06:48,360
which basically means your container or

177
00:06:48,360 --> 00:06:51,020
your containers

178
00:06:51,720 --> 00:06:53,580
and all around that is used for for

179
00:06:53,580 --> 00:06:55,259
networking and for scalability and

180
00:06:55,259 --> 00:06:56,520
things like that

181
00:06:56,520 --> 00:06:58,080
so many of you probably have seen a

182
00:06:58,080 --> 00:07:00,120
kubernetes plot configuration like that

183
00:07:00,120 --> 00:07:02,280
so on the left we configure a pot

184
00:07:02,280 --> 00:07:05,340
its name says it's an nginx pods because

185
00:07:05,340 --> 00:07:07,979
it's running an nginx image so

186
00:07:07,979 --> 00:07:10,319
like for a web server or reverse proxy

187
00:07:10,319 --> 00:07:12,660
and it has a certain port

188
00:07:12,660 --> 00:07:14,759
if you run that configuration on the

189
00:07:14,759 --> 00:07:18,180
left then our nginx will be running on

190
00:07:18,180 --> 00:07:20,220
kubernetes so kubernetes will pull the

191
00:07:20,220 --> 00:07:22,919
image we'll start the container and yeah

192
00:07:22,919 --> 00:07:24,539
the port will be running on the right

193
00:07:24,539 --> 00:07:26,340
side you see a service a service as I

194
00:07:26,340 --> 00:07:29,340
said make sure that this nginx is

195
00:07:29,340 --> 00:07:30,900
reachable on the network and the cool

196
00:07:30,900 --> 00:07:32,960
thing about Services is I could run

197
00:07:32,960 --> 00:07:36,419
tempods and I only have once one one

198
00:07:36,419 --> 00:07:40,440
service IP and URL and yeah it will be

199
00:07:40,440 --> 00:07:42,300
used for for load balancing so I have a

200
00:07:42,300 --> 00:07:44,099
kind of a load balancing integrated into

201
00:07:44,099 --> 00:07:46,759
kubernetes

202
00:07:46,979 --> 00:07:49,979
for security quite important is the idea

203
00:07:49,979 --> 00:07:52,259
of namespaces you know that from other

204
00:07:52,259 --> 00:07:54,000
Technologies when you have certain

205
00:07:54,000 --> 00:07:55,500
configurations you can define a

206
00:07:55,500 --> 00:07:57,060
namespace and the namespace is like of

207
00:07:57,060 --> 00:08:00,479
it groups your objects and you can for

208
00:08:00,479 --> 00:08:02,160
example Define role-based access control

209
00:08:02,160 --> 00:08:04,560
so yeah authorization based on your

210
00:08:04,560 --> 00:08:06,780
namespaces you could have for example a

211
00:08:06,780 --> 00:08:09,479
block service or your blog application

212
00:08:09,479 --> 00:08:12,780
running in one namespace with its own

213
00:08:12,780 --> 00:08:14,759
developers and you can have a web shop

214
00:08:14,759 --> 00:08:16,979
that's being developed by other

215
00:08:16,979 --> 00:08:18,660
developers and they have their own

216
00:08:18,660 --> 00:08:20,580
namespace so they don't yeah they

217
00:08:20,580 --> 00:08:22,259
shouldn't interfere too much with each

218
00:08:22,259 --> 00:08:25,020
other and you can use certain Access

219
00:08:25,020 --> 00:08:27,000
Control mechanisms to

220
00:08:27,000 --> 00:08:29,099
yeah to group these objects and to to

221
00:08:29,099 --> 00:08:31,500
make sure that every developer can only

222
00:08:31,500 --> 00:08:32,520
access

223
00:08:32,520 --> 00:08:35,580
um what it's supposed to to access

224
00:08:35,580 --> 00:08:37,200
yeah there's also admin users

225
00:08:37,200 --> 00:08:38,820
administrative users that have the cube

226
00:08:38,820 --> 00:08:41,039
system namespace it's the default system

227
00:08:41,039 --> 00:08:42,599
namespace for all the the system

228
00:08:42,599 --> 00:08:45,120
components itself so there are certain

229
00:08:45,120 --> 00:08:47,279
uh containers that are running in each

230
00:08:47,279 --> 00:08:49,200
cluster to make sure that within the

231
00:08:49,200 --> 00:08:51,360
cluster we have DNS we have networking

232
00:08:51,360 --> 00:08:53,040
we have a maybe a dashboard or something

233
00:08:53,040 --> 00:08:55,459
like that

234
00:08:55,560 --> 00:08:56,760
yeah

235
00:08:56,760 --> 00:08:57,959
um so

236
00:08:57,959 --> 00:09:01,140
whenever a request reaches our cluster

237
00:09:01,140 --> 00:09:04,200
it will be authenticated so it will the

238
00:09:04,200 --> 00:09:06,300
cluster the API will check who are you

239
00:09:06,300 --> 00:09:08,459
it will be authorized so the cluster

240
00:09:08,459 --> 00:09:11,220
will check are you is this user allowed

241
00:09:11,220 --> 00:09:13,740
to create read update or delete this

242
00:09:13,740 --> 00:09:14,820
object

243
00:09:14,820 --> 00:09:16,080
and then there is admission control

244
00:09:16,080 --> 00:09:18,420
which even looks into your requests and

245
00:09:18,420 --> 00:09:20,700
looks into the details and determines if

246
00:09:20,700 --> 00:09:22,380
you're allowed to do that or not and the

247
00:09:22,380 --> 00:09:23,940
admission controller can maybe deny it

248
00:09:23,940 --> 00:09:27,779
or can even rewrite your requests

249
00:09:27,779 --> 00:09:29,580
we will see why admission control is

250
00:09:29,580 --> 00:09:32,459
quite important in a later example of an

251
00:09:32,459 --> 00:09:34,579
attack

252
00:09:35,160 --> 00:09:38,580
networking so in simple terms there is

253
00:09:38,580 --> 00:09:40,140
an overlay Network so we have our

254
00:09:40,140 --> 00:09:42,300
physical Network or yeah that connects

255
00:09:42,300 --> 00:09:44,100
our nodes and then we have an overlayer

256
00:09:44,100 --> 00:09:46,080
virtual Network that's handled or

257
00:09:46,080 --> 00:09:48,420
managed by the cluster to make sure that

258
00:09:48,420 --> 00:09:50,880
every ports kind of is it has its own

259
00:09:50,880 --> 00:09:54,300
network namespace its own eth0 interface

260
00:09:54,300 --> 00:09:57,180
and that the pods can connect to each

261
00:09:57,180 --> 00:09:59,100
other on

262
00:09:59,100 --> 00:10:03,360
um the also the plots can reach each

263
00:10:03,360 --> 00:10:05,399
other on the network no matter if they

264
00:10:05,399 --> 00:10:07,140
are on the same node or if they are on

265
00:10:07,140 --> 00:10:09,240
different nodes

266
00:10:09,240 --> 00:10:11,640
what's important about networking and

267
00:10:11,640 --> 00:10:15,420
kubernetes is it's done by plugins so it

268
00:10:15,420 --> 00:10:17,700
depends on which cni plugin you use you

269
00:10:17,700 --> 00:10:19,080
get different kind of networks so the

270
00:10:19,080 --> 00:10:20,880
cni plugin basically configures your IP

271
00:10:20,880 --> 00:10:23,700
addresses for your containers and for

272
00:10:23,700 --> 00:10:25,680
example maybe your Fireball rules some

273
00:10:25,680 --> 00:10:27,240
of them support firewall rules some

274
00:10:27,240 --> 00:10:30,120
don't so um actually that's really done

275
00:10:30,120 --> 00:10:33,240
by by a plugin

276
00:10:33,240 --> 00:10:35,160
without the plugin

277
00:10:35,160 --> 00:10:35,940
um

278
00:10:35,940 --> 00:10:37,980
yeah networking would not would not

279
00:10:37,980 --> 00:10:39,480
really work

280
00:10:39,480 --> 00:10:42,779
I won't go into too much detail but we

281
00:10:42,779 --> 00:10:45,959
know this this graphic from before and

282
00:10:45,959 --> 00:10:48,720
as well as there is a run C to start the

283
00:10:48,720 --> 00:10:50,579
container processes there's the cni

284
00:10:50,579 --> 00:10:53,339
plugin for example Calico is one of them

285
00:10:53,339 --> 00:10:55,920
to configure our virtual interfaces and

286
00:10:55,920 --> 00:10:57,480
give them IP addresses and make sure

287
00:10:57,480 --> 00:11:00,380
that they can reach each other

288
00:11:01,019 --> 00:11:03,360
okay so let's um that was a brief

289
00:11:03,360 --> 00:11:05,279
introduction so I hope I saw that most

290
00:11:05,279 --> 00:11:06,660
of you have already some experience with

291
00:11:06,660 --> 00:11:08,640
Docker and kubernetes so I hope that was

292
00:11:08,640 --> 00:11:10,260
enough to give you a basic understanding

293
00:11:10,260 --> 00:11:12,000
for the next few slides

294
00:11:12,000 --> 00:11:13,560
um let's look at security aspects or

295
00:11:13,560 --> 00:11:15,180
container isolation of course is is

296
00:11:15,180 --> 00:11:17,760
vital for a secure cluster

297
00:11:17,760 --> 00:11:19,500
um when we compare virtual machines with

298
00:11:19,500 --> 00:11:21,180
containers many of you probably have

299
00:11:21,180 --> 00:11:22,740
seen uh

300
00:11:22,740 --> 00:11:25,079
a graphic like that on the left side you

301
00:11:25,079 --> 00:11:26,940
see a classical virtual machine example

302
00:11:26,940 --> 00:11:28,440
where you have a host account a

303
00:11:28,440 --> 00:11:30,240
hypervisor then you have guest kernels

304
00:11:30,240 --> 00:11:32,279
and then you have the containers

305
00:11:32,279 --> 00:11:35,040
or applications and in the container

306
00:11:35,040 --> 00:11:36,660
setup on the right you only have the

307
00:11:36,660 --> 00:11:38,700
host candle then you have a container

308
00:11:38,700 --> 00:11:39,899
runtime and then you have the

309
00:11:39,899 --> 00:11:41,459
applications and actually the the

310
00:11:41,459 --> 00:11:43,140
containers run directly on the host

311
00:11:43,140 --> 00:11:45,120
kernel there is no no hypervisor

312
00:11:45,120 --> 00:11:47,399
hypervisor nor no gas currently in

313
00:11:47,399 --> 00:11:49,459
between

314
00:11:51,899 --> 00:11:54,839
yeah to make sure that this so that the

315
00:11:54,839 --> 00:11:56,640
idea is these containers should not see

316
00:11:56,640 --> 00:11:57,899
each other it should be like a virtual

317
00:11:57,899 --> 00:11:59,339
machine every application should be

318
00:11:59,339 --> 00:12:01,920
isolated it should be yeah the idea is

319
00:12:01,920 --> 00:12:03,959
also to keep it secure but also it

320
00:12:03,959 --> 00:12:05,519
should not interfere with other with

321
00:12:05,519 --> 00:12:06,860
other containers

322
00:12:06,860 --> 00:12:09,060
and um

323
00:12:09,060 --> 00:12:11,160
technically a container is just a

324
00:12:11,160 --> 00:12:14,060
process in the Linux kernel there is no

325
00:12:14,060 --> 00:12:16,560
container by definition there is just a

326
00:12:16,560 --> 00:12:18,300
process with c groups and with

327
00:12:18,300 --> 00:12:20,579
namespaces and c groups and namespaces

328
00:12:20,579 --> 00:12:23,700
are criminal configurations that make

329
00:12:23,700 --> 00:12:26,160
sure that these processes are better

330
00:12:26,160 --> 00:12:29,660
isolated than the normal processes

331
00:12:29,660 --> 00:12:32,459
and so all day isolation security really

332
00:12:32,459 --> 00:12:34,560
depends on what run time you use because

333
00:12:34,560 --> 00:12:36,899
the runtime configures the Run C

334
00:12:36,899 --> 00:12:38,640
eventually configures The namespaces

335
00:12:38,640 --> 00:12:41,100
Entity group so it tells uh the the

336
00:12:41,100 --> 00:12:43,260
Linux kernel how to create these

337
00:12:43,260 --> 00:12:45,120
processes and it also depends of course

338
00:12:45,120 --> 00:12:46,740
on your kubernetes configuration because

339
00:12:46,740 --> 00:12:49,139
kubernetes will

340
00:12:49,139 --> 00:12:49,740
um

341
00:12:49,740 --> 00:12:51,899
be the high level configuration which

342
00:12:51,899 --> 00:12:54,000
results later on in the in the container

343
00:12:54,000 --> 00:12:56,839
configuration

344
00:12:57,240 --> 00:13:00,300
so namespaces are a Linux kernel feature

345
00:13:00,300 --> 00:13:02,040
that is very important to understand to

346
00:13:02,040 --> 00:13:03,959
understand containers we have amount

347
00:13:03,959 --> 00:13:05,760
namespace we have a network name space

348
00:13:05,760 --> 00:13:08,040
and for example a network namespace make

349
00:13:08,040 --> 00:13:10,860
sure that every container or every pod

350
00:13:10,860 --> 00:13:12,920
actually gets its own network namespace

351
00:13:12,920 --> 00:13:16,680
so it has its own virtual Network stack

352
00:13:16,680 --> 00:13:18,959
and for example that means that every

353
00:13:18,959 --> 00:13:20,760
process can use the same port or can

354
00:13:20,760 --> 00:13:22,139
listen to the same ports on a normal

355
00:13:22,139 --> 00:13:24,000
system if two applications want to use

356
00:13:24,000 --> 00:13:25,680
port 80 for a web server you will have a

357
00:13:25,680 --> 00:13:27,420
conflict it will not be possible but

358
00:13:27,420 --> 00:13:29,220
within containers that's possible

359
00:13:29,220 --> 00:13:31,079
because they have their own virtual

360
00:13:31,079 --> 00:13:33,660
Network stack and virtually to them it

361
00:13:33,660 --> 00:13:35,339
seems that they can both use the port 80

362
00:13:35,339 --> 00:13:37,260
but then of course on the Node it's

363
00:13:37,260 --> 00:13:39,959
mapped to another outer Port but yeah

364
00:13:39,959 --> 00:13:41,760
for the container the container thinks

365
00:13:41,760 --> 00:13:43,440
it's the only thing running on the on

366
00:13:43,440 --> 00:13:45,180
the machine and it has its own network

367
00:13:45,180 --> 00:13:47,279
and there's nothing else and there is no

368
00:13:47,279 --> 00:13:49,440
other process so this is what the what

369
00:13:49,440 --> 00:13:51,540
the PID namespace does it make sure that

370
00:13:51,540 --> 00:13:54,120
a container cannot see other processes

371
00:13:54,120 --> 00:13:56,279
UTS namespace make sure that the

372
00:13:56,279 --> 00:13:57,779
container can only see its virtual

373
00:13:57,779 --> 00:13:59,279
hostname which is different from the

374
00:13:59,279 --> 00:14:01,320
from the physical hostname

375
00:14:01,320 --> 00:14:04,380
the IPC namespace make sure that virtual

376
00:14:04,380 --> 00:14:06,360
memory is isolated between containers so

377
00:14:06,360 --> 00:14:08,459
that one container cannot like one

378
00:14:08,459 --> 00:14:10,560
process cannot interfere with another

379
00:14:10,560 --> 00:14:13,680
process over virtual memory so namespace

380
00:14:13,680 --> 00:14:16,740
is really isolating processes within the

381
00:14:16,740 --> 00:14:19,260
the Linux scandal

382
00:14:19,260 --> 00:14:20,880
there is a special namespace which is

383
00:14:20,880 --> 00:14:22,920
the username space which virtualizes

384
00:14:22,920 --> 00:14:24,720
users so when you're root in a container

385
00:14:24,720 --> 00:14:26,399
you wouldn't be for it wouldn't be root

386
00:14:26,399 --> 00:14:27,600
on the host that's something you could

387
00:14:27,600 --> 00:14:30,000
do with that but it's usually not

388
00:14:30,000 --> 00:14:31,860
enabled by default because it has some

389
00:14:31,860 --> 00:14:34,220
there are some problems with with

390
00:14:34,220 --> 00:14:38,279
volumes or with with storage so it will

391
00:14:38,279 --> 00:14:39,899
be good to enable it it will be really

392
00:14:39,899 --> 00:14:41,579
good for security we will see later on

393
00:14:41,579 --> 00:14:44,220
why but by default um it's usually

394
00:14:44,220 --> 00:14:46,079
disabled

395
00:14:46,079 --> 00:14:48,180
and then there are capabilities and

396
00:14:48,180 --> 00:14:50,459
mandatory access control that also put

397
00:14:50,459 --> 00:14:52,860
some restrictions on these processes

398
00:14:52,860 --> 00:14:54,600
um yeah capabilities normal Linux

399
00:14:54,600 --> 00:14:57,000
capabilities so yeah

400
00:14:57,000 --> 00:14:58,740
um they are restricted or reduced to the

401
00:14:58,740 --> 00:15:01,260
necessary minimum and second and for

402
00:15:01,260 --> 00:15:03,420
example SC Linux or up armor also

403
00:15:03,420 --> 00:15:05,220
restrict system calls and the restrict

404
00:15:05,220 --> 00:15:07,620
file access and things like that so um

405
00:15:07,620 --> 00:15:09,480
as we can see there are a lot of normal

406
00:15:09,480 --> 00:15:12,240
Linux kernel features involved that

407
00:15:12,240 --> 00:15:13,920
eventually lead to Containers so

408
00:15:13,920 --> 00:15:15,420
containers is not a kind of feature by

409
00:15:15,420 --> 00:15:17,639
itself it's just all these these kernel

410
00:15:17,639 --> 00:15:20,100
tools that are kind of combined together

411
00:15:20,100 --> 00:15:25,639
to make what we know as containers

412
00:15:25,740 --> 00:15:28,380
yeah second profile um it's not a talk

413
00:15:28,380 --> 00:15:30,180
about second but yeah it filters system

414
00:15:30,180 --> 00:15:31,740
calls that's important because there are

415
00:15:31,740 --> 00:15:33,660
some dangerous system calls like I don't

416
00:15:33,660 --> 00:15:36,120
know a reboot or or an unshare which

417
00:15:36,120 --> 00:15:38,519
could even uh be used to bypass

418
00:15:38,519 --> 00:15:41,160
capabilities and other things

419
00:15:41,160 --> 00:15:42,480
um yeah so it's quite an important

420
00:15:42,480 --> 00:15:44,579
feature and yeah

421
00:15:44,579 --> 00:15:46,920
um what's important to know is that by

422
00:15:46,920 --> 00:15:48,720
default in kubernetes that comp is not

423
00:15:48,720 --> 00:15:51,180
enabled so there is no filtering of

424
00:15:51,180 --> 00:15:54,300
system calls with a bisect comp but you

425
00:15:54,300 --> 00:15:55,860
can enable that

426
00:15:55,860 --> 00:15:59,100
um yeah you can enable it manually in

427
00:15:59,100 --> 00:16:01,199
the cluster either for each port or you

428
00:16:01,199 --> 00:16:03,180
can even change the default but that's

429
00:16:03,180 --> 00:16:04,139
something you have to do yourself

430
00:16:04,139 --> 00:16:06,899
otherwise you won't have a cluster that

431
00:16:06,899 --> 00:16:10,440
is secured by soccer techcomp

432
00:16:10,440 --> 00:16:12,779
and actually without Secom we can even

433
00:16:12,779 --> 00:16:15,600
bypass the capabilities because we can

434
00:16:15,600 --> 00:16:17,940
use the and share system call yeah

435
00:16:17,940 --> 00:16:19,320
because no system calls are are

436
00:16:19,320 --> 00:16:20,519
restricted so we could use the answer

437
00:16:20,519 --> 00:16:23,639
system call uh to bypass

438
00:16:23,639 --> 00:16:25,500
um the the restrictions by capabilities

439
00:16:25,500 --> 00:16:27,540
so that we get the uh it's just admin

440
00:16:27,540 --> 00:16:30,959
capability so yeah that's um something

441
00:16:30,959 --> 00:16:33,000
you should know if you have a cluster

442
00:16:33,000 --> 00:16:34,560
that you want you want to keep secured

443
00:16:34,560 --> 00:16:36,060
you want to harden and make sure that

444
00:16:36,060 --> 00:16:38,759
the comp is enabled

445
00:16:38,759 --> 00:16:40,139
this is an example of a second

446
00:16:40,139 --> 00:16:43,800
configuration that logs certain system

447
00:16:43,800 --> 00:16:47,339
calls um actually here there is a list

448
00:16:47,339 --> 00:16:50,459
of system calls that are allowed and

449
00:16:50,459 --> 00:16:52,139
everything else will be

450
00:16:52,139 --> 00:16:55,500
um will be locked and eventually you can

451
00:16:55,500 --> 00:16:58,199
even of course deny it

452
00:16:58,199 --> 00:17:00,600
um and then yeah only your allowed

453
00:17:00,600 --> 00:17:02,100
system calls will be will be allowed

454
00:17:02,100 --> 00:17:04,079
there is a default icon profile that

455
00:17:04,079 --> 00:17:06,299
Docker uses or some runtimes use that

456
00:17:06,299 --> 00:17:07,679
you can have a look at and it's it's

457
00:17:07,679 --> 00:17:09,419
quite okay by default you can even

458
00:17:09,419 --> 00:17:12,900
restrict it further by manually removing

459
00:17:12,900 --> 00:17:15,900
allowed system calls

460
00:17:15,900 --> 00:17:18,119
and also yeah as a Linux or up armor

461
00:17:18,119 --> 00:17:20,220
depending on your node OS it might be

462
00:17:20,220 --> 00:17:22,679
enabled by default or not

463
00:17:22,679 --> 00:17:24,839
um so it's different on a redhead chorus

464
00:17:24,839 --> 00:17:26,819
than it is on an on another and another

465
00:17:26,819 --> 00:17:29,880
distribution and yeah what it does it

466
00:17:29,880 --> 00:17:32,700
restricts access to certain

467
00:17:32,700 --> 00:17:34,620
um so certain file systems like the proc

468
00:17:34,620 --> 00:17:37,740
proc directory or the sys directory it

469
00:17:37,740 --> 00:17:40,260
is nice mounts and things like that so

470
00:17:40,260 --> 00:17:42,059
it's also quite an important mechanism

471
00:17:42,059 --> 00:17:46,399
to keep your your own processes isolated

472
00:17:46,740 --> 00:17:48,240
um let's talk about users and username

473
00:17:48,240 --> 00:17:50,700
spaces because yeah it's quite important

474
00:17:50,700 --> 00:17:52,200
for it would be quite an important

475
00:17:52,200 --> 00:17:54,179
feature to security but it's not enabled

476
00:17:54,179 --> 00:17:56,220
by default and here is maybe

477
00:17:56,220 --> 00:17:57,480
um white would be a good hardening

478
00:17:57,480 --> 00:17:59,820
measure we see a container here in this

479
00:17:59,820 --> 00:18:02,460
in this graphic which runs an image and

480
00:18:02,460 --> 00:18:05,520
this container could be run as root

481
00:18:05,520 --> 00:18:07,320
which means sometimes that's necessary

482
00:18:07,320 --> 00:18:08,640
because there are some Legacy

483
00:18:08,640 --> 00:18:10,580
applications that need root privileges

484
00:18:10,580 --> 00:18:13,980
to working properly or sometimes it's

485
00:18:13,980 --> 00:18:16,799
just a misconfiguration and yeah

486
00:18:16,799 --> 00:18:18,660
normally if everything goes well the

487
00:18:18,660 --> 00:18:21,480
user should not be able to escape its

488
00:18:21,480 --> 00:18:23,280
container context but if something goes

489
00:18:23,280 --> 00:18:24,900
wrong that might be possible and if it's

490
00:18:24,900 --> 00:18:26,520
possible then you're automatically root

491
00:18:26,520 --> 00:18:28,740
on the host if you enable username

492
00:18:28,740 --> 00:18:32,340
spaces then there is just the new IDs

493
00:18:32,340 --> 00:18:35,640
are virtualized so to say and The Roots

494
00:18:35,640 --> 00:18:38,220
the uid 0 in the container gets mapped

495
00:18:38,220 --> 00:18:41,520
to uid11111 for example which means a

496
00:18:41,520 --> 00:18:44,940
non-privileged user and that means

497
00:18:44,940 --> 00:18:46,320
whenever there's an container Escape

498
00:18:46,320 --> 00:18:48,299
when something goes wrong then the user

499
00:18:48,299 --> 00:18:50,940
is is restricted at least to a

500
00:18:50,940 --> 00:18:52,559
non-privileged user

501
00:18:52,559 --> 00:18:53,880
so

502
00:18:53,880 --> 00:18:56,100
yeah I hope that we will see username

503
00:18:56,100 --> 00:18:59,039
spaces become a default in

504
00:18:59,039 --> 00:19:00,960
some future version

505
00:19:00,960 --> 00:19:03,179
sometime

506
00:19:03,179 --> 00:19:05,280
when we look at

507
00:19:05,280 --> 00:19:07,559
the big picture and what will be the

508
00:19:07,559 --> 00:19:09,419
attack Vector of a clusters or what will

509
00:19:09,419 --> 00:19:11,460
we need to do to actually really get

510
00:19:11,460 --> 00:19:14,160
cluster root access yeah it's not easy

511
00:19:14,160 --> 00:19:15,660
because there are so many many layers

512
00:19:15,660 --> 00:19:18,299
like in a like in an onion yeah you have

513
00:19:18,299 --> 00:19:20,340
your application so if you wanna if

514
00:19:20,340 --> 00:19:22,200
you're really outside the cluster and

515
00:19:22,200 --> 00:19:23,280
we're talking about a web app

516
00:19:23,280 --> 00:19:24,960
application for example you would really

517
00:19:24,960 --> 00:19:26,520
need to find availability in the

518
00:19:26,520 --> 00:19:28,919
application that leads to code execution

519
00:19:28,919 --> 00:19:31,200
yeah once you have that you will be

520
00:19:31,200 --> 00:19:34,200
within the container if the image is not

521
00:19:34,200 --> 00:19:35,820
hard you might find a Shell there

522
00:19:35,820 --> 00:19:37,980
another another commands and tools that

523
00:19:37,980 --> 00:19:40,679
are useful to eventually maybe escape

524
00:19:40,679 --> 00:19:42,960
the container with accountable

525
00:19:42,960 --> 00:19:44,580
vulnerability a runtime Monopoly

526
00:19:44,580 --> 00:19:46,380
monopility whatever we'll see a few

527
00:19:46,380 --> 00:19:48,299
examples of that in the next few slides

528
00:19:48,299 --> 00:19:50,340
and then from there when you can really

529
00:19:50,340 --> 00:19:52,380
escape the container you could yeah you

530
00:19:52,380 --> 00:19:54,480
have compromised the nodes and from the

531
00:19:54,480 --> 00:19:57,120
air you can maybe find some

532
00:19:57,120 --> 00:19:58,919
I mean the cupboard configuration you

533
00:19:58,919 --> 00:20:00,480
will find some access credentials to the

534
00:20:00,480 --> 00:20:02,460
cluster and you might be able to get

535
00:20:02,460 --> 00:20:04,200
access to the cluster and to the API

536
00:20:04,200 --> 00:20:06,179
server and things like that yeah so it's

537
00:20:06,179 --> 00:20:08,640
definitely not easy but um there are a

538
00:20:08,640 --> 00:20:10,919
few a few um security boundaries you

539
00:20:10,919 --> 00:20:13,320
have to jump through but it's it's not

540
00:20:13,320 --> 00:20:16,080
impossible when you are on the shared

541
00:20:16,080 --> 00:20:17,760
cluster when maybe one of your

542
00:20:17,760 --> 00:20:18,960
developers doesn't one of your

543
00:20:18,960 --> 00:20:20,660
developers doesn't really

544
00:20:20,660 --> 00:20:23,700
protect his or her

545
00:20:23,700 --> 00:20:26,280
um his or her um

546
00:20:26,280 --> 00:20:28,320
um chip control the chip control is the

547
00:20:28,320 --> 00:20:29,760
client to access to interact with the

548
00:20:29,760 --> 00:20:31,380
cluster and when you're a developer with

549
00:20:31,380 --> 00:20:33,419
cluster X's then you might have some

550
00:20:33,419 --> 00:20:34,860
credentials for the cluster on your on

551
00:20:34,860 --> 00:20:36,720
your laptop and for example if these get

552
00:20:36,720 --> 00:20:39,299
leaked or if otherwise there is a

553
00:20:39,299 --> 00:20:41,100
multi-tenant cluster with multiple

554
00:20:41,100 --> 00:20:43,200
different teams and multiple different

555
00:20:43,200 --> 00:20:46,140
clients then of course you are directly

556
00:20:46,140 --> 00:20:49,080
like on the cluster so you can jump

557
00:20:49,080 --> 00:20:51,200
through the first few

558
00:20:51,200 --> 00:20:54,059
difficulties and and yeah the the only

559
00:20:54,059 --> 00:20:55,260
thing you need to do is to find some

560
00:20:55,260 --> 00:20:57,179
sort of runtime or current vulnerability

561
00:20:57,179 --> 00:20:59,520
or configuration issue to access other

562
00:20:59,520 --> 00:21:02,940
namespaces and other users other clients

563
00:21:02,940 --> 00:21:05,400
there is a useful attack Matrix released

564
00:21:05,400 --> 00:21:07,679
by Microsoft which summarizes a lot of

565
00:21:07,679 --> 00:21:09,419
kubernetes attacks so it's quite a

566
00:21:09,419 --> 00:21:12,960
useful resource at least at the time at

567
00:21:12,960 --> 00:21:14,280
least this version that I looked at it

568
00:21:14,280 --> 00:21:15,900
wasn't really complete so I missed

569
00:21:15,900 --> 00:21:17,280
runtime and kind of vulnerability is

570
00:21:17,280 --> 00:21:19,380
there but still um it's it's a it's

571
00:21:19,380 --> 00:21:21,780
quite a good overview yeah and also this

572
00:21:21,780 --> 00:21:23,820
resource um

573
00:21:23,820 --> 00:21:26,640
is is quite useful to see what kind of

574
00:21:26,640 --> 00:21:29,159
configuration issues could lead to which

575
00:21:29,159 --> 00:21:31,500
attack Vector so

576
00:21:31,500 --> 00:21:34,440
um privileged flag for example is a

577
00:21:34,440 --> 00:21:36,080
configuration for a pot

578
00:21:36,080 --> 00:21:38,640
you could configure the privileged flag

579
00:21:38,640 --> 00:21:41,220
for the pods and that means that your

580
00:21:41,220 --> 00:21:43,500
containers or will not really be

581
00:21:43,500 --> 00:21:45,419
isolated at all so they will kind of be

582
00:21:45,419 --> 00:21:47,580
run with executed privileges sometimes

583
00:21:47,580 --> 00:21:50,340
that's necessary for some some classes

584
00:21:50,340 --> 00:21:52,860
specific tools but

585
00:21:52,860 --> 00:21:53,400
um

586
00:21:53,400 --> 00:21:55,320
uh it's also dangerous so you should be

587
00:21:55,320 --> 00:21:56,820
really careful about that or sometimes

588
00:21:56,820 --> 00:21:58,980
it's enabled for debugging and then they

589
00:21:58,980 --> 00:22:00,840
forgot to forget to disable it

590
00:22:00,840 --> 00:22:02,580
eventually like if you have if you have

591
00:22:02,580 --> 00:22:04,320
a privileged plot then this port is able

592
00:22:04,320 --> 00:22:05,940
to compromise the whole cluster and even

593
00:22:05,940 --> 00:22:07,380
access other workloads and things like

594
00:22:07,380 --> 00:22:08,280
that

595
00:22:08,280 --> 00:22:10,080
and so other configurations like host

596
00:22:10,080 --> 00:22:12,120
PID host path they disable some some

597
00:22:12,120 --> 00:22:14,460
namespaces so they disable some security

598
00:22:14,460 --> 00:22:17,340
protections around your processes so um

599
00:22:17,340 --> 00:22:20,959
they lead to attack vectors as well

600
00:22:23,220 --> 00:22:24,720
yeah while the common vulnerabilities

601
00:22:24,720 --> 00:22:26,640
that we that we see in the world that we

602
00:22:26,640 --> 00:22:28,620
see during pen test that we can exploit

603
00:22:28,620 --> 00:22:30,900
so outdated software obviously that's

604
00:22:30,900 --> 00:22:34,020
that's a common one and kubernetes has

605
00:22:34,020 --> 00:22:35,640
like a lot of software involved for

606
00:22:35,640 --> 00:22:37,440
those to run time there is the cluster

607
00:22:37,440 --> 00:22:40,020
there is an etcd so there's the

608
00:22:40,020 --> 00:22:41,700
application itself there are images and

609
00:22:41,700 --> 00:22:44,400
base images so there are yeah a lot of

610
00:22:44,400 --> 00:22:46,020
things to keep patched and keep updated

611
00:22:46,020 --> 00:22:47,760
which is not always easy for many

612
00:22:47,760 --> 00:22:49,559
organizations

613
00:22:49,559 --> 00:22:51,600
and yeah I'll data software of course as

614
00:22:51,600 --> 00:22:53,659
we know lead to certain vulnerabilities

615
00:22:53,659 --> 00:22:56,880
also like recently or every month we we

616
00:22:56,880 --> 00:22:58,620
find some new CDs and some of them

617
00:22:58,620 --> 00:23:02,039
surveyor outdated runtime

618
00:23:02,039 --> 00:23:03,900
um as we know the runtime sets up our

619
00:23:03,900 --> 00:23:06,299
processors and our namespaces and our C

620
00:23:06,299 --> 00:23:07,679
group so it sets up the container

621
00:23:07,679 --> 00:23:09,299
isolation so if the runtime is outdated

622
00:23:09,299 --> 00:23:11,760
there might be some bypasses and

623
00:23:11,760 --> 00:23:14,159
um and some exploits

624
00:23:14,159 --> 00:23:17,400
so there's an example the CBE from it's

625
00:23:17,400 --> 00:23:20,340
from 2019 but it's it's a cool example

626
00:23:20,340 --> 00:23:23,039
where

627
00:23:23,039 --> 00:23:25,440
basically or in simple words you have an

628
00:23:25,440 --> 00:23:27,539
image that

629
00:23:27,539 --> 00:23:29,940
where you change the

630
00:23:29,940 --> 00:23:33,679
the entry point to

631
00:23:33,679 --> 00:23:37,020
proc self access so

632
00:23:37,020 --> 00:23:37,799
um

633
00:23:37,799 --> 00:23:40,140
let me start it differently so whenever

634
00:23:40,140 --> 00:23:42,840
you start a new container there runs in

635
00:23:42,840 --> 00:23:44,640
it so the container is created the

636
00:23:44,640 --> 00:23:46,320
namespace the process and within the

637
00:23:46,320 --> 00:23:48,960
process the runc init is being is being

638
00:23:48,960 --> 00:23:51,419
run so um this is kind of the other in

639
00:23:51,419 --> 00:23:53,340
the process and from there this init

640
00:23:53,340 --> 00:23:55,500
process will then start your user

641
00:23:55,500 --> 00:23:57,720
process and then your container is kind

642
00:23:57,720 --> 00:23:59,360
of set up

643
00:23:59,360 --> 00:24:02,220
and um

644
00:24:02,220 --> 00:24:04,080
there was a vulnerability which allowed

645
00:24:04,080 --> 00:24:07,500
that you could overwrite the rancy in it

646
00:24:07,500 --> 00:24:11,220
within the container via the proc self

647
00:24:11,220 --> 00:24:13,039
Excel

648
00:24:13,039 --> 00:24:15,960
symbolic link and the symbolic link

649
00:24:15,960 --> 00:24:18,960
actually linked to the host's user is

650
00:24:18,960 --> 00:24:21,179
spin run C so from within the process

651
00:24:21,179 --> 00:24:25,440
you could override the hosts run C which

652
00:24:25,440 --> 00:24:27,480
is the container runtime process and

653
00:24:27,480 --> 00:24:29,340
yeah as we know when we can override an

654
00:24:29,340 --> 00:24:31,020
executable on the host of course we can

655
00:24:31,020 --> 00:24:33,600
break out from the container

656
00:24:33,600 --> 00:24:36,059
yeah this is one example of a runtime

657
00:24:36,059 --> 00:24:38,100
vulnerability and this is yeah this

658
00:24:38,100 --> 00:24:40,860
could be prevented actually um when um

659
00:24:40,860 --> 00:24:42,539
when you're not running the container is

660
00:24:42,539 --> 00:24:43,860
root

661
00:24:43,860 --> 00:24:45,600
so this is only availability that only

662
00:24:45,600 --> 00:24:48,539
applies when when the container

663
00:24:48,539 --> 00:24:51,860
is not uh configured with um

664
00:24:51,860 --> 00:24:55,620
non-root user

665
00:24:55,620 --> 00:24:57,299
yeah of course username spaces would

666
00:24:57,299 --> 00:24:59,400
help here as well because once this

667
00:24:59,400 --> 00:25:01,559
exploit occurs then at least on the note

668
00:25:01,559 --> 00:25:03,900
this container would be restricted to a

669
00:25:03,900 --> 00:25:06,860
a normal user

670
00:25:07,500 --> 00:25:10,320
yeah outdated candle of course our

671
00:25:10,320 --> 00:25:11,760
kernel we still have a share the same

672
00:25:11,760 --> 00:25:13,620
candle in contrast to VMS where we have

673
00:25:13,620 --> 00:25:16,440
a different guest kernel on containers

674
00:25:16,440 --> 00:25:18,539
we are all on the same on the same

675
00:25:18,539 --> 00:25:20,100
kernel

676
00:25:20,100 --> 00:25:21,480
so

677
00:25:21,480 --> 00:25:22,679
um yeah of course the kernel

678
00:25:22,679 --> 00:25:24,539
vulnerability currently exploit could

679
00:25:24,539 --> 00:25:26,940
lead to a container Escape

680
00:25:26,940 --> 00:25:29,279
and

681
00:25:29,279 --> 00:25:32,159
yeah actually I can show you a demo um

682
00:25:32,159 --> 00:25:35,279
this is just to get an idea of of yeah

683
00:25:35,279 --> 00:25:37,140
how current light exploits are dangerous

684
00:25:37,140 --> 00:25:40,140
or how yeah after account like security

685
00:25:40,140 --> 00:25:43,080
can be quite easy to to bypass the whole

686
00:25:43,080 --> 00:25:47,639
kind of kubernetes security ecosystem

687
00:25:47,820 --> 00:25:50,640
um it's an old vulnerability it's um in

688
00:25:50,640 --> 00:25:53,039
this demonstration I use dirty cow yeah

689
00:25:53,039 --> 00:25:54,480
I know it's old but there are some

690
00:25:54,480 --> 00:25:56,520
recent ones as well um which would lead

691
00:25:56,520 --> 00:25:58,919
to the same issue

692
00:25:58,919 --> 00:26:01,200
so I think it's text size is large

693
00:26:01,200 --> 00:26:02,580
enough

694
00:26:02,580 --> 00:26:03,480
um

695
00:26:03,480 --> 00:26:07,520
what I can show you is um

696
00:26:08,340 --> 00:26:10,740
there is a Docker file which is

697
00:26:10,740 --> 00:26:12,600
basically a normal

698
00:26:12,600 --> 00:26:16,020
um Ubuntu image with

699
00:26:16,020 --> 00:26:19,320
um yeah the latest updates and with

700
00:26:19,320 --> 00:26:21,960
um some some tools I will use from an

701
00:26:21,960 --> 00:26:24,120
exploit if they're not in the image or

702
00:26:24,120 --> 00:26:26,100
in the image built in then of course you

703
00:26:26,100 --> 00:26:27,659
can you might also be able to download

704
00:26:27,659 --> 00:26:29,880
them at runtime because yeah in many

705
00:26:29,880 --> 00:26:33,659
setups pods have internet access and

706
00:26:33,659 --> 00:26:35,039
yeah

707
00:26:35,039 --> 00:26:38,520
um so to now build this container where

708
00:26:38,520 --> 00:26:39,600
is my

709
00:26:39,600 --> 00:26:42,379
cursor

710
00:26:46,919 --> 00:26:49,020
for that there is a screen resolution

711
00:26:49,020 --> 00:26:51,620
issue

712
00:26:56,940 --> 00:27:00,200
let me fix that first

713
00:27:03,179 --> 00:27:06,020
foreign

714
00:27:26,220 --> 00:27:29,220
so

715
00:27:30,000 --> 00:27:32,520
we built this Docker image okay it

716
00:27:32,520 --> 00:27:33,539
doesn't work I have to change the

717
00:27:33,539 --> 00:27:36,140
resolution sorry

718
00:27:39,000 --> 00:27:41,419
well

719
00:28:00,900 --> 00:28:04,020
yeah so we can now build this image

720
00:28:04,020 --> 00:28:07,940
we'll just call it Escape demo

721
00:28:08,400 --> 00:28:11,179
so it's now built

722
00:28:11,179 --> 00:28:14,159
and let me show you so I'm running as a

723
00:28:14,159 --> 00:28:18,620
normal user on my host system here

724
00:28:19,320 --> 00:28:23,360
now around the container

725
00:28:27,419 --> 00:28:32,340
so now I'm the user John on

726
00:28:32,340 --> 00:28:34,200
in the container so normally I should be

727
00:28:34,200 --> 00:28:36,919
quite isolated

728
00:28:37,380 --> 00:28:40,320
um let me now

729
00:28:40,320 --> 00:28:43,158
so this is actually

730
00:28:46,260 --> 00:28:48,360
the export codes

731
00:28:48,360 --> 00:28:50,840
oh

732
00:28:52,159 --> 00:28:54,900
uh we'll compile it

733
00:28:54,900 --> 00:28:57,000
um

734
00:28:57,000 --> 00:29:00,919
look at the IP address

735
00:29:04,919 --> 00:29:07,320
so not like normally called the exploits

736
00:29:07,320 --> 00:29:09,120
with my local IP address

737
00:29:09,120 --> 00:29:11,580
and

738
00:29:11,580 --> 00:29:14,520
as you can see I'm now again roots on

739
00:29:14,520 --> 00:29:16,620
the host so I have escaped from the

740
00:29:16,620 --> 00:29:19,559
container and even escalated to root so

741
00:29:19,559 --> 00:29:20,640
um

742
00:29:20,640 --> 00:29:24,419
yeah this will be how easy it could be

743
00:29:24,419 --> 00:29:25,020
um

744
00:29:25,020 --> 00:29:29,220
to escape a container with a Linux

745
00:29:29,220 --> 00:29:31,440
kernel one rapidity

746
00:29:31,440 --> 00:29:34,559
how did that work just to give you an

747
00:29:34,559 --> 00:29:35,760
idea

748
00:29:35,760 --> 00:29:37,320
um Dr cow

749
00:29:37,320 --> 00:29:39,720
it's a few years old already it's a race

750
00:29:39,720 --> 00:29:42,179
condition in virtual memory mappings

751
00:29:42,179 --> 00:29:44,539
that should only be usually be read only

752
00:29:44,539 --> 00:29:47,520
but if you have a copy on right there

753
00:29:47,520 --> 00:29:48,659
was an issue that you could even

754
00:29:48,659 --> 00:29:51,539
overwrite the original which normally

755
00:29:51,539 --> 00:29:53,640
should not be possible and then there is

756
00:29:53,640 --> 00:29:55,380
in Linux you have different processes

757
00:29:55,380 --> 00:29:57,720
and you have the VDS or shared memory

758
00:29:57,720 --> 00:29:59,640
which is used as an optimization to

759
00:29:59,640 --> 00:30:01,140
optimize some system calls for example

760
00:30:01,140 --> 00:30:03,179
that when your your process wants to get

761
00:30:03,179 --> 00:30:05,940
the clock which happens very often then

762
00:30:05,940 --> 00:30:08,279
normally there would be need to be a

763
00:30:08,279 --> 00:30:11,039
context switch to to the to kind of

764
00:30:11,039 --> 00:30:12,299
modes

765
00:30:12,299 --> 00:30:12,960
um

766
00:30:12,960 --> 00:30:15,480
which would cost a lot of time and

767
00:30:15,480 --> 00:30:16,620
performance

768
00:30:16,620 --> 00:30:18,419
so what they did is they have a Linux

769
00:30:18,419 --> 00:30:19,919
they have a shared memory mapping called

770
00:30:19,919 --> 00:30:22,559
vdso and the time is always kind of

771
00:30:22,559 --> 00:30:24,480
pushed into these mappings so the

772
00:30:24,480 --> 00:30:25,799
processors when they want to read the

773
00:30:25,799 --> 00:30:28,080
time they don't need to have a context

774
00:30:28,080 --> 00:30:29,340
switch and they can just read it from

775
00:30:29,340 --> 00:30:31,559
their process

776
00:30:31,559 --> 00:30:33,840
so the issue with shared memory mappings

777
00:30:33,840 --> 00:30:35,580
with dirty cow is that you could

778
00:30:35,580 --> 00:30:38,279
overwrite shared memories that normally

779
00:30:38,279 --> 00:30:39,899
should only be read only so our

780
00:30:39,899 --> 00:30:42,000
container on the right has these videos

781
00:30:42,000 --> 00:30:44,640
all mapping and this vulnerability

782
00:30:44,640 --> 00:30:48,059
would allow it to write to the bdso

783
00:30:48,059 --> 00:30:50,340
which would of course then have an

784
00:30:50,340 --> 00:30:52,320
impact on all the other processes and

785
00:30:52,320 --> 00:30:54,000
the process on the left the process a is

786
00:30:54,000 --> 00:30:56,580
a root process so whenever this root

787
00:30:56,580 --> 00:30:59,399
process next time calls the clock at

788
00:30:59,399 --> 00:31:02,700
time function then yeah we have

789
00:31:02,700 --> 00:31:04,620
overwritten it so we can execute our own

790
00:31:04,620 --> 00:31:06,779
code and this will be or as an example

791
00:31:06,779 --> 00:31:09,360
it was a reverse shell so this is how we

792
00:31:09,360 --> 00:31:10,919
escape from the container and even got

793
00:31:10,919 --> 00:31:14,600
root on the Node

794
00:31:15,059 --> 00:31:16,919
and there are many like kernel

795
00:31:16,919 --> 00:31:18,539
vulnerabilities being like operation

796
00:31:18,539 --> 00:31:21,059
every every yeah the critical ones every

797
00:31:21,059 --> 00:31:23,100
couple of weeks or months and some of

798
00:31:23,100 --> 00:31:25,260
them of course might be as severe as

799
00:31:25,260 --> 00:31:27,299
this one

800
00:31:27,299 --> 00:31:29,460
another kind of honorability that we

801
00:31:29,460 --> 00:31:30,960
often see straw based exit control

802
00:31:30,960 --> 00:31:33,179
issues so it's quite tricky in

803
00:31:33,179 --> 00:31:35,940
kubernetes to have a good Access Control

804
00:31:35,940 --> 00:31:38,159
configured so you notice this graphic

805
00:31:38,159 --> 00:31:39,899
from before we have authentication to

806
00:31:39,899 --> 00:31:41,580
identify the user we have authorization

807
00:31:41,580 --> 00:31:44,279
but authorization is quite is quite

808
00:31:44,279 --> 00:31:46,320
limited to create read update delete so

809
00:31:46,320 --> 00:31:48,000
I can allow someone to create an object

810
00:31:48,000 --> 00:31:49,620
that can allow someone to read an object

811
00:31:49,620 --> 00:31:51,899
to update it or to delete it but I

812
00:31:51,899 --> 00:31:53,640
cannot configure details so when someone

813
00:31:53,640 --> 00:31:55,260
wants to create an object that cannot

814
00:31:55,260 --> 00:31:57,899
say Which object or or which details of

815
00:31:57,899 --> 00:31:59,399
which configuration of this object is

816
00:31:59,399 --> 00:32:01,260
allowed and which not

817
00:32:01,260 --> 00:32:02,399
um

818
00:32:02,399 --> 00:32:05,460
and this means that if you give someone

819
00:32:05,460 --> 00:32:09,480
create pot privileges this user will

820
00:32:09,480 --> 00:32:12,360
most often be able to access other

821
00:32:12,360 --> 00:32:14,659
namespaces in the worst case

822
00:32:14,659 --> 00:32:17,640
so in this example this user should not

823
00:32:17,640 --> 00:32:20,580
be allowed access to plot a

824
00:32:20,580 --> 00:32:22,679
because port a belongs to another

825
00:32:22,679 --> 00:32:24,659
namespace on our team if the user

826
00:32:24,659 --> 00:32:26,700
shouldn't have access to it so when he

827
00:32:26,700 --> 00:32:28,380
calls the API and wants to read

828
00:32:28,380 --> 00:32:30,840
something about plot a or make a cube

829
00:32:30,840 --> 00:32:34,260
control xig X's will be denied

830
00:32:34,260 --> 00:32:36,299
but if the user has great privileges

831
00:32:36,299 --> 00:32:38,220
great pod privileges

832
00:32:38,220 --> 00:32:40,380
yeah because the user needs to create

833
00:32:40,380 --> 00:32:42,720
pods in its own namespace

834
00:32:42,720 --> 00:32:44,880
then the user codes create the

835
00:32:44,880 --> 00:32:46,380
privileged pod

836
00:32:46,380 --> 00:32:48,480
yeah which is just a pot with a special

837
00:32:48,480 --> 00:32:51,659
configuration into inside it and from

838
00:32:51,659 --> 00:32:53,520
this privileged parts of course

839
00:32:53,520 --> 00:32:54,960
um which is running on the same nodes

840
00:32:54,960 --> 00:32:57,779
then the user has has ruled a root on

841
00:32:57,779 --> 00:32:58,860
the Node and could access other

842
00:32:58,860 --> 00:33:01,140
workloads so it's quite important to

843
00:33:01,140 --> 00:33:04,559
understand that the our the robust exit

844
00:33:04,559 --> 00:33:06,120
control in kubernetes only applies to

845
00:33:06,120 --> 00:33:09,000
the API server and to the objects but by

846
00:33:09,000 --> 00:33:11,220
creating something creating processes

847
00:33:11,220 --> 00:33:13,320
and creating privileged processes you

848
00:33:13,320 --> 00:33:15,299
can kind of bypass this with the create

849
00:33:15,299 --> 00:33:18,240
pod privilege so how can we restrict

850
00:33:18,240 --> 00:33:20,880
that we can restrict it with admission

851
00:33:20,880 --> 00:33:22,320
control admission controllers so

852
00:33:22,320 --> 00:33:24,059
admission controllers once it's

853
00:33:24,059 --> 00:33:26,039
authorized yeah so once the user is

854
00:33:26,039 --> 00:33:28,080
authorized to create a pods the

855
00:33:28,080 --> 00:33:29,760
admission controller will check the

856
00:33:29,760 --> 00:33:31,080
configuration we'll see oh it's a

857
00:33:31,080 --> 00:33:32,159
privileged port

858
00:33:32,159 --> 00:33:33,720
you're not allowed to create the

859
00:33:33,720 --> 00:33:35,159
privileged pods and then it will deny

860
00:33:35,159 --> 00:33:38,279
the request but um yeah efficient colors

861
00:33:38,279 --> 00:33:39,960
need to be configured there are some

862
00:33:39,960 --> 00:33:41,760
default ones that can just be enabled

863
00:33:41,760 --> 00:33:44,760
but yeah by default they are not in the

864
00:33:44,760 --> 00:33:46,980
playing kubernetes so um this is a

865
00:33:46,980 --> 00:33:49,519
common issue

866
00:33:51,000 --> 00:33:53,580
yeah I'm missing hardening measures that

867
00:33:53,580 --> 00:33:54,840
we often see

868
00:33:54,840 --> 00:33:55,860
um

869
00:33:55,860 --> 00:33:58,380
network security let me briefly talk

870
00:33:58,380 --> 00:34:01,559
about that so by default but with a

871
00:34:01,559 --> 00:34:03,779
default Network cni Plugin or with most

872
00:34:03,779 --> 00:34:06,299
of the default ones every pods can

873
00:34:06,299 --> 00:34:08,280
communicate to each other Port over the

874
00:34:08,280 --> 00:34:11,540
virtual Overland overlay Network

875
00:34:11,540 --> 00:34:14,520
so um that will be the default but

876
00:34:14,520 --> 00:34:16,619
kubernetes has Network policies Network

877
00:34:16,619 --> 00:34:18,899
policies are also kubernetes objects

878
00:34:18,899 --> 00:34:21,119
that configure which part is allowed to

879
00:34:21,119 --> 00:34:24,060
talk to which other pods

880
00:34:24,060 --> 00:34:26,159
by default all is allowed once you

881
00:34:26,159 --> 00:34:28,199
configure and once you configure an

882
00:34:28,199 --> 00:34:30,300
Ingress policy for for a port or for a

883
00:34:30,300 --> 00:34:32,399
namespace then

884
00:34:32,399 --> 00:34:34,080
everything will be blocked except what

885
00:34:34,080 --> 00:34:35,580
you have specified in this Ingress and

886
00:34:35,580 --> 00:34:37,980
the same for applies for aggress so when

887
00:34:37,980 --> 00:34:39,659
there is no Ingress or no Acres policy

888
00:34:39,659 --> 00:34:41,339
then it's allowed by default but once

889
00:34:41,339 --> 00:34:43,800
you define a policy then

890
00:34:43,800 --> 00:34:47,599
um only what's in the policy is allowed

891
00:34:50,760 --> 00:34:53,099
yeah fire bowling um so especially in

892
00:34:53,099 --> 00:34:55,139
larger organizations that want to use

893
00:34:55,139 --> 00:34:57,560
shared clusters for many teams

894
00:34:57,560 --> 00:35:00,260
firewalling can become a bit tricky

895
00:35:00,260 --> 00:35:02,580
within the cluster we can use the

896
00:35:02,580 --> 00:35:04,859
kubernetes network policies to manage

897
00:35:04,859 --> 00:35:06,900
the traffic but Network policies only

898
00:35:06,900 --> 00:35:08,580
know the workloads within the same

899
00:35:08,580 --> 00:35:10,980
cluster so I can say okay this service

900
00:35:10,980 --> 00:35:12,960
this product is allowed to talk to these

901
00:35:12,960 --> 00:35:14,940
other parts within the same custom

902
00:35:14,940 --> 00:35:17,820
but when it's interclusters or when we

903
00:35:17,820 --> 00:35:19,800
want to allow denied traffic between

904
00:35:19,800 --> 00:35:21,480
different clusters or with the outside

905
00:35:21,480 --> 00:35:23,700
world so with other Legacy systems that

906
00:35:23,700 --> 00:35:25,800
are not running the cluster then it's

907
00:35:25,800 --> 00:35:27,780
very tricky because by default the

908
00:35:27,780 --> 00:35:29,400
kubernetes the whole cluster from the

909
00:35:29,400 --> 00:35:31,260
outside only has one IP address

910
00:35:31,260 --> 00:35:33,599
yeah the virtual Network the pods within

911
00:35:33,599 --> 00:35:34,920
the virtual Network you have many IP

912
00:35:34,920 --> 00:35:37,619
addresses but to reach it's to reach the

913
00:35:37,619 --> 00:35:39,359
ports and the services and the cluster

914
00:35:39,359 --> 00:35:40,859
from the outside world there's only one

915
00:35:40,859 --> 00:35:43,440
IP address for all of them so when you

916
00:35:43,440 --> 00:35:45,300
have a shared cluster with 10 10 teams

917
00:35:45,300 --> 00:35:46,560
they will all have the same IP address

918
00:35:46,560 --> 00:35:48,420
and that makes it tricky to to filter

919
00:35:48,420 --> 00:35:50,640
Network traffic yeah more granularly I

920
00:35:50,640 --> 00:35:52,320
can only allow the Holy Cross third in

921
00:35:52,320 --> 00:35:54,540
Idaho cluster I can do something on

922
00:35:54,540 --> 00:35:56,940
ports on the ports so I can do some

923
00:35:56,940 --> 00:35:58,859
firewalling with ports but still it's

924
00:35:58,859 --> 00:36:01,200
it's it's it's it's not easy and there

925
00:36:01,200 --> 00:36:02,760
are some ways

926
00:36:02,760 --> 00:36:05,880
um with um but it also depends on your

927
00:36:05,880 --> 00:36:07,260
flavor of kubernetes for example

928
00:36:07,260 --> 00:36:09,780
openshift openshift the openshift

929
00:36:09,780 --> 00:36:13,020
kubernetes version has some you can

930
00:36:13,020 --> 00:36:14,640
Define you can configure that you have

931
00:36:14,640 --> 00:36:16,560
separate IP addresses for uh for

932
00:36:16,560 --> 00:36:18,180
different projects and different

933
00:36:18,180 --> 00:36:20,820
services but yeah where the playing

934
00:36:20,820 --> 00:36:24,680
kubernetes it's not easy to to solve

935
00:36:24,900 --> 00:36:26,760
yeah other issues we see is some

936
00:36:26,760 --> 00:36:30,000
debugging artifacts left on the cluster

937
00:36:30,000 --> 00:36:32,119
from development

938
00:36:32,119 --> 00:36:35,820
secrets and images even Microsoft refund

939
00:36:35,820 --> 00:36:37,400
and vulnerability in the Microsoft

940
00:36:37,400 --> 00:36:40,260
default images last year so when you

941
00:36:40,260 --> 00:36:41,700
downloaded the Microsoft image it

942
00:36:41,700 --> 00:36:44,220
contained the DP API key a static key

943
00:36:44,220 --> 00:36:46,740
and this DP API key is used to encrypt

944
00:36:46,740 --> 00:36:50,339
certain yeah encrypt things with uh with

945
00:36:50,339 --> 00:36:52,619
this library and so everyone that used

946
00:36:52,619 --> 00:36:54,000
everyone in the whole world that used

947
00:36:54,000 --> 00:36:55,680
Microsoft images had the same key

948
00:36:55,680 --> 00:36:58,020
configured so we try not this encrypt

949
00:36:58,020 --> 00:37:00,660
useless so these are are some issues

950
00:37:00,660 --> 00:37:03,200
that we stumbled upon

951
00:37:03,200 --> 00:37:06,300
multi-tenancy um it's now fixed by the

952
00:37:06,300 --> 00:37:08,280
way so Microsoft fixed it a few months

953
00:37:08,280 --> 00:37:11,640
after we told them multi-tenancy is is

954
00:37:11,640 --> 00:37:14,280
difficult as I said so there are many

955
00:37:14,280 --> 00:37:16,200
container bypasses so there are many

956
00:37:16,200 --> 00:37:17,880
ways the teams could Escape their

957
00:37:17,880 --> 00:37:20,220
namespace

958
00:37:20,220 --> 00:37:21,900
um how do others do that like how do

959
00:37:21,900 --> 00:37:23,520
Cloud providers do that

960
00:37:23,520 --> 00:37:28,200
um so with a normal like Google gke or

961
00:37:28,200 --> 00:37:31,680
Amazon AKs or eks in Azure basically you

962
00:37:31,680 --> 00:37:34,260
get your own virtual machines and all

963
00:37:34,260 --> 00:37:36,000
these virtual machines your cluster will

964
00:37:36,000 --> 00:37:38,460
be run there's also a container as a

965
00:37:38,460 --> 00:37:40,140
service offering in most of the big

966
00:37:40,140 --> 00:37:42,060
cloud providers so that's kind of a

967
00:37:42,060 --> 00:37:44,700
multi-tenant cluster so how do they do

968
00:37:44,700 --> 00:37:47,099
that to get to make it secure and the

969
00:37:47,099 --> 00:37:48,660
answer is they don't use a plain

970
00:37:48,660 --> 00:37:51,839
kubernetes but they normally use

971
00:37:51,839 --> 00:37:53,880
um very specific runtimes that are made

972
00:37:53,880 --> 00:37:55,560
for security so the normal Docker

973
00:37:55,560 --> 00:37:57,000
runtime it's not really built for

974
00:37:57,000 --> 00:37:59,339
security you know Securities yeah this

975
00:37:59,339 --> 00:38:01,560
isolation is is good and it works kind

976
00:38:01,560 --> 00:38:03,960
of but it wasn't built with security in

977
00:38:03,960 --> 00:38:05,700
mind so it's not considered a strong

978
00:38:05,700 --> 00:38:07,680
security boundary

979
00:38:07,680 --> 00:38:08,700
um

980
00:38:08,700 --> 00:38:11,220
for example Amazon with a firecracker

981
00:38:11,220 --> 00:38:13,560
I'll use fire to use firecracker in

982
00:38:13,560 --> 00:38:15,540
their container as a service thing which

983
00:38:15,540 --> 00:38:17,520
is basically they use

984
00:38:17,520 --> 00:38:21,180
they use virtualization with KVM under

985
00:38:21,180 --> 00:38:22,560
the hood and they have kind of very

986
00:38:22,560 --> 00:38:25,560
small and lightweight candles so it's it

987
00:38:25,560 --> 00:38:27,619
feels like containers but it's actually

988
00:38:27,619 --> 00:38:29,640
virtualizations and and you have your

989
00:38:29,640 --> 00:38:31,560
own kernel and you are isolated as in a

990
00:38:31,560 --> 00:38:33,060
virtual machine

991
00:38:33,060 --> 00:38:35,339
with knap block containers it's a

992
00:38:35,339 --> 00:38:37,500
different approach you get a Library

993
00:38:37,500 --> 00:38:40,320
operating system so I don't know Linux

994
00:38:40,320 --> 00:38:42,300
nowadays probably has I don't know 300

995
00:38:42,300 --> 00:38:44,460
400 500 system calls yeah

996
00:38:44,460 --> 00:38:48,240
and another containers only uses seven

997
00:38:48,240 --> 00:38:50,640
system calls and everything else is

998
00:38:50,640 --> 00:38:52,560
implemented in user space

999
00:38:52,560 --> 00:38:56,220
so for example when you want to create I

1000
00:38:56,220 --> 00:38:58,680
don't know a TCP socket or something

1001
00:38:58,680 --> 00:39:00,660
like that then that's not done by the

1002
00:39:00,660 --> 00:39:02,520
kernel but it's all done in user space

1003
00:39:02,520 --> 00:39:05,640
and you only call a write or a read to

1004
00:39:05,640 --> 00:39:09,000
to the network yeah and with that

1005
00:39:09,000 --> 00:39:10,920
approach when something happens that

1006
00:39:10,920 --> 00:39:12,240
will normally result in the kernel

1007
00:39:12,240 --> 00:39:14,339
exploits this time it will be user space

1008
00:39:14,339 --> 00:39:16,800
it would be an exploit that only affects

1009
00:39:16,800 --> 00:39:18,599
the process

1010
00:39:18,599 --> 00:39:21,119
and chief ISO that's Google's approach

1011
00:39:21,119 --> 00:39:23,220
yeah you can also in in the Google Cloud

1012
00:39:23,220 --> 00:39:25,800
you can just enable it with a few clicks

1013
00:39:25,800 --> 00:39:28,560
then you get kind of isolated secure

1014
00:39:28,560 --> 00:39:31,619
containers in your cluster gvisor

1015
00:39:31,619 --> 00:39:33,300
similar to nabla

1016
00:39:33,300 --> 00:39:35,339
um they have a few more system calls I

1017
00:39:35,339 --> 00:39:37,020
think they use I don't know 30 40 system

1018
00:39:37,020 --> 00:39:39,720
calls but they also have yeah the

1019
00:39:39,720 --> 00:39:41,339
inspect system calls and inspect the

1020
00:39:41,339 --> 00:39:43,380
parameters and things like that so these

1021
00:39:43,380 --> 00:39:44,820
are runtimes that were built with

1022
00:39:44,820 --> 00:39:47,400
security in mind and yeah for example

1023
00:39:47,400 --> 00:39:49,200
like in Google you can just enable cheap

1024
00:39:49,200 --> 00:39:51,420
visor with a few clicks so if you have

1025
00:39:51,420 --> 00:39:53,220
a cluster that you want to harden and

1026
00:39:53,220 --> 00:39:55,260
make more secure and where you have some

1027
00:39:55,260 --> 00:39:56,240
some

1028
00:39:56,240 --> 00:39:58,619
adopts that or where you have

1029
00:39:58,619 --> 00:40:00,180
multi-tenancy or other things like that

1030
00:40:00,180 --> 00:40:01,859
if you just want to harden it then yeah

1031
00:40:01,859 --> 00:40:03,660
you can enable um Chivas and discuss

1032
00:40:03,660 --> 00:40:05,899
this

1033
00:40:07,740 --> 00:40:09,660
but of course it's not only about

1034
00:40:09,660 --> 00:40:12,480
runtimes yeah so of course these card

1035
00:40:12,480 --> 00:40:13,980
providers they have also considered many

1036
00:40:13,980 --> 00:40:16,200
other things like networking yeah so you

1037
00:40:16,200 --> 00:40:18,000
also need to run a to to isolate

1038
00:40:18,000 --> 00:40:20,460
different clients within your cluster

1039
00:40:20,460 --> 00:40:23,400
yeah on the network you have to make

1040
00:40:23,400 --> 00:40:24,720
sure that you're up to date that you

1041
00:40:24,720 --> 00:40:26,400
have a secure configuration secure

1042
00:40:26,400 --> 00:40:28,020
role-based access control and all these

1043
00:40:28,020 --> 00:40:29,640
things so there is much more to it than

1044
00:40:29,640 --> 00:40:32,579
just using a secure runtime but um

1045
00:40:32,579 --> 00:40:34,920
yeah the secure runtime is one one

1046
00:40:34,920 --> 00:40:38,599
important component to to it

1047
00:40:38,700 --> 00:40:42,900
um not always bad so with

1048
00:40:42,900 --> 00:40:46,220
with containers we get a lot of like

1049
00:40:46,220 --> 00:40:48,780
isolation between application components

1050
00:40:48,780 --> 00:40:49,859
so if you have a microservice

1051
00:40:49,859 --> 00:40:51,300
architecture before it was one

1052
00:40:51,300 --> 00:40:52,680
application if something happens the

1053
00:40:52,680 --> 00:40:53,760
whole complication their whole

1054
00:40:53,760 --> 00:40:55,920
application was compromised now we have

1055
00:40:55,920 --> 00:40:58,380
many different services and if something

1056
00:40:58,380 --> 00:41:01,400
bad happens the impact is restricted to

1057
00:41:01,400 --> 00:41:04,260
to the container and then there would

1058
00:41:04,260 --> 00:41:06,119
need to be a container escape and it

1059
00:41:06,119 --> 00:41:07,680
would be a bit more difficult and more

1060
00:41:07,680 --> 00:41:09,000
tricky to really affect the whole

1061
00:41:09,000 --> 00:41:10,500
application

1062
00:41:10,500 --> 00:41:13,820
so yeah this is the good sides of it

1063
00:41:13,820 --> 00:41:16,800
also since you have smaller containers

1064
00:41:16,800 --> 00:41:19,020
you can Define stricter security

1065
00:41:19,020 --> 00:41:20,760
profiles it's easier because if you have

1066
00:41:20,760 --> 00:41:22,560
a monolithic large application you need

1067
00:41:22,560 --> 00:41:24,119
to basically enable everything and give

1068
00:41:24,119 --> 00:41:25,680
the application route to work and things

1069
00:41:25,680 --> 00:41:27,780
like that but with containers I can

1070
00:41:27,780 --> 00:41:29,460
really specify which system code should

1071
00:41:29,460 --> 00:41:31,500
be allowed with this with techcom

1072
00:41:31,500 --> 00:41:33,720
profiles for example I could Harden it

1073
00:41:33,720 --> 00:41:36,540
further with um with a app armor and

1074
00:41:36,540 --> 00:41:38,280
things like that so I can really more

1075
00:41:38,280 --> 00:41:40,680
randomly isolate my processes because I

1076
00:41:40,680 --> 00:41:42,780
understand them better yeah I I know

1077
00:41:42,780 --> 00:41:44,460
that they only need certain system calls

1078
00:41:44,460 --> 00:41:46,560
that they only perform certain tasks on

1079
00:41:46,560 --> 00:41:48,980
the network so I can really

1080
00:41:48,980 --> 00:41:52,740
restrict it quite granularly

1081
00:41:52,740 --> 00:41:54,420
also there are a lot of free tools open

1082
00:41:54,420 --> 00:41:56,640
source tools that help you identify

1083
00:41:56,640 --> 00:41:58,560
issues in your cluster

1084
00:41:58,560 --> 00:42:01,680
um yeah some of them even help you try

1085
00:42:01,680 --> 00:42:04,200
to exploit it and yeah these are kind of

1086
00:42:04,200 --> 00:42:05,579
vulnerability scanners for for

1087
00:42:05,579 --> 00:42:07,260
kubernetes clusters they find some of

1088
00:42:07,260 --> 00:42:08,940
them detect image vulnerabilities some

1089
00:42:08,940 --> 00:42:10,440
of them detect cluster configuration

1090
00:42:10,440 --> 00:42:13,260
issues so there are a bunch of them that

1091
00:42:13,260 --> 00:42:15,720
are quite useful if you want to assess

1092
00:42:15,720 --> 00:42:19,079
your your cluster

1093
00:42:19,079 --> 00:42:20,820
what could you do you should hack your

1094
00:42:20,820 --> 00:42:24,180
images not run them as rules remove the

1095
00:42:24,180 --> 00:42:26,339
shell remove the package manager manager

1096
00:42:26,339 --> 00:42:28,619
remove curl WK these are all tools that

1097
00:42:28,619 --> 00:42:30,859
could help an attacker

1098
00:42:30,859 --> 00:42:34,680
after the attackers on on the container

1099
00:42:34,680 --> 00:42:37,140
cluster can be hardened enable second

1100
00:42:37,140 --> 00:42:38,940
profiles for example or consider

1101
00:42:38,940 --> 00:42:41,900
username spaces

1102
00:42:42,900 --> 00:42:45,599
yeah use kubernetes Network policies to

1103
00:42:45,599 --> 00:42:47,280
also have firewalling between your

1104
00:42:47,280 --> 00:42:49,800
services so these are

1105
00:42:49,800 --> 00:42:52,380
one of the like most important hardening

1106
00:42:52,380 --> 00:42:55,640
measures you could probably take

1107
00:42:58,260 --> 00:43:00,599
good um actually yeah I'm at the end of

1108
00:43:00,599 --> 00:43:02,099
my presentation if you have any

1109
00:43:02,099 --> 00:43:05,570
questions feel free thank you

1110
00:43:05,570 --> 00:43:08,679
[Applause]

1111
00:43:11,200 --> 00:43:14,319
[Applause]

1112
00:43:18,119 --> 00:43:20,520
so in your experience with the cloud

1113
00:43:20,520 --> 00:43:23,579
providers how more hardened or less

1114
00:43:23,579 --> 00:43:25,440
hardened compared to like default

1115
00:43:25,440 --> 00:43:28,380
vanilla kubernetes configuration are

1116
00:43:28,380 --> 00:43:29,280
they

1117
00:43:29,280 --> 00:43:31,440
sorry

1118
00:43:31,440 --> 00:43:33,660
compared to a vanilla kubernetes setup

1119
00:43:33,660 --> 00:43:36,300
like with Cube admin and everything are

1120
00:43:36,300 --> 00:43:38,940
the cloud provider provided Services

1121
00:43:38,940 --> 00:43:42,359
more or less hardened so actually by

1122
00:43:42,359 --> 00:43:45,180
default you basically get similar

1123
00:43:45,180 --> 00:43:48,240
security as in a plain kubernetes if you

1124
00:43:48,240 --> 00:43:51,480
for example use gke or or eks things

1125
00:43:51,480 --> 00:43:52,980
like that you have your own virtual

1126
00:43:52,980 --> 00:43:55,079
machines this is how it's

1127
00:43:55,079 --> 00:43:57,599
kind of protects you from other clusters

1128
00:43:57,599 --> 00:43:59,160
and from other users from other from

1129
00:43:59,160 --> 00:44:02,880
other tenants but um from like for

1130
00:44:02,880 --> 00:44:04,200
example username space is also not

1131
00:44:04,200 --> 00:44:06,420
enabled so I think second is probably

1132
00:44:06,420 --> 00:44:07,980
the same

1133
00:44:07,980 --> 00:44:12,079
um the runtime

1134
00:44:12,180 --> 00:44:15,119
uh good run time you probably have prior

1135
00:44:15,119 --> 00:44:16,500
you could use cheap ISO for example I

1136
00:44:16,500 --> 00:44:17,579
mean that's cool you can enable just

1137
00:44:17,579 --> 00:44:19,079
with a click in the cloud which would be

1138
00:44:19,079 --> 00:44:22,440
more difficult to kind of deploy on your

1139
00:44:22,440 --> 00:44:23,220
own

1140
00:44:23,220 --> 00:44:25,380
but probably many of the issues and most

1141
00:44:25,380 --> 00:44:27,000
of the issues that I've discussed are

1142
00:44:27,000 --> 00:44:28,319
quite similar in the cloud you also only

1143
00:44:28,319 --> 00:44:30,480
get one cluster IP address which makes

1144
00:44:30,480 --> 00:44:33,060
the firewalling more difficult robust

1145
00:44:33,060 --> 00:44:35,339
access control is similar you can bypass

1146
00:44:35,339 --> 00:44:37,079
robust access control with privileged

1147
00:44:37,079 --> 00:44:39,000
pods it's kind of it's it's quite

1148
00:44:39,000 --> 00:44:40,099
similar here

1149
00:44:40,099 --> 00:44:43,200
so it's not that they take care of that

1150
00:44:43,200 --> 00:44:45,240
and you don't have to worry about so you

1151
00:44:45,240 --> 00:44:48,119
get your more or less Manila kubernetes

1152
00:44:48,119 --> 00:44:49,579
yeah

1153
00:44:49,579 --> 00:44:52,380
at least in terms of security and you

1154
00:44:52,380 --> 00:44:55,020
would need to do most of the things I've

1155
00:44:55,020 --> 00:44:58,460
talked about manually yourself

1156
00:45:04,700 --> 00:45:06,780
it's great thank you for your

1157
00:45:06,780 --> 00:45:09,079
presentation so you said that second is

1158
00:45:09,079 --> 00:45:11,579
disabled by by default basically in

1159
00:45:11,579 --> 00:45:12,900
kubernetes that's what you sell right

1160
00:45:12,900 --> 00:45:16,260
yes uh what's the reason for it and what

1161
00:45:16,260 --> 00:45:17,700
happens when you enable it for example

1162
00:45:17,700 --> 00:45:20,940
are there more panes operating you know

1163
00:45:20,940 --> 00:45:23,099
like kubernetes and everything yeah

1164
00:45:23,099 --> 00:45:25,260
um thanks you know the kubernetes so

1165
00:45:25,260 --> 00:45:27,119
talk around times for a Docker runtime

1166
00:45:27,119 --> 00:45:29,099
for example enable second by default and

1167
00:45:29,099 --> 00:45:30,420
some other runtimes have a default

1168
00:45:30,420 --> 00:45:32,579
site-com profile as well I'm also not

1169
00:45:32,579 --> 00:45:34,200
sure why they disabled by default I

1170
00:45:34,200 --> 00:45:37,319
think that there are problems with a

1171
00:45:37,319 --> 00:45:39,720
certain volumes the volumes are kind of

1172
00:45:39,720 --> 00:45:41,280
persistent for your cluster and for your

1173
00:45:41,280 --> 00:45:43,800
containers and

1174
00:45:43,800 --> 00:45:45,780
probably they have some some issues

1175
00:45:45,780 --> 00:45:48,119
there and since they haven't enabled it

1176
00:45:48,119 --> 00:45:49,560
at the beginning you know they might

1177
00:45:49,560 --> 00:45:51,720
break something if they just enable it

1178
00:45:51,720 --> 00:45:53,160
by default in a new version so I think

1179
00:45:53,160 --> 00:45:55,140
they are a bit worried about about

1180
00:45:55,140 --> 00:45:57,000
having like breaking something by

1181
00:45:57,000 --> 00:45:58,980
enabling the default but at least you

1182
00:45:58,980 --> 00:46:00,839
have one configuration that you can now

1183
00:46:00,839 --> 00:46:02,339
use to enable it by default on your

1184
00:46:02,339 --> 00:46:04,319
cluster yeah I don't know the reason why

1185
00:46:04,319 --> 00:46:07,260
why I think it's just compatibility with

1186
00:46:07,260 --> 00:46:08,940
some volume configurations and things

1187
00:46:08,940 --> 00:46:12,300
just one question following that so um

1188
00:46:12,300 --> 00:46:13,920
do you have any experience with someone

1189
00:46:13,920 --> 00:46:16,319
actually enable it enabling it and then

1190
00:46:16,319 --> 00:46:18,480
you know like breaking stuff or having

1191
00:46:18,480 --> 00:46:19,859
problems so what's your experience there

1192
00:46:19,859 --> 00:46:22,740
I mean um when you when you wanna enable

1193
00:46:22,740 --> 00:46:25,020
it I think it's quite safe to enable it

1194
00:46:25,020 --> 00:46:27,660
with the runtime default

1195
00:46:27,660 --> 00:46:28,980
because

1196
00:46:28,980 --> 00:46:31,020
um yeah that's what also Docker uses and

1197
00:46:31,020 --> 00:46:32,400
usually most things work with that

1198
00:46:32,400 --> 00:46:34,440
configuration when I of course configure

1199
00:46:34,440 --> 00:46:36,300
it manually then the charges chances are

1200
00:46:36,300 --> 00:46:37,319
quite high that you break something

1201
00:46:37,319 --> 00:46:39,900
you'll have to really maybe enable it

1202
00:46:39,900 --> 00:46:41,700
only in logging mode then find out the

1203
00:46:41,700 --> 00:46:43,200
system calls and then

1204
00:46:43,200 --> 00:46:45,480
enforce it but of course that's always

1205
00:46:45,480 --> 00:46:48,480
comes with some danger but I think it's

1206
00:46:48,480 --> 00:46:50,099
quite safe for most environments to

1207
00:46:50,099 --> 00:46:54,260
enable it in the runtime default mode

1208
00:46:54,260 --> 00:46:56,640
yeah it's just a one or two

1209
00:46:56,640 --> 00:46:58,079
configurations in kubernetes and then

1210
00:46:58,079 --> 00:46:59,640
you get what you would normally get in

1211
00:46:59,640 --> 00:47:01,680
the plane Docker as well yeah excellent

1212
00:47:01,680 --> 00:47:03,980
thanks

1213
00:47:10,440 --> 00:47:12,960
okay if there is no more questions thank

1214
00:47:12,960 --> 00:47:14,640
you for your attention and see you in 15

1215
00:47:14,640 --> 00:47:16,680
minutes thank you

1216
00:47:16,680 --> 00:47:19,730
[Applause]

1217
00:47:19,730 --> 00:47:38,580
[Music]

1218
00:47:38,720 --> 00:47:40,770
thank you

1219
00:47:40,770 --> 00:47:44,440
[Music]

