1
00:00:00,080 --> 00:00:16,909
[Music]

2
00:00:18,980 --> 00:00:21,130
thank you

3
00:00:21,130 --> 00:00:24,240
[Music]

4
00:00:24,240 --> 00:00:27,060
all right welcome back uh we're going to

5
00:00:27,060 --> 00:00:29,880
continue on with some lead VBA and

6
00:00:29,880 --> 00:00:32,460
malicious xl4 macros with Robert Simmons

7
00:00:32,460 --> 00:00:34,880
thank you

8
00:00:35,239 --> 00:00:37,219
hello

9
00:00:37,219 --> 00:00:39,840
how is everybody

10
00:00:39,840 --> 00:00:44,340
I'm Rob Simmons and I go by utkanos as

11
00:00:44,340 --> 00:00:45,660
my handle

12
00:00:45,660 --> 00:00:47,520
and today we're going to be talking this

13
00:00:47,520 --> 00:00:50,579
actually in sort of a technical way this

14
00:00:50,579 --> 00:00:52,920
is a bit of a historical talk because uh

15
00:00:52,920 --> 00:00:55,379
recently Microsoft has uh given everyone

16
00:00:55,379 --> 00:00:58,260
the the opportunity to disable this type

17
00:00:58,260 --> 00:01:01,020
of macro but

18
00:01:01,020 --> 00:01:02,940
what we're talking about today is not

19
00:01:02,940 --> 00:01:05,519
VBA macros this is the slightly older

20
00:01:05,519 --> 00:01:08,939
one which was uh which basically uh

21
00:01:08,939 --> 00:01:13,439
caused a panic in 2020 and 2021 and then

22
00:01:13,439 --> 00:01:16,920
early 2022 where uh many threat actors

23
00:01:16,920 --> 00:01:22,100
were using Excel 4.0 or xlm macros

24
00:01:22,100 --> 00:01:25,680
uh in their uh you know Excel documents

25
00:01:25,680 --> 00:01:28,680
malicious Excel documents so I was

26
00:01:28,680 --> 00:01:30,780
thinking when this first began I did a

27
00:01:30,780 --> 00:01:33,380
bunch of research on this uh mid-2020

28
00:01:33,380 --> 00:01:37,680
and I was thinking why why did it take

29
00:01:37,680 --> 00:01:41,280
so long for threat actors to uh I would

30
00:01:41,280 --> 00:01:45,600
say ReDiscover uh Excel 4.0 macros and

31
00:01:45,600 --> 00:01:47,820
then I looked at the timeline and kind

32
00:01:47,820 --> 00:01:50,280
of reviewed like the the

33
00:01:50,280 --> 00:01:53,640
um release dates of excel back in the

34
00:01:53,640 --> 00:01:57,960
90s and so Excel 4.0 which is where

35
00:01:57,960 --> 00:02:01,020
Excel macros were Excel 4.0 macros were

36
00:02:01,020 --> 00:02:04,079
introduced this is 1992.

37
00:02:04,079 --> 00:02:08,459
and then in 1993 Microsoft released

38
00:02:08,459 --> 00:02:13,319
Excel 5.0 and Excel 5.0 is where they uh

39
00:02:13,319 --> 00:02:15,480
introduced Visual Basic for application

40
00:02:15,480 --> 00:02:18,420
so VBA macros the type of macros that

41
00:02:18,420 --> 00:02:21,120
we're very familiar with up until 2020

42
00:02:21,120 --> 00:02:24,180
in you know from the threat landscape

43
00:02:24,180 --> 00:02:26,879
and so I I realize that it's probably

44
00:02:26,879 --> 00:02:30,540
because uh these were only these were

45
00:02:30,540 --> 00:02:33,720
only used actively by businesses for

46
00:02:33,720 --> 00:02:36,780
about a year and so knowledge about them

47
00:02:36,780 --> 00:02:39,300
basically uh you know was only visible

48
00:02:39,300 --> 00:02:41,760
for maybe a year before a better

49
00:02:41,760 --> 00:02:44,099
technology for creating macros was

50
00:02:44,099 --> 00:02:47,280
adopted the year one year later and so I

51
00:02:47,280 --> 00:02:48,900
think it was basically just forgotten

52
00:02:48,900 --> 00:02:50,700
and you know people didn't really notice

53
00:02:50,700 --> 00:02:52,980
it until 2020

54
00:02:52,980 --> 00:02:56,879
when a few of the early adopters began

55
00:02:56,879 --> 00:02:58,440
using it so that some of the earliest

56
00:02:58,440 --> 00:03:02,160
adopters of the Excel 4.0 macros in

57
00:03:02,160 --> 00:03:05,700
their lure documents were Z loader and

58
00:03:05,700 --> 00:03:07,099
dry decks

59
00:03:07,099 --> 00:03:10,319
and I've some people I hear I I think

60
00:03:10,319 --> 00:03:12,540
here are familiar with them

61
00:03:12,540 --> 00:03:14,760
um but then you know later on within a

62
00:03:14,760 --> 00:03:17,400
few months uh almost every threat actor

63
00:03:17,400 --> 00:03:19,680
you could think of is is uh just pumping

64
00:03:19,680 --> 00:03:21,959
out Excel documents with Excel four

65
00:03:21,959 --> 00:03:25,440
point with malicious Excel point 4.0 uh

66
00:03:25,440 --> 00:03:27,239
macros

67
00:03:27,239 --> 00:03:31,560
so uh I had a I had a customer who was

68
00:03:31,560 --> 00:03:34,860
very interested in blocking Excel 4.0

69
00:03:34,860 --> 00:03:37,319
macros and at the time there was quite a

70
00:03:37,319 --> 00:03:40,799
lot of research going into uh reverse

71
00:03:40,799 --> 00:03:44,340
engineering Excel 4.0 macros to see what

72
00:03:44,340 --> 00:03:46,739
the macro is doing and how it operates

73
00:03:46,739 --> 00:03:48,239
and things like this

74
00:03:48,239 --> 00:03:51,239
but I took a step back because the uh

75
00:03:51,239 --> 00:03:52,860
the company that I was doing this work

76
00:03:52,860 --> 00:03:56,879
for they they do uh email uh you know

77
00:03:56,879 --> 00:03:59,459
email blocking for for malicious files

78
00:03:59,459 --> 00:04:00,780
and attachments and that sort of thing

79
00:04:00,780 --> 00:04:03,780
so I was thinking there's no uh business

80
00:04:03,780 --> 00:04:07,319
reason for real companies to have Excel

81
00:04:07,319 --> 00:04:09,900
4.0 macros in a document in the first

82
00:04:09,900 --> 00:04:12,239
place there's no uh you know the the

83
00:04:12,239 --> 00:04:15,239
technology only existed by itself alone

84
00:04:15,239 --> 00:04:18,600
for that one year in the 90s and so you

85
00:04:18,600 --> 00:04:19,978
know the number of companies that are

86
00:04:19,978 --> 00:04:21,660
actually actively using this in

87
00:04:21,660 --> 00:04:22,979
something that they would want to have

88
00:04:22,979 --> 00:04:27,780
in an email attachment is uh zero so uh

89
00:04:27,780 --> 00:04:30,240
what I did was I took a step back

90
00:04:30,240 --> 00:04:32,880
and I looked at the methods for

91
00:04:32,880 --> 00:04:36,000
detecting the presence of macros instead

92
00:04:36,000 --> 00:04:38,040
of figuring out what the macro is doing

93
00:04:38,040 --> 00:04:41,759
or how it's doing it or you know uh

94
00:04:41,759 --> 00:04:43,620
basically decoding it or anything like

95
00:04:43,620 --> 00:04:46,440
that I wanted to find out the fastest

96
00:04:46,440 --> 00:04:49,800
way to determine if a document has Excel

97
00:04:49,800 --> 00:04:52,380
4.0 macros so that it can just be

98
00:04:52,380 --> 00:04:55,199
blocked and discarded or sent to a

99
00:04:55,199 --> 00:04:57,540
Sandbox or whatever it is that the that

100
00:04:57,540 --> 00:05:01,139
you would do with that particular email

101
00:05:01,139 --> 00:05:04,139
and so I found three detection

102
00:05:04,139 --> 00:05:08,520
opportunities for Excel 4.0 macros uh

103
00:05:08,520 --> 00:05:10,680
the first one is called the buff record

104
00:05:10,680 --> 00:05:15,120
the beginning of file uh bof record the

105
00:05:15,120 --> 00:05:17,699
second detection opportunity is in the

106
00:05:17,699 --> 00:05:19,440
bound sheet record

107
00:05:19,440 --> 00:05:22,680
and the third detection opportunity is

108
00:05:22,680 --> 00:05:25,620
in a stream in a compound file called

109
00:05:25,620 --> 00:05:28,320
the document summary information and so

110
00:05:28,320 --> 00:05:31,440
all of these three locations in an Excel

111
00:05:31,440 --> 00:05:33,180
document and we're talking about

112
00:05:33,180 --> 00:05:34,860
compound files we're not talking about

113
00:05:34,860 --> 00:05:39,680
the later uh xlsx the XML

114
00:05:39,680 --> 00:05:43,860
zip format of uh of Excel files we're

115
00:05:43,860 --> 00:05:45,600
just talking about compound

116
00:05:45,600 --> 00:05:47,039
and so these three detection

117
00:05:47,039 --> 00:05:51,240
opportunities are in any not all three

118
00:05:51,240 --> 00:05:54,000
of them will exist but if you have Excel

119
00:05:54,000 --> 00:05:57,479
4.0 macros in a document it will have

120
00:05:57,479 --> 00:06:00,600
one of these three or all of them

121
00:06:00,600 --> 00:06:03,000
so what we're first going to look at is

122
00:06:03,000 --> 00:06:05,759
the buff record the beginning of file

123
00:06:05,759 --> 00:06:09,060
and so the buff record to understand the

124
00:06:09,060 --> 00:06:11,340
buff record we need to do a little bit

125
00:06:11,340 --> 00:06:14,100
of uh uh have a little bit of a history

126
00:06:14,100 --> 00:06:18,180
lesson so the buff record is part of the

127
00:06:18,180 --> 00:06:20,699
binary interchange file format or Biff

128
00:06:20,699 --> 00:06:25,080
the Biff format and Biff uh long ago

129
00:06:25,080 --> 00:06:28,740
actually right in Excel 4.0 and earlier

130
00:06:28,740 --> 00:06:33,780
uh Excel 2 xl3 and Excel 4 versions uh

131
00:06:33,780 --> 00:06:36,539
the binary interchange file format was

132
00:06:36,539 --> 00:06:40,139
the Excel file format so the buff record

133
00:06:40,139 --> 00:06:43,319
if you uh if you know what a magic

134
00:06:43,319 --> 00:06:45,240
number is which is the first couple of

135
00:06:45,240 --> 00:06:47,819
bytes in a file which indicates what

136
00:06:47,819 --> 00:06:50,220
file type it is often there's some some

137
00:06:50,220 --> 00:06:51,600
file types that don't have a magic

138
00:06:51,600 --> 00:06:53,400
number but most file types have a magic

139
00:06:53,400 --> 00:06:55,979
number of some kind and so the buff

140
00:06:55,979 --> 00:06:58,199
record the first bytes of the buff

141
00:06:58,199 --> 00:07:00,919
record are actually the magic number

142
00:07:00,919 --> 00:07:05,580
from the older Biff format of the old

143
00:07:05,580 --> 00:07:08,460
Excel files so I'm going to show you

144
00:07:08,460 --> 00:07:11,819
visually what this means so

145
00:07:11,819 --> 00:07:15,060
in Excel 4.0 and earlier which is the

146
00:07:15,060 --> 00:07:17,100
one on the left that's the whole

147
00:07:17,100 --> 00:07:19,620
document that's the file and up in the

148
00:07:19,620 --> 00:07:21,800
upper left hand corner that is a before

149
00:07:21,800 --> 00:07:26,580
Biff 4 or Excel 4.0 uh magic number so

150
00:07:26,580 --> 00:07:29,039
that was like if you open if you take a

151
00:07:29,039 --> 00:07:32,340
hex editor and you open an old Excel 4.0

152
00:07:32,340 --> 00:07:33,539
file

153
00:07:33,539 --> 00:07:35,759
it actually doesn't have any of the

154
00:07:35,759 --> 00:07:37,039
compound file

155
00:07:37,039 --> 00:07:39,599
streams and the fat and all that stuff

156
00:07:39,599 --> 00:07:43,380
it's just this it's an Excel 4.0 uh

157
00:07:43,380 --> 00:07:44,780
before

158
00:07:44,780 --> 00:07:49,259
encoded file now Excel 5.0 that was

159
00:07:49,259 --> 00:07:52,800
where the compound file CFB

160
00:07:52,800 --> 00:07:56,759
compound file binary was introduced and

161
00:07:56,759 --> 00:08:00,000
so what Microsoft did and and if you're

162
00:08:00,000 --> 00:08:01,800
familiar with compound files it's okay

163
00:08:01,800 --> 00:08:04,199
if you're not they basically a

164
00:08:04,199 --> 00:08:06,720
collection of a number of file

165
00:08:06,720 --> 00:08:09,180
allocation tables so it's very similar

166
00:08:09,180 --> 00:08:12,360
to The Format that's used on disk but

167
00:08:12,360 --> 00:08:14,400
it's actually within a file

168
00:08:14,400 --> 00:08:18,180
and so there are sectors and it can

169
00:08:18,180 --> 00:08:21,000
actually become fragmented there are

170
00:08:21,000 --> 00:08:23,759
there's the mini fat there's the fat and

171
00:08:23,759 --> 00:08:26,099
then there's the fat for the directory

172
00:08:26,099 --> 00:08:28,020
the directory fat

173
00:08:28,020 --> 00:08:30,900
um but the compound the compound file in

174
00:08:30,900 --> 00:08:33,719
this case basically to create the Excel

175
00:08:33,719 --> 00:08:37,679
5.0 and newer they just took the Biff of

176
00:08:37,679 --> 00:08:40,620
the old version of Excel and turned that

177
00:08:40,620 --> 00:08:44,339
into one of the streams inside of the

178
00:08:44,339 --> 00:08:46,320
compound file

179
00:08:46,320 --> 00:08:48,300
and so this is kind of my artist

180
00:08:48,300 --> 00:08:52,320
rendition of of that concept

181
00:08:52,320 --> 00:08:55,160
and also this up here this

182
00:08:55,160 --> 00:08:58,500
doc doc file that's actually that's the

183
00:08:58,500 --> 00:09:01,080
compound file magic number you'll if you

184
00:09:01,080 --> 00:09:02,760
do malware analysis and look in HEX

185
00:09:02,760 --> 00:09:04,320
editors a lot that's one of the ones

186
00:09:04,320 --> 00:09:08,100
that just uh becomes rode

187
00:09:08,100 --> 00:09:11,220
so this is Excel 2.0

188
00:09:11,220 --> 00:09:13,320
uh down there at the bottom this is

189
00:09:13,320 --> 00:09:15,000
where all of these files so if you want

190
00:09:15,000 --> 00:09:17,339
to go play around with any of these

191
00:09:17,339 --> 00:09:21,260
there's a collection of reference files

192
00:09:21,260 --> 00:09:24,240
maintained by OpenOffice and so

193
00:09:24,240 --> 00:09:26,880
OpenOffice has every every single

194
00:09:26,880 --> 00:09:31,260
version of uh office file Excel word Etc

195
00:09:31,260 --> 00:09:32,279
et cetera et cetera all the different

196
00:09:32,279 --> 00:09:34,380
versions in this big table on this page

197
00:09:34,380 --> 00:09:37,519
and so you can download test documents

198
00:09:37,519 --> 00:09:40,080
which were very nice for all the

199
00:09:40,080 --> 00:09:41,839
research that I was doing but this is

200
00:09:41,839 --> 00:09:44,760
the Excel 2.0

201
00:09:44,760 --> 00:09:47,279
and you can see the progression so this

202
00:09:47,279 --> 00:09:50,519
is Excel 3.0 they've made a few changes

203
00:09:50,519 --> 00:09:52,920
just to indicate the version in the

204
00:09:52,920 --> 00:09:54,080
magic number

205
00:09:54,080 --> 00:09:57,300
and then 4.0 and then the transition

206
00:09:57,300 --> 00:10:00,060
from four to five you can see here this

207
00:10:00,060 --> 00:10:02,640
is a very big difference so you go from

208
00:10:02,640 --> 00:10:06,720
uh this is the so Biff is the Excel 4.0

209
00:10:06,720 --> 00:10:09,779
for the Excel file itself and now you

210
00:10:09,779 --> 00:10:14,700
see in in Biff 5 the Excel 5.0 uh Biff

211
00:10:14,700 --> 00:10:17,040
document is actually just a stream

212
00:10:17,040 --> 00:10:20,700
inside of the compound file

213
00:10:20,700 --> 00:10:23,399
so I hope that's clear

214
00:10:23,399 --> 00:10:26,880
uh if you want to D if you want to dive

215
00:10:26,880 --> 00:10:29,220
into any of the details of this

216
00:10:29,220 --> 00:10:32,339
specification uh the official Microsoft

217
00:10:32,339 --> 00:10:34,500
documentation is here I'll provide

218
00:10:34,500 --> 00:10:36,899
slides after this I also wrote a blog

219
00:10:36,899 --> 00:10:38,940
post that's available

220
00:10:38,940 --> 00:10:41,399
um but the specification is here the

221
00:10:41,399 --> 00:10:43,620
official spec is here and then another

222
00:10:43,620 --> 00:10:46,920
really great resource because they have

223
00:10:46,920 --> 00:10:50,519
a a mission of preserving documents and

224
00:10:50,519 --> 00:10:52,200
stuff like that so the United States

225
00:10:52,200 --> 00:10:55,440
Library of Congress has a very in-depth

226
00:10:55,440 --> 00:10:59,880
page about how the this digital format

227
00:10:59,880 --> 00:11:02,700
and different uh you know different uh

228
00:11:02,700 --> 00:11:06,300
features of the of the Biff and Excel

229
00:11:06,300 --> 00:11:07,980
format

230
00:11:07,980 --> 00:11:10,980
so there are three three very good tools

231
00:11:10,980 --> 00:11:14,640
uh one of them still maintained two of

232
00:11:14,640 --> 00:11:18,240
them fairly old for viewing Biff

233
00:11:18,240 --> 00:11:21,779
now uh who is who here has heard of off

234
00:11:21,779 --> 00:11:23,040
viz

235
00:11:23,040 --> 00:11:24,600
anyone

236
00:11:24,600 --> 00:11:27,660
anyone okay so off viz is pretty awesome

237
00:11:27,660 --> 00:11:29,399
by the way

238
00:11:29,399 --> 00:11:32,040
um if you are familiar with any of the

239
00:11:32,040 --> 00:11:35,279
text editors which have a templating

240
00:11:35,279 --> 00:11:38,700
system which will highlight it'll uh you

241
00:11:38,700 --> 00:11:41,279
it's not just a normal text editor but

242
00:11:41,279 --> 00:11:43,680
it's a text editor that will parse and

243
00:11:43,680 --> 00:11:47,100
highlight different uh components in the

244
00:11:47,100 --> 00:11:50,040
binary and show you what they are one of

245
00:11:50,040 --> 00:11:52,079
those text editors is called zero one

246
00:11:52,079 --> 00:11:54,600
zero editor some some of you are

247
00:11:54,600 --> 00:11:56,220
probably familiar with zero one zero I

248
00:11:56,220 --> 00:11:58,079
see some nodding heads another one

249
00:11:58,079 --> 00:11:59,880
that's really uh I think is actually

250
00:11:59,880 --> 00:12:01,560
better than zero one zero is called

251
00:12:01,560 --> 00:12:04,040
sinalize it pro

252
00:12:04,040 --> 00:12:07,980
it's a Mac only but it does it does the

253
00:12:07,980 --> 00:12:11,820
same sort of thing what offviz does so I

254
00:12:11,820 --> 00:12:14,220
had gone on a quest to find something

255
00:12:14,220 --> 00:12:19,320
that works like 010 or uh or finalize it

256
00:12:19,320 --> 00:12:21,839
which could show me you know basically

257
00:12:21,839 --> 00:12:24,360
parse and show me all the the meaning of

258
00:12:24,360 --> 00:12:27,060
all the of components in a compound file

259
00:12:27,060 --> 00:12:29,279
and that thing doesn't exist well that

260
00:12:29,279 --> 00:12:31,560
thing doesn't exist in templates for

261
00:12:31,560 --> 00:12:34,320
those two hex editors but I found this

262
00:12:34,320 --> 00:12:37,620
old program it's uh called off Vis it's

263
00:12:37,620 --> 00:12:39,600
officially it's a Microsoft piece of

264
00:12:39,600 --> 00:12:42,660
Microsoft software and it basically has

265
00:12:42,660 --> 00:12:46,260
a hex editor and then it has uh the you

266
00:12:46,260 --> 00:12:48,060
know basically the the parsing and the

267
00:12:48,060 --> 00:12:49,800
meaning of all the different bytes so

268
00:12:49,800 --> 00:12:52,740
you you can select a byte or a set of

269
00:12:52,740 --> 00:12:55,079
bytes in the hex editor and it will show

270
00:12:55,079 --> 00:12:58,920
you what those are like what the what

271
00:12:58,920 --> 00:13:01,560
um you know what that structure means

272
00:13:01,560 --> 00:13:04,260
we're gonna see some screenshots of off

273
00:13:04,260 --> 00:13:06,839
Vis and it's really awesome the official

274
00:13:06,839 --> 00:13:09,779
uh download it still exists in Microsoft

275
00:13:09,779 --> 00:13:12,600
you can still download it it only runs

276
00:13:12,600 --> 00:13:15,000
on my uh windows 7. I haven't gotten it

277
00:13:15,000 --> 00:13:18,300
to run on anything else there's a newer

278
00:13:18,300 --> 00:13:22,260
version uh on this person's GitHub but

279
00:13:22,260 --> 00:13:25,139
uh as as always I would say you know

280
00:13:25,139 --> 00:13:28,200
your mileage may vary I've not looked at

281
00:13:28,200 --> 00:13:30,360
whether this is this is an unofficial

282
00:13:30,360 --> 00:13:32,279
one you know you're getting it from an

283
00:13:32,279 --> 00:13:35,639
unofficial source so I uh you know I say

284
00:13:35,639 --> 00:13:37,560
you know do whatever you want but you

285
00:13:37,560 --> 00:13:39,300
know be careful with the one from GitHub

286
00:13:39,300 --> 00:13:41,100
but the one that's official is a little

287
00:13:41,100 --> 00:13:42,899
older version I haven't figured out how

288
00:13:42,899 --> 00:13:45,660
to download the newer version from

289
00:13:45,660 --> 00:13:47,760
somewhere official at Microsoft but who

290
00:13:47,760 --> 00:13:48,680
cares

291
00:13:48,680 --> 00:13:52,019
biffview plus plus this is another Biff

292
00:13:52,019 --> 00:13:54,360
viewer it's real this is another piece

293
00:13:54,360 --> 00:13:57,540
of weird software because it uh parses

294
00:13:57,540 --> 00:14:01,560
the it parses the uh Biff structures

295
00:14:01,560 --> 00:14:04,740
and then produces HTML and then it opens

296
00:14:04,740 --> 00:14:07,440
uh it it opens

297
00:14:07,440 --> 00:14:11,300
um uh uh Explorer so you have to use

298
00:14:11,300 --> 00:14:14,220
Microsoft Explorer to to with this thing

299
00:14:14,220 --> 00:14:16,139
it's really old stuff it's really like

300
00:14:16,139 --> 00:14:20,519
uh really wild fun stuff uh and then Ole

301
00:14:20,519 --> 00:14:23,700
dump so Didier Stevens has uh Olay dump

302
00:14:23,700 --> 00:14:25,500
and this has the capability of viewing

303
00:14:25,500 --> 00:14:28,680
these different uh buff and Biff records

304
00:14:28,680 --> 00:14:30,839
uh if you need to

305
00:14:30,839 --> 00:14:34,980
so this is what off viz looks like so if

306
00:14:34,980 --> 00:14:37,440
you've seen you know you you can kind of

307
00:14:37,440 --> 00:14:39,420
recognize that this is a bit like 010

308
00:14:39,420 --> 00:14:41,519
editor but you know it's specific for

309
00:14:41,519 --> 00:14:44,279
this type of file uh you have the the

310
00:14:44,279 --> 00:14:46,920
hex editor on one side and then the

311
00:14:46,920 --> 00:14:49,079
meaning of those different structures on

312
00:14:49,079 --> 00:14:51,180
the on the other side and you can see

313
00:14:51,180 --> 00:14:54,720
here it shows you you know you basically

314
00:14:54,720 --> 00:14:56,959
give it a particular

315
00:14:56,959 --> 00:15:00,420
uh Biff version so you could tell it I

316
00:15:00,420 --> 00:15:04,139
want to parse Biff 5 or I want to parse

317
00:15:04,139 --> 00:15:07,199
Biff 8 Etc blah blah and then it shows

318
00:15:07,199 --> 00:15:09,720
you what uh what it parses out of the

319
00:15:09,720 --> 00:15:11,579
file that you give it so you can see

320
00:15:11,579 --> 00:15:13,920
here it found a buff record a beginning

321
00:15:13,920 --> 00:15:16,579
of file

322
00:15:16,680 --> 00:15:19,320
this is the exact same file and by the

323
00:15:19,320 --> 00:15:21,600
way if you want to follow along later on

324
00:15:21,600 --> 00:15:24,899
your own the file that I'm using is at

325
00:15:24,899 --> 00:15:27,660
this uh URL down at the bottom so this

326
00:15:27,660 --> 00:15:31,560
is one of the sample files from uh the

327
00:15:31,560 --> 00:15:33,480
open Office Repository

328
00:15:33,480 --> 00:15:36,540
and so here you can see this uh you know

329
00:15:36,540 --> 00:15:39,600
this is a screenshot from uh Explorer

330
00:15:39,600 --> 00:15:42,360
and so you can see this has parsed out

331
00:15:42,360 --> 00:15:45,060
the boff record and the fir you know the

332
00:15:45,060 --> 00:15:49,260
the first few bytes are 809 and then 16

333
00:15:49,260 --> 00:15:51,440
this is the length of the boff record

334
00:15:51,440 --> 00:15:54,180
we're gonna see in a moment there's two

335
00:15:54,180 --> 00:15:57,300
uh two two valid ball Flex buff record

336
00:15:57,300 --> 00:16:00,720
lengths eight bytes and 16 bytes

337
00:16:00,720 --> 00:16:02,760
uh what we're looking at here is a 16

338
00:16:02,760 --> 00:16:05,639
byte boss record so that means it's Biff

339
00:16:05,639 --> 00:16:07,560
eight you know I know we're I you know

340
00:16:07,560 --> 00:16:09,240
we're cheating because it says bif8 down

341
00:16:09,240 --> 00:16:12,620
there but Biff 8 is the only uh

342
00:16:12,620 --> 00:16:15,300
specification that has a 16 byte boss

343
00:16:15,300 --> 00:16:16,920
record

344
00:16:16,920 --> 00:16:19,740
this is the same that same exact file

345
00:16:19,740 --> 00:16:23,519
but this is showing the results of uh

346
00:16:23,519 --> 00:16:27,060
the Biff plugin in Ollie dump

347
00:16:27,060 --> 00:16:29,220
and so you can see it pulls out that

348
00:16:29,220 --> 00:16:31,860
exact same uh information

349
00:16:31,860 --> 00:16:34,079
now these are all this is not all the

350
00:16:34,079 --> 00:16:36,240
Biff versions but these are the the main

351
00:16:36,240 --> 00:16:39,240
main Biff versions this is uh extracted

352
00:16:39,240 --> 00:16:41,699
directly from the uh also from the open

353
00:16:41,699 --> 00:16:45,899
Office uh repository so we're going to

354
00:16:45,899 --> 00:16:47,699
cover a lot of these

355
00:16:47,699 --> 00:16:50,160
um you know obviously some of these

356
00:16:50,160 --> 00:16:52,620
don't have Excel 4.0 macros in them that

357
00:16:52,620 --> 00:16:54,540
are earlier than 4.0 so we're just going

358
00:16:54,540 --> 00:16:56,699
to kind of ignore those but today we're

359
00:16:56,699 --> 00:17:00,240
going to focus on bit four bit five uh

360
00:17:00,240 --> 00:17:02,880
Biff 7 and Biff 8. Biff 7 is actually

361
00:17:02,880 --> 00:17:06,540
not listed here but uh sorry Biff 5 and

362
00:17:06,540 --> 00:17:08,280
Biff 8.

363
00:17:08,280 --> 00:17:12,839
now the buff record looks like this so

364
00:17:12,839 --> 00:17:14,240
the

365
00:17:14,240 --> 00:17:16,679
0908 at the beginning so that's actually

366
00:17:16,679 --> 00:17:18,660
it's little endian and so this is

367
00:17:18,660 --> 00:17:22,079
actually 809 you'll see if we look back

368
00:17:22,079 --> 00:17:25,619
here it's 809 over there by boff that's

369
00:17:25,619 --> 00:17:28,500
like the that's the boss magic number if

370
00:17:28,500 --> 00:17:30,540
you remember this used to be the

371
00:17:30,540 --> 00:17:32,700
beginning of a file or you mean it's

372
00:17:32,700 --> 00:17:34,260
called bof but it used to be the

373
00:17:34,260 --> 00:17:35,940
beginning of the whole file it's not

374
00:17:35,940 --> 00:17:39,720
just a stream in the compound file so

375
00:17:39,720 --> 00:17:43,980
but and so 0908 this like is the ancient

376
00:17:43,980 --> 00:17:46,440
you know this is kind of like finding a

377
00:17:46,440 --> 00:17:50,640
fossilized uh uh magic number inside of

378
00:17:50,640 --> 00:17:52,200
another file so this is like the

379
00:17:52,200 --> 00:17:56,039
fossilized Excel magic number from the

380
00:17:56,039 --> 00:18:00,059
ancient times last century

381
00:18:00,059 --> 00:18:02,100
um the next two bytes so you'll see this

382
00:18:02,100 --> 00:18:02,820
is

383
00:18:02,820 --> 00:18:07,620
um uh 10 0 0 so this is 16 bytes so this

384
00:18:07,620 --> 00:18:10,380
is showing the length the overall length

385
00:18:10,380 --> 00:18:12,419
of the beginning of file record

386
00:18:12,419 --> 00:18:16,679
uh version and so six this indicates

387
00:18:16,679 --> 00:18:19,919
that it is a buff eight a Biff sorry

388
00:18:19,919 --> 00:18:25,340
buff uh buff version six in Biff eight

389
00:18:25,340 --> 00:18:27,840
Buffs and biffs

390
00:18:27,840 --> 00:18:30,780
um and then these last four bytes the

391
00:18:30,780 --> 00:18:34,559
four uh the 40 here this indicates that

392
00:18:34,559 --> 00:18:38,039
this buff record uh is for a file that

393
00:18:38,039 --> 00:18:42,539
contains Excel macros so xlm macros

394
00:18:42,539 --> 00:18:44,640
so this is a chart of the different

395
00:18:44,640 --> 00:18:48,539
lengths and so Biff 5 and Biff seven

396
00:18:48,539 --> 00:18:50,840
both have eight byte

397
00:18:50,840 --> 00:18:53,580
can only be eight bytes and so you're

398
00:18:53,580 --> 00:18:57,539
going to see uh an eight there Biff

399
00:18:57,539 --> 00:19:00,539
eight can be eight or sixteen so both of

400
00:19:00,539 --> 00:19:03,419
these are valid and so you'll see eight

401
00:19:03,419 --> 00:19:05,760
or ten

402
00:19:05,760 --> 00:19:08,880
then the version so Biff five and Biff

403
00:19:08,880 --> 00:19:12,600
seven both have a version of uh of five

404
00:19:12,600 --> 00:19:14,760
you know five hundred five zero zero in

405
00:19:14,760 --> 00:19:18,720
HEX uh Biff eight is six zero zero in

406
00:19:18,720 --> 00:19:20,280
HEX

407
00:19:20,280 --> 00:19:22,440
so you you can see the direction we're

408
00:19:22,440 --> 00:19:24,480
going here what we're going to do is is

409
00:19:24,480 --> 00:19:27,419
build a Yar rule uh which can detect

410
00:19:27,419 --> 00:19:30,419
this information in a file

411
00:19:30,419 --> 00:19:33,660
so when when you need to build a Yar

412
00:19:33,660 --> 00:19:35,520
rule like if you have something like

413
00:19:35,520 --> 00:19:37,919
this right

414
00:19:37,919 --> 00:19:40,740
um this is pretty good but you want to

415
00:19:40,740 --> 00:19:42,960
have something that that cuts down even

416
00:19:42,960 --> 00:19:45,120
more because the there are there's a

417
00:19:45,120 --> 00:19:47,700
concept in Yara called atoms and so you

418
00:19:47,700 --> 00:19:50,100
want to have uh larger atoms rather than

419
00:19:50,100 --> 00:19:52,440
smaller atoms because a small the

420
00:19:52,440 --> 00:19:54,840
smaller the atom or the smaller the

421
00:19:54,840 --> 00:19:57,559
chunk of bytes that you're searching for

422
00:19:57,559 --> 00:20:01,320
the higher probability of that occurring

423
00:20:01,320 --> 00:20:03,900
in many different places in a file and

424
00:20:03,900 --> 00:20:05,880
some of them being false positive stuff

425
00:20:05,880 --> 00:20:07,380
that you're not looking for so you wanna

426
00:20:07,380 --> 00:20:09,539
you wanna have a longer string rather

427
00:20:09,539 --> 00:20:11,039
than a shorter string and have it

428
00:20:11,039 --> 00:20:13,860
specific to what you're looking for so

429
00:20:13,860 --> 00:20:19,200
if you look here in uh off viz we can

430
00:20:19,200 --> 00:20:23,340
see that the last two bytes of uh This

431
00:20:23,340 --> 00:20:25,980
boff Record are reserved and so they

432
00:20:25,980 --> 00:20:30,179
should be zero at all times and so that

433
00:20:30,179 --> 00:20:33,360
means this is the Yara hex the

434
00:20:33,360 --> 00:20:36,539
hexadecimal string for a buff record so

435
00:20:36,539 --> 00:20:39,900
you've got the 0908 8 and then the size

436
00:20:39,900 --> 00:20:43,320
which is 16 bytes and then you've got

437
00:20:43,320 --> 00:20:47,039
the version 600 and then you have four

438
00:20:47,039 --> 00:20:51,059
zero for Excel macros you have a bunch

439
00:20:51,059 --> 00:20:53,160
of other stuff which is like you know

440
00:20:53,160 --> 00:20:55,500
another other information that can be

441
00:20:55,500 --> 00:20:58,380
found in the buff record but is highly

442
00:20:58,380 --> 00:21:00,179
variable so it's stuff that you want to

443
00:21:00,179 --> 00:21:02,600
put a jump so you have 10 bytes of jump

444
00:21:02,600 --> 00:21:06,660
and then two uh reserved bytes at the

445
00:21:06,660 --> 00:21:08,780
end and so this is your

446
00:21:08,780 --> 00:21:11,280
hex string that you're going to use in

447
00:21:11,280 --> 00:21:13,039
the the

448
00:21:13,039 --> 00:21:16,020
Yara rule so this is just a simple one

449
00:21:16,020 --> 00:21:18,660
to look for the beginning of file record

450
00:21:18,660 --> 00:21:22,020
in Biff five and seven and so you can

451
00:21:22,020 --> 00:21:23,760
see it has an eight byte so you've got

452
00:21:23,760 --> 00:21:26,580
the 0908 and then you have eight bytes

453
00:21:26,580 --> 00:21:28,440
which is the length of the buff record

454
00:21:28,440 --> 00:21:31,260
and then you have the version five and

455
00:21:31,260 --> 00:21:34,980
then Excel 4.0 macros

456
00:21:34,980 --> 00:21:39,360
this one is Biff 8 with Excel 4.0 macros

457
00:21:39,360 --> 00:21:42,720
and length eight so you know figure that

458
00:21:42,720 --> 00:21:45,179
out uh and then this one is the longer

459
00:21:45,179 --> 00:21:47,940
one this is the newest one so Biff 8 16

460
00:21:47,940 --> 00:21:52,200
byte length uh version six has Excel 4.0

461
00:21:52,200 --> 00:21:54,780
macros and then that little trailing bit

462
00:21:54,780 --> 00:21:58,320
with the with the reserved bytes

463
00:21:58,320 --> 00:22:01,200
so these three rules will detect uh the

464
00:22:01,200 --> 00:22:04,740
buff record in a compound file they're

465
00:22:04,740 --> 00:22:06,659
nice and small and so they're not going

466
00:22:06,659 --> 00:22:10,500
to actually the they won't span uh

467
00:22:10,500 --> 00:22:12,299
they're not going to span a fragment

468
00:22:12,299 --> 00:22:14,640
because well they're they're never going

469
00:22:14,640 --> 00:22:17,159
to span a fragment I should say because

470
00:22:17,159 --> 00:22:19,799
this is the buff so this is always going

471
00:22:19,799 --> 00:22:22,860
to be at the beginning of a sector in

472
00:22:22,860 --> 00:22:25,500
the compound files file allocation table

473
00:22:25,500 --> 00:22:28,260
and so you're never going to have a

474
00:22:28,260 --> 00:22:31,740
problem with this spanning to two

475
00:22:31,740 --> 00:22:34,140
sectors so if you if you have like we're

476
00:22:34,140 --> 00:22:35,760
going to see later when we get into

477
00:22:35,760 --> 00:22:39,240
other indicators they can actually span

478
00:22:39,240 --> 00:22:42,900
two uh sectors and become fragmented and

479
00:22:42,900 --> 00:22:44,100
then you'll have a false negative

480
00:22:44,100 --> 00:22:46,679
because the file will actually have that

481
00:22:46,679 --> 00:22:48,659
record that you're looking for but it

482
00:22:48,659 --> 00:22:50,280
will be broken up so it can't be

483
00:22:50,280 --> 00:22:53,520
observed by Yara

484
00:22:53,520 --> 00:22:55,919
so the second uh the second opportunity

485
00:22:55,919 --> 00:22:57,780
for detection is called the bound sheet

486
00:22:57,780 --> 00:22:58,860
record

487
00:22:58,860 --> 00:23:01,020
so balance sheet record again is another

488
00:23:01,020 --> 00:23:03,299
it's a different Biff component

489
00:23:03,299 --> 00:23:05,700
and the content of a balance sheet

490
00:23:05,700 --> 00:23:07,980
record so there's one bound sheet record

491
00:23:07,980 --> 00:23:09,960
for each sheet so if you're familiar

492
00:23:09,960 --> 00:23:13,080
with Excel uh you've got the little tabs

493
00:23:13,080 --> 00:23:14,880
down at the bottom which you can change

494
00:23:14,880 --> 00:23:17,400
the sheet so you have sheet 1 sheet two

495
00:23:17,400 --> 00:23:19,559
you can change the name of those to

496
00:23:19,559 --> 00:23:22,380
something uh arbitrary but they begin a

497
00:23:22,380 --> 00:23:24,720
sheet one sheet two sheet three so each

498
00:23:24,720 --> 00:23:27,720
one of those sheets has a bound sheet

499
00:23:27,720 --> 00:23:28,620
record

500
00:23:28,620 --> 00:23:30,840
and so the bound sheet record the

501
00:23:30,840 --> 00:23:33,059
content in the bound sheet record has

502
00:23:33,059 --> 00:23:34,919
the name of the sheet so you know it

503
00:23:34,919 --> 00:23:37,260
begins with sheet1 sheet two sheet three

504
00:23:37,260 --> 00:23:40,740
if you change it uh if you're using an

505
00:23:40,740 --> 00:23:43,200
older version of excel if you change it

506
00:23:43,200 --> 00:23:46,380
it can only be ASCII characters in newer

507
00:23:46,380 --> 00:23:48,960
versions of excel the name is stored as

508
00:23:48,960 --> 00:23:50,100
unicode

509
00:23:50,100 --> 00:23:54,059
and so it has Unicode characters now the

510
00:23:54,059 --> 00:23:56,039
other the last bit of information that's

511
00:23:56,039 --> 00:23:58,320
in the the bound sheet record is the

512
00:23:58,320 --> 00:24:01,380
position in the Stream so uh where that

513
00:24:01,380 --> 00:24:03,780
bound sheet is actually located within

514
00:24:03,780 --> 00:24:06,240
the stream so it's basically uh the

515
00:24:06,240 --> 00:24:08,100
address it's like the address of the

516
00:24:08,100 --> 00:24:10,980
offset so the way Excel works is if you

517
00:24:10,980 --> 00:24:12,480
open something and then you make a

518
00:24:12,480 --> 00:24:15,780
change uh it might save that sheet

519
00:24:15,780 --> 00:24:17,640
somewhere else in the file allocation

520
00:24:17,640 --> 00:24:20,640
table as you know as its algorithms

521
00:24:20,640 --> 00:24:23,940
choose what sectors to to to to save it

522
00:24:23,940 --> 00:24:28,320
to so it would then save the offset of

523
00:24:28,320 --> 00:24:30,419
where it saved the bound sheet itself

524
00:24:30,419 --> 00:24:32,640
like the data for the bound sheet and it

525
00:24:32,640 --> 00:24:34,260
would save that position in the Stream

526
00:24:34,260 --> 00:24:36,600
in the bound sheet record which we're

527
00:24:36,600 --> 00:24:38,159
looking at here

528
00:24:38,159 --> 00:24:40,440
the name of the the name of the sheet

529
00:24:40,440 --> 00:24:42,480
can be stored in ASCII or in Unicode

530
00:24:42,480 --> 00:24:45,059
ASCII for older so Biff 7 and earlier is

531
00:24:45,059 --> 00:24:48,720
going to be ASCII Biff 8 is Unicode and

532
00:24:48,720 --> 00:24:52,320
the sheet the the sheet name has right

533
00:24:52,320 --> 00:24:54,720
before it is a number which is the

534
00:24:54,720 --> 00:24:58,740
length and the length for Biff 7 is the

535
00:24:58,740 --> 00:25:01,020
measurement in bytes so how many bytes

536
00:25:01,020 --> 00:25:04,200
uh the the name is and that you know it

537
00:25:04,200 --> 00:25:06,059
actually corresponds the you know the

538
00:25:06,059 --> 00:25:09,179
number of bytes uh in ASCII is also the

539
00:25:09,179 --> 00:25:11,400
number of characters but in Unicode

540
00:25:11,400 --> 00:25:13,860
because you have multiple bytes per

541
00:25:13,860 --> 00:25:17,220
character it actually measures it in uh

542
00:25:17,220 --> 00:25:18,780
the number of characters so that's a

543
00:25:18,780 --> 00:25:20,460
it's a difference that you you have to

544
00:25:20,460 --> 00:25:23,220
remember when you're looking at these uh

545
00:25:23,220 --> 00:25:25,380
uh Records

546
00:25:25,380 --> 00:25:29,400
now this is in off Vis so you can see

547
00:25:29,400 --> 00:25:32,580
here this is a bound sheet and you can

548
00:25:32,580 --> 00:25:34,980
the you know this is detected it as a

549
00:25:34,980 --> 00:25:37,500
subset of the Biff record

550
00:25:37,500 --> 00:25:39,360
and this is what it looks like so you

551
00:25:39,360 --> 00:25:44,220
have 85 H uh and then 14 is the length

552
00:25:44,220 --> 00:25:48,059
so this uh this bound sheet is 14 bytes

553
00:25:48,059 --> 00:25:49,080
long

554
00:25:49,080 --> 00:25:51,840
and then you can see over there those

555
00:25:51,840 --> 00:25:56,880
last few bytes 53 68 65 65 74 31 that

556
00:25:56,880 --> 00:26:00,720
sheet 1 with a capital S if you if who

557
00:26:00,720 --> 00:26:03,059
who here can translate directly in their

558
00:26:03,059 --> 00:26:07,320
head from uh hex to ASCII I can't but I

559
00:26:07,320 --> 00:26:09,419
I cheat I know

560
00:26:09,419 --> 00:26:11,760
um and then this is the same thing again

561
00:26:11,760 --> 00:26:14,700
using Ollie dump and the the plug-in

562
00:26:14,700 --> 00:26:16,620
Biff

563
00:26:16,620 --> 00:26:18,179
so we're going to do a little bit of

564
00:26:18,179 --> 00:26:20,220
bound sheet math

565
00:26:20,220 --> 00:26:21,779
um I hope everyone is prepared for a

566
00:26:21,779 --> 00:26:23,700
little bit of math this one is probably

567
00:26:23,700 --> 00:26:25,500
not going to be crazy math we're going

568
00:26:25,500 --> 00:26:27,059
to get a little bit we're going to keep

569
00:26:27,059 --> 00:26:29,100
stepping up the math a little bit uh

570
00:26:29,100 --> 00:26:30,539
later but

571
00:26:30,539 --> 00:26:32,640
this is the balance sheet record

572
00:26:32,640 --> 00:26:36,059
this is the magic number so in the bound

573
00:26:36,059 --> 00:26:37,740
sheet just like everything there's like

574
00:26:37,740 --> 00:26:39,360
a magic number at the beginning that

575
00:26:39,360 --> 00:26:41,220
signifies the start of that particular

576
00:26:41,220 --> 00:26:43,320
record type

577
00:26:43,320 --> 00:26:48,179
this is the length so zero e is 14 bytes

578
00:26:48,179 --> 00:26:52,919
uh this is sheet1 down here

579
00:26:52,919 --> 00:26:55,440
and then this is saying that the the the

580
00:26:55,440 --> 00:27:00,720
the name sheet1 is six characters long

581
00:27:00,720 --> 00:27:03,779
and then this is just it this so this

582
00:27:03,779 --> 00:27:06,299
here is eight bytes and this is an

583
00:27:06,299 --> 00:27:08,880
important uh an important number to keep

584
00:27:08,880 --> 00:27:12,000
in mind when we're going to build a

585
00:27:12,000 --> 00:27:16,080
um a Yar rule because the this is the

586
00:27:16,080 --> 00:27:19,559
minimum uh bounce sheet uh length

587
00:27:19,559 --> 00:27:24,000
because if you have a nameless sheet so

588
00:27:24,000 --> 00:27:26,400
if you remove all of the characters from

589
00:27:26,400 --> 00:27:29,580
that particular Tab and save it you're

590
00:27:29,580 --> 00:27:32,700
going to have nothing this this is going

591
00:27:32,700 --> 00:27:34,500
to be nothing these are going to be gone

592
00:27:34,500 --> 00:27:37,020
and then these are all going to be zeros

593
00:27:37,020 --> 00:27:39,900
and then this the other thing those

594
00:27:39,900 --> 00:27:42,299
other numbers are are not important for

595
00:27:42,299 --> 00:27:44,220
us right now I'll explain them in the

596
00:27:44,220 --> 00:27:45,960
moment but this is like the minimum

597
00:27:45,960 --> 00:27:49,860
bounce sheet record size of eight bytes

598
00:27:49,860 --> 00:27:53,220
so uh then you have the maximum balance

599
00:27:53,220 --> 00:27:55,500
sheet record and you have to kind of

600
00:27:55,500 --> 00:27:57,539
calculate this there's it's not in the

601
00:27:57,539 --> 00:27:59,340
documentation anywhere you just have to

602
00:27:59,340 --> 00:28:03,419
use it as logic but the maximum number

603
00:28:03,419 --> 00:28:06,840
of characters in UTF so UTF is going to

604
00:28:06,840 --> 00:28:08,760
be the one that absorbs the most number

605
00:28:08,760 --> 00:28:11,400
of bytes so the ASCII will be shorter so

606
00:28:11,400 --> 00:28:12,659
you want to if you're looking for

607
00:28:12,659 --> 00:28:14,760
maximum the maximum number is going to

608
00:28:14,760 --> 00:28:15,919
be in

609
00:28:15,919 --> 00:28:18,960
utf-8 and so the maximum number of

610
00:28:18,960 --> 00:28:22,080
characters that you can put in the sheet

611
00:28:22,080 --> 00:28:25,919
name is 31 and so 31 plus those

612
00:28:25,919 --> 00:28:27,960
housekeeping bytes that we saw and then

613
00:28:27,960 --> 00:28:32,220
the length uh that equals 136 bytes so

614
00:28:32,220 --> 00:28:35,159
88 x88

615
00:28:35,159 --> 00:28:38,940
so what we want to do is find this this

616
00:28:38,940 --> 00:28:41,700
is the beginning of uh of a Yar rule so

617
00:28:41,700 --> 00:28:43,620
what we're doing is we're we're pulling

618
00:28:43,620 --> 00:28:47,220
in an unsigned eight eight bit unsigned

619
00:28:47,220 --> 00:28:51,000
integer at position uh bounce sheet so

620
00:28:51,000 --> 00:28:52,620
the position of the bound sheet record

621
00:28:52,620 --> 00:28:56,100
that we're looking at and then the

622
00:28:56,100 --> 00:28:58,620
second byte with uh starting counting

623
00:28:58,620 --> 00:29:01,080
from zero so the zero fight is the first

624
00:29:01,080 --> 00:29:04,919
one you know zero one two and so we're

625
00:29:04,919 --> 00:29:08,100
taking the unsigned 8-bit integer uh at

626
00:29:08,100 --> 00:29:10,740
position two

627
00:29:10,740 --> 00:29:13,320
and so now we've got a maximum and a

628
00:29:13,320 --> 00:29:16,940
minimum boundary so we've got uh the the

629
00:29:16,940 --> 00:29:20,159
data that we're looking at needs to be

630
00:29:20,159 --> 00:29:23,880
above eight above or equal to eight and

631
00:29:23,880 --> 00:29:28,559
Below or equal to 88 in HEX

632
00:29:28,559 --> 00:29:31,020
now that's that's one you know one

633
00:29:31,020 --> 00:29:32,880
boundary that we're that we're using

634
00:29:32,880 --> 00:29:37,380
that we will use in uh in the Yar Rule

635
00:29:37,380 --> 00:29:42,840
now this right here this byte here

636
00:29:42,840 --> 00:29:46,980
this is the state of the of the sheet uh

637
00:29:46,980 --> 00:29:48,720
and there's three possible States

638
00:29:48,720 --> 00:29:52,380
there's uh visible hidden and very

639
00:29:52,380 --> 00:29:56,220
hidden uh you know

640
00:29:56,220 --> 00:30:00,539
I I don't know I mean I don't know your

641
00:30:00,539 --> 00:30:02,220
your guess is as good as mine what their

642
00:30:02,220 --> 00:30:03,899
thinking was there but there are three

643
00:30:03,899 --> 00:30:07,380
states hidden very hidden and visible

644
00:30:07,380 --> 00:30:11,820
so visible is zero so if the state this

645
00:30:11,820 --> 00:30:15,659
byte is zero it's uh visible

646
00:30:15,659 --> 00:30:17,700
so these are the three states you have

647
00:30:17,700 --> 00:30:21,360
visible zero hidden is one and then very

648
00:30:21,360 --> 00:30:23,039
hidden is two

649
00:30:23,039 --> 00:30:26,760
now if you'll notice this byte this

650
00:30:26,760 --> 00:30:29,279
position uh doesn't have anything else

651
00:30:29,279 --> 00:30:32,039
in these other bits so these other bits

652
00:30:32,039 --> 00:30:33,779
are reserved and they're all supposed to

653
00:30:33,779 --> 00:30:37,399
be zero what I found by looking through

654
00:30:37,399 --> 00:30:41,159
uh an absurd number of uh malicious

655
00:30:41,159 --> 00:30:45,059
Excel files is that in these reserved

656
00:30:45,059 --> 00:30:47,279
bits there are certain malware actors

657
00:30:47,279 --> 00:30:50,940
that put data in those bits and I got to

658
00:30:50,940 --> 00:30:52,559
tell you like if you're out there

659
00:30:52,559 --> 00:30:55,679
writing malware doing something unique

660
00:30:55,679 --> 00:30:57,960
like this is awesome please continue

661
00:30:57,960 --> 00:31:00,299
doing that because it allows me to

662
00:31:00,299 --> 00:31:02,520
associate different files that you

663
00:31:02,520 --> 00:31:04,320
didn't think I was able to associate

664
00:31:04,320 --> 00:31:06,600
because you're doing the same weird

665
00:31:06,600 --> 00:31:11,460
in two different files so these uh these

666
00:31:11,460 --> 00:31:14,460
these bits should never have ones but

667
00:31:14,460 --> 00:31:17,640
you know there's a quite a quite a group

668
00:31:17,640 --> 00:31:19,559
of different malware actors that for

669
00:31:19,559 --> 00:31:21,419
some reason whatever binder they're

670
00:31:21,419 --> 00:31:24,000
using or whatever thing they're doing uh

671
00:31:24,000 --> 00:31:27,240
puts data in these reserved bits and so

672
00:31:27,240 --> 00:31:29,880
it's a nice indicator if you see data in

673
00:31:29,880 --> 00:31:33,320
these bits that file is malicious 100

674
00:31:33,320 --> 00:31:36,480
100 confident

675
00:31:36,480 --> 00:31:39,600
so what you need to do because those bit

676
00:31:39,600 --> 00:31:42,600
you can't just compare that that bite

677
00:31:42,600 --> 00:31:45,720
you can't just say take this bite and

678
00:31:45,720 --> 00:31:49,679
compare it to zero one or two because if

679
00:31:49,679 --> 00:31:51,720
you put data in those other bytes it's

680
00:31:51,720 --> 00:31:54,419
going to change that number right you're

681
00:31:54,419 --> 00:31:57,000
going to change that number to a number

682
00:31:57,000 --> 00:31:59,760
that's not 0 1 or 2 because of the you

683
00:31:59,760 --> 00:32:03,539
know the bitwise arithmetic so what you

684
00:32:03,539 --> 00:32:06,779
need to do is use a bitwise and so you

685
00:32:06,779 --> 00:32:08,940
take the data from that byte that we

686
00:32:08,940 --> 00:32:10,799
just talked about and we found from

687
00:32:10,799 --> 00:32:12,240
position eight

688
00:32:12,240 --> 00:32:14,940
and then you do a bit wise and against

689
00:32:14,940 --> 00:32:17,760
the mask of three

690
00:32:17,760 --> 00:32:21,539
and so if the if the if the bitwise and

691
00:32:21,539 --> 00:32:25,799
against the mask of 3 equals zero then

692
00:32:25,799 --> 00:32:28,380
this the this indicates that it is

693
00:32:28,380 --> 00:32:30,299
visible

694
00:32:30,299 --> 00:32:34,200
if the result of that calculation uh

695
00:32:34,200 --> 00:32:37,380
comes and you know equals one then that

696
00:32:37,380 --> 00:32:40,860
means it's hidden and then if it equals

697
00:32:40,860 --> 00:32:43,860
two it's very hidden

698
00:32:43,860 --> 00:32:46,799
so that's a way to detect whether the

699
00:32:46,799 --> 00:32:49,559
detect the state even in those malicious

700
00:32:49,559 --> 00:32:53,580
uh Excel documents now this one this

701
00:32:53,580 --> 00:32:55,620
this test is going to show you so if

702
00:32:55,620 --> 00:32:58,500
this test is true this is a malicious

703
00:32:58,500 --> 00:33:02,159
document so if that if the data in that

704
00:33:02,159 --> 00:33:04,500
particular uh

705
00:33:04,500 --> 00:33:07,799
uh bite is greater than two it's

706
00:33:07,799 --> 00:33:10,020
automatically malicious like there's no

707
00:33:10,020 --> 00:33:11,880
there's no if ands or buts about it it

708
00:33:11,880 --> 00:33:14,159
is malicious

709
00:33:14,159 --> 00:33:18,299
uh okay so the next the next position in

710
00:33:18,299 --> 00:33:23,039
here is this one and the uh a one uh

711
00:33:23,039 --> 00:33:25,080
just the number one in this particular

712
00:33:25,080 --> 00:33:28,080
bite indicates that this bound sheet

713
00:33:28,080 --> 00:33:31,980
contains Excel 4.0 macros so this little

714
00:33:31,980 --> 00:33:34,320
bugger right here is the thing that you

715
00:33:34,320 --> 00:33:38,279
want to uh determine and then exclude uh

716
00:33:38,279 --> 00:33:39,960
if you see it

717
00:33:39,960 --> 00:33:42,419
so this is a bounce sheet record

718
00:33:42,419 --> 00:33:45,720
um by the way I have actually removed

719
00:33:45,720 --> 00:33:49,140
the information so if you look there's a

720
00:33:49,140 --> 00:33:51,960
five byte jump so we've got the balance

721
00:33:51,960 --> 00:33:55,919
sheet uh magic number 85 and then we

722
00:33:55,919 --> 00:33:58,440
have a length here and so the length can

723
00:33:58,440 --> 00:34:00,779
be many different lengths so I've got a

724
00:34:00,779 --> 00:34:03,840
wild card for the length the second byte

725
00:34:03,840 --> 00:34:07,440
of the length is always zero uh because

726
00:34:07,440 --> 00:34:10,619
the the mat that the the maximum length

727
00:34:10,619 --> 00:34:12,679
that we calculated a bit ago which is

728
00:34:12,679 --> 00:34:17,820
136 I think is uh 88 bytes 88. uh that's

729
00:34:17,820 --> 00:34:20,940
the maximum so the second byte of that

730
00:34:20,940 --> 00:34:23,760
number is always zero so you can go

731
00:34:23,760 --> 00:34:26,639
ahead and put a zero in your Yar rule

732
00:34:26,639 --> 00:34:30,800
and then because having uh 8500

733
00:34:30,800 --> 00:34:34,199
uh and then a wild card and then zero

734
00:34:34,199 --> 00:34:37,619
and then a five byte jump and then a uh

735
00:34:37,619 --> 00:34:40,800
a one so that is the

736
00:34:40,800 --> 00:34:42,839
um that's the the thing that we're going

737
00:34:42,839 --> 00:34:46,440
to be looking for the reason I put the

738
00:34:46,440 --> 00:34:49,800
visibility byte in the jump is because

739
00:34:49,800 --> 00:34:52,199
of those malicious folks that put

740
00:34:52,199 --> 00:34:54,960
garbage data in those bytes because that

741
00:34:54,960 --> 00:34:57,660
that bite even though it should only be

742
00:34:57,660 --> 00:35:00,540
zero one or two uh it actually can just

743
00:35:00,540 --> 00:35:02,339
be anything so I went ahead and threw it

744
00:35:02,339 --> 00:35:04,080
in the jump

745
00:35:04,080 --> 00:35:08,220
so this is your uh this is a nice and

746
00:35:08,220 --> 00:35:11,460
fun uh Yar rule so what I'm doing here

747
00:35:11,460 --> 00:35:15,420
is first of all I'm making a loop and

748
00:35:15,420 --> 00:35:17,579
this is looping through all of the

749
00:35:17,579 --> 00:35:19,800
instances of a bound sheet so maybe

750
00:35:19,800 --> 00:35:22,980
you're going to find uh you know five or

751
00:35:22,980 --> 00:35:25,260
six you know some some malware authors

752
00:35:25,260 --> 00:35:27,839
will put multiple sheets in one

753
00:35:27,839 --> 00:35:30,240
particular malicious file so you need to

754
00:35:30,240 --> 00:35:32,220
assert Loop through all of them so this

755
00:35:32,220 --> 00:35:33,599
is going to find each one of those

756
00:35:33,599 --> 00:35:36,359
instances of a bounce sheet so you're

757
00:35:36,359 --> 00:35:38,040
going from one

758
00:35:38,040 --> 00:35:40,200
to the number of bound sheets that it

759
00:35:40,200 --> 00:35:43,380
finds and then this is how you indicate

760
00:35:43,380 --> 00:35:46,920
that in uh in your Yara ease

761
00:35:46,920 --> 00:35:48,720
then this

762
00:35:48,720 --> 00:35:51,720
what I'm doing here is looping through J

763
00:35:51,720 --> 00:35:56,640
so I'm comparing this uh to 0 1 and 2

764
00:35:56,640 --> 00:36:00,000
that way I catch uh all visibility

765
00:36:00,000 --> 00:36:01,980
settings

766
00:36:01,980 --> 00:36:04,200
and then finally I've got the boundaries

767
00:36:04,200 --> 00:36:06,420
of the lower bound and the upper Bound

768
00:36:06,420 --> 00:36:10,140
for the length of the the bound the the

769
00:36:10,140 --> 00:36:12,900
Sheep name

770
00:36:12,900 --> 00:36:15,119
uh this is another this is another one

771
00:36:15,119 --> 00:36:18,599
so this is uh so this one has the sorry

772
00:36:18,599 --> 00:36:22,700
this one is one that has uh that

773
00:36:22,700 --> 00:36:26,640
doesn't have those sorry can have any

774
00:36:26,640 --> 00:36:30,240
reserve bit set and this one uh

775
00:36:30,240 --> 00:36:32,760
guarantees so if this matches you're

776
00:36:32,760 --> 00:36:35,579
guaranteed that those Reserve bits are

777
00:36:35,579 --> 00:36:37,800
set and so if this matches you're

778
00:36:37,800 --> 00:36:40,440
definitely malicious now by the way I

779
00:36:40,440 --> 00:36:42,660
want to talk for a second about the the

780
00:36:42,660 --> 00:36:46,320
the brittleness of a Yar rule so the

781
00:36:46,320 --> 00:36:48,060
more complexity that you add to a Yar

782
00:36:48,060 --> 00:36:51,300
rule the more likely it is to uh you

783
00:36:51,300 --> 00:36:55,260
know not match right and so the utility

784
00:36:55,260 --> 00:36:58,740
of these Yar rolls are more for uh

785
00:36:58,740 --> 00:37:00,720
identifying something but if you've got

786
00:37:00,720 --> 00:37:03,240
if you if you have

787
00:37:03,240 --> 00:37:06,599
a massive number of files and you just

788
00:37:06,599 --> 00:37:10,560
want to uh have a cast a wider net let's

789
00:37:10,560 --> 00:37:13,700
say all you really need is the string

790
00:37:13,700 --> 00:37:16,079
you don't actually have to do any of

791
00:37:16,079 --> 00:37:17,700
this other stuff this other stuff is

792
00:37:17,700 --> 00:37:19,800
just kind of to remove a few false

793
00:37:19,800 --> 00:37:22,200
positives but if you want to if you want

794
00:37:22,200 --> 00:37:25,140
to have a looser a looser rule a less

795
00:37:25,140 --> 00:37:28,800
brittle rule then just have the the the

796
00:37:28,800 --> 00:37:31,980
the string by itself

797
00:37:31,980 --> 00:37:34,380
so this is the third opportunity for

798
00:37:34,380 --> 00:37:35,760
detection and it's in the document

799
00:37:35,760 --> 00:37:37,280
summary information

800
00:37:37,280 --> 00:37:41,280
I kind of amusing you can see when I was

801
00:37:41,280 --> 00:37:44,099
last working on slides because I uh you

802
00:37:44,099 --> 00:37:47,400
can see the time timestamp on there so I

803
00:37:47,400 --> 00:37:49,740
wanted to show you uh this is this is

804
00:37:49,740 --> 00:37:51,720
just a slide I made last night because I

805
00:37:51,720 --> 00:37:55,200
wanted to show you uh where as a point

806
00:37:55,200 --> 00:37:59,000
of reference where in Excel

807
00:37:59,000 --> 00:38:02,760
uh is the data coming from that's in a

808
00:38:02,760 --> 00:38:04,920
document summary information stream in a

809
00:38:04,920 --> 00:38:07,020
compound file so this is where it all

810
00:38:07,020 --> 00:38:08,820
comes from when you you know fiddle with

811
00:38:08,820 --> 00:38:12,359
all this stuff and again I love it when

812
00:38:12,359 --> 00:38:14,940
uh adversaries put like some sort of

813
00:38:14,940 --> 00:38:18,060
information in here especially you know

814
00:38:18,060 --> 00:38:21,119
North Korean adversaries are you know

815
00:38:21,119 --> 00:38:22,920
they they love just putting their

816
00:38:22,920 --> 00:38:25,980
calling card in here and then you can

817
00:38:25,980 --> 00:38:27,780
correlate different documents with

818
00:38:27,780 --> 00:38:30,359
different uh different uh North Korean

819
00:38:30,359 --> 00:38:34,500
adversaries but this is a very rich uh

820
00:38:34,500 --> 00:38:37,619
area in a compound file

821
00:38:37,619 --> 00:38:39,839
now this part content this is where we

822
00:38:39,839 --> 00:38:42,300
get into the part that has the Excel 4.0

823
00:38:42,300 --> 00:38:44,480
macros information

824
00:38:44,480 --> 00:38:47,520
now this is what it looks like when

825
00:38:47,520 --> 00:38:50,099
you've got uh five worksheets so I you

826
00:38:50,099 --> 00:38:51,960
know I didn't do anything other than you

827
00:38:51,960 --> 00:38:53,700
know add a worksheet add a worksheet add

828
00:38:53,700 --> 00:38:57,240
a worksheet and then go look at the the

829
00:38:57,240 --> 00:38:59,760
um the document summary information in

830
00:38:59,760 --> 00:39:03,000
the content and so if you take and I

831
00:39:03,000 --> 00:39:05,280
saved this and then ran it through exif

832
00:39:05,280 --> 00:39:07,440
tool sorry this is a little bit out of

833
00:39:07,440 --> 00:39:10,500
out of focus but what you get is called

834
00:39:10,500 --> 00:39:13,619
heading Pairs and so it shows you that

835
00:39:13,619 --> 00:39:16,440
there are five heading pairs that it is

836
00:39:16,440 --> 00:39:18,720
parsed out of the document summary

837
00:39:18,720 --> 00:39:20,640
information

838
00:39:20,640 --> 00:39:23,700
now if you have Excel 4.0 and this is in

839
00:39:23,700 --> 00:39:25,740
Russian this is a Russian local Russian

840
00:39:25,740 --> 00:39:29,400
language uh localized localization uh if

841
00:39:29,400 --> 00:39:32,099
you have Excel 4.0 macros you run it

842
00:39:32,099 --> 00:39:34,380
through exif tool and if or if you just

843
00:39:34,380 --> 00:39:37,680
open it in a in a hex editor you can see

844
00:39:37,680 --> 00:39:40,200
it it's you know it's not it's not

845
00:39:40,200 --> 00:39:43,619
encoded it's actually just in letters

846
00:39:43,619 --> 00:39:46,140
um well sorry Russian would be encoded

847
00:39:46,140 --> 00:39:47,579
but if it's in English another language

848
00:39:47,579 --> 00:39:49,440
certain other languages uh it wouldn't

849
00:39:49,440 --> 00:39:53,339
be encoded but uh you'll see up here is

850
00:39:53,339 --> 00:39:55,740
worksheets so it's the same same thing

851
00:39:55,740 --> 00:39:59,460
you know worksheets list the and then uh

852
00:39:59,460 --> 00:40:02,760
you would have one Excel 4.0 macro sheet

853
00:40:02,760 --> 00:40:06,599
so macrosi Excel 4.0

854
00:40:06,599 --> 00:40:09,780
so now we're going to do get into just a

855
00:40:09,780 --> 00:40:12,119
taste of linguistics a little tiny Taste

856
00:40:12,119 --> 00:40:14,220
of linguistics so if you're familiar

857
00:40:14,220 --> 00:40:16,740
with uh certain languages have what's

858
00:40:16,740 --> 00:40:19,680
called post-positive adjectives and some

859
00:40:19,680 --> 00:40:21,660
languages have pre-positive adjectives

860
00:40:21,660 --> 00:40:24,300
so a pre-positive adjective is an

861
00:40:24,300 --> 00:40:26,280
adjective that exists before that's

862
00:40:26,280 --> 00:40:29,880
written or said before the noun that it

863
00:40:29,880 --> 00:40:31,800
modifies so that's a pre-positive

864
00:40:31,800 --> 00:40:33,960
adjective and some languages have a

865
00:40:33,960 --> 00:40:36,720
post-positive adjective which follows

866
00:40:36,720 --> 00:40:39,540
the noun that that it modifies I speak

867
00:40:39,540 --> 00:40:41,339
Russian so I know that there's actually

868
00:40:41,339 --> 00:40:43,680
no word order in Russian I know that but

869
00:40:43,680 --> 00:40:45,660
there are conventions that are used in

870
00:40:45,660 --> 00:40:47,520
certain languages especially for

871
00:40:47,520 --> 00:40:51,900
borrowed words so Excel 4.0 is the

872
00:40:51,900 --> 00:40:56,040
adjective and Excel 4.0 is modifying the

873
00:40:56,040 --> 00:40:57,780
noun macros

874
00:40:57,780 --> 00:41:01,079
and so uh in Russian with the

875
00:41:01,079 --> 00:41:04,859
localization in Russian the uh the

876
00:41:04,859 --> 00:41:07,260
adjective is a post-positive adjective

877
00:41:07,260 --> 00:41:11,280
and it follows the noun macros macrosi

878
00:41:11,280 --> 00:41:17,400
and so what you get is a space character

879
00:41:17,400 --> 00:41:20,880
between the word macros and Excel 4.0

880
00:41:20,880 --> 00:41:23,579
and then you have a null byte which

881
00:41:23,579 --> 00:41:26,520
indicates the end of the string at this

882
00:41:26,520 --> 00:41:27,420
end

883
00:41:27,420 --> 00:41:30,900
now uh pre-positive adjectives so that

884
00:41:30,900 --> 00:41:34,380
would be English so you've got Excel 4.0

885
00:41:34,380 --> 00:41:37,320
is the adjective and then the noun is

886
00:41:37,320 --> 00:41:40,680
macros and so you see you've got the uh

887
00:41:40,680 --> 00:41:43,920
the the preceding null byte which begins

888
00:41:43,920 --> 00:41:46,380
this the the string

889
00:41:46,380 --> 00:41:49,920
and then the 20 is the the space is to

890
00:41:49,920 --> 00:41:53,220
the right after the Excel 4.0

891
00:41:53,220 --> 00:41:56,060
so then you have some weird ones so I

892
00:41:56,060 --> 00:41:59,880
and and again like I went through all

893
00:41:59,880 --> 00:42:02,339
the languages and all the different

894
00:42:02,339 --> 00:42:04,859
um localizations that I could possibly

895
00:42:04,859 --> 00:42:07,859
find examples of and then created files

896
00:42:07,859 --> 00:42:10,200
myself and looked at uh all the

897
00:42:10,200 --> 00:42:13,140
different permutations and so there was

898
00:42:13,140 --> 00:42:16,020
one uh one language which was kind of

899
00:42:16,020 --> 00:42:18,359
out there on its own which is Norwegian

900
00:42:18,359 --> 00:42:22,380
and so uh for some reason in Norwegian

901
00:42:22,380 --> 00:42:25,079
instead of having a space they use a

902
00:42:25,079 --> 00:42:29,820
dash uh a hyphen so there's a 2d in here

903
00:42:29,820 --> 00:42:32,520
between the adjective sorry between the

904
00:42:32,520 --> 00:42:36,000
adjective and the noun

905
00:42:36,000 --> 00:42:40,440
so uh there's one false positive that I

906
00:42:40,440 --> 00:42:43,680
found and so these are in msis and

907
00:42:43,680 --> 00:42:45,780
installer patches and it makes sense

908
00:42:45,780 --> 00:42:50,480
because the installer patch for Excel

909
00:42:50,480 --> 00:42:53,760
contains the string you know Excel 4.0

910
00:42:53,760 --> 00:42:55,680
macros but this doesn't indicate that

911
00:42:55,680 --> 00:42:59,040
it's a an Excel document it's just the

912
00:42:59,040 --> 00:43:01,200
actual installer itself

913
00:43:01,200 --> 00:43:05,579
so uh this is a false positive which you

914
00:43:05,579 --> 00:43:09,240
have to use as a filter to exclude from

915
00:43:09,240 --> 00:43:12,240
uh from your from your data set

916
00:43:12,240 --> 00:43:15,060
there's an alternative way to filter

917
00:43:15,060 --> 00:43:17,579
false positives which will catch this

918
00:43:17,579 --> 00:43:21,300
one naturally and it is to add the

919
00:43:21,300 --> 00:43:24,500
property set header so every single

920
00:43:24,500 --> 00:43:27,200
entry in a document summary information

921
00:43:27,200 --> 00:43:31,319
stream in a compound file is a property

922
00:43:31,319 --> 00:43:34,319
set and each one of those property sets

923
00:43:34,319 --> 00:43:37,079
has a magic number and then it has a

924
00:43:37,079 --> 00:43:40,440
record length and so if you include if

925
00:43:40,440 --> 00:43:42,180
you include the magic number in the

926
00:43:42,180 --> 00:43:45,119
record length in your Yar rule along

927
00:43:45,119 --> 00:43:46,800
with the string that you're looking for

928
00:43:46,800 --> 00:43:49,140
together you're going to automatically

929
00:43:49,140 --> 00:43:51,480
exclude msis and installer patches

930
00:43:51,480 --> 00:43:53,700
because that string doesn't this this

931
00:43:53,700 --> 00:43:57,619
particular string doesn't occur with the

932
00:43:57,619 --> 00:44:00,060
property set headers

933
00:44:00,060 --> 00:44:02,819
so you get this this is what you end up

934
00:44:02,819 --> 00:44:04,020
with

935
00:44:04,020 --> 00:44:08,099
um and this is uh using this is using

936
00:44:08,099 --> 00:44:10,380
just the strings without the property

937
00:44:10,380 --> 00:44:12,720
set headers so I've got the three

938
00:44:12,720 --> 00:44:16,980
permutations of excel 4.0 macros and

939
00:44:16,980 --> 00:44:19,380
then this is the false positive so any

940
00:44:19,380 --> 00:44:21,900
of those three that are the uh correct

941
00:44:21,900 --> 00:44:25,200
and then not false positive

942
00:44:25,200 --> 00:44:27,300
now this is the three so we don't we can

943
00:44:27,300 --> 00:44:30,060
get rid of that false positive and we

944
00:44:30,060 --> 00:44:32,579
can use these three permutations which

945
00:44:32,579 --> 00:44:37,740
include the uh the header

946
00:44:37,740 --> 00:44:40,500
so this is the one so this particular

947
00:44:40,500 --> 00:44:43,140
one document summary information that

948
00:44:43,140 --> 00:44:46,560
property set can occur anywhere in the

949
00:44:46,560 --> 00:44:48,540
document summary information depending

950
00:44:48,540 --> 00:44:52,200
on what uh was saved before it and what

951
00:44:52,200 --> 00:44:54,900
was saved after it and so because it's

952
00:44:54,900 --> 00:44:59,880
not uh early in that sector or early in

953
00:44:59,880 --> 00:45:04,500
that record it can span two sectors and

954
00:45:04,500 --> 00:45:07,619
so this particular type of Yar rule is

955
00:45:07,619 --> 00:45:11,760
going to have some uh you know not often

956
00:45:11,760 --> 00:45:14,460
I had to you know I had a defined one

957
00:45:14,460 --> 00:45:17,060
but eventually I found one

958
00:45:17,060 --> 00:45:20,640
where that particular and I think this

959
00:45:20,640 --> 00:45:22,980
is Chinese that's why that's why you

960
00:45:22,980 --> 00:45:25,460
don't actually see letters up there but

961
00:45:25,460 --> 00:45:28,560
this is Excel 4.0 well you can see down

962
00:45:28,560 --> 00:45:32,400
here Excel 4.0 but the word macros is

963
00:45:32,400 --> 00:45:36,599
actually split across two uh different

964
00:45:36,599 --> 00:45:39,180
sectors so at a boundary of two sectors

965
00:45:39,180 --> 00:45:43,500
and so my rule is not going to not going

966
00:45:43,500 --> 00:45:45,420
to detect this one properly so it's just

967
00:45:45,420 --> 00:45:48,119
something to keep in mind this is a a

968
00:45:48,119 --> 00:45:52,380
problem now backing up a little bit uh

969
00:45:52,380 --> 00:45:54,420
you know all of these files that we're

970
00:45:54,420 --> 00:45:59,220
looking at because the magic number is

971
00:45:59,220 --> 00:46:01,920
for a compound file I have the problem

972
00:46:01,920 --> 00:46:05,940
of this you know have if I use a Yar

973
00:46:05,940 --> 00:46:07,859
rule to look at the magic number of the

974
00:46:07,859 --> 00:46:11,160
file I'm going to also find Word files

975
00:46:11,160 --> 00:46:14,280
and PowerPoint files and MSI files and

976
00:46:14,280 --> 00:46:17,640
you know I think there's even like uh

977
00:46:17,640 --> 00:46:20,700
some engineering software that you that

978
00:46:20,700 --> 00:46:23,099
creates you know compound and Hangul

979
00:46:23,099 --> 00:46:25,380
word processor all these different types

980
00:46:25,380 --> 00:46:27,180
so I want to know

981
00:46:27,180 --> 00:46:30,000
what is an Excel document how do I know

982
00:46:30,000 --> 00:46:33,180
what an Excel document is so I took a

983
00:46:33,180 --> 00:46:34,980
step back and I thought how can I

984
00:46:34,980 --> 00:46:37,140
identify an Excel document so there's

985
00:46:37,140 --> 00:46:39,000
three ways that you can identify an

986
00:46:39,000 --> 00:46:42,420
Excel document uh the way that's really

987
00:46:42,420 --> 00:46:45,119
strong is looking at mime type so this

988
00:46:45,119 --> 00:46:47,400
is coming back from

989
00:46:47,400 --> 00:46:52,800
from the magic plug-in for uh the magic

990
00:46:52,800 --> 00:46:57,420
module in uh in Yara or using exif tool

991
00:46:57,420 --> 00:46:59,280
or whatever tool you want to use to find

992
00:46:59,280 --> 00:47:01,500
the mime type that's a very strong

993
00:47:01,500 --> 00:47:04,680
method of of determining it you can also

994
00:47:04,680 --> 00:47:06,480
look at what's called the root storage

995
00:47:06,480 --> 00:47:09,420
object class ID which we're going to

996
00:47:09,420 --> 00:47:11,700
talk about in a moment and you can also

997
00:47:11,700 --> 00:47:15,839
look at the stream names so in the root

998
00:47:15,839 --> 00:47:18,240
directory you have the names of the

999
00:47:18,240 --> 00:47:21,119
streams and if the compound file has a

1000
00:47:21,119 --> 00:47:23,880
stream name of workbook or a stream name

1001
00:47:23,880 --> 00:47:26,460
of book these both indicate that the

1002
00:47:26,460 --> 00:47:28,440
file is Excel

1003
00:47:28,440 --> 00:47:31,819
so mime type this is like the easy one

1004
00:47:31,819 --> 00:47:34,980
uh you know duh magic mime type

1005
00:47:34,980 --> 00:47:38,040
application vnd Ms Excel that's an Excel

1006
00:47:38,040 --> 00:47:39,780
file okay

1007
00:47:39,780 --> 00:47:40,680
um

1008
00:47:40,680 --> 00:47:42,660
so that's the that's the easy one the

1009
00:47:42,660 --> 00:47:45,900
problem is that this particular uh

1010
00:47:45,900 --> 00:47:47,940
module in

1011
00:47:47,940 --> 00:47:51,780
um in in Yara is rather slow so it's not

1012
00:47:51,780 --> 00:47:54,300
a good module to use if you're throwing

1013
00:47:54,300 --> 00:47:58,020
like a large large numbers of files at

1014
00:47:58,020 --> 00:48:00,300
Yara and you want things to be efficient

1015
00:48:00,300 --> 00:48:03,060
you want to use uh you know Yar rules

1016
00:48:03,060 --> 00:48:04,980
that don't use a module

1017
00:48:04,980 --> 00:48:07,140
so we're going to look at the root

1018
00:48:07,140 --> 00:48:10,800
storage object class ID

1019
00:48:10,800 --> 00:48:13,500
so this is not a documented feature it's

1020
00:48:13,500 --> 00:48:15,000
something that you have to kind of

1021
00:48:15,000 --> 00:48:17,579
either figure out on your own there's no

1022
00:48:17,579 --> 00:48:19,579
documentation for it however

1023
00:48:19,579 --> 00:48:22,980
there are a few places that I found on

1024
00:48:22,980 --> 00:48:26,760
the internet where they record known uh

1025
00:48:26,760 --> 00:48:29,339
class IDs and Associate those with the

1026
00:48:29,339 --> 00:48:31,200
software that created that particular

1027
00:48:31,200 --> 00:48:32,280
file

1028
00:48:32,280 --> 00:48:36,480
and the first one is archiveteam.org the

1029
00:48:36,480 --> 00:48:38,880
second one is Ollie tools which I think

1030
00:48:38,880 --> 00:48:40,740
you're familiar with so both of these

1031
00:48:40,740 --> 00:48:43,619
are collections of known class IDs that

1032
00:48:43,619 --> 00:48:45,540
are uh you know this is high quality

1033
00:48:45,540 --> 00:48:47,040
data

1034
00:48:47,040 --> 00:48:50,880
so the root storage object class ID uh

1035
00:48:50,880 --> 00:48:53,220
is seen here so the root entry and

1036
00:48:53,220 --> 00:48:55,740
you'll see CLS ID and this is what it

1037
00:48:55,740 --> 00:48:59,760
looks like it's a uuid okay and so this

1038
00:48:59,760 --> 00:49:03,599
is the uuid for this is actually the

1039
00:49:03,599 --> 00:49:05,280
file that I created last night and I

1040
00:49:05,280 --> 00:49:08,460
opened it in um in cerbero profiler and

1041
00:49:08,460 --> 00:49:11,760
so this is the class ID this is the hex

1042
00:49:11,760 --> 00:49:15,960
representation of a uuid

1043
00:49:15,960 --> 00:49:18,720
so there's two ways there's two data

1044
00:49:18,720 --> 00:49:21,060
points that you need to find in the

1045
00:49:21,060 --> 00:49:23,579
compound files header to find the

1046
00:49:23,579 --> 00:49:26,760
location of the root entry so the offset

1047
00:49:26,760 --> 00:49:29,220
of the root entry first number is the

1048
00:49:29,220 --> 00:49:31,619
sector shift and the second number is

1049
00:49:31,619 --> 00:49:34,680
the sector number of the first directory

1050
00:49:34,680 --> 00:49:37,500
sector so using these two numbers you

1051
00:49:37,500 --> 00:49:40,319
can calculate where the offset of the

1052
00:49:40,319 --> 00:49:42,720
root directory begins and then from

1053
00:49:42,720 --> 00:49:44,099
there you can find all the information

1054
00:49:44,099 --> 00:49:45,660
that we're going to be looking at in a

1055
00:49:45,660 --> 00:49:47,940
moment so this is a visual

1056
00:49:47,940 --> 00:49:50,040
representation of those two so the

1057
00:49:50,040 --> 00:49:52,260
sector shift is pretty close to the

1058
00:49:52,260 --> 00:49:53,819
beginning of the file then you know

1059
00:49:53,819 --> 00:49:56,520
shortly after that you've got the the

1060
00:49:56,520 --> 00:49:59,660
directory first sector

1061
00:49:59,660 --> 00:50:02,819
uh this is the calculation that you need

1062
00:50:02,819 --> 00:50:05,700
to use the equation so the offset is uh

1063
00:50:05,700 --> 00:50:07,740
2 to the power of s which is the sector

1064
00:50:07,740 --> 00:50:10,380
shift plus n which is the number of the

1065
00:50:10,380 --> 00:50:13,200
first directory sector times 2 to the

1066
00:50:13,200 --> 00:50:15,300
power of s again

1067
00:50:15,300 --> 00:50:19,079
um now this cut this has a a little bit

1068
00:50:19,079 --> 00:50:21,599
of a an interesting twist because

1069
00:50:21,599 --> 00:50:24,359
there's no exponent operator in Yara you

1070
00:50:24,359 --> 00:50:26,160
don't have a way to do exponent so

1071
00:50:26,160 --> 00:50:28,560
there's no like carrot operate well I

1072
00:50:28,560 --> 00:50:30,420
mean there's there isn't an exponent

1073
00:50:30,420 --> 00:50:32,760
operator and so what you have to do is

1074
00:50:32,760 --> 00:50:36,839
do a bitwise left shift to calculate the

1075
00:50:36,839 --> 00:50:40,619
uh the exponent so you take one bitwise

1076
00:50:40,619 --> 00:50:43,500
left shift to S okay

1077
00:50:43,500 --> 00:50:45,240
told you we're getting into some a

1078
00:50:45,240 --> 00:50:47,579
little bit more complex math

1079
00:50:47,579 --> 00:50:49,980
um and so what you do is you you want to

1080
00:50:49,980 --> 00:50:51,720
reduce the terms of the equation so if

1081
00:50:51,720 --> 00:50:56,579
we go back here and look uh offset 30 is

1082
00:50:56,579 --> 00:51:00,359
the sector shift offset 48 is the

1083
00:51:00,359 --> 00:51:03,540
directory first sector and so what we're

1084
00:51:03,540 --> 00:51:05,819
doing here is we're taking those two

1085
00:51:05,819 --> 00:51:09,960
values so this is the sector shift and

1086
00:51:09,960 --> 00:51:13,260
that one is the directory first sector

1087
00:51:13,260 --> 00:51:15,660
and then I have just you know I've uh

1088
00:51:15,660 --> 00:51:18,900
reduced the terms uh from that previous

1089
00:51:18,900 --> 00:51:21,660
equation now

1090
00:51:21,660 --> 00:51:25,339
what we want to do is find the class ID

1091
00:51:25,339 --> 00:51:28,619
and so the class ID is not at the

1092
00:51:28,619 --> 00:51:31,619
beginning of the root uh uh root entry

1093
00:51:31,619 --> 00:51:34,859
it's actually 880 bytes into the root

1094
00:51:34,859 --> 00:51:39,780
entry and so this is the location of the

1095
00:51:39,780 --> 00:51:43,140
root and then 80 bytes in is the class

1096
00:51:43,140 --> 00:51:45,240
ID

1097
00:51:45,240 --> 00:51:47,700
so that you end up with this and so this

1098
00:51:47,700 --> 00:51:49,619
is this is kind of a universal by the

1099
00:51:49,619 --> 00:51:51,180
way the bottom part of this is basically

1100
00:51:51,180 --> 00:51:55,500
a universal uh finder for class ID so

1101
00:51:55,500 --> 00:51:57,540
you can use this for any type of file to

1102
00:51:57,540 --> 00:52:00,180
figure out what the class ID is and so

1103
00:52:00,180 --> 00:52:05,339
this class ID is Excel Biff 5 class ID

1104
00:52:05,339 --> 00:52:09,240
this is the Biff 8 Class ID

1105
00:52:09,240 --> 00:52:12,119
um and I found by looking at a bajillion

1106
00:52:12,119 --> 00:52:15,059
files that uh there are two uh

1107
00:52:15,059 --> 00:52:17,940
categories of non-standard incorrect

1108
00:52:17,940 --> 00:52:20,700
class IDs so that's why this particular

1109
00:52:20,700 --> 00:52:23,940
test is not a hundred percent uh great

1110
00:52:23,940 --> 00:52:26,640
for knowing that something is Excel

1111
00:52:26,640 --> 00:52:29,880
because I've seen zeroed class IDs and

1112
00:52:29,880 --> 00:52:32,099
I've also seen stopped class IDs so

1113
00:52:32,099 --> 00:52:33,740
there's a malware family called

1114
00:52:33,740 --> 00:52:36,599
Abracadabra which just puts random

1115
00:52:36,599 --> 00:52:40,640
numbers in the class ID and so

1116
00:52:40,640 --> 00:52:44,819
at the same time if you see all zeros or

1117
00:52:44,819 --> 00:52:46,940
if you see you know

1118
00:52:46,940 --> 00:52:49,680
a non-standard class ID those are going

1119
00:52:49,680 --> 00:52:51,900
to be malicious

1120
00:52:51,900 --> 00:52:54,540
now the last uh the last indication of

1121
00:52:54,540 --> 00:52:56,280
something being an Excel file the

1122
00:52:56,280 --> 00:52:59,040
workbook or the book stream names

1123
00:52:59,040 --> 00:53:02,040
so these are fun so Excel five the older

1124
00:53:02,040 --> 00:53:05,640
version used book Excel 8 and newer uses

1125
00:53:05,640 --> 00:53:08,180
workbook

1126
00:53:08,640 --> 00:53:12,119
and you can see here again in serbro

1127
00:53:12,119 --> 00:53:13,800
profiler if we're looking at the

1128
00:53:13,800 --> 00:53:16,260
workbook you can see that it begins with

1129
00:53:16,260 --> 00:53:18,839
a buff the bof record which is what we

1130
00:53:18,839 --> 00:53:21,720
were talking about a little bit ago

1131
00:53:21,720 --> 00:53:24,300
now the directory entry is a single

1132
00:53:24,300 --> 00:53:28,440
directory entry is 128 bytes long

1133
00:53:28,440 --> 00:53:30,780
and then a full directory in a compound

1134
00:53:30,780 --> 00:53:34,079
file has 31 possible entries plus the

1135
00:53:34,079 --> 00:53:36,480
root entry so 32 entries

1136
00:53:36,480 --> 00:53:39,660
so if we think about that what we can do

1137
00:53:39,660 --> 00:53:42,180
is create a Yar rule that looks through

1138
00:53:42,180 --> 00:53:45,839
each entry in the directory and Compares

1139
00:53:45,839 --> 00:53:49,500
it to book or Compares it to workbook

1140
00:53:49,500 --> 00:53:52,740
so what we're doing here is we're

1141
00:53:52,740 --> 00:53:55,319
looking at dur name so we're looking for

1142
00:53:55,319 --> 00:53:57,660
all the occurrences of dur name so there

1143
00:53:57,660 --> 00:53:59,579
might be you know six different

1144
00:53:59,579 --> 00:54:01,380
directory names in this particular

1145
00:54:01,380 --> 00:54:03,839
compound file

1146
00:54:03,839 --> 00:54:06,780
and then we're looking at each one at

1147
00:54:06,780 --> 00:54:09,180
100 so we're basically looking at a dur

1148
00:54:09,180 --> 00:54:12,140
name zero so if J is 0

1149
00:54:12,140 --> 00:54:14,880
we've skipped over the the root entry

1150
00:54:14,880 --> 00:54:18,780
but we're adding one which is the first

1151
00:54:18,780 --> 00:54:22,859
one and then times 128 and so you're

1152
00:54:22,859 --> 00:54:25,740
looking so you're looking at the length

1153
00:54:25,740 --> 00:54:28,680
of each one so you're basically looking

1154
00:54:28,680 --> 00:54:31,020
at the first one and then the second one

1155
00:54:31,020 --> 00:54:36,300
third one fourth one Etc uh with that

1156
00:54:36,300 --> 00:54:39,059
and then this is the same sort of thing

1157
00:54:39,059 --> 00:54:41,460
but comparing to the word workbook the

1158
00:54:41,460 --> 00:54:44,940
string workbook and then uh this is I'm

1159
00:54:44,940 --> 00:54:46,440
wrapping up but there are a couple of

1160
00:54:46,440 --> 00:54:49,200
Yara glue rules that I call them and

1161
00:54:49,200 --> 00:54:51,000
these are ones that you've seen in

1162
00:54:51,000 --> 00:54:52,920
earlier rules like where you see

1163
00:54:52,920 --> 00:54:55,740
compound file and in some of the earlier

1164
00:54:55,740 --> 00:54:58,980
uh words it would say Excel compound

1165
00:54:58,980 --> 00:55:01,920
file so those are act those actually

1166
00:55:01,920 --> 00:55:04,980
refer to these glue rules that I wrote

1167
00:55:04,980 --> 00:55:07,680
so you have compound file which looks

1168
00:55:07,680 --> 00:55:10,740
for the compound file magic number

1169
00:55:10,740 --> 00:55:13,140
uh and then this is a this is a

1170
00:55:13,140 --> 00:55:15,839
combination of and the Excel mime is the

1171
00:55:15,839 --> 00:55:17,280
one that we saw when we were looking at

1172
00:55:17,280 --> 00:55:20,520
earlier uh and then these are all the

1173
00:55:20,520 --> 00:55:22,619
different possibilities for something to

1174
00:55:22,619 --> 00:55:25,260
be a Excel compound file so if it

1175
00:55:25,260 --> 00:55:28,020
matches the root CLS ID for itself five

1176
00:55:28,020 --> 00:55:30,599
if it matches the root CLS ID for Excel

1177
00:55:30,599 --> 00:55:33,240
eight and then if it matches the deer

1178
00:55:33,240 --> 00:55:37,140
entry name for Biff 5 Biff 8 either book

1179
00:55:37,140 --> 00:55:40,559
or or workbook or if it just uh matches

1180
00:55:40,559 --> 00:55:42,420
the mime and so these are all the

1181
00:55:42,420 --> 00:55:45,119
different possibilities of matching an

1182
00:55:45,119 --> 00:55:48,900
Excel compound file so this is the uh

1183
00:55:48,900 --> 00:55:52,680
blog post that I wrote uh for reversing

1184
00:55:52,680 --> 00:55:55,559
Labs blog you can go check that out

1185
00:55:55,559 --> 00:55:57,599
and it has almost all the same

1186
00:55:57,599 --> 00:55:59,640
information here I've put in a couple of

1187
00:55:59,640 --> 00:56:01,500
a couple different screenshots in here

1188
00:56:01,500 --> 00:56:05,000
and any questions

1189
00:56:08,180 --> 00:56:10,740
yeah so

1190
00:56:10,740 --> 00:56:12,359
um I understand each of these

1191
00:56:12,359 --> 00:56:16,140
individually how can you be since uh

1192
00:56:16,140 --> 00:56:18,420
each of these ways to figure out if it's

1193
00:56:18,420 --> 00:56:21,780
a malicious file can be like a

1194
00:56:21,780 --> 00:56:25,319
workaround how can you know that dumb

1195
00:56:25,319 --> 00:56:29,579
combined cannot be uh oh so so that's a

1196
00:56:29,579 --> 00:56:31,380
good question how do you how do I know

1197
00:56:31,380 --> 00:56:34,559
so let me try to rephrase it so how do I

1198
00:56:34,559 --> 00:56:36,300
know that these can't be circumvented

1199
00:56:36,300 --> 00:56:39,900
okay so the third one so I could

1200
00:56:39,900 --> 00:56:44,300
actually say that in I presented them in

1201
00:56:44,300 --> 00:56:47,700
uh increasing probability of

1202
00:56:47,700 --> 00:56:49,200
circumvention

1203
00:56:49,200 --> 00:56:51,540
so the third one which is in the

1204
00:56:51,540 --> 00:56:54,420
document summary information because it

1205
00:56:54,420 --> 00:56:57,319
can be split across uh you know be

1206
00:56:57,319 --> 00:56:59,940
fragmented in the the file allocation

1207
00:56:59,940 --> 00:57:03,660
table that one can be fairly easily

1208
00:57:03,660 --> 00:57:05,940
circumvented if you are if you're

1209
00:57:05,940 --> 00:57:07,980
creating the word document or the Excel

1210
00:57:07,980 --> 00:57:09,900
document and you're aware of file

1211
00:57:09,900 --> 00:57:11,940
allocation table and you're able to

1212
00:57:11,940 --> 00:57:13,880
understand how to get that to fragment

1213
00:57:13,880 --> 00:57:17,160
you can circumvent that one the middle

1214
00:57:17,160 --> 00:57:18,119
one

1215
00:57:18,119 --> 00:57:22,020
uh is less likely uh and then the

1216
00:57:22,020 --> 00:57:24,900
beginning of file uh is very unlikely to

1217
00:57:24,900 --> 00:57:29,520
be circumvented because the word the the

1218
00:57:29,520 --> 00:57:32,460
Excel 4.0 macros won't work without that

1219
00:57:32,460 --> 00:57:35,760
record so Excel won't know to run the

1220
00:57:35,760 --> 00:57:39,359
macros without that so to remove that

1221
00:57:39,359 --> 00:57:42,059
record or to modify it so that it

1222
00:57:42,059 --> 00:57:44,220
doesn't have that particular byte that

1223
00:57:44,220 --> 00:57:46,740
indicates Excel 4.0 that would actually

1224
00:57:46,740 --> 00:57:50,479
disable the macros themselves

1225
00:57:52,559 --> 00:57:55,500
if that's a zero then the macros won't

1226
00:57:55,500 --> 00:57:58,619
run at all I won't even know yeah yeah

1227
00:57:58,619 --> 00:58:01,380
it'll actually I I

1228
00:58:01,380 --> 00:58:04,260
need to double check but I think it may

1229
00:58:04,260 --> 00:58:07,520
even say that it's corrupted but

1230
00:58:07,520 --> 00:58:11,339
but why is that done not enough on its

1231
00:58:11,339 --> 00:58:14,579
own to uh maybe I missed something but

1232
00:58:14,579 --> 00:58:17,700
like if you know that the macros are if

1233
00:58:17,700 --> 00:58:20,520
it's a one isn't that enough to uh oh

1234
00:58:20,520 --> 00:58:22,740
yeah yeah I'm just showing you this is

1235
00:58:22,740 --> 00:58:25,680
like the exhaustive uh list of the

1236
00:58:25,680 --> 00:58:29,040
places where you can see Excel 4.0

1237
00:58:29,040 --> 00:58:30,599
macros oh okay

1238
00:58:30,599 --> 00:58:32,819
I think we're out of time so any

1239
00:58:32,819 --> 00:58:34,920
questions you can probably find this

1240
00:58:34,920 --> 00:58:36,799
along the way come grab me in the back

1241
00:58:36,799 --> 00:58:39,660
and uh

1242
00:58:39,660 --> 00:58:42,500
thank you all

1243
00:58:42,720 --> 00:58:45,960
oh and one more thing so tomorrow and

1244
00:58:45,960 --> 00:58:47,700
Saturday sorry tomorrow is Saturday

1245
00:58:47,700 --> 00:58:51,000
tomorrow and Sunday uh I'm doing a

1246
00:58:51,000 --> 00:58:52,980
absolute beginner's malware analysis

1247
00:58:52,980 --> 00:58:56,099
Workshop uh so sign up for it in the

1248
00:58:56,099 --> 00:58:59,460
front there was some confusion it's the

1249
00:58:59,460 --> 00:59:02,400
same material both days okay so no need

1250
00:59:02,400 --> 00:59:04,860
to sign up for both days

1251
00:59:04,860 --> 00:59:22,520
[Music]

1252
00:59:22,520 --> 00:59:25,890
thank you

1253
00:59:25,890 --> 00:59:29,560
[Music]

