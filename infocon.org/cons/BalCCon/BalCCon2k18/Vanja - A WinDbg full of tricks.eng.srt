1
00:00:00,000 --> 00:00:12,130
[Music]

2
00:00:11,270 --> 00:00:14,088
[Applause]

3
00:00:12,130 --> 00:00:17,010
[Music]

4
00:00:14,089 --> 00:00:19,380
next up for<font color="#CCCCCC"> the last lecture we</font><font color="#E5E5E5"> will</font>

5
00:00:17,010 --> 00:00:27,150
have Vanya<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> windy bug full of</font>

6
00:00:19,380 --> 00:00:30,210
tricks well somebody needs to have the

7
00:00:27,150 --> 00:00:32,219
last like<font color="#E5E5E5"> Jam afraid this is</font><font color="#CCCCCC"> it for for</font>

8
00:00:30,210 --> 00:00:34,680
<font color="#E5E5E5">this year I really had a great</font><font color="#CCCCCC"> time at</font>

9
00:00:32,219 --> 00:00:36,780
<font color="#E5E5E5">Balkan and I hope I have</font><font color="#CCCCCC"> to congratulate</font>

10
00:00:34,680 --> 00:00:41,340
<font color="#E5E5E5">everybody of you who survived these</font>

11
00:00:36,780 --> 00:00:46,110
three<font color="#E5E5E5"> days successfully</font><font color="#CCCCCC"> more or</font><font color="#E5E5E5"> less so</font>

12
00:00:41,340 --> 00:00:48,270
give<font color="#E5E5E5"> yourself a round of applause and</font>

13
00:00:46,110 --> 00:00:50,730
the word<font color="#E5E5E5"> word of warning that</font><font color="#CCCCCC"> you know</font>

14
00:00:48,270 --> 00:00:53,010
if you spend a long time in<font color="#CCCCCC"> the security</font>

15
00:00:50,730 --> 00:00:56,370
industry hacking whatever you you end up

16
00:00:53,010 --> 00:00:58,440
with<font color="#CCCCCC"> grey beard</font><font color="#E5E5E5"> or like a little bit</font>

17
00:00:56,370 --> 00:01:00,809
less hair so for all the young people

18
00:00:58,440 --> 00:01:03,239
<font color="#CCCCCC">that so that's a warning you know</font><font color="#E5E5E5"> it it</font>

19
00:01:00,809 --> 00:01:07,920
looks fun at the<font color="#E5E5E5"> beginning but</font><font color="#CCCCCC"> you know</font>

20
00:01:03,239 --> 00:01:10,470
it takes<font color="#E5E5E5"> its toll anyway my name is VY</font>

21
00:01:07,920 --> 00:01:15,180
network for<font color="#CCCCCC"> Fatalis which is like a</font>

22
00:01:10,470 --> 00:01:16,950
<font color="#CCCCCC">Cisco threat intelligence group we tried</font>

23
00:01:15,180 --> 00:01:19,590
to collect interesting information about

24
00:01:16,950 --> 00:01:23,820
<font color="#E5E5E5">various types of attacks we are more on</font>

25
00:01:19,590 --> 00:01:25,830
the<font color="#E5E5E5"> defensive</font><font color="#CCCCCC"> side</font><font color="#E5E5E5"> we have some guys in</font>

26
00:01:23,820 --> 00:01:28,740
<font color="#E5E5E5">BraunAbility research as well some</font><font color="#CCCCCC"> of</font>

27
00:01:25,830 --> 00:01:33,270
the<font color="#E5E5E5"> people from</font><font color="#CCCCCC"> Nova Sadiq J as working</font>

28
00:01:28,740 --> 00:01:36,360
<font color="#E5E5E5">for our group and yeah I think I'm ready</font>

29
00:01:33,270 --> 00:01:40,140
<font color="#CCCCCC">to share</font><font color="#E5E5E5"> my kind of</font><font color="#CCCCCC"> treat for</font><font color="#E5E5E5"> both what</font>

30
00:01:36,360 --> 00:01:44,520
windbg or some<font color="#E5E5E5"> people call it</font><font color="#CCCCCC"> windy bags</font>

31
00:01:40,140 --> 00:01:49,439
some people call it windbag<font color="#CCCCCC"> so pick your</font>

32
00:01:44,520 --> 00:01:52,110
pick your<font color="#E5E5E5"> favorite name so I don't</font>

33
00:01:49,439 --> 00:01:56,699
consider<font color="#E5E5E5"> to myself to be like a really</font>

34
00:01:52,110 --> 00:02:00,329
an expert of windbg<font color="#CCCCCC"> but I don't</font><font color="#E5E5E5"> think</font>

35
00:01:56,700 --> 00:02:02,060
that<font color="#E5E5E5"> the huge number of windbg experts</font>

36
00:02:00,329 --> 00:02:05,969
<font color="#CCCCCC">arounds like how many</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> are using</font>

37
00:02:02,060 --> 00:02:07,909
windbag regularly how many people are

38
00:02:05,969 --> 00:02:12,319
using<font color="#E5E5E5"> it</font><font color="#CCCCCC"> for user mode</font>

39
00:02:07,909 --> 00:02:16,250
stuff how many people for<font color="#E5E5E5"> Colonel know</font>

40
00:02:12,319 --> 00:02:21,738
that many<font color="#E5E5E5"> okay so I think it's it's it</font>

41
00:02:16,250 --> 00:02:24,769
<font color="#CCCCCC">really as a tool when I started using it</font>

42
00:02:21,739 --> 00:02:28,700
I realized that it's not<font color="#E5E5E5"> very</font><font color="#CCCCCC"> user</font>

43
00:02:24,769 --> 00:02:32,390
<font color="#E5E5E5">friendly so I I decided that I wanna</font>

44
00:02:28,700 --> 00:02:35,720
document<font color="#E5E5E5"> deny kind of treat as I kind of</font>

45
00:02:32,390 --> 00:02:38,268
learned it over the the<font color="#CCCCCC"> period of quite</font>

46
00:02:35,720 --> 00:02:41,390
a few<font color="#E5E5E5"> years I was coming back to it and</font>

47
00:02:38,269 --> 00:02:43,849
going<font color="#E5E5E5"> away</font><font color="#CCCCCC"> for certain things</font><font color="#E5E5E5"> you need</font>

48
00:02:41,390 --> 00:02:46,399
<font color="#CCCCCC">to have it for definitely for</font>

49
00:02:43,849 --> 00:02:49,609
kernel-mode<font color="#CCCCCC"> windows analysis it's the</font>

50
00:02:46,400 --> 00:02:52,010
tool<font color="#CCCCCC"> but then I was I was pleasantly</font>

51
00:02:49,610 --> 00:02:53,989
surprised<font color="#CCCCCC"> about half a year ago when</font>

52
00:02:52,010 --> 00:02:55,429
I've tried<font color="#E5E5E5"> to find out some when I</font>

53
00:02:53,989 --> 00:02:59,420
<font color="#CCCCCC">realize that</font><font color="#E5E5E5"> there are some new features</font>

54
00:02:55,430 --> 00:03:01,400
<font color="#CCCCCC">that make windbg very useful for not</font>

55
00:02:59,420 --> 00:03:04,640
just<font color="#CCCCCC"> kernel-mode analysis but user mode</font>

56
00:03:01,400 --> 00:03:07,310
analysis and make it<font color="#E5E5E5"> almost as easy to</font>

57
00:03:04,640 --> 00:03:12,230
use<font color="#E5E5E5"> as the tools that we regularly use</font>

58
00:03:07,310 --> 00:03:15,440
<font color="#E5E5E5">like I know</font><font color="#CCCCCC"> a lady BG or x64 dbg</font><font color="#E5E5E5"> Ida and</font>

59
00:03:12,230 --> 00:03:17,420
<font color="#E5E5E5">things like that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I decided</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> cover</font>

60
00:03:15,440 --> 00:03:19,940
like to give it a<font color="#E5E5E5"> little bit of an intro</font>

61
00:03:17,420 --> 00:03:24,100
<font color="#CCCCCC">for people who are not that</font><font color="#E5E5E5"> well aware</font>

62
00:03:19,940 --> 00:03:26,750
about what<font color="#E5E5E5"> you've been DVDs and then</font>

63
00:03:24,100 --> 00:03:28,340
give you like let's say a few mother and

64
00:03:26,750 --> 00:03:30,350
all these<font color="#CCCCCC"> tips though it's you</font><font color="#E5E5E5"> know very</font>

65
00:03:28,340 --> 00:03:34,450
<font color="#CCCCCC">very difficult</font><font color="#E5E5E5"> to say you might already</font>

66
00:03:30,350 --> 00:03:40,700
know it so<font color="#CCCCCC"> but I discover some things</font>

67
00:03:34,450 --> 00:03:43,429
<font color="#CCCCCC">okay so what is it</font><font color="#E5E5E5"> well it's it's a user</font>

68
00:03:40,700 --> 00:03:46,149
graphical user interface which is<font color="#E5E5E5"> built</font>

69
00:03:43,430 --> 00:03:49,069
on<font color="#E5E5E5"> top of the windows debugging engine</font>

70
00:03:46,150 --> 00:03:53,480
<font color="#E5E5E5">there are more than one typical built</font>

71
00:03:49,069 --> 00:03:55,638
<font color="#E5E5E5">within windows there is</font><font color="#CCCCCC"> NT SD which</font>

72
00:03:53,480 --> 00:04:00,290
stands<font color="#CCCCCC"> for an empty</font><font color="#E5E5E5"> system debugger and</font>

73
00:03:55,639 --> 00:04:02,389
<font color="#E5E5E5">C is</font><font color="#CCCCCC"> the command line system debugger KD</font>

74
00:04:00,290 --> 00:04:05,388
<font color="#E5E5E5">they're all</font><font color="#CCCCCC"> command-line debuggers and</font>

75
00:04:02,389 --> 00:04:06,620
then one thing that kind<font color="#CCCCCC"> of puts</font>

76
00:04:05,389 --> 00:04:10,010
<font color="#CCCCCC">together everything puts together</font>

77
00:04:06,620 --> 00:04:13,760
<font color="#E5E5E5">everything is this not</font><font color="#CCCCCC"> very user</font>

78
00:04:10,010 --> 00:04:16,988
<font color="#CCCCCC">friendly</font><font color="#E5E5E5"> interface of of windbg when you</font>

79
00:04:13,760 --> 00:04:18,909
open it you really that<font color="#CCCCCC"> doesn't give you</font>

80
00:04:16,988 --> 00:04:21,818
clue about what you're<font color="#E5E5E5"> supposed to be</font>

81
00:04:18,910 --> 00:04:25,270
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> so you need to you know work</font>

82
00:04:21,819 --> 00:04:29,110
through few steps in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to prop it up</font>

83
00:04:25,270 --> 00:04:30,789
it properly in the way you<font color="#CCCCCC"> you install</font>

84
00:04:29,110 --> 00:04:35,530
it<font color="#CCCCCC"> you either install the</font><font color="#E5E5E5"> Windows driver</font>

85
00:04:30,789 --> 00:04:37,870
<font color="#E5E5E5">kit or you can get a SDK for Windows and</font>

86
00:04:35,530 --> 00:04:40,090
then choose partially installed<font color="#E5E5E5"> on the</font>

87
00:04:37,870 --> 00:04:43,750
<font color="#E5E5E5">windows debugging tools and</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> like</font>

88
00:04:40,090 --> 00:04:46,810
the recent<font color="#CCCCCC"> edition</font><font color="#E5E5E5"> of the latest version</font>

89
00:04:43,750 --> 00:04:51,190
Microsoft call it<font color="#CCCCCC"> Windows windbg</font><font color="#E5E5E5"> next or</font>

90
00:04:46,810 --> 00:04:53,530
windbg preview<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> the kind of tool</font>

91
00:04:51,190 --> 00:04:55,270
<font color="#CCCCCC">that lets all kind of have running in a</font>

92
00:04:53,530 --> 00:04:57,489
virtual<font color="#CCCCCC"> machine separately as well so</font>

93
00:04:55,270 --> 00:05:00,609
perhaps<font color="#E5E5E5"> we can we'll have time</font><font color="#CCCCCC"> to see</font>

94
00:04:57,490 --> 00:05:04,090
some of the<font color="#E5E5E5"> things that it can</font><font color="#CCCCCC"> do and it</font>

95
00:05:00,610 --> 00:05:06,490
brings<font color="#E5E5E5"> quite a big improvement for</font><font color="#CCCCCC"> the</font>

96
00:05:04,090 --> 00:05:09,909
user<font color="#E5E5E5"> experience for for debugging on</font>

97
00:05:06,490 --> 00:05:13,560
Windows<font color="#E5E5E5"> using windbg so what you need to</font>

98
00:05:09,909 --> 00:05:15,969
know I<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up I like usually you have</font>

99
00:05:13,560 --> 00:05:19,960
something<font color="#E5E5E5"> that's called debugging host</font>

100
00:05:15,970 --> 00:05:22,659
<font color="#E5E5E5">or debug debugger or</font><font color="#CCCCCC"> an debugging target</font>

101
00:05:19,960 --> 00:05:24,580
or debug<font color="#E5E5E5"> II so two things generally</font><font color="#CCCCCC"> you</font>

102
00:05:22,659 --> 00:05:27,610
<font color="#CCCCCC">have two machines because when you debug</font>

103
00:05:24,580 --> 00:05:30,039
<font color="#E5E5E5">the kernel code you're when you break</font>

104
00:05:27,610 --> 00:05:31,870
<font color="#E5E5E5">into the kernel on Windows the end of</font>

105
00:05:30,039 --> 00:05:34,449
the machine<font color="#CCCCCC"> that you're debugging is</font>

106
00:05:31,870 --> 00:05:36,130
kind of stops<font color="#E5E5E5"> nothing can happen but you</font>

107
00:05:34,449 --> 00:05:38,250
<font color="#E5E5E5">have the machine that's controlling so</font>

108
00:05:36,130 --> 00:05:42,789
we have<font color="#E5E5E5"> several ways of connecting</font>

109
00:05:38,250 --> 00:05:46,479
<font color="#E5E5E5">typically</font><font color="#CCCCCC"> windbg</font><font color="#E5E5E5"> started as a serial</font>

110
00:05:42,789 --> 00:05:49,830
connection<font color="#E5E5E5"> and even if you set</font><font color="#CCCCCC"> it up</font>

111
00:05:46,479 --> 00:05:52,810
<font color="#E5E5E5">with like say what one virtual machine</font>

112
00:05:49,830 --> 00:05:54,909
<font color="#CCCCCC">host</font><font color="#E5E5E5"> and a virtual machine going through</font>

113
00:05:52,810 --> 00:05:57,509
the name<font color="#E5E5E5"> part it still is still still</font>

114
00:05:54,909 --> 00:05:59,680
very slow and it can't achieve big big

115
00:05:57,509 --> 00:06:02,229
speeds that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> need to</font>

116
00:05:59,680 --> 00:06:05,080
<font color="#E5E5E5">properly debug so there are some other</font>

117
00:06:02,229 --> 00:06:06,849
protocols like firewire there are not

118
00:06:05,080 --> 00:06:08,949
that many firewire cards but you<font color="#E5E5E5"> can</font>

119
00:06:06,849 --> 00:06:12,099
<font color="#E5E5E5">obviously get machines with fire</font><font color="#CCCCCC"> vardoz</font>

120
00:06:08,949 --> 00:06:14,560
USB 2<font color="#CCCCCC"> & 3</font><font color="#E5E5E5"> which gives</font><font color="#CCCCCC"> you good speed</font>

121
00:06:12,099 --> 00:06:17,110
already<font color="#E5E5E5"> but I actually prefer</font><font color="#CCCCCC"> the</font>

122
00:06:14,560 --> 00:06:19,240
<font color="#E5E5E5">network driver which which allows you to</font>

123
00:06:17,110 --> 00:06:21,849
<font color="#E5E5E5">set up like a virtual</font><font color="#CCCCCC"> internet</font>

124
00:06:19,240 --> 00:06:23,949
connection between<font color="#CCCCCC"> my set up is two</font>

125
00:06:21,849 --> 00:06:26,169
virtual machines<font color="#E5E5E5"> one which is the</font>

126
00:06:23,949 --> 00:06:27,400
debugger<font color="#E5E5E5"> and and the other one is the</font>

127
00:06:26,169 --> 00:06:29,020
buggy<font color="#CCCCCC"> and</font>

128
00:06:27,400 --> 00:06:33,060
generally over the internet connection

129
00:06:29,020 --> 00:06:35,830
<font color="#CCCCCC">the speeds are more</font><font color="#E5E5E5"> than acceptable</font>

130
00:06:33,060 --> 00:06:38,889
<font color="#CCCCCC">here's that here's the setup I have the</font>

131
00:06:35,830 --> 00:06:41,380
two virtual machines<font color="#CCCCCC"> one other options</font>

132
00:06:38,889 --> 00:06:43,509
for speeding up<font color="#CCCCCC"> that was that existed</font>

133
00:06:41,380 --> 00:06:46,469
was called the drive is a driver called

134
00:06:43,509 --> 00:06:49,479
virtual<font color="#CCCCCC"> KB so virtual</font><font color="#E5E5E5"> kernel driver</font>

135
00:06:46,470 --> 00:06:51,639
<font color="#CCCCCC">kernel debugger that allows you to</font>

136
00:06:49,479 --> 00:06:53,650
achieve<font color="#E5E5E5"> much much better speed even if</font>

137
00:06:51,639 --> 00:06:55,720
you have this sort<font color="#CCCCCC"> of let's say almost</font>

138
00:06:53,650 --> 00:06:59,590
<font color="#E5E5E5">like a serial connection between the two</font>

139
00:06:55,720 --> 00:07:02,199
two systems<font color="#E5E5E5"> so this is how you set up</font>

140
00:06:59,590 --> 00:07:06,448
<font color="#CCCCCC">Windows to debug over over network you</font>

141
00:07:02,199 --> 00:07:09,490
you know<font color="#E5E5E5"> your debuggers ipv4 address</font>

142
00:07:06,449 --> 00:07:12,250
choose any tcp/ip port and then set<font color="#CCCCCC"> up</font>

143
00:07:09,490 --> 00:07:14,919
<font color="#CCCCCC">the debug if so the machines you want to</font>

144
00:07:12,250 --> 00:07:18,280
debug with disabling the<font color="#E5E5E5"> integrity</font>

145
00:07:14,919 --> 00:07:20,109
checks<font color="#E5E5E5"> and allowing the</font><font color="#CCCCCC"> test signing</font>

146
00:07:18,280 --> 00:07:24,760
which which allows you<font color="#E5E5E5"> to load some</font><font color="#CCCCCC"> of</font>

147
00:07:20,110 --> 00:07:27,550
the invalid<font color="#E5E5E5"> certificate drivers and with</font>

148
00:07:24,760 --> 00:07:30,039
invalid certificates or or drivers that

149
00:07:27,550 --> 00:07:32,620
<font color="#CCCCCC">are not necessarily sign then</font><font color="#E5E5E5"> you enable</font>

150
00:07:30,039 --> 00:07:35,800
the debugging<font color="#E5E5E5"> on that machine</font><font color="#CCCCCC"> and then</font>

151
00:07:32,620 --> 00:07:38,289
the final thing you<font color="#E5E5E5"> have to enable</font><font color="#CCCCCC"> the</font>

152
00:07:35,800 --> 00:07:41,620
debugging<font color="#E5E5E5"> settings that says that your</font>

153
00:07:38,289 --> 00:07:43,590
<font color="#E5E5E5">connection between the client or</font><font color="#CCCCCC"> the</font>

154
00:07:41,620 --> 00:07:47,229
debug<font color="#CCCCCC"> II and the server the debugger</font>

155
00:07:43,590 --> 00:07:49,690
<font color="#E5E5E5">will go over the</font><font color="#CCCCCC"> Internet and you need</font>

156
00:07:47,229 --> 00:07:51,580
to know<font color="#E5E5E5"> host IP address choose any port</font>

157
00:07:49,690 --> 00:07:53,500
and then you can<font color="#E5E5E5"> look the key is used</font>

158
00:07:51,580 --> 00:07:55,330
for<font color="#E5E5E5"> the encryption if if you if</font><font color="#CCCCCC"> you</font>

159
00:07:53,500 --> 00:07:56,710
<font color="#E5E5E5">really do it over the network then</font><font color="#CCCCCC"> you</font>

160
00:07:55,330 --> 00:07:59,919
need to<font color="#E5E5E5"> some to have some kind</font><font color="#CCCCCC"> of</font>

161
00:07:56,710 --> 00:08:02,109
<font color="#CCCCCC">security in that protocol</font><font color="#E5E5E5"> and so if you</font>

162
00:07:59,919 --> 00:08:07,150
leave<font color="#CCCCCC"> that key empty</font><font color="#E5E5E5"> that the key is</font>

163
00:08:02,110 --> 00:08:08,830
<font color="#E5E5E5">automatically</font><font color="#CCCCCC"> generated</font><font color="#E5E5E5"> and yeah</font>

164
00:08:07,150 --> 00:08:11,919
then once when you<font color="#E5E5E5"> have the key you go</font>

165
00:08:08,830 --> 00:08:16,030
back to the<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> you start with with</font>

166
00:08:11,919 --> 00:08:18,070
windbg with the<font color="#CCCCCC"> k command line option</font>

167
00:08:16,030 --> 00:08:21,059
and you just have some configuration you

168
00:08:18,070 --> 00:08:23,409
can<font color="#E5E5E5"> do it from the GUI as well as such</font>

169
00:08:21,060 --> 00:08:27,430
then you report<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Machine you wanna</font>

170
00:08:23,409 --> 00:08:29,560
<font color="#E5E5E5">debug and once when it's online you you</font>

171
00:08:27,430 --> 00:08:32,529
get<font color="#E5E5E5"> the</font><font color="#CCCCCC"> connection in so that that's</font>

172
00:08:29,560 --> 00:08:34,198
more or less it<font color="#E5E5E5"> or anything you need to</font>

173
00:08:32,529 --> 00:08:37,318
to be<font color="#CCCCCC"> able to</font>

174
00:08:34,198 --> 00:08:39,929
debug between like the<font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> of on</font>

175
00:08:37,318 --> 00:08:42,929
<font color="#CCCCCC">Windows and the interesting thing</font>

176
00:08:39,929 --> 00:08:46,170
<font color="#E5E5E5">perhaps it's worth noticing is</font><font color="#CCCCCC"> that if</font>

177
00:08:42,929 --> 00:08:50,758
you want to use this<font color="#CCCCCC"> Internet Protocol</font>

178
00:08:46,170 --> 00:08:55,110
<font color="#E5E5E5">the inter</font><font color="#CCCCCC"> Ethernet transport your debug</font>

179
00:08:50,759 --> 00:08:57,870
<font color="#CCCCCC">key needs to be at</font><font color="#E5E5E5"> least Windows 8.1 or</font>

180
00:08:55,110 --> 00:09:02,579
later<font color="#E5E5E5"> so if you use earlier version that</font>

181
00:08:57,870 --> 00:09:05,670
that will necessarily<font color="#E5E5E5"> work</font><font color="#CCCCCC"> you can also</font>

182
00:09:02,579 --> 00:09:09,060
have set up your<font color="#CCCCCC"> own workspaces and</font><font color="#E5E5E5"> save</font>

183
00:09:05,670 --> 00:09:11,939
them they get<font color="#E5E5E5"> saved in the registry in</font>

184
00:09:09,060 --> 00:09:15,300
this<font color="#CCCCCC"> edge KCU software microsoft windbg</font>

185
00:09:11,939 --> 00:09:17,699
<font color="#E5E5E5">workspace is this</font><font color="#CCCCCC"> is one beautiful color</font>

186
00:09:15,300 --> 00:09:20,069
scheme that<font color="#CCCCCC"> i set up</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can see how</font>

187
00:09:17,699 --> 00:09:21,689
how it can be set up<font color="#E5E5E5"> but there are some</font>

188
00:09:20,069 --> 00:09:25,319
people who are<font color="#E5E5E5"> much more</font><font color="#CCCCCC"> serious about</font>

189
00:09:21,689 --> 00:09:27,540
<font color="#E5E5E5">how the like they dared windbg or in</font>

190
00:09:25,319 --> 00:09:30,569
<font color="#E5E5E5">debugging environment to look like so</font>

191
00:09:27,540 --> 00:09:33,209
here here we have<font color="#CCCCCC"> zac</font><font color="#E5E5E5"> Burlingham who</font>

192
00:09:30,569 --> 00:09:35,128
actually<font color="#CCCCCC"> I've included the links if</font>

193
00:09:33,209 --> 00:09:38,489
<font color="#E5E5E5">you're interested you can download you</font>

194
00:09:35,129 --> 00:09:43,649
the the workspaces<font color="#E5E5E5"> that make windbg</font>

195
00:09:38,490 --> 00:09:45,480
<font color="#CCCCCC">knits in classical user interface which</font>

196
00:09:43,649 --> 00:09:48,660
is still installed<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> stole</font><font color="#E5E5E5"> it</font>

197
00:09:45,480 --> 00:09:50,600
<font color="#E5E5E5">from</font><font color="#CCCCCC"> sdk windows the driver kit so it</font>

198
00:09:48,660 --> 00:09:52,769
looks<font color="#E5E5E5"> better you have your own</font>

199
00:09:50,600 --> 00:09:55,170
<font color="#E5E5E5">command-line tool</font><font color="#CCCCCC"> i'm sorry it's</font><font color="#E5E5E5"> not</font>

200
00:09:52,769 --> 00:09:58,350
that visible<font color="#E5E5E5"> here but you have your</font>

201
00:09:55,170 --> 00:10:01,229
registers you have your memory you have

202
00:09:58,350 --> 00:10:03,540
your disassembly<font color="#E5E5E5"> window so you have all</font>

203
00:10:01,230 --> 00:10:07,259
the windows that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> generally need when</font>

204
00:10:03,540 --> 00:10:10,649
you seriously be<font color="#E5E5E5"> back something there is</font>

205
00:10:07,259 --> 00:10:13,699
also another interesting<font color="#E5E5E5"> command called</font>

206
00:10:10,649 --> 00:10:18,720
<font color="#E5E5E5">command tree and and there's a guy who</font>

207
00:10:13,699 --> 00:10:22,170
on github created this windbg tree<font color="#E5E5E5"> that</font>

208
00:10:18,720 --> 00:10:24,420
you could<font color="#E5E5E5"> put in to your debugger so a</font>

209
00:10:22,170 --> 00:10:27,569
new<font color="#E5E5E5"> windows window appears that</font>

210
00:10:24,420 --> 00:10:29,910
essentially just<font color="#E5E5E5"> clickable and if you</font>

211
00:10:27,569 --> 00:10:32,339
installed some additional extensions to

212
00:10:29,910 --> 00:10:34,829
windbg it basically<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to not</font>

213
00:10:32,339 --> 00:10:38,399
having<font color="#CCCCCC"> to remember all of the command</font>

214
00:10:34,829 --> 00:10:40,680
lines for it various investigation he

215
00:10:38,399 --> 00:10:42,360
really neatly<font color="#E5E5E5"> classified all the</font>

216
00:10:40,680 --> 00:10:43,670
possible commands<font color="#E5E5E5"> that you can then go</font>

217
00:10:42,360 --> 00:10:46,160
click through

218
00:10:43,670 --> 00:10:47,930
and they appeared as proper<font color="#E5E5E5"> command in</font>

219
00:10:46,160 --> 00:10:49,819
command line<font color="#CCCCCC"> and then you know if you</font>

220
00:10:47,930 --> 00:10:51,920
slowly start learning because the

221
00:10:49,820 --> 00:10:54,220
<font color="#E5E5E5">learning curve in windbg is generally</font>

222
00:10:51,920 --> 00:10:56,540
pretty steep

223
00:10:54,220 --> 00:10:59,090
surprise surprise this<font color="#CCCCCC"> is how windbg</font>

224
00:10:56,540 --> 00:11:06,589
preview<font color="#E5E5E5"> look like it looks</font><font color="#CCCCCC"> very much</font>

225
00:10:59,090 --> 00:11:09,140
<font color="#CCCCCC">like any Microsoft's modern debugging</font>

226
00:11:06,590 --> 00:11:11,270
environment<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have all</font><font color="#CCCCCC"> the buttons</font>

227
00:11:09,140 --> 00:11:15,140
<font color="#CCCCCC">and it is interesting</font><font color="#E5E5E5"> when you look at</font>

228
00:11:11,270 --> 00:11:17,569
the defrag tools it's called<font color="#CCCCCC"> Microsoft's</font>

229
00:11:15,140 --> 00:11:19,699
video series<font color="#E5E5E5"> with with some of the</font>

230
00:11:17,570 --> 00:11:21,770
Microsoft guys and<font color="#E5E5E5"> it's I'm always like</font>

231
00:11:19,700 --> 00:11:25,250
super<font color="#E5E5E5"> it's super super fun when you see</font>

232
00:11:21,770 --> 00:11:27,770
<font color="#E5E5E5">this I know pretty experienced</font>

233
00:11:25,250 --> 00:11:29,780
programmers<font color="#E5E5E5"> and when they they look go</font>

234
00:11:27,770 --> 00:11:32,150
through the tool and they<font color="#CCCCCC"> they win every</font>

235
00:11:29,780 --> 00:11:34,430
<font color="#CCCCCC">time they need to</font><font color="#E5E5E5"> step or or trace a</font>

236
00:11:32,150 --> 00:11:37,660
code<font color="#CCCCCC"> they they click they click click</font>

237
00:11:34,430 --> 00:11:40,579
click click click click<font color="#CCCCCC"> click and</font><font color="#E5E5E5"> go</font>

238
00:11:37,660 --> 00:11:44,540
come on<font color="#E5E5E5"> guys learn all you need do you</font>

239
00:11:40,580 --> 00:11:47,390
need<font color="#CCCCCC"> two commands TT PP like it it's so</font>

240
00:11:44,540 --> 00:11:50,300
<font color="#CCCCCC">much easier but</font><font color="#E5E5E5"> you know they prefer</font>

241
00:11:47,390 --> 00:11:53,000
their<font color="#CCCCCC"> username</font><font color="#E5E5E5"> whose user interfaces and</font>

242
00:11:50,300 --> 00:11:55,880
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> Who am I to blame them for that</font>

243
00:11:53,000 --> 00:11:57,980
one of the<font color="#E5E5E5"> most important things and one</font>

244
00:11:55,880 --> 00:12:00,080
<font color="#CCCCCC">of the you know if</font><font color="#E5E5E5"> you're don't do this</font>

245
00:11:57,980 --> 00:12:02,960
step which<font color="#CCCCCC"> is basically define the</font>

246
00:12:00,080 --> 00:12:05,510
simple path that makes the windbg

247
00:12:02,960 --> 00:12:07,790
download the the symbol of operating

248
00:12:05,510 --> 00:12:09,439
system symbols which were like the

249
00:12:07,790 --> 00:12:12,020
operating system symbols is basically

250
00:12:09,440 --> 00:12:14,060
just a<font color="#E5E5E5"> mapping between</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory</font>

251
00:12:12,020 --> 00:12:15,670
location and the name of<font color="#CCCCCC"> the variable or</font>

252
00:12:14,060 --> 00:12:18,890
a name<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> function so you have</font>

253
00:12:15,670 --> 00:12:22,280
<font color="#E5E5E5">dynamic library so you have Windows</font>

254
00:12:18,890 --> 00:12:24,350
kernel and<font color="#E5E5E5"> then somehow the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> symbol</font>

255
00:12:22,280 --> 00:12:26,540
so obviously know how<font color="#CCCCCC"> to map a memory</font>

256
00:12:24,350 --> 00:12:28,160
location to the symbol name so you can

257
00:12:26,540 --> 00:12:30,469
<font color="#CCCCCC">basically unassembled any of the</font>

258
00:12:28,160 --> 00:12:33,050
function that you know the name<font color="#CCCCCC"> and</font>

259
00:12:30,470 --> 00:12:37,280
<font color="#CCCCCC">without that it's really not worth</font>

260
00:12:33,050 --> 00:12:39,800
<font color="#CCCCCC">northward even using windbg</font><font color="#E5E5E5"> so essential</font>

261
00:12:37,280 --> 00:12:42,598
step<font color="#E5E5E5"> and sometimes it takes some</font><font color="#CCCCCC"> time to</font>

262
00:12:39,800 --> 00:12:46,949
<font color="#E5E5E5">set</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> but it's you know</font>

263
00:12:42,599 --> 00:12:49,709
so basic<font color="#E5E5E5"> commands</font><font color="#CCCCCC"> before you you</font><font color="#E5E5E5"> know</font>

264
00:12:46,949 --> 00:12:51,809
being being<font color="#E5E5E5"> a</font><font color="#CCCCCC"> proper</font><font color="#E5E5E5"> let's say</font><font color="#CCCCCC"> Marvel</font>

265
00:12:49,709 --> 00:12:56,069
<font color="#E5E5E5">researches you you know that everything</font>

266
00:12:51,809 --> 00:12:58,499
<font color="#CCCCCC">you do you will forget</font><font color="#E5E5E5"> so the good</font><font color="#CCCCCC"> thing</font>

267
00:12:56,069 --> 00:13:00,509
is that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> open a log file</font>

268
00:12:58,499 --> 00:13:02,369
<font color="#CCCCCC">so when you open</font><font color="#E5E5E5"> a log file everything</font>

269
00:13:00,509 --> 00:13:04,979
<font color="#CCCCCC">you</font><font color="#E5E5E5"> type on the command</font><font color="#CCCCCC"> line will be</font>

270
00:13:02,369 --> 00:13:06,989
saving to the<font color="#E5E5E5"> log file you set up a</font><font color="#CCCCCC"> Bo's</font>

271
00:13:04,979 --> 00:13:08,519
mode and then you<font color="#E5E5E5"> get so much</font>

272
00:13:06,989 --> 00:13:11,609
information<font color="#E5E5E5"> that you can always come</font>

273
00:13:08,519 --> 00:13:14,519
<font color="#CCCCCC">back to your analysis once when you will</font>

274
00:13:11,609 --> 00:13:17,849
know after like<font color="#E5E5E5"> you know a day or three</font>

275
00:13:14,519 --> 00:13:21,179
<font color="#E5E5E5">months when you forget everything</font><font color="#CCCCCC"> the</font>

276
00:13:17,849 --> 00:13:24,089
great thing is<font color="#CCCCCC"> that there's also</font><font color="#E5E5E5"> it's</font>

277
00:13:21,179 --> 00:13:26,519
very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> documented windbg it is it has</font>

278
00:13:24,089 --> 00:13:30,109
a<font color="#CCCCCC"> help file which which you call with</font>

279
00:13:26,519 --> 00:13:36,239
hedge hedge<font color="#E5E5E5"> and it is like a traditional</font>

280
00:13:30,109 --> 00:13:38,489
<font color="#E5E5E5">help file</font><font color="#CCCCCC"> all formats</font><font color="#E5E5E5"> ehm format but it</font>

281
00:13:36,239 --> 00:13:40,229
really has a lot<font color="#CCCCCC"> of documentation though</font>

282
00:13:38,489 --> 00:13:44,459
it takes through so I kind<font color="#E5E5E5"> of try to</font>

283
00:13:40,229 --> 00:13:46,529
remove all this<font color="#E5E5E5"> hard well hard work all</font>

284
00:13:44,459 --> 00:13:48,059
the<font color="#CCCCCC"> work you have to</font><font color="#E5E5E5"> go through and it</font>

285
00:13:46,529 --> 00:13:49,769
takes a lot of<font color="#E5E5E5"> time to actually come</font>

286
00:13:48,059 --> 00:13:54,269
back<font color="#E5E5E5"> to see which commands in the end</font>

287
00:13:49,769 --> 00:13:56,970
are useful for<font color="#E5E5E5"> analysis windbg has some</font>

288
00:13:54,269 --> 00:13:58,319
registers you can have the<font color="#CCCCCC"> processor</font>

289
00:13:56,970 --> 00:14:01,019
registers like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> general-purpose</font>

290
00:13:58,319 --> 00:14:04,049
<font color="#CCCCCC">registers</font><font color="#E5E5E5"> and multimedia registers and</font>

291
00:14:01,019 --> 00:14:07,259
<font color="#CCCCCC">so on but</font><font color="#E5E5E5"> it also has allows you to have</font>

292
00:14:04,049 --> 00:14:09,539
some pseudo registers which are<font color="#E5E5E5"> equally</font>

293
00:14:07,259 --> 00:14:11,999
<font color="#E5E5E5">valid over all the platforms because you</font>

294
00:14:09,539 --> 00:14:13,919
know<font color="#E5E5E5"> Microsoft all also had the</font><font color="#CCCCCC"> tenían</font>

295
00:14:11,999 --> 00:14:17,759
platforms<font color="#E5E5E5"> that it will likely have some</font>

296
00:14:13,919 --> 00:14:19,619
arm as well<font color="#E5E5E5"> so for example the you have</font>

297
00:14:17,759 --> 00:14:22,169
some pseudo registers they always starts

298
00:14:19,619 --> 00:14:27,119
with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dollar</font><font color="#E5E5E5"> sign so the CSP will</font>

299
00:14:22,169 --> 00:14:31,019
will be<font color="#CCCCCC"> a current</font><font color="#E5E5E5"> stack pointer IP would</font>

300
00:14:27,119 --> 00:14:34,589
be instruction pointer<font color="#CCCCCC"> RA would</font><font color="#E5E5E5"> be</font>

301
00:14:31,019 --> 00:14:36,569
return address<font color="#CCCCCC"> return registers then you</font>

302
00:14:34,589 --> 00:14:39,499
have process environment block thread

303
00:14:36,569 --> 00:14:41,669
environment block<font color="#E5E5E5"> those are all</font>

304
00:14:39,499 --> 00:14:46,379
depending on<font color="#E5E5E5"> the context</font><font color="#CCCCCC"> where you are</font>

305
00:14:41,669 --> 00:14:50,159
for example<font color="#CCCCCC"> proc it shows you the</font>

306
00:14:46,379 --> 00:14:51,809
<font color="#E5E5E5">eternal process</font><font color="#CCCCCC"> kernel a process</font>

307
00:14:50,159 --> 00:14:54,659
<font color="#CCCCCC">structure if you're in kernel mode</font><font color="#E5E5E5"> but</font>

308
00:14:51,809 --> 00:14:57,238
if you're in a user mode then the<font color="#E5E5E5"> PAP is</font>

309
00:14:54,659 --> 00:14:59,100
potentially a better structure<font color="#E5E5E5"> to look</font>

310
00:14:57,239 --> 00:15:02,579
for some<font color="#E5E5E5"> information about the process</font>

311
00:14:59,100 --> 00:15:05,309
and then<font color="#E5E5E5"> the operator image entry which</font>

312
00:15:02,579 --> 00:15:08,399
basically<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> the entry point of</font>

313
00:15:05,309 --> 00:15:08,789
an image so you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> I don't know that's</font>

314
00:15:08,399 --> 00:15:12,569
<font color="#E5E5E5">that</font>

315
00:15:08,789 --> 00:15:15,029
those are<font color="#E5E5E5"> the kind of basic thing it</font>

316
00:15:12,569 --> 00:15:18,539
<font color="#E5E5E5">allows you</font><font color="#CCCCCC"> to have temporary registers</font>

317
00:15:15,029 --> 00:15:20,959
<font color="#CCCCCC">that T 0 to 2 9 and also</font><font color="#E5E5E5"> allows you in</font>

318
00:15:18,539 --> 00:15:23,970
the latest versions to have your own

319
00:15:20,959 --> 00:15:26,608
pseudo register of pseudo register names

320
00:15:23,970 --> 00:15:28,979
<font color="#E5E5E5">the on the top we</font><font color="#CCCCCC"> have the difference</font>

321
00:15:26,609 --> 00:15:32,970
between<font color="#E5E5E5"> our so</font><font color="#CCCCCC"> ok are we</font><font color="#E5E5E5"> can we can I</font>

322
00:15:28,979 --> 00:15:36,239
<font color="#CCCCCC">guess we can go</font><font color="#E5E5E5"> and have a look if it</font><font color="#CCCCCC"> ok</font>

323
00:15:32,970 --> 00:15:37,769
<font color="#E5E5E5">so if I just say</font><font color="#CCCCCC"> R I'll get all</font><font color="#E5E5E5"> the</font>

324
00:15:36,239 --> 00:15:42,029
register all the<font color="#E5E5E5"> general purpose</font>

325
00:15:37,769 --> 00:15:45,869
register displayed on this is a<font color="#E5E5E5"> 32-bit</font>

326
00:15:42,029 --> 00:15:47,849
<font color="#E5E5E5">environment but the thing is that</font><font color="#CCCCCC"> is RM</font>

327
00:15:45,869 --> 00:15:50,699
the next command allows you to set<font color="#E5E5E5"> the</font>

328
00:15:47,849 --> 00:15:53,459
<font color="#CCCCCC">masks so if you want to</font><font color="#E5E5E5"> look at the</font>

329
00:15:50,699 --> 00:15:56,248
<font color="#E5E5E5">floating</font><font color="#CCCCCC"> point registers or multimedia</font>

330
00:15:53,459 --> 00:15:58,439
registers then you can set a mask<font color="#E5E5E5"> so all</font>

331
00:15:56,249 --> 00:15:59,849
the<font color="#E5E5E5"> registers</font><font color="#CCCCCC"> are displayed for you as</font>

332
00:15:58,439 --> 00:16:01,998
well as you go through the debugging

333
00:15:59,849 --> 00:16:01,999
<font color="#E5E5E5">process</font>

334
00:16:02,059 --> 00:16:07,108
exploration commands<font color="#CCCCCC"> some of the basic</font>

335
00:16:04,919 --> 00:16:10,649
<font color="#CCCCCC">things like</font><font color="#E5E5E5"> X gives you all the symbols</font>

336
00:16:07,109 --> 00:16:21,170
so so I don't<font color="#CCCCCC"> know we can perhaps have a</font>

337
00:16:10,649 --> 00:16:24,170
look as well<font color="#E5E5E5"> X let's say</font><font color="#CCCCCC"> kernel there is</font>

338
00:16:21,170 --> 00:16:24,170
create

339
00:16:25,120 --> 00:16:29,259
so this will give<font color="#E5E5E5"> me all the</font><font color="#CCCCCC"> Colonel</font>

340
00:16:27,339 --> 00:16:32,499
<font color="#E5E5E5">bears api's that have that start with</font>

341
00:16:29,259 --> 00:16:34,689
create<font color="#E5E5E5"> and then in ending</font><font color="#CCCCCC"> their own</font>

342
00:16:32,499 --> 00:16:37,480
address<font color="#E5E5E5"> so I can</font><font color="#CCCCCC"> copy and paste</font><font color="#E5E5E5"> the</font>

343
00:16:34,689 --> 00:16:44,819
address of any<font color="#CCCCCC"> function like create new</font>

344
00:16:37,480 --> 00:16:48,189
<font color="#E5E5E5">text for example and and then choose to</font>

345
00:16:44,819 --> 00:16:52,628
disassemble<font color="#CCCCCC"> that using the you command</font>

346
00:16:48,189 --> 00:16:54,339
<font color="#E5E5E5">and you can also disassemble more you</font>

347
00:16:52,629 --> 00:16:58,600
can disassemble I don't know<font color="#CCCCCC"> sixteen</font>

348
00:16:54,339 --> 00:17:02,439
instructions<font color="#E5E5E5"> now I want to have L 16</font>

349
00:16:58,600 --> 00:17:04,480
yeah<font color="#E5E5E5"> so those are this this is the basic</font>

350
00:17:02,439 --> 00:17:06,010
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> how you kind</font><font color="#CCCCCC"> of interact with</font><font color="#E5E5E5"> the</font>

351
00:17:04,480 --> 00:17:08,770
with the debugger I see is it going

352
00:17:06,010 --> 00:17:13,049
<font color="#CCCCCC">through and you're probably</font><font color="#E5E5E5"> aware of how</font>

353
00:17:08,770 --> 00:17:16,539
they're doing<font color="#CCCCCC"> it blah blah No okay so</font>

354
00:17:13,049 --> 00:17:18,789
this is<font color="#E5E5E5"> the XO display the symbol DT is</font>

355
00:17:16,539 --> 00:17:20,529
<font color="#E5E5E5">displayed type so I mentioned</font><font color="#CCCCCC"> that you</font>

356
00:17:18,789 --> 00:17:22,449
<font color="#E5E5E5">can</font><font color="#CCCCCC"> download all the symbols so that the</font>

357
00:17:20,529 --> 00:17:25,809
symbols are<font color="#CCCCCC"> not just location versus</font>

358
00:17:22,449 --> 00:17:27,490
versus memory versus the name memory

359
00:17:25,809 --> 00:17:31,529
location versus the name but it's also

360
00:17:27,490 --> 00:17:34,600
the data types<font color="#E5E5E5"> because like Windows has</font>

361
00:17:31,529 --> 00:17:37,620
like any operating<font color="#CCCCCC"> system and</font><font color="#E5E5E5"> notorious</font>

362
00:17:34,600 --> 00:17:40,360
numbers various numbers of<font color="#E5E5E5"> various</font>

363
00:17:37,620 --> 00:17:42,010
<font color="#E5E5E5">structures that exist in</font><font color="#CCCCCC"> memory during</font>

364
00:17:40,360 --> 00:17:45,729
<font color="#E5E5E5">the during the run of</font><font color="#CCCCCC"> the operating</font>

365
00:17:42,010 --> 00:17:47,620
system<font color="#CCCCCC"> so it's almost</font><font color="#E5E5E5"> very unlikely that</font>

366
00:17:45,730 --> 00:17:49,450
everybody knows all the fields or some

367
00:17:47,620 --> 00:17:55,229
of the some<font color="#CCCCCC"> of the structures so a</font>

368
00:17:49,450 --> 00:17:58,960
<font color="#E5E5E5">typical example is the one</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> always use</font>

369
00:17:55,230 --> 00:18:02,169
is the<font color="#E5E5E5"> equal process structure so you</font>

370
00:17:58,960 --> 00:18:05,429
can go<font color="#E5E5E5"> DT you know that it's in an T and</font>

371
00:18:02,169 --> 00:18:05,429
then<font color="#E5E5E5"> you go it process</font>

372
00:18:05,640 --> 00:18:10,440
so it then shows<font color="#CCCCCC"> you all the fields in</font>

373
00:18:08,820 --> 00:18:13,049
<font color="#E5E5E5">this structure</font><font color="#CCCCCC"> so you can see there are</font>

374
00:18:10,440 --> 00:18:15,600
so many fields<font color="#CCCCCC"> and and this a process</font>

375
00:18:13,049 --> 00:18:18,600
structure describes<font color="#CCCCCC"> its basically</font><font color="#E5E5E5"> as an</font>

376
00:18:15,600 --> 00:18:20,730
<font color="#E5E5E5">over like an object</font><font color="#CCCCCC"> that is a memory</font>

377
00:18:18,600 --> 00:18:24,659
<font color="#E5E5E5">representation of a process running in</font>

378
00:18:20,730 --> 00:18:26,040
<font color="#CCCCCC">memory it has its</font><font color="#E5E5E5"> own threads and and</font>

379
00:18:24,660 --> 00:18:29,460
things like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so it starts with</font>

380
00:18:26,040 --> 00:18:34,080
another another structure called K

381
00:18:29,460 --> 00:18:37,200
process yeah<font color="#E5E5E5"> you see you</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> the point</font>

382
00:18:34,080 --> 00:18:40,409
<font color="#CCCCCC">there are too many fields too - no but</font>

383
00:18:37,200 --> 00:18:42,780
it DT commands<font color="#E5E5E5"> if you know the structure</font>

384
00:18:40,410 --> 00:18:45,179
name<font color="#E5E5E5"> gives you at least</font><font color="#CCCCCC"> the idea of like</font>

385
00:18:42,780 --> 00:18:48,600
what<font color="#E5E5E5"> fields are available in which which</font>

386
00:18:45,179 --> 00:18:50,610
structure<font color="#CCCCCC"> you can also follow the this</font>

387
00:18:48,600 --> 00:18:52,740
DT command with<font color="#E5E5E5"> that with the name of</font>

388
00:18:50,610 --> 00:18:54,750
the<font color="#E5E5E5"> the structure and within with an</font>

389
00:18:52,740 --> 00:18:56,760
address<font color="#E5E5E5"> so you actually apply</font><font color="#CCCCCC"> that</font>

390
00:18:54,750 --> 00:19:00,240
structure to<font color="#CCCCCC"> the real object in memory</font>

391
00:18:56,760 --> 00:19:02,250
<font color="#CCCCCC">so</font><font color="#E5E5E5"> you can see various things in in a</font>

392
00:19:00,240 --> 00:19:04,410
real environment<font color="#E5E5E5"> so</font><font color="#CCCCCC"> for a particular</font>

393
00:19:02,250 --> 00:19:06,090
<font color="#CCCCCC">process you can</font><font color="#E5E5E5"> see all the modules you</font>

394
00:19:04,410 --> 00:19:09,919
<font color="#CCCCCC">can see every whether it's being</font>

395
00:19:06,090 --> 00:19:09,918
debugged or not and<font color="#E5E5E5"> and things like</font><font color="#CCCCCC"> that</font>

396
00:19:11,500 --> 00:19:17,540
<font color="#E5E5E5">okay so the next commands like a display</font>

397
00:19:15,380 --> 00:19:19,970
display<font color="#E5E5E5"> by display were display double</font>

398
00:19:17,540 --> 00:19:22,129
<font color="#CCCCCC">word display quad</font><font color="#E5E5E5"> word and so on display</font>

399
00:19:19,970 --> 00:19:23,720
pointer so when if you have a pointer in

400
00:19:22,130 --> 00:19:25,490
memory the pointer<font color="#E5E5E5"> will actually</font>

401
00:19:23,720 --> 00:19:27,710
<font color="#E5E5E5">dereference display pointer with</font>

402
00:19:25,490 --> 00:19:30,650
different<font color="#CCCCCC"> dereferences</font><font color="#E5E5E5"> and show where</font>

403
00:19:27,710 --> 00:19:35,510
this pointer<font color="#CCCCCC"> is pointing to</font><font color="#E5E5E5"> then you</font>

404
00:19:30,650 --> 00:19:37,630
<font color="#E5E5E5">have</font><font color="#CCCCCC"> K K is</font><font color="#E5E5E5"> largely deals with</font><font color="#CCCCCC"> the stack</font>

405
00:19:35,510 --> 00:19:41,060
<font color="#E5E5E5">so</font><font color="#CCCCCC"> you have you can see the stack</font>

406
00:19:37,630 --> 00:19:44,480
<font color="#E5E5E5">arguments to the functions there's some</font>

407
00:19:41,060 --> 00:19:48,550
use other useful<font color="#E5E5E5"> useful commands such as</font>

408
00:19:44,480 --> 00:19:50,840
<font color="#E5E5E5">Ln so if you don't know where you know</font>

409
00:19:48,550 --> 00:19:53,720
you're somewhere in<font color="#CCCCCC"> memory and suddenly</font>

410
00:19:50,840 --> 00:19:56,179
you<font color="#E5E5E5"> have no idea where you</font><font color="#CCCCCC"> are but</font><font color="#E5E5E5"> you</font>

411
00:19:53,720 --> 00:19:58,250
<font color="#CCCCCC">have the</font><font color="#E5E5E5"> memory location so we</font><font color="#CCCCCC"> can have</font>

412
00:19:56,180 --> 00:20:00,020
a look and we had a function before<font color="#E5E5E5"> that</font>

413
00:19:58,250 --> 00:20:03,020
we disassembled and we have the memory

414
00:20:00,020 --> 00:20:06,110
address so if I just press<font color="#CCCCCC"> Ln it will</font>

415
00:20:03,020 --> 00:20:10,220
tell me<font color="#E5E5E5"> that the actual exact match is</font>

416
00:20:06,110 --> 00:20:11,719
<font color="#CCCCCC">colonel</font><font color="#E5E5E5"> base create new text W so even</font>

417
00:20:10,220 --> 00:20:14,240
if you are if even if<font color="#E5E5E5"> you are in some</font>

418
00:20:11,720 --> 00:20:18,110
location that's not<font color="#CCCCCC"> necessarily so let's</font>

419
00:20:14,240 --> 00:20:21,080
<font color="#E5E5E5">not say</font><font color="#CCCCCC"> d0 let's say e zero it will tell</font>

420
00:20:18,110 --> 00:20:25,189
you that you are now in<font color="#E5E5E5"> create mutex W</font>

421
00:20:21,080 --> 00:20:28,129
plus<font color="#CCCCCC"> 10 so so like I said even if you're</font>

422
00:20:25,190 --> 00:20:30,560
<font color="#E5E5E5">even if you get lost a bit then the L</font>

423
00:20:28,130 --> 00:20:33,530
<font color="#E5E5E5">and command is a nice one will show you</font>

424
00:20:30,560 --> 00:20:36,730
the closest symbol<font color="#E5E5E5"> to to where you are</font>

425
00:20:33,530 --> 00:20:36,730
<font color="#CCCCCC">currently in memory</font>

426
00:20:38,150 --> 00:20:42,390
<font color="#CCCCCC">display head that it shows that when you</font>

427
00:20:40,380 --> 00:20:45,570
<font color="#CCCCCC">know the base module</font><font color="#E5E5E5"> lot of the file</font>

428
00:20:42,390 --> 00:20:47,970
usually<font color="#CCCCCC"> is loaded in</font><font color="#E5E5E5"> 400,000 hex on</font>

429
00:20:45,570 --> 00:20:50,970
32-bit you can just<font color="#CCCCCC"> displayed all the</font>

430
00:20:47,970 --> 00:20:53,429
header information<font color="#E5E5E5"> I'm not going to to</font>

431
00:20:50,970 --> 00:20:55,500
show<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because it shows you that</font><font color="#CCCCCC"> the</font>

432
00:20:53,429 --> 00:21:00,059
P<font color="#E5E5E5"> header it shows you</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the all the</font>

433
00:20:55,500 --> 00:21:01,860
segments of the file<font color="#E5E5E5"> all the sections</font>

434
00:21:00,059 --> 00:21:03,600
and<font color="#E5E5E5"> all the attributes of the section</font>

435
00:21:01,860 --> 00:21:05,639
zones and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> useful when</font>

436
00:21:03,600 --> 00:21:08,040
<font color="#CCCCCC">you analyze malware because malware</font>

437
00:21:05,640 --> 00:21:09,299
often has attributes which<font color="#E5E5E5"> are not as</font>

438
00:21:08,040 --> 00:21:13,320
common<font color="#CCCCCC"> as normal</font>

439
00:21:09,299 --> 00:21:13,860
normal files<font color="#CCCCCC"> disassembling we shall I</font>

440
00:21:13,320 --> 00:21:16,530
show you

441
00:21:13,860 --> 00:21:18,870
<font color="#CCCCCC">uf is specifically made</font><font color="#E5E5E5"> to disassemble</font>

442
00:21:16,530 --> 00:21:21,090
functions<font color="#E5E5E5"> when you use</font><font color="#CCCCCC"> UF then you get</font>

443
00:21:18,870 --> 00:21:22,949
the basic blocks<font color="#E5E5E5"> and every block when</font>

444
00:21:21,090 --> 00:21:24,899
you have<font color="#CCCCCC"> a when you have a branch it</font>

445
00:21:22,950 --> 00:21:26,400
shows you all<font color="#CCCCCC"> the link to the next</font><font color="#E5E5E5"> block</font>

446
00:21:24,900 --> 00:21:28,679
so<font color="#E5E5E5"> you can click on</font><font color="#CCCCCC"> the link and go to</font>

447
00:21:26,400 --> 00:21:30,960
go<font color="#E5E5E5"> to the next</font><font color="#CCCCCC"> block so that's its use</font>

448
00:21:28,679 --> 00:21:33,720
of useful when you know to disassemble

449
00:21:30,960 --> 00:21:35,429
functions now the control so<font color="#E5E5E5"> this is</font>

450
00:21:33,720 --> 00:21:39,990
these are the experience that those<font color="#E5E5E5"> were</font>

451
00:21:35,429 --> 00:21:41,730
now were the exploration commands<font color="#E5E5E5"> here</font>

452
00:21:39,990 --> 00:21:43,290
we're now going<font color="#CCCCCC"> to control</font><font color="#E5E5E5"> then once</font>

453
00:21:41,730 --> 00:21:46,440
when you start actually debugging the

454
00:21:43,290 --> 00:21:49,620
code<font color="#E5E5E5"> so you can trace which means you go</font>

455
00:21:46,440 --> 00:21:52,370
you know step by step or<font color="#CCCCCC"> proceed your</font>

456
00:21:49,620 --> 00:21:54,870
step over a<font color="#E5E5E5"> certain block function call</font>

457
00:21:52,370 --> 00:21:56,729
<font color="#CCCCCC">then you have some</font><font color="#E5E5E5"> other ones which are</font>

458
00:21:54,870 --> 00:21:58,649
very<font color="#E5E5E5"> much connected to like proceed</font>

459
00:21:56,730 --> 00:22:01,080
until<font color="#E5E5E5"> the first call</font>

460
00:21:58,650 --> 00:22:05,280
so here<font color="#E5E5E5"> perhaps we can go just to</font><font color="#CCCCCC"> see</font>

461
00:22:01,080 --> 00:22:08,070
what<font color="#E5E5E5"> happens when around PC so it just</font>

462
00:22:05,280 --> 00:22:10,950
go and then you know as soon as it hits

463
00:22:08,070 --> 00:22:13,620
the call function then it will it will

464
00:22:10,950 --> 00:22:15,360
break<font color="#E5E5E5"> so very very useful when you when</font>

465
00:22:13,620 --> 00:22:17,760
you<font color="#E5E5E5"> when you trace malware you often</font>

466
00:22:15,360 --> 00:22:19,290
<font color="#E5E5E5">look for the API calls and then you know</font>

467
00:22:17,760 --> 00:22:21,059
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> really not</font><font color="#CCCCCC"> that much interested</font>

468
00:22:19,290 --> 00:22:23,399
<font color="#CCCCCC">into what's happening before because you</font>

469
00:22:21,059 --> 00:22:25,530
know that sooner or<font color="#CCCCCC"> later you get</font><font color="#E5E5E5"> an API</font>

470
00:22:23,400 --> 00:22:28,770
function call and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> look at</font>

471
00:22:25,530 --> 00:22:30,720
<font color="#CCCCCC">all</font><font color="#E5E5E5"> the you can look at all all the</font>

472
00:22:28,770 --> 00:22:35,129
arguments which<font color="#CCCCCC"> we</font><font color="#E5E5E5"> generally on the</font>

473
00:22:30,720 --> 00:22:38,780
<font color="#E5E5E5">stack on 32-bit architectures and yeah</font>

474
00:22:35,130 --> 00:22:43,260
<font color="#CCCCCC">PC</font><font color="#E5E5E5"> and TC</font><font color="#CCCCCC"> are quite useful in</font><font color="#E5E5E5"> that sense</font>

475
00:22:38,780 --> 00:22:45,149
<font color="#CCCCCC">G is go go up is go until</font><font color="#E5E5E5"> return but you</font>

476
00:22:43,260 --> 00:22:47,400
<font color="#CCCCCC">have to be careful here because not all</font>

477
00:22:45,150 --> 00:22:49,200
the<font color="#E5E5E5"> function end up with the return so</font>

478
00:22:47,400 --> 00:22:50,220
when you hit return instruction only

479
00:22:49,200 --> 00:22:52,020
<font color="#E5E5E5">then you go</font>

480
00:22:50,220 --> 00:22:57,600
<font color="#E5E5E5">up to the calling function but of course</font>

481
00:22:52,020 --> 00:22:59,309
you can return by push<font color="#E5E5E5"> or</font><font color="#CCCCCC"> or jump didn't</font>

482
00:22:57,600 --> 00:23:01,408
<font color="#CCCCCC">directly</font><font color="#E5E5E5"> jump some somewhere else so</font>

483
00:22:59,309 --> 00:23:03,539
some some functions will never return<font color="#CCCCCC"> a</font>

484
00:23:01,409 --> 00:23:05,820
couple of other commands allows you to

485
00:23:03,539 --> 00:23:07,860
<font color="#E5E5E5">set up when you're in a kernel mode then</font>

486
00:23:05,820 --> 00:23:11,460
you<font color="#CCCCCC"> can choose</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> which process context</font>

487
00:23:07,860 --> 00:23:13,860
like even when<font color="#CCCCCC"> you are in user</font><font color="#E5E5E5"> mode then</font>

488
00:23:11,460 --> 00:23:15,840
you debug a specific<font color="#E5E5E5"> process you know</font>

489
00:23:13,860 --> 00:23:18,000
you<font color="#E5E5E5"> have your main module you have</font><font color="#CCCCCC"> your</font>

490
00:23:15,840 --> 00:23:19,350
own dynamic<font color="#E5E5E5"> loading libraries</font><font color="#CCCCCC"> and you're</font>

491
00:23:18,000 --> 00:23:21,210
always<font color="#E5E5E5"> more or less in this virtual</font>

492
00:23:19,350 --> 00:23:23,280
<font color="#CCCCCC">address space on that</font><font color="#E5E5E5"> process</font>

493
00:23:21,210 --> 00:23:24,120
but in kernel<font color="#CCCCCC"> mode you you really</font><font color="#E5E5E5"> don't</font>

494
00:23:23,280 --> 00:23:26,850
know where you're<font color="#E5E5E5"> gonna hit the</font>

495
00:23:24,120 --> 00:23:28,739
<font color="#E5E5E5">breakpoint</font><font color="#CCCCCC"> and sometimes you're</font>

496
00:23:26,850 --> 00:23:31,049
interested to be in<font color="#E5E5E5"> the process context</font>

497
00:23:28,740 --> 00:23:33,690
on<font color="#E5E5E5"> over to particular process let's say</font>

498
00:23:31,049 --> 00:23:36,780
it's<font color="#E5E5E5"> it's Microsoft Internet Explorer</font><font color="#CCCCCC"> or</font>

499
00:23:33,690 --> 00:23:39,360
edge or some other browser or<font color="#CCCCCC"> Explorer</font>

500
00:23:36,780 --> 00:23:41,730
dot exe<font color="#E5E5E5"> so using that process you can</font>

501
00:23:39,360 --> 00:23:44,789
set the<font color="#E5E5E5"> process context and sexy the</font>

502
00:23:41,730 --> 00:23:49,740
<font color="#E5E5E5">thread</font><font color="#CCCCCC"> contest fusion using the dot read</font>

503
00:23:44,789 --> 00:23:52,080
command breakpoints also very important

504
00:23:49,740 --> 00:23:54,780
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> have baby I</font><font color="#E5E5E5"> mean means</font>

505
00:23:52,080 --> 00:23:56,370
<font color="#CCCCCC">break point on access</font><font color="#E5E5E5"> so when you access</font>

506
00:23:54,780 --> 00:23:57,928
<font color="#CCCCCC">the memory location what</font><font color="#E5E5E5"> you want to</font>

507
00:23:56,370 --> 00:24:00,178
read or write you<font color="#CCCCCC"> can set</font><font color="#E5E5E5"> that up so</font>

508
00:23:57,929 --> 00:24:00,750
<font color="#E5E5E5">usually the right</font><font color="#CCCCCC"> axis is the one you're</font>

509
00:24:00,179 --> 00:24:05,760
looking<font color="#E5E5E5"> for</font>

510
00:24:00,750 --> 00:24:08,490
you<font color="#E5E5E5"> have on the real 32-bit processor</font>

511
00:24:05,760 --> 00:24:11,520
you have<font color="#E5E5E5"> for debugging for the hardware</font>

512
00:24:08,490 --> 00:24:13,080
<font color="#CCCCCC">base with</font><font color="#E5E5E5"> debugging breakpoints</font><font color="#CCCCCC"> but if</font>

513
00:24:11,520 --> 00:24:15,030
you have some new features<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

514
00:24:13,080 --> 00:24:18,570
<font color="#E5E5E5">use in</font><font color="#CCCCCC"> Windows DVD then you can have an</font>

515
00:24:15,030 --> 00:24:20,850
almost<font color="#E5E5E5"> like unlimited number of those be</font>

516
00:24:18,570 --> 00:24:23,939
a<font color="#E5E5E5"> breakpoints VP is the standard</font>

517
00:24:20,850 --> 00:24:26,428
<font color="#CCCCCC">breakpoint but you can have some options</font>

518
00:24:23,940 --> 00:24:27,840
<font color="#E5E5E5">like a breakpoint on certain address and</font>

519
00:24:26,429 --> 00:24:30,390
then after the<font color="#E5E5E5"> address you can put a</font>

520
00:24:27,840 --> 00:24:32,908
command which you want<font color="#E5E5E5"> to be executed so</font>

521
00:24:30,390 --> 00:24:36,720
you<font color="#E5E5E5"> you know every time I hit create</font>

522
00:24:32,909 --> 00:24:38,730
<font color="#E5E5E5">file I want to read the first argument</font>

523
00:24:36,720 --> 00:24:41,100
<font color="#E5E5E5">from the stack</font><font color="#CCCCCC"> and display that first</font>

524
00:24:38,730 --> 00:24:42,659
argument<font color="#E5E5E5"> in my command prompt window so</font>

525
00:24:41,100 --> 00:24:45,990
it allows you<font color="#E5E5E5"> to kind of almost like</font>

526
00:24:42,659 --> 00:24:48,960
<font color="#E5E5E5">one-line script for this</font><font color="#CCCCCC"> bu is an</font>

527
00:24:45,990 --> 00:24:51,240
interesting<font color="#E5E5E5"> one</font><font color="#CCCCCC"> and it allows you to set</font>

528
00:24:48,960 --> 00:24:53,990
a memory<font color="#E5E5E5"> breakpoint on any symbol even</font>

529
00:24:51,240 --> 00:24:56,400
<font color="#E5E5E5">if the module that's supposed to be</font>

530
00:24:53,990 --> 00:24:58,530
<font color="#E5E5E5">broken into is not yet loaded into</font>

531
00:24:56,400 --> 00:25:00,360
memory<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you know that you won't load</font>

532
00:24:58,530 --> 00:25:02,520
on some<font color="#CCCCCC"> crypto function but the crypto</font>

533
00:25:00,360 --> 00:25:03,100
module is not yet<font color="#CCCCCC"> loaded you can</font><font color="#E5E5E5"> still</font>

534
00:25:02,520 --> 00:25:05,139
set up

535
00:25:03,100 --> 00:25:08,678
but the unresolved<font color="#CCCCCC"> breakpoints on demand</font>

536
00:25:05,139 --> 00:25:11,139
the module loads<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually you</font><font color="#E5E5E5"> in</font>

537
00:25:08,679 --> 00:25:13,000
in<font color="#E5E5E5"> the best case you what you will get</font>

538
00:25:11,139 --> 00:25:15,399
this<font color="#E5E5E5"> this breakpoint</font><font color="#CCCCCC"> there are some</font>

539
00:25:13,000 --> 00:25:17,649
other<font color="#E5E5E5"> ways you can break for when any</font>

540
00:25:15,399 --> 00:25:21,908
libraries are loaded<font color="#E5E5E5"> so there's some</font>

541
00:25:17,649 --> 00:25:24,039
commands for managing the breakpoints

542
00:25:21,909 --> 00:25:28,090
like<font color="#E5E5E5"> breakpoint lays</font><font color="#CCCCCC"> break</font><font color="#E5E5E5"> from clear</font>

543
00:25:24,039 --> 00:25:29,799
and you<font color="#E5E5E5"> can also see BBC and</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> which</font>

544
00:25:28,090 --> 00:25:33,370
which kind of gives<font color="#E5E5E5"> you</font><font color="#CCCCCC"> a history</font><font color="#E5E5E5"> of</font>

545
00:25:29,799 --> 00:25:35,110
<font color="#E5E5E5">what you've</font><font color="#CCCCCC"> done before</font><font color="#E5E5E5"> to set up some</font>

546
00:25:33,370 --> 00:25:38,350
<font color="#CCCCCC">breakpoint</font><font color="#E5E5E5"> so here we can see that we</font>

547
00:25:35,110 --> 00:25:41,860
<font color="#CCCCCC">are on</font><font color="#E5E5E5"> I have to</font><font color="#CCCCCC"> break</font><font color="#E5E5E5"> on commands</font><font color="#CCCCCC"> VP 0</font>

548
00:25:38,350 --> 00:25:47,320
and<font color="#CCCCCC"> B P 1</font><font color="#E5E5E5"> and that's what I did</font><font color="#CCCCCC"> in this</font>

549
00:25:41,860 --> 00:25:49,209
environment<font color="#E5E5E5"> and the conditional</font>

550
00:25:47,320 --> 00:25:51,789
breakpoints which are kind of more<font color="#CCCCCC"> or</font>

551
00:25:49,210 --> 00:25:54,159
less mention is that sometimes like if

552
00:25:51,789 --> 00:25:58,269
<font color="#E5E5E5">you have a huge number of API</font><font color="#CCCCCC"> calls for</font>

553
00:25:54,159 --> 00:25:59,889
some functions<font color="#E5E5E5"> like messaging functions</font>

554
00:25:58,269 --> 00:26:01,659
for the<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> the messaging</font>

555
00:25:59,889 --> 00:26:03,699
loop and then some function<font color="#CCCCCC"> is called</font>

556
00:26:01,659 --> 00:26:06,220
millions of times but<font color="#E5E5E5"> you only want to</font>

557
00:26:03,700 --> 00:26:09,789
<font color="#E5E5E5">break when some consultant condition is</font>

558
00:26:06,220 --> 00:26:12,940
met<font color="#E5E5E5"> so you can have like if my window</font>

559
00:26:09,789 --> 00:26:15,340
name is virus dot exe only then I want

560
00:26:12,940 --> 00:26:18,639
to<font color="#E5E5E5"> break into this window messaging loop</font>

561
00:26:15,340 --> 00:26:20,470
<font color="#E5E5E5">it also allows you to you</font><font color="#CCCCCC"> can have like</font>

562
00:26:18,639 --> 00:26:23,320
a<font color="#CCCCCC"> scripts and you</font><font color="#E5E5E5"> can this is this is</font>

563
00:26:20,470 --> 00:26:25,600
and like a lot this how they how you

564
00:26:23,320 --> 00:26:27,580
know whoever<font color="#E5E5E5"> was developing windbg at</font>

565
00:26:25,600 --> 00:26:32,070
the beginning in third row here<font color="#E5E5E5"> you see</font>

566
00:26:27,580 --> 00:26:36,820
this dollar<font color="#E5E5E5"> dollar and then this kind of</font>

567
00:26:32,070 --> 00:26:39,220
<font color="#E5E5E5">no yes most let's say smaller</font><font color="#CCCCCC"> didn't</font>

568
00:26:36,820 --> 00:26:42,850
sign this<font color="#E5E5E5"> is actually tells you call the</font>

569
00:26:39,220 --> 00:26:44,590
script so whoever was developing it

570
00:26:42,850 --> 00:26:46,269
sounds like sometimes that windbg was

571
00:26:44,590 --> 00:26:48,990
developed only<font color="#E5E5E5"> for the developer hood</font>

572
00:26:46,269 --> 00:26:51,190
developed it and not for other people

573
00:26:48,990 --> 00:26:53,080
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it see I'll</font><font color="#E5E5E5"> show you later some</font>

574
00:26:51,190 --> 00:26:55,120
other other ways how you can call<font color="#E5E5E5"> kaha</font>

575
00:26:53,080 --> 00:26:58,870
<font color="#E5E5E5">we can call</font><font color="#CCCCCC"> script</font><font color="#E5E5E5"> and it is really</font>

576
00:26:55,120 --> 00:27:01,899
crazy<font color="#CCCCCC"> so these are the other ones</font>

577
00:26:58,870 --> 00:27:03,729
they're like exceptions like<font color="#CCCCCC"> SX</font><font color="#E5E5E5"> is there</font>

578
00:27:01,899 --> 00:27:05,350
like a millions like millions there

579
00:27:03,730 --> 00:27:07,750
there are a lot of exceptions within

580
00:27:05,350 --> 00:27:10,959
<font color="#E5E5E5">Windows which trigger on certain</font><font color="#CCCCCC"> events</font>

581
00:27:07,750 --> 00:27:12,940
so<font color="#E5E5E5"> you can set up your your your deep</font>

582
00:27:10,960 --> 00:27:16,270
windbg or debugger<font color="#E5E5E5"> to</font>

583
00:27:12,940 --> 00:27:17,950
<font color="#E5E5E5">to break on a certain event within</font><font color="#CCCCCC"> the</font>

584
00:27:16,270 --> 00:27:20,530
system so<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example these are two</font>

585
00:27:17,950 --> 00:27:22,240
<font color="#E5E5E5">examples one when the module load so</font>

586
00:27:20,530 --> 00:27:24,190
when the new dilemma<font color="#CCCCCC"> Kleiber loads you</font>

587
00:27:22,240 --> 00:27:26,440
<font color="#CCCCCC">bruh hit the breakpoint or when the new</font>

588
00:27:24,190 --> 00:27:28,060
process is<font color="#CCCCCC"> created but there are there</font>

589
00:27:26,440 --> 00:27:32,440
<font color="#CCCCCC">are a lot of different new events so if</font>

590
00:27:28,060 --> 00:27:35,919
you only run<font color="#CCCCCC"> SX</font><font color="#E5E5E5"> then you see that</font><font color="#CCCCCC"> there</font>

591
00:27:32,440 --> 00:27:37,900
like about<font color="#CCCCCC"> 50 different events but</font><font color="#E5E5E5"> like</font>

592
00:27:35,920 --> 00:27:39,460
the first few<font color="#CCCCCC"> are the most useful one</font>

593
00:27:37,900 --> 00:27:40,930
that you know<font color="#CCCCCC"> creates read create</font>

594
00:27:39,460 --> 00:27:43,660
process<font color="#CCCCCC"> like this process so you can</font>

595
00:27:40,930 --> 00:27:46,060
<font color="#CCCCCC">break on certain things that typically</font>

596
00:27:43,660 --> 00:27:50,560
<font color="#CCCCCC">you would expect fall from</font><font color="#E5E5E5"> from malware</font>

597
00:27:46,060 --> 00:27:52,240
to to do we do it within your system<font color="#E5E5E5"> and</font>

598
00:27:50,560 --> 00:27:53,980
of course when you especially when<font color="#E5E5E5"> your</font>

599
00:27:52,240 --> 00:27:56,770
script<font color="#E5E5E5"> you want to have something that</font>

600
00:27:53,980 --> 00:28:00,490
<font color="#E5E5E5">will output</font><font color="#CCCCCC"> the results to your to</font><font color="#E5E5E5"> your</font>

601
00:27:56,770 --> 00:28:03,129
screen or to your window<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> two</font>

602
00:28:00,490 --> 00:28:05,530
<font color="#CCCCCC">commands printf na echo echo I think</font>

603
00:28:03,130 --> 00:28:07,840
just gives you without possibility<font color="#E5E5E5"> to</font>

604
00:28:05,530 --> 00:28:09,520
format to have a format string<font color="#E5E5E5"> printf is</font>

605
00:28:07,840 --> 00:28:12,389
like standard printf<font color="#CCCCCC"> where you can have</font>

606
00:28:09,520 --> 00:28:17,230
different formatting<font color="#CCCCCC"> strings to output</font>

607
00:28:12,390 --> 00:28:20,110
<font color="#E5E5E5">different different different data so</font>

608
00:28:17,230 --> 00:28:23,170
here here we see like especially<font color="#E5E5E5"> one of</font>

609
00:28:20,110 --> 00:28:25,570
<font color="#E5E5E5">the tasks when you debug</font><font color="#CCCCCC"> malware is</font><font color="#E5E5E5"> to</font>

610
00:28:23,170 --> 00:28:27,640
<font color="#E5E5E5">too often unpack the code because</font>

611
00:28:25,570 --> 00:28:29,710
malware<font color="#E5E5E5"> can be obfuscated on the system</font>

612
00:28:27,640 --> 00:28:31,990
on the<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you wanna you want to be</font>

613
00:28:29,710 --> 00:28:34,270
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> decrypt it in memory to see this</font>

614
00:28:31,990 --> 00:28:36,790
new module<font color="#E5E5E5"> maybe or new code that that's</font>

615
00:28:34,270 --> 00:28:38,830
been now be obfuscated<font color="#E5E5E5"> and the way to</font>

616
00:28:36,790 --> 00:28:41,470
write<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> the disk and so you can</font>

617
00:28:38,830 --> 00:28:43,990
maybe load it in in a<font color="#CCCCCC"> disassemble</font><font color="#E5E5E5"> or I</font>

618
00:28:41,470 --> 00:28:45,880
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> know al-qaida</font><font color="#CCCCCC"> Pro then you</font><font color="#E5E5E5"> just</font>

619
00:28:43,990 --> 00:28:47,620
<font color="#CCCCCC">write</font><font color="#E5E5E5"> memories tell you the file name</font>

620
00:28:45,880 --> 00:28:49,390
and<font color="#E5E5E5"> then you give</font><font color="#CCCCCC"> it the range the start</font>

621
00:28:47,620 --> 00:28:52,149
of the address and and the length of the

622
00:28:49,390 --> 00:28:54,160
range<font color="#E5E5E5"> so it's it's that's very simple so</font>

623
00:28:52,150 --> 00:28:56,470
in fact like you<font color="#E5E5E5"> you see that you don't</font>

624
00:28:54,160 --> 00:28:59,560
<font color="#E5E5E5">have to use all the like the the the</font>

625
00:28:56,470 --> 00:29:02,560
menus<font color="#E5E5E5"> that once you</font><font color="#CCCCCC"> learned like I don't</font>

626
00:28:59,560 --> 00:29:05,830
know<font color="#E5E5E5"> 50 commands maybe then you you get</font>

627
00:29:02,560 --> 00:29:08,080
quite a lot of<font color="#E5E5E5"> power in controlling both</font>

628
00:29:05,830 --> 00:29:10,510
the<font color="#E5E5E5"> user mode and and the kernel</font><font color="#CCCCCC"> mode a</font>

629
00:29:08,080 --> 00:29:12,639
lot of these<font color="#E5E5E5"> commands were equally valid</font>

630
00:29:10,510 --> 00:29:15,960
in both modes<font color="#E5E5E5"> and now there's a there's</font>

631
00:29:12,640 --> 00:29:19,090
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of complication</font><font color="#E5E5E5"> or</font>

632
00:29:15,960 --> 00:29:21,250
again it is due<font color="#CCCCCC"> to the I guess Windows</font>

633
00:29:19,090 --> 00:29:24,949
windbg developers and the fact that

634
00:29:21,250 --> 00:29:28,730
Windows kernel is is written in C++<font color="#CCCCCC"> so</font>

635
00:29:24,950 --> 00:29:31,100
these guys by default you have<font color="#CCCCCC"> so-called</font>

636
00:29:28,730 --> 00:29:33,529
evaluators one evaluator and default

637
00:29:31,100 --> 00:29:37,370
evaluator<font color="#CCCCCC"> EES is the assembly evaluator</font>

638
00:29:33,529 --> 00:29:39,950
<font color="#E5E5E5">and here you see at-at</font><font color="#CCCCCC"> Mazen</font><font color="#E5E5E5"> Microsoft</font>

639
00:29:37,370 --> 00:29:42,260
assembler<font color="#E5E5E5"> and then you also have a C++</font>

640
00:29:39,950 --> 00:29:45,139
evaluator which which is actually<font color="#CCCCCC"> very</font>

641
00:29:42,260 --> 00:29:47,419
<font color="#CCCCCC">useful when you know of the members of</font>

642
00:29:45,139 --> 00:29:51,529
<font color="#CCCCCC">certain structures so you have a pointer</font>

643
00:29:47,419 --> 00:29:54,080
and<font color="#E5E5E5"> then you can say</font><font color="#CCCCCC"> an arrow</font><font color="#E5E5E5"> pointer to</font>

644
00:29:51,529 --> 00:29:56,480
the structure you<font color="#CCCCCC"> cast the type arrow</font>

645
00:29:54,080 --> 00:29:59,240
and then you can say<font color="#CCCCCC"> okay this is</font><font color="#E5E5E5"> a now</font>

646
00:29:56,480 --> 00:30:02,389
C++ evaluator<font color="#E5E5E5"> instead of going</font><font color="#CCCCCC"> through</font>

647
00:29:59,240 --> 00:30:05,500
from one<font color="#CCCCCC"> address to the other and and</font>

648
00:30:02,389 --> 00:30:06,639
then do it<font color="#E5E5E5"> do it</font><font color="#CCCCCC"> in assembly so</font>

649
00:30:05,500 --> 00:30:09,289
[Music]

650
00:30:06,639 --> 00:30:12,320
scripting now<font color="#E5E5E5"> we'll see that on an</font>

651
00:30:09,289 --> 00:30:14,029
<font color="#E5E5E5">example of a script for script you also</font>

652
00:30:12,320 --> 00:30:15,620
need some<font color="#CCCCCC"> kind of language</font><font color="#E5E5E5"> where you can</font>

653
00:30:14,029 --> 00:30:19,690
actually control<font color="#E5E5E5"> you need to have some</font>

654
00:30:15,620 --> 00:30:24,049
kind<font color="#E5E5E5"> of looping and stuff if then else</font>

655
00:30:19,690 --> 00:30:26,450
<font color="#CCCCCC">ternary operator when you say well if if</font>

656
00:30:24,049 --> 00:30:28,760
the condition is true<font color="#E5E5E5"> execute one thing</font>

657
00:30:26,450 --> 00:30:31,309
if not<font color="#E5E5E5"> then the other thing from that</font>

658
00:30:28,760 --> 00:30:33,769
same command<font color="#E5E5E5"> you understand that for for</font>

659
00:30:31,309 --> 00:30:36,049
each<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> or do-while loops</font><font color="#E5E5E5"> break</font>

660
00:30:33,769 --> 00:30:38,539
continue and blocks<font color="#E5E5E5"> which basically</font><font color="#CCCCCC"> just</font>

661
00:30:36,049 --> 00:30:42,879
gives you<font color="#CCCCCC"> like one piece of piece of</font>

662
00:30:38,539 --> 00:30:46,460
code so here we we see<font color="#E5E5E5"> I'm not going to</font>

663
00:30:42,880 --> 00:30:48,260
go into<font color="#E5E5E5"> begin to</font><font color="#CCCCCC"> in-depth into all the</font>

664
00:30:46,460 --> 00:30:50,510
scripting but this is just<font color="#E5E5E5"> an example to</font>

665
00:30:48,260 --> 00:30:54,679
<font color="#CCCCCC">see what is an example is trying</font><font color="#E5E5E5"> to do</font>

666
00:30:50,510 --> 00:30:57,320
here<font color="#E5E5E5"> we see a C++ evaluator</font><font color="#CCCCCC"> that costs</font>

667
00:30:54,679 --> 00:31:01,070
pointer to the list<font color="#E5E5E5"> entry structure and</font>

668
00:30:57,320 --> 00:31:02,779
the PEBS process environment block<font color="#E5E5E5"> which</font>

669
00:31:01,070 --> 00:31:05,480
shows the<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> the process</font>

670
00:31:02,779 --> 00:31:08,000
<font color="#CCCCCC">in user mode</font><font color="#E5E5E5"> then we have a loader field</font>

671
00:31:05,480 --> 00:31:10,149
you see the arrow to<font color="#CCCCCC"> the loyalty R and</font>

672
00:31:08,000 --> 00:31:12,799
then<font color="#CCCCCC"> we see the arrow to the in loader</font>

673
00:31:10,149 --> 00:31:14,899
<font color="#E5E5E5">blood order modules list so we are</font>

674
00:31:12,799 --> 00:31:17,389
<font color="#E5E5E5">setting</font><font color="#CCCCCC"> the pointer to the list of</font><font color="#E5E5E5"> all</font>

675
00:31:14,899 --> 00:31:19,908
<font color="#CCCCCC">the dll to the existing memory</font><font color="#E5E5E5"> and then</font>

676
00:31:17,389 --> 00:31:21,918
we will traverse the forward the the

677
00:31:19,909 --> 00:31:24,049
linked list has a forward<font color="#E5E5E5"> in backwards</font>

678
00:31:21,919 --> 00:31:26,809
field which<font color="#E5E5E5"> allows you to traverse the</font>

679
00:31:24,049 --> 00:31:31,309
linked<font color="#E5E5E5"> list in memory and then basically</font>

680
00:31:26,809 --> 00:31:32,820
<font color="#E5E5E5">you</font><font color="#CCCCCC"> just do a for loop to to the</font><font color="#E5E5E5"> forward</font>

681
00:31:31,309 --> 00:31:38,059
link and and

682
00:31:32,820 --> 00:31:41,129
eventually you print out<font color="#E5E5E5"> the Unicode</font>

683
00:31:38,059 --> 00:31:43,139
<font color="#E5E5E5">full DLL name and here we again see we</font>

684
00:31:41,130 --> 00:31:46,019
specified<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we want to have a</font><font color="#CCCCCC"> simple</font>

685
00:31:43,139 --> 00:31:49,758
<font color="#CCCCCC">sparse evaluator where</font><font color="#E5E5E5"> our pointer in in</font>

686
00:31:46,019 --> 00:31:52,889
temporary variable<font color="#CCCCCC"> two points to the</font>

687
00:31:49,759 --> 00:31:56,899
points to the link structure that's<font color="#E5E5E5"> cost</font>

688
00:31:52,889 --> 00:32:00,000
<font color="#E5E5E5">I guess as a</font><font color="#CCCCCC"> ldillard a data table entry</font>

689
00:31:56,899 --> 00:32:01,830
and then pull<font color="#E5E5E5"> DLL named field this gives</font>

690
00:32:00,000 --> 00:32:04,200
you the name of<font color="#CCCCCC"> the DLL</font><font color="#E5E5E5"> so you know it</font>

691
00:32:01,830 --> 00:32:07,199
gives<font color="#E5E5E5"> you some idea and it's it's kind</font>

692
00:32:04,200 --> 00:32:09,809
of error-prone you you spend a lot of

693
00:32:07,200 --> 00:32:13,559
time putting<font color="#E5E5E5"> together these even for the</font>

694
00:32:09,809 --> 00:32:15,539
simple simple<font color="#E5E5E5"> functions so and now now</font>

695
00:32:13,559 --> 00:32:17,549
<font color="#E5E5E5">that my favorite bit is like how do you</font>

696
00:32:15,539 --> 00:32:21,179
call<font color="#CCCCCC"> this so these are the all the way</font>

697
00:32:17,549 --> 00:32:24,299
all<font color="#E5E5E5"> the ways how you can call a script</font>

698
00:32:21,179 --> 00:32:25,799
in windbg<font color="#CCCCCC"> so these are all the operators</font>

699
00:32:24,299 --> 00:32:28,279
you give it<font color="#E5E5E5"> the file name is the name of</font>

700
00:32:25,799 --> 00:32:31,408
<font color="#E5E5E5">the script</font><font color="#CCCCCC"> and so you have this dollar</font>

701
00:32:28,279 --> 00:32:34,350
less than dollar less than bigger than

702
00:32:31,409 --> 00:32:37,559
they all have subtle<font color="#E5E5E5"> differences</font><font color="#CCCCCC"> the</font>

703
00:32:34,350 --> 00:32:41,990
last one<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to set arguments the</font>

704
00:32:37,559 --> 00:32:45,480
<font color="#CCCCCC">first two allows you to have I think</font>

705
00:32:41,990 --> 00:32:47,669
semicolon as a name<font color="#E5E5E5"> of the file</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

706
00:32:45,480 --> 00:32:50,220
two don't allow you<font color="#E5E5E5"> to have semicolon as</font>

707
00:32:47,669 --> 00:32:54,509
the name<font color="#E5E5E5"> of the file so they take they</font>

708
00:32:50,220 --> 00:33:01,679
kind<font color="#CCCCCC"> of make it</font><font color="#E5E5E5"> very simple it's quite</font>

709
00:32:54,509 --> 00:33:04,049
<font color="#E5E5E5">weird luckily dum-dum-dum JavaScript</font>

710
00:33:01,679 --> 00:33:06,840
<font color="#CCCCCC">ever language of everybody who deliver</font>

711
00:33:04,049 --> 00:33:11,100
velop any kind of application<font color="#CCCCCC"> full</font><font color="#E5E5E5"> stack</font>

712
00:33:06,840 --> 00:33:12,689
<font color="#E5E5E5">developer so why not windbg there are</font>

713
00:33:11,100 --> 00:33:15,209
lots of actually plugins<font color="#E5E5E5"> did we</font><font color="#CCCCCC"> did we</font>

714
00:33:12,690 --> 00:33:17,340
<font color="#CCCCCC">are typically</font><font color="#E5E5E5"> no know that people who</font>

715
00:33:15,210 --> 00:33:20,419
program in windbg<font color="#CCCCCC"> generally use</font><font color="#E5E5E5"> the</font>

716
00:33:17,340 --> 00:33:22,709
<font color="#CCCCCC">python extension for it</font><font color="#E5E5E5"> called pike ad</font>

717
00:33:20,419 --> 00:33:25,139
<font color="#CCCCCC">but i have to say that looking at</font>

718
00:33:22,710 --> 00:33:27,149
comparing pike<font color="#E5E5E5"> ad and this</font><font color="#CCCCCC"> javascript</font>

719
00:33:25,139 --> 00:33:31,500
which is actually done by<font color="#CCCCCC"> microsoft guys</font>

720
00:33:27,149 --> 00:33:34,199
<font color="#CCCCCC">I would say that javascript is is more</font>

721
00:33:31,500 --> 00:33:36,509
powerful<font color="#E5E5E5"> despite of my preference to by</font>

722
00:33:34,200 --> 00:33:40,860
some as<font color="#CCCCCC"> a programming language</font><font color="#E5E5E5"> so what</font>

723
00:33:36,509 --> 00:33:42,899
it is is they try to build<font color="#CCCCCC"> they</font><font color="#E5E5E5"> were</font>

724
00:33:40,860 --> 00:33:44,850
<font color="#CCCCCC">selecting some improvements in latest</font>

725
00:33:42,899 --> 00:33:47,219
version of windbg

726
00:33:44,850 --> 00:33:51,469
and they<font color="#CCCCCC"> built so-called debugger object</font>

727
00:33:47,220 --> 00:33:54,960
mode<font color="#E5E5E5"> model</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are so many internal</font>

728
00:33:51,470 --> 00:33:56,970
<font color="#E5E5E5">objects in memory</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> the debugger on</font>

729
00:33:54,960 --> 00:33:59,550
<font color="#E5E5E5">the operating system but also in the the</font>

730
00:33:56,970 --> 00:34:01,650
debuggers variables so the Microsoft

731
00:33:59,550 --> 00:34:05,669
guys realized that it's very difficult

732
00:34:01,650 --> 00:34:07,970
<font color="#CCCCCC">to do to use windbg and decided that</font>

733
00:34:05,670 --> 00:34:09,659
<font color="#E5E5E5">they decided they wanted to</font>

734
00:34:07,970 --> 00:34:12,000
significantly<font color="#E5E5E5"> improve the user</font>

735
00:34:09,659 --> 00:34:13,710
experience<font color="#E5E5E5"> and make the debugging much</font>

736
00:34:12,000 --> 00:34:15,989
easier so they built this debugger

737
00:34:13,710 --> 00:34:17,610
object module<font color="#E5E5E5"> model a lot will we'll go</font>

738
00:34:15,989 --> 00:34:20,850
through it a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> in more details</font>

739
00:34:17,610 --> 00:34:23,160
<font color="#E5E5E5">but then they built a bridge between the</font>

740
00:34:20,850 --> 00:34:27,060
debugger<font color="#E5E5E5"> object model and the chakra</font>

741
00:34:23,159 --> 00:34:28,889
core engine which is<font color="#CCCCCC"> the edge Explorer</font>

742
00:34:27,060 --> 00:34:30,750
<font color="#E5E5E5">or JavaScript engine that's also</font>

743
00:34:28,889 --> 00:34:33,839
<font color="#E5E5E5">available as an</font><font color="#CCCCCC"> open source from</font>

744
00:34:30,750 --> 00:34:36,719
Microsoft<font color="#E5E5E5"> and then added some additional</font>

745
00:34:33,840 --> 00:34:39,840
<font color="#E5E5E5">interesting things which are generally</font>

746
00:34:36,719 --> 00:34:45,029
seen<font color="#CCCCCC"> in c-sharp</font><font color="#E5E5E5"> and dotnet programming</font>

747
00:34:39,840 --> 00:34:46,980
so how many c-sharp net<font color="#E5E5E5"> people here okay</font>

748
00:34:45,030 --> 00:34:51,030
<font color="#CCCCCC">quite a few but I think we have a</font>

749
00:34:46,980 --> 00:34:54,810
preference for open<font color="#E5E5E5"> source Linux</font><font color="#CCCCCC"> C with</font>

750
00:34:51,030 --> 00:34:57,900
<font color="#CCCCCC">UNIX e stuff</font><font color="#E5E5E5"> okay so I just wanted to</font>

751
00:34:54,810 --> 00:34:59,520
know it also allows you<font color="#CCCCCC"> to the</font>

752
00:34:57,900 --> 00:35:01,350
<font color="#E5E5E5">JavaScript not doesn't</font><font color="#CCCCCC"> like just the</font>

753
00:34:59,520 --> 00:35:03,030
script but also to extend<font color="#E5E5E5"> the object</font>

754
00:35:01,350 --> 00:35:05,400
model<font color="#CCCCCC"> so for example if you need some</font>

755
00:35:03,030 --> 00:35:06,930
additional field for like a<font color="#E5E5E5"> process</font>

756
00:35:05,400 --> 00:35:09,420
structure<font color="#E5E5E5"> or interested in some</font>

757
00:35:06,930 --> 00:35:11,399
<font color="#E5E5E5">particular combination of two fields you</font>

758
00:35:09,420 --> 00:35:13,290
can<font color="#CCCCCC"> create your own field</font><font color="#E5E5E5"> and suddenly</font>

759
00:35:11,400 --> 00:35:15,240
did that object and structure we have

760
00:35:13,290 --> 00:35:17,550
the<font color="#CCCCCC"> additional field</font><font color="#E5E5E5"> it so allows you to</font>

761
00:35:15,240 --> 00:35:18,180
<font color="#E5E5E5">extend that and it's that's very</font>

762
00:35:17,550 --> 00:35:21,180
powerful

763
00:35:18,180 --> 00:35:25,350
so here's here are some of the object or

764
00:35:21,180 --> 00:35:27,810
some of the objects objects in the

765
00:35:25,350 --> 00:35:30,029
object model<font color="#CCCCCC"> you can have the main one</font>

766
00:35:27,810 --> 00:35:32,490
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the debugger and the main command</font><font color="#E5E5E5"> you</font>

767
00:35:30,030 --> 00:35:35,940
use is<font color="#E5E5E5"> DX so the debugger represent the</font>

768
00:35:32,490 --> 00:35:40,620
debugger itself and then underneath you

769
00:35:35,940 --> 00:35:43,770
have<font color="#E5E5E5"> like a hierarchy of various objects</font>

770
00:35:40,620 --> 00:35:46,560
<font color="#E5E5E5">and so we can see here if I run the X</font>

771
00:35:43,770 --> 00:35:48,509
and just<font color="#E5E5E5"> see the</font><font color="#CCCCCC"> the so you can also</font>

772
00:35:46,560 --> 00:35:51,240
<font color="#E5E5E5">have</font><font color="#CCCCCC"> different reader</font>

773
00:35:48,510 --> 00:35:57,180
levels<font color="#E5E5E5"> so for example if I said</font><font color="#CCCCCC"> VX minus</font>

774
00:35:51,240 --> 00:35:58,770
<font color="#E5E5E5">r1 and debugger it basically gives you</font>

775
00:35:57,180 --> 00:36:00,779
gives me<font color="#E5E5E5"> this clickable</font>

776
00:35:58,770 --> 00:36:03,570
it's called<font color="#CCCCCC"> debug the markup language</font>

777
00:36:00,780 --> 00:36:07,770
which<font color="#CCCCCC"> gives you debugger and and other</font>

778
00:36:03,570 --> 00:36:10,320
members of the<font color="#CCCCCC"> debugger</font><font color="#E5E5E5"> object</font><font color="#CCCCCC"> so here</font>

779
00:36:07,770 --> 00:36:14,130
<font color="#CCCCCC">we have session settings</font><font color="#E5E5E5"> and if I go one</font>

780
00:36:10,320 --> 00:36:17,880
level further<font color="#CCCCCC"> session is</font><font color="#E5E5E5"> something that</font>

781
00:36:14,130 --> 00:36:20,700
you created while you debugging settings

782
00:36:17,880 --> 00:36:23,630
are the<font color="#CCCCCC"> debugger settings so if I go one</font>

783
00:36:20,700 --> 00:36:26,100
<font color="#E5E5E5">level further then I can see other</font>

784
00:36:23,630 --> 00:36:29,150
possible commands<font color="#E5E5E5"> so we see that we</font><font color="#CCCCCC"> have</font>

785
00:36:26,100 --> 00:36:31,020
one<font color="#CCCCCC"> session in a time travel mode</font>

786
00:36:29,150 --> 00:36:33,330
<font color="#E5E5E5">anybody to guess for the</font><font color="#CCCCCC"> try</font>

787
00:36:31,020 --> 00:36:37,320
<font color="#CCCCCC">time-traveling mode</font><font color="#E5E5E5"> I would love to have</font>

788
00:36:33,330 --> 00:36:41,549
that<font color="#CCCCCC"> to travel back in past but not not</font>

789
00:36:37,320 --> 00:36:44,360
<font color="#E5E5E5">only for few seconds I have to say so</font>

790
00:36:41,550 --> 00:36:47,430
here we have<font color="#E5E5E5"> like state you can see</font>

791
00:36:44,360 --> 00:36:49,950
debugger variables if<font color="#CCCCCC"> you click on</font><font color="#E5E5E5"> it</font>

792
00:36:47,430 --> 00:36:52,230
with<font color="#E5E5E5"> the current session current process</font>

793
00:36:49,950 --> 00:36:55,919
if you click through<font color="#E5E5E5"> so it basically</font>

794
00:36:52,230 --> 00:36:58,770
<font color="#CCCCCC">allows you to see all</font><font color="#E5E5E5"> the hierarchy of</font>

795
00:36:55,920 --> 00:37:00,720
<font color="#E5E5E5">the object model but also click</font><font color="#CCCCCC"> through</font>

796
00:36:58,770 --> 00:37:03,240
and investigate<font color="#E5E5E5"> without actually knowing</font>

797
00:37:00,720 --> 00:37:05,279
much about<font color="#E5E5E5"> how you use the</font><font color="#CCCCCC"> Dax command</font>

798
00:37:03,240 --> 00:37:07,439
<font color="#E5E5E5">how your user makes it makes it so much</font>

799
00:37:05,280 --> 00:37:10,140
<font color="#E5E5E5">more user friendly if you know about</font>

800
00:37:07,440 --> 00:37:13,020
<font color="#E5E5E5">Optive operating systems and the objects</font>

801
00:37:10,140 --> 00:37:16,620
then everything makes it much much

802
00:37:13,020 --> 00:37:18,480
easier easier to use<font color="#CCCCCC"> so from then on</font>

803
00:37:16,620 --> 00:37:20,549
this object model like I said it's not

804
00:37:18,480 --> 00:37:22,770
just<font color="#E5E5E5"> visible through the debugger</font><font color="#CCCCCC"> but</font>

805
00:37:20,550 --> 00:37:28,110
it's also visible<font color="#E5E5E5"> in the JavaScript and</font>

806
00:37:22,770 --> 00:37:30,870
<font color="#E5E5E5">the new didn't do</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> new user</font><font color="#CCCCCC"> interface</font>

807
00:37:28,110 --> 00:37:33,120
the windbg next or the<font color="#E5E5E5"> preview also</font>

808
00:37:30,870 --> 00:37:35,339
allows you<font color="#CCCCCC"> to do something</font><font color="#E5E5E5"> like within</font>

809
00:37:33,120 --> 00:37:36,930
JavaScript set and execute commands<font color="#E5E5E5"> like</font>

810
00:37:35,340 --> 00:37:39,510
<font color="#CCCCCC">on assemble command when you</font><font color="#E5E5E5"> hit</font><font color="#CCCCCC"> a</font>

811
00:37:36,930 --> 00:37:41,520
<font color="#E5E5E5">breakpoint</font><font color="#CCCCCC"> you have host dot name space</font>

812
00:37:39,510 --> 00:37:43,080
the debugger that utility that control

813
00:37:41,520 --> 00:37:46,170
dot<font color="#CCCCCC"> executes to go</font><font color="#E5E5E5"> and super simple</font>

814
00:37:43,080 --> 00:37:47,940
<font color="#CCCCCC">right except you</font><font color="#E5E5E5"> have you have in the in</font>

815
00:37:46,170 --> 00:37:50,340
the right<font color="#CCCCCC"> marker software you</font><font color="#E5E5E5"> have all</font>

816
00:37:47,940 --> 00:37:52,350
these kind of it intellisense<font color="#E5E5E5"> thing when</font>

817
00:37:50,340 --> 00:37:53,970
you press the dots then you know you if

818
00:37:52,350 --> 00:37:57,259
<font color="#E5E5E5">you know well just a little</font><font color="#CCCCCC"> bit it kind</font>

819
00:37:53,970 --> 00:37:59,509
of helps<font color="#CCCCCC"> you with with how you</font>

820
00:37:57,260 --> 00:38:01,520
<font color="#E5E5E5">you can get to your final command but</font>

821
00:37:59,510 --> 00:38:06,170
it's all well documented<font color="#E5E5E5"> in the good old</font>

822
00:38:01,520 --> 00:38:08,840
Microsoft ways<font color="#CCCCCC"> and so we can I guess</font>

823
00:38:06,170 --> 00:38:10,760
<font color="#CCCCCC">some some of the commands like you're</font>

824
00:38:08,840 --> 00:38:12,590
even<font color="#E5E5E5"> clever so they are not cryptic as</font>

825
00:38:10,760 --> 00:38:14,510
the ones to load the script<font color="#E5E5E5"> we have</font>

826
00:38:12,590 --> 00:38:17,240
<font color="#CCCCCC">stripped load to load the script script</font>

827
00:38:14,510 --> 00:38:19,880
<font color="#E5E5E5">run script download list which scripts</font>

828
00:38:17,240 --> 00:38:21,529
are loaded<font color="#E5E5E5"> and which scripts up script</font>

829
00:38:19,880 --> 00:38:23,570
providers are there the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing</font>

830
00:38:21,530 --> 00:38:25,700
<font color="#CCCCCC">before you try to have to run any script</font>

831
00:38:23,570 --> 00:38:27,620
you have<font color="#CCCCCC"> to load the</font><font color="#E5E5E5"> actual extension</font>

832
00:38:25,700 --> 00:38:30,500
<font color="#E5E5E5">that makes the bridge between JavaScript</font>

833
00:38:27,620 --> 00:38:32,900
engine and and the debugger<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so a lot</font>

834
00:38:30,500 --> 00:38:34,730
of<font color="#CCCCCC"> georgia's</font><font color="#E5E5E5"> provided</font><font color="#CCCCCC"> that DLL is the</font>

835
00:38:32,900 --> 00:38:37,460
DLL name and once when<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> that</font>

836
00:38:34,730 --> 00:38:39,530
<font color="#CCCCCC">your</font><font color="#E5E5E5"> your you are ready</font><font color="#CCCCCC"> to normally run</font>

837
00:38:37,460 --> 00:38:41,150
the script<font color="#E5E5E5"> and it also has few entry</font>

838
00:38:39,530 --> 00:38:42,800
points within<font color="#E5E5E5"> the script</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> anything</font>

839
00:38:41,150 --> 00:38:44,810
you put in the root of<font color="#E5E5E5"> the script</font>

840
00:38:42,800 --> 00:38:46,460
<font color="#CCCCCC">that will be run then</font><font color="#E5E5E5"> you have special</font>

841
00:38:44,810 --> 00:38:48,620
entry points like invoke the script

842
00:38:46,460 --> 00:38:50,780
<font color="#CCCCCC">that's kind of like a</font><font color="#E5E5E5"> main of the script</font>

843
00:38:48,620 --> 00:38:52,430
initial script where you don't it runs

844
00:38:50,780 --> 00:38:54,650
but you're supposed<font color="#CCCCCC"> to initialize some</font>

845
00:38:52,430 --> 00:38:56,899
variables and then<font color="#CCCCCC"> that's kind of like</font><font color="#E5E5E5"> a</font>

846
00:38:54,650 --> 00:38:58,700
constructor<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you an initialize</font>

847
00:38:56,900 --> 00:39:01,970
script which<font color="#CCCCCC"> is kind of</font><font color="#E5E5E5"> like destructor</font>

848
00:38:58,700 --> 00:39:04,790
I guess there<font color="#E5E5E5"> are some minor problem</font>

849
00:39:01,970 --> 00:39:07,399
<font color="#CCCCCC">javascript only support 53 bit integer</font>

850
00:39:04,790 --> 00:39:10,910
so in<font color="#CCCCCC"> 64-bit module you need to have a</font>

851
00:39:07,400 --> 00:39:13,130
special<font color="#E5E5E5"> object type so the that's not</font>

852
00:39:10,910 --> 00:39:15,710
that's very<font color="#E5E5E5"> well</font><font color="#CCCCCC"> known for Java stuff so</font>

853
00:39:13,130 --> 00:39:20,890
in in in<font color="#E5E5E5"> this JavaScript</font><font color="#CCCCCC"> there is the in</font>

854
00:39:15,710 --> 00:39:20,890
64 object where<font color="#CCCCCC"> you actually have some</font>

855
00:39:20,950 --> 00:39:26,359
methods<font color="#E5E5E5"> like if you want to add</font><font color="#CCCCCC"> to two</font>

856
00:39:24,050 --> 00:39:28,400
objects then you go<font color="#E5E5E5"> object dot add and</font>

857
00:39:26,360 --> 00:39:30,620
then add the other thing you don't<font color="#E5E5E5"> have</font>

858
00:39:28,400 --> 00:39:34,640
a plus if you do<font color="#E5E5E5"> plus then it warns</font><font color="#CCCCCC"> you</font>

859
00:39:30,620 --> 00:39:36,410
if you hit the overflow<font color="#CCCCCC"> or 53:53 bit so</font>

860
00:39:34,640 --> 00:39:39,830
there are some minor issues

861
00:39:36,410 --> 00:39:43,759
the other thing great thing that<font color="#E5E5E5"> they've</font>

862
00:39:39,830 --> 00:39:46,490
done<font color="#E5E5E5"> is they included in c-sharp people</font>

863
00:39:43,760 --> 00:39:47,650
who are<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> of nor was the</font><font color="#CCCCCC"> ec sharp</font>

864
00:39:46,490 --> 00:39:50,479
<font color="#E5E5E5">I have to say I'm</font><font color="#CCCCCC"> not a great expert</font>

865
00:39:47,650 --> 00:39:54,020
<font color="#CCCCCC">their so-called</font><font color="#E5E5E5"> language integrated</font>

866
00:39:50,480 --> 00:39:58,100
<font color="#CCCCCC">query so it's an egg</font><font color="#E5E5E5"> SQL like extension</font>

867
00:39:54,020 --> 00:40:00,100
to all the iterable collections so you

868
00:39:58,100 --> 00:40:03,440
can<font color="#E5E5E5"> basically have</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> something like</font>

869
00:40:00,100 --> 00:40:06,140
some kind of iterable array and from

870
00:40:03,440 --> 00:40:09,290
then<font color="#CCCCCC"> you can have these so we have a</font>

871
00:40:06,140 --> 00:40:11,029
variable<font color="#E5E5E5"> name current process and then</font>

872
00:40:09,290 --> 00:40:12,950
<font color="#E5E5E5">current process has all the modules so</font>

873
00:40:11,030 --> 00:40:14,780
those are all<font color="#E5E5E5"> the dll's module in the</font>

874
00:40:12,950 --> 00:40:16,939
list<font color="#E5E5E5"> that will return the iterable</font>

875
00:40:14,780 --> 00:40:19,210
object and then from then<font color="#E5E5E5"> on you go</font>

876
00:40:16,940 --> 00:40:23,690
select<font color="#E5E5E5"> and then you have this lambda</font>

877
00:40:19,210 --> 00:40:25,730
<font color="#CCCCCC">expression which says map</font><font color="#E5E5E5"> m to m dot</font>

878
00:40:23,690 --> 00:40:29,810
name and in this case will<font color="#CCCCCC"> be a module</font>

879
00:40:25,730 --> 00:40:32,900
<font color="#CCCCCC">so</font><font color="#E5E5E5"> so you say</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> selecting name from</font>

880
00:40:29,810 --> 00:40:34,850
the list<font color="#E5E5E5"> of older from</font><font color="#CCCCCC"> a name field</font><font color="#E5E5E5"> from</font>

881
00:40:32,900 --> 00:40:37,370
all<font color="#E5E5E5"> of the modules and then I'm actually</font>

882
00:40:34,850 --> 00:40:39,830
setting<font color="#E5E5E5"> it as a where clause similar</font>

883
00:40:37,370 --> 00:40:41,960
like in SQL where the name contains

884
00:40:39,830 --> 00:40:44,779
<font color="#E5E5E5">malicious DLL I just put it as an</font>

885
00:40:41,960 --> 00:40:47,030
example<font color="#CCCCCC"> so if I know that</font><font color="#E5E5E5"> the the name</font>

886
00:40:44,780 --> 00:40:49,310
of the DLL I can iterate through all<font color="#E5E5E5"> the</font>

887
00:40:47,030 --> 00:40:52,250
<font color="#CCCCCC">processes</font><font color="#E5E5E5"> and I can iterate for all the</font>

888
00:40:49,310 --> 00:40:54,950
modules very easily<font color="#CCCCCC"> using the language</font>

889
00:40:52,250 --> 00:40:58,070
intellect integrated query<font color="#CCCCCC"> which</font>

890
00:40:54,950 --> 00:41:01,520
<font color="#E5E5E5">basically allows me to then see if the</font>

891
00:40:58,070 --> 00:41:04,250
<font color="#CCCCCC">DLL has been injected</font><font color="#E5E5E5"> in how many</font>

892
00:41:01,520 --> 00:41:07,670
<font color="#E5E5E5">processes has been</font><font color="#CCCCCC"> injected so</font><font color="#E5E5E5"> very very</font>

893
00:41:04,250 --> 00:41:10,550
useful stuff the next<font color="#E5E5E5"> command is economy</font>

894
00:41:07,670 --> 00:41:12,980
<font color="#CCCCCC">I</font><font color="#E5E5E5"> have like a you</font><font color="#CCCCCC"> remember</font><font color="#E5E5E5"> that script</font>

895
00:41:10,550 --> 00:41:15,350
that was shown in as<font color="#E5E5E5"> that enumerates all</font>

896
00:41:12,980 --> 00:41:18,290
the<font color="#CCCCCC"> modules</font><font color="#E5E5E5"> and display</font><font color="#CCCCCC"> I have the same</font>

897
00:41:15,350 --> 00:41:20,660
script<font color="#E5E5E5"> that I kind</font><font color="#CCCCCC"> of put together</font><font color="#E5E5E5"> today</font>

898
00:41:18,290 --> 00:41:23,130
<font color="#E5E5E5">in the morning</font><font color="#CCCCCC"> yeah as</font><font color="#E5E5E5"> you do at the</font>

899
00:41:20,660 --> 00:41:27,009
<font color="#E5E5E5">conferences</font>

900
00:41:23,130 --> 00:41:29,110
<font color="#E5E5E5">just in time exactly so but it's it's</font>

901
00:41:27,010 --> 00:41:32,020
super<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> I mean it's it's super simple</font>

902
00:41:29,110 --> 00:41:33,790
as well so it you know<font color="#E5E5E5"> not nothing very</font>

903
00:41:32,020 --> 00:41:36,990
<font color="#E5E5E5">serious so scripting I can just go up</font>

904
00:41:33,790 --> 00:41:40,029
<font color="#E5E5E5">and script there is a scripting tab my</font>

905
00:41:36,990 --> 00:41:42,310
<font color="#E5E5E5">favorite favorite name script</font><font color="#CCCCCC"> one so</font>

906
00:41:40,030 --> 00:41:43,840
<font color="#E5E5E5">I'll load the script and here you see</font>

907
00:41:42,310 --> 00:41:46,870
<font color="#E5E5E5">that the entry point is you invoke</font>

908
00:41:43,840 --> 00:41:48,880
script<font color="#CCCCCC"> and then I just go like my</font>

909
00:41:46,870 --> 00:41:51,190
modules are hosted current process those

910
00:41:48,880 --> 00:41:56,050
<font color="#CCCCCC">modules and then I just have a standard</font>

911
00:41:51,190 --> 00:41:58,780
<font color="#E5E5E5">for loop for</font><font color="#CCCCCC"> module scene array modules</font>

912
00:41:56,050 --> 00:42:00,820
<font color="#E5E5E5">I and I go basically host of diagnostic</font>

913
00:41:58,780 --> 00:42:02,770
<font color="#E5E5E5">the debug log is print or accrual and</font>

914
00:42:00,820 --> 00:42:05,530
<font color="#CCCCCC">the print and I give it the name so</font>

915
00:42:02,770 --> 00:42:07,570
really three three lines of code<font color="#E5E5E5"> when I</font>

916
00:42:05,530 --> 00:42:09,250
execute our I<font color="#E5E5E5"> will get more or less the</font>

917
00:42:07,570 --> 00:42:11,410
same thing<font color="#E5E5E5"> I'll get all</font><font color="#CCCCCC"> the modules</font><font color="#E5E5E5"> that</font>

918
00:42:09,250 --> 00:42:12,580
are<font color="#CCCCCC"> loaded apart</font><font color="#E5E5E5"> and it's so much easier</font>

919
00:42:11,410 --> 00:42:15,009
<font color="#E5E5E5">to work with</font>

920
00:42:12,580 --> 00:42:16,750
<font color="#E5E5E5">we'd be comparing with with the standard</font>

921
00:42:15,010 --> 00:42:19,360
or what they<font color="#E5E5E5"> call it this script I think</font>

922
00:42:16,750 --> 00:42:21,220
in in windbg so this is like you<font color="#E5E5E5"> know</font>

923
00:42:19,360 --> 00:42:22,690
for you maybe it looks simple apart but

924
00:42:21,220 --> 00:42:24,879
but for me it's kind of<font color="#CCCCCC"> revolutionary</font>

925
00:42:22,690 --> 00:42:28,180
it's so exciting<font color="#CCCCCC"> and then the next thing</font>

926
00:42:24,880 --> 00:42:29,920
I want to to really<font color="#E5E5E5"> do is dig much much</font>

927
00:42:28,180 --> 00:42:34,540
<font color="#E5E5E5">deeper in this JavaScript functionality</font>

928
00:42:29,920 --> 00:42:36,970
because<font color="#E5E5E5"> read really</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> powerful</font><font color="#CCCCCC"> time</font>

929
00:42:34,540 --> 00:42:38,920
<font color="#E5E5E5">travel debugging yes yes they had they</font>

930
00:42:36,970 --> 00:42:41,290
have that not many debuggers as far as a

931
00:42:38,920 --> 00:42:43,480
node have it<font color="#E5E5E5"> Microsoft had it for a long</font>

932
00:42:41,290 --> 00:42:46,060
time<font color="#E5E5E5"> they used it when some application</font>

933
00:42:43,480 --> 00:42:48,340
<font color="#E5E5E5">of the crash they would send a utility</font>

934
00:42:46,060 --> 00:42:49,930
which will allow any user<font color="#E5E5E5"> to</font><font color="#CCCCCC"> record the</font>

935
00:42:48,340 --> 00:42:52,300
trace<font color="#CCCCCC"> and app application</font><font color="#E5E5E5"> from the</font>

936
00:42:49,930 --> 00:42:54,370
moment it<font color="#CCCCCC"> started to the</font><font color="#E5E5E5"> moment in</font><font color="#CCCCCC"> crest</font>

937
00:42:52,300 --> 00:42:55,810
<font color="#CCCCCC">so</font><font color="#E5E5E5"> imagine how for vulnerability</font>

938
00:42:54,370 --> 00:42:58,960
research is how many vulnerability

939
00:42:55,810 --> 00:43:01,360
research is here<font color="#E5E5E5"> bug finders whatever</font>

940
00:42:58,960 --> 00:43:02,920
you<font color="#E5E5E5"> wanna call it so so essentially when</font>

941
00:43:01,360 --> 00:43:05,670
you hit like some kind of error

942
00:43:02,920 --> 00:43:08,410
condition<font color="#E5E5E5"> you record the trace and</font><font color="#CCCCCC"> now</font>

943
00:43:05,670 --> 00:43:11,620
windbg allows you if you're on Windows

944
00:43:08,410 --> 00:43:14,020
<font color="#E5E5E5">to to load the trace and to appear as if</font>

945
00:43:11,620 --> 00:43:16,870
<font color="#E5E5E5">you're really debugging on on a real</font>

946
00:43:14,020 --> 00:43:20,890
<font color="#E5E5E5">real process so instead of just running</font>

947
00:43:16,870 --> 00:43:23,529
forwards you<font color="#CCCCCC"> can also run backwards</font><font color="#E5E5E5"> so I</font>

948
00:43:20,890 --> 00:43:26,350
set up a break point<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you interested</font>

949
00:43:23,530 --> 00:43:28,690
you can<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up backward</font><font color="#E5E5E5"> breakpoint</font>

950
00:43:26,350 --> 00:43:31,569
so when you have a break<font color="#CCCCCC"> point and let's</font>

951
00:43:28,690 --> 00:43:32,730
<font color="#E5E5E5">close this window so I have this</font>

952
00:43:31,570 --> 00:43:36,210
<font color="#CCCCCC">breakpoint on heap</font>

953
00:43:32,730 --> 00:43:38,250
create function<font color="#E5E5E5"> I just</font><font color="#CCCCCC"> randomly chose so</font>

954
00:43:36,210 --> 00:43:40,680
instead<font color="#E5E5E5"> of go like</font><font color="#CCCCCC"> if I go</font><font color="#E5E5E5"> forward I</font>

955
00:43:38,250 --> 00:43:42,750
<font color="#CCCCCC">would go GGC is like goes to the next</font>

956
00:43:40,680 --> 00:43:47,040
<font color="#E5E5E5">call</font><font color="#CCCCCC"> oops</font>

957
00:43:42,750 --> 00:43:49,100
why okay<font color="#CCCCCC"> nevermind let's</font><font color="#E5E5E5"> try something</font>

958
00:43:47,040 --> 00:43:53,490
else

959
00:43:49,100 --> 00:43:56,580
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> breakpoint list we have a we have</font>

960
00:43:53,490 --> 00:44:02,609
<font color="#CCCCCC">least on kernel-based</font><font color="#E5E5E5"> hip create</font><font color="#CCCCCC"> okay so</font>

961
00:43:56,580 --> 00:44:07,970
if<font color="#CCCCCC"> i go go on</font><font color="#E5E5E5"> but with the - then I kind</font>

962
00:44:02,610 --> 00:44:10,970
of go backward in time<font color="#CCCCCC"> and so I can go</font>

963
00:44:07,970 --> 00:44:14,399
backward<font color="#E5E5E5"> and I hit the hip create point</font>

964
00:44:10,970 --> 00:44:16,740
<font color="#CCCCCC">break point</font><font color="#E5E5E5"> but then I go GC</font><font color="#CCCCCC"> I go</font>

965
00:44:14,400 --> 00:44:19,830
forward and I hit the next call which is

966
00:44:16,740 --> 00:44:22,470
the call we<font color="#CCCCCC"> hit we've seen before</font>

967
00:44:19,830 --> 00:44:25,980
okay<font color="#E5E5E5"> it's which you can let this go once</font>

968
00:44:22,470 --> 00:44:30,029
again<font color="#E5E5E5"> okay I hit an exception</font>

969
00:44:25,980 --> 00:44:32,940
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> nevermind but you get the idea</font>

970
00:44:30,030 --> 00:44:36,180
those with<font color="#E5E5E5"> the caveat caveat is that you</font>

971
00:44:32,940 --> 00:44:39,360
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to be aware that the trace is</font>

972
00:44:36,180 --> 00:44:41,100
obviously put a big files on the disk<font color="#CCCCCC"> so</font>

973
00:44:39,360 --> 00:44:43,170
those<font color="#E5E5E5"> those are like they record all the</font>

974
00:44:41,100 --> 00:44:45,089
all the memory locations that<font color="#CCCCCC"> are used</font>

975
00:44:43,170 --> 00:44:46,830
and they can be hundreds of gigabytes

976
00:44:45,090 --> 00:44:48,900
long so it's not like you're<font color="#CCCCCC"> gonna</font>

977
00:44:46,830 --> 00:44:51,150
<font color="#E5E5E5">transfer</font><font color="#CCCCCC"> it from</font><font color="#E5E5E5"> the clients location to</font>

978
00:44:48,900 --> 00:44:53,040
your to yourself<font color="#CCCCCC"> easily but when you</font>

979
00:44:51,150 --> 00:44:55,650
when you do the debugging<font color="#CCCCCC"> here</font><font color="#E5E5E5"> it's very</font>

980
00:44:53,040 --> 00:44:57,420
easy<font color="#CCCCCC"> to just like go back and</font><font color="#E5E5E5"> then come</font>

981
00:44:55,650 --> 00:45:01,080
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> various value where you</font>

982
00:44:57,420 --> 00:45:04,230
came from by simply loading this trace

983
00:45:01,080 --> 00:45:07,350
in you know recent things start

984
00:45:04,230 --> 00:45:09,860
debugging<font color="#CCCCCC"> you</font><font color="#E5E5E5"> already have had it set</font>

985
00:45:07,350 --> 00:45:09,860
<font color="#CCCCCC">setup</font>

986
00:45:13,650 --> 00:45:19,499
yeah that's how it looks<font color="#E5E5E5"> like</font><font color="#CCCCCC"> so you</font>

987
00:45:15,420 --> 00:45:21,089
have<font color="#E5E5E5"> you you have to if your Microsoft</font>

988
00:45:19,499 --> 00:45:23,519
<font color="#CCCCCC">Guide then you have all these</font><font color="#E5E5E5"> buttons so</font>

989
00:45:21,089 --> 00:45:26,490
play button go and then you have a blue

990
00:45:23,519 --> 00:45:28,799
play button go back so<font color="#E5E5E5"> you can go step</font>

991
00:45:26,490 --> 00:45:31,200
forward step step back step<font color="#CCCCCC"> forward for</font>

992
00:45:28,799 --> 00:45:32,788
<font color="#CCCCCC">step back</font><font color="#E5E5E5"> so you can basically play with</font>

993
00:45:31,200 --> 00:45:35,009
with the<font color="#E5E5E5"> tutu until you achieve the</font>

994
00:45:32,789 --> 00:45:37,499
condition<font color="#CCCCCC"> error' condition or</font><font color="#E5E5E5"> you is you</font>

995
00:45:35,009 --> 00:45:39,660
see what<font color="#CCCCCC"> malware did just before</font><font color="#E5E5E5"> you it</font>

996
00:45:37,499 --> 00:45:42,259
you get it got lost<font color="#CCCCCC"> somewhere you don't</font>

997
00:45:39,660 --> 00:45:48,240
<font color="#E5E5E5">have no idea what happened next</font>

998
00:45:42,259 --> 00:45:50,990
okay so are<font color="#E5E5E5"> we doing with time</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> we</font>

999
00:45:48,240 --> 00:45:53,970
have<font color="#E5E5E5"> ten</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> ten</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> okay</font>

1000
00:45:50,990 --> 00:45:55,379
<font color="#E5E5E5">some just other side things you need to</font>

1001
00:45:53,970 --> 00:45:58,680
really<font color="#CCCCCC"> know when you're especially</font><font color="#E5E5E5"> when</font>

1002
00:45:55,380 --> 00:46:01,609
you do that<font color="#E5E5E5"> your</font><font color="#CCCCCC"> kernel everybody's more</font>

1003
00:45:58,680 --> 00:46:03,749
or<font color="#CCCCCC"> less aware this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> standard</font>

1004
00:46:01,609 --> 00:46:06,390
I've took it<font color="#CCCCCC"> from the Microsoft website</font>

1005
00:46:03,749 --> 00:46:09,029
disease was done in 2006<font color="#E5E5E5"> so Windows 10</font>

1006
00:46:06,390 --> 00:46:10,859
is possibly nothing<font color="#E5E5E5"> like this but from</font>

1007
00:46:09,029 --> 00:46:13,019
the point<font color="#E5E5E5"> of view</font><font color="#CCCCCC"> of the model</font>

1008
00:46:10,859 --> 00:46:15,058
<font color="#E5E5E5">researcher it's still very</font><font color="#CCCCCC"> much the</font>

1009
00:46:13,019 --> 00:46:17,220
divide between<font color="#E5E5E5"> the user mode on top and</font>

1010
00:46:15,059 --> 00:46:19,710
kernel mode which is like<font color="#E5E5E5"> also like I</font>

1011
00:46:17,220 --> 00:46:21,598
said<font color="#E5E5E5"> supervisory mode where everything</font>

1012
00:46:19,710 --> 00:46:24,150
is accessible<font color="#E5E5E5"> once you're there and then</font>

1013
00:46:21,599 --> 00:46:26,579
<font color="#E5E5E5">you have this boundary that you cross</font>

1014
00:46:24,150 --> 00:46:31,710
using a system call or some kind of call

1015
00:46:26,579 --> 00:46:33,359
gate or<font color="#CCCCCC"> mmm there are few Intel</font>

1016
00:46:31,710 --> 00:46:37,019
instructions allow<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to do that if</font>

1017
00:46:33,359 --> 00:46:39,390
<font color="#E5E5E5">you're on Windows 64 64 running windows</font>

1018
00:46:37,019 --> 00:46:41,669
32-bit called then you have another call

1019
00:46:39,390 --> 00:46:44,970
that kind<font color="#E5E5E5"> of goes from 32-bit mode</font>

1020
00:46:41,670 --> 00:46:46,920
64-bit mode kernel like a gate<font color="#E5E5E5"> but</font>

1021
00:46:44,970 --> 00:46:49,288
generally it's like<font color="#E5E5E5"> that you in when</font>

1022
00:46:46,920 --> 00:46:51,119
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> doing doing a user mode analysis</font>

1023
00:46:49,289 --> 00:46:52,920
you have<font color="#E5E5E5"> your</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> and then you</font>

1024
00:46:51,119 --> 00:46:55,259
<font color="#E5E5E5">have your windows dynamic loading</font>

1025
00:46:52,920 --> 00:46:56,839
libraries kernel32 is the most popular

1026
00:46:55,259 --> 00:46:59,519
<font color="#E5E5E5">one because it has most of the</font>

1027
00:46:56,839 --> 00:47:01,410
<font color="#CCCCCC">functionality in</font><font color="#E5E5E5"> Windows and then on the</font>

1028
00:46:59,519 --> 00:47:03,839
kernel side you have so many<font color="#CCCCCC"> different</font>

1029
00:47:01,410 --> 00:47:07,160
<font color="#E5E5E5">things but the important things are like</font>

1030
00:47:03,839 --> 00:47:10,099
the memory manager of the object<font color="#CCCCCC"> manager</font>

1031
00:47:07,160 --> 00:47:13,078
management of processes and<font color="#E5E5E5"> threads</font>

1032
00:47:10,099 --> 00:47:16,110
<font color="#E5E5E5">various different drivers like tcp/ip</font>

1033
00:47:13,079 --> 00:47:18,420
driver<font color="#E5E5E5"> generally generally</font>

1034
00:47:16,110 --> 00:47:23,880
everything that<font color="#CCCCCC"> malware may need to use</font>

1035
00:47:18,420 --> 00:47:26,100
<font color="#E5E5E5">as a</font><font color="#CCCCCC"> kernel-mode module and and it may</font>

1036
00:47:23,880 --> 00:47:29,610
<font color="#E5E5E5">kind of change it so it's eaten in</font>

1037
00:47:26,100 --> 00:47:33,210
memory here here are just some some of

1038
00:47:29,610 --> 00:47:35,820
the structures<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> already</font>

1039
00:47:33,210 --> 00:47:38,130
mentioned<font color="#E5E5E5"> before</font><font color="#CCCCCC"> that you kind of need</font>

1040
00:47:35,820 --> 00:47:41,250
<font color="#CCCCCC">to</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> unfortunately some of</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of</font>

1041
00:47:38,130 --> 00:47:43,590
the kind of mechanisms around<font color="#E5E5E5"> it is not</font>

1042
00:47:41,250 --> 00:47:46,260
super<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> but when</font><font color="#E5E5E5"> you do it the</font>

1043
00:47:43,590 --> 00:47:47,910
kernel<font color="#CCCCCC"> mode analysis you need to you</font>

1044
00:47:46,260 --> 00:47:49,800
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to know kind</font><font color="#E5E5E5"> of be aware at least</font>

1045
00:47:47,910 --> 00:47:51,450
of most of it so here<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

1046
00:47:49,800 --> 00:47:54,750
commands I won't go through all<font color="#E5E5E5"> of them</font>

1047
00:47:51,450 --> 00:47:56,609
mostly kernel mode commands<font color="#E5E5E5"> that allows</font>

1048
00:47:54,750 --> 00:47:58,500
you<font color="#E5E5E5"> to look at all the drivers</font><font color="#CCCCCC"> that are</font>

1049
00:47:56,610 --> 00:48:00,270
loaded<font color="#CCCCCC"> that allows you to look at</font><font color="#E5E5E5"> the</font>

1050
00:47:58,500 --> 00:48:02,460
types<font color="#E5E5E5"> of objects in the object manager</font>

1051
00:48:00,270 --> 00:48:04,440
<font color="#CCCCCC">of the type driver that</font><font color="#E5E5E5"> allows you to</font>

1052
00:48:02,460 --> 00:48:06,150
<font color="#E5E5E5">enumerate handles which are connected</font>

1053
00:48:04,440 --> 00:48:09,480
with<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> processor particular</font>

1054
00:48:06,150 --> 00:48:12,180
object<font color="#E5E5E5"> and why is</font><font color="#CCCCCC"> it important to know</font>

1055
00:48:09,480 --> 00:48:13,680
more than one of this<font color="#E5E5E5"> command is because</font>

1056
00:48:12,180 --> 00:48:16,649
<font color="#CCCCCC">the some of those commands will lie to</font>

1057
00:48:13,680 --> 00:48:18,120
<font color="#E5E5E5">you when you're in when you're in in in</font>

1058
00:48:16,650 --> 00:48:19,920
kernel mode<font color="#CCCCCC"> and analyze let's say a</font>

1059
00:48:18,120 --> 00:48:21,509
<font color="#CCCCCC">kernel rootkit because the kernel</font>

1060
00:48:19,920 --> 00:48:23,610
rootkit will try to<font color="#E5E5E5"> remove itself from</font>

1061
00:48:21,510 --> 00:48:26,400
the list of modules<font color="#E5E5E5"> remove itself from</font>

1062
00:48:23,610 --> 00:48:28,740
the list of remove malicious user mode

1063
00:48:26,400 --> 00:48:30,510
<font color="#CCCCCC">sidon</font><font color="#E5E5E5"> from the list of processes and so</font>

1064
00:48:28,740 --> 00:48:32,520
<font color="#CCCCCC">on so</font><font color="#E5E5E5"> you need to know several different</font>

1065
00:48:30,510 --> 00:48:34,500
<font color="#CCCCCC">ways on how to approach the same thing</font>

1066
00:48:32,520 --> 00:48:37,290
so you try<font color="#E5E5E5"> to run it and it's almost</font>

1067
00:48:34,500 --> 00:48:39,450
<font color="#E5E5E5">like a differential analysis where you</font>

1068
00:48:37,290 --> 00:48:40,890
you get one result<font color="#E5E5E5"> from one command you</font>

1069
00:48:39,450 --> 00:48:46,410
get a different result on a<font color="#E5E5E5"> different</font>

1070
00:48:40,890 --> 00:48:48,240
command<font color="#CCCCCC"> and go I got</font><font color="#E5E5E5"> you but note that's</font>

1071
00:48:46,410 --> 00:48:53,399
not always<font color="#E5E5E5"> possible sometimes you spend</font>

1072
00:48:48,240 --> 00:48:55,319
<font color="#E5E5E5">a lot of time crying as well some of the</font>

1073
00:48:53,400 --> 00:48:57,300
other commands for analyzing like

1074
00:48:55,320 --> 00:48:59,210
processes<font color="#CCCCCC"> they're there like when it</font>

1075
00:48:57,300 --> 00:49:01,200
when<font color="#E5E5E5"> the commands are starting with</font>

1076
00:48:59,210 --> 00:49:03,150
<font color="#E5E5E5">exclamation point</font><font color="#CCCCCC"> there they will say</font>

1077
00:49:01,200 --> 00:49:06,200
there are<font color="#E5E5E5"> not commands there are</font>

1078
00:49:03,150 --> 00:49:08,910
extensions<font color="#E5E5E5"> because</font><font color="#CCCCCC"> that's very different</font>

1079
00:49:06,200 --> 00:49:12,060
extensions can<font color="#CCCCCC"> be part of one dynamic</font>

1080
00:49:08,910 --> 00:49:14,460
loading library or can be part of like

1081
00:49:12,060 --> 00:49:16,650
<font color="#CCCCCC">sound like more</font><font color="#E5E5E5"> than one extension can</font>

1082
00:49:14,460 --> 00:49:18,480
be<font color="#E5E5E5"> part of one that</font><font color="#CCCCCC"> dial else</font><font color="#E5E5E5"> but</font>

1083
00:49:16,650 --> 00:49:20,940
generally you have extensions<font color="#CCCCCC"> that are</font>

1084
00:49:18,480 --> 00:49:23,670
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the sink single DLL so you have an</font>

1085
00:49:20,940 --> 00:49:26,100
<font color="#E5E5E5">extension for</font><font color="#CCCCCC"> Python Pike</font><font color="#E5E5E5"> Python kernel</font>

1086
00:49:23,670 --> 00:49:29,070
debugger<font color="#CCCCCC"> you have some other extension</font>

1087
00:49:26,100 --> 00:49:31,529
which are quite popular<font color="#E5E5E5"> for</font>

1088
00:49:29,070 --> 00:49:33,960
<font color="#CCCCCC">they finding</font><font color="#E5E5E5"> my kernel-mode</font><font color="#CCCCCC"> malware as</font>

1089
00:49:31,530 --> 00:49:36,240
well<font color="#E5E5E5"> so in order</font><font color="#CCCCCC"> to analyze kernel-mode</font>

1090
00:49:33,960 --> 00:49:38,670
<font color="#CCCCCC">Mulder you need to be able</font><font color="#E5E5E5"> to load it</font>

1091
00:49:36,240 --> 00:49:40,799
somehow<font color="#CCCCCC"> so you can set</font><font color="#E5E5E5"> it everything</font>

1092
00:49:38,670 --> 00:49:42,540
<font color="#CCCCCC">yourself manually in the</font><font color="#E5E5E5"> registry</font>

1093
00:49:40,800 --> 00:49:45,300
generally you<font color="#E5E5E5"> need to set some registry</font>

1094
00:49:42,540 --> 00:49:46,890
keys you have<font color="#CCCCCC"> to create</font><font color="#E5E5E5"> a service that</font>

1095
00:49:45,300 --> 00:49:50,160
<font color="#E5E5E5">will run</font><font color="#CCCCCC"> in the background and then you</font>

1096
00:49:46,890 --> 00:49:52,170
have a call<font color="#E5E5E5"> to load the driver in memory</font>

1097
00:49:50,160 --> 00:49:54,029
so before that<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> to disable</font><font color="#CCCCCC"> all</font>

1098
00:49:52,170 --> 00:49:57,150
the<font color="#CCCCCC"> integrity checking</font><font color="#E5E5E5"> by the operating</font>

1099
00:49:54,030 --> 00:50:00,240
<font color="#CCCCCC">system</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> don't do that the</font>

1100
00:49:57,150 --> 00:50:02,460
malicious module or the<font color="#E5E5E5"> driver typically</font>

1101
00:50:00,240 --> 00:50:05,850
won't<font color="#CCCCCC"> load but here are two utilities</font>

1102
00:50:02,460 --> 00:50:08,160
<font color="#E5E5E5">one from the OS are</font><font color="#CCCCCC"> pre utility and the</font>

1103
00:50:05,850 --> 00:50:10,620
other one from no virus<font color="#E5E5E5"> thanks that that</font>

1104
00:50:08,160 --> 00:50:12,330
allows you to<font color="#CCCCCC"> they</font><font color="#E5E5E5"> set up most of the</font>

1105
00:50:10,620 --> 00:50:14,370
parameters<font color="#E5E5E5"> for you so you can simply</font>

1106
00:50:12,330 --> 00:50:15,720
load<font color="#CCCCCC"> the driver and then you can set the</font>

1107
00:50:14,370 --> 00:50:18,029
<font color="#CCCCCC">break</font><font color="#E5E5E5"> bond when today when the module</font>

1108
00:50:15,720 --> 00:50:19,259
loads and as<font color="#E5E5E5"> assumed that module loads</font>

1109
00:50:18,030 --> 00:50:21,830
then you can hit the break<font color="#CCCCCC"> bound</font>

1110
00:50:19,260 --> 00:50:24,330
<font color="#CCCCCC">breakpoint and you continue</font><font color="#E5E5E5"> to be the</font>

1111
00:50:21,830 --> 00:50:27,180
analysis<font color="#E5E5E5"> so what would you expect from</font>

1112
00:50:24,330 --> 00:50:30,029
from malware<font color="#E5E5E5"> to usually that tries to do</font>

1113
00:50:27,180 --> 00:50:33,149
some<font color="#CCCCCC"> booking either the API functions in</font>

1114
00:50:30,030 --> 00:50:34,860
the kernel itself<font color="#E5E5E5"> which is more rare</font>

1115
00:50:33,150 --> 00:50:36,810
these days<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> patch guard</font>

1116
00:50:34,860 --> 00:50:38,430
and protection in the<font color="#E5E5E5"> kernel which</font>

1117
00:50:36,810 --> 00:50:41,490
becomes better with every version of<font color="#E5E5E5"> the</font>

1118
00:50:38,430 --> 00:50:43,290
<font color="#E5E5E5">windows so it's non-trivial to do it</font>

1119
00:50:41,490 --> 00:50:45,270
however<font color="#E5E5E5"> there are a lot of documented</font>

1120
00:50:43,290 --> 00:50:47,190
calls now because you have to be aware

1121
00:50:45,270 --> 00:50:49,050
that<font color="#E5E5E5"> functionality of lots of malware is</font>

1122
00:50:47,190 --> 00:50:50,930
actually very similar<font color="#CCCCCC"> to functionality</font>

1123
00:50:49,050 --> 00:50:53,640
<font color="#E5E5E5">of let's say anti-malware software</font>

1124
00:50:50,930 --> 00:50:55,710
<font color="#E5E5E5">anti-malware software is also interested</font>

1125
00:50:53,640 --> 00:50:58,589
<font color="#CCCCCC">to be have a higher privileges than</font><font color="#E5E5E5"> the</font>

1126
00:50:55,710 --> 00:51:00,810
standard user code and it also tries to

1127
00:50:58,590 --> 00:51:02,610
kind<font color="#E5E5E5"> of intercept the communication</font>

1128
00:51:00,810 --> 00:51:05,850
between the<font color="#E5E5E5"> user mode processes and the</font>

1129
00:51:02,610 --> 00:51:08,580
kernel<font color="#E5E5E5"> so it inspects the behavior so</font>

1130
00:51:05,850 --> 00:51:11,040
Microsoft<font color="#E5E5E5"> guys for a long time refused</font>

1131
00:51:08,580 --> 00:51:13,799
to create any<font color="#E5E5E5"> kind of documented</font>

1132
00:51:11,040 --> 00:51:15,810
interfaces for security code<font color="#E5E5E5"> but then</font>

1133
00:51:13,800 --> 00:51:18,420
they had to they<font color="#CCCCCC"> had eventually</font>

1134
00:51:15,810 --> 00:51:20,160
succumbed to<font color="#E5E5E5"> anti</font><font color="#CCCCCC"> my other</font><font color="#E5E5E5"> companies</font>

1135
00:51:18,420 --> 00:51:23,370
pestering<font color="#E5E5E5"> them because there will be so</font>

1136
00:51:20,160 --> 00:51:26,040
many blue screens of death<font color="#E5E5E5"> otherwise and</font>

1137
00:51:23,370 --> 00:51:29,430
so<font color="#CCCCCC"> now there is a number</font><font color="#E5E5E5"> of documented</font>

1138
00:51:26,040 --> 00:51:32,910
API switch you can use<font color="#E5E5E5"> malware is also</font>

1139
00:51:29,430 --> 00:51:35,390
prone to<font color="#E5E5E5"> use legacy drivers so you have</font>

1140
00:51:32,910 --> 00:51:40,220
some kind of all drivers with

1141
00:51:35,390 --> 00:51:42,080
which would<font color="#E5E5E5"> be this valid valid</font>

1142
00:51:40,220 --> 00:51:44,990
certificate that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can load in memory</font>

1143
00:51:42,080 --> 00:51:46,430
even<font color="#E5E5E5"> if all the checks are in place in</font>

1144
00:51:44,990 --> 00:51:49,490
that<font color="#CCCCCC"> case if there is a vulnerability</font>

1145
00:51:46,430 --> 00:51:51,680
<font color="#E5E5E5">you can exploit the driver in memory and</font>

1146
00:51:49,490 --> 00:51:54,950
then to exploit the driver that would

1147
00:51:51,680 --> 00:51:57,410
allow you to<font color="#CCCCCC"> write wherever you want</font>

1148
00:51:54,950 --> 00:51:59,509
<font color="#CCCCCC">within the kernel space which basically</font>

1149
00:51:57,410 --> 00:52:01,790
disables the<font color="#E5E5E5"> integrity checking kernel</font>

1150
00:51:59,510 --> 00:52:03,380
<font color="#CCCCCC">space so you write something</font><font color="#E5E5E5"> in through</font>

1151
00:52:01,790 --> 00:52:05,960
the driver<font color="#E5E5E5"> that's an some kind of</font><font color="#CCCCCC"> old</font>

1152
00:52:03,380 --> 00:52:07,550
driver<font color="#E5E5E5"> you exploit it you</font><font color="#CCCCCC"> disable the</font>

1153
00:52:05,960 --> 00:52:09,800
<font color="#E5E5E5">integrity checks and then you're free to</font>

1154
00:52:07,550 --> 00:52:11,630
<font color="#E5E5E5">load your own driver</font><font color="#CCCCCC"> that's what what</font>

1155
00:52:09,800 --> 00:52:13,310
some of<font color="#E5E5E5"> the some of the malware stuff</font>

1156
00:52:11,630 --> 00:52:15,320
that's the kind of<font color="#E5E5E5"> a typical thing</font><font color="#CCCCCC"> to</font>

1157
00:52:13,310 --> 00:52:19,520
<font color="#CCCCCC">rely I</font><font color="#E5E5E5"> think is</font><font color="#CCCCCC"> that rootkit that's</font>

1158
00:52:15,320 --> 00:52:23,960
known to to do this<font color="#E5E5E5"> here these are</font><font color="#CCCCCC"> this</font>

1159
00:52:19,520 --> 00:52:25,940
<font color="#CCCCCC">the list</font><font color="#E5E5E5"> of those documented system</font>

1160
00:52:23,960 --> 00:52:27,740
calls we won't go through them<font color="#CCCCCC"> some of</font>

1161
00:52:25,940 --> 00:52:30,110
them allows you to notify to set a

1162
00:52:27,740 --> 00:52:31,759
callback<font color="#CCCCCC"> when the registry key changes</font>

1163
00:52:30,110 --> 00:52:33,950
some<font color="#CCCCCC"> of them and the</font><font color="#E5E5E5"> process starts um</font>

1164
00:52:31,760 --> 00:52:35,990
<font color="#E5E5E5">when the thread is</font><font color="#CCCCCC"> created sound then</font>

1165
00:52:33,950 --> 00:52:37,700
<font color="#E5E5E5">when the module is loaded but these are</font>

1166
00:52:35,990 --> 00:52:39,709
the good pointers if you if you ever

1167
00:52:37,700 --> 00:52:42,470
analyzed kernel mode<font color="#CCCCCC"> model where you can</font>

1168
00:52:39,710 --> 00:52:44,900
<font color="#CCCCCC">set</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> breakpoint for</font><font color="#E5E5E5"> example most of</font>

1169
00:52:42,470 --> 00:52:46,520
the drivers<font color="#E5E5E5"> will create before they</font>

1170
00:52:44,900 --> 00:52:48,920
start the driver entry point is<font color="#E5E5E5"> called</font>

1171
00:52:46,520 --> 00:52:52,610
driver entry and then you<font color="#CCCCCC"> will have</font><font color="#E5E5E5"> the</font>

1172
00:52:48,920 --> 00:52:55,070
<font color="#E5E5E5">I or create device code so very soon</font>

1173
00:52:52,610 --> 00:52:57,050
after the<font color="#E5E5E5"> driver entry so if you have</font><font color="#CCCCCC"> an</font>

1174
00:52:55,070 --> 00:52:58,940
<font color="#CCCCCC">office catted driver that</font><font color="#E5E5E5"> is packed and</font>

1175
00:52:57,050 --> 00:53:01,130
<font color="#CCCCCC">you don't see this I'll</font><font color="#E5E5E5"> create device</font>

1176
00:52:58,940 --> 00:53:02,960
perhaps<font color="#E5E5E5"> you can set the</font><font color="#CCCCCC"> breakpoint there</font>

1177
00:53:01,130 --> 00:53:05,180
and so hopefully<font color="#CCCCCC"> when the driver</font><font color="#E5E5E5"> is</font>

1178
00:53:02,960 --> 00:53:06,920
decrypted and<font color="#E5E5E5"> the oak is gated in memory</font>

1179
00:53:05,180 --> 00:53:08,990
you<font color="#E5E5E5"> will have you</font><font color="#CCCCCC"> will hit</font><font color="#E5E5E5"> the right</font>

1180
00:53:06,920 --> 00:53:13,400
<font color="#E5E5E5">breakpoint and you can continue with</font>

1181
00:53:08,990 --> 00:53:15,259
your your debugging so here are things

1182
00:53:13,400 --> 00:53:17,060
that<font color="#E5E5E5"> you can do you have to enumerate</font>

1183
00:53:15,260 --> 00:53:19,730
<font color="#E5E5E5">the drivers like I said you need to have</font>

1184
00:53:17,060 --> 00:53:21,259
<font color="#E5E5E5">several</font><font color="#CCCCCC"> different ways of scanning</font><font color="#E5E5E5"> the</font>

1185
00:53:19,730 --> 00:53:23,720
memory or scanning<font color="#CCCCCC"> looking at the</font>

1186
00:53:21,260 --> 00:53:25,760
objects so because you will have

1187
00:53:23,720 --> 00:53:28,490
disparate<font color="#E5E5E5"> results from different</font><font color="#CCCCCC"> ways</font>

1188
00:53:25,760 --> 00:53:31,760
and<font color="#CCCCCC"> that's how you discover discover</font>

1189
00:53:28,490 --> 00:53:34,819
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of them over</font><font color="#E5E5E5"> here I also put few</font>

1190
00:53:31,760 --> 00:53:37,690
extensions<font color="#E5E5E5"> that I also used like switch</font>

1191
00:53:34,820 --> 00:53:40,100
but debugging<font color="#E5E5E5"> a stage by</font><font color="#CCCCCC"> Matz which</font>

1192
00:53:37,690 --> 00:53:42,800
<font color="#E5E5E5">really really cool because it loves you</font>

1193
00:53:40,100 --> 00:53:44,750
just like<font color="#E5E5E5"> a single single command that</font>

1194
00:53:42,800 --> 00:53:46,960
<font color="#E5E5E5">basically scans all the</font><font color="#CCCCCC"> callbacks all</font>

1195
00:53:44,750 --> 00:53:49,690
the documented parts of the

1196
00:53:46,960 --> 00:53:51,190
memory<font color="#E5E5E5"> also in the displays to which</font>

1197
00:53:49,690 --> 00:53:53,440
modules do they point

1198
00:53:51,190 --> 00:53:56,920
so hopefully you will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font><font color="#CCCCCC"> catch</font>

1199
00:53:53,440 --> 00:53:59,440
the<font color="#E5E5E5"> malware by</font><font color="#CCCCCC"> using that windbg arc is</font>

1200
00:53:56,920 --> 00:54:00,970
stands for<font color="#E5E5E5"> auntie rootkit it's it's um</font><font color="#CCCCCC"> I</font>

1201
00:53:59,440 --> 00:54:03,040
think<font color="#CCCCCC"> it's a Russian developer from</font>

1202
00:54:00,970 --> 00:54:04,810
Kaspersky they're all<font color="#E5E5E5"> very</font><font color="#CCCCCC"> useful so</font>

1203
00:54:03,040 --> 00:54:06,400
anything that<font color="#E5E5E5"> helps you to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> malware</font>

1204
00:54:04,810 --> 00:54:08,500
<font color="#CCCCCC">but like I said you have to be very</font>

1205
00:54:06,400 --> 00:54:11,260
careful he's and here's an example<font color="#CCCCCC"> that</font>

1206
00:54:08,500 --> 00:54:14,680
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have driver object structures and</font>

1207
00:54:11,260 --> 00:54:17,770
<font color="#CCCCCC">you also have this a</font><font color="#E5E5E5"> lot or data table</font>

1208
00:54:14,680 --> 00:54:19,720
entry which it which<font color="#CCCCCC"> am on sorry</font><font color="#E5E5E5"> you</font>

1209
00:54:17,770 --> 00:54:21,160
don't<font color="#E5E5E5"> see that well but basically there</font>

1210
00:54:19,720 --> 00:54:25,330
are two objects<font color="#E5E5E5"> and they have the name</font>

1211
00:54:21,160 --> 00:54:27,940
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> driver here in red and and</font><font color="#CCCCCC"> Marvel</font>

1212
00:54:25,330 --> 00:54:30,730
in this case<font color="#CCCCCC"> zeros out both the full</font><font color="#E5E5E5"> DLL</font>

1213
00:54:27,940 --> 00:54:33,730
name<font color="#CCCCCC"> and the driver name so so basically</font>

1214
00:54:30,730 --> 00:54:35,650
<font color="#CCCCCC">when you</font><font color="#E5E5E5"> zero it out when you do the</font>

1215
00:54:33,730 --> 00:54:37,570
scanning<font color="#E5E5E5"> with or any of those extensions</font>

1216
00:54:35,650 --> 00:54:40,900
those extensions want<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cell give you</font>

1217
00:54:37,570 --> 00:54:44,410
great results<font color="#CCCCCC"> so here we see the</font><font color="#E5E5E5"> list of</font>

1218
00:54:40,900 --> 00:54:46,390
modules that that are registered to be

1219
00:54:44,410 --> 00:54:51,000
<font color="#CCCCCC">notified when the new process</font><font color="#E5E5E5"> is created</font>

1220
00:54:46,390 --> 00:54:53,710
and we see like Windows Defender

1221
00:54:51,000 --> 00:54:56,890
<font color="#E5E5E5">integrity checker and then finally the</font>

1222
00:54:53,710 --> 00:54:58,359
last<font color="#E5E5E5"> one in red it doesn't give you the</font>

1223
00:54:56,890 --> 00:54:59,920
module name so you just see that

1224
00:54:58,359 --> 00:55:02,230
something is<font color="#E5E5E5"> registered but you don't</font>

1225
00:54:59,920 --> 00:55:04,000
know where the module<font color="#E5E5E5"> is you know you'll</font>

1226
00:55:02,230 --> 00:55:05,710
catch the procedure you will find it in

1227
00:55:04,000 --> 00:55:09,110
the end<font color="#E5E5E5"> but it's kind of weird</font><font color="#CCCCCC"> because</font>

1228
00:55:05,710 --> 00:55:12,199
if<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no module name</font><font color="#CCCCCC"> okay</font>

1229
00:55:09,110 --> 00:55:12,199
[Music]

1230
00:55:14,050 --> 00:55:18,240
I think I think<font color="#CCCCCC"> with that we can</font>

1231
00:55:15,910 --> 00:55:23,170
actually<font color="#E5E5E5"> finish I have few more slides</font>

1232
00:55:18,240 --> 00:55:26,200
<font color="#CCCCCC">perhaps</font><font color="#E5E5E5"> I don't know</font><font color="#CCCCCC"> anyway</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 202 of</font>

1233
00:55:23,170 --> 00:55:29,860
the kind of somewhat unusual<font color="#E5E5E5"> use case is</font>

1234
00:55:26,200 --> 00:55:32,460
one which<font color="#E5E5E5"> is done for</font><font color="#CCCCCC"> unpacking manage</font>

1235
00:55:29,860 --> 00:55:34,990
code so the C C sharp dotnet code

1236
00:55:32,460 --> 00:55:38,230
typically malware comes in<font color="#CCCCCC"> some kind of</font>

1237
00:55:34,990 --> 00:55:40,330
<font color="#E5E5E5">packing the</font><font color="#CCCCCC"> pack or encrypted where you</font>

1238
00:55:38,230 --> 00:55:42,610
have them the module that makes it more

1239
00:55:40,330 --> 00:55:44,529
difficult<font color="#E5E5E5"> to analyze even</font><font color="#CCCCCC"> if here's a</font>

1240
00:55:42,610 --> 00:55:46,150
disassembly and<font color="#E5E5E5"> it's typically you see</font>

1241
00:55:44,530 --> 00:55:49,810
that there's some kind<font color="#CCCCCC"> of decryption</font>

1242
00:55:46,150 --> 00:55:52,720
happening<font color="#E5E5E5"> but you don't know it</font><font color="#CCCCCC"> because</font>

1243
00:55:49,810 --> 00:55:55,180
you don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> it in in a debugger so</font>

1244
00:55:52,720 --> 00:55:57,399
what you the the windbg allows you to do

1245
00:55:55,180 --> 00:55:59,980
is to set<font color="#CCCCCC"> up a</font><font color="#E5E5E5"> managed</font><font color="#CCCCCC"> breakpoint as</font>

1246
00:55:57,400 --> 00:56:03,010
well<font color="#CCCCCC"> on the manage functions so</font><font color="#E5E5E5"> you know</font>

1247
00:55:59,980 --> 00:56:05,410
that malware<font color="#CCCCCC"> when it wants to load an</font>

1248
00:56:03,010 --> 00:56:08,320
additional module<font color="#CCCCCC"> cause this system dot</font>

1249
00:56:05,410 --> 00:56:10,420
reflection dot assembly dot load<font color="#E5E5E5"> you set</font>

1250
00:56:08,320 --> 00:56:12,580
a breakpoint but because it's<font color="#E5E5E5"> a it's a</font>

1251
00:56:10,420 --> 00:56:14,440
dotnet or<font color="#E5E5E5"> managed code</font><font color="#CCCCCC"> there's more than</font>

1252
00:56:12,580 --> 00:56:16,509
<font color="#E5E5E5">one function like off with overloaded</font>

1253
00:56:14,440 --> 00:56:18,220
parameter so it sets up about seven

1254
00:56:16,510 --> 00:56:20,200
different break points<font color="#CCCCCC"> and when you</font>

1255
00:56:18,220 --> 00:56:21,850
eventually<font color="#E5E5E5"> hit that break point then you</font>

1256
00:56:20,200 --> 00:56:25,509
look at the you can<font color="#CCCCCC"> look at the stack</font>

1257
00:56:21,850 --> 00:56:28,810
the stack pointer<font color="#CCCCCC"> and when the</font><font color="#E5E5E5"> order of</font>

1258
00:56:25,510 --> 00:56:30,369
the<font color="#E5E5E5"> assembly load function and the stack</font>

1259
00:56:28,810 --> 00:56:35,109
pointer gives you the parameter so this

1260
00:56:30,369 --> 00:56:38,530
is<font color="#CCCCCC"> 32-bit</font><font color="#E5E5E5"> the stack pointer points</font><font color="#CCCCCC"> to an</font>

1261
00:56:35,109 --> 00:56:42,460
array and that array consists of the

1262
00:56:38,530 --> 00:56:45,400
length which is<font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> 5e 0 0 and</font>

1263
00:56:42,460 --> 00:56:48,070
here you also<font color="#CCCCCC"> see this zero zero nine</font>

1264
00:56:45,400 --> 00:56:50,770
zero five eight<font color="#E5E5E5"> four D which when you</font>

1265
00:56:48,070 --> 00:56:53,350
<font color="#CCCCCC">look at the in memory</font><font color="#E5E5E5"> as a byte by byte</font>

1266
00:56:50,770 --> 00:56:55,900
<font color="#CCCCCC">and you you</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> notice the M</font><font color="#E5E5E5"> set which</font>

1267
00:56:53,350 --> 00:56:58,600
is like a dead giveaway<font color="#CCCCCC"> that something</font>

1268
00:56:55,900 --> 00:57:01,150
is an executable module<font color="#E5E5E5"> so here we had</font>

1269
00:56:58,600 --> 00:57:03,730
we run something<font color="#E5E5E5"> until the new assembly</font>

1270
00:57:01,150 --> 00:57:06,010
<font color="#E5E5E5">is loaded we were not at all interested</font>

1271
00:57:03,730 --> 00:57:08,530
in<font color="#E5E5E5"> any other functionality and until we</font>

1272
00:57:06,010 --> 00:57:11,440
really<font color="#CCCCCC"> wanted to</font><font color="#E5E5E5"> find the actual module</font>

1273
00:57:08,530 --> 00:57:13,450
<font color="#CCCCCC">so now we when</font><font color="#E5E5E5"> you have the module</font><font color="#CCCCCC"> we</font>

1274
00:57:11,440 --> 00:57:15,700
simply<font color="#E5E5E5"> write it into a file and</font><font color="#CCCCCC"> we can</font>

1275
00:57:13,450 --> 00:57:18,819
<font color="#CCCCCC">load it normally in a</font><font color="#E5E5E5"> de nerdy compiler</font>

1276
00:57:15,700 --> 00:57:21,520
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the compiled it as such so this is</font>

1277
00:57:18,820 --> 00:57:25,430
the second similar thing you<font color="#CCCCCC"> can also</font><font color="#E5E5E5"> do</font>

1278
00:57:21,520 --> 00:57:27,380
JavaScript or<font color="#CCCCCC"> J script</font><font color="#E5E5E5"> writer so</font>

1279
00:57:25,430 --> 00:57:29,359
that that's<font color="#CCCCCC"> interpreted by the window</font>

1280
00:57:27,380 --> 00:57:31,849
scripting environment<font color="#E5E5E5"> so here we have</font>

1281
00:57:29,359 --> 00:57:35,270
<font color="#E5E5E5">like a simple script and with two evil</font>

1282
00:57:31,849 --> 00:57:37,490
cases so<font color="#E5E5E5"> one which kind</font><font color="#CCCCCC"> of evil some</font>

1283
00:57:35,270 --> 00:57:39,890
command that we<font color="#E5E5E5"> run in this case notepad</font>

1284
00:57:37,490 --> 00:57:43,399
and in the other case<font color="#CCCCCC"> we have some</font><font color="#E5E5E5"> kind</font>

1285
00:57:39,890 --> 00:57:48,078
of mildly obfuscated base64 obfuscated

1286
00:57:43,400 --> 00:57:50,210
string so we<font color="#E5E5E5"> can actually set up when</font>

1287
00:57:48,079 --> 00:57:52,130
the JavaScript interpreter is loaded we

1288
00:57:50,210 --> 00:57:55,190
set up<font color="#E5E5E5"> in an exception</font><font color="#CCCCCC"> so once it's</font>

1289
00:57:52,130 --> 00:57:59,420
loaded<font color="#CCCCCC"> we set up a breakpoint on J's</font>

1290
00:57:55,190 --> 00:58:01,730
script<font color="#E5E5E5"> eval</font><font color="#CCCCCC"> JSA Val and then we thought</font>

1291
00:57:59,420 --> 00:58:04,069
how<font color="#E5E5E5"> the J's ever look like and we</font>

1292
00:58:01,730 --> 00:58:07,430
actually see that<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> jscript</font>

1293
00:58:04,069 --> 00:58:10,670
<font color="#E5E5E5">see all a script compile which gets the</font>

1294
00:58:07,430 --> 00:58:12,078
<font color="#E5E5E5">gets the</font><font color="#CCCCCC"> actual JavaScript code for</font><font color="#E5E5E5"> for</font>

1295
00:58:10,670 --> 00:58:14,089
compilation so we want to set a

1296
00:58:12,079 --> 00:58:15,740
breakpoint<font color="#E5E5E5"> on that and once when</font><font color="#CCCCCC"> we hit</font>

1297
00:58:14,089 --> 00:58:18,380
the breakpoint<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> look at the</font>

1298
00:58:15,740 --> 00:58:20,930
parameter<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the call so here we have an</font>

1299
00:58:18,380 --> 00:58:23,660
example of a<font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> that actually</font>

1300
00:58:20,930 --> 00:58:26,509
runs a command<font color="#CCCCCC"> after it</font><font color="#E5E5E5"> so when you hit</font>

1301
00:58:23,660 --> 00:58:28,670
the<font color="#CCCCCC"> JavaScript compile</font><font color="#E5E5E5"> then in the</font>

1302
00:58:26,510 --> 00:58:34,160
register temporary register<font color="#E5E5E5"> one we put</font>

1303
00:58:28,670 --> 00:58:36,530
the pointer to<font color="#CCCCCC"> the second parameter and</font>

1304
00:58:34,160 --> 00:58:39,558
pointer to the first parameter<font color="#E5E5E5"> and then</font>

1305
00:58:36,530 --> 00:58:44,420
you basically continue with you display

1306
00:58:39,559 --> 00:58:46,880
that that parameter<font color="#CCCCCC"> and and</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> and and</font>

1307
00:58:44,420 --> 00:58:48,710
run<font color="#E5E5E5"> around later so we</font><font color="#CCCCCC"> rerun</font><font color="#E5E5E5"> the whole</font>

1308
00:58:46,880 --> 00:58:51,650
code and we hit the<font color="#E5E5E5"> two break points and</font>

1309
00:58:48,710 --> 00:58:53,450
both both breakpoints come up with with

1310
00:58:51,650 --> 00:58:56,210
the actual code that's supposed to<font color="#E5E5E5"> be</font>

1311
00:58:53,450 --> 00:58:59,359
<font color="#E5E5E5">evil so first one</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> the second</font>

1312
00:58:56,210 --> 00:58:59,599
one is<font color="#E5E5E5"> not but so that's as simple</font><font color="#CCCCCC"> as</font>

1313
00:58:59,359 --> 00:59:04,569
that

1314
00:58:59,599 --> 00:59:08,240
so with that those are the two less

1315
00:59:04,569 --> 00:59:10,460
commonly<font color="#CCCCCC"> used</font><font color="#E5E5E5"> windbg use cases</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think</font>

1316
00:59:08,240 --> 00:59:12,109
we can all relax and<font color="#E5E5E5"> breathe the</font>

1317
00:59:10,460 --> 00:59:14,510
conference is finished we<font color="#CCCCCC"> can have</font>

1318
00:59:12,109 --> 00:59:18,410
<font color="#E5E5E5">pictures of dogs and cats</font><font color="#CCCCCC"> these are mine</font>

1319
00:59:14,510 --> 00:59:21,049
but I'm<font color="#E5E5E5"> sure all you have of yeah I</font>

1320
00:59:18,410 --> 00:59:22,160
don't<font color="#CCCCCC"> know if we have any</font><font color="#E5E5E5"> time for</font>

1321
00:59:21,049 --> 00:59:26,030
<font color="#CCCCCC">questions</font>

1322
00:59:22,160 --> 00:59:28,509
hopefully not yes

1323
00:59:26,030 --> 00:59:30,540
any questions

1324
00:59:28,510 --> 00:59:30,540
I

1325
00:59:30,570 --> 00:59:39,310
<font color="#CCCCCC">handy realize</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> a difficult question</font>

1326
00:59:32,740 --> 00:59:41,950
<font color="#CCCCCC">no so</font><font color="#E5E5E5"> but when the malware runs a and in</font>

1327
00:59:39,310 --> 00:59:44,110
kernel mode<font color="#CCCCCC"> they they can just see okay</font>

1328
00:59:41,950 --> 00:59:46,750
<font color="#CCCCCC">you should stop debugging</font><font color="#E5E5E5"> and they just</font>

1329
00:59:44,110 --> 00:59:51,730
let it see it's like kill it<font color="#CCCCCC"> it should</font>

1330
00:59:46,750 --> 00:59:53,500
be<font color="#E5E5E5"> possible yeah I guess I guess they</font>

1331
00:59:51,730 --> 00:59:55,600
can it depends like<font color="#E5E5E5"> if there's if</font>

1332
00:59:53,500 --> 00:59:57,220
<font color="#CCCCCC">there's a kernel thread which you can</font>

1333
00:59:55,600 --> 00:59:59,770
<font color="#E5E5E5">probably enumerate like you Marvin needs</font>

1334
00:59:57,220 --> 01:00:02,200
to be run needs<font color="#E5E5E5"> to run somehow so you</font>

1335
00:59:59,770 --> 01:00:05,410
<font color="#E5E5E5">you kind of blow the debugger from from</font>

1336
01:00:02,200 --> 01:00:07,060
the outside<font color="#CCCCCC"> as far</font><font color="#E5E5E5"> as I know I haven't</font>

1337
01:00:05,410 --> 01:00:08,830
<font color="#E5E5E5">seen</font><font color="#CCCCCC"> mother that that looks to see</font><font color="#E5E5E5"> if</font>

1338
01:00:07,060 --> 01:00:10,720
there<font color="#CCCCCC"> is under the kernel mode</font><font color="#E5E5E5"> debugging</font>

1339
01:00:08,830 --> 01:00:13,090
and under the user mode debugging yes

1340
01:00:10,720 --> 01:00:15,609
they're like hundreds of anti debugging

1341
01:00:13,090 --> 01:00:18,730
techniques<font color="#E5E5E5"> which again there are</font>

1342
01:00:15,610 --> 01:00:21,520
extensions which allows you to<font color="#E5E5E5"> try to to</font>

1343
01:00:18,730 --> 01:00:22,960
circumvent with kernel mode I haven't

1344
01:00:21,520 --> 01:00:25,660
seen that much I think<font color="#CCCCCC"> I think I</font><font color="#E5E5E5"> seen</font>

1345
01:00:22,960 --> 01:00:27,910
<font color="#CCCCCC">more problems in</font><font color="#E5E5E5"> being like very packed</font>

1346
01:00:25,660 --> 01:00:29,859
and obfuscated so it takes like horrible

1347
01:00:27,910 --> 01:00:32,259
as a month<font color="#E5E5E5"> amount of time and as</font><font color="#CCCCCC"> soon as</font>

1348
01:00:29,860 --> 01:00:35,050
the load you go I don't<font color="#E5E5E5"> want to do this</font>

1349
01:00:32,260 --> 01:00:36,760
I don't<font color="#E5E5E5"> want to so so it's more that's</font>

1350
01:00:35,050 --> 01:00:39,609
kind of how they do it more or more in

1351
01:00:36,760 --> 01:00:42,600
my opinion<font color="#CCCCCC"> like you</font><font color="#E5E5E5"> have been protect</font>

1352
01:00:39,609 --> 01:00:45,600
for for kernel mode and<font color="#E5E5E5"> that's like</font>

1353
01:00:42,600 --> 01:00:45,600
thanks

1354
01:00:50,319 --> 01:00:55,930
no more questions if there<font color="#E5E5E5"> are no more</font>

1355
01:00:52,119 --> 01:00:59,709
<font color="#CCCCCC">questions I can invite</font><font color="#E5E5E5"> yell and not to</font>

1356
01:00:55,930 --> 01:01:02,440
give us the<font color="#CCCCCC"> final</font><font color="#E5E5E5"> steal and thank you</font>

1357
01:00:59,709 --> 01:01:04,979
for<font color="#E5E5E5"> listening</font><font color="#CCCCCC"> to what I have to</font><font color="#E5E5E5"> say</font>

1358
01:01:02,440 --> 01:01:04,979
thank you

1359
01:01:05,090 --> 01:01:17,210
[Music]

1360
01:01:16,350 --> 01:01:20,420
[Applause]

1361
01:01:17,210 --> 01:01:20,420
[Music]

