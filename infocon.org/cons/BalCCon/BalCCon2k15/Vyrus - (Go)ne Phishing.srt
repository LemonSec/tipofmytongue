1
00:00:20,160 --> 00:00:21,210
welcome

2
00:00:21,210 --> 00:00:21,830
the

3
00:00:21,830 --> 00:00:28,549
lot of talk for this welcome I hope you
enjoyed the call event and the last dog

4
00:00:28,550 --> 00:00:34,960
is primarily using going to do better
fun sayings

5
00:00:34,960 --> 00:00:40,320
and please read wires and enjoy the last
year

6
00:00:40,320 --> 00:01:01,820
thank you go before I go is couple
people they've all cool so what is going

7
00:01:01,820 --> 00:01:08,690
to go is Google's programming language
anybody who's ever used Google clout

8
00:01:08,690 --> 00:01:13,369
will they give you to speed up
containers that things are and then go

9
00:01:13,369 --> 00:01:19,750
and it was made by these guys some of
these names probably look familiar

10
00:01:19,750 --> 00:01:25,250
they're also the guys who wrote Plan
nine and pretty much everything about

11
00:01:25,250 --> 00:01:30,240
those kind of plan nine ish they're
they're very big on their their

12
00:01:30,240 --> 00:01:35,960
programming philosophies so go is to
look at it's kind of like this mix of

13
00:01:35,960 --> 00:01:43,500
Python and see but it's very very very
simple the sin taxes very clean and it

14
00:01:43,500 --> 00:01:51,210
is a compiled language its static types
and compile to almost everything which

15
00:01:51,210 --> 00:01:57,960
we'll get to in a sec so it works on
everything no really everything and

16
00:01:57,960 --> 00:02:02,399
actually as I was writing the slide I
found out today actually that not only

17
00:02:02,399 --> 00:02:08,399
do the Linux variants that it works on
include Android but apparently somebody

18
00:02:08,399 --> 00:02:14,519
also in the last week reported the
Android shared object container to iOS

19
00:02:14,519 --> 00:02:22,880
so now apparently it works on iPhones
also and it works a lot architectures

20
00:02:22,880 --> 00:02:28,500
all the underlying stuff is written in C
and assembly and if you talk to the

21
00:02:28,500 --> 00:02:31,769
developers the first thing they'll tell
you is that their mission for the next

22
00:02:31,769 --> 00:02:37,450
year is actually to remove all the sea
so hopefully by 2016 it'll be a language

23
00:02:37,450 --> 00:02:40,929
entirely written and assembly and then
all the other tools are written in

24
00:02:40,930 --> 00:02:41,600
itself

25
00:02:41,600 --> 00:02:48,790
that's always nice so got a lot of
really cool just general programming

26
00:02:48,790 --> 00:02:52,549
features that are nice for getting stuff
done and not spending a lot of time

27
00:02:52,550 --> 00:02:57,730
dealing with language minutiae one of
those things is compiler macros so

28
00:02:57,730 --> 00:03:03,709
completely macro I can see usually you
have your its def es de or F def

29
00:03:03,710 --> 00:03:13,540
whatever giant make files and go you can
do that with files so if I have like my

30
00:03:13,540 --> 00:03:18,200
file on disk or windows and I named a
function and then I have another file

31
00:03:18,200 --> 00:03:23,060
named exactly the same but it has
underscore Darwin in it and I have

32
00:03:23,060 --> 00:03:28,730
exactly the same function name the same
thing and then I go build my program the

33
00:03:28,730 --> 00:03:33,649
compiler will intelligently used the
right file and the link the same way

34
00:03:33,650 --> 00:03:38,440
with the same code and then anytime
where there are function overlaps it

35
00:03:38,440 --> 00:03:42,560
will intelligently not use that code so
it'll compile the same function for for

36
00:03:42,560 --> 00:03:48,130
both versions of the program another
cool thing about go is it has these

37
00:03:48,130 --> 00:03:53,410
things called governor teens teens are
threats and go you don't need peace read

38
00:03:53,410 --> 00:04:01,420
you don't need a booster any that junk
go has this kind of brain that sits at

39
00:04:01,420 --> 00:04:05,290
the top of it I've ever go process
called a run time there's no way

40
00:04:05,290 --> 00:04:11,590
currently well without doing things that
you shouldn't to compile go without

41
00:04:11,590 --> 00:04:15,280
using go run time and go run time gives
you all these fun little features like

42
00:04:15,280 --> 00:04:19,180
garbage collection and so there's
nothing to talk about a minute and as a

43
00:04:19,180 --> 00:04:24,290
function of that it is its own process
so every time you need an anonymous

44
00:04:24,290 --> 00:04:28,240
function to spin off into its own thing
you call it like that that's not sort of

45
00:04:28,240 --> 00:04:33,010
code that's that's literally that works
you can buy list you can stop reds and

46
00:04:33,010 --> 00:04:35,490
do stuff

47
00:04:35,490 --> 00:04:40,660
so security alright so you're doing
stuff for security

48
00:04:40,660 --> 00:04:45,620
usually there's two big pitfalls when it
comes to finding bugs right crypto and

49
00:04:45,620 --> 00:04:52,319
parsing well I love goes partners are
written by the guy who wrote UTF eight

50
00:04:52,319 --> 00:05:00,229
so he could probably write a pretty
decent parser he has this whole story on

51
00:05:00,229 --> 00:05:07,659
how he supposedly invented UTF eight on
the napkin of a diner in New Jersey and

52
00:05:07,659 --> 00:05:10,780
he thinks himself very important kinda
like Linus Torvald and you know he wrote

53
00:05:10,780 --> 00:05:16,719
a couple of other important things like
the language so the person it's pretty

54
00:05:16,720 --> 00:05:21,259
safe there's there's been a couple of
bugs but for the most part it's it's

55
00:05:21,259 --> 00:05:30,780
it's pretty memories say he's he's kind
of his kind of really into himself so

56
00:05:30,780 --> 00:05:33,130
yeah it's really good partners and
because it's really good a person as

57
00:05:33,130 --> 00:05:37,520
there's a lot of library support for a
lot of commercial protocols

58
00:05:37,520 --> 00:05:45,389
this is a tiny tiny tiny sample of
protocol parcels that already exist just

59
00:05:45,389 --> 00:05:50,729
by the fall in the language there are
thousands upon thousands of libraries

60
00:05:50,729 --> 00:05:59,539
out there that take all the stuff apart
there are analog parsers for serial liar

61
00:05:59,539 --> 00:06:04,949
interfaces there's video stuff there's
audio stuff there's protocols for

62
00:06:04,949 --> 00:06:09,289
controlling robots that can get parts
independent marsha lang it's pretty

63
00:06:09,289 --> 00:06:16,289
ridiculous as part of the reason why go
partners are so useful is because the

64
00:06:16,289 --> 00:06:20,360
language has this trick that they can do

65
00:06:20,360 --> 00:06:24,400
called type switching also goes to
statically typed language so when I i

66
00:06:24,400 --> 00:06:28,729
define a variable I have to find that
type but go also lets you define your

67
00:06:28,729 --> 00:06:33,500
own types and those types can be
composited so there are functions under

68
00:06:33,500 --> 00:06:38,650
the hood that do things called marshland
so this is an example of a JSON Marshall

69
00:06:38,650 --> 00:06:40,150
error if I want to turn

70
00:06:40,150 --> 00:06:45,789
a bunch of texts into or if I want to
get checked out of a JSON structure and

71
00:06:45,790 --> 00:06:49,090
all I have it is as the strain that's
again that's not pseudocode that's

72
00:06:49,090 --> 00:06:53,599
literally that compiles that's what it
looks like you have an object not have

73
00:06:53,600 --> 00:06:57,420
to worry about overflows or garbage
collection or any of that if I wanted to

74
00:06:57,420 --> 00:07:01,200
take the same structure and I want to
put it out again that's that's what it

75
00:07:01,200 --> 00:07:02,180
looks like

76
00:07:02,180 --> 00:07:10,480
again not suit ok very simple go since
it's compiled and linked to other stuff

77
00:07:10,480 --> 00:07:16,290
and one of the other stuffs that it can
link to is seized so there are you

78
00:07:16,290 --> 00:07:21,590
download go when you install it becomes
with two compilers to go compiler and an

79
00:07:21,590 --> 00:07:31,530
interface to GCC GCC go in GCC go can
include Rossi in go files so if you have

80
00:07:31,530 --> 00:07:36,770
a date file that some awesome hackers
and you decide you want to call it when

81
00:07:36,770 --> 00:07:41,700
you know that coding go because making a
socket and Co's literally one line of

82
00:07:41,700 --> 00:07:43,620
code on a show it to you in a minute

83
00:07:43,620 --> 00:07:49,370
you just died aged call it exactly like
that again that compiles that's actually

84
00:07:49,370 --> 00:07:56,900
the Segoe style from from the web page
there's all kinds of fun little language

85
00:07:56,900 --> 00:08:00,429
features in there it's got type of their
songs like we talked about it's got its

86
00:08:00,430 --> 00:08:05,850
own version of the pipe on one line web
server but it'll compile to every

87
00:08:05,850 --> 00:08:10,770
operating system into the Sun so it's a
little more useful than all kind of

88
00:08:10,770 --> 00:08:17,200
stuff to talk about happy things
reconcile the language that is great

89
00:08:17,200 --> 00:08:24,530
with Zakir Khan that a DEFCON so this is
how you load shall code and go that's

90
00:08:24,530 --> 00:08:29,669
not pseudocode either that that works
for real and the awesome thing about

91
00:08:29,670 --> 00:08:34,310
this is that sense everything you do and
go and up under the go runtime header

92
00:08:34,309 --> 00:08:41,098
Antivirus is really bad at finding it
and you don't have to do anything

93
00:08:41,099 --> 00:08:47,120
fancy like packing or something to do
that also since the threads that it

94
00:08:47,120 --> 00:08:50,600
creates a dynamic inside run time and
since when time is changing all the time

95
00:08:50,600 --> 00:08:52,800
as they update the language

96
00:08:52,800 --> 00:09:01,729
doing your obfuscation for you so that's
nice so this is the same code on Linux

97
00:09:01,730 --> 00:09:08,500
this is this isn't pseudocode but
there's a function missing where it says

98
00:09:08,500 --> 00:09:13,220
disabled and acts and if you have
written letters on Linux know that I'm

99
00:09:13,220 --> 00:09:17,399
missing the fall and protect her but it
works the same way you just you know I

100
00:09:17,399 --> 00:09:22,269
can dynamically load a syscall I can
tell that's all I want new memory I can

101
00:09:22,269 --> 00:09:32,370
put stuff into memory and then go OK
executed go on argue Damon's so go

102
00:09:32,370 --> 00:09:37,319
currently does not have a way to
demonize stuff just really annoying and

103
00:09:37,319 --> 00:09:42,849
if you go into the channel or you go to
any other help documentation all of them

104
00:09:42,850 --> 00:09:45,139
will tell you that demonization is
impossible

105
00:09:45,139 --> 00:09:52,730
lying to you you can you just don't like
the way that it works now this is this

106
00:09:52,730 --> 00:09:57,880
is a poor man's Damon that have written
for some of the tools of the right so

107
00:09:57,880 --> 00:10:03,269
far because there's no easy Damon and go
ahead of myself so the reason there's no

108
00:10:03,269 --> 00:10:07,630
easy day mandingo is because the
demonization 101 right you have a

109
00:10:07,630 --> 00:10:12,800
process you for that process and
euphoric again and when you fork again

110
00:10:12,800 --> 00:10:17,508
that's the key code of telling the
operating system that this child no

111
00:10:17,509 --> 00:10:21,579
longer has to be responsible for the two
parents that preceded and then it goes

112
00:10:21,579 --> 00:10:26,709
off and doesn't think the problem is
that when you fork inside a process you

113
00:10:26,709 --> 00:10:31,619
can only for the current thread and sent
you have go run time above you at all

114
00:10:31,620 --> 00:10:36,420
times there is no such thing as a
single-threaded go program so by

115
00:10:36,420 --> 00:10:39,279
definition doesn't work

116
00:10:39,279 --> 00:10:43,649
but there are tons of ways around this
and all the ways around this are already

117
00:10:43,649 --> 00:10:50,670
implemented in a Go library called exec
and what exactly does is call whatever

118
00:10:50,670 --> 00:10:57,479
your operating system version of start
new program is so in Windows 8 Start

119
00:10:57,480 --> 00:11:01,029
process and Linux I think it's like

120
00:11:01,029 --> 00:11:07,079
s process or something previously has
their own anyway so you can call

121
00:11:07,079 --> 00:11:12,300
yourself with an argument in a new
process and say do new things and it'll

122
00:11:12,300 --> 00:11:17,620
totally work at home and actually one of
the examples show you if you do this

123
00:11:17,620 --> 00:11:26,269
with the 19 web server not only does it
work but if you do it on OSX the OS X

124
00:11:26,269 --> 00:11:32,040
colonel tries to help you when children
processes without attached parents fail

125
00:11:32,040 --> 00:11:37,939
and restart them so if anybody decides
to play with this later and the 19 Web

126
00:11:37,939 --> 00:11:40,930
server automatically be careful because
I have created processes that I couldn't

127
00:11:40,930 --> 00:11:48,949
find to kill again and had to reboot my
laptop so that's the 19 web server again

128
00:11:48,949 --> 00:11:58,300
not pseudo code that is literally how
you do it and there is a fun trick you

129
00:11:58,300 --> 00:12:02,189
can do with this there's a HDB is
obviously a library and there's a bunch

130
00:12:02,189 --> 00:12:07,230
of stuff and therefore making websites
are making web servers and doing your

131
00:12:07,230 --> 00:12:08,710
own thing

132
00:12:08,710 --> 00:12:12,630
and recently there is an update to it
there's a function and they're called

133
00:12:12,630 --> 00:12:18,840
hijack so if you decided you wanted to
rate Lake a web server that started

134
00:12:18,840 --> 00:12:29,180
spitting out binary video data because
because reasons you thought I can you

135
00:12:29,180 --> 00:12:36,000
can . if I were to take her in front of
me but if I were to take this handle

136
00:12:36,000 --> 00:12:39,080
area that this puts off and literally
put da hijacking the end of it will give

137
00:12:39,080 --> 00:12:44,350
me a raw socket just piped into it so
that's kind of fun

138
00:12:44,350 --> 00:12:50,910
shells shells and mortar shells so
there's this guy this guy actually works

139
00:12:50,910 --> 00:12:54,560
travail I don't know if any of you have
ever worked with the veil exploitation

140
00:12:54,560 --> 00:12:59,689
framework it's useful for every pen
testing the world is used it to packed

141
00:12:59,690 --> 00:13:04,020
interpreter when it's being annoying
because antivirus surveil actually uses

142
00:13:04,020 --> 00:13:08,550
a lot of go under the hood I'm pretty
sure they're not telling anybody that

143
00:13:08,550 --> 00:13:11,359
because they don't want people to start
making signatures for go by areas but

144
00:13:11,360 --> 00:13:15,800
honestly they mutate so much that
doesn't really matter and that's his

145
00:13:15,800 --> 00:13:22,370
public get her but he's written a lot of
little shell emulators for Gozo that

146
00:13:22,370 --> 00:13:27,320
also is not suit ok with that as a real
example of a reverse shell entirely

147
00:13:27,320 --> 00:13:31,220
written in native code that uses raw
sockets and no other libraries so that's

148
00:13:31,220 --> 00:13:39,020
that's nice of you is that on jobs

149
00:13:39,020 --> 00:13:47,370
so I wrote there's this is a pickup
handler and go the whole thing and if

150
00:13:47,370 --> 00:13:55,430
you ever it's never before usually takes
a lot more than that this is actually

151
00:13:55,430 --> 00:13:59,739
from a project that I was going to
release but it's a little too buggy for

152
00:13:59,740 --> 00:14:02,860
me to release right now I'll probably
have it up on the Internet at some point

153
00:14:02,860 --> 00:14:09,640
I'm using it to bypass host firewalls so
you're unhappy couples here on your

154
00:14:09,640 --> 00:14:14,830
implant and if the operating system has
a firewall that says no packets allow it

155
00:14:14,830 --> 00:14:18,240
doesn't matter cos you're sniffing
packets and your packet sniffer goes

156
00:14:18,240 --> 00:14:28,220
that once for me and then does evil
things VNC so at one point I just

157
00:14:28,220 --> 00:14:31,660
thought it would be really funny to be
able to deploy shells that I could send

158
00:14:31,660 --> 00:14:36,579
Silent commands to clients there its
what I do for a living and have them

159
00:14:36,580 --> 00:14:39,780
send a VNC cells back to me that way I
could have video of what people are

160
00:14:39,780 --> 00:14:43,130
doing and real-time I thought this would
be funny and I thought I was gonna be

161
00:14:43,130 --> 00:14:46,840
hard to read my comment B&C like you
know nobody nobody messes with the VNC

162
00:14:46,840 --> 00:14:50,540
protocol used clients and related
infrastructure turns out there's a

163
00:14:50,540 --> 00:14:55,160
people who've invested in C on go so
this is the first thing I found when I

164
00:14:55,160 --> 00:15:00,550
went to go research it is guy was like
oh I just wrote this B&C push client and

165
00:15:00,550 --> 00:15:10,069
the comment after was just turns out a
bunch of people real server libraries so

166
00:15:10,070 --> 00:15:13,800
there's like two or three lions little
snippet out there that will launch B&C

167
00:15:13,800 --> 00:15:18,290
servers which is probably really
dangerous but sounds like fun

168
00:15:18,290 --> 00:15:24,800
also apparently there's also a large
cloud provider at an if you've ever used

169
00:15:24,800 --> 00:15:29,150
their stuff they just rewrote their home
management staff for their VNC solution

170
00:15:29,150 --> 00:15:34,350
and go which I mean there's only three
libraries out there to do it

171
00:15:34,350 --> 00:15:38,970
sure that in write their own so if you
want to find something

172
00:15:38,970 --> 00:15:41,760
speaking of housing

173
00:15:41,760 --> 00:15:52,510
so this is a real life example of
calling FL on a chunk of cocoa and this

174
00:15:52,510 --> 00:15:58,030
is cooler than it looks because go does
not allow dynamic loads because the plan

175
00:15:58,030 --> 00:16:02,439
nine guys are very anti dynamic load and
that's all I'll say about that cuz I

176
00:16:02,440 --> 00:16:05,960
don't start a fight with a bunch of
language zealots but being able to call

177
00:16:05,960 --> 00:16:11,010
a buzzer on code before you can pilot
dynamically that doesn't allow dynamic

178
00:16:11,010 --> 00:16:16,170
loads it's kind of cool and that's
literally how you run it so that's

179
00:16:16,170 --> 00:16:19,550
that's nice weather is public

180
00:16:19,550 --> 00:16:26,250
Jago can be used for all kinds of stuff
and a lot of that stuff ends up being

181
00:16:26,250 --> 00:16:29,880
rapid prototypes and as rapid prototypes
in various scales very quickly scale up

182
00:16:29,880 --> 00:16:34,020
into production systems and right now
it's almost entirely being used by

183
00:16:34,020 --> 00:16:39,680
startups and dead people and people
doing very constructive free and open

184
00:16:39,680 --> 00:16:43,910
source type things none of these people
are hackers ahead and all of those

185
00:16:43,910 --> 00:16:47,069
people to death but those people yell at
me very fiercely when I walk into the

186
00:16:47,070 --> 00:16:51,050
channel and go you know how do I call
you know on how do I change memory

187
00:16:51,050 --> 00:16:58,530
protection on code why are you doing
that doesn't answer my question so yeah

188
00:16:58,530 --> 00:17:03,500
if you're bored and wanting to write in
plants and when I got some things it

189
00:17:03,500 --> 00:17:09,949
would be great to have a larger shall we
say gray hat security community messing

190
00:17:09,949 --> 00:17:16,709
with the language every time you have a
demo so I have one for you not amazing

191
00:17:16,709 --> 00:17:27,540
but I will show it to you so if you go
to my get home which is 1 I've got one

192
00:17:27,540 --> 00:17:36,340
project public and it's called polar
aight so polarized is so i guess im a

193
00:17:36,340 --> 00:17:40,750
pen tester everythings for a living and
as a person who does that have to do a

194
00:17:40,750 --> 00:17:48,040
lot of fishing and anybody who's ever
had to fish large corporate entities

195
00:17:48,040 --> 00:17:50,460
very often knows that

196
00:17:50,460 --> 00:17:54,470
hardest part of doing it aside from the
infrastructure piece which you can kind

197
00:17:54,470 --> 00:17:58,690
of automate its cloning the site which
seems like it would be the simplest part

198
00:17:58,690 --> 00:18:05,350
but honestly just whether it's social
engineering toolkit our program or any

199
00:18:05,350 --> 00:18:09,320
of those other cyclone ersatz break they
always break on something and I find

200
00:18:09,320 --> 00:18:25,139
this terribly annoying so I wrote
something go to clone sites for me

201
00:18:25,140 --> 00:18:44,240
so we are going to clone my computer on
the Internet to do that

202
00:18:44,240 --> 00:18:55,950
that is it a lot of my firewall so now
I'm gonna load up so this is where get

203
00:18:55,950 --> 00:19:10,020
a.com looks like and if I go to
localhost right now looks pretty the

204
00:19:10,020 --> 00:19:10,720
same

205
00:19:10,720 --> 00:19:22,370
and so if I wanted two types of input
notice the input comes from the actual

206
00:19:22,370 --> 00:19:28,820
get observer but we have this great log
with all the tokens and the user names

207
00:19:28,820 --> 00:19:33,980
and everything else so you know not
amazing there's other stuff online that

208
00:19:33,980 --> 00:19:38,260
does this but other stuff online that
does this is somewhere around you know

209
00:19:38,260 --> 00:19:44,370
2000 lines of code set i think is the
most packaged solution and it I think

210
00:19:44,370 --> 00:20:02,439
it's something like ten thousand lines
this is this is about two hundred and I

211
00:20:02,440 --> 00:20:17,169
wrote in about an hour so anyway that's
my that's my pitch of my goals call it a

212
00:20:17,169 --> 00:20:19,100
go

213
00:20:19,100 --> 00:20:25,668
in conclusion there are some bad things
because nothing's perfect there's no

214
00:20:25,669 --> 00:20:28,850
demonize which is kind of a pain in the
ass to get around because the only way

215
00:20:28,850 --> 00:20:32,469
that I figured out how to do it without
doing a lot of stuff that functionally

216
00:20:32,470 --> 00:20:37,929
breaks the language under the hood is
the argument that I showed you and that

217
00:20:37,929 --> 00:20:42,520
requires the binary to remain on the
system which is we don't like that from

218
00:20:42,520 --> 00:20:48,260
religious reasons there's no dynamic
linking which there are actually lots of

219
00:20:48,260 --> 00:20:55,220
ways around but you do if you're a
hacker you're gonna have to write a

220
00:20:55,220 --> 00:20:58,470
thing to do it for you a lot you're
going to want to do it a lot to do

221
00:20:58,470 --> 00:21:02,010
melissa's things it's not hard to write
but you have to write it so I listed as

222
00:21:02,010 --> 00:21:04,610
a negative because it's something that
you don't have to do in most other

223
00:21:04,610 --> 00:21:10,729
languages you must use go run time and a
slight from all the reasons that I've

224
00:21:10,730 --> 00:21:15,830
cited about government I'm being a
positive the reasoning using go run time

225
00:21:15,830 --> 00:21:21,639
can be a negative is because gold
binaries are very very big the way that

226
00:21:21,640 --> 00:21:24,470
go compiles when time is that

227
00:21:24,470 --> 00:21:28,020
runtime loads a series of basis
functions and then any library that you

228
00:21:28,020 --> 00:21:32,720
include usually when you're working in C
or something else that's compiled the

229
00:21:32,720 --> 00:21:36,150
compiler will look at what you're
calling out of your daddy child whatever

230
00:21:36,150 --> 00:21:40,159
you're linking against and then only
take what you need and and compile those

231
00:21:40,159 --> 00:21:43,230
things when they're really into your
package goes into that goal

232
00:21:43,230 --> 00:21:46,770
take the whole package and put the whole
package in the binary and then your

233
00:21:46,770 --> 00:21:53,429
program is actually just this little
blob of links so that means that there's

234
00:21:53,429 --> 00:21:57,130
not a lot of exploits and go there have
been public but if you find one it's

235
00:21:57,130 --> 00:22:01,210
really easy to Rachel code because you
just use the language you just like to

236
00:22:01,210 --> 00:22:05,000
whatever ever function is there and
there's there's no SLR anything like

237
00:22:05,000 --> 00:22:08,470
that everything is in the same place and
to compile never operating system so

238
00:22:08,470 --> 00:22:14,059
it's in the same place all the time and
actually that link is to somebody who

239
00:22:14,059 --> 00:22:18,049
found that this is the most recent
security bug I'm aware of and it was

240
00:22:18,049 --> 00:22:24,650
immediately patched but no go binary
sizes are annoying supposedly this is

241
00:22:24,650 --> 00:22:28,020
something that's on the to fix list
according to the devs but

242
00:22:28,020 --> 00:22:31,080
them being development people in that
security people I'm pretty sure it's

243
00:22:31,080 --> 00:22:38,240
like priority eight of 10 anybody have
any random questions about the waco

244
00:22:38,240 --> 00:22:52,370
works under that anything weird memories
ok thank you for letting me bore you to

245
00:22:52,370 --> 00:22:52,419
death

