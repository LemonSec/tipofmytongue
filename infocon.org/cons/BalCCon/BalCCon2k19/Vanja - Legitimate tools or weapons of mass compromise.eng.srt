1
00:00:25,640 --> 00:00:29,820
since apparently our announcer is

2
00:00:27,930 --> 00:00:33,090
missing out I have nothing to do that

3
00:00:29,820 --> 00:00:35,190
and then introduce myself my name is

4
00:00:33,090 --> 00:00:37,910
Vanya and revered for Sisko Tallis as a

5
00:00:35,190 --> 00:00:42,150
security researcher and so at this

6
00:00:37,910 --> 00:00:44,459
session what we'll try to answer a

7
00:00:42,150 --> 00:00:47,250
question that I posed to myself during

8
00:00:44,460 --> 00:00:50,790
this research which is are some of the

9
00:00:47,250 --> 00:00:53,489
executables we use in Windows legitimate

10
00:00:50,790 --> 00:00:58,739
tools or they're actually weapons of

11
00:00:53,489 --> 00:01:00,750
mass compromise so I'll cover some of

12
00:00:58,739 --> 00:01:02,729
the area just to to see from you what

13
00:01:00,750 --> 00:01:05,040
you can expect from the talk what's the

14
00:01:02,729 --> 00:01:08,520
motivation behind it a little bit of a

15
00:01:05,040 --> 00:01:11,549
context I will talk a little bit about

16
00:01:08,520 --> 00:01:14,250
which are the binaries that are misused

17
00:01:11,549 --> 00:01:16,830
by malicious actors and bred team

18
00:01:14,250 --> 00:01:18,900
members as well and then I'll talk

19
00:01:16,830 --> 00:01:21,060
slightly about the process that I took

20
00:01:18,900 --> 00:01:24,630
to investigate and do some of the

21
00:01:21,060 --> 00:01:27,259
research and then the results like some

22
00:01:24,630 --> 00:01:30,240
of the most more interesting finding of

23
00:01:27,259 --> 00:01:33,359
what it is that we found by

24
00:01:30,240 --> 00:01:35,070
investigating the data that Cisco Dallas

25
00:01:33,359 --> 00:01:39,048
which is Cisco's threat intelligence

26
00:01:35,070 --> 00:01:43,919
operation has in its own kind of data

27
00:01:39,049 --> 00:01:47,130
source ok so let's start with the

28
00:01:43,920 --> 00:01:50,549
context so I come from the anti-malware

29
00:01:47,130 --> 00:01:52,320
background and threat research and most

30
00:01:50,549 --> 00:01:54,570
of the times will be even like a few

31
00:01:52,320 --> 00:01:56,758
years ago when we talk about some of the

32
00:01:54,570 --> 00:01:58,320
most interesting compromises and some of

33
00:01:56,759 --> 00:02:02,789
the most interesting attacks we would

34
00:01:58,320 --> 00:02:04,678
say 80% of them will be introducing some

35
00:02:02,789 --> 00:02:06,060
kind of malicious code and when we talk

36
00:02:04,679 --> 00:02:08,699
about malicious code we would always

37
00:02:06,060 --> 00:02:10,979
think about there are actually files so

38
00:02:08,699 --> 00:02:11,339
you have an executable file and a neuron

39
00:02:10,979 --> 00:02:15,120
it

40
00:02:11,340 --> 00:02:17,069
and over time we slowly saw a shift or

41
00:02:15,120 --> 00:02:21,000
at least there was a claim that there is

42
00:02:17,069 --> 00:02:24,420
a shift from just malicious binaries to

43
00:02:21,000 --> 00:02:28,980
malicious actors and and hackers or

44
00:02:24,420 --> 00:02:33,599
attackers misusing the existing Windows

45
00:02:28,980 --> 00:02:35,548
executable and system files so what was

46
00:02:33,599 --> 00:02:36,040
the idea behind it is that even if you

47
00:02:35,549 --> 00:02:37,900
have like

48
00:02:36,040 --> 00:02:39,310
tomorrow softer or some kind of process

49
00:02:37,900 --> 00:02:41,400
it would be more difficult for you to

50
00:02:39,310 --> 00:02:44,140
detect the detect the illegitimate

51
00:02:41,400 --> 00:02:46,840
activities if everything that's used

52
00:02:44,140 --> 00:02:50,170
like to from the point of compromise to

53
00:02:46,840 --> 00:02:52,780
the point of the realization of the goal

54
00:02:50,170 --> 00:02:55,750
for the attacker is used using standard

55
00:02:52,780 --> 00:02:57,640
executables so it leaves minimum

56
00:02:55,750 --> 00:02:59,739
footprint is more difficult to discover

57
00:02:57,640 --> 00:03:01,809
and what we did is be mostly into

58
00:02:59,739 --> 00:03:03,790
invested on Windows but the same idea

59
00:03:01,810 --> 00:03:05,889
can be applied to of course to other

60
00:03:03,790 --> 00:03:09,370
oasis and in fact if you think about

61
00:03:05,889 --> 00:03:14,319
some of the old Oasis so these

62
00:03:09,370 --> 00:03:17,109
executables are also known as living off

63
00:03:14,319 --> 00:03:19,810
the land boundaries so and I don't know

64
00:03:17,109 --> 00:03:23,230
if I see that most of the people are

65
00:03:19,810 --> 00:03:24,849
here a bit younger just a bit so I can

66
00:03:23,230 --> 00:03:28,030
ask you this is a little bit of a crease

67
00:03:24,849 --> 00:03:30,298
and to see just if anybody knows what

68
00:03:28,030 --> 00:03:30,299
this is

69
00:03:32,950 --> 00:03:38,069
yeah I know of course you will know what

70
00:03:36,430 --> 00:03:40,569
it is

71
00:03:38,069 --> 00:03:44,410
yes it's assembly but it's a particular

72
00:03:40,569 --> 00:03:47,290
type of script so a long long time ago

73
00:03:44,410 --> 00:03:50,109
in some galaxy far away there used to be

74
00:03:47,290 --> 00:03:53,829
this operating system called dos or DOS

75
00:03:50,110 --> 00:03:56,680
operating system and so this just shows

76
00:03:53,830 --> 00:03:59,890
that the idea of having having these

77
00:03:56,680 --> 00:04:02,110
living of the land binaries but to hide

78
00:03:59,890 --> 00:04:06,190
that malicious code is not completely

79
00:04:02,110 --> 00:04:09,040
new so what this is this is called debug

80
00:04:06,190 --> 00:04:10,660
script and you could actually use this

81
00:04:09,040 --> 00:04:12,250
kind of scripting language is almost

82
00:04:10,660 --> 00:04:13,750
like an assembly so you have the first

83
00:04:12,250 --> 00:04:15,790
command to set the name of the file you

84
00:04:13,750 --> 00:04:17,380
want to write to then you say I want to

85
00:04:15,790 --> 00:04:19,870
assemble a certain instruction from

86
00:04:17,380 --> 00:04:21,668
certain address and then you put the

87
00:04:19,870 --> 00:04:25,960
instruction so this basically is a code

88
00:04:21,668 --> 00:04:28,090
to set up a BIOS data region and then

89
00:04:25,960 --> 00:04:30,270
jump to BIOS data region which will

90
00:04:28,090 --> 00:04:32,859
cause the machine or computer to reboot

91
00:04:30,270 --> 00:04:35,560
so basically this is just a quarter to

92
00:04:32,860 --> 00:04:37,840
reboot warm reboot of the system so this

93
00:04:35,560 --> 00:04:40,630
was what the malicious user used to use

94
00:04:37,840 --> 00:04:42,280
or some time ago by but notice it simply

95
00:04:40,630 --> 00:04:43,630
by rebooting but using some kind of

96
00:04:42,280 --> 00:04:46,630
malicious things in those times

97
00:04:43,630 --> 00:04:51,100
therefore it's not weird that we also

98
00:04:46,630 --> 00:04:53,169
expect to see similar thing in in new

99
00:04:51,100 --> 00:04:55,090
operating system so the whole idea is

100
00:04:53,169 --> 00:04:57,880
like I said living off the land binaries

101
00:04:55,090 --> 00:05:00,010
and if we can use sign binaries or

102
00:04:57,880 --> 00:05:03,550
misuse them the better it is because we

103
00:05:00,010 --> 00:05:05,919
think that the sign Microsoft binary is

104
00:05:03,550 --> 00:05:09,310
illegitimate but they often have some

105
00:05:05,919 --> 00:05:12,450
kind of unknown or unwanted side effects

106
00:05:09,310 --> 00:05:15,360
so what we are talking about is mostly

107
00:05:12,450 --> 00:05:19,570
things such as PowerShell or command

108
00:05:15,360 --> 00:05:22,840
execution mode scripting interpreter

109
00:05:19,570 --> 00:05:24,490
some of the other utilities which are

110
00:05:22,840 --> 00:05:26,710
present by default and they can be used

111
00:05:24,490 --> 00:05:28,930
for various things such as downloading

112
00:05:26,710 --> 00:05:32,020
all the malicious code executing the

113
00:05:28,930 --> 00:05:34,120
malicious code by passing by various

114
00:05:32,020 --> 00:05:36,070
whitelisting mechanisms such as the ones

115
00:05:34,120 --> 00:05:39,310
that are built in Windows or not user

116
00:05:36,070 --> 00:05:41,620
account control bypass adding new users

117
00:05:39,310 --> 00:05:43,990
and so on so everything that can be done

118
00:05:41,620 --> 00:05:44,820
by a system administrator using those

119
00:05:43,990 --> 00:05:48,650
alleged

120
00:05:44,820 --> 00:05:52,950
the tools can be done by by the bad guys

121
00:05:48,650 --> 00:05:55,080
it's worth mentioning that we can think

122
00:05:52,950 --> 00:05:57,900
of this living of the land Byner is not

123
00:05:55,080 --> 00:06:00,090
only as Windows or Microsoft signed but

124
00:05:57,900 --> 00:06:02,789
almost any kind of sign binaries in fact

125
00:06:00,090 --> 00:06:05,359
you have manufacturers of laptops and

126
00:06:02,790 --> 00:06:08,550
they often installed their own

127
00:06:05,360 --> 00:06:10,710
applications drivers that are used for

128
00:06:08,550 --> 00:06:13,620
the particular computer and that can

129
00:06:10,710 --> 00:06:15,900
also also be amused in fact there was

130
00:06:13,620 --> 00:06:18,060
recently a case I think that was it was

131
00:06:15,900 --> 00:06:19,620
I think it's one of the manufacturer who

132
00:06:18,060 --> 00:06:22,020
used

133
00:06:19,620 --> 00:06:24,360
WinZip or are with a different name

134
00:06:22,020 --> 00:06:28,620
scientists and with its own so even if

135
00:06:24,360 --> 00:06:30,900
the rod was not installed on in Windows

136
00:06:28,620 --> 00:06:33,840
by default on that particular model on

137
00:06:30,900 --> 00:06:36,390
their particular vendor systems you can

138
00:06:33,840 --> 00:06:38,570
always depend on that executable being

139
00:06:36,390 --> 00:06:41,599
present so that can be used for some

140
00:06:38,570 --> 00:06:44,640
illegitimate purposes of course with

141
00:06:41,600 --> 00:06:47,280
living of the land boundaries you can

142
00:06:44,640 --> 00:06:49,469
also have a pair of that works very well

143
00:06:47,280 --> 00:06:51,150
with some of the legitimate websites

144
00:06:49,470 --> 00:06:53,610
which can be used to either download

145
00:06:51,150 --> 00:06:59,340
malicious code or upload the data if

146
00:06:53,610 --> 00:07:03,270
that the attackers target is to expect

147
00:06:59,340 --> 00:07:05,099
security data so github is of course a

148
00:07:03,270 --> 00:07:07,169
repository that's used for the source

149
00:07:05,100 --> 00:07:08,970
code for a lot of the open source and

150
00:07:07,170 --> 00:07:10,650
even closed source product but there's

151
00:07:08,970 --> 00:07:13,860
nothing to say that the malicious code

152
00:07:10,650 --> 00:07:16,560
cannot be hosted or even the legitimate

153
00:07:13,860 --> 00:07:18,390
code again can be misused by downloading

154
00:07:16,560 --> 00:07:19,770
it and running it in memory from github

155
00:07:18,390 --> 00:07:21,539
and we'll see that in some of the

156
00:07:19,770 --> 00:07:23,669
examples then of course some of you on

157
00:07:21,540 --> 00:07:26,550
web service Google Drive everything that

158
00:07:23,670 --> 00:07:29,550
you expect from the ordinary users to

159
00:07:26,550 --> 00:07:32,070
use in a day to day operation this is

160
00:07:29,550 --> 00:07:34,650
what's actually used by the attacker to

161
00:07:32,070 --> 00:07:36,570
try to hide their own activity so if you

162
00:07:34,650 --> 00:07:38,520
have a network administrator and they

163
00:07:36,570 --> 00:07:40,170
look at the network activity logs it

164
00:07:38,520 --> 00:07:42,299
would be very difficult for them to

165
00:07:40,170 --> 00:07:44,850
distinguish which are the legitimate

166
00:07:42,300 --> 00:07:47,940
operations legitimate users and which

167
00:07:44,850 --> 00:07:49,740
are the illegitimate because on the

168
00:07:47,940 --> 00:07:51,150
first when you look at it it there are

169
00:07:49,740 --> 00:07:53,520
no there are no differences between

170
00:07:51,150 --> 00:07:54,929
there's no like a normal is that you can

171
00:07:53,520 --> 00:07:56,969
point to point to

172
00:07:54,930 --> 00:07:59,070
if you want to know a little bit more

173
00:07:56,970 --> 00:08:01,740
about this idea of living of the land by

174
00:07:59,070 --> 00:08:04,620
Nuri's I would suggest you to look at

175
00:08:01,740 --> 00:08:07,350
the two things one of these the ism is

176
00:08:04,620 --> 00:08:10,770
my Track Attack framework which stands

177
00:08:07,350 --> 00:08:12,900
for adversarial tactics and techniques a

178
00:08:10,770 --> 00:08:16,198
common knowledge it's a database of

179
00:08:12,900 --> 00:08:19,049
various tactics tools and techniques and

180
00:08:16,199 --> 00:08:21,810
even groups which you can recognize by

181
00:08:19,050 --> 00:08:23,699
using certain set of tools and and every

182
00:08:21,810 --> 00:08:25,530
tactic has its own number so when you

183
00:08:23,699 --> 00:08:27,270
find some kind of system evasion you can

184
00:08:25,530 --> 00:08:30,299
refer to a particular tactic it's very

185
00:08:27,270 --> 00:08:32,728
useful and then there's there's this law

186
00:08:30,300 --> 00:08:36,740
pass project which is a living of the

187
00:08:32,729 --> 00:08:39,330
land boundaries project where where this

188
00:08:36,740 --> 00:08:43,529
researcher author Moore who basically

189
00:08:39,330 --> 00:08:47,130
maintains this repository on github puts

190
00:08:43,529 --> 00:08:50,130
all the new executables that can be

191
00:08:47,130 --> 00:08:53,550
misused but also how you can misuse them

192
00:08:50,130 --> 00:08:55,350
so it's a it's a very useful project so

193
00:08:53,550 --> 00:08:57,810
I'll talk a little bit about what kind

194
00:08:55,350 --> 00:09:00,330
of data source I've been using in last

195
00:08:57,810 --> 00:09:06,209
few weeks or a couple of months maybe

196
00:09:00,330 --> 00:09:08,459
even to try to see whether this idea of

197
00:09:06,209 --> 00:09:10,800
blaming of the land boundaries is in

198
00:09:08,459 --> 00:09:13,319
fact true within all of the users that

199
00:09:10,800 --> 00:09:15,959
are using system of the Cisco security

200
00:09:13,320 --> 00:09:18,570
products so what we have is something

201
00:09:15,959 --> 00:09:20,760
called tip which is probably just short

202
00:09:18,570 --> 00:09:24,000
for threat intelligence platform and

203
00:09:20,760 --> 00:09:27,089
it's basically a Hadoop file system and

204
00:09:24,000 --> 00:09:29,430
we with resort with restore most of the

205
00:09:27,089 --> 00:09:31,920
day time in park a file format where we

206
00:09:29,430 --> 00:09:33,719
we collect telemetry from various

207
00:09:31,920 --> 00:09:35,459
Cisco's product and I was particularly

208
00:09:33,720 --> 00:09:38,600
interested in something that's called

209
00:09:35,459 --> 00:09:41,069
Cisco arm for endpoints which is a

210
00:09:38,600 --> 00:09:45,300
advanced model protection for endpoints

211
00:09:41,070 --> 00:09:48,320
where it's it besides of detecting

212
00:09:45,300 --> 00:09:51,180
malicious code outright it's also logs

213
00:09:48,320 --> 00:09:54,450
command lines which are executed on

214
00:09:51,180 --> 00:09:56,099
systems that are using or installed

215
00:09:54,450 --> 00:09:59,160
having installed this product so the

216
00:09:56,100 --> 00:10:00,930
idea is that antivirus software on

217
00:09:59,160 --> 00:10:02,550
tomorrow won't be able to prevent

218
00:10:00,930 --> 00:10:04,800
everything that comes into the

219
00:10:02,550 --> 00:10:06,750
organization so when you realize that

220
00:10:04,800 --> 00:10:08,400
something going on you can go back in

221
00:10:06,750 --> 00:10:11,040
time in your console

222
00:10:08,400 --> 00:10:13,350
and so from from then on you can see

223
00:10:11,040 --> 00:10:17,189
exactly what happened by investigating

224
00:10:13,350 --> 00:10:20,420
this sort of line of command line

225
00:10:17,190 --> 00:10:24,180
execution path so we don't only store

226
00:10:20,420 --> 00:10:27,990
command line execution command lines

227
00:10:24,180 --> 00:10:31,500
into this big data Lake or Data Platform

228
00:10:27,990 --> 00:10:36,480
we also look at the DNS requests so we

229
00:10:31,500 --> 00:10:38,820
have a large and set of DNS requests

230
00:10:36,480 --> 00:10:41,130
because we have one of the DNS resolvers

231
00:10:38,820 --> 00:10:44,550
which was previously owned by Open DNS

232
00:10:41,130 --> 00:10:47,010
we have about 150 billion DNS requests

233
00:10:44,550 --> 00:10:48,870
to investigate every day so it's quite a

234
00:10:47,010 --> 00:10:50,520
large set of data we have some other

235
00:10:48,870 --> 00:10:52,980
various telemetry from intrusion

236
00:10:50,520 --> 00:10:55,020
prevention systems from Network

237
00:10:52,980 --> 00:10:55,670
firewalls of course Cisco is famous for

238
00:10:55,020 --> 00:10:58,620
that

239
00:10:55,670 --> 00:11:01,740
so everything this kind of allows us to

240
00:10:58,620 --> 00:11:04,680
do but in order to have queries that

241
00:11:01,740 --> 00:11:07,350
will last minutes or hours rather than

242
00:11:04,680 --> 00:11:09,839
days or weeks you need to have a pretty

243
00:11:07,350 --> 00:11:11,490
good platform a pretty good idea of what

244
00:11:09,839 --> 00:11:14,310
you want to look how you store the data

245
00:11:11,490 --> 00:11:17,459
and it's big cluster machines that

246
00:11:14,310 --> 00:11:19,410
allows you to allows us to investigate

247
00:11:17,459 --> 00:11:23,069
these command line actions this is just

248
00:11:19,410 --> 00:11:25,199
the idea of shows the idea for example

249
00:11:23,070 --> 00:11:28,380
if you get an email and outlook is

250
00:11:25,200 --> 00:11:30,360
running out it will create the file so

251
00:11:28,380 --> 00:11:32,640
as soon as the outlook creates a file we

252
00:11:30,360 --> 00:11:35,190
will get or the administrator will get

253
00:11:32,640 --> 00:11:37,980
notified that the outlook has created a

254
00:11:35,190 --> 00:11:40,650
new file so that farmers can be named

255
00:11:37,980 --> 00:11:42,810
photo dot zip and if you explorer eggs

256
00:11:40,650 --> 00:11:46,350
they extract it and run it you could see

257
00:11:42,810 --> 00:11:48,689
that photo exhibited and then photo

258
00:11:46,350 --> 00:11:50,760
execute photo dot eggs they can contact

259
00:11:48,690 --> 00:11:53,220
the website or you can drop another file

260
00:11:50,760 --> 00:11:55,170
or you can create some kind of system

261
00:11:53,220 --> 00:11:57,300
change and everything that can be seen

262
00:11:55,170 --> 00:12:00,540
by the administrator some of it can also

263
00:11:57,300 --> 00:12:02,760
see by our own team and although the

264
00:12:00,540 --> 00:12:06,300
data is very much anonymized so I I

265
00:12:02,760 --> 00:12:08,880
don't see who that is on large scale I

266
00:12:06,300 --> 00:12:12,930
can basically look at at those ten

267
00:12:08,880 --> 00:12:15,420
billion command the invocations on a

268
00:12:12,930 --> 00:12:18,449
daily basis so quite a lot quite a large

269
00:12:15,420 --> 00:12:20,339
data set and here's my kind of moralized

270
00:12:18,450 --> 00:12:23,430
hunting process every day I would run

271
00:12:20,339 --> 00:12:26,190
the certain queries in in in Hadoop

272
00:12:23,430 --> 00:12:28,020
using map MapReduce jobs and so I would

273
00:12:26,190 --> 00:12:29,670
distill that ten billions because that

274
00:12:28,020 --> 00:12:31,560
would be impossible for me to look I

275
00:12:29,670 --> 00:12:34,050
would look for some kind of interesting

276
00:12:31,560 --> 00:12:36,030
stuff and then I would look and look and

277
00:12:34,050 --> 00:12:38,520
look and look alike and hopefully at the

278
00:12:36,030 --> 00:12:41,130
end they'll be proof for me because I'll

279
00:12:38,520 --> 00:12:43,319
see really what happened and whether I

280
00:12:41,130 --> 00:12:46,740
can confirm that the Windows binaries

281
00:12:43,320 --> 00:12:48,600
are used or misused in a way so some of

282
00:12:46,740 --> 00:12:50,010
the hunting tools I have is the SPARC

283
00:12:48,600 --> 00:12:53,040
framework that allows you to run

284
00:12:50,010 --> 00:12:55,439
MapReduce job quickly and I think such

285
00:12:53,040 --> 00:12:59,420
as Python spark or PI spark and spark

286
00:12:55,440 --> 00:13:03,300
SQL which really allows you to

287
00:12:59,420 --> 00:13:05,520
declaratively specify what kind of data

288
00:13:03,300 --> 00:13:08,609
I'm interested which data I want to

289
00:13:05,520 --> 00:13:11,819
extract from all of the logs I have so

290
00:13:08,610 --> 00:13:14,130
this is just an example in you know in

291
00:13:11,820 --> 00:13:17,520
my case I have a whole command line I

292
00:13:14,130 --> 00:13:23,250
also have a unique machine ID I have a

293
00:13:17,520 --> 00:13:25,470
unique organizational ID I have files or

294
00:13:23,250 --> 00:13:28,170
check the cryptographic shark check sums

295
00:13:25,470 --> 00:13:30,660
of the actual file that got executed and

296
00:13:28,170 --> 00:13:33,900
its parent so I can create the store

297
00:13:30,660 --> 00:13:36,810
chain of parent child and I also have

298
00:13:33,900 --> 00:13:39,569
the full command line so our arc V is

299
00:13:36,810 --> 00:13:42,089
the argument array of all the arguments

300
00:13:39,570 --> 00:13:44,100
that are added to the particular group

301
00:13:42,089 --> 00:13:45,990
so now now that I have this when I run

302
00:13:44,100 --> 00:13:48,959
it every day I distilled that data to

303
00:13:45,990 --> 00:13:51,510
about four million unique kind of

304
00:13:48,959 --> 00:13:53,189
records for for the day and from then on

305
00:13:51,510 --> 00:13:55,020
I start doing where all sorts of grab

306
00:13:53,190 --> 00:13:58,290
grab grab grab grab grab grab sort

307
00:13:55,020 --> 00:13:59,760
unique to kind of eliminate things so

308
00:13:58,290 --> 00:14:02,160
everything is what I've done is very

309
00:13:59,760 --> 00:14:03,959
manual everything can be automated but

310
00:14:02,160 --> 00:14:06,089
for the purpose of this presentation I

311
00:14:03,959 --> 00:14:08,609
kind of use it like that because I don't

312
00:14:06,089 --> 00:14:10,800
know I just just felt like I think is in

313
00:14:08,610 --> 00:14:15,630
control and I can change these queries

314
00:14:10,800 --> 00:14:17,250
on on on the fly because if I if I see

315
00:14:15,630 --> 00:14:19,050
that I'm getting too many of the certain

316
00:14:17,250 --> 00:14:21,420
types of results then I can simply

317
00:14:19,050 --> 00:14:22,529
include them by using grep minus 3 which

318
00:14:21,420 --> 00:14:25,890
is just say I don't want these

319
00:14:22,529 --> 00:14:27,199
particular ones so I talked about I

320
00:14:25,890 --> 00:14:29,430
don't know about 20 different

321
00:14:27,199 --> 00:14:34,050
executables which are regularly

322
00:14:29,430 --> 00:14:37,109
installed on Windows to see how many of

323
00:14:34,050 --> 00:14:39,120
them are executed and how many of them

324
00:14:37,110 --> 00:14:40,500
hopefully I can confirm they were

325
00:14:39,120 --> 00:14:42,990
executed with some kind of malicious

326
00:14:40,500 --> 00:14:45,329
purpose or we have attack up the real

327
00:14:42,990 --> 00:14:47,730
attacker bit behind them I won't go into

328
00:14:45,329 --> 00:14:49,410
every single executable and how how it's

329
00:14:47,730 --> 00:14:51,600
misused because they'll be too boring

330
00:14:49,410 --> 00:14:53,699
but I would refer you to this living of

331
00:14:51,600 --> 00:14:55,380
the land project which kind of has the

332
00:14:53,699 --> 00:14:58,650
cross-reference between those binaries

333
00:14:55,380 --> 00:15:02,790
and how can they misuse so I'll talk a

334
00:14:58,650 --> 00:15:05,910
little bit about findings so first of

335
00:15:02,790 --> 00:15:07,740
all in most of the attacks I found and

336
00:15:05,910 --> 00:15:10,740
it was also very convenient for me

337
00:15:07,740 --> 00:15:14,420
somehow sooner or later you will reach

338
00:15:10,740 --> 00:15:18,480
the attacker or malware using PowerShell

339
00:15:14,420 --> 00:15:20,910
PowerShell is installed by default it

340
00:15:18,480 --> 00:15:23,640
can be disabled unfortunately there are

341
00:15:20,910 --> 00:15:26,969
quite a lot of the legitimate tools and

342
00:15:23,640 --> 00:15:29,550
frameworks which are also using it so

343
00:15:26,970 --> 00:15:31,680
it's a bit difficult you you can also

344
00:15:29,550 --> 00:15:33,030
set a group policy where you can say

345
00:15:31,680 --> 00:15:36,270
only signed

346
00:15:33,030 --> 00:15:38,010
scripts can be run good thing for

347
00:15:36,270 --> 00:15:40,680
PowerShell attackers is that you can

348
00:15:38,010 --> 00:15:43,500
simply use a command line bypass policy

349
00:15:40,680 --> 00:15:46,560
to bypass that policy and you can you

350
00:15:43,500 --> 00:15:49,410
can immediately run the malicious code

351
00:15:46,560 --> 00:15:53,119
so there are so many different modules

352
00:15:49,410 --> 00:15:56,579
that can be used that are also using in

353
00:15:53,120 --> 00:15:59,010
legitimate purposes and basically it's a

354
00:15:56,579 --> 00:16:01,770
very powerful framework which sits on

355
00:15:59,010 --> 00:16:05,300
top of the dotnet framework that allows

356
00:16:01,770 --> 00:16:08,400
you to create scripts and in fact it was

357
00:16:05,300 --> 00:16:11,010
its initial use from the point of view

358
00:16:08,400 --> 00:16:13,199
of Microsoft was to allow system

359
00:16:11,010 --> 00:16:14,640
administrators to run those one line

360
00:16:13,199 --> 00:16:17,219
code to do a little bit of

361
00:16:14,640 --> 00:16:18,780
administration's they didn't even I

362
00:16:17,220 --> 00:16:21,630
don't think that Microsoft ever thought

363
00:16:18,780 --> 00:16:23,910
that you will have scripts with tens of

364
00:16:21,630 --> 00:16:27,209
thousands of lines of code which will

365
00:16:23,910 --> 00:16:30,390
allow malicious attackers to load code

366
00:16:27,209 --> 00:16:33,630
without actually running it or using

367
00:16:30,390 --> 00:16:35,490
some of the standard Windows api's so

368
00:16:33,630 --> 00:16:38,760
you can obfuscate code you could there

369
00:16:35,490 --> 00:16:41,640
there is also very annoying flexibility

370
00:16:38,760 --> 00:16:43,610
with command line options so for example

371
00:16:41,640 --> 00:16:48,170
if you have a command of outline or

372
00:16:43,610 --> 00:16:50,570
that should be - encoded command which

373
00:16:48,170 --> 00:16:53,959
allows you to set the parameter which is

374
00:16:50,570 --> 00:16:55,279
the call it base64 and which will be

375
00:16:53,959 --> 00:16:59,329
interpreted by the powershell

376
00:16:55,279 --> 00:17:03,500
interpreter you can also specify - ank -

377
00:16:59,329 --> 00:17:06,129
E - encode - whatever because PowerShell

378
00:17:03,500 --> 00:17:10,429
is so clever that it will understand

379
00:17:06,130 --> 00:17:14,059
what you wanted so it's for me it was a

380
00:17:10,429 --> 00:17:15,860
bit tricky to say - er I know 1 over 1

381
00:17:14,059 --> 00:17:18,678
minus e and minus this and minus this

382
00:17:15,859 --> 00:17:22,458
and and but it's it's very difficult

383
00:17:18,679 --> 00:17:24,530
from all the noise to find the things

384
00:17:22,459 --> 00:17:26,120
that I'm interested in so I looked I

385
00:17:24,530 --> 00:17:29,870
looked at the kind of partial

386
00:17:26,119 --> 00:17:32,209
invocations that may be interesting or

387
00:17:29,870 --> 00:17:37,280
malicious the ones that will in the

388
00:17:32,210 --> 00:17:40,490
command line have strings such as i IE x

389
00:17:37,280 --> 00:17:43,370
which is in vocalist accusin any invoke

390
00:17:40,490 --> 00:17:46,400
any bypass or hidden so i look at those

391
00:17:43,370 --> 00:17:50,178
particular for with PowerShell and once

392
00:17:46,400 --> 00:17:52,400
when i had that list of execute

393
00:17:50,179 --> 00:17:56,000
executions or lists list of PowerShell

394
00:17:52,400 --> 00:17:58,010
starting about 2 million every day then

395
00:17:56,000 --> 00:18:00,500
and and i could find those more

396
00:17:58,010 --> 00:18:03,799
interesting ones and then I realized

397
00:18:00,500 --> 00:18:06,500
that about one in a thousand of the ones

398
00:18:03,799 --> 00:18:09,650
that I thought that our suspicious are

399
00:18:06,500 --> 00:18:11,990
actually probably probably malicious or

400
00:18:09,650 --> 00:18:15,260
there is some kind of actor behind it or

401
00:18:11,990 --> 00:18:17,600
a red team behind it so it's still worth

402
00:18:15,260 --> 00:18:19,549
to then think if you are working in a

403
00:18:17,600 --> 00:18:22,730
security operation center that although

404
00:18:19,549 --> 00:18:25,610
those wineries are abused the majority

405
00:18:22,730 --> 00:18:27,799
of the command line you will from

406
00:18:25,610 --> 00:18:31,149
PowerShell or in fact any of the windows

407
00:18:27,799 --> 00:18:34,309
executables you see will be still

408
00:18:31,150 --> 00:18:38,120
legitimate so yes they're being misused

409
00:18:34,309 --> 00:18:41,899
but a lot of it is not however if you

410
00:18:38,120 --> 00:18:44,299
also have living of the land binary and

411
00:18:41,900 --> 00:18:46,190
you see some kind of URL in the command

412
00:18:44,299 --> 00:18:49,820
line code then there's a much higher

413
00:18:46,190 --> 00:18:52,309
probability that this invocation was in

414
00:18:49,820 --> 00:18:54,500
in fact malicious so this is what I kind

415
00:18:52,309 --> 00:18:55,820
of tried to use especially even if there

416
00:18:54,500 --> 00:18:59,510
is like an external

417
00:18:55,820 --> 00:19:02,149
numeric IP address most likely a bad

418
00:18:59,510 --> 00:19:05,180
dotnet domain top-level domain dot EU

419
00:19:02,150 --> 00:19:07,610
top-level domains most likely so these

420
00:19:05,180 --> 00:19:09,410
are just like a guidelines to if you're

421
00:19:07,610 --> 00:19:11,840
working in a security department of any

422
00:19:09,410 --> 00:19:16,580
company that you can basically try to

423
00:19:11,840 --> 00:19:20,629
monitor and PowerShell by itself we

424
00:19:16,580 --> 00:19:23,810
although it's very useful for the

425
00:19:20,630 --> 00:19:28,070
attackers wouldn't be as useful if it

426
00:19:23,810 --> 00:19:31,310
wasn't for a large number of PowerShell

427
00:19:28,070 --> 00:19:33,620
frameworks which are used and have been

428
00:19:31,310 --> 00:19:36,560
seen in this kind of little research

429
00:19:33,620 --> 00:19:38,719
I've done starting from the most

430
00:19:36,560 --> 00:19:43,100
commonly seen reflective DLL loader

431
00:19:38,720 --> 00:19:46,130
which allows you to essentially take any

432
00:19:43,100 --> 00:19:47,810
executable or any DLL and loads it in

433
00:19:46,130 --> 00:19:50,360
the process memory either a PowerShell

434
00:19:47,810 --> 00:19:53,240
dot exe or some other process without

435
00:19:50,360 --> 00:19:56,090
using the standard load library get

436
00:19:53,240 --> 00:19:58,250
procedure address API calls which may be

437
00:19:56,090 --> 00:20:00,949
intercepted and detected by some of the

438
00:19:58,250 --> 00:20:04,390
endpoint security software and so

439
00:20:00,950 --> 00:20:07,070
starting from there there are like many

440
00:20:04,390 --> 00:20:10,970
almost legitimate tools available in

441
00:20:07,070 --> 00:20:12,590
github most of them which are then used

442
00:20:10,970 --> 00:20:15,680
by PowerShell so what happens with the

443
00:20:12,590 --> 00:20:18,620
PowerShell you have this invoke web

444
00:20:15,680 --> 00:20:21,710
request so when you invoke web request

445
00:20:18,620 --> 00:20:24,500
it downloads the actual code and you can

446
00:20:21,710 --> 00:20:27,080
from then on you can say work is invoke

447
00:20:24,500 --> 00:20:28,550
execution of the code that you download

448
00:20:27,080 --> 00:20:32,030
its own in fact you don't have anything

449
00:20:28,550 --> 00:20:34,100
on the disk so anti-malware or classic

450
00:20:32,030 --> 00:20:36,590
antimatter it would have difficult time

451
00:20:34,100 --> 00:20:38,510
to detect this code but you have

452
00:20:36,590 --> 00:20:42,439
everything in memory so this is the sort

453
00:20:38,510 --> 00:20:45,440
of idea of memory only or five so-called

454
00:20:42,440 --> 00:20:47,300
stylus type or malware the other thing

455
00:20:45,440 --> 00:20:50,840
that I've realized that there are a lot

456
00:20:47,300 --> 00:20:53,780
of companies using various red teaming

457
00:20:50,840 --> 00:20:56,480
or adversary adversary emulation

458
00:20:53,780 --> 00:20:58,850
frameworks such as red canary atomic

459
00:20:56,480 --> 00:21:00,860
tests or something called simulate which

460
00:20:58,850 --> 00:21:02,780
I didn't know before but now now I know

461
00:21:00,860 --> 00:21:05,899
that it's used as a kind of legitimate

462
00:21:02,780 --> 00:21:08,460
tool to test that your internal team can

463
00:21:05,900 --> 00:21:11,669
see that that there's something

464
00:21:08,460 --> 00:21:16,799
bad going on so here's just an example

465
00:21:11,669 --> 00:21:18,480
of one of the kind of custom based let's

466
00:21:16,799 --> 00:21:21,690
say me me cats is one of the tools

467
00:21:18,480 --> 00:21:25,350
that's often used to steal credentials

468
00:21:21,690 --> 00:21:27,480
from memory so this is an example of the

469
00:21:25,350 --> 00:21:29,519
PowerShell code where somebody was

470
00:21:27,480 --> 00:21:31,559
simply just obviously using a red

471
00:21:29,519 --> 00:21:33,539
teaming and he said you shouldn't run

472
00:21:31,559 --> 00:21:35,639
invoke mimikatz without express written

473
00:21:33,539 --> 00:21:38,100
consent from client that will be written

474
00:21:35,639 --> 00:21:40,439
on the screen and then they said the

475
00:21:38,100 --> 00:21:42,990
benjamin bill Delpy who actually created

476
00:21:40,440 --> 00:21:47,100
mimic at caesar is a funny guy alright

477
00:21:42,990 --> 00:21:53,220
fair enough so so a lot of these tools

478
00:21:47,100 --> 00:21:55,080
on on the PowerShell so I'm just

479
00:21:53,220 --> 00:21:56,940
mentioned few other tools that are more

480
00:21:55,080 --> 00:21:58,918
likely to be malicious or or at least

481
00:21:56,940 --> 00:22:00,749
they are good for me because I can see

482
00:21:58,919 --> 00:22:03,960
that they've been invoked with the URL

483
00:22:00,749 --> 00:22:07,230
and then I can investigate URL in my

484
00:22:03,960 --> 00:22:10,409
case if the powershell is invoked with

485
00:22:07,230 --> 00:22:12,600
the actual powershell script file but

486
00:22:10,409 --> 00:22:16,350
least my software we will not allow me

487
00:22:12,600 --> 00:22:18,059
to see what that file is so I only know

488
00:22:16,350 --> 00:22:20,730
that there was a certain file name so

489
00:22:18,059 --> 00:22:22,799
with some of the other programs I wanted

490
00:22:20,730 --> 00:22:26,730
to investigate I had more difficulty

491
00:22:22,799 --> 00:22:29,879
into realizing which code is executing

492
00:22:26,730 --> 00:22:32,970
at which code is is malicious so four of

493
00:22:29,879 --> 00:22:34,649
these if combined with URL almost

494
00:22:32,970 --> 00:22:37,889
certainly there is some kind of

495
00:22:34,649 --> 00:22:39,899
malicious code running and so we have

496
00:22:37,889 --> 00:22:41,820
some other limitations that which I

497
00:22:39,899 --> 00:22:45,289
mentioned some other executable such as

498
00:22:41,820 --> 00:22:47,668
sea shark compiler that's built in or

499
00:22:45,289 --> 00:22:50,039
Microsoft equivalent to make called

500
00:22:47,669 --> 00:22:51,899
msbuild I only get the file name that

501
00:22:50,039 --> 00:22:53,789
was used as a input so I know that they

502
00:22:51,899 --> 00:22:56,959
are misused but I can't really measure

503
00:22:53,789 --> 00:23:00,330
of how often they they have been misused

504
00:22:56,960 --> 00:23:02,659
so now I'll go into few of the case

505
00:23:00,330 --> 00:23:04,710
studies that were a little bit more

506
00:23:02,659 --> 00:23:07,399
interesting I guess which I stumbled

507
00:23:04,710 --> 00:23:10,320
upon by investigating all these logs

508
00:23:07,399 --> 00:23:13,289
first of all first of them is a coin

509
00:23:10,320 --> 00:23:15,119
miner I really was there are so many of

510
00:23:13,289 --> 00:23:17,820
them I do that I didn't really want to

511
00:23:15,119 --> 00:23:20,189
name or he didn't really bother to name

512
00:23:17,820 --> 00:23:21,870
the campaign when they looked for it of

513
00:23:20,190 --> 00:23:24,960
course the idea of

514
00:23:21,870 --> 00:23:27,209
coalminers which are the ransomware of

515
00:23:24,960 --> 00:23:29,640
the new day is that it makes some money

516
00:23:27,210 --> 00:23:31,799
for for the actual attackers and there

517
00:23:29,640 --> 00:23:35,370
are like from script kiddies to very

518
00:23:31,799 --> 00:23:39,029
organized groups I stumbled upon a group

519
00:23:35,370 --> 00:23:41,668
that's it's called nugget phantom this a

520
00:23:39,029 --> 00:23:44,130
Chinese group that uses all sorts of

521
00:23:41,669 --> 00:23:47,130
difficult tricks to hide its presence on

522
00:23:44,130 --> 00:23:48,900
the system and these guys were I also

523
00:23:47,130 --> 00:23:51,240
managed to find them but this is a

524
00:23:48,900 --> 00:23:53,549
little bit simple cysts the simpler

525
00:23:51,240 --> 00:23:56,520
example again like I said I'm

526
00:23:53,549 --> 00:23:58,950
investigating command lines as they

527
00:23:56,520 --> 00:24:02,149
happen and I stumbled upon something

528
00:23:58,950 --> 00:24:05,159
that looks like there is a base64

529
00:24:02,149 --> 00:24:07,529
encoded command for PowerShell I decode

530
00:24:05,159 --> 00:24:10,649
it and then from then on I can see that

531
00:24:07,529 --> 00:24:13,289
something is trying to load or actually

532
00:24:10,649 --> 00:24:16,350
decompress a stream from memory that's

533
00:24:13,289 --> 00:24:18,629
been base64 encoded so once when it's

534
00:24:16,350 --> 00:24:20,699
encoded you can see that some of the

535
00:24:18,630 --> 00:24:23,700
code that you get from there is very

536
00:24:20,700 --> 00:24:26,190
much obfuscated and the code is not very

537
00:24:23,700 --> 00:24:28,890
easy to read so here here there is a

538
00:24:26,190 --> 00:24:31,590
special special module for PowerShell

539
00:24:28,890 --> 00:24:34,289
that's called invoke obfuscation and you

540
00:24:31,590 --> 00:24:36,990
can use it no man it as many times as

541
00:24:34,289 --> 00:24:38,899
you like and then the actual code will

542
00:24:36,990 --> 00:24:42,090
be enveloped in this sort of gibberish

543
00:24:38,899 --> 00:24:43,889
not understandable not properly readable

544
00:24:42,090 --> 00:24:45,899
code so you only have to be able to

545
00:24:43,890 --> 00:24:48,029
strip this code first and in this case

546
00:24:45,899 --> 00:24:51,239
of this particular corn miner there were

547
00:24:48,029 --> 00:24:53,520
maybe five or six different levels so

548
00:24:51,240 --> 00:24:57,240
here's another level and then finally

549
00:24:53,520 --> 00:24:58,980
when I do Q skate the be obfuscated all

550
00:24:57,240 --> 00:25:01,110
the code you could then get to the

551
00:24:58,980 --> 00:25:02,880
actual code of the coin miner

552
00:25:01,110 --> 00:25:05,699
and in this case you could see that it

553
00:25:02,880 --> 00:25:08,220
downloads the string from a particular

554
00:25:05,700 --> 00:25:09,779
location parses that string and then

555
00:25:08,220 --> 00:25:11,730
based on the content of that particular

556
00:25:09,779 --> 00:25:14,159
string it'll try to steal the

557
00:25:11,730 --> 00:25:16,049
credentials from the local machine using

558
00:25:14,159 --> 00:25:18,000
all these legitimate tools that I

559
00:25:16,049 --> 00:25:21,840
mentioned the Empire project that's used

560
00:25:18,000 --> 00:25:24,289
by some of the red teams a Kevin Roberts

561
00:25:21,840 --> 00:25:27,120
Roberts on another security researcher

562
00:25:24,289 --> 00:25:29,970
has something called invoked the hash

563
00:25:27,120 --> 00:25:32,100
which is again used to try to steal the

564
00:25:29,970 --> 00:25:33,930
hash of a password and once when that's

565
00:25:32,100 --> 00:25:37,649
done

566
00:25:33,930 --> 00:25:39,690
then the coin miner will try to start to

567
00:25:37,650 --> 00:25:42,000
spread around the network that that's

568
00:25:39,690 --> 00:25:46,350
infected and based on based on that

569
00:25:42,000 --> 00:25:49,020
initial file if the the first parameter

570
00:25:46,350 --> 00:25:51,300
is one it will try to spread using

571
00:25:49,020 --> 00:25:55,220
windows management instrumentation and

572
00:25:51,300 --> 00:25:58,260
if it's too then it will try to use SMB

573
00:25:55,220 --> 00:26:00,840
spreading with stolen credentials so we

574
00:25:58,260 --> 00:26:03,900
here see that this is a coin miner or at

575
00:26:00,840 --> 00:26:06,000
least it's PowerShell part that tries to

576
00:26:03,900 --> 00:26:07,830
once when it's inside the network it

577
00:26:06,000 --> 00:26:10,260
tries to steal the credentials and then

578
00:26:07,830 --> 00:26:12,300
pivot around the network to infect other

579
00:26:10,260 --> 00:26:14,190
machine is therefore to increase its own

580
00:26:12,300 --> 00:26:16,370
mining pool and and have more

581
00:26:14,190 --> 00:26:18,750
probability to generate some

582
00:26:16,370 --> 00:26:21,360
cryptocurrency and most of the times it

583
00:26:18,750 --> 00:26:24,740
will be more narrow so finally the final

584
00:26:21,360 --> 00:26:28,290
executable which depending on the

585
00:26:24,740 --> 00:26:31,560
business of the operating system will be

586
00:26:28,290 --> 00:26:35,220
called something system 32 or systems 64

587
00:26:31,560 --> 00:26:37,860
is a variant of a free coin miner called

588
00:26:35,220 --> 00:26:40,200
an exome rig but it was changed so it

589
00:26:37,860 --> 00:26:42,810
also has a control center will be the

590
00:26:40,200 --> 00:26:45,420
idea that all the systems will connect

591
00:26:42,810 --> 00:26:47,070
to the console and then from the console

592
00:26:45,420 --> 00:26:51,030
you are able to give various

593
00:26:47,070 --> 00:26:53,370
instructions to the coin miner so that

594
00:26:51,030 --> 00:26:56,370
was the first case the second case is a

595
00:26:53,370 --> 00:26:59,419
cobalt strike which is another framework

596
00:26:56,370 --> 00:27:02,939
that's almost as often used as

597
00:26:59,420 --> 00:27:05,370
Metasploit for post compromised so once

598
00:27:02,940 --> 00:27:08,610
when we have systems running on and

599
00:27:05,370 --> 00:27:11,310
infected then in that case we'll have we

600
00:27:08,610 --> 00:27:14,000
can install this cobalt strike and then

601
00:27:11,310 --> 00:27:14,000
it's

602
00:27:14,110 --> 00:27:19,240
used for post exploitation techniques so

603
00:27:17,140 --> 00:27:22,720
in this case again we had a PowerShell

604
00:27:19,240 --> 00:27:26,680
at the beginning and that PowerShell had

605
00:27:22,720 --> 00:27:30,010
some base64 code that's basic support

606
00:27:26,680 --> 00:27:33,520
code will be decoded and then a new job

607
00:27:30,010 --> 00:27:36,430
will be created a new job which is an

608
00:27:33,520 --> 00:27:40,240
actual shellcode so binary so it

609
00:27:36,430 --> 00:27:42,970
allocates an area and memory clerk puts

610
00:27:40,240 --> 00:27:45,370
that decoded code in memory and then

611
00:27:42,970 --> 00:27:49,870
jumps to it and here we see like a

612
00:27:45,370 --> 00:27:51,969
standard x86 executable code the date

613
00:27:49,870 --> 00:27:54,850
the part in the middle is probably just

614
00:27:51,970 --> 00:27:57,040
the data and I I took a screenshot just

615
00:27:54,850 --> 00:27:58,830
to illustrate some of the strings that

616
00:27:57,040 --> 00:28:02,860
we see we see one one one one

617
00:27:58,830 --> 00:28:06,129
jQuery gjs we know that jQuery is one of

618
00:28:02,860 --> 00:28:09,909
the most popular JavaScript frameworks

619
00:28:06,130 --> 00:28:12,310
so libraries and almost any page on the

620
00:28:09,910 --> 00:28:16,230
web sooner or later will download jQuery

621
00:28:12,310 --> 00:28:20,980
and here in build down below we also see

622
00:28:16,230 --> 00:28:23,500
HTTP headers that that have two fields

623
00:28:20,980 --> 00:28:27,430
one is the refer that's called

624
00:28:23,500 --> 00:28:30,040
jquery.com and host called jQuery comm

625
00:28:27,430 --> 00:28:31,390
which is the legitimate website which

626
00:28:30,040 --> 00:28:36,700
hosts jQuery

627
00:28:31,390 --> 00:28:40,000
however this shell code uses like an IP

628
00:28:36,700 --> 00:28:43,660
address and sends a sense that modified

629
00:28:40,000 --> 00:28:47,890
HTTP request with those headers but when

630
00:28:43,660 --> 00:28:49,690
you look in some of the automated

631
00:28:47,890 --> 00:28:53,580
execution environment some of the send

632
00:28:49,690 --> 00:28:57,370
boxes you could see that it managed to

633
00:28:53,580 --> 00:29:02,590
fool some the DNS request resolver

634
00:28:57,370 --> 00:29:03,969
strong from those sand boxes so you

635
00:29:02,590 --> 00:29:06,939
could see that the domain is code

636
00:29:03,970 --> 00:29:09,670
jquery.com body IP address is one three

637
00:29:06,940 --> 00:29:12,430
four two or nine one seven six 24 which

638
00:29:09,670 --> 00:29:15,010
is the attackers address but the system

639
00:29:12,430 --> 00:29:17,110
still thinks it's a legitimate jQuery

640
00:29:15,010 --> 00:29:19,540
website so it's one of the techniques

641
00:29:17,110 --> 00:29:21,520
that's used to evade the detection in

642
00:29:19,540 --> 00:29:24,639
sandboxes this is taken from a different

643
00:29:21,520 --> 00:29:27,000
sandbox and again we see the descent box

644
00:29:24,640 --> 00:29:29,620
is thinking this is a legitimate website

645
00:29:27,000 --> 00:29:32,280
in fact it knows it's an IP address

646
00:29:29,620 --> 00:29:36,790
that's kind of not used but code

647
00:29:32,280 --> 00:29:40,090
jquery.com is legitimate so when I

648
00:29:36,790 --> 00:29:43,540
looked at what it is that's hosted on

649
00:29:40,090 --> 00:29:46,000
that IP address you could see that it's

650
00:29:43,540 --> 00:29:48,370
in fact starts with something that looks

651
00:29:46,000 --> 00:29:50,650
as a JavaScript and in fact is is a

652
00:29:48,370 --> 00:29:53,649
beginning of jQuery and then suddenly

653
00:29:50,650 --> 00:29:58,780
after this P equals in the third row we

654
00:29:53,650 --> 00:30:01,360
have a number of binary characters and

655
00:29:58,780 --> 00:30:03,899
then also at the end when the binaries

656
00:30:01,360 --> 00:30:06,879
characters characters end which is about

657
00:30:03,900 --> 00:30:07,720
300 kilobytes later we have the end of

658
00:30:06,880 --> 00:30:11,110
jQuery

659
00:30:07,720 --> 00:30:13,150
again idea here is that the file that's

660
00:30:11,110 --> 00:30:15,490
being downloaded start with legitimate

661
00:30:13,150 --> 00:30:17,650
code then you have the binary or

662
00:30:15,490 --> 00:30:19,930
something that's probably not right and

663
00:30:17,650 --> 00:30:21,910
then at the end if the anti-malware

664
00:30:19,930 --> 00:30:24,400
software is scanning top and tails with

665
00:30:21,910 --> 00:30:27,310
some sometimes happen it will then think

666
00:30:24,400 --> 00:30:30,610
it's a standard JavaScript code so when

667
00:30:27,310 --> 00:30:33,190
that was decoded in fact that holds the

668
00:30:30,610 --> 00:30:35,020
cobol strike beacon which is this sort

669
00:30:33,190 --> 00:30:39,490
of trojan that allows you to do all

670
00:30:35,020 --> 00:30:41,080
sorts of post equalization activities so

671
00:30:39,490 --> 00:30:42,190
in this case I really don't know who's

672
00:30:41,080 --> 00:30:45,179
behind it

673
00:30:42,190 --> 00:30:48,460
I can't do much more except to say

674
00:30:45,180 --> 00:30:52,390
compared to the coin miner people behind

675
00:30:48,460 --> 00:30:56,350
the coin miners this is a more skilled

676
00:30:52,390 --> 00:30:58,810
attacker behind behind the cobol strike

677
00:30:56,350 --> 00:31:02,199
because they take care of trying to hide

678
00:30:58,810 --> 00:31:03,639
their presence and try to hide the the

679
00:31:02,200 --> 00:31:06,700
fact that they compromised somebody's

680
00:31:03,640 --> 00:31:08,650
machine so we have a when I said

681
00:31:06,700 --> 00:31:11,710
regional it's not this is not an example

682
00:31:08,650 --> 00:31:15,040
from Serbia but it's it's an example

683
00:31:11,710 --> 00:31:17,290
from a country neighbouring I'm from

684
00:31:15,040 --> 00:31:21,760
Croatia so it's a neighbor country of

685
00:31:17,290 --> 00:31:24,580
Croatia and it started with with a Super

686
00:31:21,760 --> 00:31:29,560
Mario game installer or at least there

687
00:31:24,580 --> 00:31:31,629
is this sort of free version of Mario

688
00:31:29,560 --> 00:31:34,570
game that can be downloaded and many

689
00:31:31,630 --> 00:31:37,540
people like the Mario and this like a

690
00:31:34,570 --> 00:31:40,960
DOS emulated website that allows you to

691
00:31:37,540 --> 00:31:45,760
kind of download this page so somebody

692
00:31:40,960 --> 00:31:48,550
and this is in Slovenia downloaded this

693
00:31:45,760 --> 00:31:50,530
Super Mario installer they modified it

694
00:31:48,550 --> 00:31:53,290
to include some malicious components and

695
00:31:50,530 --> 00:31:56,980
somebody from a quite a large company in

696
00:31:53,290 --> 00:32:00,610
Slovenia downloaded this installer and

697
00:31:56,980 --> 00:32:02,890
and they they actually launched it so I

698
00:32:00,610 --> 00:32:04,479
could see some of the activities and in

699
00:32:02,890 --> 00:32:08,290
fact I wasn't able to retrieve that

700
00:32:04,480 --> 00:32:10,000
again you remember PowerShell code will

701
00:32:08,290 --> 00:32:11,950
sooner or later kind of happens in this

702
00:32:10,000 --> 00:32:14,620
sort of chain general infection so that

703
00:32:11,950 --> 00:32:15,850
the game installer was called Mario game

704
00:32:14,620 --> 00:32:19,750
installer dot exe

705
00:32:15,850 --> 00:32:22,270
I wasn't able to find it I thought I

706
00:32:19,750 --> 00:32:25,060
don't know where the attackers hosted

707
00:32:22,270 --> 00:32:27,400
this I wasn't able to find it Mario game

708
00:32:25,060 --> 00:32:30,220
dot exe which is the actual dropper for

709
00:32:27,400 --> 00:32:32,530
the rest of the components I found

710
00:32:30,220 --> 00:32:36,760
Mario dot exe because it's a copy of

711
00:32:32,530 --> 00:32:39,639
netcat for Windows so when the attacker

712
00:32:36,760 --> 00:32:42,190
is exfiltrating some of the date that

713
00:32:39,640 --> 00:32:44,920
they are using this Mario that exe to

714
00:32:42,190 --> 00:32:48,270
pipe that data to a remote site so

715
00:32:44,920 --> 00:32:51,040
they're using that for exfiltration and

716
00:32:48,270 --> 00:32:54,910
the other part with the exfiltration is

717
00:32:51,040 --> 00:32:57,310
they're using a gmail account which is

718
00:32:54,910 --> 00:32:59,950
there too to me every the hard-coded

719
00:32:57,310 --> 00:33:02,020
credentials so not not very clever on

720
00:32:59,950 --> 00:33:06,460
the attacker part because if it's their

721
00:33:02,020 --> 00:33:08,470
own account and it's a bit stupid but if

722
00:33:06,460 --> 00:33:10,960
it's even if it's not their own then the

723
00:33:08,470 --> 00:33:12,790
Gmail or Google can simply blacklist

724
00:33:10,960 --> 00:33:14,620
that email address and the whole

725
00:33:12,790 --> 00:33:18,070
operation is compromised because then

726
00:33:14,620 --> 00:33:20,379
you are not able to to accelerate the

727
00:33:18,070 --> 00:33:23,110
data so for them it would be much better

728
00:33:20,380 --> 00:33:24,790
if they had that email address and

729
00:33:23,110 --> 00:33:26,169
password somewhere in the cloud where

730
00:33:24,790 --> 00:33:27,639
they can change it under their control

731
00:33:26,170 --> 00:33:30,460
and then download it first

732
00:33:27,640 --> 00:33:33,670
before using them but nevertheless so we

733
00:33:30,460 --> 00:33:36,370
think this is the level of whoever this

734
00:33:33,670 --> 00:33:38,380
is doing is not very high so it's likely

735
00:33:36,370 --> 00:33:40,929
some kind of script Keeney level guy

736
00:33:38,380 --> 00:33:43,020
that downloaded quite a lot of the code

737
00:33:40,930 --> 00:33:45,840
from this github page or i

738
00:33:43,020 --> 00:33:49,020
so Ryan's and just modified it with

739
00:33:45,840 --> 00:33:51,810
their own little domain so here we have

740
00:33:49,020 --> 00:33:53,940
some of the domains magic light dot SASC

741
00:33:51,810 --> 00:33:55,950
where they downloaded those two power

742
00:33:53,940 --> 00:33:57,990
shells that actually are conducting the

743
00:33:55,950 --> 00:34:01,170
malicious activity and once when the

744
00:33:57,990 --> 00:34:03,210
malicious activities is conducted then

745
00:34:01,170 --> 00:34:05,130
we can also see that there actually have

746
00:34:03,210 --> 00:34:07,440
like hard-coded network credentials for

747
00:34:05,130 --> 00:34:10,110
Gmail and then they are sending with a

748
00:34:07,440 --> 00:34:13,080
subject that's a prickly cactus quack

749
00:34:10,110 --> 00:34:14,970
quack is the subject of the message for

750
00:34:13,080 --> 00:34:16,889
the attacker to actually read the emails

751
00:34:14,969 --> 00:34:17,580
or some of the data that's being

752
00:34:16,889 --> 00:34:22,440
retrieved

753
00:34:17,580 --> 00:34:25,049
so here again we'll see the staging

754
00:34:22,440 --> 00:34:28,950
script that basically sets up some of

755
00:34:25,050 --> 00:34:31,460
the the collect some of the data and

756
00:34:28,949 --> 00:34:36,389
save some of the data into a text file

757
00:34:31,460 --> 00:34:38,520
and that text file is then executed the

758
00:34:36,389 --> 00:34:40,560
the next stage of our shells or the

759
00:34:38,520 --> 00:34:43,110
third stage of PowerShell exactly cuted

760
00:34:40,560 --> 00:34:46,080
and that's more or less stock code from

761
00:34:43,110 --> 00:34:48,179
this orion's repository and that stock

762
00:34:46,080 --> 00:34:51,149
code collects as much as information as

763
00:34:48,179 --> 00:34:53,730
possible from the affected machine saves

764
00:34:51,149 --> 00:34:56,069
it into a file called pass dot txt and

765
00:34:53,730 --> 00:34:58,140
that that pass dot txt is uploaded to

766
00:34:56,070 --> 00:35:01,410
that gmail address so this is kind of a

767
00:34:58,140 --> 00:35:04,520
I included it because it was it was

768
00:35:01,410 --> 00:35:08,279
regional compromised and then the last

769
00:35:04,520 --> 00:35:11,759
kind of set of things I have to talk

770
00:35:08,280 --> 00:35:16,350
about which we also publish is called

771
00:35:11,760 --> 00:35:19,140
China chopper it's not necessarily a

772
00:35:16,350 --> 00:35:21,540
living of the land binary but through

773
00:35:19,140 --> 00:35:24,000
investigating China chopper compromises

774
00:35:21,540 --> 00:35:26,400
we managed to find quite a lot of the

775
00:35:24,000 --> 00:35:29,760
real attackers using command line

776
00:35:26,400 --> 00:35:32,640
execution to miss you some of this some

777
00:35:29,760 --> 00:35:37,500
of the windows binaries so what is China

778
00:35:32,640 --> 00:35:40,500
chopper its web shell so if you are able

779
00:35:37,500 --> 00:35:42,960
to compromise a web site or web

780
00:35:40,500 --> 00:35:45,450
application the only thing in PHP for

781
00:35:42,960 --> 00:35:50,190
example you need to do is include like

782
00:35:45,450 --> 00:35:51,990
20 or 30 bytes of code PHP evil posts

783
00:35:50,190 --> 00:35:53,760
and the variable you're gonna use to

784
00:35:51,990 --> 00:35:56,339
send the rest of the code from the

785
00:35:53,760 --> 00:35:59,279
client-side and here you also see

786
00:35:56,339 --> 00:36:01,680
the user interface of the client which

787
00:35:59,279 --> 00:36:05,450
is then click and point-and-click very

788
00:36:01,680 --> 00:36:08,160
easy to use and it's one of the kind of

789
00:36:05,450 --> 00:36:12,629
frequently used tools by some of the

790
00:36:08,160 --> 00:36:14,868
Chinese attackers and groups but it's

791
00:36:12,630 --> 00:36:18,029
been present for about nine years and

792
00:36:14,869 --> 00:36:20,210
not very much changed since the

793
00:36:18,029 --> 00:36:25,079
beginning but it's still being

794
00:36:20,210 --> 00:36:27,299
successful used so my motivation behind

795
00:36:25,079 --> 00:36:30,960
trying to investigate China chopper was

796
00:36:27,299 --> 00:36:33,359
there was a news about a number of

797
00:36:30,960 --> 00:36:35,670
telecoms around the world compromised

798
00:36:33,359 --> 00:36:37,650
and the researcher from cyber Rome who

799
00:36:35,670 --> 00:36:40,200
initially investigated this those

800
00:36:37,650 --> 00:36:41,880
incidents also said that one of the

801
00:36:40,200 --> 00:36:44,308
tools that's been used was called China

802
00:36:41,880 --> 00:36:46,499
chopper so I looked what is the traffic

803
00:36:44,309 --> 00:36:50,190
pipe pattern of the China chopper and

804
00:36:46,499 --> 00:36:52,499
then I realized that I can because I can

805
00:36:50,190 --> 00:36:55,529
look at all of the command lines when

806
00:36:52,499 --> 00:37:00,209
the attackers start remote shell with a

807
00:36:55,529 --> 00:37:03,289
compromised host china chopper suggests

808
00:37:00,210 --> 00:37:06,329
this command netstat dot dash a and

809
00:37:03,289 --> 00:37:09,299
piped to find established so tries to

810
00:37:06,329 --> 00:37:11,339
find established network connections so

811
00:37:09,299 --> 00:37:13,440
it suggests that and most of the times

812
00:37:11,339 --> 00:37:14,190
what the attackers do they just press

813
00:37:13,440 --> 00:37:19,049
Enter

814
00:37:14,190 --> 00:37:20,999
so this is like a clear sign that a web

815
00:37:19,049 --> 00:37:23,400
application or a host is compromised

816
00:37:20,999 --> 00:37:27,390
with China chopper it also has one other

817
00:37:23,400 --> 00:37:31,440
strange characteristic is that it puts

818
00:37:27,390 --> 00:37:33,210
start and end in in brackets almost at

819
00:37:31,440 --> 00:37:35,999
the end of the command so you can really

820
00:37:33,210 --> 00:37:37,890
not make a nice regular expression

821
00:37:35,999 --> 00:37:40,529
pattern to detect China chopper

822
00:37:37,890 --> 00:37:43,348
activities which allowed us to to find

823
00:37:40,529 --> 00:37:46,349
many organizations that being

824
00:37:43,349 --> 00:37:49,920
compromised starting from some of the

825
00:37:46,349 --> 00:37:52,049
simpler ones too to quite like a

826
00:37:49,920 --> 00:37:54,749
government agencies for example some of

827
00:37:52,049 --> 00:37:58,680
the Asian governments have been

828
00:37:54,749 --> 00:38:01,439
compromised with China chopper so here

829
00:37:58,680 --> 00:38:03,899
here we see like on the server side we

830
00:38:01,440 --> 00:38:06,299
only had that one line of PHP code which

831
00:38:03,900 --> 00:38:08,099
essentially cannot do anything

832
00:38:06,299 --> 00:38:11,519
but on the client side when it creates

833
00:38:08,099 --> 00:38:16,589
this request he sends says test equal

834
00:38:11,519 --> 00:38:20,038
big blob of data and it sends about two

835
00:38:16,589 --> 00:38:25,529
or more variables so the first variable

836
00:38:20,039 --> 00:38:27,900
is the code that handles the rest of the

837
00:38:25,529 --> 00:38:30,269
code and the other ones are our

838
00:38:27,900 --> 00:38:32,939
parameters for that code so if I can I

839
00:38:30,269 --> 00:38:37,439
want to run a command line then I can

840
00:38:32,939 --> 00:38:39,719
say well look at the parameter zero and

841
00:38:37,439 --> 00:38:41,459
look at the parameter one so when it's

842
00:38:39,719 --> 00:38:44,099
decoded and you could see that it's

843
00:38:41,459 --> 00:38:46,410
sound it is basic c4d code you can see

844
00:38:44,099 --> 00:38:49,969
that it looks at the sub parameter zero

845
00:38:46,410 --> 00:38:54,149
is the actual code that handles

846
00:38:49,969 --> 00:38:55,979
parameters at 1 and Z 2 that one is the

847
00:38:54,150 --> 00:38:58,739
executable I want to execute in this

848
00:38:55,979 --> 00:39:04,578
case command and that 2 is the command I

849
00:38:58,739 --> 00:39:04,579
want to execute which is CD in the

850
00:39:04,670 --> 00:39:12,299
directory of the compromised application

851
00:39:07,079 --> 00:39:14,939
and that Nets that - I am pipe find

852
00:39:12,299 --> 00:39:18,179
establish so so I can see all this in

853
00:39:14,939 --> 00:39:20,098
the in the network traffic and I chose

854
00:39:18,179 --> 00:39:23,999
from the can quite a few we've seen I

855
00:39:20,099 --> 00:39:26,219
chose like 3 to 2 document 3 cases one

856
00:39:23,999 --> 00:39:29,189
of them is the cyber espionage case on

857
00:39:26,219 --> 00:39:30,839
the government organization in Asia the

858
00:39:29,189 --> 00:39:33,569
other one is the Middle Eastern

859
00:39:30,839 --> 00:39:36,029
operation that had like let's say

860
00:39:33,569 --> 00:39:39,029
multiple objectives and and then the

861
00:39:36,029 --> 00:39:41,729
third one just to see how generic this

862
00:39:39,029 --> 00:39:43,920
tool is it was like a standard web

863
00:39:41,729 --> 00:39:45,959
defacement you have attacker and you and

864
00:39:43,920 --> 00:39:48,660
you compromise one application on a web

865
00:39:45,959 --> 00:39:51,328
hosting system then you can if you are

866
00:39:48,660 --> 00:39:53,578
get the writing privileges you can

867
00:39:51,329 --> 00:39:56,699
change all the home pages to display

868
00:39:53,579 --> 00:39:59,160
something so very wide range of people

869
00:39:56,699 --> 00:40:01,380
using it and the first case is the

870
00:39:59,160 --> 00:40:06,118
cyprus espionage and so in this case

871
00:40:01,380 --> 00:40:10,319
these guys are using a particular

872
00:40:06,119 --> 00:40:12,689
version of rar archiver with quite a

873
00:40:10,319 --> 00:40:16,019
complex password and every day they are

874
00:40:12,689 --> 00:40:18,390
running this particular set of tools so

875
00:40:16,019 --> 00:40:20,339
this is a government organization and

876
00:40:18,390 --> 00:40:22,830
in the home directory they're collecting

877
00:40:20,340 --> 00:40:25,350
all the doc doc files the PowerPoint

878
00:40:22,830 --> 00:40:28,200
files the Excel files a number of

879
00:40:25,350 --> 00:40:30,839
different types of documents that

880
00:40:28,200 --> 00:40:32,850
they're archiving them into the output

881
00:40:30,840 --> 00:40:35,160
directory and then they're moving them

882
00:40:32,850 --> 00:40:37,140
in another system within the network

883
00:40:35,160 --> 00:40:41,129
which they will probably use to kind of

884
00:40:37,140 --> 00:40:43,770
elk exfiltrate the other on the same

885
00:40:41,130 --> 00:40:46,620
system which we saw potentially two

886
00:40:43,770 --> 00:40:48,990
groups one that used renamed WinRAR and

887
00:40:46,620 --> 00:40:52,049
the second one that used R our standard

888
00:40:48,990 --> 00:40:54,689
rar with with always the same password

889
00:40:52,050 --> 00:40:57,000
and that password was son of a bitch I

890
00:40:54,690 --> 00:40:59,880
think so and that's why we didn't that's

891
00:40:57,000 --> 00:41:02,940
why I didn't put it here but it's so

892
00:40:59,880 --> 00:41:04,410
it's a bit of a kind of profanity and so

893
00:41:02,940 --> 00:41:06,810
we could recognize when these these

894
00:41:04,410 --> 00:41:09,930
actors were working on trying to encode

895
00:41:06,810 --> 00:41:12,450
the data they were also interested in

896
00:41:09,930 --> 00:41:13,919
the database code so again remember

897
00:41:12,450 --> 00:41:17,669
there's all the same kind of PowerShell

898
00:41:13,920 --> 00:41:20,090
here we see a PowerShell that's added as

899
00:41:17,670 --> 00:41:23,930
a parameter to the Microsoft build

900
00:41:20,090 --> 00:41:26,460
executable and what this does is simply

901
00:41:23,930 --> 00:41:29,370
when it gets a script file that's

902
00:41:26,460 --> 00:41:33,090
encoded and dropped on the disk it gets

903
00:41:29,370 --> 00:41:35,670
the key to decrypt it and then once it's

904
00:41:33,090 --> 00:41:38,220
decrypted it added to the set of

905
00:41:35,670 --> 00:41:40,260
PowerShell scripts and executes it so it

906
00:41:38,220 --> 00:41:45,509
kind of hides hides the code on on the

907
00:41:40,260 --> 00:41:47,940
disk it also has a three distinct user

908
00:41:45,510 --> 00:41:51,210
agents that are used or one of them is

909
00:41:47,940 --> 00:41:53,490
chosen by kind of almost by random and

910
00:41:51,210 --> 00:41:56,460
then that's used to download the some of

911
00:41:53,490 --> 00:41:58,910
the additional scripting data and once

912
00:41:56,460 --> 00:42:01,050
they they downloaded this data they

913
00:41:58,910 --> 00:42:04,350
download it into the module called

914
00:42:01,050 --> 00:42:09,210
helper dot PS one and that helper T is

915
00:42:04,350 --> 00:42:12,270
basically just a SQL module that allow

916
00:42:09,210 --> 00:42:14,370
them to connect to the SQL server where

917
00:42:12,270 --> 00:42:16,530
they know they wanted to dump some kind

918
00:42:14,370 --> 00:42:18,720
of database data and they dump the data

919
00:42:16,530 --> 00:42:20,970
from the database and then they they

920
00:42:18,720 --> 00:42:23,649
start use just like a day they mounted

921
00:42:20,970 --> 00:42:25,899
the remote

922
00:42:23,650 --> 00:42:29,500
share on the remote this can then copy

923
00:42:25,900 --> 00:42:32,710
that on that different system so this is

924
00:42:29,500 --> 00:42:36,480
like a typical exfiltration case of

925
00:42:32,710 --> 00:42:39,310
probably two different groups and we

926
00:42:36,480 --> 00:42:41,530
contacted that those customers so there

927
00:42:39,310 --> 00:42:44,740
they are they dealt they dealt with the

928
00:42:41,530 --> 00:42:46,810
decision but if the interesting thing is

929
00:42:44,740 --> 00:42:48,549
that all of these campaigns like three

930
00:42:46,810 --> 00:42:52,240
that we are investigating are lasting

931
00:42:48,550 --> 00:42:53,590
for over ten months age so if you think

932
00:42:52,240 --> 00:42:55,180
that the compromise can be easily

933
00:42:53,590 --> 00:42:57,310
detected that's not necessarily true

934
00:42:55,180 --> 00:42:59,620
because these guys were successfully

935
00:42:57,310 --> 00:43:01,330
doing it for like over ten months for a

936
00:42:59,620 --> 00:43:03,460
long time

937
00:43:01,330 --> 00:43:05,020
the second campaign has multiple goals

938
00:43:03,460 --> 00:43:09,190
and it's all some remote administration

939
00:43:05,020 --> 00:43:12,759
tools in this case or just like your

940
00:43:09,190 --> 00:43:14,980
regular ransomware malva again we see

941
00:43:12,760 --> 00:43:18,190
some some of the PowerShell code that

942
00:43:14,980 --> 00:43:20,770
are using pastebin.com and in this case

943
00:43:18,190 --> 00:43:23,020
it's a ransomware family called so they

944
00:43:20,770 --> 00:43:26,230
know key B or something like that so

945
00:43:23,020 --> 00:43:30,280
again they have the same idea they they

946
00:43:26,230 --> 00:43:32,530
use the reflective DLL loader so

947
00:43:30,280 --> 00:43:34,990
anything that's that hosted on page B

948
00:43:32,530 --> 00:43:37,150
calm is the actual calls that's almost

949
00:43:34,990 --> 00:43:39,609
the same as the legitimate reflective

950
00:43:37,150 --> 00:43:43,140
DLL world loader but they only replace

951
00:43:39,610 --> 00:43:46,840
the binary part that's loaded in memory

952
00:43:43,140 --> 00:43:48,759
so I mentioned that they have multiple

953
00:43:46,840 --> 00:43:51,280
goals so we kind of stumbled upon this

954
00:43:48,760 --> 00:43:56,470
standard malware but they also were

955
00:43:51,280 --> 00:43:59,890
trying to dump the credential by by

956
00:43:56,470 --> 00:44:02,560
downloading invoke mimikatz and pass the

957
00:43:59,890 --> 00:44:06,279
hashes and then once where they managed

958
00:44:02,560 --> 00:44:07,509
to create owes or retrieve the

959
00:44:06,280 --> 00:44:09,840
credentials then they will create new

960
00:44:07,510 --> 00:44:12,100
user accounts and they will try to

961
00:44:09,840 --> 00:44:13,660
enumerate all the other systems in the

962
00:44:12,100 --> 00:44:15,940
network and then go into Active

963
00:44:13,660 --> 00:44:17,830
Directory and then from then on I kind

964
00:44:15,940 --> 00:44:20,590
of lost track a bit but it was enough to

965
00:44:17,830 --> 00:44:23,710
decide that this is like a multi-prong

966
00:44:20,590 --> 00:44:26,650
type of campaign and the last one is the

967
00:44:23,710 --> 00:44:29,620
web defacement here again I looked about

968
00:44:26,650 --> 00:44:32,980
six different server from an Asian web

969
00:44:29,620 --> 00:44:34,839
host er six of them had

970
00:44:32,980 --> 00:44:37,000
some kind of china chopper activities

971
00:44:34,840 --> 00:44:39,280
and maybe only two of them had something

972
00:44:37,000 --> 00:44:43,200
that can be considered like interesting

973
00:44:39,280 --> 00:44:46,390
or serious so in this case we see

974
00:44:43,200 --> 00:44:50,140
PowerShell again code that's loading

975
00:44:46,390 --> 00:44:53,560
something from the windows management

976
00:44:50,140 --> 00:44:55,810
instrumentation database which which is

977
00:44:53,560 --> 00:44:58,450
the registry and because that and runs

978
00:44:55,810 --> 00:45:01,180
that code so this is probably some kind

979
00:44:58,450 --> 00:45:03,368
of file ice type or malware that that's

980
00:45:01,180 --> 00:45:05,919
hiding its code in this database it's

981
00:45:03,369 --> 00:45:08,260
not on the disk as a file but it's it's

982
00:45:05,920 --> 00:45:10,660
run by this short piece of code the

983
00:45:08,260 --> 00:45:14,380
second one again your fave our favorite

984
00:45:10,660 --> 00:45:16,950
is mimikatz and again you often see many

985
00:45:14,380 --> 00:45:19,960
mimic ads in legitimate and illegitimate

986
00:45:16,950 --> 00:45:22,118
activity so these guys are trying to

987
00:45:19,960 --> 00:45:25,570
invoke mimikatz and then say the

988
00:45:22,119 --> 00:45:27,340
passwords set the passwords in in a file

989
00:45:25,570 --> 00:45:32,950
and hopefully and then reuse those

990
00:45:27,340 --> 00:45:35,200
passwords finally we see that the

991
00:45:32,950 --> 00:45:37,950
attacker is invoking cackles which

992
00:45:35,200 --> 00:45:41,319
changes the access control lists on the

993
00:45:37,950 --> 00:45:44,379
directories which are used to host all

994
00:45:41,320 --> 00:45:47,530
the websites for this web web hosting

995
00:45:44,380 --> 00:45:49,630
providers and allows full access to all

996
00:45:47,530 --> 00:45:51,310
of the user so once when they allow

997
00:45:49,630 --> 00:45:53,590
access to all of the users then all bets

998
00:45:51,310 --> 00:45:55,840
are off you can change anything but

999
00:45:53,590 --> 00:45:57,250
luckily in this case it was very serious

1000
00:45:55,840 --> 00:46:00,430
and I took this screenshot from zone

1001
00:45:57,250 --> 00:46:03,280
aged org is one of the IP addresses that

1002
00:46:00,430 --> 00:46:06,879
was compromised and by this China fans

1003
00:46:03,280 --> 00:46:09,100
group I guess you know so again we see

1004
00:46:06,880 --> 00:46:10,930
China chopper from web defacement simple

1005
00:46:09,100 --> 00:46:12,910
stuff not very serious to something

1006
00:46:10,930 --> 00:46:15,609
that's potentially very serious and

1007
00:46:12,910 --> 00:46:17,950
that's stealing an acceleration of

1008
00:46:15,609 --> 00:46:22,090
confidential documents from from a

1009
00:46:17,950 --> 00:46:25,089
government organization so we talked

1010
00:46:22,090 --> 00:46:27,190
about living of the land binaries how

1011
00:46:25,090 --> 00:46:29,050
attackers are trying to misuse them how

1012
00:46:27,190 --> 00:46:32,200
often they misuse and we've see some of

1013
00:46:29,050 --> 00:46:35,440
the interesting cases or let's say more

1014
00:46:32,200 --> 00:46:37,149
interesting cases so how how do we

1015
00:46:35,440 --> 00:46:39,250
detect from the flow or how do we

1016
00:46:37,150 --> 00:46:41,350
protect ourselves from it if we are

1017
00:46:39,250 --> 00:46:44,230
working in a I come from more of the

1018
00:46:41,350 --> 00:46:45,790
kind of defender side so I'm always

1019
00:46:44,230 --> 00:46:48,010
interesting like how can I

1020
00:46:45,790 --> 00:46:49,960
detect this so within your

1021
00:46:48,010 --> 00:46:52,720
organization's if you work in a security

1022
00:46:49,960 --> 00:46:56,170
then if you're not already doing this

1023
00:46:52,720 --> 00:46:58,029
then you can centralize the logging so

1024
00:46:56,170 --> 00:46:59,890
logging of the various types of events

1025
00:46:58,030 --> 00:47:02,050
such as process startup and termination

1026
00:46:59,890 --> 00:47:04,690
everything you can set a policy in

1027
00:47:02,050 --> 00:47:06,700
Windows and you can allow that to to be

1028
00:47:04,690 --> 00:47:09,460
logged in the centralized logging block

1029
00:47:06,700 --> 00:47:14,140
including the executed PowerShell blocks

1030
00:47:09,460 --> 00:47:15,940
so you can instruct PowerShell engine to

1031
00:47:14,140 --> 00:47:17,890
actually log every single PowerShell

1032
00:47:15,940 --> 00:47:19,930
block so anything is this between the

1033
00:47:17,890 --> 00:47:22,569
curly brackets will be displayed in the

1034
00:47:19,930 --> 00:47:25,649
log so if you are a security person and

1035
00:47:22,570 --> 00:47:29,310
if you're an analyst and you see that

1036
00:47:25,650 --> 00:47:32,020
suspicious blocks are coming into your

1037
00:47:29,310 --> 00:47:34,869
scene tool or whatever using to

1038
00:47:32,020 --> 00:47:37,990
aggregate that the log files then you

1039
00:47:34,869 --> 00:47:40,000
want to investigate if you can try to

1040
00:47:37,990 --> 00:47:41,830
prevent PowerShell invocation at all

1041
00:47:40,000 --> 00:47:44,800
because if you know that you don't have

1042
00:47:41,830 --> 00:47:46,290
to use it then simply just block it or

1043
00:47:44,800 --> 00:47:49,690
remove it from the system

1044
00:47:46,290 --> 00:47:54,940
or allow only known good command-line so

1045
00:47:49,690 --> 00:47:57,640
try to enforce try to enforce only the

1046
00:47:54,940 --> 00:48:01,060
signed scripts to wait to be executed

1047
00:47:57,640 --> 00:48:04,210
but try to block anything else and also

1048
00:48:01,060 --> 00:48:07,270
when you look into the kind of network

1049
00:48:04,210 --> 00:48:09,940
security make sure that your think about

1050
00:48:07,270 --> 00:48:11,980
so-called zero trust approach where

1051
00:48:09,940 --> 00:48:14,170
essentially you don't trust anybody

1052
00:48:11,980 --> 00:48:16,720
internally as well as you don't trust

1053
00:48:14,170 --> 00:48:20,080
anybody externally and we protect all of

1054
00:48:16,720 --> 00:48:22,060
these important assets by some kind of

1055
00:48:20,080 --> 00:48:25,900
second factor authentication or require

1056
00:48:22,060 --> 00:48:27,190
a new login which we should make this

1057
00:48:25,900 --> 00:48:30,070
sort of pivoting around the network

1058
00:48:27,190 --> 00:48:33,700
using a living of the line binaries more

1059
00:48:30,070 --> 00:48:35,530
difficult and of course because you have

1060
00:48:33,700 --> 00:48:37,960
that data you can do more or less the

1061
00:48:35,530 --> 00:48:40,330
same thing as I did which is to conduct

1062
00:48:37,960 --> 00:48:43,090
hunting activities and you have like a

1063
00:48:40,330 --> 00:48:47,049
parties order pizza and try to find

1064
00:48:43,090 --> 00:48:48,670
what's happening on your network so at

1065
00:48:47,050 --> 00:48:52,330
the beginning I had the questions are

1066
00:48:48,670 --> 00:48:55,930
these binaries legitimate tools or the

1067
00:48:52,330 --> 00:48:58,279
weapons of mass compromise and I could

1068
00:48:55,930 --> 00:49:00,470
just say well yes they are absolutely

1069
00:48:58,280 --> 00:49:03,740
misused by the attackers from the

1070
00:49:00,470 --> 00:49:05,359
commodity malware to a PT's to read team

1071
00:49:03,740 --> 00:49:06,470
exercises you could see the death

1072
00:49:05,360 --> 00:49:08,240
they're being used

1073
00:49:06,470 --> 00:49:11,240
nevertheless they're still predominantly

1074
00:49:08,240 --> 00:49:12,799
used for legitimate activities and you

1075
00:49:11,240 --> 00:49:16,180
know if you look at the trends so far

1076
00:49:12,800 --> 00:49:18,500
you know it's been on an a increase and

1077
00:49:16,180 --> 00:49:20,140
it's likely to continue with more

1078
00:49:18,500 --> 00:49:25,400
applications being discovered and

1079
00:49:20,140 --> 00:49:28,129
misused and with that I think I'm more

1080
00:49:25,400 --> 00:49:30,740
or less done on time I like to thank you

1081
00:49:28,130 --> 00:49:33,260
for listening to my presentation in my

1082
00:49:30,740 --> 00:49:42,459
work and if you have any questions I'm

1083
00:49:33,260 --> 00:49:42,460
I'm very much open to any questions

1084
00:49:50,870 --> 00:49:53,560
as welcome

1085
00:49:53,930 --> 00:50:01,089
at the bottom yeah we need an expert

1086
00:50:06,720 --> 00:50:15,160
yeah what tools do you use to do the

1087
00:50:10,810 --> 00:50:16,900
obfuscated PowerShell or JavaScript for

1088
00:50:15,160 --> 00:50:21,250
power for the application of PowerShell

1089
00:50:16,900 --> 00:50:23,440
I'm using powers so so so what what I do

1090
00:50:21,250 --> 00:50:26,050
I I have a setup in a virtual machine so

1091
00:50:23,440 --> 00:50:29,470
if I execute something bad then then so

1092
00:50:26,050 --> 00:50:30,880
but so what I do then is I basically use

1093
00:50:29,470 --> 00:50:33,189
Microsoft called

1094
00:50:30,880 --> 00:50:35,890
as the environment which has the

1095
00:50:33,190 --> 00:50:38,650
PowerShell a plugin and so from then on

1096
00:50:35,890 --> 00:50:41,410
it keeps the context and the state as

1097
00:50:38,650 --> 00:50:45,369
you run scripts so so basically instead

1098
00:50:41,410 --> 00:50:47,859
of invoke execution I changed that piece

1099
00:50:45,369 --> 00:50:50,950
of code in obfuscated script if it's in

1100
00:50:47,859 --> 00:50:54,460
vocal discussion to go into out string

1101
00:50:50,950 --> 00:50:56,859
or out file so every next stage will get

1102
00:50:54,460 --> 00:51:00,190
the next stage so I'll modify it next

1103
00:50:56,859 --> 00:51:02,410
time and as long as I get to the yeah

1104
00:51:00,190 --> 00:51:04,869
when I get the actual code I got that's

1105
00:51:02,410 --> 00:51:07,149
it now but it's not always easy

1106
00:51:04,869 --> 00:51:09,700
sometimes it's completely unreadable

1107
00:51:07,150 --> 00:51:11,440
then I use some of our send boxes I just

1108
00:51:09,700 --> 00:51:14,319
submit that file to the sandbox and hope

1109
00:51:11,440 --> 00:51:16,660
I'll see some activities from there no

1110
00:51:14,320 --> 00:51:18,490
it's not always obvious which part of

1111
00:51:16,660 --> 00:51:21,609
script you need to modify to get the

1112
00:51:18,490 --> 00:51:24,459
next to the next stage or or descripting

1113
00:51:21,609 --> 00:51:26,319
scripting the logging as well I above

1114
00:51:24,460 --> 00:51:28,900
the virtual machine has the blocking of

1115
00:51:26,320 --> 00:51:30,340
script blocks and then but it's event

1116
00:51:28,900 --> 00:51:32,260
can be already too late I have to

1117
00:51:30,340 --> 00:51:36,690
restore the virtual machine and so on so

1118
00:51:32,260 --> 00:51:36,690
it's easy to modify this say yeah

1119
00:51:43,030 --> 00:51:47,320
in your research have you encountered

1120
00:51:44,859 --> 00:51:49,450
some malicious activity that is actually

1121
00:51:47,320 --> 00:51:51,400
coming from Serbia are there Serbian

1122
00:51:49,450 --> 00:51:54,939
hackers or everything is just Tiny's

1123
00:51:51,400 --> 00:51:57,550
ukraine's and so I unfortunately don't

1124
00:51:54,940 --> 00:51:59,589
have that particular data so so so what

1125
00:51:57,550 --> 00:52:01,780
I what I have is like I said I have this

1126
00:51:59,589 --> 00:52:04,450
sort of unique organization ID I have

1127
00:52:01,780 --> 00:52:07,210
unique things so I came from some of the

1128
00:52:04,450 --> 00:52:08,618
contests Seymour who the victim is then

1129
00:52:07,210 --> 00:52:10,060
the attacker is now in case of this

1130
00:52:08,619 --> 00:52:12,280
Slovenian guy I could see that they're

1131
00:52:10,060 --> 00:52:15,270
using Slovenian host for infrastructure

1132
00:52:12,280 --> 00:52:17,920
that the name for the email address is a

1133
00:52:15,270 --> 00:52:20,950
Slovenian name therefore most likely

1134
00:52:17,920 --> 00:52:23,050
somebody from Selenia and from the when

1135
00:52:20,950 --> 00:52:25,450
I looked at the organization that was

1136
00:52:23,050 --> 00:52:27,760
affected it was a organization from

1137
00:52:25,450 --> 00:52:30,310
Slovenia so for me is like I connected

1138
00:52:27,760 --> 00:52:32,080
those dots but I can't always see I can

1139
00:52:30,310 --> 00:52:34,299
really look more at the infrastructure

1140
00:52:32,080 --> 00:52:38,529
rather than I don't see the IP addresses

1141
00:52:34,300 --> 00:52:41,500
that much we have a set of IPS rules and

1142
00:52:38,530 --> 00:52:44,020
and in the program so not not all of the

1143
00:52:41,500 --> 00:52:46,390
Cisco's product will report telemetry to

1144
00:52:44,020 --> 00:52:48,160
us centralized because there are a lot

1145
00:52:46,390 --> 00:52:49,509
of government organizations they don't

1146
00:52:48,160 --> 00:52:52,810
want to want to have any kind of

1147
00:52:49,510 --> 00:52:55,300
telemetry in and in big companies so I

1148
00:52:52,810 --> 00:52:57,670
get it from the Cisco has this product

1149
00:52:55,300 --> 00:53:00,940
line called Meraki and so Meraki has a

1150
00:52:57,670 --> 00:53:03,369
limited subset of IPS rules and there I

1151
00:53:00,940 --> 00:53:06,490
get the detection names plus the IP

1152
00:53:03,369 --> 00:53:08,680
address of the attacker and and the

1153
00:53:06,490 --> 00:53:11,890
actual IP address of who the attacking

1154
00:53:08,680 --> 00:53:13,750
attacked system was but then again how

1155
00:53:11,890 --> 00:53:15,250
can you know even if the IP address is

1156
00:53:13,750 --> 00:53:17,290
located in Serbia that doesn't

1157
00:53:15,250 --> 00:53:19,240
necessarily mean it's a Serbian maybe

1158
00:53:17,290 --> 00:53:22,750
some trace is that the point to do

1159
00:53:19,240 --> 00:53:24,399
actually Serbian fawlcon yeah it's

1160
00:53:22,750 --> 00:53:26,349
something that we I won't say kind of is

1161
00:53:24,400 --> 00:53:28,300
it's not we are not struggling with that

1162
00:53:26,349 --> 00:53:31,450
but often we would like to know more and

1163
00:53:28,300 --> 00:53:33,630
and but we can't we can know so you know

1164
00:53:31,450 --> 00:53:35,950
that's why some of the information is I

1165
00:53:33,630 --> 00:53:38,410
have to connect some of the dots before

1166
00:53:35,950 --> 00:53:40,890
I can I can say something and thank you

1167
00:53:38,410 --> 00:53:40,890
it's tricky

1168
00:53:43,570 --> 00:53:51,610
anymore well if there are no more

1169
00:53:49,330 --> 00:53:53,830
questions as I introduced myself I will

1170
00:53:51,610 --> 00:53:57,450
say goodbye to myself and to you and

1171
00:53:53,830 --> 00:53:57,450
thank you thank you for listening thanks

1172
00:54:22,400 --> 00:54:24,460
you

