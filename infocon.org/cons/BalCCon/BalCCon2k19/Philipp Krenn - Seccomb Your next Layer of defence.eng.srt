1
00:00:26,290 --> 00:00:31,730
okay we're gonna start with our next

2
00:00:28,970 --> 00:00:34,190
talk now in which Philip is gonna talk

3
00:00:31,730 --> 00:00:40,730
about sack comp your next layer of

4
00:00:34,190 --> 00:00:45,110
defense enjoy one who is already

5
00:00:40,730 --> 00:00:46,669
actively using SATCOM okay that's not

6
00:00:45,110 --> 00:00:49,100
that merit but it's good because this is

7
00:00:46,670 --> 00:00:50,900
an introduction so don't worry so what

8
00:00:49,100 --> 00:00:53,350
we generally do is I want to give a bit

9
00:00:50,900 --> 00:00:56,480
of an overview of what second us and is

10
00:00:53,350 --> 00:00:57,739
how it's used in our product so I come

11
00:00:56,480 --> 00:00:59,449
from elastic the company behind the

12
00:00:57,739 --> 00:01:01,010
elastic search and beat those are the

13
00:00:59,449 --> 00:01:03,559
two ones where I will look at what we do

14
00:01:01,010 --> 00:01:05,449
with sec comp in there and then at the

15
00:01:03,559 --> 00:01:07,490
end quickly how you might capture

16
00:01:05,449 --> 00:01:09,500
violations of sec come to figure out

17
00:01:07,490 --> 00:01:12,380
what bad stuff has happened so let's see

18
00:01:09,500 --> 00:01:14,720
where we can take this oftentimes this

19
00:01:12,380 --> 00:01:18,560
is our approach to security where we

20
00:01:14,720 --> 00:01:20,600
accept that everything is fine and this

21
00:01:18,560 --> 00:01:22,729
works for some time until something

22
00:01:20,600 --> 00:01:25,158
happens and that something could be lots

23
00:01:22,729 --> 00:01:26,990
of stuff it could be your instances

24
00:01:25,159 --> 00:01:29,330
start mining bitcoins or somebody steals

25
00:01:26,990 --> 00:01:31,580
you data or whatever bad stuff could

26
00:01:29,330 --> 00:01:33,080
happen with your stuff and then you

27
00:01:31,580 --> 00:01:34,460
figure out that nothing is fine and

28
00:01:33,080 --> 00:01:37,010
everything is on fire and everything is

29
00:01:34,460 --> 00:01:40,160
terrible and we kind of want to avoid

30
00:01:37,010 --> 00:01:43,220
that bottom half where we say what what

31
00:01:40,160 --> 00:01:44,509
the hell is even our problem and there

32
00:01:43,220 --> 00:01:47,570
are lots of solutions for security

33
00:01:44,510 --> 00:01:49,220
issues and the one thing I want to point

34
00:01:47,570 --> 00:01:52,550
out this there are no silver bullets and

35
00:01:49,220 --> 00:01:54,470
that's why I called it in the defense in

36
00:01:52,550 --> 00:01:56,390
in depth or in layers or whatever is

37
00:01:54,470 --> 00:01:57,890
because there is not one solution you

38
00:01:56,390 --> 00:02:00,260
want to deploy but you want to I have

39
00:01:57,890 --> 00:02:02,300
multiple layers of protection and also

40
00:02:00,260 --> 00:02:04,550
nobody can sell you a tool that will

41
00:02:02,300 --> 00:02:07,070
make everything secure that's yeah nice

42
00:02:04,550 --> 00:02:08,449
for sales and nice to present to you but

43
00:02:07,070 --> 00:02:10,639
it's not working like that so you want

44
00:02:08,449 --> 00:02:12,230
to have multiple layers and seccomp is

45
00:02:10,639 --> 00:02:14,738
one of these potential layers that you

46
00:02:12,230 --> 00:02:17,390
can add to your applications so

47
00:02:14,739 --> 00:02:20,750
basically the idea of second is that it

48
00:02:17,390 --> 00:02:22,940
can block specific system calls in your

49
00:02:20,750 --> 00:02:25,129
application so basically your

50
00:02:22,940 --> 00:02:27,590
application can say like hey I know that

51
00:02:25,129 --> 00:02:30,679
I don't need these system calls so I

52
00:02:27,590 --> 00:02:32,690
don't want to allow them for myself or

53
00:02:30,680 --> 00:02:35,480
put it another way you instrument the

54
00:02:32,690 --> 00:02:36,109
kernel to abort certain calls in your

55
00:02:35,480 --> 00:02:38,810
application

56
00:02:36,110 --> 00:02:40,430
or to kill the process entirely so for

57
00:02:38,810 --> 00:02:42,470
example even if you had a bad

58
00:02:40,430 --> 00:02:44,840
vulnerability in your code and somebody

59
00:02:42,470 --> 00:02:46,460
can do a remote code execution they

60
00:02:44,840 --> 00:02:48,320
might not be able to fork off another

61
00:02:46,460 --> 00:02:50,180
process or call some other binary or

62
00:02:48,320 --> 00:02:52,400
bind the shell or whatever because you

63
00:02:50,180 --> 00:02:54,440
just don't allow it in a second profile

64
00:02:52,400 --> 00:02:56,600
so basically you're filtering out what

65
00:02:54,440 --> 00:02:58,400
system calls are possible from your

66
00:02:56,600 --> 00:03:00,350
application because your application

67
00:02:58,400 --> 00:03:02,180
should know what it needs and then you

68
00:03:00,350 --> 00:03:03,710
can filter out stuff that you don't need

69
00:03:02,180 --> 00:03:05,510
so for example if you know you will

70
00:03:03,710 --> 00:03:07,970
never need to fork another process and

71
00:03:05,510 --> 00:03:09,470
you disallow that even if somebody hacks

72
00:03:07,970 --> 00:03:11,170
your code and you have a remote code

73
00:03:09,470 --> 00:03:13,609
execution vulnerability in there

74
00:03:11,170 --> 00:03:15,829
somebody will not be able to start a

75
00:03:13,610 --> 00:03:17,570
Bitcoin miner a separate process because

76
00:03:15,830 --> 00:03:19,550
you can just not work off that process

77
00:03:17,570 --> 00:03:21,200
that's the general idea what you

78
00:03:19,550 --> 00:03:24,080
probably want to have in your code at

79
00:03:21,200 --> 00:03:26,630
some point it's pretty much an

80
00:03:24,080 --> 00:03:28,850
application sandbox you can limit what

81
00:03:26,630 --> 00:03:32,930
you're doing in your application that's

82
00:03:28,850 --> 00:03:36,739
the overall idea generally this is not a

83
00:03:32,930 --> 00:03:39,140
new feature so it was added in 2005 in

84
00:03:36,740 --> 00:03:41,060
general like it's bit different than

85
00:03:39,140 --> 00:03:44,450
what we have today so the first version

86
00:03:41,060 --> 00:03:46,850
that was in there was and you have proc

87
00:03:44,450 --> 00:03:49,220
the process ID and then a file seccomp

88
00:03:46,850 --> 00:03:51,170
and if you said one in that file you

89
00:03:49,220 --> 00:03:52,970
would enter a strict mode and then your

90
00:03:51,170 --> 00:03:55,369
application would basically be limited

91
00:03:52,970 --> 00:03:57,410
to readwrite exit and secret turn

92
00:03:55,370 --> 00:03:59,420
because that's what a lot of

93
00:03:57,410 --> 00:04:01,010
applications just needed you don't need

94
00:03:59,420 --> 00:04:02,988
to execute another binary you don't need

95
00:04:01,010 --> 00:04:04,940
to fork a process that is kind of like

96
00:04:02,989 --> 00:04:06,800
the first step you know we our

97
00:04:04,940 --> 00:04:10,790
application is fine with those steps so

98
00:04:06,800 --> 00:04:14,180
we are just limiting down to those then

99
00:04:10,790 --> 00:04:17,000
in 2012 basically the foundation was

100
00:04:14,180 --> 00:04:19,130
added to control system can cause more

101
00:04:17,000 --> 00:04:21,890
finely granular so you can actually

102
00:04:19,130 --> 00:04:23,600
register which sis calls are supposed to

103
00:04:21,890 --> 00:04:26,450
be allowed and which ones are supposed

104
00:04:23,600 --> 00:04:28,580
to be forbidden and this was further

105
00:04:26,450 --> 00:04:32,120
improved or especially the ease of

106
00:04:28,580 --> 00:04:33,770
configuration in 2014 when there is now

107
00:04:32,120 --> 00:04:35,840
a system call name seccomp

108
00:04:33,770 --> 00:04:38,210
and with that you can actually register

109
00:04:35,840 --> 00:04:40,609
which system calls are supposed to be

110
00:04:38,210 --> 00:04:42,229
allowed so this is what you're most

111
00:04:40,610 --> 00:04:44,570
likely using today unless you have a

112
00:04:42,229 --> 00:04:45,500
very old kernel somewhere this is what

113
00:04:44,570 --> 00:04:49,190
you get

114
00:04:45,500 --> 00:04:53,120
and just to quickly make sure where we

115
00:04:49,190 --> 00:04:54,860
are so we have syscalls

116
00:04:53,120 --> 00:04:56,810
and it's the one with the s to show you

117
00:04:54,860 --> 00:04:59,210
all the sis codes and if you scroll into

118
00:04:56,810 --> 00:05:01,190
that you will see that these are all the

119
00:04:59,210 --> 00:05:04,880
system calls that you could do

120
00:05:01,190 --> 00:05:07,790
there are a lot over time I'll just

121
00:05:04,880 --> 00:05:09,980
quickly jump to SEC comp and it shows

122
00:05:07,790 --> 00:05:13,520
you okay this system call has been added

123
00:05:09,980 --> 00:05:18,640
in kernel 3.17 as I've had in my slides

124
00:05:13,520 --> 00:05:18,640
and then you could actually look into

125
00:05:19,390 --> 00:05:25,370
the system called and then you can see

126
00:05:21,770 --> 00:05:27,289
what you can actually do here so you can

127
00:05:25,370 --> 00:05:29,330
have that strict mode that is kind of

128
00:05:27,290 --> 00:05:31,910
like that initial mode that we had and

129
00:05:29,330 --> 00:05:33,890
then you can actually set a specific

130
00:05:31,910 --> 00:05:36,560
filter or sometimes also called the

131
00:05:33,890 --> 00:05:40,219
profile where you're actually defined in

132
00:05:36,560 --> 00:05:42,860
the PPF Berkeley packet filter format

133
00:05:40,220 --> 00:05:44,750
what is allowed and what is not allowed

134
00:05:42,860 --> 00:05:46,220
from your application so this is the

135
00:05:44,750 --> 00:05:48,230
system called you're using to actually

136
00:05:46,220 --> 00:05:50,120
register what is allowed and what is not

137
00:05:48,230 --> 00:05:52,190
allowed and you could whitelist or

138
00:05:50,120 --> 00:05:57,590
blacklist depending on how you want to

139
00:05:52,190 --> 00:06:03,169
approach stuff so let's break out of

140
00:05:57,590 --> 00:06:05,390
here again is anybody using that like

141
00:06:03,169 --> 00:06:06,560
any big applications probably quite a

142
00:06:05,390 --> 00:06:08,750
few of the applications that you're

143
00:06:06,560 --> 00:06:11,180
using on a daily basis are using second

144
00:06:08,750 --> 00:06:13,940
profiles already so this is not a

145
00:06:11,180 --> 00:06:15,410
computer completely but this is one so

146
00:06:13,940 --> 00:06:18,560
for example you have google chrome using

147
00:06:15,410 --> 00:06:20,870
it and also flash running in google

148
00:06:18,560 --> 00:06:23,660
chrome I would have its own seccomp

149
00:06:20,870 --> 00:06:25,070
profile to try to filter out bad stuff

150
00:06:23,660 --> 00:06:29,870
but you have it in other browsers

151
00:06:25,070 --> 00:06:31,460
OpenSSH Tucker systemd and quite a few

152
00:06:29,870 --> 00:06:33,830
others so all of these are using

153
00:06:31,460 --> 00:06:38,900
succumbed to kind of limit what you can

154
00:06:33,830 --> 00:06:41,330
actually do how do you register a second

155
00:06:38,900 --> 00:06:43,039
filter then so like we've seen in a man

156
00:06:41,330 --> 00:06:45,409
page already it's written as a Berkeley

157
00:06:43,040 --> 00:06:47,870
packet filter which is I guess nice

158
00:06:45,410 --> 00:06:50,000
which it for computers but not so nice

159
00:06:47,870 --> 00:06:54,229
for humans to create and read or at

160
00:06:50,000 --> 00:06:58,590
least not for me but it is what it is is

161
00:06:54,229 --> 00:07:01,508
anybody using vpf anywhere already

162
00:06:58,590 --> 00:07:04,210
for example if you use TCP dump and

163
00:07:01,509 --> 00:07:06,009
there you could filter with the BPF

164
00:07:04,210 --> 00:07:09,669
format what you actually want to cover

165
00:07:06,009 --> 00:07:11,620
capture or not capture so PPF is widely

166
00:07:09,669 --> 00:07:13,659
used you will run into it every now and

167
00:07:11,620 --> 00:07:17,259
then I'm sitting on the friend of the

168
00:07:13,659 --> 00:07:18,248
syntax but it is widely available and

169
00:07:17,259 --> 00:07:20,979
you will run you to it

170
00:07:18,249 --> 00:07:23,650
and then once you have registered a

171
00:07:20,979 --> 00:07:26,080
filter every single system called that

172
00:07:23,650 --> 00:07:33,758
your application does is running through

173
00:07:26,080 --> 00:07:36,099
that second filter that's it Sam slow no

174
00:07:33,759 --> 00:07:38,020
it's not because this is registered in

175
00:07:36,099 --> 00:07:39,849
the kernel and this will never have to

176
00:07:38,020 --> 00:07:41,859
go to user land but it can only stay in

177
00:07:39,849 --> 00:07:44,050
kernel and so this is a very fast filter

178
00:07:41,860 --> 00:07:45,460
but at first it sounds very expensive

179
00:07:44,050 --> 00:07:46,810
that you say oh we have an additional

180
00:07:45,460 --> 00:07:48,849
filter we need to call for every single

181
00:07:46,810 --> 00:07:51,969
system call but since it's in the kernel

182
00:07:48,849 --> 00:07:54,128
it is fast and probably this is not what

183
00:07:51,969 --> 00:07:56,639
is making your application slow so I

184
00:07:54,129 --> 00:08:00,039
wouldn't worry about that part so much

185
00:07:56,639 --> 00:08:03,759
and I think the results have three

186
00:08:00,039 --> 00:08:05,349
possible outcomes the first one is it's

187
00:08:03,759 --> 00:08:08,800
allowed like we didn't run into any

188
00:08:05,349 --> 00:08:11,289
denial rule that might block that the

189
00:08:08,800 --> 00:08:13,330
process or thread can be killed like you

190
00:08:11,289 --> 00:08:14,830
say hey you run into some you're trying

191
00:08:13,330 --> 00:08:17,020
to do something where I know you should

192
00:08:14,830 --> 00:08:19,149
never do that so just to be safe I'm

193
00:08:17,020 --> 00:08:21,549
terminating the entire process so we're

194
00:08:19,149 --> 00:08:23,589
just cutting you off or the third option

195
00:08:21,550 --> 00:08:25,120
is just to return an error for that

196
00:08:23,589 --> 00:08:26,830
specific system call like the

197
00:08:25,120 --> 00:08:29,050
application still keeps running and

198
00:08:26,830 --> 00:08:31,839
we'll be around but you filter out that

199
00:08:29,050 --> 00:08:34,269
specific filter system call and then log

200
00:08:31,839 --> 00:08:36,969
the error so you can decide what should

201
00:08:34,269 --> 00:08:38,529
be the behavior kill the process just

202
00:08:36,969 --> 00:08:40,560
block the system called or everything is

203
00:08:38,529 --> 00:08:44,110
allowed and keep doing what you want

204
00:08:40,559 --> 00:08:45,790
that is what you have India so like I

205
00:08:44,110 --> 00:08:49,390
said I work for elastic we have our

206
00:08:45,790 --> 00:08:51,370
entire stack how do you seen this one l

207
00:08:49,390 --> 00:08:54,010
or heard of that elastic search logs

208
00:08:51,370 --> 00:08:55,510
such Cubana and because the first

209
00:08:54,010 --> 00:08:58,300
letters make up this nice little L

210
00:08:55,510 --> 00:09:00,640
that's what we always use for that we

211
00:08:58,300 --> 00:09:02,380
have added another component over time

212
00:09:00,640 --> 00:09:03,939
which is called beats which is like a

213
00:09:02,380 --> 00:09:06,250
lightweight agent the shipper written in

214
00:09:03,940 --> 00:09:07,900
go which is basically like tailing log

215
00:09:06,250 --> 00:09:09,610
files for example

216
00:09:07,900 --> 00:09:11,290
the problem is there is no BNL that's

217
00:09:09,610 --> 00:09:13,360
why we try to get rid of that and the

218
00:09:11,290 --> 00:09:16,209
first thing we tried is this the bank or

219
00:09:13,360 --> 00:09:17,710
the LTP which could look something like

220
00:09:16,210 --> 00:09:20,290
this you can see it's a B it's an elk

221
00:09:17,710 --> 00:09:22,270
the combination but doesn't really scale

222
00:09:20,290 --> 00:09:23,709
so we had to do we didn't want to redo

223
00:09:22,270 --> 00:09:25,240
the entire branding and then if we had

224
00:09:23,710 --> 00:09:27,250
add another component we want to redo

225
00:09:25,240 --> 00:09:29,050
that again so we just called it elastic

226
00:09:27,250 --> 00:09:32,830
stack now but if you say elk we still

227
00:09:29,050 --> 00:09:34,240
know what you mean and the entire stack

228
00:09:32,830 --> 00:09:35,920
looks something like this and the two

229
00:09:34,240 --> 00:09:37,710
components where we want to look into

230
00:09:35,920 --> 00:09:40,120
what's a comp is actually doing is

231
00:09:37,710 --> 00:09:41,440
elasticsearch which is kind of are all

232
00:09:40,120 --> 00:09:45,160
this component and where you store your

233
00:09:41,440 --> 00:09:47,440
data and beat that is the one the agent

234
00:09:45,160 --> 00:09:49,300
that runs probably on all your posts or

235
00:09:47,440 --> 00:09:52,290
is a sidecar on your containers or is a

236
00:09:49,300 --> 00:09:55,089
demon set in kubernetes to collect data

237
00:09:52,290 --> 00:09:56,680
that also uses that come to filter out

238
00:09:55,089 --> 00:09:57,970
what is running because well since you

239
00:09:56,680 --> 00:10:01,060
run rolled it out and lots of

240
00:09:57,970 --> 00:10:04,870
applications or lots of nodes you want

241
00:10:01,060 --> 00:10:06,400
to secure that so beach has components

242
00:10:04,870 --> 00:10:07,990
like file be to forward

243
00:10:06,400 --> 00:10:10,480
log files and metric be to collect

244
00:10:07,990 --> 00:10:13,330
metrics and audit beat will quickly look

245
00:10:10,480 --> 00:10:15,190
into that at the end to collect auditing

246
00:10:13,330 --> 00:10:18,700
files this is also how we will be able

247
00:10:15,190 --> 00:10:22,750
to figure out what second violations we

248
00:10:18,700 --> 00:10:25,570
have run into so what do we have here so

249
00:10:22,750 --> 00:10:27,760
in elastic search we are using the or

250
00:10:25,570 --> 00:10:30,190
let me start over elastic search is a

251
00:10:27,760 --> 00:10:32,350
Java process how do we get to the sec

252
00:10:30,190 --> 00:10:34,420
comp profiles or how do we interact with

253
00:10:32,350 --> 00:10:36,640
those low level system callers Java has

254
00:10:34,420 --> 00:10:38,920
something called Java native access GA

255
00:10:36,640 --> 00:10:40,959
and that is how you can interact with

256
00:10:38,920 --> 00:10:42,969
system libraries and do stuff like

257
00:10:40,959 --> 00:10:45,279
seccomp and that is what we were

258
00:10:42,970 --> 00:10:46,959
actively calling there and we have it's

259
00:10:45,279 --> 00:10:50,020
a bit small but probably you can see

260
00:10:46,959 --> 00:10:52,510
that we have a stack class bootstrap

261
00:10:50,020 --> 00:10:54,819
Java and this is pretty much when you

262
00:10:52,510 --> 00:10:56,650
start up the process where we register

263
00:10:54,820 --> 00:11:00,550
that second profile and allow or

264
00:10:56,650 --> 00:11:03,730
disallow law calls as needed here this

265
00:11:00,550 --> 00:11:06,430
is what the initial lives natives the

266
00:11:03,730 --> 00:11:09,430
calls we have here it does a lot of

267
00:11:06,430 --> 00:11:11,439
things one thing I always like to point

268
00:11:09,430 --> 00:11:13,660
out even though it's not SEC comp

269
00:11:11,440 --> 00:11:16,180
specific it's this one here

270
00:11:13,660 --> 00:11:17,740
this is a check that we always run if

271
00:11:16,180 --> 00:11:20,010
you want to run the server processes

272
00:11:17,740 --> 00:11:21,190
root we'll just system.exit

273
00:11:20,010 --> 00:11:22,600
the

274
00:11:21,190 --> 00:11:25,360
we think that is a really bad practice

275
00:11:22,600 --> 00:11:26,740
and sometimes people really want to run

276
00:11:25,360 --> 00:11:29,290
elasticsearch s route which we don't

277
00:11:26,740 --> 00:11:31,390
understand but the only way to make this

278
00:11:29,290 --> 00:11:33,099
work like run elasticsearch as route

279
00:11:31,390 --> 00:11:35,260
would be to fork the code and comment

280
00:11:33,100 --> 00:11:37,600
out this check and there is no other way

281
00:11:35,260 --> 00:11:39,069
around elasticsearch s route just just

282
00:11:37,600 --> 00:11:40,870
saying because this is something that

283
00:11:39,070 --> 00:11:42,880
people run into every night then and

284
00:11:40,870 --> 00:11:48,250
then we have this call here where we are

285
00:11:42,880 --> 00:11:51,250
trying to register the call and we'll

286
00:11:48,250 --> 00:11:54,250
reach out then configure set compass we

287
00:11:51,250 --> 00:11:57,220
need it what we're actually doing here

288
00:11:54,250 --> 00:11:58,360
in the initialization we are calling the

289
00:11:57,220 --> 00:11:59,830
different implementations for the

290
00:11:58,360 --> 00:12:02,230
different operating systems because only

291
00:11:59,830 --> 00:12:04,120
in Linux it's called seccomp but other

292
00:12:02,230 --> 00:12:05,920
operating systems have similar systems

293
00:12:04,120 --> 00:12:07,540
they have different names they behave

294
00:12:05,920 --> 00:12:09,400
slightly differently but we do try to

295
00:12:07,540 --> 00:12:11,949
use them as well I will just focus on

296
00:12:09,400 --> 00:12:14,949
second but you have similar things on

297
00:12:11,950 --> 00:12:17,110
some on BSD even on Windows you have

298
00:12:14,950 --> 00:12:18,910
something to kind of like filter down

299
00:12:17,110 --> 00:12:21,280
what system calls are allowed from your

300
00:12:18,910 --> 00:12:23,290
process and we will just initialize the

301
00:12:21,280 --> 00:12:24,250
one that is the right one for your

302
00:12:23,290 --> 00:12:26,349
operating system

303
00:12:24,250 --> 00:12:28,120
it's just I've added those to you so you

304
00:12:26,350 --> 00:12:32,320
can actually trace through the code and

305
00:12:28,120 --> 00:12:35,170
see how we call stuff and we will throw

306
00:12:32,320 --> 00:12:39,310
an exception if we cannot register the

307
00:12:35,170 --> 00:12:40,630
system call yeah so yeah similar

308
00:12:39,310 --> 00:12:42,760
features just different names and

309
00:12:40,630 --> 00:12:44,200
different operating systems you can find

310
00:12:42,760 --> 00:12:47,260
details in the source code even though

311
00:12:44,200 --> 00:12:49,660
I'll brush over them for today this is

312
00:12:47,260 --> 00:12:53,020
the one and this is the BPF

313
00:12:49,660 --> 00:12:54,730
configuration now that we register in

314
00:12:53,020 --> 00:12:57,100
elasticsearch how when you started up

315
00:12:54,730 --> 00:12:59,500
umm yeah for me it's still a bit of an

316
00:12:57,100 --> 00:13:00,970
arcane syntax but luckily we have these

317
00:12:59,500 --> 00:13:02,920
comments on the side which might be very

318
00:13:00,970 --> 00:13:04,930
hard to read but I'll publish the slides

319
00:13:02,920 --> 00:13:06,579
afterwards you can read them there what

320
00:13:04,930 --> 00:13:09,609
is kind of like the important part is

321
00:13:06,580 --> 00:13:12,970
here what we disallow is fork and

322
00:13:09,610 --> 00:13:16,000
execute of the process elasticsearch so

323
00:13:12,970 --> 00:13:18,520
even if we have some bad stuff in there

324
00:13:16,000 --> 00:13:20,800
which we used to have in the past every

325
00:13:18,520 --> 00:13:22,630
now and then especially around scripting

326
00:13:20,800 --> 00:13:24,550
and people could work another process

327
00:13:22,630 --> 00:13:26,020
out of elasticsearch this is not

328
00:13:24,550 --> 00:13:28,449
possible anymore because we just

329
00:13:26,020 --> 00:13:30,430
filtered it out so nobody can start a

330
00:13:28,450 --> 00:13:32,300
Bitcoin miner by forking out some other

331
00:13:30,430 --> 00:13:34,189
process or bind a shell

332
00:13:32,300 --> 00:13:37,130
of this year because of the system

333
00:13:34,190 --> 00:13:39,770
called is gone it's just quite a bit of

334
00:13:37,130 --> 00:13:43,220
configuration to actually make sure we

335
00:13:39,770 --> 00:13:44,960
have said that and at the end we're

336
00:13:43,220 --> 00:13:46,400
actually checking where we able to

337
00:13:44,960 --> 00:13:49,160
register the SATCOM

338
00:13:46,400 --> 00:13:51,709
filter and if yes we'll just continue

339
00:13:49,160 --> 00:13:54,560
and everything works as expected in case

340
00:13:51,710 --> 00:13:57,110
and if errors happen we will actually

341
00:13:54,560 --> 00:14:01,189
fail the process I I think even though I

342
00:13:57,110 --> 00:14:03,560
would need to validate that so this was

343
00:14:01,190 --> 00:14:05,030
elasticsearch beats is written in gold

344
00:14:03,560 --> 00:14:05,689
there we have a slightly different

345
00:14:05,030 --> 00:14:07,730
approach

346
00:14:05,690 --> 00:14:11,630
so for beats we have actually written

347
00:14:07,730 --> 00:14:13,820
our own library the got comp BPF it's

348
00:14:11,630 --> 00:14:17,260
basically a nicer wrapper so that you

349
00:14:13,820 --> 00:14:19,490
can use the ml to point figure set comp

350
00:14:17,260 --> 00:14:20,750
if you like a mule or not that's a

351
00:14:19,490 --> 00:14:23,120
different discussion but that game is

352
00:14:20,750 --> 00:14:24,620
pretty simple and also you just call it

353
00:14:23,120 --> 00:14:28,300
from your go code so that's pretty

354
00:14:24,620 --> 00:14:30,380
simple to configure what this looks like

355
00:14:28,300 --> 00:14:31,699
or actually this is not what we are

356
00:14:30,380 --> 00:14:34,670
actually using this is just an example

357
00:14:31,700 --> 00:14:38,480
here because what this does is it allows

358
00:14:34,670 --> 00:14:40,849
everything by default but it this allows

359
00:14:38,480 --> 00:14:43,400
these calls here so for example a

360
00:14:40,850 --> 00:14:46,250
connect to the outside world would be

361
00:14:43,400 --> 00:14:47,780
disallowed which doesn't make any sense

362
00:14:46,250 --> 00:14:50,360
for beads because Beach is there to

363
00:14:47,780 --> 00:14:52,220
collect data and then forward it being a

364
00:14:50,360 --> 00:14:53,870
data shipper you will need to connect to

365
00:14:52,220 --> 00:14:55,820
other systems so this is not what beats

366
00:14:53,870 --> 00:14:57,800
uses that's why editor contact is not

367
00:14:55,820 --> 00:14:59,570
used by beats just to be explicit

368
00:14:57,800 --> 00:15:01,150
because this would not allow us to

369
00:14:59,570 --> 00:15:04,550
forward any data this is just an example

370
00:15:01,150 --> 00:15:06,290
but this would be something if you know

371
00:15:04,550 --> 00:15:07,849
like you have some binary running that

372
00:15:06,290 --> 00:15:11,420
never needs to reach out to the network

373
00:15:07,850 --> 00:15:13,190
this is how you could configure order or

374
00:15:11,420 --> 00:15:15,439
filter out the system calls to actually

375
00:15:13,190 --> 00:15:17,240
not connect to anything or receive

376
00:15:15,440 --> 00:15:18,650
messages or whatever so if you have

377
00:15:17,240 --> 00:15:20,270
something that doesn't need those

378
00:15:18,650 --> 00:15:21,470
doesn't need to bind to an interface

379
00:15:20,270 --> 00:15:23,720
doesn't need to listen

380
00:15:21,470 --> 00:15:25,550
you could disallow that and then all the

381
00:15:23,720 --> 00:15:28,640
network traffic or access has been

382
00:15:25,550 --> 00:15:32,900
blocked what we actually have in beats

383
00:15:28,640 --> 00:15:34,490
is it has a white or a loud list it is

384
00:15:32,900 --> 00:15:36,620
going on pretty long and it's much

385
00:15:34,490 --> 00:15:38,840
longer these are all the ones that we

386
00:15:36,620 --> 00:15:40,520
whitelist and allow so it is more

387
00:15:38,840 --> 00:15:41,840
overhead to maintain this because

388
00:15:40,520 --> 00:15:43,550
elasticsearch had a different approach

389
00:15:41,840 --> 00:15:45,080
there we just blocked the forking in

390
00:15:43,550 --> 00:15:47,569
execution part

391
00:15:45,080 --> 00:15:50,990
we actually wipe lists all the calls

392
00:15:47,570 --> 00:15:52,910
that you need and this is a general rule

393
00:15:50,990 --> 00:15:55,280
here in Lippitt which is basically the

394
00:15:52,910 --> 00:15:57,260
base library specific beats might add

395
00:15:55,280 --> 00:16:00,350
specific permissions on top of that so

396
00:15:57,260 --> 00:16:02,120
you can basically just merge more things

397
00:16:00,350 --> 00:16:03,530
into this array that allows that but

398
00:16:02,120 --> 00:16:05,150
this is kind of the baseline that we

399
00:16:03,530 --> 00:16:07,640
maintain that all the beats have these

400
00:16:05,150 --> 00:16:10,340
and then you could add some on top of

401
00:16:07,640 --> 00:16:12,410
those and only those are allowed

402
00:16:10,340 --> 00:16:13,790
everything else is forbidden that is

403
00:16:12,410 --> 00:16:20,589
kind of the approach that we have taken

404
00:16:13,790 --> 00:16:20,589
with Beats here so let's try something

405
00:16:20,680 --> 00:16:28,790
so for example let's run that cat let's

406
00:16:24,410 --> 00:16:32,780
bind to port 1025 if you have a computer

407
00:16:28,790 --> 00:16:34,040
open or a phone with a telnet client you

408
00:16:32,780 --> 00:16:37,689
can do the same because this is an

409
00:16:34,040 --> 00:16:41,329
online instance you can just call it so

410
00:16:37,690 --> 00:16:42,920
this is the domain Sarah WTF because wTF

411
00:16:41,330 --> 00:16:47,300
is obviously the right thing for any

412
00:16:42,920 --> 00:16:50,270
demo and we connect to port 1025 I have

413
00:16:47,300 --> 00:16:54,229
actually opened that so this is binding

414
00:16:50,270 --> 00:16:57,010
to any interface on port 1025 I can just

415
00:16:54,230 --> 00:17:01,910
connect to that and then I can just say

416
00:16:57,010 --> 00:17:04,040
hello Philip and on the other hand hello

417
00:17:01,910 --> 00:17:05,720
Philip is coming out if anybody wants to

418
00:17:04,040 --> 00:17:09,619
try it out feel free to send me a

419
00:17:05,720 --> 00:17:12,440
message and I will receive that so I

420
00:17:09,619 --> 00:17:14,179
will let that run for a moment if you

421
00:17:12,440 --> 00:17:17,089
want to chat with it or actually we can

422
00:17:14,180 --> 00:17:20,930
kill that and instrument that a bit

423
00:17:17,089 --> 00:17:23,270
better so what I'm doing here is I'm

424
00:17:20,930 --> 00:17:26,089
using s phrase to actually get a bit

425
00:17:23,270 --> 00:17:27,949
more insight into the process here I'm

426
00:17:26,089 --> 00:17:30,679
just interested in the binding of the

427
00:17:27,949 --> 00:17:32,960
process so when I run this you can see

428
00:17:30,680 --> 00:17:36,410
this is the call that is being run here

429
00:17:32,960 --> 00:17:38,810
we have pint call to that port to that

430
00:17:36,410 --> 00:17:41,630
address and then it is actually running

431
00:17:38,810 --> 00:17:44,810
and we'll be using that later on to

432
00:17:41,630 --> 00:17:48,350
debug it if we actually kill or disallow

433
00:17:44,810 --> 00:17:50,659
something from the process so what we

434
00:17:48,350 --> 00:17:52,939
have here is we think this one we've

435
00:17:50,660 --> 00:17:55,430
seen this one I'm using the library

436
00:17:52,940 --> 00:17:58,410
called fire jail anybody heard of a used

437
00:17:55,430 --> 00:18:01,230
fire jail so fire jail is

438
00:17:58,410 --> 00:18:04,800
that allows you to set up namespaces and

439
00:18:01,230 --> 00:18:07,290
second sent boxes and I'm just using

440
00:18:04,800 --> 00:18:10,889
that to with one command line argument

441
00:18:07,290 --> 00:18:13,230
actually secure my MC our net cat call

442
00:18:10,890 --> 00:18:16,800
and to actually disallow the binding on

443
00:18:13,230 --> 00:18:18,690
the network interface which looks just

444
00:18:16,800 --> 00:18:21,450
like this so you can see we will call

445
00:18:18,690 --> 00:18:25,020
fire jail with the no profile option and

446
00:18:21,450 --> 00:18:27,780
then we set the second drop rule that if

447
00:18:25,020 --> 00:18:30,210
it binds it should not allow that one

448
00:18:27,780 --> 00:18:38,820
and then we just call the process netcat

449
00:18:30,210 --> 00:18:41,150
on port 1025 so notice this is not the

450
00:18:38,820 --> 00:18:41,149
one I want

451
00:18:42,230 --> 00:18:51,560
this is the one I want what will happen

452
00:18:45,050 --> 00:18:54,470
if I run this any guesses yes it will

453
00:18:51,560 --> 00:18:59,060
exit very quickly and it will tell us

454
00:18:54,470 --> 00:19:00,830
well second protect enabled and then it

455
00:18:59,060 --> 00:19:04,040
will tell you well it didn't allow that

456
00:19:00,830 --> 00:19:06,970
one to actually see what is going on in

457
00:19:04,040 --> 00:19:10,700
there we'll fall back to s trace again

458
00:19:06,970 --> 00:19:13,310
so here I'm using fire jail with the

459
00:19:10,700 --> 00:19:15,860
same thing but here I'm adding s trace

460
00:19:13,310 --> 00:19:17,720
again on the call so when you run that

461
00:19:15,860 --> 00:19:19,939
you will get a lot of output of

462
00:19:17,720 --> 00:19:22,790
everything that the system calls that

463
00:19:19,940 --> 00:19:26,270
are being done internally here the

464
00:19:22,790 --> 00:19:29,149
relevant part is this one here you see

465
00:19:26,270 --> 00:19:32,510
you try to do the bind and then you have

466
00:19:29,150 --> 00:19:35,570
the called B order process being killed

467
00:19:32,510 --> 00:19:37,720
and we that will actually be locked as

468
00:19:35,570 --> 00:19:40,790
well so this is how you can very simply

469
00:19:37,720 --> 00:19:42,830
kind of like simulate setting a second

470
00:19:40,790 --> 00:19:44,930
profile and then a process being killed

471
00:19:42,830 --> 00:19:46,970
and actually monitoring it mid s trace

472
00:19:44,930 --> 00:19:49,220
to see that this is not allowed this

473
00:19:46,970 --> 00:19:52,430
kind of the hello world example of

474
00:19:49,220 --> 00:19:55,310
second and s trace and this is as far as

475
00:19:52,430 --> 00:19:59,500
we will push this for today so it's not

476
00:19:55,310 --> 00:19:59,500
very wanted to go yet now most like

477
00:20:01,340 --> 00:20:08,250
so we have seen that one and now you

478
00:20:06,540 --> 00:20:10,050
don't want just to block everything you

479
00:20:08,250 --> 00:20:12,090
want to collect what has happened in

480
00:20:10,050 --> 00:20:13,860
your system as well so you want to

481
00:20:12,090 --> 00:20:16,260
actually see that somebody has run into

482
00:20:13,860 --> 00:20:19,020
a sec comp violation and you want to get

483
00:20:16,260 --> 00:20:22,860
to that so for that you could use for

484
00:20:19,020 --> 00:20:25,980
example oddity anybody using oddity no

485
00:20:22,860 --> 00:20:28,560
it's a Linux auditing daemon basically

486
00:20:25,980 --> 00:20:31,740
you can define some rules of what should

487
00:20:28,560 --> 00:20:34,020
be collected in terms of security events

488
00:20:31,740 --> 00:20:36,120
it could be stuff like you were binding

489
00:20:34,020 --> 00:20:39,030
to some interface you were accessing a

490
00:20:36,120 --> 00:20:41,129
file where X is executing a binary it

491
00:20:39,030 --> 00:20:43,620
has its own interesting syntax to

492
00:20:41,130 --> 00:20:46,860
configure stuff but in a Linux world

493
00:20:43,620 --> 00:20:49,350
it's pretty widely used to actually see

494
00:20:46,860 --> 00:20:51,689
what is happening and you could by the

495
00:20:49,350 --> 00:20:57,300
way look at what that looks like is if

496
00:20:51,690 --> 00:21:02,310
you say sudo or search this is stuff

497
00:20:57,300 --> 00:21:05,790
that Oddity would spit out for example

498
00:21:02,310 --> 00:21:08,159
here we have been I don't know we've

499
00:21:05,790 --> 00:21:10,379
been calling proc title and then we have

500
00:21:08,160 --> 00:21:12,420
collected a message and then it has some

501
00:21:10,380 --> 00:21:16,440
prop title that we have collected or you

502
00:21:12,420 --> 00:21:20,190
could see here we have been running var

503
00:21:16,440 --> 00:21:22,680
run and sed socket here we have been

504
00:21:20,190 --> 00:21:24,660
running something on the pass so this is

505
00:21:22,680 --> 00:21:26,010
just all auditing information that the

506
00:21:24,660 --> 00:21:28,860
kernel can collect as well

507
00:21:26,010 --> 00:21:30,900
what part of seccomp this is all it D

508
00:21:28,860 --> 00:21:32,580
but this is also very useful to actually

509
00:21:30,900 --> 00:21:34,830
figure out what that stuff has been

510
00:21:32,580 --> 00:21:37,320
running on your system the main problem

511
00:21:34,830 --> 00:21:38,970
here is to centralize these locks as a

512
00:21:37,320 --> 00:21:40,050
bit of a pain in the ass because every

513
00:21:38,970 --> 00:21:40,620
single line looks different than the

514
00:21:40,050 --> 00:21:43,409
other one

515
00:21:40,620 --> 00:21:44,729
and to actually extract the meaningful

516
00:21:43,410 --> 00:21:47,430
information you would need to write the

517
00:21:44,730 --> 00:21:49,730
regular expression here who likes

518
00:21:47,430 --> 00:21:52,770
writing regular expressions

519
00:21:49,730 --> 00:21:54,840
that's the Stockholm Syndrome right

520
00:21:52,770 --> 00:21:57,240
where you get so used to actually doing

521
00:21:54,840 --> 00:22:02,100
some stuff that it's supposed to be the

522
00:21:57,240 --> 00:22:03,720
right way yeah I'm a bit lazy and as a

523
00:22:02,100 --> 00:22:05,340
company we try to avoid some stuff that

524
00:22:03,720 --> 00:22:07,830
we don't like and so for that we have

525
00:22:05,340 --> 00:22:09,809
another page called audit beat that is

526
00:22:07,830 --> 00:22:12,030
using SEC comp but all it beat can

527
00:22:09,809 --> 00:22:13,980
actually get the oddity information

528
00:22:12,030 --> 00:22:15,660
that's the entire idea and we have

529
00:22:13,980 --> 00:22:20,460
another base library behind that and

530
00:22:15,660 --> 00:22:22,860
what that is doing is it's the go-live

531
00:22:20,460 --> 00:22:27,059
audit library and it's basically using

532
00:22:22,860 --> 00:22:28,620
the audit D data to not write that out

533
00:22:27,059 --> 00:22:29,970
to a file but just get in a structured

534
00:22:28,620 --> 00:22:31,439
format from the application right away

535
00:22:29,970 --> 00:22:33,740
and then we can skip the regular

536
00:22:31,440 --> 00:22:37,710
expression part but we can collect that

537
00:22:33,740 --> 00:22:40,380
which then looks something like this

538
00:22:37,710 --> 00:22:42,030
so if you've never seen it this is

539
00:22:40,380 --> 00:22:44,670
Cubana this is where we put stuff

540
00:22:42,030 --> 00:22:46,678
together and we have recently added a

541
00:22:44,670 --> 00:22:49,710
jump right to this part we have added

542
00:22:46,679 --> 00:22:51,240
something we call a seam this is

543
00:22:49,710 --> 00:22:53,130
basically the visualization of what we

544
00:22:51,240 --> 00:22:54,990
have collected with audit beat so you

545
00:22:53,130 --> 00:22:59,250
can see here audit beat has collected

546
00:22:54,990 --> 00:23:00,809
from my host 940,000 security events for

547
00:22:59,250 --> 00:23:02,910
example we have seen logins that's

548
00:23:00,809 --> 00:23:04,710
probably fail ssh attempts and stuff

549
00:23:02,910 --> 00:23:06,059
like that i know what packets are

550
00:23:04,710 --> 00:23:09,630
installed with processes are running

551
00:23:06,059 --> 00:23:12,030
what users I have system log files you

552
00:23:09,630 --> 00:23:14,610
could add other stuff like seek and bro

553
00:23:12,030 --> 00:23:16,740
seeker bro as three catalogs you could

554
00:23:14,610 --> 00:23:19,080
add stuff from your network devices all

555
00:23:16,740 --> 00:23:21,690
of that can flow together here and then

556
00:23:19,080 --> 00:23:23,639
you could just look at the outputs here

557
00:23:21,690 --> 00:23:25,679
so you can see what has succeeded in

558
00:23:23,640 --> 00:23:27,300
what has failed for example and you can

559
00:23:25,679 --> 00:23:29,190
sue see which users have been running

560
00:23:27,300 --> 00:23:31,200
here what I'm interested in I just

561
00:23:29,190 --> 00:23:34,140
searched for SEC comp because I know

562
00:23:31,200 --> 00:23:36,960
there was a second violation and then

563
00:23:34,140 --> 00:23:38,490
down here you can see second pass for

564
00:23:36,960 --> 00:23:40,140
example being called by the main page

565
00:23:38,490 --> 00:23:41,940
because yeah it wasn't a call for the

566
00:23:40,140 --> 00:23:45,059
main page but what I'm more interested

567
00:23:41,940 --> 00:23:48,870
in is this one here and you could just

568
00:23:45,059 --> 00:23:52,440
extend a time line here drop in that

569
00:23:48,870 --> 00:23:54,360
call and then you see these were in the

570
00:23:52,440 --> 00:23:56,250
last fifteen minutes because this is

571
00:23:54,360 --> 00:23:57,389
filtered down to just the last also it

572
00:23:56,250 --> 00:23:59,970
not last 24 hours

573
00:23:57,390 --> 00:24:02,160
this is when we ran that we could open

574
00:23:59,970 --> 00:24:03,240
one of these here I switch over to the

575
00:24:02,160 --> 00:24:05,400
Jason

576
00:24:03,240 --> 00:24:08,940
because this is the actual event that we

577
00:24:05,400 --> 00:24:11,340
have collected the relevant part is here

578
00:24:08,940 --> 00:24:13,590
you see from the audit D module we have

579
00:24:11,340 --> 00:24:16,110
collected something here and you can see

580
00:24:13,590 --> 00:24:18,060
we have a set comp action that was the

581
00:24:16,110 --> 00:24:20,189
one that was triggered and you can see

582
00:24:18,060 --> 00:24:21,629
which user was doing that that is my

583
00:24:20,190 --> 00:24:23,930
user that has been running this and

584
00:24:21,630 --> 00:24:27,660
somewhere in there it would say that

585
00:24:23,930 --> 00:24:30,300
netcat was trying to do this and here

586
00:24:27,660 --> 00:24:33,810
you have the actual event that has been

587
00:24:30,300 --> 00:24:36,120
collected by Oddity and then you can say

588
00:24:33,810 --> 00:24:39,179
okay I see here a violation has happened

589
00:24:36,120 --> 00:24:41,129
we need to actually look into that user

590
00:24:39,180 --> 00:24:43,110
or that binary or whatever has been

591
00:24:41,130 --> 00:24:46,950
happening so you can combine all of that

592
00:24:43,110 --> 00:24:50,639
here so since we're running short on

593
00:24:46,950 --> 00:24:54,090
time time to wrap up security is

594
00:24:50,640 --> 00:24:55,710
generally made up of lots of bricks so

595
00:24:54,090 --> 00:24:57,480
it's part of how you program your

596
00:24:55,710 --> 00:24:59,070
application but it cannot be part of

597
00:24:57,480 --> 00:25:01,560
stuff that you do on the operating

598
00:24:59,070 --> 00:25:04,620
system including second or oddity for

599
00:25:01,560 --> 00:25:07,230
example second is generally vitally

600
00:25:04,620 --> 00:25:08,969
available and used so do use it because

601
00:25:07,230 --> 00:25:11,870
it's another nice layer of protection

602
00:25:08,970 --> 00:25:15,600
that might save your ass at some point

603
00:25:11,870 --> 00:25:17,129
any questions if you want secrets by the

604
00:25:15,600 --> 00:25:18,750
way on the table in the corner there I

605
00:25:17,130 --> 00:25:20,580
have a couple of stickers to just grab

606
00:25:18,750 --> 00:25:25,430
them I think we have like three minutes

607
00:25:20,580 --> 00:25:25,429
or so left so questions

608
00:25:28,960 --> 00:25:40,810
this is not New Year's what about the

609
00:25:34,280 --> 00:25:40,810
users I'm using fire protection

610
00:25:41,840 --> 00:25:53,178
I mean 5 yes five gel comes with the the

611
00:25:51,230 --> 00:25:57,529
profiles and for various applications

612
00:25:53,179 --> 00:26:01,690
and you could use them but what do you

613
00:25:57,529 --> 00:26:01,690
mean that the ruleset per application or

614
00:26:08,250 --> 00:26:14,220
I mean it I'm not I'm not sure I'm

615
00:26:11,309 --> 00:26:20,908
following the question fully but you

616
00:26:14,220 --> 00:26:22,620
have on the github repository you you

617
00:26:20,909 --> 00:26:26,460
have the code and then you have the

618
00:26:22,620 --> 00:26:27,959
rules that people provided and you can

619
00:26:26,460 --> 00:26:30,179
figure out what what is available and if

620
00:26:27,960 --> 00:26:31,799
that works if those are the perfect

621
00:26:30,179 --> 00:26:34,860
rules I'm not sure and it will also

622
00:26:31,799 --> 00:26:36,690
depend on the application and part of

623
00:26:34,860 --> 00:26:38,490
the problem is it might work today but

624
00:26:36,690 --> 00:26:40,830
if they have an update and then do some

625
00:26:38,490 --> 00:26:42,150
new system calls you your application

626
00:26:40,830 --> 00:26:45,149
might just fail but that's just

627
00:26:42,150 --> 00:26:46,830
something you need to fix or depending

628
00:26:45,150 --> 00:26:47,309
on if you wipe the blacklist because if

629
00:26:46,830 --> 00:26:49,168
you just

630
00:26:47,309 --> 00:26:50,908
blakeley's it might be fine if you need

631
00:26:49,169 --> 00:26:56,700
whitelisting it might be more tricky but

632
00:26:50,909 --> 00:26:58,020
that depends on the rules yeah i'm so

633
00:26:56,700 --> 00:26:59,610
for example in elasticsearch what i've

634
00:26:58,020 --> 00:27:00,900
shown you what we are doing here is

635
00:26:59,610 --> 00:27:02,129
blacklisting whereas in beach we are

636
00:27:00,900 --> 00:27:05,850
using whitelisting so you could use

637
00:27:02,130 --> 00:27:07,650
either approach depending on how you

638
00:27:05,850 --> 00:27:14,280
register the filter and how to approach

639
00:27:07,650 --> 00:27:16,789
that then cool yeah wait for the

640
00:27:14,280 --> 00:27:16,789
microphone please

641
00:27:25,950 --> 00:27:30,659
I retired in the duration

642
00:27:31,309 --> 00:27:37,710
yes I mean so why we could use so that

643
00:27:35,789 --> 00:27:43,739
the syntax kind of like the the right

644
00:27:37,710 --> 00:27:48,840
syntax that is see like was let me find

645
00:27:43,739 --> 00:27:51,210
the elasticsearch example this one would

646
00:27:48,840 --> 00:27:53,129
be kind of like the the syntax that you

647
00:27:51,210 --> 00:27:54,960
would use in general but we have

648
00:27:53,129 --> 00:27:56,879
basically done is we wrote the library

649
00:27:54,960 --> 00:27:59,789
for go that will take the other

650
00:27:56,879 --> 00:28:02,879
configuration and just create the right

651
00:27:59,789 --> 00:28:04,139
BPF syntax out of that and so you could

652
00:28:02,879 --> 00:28:06,269
do that for any other programming

653
00:28:04,139 --> 00:28:08,129
language or jason or whatever you want

654
00:28:06,269 --> 00:28:12,989
to write that in but you would need to

655
00:28:08,129 --> 00:28:16,529
write it so what we have done then is we

656
00:28:12,989 --> 00:28:19,619
have used this is for example our

657
00:28:16,529 --> 00:28:25,889
library that this is for dog and then

658
00:28:19,619 --> 00:28:27,779
game to actually just provide yeah it it

659
00:28:25,889 --> 00:28:30,149
tells you how to actually use it and how

660
00:28:27,779 --> 00:28:33,869
to generate the right second profile out

661
00:28:30,149 --> 00:28:37,649
of game through go for the second vpf

662
00:28:33,869 --> 00:28:41,789
syntax but this is custom stuff that we

663
00:28:37,649 --> 00:28:43,369
had to be sure i guess we have time for

664
00:28:41,789 --> 00:28:47,840
one final question

665
00:28:43,369 --> 00:28:47,840
otherwise spank me afterwards for more

666
00:29:05,529 --> 00:29:10,220
that could be very much a trolling

667
00:29:07,610 --> 00:29:12,229
question and I'm careful not to answer

668
00:29:10,220 --> 00:29:13,399
this year so to say I would not say that

669
00:29:12,230 --> 00:29:16,570
Linux is the most secure operating

670
00:29:13,399 --> 00:29:16,570
system because then the

671
00:29:23,310 --> 00:29:27,840
yeah if you if you want to have a heated

672
00:29:25,830 --> 00:29:31,050
discussion with the FreeBSD folks for

673
00:29:27,840 --> 00:29:34,500
example and you could say that and I I'm

674
00:29:31,050 --> 00:29:37,530
very careful to avoid that here because

675
00:29:34,500 --> 00:29:40,160
I I might end up beaten up in a dark

676
00:29:37,530 --> 00:29:40,160
alley afterwards

677
00:29:41,740 --> 00:29:50,170
I so I would be very careful not to say

678
00:29:48,670 --> 00:29:51,610
better because it is really just

679
00:29:50,170 --> 00:29:54,330
different it's different approaches and

680
00:29:51,610 --> 00:29:56,949
different things you can do or cannot do

681
00:29:54,330 --> 00:29:58,928
and this will lead to very heated

682
00:29:56,950 --> 00:30:02,020
discussions if you if you try to say

683
00:29:58,929 --> 00:30:03,880
that so I'm I would be very defensive

684
00:30:02,020 --> 00:30:06,070
and careful here and they say like this

685
00:30:03,880 --> 00:30:08,080
is what Linux does and this is how it

686
00:30:06,070 --> 00:30:09,820
works and it probably adds layer of

687
00:30:08,080 --> 00:30:11,530
protection for you and other operating

688
00:30:09,820 --> 00:30:13,419
systems have something similar which

689
00:30:11,530 --> 00:30:16,000
will behave which is called differently

690
00:30:13,420 --> 00:30:17,860
and behaves differently but to be honest

691
00:30:16,000 --> 00:30:20,920
also I have never looked into the BSD or

692
00:30:17,860 --> 00:30:22,990
Windows implementation so I would avoid

693
00:30:20,920 --> 00:30:27,400
any any qualification of what is better

694
00:30:22,990 --> 00:30:30,480
or worse others have that as well and I

695
00:30:27,400 --> 00:30:32,230
am trying to not have a flame war here

696
00:30:30,480 --> 00:30:34,030
okay good

697
00:30:32,230 --> 00:30:37,290
if you have any questions afterwards I

698
00:30:34,030 --> 00:30:37,290
just find me thanks a lot

699
00:31:02,390 --> 00:31:04,450
you

