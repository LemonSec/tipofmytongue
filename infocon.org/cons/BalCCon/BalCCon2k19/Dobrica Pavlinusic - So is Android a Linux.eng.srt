1
00:00:25,210 --> 00:00:28,880
ok everybody we're gonna start with our

2
00:00:27,710 --> 00:00:31,280
next talk now

3
00:00:28,880 --> 00:00:33,470
so he's enjoyed Linux is next

4
00:00:31,280 --> 00:00:43,040
presentation brought to you by doublet

5
00:00:33,470 --> 00:00:46,180
SAP public enjoy thank you and you

6
00:00:43,040 --> 00:00:48,920
haven't even heard anything yet

7
00:00:46,180 --> 00:00:51,620
hello my name is dr. Paula village as

8
00:00:48,920 --> 00:00:54,830
here all that they said and in this talk

9
00:00:51,620 --> 00:00:59,059
I will try to talk to you about my 10

10
00:00:54,830 --> 00:01:01,489
year journey to have mainline Linux you

11
00:00:59,059 --> 00:01:04,870
know the one which I compiled on my own

12
00:01:01,489 --> 00:01:07,899
computer running on the Android devices

13
00:01:04,870 --> 00:01:12,320
why we are talking about that today

14
00:01:07,900 --> 00:01:16,490
because in my opinion with my Glu head

15
00:01:12,320 --> 00:01:20,000
on if you can't compile the kernel for

16
00:01:16,490 --> 00:01:22,310
your device it's not actually Linux

17
00:01:20,000 --> 00:01:24,650
right if you can't download the Linux

18
00:01:22,310 --> 00:01:29,090
kernel and compile it and place your

19
00:01:24,650 --> 00:01:31,610
device that device surely isn't wins on

20
00:01:29,090 --> 00:01:34,610
the other hand I don't particularly like

21
00:01:31,610 --> 00:01:38,360
Android and I would rather run new

22
00:01:34,610 --> 00:01:43,039
userland on top of my device how many of

23
00:01:38,360 --> 00:01:45,920
you actually have Android device almost

24
00:01:43,040 --> 00:01:49,910
everything how many of you can actually

25
00:01:45,920 --> 00:01:54,380
compile the kernel for your device any

26
00:01:49,910 --> 00:01:58,340
device ok few hands much better than

27
00:01:54,380 --> 00:02:00,679
none but in its perfect circumstances we

28
00:01:58,340 --> 00:02:04,240
all would raise our hands and say we

29
00:02:00,680 --> 00:02:07,070
have totally completely free system

30
00:02:04,240 --> 00:02:09,978
during the presentation on upper right

31
00:02:07,070 --> 00:02:12,049
you will see the year if there is a year

32
00:02:09,979 --> 00:02:15,890
there the statements on the slide

33
00:02:12,050 --> 00:02:20,569
reflect date year so we will start start

34
00:02:15,890 --> 00:02:24,679
with today 2019 and why we are talking

35
00:02:20,569 --> 00:02:28,040
about this topic today because nowadays

36
00:02:24,680 --> 00:02:30,590
as we will see in the rest of the

37
00:02:28,040 --> 00:02:31,769
presentation we are each in much better

38
00:02:30,590 --> 00:02:34,320
shape

39
00:02:31,770 --> 00:02:36,240
ten years ago to be actually able to

40
00:02:34,320 --> 00:02:39,299
compile our kernel

41
00:02:36,240 --> 00:02:41,970
most of the GPUs nowadays have

42
00:02:39,300 --> 00:02:43,590
reverse-engineered drivers which is

43
00:02:41,970 --> 00:02:46,770
somewhat important if you have device

44
00:02:43,590 --> 00:02:49,260
which most because on with the screen so

45
00:02:46,770 --> 00:02:51,600
you probably won't run the care of a

46
00:02:49,260 --> 00:02:55,350
server on your Android cell phone but

47
00:02:51,600 --> 00:02:58,730
thanks to Leonardo and Butley and their

48
00:02:55,350 --> 00:03:02,790
efforts in last five years or so this is

49
00:02:58,730 --> 00:03:07,890
almost as possible as it was to install

50
00:03:02,790 --> 00:03:13,380
the Linux on your PC back in 1995 which

51
00:03:07,890 --> 00:03:15,660
is actually good place to be in 2010 I

52
00:03:13,380 --> 00:03:20,280
got my first Linux device with Virgie

53
00:03:15,660 --> 00:03:22,859
1hdc even if somebody remembers and I

54
00:03:20,280 --> 00:03:26,310
promptly bricked it trying to get the

55
00:03:22,860 --> 00:03:29,460
root on it at that at the same time I

56
00:03:26,310 --> 00:03:31,440
started first of my unrelated project

57
00:03:29,460 --> 00:03:34,050
which is basically just a repository for

58
00:03:31,440 --> 00:03:37,980
useful common line utilities which you

59
00:03:34,050 --> 00:03:40,470
can use to get some information from

60
00:03:37,980 --> 00:03:44,459
your Android device it mostly uses ADB

61
00:03:40,470 --> 00:03:46,590
and most of those things are actually

62
00:03:44,460 --> 00:03:49,620
somewhere on the web but this is just a

63
00:03:46,590 --> 00:03:52,800
nice place to collect them all on the

64
00:03:49,620 --> 00:03:54,660
other hand I was very very unimpressed

65
00:03:52,800 --> 00:03:58,110
with other in the ecosystem at all

66
00:03:54,660 --> 00:03:59,850
because in 2007 so three years earlier I

67
00:03:58,110 --> 00:04:02,580
actually had the open mark of it was

68
00:03:59,850 --> 00:04:05,250
completely free platform for which I

69
00:04:02,580 --> 00:04:07,740
could actually compile my own kernel in

70
00:04:05,250 --> 00:04:11,640
my own user space and I didn't have to

71
00:04:07,740 --> 00:04:15,630
first find the suitable security bug to

72
00:04:11,640 --> 00:04:18,029
be able to actually compile at that time

73
00:04:15,630 --> 00:04:22,620
sign again for my cell phone which is

74
00:04:18,029 --> 00:04:26,460
community supported so not impressed by

75
00:04:22,620 --> 00:04:30,150
2012 if you remember we had the TV

76
00:04:26,460 --> 00:04:32,520
dongle craze it was the time where every

77
00:04:30,150 --> 00:04:34,880
device which wasn't a cell phone and had

78
00:04:32,520 --> 00:04:36,998
an Android had to have the HDMI

79
00:04:34,880 --> 00:04:41,169
connector only

80
00:04:36,999 --> 00:04:43,089
and I decided to buy my second Android

81
00:04:41,169 --> 00:04:45,399
device for play I decided to buy this

82
00:04:43,089 --> 00:04:47,259
rock chick which seemed like a good

83
00:04:45,399 --> 00:04:51,819
choice at the time because it was big

84
00:04:47,259 --> 00:04:54,789
dual-core CPU and costed 45 bucks 42

85
00:04:51,819 --> 00:04:56,649
bucks as you can see my threshold for

86
00:04:54,789 --> 00:05:04,419
devices which I don't really need is

87
00:04:56,649 --> 00:05:07,659
kind of 50 bucks and that device was my

88
00:05:04,419 --> 00:05:11,438
first attempt to actually run my own

89
00:05:07,659 --> 00:05:14,049
kernel on it at that point it was not

90
00:05:11,439 --> 00:05:16,419
supported at all even though the world's

91
00:05:14,049 --> 00:05:20,378
not even wind or kernel which I could

92
00:05:16,419 --> 00:05:23,769
compile and make some somehow usable but

93
00:05:20,379 --> 00:05:25,899
I learned that rock chip and we'll see

94
00:05:23,769 --> 00:05:29,049
that's mostly true for all the other

95
00:05:25,899 --> 00:05:32,889
manufacturers also does have support

96
00:05:29,049 --> 00:05:37,359
which enables you to reflash device

97
00:05:32,889 --> 00:05:39,789
using usb on you might ask the question

98
00:05:37,360 --> 00:05:41,889
why would rock chip do something like

99
00:05:39,789 --> 00:05:44,529
this because when they produce the

100
00:05:41,889 --> 00:05:46,689
dongles in the Chinese factory the

101
00:05:44,529 --> 00:05:48,610
dongle they actually solder all the

102
00:05:46,689 --> 00:05:51,699
components on the board but the board

103
00:05:48,610 --> 00:05:53,439
itself is empty the land chip on the

104
00:05:51,699 --> 00:05:56,439
board doesn't have the operating system

105
00:05:53,439 --> 00:06:01,389
so they do need some kind of mechanism

106
00:05:56,439 --> 00:06:03,249
to do the initial load and we can use

107
00:06:01,389 --> 00:06:06,099
the same mechanism to actually take over

108
00:06:03,249 --> 00:06:07,959
the control of the device back in those

109
00:06:06,099 --> 00:06:11,919
days rock chip was just announcing

110
00:06:07,959 --> 00:06:15,279
quad-core CPUs and they said they will

111
00:06:11,919 --> 00:06:17,139
lose power we are which is not well

112
00:06:15,279 --> 00:06:20,110
supported even today and the room looks

113
00:06:17,139 --> 00:06:22,629
actually not supported at all so in a

114
00:06:20,110 --> 00:06:24,999
sense I lost a little bit of interest

115
00:06:22,629 --> 00:06:27,549
for this particular board although this

116
00:06:24,999 --> 00:06:29,199
board nowadays is actually supported by

117
00:06:27,549 --> 00:06:31,029
the optimum kernels so if you have

118
00:06:29,199 --> 00:06:32,829
something like this you can check out

119
00:06:31,029 --> 00:06:35,379
the kernel from get carnal org and

120
00:06:32,829 --> 00:06:38,319
everything on this board will actually

121
00:06:35,379 --> 00:06:41,079
work for other rock chips these days the

122
00:06:38,319 --> 00:06:43,269
support is also quite good mostly

123
00:06:41,079 --> 00:06:46,510
because the Google at one point in time

124
00:06:43,269 --> 00:06:49,540
started to produce

125
00:06:46,510 --> 00:06:52,659
books or Chromebooks with rock chips

126
00:06:49,540 --> 00:06:54,970
chipsets appeared of the market and when

127
00:06:52,660 --> 00:06:57,760
Google does that lot of things end up in

128
00:06:54,970 --> 00:07:01,570
upstream so situation with the rock ship

129
00:06:57,760 --> 00:07:04,390
these days is rather good a little bit

130
00:07:01,570 --> 00:07:09,010
later that year I got another really

131
00:07:04,390 --> 00:07:11,740
cheap device this was the blue collar

132
00:07:09,010 --> 00:07:14,289
which was basically designed to be very

133
00:07:11,740 --> 00:07:18,520
cheap bar balance and Nobles ebook

134
00:07:14,290 --> 00:07:20,890
reader and this one also had power we

135
00:07:18,520 --> 00:07:26,260
are it was somewhat unfortunate but had

136
00:07:20,890 --> 00:07:29,020
different CPU which was ohmic and I was

137
00:07:26,260 --> 00:07:31,030
looking at it it said oh it's really

138
00:07:29,020 --> 00:07:33,640
lousy laptop I wondering if I can

139
00:07:31,030 --> 00:07:35,859
actually make it somewhat useful for me

140
00:07:33,640 --> 00:07:39,010
for example to have secondary display

141
00:07:35,860 --> 00:07:40,870
with Excel even and at that point I

142
00:07:39,010 --> 00:07:43,599
learned that you can actually stop the

143
00:07:40,870 --> 00:07:45,820
whole Android user space which runs on

144
00:07:43,600 --> 00:07:49,990
your phone using those simple comments

145
00:07:45,820 --> 00:07:52,840
and run your own binaries in chroot for

146
00:07:49,990 --> 00:07:55,090
example debian so this is one of the

147
00:07:52,840 --> 00:07:59,770
ways you can reuse your old device

148
00:07:55,090 --> 00:08:04,479
without flashing kernel and then in 2013

149
00:07:59,770 --> 00:08:07,630
I acquired my first Allwinner device I

150
00:08:04,480 --> 00:08:10,180
should say Here I am all very biased

151
00:08:07,630 --> 00:08:12,580
I like all winner very much and if you

152
00:08:10,180 --> 00:08:14,920
take a look at the years I am still

153
00:08:12,580 --> 00:08:17,830
using this device today and it's really

154
00:08:14,920 --> 00:08:20,410
really well supported

155
00:08:17,830 --> 00:08:24,700
at that time all winner had either

156
00:08:20,410 --> 00:08:27,100
single core or double core CPUs the CPU

157
00:08:24,700 --> 00:08:29,860
itself is designed in such a way that it

158
00:08:27,100 --> 00:08:32,370
will boot from the SD card if the SD

159
00:08:29,860 --> 00:08:36,159
card is present and has the correct

160
00:08:32,370 --> 00:08:38,470
magic reducing and bootloader on it so

161
00:08:36,159 --> 00:08:41,620
it's also unbreakable you can do

162
00:08:38,470 --> 00:08:44,020
anything with it it also has the ability

163
00:08:41,620 --> 00:08:49,160
to boot from the USB it's called

164
00:08:44,020 --> 00:08:53,959
FAL in Allwinner and it had really

165
00:08:49,160 --> 00:08:56,209
good community around Linux and SUSE

166
00:08:53,959 --> 00:09:00,859
which actually did a lot of effort to

167
00:08:56,209 --> 00:09:04,459
mainstream all the things for for an RP

168
00:09:00,860 --> 00:09:06,680
for all winner there is also the

169
00:09:04,459 --> 00:09:09,319
distribution called arm beyond which I

170
00:09:06,680 --> 00:09:12,079
can't recommend enough yet your goals

171
00:09:09,319 --> 00:09:14,479
are somewhat aligned with mine so if you

172
00:09:12,079 --> 00:09:16,939
want to run normal Linux in this case

173
00:09:14,480 --> 00:09:20,899
the Debian or Ubuntu Linux distribution

174
00:09:16,939 --> 00:09:23,240
on your hand hundred devices take a look

175
00:09:20,899 --> 00:09:25,930
and at our beyond it has the huge

176
00:09:23,240 --> 00:09:28,250
support and a very knowledgeable

177
00:09:25,930 --> 00:09:32,300
community and I would highly recommend

178
00:09:28,250 --> 00:09:35,779
it on the bottom you can actually see

179
00:09:32,300 --> 00:09:39,139
the graph of the GPU support one of the

180
00:09:35,779 --> 00:09:42,589
things break in 2013 which I liked is

181
00:09:39,139 --> 00:09:45,290
that there is a start of the GPU driver

182
00:09:42,589 --> 00:09:47,779
and it seems to me that every day now

183
00:09:45,290 --> 00:09:49,759
we'll have the free GPU as you can see

184
00:09:47,779 --> 00:09:52,730
on the graph actually that every day now

185
00:09:49,759 --> 00:09:55,730
was several months before so I was

186
00:09:52,730 --> 00:09:58,189
somewhat over optimistic but nowadays we

187
00:09:55,730 --> 00:10:03,319
actually do have the open source model

188
00:09:58,189 --> 00:10:05,509
driver which actually works since this

189
00:10:03,319 --> 00:10:08,479
board was created before the Raspberry

190
00:10:05,509 --> 00:10:10,970
Pi 40 pin connector craze it has a lot

191
00:10:08,480 --> 00:10:13,699
of lot of pins but unfortunately they

192
00:10:10,970 --> 00:10:16,939
are all in two millimeter vintage so

193
00:10:13,699 --> 00:10:17,508
another project which I found incredibly

194
00:10:16,939 --> 00:10:20,170
useful

195
00:10:17,509 --> 00:10:24,399
it was the script which enabled me to

196
00:10:20,170 --> 00:10:27,349
print out the paper templates in perfect

197
00:10:24,399 --> 00:10:30,230
2.85 four millimeters vintage

198
00:10:27,350 --> 00:10:33,040
just like the connector on this breakout

199
00:10:30,230 --> 00:10:41,089
board which converts to millimeter to

200
00:10:33,040 --> 00:10:43,699
254 and I found it very very useful so

201
00:10:41,089 --> 00:10:46,129
useful that I said it's really welded

202
00:10:43,699 --> 00:10:48,229
that it just generates SVG which I can

203
00:10:46,129 --> 00:10:51,709
print I can also use it to display the

204
00:10:48,230 --> 00:10:54,199
pins on the console and not only that it

205
00:10:51,709 --> 00:10:57,290
can actually look in this kernel debug

206
00:10:54,199 --> 00:10:59,930
and extract all kind of settings of your

207
00:10:57,290 --> 00:11:01,099
kernel so it will display if you have

208
00:10:59,930 --> 00:11:04,280
enabled i2c

209
00:11:01,100 --> 00:11:06,470
or if you have enabled SPI and if you

210
00:11:04,280 --> 00:11:08,810
have serial port you will both see the

211
00:11:06,470 --> 00:11:11,630
designation of the serial port from the

212
00:11:08,810 --> 00:11:15,290
point of the CPU itself and from the

213
00:11:11,630 --> 00:11:19,130
Linux kernels so in this example you are

214
00:11:15,290 --> 00:11:22,400
0 is the CPU name for the serial port

215
00:11:19,130 --> 00:11:25,580
and TTY as 0 is the kernel name for the

216
00:11:22,400 --> 00:11:28,970
same serial port it also has the ability

217
00:11:25,580 --> 00:11:31,910
to flip the pin out either horizontally

218
00:11:28,970 --> 00:11:34,280
or vertically which is rather useful if

219
00:11:31,910 --> 00:11:36,319
you you know you are plugging your pins

220
00:11:34,280 --> 00:11:38,390
from above and then you turn the board

221
00:11:36,320 --> 00:11:41,240
on the other side to check something

222
00:11:38,390 --> 00:11:43,340
with a multimeter it's useful so you can

223
00:11:41,240 --> 00:11:45,080
say the script okay I flip the board

224
00:11:43,340 --> 00:11:48,230
horizontally and it will display the

225
00:11:45,080 --> 00:11:53,120
pins in the same orientation as the

226
00:11:48,230 --> 00:11:57,080
board you are looking at then few months

227
00:11:53,120 --> 00:12:00,500
later year passed by and I decided to go

228
00:11:57,080 --> 00:12:02,630
in and break my rule of $50 for the

229
00:12:00,500 --> 00:12:05,720
device which I don't need and buy

230
00:12:02,630 --> 00:12:08,450
another TV dongle which was again

231
00:12:05,720 --> 00:12:10,670
somewhat questionable choice TV dongles

232
00:12:08,450 --> 00:12:13,940
are wrong fourth factor if you want to

233
00:12:10,670 --> 00:12:17,209
hack something or want pins but ok this

234
00:12:13,940 --> 00:12:19,340
vial was I mixed 6 which was the darling

235
00:12:17,210 --> 00:12:22,750
of the open-source community at the time

236
00:12:19,340 --> 00:12:26,510
mostly because it did have functional

237
00:12:22,750 --> 00:12:30,170
GPU driver for its Vivante GPU which

238
00:12:26,510 --> 00:12:32,600
also took another few years to get in

239
00:12:30,170 --> 00:12:37,520
the mainline but nowadays it is actually

240
00:12:32,600 --> 00:12:39,530
in the mainline it was it was it had a

241
00:12:37,520 --> 00:12:42,829
community back then it doesn't have it

242
00:12:39,530 --> 00:12:46,790
anymore but if you are interested in

243
00:12:42,830 --> 00:12:48,860
dynamics in any way I can tell you that

244
00:12:46,790 --> 00:12:51,730
there that the new event a project which

245
00:12:48,860 --> 00:12:55,430
was open-source laptops from Bunny Huang

246
00:12:51,730 --> 00:12:58,760
from several years ago have last 50

247
00:12:55,430 --> 00:13:01,520
units for just 200 bucks said it crowd

248
00:12:58,760 --> 00:13:06,830
supplies so it might be good moment to

249
00:13:01,520 --> 00:13:09,230
snatch one then in 2017 I got another

250
00:13:06,830 --> 00:13:09,690
interesting device which you wouldn't

251
00:13:09,230 --> 00:13:13,530
believe

252
00:13:09,690 --> 00:13:17,430
it wasn't 200 it was our Samsung iron

253
00:13:13,530 --> 00:13:20,370
Chromebook which was bricked to the

254
00:13:17,430 --> 00:13:23,640
point that the Google recovery mechanism

255
00:13:20,370 --> 00:13:26,850
didn't work so what did I do

256
00:13:23,640 --> 00:13:29,819
I tried to compile the Chrome it didn't

257
00:13:26,850 --> 00:13:33,360
all go so well Chrome again using Debian

258
00:13:29,820 --> 00:13:36,690
so data so I said okay this is the

259
00:13:33,360 --> 00:13:40,500
device it has the flesh in it I should

260
00:13:36,690 --> 00:13:43,050
be able to refresh it and I really was

261
00:13:40,500 --> 00:13:45,350
able to refresh it that's the first time

262
00:13:43,050 --> 00:13:48,300
I actually learned that it's really

263
00:13:45,350 --> 00:13:51,030
googled to pick up device which is

264
00:13:48,300 --> 00:13:54,120
supported by Google because you can find

265
00:13:51,030 --> 00:13:57,000
a lot of upstream documentation from

266
00:13:54,120 --> 00:13:59,580
Google itself about the device if it's

267
00:13:57,000 --> 00:14:02,450
in one of the inner arc on Chromebooks

268
00:13:59,580 --> 00:14:07,680
or some other device which Google

269
00:14:02,450 --> 00:14:10,170
supports on this slide since i'm using

270
00:14:07,680 --> 00:14:12,979
chinese spi flash i have to warn you

271
00:14:10,170 --> 00:14:16,199
that this flash adapter actually isn't 5

272
00:14:12,980 --> 00:14:19,590
3.3 volts it's actually four point nine

273
00:14:16,200 --> 00:14:21,870
volts and the thrill work with 3.3 volts

274
00:14:19,590 --> 00:14:24,600
flash but if you really want to be it on

275
00:14:21,870 --> 00:14:27,270
3.3 volts just look at this link it's a

276
00:14:24,600 --> 00:14:29,400
simple matter of lifting one pins pin

277
00:14:27,270 --> 00:14:32,819
and connecting the wire to correct place

278
00:14:29,400 --> 00:14:35,520
and the Chromebooks are interesting

279
00:14:32,820 --> 00:14:37,950
because they are actually designed so

280
00:14:35,520 --> 00:14:40,829
you can reflash it when you open the

281
00:14:37,950 --> 00:14:43,890
Chromebook it usually these days have

282
00:14:40,830 --> 00:14:46,320
the conductive sticker on one of the

283
00:14:43,890 --> 00:14:48,720
pads this is the pet denoted on this

284
00:14:46,320 --> 00:14:51,300
slide with the yellow circle which

285
00:14:48,720 --> 00:14:54,480
enables you to actually disable write

286
00:14:51,300 --> 00:14:56,670
protect on an SPI flash so Google is

287
00:14:54,480 --> 00:15:00,300
actually giving you all the ability to

288
00:14:56,670 --> 00:15:05,339
take control of your Chromebooks and in

289
00:15:00,300 --> 00:15:08,760
my case I decided to take it the problem

290
00:15:05,340 --> 00:15:12,270
was and will come to this reoccurring

291
00:15:08,760 --> 00:15:13,950
problem that if you want to do something

292
00:15:12,270 --> 00:15:14,970
like that it's really good to have the

293
00:15:13,950 --> 00:15:17,910
serial port

294
00:15:14,970 --> 00:15:20,880
the fortunate thing was that there was a

295
00:15:17,910 --> 00:15:24,000
schematic of the board itself so I knew

296
00:15:20,880 --> 00:15:27,950
where the serial ports were but one of

297
00:15:24,000 --> 00:15:30,840
them was 3.3 walled and it was the stm32

298
00:15:27,950 --> 00:15:34,740
microcontroller which Chrome OS uses

299
00:15:30,840 --> 00:15:37,620
like BIOS chip in a sense it scans the

300
00:15:34,740 --> 00:15:39,900
keyboard and does power management but

301
00:15:37,620 --> 00:15:41,880
the serial port which I needed was

302
00:15:39,900 --> 00:15:46,410
actually application serial port and

303
00:15:41,880 --> 00:15:51,510
since this is the 1.8 volt CPU it held

304
00:15:46,410 --> 00:15:53,670
1.8 volts serial port what can I do well

305
00:15:51,510 --> 00:15:56,450
I can use my old Kindle which also has

306
00:15:53,670 --> 00:16:02,280
1.8 volts serial port to get output

307
00:15:56,450 --> 00:16:05,430
problem solved so did it work well back

308
00:16:02,280 --> 00:16:08,550
then kind of I was able to compile

309
00:16:05,430 --> 00:16:11,670
everything but the u-boot at that time

310
00:16:08,550 --> 00:16:13,709
didn't support the onboard emmc you

311
00:16:11,670 --> 00:16:16,949
would just didn't see so I couldn't

312
00:16:13,710 --> 00:16:20,580
actually boot from the device itself so

313
00:16:16,950 --> 00:16:24,420
I did I did a little ooh the funny thing

314
00:16:20,580 --> 00:16:28,080
is that it was I was able to flash the

315
00:16:24,420 --> 00:16:31,319
u-boot on the emmc itself and the laptop

316
00:16:28,080 --> 00:16:33,180
booted that you would from the MMC but

317
00:16:31,320 --> 00:16:35,790
once it started you good to you too

318
00:16:33,180 --> 00:16:37,489
didn't see the MV anymore so actually

319
00:16:35,790 --> 00:16:40,380
worked around and plugging the USB

320
00:16:37,490 --> 00:16:43,050
Ethernet dongle and put the kernel from

321
00:16:40,380 --> 00:16:45,720
the Ethernet and then the kernel found

322
00:16:43,050 --> 00:16:48,959
the MSC without a problem and I had a

323
00:16:45,720 --> 00:16:50,970
distribution the thing is this point on

324
00:16:48,960 --> 00:16:53,010
this machine is so lousy that you

325
00:16:50,970 --> 00:16:55,350
actually don't want to use it as a

326
00:16:53,010 --> 00:16:58,050
display but is this actually gave me

327
00:16:55,350 --> 00:17:01,620
wings and said maybe I'm not so crazy

328
00:16:58,050 --> 00:17:07,770
for wishing to run my own kernel on arm

329
00:17:01,620 --> 00:17:12,510
devices so me few years more and in 2018

330
00:17:07,770 --> 00:17:14,939
I acquired quite a few Tegra tablets

331
00:17:12,510 --> 00:17:17,220
which are actually think per tablet for

332
00:17:14,939 --> 00:17:17,520
which you probably never heard I didn't

333
00:17:17,220 --> 00:17:19,860
either

334
00:17:17,520 --> 00:17:22,470
before I go those which are basically

335
00:17:19,859 --> 00:17:25,319
also nice dual-core machines with

336
00:17:22,470 --> 00:17:29,490
gigabyte RAM and stuff like that but

337
00:17:25,319 --> 00:17:31,740
at this point I also had to 6:36 Colonel

338
00:17:29,490 --> 00:17:34,260
from Lenovo which actually released it

339
00:17:31,740 --> 00:17:37,950
because of the GPL obligations

340
00:17:34,260 --> 00:17:41,430
I had a PDF schematic of the board and

341
00:17:37,950 --> 00:17:45,600
the Leila mainline kernel had already

342
00:17:41,430 --> 00:17:50,040
support for the Tegra chipsets and there

343
00:17:45,600 --> 00:17:52,770
was a third-party GPU support so in a

344
00:17:50,040 --> 00:17:56,030
sense it's almost like I I was tasked

345
00:17:52,770 --> 00:17:59,190
with doing board bringing up for

346
00:17:56,030 --> 00:18:00,960
completely new board if you had the

347
00:17:59,190 --> 00:18:02,910
project like that you would probably get

348
00:18:00,960 --> 00:18:05,580
stuff like that you would get the board

349
00:18:02,910 --> 00:18:08,130
the schematic and some kind of reference

350
00:18:05,580 --> 00:18:11,639
implementation which somewhat matches

351
00:18:08,130 --> 00:18:14,070
your device note about the Tegra if you

352
00:18:11,640 --> 00:18:15,930
look at those two graphs on the bottom

353
00:18:14,070 --> 00:18:18,659
you will notice that Tegra is

354
00:18:15,930 --> 00:18:21,570
unfortunately still not part of the

355
00:18:18,660 --> 00:18:25,350
mainland kernel but there is fork on

356
00:18:21,570 --> 00:18:28,280
github which works so I started looking

357
00:18:25,350 --> 00:18:30,870
for serial connectors I spent some time

358
00:18:28,280 --> 00:18:33,300
searching to the board through all four

359
00:18:30,870 --> 00:18:35,270
pin connectors because I knew that Syria

360
00:18:33,300 --> 00:18:38,520
wasn't one on four pins

361
00:18:35,270 --> 00:18:42,090
judging from the schematic and finally I

362
00:18:38,520 --> 00:18:45,870
find it under the shield of the RF field

363
00:18:42,090 --> 00:18:49,110
of the Tegra CPU itself and again it was

364
00:18:45,870 --> 00:18:51,840
1.8 volts but but but by this time I

365
00:18:49,110 --> 00:18:55,350
already knew that there is a cheap USB

366
00:18:51,840 --> 00:18:58,770
serial adapters which have the iPhone

367
00:18:55,350 --> 00:19:01,230
keyword in Aliexpress listings which are

368
00:18:58,770 --> 00:19:07,230
actually 1.8 volts so for this one I

369
00:19:01,230 --> 00:19:09,870
didn't use the kimmel Tegra again like

370
00:19:07,230 --> 00:19:13,230
every other arm CPU has some way to

371
00:19:09,870 --> 00:19:15,320
actually boot from the USB itself on

372
00:19:13,230 --> 00:19:17,880
Tegra it's called a px

373
00:19:15,320 --> 00:19:22,649
unfortunately Tegra also does have some

374
00:19:17,880 --> 00:19:26,820
kind of crypto mechanism in the CPU

375
00:19:22,650 --> 00:19:29,280
itself so this a px mod can be disabled

376
00:19:26,820 --> 00:19:32,370
by the manufacturer I was happy enough

377
00:19:29,280 --> 00:19:35,300
that it wasn't disabled and there are

378
00:19:32,370 --> 00:19:38,120
some projects in which people managed

379
00:19:35,300 --> 00:19:40,490
you do break it and I do have one tear

380
00:19:38,120 --> 00:19:43,850
take a laptop which is locked so I do

381
00:19:40,490 --> 00:19:46,360
plan to test that but in this case I

382
00:19:43,850 --> 00:19:49,310
didn't need anything other than pressing

383
00:19:46,360 --> 00:19:52,310
one special key and powering on device

384
00:19:49,310 --> 00:19:55,129
to get the USB access to it which

385
00:19:52,310 --> 00:19:58,760
enabled me to modify the flesh at my

386
00:19:55,130 --> 00:20:01,850
blog so the u-boat was rather simple I

387
00:19:58,760 --> 00:20:05,210
actually said please compile me do you

388
00:20:01,850 --> 00:20:09,800
boot I used the reference platform on

389
00:20:05,210 --> 00:20:13,910
which this tablet was based and I ported

390
00:20:09,800 --> 00:20:16,129
the minimum of the changes to see

391
00:20:13,910 --> 00:20:18,920
whether it works at all and that's it

392
00:20:16,130 --> 00:20:22,100
that was the display changes and guess

393
00:20:18,920 --> 00:20:24,950
what it worked and now it will say all

394
00:20:22,100 --> 00:20:27,919
you surely spend money supporting those

395
00:20:24,950 --> 00:20:30,650
display changes now really this is the

396
00:20:27,920 --> 00:20:34,970
this is the amount of the code you

397
00:20:30,650 --> 00:20:37,040
actually have to edit to change the

398
00:20:34,970 --> 00:20:39,560
characteristics of the annual of your

399
00:20:37,040 --> 00:20:42,830
display on the left side you see the

400
00:20:39,560 --> 00:20:45,050
difference between upstream 2.6 kernel

401
00:20:42,830 --> 00:20:47,960
which I have in the get and the kernel

402
00:20:45,050 --> 00:20:50,990
provided by Lenovo so Lenovo modified

403
00:20:47,960 --> 00:20:55,070
these lines to make to make these

404
00:20:50,990 --> 00:20:57,620
display works and on the right side you

405
00:20:55,070 --> 00:21:00,909
can see the current mainline kernel and

406
00:20:57,620 --> 00:21:04,399
the modification side it's really simple

407
00:21:00,910 --> 00:21:07,280
then I said oh this is very good I have

408
00:21:04,400 --> 00:21:10,400
you put now the kernel so I go to the

409
00:21:07,280 --> 00:21:13,730
github compile the kernel again it's a

410
00:21:10,400 --> 00:21:16,940
minor changes like defining sensors GPIO

411
00:21:13,730 --> 00:21:21,440
keys and stuff like that and in less

412
00:21:16,940 --> 00:21:24,500
than 400 lines I actually had booting

413
00:21:21,440 --> 00:21:26,180
system I thought the next slide this is

414
00:21:24,500 --> 00:21:29,570
the picture of the booting system but it

415
00:21:26,180 --> 00:21:31,250
will come later in this process I

416
00:21:29,570 --> 00:21:34,730
learned the valuable lesson

417
00:21:31,250 --> 00:21:37,510
if you are developing something from the

418
00:21:34,730 --> 00:21:40,240
armboard and you will compile kernel

419
00:21:37,510 --> 00:21:43,540
multiple times my suggestion is to

420
00:21:40,240 --> 00:21:46,210
actually set up NFS Road it will save

421
00:21:43,540 --> 00:21:49,840
you so much time especially if you have

422
00:21:46,210 --> 00:21:52,270
multiple boards for example I used one

423
00:21:49,840 --> 00:21:54,189
board while other was charging and it

424
00:21:52,270 --> 00:21:56,080
was super stupid simple to actually

425
00:21:54,190 --> 00:21:59,950
exchange it because all the data were on

426
00:21:56,080 --> 00:22:04,210
NFS server itself also were the warning

427
00:21:59,950 --> 00:22:07,660
for me the u-boot would happily take the

428
00:22:04,210 --> 00:22:10,690
IP address for dns mask over DHCP but

429
00:22:07,660 --> 00:22:14,070
kernel wouldn't so the common option IP

430
00:22:10,690 --> 00:22:16,930
dhcp which should work in kernel

431
00:22:14,070 --> 00:22:18,520
actually doesn't but you can hard-coded

432
00:22:16,930 --> 00:22:22,000
I opinions that's okay

433
00:22:18,520 --> 00:22:24,670
on the other hand the problem with this

434
00:22:22,000 --> 00:22:27,070
particular device is that the battery

435
00:22:24,670 --> 00:22:29,470
controller chip is actually not

436
00:22:27,070 --> 00:22:32,379
connected directly to the Tegra and

437
00:22:29,470 --> 00:22:37,000
under control of my software but it has

438
00:22:32,380 --> 00:22:39,010
the dedicated 805 one chip with the kind

439
00:22:37,000 --> 00:22:41,590
of bills in it which country which

440
00:22:39,010 --> 00:22:43,810
speaks with battery controller so I

441
00:22:41,590 --> 00:22:48,550
wasn't able to actually charge the

442
00:22:43,810 --> 00:22:50,290
battery after a lot of machinations and

443
00:22:48,550 --> 00:22:53,740
looking in the source code I actually

444
00:22:50,290 --> 00:22:59,590
found the place in which they trigger

445
00:22:53,740 --> 00:23:01,510
the bias controller over i2c and I was

446
00:22:59,590 --> 00:23:03,730
able to replicate that in the common

447
00:23:01,510 --> 00:23:08,650
line which is this side to see set on

448
00:23:03,730 --> 00:23:12,660
the bottom and I got my charging back so

449
00:23:08,650 --> 00:23:17,440
in the end I had a tablet from 2011

450
00:23:12,660 --> 00:23:20,800
running x11 accelerated x11 and my

451
00:23:17,440 --> 00:23:26,830
favorite favorite Debian distribution so

452
00:23:20,800 --> 00:23:28,870
it really is possible of course if you

453
00:23:26,830 --> 00:23:30,460
ever flashed your Android mobile you

454
00:23:28,870 --> 00:23:32,199
know that when you download the

455
00:23:30,460 --> 00:23:34,180
distribution which says this thing

456
00:23:32,200 --> 00:23:37,480
doesn't work this this doesn't work and

457
00:23:34,180 --> 00:23:40,420
of course it's not like everything works

458
00:23:37,480 --> 00:23:43,750
for example cameras are totally

459
00:23:40,420 --> 00:23:46,870
unsupported because there is no similar

460
00:23:43,750 --> 00:23:49,040
camera in current kernel and the kernel

461
00:23:46,870 --> 00:23:52,790
is currently in transition

462
00:23:49,040 --> 00:23:55,100
between two camera API eyes so I didn't

463
00:23:52,790 --> 00:23:58,149
put much effort into it but I probably

464
00:23:55,100 --> 00:24:01,879
will at some point I am not in the hurry

465
00:23:58,150 --> 00:24:07,190
but other than that it's actually quite

466
00:24:01,880 --> 00:24:11,870
usable I will do some future works but

467
00:24:07,190 --> 00:24:14,420
if you ever come to the Sun Tegra device

468
00:24:11,870 --> 00:24:21,110
this is the link with nodes which might

469
00:24:14,420 --> 00:24:25,430
help you if you have some other device

470
00:24:21,110 --> 00:24:28,250
other than the Allwinner or rock chip or

471
00:24:25,430 --> 00:24:31,310
something there is probably a community

472
00:24:28,250 --> 00:24:35,090
on the internet which you can turn to

473
00:24:31,310 --> 00:24:37,899
for initial help I have here few links

474
00:24:35,090 --> 00:24:42,139
because I have few ohmic devices I

475
00:24:37,900 --> 00:24:45,020
sample somehow prefer it but the two

476
00:24:42,140 --> 00:24:47,780
main stops for the beginning is either

477
00:24:45,020 --> 00:24:50,360
arm Beyond from which you will get the

478
00:24:47,780 --> 00:24:53,629
latest mainline kernel which is

479
00:24:50,360 --> 00:24:56,479
supported all the post-market OS if you

480
00:24:53,630 --> 00:24:59,960
don't like Debian in one Alpine which

481
00:24:56,480 --> 00:25:02,900
will enable you to actually run vendor

482
00:24:59,960 --> 00:25:07,220
kernel on your Android device but with

483
00:25:02,900 --> 00:25:09,290
the current user land stack so my

484
00:25:07,220 --> 00:25:12,710
suggestion is that those two projects

485
00:25:09,290 --> 00:25:16,310
are the first step to take a look

486
00:25:12,710 --> 00:25:18,950
whether your device is supported so you

487
00:25:16,310 --> 00:25:20,720
may ask ok you did all that why did you

488
00:25:18,950 --> 00:25:23,570
do that did you get actually only

489
00:25:20,720 --> 00:25:26,240
benefit aside from spending a lot of

490
00:25:23,570 --> 00:25:28,939
time and compiling your own kernel yes I

491
00:25:26,240 --> 00:25:33,910
learned a lot but my goal to be honest

492
00:25:28,940 --> 00:25:37,070
was actually to be able to get USB OTG

493
00:25:33,910 --> 00:25:39,590
running under Linux not under Android

494
00:25:37,070 --> 00:25:42,439
but under Linux and it really is

495
00:25:39,590 --> 00:25:45,379
possible again there is scattered

496
00:25:42,440 --> 00:25:47,450
documentation about internet here is the

497
00:25:45,380 --> 00:25:50,060
link to the github repository in which

498
00:25:47,450 --> 00:25:54,250
there is a script which you can run on

499
00:25:50,060 --> 00:25:57,010
either allwinner device on road verify 0

500
00:25:54,250 --> 00:26:00,970
cubieboard basically on any armed device

501
00:25:57,010 --> 00:26:05,800
with recent enough carlo which is like

502
00:26:00,970 --> 00:26:09,850
for something or newer to get either USB

503
00:26:05,800 --> 00:26:11,440
network card human interface device

504
00:26:09,850 --> 00:26:14,409
keyboard mouse and stuff like that

505
00:26:11,440 --> 00:26:17,020
storage serial there is also webcams

506
00:26:14,410 --> 00:26:19,930
printers and stuff like that so if you

507
00:26:17,020 --> 00:26:22,060
are security mindset think USB rubber

508
00:26:19,930 --> 00:26:25,900
ducky which you can script from the

509
00:26:22,060 --> 00:26:31,179
shout or USB armory if you heard about

510
00:26:25,900 --> 00:26:33,430
that you can do it yourself on any arm

511
00:26:31,180 --> 00:26:34,290
board you don't actually need to buy a

512
00:26:33,430 --> 00:26:38,620
hardware

513
00:26:34,290 --> 00:26:42,070
word of warning the initial motivation

514
00:26:38,620 --> 00:26:44,679
was to be able to use that USB emulated

515
00:26:42,070 --> 00:26:47,560
keyboard to emulate keyboards for the

516
00:26:44,680 --> 00:26:50,220
u-boot in the previously mentioned to

517
00:26:47,560 --> 00:26:53,440
take the tablet and that doesn't work

518
00:26:50,220 --> 00:26:56,830
that's the bit you know and this is the

519
00:26:53,440 --> 00:26:59,290
current state of that cubieboard board

520
00:26:56,830 --> 00:27:02,800
you saw before this is basically my

521
00:26:59,290 --> 00:27:05,770
bench power supply which has four relay

522
00:27:02,800 --> 00:27:08,649
control the outputs has open source

523
00:27:05,770 --> 00:27:11,620
premier on the step-down converter on

524
00:27:08,650 --> 00:27:13,900
the right below the multimeter has the

525
00:27:11,620 --> 00:27:16,679
multimeter connected to the serial to

526
00:27:13,900 --> 00:27:21,010
this box which enables me to control

527
00:27:16,680 --> 00:27:23,410
voltage control and measure voltage and

528
00:27:21,010 --> 00:27:27,129
current i am feeding to my devices which

529
00:27:23,410 --> 00:27:30,070
was very very useful so and this is

530
00:27:27,130 --> 00:27:32,230
actually single core a10 so the device

531
00:27:30,070 --> 00:27:35,340
which you can actually borrow from some

532
00:27:32,230 --> 00:27:39,490
of your friends who are not using it and

533
00:27:35,340 --> 00:27:42,550
this this setup provided very very

534
00:27:39,490 --> 00:27:47,350
useful to me so hopefully it will

535
00:27:42,550 --> 00:27:50,530
motivate you to do something and if all

536
00:27:47,350 --> 00:27:52,540
this is over the cat and you said oh no

537
00:27:50,530 --> 00:27:56,020
i'm not really the kind of person who

538
00:27:52,540 --> 00:28:00,129
will compile the kernel and you want

539
00:27:56,020 --> 00:28:02,970
still to use your old hundred device for

540
00:28:00,130 --> 00:28:05,700
some new purpose

541
00:28:02,970 --> 00:28:06,480
my suggestion is to take a look at

542
00:28:05,700 --> 00:28:09,540
Courtland

543
00:28:06,480 --> 00:28:13,200
it's interesting because it allows you

544
00:28:09,540 --> 00:28:15,418
to target all hundreds devices with the

545
00:28:13,200 --> 00:28:17,940
language which is much better than Java

546
00:28:15,419 --> 00:28:20,460
it's so much better than somebody who

547
00:28:17,940 --> 00:28:23,220
never saw the language like I didn't and

548
00:28:20,460 --> 00:28:27,809
I actually never developed anything 100

549
00:28:23,220 --> 00:28:29,970
so I said I saw Ava's several times and

550
00:28:27,809 --> 00:28:32,100
I can read the other but they never

551
00:28:29,970 --> 00:28:35,549
developed anything reasonable in Java

552
00:28:32,100 --> 00:28:39,090
but I was able in two afternoons to take

553
00:28:35,549 --> 00:28:41,549
half almost perfect Courtland

554
00:28:39,090 --> 00:28:44,639
applications for my hundred and modified

555
00:28:41,549 --> 00:28:47,129
to be really really perfect and this is

556
00:28:44,640 --> 00:28:49,650
the beautiful views case for open source

557
00:28:47,130 --> 00:28:52,380
which actually works and for state of

558
00:28:49,650 --> 00:28:54,090
Arden redevelopment in Scotland because

559
00:28:52,380 --> 00:28:56,130
for us five years I was unable to

560
00:28:54,090 --> 00:28:59,879
compile most of the projects from the

561
00:28:56,130 --> 00:29:02,970
github for under it this project was

562
00:28:59,880 --> 00:29:04,799
actually the ntp controlled clock which

563
00:29:02,970 --> 00:29:06,860
is basically android with the android

564
00:29:04,799 --> 00:29:09,120
application which has clock on it

565
00:29:06,860 --> 00:29:11,129
because i ran out of batteries on the

566
00:29:09,120 --> 00:29:14,129
clock on the real clock which is behind

567
00:29:11,130 --> 00:29:17,070
the cell phone and in this project i

568
00:29:14,130 --> 00:29:19,710
learned that all it displays really do

569
00:29:17,070 --> 00:29:21,870
have the burnin you know when you have

570
00:29:19,710 --> 00:29:24,510
the same digits on the same place if you

571
00:29:21,870 --> 00:29:27,479
change color after a while like three

572
00:29:24,510 --> 00:29:29,490
months when I said when I put the white

573
00:29:27,480 --> 00:29:31,500
background I can actually see the

574
00:29:29,490 --> 00:29:34,230
numbers which are like light green

575
00:29:31,500 --> 00:29:37,890
because the reddish parts were burn out

576
00:29:34,230 --> 00:29:39,660
and this was the reason I decided to

577
00:29:37,890 --> 00:29:41,910
change the software for something which

578
00:29:39,660 --> 00:29:45,710
can actually move the clock over the

579
00:29:41,910 --> 00:29:48,780
screen so I don't get the burn out and

580
00:29:45,710 --> 00:29:50,940
another interesting tidbit if you look

581
00:29:48,780 --> 00:29:54,210
at this picture the back side of the

582
00:29:50,940 --> 00:29:57,510
phone is actually removed that's because

583
00:29:54,210 --> 00:29:59,790
most of the Android phones are actually

584
00:29:57,510 --> 00:30:03,030
not designed to be always on especially

585
00:29:59,790 --> 00:30:06,600
not designed to have screen always on

586
00:30:03,030 --> 00:30:07,870
this cell phone this Galaxy Nexus so

587
00:30:06,600 --> 00:30:11,949
original Google

588
00:30:07,870 --> 00:30:13,989
for this this cellphone overheats if you

589
00:30:11,950 --> 00:30:16,420
don't remove the back cover and have the

590
00:30:13,990 --> 00:30:18,760
display turned always on and this is um

591
00:30:16,420 --> 00:30:21,550
all the display so it doesn't draw power

592
00:30:18,760 --> 00:30:26,620
other than the for the pixels which are

593
00:30:21,550 --> 00:30:30,250
actually lit just were the warnings this

594
00:30:26,620 --> 00:30:33,669
was the story from me

595
00:30:30,250 --> 00:30:36,390
we passed few hundred versions and I

596
00:30:33,670 --> 00:30:39,309
hope you found some of this information

597
00:30:36,390 --> 00:30:42,010
useful and I would be happy to answer

598
00:30:39,309 --> 00:30:43,990
any questions we have them please raise

599
00:30:42,010 --> 00:30:47,100
your hand and we'll give you the mic

600
00:30:43,990 --> 00:30:47,100
thank you

601
00:31:11,250 --> 00:31:13,310
you

