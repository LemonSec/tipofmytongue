1
00:00:25,520 --> 00:00:36,510
okay next up a beast and a poodle

2
00:00:28,110 --> 00:00:39,510
celebrating sweet 32 by vaya righty so

3
00:00:36,510 --> 00:00:41,970
welcome everyone how do you scare people

4
00:00:39,510 --> 00:00:45,540
from a presentation put Krypton in the

5
00:00:41,970 --> 00:00:46,589
title and everyone will run away no it's

6
00:00:45,540 --> 00:00:49,050
not in the title but it's in the

7
00:00:46,590 --> 00:00:51,870
description so I might have done this a

8
00:00:49,050 --> 00:00:55,019
little bit more stealthy but okay so

9
00:00:51,870 --> 00:00:56,790
hello everyone it's my great pleasure to

10
00:00:55,019 --> 00:01:01,470
be here again this year

11
00:00:56,790 --> 00:01:03,659
my name is Bowen and for the next 60

12
00:01:01,470 --> 00:01:05,519
minutes or a little bit less I will be

13
00:01:03,659 --> 00:01:09,870
talking about some crypt of ulnar

14
00:01:05,519 --> 00:01:12,450
abilities and my goal today yes I'm

15
00:01:09,870 --> 00:01:14,729
looking for it at least me and my goal

16
00:01:12,450 --> 00:01:18,770
today I would be the happiest man today

17
00:01:14,729 --> 00:01:21,869
if everyone in the room understands how

18
00:01:18,770 --> 00:01:25,110
the poodle vulnerability works once we

19
00:01:21,869 --> 00:01:27,659
get out if you don't we always gave

20
00:01:25,110 --> 00:01:30,149
rocky a party right so after you know a

21
00:01:27,659 --> 00:01:32,969
couple of glasses of rakia everyone you

22
00:01:30,149 --> 00:01:36,000
understand Krypton just a little bit

23
00:01:32,969 --> 00:01:36,719
about myself so I'm second year here and

24
00:01:36,000 --> 00:01:39,869
Vulcan

25
00:01:36,719 --> 00:01:41,520
I'm originally from Croatia verily the

26
00:01:39,869 --> 00:01:44,700
penetration testing team in a Kampala

27
00:01:41,520 --> 00:01:47,908
called in feel I'm also a sense

28
00:01:44,700 --> 00:01:50,100
instructor so I teach the second five

29
00:01:47,909 --> 00:01:51,719
four two course which is web application

30
00:01:50,100 --> 00:01:54,749
penetration testing and ethical hacking

31
00:01:51,719 --> 00:01:56,729
a long name of course I used to teach

32
00:01:54,749 --> 00:01:59,158
one of the course 504 as well but I like

33
00:01:56,729 --> 00:02:00,749
this one more so if you want to know

34
00:01:59,159 --> 00:02:03,090
more about some of the same stuff just

35
00:02:00,749 --> 00:02:06,030
let me know I'm also one of the sense in

36
00:02:03,090 --> 00:02:07,619
Anniston Center handlers if this website

37
00:02:06,030 --> 00:02:10,410
is not in your bookmarks that's

38
00:02:07,619 --> 00:02:13,260
perfectly okay but there is one cool

39
00:02:10,410 --> 00:02:15,630
thing that Johannes who is the main guy

40
00:02:13,260 --> 00:02:19,200
behind the storm center does every

41
00:02:15,630 --> 00:02:21,390
single day and that is the daily storm

42
00:02:19,200 --> 00:02:25,130
cast or a podcast that he publishes

43
00:02:21,390 --> 00:02:27,690
every single day for last ten years

44
00:02:25,130 --> 00:02:30,480
every single day except for weekends so

45
00:02:27,690 --> 00:02:32,700
every working day so it's a really

46
00:02:30,480 --> 00:02:33,700
really cool podcast only ten minutes

47
00:02:32,700 --> 00:02:35,829
long

48
00:02:33,700 --> 00:02:37,929
something like that and every single day

49
00:02:35,830 --> 00:02:39,190
he posts about new things so this is

50
00:02:37,930 --> 00:02:41,500
something I like to listen to when I

51
00:02:39,190 --> 00:02:43,060
commute to work I just download the

52
00:02:41,500 --> 00:02:45,190
latest version only ten minutes right

53
00:02:43,060 --> 00:02:48,959
seven to ten minutes and it's about

54
00:02:45,190 --> 00:02:51,970
latest things in security in the world

55
00:02:48,959 --> 00:02:54,489
like viral attacks incidents and stuff

56
00:02:51,970 --> 00:02:57,459
like that so it's a good thing to listen

57
00:02:54,489 --> 00:03:00,700
to so why did I come up with this

58
00:02:57,459 --> 00:03:03,340
presentation well to be honest I got

59
00:03:00,700 --> 00:03:06,160
really really tired about seeing

60
00:03:03,340 --> 00:03:09,580
something like this since I do

61
00:03:06,160 --> 00:03:11,500
penetration testing all the time I

62
00:03:09,580 --> 00:03:14,519
sometimes see some other reports as well

63
00:03:11,500 --> 00:03:17,799
I sometimes see reports from tools and

64
00:03:14,519 --> 00:03:20,920
quite often actually see that people try

65
00:03:17,799 --> 00:03:23,319
to rank how severe a certain

66
00:03:20,920 --> 00:03:25,530
vulnerabilities and sometimes I see

67
00:03:23,319 --> 00:03:28,780
something like this where our

68
00:03:25,530 --> 00:03:32,049
vulnerability certain vulnerability call

69
00:03:28,780 --> 00:03:35,650
called suite 32 has been ranked as a

70
00:03:32,049 --> 00:03:37,630
high risk vulnerability and this

71
00:03:35,650 --> 00:03:39,480
actually bothered me so much that I

72
00:03:37,630 --> 00:03:42,400
decided to spend a lot of time into

73
00:03:39,480 --> 00:03:45,940
reading and figuring out how different

74
00:03:42,400 --> 00:03:48,670
vulnerabilities work so we can actually

75
00:03:45,940 --> 00:03:50,980
correctly assess the risk that is

76
00:03:48,670 --> 00:03:52,600
resulting from these vulnerabilities I

77
00:03:50,980 --> 00:03:54,160
know at least one person in the room you

78
00:03:52,600 --> 00:03:56,620
like this who probably takes a look at a

79
00:03:54,160 --> 00:04:00,730
lot of reports sitting over there

80
00:03:56,620 --> 00:04:03,340
incognito today not in a suit so the

81
00:04:00,730 --> 00:04:06,819
goal of my presentation today will be to

82
00:04:03,340 --> 00:04:11,260
cover some of the most commonly reported

83
00:04:06,819 --> 00:04:13,208
and most commonly seen crypto related

84
00:04:11,260 --> 00:04:15,850
vulnerabilities basically as a 70 LS

85
00:04:13,209 --> 00:04:18,668
vulnerabilities and I will try to demo

86
00:04:15,850 --> 00:04:21,459
the boodle vulnerability on a real

87
00:04:18,668 --> 00:04:24,099
system so hopefully it will work you

88
00:04:21,459 --> 00:04:25,750
know with live demos you never know it

89
00:04:24,099 --> 00:04:27,370
depends if you prayed enough to the demo

90
00:04:25,750 --> 00:04:30,220
gods if they are happy then everything

91
00:04:27,370 --> 00:04:34,930
will work if not things once so we will

92
00:04:30,220 --> 00:04:36,700
actually see but yeah let's go on okay

93
00:04:34,930 --> 00:04:39,639
so as I said I will discuss some of the

94
00:04:36,700 --> 00:04:42,430
most common SSL and TLS vulnerabilities

95
00:04:39,639 --> 00:04:45,159
that are reported either by penetration

96
00:04:42,430 --> 00:04:46,460
testers or sometimes by tools when you

97
00:04:45,159 --> 00:04:48,620
simply scan

98
00:04:46,460 --> 00:04:50,989
networks you can see some of the names

99
00:04:48,620 --> 00:04:53,870
here and I'm pretty sure that a lot of

100
00:04:50,990 --> 00:04:55,190
you heard about most of these if not all

101
00:04:53,870 --> 00:05:00,590
of them

102
00:04:55,190 --> 00:05:02,719
it's almost customary to have those I

103
00:05:00,590 --> 00:05:04,729
call them celebrity vulnerabilities so

104
00:05:02,720 --> 00:05:07,759
they save like a cool name they have

105
00:05:04,729 --> 00:05:09,590
their own domain and a cool logo that's

106
00:05:07,759 --> 00:05:11,030
something that a celebrity vulnerability

107
00:05:09,590 --> 00:05:13,489
must there and some of these are

108
00:05:11,030 --> 00:05:16,309
definitely celebrity vulnerabilities but

109
00:05:13,490 --> 00:05:17,930
we'll see how viable their exploitation

110
00:05:16,310 --> 00:05:20,090
really is we will see what are the

111
00:05:17,930 --> 00:05:21,680
requirements and if for example can

112
00:05:20,090 --> 00:05:23,960
someone attack you with a poodle

113
00:05:21,680 --> 00:05:26,509
vulnerability while you are using the

114
00:05:23,960 --> 00:05:28,729
bulk on wireless over here is anyone

115
00:05:26,509 --> 00:05:30,710
using the wireless sexually no one

116
00:05:28,729 --> 00:05:34,969
trusts the one is here right me neither

117
00:05:30,710 --> 00:05:36,979
yeah so we're safe just unplug it okay

118
00:05:34,970 --> 00:05:38,960
so before talking about how this

119
00:05:36,979 --> 00:05:41,389
actually works and there will be a

120
00:05:38,960 --> 00:05:43,940
little bit of crypto here but you don't

121
00:05:41,389 --> 00:05:45,919
need to have any prerequisites to

122
00:05:43,940 --> 00:05:48,020
understand what I will talk about today

123
00:05:45,919 --> 00:05:50,570
the only thing you need to know is how

124
00:05:48,020 --> 00:05:52,969
XOR actually works I'll have a slide

125
00:05:50,570 --> 00:05:54,259
about it just to refresh your memory but

126
00:05:52,970 --> 00:05:57,620
it's the only thing you will need to

127
00:05:54,259 --> 00:06:01,159
know and a little bit of concentration

128
00:05:57,620 --> 00:06:03,050
so the main goal of SSL and TLS is to

129
00:06:01,159 --> 00:06:05,570
enable private communication over

130
00:06:03,050 --> 00:06:07,940
insecure communication channels whatever

131
00:06:05,570 --> 00:06:11,479
they are we use it every single day we

132
00:06:07,940 --> 00:06:13,310
actually cannot live without TLS today I

133
00:06:11,479 --> 00:06:15,949
keep saying SSL all the time I guess

134
00:06:13,310 --> 00:06:18,050
that's because I'm an alzheimer but I

135
00:06:15,949 --> 00:06:20,060
should be talking about TLS these days

136
00:06:18,050 --> 00:06:23,000
so there are three important parts about

137
00:06:20,060 --> 00:06:25,190
TLS that you can see here the first one

138
00:06:23,000 --> 00:06:27,409
is key exchange and authentication

139
00:06:25,190 --> 00:06:29,449
algorithms so when you connect to a

140
00:06:27,409 --> 00:06:33,590
website for example to Facebook or Gmail

141
00:06:29,449 --> 00:06:36,110
or whatever is the TLS website that you

142
00:06:33,590 --> 00:06:39,469
are connecting to in the first step you

143
00:06:36,110 --> 00:06:42,020
first authenticate the remote party we

144
00:06:39,469 --> 00:06:44,719
do that via certificates so everyone

145
00:06:42,020 --> 00:06:46,909
knows about pop-ups that you get that

146
00:06:44,719 --> 00:06:50,500
you should obviously not click on but

147
00:06:46,909 --> 00:06:52,969
people do because the pop-up actually

148
00:06:50,500 --> 00:06:55,780
performs the first part which is the

149
00:06:52,969 --> 00:06:58,540
authentication part of the

150
00:06:55,780 --> 00:07:01,450
remote endpoint in this particular part

151
00:06:58,540 --> 00:07:04,510
of the negotiation negotiation there is

152
00:07:01,450 --> 00:07:07,960
also key exchange and two sides have to

153
00:07:04,510 --> 00:07:10,330
define which encryption algorithm they

154
00:07:07,960 --> 00:07:12,340
will use in order to encrypt the rest of

155
00:07:10,330 --> 00:07:16,210
the data that is being exchanged

156
00:07:12,340 --> 00:07:18,640
so the key exchange part happens with

157
00:07:16,210 --> 00:07:22,120
the uses the asymmetric cryptography

158
00:07:18,640 --> 00:07:23,590
which is slow so we cannot use it today

159
00:07:22,120 --> 00:07:24,280
even though we have really really fast

160
00:07:23,590 --> 00:07:26,859
CPUs

161
00:07:24,280 --> 00:07:29,049
it's still unbelievably slow so when you

162
00:07:26,860 --> 00:07:32,370
connect to netflix to stream your latest

163
00:07:29,050 --> 00:07:35,680
video and it's going over ssl or https

164
00:07:32,370 --> 00:07:38,290
after the key exchange part we actually

165
00:07:35,680 --> 00:07:41,560
switch to one of the symmetric

166
00:07:38,290 --> 00:07:44,620
encryption algorithms here that are fast

167
00:07:41,560 --> 00:07:47,010
so we can allow a lot of data to be

168
00:07:44,620 --> 00:07:51,130
encrypted with them so typically today

169
00:07:47,010 --> 00:07:53,620
either Triple DES or AES are used as the

170
00:07:51,130 --> 00:07:56,409
most common encryption symmetric

171
00:07:53,620 --> 00:07:58,960
encryption algorithms very rarely I

172
00:07:56,410 --> 00:08:01,690
still see rc4 somewhere people consider

173
00:07:58,960 --> 00:08:03,430
it to be bad we'll see why and there is

174
00:08:01,690 --> 00:08:06,010
a new algorithm that you can see here

175
00:08:03,430 --> 00:08:08,230
called ChaCha that Google is pushing a

176
00:08:06,010 --> 00:08:12,130
lot so Google is trying to push Church a

177
00:08:08,230 --> 00:08:14,050
lot with Google Chrome and there was

178
00:08:12,130 --> 00:08:16,030
another algorithm which was kind of

179
00:08:14,050 --> 00:08:19,000
similar called salsa 20 so you can see

180
00:08:16,030 --> 00:08:21,659
that the author of this encryption

181
00:08:19,000 --> 00:08:24,910
algorithm is obviously a passionate

182
00:08:21,660 --> 00:08:26,740
dancer I guess maybe maybe Tony Mirra

183
00:08:24,910 --> 00:08:31,169
knows him or maybe Tony Mir is that guy

184
00:08:26,740 --> 00:08:34,150
what DJ but he likes

185
00:08:31,169 --> 00:08:36,189
dance names and finally we have message

186
00:08:34,150 --> 00:08:38,880
authentication I'll explain how this all

187
00:08:36,190 --> 00:08:42,370
works and I'll hopefully have some

188
00:08:38,880 --> 00:08:44,700
pictures as well to show that to you so

189
00:08:42,370 --> 00:08:46,360
as I said these two are the most common

190
00:08:44,700 --> 00:08:50,680
encryption symmetric encryption

191
00:08:46,360 --> 00:08:52,510
algorithms today but by only choosing a

192
00:08:50,680 --> 00:08:53,979
symmetric encryption algorithm there is

193
00:08:52,510 --> 00:08:57,580
still another thing that we have to

194
00:08:53,980 --> 00:08:59,710
select and that is the cipher mode that

195
00:08:57,580 --> 00:09:02,710
we want our encryption algorithm to work

196
00:08:59,710 --> 00:09:05,980
in now if anyone is a developer here

197
00:09:02,710 --> 00:09:08,270
typically when by default you select for

198
00:09:05,980 --> 00:09:10,790
example AES or triple deaths

199
00:09:08,270 --> 00:09:13,910
by default the mode that your algorithm

200
00:09:10,790 --> 00:09:16,400
is working on will be the first one an

201
00:09:13,910 --> 00:09:18,319
electronic codebook with an electronic

202
00:09:16,400 --> 00:09:21,260
codebook there are certain issues that

203
00:09:18,320 --> 00:09:23,120
I'll show on the next slide so what we

204
00:09:21,260 --> 00:09:24,710
will actually talk about throughout this

205
00:09:23,120 --> 00:09:27,740
presentation will be the second mode

206
00:09:24,710 --> 00:09:31,040
cipher block chaining CBC which is

207
00:09:27,740 --> 00:09:34,460
really the cause of almost every issue

208
00:09:31,040 --> 00:09:35,630
that I will talk about today just a

209
00:09:34,460 --> 00:09:38,780
little bit about the first mode

210
00:09:35,630 --> 00:09:42,200
electronic code would look you can see

211
00:09:38,780 --> 00:09:44,900
here why that particular encryption mode

212
00:09:42,200 --> 00:09:47,750
is bad so this is a bitmap image on the

213
00:09:44,900 --> 00:09:50,810
left side which has been encrypted with

214
00:09:47,750 --> 00:09:52,880
AES 256 which is like the strongest

215
00:09:50,810 --> 00:09:56,089
encryption algorithm that we use today

216
00:09:52,880 --> 00:09:57,620
it's a really really long key and on the

217
00:09:56,090 --> 00:10:02,120
right side you can see that content

218
00:09:57,620 --> 00:10:05,150
being encrypted so pretty obvious what's

219
00:10:02,120 --> 00:10:06,950
encrypted right why do we actually get

220
00:10:05,150 --> 00:10:10,220
this we get this because for every

221
00:10:06,950 --> 00:10:13,640
single block that we encrypt with the

222
00:10:10,220 --> 00:10:15,440
ECB electronic codebook mouth every

223
00:10:13,640 --> 00:10:17,720
single book block will have the same

224
00:10:15,440 --> 00:10:20,120
output when we use the same key

225
00:10:17,720 --> 00:10:21,920
obviously we have a lot of same content

226
00:10:20,120 --> 00:10:24,350
around here so that content will

227
00:10:21,920 --> 00:10:26,329
preserve the pattern which means that in

228
00:10:24,350 --> 00:10:28,460
the image on the right side we can see

229
00:10:26,330 --> 00:10:30,980
the pattern of the original image even

230
00:10:28,460 --> 00:10:33,200
though it is strongly encrypted so

231
00:10:30,980 --> 00:10:35,440
depending on what you encrypt this mode

232
00:10:33,200 --> 00:10:38,660
might not be the best thing to choose

233
00:10:35,440 --> 00:10:41,000
that's why I want to develop developers

234
00:10:38,660 --> 00:10:45,110
actually pick the second mode which is

235
00:10:41,000 --> 00:10:48,500
CBC but before diving into that just a

236
00:10:45,110 --> 00:10:51,260
quick refresher about the XOR operation

237
00:10:48,500 --> 00:10:53,870
which is the root cause of all the

238
00:10:51,260 --> 00:10:55,610
issues today so just to remind you about

239
00:10:53,870 --> 00:10:59,750
how XOR works I'm sure everyone knows

240
00:10:55,610 --> 00:11:02,510
here about XOR and so a XOR B is B X or

241
00:10:59,750 --> 00:11:06,980
a we can switch sides easily so X or B

242
00:11:02,510 --> 00:11:11,960
or C a will be equal be X or C a XOR 0

243
00:11:06,980 --> 00:11:13,670
will be a and ax or a will be 0 so this

244
00:11:11,960 --> 00:11:16,490
is all you need to know in order to

245
00:11:13,670 --> 00:11:18,719
understand how we will exploit the

246
00:11:16,490 --> 00:11:20,310
poodle vulnerability that

247
00:11:18,720 --> 00:11:22,439
hopefully I will also demonstrate

248
00:11:20,310 --> 00:11:24,839
successfully we'll see about that when

249
00:11:22,439 --> 00:11:26,759
it comes there another thing that we

250
00:11:24,839 --> 00:11:29,069
need to know about symmetric algorithms

251
00:11:26,759 --> 00:11:31,079
at least those that are on the left side

252
00:11:29,069 --> 00:11:33,930
on the slide so des Triple DES and AES

253
00:11:31,079 --> 00:11:36,540
these are so-called block symmetric

254
00:11:33,930 --> 00:11:39,500
encryption algorithms in other words

255
00:11:36,540 --> 00:11:43,709
whenever you encrypt something with AES

256
00:11:39,500 --> 00:11:46,560
your content your plaintext must first

257
00:11:43,709 --> 00:11:48,388
be divided into blocks and then those

258
00:11:46,560 --> 00:11:51,508
blocks will be encrypted into the

259
00:11:48,389 --> 00:11:54,449
resulting ciphertext those blocks are

260
00:11:51,509 --> 00:11:57,449
eight bytes of size for deaths and

261
00:11:54,449 --> 00:12:00,149
Triple DES and sixteen bytes of size for

262
00:11:57,449 --> 00:12:02,490
AES we cannot change it that's how the

263
00:12:00,149 --> 00:12:05,160
algorithm works so when you want to

264
00:12:02,490 --> 00:12:08,399
encrypt encrypt our sentence which is

265
00:12:05,160 --> 00:12:11,699
for example if for example 30 bytes long

266
00:12:08,399 --> 00:12:14,370
and you want to use AES the resulting

267
00:12:11,699 --> 00:12:17,899
encrypted output will be two blocks long

268
00:12:14,370 --> 00:12:20,519
which is 32 bytes two blocks of 16 bytes

269
00:12:17,899 --> 00:12:24,240
it always has to be a multiple of a

270
00:12:20,519 --> 00:12:28,199
block size so if you remember the

271
00:12:24,240 --> 00:12:29,839
previous image here very preserved the

272
00:12:28,199 --> 00:12:33,508
pattern in the original image

273
00:12:29,839 --> 00:12:35,600
CBC cipher block chaining mode was an

274
00:12:33,509 --> 00:12:38,819
attempt to actually break that pattern

275
00:12:35,600 --> 00:12:42,959
so when you take the same image and you

276
00:12:38,819 --> 00:12:46,170
encrypt this image with the AES 256

277
00:12:42,959 --> 00:12:47,849
encryption algorithm in the CBC mode you

278
00:12:46,170 --> 00:12:50,819
will actually get something like pure

279
00:12:47,850 --> 00:12:54,870
noise there is no pattern anymore and

280
00:12:50,819 --> 00:12:57,870
here you can see why the main reason is

281
00:12:54,870 --> 00:12:59,670
that every plaintext block will have

282
00:12:57,870 --> 00:13:02,850
some kind of a feedback from the

283
00:12:59,670 --> 00:13:05,750
previous block and that feedback will be

284
00:13:02,850 --> 00:13:11,089
used as input for an XOR operation

285
00:13:05,750 --> 00:13:14,069
before encrypting the content so here

286
00:13:11,089 --> 00:13:16,559
let's see this works yeah or here you

287
00:13:14,069 --> 00:13:19,110
can see my plaintext on the second block

288
00:13:16,559 --> 00:13:22,370
and before actually encrypting my

289
00:13:19,110 --> 00:13:25,529
plaintext I will be performing an XOR

290
00:13:22,370 --> 00:13:28,660
between my plaintext block and with the

291
00:13:25,529 --> 00:13:31,709
output of encryption of the previous

292
00:13:28,660 --> 00:13:34,689
walk so by performing this XOR function

293
00:13:31,709 --> 00:13:37,540
we are actually breaking the pattern and

294
00:13:34,690 --> 00:13:40,990
now we'll get pure randomness than the

295
00:13:37,540 --> 00:13:42,849
encrypt Sun data obviously if you hear a

296
00:13:40,990 --> 00:13:44,620
problem with the first block right what

297
00:13:42,850 --> 00:13:46,360
do you feed to the first block there is

298
00:13:44,620 --> 00:13:48,069
nothing from the previous block so

299
00:13:46,360 --> 00:13:50,829
that's why we have the IV in a

300
00:13:48,069 --> 00:13:53,410
sterilization vector and the IV is

301
00:13:50,829 --> 00:13:55,359
simply eight in this particular example

302
00:13:53,410 --> 00:13:56,500
I'm using Triple DES here so I have

303
00:13:55,360 --> 00:14:00,220
blocks of eight bytes

304
00:13:56,500 --> 00:14:03,399
it is simply eight random bytes that we

305
00:14:00,220 --> 00:14:05,139
need to use to perform the XOR operation

306
00:14:03,399 --> 00:14:07,389
with the first block before being

307
00:14:05,139 --> 00:14:09,910
encrypted and those eight bytes are

308
00:14:07,389 --> 00:14:13,449
actually sent in plaintext we don't care

309
00:14:09,910 --> 00:14:15,579
about them we just use them as div so

310
00:14:13,449 --> 00:14:18,519
this is how encryption works let's see

311
00:14:15,579 --> 00:14:21,638
how decryption works it's actually very

312
00:14:18,519 --> 00:14:23,110
cute when you look at it so let's take a

313
00:14:21,639 --> 00:14:25,240
look at the second block for example

314
00:14:23,110 --> 00:14:27,430
again so we have the cipher text we

315
00:14:25,240 --> 00:14:28,810
decrypt the second block and now in

316
00:14:27,430 --> 00:14:32,079
order to get to get the original

317
00:14:28,810 --> 00:14:34,479
plaintext we have to again perform the

318
00:14:32,079 --> 00:14:38,410
XOR operation with the contents of the

319
00:14:34,480 --> 00:14:40,360
previously encrypted block so if I go

320
00:14:38,410 --> 00:14:43,149
back one slide you just take a look at

321
00:14:40,360 --> 00:14:46,389
the second block right so see what the

322
00:14:43,149 --> 00:14:47,860
image looks like when I quickly flip

323
00:14:46,389 --> 00:14:49,839
between them you can see what's

324
00:14:47,860 --> 00:14:53,139
happening here so we take the contents

325
00:14:49,839 --> 00:14:56,170
of the second block decrypt but before

326
00:14:53,139 --> 00:15:00,130
getting the plaintext we need to perform

327
00:14:56,170 --> 00:15:04,420
an XOR operation this will be the doom

328
00:15:00,130 --> 00:15:07,180
of everything that XOR operation all

329
00:15:04,420 --> 00:15:09,519
good if you have questions with this ask

330
00:15:07,180 --> 00:15:11,050
me right now because by the end of the

331
00:15:09,519 --> 00:15:12,339
presentation you will forget about this

332
00:15:11,050 --> 00:15:14,380
and you will not understand how it works

333
00:15:12,339 --> 00:15:17,019
so any questions please show them right

334
00:15:14,380 --> 00:15:21,880
now it will be the best most beneficial

335
00:15:17,019 --> 00:15:24,519
for everyone so let's see what an HTTP

336
00:15:21,880 --> 00:15:26,960
request looks like when we sorry is the

337
00:15:24,519 --> 00:15:30,179
question yes

338
00:15:26,960 --> 00:15:30,179
[Music]

339
00:15:31,910 --> 00:15:37,120
we're how else will you give it to the

340
00:15:34,460 --> 00:15:37,120
other party

341
00:15:41,050 --> 00:15:45,699
you could maybe derive it from a key but

342
00:15:43,209 --> 00:15:47,589
basically doesn't really matter those

343
00:15:45,700 --> 00:15:51,010
eight bytes those eight random bytes you

344
00:15:47,589 --> 00:15:52,779
will perform the XOR operation so even

345
00:15:51,010 --> 00:15:54,790
if the attacker who can maybe sleep on

346
00:15:52,779 --> 00:15:55,839
your traffic even if the attacker sees

347
00:15:54,790 --> 00:15:57,670
those eight bytes

348
00:15:55,839 --> 00:15:59,740
they will not help him or her to

349
00:15:57,670 --> 00:16:01,750
actually decrypt the data so we are okay

350
00:15:59,740 --> 00:16:03,640
it's sending that I'm in plain text

351
00:16:01,750 --> 00:16:05,440
you're right about other possibilities

352
00:16:03,640 --> 00:16:07,839
we could maybe derive it from from the

353
00:16:05,440 --> 00:16:12,970
Crip Shakir or something something like

354
00:16:07,839 --> 00:16:14,709
that we could do that yeah okay so let's

355
00:16:12,970 --> 00:16:17,620
take a look at what an HTTP request

356
00:16:14,709 --> 00:16:20,439
looks like before it's being encrypted

357
00:16:17,620 --> 00:16:22,450
by your browser so when you open

358
00:16:20,440 --> 00:16:25,360
Facebook or Gmail or whatever you want

359
00:16:22,450 --> 00:16:29,680
and in your url bar you type in

360
00:16:25,360 --> 00:16:32,500
gmail.com and let's say that you have

361
00:16:29,680 --> 00:16:34,870
already logged in into gmail you know

362
00:16:32,500 --> 00:16:36,790
the Gmail stores the cookies in your

363
00:16:34,870 --> 00:16:38,350
browser so when you close your browser

364
00:16:36,790 --> 00:16:39,969
when you open it you're still logged

365
00:16:38,350 --> 00:16:42,760
into Gmail right that's how they know

366
00:16:39,970 --> 00:16:45,790
who you are so when you type in

367
00:16:42,760 --> 00:16:49,660
gmail.com your browser will issue a get

368
00:16:45,790 --> 00:16:53,250
requests I get slash HTTP one man

369
00:16:49,660 --> 00:16:58,390
requests to the host mail.google.com and

370
00:16:53,250 --> 00:17:00,430
it will supply the session cookie I have

371
00:16:58,390 --> 00:17:03,010
a very simple example here where I

372
00:17:00,430 --> 00:17:06,010
perform the gate request to the is C dot

373
00:17:03,010 --> 00:17:09,579
sense of edu website and already have a

374
00:17:06,010 --> 00:17:11,890
PHP session cookie here now remember

375
00:17:09,579 --> 00:17:15,490
what we have to do with block cyphers we

376
00:17:11,890 --> 00:17:18,160
have to split our input into blocks so

377
00:17:15,490 --> 00:17:21,910
if I'm using triple des here what I will

378
00:17:18,160 --> 00:17:25,900
do is split my message my get request

379
00:17:21,910 --> 00:17:27,910
until 8 byte blocks and this is what I

380
00:17:25,900 --> 00:17:31,059
will end up with so I have a typical

381
00:17:27,910 --> 00:17:34,179
HTTP 11.1 request here I have the host

382
00:17:31,059 --> 00:17:36,370
header which tells the the server which

383
00:17:34,179 --> 00:17:38,679
web page I want to retrieve and I have a

384
00:17:36,370 --> 00:17:40,570
session cookie here there are many many

385
00:17:38,679 --> 00:17:42,670
other headers that our browsers will

386
00:17:40,570 --> 00:17:44,740
send but for the example I'm just using

387
00:17:42,670 --> 00:17:47,530
one because this will help hopefully

388
00:17:44,740 --> 00:17:49,330
everyone understand how this works and

389
00:17:47,530 --> 00:17:51,879
as I said if not there's always rakia

390
00:17:49,330 --> 00:17:53,530
which can help you it

391
00:17:51,880 --> 00:17:55,360
and at the end it will have carriage

392
00:17:53,530 --> 00:17:58,270
return line feed so we have extra sharp

393
00:17:55,360 --> 00:18:00,600
exertion now check would happen here I

394
00:17:58,270 --> 00:18:04,720
deliberately picked this particular

395
00:18:00,600 --> 00:18:06,300
request so the last block I have four

396
00:18:04,720 --> 00:18:10,470
extra bytes

397
00:18:06,300 --> 00:18:12,760
now before encrypting this this data

398
00:18:10,470 --> 00:18:15,400
there is another thing that must be done

399
00:18:12,760 --> 00:18:18,640
we have to calculate the message

400
00:18:15,400 --> 00:18:21,100
integrity checksum and that message

401
00:18:18,640 --> 00:18:25,510
integrity checksum will be appended to

402
00:18:21,100 --> 00:18:28,860
the message before this is very

403
00:18:25,510 --> 00:18:31,600
important before encrypting the message

404
00:18:28,860 --> 00:18:34,540
now let's say that in this example is

405
00:18:31,600 --> 00:18:37,810
message integrity we use shavon shavon

406
00:18:34,540 --> 00:18:41,830
will produce contents of 160 bits which

407
00:18:37,810 --> 00:18:44,320
is 20 bytes and I deliberately pick this

408
00:18:41,830 --> 00:18:47,590
particular message so when you append

409
00:18:44,320 --> 00:18:50,230
the message integrity checksum which is

410
00:18:47,590 --> 00:18:53,500
20 bytes you will see here that we end

411
00:18:50,230 --> 00:18:58,360
up with what 1 2 3 4 5 6 7 8 9 10 11

412
00:18:53,500 --> 00:19:00,460
full blocks of message now this message

413
00:18:58,360 --> 00:19:03,429
must be encrypted

414
00:19:00,460 --> 00:19:06,610
that's what SSL or TLS does when you

415
00:19:03,430 --> 00:19:10,260
serve to a certain web page but there is

416
00:19:06,610 --> 00:19:14,139
another thing that we must be aware of

417
00:19:10,260 --> 00:19:17,710
when I go back here notice that we had 4

418
00:19:14,140 --> 00:19:21,310
extra bytes which means that to the

419
00:19:17,710 --> 00:19:23,770
receiving party I somehow must tell they

420
00:19:21,310 --> 00:19:27,159
were 4 extra bytes right when they

421
00:19:23,770 --> 00:19:29,350
decrypt this decrypt all contents those

422
00:19:27,160 --> 00:19:31,930
last 4 bytes will probably be some kind

423
00:19:29,350 --> 00:19:34,300
of garbage depending on what I put into

424
00:19:31,930 --> 00:19:36,940
those four bytes initially I can put for

425
00:19:34,300 --> 00:19:39,610
example 4 zeros but what if I actually

426
00:19:36,940 --> 00:19:41,680
want to encrypt zeros how do I tell the

427
00:19:39,610 --> 00:19:43,870
receiving party hey those last 4 bytes

428
00:19:41,680 --> 00:19:47,650
you are actually supposed to discard

429
00:19:43,870 --> 00:19:52,030
them they are just garbage because we

430
00:19:47,650 --> 00:19:54,850
are using a block cipher so the protocol

431
00:19:52,030 --> 00:19:57,610
says that in order to signal to the

432
00:19:54,850 --> 00:20:00,250
receiving party how many bytes the

433
00:19:57,610 --> 00:20:01,479
receiving party has to discard you will

434
00:20:00,250 --> 00:20:05,110
actually put in

435
00:20:01,480 --> 00:20:08,710
the very last byte the number of bytes

436
00:20:05,110 --> 00:20:11,229
that need to be discarded okay there's a

437
00:20:08,710 --> 00:20:12,850
protocol so in other words when if I

438
00:20:11,230 --> 00:20:16,780
wanted to send this particular message

439
00:20:12,850 --> 00:20:19,830
here the actual value in the very last

440
00:20:16,780 --> 00:20:23,830
byte in this byte here would be 3

441
00:20:19,830 --> 00:20:26,409
because that tells the recipient that 3

442
00:20:23,830 --> 00:20:29,889
bytes besides the last one should be

443
00:20:26,410 --> 00:20:32,650
dropped there are 4 bytes of garbage now

444
00:20:29,890 --> 00:20:34,390
the protocol also says you always have

445
00:20:32,650 --> 00:20:37,720
to have so-called pairing this is called

446
00:20:34,390 --> 00:20:41,440
penny so even if you have perfectly

447
00:20:37,720 --> 00:20:43,510
aligned block right the receive the

448
00:20:41,440 --> 00:20:45,669
receiving side must know how many bytes

449
00:20:43,510 --> 00:20:49,570
to discard so how do we do that we

450
00:20:45,669 --> 00:20:52,000
actually append a full block that will

451
00:20:49,570 --> 00:20:55,960
have several bites of garbage and the

452
00:20:52,000 --> 00:20:57,760
last byte will have the value of 7 so

453
00:20:55,960 --> 00:21:00,100
when the recipient decrypts the last

454
00:20:57,760 --> 00:21:02,710
block the recipient will see oh the

455
00:21:00,100 --> 00:21:05,610
number is 7 so I discard 7 bytes before

456
00:21:02,710 --> 00:21:09,850
this and it will all work perfectly

457
00:21:05,610 --> 00:21:14,080
still good ok so the last byte will tell

458
00:21:09,850 --> 00:21:16,059
yes exactly you always need to have

459
00:21:14,080 --> 00:21:17,559
padding they call it pairing some

460
00:21:16,059 --> 00:21:19,360
garbage is not very nice for the first

461
00:21:17,559 --> 00:21:21,010
standard but you're absolutely right we

462
00:21:19,360 --> 00:21:23,439
always have to have some garbage which

463
00:21:21,010 --> 00:21:28,240
will be pairing here now in SSL version

464
00:21:23,440 --> 00:21:31,480
3 the content of these 7 bytes doesn't

465
00:21:28,240 --> 00:21:34,030
matter so we can have 7 bytes of full

466
00:21:31,480 --> 00:21:36,190
garbage but the last byte must have the

467
00:21:34,030 --> 00:21:38,620
value of 7 right this will tell the

468
00:21:36,190 --> 00:21:41,320
recipient that we discard the whole last

469
00:21:38,620 --> 00:21:44,070
block and then we save the other part of

470
00:21:41,320 --> 00:21:46,570
the message that will be correctly used

471
00:21:44,070 --> 00:21:49,139
so this is the attack idea yes another

472
00:21:46,570 --> 00:21:49,139
aggression excellent

473
00:21:52,800 --> 00:21:59,070
zero no it must be one is minimum and

474
00:21:56,730 --> 00:22:00,540
seven so depending on how many you only

475
00:21:59,070 --> 00:22:02,820
have to have one bite which is paring

476
00:22:00,540 --> 00:22:04,590
the last one right and then if you like

477
00:22:02,820 --> 00:22:06,270
put zero then you don't know if it's

478
00:22:04,590 --> 00:22:07,860
zero or what you need to do so always

479
00:22:06,270 --> 00:22:09,660
have to have either a full block or

480
00:22:07,860 --> 00:22:11,760
it'll be one to seven so well this one

481
00:22:09,660 --> 00:22:13,740
to seven right yes there is a range so

482
00:22:11,760 --> 00:22:15,390
for example if it's four then we discard

483
00:22:13,740 --> 00:22:18,390
four bites before this and then we have

484
00:22:15,390 --> 00:22:21,360
the rest of the message all right so

485
00:22:18,390 --> 00:22:23,970
this is the idea for attack let's say

486
00:22:21,360 --> 00:22:26,610
that the attacker successfully performed

487
00:22:23,970 --> 00:22:28,350
a man-in-the-middle attack against us

488
00:22:26,610 --> 00:22:30,570
so that is one of the product lists for

489
00:22:28,350 --> 00:22:33,600
this attack we need to be able to

490
00:22:30,570 --> 00:22:34,740
perform men in the middle how difficult

491
00:22:33,600 --> 00:22:39,719
is it to do man in the middle

492
00:22:34,740 --> 00:22:42,360
today I know exactly so it's actually

493
00:22:39,720 --> 00:22:44,490
pretty difficult unless you are on Wi-Fi

494
00:22:42,360 --> 00:22:46,409
so maybe if you connect it to the bulk

495
00:22:44,490 --> 00:22:48,090
on Wi-Fi maybe some of these guys here

496
00:22:46,410 --> 00:22:50,250
the one over there they might be running

497
00:22:48,090 --> 00:22:52,199
salmon in the middle attacks and you

498
00:22:50,250 --> 00:22:54,120
know sniffing your traffic so this is

499
00:22:52,200 --> 00:22:58,110
prerequisite number one the attacker

500
00:22:54,120 --> 00:23:01,139
must be able to see your traffic then

501
00:22:58,110 --> 00:23:04,500
the biggest issue in SSL version 3 which

502
00:23:01,140 --> 00:23:07,710
is the poor old vulnerability is the

503
00:23:04,500 --> 00:23:13,230
file that is the following fact when the

504
00:23:07,710 --> 00:23:15,750
server decrypts the message if the value

505
00:23:13,230 --> 00:23:18,840
of the last byte was for example

506
00:23:15,750 --> 00:23:21,330
incorrect so it was 10 it cannot be 10

507
00:23:18,840 --> 00:23:23,639
it could be 1 to 7 because we have 8

508
00:23:21,330 --> 00:23:26,310
byte blocks right if the value of the

509
00:23:23,640 --> 00:23:28,500
last block sorry of the last byte in the

510
00:23:26,310 --> 00:23:32,190
last block is 10 which is an invalid

511
00:23:28,500 --> 00:23:37,290
value then the server will actually send

512
00:23:32,190 --> 00:23:40,140
an SSL signaling message on the wire to

513
00:23:37,290 --> 00:23:45,180
the sender telling the sender hey

514
00:23:40,140 --> 00:23:48,330
decryption failed ok so this is called

515
00:23:45,180 --> 00:23:51,090
an Oracle in other words if I can very

516
00:23:48,330 --> 00:23:54,689
very crowd clamoring juggle packets or

517
00:23:51,090 --> 00:23:58,290
blocks around I might be able to make

518
00:23:54,690 --> 00:24:00,420
the server tell me when something has

519
00:23:58,290 --> 00:24:02,490
been decrypted correctly and when it

520
00:24:00,420 --> 00:24:04,350
hasn't been decrypted correctly because

521
00:24:02,490 --> 00:24:06,299
if it hasn't been decrypted correctly

522
00:24:04,350 --> 00:24:09,299
I'll see the signaling message

523
00:24:06,299 --> 00:24:10,739
which will say hey decryption failed you

524
00:24:09,299 --> 00:24:15,619
understand this in a second just wait

525
00:24:10,739 --> 00:24:17,849
just stay with me for another few slides

526
00:24:15,619 --> 00:24:21,899
so this is what the attacker will do

527
00:24:17,849 --> 00:24:24,570
let's say that we want to decrypt the

528
00:24:21,899 --> 00:24:26,728
contents of the second block for some

529
00:24:24,570 --> 00:24:28,229
reason we can encrypt all of them but

530
00:24:26,729 --> 00:24:29,669
let's say for this example we want to

531
00:24:28,229 --> 00:24:33,089
decrypt the contents of the second block

532
00:24:29,669 --> 00:24:35,190
so the attacker who has already launched

533
00:24:33,089 --> 00:24:38,009
a man-in-the-middle attack against all

534
00:24:35,190 --> 00:24:41,339
of us here the attacker is monitoring

535
00:24:38,009 --> 00:24:44,669
our traffic our encrypted traffic SSL

536
00:24:41,339 --> 00:24:46,769
traffic can be decrypted easily and what

537
00:24:44,669 --> 00:24:49,229
the attacker will do since he can

538
00:24:46,769 --> 00:24:51,089
perform block juggling package on

539
00:24:49,229 --> 00:24:53,279
juggling due to the man in the middle

540
00:24:51,089 --> 00:24:56,158
attack the attacker will take the

541
00:24:53,279 --> 00:25:01,139
contents of the block second block here

542
00:24:56,159 --> 00:25:05,099
and copy literally copy that whole block

543
00:25:01,139 --> 00:25:07,049
to the last block in our message why

544
00:25:05,099 --> 00:25:09,599
last remember that one byte that while

545
00:25:07,049 --> 00:25:10,918
one byte will be very very crucial so

546
00:25:09,599 --> 00:25:12,958
the attacker literally takes the

547
00:25:10,919 --> 00:25:18,749
contents of the block and copies to the

548
00:25:12,959 --> 00:25:21,419
last one nothing else right now what

549
00:25:18,749 --> 00:25:25,709
will happen since the taker blindly

550
00:25:21,419 --> 00:25:28,259
copied the block to the last block when

551
00:25:25,709 --> 00:25:30,299
the server decrypts the message the

552
00:25:28,259 --> 00:25:33,509
first thing that the server will do is

553
00:25:30,299 --> 00:25:37,168
check the value of the last byte if the

554
00:25:33,509 --> 00:25:40,469
last byte is anything other than one to

555
00:25:37,169 --> 00:25:42,479
seven it's immediately an error right it

556
00:25:40,469 --> 00:25:46,379
cannot be it cannot be anything else but

557
00:25:42,479 --> 00:25:47,849
one to seven so if it's like 52 it's an

558
00:25:46,379 --> 00:25:50,908
error and this is the message that is

559
00:25:47,849 --> 00:25:52,979
being sent so this is I call this it's

560
00:25:50,909 --> 00:25:55,950
Wireshark and you can see here this is a

561
00:25:52,979 --> 00:26:00,359
SSL or TLS alerts 21 which says

562
00:25:55,950 --> 00:26:02,909
decryption failed now let me just go

563
00:26:00,359 --> 00:26:06,389
back here quickly remember the message

564
00:26:02,909 --> 00:26:08,459
integrity part those 20 bytes that are

565
00:26:06,389 --> 00:26:11,639
calculated in order to preserve the

566
00:26:08,459 --> 00:26:16,079
integrity of the message right if for

567
00:26:11,639 --> 00:26:18,719
example the value of the last byte the

568
00:26:16,079 --> 00:26:22,030
cryptids to five

569
00:26:18,720 --> 00:26:25,450
what will happen the server will discard

570
00:26:22,030 --> 00:26:28,810
five bytes in front of the last one then

571
00:26:25,450 --> 00:26:31,780
it will take the next 20 bytes thinking

572
00:26:28,810 --> 00:26:34,360
that this is the integrity checksum the

573
00:26:31,780 --> 00:26:36,490
sha-1 result but it is not because if we

574
00:26:34,360 --> 00:26:39,969
discard five bytes here we have these

575
00:26:36,490 --> 00:26:41,830
two bytes which are garbage right it

576
00:26:39,970 --> 00:26:45,250
will try to calculate the integrity

577
00:26:41,830 --> 00:26:47,860
cache it will fail again and guess what

578
00:26:45,250 --> 00:26:54,370
will happen the same message will be

579
00:26:47,860 --> 00:26:56,590
sent right so now the only case when

580
00:26:54,370 --> 00:26:59,020
this will actually work is when the

581
00:26:56,590 --> 00:27:03,490
attacker copies the block to the last

582
00:26:59,020 --> 00:27:06,850
one and the attacker gets so lucky that

583
00:27:03,490 --> 00:27:09,760
the last byte actually accidentally the

584
00:27:06,850 --> 00:27:13,060
crypts two values seven if the last

585
00:27:09,760 --> 00:27:16,330
bytes decrypted the level seven - I'm

586
00:27:13,060 --> 00:27:18,700
very seven then the attacker can

587
00:27:16,330 --> 00:27:22,960
actually calculate the value of that

588
00:27:18,700 --> 00:27:25,360
original bytes thanks to the XOR

589
00:27:22,960 --> 00:27:27,400
operation so let me show this for you

590
00:27:25,360 --> 00:27:29,500
and this is the most difficult part of

591
00:27:27,400 --> 00:27:31,990
the presentation after this I have beast

592
00:27:29,500 --> 00:27:33,940
which is which I suggest that you try to

593
00:27:31,990 --> 00:27:36,790
understand only after a bottle of rakia

594
00:27:33,940 --> 00:27:38,740
right this is like a bottle this is more

595
00:27:36,790 --> 00:27:39,940
complicated so this is why the whole

596
00:27:38,740 --> 00:27:41,230
story actually works and this is the

597
00:27:39,940 --> 00:27:43,840
most complicated part of the

598
00:27:41,230 --> 00:27:46,300
presentation so at the top you have the

599
00:27:43,840 --> 00:27:47,919
encryption process CBC encryption

600
00:27:46,300 --> 00:27:51,669
process at the bottom you have

601
00:27:47,920 --> 00:27:54,490
decryption I want to steal contents of

602
00:27:51,670 --> 00:27:57,780
the second block the one originally

603
00:27:54,490 --> 00:28:01,120
highlighted in green sit here plaintext

604
00:27:57,780 --> 00:28:03,850
that's the one I want to fill so this

605
00:28:01,120 --> 00:28:07,239
one will be encrypted after performing

606
00:28:03,850 --> 00:28:10,990
XOR with the yellow block into the red

607
00:28:07,240 --> 00:28:13,390
one what the attacker does is copy that

608
00:28:10,990 --> 00:28:16,060
block to the last block in the message

609
00:28:13,390 --> 00:28:18,070
all good so far right I repeated this

610
00:28:16,060 --> 00:28:20,470
like ten times so I think it is so he

611
00:28:18,070 --> 00:28:24,659
just copies the value of the block now

612
00:28:20,470 --> 00:28:29,260
let's see what happens this block here

613
00:28:24,660 --> 00:28:30,860
the red one when we decrypt the red one

614
00:28:29,260 --> 00:28:34,250
right

615
00:28:30,860 --> 00:28:38,030
and when the X or the red one with the

616
00:28:34,250 --> 00:28:40,820
purple block which is the one next to

617
00:28:38,030 --> 00:28:42,049
the last one we actually get what we'll

618
00:28:40,820 --> 00:28:44,030
get the green block

619
00:28:42,049 --> 00:28:47,690
why because well that was what

620
00:28:44,030 --> 00:28:51,260
originally was there so we can see that

621
00:28:47,690 --> 00:28:56,150
the green block is decrypted last block

622
00:28:51,260 --> 00:28:58,760
X our previous one so all we're gonna do

623
00:28:56,150 --> 00:29:02,530
now is just extend this a little bit so

624
00:28:58,760 --> 00:29:06,410
you'll see why it works now what is my

625
00:29:02,530 --> 00:29:09,290
plaintext block here the last one if the

626
00:29:06,410 --> 00:29:11,360
decryption was successful right remember

627
00:29:09,290 --> 00:29:13,820
if the decryption was successful if and

628
00:29:11,360 --> 00:29:17,449
only if the value of the last byte will

629
00:29:13,820 --> 00:29:19,399
be seven that's the only case when the

630
00:29:17,450 --> 00:29:21,320
decryption can work why because the

631
00:29:19,400 --> 00:29:23,299
attacker took the second block copy

632
00:29:21,320 --> 00:29:26,629
deeds to the last one when it gets

633
00:29:23,299 --> 00:29:30,049
decrypted any value other than one to

634
00:29:26,630 --> 00:29:32,929
seven immediate error if it's one to six

635
00:29:30,049 --> 00:29:35,570
it will take drop garbage and the

636
00:29:32,929 --> 00:29:38,299
message integrity will be incorrect so

637
00:29:35,570 --> 00:29:41,389
the only way for this to work is for the

638
00:29:38,299 --> 00:29:44,000
last byte to have the value of seven

639
00:29:41,390 --> 00:29:45,740
which means that the contents of the

640
00:29:44,000 --> 00:29:47,900
last block will be dropped we will

641
00:29:45,740 --> 00:29:52,280
calculate the message integrity cache

642
00:29:47,900 --> 00:29:54,350
which will be correct by this is why I

643
00:29:52,280 --> 00:29:57,760
will drop the last block right

644
00:29:54,350 --> 00:30:01,760
everything else remains the same and

645
00:29:57,760 --> 00:30:03,740
this will hold true so for that one

646
00:30:01,760 --> 00:30:06,799
request and I will explain how we send

647
00:30:03,740 --> 00:30:09,380
requests for that one request that

648
00:30:06,799 --> 00:30:12,350
succeeds the attacker knows that the

649
00:30:09,380 --> 00:30:14,720
last byte of the last block was seven it

650
00:30:12,350 --> 00:30:16,850
cannot be anything else so this will

651
00:30:14,720 --> 00:30:18,470
hold true we have seven bytes of garbage

652
00:30:16,850 --> 00:30:21,709
we don't know about them we don't care

653
00:30:18,470 --> 00:30:24,320
about them seven will be again the first

654
00:30:21,710 --> 00:30:26,540
equation here right make sense that's

655
00:30:24,320 --> 00:30:30,980
just what we decrypted the contents to

656
00:30:26,540 --> 00:30:33,830
now thanks to X or you just switch sides

657
00:30:30,980 --> 00:30:35,720
so I move the block with garbage and

658
00:30:33,830 --> 00:30:38,270
seven to the right size I move the

659
00:30:35,720 --> 00:30:41,330
decryption of red block to the left side

660
00:30:38,270 --> 00:30:43,520
so this is all cool thanks to exer and

661
00:30:41,330 --> 00:30:46,879
now how do I get this

662
00:30:43,520 --> 00:30:50,030
how do I decrypt the red block well

663
00:30:46,880 --> 00:30:53,360
originally the red block encrypted is

664
00:30:50,030 --> 00:30:59,360
actually plain text the original

665
00:30:53,360 --> 00:31:01,610
plaintext block XOR yellow block the

666
00:30:59,360 --> 00:31:04,040
yellow block is ciphertext which means

667
00:31:01,610 --> 00:31:06,199
that the attacker that is monitoring the

668
00:31:04,040 --> 00:31:09,139
network he knows about the red yellow

669
00:31:06,200 --> 00:31:12,440
block as well because it's encrypted so

670
00:31:09,140 --> 00:31:15,400
check this now these two will hold true

671
00:31:12,440 --> 00:31:18,920
as well the decrypted red block

672
00:31:15,400 --> 00:31:22,429
originally is plaintext block which is

673
00:31:18,920 --> 00:31:26,300
green XOR the yellow block and now

674
00:31:22,429 --> 00:31:28,700
finally what we do is this I switch

675
00:31:26,300 --> 00:31:33,409
sides again and I know that the

676
00:31:28,700 --> 00:31:38,450
decrypted second block will be the

677
00:31:33,410 --> 00:31:41,960
yellow block X or garbage 7x or purple

678
00:31:38,450 --> 00:31:44,090
block the attacker knows everything so

679
00:31:41,960 --> 00:31:46,070
he knows the value of the purple block

680
00:31:44,090 --> 00:31:47,389
he knows the value of the yellow block

681
00:31:46,070 --> 00:31:49,850
because these are encrypted these are

682
00:31:47,390 --> 00:31:53,840
sent normally and he knows that the last

683
00:31:49,850 --> 00:31:56,149
byte is 7 and with this the attacker can

684
00:31:53,840 --> 00:31:58,189
actually decrypt one byte only one byte

685
00:31:56,150 --> 00:32:02,090
we don't decrypt all block we encrypt

686
00:31:58,190 --> 00:32:06,110
one byte at a time so all I need to do

687
00:32:02,090 --> 00:32:09,830
now is somehow make your browser keep on

688
00:32:06,110 --> 00:32:12,439
sending requests constantly until two

689
00:32:09,830 --> 00:32:15,830
things happen until I is the attacker in

690
00:32:12,440 --> 00:32:18,920
am lucky enough so the last value will

691
00:32:15,830 --> 00:32:21,050
be decrypted to seven and I know that

692
00:32:18,920 --> 00:32:22,490
the last value of this green block which

693
00:32:21,050 --> 00:32:25,190
is the one I want to retrieve is

694
00:32:22,490 --> 00:32:27,380
actually something I want so I can only

695
00:32:25,190 --> 00:32:29,630
decrypt the last value of a block which

696
00:32:27,380 --> 00:32:31,520
means that when I make your browser send

697
00:32:29,630 --> 00:32:35,150
requests I have to somehow shift the

698
00:32:31,520 --> 00:32:37,040
data one byte at a time right so if it's

699
00:32:35,150 --> 00:32:40,790
always in the second block the buy time

700
00:32:37,040 --> 00:32:43,010
decrypting will be the last one be good

701
00:32:40,790 --> 00:32:45,678
for archaea or should I do should I do

702
00:32:43,010 --> 00:32:47,900
the live demo like never right okay rock

703
00:32:45,679 --> 00:32:49,460
you later or okay if you still

704
00:32:47,900 --> 00:32:50,809
understand it I'll show you the live

705
00:32:49,460 --> 00:32:51,940
demo and then you'll have some rock you

706
00:32:50,809 --> 00:32:55,110
later and I'll explain it

707
00:32:51,940 --> 00:32:55,110
it'll be difficult

708
00:32:58,530 --> 00:33:05,220
ah now statistics is very very difficult

709
00:33:01,770 --> 00:33:08,280
beast definitely not my area but when

710
00:33:05,220 --> 00:33:11,520
you run this attack you will on average

711
00:33:08,280 --> 00:33:14,190
need to send about 256 requests in order

712
00:33:11,520 --> 00:33:16,800
to get lucky enough to get seven so on

713
00:33:14,190 --> 00:33:19,410
average it's it's 256 something like

714
00:33:16,800 --> 00:33:21,330
that now when I run the demo we'll see

715
00:33:19,410 --> 00:33:24,000
maybe I will be completely unlucky and I

716
00:33:21,330 --> 00:33:25,409
will need to send like 5,000 requests to

717
00:33:24,000 --> 00:33:27,060
get lackeys on the last byte is seven

718
00:33:25,410 --> 00:33:31,080
maybe I'll send only fifty you'll see

719
00:33:27,060 --> 00:33:34,080
but an average is 256 so this is the

720
00:33:31,080 --> 00:33:36,780
poodle vulnerability notice the

721
00:33:34,080 --> 00:33:39,300
requirements here the attacker must need

722
00:33:36,780 --> 00:33:41,129
needs to be able to perform a main man

723
00:33:39,300 --> 00:33:43,200
in the middle attack I must be able to

724
00:33:41,130 --> 00:33:46,140
see your traffic I must be able to

725
00:33:43,200 --> 00:33:48,930
actively copy those blocks right in

726
00:33:46,140 --> 00:33:52,470
order to decrypt something I also

727
00:33:48,930 --> 00:33:57,240
somehow must make your browser send

728
00:33:52,470 --> 00:33:59,100
requests how do I do that that's not an

729
00:33:57,240 --> 00:34:01,170
easy thing to do so what an attacker

730
00:33:59,100 --> 00:34:04,169
normally will do is sniff your traffic

731
00:34:01,170 --> 00:34:08,130
constantly and when they see that you

732
00:34:04,170 --> 00:34:11,940
access one website which is not over SSL

733
00:34:08,130 --> 00:34:15,690
which is plaintext HTTP they inject

734
00:34:11,940 --> 00:34:18,510
JavaScript into Europe plaintext content

735
00:34:15,690 --> 00:34:21,840
and that JavaScript actually makes your

736
00:34:18,510 --> 00:34:24,840
browser keep on sending requests how

737
00:34:21,840 --> 00:34:27,360
about I showed it in a real demo so this

738
00:34:24,840 --> 00:34:31,980
demo eternal show to you now has a very

739
00:34:27,360 --> 00:34:34,950
simple mock-up web application that is

740
00:34:31,980 --> 00:34:36,929
obviously will be abused to demo the

741
00:34:34,949 --> 00:34:39,359
portal vulnerability this is what I will

742
00:34:36,929 --> 00:34:42,480
be sending so I will want to steal the

743
00:34:39,360 --> 00:34:46,470
contents of the cookie which is PHP

744
00:34:42,480 --> 00:34:48,179
session ID and by injecting this dummy

745
00:34:46,469 --> 00:34:50,699
content so /aea

746
00:34:48,179 --> 00:34:52,770
and BBB in the body what I'm doing with

747
00:34:50,699 --> 00:34:55,830
this is by carefully injecting this I

748
00:34:52,770 --> 00:34:58,350
will be shifting the plaintext contents

749
00:34:55,830 --> 00:34:59,970
so the byte I want to steal will be the

750
00:34:58,350 --> 00:35:01,830
last byte in a certain block right

751
00:34:59,970 --> 00:35:05,520
that's how I shift the contents to get

752
00:35:01,830 --> 00:35:07,529
the data out if you want to do this at

753
00:35:05,520 --> 00:35:09,090
home this is something that you can do

754
00:35:07,530 --> 00:35:11,400
at home writes not know those bad things

755
00:35:09,090 --> 00:35:14,339
everything is on my github

756
00:35:11,400 --> 00:35:16,289
webpage the original exploit is from

757
00:35:14,339 --> 00:35:18,480
this French researcher I didn't manage

758
00:35:16,289 --> 00:35:19,289
to find the guy's name he's like totally

759
00:35:18,480 --> 00:35:21,210
incognito

760
00:35:19,289 --> 00:35:24,210
I had to modify the exploit a little bit

761
00:35:21,210 --> 00:35:25,890
and everything is on my github read the

762
00:35:24,210 --> 00:35:27,809
presentation so you can download

763
00:35:25,890 --> 00:35:31,230
everything go to this if you didn't

764
00:35:27,809 --> 00:35:33,329
understand it try to redo the devil so

765
00:35:31,230 --> 00:35:36,509
what I will be using his here is Ubuntu

766
00:35:33,329 --> 00:35:38,309
14 lie because it supports SL version 3

767
00:35:36,509 --> 00:35:42,900
out of box so we don't worry about that

768
00:35:38,309 --> 00:35:45,390
I'll be using Mozilla Firefox 30 again

769
00:35:42,900 --> 00:35:46,440
it supports SL version 3 out of box so I

770
00:35:45,390 --> 00:35:49,319
don't need to change anything with

771
00:35:46,440 --> 00:35:54,599
configuration so let's do that

772
00:35:49,319 --> 00:35:58,499
yes maybe it will work ok so what I have

773
00:35:54,599 --> 00:36:00,210
here is a Windows VM this is the latest

774
00:35:58,499 --> 00:36:02,098
Windows 10 fully patched doesn't matter

775
00:36:00,210 --> 00:36:05,670
really this is a vulnerability in the

776
00:36:02,099 --> 00:36:09,299
SSL engine and I have Mozilla Firefox

777
00:36:05,670 --> 00:36:13,740
here and over here provided I can login

778
00:36:09,299 --> 00:36:17,819
correctly I will run my exploit so I

779
00:36:13,740 --> 00:36:19,799
said typically the attacker would

780
00:36:17,819 --> 00:36:22,589
perform a man-in-the-middle attack in

781
00:36:19,799 --> 00:36:24,779
order to be able to see our traffic and

782
00:36:22,589 --> 00:36:26,999
modified since I have two VMs here I

783
00:36:24,779 --> 00:36:28,650
didn't want to bother with performing

784
00:36:26,999 --> 00:36:31,618
man-in-the-middle so I actually set up

785
00:36:28,650 --> 00:36:35,460
my exploit to listen on Paul port for

786
00:36:31,619 --> 00:36:38,759
443 but it's actually just transparently

787
00:36:35,460 --> 00:36:40,230
redirecting everything to localhost 443

788
00:36:38,759 --> 00:36:41,339
so I'm kind of simulating

789
00:36:40,230 --> 00:36:43,230
man-in-the-middle it would work

790
00:36:41,339 --> 00:36:45,808
absolutely the same if you want just use

791
00:36:43,230 --> 00:36:46,769
ettercap or better cap or whatever to do

792
00:36:45,809 --> 00:36:49,410
it all right

793
00:36:46,769 --> 00:36:53,779
umm yes I need the proper IP address

794
00:36:49,410 --> 00:36:56,620
which is apparently 131 which is okay

795
00:36:53,779 --> 00:37:09,160
scare me initially

796
00:36:56,620 --> 00:37:13,150
so now I'll go to 2 1 3 1 and let's see

797
00:37:09,160 --> 00:37:13,149
1:46 sorry my bed

798
00:37:16,180 --> 00:37:21,069
all righty of course the pop up because

799
00:37:18,640 --> 00:37:23,589
I didn't bother about the certificate so

800
00:37:21,069 --> 00:37:25,808
we will do as any other user with you

801
00:37:23,589 --> 00:37:28,119
just click on OK and proceed because

802
00:37:25,809 --> 00:37:32,619
that's fine and here we have a very very

803
00:37:28,119 --> 00:37:34,779
simple test application that probably

804
00:37:32,619 --> 00:37:37,539
used by some presidents in the world you

805
00:37:34,779 --> 00:37:39,460
know when I think about nuclear weapon

806
00:37:37,539 --> 00:37:43,319
launch websites they probably look like

807
00:37:39,460 --> 00:37:47,890
this they are from what 1990s right so

808
00:37:43,319 --> 00:37:50,288
what I will do here is I will login with

809
00:37:47,890 --> 00:37:51,970
a password and there is an SSL error

810
00:37:50,289 --> 00:37:54,130
doesn't matter I'll try again because

811
00:37:51,970 --> 00:37:54,520
that's what a user will do and ok here

812
00:37:54,130 --> 00:37:57,069
we go

813
00:37:54,520 --> 00:37:58,990
so in a real world attack the attacker

814
00:37:57,069 --> 00:38:01,750
will probably run JavaScript

815
00:37:58,990 --> 00:38:03,279
automatically to send requests I didn't

816
00:38:01,750 --> 00:38:06,520
do that here automatically so I will

817
00:38:03,279 --> 00:38:08,349
just click on this these buttons here to

818
00:38:06,520 --> 00:38:10,720
show to you what will happen but let me

819
00:38:08,349 --> 00:38:12,730
go back to the exploit and you can see

820
00:38:10,720 --> 00:38:15,520
here that we are seeing some network

821
00:38:12,730 --> 00:38:19,150
traffic that's ok at this point in time

822
00:38:15,520 --> 00:38:20,829
we are just relaying traffic we don't do

823
00:38:19,150 --> 00:38:23,950
anything to it you're just monitoring

824
00:38:20,829 --> 00:38:27,309
the traffic so since I don't know which

825
00:38:23,950 --> 00:38:28,868
particular encryption protocols Lipson

826
00:38:27,309 --> 00:38:32,260
algorithm was picked

827
00:38:28,869 --> 00:38:35,200
was it desk or Triple DES or AES I need

828
00:38:32,260 --> 00:38:37,539
to first figure out what exactly my

829
00:38:35,200 --> 00:38:40,480
browser picked so I can do search here

830
00:38:37,539 --> 00:38:45,190
and now the attacker would automatically

831
00:38:40,480 --> 00:38:48,069
just run this JavaScript here this

832
00:38:45,190 --> 00:38:51,369
JavaScript just sends a request

833
00:38:48,069 --> 00:38:53,579
nothing specific behind this when I go

834
00:38:51,369 --> 00:38:56,109
back I need to send one more sorry

835
00:38:53,579 --> 00:38:57,880
apparently didn't click or maybe I did

836
00:38:56,109 --> 00:38:59,740
there we go so you can see that we

837
00:38:57,880 --> 00:39:02,140
figured out ok you are dealing with the

838
00:38:59,740 --> 00:39:04,359
block size of 8 so now the exploit knows

839
00:39:02,140 --> 00:39:07,210
that when it copies the blocks they are

840
00:39:04,359 --> 00:39:09,880
8 8 bytes long and the last element is 7

841
00:39:07,210 --> 00:39:12,400
if is if it was a yes the story would be

842
00:39:09,880 --> 00:39:16,690
exactly the same but the last value must

843
00:39:12,400 --> 00:39:21,730
be 15 right exactly same exactly so the

844
00:39:16,690 --> 00:39:25,140
same thing now I can activate my attack

845
00:39:21,730 --> 00:39:28,390
a now the following thing will happen

846
00:39:25,140 --> 00:39:30,400
when I click here to launch a test

847
00:39:28,390 --> 00:39:33,160
missile of course what else

848
00:39:30,400 --> 00:39:38,680
now my browser started sending requests

849
00:39:33,160 --> 00:39:39,520
like crazy and over here oh actually we

850
00:39:38,680 --> 00:39:41,890
got already lucky

851
00:39:39,520 --> 00:39:44,259
so we guessed one over here you can see

852
00:39:41,890 --> 00:39:46,299
that we are seeing some requests for

853
00:39:44,260 --> 00:39:50,470
every single request what we're doing is

854
00:39:46,300 --> 00:39:53,350
taking block number 50 see here block

855
00:39:50,470 --> 00:39:55,509
number 50 and copying block number 50 to

856
00:39:53,350 --> 00:39:57,370
the very last block that the only thing

857
00:39:55,510 --> 00:40:01,180
we're doing and then we're we're

858
00:39:57,370 --> 00:40:04,569
monitoring the response traffic when we

859
00:40:01,180 --> 00:40:07,060
see the SSL alert to anyone without that

860
00:40:04,570 --> 00:40:10,180
the cripton failed if we don't see that

861
00:40:07,060 --> 00:40:12,940
then we know decryption succeeded and

862
00:40:10,180 --> 00:40:17,049
thanks to the XR we can calculate the

863
00:40:12,940 --> 00:40:18,940
value so we get another another byte

864
00:40:17,050 --> 00:40:20,980
there let me show to you what the

865
00:40:18,940 --> 00:40:26,290
browser is doing I will open developer

866
00:40:20,980 --> 00:40:28,810
console and you can see here what's

867
00:40:26,290 --> 00:40:31,060
going on in real time in the background

868
00:40:28,810 --> 00:40:32,860
I'm constantly sending post requests

869
00:40:31,060 --> 00:40:35,410
which are basically garbage right I

870
00:40:32,860 --> 00:40:39,610
don't care about them I just want the

871
00:40:35,410 --> 00:40:43,690
one byte that I actually need to decrypt

872
00:40:39,610 --> 00:40:45,730
to be copied to last one in the last

873
00:40:43,690 --> 00:40:47,760
value 10 is 7 that's what I want to

874
00:40:45,730 --> 00:40:51,880
happen and I keep on sending this

875
00:40:47,760 --> 00:40:54,640
constantly just until I get lucky enough

876
00:40:51,880 --> 00:40:56,560
to decrypt one really so we guest

877
00:40:54,640 --> 00:40:59,230
actually one more character over there

878
00:40:56,560 --> 00:40:59,650
if you want to see the time not actually

879
00:40:59,230 --> 00:41:03,070
lying

880
00:40:59,650 --> 00:41:07,030
I will go to console here provide in my

881
00:41:03,070 --> 00:41:09,430
Firefox wakes up I will just zoom a

882
00:41:07,030 --> 00:41:12,330
little bit and I will do a document dot

883
00:41:09,430 --> 00:41:17,200
cookie and you can see the cookie here I

884
00:41:12,330 --> 00:41:18,750
see the value so it's seven are iov when

885
00:41:17,200 --> 00:41:21,759
we go back here

886
00:41:18,750 --> 00:41:24,190
that's what we actually successfully

887
00:41:21,760 --> 00:41:26,230
extracted so if I just leave this

888
00:41:24,190 --> 00:41:29,500
running in some time will actually end

889
00:41:26,230 --> 00:41:30,970
up extracting the value of the cookie

890
00:41:29,500 --> 00:41:33,280
and that's all I need in order to take

891
00:41:30,970 --> 00:41:36,129
over your gmail account or Facebook or

892
00:41:33,280 --> 00:41:39,400
whatever I want and this is actually how

893
00:41:36,130 --> 00:41:42,100
Google works so by looking at this one

894
00:41:39,400 --> 00:41:42,350
thing that I I'll kill this one thing

895
00:41:42,100 --> 00:41:45,860
the

896
00:41:42,350 --> 00:41:48,020
I thought about when going through the

897
00:41:45,860 --> 00:41:51,410
vulnerabilities was that poodle is a

898
00:41:48,020 --> 00:41:53,270
real one right so even though there is a

899
00:41:51,410 --> 00:41:55,430
number of prerequisites that an attacker

900
00:41:53,270 --> 00:41:56,870
must fulfill like many in the middle be

901
00:41:55,430 --> 00:41:59,779
able to make your browser keep on

902
00:41:56,870 --> 00:42:01,850
sending requests they're not impossible

903
00:41:59,780 --> 00:42:03,620
right they can happen especially if

904
00:42:01,850 --> 00:42:06,560
you're connected to wireless if you

905
00:42:03,620 --> 00:42:09,250
accidentally in second tab open an on

906
00:42:06,560 --> 00:42:13,130
SSL website then I can inject JavaScript

907
00:42:09,250 --> 00:42:17,630
into your session so this I would say is

908
00:42:13,130 --> 00:42:21,080
actually a real attack Beast is another

909
00:42:17,630 --> 00:42:22,910
commonly reported vulnerability one that

910
00:42:21,080 --> 00:42:24,830
I will definitely not try explaining

911
00:42:22,910 --> 00:42:27,589
right now you'll see why here this is

912
00:42:24,830 --> 00:42:29,540
why see this on the right side way more

913
00:42:27,590 --> 00:42:32,510
complicated than before and means way

914
00:42:29,540 --> 00:42:34,610
more akia for this as I said but it's

915
00:42:32,510 --> 00:42:37,190
beast the difference is that we are

916
00:42:34,610 --> 00:42:39,170
actually exploiting the browser so in

917
00:42:37,190 --> 00:42:41,510
the first case it was the server telling

918
00:42:39,170 --> 00:42:44,090
us that something is wrong by sending

919
00:42:41,510 --> 00:42:47,180
the SSL alert message which self

920
00:42:44,090 --> 00:42:49,430
decryption failed with beast we actually

921
00:42:47,180 --> 00:42:52,100
see that message from the browser so we

922
00:42:49,430 --> 00:42:54,950
kind of changed our targets now this

923
00:42:52,100 --> 00:42:57,620
actually happens because the way the

924
00:42:54,950 --> 00:43:00,319
browser's work when you need to encrypt

925
00:42:57,620 --> 00:43:03,740
a lot of data browsers will actually

926
00:43:00,320 --> 00:43:05,330
keep on reusing some of the crypto

927
00:43:03,740 --> 00:43:09,859
material from the initially established

928
00:43:05,330 --> 00:43:11,540
session that's why this is possible as I

929
00:43:09,860 --> 00:43:13,550
said I will not dive into explaining

930
00:43:11,540 --> 00:43:15,470
this right now but what I will tell you

931
00:43:13,550 --> 00:43:18,650
about this is that the prerequisites are

932
00:43:15,470 --> 00:43:20,240
the same so the attacker needs to be

933
00:43:18,650 --> 00:43:21,500
able to run man-in-the-middle the

934
00:43:20,240 --> 00:43:23,419
attacker needs to be able to run

935
00:43:21,500 --> 00:43:26,360
JavaScript in a browser to keep on

936
00:43:23,420 --> 00:43:28,100
sending requests but the way to fix

937
00:43:26,360 --> 00:43:32,390
beasts is to simply upgrade your

938
00:43:28,100 --> 00:43:35,330
browsers so that's quite easier now

939
00:43:32,390 --> 00:43:37,129
crime is one of my favorite owner

940
00:43:35,330 --> 00:43:38,569
abilities because it's so easy to

941
00:43:37,130 --> 00:43:40,550
explain so if you didn't understand

942
00:43:38,570 --> 00:43:42,500
poodle you will understand crime for

943
00:43:40,550 --> 00:43:45,560
sure and you'll love this vulnerability

944
00:43:42,500 --> 00:43:48,050
it's so subtle it's actually so cute so

945
00:43:45,560 --> 00:43:52,880
crime is a vulnerability that uses

946
00:43:48,050 --> 00:43:54,230
compression to as out-of-band channel to

947
00:43:52,880 --> 00:43:56,390
tell the attacker on what

948
00:43:54,230 --> 00:43:58,220
actually being encrypted or in this case

949
00:43:56,390 --> 00:44:01,549
compressed because SSL and TLS

950
00:43:58,220 --> 00:44:04,009
compressed data as well now the latest

951
00:44:01,550 --> 00:44:07,700
versions don't but previously then crime

952
00:44:04,010 --> 00:44:10,700
was actually abused we did compress data

953
00:44:07,700 --> 00:44:13,549
with SSL now the reason why we can

954
00:44:10,700 --> 00:44:16,580
exploit SSL crime sorry is because

955
00:44:13,550 --> 00:44:19,430
compressed data will have certain length

956
00:44:16,580 --> 00:44:21,020
let me demo date view there'll be

957
00:44:19,430 --> 00:44:23,029
another live demo but it's only Lord for

958
00:44:21,020 --> 00:44:24,800
sure I was lucky that the last one as

959
00:44:23,030 --> 00:44:28,640
well so I'm going to use Python here and

960
00:44:24,800 --> 00:44:31,550
I will import the Z Lib library I will

961
00:44:28,640 --> 00:44:35,450
just use this as a simple example of why

962
00:44:31,550 --> 00:44:38,450
compression can be abused here now this

963
00:44:35,450 --> 00:44:39,980
is a bit more complicated in SSL but

964
00:44:38,450 --> 00:44:41,899
this will allow me to explain the - to

965
00:44:39,980 --> 00:44:47,119
understand how it works so let's say

966
00:44:41,900 --> 00:44:50,869
that here I have my request HTTP 1 1

967
00:44:47,119 --> 00:44:52,790
then I have X for sure the same host

968
00:44:50,869 --> 00:44:58,580
will be I don't know

969
00:44:52,790 --> 00:45:00,920
Vulcan dot org and then I have my PHP

970
00:44:58,580 --> 00:45:06,619
session ID cookie which will be

971
00:45:00,920 --> 00:45:09,230
something like this okay long enough so

972
00:45:06,619 --> 00:45:11,330
now it's the first step let's compress

973
00:45:09,230 --> 00:45:14,869
this and let's see what will be the

974
00:45:11,330 --> 00:45:19,730
length of this so length of compress of

975
00:45:14,869 --> 00:45:22,130
a is 72 bytes all right now the attacker

976
00:45:19,730 --> 00:45:24,380
wants to find the contents of the PHP

977
00:45:22,130 --> 00:45:25,550
session ID cookie because once I steal

978
00:45:24,380 --> 00:45:27,859
the cookie I become you

979
00:45:25,550 --> 00:45:30,950
let's have web applications work this is

980
00:45:27,859 --> 00:45:33,650
my prime target so I again must be able

981
00:45:30,950 --> 00:45:36,319
to run man in the middle I must be able

982
00:45:33,650 --> 00:45:38,630
to make your browser send requests but

983
00:45:36,320 --> 00:45:42,590
check which requests the attacker

984
00:45:38,630 --> 00:45:48,320
modifies the request so here in the

985
00:45:42,590 --> 00:45:50,540
parameter he does something like this so

986
00:45:48,320 --> 00:45:52,490
he eats the name of the cookie that he

987
00:45:50,540 --> 00:45:55,759
wants to seal how does he know that well

988
00:45:52,490 --> 00:45:57,500
he just checks his own session the

989
00:45:55,760 --> 00:46:00,280
attacker doesn't know what is the value

990
00:45:57,500 --> 00:46:02,590
of the cookie so he tries to guess one

991
00:46:00,280 --> 00:46:08,050
right we just try to guess first bite

992
00:46:02,590 --> 00:46:14,030
let's compress this 76 bytes fair enough

993
00:46:08,050 --> 00:46:18,020
so the attacker tries with 276 bytes

994
00:46:14,030 --> 00:46:20,420
fair enough the attacker brute forces

995
00:46:18,020 --> 00:46:22,580
everything finally tries with a notice

996
00:46:20,420 --> 00:46:24,910
that a is actually the real value of the

997
00:46:22,580 --> 00:46:32,569
first first byte of the session cookie

998
00:46:24,910 --> 00:46:34,790
was the compressed value 75 so I know

999
00:46:32,570 --> 00:46:37,160
that the value of the first character is

1000
00:46:34,790 --> 00:46:39,619
actually a so he goes to the second

1001
00:46:37,160 --> 00:46:43,100
right again he doesn't know he tries

1002
00:46:39,619 --> 00:46:48,500
with one what's the value of 76 he tries

1003
00:46:43,100 --> 00:46:51,529
with what s is the second one yes Oh 75

1004
00:46:48,500 --> 00:46:54,290
again because thanks to compression the

1005
00:46:51,530 --> 00:46:55,700
size will not be increased and the

1006
00:46:54,290 --> 00:46:57,619
attacker just keeps on using this to

1007
00:46:55,700 --> 00:46:59,540
brute-force every single character

1008
00:46:57,619 --> 00:47:01,430
notice that he only has to guess one

1009
00:46:59,540 --> 00:47:03,050
character at a time so this is really

1010
00:47:01,430 --> 00:47:06,379
really doable

1011
00:47:03,050 --> 00:47:07,940
that's how crime works very very simply

1012
00:47:06,380 --> 00:47:11,300
explained it's actually a bit more

1013
00:47:07,940 --> 00:47:12,920
difficult but this is how it works so

1014
00:47:11,300 --> 00:47:14,840
these are the requirements again it's

1015
00:47:12,920 --> 00:47:19,430
Edmond in the middle JavaScript and so

1016
00:47:14,840 --> 00:47:21,380
on so if you notice by now all the

1017
00:47:19,430 --> 00:47:23,060
requirements are the same right always

1018
00:47:21,380 --> 00:47:24,440
been in the middle always must be able

1019
00:47:23,060 --> 00:47:26,509
to run JavaScript in your browser

1020
00:47:24,440 --> 00:47:26,960
because I want to make the victims

1021
00:47:26,510 --> 00:47:29,030
browser

1022
00:47:26,960 --> 00:47:33,050
keep on sending Rufus what else do we

1023
00:47:29,030 --> 00:47:34,910
have our C 4 so our C 4 a lot of

1024
00:47:33,050 --> 00:47:37,300
research was done I know everyone heard

1025
00:47:34,910 --> 00:47:39,980
about our C for how bad it is but

1026
00:47:37,300 --> 00:47:42,950
besides being used in web which was

1027
00:47:39,980 --> 00:47:44,690
really bad implementation as well

1028
00:47:42,950 --> 00:47:47,240
these two guys these two researchers in

1029
00:47:44,690 --> 00:47:50,390
2015 found that there are a lot of

1030
00:47:47,240 --> 00:47:53,450
biases in our c 4 so this was the forest

1031
00:47:50,390 --> 00:47:56,330
bed if I send a lot of traffic and I

1032
00:47:53,450 --> 00:47:58,490
encrypted our C 4 there are some biases

1033
00:47:56,330 --> 00:48:02,900
which means I can actually figure out

1034
00:47:58,490 --> 00:48:05,060
what data has been encrypted so in order

1035
00:48:02,900 --> 00:48:07,580
to launch that attack can you guess the

1036
00:48:05,060 --> 00:48:09,470
requirements I need to run many in the

1037
00:48:07,580 --> 00:48:11,330
middle I need to make be able to send

1038
00:48:09,470 --> 00:48:13,669
your browser to maker browser to send a

1039
00:48:11,330 --> 00:48:16,130
lot of data and once I do that I can

1040
00:48:13,670 --> 00:48:17,420
actually try to figure out certain parts

1041
00:48:16,130 --> 00:48:20,810
of encrypted con

1042
00:48:17,420 --> 00:48:24,020
so these two guys found out that if they

1043
00:48:20,810 --> 00:48:26,690
encrypt 300 gigabytes of data oh wait

1044
00:48:24,020 --> 00:48:30,770
300 gigabytes of bag of data they can

1045
00:48:26,690 --> 00:48:32,480
decrypt 16 bytes of data right so they

1046
00:48:30,770 --> 00:48:34,090
can steal kind of your your session

1047
00:48:32,480 --> 00:48:39,740
cookie maybe but they need to encrypt

1048
00:48:34,090 --> 00:48:41,390
300 gigabytes of data now in 2015 when

1049
00:48:39,740 --> 00:48:43,629
you told sometime I need I need you to

1050
00:48:41,390 --> 00:48:46,100
send 300 kilobytes of data there

1051
00:48:43,630 --> 00:48:49,520
everyone would say oh no way I mean who

1052
00:48:46,100 --> 00:48:51,830
can send 300 gigs of data today not

1053
00:48:49,520 --> 00:48:54,080
impossible right we have fast links we

1054
00:48:51,830 --> 00:48:56,569
can do that maybe maybe not easily but

1055
00:48:54,080 --> 00:48:58,850
easier and remember one thing with

1056
00:48:56,570 --> 00:49:02,360
crypto attacks they only get better in

1057
00:48:58,850 --> 00:49:03,620
the time finally sweet 32 just quickly

1058
00:49:02,360 --> 00:49:08,030
because I have only like two minutes

1059
00:49:03,620 --> 00:49:10,730
left again a crypto issue with sweet 32

1060
00:49:08,030 --> 00:49:13,520
what we do is we are actually exploiting

1061
00:49:10,730 --> 00:49:16,100
the birthday attack anyone knows what is

1062
00:49:13,520 --> 00:49:21,110
the birthday attack the birthday Tech

1063
00:49:16,100 --> 00:49:25,009
says that in a room of 23 people we have

1064
00:49:21,110 --> 00:49:27,410
a chance 50% chance of two persons

1065
00:49:25,010 --> 00:49:29,450
sharing the same birthday so we probably

1066
00:49:27,410 --> 00:49:32,210
have someone here who share the same

1067
00:49:29,450 --> 00:49:35,629
birthday about 50% of probability and

1068
00:49:32,210 --> 00:49:39,440
thanks to this if we encrypt a lot of

1069
00:49:35,630 --> 00:49:43,220
data again then if we use 64-bit

1070
00:49:39,440 --> 00:49:46,100
encryption algorithms we have more than

1071
00:49:43,220 --> 00:49:48,770
50% chance of two blocks being the same

1072
00:49:46,100 --> 00:49:50,330
two encrypted box when two encrypted

1073
00:49:48,770 --> 00:49:53,960
blocks are the same I can actually get

1074
00:49:50,330 --> 00:49:57,350
the plaintext context but in order to do

1075
00:49:53,960 --> 00:50:01,550
this again I need to said check how many

1076
00:49:57,350 --> 00:50:03,589
a lot of requests right I again need to

1077
00:50:01,550 --> 00:50:06,950
send gigabytes hundreds of gigabytes of

1078
00:50:03,590 --> 00:50:09,560
data to make that collision happen same

1079
00:50:06,950 --> 00:50:11,689
prerequisites man-in-the-middle send a

1080
00:50:09,560 --> 00:50:14,450
lot of traffic actually sends how much

1081
00:50:11,690 --> 00:50:17,210
300 gigs of traffic again but notice

1082
00:50:14,450 --> 00:50:19,490
what happened in 2016 these guys did it

1083
00:50:17,210 --> 00:50:22,550
in only 30 hours they were better than

1084
00:50:19,490 --> 00:50:26,770
those in 2015 it took them less time to

1085
00:50:22,550 --> 00:50:29,170
send 300 gigabytes of data fit a browser

1086
00:50:26,770 --> 00:50:32,440
again remember this crypt attacks only

1087
00:50:29,170 --> 00:50:35,170
gets better with time so just to finish

1088
00:50:32,440 --> 00:50:37,450
quickly if you want to test any of the

1089
00:50:35,170 --> 00:50:39,310
websites that are Iran or in your own

1090
00:50:37,450 --> 00:50:41,439
engagements there are a couple of tools

1091
00:50:39,310 --> 00:50:43,750
that you can use I personally prefer to

1092
00:50:41,440 --> 00:50:46,570
use nmap and the peers are really really

1093
00:50:43,750 --> 00:50:49,270
nice script called SSL inab ciphers that

1094
00:50:46,570 --> 00:50:51,820
I used to enumerate the supported

1095
00:50:49,270 --> 00:50:54,270
encryption algorithms fantastic script

1096
00:50:51,820 --> 00:50:56,440
you can run it wherever you want and

1097
00:50:54,270 --> 00:50:58,540
very very easy to do

1098
00:50:56,440 --> 00:51:01,690
there is another utility called test SSL

1099
00:50:58,540 --> 00:51:04,300
that Sh again open source utility that

1100
00:51:01,690 --> 00:51:06,100
you can use it will nicely display

1101
00:51:04,300 --> 00:51:08,619
everything that is supported and it will

1102
00:51:06,100 --> 00:51:10,660
indicate what are the problem the

1103
00:51:08,619 --> 00:51:13,270
problems here I would just like to draw

1104
00:51:10,660 --> 00:51:16,390
the attention to one thing the SSL enum

1105
00:51:13,270 --> 00:51:19,119
cipher script in nmap does not support

1106
00:51:16,390 --> 00:51:21,700
SSL version 2 by the domain format at

1107
00:51:19,119 --> 00:51:23,860
all so if you're scanning supported

1108
00:51:21,700 --> 00:51:26,230
protocols and you want to check if your

1109
00:51:23,860 --> 00:51:29,140
target server supports SSL version 2 you

1110
00:51:26,230 --> 00:51:31,570
need to run a specific script called SSL

1111
00:51:29,140 --> 00:51:34,990
version 2 the SSL enum cipher script

1112
00:51:31,570 --> 00:51:37,359
will not support it test s LSH already

1113
00:51:34,990 --> 00:51:38,950
mentioned and finally quality you can

1114
00:51:37,359 --> 00:51:43,600
use close as well they have a really

1115
00:51:38,950 --> 00:51:45,250
great public site that will allow you to

1116
00:51:43,600 --> 00:51:47,618
enumerate supported encryption

1117
00:51:45,250 --> 00:51:50,980
algorithms just make sure that you

1118
00:51:47,619 --> 00:51:52,900
select this option over there

1119
00:51:50,980 --> 00:51:54,369
do not show results on the boards

1120
00:51:52,900 --> 00:51:56,980
because otherwise when you scan your own

1121
00:51:54,369 --> 00:51:58,869
website it will be publicly displayed on

1122
00:51:56,980 --> 00:52:00,550
Qualis website for a certain amount of

1123
00:51:58,869 --> 00:52:02,800
time which is probably something you

1124
00:52:00,550 --> 00:52:04,720
don't want and if you use this then

1125
00:52:02,800 --> 00:52:06,310
you'll see a report such as this one

1126
00:52:04,720 --> 00:52:08,950
which will say hi you've done a very

1127
00:52:06,310 --> 00:52:11,619
good job you get an A+ for configuring

1128
00:52:08,950 --> 00:52:13,899
the SSL TLS settings on your websites

1129
00:52:11,619 --> 00:52:15,850
apparently the guys from the sense did a

1130
00:52:13,900 --> 00:52:20,410
good job over there or whoever is the

1131
00:52:15,850 --> 00:52:23,769
the provider they are actually using

1132
00:52:20,410 --> 00:52:25,598
and as a conclusion my let's say

1133
00:52:23,769 --> 00:52:27,700
conclusion based on some research I did

1134
00:52:25,599 --> 00:52:29,769
would be that poodle is absolutely a

1135
00:52:27,700 --> 00:52:32,319
real threat so Excel version 3 should be

1136
00:52:29,769 --> 00:52:34,450
disabled it can be exploited especially

1137
00:52:32,319 --> 00:52:37,359
with browsers with proprietary protocols

1138
00:52:34,450 --> 00:52:39,519
it should still be okay why I cannot

1139
00:52:37,359 --> 00:52:42,220
make the source repeatedly send the

1140
00:52:39,519 --> 00:52:45,189
traffic that's why the PCI DSS industry

1141
00:52:42,220 --> 00:52:46,990
allows SSL version 3 for point of sale

1142
00:52:45,190 --> 00:52:50,079
devices when you pay with your credit

1143
00:52:46,990 --> 00:52:52,450
cards those devices might still be using

1144
00:52:50,079 --> 00:52:55,690
SSL version 3 they are vulnerable to

1145
00:52:52,450 --> 00:52:57,250
poodle but it cannot be exploited at

1146
00:52:55,690 --> 00:52:59,950
least with knowledge we know right now

1147
00:52:57,250 --> 00:53:04,029
crime and beast should be fixed just by

1148
00:52:59,950 --> 00:53:07,210
upgrading browsers rc4 again real threat

1149
00:53:04,029 --> 00:53:10,420
disable it 6:32 in my opinion probably

1150
00:53:07,210 --> 00:53:13,259
informational vulnerability we can live

1151
00:53:10,420 --> 00:53:15,700
with it for a while and again another

1152
00:53:13,259 --> 00:53:17,680
another time I'll repeat this keep in

1153
00:53:15,700 --> 00:53:20,859
mind that crypt attacks only get better

1154
00:53:17,680 --> 00:53:23,019
with time and with this I hope I didn't

1155
00:53:20,859 --> 00:53:25,119
kill you with crypto talks I hope you

1156
00:53:23,019 --> 00:53:27,758
still have strength for remaining

1157
00:53:25,119 --> 00:53:29,589
presentations rocky and whatnot if there

1158
00:53:27,759 --> 00:53:32,109
are questions I'm not sure how much time

1159
00:53:29,589 --> 00:53:35,650
we have in a few minutes like only two

1160
00:53:32,109 --> 00:53:37,660
minutes or I can take them outside I'll

1161
00:53:35,650 --> 00:53:42,299
be here till Sunday so please feel free

1162
00:53:37,660 --> 00:53:46,259
to float me with questions or whatever

1163
00:53:42,299 --> 00:53:46,259
Erin's these scripts are dead

1164
00:53:46,650 --> 00:53:50,549
the do something enough time for the

1165
00:53:48,690 --> 00:53:52,849
next next person so take care of one

1166
00:53:50,549 --> 00:53:52,849
again

1167
00:54:18,730 --> 00:54:20,790
you

