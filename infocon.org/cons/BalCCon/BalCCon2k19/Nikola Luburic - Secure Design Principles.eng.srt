1
00:00:25,860 --> 00:00:32,479
hello next topic is secure design

2
00:00:28,500 --> 00:00:32,479
principles by Nikola Lubitsch

3
00:00:34,140 --> 00:00:44,760
hey guys well I'm gonna start this talk

4
00:00:39,650 --> 00:00:47,310
with a short story about Susan now a few

5
00:00:44,760 --> 00:00:50,910
years ago Susan was the chief security

6
00:00:47,310 --> 00:00:55,080
officer at a large corporation you might

7
00:00:50,910 --> 00:00:58,679
have heard of called Equifax she's

8
00:00:55,080 --> 00:01:01,460
retired now but the reason for her

9
00:00:58,680 --> 00:01:05,630
retirement has nothing to do with age

10
00:01:01,460 --> 00:01:08,759
Susan retired because of the absolute

11
00:01:05,630 --> 00:01:13,350
disaster that was the Equifax data

12
00:01:08,759 --> 00:01:16,170
breach now as you may know this attack

13
00:01:13,350 --> 00:01:18,570
happened about two years ago it was a

14
00:01:16,170 --> 00:01:22,290
multi-phased attack where the attackers

15
00:01:18,570 --> 00:01:25,648
managed to retrieve about 140 million

16
00:01:22,290 --> 00:01:29,700
records personal data related to

17
00:01:25,649 --> 00:01:33,509
Americans so almost half the population

18
00:01:29,700 --> 00:01:36,149
of the states this attack succeeded

19
00:01:33,509 --> 00:01:38,700
because Susan and her team failed to

20
00:01:36,149 --> 00:01:41,450
apply some simple secure design

21
00:01:38,700 --> 00:01:41,450
principles

22
00:01:41,840 --> 00:01:48,439
so at the start of this talk we'll go

23
00:01:46,250 --> 00:01:50,270
examine the broader scope of secure

24
00:01:48,439 --> 00:01:53,059
design principles and see how they

25
00:01:50,270 --> 00:01:55,990
address software security how they fit

26
00:01:53,060 --> 00:01:59,470
into this secure software engineering

27
00:01:55,990 --> 00:02:02,479
after that we'll look at five sets of

28
00:01:59,470 --> 00:02:05,240
secure design principles which are

29
00:02:02,479 --> 00:02:07,880
applicable to almost anything that you

30
00:02:05,240 --> 00:02:11,569
can make today from various software to

31
00:02:07,880 --> 00:02:14,030
protocols to building design and then

32
00:02:11,569 --> 00:02:17,268
finally and hopefully the most important

33
00:02:14,030 --> 00:02:20,330
question by the end of this talk how can

34
00:02:17,269 --> 00:02:22,640
you start practicing this these design

35
00:02:20,330 --> 00:02:28,730
principles in your everyday software

36
00:02:22,640 --> 00:02:32,420
development so let's start we want to

37
00:02:28,730 --> 00:02:35,899
have secure software and as software

38
00:02:32,420 --> 00:02:38,329
engineers now and thankfully security

39
00:02:35,900 --> 00:02:41,450
engineers require this is not something

40
00:02:38,330 --> 00:02:43,610
that's easy to do we need to address

41
00:02:41,450 --> 00:02:47,660
security throughout the software

42
00:02:43,610 --> 00:02:51,470
development lifecycle we need to specify

43
00:02:47,660 --> 00:02:53,989
the security requirements we need to

44
00:02:51,470 --> 00:02:56,690
examine the threat model hood who wants

45
00:02:53,989 --> 00:03:00,410
to attack us which hazards do they want

46
00:02:56,690 --> 00:03:03,650
to harm and how do we protect them then

47
00:03:00,410 --> 00:03:07,489
we start designing we need to construct

48
00:03:03,650 --> 00:03:09,260
a secured by design solution so this is

49
00:03:07,489 --> 00:03:12,859
the first point where these secure

50
00:03:09,260 --> 00:03:14,929
design principles enter our story when

51
00:03:12,859 --> 00:03:16,910
you're performing design activities you

52
00:03:14,930 --> 00:03:18,950
always want to keep these design

53
00:03:16,910 --> 00:03:23,269
principles in mind so that you can

54
00:03:18,950 --> 00:03:25,429
create a secure by design solution then

55
00:03:23,269 --> 00:03:27,590
we move on to code where we want to

56
00:03:25,430 --> 00:03:29,569
perform some static code analysis some

57
00:03:27,590 --> 00:03:31,819
security code reviews to make sure that

58
00:03:29,569 --> 00:03:35,480
there are no code level owner abilities

59
00:03:31,819 --> 00:03:37,839
that there are no flaws in your

60
00:03:35,480 --> 00:03:37,840
implementation

61
00:03:38,520 --> 00:03:44,620
arguably the most important part of our

62
00:03:41,680 --> 00:03:48,280
secure software engineering is the

63
00:03:44,620 --> 00:03:51,940
verification and validation so we need

64
00:03:48,280 --> 00:03:54,700
to see if there are any vulnerabilities

65
00:03:51,940 --> 00:03:56,710
left in our solution we need to test to

66
00:03:54,700 --> 00:03:59,260
perform penetration testing security

67
00:03:56,710 --> 00:04:02,350
testing to see if the secure design

68
00:03:59,260 --> 00:04:06,600
principles were followed if the if there

69
00:04:02,350 --> 00:04:09,700
are no secure coding mistakes and then

70
00:04:06,600 --> 00:04:14,200
basically if these guys don't find your

71
00:04:09,700 --> 00:04:16,000
vulnerabilities you know who will once

72
00:04:14,200 --> 00:04:18,670
we have a potentially shippable

73
00:04:16,000 --> 00:04:20,920
increment it's time for release so maybe

74
00:04:18,670 --> 00:04:23,050
we'll deploy perform some secure

75
00:04:20,920 --> 00:04:27,580
delivery and deployment activities and

76
00:04:23,050 --> 00:04:30,040
of course all of this needs to evolve we

77
00:04:27,580 --> 00:04:32,409
need to manage the work that we do we

78
00:04:30,040 --> 00:04:35,680
need to follow the threat landscape to

79
00:04:32,410 --> 00:04:38,170
see which news and tools come up and to

80
00:04:35,680 --> 00:04:43,000
integrate them into our security

81
00:04:38,170 --> 00:04:45,790
development lifecycle so now let's focus

82
00:04:43,000 --> 00:04:48,610
on the secure design principles who are

83
00:04:45,790 --> 00:04:51,690
the people working in software

84
00:04:48,610 --> 00:04:54,580
development that should be aware of this

85
00:04:51,690 --> 00:04:57,700
well as I mentioned of course if you're

86
00:04:54,580 --> 00:05:00,130
a designer of software and systems you

87
00:04:57,700 --> 00:05:03,310
need to address security during your

88
00:05:00,130 --> 00:05:05,620
design you need to plan for security

89
00:05:03,310 --> 00:05:11,770
plan the security controls the security

90
00:05:05,620 --> 00:05:15,900
work so that it gets done but it doesn't

91
00:05:11,770 --> 00:05:19,450
stop there when talking about

92
00:05:15,900 --> 00:05:22,150
implementation we really can apply these

93
00:05:19,450 --> 00:05:25,539
secure design principles at the code

94
00:05:22,150 --> 00:05:27,909
level as well so when talking about

95
00:05:25,540 --> 00:05:29,920
design we have this macro level the

96
00:05:27,910 --> 00:05:32,440
architecture of the system of the

97
00:05:29,920 --> 00:05:35,380
software but we also have the micro

98
00:05:32,440 --> 00:05:38,020
level the code design and this is where

99
00:05:35,380 --> 00:05:42,310
we can apply these principles to write

100
00:05:38,020 --> 00:05:45,099
better code and of course the security

101
00:05:42,310 --> 00:05:47,800
code reviews will review the code that

102
00:05:45,100 --> 00:05:51,080
we write and make sure that it follows

103
00:05:47,800 --> 00:05:54,210
the design that we specified

104
00:05:51,080 --> 00:05:57,210
our testers are affected as well because

105
00:05:54,210 --> 00:05:59,460
we need to verify that these principles

106
00:05:57,210 --> 00:06:01,590
were followed they will examine our

107
00:05:59,460 --> 00:06:03,960
attack surface they will see if our

108
00:06:01,590 --> 00:06:05,789
access control is correct and this is

109
00:06:03,960 --> 00:06:09,419
something that we should plan in the

110
00:06:05,790 --> 00:06:13,160
design so let's look at the principles

111
00:06:09,420 --> 00:06:13,160
we will examine today

112
00:06:18,870 --> 00:06:26,410
we'll start with defense-in-depth and

113
00:06:22,889 --> 00:06:30,460
the idea here is to apply multiple

114
00:06:26,410 --> 00:06:33,220
security controls to our solution so

115
00:06:30,460 --> 00:06:38,159
that we can remain secure even if that

116
00:06:33,220 --> 00:06:42,760
control fails let's look at an example

117
00:06:38,160 --> 00:06:46,030
so we have some file integrator service

118
00:06:42,760 --> 00:06:48,729
application it's communicating with some

119
00:06:46,030 --> 00:06:50,559
external file storage maybe this is our

120
00:06:48,729 --> 00:06:52,750
system maybe it's a business partner it

121
00:06:50,560 --> 00:06:56,080
doesn't really matter all that matters

122
00:06:52,750 --> 00:06:59,650
is that we're receiving important data

123
00:06:56,080 --> 00:07:02,109
from this external file storage based on

124
00:06:59,650 --> 00:07:06,130
which we can perform some business

125
00:07:02,110 --> 00:07:09,639
operations and then we store it

126
00:07:06,130 --> 00:07:12,250
somewhere locally the idea is that we

127
00:07:09,639 --> 00:07:15,250
have an attacker that wants to modify

128
00:07:12,250 --> 00:07:17,470
this data compromise its integrity so

129
00:07:15,250 --> 00:07:21,460
that it can harden they can harm our

130
00:07:17,470 --> 00:07:23,349
system they will change the data it will

131
00:07:21,460 --> 00:07:25,120
become corrupted and then our system

132
00:07:23,349 --> 00:07:28,599
will crash or maybe it will continue

133
00:07:25,120 --> 00:07:30,880
working but with false data it's it

134
00:07:28,599 --> 00:07:36,190
doesn't really matter and we want to

135
00:07:30,880 --> 00:07:38,500
protect this data a possible attack can

136
00:07:36,190 --> 00:07:41,530
be on the communication channel itself

137
00:07:38,500 --> 00:07:44,370
so we introduce a security control we

138
00:07:41,530 --> 00:07:48,219
introduce secure File Transfer Protocol

139
00:07:44,370 --> 00:07:50,520
job done right well not if we're talking

140
00:07:48,220 --> 00:07:54,340
about defense-in-depth

141
00:07:50,520 --> 00:07:57,310
we need to ask the question what if it

142
00:07:54,340 --> 00:08:00,190
breaks what if this secure File Transfer

143
00:07:57,310 --> 00:08:03,520
Protocol doesn't work doesn't provide us

144
00:08:00,190 --> 00:08:05,979
with the security that we need well

145
00:08:03,520 --> 00:08:09,639
another related question might be why

146
00:08:05,979 --> 00:08:13,330
would it break why can't we trust this

147
00:08:09,639 --> 00:08:16,960
control well security controls field for

148
00:08:13,330 --> 00:08:21,280
a number of reasons we can have a bug in

149
00:08:16,960 --> 00:08:24,698
the implementation of the SFTP you

150
00:08:21,280 --> 00:08:27,219
create software you make bugs all the

151
00:08:24,699 --> 00:08:30,849
time well why don't why wouldn't these

152
00:08:27,219 --> 00:08:33,679
guys make the same mistakes as you

153
00:08:30,849 --> 00:08:37,880
technology can be vulnerable we've seen

154
00:08:33,679 --> 00:08:40,130
it a large number of times even in

155
00:08:37,880 --> 00:08:44,779
well-known security controls that we are

156
00:08:40,130 --> 00:08:47,930
supposed to trust then we might miss

157
00:08:44,779 --> 00:08:52,040
configure this software maybe the SFTP

158
00:08:47,930 --> 00:08:54,250
is secure the implementation is okay but

159
00:08:52,040 --> 00:08:59,000
we don't properly configure it our IT

160
00:08:54,250 --> 00:09:02,089
personnel forgets to set some

161
00:08:59,000 --> 00:09:05,570
certificates or maybe set the

162
00:09:02,089 --> 00:09:08,720
appropriate configuration so we have a

163
00:09:05,570 --> 00:09:11,930
vulnerability and finally the security

164
00:09:08,720 --> 00:09:13,670
control can be improperly used we might

165
00:09:11,930 --> 00:09:15,500
think that we're secure but we don't

166
00:09:13,670 --> 00:09:17,899
really understand the security control

167
00:09:15,500 --> 00:09:19,120
and then we're applying it to no great

168
00:09:17,899 --> 00:09:22,639
effect

169
00:09:19,120 --> 00:09:25,790
so defense-in-depth tells you to ask

170
00:09:22,639 --> 00:09:28,130
this question what if it breaks is there

171
00:09:25,790 --> 00:09:32,719
anything else that provides security for

172
00:09:28,130 --> 00:09:36,010
me in this case we might introduce file

173
00:09:32,720 --> 00:09:38,810
signatures so digital signatures to

174
00:09:36,010 --> 00:09:43,970
guarantee the integrity of our data as

175
00:09:38,810 --> 00:09:46,939
an additional security control now if

176
00:09:43,970 --> 00:09:49,459
the SFTP fails we still have the digital

177
00:09:46,940 --> 00:09:52,070
signature as a fallback if it fails

178
00:09:49,459 --> 00:09:56,529
hopefully the SFTP won't and if both

179
00:09:52,070 --> 00:09:56,529
fail well that's just very bad luck

180
00:09:56,990 --> 00:10:04,930
so another example we have a similar

181
00:10:02,180 --> 00:10:08,089
situation where our application is

182
00:10:04,930 --> 00:10:12,109
communicating with an external service

183
00:10:08,090 --> 00:10:14,540
and we have an attacker that wants to

184
00:10:12,110 --> 00:10:17,570
spoof our business partner to pretend

185
00:10:14,540 --> 00:10:20,569
that it is this service so that he can

186
00:10:17,570 --> 00:10:22,550
supply some data for us once again maybe

187
00:10:20,570 --> 00:10:25,370
he wants to compromise our system in

188
00:10:22,550 --> 00:10:27,709
some way the question is how do we

189
00:10:25,370 --> 00:10:30,710
authenticate this business partner and

190
00:10:27,710 --> 00:10:33,920
an easy solution is to have some

191
00:10:30,710 --> 00:10:36,550
endpoint addresses that we are services

192
00:10:33,920 --> 00:10:40,819
targeting and to make sure that they are

193
00:10:36,550 --> 00:10:43,099
targeting our business partner but of

194
00:10:40,820 --> 00:10:45,620
course this isn't enough because the

195
00:10:43,100 --> 00:10:47,930
addresses can be spoofed the attacker

196
00:10:45,620 --> 00:10:50,720
might perform some DNS poisoning or

197
00:10:47,930 --> 00:10:52,939
something along those lines and the

198
00:10:50,720 --> 00:10:57,140
requests and communication can be

199
00:10:52,940 --> 00:10:59,240
redirected to his malicious service so

200
00:10:57,140 --> 00:11:00,650
we introduce cryptography once again we

201
00:10:59,240 --> 00:11:06,020
have some certificates for

202
00:11:00,650 --> 00:11:09,380
authentication and now we have some we

203
00:11:06,020 --> 00:11:15,199
have some security that this business

204
00:11:09,380 --> 00:11:18,590
partner is the right one but of course

205
00:11:15,200 --> 00:11:22,610
this doesn't really solve our attack

206
00:11:18,590 --> 00:11:25,910
surface what if the attacker is inside

207
00:11:22,610 --> 00:11:28,400
our business partner system and then he

208
00:11:25,910 --> 00:11:33,670
can channel the attacks through these

209
00:11:28,400 --> 00:11:36,949
legitimate communication channels so

210
00:11:33,670 --> 00:11:39,260
validation is an obvious solution here

211
00:11:36,950 --> 00:11:41,870
we want to validate everything that's

212
00:11:39,260 --> 00:11:43,460
coming from our business partner and to

213
00:11:41,870 --> 00:11:46,910
make sure that no rubbish gets

214
00:11:43,460 --> 00:11:48,890
introduced into our system what happens

215
00:11:46,910 --> 00:11:53,270
if the validators fail what happens if

216
00:11:48,890 --> 00:11:56,660
our application crashes we might decide

217
00:11:53,270 --> 00:11:59,449
to introduce a service dedicated for

218
00:11:56,660 --> 00:12:01,969
this validation so that it crashes if

219
00:11:59,450 --> 00:12:05,660
there is some advanced attack vector

220
00:12:01,970 --> 00:12:08,380
coming here and similarly to the

221
00:12:05,660 --> 00:12:10,100
internal business app in the previous

222
00:12:08,380 --> 00:12:12,380
case we

223
00:12:10,100 --> 00:12:15,259
we'll introduce all of these security

224
00:12:12,380 --> 00:12:21,769
controls to have this multi-layered

225
00:12:15,259 --> 00:12:25,220
defense in depth all of this is at the

226
00:12:21,769 --> 00:12:26,720
software level so far right but what

227
00:12:25,220 --> 00:12:29,899
about the network what about the

228
00:12:26,720 --> 00:12:32,360
hardware the operating system well we

229
00:12:29,899 --> 00:12:35,240
should consider these controls as well

230
00:12:32,360 --> 00:12:38,329
to have really a multi-layered

231
00:12:35,240 --> 00:12:41,720
multifaceted defense in depth where an

232
00:12:38,329 --> 00:12:42,609
attacker that manages to break a single

233
00:12:41,720 --> 00:12:46,279
control

234
00:12:42,610 --> 00:12:48,410
ideally won't have any other advantage

235
00:12:46,279 --> 00:12:52,360
he won't gain even anything by

236
00:12:48,410 --> 00:12:55,399
compromising our SFTP for example but

237
00:12:52,360 --> 00:12:57,850
let's at least try to reduce the

238
00:12:55,399 --> 00:13:04,000
advantage and advantage that he does get

239
00:12:57,850 --> 00:13:08,420
from this successful exploit moving on

240
00:13:04,000 --> 00:13:10,910
attack surface analysis now this is more

241
00:13:08,420 --> 00:13:13,550
of an activity than a pract than a

242
00:13:10,910 --> 00:13:16,730
principle but it is still somewhat

243
00:13:13,550 --> 00:13:19,189
related to software design the idea is

244
00:13:16,730 --> 00:13:22,639
to always keep in mind where an attack

245
00:13:19,189 --> 00:13:26,089
can come from and then to limit these

246
00:13:22,639 --> 00:13:28,610
avenues as much as possible of course we

247
00:13:26,089 --> 00:13:30,680
want to have the system perform the

248
00:13:28,610 --> 00:13:36,019
business functions that it's supposed to

249
00:13:30,680 --> 00:13:38,859
but nothing else here let's look at an

250
00:13:36,019 --> 00:13:41,660
example where we have some user

251
00:13:38,860 --> 00:13:44,449
communicating with an application with

252
00:13:41,660 --> 00:13:48,709
which is in turn communicating with some

253
00:13:44,449 --> 00:13:52,609
data center our set of SQL databases no

254
00:13:48,709 --> 00:13:56,540
SQL databases files whatever and we have

255
00:13:52,610 --> 00:13:59,569
some files with which the application is

256
00:13:56,540 --> 00:14:03,199
communicating and an attacker that wants

257
00:13:59,569 --> 00:14:06,380
to compromise our data center he wants

258
00:14:03,199 --> 00:14:09,258
to destroy our data modify it in some

259
00:14:06,380 --> 00:14:11,560
way or simply read it to sell it on the

260
00:14:09,259 --> 00:14:11,560
dark web

261
00:14:12,220 --> 00:14:17,800
the question for attack surface analysis

262
00:14:15,250 --> 00:14:21,880
is where does the attack come from and

263
00:14:17,800 --> 00:14:24,579
we call this attack surface mapping well

264
00:14:21,880 --> 00:14:28,060
in this case the attack can come from

265
00:14:24,580 --> 00:14:30,370
anywhere this is the first assumption

266
00:14:28,060 --> 00:14:33,160
that we should make start from either

267
00:14:30,370 --> 00:14:37,090
everything and then focus but what

268
00:14:33,160 --> 00:14:40,480
should we focus on well trust boundaries

269
00:14:37,090 --> 00:14:43,120
can help us here we can determine where

270
00:14:40,480 --> 00:14:45,910
it is likely that an attack can come

271
00:14:43,120 --> 00:14:50,410
from by examining who has access to

272
00:14:45,910 --> 00:14:53,829
particular resources in our system if we

273
00:14:50,410 --> 00:14:56,890
have a browser application then pretty

274
00:14:53,830 --> 00:14:59,200
much if it's publicly available pretty

275
00:14:56,890 --> 00:15:03,819
much everyone from the internet can

276
00:14:59,200 --> 00:15:05,620
target these endpoints here what about

277
00:15:03,820 --> 00:15:08,170
the communication between the file

278
00:15:05,620 --> 00:15:10,690
system and the application on the same

279
00:15:08,170 --> 00:15:16,180
machine well it's not really easily

280
00:15:10,690 --> 00:15:19,270
accessible right so we can see what is

281
00:15:16,180 --> 00:15:23,560
inside our scope and what is implausible

282
00:15:19,270 --> 00:15:26,620
and reduce some of these concerning

283
00:15:23,560 --> 00:15:30,089
areas to focus only on the important

284
00:15:26,620 --> 00:15:33,660
parts for this attack surface analysis

285
00:15:30,090 --> 00:15:36,310
so we would want to protect the

286
00:15:33,660 --> 00:15:39,040
communication and end points facing the

287
00:15:36,310 --> 00:15:41,709
Internet we're concerned with files here

288
00:15:39,040 --> 00:15:43,050
because insiders might compromise them

289
00:15:41,710 --> 00:15:46,150
and so on

290
00:15:43,050 --> 00:15:50,050
once we've mapped the attack surface we

291
00:15:46,150 --> 00:15:53,650
can okay before let's just summarize

292
00:15:50,050 --> 00:15:56,290
this part where can an attack come from

293
00:15:53,650 --> 00:16:00,220
the interaction points are an obvious

294
00:15:56,290 --> 00:16:03,160
attack surface all your data stores data

295
00:16:00,220 --> 00:16:07,030
flows especially those between multiple

296
00:16:03,160 --> 00:16:09,339
machines what should we focus on data

297
00:16:07,030 --> 00:16:13,780
arriving from less secure zones

298
00:16:09,339 --> 00:16:16,690
especially those zones that have a near

299
00:16:13,780 --> 00:16:21,010
infinite amount of attackers such as the

300
00:16:16,690 --> 00:16:24,790
internet and what is out of scope well

301
00:16:21,010 --> 00:16:25,540
of course we have a scope defined bar by

302
00:16:24,790 --> 00:16:28,180
our team

303
00:16:25,540 --> 00:16:31,240
we will try to secure the components

304
00:16:28,180 --> 00:16:33,400
made by our team but we should really

305
00:16:31,240 --> 00:16:35,620
write down the assumptions that we make

306
00:16:33,400 --> 00:16:39,520
maybe we say that we're not concerned

307
00:16:35,620 --> 00:16:42,310
with protecting the OS okay but write it

308
00:16:39,520 --> 00:16:45,819
down because when another team member

309
00:16:42,310 --> 00:16:48,189
comes with more experience he might tell

310
00:16:45,820 --> 00:16:50,830
you why this is a mistake and that you

311
00:16:48,190 --> 00:16:55,180
should be concerned with the OS

312
00:16:50,830 --> 00:16:58,360
even though you're a web developer now

313
00:16:55,180 --> 00:17:01,989
after we mapped the attack surface we

314
00:16:58,360 --> 00:17:05,709
can start reducing it the first question

315
00:17:01,990 --> 00:17:09,010
is how can we limit the access to this

316
00:17:05,709 --> 00:17:11,650
attack surface so when talking about

317
00:17:09,010 --> 00:17:14,440
access control the most important

318
00:17:11,650 --> 00:17:16,630
question is who can access this who can

319
00:17:14,440 --> 00:17:20,820
access these files who can access these

320
00:17:16,630 --> 00:17:25,959
endpoints who can access the data center

321
00:17:20,819 --> 00:17:29,159
which applications which users these are

322
00:17:25,959 --> 00:17:33,010
the questions that you need to answer

323
00:17:29,160 --> 00:17:35,260
once we've limited the amount of

324
00:17:33,010 --> 00:17:38,920
attackers that can access our resources

325
00:17:35,260 --> 00:17:42,300
the question is how can we limit their

326
00:17:38,920 --> 00:17:45,820
opportunity and what do I mean by this

327
00:17:42,300 --> 00:17:49,000
well in this case we have some temporary

328
00:17:45,820 --> 00:17:52,179
files right how long are they available

329
00:17:49,000 --> 00:17:57,010
is this something that we will delete in

330
00:17:52,180 --> 00:17:58,990
a minute in a day in a week an attacker

331
00:17:57,010 --> 00:18:01,870
might not take over our system by

332
00:17:58,990 --> 00:18:04,900
compromising these temporary files but

333
00:18:01,870 --> 00:18:07,000
he might learn something interesting he

334
00:18:04,900 --> 00:18:09,850
might read some errors he might steal

335
00:18:07,000 --> 00:18:12,760
some data if we don't really need to

336
00:18:09,850 --> 00:18:13,209
have these temporary files available for

337
00:18:12,760 --> 00:18:15,760
a month

338
00:18:13,210 --> 00:18:17,970
why not delete them after a day or even

339
00:18:15,760 --> 00:18:17,970
sooner

340
00:18:18,370 --> 00:18:24,219
for the application we can ask the

341
00:18:21,429 --> 00:18:27,730
question how long how frequently are

342
00:18:24,220 --> 00:18:30,429
functions used do we need to have all

343
00:18:27,730 --> 00:18:33,730
functions available during the night if

344
00:18:30,429 --> 00:18:37,450
this is an internal app we can maybe

345
00:18:33,730 --> 00:18:40,299
shut down the system but more

346
00:18:37,450 --> 00:18:42,279
importantly are all the functions that

347
00:18:40,299 --> 00:18:47,440
are available in the software actually

348
00:18:42,279 --> 00:18:49,809
used is there some set of functions that

349
00:18:47,440 --> 00:18:53,890
nobody uses or that are very small

350
00:18:49,809 --> 00:18:56,200
percent of our users use maybe we should

351
00:18:53,890 --> 00:18:58,419
remove those because they open an attack

352
00:18:56,200 --> 00:19:03,220
surface and we don't really get much

353
00:18:58,419 --> 00:19:06,070
benefit from them and of course this is

354
00:19:03,220 --> 00:19:08,110
related to deprecated code as well do

355
00:19:06,070 --> 00:19:10,809
you have some dead code that nobody is

356
00:19:08,110 --> 00:19:12,820
using nobody is mint maintaining it

357
00:19:10,809 --> 00:19:16,299
might present an attack surface that you

358
00:19:12,820 --> 00:19:18,580
completely forgot about in general this

359
00:19:16,299 --> 00:19:21,549
is good advice for software development

360
00:19:18,580 --> 00:19:26,408
not just for security but also for

361
00:19:21,549 --> 00:19:29,860
security for the data center we can ask

362
00:19:26,409 --> 00:19:32,559
the question how much data does the

363
00:19:29,860 --> 00:19:36,250
application use how frequently does it

364
00:19:32,559 --> 00:19:39,399
contact it to retrieve data as we'll see

365
00:19:36,250 --> 00:19:41,770
with Susan it can be quite important to

366
00:19:39,399 --> 00:19:45,939
limit the amount of data that's

367
00:19:41,770 --> 00:19:48,730
available from the database to minimize

368
00:19:45,940 --> 00:19:51,580
it to only the necessary amount of

369
00:19:48,730 --> 00:19:54,179
queries commands demanded by the

370
00:19:51,580 --> 00:19:54,178
business

371
00:19:54,880 --> 00:20:00,700
once we've limited who can access the

372
00:19:57,940 --> 00:20:02,350
endpoints who can access the files once

373
00:20:00,700 --> 00:20:04,990
we've limited how long they are

374
00:20:02,350 --> 00:20:08,080
available when they are available the

375
00:20:04,990 --> 00:20:10,270
question is how can we limit the attack

376
00:20:08,080 --> 00:20:13,600
vectors that can arrive through these

377
00:20:10,270 --> 00:20:16,330
controlled channels and this is

378
00:20:13,600 --> 00:20:19,480
basically input validation when talking

379
00:20:16,330 --> 00:20:21,580
about the application layer so the

380
00:20:19,480 --> 00:20:24,280
questions that we should be asking is

381
00:20:21,580 --> 00:20:30,790
how does the application how does the

382
00:20:24,280 --> 00:20:34,440
data center handle malformed inputs so

383
00:20:30,790 --> 00:20:37,090
this is a tack surface reduction for

384
00:20:34,440 --> 00:20:40,030
limiting the attackers access we will

385
00:20:37,090 --> 00:20:42,610
examine the next set of secure design

386
00:20:40,030 --> 00:20:45,970
principles related to sound access

387
00:20:42,610 --> 00:20:48,820
control for the attacker opportunity we

388
00:20:45,970 --> 00:20:52,360
should consider the time frame when data

389
00:20:48,820 --> 00:20:55,510
and functions should be available the

390
00:20:52,360 --> 00:20:59,020
frequency how much availability should

391
00:20:55,510 --> 00:21:02,050
we have once again some measurements to

392
00:20:59,020 --> 00:21:06,430
see what is the expected amount of

393
00:21:02,050 --> 00:21:08,830
queries and so on and really should we

394
00:21:06,430 --> 00:21:13,450
even have that data and functions

395
00:21:08,830 --> 00:21:16,679
available to begin with for attack

396
00:21:13,450 --> 00:21:18,880
vector limitation input validation

397
00:21:16,680 --> 00:21:22,350
something that you should really perform

398
00:21:18,880 --> 00:21:25,420
for all data coming to your application

399
00:21:22,350 --> 00:21:27,659
in general we can always limit the type

400
00:21:25,420 --> 00:21:30,400
of data the length possibly the

401
00:21:27,660 --> 00:21:33,430
character sets or values which are

402
00:21:30,400 --> 00:21:36,160
arriving but we might also perform some

403
00:21:33,430 --> 00:21:38,860
specialized validation for specific data

404
00:21:36,160 --> 00:21:41,290
sets data types so we're talking about

405
00:21:38,860 --> 00:21:45,969
SQL injection some prepared statements

406
00:21:41,290 --> 00:21:48,870
XML injection exists X as the validation

407
00:21:45,970 --> 00:21:48,870
and so on

408
00:21:49,950 --> 00:21:55,680
so let's look at one more example for

409
00:21:53,130 --> 00:22:00,630
attack surface analysis to wrap this up

410
00:21:55,680 --> 00:22:02,940
and we will examine at a low level of

411
00:22:00,630 --> 00:22:04,800
design this time where we are looking at

412
00:22:02,940 --> 00:22:06,630
a single application a spring

413
00:22:04,800 --> 00:22:09,540
application a dotnet application that

414
00:22:06,630 --> 00:22:12,330
doesn't really matter we have some HTTP

415
00:22:09,540 --> 00:22:13,620
endpoints which are communicating with a

416
00:22:12,330 --> 00:22:17,760
data access layer

417
00:22:13,620 --> 00:22:19,830
you must bring repository for example we

418
00:22:17,760 --> 00:22:22,530
have an attacker that wants to

419
00:22:19,830 --> 00:22:26,370
compromise the data and now we're

420
00:22:22,530 --> 00:22:31,379
examining a single part of the attack

421
00:22:26,370 --> 00:22:35,179
surface namely the HTTP endpoints how do

422
00:22:31,380 --> 00:22:38,910
we perform attack surface analysis here

423
00:22:35,180 --> 00:22:41,190
for one we look at all the endpoints

424
00:22:38,910 --> 00:22:45,900
what are all the functions that are

425
00:22:41,190 --> 00:22:46,890
available to this user and then for each

426
00:22:45,900 --> 00:22:50,340
endpoint

427
00:22:46,890 --> 00:22:52,920
we examine all the inputs all the places

428
00:22:50,340 --> 00:22:55,850
where the user or rather the attacker

429
00:22:52,920 --> 00:22:59,670
can send an attack vector

430
00:22:55,850 --> 00:23:03,270
so we examine a single HTTP requests and

431
00:22:59,670 --> 00:23:06,960
here we have an obvious input in the

432
00:23:03,270 --> 00:23:11,100
query parameters but a somewhat less

433
00:23:06,960 --> 00:23:14,550
obvious input are the headers especially

434
00:23:11,100 --> 00:23:16,050
when you have custom headers these are

435
00:23:14,550 --> 00:23:18,690
headers which your application is

436
00:23:16,050 --> 00:23:21,600
processing at some point and then the

437
00:23:18,690 --> 00:23:26,570
attacker can send attack vectors here as

438
00:23:21,600 --> 00:23:26,570
was the case in Susan's system

439
00:23:26,850 --> 00:23:30,658
so we would go on to map the attack

440
00:23:29,100 --> 00:23:33,269
surface by examining all of these

441
00:23:30,659 --> 00:23:35,549
endpoints for post requests put requests

442
00:23:33,269 --> 00:23:38,250
we would obviously also look at the

443
00:23:35,549 --> 00:23:41,100
request body and this would be the

444
00:23:38,250 --> 00:23:43,830
mapping of our attack surface the

445
00:23:41,100 --> 00:23:50,000
reduction access control input

446
00:23:43,830 --> 00:23:52,320
validation and so on crucially

447
00:23:50,000 --> 00:23:55,049
understand where the attack can come

448
00:23:52,320 --> 00:23:58,639
from and then limit these avenues as

449
00:23:55,049 --> 00:23:58,639
much as possible

450
00:23:59,350 --> 00:24:04,840
sound access control is next as I

451
00:24:02,170 --> 00:24:07,270
already mentioned earlier and this is

452
00:24:04,840 --> 00:24:09,189
essentially a set of three security

453
00:24:07,270 --> 00:24:12,970
design principles that we will look at

454
00:24:09,190 --> 00:24:16,150
the idea is to restrict access to all

455
00:24:12,970 --> 00:24:21,670
objects across the system at all levels

456
00:24:16,150 --> 00:24:24,810
at all times as much as possible support

457
00:24:21,670 --> 00:24:28,120
the business and nothing else but also

458
00:24:24,810 --> 00:24:31,889
minimize the power a single individual

459
00:24:28,120 --> 00:24:34,780
has so let's look at this

460
00:24:31,890 --> 00:24:38,350
the first principle we're looking at is

461
00:24:34,780 --> 00:24:43,540
complete mediation and this is basically

462
00:24:38,350 --> 00:24:47,350
check everything always for the example

463
00:24:43,540 --> 00:24:48,870
from a few slides back we should be

464
00:24:47,350 --> 00:24:52,929
asking the questions

465
00:24:48,870 --> 00:24:56,709
who is this user that's communicating

466
00:24:52,930 --> 00:24:58,870
with our application do we check all the

467
00:24:56,710 --> 00:25:04,810
requests that it sends that he or she

468
00:24:58,870 --> 00:25:08,080
sends and who is who has access to the

469
00:25:04,810 --> 00:25:12,580
files are all requests checked is all

470
00:25:08,080 --> 00:25:16,330
access tracked for the data center

471
00:25:12,580 --> 00:25:19,540
likewise who can access this data center

472
00:25:16,330 --> 00:25:25,629
is it only the user app is it some

473
00:25:19,540 --> 00:25:28,659
administrator is it everyone but also

474
00:25:25,630 --> 00:25:32,770
who can access the particular databases

475
00:25:28,660 --> 00:25:36,930
here the tables do we have some control

476
00:25:32,770 --> 00:25:41,950
for this we should and this is least

477
00:25:36,930 --> 00:25:45,760
privileged basically assign allow access

478
00:25:41,950 --> 00:25:46,740
only afford the business and nothing

479
00:25:45,760 --> 00:25:52,200
else

480
00:25:46,740 --> 00:25:55,690
so if we have three sets of users here

481
00:25:52,200 --> 00:25:58,060
maybe we'll distribute a set of

482
00:25:55,690 --> 00:26:00,910
functions to the first set another set

483
00:25:58,060 --> 00:26:04,600
to the second and the third set to the

484
00:26:00,910 --> 00:26:06,570
third for the data center maybe we'll

485
00:26:04,600 --> 00:26:10,000
will have multiple applications

486
00:26:06,570 --> 00:26:12,260
interacting with the databases are we

487
00:26:10,000 --> 00:26:15,880
controlling which application can

488
00:26:12,260 --> 00:26:20,230
which data this is a least privileged

489
00:26:15,880 --> 00:26:20,230
minimize the amount of access

490
00:26:20,380 --> 00:26:26,510
finally for separation of duties we want

491
00:26:24,260 --> 00:26:30,650
to limit the amount of power a single

492
00:26:26,510 --> 00:26:34,280
individual has and to have them be

493
00:26:30,650 --> 00:26:37,880
accountable for all their actions going

494
00:26:34,280 --> 00:26:41,300
back to the defense and debt example we

495
00:26:37,880 --> 00:26:45,680
can ask the question who has access to

496
00:26:41,300 --> 00:26:49,310
these data stores now if a single person

497
00:26:45,680 --> 00:26:52,340
can configure all of these endpoints and

498
00:26:49,310 --> 00:26:56,889
certificates that person can also point

499
00:26:52,340 --> 00:26:56,889
our system towards a malicious service

500
00:26:57,160 --> 00:27:04,910
are the changes to these data stores

501
00:27:00,590 --> 00:27:08,179
given their criticality logged can we at

502
00:27:04,910 --> 00:27:12,740
least make the guy pay for ruining our

503
00:27:08,180 --> 00:27:15,200
system and a related question who has

504
00:27:12,740 --> 00:27:18,110
access to the log files is it the same

505
00:27:15,200 --> 00:27:20,770
guy well obviously he can hide his

506
00:27:18,110 --> 00:27:20,770
tracks then

507
00:27:21,930 --> 00:27:27,330
so essentially sound excess control is

508
00:27:24,780 --> 00:27:33,629
an extension of the attack surface

509
00:27:27,330 --> 00:27:36,570
reduction to limit access to only what

510
00:27:33,630 --> 00:27:43,830
is required by the business and nothing

511
00:27:36,570 --> 00:27:47,340
else secure mechanism design is our next

512
00:27:43,830 --> 00:27:50,570
topic and here we will also examine a

513
00:27:47,340 --> 00:27:54,000
set of three secure design principles

514
00:27:50,570 --> 00:27:57,480
the idea here is to conceptualize a

515
00:27:54,000 --> 00:28:00,990
simple design in general we want to have

516
00:27:57,480 --> 00:28:03,270
simplicity in our software but for

517
00:28:00,990 --> 00:28:07,770
security controls this is especially

518
00:28:03,270 --> 00:28:10,460
important complicated design will make

519
00:28:07,770 --> 00:28:13,470
finding vulnerabilities more difficult

520
00:28:10,460 --> 00:28:15,540
so we want to simplify this to make sure

521
00:28:13,470 --> 00:28:20,090
that we understand how our security

522
00:28:15,540 --> 00:28:24,750
controls work to avoid their

523
00:28:20,090 --> 00:28:28,350
malfunctioning also we want to avoid

524
00:28:24,750 --> 00:28:30,570
shared States as much as possible if we

525
00:28:28,350 --> 00:28:34,980
have a state that is shared between

526
00:28:30,570 --> 00:28:37,200
multiple users or multiple programs then

527
00:28:34,980 --> 00:28:40,260
an attacker can corrupt this shared

528
00:28:37,200 --> 00:28:45,450
state and trigger the attack on these

529
00:28:40,260 --> 00:28:49,020
other users or programs and finally to

530
00:28:45,450 --> 00:28:53,010
have a secure design we need to fail

531
00:28:49,020 --> 00:28:57,000
securely failure will happen and we need

532
00:28:53,010 --> 00:28:59,400
to be prepared for it so let's look at

533
00:28:57,000 --> 00:29:01,850
the design principles that make up this

534
00:28:59,400 --> 00:29:01,850
sets

535
00:29:02,350 --> 00:29:08,939
the first one is economy of mechanisms

536
00:29:05,080 --> 00:29:12,699
and as I said it's related to simplicity

537
00:29:08,940 --> 00:29:17,409
to elaborate on this let's go back to

538
00:29:12,700 --> 00:29:20,380
the application example now the question

539
00:29:17,409 --> 00:29:24,009
here is where do we perform input

540
00:29:20,380 --> 00:29:26,980
validation we said that there's data

541
00:29:24,009 --> 00:29:29,139
arriving at our HTTP endpoints it might

542
00:29:26,980 --> 00:29:30,940
be in the headers it might be in the

543
00:29:29,139 --> 00:29:34,600
query parameters it might be in the

544
00:29:30,940 --> 00:29:37,600
request body at what point do we

545
00:29:34,600 --> 00:29:42,250
validate this data to make sure that the

546
00:29:37,600 --> 00:29:45,759
attacks do not trigger one option is at

547
00:29:42,250 --> 00:29:48,610
the source as soon as possible when the

548
00:29:45,759 --> 00:29:53,049
data is arriving at a rent point let's

549
00:29:48,610 --> 00:29:58,240
validate it as much as possible the next

550
00:29:53,049 --> 00:30:02,200
option is at the sink right before the

551
00:29:58,240 --> 00:30:05,379
attack triggers this is the place there

552
00:30:02,200 --> 00:30:09,879
where we want to discard all the attack

553
00:30:05,379 --> 00:30:12,668
vectors the third option is somewhere

554
00:30:09,879 --> 00:30:19,928
along the way between the source and the

555
00:30:12,669 --> 00:30:22,929
sink so where do we validate well the

556
00:30:19,929 --> 00:30:27,309
answer is both at the source and the

557
00:30:22,929 --> 00:30:30,100
sink we form we perform source security

558
00:30:27,309 --> 00:30:33,360
checks for two reasons one of them is

559
00:30:30,100 --> 00:30:35,980
that this helps protect all the things

560
00:30:33,360 --> 00:30:39,158
the attacker might be supplying an

561
00:30:35,980 --> 00:30:43,029
attack vector which will harm our logger

562
00:30:39,159 --> 00:30:47,230
or maybe some XML parser in the business

563
00:30:43,029 --> 00:30:48,279
logic if we remove these attack factors

564
00:30:47,230 --> 00:30:51,039
at the start

565
00:30:48,279 --> 00:30:52,779
these attacks won't go to the database

566
00:30:51,039 --> 00:30:56,860
they won't go to the parser to the

567
00:30:52,779 --> 00:30:58,110
logger we can remove them as soon as

568
00:30:56,860 --> 00:31:00,939
possible

569
00:30:58,110 --> 00:31:05,529
another benefit is that we're moving

570
00:31:00,940 --> 00:31:07,750
rubbish quickly we don't have this

571
00:31:05,529 --> 00:31:09,879
malicious malformed data traveling

572
00:31:07,750 --> 00:31:13,820
through our system being processed in

573
00:31:09,879 --> 00:31:16,439
some way we're discarding it at the

574
00:31:13,820 --> 00:31:19,830
so we're doing these checks at the

575
00:31:16,440 --> 00:31:25,440
source why do we need to perform some

576
00:31:19,830 --> 00:31:28,800
checks at the sink well two reasons once

577
00:31:25,440 --> 00:31:32,460
again the first is that here we can

578
00:31:28,800 --> 00:31:35,550
prevent specific attacks if we're

579
00:31:32,460 --> 00:31:38,040
talking about SQL injection and we can't

580
00:31:35,550 --> 00:31:40,970
really whitelist the sensitive

581
00:31:38,040 --> 00:31:44,670
characters that can perform this attack

582
00:31:40,970 --> 00:31:49,290
well we can create prepared statements

583
00:31:44,670 --> 00:31:52,620
at the sink if we have some XML parsing

584
00:31:49,290 --> 00:31:59,100
we can perform excess D validation at

585
00:31:52,620 --> 00:32:02,100
the sink at the parser but also what if

586
00:31:59,100 --> 00:32:05,330
we have multiple sources what if there

587
00:32:02,100 --> 00:32:08,610
are sources that are out of our control

588
00:32:05,330 --> 00:32:11,909
by validating at the sink we can defend

589
00:32:08,610 --> 00:32:18,840
even against these poorly validated

590
00:32:11,910 --> 00:32:20,910
sources so let's go back to the design

591
00:32:18,840 --> 00:32:23,850
principle make simple designs that

592
00:32:20,910 --> 00:32:26,010
enforce security consistently what we

593
00:32:23,850 --> 00:32:28,850
should definitely avoid is to have some

594
00:32:26,010 --> 00:32:31,710
custom validation somewhere in between

595
00:32:28,850 --> 00:32:34,379
rather focus always on the source and

596
00:32:31,710 --> 00:32:37,200
the sink so that people can know this is

597
00:32:34,380 --> 00:32:42,120
where we expect to see security controls

598
00:32:37,200 --> 00:32:44,250
and we do really need the source and the

599
00:32:42,120 --> 00:32:48,270
sink so that we can have this

600
00:32:44,250 --> 00:32:51,630
consistency so that we can validate all

601
00:32:48,270 --> 00:32:54,860
the data and not just have some part of

602
00:32:51,630 --> 00:32:54,860
it be validated

603
00:32:57,180 --> 00:33:02,790
the next design principle that falls

604
00:33:00,420 --> 00:33:05,640
into this category is least common

605
00:33:02,790 --> 00:33:07,320
mechanism and the idea here is to

606
00:33:05,640 --> 00:33:11,940
minimize the amount of shared States

607
00:33:07,320 --> 00:33:14,730
that exist in our software let's look at

608
00:33:11,940 --> 00:33:18,360
an example with a web application where

609
00:33:14,730 --> 00:33:21,980
we have some global variables which our

610
00:33:18,360 --> 00:33:25,550
application is loading into the browser

611
00:33:21,980 --> 00:33:29,100
if an attacker can compromise these

612
00:33:25,550 --> 00:33:32,309
variables we he might be able to play

613
00:33:29,100 --> 00:33:34,199
some cross-site scripting attack he

614
00:33:32,309 --> 00:33:37,050
might be able to do this through the

615
00:33:34,200 --> 00:33:39,240
front end application or maybe as a

616
00:33:37,050 --> 00:33:42,120
malicious administrator that has access

617
00:33:39,240 --> 00:33:47,490
to the configuration files he inserts

618
00:33:42,120 --> 00:33:49,949
this attack vector we should definitely

619
00:33:47,490 --> 00:33:54,179
minimize the amount of global variables

620
00:33:49,950 --> 00:33:56,700
and ideally control access and perform

621
00:33:54,179 --> 00:34:00,960
the necessary validation to all the

622
00:33:56,700 --> 00:34:03,809
shared State that must exist looking at

623
00:34:00,960 --> 00:34:07,470
another example say we have an

624
00:34:03,809 --> 00:34:10,020
application running on a machine it has

625
00:34:07,470 --> 00:34:12,360
access to the file system and we have

626
00:34:10,020 --> 00:34:16,080
another application here which has a

627
00:34:12,360 --> 00:34:19,440
vulnerability the attacker might be able

628
00:34:16,080 --> 00:34:22,918
to exploit this application to

629
00:34:19,440 --> 00:34:25,740
compromised the file system or maybe to

630
00:34:22,918 --> 00:34:29,399
so he could delete the files that are

631
00:34:25,739 --> 00:34:31,830
required by our secure application he

632
00:34:29,399 --> 00:34:34,710
might clog up the memory take up all the

633
00:34:31,830 --> 00:34:39,560
threads the processor and crash the

634
00:34:34,710 --> 00:34:42,418
whole machine so to solve this we

635
00:34:39,560 --> 00:34:46,168
invented virtualization right we

636
00:34:42,418 --> 00:34:48,690
invented containers to separate these

637
00:34:46,168 --> 00:34:51,060
applications and if the vulnerable

638
00:34:48,690 --> 00:34:55,909
application is exploited well at least

639
00:34:51,060 --> 00:34:55,909
our other application will suffer

640
00:34:56,790 --> 00:35:04,930
finally secure failure so our software

641
00:35:02,020 --> 00:35:08,950
will crash it's inevitable all software

642
00:35:04,930 --> 00:35:11,970
crashes what happens when our software

643
00:35:08,950 --> 00:35:16,029
crashes is a security concern

644
00:35:11,970 --> 00:35:18,970
how will we fail what happens if our a

645
00:35:16,030 --> 00:35:21,609
single function crashes or a service

646
00:35:18,970 --> 00:35:24,399
does this mean the end of our complete

647
00:35:21,609 --> 00:35:27,310
solution well let's look at an example

648
00:35:24,400 --> 00:35:29,800
where we have a user with some

649
00:35:27,310 --> 00:35:32,259
application and we have some

650
00:35:29,800 --> 00:35:34,530
authentication logic where the user is

651
00:35:32,260 --> 00:35:38,770
accessing the application he first must

652
00:35:34,530 --> 00:35:41,320
login and the proper access control

653
00:35:38,770 --> 00:35:44,140
checks might be it must be performed and

654
00:35:41,320 --> 00:35:46,840
we also have some auditing logic so

655
00:35:44,140 --> 00:35:49,450
everything the user does needs to be

656
00:35:46,840 --> 00:35:54,250
logged so we can have non-repudiation

657
00:35:49,450 --> 00:35:57,790
a user makes a request and the

658
00:35:54,250 --> 00:36:01,270
authentication logic fails does the

659
00:35:57,790 --> 00:36:04,029
operation continue does the user perform

660
00:36:01,270 --> 00:36:06,369
the action that he wanted the business

661
00:36:04,030 --> 00:36:10,150
logic is fine but this authentication

662
00:36:06,369 --> 00:36:12,340
logic does not work obviously we don't

663
00:36:10,150 --> 00:36:15,460
want this to happen we want to block the

664
00:36:12,340 --> 00:36:19,440
operation and we call this fail closed

665
00:36:15,460 --> 00:36:23,470
if this fails everything should stop

666
00:36:19,440 --> 00:36:26,530
what about the auditing logic what

667
00:36:23,470 --> 00:36:30,609
happens if we can't log the action maybe

668
00:36:26,530 --> 00:36:33,430
the file system is full our log files

669
00:36:30,609 --> 00:36:39,100
need to be rotated something along those

670
00:36:33,430 --> 00:36:43,299
lines do we stop the operation well it

671
00:36:39,100 --> 00:36:45,549
depends we might fail openly we might

672
00:36:43,300 --> 00:36:49,300
say okay these are some less critical

673
00:36:45,550 --> 00:36:51,880
applications we don't expect serious

674
00:36:49,300 --> 00:36:56,080
security issues if these actions aren't

675
00:36:51,880 --> 00:37:00,160
logged so maybe we will say ok continue

676
00:36:56,080 --> 00:37:02,440
on with your operation but if this is a

677
00:37:00,160 --> 00:37:05,830
sensitive action if we're talking about

678
00:37:02,440 --> 00:37:08,080
some banking transactions obviously we

679
00:37:05,830 --> 00:37:10,319
would want to have everything working

680
00:37:08,080 --> 00:37:10,319
properly

681
00:37:12,560 --> 00:37:19,430
the question here is very similar to

682
00:37:15,020 --> 00:37:23,259
defense-in-depth what happens if the

683
00:37:19,430 --> 00:37:28,160
component a service a function fails

684
00:37:23,260 --> 00:37:31,130
should our process stop will our system

685
00:37:28,160 --> 00:37:33,049
even require a recover these are the

686
00:37:31,130 --> 00:37:36,170
questions that we need to address and to

687
00:37:33,050 --> 00:37:41,840
know how our system behaves when it does

688
00:37:36,170 --> 00:37:45,320
crash so for secure mechanism design

689
00:37:41,840 --> 00:37:51,260
simplicity minimize shared States and

690
00:37:45,320 --> 00:37:53,540
fail securely the final secure design

691
00:37:51,260 --> 00:37:56,600
principle I want to talk about today and

692
00:37:53,540 --> 00:38:00,830
this will be a short one is related to

693
00:37:56,600 --> 00:38:03,080
secure security controls now we have all

694
00:38:00,830 --> 00:38:05,390
of these security controls they are

695
00:38:03,080 --> 00:38:09,140
performing some encryption and

696
00:38:05,390 --> 00:38:11,420
authentication some validation but are

697
00:38:09,140 --> 00:38:13,310
we sure that they are working correctly

698
00:38:11,420 --> 00:38:17,240
are we sure that they are improved

699
00:38:13,310 --> 00:38:19,790
implemented properly this principle says

700
00:38:17,240 --> 00:38:21,470
that you should thoroughly investigate

701
00:38:19,790 --> 00:38:23,930
all the security controls that you are

702
00:38:21,470 --> 00:38:26,390
using to make sure that you are aware

703
00:38:23,930 --> 00:38:30,500
how to use them how you can configure

704
00:38:26,390 --> 00:38:34,940
them perhaps to be insecure and how they

705
00:38:30,500 --> 00:38:39,400
can fail you let's go back to the first

706
00:38:34,940 --> 00:38:43,100
example of this talk the file signing

707
00:38:39,400 --> 00:38:46,190
now we have this digital signature

708
00:38:43,100 --> 00:38:51,770
mechanism but the question is how do we

709
00:38:46,190 --> 00:38:57,110
implement it in our code do we implement

710
00:38:51,770 --> 00:39:01,310
our own algorithm probably not we can

711
00:38:57,110 --> 00:39:04,420
fail it's every step along the way do we

712
00:39:01,310 --> 00:39:08,120
take a proven algorithm something that

713
00:39:04,420 --> 00:39:11,800
people claim is secure take the design

714
00:39:08,120 --> 00:39:15,230
and then implement our code for it well

715
00:39:11,800 --> 00:39:19,310
slightly better not not really great not

716
00:39:15,230 --> 00:39:22,840
terrible but still it we can introduce

717
00:39:19,310 --> 00:39:24,630
code level vulnerabilities here right so

718
00:39:22,840 --> 00:39:28,770
we choose

719
00:39:24,630 --> 00:39:32,490
existing implementation we find a

720
00:39:28,770 --> 00:39:34,800
provider of this function and then

721
00:39:32,490 --> 00:39:38,479
integrate it into our solution and use

722
00:39:34,800 --> 00:39:40,640
the API but it's not really that simple

723
00:39:38,480 --> 00:39:45,000
who can we trust

724
00:39:40,640 --> 00:39:48,440
who are the trustworthy providers is

725
00:39:45,000 --> 00:39:52,410
this some github project with two stars

726
00:39:48,440 --> 00:39:55,740
some student made for his bachelor well

727
00:39:52,410 --> 00:39:57,390
obviously this is not a good choice but

728
00:39:55,740 --> 00:40:00,180
if it is something offered by our

729
00:39:57,390 --> 00:40:02,670
operating system maybe it is a good

730
00:40:00,180 --> 00:40:07,799
choice or a renowned provider of

731
00:40:02,670 --> 00:40:11,340
security controls we select a provider

732
00:40:07,800 --> 00:40:13,530
and then we should ask the question what

733
00:40:11,340 --> 00:40:16,680
are the configuration options for this

734
00:40:13,530 --> 00:40:18,810
control is the function secure by

735
00:40:16,680 --> 00:40:21,839
default I don't have to provide any

736
00:40:18,810 --> 00:40:25,380
parameters and it will work maybe

737
00:40:21,840 --> 00:40:28,590
probably if it's a good provider but

738
00:40:25,380 --> 00:40:31,710
don't count on it you need to be aware

739
00:40:28,590 --> 00:40:33,750
of the configuration options to realize

740
00:40:31,710 --> 00:40:37,500
what can go wrong what can be miss

741
00:40:33,750 --> 00:40:40,050
configured because if we have a Miss

742
00:40:37,500 --> 00:40:43,880
configured security control we might not

743
00:40:40,050 --> 00:40:46,470
have a security control at all and

744
00:40:43,880 --> 00:40:48,840
finally are there any known

745
00:40:46,470 --> 00:40:52,799
vulnerabilities or issues with this

746
00:40:48,840 --> 00:40:54,990
implementation something that really

747
00:40:52,800 --> 00:40:57,060
should be applied to all of your

748
00:40:54,990 --> 00:40:58,859
third-party dependencies be it

749
00:40:57,060 --> 00:41:01,890
tools database is the operating system

750
00:40:58,860 --> 00:41:05,010
or the plethora of libraries that you're

751
00:41:01,890 --> 00:41:07,710
using check to see if there are any

752
00:41:05,010 --> 00:41:11,400
known vulnerabilities on the CV and the

753
00:41:07,710 --> 00:41:13,980
nvd examine if there are any problems

754
00:41:11,400 --> 00:41:19,680
that you should be aware of that can be

755
00:41:13,980 --> 00:41:23,580
exploited to sum up when introducing

756
00:41:19,680 --> 00:41:27,029
security into your codes don't make the

757
00:41:23,580 --> 00:41:30,450
Google query and then copy and paste the

758
00:41:27,030 --> 00:41:33,210
first link from stack overflow

759
00:41:30,450 --> 00:41:36,299
there was actually a study where the

760
00:41:33,210 --> 00:41:38,880
guys examined the amount of vulnerable

761
00:41:36,299 --> 00:41:42,359
code that's posted on Stack Overflow and

762
00:41:38,880 --> 00:41:45,349
how frequently it is found in Android

763
00:41:42,359 --> 00:41:48,900
applications it turns out quite a lot

764
00:41:45,349 --> 00:41:51,450
about 30% of applications that have some

765
00:41:48,900 --> 00:41:53,280
security code had venerable security

766
00:41:51,450 --> 00:41:57,240
code because they pasted it from Stack

767
00:41:53,280 --> 00:41:59,460
Overflow and the irony is that in the

768
00:41:57,240 --> 00:42:01,470
comments people stated this is

769
00:41:59,460 --> 00:42:06,440
vulnerable code don't use it but the

770
00:42:01,470 --> 00:42:06,439
developers didn't care don't be that guy

771
00:42:07,280 --> 00:42:15,109
so for secure security controls always

772
00:42:11,430 --> 00:42:17,910
investigate perform your due diligence

773
00:42:15,109 --> 00:42:23,549
you're introducing this security control

774
00:42:17,910 --> 00:42:26,819
make sure it is introduced correctly now

775
00:42:23,549 --> 00:42:29,990
let's wrap these five sets of design

776
00:42:26,819 --> 00:42:34,049
principles up through Susan's story

777
00:42:29,990 --> 00:42:41,250
let's examine what happened at Equifax

778
00:42:34,049 --> 00:42:44,579
two years ago so in this story we have

779
00:42:41,250 --> 00:42:48,089
some guys that want to get rich this is

780
00:42:44,579 --> 00:42:50,520
your standard attacker he is examining

781
00:42:48,089 --> 00:42:56,220
the internet for services that have

782
00:42:50,520 --> 00:42:58,589
vulnerabilities they at this point there

783
00:42:56,220 --> 00:43:00,569
was a publicly known vulnerability for

784
00:42:58,589 --> 00:43:05,509
Apache struts a framework for building

785
00:43:00,569 --> 00:43:05,509
web applications not unlike spring and

786
00:43:06,319 --> 00:43:12,569
equifax of course use this version of

787
00:43:09,510 --> 00:43:14,730
Apache struts so the attackers were

788
00:43:12,569 --> 00:43:17,900
examining the internet and lo and behold

789
00:43:14,730 --> 00:43:21,960
they found this vulnerability at a

790
00:43:17,900 --> 00:43:25,190
corporation that's serving hundreds of

791
00:43:21,960 --> 00:43:25,190
millions of people

792
00:43:25,580 --> 00:43:30,290
the vulnerability in question in the

793
00:43:28,100 --> 00:43:32,960
Apache struts framework is the lack of

794
00:43:30,290 --> 00:43:36,410
input validation for HTTP headers and

795
00:43:32,960 --> 00:43:39,650
this is where the attackers were were

796
00:43:36,410 --> 00:43:42,740
able to deploy the attack that took over

797
00:43:39,650 --> 00:43:45,140
the machine it took over the machine

798
00:43:42,740 --> 00:43:48,470
because the web application was running

799
00:43:45,140 --> 00:43:51,040
under administrative privileges so they

800
00:43:48,470 --> 00:43:53,620
managed to perform remote code execution

801
00:43:51,040 --> 00:43:56,540
here

802
00:43:53,620 --> 00:43:59,359
the attackers started examining the

803
00:43:56,540 --> 00:44:01,220
system from this point and quickly

804
00:43:59,360 --> 00:44:05,270
discovered the database containing

805
00:44:01,220 --> 00:44:08,410
administrative passwords these passwords

806
00:44:05,270 --> 00:44:11,330
were not encrypted they were not hashed

807
00:44:08,410 --> 00:44:14,870
nothing was protecting them not even

808
00:44:11,330 --> 00:44:16,490
basic access control they took these

809
00:44:14,870 --> 00:44:20,569
passwords and then they started

810
00:44:16,490 --> 00:44:24,620
accessing all the other systems quickly

811
00:44:20,570 --> 00:44:29,350
they retrieved millions of sets of data

812
00:44:24,620 --> 00:44:32,210
related to personal information about

813
00:44:29,350 --> 00:44:36,770
140 million slightly over that people

814
00:44:32,210 --> 00:44:40,460
got their data stolen of course there

815
00:44:36,770 --> 00:44:43,130
was no network segmentation here there

816
00:44:40,460 --> 00:44:44,720
were no query limits on the database so

817
00:44:43,130 --> 00:44:47,960
attackers could perform tens of

818
00:44:44,720 --> 00:44:49,540
thousands of queries with no penalty

819
00:44:47,960 --> 00:44:53,180
with no alarm

820
00:44:49,540 --> 00:44:56,110
there was actually a security control in

821
00:44:53,180 --> 00:44:59,839
place that could have seen all of this

822
00:44:56,110 --> 00:45:01,790
but it was broken there was a network

823
00:44:59,840 --> 00:45:04,130
monitoring tool that could have looked

824
00:45:01,790 --> 00:45:07,790
raised an alarm but it wasn't working it

825
00:45:04,130 --> 00:45:14,110
was that the certificate expired 10

826
00:45:07,790 --> 00:45:14,110
years ago and nobody changed it yeah

827
00:45:14,130 --> 00:45:22,540
so basically Equifax sucks at security

828
00:45:19,050 --> 00:45:27,400
all of this is basic hygiene all of this

829
00:45:22,540 --> 00:45:30,579
is one of these design principles so for

830
00:45:27,400 --> 00:45:34,089
the HTTP headers this is slightly

831
00:45:30,579 --> 00:45:36,280
cheating but it is an insecure security

832
00:45:34,089 --> 00:45:38,920
control you're depending on this

833
00:45:36,280 --> 00:45:40,810
framework it does provide a number of

834
00:45:38,920 --> 00:45:44,680
security options out of the box

835
00:45:40,810 --> 00:45:47,230
you really should be updating it but how

836
00:45:44,680 --> 00:45:49,089
could I back with hacks known well the

837
00:45:47,230 --> 00:45:52,450
Department of Defense sent an email

838
00:45:49,089 --> 00:45:55,180
before way before the attack telling

839
00:45:52,450 --> 00:45:57,220
them hey maybe you have Apache struts in

840
00:45:55,180 --> 00:46:00,480
your infrastructure you should probably

841
00:45:57,220 --> 00:46:05,319
check it and they said now it'll be fine

842
00:46:00,480 --> 00:46:10,030
they didn't check it and then the data

843
00:46:05,319 --> 00:46:12,819
got stolen for the web application

844
00:46:10,030 --> 00:46:14,890
having full privilege over the machine

845
00:46:12,819 --> 00:46:17,440
obviously we don't have sound access

846
00:46:14,890 --> 00:46:20,200
control design for the administrative

847
00:46:17,440 --> 00:46:22,089
passwords no access control and really

848
00:46:20,200 --> 00:46:26,950
no defense-in-depth where's the

849
00:46:22,089 --> 00:46:29,680
cryptography for the passwords Network

850
00:46:26,950 --> 00:46:33,609
segmentation obviously some form of

851
00:46:29,680 --> 00:46:35,710
access control query limits attack

852
00:46:33,609 --> 00:46:38,520
surface reduction limiting the

853
00:46:35,710 --> 00:46:42,790
opportunity that the attacker had and

854
00:46:38,520 --> 00:46:45,700
broke network monitoring well insecure

855
00:46:42,790 --> 00:46:47,619
failure at best but broken security

856
00:46:45,700 --> 00:46:56,229
control

857
00:46:47,619 --> 00:46:58,660
at the core okay so these were the five

858
00:46:56,229 --> 00:47:01,029
sets of security and security design

859
00:46:58,660 --> 00:47:04,719
principles that can apply to all

860
00:47:01,029 --> 00:47:08,140
software really and there's only one

861
00:47:04,719 --> 00:47:11,259
question left to answer how can I

862
00:47:08,140 --> 00:47:15,910
introduce this into my organization into

863
00:47:11,259 --> 00:47:18,969
my team obviously this one our talk

864
00:47:15,910 --> 00:47:21,940
won't cut it right at best I gave you a

865
00:47:18,969 --> 00:47:26,349
map of where to look so you need to read

866
00:47:21,940 --> 00:47:30,519
a lot first of all you can start with

867
00:47:26,349 --> 00:47:33,519
this nist publication in its appendix f

868
00:47:30,519 --> 00:47:36,700
it covers a broad spectrum of secure

869
00:47:33,519 --> 00:47:39,249
design principles a lot more than i

870
00:47:36,700 --> 00:47:41,229
covered here today not all can be

871
00:47:39,249 --> 00:47:43,749
applied to all systems but you really

872
00:47:41,229 --> 00:47:48,009
should check them out to see which are

873
00:47:43,749 --> 00:47:49,988
applicable for your context now these

874
00:47:48,009 --> 00:47:53,680
design principles really like any

875
00:47:49,989 --> 00:47:56,469
software engineering principles it's not

876
00:47:53,680 --> 00:47:59,890
something you can read and then I know

877
00:47:56,469 --> 00:48:02,289
it you need to search for examples you

878
00:47:59,890 --> 00:48:04,200
need to examine them research them you

879
00:48:02,289 --> 00:48:08,579
need to reread the definitions

880
00:48:04,200 --> 00:48:11,950
experiment it takes a while to learn

881
00:48:08,579 --> 00:48:15,279
after that you can examine these two

882
00:48:11,950 --> 00:48:18,788
books they are concerned with an

883
00:48:15,279 --> 00:48:21,729
activity of design review that checks to

884
00:48:18,789 --> 00:48:25,569
see if your design is actually secure we

885
00:48:21,729 --> 00:48:28,078
call this security design analysis so

886
00:48:25,569 --> 00:48:31,029
and shortstack and Shawn field can

887
00:48:28,079 --> 00:48:33,759
really help you develop this attacker

888
00:48:31,029 --> 00:48:36,740
mindset that's required for security

889
00:48:33,759 --> 00:48:39,800
design analysis

890
00:48:36,740 --> 00:48:42,649
finally when you've digested all of this

891
00:48:39,800 --> 00:48:45,440
it's worth examining the complete

892
00:48:42,650 --> 00:48:48,050
security development lifecycle to see

893
00:48:45,440 --> 00:48:51,980
how your design principles can interact

894
00:48:48,050 --> 00:48:53,619
with the rest of development you can you

895
00:48:51,980 --> 00:48:56,930
can access the freely available

896
00:48:53,619 --> 00:48:59,570
Microsoft ebook regarding their as deal

897
00:48:56,930 --> 00:49:02,598
but core software security is slightly

898
00:48:59,570 --> 00:49:08,240
less known but still a valuable catalog

899
00:49:02,599 --> 00:49:11,119
of information now after you've digested

900
00:49:08,240 --> 00:49:14,629
all of this after you've done your

901
00:49:11,119 --> 00:49:17,690
preparation you can start thinking about

902
00:49:14,630 --> 00:49:19,970
introducing this to your organization by

903
00:49:17,690 --> 00:49:23,330
performing a proof-of-concept on the

904
00:49:19,970 --> 00:49:28,009
software you're developing and here you

905
00:49:23,330 --> 00:49:32,630
have two options you can go solo and try

906
00:49:28,010 --> 00:49:36,740
to work overtime maybe grab some hours

907
00:49:32,630 --> 00:49:39,550
from work to start introducing this

908
00:49:36,740 --> 00:49:44,779
security into design the design of your

909
00:49:39,550 --> 00:49:47,000
software the obvious benefit of this is

910
00:49:44,780 --> 00:49:50,839
that you're only working with your time

911
00:49:47,000 --> 00:49:53,060
right you don't need to get other people

912
00:49:50,839 --> 00:49:54,099
involved you don't need to ask for money

913
00:49:53,060 --> 00:49:57,290
basically

914
00:49:54,099 --> 00:50:00,619
but the flaw is that you're really

915
00:49:57,290 --> 00:50:03,290
overfitting yourself for one only you

916
00:50:00,619 --> 00:50:07,849
are becoming the expert here and for two

917
00:50:03,290 --> 00:50:12,259
you might not well more minds are better

918
00:50:07,849 --> 00:50:14,869
than one obviously the second option is

919
00:50:12,260 --> 00:50:16,820
to get team buy-in where you will get

920
00:50:14,869 --> 00:50:20,720
some resources from the team from your

921
00:50:16,820 --> 00:50:24,280
product owner and start introducing this

922
00:50:20,720 --> 00:50:29,118
probably more slowly but also probably

923
00:50:24,280 --> 00:50:31,250
more efficiently and then hopefully you

924
00:50:29,119 --> 00:50:33,200
have some good results and you can move

925
00:50:31,250 --> 00:50:36,740
into the continuous improvement phase

926
00:50:33,200 --> 00:50:38,960
where you'll focus on increasing the

927
00:50:36,740 --> 00:50:42,439
efficiency and quality of your security

928
00:50:38,960 --> 00:50:45,750
design analysis and maybe after some

929
00:50:42,440 --> 00:50:50,510
time go into marketing

930
00:50:45,750 --> 00:50:50,510
to show how secure your design is

931
00:50:51,550 --> 00:50:57,490
so it's not an easy journey and

932
00:50:54,360 --> 00:51:00,280
hopefully I've given you this map that

933
00:50:57,490 --> 00:51:04,720
can help you with these design

934
00:51:00,280 --> 00:51:07,270
principles but if you need more help so

935
00:51:04,720 --> 00:51:11,680
as a supplemental or maybe alternative

936
00:51:07,270 --> 00:51:14,290
approach feel free to contact me I have

937
00:51:11,680 --> 00:51:17,020
a small team of people working with me

938
00:51:14,290 --> 00:51:22,150
on this so maybe we can set some

939
00:51:17,020 --> 00:51:24,600
collaboration up now I can take your

940
00:51:22,150 --> 00:51:24,600
questions

941
00:51:36,280 --> 00:51:39,990
or did I just kill you

942
00:51:45,320 --> 00:51:51,620
well well okay guys if you need a

943
00:51:48,230 --> 00:51:54,380
refresher I'll be here all day so red

944
00:51:51,620 --> 00:51:56,630
shirt guy there's four of us in this

945
00:51:54,380 --> 00:51:59,270
room hopefully you'll find me the only

946
00:51:56,630 --> 00:52:01,340
one with the beard though so feel free

947
00:51:59,270 --> 00:52:04,490
to approach me ask anything you like

948
00:52:01,340 --> 00:52:07,310
regarding the secure design or the

949
00:52:04,490 --> 00:52:10,180
security development lifecycle thank you

950
00:52:07,310 --> 00:52:10,180
for your attention

951
00:52:35,620 --> 00:52:37,680
you

