1
00:00:01,439 --> 00:00:04,620
hello everyone my name is Paolo stagnom

2
00:00:04,620 --> 00:00:07,259
and I'm currently working as a

3
00:00:07,259 --> 00:00:09,059
vulnerability researcher and exploit

4
00:00:09,059 --> 00:00:12,120
developer for Exodus intelligence so my

5
00:00:12,120 --> 00:00:15,839
day-to-day job is basically starring at

6
00:00:15,839 --> 00:00:17,940
Ida while trying to understand if the

7
00:00:17,940 --> 00:00:20,580
component I'm auditing is vulnerable and

8
00:00:20,580 --> 00:00:24,300
how I can exploit it and my focus is on

9
00:00:24,300 --> 00:00:26,220
the Windows OS platform bought from

10
00:00:26,220 --> 00:00:28,980
kernel and user land as well as

11
00:00:28,980 --> 00:00:31,679
third-party components so I previously

12
00:00:31,679 --> 00:00:34,860
worked as a penetration tester and red

13
00:00:34,860 --> 00:00:37,260
teamer before transitioning into a full

14
00:00:37,260 --> 00:00:40,559
oriented research role

15
00:00:40,559 --> 00:00:44,760
so uh please Bagel your seat belts

16
00:00:44,760 --> 00:00:46,500
because today we only have like 40

17
00:00:46,500 --> 00:00:49,500
minutes and the aim of this talk is

18
00:00:49,500 --> 00:00:52,680
bringing you from basically little or no

19
00:00:52,680 --> 00:00:55,440
knowledge at all about this topic to

20
00:00:55,440 --> 00:00:59,399
what I can say a good level so we will

21
00:00:59,399 --> 00:01:00,480
see like

22
00:01:00,480 --> 00:01:02,219
um the productive process and protected

23
00:01:02,219 --> 00:01:04,979
process light implementation uh their

24
00:01:04,979 --> 00:01:07,820
security model mitigation past

25
00:01:07,820 --> 00:01:10,680
attacks as well as some novel attacks

26
00:01:10,680 --> 00:01:14,119
that allowed me to basically disable

27
00:01:14,119 --> 00:01:19,700
antivirus or EDR and um with that said

28
00:01:19,700 --> 00:01:21,380
before

29
00:01:21,380 --> 00:01:24,960
I can I I can tell you that there are

30
00:01:24,960 --> 00:01:27,240
like three maybe four main areas of

31
00:01:27,240 --> 00:01:29,820
research that can benefit from uh

32
00:01:29,820 --> 00:01:32,580
looking into protected process or

33
00:01:32,580 --> 00:01:34,799
protected process lights and the first

34
00:01:34,799 --> 00:01:37,259
area is penetration test or red team

35
00:01:37,259 --> 00:01:40,860
because for example Elsas as we can see

36
00:01:40,860 --> 00:01:44,340
later can be protected by PPL technology

37
00:01:44,340 --> 00:01:47,220
and of course as a red teamer we want to

38
00:01:47,220 --> 00:01:50,820
dump credential outside lsas so we

39
00:01:50,820 --> 00:01:52,439
should try to understand how we can

40
00:01:52,439 --> 00:01:54,060
bypass the protected process light

41
00:01:54,060 --> 00:01:57,299
technology and we can also try to

42
00:01:57,299 --> 00:02:00,119
understand if the protection can be

43
00:02:00,119 --> 00:02:03,360
applied to our own implants in order to

44
00:02:03,360 --> 00:02:06,240
prevent the antivirus to detect or at

45
00:02:06,240 --> 00:02:09,598
least kill our implants and the second

46
00:02:09,598 --> 00:02:12,120
area is reverse engineering because

47
00:02:12,120 --> 00:02:14,520
protected process are also used to

48
00:02:14,520 --> 00:02:18,060
basically Shield DRM protected contents

49
00:02:18,060 --> 00:02:21,260
so we can try to investigate

50
00:02:21,260 --> 00:02:24,060
the main target and dump the RM

51
00:02:24,060 --> 00:02:26,160
protected content out of it and the

52
00:02:26,160 --> 00:02:27,900
third area is of course vulnerability

53
00:02:27,900 --> 00:02:30,060
research because if we can instrument

54
00:02:30,060 --> 00:02:33,420
and debug protected process we can also

55
00:02:33,420 --> 00:02:36,660
try to fast triage crashes and with the

56
00:02:36,660 --> 00:02:39,120
end goal of uh finding vulnerabilities

57
00:02:39,120 --> 00:02:41,160
in it

58
00:02:41,160 --> 00:02:44,819
and fourth and last is of course do it

59
00:02:44,819 --> 00:02:48,660
so and the more drizzling is team make

60
00:02:48,660 --> 00:02:50,879
Windows secure the more we can brag

61
00:02:50,879 --> 00:02:53,819
about when finding a vulnerability or a

62
00:02:53,819 --> 00:02:57,480
bypass in their mitigation and on a

63
00:02:57,480 --> 00:02:59,580
funny side note Microsoft doesn't really

64
00:02:59,580 --> 00:03:02,640
care and doesn't really consider PPL as

65
00:03:02,640 --> 00:03:04,440
a security boundary so finding a

66
00:03:04,440 --> 00:03:08,819
vulnerability in it will grant us no no

67
00:03:08,819 --> 00:03:12,540
back Bounty but forever Glory from our

68
00:03:12,540 --> 00:03:15,120
fellow red teamers

69
00:03:15,120 --> 00:03:16,739
so

70
00:03:16,739 --> 00:03:20,180
before diving into the protected process

71
00:03:20,180 --> 00:03:23,280
model we should familiarize a bit more

72
00:03:23,280 --> 00:03:26,400
with the Windows security model and in

73
00:03:26,400 --> 00:03:29,280
Windows basically any users with the c

74
00:03:29,280 --> 00:03:32,099
debug privilege can

75
00:03:32,099 --> 00:03:35,760
um basically access any other process on

76
00:03:35,760 --> 00:03:37,800
the machine running on the machine and

77
00:03:37,800 --> 00:03:39,540
this is regarding of their security

78
00:03:39,540 --> 00:03:41,879
token

79
00:03:41,879 --> 00:03:46,379
and for this reason they can read and

80
00:03:46,379 --> 00:03:49,560
write process memory or inject code and

81
00:03:49,560 --> 00:03:51,540
this functionality is done for tools

82
00:03:51,540 --> 00:03:54,420
like process Explorer or task manager in

83
00:03:54,420 --> 00:03:56,580
order to provide information back to the

84
00:03:56,580 --> 00:03:58,379
user

85
00:03:58,379 --> 00:04:01,080
so given the president bit of

86
00:04:01,080 --> 00:04:03,299
information why do you think that

87
00:04:03,299 --> 00:04:05,459
Microsoft introduced protected process

88
00:04:05,459 --> 00:04:09,260
in the first place and if your answer

89
00:04:09,260 --> 00:04:13,319
was for security concerns well then

90
00:04:13,319 --> 00:04:17,399
think again because the debug privilege

91
00:04:17,399 --> 00:04:20,220
is logical Behavior basically clash with

92
00:04:20,220 --> 00:04:24,000
against the DRM and

93
00:04:24,000 --> 00:04:26,400
the requirements that are imposed by the

94
00:04:26,400 --> 00:04:29,220
multimedia industry so protected process

95
00:04:29,220 --> 00:04:32,419
was born and to prevent users to access

96
00:04:32,419 --> 00:04:36,258
protected digital content

97
00:04:38,060 --> 00:04:43,080
so that that process can be created uh

98
00:04:43,080 --> 00:04:46,380
only if the executable image is signed

99
00:04:46,380 --> 00:04:49,080
and it must be signed by a special

100
00:04:49,080 --> 00:04:51,840
Windows media certificate and an example

101
00:04:51,840 --> 00:04:53,520
of protected processes that are running

102
00:04:53,520 --> 00:04:56,340
on your own PC there are for example the

103
00:04:56,340 --> 00:04:58,639
audio device process that basically

104
00:04:58,639 --> 00:05:01,740
hosts DRM protected content and decrypt

105
00:05:01,740 --> 00:05:04,080
the content on the flight as well as

106
00:05:04,080 --> 00:05:06,000
like the system process and system

107
00:05:06,000 --> 00:05:08,880
process must be protected in the eye of

108
00:05:08,880 --> 00:05:11,580
Microsoft because it basically store

109
00:05:11,580 --> 00:05:14,400
again decryption information that is

110
00:05:14,400 --> 00:05:15,720
generated by the Kernel Security

111
00:05:15,720 --> 00:05:20,280
provider and all like the security and

112
00:05:20,280 --> 00:05:22,500
the kernel handles are stored as well in

113
00:05:22,500 --> 00:05:24,660
the system process

114
00:05:24,660 --> 00:05:28,680
so at the kernel level the protected

115
00:05:28,680 --> 00:05:31,800
process is basically supported in two

116
00:05:31,800 --> 00:05:34,860
Falls the first one is the entire bulk

117
00:05:34,860 --> 00:05:37,740
of uh process creation is basically of

118
00:05:37,740 --> 00:05:39,720
course in kernel mode only in order to

119
00:05:39,720 --> 00:05:42,539
prevent any injection attacks and the

120
00:05:42,539 --> 00:05:45,000
second thing is product process is

121
00:05:45,000 --> 00:05:47,940
implemented in kernel specifically in a

122
00:05:47,940 --> 00:05:50,759
structure that is called e-process and

123
00:05:50,759 --> 00:05:53,100
this e-process structure basically

124
00:05:53,100 --> 00:05:56,039
modify the behavior of the process

125
00:05:56,039 --> 00:05:58,020
manager so when you try to request

126
00:05:58,020 --> 00:06:00,419
access to a protected processor certain

127
00:06:00,419 --> 00:06:03,240
access will be denied and this again is

128
00:06:03,240 --> 00:06:05,639
to prevent injection or pretty much any

129
00:06:05,639 --> 00:06:07,259
other modification to a protected

130
00:06:07,259 --> 00:06:09,419
process

131
00:06:09,419 --> 00:06:13,199
so since protected process again exists

132
00:06:13,199 --> 00:06:16,340
alongside normal Windows processes and

133
00:06:16,340 --> 00:06:19,919
they just add more constraints to their

134
00:06:19,919 --> 00:06:22,440
process and the only assets right that

135
00:06:22,440 --> 00:06:24,660
are granted for protected process are

136
00:06:24,660 --> 00:06:27,300
the one that I've listed on the slide so

137
00:06:27,300 --> 00:06:29,639
for example you cannot call the process

138
00:06:29,639 --> 00:06:32,220
VM read access right because that will

139
00:06:32,220 --> 00:06:34,500
allow you to basically tamper or

140
00:06:34,500 --> 00:06:36,780
interact with a protected process and

141
00:06:36,780 --> 00:06:40,319
this is not not allowed so there is only

142
00:06:40,319 --> 00:06:42,360
one exception and there are for the

143
00:06:42,360 --> 00:06:44,340
process terminate and process and sorry

144
00:06:44,340 --> 00:06:47,880
and the thread suspend resume and these

145
00:06:47,880 --> 00:06:51,419
two different assets rights are only

146
00:06:51,419 --> 00:06:54,840
enforced on protected process light

147
00:06:54,840 --> 00:06:57,960
anti-malware technology or a different

148
00:06:57,960 --> 00:07:01,560
type of sign that we will see later on

149
00:07:01,560 --> 00:07:05,100
so all executable code running and

150
00:07:05,100 --> 00:07:07,380
loaded inside the protected process must

151
00:07:07,380 --> 00:07:10,620
be signed by Microsoft or if it's an

152
00:07:10,620 --> 00:07:12,900
audio codec it must be signed with a

153
00:07:12,900 --> 00:07:15,360
special DRM certificate again obtained

154
00:07:15,360 --> 00:07:17,460
from Microsoft and with that Microsoft

155
00:07:17,460 --> 00:07:19,800
basically obtained the maintain the

156
00:07:19,800 --> 00:07:22,979
control on which process process can be

157
00:07:22,979 --> 00:07:25,860
presented process and then basically

158
00:07:25,860 --> 00:07:27,919
enforce this type of protection

159
00:07:27,919 --> 00:07:31,440
and there is a an opportunity for the

160
00:07:31,440 --> 00:07:33,240
kernel and basically to provide an

161
00:07:33,240 --> 00:07:35,280
interface to query the status of the

162
00:07:35,280 --> 00:07:38,520
kernel itself and basically the kernel

163
00:07:38,520 --> 00:07:41,580
reports back the clean list of the

164
00:07:41,580 --> 00:07:44,280
kernel and the protected the content is

165
00:07:44,280 --> 00:07:46,919
only unlocked if no unsigned code is

166
00:07:46,919 --> 00:07:49,319
fine running on the Kernel and this

167
00:07:49,319 --> 00:07:51,960
interface is part of Microsoft and only

168
00:07:51,960 --> 00:07:54,180
Microsoft can use the type of interface

169
00:07:54,180 --> 00:07:56,580
that is not really documented and is

170
00:07:56,580 --> 00:07:58,020
part of the protected environment

171
00:07:58,020 --> 00:08:01,020
authorization framework

172
00:08:01,020 --> 00:08:04,020
so when thinking about a protected

173
00:08:04,020 --> 00:08:06,259
process then

174
00:08:06,259 --> 00:08:09,000
basically security boundary that

175
00:08:09,000 --> 00:08:11,880
Microsoft want to enforce is sandboxing

176
00:08:11,880 --> 00:08:15,660
processes from user mode access so if

177
00:08:15,660 --> 00:08:18,840
you have like administrator level access

178
00:08:18,840 --> 00:08:21,560
on the machine you can load your own

179
00:08:21,560 --> 00:08:25,560
drivers as we can see as we've seen this

180
00:08:25,560 --> 00:08:28,620
morning in the Omri talk and we can

181
00:08:28,620 --> 00:08:31,259
basically load our own driver and bypass

182
00:08:31,259 --> 00:08:33,179
this type of protection because a driver

183
00:08:33,179 --> 00:08:36,659
can load code and code running on on

184
00:08:36,659 --> 00:08:39,599
kernel side can patch out the e-process

185
00:08:39,599 --> 00:08:42,240
structure that I will show you

186
00:08:42,240 --> 00:08:48,180
so drivers that has the protection flag

187
00:08:48,180 --> 00:08:51,899
patched out and will be basically in

188
00:08:51,899 --> 00:08:54,660
open violation of Microsoft protected

189
00:08:54,660 --> 00:08:56,820
media pad and eventually they will be

190
00:08:56,820 --> 00:09:00,600
blocked from loading but uh according to

191
00:09:00,600 --> 00:09:03,420
Microsoft documentation kernel patch

192
00:09:03,420 --> 00:09:05,519
protection and the protected environment

193
00:09:05,519 --> 00:09:08,940
can all detect and automatically report

194
00:09:08,940 --> 00:09:10,580
such attempts

195
00:09:10,580 --> 00:09:13,380
but unfortunately when directly

196
00:09:13,380 --> 00:09:15,300
confronting Microsoft about this topic

197
00:09:15,300 --> 00:09:16,920
because kernel touch protection guard

198
00:09:16,920 --> 00:09:20,880
does not do that doesn't prevent you to

199
00:09:20,880 --> 00:09:23,880
touch out the e-process structure and

200
00:09:23,880 --> 00:09:26,040
remove the protection from a process

201
00:09:26,040 --> 00:09:29,339
Microsoft basically replied that this

202
00:09:29,339 --> 00:09:30,320
type of

203
00:09:30,320 --> 00:09:33,779
detection is not baked on by kernel

204
00:09:33,779 --> 00:09:37,980
detection and in only a manual list that

205
00:09:37,980 --> 00:09:40,440
Microsoft have to enforce so it's just

206
00:09:40,440 --> 00:09:43,260
the old and boring driver signature

207
00:09:43,260 --> 00:09:45,800
block list

208
00:09:45,839 --> 00:09:49,380
so let's move in another topic that may

209
00:09:49,380 --> 00:09:51,720
not seem so relevant in the context of

210
00:09:51,720 --> 00:09:54,240
protected process but please bear with

211
00:09:54,240 --> 00:09:56,339
me for a second

212
00:09:56,339 --> 00:10:01,140
so in Windows Elsas is the Keystone of

213
00:10:01,140 --> 00:10:03,360
Windows authentication system and it is

214
00:10:03,360 --> 00:10:05,779
responsible for the user authentication

215
00:10:05,779 --> 00:10:08,700
enforcing security policy as well as

216
00:10:08,700 --> 00:10:11,940
handling password changes and so on

217
00:10:11,940 --> 00:10:13,080
so

218
00:10:13,080 --> 00:10:16,080
the reason doesn't come as a surprise

219
00:10:16,080 --> 00:10:18,540
surprise that um

220
00:10:18,540 --> 00:10:21,060
attackers want to dump

221
00:10:21,060 --> 00:10:21,899
um

222
00:10:21,899 --> 00:10:25,500
cached password in Elsa's process and

223
00:10:25,500 --> 00:10:28,399
this is one of the most common

224
00:10:28,399 --> 00:10:31,140
techniques tactics and procedure we are

225
00:10:31,140 --> 00:10:34,019
seeing in today's landscape is for an

226
00:10:34,019 --> 00:10:35,779
attackers to land a shell on a machine

227
00:10:35,779 --> 00:10:39,240
and up upgrade its privilege to a local

228
00:10:39,240 --> 00:10:41,820
admin and then run mimikas to dump

229
00:10:41,820 --> 00:10:46,680
credential out of out of lsas process

230
00:10:46,680 --> 00:10:49,320
so you might wonder

231
00:10:49,320 --> 00:10:51,779
does Windows really allow that I mean

232
00:10:51,779 --> 00:10:54,779
lsas is a critical process so why one

233
00:10:54,779 --> 00:10:57,120
user even if an admin user should be

234
00:10:57,120 --> 00:11:00,660
able to dump password outside it

235
00:11:00,660 --> 00:11:04,860
because if we investigate alsas process

236
00:11:04,860 --> 00:11:07,440
we can see like in the blue box that

237
00:11:07,440 --> 00:11:09,740
lsas is running as the highest

238
00:11:09,740 --> 00:11:12,839
privileged users on Windows that is the

239
00:11:12,839 --> 00:11:15,000
NT Authority system and that for

240
00:11:15,000 --> 00:11:18,180
administrator users else has basically

241
00:11:18,180 --> 00:11:20,399
Grant no permission no access right at

242
00:11:20,399 --> 00:11:21,300
all

243
00:11:21,300 --> 00:11:22,620
so

244
00:11:22,620 --> 00:11:25,320
how that is possible I mean we don't

245
00:11:25,320 --> 00:11:27,480
have any assets right but we can still

246
00:11:27,480 --> 00:11:31,760
dump credential outside of Elsas

247
00:11:32,040 --> 00:11:34,920
anyone want to take a guess why is that

248
00:11:34,920 --> 00:11:37,399
happening

249
00:11:37,440 --> 00:11:39,240
yeah it is happening because an

250
00:11:39,240 --> 00:11:42,300
administrator users as the city bug

251
00:11:42,300 --> 00:11:44,880
privilege enabled by default and

252
00:11:44,880 --> 00:11:47,579
Citibank privilege can allow you to

253
00:11:47,579 --> 00:11:49,500
basically access any other running

254
00:11:49,500 --> 00:11:51,180
process no matter of the security

255
00:11:51,180 --> 00:11:54,180
descriptor that it has so in this case

256
00:11:54,180 --> 00:11:57,120
even if Elsas doesn't Grant you any Asus

257
00:11:57,120 --> 00:11:59,880
right an administrator user as the city

258
00:11:59,880 --> 00:12:01,980
bug privileges that basically disregard

259
00:12:01,980 --> 00:12:05,660
the lsas access

260
00:12:05,880 --> 00:12:08,940
all right so let's shed some light in

261
00:12:08,940 --> 00:12:13,339
protected process lightweight cousins

262
00:12:13,920 --> 00:12:16,620
since Vista basically

263
00:12:16,620 --> 00:12:19,079
um the entire concept of protected

264
00:12:19,079 --> 00:12:22,079
process has been extended and if

265
00:12:22,079 --> 00:12:24,060
protected process were originally

266
00:12:24,060 --> 00:12:28,680
created to protect DRM content Microsoft

267
00:12:28,680 --> 00:12:31,579
also find out that the entire concept

268
00:12:31,579 --> 00:12:34,380
can be applied to protect critical

269
00:12:34,380 --> 00:12:37,680
processes so for example Elsas again or

270
00:12:37,680 --> 00:12:39,240
the Windows Defender

271
00:12:39,240 --> 00:12:42,060
and so nowadays there are two types of

272
00:12:42,060 --> 00:12:44,220
protected process the protected process

273
00:12:44,220 --> 00:12:47,480
and protected process light

274
00:12:47,639 --> 00:12:50,040
Microsoft with the Advent of protected

275
00:12:50,040 --> 00:12:52,019
process light intro also introduced a

276
00:12:52,019 --> 00:12:55,920
concept of signer and the signer is

277
00:12:55,920 --> 00:12:58,019
basically a bit of information that is

278
00:12:58,019 --> 00:13:00,600
coming from a digital a digital

279
00:13:00,600 --> 00:13:03,420
signature that is used to sign the

280
00:13:03,420 --> 00:13:06,420
executable so Microsoft with protected

281
00:13:06,420 --> 00:13:08,100
process light still maintains the

282
00:13:08,100 --> 00:13:11,040
control on which process can run as PPL

283
00:13:11,040 --> 00:13:14,160
because they still have to sign your own

284
00:13:14,160 --> 00:13:16,200
executable

285
00:13:16,200 --> 00:13:21,620
so as it was for protected process PPL

286
00:13:21,620 --> 00:13:24,720
implementation rely on kernel Flags

287
00:13:24,720 --> 00:13:27,360
specifically a structure that is present

288
00:13:27,360 --> 00:13:29,880
in e-process it's three member

289
00:13:29,880 --> 00:13:33,000
structures three bytes in total and it

290
00:13:33,000 --> 00:13:35,279
has different fields some of those are

291
00:13:35,279 --> 00:13:37,560
listed all of them are listed on the

292
00:13:37,560 --> 00:13:39,540
slide it's a signature level section

293
00:13:39,540 --> 00:13:42,540
signature 11m protection so

294
00:13:42,540 --> 00:13:44,639
let's dive a bit more into the meaning

295
00:13:44,639 --> 00:13:46,500
of this field

296
00:13:46,500 --> 00:13:50,940
so instead of Simply being on or off and

297
00:13:50,940 --> 00:13:53,519
there are three types different types of

298
00:13:53,519 --> 00:13:56,040
level and there are like seven levels

299
00:13:56,040 --> 00:13:59,519
listed so far and the is of which are

300
00:13:59,519 --> 00:14:03,720
the win TCB signer or win system and the

301
00:14:03,720 --> 00:14:05,820
wind system is basically the highest

302
00:14:05,820 --> 00:14:08,220
priority designer and it is used for the

303
00:14:08,220 --> 00:14:10,079
system process pretty much system

304
00:14:10,079 --> 00:14:12,660
process only after that there is the

305
00:14:12,660 --> 00:14:15,300
wind TCB that is the trusted

306
00:14:15,300 --> 00:14:19,019
computer-based signer and so forth so

307
00:14:19,019 --> 00:14:21,240
there is missing like

308
00:14:21,240 --> 00:14:24,300
three more levels level two that is user

309
00:14:24,300 --> 00:14:27,300
for dotnet native code generation and

310
00:14:27,300 --> 00:14:29,760
two more system levels that

311
00:14:29,760 --> 00:14:32,700
um are not documented nor

312
00:14:32,700 --> 00:14:34,980
um used at the moment it's level eight

313
00:14:34,980 --> 00:14:38,100
and nine level eight it's called Uh app

314
00:14:38,100 --> 00:14:41,160
and level line it's called Max

315
00:14:41,160 --> 00:14:43,399
but what happen if we basically

316
00:14:43,399 --> 00:14:47,579
graphically display all those levels so

317
00:14:47,579 --> 00:14:50,040
if we represent the protection levels we

318
00:14:50,040 --> 00:14:52,620
can see that system is actually the most

319
00:14:52,620 --> 00:14:55,440
privileged one uh while for example

320
00:14:55,440 --> 00:14:58,440
there is this weird case of Windows and

321
00:14:58,440 --> 00:15:01,199
app signer that sits at the same level

322
00:15:01,199 --> 00:15:04,380
and for which honestly I don't know why

323
00:15:04,380 --> 00:15:09,000
Microsoft had decided this design choice

324
00:15:09,000 --> 00:15:10,680
so

325
00:15:10,680 --> 00:15:15,060
again if we look at lsas in like all the

326
00:15:15,060 --> 00:15:17,579
normal build that we have on our PC we

327
00:15:17,579 --> 00:15:20,459
can see that in the red box Elsas as the

328
00:15:20,459 --> 00:15:22,079
PPL

329
00:15:22,079 --> 00:15:25,740
um protection verification enabled in

330
00:15:25,740 --> 00:15:29,899
the extended key usage so

331
00:15:30,720 --> 00:15:33,420
there is a security order that the

332
00:15:33,420 --> 00:15:35,459
kernel enforce when dealing with

333
00:15:35,459 --> 00:15:37,320
protected process or protected process

334
00:15:37,320 --> 00:15:40,440
light and the order is the following one

335
00:15:40,440 --> 00:15:43,199
so protected process always win over

336
00:15:43,199 --> 00:15:45,480
protected process light and the

337
00:15:45,480 --> 00:15:48,480
protected process can gain access to a

338
00:15:48,480 --> 00:15:51,779
protected process or PPL processes only

339
00:15:51,779 --> 00:15:54,720
if this their signer is greater or equal

340
00:15:54,720 --> 00:15:57,540
of the targets protected process light

341
00:15:57,540 --> 00:15:59,760
can never obtain any access to a

342
00:15:59,760 --> 00:16:02,279
protected process and protect the

343
00:16:02,279 --> 00:16:04,560
process light can access only protected

344
00:16:04,560 --> 00:16:07,620
process light processes only if their

345
00:16:07,620 --> 00:16:11,100
signer is greater of equal

346
00:16:11,100 --> 00:16:14,639
so this is a schematics or what happened

347
00:16:14,639 --> 00:16:18,779
when the open API open process API is

348
00:16:18,779 --> 00:16:21,860
called against one of the pp or PPL

349
00:16:21,860 --> 00:16:26,459
process and basically it's more complex

350
00:16:26,459 --> 00:16:29,339
than this because for example if the

351
00:16:29,339 --> 00:16:31,320
colors protection is below Target

352
00:16:31,320 --> 00:16:33,420
protection of course the access denied

353
00:16:33,420 --> 00:16:37,199
is returned while while if the colors

354
00:16:37,199 --> 00:16:41,339
protection is greater or equal but the

355
00:16:41,339 --> 00:16:43,920
RCL of the target does not allow the

356
00:16:43,920 --> 00:16:46,019
colors to access it again the access

357
00:16:46,019 --> 00:16:48,839
denied is returned the only exception to

358
00:16:48,839 --> 00:16:51,899
these is if the target has the CD bug

359
00:16:51,899 --> 00:16:54,959
privileges that we've seen before then

360
00:16:54,959 --> 00:16:58,320
well the access is granted and only if

361
00:16:58,320 --> 00:17:00,839
the color protection is greater or equal

362
00:17:00,839 --> 00:17:03,000
to the Target then access is granted

363
00:17:03,000 --> 00:17:05,040
again

364
00:17:05,040 --> 00:17:07,199
all right so

365
00:17:07,199 --> 00:17:09,660
what are the main constraints when

366
00:17:09,660 --> 00:17:12,419
dealing with PP or PPL

367
00:17:12,419 --> 00:17:15,240
so the main constraint is are that

368
00:17:15,240 --> 00:17:18,660
basically PPL processes can only load

369
00:17:18,660 --> 00:17:22,740
signed dlls so with sinus dlls it means

370
00:17:22,740 --> 00:17:25,260
that if the process has a window signer

371
00:17:25,260 --> 00:17:29,700
it can only load WIndows signed dlls and

372
00:17:29,700 --> 00:17:34,740
or IR level not anything lower so

373
00:17:34,740 --> 00:17:38,640
guess who can run as PPL protected but

374
00:17:38,640 --> 00:17:42,320
does not that by default

375
00:17:44,660 --> 00:17:50,340
has its own level so it can run as as

376
00:17:50,340 --> 00:17:53,100
PPL protected but it does not by default

377
00:17:53,100 --> 00:17:55,740
and why does not that by default because

378
00:17:55,740 --> 00:17:58,020
Microsoft have to maintain and

379
00:17:58,020 --> 00:18:01,860
third-party compatibilities for um from

380
00:18:01,860 --> 00:18:03,960
older models that basically Implement

381
00:18:03,960 --> 00:18:06,299
authentication that is different from

382
00:18:06,299 --> 00:18:08,280
like the windows allow so biometric

383
00:18:08,280 --> 00:18:12,179
authentication or access token and this

384
00:18:12,179 --> 00:18:14,400
kind of components basically load their

385
00:18:14,400 --> 00:18:18,120
own dlls directly into lsas process that

386
00:18:18,120 --> 00:18:20,640
is an audible things to do because lsas

387
00:18:20,640 --> 00:18:23,160
is not really documented nor it expose

388
00:18:23,160 --> 00:18:26,700
any API so you should stop using such

389
00:18:26,700 --> 00:18:29,539
components but Microsoft also

390
00:18:29,539 --> 00:18:32,340
agreed that this type of components

391
00:18:32,340 --> 00:18:35,760
should be eliminated and in

392
00:18:35,760 --> 00:18:39,240
June or July 2022 basically in the

393
00:18:39,240 --> 00:18:43,440
latest Insider preview builds and as

394
00:18:43,440 --> 00:18:46,200
turned on the PPL protection by default

395
00:18:46,200 --> 00:18:49,200
on lsas so brace yourself because this

396
00:18:49,200 --> 00:18:51,720
type of mitigation is coming and No Easy

397
00:18:51,720 --> 00:18:54,299
Way dumping credential out of Elsa's

398
00:18:54,299 --> 00:18:57,139
protected process

399
00:18:59,700 --> 00:19:03,720
PP or PPL of course we have services and

400
00:19:03,720 --> 00:19:06,600
services again are managed by the

401
00:19:06,600 --> 00:19:08,220
service control manager service control

402
00:19:08,220 --> 00:19:09,799
manager basically

403
00:19:09,799 --> 00:19:12,419
manage the entire process service

404
00:19:12,419 --> 00:19:15,600
creation and

405
00:19:15,600 --> 00:19:19,080
have different kind of of control on the

406
00:19:19,080 --> 00:19:22,559
service on the services itself so

407
00:19:22,559 --> 00:19:24,840
a service control manager basically read

408
00:19:24,840 --> 00:19:27,299
the configuration of each service it

409
00:19:27,299 --> 00:19:30,900
reads it from the register key and the

410
00:19:30,900 --> 00:19:32,760
type and different values that the

411
00:19:32,760 --> 00:19:34,919
register key can have is the one that

412
00:19:34,919 --> 00:19:36,720
I've listed on the slide

413
00:19:36,720 --> 00:19:40,559
so there is one caveat to that because

414
00:19:40,559 --> 00:19:43,500
then a service control manager run as

415
00:19:43,500 --> 00:19:45,900
win TCB that is the second last the

416
00:19:45,900 --> 00:19:50,039
second most privileged signer so it can

417
00:19:50,039 --> 00:19:51,960
basically dominate the all the other

418
00:19:51,960 --> 00:19:53,900
processes apart from the system process

419
00:19:53,900 --> 00:19:57,780
and with that said any users that can

420
00:19:57,780 --> 00:20:00,919
get to the service control manager

421
00:20:00,919 --> 00:20:04,260
level or still its level it can

422
00:20:04,260 --> 00:20:07,559
basically it should be able to access

423
00:20:07,559 --> 00:20:09,900
all the other protected process

424
00:20:09,900 --> 00:20:14,220
processes but Microsoft again it's aware

425
00:20:14,220 --> 00:20:16,020
of that so basically the service control

426
00:20:16,020 --> 00:20:19,080
manager also guard the following API in

427
00:20:19,080 --> 00:20:21,600
order to prevent modification to any

428
00:20:21,600 --> 00:20:23,880
other protect the services running on

429
00:20:23,880 --> 00:20:26,100
Windows

430
00:20:26,100 --> 00:20:27,600
so

431
00:20:27,600 --> 00:20:30,919
PPL is a type of protection

432
00:20:30,919 --> 00:20:34,260
that is applied to user mode process by

433
00:20:34,260 --> 00:20:37,500
the kernel so if you can gain a kernel

434
00:20:37,500 --> 00:20:40,919
code level access you can again try to

435
00:20:40,919 --> 00:20:44,280
patch out all these all these flags and

436
00:20:44,280 --> 00:20:47,039
to do that to do so you just need to

437
00:20:47,039 --> 00:20:49,620
basically zering out the e-process

438
00:20:49,620 --> 00:20:51,720
structure the signature level and Signal

439
00:20:51,720 --> 00:20:54,120
section signature level and protection

440
00:20:54,120 --> 00:20:57,480
of a process if you can do so basically

441
00:20:57,480 --> 00:21:01,260
the entire application loses its

442
00:21:01,260 --> 00:21:03,900
protected status but it lose that in a

443
00:21:03,900 --> 00:21:06,720
transparent way so it doesn't really

444
00:21:06,720 --> 00:21:09,299
cause like a blue screen of that nor it

445
00:21:09,299 --> 00:21:12,600
trips the kernel patch protection so

446
00:21:12,600 --> 00:21:15,780
since the e-process structures change

447
00:21:15,780 --> 00:21:18,360
and Vary between every major build of

448
00:21:18,360 --> 00:21:20,760
Windows I've listed a link where you can

449
00:21:20,760 --> 00:21:23,520
gather a list of offsets for this

450
00:21:23,520 --> 00:21:25,679
structure

451
00:21:25,679 --> 00:21:29,039
and one of the possible bypass you can

452
00:21:29,039 --> 00:21:31,740
you can do instead of writing your own

453
00:21:31,740 --> 00:21:34,860
driver is to use the mimikats one and

454
00:21:34,860 --> 00:21:37,320
mimic has basically allow you with the

455
00:21:37,320 --> 00:21:41,039
following commands to upgrade or remove

456
00:21:41,039 --> 00:21:43,620
a protection from a process

457
00:21:43,620 --> 00:21:48,480
the only work is that mimikats doesn't

458
00:21:48,480 --> 00:21:52,020
restore the protection level the

459
00:21:52,020 --> 00:21:53,700
original protection level of a process

460
00:21:53,700 --> 00:21:56,460
so if you are interested in doing so

461
00:21:56,460 --> 00:21:59,820
during an attack instead of lowering for

462
00:21:59,820 --> 00:22:01,799
example lsas protection you should

463
00:22:01,799 --> 00:22:05,100
upgrade mimicus one after that dumping

464
00:22:05,100 --> 00:22:09,120
damping the credential and so on

465
00:22:09,120 --> 00:22:10,380
so

466
00:22:10,380 --> 00:22:13,140
the main difference between protected

467
00:22:13,140 --> 00:22:16,200
process and protected process light is

468
00:22:16,200 --> 00:22:19,320
that basically protected process ignores

469
00:22:19,320 --> 00:22:23,760
known dlls and non-dlls is a mechanism

470
00:22:23,760 --> 00:22:24,980
that

471
00:22:24,980 --> 00:22:28,860
basically allowed in Windows OS to Cache

472
00:22:28,860 --> 00:22:32,760
commonly used system dlls so it is a

473
00:22:32,760 --> 00:22:35,460
performance mechanism that with the time

474
00:22:35,460 --> 00:22:37,580
it also began

475
00:22:37,580 --> 00:22:40,620
a security mechanism because basically

476
00:22:40,620 --> 00:22:43,500
it prevents you to drop a throw a nice

477
00:22:43,500 --> 00:22:45,720
version of a system dll into the system

478
00:22:45,720 --> 00:22:48,480
folder and basically replace them and

479
00:22:48,480 --> 00:22:51,059
have your eye level services or

480
00:22:51,059 --> 00:22:54,840
processes running with the injection

481
00:22:54,840 --> 00:22:55,440
um

482
00:22:55,440 --> 00:22:58,980
so protect that process always load dlls

483
00:22:58,980 --> 00:23:01,500
from the disk they completely disregard

484
00:23:01,500 --> 00:23:04,320
uh known dlls while for protected

485
00:23:04,320 --> 00:23:06,720
process light then normal behavior will

486
00:23:06,720 --> 00:23:09,059
apply

487
00:23:09,059 --> 00:23:12,480
so let's explore the yearly launch

488
00:23:12,480 --> 00:23:15,179
anti-malware ecosystem that was built

489
00:23:15,179 --> 00:23:18,419
upon the PPL technology

490
00:23:18,419 --> 00:23:21,980
so when dealing with antivirus and EDR

491
00:23:21,980 --> 00:23:25,620
most of them nowadays run with the PPL

492
00:23:25,620 --> 00:23:28,500
Elam technology and this type of

493
00:23:28,500 --> 00:23:30,900
Technology basically consists in three

494
00:23:30,900 --> 00:23:33,360
main components the first one that is a

495
00:23:33,360 --> 00:23:35,820
kernel driver that the antivirus

496
00:23:35,820 --> 00:23:38,460
basically use to intercept I'm input

497
00:23:38,460 --> 00:23:41,640
output request to the file system and

498
00:23:41,640 --> 00:23:44,220
Implement blocking capabilities the

499
00:23:44,220 --> 00:23:46,080
second component is the user mode

500
00:23:46,080 --> 00:23:49,260
service that basically

501
00:23:49,260 --> 00:23:52,980
Shield the entire antivirus or at least

502
00:23:52,980 --> 00:23:55,559
manage some of its components and the

503
00:23:55,559 --> 00:23:58,380
third component is the user mode UI that

504
00:23:58,380 --> 00:24:01,260
basically shows information back to the

505
00:24:01,260 --> 00:24:05,159
user so running as PPL no code injection

506
00:24:05,159 --> 00:24:08,760
is possible and no termination is

507
00:24:08,760 --> 00:24:11,299
possible because this is Elum

508
00:24:11,299 --> 00:24:14,220
signer level so process termination and

509
00:24:14,220 --> 00:24:15,960
process suspension should not be

510
00:24:15,960 --> 00:24:18,320
possible

511
00:24:18,720 --> 00:24:23,280
all right so what does Elam do basically

512
00:24:23,280 --> 00:24:26,360
Elam report back a series of information

513
00:24:26,360 --> 00:24:29,280
and that I've listed on the slide back

514
00:24:29,280 --> 00:24:32,640
to the main OS so Elam drivers basically

515
00:24:32,640 --> 00:24:35,220
loads uh are the first one that loads

516
00:24:35,220 --> 00:24:38,280
before any other drivers on Windows and

517
00:24:38,280 --> 00:24:40,200
basically monitors other drivers

518
00:24:40,200 --> 00:24:42,960
initialization routines in order to try

519
00:24:42,960 --> 00:24:45,299
to understand if they are like deemed

520
00:24:45,299 --> 00:24:49,200
malicious and they must register a

521
00:24:49,200 --> 00:24:51,179
callback in order to communicate back

522
00:24:51,179 --> 00:24:52,799
and forth with Windows

523
00:24:52,799 --> 00:24:56,880
and the only things is Elam drivers are

524
00:24:56,880 --> 00:24:58,440
limited to this type of information

525
00:24:58,440 --> 00:25:02,039
because since they load before any other

526
00:25:02,039 --> 00:25:04,440
driver they don't have file system

527
00:25:04,440 --> 00:25:07,200
access unless they Implement their own

528
00:25:07,200 --> 00:25:09,299
file system driver for the same reason

529
00:25:09,299 --> 00:25:11,520
they cannot gather like Network

530
00:25:11,520 --> 00:25:13,320
intelligence or stuff because the

531
00:25:13,320 --> 00:25:17,000
network driver is not loaded yet

532
00:25:17,640 --> 00:25:20,460
so the resulting classification can be

533
00:25:20,460 --> 00:25:22,320
one of the following and windows

534
00:25:22,320 --> 00:25:25,020
basically allow a driver to load based

535
00:25:25,020 --> 00:25:28,140
on the group policy setting that is set

536
00:25:28,140 --> 00:25:32,580
for that specific machine or domain

537
00:25:32,580 --> 00:25:36,720
so where the LM drivers store its

538
00:25:36,720 --> 00:25:39,059
signature because the only match that he

539
00:25:39,059 --> 00:25:41,039
can do is basically a signature match

540
00:25:41,039 --> 00:25:45,539
against known malicious drivers and the

541
00:25:45,539 --> 00:25:47,940
signature database is stored under the

542
00:25:47,940 --> 00:25:51,539
Elam Hive the windows path is written on

543
00:25:51,539 --> 00:25:55,820
the slide and the only advantage of

544
00:25:55,820 --> 00:25:58,559
antivirus vendors to comply with that

545
00:25:58,559 --> 00:26:01,200
pet is because that pet and the

546
00:26:01,200 --> 00:26:04,679
respective register key are guarded by

547
00:26:04,679 --> 00:26:08,700
the OS so the antivirus vendor should

548
00:26:08,700 --> 00:26:11,279
only care about implementing Integrity

549
00:26:11,279 --> 00:26:14,340
check on their own component but not on

550
00:26:14,340 --> 00:26:17,959
these type of paths And Hive

551
00:26:18,059 --> 00:26:20,279
so

552
00:26:20,279 --> 00:26:22,440
there are any bypass for this type of

553
00:26:22,440 --> 00:26:26,159
driver well there are kind of two so the

554
00:26:26,159 --> 00:26:28,380
first one is you can load your own

555
00:26:28,380 --> 00:26:31,320
driver at a very late stage when the

556
00:26:31,320 --> 00:26:34,080
Elam driver at that point is unloaded so

557
00:26:34,080 --> 00:26:36,539
you can argue that at this point the

558
00:26:36,539 --> 00:26:38,520
rootkit is not enabled yet

559
00:26:38,520 --> 00:26:42,000
and it can be caught by a kernel scanner

560
00:26:42,000 --> 00:26:44,580
but pretty much no vendor do that

561
00:26:44,580 --> 00:26:47,159
because implementing a detection scanner

562
00:26:47,159 --> 00:26:49,559
in kernel mode require High Privileges

563
00:26:49,559 --> 00:26:51,720
and scanners tend to run with low

564
00:26:51,720 --> 00:26:55,679
privileges for security concern and the

565
00:26:55,679 --> 00:26:58,679
second area is boot kits but that's a

566
00:26:58,679 --> 00:27:01,679
completely another research area and I

567
00:27:01,679 --> 00:27:03,960
wouldn't speak about that today

568
00:27:03,960 --> 00:27:07,200
so how we can debug and reverse

569
00:27:07,200 --> 00:27:10,140
engineering protected processes

570
00:27:10,140 --> 00:27:12,840
the first things is if you can test

571
00:27:12,840 --> 00:27:15,480
under Windows 7 just do it because

572
00:27:15,480 --> 00:27:18,659
protected processor are implemented

573
00:27:18,659 --> 00:27:20,820
since Windows Vista but protected

574
00:27:20,820 --> 00:27:23,520
process light and the Elon features are

575
00:27:23,520 --> 00:27:27,539
only enabled since windows 8.

576
00:27:27,539 --> 00:27:30,360
or since you cannot really debug a

577
00:27:30,360 --> 00:27:32,580
protective process you should switch to

578
00:27:32,580 --> 00:27:35,820
a kernel mode debugger and to do so I've

579
00:27:35,820 --> 00:27:38,820
listed a couple of of commands that you

580
00:27:38,820 --> 00:27:41,580
can get back from the slide once I

581
00:27:41,580 --> 00:27:42,840
publish them

582
00:27:42,840 --> 00:27:44,100
so

583
00:27:44,100 --> 00:27:47,400
there is just a bit of experience here

584
00:27:47,400 --> 00:27:50,400
because Windows doesn't really work well

585
00:27:50,400 --> 00:27:52,980
when debugging services and the reason

586
00:27:52,980 --> 00:27:56,340
is why Services is running with high

587
00:27:56,340 --> 00:27:59,220
privileged users and in session zero and

588
00:27:59,220 --> 00:28:01,380
session zero is basically a segregated

589
00:28:01,380 --> 00:28:04,279
desktop session that doesn't allow

590
00:28:04,279 --> 00:28:07,740
Windows phoning or user interaction so

591
00:28:07,740 --> 00:28:10,559
I'm sharing some one-liners where you

592
00:28:10,559 --> 00:28:14,539
can set up Windows service debugging

593
00:28:15,900 --> 00:28:18,419
all right so let me skip some slide

594
00:28:18,419 --> 00:28:22,320
because they are mostly commands

595
00:28:22,320 --> 00:28:26,220
all right so sometimes you cannot really

596
00:28:26,220 --> 00:28:28,559
disable all the components of the

597
00:28:28,559 --> 00:28:30,659
antivirus with that way so the only

598
00:28:30,659 --> 00:28:32,940
things left are basically Force the

599
00:28:32,940 --> 00:28:35,760
antivirus to unload the drivers and you

600
00:28:35,760 --> 00:28:37,500
can do that by basically renaming the

601
00:28:37,500 --> 00:28:39,480
drivers on the file system by mounting

602
00:28:39,480 --> 00:28:42,120
the file system under Linux as well as

603
00:28:42,120 --> 00:28:44,159
removing the light malware protection

604
00:28:44,159 --> 00:28:46,980
flag from the registry again as a

605
00:28:46,980 --> 00:28:50,880
reference I've listed all my commands

606
00:28:50,880 --> 00:28:54,900
so let me let me tell you about this

607
00:28:54,900 --> 00:28:57,480
interesting case so Kaspersky basically

608
00:28:57,480 --> 00:28:59,100
uh

609
00:28:59,100 --> 00:29:01,559
supports the Elam technology and PPL

610
00:29:01,559 --> 00:29:03,900
technology from Microsoft because it's

611
00:29:03,900 --> 00:29:06,779
used in a proper way to Shield the

612
00:29:06,779 --> 00:29:09,659
antivirus processes uh from malware so

613
00:29:09,659 --> 00:29:11,760
malware cannot terminate Kaspersky

614
00:29:11,760 --> 00:29:13,919
because it's employee PPL technology

615
00:29:13,919 --> 00:29:17,039
but the developer were nice enough to

616
00:29:17,039 --> 00:29:19,620
include a flab a flag flag from the

617
00:29:19,620 --> 00:29:21,899
command line that you can use to disable

618
00:29:21,899 --> 00:29:25,080
this type of shield and the protected

619
00:29:25,080 --> 00:29:27,919
process then lose transparently again

620
00:29:27,919 --> 00:29:30,419
their protection status and then the

621
00:29:30,419 --> 00:29:33,240
malware can do whatever they like so

622
00:29:33,240 --> 00:29:36,720
what these teachers it basically say

623
00:29:36,720 --> 00:29:40,559
that if we can work smart and not hard

624
00:29:40,559 --> 00:29:43,919
we should always aim for the low hanging

625
00:29:43,919 --> 00:29:46,260
fruits before because every time that

626
00:29:46,260 --> 00:29:49,440
you sail with that way you can spend

627
00:29:49,440 --> 00:29:52,380
later on researching for for the attack

628
00:29:52,380 --> 00:29:54,120
surface or other and more

629
00:29:54,120 --> 00:29:56,220
vulnerabilities

630
00:29:56,220 --> 00:29:58,559
so Windows Defender is another

631
00:29:58,559 --> 00:30:01,380
completely different beast but if you

632
00:30:01,380 --> 00:30:04,020
are interested into looking into Windows

633
00:30:04,020 --> 00:30:06,539
Defender you must known that basically

634
00:30:06,539 --> 00:30:08,880
Microsoft doesn't really want us to look

635
00:30:08,880 --> 00:30:12,620
into the fender so they have these

636
00:30:12,620 --> 00:30:15,860
callback operation that basically

637
00:30:15,860 --> 00:30:18,600
crippled the access mask of the wind

638
00:30:18,600 --> 00:30:21,779
Defender process so they cannot really

639
00:30:21,779 --> 00:30:24,840
stop us again if we are in kernel if if

640
00:30:24,840 --> 00:30:27,539
we have kernel mode access then you just

641
00:30:27,539 --> 00:30:29,700
need to patch out this operation

642
00:30:29,700 --> 00:30:30,779
callback

643
00:30:30,779 --> 00:30:33,779
then you are kind of free to explore the

644
00:30:33,779 --> 00:30:35,940
wind Defender process

645
00:30:35,940 --> 00:30:39,120
but let's jump into the juicy part let's

646
00:30:39,120 --> 00:30:41,760
eat towards some pasta research and some

647
00:30:41,760 --> 00:30:43,620
novel attacks

648
00:30:43,620 --> 00:30:46,559
so we're researching a new attack

649
00:30:46,559 --> 00:30:49,980
surface I always look at the work of

650
00:30:49,980 --> 00:30:52,799
fellow researcher because that's helped

651
00:30:52,799 --> 00:30:54,779
me to better understand the attack

652
00:30:54,779 --> 00:30:56,760
surface the component that I'm auditing

653
00:30:56,760 --> 00:31:00,360
and then the component's complexity so I

654
00:31:00,360 --> 00:31:02,399
cannot mention

655
00:31:02,399 --> 00:31:03,980
um

656
00:31:03,980 --> 00:31:08,340
2014 research he basically told since

657
00:31:08,340 --> 00:31:11,520
the Windows error reporting must gather

658
00:31:11,520 --> 00:31:14,580
a crash dump from a protected process it

659
00:31:14,580 --> 00:31:16,980
should also run as a protected process

660
00:31:16,980 --> 00:31:20,640
so what happened if I

661
00:31:20,640 --> 00:31:23,940
able to crash a protected process will

662
00:31:23,940 --> 00:31:27,539
be will I be able to read any crash dump

663
00:31:27,539 --> 00:31:31,320
from it and back at the time there were

664
00:31:31,320 --> 00:31:34,980
fault secure process and had basically

665
00:31:34,980 --> 00:31:37,559
brought out the dump of the process in

666
00:31:37,559 --> 00:31:40,080
these two steps first if ride the dump

667
00:31:40,080 --> 00:31:43,020
and then he encrypt the dump so perhaps

668
00:31:43,020 --> 00:31:45,179
you can spot the vulnerability you can

669
00:31:45,179 --> 00:31:48,960
race against the full secure service and

670
00:31:48,960 --> 00:31:52,320
still the dump before it gets encrypted

671
00:31:52,320 --> 00:31:56,940
so unfortunately this flow was fixed in

672
00:31:56,940 --> 00:32:00,120
2015 and you cannot use this technique

673
00:32:00,120 --> 00:32:02,700
anymore because now the wind the

674
00:32:02,700 --> 00:32:04,919
workforce secure basically encrypts the

675
00:32:04,919 --> 00:32:07,380
dump on the Fly before writing it on the

676
00:32:07,380 --> 00:32:09,500
system

677
00:32:10,320 --> 00:32:14,100
and in 2018 James Forshaw from Google

678
00:32:14,100 --> 00:32:18,299
project zero found another bypass so at

679
00:32:18,299 --> 00:32:22,320
high level concept and this exploit is a

680
00:32:22,320 --> 00:32:24,899
cache poisoning attack where an attacker

681
00:32:24,899 --> 00:32:28,080
basically can add its own dll to the

682
00:32:28,080 --> 00:32:31,559
known dlls cache and to do so basically

683
00:32:31,559 --> 00:32:35,220
it tricks and a wind TCB process into

684
00:32:35,220 --> 00:32:37,940
writing an entry in the non-dll section

685
00:32:37,940 --> 00:32:41,340
for the attackers and then doing so

686
00:32:41,340 --> 00:32:44,220
basically it's an admin to PPL bypass

687
00:32:44,220 --> 00:32:46,919
and this type of attacks is confirmed to

688
00:32:46,919 --> 00:32:49,919
work on the latest Windows version

689
00:32:49,919 --> 00:32:53,700
because Microsoft in as indicated

690
00:32:53,700 --> 00:32:56,520
multiple times that is not intended to

691
00:32:56,520 --> 00:32:58,860
service this type of vulnerabilities

692
00:32:58,860 --> 00:33:03,840
but in July 2022 they again changed some

693
00:33:03,840 --> 00:33:06,659
um some mechanism on which they've known

694
00:33:06,659 --> 00:33:09,779
dlls basically works and it doesn't work

695
00:33:09,779 --> 00:33:13,320
anymore that perhaps is a good sign

696
00:33:13,320 --> 00:33:16,019
because it's a step forward in Windows

697
00:33:16,019 --> 00:33:19,080
security and an opportunity for us to

698
00:33:19,080 --> 00:33:22,559
dive into another vulnerability

699
00:33:22,559 --> 00:33:24,659
So speaking of which

700
00:33:24,659 --> 00:33:28,320
if you remember one of the first uh PP

701
00:33:28,320 --> 00:33:31,919
PPL constraint we saw today it was that

702
00:33:31,919 --> 00:33:36,419
any process cannot be terminated so the

703
00:33:36,419 --> 00:33:40,260
suspension should be possible and with

704
00:33:40,260 --> 00:33:43,279
that in mind I try to

705
00:33:43,279 --> 00:33:46,919
think of the following steps for a

706
00:33:46,919 --> 00:33:50,519
malware to do so the first step can be

707
00:33:50,519 --> 00:33:52,440
like for a malware to get executed of

708
00:33:52,440 --> 00:33:54,000
course on the machine and the first step

709
00:33:54,000 --> 00:33:56,519
is pretty easy because our malware

710
00:33:56,519 --> 00:33:58,200
doesn't really need to implement a lot

711
00:33:58,200 --> 00:34:00,299
of functionalities to work so the

712
00:34:00,299 --> 00:34:03,299
detection will be pretty much zero at

713
00:34:03,299 --> 00:34:06,539
that point the malware can spawn a

714
00:34:06,539 --> 00:34:09,540
suspended thread and after the suspended

715
00:34:09,540 --> 00:34:11,760
thread the malware can suspend the

716
00:34:11,760 --> 00:34:14,040
antivirus process because

717
00:34:14,040 --> 00:34:16,560
PP only prevent process termination so

718
00:34:16,560 --> 00:34:19,800
suspension is still possible right and

719
00:34:19,800 --> 00:34:22,320
then when the antivirus process is

720
00:34:22,320 --> 00:34:24,719
suspended well we can do harmful thing

721
00:34:24,719 --> 00:34:27,719
and then result restore everything back

722
00:34:27,719 --> 00:34:30,119
and safely die

723
00:34:30,119 --> 00:34:32,780
so

724
00:34:32,940 --> 00:34:35,520
turned out this technique wasn't very

725
00:34:35,520 --> 00:34:37,679
successful as most of the antivirus

726
00:34:37,679 --> 00:34:40,320
nowadays employ the Elam technique that

727
00:34:40,320 --> 00:34:43,020
is a PPL and under PPL suspension

728
00:34:43,020 --> 00:34:45,719
attacks are not possible so if you are

729
00:34:45,719 --> 00:34:48,960
wondering what is the orange asterisk

730
00:34:48,960 --> 00:34:51,599
the orange asterisk are for antivirus

731
00:34:51,599 --> 00:34:53,940
that doesn't really prevent process

732
00:34:53,940 --> 00:34:56,699
suspension but basically freeze any

733
00:34:56,699 --> 00:34:59,880
other process creation while their their

734
00:34:59,880 --> 00:35:02,460
main process is suspended so if you have

735
00:35:02,460 --> 00:35:04,560
something that is running is continue to

736
00:35:04,560 --> 00:35:07,440
run but other than that you are not

737
00:35:07,440 --> 00:35:10,800
allowed to spawn any other process

738
00:35:10,800 --> 00:35:14,460
and then another attack Vector I was

739
00:35:14,460 --> 00:35:16,859
able to think of so basically it was

740
00:35:16,859 --> 00:35:18,900
abusing the application verifier

741
00:35:18,900 --> 00:35:21,359
mechanism and the application verifier

742
00:35:21,359 --> 00:35:24,060
basically is an interesting mechanism on

743
00:35:24,060 --> 00:35:27,000
Windows because it allows you to load a

744
00:35:27,000 --> 00:35:29,280
dll in an application that you are

745
00:35:29,280 --> 00:35:33,060
testing and it is for testing purpose so

746
00:35:33,060 --> 00:35:34,800
the application verifier basically

747
00:35:34,800 --> 00:35:37,200
allows you to load a dll and this dll

748
00:35:37,200 --> 00:35:40,020
will be loaded into any other process

749
00:35:40,020 --> 00:35:42,420
and you should specify the name of the

750
00:35:42,420 --> 00:35:45,720
process in the proper register key then

751
00:35:45,720 --> 00:35:48,240
this dll is loaded even before kernel

752
00:35:48,240 --> 00:35:50,880
32. so

753
00:35:50,880 --> 00:35:54,180
what happened well it happened that when

754
00:35:54,180 --> 00:35:57,960
PPL is enabled your dll that is loaded

755
00:35:57,960 --> 00:36:00,900
into a PP or PPL process must be signed

756
00:36:00,900 --> 00:36:03,060
otherwise Microsoft really complain

757
00:36:03,060 --> 00:36:04,980
specifically code Integrity complaint

758
00:36:04,980 --> 00:36:08,640
and the dll is not allowed to run

759
00:36:08,640 --> 00:36:09,900
so

760
00:36:09,900 --> 00:36:12,359
doing so basically as the opposite

761
00:36:12,359 --> 00:36:14,760
effect of protecting your service

762
00:36:14,760 --> 00:36:17,460
because coded Integrity won't allow the

763
00:36:17,460 --> 00:36:21,000
VL to load and basically kill this the

764
00:36:21,000 --> 00:36:22,980
process or the service that was trying

765
00:36:22,980 --> 00:36:25,619
to load the dll causing uh denial of

766
00:36:25,619 --> 00:36:29,099
service attacks on the antivirus

767
00:36:29,099 --> 00:36:32,420
so we can see hope you can see that too

768
00:36:32,420 --> 00:36:35,460
that for example on Avira antivirus

769
00:36:35,460 --> 00:36:38,700
Avira is running as uh anti-malware

770
00:36:38,700 --> 00:36:42,780
signed process and if I try to use the

771
00:36:42,780 --> 00:36:44,880
application verifier attack that I've

772
00:36:44,880 --> 00:36:47,400
just outlined before basically code

773
00:36:47,400 --> 00:36:50,220
Integrity complains that that the dll

774
00:36:50,220 --> 00:36:53,099
that I'm trying to load is not signed as

775
00:36:53,099 --> 00:36:56,520
is since uh not signed dll doesn't mesh

776
00:36:56,520 --> 00:36:59,040
with the anti-malware protection level

777
00:36:59,040 --> 00:37:02,700
it killed the service and killing this

778
00:37:02,700 --> 00:37:04,859
type of service basically left out the

779
00:37:04,859 --> 00:37:07,440
machine completely exposed from all the

780
00:37:07,440 --> 00:37:10,140
other malware that can freely kill the

781
00:37:10,140 --> 00:37:13,859
remaining antivirus process and go on

782
00:37:13,859 --> 00:37:16,920
so what happened when I test this type

783
00:37:16,920 --> 00:37:17,640
of

784
00:37:17,640 --> 00:37:21,359
attacks against the usual antivirus

785
00:37:21,359 --> 00:37:24,660
well it was much way better than the

786
00:37:24,660 --> 00:37:28,920
previous one and basically for all the

787
00:37:28,920 --> 00:37:32,400
orange marks antivirus and these are

788
00:37:32,400 --> 00:37:35,640
products that only allows some subset of

789
00:37:35,640 --> 00:37:38,700
their process to be killed that way why

790
00:37:38,700 --> 00:37:42,619
of course the red one asterisk are for

791
00:37:42,619 --> 00:37:45,420
antivirus that doesn't really employ PPL

792
00:37:45,420 --> 00:37:48,060
technique that honestly for an antivirus

793
00:37:48,060 --> 00:37:51,180
is pretty shame I mean you should rely

794
00:37:51,180 --> 00:37:53,460
on OS protection instead of implementing

795
00:37:53,460 --> 00:37:57,000
your own and Reinventing the wheel so

796
00:37:57,000 --> 00:37:59,700
following my responsible disclosure this

797
00:37:59,700 --> 00:38:01,560
type of attack doesn't really work

798
00:38:01,560 --> 00:38:04,260
anymore but it's always good to double

799
00:38:04,260 --> 00:38:06,119
check that because bugs can be

800
00:38:06,119 --> 00:38:08,520
reintroduced

801
00:38:08,520 --> 00:38:11,940
all right we did it so before having

802
00:38:11,940 --> 00:38:14,820
your our q a session

803
00:38:14,820 --> 00:38:17,040
um as a side note I just want you to

804
00:38:17,040 --> 00:38:19,859
remember that the slide that deck that I

805
00:38:19,859 --> 00:38:21,960
will publish after that

806
00:38:21,960 --> 00:38:24,000
um it will be like more verbose and

807
00:38:24,000 --> 00:38:25,920
include like a lot of references and

808
00:38:25,920 --> 00:38:29,040
commands so if you really are into PPL

809
00:38:29,040 --> 00:38:31,980
technology or just want a nice refresher

810
00:38:31,980 --> 00:38:34,560
you should grab the slides other than

811
00:38:34,560 --> 00:38:36,080
that thank you

812
00:38:36,080 --> 00:38:45,529
[Applause]

813
00:38:45,599 --> 00:38:48,060
I had a question about the the DRM that

814
00:38:48,060 --> 00:38:49,320
you were talking about I was just

815
00:38:49,320 --> 00:38:51,480
curious that the DRM you were talking

816
00:38:51,480 --> 00:38:53,160
about where you're required to get that

817
00:38:53,160 --> 00:38:55,440
uh sort of sign off from Microsoft to

818
00:38:55,440 --> 00:38:57,900
have like a the the license attached to

819
00:38:57,900 --> 00:39:00,300
your your audio or music or video file

820
00:39:00,300 --> 00:39:02,820
how difficult is it to get a license

821
00:39:02,820 --> 00:39:05,160
from Microsoft like what sort of checks

822
00:39:05,160 --> 00:39:06,660
do you like is it as trivial as getting

823
00:39:06,660 --> 00:39:09,599
a TLS or I think that you have to be

824
00:39:09,599 --> 00:39:13,740
like a huge vendor that uh

825
00:39:13,740 --> 00:39:17,040
its main focus is like media content and

826
00:39:17,040 --> 00:39:18,780
you basically request the sign-in

827
00:39:18,780 --> 00:39:20,579
certificate from Microsoft they will

828
00:39:20,579 --> 00:39:23,339
give it out and no problem at all after

829
00:39:23,339 --> 00:39:26,040
than that so it's only work with like

830
00:39:26,040 --> 00:39:28,619
huge Publishers not really if you are

831
00:39:28,619 --> 00:39:31,859
like a small Studios or girl thank you

832
00:39:31,859 --> 00:39:34,460
let's thanks again Paolo

833
00:39:34,460 --> 00:39:43,260
[Applause]

