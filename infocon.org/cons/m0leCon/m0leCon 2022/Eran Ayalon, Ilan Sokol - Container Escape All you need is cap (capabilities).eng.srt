1
00:00:01,940 --> 00:00:05,179
hi everyone

2
00:00:05,940 --> 00:00:07,319
so

3
00:00:07,319 --> 00:00:12,540
um can you hear me yeah okay so um hi we

4
00:00:12,540 --> 00:00:13,860
are going to talk with you today about

5
00:00:13,860 --> 00:00:16,500
container escape and we will see how we

6
00:00:16,500 --> 00:00:19,199
can take process capability and music to

7
00:00:19,199 --> 00:00:21,240
break out from containers

8
00:00:21,240 --> 00:00:24,000
and our presentation name is all you

9
00:00:24,000 --> 00:00:26,519
need this cup

10
00:00:26,519 --> 00:00:31,080
so before we starting Let's uh just do a

11
00:00:31,080 --> 00:00:33,540
quick background on us

12
00:00:33,540 --> 00:00:36,660
uh my name is Ariana alone I'm security

13
00:00:36,660 --> 00:00:38,760
researcher at cyberism

14
00:00:38,760 --> 00:00:41,340
and my day-to-day job is detecting

15
00:00:41,340 --> 00:00:43,680
different cyber attacks on multiple

16
00:00:43,680 --> 00:00:46,559
operation systems like Windows Linux and

17
00:00:46,559 --> 00:00:48,059
Cloud environments

18
00:00:48,059 --> 00:00:50,520
I started my career seven years ago in

19
00:00:50,520 --> 00:00:52,860
the Israeli Air Force where I was a part

20
00:00:52,860 --> 00:00:54,960
of a team that was responsible to

21
00:00:54,960 --> 00:00:56,940
perform incident response malware

22
00:00:56,940 --> 00:00:58,739
analysis and thread hunting

23
00:00:58,739 --> 00:01:00,660
and I'm also very passionate about

24
00:01:00,660 --> 00:01:03,180
football and can wait for the World Cup

25
00:01:03,180 --> 00:01:05,960
to be started

26
00:01:06,360 --> 00:01:08,820
so hi everyone my name is Ilan Sokol I

27
00:01:08,820 --> 00:01:11,040
from Haifa Israel I'm a security

28
00:01:11,040 --> 00:01:12,960
researcher in cyberism and I specialized

29
00:01:12,960 --> 00:01:15,780
in the Linux research before before

30
00:01:15,780 --> 00:01:17,880
cyberries in my work was focused on the

31
00:01:17,880 --> 00:01:19,759
offensive security field

32
00:01:19,759 --> 00:01:22,799
as a result I understand I understand

33
00:01:22,799 --> 00:01:24,479
the military separation prevalent in the

34
00:01:24,479 --> 00:01:27,180
current threat landscape I'm passionate

35
00:01:27,180 --> 00:01:28,500
about reverse engineering and malware

36
00:01:28,500 --> 00:01:30,299
analysis but also interested in other

37
00:01:30,299 --> 00:01:32,100
aspects of offensive security such as

38
00:01:32,100 --> 00:01:35,479
vulnerability research

39
00:01:35,579 --> 00:01:38,820
cool so before we dive into the details

40
00:01:38,820 --> 00:01:41,400
let's do just a quick background so

41
00:01:41,400 --> 00:01:44,100
cyber attacks is not just about endpoint

42
00:01:44,100 --> 00:01:46,799
anymore until few years ago most of the

43
00:01:46,799 --> 00:01:48,780
cyber attacks were mainly focused around

44
00:01:48,780 --> 00:01:51,240
the endpoint area however new

45
00:01:51,240 --> 00:01:53,640
technologies has changed the entire way

46
00:01:53,640 --> 00:01:55,860
that the industry works we will

47
00:01:55,860 --> 00:01:58,020
Technologies like iot devices mobile

48
00:01:58,020 --> 00:02:00,840
phone and Cloud info structure has

49
00:02:00,840 --> 00:02:02,520
changed the entire way like I said the

50
00:02:02,520 --> 00:02:04,979
industry and the industry works and as a

51
00:02:04,979 --> 00:02:07,520
result it changed also the cyber attacks

52
00:02:07,520 --> 00:02:10,500
containers are now being used by almost

53
00:02:10,500 --> 00:02:12,720
every Organization for its day-to-day

54
00:02:12,720 --> 00:02:13,739
operation

55
00:02:13,739 --> 00:02:16,860
therefore containers have become a main

56
00:02:16,860 --> 00:02:19,500
target for hackers and security expert

57
00:02:19,500 --> 00:02:23,459
must be familiar with this field

58
00:02:23,459 --> 00:02:25,980
so let's talk about the container attack

59
00:02:25,980 --> 00:02:28,920
surface the container attack surface is

60
00:02:28,920 --> 00:02:30,540
slightly different from the familial

61
00:02:30,540 --> 00:02:32,940
endpoint attack surface there are some

62
00:02:32,940 --> 00:02:35,400
attacks that related to container that

63
00:02:35,400 --> 00:02:37,800
don't even took place inside the

64
00:02:37,800 --> 00:02:40,379
container those attack can took place

65
00:02:40,379 --> 00:02:42,720
outside of of the container for example

66
00:02:42,720 --> 00:02:45,120
on the host machine and by using some

67
00:02:45,120 --> 00:02:48,060
management tools like Cube CTL or Docker

68
00:02:48,060 --> 00:02:50,879
a hacker's pen can perform a list of

69
00:02:50,879 --> 00:02:53,400
malicious activities like performing a

70
00:02:53,400 --> 00:02:56,760
secret theft attack or execute direct

71
00:02:56,760 --> 00:02:59,580
commands into container or discover

72
00:02:59,580 --> 00:03:02,760
other containers around the machine

73
00:03:02,760 --> 00:03:04,860
on the other end we have some attacks

74
00:03:04,860 --> 00:03:06,480
that took place inside the container

75
00:03:06,480 --> 00:03:09,120
those attack may be caused by several

76
00:03:09,120 --> 00:03:12,599
reasons like vulnerable Docker setup or

77
00:03:12,599 --> 00:03:15,420
a misconfiguration or taking advantage

78
00:03:15,420 --> 00:03:17,940
of Docker runtime exploit and of course

79
00:03:17,940 --> 00:03:21,120
we have the famous container Escape

80
00:03:21,120 --> 00:03:23,640
the container Escape is considered as

81
00:03:23,640 --> 00:03:25,860
the Holy Grail of the container attack

82
00:03:25,860 --> 00:03:28,860
surface its allow attackers to break up

83
00:03:28,860 --> 00:03:31,379
from container to the host machine and

84
00:03:31,379 --> 00:03:34,560
by that getting access to all the data

85
00:03:34,560 --> 00:03:36,900
that's located on the host

86
00:03:36,900 --> 00:03:39,659
it's a perfect end game for hackers and

87
00:03:39,659 --> 00:03:42,599
it allowed them also to move laterally

88
00:03:42,599 --> 00:03:47,119
into other containers as well

89
00:03:47,480 --> 00:03:50,099
so to truly understand the concept of

90
00:03:50,099 --> 00:03:51,540
the concept of containers and the

91
00:03:51,540 --> 00:03:53,040
specific attack vectors the first step

92
00:03:53,040 --> 00:03:54,900
is to recognize that containers are not

93
00:03:54,900 --> 00:03:57,180
virtual machines but rather techniques

94
00:03:57,180 --> 00:03:59,580
of restricting processes on the machine

95
00:03:59,580 --> 00:04:02,000
using various isolation mechanisms

96
00:04:02,000 --> 00:04:04,739
so what is the difference between them

97
00:04:04,739 --> 00:04:06,540
the parent distinctions and virtual

98
00:04:06,540 --> 00:04:08,280
machine and the container is that a

99
00:04:08,280 --> 00:04:10,860
virtual machine had its own virtualized

100
00:04:10,860 --> 00:04:13,280
kernel whereas the container utilized

101
00:04:13,280 --> 00:04:16,320
utilizes the host kernel the container

102
00:04:16,320 --> 00:04:17,940
runs the user mode portion of the

103
00:04:17,940 --> 00:04:19,918
operation system and can be tailored to

104
00:04:19,918 --> 00:04:22,500
contain just the needed services for

105
00:04:22,500 --> 00:04:25,979
your app using fewer system resources

106
00:04:25,979 --> 00:04:29,940
encoders 2 virtual machines run run a

107
00:04:29,940 --> 00:04:31,500
complete operation system including the

108
00:04:31,500 --> 00:04:33,660
kernel that's requiring more system

109
00:04:33,660 --> 00:04:36,720
resources such as CPU memory storage

110
00:04:36,720 --> 00:04:39,600
uh here we can see illustration of how

111
00:04:39,600 --> 00:04:41,160
containers and virtual machines are

112
00:04:41,160 --> 00:04:44,240
utilized on the endpoint

113
00:04:44,940 --> 00:04:47,880
so if any of you have seen the metrics

114
00:04:47,880 --> 00:04:49,620
we hope you'll find that we will

115
00:04:49,620 --> 00:04:51,300
appreciate the reference from the scene

116
00:04:51,300 --> 00:04:53,160
there is no spoon so there is no

117
00:04:53,160 --> 00:04:55,020
container it is just another process

118
00:04:55,020 --> 00:04:57,000
running on your machine using various

119
00:04:57,000 --> 00:05:00,199
isolation mechanisms

120
00:05:00,419 --> 00:05:03,300
this isolation mechanisms so firstly we

121
00:05:03,300 --> 00:05:05,340
have namespaces name spaces are one of

122
00:05:05,340 --> 00:05:07,380
the Technologies on which containers are

123
00:05:07,380 --> 00:05:10,080
built namespaces are an abstraction

124
00:05:10,080 --> 00:05:12,360
layers that provide processes with the

125
00:05:12,360 --> 00:05:14,520
our own view of the system and its

126
00:05:14,520 --> 00:05:16,860
resources netspace is limit what process

127
00:05:16,860 --> 00:05:20,280
can see and use as it provides isolation

128
00:05:20,280 --> 00:05:24,000
a control group AKA C group is a Linux

129
00:05:24,000 --> 00:05:26,759
feature that restricts the analyze the

130
00:05:26,759 --> 00:05:28,160
collection of program resources

131
00:05:28,160 --> 00:05:30,960
utilizations such as CPU memory Network

132
00:05:30,960 --> 00:05:32,759
and so on

133
00:05:32,759 --> 00:05:34,860
then we have second which is an acronym

134
00:05:34,860 --> 00:05:38,759
for securing a secure Computing mode

135
00:05:38,759 --> 00:05:41,639
this channel feature allows us to

136
00:05:41,639 --> 00:05:43,680
restrict actions available within a

137
00:05:43,680 --> 00:05:45,720
container down to granularity of a

138
00:05:45,720 --> 00:05:47,940
single system call and lastly we have

139
00:05:47,940 --> 00:05:49,259
capabilities

140
00:05:49,259 --> 00:05:53,060
so what are capabilities will this

141
00:05:53,060 --> 00:05:55,259
provide us the ability to give a

142
00:05:55,259 --> 00:05:57,660
specific set of privileges to a thread

143
00:05:57,660 --> 00:06:00,000
or process they do so by breaking out at

144
00:06:00,000 --> 00:06:02,160
the Academy between privileged and

145
00:06:02,160 --> 00:06:03,720
unprivileged that embodies All or

146
00:06:03,720 --> 00:06:06,960
Nothing into logical group of privileges

147
00:06:06,960 --> 00:06:10,380
uh all privileged action actions having

148
00:06:10,380 --> 00:06:13,979
thought out and categorized into a set

149
00:06:13,979 --> 00:06:16,979
of approximately 40 capabilities

150
00:06:16,979 --> 00:06:19,199
that means that processor threat can use

151
00:06:19,199 --> 00:06:21,419
a small set of action for only those are

152
00:06:21,419 --> 00:06:24,419
needed lowering the danger of abuse to

153
00:06:24,419 --> 00:06:26,160
unexpected behaviors

154
00:06:26,160 --> 00:06:28,080
in other words the purpose of containers

155
00:06:28,080 --> 00:06:30,900
is to is to divide good privilege into a

156
00:06:30,900 --> 00:06:33,780
distinct privileges

157
00:06:33,780 --> 00:06:35,340
so capabilities can be applied to

158
00:06:35,340 --> 00:06:37,560
container processes in this way all

159
00:06:37,560 --> 00:06:39,720
processes part of the container will

160
00:06:39,720 --> 00:06:43,500
inherit its capabilities

161
00:06:43,500 --> 00:06:46,199
so what happens when a capability is

162
00:06:46,199 --> 00:06:48,419
assigned to a container so what is the

163
00:06:48,419 --> 00:06:49,919
ability to decide to container the color

164
00:06:49,919 --> 00:06:51,840
thread can execute a set of a system

165
00:06:51,840 --> 00:06:55,100
calls associated with the capability

166
00:06:55,100 --> 00:06:57,960
we can see an example of system calls

167
00:06:57,960 --> 00:06:59,160
that are directly connected to a

168
00:06:59,160 --> 00:07:02,220
capability for example init model or

169
00:07:02,220 --> 00:07:04,199
delete Model which are associated

170
00:07:04,199 --> 00:07:05,819
directly with the assist model

171
00:07:05,819 --> 00:07:08,580
capability all group of capabilities

172
00:07:08,580 --> 00:07:12,120
combined together will provide us a root

173
00:07:12,120 --> 00:07:13,139
privilege

174
00:07:13,139 --> 00:07:15,660
uh and make a complete set of parameters

175
00:07:15,660 --> 00:07:18,360
system call here we can see an example

176
00:07:18,360 --> 00:07:20,819
of how capabilities enable a breakdown

177
00:07:20,819 --> 00:07:23,280
of the dichotomy between privileged and

178
00:07:23,280 --> 00:07:26,719
unprivileged permissions

179
00:07:27,960 --> 00:07:30,720
so where are those capability actually

180
00:07:30,720 --> 00:07:32,580
stored

181
00:07:32,580 --> 00:07:34,319
when a process is created they

182
00:07:34,319 --> 00:07:36,120
dynamically allocates the task track

183
00:07:36,120 --> 00:07:39,000
structure so this structure holds

184
00:07:39,000 --> 00:07:40,560
contains all the information that

185
00:07:40,560 --> 00:07:43,560
processors need to for its execution it

186
00:07:43,560 --> 00:07:47,639
we can see the stack the PID the GID and

187
00:07:47,639 --> 00:07:50,699
the pointer to the parent process and

188
00:07:50,699 --> 00:07:53,580
lastly we have the credit track so let's

189
00:07:53,580 --> 00:07:55,560
take a look at it at the credit stack

190
00:07:55,560 --> 00:07:57,360
extract hold all the permission and

191
00:07:57,360 --> 00:07:59,400
credential that process need for

192
00:07:59,400 --> 00:08:02,099
execution its execution for example we

193
00:08:02,099 --> 00:08:05,160
have uad agid seoid and lastly we have

194
00:08:05,160 --> 00:08:09,360
five sets of capabilities

195
00:08:09,360 --> 00:08:11,520
so what are those five sets of

196
00:08:11,520 --> 00:08:13,800
capabilities so we have inheritable

197
00:08:13,800 --> 00:08:15,479
bounding and ambient capabilities but

198
00:08:15,479 --> 00:08:17,880
the most important for our talk is the

199
00:08:17,880 --> 00:08:20,160
effective capabilities effective

200
00:08:20,160 --> 00:08:22,020
capabilities are a set of capabilities

201
00:08:22,020 --> 00:08:24,120
that the kernel looks at when you try to

202
00:08:24,120 --> 00:08:26,960
execute a program

203
00:08:26,960 --> 00:08:29,099
then we have the permitted capabilities

204
00:08:29,099 --> 00:08:31,919
which is a superset this capabilities

205
00:08:31,919 --> 00:08:34,080
can be easily become effective by

206
00:08:34,080 --> 00:08:36,659
running set setup commands they become

207
00:08:36,659 --> 00:08:38,159
effective

208
00:08:38,159 --> 00:08:40,799
so which capabilities should I use when

209
00:08:40,799 --> 00:08:43,380
I run a container

210
00:08:43,380 --> 00:08:45,300
to deterring which capability should I

211
00:08:45,300 --> 00:08:48,779
use to write a container uh to we need

212
00:08:48,779 --> 00:08:52,260
to first to monitor which system I calls

213
00:08:52,260 --> 00:08:54,600
our containerized app is using then we

214
00:08:54,600 --> 00:08:56,760
can look at the source code of the of

215
00:08:56,760 --> 00:08:58,880
the system call and after the initial

216
00:08:58,880 --> 00:09:01,380
initialization we will see a permission

217
00:09:01,380 --> 00:09:03,899
check so most of the time the permission

218
00:09:03,899 --> 00:09:05,760
check will call the capable function

219
00:09:05,760 --> 00:09:09,420
which will check if the capability is

220
00:09:09,420 --> 00:09:11,660
allowed in the in the thread or process

221
00:09:11,660 --> 00:09:15,180
and return true if if it is allowed and

222
00:09:15,180 --> 00:09:18,000
return controls if not in this example

223
00:09:18,000 --> 00:09:19,760
you can see that

224
00:09:19,760 --> 00:09:22,620
you can see the emit model system call

225
00:09:22,620 --> 00:09:25,200
after the initialization we can see the

226
00:09:25,200 --> 00:09:27,839
magnitude model function that performs

227
00:09:27,839 --> 00:09:30,120
Security checks it calls the capable

228
00:09:30,120 --> 00:09:33,000
function with the capsys model as a as a

229
00:09:33,000 --> 00:09:36,120
parameter and to check if it's enabled

230
00:09:36,120 --> 00:09:38,420
the task

231
00:09:39,240 --> 00:09:41,640
cool so um

232
00:09:41,640 --> 00:09:44,399
so by default Docker runtime starts the

233
00:09:44,399 --> 00:09:46,860
containers with those limited set of

234
00:09:46,860 --> 00:09:49,080
capabilities you can see here list of

235
00:09:49,080 --> 00:09:50,880
capabilities of very very common

236
00:09:50,880 --> 00:09:55,260
activities like for example a c a cup

237
00:09:55,260 --> 00:09:58,380
that in charge of the net buying the net

238
00:09:58,380 --> 00:10:00,720
row it's the capabilities that in charge

239
00:10:00,720 --> 00:10:02,459
to the whole process Network

240
00:10:02,459 --> 00:10:05,839
functionality we also have a

241
00:10:05,839 --> 00:10:09,180
cup the capabilities that in charge to

242
00:10:09,180 --> 00:10:12,300
set GID and uid and and it also worth

243
00:10:12,300 --> 00:10:14,580
mentioned that capabilities that

244
00:10:14,580 --> 00:10:16,980
kubernetes using Docker runtime by

245
00:10:16,980 --> 00:10:19,320
default so actually every new kubernetes

246
00:10:19,320 --> 00:10:22,080
container has doubtly it has those

247
00:10:22,080 --> 00:10:25,920
limited set of capabilities by default

248
00:10:25,920 --> 00:10:29,160
so how can we assign our capabilities in

249
00:10:29,160 --> 00:10:31,260
our container here you can see the

250
00:10:31,260 --> 00:10:33,899
command line that we are we can use to

251
00:10:33,899 --> 00:10:36,779
control our set of capabilities is just

252
00:10:36,779 --> 00:10:40,080
using the cap add or Draw parameter and

253
00:10:40,080 --> 00:10:42,240
then you can name the list of

254
00:10:42,240 --> 00:10:44,160
capabilities that you want to add or

255
00:10:44,160 --> 00:10:48,779
drop you can also write all and do those

256
00:10:48,779 --> 00:10:51,180
action this action on the entire

257
00:10:51,180 --> 00:10:53,779
capabilities

258
00:10:54,000 --> 00:10:57,180
in kubernetes we can control our set of

259
00:10:57,180 --> 00:10:59,640
capabilities using the security context

260
00:10:59,640 --> 00:11:02,760
field you can take a look at the snippet

261
00:11:02,760 --> 00:11:04,980
and see that in this example we use the

262
00:11:04,980 --> 00:11:07,380
security context field to add the

263
00:11:07,380 --> 00:11:10,200
sysmodel capability and drop the kill

264
00:11:10,200 --> 00:11:12,779
capability

265
00:11:12,779 --> 00:11:15,300
so let's talk a little bit about the

266
00:11:15,300 --> 00:11:19,040
privileged container so by default

267
00:11:19,040 --> 00:11:23,220
containers doesn't have any access to

268
00:11:23,220 --> 00:11:25,320
any of the devices that related to The

269
00:11:25,320 --> 00:11:28,320
Host machine however when a container

270
00:11:28,320 --> 00:11:30,540
runs in a

271
00:11:30,540 --> 00:11:33,300
privilege mode it has access to the

272
00:11:33,300 --> 00:11:35,640
entire of the devices that located to

273
00:11:35,640 --> 00:11:36,839
the host

274
00:11:36,839 --> 00:11:40,260
privileged container has removes all the

275
00:11:40,260 --> 00:11:43,980
isolation mechanism and it has the all

276
00:11:43,980 --> 00:11:46,260
the entire capabilities

277
00:11:46,260 --> 00:11:48,420
and we can say that running a privileged

278
00:11:48,420 --> 00:11:52,140
container is equal to run a application

279
00:11:52,140 --> 00:11:54,060
with root privileges

280
00:11:54,060 --> 00:11:56,160
here you can see the command line that

281
00:11:56,160 --> 00:12:01,079
we are using to start a container in a

282
00:12:01,079 --> 00:12:03,420
privileged mode

283
00:12:03,420 --> 00:12:05,880
in kubernetes we also use the security

284
00:12:05,880 --> 00:12:09,300
context field you just need to use the

285
00:12:09,300 --> 00:12:11,820
privileged flag and set it to true and

286
00:12:11,820 --> 00:12:14,120
you've got yourself a new kubernetes

287
00:12:14,120 --> 00:12:17,660
privileged container

288
00:12:17,700 --> 00:12:21,140
so how to discover those capabilities

289
00:12:21,140 --> 00:12:23,459
discover the capabilities in the

290
00:12:23,459 --> 00:12:25,620
container by reading the status of the

291
00:12:25,620 --> 00:12:28,320
process id1 which is the most of the

292
00:12:28,320 --> 00:12:29,660
time the main

293
00:12:29,660 --> 00:12:33,779
process of the container so we can see

294
00:12:33,779 --> 00:12:35,459
the different capabilities that we

295
00:12:35,459 --> 00:12:37,140
mentioned earlier but the most important

296
00:12:37,140 --> 00:12:39,560
one for our talk is the cap eff which is

297
00:12:39,560 --> 00:12:42,839
the effective capability Set uh

298
00:12:42,839 --> 00:12:44,639
Technologies are displayed are

299
00:12:44,639 --> 00:12:46,560
represented as bitmask and each bit in

300
00:12:46,560 --> 00:12:48,300
the bitmask represents different

301
00:12:48,300 --> 00:12:50,700
capability

302
00:12:50,700 --> 00:12:52,740
so here you can see part of the list of

303
00:12:52,740 --> 00:12:54,959
different capabilities and their

304
00:12:54,959 --> 00:12:58,260
description this list is maintained in

305
00:12:58,260 --> 00:12:59,420
the

306
00:12:59,420 --> 00:13:01,920
capability header in the Linux source

307
00:13:01,920 --> 00:13:03,979
code

308
00:13:04,200 --> 00:13:06,420
so how to decode these capabilities

309
00:13:06,420 --> 00:13:08,639
the most popular tool to the quantum

310
00:13:08,639 --> 00:13:10,920
abilities is capsh it is not available

311
00:13:10,920 --> 00:13:12,779
by default in the operation system but

312
00:13:12,779 --> 00:13:16,139
it can easily be installed if we are

313
00:13:16,139 --> 00:13:17,820
inside the container we can install the

314
00:13:17,820 --> 00:13:20,399
Kappa stage and run Kappa stage print

315
00:13:20,399 --> 00:13:22,800
command which will display us the

316
00:13:22,800 --> 00:13:25,100
effective capabilities in the container

317
00:13:25,100 --> 00:13:28,260
but this is not a good practice because

318
00:13:28,260 --> 00:13:30,779
it's very noisy and can easily be

319
00:13:30,779 --> 00:13:32,519
detected so we can copy the effective

320
00:13:32,519 --> 00:13:34,680
capability bitmask to the attacker

321
00:13:34,680 --> 00:13:37,139
machine and decode it using cap decode

322
00:13:37,139 --> 00:13:40,139
command

323
00:13:41,339 --> 00:13:44,040
so now we are in the fun and interesting

324
00:13:44,040 --> 00:13:47,579
part of our talk the use cases and we

325
00:13:47,579 --> 00:13:49,200
are about to show you a couple of demos

326
00:13:49,200 --> 00:13:50,760
that will demonstrate how to take

327
00:13:50,760 --> 00:13:52,620
advantage of two specific capabilities

328
00:13:52,620 --> 00:13:55,260
to break out from containers our

329
00:13:55,260 --> 00:13:58,320
scenarios will be ourselves our

330
00:13:58,320 --> 00:14:00,779
scenarios will start at already inside

331
00:14:00,779 --> 00:14:02,880
the container there are many ways to

332
00:14:02,880 --> 00:14:06,240
attackers to get into a container like I

333
00:14:06,240 --> 00:14:09,360
said before take advantage of exploit

334
00:14:09,360 --> 00:14:13,139
and and more we'll not focus those this

335
00:14:13,139 --> 00:14:16,019
phase of attack where our starting point

336
00:14:16,019 --> 00:14:18,120
like I said going to be attacker that

337
00:14:18,120 --> 00:14:22,760
already got an RCA inside the container

338
00:14:24,660 --> 00:14:28,860
so uh our feathers our first demo is

339
00:14:28,860 --> 00:14:31,800
going to show how can we can escape from

340
00:14:31,800 --> 00:14:35,639
container using the capsys model uh

341
00:14:35,639 --> 00:14:37,560
capsys model capability is the

342
00:14:37,560 --> 00:14:40,920
capability that in charge of loading and

343
00:14:40,920 --> 00:14:43,740
unloading kernel models in the system it

344
00:14:43,740 --> 00:14:45,720
uses the init model and the lit model

345
00:14:45,720 --> 00:14:47,279
ciscals

346
00:14:47,279 --> 00:14:50,760
to perform the those actions

347
00:14:50,760 --> 00:14:53,760
so our minimum requirements for this

348
00:14:53,760 --> 00:14:56,880
scenario is even having either of or a

349
00:14:56,880 --> 00:14:59,760
privileged container or container that

350
00:14:59,760 --> 00:15:03,480
has the capsys model capability and

351
00:15:03,480 --> 00:15:05,459
to perform the installation of the

352
00:15:05,459 --> 00:15:08,579
kernel model we have to get a container

353
00:15:08,579 --> 00:15:10,579
that allows the sys module

354
00:15:10,579 --> 00:15:14,399
of initial model to be executed so to

355
00:15:14,399 --> 00:15:16,440
you have to make sure that you don't

356
00:15:16,440 --> 00:15:19,620
have any policy like up armor or other

357
00:15:19,620 --> 00:15:22,500
policies that will prevent this Cisco to

358
00:15:22,500 --> 00:15:25,339
be executed

359
00:15:25,920 --> 00:15:28,620
so let's talk about a tack flow that we

360
00:15:28,620 --> 00:15:30,899
are going to show you like I said we are

361
00:15:30,899 --> 00:15:33,600
starting in container and we are going

362
00:15:33,600 --> 00:15:36,120
to compile a new kernel model we are

363
00:15:36,120 --> 00:15:38,699
going to show you the source code but

364
00:15:38,699 --> 00:15:41,399
the kernel model is going to use the

365
00:15:41,399 --> 00:15:43,860
call user mode helper function it's

366
00:15:43,860 --> 00:15:45,959
function that gets command as an

367
00:15:45,959 --> 00:15:49,079
argument and this function allow the

368
00:15:49,079 --> 00:15:51,120
user to run functions in the user mode

369
00:15:51,120 --> 00:15:54,420
space so we will send this function a

370
00:15:54,420 --> 00:15:56,880
simple bash command line that will

371
00:15:56,880 --> 00:15:59,639
create a new reveals here and then we

372
00:15:59,639 --> 00:16:02,040
will install the kernel model and get a

373
00:16:02,040 --> 00:16:05,279
new reversal because it is it is a

374
00:16:05,279 --> 00:16:07,860
kernel model and it's executed from the

375
00:16:07,860 --> 00:16:09,899
kernel the reverse shell is going to be

376
00:16:09,899 --> 00:16:13,560
by default with root privileges

377
00:16:13,560 --> 00:16:16,019
so here is the source code you can see

378
00:16:16,019 --> 00:16:19,139
the simple bash command line and the

379
00:16:19,139 --> 00:16:21,600
user mode helper function

380
00:16:21,600 --> 00:16:26,120
and let's take a look at the demo

381
00:16:29,040 --> 00:16:32,579
so the attacker starts the

382
00:16:32,579 --> 00:16:36,120
so the attacker starts a listener

383
00:16:36,120 --> 00:16:39,380
on the scally machine

384
00:16:39,540 --> 00:16:43,199
now the attacker is going to read the

385
00:16:43,199 --> 00:16:45,839
main container process status it's

386
00:16:45,839 --> 00:16:48,240
usually pid1

387
00:16:48,240 --> 00:16:51,959
now we are copying the cap eff bitmask

388
00:16:51,959 --> 00:16:54,500
and we will decode it in our own machine

389
00:16:54,500 --> 00:16:57,300
to see which capabilities are effective

390
00:16:57,300 --> 00:16:59,699
on the container

391
00:16:59,699 --> 00:17:02,160
we are decoding the bitmask using up a

392
00:17:02,160 --> 00:17:04,260
state and we can see that capsys model

393
00:17:04,260 --> 00:17:07,260
is effective on this container and we

394
00:17:07,260 --> 00:17:10,439
can continue with our scenario

395
00:17:10,439 --> 00:17:13,439
now let's take a look on the source code

396
00:17:13,439 --> 00:17:15,480
that we saw earlier

397
00:17:15,480 --> 00:17:18,179
of the kernel module

398
00:17:18,179 --> 00:17:20,640
you can see here the

399
00:17:20,640 --> 00:17:22,919
attacker IP and Port that we are going

400
00:17:22,919 --> 00:17:24,179
to use

401
00:17:24,179 --> 00:17:26,160
and the user called

402
00:17:26,160 --> 00:17:29,160
yeah so now we are going to compile the

403
00:17:29,160 --> 00:17:31,440
kernel module using the make Command

404
00:17:31,440 --> 00:17:33,360
before performing this action you have

405
00:17:33,360 --> 00:17:35,700
to make sure that you have the right

406
00:17:35,700 --> 00:17:38,880
matching kernel header for 2D section

407
00:17:38,880 --> 00:17:41,520
so now we are going to install the

408
00:17:41,520 --> 00:17:45,000
kernel model using ins mode command

409
00:17:45,000 --> 00:17:47,520
and at this point we received a

410
00:17:47,520 --> 00:17:49,440
connection from the container to the

411
00:17:49,440 --> 00:17:51,660
attacker and we have a reversion with

412
00:17:51,660 --> 00:17:54,000
good Privileges and you can see that we

413
00:17:54,000 --> 00:17:57,539
are escaped from the container

414
00:17:57,539 --> 00:17:59,700
Okay so

415
00:17:59,700 --> 00:18:01,860
in this example we'll demonstrate how to

416
00:18:01,860 --> 00:18:04,080
escape from container to the underlying

417
00:18:04,080 --> 00:18:05,880
host by using the capsys speed race

418
00:18:05,880 --> 00:18:07,200
capability

419
00:18:07,200 --> 00:18:09,960
so a couple speakers capability is very

420
00:18:09,960 --> 00:18:12,179
interesting because it gives us the

421
00:18:12,179 --> 00:18:13,380
ability to transfer data between

422
00:18:13,380 --> 00:18:16,559
processes by executing the process VM

423
00:18:16,559 --> 00:18:19,020
read V system called process VM write

424
00:18:19,020 --> 00:18:22,799
big system call uh it enables it gives

425
00:18:22,799 --> 00:18:24,419
us the ability to trace arbitrary

426
00:18:24,419 --> 00:18:27,360
processes using pit race so pitrace is a

427
00:18:27,360 --> 00:18:30,600
system call that allows the process to

428
00:18:30,600 --> 00:18:33,419
Monitor and control the execution of uh

429
00:18:33,419 --> 00:18:36,720
of another process and debug it

430
00:18:36,720 --> 00:18:39,120
so in order to carry out such an attack

431
00:18:39,120 --> 00:18:41,160
we will assume that we have an access to

432
00:18:41,160 --> 00:18:43,580
a container and a possibility

433
00:18:43,580 --> 00:18:47,720
to perform remote execution

434
00:18:49,440 --> 00:18:51,840
so what are the minimal requirements for

435
00:18:51,840 --> 00:18:54,000
to perform this attack so the container

436
00:18:54,000 --> 00:18:56,100
must be started with the option PID

437
00:18:56,100 --> 00:19:00,120
equals host flag this Flags turns on the

438
00:19:00,120 --> 00:19:02,520
sharing between the container process

439
00:19:02,520 --> 00:19:05,100
Azure space and the host address space

440
00:19:05,100 --> 00:19:06,960
uh we need to start the container with

441
00:19:06,960 --> 00:19:09,960
either of privileged flag or the capsic

442
00:19:09,960 --> 00:19:11,760
speed race capability we need to make

443
00:19:11,760 --> 00:19:13,740
sure that no security profile is

444
00:19:13,740 --> 00:19:15,860
blocking pit race to perform this attack

445
00:19:15,860 --> 00:19:18,539
we also can use the unqualified policy

446
00:19:18,539 --> 00:19:22,380
which is just disabled all the

447
00:19:22,380 --> 00:19:25,160
uh all the security profiles

448
00:19:25,160 --> 00:19:28,919
here you can see the common line we used

449
00:19:28,919 --> 00:19:34,280
to spin up this vulnerable container

450
00:19:35,220 --> 00:19:37,080
so this is the attack flow we're going

451
00:19:37,080 --> 00:19:40,260
to show you so firstly again we'll

452
00:19:40,260 --> 00:19:42,539
assume we are inside the container we

453
00:19:42,539 --> 00:19:44,160
will install GDB which is a Linux

454
00:19:44,160 --> 00:19:46,320
debugger that allows us to attach to

455
00:19:46,320 --> 00:19:47,640
another process and look what happens

456
00:19:47,640 --> 00:19:50,720
inside of it and debug it

457
00:19:50,720 --> 00:19:54,360
so we will list the processes uh on the

458
00:19:54,360 --> 00:19:55,220
uh

459
00:19:55,220 --> 00:19:57,900
on the container because we are sharing

460
00:19:57,900 --> 00:19:59,100
the same address space with the host

461
00:19:59,100 --> 00:20:01,740
machine we will see the host processes

462
00:20:01,740 --> 00:20:04,320
and we will be able to attach to them

463
00:20:04,320 --> 00:20:07,080
with GDB and then we can run a simple

464
00:20:07,080 --> 00:20:11,220
Basher version under that process

465
00:20:11,220 --> 00:20:13,260
uh it will run with root privileges

466
00:20:13,260 --> 00:20:15,299
because it's a child process over root

467
00:20:15,299 --> 00:20:16,200
process

468
00:20:16,200 --> 00:20:19,760
and let's see the demo

469
00:20:23,940 --> 00:20:26,580
so uh we'll start the listener on our

470
00:20:26,580 --> 00:20:28,140
attacker machine and then we will

471
00:20:28,140 --> 00:20:31,260
release sorry uh we'll start the

472
00:20:31,260 --> 00:20:33,059
listener on a on our attacker machine

473
00:20:33,059 --> 00:20:34,679
and then we'll release the available

474
00:20:34,679 --> 00:20:36,600
capabilities in the inside the container

475
00:20:36,600 --> 00:20:40,400
by reading the process id1 uh

476
00:20:40,400 --> 00:20:43,320
status and then we will see the cap

477
00:20:43,320 --> 00:20:45,720
effective bitmask so we will copy this

478
00:20:45,720 --> 00:20:49,740
bit mask and decode it using cup sh

479
00:20:49,740 --> 00:20:51,980
we can see the capsis

480
00:20:51,980 --> 00:20:55,620
pit race is effective inside the

481
00:20:55,620 --> 00:20:57,979
container

482
00:20:58,860 --> 00:21:02,220
we will run we will list the available

483
00:21:02,220 --> 00:21:04,260
processes we can see that g edit is

484
00:21:04,260 --> 00:21:05,660
running as root

485
00:21:05,660 --> 00:21:09,240
on the host machine we will copy its PID

486
00:21:09,240 --> 00:21:14,360
and we will attach GDB to that process

487
00:21:15,360 --> 00:21:18,120
at this point we can run whatever we

488
00:21:18,120 --> 00:21:21,299
want we can inject we can inject a Shell

489
00:21:21,299 --> 00:21:23,760
Code or can inject another shared

490
00:21:23,760 --> 00:21:27,660
library but in our scenario we we will

491
00:21:27,660 --> 00:21:29,960
execute a simple budget reversial inside

492
00:21:29,960 --> 00:21:33,740
the process

493
00:21:33,900 --> 00:21:35,880
so at this point we should receive a

494
00:21:35,880 --> 00:21:37,100
reversal

495
00:21:37,100 --> 00:21:40,740
to our attacker machine with root

496
00:21:40,740 --> 00:21:44,159
privileges and we successfully escaped

497
00:21:44,159 --> 00:21:46,820
to our host

498
00:21:47,159 --> 00:21:50,520
good so now we are probably asking

499
00:21:50,520 --> 00:21:53,220
yourself how can we detect those cool

500
00:21:53,220 --> 00:21:55,620
and amazing attacks that we just saw you

501
00:21:55,620 --> 00:21:58,500
and so we will share with you at just in

502
00:21:58,500 --> 00:22:01,679
a minute uh our ways to detect and

503
00:22:01,679 --> 00:22:04,860
mitigate those threats and during our

504
00:22:04,860 --> 00:22:07,080
research we were collaborating with Mito

505
00:22:07,080 --> 00:22:09,659
organization we are shared with them our

506
00:22:09,659 --> 00:22:11,640
thoughts about escape to us technique

507
00:22:11,640 --> 00:22:15,000
and our ways to detect and mitigate

508
00:22:15,000 --> 00:22:17,940
those threats and they like their input

509
00:22:17,940 --> 00:22:20,340
and made us an official contributors to

510
00:22:20,340 --> 00:22:22,080
to the techniques so all the

511
00:22:22,080 --> 00:22:25,200
recommendation also can be found on the

512
00:22:25,200 --> 00:22:28,400
miter official website

513
00:22:28,400 --> 00:22:32,460
so for detection we have a few options

514
00:22:32,460 --> 00:22:35,460
to detect those threats and

515
00:22:35,460 --> 00:22:38,340
the first suggestion is try to detect

516
00:22:38,340 --> 00:22:42,360
every new deployment of image and pod in

517
00:22:42,360 --> 00:22:44,520
your environments especially the ones

518
00:22:44,520 --> 00:22:47,280
who runs with root privileges

519
00:22:47,280 --> 00:22:51,720
you can also try to detect to monitor

520
00:22:51,720 --> 00:22:54,659
the execution of suspicious system calls

521
00:22:54,659 --> 00:22:57,780
inside the container like in the example

522
00:22:57,780 --> 00:23:00,840
that we saw with speed rate and bitrate

523
00:23:00,840 --> 00:23:02,640
and init model

524
00:23:02,640 --> 00:23:05,520
our last suggestion is track for a

525
00:23:05,520 --> 00:23:08,820
malicious process activity you can look

526
00:23:08,820 --> 00:23:11,880
for processes that runs inside a

527
00:23:11,880 --> 00:23:15,480
container and maybe an indicator to

528
00:23:15,480 --> 00:23:17,880
hackers that try to escape to the host

529
00:23:17,880 --> 00:23:19,919
machine

530
00:23:19,919 --> 00:23:22,500
so let's talk about mitigation how can

531
00:23:22,500 --> 00:23:25,440
we mitigate from those attacks and

532
00:23:25,440 --> 00:23:30,000
minimize the risk to be affected

533
00:23:30,120 --> 00:23:32,240
um so uh

534
00:23:32,240 --> 00:23:35,039
the most important suggestion that we

535
00:23:35,039 --> 00:23:37,919
have is when you are creating a new

536
00:23:37,919 --> 00:23:40,200
container first drop all the

537
00:23:40,200 --> 00:23:42,720
capabilities from the container and only

538
00:23:42,720 --> 00:23:44,820
after that add only the relevant

539
00:23:44,820 --> 00:23:45,980
capabilities

540
00:23:45,980 --> 00:23:48,960
that will match the purpose of the

541
00:23:48,960 --> 00:23:49,919
container

542
00:23:49,919 --> 00:23:52,559
we also recommend to minimize as much as

543
00:23:52,559 --> 00:23:55,260
possible the use of privileged container

544
00:23:55,260 --> 00:23:57,780
and also try to avoid the use of the

545
00:23:57,780 --> 00:23:59,940
capsizen main capability

546
00:23:59,940 --> 00:24:02,640
cap system capability is the strongest

547
00:24:02,640 --> 00:24:05,340
capability that we have it includes

548
00:24:05,340 --> 00:24:07,860
itself many others capabilities and

549
00:24:07,860 --> 00:24:10,260
having these capabilities almost equal

550
00:24:10,260 --> 00:24:13,320
to having a root privileges

551
00:24:13,320 --> 00:24:16,320
you can also use policies like up armor

552
00:24:16,320 --> 00:24:18,539
that can we can block relevant

553
00:24:18,539 --> 00:24:21,320
capabilities of specific programs

554
00:24:21,320 --> 00:24:24,720
kubernetes as also a policy that can

555
00:24:24,720 --> 00:24:28,260
prevent prevent from capabilities to be

556
00:24:28,260 --> 00:24:30,480
applied to Containers when they are

557
00:24:30,480 --> 00:24:33,600
being created and we have also second

558
00:24:33,600 --> 00:24:37,200
filter that can block specific malicious

559
00:24:37,200 --> 00:24:40,919
ciscos for capabilities

560
00:24:40,919 --> 00:24:43,679
so I want to focus a little bit on the

561
00:24:43,679 --> 00:24:47,340
second profile Second profile is just a

562
00:24:47,340 --> 00:24:49,440
Json structure security profile it's

563
00:24:49,440 --> 00:24:52,440
based on the BPF technology which allows

564
00:24:52,440 --> 00:24:53,900
us to filter

565
00:24:53,900 --> 00:24:58,260
to filter kernel packets so it basically

566
00:24:58,260 --> 00:25:00,480
we can limit the amount of system calls

567
00:25:00,480 --> 00:25:02,100
available for the from the container

568
00:25:02,100 --> 00:25:04,620
process we can just drop certain certain

569
00:25:04,620 --> 00:25:08,400
system calls or allowed others it can be

570
00:25:08,400 --> 00:25:11,520
considered as a system called firewall

571
00:25:11,520 --> 00:25:14,780
so undesired the system calls will fail

572
00:25:14,780 --> 00:25:18,539
and be denied but the container will

573
00:25:18,539 --> 00:25:20,640
still will keep running and the program

574
00:25:20,640 --> 00:25:23,580
will still will still be alive the

575
00:25:23,580 --> 00:25:25,620
interesting part is the docker runtime

576
00:25:25,620 --> 00:25:29,700
has allows us to set second filter to a

577
00:25:29,700 --> 00:25:31,919
container and all processes inside of

578
00:25:31,919 --> 00:25:35,360
the container will be affected

579
00:25:35,760 --> 00:25:39,720
so how second profile looks like uh as I

580
00:25:39,720 --> 00:25:41,100
mentioned earlier they're adjacent

581
00:25:41,100 --> 00:25:44,520
structured so yeah we can see three

582
00:25:44,520 --> 00:25:46,500
different actions we have the allow

583
00:25:46,500 --> 00:25:49,320
action which allows system calls the

584
00:25:49,320 --> 00:25:51,240
error which denies system calls and log

585
00:25:51,240 --> 00:25:53,220
which logs down primitive system calls

586
00:25:53,220 --> 00:25:55,799
we can see that in our example the

587
00:25:55,799 --> 00:25:57,840
default action is already no that means

588
00:25:57,840 --> 00:26:00,120
that every system every system call

589
00:26:00,120 --> 00:26:03,200
which is not whitelisted in our list

590
00:26:03,200 --> 00:26:07,220
will be denied and dropped and prevented

591
00:26:07,220 --> 00:26:10,919
this is the list which is allowed we can

592
00:26:10,919 --> 00:26:14,460
see the action allow default second

593
00:26:14,460 --> 00:26:18,000
profile in dock in Docker blocks 44

594
00:26:18,000 --> 00:26:21,179
system calls out of more than 300 so I

595
00:26:21,179 --> 00:26:23,120
so I guess

596
00:26:23,120 --> 00:26:27,419
many hackers can escape from a container

597
00:26:27,419 --> 00:26:30,500
using those capabilities

598
00:26:30,500 --> 00:26:33,240
to apply a second profile to container

599
00:26:33,240 --> 00:26:36,419
we can use the security option flag and

600
00:26:36,419 --> 00:26:39,679
then we can add the path to our second

601
00:26:39,679 --> 00:26:42,539
profile Json

602
00:26:42,539 --> 00:26:45,720
so to wrap up the the stock capabilities

603
00:26:45,720 --> 00:26:47,760
control and Vocational system calls as

604
00:26:47,760 --> 00:26:50,760
we saw before earlier certain system

605
00:26:50,760 --> 00:26:53,640
calls are associated directly to a

606
00:26:53,640 --> 00:26:54,919
certain capabilities

607
00:26:54,919 --> 00:26:57,900
some of the of those system calls can

608
00:26:57,900 --> 00:26:59,400
lead to container scale such as any

609
00:26:59,400 --> 00:27:03,179
model or pit race we have to be aware of

610
00:27:03,179 --> 00:27:04,620
the capabilities that assigned to our

611
00:27:04,620 --> 00:27:08,039
containers and we should try to mitigate

612
00:27:08,039 --> 00:27:09,419
as much as possible the use of

613
00:27:09,419 --> 00:27:11,820
unnecessary capabilities and system

614
00:27:11,820 --> 00:27:13,980
calls

615
00:27:13,980 --> 00:27:16,080
thank you very much thank you if you

616
00:27:16,080 --> 00:27:16,760
enjoyed our talk

617
00:27:16,760 --> 00:27:23,869
[Applause]

618
00:27:24,900 --> 00:27:28,440
uh hi guys have you tried also in other

619
00:27:28,440 --> 00:27:32,400
platform to run this kind of attacks for

620
00:27:32,400 --> 00:27:37,220
example under windows and under Mac OS

621
00:27:37,220 --> 00:27:40,860
so basically uh containers are utilizing

622
00:27:40,860 --> 00:27:42,860
Linux

623
00:27:42,860 --> 00:27:47,760
Linux kernel uh even if we try to run

624
00:27:47,760 --> 00:27:50,880
containers on uh on Windows machine it

625
00:27:50,880 --> 00:27:53,340
used like some sort of virtual machine

626
00:27:53,340 --> 00:27:57,120
with a Linux kernel yes yes okay and

627
00:27:57,120 --> 00:27:59,700
another question about partner every

628
00:27:59,700 --> 00:28:03,659
tried also to set up also selinuxa and

629
00:28:03,659 --> 00:28:06,960
learned something about the behavior

630
00:28:06,960 --> 00:28:09,659
behind that I'm sorry I couldn't hear

631
00:28:09,659 --> 00:28:10,580
your questions

632
00:28:10,580 --> 00:28:14,039
ever tried also to enable selinux or

633
00:28:14,039 --> 00:28:16,400
disabled Salinas to understand

634
00:28:16,400 --> 00:28:19,760
other mechanism of control under

635
00:28:19,760 --> 00:28:24,020
containers process so we just tried to

636
00:28:24,020 --> 00:28:26,659
look at the default

637
00:28:26,659 --> 00:28:29,400
settings that are used usually in the

638
00:28:29,400 --> 00:28:31,620
container in the Linux so we didn't try

639
00:28:31,620 --> 00:28:35,880
to use other policies okay we all we

640
00:28:35,880 --> 00:28:38,220
researched only up armor and the second

641
00:28:38,220 --> 00:28:40,919
okay this is our best recommendation but

642
00:28:40,919 --> 00:28:44,880
as a Linux can can be useful here yes

643
00:28:44,880 --> 00:28:48,360
okay okay thank you so much

644
00:28:48,360 --> 00:28:52,158
okay let's thank again the speakers

645
00:28:52,260 --> 00:28:59,230
[Applause]

