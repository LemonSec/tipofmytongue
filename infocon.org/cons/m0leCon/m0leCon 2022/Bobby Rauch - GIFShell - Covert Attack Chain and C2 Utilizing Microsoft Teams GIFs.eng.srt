1
00:00:01,940 --> 00:00:04,140
well good morning everyone and uh it's

2
00:00:04,140 --> 00:00:05,940
so exciting to be here my name is Bobby

3
00:00:05,940 --> 00:00:07,980
Rausch I'm going to be talking about a

4
00:00:07,980 --> 00:00:10,679
gift shell some research that I did a

5
00:00:10,679 --> 00:00:12,780
few months back you may have seen it in

6
00:00:12,780 --> 00:00:14,280
the press and bleeping computer and

7
00:00:14,280 --> 00:00:16,440
across Twitter so excited to be here and

8
00:00:16,440 --> 00:00:18,600
dive more into the the technical details

9
00:00:18,600 --> 00:00:21,320
of that research

10
00:00:21,660 --> 00:00:24,480
so who am I my name is Bobby Rausch I'm

11
00:00:24,480 --> 00:00:25,920
from the United States I'm based in

12
00:00:25,920 --> 00:00:28,680
Boston Massachusetts I work as a red

13
00:00:28,680 --> 00:00:30,840
teamer on an internal red team for a

14
00:00:30,840 --> 00:00:34,320
Fortune 500 company in the states I am a

15
00:00:34,320 --> 00:00:36,360
co-host of the Cyber idiots podcast

16
00:00:36,360 --> 00:00:39,000
where me and some other offsack folks

17
00:00:39,000 --> 00:00:41,520
chat about everything offsec and infosec

18
00:00:41,520 --> 00:00:44,700
I studied computer science at MIT and I

19
00:00:44,700 --> 00:00:48,239
now live in uh in Boston still

20
00:00:48,239 --> 00:00:50,160
and you may have seen some of my prior

21
00:00:50,160 --> 00:00:52,020
research as I mentioned this research

22
00:00:52,020 --> 00:00:53,879
which was a bleeping computer and a few

23
00:00:53,879 --> 00:00:55,920
years back I did this research around

24
00:00:55,920 --> 00:00:58,620
this Good Samaritan attack uh in the

25
00:00:58,620 --> 00:01:00,239
Apple Air tag that was covered by uh

26
00:01:00,239 --> 00:01:02,959
Brian Krebs

27
00:01:03,420 --> 00:01:05,880
so you may be wondering uh where did

28
00:01:05,880 --> 00:01:08,460
this idea come from for Microsoft teams

29
00:01:08,460 --> 00:01:11,420
and and Gifts it's sort of a a wild idea

30
00:01:11,420 --> 00:01:15,360
so Microsoft teams and and novel c2s are

31
00:01:15,360 --> 00:01:17,460
nothing new there's been years of

32
00:01:17,460 --> 00:01:20,100
leveraging you know Common uh internal

33
00:01:20,100 --> 00:01:22,020
corporate tools for covert

34
00:01:22,020 --> 00:01:23,640
Communications within corporate

35
00:01:23,640 --> 00:01:25,439
environments but there were some

36
00:01:25,439 --> 00:01:26,939
interesting behaviors I had observed

37
00:01:26,939 --> 00:01:28,380
over the years particularly with

38
00:01:28,380 --> 00:01:31,740
Microsoft teams and as Microsoft teams

39
00:01:31,740 --> 00:01:33,600
grew in popularity through the pandemic

40
00:01:33,600 --> 00:01:35,579
and I believe now it's utilized by

41
00:01:35,579 --> 00:01:37,259
something like 80 percent of the The

42
00:01:37,259 --> 00:01:38,880
Fortune 500 companies in the United

43
00:01:38,880 --> 00:01:41,220
States the popularity really grew but

44
00:01:41,220 --> 00:01:43,500
there wasn't sort of that dedicated

45
00:01:43,500 --> 00:01:45,659
focus of security on the product despite

46
00:01:45,659 --> 00:01:47,460
the fact of how quickly widespread it

47
00:01:47,460 --> 00:01:48,900
had become

48
00:01:48,900 --> 00:01:50,759
uh and as I mentioned there were some

49
00:01:50,759 --> 00:01:52,740
interesting behaviors in teams that I

50
00:01:52,740 --> 00:01:54,479
thought uh might be worth looking into

51
00:01:54,479 --> 00:01:57,119
further uh first of all one time I was

52
00:01:57,119 --> 00:01:59,040
communicating with a client I was in a

53
00:01:59,040 --> 00:02:01,200
consulting firm communicating with an

54
00:02:01,200 --> 00:02:03,000
external firm that also was utilizing

55
00:02:03,000 --> 00:02:04,979
Microsoft teams and suddenly we were

56
00:02:04,979 --> 00:02:06,899
exchanging teams messages back and forth

57
00:02:06,899 --> 00:02:08,459
despite the fact that we were two

58
00:02:08,459 --> 00:02:10,139
separate Microsoft two separate

59
00:02:10,139 --> 00:02:11,819
organizations or two separate Microsoft

60
00:02:11,819 --> 00:02:13,680
tenants so I thought that was

61
00:02:13,680 --> 00:02:15,959
interesting uh secondly I was once

62
00:02:15,959 --> 00:02:18,300
working on a client engagement and I was

63
00:02:18,300 --> 00:02:20,520
exchanging payloads messaging with a

64
00:02:20,520 --> 00:02:22,379
colleague in Microsoft teams and I

65
00:02:22,379 --> 00:02:24,000
accidentally included a link to like a

66
00:02:24,000 --> 00:02:26,280
burp collaborator URL and at the end of

67
00:02:26,280 --> 00:02:28,020
that you are it was my burp collab URL

68
00:02:28,020 --> 00:02:30,239
and at the end it said you know test.gif

69
00:02:30,239 --> 00:02:32,879
and suddenly I got an IP lookup back not

70
00:02:32,879 --> 00:02:35,040
from my colleague in Boston who I sent

71
00:02:35,040 --> 00:02:36,959
the message to but rather from some

72
00:02:36,959 --> 00:02:39,480
Microsoft server that was in Brazil

73
00:02:39,480 --> 00:02:41,640
so I thought that was interesting and

74
00:02:41,640 --> 00:02:43,800
potentially looking into further and

75
00:02:43,800 --> 00:02:45,180
then over the years there had been

76
00:02:45,180 --> 00:02:46,980
several stories by other security

77
00:02:46,980 --> 00:02:48,900
research firms including firms like

78
00:02:48,900 --> 00:02:51,060
trustwave and positive security and they

79
00:02:51,060 --> 00:02:52,260
had been highlighting over the years

80
00:02:52,260 --> 00:02:54,540
some of the potential issues that

81
00:02:54,540 --> 00:02:56,700
occurred in Microsoft teams such as the

82
00:02:56,700 --> 00:02:58,680
fact that they're not as private as you

83
00:02:58,680 --> 00:03:00,060
might think they're logging them in

84
00:03:00,060 --> 00:03:02,120
plain text

85
00:03:02,120 --> 00:03:05,400
URLs are not being uh properly scanned

86
00:03:05,400 --> 00:03:07,680
as they should be but you know there was

87
00:03:07,680 --> 00:03:09,599
never any sort of larger story that came

88
00:03:09,599 --> 00:03:10,680
out of it there were sort of these

89
00:03:10,680 --> 00:03:12,420
one-offs and just the fact that hey

90
00:03:12,420 --> 00:03:14,340
maybe Microsoft teams isn't the most

91
00:03:14,340 --> 00:03:17,159
secure product so given that given the

92
00:03:17,159 --> 00:03:19,140
interesting Behavior around gifts I

93
00:03:19,140 --> 00:03:21,120
wanted to try and craft essentially an

94
00:03:21,120 --> 00:03:23,220
entire attack chain that involved both

95
00:03:23,220 --> 00:03:26,159
covert Communications utilizing gifs and

96
00:03:26,159 --> 00:03:29,519
also delivering a Stager to a victim in

97
00:03:29,519 --> 00:03:31,319
a very convincing way potentially

98
00:03:31,319 --> 00:03:33,780
leveraging some vulnerabilities that

99
00:03:33,780 --> 00:03:37,140
occurred in Microsoft teams

100
00:03:37,140 --> 00:03:39,659
uh so this is a high level overview of

101
00:03:39,659 --> 00:03:40,860
the attack chain that I'm going to walk

102
00:03:40,860 --> 00:03:44,220
through today uh shout out to uh Anton

103
00:03:44,220 --> 00:03:46,860
um from a surgeon security he actually

104
00:03:46,860 --> 00:03:49,200
did an analysis of my research and

105
00:03:49,200 --> 00:03:51,060
crafted a diagram of my research that

106
00:03:51,060 --> 00:03:52,560
was far better than the one I had made

107
00:03:52,560 --> 00:03:55,260
so I took his

108
00:03:55,260 --> 00:03:56,700
um so essentially it starts with

109
00:03:56,700 --> 00:03:58,680
delivering a Stager which we'll walk

110
00:03:58,680 --> 00:04:01,140
through through Microsoft teams the

111
00:04:01,140 --> 00:04:03,239
second part is essentially covert

112
00:04:03,239 --> 00:04:05,519
Communications and delivery of commands

113
00:04:05,519 --> 00:04:07,620
that you want executed uh disguised

114
00:04:07,620 --> 00:04:10,799
within a gif those gifts then get logged

115
00:04:10,799 --> 00:04:13,799
in plain text on any Windows Mac or

116
00:04:13,799 --> 00:04:16,260
Linux machine so essentially the Stager

117
00:04:16,260 --> 00:04:19,738
scans through those teams logs looking

118
00:04:19,738 --> 00:04:22,740
for incoming gifts executes the commands

119
00:04:22,740 --> 00:04:26,040
that it sees it then sends a Stager back

120
00:04:26,040 --> 00:04:28,259
to a Microsoft teams web hook which

121
00:04:28,259 --> 00:04:30,300
we're going to cover as well and within

122
00:04:30,300 --> 00:04:33,120
that webhook payload essentially there's

123
00:04:33,120 --> 00:04:36,540
a link to a gif that points back to the

124
00:04:36,540 --> 00:04:39,060
attacker server Microsoft then tries to

125
00:04:39,060 --> 00:04:41,639
render this GIF on behalf of the user by

126
00:04:41,639 --> 00:04:43,320
looking it up from one of their servers

127
00:04:43,320 --> 00:04:45,660
and then essentially that out of bound

128
00:04:45,660 --> 00:04:48,000
lookup of that gift exfiltrates the

129
00:04:48,000 --> 00:04:49,800
information back to the attacker server

130
00:04:49,800 --> 00:04:51,900
so finally you have this complete attack

131
00:04:51,900 --> 00:04:54,240
chain where no communication really is

132
00:04:54,240 --> 00:04:56,040
directly being exchanged between the

133
00:04:56,040 --> 00:04:57,780
attacker and the victim but rather it's

134
00:04:57,780 --> 00:04:59,840
all being piped through Microsoft teams

135
00:04:59,840 --> 00:05:02,460
Microsoft's own uh infrastructure where

136
00:05:02,460 --> 00:05:04,919
they're looking up these gifts and

137
00:05:04,919 --> 00:05:06,360
obviously the Stager is delivered

138
00:05:06,360 --> 00:05:09,740
through Microsoft teams as well

139
00:05:10,320 --> 00:05:12,479
so part one is the Stager delivery

140
00:05:12,479 --> 00:05:14,160
through teams right this is probably the

141
00:05:14,160 --> 00:05:15,780
the Crux of the research because if you

142
00:05:15,780 --> 00:05:17,280
can't get this Stager to run on the

143
00:05:17,280 --> 00:05:18,600
victim's machine then you can't have

144
00:05:18,600 --> 00:05:20,820
this subsequent covert communication

145
00:05:20,820 --> 00:05:22,500
through gifs so we're going to walk

146
00:05:22,500 --> 00:05:24,060
through how we can convincingly deliver

147
00:05:24,060 --> 00:05:25,979
a Stager through some vulnerabilities

148
00:05:25,979 --> 00:05:29,659
I've discovered in Microsoft teams

149
00:05:29,759 --> 00:05:31,680
so first it's important to highlight

150
00:05:31,680 --> 00:05:33,539
some of the basics of Microsoft teams

151
00:05:33,539 --> 00:05:34,919
and some of the functionality around

152
00:05:34,919 --> 00:05:37,080
cross-tenant delivery so as I had

153
00:05:37,080 --> 00:05:39,180
mentioned before people in two different

154
00:05:39,180 --> 00:05:41,940
organizations or Microsoft tenants are

155
00:05:41,940 --> 00:05:43,440
allowed to chat with each other by

156
00:05:43,440 --> 00:05:45,479
default and Microsoft teams and the only

157
00:05:45,479 --> 00:05:47,759
way to turn that off is if your sort of

158
00:05:47,759 --> 00:05:50,460
I.T administrator goes into the separate

159
00:05:50,460 --> 00:05:54,660
teams 365 admin portal and turns off the

160
00:05:54,660 --> 00:05:56,639
ability to communicate with other

161
00:05:56,639 --> 00:05:58,020
organizations

162
00:05:58,020 --> 00:06:00,060
now you'll notice in the top corner

163
00:06:00,060 --> 00:06:03,120
there file delivery in exchange of files

164
00:06:03,120 --> 00:06:05,639
with people in another organization is

165
00:06:05,639 --> 00:06:06,960
not permitted for obvious security

166
00:06:06,960 --> 00:06:09,240
reasons and you can see here from

167
00:06:09,240 --> 00:06:10,919
Microsoft's own documentation things

168
00:06:10,919 --> 00:06:13,979
your users can do they're not allowed to

169
00:06:13,979 --> 00:06:16,800
share files across tenants because

170
00:06:16,800 --> 00:06:18,360
obviously there's the potential for

171
00:06:18,360 --> 00:06:20,639
delivering malicious files to someone

172
00:06:20,639 --> 00:06:22,680
from outside your organization into your

173
00:06:22,680 --> 00:06:25,819
organization through teams

174
00:06:26,639 --> 00:06:27,960
so first we're going to go ahead and

175
00:06:27,960 --> 00:06:30,300
walk through kind of the anatomy of a

176
00:06:30,300 --> 00:06:33,960
basic file delivery to let's say a user

177
00:06:33,960 --> 00:06:36,060
in your own company so if I go ahead and

178
00:06:36,060 --> 00:06:38,639
I want to send a colleague of mine Chris

179
00:06:38,639 --> 00:06:42,180
a message an image of a blue circle so I

180
00:06:42,180 --> 00:06:43,560
can go ahead and click that click and

181
00:06:43,560 --> 00:06:45,960
drag that image into Microsoft teams and

182
00:06:45,960 --> 00:06:47,880
the first thing teams is going to do is

183
00:06:47,880 --> 00:06:50,580
it's going to upload the the content of

184
00:06:50,580 --> 00:06:53,580
that file to a custom SharePoint link

185
00:06:53,580 --> 00:06:55,319
that is generated for you so in this

186
00:06:55,319 --> 00:06:57,539
case the name of my company is Bobby

187
00:06:57,539 --> 00:07:00,479
rseck so the Microsoft generates a

188
00:07:00,479 --> 00:07:02,840
SharePoint URL

189
00:07:02,840 --> 00:07:05,039
bobyrsec.sharepoint.com and it uploads

190
00:07:05,039 --> 00:07:08,039
the content of this file to SharePoint

191
00:07:08,039 --> 00:07:10,560
secondly it sends a subsequent Json

192
00:07:10,560 --> 00:07:12,900
payload to a Microsoft teams endpoint

193
00:07:12,900 --> 00:07:15,600
essentially containing this large Json

194
00:07:15,600 --> 00:07:17,120
file which we're going to walk through

195
00:07:17,120 --> 00:07:19,860
containing all the the details of that

196
00:07:19,860 --> 00:07:22,020
SharePoint file and what should appear

197
00:07:22,020 --> 00:07:23,880
and what should be delivered to the end

198
00:07:23,880 --> 00:07:26,160
user

199
00:07:26,160 --> 00:07:27,840
so finally you can see here we have

200
00:07:27,840 --> 00:07:30,120
successfully uploaded this image of a

201
00:07:30,120 --> 00:07:31,680
blue circle and sent it to another

202
00:07:31,680 --> 00:07:34,199
colleague within our organization and

203
00:07:34,199 --> 00:07:36,840
you can see here on the um the side I've

204
00:07:36,840 --> 00:07:39,000
included the Json payload so essentially

205
00:07:39,000 --> 00:07:40,979
the Json body has a few properties it

206
00:07:40,979 --> 00:07:43,440
has this client message ID which is a

207
00:07:43,440 --> 00:07:45,539
unique numeric identifier associated

208
00:07:45,539 --> 00:07:48,300
with that individual team's message it

209
00:07:48,300 --> 00:07:50,520
has a series of parameters that are

210
00:07:50,520 --> 00:07:52,380
repeated over and over you can see like

211
00:07:52,380 --> 00:07:56,099
base URL file URL SharePoint URL but

212
00:07:56,099 --> 00:07:58,139
essentially it's the same SharePoint URL

213
00:07:58,139 --> 00:08:00,240
that Microsoft generated for this file

214
00:08:00,240 --> 00:08:02,819
you can see here it takes the title of

215
00:08:02,819 --> 00:08:04,979
the file the type of the file in this

216
00:08:04,979 --> 00:08:07,860
case a PNG and it also includes this

217
00:08:07,860 --> 00:08:10,500
preview URL so there's a separate URL

218
00:08:10,500 --> 00:08:12,419
that's actually generated by Skype

219
00:08:12,419 --> 00:08:14,639
Microsoft teams believe it or not still

220
00:08:14,639 --> 00:08:17,300
leverages a lot of Skype infrastructure

221
00:08:17,300 --> 00:08:20,580
so the preview is a Skype URL and that's

222
00:08:20,580 --> 00:08:22,139
kind of the the blue circle that's

223
00:08:22,139 --> 00:08:24,360
presented for you so Microsoft teams

224
00:08:24,360 --> 00:08:26,099
tries to render

225
00:08:26,099 --> 00:08:28,680
a preview of that file if it's able to

226
00:08:28,680 --> 00:08:32,900
so if it's a video image GIF Etc

227
00:08:33,299 --> 00:08:35,880
so let's say I go ahead and I send a

228
00:08:35,880 --> 00:08:38,279
message a text message to a user in

229
00:08:38,279 --> 00:08:39,839
another organization just saying the

230
00:08:39,839 --> 00:08:41,940
word hi so you can see here in the top

231
00:08:41,940 --> 00:08:44,700
the Json payload is just the word hi

232
00:08:44,700 --> 00:08:47,580
it's a rich text HTML payload and then

233
00:08:47,580 --> 00:08:50,040
alongside that is this unique client

234
00:08:50,040 --> 00:08:51,420
message ID

235
00:08:51,420 --> 00:08:53,399
so I thought okay what if we take the

236
00:08:53,399 --> 00:08:56,760
same Json payload that I had sent to a

237
00:08:56,760 --> 00:08:58,800
user in my own organization containing

238
00:08:58,800 --> 00:09:01,680
this blue circle file attachment but I

239
00:09:01,680 --> 00:09:03,480
just go ahead and swap in the client

240
00:09:03,480 --> 00:09:05,760
message ID can I then send this entire

241
00:09:05,760 --> 00:09:08,040
Json payload to a user in another

242
00:09:08,040 --> 00:09:10,440
organization and somehow this file will

243
00:09:10,440 --> 00:09:13,500
be delivered despite Microsoft saying

244
00:09:13,500 --> 00:09:15,060
that files cannot be exchanged

245
00:09:15,060 --> 00:09:18,480
cross-tenant or cross-organization

246
00:09:18,480 --> 00:09:20,700
so sure enough if I go ahead and send

247
00:09:20,700 --> 00:09:22,500
that same payload to a user in another

248
00:09:22,500 --> 00:09:25,140
organization the file has successfully

249
00:09:25,140 --> 00:09:26,760
been delivered and you can see here

250
00:09:26,760 --> 00:09:29,040
despite the fact that Microsoft's own UI

251
00:09:29,040 --> 00:09:31,560
sort of blocks even the dragging of

252
00:09:31,560 --> 00:09:33,540
attachments there's no paper clip icon

253
00:09:33,540 --> 00:09:36,480
present I've successfully delivered this

254
00:09:36,480 --> 00:09:38,640
file to a user in another organization

255
00:09:38,640 --> 00:09:40,740
so this is the first example of one of

256
00:09:40,740 --> 00:09:42,660
Microsoft's permission boundaries being

257
00:09:42,660 --> 00:09:45,319
bypassed

258
00:09:45,360 --> 00:09:48,180
so the next question becomes is uh it's

259
00:09:48,180 --> 00:09:50,220
certainly an interesting design decision

260
00:09:50,220 --> 00:09:52,019
to allow kind of this client control

261
00:09:52,019 --> 00:09:55,200
Json payload to be utilized for sending

262
00:09:55,200 --> 00:09:57,420
files to users so the immediate thought

263
00:09:57,420 --> 00:09:59,459
was how can we leverage this for

264
00:09:59,459 --> 00:10:01,860
potential attachment spoofing and maybe

265
00:10:01,860 --> 00:10:04,140
getting a user to click on a file that

266
00:10:04,140 --> 00:10:06,360
they believe is a legitimate file but in

267
00:10:06,360 --> 00:10:08,220
fact redirects them to some sort of

268
00:10:08,220 --> 00:10:10,140
attack or controlled URL with a

269
00:10:10,140 --> 00:10:11,880
malicious file

270
00:10:11,880 --> 00:10:13,860
so as I mentioned we can put in our own

271
00:10:13,860 --> 00:10:17,160
a unique client message ID and in all

272
00:10:17,160 --> 00:10:19,200
the instances where before it was asking

273
00:10:19,200 --> 00:10:21,899
for a SharePoint URL to be provided what

274
00:10:21,899 --> 00:10:24,000
if we swap that out uh with a malicious

275
00:10:24,000 --> 00:10:25,980
URL so in this case I put my website

276
00:10:25,980 --> 00:10:27,480
Bobby rseck

277
00:10:27,480 --> 00:10:30,120
and I included that in all of the Json

278
00:10:30,120 --> 00:10:32,580
parameters where it asks for a URL now

279
00:10:32,580 --> 00:10:34,800
it's interesting here under file type

280
00:10:34,800 --> 00:10:36,600
instead of saying what the file type is

281
00:10:36,600 --> 00:10:39,120
like a PNG which Microsoft teams is

282
00:10:39,120 --> 00:10:41,100
going to try and render so if I claim

283
00:10:41,100 --> 00:10:43,680
that the file is a PNG Microsoft teams

284
00:10:43,680 --> 00:10:46,260
will essentially say that the image the

285
00:10:46,260 --> 00:10:47,940
the file delivery failed because it

286
00:10:47,940 --> 00:10:49,860
doesn't know how to render the PNG if

287
00:10:49,860 --> 00:10:52,500
the ultimate PNG file doesn't exist or

288
00:10:52,500 --> 00:10:54,959
is not there but if we say that the file

289
00:10:54,959 --> 00:10:57,300
type is some unrenderable type which

290
00:10:57,300 --> 00:11:01,140
Microsoft teams can't render for a user

291
00:11:01,140 --> 00:11:03,360
like a dll file it'll go ahead and just

292
00:11:03,360 --> 00:11:05,579
appear as sort of this generic standard

293
00:11:05,579 --> 00:11:08,100
file attachment and Microsoft teams then

294
00:11:08,100 --> 00:11:09,899
won't subsequently try and render it on

295
00:11:09,899 --> 00:11:11,640
behalf of the user so even though it's

296
00:11:11,640 --> 00:11:13,800
not a dll we'll just say it's a dll So

297
00:11:13,800 --> 00:11:15,720
It ultimately arrives to the the end

298
00:11:15,720 --> 00:11:16,740
user

299
00:11:16,740 --> 00:11:18,480
you can see here we can title it

300
00:11:18,480 --> 00:11:20,760
anything we want in this case I call it

301
00:11:20,760 --> 00:11:24,959
a Christmas party photo dot jpeg

302
00:11:24,959 --> 00:11:27,660
and then finally you can see here that

303
00:11:27,660 --> 00:11:31,260
the the previous file preview URL which

304
00:11:31,260 --> 00:11:33,180
was that Skype URL before has been

305
00:11:33,180 --> 00:11:34,860
removed so this way Microsoft doesn't

306
00:11:34,860 --> 00:11:37,200
once again try and render a file that

307
00:11:37,200 --> 00:11:39,800
doesn't exist

308
00:11:40,440 --> 00:11:42,060
so if we go ahead and send that Json

309
00:11:42,060 --> 00:11:43,980
payload to a user in another

310
00:11:43,980 --> 00:11:46,260
organization you can see here they get a

311
00:11:46,260 --> 00:11:49,500
very convincing attachment that says it

312
00:11:49,500 --> 00:11:52,560
is called Christmas party photo.jpg if

313
00:11:52,560 --> 00:11:55,380
they hover over for in introspection to

314
00:11:55,380 --> 00:11:57,000
make sure that this is actually what it

315
00:11:57,000 --> 00:11:58,980
is we'll see that it also says Christmas

316
00:11:58,980 --> 00:12:01,740
party photo.jpg so there's literally no

317
00:12:01,740 --> 00:12:03,600
way for a user to tell that this file is

318
00:12:03,600 --> 00:12:06,120
malicious other than them proceeding to

319
00:12:06,120 --> 00:12:08,459
click on the link and this also bypasses

320
00:12:08,459 --> 00:12:10,500
any of the controls that Microsoft teams

321
00:12:10,500 --> 00:12:12,899
and Office 365 puts in place for

322
00:12:12,899 --> 00:12:15,120
malicious attachments because all of

323
00:12:15,120 --> 00:12:16,680
that scanning as to whether it's a

324
00:12:16,680 --> 00:12:18,480
malicious attachment or not occurs

325
00:12:18,480 --> 00:12:20,579
within the SharePoint infrastructure but

326
00:12:20,579 --> 00:12:22,440
we're just bypassing that completely by

327
00:12:22,440 --> 00:12:24,060
simply changing out all the SharePoint

328
00:12:24,060 --> 00:12:26,700
URLs with URLs to our own link so this

329
00:12:26,700 --> 00:12:28,200
won't be detected by any of their

330
00:12:28,200 --> 00:12:31,160
mitigating controls

331
00:12:36,779 --> 00:12:39,300
and this is a brief demo just showing

332
00:12:39,300 --> 00:12:41,339
that a user you can see the little

333
00:12:41,339 --> 00:12:43,500
external tag so it's coming from a user

334
00:12:43,500 --> 00:12:45,060
in another organization but they hover

335
00:12:45,060 --> 00:12:47,399
over the photo they click it they want

336
00:12:47,399 --> 00:12:48,779
to go ahead and open up and see what the

337
00:12:48,779 --> 00:12:51,300
jpeg is and now we've successfully

338
00:12:51,300 --> 00:12:53,820
dropped the Stager on their machine

339
00:12:53,820 --> 00:12:56,040
so that's um uh one way to go about

340
00:12:56,040 --> 00:12:58,380
delivering the Stager but I was curious

341
00:12:58,380 --> 00:13:00,839
how else we can go ahead and potentially

342
00:13:00,839 --> 00:13:03,720
leverage this attachment spoofing to

343
00:13:03,720 --> 00:13:08,459
leverage Microsoft's own URI file schema

344
00:13:08,459 --> 00:13:10,200
so as I was looking through Microsoft

345
00:13:10,200 --> 00:13:12,959
teams uh documentation and some other

346
00:13:12,959 --> 00:13:14,700
blog posts I noticed that Microsoft

347
00:13:14,700 --> 00:13:16,320
teams supports something called Deep

348
00:13:16,320 --> 00:13:18,180
linking where essentially I could send

349
00:13:18,180 --> 00:13:21,120
you a URL and instead of HTTP it's Ms

350
00:13:21,120 --> 00:13:23,160
teams colon and then you can include a

351
00:13:23,160 --> 00:13:24,899
series of actions that you want carried

352
00:13:24,899 --> 00:13:27,300
out so maybe that's opening up a chat

353
00:13:27,300 --> 00:13:29,399
prompt and sending a message to a

354
00:13:29,399 --> 00:13:32,279
specific user or maybe it's opening up a

355
00:13:32,279 --> 00:13:34,560
link to a survey within Microsoft teams

356
00:13:34,560 --> 00:13:36,540
that you want that user to fill out so

357
00:13:36,540 --> 00:13:38,339
if you're on a Microsoft machine or a

358
00:13:38,339 --> 00:13:40,079
Mac machine actually and you click an MS

359
00:13:40,079 --> 00:13:41,940
teams link it'll go ahead and open up

360
00:13:41,940 --> 00:13:44,160
teams on your machine and Carry Out said

361
00:13:44,160 --> 00:13:45,180
action

362
00:13:45,180 --> 00:13:47,160
so I thought this was interesting and

363
00:13:47,160 --> 00:13:48,480
this was also around the time when

364
00:13:48,480 --> 00:13:50,399
Felina was big in the news and folks

365
00:13:50,399 --> 00:13:53,160
were leveraging the the MS msdt file

366
00:13:53,160 --> 00:13:55,019
schema so I thought there potentially

367
00:13:55,019 --> 00:13:57,959
was more to explore there

368
00:13:57,959 --> 00:13:59,459
so if we dive into the Microsoft

369
00:13:59,459 --> 00:14:01,920
documentation around Microsoft URI

370
00:14:01,920 --> 00:14:03,600
schemes you can see here in addition to

371
00:14:03,600 --> 00:14:05,279
Microsoft teams there's several other

372
00:14:05,279 --> 00:14:07,560
schemes supported like Ms word MS

373
00:14:07,560 --> 00:14:09,779
PowerPoint Ms Excel so if we just pick

374
00:14:09,779 --> 00:14:11,820
one let's say Ms Excel

375
00:14:11,820 --> 00:14:13,440
we look in the appendix of the

376
00:14:13,440 --> 00:14:15,540
documentation you can see here that the

377
00:14:15,540 --> 00:14:18,600
MS Excel file scheme actually supports

378
00:14:18,600 --> 00:14:21,959
this command called open for view or ofu

379
00:14:21,959 --> 00:14:25,680
or ofv pipe U pipe so essentially you

380
00:14:25,680 --> 00:14:28,920
can send someone a uh a Microsoft Excel

381
00:14:28,920 --> 00:14:31,500
link starting with Ms Excel colon you

382
00:14:31,500 --> 00:14:34,380
can include ofu pipe U followed by the

383
00:14:34,380 --> 00:14:37,560
URL that you want that user to visit and

384
00:14:37,560 --> 00:14:39,660
if a user clicks that link Excel will

385
00:14:39,660 --> 00:14:42,120
immediately open up and try and fetch an

386
00:14:42,120 --> 00:14:45,180
XLS document from said URL

387
00:14:45,180 --> 00:14:46,260
so I thought we could potentially

388
00:14:46,260 --> 00:14:49,019
leverage this as part of kind of our

389
00:14:49,019 --> 00:14:51,420
permissions boundary bypass and this

390
00:14:51,420 --> 00:14:53,639
attachment spoofing

391
00:14:53,639 --> 00:14:55,500
so let's say we go ahead and change all

392
00:14:55,500 --> 00:14:57,240
the instances of where before it had

393
00:14:57,240 --> 00:14:59,040
kind of this attacker's malicious URL

394
00:14:59,040 --> 00:15:01,860
but now we include this MSL Excel file

395
00:15:01,860 --> 00:15:04,440
scheme and we link it uh to let's say we

396
00:15:04,440 --> 00:15:06,300
have a already have a foothold within an

397
00:15:06,300 --> 00:15:08,459
internal Network and we have an SMB

398
00:15:08,459 --> 00:15:10,500
share stood up with that environment so

399
00:15:10,500 --> 00:15:12,899
let's go ahead and include a link to our

400
00:15:12,899 --> 00:15:16,320
IP and our SMB share called ropnop the

401
00:15:16,320 --> 00:15:18,959
XLS file can exist or not exist it

402
00:15:18,959 --> 00:15:20,339
doesn't matter as soon as the user

403
00:15:20,339 --> 00:15:22,560
clicks that link Excel will open up

404
00:15:22,560 --> 00:15:24,839
their will open up on their machine and

405
00:15:24,839 --> 00:15:27,720
Excel will try and fetch that link

406
00:15:27,720 --> 00:15:29,579
so the first way we can leverage this is

407
00:15:29,579 --> 00:15:34,019
through a ntlm hash hijack so if they're

408
00:15:34,019 --> 00:15:34,680
um

409
00:15:34,680 --> 00:15:36,300
if SMB is turned on within their

410
00:15:36,300 --> 00:15:38,339
organization and they go ahead and click

411
00:15:38,339 --> 00:15:41,040
the same Christmas party photo link if

412
00:15:41,040 --> 00:15:43,079
SMB signing is turned on we can still

413
00:15:43,079 --> 00:15:46,320
capture their ntlm V2 hash and we can go

414
00:15:46,320 --> 00:15:49,079
ahead and crack that offline and as you

415
00:15:49,079 --> 00:15:50,699
can see I'll go ahead and take that hash

416
00:15:50,699 --> 00:15:53,100
put it into hashcat crack it and we find

417
00:15:53,100 --> 00:15:56,519
out that user's password is cali123

418
00:15:56,519 --> 00:15:58,920
and we can also leverage this if SMB

419
00:15:58,920 --> 00:16:01,500
signing is turned off for an ntlm relay

420
00:16:01,500 --> 00:16:04,220
attack so we can go ahead and turn on

421
00:16:04,220 --> 00:16:07,380
responder with proxy chains and as soon

422
00:16:07,380 --> 00:16:08,940
as the user clicks this malicious

423
00:16:08,940 --> 00:16:11,519
attachment their ntlm hash will be

424
00:16:11,519 --> 00:16:13,199
forward to the attacker who forwards it

425
00:16:13,199 --> 00:16:15,000
to the domain controller and now we have

426
00:16:15,000 --> 00:16:17,160
command execution under the the person

427
00:16:17,160 --> 00:16:19,260
under the permissions of the person who

428
00:16:19,260 --> 00:16:21,420
click the link so you can imagine a low

429
00:16:21,420 --> 00:16:23,040
permissioned user who has a foothold

430
00:16:23,040 --> 00:16:25,560
within the organization wants to say

431
00:16:25,560 --> 00:16:27,839
access the CEO's email they can send a

432
00:16:27,839 --> 00:16:29,579
very convincing team's attachment to the

433
00:16:29,579 --> 00:16:31,199
CEO they click the link and now

434
00:16:31,199 --> 00:16:32,699
essentially we could have code execution

435
00:16:32,699 --> 00:16:36,380
under the permissions of the CEO

436
00:16:37,740 --> 00:16:39,839
so once again uh looking back at the

437
00:16:39,839 --> 00:16:41,519
high level overview we've kind of walked

438
00:16:41,519 --> 00:16:43,560
through part one which was the the stage

439
00:16:43,560 --> 00:16:45,600
of delivery the stage or execution I

440
00:16:45,600 --> 00:16:47,279
felt like okay now we had at least

441
00:16:47,279 --> 00:16:49,320
proven out very basic proof of concept

442
00:16:49,320 --> 00:16:50,880
of how we could convincingly deliver

443
00:16:50,880 --> 00:16:53,339
this Stager that we want executed on the

444
00:16:53,339 --> 00:16:55,259
victim's machine so now let's go ahead

445
00:16:55,259 --> 00:16:56,880
and proceed into the the covert

446
00:16:56,880 --> 00:16:58,440
Communications and the Crux of the talk

447
00:16:58,440 --> 00:17:02,180
which is the gift communication

448
00:17:03,720 --> 00:17:05,880
so if we walk through uh the anatomy of

449
00:17:05,880 --> 00:17:08,640
a Microsoft teams uh GIF functionality

450
00:17:08,640 --> 00:17:10,919
so by default

451
00:17:10,919 --> 00:17:13,199
um gifts are supported within Microsoft

452
00:17:13,199 --> 00:17:15,059
teams but you have to select one of the

453
00:17:15,059 --> 00:17:18,119
gifts from their uh specified sort of

454
00:17:18,119 --> 00:17:21,179
GIF library but I thought let's say you

455
00:17:21,179 --> 00:17:22,799
want to use your own GIF well I can go

456
00:17:22,799 --> 00:17:24,959
ahead and click a drag click and drag a

457
00:17:24,959 --> 00:17:26,880
gif in but it's teams is going to go

458
00:17:26,880 --> 00:17:28,500
ahead and treat that like an attachment

459
00:17:28,500 --> 00:17:30,419
and upload it to SharePoint just as we

460
00:17:30,419 --> 00:17:32,160
saw with the blue circle

461
00:17:32,160 --> 00:17:34,760
so thinking back to kind of the Json

462
00:17:34,760 --> 00:17:37,140
payload and the the anatomy of a teams

463
00:17:37,140 --> 00:17:38,460
file that we had walked through before

464
00:17:38,460 --> 00:17:41,340
what if we take if we look at a sample

465
00:17:41,340 --> 00:17:43,320
message like the word hi once again it's

466
00:17:43,320 --> 00:17:45,840
Rich Text HTML so I thought okay let's

467
00:17:45,840 --> 00:17:49,080
say I have a base64 encoded GIF in an

468
00:17:49,080 --> 00:17:52,740
SRC tag of an HTML image tag as an

469
00:17:52,740 --> 00:17:54,720
attribute can we go ahead and pass that

470
00:17:54,720 --> 00:17:58,440
in to sort of that content for a team's

471
00:17:58,440 --> 00:18:00,179
message and can we then send our own

472
00:18:00,179 --> 00:18:02,820
base64 encoded GIF just as part of the

473
00:18:02,820 --> 00:18:05,280
body of the message bypassing any sort

474
00:18:05,280 --> 00:18:07,260
of the file uploading to SharePoint

475
00:18:07,260 --> 00:18:09,919
functionality

476
00:18:10,380 --> 00:18:12,059
so you can see here if I go ahead and

477
00:18:12,059 --> 00:18:14,700
pass in in this case this Pikachu GIF I

478
00:18:14,700 --> 00:18:16,919
can pass it in as part of the content of

479
00:18:16,919 --> 00:18:19,679
one of my Microsoft teams messages just

480
00:18:19,679 --> 00:18:21,059
to demonstrate that I have full control

481
00:18:21,059 --> 00:18:22,860
of the message I included the word you

482
00:18:22,860 --> 00:18:24,840
know Paving and Roads after just some

483
00:18:24,840 --> 00:18:26,700
random text so you can imagine a

484
00:18:26,700 --> 00:18:29,039
scenario where an incident responder is

485
00:18:29,039 --> 00:18:30,900
looking at some sort of chat log all

486
00:18:30,900 --> 00:18:32,340
they see are a bunch of gifts being

487
00:18:32,340 --> 00:18:34,260
exchanged back and forth they're talking

488
00:18:34,260 --> 00:18:35,760
about the latest meeting that occurred

489
00:18:35,760 --> 00:18:38,220
and it all seems like innocuous business

490
00:18:38,220 --> 00:18:39,780
communication within a corporate

491
00:18:39,780 --> 00:18:42,360
environment but when in actuality we

492
00:18:42,360 --> 00:18:44,280
have included kind of this our own

493
00:18:44,280 --> 00:18:47,160
base64 encoded GIF so I thought okay how

494
00:18:47,160 --> 00:18:49,140
can we potentially leverage this

495
00:18:49,140 --> 00:18:51,720
functionality to deliver malicious

496
00:18:51,720 --> 00:18:54,660
commands covertly to a victim

497
00:18:54,660 --> 00:18:57,059
well we can write a simple python script

498
00:18:57,059 --> 00:18:59,640
to essentially carry out a steganography

499
00:18:59,640 --> 00:19:01,860
of hiding commands within a base64

500
00:19:01,860 --> 00:19:04,140
encoded GIF so we can go ahead and read

501
00:19:04,140 --> 00:19:06,299
any GIF we want we can go ahead and

502
00:19:06,299 --> 00:19:08,760
append whatever command we want after

503
00:19:08,760 --> 00:19:11,340
the final semicolon in the base64

504
00:19:11,340 --> 00:19:14,460
encoded GIF content we can then go ahead

505
00:19:14,460 --> 00:19:17,340
and essentially do some UTF encoding

506
00:19:17,340 --> 00:19:19,500
convert it to bytes convert it back and

507
00:19:19,500 --> 00:19:21,419
then Basics D4 and code it and now

508
00:19:21,419 --> 00:19:23,700
essentially if we look at the output of

509
00:19:23,700 --> 00:19:25,559
a gif that's been injected you can see

510
00:19:25,559 --> 00:19:27,539
here I've appended the who am I command

511
00:19:27,539 --> 00:19:29,940
to the standard Pikachu GIF Microsoft

512
00:19:29,940 --> 00:19:31,980
teams and Google Slides still treats it

513
00:19:31,980 --> 00:19:34,020
as a normal GIF rendering it nothing

514
00:19:34,020 --> 00:19:35,940
changes about its functionality but now

515
00:19:35,940 --> 00:19:37,860
we've hidden this command within because

516
00:19:37,860 --> 00:19:39,780
a lot of these platforms seem to ignore

517
00:19:39,780 --> 00:19:42,059
whatever comes after the final semicolon

518
00:19:42,059 --> 00:19:45,860
of a base64 encoded gif

519
00:19:46,440 --> 00:19:48,539
so now to the second question of okay so

520
00:19:48,539 --> 00:19:50,400
we let's say we hide a command within

521
00:19:50,400 --> 00:19:52,679
this GIF we deliver it to a victim well

522
00:19:52,679 --> 00:19:54,660
where is all this information stored

523
00:19:54,660 --> 00:19:56,820
well it's actually stored within plain

524
00:19:56,820 --> 00:19:59,400
text on Windows and Mac machines you can

525
00:19:59,400 --> 00:20:02,360
see here within this uh https

526
00:20:02,360 --> 00:20:06,179
teams.microsoft.com uh dot level DB

527
00:20:06,179 --> 00:20:08,760
folder there's a log file contained

528
00:20:08,760 --> 00:20:11,100
within there and this is from trustwave

529
00:20:11,100 --> 00:20:12,840
who figured this out essentially if you

530
00:20:12,840 --> 00:20:15,059
just strings that log and just grip out

531
00:20:15,059 --> 00:20:17,039
for all the instances of divs

532
00:20:17,039 --> 00:20:19,140
you go ahead and see here every single

533
00:20:19,140 --> 00:20:21,720
Microsoft teams message that is

534
00:20:21,720 --> 00:20:23,340
exchanged back and forth which is

535
00:20:23,340 --> 00:20:24,900
concerning in its own right particularly

536
00:20:24,900 --> 00:20:26,400
within corporate environments if you're

537
00:20:26,400 --> 00:20:28,260
chatting about sensitive client details

538
00:20:28,260 --> 00:20:30,600
or any sensitive information at all to

539
00:20:30,600 --> 00:20:32,160
know that it's just in plain text in

540
00:20:32,160 --> 00:20:33,900
this log file is a bit concerning as

541
00:20:33,900 --> 00:20:35,820
trustwave pointed out we're going to go

542
00:20:35,820 --> 00:20:38,640
ahead and leverage that for our covert

543
00:20:38,640 --> 00:20:41,660
communication purposes

544
00:20:42,179 --> 00:20:45,840
so we talked about uh hiding messages

545
00:20:45,840 --> 00:20:48,660
within a base64 encoded GIF but I talked

546
00:20:48,660 --> 00:20:51,000
about in one of the earlier slides what

547
00:20:51,000 --> 00:20:53,700
happens if you send a URL to a gif

548
00:20:53,700 --> 00:20:56,039
within a Microsoft teams message so you

549
00:20:56,039 --> 00:20:58,020
can see here I've sent Canary tokens

550
00:20:58,020 --> 00:20:59,460
link and at the end I've called it

551
00:20:59,460 --> 00:21:02,280
test.gif if I send that to any Microsoft

552
00:21:02,280 --> 00:21:04,799
teams user Microsoft actually tries to

553
00:21:04,799 --> 00:21:07,320
fetch that image on behalf of the user

554
00:21:07,320 --> 00:21:11,780
from this out of bound request from this

555
00:21:12,440 --> 00:21:14,520
urlp.asim.skype.url so the Skype

556
00:21:14,520 --> 00:21:16,200
infrastructure tries to fetch that gif

557
00:21:16,200 --> 00:21:18,660
on behalf of the user

558
00:21:18,660 --> 00:21:21,240
so you can see here uh we get a canary

559
00:21:21,240 --> 00:21:23,820
alert that our token was triggered and

560
00:21:23,820 --> 00:21:25,380
as you can see it always comes from a

561
00:21:25,380 --> 00:21:26,580
different Microsoft data center

562
00:21:26,580 --> 00:21:29,039
sometimes in Brazil sometimes Africa but

563
00:21:29,039 --> 00:21:30,419
all over the world there's some sort of

564
00:21:30,419 --> 00:21:32,159
Skype infrastructure that is looking up

565
00:21:32,159 --> 00:21:35,600
gifts on behalf of users

566
00:21:36,659 --> 00:21:38,760
so the final step in kind of this covert

567
00:21:38,760 --> 00:21:40,559
communication which we'll review one

568
00:21:40,559 --> 00:21:41,880
more time and kind of the high level

569
00:21:41,880 --> 00:21:44,760
diagram but essentially Microsoft team

570
00:21:44,760 --> 00:21:47,100
supports web hooks so without any sort

571
00:21:47,100 --> 00:21:49,620
of uh authentication tokens required

572
00:21:49,620 --> 00:21:52,200
registration teams accounts anyone can

573
00:21:52,200 --> 00:21:54,299
go ahead and create a Microsoft teams

574
00:21:54,299 --> 00:21:57,120
web hook which essentially allows anyone

575
00:21:57,120 --> 00:21:59,220
to send a simple Json payload to that

576
00:21:59,220 --> 00:22:01,200
web hook and then that payload will

577
00:22:01,200 --> 00:22:03,419
appear as a Microsoft teams message

578
00:22:03,419 --> 00:22:05,700
within that webhook channel so simple

579
00:22:05,700 --> 00:22:08,039
curl URL saying hello world to a

580
00:22:08,039 --> 00:22:09,960
specified web hook we'll just send that

581
00:22:09,960 --> 00:22:11,760
message as if it was a standard

582
00:22:11,760 --> 00:22:13,679
Microsoft teams message without needing

583
00:22:13,679 --> 00:22:15,419
to be signed in or be any sort of

584
00:22:15,419 --> 00:22:17,280
Microsoft teams user

585
00:22:17,280 --> 00:22:19,320
so I thought okay how can we go ahead

586
00:22:19,320 --> 00:22:21,020
and leverage this as part of our

587
00:22:21,020 --> 00:22:24,120
exfiltration of whatever command that we

588
00:22:24,120 --> 00:22:26,520
hid within our gif

589
00:22:26,520 --> 00:22:28,500
so Microsoft teams supports something

590
00:22:28,500 --> 00:22:31,559
called message cards or cards and

591
00:22:31,559 --> 00:22:33,000
essentially you can include kind of

592
00:22:33,000 --> 00:22:36,360
these more uh complex Json payloads and

593
00:22:36,360 --> 00:22:37,980
this allows you to support something

594
00:22:37,980 --> 00:22:40,080
like maybe asking colleagues in your

595
00:22:40,080 --> 00:22:42,539
organization to fill out a survey or

596
00:22:42,539 --> 00:22:45,240
asking them to to fill out a response

597
00:22:45,240 --> 00:22:47,820
with their T-shirt size to mulcon

598
00:22:47,820 --> 00:22:50,940
um so it's it's quite customizable and

599
00:22:50,940 --> 00:22:52,799
one of the attributes of a Microsoft

600
00:22:52,799 --> 00:22:56,039
teams card is this activity image so I

601
00:22:56,039 --> 00:22:57,539
thought okay what if we kind of Leverage

602
00:22:57,539 --> 00:23:00,480
the lack of authentication around web

603
00:23:00,480 --> 00:23:04,200
hooks we include uh covertly kind of

604
00:23:04,200 --> 00:23:05,640
this URL

605
00:23:05,640 --> 00:23:09,059
containing the base64 encoded output of

606
00:23:09,059 --> 00:23:11,100
whatever command that we hid within our

607
00:23:11,100 --> 00:23:13,200
GIF and then executed and then we use

608
00:23:13,200 --> 00:23:15,179
that as a message of data exfiltration

609
00:23:15,179 --> 00:23:17,460
so anyone looking uh if you're an

610
00:23:17,460 --> 00:23:19,260
incident responder if you're looking at

611
00:23:19,260 --> 00:23:21,059
the Microsoft teams messages back and

612
00:23:21,059 --> 00:23:23,580
forth you would see just a standard in

613
00:23:23,580 --> 00:23:25,320
this case it's asking can you solve this

614
00:23:25,320 --> 00:23:26,820
math problem that is baffling the

615
00:23:26,820 --> 00:23:28,559
internet it appears like a standard

616
00:23:28,559 --> 00:23:30,299
question you might or standard survey

617
00:23:30,299 --> 00:23:31,860
that's let's say sent out in a corporate

618
00:23:31,860 --> 00:23:33,720
environment and you can see here this

619
00:23:33,720 --> 00:23:35,880
little thumbnail on the top left that's

620
00:23:35,880 --> 00:23:38,880
actually the GIF URL that Microsoft

621
00:23:38,880 --> 00:23:40,860
tries to render on behalf of the user

622
00:23:40,860 --> 00:23:43,020
obviously can't because it doesn't exist

623
00:23:43,020 --> 00:23:45,720
but at that point our data has been

624
00:23:45,720 --> 00:23:47,640
exfiltrated through Skype and through

625
00:23:47,640 --> 00:23:49,980
Microsoft teams own infrastructure back

626
00:23:49,980 --> 00:23:51,720
to the attacker server

627
00:23:51,720 --> 00:23:53,520
so once again if you're looking at kind

628
00:23:53,520 --> 00:23:54,419
of this

629
00:23:54,419 --> 00:23:57,179
um I'll go ahead and show the uh the out

630
00:23:57,179 --> 00:24:01,520
of bounds lookup Demo First

631
00:24:17,400 --> 00:24:18,960
sorry we're going off an Android uh

632
00:24:18,960 --> 00:24:21,919
hotspot here so

633
00:24:22,380 --> 00:24:23,460
well we can skip the video but

634
00:24:23,460 --> 00:24:25,440
essentially it's just uh demonstrating

635
00:24:25,440 --> 00:24:26,880
this um

636
00:24:26,880 --> 00:24:29,220
uh out of bounds look up from the Skype

637
00:24:29,220 --> 00:24:33,500
URL from this Microsoft teams card

638
00:24:36,600 --> 00:24:38,340
so once again just one more time the

639
00:24:38,340 --> 00:24:40,620
high level overview we have our Stager

640
00:24:40,620 --> 00:24:43,020
convincingly delivered to the victim we

641
00:24:43,020 --> 00:24:45,419
then this Stager is essentially

642
00:24:45,419 --> 00:24:47,940
regularly scanning the Microsoft teams

643
00:24:47,940 --> 00:24:50,220
log files looking for plain text

644
00:24:50,220 --> 00:24:53,520
incoming base64 encoded gifs so it's

645
00:24:53,520 --> 00:24:55,380
constantly looking for incoming gifts we

646
00:24:55,380 --> 00:24:57,539
as the attacker can then repeatedly send

647
00:24:57,539 --> 00:24:59,700
gifts to our victim containing the

648
00:24:59,700 --> 00:25:02,280
commands that we want executed the

649
00:25:02,280 --> 00:25:04,620
Stager will then execute these system

650
00:25:04,620 --> 00:25:07,559
commands it'll go ahead and base64

651
00:25:07,559 --> 00:25:10,020
encode the output of that command to the

652
00:25:10,020 --> 00:25:13,020
end of our attacker controlled endpoint

653
00:25:13,020 --> 00:25:15,000
and we'll append dot GIF at the end

654
00:25:15,000 --> 00:25:17,520
we'll go ahead and then send that within

655
00:25:17,520 --> 00:25:20,039
a Microsoft teams web hook disguised as

656
00:25:20,039 --> 00:25:22,080
kind of one of the standard of surveys

657
00:25:22,080 --> 00:25:24,299
or questionnaires sent out Microsoft

658
00:25:24,299 --> 00:25:26,400
teams will then go ahead and render the

659
00:25:26,400 --> 00:25:29,220
URL contained within on behalf of the

660
00:25:29,220 --> 00:25:31,919
user so thus looking up this GIF and

661
00:25:31,919 --> 00:25:34,860
exfiltrating the command output back to

662
00:25:34,860 --> 00:25:37,080
the attacker server from one other many

663
00:25:37,080 --> 00:25:39,600
Skype or Microsoft URLs from around the

664
00:25:39,600 --> 00:25:40,559
world

665
00:25:40,559 --> 00:25:43,320
this is kind of the entire attack chain

666
00:25:43,320 --> 00:25:46,460
of Stager delivery and then covert C2

667
00:25:46,460 --> 00:25:49,559
leveraging a series of Microsoft teams

668
00:25:49,559 --> 00:25:54,080
functionality around gifs and files

669
00:25:58,320 --> 00:26:00,120
see if maybe I escape out of the slides

670
00:26:00,120 --> 00:26:02,039
for a sec if I could show you the proof

671
00:26:02,039 --> 00:26:04,460
of concept

672
00:26:08,100 --> 00:26:11,039
so you can see here I've linked at the

673
00:26:11,039 --> 00:26:15,059
end a QR code with the python C2 code

674
00:26:15,059 --> 00:26:17,220
that I wrote along with the Powershell

675
00:26:17,220 --> 00:26:18,960
Stager that I was utilizing with this

676
00:26:18,960 --> 00:26:21,059
proof of concept but essentially we have

677
00:26:21,059 --> 00:26:24,000
this python C2 it listens for incoming

678
00:26:24,000 --> 00:26:27,179
lookups of gifs on a specified port

679
00:26:27,179 --> 00:26:29,159
it then prompts the user to enter

680
00:26:29,159 --> 00:26:31,080
whatever command they would like execute

681
00:26:31,080 --> 00:26:33,360
it on the victim's machine as soon as

682
00:26:33,360 --> 00:26:35,820
they click enter it'll go ahead and kind

683
00:26:35,820 --> 00:26:38,520
of conduct that python script we had

684
00:26:38,520 --> 00:26:41,520
shown before so it hides that uh who am

685
00:26:41,520 --> 00:26:44,640
I command within the Pikachu GIF sends

686
00:26:44,640 --> 00:26:46,679
that to the victim the Stager is already

687
00:26:46,679 --> 00:26:48,299
running on the victim's machine because

688
00:26:48,299 --> 00:26:50,220
we delivered it through our convincing

689
00:26:50,220 --> 00:26:52,740
attachment spoofing and lack of

690
00:26:52,740 --> 00:26:54,980
permissions boundaries vulnerabilities

691
00:26:54,980 --> 00:26:57,960
so it'll then the Stager then sends the

692
00:26:57,960 --> 00:27:00,179
base64 encoded output appended to the

693
00:27:00,179 --> 00:27:03,240
GIF URL you can see here that the the

694
00:27:03,240 --> 00:27:04,740
web poke has successfully these get

695
00:27:04,740 --> 00:27:06,720
getting these messages back and now we

696
00:27:06,720 --> 00:27:08,279
have this full attack chain and if you

697
00:27:08,279 --> 00:27:10,020
were looking at this from a incident

698
00:27:10,020 --> 00:27:12,360
response case or if you were just let's

699
00:27:12,360 --> 00:27:14,520
say looking at Microsoft teams traffic

700
00:27:14,520 --> 00:27:17,159
nothing would particularly jump out to

701
00:27:17,159 --> 00:27:20,940
you as unusual about this

702
00:27:20,940 --> 00:27:22,919
now you may be wondering well this is

703
00:27:22,919 --> 00:27:25,320
great but like a lot of times users uh

704
00:27:25,320 --> 00:27:27,419
you know may not be on Microsoft teams

705
00:27:27,419 --> 00:27:29,039
they may not be looking at these random

706
00:27:29,039 --> 00:27:31,200
incoming messages what if they've closed

707
00:27:31,200 --> 00:27:32,640
out teams for the night and they're

708
00:27:32,640 --> 00:27:35,880
offline well Microsoft teams actually

709
00:27:35,880 --> 00:27:38,100
continues to run as a background process

710
00:27:38,100 --> 00:27:40,200
even if you close out of Microsoft teams

711
00:27:40,200 --> 00:27:42,000
so if you click the red X and Microsoft

712
00:27:42,000 --> 00:27:43,860
teams you shut your computer lid for the

713
00:27:43,860 --> 00:27:46,500
night and you leave Microsoft teams will

714
00:27:46,500 --> 00:27:48,900
still continue to deliver these gifts

715
00:27:48,900 --> 00:27:50,820
and our attack chain will continue to

716
00:27:50,820 --> 00:27:53,460
run as normal you can see here if all

717
00:27:53,460 --> 00:27:54,960
they'll get is kind of the little Alert

718
00:27:54,960 --> 00:27:56,340
in the bottom right letting them know

719
00:27:56,340 --> 00:27:58,440
that they got some text included in a

720
00:27:58,440 --> 00:28:00,779
Microsoft teams message so you could

721
00:28:00,779 --> 00:28:02,700
presumably carry this out while users

722
00:28:02,700 --> 00:28:05,580
offline or even while users online just

723
00:28:05,580 --> 00:28:07,679
simply including text along with your

724
00:28:07,679 --> 00:28:09,419
GIF that looks like standard business

725
00:28:09,419 --> 00:28:12,140
Communications

726
00:28:13,080 --> 00:28:14,820
and then you can see the the Powershell

727
00:28:14,820 --> 00:28:17,220
stage are running there that's doing all

728
00:28:17,220 --> 00:28:19,860
the scanning of the gifs uh base64

729
00:28:19,860 --> 00:28:21,779
encoding the output of the those

730
00:28:21,779 --> 00:28:24,000
commands executed as system commands and

731
00:28:24,000 --> 00:28:27,020
sending it to the web hook

732
00:28:31,500 --> 00:28:34,380
no no it's fine yeah we're good

733
00:28:34,380 --> 00:28:36,600
thank you

734
00:28:36,600 --> 00:28:39,299
so a follow-up question folks had is uh

735
00:28:39,299 --> 00:28:40,980
is this already being leveraged in the

736
00:28:40,980 --> 00:28:42,900
wild maybe not this entire kind of

737
00:28:42,900 --> 00:28:45,720
covert communication attachment spoofing

738
00:28:45,720 --> 00:28:49,400
uh GIF idea uh but maybe parts of it are

739
00:28:49,400 --> 00:28:52,320
so just looking through a standard uh

740
00:28:52,320 --> 00:28:54,960
crowd strike uh malware query we can see

741
00:28:54,960 --> 00:28:56,700
here that there's 25 different malware

742
00:28:56,700 --> 00:28:59,100
samples that are accessing Microsoft

743
00:28:59,100 --> 00:29:01,980
teams plain text log files so for

744
00:29:01,980 --> 00:29:04,559
example business spyware variato is

745
00:29:04,559 --> 00:29:06,840
exfol trading every single user's entire

746
00:29:06,840 --> 00:29:09,480
Microsoft teams chat history as soon as

747
00:29:09,480 --> 00:29:11,940
that's executed on a user's machine and

748
00:29:11,940 --> 00:29:13,740
the Skype URL that I had mentioned that

749
00:29:13,740 --> 00:29:15,480
is conducting these out of bound GIF

750
00:29:15,480 --> 00:29:17,940
lookups on behalf of users is being

751
00:29:17,940 --> 00:29:21,419
leveraged by Gan crab ransomware to

752
00:29:21,419 --> 00:29:22,980
external trade information from

753
00:29:22,980 --> 00:29:25,140
corporate environments so parts of this

754
00:29:25,140 --> 00:29:26,760
attack chain have been already seen in

755
00:29:26,760 --> 00:29:28,919
the wild

756
00:29:28,919 --> 00:29:30,899
so I just want to walk through kind of

757
00:29:30,899 --> 00:29:33,059
the series of uh some you might say

758
00:29:33,059 --> 00:29:34,620
vulnerabilities other you might say

759
00:29:34,620 --> 00:29:37,080
maybe misconfigurations or maybe just

760
00:29:37,080 --> 00:29:39,720
overall insecure system design that

761
00:29:39,720 --> 00:29:41,580
allowed this to occur I should highlight

762
00:29:41,580 --> 00:29:43,260
as well that I did look for this

763
00:29:43,260 --> 00:29:46,440
behavior in zoom and slack and Cisco

764
00:29:46,440 --> 00:29:48,779
WebEx in a series of other common uh

765
00:29:48,779 --> 00:29:50,820
corporate you know chat platforms and

766
00:29:50,820 --> 00:29:52,559
none of this behavior and this entire

767
00:29:52,559 --> 00:29:54,419
kind of attack chain was possible in any

768
00:29:54,419 --> 00:29:56,100
of the other platforms except for

769
00:29:56,100 --> 00:29:57,779
Microsoft teams

770
00:29:57,779 --> 00:30:00,299
so as we outlined when a new tenant is

771
00:30:00,299 --> 00:30:02,039
created in Microsoft by default

772
00:30:02,039 --> 00:30:04,440
Microsoft teams allows for external

773
00:30:04,440 --> 00:30:06,840
senders to send messages to users in

774
00:30:06,840 --> 00:30:08,880
your organization and many folks weren't

775
00:30:08,880 --> 00:30:10,559
even aware that's sort of there's this

776
00:30:10,559 --> 00:30:13,380
separate Microsoft teams 365 portal

777
00:30:13,380 --> 00:30:15,440
where you can control these settings

778
00:30:15,440 --> 00:30:17,640
secondly is this permission boundary

779
00:30:17,640 --> 00:30:19,320
that we bypassed which is supposed to

780
00:30:19,320 --> 00:30:21,779
disallow external senders from sending

781
00:30:21,779 --> 00:30:24,480
files to a user in another tenant

782
00:30:24,480 --> 00:30:26,520
third we demonstrated that file

783
00:30:26,520 --> 00:30:28,500
attachments can be easily spoofed

784
00:30:28,500 --> 00:30:31,320
they're using client controlled input to

785
00:30:31,320 --> 00:30:33,480
control kind of this file delivery and

786
00:30:33,480 --> 00:30:35,159
also they're not sanitizing whether the

787
00:30:35,159 --> 00:30:37,200
URL is included in one of these Json

788
00:30:37,200 --> 00:30:40,740
payloads is a legitimate SharePoint URL

789
00:30:40,740 --> 00:30:43,020
fourth is that Microsoft teams is

790
00:30:43,020 --> 00:30:45,720
storing all messages in plain text which

791
00:30:45,720 --> 00:30:47,820
can allow a simple stage payload to scan

792
00:30:47,820 --> 00:30:50,159
for new content depended or like we

793
00:30:50,159 --> 00:30:52,140
outlined malicious ransomware or

794
00:30:52,140 --> 00:30:54,240
business spyware to excel trade entire

795
00:30:54,240 --> 00:30:56,640
Microsoft teams chat logs

796
00:30:56,640 --> 00:30:58,860
number five uh the reading of these

797
00:30:58,860 --> 00:31:00,840
Microsoft teams chat logs does not

798
00:31:00,840 --> 00:31:02,520
require any sort of elevated or

799
00:31:02,520 --> 00:31:04,799
administrative privileges which allows

800
00:31:04,799 --> 00:31:06,899
for kind of this low privilege Stager to

801
00:31:06,899 --> 00:31:09,600
run and scan the log files

802
00:31:09,600 --> 00:31:12,419
the out of bounds lookups of gifts is

803
00:31:12,419 --> 00:31:15,360
not inherently insecure but they're not

804
00:31:15,360 --> 00:31:18,299
limiting the names of file lengths so

805
00:31:18,299 --> 00:31:20,100
essentially you can include a 10 000

806
00:31:20,100 --> 00:31:22,740
character string dot GIF and Microsoft's

807
00:31:22,740 --> 00:31:24,179
infrastructure will still try and look

808
00:31:24,179 --> 00:31:26,279
up the name of that gif so by not

809
00:31:26,279 --> 00:31:28,440
including file name lengths they're

810
00:31:28,440 --> 00:31:30,419
allowing their own infrastructure to be

811
00:31:30,419 --> 00:31:32,640
leveraged for potentially malicious

812
00:31:32,640 --> 00:31:35,700
communication or data exfiltration

813
00:31:35,700 --> 00:31:38,220
a number eight uh Microsoft teams

814
00:31:38,220 --> 00:31:40,500
messages uh being sent to an individual

815
00:31:40,500 --> 00:31:42,659
are simple post requests with Json

816
00:31:42,659 --> 00:31:44,460
bodies there's no sort of sea surf

817
00:31:44,460 --> 00:31:47,940
protection uh no complex tokenization in

818
00:31:47,940 --> 00:31:50,640
place Microsoft teams actually has their

819
00:31:50,640 --> 00:31:53,760
own API called the graph API which is

820
00:31:53,760 --> 00:31:56,640
supposed to be utilized for sending and

821
00:31:56,640 --> 00:31:58,679
receiving Microsoft teams gifts in a

822
00:31:58,679 --> 00:32:00,720
programmatic way and they include a

823
00:32:00,720 --> 00:32:02,880
whole host of restrictions on rate

824
00:32:02,880 --> 00:32:05,940
limiting and what types of URLs and

825
00:32:05,940 --> 00:32:07,559
attachments can be sent as part of

826
00:32:07,559 --> 00:32:10,440
utilizing the graph API but you can

827
00:32:10,440 --> 00:32:12,240
actually just bypass all their controls

828
00:32:12,240 --> 00:32:14,520
by taking their relatively simple

829
00:32:14,520 --> 00:32:17,279
message and file delivery system to

830
00:32:17,279 --> 00:32:18,899
automate it yourself using let's say

831
00:32:18,899 --> 00:32:21,000
python request module

832
00:32:21,000 --> 00:32:22,799
and finally the sending of Microsoft

833
00:32:22,799 --> 00:32:25,380
teams messages to a public web hook as I

834
00:32:25,380 --> 00:32:27,059
outlined post requests with simple Json

835
00:32:27,059 --> 00:32:29,279
bodies don't require any authentication

836
00:32:29,279 --> 00:32:32,100
registration Etc I have no C serif or

837
00:32:32,100 --> 00:32:33,480
rate limiting protections and this

838
00:32:33,480 --> 00:32:35,340
allowed us to Simply exfiltrate our

839
00:32:35,340 --> 00:32:36,840
information through one of these

840
00:32:36,840 --> 00:32:40,158
Microsoft teams cards

841
00:32:40,500 --> 00:32:42,179
so I ended up reporting this

842
00:32:42,179 --> 00:32:44,460
vulnerability to Microsoft in three

843
00:32:44,460 --> 00:32:47,520
lengthy detailed reports similar to the

844
00:32:47,520 --> 00:32:49,260
content you're seeing in the slides

845
00:32:49,260 --> 00:32:50,220
today

846
00:32:50,220 --> 00:32:51,659
and they said that well this is great

847
00:32:51,659 --> 00:32:53,520
this is in quotes oh well this is great

848
00:32:53,520 --> 00:32:54,899
research and the engineering team will

849
00:32:54,899 --> 00:32:56,279
endeavor to improve these areas over

850
00:32:56,279 --> 00:32:58,580
time they try to argue that this is

851
00:32:58,580 --> 00:33:00,659
post-exploitation and they didn't really

852
00:33:00,659 --> 00:33:02,700
see the issue around the attachment

853
00:33:02,700 --> 00:33:04,740
spoofing the permission boundary being

854
00:33:04,740 --> 00:33:07,260
bypassed which now in Microsoft is not

855
00:33:07,260 --> 00:33:09,240
that big of a surprise but it was still

856
00:33:09,240 --> 00:33:10,919
interesting to hear the response and

857
00:33:10,919 --> 00:33:13,440
they gave me permission to blog or

858
00:33:13,440 --> 00:33:16,860
present my findings publicly about the

859
00:33:16,860 --> 00:33:18,240
the

860
00:33:18,240 --> 00:33:20,940
attack chain I discovered and uh this

861
00:33:20,940 --> 00:33:22,799
was present in the Microsoft teams

862
00:33:22,799 --> 00:33:24,779
version at the time this was back in May

863
00:33:24,779 --> 00:33:27,480
and June 2022 and it still remains

864
00:33:27,480 --> 00:33:28,799
present you can go ahead and take my

865
00:33:28,799 --> 00:33:31,440
proof of concept code and conduct this

866
00:33:31,440 --> 00:33:34,580
entire attack chain still

867
00:33:36,299 --> 00:33:38,640
so gift shell on the Press uh it ended

868
00:33:38,640 --> 00:33:40,799
up making the news via Lawrence Abrams

869
00:33:40,799 --> 00:33:42,840
from bleeping computer who did a great

870
00:33:42,840 --> 00:33:45,240
story kind of uh outlining my research

871
00:33:45,240 --> 00:33:47,100
and he was also able to reach out to

872
00:33:47,100 --> 00:33:49,380
Microsoft for comment and they kind of

873
00:33:49,380 --> 00:33:51,899
reflected the same message that they

874
00:33:51,899 --> 00:33:53,279
actually ended up backtracking and

875
00:33:53,279 --> 00:33:54,600
saying that they agree that the

876
00:33:54,600 --> 00:33:56,340
permission boundary was bypassed and

877
00:33:56,340 --> 00:33:57,659
that there are issues and file

878
00:33:57,659 --> 00:33:59,700
attachment spoofing it just isn't on

879
00:33:59,700 --> 00:34:02,460
their priority list to remediate

880
00:34:02,460 --> 00:34:05,159
immediately and then several other media

881
00:34:05,159 --> 00:34:06,659
Publications ended up picking up the

882
00:34:06,659 --> 00:34:09,239
research as well which was cool to see

883
00:34:09,239 --> 00:34:10,918
I think the most interesting part for me

884
00:34:10,918 --> 00:34:12,960
was seeing the the aftermath and the

885
00:34:12,960 --> 00:34:15,119
public response uh so a few days later

886
00:34:15,119 --> 00:34:16,859
after my research came out another

887
00:34:16,859 --> 00:34:19,560
security research firm came out and said

888
00:34:19,560 --> 00:34:21,540
that oh actually not only are messages

889
00:34:21,540 --> 00:34:23,339
being stored in plain text but actually

890
00:34:23,339 --> 00:34:26,040
all all tokens are being stored in a

891
00:34:26,040 --> 00:34:28,139
separate file in one of the Microsoft

892
00:34:28,139 --> 00:34:30,418
team subfolders as well and that

893
00:34:30,418 --> 00:34:32,639
proceeded to make big news once again

894
00:34:32,639 --> 00:34:34,139
Microsoft said that it's not on their

895
00:34:34,139 --> 00:34:35,820
priority list to fix and it's by Design

896
00:34:35,820 --> 00:34:38,760
but that was interesting to see a few

897
00:34:38,760 --> 00:34:40,619
weeks later Microsoft came out and said

898
00:34:40,619 --> 00:34:42,960
that they're going to allow Office 365

899
00:34:42,960 --> 00:34:45,000
and Microsoft teams users to report

900
00:34:45,000 --> 00:34:46,980
messages they receive from outside of

901
00:34:46,980 --> 00:34:49,679
their organization as phishing I I can't

902
00:34:49,679 --> 00:34:51,780
say I attribute this to to my research

903
00:34:51,780 --> 00:34:54,440
but certainly interesting to see uh

904
00:34:54,440 --> 00:34:56,879
thereafter shortly in the aftermath of

905
00:34:56,879 --> 00:34:59,220
my research and then Microsoft Defender

906
00:34:59,220 --> 00:35:02,220
added command and control traffic

907
00:35:02,220 --> 00:35:05,220
detection you may Wonder uh how good is

908
00:35:05,220 --> 00:35:07,619
their monitoring and would Microsoft

909
00:35:07,619 --> 00:35:09,000
themselves be able to pick up on the

910
00:35:09,000 --> 00:35:10,619
gift shell attack

911
00:35:10,619 --> 00:35:14,040
well ant Anton from a surgeon security

912
00:35:14,040 --> 00:35:17,640
did his own analysis and replicated my

913
00:35:17,640 --> 00:35:19,740
entire attack chain and intentionally

914
00:35:19,740 --> 00:35:21,780
essentially tested it against Defender

915
00:35:21,780 --> 00:35:24,000
for endpoint and Microsoft Sentinel and

916
00:35:24,000 --> 00:35:26,400
without some very specific kind of

917
00:35:26,400 --> 00:35:28,740
monitoring queries the attack was

918
00:35:28,740 --> 00:35:31,619
essentially entirely undetectable and

919
00:35:31,619 --> 00:35:33,300
from his perspective the best mitigation

920
00:35:33,300 --> 00:35:35,880
was just to block your tenant if you're

921
00:35:35,880 --> 00:35:38,520
an I.T administrator from allowing users

922
00:35:38,520 --> 00:35:40,380
and other organizations to send people

923
00:35:40,380 --> 00:35:42,839
within your organization any messages at

924
00:35:42,839 --> 00:35:44,940
all

925
00:35:44,940 --> 00:35:46,800
I said well just closing thoughts and

926
00:35:46,800 --> 00:35:48,000
citations

927
00:35:48,000 --> 00:35:50,160
um I think this is uh uh important for

928
00:35:50,160 --> 00:35:53,160
organizations to continue to regularly

929
00:35:53,160 --> 00:35:55,079
conduct threat modeling and think about

930
00:35:55,079 --> 00:35:57,000
not only all the places where

931
00:35:57,000 --> 00:35:59,400
vulnerabilities will occur but how

932
00:35:59,400 --> 00:36:01,800
attackers may be leveraging

933
00:36:01,800 --> 00:36:04,619
um basic functionality or system design

934
00:36:04,619 --> 00:36:06,440
in a malicious way

935
00:36:06,440 --> 00:36:08,820
obviously always patch low severity

936
00:36:08,820 --> 00:36:11,160
vulnerabilities and I think it's also

937
00:36:11,160 --> 00:36:12,960
interesting to think about uh you know

938
00:36:12,960 --> 00:36:15,180
large technology companies are

939
00:36:15,180 --> 00:36:16,560
constantly making decisions around

940
00:36:16,560 --> 00:36:19,020
assumed Rift assumed risk if you've ever

941
00:36:19,020 --> 00:36:21,000
worked as a security consultant you'll

942
00:36:21,000 --> 00:36:22,740
often have conversations around a

943
00:36:22,740 --> 00:36:25,020
finding you have and the business has

944
00:36:25,020 --> 00:36:27,660
essentially accepted the fact that X

945
00:36:27,660 --> 00:36:29,820
functionality should exist in order to

946
00:36:29,820 --> 00:36:31,859
achieve some larger business objective

947
00:36:31,859 --> 00:36:34,140
and this is a an assumed risk that

948
00:36:34,140 --> 00:36:36,119
they're taking in order to achieve this

949
00:36:36,119 --> 00:36:38,520
business objective but what happens if a

950
00:36:38,520 --> 00:36:39,900
organization in this case let's say

951
00:36:39,900 --> 00:36:42,960
Microsoft and the team's system design

952
00:36:42,960 --> 00:36:44,820
folks they conducted all their threat

953
00:36:44,820 --> 00:36:47,700
models and over time a series of

954
00:36:47,700 --> 00:36:50,099
decisions were made around how teams

955
00:36:50,099 --> 00:36:52,320
messages should be delivered who we want

956
00:36:52,320 --> 00:36:55,260
teams messages to be delivered to and

957
00:36:55,260 --> 00:36:57,780
each of these kind of uh maybe business

958
00:36:57,780 --> 00:37:00,240
decisions they made they took some small

959
00:37:00,240 --> 00:37:02,700
amount of assumed risk and pursuit of

960
00:37:02,700 --> 00:37:04,380
this business objective but they didn't

961
00:37:04,380 --> 00:37:05,880
think about how someone could chain

962
00:37:05,880 --> 00:37:07,680
together let's say a series of this

963
00:37:07,680 --> 00:37:09,900
lower assumed risks into potentially

964
00:37:09,900 --> 00:37:13,079
something that is uh more severe so I

965
00:37:13,079 --> 00:37:15,300
think about if you're whether you're uh

966
00:37:15,300 --> 00:37:17,220
running a cyber security for an

967
00:37:17,220 --> 00:37:19,440
organization or you're looking for

968
00:37:19,440 --> 00:37:21,240
vulnerabilities yourself maybe think

969
00:37:21,240 --> 00:37:23,880
about not like a vulnerability class

970
00:37:23,880 --> 00:37:25,560
like xss or something but think about

971
00:37:25,560 --> 00:37:27,780
how we can leverage basic system design

972
00:37:27,780 --> 00:37:31,099
functionality for our benefit

973
00:37:31,680 --> 00:37:33,780
um finally I included a link to my

974
00:37:33,780 --> 00:37:35,640
Twitter as well if you have any uh

975
00:37:35,640 --> 00:37:37,260
questions following up I'm not sure if

976
00:37:37,260 --> 00:37:39,660
we have uh time for questions we have

977
00:37:39,660 --> 00:37:40,740
time for questions now so I'll answer

978
00:37:40,740 --> 00:37:43,079
questions uh the two so I'm on Twitter

979
00:37:43,079 --> 00:37:44,720
you can also check out my website

980
00:37:44,720 --> 00:37:47,099
bobbyarsek.com where I Chronicle my

981
00:37:47,099 --> 00:37:50,339
research and podcasts Etc uh the QR code

982
00:37:50,339 --> 00:37:52,320
on the left is a link to my website and

983
00:37:52,320 --> 00:37:54,240
the QR code on the right is a link to

984
00:37:54,240 --> 00:37:56,579
the GitHub repository that contains all

985
00:37:56,579 --> 00:37:59,220
the source code for my python C2 that

986
00:37:59,220 --> 00:38:01,140
was utilized for this as well as the

987
00:38:01,140 --> 00:38:03,839
Powershell Stager and I include a

988
00:38:03,839 --> 00:38:05,400
documentation on there as well as how

989
00:38:05,400 --> 00:38:07,260
you can go ahead and replicate this uh

990
00:38:07,260 --> 00:38:09,839
entire attack chain and as soon as this

991
00:38:09,839 --> 00:38:11,579
research did come out I did receive

992
00:38:11,579 --> 00:38:13,320
several Twitter DMS from different

993
00:38:13,320 --> 00:38:16,079
offsec and red teamers who were asking

994
00:38:16,079 --> 00:38:18,300
questions about how to kind of replicate

995
00:38:18,300 --> 00:38:19,980
the attack chain for their own

996
00:38:19,980 --> 00:38:21,720
operations so if you have any questions

997
00:38:21,720 --> 00:38:24,180
feel free to DM me thank you so much for

998
00:38:24,180 --> 00:38:25,680
giving me the opportunity to speak and

999
00:38:25,680 --> 00:38:26,940
I'm happy to answer any questions you

1000
00:38:26,940 --> 00:38:29,180
may have

1001
00:38:32,099 --> 00:38:35,099
foreign

1002
00:38:38,280 --> 00:38:40,859
were there any difference between the

1003
00:38:40,859 --> 00:38:44,160
web version of Microsoft teams and the

1004
00:38:44,160 --> 00:38:47,339
desktop version so where the experiments

1005
00:38:47,339 --> 00:38:50,220
ran on the desktop version or the web

1006
00:38:50,220 --> 00:38:51,060
one

1007
00:38:51,060 --> 00:38:52,619
yeah so I actually

1008
00:38:52,619 --> 00:38:55,560
um leveraged the web version to conduct

1009
00:38:55,560 --> 00:38:57,900
kind of those out of bound lookups of

1010
00:38:57,900 --> 00:39:00,240
GIF URLs from Skype infrastructure

1011
00:39:00,240 --> 00:39:02,160
because the queer clearest way to

1012
00:39:02,160 --> 00:39:03,839
quickly debug if those requests were

1013
00:39:03,839 --> 00:39:05,280
being sent were from the web version

1014
00:39:05,280 --> 00:39:07,320
obviously the web version doesn't have

1015
00:39:07,320 --> 00:39:10,020
kind of those I guess plain text logs

1016
00:39:10,020 --> 00:39:13,020
stored locally on a user's machine but

1017
00:39:13,020 --> 00:39:15,119
the same auth tokens are being utilized

1018
00:39:15,119 --> 00:39:17,099
with the desktop applications as the web

1019
00:39:17,099 --> 00:39:19,859
version the same Json payloads and

1020
00:39:19,859 --> 00:39:21,599
message deliveries exactly the same

1021
00:39:21,599 --> 00:39:24,119
obviously the team's desktop application

1022
00:39:24,119 --> 00:39:27,420
is electron based so really the same

1023
00:39:27,420 --> 00:39:29,880
functionality is there minus kind of the

1024
00:39:29,880 --> 00:39:31,920
plain text storing of the the team's

1025
00:39:31,920 --> 00:39:33,599
message logs

1026
00:39:33,599 --> 00:39:34,940
sure

1027
00:39:34,940 --> 00:39:37,440
since it comes from the same

1028
00:39:37,440 --> 00:39:40,380
infrastructure from from Skype does that

1029
00:39:40,380 --> 00:39:44,880
mean that Skype has the same issues

1030
00:39:44,880 --> 00:39:48,000
yes I can exploit these issues on Skype

1031
00:39:48,000 --> 00:39:48,720
too

1032
00:39:48,720 --> 00:39:50,040
yeah so

1033
00:39:50,040 --> 00:39:52,079
like Microsoft of the years has a habit

1034
00:39:52,079 --> 00:39:53,880
of kind of taking a hodgepodge of

1035
00:39:53,880 --> 00:39:56,820
Acquisitions and sort of turning it into

1036
00:39:56,820 --> 00:39:59,700
larger system design so if you try and

1037
00:39:59,700 --> 00:40:02,280
open like Skype for business now on your

1038
00:40:02,280 --> 00:40:03,599
machine it doesn't really like the

1039
00:40:03,599 --> 00:40:05,160
application exists but it then just

1040
00:40:05,160 --> 00:40:07,440
redirects you to Microsoft teams so

1041
00:40:07,440 --> 00:40:10,140
there really is no truly like Skype in

1042
00:40:10,140 --> 00:40:12,180
uh or Skype for business anymore they're

1043
00:40:12,180 --> 00:40:14,099
trying to migrate everyone to teams so

1044
00:40:14,099 --> 00:40:15,900
the Skype infrastructure still exists

1045
00:40:15,900 --> 00:40:18,420
underneath but the I guess the UI and

1046
00:40:18,420 --> 00:40:20,760
from the user perspective it's all uh

1047
00:40:20,760 --> 00:40:22,320
teams so it's this mishmash of

1048
00:40:22,320 --> 00:40:26,099
SharePoint teams Skype um yeah okay okay

1049
00:40:26,099 --> 00:40:27,839
thank you sure

1050
00:40:27,839 --> 00:40:30,119
maybe just more of a general question so

1051
00:40:30,119 --> 00:40:31,920
how frustrating was it for you to get

1052
00:40:31,920 --> 00:40:34,980
such a response after that amazing work

1053
00:40:34,980 --> 00:40:38,220
I mean it must be so frustrating it's

1054
00:40:38,220 --> 00:40:40,140
funny you say that because uh one of the

1055
00:40:40,140 --> 00:40:41,640
interesting parts that I didn't actually

1056
00:40:41,640 --> 00:40:44,579
cover in the slides was uh I kind of

1057
00:40:44,579 --> 00:40:46,500
submitted these three larger reports

1058
00:40:46,500 --> 00:40:48,720
around all this research I had done and

1059
00:40:48,720 --> 00:40:50,940
then as like a a five ten minute like

1060
00:40:50,940 --> 00:40:53,700
one-off I submitted another kind of uh

1061
00:40:53,700 --> 00:40:55,680
attachment spoofing vulnerability in

1062
00:40:55,680 --> 00:40:57,780
another part of Microsoft teams which

1063
00:40:57,780 --> 00:40:59,339
was essentially identical to the other

1064
00:40:59,339 --> 00:41:01,619
three reports I had submitted and you

1065
00:41:01,619 --> 00:41:03,359
know mimics the content in these slides

1066
00:41:03,359 --> 00:41:05,760
and within like seven days they paid out

1067
00:41:05,760 --> 00:41:07,740
like the highest severity three thousand

1068
00:41:07,740 --> 00:41:09,540
dollar Bounty for that report but then

1069
00:41:09,540 --> 00:41:10,920
the other three they didn't see any

1070
00:41:10,920 --> 00:41:12,540
issue with them or the boundaries being

1071
00:41:12,540 --> 00:41:14,700
bypassed so the whole thing never made

1072
00:41:14,700 --> 00:41:16,859
much sense to me it's not a surprise to

1073
00:41:16,859 --> 00:41:18,839
me at the Apple research as well I

1074
00:41:18,839 --> 00:41:20,460
reported uh essentially my Apple

1075
00:41:20,460 --> 00:41:22,380
research that Brian Krebs had covered

1076
00:41:22,380 --> 00:41:25,200
was I discovered a stored xss in an

1077
00:41:25,200 --> 00:41:27,240
Apple Air tag so anyone who tapped their

1078
00:41:27,240 --> 00:41:28,740
phone to an air tag would have

1079
00:41:28,740 --> 00:41:30,480
immediately be victimized because a link

1080
00:41:30,480 --> 00:41:32,460
would pop up on their computer or on the

1081
00:41:32,460 --> 00:41:34,680
rather their phone that would be a

1082
00:41:34,680 --> 00:41:36,060
malicious one even though they're just

1083
00:41:36,060 --> 00:41:38,099
tapping a standard Apple Air tag and I

1084
00:41:38,099 --> 00:41:40,020
reported that to Apple and they

1085
00:41:40,020 --> 00:41:41,520
essentially didn't respond at all and

1086
00:41:41,520 --> 00:41:43,200
just ignored me for 90 days which is why

1087
00:41:43,200 --> 00:41:45,240
I went public for it so I'm constantly

1088
00:41:45,240 --> 00:41:47,040
trying to push for kind of that 90-day

1089
00:41:47,040 --> 00:41:49,020
public disclosure I'm really not all

1090
00:41:49,020 --> 00:41:51,000
that interested in kind of the monetary

1091
00:41:51,000 --> 00:41:52,800
output of the research I more care about

1092
00:41:52,800 --> 00:41:54,839
being able to share you know interesting

1093
00:41:54,839 --> 00:41:57,119
research with folks like you so it

1094
00:41:57,119 --> 00:41:58,920
wasn't a surprise for sure it's always I

1095
00:41:58,920 --> 00:42:00,060
guess a little frustrating when they

1096
00:42:00,060 --> 00:42:02,099
don't pay the proper attention that's

1097
00:42:02,099 --> 00:42:03,780
kind of my goal on Research is to to

1098
00:42:03,780 --> 00:42:05,940
draw more attention uh to kind of how

1099
00:42:05,940 --> 00:42:07,560
organizations handle vulnerability

1100
00:42:07,560 --> 00:42:10,980
reports and vulnerability mitigation and

1101
00:42:10,980 --> 00:42:12,480
I think also you know on their priority

1102
00:42:12,480 --> 00:42:14,460
level In fairness to Microsoft they're

1103
00:42:14,460 --> 00:42:16,320
getting so many reports about high

1104
00:42:16,320 --> 00:42:17,780
severity vulnerabilities all the time

1105
00:42:17,780 --> 00:42:20,280
oftentimes in their own products that

1106
00:42:20,280 --> 00:42:22,680
affect Microsoft themselves and I think

1107
00:42:22,680 --> 00:42:25,740
those vulnerabilities are higher on

1108
00:42:25,740 --> 00:42:28,440
their kind of focus list been something

1109
00:42:28,440 --> 00:42:30,599
that potentially victimizes one of their

1110
00:42:30,599 --> 00:42:33,180
customers leveraging Microsoft product

1111
00:42:33,180 --> 00:42:35,160
so I think it's just the nature of kind

1112
00:42:35,160 --> 00:42:37,680
of how Microsoft run things and I'll add

1113
00:42:37,680 --> 00:42:40,260
also Microsoft kind of runs their

1114
00:42:40,260 --> 00:42:43,380
vulnerability reporting program in quite

1115
00:42:43,380 --> 00:42:46,320
a unique way they're the msrc they don't

1116
00:42:46,320 --> 00:42:48,780
actually dictate if a bounty should be

1117
00:42:48,780 --> 00:42:51,000
paid out if a vulnerability should or

1118
00:42:51,000 --> 00:42:52,920
should not be fixed they're simply

1119
00:42:52,920 --> 00:42:55,140
acting as an intermediary between me and

1120
00:42:55,140 --> 00:42:57,420
the Microsoft teams engineering team so

1121
00:42:57,420 --> 00:42:58,740
they can't even go to the engineering

1122
00:42:58,740 --> 00:43:00,720
team and say you must fix fix this it

1123
00:43:00,720 --> 00:43:02,099
all comes down to the engineering team

1124
00:43:02,099 --> 00:43:03,540
and what they want to do and they're

1125
00:43:03,540 --> 00:43:05,760
simply acting as an intermediary and I

1126
00:43:05,760 --> 00:43:08,700
found out about this from this uh long

1127
00:43:08,700 --> 00:43:10,440
Twitter thread that a Microsoft employee

1128
00:43:10,440 --> 00:43:13,020
posted about about how things worked on

1129
00:43:13,020 --> 00:43:15,660
the inside so just kind of I guess

1130
00:43:15,660 --> 00:43:17,819
behind behind the curtain how it looks

1131
00:43:17,819 --> 00:43:20,040
behind the scenes so

1132
00:43:20,040 --> 00:43:23,339
how much do you spend on This research

1133
00:43:23,339 --> 00:43:26,760
how much time did I spend on it yes

1134
00:43:26,760 --> 00:43:28,560
um so I

1135
00:43:28,560 --> 00:43:30,660
over the years I've kind of observed

1136
00:43:30,660 --> 00:43:32,040
kind of the interesting Behavior around

1137
00:43:32,040 --> 00:43:33,780
this cross-tenant communication the

1138
00:43:33,780 --> 00:43:35,700
gifts I kind of just kept stacking up

1139
00:43:35,700 --> 00:43:37,800
little observations over the years I

1140
00:43:37,800 --> 00:43:39,599
think I started formalizing the research

1141
00:43:39,599 --> 00:43:41,760
last December so I worked on it like

1142
00:43:41,760 --> 00:43:44,760
December through April uh reported it in

1143
00:43:44,760 --> 00:43:46,920
May and June kind of pushed Microsoft

1144
00:43:46,920 --> 00:43:49,740
over the coming 90 days for their

1145
00:43:49,740 --> 00:43:51,839
um to either fix it or have me publicly

1146
00:43:51,839 --> 00:43:54,900
disclose it which I proceeded to do that

1147
00:43:54,900 --> 00:43:57,180
bleeping computer came out in September

1148
00:43:57,180 --> 00:44:00,300
and um I'm here today so I guess uh that

1149
00:44:00,300 --> 00:44:01,800
that's the full timeline the research

1150
00:44:01,800 --> 00:44:04,260
itself I'd say roughly four months did

1151
00:44:04,260 --> 00:44:05,640
you conduct the entirety of This

1152
00:44:05,640 --> 00:44:08,760
research by yourself or did you have

1153
00:44:08,760 --> 00:44:11,460
asked for some help or support or peer

1154
00:44:11,460 --> 00:44:14,400
verification how does like the process

1155
00:44:14,400 --> 00:44:16,200
with other people work when doing

1156
00:44:16,200 --> 00:44:18,000
research like this

1157
00:44:18,000 --> 00:44:19,560
I'm sorry is the question around like

1158
00:44:19,560 --> 00:44:22,140
what did my research process sorry yeah

1159
00:44:22,140 --> 00:44:24,540
what your research process is so like

1160
00:44:24,540 --> 00:44:27,540
what the four months you spend was it

1161
00:44:27,540 --> 00:44:30,180
entirely you working on this did you

1162
00:44:30,180 --> 00:44:33,180
have like peers helping you out like

1163
00:44:33,180 --> 00:44:36,960
I don't know sure yeah I guess uh my

1164
00:44:36,960 --> 00:44:39,839
research uh process is kind of like me

1165
00:44:39,839 --> 00:44:41,940
drawing crazy ideas on my office

1166
00:44:41,940 --> 00:44:44,640
whiteboard uh coming up with some sort

1167
00:44:44,640 --> 00:44:47,700
of uh idea for research uh testing it

1168
00:44:47,700 --> 00:44:49,980
out over a series of uh weeks or months

1169
00:44:49,980 --> 00:44:52,680
uh proceeding to then kind of uh put it

1170
00:44:52,680 --> 00:44:55,140
together in like a basic outline of like

1171
00:44:55,140 --> 00:44:57,720
what a blog post is I then chat with a

1172
00:44:57,720 --> 00:44:59,460
bunch of other you know red team and

1173
00:44:59,460 --> 00:45:01,800
offset uh friends I have sharing kind of

1174
00:45:01,800 --> 00:45:03,720
the draft to the blog post I have like

1175
00:45:03,720 --> 00:45:05,640
ways to improve my research have them

1176
00:45:05,640 --> 00:45:07,920
kind of proofread it over see if they

1177
00:45:07,920 --> 00:45:10,020
can come up with any other ways I can

1178
00:45:10,020 --> 00:45:11,940
leverage this

1179
00:45:11,940 --> 00:45:14,880
um and then from there I'll push out my

1180
00:45:14,880 --> 00:45:16,859
research on my medium blog which is a

1181
00:45:16,859 --> 00:45:20,099
medium.com Bobby rseck and then whatever

1182
00:45:20,099 --> 00:45:22,920
you know press picks it up uh from there

1183
00:45:22,920 --> 00:45:26,339
I I go along with that so okay thank you

1184
00:45:26,339 --> 00:45:27,900
I should say that that collaborative

1185
00:45:27,900 --> 00:45:29,819
research is is a good idea sometimes

1186
00:45:29,819 --> 00:45:32,099
it's just a little crazy to try and get

1187
00:45:32,099 --> 00:45:33,780
someone on board with like Microsoft

1188
00:45:33,780 --> 00:45:36,599
team GIF nonsense until until it's

1189
00:45:36,599 --> 00:45:38,579
formalized into something a bit more uh

1190
00:45:38,579 --> 00:45:40,560
robust I guess

1191
00:45:40,560 --> 00:45:42,359
let's thank again Bob before his nice

1192
00:45:42,359 --> 00:45:44,250
talk

1193
00:45:44,250 --> 00:45:51,559
[Applause]

