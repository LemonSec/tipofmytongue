1
00:00:04,000 --> 00:00:05,520
oh yeah thank you very much um thanks

2
00:00:05,520 --> 00:00:06,720
everyone for having me here this should

3
00:00:06,720 --> 00:00:08,000
be a lot of fun

4
00:00:08,000 --> 00:00:09,920
it's uh you know it's too bad it can't

5
00:00:09,920 --> 00:00:12,080
be in person i'm just closing some stuff

6
00:00:12,080 --> 00:00:13,759
in the background here okay

7
00:00:13,759 --> 00:00:14,960
um so i'm gonna talk to you about

8
00:00:14,960 --> 00:00:17,119
electromagnetic fault injection on

9
00:00:17,119 --> 00:00:20,800
practical devices so what really that

10
00:00:20,800 --> 00:00:23,439
means is we're going to look at

11
00:00:23,439 --> 00:00:25,039
electromagnetic fault injection and how

12
00:00:25,039 --> 00:00:25,920
it can work

13
00:00:25,920 --> 00:00:28,960
for actually working with like if

14
00:00:28,960 --> 00:00:32,159
if you want to look at where does this

15
00:00:32,159 --> 00:00:33,200
work in real life

16
00:00:33,200 --> 00:00:35,280
not just on theory um what are some

17
00:00:35,280 --> 00:00:36,559
examples of that i'm going to work

18
00:00:36,559 --> 00:00:38,239
through some some examples i've done

19
00:00:38,239 --> 00:00:38,960
this on

20
00:00:38,960 --> 00:00:41,040
and i'm trying to use things that i've

21
00:00:41,040 --> 00:00:42,640
sort of documented

22
00:00:42,640 --> 00:00:44,239
at least a little bit some of them

23
00:00:44,239 --> 00:00:46,640
fairly well so you can actually dig into

24
00:00:46,640 --> 00:00:48,239
a lot more detail so this talk is going

25
00:00:48,239 --> 00:00:48,640
to be

26
00:00:48,640 --> 00:00:50,079
you know a pretty quick high level

27
00:00:50,079 --> 00:00:52,320
overview of it um but hopefully it gives

28
00:00:52,320 --> 00:00:53,280
you some sort of

29
00:00:53,280 --> 00:00:55,440
ideas for how you can play with uh fault

30
00:00:55,440 --> 00:00:57,600
injection in general and electromagnetic

31
00:00:57,600 --> 00:01:02,320
specifically um so

32
00:01:02,320 --> 00:01:04,400
okay let's get that so i'm here by the

33
00:01:04,400 --> 00:01:06,479
way you know so we're we're all

34
00:01:06,479 --> 00:01:07,920
or i don't know if everyone there is

35
00:01:07,920 --> 00:01:09,280
remote but at least i assume the

36
00:01:09,280 --> 00:01:10,799
majority are

37
00:01:10,799 --> 00:01:13,439
i'm on the east coast of canada uh so

38
00:01:13,439 --> 00:01:14,080
there's you know

39
00:01:14,080 --> 00:01:16,240
not a ton of tech around here uh but

40
00:01:16,240 --> 00:01:17,759
it's sort of a nice place to live

41
00:01:17,759 --> 00:01:19,680
um you know look something like that

42
00:01:19,680 --> 00:01:21,360
until recently it's starting to get a

43
00:01:21,360 --> 00:01:22,640
bit into winter now

44
00:01:22,640 --> 00:01:25,040
um over here what i'm doing is i've been

45
00:01:25,040 --> 00:01:26,080
working on this open source

46
00:01:26,080 --> 00:01:28,560
project chip whisperer um i've been

47
00:01:28,560 --> 00:01:29,200
involved in

48
00:01:29,200 --> 00:01:31,520
academia uh for a while this is kind of

49
00:01:31,520 --> 00:01:33,360
how chip whispers spawn out

50
00:01:33,360 --> 00:01:34,880
um so i'm still involved in that right

51
00:01:34,880 --> 00:01:37,439
now at dalhousie the local university

52
00:01:37,439 --> 00:01:40,240
as well as um trying to develop tools

53
00:01:40,240 --> 00:01:41,680
and stuff like that

54
00:01:41,680 --> 00:01:43,680
to support the whole open source um

55
00:01:43,680 --> 00:01:45,360
ecosystem

56
00:01:45,360 --> 00:01:47,280
and actually so i you know normally

57
00:01:47,280 --> 00:01:48,560
would be really nice to be in

58
00:01:48,560 --> 00:01:51,439
torino itself i've been close to there

59
00:01:51,439 --> 00:01:52,079
before

60
00:01:52,079 --> 00:01:54,640
so for people in italy i probably

61
00:01:54,640 --> 00:01:56,000
recognize ivorya so

62
00:01:56,000 --> 00:01:57,920
there's a few months i lived in raqqa

63
00:01:57,920 --> 00:02:00,000
prior um so i've been up

64
00:02:00,000 --> 00:02:02,159
that way at least so you can imagine

65
00:02:02,159 --> 00:02:04,240
this photo smells very good for anyone

66
00:02:04,240 --> 00:02:05,200
who hasn't been

67
00:02:05,200 --> 00:02:08,000
uh to this giant orange fight that

68
00:02:08,000 --> 00:02:09,520
happens in ivory i assume

69
00:02:09,520 --> 00:02:11,520
i don't know if it happened this year um

70
00:02:11,520 --> 00:02:13,120
that i think is still going on

71
00:02:13,120 --> 00:02:16,560
generally pre-coped times all right so

72
00:02:16,560 --> 00:02:19,200
back you know from from that on to the

73
00:02:19,200 --> 00:02:20,720
tech stuff um so

74
00:02:20,720 --> 00:02:22,239
really quickly fault injection if you

75
00:02:22,239 --> 00:02:24,560
haven't seen it before

76
00:02:24,560 --> 00:02:28,239
what is it right so fault injection um

77
00:02:28,239 --> 00:02:31,280
is some way that we can bypass

78
00:02:31,280 --> 00:02:34,239
security we can accomplish interesting

79
00:02:34,239 --> 00:02:36,319
things effectively on embedded systems

80
00:02:36,319 --> 00:02:39,440
and why this works so well is

81
00:02:39,440 --> 00:02:43,040
that if you imagine a um embedded system

82
00:02:43,040 --> 00:02:44,959
like this that has like an image so you

83
00:02:44,959 --> 00:02:45,519
know say

84
00:02:45,519 --> 00:02:47,920
it's it's uh whatever car ecu trying to

85
00:02:47,920 --> 00:02:49,440
boot an image

86
00:02:49,440 --> 00:02:51,519
um and so we have this pointer to the

87
00:02:51,519 --> 00:02:53,360
image and you need to check okay should

88
00:02:53,360 --> 00:02:54,959
i actually boot this image

89
00:02:54,959 --> 00:02:56,640
um so you have some function call like

90
00:02:56,640 --> 00:02:58,560
this and it says signature okay

91
00:02:58,560 --> 00:03:02,640
image right equals fail um so if that

92
00:03:02,640 --> 00:03:04,319
fails then it just goes into this

93
00:03:04,319 --> 00:03:05,599
infinite loop

94
00:03:05,599 --> 00:03:07,519
right and then the rest of it loads the

95
00:03:07,519 --> 00:03:08,640
image um here

96
00:03:08,640 --> 00:03:12,000
so um what fault injection is trying to

97
00:03:12,000 --> 00:03:14,159
do is actually bypass

98
00:03:14,159 --> 00:03:16,640
this or either so in this case what

99
00:03:16,640 --> 00:03:18,239
fault injection could do right is this

100
00:03:18,239 --> 00:03:20,239
loop if you were to jump out of it it's

101
00:03:20,239 --> 00:03:21,760
actually going to execute the rest of

102
00:03:21,760 --> 00:03:22,560
this um

103
00:03:22,560 --> 00:03:25,280
and let's actually show you i don't have

104
00:03:25,280 --> 00:03:26,319
this on a slide

105
00:03:26,319 --> 00:03:29,519
but let's just do a little

106
00:03:29,519 --> 00:03:32,560
demo here and so what i'm gonna

107
00:03:32,560 --> 00:03:36,640
do just clean up this slide a bit

108
00:03:36,640 --> 00:03:38,159
okay so this is pretty fun if you're

109
00:03:38,159 --> 00:03:40,080
kind of interested in this stuff

110
00:03:40,080 --> 00:03:43,920
um there's this uh compiler explorer

111
00:03:43,920 --> 00:03:45,280
website that you might already know

112
00:03:45,280 --> 00:03:46,239
about

113
00:03:46,239 --> 00:03:49,040
but let's say you know how how does that

114
00:03:49,040 --> 00:03:49,840
code

115
00:03:49,840 --> 00:03:52,319
actually achieve a fault injection right

116
00:03:52,319 --> 00:03:54,080
so if i put some code here

117
00:03:54,080 --> 00:03:57,680
right so if i say you know if signature

118
00:03:57,680 --> 00:04:01,599
okay image um equals

119
00:04:01,599 --> 00:04:04,959
zero right let's just make our

120
00:04:04,959 --> 00:04:06,560
our image so i'm just gonna put some

121
00:04:06,560 --> 00:04:08,080
sort of garbage code that was just like

122
00:04:08,080 --> 00:04:09,360
on the slides though

123
00:04:09,360 --> 00:04:12,480
right we go into an infinite loop

124
00:04:12,480 --> 00:04:15,760
otherwise we call do boot

125
00:04:15,760 --> 00:04:18,560
um and let's see if it's gonna complain

126
00:04:18,560 --> 00:04:20,880
that

127
00:04:22,400 --> 00:04:25,040
so it just it's complaining because i

128
00:04:25,040 --> 00:04:26,240
didn't define these

129
00:04:26,240 --> 00:04:29,600
so i think it'll it'll just make

130
00:04:29,600 --> 00:04:32,000
external references if we do this

131
00:04:32,000 --> 00:04:33,440
um and so what i kind of want to show

132
00:04:33,440 --> 00:04:35,440
you here so this is going to be some arm

133
00:04:35,440 --> 00:04:38,400
assembly code

134
00:04:40,840 --> 00:04:45,039
oops image

135
00:04:46,400 --> 00:04:48,960
we're doing live uh live debugging here

136
00:04:48,960 --> 00:04:50,960
makes it more interesting okay

137
00:04:50,960 --> 00:04:53,840
so that should work

138
00:04:54,160 --> 00:04:57,360
um oh this needs to return and there we

139
00:04:57,360 --> 00:04:58,000
go

140
00:04:58,000 --> 00:04:59,919
um so there's our code so what was i

141
00:04:59,919 --> 00:05:01,280
trying to show you with this

142
00:05:01,280 --> 00:05:04,639
all this stuff um can i make this bigger

143
00:05:04,639 --> 00:05:07,120
this is as big as it gets sorry um so

144
00:05:07,120 --> 00:05:08,240
you can you know you can try this

145
00:05:08,240 --> 00:05:10,320
yourself so you can go to those websites

146
00:05:10,320 --> 00:05:11,840
you can throw in some code and what

147
00:05:11,840 --> 00:05:13,759
you'll see is that there's basically a

148
00:05:13,759 --> 00:05:16,160
compare operation here

149
00:05:16,160 --> 00:05:18,160
right and if you look at how it's

150
00:05:18,160 --> 00:05:19,280
generating this code

151
00:05:19,280 --> 00:05:21,840
it's put a branch right here so there's

152
00:05:21,840 --> 00:05:23,360
a branch that's just

153
00:05:23,360 --> 00:05:24,880
that's just sitting in this loop this

154
00:05:24,880 --> 00:05:27,199
loop that's jumping to l3

155
00:05:27,199 --> 00:05:30,800
right and this is exactly the same so

156
00:05:30,800 --> 00:05:33,840
if you were here and you suddenly go

157
00:05:33,840 --> 00:05:36,000
here the code executes as if that

158
00:05:36,000 --> 00:05:38,240
comparison passed right so

159
00:05:38,240 --> 00:05:40,960
there's no there's no super fancy attack

160
00:05:40,960 --> 00:05:41,280
here

161
00:05:41,280 --> 00:05:44,320
needed um and you know this might not be

162
00:05:44,320 --> 00:05:45,199
such an

163
00:05:45,199 --> 00:05:47,039
obvious well one right if you just call

164
00:05:47,039 --> 00:05:49,199
like exit or something like that

165
00:05:49,199 --> 00:05:51,280
um that's not fine here um that might

166
00:05:51,280 --> 00:05:52,800
just spin into a while loop so that's

167
00:05:52,800 --> 00:05:54,000
the kind of interesting thing with fault

168
00:05:54,000 --> 00:05:55,360
injection is that

169
00:05:55,360 --> 00:05:57,680
it can be very powerful so in this case

170
00:05:57,680 --> 00:05:59,520
we didn't need to worry about the image

171
00:05:59,520 --> 00:06:01,039
we didn't need to worry about like

172
00:06:01,039 --> 00:06:02,319
you know breaking the encryption

173
00:06:02,319 --> 00:06:04,560
anything like that um we just

174
00:06:04,560 --> 00:06:07,120
kind of skip past excuse me skip past

175
00:06:07,120 --> 00:06:08,800
that while loop and you can see it it's

176
00:06:08,800 --> 00:06:10,000
going to be pretty easy because it's

177
00:06:10,000 --> 00:06:11,520
just like a loop that

178
00:06:11,520 --> 00:06:13,919
if if it jumps out of that loop so if it

179
00:06:13,919 --> 00:06:15,759
doesn't execute the branch then it's

180
00:06:15,759 --> 00:06:17,919
all over um there's more complex stuff

181
00:06:17,919 --> 00:06:19,360
we can do but that's kind of the basic

182
00:06:19,360 --> 00:06:21,600
idea

183
00:06:21,600 --> 00:06:23,919
and to do this what i'm going to do is

184
00:06:23,919 --> 00:06:25,520
i'm going to use

185
00:06:25,520 --> 00:06:28,080
a strong magnetic field so we're going

186
00:06:28,080 --> 00:06:29,440
to do this with something called

187
00:06:29,440 --> 00:06:30,960
electromagnetic fault injection

188
00:06:30,960 --> 00:06:32,560
so there's a few ways of injecting

189
00:06:32,560 --> 00:06:34,960
faults i'll show you a few after here

190
00:06:34,960 --> 00:06:36,240
too as well

191
00:06:36,240 --> 00:06:38,720
but the basic idea of of this way is

192
00:06:38,720 --> 00:06:39,759
that we have

193
00:06:39,759 --> 00:06:42,319
a coil you pass a strong pulse through

194
00:06:42,319 --> 00:06:43,280
the coil

195
00:06:43,280 --> 00:06:45,440
um you know and if i have a target chip

196
00:06:45,440 --> 00:06:46,400
here

197
00:06:46,400 --> 00:06:49,759
right let's just start a chip um

198
00:06:49,759 --> 00:06:51,759
this magnetic field is going to induce

199
00:06:51,759 --> 00:06:53,440
voltages onto the die

200
00:06:53,440 --> 00:06:55,199
itself and these voltages are going to

201
00:06:55,199 --> 00:06:56,960
affect nodes and things like that on the

202
00:06:56,960 --> 00:06:57,680
check

203
00:06:57,680 --> 00:06:59,520
um so it's a pretty simple idea but it

204
00:06:59,520 --> 00:07:00,880
actually works pretty well in

205
00:07:00,880 --> 00:07:03,599
uh in practice right and so when i say a

206
00:07:03,599 --> 00:07:04,160
coil

207
00:07:04,160 --> 00:07:05,919
it's something like this so these

208
00:07:05,919 --> 00:07:07,360
ferrites right you can

209
00:07:07,360 --> 00:07:09,440
um get and then you can just wrap a few

210
00:07:09,440 --> 00:07:10,880
turns of coil around it

211
00:07:10,880 --> 00:07:13,199
these are even like off the shelf right

212
00:07:13,199 --> 00:07:14,560
inductors designed for

213
00:07:14,560 --> 00:07:17,039
use in electronics projects but

214
00:07:17,039 --> 00:07:18,400
something like that actually works

215
00:07:18,400 --> 00:07:19,520
pretty well as an

216
00:07:19,520 --> 00:07:21,280
example coil so there's quite a few

217
00:07:21,280 --> 00:07:23,120
examples out there um

218
00:07:23,120 --> 00:07:24,639
the end goal is you want to drive a

219
00:07:24,639 --> 00:07:26,400
bunch of current through this coil to

220
00:07:26,400 --> 00:07:29,840
generate a strong pulse

221
00:07:29,840 --> 00:07:31,360
you can do pretty similar things with

222
00:07:31,360 --> 00:07:32,960
like a piezo lighter

223
00:07:32,960 --> 00:07:36,160
um so i played around with these before

224
00:07:36,160 --> 00:07:37,680
for uh just you know

225
00:07:37,680 --> 00:07:39,280
doing really simple demos but then

226
00:07:39,280 --> 00:07:41,360
someone's actually um shown so there's a

227
00:07:41,360 --> 00:07:42,639
nice blog post showing

228
00:07:42,639 --> 00:07:45,039
using these um on an android phone so

229
00:07:45,039 --> 00:07:46,160
this is not

230
00:07:46,160 --> 00:07:48,000
you know just because it's a cheap tool

231
00:07:48,000 --> 00:07:49,840
doesn't necessarily mean

232
00:07:49,840 --> 00:07:53,280
um it's actually you know not useful in

233
00:07:53,280 --> 00:07:54,160
real life

234
00:07:54,160 --> 00:07:55,840
and it really comes back down to like

235
00:07:55,840 --> 00:07:57,919
you know this kind of idea that when

236
00:07:57,919 --> 00:07:58,319
things

237
00:07:58,319 --> 00:08:01,120
fail you go into this safe state is

238
00:08:01,120 --> 00:08:02,240
pretty common

239
00:08:02,240 --> 00:08:04,479
um or if things fail it goes into a

240
00:08:04,479 --> 00:08:06,720
bootloader backup mode right so there's

241
00:08:06,720 --> 00:08:08,000
a lot of devices that

242
00:08:08,000 --> 00:08:10,639
all you need to do is have them fail not

243
00:08:10,639 --> 00:08:12,000
at a super specific time

244
00:08:12,000 --> 00:08:14,400
and for things like that um these low

245
00:08:14,400 --> 00:08:15,360
cost you know

246
00:08:15,360 --> 00:08:17,199
super low cost tools will work and you

247
00:08:17,199 --> 00:08:19,440
can obviously build this up a little

248
00:08:19,440 --> 00:08:20,720
more if you want

249
00:08:20,720 --> 00:08:23,360
um there's some open source designs out

250
00:08:23,360 --> 00:08:25,280
there for emfi tools so

251
00:08:25,280 --> 00:08:28,720
uh what we also have is

252
00:08:28,720 --> 00:08:31,759
there's uh devices like this so this was

253
00:08:31,759 --> 00:08:32,479
from a

254
00:08:32,479 --> 00:08:35,360
presentation and basically what you do

255
00:08:35,360 --> 00:08:37,200
is you have a voltage supply right to a

256
00:08:37,200 --> 00:08:39,440
high voltage supply

257
00:08:39,440 --> 00:08:42,799
this is um then discharged

258
00:08:42,799 --> 00:08:44,000
so this would be like you'd have some

259
00:08:44,000 --> 00:08:46,399
capacitors here you have an electronic

260
00:08:46,399 --> 00:08:47,040
switch

261
00:08:47,040 --> 00:08:49,360
that's then basically really quickly

262
00:08:49,360 --> 00:08:50,320
closing that

263
00:08:50,320 --> 00:08:54,000
um supply to generate a strong pulse

264
00:08:54,000 --> 00:08:56,160
so here they use a capacitor just to

265
00:08:56,160 --> 00:08:57,360
safely couple this

266
00:08:57,360 --> 00:08:59,760
into the inductor so this is kind of a

267
00:08:59,760 --> 00:09:00,720
low-cost

268
00:09:00,720 --> 00:09:04,320
architecture that's actually fairly safe

269
00:09:04,320 --> 00:09:06,720
and i say fairly safe because it does

270
00:09:06,720 --> 00:09:09,279
not have high voltages here all the time

271
00:09:09,279 --> 00:09:10,880
because of this capacitor so this is

272
00:09:10,880 --> 00:09:13,200
really important um

273
00:09:13,200 --> 00:09:15,200
there's other designs you see basically

274
00:09:15,200 --> 00:09:17,440
that that don't have this capacitor here

275
00:09:17,440 --> 00:09:19,360
and put a switch at the bottom side and

276
00:09:19,360 --> 00:09:20,800
the problem here is you always have the

277
00:09:20,800 --> 00:09:22,240
high voltage on that probe that you're

278
00:09:22,240 --> 00:09:22,959
touching

279
00:09:22,959 --> 00:09:25,600
um so if you have you know your device

280
00:09:25,600 --> 00:09:26,080
um

281
00:09:26,080 --> 00:09:27,440
you don't want this to be at high

282
00:09:27,440 --> 00:09:29,440
voltage all the time which which

283
00:09:29,440 --> 00:09:32,800
some designs will do um and it's just

284
00:09:32,800 --> 00:09:33,839
obviously not

285
00:09:33,839 --> 00:09:35,920
great if you're going to be handling it

286
00:09:35,920 --> 00:09:37,440
a fair amount so

287
00:09:37,440 --> 00:09:39,200
it does work though i mean if you have

288
00:09:39,200 --> 00:09:41,519
the safety mechanisms in place um so the

289
00:09:41,519 --> 00:09:42,160
the first

290
00:09:42,160 --> 00:09:44,320
one the first open source emfi tool bad

291
00:09:44,320 --> 00:09:45,519
fit um

292
00:09:45,519 --> 00:09:47,680
kind of use this this method of having a

293
00:09:47,680 --> 00:09:49,279
slightly more dangerous

294
00:09:49,279 --> 00:09:51,519
uh because you had a lot more

295
00:09:51,519 --> 00:09:53,360
flexibility with voltages with pulse

296
00:09:53,360 --> 00:09:54,560
shape and stuff like that

297
00:09:54,560 --> 00:09:57,680
so um there is variations out there

298
00:09:57,680 --> 00:10:00,560
right so i'm going to use my own design

299
00:10:00,560 --> 00:10:02,560
that is a much more expensive

300
00:10:02,560 --> 00:10:04,959
tool that we sort of sold commercial or

301
00:10:04,959 --> 00:10:06,399
sell commercially

302
00:10:06,399 --> 00:10:09,279
and it basically uses a method where you

303
00:10:09,279 --> 00:10:09,680
put

304
00:10:09,680 --> 00:10:12,320
some of the electronics at the what they

305
00:10:12,320 --> 00:10:14,000
call high side drive

306
00:10:14,000 --> 00:10:16,480
so it's a much more complicated way of

307
00:10:16,480 --> 00:10:18,320
generating the pulse it sort of lets you

308
00:10:18,320 --> 00:10:19,920
still be safe so i can

309
00:10:19,920 --> 00:10:22,880
you know if i take this device here um

310
00:10:22,880 --> 00:10:23,600
and i

311
00:10:23,600 --> 00:10:25,279
charge it so then it's generating the

312
00:10:25,279 --> 00:10:27,040
high voltage you can touch that freely

313
00:10:27,040 --> 00:10:28,320
and you can touch it during

314
00:10:28,320 --> 00:10:30,240
um discharge and it's not going to shock

315
00:10:30,240 --> 00:10:32,560
so that's kind of the idea of that

316
00:10:32,560 --> 00:10:35,760
um okay

317
00:10:35,760 --> 00:10:37,120
so the first example i'm going to give

318
00:10:37,120 --> 00:10:38,800
you this was one of the the first things

319
00:10:38,800 --> 00:10:39,519
i looked at

320
00:10:39,519 --> 00:10:42,399
with um using emify and sort of a more

321
00:10:42,399 --> 00:10:43,839
real device

322
00:10:43,839 --> 00:10:47,040
uh was this bitcoin wallet

323
00:10:47,040 --> 00:10:49,519
so um these bitcoin wallets the quick

324
00:10:49,519 --> 00:10:50,959
summary rate is that

325
00:10:50,959 --> 00:10:52,800
you have this hardware wallet that's

326
00:10:52,800 --> 00:10:55,279
trying to protect your private key

327
00:10:55,279 --> 00:10:58,160
um and what was interesting is that they

328
00:10:58,160 --> 00:10:59,920
have they give you a recovery seed right

329
00:10:59,920 --> 00:11:01,920
so the recovery seed is like

330
00:11:01,920 --> 00:11:06,480
you write this down and um if you

331
00:11:06,480 --> 00:11:08,800
lose this physical wallet you have a way

332
00:11:08,800 --> 00:11:09,920
of getting up

333
00:11:09,920 --> 00:11:11,920
getting everything back right so the

334
00:11:11,920 --> 00:11:13,279
recovery seed is

335
00:11:13,279 --> 00:11:15,120
your private key just written in a

336
00:11:15,120 --> 00:11:17,440
different format effectively so it warns

337
00:11:17,440 --> 00:11:18,079
you right that

338
00:11:18,079 --> 00:11:20,800
if someone has this you can get

339
00:11:20,800 --> 00:11:22,800
everything associated with it

340
00:11:22,800 --> 00:11:25,440
um you don't need any other data but

341
00:11:25,440 --> 00:11:27,440
that recovery seed you enter

342
00:11:27,440 --> 00:11:30,800
that seed into the new trezor device

343
00:11:30,800 --> 00:11:33,920
um and this recovers your private key

344
00:11:33,920 --> 00:11:35,120
and then it's like you

345
00:11:35,120 --> 00:11:37,200
have a direct copy so it's like you have

346
00:11:37,200 --> 00:11:39,040
a clone of your old device

347
00:11:39,040 --> 00:11:41,839
that you assume the old devices is dead

348
00:11:41,839 --> 00:11:43,519
so at the time

349
00:11:43,519 --> 00:11:45,360
um when i was looking at this so this is

350
00:11:45,360 --> 00:11:47,680
um changed a bit now

351
00:11:47,680 --> 00:11:50,560
right you could password protect it but

352
00:11:50,560 --> 00:11:52,079
it sort of wasn't um

353
00:11:52,079 --> 00:11:53,839
i think maybe as encouraged like it was

354
00:11:53,839 --> 00:11:55,519
encouraged but a lot of people didn't do

355
00:11:55,519 --> 00:11:56,320
it because

356
00:11:56,320 --> 00:11:58,399
there wasn't a clear threat model where

357
00:11:58,399 --> 00:12:00,240
someone could get this recovery seat out

358
00:12:00,240 --> 00:12:01,680
assuming they had physical access to

359
00:12:01,680 --> 00:12:02,800
your device so

360
00:12:02,800 --> 00:12:06,000
um if you password protected the seed

361
00:12:06,000 --> 00:12:07,519
what it means is that seed

362
00:12:07,519 --> 00:12:09,760
is not enough right you now need a

363
00:12:09,760 --> 00:12:11,360
combination of that seed and your

364
00:12:11,360 --> 00:12:13,200
password to recover from the data

365
00:12:13,200 --> 00:12:16,160
um so anyone who used a password was

366
00:12:16,160 --> 00:12:16,800
fine with

367
00:12:16,800 --> 00:12:20,639
with that and why this was interesting

368
00:12:20,639 --> 00:12:22,560
is if you look inside the trezor there's

369
00:12:22,560 --> 00:12:24,079
basically this microcontroller

370
00:12:24,079 --> 00:12:25,680
here right and this microcontroller is

371
00:12:25,680 --> 00:12:28,079
kind of like right underneath the um

372
00:12:28,079 --> 00:12:32,160
the case um so you had a microcontroller

373
00:12:32,160 --> 00:12:33,760
you had the plastic case

374
00:12:33,760 --> 00:12:37,440
um and this makes it really interesting

375
00:12:37,440 --> 00:12:38,399
for emfi

376
00:12:38,399 --> 00:12:41,600
because uh if we can sort of

377
00:12:41,600 --> 00:12:43,040
attack this device we know the

378
00:12:43,040 --> 00:12:44,959
microcontroller is in this region

379
00:12:44,959 --> 00:12:46,399
right if we can attack this device we

380
00:12:46,399 --> 00:12:49,040
could do that without physically opening

381
00:12:49,040 --> 00:12:49,920
it up so

382
00:12:49,920 --> 00:12:52,399
even if someone put security seals all

383
00:12:52,399 --> 00:12:54,040
over the device and you know

384
00:12:54,040 --> 00:12:55,920
re-encapsulated it or something like

385
00:12:55,920 --> 00:12:58,160
that it was just inspecting it carefully

386
00:12:58,160 --> 00:13:00,800
um potentially we could look for an

387
00:13:00,800 --> 00:13:02,399
attack that could work without needing

388
00:13:02,399 --> 00:13:02,800
to

389
00:13:02,800 --> 00:13:04,320
even open the enclosure which is

390
00:13:04,320 --> 00:13:05,680
interesting right from a practical

391
00:13:05,680 --> 00:13:06,480
aspect

392
00:13:06,480 --> 00:13:08,480
um and again i wanted to talk a little

393
00:13:08,480 --> 00:13:10,480
more about where these attacks can be

394
00:13:10,480 --> 00:13:11,839
found in practical

395
00:13:11,839 --> 00:13:14,720
life right um and the other interesting

396
00:13:14,720 --> 00:13:16,720
thing so trezor's open source which is

397
00:13:16,720 --> 00:13:18,560
um really nice from a security

398
00:13:18,560 --> 00:13:20,560
validation perspective

399
00:13:20,560 --> 00:13:22,720
because you can look through the code

400
00:13:22,720 --> 00:13:24,079
and sort of find issues

401
00:13:24,079 --> 00:13:26,399
even without doing really advanced

402
00:13:26,399 --> 00:13:27,680
attacks and this was a good

403
00:13:27,680 --> 00:13:29,040
a really good example of that a good

404
00:13:29,040 --> 00:13:31,279
example of where open source

405
00:13:31,279 --> 00:13:34,480
um makes this sort of uh validation a

406
00:13:34,480 --> 00:13:35,680
lot easier

407
00:13:35,680 --> 00:13:39,440
right because if you looked at the

408
00:13:39,440 --> 00:13:41,120
flash layout right you had the

409
00:13:41,120 --> 00:13:43,600
bootloader code up here

410
00:13:43,600 --> 00:13:48,000
um and you had this metadata area

411
00:13:48,000 --> 00:13:50,880
up here so this metadata area had the

412
00:13:50,880 --> 00:13:52,720
recovery seeds stored in it because the

413
00:13:52,720 --> 00:13:55,519
device needed to know the recovery scene

414
00:13:55,519 --> 00:13:57,279
and it was just stored so some other

415
00:13:57,279 --> 00:13:58,880
there's a wall without fail talk that

416
00:13:58,880 --> 00:14:00,399
basically found hey this was just

417
00:14:00,399 --> 00:14:02,240
actually stored as strain so it's really

418
00:14:02,240 --> 00:14:03,920
easy to detect it

419
00:14:03,920 --> 00:14:07,040
um there's this other code sort of ahead

420
00:14:07,040 --> 00:14:08,639
of it right so at a if you look at the

421
00:14:08,639 --> 00:14:10,480
addressing here right so this is a lower

422
00:14:10,480 --> 00:14:11,920
address than here

423
00:14:11,920 --> 00:14:14,079
right so it's if we could read if we

424
00:14:14,079 --> 00:14:16,079
could read past an array located

425
00:14:16,079 --> 00:14:18,079
in the bootloader it's just going to

426
00:14:18,079 --> 00:14:19,519
read through everything

427
00:14:19,519 --> 00:14:21,199
right so we read from the bootloader and

428
00:14:21,199 --> 00:14:22,720
we just keep reading we're going to get

429
00:14:22,720 --> 00:14:24,560
that secret date

430
00:14:24,560 --> 00:14:26,480
so what was interesting is looking at

431
00:14:26,480 --> 00:14:28,160
using fault injection

432
00:14:28,160 --> 00:14:32,800
to do that magic read basically right um

433
00:14:32,800 --> 00:14:35,040
and the default injection we're going to

434
00:14:35,040 --> 00:14:36,320
look at is the fact that

435
00:14:36,320 --> 00:14:38,560
in this bootloader code there's some usb

436
00:14:38,560 --> 00:14:39,519
descriptors so

437
00:14:39,519 --> 00:14:42,800
usb descriptors the the very super fast

438
00:14:42,800 --> 00:14:45,839
uh description of the descriptors

439
00:14:45,839 --> 00:14:48,720
is that you have some way of telling the

440
00:14:48,720 --> 00:14:50,240
computer what the heck i just plugged

441
00:14:50,240 --> 00:14:51,519
into this computer

442
00:14:51,519 --> 00:14:54,320
right so you can see there's stuff like

443
00:14:54,320 --> 00:14:55,440
you know vendor id

444
00:14:55,440 --> 00:14:58,320
product id but you also have like

445
00:14:58,320 --> 00:15:00,240
strings right so there's a string that

446
00:15:00,240 --> 00:15:02,560
says hey this is a usb 2.0 hub

447
00:15:02,560 --> 00:15:06,639
um and you also have um stuff like the

448
00:15:06,639 --> 00:15:09,040
um endpoints right so this is how the

449
00:15:09,040 --> 00:15:10,639
device is going to talk to it and things

450
00:15:10,639 --> 00:15:13,199
like that so um we have a few

451
00:15:13,199 --> 00:15:15,920
different uh sort of you know

452
00:15:15,920 --> 00:15:16,880
configuration

453
00:15:16,880 --> 00:15:18,560
blocks that are getting sent from the

454
00:15:18,560 --> 00:15:20,160
device up to the computer

455
00:15:20,160 --> 00:15:21,519
and then the computer knows what you've

456
00:15:21,519 --> 00:15:23,360
plugged in how to talk to it what driver

457
00:15:23,360 --> 00:15:25,600
to load anything like that

458
00:15:25,600 --> 00:15:28,959
um we one of these

459
00:15:28,959 --> 00:15:31,120
descriptors basically so when you you

460
00:15:31,120 --> 00:15:33,120
get a descriptor the computer says hey

461
00:15:33,120 --> 00:15:34,000
please send me

462
00:15:34,000 --> 00:15:36,560
um you know whatever descriptor i want

463
00:15:36,560 --> 00:15:37,839
um and there's some

464
00:15:37,839 --> 00:15:41,360
uh information the host the computer

465
00:15:41,360 --> 00:15:43,519
that is sends down to the device

466
00:15:43,519 --> 00:15:46,000
um of importance part of it is this w

467
00:15:46,000 --> 00:15:47,839
length field so this w length field is

468
00:15:47,839 --> 00:15:49,040
the device saying

469
00:15:49,040 --> 00:15:52,240
hey please return up to up to

470
00:15:52,240 --> 00:15:54,399
you know whatever 100 bytes 500 bytes a

471
00:15:54,399 --> 00:15:55,440
thousand bytes

472
00:15:55,440 --> 00:15:59,279
um and so the idea is that um

473
00:15:59,279 --> 00:16:02,399
the computer can tell the device

474
00:16:02,399 --> 00:16:06,160
i expect up to 1024 you know or however

475
00:16:06,160 --> 00:16:06,880
many bytes

476
00:16:06,880 --> 00:16:10,000
it's capable of handling um

477
00:16:10,000 --> 00:16:11,680
and the device will send up to that

478
00:16:11,680 --> 00:16:12,959
level of data and the idea is the

479
00:16:12,959 --> 00:16:14,399
computer can request you know

480
00:16:14,399 --> 00:16:16,480
at the beginning uh you don't want like

481
00:16:16,480 --> 00:16:17,519
a bad usb

482
00:16:17,519 --> 00:16:19,600
device that has these massive strings to

483
00:16:19,600 --> 00:16:21,440
i guess waste the time and you know usb

484
00:16:21,440 --> 00:16:22,079
spec was

485
00:16:22,079 --> 00:16:23,519
was designed quite a while ago when

486
00:16:23,519 --> 00:16:26,399
there was concerns over memory usage and

487
00:16:26,399 --> 00:16:28,079
the initial speed was pretty slow and

488
00:16:28,079 --> 00:16:29,360
stuff so you had some stuff like that

489
00:16:29,360 --> 00:16:30,079
right that

490
00:16:30,079 --> 00:16:31,839
the host is only going to ask for maybe

491
00:16:31,839 --> 00:16:33,680
the first little bit of the descriptor

492
00:16:33,680 --> 00:16:35,360
to figure out if it even wants to

493
00:16:35,360 --> 00:16:37,120
request the rest of it right so it can

494
00:16:37,120 --> 00:16:38,959
request the first 16 bytes

495
00:16:38,959 --> 00:16:40,720
and later request everything if it

496
00:16:40,720 --> 00:16:42,720
decides like ah yes okay i need the full

497
00:16:42,720 --> 00:16:45,040
string i need the full serial number

498
00:16:45,040 --> 00:16:47,360
um so there's this idea was in the usb

499
00:16:47,360 --> 00:16:48,079
spec so

500
00:16:48,079 --> 00:16:50,959
everybody has to implement it right to

501
00:16:50,959 --> 00:16:51,199
be

502
00:16:51,199 --> 00:16:54,399
a legitimate usb device um

503
00:16:54,399 --> 00:16:56,800
and what this means is that somewhere in

504
00:16:56,800 --> 00:16:59,120
basically every usb stack

505
00:16:59,120 --> 00:17:03,040
is this call and this call

506
00:17:03,040 --> 00:17:05,039
has so this is a bunch of stuff saying

507
00:17:05,039 --> 00:17:07,039
for one specific descriptor right so

508
00:17:07,039 --> 00:17:08,880
it's checking the type

509
00:17:08,880 --> 00:17:11,359
um it's checking some this index

510
00:17:11,359 --> 00:17:12,880
property to figure out is this the right

511
00:17:12,880 --> 00:17:15,039
descriptor that i want to request

512
00:17:15,039 --> 00:17:16,480
so this is the device code by the way

513
00:17:16,480 --> 00:17:17,919
sorry so this is the code running on

514
00:17:17,919 --> 00:17:19,039
your device

515
00:17:19,039 --> 00:17:22,079
um and

516
00:17:22,079 --> 00:17:25,679
it actually has the um

517
00:17:25,679 --> 00:17:28,720
there you go so here's the minimum of um

518
00:17:28,720 --> 00:17:33,679
a length of so one of these is like the

519
00:17:33,679 --> 00:17:37,120
length of the scent data one of them

520
00:17:37,120 --> 00:17:40,720
is the length of the um there's the w

521
00:17:40,720 --> 00:17:41,679
length sorry from the

522
00:17:41,679 --> 00:17:43,919
usb packet one of them is the length of

523
00:17:43,919 --> 00:17:46,400
the data store on the device

524
00:17:46,400 --> 00:17:48,080
and it's just sending back whichever is

525
00:17:48,080 --> 00:17:50,080
shorter right so if the host requested

526
00:17:50,080 --> 00:17:52,240
less data than i have to send

527
00:17:52,240 --> 00:17:54,400
um with less yeah less data than i have

528
00:17:54,400 --> 00:17:55,760
then i'm just going to send back you

529
00:17:55,760 --> 00:17:58,160
know however much data i actually have

530
00:17:58,160 --> 00:18:00,320
or however much data the host uh

531
00:18:00,320 --> 00:18:01,919
requested so whichever is the shorter of

532
00:18:01,919 --> 00:18:03,039
these two i'm going to send back that

533
00:18:03,039 --> 00:18:04,720
much data makes sense right if the host

534
00:18:04,720 --> 00:18:05,360
requests

535
00:18:05,360 --> 00:18:08,080
10 000 bytes and this descriptor's 100

536
00:18:08,080 --> 00:18:09,440
bytes i'm not going to send back 10

537
00:18:09,440 --> 00:18:10,559
thousand

538
00:18:10,559 --> 00:18:12,799
um so where this gets interesting for

539
00:18:12,799 --> 00:18:14,000
fault injection

540
00:18:14,000 --> 00:18:17,840
is if we look back at

541
00:18:17,840 --> 00:18:20,320
everything i just showed you right so

542
00:18:20,320 --> 00:18:21,039
that

543
00:18:21,039 --> 00:18:24,160
quick little assembly code example we

544
00:18:24,160 --> 00:18:25,120
have again

545
00:18:25,120 --> 00:18:28,880
a pretty minimal so there's some pretty

546
00:18:28,880 --> 00:18:30,240
this time it's a lot more detailed but

547
00:18:30,240 --> 00:18:31,760
there's still only a few instructions

548
00:18:31,760 --> 00:18:33,120
that matter right so you can see there's

549
00:18:33,120 --> 00:18:33,919
a compare

550
00:18:33,919 --> 00:18:36,640
of r1 to this fixed value of hex nine

551
00:18:36,640 --> 00:18:37,360
two

552
00:18:37,360 --> 00:18:40,840
um we also have like a

553
00:18:40,840 --> 00:18:44,480
um uh some actual action on the

554
00:18:44,480 --> 00:18:45,760
comparison

555
00:18:45,760 --> 00:18:48,880
right um and what this means

556
00:18:48,880 --> 00:18:51,440
is that if you compare our one to the

557
00:18:51,440 --> 00:18:52,640
the hex value of nine

558
00:18:52,640 --> 00:18:55,600
two um it's either going to overwrite

559
00:18:55,600 --> 00:18:56,880
our 1

560
00:18:56,880 --> 00:19:00,640
with 9 2 if r1 is larger

561
00:19:00,640 --> 00:19:02,480
or it's going to skip that so if r1 is

562
00:19:02,480 --> 00:19:04,640
smaller it's not going to execute this

563
00:19:04,640 --> 00:19:06,080
and it's going to use whatever the value

564
00:19:06,080 --> 00:19:07,679
is in r1

565
00:19:07,679 --> 00:19:09,280
otherwise it's going to use this fix so

566
00:19:09,280 --> 00:19:10,880
in this case the the compiler figured

567
00:19:10,880 --> 00:19:11,600
out hey this

568
00:19:11,600 --> 00:19:13,600
this data i'm sending back has a fixed

569
00:19:13,600 --> 00:19:15,440
length of hex nine two

570
00:19:15,440 --> 00:19:17,600
um so you can imagine that if you never

571
00:19:17,600 --> 00:19:19,760
executed this

572
00:19:19,760 --> 00:19:22,240
instruction or the comparison was done

573
00:19:22,240 --> 00:19:24,320
incorrectly or anything in here really

574
00:19:24,320 --> 00:19:26,080
what's going to happen is that this

575
00:19:26,080 --> 00:19:28,080
value of r1 which is how much data to

576
00:19:28,080 --> 00:19:29,919
send back came from the host

577
00:19:29,919 --> 00:19:31,840
right and the host is the one that

578
00:19:31,840 --> 00:19:33,360
controls

579
00:19:33,360 --> 00:19:35,120
how much data it requests so all of a

580
00:19:35,120 --> 00:19:36,720
sudden

581
00:19:36,720 --> 00:19:39,840
if that code doesn't execute correctly

582
00:19:39,840 --> 00:19:42,400
we have a way that the host computer can

583
00:19:42,400 --> 00:19:42,880
uh

584
00:19:42,880 --> 00:19:46,480
request um this uh

585
00:19:46,480 --> 00:19:48,799
up to you know this ff so it's a 16-bit

586
00:19:48,799 --> 00:19:50,080
field so it can request

587
00:19:50,080 --> 00:19:53,520
65k of data from the device

588
00:19:53,520 --> 00:19:55,840
um so it's open source so this is the

589
00:19:55,840 --> 00:19:57,120
cool thing this is a game where i want

590
00:19:57,120 --> 00:19:58,240
to say like you know if

591
00:19:58,240 --> 00:19:59,840
you start playing with this stuff

592
00:19:59,840 --> 00:20:01,280
there's a lot you can do especially if

593
00:20:01,280 --> 00:20:03,280
you're looking at open source projects

594
00:20:03,280 --> 00:20:06,720
um without even necessarily digging into

595
00:20:06,720 --> 00:20:08,400
uh fault injection just as part of you

596
00:20:08,400 --> 00:20:10,000
know reverse engineering looking at

597
00:20:10,000 --> 00:20:11,760
devices you can find these types of

598
00:20:11,760 --> 00:20:12,799
interesting

599
00:20:12,799 --> 00:20:15,679
um interesting areas or right even if

600
00:20:15,679 --> 00:20:17,679
it's not open source if you had access

601
00:20:17,679 --> 00:20:18,480
to

602
00:20:18,480 --> 00:20:20,720
um the binary to reverse engineer it you

603
00:20:20,720 --> 00:20:22,320
could see these comparisons so you could

604
00:20:22,320 --> 00:20:24,240
kind of do a lot of this work

605
00:20:24,240 --> 00:20:26,640
without having to do necessarily the

606
00:20:26,640 --> 00:20:28,000
fault injection hardware if you're

607
00:20:28,000 --> 00:20:29,360
interested

608
00:20:29,360 --> 00:20:30,799
so in this case what i did is i

609
00:20:30,799 --> 00:20:32,640
basically took the firmware

610
00:20:32,640 --> 00:20:34,720
and i just remove this call right so

611
00:20:34,720 --> 00:20:36,880
even if you only had a binary you just

612
00:20:36,880 --> 00:20:38,559
remove this call

613
00:20:38,559 --> 00:20:41,760
right and all of a sudden it should

614
00:20:41,760 --> 00:20:43,760
accept whatever the the host sent and

615
00:20:43,760 --> 00:20:45,039
that's how we're going to simulate our

616
00:20:45,039 --> 00:20:47,200
fault in direction of step one

617
00:20:47,200 --> 00:20:50,000
and what you can see is that this is

618
00:20:50,000 --> 00:20:51,919
indeed the case

619
00:20:51,919 --> 00:20:54,400
i simulate the fault injection and it

620
00:20:54,400 --> 00:20:56,559
sends back so if i

621
00:20:56,559 --> 00:20:59,440
request 65k of data it does send back

622
00:20:59,440 --> 00:21:01,440
65k of data and the beginning part of

623
00:21:01,440 --> 00:21:02,799
it's the same

624
00:21:02,799 --> 00:21:04,480
what you don't see is later on it just

625
00:21:04,480 --> 00:21:05,840
continues to read from memory and it

626
00:21:05,840 --> 00:21:06,720
returns

627
00:21:06,720 --> 00:21:09,360
all of the private key and stuff and you

628
00:21:09,360 --> 00:21:10,080
can see

629
00:21:10,080 --> 00:21:12,320
so in this case this is like a dump of

630
00:21:12,320 --> 00:21:13,360
um

631
00:21:13,360 --> 00:21:15,360
my memory and somewhere down in here

632
00:21:15,360 --> 00:21:16,880
there's these strings for

633
00:21:16,880 --> 00:21:18,960
whatever this private whatever this

634
00:21:18,960 --> 00:21:20,799
wallet was that i didn't actually store

635
00:21:20,799 --> 00:21:21,440
anything on

636
00:21:21,440 --> 00:21:23,600
so you can't try to steal it don't worry

637
00:21:23,600 --> 00:21:24,720
um

638
00:21:24,720 --> 00:21:26,480
but that you know that's pretty cool so

639
00:21:26,480 --> 00:21:27,840
that's how you could validate this will

640
00:21:27,840 --> 00:21:28,480
work

641
00:21:28,480 --> 00:21:31,039
um actually executing it is more you

642
00:21:31,039 --> 00:21:32,799
know it's a challenging problem but it's

643
00:21:32,799 --> 00:21:34,480
more an engineering problem let's say so

644
00:21:34,480 --> 00:21:36,159
it's a problem of getting all the pieces

645
00:21:36,159 --> 00:21:37,760
to fit together the trigger

646
00:21:37,760 --> 00:21:41,520
to time and stuff like that um so

647
00:21:41,520 --> 00:21:44,960
you can see this sort of holder here um

648
00:21:44,960 --> 00:21:48,240
has a bootloader

649
00:21:48,240 --> 00:21:49,919
for so if you hold down the two buttons

650
00:21:49,919 --> 00:21:52,000
it always goes into boot loader mode

651
00:21:52,000 --> 00:21:53,840
and we want bootloader mode because if

652
00:21:53,840 --> 00:21:55,600
you remember back here

653
00:21:55,600 --> 00:21:58,240
right only the bootloader code right

654
00:21:58,240 --> 00:21:59,440
there

655
00:21:59,440 --> 00:22:02,320
has the usb stack ahead of the data

656
00:22:02,320 --> 00:22:03,280
because we're going to start

657
00:22:03,280 --> 00:22:05,360
at something and just read past it if

658
00:22:05,360 --> 00:22:07,440
you try to run from the application code

659
00:22:07,440 --> 00:22:08,960
it's less interesting because

660
00:22:08,960 --> 00:22:10,720
you know it's just going to read further

661
00:22:10,720 --> 00:22:12,720
into the application so

662
00:22:12,720 --> 00:22:14,159
that's the reason we do the the

663
00:22:14,159 --> 00:22:16,080
bootloader mode

664
00:22:16,080 --> 00:22:19,039
um the emfi tool so this is basically

665
00:22:19,039 --> 00:22:20,240
you know a tip that's

666
00:22:20,240 --> 00:22:24,559
kind of positioned over the ic

667
00:22:24,559 --> 00:22:26,960
and we have some way to trigger it so at

668
00:22:26,960 --> 00:22:29,520
the time i'm using a total phase beagle

669
00:22:29,520 --> 00:22:30,799
480

670
00:22:30,799 --> 00:22:33,039
um and this basically is a hardware

671
00:22:33,039 --> 00:22:33,840
trigger on

672
00:22:33,840 --> 00:22:36,080
physical layer packets so i'm triggering

673
00:22:36,080 --> 00:22:36,960
on

674
00:22:36,960 --> 00:22:38,799
physically you know if you were to look

675
00:22:38,799 --> 00:22:40,320
at the usb wire

676
00:22:40,320 --> 00:22:43,520
um what you can see is this

677
00:22:43,520 --> 00:22:47,280
sequence of data uh yeah yeah this data

678
00:22:47,280 --> 00:22:48,320
packet here sorry

679
00:22:48,320 --> 00:22:51,039
um so there's basically like some data

680
00:22:51,039 --> 00:22:52,880
that says hey i'm gonna request

681
00:22:52,880 --> 00:22:55,760
the um that descriptor and i'm going to

682
00:22:55,760 --> 00:22:57,360
trigger on so in this case

683
00:22:57,360 --> 00:22:59,600
the c021 i'm going to trigger on that

684
00:22:59,600 --> 00:23:01,760
request going over the wire

685
00:23:01,760 --> 00:23:03,360
and this is assumed to be pretty well

686
00:23:03,360 --> 00:23:04,960
synchronized with the target device in

687
00:23:04,960 --> 00:23:06,640
reality there's a lot of jitter so it

688
00:23:06,640 --> 00:23:07,280
actually

689
00:23:07,280 --> 00:23:09,200
takes quite some time to hit just that

690
00:23:09,200 --> 00:23:11,280
right point because you can imagine if

691
00:23:11,280 --> 00:23:12,799
we look at this code

692
00:23:12,799 --> 00:23:14,720
right it's it has to hit that exact

693
00:23:14,720 --> 00:23:16,559
point right if it doesn't hit those few

694
00:23:16,559 --> 00:23:18,640
instructions it's not going to work

695
00:23:18,640 --> 00:23:21,360
so in practice i basically trigger from

696
00:23:21,360 --> 00:23:22,080
the usb

697
00:23:22,080 --> 00:23:24,080
packet and say you know just keep trying

698
00:23:24,080 --> 00:23:26,159
until it it works

699
00:23:26,159 --> 00:23:28,720
um yeah so and that will that basically

700
00:23:28,720 --> 00:23:30,240
with doing this it will return

701
00:23:30,240 --> 00:23:32,960
all of the data so there's some longer

702
00:23:32,960 --> 00:23:34,320
talks that go through the details of

703
00:23:34,320 --> 00:23:35,760
this in a paper

704
00:23:35,760 --> 00:23:38,880
also on that now that same thing we can

705
00:23:38,880 --> 00:23:40,640
actually apply to other interesting

706
00:23:40,640 --> 00:23:41,440
devices so

707
00:23:41,440 --> 00:23:43,919
um and i was really lucky to be invited

708
00:23:43,919 --> 00:23:45,760
here in part because um

709
00:23:45,760 --> 00:23:48,960
of these really cool devices

710
00:23:48,960 --> 00:23:50,080
that are these open source

711
00:23:50,080 --> 00:23:51,840
authentication tokens so you probably

712
00:23:51,840 --> 00:23:53,360
know the closed source ones

713
00:23:53,360 --> 00:23:55,440
um where you can't really inspect it so

714
00:23:55,440 --> 00:23:56,799
these are pretty interesting again

715
00:23:56,799 --> 00:23:58,240
because you can inspect

716
00:23:58,240 --> 00:23:59,760
what it's actually running and you can

717
00:23:59,760 --> 00:24:02,000
validate you know is this an issue

718
00:24:02,000 --> 00:24:04,159
um no they can fix it and things like

719
00:24:04,159 --> 00:24:06,480
that so the nice side of trusting open

720
00:24:06,480 --> 00:24:07,919
source for security

721
00:24:07,919 --> 00:24:09,440
is having this type of validation not

722
00:24:09,440 --> 00:24:10,960
having to hope that the the closed

723
00:24:10,960 --> 00:24:12,240
source version

724
00:24:12,240 --> 00:24:14,240
um you know patched this or never had

725
00:24:14,240 --> 00:24:16,240
the bug or whatever it was right we

726
00:24:16,240 --> 00:24:19,520
we have some way to test this um really

727
00:24:19,520 --> 00:24:21,360
quickly the way these things work

728
00:24:21,360 --> 00:24:22,799
so you have the authentication token

729
00:24:22,799 --> 00:24:24,799
right so i have one here that we'll

730
00:24:24,799 --> 00:24:28,159
pull over in a second um and you

731
00:24:28,159 --> 00:24:29,919
basically have a

732
00:24:29,919 --> 00:24:33,039
public private key pair in the token

733
00:24:33,039 --> 00:24:36,240
the website or app then can store

734
00:24:36,240 --> 00:24:38,240
so you once have to register the token

735
00:24:38,240 --> 00:24:39,279
with the website

736
00:24:39,279 --> 00:24:40,960
it says okay here's the public key of

737
00:24:40,960 --> 00:24:43,520
that token in the future

738
00:24:43,520 --> 00:24:46,720
the website can send a challenge that

739
00:24:46,720 --> 00:24:49,440
the the device signs and then sends back

740
00:24:49,440 --> 00:24:50,640
to the website

741
00:24:50,640 --> 00:24:54,159
um so if you can recover that private

742
00:24:54,159 --> 00:24:56,480
key you can basically be that person so

743
00:24:56,480 --> 00:24:58,080
the question is could you recover the

744
00:24:58,080 --> 00:25:00,320
private key you know with just

745
00:25:00,320 --> 00:25:02,080
some access to it and again from a

746
00:25:02,080 --> 00:25:05,200
physical standpoint it's useful if you

747
00:25:05,200 --> 00:25:07,760
can pick the device up perform the

748
00:25:07,760 --> 00:25:09,679
attack and put it back without having

749
00:25:09,679 --> 00:25:12,000
damaged it because if someone loses it

750
00:25:12,000 --> 00:25:13,200
right they're gonna go through and say

751
00:25:13,200 --> 00:25:15,200
oh crap let's de-register this from all

752
00:25:15,200 --> 00:25:16,559
the websites if they hopefully

753
00:25:16,559 --> 00:25:18,080
wrote down and remember where they

754
00:25:18,080 --> 00:25:20,000
registered it um

755
00:25:20,000 --> 00:25:22,000
and then it's you know it's no use to

756
00:25:22,000 --> 00:25:23,760
you to clone it anymore so there's some

757
00:25:23,760 --> 00:25:25,600
sort of practical like we need to clone

758
00:25:25,600 --> 00:25:27,039
this within a reasonable

759
00:25:27,039 --> 00:25:29,760
amount of time um you know and people

760
00:25:29,760 --> 00:25:31,600
often say like if you can do it in a few

761
00:25:31,600 --> 00:25:33,039
hours that's pretty reasonable because

762
00:25:33,039 --> 00:25:34,640
someone puts this in their desk

763
00:25:34,640 --> 00:25:37,279
or or whatever it might be right like um

764
00:25:37,279 --> 00:25:37,760
it's

765
00:25:37,760 --> 00:25:40,799
it's most people will not notice a few

766
00:25:40,799 --> 00:25:42,640
hour disappearance

767
00:25:42,640 --> 00:25:44,640
if it's gone for you know a day that

768
00:25:44,640 --> 00:25:45,760
starts to get a little

769
00:25:45,760 --> 00:25:47,200
questionable you know maybe you can

770
00:25:47,200 --> 00:25:48,559
claim they're on vacation or something

771
00:25:48,559 --> 00:25:49,600
like that but

772
00:25:49,600 --> 00:25:52,400
um there's some reasonableness to it

773
00:25:52,400 --> 00:25:53,679
that we want to see

774
00:25:53,679 --> 00:25:55,600
yeah then they can verify it um and so

775
00:25:55,600 --> 00:25:57,440
these tokens you know have become

776
00:25:57,440 --> 00:25:59,360
pretty popular in general so this was

777
00:25:59,360 --> 00:26:00,960
actually a few years ago i pulled this

778
00:26:00,960 --> 00:26:01,360
so

779
00:26:01,360 --> 00:26:03,520
you know microsoft is saying like that

780
00:26:03,520 --> 00:26:04,960
don't use passwords

781
00:26:04,960 --> 00:26:07,279
um use some various authentication

782
00:26:07,279 --> 00:26:09,600
tokens because it's a more secure way

783
00:26:09,600 --> 00:26:11,440
rather than relying on user passwords

784
00:26:11,440 --> 00:26:12,640
only

785
00:26:12,640 --> 00:26:15,120
um so at the time so this has all been

786
00:26:15,120 --> 00:26:16,960
fixed uh of course

787
00:26:16,960 --> 00:26:18,799
but at the time basically it was a very

788
00:26:18,799 --> 00:26:20,480
similar situation so

789
00:26:20,480 --> 00:26:21,919
and again you can look at this through

790
00:26:21,919 --> 00:26:24,080
just the open source code even

791
00:26:24,080 --> 00:26:25,760
you can look at the address that this

792
00:26:25,760 --> 00:26:27,440
thing is running at so here's the

793
00:26:27,440 --> 00:26:28,720
address of the hid

794
00:26:28,720 --> 00:26:31,440
descriptor in this case right and then

795
00:26:31,440 --> 00:26:33,840
at some point later here we have in fact

796
00:26:33,840 --> 00:26:34,640
the ecc

797
00:26:34,640 --> 00:26:37,039
private key right so this is kind of the

798
00:26:37,039 --> 00:26:39,440
goal that we we want to get out of this

799
00:26:39,440 --> 00:26:42,960
um and in a similar way we have a call

800
00:26:42,960 --> 00:26:46,240
to min right that that's doing this so

801
00:26:46,240 --> 00:26:48,159
there actually isn't it's almost the

802
00:26:48,159 --> 00:26:49,279
same attack um

803
00:26:49,279 --> 00:26:52,559
different you know usb uh

804
00:26:52,559 --> 00:26:54,720
descriptor we're going to request but um

805
00:26:54,720 --> 00:26:56,559
same sort of idea

806
00:26:56,559 --> 00:26:58,799
um and the other sort of interesting

807
00:26:58,799 --> 00:27:00,559
thing right is that here it's like okay

808
00:27:00,559 --> 00:27:03,520
i knew where the ecc private key

809
00:27:03,520 --> 00:27:06,640
was but this is actually not a big issue

810
00:27:06,640 --> 00:27:10,960
because if we have a public key

811
00:27:10,960 --> 00:27:14,400
of a device right we can figure out we

812
00:27:14,400 --> 00:27:16,480
can really quickly brute force

813
00:27:16,480 --> 00:27:18,000
in memory if we say somewhere here

814
00:27:18,000 --> 00:27:19,600
there's an ecg private key you can

815
00:27:19,600 --> 00:27:21,760
basically just slide along

816
00:27:21,760 --> 00:27:23,760
and see if if any of the bytes of memory

817
00:27:23,760 --> 00:27:25,360
because it looks like all random data

818
00:27:25,360 --> 00:27:26,799
effectively

819
00:27:26,799 --> 00:27:29,120
if the bytes of memory match that

820
00:27:29,120 --> 00:27:31,360
private the public key that i know

821
00:27:31,360 --> 00:27:32,960
and we can do that if we have the token

822
00:27:32,960 --> 00:27:34,640
because you can register

823
00:27:34,640 --> 00:27:37,679
with you can register a new site with

824
00:27:37,679 --> 00:27:39,840
the token really easily

825
00:27:39,840 --> 00:27:41,600
it's going to give out the public key

826
00:27:41,600 --> 00:27:44,080
right for the new site you registered

827
00:27:44,080 --> 00:27:45,679
you could do this attack to get a memory

828
00:27:45,679 --> 00:27:47,520
dump and then say in that memory dump is

829
00:27:47,520 --> 00:27:49,200
there a matching private key

830
00:27:49,200 --> 00:27:51,679
um you now assume know the memory layout

831
00:27:51,679 --> 00:27:52,559
assuming it's not

832
00:27:52,559 --> 00:27:55,200
randomized each time or something um

833
00:27:55,200 --> 00:27:55,600
which

834
00:27:55,600 --> 00:27:57,039
you know for a really small device like

835
00:27:57,039 --> 00:27:58,880
this is is pretty unlikely

836
00:27:58,880 --> 00:28:02,000
um and at the time again i'm talking all

837
00:28:02,000 --> 00:28:03,840
about before any of this was fixed

838
00:28:03,840 --> 00:28:07,039
um you know this was relatively uh

839
00:28:07,039 --> 00:28:09,840
straightforward to do like that

840
00:28:09,840 --> 00:28:12,240
um so another example and the final

841
00:28:12,240 --> 00:28:14,000
example of this sort of the practical

842
00:28:14,000 --> 00:28:16,000
side of pull up is an automotive ecu

843
00:28:16,000 --> 00:28:17,760
so this is different you know slightly

844
00:28:17,760 --> 00:28:19,200
different objective here you're not

845
00:28:19,200 --> 00:28:20,559
trying to necessarily

846
00:28:20,559 --> 00:28:23,520
steal a private key or something um this

847
00:28:23,520 --> 00:28:25,360
is often the case where people want to

848
00:28:25,360 --> 00:28:26,880
do some tuning they want to

849
00:28:26,880 --> 00:28:29,760
take their ecu and modify it for you

850
00:28:29,760 --> 00:28:30,000
know

851
00:28:30,000 --> 00:28:31,520
various performance improvements and

852
00:28:31,520 --> 00:28:34,080
things like that um and so what we have

853
00:28:34,080 --> 00:28:34,480
here

854
00:28:34,480 --> 00:28:37,520
is we have a microcontroller right and

855
00:28:37,520 --> 00:28:38,320
you want to get

856
00:28:38,320 --> 00:28:39,600
read write access to that

857
00:28:39,600 --> 00:28:42,000
microcontroller so um

858
00:28:42,000 --> 00:28:44,640
for various reasons you know um tuners

859
00:28:44,640 --> 00:28:45,120
have been

860
00:28:45,120 --> 00:28:47,440
progressively locked out part of it is

861
00:28:47,440 --> 00:28:49,039
stuff like warranty return but there's

862
00:28:49,039 --> 00:28:50,320
actually some new

863
00:28:50,320 --> 00:28:52,399
um environmental regulations and cyber

864
00:28:52,399 --> 00:28:53,760
security regulations

865
00:28:53,760 --> 00:28:55,440
you know that start to more seriously

866
00:28:55,440 --> 00:28:58,159
mean companies actually have to

867
00:28:58,159 --> 00:29:01,200
prevent access or have a fair amount of

868
00:29:01,200 --> 00:29:02,480
resources that stop

869
00:29:02,480 --> 00:29:05,279
access to the ecu's to prevent people

870
00:29:05,279 --> 00:29:06,880
from modifying them

871
00:29:06,880 --> 00:29:09,600
so in this case the security of the ecu

872
00:29:09,600 --> 00:29:09,919
is

873
00:29:09,919 --> 00:29:12,480
really the security this chip in this

874
00:29:12,480 --> 00:29:14,399
design so in this design there's one

875
00:29:14,399 --> 00:29:14,880
chip

876
00:29:14,880 --> 00:29:16,240
that kind of controls everything there's

877
00:29:16,240 --> 00:29:18,960
no separate secure you know security ic

878
00:29:18,960 --> 00:29:19,919
or anything like that

879
00:29:19,919 --> 00:29:22,720
so if you have access to this device you

880
00:29:22,720 --> 00:29:24,880
kind of have everything

881
00:29:24,880 --> 00:29:26,720
and so i looked a little bit at this

882
00:29:26,720 --> 00:29:28,000
specific device

883
00:29:28,000 --> 00:29:30,640
um and what the security on this

884
00:29:30,640 --> 00:29:32,399
specific device is

885
00:29:32,399 --> 00:29:35,120
um so this specific device had a

886
00:29:35,120 --> 00:29:36,399
bootloader mode

887
00:29:36,399 --> 00:29:38,399
um and in the bootloader mode you

888
00:29:38,399 --> 00:29:39,840
basically have

889
00:29:39,840 --> 00:29:42,159
this serial boot loader so we want to

890
00:29:42,159 --> 00:29:44,159
get to the serial boot loader that's the

891
00:29:44,159 --> 00:29:44,960
goal

892
00:29:44,960 --> 00:29:47,600
um in this serial bootloader is

893
00:29:47,600 --> 00:29:48,559
configured from

894
00:29:48,559 --> 00:29:51,520
external pins so these external pins

895
00:29:51,520 --> 00:29:53,279
basically tell the device which way to

896
00:29:53,279 --> 00:29:55,360
boot and these pins are just like

897
00:29:55,360 --> 00:29:57,840
if we go back here you know there's some

898
00:29:57,840 --> 00:29:59,600
test points on the board

899
00:29:59,600 --> 00:30:02,399
over here and one of these test points

900
00:30:02,399 --> 00:30:04,240
is basically a pin that you can pull low

901
00:30:04,240 --> 00:30:06,000
and it will enter this serial bootloader

902
00:30:06,000 --> 00:30:08,320
mode now the serial bootloader mode

903
00:30:08,320 --> 00:30:10,000
right is very well known on these and it

904
00:30:10,000 --> 00:30:10,640
has a

905
00:30:10,640 --> 00:30:12,720
password so you send the device a

906
00:30:12,720 --> 00:30:14,320
password

907
00:30:14,320 --> 00:30:16,480
if the password is correct so it's an 8

908
00:30:16,480 --> 00:30:18,559
byte password if the password is correct

909
00:30:18,559 --> 00:30:20,320
it's then going to allow you to download

910
00:30:20,320 --> 00:30:22,080
code that you can run so

911
00:30:22,080 --> 00:30:25,039
um you basically need to build a

912
00:30:25,039 --> 00:30:27,039
bootloader that's going to run and ram

913
00:30:27,039 --> 00:30:28,559
in the device and then give you access

914
00:30:28,559 --> 00:30:29,679
to the flash memory

915
00:30:29,679 --> 00:30:31,360
before you can do that though you need

916
00:30:31,360 --> 00:30:33,679
the correct password for the device

917
00:30:33,679 --> 00:30:36,159
every device has a unique password so

918
00:30:36,159 --> 00:30:36,880
it's not even

919
00:30:36,880 --> 00:30:38,559
enough to recover one and then just

920
00:30:38,559 --> 00:30:40,640
apply it to all so you need a way to

921
00:30:40,640 --> 00:30:42,320
reasonably attack these

922
00:30:42,320 --> 00:30:44,559
um with some sort of you know method so

923
00:30:44,559 --> 00:30:45,760
in this case i'm looking at fault

924
00:30:45,760 --> 00:30:47,760
injection

925
00:30:47,760 --> 00:30:51,360
um and basically the the gist of it is

926
00:30:51,360 --> 00:30:53,200
that there's two passwords you can use

927
00:30:53,200 --> 00:30:56,159
so there's a public password uh which b

928
00:30:56,159 --> 00:30:57,840
which means that the flash

929
00:30:57,840 --> 00:31:00,880
state is disabled so the device does not

930
00:31:00,880 --> 00:31:02,640
allow access to flash

931
00:31:02,640 --> 00:31:05,600
um but would allow access to sram um in

932
00:31:05,600 --> 00:31:07,120
the other mode and this is what most

933
00:31:07,120 --> 00:31:08,960
people were using it has this unique

934
00:31:08,960 --> 00:31:10,399
flash password

935
00:31:10,399 --> 00:31:13,440
um and the flash is is enabled so that's

936
00:31:13,440 --> 00:31:15,039
what we want because you know we want to

937
00:31:15,039 --> 00:31:16,720
be able to read write flash

938
00:31:16,720 --> 00:31:18,000
um if you're doing some you know

939
00:31:18,000 --> 00:31:19,760
modifications to the device that's what

940
00:31:19,760 --> 00:31:22,159
you'd want to have access to

941
00:31:22,159 --> 00:31:25,200
um and to do this so i'm also going to

942
00:31:25,200 --> 00:31:26,559
pull in a little bit about power

943
00:31:26,559 --> 00:31:28,080
analysis um so

944
00:31:28,080 --> 00:31:29,679
you know this talk isn't really about

945
00:31:29,679 --> 00:31:31,360
power analysis but there's a lot of

946
00:31:31,360 --> 00:31:32,159
resources

947
00:31:32,159 --> 00:31:35,440
i've put out there before and so in this

948
00:31:35,440 --> 00:31:37,200
example what i have is i have the same

949
00:31:37,200 --> 00:31:40,640
chip that's on that ecu so this nxp

950
00:31:40,640 --> 00:31:44,720
chip there's a little resistor

951
00:31:44,720 --> 00:31:46,880
in line in the board here right so this

952
00:31:46,880 --> 00:31:48,000
resistor

953
00:31:48,000 --> 00:31:50,640
um is going to allow me to observe the

954
00:31:50,640 --> 00:31:51,679
power because

955
00:31:51,679 --> 00:31:53,760
if you have a microcontroller right so i

956
00:31:53,760 --> 00:31:55,600
have a microcontroller here

957
00:31:55,600 --> 00:32:00,000
i have a resistor vcc and ground

958
00:32:00,000 --> 00:32:01,200
this is kind of what this board

959
00:32:01,200 --> 00:32:03,200
represents right and

960
00:32:03,200 --> 00:32:05,919
why this works is that as the the

961
00:32:05,919 --> 00:32:08,159
current across the resistor changes

962
00:32:08,159 --> 00:32:10,799
um that generates so the voltage across

963
00:32:10,799 --> 00:32:12,159
the resistor is the current times the

964
00:32:12,159 --> 00:32:14,000
resistance so we get a changing voltage

965
00:32:14,000 --> 00:32:17,360
we can monitor that and um get these

966
00:32:17,360 --> 00:32:19,440
power traces so

967
00:32:19,440 --> 00:32:22,640
um yeah this is sort of what it looks

968
00:32:22,640 --> 00:32:23,200
like

969
00:32:23,200 --> 00:32:26,240
here um so the difference here

970
00:32:26,240 --> 00:32:29,760
is a incorrect and correct password are

971
00:32:29,760 --> 00:32:30,240
in

972
00:32:30,240 --> 00:32:33,519
red and green respectively and so what i

973
00:32:33,519 --> 00:32:35,279
want to point out is that at this

974
00:32:35,279 --> 00:32:39,760
early stage right these traces overlap

975
00:32:39,760 --> 00:32:41,200
let me make this color different

976
00:32:41,200 --> 00:32:44,000
these traces overlap right there's a

977
00:32:44,000 --> 00:32:46,320
point in time where they differ

978
00:32:46,320 --> 00:32:48,399
and so this is cool because and you can

979
00:32:48,399 --> 00:32:50,080
see this difference here right

980
00:32:50,080 --> 00:32:53,200
this is really cool um because in fact

981
00:32:53,200 --> 00:32:56,559
the what you're seeing is the device

982
00:32:56,559 --> 00:32:58,320
you know possibly doing the password

983
00:32:58,320 --> 00:33:00,080
comparison but then executing different

984
00:33:00,080 --> 00:33:00,640
code

985
00:33:00,640 --> 00:33:02,480
and you can even see here right this

986
00:33:02,480 --> 00:33:04,080
sort of red small

987
00:33:04,080 --> 00:33:07,440
trace looks like maybe it's just going

988
00:33:07,440 --> 00:33:08,559
into name from the loop because there's

989
00:33:08,559 --> 00:33:10,000
not a there's a very consistent

990
00:33:10,000 --> 00:33:11,760
power consumption it's clearly just

991
00:33:11,760 --> 00:33:13,279
doing the same operation

992
00:33:13,279 --> 00:33:15,200
right compared to like all this stuff

993
00:33:15,200 --> 00:33:16,799
you can see the green looks very

994
00:33:16,799 --> 00:33:17,600
different

995
00:33:17,600 --> 00:33:19,440
right like maybe i think it's preparing

996
00:33:19,440 --> 00:33:21,360
for download of the code maybe it's

997
00:33:21,360 --> 00:33:22,880
setting up some registers stuff like

998
00:33:22,880 --> 00:33:24,640
that

999
00:33:24,640 --> 00:33:26,240
so we can actually see that there is a

1000
00:33:26,240 --> 00:33:28,720
difference in how the code is executed

1001
00:33:28,720 --> 00:33:30,559
so the other thing i want to point out

1002
00:33:30,559 --> 00:33:32,320
right is that i talked about cases where

1003
00:33:32,320 --> 00:33:35,120
you had the ability to reverse engineer

1004
00:33:35,120 --> 00:33:36,960
the code to figure it out

1005
00:33:36,960 --> 00:33:38,799
so this is an example of even if you

1006
00:33:38,799 --> 00:33:40,399
didn't have that you can still

1007
00:33:40,399 --> 00:33:42,880
find a lot about the device by observing

1008
00:33:42,880 --> 00:33:44,320
the difference between

1009
00:33:44,320 --> 00:33:47,679
the code so if you try to boot a

1010
00:33:47,679 --> 00:33:50,000
fake image versus a real image or send a

1011
00:33:50,000 --> 00:33:51,840
wrong versus correct password

1012
00:33:51,840 --> 00:33:53,120
right there's a lot of stuff you can

1013
00:33:53,120 --> 00:33:54,320
observe that's going to tell you

1014
00:33:54,320 --> 00:33:57,919
information about how it's executing

1015
00:33:57,919 --> 00:33:59,279
in this case i tested on a bunch of

1016
00:33:59,279 --> 00:34:00,720
different devices so one of the things i

1017
00:34:00,720 --> 00:34:02,080
wanted to show is you know if you're

1018
00:34:02,080 --> 00:34:03,760
testing on dev boards

1019
00:34:03,760 --> 00:34:06,799
it's actually pretty close to testing on

1020
00:34:06,799 --> 00:34:10,000
um real ecu so um

1021
00:34:10,000 --> 00:34:12,879
and i pushed it a little further so uh

1022
00:34:12,879 --> 00:34:14,320
this talk was at s-car so

1023
00:34:14,320 --> 00:34:15,839
that there's paper and slides and stuff

1024
00:34:15,839 --> 00:34:17,839
left by my website if you're curious

1025
00:34:17,839 --> 00:34:19,679
um this was an example of like how far

1026
00:34:19,679 --> 00:34:22,239
could you push it in practicality terms

1027
00:34:22,239 --> 00:34:27,599
um so in this case i have my emfi tool

1028
00:34:27,599 --> 00:34:31,359
right and what i have is also like

1029
00:34:31,359 --> 00:34:34,239
a um a little arduino that's basically

1030
00:34:34,239 --> 00:34:35,839
running the the attack so before i was

1031
00:34:35,839 --> 00:34:37,599
running this through a python script

1032
00:34:37,599 --> 00:34:39,280
but there was nothing super special

1033
00:34:39,280 --> 00:34:41,359
about it that that meant you had to use

1034
00:34:41,359 --> 00:34:43,280
these tools so i was using some

1035
00:34:43,280 --> 00:34:45,918
you know my chip whisperer to do some of

1036
00:34:45,918 --> 00:34:46,719
the timing

1037
00:34:46,719 --> 00:34:48,239
um which was a convenience i kind of

1038
00:34:48,239 --> 00:34:49,520
also wanted to show you know

1039
00:34:49,520 --> 00:34:51,440
fundamentally there's not

1040
00:34:51,440 --> 00:34:54,239
a ton of complexity here in the actual

1041
00:34:54,239 --> 00:34:56,560
tax

1042
00:34:56,560 --> 00:34:59,280
um yeah so that's kind of the the the

1043
00:34:59,280 --> 00:35:00,400
main talk here so

1044
00:35:00,400 --> 00:35:02,000
my point is to show you that fault

1045
00:35:02,000 --> 00:35:03,520
injection you know it's a it's a real

1046
00:35:03,520 --> 00:35:04,240
thing

1047
00:35:04,240 --> 00:35:07,440
um and we can do it on devices with a

1048
00:35:07,440 --> 00:35:10,320
fairly minimal amount of modifications

1049
00:35:10,320 --> 00:35:11,920
um you know the tool so i'm showing

1050
00:35:11,920 --> 00:35:12,800
demos with

1051
00:35:12,800 --> 00:35:14,880
uh you know my own tooling that could be

1052
00:35:14,880 --> 00:35:16,320
fairly expensive to get

1053
00:35:16,320 --> 00:35:18,240
but there's a lot of other options out

1054
00:35:18,240 --> 00:35:20,160
there and what i want to show you

1055
00:35:20,160 --> 00:35:21,599
there's a well we'll have some time for

1056
00:35:21,599 --> 00:35:23,839
questions so if there's a lot of them

1057
00:35:23,839 --> 00:35:27,839
i can stop now but i also had

1058
00:35:29,680 --> 00:35:32,000
let a switch my camera here uh what i

1059
00:35:32,000 --> 00:35:32,720
had is i had

1060
00:35:32,720 --> 00:35:34,800
a few little demos here so um give me

1061
00:35:34,800 --> 00:35:38,320
one second i just need to switch

1062
00:35:41,040 --> 00:35:44,160
okay um i'm just gonna do it in my

1063
00:35:44,160 --> 00:35:47,839
my actual camera shot here so hopefully

1064
00:35:47,839 --> 00:35:49,200
you can see this

1065
00:35:49,200 --> 00:35:52,640
um let's see if this works

1066
00:35:52,640 --> 00:35:55,040
okay um so this is an example right so

1067
00:35:55,040 --> 00:35:55,839
this is like

1068
00:35:55,839 --> 00:35:59,200
emfi tooling um and

1069
00:35:59,200 --> 00:36:02,960
right all i'm gonna do is uh run this

1070
00:36:02,960 --> 00:36:05,200
device um in sort of a manual mode so

1071
00:36:05,200 --> 00:36:06,079
right if i

1072
00:36:06,079 --> 00:36:08,880
if i press this button it inserts faults

1073
00:36:08,880 --> 00:36:10,560
um and if you wanna show

1074
00:36:10,560 --> 00:36:11,839
you know show yourself that it's

1075
00:36:11,839 --> 00:36:13,760
possible rather than starting with

1076
00:36:13,760 --> 00:36:17,520
uh really crazy attacks what i have here

1077
00:36:17,520 --> 00:36:20,880
is a little board that is running

1078
00:36:20,880 --> 00:36:26,000
um a loop and so you can see

1079
00:36:26,000 --> 00:36:29,140
if it resets that red led comes on

1080
00:36:29,140 --> 00:36:30,560
[Music]

1081
00:36:30,560 --> 00:36:33,920
here when it's running it's blinking

1082
00:36:33,920 --> 00:36:34,560
normally

1083
00:36:34,560 --> 00:36:36,640
and there's another led that indicates

1084
00:36:36,640 --> 00:36:38,800
um the loop it's basically running some

1085
00:36:38,800 --> 00:36:40,000
loops and seeing if you can break

1086
00:36:40,000 --> 00:36:42,240
out of the loops right and it brings

1087
00:36:42,240 --> 00:36:44,079
blinks an led if i do

1088
00:36:44,079 --> 00:36:46,400
um so if you bring an emfi tool over top

1089
00:36:46,400 --> 00:36:48,000
of it you'll sort of see like you can

1090
00:36:48,000 --> 00:36:49,760
see it rebooting quite a bit

1091
00:36:49,760 --> 00:36:51,839
um right and if you get the right spot

1092
00:36:51,839 --> 00:36:54,160
which i might not actually do here right

1093
00:36:54,160 --> 00:36:57,119
it's always a bit of you you really

1094
00:36:57,119 --> 00:36:58,800
would be scanning this normally right so

1095
00:36:58,800 --> 00:37:00,640
you can see a lot of resets

1096
00:37:00,640 --> 00:37:02,000
but you might be able to get something

1097
00:37:02,000 --> 00:37:05,280
working you know pretty pretty easily

1098
00:37:05,280 --> 00:37:06,880
um with something like that so that's

1099
00:37:06,880 --> 00:37:09,200
cool because um and this is open source

1100
00:37:09,200 --> 00:37:10,560
you can get the code i mean it's just

1101
00:37:10,560 --> 00:37:12,000
some loops there's nothing too crazy

1102
00:37:12,000 --> 00:37:12,720
about it

1103
00:37:12,720 --> 00:37:14,720
um you can start with really basic stuff

1104
00:37:14,720 --> 00:37:16,079
before you

1105
00:37:16,079 --> 00:37:18,320
uh get into the you know the more

1106
00:37:18,320 --> 00:37:19,839
advanced attack so

1107
00:37:19,839 --> 00:37:22,640
um just because i'm kind of showing you

1108
00:37:22,640 --> 00:37:25,200
know some

1109
00:37:25,280 --> 00:37:28,320
my back oh yes yes you're back

1110
00:37:28,320 --> 00:37:30,320
yeah i think i switched audio instead of

1111
00:37:30,320 --> 00:37:32,160
a video yeah so yeah i wanted to show as

1112
00:37:32,160 --> 00:37:33,359
i was just saying at the end

1113
00:37:33,359 --> 00:37:35,920
um you know there's a lot of fun you can

1114
00:37:35,920 --> 00:37:37,680
have with us so um i think with that if

1115
00:37:37,680 --> 00:37:39,200
there's questions

1116
00:37:39,200 --> 00:37:42,640
uh we have a few minutes left so

1117
00:37:42,640 --> 00:37:45,920
yes so thank you for this great talk

1118
00:37:45,920 --> 00:37:48,000
and we have um a few questions from the

1119
00:37:48,000 --> 00:37:49,200
chat and

1120
00:37:49,200 --> 00:37:52,320
then the video is a bit late on youtube

1121
00:37:52,320 --> 00:37:53,040
like

1122
00:37:53,040 --> 00:37:55,200
one minute delay so maybe some other

1123
00:37:55,200 --> 00:37:57,920
questions will uh will pop up later

1124
00:37:57,920 --> 00:38:01,040
so i'll start asking the these ones

1125
00:38:01,040 --> 00:38:03,520
um so gabriella asks what kind of

1126
00:38:03,520 --> 00:38:04,880
environment do you suggest

1127
00:38:04,880 --> 00:38:07,520
for this type of research i see you're

1128
00:38:07,520 --> 00:38:08,880
using windows here but

1129
00:38:08,880 --> 00:38:10,960
any suggestions about operating system

1130
00:38:10,960 --> 00:38:13,440
tools or software

1131
00:38:13,440 --> 00:38:15,839
um yeah so i'm a terrible hardware

1132
00:38:15,839 --> 00:38:17,359
hacker because i do like everything on

1133
00:38:17,359 --> 00:38:18,560
windows

1134
00:38:18,560 --> 00:38:21,760
um so we actually use i use something

1135
00:38:21,760 --> 00:38:23,680
called jupiter for a lot of the research

1136
00:38:23,680 --> 00:38:24,160
which

1137
00:38:24,160 --> 00:38:26,560
um so as part of the chip whisperer and

1138
00:38:26,560 --> 00:38:27,839
we've actually been pushing if you

1139
00:38:27,839 --> 00:38:28,960
haven't looked at chip whisper in a

1140
00:38:28,960 --> 00:38:30,240
while we've been putting a bunch more

1141
00:38:30,240 --> 00:38:32,079
demos out there

1142
00:38:32,079 --> 00:38:34,000
it runs so it's like an interactive

1143
00:38:34,000 --> 00:38:37,680
python um so if we

1144
00:38:37,839 --> 00:38:39,680
have to run choose and so i can install

1145
00:38:39,680 --> 00:38:41,359
chip whisper and i can install this on

1146
00:38:41,359 --> 00:38:42,480
mac or anything

1147
00:38:42,480 --> 00:38:46,240
it's basically running um python in here

1148
00:38:46,240 --> 00:38:49,440
the nice thing about it um

1149
00:38:49,440 --> 00:38:54,560
let me run this there's the courses

1150
00:38:56,400 --> 00:38:58,400
oh this is an old one i did the nice

1151
00:38:58,400 --> 00:38:59,520
thing about it so i'll just show you in

1152
00:38:59,520 --> 00:39:01,119
here is it basically lets you run

1153
00:39:01,119 --> 00:39:04,640
um a lot of like you know scripting

1154
00:39:04,640 --> 00:39:06,560
that's interactive that also has

1155
00:39:06,560 --> 00:39:09,040
plotting and stuff in it um so if you

1156
00:39:09,040 --> 00:39:10,480
wanted to like try different glitch

1157
00:39:10,480 --> 00:39:11,599
measurements right

1158
00:39:11,599 --> 00:39:14,000
um you can try a bunch of different

1159
00:39:14,000 --> 00:39:15,920
glitches record your results and sort of

1160
00:39:15,920 --> 00:39:17,839
plot it all in one thing

1161
00:39:17,839 --> 00:39:20,079
um it's if you're familiar with python

1162
00:39:20,079 --> 00:39:21,760
it's really easy even if you're not

1163
00:39:21,760 --> 00:39:23,920
it's um pretty straightforward to do

1164
00:39:23,920 --> 00:39:25,040
that uh

1165
00:39:25,040 --> 00:39:27,359
in terms of the actual you know the rest

1166
00:39:27,359 --> 00:39:29,040
of the work i don't think it's too

1167
00:39:29,040 --> 00:39:31,119
critical what environment you're using

1168
00:39:31,119 --> 00:39:33,440
um you know the only other major thing

1169
00:39:33,440 --> 00:39:34,560
you might need is like

1170
00:39:34,560 --> 00:39:36,400
standard debug tools so whatever you're

1171
00:39:36,400 --> 00:39:38,240
more comfortable with

1172
00:39:38,240 --> 00:39:41,200
i'm using like ozone which is a sega

1173
00:39:41,200 --> 00:39:42,000
debugger that

1174
00:39:42,000 --> 00:39:44,800
works on sort of everything um but if

1175
00:39:44,800 --> 00:39:46,079
you know you're more gdb

1176
00:39:46,079 --> 00:39:49,520
that's that would be great too

1177
00:39:49,839 --> 00:39:53,440
okay thank you and another question is

1178
00:39:53,440 --> 00:39:55,119
how is it possible for an

1179
00:39:55,119 --> 00:39:57,839
electromagnetic electromagnetic pulse

1180
00:39:57,839 --> 00:40:00,000
to exactly change the result of an

1181
00:40:00,000 --> 00:40:01,040
instruction

1182
00:40:01,040 --> 00:40:03,760
and how can it affect the execution so

1183
00:40:03,760 --> 00:40:05,040
precisely

1184
00:40:05,040 --> 00:40:07,119
uh so this is like a slightly open

1185
00:40:07,119 --> 00:40:08,560
research area um

1186
00:40:08,560 --> 00:40:10,000
there's a lot of different to be honest

1187
00:40:10,000 --> 00:40:11,440
there is some different theories about

1188
00:40:11,440 --> 00:40:11,839
it

1189
00:40:11,839 --> 00:40:15,280
uh what you really see is that the

1190
00:40:15,280 --> 00:40:18,160
um so in all the digital devices you

1191
00:40:18,160 --> 00:40:19,920
know at some point you basically have a

1192
00:40:19,920 --> 00:40:23,520
register that normally has some like

1193
00:40:23,520 --> 00:40:25,760
either set up and hold requirements so

1194
00:40:25,760 --> 00:40:26,720
the the clock

1195
00:40:26,720 --> 00:40:30,079
in the um the clock coming in has to

1196
00:40:30,079 --> 00:40:31,839
arrive at a certain point relative to

1197
00:40:31,839 --> 00:40:33,839
data coming in so if you imagine you

1198
00:40:33,839 --> 00:40:35,359
know if you're loading an instruction

1199
00:40:35,359 --> 00:40:37,040
from a bus

1200
00:40:37,040 --> 00:40:40,400
onto the device um what you might

1201
00:40:40,400 --> 00:40:43,839
see let me just use this

1202
00:40:45,440 --> 00:40:48,480
is if you have like uh data here so we

1203
00:40:48,480 --> 00:40:49,680
call this data

1204
00:40:49,680 --> 00:40:53,119
call this clock right what should happen

1205
00:40:53,119 --> 00:40:54,480
is the clock arrives

1206
00:40:54,480 --> 00:40:56,720
and the data was stable for some time

1207
00:40:56,720 --> 00:40:58,319
before that

1208
00:40:58,319 --> 00:41:00,400
if this is wrong so if the clock arrived

1209
00:41:00,400 --> 00:41:02,640
like right at this edge here

1210
00:41:02,640 --> 00:41:04,160
what you're going to find out to ignore

1211
00:41:04,160 --> 00:41:06,000
this one is that now

1212
00:41:06,000 --> 00:41:09,920
what gets latched in isn't very reliable

1213
00:41:09,920 --> 00:41:11,680
so this is assumed to be part of what

1214
00:41:11,680 --> 00:41:13,599
can happen and why this happens is that

1215
00:41:13,599 --> 00:41:15,200
when you insert the electromagnetic

1216
00:41:15,200 --> 00:41:15,760
fault

1217
00:41:15,760 --> 00:41:17,440
in the system right you're actually

1218
00:41:17,440 --> 00:41:19,040
doing something a little closer to

1219
00:41:19,040 --> 00:41:19,599
voltage

1220
00:41:19,599 --> 00:41:21,440
glitching so if we look at like the the

1221
00:41:21,440 --> 00:41:22,960
voltage of the system it should be very

1222
00:41:22,960 --> 00:41:23,839
stable

1223
00:41:23,839 --> 00:41:25,599
if you have a big like ring on it at

1224
00:41:25,599 --> 00:41:27,119
some point in time

1225
00:41:27,119 --> 00:41:29,119
um this is actually going to introduce

1226
00:41:29,119 --> 00:41:30,560
timing differences and

1227
00:41:30,560 --> 00:41:34,000
and sort of as the ringing goes through

1228
00:41:34,000 --> 00:41:36,079
the the chip structure itself you know

1229
00:41:36,079 --> 00:41:38,640
the location of these peaks and valleys

1230
00:41:38,640 --> 00:41:39,839
won't be consistent

1231
00:41:39,839 --> 00:41:41,839
so you may have sort of uh within the

1232
00:41:41,839 --> 00:41:43,760
chip like timing differences

1233
00:41:43,760 --> 00:41:45,839
on different nets at different uh

1234
00:41:45,839 --> 00:41:47,119
portions so

1235
00:41:47,119 --> 00:41:49,280
um it's very it's almost surprising how

1236
00:41:49,280 --> 00:41:50,319
well it can work

1237
00:41:50,319 --> 00:41:52,400
um it's assumed you know and i say

1238
00:41:52,400 --> 00:41:53,760
assume because it's hard to actually

1239
00:41:53,760 --> 00:41:55,359
know exactly what's happening on the die

1240
00:41:55,359 --> 00:41:56,240
that that's the

1241
00:41:56,240 --> 00:42:02,000
the method

1242
00:42:02,000 --> 00:42:03,839
okay thank you we have two more

1243
00:42:03,839 --> 00:42:05,920
questions one is very fast

1244
00:42:05,920 --> 00:42:09,040
and it is uh what is uh an estimation of

1245
00:42:09,040 --> 00:42:10,480
the cost for this type of

1246
00:42:10,480 --> 00:42:13,760
research uh so it can vary so if it's

1247
00:42:13,760 --> 00:42:14,640
like diy

1248
00:42:14,640 --> 00:42:16,720
you know i'd say maybe 500 bucks by the

1249
00:42:16,720 --> 00:42:17,920
time you build it all

1250
00:42:17,920 --> 00:42:19,599
um the chip sharer itself that i'm

1251
00:42:19,599 --> 00:42:21,000
showing here is 33

1252
00:42:21,000 --> 00:42:24,000
300 u.s um

1253
00:42:24,000 --> 00:42:25,760
and you can go you can go much higher if

1254
00:42:25,760 --> 00:42:27,280
you want right if you want an xy table

1255
00:42:27,280 --> 00:42:29,599
and stuff like that

1256
00:42:29,599 --> 00:42:30,960
but some of the links i had to the open

1257
00:42:30,960 --> 00:42:32,880
source ones are pretty low cost to build

1258
00:42:32,880 --> 00:42:34,800
like under 500 bucks and you could do

1259
00:42:34,800 --> 00:42:37,520
quite a bit of this

1260
00:42:37,920 --> 00:42:40,240
okay last question is when would you

1261
00:42:40,240 --> 00:42:41,200
pick a an

1262
00:42:41,200 --> 00:42:43,200
electromagnetic fault injection attack

1263
00:42:43,200 --> 00:42:45,440
over a voltage glitch attack

1264
00:42:45,440 --> 00:42:47,839
um so emfi basically there's two two

1265
00:42:47,839 --> 00:42:48,960
reasons number one

1266
00:42:48,960 --> 00:42:52,000
can be um if you have the case

1267
00:42:52,000 --> 00:42:53,599
like the trezor example where you wanted

1268
00:42:53,599 --> 00:42:55,200
to do it through the enclosure because

1269
00:42:55,200 --> 00:42:56,880
it's fundamental to the attack being

1270
00:42:56,880 --> 00:42:58,640
successful that you don't want to modify

1271
00:42:58,640 --> 00:43:00,400
the device

1272
00:43:00,400 --> 00:43:03,040
in the second reason so for the example

1273
00:43:03,040 --> 00:43:05,280
of the ecu right it didn't matter i had

1274
00:43:05,280 --> 00:43:07,280
to open the ecu anyway

1275
00:43:07,280 --> 00:43:09,119
that's not a consideration here so the

1276
00:43:09,119 --> 00:43:10,640
reason you might choose emfi

1277
00:43:10,640 --> 00:43:12,880
there could be that you don't want to

1278
00:43:12,880 --> 00:43:14,240
solder to the board or something like

1279
00:43:14,240 --> 00:43:14,880
that more

1280
00:43:14,880 --> 00:43:17,920
likely emfi has some

1281
00:43:17,920 --> 00:43:20,720
ability to differentiate on sort of x

1282
00:43:20,720 --> 00:43:22,160
and y

1283
00:43:22,160 --> 00:43:24,160
so you can see i've sort of positioned

1284
00:43:24,160 --> 00:43:26,800
this with just a vise over the chip

1285
00:43:26,800 --> 00:43:29,839
um but you can also use like a

1286
00:43:29,839 --> 00:43:31,760
table to scan it because different areas

1287
00:43:31,760 --> 00:43:33,359
of the die will actually have different

1288
00:43:33,359 --> 00:43:34,319
effects

1289
00:43:34,319 --> 00:43:36,160
um and if you especially if you start to

1290
00:43:36,160 --> 00:43:38,079
get in devices that are like multi-core

1291
00:43:38,079 --> 00:43:40,400
you know they have a secure boot where

1292
00:43:40,400 --> 00:43:42,240
there's a separate core that brings up

1293
00:43:42,240 --> 00:43:43,200
the device

1294
00:43:43,200 --> 00:43:45,119
um you may actually want to concentrate

1295
00:43:45,119 --> 00:43:46,319
your glitch effect on

1296
00:43:46,319 --> 00:43:49,520
one portion of the the chip right even

1297
00:43:49,520 --> 00:43:50,560
without multi-core

1298
00:43:50,560 --> 00:43:52,160
you typically will need to concentrate

1299
00:43:52,160 --> 00:43:53,760
with emfi um

1300
00:43:53,760 --> 00:43:55,520
so there might be things that you can do

1301
00:43:55,520 --> 00:43:58,480
with emfi that voltage glitching

1302
00:43:58,480 --> 00:44:00,800
is going to be more difficult but you

1303
00:44:00,800 --> 00:44:01,520
know we've seen

1304
00:44:01,520 --> 00:44:03,200
voltage glitching work on quite a few

1305
00:44:03,200 --> 00:44:05,280
different interesting devices lately

1306
00:44:05,280 --> 00:44:09,839
so i wouldn't discount it

