1
00:00:04,720 --> 00:00:05,600
okay

2
00:00:05,600 --> 00:00:08,400
thank you thank you for being here i

3
00:00:08,400 --> 00:00:10,000
hope you

4
00:00:10,000 --> 00:00:12,000
i hope we can see each other the next

5
00:00:12,000 --> 00:00:13,840
year you know in a better situation you

6
00:00:13,840 --> 00:00:14,719
know

7
00:00:14,719 --> 00:00:18,480
uh well i i'm so excited to be here and

8
00:00:18,480 --> 00:00:23,119
i really hope you enjoy this talk

9
00:00:23,119 --> 00:00:26,160
okay uh today i'm gonna talk about

10
00:00:26,160 --> 00:00:29,199
bypass of rules of

11
00:00:29,199 --> 00:00:31,519
web application firewalls and intrusion

12
00:00:31,519 --> 00:00:33,520
prevention systems

13
00:00:33,520 --> 00:00:36,640
uh i'll do an overview of

14
00:00:36,640 --> 00:00:40,320
all um i've done an overview of all

15
00:00:40,320 --> 00:00:42,440
researches i made from

16
00:00:42,440 --> 00:00:45,840
2017 and 2020

17
00:00:45,840 --> 00:00:49,200
on this topic uh why this talk i would

18
00:00:49,200 --> 00:00:51,039
like to use the the words from

19
00:00:51,039 --> 00:00:52,879
the stephen gates book modern defense in

20
00:00:52,879 --> 00:00:54,719
depth that say

21
00:00:54,719 --> 00:00:57,520
uh the number of the of organization

22
00:00:57,520 --> 00:00:59,120
that have invested in

23
00:00:59,120 --> 00:01:01,520
hardware-based web application firewalls

24
00:01:01,520 --> 00:01:03,440
uh to protect their public-facing web

25
00:01:03,440 --> 00:01:04,400
applications

26
00:01:04,400 --> 00:01:07,600
is enormous uh however

27
00:01:07,600 --> 00:01:10,320
many organizations have deployed their

28
00:01:10,320 --> 00:01:13,119
application firewall out of band

29
00:01:13,119 --> 00:01:16,560
in monitor mode or have never adequately

30
00:01:16,560 --> 00:01:19,360
tuned the waff rules to their fast

31
00:01:19,360 --> 00:01:20,720
capabilities

32
00:01:20,720 --> 00:01:23,280
and i couldn't have said it better

33
00:01:23,280 --> 00:01:25,520
myself and i think this is true

34
00:01:25,520 --> 00:01:30,158
especially for many wealth as a service

35
00:01:30,720 --> 00:01:34,159
during this talk we will see techniques

36
00:01:34,159 --> 00:01:38,079
to bypass rules and filters to exploit

37
00:01:38,079 --> 00:01:40,079
somewhere in our buildings like remote

38
00:01:40,079 --> 00:01:42,560
comment execution in bash

39
00:01:42,560 --> 00:01:45,600
remote code execution in php and

40
00:01:45,600 --> 00:01:49,680
cross-scripting before start i

41
00:01:49,680 --> 00:01:51,520
quickly introduce myself my name is

42
00:01:51,520 --> 00:01:52,720
andrea menin

43
00:01:52,720 --> 00:01:55,520
you can find me on the internet as the

44
00:01:55,520 --> 00:01:56,479
middle

45
00:01:56,479 --> 00:01:59,600
uh i work in the infospace in

46
00:01:59,600 --> 00:02:03,520
in the infosec space by about 15 years

47
00:02:03,520 --> 00:02:06,000
i'm part of the osmo security corrupter

48
00:02:06,000 --> 00:02:06,719
team

49
00:02:06,719 --> 00:02:09,360
i'm the founder of reverse security that

50
00:02:09,360 --> 00:02:09,758
is

51
00:02:09,758 --> 00:02:12,879
an italian infosec community and

52
00:02:12,879 --> 00:02:16,080
i'm one of the admins and writers

53
00:02:16,080 --> 00:02:19,440
at sec juice and if you want to keep in

54
00:02:19,440 --> 00:02:20,640
touch please

55
00:02:20,640 --> 00:02:24,000
follow me on twitter on my brand new

56
00:02:24,000 --> 00:02:26,640
twitter account because my my old one is

57
00:02:26,640 --> 00:02:27,200
was

58
00:02:27,200 --> 00:02:29,280
suspended i'm i'm the bad guy for

59
00:02:29,280 --> 00:02:30,560
twitter

60
00:02:30,560 --> 00:02:34,319
and in in almost all the slides

61
00:02:34,319 --> 00:02:37,760
i will show you you will see a qr code

62
00:02:37,760 --> 00:02:41,200
on the top right corner and that code

63
00:02:41,200 --> 00:02:42,480
forwards you to

64
00:02:42,480 --> 00:02:45,040
an article in which you can go deep on

65
00:02:45,040 --> 00:02:45,760
the

66
00:02:45,760 --> 00:02:50,000
on the topic we will see together

67
00:02:50,000 --> 00:02:53,920
okay uh just a quick introduction

68
00:02:53,920 --> 00:02:57,120
on what a web application file is

69
00:02:57,120 --> 00:03:00,400
all bypasser will show you are a proof

70
00:03:00,400 --> 00:03:01,760
of concept

71
00:03:01,760 --> 00:03:04,800
tested against famous and widely used

72
00:03:04,800 --> 00:03:08,480
well application firewall as a service

73
00:03:09,040 --> 00:03:12,239
web appfire will inspect all http

74
00:03:12,239 --> 00:03:12,800
requests

75
00:03:12,800 --> 00:03:17,040
and http response at layer 7

76
00:03:17,040 --> 00:03:20,720
and text thanks to a list of rules

77
00:03:20,720 --> 00:03:24,400
typically regular expression based rules

78
00:03:24,400 --> 00:03:27,440
it can blocks malicious traffic or

79
00:03:27,440 --> 00:03:30,959
attacks it could used

80
00:03:30,959 --> 00:03:35,120
on pram as a service or in cloud

81
00:03:35,120 --> 00:03:39,760
or hybrid mode and most companies use

82
00:03:39,760 --> 00:03:41,680
web application firewall for doing

83
00:03:41,680 --> 00:03:43,280
virtual patching

84
00:03:43,280 --> 00:03:46,400
that is a magic word that means

85
00:03:46,400 --> 00:03:47,920
patching the bug without touching the

86
00:03:47,920 --> 00:03:50,799
source code and

87
00:03:50,799 --> 00:03:53,040
i i know i know what what you are

88
00:03:53,040 --> 00:03:55,439
thinking that this is a bad way to fix a

89
00:03:55,439 --> 00:03:56,400
problem

90
00:03:56,400 --> 00:03:58,959
and when you do a virtual patch in the

91
00:03:58,959 --> 00:04:00,319
vulnerability is still

92
00:04:00,319 --> 00:04:03,360
hit there and i absolutely agree with

93
00:04:03,360 --> 00:04:04,159
you it's

94
00:04:04,159 --> 00:04:07,360
it's a bad word but

95
00:04:07,360 --> 00:04:09,680
there there are many situations in which

96
00:04:09,680 --> 00:04:10,799
you in which

97
00:04:10,799 --> 00:04:14,000
having something that gives you time to

98
00:04:14,000 --> 00:04:18,320
to patch or time to upgrade your web app

99
00:04:18,320 --> 00:04:22,720
or makes you able to apply a patch

100
00:04:22,720 --> 00:04:25,360
when attaching the source code is not an

101
00:04:25,360 --> 00:04:26,560
option

102
00:04:26,560 --> 00:04:29,280
in my personal opinion it's a it's a

103
00:04:29,280 --> 00:04:30,720
good choice to

104
00:04:30,720 --> 00:04:33,919
reduce the the the risk

105
00:04:33,919 --> 00:04:39,039
and and protect better your your assets

106
00:04:39,520 --> 00:04:42,720
uh so let's say that

107
00:04:42,720 --> 00:04:47,680
sorry let's say that you have a website

108
00:04:47,680 --> 00:04:51,040
where user can upload their kitten

109
00:04:51,040 --> 00:04:51,680
photos

110
00:04:51,680 --> 00:04:55,199
for example and write stories about them

111
00:04:55,199 --> 00:04:58,840
and your website is hosted by

112
00:04:58,840 --> 00:05:00,800
kittenofsillingcompany.com

113
00:05:00,800 --> 00:05:03,600
and to protect it you decide to put a

114
00:05:03,600 --> 00:05:07,039
web application firewall in front of it

115
00:05:07,039 --> 00:05:10,560
so all users that want to connect to

116
00:05:10,560 --> 00:05:12,000
your website must

117
00:05:12,000 --> 00:05:13,759
pass through your web application

118
00:05:13,759 --> 00:05:15,759
firewall and can't connect

119
00:05:15,759 --> 00:05:19,039
directly to the origin do it to

120
00:05:19,039 --> 00:05:20,960
net filter policy something like

121
00:05:20,960 --> 00:05:24,479
iptablescrews for example

122
00:05:24,479 --> 00:05:27,919
and then there's you know who that try

123
00:05:27,919 --> 00:05:28,320
to

124
00:05:28,320 --> 00:05:31,360
exploit a vulnerability on your website

125
00:05:31,360 --> 00:05:33,600
to remove all kitten photos and replace

126
00:05:33,600 --> 00:05:34,800
them with snake

127
00:05:34,800 --> 00:05:38,000
photos okay all

128
00:05:38,000 --> 00:05:40,720
his attempts are blocked by well

129
00:05:40,720 --> 00:05:42,240
application firewall thanks to

130
00:05:42,240 --> 00:05:45,280
a list of rules and regular expressions

131
00:05:45,280 --> 00:05:48,800
and all his http requests will never

132
00:05:48,800 --> 00:05:49,199
reach

133
00:05:49,199 --> 00:05:52,240
your website this is more or less how

134
00:05:52,240 --> 00:05:54,479
a web application firewall works how

135
00:05:54,479 --> 00:05:57,039
application followers and service works

136
00:05:57,039 --> 00:06:00,319
now the the question is can

137
00:06:00,319 --> 00:06:03,840
you know who somehow uh

138
00:06:03,840 --> 00:06:07,440
bypass your web application firewall to

139
00:06:07,440 --> 00:06:10,560
exploit uh

140
00:06:10,560 --> 00:06:13,280
the vulnerability on your website and

141
00:06:13,280 --> 00:06:16,720
replace all your using kitten photos

142
00:06:16,720 --> 00:06:19,840
i mean if you if you if your rough runs

143
00:06:19,840 --> 00:06:20,639
a weak

144
00:06:20,639 --> 00:06:23,280
russet maybe the answer is yes yes you

145
00:06:23,280 --> 00:06:24,240
can

146
00:06:24,240 --> 00:06:27,520
and let's see how

147
00:06:27,520 --> 00:06:31,199
okay let's say that you found

148
00:06:31,199 --> 00:06:34,960
a remote command execution vulnerability

149
00:06:34,960 --> 00:06:36,880
but the web application firewall blocks

150
00:06:36,880 --> 00:06:39,039
your exploit attempts

151
00:06:39,039 --> 00:06:43,600
due to regular expression based filter

152
00:06:43,600 --> 00:06:46,720
that blocks a well-known command

153
00:06:46,720 --> 00:06:50,319
for example bidding cat or

154
00:06:50,319 --> 00:06:53,759
well-known file name for example etsy

155
00:06:53,759 --> 00:06:54,800
password

156
00:06:54,800 --> 00:06:56,720
and trust me there's a lot of web

157
00:06:56,720 --> 00:07:00,240
application firewall rules that do it

158
00:07:00,240 --> 00:07:03,440
you can bypass these rules

159
00:07:03,440 --> 00:07:06,560
by using for example bash lobbing

160
00:07:06,560 --> 00:07:09,120
patterns

161
00:07:09,360 --> 00:07:12,960
bash standard white cards or aka

162
00:07:12,960 --> 00:07:15,840
globin patterns are used by various

163
00:07:15,840 --> 00:07:17,120
command line

164
00:07:17,120 --> 00:07:21,120
utilities to work with multiple files

165
00:07:21,120 --> 00:07:23,680
and if you want more information about

166
00:07:23,680 --> 00:07:26,000
web passwords you can

167
00:07:26,000 --> 00:07:30,000
type man 7 blob on your terminal

168
00:07:30,000 --> 00:07:32,479
and so you can bypass this kind of rules

169
00:07:32,479 --> 00:07:34,800
by using globin patterns replacing

170
00:07:34,800 --> 00:07:37,440
some charges with a question mark for

171
00:07:37,440 --> 00:07:38,639
example

172
00:07:38,639 --> 00:07:42,080
or replacing almost all characters with

173
00:07:42,080 --> 00:07:45,280
question marks or you can even use

174
00:07:45,280 --> 00:07:49,120
chapter range syntax as

175
00:07:49,120 --> 00:07:52,240
as shown in this example you can do very

176
00:07:52,240 --> 00:07:54,639
crazy things with a

177
00:07:54,639 --> 00:07:58,800
character range syntax

178
00:07:58,800 --> 00:08:01,919
uh this is a a proof of concept that i

179
00:08:01,919 --> 00:08:02,960
made using a

180
00:08:02,960 --> 00:08:06,560
web as a service that as you can see

181
00:08:06,560 --> 00:08:10,000
is blocking my attempt to get the etsy

182
00:08:10,000 --> 00:08:11,759
password content

183
00:08:11,759 --> 00:08:16,160
this is the payload i i try to inject

184
00:08:16,960 --> 00:08:22,239
i i try to inject bing cat etsy password

185
00:08:22,720 --> 00:08:26,400
to get the etsy partial content

186
00:08:27,440 --> 00:08:30,479
and the waffle reply with the response

187
00:08:30,479 --> 00:08:31,199
status

188
00:08:31,199 --> 00:08:34,320
403 forbidden with a landing page that

189
00:08:34,320 --> 00:08:34,799
say

190
00:08:34,799 --> 00:08:41,839
access denied as you can see here

191
00:08:41,839 --> 00:08:44,480
it was really easy to bypass it by

192
00:08:44,480 --> 00:08:45,360
replacing

193
00:08:45,360 --> 00:08:48,480
almost all charges of my payload

194
00:08:48,480 --> 00:08:52,080
with a question mark as you can see here

195
00:08:52,080 --> 00:08:54,880
and as you can see i managed to get the

196
00:08:54,880 --> 00:08:56,959
etsy password content so

197
00:08:56,959 --> 00:09:00,720
uh being cat and hc password

198
00:09:00,720 --> 00:09:03,920
uh i i haven't sent the hc

199
00:09:03,920 --> 00:09:07,200
password string anywhere in the in the

200
00:09:07,200 --> 00:09:10,080
http request so i i managed to bypass

201
00:09:10,080 --> 00:09:12,640
this rule

202
00:09:12,640 --> 00:09:15,920
uh another way to bypass this

203
00:09:15,920 --> 00:09:18,959
same kind of rules is to use

204
00:09:18,959 --> 00:09:21,040
string concatenation and escape

205
00:09:21,040 --> 00:09:23,519
sequences

206
00:09:23,519 --> 00:09:26,560
in many programming languages we

207
00:09:26,560 --> 00:09:29,680
can concatenate strings by using for

208
00:09:29,680 --> 00:09:30,399
example the

209
00:09:30,399 --> 00:09:34,399
the plus operator and for example

210
00:09:34,399 --> 00:09:37,680
hello plus word has the value hello

211
00:09:37,680 --> 00:09:39,120
world

212
00:09:39,120 --> 00:09:41,360
in other languages we have different

213
00:09:41,360 --> 00:09:42,240
operator for

214
00:09:42,240 --> 00:09:46,080
for example the dot impel and php

215
00:09:46,080 --> 00:09:51,839
or the double dot in lua etc

216
00:09:51,920 --> 00:09:55,279
and in in a few languages and scripting

217
00:09:55,279 --> 00:09:56,160
languages

218
00:09:56,160 --> 00:09:58,560
there is something called the string

219
00:09:58,560 --> 00:10:00,880
literal concatenation

220
00:10:00,880 --> 00:10:04,000
meaning that adhesion string leaders

221
00:10:04,000 --> 00:10:06,560
are concatenated without any operator

222
00:10:06,560 --> 00:10:07,440
you can

223
00:10:07,440 --> 00:10:10,480
use you

224
00:10:10,480 --> 00:10:13,680
don't have to to to put an operator to

225
00:10:13,680 --> 00:10:15,920
concatenate

226
00:10:15,920 --> 00:10:18,959
for example hello world

227
00:10:18,959 --> 00:10:22,959
hello and word has the value hello world

228
00:10:22,959 --> 00:10:25,519
and this works not only for printf and

229
00:10:25,519 --> 00:10:26,720
eco comments but

230
00:10:26,720 --> 00:10:33,839
it works for the the wall bash syntax

231
00:10:35,920 --> 00:10:39,200
so uh let's say again that a web

232
00:10:39,200 --> 00:10:40,800
application file is blocking your

233
00:10:40,800 --> 00:10:42,480
exploit attempt

234
00:10:42,480 --> 00:10:44,720
because a regular expression intercepts

235
00:10:44,720 --> 00:10:46,240
a command

236
00:10:46,240 --> 00:10:49,440
for example being cat or a common file

237
00:10:49,440 --> 00:10:50,000
path

238
00:10:50,000 --> 00:10:51,680
inside your request for example let's

239
00:10:51,680 --> 00:10:53,440
see password

240
00:10:53,440 --> 00:10:56,399
you can easily bypass it by using string

241
00:10:56,399 --> 00:10:59,360
concatenation like this

242
00:10:59,360 --> 00:11:03,200
this is an example on my terminal

243
00:11:03,519 --> 00:11:06,880
and you can even use

244
00:11:06,880 --> 00:11:10,959
escape sequences like this example

245
00:11:13,040 --> 00:11:16,079
okay in in this proof of concept i have

246
00:11:16,079 --> 00:11:19,040
injecting the payload injected the

247
00:11:19,040 --> 00:11:22,160
payload using string concatenation

248
00:11:22,160 --> 00:11:25,200
and i was able to bypass these waff

249
00:11:25,200 --> 00:11:26,160
rules

250
00:11:26,160 --> 00:11:29,120
and get the etsy partial content as you

251
00:11:29,120 --> 00:11:31,760
can see here

252
00:11:33,279 --> 00:11:36,560
and this is the same injection but using

253
00:11:36,560 --> 00:11:39,518
escape sequences

254
00:11:40,000 --> 00:11:45,120
and here is the etsy password content

255
00:11:46,399 --> 00:11:49,040
another bypass technique exploiting a

256
00:11:49,040 --> 00:11:51,120
remote command execution

257
00:11:51,120 --> 00:11:54,959
is to use an initialized variable

258
00:11:54,959 --> 00:11:58,480
uh by default uh bash threats

259
00:11:58,480 --> 00:12:00,880
uh an initialized variable like pearl

260
00:12:00,880 --> 00:12:02,639
does for example

261
00:12:02,639 --> 00:12:06,959
uh they are basically blank string

262
00:12:06,959 --> 00:12:09,600
and the problem is that the problem is

263
00:12:09,600 --> 00:12:11,519
is not a problem is is the way

264
00:12:11,519 --> 00:12:14,880
it works actually is that it

265
00:12:14,880 --> 00:12:18,480
it's even possible to execute commands

266
00:12:18,480 --> 00:12:20,480
uh concatenated with an initialized

267
00:12:20,480 --> 00:12:21,680
variables

268
00:12:21,680 --> 00:12:24,959
and they can be used inside arguments

269
00:12:24,959 --> 00:12:26,320
too

270
00:12:26,320 --> 00:12:29,519
so a pin an initialized variable

271
00:12:29,519 --> 00:12:32,000
cut an initialized variable is

272
00:12:32,000 --> 00:12:33,760
translated by batch variable

273
00:12:33,760 --> 00:12:35,120
substitution

274
00:12:35,120 --> 00:12:39,279
to a blank string and it becomes bean

275
00:12:39,279 --> 00:12:43,279
empty string cut empty string etc

276
00:12:43,279 --> 00:12:45,680
and it works as as you can see in my

277
00:12:45,680 --> 00:12:46,480
example

278
00:12:46,480 --> 00:12:49,600
in on my on my terminal

279
00:12:49,600 --> 00:12:53,200
and in this screenshot you can see

280
00:12:53,200 --> 00:12:55,760
a famous web application file as a

281
00:12:55,760 --> 00:12:57,120
service

282
00:12:57,120 --> 00:13:00,000
that is blocking my exploit attempts i

283
00:13:00,000 --> 00:13:01,839
don't know if you can read the

284
00:13:01,839 --> 00:13:04,000
highlight of the injection in on the on

285
00:13:04,000 --> 00:13:05,920
the address bar

286
00:13:05,920 --> 00:13:08,480
i'm trying to inject cut its password on

287
00:13:08,480 --> 00:13:09,200
the

288
00:13:09,200 --> 00:13:12,560
host argument on the query string

289
00:13:12,560 --> 00:13:15,920
and by exploiting the same

290
00:13:15,920 --> 00:13:17,760
remote command execution on the same web

291
00:13:17,760 --> 00:13:19,200
application firewall

292
00:13:19,200 --> 00:13:22,000
i managed to receive a reverse shell on

293
00:13:22,000 --> 00:13:23,920
the bottom left

294
00:13:23,920 --> 00:13:26,800
by injecting the the payload on the top

295
00:13:26,800 --> 00:13:27,360
right

296
00:13:27,360 --> 00:13:30,639
using an initialized variable as you can

297
00:13:30,639 --> 00:13:31,360
see

298
00:13:31,360 --> 00:13:34,480
on the top right i use netcat i

299
00:13:34,480 --> 00:13:36,720
initialize a variable being initialized

300
00:13:36,720 --> 00:13:39,360
variable bash i initialize the variable

301
00:13:39,360 --> 00:13:40,320
etc

302
00:13:40,320 --> 00:13:43,920
and i get the reverse shell

303
00:13:43,920 --> 00:13:48,880
on the bottom left

304
00:13:48,880 --> 00:13:51,680
uh you know this is not the the only

305
00:13:51,680 --> 00:13:52,399
syntax

306
00:13:52,399 --> 00:13:55,760
you can you can use

307
00:13:55,760 --> 00:13:59,120
uh because you can even use uh

308
00:13:59,120 --> 00:14:03,920
brace for example or common substitution

309
00:14:03,920 --> 00:14:07,199
or even complete the command using

310
00:14:07,199 --> 00:14:11,680
echo inside common substitution

311
00:14:13,760 --> 00:14:16,800
okay let's talk about

312
00:14:16,800 --> 00:14:19,279
php the following two are my favorite

313
00:14:19,279 --> 00:14:20,800
technique at all

314
00:14:20,800 --> 00:14:23,519
let's say that you discover a remote

315
00:14:23,519 --> 00:14:25,199
code execution inside

316
00:14:25,199 --> 00:14:28,800
a php web application but

317
00:14:28,800 --> 00:14:31,279
web application firewall blocks your

318
00:14:31,279 --> 00:14:34,320
request if contains php function name

319
00:14:34,320 --> 00:14:37,440
inside the http request such as

320
00:14:37,440 --> 00:14:41,279
system passthrough exec

321
00:14:41,279 --> 00:14:44,160
eval and trust me many web application

322
00:14:44,160 --> 00:14:46,880
firewall does it

323
00:14:46,880 --> 00:14:50,079
you can bypass it by using together

324
00:14:50,079 --> 00:14:53,760
uh two things php escape sequences

325
00:14:53,760 --> 00:14:59,839
and php variable function

326
00:15:00,320 --> 00:15:03,839
php escape sequences uh basically

327
00:15:03,839 --> 00:15:06,160
makes you able to specify a string by

328
00:15:06,160 --> 00:15:06,959
using

329
00:15:06,959 --> 00:15:09,760
a sequence of charts in octal notation

330
00:15:09,760 --> 00:15:11,120
for example

331
00:15:11,120 --> 00:15:13,360
or sequence of charts in excitation

332
00:15:13,360 --> 00:15:15,120
annotation

333
00:15:15,120 --> 00:15:19,279
or sequence of unicode code point

334
00:15:19,279 --> 00:15:23,600
and php variable function

335
00:15:23,600 --> 00:15:26,880
makes you able to call a php function

336
00:15:26,880 --> 00:15:30,560
by using string as as shown in this

337
00:15:30,560 --> 00:15:32,800
example

338
00:15:32,800 --> 00:15:36,000
and you can even assign a function name

339
00:15:36,000 --> 00:15:38,720
as a string to a variable and then using

340
00:15:38,720 --> 00:15:39,360
it

341
00:15:39,360 --> 00:15:42,160
then using this variable to call the

342
00:15:42,160 --> 00:15:43,279
function

343
00:15:43,279 --> 00:15:47,040
as shown in the in the last line

344
00:15:47,040 --> 00:15:50,720
so by using both techniques

345
00:15:50,720 --> 00:15:53,360
you can call for example the system

346
00:15:53,360 --> 00:15:54,639
function

347
00:15:54,639 --> 00:15:58,399
without sending the string system

348
00:15:58,399 --> 00:16:01,839
anywhere inside the http request

349
00:16:01,839 --> 00:16:04,800
you can convert each character of this

350
00:16:04,800 --> 00:16:05,920
string system

351
00:16:05,920 --> 00:16:09,600
into hexadecimal escape sequences

352
00:16:09,600 --> 00:16:12,639
and each sequence is converted back by

353
00:16:12,639 --> 00:16:13,519
php

354
00:16:13,519 --> 00:16:16,800
as in this example s y s t

355
00:16:16,800 --> 00:16:22,240
e m etc

356
00:16:22,240 --> 00:16:25,120
in this proof of concept i managed to

357
00:16:25,120 --> 00:16:26,079
bypass the

358
00:16:26,079 --> 00:16:28,079
web application firewall using both

359
00:16:28,079 --> 00:16:29,120
techniques

360
00:16:29,120 --> 00:16:32,000
shown before as you can see in the in

361
00:16:32,000 --> 00:16:33,920
the top right

362
00:16:33,920 --> 00:16:37,040
the payload i use the

363
00:16:37,040 --> 00:16:40,399
escape sequences in order to

364
00:16:40,399 --> 00:16:43,519
don't send the system string on

365
00:16:43,519 --> 00:16:46,720
inside the http request and

366
00:16:46,720 --> 00:16:51,199
i'm trying to execute cut etsy password

367
00:16:51,199 --> 00:16:54,160
putting an initialized variable after

368
00:16:54,160 --> 00:16:55,360
etsy

369
00:16:55,360 --> 00:16:58,320
dollar u for example and as you can see

370
00:16:58,320 --> 00:16:59,920
i managed to

371
00:16:59,920 --> 00:17:05,039
to get the etsy password content

372
00:17:05,039 --> 00:17:07,919
okay but what if a web application

373
00:17:07,919 --> 00:17:08,799
forward blocks

374
00:17:08,799 --> 00:17:11,599
the double quote charter and single

375
00:17:11,599 --> 00:17:13,919
quote character

376
00:17:13,919 --> 00:17:16,959
you don't worry because php makes you

377
00:17:16,959 --> 00:17:20,240
able to specify your string even without

378
00:17:20,240 --> 00:17:23,679
using single or double quote i i know

379
00:17:23,679 --> 00:17:27,760
this is crazy but you can you can do it

380
00:17:27,760 --> 00:17:30,559
you can even use the concatenation

381
00:17:30,559 --> 00:17:31,360
without

382
00:17:31,360 --> 00:17:35,280
quotes and you can use comment

383
00:17:35,280 --> 00:17:39,280
too inside the concatenated strings

384
00:17:39,280 --> 00:17:42,559
as you can see in this example

385
00:17:42,559 --> 00:17:46,000
and here you can see that i

386
00:17:46,000 --> 00:17:48,000
managed to bypass the web application

387
00:17:48,000 --> 00:17:50,240
firewall by using these techniques

388
00:17:50,240 --> 00:17:52,720
without using double quotes or single

389
00:17:52,720 --> 00:17:54,000
quotes in the payload

390
00:17:54,000 --> 00:17:57,360
on the top right and i get the

391
00:17:57,360 --> 00:18:00,480
um icom and output on the

392
00:18:00,480 --> 00:18:04,400
on the response body on the bottom left

393
00:18:06,080 --> 00:18:09,520
okay this is an interesting one and

394
00:18:09,520 --> 00:18:12,640
a rule bypass by abusing the php

395
00:18:12,640 --> 00:18:15,760
queries team parser

396
00:18:15,760 --> 00:18:19,520
as you might know a php converts

397
00:18:19,520 --> 00:18:22,559
query string in the url or

398
00:18:22,559 --> 00:18:25,200
inside the body for example when you

399
00:18:25,200 --> 00:18:25,840
send

400
00:18:25,840 --> 00:18:28,880
an http requests we content type

401
00:18:28,880 --> 00:18:29,919
application

402
00:18:29,919 --> 00:18:32,960
www for our marlin code

403
00:18:32,960 --> 00:18:36,240
uh to an associative array inside the

404
00:18:36,240 --> 00:18:39,039
for example the global variable dollar

405
00:18:39,039 --> 00:18:39,600
get or

406
00:18:39,600 --> 00:18:43,039
dollar post for example the questing

407
00:18:43,039 --> 00:18:43,919
through

408
00:18:43,919 --> 00:18:48,799
equals bar becomes an associative array

409
00:18:48,799 --> 00:18:52,240
in which foo is the is the key

410
00:18:52,240 --> 00:18:56,080
and bar is the value okay

411
00:18:56,080 --> 00:18:59,600
uh in order to do it php needs to

412
00:18:59,600 --> 00:19:00,559
converts

413
00:19:00,559 --> 00:19:04,240
all arguments into or

414
00:19:04,240 --> 00:19:07,440
yeah argument name into a valid variable

415
00:19:07,440 --> 00:19:08,480
name

416
00:19:08,480 --> 00:19:11,840
so when the query string is passed php

417
00:19:11,840 --> 00:19:13,760
does two main things

418
00:19:13,760 --> 00:19:17,440
it removes leading white space

419
00:19:17,440 --> 00:19:21,440
and converts some chart to underscore

420
00:19:21,440 --> 00:19:24,480
for example the questing

421
00:19:24,480 --> 00:19:27,200
uh the the argument name foo underscore

422
00:19:27,200 --> 00:19:28,480
bar

423
00:19:28,480 --> 00:19:32,880
uh it's the full underscore bar it's the

424
00:19:32,880 --> 00:19:33,280
key

425
00:19:33,280 --> 00:19:35,679
of the associative array inside the

426
00:19:35,679 --> 00:19:36,720
global

427
00:19:36,720 --> 00:19:39,760
dollar get variable but

428
00:19:39,760 --> 00:19:42,559
if you put a white space before fu

429
00:19:42,559 --> 00:19:43,600
underscore bar

430
00:19:43,600 --> 00:19:47,679
php remove it and your argument name

431
00:19:47,679 --> 00:19:48,480
becomes

432
00:19:48,480 --> 00:19:52,720
the same variable name it becomes fu

433
00:19:52,720 --> 00:19:53,679
underscore bar

434
00:19:53,679 --> 00:19:55,919
inside the global variable named dollar

435
00:19:55,919 --> 00:19:57,919
get

436
00:19:57,919 --> 00:20:01,200
if you put a white space between

437
00:20:01,200 --> 00:20:04,400
fu bar replacing the underscore

438
00:20:04,400 --> 00:20:06,880
php convert your white space to an

439
00:20:06,880 --> 00:20:09,280
underscore so it becomes the same

440
00:20:09,280 --> 00:20:12,480
variable name fu underscore bar inside

441
00:20:12,480 --> 00:20:16,000
the associative array dollar get

442
00:20:16,000 --> 00:20:20,080
even if you use a left square bracket

443
00:20:20,080 --> 00:20:22,640
if you replace the underscore with a

444
00:20:22,640 --> 00:20:24,240
left square bracket

445
00:20:24,240 --> 00:20:27,440
php convert your left square bracket

446
00:20:27,440 --> 00:20:30,559
to an underscore again so it's again

447
00:20:30,559 --> 00:20:33,039
the same variable name full underscore

448
00:20:33,039 --> 00:20:34,080
bar inside

449
00:20:34,080 --> 00:20:38,880
the the get uh global variable

450
00:20:38,880 --> 00:20:41,039
you know uh this is this is not really

451
00:20:41,039 --> 00:20:43,600
well documented in php documentation

452
00:20:43,600 --> 00:20:46,720
so i created a script uh that

453
00:20:46,720 --> 00:20:50,240
loops through all charters in the ascii

454
00:20:50,240 --> 00:20:54,000
tables to find all possible combination

455
00:20:54,000 --> 00:20:54,799
that

456
00:20:54,799 --> 00:20:57,600
php converts always to the same variable

457
00:20:57,600 --> 00:20:58,799
name

458
00:20:58,799 --> 00:21:02,640
and this is my my script and

459
00:21:02,640 --> 00:21:05,760
as you can see you can use a

460
00:21:05,760 --> 00:21:08,240
white space or plus character at the

461
00:21:08,240 --> 00:21:09,120
beginning

462
00:21:09,120 --> 00:21:12,880
of the argument name you can replace the

463
00:21:12,880 --> 00:21:16,240
underscore with a white spade with a

464
00:21:16,240 --> 00:21:19,520
plus character with a dot or with a

465
00:21:19,520 --> 00:21:23,520
a left square bracket and finally

466
00:21:23,520 --> 00:21:25,440
you can use another character at the end

467
00:21:25,440 --> 00:21:27,600
of the argument name

468
00:21:27,600 --> 00:21:31,520
in all these cases php converts

469
00:21:31,520 --> 00:21:34,080
the argument name to the same variable

470
00:21:34,080 --> 00:21:35,679
name through underscore

471
00:21:35,679 --> 00:21:39,840
bar and

472
00:21:39,840 --> 00:21:42,799
you can exploit this you can use these

473
00:21:42,799 --> 00:21:44,480
functionalities dispersing

474
00:21:44,480 --> 00:21:48,000
to bypass rules obviously

475
00:21:48,000 --> 00:21:51,120
and this is a siricata rule

476
00:21:51,120 --> 00:21:54,559
by positive technology and for those who

477
00:21:54,559 --> 00:21:55,919
don't know it

478
00:21:55,919 --> 00:21:59,120
srikata is an open source ids ips

479
00:21:59,120 --> 00:22:02,720
and this rule now is fixed they are very

480
00:22:02,720 --> 00:22:06,400
quickly on fixing it um was created to

481
00:22:06,400 --> 00:22:08,080
prevent

482
00:22:08,080 --> 00:22:11,600
the and block the drupal gaddon to

483
00:22:11,600 --> 00:22:13,200
exploit

484
00:22:13,200 --> 00:22:15,200
and as you can see in the highlighted

485
00:22:15,200 --> 00:22:18,320
line the the rule looks like

486
00:22:18,320 --> 00:22:21,679
looks inside the the request body

487
00:22:21,679 --> 00:22:24,000
uh for string like asus underscore

488
00:22:24,000 --> 00:22:25,039
called back

489
00:22:25,039 --> 00:22:27,280
pre-underscore render post underscore

490
00:22:27,280 --> 00:22:28,240
render

491
00:22:28,240 --> 00:22:32,559
or lizzy underscore binder etc

492
00:22:32,559 --> 00:22:36,240
and it was really easy to bypass it

493
00:22:36,240 --> 00:22:38,559
as we have seen before by replacing the

494
00:22:38,559 --> 00:22:39,440
underscore

495
00:22:39,440 --> 00:22:42,960
chapter to the left square bracket

496
00:22:42,960 --> 00:22:46,159
character inside the argument name and

497
00:22:46,159 --> 00:22:48,240
exploit the remote code execution on

498
00:22:48,240 --> 00:22:49,919
drupal

499
00:22:49,919 --> 00:22:53,520
as you can see i have replaced the

500
00:22:53,520 --> 00:22:56,799
underscore on the argument post render

501
00:22:56,799 --> 00:22:58,880
with our left square bracket and php

502
00:22:58,880 --> 00:23:00,080
convert it back

503
00:23:00,080 --> 00:23:03,679
to an underscore so i bypassed the

504
00:23:03,679 --> 00:23:06,720
i managed to bypass the ips rule

505
00:23:06,720 --> 00:23:09,200
and exploit the remote code execution on

506
00:23:09,200 --> 00:23:11,679
drupal

507
00:23:12,240 --> 00:23:16,000
okay let's talk about cross-scripting

508
00:23:16,000 --> 00:23:19,679
so your target seems to be vulnerable to

509
00:23:19,679 --> 00:23:21,280
cross-scripting but

510
00:23:21,280 --> 00:23:23,520
all your attempts to exploit it are

511
00:23:23,520 --> 00:23:24,880
blocked by filters

512
00:23:24,880 --> 00:23:29,520
or input validation or rules

513
00:23:29,520 --> 00:23:32,159
and let's see how to bypass them by

514
00:23:32,159 --> 00:23:32,880
using

515
00:23:32,880 --> 00:23:36,880
script global variable as i said before

516
00:23:36,880 --> 00:23:37,679
many

517
00:23:37,679 --> 00:23:41,039
filters try to intercept the the

518
00:23:41,039 --> 00:23:44,080
injection of javascript code by blocking

519
00:23:44,080 --> 00:23:47,600
a list a list of bad words

520
00:23:47,600 --> 00:23:50,720
not allo not allowed inside a request

521
00:23:50,720 --> 00:23:51,840
for example

522
00:23:51,840 --> 00:23:56,720
alert for example document cookie

523
00:23:56,720 --> 00:24:00,080
or when you use space

524
00:24:00,080 --> 00:24:03,440
between objects or when you use comments

525
00:24:03,440 --> 00:24:03,840
between

526
00:24:03,840 --> 00:24:07,279
objects and and so on

527
00:24:07,279 --> 00:24:10,400
and in this case a javascript global

528
00:24:10,400 --> 00:24:13,039
variable could be used to bypass

529
00:24:13,039 --> 00:24:16,640
this kind of rule and we have got

530
00:24:16,640 --> 00:24:20,320
many way to access the document.cookie

531
00:24:20,320 --> 00:24:23,279
from the windows global variable or the

532
00:24:23,279 --> 00:24:24,080
self

533
00:24:24,080 --> 00:24:29,440
global object for example something like

534
00:24:29,440 --> 00:24:32,640
selecting the cookie object inside the

535
00:24:32,640 --> 00:24:35,039
document object inside the

536
00:24:35,039 --> 00:24:39,039
global window object

537
00:24:39,039 --> 00:24:44,400
will not be blocked by a weak filter

538
00:24:44,840 --> 00:24:46,640
and

539
00:24:46,640 --> 00:24:50,400
here i have put this uh table

540
00:24:50,400 --> 00:24:52,559
with three example that the first

541
00:24:52,559 --> 00:24:53,760
example is

542
00:24:53,760 --> 00:24:56,960
what i said before uh selecting cookie

543
00:24:56,960 --> 00:24:57,679
select

544
00:24:57,679 --> 00:25:00,720
inside the document objects and select

545
00:25:00,720 --> 00:25:03,039
the document object inside the window

546
00:25:03,039 --> 00:25:07,600
object or you can call the alert

547
00:25:07,600 --> 00:25:10,880
function from the window object

548
00:25:10,880 --> 00:25:13,520
and you obviously obviously you can use

549
00:25:13,520 --> 00:25:14,000
command

550
00:25:14,000 --> 00:25:19,200
2 in order to bypass a weak filter

551
00:25:20,000 --> 00:25:23,760
okay this is an example on my

552
00:25:23,760 --> 00:25:27,200
on my browser using this this

553
00:25:27,200 --> 00:25:30,400
kind of syntax

554
00:25:32,080 --> 00:25:35,919
okay i don't know uh how many of you

555
00:25:35,919 --> 00:25:39,440
are penetration testers but

556
00:25:39,440 --> 00:25:42,720
it often happens to me uh

557
00:25:42,720 --> 00:25:45,840
to to see customers that patch their

558
00:25:45,840 --> 00:25:47,360
cross-scripting vulnerability

559
00:25:47,360 --> 00:25:50,880
vulnerable code by removing some

560
00:25:50,880 --> 00:25:53,760
character from from the user from the

561
00:25:53,760 --> 00:25:56,480
user input

562
00:25:56,720 --> 00:26:00,080
i don't know if this happened to you too

563
00:26:00,080 --> 00:26:02,000
but i really see often this kind of

564
00:26:02,000 --> 00:26:03,120
approach

565
00:26:03,120 --> 00:26:07,600
and often developers use

566
00:26:07,600 --> 00:26:10,400
encoding function as as a quick and

567
00:26:10,400 --> 00:26:12,159
dirty way to sanitize an

568
00:26:12,159 --> 00:26:15,600
untrusted user input for example

569
00:26:15,600 --> 00:26:17,760
converting spatial charts to

570
00:26:17,760 --> 00:26:20,960
html entities and

571
00:26:20,960 --> 00:26:23,440
it may appear a good injection killer to

572
00:26:23,440 --> 00:26:24,080
convert

573
00:26:24,080 --> 00:26:26,799
charts such as single quotes double

574
00:26:26,799 --> 00:26:28,000
quotes semicolon

575
00:26:28,000 --> 00:26:31,039
etc to their respective

576
00:26:31,039 --> 00:26:35,120
html entity codes but

577
00:26:35,120 --> 00:26:39,279
in the javascript context it isn't

578
00:26:39,279 --> 00:26:41,600
always a good way to prevent storage or

579
00:26:41,600 --> 00:26:43,840
reflected cross-scripting

580
00:26:43,840 --> 00:26:47,919
as you can see here my payload

581
00:26:47,919 --> 00:26:51,039
i try to inject a payload using

582
00:26:51,039 --> 00:26:54,400
a semicolon but the

583
00:26:54,400 --> 00:26:58,640
uh the web application remove it

584
00:26:58,640 --> 00:27:01,039
and

585
00:27:03,679 --> 00:27:05,919
in in the example here you can see that

586
00:27:05,919 --> 00:27:07,840
the web application removes the semi

587
00:27:07,840 --> 00:27:08,720
column

588
00:27:08,720 --> 00:27:11,840
from my from my plan payload leading to

589
00:27:11,840 --> 00:27:14,720
a syntax error

590
00:27:17,360 --> 00:27:19,600
it's possible to to exploit

591
00:27:19,600 --> 00:27:21,360
cross-scripting vulnerability in this

592
00:27:21,360 --> 00:27:23,360
specific javascript

593
00:27:23,360 --> 00:27:26,720
context without using any semicolon

594
00:27:26,720 --> 00:27:28,000
chart by using

595
00:27:28,000 --> 00:27:32,720
javascript arithmetic operators

596
00:27:33,039 --> 00:27:35,039
not only in javascript argumentative

597
00:27:35,039 --> 00:27:36,159
operators you can use

598
00:27:36,159 --> 00:27:39,039
bitwise operators logical and or

599
00:27:39,039 --> 00:27:42,240
operators etc

600
00:27:44,559 --> 00:27:47,200
as you can see i changed the payload

601
00:27:47,200 --> 00:27:48,799
that i used before

602
00:27:48,799 --> 00:27:53,120
using the subtraction operator instead

603
00:27:53,120 --> 00:27:57,039
instead of a semicolon and

604
00:27:57,039 --> 00:28:01,120
this makes the browser to execute

605
00:28:01,120 --> 00:28:04,240
first all function and then do the

606
00:28:04,240 --> 00:28:07,360
aromatic operator

607
00:28:07,360 --> 00:28:12,080
as you can see in in this screenshot

608
00:28:14,080 --> 00:28:17,919
okay subtraction is obviously

609
00:28:17,919 --> 00:28:20,799
is not the only operator you can use

610
00:28:20,799 --> 00:28:22,559
indeed you can use

611
00:28:22,559 --> 00:28:25,679
you can bypass the this weak input

612
00:28:25,679 --> 00:28:27,279
sanitization

613
00:28:27,279 --> 00:28:30,480
uh using bitwise or bitwise

614
00:28:30,480 --> 00:28:34,399
sir comma division multiplication

615
00:28:34,399 --> 00:28:35,440
reminder

616
00:28:35,440 --> 00:28:38,720
subtraction obviously in operator

617
00:28:38,720 --> 00:28:45,360
and so on

618
00:28:45,360 --> 00:28:48,480
okay uh i've talked about how

619
00:28:48,480 --> 00:28:51,760
to bypass weak filters validation

620
00:28:51,760 --> 00:28:54,799
and uh of the of the user input

621
00:28:54,799 --> 00:28:58,240
and web application firewall rules but

622
00:28:58,240 --> 00:29:01,279
are all web application firewall weak as

623
00:29:01,279 --> 00:29:04,880
we have seen before uh

624
00:29:04,880 --> 00:29:06,480
talking about application firewall

625
00:29:06,480 --> 00:29:09,440
bypass usually when i publish a bypass

626
00:29:09,440 --> 00:29:10,240
technique

627
00:29:10,240 --> 00:29:12,720
the the there's always someone who

628
00:29:12,720 --> 00:29:13,919
comments

629
00:29:13,919 --> 00:29:17,520
uh okay so all waff are useless uh

630
00:29:17,520 --> 00:29:20,320
okay uh they don't really protect a web

631
00:29:20,320 --> 00:29:21,520
application

632
00:29:21,520 --> 00:29:25,520
um are there really people that use evil

633
00:29:25,520 --> 00:29:26,000
inside

634
00:29:26,000 --> 00:29:30,000
their code and something like that

635
00:29:30,000 --> 00:29:33,679
in my opinion we absolutely need to stop

636
00:29:33,679 --> 00:29:36,480
treating web application firewalls as a

637
00:29:36,480 --> 00:29:37,440
specialized

638
00:29:37,440 --> 00:29:40,080
intrusion prevention system for the http

639
00:29:40,080 --> 00:29:42,000
protocol

640
00:29:42,000 --> 00:29:45,600
what a waf is not a specialized ips

641
00:29:45,600 --> 00:29:48,880
for the http protocol

642
00:29:48,880 --> 00:29:52,640
a web application firewall has or should

643
00:29:52,640 --> 00:29:54,240
have

644
00:29:54,240 --> 00:29:57,520
many other use cases like application

645
00:29:57,520 --> 00:29:59,440
security monitoring

646
00:29:59,440 --> 00:30:03,120
policy enforcement bad bot detection

647
00:30:03,120 --> 00:30:05,840
denier service mitigation javascript

648
00:30:05,840 --> 00:30:06,399
challenge

649
00:30:06,399 --> 00:30:11,120
and so on uh

650
00:30:11,120 --> 00:30:14,320
i mean i i think that it's not all about

651
00:30:14,320 --> 00:30:15,200
the rules

652
00:30:15,200 --> 00:30:18,559
or the rules that you you use and

653
00:30:18,559 --> 00:30:20,640
talking about rules that obviously the

654
00:30:20,640 --> 00:30:22,880
rules that you use is the

655
00:30:22,880 --> 00:30:26,000
game changer if you use

656
00:30:26,000 --> 00:30:29,679
a weak route set to prevent as much fast

657
00:30:29,679 --> 00:30:32,080
positive as possible

658
00:30:32,080 --> 00:30:35,200
you are not doing you are not doing

659
00:30:35,200 --> 00:30:38,080
a great job in my opinion to protect

660
00:30:38,080 --> 00:30:38,720
your

661
00:30:38,720 --> 00:30:41,600
web applications

662
00:30:43,120 --> 00:30:46,799
i spent many years working on

663
00:30:46,799 --> 00:30:50,320
web application files and mode security

664
00:30:50,320 --> 00:30:52,159
mod security is an open source web

665
00:30:52,159 --> 00:30:54,480
application firewall widely used by

666
00:30:54,480 --> 00:30:56,559
many vendors and and companies to

667
00:30:56,559 --> 00:30:59,039
protect their application

668
00:30:59,039 --> 00:31:03,600
and mod security is the engine

669
00:31:03,600 --> 00:31:07,039
and let's let's you able to create uh

670
00:31:07,039 --> 00:31:10,559
sakuras and

671
00:31:10,559 --> 00:31:14,000
there are some public rules that you can

672
00:31:14,000 --> 00:31:14,720
use

673
00:31:14,720 --> 00:31:18,399
with mod security and working with it

674
00:31:18,399 --> 00:31:22,559
and and talking about rules that i

675
00:31:22,559 --> 00:31:25,279
and i never found the rule set more

676
00:31:25,279 --> 00:31:26,640
effective than

677
00:31:26,640 --> 00:31:28,799
the oscar rules that for for many

678
00:31:28,799 --> 00:31:29,679
reasons

679
00:31:29,679 --> 00:31:32,240
the divorce multicultural rule set is an

680
00:31:32,240 --> 00:31:35,039
open source rule set format security

681
00:31:35,039 --> 00:31:38,799
and it's an active project and widely

682
00:31:38,799 --> 00:31:41,200
used

683
00:31:42,080 --> 00:31:45,120
it protects from generic attacks and not

684
00:31:45,120 --> 00:31:45,600
only for

685
00:31:45,600 --> 00:31:49,279
specific exploit or vulnerabilities

686
00:31:49,279 --> 00:31:52,880
it has very few fast positives

687
00:31:52,880 --> 00:31:55,679
and it could work in a in a

688
00:31:55,679 --> 00:31:56,960
self-contained mode

689
00:31:56,960 --> 00:32:00,080
or anomaly score mode self-contained

690
00:32:00,080 --> 00:32:01,840
mode means that you can block the

691
00:32:01,840 --> 00:32:02,559
request

692
00:32:02,559 --> 00:32:05,840
on c hits the first rule and this is how

693
00:32:05,840 --> 00:32:09,200
must we application firewall works or

694
00:32:09,200 --> 00:32:12,240
it it can work in a normal score mode

695
00:32:12,240 --> 00:32:15,679
which means that a request goes through

696
00:32:15,679 --> 00:32:18,960
all rules and each rules assign a score

697
00:32:18,960 --> 00:32:19,840
on it

698
00:32:19,840 --> 00:32:22,640
if the score reaches a configured

699
00:32:22,640 --> 00:32:23,679
threshold

700
00:32:23,679 --> 00:32:26,000
you can block the request or you can

701
00:32:26,000 --> 00:32:29,440
create an alert or something like that

702
00:32:29,440 --> 00:32:32,480
and the euroskull ruleset has four

703
00:32:32,480 --> 00:32:33,039
different

704
00:32:33,039 --> 00:32:37,039
paranoia levels and i think one of the

705
00:32:37,039 --> 00:32:40,080
main functionalities of the

706
00:32:40,080 --> 00:32:42,799
ovasco rules that for me is that you can

707
00:32:42,799 --> 00:32:44,080
configure

708
00:32:44,080 --> 00:32:47,679
uh your wall application or some area of

709
00:32:47,679 --> 00:32:50,000
your application using four different

710
00:32:50,000 --> 00:32:52,320
parallel levels

711
00:32:52,320 --> 00:32:56,720
basically each level add stricter rules

712
00:32:56,720 --> 00:32:59,200
at the default levels is paranoia level

713
00:32:59,200 --> 00:33:00,000
one

714
00:33:00,000 --> 00:33:02,799
and the paranoia level one is designed

715
00:33:02,799 --> 00:33:03,279
to have

716
00:33:03,279 --> 00:33:06,799
near zero fast positives and the highest

717
00:33:06,799 --> 00:33:09,279
level of the paranoia is the paranoia

718
00:33:09,279 --> 00:33:11,279
level four

719
00:33:11,279 --> 00:33:14,399
so you can start with the first level

720
00:33:14,399 --> 00:33:17,360
and you can even check other levels

721
00:33:17,360 --> 00:33:18,960
rules without blocking

722
00:33:18,960 --> 00:33:21,679
any requests to see if and how many fast

723
00:33:21,679 --> 00:33:23,200
positive you have in either

724
00:33:23,200 --> 00:33:25,679
paranoia levels and you can tune the

725
00:33:25,679 --> 00:33:26,480
rule set

726
00:33:26,480 --> 00:33:28,559
in order to increase step by step the

727
00:33:28,559 --> 00:33:29,760
paranoia level

728
00:33:29,760 --> 00:33:33,440
for your web application and

729
00:33:33,440 --> 00:33:36,320
at oscar roosevelt we constantly work in

730
00:33:36,320 --> 00:33:39,039
order to mitigate bypass techniques

731
00:33:39,039 --> 00:33:41,840
and in my opinion having a way to

732
00:33:41,840 --> 00:33:44,960
increase step by step the number of rule

733
00:33:44,960 --> 00:33:47,200
you add in your rule set is a great way

734
00:33:47,200 --> 00:33:48,399
to mitigate bypass

735
00:33:48,399 --> 00:33:51,440
or and to increase

736
00:33:51,440 --> 00:33:55,039
your application security okay

737
00:33:55,039 --> 00:33:57,679
i'm i'm not saying that is your silver

738
00:33:57,679 --> 00:33:58,720
ballot

739
00:33:58,720 --> 00:34:01,840
uh not at all but

740
00:34:01,840 --> 00:34:04,240
i think it's something which it is

741
00:34:04,240 --> 00:34:05,279
something

742
00:34:05,279 --> 00:34:07,760
which gives you a good level of security

743
00:34:07,760 --> 00:34:08,320
for

744
00:34:08,320 --> 00:34:11,679
a minimum investment of resources of

745
00:34:11,679 --> 00:34:15,599
money etc the

746
00:34:15,599 --> 00:34:19,679
oscar ruleset is used by many web

747
00:34:19,679 --> 00:34:21,520
mini web application firewall vendors

748
00:34:21,520 --> 00:34:23,759
like

749
00:34:23,839 --> 00:34:27,918
akamai like microsoft azure

750
00:34:27,918 --> 00:34:32,719
google cloud armor git lab etc

751
00:34:32,719 --> 00:34:34,719
we have two colleagues christian foley

752
00:34:34,719 --> 00:34:36,320
and walter hope we have

753
00:34:36,320 --> 00:34:39,918
almost 10 developers including me

754
00:34:39,918 --> 00:34:43,599
and we have a lot of contributors from

755
00:34:43,599 --> 00:34:46,639
from the open source community

756
00:34:46,639 --> 00:34:50,719
and this is an interesting comparison

757
00:34:50,719 --> 00:34:53,760
made by fractal uh in the link

758
00:34:53,760 --> 00:34:57,119
here you can find a related art article

759
00:34:57,119 --> 00:35:00,160
and the the comparison

760
00:35:00,160 --> 00:35:03,760
shows that wealth using overscore roots

761
00:35:03,760 --> 00:35:04,640
that has

762
00:35:04,640 --> 00:35:07,440
an higher percentage of blocked attacks

763
00:35:07,440 --> 00:35:08,320
than

764
00:35:08,320 --> 00:35:11,280
other well vacation firewall that use

765
00:35:11,280 --> 00:35:14,240
custom rules at

766
00:35:14,800 --> 00:35:18,000
okay uh before reaching

767
00:35:18,000 --> 00:35:21,040
the the end uh i would like to recommend

768
00:35:21,040 --> 00:35:21,760
you

769
00:35:21,760 --> 00:35:24,320
three interesting books the the first

770
00:35:24,320 --> 00:35:25,040
one is

771
00:35:25,040 --> 00:35:27,119
what security handbook by christian

772
00:35:27,119 --> 00:35:30,160
fellini and evan rixtich

773
00:35:30,160 --> 00:35:33,760
and this is a a really interesting book

774
00:35:33,760 --> 00:35:37,040
i have learned a lot reading this book

775
00:35:37,040 --> 00:35:40,480
and it helps you to

776
00:35:40,480 --> 00:35:43,040
know better how much security work and

777
00:35:43,040 --> 00:35:43,920
no matter

778
00:35:43,920 --> 00:35:47,280
how our rules a web application firewall

779
00:35:47,280 --> 00:35:48,640
rules works

780
00:35:48,640 --> 00:35:51,920
uh how a webrequestion firewall impacts

781
00:35:51,920 --> 00:35:55,040
on performance etc

782
00:35:55,040 --> 00:35:57,280
the second one is the the web

783
00:35:57,280 --> 00:35:58,320
application defenders

784
00:35:58,320 --> 00:36:01,440
cookbook by ryan barnett and

785
00:36:01,440 --> 00:36:05,359
it gives you many ideas on

786
00:36:05,359 --> 00:36:08,560
uh how to protect your application

787
00:36:08,560 --> 00:36:11,760
and how you use mod security for example

788
00:36:11,760 --> 00:36:12,000
to

789
00:36:12,000 --> 00:36:15,200
protect better your web application

790
00:36:15,200 --> 00:36:17,440
and the third one is web application

791
00:36:17,440 --> 00:36:19,280
affordation by

792
00:36:19,280 --> 00:36:22,960
mario hedrich eduardo alberto velanava

793
00:36:22,960 --> 00:36:26,320
gareth highs and david and

794
00:36:26,320 --> 00:36:29,440
it's it is a really interesting book

795
00:36:29,440 --> 00:36:29,920
that

796
00:36:29,920 --> 00:36:33,440
show you many ways to test

797
00:36:33,440 --> 00:36:37,119
your application and obfuscate your

798
00:36:37,119 --> 00:36:40,480
your payload so

799
00:36:40,480 --> 00:36:42,880
thank you very much for for having me i

800
00:36:42,880 --> 00:36:44,160
i really appreciate

801
00:36:44,160 --> 00:36:46,079
uh if you would like to give me your

802
00:36:46,079 --> 00:36:47,920
feedback by scanning this

803
00:36:47,920 --> 00:36:50,720
query code uh if you want to keep in

804
00:36:50,720 --> 00:36:51,200
touch

805
00:36:51,200 --> 00:36:54,079
you can reach me on twitter leakadine

806
00:36:54,079 --> 00:36:56,400
and i have started an english youtube

807
00:36:56,400 --> 00:37:00,160
channel in which i publish a translated

808
00:37:00,160 --> 00:37:01,040
video from

809
00:37:01,040 --> 00:37:04,400
our best security italian channel

810
00:37:04,400 --> 00:37:08,079
thank you thank you very much okay thank

811
00:37:08,079 --> 00:37:09,599
you andrea

812
00:37:09,599 --> 00:37:12,880
i have one question actually

813
00:37:12,880 --> 00:37:16,240
it isn't on the youtube chat but it is a

814
00:37:16,240 --> 00:37:16,800
question

815
00:37:16,800 --> 00:37:19,920
from one of our teammates and

816
00:37:19,920 --> 00:37:22,560
the question is how did you assemble the

817
00:37:22,560 --> 00:37:23,119
tax

818
00:37:23,119 --> 00:37:27,040
test corpus for the waff benchmark table

819
00:37:27,040 --> 00:37:29,760
is it something standard or generated

820
00:37:29,760 --> 00:37:32,800
specifically by your wasp

821
00:37:32,800 --> 00:37:35,359
okay the the the comparison i showed

822
00:37:35,359 --> 00:37:36,079
before

823
00:37:36,079 --> 00:37:39,119
is made by fractal it's nothing uh

824
00:37:39,119 --> 00:37:42,240
so it's not something that i do it uh

825
00:37:42,240 --> 00:37:46,879
they have uh um i i

826
00:37:47,280 --> 00:37:50,560
i think that you you you you need to

827
00:37:50,560 --> 00:37:53,680
to read the the the wall article to

828
00:37:53,680 --> 00:37:57,119
to gain all the information on on which

829
00:37:57,119 --> 00:38:00,320
they have uh create

830
00:38:00,320 --> 00:38:03,359
the the benchmark uh they basically used

831
00:38:03,359 --> 00:38:04,720
the um

832
00:38:04,720 --> 00:38:07,440
category of attacks or payload and

833
00:38:07,440 --> 00:38:08,240
tested it

834
00:38:08,240 --> 00:38:11,280
against uh many were application

835
00:38:11,280 --> 00:38:12,400
firewalls but

836
00:38:12,400 --> 00:38:15,599
it's not something that uh i do i does

837
00:38:15,599 --> 00:38:19,280
and i i think you have to to to read the

838
00:38:19,280 --> 00:38:19,680
world

839
00:38:19,680 --> 00:38:21,599
the word article to to have more

840
00:38:21,599 --> 00:38:24,240
information about it

841
00:38:24,240 --> 00:38:29,839
okay thank you

