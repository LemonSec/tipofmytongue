1
00:00:03,840 --> 00:00:04,720
hi everyone

2
00:00:04,720 --> 00:00:07,359
and thanks for participating in this

3
00:00:07,359 --> 00:00:08,240
talk

4
00:00:08,240 --> 00:00:09,760
during the presentation i will talk

5
00:00:09,760 --> 00:00:12,240
about the risk associated with the

6
00:00:12,240 --> 00:00:14,880
iot devices and in particular i will

7
00:00:14,880 --> 00:00:16,960
share my personal research on

8
00:00:16,960 --> 00:00:20,080
security cameras and

9
00:00:20,080 --> 00:00:21,760
before we even start i would like to

10
00:00:21,760 --> 00:00:23,760
briefly introduce myself

11
00:00:23,760 --> 00:00:26,000
i'm pietro oliva and that's my twitter

12
00:00:26,000 --> 00:00:27,279
handle

13
00:00:27,279 --> 00:00:30,480
i currently work with researcher

14
00:00:30,480 --> 00:00:34,160
as mattel said and i previously worked

15
00:00:34,160 --> 00:00:36,000
also for sony jp morgan sc

16
00:00:36,000 --> 00:00:38,239
group pwc and gmv in a variety of

17
00:00:38,239 --> 00:00:39,920
different security roles

18
00:00:39,920 --> 00:00:42,320
which include also red teaming

19
00:00:42,320 --> 00:00:46,079
penetration testing and security audit

20
00:00:46,079 --> 00:00:48,320
now let's talk about the agenda what are

21
00:00:48,320 --> 00:00:49,520
we going to see

22
00:00:49,520 --> 00:00:52,719
during the course of this talk so first

23
00:00:52,719 --> 00:00:54,480
of all why would they even perform

24
00:00:54,480 --> 00:00:56,079
research in account what's interesting

25
00:00:56,079 --> 00:00:58,079
about it

26
00:00:58,079 --> 00:01:00,079
then the next thing will be talking

27
00:01:00,079 --> 00:01:02,160
about what's been done before

28
00:01:02,160 --> 00:01:04,640
so what was the information available to

29
00:01:04,640 --> 00:01:06,880
me before even starting

30
00:01:06,880 --> 00:01:09,920
and and then once i figured out what was

31
00:01:09,920 --> 00:01:11,680
done before then i put myself into a

32
00:01:11,680 --> 00:01:13,840
challenge that we'll see

33
00:01:13,840 --> 00:01:16,159
very soon and then i will describe what

34
00:01:16,159 --> 00:01:18,560
are all the steps that i took

35
00:01:18,560 --> 00:01:22,799
to achieve success in this challenge

36
00:01:22,799 --> 00:01:25,040
and then i will talk briefly about what

37
00:01:25,040 --> 00:01:27,119
are the lessons learned

38
00:01:27,119 --> 00:01:28,880
and possible future work on these

39
00:01:28,880 --> 00:01:33,040
cameras and conclusions and q a

40
00:01:33,040 --> 00:01:34,720
so let's get started why would they even

41
00:01:34,720 --> 00:01:37,600
perform security search on a camera

42
00:01:37,600 --> 00:01:39,680
well the starting point was that many

43
00:01:39,680 --> 00:01:41,439
people just say all these devices are

44
00:01:41,439 --> 00:01:42,960
not secure

45
00:01:42,960 --> 00:01:45,200
and i say okay that's fair enough but i

46
00:01:45,200 --> 00:01:47,840
want to verify these claims by myself

47
00:01:47,840 --> 00:01:50,159
and i was also looking for a challenge

48
00:01:50,159 --> 00:01:52,320
and a learning opportunity so

49
00:01:52,320 --> 00:01:53,759
i thought this will tick all the boxes

50
00:01:53,759 --> 00:01:56,640
for me to start looking into it

51
00:01:56,640 --> 00:01:58,479
so let's talk about the previous work

52
00:01:58,479 --> 00:01:59,759
once i bought this camera

53
00:01:59,759 --> 00:02:01,200
i get out of the store and the first

54
00:02:01,200 --> 00:02:03,240
thing i do is to google this

55
00:02:03,240 --> 00:02:06,479
nc200 camera and i find

56
00:02:06,479 --> 00:02:09,520
these vulnerability from

57
00:02:09,520 --> 00:02:13,920
march 2016 and it's a command injection

58
00:02:13,920 --> 00:02:16,440
affecting these two cameras nc200 and

59
00:02:16,440 --> 00:02:19,200
c220

60
00:02:19,200 --> 00:02:20,879
now this was already patched on the

61
00:02:20,879 --> 00:02:22,560
latest film version so it's not very

62
00:02:22,560 --> 00:02:24,000
exciting

63
00:02:24,000 --> 00:02:26,400
and i also thought is there really only

64
00:02:26,400 --> 00:02:28,080
one one vanilla video effect in this

65
00:02:28,080 --> 00:02:29,520
camera is it possible that

66
00:02:29,520 --> 00:02:31,920
they made it so well that this is the

67
00:02:31,920 --> 00:02:33,120
only thing that i can find on the

68
00:02:33,120 --> 00:02:35,440
internet

69
00:02:35,440 --> 00:02:38,080
so that's when i started putting myself

70
00:02:38,080 --> 00:02:39,599
into a challenge and the challenge was

71
00:02:39,599 --> 00:02:41,519
to hack the latest and greatest

72
00:02:41,519 --> 00:02:44,560
firmware image and i wanted to do it in

73
00:02:44,560 --> 00:02:46,000
a special way because remember i was

74
00:02:46,000 --> 00:02:46,640
trying to

75
00:02:46,640 --> 00:02:48,000
get something out of it i wanted the

76
00:02:48,000 --> 00:02:50,000
learning experience not just hacking

77
00:02:50,000 --> 00:02:53,360
it by any means so i started from

78
00:02:53,360 --> 00:02:54,959
the hardware because i want to learn a

79
00:02:54,959 --> 00:02:56,959
bit of hardware and

80
00:02:56,959 --> 00:02:59,280
how to dump the flash and all these

81
00:02:59,280 --> 00:03:01,440
things so i dump the flash

82
00:03:01,440 --> 00:03:04,239
and performing reverse engineering so

83
00:03:04,239 --> 00:03:05,760
deliberately excluding uh

84
00:03:05,760 --> 00:03:08,959
fuzzing and black box sort of test

85
00:03:08,959 --> 00:03:11,200
and the interesting thing was that this

86
00:03:11,200 --> 00:03:12,879
also

87
00:03:12,879 --> 00:03:14,959
different architecture than what i was

88
00:03:14,959 --> 00:03:16,159
used to so

89
00:03:16,159 --> 00:03:17,599
this was a good opportunity for me to

90
00:03:17,599 --> 00:03:19,680
learn some mips

91
00:03:19,680 --> 00:03:22,080
and some other interesting constraint i

92
00:03:22,080 --> 00:03:22,879
put myself

93
00:03:22,879 --> 00:03:24,560
was to use some tool that was free and

94
00:03:24,560 --> 00:03:27,040
open source so everyone could

95
00:03:27,040 --> 00:03:30,400
replicate my steps

96
00:03:30,400 --> 00:03:33,599
without having to afford any expensive

97
00:03:33,599 --> 00:03:35,519
reverse engineering to license or

98
00:03:35,519 --> 00:03:37,280
anything like that and something that i

99
00:03:37,280 --> 00:03:38,879
could use

100
00:03:38,879 --> 00:03:40,480
basically everywhere because i like a

101
00:03:40,480 --> 00:03:42,239
lot to do some

102
00:03:42,239 --> 00:03:44,879
hiking on the go so without any sort of

103
00:03:44,879 --> 00:03:47,280
operation like i found that

104
00:03:47,280 --> 00:03:49,040
there is this tool called radar that i'm

105
00:03:49,040 --> 00:03:50,959
sure most of you know

106
00:03:50,959 --> 00:03:52,400
that is service engineering tool that

107
00:03:52,400 --> 00:03:53,920
can basically run almost everywhere

108
00:03:53,920 --> 00:03:57,200
including on a mobile phone

109
00:03:58,080 --> 00:04:00,959
so hardware analysis and flash damping

110
00:04:00,959 --> 00:04:03,040
how did they start

111
00:04:03,040 --> 00:04:04,560
so the first thing that i did was to

112
00:04:04,560 --> 00:04:06,640
literally just take pictures of the main

113
00:04:06,640 --> 00:04:07,120
board

114
00:04:07,120 --> 00:04:09,680
of the camera which you can see here at

115
00:04:09,680 --> 00:04:12,000
the bottom

116
00:04:12,000 --> 00:04:16,478
and also search on google this

117
00:04:16,478 --> 00:04:19,680
this picture and the way i found it was

118
00:04:19,680 --> 00:04:24,160
you see this fcc sort of logo

119
00:04:24,160 --> 00:04:26,479
this is basically a standard for

120
00:04:26,479 --> 00:04:28,080
electronic devices

121
00:04:28,080 --> 00:04:31,520
and they all have this id that

122
00:04:31,520 --> 00:04:33,759
if you search it online of the on the

123
00:04:33,759 --> 00:04:34,639
official website

124
00:04:34,639 --> 00:04:36,479
of the fcc which is an organizational

125
00:04:36,479 --> 00:04:37,530
controls

126
00:04:37,530 --> 00:04:38,639
[Music]

127
00:04:38,639 --> 00:04:41,840
radiation emission from electronic

128
00:04:41,840 --> 00:04:42,720
devices

129
00:04:42,720 --> 00:04:45,759
you can find all the documentation and

130
00:04:45,759 --> 00:04:49,040
internal pictures of the electronics

131
00:04:49,040 --> 00:04:49,600
that they

132
00:04:49,600 --> 00:04:52,880
basically index and this was very useful

133
00:04:52,880 --> 00:04:54,400
in my case because i didn't have to for

134
00:04:54,400 --> 00:04:56,000
example open this metal shield

135
00:04:56,000 --> 00:04:58,560
in order to see what was inside and i

136
00:04:58,560 --> 00:04:59,919
could clearly see

137
00:04:59,919 --> 00:05:03,840
that it was this processor and this ram

138
00:05:03,840 --> 00:05:05,680
now without this i would probably have

139
00:05:05,680 --> 00:05:07,120
to

140
00:05:07,120 --> 00:05:09,360
remove this and probably risk him to

141
00:05:09,360 --> 00:05:10,160
prick

142
00:05:10,160 --> 00:05:12,400
my device so it was really handy for me

143
00:05:12,400 --> 00:05:13,199
to

144
00:05:13,199 --> 00:05:16,720
to find that now apart from that

145
00:05:16,720 --> 00:05:18,320
this is great we know the processor and

146
00:05:18,320 --> 00:05:20,479
the ram but we need to know more

147
00:05:20,479 --> 00:05:22,880
so i started literally just searching

148
00:05:22,880 --> 00:05:24,240
all these labels

149
00:05:24,240 --> 00:05:26,320
these components will just have ids that

150
00:05:26,320 --> 00:05:27,360
you can search

151
00:05:27,360 --> 00:05:28,960
on the internet and you will find data

152
00:05:28,960 --> 00:05:31,199
sheets very likely if they are not

153
00:05:31,199 --> 00:05:33,199
something really unknown or really

154
00:05:33,199 --> 00:05:34,560
custom

155
00:05:34,560 --> 00:05:36,160
so what i figured out was that there

156
00:05:36,160 --> 00:05:37,680
were this to

157
00:05:37,680 --> 00:05:40,720
flash memories that are spi speak the

158
00:05:40,720 --> 00:05:41,680
spi protocol

159
00:05:41,680 --> 00:05:45,600
and i dumped them

160
00:05:45,600 --> 00:05:49,840
so that was the initial step

161
00:05:50,479 --> 00:05:53,440
now once i figure out that we had the

162
00:05:53,440 --> 00:05:55,039
splash how did i dump them

163
00:05:55,039 --> 00:05:58,080
i mean how what was the process that i

164
00:05:58,080 --> 00:05:58,800
took

165
00:05:58,800 --> 00:06:00,960
so i use the bus card you can use any

166
00:06:00,960 --> 00:06:01,840
other tools but

167
00:06:01,840 --> 00:06:04,880
it's just the tool that i had at hand at

168
00:06:04,880 --> 00:06:05,440
the moment

169
00:06:05,440 --> 00:06:07,360
so what it does it's this board that you

170
00:06:07,360 --> 00:06:10,080
can see in the background of this light

171
00:06:10,080 --> 00:06:12,160
and basically it gives you a serial port

172
00:06:12,160 --> 00:06:13,199
on your laptop

173
00:06:13,199 --> 00:06:15,199
you connect it via usb and it gives you

174
00:06:15,199 --> 00:06:17,919
a serial port that interfaces

175
00:06:17,919 --> 00:06:21,039
automatically with the all the spi

176
00:06:21,039 --> 00:06:24,080
chips or even i2c or

177
00:06:24,080 --> 00:06:26,720
it speaks a range of protocols and you

178
00:06:26,720 --> 00:06:28,639
can just use it as a proxy

179
00:06:28,639 --> 00:06:32,000
to talk to your devices and in order to

180
00:06:32,000 --> 00:06:33,039
do that i use the

181
00:06:33,039 --> 00:06:36,160
flashroom which is basically a tool that

182
00:06:36,160 --> 00:06:37,600
automates

183
00:06:37,600 --> 00:06:39,520
these commands that you send over serial

184
00:06:39,520 --> 00:06:40,720
so instead of

185
00:06:40,720 --> 00:06:44,400
me manually typing every command dump

186
00:06:44,400 --> 00:06:47,520
basically box blocks of

187
00:06:47,520 --> 00:06:50,160
bytes one at a time i just use a tool

188
00:06:50,160 --> 00:06:51,520
that automates that process

189
00:06:51,520 --> 00:06:54,160
so it will do that correctly without any

190
00:06:54,160 --> 00:06:54,960
sort of

191
00:06:54,960 --> 00:06:57,520
problems and i figured out finally that

192
00:06:57,520 --> 00:06:59,199
the eight megabytes flash

193
00:06:59,199 --> 00:07:01,120
contained the main firmware so we got

194
00:07:01,120 --> 00:07:02,720
lucky

195
00:07:02,720 --> 00:07:06,479
let's see now what we do with this

196
00:07:06,479 --> 00:07:08,400
so once we get this raw image it's just

197
00:07:08,400 --> 00:07:10,400
in a raw format you need to do some

198
00:07:10,400 --> 00:07:11,599
tooling to

199
00:07:11,599 --> 00:07:13,360
kind of extract it and further analyze

200
00:07:13,360 --> 00:07:16,000
it so in my case i use bin walk

201
00:07:16,000 --> 00:07:18,800
plus jefferson for file system

202
00:07:18,800 --> 00:07:19,520
extraction

203
00:07:19,520 --> 00:07:21,919
basically it just it's just scanning

204
00:07:21,919 --> 00:07:22,800
signatures

205
00:07:22,800 --> 00:07:25,360
until it finds for example the jefferson

206
00:07:25,360 --> 00:07:26,560
file system

207
00:07:26,560 --> 00:07:30,000
and then it invokes jefferson to do the

208
00:07:30,000 --> 00:07:30,400
firm

209
00:07:30,400 --> 00:07:33,120
the first system extraction itself and

210
00:07:33,120 --> 00:07:34,240
as i mentioned before

211
00:07:34,240 --> 00:07:36,880
i decided to use radar as the main us

212
00:07:36,880 --> 00:07:38,720
engineering tool

213
00:07:38,720 --> 00:07:41,440
and i picked one target which is one of

214
00:07:41,440 --> 00:07:42,639
the most critical

215
00:07:42,639 --> 00:07:45,120
binary in this firmware which is the

216
00:07:45,120 --> 00:07:46,080
finally called ip

217
00:07:46,080 --> 00:07:49,680
camera this basically handling all the

218
00:07:49,680 --> 00:07:55,440
http requests going to the fcgis

219
00:07:55,840 --> 00:07:56,800
now let's talk about some

220
00:07:56,800 --> 00:07:58,960
vulnerabilities that i found using this

221
00:07:58,960 --> 00:08:00,270
technique

222
00:08:00,270 --> 00:08:02,319
[Music]

223
00:08:02,319 --> 00:08:04,639
the first one is as you can read it's an

224
00:08:04,639 --> 00:08:05,840
all pointed reference

225
00:08:05,840 --> 00:08:09,759
and this is a login function

226
00:08:09,759 --> 00:08:11,440
it's a function that gets called when

227
00:08:11,440 --> 00:08:13,599
you from login on the web interface of

228
00:08:13,599 --> 00:08:15,120
the camera

229
00:08:15,120 --> 00:08:17,039
and as you can see here i will lock you

230
00:08:17,039 --> 00:08:18,400
briefly through the code

231
00:08:18,400 --> 00:08:19,840
you have two arguments username and

232
00:08:19,840 --> 00:08:21,680
password which are user controlled they

233
00:08:21,680 --> 00:08:22,879
go to this

234
00:08:22,879 --> 00:08:25,039
much password method that just checks

235
00:08:25,039 --> 00:08:27,599
your config file for your password

236
00:08:27,599 --> 00:08:29,919
and if it's incorrect it just keeps the

237
00:08:29,919 --> 00:08:31,120
entire block

238
00:08:31,120 --> 00:08:32,880
and will give you some authentication

239
00:08:32,880 --> 00:08:34,719
failure message otherwise

240
00:08:34,719 --> 00:08:37,839
it goes ahead and defense the first

241
00:08:37,839 --> 00:08:39,360
thing it does once the authentication is

242
00:08:39,360 --> 00:08:41,039
successful is to check

243
00:08:41,039 --> 00:08:43,279
what is your browser so it takes the

244
00:08:43,279 --> 00:08:45,519
http user agent header

245
00:08:45,519 --> 00:08:48,720
and then it takes iponter to this string

246
00:08:48,720 --> 00:08:51,920
and passes it to sdrsdr because it wants

247
00:08:51,920 --> 00:08:52,560
to check

248
00:08:52,560 --> 00:08:55,920
if your browser is firefox so as you may

249
00:08:55,920 --> 00:08:57,279
have noticed

250
00:08:57,279 --> 00:09:00,240
there is this arc 58 which is argument

251
00:09:00,240 --> 00:09:00,959
0.

252
00:09:00,959 --> 00:09:02,560
it's basically the pointer that comes

253
00:09:02,560 --> 00:09:04,959
from http attempt

254
00:09:04,959 --> 00:09:06,800
now the problem is that this will

255
00:09:06,800 --> 00:09:09,040
normally work until you remove the user

256
00:09:09,040 --> 00:09:09,920
agent error

257
00:09:09,920 --> 00:09:11,360
because if you remove it then this

258
00:09:11,360 --> 00:09:13,360
method will return a new pointer

259
00:09:13,360 --> 00:09:14,560
and then you're going to have a new

260
00:09:14,560 --> 00:09:16,640
pointed reference right here

261
00:09:16,640 --> 00:09:20,320
when you call strstr so

262
00:09:20,320 --> 00:09:22,560
because of this bug basically when you

263
00:09:22,560 --> 00:09:24,480
trigger it all the web interface goes

264
00:09:24,480 --> 00:09:24,880
down

265
00:09:24,880 --> 00:09:27,360
because you cannot do anything without

266
00:09:27,360 --> 00:09:28,240
this binary

267
00:09:28,240 --> 00:09:31,680
running so this was the first back

268
00:09:31,680 --> 00:09:34,160
and of course after as a result of this

269
00:09:34,160 --> 00:09:36,399
bug i started the event with the

270
00:09:36,399 --> 00:09:39,519
disclosure process with tp-link

271
00:09:39,519 --> 00:09:42,959
so i put a list of stages to kind of

272
00:09:42,959 --> 00:09:44,240
show what is the pain

273
00:09:44,240 --> 00:09:46,800
of this process just to show how long it

274
00:09:46,800 --> 00:09:49,680
takes to get something fixed

275
00:09:49,680 --> 00:09:52,000
so i started reporting it on the 4th of

276
00:09:52,000 --> 00:09:54,080
december 2019

277
00:09:54,080 --> 00:09:56,240
and the answer i got from tp-link was

278
00:09:56,240 --> 00:09:58,000
yeah the account is not supported

279
00:09:58,000 --> 00:09:58,560
anymore

280
00:09:58,560 --> 00:10:01,920
so basically kind of we don't care

281
00:10:01,920 --> 00:10:04,800
i said okay fine so i left it there for

282
00:10:04,800 --> 00:10:05,279
a bit

283
00:10:05,279 --> 00:10:07,200
and then i said you know what i'm going

284
00:10:07,200 --> 00:10:09,519
to see if other cameras are affected

285
00:10:09,519 --> 00:10:11,600
so maybe they're not unsupported and

286
00:10:11,600 --> 00:10:15,120
they will be forced to fix it

287
00:10:15,120 --> 00:10:18,320
and after a short time

288
00:10:18,320 --> 00:10:21,200
i realized that all of the nce serious

289
00:10:21,200 --> 00:10:22,640
cameras were affected by the same

290
00:10:22,640 --> 00:10:25,040
vulnerability

291
00:10:25,040 --> 00:10:27,519
and after warning them they didn't take

292
00:10:27,519 --> 00:10:28,399
any action

293
00:10:28,399 --> 00:10:31,120
and i decided after almost four months

294
00:10:31,120 --> 00:10:33,600
to drop it as a zero day

295
00:10:33,600 --> 00:10:37,600
and magically after roughly a week

296
00:10:37,600 --> 00:10:40,640
they fixed it so they needed a little

297
00:10:40,640 --> 00:10:42,480
extra push

298
00:10:42,480 --> 00:10:44,720
to find the motivation to fix the

299
00:10:44,720 --> 00:10:46,240
vulnerabilities and they fixed it in all

300
00:10:46,240 --> 00:10:47,839
the cameras

301
00:10:47,839 --> 00:10:49,680
and starting from there they started

302
00:10:49,680 --> 00:10:51,600
taking the reports and deadlines

303
00:10:51,600 --> 00:10:55,040
much more seriously and

304
00:10:55,040 --> 00:10:56,480
in the end i promised that i wouldn't

305
00:10:56,480 --> 00:10:58,640
report any more issues as a result of

306
00:10:58,640 --> 00:10:59,519
them

307
00:10:59,519 --> 00:11:02,560
asking me can you please confirm

308
00:11:02,560 --> 00:11:04,480
this is the last issue we report because

309
00:11:04,480 --> 00:11:06,640
we have released two firmware updates

310
00:11:06,640 --> 00:11:10,000
in the past two months so i said okay

311
00:11:10,000 --> 00:11:12,240
fine

312
00:11:13,600 --> 00:11:15,360
okay let's talk about the next pack now

313
00:11:15,360 --> 00:11:17,839
this is a stack overflow

314
00:11:17,839 --> 00:11:20,720
what is this about so we have this

315
00:11:20,720 --> 00:11:22,240
feature that is called

316
00:11:22,240 --> 00:11:25,120
delete multi-user method and what it

317
00:11:25,120 --> 00:11:26,720
does is exactly what it says it deletes

318
00:11:26,720 --> 00:11:29,360
multiple users the way it does it is

319
00:11:29,360 --> 00:11:31,040
basically creates a proper to this

320
00:11:31,040 --> 00:11:32,480
delete user method

321
00:11:32,480 --> 00:11:35,120
and basically goes in a loop and in this

322
00:11:35,120 --> 00:11:35,680
loop

323
00:11:35,680 --> 00:11:37,839
it takes the usernames and just deletes

324
00:11:37,839 --> 00:11:39,680
them it's a comma separated list of

325
00:11:39,680 --> 00:11:41,040
usernames

326
00:11:41,040 --> 00:11:43,040
now the way it does it is it deletes the

327
00:11:43,040 --> 00:11:44,079
user

328
00:11:44,079 --> 00:11:47,519
and then takes the error code

329
00:11:47,519 --> 00:11:49,200
and it puts it into a string that is

330
00:11:49,200 --> 00:11:50,880
stored on the stack

331
00:11:50,880 --> 00:11:54,399
and then the string is then concatenated

332
00:11:54,399 --> 00:11:56,639
in an array that is again on the stack

333
00:11:56,639 --> 00:11:58,399
it's basically

334
00:11:58,399 --> 00:12:00,800
a concatenation of error codes from all

335
00:12:00,800 --> 00:12:02,880
the deletion operation

336
00:12:02,880 --> 00:12:06,000
right the thing is if you look closely

337
00:12:06,000 --> 00:12:06,560
at this

338
00:12:06,560 --> 00:12:09,680
at this loop it will basically go until

339
00:12:09,680 --> 00:12:13,680
the next comma is found and it will just

340
00:12:13,680 --> 00:12:16,399
if it's uh zero it means that there is

341
00:12:16,399 --> 00:12:17,839
no next comma so it just

342
00:12:17,839 --> 00:12:19,680
breaks the loop otherwise it will keep

343
00:12:19,680 --> 00:12:21,279
looping as you may

344
00:12:21,279 --> 00:12:22,800
have noticed basically we control the

345
00:12:22,800 --> 00:12:25,440
number of iterations and we are storing

346
00:12:25,440 --> 00:12:27,760
effectively i mean we are concatenating

347
00:12:27,760 --> 00:12:28,880
strings on the stack

348
00:12:28,880 --> 00:12:32,959
in this fp plus 40 because of this str

349
00:12:32,959 --> 00:12:34,639
cut

350
00:12:34,639 --> 00:12:36,320
so this means we control the number of

351
00:12:36,320 --> 00:12:38,560
iterations and we are storing

352
00:12:38,560 --> 00:12:40,240
things on the stack we are concatenating

353
00:12:40,240 --> 00:12:41,540
so this bad this

354
00:12:41,540 --> 00:12:43,760
[Music]

355
00:12:43,760 --> 00:12:46,639
buffer gets bigger and bigger and bigger

356
00:12:46,639 --> 00:12:50,000
until you basically overwrite the stack

357
00:12:50,000 --> 00:12:52,639
so this will of course crush the process

358
00:12:52,639 --> 00:12:54,800
because it's a stack overflow

359
00:12:54,800 --> 00:12:58,079
and i initially might sound

360
00:12:58,079 --> 00:13:00,240
exciting but it isn't too much because

361
00:13:00,240 --> 00:13:01,519
the only thing that we really

362
00:13:01,519 --> 00:13:04,800
partially control is the error code

363
00:13:04,800 --> 00:13:06,880
and it's very let's say unlikely that we

364
00:13:06,880 --> 00:13:09,040
will find a combination of error codes

365
00:13:09,040 --> 00:13:12,560
that will allow you to obtain

366
00:13:12,560 --> 00:13:14,720
arbitrary code execution so we classify

367
00:13:14,720 --> 00:13:17,279
this as a denial service

368
00:13:17,279 --> 00:13:18,880
and if you are wondering what the

369
00:13:18,880 --> 00:13:20,800
concept looks like looks like it's just

370
00:13:20,800 --> 00:13:21,680
something

371
00:13:21,680 --> 00:13:23,440
that you can fit in a tweet it's just

372
00:13:23,440 --> 00:13:25,200
literally usernames equal

373
00:13:25,200 --> 00:13:27,440
a bunch of commas and that is enough to

374
00:13:27,440 --> 00:13:29,680
crash the ib camera process

375
00:13:29,680 --> 00:13:32,638
which is ridiculous

376
00:13:33,040 --> 00:13:35,120
now the next bug is an according

377
00:13:35,120 --> 00:13:37,279
encryption key

378
00:13:37,279 --> 00:13:39,600
so this is there is nothing really too

379
00:13:39,600 --> 00:13:42,079
[Music]

380
00:13:42,079 --> 00:13:44,079
too complex in here i mean we can see

381
00:13:44,079 --> 00:13:45,760
that this this p backup

382
00:13:45,760 --> 00:13:49,040
file there is this link and there is an

383
00:13:49,040 --> 00:13:49,760
e-backup

384
00:13:49,760 --> 00:13:51,680
and then there is a call to des encrypt

385
00:13:51,680 --> 00:13:53,279
okay so we know everything we know there

386
00:13:53,279 --> 00:13:53,680
is a

387
00:13:53,680 --> 00:13:55,600
this encryption algorithm we know that

388
00:13:55,600 --> 00:13:57,279
there is a plane backup and an encrypted

389
00:13:57,279 --> 00:13:57,920
backup

390
00:13:57,920 --> 00:14:00,320
and there is a tp-link which is probably

391
00:14:00,320 --> 00:14:03,600
the encryption key

392
00:14:03,600 --> 00:14:05,760
now it looks straightforward right but

393
00:14:05,760 --> 00:14:07,600
we still have a problem to solve

394
00:14:07,600 --> 00:14:09,440
we know the algorithm and the encryption

395
00:14:09,440 --> 00:14:11,440
key fine

396
00:14:11,440 --> 00:14:12,959
and i was able to find a tool that will

397
00:14:12,959 --> 00:14:15,120
correctly decrypt this configuration

398
00:14:15,120 --> 00:14:17,120
files

399
00:14:17,120 --> 00:14:19,440
and i would get random data if instead i

400
00:14:19,440 --> 00:14:20,160
used

401
00:14:20,160 --> 00:14:21,760
any sort of standard that's

402
00:14:21,760 --> 00:14:23,839
implementation and i could understand

403
00:14:23,839 --> 00:14:24,240
why

404
00:14:24,240 --> 00:14:26,480
and i was thinking i was doing something

405
00:14:26,480 --> 00:14:27,600
wrong

406
00:14:27,600 --> 00:14:30,079
until i realized that you don't simply

407
00:14:30,079 --> 00:14:32,240
use an encryption key

408
00:14:32,240 --> 00:14:34,560
and this is what i figured out after

409
00:14:34,560 --> 00:14:35,839
basically checking

410
00:14:35,839 --> 00:14:38,079
all this code which by the way is hosted

411
00:14:38,079 --> 00:14:38,959
on github

412
00:14:38,959 --> 00:14:42,480
this bitcoin me this random guy

413
00:14:42,480 --> 00:14:45,600
and i compared it with the this

414
00:14:45,600 --> 00:14:47,279
standalone implementation which you can

415
00:14:47,279 --> 00:14:50,160
find some information about in wikipedia

416
00:14:50,160 --> 00:14:52,800
if you look at this initial permutation

417
00:14:52,800 --> 00:14:53,920
table

418
00:14:53,920 --> 00:14:57,120
and start comparing these constants

419
00:14:57,120 --> 00:14:58,320
you will figure out that they just

420
00:14:58,320 --> 00:15:00,240
changed one unit

421
00:15:00,240 --> 00:15:04,399
in every single value of this so

422
00:15:04,399 --> 00:15:07,279
this is the reason why i could never

423
00:15:07,279 --> 00:15:08,480
ever

424
00:15:08,480 --> 00:15:11,040
be able to decrypt this configuration

425
00:15:11,040 --> 00:15:11,680
files

426
00:15:11,680 --> 00:15:13,360
with any standard test because they

427
00:15:13,360 --> 00:15:15,600
literally changed all the constants this

428
00:15:15,600 --> 00:15:16,480
is just one

429
00:15:16,480 --> 00:15:18,240
because there isn't enough space on this

430
00:15:18,240 --> 00:15:19,680
slide to show all of the tables that

431
00:15:19,680 --> 00:15:21,199
they changed but they basically changed

432
00:15:21,199 --> 00:15:23,599
all of them

433
00:15:24,320 --> 00:15:27,440
so these are kind of um funny thought

434
00:15:27,440 --> 00:15:28,639
process that they had

435
00:15:28,639 --> 00:15:30,160
they could just use a strong encryption

436
00:15:30,160 --> 00:15:32,320
algorithm but they decided instead to

437
00:15:32,320 --> 00:15:33,279
customize

438
00:15:33,279 --> 00:15:35,120
a weak encryption algorithm so

439
00:15:35,120 --> 00:15:36,720
effectively creating a

440
00:15:36,720 --> 00:15:40,240
security by obscurity situation but of

441
00:15:40,240 --> 00:15:41,040
course

442
00:15:41,040 --> 00:15:44,240
we managed to solve the mystery so now

443
00:15:44,240 --> 00:15:45,759
we know everything and we can

444
00:15:45,759 --> 00:15:50,160
decrypt backup files and we can find

445
00:15:50,160 --> 00:15:51,680
we can figure out the structure of this

446
00:15:51,680 --> 00:15:53,600
backup files

447
00:15:53,600 --> 00:15:56,320
so this is what it looks like in a nc200

448
00:15:56,320 --> 00:15:57,040
camera

449
00:15:57,040 --> 00:15:58,480
it might be slightly different for

450
00:15:58,480 --> 00:16:00,959
others but the concept is the same

451
00:16:00,959 --> 00:16:03,040
so what they have is just a small

452
00:16:03,040 --> 00:16:04,959
leather which has a magic

453
00:16:04,959 --> 00:16:08,480
the total file size and the md5

454
00:16:08,480 --> 00:16:11,440
then some null terminated string that

455
00:16:11,440 --> 00:16:12,800
says fingerprint

456
00:16:12,800 --> 00:16:14,800
just it's just recorded there is nothing

457
00:16:14,800 --> 00:16:17,360
special about it and then some padding

458
00:16:17,360 --> 00:16:18,880
and then after the small letter you will

459
00:16:18,880 --> 00:16:20,720
find the file entries the file entries

460
00:16:20,720 --> 00:16:22,720
are very simple there are like

461
00:16:22,720 --> 00:16:24,880
four bytes for the absolute offset of

462
00:16:24,880 --> 00:16:26,800
the file content so they have this

463
00:16:26,800 --> 00:16:28,480
list of files at the beginning and then

464
00:16:28,480 --> 00:16:30,880
at the end they have the contents

465
00:16:30,880 --> 00:16:33,360
and then the file size some zero padding

466
00:16:33,360 --> 00:16:34,639
and then the

467
00:16:34,639 --> 00:16:38,320
null terminated file name plus padding

468
00:16:38,320 --> 00:16:41,440
and that's it that's what the format

469
00:16:41,440 --> 00:16:43,839
looks like

470
00:16:43,920 --> 00:16:46,880
so before we go into the demo thinking

471
00:16:46,880 --> 00:16:48,720
about this

472
00:16:48,720 --> 00:16:50,560
what we have in this configuration file

473
00:16:50,560 --> 00:16:52,959
we have

474
00:16:52,959 --> 00:16:55,839
file paths right we have paths and

475
00:16:55,839 --> 00:16:57,120
contents

476
00:16:57,120 --> 00:16:59,120
so i think this can give us arbitrary

477
00:16:59,120 --> 00:17:00,720
file alright

478
00:17:00,720 --> 00:17:03,440
so let's see how that works in practice

479
00:17:03,440 --> 00:17:06,079
in this demo

480
00:17:06,160 --> 00:17:08,319
so i prepared this little script

481
00:17:08,319 --> 00:17:09,199
one.sage

482
00:17:09,199 --> 00:17:11,039
all it does is creates a config for the

483
00:17:11,039 --> 00:17:12,559
nc200 camera

484
00:17:12,559 --> 00:17:14,880
and it includes this demo one and demo

485
00:17:14,880 --> 00:17:17,039
two stm files and it's going to upload

486
00:17:17,039 --> 00:17:17,520
them

487
00:17:17,520 --> 00:17:21,119
in user local www and then after that it

488
00:17:21,119 --> 00:17:23,039
just encrypts them

489
00:17:23,039 --> 00:17:26,079
using the nc200 key and it's going to

490
00:17:26,079 --> 00:17:28,960
output this old demo cfg file which is

491
00:17:28,960 --> 00:17:30,480
basically the encrypted configuration

492
00:17:30,480 --> 00:17:31,520
file

493
00:17:31,520 --> 00:17:32,720
now we're just going to the web

494
00:17:32,720 --> 00:17:35,280
interface

495
00:17:36,320 --> 00:17:40,320
and we're going to restore

496
00:17:40,799 --> 00:17:43,919
this backup file which is called

497
00:17:43,919 --> 00:17:48,640
all demos cfg restore

498
00:17:48,640 --> 00:17:49,679
now this is going to take a while

499
00:17:49,679 --> 00:17:51,520
because it's going to reboot the device

500
00:17:51,520 --> 00:17:54,160
because usually we'll just

501
00:17:54,160 --> 00:17:56,559
reboot because you need to know change

502
00:17:56,559 --> 00:17:57,280
some

503
00:17:57,280 --> 00:17:58,880
service configuration that needs to be

504
00:17:58,880 --> 00:18:00,880
restarted so they didn't want to go

505
00:18:00,880 --> 00:18:01,919
through

506
00:18:01,919 --> 00:18:03,600
the pain of figuring out if your change

507
00:18:03,600 --> 00:18:05,280
is required to start or not

508
00:18:05,280 --> 00:18:08,240
so they just decided to just reboot the

509
00:18:08,240 --> 00:18:09,600
entire device so

510
00:18:09,600 --> 00:18:11,520
all the services will just restart and

511
00:18:11,520 --> 00:18:15,120
everything will hopefully be fine

512
00:18:15,120 --> 00:18:17,679
right so hopefully the camera should be

513
00:18:17,679 --> 00:18:18,720
back

514
00:18:18,720 --> 00:18:22,160
relatively soon all right

515
00:18:22,160 --> 00:18:24,640
here we go

516
00:18:27,679 --> 00:18:29,440
so the first language i want to show you

517
00:18:29,440 --> 00:18:32,320
is demo one

518
00:18:32,559 --> 00:18:36,559
right cool so what did i do in here

519
00:18:36,559 --> 00:18:39,520
what i did was to just replace this

520
00:18:39,520 --> 00:18:40,880
camera frame

521
00:18:40,880 --> 00:18:44,960
with a very well known game called doom

522
00:18:44,960 --> 00:18:47,440
it's just an example right it could be

523
00:18:47,440 --> 00:18:48,320
anything really

524
00:18:48,320 --> 00:18:50,640
it's just to show that you can really do

525
00:18:50,640 --> 00:18:51,600
anything you like

526
00:18:51,600 --> 00:18:53,840
because you will basically overwrite

527
00:18:53,840 --> 00:18:55,360
files as root

528
00:18:55,360 --> 00:18:57,120
so you have all the privileges to write

529
00:18:57,120 --> 00:18:58,799
anything anywhere

530
00:18:58,799 --> 00:19:01,200
this is not very useful apart from my

531
00:19:01,200 --> 00:19:02,400
simple demo

532
00:19:02,400 --> 00:19:03,520
now i want to show you something a bit

533
00:19:03,520 --> 00:19:06,400
more useful so if you notice this

534
00:19:06,400 --> 00:19:10,320
tip you need to install a camera plugin

535
00:19:10,320 --> 00:19:12,240
in order to be able to watch the stream

536
00:19:12,240 --> 00:19:13,360
of your camera

537
00:19:13,360 --> 00:19:16,080
now i found this ridiculous in 2020 and

538
00:19:16,080 --> 00:19:17,440
i decided to

539
00:19:17,440 --> 00:19:22,080
do something about it so i made demo2

540
00:19:22,080 --> 00:19:24,480
and after i authenticate effectively you

541
00:19:24,480 --> 00:19:26,000
can say this is my hand you can see the

542
00:19:26,000 --> 00:19:27,039
live stream

543
00:19:27,039 --> 00:19:30,720
without having to install any plugins

544
00:19:30,720 --> 00:19:35,840
now let's go back to the presentation

545
00:19:37,440 --> 00:19:40,080
okay this is the next back it's about a

546
00:19:40,080 --> 00:19:42,160
new command injection

547
00:19:42,160 --> 00:19:44,799
so this command injection before we even

548
00:19:44,799 --> 00:19:46,400
start you may have noticed that

549
00:19:46,400 --> 00:19:48,240
this is a screenshot from my mobile

550
00:19:48,240 --> 00:19:50,240
phone

551
00:19:50,240 --> 00:19:51,600
this is very interesting because this is

552
00:19:51,600 --> 00:19:53,280
something that

553
00:19:53,280 --> 00:19:55,120
this is what i was talking about this is

554
00:19:55,120 --> 00:19:56,880
the

555
00:19:56,880 --> 00:19:58,480
this is proving that you can find

556
00:19:58,480 --> 00:19:59,919
security backs while

557
00:19:59,919 --> 00:20:02,320
you are bored maybe i don't know in a

558
00:20:02,320 --> 00:20:03,600
long travel in a plane

559
00:20:03,600 --> 00:20:04,799
where you have no internet connection

560
00:20:04,799 --> 00:20:06,880
you have nothing to do and just decide

561
00:20:06,880 --> 00:20:07,520
that you're going to find them

562
00:20:07,520 --> 00:20:10,080
vulnerability and maybe you'll find it

563
00:20:10,080 --> 00:20:11,280
that's what i did and that's what

564
00:20:11,280 --> 00:20:13,520
happened so let's start from

565
00:20:13,520 --> 00:20:16,880
the cm command this same command is a

566
00:20:16,880 --> 00:20:18,840
wrapper to system so it's just executing

567
00:20:18,840 --> 00:20:20,559
commands

568
00:20:20,559 --> 00:20:22,320
and if we go backwards to figure out

569
00:20:22,320 --> 00:20:24,159
what are the arguments

570
00:20:24,159 --> 00:20:26,640
we figure out that it is this echo

571
00:20:26,640 --> 00:20:28,320
percentage

572
00:20:28,320 --> 00:20:31,280
so it's second something to somewhere

573
00:20:31,280 --> 00:20:33,039
and we can see that we have this encrypt

574
00:20:33,039 --> 00:20:33,600
key

575
00:20:33,600 --> 00:20:35,600
which is something that we control as

576
00:20:35,600 --> 00:20:38,400
the user in a http request

577
00:20:38,400 --> 00:20:40,720
and then we see this tmp encrypt key so

578
00:20:40,720 --> 00:20:42,080
we know what's happening right

579
00:20:42,080 --> 00:20:43,840
it's echoing this encryption key that

580
00:20:43,840 --> 00:20:45,520
you are providing and then it's storing

581
00:20:45,520 --> 00:20:45,840
them

582
00:20:45,840 --> 00:20:49,440
in some encrypt key folder

583
00:20:49,440 --> 00:20:51,520
and then it just executes the command

584
00:20:51,520 --> 00:20:53,520
now

585
00:20:53,520 --> 00:20:54,799
as you may have noticed there is

586
00:20:54,799 --> 00:20:56,559
absolutely no check anywhere

587
00:20:56,559 --> 00:20:59,440
about this particular encryption key so

588
00:20:59,440 --> 00:21:00,640
you can effectively

589
00:21:00,640 --> 00:21:03,840
eject shell meta characters and get

590
00:21:03,840 --> 00:21:07,120
arbitrary command execution this is

591
00:21:07,120 --> 00:21:08,480
great but it only affects

592
00:21:08,480 --> 00:21:11,520
mce 260 and then c450 cameras

593
00:21:11,520 --> 00:21:14,400
it's only a feature that exists there so

594
00:21:14,400 --> 00:21:15,760
let's see if we can do something better

595
00:21:15,760 --> 00:21:17,840
than that

596
00:21:17,840 --> 00:21:20,159
and that's when we talk about this

597
00:21:20,159 --> 00:21:22,000
bonjour command injection so this

598
00:21:22,000 --> 00:21:22,960
venture service

599
00:21:22,960 --> 00:21:26,320
the way it's started is like this we can

600
00:21:26,320 --> 00:21:27,440
see this cm command

601
00:21:27,440 --> 00:21:29,120
again so it's a good sign we know that

602
00:21:29,120 --> 00:21:31,760
we are executing stuff

603
00:21:31,760 --> 00:21:35,120
and then we see this these arguments

604
00:21:35,120 --> 00:21:35,840
that are like

605
00:21:35,840 --> 00:21:37,840
mdns or standard posix and then it's

606
00:21:37,840 --> 00:21:40,000
passing this percentage

607
00:21:40,000 --> 00:21:42,159
now this percentage is going to be this

608
00:21:42,159 --> 00:21:45,120
a1 argument one which comes from v0 v0

609
00:21:45,120 --> 00:21:47,440
comes from this

610
00:21:47,440 --> 00:21:50,480
uh so

611
00:21:50,480 --> 00:21:53,360
what's going on here so we are basically

612
00:21:53,360 --> 00:21:56,240
getting the name

613
00:21:56,880 --> 00:21:59,360
right of this device and then from some

614
00:21:59,360 --> 00:22:00,720
configuration file

615
00:22:00,720 --> 00:22:05,280
then we are putting it into v0

616
00:22:05,280 --> 00:22:06,720
and then we are passing it to sim

617
00:22:06,720 --> 00:22:08,320
command so we are building this and the

618
00:22:08,320 --> 00:22:10,000
inner suspended process

619
00:22:10,000 --> 00:22:12,559
our injected command is going to be here

620
00:22:12,559 --> 00:22:13,200
and then

621
00:22:13,200 --> 00:22:15,840
everything will be okay for us we can

622
00:22:15,840 --> 00:22:18,159
execute code right

623
00:22:18,159 --> 00:22:20,000
but there is something that we need to

624
00:22:20,000 --> 00:22:21,600
take into account so it is

625
00:22:21,600 --> 00:22:24,000
before you can even set an alias there

626
00:22:24,000 --> 00:22:25,840
is this

627
00:22:25,840 --> 00:22:29,440
check that gets executed right before

628
00:22:29,440 --> 00:22:30,720
and if you look at this method there is

629
00:22:30,720 --> 00:22:32,720
nothing really special going on

630
00:22:32,720 --> 00:22:35,039
except for this strlam call with this

631
00:22:35,039 --> 00:22:36,880
alias string that we control

632
00:22:36,880 --> 00:22:38,400
so all he's doing is making sure that

633
00:22:38,400 --> 00:22:40,080
you not provide a string that is greater

634
00:22:40,080 --> 00:22:40,720
than

635
00:22:40,720 --> 00:22:44,400
this 0x81 and otherwise everything will

636
00:22:44,400 --> 00:22:44,960
be fine

637
00:22:44,960 --> 00:22:47,200
now this is true for all cameras except

638
00:22:47,200 --> 00:22:50,640
for the nc 210

639
00:22:50,640 --> 00:22:52,480
where basically this check is done

640
00:22:52,480 --> 00:22:54,000
properly and

641
00:22:54,000 --> 00:22:57,120
you cannot just set any values

642
00:22:57,120 --> 00:22:59,679
so you need to figure out a way to set

643
00:22:59,679 --> 00:23:00,799
an alias

644
00:23:00,799 --> 00:23:03,679
and then exploit this vulnerability and

645
00:23:03,679 --> 00:23:05,679
in order to do that i will combine the

646
00:23:05,679 --> 00:23:06,960
previous vulnerability

647
00:23:06,960 --> 00:23:09,520
the account encryption key to get

648
00:23:09,520 --> 00:23:11,360
arbitrary file right so i write the new

649
00:23:11,360 --> 00:23:12,720
device name

650
00:23:12,720 --> 00:23:14,960
and then i will use this command

651
00:23:14,960 --> 00:23:16,080
injection

652
00:23:16,080 --> 00:23:18,799
to take the command from that device

653
00:23:18,799 --> 00:23:20,320
name

654
00:23:20,320 --> 00:23:22,960
and this must have been the logic of the

655
00:23:22,960 --> 00:23:24,720
developers you cannot inject commands

656
00:23:24,720 --> 00:23:26,960
if you check for long strings that's

657
00:23:26,960 --> 00:23:28,000
something that

658
00:23:28,000 --> 00:23:30,640
they probably thought so this is a bug

659
00:23:30,640 --> 00:23:32,080
that i call one bag to rule them all

660
00:23:32,080 --> 00:23:34,640
because it affects all the dnc cameras

661
00:23:34,640 --> 00:23:36,480
it can be triggered very easily and it

662
00:23:36,480 --> 00:23:38,240
gives us reliable root shot

663
00:23:38,240 --> 00:23:41,440
without any problem let's see if that's

664
00:23:41,440 --> 00:23:44,080
true in the demo

665
00:23:45,200 --> 00:23:49,120
right so let's

666
00:23:49,120 --> 00:23:52,400
demo two all right so as i said i was

667
00:23:52,400 --> 00:23:53,440
going to combine two different

668
00:23:53,440 --> 00:23:55,760
vulnerabilities for dnc 210

669
00:23:55,760 --> 00:23:58,000
so i want to demonstrate that i have the

670
00:23:58,000 --> 00:23:58,880
system.com

671
00:23:58,880 --> 00:24:01,200
that is where the product name is stored

672
00:24:01,200 --> 00:24:03,840
and as you can see as a product name

673
00:24:03,840 --> 00:24:06,480
i'm putting this it's basically a

674
00:24:06,480 --> 00:24:08,080
command injection what i'm doing is

675
00:24:08,080 --> 00:24:11,679
setting some executable

676
00:24:11,679 --> 00:24:14,320
and then some file textual sorry and

677
00:24:14,320 --> 00:24:17,039
then just executing it

678
00:24:17,039 --> 00:24:19,600
now in this 2.6 what am i doing i'm

679
00:24:19,600 --> 00:24:21,600
generating a payload with metals flight

680
00:24:21,600 --> 00:24:23,760
which is going to be our payload that is

681
00:24:23,760 --> 00:24:25,919
going to be executed

682
00:24:25,919 --> 00:24:28,080
and then i'm creating a config for this

683
00:24:28,080 --> 00:24:29,279
camera

684
00:24:29,279 --> 00:24:33,120
and i'm going to upload it in system.com

685
00:24:33,120 --> 00:24:34,640
and the next thing i'm going to do is to

686
00:24:34,640 --> 00:24:37,039
add this payload

687
00:24:37,039 --> 00:24:40,720
hotel in this edc slash s

688
00:24:40,720 --> 00:24:42,960
and just encrypting this configuration

689
00:24:42,960 --> 00:24:43,760
file because

690
00:24:43,760 --> 00:24:46,320
the camera needs encrypted configuration

691
00:24:46,320 --> 00:24:48,000
file to work

692
00:24:48,000 --> 00:24:51,120
so let's run it now this will start

693
00:24:51,120 --> 00:24:52,720
automatically the

694
00:24:52,720 --> 00:24:55,440
msf console so in the meantime we go

695
00:24:55,440 --> 00:24:56,640
here

696
00:24:56,640 --> 00:25:00,640
to the web interface

697
00:25:00,640 --> 00:25:02,480
and we just upload the configuration

698
00:25:02,480 --> 00:25:06,159
file in the background file

699
00:25:06,159 --> 00:25:07,600
so this is a bit slow because it's

700
00:25:07,600 --> 00:25:11,600
running on qmo

701
00:25:12,840 --> 00:25:15,200
so demos

702
00:25:15,200 --> 00:25:18,720
to right system

703
00:25:18,720 --> 00:25:22,240
safety restore

704
00:25:23,760 --> 00:25:25,600
now this is going to reboot the camera

705
00:25:25,600 --> 00:25:27,520
again and it's going to take a while

706
00:25:27,520 --> 00:25:28,000
because it's

707
00:25:28,000 --> 00:25:30,960
in pm so i will go in the meantime to

708
00:25:30,960 --> 00:25:32,799
demo free

709
00:25:32,799 --> 00:25:35,279
demo frame what i want to show you is

710
00:25:35,279 --> 00:25:37,360
the command injection in the simple

711
00:25:37,360 --> 00:25:39,120
version which is basically without

712
00:25:39,120 --> 00:25:40,480
combining it with the

713
00:25:40,480 --> 00:25:43,279
arbitrary valve right so all i did was

714
00:25:43,279 --> 00:25:44,880
to make this metal split model that

715
00:25:44,880 --> 00:25:45,919
explode the

716
00:25:45,919 --> 00:25:47,279
poncho command injection that i showed

717
00:25:47,279 --> 00:25:49,919
you before and it's just setting some

718
00:25:49,919 --> 00:25:51,440
very simple parameters like

719
00:25:51,440 --> 00:25:55,200
the remote hose the port the target

720
00:25:55,200 --> 00:25:56,559
username and password for the web

721
00:25:56,559 --> 00:25:59,039
interface the payload just

722
00:25:59,039 --> 00:26:02,000
under the meta split payload and then

723
00:26:02,000 --> 00:26:03,520
why do you want to receive the shot

724
00:26:03,520 --> 00:26:07,440
basically so this is the nc200 version

725
00:26:07,440 --> 00:26:09,039
so i'm going to run this on the

726
00:26:09,039 --> 00:26:11,440
physical device that i have and this is

727
00:26:11,440 --> 00:26:13,840
another camera which is dnc 450 that i'm

728
00:26:13,840 --> 00:26:15,840
running in vmware as well

729
00:26:15,840 --> 00:26:19,039
so let's run both of them and let's see

730
00:26:19,039 --> 00:26:20,640
if you manage to get the shell on both

731
00:26:20,640 --> 00:26:23,279
of them all right cool

732
00:26:23,279 --> 00:26:27,039
it looks like we have a shell here yes

733
00:26:27,039 --> 00:26:29,440
and as we can see we are root and

734
00:26:29,440 --> 00:26:31,520
we can see here

735
00:26:31,520 --> 00:26:33,600
our wonderful command injection and it's

736
00:26:33,600 --> 00:26:36,240
running as a booth

737
00:26:36,240 --> 00:26:38,080
and we are in this user local spin

738
00:26:38,080 --> 00:26:39,600
directory

739
00:26:39,600 --> 00:26:41,760
now if we check the other camera it's

740
00:26:41,760 --> 00:26:42,880
the same thing so

741
00:26:42,880 --> 00:26:45,200
we are basically executing all of this

742
00:26:45,200 --> 00:26:48,080
wonderful command line

743
00:26:48,080 --> 00:26:51,840
and we are in the same

744
00:26:51,840 --> 00:26:53,760
and we got a shell in both devices with

745
00:26:53,760 --> 00:26:55,039
the same

746
00:26:55,039 --> 00:26:58,799
exploit so this works on all the

747
00:26:58,799 --> 00:27:01,840
all the cameras right but i just put

748
00:27:01,840 --> 00:27:05,760
a couple just for as an example

749
00:27:05,760 --> 00:27:07,039
okay it looks like the other camera

750
00:27:07,039 --> 00:27:09,520
rebooted so we're going back to

751
00:27:09,520 --> 00:27:12,320
demo 2

752
00:27:13,120 --> 00:27:14,799
now i want to show you what happens as

753
00:27:14,799 --> 00:27:16,799
soon as we start the

754
00:27:16,799 --> 00:27:20,080
http server so this is start sage it's

755
00:27:20,080 --> 00:27:20,720
uh

756
00:27:20,720 --> 00:27:22,640
just a helper that i built myself

757
00:27:22,640 --> 00:27:24,320
because usually we'll have

758
00:27:24,320 --> 00:27:26,080
the http server starting automatically

759
00:27:26,080 --> 00:27:28,240
but it's all emulated so i have to do it

760
00:27:28,240 --> 00:27:31,520
myself so once the http server starts it

761
00:27:31,520 --> 00:27:32,080
will just

762
00:27:32,080 --> 00:27:34,559
start the mature service and as you can

763
00:27:34,559 --> 00:27:36,720
see

764
00:27:36,720 --> 00:27:39,600
we got the challenge

765
00:27:43,120 --> 00:27:49,840
cool let's continue

766
00:27:50,159 --> 00:27:52,320
let's talk about lesson learned now what

767
00:27:52,320 --> 00:27:54,640
did we learn out of this experience

768
00:27:54,640 --> 00:27:57,039
we learned that code reuse means you're

769
00:27:57,039 --> 00:27:58,559
going to have the same vulnerabilities

770
00:27:58,559 --> 00:28:00,840
across different devices and this

771
00:28:00,840 --> 00:28:02,320
apparently

772
00:28:02,320 --> 00:28:03,919
more often the case than initially

773
00:28:03,919 --> 00:28:05,840
thought so

774
00:28:05,840 --> 00:28:07,760
don't exclude ever that what you find in

775
00:28:07,760 --> 00:28:09,279
one product

776
00:28:09,279 --> 00:28:11,279
only applies to that profit always cross

777
00:28:11,279 --> 00:28:14,720
check and you'll find some surprises

778
00:28:14,720 --> 00:28:17,440
something else that i wanted to uh

779
00:28:17,440 --> 00:28:19,440
reinforce is that dropping a zero day

780
00:28:19,440 --> 00:28:21,919
after a fixed deadline has been passed

781
00:28:21,919 --> 00:28:24,960
you can get the vendor to fix the issues

782
00:28:24,960 --> 00:28:27,679
because maybe the vendor doesn't really

783
00:28:27,679 --> 00:28:30,080
understand and is not very keen to

784
00:28:30,080 --> 00:28:32,559
pass the issues so if you give them

785
00:28:32,559 --> 00:28:34,480
enough time and they still ignore you

786
00:28:34,480 --> 00:28:36,799
and you warn them and they still don't

787
00:28:36,799 --> 00:28:37,600
understand they

788
00:28:37,600 --> 00:28:40,240
don't want to patch things then i don't

789
00:28:40,240 --> 00:28:44,240
think it's a bad idea to drop a zero day

790
00:28:44,240 --> 00:28:46,080
something that i wanted to reinforce is

791
00:28:46,080 --> 00:28:47,520
that previous engineering can reveal

792
00:28:47,520 --> 00:28:48,080
backs

793
00:28:48,080 --> 00:28:50,960
that are hard to find or in some cases

794
00:28:50,960 --> 00:28:52,159
even impossible to find

795
00:28:52,159 --> 00:28:54,960
via fizzing or blackbox testing for

796
00:28:54,960 --> 00:28:56,799
example the bonjour command injection

797
00:28:56,799 --> 00:28:59,360
was very unlikely to be found via

798
00:28:59,360 --> 00:29:00,640
blackbox testing

799
00:29:00,640 --> 00:29:02,000
that's also probably why it was not

800
00:29:02,000 --> 00:29:03,679
discovered before

801
00:29:03,679 --> 00:29:06,320
and the reason why is that the interface

802
00:29:06,320 --> 00:29:07,760
didn't

803
00:29:07,760 --> 00:29:10,399
really suggest that you would even

804
00:29:10,399 --> 00:29:11,520
change the device name

805
00:29:11,520 --> 00:29:15,960
anywhere so if you didn't know about the

806
00:29:15,960 --> 00:29:18,320
setsistname.fcgi url you will never know

807
00:29:18,320 --> 00:29:18,640
that

808
00:29:18,640 --> 00:29:21,679
probably and it will be kind of hard to

809
00:29:21,679 --> 00:29:25,039
guess now if you

810
00:29:25,039 --> 00:29:26,720
like this kind of research and you want

811
00:29:26,720 --> 00:29:28,720
to keep working

812
00:29:28,720 --> 00:29:31,679
on it because i probably won't because i

813
00:29:31,679 --> 00:29:33,279
i won't report any more backs as i

814
00:29:33,279 --> 00:29:34,240
promised

815
00:29:34,240 --> 00:29:37,279
i have a few ideas to get you started so

816
00:29:37,279 --> 00:29:39,039
you can look for vulnerabilities that

817
00:29:39,039 --> 00:29:40,640
can be exploited from the cloud

818
00:29:40,640 --> 00:29:42,399
so ceo more interesting because you

819
00:29:42,399 --> 00:29:43,679
don't even need to be

820
00:29:43,679 --> 00:29:46,799
in the same wi-fi network or hope that

821
00:29:46,799 --> 00:29:48,640
somebody has misconfigured the network

822
00:29:48,640 --> 00:29:50,720
to allow you to access their camera from

823
00:29:50,720 --> 00:29:52,640
the internet

824
00:29:52,640 --> 00:29:54,240
something that is also interesting is to

825
00:29:54,240 --> 00:29:56,080
look for the finalities in the

826
00:29:56,080 --> 00:29:59,360
browser plugin because i'm sure judging

827
00:29:59,360 --> 00:30:00,960
by the code client you have seen

828
00:30:00,960 --> 00:30:03,600
until now that is going to expose an

829
00:30:03,600 --> 00:30:04,960
interesting attached surface in your

830
00:30:04,960 --> 00:30:06,720
browser

831
00:30:06,720 --> 00:30:08,080
and then something else that you could

832
00:30:08,080 --> 00:30:10,320
do is to definitely look for randomly

833
00:30:10,320 --> 00:30:12,000
this in the mobile app

834
00:30:12,000 --> 00:30:13,919
which is available i think for android

835
00:30:13,919 --> 00:30:16,159
and ios

836
00:30:16,159 --> 00:30:19,440
and the fourth step that i suggest if

837
00:30:19,440 --> 00:30:20,799
you want to look into these things

838
00:30:20,799 --> 00:30:22,880
is to look for basement vulnerabilities

839
00:30:22,880 --> 00:30:25,039
so imagine if you could just

840
00:30:25,039 --> 00:30:26,880
get a shell on these things by just

841
00:30:26,880 --> 00:30:28,559
being in the same wi-fi range without

842
00:30:28,559 --> 00:30:29,840
even

843
00:30:29,840 --> 00:30:33,360
being connected to the network

844
00:30:33,919 --> 00:30:36,720
now let's talk about the conclusions we

845
00:30:36,720 --> 00:30:38,320
can definitely say there was more than

846
00:30:38,320 --> 00:30:41,200
one banana video on dnc cameras

847
00:30:41,200 --> 00:30:42,720
and you don't need any expensive tools

848
00:30:42,720 --> 00:30:44,240
so any

849
00:30:44,240 --> 00:30:46,399
anything special in any preparation to

850
00:30:46,399 --> 00:30:47,279
find this issue

851
00:30:47,279 --> 00:30:48,960
you can find them on a plane where you

852
00:30:48,960 --> 00:30:50,480
are traveling

853
00:30:50,480 --> 00:30:51,600
when you are bored and you don't have

854
00:30:51,600 --> 00:30:53,919
anything to look

855
00:30:53,919 --> 00:30:57,039
and it reversing is necessary if you

856
00:30:57,039 --> 00:30:58,480
want to find bugs that are hard to find

857
00:30:58,480 --> 00:31:00,159
via

858
00:31:00,159 --> 00:31:02,480
fuzzing or black box testing so make

859
00:31:02,480 --> 00:31:05,519
sure you complement your test

860
00:31:05,519 --> 00:31:07,360
and i can say for sure that it was a

861
00:31:07,360 --> 00:31:09,120
good idea to use my camera

862
00:31:09,120 --> 00:31:12,399
for any actual uh

863
00:31:12,399 --> 00:31:14,480
real camera purposes but just for

864
00:31:14,480 --> 00:31:15,679
research

865
00:31:15,679 --> 00:31:18,960
fun and now i can say from experience

866
00:31:18,960 --> 00:31:19,279
that

867
00:31:19,279 --> 00:31:22,480
indeed some iot devices are insecure

868
00:31:22,480 --> 00:31:25,120
not all of them i mean i can talk for

869
00:31:25,120 --> 00:31:26,880
all of the devices but i can say the

870
00:31:26,880 --> 00:31:28,480
devices i looked at

871
00:31:28,480 --> 00:31:32,000
are not secure enough and something that

872
00:31:32,000 --> 00:31:33,360
is really important and i wanted to make

873
00:31:33,360 --> 00:31:34,399
sure i delivered them

874
00:31:34,399 --> 00:31:36,960
this message is that we have a shared

875
00:31:36,960 --> 00:31:38,000
responsibilities

876
00:31:38,000 --> 00:31:41,279
um security researchers and vendors have

877
00:31:41,279 --> 00:31:42,559
a shared responsibility at making these

878
00:31:42,559 --> 00:31:44,240
things more secure so it's not just

879
00:31:44,240 --> 00:31:44,960
about us

880
00:31:44,960 --> 00:31:48,960
finding bugs or about them trying to

881
00:31:48,960 --> 00:31:52,240
make things secure by themselves but

882
00:31:52,240 --> 00:31:52,799
it's the

883
00:31:52,799 --> 00:31:55,200
collaboration between these parties that

884
00:31:55,200 --> 00:31:56,159
allow things to

885
00:31:56,159 --> 00:31:59,120
be more secure

886
00:31:59,679 --> 00:32:03,120
and that's it thank you for listening

887
00:32:03,120 --> 00:32:06,240
if you have any questions just

888
00:32:06,240 --> 00:32:09,360
make sure to write them in the chat

889
00:32:13,279 --> 00:32:16,480
thank you pietro and

890
00:32:16,480 --> 00:32:19,679
so we are it is pretty pretty early so

891
00:32:19,679 --> 00:32:23,039
maybe we'll uh we'll be we'll do a

892
00:32:23,039 --> 00:32:24,640
longer break

893
00:32:24,640 --> 00:32:26,840
but we have some questions from from the

894
00:32:26,840 --> 00:32:29,279
chat yeah

895
00:32:29,279 --> 00:32:32,399
so max asks if

896
00:32:32,399 --> 00:32:34,559
it was it hard to emulate the firmware

897
00:32:34,559 --> 00:32:36,080
on qemo

898
00:32:36,080 --> 00:32:39,600
so it was not that if you try to use

899
00:32:39,600 --> 00:32:41,760
for example the film analysis toolkit

900
00:32:41,760 --> 00:32:42,799
which i did try

901
00:32:42,799 --> 00:32:45,039
is supposed to give you a wonderful uh

902
00:32:45,039 --> 00:32:46,960
script that does everything for you and

903
00:32:46,960 --> 00:32:49,200
just spawns a qm

904
00:32:49,200 --> 00:32:51,039
but for me didn't work so i found it

905
00:32:51,039 --> 00:32:53,279
easier to actually

906
00:32:53,279 --> 00:32:57,440
take a random qmo image

907
00:32:57,440 --> 00:33:01,600
like at the vm image and just basically

908
00:33:01,600 --> 00:33:04,000
install the files that i needed from the

909
00:33:04,000 --> 00:33:05,679
camera

910
00:33:05,679 --> 00:33:09,760
and i had to patch the ip camera binary

911
00:33:09,760 --> 00:33:11,600
because there was some error related to

912
00:33:11,600 --> 00:33:13,760
some hardware that was missing

913
00:33:13,760 --> 00:33:15,360
something about the network of course we

914
00:33:15,360 --> 00:33:16,960
i didn't have any

915
00:33:16,960 --> 00:33:19,360
real physical network devices or any

916
00:33:19,360 --> 00:33:21,440
wi-fi at all in the qm

917
00:33:21,440 --> 00:33:24,080
image right so some things are likely to

918
00:33:24,080 --> 00:33:24,960
fail

919
00:33:24,960 --> 00:33:26,880
it really depends on the device you are

920
00:33:26,880 --> 00:33:30,720
looking at and the firmware it's running

921
00:33:30,720 --> 00:33:34,559
so that is the the way that i decided to

922
00:33:34,559 --> 00:33:38,399
approach it and it did work

923
00:33:38,399 --> 00:33:41,679
i hope that answers the question thank

924
00:33:41,679 --> 00:33:42,559
you

925
00:33:42,559 --> 00:33:46,880
and we have a non-technical question

926
00:33:46,880 --> 00:33:51,039
that is uh if the tp-link has a bug

927
00:33:51,039 --> 00:33:52,000
bounty program

928
00:33:52,000 --> 00:33:54,880
i mean the direct question it is uh is

929
00:33:54,880 --> 00:33:55,440
it

930
00:33:55,440 --> 00:33:57,279
if they pay for for vulnerabilities but

931
00:33:57,279 --> 00:33:59,360
i think the the main question if they

932
00:33:59,360 --> 00:34:00,000
have a

933
00:34:00,000 --> 00:34:02,559
backbone program so the answer is i have

934
00:34:02,559 --> 00:34:03,360
no idea

935
00:34:03,360 --> 00:34:06,720
so so i invite you to search for

936
00:34:06,720 --> 00:34:09,599
this program i mean it's very good to do

937
00:34:09,599 --> 00:34:11,040
research and find these things

938
00:34:11,040 --> 00:34:12,719
have some fun with it and learning

939
00:34:12,719 --> 00:34:14,800
experience but if you can monetize your

940
00:34:14,800 --> 00:34:16,560
efforts it's even better right

941
00:34:16,560 --> 00:34:18,239
i mean i didn't even think about that

942
00:34:18,239 --> 00:34:20,399
when i started my research

943
00:34:20,399 --> 00:34:23,520
and so i wasn't just interested so i

944
00:34:23,520 --> 00:34:24,879
didn't look for it

945
00:34:24,879 --> 00:34:28,159
but i invite you to do so if you

946
00:34:28,159 --> 00:34:31,918
want to get some something

947
00:34:31,918 --> 00:34:34,480
out of it some bounty definitely

948
00:34:34,480 --> 00:34:37,520
possible if they had

949
00:34:37,918 --> 00:34:41,280
okay thank you another question pietro

950
00:34:41,280 --> 00:34:41,839
asks

951
00:34:41,839 --> 00:34:45,119
if you could provide some ways to use

952
00:34:45,119 --> 00:34:46,480
these vulnerabilities

953
00:34:46,480 --> 00:34:49,918
during one red red team at red teaming

954
00:34:49,918 --> 00:34:50,560
activities

955
00:34:50,560 --> 00:34:55,119
sorry so i as i showed before the meta

956
00:34:55,119 --> 00:34:56,159
split module

957
00:34:56,159 --> 00:34:57,839
i forgot to mention that actually thanks

958
00:34:57,839 --> 00:35:00,160
for reminding me

959
00:35:00,160 --> 00:35:02,000
the meta display module is publicly

960
00:35:02,000 --> 00:35:03,599
available it's on

961
00:35:03,599 --> 00:35:06,240
github of the official metasploit

962
00:35:06,240 --> 00:35:07,440
framework

963
00:35:07,440 --> 00:35:10,480
repository so you can just git clone

964
00:35:10,480 --> 00:35:12,800
and get my module to exploit these

965
00:35:12,800 --> 00:35:14,480
cameras

966
00:35:14,480 --> 00:35:16,079
and i will also release at the end of

967
00:35:16,079 --> 00:35:17,599
this conference a

968
00:35:17,599 --> 00:35:19,440
standalone title script if you're not

969
00:35:19,440 --> 00:35:21,119
very keen on using metasploit you can

970
00:35:21,119 --> 00:35:21,920
just

971
00:35:21,920 --> 00:35:25,839
quickly test it with your

972
00:35:25,839 --> 00:35:30,079
python script

973
00:35:30,079 --> 00:35:32,480
i hope that answer the question thank

974
00:35:32,480 --> 00:35:33,280
you

975
00:35:33,280 --> 00:35:36,480
last question is if you report a bug

976
00:35:36,480 --> 00:35:38,400
from michaela if you report a bug to a

977
00:35:38,400 --> 00:35:40,320
vendor and this company doesn't give an

978
00:35:40,320 --> 00:35:43,839
answer can you publish it on github

979
00:35:43,839 --> 00:35:45,440
i don't think you can do that straight

980
00:35:45,440 --> 00:35:46,960
away i mean you will have to give them

981
00:35:46,960 --> 00:35:48,720
the opportunity to fix things

982
00:35:48,720 --> 00:35:52,400
so you only require to

983
00:35:52,400 --> 00:35:54,160
you should be a last resort right

984
00:35:54,160 --> 00:35:55,839
dropping a zero day you should never do

985
00:35:55,839 --> 00:35:56,640
that unless

986
00:35:56,640 --> 00:35:58,240
there is really no hope that these guys

987
00:35:58,240 --> 00:36:00,160
will fix anything so if you feel that's

988
00:36:00,160 --> 00:36:01,440
the case

989
00:36:01,440 --> 00:36:03,119
usually the standard deadline is free

990
00:36:03,119 --> 00:36:04,480
for months

991
00:36:04,480 --> 00:36:07,440
so if after that they still don't patch

992
00:36:07,440 --> 00:36:09,119
anything even though they are aware of

993
00:36:09,119 --> 00:36:10,320
it

994
00:36:10,320 --> 00:36:13,440
then i think it's time to consider this

995
00:36:13,440 --> 00:36:19,440
closing a zero day

