00:00:00.000,00:00:06.974
>>Hello, today I will talk about
how to attack desktop
applications using web security

00:00:06.974,00:00:11.979
skills. Uh this may sound weird,
but of this talk you can see how
we can pop up a calculator

00:00:14.781,00:00:19.786
without reversing our binary
exploiting knowledge. Uh I'm
Salt, I'm from Tencent Security

00:00:23.790,00:00:28.795
Xuanwu Lab, and I'm member of
Oops CTF team. And I have spoken
at ZeroNights and HITB. And my

00:00:33.567,00:00:38.572
friend, Hearmen, he also from
Xuanwu Lab, and he's a speaker
AsiaSecWest. And another friend,

00:00:41.808,00:00:46.813
uh he's from Xuanwu Lab too;
he's a member of Syclover
Security Team. And he's spoken

00:00:49.182,00:00:54.187
at ZeroNights and HITB too. And
unfortunately, these 2, these 2
guys doesn't come here, okay. Oh

00:01:01.395,00:01:07.134
when people talking about
attacking desktop applications,
you may think about Pwn2Own,

00:01:07.134,00:01:12.139
yeah. Hackers at Pwn2Own may uh
may use memory corruption bugs
to get a calculator. I dream of

00:01:15.742,00:01:20.747
that one day I can pop out
calculators just like that, but
there's some difference between

00:01:22.883,00:01:27.888
me and them. I know, just know
something about web security. I
can do little reversing. I know

00:01:32.292,00:01:37.297
nothing about pwning. Can I pop
up a calculator like people in
the Pwn2Own? Hmm, that sounds a

00:01:39.967,00:01:44.972
good question, yeah. I notice
more and more applications use
hybrid technologies. Uh people

00:01:50.610,00:01:55.615
at applications use their, use
frameworks like Electron or NW
dot JS. So their applications

00:01:58.218,00:02:03.156
carry out at all the platforms.
And REP techniques I used in
this frameworks and they may use

00:02:05.292,00:02:12.165
REP techniques throughout their
applications. So that's a good
news for our web security

00:02:12.165,00:02:17.170
researchers. Yeah, we can use
web security tricks to Pwn2Own
reliably. Now let's see how to

00:02:19.773,00:02:25.612
pop up a calculator use web
security knowledge. Let's keep
web security great. [laughter]

00:02:25.612,00:02:30.617
So let's start off from the
attack surfaces. So today the
desktop we are talk about 3

00:02:37.290,00:02:43.630
sections. Uh 1 is to open the
ports, second one is URI
schemes, and third one is some

00:02:43.630,00:02:48.635
features of the applications,
yeah. So we start from uh when
uh application opens up port. So

00:02:52.606,00:02:59.012
I thought they open the port,
maybe they open up port for on
web server because they want to

00:02:59.012,00:03:03.950
expose some API cause. And maybe
they use the port for debugging
and maybe other purposes. And

00:03:08.288,00:03:15.228
the application may bind the
port on databases or on the
local host. Yeah. Other

00:03:15.228,00:03:20.233
businesses you can accept them
remotely, but how do we access
the ports are local host? And

00:03:24.638,00:03:29.643
the browser is our good friend.
If the port, the service running
on the port accepts HTTP

00:03:34.281,00:03:39.286
protocol or it has a tolerance
uh illegal commands and then we
can use browser to attack these

00:03:43.657,00:03:48.662
local host ports. And before we
come to the exploiting, uh let's
see some basics. The same origin

00:03:52.899,00:03:57.904
policy, yeah. We see that 2
pages have the same protocol
host and port. And these 2 pages

00:04:02.642,00:04:07.647
are in the same origin. So for
pages in the same origin we can
send simple HTTP request or send

00:04:11.685,00:04:16.690
the requests with custom headers
and get the response. If they
are not in the same origin, we

00:04:18.892,00:04:23.897
can only send the HTTP request
and cannot get the response. So
how this uh this basic

00:04:27.100,00:04:32.105
restriction in the browsers
there is there a way to bypass
this? There comes the answer,

00:04:34.307,00:04:39.312
DNS rebinding. So uh the process
is as follows. Uh we first
access the rebind dot com. It

00:04:46.820,00:04:51.825
will resolve to uh attacker
society and pull all the
payloads from the tech server.

00:04:54.528,00:04:59.533
And uh in the browser just, you
just wait a few uh little uh few
minutes and then you request

00:05:05.372,00:05:10.377
rebind dot com again. And then,
this domain will resolve to the
target IP, such as local hosts.

00:05:15.949,00:05:20.954
And in the uh and uh the port,
the protocol and the host are
not changed in this process. So

00:05:25.292,00:05:30.297
the browser believes that in the
same origin. So we can attack it
just uh bypass the SOP, yeah. So

00:05:38.238,00:05:43.243
we need the, then there's um
prerequisites. The web service
does not check the host name

00:05:47.013,00:05:52.018
because we need the, we need a
domain name that we control. And
the victim should uh wait until

00:05:54.955,00:05:59.960
the DNS has changed because
there is a cache in the browser.
And there's uh another attack

00:06:05.865,00:06:10.870
method called CSRF and there's
some difference about CSRF and
DNS rebinding. We can use DNS

00:06:15.976,00:06:20.981
rebinding to bypass, bypass SOP,
but if there is a host name
check, it will failed. And if

00:06:24.918,00:06:29.923
the client cannot wait, uh wait
a few seconds and this maybe not
work. But for CSRF uh it is

00:06:37.330,00:06:42.335
restricted by the SOP but uh it
doesn't, uh the host check
doesn't matter and it be

00:06:44.938,00:06:49.943
effective immediately, yeah. So
let's just go to a case. And it
is uh popular third-party plugin

00:06:58.118,00:07:03.056
for WeChat, uh it is popular
chat software in China, yeah.
And it is called this

00:07:06.259,00:07:11.264
WeChatPlugin um macOS. Using
this third-party plugin, we can
keep the recorded message. We

00:07:14.634,00:07:19.639
can autoreply a message. And it
has many users. You see the many
stars and many folks. But it

00:07:22.575,00:07:27.580
just stop maintained months ago.
And it has, it binds a port, a
fixed port um local host. And it

00:07:33.687,00:07:38.692
expose some APIs for this APIs
you can get all the user's
friends, all the chat logs, and

00:07:42.996,00:07:49.069
you can send any message to any
user. And we can DNS rebinding
to attack this plugin. So we

00:07:49.069,00:07:51.071
reported this issue to the
author and the author fixed with
checking the host, yeah. The

00:07:51.071,00:07:53.073
host cannot be uh wrong host.
But because of this host check,
we cannot use DNS rebinding to

00:07:53.073,00:07:57.610
attack them. But it is still
affected by CSRF attack. If we,
if we know a username, we can

00:07:57.610,00:08:02.549
then use CSRF to send a message
to that user, yeah. So it is not
enough to just uh check the

00:08:05.085,00:08:10.090
host. Because check the host it
does can just keep DNS rebinding
away. You should also use

00:08:41.454,00:08:46.459
unpredictable data or path to
prevent CSRF attack. Also most
importantly, you should avoid

00:08:51.197,00:08:56.202
using third-party plugins. And
there's another case called
Xdebug. Xdebug is for PHP

00:09:01.274,00:09:06.279
debugging. It's uh PHP
extension. So how does it works?
The uh first you should send a

00:09:12.919,00:09:17.924
request with a uh this um in
parameters,
XDEBUG_SESSION_START, just like

00:09:21.294,00:09:26.299
that UIO in the bot, in the UIO
below. And then the Xdebug will
connects to a server. And the

00:09:30.737,00:09:35.742
server connects with Xdebug. So
which server to connect? Xdebug
will check the following things

00:09:40.947,00:09:45.952
in a fall back order. The first
in uh in the Xdebug
configuration file. Xdebug

00:09:48.088,00:09:53.093
remote host. If not set, then it
will check X-Forwarded-For
header in the DBGP request. And

00:09:56.663,00:10:01.668
if not, uh Xdebug will use
remote address. So if we have
these 3 configurations in the

00:10:09.008,00:10:14.013
Xdebug, Xdebug remote connect
back set to true, uh Xdebug
remote enable set to true. And

00:10:17.183,00:10:22.188
the remote host is not set. And
this is always made for most of
the PHP developers. Then we can

00:10:27.327,00:10:32.332
attack it using DNS rebind. We
can set up an evil server
waiting for Xdebug to connect

00:10:35.468,00:10:40.473
and then use DNS rebinding to
send a custom X-Forwarded-For
header. And pause to the evil

00:10:43.142,00:10:48.147
server. So the evil server will
connects uh attacks with Xdebug
and finally we can get a reverse

00:10:52.886,00:10:57.891
shell. And I have reported this
to the PHP. So if you are a PHP
developer, if you use Xdebug and

00:11:04.664,00:11:09.669
you stays on a on the evil page
for 40 or 50 seconds and then
you may be hacked. So how do the

00:11:20.213,00:11:25.218
Xdebug originally think about
this attack? And his response
will, he thinks this is a just a

00:11:29.756,00:11:34.761
rumor. And for developers
himself should take care of
this, yeah. So I uh. And for

00:11:40.867,00:11:45.872
NodeJS debugging port, or Java
debugging port, uh uh Java RMI
port they may also be affected

00:11:50.243,00:11:55.248
by DNS rebinding attack or set
off attack. So if you finds a
port opened by a uh application,

00:12:01.955,00:12:08.428
you can check it by some local
business or by local host. So
you can choose to attack it

00:12:08.428,00:12:13.433
remotely or use DNS rebinding or
CSRF to attack them. And next
part, URI schemes. It's a short

00:12:18.938,00:12:23.943
part, yeah. Uh people use URI
schemes to launch applications.
Or send some messages inside an

00:12:28.514,00:12:33.519
application. Uh we can see the
following picture. We can use VS
code URI schemes to launch VS

00:12:38.625,00:12:43.630
code, yes. And on Windows, in
Windows uh it is registering the
registry and has uh open item

00:12:49.435,00:12:54.440
for the URI protocol name and
the command it will execute.
Windows will use ShellExecuteW.

00:12:58.911,00:13:03.850
This API to call that command to
call the web code command and
launch it. But there is uh

00:13:08.588,00:13:13.593
random bug in this API. We can
use a code to close the former
code and we can inject other

00:13:17.497,00:13:22.502
parameters. So there comes a
famous exploit last year for
Electron. We can use a Chromium

00:13:28.975,00:13:33.980
parameter injection and to
execute any command just like
that. And we found all

00:13:36.816,00:13:41.821
frameworks based on Chromium may
have the same issue. So the NW
dot JS framework. We found a

00:13:45.725,00:13:50.730
famous application for note
taking uh use NW dot JS. And
they has 2 hundreds millions of

00:13:57.437,00:14:02.375
users so we can just inject
Chromium parameters to execute
any command. Just like the

00:14:08.247,00:14:13.252
electron bug. So here comes the
demo. It, oh. Uh oh. Uh, yeah.
We set our web server local

00:14:34.841,00:14:39.846
host, on the local host and this
is floor page, yeah. If we
clicked that, we will get a

00:14:44.450,00:14:49.455
calculate. [applause]. Okay,
this is the first calculator
[laughs] and this bug is fixed,

00:14:54.427,00:14:59.432
already fixed, yeah. And uh in
this year's, in this May, uh
Microsoft released a patch

00:15:07.774,00:15:12.779
called KB449735. If you apply
this patch you will find the URI
scheme is not URL encoded so in

00:15:19.819,00:15:24.824
this case we cannot inject
parameters because the code, URL
encoded, we cannot close the

00:15:27.660,00:15:32.665
formal code. Maybe you asking is
that all, there is some bypass?
Who knows. Yeah, so if you found

00:15:41.941,00:15:48.481
if you want to find URI scheme
bugs you should check the URI
schemes that the application

00:15:48.481,00:15:53.486
has. Also the framework has.
Don't forget the framework, yes.
And the main part, re-attack the

00:15:59.458,00:16:04.397
features of the application. And
this section we have 3 parts.
First one is cross-site

00:16:07.466,00:16:12.471
scripting in the desktop
applications, and the second
part section is for privileged

00:16:14.841,00:16:19.846
APIs, and the last one is for
improper protocol handler. And
this cross-site scripting story

00:16:25.885,00:16:30.890
begins from markdown editors,
and in the year 2016 we found
many markdown editors just

00:16:37.029,00:16:42.034
renders the JavaScript in
preview window such as MOU,
MacDown, or even VS code. So um

00:16:50.142,00:16:55.147
many of the markdown editors
just uh previews the page in the
file domain so we can use the

00:16:59.385,00:17:04.323
JavaScript excuse on the file
domain to steal files on the
local disc and we can steal some

00:17:07.126,00:17:12.131
credentials from the local host
and we may clone his account and
lock it in another machine. And

00:17:16.135,00:17:21.140
also if you, it use uh it has
some privileged APIs or it has
uh it uses uh outdated uh

00:17:25.511,00:17:30.516
browsers. We can we maybe get
remote code inclusion. We uh
last see a case for MacDown. It

00:17:34.687,00:17:39.692
has dozens of stars and many
folks. And this is also uh this
exploit can also be used in the

00:17:45.197,00:17:50.202
latest version. So we can see
the location is uh in the file
domain and we can use XML HTTP

00:17:52.905,00:17:57.910
request to get the ATC password.
And we can also send that uh the
response uh that the contender

00:18:02.014,00:18:07.019
of the ATC password to the
remote server so we can steal
local files. Yeah. I reported

00:18:11.057,00:18:16.062
this in the year 2016 and they
did still not fixed. Um, but
things are always getting

00:18:23.703,00:18:28.708
harder. There's little
cross-site scripting in markdown
editors nowadays. And some

00:18:30.943,00:18:35.948
editors use Content Security
Policy to limit JavaScript
execution. And some editors use

00:18:40.286,00:18:45.291
sandbox to run the JavaScript in
the, in a uh isolated context
and they're without node

00:18:47.793,00:18:52.798
modules. So the uh, the issues
are harder to find and harder to
exploit, but we should think

00:19:01.874,00:19:06.879
about the libraries that used by
markdown editors. Hmm, the first
one were made. Uh it used for

00:19:11.884,00:19:16.889
charts or diagrams. It uh has a,
it on the GitHub it has dozens
of used products and many stars

00:19:22.128,00:19:27.133
and many folks. Uh we have on 3
cross-site scriptings in the
latest version uh when I make

00:19:32.304,00:19:35.608
this slide but now in the latest
version it has fixed. Okay.
Latest version here is when I

00:19:35.608,00:19:40.613
make this slides. It is fixed
days ago, just days ago. Yeah.
We can see the Typora, the

00:19:51.891,00:19:56.896
HackMd, the EverNote, and HitLab
may uh all use Mermaid. Um there
is the cross-site scripting. And

00:20:01.100,00:20:06.105
the first 2 just renders the
HTML and the last one need a
click. It is click, cross-site

00:20:11.277,00:20:16.282
scripting. And here's demo page,
official demo page we can alert.
And next to Katex and Mathjax

00:20:24.723,00:20:29.729
and these 2 libraries for math
typesetting and uh in their old
versions it has uh click click

00:20:33.833,00:20:38.838
cross-site scripting too. And
this too is reported by other
guys. And the last library,

00:20:41.907,00:20:46.912
flowchart dot JS it has a click
and cross-site scripting too in
the latest version. This has not

00:20:52.184,00:20:57.189
fixed yet. So if you use
Mermaid, please update upgrade
it to the latest version, yeah.

00:21:03.529,00:21:08.534
And the other version of Mathjax
and Katex has cross-site
scripting issues and the latest

00:21:13.005,00:21:18.010
version of flowchart has a click
cross-site scripting. As this
issues lies in the libraries so

00:21:23.115,00:21:28.120
this issues affects more
applications than we can find.
So here comes a case for HackMd.

00:21:32.291,00:21:37.296
It uses Mermaid. It is online
markdown editor and it has many
many users. Uh we just use the

00:21:43.903,00:21:48.908
payloader before for Mermaid but
the payload is blocked by CSP.
Yeah we cannot see the lunchbox

00:21:52.711,00:21:57.716
ere because the CSP just blocks
it. And then we check the CSP.
We found an interesting site

00:22:02.821,00:22:07.827
there. The Google Analytics.
There is no way for using Google
Analytics to bypass CSP by

00:22:12.998,00:22:18.003
kitten, yeah. So we can use
Google Tag Manager and set a
rival there and set a malicious

00:22:22.241,00:22:27.246
function. We can define our
malicious code there. And the
code will be shown in the Google

00:22:30.916,00:22:35.921
Analytics. And you can check the
details in the following link so
then we can get the lunchbox,

00:22:38.791,00:22:43.796
yeah. And we found there is also
a desktop application for
HackMD. It use there are 2 uh 2

00:22:53.105,00:22:58.110
elements. One is a script
element for renderer dot JS in
uh uh use in privilege context.

00:23:02.014,00:23:07.019
And uh webview tag renders the
userpage. There is no node
integration. So how to tell our

00:23:13.926,00:23:18.931
cross-site scripting in the
webview tag to RCE the desktop
application. So let's check the

00:23:23.569,00:23:28.574
renderer dot JS first. We can
see from the code it has add uh
event listener for dom ready and

00:23:33.846,00:23:38.851
when dom ready it will get the
typo from the webview. And set
it to the inner HTML to the

00:23:42.688,00:23:47.693
privileged context. So if we can
control the title, we can
execute any javascript code in a

00:23:53.732,00:23:58.737
privileged context. So we can
our cross-site scripting to
redirect the page to our evil

00:24:01.774,00:24:06.779
page, which can trigger the dom
ready element and then our page
have a uh special header, a

00:24:11.583,00:24:16.588
special title. Uh we can use
this to uh to call the node
modules um process and uh the

00:24:21.894,00:24:26.899
child process and execute any
command and then we can see the
calculator. Just the click the

00:24:33.038,00:24:38.043
malicious markdown and pops up
the calculator. [applause] Okay,
I have reported this to the

00:24:44.983,00:24:49.988
HackMD and it has already fixed.
So um there's a uh some cases we
may not execute JavaScript. We

00:24:56.395,00:25:01.333
can only inject some HTML code,
so we can also use this, use
HTML code for phishing or just

00:25:07.373,00:25:12.378
advertising yeah. Uh, let me. So
the next section, the next part
for privilege APIs. Privileged

00:25:18.951,00:25:23.956
APIs comes from uh about 2 ways.
One is the node modules another
may be some uh from the custom

00:25:31.230,00:25:36.235
APIs. The program just added
these uh APIs. Uh programs
usually use JSBridge with some

00:25:39.738,00:25:44.743
wrapper to provide custom APIs
and these usually have public
documentations. So let's see a

00:25:50.516,00:25:57.523
case. It is a uh case for a
popular chat application. It has
billions of users. In this

00:25:57.523,00:26:02.461
application, it has a has an
embedded browser with some
custom APIs so if you render,

00:26:06.165,00:26:11.170
when you render your page on the
embedded browser, you can call
the custom APIs because there is

00:26:15.374,00:26:20.379
no domain restriction. And these
APIs are well documented for
developers. And how to open URLs

00:26:25.317,00:26:30.322
in the embedded browsers? There
are 2 ways. 1 is in the special
type of message which is called

00:26:32.491,00:26:37.496
FeedCard message, just like uh
that. And also we can use an
inner application URL scheme. We

00:26:42.367,00:26:47.372
can use a special scheme to open
uh open the embedded browser.
And then the custom APIs,

00:26:53.312,00:26:58.317
there's 2 interesting APIs. 1 is
stolen file. If you call this
API, you can uh you can pass URL

00:27:03.455,00:27:08.460
to it. And then download the
file from that URL. But uh it
will pop up a box for the user

00:27:12.431,00:27:17.436
to choose a location to save
that file. Yeah. This needs some
user interactions. And another

00:27:20.172,00:27:26.378
API called open local file. It
just opens the file you just
downloaded. Without

00:27:26.378,00:27:31.383
confirmation. Yeah this API is
without user interaction. But
only works on macOS. Uh so we

00:27:35.020,00:27:41.159
can think we can make it
download uh ELF to execute but
failed because it has no X mode

00:27:41.159,00:27:45.464
downloaded. We can, we think we
can use a bash or python script
but it is usually opened by a

00:27:45.464,00:27:49.301
text editor. Hmm, so how to
exploit this? Java is a good
friend, yeah. We can just

00:27:49.301,00:27:54.306
download a dot jar file and use
that API. Just open the jar. It
will execute our java code. So

00:28:12.024,00:28:17.029
if you have java and you click a
FeedCard message from a hacker,
and a dialogue will ask you to

00:28:26.271,00:28:31.276
save a file. Save a file usually
harmless so you click save and
then you are hacked. So let's

00:28:36.114,00:28:41.119
see the demo. We are maybe sound
conversations for security
reading and come the FeedCard

00:28:46.291,00:28:51.296
message, just click it in the
embedded yeah. And we click
save, and then the calculator.

00:29:02.741,00:29:07.746
[applause] And this is already
fixed in the latest version and
it is fixed by just open the

00:29:10.349,00:29:15.354
folder instead of the file. And
the last part, um uh let's go to
the part for protocol handler.

00:29:25.063,00:29:30.068
Uh when developing for desktop
applications, you should paste
them into these 3 protocols.

00:29:32.304,00:29:37.309
HTTP, JavaScript, or file
protocol. For HTTP protocol, you
should avoid rendering pages in

00:29:43.348,00:29:48.353
uh, in an untrusted context
because uh if you have an
outdated browser core you may be

00:29:53.759,00:29:58.764
affected by the browser 1day. Or
if you execute JavaScript uh you
the JavaScript may execution the

00:30:04.202,00:30:09.207
file domain can steal files. And
for the file protocol, you can
use it to launch programs in uh

00:30:13.045,00:30:18.050
in your, in your computer. Or
the file protocol may leak NTLM
credentials. So just be care, uh

00:30:22.788,00:30:27.793
be careful attack. So uh we find
uh library and it is using
Chinese applications and it is

00:30:37.235,00:30:42.240
widely used. It has many uh
stars and many folks, and it is
post HTML-like tags. If you set

00:30:47.946,00:30:52.951
show HTML to true. And there
some tags for, a tag for
hyperlink. And i tag for image.

00:30:58.190,00:31:03.128
And a c tag for a text color,
change the text color. And in uh
chat application, it show, it

00:31:08.400,00:31:13.405
says show HTML to true. And it
renders the tags in the chat
group name or your personal

00:31:20.212,00:31:25.217
status, we can use c tag here to
change text colors. Here we
change it to the red. And change

00:31:30.222,00:31:35.227
the color maybe purple. We can
use i tag to do some NTLM relay
attacks. So we can use i tag to

00:31:39.798,00:31:44.803
insert a file protocol, a um SMB
protocol. And it will uh in
Windows, it will send the

00:31:48.340,00:31:53.345
Windows credentials
automatically once the tag are
rended. And this tags uh in the

00:31:57.883,00:32:04.456
attacker's personal stash on uh
group name. So really, this can
be done without user

00:32:04.456,00:32:09.461
interaction. And the attacker
can get the credentials. They
can just do some offline brute

00:32:12.063,00:32:17.068
force works or the attacker can
relay the credentials to other
services such to the Exchange

00:32:20.405,00:32:25.410
server so we can log in to the
exchange server on behalf of the
victim and get all the emails.

00:32:29.114,00:32:34.286
Or if the victim have another
machine had the same, share the
same password, we can relay to

00:32:34.286,00:32:39.291
that machine. And get remote
code execution. And there is
another case, is for Ghidra. And

00:32:45.597,00:32:50.602
Ghidra is developed based on
JAVA. And it use HTML to
describe a project. So there is

00:32:59.678,00:33:04.616
uh XXE in the Ghidra project
description file. It is found by
this guy, yeah, we can use XXE

00:33:07.953,00:33:12.958
to steal files or use it XXE to
send HTTP request, but can we
turn the XXE to RCE? Uh based on

00:33:24.669,00:33:29.674
our previous research, this can
be done. Uh we found that Java
will send credentials when it

00:33:34.212,00:33:39.217
encounters NTLM-based 401 HTTP
response, not the basic
authentication. It is uh, it is

00:33:48.460,00:33:54.833
uh NTLM-based for uh HTTP
response. The attacker can set
up malicious HTTP server to

00:33:54.833,00:33:59.838
responds uh that. And the java
will the credentials to the
attacker and the attacker can

00:34:04.542,00:34:09.547
just reflect the credentials to
the C machine, just the C
machine. So if you just opens uh

00:34:16.688,00:34:21.693
malicious project and you have
opened your SMB service and then
you may be hacked. So here's

00:34:25.230,00:34:30.235
demo. Uh we set up malicious
server and here is our Ghidra.
And we'll, we will open the

00:34:41.313,00:34:46.318
malicious product. And then
activate the triggers we can
down the hatches. Just getting

00:34:50.922,00:34:55.927
the hatches out of that machine.
And then we can use the past,
past the hatch to execute any

00:34:59.864,00:35:04.803
commands on the victim. We just
use that patch. And there's a
mistake. Uh the mistake and we

00:35:21.886,00:35:26.891
fix the command. Yeah. We can
see the calculator. [applause]
So there's many features in

00:35:42.407,00:35:47.412
desktop applications so we can
find cross-site scripting and we
can find if there some

00:35:51.116,00:35:56.121
privileged APIs. We can find how
it handles the protocol. We can
find that and check out how we

00:35:59.791,00:36:04.729
can attack these application. So
please come to the end. If you
are a developer, just be careful

00:36:10.969,00:36:15.974
while debugging PHP, NodeJS, or
some other version of Java. You
may be, you may be, be part of a

00:36:22.547,00:36:27.552
calculator in your desktop.
[laughs] [laughter] And also you
are developer, you should be

00:36:30.922,00:36:35.927
careful while using this
libraries. Some other version of
Mermaid and other version of

00:36:38.663,00:36:43.668
Mathjax, Katex, and the latest
version of FlowChart. And if you
use duilib, you should not set

00:37:25.477,00:37:27.745
the, show HTML to true. And if
you are, if you using NW dot JS,
you be careful while registering

00:37:27.745,00:37:29.748
URL scheme. And thanks for this,
guys. And thank you all.
[applause] So maybe any

00:37:29.748,00:37:30.248
questions? Oh yeah. Okay, thank
you, guys.

