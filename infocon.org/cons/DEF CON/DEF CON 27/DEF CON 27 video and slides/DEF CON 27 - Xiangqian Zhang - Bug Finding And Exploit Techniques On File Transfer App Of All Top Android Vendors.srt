00:00:00.067,00:00:05.072
>>We have a talk today from Liu
Hiuming about bug finding and
exploit techniques for file

00:00:08.642,00:00:13.647
transfer apps on Android phones.
So if you’ve had your file
transfer apps open, at DefCon,

00:00:16.216,00:00:21.221
really? But if, if so this might
be a good time to turn it off.
This is Liu’s first time

00:00:24.091,00:00:30.697
speaking at DefCon although he
has given talks at CANSEC Quest,
BlackHat eight, basically all

00:00:30.697,00:00:36.136
over the world he’s given this,
so uh, give him a welcome and
we’re going to give him a

00:00:36.136,00:00:41.174
classic DefCon welcome with uh
the speaker shots. [applause]
Cheers. >>Thank you. Good

00:00:41.174,00:00:47.748
morning everyone. My name is Liu
Hiuming, and Zhang Xiangqian my
colleague but he won’t come here

00:00:47.748,00:00:52.753
because of research of his so I
will do this, I will do this
talk alone. Yeah. Uh, now I will

00:00:57.691,00:01:02.629
present you with research about
uh exploit of near by file
transfer apps. The title is your

00:01:22.149,00:01:27.154
secret files are mine. Bug
finding and exploit techniques
on transfer apps of all top

00:01:30.424,00:01:35.429
android phones. First. Let’s
introduce ourselves briefly.
We’re from advanced technology

00:01:38.131,00:01:44.338
research team Tencent security
Xuanwu lab. Tencent is largest
social media and entertainment

00:01:44.338,00:01:49.343
company in China. And we focus
on mobile security and iot
security and we found many

00:01:51.912,00:01:58.018
android kernel and system
security vulnerabilities and
accomplished uh many fancy

00:01:58.018,00:02:02.956
attacks. We have print uh many
slides like this. Uh this is our
presentation online. First we

00:02:08.395,00:02:13.400
will give an introduction about
the near by sharing technologies
and talk about our motivation to

00:02:15.702,00:02:20.707
do this talk. Secondly we will
present an a-attack surfaces and
some previous work. Next we will

00:02:24.144,00:02:30.617
show you that real
vulnerabilities and explore it
in the demos. Uh next we will

00:02:30.617,00:02:35.622
show you the real, uh, then we
will talk about mitigation
method uh, finally it’s it will

00:02:39.559,00:02:44.564
be our conclusion. Now let’s
begin our part 1. Introduction.
There are many nearby transforms

00:02:48.735,00:02:55.042
uh transmission technologies
such as Bluetooth, android,
beam, wifi, direct, but we

00:02:55.042,00:03:01.782
focused our research on nearby
transfer apps on Android,
including uh smart form window

00:03:01.782,00:03:06.787
building apps and third party
developer apps. Many nearby file
sharing apps. Why? But those

00:03:10.791,00:03:15.796
apps, uh, Bluetooth and android
beam based on NFC have two
weakness. First, not user

00:03:20.867,00:03:27.307
friendly enough and sec-secondly
aren’t fast enough. When you
want to share a picture to a

00:03:27.307,00:03:32.312
Friday, it, uh you already take
seconds or minutes to transfer a
picture. But uh this technology

00:03:36.016,00:03:41.021
based on WIFI technology will be
transferred uh fastly. When we
want to send or receive a

00:03:44.124,00:03:49.129
bootleg movie either way it will
not capable at all. So nearby
transfer apps that are based on

00:03:51.565,00:03:57.838
WIFI related technology are
people new choice. Based on
research we found that nearly

00:03:57.838,00:04:02.776
all top smartphone windows had
their uh share, sharing apps, so
uh based on the IDC’s data we

00:04:09.950,00:04:14.955
can find that the shipment last
a year is a nearly a billion
phones. A billion ways a single

00:04:19.226,00:04:25.132
year that’s a big number. If
they’re vulnerable a huge number
of people, people will be

00:04:25.132,00:04:30.137
affected. So we began our
research. This is was android
sharing apps look like, it’s it

00:04:36.343,00:04:41.348
is a, a little like the air top
on the uh iOS and iPhone that,
they are several ways to connect

00:04:45.485,00:04:52.225
and send the files on Android.
In this example, when the both
sides are all active status the

00:04:52.225,00:04:57.230
sender just select the file and
the receiver will be shown on
the screen and then the receiver

00:05:00.834,00:05:05.839
can tab the, uh tab the profile
shown of the receiver and uh the
receiver will click on the

00:05:09.042,00:05:14.047
accept just like the air drop.
The file will be transferred.
Some apps use another approach,

00:05:18.385,00:05:23.590
the receiver clicks the receive
button and then the sender can
see the receiver and they

00:05:23.590,00:05:29.129
establish a link and accomplish
the file transferring. There are
little difference here but there

00:05:29.129,00:05:35.101
are many differences of the
security design. There are some
other ways such as scanning the

00:05:35.101,00:05:40.106
QR code to transfer apps, to
transfer files or uh shake the
phones at the same time. On the

00:05:43.276,00:05:49.983
other hand many nearby files
sharing apps will choose a
thumbnail this will introduce a

00:05:49.983,00:05:56.156
new attack we will, we will
detail a bit later. Yeah. The
sharing process of nearby

00:05:56.156,00:06:01.761
sharing apps are shown here. In
general there are four steps.
First discover a BLE

00:06:01.761,00:06:06.766
advertising, Name, I, ID Device,
ID Device type and so on.
Secondly we can pair so most

00:06:12.305,00:06:18.645
apps pair and exchange keys
automatically which is very
con-convenient. But it is

00:06:18.645,00:06:23.650
vulnerable. Thirdly, connect via
WIFI or the P2P , finally we can
transfer files as to pictures,

00:06:25.986,00:06:30.991
APKs and so on. Since we know
the general sharing process
let’s analyze the attack

00:06:33.293,00:06:38.298
surfaces. First uh the, the uh
the adversary are nearby. The,
the, the attackers can be

00:06:40.467,00:06:45.472
sniffed and send of Bluetooth
and WIFI packets. Then what the
attackers can usually get will

00:06:48.008,00:06:54.814
attack succeeding. First, the
attacker can get the transfer of
files and more such as hijack

00:06:54.814,00:07:00.520
and the traffic, hijack the
tr-traffic, getting more
information and even more

00:07:00.520,00:07:05.525
execution. Here attack surface
as follows. Link establishing,
secure transmission, device and

00:07:16.603,00:07:21.608
ID spoofing, man in the middle
and others. First when link is
establishing automatically

00:07:27.447,00:07:33.420
attackers may join to a network
without user’s permission. On
the other hand attacker may

00:07:33.420,00:07:39.693
often uh establish network
password because of unsecure
connection. When files are

00:07:39.693,00:07:46.299
transferring there may be no
encryption at all so we can’t
get the file directly and

00:07:46.299,00:07:52.605
sometimes a key exchange are not
safe so attackers can recover
all the real file from the

00:07:52.605,00:07:57.610
encrypts traffic. Next, device
and ID spoofing. Many apps fail
to authenticate the real device

00:08:02.482,00:08:07.487
or yours. For example when Alice
wants to send Bob a file. Then
the attacker can collect all of

00:08:11.391,00:08:16.396
Bob’s network ties information
and advertise themselves to
create a fake Bob, in this case

00:08:19.065,00:08:24.070
many apps fail to distinguish
between the fake and the real
Bob. We call it device and ID

00:08:26.506,00:08:32.178
spoofing. Based on the device
spoofing the attackers may
accomplish man-in-the-middle

00:08:32.178,00:08:38.785
attack so the normal user will
feel nothing. We will show a
d-demo later but the technical

00:08:38.785,00:08:44.391
details will be explained later
too. Once more, we found some
other interesting attack

00:08:44.391,00:08:49.396
surfaces. For example some
sharing apps will start a web
server. Which will open more

00:08:51.664,00:08:56.669
doors for attackers. And there
other information disclosure we
can’t, uh even think about. And

00:08:59.906,00:09:06.746
android components related to
attack surfaces. Uh we are not
the first researchers to uh

00:09:06.746,00:09:11.751
notify, notice the near, nearby
comm-communication apps.
Researcher bought the ZeroConf

00:09:14.587,00:09:21.561
on OSX/iOS, researcher Bai
Xiaolong [inaudible]
vulnerabilities and uh, there’s

00:09:21.561,00:09:26.566
nineteen some, some researcher,
there was, analyzed the Google
nearby connection API however

00:09:28.635,00:09:35.542
there are nothing about file
sharing apps on android. My
colleague wh-and I will present

00:09:35.542,00:09:40.547
this on this talk. To the best
of our knowledge our research is
the first comprehensive research

00:09:45.018,00:09:50.023
about android nearby sharing
apps. We analyzed many related
apps include pre-installed and

00:09:54.160,00:09:59.165
third party apps. And we found a
lot of vulnerabilities in this
apps. And then we arranged them

00:10:01.701,00:10:06.706
in several common attack
methods. Um, here let show you
some uh real

00:10:15.014,00:10:20.019
vul-vulnerabilities. Notice that
in this talk we will focus on
the specific uh we won’t focus

00:10:22.355,00:10:27.360
on specific apps or vendors. Uh
so I will cover all the windows
and the apps name here. Uh for

00:10:30.930,00:10:35.935
just for uh security. Yeah.
Besides there are huge number of
users will be affected. Uh so

00:10:39.873,00:10:46.112
uh, I will cover all the, all
the critical code too. Yeah.
Some other vulnerabilities are

00:10:46.112,00:10:51.117
not fixed here so we will print
four vulnerabilities categories.
Sniffer attack related

00:10:55.121,00:11:00.326
vulnerabilities, wwo the man in
the middle attack related
vulnerabilities, then we will

00:11:00.326,00:11:04.931
talk about logic
vulnerabilities, finally we will
present our other

00:11:04.931,00:11:09.936
vulnerabilities here. First
let’s talk about sniff attack.
This is a building app or smart

00:11:16.876,00:11:22.882
phone and we will take it as our
example this three pictures
shows the normal file sharing

00:11:22.882,00:11:27.887
process. The receiver don’t need
to input any password. Or
something uh else, yeah. The

00:11:31.157,00:11:36.996
whole process is totally
automatic however more
convenience can often means less

00:11:36.996,00:11:42.001
security. This app use brutal
slow energy to advertise or
discover other peers and chance

00:11:45.305,00:11:50.310
for files by WIFI P2P. Can it
accomplish a secure key exchange
here? To capture Bluetooth data

00:11:56.349,00:12:01.287
we can use a Bluetooth sniffer
such as Ubertooth, uh RF five
one and so on. This is a BLE

00:12:04.824,00:12:11.798
packet that we captured. It is a
scanned response packet. Which
is send when someone, some other

00:12:11.798,00:12:17.737
device are scanning it contents,
your ID, device name and some
other information. Such as some

00:12:17.737,00:12:22.742
flags and [inaudible] the packet
is a advertising packet which is
often easy to understand. And

00:12:26.913,00:12:31.918
this a BLE data packet. The BLE
send data in thirty-seven,
thirty-eight, thirty-nine

00:12:33.987,00:12:39.592
channels but to scan only if one
channel at a time. So we need to
sniff several time to gather the

00:12:39.592,00:12:46.165
data packet. The picture show
that the encrypted data transfer
when establishing connection

00:12:46.165,00:12:51.170
between different varying apps.
So, we extracted the data here
and it looks like this. What all

00:12:53.640,00:12:58.645
it mean? Answer lies in the app
itself. So we reverse
engineering app. This is a core

00:13:00.913,00:13:05.918
crypto algorithm. We can see
that it is um obfuscated badly
so uh, by the way many tool

00:13:09.489,00:13:14.494
carry a function, which many
rely on the AES crypto and some
others transf-transformational

00:13:17.130,00:13:22.835
data. Uh to make it more clear
we can show you an older version
which is different but without

00:13:22.835,00:13:29.842
any obfuscation. But the whole
process is just the same. This
older version there is nothing

00:13:29.842,00:13:36.215
but an EX encryption which was
different from the new version
but the older logic was still

00:13:36.215,00:13:40.820
the same. Yeah. So P2P for is,
uh P2P you can see in the slide
is encrypted information. And

00:13:40.820,00:13:45.825
P2P CFGEX here, is a pen attack
decryption by calling decrypt
function and the key will

00:13:55.268,00:14:00.206
generate the by the function
generate secure key and generate
loop key. This picture shows a

00:14:03.376,00:14:08.381
decrypt func-function which we
can see the EX decryption here.
Here. To decrypt the data we

00:14:13.453,00:14:19.525
need to get the EX encryption
keys which rely on the source
string array and the M secure

00:14:19.525,00:14:25.765
random. A secure string array
can be called in from the BLE
packet. What about the M secure

00:14:25.765,00:14:30.770
random? It’s, it’s name context
random however we think that uh
it must, must not be the random

00:14:33.773,00:14:40.613
number because the string there
and the secure must uh have the
same uh number of this. So we

00:14:40.613,00:14:47.120
found that it was uh stored in
some XML file and it is fixed.
[laughter] That seems

00:14:47.120,00:14:52.125
interesting. So now the whole
encryption can be break and we
can recover data directly. This

00:14:57.830,00:15:04.337
is a decrypt process for older
version of that. The latest uh
version are far more complicated

00:15:04.337,00:15:10.543
but we manage to d- uh reverse
engineer it. But uh it is
similar in the design. We break

00:15:10.543,00:15:15.548
it too and we will show you that
other approach. M, the upper
image shows the recover P2P for

00:15:19.619,00:15:24.624
old version, second image here
it, shows a recover P2P for new
latest version so we can see the

00:15:29.462,00:15:34.467
SSID and password are gotten by
us. So everything uh they
transferred will be get directed

00:15:37.703,00:15:42.708
by us. Based on the recover
password we can go on the
network and get uh transferred

00:15:45.278,00:15:50.283
files through ARP spoofing and
that’s show you two demos. Here
a right phone take picture then

00:16:01.761,00:16:06.766
here we will send that picture
to the left phone. And the
computer act as an attacker so

00:16:11.804,00:16:16.809
we can see that in both were
collected to there. Then the
left one got uh, uh notification

00:16:25.518,00:16:30.523
and then when he click the
accept here, we can see that uh
computer, will get it too. And

00:16:40.199,00:16:42.335
this is the ph-photo we just
take a picture of that.
[applause] Here is demo two. It

00:16:42.335,00:16:44.337
is the uh process is a little
different but there are some
more interesting here. Some,

00:16:44.337,00:16:49.342
something very interesting I
think. The left phone want to
sharing a picture to the right

00:17:17.603,00:17:22.608
phone and we can see that the
picture was gotten by us, we can
see that pull out on the

00:17:28.147,00:17:33.152
computer, we checked it, it’s uh
latest uh version uh when we
recorded the video. When

00:17:39.892,00:17:44.897
transferring apps actually they
receive the picture here. And
this shows the what you seeing,

00:17:50.102,00:17:57.076
uh what all the apps, you, you
installed on your phone when
sharing apps uh want to uh share

00:17:57.076,00:18:02.014
uh and photo here, here we will
send all you installed, all the
apps you installed on your phone

00:18:04.450,00:18:09.455
onto the other phone. Uh it’s a
terrible info leak here I think.
Next let’s move onto the second

00:18:17.830,00:18:24.270
category, man-in-the-middle
attack related vulnerability. A
nearby sharing apps, will the

00:18:24.270,00:18:29.275
senders want to select a
receiver? He can see profile
picture, device name, your ID

00:18:32.211,00:18:39.085
and so on. Our question is, how
can you authenticate that is the
real one? We found that it is

00:18:39.085,00:18:44.090
very tricky. In this slide, you
can see that we can’t emulate as
receiver by use a BLE scan

00:18:46.192,00:18:51.197
sender app to send advertising
and scanned response packet. The
left phone shows a, a profile

00:18:57.236,00:19:02.174
picture of someone but uh it is
actually a, um BLE sender app,
yeah. Then the re-receiver will

00:19:07.346,00:19:12.351
be shown on the sender screen.
And in this picture we modify
real device to spoof another

00:19:14.954,00:19:21.861
device. There are two active
receivers here but a sender can
only see one device. So when you

00:19:21.861,00:19:28.801
want to send a file it will
never know which device it will
be sent to. Now we can spoof

00:19:28.801,00:19:35.374
another device then at the
attacker can accomplish man in
the middle attack when emulated

00:19:35.374,00:19:41.213
a fake receiver and a fake
sender. And as we can see here
if A send B a file there will be

00:19:41.213,00:19:46.285
fifty percent chance that the
file will be sent to the
attacker and the chances can be

00:19:46.285,00:19:51.290
improved by many ways. Now
perfect man-in-the-middle attack
can be designed like this. Uh, A

00:19:54.326,00:19:59.765
can’t find that uh, that other
attacker because the other
attacker will not send the

00:19:59.765,00:20:05.504
scanned response to A by
designed. B can’t find the
attacker because B is not in

00:20:05.504,00:20:10.509
discovery mode. Then and then
the attacker can’t distinguish
between A and fake A, B and fake

00:20:12.712,00:20:17.716
B. B-because he can choose to
block or receive any message. So
the normal user A and B can’t

00:20:20.886,00:20:25.891
feel anything. Uh this is a
demo. We didn’t replay the whole
process or the man-in-the-middle

00:20:28.561,00:20:34.867
here due to time limitations.
This demo will just verify that
the sender can’t distinguish

00:20:34.867,00:20:39.872
between the real and the fake
receiver. So man-in-the-middle
attack will work properly. Here

00:20:42.508,00:20:47.513
we can see the normal user send
a file and sometimes the users,
the normal user get the file and

00:20:56.188,00:21:01.127
sometimes the attackers will get
the file. So here the attacker
will get the file here. Um, yeah

00:21:27.520,00:21:32.525
now let’s go to a third
category, logic vulnerabilities.
First, let’s think about a

00:21:35.361,00:21:40.366
question. How to design a secure
process to establish connection
between sender A and the

00:21:42.434,00:21:47.439
receiver B. We think it should
be like this. Your A request to
send and B accepts. And then

00:21:53.012,00:21:58.017
that link will be established.
Then A send a file and B will
receive it successfully. But

00:22:01.187,00:22:07.193
actually most nearby sharing
apps will establish a WIFI
connection as soon as the sender

00:22:07.193,00:22:12.198
A just send the request. But why
app developers choose a, a
secure way? We think that they

00:22:15.801,00:22:20.806
might have had their own
conspiracy here. M-more clicks
over means less convenience so

00:22:24.843,00:22:29.848
the developers don’t want their
users double confirm. And the
receiver uh, also want to see a

00:22:31.984,00:22:36.989
thumbnail about a file to decide
whether accept the file or not.
So convenience wins and

00:22:40.125,00:22:45.130
sometimes security lose.
Firstly, the none-confirm
connection wins more attack

00:22:47.433,00:22:52.438
surface here and the attackers
can now establish the WIFI or
WIFI P2P connection without any

00:22:55.307,00:23:00.246
correction. It will open the for
attacks to exploit other
vulnerabilities and even choose

00:23:02.715,00:23:07.720
zero click attack here. Just
exploit the uh f-file image
protocol here. Secondly we can

00:23:12.258,00:23:19.198
hijack the victims network. In
these two cases show on this
slide we can see that when

00:23:19.198,00:23:24.203
transfer uh transfer files that
a one device creates a WIFI
hotspot and the other device

00:23:27.539,00:23:32.544
connect to it directly. However
it is not this easy to hijack
networks successfully. First if

00:23:36.048,00:23:41.053
attackers want to hijack the
network they must be a hotspot
server. Can they choose to be a

00:23:43.289,00:23:48.294
server? We found it w- the other
way, can. For some apps the
senders are tapping delay the

00:23:51.363,00:23:56.368
sole creator, it is okay because
here we attackers are always
senders. For many other apps we

00:23:58.504,00:24:04.743
found that when an app joining
Android seven and another app
joining out android eight want

00:24:04.743,00:24:10.716
to establish a connection
android seven is always a server
because some cap,

00:24:10.716,00:24:15.721
compat-compatibility it still’s
here. Secondly we’ll make
another user to connect to my

00:24:19.992,00:24:24.997
WIFI without, without
interaction, can we do that? We
found yes. Because it was

00:24:28.000,00:24:33.005
designed like this. That’s still
a demo here. The victim just
check his internet access and he

00:24:43.415,00:24:48.420
just opened uh, a file transfer
apps and just delivered to here
or make it background or turn,

00:24:51.690,00:24:56.695
turn that off. Turn the screen
off here. The attacker requests
to send him file. And then the

00:25:08.874,00:25:13.879
victims open his browser and
he’ll be hijacked. Yeah. Finally
it’s our fourth category, other

00:25:32.131,00:25:37.136
vulnerabilities. We will share
three examples here. One, accept
automatically via WIFI P2P. Two,

00:25:41.874,00:25:46.879
directory traversal. And it’s
three remote code, remote file
management vulnerabilities. In

00:25:50.749,00:25:57.089
this case when sharing a files
this app will establish a WIFI
P2P connection. We can’t see

00:25:57.089,00:26:01.894
that when other device want to
join them it will need proo-
pro- provide the correct

00:26:01.894,00:26:06.899
password. However when you use
WIFI P2P protocol to con-
connect it, we found that anyone

00:26:09.201,00:26:15.073
can join them without any
information here. And a normal
users w- won’t feel anything. So

00:26:15.073,00:26:20.078
we’ll get the file directly.
This is a second logic
vulnerability example and in

00:26:24.550,00:26:30.989
this case it is a directory
traversal vulnerability. The
file transfer was accomplished

00:26:30.989,00:26:35.994
by web store so the a, senders
may create a web store and send
the receiver a URL to get. Then

00:26:41.366,00:26:46.371
m- the, the receiver can modify
to get any files here. Let’s do
a demo here. The iPhone is the

00:26:54.947,00:26:59.952
sender. Then he goes to create
an image. But he want to send
another normal image to the left

00:27:03.555,00:27:08.560
phone. Right here the left phone
will get anything he wants. And
in this case we will share a

00:27:16.835,00:27:21.840
file management relate
vulnerabilities. If a app wants
to open the FT, FTP server

00:27:24.476,00:27:29.481
computer within the same local
area network can manage the file
in smartphone. We found that

00:27:33.318,00:27:38.323
many apps didn’t have any
authentication here and secure
design. Any users had read and

00:27:41.593,00:27:48.567
write permissions here so if the
attackers are in the same LANs
they can get and write all your

00:27:48.567,00:27:53.572
files here. This is a summary of
vulnerabilities in near by
sharing apps. First none-confirm

00:27:56.608,00:28:02.814
b-before WIFI connection
established. Two, not well
protected access to WIFI or WIFI

00:28:02.814,00:28:07.819
P2p. Three, unsecure transport,
and finally no anti-spoofing at
all. Those vulnerabilities

00:28:12.324,00:28:17.329
patterns affect all the nearby
sharing apps. We finished our
four common vulnerability

00:28:20.799,00:28:25.804
categories and now we present to
you our security survey about
nearby sharing apps. What, um,

00:28:30.375,00:28:35.380
the ready X mean no security
measures at all. A yellow O
means have security measures but

00:28:37.749,00:28:42.754
it can be bypassed there. There
are no one green here. But I
will show n-no brand here. M-

00:28:48.927,00:28:53.932
there are little security
measures such as access control
when WIFI uh were established

00:28:58.070,00:29:03.008
here. Then we did security
survey for top ten third party
nearby sharing apps. And the

00:29:06.511,00:29:13.085
results are showing here. Um,
most all them are vulnerable
too. Only twenty percent of them

00:29:13.085,00:29:18.090
can prevent a sniffer attack and
only ten percent of them can
prevent spoofing. And notice

00:29:21.260,00:29:26.264
that this is a test result on
android eight. If we tested them
on android seven or lower nearly

00:29:29.434,00:29:34.439
all of them will be vulnerable
because android allow the app to
create a, a hotspot with their

00:29:39.378,00:29:46.084
self-defined password on android
seven. So when android seven and
android eight were connection

00:29:46.084,00:29:51.089
make a connection the android
seven will always uh be the
server and will be vulnerable.

00:29:55.293,00:30:00.298
Finally let’s talk about uh,
mitigation. This is our four
devices uh, uh devices about

00:30:04.803,00:30:09.808
mitigations. Sorry. First we
need more secure WIFI and WIFI
P2P key exchange. And two we n-

00:30:15.914,00:30:20.919
we need transport encryption and
three it must be designed to
pro- prevent a spoofing. And

00:30:24.823,00:30:29.828
finally there are others, more
tips. First there must have
secure WIFI and WIFI P2P key

00:30:32.564,00:30:37.569
exchange so we recommend that
when app transfer a key over
secure channels such as NFC.

00:30:40.872,00:30:45.877
Certificate based key-exchange
mechanism and the internet. On
the other hand the PIN code is a

00:30:48.447,00:30:53.452
good choice too. Now, nearly all
apps has four files without any
transport layer encryption. When

00:31:00.058,00:31:05.063
we recommended this app, app use
TLS/HTTPS instead of TCP/HTTP
and transferring keys over

00:31:08.433,00:31:13.438
internet securely or
pre-exchange keys for context.
It is not very easy to prevent a

00:31:18.443,00:31:23.448
spoofing. We prevent a method
here. We prevent it here but uh
we use a certificate based

00:31:27.886,00:31:32.991
authentication when an app
launch for the first time it
will get a unique ID descrip-

00:31:32.991,00:31:39.097
distributed by server and
corresponding certificates
assigned with pre-defined trust

00:31:39.097,00:31:44.102
anchor. So attacker can’t send
unique ID correctly. We can make
sure that the device had, can

00:31:48.907,00:31:53.912
distinguish between the real
user and the attackers. Hm, here
are some other tips. First we

00:32:01.520,00:32:06.525
must prevent attacker from
joining a network. And stay file
sharing turned off by default.

00:32:09.094,00:32:14.099
And turned off the uh turned off
them and off the period of idle
time. And if confirm before

00:32:18.503,00:32:24.242
connection is established and
finally do not establish
connection automatically with

00:32:24.242,00:32:29.247
users who are not familiar. This
is our recommended design. We
use this a lot being we

00:32:37.956,00:32:42.961
recommended pre-exchange public
keys and authenticate
automatically for contacts. And

00:32:45.864,00:32:52.304
exchange keys through the server
when they are internet access
for other peers. When your users

00:32:52.304,00:32:57.309
are not logged in or have no
internet access at all we
recommended pin code, NFC to

00:32:59.911,00:33:04.850
exchange keys. PBC and
Diffie-Hellman here uh it's easy
to deploy and um have some s- uh

00:33:09.354,00:33:14.659
security measure here but it is
not rec- very recommended
because it can’t prevent

00:33:14.659,00:33:19.664
man-in-the-middle attack. Now
this is our conclusion. We
analyzed the attacker vectors of

00:33:27.105,00:33:32.110
nearby sharing apps and this a
first comprehensive research
about them. And we found many

00:33:37.215,00:33:42.220
vulnerabilities here and we
categorized in several common
attack methods and finally we

00:33:44.823,00:33:49.828
present some effective
mitigation methods here. Thank
you. [applause] [inaudible

00:34:02.507,00:34:07.612
audience question] Now the
mitigations will be deployed by
many apps here but we can’t tell

00:34:07.612,00:34:12.617
which app uh is secure before
our vendor didn’t want to say
that. Sorry about that.

