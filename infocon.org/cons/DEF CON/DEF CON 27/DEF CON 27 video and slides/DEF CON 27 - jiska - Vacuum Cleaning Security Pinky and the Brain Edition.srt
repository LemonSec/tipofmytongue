00:00:00.067,00:00:06.206
>>How many people here like
cleaning their house? No? Oh
wow, this is a weird crowd, holy

00:00:06.206,00:00:12.880
cow. So um, I don’t like
cleaning my house. I don’t like
running a vacuum. I recently had

00:00:12.880,00:00:17.951
a small child, um, which I
thought would be effective. Um,
he has now started to crawl, I’m

00:00:17.951,00:00:23.524
like, yes! Human Roomba. But I
quickly discovered that the
problem is, you can’t just put

00:00:23.524,00:00:27.728
like a- like a- like a cloth or
a towel on the bottom of him
and- and have it be like a dust

00:00:27.728,00:00:31.598
cloth running around, because he
starts to eat the things. And
that’s- and then it’s going to

00:00:31.598,00:00:38.005
break the human robot vacuum.
So, maybe I’ll have one of these
vacuums in my future, or, based

00:00:38.005,00:00:43.410
on what we’re about to hear, nn
probably not. Let’s give Fabian
and Jiska a big round of

00:00:43.410,00:00:46.546
applause. They came all the way
from Germany to talk to you
about silly little robot

00:00:46.546,00:00:51.551
vacuums. Let’s give them a round
of applause. [Applause]
>>Welcome to our talk about uh

00:00:55.522,00:01:01.061
vacuum cleaners. And it will be
about a lot of iot components
including the cloud and the

00:01:01.061,00:01:07.100
actual hardware. This is Fabian,
working at ERNW and I’m from the
Secure Mobile Networking Lab.

00:01:07.100,00:01:13.307
So, why does it matter? Um, um,
um, vacuum cleaning robot
actually has access to your home

00:01:13.307,00:01:19.346
wifi and it knows a lot of your
personal habits like um, when
are you at home, when are you at

00:01:19.346,00:01:24.918
work, how many people live in
your apartment, how big it is,
uh, do you have cats, children,

00:01:24.918,00:01:31.024
partners. Um, and my question to
you is who of you owns a vacuum
cleaning robot? Quite a few. And

00:01:31.024,00:01:36.763
now maybe some hands going down,
who of you like, have like their
own? Not owning someone’s on the

00:01:36.763,00:01:42.602
internet but like really owning
your own vacuum robot. Ah, less
hands yeah. Okay, um so we um

00:01:42.602,00:01:47.607
chose actually the Neato
ecosystem to analyse and uh- we
are from Germany and in Germany

00:01:50.811,00:01:55.816
um- these are just relabeled by
Vorwerk and um- they are selling
vacuum cleaners since 1929 or

00:01:58.452,00:02:03.023
something. Um- and their top
model is actually a rebranded
Neato and it always wins the

00:02:03.023,00:02:08.195
test competitions because it has
like rainbow colored LEDs. The
Neato hasn’t. And- and a green

00:02:08.195,00:02:14.601
brush and a few more sensors,
yeah. Um- so we did responsible
disclosure, and the most uh-

00:02:14.601,00:02:20.073
urgent uh- stuff was really
fixed in time and also more
fixes coming out. Um- no

00:02:20.073,00:02:25.946
customer data was leaked, but
robots were harmed during our
experiments. Sorry for this- so

00:02:25.946,00:02:32.119
this is how the lab looked in
between doing those experiments.
So the infrastructure, um- each

00:02:32.119,00:02:36.623
uh- robot has actually a user
interface and also some usb
console for some basic

00:02:36.623,00:02:42.295
debugging. Um- then you have a
smart phone app which can run
some manual robot commands but

00:02:42.295,00:02:47.467
this is not for cleaning your
house so this is just a very
basic thing going on there. Um-

00:02:47.467,00:02:52.973
so you actually need to pair it
with a user account and the user
account is in the Beehive cloud.

00:02:52.973,00:02:57.611
Um- and during setup you setup
this account and link it to the
robot. And then there is a

00:02:57.611,00:03:02.349
second cloud, a Nucleo cloud,
because everything is better
with two clouds, obviously. And,

00:03:02.349,00:03:06.286
so this second cloud is somehow
connected to the Beehive cloud,
we don’t know how exactly um-

00:03:06.286,00:03:12.592
because we cannot sniff there.
Um- but um- it is- the Nucleo
cloud is used used um- for

00:03:12.592,00:03:19.433
example starting the cleaning
process, getting back a map
report uh- about the cleaning.

00:03:19.433,00:03:23.870
And there is a lot of security
going on there. So the robot
itself has like secure boot and

00:03:23.870,00:03:28.208
encrypted logs, signed firmware
updates, so we tried flipping
bits and then everything else

00:03:28.208,00:03:35.015
actually has like HTTPS and
special RSA keys between the
robot and the cloud, and then a

00:03:35.015,00:03:40.320
secret key between the robot and
the user so really everything is
being done there. So you would

00:03:40.320,00:03:44.925
say like, why did- why are we
even giving a talk about this,
what could go wrong? Um- and I

00:03:44.925,00:03:50.564
have to say a lot can go wrong.
So we managed to bypass the
secure boot and extract the

00:03:50.564,00:03:55.569
image of the robot and our key
findings are key findings. And
we also did um- a QNX side

00:03:58.004,00:04:04.144
quest. Uh- and we were able to
gain unauthenticated remote
executions on the robots over

00:04:04.144,00:04:10.517
the cloud. So the secure bypass,
uh- actually works that you can
put the robot in a test mode,

00:04:10.517,00:04:15.589
reboot it, and then you would
get a special boot loader and
that special boot loader only

00:04:15.589,00:04:20.894
takes QNX IFS so a very
proprietary thing, but if you
manage to compile this then you

00:04:20.894,00:04:26.366
can dump all of the RAM to the
serial port and um- if you load
it to a special region then you

00:04:26.366,00:04:32.873
can readout the original image.
And in this image of Neato, of
the robot, um- there is two

00:04:32.873,00:04:37.811
processes that are very
important. The first one is a
watchdog called Pinky, and also

00:04:37.811,00:04:42.549
cleaning logic, which is called
Brain. That’s why we have this
funny subtitle with Pinky and

00:04:42.549,00:04:47.554
Brain. >>Alright so I will now
talk about the key findings. So
first of all I have to explain

00:04:50.090,00:04:53.727
what the keys do in particular.
So we have the secret key. The
secret key is uh- unique for one

00:04:53.727,00:04:55.729
robot user account connection
and it’s uh- computed by the
robot on first linkage to user

00:04:55.729,00:04:57.731
account. And it’s used to
authenticate commands to the
robots. So, if you want to start

00:04:57.731,00:04:59.733
cleaning or anything like that
you have to authenticate this
request using the secret key.

00:04:59.733,00:05:04.671
And the secret key is known by
the robot, um- the smart
application, and also the cloud.

00:05:14.347,00:05:19.352
And um- the authentication works
with an HTTP header, which is
just a basic authen- uh-

00:05:22.522,00:05:28.495
authorization header in HTTP,
led by the NEATOAPP string and
then a signature. The signature

00:05:28.495,00:05:33.900
just takes in the serial number
of the robot and the current
date of the request and um- the

00:05:33.900,00:05:38.905
message body so, the command.
And this is then uh- hashed with
the HMAC SHA 256 um- with um-

00:05:41.608,00:05:46.813
the secret key as the key
component. The second uh- key
that is used in the

00:05:46.813,00:05:52.786
infrastructure is the RSA key.
Um- so we need a second key
because the robots have to at

00:05:52.786,00:05:58.725
some point exchange um- the
secret key with the cloud for
authentication of the commands,

00:05:58.725,00:06:03.897
so the robots themselves need to
have another set of keys to
authenticate against the cloud.

00:06:03.897,00:06:08.034
And also the secret key is not
that secret because several
parties know it. We know that

00:06:08.034,00:06:12.973
the smart application has it,
therefor the user can extract it
and everything. Um- so this RSA

00:06:12.973,00:06:19.012
key is for authenticating the
robot against the cloud. And
this works similar to the secret

00:06:19.012,00:06:24.251
key. Um- we have um-
authorization header in HTTP
again, um- led by the niet-

00:06:24.251,00:06:29.623
NEATOBOT string and the serial
number of the robot uh- followed
by a signature. The signature

00:06:29.623,00:06:35.929
this time is over a little more
data. It’s the robot’s serial
again, um- the current HTTP

00:06:35.929,00:06:42.269
method, the URI of the request,
um- the current date and the
body. And this is then signed

00:06:42.269,00:06:47.274
with the RSA SHA 256. Okay, so
now, what- what’s going wrong?
Um- we have um- this excerpt of

00:06:53.246,00:06:58.218
the secret key computation. It’s
a little bit simplified but
I’ll- we’ll walk you through.

00:06:58.218,00:07:03.390
Um- so first of all we have this
random value, that is just a
random value. An then we have

00:07:03.390,00:07:10.363
this uh- 16 byte time shift
variable. And this is later then
used by the SHA1 hashing so the

00:07:10.363,00:07:14.934
secret keys themselves are
basically SHA1 hashes. A little
shorter than that but it’s a

00:07:14.934,00:07:19.939
SHA1 hash. So they look pretty
nice and the entropy is really
good because we all know SHA1 is

00:07:19.939,00:07:24.944
pretty sane. Um- so now it’s um-
important to see um- what the
bits and this uh- and the bytes

00:07:27.447,00:07:32.752
in this time shift variable are.
So the first four bytes are the
current time. Well, we know that

00:07:32.752,00:07:37.757
the time is often used in
cryptography. It’s not that
good, but we also have seen

00:07:40.093,00:07:45.965
worse so okay. But then we have
some constant values, I don’t
know why but okay. So zero is a

00:07:45.965,00:07:52.605
great number, as well as 16. And
then we actually use the random
numbers. So the uh- byte number

00:07:52.605,00:07:57.677
8 of the time shift variable is
um- some computation with a
random value. And then we have

00:07:57.677,00:08:01.948
the next byte which is also some
computation with a random value,
but this time we- we do some

00:08:01.948,00:08:07.587
math where we actually lose some
entropy because six bit is
enough for a byte, so why not.

00:08:07.587,00:08:13.460
And the last uh- six bytes then
are the robot’s MAC address.
And, while the robot’s MAC

00:08:13.460,00:08:19.299
address is not exactly secret
because the robot’s serial
number consists of the date of

00:08:19.299,00:08:23.069
production, followed by the
robot’s MAC address. And this
one is printed on the packaging

00:08:23.069,00:08:28.308
of the robot, and while- on Ebay
you can see people uh- doing
photographs of the packaging and

00:08:28.308,00:08:32.846
then you have the serial number.
Uh- also I mean it’s a MAC
address, so it’s on the network,

00:08:32.846,00:08:39.519
it’s not that secret. And when
the robot is first plugged in it
also opens a wifi access point

00:08:39.519,00:08:45.425
to uh- provision it. And this
wifi access point’s name also is
the robot’s MAC address. Okay,

00:08:45.425,00:08:50.463
the MAC address doesn’t provide
any security. The constants
obviously don’t as well. Um- now

00:08:50.463,00:08:57.203
the random values. Um- this is
not much randomness but at least
some but, there’s another

00:08:57.203,00:09:02.142
problem because the random
generator actually looks like
this. [laughter] This is because

00:09:05.045,00:09:10.417
they forgot to seat the random
number generator and this means
if you have a robot that’s

00:09:10.417,00:09:15.255
freshly booted or freshly
unpackaged, um- it always
returns the same random number,

00:09:15.255,00:09:19.592
which thereby is not, only a
number. And the number we
printed here is actually the

00:09:19.592,00:09:26.199
number that robot um- the
NeatoBot um- botvac connect D7’s
take as the first random number.

00:09:26.199,00:09:31.204
Um- yeah so okay. We don’t have
any entropy except for the time
now, so the current timestamp.

00:09:33.473,00:09:38.411
Now the question is how much
entropy does the unix timestamp
provide. And, therefore we have

00:09:38.411,00:09:43.983
some numbers for if an attacker
knows about one year exact about
when the robot was first linked

00:09:43.983,00:09:49.756
to the cloud, that’s actually 25
bit of entropy. And if the
attacker knows this about one

00:09:49.756,00:09:54.794
hour exact, it’s only 12 bit of
entropy. And you only 12 bit of
entropy is nothing. You can

00:09:54.794,00:10:00.333
bruteforce this against the
cloud. And um- there also is
some other attacks against uh-

00:10:00.333,00:10:05.104
the secret keys, because you can
sniff some uh- authorization
headers and thereby do an

00:10:05.104,00:10:10.443
offline attack, and with an
offline attack, 25 bit also is
nothing. It’s like minutes, or

00:10:10.443,00:10:15.448
even seconds. And um- yeah so
this is not that secure. You
also can think of uh- of uh- a

00:10:18.785,00:10:22.322
social engineering scenario
where I just come over to him
and say hey, I’m from the Neato

00:10:22.322,00:10:26.526
customer support, uh- please
reconnect your robot to the
cloud, and now I know the

00:10:26.526,00:10:31.331
timestamp exactly, and now I now
everything for the secret key
computation and I’m able to

00:10:31.331,00:10:38.104
actually compute the secret key
and send arbitrary commands to
the robot. Okay, so much for the

00:10:38.104,00:10:44.244
secret keys. Now, the RSA keys.
So um- we found um- them on the
robot’s file system slash var

00:10:44.244,00:10:49.883
slash keys. There is this nice
file called vendor private key
production. So this sounds

00:10:49.883,00:10:56.356
pretty promising. Um- it is
encrypted at least but um- in
banner it’s just some string

00:10:56.356,00:11:01.294
obfuscation and then, after some
de-obfuscation we the password.
And uh- yeah. So we then figured

00:11:04.931,00:11:10.603
out that the RSA key is the same
for all robots, because
obviously for a public key

00:11:10.603,00:11:16.509
infrastructure you want to have
the same key on every robot, why
not? Um- this leads to the

00:11:16.509,00:11:21.814
scenario where an attacker is
just able to talk to the cloud
and say, hey, by the way I’m a

00:11:21.814,00:11:27.921
robot and the cloud says okay,
it’s fine. And um- if you recode
the authoriz- the

00:11:27.921,00:11:33.026
authentication, that uh- the
robots do with the cloud. The
Neatobot string, followed by the

00:11:33.026,00:11:39.933
serial number and the signature,
and the only way single robots
get identified is this first

00:11:39.933,00:11:44.671
string which is the serial
number so if I know the private
key I can just send arbitrary

00:11:44.671,00:11:49.842
requests with arbitrary serial
numbers in the request and I can
impersonate arbitrary robots. So

00:11:49.842,00:11:54.847
I can be any robot I want to be.
And, this is bad. Um- there are
a lot of attacks that we can

00:11:57.984,00:12:02.922
execute on this but I will
present maybe yeah- a nice one I
think because it’s actually- we

00:12:05.091,00:12:09.696
are able to leak the victim’s
smartphone IP address. Um-
because like Jiska mentioned

00:12:09.696,00:12:14.300
before, we have this manual
driving mode, where we can
directly control the robot by

00:12:14.300,00:12:18.771
pressing some buttons on the
smartphone and the robot
directly drives like that. Um-

00:12:18.771,00:12:24.043
and what happens here is that
the smartphone asks the Nucleo-
Nucleo cloud what’s the robot’s

00:12:24.043,00:12:30.316
network location is. And Nucleo
cloud then asks us, because we
are now the robot, uh- what the

00:12:30.316,00:12:35.655
robot’s network location is.
Also the robot itself doesn’t
get any requests anymore because

00:12:35.655,00:12:41.494
only the last recent robot that
locked into the cloud is getting
requests. So we can just kick

00:12:41.494,00:12:47.333
the other robot and we get the
requests. And- well we then
answer an arbitrary port and IP

00:12:47.333,00:12:53.006
address location to the cloud,
and the cloud then happily
forwards this to the smartphone.

00:12:53.006,00:12:58.344
And, well who would have
guessed, the smartphone just
connects to this IP in part, um-

00:12:58.344,00:13:04.550
so thereby we obtain the public
IP of the smartphone, we can now
do some things like geolocation

00:13:04.550,00:13:10.456
lookups and know pretty exactly
where this person is. Also this
opens a channel from the

00:13:10.456,00:13:13.726
smartphone so if there is any
firewall or something like that,
it’s an outgoing connection,

00:13:13.726,00:13:19.399
it’s fine. Um- and yeah, we- we
have a port open and maybe we
can do some more stuff with the

00:13:19.399,00:13:24.937
smartphone even. So this could
be a nice attack vector against
the smartphone. And yeah- I

00:13:24.937,00:13:29.942
don’t think that this should be
possible. Um- yeah. Alright, so,
a little QNX uh- sidequest. Uh-

00:13:33.880,00:13:38.885
as Jiska mentioned, um- the
robot is running on QNX 6.5 and
this has some, it’s an older

00:13:41.387,00:13:46.926
system of QNX, um- so just for
those of you who don’t know QNX,
it’s a um- root operating system

00:13:46.926,00:13:52.498
by Blackberry and um- it’s
actually running in cars, it’s
running in power plants, and

00:13:52.498,00:13:57.103
some critical applications. Um-
but like I mentioned, this
version is pretty old, there’s-

00:13:57.103,00:14:02.041
meanwhile there’s some 7.x
version and pretty updated and
more secure now. Um- but this

00:14:04.310,00:14:10.249
old version has some nice
default settings like for
example, ASLR and DEP are just

00:14:10.249,00:14:16.155
turned off by default, because,
whoever needs that? I don’t
know. And um- but that’s not

00:14:16.155,00:14:22.695
all. We just stumbled upon
something nice when we looked
into the robots. Because, um-

00:14:22.695,00:14:28.901
this- this proc fs file system
on QNX, it’s just like a nor-
the normal proc fs you have on

00:14:28.901,00:14:35.274
almost every UNIX system. It’s
like um- the process memory of
arbitrary processes is mapped in

00:14:35.274,00:14:40.546
the file system so that root or
anyone can read this memory of
the processes and also write to

00:14:40.546,00:14:47.386
it maybe. And um- the problem
with the older QNX versions is
that actually the Umask that is

00:14:47.386,00:14:52.892
set for this um- proc fs file
system pretty sure it allows
arbitrary users to read

00:14:52.892,00:14:58.331
arbitrary process memory. So um-
it doesn’t matter if you are
just a normal user or if you are

00:14:58.331,00:15:00.266
root, you can read any process
memory and this is a real
problem if we look into

00:15:00.266,00:15:02.268
privileged processes, like for
example this Ubinary. This
Ubinary is used, as you might

00:15:02.268,00:15:04.270
know to change the currently
authorized user of the system
and, well therefore it has to

00:15:04.270,00:15:09.275
check my authentication and this
is a password authentication
normally. And to get the

00:15:18.785,00:15:23.356
password authentication right it
has to read in the etc shadow
file, which is a privileged

00:15:23.356,00:15:28.528
file. It normally isn’t
readable. Um- and what a hacker
can do is he can invoke this

00:15:28.528,00:15:33.766
Ubinary to gain root privileges
and he doesn’t know the password
but that’s not important because

00:15:33.766,00:15:39.672
he just reads the process memory
of the SU process all the time,
until that very moment where the

00:15:39.672,00:15:44.343
etc shadow file is read in, and
he then just has- all the
information that uh- is uh-

00:15:44.343,00:15:49.448
written in the etc shadow file
and now, then he can try to
correct this and obtain the root

00:15:49.448,00:15:54.921
password. This of course isn’t
limited to uh- the etc shadow
file, you can- or the SU

00:15:54.921,00:15:59.892
process. You can do this with
any privileged process. You can
extract uh- SSL keys of- of

00:15:59.892,00:16:03.796
processes or just read any data
that any privileged process you
can execute on the system is

00:16:03.796,00:16:08.801
able to read. Alright. >>So um-
we looked a bit more into uh-
the connection to the cloud and

00:16:16.576,00:16:22.515
uh- did some fuzzing in the very
beginning, and um- I discovered
a crash lock and decrypted it

00:16:22.515,00:16:27.720
with one of the logger keys of
the image. Um- so actually there
is an astro binary and this is

00:16:27.720,00:16:33.326
uh- connected to the Nucleo
cloud, and then passes commands
to the robot binary. And within

00:16:33.326,00:16:39.432
this astro connection, there is
a buffer overflow that can be
triggered with this url. And,

00:16:39.432,00:16:45.938
the interesting part here is
that um- we found that the
buffer overflow is happening

00:16:45.938,00:16:51.677
when the authentication header
is parsed, which means um- there
is no authentication because we

00:16:51.677,00:16:55.514
are exploiting the
authentication itself. So we
have an unauthenticated remote

00:16:55.514,00:17:01.921
code execution on the bin astro,
and well luckily we don’t even
need this QNX side quest because

00:17:01.921,00:17:07.994
all services run as root. That’s
very nice. Uh- and the fix for
this is by now Neato is um-

00:17:07.994,00:17:13.232
validating the authentication
headers in cloud so that this is
no longer happening. Uh- yeah,

00:17:13.232,00:17:18.237
so- but it was very nice to like
control any robot if you had the
serial ID. Security

00:17:21.674,00:17:26.679
implications. So if you have an
IOT product at home, try to keep
it offline. This is often not

00:17:26.679,00:17:31.317
possible so you might use your
personal like second wifi or
something and not the one for

00:17:31.317,00:17:36.389
the other devices. Um- as a
customer, you should really
update your robot so it’s not

00:17:36.389,00:17:42.795
just um- because security, they
also have some nice new
features, but also for the

00:17:42.795,00:17:47.567
security of course. And you saw
that the most particular part
here is the serial number, so

00:17:47.567,00:17:51.304
you need to hide this one, so if
you have friends visiting, hide
your robot so that they cannot

00:17:51.304,00:17:57.143
read it. It’s printed on the
bottom. Um- or it’s just put on
a tin foil hat or something to

00:17:57.143,00:18:02.081
help yourself. Um- the second
part for the security implement-
uh- implications here is that

00:18:04.216,00:18:09.221
for developers, it’s really
important that security is done
not just by hitting all the buzz

00:18:09.221,00:18:14.594
words, like, oh yeah we have uh-
RSA, RNG, hashing, secure boot,
encrypted logs, blah blah blah.

00:18:14.594,00:18:20.666
Um- but the important part here
is that you have decision for
the root of trust so that you

00:18:20.666,00:18:26.739
think about what is the trusted
components in your IOT network.
And a very important part here

00:18:26.739,00:18:32.745
is that dissecting one of your
robots should not um- harm the
security of any other component,

00:18:32.745,00:18:36.816
so you should always consider a
student having a lot of time
dissecting one vacuum cleaner

00:18:36.816,00:18:42.388
for half a year and then
exploiting whatever. Uh- and you
should put a lot of time into

00:18:42.388,00:18:44.390
uh- testing the- the root of
trust. So for example this
random function, if you would

00:18:44.390,00:18:46.392
have tested it in practice
before the hashing, then you
could have probably seen this

00:18:46.392,00:18:48.394
uh- in practice that it does not
work and just returns the same
time always. So um- we still

00:18:48.394,00:18:53.399
have some time left for Q and A,
and thank you for listening.
[applause] So, I don’t- it’s

00:18:56.068,00:19:01.007
hard to see people there. Yeah,
really? No questions? Great.
Yeah. Down- Down here yes? Yes,

00:19:34.040,00:19:39.045
what is your question?
>>[inaudible] >>Ah, yeah. So the
question is if hiding your MAC

00:19:45.584,00:19:51.223
address versus hiding your
serial, if there’s a difference.
Um- yes it is because uh- the

00:19:51.223,00:19:58.030
other part of um- the serial is
also the production date. I mean
it can be guessed, but overall

00:19:58.030,00:20:02.368
it’s harder. And for the MAC
address- to know the MAC
address, you need to be either

00:20:02.368,00:20:08.274
in the same network, for
example, or you need to be uh-
so you have to be physically

00:20:08.274,00:20:13.145
close, for example when you
start the robot and it’s like
making this pairing access point

00:20:13.145,00:20:18.150
and so on. Very serious in
there. So um- for getting remote
control, the attack vector gets

00:20:18.150,00:20:23.322
even larger if someone knows
your serial address. >>Yeah for
addressing the commands, you

00:20:23.322,00:20:26.659
need to have the full serial
number, not only the MAC
address, so you have to get the

00:20:26.659,00:20:32.064
production date. And, while you
can try to brutefor- bruteforce
this, but it’s pretty hard, it’s

00:20:32.064,00:20:37.069
a lot of entropy. So, the serial
number itself is more important
than the MAC address. >>Okay any

00:20:40.773,00:20:45.778
more questions? Okay, not- not
really? Okay then, thank you.
Ah, oh wait wait wait. So, one

00:20:50.049,00:20:55.054
question yes? >>[Inaudible] >>Ah
so the question is if they uh-
made a more secure g- uh- key

00:21:01.460,00:21:06.465
generation method. So the thing
is, we think so but it is hard
to confirm, because they also

00:21:08.601,00:21:14.440
fixed the secure boot issue. So
we can no longer extract the
firmware image and confirm if

00:21:14.440,00:21:19.445
they do proper security. So, I
mean at least they promised us
to do this so, I think it is

00:21:25.117,00:21:30.723
done. But- yeah. It’s always
good to like, double check.
>>Yeah in general they were

00:21:30.723,00:21:36.061
pretty nice and once we managed
to reach them, actually because
this was quite a long process

00:21:36.061,00:21:41.033
because uh- we tried to reach
them via the customer support
but it seemed like the customer

00:21:41.033,00:21:45.304
support just dropped our
requests and they never reached
the developers. And just like

00:21:45.304,00:21:51.877
one- like half a year later or
something, we get a message like
at 3am in the morning, US time,

00:21:51.877,00:21:53.879
and it was like hey, we just saw
that you had some requests and
we found your plaintext proof of

00:21:53.879,00:21:55.881
concept code uh- in our tracker
system so maybe we should talk.
And from then on they were super

00:21:55.881,00:21:57.883
nice and everything went well.
>>Yeah and I thought like yeah,
maybe they are in the US and

00:21:57.883,00:22:02.821
it’s 3am but maybe just call
them the same time the next day
um- and it really was 3am so the

00:22:18.871,00:22:23.876
person was like not in another
time zone or something. >>Any
more questions? >>Okay cool.

00:22:29.248,00:22:33.319
Thank you >>There’s another one
>>What what, another? Yeah I
didn’t see that. Where is the

00:22:33.319,00:22:38.324
other question? Yeah?
>>[inaudible] >>So the question
was if there is a specific

00:22:55.908,00:23:01.747
reason for why in Unix you are
able to read as a standard user
process of- the memory of other

00:23:01.747,00:23:06.752
processes. >>So um- QNX back
until 6.6 I guess was strictly
projects compliant and I think

00:23:09.321,00:23:14.493
this might have to do with it
because- cause, cause its
compliance means you really have

00:23:14.493,00:23:20.332
to um- when you have file
permissions then you have to
really give this permission to

00:23:20.332,00:23:26.972
any user who tries to read it.
Now, for QNX 7 and so on, the
Umask is the same but they also

00:23:26.972,00:23:31.610
have some other uh-
authentication methods in place
like more fine granular not only

00:23:31.610,00:23:37.816
the read bits is set and you can
read it, so this might be a
problem. And also these procfs

00:23:37.816,00:23:42.855
file systems is used for some
inter-process communications and
stuff like that so I think they

00:23:42.855,00:23:49.295
might have needed this for some
features but I’m not entirely
sure at this point. Okay. >>Yeah

00:23:49.295,00:23:54.300
so. >>Thank you very much.
[Applause]

