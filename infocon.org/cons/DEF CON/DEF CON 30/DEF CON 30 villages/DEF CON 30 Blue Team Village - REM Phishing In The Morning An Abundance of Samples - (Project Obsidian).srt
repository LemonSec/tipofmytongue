1
00:00:02,520 --> 00:00:05,339
all right and hello welcome to Blue Team

2
00:00:05,339 --> 00:00:07,020
Villages project obsidian reverse

3
00:00:07,020 --> 00:00:08,400
engineering malware station walkthrough

4
00:00:08,400 --> 00:00:10,200
this is fishing in the morning an

5
00:00:10,200 --> 00:00:12,719
abundance of malicious samples and uh

6
00:00:12,719 --> 00:00:14,400
contrary to the title we're not actually

7
00:00:14,400 --> 00:00:16,079
going to be looking at our phishing

8
00:00:16,079 --> 00:00:17,279
email

9
00:00:17,279 --> 00:00:19,920
um unfortunately when I made the title

10
00:00:19,920 --> 00:00:21,480
um that was before I had officially

11
00:00:21,480 --> 00:00:23,880
timed out this entire walkthrough and I

12
00:00:23,880 --> 00:00:25,800
ended up not having time for the

13
00:00:25,800 --> 00:00:27,480
phishing email so I'm going to briefly

14
00:00:27,480 --> 00:00:29,760
go over how to get that

15
00:00:29,760 --> 00:00:31,800
um phishing document in case you want it

16
00:00:31,800 --> 00:00:34,500
for your own analysis but right now

17
00:00:34,500 --> 00:00:35,700
we're not going to be going over that

18
00:00:35,700 --> 00:00:38,100
I'm hoping to do a mail doc walk through

19
00:00:38,100 --> 00:00:40,379
sometime in the future but in the

20
00:00:40,379 --> 00:00:42,719
meantime a little bit about myself

21
00:00:42,719 --> 00:00:44,820
uh my name is Allison uh you can just

22
00:00:44,820 --> 00:00:46,200
call me Scrabble that's what I go by

23
00:00:46,200 --> 00:00:47,160
here

24
00:00:47,160 --> 00:00:48,600
um and I'm a fourth year a cyber

25
00:00:48,600 --> 00:00:50,760
security major at a university up in the

26
00:00:50,760 --> 00:00:52,860
Northeast my background is mainly in

27
00:00:52,860 --> 00:00:54,360
incident response reverse engineering

28
00:00:54,360 --> 00:00:56,039
malware and cyber security engineering

29
00:00:56,039 --> 00:00:58,199
which is a little bit all over the place

30
00:00:58,199 --> 00:00:59,940
but generally speaking I stay on the

31
00:00:59,940 --> 00:01:01,920
blue team side of things and this is my

32
00:01:01,920 --> 00:01:03,719
second year with blue team Village uh so

33
00:01:03,719 --> 00:01:06,060
last year I helped out a little bit with

34
00:01:06,060 --> 00:01:09,000
the um the stations uh walkthrough for

35
00:01:09,000 --> 00:01:11,939
Defcon and we did a little thing on

36
00:01:11,939 --> 00:01:14,100
um Excel based malware

37
00:01:14,100 --> 00:01:16,080
um looking into those macros so that's

38
00:01:16,080 --> 00:01:17,100
really cool that was an amazing

39
00:01:17,100 --> 00:01:19,080
experience and this year I had the

40
00:01:19,080 --> 00:01:20,820
opportunity to lead both of these

41
00:01:20,820 --> 00:01:23,100
workshops for the station uh which is

42
00:01:23,100 --> 00:01:25,200
fantastic and really amazing coming from

43
00:01:25,200 --> 00:01:26,520
someone who's beginner

44
00:01:26,520 --> 00:01:28,439
and so I highly encourage you know if

45
00:01:28,439 --> 00:01:29,579
you're learning if you're interested in

46
00:01:29,579 --> 00:01:31,259
stuff on The Blue Team side of things to

47
00:01:31,259 --> 00:01:33,060
join this community uh because they're

48
00:01:33,060 --> 00:01:35,700
really excellent at uplifting people and

49
00:01:35,700 --> 00:01:38,040
um overall Community Education and I

50
00:01:38,040 --> 00:01:39,420
guess a little fun fact about myself is

51
00:01:39,420 --> 00:01:41,159
that I crochet that's a new hobby I

52
00:01:41,159 --> 00:01:43,380
picked up and um I'm guessing by the

53
00:01:43,380 --> 00:01:45,180
time I'm in Vegas it's probably what

54
00:01:45,180 --> 00:01:46,979
I've seen like 100 plus degrees every

55
00:01:46,979 --> 00:01:49,020
day so I'm going to be suffering

56
00:01:49,020 --> 00:01:50,520
um if it's not extremely obvious I've

57
00:01:50,520 --> 00:01:52,259
lived in the Northeast my entire life so

58
00:01:52,259 --> 00:01:54,720
that's going to be pretty interesting

59
00:01:54,720 --> 00:01:56,040
um so moving on

60
00:01:56,040 --> 00:01:58,380
looking at the table of contents uh you

61
00:01:58,380 --> 00:02:00,180
might see I've obvious skated it a

62
00:02:00,180 --> 00:02:01,320
little bit just so that I'm not making

63
00:02:01,320 --> 00:02:03,479
too many Major Spoilers but what we're

64
00:02:03,479 --> 00:02:05,040
going to do first is we're going to

65
00:02:05,040 --> 00:02:07,020
backtrack a little bit because in the

66
00:02:07,020 --> 00:02:08,878
previous Workshop going over Powershell

67
00:02:08,878 --> 00:02:11,280
scripts to obfuscating them and so on uh

68
00:02:11,280 --> 00:02:13,020
we encountered a binary in one of our

69
00:02:13,020 --> 00:02:15,720
Powershell samples and so we're going to

70
00:02:15,720 --> 00:02:18,239
today going to explore that binary

71
00:02:18,239 --> 00:02:20,459
so look at what information we can get

72
00:02:20,459 --> 00:02:22,020
from it

73
00:02:22,020 --> 00:02:23,700
um additionally uh before we do that

74
00:02:23,700 --> 00:02:25,200
like I mentioned previously I'm just

75
00:02:25,200 --> 00:02:26,819
going to quickly go over how to grab

76
00:02:26,819 --> 00:02:30,120
that phishing email document uh just in

77
00:02:30,120 --> 00:02:32,519
case you want it as a little apology for

78
00:02:32,519 --> 00:02:35,340
not being able to get to it in this um

79
00:02:35,340 --> 00:02:38,580
whole workshop and so after that we're

80
00:02:38,580 --> 00:02:40,560
going to do a quick 101 on portable

81
00:02:40,560 --> 00:02:42,300
executable files

82
00:02:42,300 --> 00:02:42,900
um

83
00:02:42,900 --> 00:02:44,819
and then after that we're going to just

84
00:02:44,819 --> 00:02:46,620
start whacking it with tools so looking

85
00:02:46,620 --> 00:02:49,080
at all the tools available to us within

86
00:02:49,080 --> 00:02:51,780
remnex that we can use to try to

87
00:02:51,780 --> 00:02:54,540
statically analyze this executable as

88
00:02:54,540 --> 00:02:56,700
best as we can and then totally

89
00:02:56,700 --> 00:02:58,440
unrelated but we're going to go into

90
00:02:58,440 --> 00:03:00,599
Windows real quick and do some further

91
00:03:00,599 --> 00:03:02,580
static analysis in there

92
00:03:02,580 --> 00:03:04,800
uh based on our results from what we

93
00:03:04,800 --> 00:03:07,260
could gather within remnix and then from

94
00:03:07,260 --> 00:03:09,000
there uh we're going to kind of be

95
00:03:09,000 --> 00:03:11,819
looking at maybe potentially some C2

96
00:03:11,819 --> 00:03:15,060
activities going on in there and so

97
00:03:15,060 --> 00:03:18,180
without further Ado I'm going to go back

98
00:03:18,180 --> 00:03:20,879
to what we covered previously as well as

99
00:03:20,879 --> 00:03:24,140
my little apology table

100
00:03:24,420 --> 00:03:26,459
all right so now in our demo environment

101
00:03:26,459 --> 00:03:28,620
uh this is just a remnix VM I have spun

102
00:03:28,620 --> 00:03:31,440
up that is host only

103
00:03:31,440 --> 00:03:33,480
um so like I mentioned we're going to be

104
00:03:33,480 --> 00:03:36,420
doing my Penance first which is grabbing

105
00:03:36,420 --> 00:03:38,280
that um

106
00:03:38,280 --> 00:03:40,620
malicious document within the email

107
00:03:40,620 --> 00:03:43,080
attachment for you guys just so that if

108
00:03:43,080 --> 00:03:44,340
you're interested in it you could take a

109
00:03:44,340 --> 00:03:46,500
crack at it on your own

110
00:03:46,500 --> 00:03:48,060
um in the meantime though uh we're just

111
00:03:48,060 --> 00:03:50,340
going to grab the contents of this real

112
00:03:50,340 --> 00:03:53,879
quick and as we can see here

113
00:03:53,879 --> 00:03:55,560
uh it's got your typical you know

114
00:03:55,560 --> 00:03:57,480
fishing thing you violated company

115
00:03:57,480 --> 00:03:59,220
policy

116
00:03:59,220 --> 00:03:59,939
um

117
00:03:59,939 --> 00:04:01,439
you know this may terminate your

118
00:04:01,439 --> 00:04:03,180
employment please review the decision

119
00:04:03,180 --> 00:04:04,379
made

120
00:04:04,379 --> 00:04:07,140
so on and so forth some kind of way to

121
00:04:07,140 --> 00:04:09,540
kind of force the targeted user to

122
00:04:09,540 --> 00:04:13,560
attempt to open this file uh using a

123
00:04:13,560 --> 00:04:15,959
sense of urgency so we're just going to

124
00:04:15,959 --> 00:04:18,478
copy this real quick and using cyber

125
00:04:18,478 --> 00:04:20,339
Chef you may be wondering why I'm not

126
00:04:20,339 --> 00:04:22,620
using cybershift within remnix um for

127
00:04:22,620 --> 00:04:24,840
whatever reason my VM refuses to update

128
00:04:24,840 --> 00:04:27,060
and this older version of cyber Chef

129
00:04:27,060 --> 00:04:29,280
won't do what I need it to do regarding

130
00:04:29,280 --> 00:04:31,979
the base64 conversion

131
00:04:31,979 --> 00:04:33,660
but what I'm going to do now is I'm

132
00:04:33,660 --> 00:04:34,919
going to take

133
00:04:34,919 --> 00:04:37,860
everything up here until we get to down

134
00:04:37,860 --> 00:04:39,540
here and you may be wondering what we're

135
00:04:39,540 --> 00:04:41,699
doing you can see this uh content

136
00:04:41,699 --> 00:04:44,400
transfer encoding base64. uh this is a

137
00:04:44,400 --> 00:04:46,199
pretty simple base64 conversion in order

138
00:04:46,199 --> 00:04:49,979
to get our uh now dock that we want so

139
00:04:49,979 --> 00:04:51,240
what I'm first going to do is I'm going

140
00:04:51,240 --> 00:04:54,500
to remove the white space here

141
00:04:54,900 --> 00:04:57,900
and then I'm going to grab our lovely

142
00:04:57,900 --> 00:05:01,560
from base64 here and so this still may

143
00:05:01,560 --> 00:05:03,419
seem like nonsense to you uh but worry

144
00:05:03,419 --> 00:05:07,199
not if we go check with our detect file

145
00:05:07,199 --> 00:05:09,720
type operation here it'll tell us that

146
00:05:09,720 --> 00:05:11,280
this is indeed a Microsoft Office

147
00:05:11,280 --> 00:05:12,419
document

148
00:05:12,419 --> 00:05:14,520
so from here what you can do is that you

149
00:05:14,520 --> 00:05:16,740
can just simply save the output

150
00:05:16,740 --> 00:05:19,139
um so on give it a nicer name

151
00:05:19,139 --> 00:05:21,120
and then um obviously you'll be able to

152
00:05:21,120 --> 00:05:23,520
download it and analyze it later on

153
00:05:23,520 --> 00:05:27,060
so that's how you go about this step but

154
00:05:27,060 --> 00:05:28,979
going back to

155
00:05:28,979 --> 00:05:31,740
our Powershell which is what we want we

156
00:05:31,740 --> 00:05:35,900
found our suspicious binary in this kc1

157
00:05:35,900 --> 00:05:37,699
pid7036

158
00:05:37,699 --> 00:05:40,740
malware.txt file here I'm going to pop

159
00:05:40,740 --> 00:05:42,900
this one open as well and for the sake

160
00:05:42,900 --> 00:05:45,479
of clarity I'm just going to wrap it so

161
00:05:45,479 --> 00:05:47,940
you can see what's going on here

162
00:05:47,940 --> 00:05:49,560
and so

163
00:05:49,560 --> 00:05:51,240
um initially we can see this from base64

164
00:05:51,240 --> 00:05:52,560
string so this has obviously been

165
00:05:52,560 --> 00:05:55,080
encoded with base64 but we can also see

166
00:05:55,080 --> 00:05:56,759
this you know I O compression deflate

167
00:05:56,759 --> 00:05:58,740
string here which tells me that this has

168
00:05:58,740 --> 00:06:01,259
also been compressed and so we can

169
00:06:01,259 --> 00:06:03,660
um convert this all in cyber Chef if we

170
00:06:03,660 --> 00:06:06,740
want which is what I'm going to do

171
00:06:07,380 --> 00:06:09,979
real quick

172
00:06:11,340 --> 00:06:14,220
and popping that open real quick

173
00:06:14,220 --> 00:06:17,880
we're just going to put that there

174
00:06:17,880 --> 00:06:21,500
that shouldn't

175
00:06:21,539 --> 00:06:23,940
happen interesting

176
00:06:23,940 --> 00:06:25,620
of course weird things happen when I

177
00:06:25,620 --> 00:06:27,000
record so we're just going to go back

178
00:06:27,000 --> 00:06:28,800
over here then for now I guess

179
00:06:28,800 --> 00:06:30,840
wow

180
00:06:30,840 --> 00:06:33,419
oh must have copied that beard

181
00:06:33,419 --> 00:06:37,520
ready let's try that one more time

182
00:06:46,560 --> 00:06:48,000
all right let's just try and grab all

183
00:06:48,000 --> 00:06:49,800
this done because obviously something is

184
00:06:49,800 --> 00:06:51,539
going on weird here

185
00:06:51,539 --> 00:06:54,000
there we go copy

186
00:06:54,000 --> 00:06:56,880
like this all right here we are back in

187
00:06:56,880 --> 00:06:57,780
business

188
00:06:57,780 --> 00:07:00,479
alrighty so we know this is base64 and

189
00:07:00,479 --> 00:07:01,919
we know additionally that this has been

190
00:07:01,919 --> 00:07:04,380
compressed so cyber Chef has this nice

191
00:07:04,380 --> 00:07:07,020
raw inflate operation here that we can

192
00:07:07,020 --> 00:07:08,639
pop on there

193
00:07:08,639 --> 00:07:10,919
and then boom we've got our little

194
00:07:10,919 --> 00:07:13,500
binary situation going on here and so

195
00:07:13,500 --> 00:07:15,840
this is a tell um I'll explain how so

196
00:07:15,840 --> 00:07:17,039
later

197
00:07:17,039 --> 00:07:19,020
but if we want to double check and make

198
00:07:19,020 --> 00:07:20,340
sure that we're on the right path here

199
00:07:20,340 --> 00:07:22,380
detect file type will tell us that this

200
00:07:22,380 --> 00:07:24,720
is a Windows portable executable

201
00:07:24,720 --> 00:07:26,400
so I'm going to do is I'm going to take

202
00:07:26,400 --> 00:07:28,380
that off real quick and what you can do

203
00:07:28,380 --> 00:07:30,360
you can save that to file I'm just going

204
00:07:30,360 --> 00:07:32,880
to call this PID what was this called

205
00:07:32,880 --> 00:07:35,360
seven zero

206
00:07:35,360 --> 00:07:39,240
36.exe for clarity

207
00:07:39,240 --> 00:07:40,560
hit okay

208
00:07:40,560 --> 00:07:42,479
not going to open it just gonna save it

209
00:07:42,479 --> 00:07:44,580
and there we go

210
00:07:44,580 --> 00:07:46,500
we've got that now

211
00:07:46,500 --> 00:07:47,759
so

212
00:07:47,759 --> 00:07:50,220
uh just to show you guys where I'm at of

213
00:07:50,220 --> 00:07:52,500
course I'm going to use the file system

214
00:07:52,500 --> 00:07:54,599
here

215
00:07:54,599 --> 00:07:57,599
just for better visibility I'm going to

216
00:07:57,599 --> 00:07:59,520
pop this into demo for now

217
00:07:59,520 --> 00:08:02,099
and so we've got our guy over here and

218
00:08:02,099 --> 00:08:03,900
so what we're going to want to do now is

219
00:08:03,900 --> 00:08:05,699
we're going to try and see if this is

220
00:08:05,699 --> 00:08:07,259
known if this is something that has been

221
00:08:07,259 --> 00:08:09,539
encountered before uh so I'm just going

222
00:08:09,539 --> 00:08:15,479
to quickly grab the md5 hash of this guy

223
00:08:15,479 --> 00:08:19,280
and pop it into virus total

224
00:08:19,319 --> 00:08:22,259
so over in virus total now just going to

225
00:08:22,259 --> 00:08:25,199
pop our hash in and as kind of expected

226
00:08:25,199 --> 00:08:26,940
we've got nothing here

227
00:08:26,940 --> 00:08:29,699
so uh don't worry too much because we

228
00:08:29,699 --> 00:08:31,440
have other methods to analyze this as

229
00:08:31,440 --> 00:08:32,899
well

230
00:08:32,899 --> 00:08:35,760
so very quickly I'm just going to go

231
00:08:35,760 --> 00:08:37,200
over and explain because now that we

232
00:08:37,200 --> 00:08:38,458
know that this is a Windows portable

233
00:08:38,458 --> 00:08:40,320
executable we should probably understand

234
00:08:40,320 --> 00:08:43,860
what we're looking at first

235
00:08:43,860 --> 00:08:46,019
all right so before we start doing our

236
00:08:46,019 --> 00:08:48,420
little digging into it let's try and go

237
00:08:48,420 --> 00:08:50,580
over what portable executables are and

238
00:08:50,580 --> 00:08:53,940
as high level as we can so uh what are

239
00:08:53,940 --> 00:08:56,580
they so they're Windows executables

240
00:08:56,580 --> 00:08:59,880
um they're commonly seen as dot exe.dll

241
00:08:59,880 --> 00:09:01,560
extensions

242
00:09:01,560 --> 00:09:03,600
um less commonly you can see them as SRV

243
00:09:03,600 --> 00:09:05,640
SCP and so on

244
00:09:05,640 --> 00:09:07,680
but like I mentioned these are windows

245
00:09:07,680 --> 00:09:08,640
only

246
00:09:08,640 --> 00:09:10,740
um their Linux equivalent would be uh

247
00:09:10,740 --> 00:09:13,560
elf executable link files and they're

248
00:09:13,560 --> 00:09:15,300
both based on the common object file

249
00:09:15,300 --> 00:09:18,439
format or coff

250
00:09:19,040 --> 00:09:21,720
so looking at what it looks like all

251
00:09:21,720 --> 00:09:23,580
stacked together

252
00:09:23,580 --> 00:09:25,380
um starting at the top of the Dos header

253
00:09:25,380 --> 00:09:26,760
here

254
00:09:26,760 --> 00:09:29,100
um every portable executable file starts

255
00:09:29,100 --> 00:09:31,680
with it which is about 64 bytes long but

256
00:09:31,680 --> 00:09:33,959
that is what makes it an MS-DOS

257
00:09:33,959 --> 00:09:36,540
executable and then that dosed up right

258
00:09:36,540 --> 00:09:39,120
underneath it is commonly identified by

259
00:09:39,120 --> 00:09:40,920
that error message this program cannot

260
00:09:40,920 --> 00:09:43,019
be run in DOS mode so you may have seen

261
00:09:43,019 --> 00:09:44,640
that when I pointed out in cyber Chef

262
00:09:44,640 --> 00:09:47,279
that's usually kind of a tell that this

263
00:09:47,279 --> 00:09:49,680
may be unexecutable obviously you

264
00:09:49,680 --> 00:09:50,940
shouldn't use that as the only tell

265
00:09:50,940 --> 00:09:52,560
because you know maybe someone might

266
00:09:52,560 --> 00:09:54,000
throw that in as a way to try and

267
00:09:54,000 --> 00:09:56,459
obfuscate things or try to trick you

268
00:09:56,459 --> 00:09:58,260
um but generally speaking

269
00:09:58,260 --> 00:10:00,959
you know you get that idea

270
00:10:00,959 --> 00:10:03,000
um so what that stuff does is that's

271
00:10:03,000 --> 00:10:04,200
just here to make sure that the program

272
00:10:04,200 --> 00:10:06,300
is running in a compatible mode uh so if

273
00:10:06,300 --> 00:10:07,860
you try and run it in DOS mode obviously

274
00:10:07,860 --> 00:10:10,920
it'll print out that error moving on to

275
00:10:10,920 --> 00:10:13,260
the NT header sarin blue uh there's

276
00:10:13,260 --> 00:10:15,480
three main ones uh there's the PE

277
00:10:15,480 --> 00:10:17,399
signature which says that it's a

278
00:10:17,399 --> 00:10:19,320
portable executable file

279
00:10:19,320 --> 00:10:21,360
so when we have those functions to try

280
00:10:21,360 --> 00:10:23,459
and check what kind of file it is that

281
00:10:23,459 --> 00:10:25,260
PE signature will be the thing that

282
00:10:25,260 --> 00:10:27,300
they're looking for then there's the

283
00:10:27,300 --> 00:10:29,220
file header which contains some info

284
00:10:29,220 --> 00:10:31,200
about the file and then the optional

285
00:10:31,200 --> 00:10:33,240
header which isn't quite optional it's

286
00:10:33,240 --> 00:10:35,700
optional for things like optic files

287
00:10:35,700 --> 00:10:37,019
um but for what we're looking at right

288
00:10:37,019 --> 00:10:40,620
now it's um pretty much necessary and

289
00:10:40,620 --> 00:10:42,660
provides important information uh to the

290
00:10:42,660 --> 00:10:44,880
operating system loader

291
00:10:44,880 --> 00:10:46,680
then going on down to the green the

292
00:10:46,680 --> 00:10:49,200
section table which contains the image

293
00:10:49,200 --> 00:10:51,300
section headers so for each section

294
00:10:51,300 --> 00:10:54,120
within um the lower content here down

295
00:10:54,120 --> 00:10:55,320
there

296
00:10:55,320 --> 00:10:56,880
um for each section in the PE file

297
00:10:56,880 --> 00:10:58,620
there's a section header and it's stored

298
00:10:58,620 --> 00:11:00,839
in that section table and then finally

299
00:11:00,839 --> 00:11:02,700
those sections down there you know one

300
00:11:02,700 --> 00:11:04,800
through n are the actual contents of the

301
00:11:04,800 --> 00:11:07,980
file and the amount can be variable

302
00:11:07,980 --> 00:11:10,440
so we're going to look at the uh General

303
00:11:10,440 --> 00:11:12,500
big ones

304
00:11:12,500 --> 00:11:15,120
so uh there is eight right here

305
00:11:15,120 --> 00:11:18,720
obviously there is definitely some more

306
00:11:18,720 --> 00:11:20,040
um but looking at the big ones we have

307
00:11:20,040 --> 00:11:21,540
the dot text which contains the

308
00:11:21,540 --> 00:11:23,040
executable code

309
00:11:23,040 --> 00:11:24,839
um skipping over to dot data which

310
00:11:24,839 --> 00:11:27,480
stores the global program data access

311
00:11:27,480 --> 00:11:30,180
throughout the program and then our data

312
00:11:30,180 --> 00:11:32,040
can kind of be a catch-all so if we see

313
00:11:32,040 --> 00:11:34,800
idat and edata which I respectively

314
00:11:34,800 --> 00:11:36,180
store the import function information

315
00:11:36,180 --> 00:11:37,980
and the export function information

316
00:11:37,980 --> 00:11:41,279
those can be stored in our data but what

317
00:11:41,279 --> 00:11:43,440
our data is it's the read-only data that

318
00:11:43,440 --> 00:11:44,820
is globally accessible within the

319
00:11:44,820 --> 00:11:45,959
program

320
00:11:45,959 --> 00:11:49,140
uh going over to P data that's present

321
00:11:49,140 --> 00:11:51,720
in the 64-bit executables and stores

322
00:11:51,720 --> 00:11:54,899
exception handling info our source

323
00:11:54,899 --> 00:11:56,220
stores resources needed by the

324
00:11:56,220 --> 00:11:58,139
executable and relock contains

325
00:11:58,139 --> 00:11:59,700
information for the relocation of

326
00:11:59,700 --> 00:12:01,440
Library files that the executable may be

327
00:12:01,440 --> 00:12:03,000
calling

328
00:12:03,000 --> 00:12:05,459
so now that we've kind of go gone over

329
00:12:05,459 --> 00:12:08,279
that little bit of a um walkthrough

330
00:12:08,279 --> 00:12:10,019
um we're going to start putting that to

331
00:12:10,019 --> 00:12:12,360
work in when we're using some tools

332
00:12:12,360 --> 00:12:15,120
available in rednex to dig deep and see

333
00:12:15,120 --> 00:12:17,100
what we have going on here

334
00:12:17,100 --> 00:12:19,560
so there's a few ways uh with portable

335
00:12:19,560 --> 00:12:21,540
executables that you can kind of get a

336
00:12:21,540 --> 00:12:23,459
glimpse as to what they may be doing and

337
00:12:23,459 --> 00:12:25,139
kind of like Glimpse as to what our next

338
00:12:25,139 --> 00:12:26,880
steps might be when we're starting to

339
00:12:26,880 --> 00:12:29,540
analyze them

340
00:12:29,820 --> 00:12:31,920
alrighty so now we're going to be able

341
00:12:31,920 --> 00:12:34,279
to start taking a look at this uh

342
00:12:34,279 --> 00:12:37,800
pid7036 executable that we have so we've

343
00:12:37,800 --> 00:12:39,660
already checked the hash and what I want

344
00:12:39,660 --> 00:12:41,459
to do now is determine whether it's

345
00:12:41,459 --> 00:12:43,260
packed or not

346
00:12:43,260 --> 00:12:46,260
uh because if this uh executable is

347
00:12:46,260 --> 00:12:48,240
packed that's going to make our lives a

348
00:12:48,240 --> 00:12:49,680
lot more harder

349
00:12:49,680 --> 00:12:50,820
um so if you're wondering what the

350
00:12:50,820 --> 00:12:51,660
difference

351
00:12:51,660 --> 00:12:54,420
um with pact is is that pact is

352
00:12:54,420 --> 00:12:56,519
compressed um as opposed to you know

353
00:12:56,519 --> 00:12:59,279
obfuscated where you know it's just

354
00:12:59,279 --> 00:13:01,200
um in some manner difficult to read it's

355
00:13:01,200 --> 00:13:03,300
still convertible it's still you know we

356
00:13:03,300 --> 00:13:05,160
can do some operations to make it a lot

357
00:13:05,160 --> 00:13:06,240
more easier on ourselves to read

358
00:13:06,240 --> 00:13:08,639
obfuscated you know code or malware or

359
00:13:08,639 --> 00:13:10,500
whatnot but in the case if it's packed

360
00:13:10,500 --> 00:13:12,360
our jobs get a lot more harder and in

361
00:13:12,360 --> 00:13:14,880
some cases maybe even impossible

362
00:13:14,880 --> 00:13:17,279
uh so we have this great tool called PE

363
00:13:17,279 --> 00:13:20,880
pack that we can use to determine uh if

364
00:13:20,880 --> 00:13:22,440
it's packed or not and occasionally what

365
00:13:22,440 --> 00:13:23,880
it's packed with

366
00:13:23,880 --> 00:13:26,700
uh so in this case uh this is kind of it

367
00:13:26,700 --> 00:13:28,260
says it's practice is technically really

368
00:13:28,260 --> 00:13:30,779
unpacked um but it's Microsoft Visual c

369
00:13:30,779 --> 00:13:33,240
sharpenbasic.net

370
00:13:33,240 --> 00:13:36,000
um so if you know what the next step

371
00:13:36,000 --> 00:13:38,639
should be technically speaking uh please

372
00:13:38,639 --> 00:13:40,440
silence your thoughts please ignore uh

373
00:13:40,440 --> 00:13:42,480
what I'm going to be doing is uh kind of

374
00:13:42,480 --> 00:13:46,199
ignoring some really uh maybe to some

375
00:13:46,199 --> 00:13:49,139
obvious tells of what this is uh what

376
00:13:49,139 --> 00:13:50,519
the next step should be

377
00:13:50,519 --> 00:13:52,440
um in favor of just kind of going over

378
00:13:52,440 --> 00:13:54,779
you know the general approach of you

379
00:13:54,779 --> 00:13:56,399
know analyzing this statically from a

380
00:13:56,399 --> 00:13:58,500
redneck perspective

381
00:13:58,500 --> 00:14:00,360
so we've got this you know Microsoft

382
00:14:00,360 --> 00:14:01,920
Visual C sharp basic.net so we're

383
00:14:01,920 --> 00:14:04,680
looking at something you know.net based

384
00:14:04,680 --> 00:14:07,199
um going on I want to try looking at the

385
00:14:07,199 --> 00:14:08,760
strings of this and the strings can tell

386
00:14:08,760 --> 00:14:11,339
us a lot and there's two main string

387
00:14:11,339 --> 00:14:13,560
functions I like to use

388
00:14:13,560 --> 00:14:15,060
um just because one doesn't get

389
00:14:15,060 --> 00:14:16,560
everything and the other doesn't get

390
00:14:16,560 --> 00:14:18,060
everything either

391
00:14:18,060 --> 00:14:20,220
um so we're going to start with strings

392
00:14:20,220 --> 00:14:23,160
and go from there and so from the top

393
00:14:23,160 --> 00:14:25,199
down and usually you should probably

394
00:14:25,199 --> 00:14:26,880
pipe this into something but I'm just

395
00:14:26,880 --> 00:14:27,959
going to scroll down because this is

396
00:14:27,959 --> 00:14:29,339
relatively short

397
00:14:29,339 --> 00:14:31,079
but we can see that initially you know

398
00:14:31,079 --> 00:14:33,360
dust up this program can't be run in DOS

399
00:14:33,360 --> 00:14:36,000
mode uh we can see this dot text.relock

400
00:14:36,000 --> 00:14:38,820
these look like sections uh going down a

401
00:14:38,820 --> 00:14:40,320
little bit more we see this execute

402
00:14:40,320 --> 00:14:42,899
stator that's interesting but uh what

403
00:14:42,899 --> 00:14:44,760
strings can do is it can show us the

404
00:14:44,760 --> 00:14:47,820
functions that are called by the um

405
00:14:47,820 --> 00:14:50,459
program and so we can see

406
00:14:50,459 --> 00:14:52,620
um some functions some things that may

407
00:14:52,620 --> 00:14:54,600
suggest okay

408
00:14:54,600 --> 00:14:56,279
um that's a little funky that looks

409
00:14:56,279 --> 00:14:57,300
unique

410
00:14:57,300 --> 00:14:59,399
um in this case sometimes what malicious

411
00:14:59,399 --> 00:15:00,480
programs will do is that they'll

412
00:15:00,480 --> 00:15:02,399
randomly generate names

413
00:15:02,399 --> 00:15:04,260
um as a kind of form of obfuscation if

414
00:15:04,260 --> 00:15:06,000
you're trying to create alerts based off

415
00:15:06,000 --> 00:15:08,220
of names themselves this will make it

416
00:15:08,220 --> 00:15:10,019
harder Us in this instance it's called

417
00:15:10,019 --> 00:15:12,180
this but if you were to do it elsewhere

418
00:15:12,180 --> 00:15:14,040
or if you were to find it elsewhere uh

419
00:15:14,040 --> 00:15:15,300
hint

420
00:15:15,300 --> 00:15:17,160
um you'll find it under a different name

421
00:15:17,160 --> 00:15:18,899
but we can see that there looks like

422
00:15:18,899 --> 00:15:20,519
there's some encoding going on you know

423
00:15:20,519 --> 00:15:22,560
some base64 string conversion looks like

424
00:15:22,560 --> 00:15:24,120
there's some downloading and uploading

425
00:15:24,120 --> 00:15:25,680
of strings so that may be a suggestion

426
00:15:25,680 --> 00:15:28,260
of network connectivity with this

427
00:15:28,260 --> 00:15:28,860
um

428
00:15:28,860 --> 00:15:30,899
going further down we have a little bit

429
00:15:30,899 --> 00:15:33,000
more of you know string

430
00:15:33,000 --> 00:15:35,459
um manipulation I'm ignoring something

431
00:15:35,459 --> 00:15:38,100
big don't look at that although we've

432
00:15:38,100 --> 00:15:39,779
got some Network credential which

433
00:15:39,779 --> 00:15:41,339
suggests that there may be some you know

434
00:15:41,339 --> 00:15:42,180
Network

435
00:15:42,180 --> 00:15:44,699
um calls going on again uh we've got

436
00:15:44,699 --> 00:15:46,800
some hash algorithms going on some

437
00:15:46,800 --> 00:15:48,839
cryptographic algorithms going on here

438
00:15:48,839 --> 00:15:52,320
uh interesting to note that again RSA

439
00:15:52,320 --> 00:15:54,300
crypto service provider

440
00:15:54,300 --> 00:15:55,019
um

441
00:15:55,019 --> 00:15:57,360
going further down ignoring something

442
00:15:57,360 --> 00:15:59,519
else uh we've got you know create a

443
00:15:59,519 --> 00:16:01,320
crypto create encrypter okay definitely

444
00:16:01,320 --> 00:16:03,420
having some encryption going on but then

445
00:16:03,420 --> 00:16:06,660
set cookies and if we go down a little

446
00:16:06,660 --> 00:16:07,800
bit more

447
00:16:07,800 --> 00:16:09,480
um we're going to start seeing some

448
00:16:09,480 --> 00:16:11,279
things that may suggest you know issue2

449
00:16:11,279 --> 00:16:13,380
web requests get rep requests that there

450
00:16:13,380 --> 00:16:15,660
definitely is some network activity

451
00:16:15,660 --> 00:16:17,399
going on here

452
00:16:17,399 --> 00:16:18,899
so and once we can we see that weird

453
00:16:18,899 --> 00:16:20,820
string there uh we see that you know

454
00:16:20,820 --> 00:16:23,040
system security cryptography so the big

455
00:16:23,040 --> 00:16:25,320
takeaways I'd say from this you know

456
00:16:25,320 --> 00:16:27,300
whole list is that there's definitely

457
00:16:27,300 --> 00:16:29,160
some sort of network connection going on

458
00:16:29,160 --> 00:16:30,420
here and then there's definitely some

459
00:16:30,420 --> 00:16:31,740
cryptographic

460
00:16:31,740 --> 00:16:34,199
um aspects to this program

461
00:16:34,199 --> 00:16:36,420
so what I'm going to do next is if you

462
00:16:36,420 --> 00:16:39,000
can recall we saw some like HTML code

463
00:16:39,000 --> 00:16:41,880
there but that's definitely missing uh

464
00:16:41,880 --> 00:16:44,100
from this output so I'm going to use

465
00:16:44,100 --> 00:16:46,740
another tool a p s t r

466
00:16:46,740 --> 00:16:48,720
uh which will

467
00:16:48,720 --> 00:16:50,399
show us the rest of what we're missing

468
00:16:50,399 --> 00:16:52,380
so like um

469
00:16:52,380 --> 00:16:55,139
strings of PE Str will show you know

470
00:16:55,139 --> 00:16:57,540
this whole batch of functions that this

471
00:16:57,540 --> 00:16:59,759
is calling but in addition to that we're

472
00:16:59,759 --> 00:17:02,820
seeing what we're missing um from that

473
00:17:02,820 --> 00:17:04,980
we saw in cyber Chef which is this you

474
00:17:04,980 --> 00:17:07,380
know malware love XYZ thing

475
00:17:07,380 --> 00:17:08,880
um these weird little

476
00:17:08,880 --> 00:17:09,839
um

477
00:17:09,839 --> 00:17:12,480
strings over here this HTML down here

478
00:17:12,480 --> 00:17:14,459
and then this you know strange

479
00:17:14,459 --> 00:17:17,039
formatting that appears to be going on

480
00:17:17,039 --> 00:17:20,220
over here and so we can really get that

481
00:17:20,220 --> 00:17:22,859
full view by using these two tools and

482
00:17:22,859 --> 00:17:24,240
that's why I always encourage you know

483
00:17:24,240 --> 00:17:26,039
even if it seems redundant or even if

484
00:17:26,039 --> 00:17:28,860
there appears to be overlap do you know

485
00:17:28,860 --> 00:17:30,840
throw everything at it just in case you

486
00:17:30,840 --> 00:17:32,340
may miss something because if we didn't

487
00:17:32,340 --> 00:17:34,500
see this before if we had just gotten

488
00:17:34,500 --> 00:17:36,539
the sample as is we might not have known

489
00:17:36,539 --> 00:17:37,860
that this was there and we might not

490
00:17:37,860 --> 00:17:39,299
have been you know potentially able to

491
00:17:39,299 --> 00:17:42,600
grab this ioc pretty easily

492
00:17:42,600 --> 00:17:45,559
so moving on

493
00:17:45,600 --> 00:17:47,760
um as a hint too in remnix if you forget

494
00:17:47,760 --> 00:17:50,280
these tools you can just type P double

495
00:17:50,280 --> 00:17:52,919
tab and you'll find pretty much all of

496
00:17:52,919 --> 00:17:56,000
the portable executable uh related

497
00:17:56,000 --> 00:17:59,100
functionality here that you can use

498
00:17:59,100 --> 00:18:01,740
um so for us I think I'm going to next

499
00:18:01,740 --> 00:18:03,720
go to

500
00:18:03,720 --> 00:18:07,760
oh let's go for PE duck real quick

501
00:18:10,320 --> 00:18:12,660
and probably input the file name which

502
00:18:12,660 --> 00:18:14,340
might be helpful

503
00:18:14,340 --> 00:18:16,980
all right there we go so PE dump dumps

504
00:18:16,980 --> 00:18:19,559
uh well absolutely everything uh in here

505
00:18:19,559 --> 00:18:22,200
it's a pretty uh verbose dump of what's

506
00:18:22,200 --> 00:18:25,440
going on uh I believe PE scan or

507
00:18:25,440 --> 00:18:27,360
something along those lines uh does an

508
00:18:27,360 --> 00:18:30,000
even more uh

509
00:18:30,000 --> 00:18:32,760
basically vomit of all the information

510
00:18:32,760 --> 00:18:35,100
that you can possibly get here but we

511
00:18:35,100 --> 00:18:37,260
can see you know the header here the Dos

512
00:18:37,260 --> 00:18:40,020
stub you know that you know internet's

513
00:18:40,020 --> 00:18:42,600
message there uh the PE header which we

514
00:18:42,600 --> 00:18:44,160
can see that

515
00:18:44,160 --> 00:18:45,960
you know we have that file header that

516
00:18:45,960 --> 00:18:48,360
optional header there

517
00:18:48,360 --> 00:18:49,380
um more information we're going to skip

518
00:18:49,380 --> 00:18:51,000
some interesting things to note that

519
00:18:51,000 --> 00:18:53,120
time date stamp there that says this was

520
00:18:53,120 --> 00:18:56,220
created or at least compiled on February

521
00:18:56,220 --> 00:18:57,840
12th of this year

522
00:18:57,840 --> 00:18:59,340
um not to say that this will always be

523
00:18:59,340 --> 00:19:00,900
accurate sometimes you know there is

524
00:19:00,900 --> 00:19:02,940
definitely ways to manipulate this but

525
00:19:02,940 --> 00:19:04,380
you know if it seems pretty plausible

526
00:19:04,380 --> 00:19:06,539
that looks pretty neat of course take it

527
00:19:06,539 --> 00:19:08,520
with a grain of salt as you do all

528
00:19:08,520 --> 00:19:09,720
things

529
00:19:09,720 --> 00:19:12,720
uh so moving down here we can see that

530
00:19:12,720 --> 00:19:15,000
there are some things imported here

531
00:19:15,000 --> 00:19:17,280
um and we only have two sections like we

532
00:19:17,280 --> 00:19:19,740
suspected so just text and relock so we

533
00:19:19,740 --> 00:19:21,840
just have our code and then the

534
00:19:21,840 --> 00:19:24,539
libraries uh potentially used we also

535
00:19:24,539 --> 00:19:26,580
have you know things imported as well as

536
00:19:26,580 --> 00:19:29,220
the Packer compiler that was used down

537
00:19:29,220 --> 00:19:31,080
here so again like I mentioned with

538
00:19:31,080 --> 00:19:32,039
these tools there's a little bit of

539
00:19:32,039 --> 00:19:33,660
overlapping information especially with

540
00:19:33,660 --> 00:19:35,039
PP pack

541
00:19:35,039 --> 00:19:36,299
um but you know this may not catch

542
00:19:36,299 --> 00:19:37,860
something that PE pack catches or this

543
00:19:37,860 --> 00:19:39,419
may catch something that PE pack may not

544
00:19:39,419 --> 00:19:42,419
catch so some things like that

545
00:19:42,419 --> 00:19:44,340
as a note too I'm going through all of

546
00:19:44,340 --> 00:19:45,360
these pretty quickly and of course

547
00:19:45,360 --> 00:19:47,400
clearing my terminal between them but

548
00:19:47,400 --> 00:19:49,140
you may want to save these outputs later

549
00:19:49,140 --> 00:19:51,660
on for later analysis if you want

550
00:19:51,660 --> 00:19:53,340
um but in the meantime I'm going to go

551
00:19:53,340 --> 00:19:55,320
over to PE scan

552
00:19:55,320 --> 00:19:58,559
and kind of get a determination of what

553
00:19:58,559 --> 00:20:00,000
we're looking at if this is within

554
00:20:00,000 --> 00:20:01,679
normal range so we can see yet again

555
00:20:01,679 --> 00:20:04,320
overlap of information we have only two

556
00:20:04,320 --> 00:20:07,140
sections noted that the relock section

557
00:20:07,140 --> 00:20:09,000
is a little bit small

558
00:20:09,000 --> 00:20:10,799
but looking at this though we kind of

559
00:20:10,799 --> 00:20:12,720
have a pretty small little program going

560
00:20:12,720 --> 00:20:15,360
on here and one thing to note is the

561
00:20:15,360 --> 00:20:17,580
file entropy so file entropy is the

562
00:20:17,580 --> 00:20:19,620
measure of Randomness within on the file

563
00:20:19,620 --> 00:20:21,600
and generally speaking if you want the

564
00:20:21,600 --> 00:20:23,159
rule of thumb of it

565
00:20:23,159 --> 00:20:26,159
um it goes from a range of 0 to 8 and

566
00:20:26,159 --> 00:20:27,720
typically speaking something around in

567
00:20:27,720 --> 00:20:30,000
the four or five range to seven is

568
00:20:30,000 --> 00:20:32,220
considered usually non-malicious and

569
00:20:32,220 --> 00:20:34,500
things in the seven to eight range tend

570
00:20:34,500 --> 00:20:36,720
to be more malicious than not that's not

571
00:20:36,720 --> 00:20:38,039
you know perfect

572
00:20:38,039 --> 00:20:41,039
um way to categorize whether a file is

573
00:20:41,039 --> 00:20:42,840
malicious or not but it's something to

574
00:20:42,840 --> 00:20:44,340
take in account um especially when

575
00:20:44,340 --> 00:20:46,140
you're eyeing the entropy in this case

576
00:20:46,140 --> 00:20:48,360
we're in the non-malicious range but you

577
00:20:48,360 --> 00:20:49,919
know obviously we're going to take that

578
00:20:49,919 --> 00:20:52,200
with a hefty grain of salt it just might

579
00:20:52,200 --> 00:20:53,159
not be

580
00:20:53,159 --> 00:20:56,780
visible in that manner

581
00:21:00,480 --> 00:21:02,580
all right and last but not least we're

582
00:21:02,580 --> 00:21:04,740
going to use PE check

583
00:21:04,740 --> 00:21:07,440
real quick and this is the super verbose

584
00:21:07,440 --> 00:21:10,440
um deep dive into all those section

585
00:21:10,440 --> 00:21:13,260
information and Header information there

586
00:21:13,260 --> 00:21:15,419
so once again overlap we can see the

587
00:21:15,419 --> 00:21:17,520
entropy we can see all these hashes here

588
00:21:17,520 --> 00:21:19,140
and we can see the entropy of each

589
00:21:19,140 --> 00:21:23,159
section as well that might be useful too

590
00:21:23,159 --> 00:21:25,380
so we get you know dos Header

591
00:21:25,380 --> 00:21:28,020
information the ENT headers file Header

592
00:21:28,020 --> 00:21:29,820
information same

593
00:21:29,820 --> 00:21:32,640
um daytime stamp that optional Header

594
00:21:32,640 --> 00:21:34,799
information moving down we can see all

595
00:21:34,799 --> 00:21:36,600
the PE sections

596
00:21:36,600 --> 00:21:39,659
as well as the hash for the section as

597
00:21:39,659 --> 00:21:41,820
well for the dot text section and the

598
00:21:41,820 --> 00:21:45,299
relock section as well we can see some

599
00:21:45,299 --> 00:21:47,280
you know directories some entry import

600
00:21:47,280 --> 00:21:52,260
export and so on as well as of course

601
00:21:52,260 --> 00:21:53,760
some information that there is no

602
00:21:53,760 --> 00:21:55,440
signature for this or no known signature

603
00:21:55,440 --> 00:21:57,120
for this or you know the signature

604
00:21:57,120 --> 00:21:58,500
database is missing oh I think that

605
00:21:58,500 --> 00:21:59,820
might actually be because this is host

606
00:21:59,820 --> 00:22:01,020
only

607
00:22:01,020 --> 00:22:01,980
um

608
00:22:01,980 --> 00:22:03,659
as well as some entry points so this may

609
00:22:03,659 --> 00:22:05,940
be useful in more advanced static or

610
00:22:05,940 --> 00:22:07,380
dynamic analysis to know the entry

611
00:22:07,380 --> 00:22:09,600
points of this when you're doing such an

612
00:22:09,600 --> 00:22:12,419
analysis but you know in this case we've

613
00:22:12,419 --> 00:22:15,000
kind of gathered a decent amount of what

614
00:22:15,000 --> 00:22:17,159
we can gather from purely these PE

615
00:22:17,159 --> 00:22:19,140
related tools but there's another

616
00:22:19,140 --> 00:22:22,200
capability that I'd like to show here uh

617
00:22:22,200 --> 00:22:23,940
this won't work right now with this

618
00:22:23,940 --> 00:22:26,100
version of um

619
00:22:26,100 --> 00:22:28,860
Kappa but uh Kappa is created by

620
00:22:28,860 --> 00:22:31,080
mandiant but it's detects capabilities

621
00:22:31,080 --> 00:22:33,240
and executable files uh so you can run

622
00:22:33,240 --> 00:22:35,580
it against the PE and elf

623
00:22:35,580 --> 00:22:37,020
um I think in version four which should

624
00:22:37,020 --> 00:22:38,580
be coming out eventually you can run it

625
00:22:38,580 --> 00:22:40,679
against.net modules

626
00:22:40,679 --> 00:22:42,840
um and so this is pretty useful if you

627
00:22:42,840 --> 00:22:44,539
want to kind of get like a general glass

628
00:22:44,539 --> 00:22:46,740
grasp of what's going on it also

629
00:22:46,740 --> 00:22:48,000
Compares it to the miter attack

630
00:22:48,000 --> 00:22:50,280
framework which can be helpful in trying

631
00:22:50,280 --> 00:22:52,980
to get you know an overall uh suggestion

632
00:22:52,980 --> 00:22:55,320
as to what you may be looking at so

633
00:22:55,320 --> 00:22:56,640
we're going to

634
00:22:56,640 --> 00:22:58,679
cap of this

635
00:22:58,679 --> 00:23:01,020
and wait for that select real quick

636
00:23:01,020 --> 00:23:03,840
and as I mentioned well it doesn't quite

637
00:23:03,840 --> 00:23:05,820
work for net modules yet and this

638
00:23:05,820 --> 00:23:07,980
appears to be a.net module

639
00:23:07,980 --> 00:23:09,960
and so it gives us a little hint here as

640
00:23:09,960 --> 00:23:11,340
to what we want to eat this is going to

641
00:23:11,340 --> 00:23:13,440
expand us a little bit so it's legible

642
00:23:13,440 --> 00:23:14,760
um but it's suggesting we should use

643
00:23:14,760 --> 00:23:17,940
a.net decompiler like dnspy

644
00:23:17,940 --> 00:23:19,980
and so we're on a point now where I

645
00:23:19,980 --> 00:23:22,440
think we've done a decent amount of what

646
00:23:22,440 --> 00:23:25,020
we can do within Linux right now and I

647
00:23:25,020 --> 00:23:26,520
think we should probably start heading

648
00:23:26,520 --> 00:23:28,620
over to Windows to look at decompiling

649
00:23:28,620 --> 00:23:30,539
this thing and so one thing I want to

650
00:23:30,539 --> 00:23:32,520
cover first is the difference between a

651
00:23:32,520 --> 00:23:34,740
decompiler and a disassembler which I'm

652
00:23:34,740 --> 00:23:36,659
going to pop back over to slides to do

653
00:23:36,659 --> 00:23:38,820
right now

654
00:23:38,820 --> 00:23:40,860
all right so before we pop over into

655
00:23:40,860 --> 00:23:42,720
Windows I just quickly wanted to clarify

656
00:23:42,720 --> 00:23:44,520
some differences between disassemblers

657
00:23:44,520 --> 00:23:46,860
and decompilers and why we may use one

658
00:23:46,860 --> 00:23:48,480
or another

659
00:23:48,480 --> 00:23:50,400
um so disassemblers convert the low

660
00:23:50,400 --> 00:23:52,500
level code to assembly

661
00:23:52,500 --> 00:23:54,120
um it can be a little bit harder to read

662
00:23:54,120 --> 00:23:56,460
parse because it is assembly

663
00:23:56,460 --> 00:23:59,400
um so while it is kind of more accurate

664
00:23:59,400 --> 00:24:02,580
I'm putting quotes there but it's a

665
00:24:02,580 --> 00:24:04,320
pretty much as direct as you can

666
00:24:04,320 --> 00:24:07,140
translation from the binary to readable

667
00:24:07,140 --> 00:24:09,360
code but there are ways to trick

668
00:24:09,360 --> 00:24:11,779
disassemblers uh an attempt to kind of

669
00:24:11,779 --> 00:24:15,059
make the code obscure the code as much

670
00:24:15,059 --> 00:24:16,679
as possible so it's not immediately

671
00:24:16,679 --> 00:24:19,080
repeatable then there's decompilers

672
00:24:19,080 --> 00:24:21,360
which from that low-level code convert

673
00:24:21,360 --> 00:24:23,340
it to a higher level code uh usually

674
00:24:23,340 --> 00:24:25,440
something like C so it's easily

675
00:24:25,440 --> 00:24:27,120
digestible uh there's less to model

676
00:24:27,120 --> 00:24:28,919
through so if you were to compare the

677
00:24:28,919 --> 00:24:30,720
output of a disassembler to decompiler

678
00:24:30,720 --> 00:24:33,480
for example a one-liner you know maybe

679
00:24:33,480 --> 00:24:35,340
doing some addition and division between

680
00:24:35,340 --> 00:24:37,380
two numbers would be just you know one

681
00:24:37,380 --> 00:24:39,779
line and C but it may be 20 or 30 or

682
00:24:39,779 --> 00:24:43,320
however many lines to do an assembly

683
00:24:43,320 --> 00:24:46,799
so however decompilers kind of work on a

684
00:24:46,799 --> 00:24:49,200
best guess your mileage may vary basis

685
00:24:49,200 --> 00:24:51,659
so there's plenty of ways to trick the

686
00:24:51,659 --> 00:24:53,159
decompilers especially when it comes to

687
00:24:53,159 --> 00:24:55,140
malware and sometimes it may just get

688
00:24:55,140 --> 00:24:56,159
things wrong

689
00:24:56,159 --> 00:24:58,919
so as I'd like to say if you're ever in

690
00:24:58,919 --> 00:25:01,140
the choice to choose one or another

691
00:25:01,140 --> 00:25:03,600
um consider both so there's tools like

692
00:25:03,600 --> 00:25:06,360
yidra but I'd like to generally put that

693
00:25:06,360 --> 00:25:08,700
you may want to use both if you're

694
00:25:08,700 --> 00:25:10,080
looking to get the clearest possible

695
00:25:10,080 --> 00:25:11,159
answer

696
00:25:11,159 --> 00:25:12,960
now disassemblers are really good for

697
00:25:12,960 --> 00:25:15,179
that nitty-gritty low-level searching

698
00:25:15,179 --> 00:25:16,620
for you know how many certain routines

699
00:25:16,620 --> 00:25:18,840
may work where SD compilers may be

700
00:25:18,840 --> 00:25:20,279
better for you know that higher level

701
00:25:20,279 --> 00:25:22,200
just a general understanding of what's

702
00:25:22,200 --> 00:25:23,340
going on

703
00:25:23,340 --> 00:25:25,440
so I'd like to say you know for all

704
00:25:25,440 --> 00:25:27,299
malware tools with malware analysis

705
00:25:27,299 --> 00:25:28,380
tools

706
00:25:28,380 --> 00:25:30,960
to use as many as you can and to not try

707
00:25:30,960 --> 00:25:33,059
and stick with one too often because you

708
00:25:33,059 --> 00:25:35,100
may be missing some things and you know

709
00:25:35,100 --> 00:25:37,080
it's better to get the full view than to

710
00:25:37,080 --> 00:25:38,520
get a partial View

711
00:25:38,520 --> 00:25:40,799
so moving on now we're going to go over

712
00:25:40,799 --> 00:25:44,658
and check out Dion spy

713
00:25:45,299 --> 00:25:49,020
all right welcome to Windows so I've got

714
00:25:49,020 --> 00:25:52,080
my uh little sample here you may notice

715
00:25:52,080 --> 00:25:54,600
it's now called cleanup if you want to

716
00:25:54,600 --> 00:25:56,700
recall back in remnix if you've done

717
00:25:56,700 --> 00:25:58,020
some poking around at the samples

718
00:25:58,020 --> 00:25:59,279
already

719
00:25:59,279 --> 00:26:01,980
um in the from disc zipped file there is

720
00:26:01,980 --> 00:26:05,220
a collection of executables there one of

721
00:26:05,220 --> 00:26:07,020
them is named cleanup and if you do a

722
00:26:07,020 --> 00:26:08,700
comparison of them they're pretty much

723
00:26:08,700 --> 00:26:10,200
the same thing it's pretty much the same

724
00:26:10,200 --> 00:26:13,500
thing to our PID 7036

725
00:26:13,500 --> 00:26:15,059
um so we can say that that is another

726
00:26:15,059 --> 00:26:16,620
source to get it if you're not willing

727
00:26:16,620 --> 00:26:18,240
to take that step to you know do the

728
00:26:18,240 --> 00:26:19,860
whole Powershell de obfuscation just

729
00:26:19,860 --> 00:26:22,380
grab cleanup and you're all good so

730
00:26:22,380 --> 00:26:24,419
we've got cleanup working there and I'm

731
00:26:24,419 --> 00:26:26,279
just going to open up dance by real

732
00:26:26,279 --> 00:26:27,659
quick

733
00:26:27,659 --> 00:26:31,039
let that load for a second

734
00:26:31,460 --> 00:26:34,320
and there we go oh that's a weird

735
00:26:34,320 --> 00:26:36,240
formatting thing going on there all

736
00:26:36,240 --> 00:26:38,940
right so I'm going to pretend like I've

737
00:26:38,940 --> 00:26:41,580
never seen any of this before and

738
00:26:41,580 --> 00:26:43,740
quickly open up clean up

739
00:26:43,740 --> 00:26:45,120
right there

740
00:26:45,120 --> 00:26:46,980
so we've got all this set and it sets us

741
00:26:46,980 --> 00:26:49,799
right to this over here uh this really

742
00:26:49,799 --> 00:26:51,299
weird name

743
00:26:51,299 --> 00:26:53,100
um you may notice that this kind of

744
00:26:53,100 --> 00:26:55,500
randomly generates the name every time

745
00:26:55,500 --> 00:26:57,299
um I wouldn't be too worried about that

746
00:26:57,299 --> 00:26:59,700
but we're going to pop over to this

747
00:26:59,700 --> 00:27:01,200
grunt Stager here because this appears

748
00:27:01,200 --> 00:27:03,000
to be where the code is

749
00:27:03,000 --> 00:27:05,520
uh go down one more

750
00:27:05,520 --> 00:27:07,140
and then we can start seeing functions

751
00:27:07,140 --> 00:27:08,820
uh so I'm going to go into the main

752
00:27:08,820 --> 00:27:09,900
function just to see where we're

753
00:27:09,900 --> 00:27:11,700
starting off at and you can see it's

754
00:27:11,700 --> 00:27:13,679
creating a new Crut Stager so I'm going

755
00:27:13,679 --> 00:27:16,679
to go up to gret Stager over here and we

756
00:27:16,679 --> 00:27:18,059
can see it's you know getting the

757
00:27:18,059 --> 00:27:19,620
execute stage

758
00:27:19,620 --> 00:27:22,140
so let's pop this open and from the

759
00:27:22,140 --> 00:27:23,700
looks of it this looks like the main

760
00:27:23,700 --> 00:27:26,880
body of what we need to look at

761
00:27:26,880 --> 00:27:29,220
um I'm going to quickly go over to parsk

762
00:27:29,220 --> 00:27:30,419
because we haven't looked at that yet

763
00:27:30,419 --> 00:27:32,760
and from the initial inspection this

764
00:27:32,760 --> 00:27:34,620
appears to be some formatting related

765
00:27:34,620 --> 00:27:36,659
functions

766
00:27:36,659 --> 00:27:39,659
so back to execute Stager we're going to

767
00:27:39,659 --> 00:27:41,460
start looking for anything that looks uh

768
00:27:41,460 --> 00:27:43,460
interesting to us so obviously the

769
00:27:43,460 --> 00:27:46,799
malwarelove.xyz at 443

770
00:27:46,799 --> 00:27:49,860
um looks to be a good ioc to grab but

771
00:27:49,860 --> 00:27:52,020
something of notes that you may want to

772
00:27:52,020 --> 00:27:53,880
check out is this Covenant Dimension

773
00:27:53,880 --> 00:27:56,760
Covenant cert hash which tells us that

774
00:27:56,760 --> 00:27:59,220
we may be looking at a covenant Grunt

775
00:27:59,220 --> 00:28:01,500
and so I'm going to pop over to the

776
00:28:01,500 --> 00:28:02,760
slides real quick to kind of explain

777
00:28:02,760 --> 00:28:04,919
what Covenant is to give you that

778
00:28:04,919 --> 00:28:07,039
background

779
00:28:07,039 --> 00:28:09,240
alrighty so before we start poking out

780
00:28:09,240 --> 00:28:10,919
this code some more I just wanted to go

781
00:28:10,919 --> 00:28:12,779
over what confidence is so that we have

782
00:28:12,779 --> 00:28:15,179
the context of what's going on right now

783
00:28:15,179 --> 00:28:17,580
so Covenant is a.net command and control

784
00:28:17,580 --> 00:28:21,179
framework with asp.net core it's a

785
00:28:21,179 --> 00:28:22,799
cross-platform application which means

786
00:28:22,799 --> 00:28:25,020
that we can use it in Windows Linux and

787
00:28:25,020 --> 00:28:27,419
Mac OS without much difficulty it also

788
00:28:27,419 --> 00:28:29,760
includes a web interface and later on

789
00:28:29,760 --> 00:28:31,980
when we talk about grunts that HTML that

790
00:28:31,980 --> 00:28:33,299
we saw earlier is going to start making

791
00:28:33,299 --> 00:28:36,260
a little bit more sense

792
00:28:36,659 --> 00:28:38,520
um So within the context of what we've

793
00:28:38,520 --> 00:28:41,279
seen thus far we have a launcher which

794
00:28:41,279 --> 00:28:42,960
is a pillow that executes an initial

795
00:28:42,960 --> 00:28:45,000
Stager on the target host to establish a

796
00:28:45,000 --> 00:28:46,740
grunt connection

797
00:28:46,740 --> 00:28:49,320
so our Powershell script that we have is

798
00:28:49,320 --> 00:28:51,240
our launcher it contains that binary

799
00:28:51,240 --> 00:28:54,059
that initial Stager that we want and

800
00:28:54,059 --> 00:28:55,980
that's going to execute it onto the

801
00:28:55,980 --> 00:28:57,120
system

802
00:28:57,120 --> 00:28:59,940
s in which background connection

803
00:28:59,940 --> 00:29:02,100
um the thread actors or penetration

804
00:29:02,100 --> 00:29:03,840
testers or whoever's on the other end

805
00:29:03,840 --> 00:29:06,120
will have a listener set up in which the

806
00:29:06,120 --> 00:29:08,820
grunts will periodically meet a lot so

807
00:29:08,820 --> 00:29:12,000
what a grunt is is just a little fella

808
00:29:12,000 --> 00:29:14,159
that runs on the compromised host uh

809
00:29:14,159 --> 00:29:15,659
think of it as a minion essentially

810
00:29:15,659 --> 00:29:18,059
that's kind of you know Tap maybe tasks

811
00:29:18,059 --> 00:29:19,740
to do things maybe just cast to sit and

812
00:29:19,740 --> 00:29:21,360
wait who knows

813
00:29:21,360 --> 00:29:23,159
um but it lies around in memory and

814
00:29:23,159 --> 00:29:24,659
occasionally we'll let the C2 server

815
00:29:24,659 --> 00:29:26,760
know that they're still alive it can

816
00:29:26,760 --> 00:29:29,640
also run tasks so a covenant has a bunch

817
00:29:29,640 --> 00:29:31,260
of pre-built capabilities that grunts

818
00:29:31,260 --> 00:29:33,360
are able to run and grunts have

819
00:29:33,360 --> 00:29:35,820
templates to make things easier and so

820
00:29:35,820 --> 00:29:38,760
in our case as we can see we have a HTTP

821
00:29:38,760 --> 00:29:40,740
Stager

822
00:29:40,740 --> 00:29:42,659
and so there's of course a bunch of

823
00:29:42,659 --> 00:29:43,919
other templates

824
00:29:43,919 --> 00:29:45,120
um but in our case you know it's great

825
00:29:45,120 --> 00:29:46,500
for the red team people because it's

826
00:29:46,500 --> 00:29:48,600
pretty much Play and play uh just insert

827
00:29:48,600 --> 00:29:50,460
certain things in our case we may see

828
00:29:50,460 --> 00:29:52,559
some changed variable names to kind of

829
00:29:52,559 --> 00:29:54,720
obfuscate things a little bit more but

830
00:29:54,720 --> 00:29:56,039
you know in the case of thread actors

831
00:29:56,039 --> 00:29:57,899
actually using them nah not so great

832
00:29:57,899 --> 00:29:59,940
they have an easier time

833
00:29:59,940 --> 00:30:02,580
um so we're going to take a look but if

834
00:30:02,580 --> 00:30:05,460
we want to go in that whole big Lockheed

835
00:30:05,460 --> 00:30:07,320
Martin kill chain

836
00:30:07,320 --> 00:30:09,480
um looking at the Powershell script that

837
00:30:09,480 --> 00:30:11,880
we have that's the installation step and

838
00:30:11,880 --> 00:30:12,960
now we're in the command and control

839
00:30:12,960 --> 00:30:15,179
section and then those tests that cards

840
00:30:15,179 --> 00:30:16,919
can run is that final you know once

841
00:30:16,919 --> 00:30:18,360
you've had the copy my system and you're

842
00:30:18,360 --> 00:30:20,760
in it they've got control of it further

843
00:30:20,760 --> 00:30:22,980
tasks that you can do for their Mischief

844
00:30:22,980 --> 00:30:25,559
or you know other bad things that may

845
00:30:25,559 --> 00:30:27,480
occur in that stage

846
00:30:27,480 --> 00:30:30,419
and so uh let's go back to our friend

847
00:30:30,419 --> 00:30:34,340
and start poking out a little bit more

848
00:30:34,440 --> 00:30:36,480
alright so now that we have some context

849
00:30:36,480 --> 00:30:38,760
as to what Covenant is and how it's

850
00:30:38,760 --> 00:30:40,919
starting to look like on our end uh

851
00:30:40,919 --> 00:30:42,840
let's first see if this is in fact a

852
00:30:42,840 --> 00:30:44,700
template that we're dealing with so

853
00:30:44,700 --> 00:30:46,799
quickly Googling grunt Stager we're

854
00:30:46,799 --> 00:30:49,559
going to see this grunt HTTP Stager so

855
00:30:49,559 --> 00:30:51,240
let's go check this one out and see what

856
00:30:51,240 --> 00:30:52,620
we're looking at here

857
00:30:52,620 --> 00:30:55,200
and as we scroll down uh and start

858
00:30:55,200 --> 00:30:56,820
looking at this this is starting to look

859
00:30:56,820 --> 00:30:58,679
a little bit familiar we see this you

860
00:30:58,679 --> 00:31:02,340
know URL here uh cert hash here but you

861
00:31:02,340 --> 00:31:04,559
know all of these variable names may not

862
00:31:04,559 --> 00:31:06,720
match up the general formatting of

863
00:31:06,720 --> 00:31:08,940
things is looking a little similar we're

864
00:31:08,940 --> 00:31:11,580
going to pop this open once again over

865
00:31:11,580 --> 00:31:12,539
here

866
00:31:12,539 --> 00:31:14,460
we can see following some you know

867
00:31:14,460 --> 00:31:17,279
base64 encoded strings we have this

868
00:31:17,279 --> 00:31:20,880
whole AES generation going on down here

869
00:31:20,880 --> 00:31:22,860
and in fact if you were to compare it

870
00:31:22,860 --> 00:31:24,779
you know the entire file directly you'll

871
00:31:24,779 --> 00:31:26,580
see that for the most part these are

872
00:31:26,580 --> 00:31:28,559
largely similar if not identical save

873
00:31:28,559 --> 00:31:31,200
for the changes in a variable name and

874
00:31:31,200 --> 00:31:33,679
of course the things that were input

875
00:31:33,679 --> 00:31:36,720
particularly for this program

876
00:31:36,720 --> 00:31:38,580
so I think with some confidence we can

877
00:31:38,580 --> 00:31:41,480
say that this is the current HTTP stator

878
00:31:41,480 --> 00:31:43,980
and with that there are some things that

879
00:31:43,980 --> 00:31:46,320
we may want to grab from it of course we

880
00:31:46,320 --> 00:31:50,220
have a URL there's this HTTP HTTP header

881
00:31:50,220 --> 00:31:54,360
names values URLs and so on and so forth

882
00:31:54,360 --> 00:31:57,299
and so these are all just base64 encoded

883
00:31:57,299 --> 00:31:58,799
so if you want you can just pop them

884
00:31:58,799 --> 00:32:01,919
into cyber chef and

885
00:32:01,919 --> 00:32:05,100
do that real quick conversion so if you

886
00:32:05,100 --> 00:32:06,659
want pop that in there and we can see

887
00:32:06,659 --> 00:32:08,460
the stars accept language user agent

888
00:32:08,460 --> 00:32:10,980
that pretty much tracks for what that is

889
00:32:10,980 --> 00:32:14,519
filling in there as that you know a CPT

890
00:32:14,519 --> 00:32:17,159
header names

891
00:32:17,159 --> 00:32:18,480
so

892
00:32:18,480 --> 00:32:20,220
um we're not going to go too deep into

893
00:32:20,220 --> 00:32:22,380
this obviously I'll leave you guys to

894
00:32:22,380 --> 00:32:24,240
the obfuscate these sections on your own

895
00:32:24,240 --> 00:32:27,299
since these are all just pretty simple

896
00:32:27,299 --> 00:32:30,419
um from base64 conversions uh save for

897
00:32:30,419 --> 00:32:31,679
this one of course because this one

898
00:32:31,679 --> 00:32:33,960
isn't that's a little trick there but we

899
00:32:33,960 --> 00:32:35,399
can see some things that we've seen

900
00:32:35,399 --> 00:32:38,159
before particularly this HTML

901
00:32:38,159 --> 00:32:40,019
um script going on here

902
00:32:40,019 --> 00:32:42,059
you can also see some weird formatting

903
00:32:42,059 --> 00:32:43,919
things this kind of makes sense now that

904
00:32:43,919 --> 00:32:47,159
we've seen this right here

905
00:32:47,159 --> 00:32:49,799
um and so on and so while I want to do a

906
00:32:49,799 --> 00:32:51,600
deep dive I'm going to recommend to you

907
00:32:51,600 --> 00:32:53,640
later that you do the same

908
00:32:53,640 --> 00:32:54,480
um

909
00:32:54,480 --> 00:32:57,299
well you do the Deep dive not me but

910
00:32:57,299 --> 00:32:59,100
um just for understanding because this

911
00:32:59,100 --> 00:33:01,019
is publicly available

912
00:33:01,019 --> 00:33:02,640
um and it's probably pretty known what

913
00:33:02,640 --> 00:33:04,200
this does obviously this is a grunt

914
00:33:04,200 --> 00:33:05,940
stator now it does its whole

915
00:33:05,940 --> 00:33:07,559
communication thing obviously some

916
00:33:07,559 --> 00:33:09,600
cryptography going on here

917
00:33:09,600 --> 00:33:12,120
um that we're pretty much safe in

918
00:33:12,120 --> 00:33:14,820
wrapping up for now

919
00:33:14,820 --> 00:33:17,039
all right so now that we know kind of

920
00:33:17,039 --> 00:33:18,480
what we're dealing with which appears to

921
00:33:18,480 --> 00:33:21,240
be the grunt HTTP Stager

922
00:33:21,240 --> 00:33:23,039
um a little bit of homework for you guys

923
00:33:23,039 --> 00:33:24,600
witches

924
00:33:24,600 --> 00:33:26,399
um without cheating what exactly is

925
00:33:26,399 --> 00:33:28,019
going on in the background back end here

926
00:33:28,019 --> 00:33:30,000
so I'll Define cheating as directly

927
00:33:30,000 --> 00:33:33,059
Googling what the grunt HTTP Stager does

928
00:33:33,059 --> 00:33:34,620
um but cheating would not be Googling

929
00:33:34,620 --> 00:33:36,779
what sections of the code does but you

930
00:33:36,779 --> 00:33:38,760
don't understand and so on

931
00:33:38,760 --> 00:33:41,220
and so my reasoning for this is that

932
00:33:41,220 --> 00:33:43,860
we've had the easy path here generally

933
00:33:43,860 --> 00:33:45,240
speaking we were able to figure out

934
00:33:45,240 --> 00:33:46,620
pretty quickly what we were dealing with

935
00:33:46,620 --> 00:33:48,779
and it's been well documented what we

936
00:33:48,779 --> 00:33:50,279
are dealing with

937
00:33:50,279 --> 00:33:52,260
um but sometimes this may not be the

938
00:33:52,260 --> 00:33:54,360
case we may not have you know something

939
00:33:54,360 --> 00:33:56,700
commonly used in our Arsenal

940
00:33:56,700 --> 00:33:58,980
um we may just have you know code that

941
00:33:58,980 --> 00:34:00,720
we've never seen before and so

942
00:34:00,720 --> 00:34:02,100
understanding how to read code and

943
00:34:02,100 --> 00:34:03,840
understand what it's doing is a really

944
00:34:03,840 --> 00:34:05,340
big part of understanding what malware

945
00:34:05,340 --> 00:34:06,419
is doing

946
00:34:06,419 --> 00:34:08,280
um especially if you are you know

947
00:34:08,280 --> 00:34:10,560
finding new malware out there in the

948
00:34:10,560 --> 00:34:12,060
wild that you know currently may not

949
00:34:12,060 --> 00:34:14,280
have a write-up available to you and so

950
00:34:14,280 --> 00:34:16,800
you have to kind of flex your skills and

951
00:34:16,800 --> 00:34:19,980
really understand what's going on um

952
00:34:19,980 --> 00:34:23,399
to get that full uh comprehensive uh

953
00:34:23,399 --> 00:34:25,560
view of What stages the threat actors

954
00:34:25,560 --> 00:34:28,560
are taking in their actions

955
00:34:28,560 --> 00:34:31,139
and so uh with that I'm just going to

956
00:34:31,139 --> 00:34:33,119
wrap up the workshop now

957
00:34:33,119 --> 00:34:36,659
so I'd like to shout a big thanks to the

958
00:34:36,659 --> 00:34:38,280
blue team Village red team and forensics

959
00:34:38,280 --> 00:34:40,320
team uh the red team are the guys who

960
00:34:40,320 --> 00:34:41,820
made this whole kill chain of the

961
00:34:41,820 --> 00:34:44,579
breakfast team are the great people who

962
00:34:44,579 --> 00:34:45,480
um

963
00:34:45,480 --> 00:34:47,940
got us these samples and so definitely

964
00:34:47,940 --> 00:34:49,800
check out their talks as well they're

965
00:34:49,800 --> 00:34:52,440
all fantastic so totally worth it I'd

966
00:34:52,440 --> 00:34:54,839
also like to thank Brian Cobb for The

967
00:34:54,839 --> 00:34:58,200
Confident Xerox Rick for a very great PE

968
00:34:58,200 --> 00:35:00,060
file write up I definitely recommend

969
00:35:00,060 --> 00:35:01,920
looking into it if you're interested in

970
00:35:01,920 --> 00:35:05,099
taking a deep dive into how the work uh

971
00:35:05,099 --> 00:35:07,079
the dnspy team as well as all the really

972
00:35:07,079 --> 00:35:09,060
cool Remax tool developers

973
00:35:09,060 --> 00:35:11,820
um so Theodore Stevens for PE check the

974
00:35:11,820 --> 00:35:15,000
pev team the P file team mandiant and

975
00:35:15,000 --> 00:35:17,099
more and I'd also like to thank the vax

976
00:35:17,099 --> 00:35:20,700
and Paladin 316 these are the folks that

977
00:35:20,700 --> 00:35:22,200
um worked with me for my first workshop

978
00:35:22,200 --> 00:35:24,240
last year and they're really fantastic

979
00:35:24,240 --> 00:35:26,700
and really knowledgeable in the world of

980
00:35:26,700 --> 00:35:28,560
malware analysis so I definitely reach

981
00:35:28,560 --> 00:35:31,079
out to them if you want to learn more or

982
00:35:31,079 --> 00:35:32,940
just want to chat

983
00:35:32,940 --> 00:35:36,060
and thank you all for watching uh if you

984
00:35:36,060 --> 00:35:37,920
want to contact me I'm on Twitter as re

985
00:35:37,920 --> 00:35:39,599
Scrabble I'm not Super Active on there

986
00:35:39,599 --> 00:35:41,400
but you can definitely DM me

987
00:35:41,400 --> 00:35:44,280
um I'm also on Discord as Scrabble 9731

988
00:35:44,280 --> 00:35:46,020
so you're more than welcome to DM me

989
00:35:46,020 --> 00:35:48,359
there as well uh but with that have a

990
00:35:48,359 --> 00:35:51,560
lovely day and thank you

