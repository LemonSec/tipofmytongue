1
00:00:05,520 --> 00:00:07,200
all right welcome to improving the

2
00:00:07,200 --> 00:00:09,280
security posture of mac os and linux

3
00:00:09,280 --> 00:00:11,679
with azure ad i'm mark marzinski and i'm

4
00:00:11,679 --> 00:00:13,519
here with michael epping and something

5
00:00:13,519 --> 00:00:14,799
we've been trying to do to try to be

6
00:00:14,799 --> 00:00:16,320
more inclusive of those with a visual

7
00:00:16,320 --> 00:00:17,920
impairment is quickly just describe what

8
00:00:17,920 --> 00:00:20,320
we look like so i am a late 30s white

9
00:00:20,320 --> 00:00:22,400
male with medium length brown hair i

10
00:00:22,400 --> 00:00:24,480
have glasses that are blue and black

11
00:00:24,480 --> 00:00:26,880
outlined and today i'm wearing a black

12
00:00:26,880 --> 00:00:28,640
shirt michael

13
00:00:28,640 --> 00:00:31,279
and i'm a mid-30s white male with short

14
00:00:31,279 --> 00:00:33,040
to medium brown hair and i'm wearing a

15
00:00:33,040 --> 00:00:34,640
blue striped shirt

16
00:00:34,640 --> 00:00:36,399
all right so thanks so much so um so

17
00:00:36,399 --> 00:00:37,760
yeah so mike and i are both product

18
00:00:37,760 --> 00:00:39,360
managers in the identity division at

19
00:00:39,360 --> 00:00:41,840
microsoft so we work on active directory

20
00:00:41,840 --> 00:00:43,920
active directory federation services and

21
00:00:43,920 --> 00:00:45,680
azure active directory we spend most of

22
00:00:45,680 --> 00:00:47,039
our time working with customers on their

23
00:00:47,039 --> 00:00:48,960
deployments of azure active directory

24
00:00:48,960 --> 00:00:50,399
and we take the learnings and feedback

25
00:00:50,399 --> 00:00:51,680
from those deployments and we work it

26
00:00:51,680 --> 00:00:53,280
back into the product to make it easier

27
00:00:53,280 --> 00:00:55,600
and better for everybody else so um in

28
00:00:55,600 --> 00:00:56,640
the last year or so michael and i've

29
00:00:56,640 --> 00:00:58,000
been working with some of our customers

30
00:00:58,000 --> 00:01:00,079
that have a larger mac footprint as well

31
00:01:00,079 --> 00:01:01,359
as some linux footprint and we wanted to

32
00:01:01,359 --> 00:01:02,800
share some of the learnings we have from

33
00:01:02,800 --> 00:01:05,199
those deployments here with the defcon

34
00:01:05,199 --> 00:01:06,479
community here

35
00:01:06,479 --> 00:01:09,119
also we will both be live right now on

36
00:01:09,119 --> 00:01:10,720
your video but also in the chat so if

37
00:01:10,720 --> 00:01:11,840
you have questions about anything we're

38
00:01:11,840 --> 00:01:13,280
talking about feel free to post them in

39
00:01:13,280 --> 00:01:14,560
the chat and we will go through and

40
00:01:14,560 --> 00:01:16,479
answer those so um all right so let's go

41
00:01:16,479 --> 00:01:17,920
ahead and get started so the first thing

42
00:01:17,920 --> 00:01:19,040
is we're going to talk about just to

43
00:01:19,040 --> 00:01:20,479
give everybody a quick high level

44
00:01:20,479 --> 00:01:22,479
overview is what is azure id and

45
00:01:22,479 --> 00:01:24,000
conditional access so let's go ahead and

46
00:01:24,000 --> 00:01:25,280
start with that

47
00:01:25,280 --> 00:01:27,200
so if you're not familiar if you have

48
00:01:27,200 --> 00:01:30,400
office 365 and you have azure you have

49
00:01:30,400 --> 00:01:32,479
azure id so azure ad is the identity

50
00:01:32,479 --> 00:01:34,560
provider for those two things but it's

51
00:01:34,560 --> 00:01:36,320
not just an identity provider for those

52
00:01:36,320 --> 00:01:38,560
two services it is a full-blown identity

53
00:01:38,560 --> 00:01:40,479
access as a service so we can do things

54
00:01:40,479 --> 00:01:42,640
like provision users or deep revision

55
00:01:42,640 --> 00:01:44,479
users to applications we can build

56
00:01:44,479 --> 00:01:45,759
things with dynamic groups there's a

57
00:01:45,759 --> 00:01:47,280
whole bunch of stuff we could do here we

58
00:01:47,280 --> 00:01:50,000
could do a full several hour session on

59
00:01:50,000 --> 00:01:51,200
azure id if we need to so if you have

60
00:01:51,200 --> 00:01:53,040
any specific questions about azure id

61
00:01:53,040 --> 00:01:54,640
feel free to reach out to mike either on

62
00:01:54,640 --> 00:01:56,560
twitter or in the chat but from now just

63
00:01:56,560 --> 00:01:58,719
as a high level it is the idp for office

64
00:01:58,719 --> 00:02:01,119
365 azure and azure and a bunch of other

65
00:02:01,119 --> 00:02:02,240
things as well

66
00:02:02,240 --> 00:02:03,520
now something that we saw with a lot of

67
00:02:03,520 --> 00:02:05,119
our customers that definitely got

68
00:02:05,119 --> 00:02:06,880
accelerated with covid was that users

69
00:02:06,880 --> 00:02:09,280
were looking to work more outside of the

70
00:02:09,280 --> 00:02:11,120
office so um you know they did most of

71
00:02:11,120 --> 00:02:12,160
their work in the office but they wanted

72
00:02:12,160 --> 00:02:13,599
to be able to work from home work from

73
00:02:13,599 --> 00:02:15,680
the coffee shop and the resources that

74
00:02:15,680 --> 00:02:17,760
they were accessing

75
00:02:17,760 --> 00:02:19,360
are no longer just going to be on that

76
00:02:19,360 --> 00:02:20,959
um prime network they're probably using

77
00:02:20,959 --> 00:02:22,400
things like cloud

78
00:02:22,400 --> 00:02:24,160
cloud services sas apps things of that

79
00:02:24,160 --> 00:02:25,520
nature and the devices that they're

80
00:02:25,520 --> 00:02:27,280
using are you know most of their work is

81
00:02:27,280 --> 00:02:28,400
probably done from their corporate

82
00:02:28,400 --> 00:02:29,599
device but they want to be able to do

83
00:02:29,599 --> 00:02:30,959
things from their personal phone they

84
00:02:30,959 --> 00:02:32,959
want to do things from like their ipad

85
00:02:32,959 --> 00:02:34,879
things of that nature so this is really

86
00:02:34,879 --> 00:02:36,400
starting to spread

87
00:02:36,400 --> 00:02:38,080
and it started to kind of you know move

88
00:02:38,080 --> 00:02:40,319
into this method where

89
00:02:40,319 --> 00:02:42,000
no longer is it we're only accessing

90
00:02:42,000 --> 00:02:43,680
these resources that are on the

91
00:02:43,680 --> 00:02:46,160
corporate network and that boundary of

92
00:02:46,160 --> 00:02:47,840
the network is the boundary everything

93
00:02:47,840 --> 00:02:50,000
inside is safe everything outside is bad

94
00:02:50,000 --> 00:02:51,680
has really started to kind of go away

95
00:02:51,680 --> 00:02:53,680
and if you've been to any azure ed talks

96
00:02:53,680 --> 00:02:55,040
before you may have heard us talk about

97
00:02:55,040 --> 00:02:57,120
how identity has become that control

98
00:02:57,120 --> 00:02:58,400
point now because that's the consistent

99
00:02:58,400 --> 00:03:00,480
thing across all these different areas

100
00:03:00,480 --> 00:03:02,879
so um that's kind of where azure ad can

101
00:03:02,879 --> 00:03:04,480
come in so let's talk about

102
00:03:04,480 --> 00:03:06,319
a very specific thing around azure idea

103
00:03:06,319 --> 00:03:07,599
that i think is really important like i

104
00:03:07,599 --> 00:03:09,440
said that we can do a whole bunch of

105
00:03:09,440 --> 00:03:10,959
topics on azure id but something i

106
00:03:10,959 --> 00:03:12,640
wanted this community to get uh get

107
00:03:12,640 --> 00:03:15,280
across here is that azure id is built on

108
00:03:15,280 --> 00:03:17,040
open standards this means things like

109
00:03:17,040 --> 00:03:20,560
oauth open id connect and saml and if

110
00:03:20,560 --> 00:03:21,840
you actually crack open any of the

111
00:03:21,840 --> 00:03:23,599
microsoft applications themselves you

112
00:03:23,599 --> 00:03:25,519
will see that they are built on openid

113
00:03:25,519 --> 00:03:27,599
connect now we're continuing to invest

114
00:03:27,599 --> 00:03:29,599
in new standards things like fido as

115
00:03:29,599 --> 00:03:31,040
well as the decentralized identity

116
00:03:31,040 --> 00:03:32,640
framework we actually have a whole team

117
00:03:32,640 --> 00:03:34,000
of people that work on this they're led

118
00:03:34,000 --> 00:03:36,159
by pam dingle if you know her from any

119
00:03:36,159 --> 00:03:37,920
of the identity stuff she's great and

120
00:03:37,920 --> 00:03:39,599
her team works with these different

121
00:03:39,599 --> 00:03:41,440
standard bodies and foundations to help

122
00:03:41,440 --> 00:03:43,280
define you know new and emerging

123
00:03:43,280 --> 00:03:44,799
standards and a good example of this is

124
00:03:44,799 --> 00:03:47,280
if you saw the past keys announcement by

125
00:03:47,280 --> 00:03:49,360
the fidel foundation you can read more

126
00:03:49,360 --> 00:03:51,680
ak to ms paske announcement this is

127
00:03:51,680 --> 00:03:54,159
going to be supported by microsoft apple

128
00:03:54,159 --> 00:03:55,280
and google

129
00:03:55,280 --> 00:03:57,120
tim on her team actually helped work

130
00:03:57,120 --> 00:03:59,120
with the fido alliance and those groups

131
00:03:59,120 --> 00:04:01,280
to agree on that standard so

132
00:04:01,280 --> 00:04:02,560
not only are they helping define new

133
00:04:02,560 --> 00:04:04,239
standards they also make sure that azure

134
00:04:04,239 --> 00:04:05,040
id

135
00:04:05,040 --> 00:04:06,480
will support those standards so if you

136
00:04:06,480 --> 00:04:08,799
have any applications that support oauth

137
00:04:08,799 --> 00:04:11,120
open id connect or saml you can quickly

138
00:04:11,120 --> 00:04:12,959
integrate those into azure id which

139
00:04:12,959 --> 00:04:15,040
allows us to use things like conditional

140
00:04:15,040 --> 00:04:16,959
access so if you aren't familiar with

141
00:04:16,959 --> 00:04:19,120
conditional access this is our zero

142
00:04:19,120 --> 00:04:21,199
trust authentication and authorization

143
00:04:21,199 --> 00:04:23,440
engine as an admin you can define

144
00:04:23,440 --> 00:04:25,440
different sets of conditions and if

145
00:04:25,440 --> 00:04:27,840
those conditions apply the user device

146
00:04:27,840 --> 00:04:29,600
will have to pass certain controls and

147
00:04:29,600 --> 00:04:31,919
if they do they are then granted access

148
00:04:31,919 --> 00:04:33,919
to that resource so it's all there in

149
00:04:33,919 --> 00:04:35,919
the name conditional access and it's

150
00:04:35,919 --> 00:04:37,280
common question we've seen with some of

151
00:04:37,280 --> 00:04:38,720
these other communities that maybe

152
00:04:38,720 --> 00:04:40,479
aren't so familiar with azure ids like

153
00:04:40,479 --> 00:04:42,720
so the mac admin community is that when

154
00:04:42,720 --> 00:04:45,280
is conditional access being applied like

155
00:04:45,280 --> 00:04:47,120
i logged in first thing in the morning i

156
00:04:47,120 --> 00:04:49,040
got prompted for mfa and then i went to

157
00:04:49,040 --> 00:04:50,639
access that same application later i

158
00:04:50,639 --> 00:04:52,560
didn't get prompted is conditional

159
00:04:52,560 --> 00:04:54,639
access even working and the answer is

160
00:04:54,639 --> 00:04:56,560
yes conditional accesses you dilute

161
00:04:56,560 --> 00:04:58,400
every time a user or device is

162
00:04:58,400 --> 00:05:00,000
requesting access to a resource and

163
00:05:00,000 --> 00:05:01,600
they're getting that access token i'll

164
00:05:01,600 --> 00:05:02,960
talk a little bit about that a little

165
00:05:02,960 --> 00:05:04,880
bit later this kind of goes into modern

166
00:05:04,880 --> 00:05:06,720
authentication now what are some of the

167
00:05:06,720 --> 00:05:08,400
things you can do

168
00:05:08,400 --> 00:05:10,479
from a conditional access perspective so

169
00:05:10,479 --> 00:05:12,560
you can configure things based on where

170
00:05:12,560 --> 00:05:14,800
the user is coming from is there any

171
00:05:14,800 --> 00:05:16,320
risk on that user is there anything

172
00:05:16,320 --> 00:05:18,240
suspicious what type of device that

173
00:05:18,240 --> 00:05:20,080
they're coming from is it a windows

174
00:05:20,080 --> 00:05:22,080
device linux or mac device is it in a

175
00:05:22,080 --> 00:05:23,919
good healthy state are there any

176
00:05:23,919 --> 00:05:25,680
application application requirements

177
00:05:25,680 --> 00:05:26,800
that you want to enforce you can

178
00:05:26,800 --> 00:05:28,800
configure a conditional access policy

179
00:05:28,800 --> 00:05:30,800
that says if you're coming from a mobile

180
00:05:30,800 --> 00:05:32,080
phone and you're trying to get your

181
00:05:32,080 --> 00:05:34,400
email in exchange online that you have

182
00:05:34,400 --> 00:05:35,840
to come from the outlook mobile app

183
00:05:35,840 --> 00:05:37,039
because that prevents people from

184
00:05:37,039 --> 00:05:38,720
accidentally saving attachments to their

185
00:05:38,720 --> 00:05:40,160
personal onedrive or their personal

186
00:05:40,160 --> 00:05:42,000
dropbox it has to be saved to the

187
00:05:42,000 --> 00:05:43,360
corporate onedrive or the corporate

188
00:05:43,360 --> 00:05:45,039
dropbox and some of the resources that

189
00:05:45,039 --> 00:05:47,039
we're trying to get to here may include

190
00:05:47,039 --> 00:05:48,160
linux servers and michael's going to

191
00:05:48,160 --> 00:05:49,360
talk about things we can do with that

192
00:05:49,360 --> 00:05:50,800
here in a little bit but let's take a

193
00:05:50,800 --> 00:05:53,120
look at how conditional access actually

194
00:05:53,120 --> 00:05:56,080
applies so um we've seen this question

195
00:05:56,080 --> 00:05:57,440
come up and people want to have a

196
00:05:57,440 --> 00:05:58,880
conditional access

197
00:05:58,880 --> 00:06:00,800
like they want the first policy to apply

198
00:06:00,800 --> 00:06:02,240
and if that doesn't apply they want the

199
00:06:02,240 --> 00:06:03,919
second and third policy to apply and

200
00:06:03,919 --> 00:06:05,600
things of that nature

201
00:06:05,600 --> 00:06:07,360
unfortunately conditional access does

202
00:06:07,360 --> 00:06:09,440
not work that way if there is no

203
00:06:09,440 --> 00:06:10,800
precedence so if you're familiar with

204
00:06:10,800 --> 00:06:12,479
how group policies work in active

205
00:06:12,479 --> 00:06:14,319
directory where you have that local site

206
00:06:14,319 --> 00:06:16,639
domain ou precedence it does not work

207
00:06:16,639 --> 00:06:18,560
that way all conditional access policies

208
00:06:18,560 --> 00:06:20,000
are added together and then the first

209
00:06:20,000 --> 00:06:21,919
question that's asked really is is there

210
00:06:21,919 --> 00:06:24,479
a policy that applies in this scope of

211
00:06:24,479 --> 00:06:26,400
this request if the answer is yes it

212
00:06:26,400 --> 00:06:28,160
then goes to these following controls so

213
00:06:28,160 --> 00:06:30,240
the first is if you have a block control

214
00:06:30,240 --> 00:06:32,160
the default deny will always win there

215
00:06:32,160 --> 00:06:34,800
first there's no block controls then we

216
00:06:34,800 --> 00:06:36,880
have a grant control that goes in this

217
00:06:36,880 --> 00:06:39,759
order of risk mfa device and then again

218
00:06:39,759 --> 00:06:42,080
that approved client app now a key thing

219
00:06:42,080 --> 00:06:43,600
to remember here

220
00:06:43,600 --> 00:06:45,360
is that conditional access will try to

221
00:06:45,360 --> 00:06:47,520
satisfy the policy without having the

222
00:06:47,520 --> 00:06:49,599
user have to do any interaction so if

223
00:06:49,599 --> 00:06:50,960
you have a conditional access policy

224
00:06:50,960 --> 00:06:53,599
that says we either have to do mfa or

225
00:06:53,599 --> 00:06:55,919
come from a compliant device if the user

226
00:06:55,919 --> 00:06:57,680
is not coming from a compliant device

227
00:06:57,680 --> 00:06:59,360
they would then get prompted to do mfa

228
00:06:59,360 --> 00:07:01,039
so you can see here on the right michael

229
00:07:01,039 --> 00:07:02,960
tried to log into the azure portal he

230
00:07:02,960 --> 00:07:04,880
was coming from a non-compliant device

231
00:07:04,880 --> 00:07:06,400
you can see that as the attribute here

232
00:07:06,400 --> 00:07:08,560
is set to is compliant is false that's

233
00:07:08,560 --> 00:07:10,720
what the arrow is pointing to so this is

234
00:07:10,720 --> 00:07:12,080
actually controlled by intune we'll talk

235
00:07:12,080 --> 00:07:13,360
a little bit about how this works here

236
00:07:13,360 --> 00:07:15,280
in a little bit but it's really

237
00:07:15,280 --> 00:07:17,360
important that as defenders and maybe

238
00:07:17,360 --> 00:07:18,720
people that have macs in our environment

239
00:07:18,720 --> 00:07:20,080
linux clients in our environment that we

240
00:07:20,080 --> 00:07:21,599
understand what those conditional access

241
00:07:21,599 --> 00:07:23,440
policies are because those can greatly

242
00:07:23,440 --> 00:07:26,639
impact how the behavior is for that end

243
00:07:26,639 --> 00:07:27,840
user so let's take a look at what are

244
00:07:27,840 --> 00:07:29,440
some of those common policies that we

245
00:07:29,440 --> 00:07:32,319
see so um you know again talk to your im

246
00:07:32,319 --> 00:07:33,759
team if that's not you understand the

247
00:07:33,759 --> 00:07:35,919
policies but things like requiring mfa

248
00:07:35,919 --> 00:07:38,160
for all users this is really really good

249
00:07:38,160 --> 00:07:39,840
blocking legacy authentication you've

250
00:07:39,840 --> 00:07:41,120
probably done that already i know we've

251
00:07:41,120 --> 00:07:42,479
had talks about this here in the past

252
00:07:42,479 --> 00:07:45,360
things like pop3 imap4 blocking access

253
00:07:45,360 --> 00:07:47,280
by country location so saying we have no

254
00:07:47,280 --> 00:07:49,120
users in this region we have no business

255
00:07:49,120 --> 00:07:50,879
interest in this reason region we're

256
00:07:50,879 --> 00:07:53,280
going to block access all together

257
00:07:53,280 --> 00:07:55,360
requiring compliant are a hybrid joined

258
00:07:55,360 --> 00:07:56,400
device so we're starting to see

259
00:07:56,400 --> 00:07:58,080
customers moving this way that it's no

260
00:07:58,080 --> 00:08:00,479
longer okay just to do mfa that you also

261
00:08:00,479 --> 00:08:02,560
need to come from a device that's known

262
00:08:02,560 --> 00:08:04,000
and managed by the environment so this

263
00:08:04,000 --> 00:08:06,160
is that device identity aspect we're

264
00:08:06,160 --> 00:08:08,240
also starting to see the inverse of this

265
00:08:08,240 --> 00:08:09,199
which is where we're going to put

266
00:08:09,199 --> 00:08:11,280
stricter controls for non-corporate

267
00:08:11,280 --> 00:08:13,199
managed devices so this is always that

268
00:08:13,199 --> 00:08:15,199
like grandma's pc grandma's workstations

269
00:08:15,199 --> 00:08:16,479
to know that the security teams love to

270
00:08:16,479 --> 00:08:17,840
talk about that they're at their

271
00:08:17,840 --> 00:08:19,840
grandma's house for a holiday and that's

272
00:08:19,840 --> 00:08:21,120
when someone decides that they're going

273
00:08:21,120 --> 00:08:22,960
to get a couple hours of good work done

274
00:08:22,960 --> 00:08:24,240
and instead of using their own pc

275
00:08:24,240 --> 00:08:25,680
they're going to use grandma's pc or

276
00:08:25,680 --> 00:08:27,840
grandma's mac and we don't want that

277
00:08:27,840 --> 00:08:30,080
session to persist for hours days or

278
00:08:30,080 --> 00:08:32,000
weeks so the security team sets a policy

279
00:08:32,000 --> 00:08:33,360
that says

280
00:08:33,360 --> 00:08:34,640
if you're coming from a non-corporate

281
00:08:34,640 --> 00:08:36,080
device you're going to have to

282
00:08:36,080 --> 00:08:38,159
re-authenticate every two hours and if

283
00:08:38,159 --> 00:08:40,080
you haven't done the work especially on

284
00:08:40,080 --> 00:08:42,159
your mac side to do an integration with

285
00:08:42,159 --> 00:08:44,720
azure id azure id is going to see all of

286
00:08:44,720 --> 00:08:46,160
your corporate macs

287
00:08:46,160 --> 00:08:48,399
as unmanaged devices and these stricter

288
00:08:48,399 --> 00:08:50,160
controls are going to apply to them and

289
00:08:50,160 --> 00:08:52,800
this is going to be a very very horrible

290
00:08:52,800 --> 00:08:54,480
experience and if you talk to your

291
00:08:54,480 --> 00:08:56,080
security teams about that hopefully

292
00:08:56,080 --> 00:08:57,360
that's you because you're at the defcon

293
00:08:57,360 --> 00:08:59,519
blue team village here um some people on

294
00:08:59,519 --> 00:09:01,519
your team may say that this is good from

295
00:09:01,519 --> 00:09:03,279
a secure perspective they'll say we

296
00:09:03,279 --> 00:09:05,360
practice zero trust we don't trust

297
00:09:05,360 --> 00:09:07,040
anyone we don't trust any devices we

298
00:09:07,040 --> 00:09:09,040
don't trust anything we want people to

299
00:09:09,040 --> 00:09:10,640
be re-authenticating because that is

300
00:09:10,640 --> 00:09:12,800
proving who they say they are this is

301
00:09:12,800 --> 00:09:15,279
good from a security perspective and in

302
00:09:15,279 --> 00:09:17,839
theory that sounds like that would be

303
00:09:17,839 --> 00:09:19,040
right that we would want people to

304
00:09:19,040 --> 00:09:21,200
continue to be re-authenticated that

305
00:09:21,200 --> 00:09:22,640
sounds like it would be a good security

306
00:09:22,640 --> 00:09:24,320
practice but in reality what we found

307
00:09:24,320 --> 00:09:26,080
with customers that probably isn't

308
00:09:26,080 --> 00:09:27,920
having the same security benefit that

309
00:09:27,920 --> 00:09:30,080
you think it is so let's talk about why

310
00:09:30,080 --> 00:09:31,680
over prompting our users is bad so we

311
00:09:31,680 --> 00:09:33,760
had a customer case study here

312
00:09:33,760 --> 00:09:35,920
one of our large financial customers in

313
00:09:35,920 --> 00:09:37,760
europe they had their red team

314
00:09:37,760 --> 00:09:39,839
um you know doing a cyber attack so

315
00:09:39,839 --> 00:09:41,040
they're running through the playbooks

316
00:09:41,040 --> 00:09:43,120
and they're doing that password spray

317
00:09:43,120 --> 00:09:45,040
and they found some users with uh easily

318
00:09:45,040 --> 00:09:46,720
guessable passwords so maybe something

319
00:09:46,720 --> 00:09:49,920
like summer 2022 exclamation point um or

320
00:09:49,920 --> 00:09:51,279
something like that so they found a

321
00:09:51,279 --> 00:09:52,720
couple accounts and they asked their

322
00:09:52,720 --> 00:09:54,640
leadership team can they just hammer

323
00:09:54,640 --> 00:09:56,399
these people with mfa prompts and they

324
00:09:56,399 --> 00:09:58,959
said sure not a problem we'll tell our

325
00:09:58,959 --> 00:10:00,160
tara helped us when they call and

326
00:10:00,160 --> 00:10:01,920
complain we can tell them what's going

327
00:10:01,920 --> 00:10:03,360
on here's what we found

328
00:10:03,360 --> 00:10:05,600
first of all no users reported that

329
00:10:05,600 --> 00:10:08,399
there was any uh extra prompts so that's

330
00:10:08,399 --> 00:10:10,240
off to a bad start and then many of

331
00:10:10,240 --> 00:10:11,920
those users actually just blindly

332
00:10:11,920 --> 00:10:14,800
approve those mfa requests themselves

333
00:10:14,800 --> 00:10:16,240
so that's you know having the opposite

334
00:10:16,240 --> 00:10:18,000
effect we want from ffa and one user was

335
00:10:18,000 --> 00:10:19,200
so fed up with the amount of problems

336
00:10:19,200 --> 00:10:20,640
that they were getting they just

337
00:10:20,640 --> 00:10:22,399
uninstalled the authenticator app

338
00:10:22,399 --> 00:10:23,760
entirely like i can't even be dealing

339
00:10:23,760 --> 00:10:25,279
with this thing they just deleted the

340
00:10:25,279 --> 00:10:26,880
app from their phone entirely so this is

341
00:10:26,880 --> 00:10:28,880
obviously what we don't want from a

342
00:10:28,880 --> 00:10:31,040
security perspective so we found really

343
00:10:31,040 --> 00:10:33,360
when you over prompt your users this is

344
00:10:33,360 --> 00:10:35,360
really bad from a security perspective

345
00:10:35,360 --> 00:10:37,279
it's it's going to lead to compromise

346
00:10:37,279 --> 00:10:39,360
you're teaching your users um bad

347
00:10:39,360 --> 00:10:40,800
behaviors you're teaching them to give

348
00:10:40,800 --> 00:10:42,720
up their credentials all the time and

349
00:10:42,720 --> 00:10:44,480
when you have lots of mfa prompts during

350
00:10:44,480 --> 00:10:46,480
the day so they get four or five or six

351
00:10:46,480 --> 00:10:47,760
when an attacker gets a hold of their

352
00:10:47,760 --> 00:10:49,200
account they go to log in with those

353
00:10:49,200 --> 00:10:50,880
credentials and they get that seventh or

354
00:10:50,880 --> 00:10:52,560
eighth mfa prompt they're just going to

355
00:10:52,560 --> 00:10:53,760
approve it because they don't know

356
00:10:53,760 --> 00:10:55,279
better and they've already approved the

357
00:10:55,279 --> 00:10:56,880
previous five or six so we don't want to

358
00:10:56,880 --> 00:10:58,560
blindly have people getting all these

359
00:10:58,560 --> 00:11:01,040
mfa prompts now now is it bad from a

360
00:11:01,040 --> 00:11:02,800
security perspective it's bad from a

361
00:11:02,800 --> 00:11:04,880
productivity perspective

362
00:11:04,880 --> 00:11:06,240
especially on platforms where we don't

363
00:11:06,240 --> 00:11:08,160
have single sign on single sign-on out

364
00:11:08,160 --> 00:11:09,839
of the box this includes things like mac

365
00:11:09,839 --> 00:11:11,360
os and linux and we'll talk a little bit

366
00:11:11,360 --> 00:11:12,800
about that later today how you can

367
00:11:12,800 --> 00:11:14,399
improve upon that but really

368
00:11:14,399 --> 00:11:16,560
as defenders here we should be striving

369
00:11:16,560 --> 00:11:18,880
to improve our end user experience and

370
00:11:18,880 --> 00:11:20,399
improving security and we're going to do

371
00:11:20,399 --> 00:11:22,560
to do that by only prompting our users

372
00:11:22,560 --> 00:11:24,320
when it truly is needed so things like

373
00:11:24,320 --> 00:11:25,920
when they're coming from a new device or

374
00:11:25,920 --> 00:11:27,200
they're coming from a location we've

375
00:11:27,200 --> 00:11:28,800
never seen them come before there's

376
00:11:28,800 --> 00:11:30,399
something else has changed in their risk

377
00:11:30,399 --> 00:11:32,240
profile that's when we want to prompt

378
00:11:32,240 --> 00:11:33,920
those users and the credential type we

379
00:11:33,920 --> 00:11:35,200
want to use when we are prompting our

380
00:11:35,200 --> 00:11:37,440
users is a passwordless credential it

381
00:11:37,440 --> 00:11:39,200
makes for a better experience it's a

382
00:11:39,200 --> 00:11:40,399
stronger credential and we'll talk a

383
00:11:40,399 --> 00:11:41,680
little bit about that at the very end

384
00:11:41,680 --> 00:11:43,200
but thing i want to make sure i stress

385
00:11:43,200 --> 00:11:44,399
here is that

386
00:11:44,399 --> 00:11:46,160
many times in our environments the mac

387
00:11:46,160 --> 00:11:48,240
os and linux clients and servers are

388
00:11:48,240 --> 00:11:50,240
more of a smaller subset and they don't

389
00:11:50,240 --> 00:11:51,600
get the type of attention that they

390
00:11:51,600 --> 00:11:53,680
probably deserve and they are probably

391
00:11:53,680 --> 00:11:54,880
falling into this bucket with these

392
00:11:54,880 --> 00:11:56,560
conditional access policies where they

393
00:11:56,560 --> 00:11:57,839
are having a really poor experience and

394
00:11:57,839 --> 00:11:59,519
we probably are over prompting these

395
00:11:59,519 --> 00:12:02,000
users more than we should be so um let's

396
00:12:02,000 --> 00:12:03,200
go ahead and move on where michael's

397
00:12:03,200 --> 00:12:04,720
going to talk about

398
00:12:04,720 --> 00:12:07,360
um oh sorry i forgot one part here yes

399
00:12:07,360 --> 00:12:08,320
so

400
00:12:08,320 --> 00:12:09,519
the first thing we're going to need to

401
00:12:09,519 --> 00:12:12,079
do is we're going to need to determine

402
00:12:12,079 --> 00:12:14,160
if we have a prompting problem in our

403
00:12:14,160 --> 00:12:16,240
environment and unless you've been

404
00:12:16,240 --> 00:12:18,720
spending time on this you probably have

405
00:12:18,720 --> 00:12:20,639
some room for improvement so you want to

406
00:12:20,639 --> 00:12:22,560
be able to show this with data we

407
00:12:22,560 --> 00:12:24,720
actually have somebody on our team here

408
00:12:24,720 --> 00:12:27,360
that used to work in power bi and he has

409
00:12:27,360 --> 00:12:30,320
a shirt that says in god we trust all

410
00:12:30,320 --> 00:12:32,480
others bring data and all the data you

411
00:12:32,480 --> 00:12:34,800
need for this is in the azure ad sign in

412
00:12:34,800 --> 00:12:36,880
logs so we have a workbook here for you

413
00:12:36,880 --> 00:12:40,000
if you go to ak to ms slash mfa prompts

414
00:12:40,000 --> 00:12:41,760
workbook this is a free workbook that

415
00:12:41,760 --> 00:12:45,279
uses azure monitor and log analytics um

416
00:12:45,279 --> 00:12:47,120
if you're not sending your azure ids

417
00:12:47,120 --> 00:12:49,200
sign in logs to azure monitor and log

418
00:12:49,200 --> 00:12:50,880
analytics that's okay

419
00:12:50,880 --> 00:12:52,480
go take a look at this because you can

420
00:12:52,480 --> 00:12:54,639
see what all of the queries are and then

421
00:12:54,639 --> 00:12:56,160
you can then write your own query and

422
00:12:56,160 --> 00:12:57,920
wherever you are sending your azure id

423
00:12:57,920 --> 00:12:59,760
sign-in logs so something like splunk or

424
00:12:59,760 --> 00:13:02,800
q-logic or sumo logic q-radar just

425
00:13:02,800 --> 00:13:04,240
combined the two seams together there uh

426
00:13:04,240 --> 00:13:05,519
cousteau doesn't really matter but you

427
00:13:05,519 --> 00:13:07,360
can take that from there now in this

428
00:13:07,360 --> 00:13:08,720
workbook we will show you lots of

429
00:13:08,720 --> 00:13:10,160
different things

430
00:13:10,160 --> 00:13:11,920
the first thing you can see is which of

431
00:13:11,920 --> 00:13:13,680
your users are being prompted the most

432
00:13:13,680 --> 00:13:15,200
and this can be a very eye-opening

433
00:13:15,200 --> 00:13:17,200
experience for some customers we'll also

434
00:13:17,200 --> 00:13:18,800
show you what is the average amount of

435
00:13:18,800 --> 00:13:19,920
prompts that you're getting in your

436
00:13:19,920 --> 00:13:21,519
environment as well as what are the

437
00:13:21,519 --> 00:13:23,120
applications that have a very high

438
00:13:23,120 --> 00:13:24,560
problem count we've had customers that

439
00:13:24,560 --> 00:13:26,240
find that their applications are

440
00:13:26,240 --> 00:13:29,600
actually misconfigured and it's actually

441
00:13:29,600 --> 00:13:31,120
causing more problems than really really

442
00:13:31,120 --> 00:13:32,240
need so you'll see all this type of

443
00:13:32,240 --> 00:13:33,600
stuff in there the other thing that

444
00:13:33,600 --> 00:13:34,959
we're going to find in here is what is

445
00:13:34,959 --> 00:13:37,839
the device state of those prompts so you

446
00:13:37,839 --> 00:13:39,120
here you can see on the graph on the

447
00:13:39,120 --> 00:13:41,519
right-hand side 95 of the prompts are

448
00:13:41,519 --> 00:13:43,279
coming from unmanaged devices and this

449
00:13:43,279 --> 00:13:44,800
is really really really critical to

450
00:13:44,800 --> 00:13:46,399
understand because we may be having

451
00:13:46,399 --> 00:13:48,160
those more stricter conditional access

452
00:13:48,160 --> 00:13:49,920
policies being applied them so we're

453
00:13:49,920 --> 00:13:50,959
going to want to look to move those

454
00:13:50,959 --> 00:13:52,720
types of devices those mac os linux

455
00:13:52,720 --> 00:13:54,560
devices from an unmanaged state to a

456
00:13:54,560 --> 00:13:56,160
managed state and we'll talk about that

457
00:13:56,160 --> 00:13:58,160
here in a little bit but now michael is

458
00:13:58,160 --> 00:13:59,279
actually going to talk about how we can

459
00:13:59,279 --> 00:14:02,880
do some things on the linux server side

460
00:14:02,880 --> 00:14:04,480
all right so let's talk about how we can

461
00:14:04,480 --> 00:14:06,720
turn linux servers into a resource that

462
00:14:06,720 --> 00:14:08,880
can be protected by conditional access

463
00:14:08,880 --> 00:14:10,560
so we said earlier that linux servers

464
00:14:10,560 --> 00:14:12,399
may be a resource but i would contend

465
00:14:12,399 --> 00:14:13,680
that they should definitely be

466
00:14:13,680 --> 00:14:16,000
considered one of these resources that

467
00:14:16,000 --> 00:14:17,760
we need to apply zero trust type

468
00:14:17,760 --> 00:14:19,440
policies to

469
00:14:19,440 --> 00:14:22,800
uh so in azure ad we have a capability

470
00:14:22,800 --> 00:14:25,680
to protect access via ssh to linux

471
00:14:25,680 --> 00:14:28,000
servers with conditional access and

472
00:14:28,000 --> 00:14:29,680
other azure id tools so this would

473
00:14:29,680 --> 00:14:31,760
include conditional access where we can

474
00:14:31,760 --> 00:14:34,880
do things like require compliant devices

475
00:14:34,880 --> 00:14:37,519
require mfa use passwordless sign in

476
00:14:37,519 --> 00:14:39,199
methods there's other tooling that we

477
00:14:39,199 --> 00:14:40,720
can use like privilege identity

478
00:14:40,720 --> 00:14:42,720
management so that users don't have

479
00:14:42,720 --> 00:14:44,240
standing access to things and they have

480
00:14:44,240 --> 00:14:46,240
to check out their access so there's a

481
00:14:46,240 --> 00:14:48,079
lot of different tools that we can use

482
00:14:48,079 --> 00:14:49,680
to start protecting these servers with

483
00:14:49,680 --> 00:14:51,440
the same types of conditional access

484
00:14:51,440 --> 00:14:53,680
policies that we're using for other

485
00:14:53,680 --> 00:14:56,000
applications in our environment and we

486
00:14:56,000 --> 00:14:58,000
also have the capability to do this type

487
00:14:58,000 --> 00:14:59,440
of protection for more than just your

488
00:14:59,440 --> 00:15:01,600
own users if you need to have machines

489
00:15:01,600 --> 00:15:03,600
accessing those

490
00:15:03,600 --> 00:15:06,160
linux servers using ssh we can protect

491
00:15:06,160 --> 00:15:08,399
workload identities or what may also be

492
00:15:08,399 --> 00:15:10,639
known as service principles as well so

493
00:15:10,639 --> 00:15:11,760
there's a lot of different features

494
00:15:11,760 --> 00:15:13,199
available here

495
00:15:13,199 --> 00:15:14,639
so i want to step back and talk about

496
00:15:14,639 --> 00:15:16,639
why do we need a tool like azure ad to

497
00:15:16,639 --> 00:15:19,040
protect ssh access to vms so we're going

498
00:15:19,040 --> 00:15:20,399
to kind of lay out

499
00:15:20,399 --> 00:15:22,560
how our customers are accessing linux

500
00:15:22,560 --> 00:15:24,800
today or what the common access patterns

501
00:15:24,800 --> 00:15:27,440
are so it's really really common

502
00:15:27,440 --> 00:15:29,440
for out of the box linux linux

503
00:15:29,440 --> 00:15:31,360
installations to use password

504
00:15:31,360 --> 00:15:34,160
authentication um so in this case the

505
00:15:34,160 --> 00:15:35,759
user sends the username and password

506
00:15:35,759 --> 00:15:37,920
over the wire to the device

507
00:15:37,920 --> 00:15:39,680
it may be validated locally it may be

508
00:15:39,680 --> 00:15:41,360
validated by another system like a

509
00:15:41,360 --> 00:15:44,000
radius server an ldap server but the pat

510
00:15:44,000 --> 00:15:45,600
username and password are passing over

511
00:15:45,600 --> 00:15:47,120
the wire

512
00:15:47,120 --> 00:15:49,519
uh there's uh there could be an ldap

513
00:15:49,519 --> 00:15:50,639
service in the mix like we have

514
00:15:50,639 --> 00:15:51,839
customers who

515
00:15:51,839 --> 00:15:53,600
use active directory to validate user

516
00:15:53,600 --> 00:15:56,160
credentials or other ldap stores

517
00:15:56,160 --> 00:15:58,000
kerberos is an option

518
00:15:58,000 --> 00:16:00,240
some customers use public key private

519
00:16:00,240 --> 00:16:02,320
key pairs this is another very common

520
00:16:02,320 --> 00:16:03,759
option out of the box on linux

521
00:16:03,759 --> 00:16:05,040
distributions

522
00:16:05,040 --> 00:16:06,959
this could again just be credentials

523
00:16:06,959 --> 00:16:08,959
that are local to that specific linux

524
00:16:08,959 --> 00:16:11,360
server where the user has a private key

525
00:16:11,360 --> 00:16:13,199
on their local workstation and instead

526
00:16:13,199 --> 00:16:14,480
of sending their credential over the

527
00:16:14,480 --> 00:16:16,480
wire they basically sign a random piece

528
00:16:16,480 --> 00:16:18,399
of data with the private key and then

529
00:16:18,399 --> 00:16:20,160
the public key on the server is used to

530
00:16:20,160 --> 00:16:21,519
validate it

531
00:16:21,519 --> 00:16:23,279
some in some environments customers are

532
00:16:23,279 --> 00:16:24,959
a little more mature and they manage

533
00:16:24,959 --> 00:16:27,360
these keys with some sort of tooling

534
00:16:27,360 --> 00:16:29,519
so there could be a process to go revoke

535
00:16:29,519 --> 00:16:32,720
keys when a user is terminated uh or to

536
00:16:32,720 --> 00:16:34,480
distribute new keys when a user is

537
00:16:34,480 --> 00:16:35,600
onboarded

538
00:16:35,600 --> 00:16:37,680
but it's fundamental to understand that

539
00:16:37,680 --> 00:16:40,480
this is still a very on-premise oriented

540
00:16:40,480 --> 00:16:42,560
technology in many cases

541
00:16:42,560 --> 00:16:44,959
it's typical that this is not using

542
00:16:44,959 --> 00:16:47,440
web-based protocols like web authen or

543
00:16:47,440 --> 00:16:50,000
fido or some of these newer protocols

544
00:16:50,000 --> 00:16:52,959
that we've talked about previously

545
00:16:52,959 --> 00:16:54,480
there's also options like user

546
00:16:54,480 --> 00:16:56,800
certificates but in the end most of our

547
00:16:56,800 --> 00:16:58,959
customers end up using what the defaults

548
00:16:58,959 --> 00:17:00,880
are in their distributions and so really

549
00:17:00,880 --> 00:17:02,880
commonly that's public key private key

550
00:17:02,880 --> 00:17:05,599
and in some case passwords so not very

551
00:17:05,599 --> 00:17:07,919
cloud oriented credentials not very zero

552
00:17:07,919 --> 00:17:10,240
trust oriented credentials

553
00:17:10,240 --> 00:17:12,319
so most linux distros like i said out of

554
00:17:12,319 --> 00:17:15,599
the box assume either password or key

555
00:17:15,599 --> 00:17:18,000
and you can see here in the upper right

556
00:17:18,000 --> 00:17:19,599
we have password authentication where

557
00:17:19,599 --> 00:17:21,199
i'm just sending my credentials over the

558
00:17:21,199 --> 00:17:22,959
wire to the linux server and in the

559
00:17:22,959 --> 00:17:24,720
lower right you can see i have a private

560
00:17:24,720 --> 00:17:27,439
key that's stored on my workstation and

561
00:17:27,439 --> 00:17:29,039
i use that private key to access the

562
00:17:29,039 --> 00:17:30,799
server instead so it's a little bit more

563
00:17:30,799 --> 00:17:33,120
secure but it still has a lot of

564
00:17:33,120 --> 00:17:35,520
management overhead so what we found is

565
00:17:35,520 --> 00:17:37,600
that customers really struggle with some

566
00:17:37,600 --> 00:17:39,360
of that management if you have if you're

567
00:17:39,360 --> 00:17:41,360
using ldap you have to manage the ldap

568
00:17:41,360 --> 00:17:43,440
system like active directory forest

569
00:17:43,440 --> 00:17:45,679
radius infrastructure whatever tooling

570
00:17:45,679 --> 00:17:47,360
you're using to distribute

571
00:17:47,360 --> 00:17:49,679
public keys to machines

572
00:17:49,679 --> 00:17:52,080
pki if you're using user certificates

573
00:17:52,080 --> 00:17:54,080
and for a lot of organizations key

574
00:17:54,080 --> 00:17:56,240
revocation and being confident that your

575
00:17:56,240 --> 00:17:58,799
keys were revoked properly is very very

576
00:17:58,799 --> 00:18:00,559
difficult so if i have to do an

577
00:18:00,559 --> 00:18:02,960
emergency termination on a user how

578
00:18:02,960 --> 00:18:05,600
confident am i that they can't access

579
00:18:05,600 --> 00:18:07,200
some linux server in my environment

580
00:18:07,200 --> 00:18:08,640
using a private key that's still on the

581
00:18:08,640 --> 00:18:10,720
workstation in their possession in a lot

582
00:18:10,720 --> 00:18:12,799
of organizations the confidence level

583
00:18:12,799 --> 00:18:16,160
there is not super high

584
00:18:16,480 --> 00:18:18,080
again linux doesn't support web

585
00:18:18,080 --> 00:18:20,559
authentication or fido out of the box so

586
00:18:20,559 --> 00:18:22,000
there's really a lack of modern

587
00:18:22,000 --> 00:18:24,000
authentication options so this leads

588
00:18:24,000 --> 00:18:26,000
customers into those other defaults in

589
00:18:26,000 --> 00:18:28,799
the os so the weak passwords or the hard

590
00:18:28,799 --> 00:18:31,120
to manage keys and there's little to no

591
00:18:31,120 --> 00:18:33,919
device based control available so unlike

592
00:18:33,919 --> 00:18:35,440
with conditional access where we can

593
00:18:35,440 --> 00:18:37,039
validate every time the user is

594
00:18:37,039 --> 00:18:38,799
accessing something that their device is

595
00:18:38,799 --> 00:18:41,120
known in a healthy state for most

596
00:18:41,120 --> 00:18:42,640
customers they protect their linux

597
00:18:42,640 --> 00:18:44,880
server workloads with network-centric

598
00:18:44,880 --> 00:18:46,640
security so they might put a firewall

599
00:18:46,640 --> 00:18:48,000
around the network where all their linux

600
00:18:48,000 --> 00:18:49,919
servers exist and then if a user is

601
00:18:49,919 --> 00:18:51,039
through the firewall they could

602
00:18:51,039 --> 00:18:52,720
theoretically reach any of the linux

603
00:18:52,720 --> 00:18:54,240
servers so this is a little bit of an

604
00:18:54,240 --> 00:18:57,679
old-school approach like mark mentioned

605
00:18:57,679 --> 00:18:59,280
so we're going to try to solve some of

606
00:18:59,280 --> 00:19:01,520
this with azure id and here's how we're

607
00:19:01,520 --> 00:19:03,440
going to do it

608
00:19:03,440 --> 00:19:04,160
so

609
00:19:04,160 --> 00:19:05,600
just like accessing any other

610
00:19:05,600 --> 00:19:07,679
application a user might authenticate to

611
00:19:07,679 --> 00:19:09,360
azure id and we check their

612
00:19:09,360 --> 00:19:10,480
authorization

613
00:19:10,480 --> 00:19:11,919
so we might check to see if they have

614
00:19:11,919 --> 00:19:13,200
the appropriate role on the virtual

615
00:19:13,200 --> 00:19:15,039
machine uh the role that they they

616
00:19:15,039 --> 00:19:17,120
possess might be pim enabled so that we

617
00:19:17,120 --> 00:19:18,799
can force them to do a checkout on the

618
00:19:18,799 --> 00:19:20,799
virtual machine but if everything works

619
00:19:20,799 --> 00:19:22,480
out and they successfully pass all the

620
00:19:22,480 --> 00:19:24,240
conditional access policies and all the

621
00:19:24,240 --> 00:19:26,080
our back checks go correctly what

622
00:19:26,080 --> 00:19:27,760
they're going to get back in return is

623
00:19:27,760 --> 00:19:31,120
an open ssh certificate so just like in

624
00:19:31,120 --> 00:19:32,960
a different type of application like say

625
00:19:32,960 --> 00:19:34,720
exchange online where i might open an

626
00:19:34,720 --> 00:19:37,520
outlook client and outlook needs to go

627
00:19:37,520 --> 00:19:39,840
needs to go acquire an access token if

628
00:19:39,840 --> 00:19:42,080
i'm accessing a linux server i'm going

629
00:19:42,080 --> 00:19:44,640
to go acquire an open ssh certificate

630
00:19:44,640 --> 00:19:47,120
that is short-lived like an access token

631
00:19:47,120 --> 00:19:48,960
so sometimes we call this an ephemeral

632
00:19:48,960 --> 00:19:51,679
open ssh certificate so it's an open ssh

633
00:19:51,679 --> 00:19:53,840
certificate from azure id that's only

634
00:19:53,840 --> 00:19:56,320
good for an hour and that way if i need

635
00:19:56,320 --> 00:19:58,400
to do an emergency termination on the

636
00:19:58,400 --> 00:19:59,360
user

637
00:19:59,360 --> 00:20:01,600
and an hour passes they won't be able to

638
00:20:01,600 --> 00:20:03,120
access any of their linux servers

639
00:20:03,120 --> 00:20:04,640
anymore so it's

640
00:20:04,640 --> 00:20:06,799
bringing that short-lived token model

641
00:20:06,799 --> 00:20:09,200
that we have for web applications to

642
00:20:09,200 --> 00:20:12,000
linux server access via ssh

643
00:20:12,000 --> 00:20:13,840
and then once they are in possession of

644
00:20:13,840 --> 00:20:15,600
that open ssh certificate they can

645
00:20:15,600 --> 00:20:17,360
access vms that are running in azure

646
00:20:17,360 --> 00:20:19,360
this is a generally available feature

647
00:20:19,360 --> 00:20:20,880
and they can also access virtual

648
00:20:20,880 --> 00:20:23,360
machines that are running in aws gcp

649
00:20:23,360 --> 00:20:25,760
on-prem data centers basically anywhere

650
00:20:25,760 --> 00:20:27,600
else using an integration we have with a

651
00:20:27,600 --> 00:20:29,360
tool called azure arc which is a

652
00:20:29,360 --> 00:20:31,280
multi-cloud management tool that

653
00:20:31,280 --> 00:20:34,000
functionality is in public preview today

654
00:20:34,000 --> 00:20:36,080
and i'll talk in a little bit about how

655
00:20:36,080 --> 00:20:38,880
this actually works under the covers

656
00:20:38,880 --> 00:20:40,720
so before i get into the specifics let's

657
00:20:40,720 --> 00:20:42,240
talk about some of the prerequisites to

658
00:20:42,240 --> 00:20:44,720
make this work on the client side so my

659
00:20:44,720 --> 00:20:46,880
workstation where i'm initiating the ssh

660
00:20:46,880 --> 00:20:49,039
connection i need to have an open ssh

661
00:20:49,039 --> 00:20:51,679
client installed so by default on linux

662
00:20:51,679 --> 00:20:53,440
or mac os this is likely going to be

663
00:20:53,440 --> 00:20:55,039
there might need to install it on

664
00:20:55,039 --> 00:20:56,640
windows

665
00:20:56,640 --> 00:20:58,480
but basically any operating system that

666
00:20:58,480 --> 00:21:01,440
has an open ssh client on it can use

667
00:21:01,440 --> 00:21:03,919
this functionality so under the covers

668
00:21:03,919 --> 00:21:05,760
we're not doing anything different with

669
00:21:05,760 --> 00:21:08,960
ssh we're just using openssh like any

670
00:21:08,960 --> 00:21:11,440
other client might

671
00:21:11,440 --> 00:21:13,600
then we have a wrapper that sits on top

672
00:21:13,600 --> 00:21:16,000
of openssh that's provided by what a

673
00:21:16,000 --> 00:21:18,400
tool called azcli this is the azure

674
00:21:18,400 --> 00:21:20,480
command line interface tool that comes

675
00:21:20,480 --> 00:21:22,400
along with microsoft's off auth

676
00:21:22,400 --> 00:21:24,640
libraries it's highly recommended to use

677
00:21:24,640 --> 00:21:26,400
this tool it makes the user experience

678
00:21:26,400 --> 00:21:29,120
much much easier there are options for

679
00:21:29,120 --> 00:21:31,520
exporting certificates from azcli and

680
00:21:31,520 --> 00:21:32,720
then doing

681
00:21:32,720 --> 00:21:35,120
raw open ssh commands yourself but

682
00:21:35,120 --> 00:21:36,720
there's a lot of extra work involved in

683
00:21:36,720 --> 00:21:38,720
extra steps there so i recommend using

684
00:21:38,720 --> 00:21:40,799
azcli and i'll show you the commands for

685
00:21:40,799 --> 00:21:42,559
that in a little bit

686
00:21:42,559 --> 00:21:44,640
there's also an extension for azcli that

687
00:21:44,640 --> 00:21:47,039
you have to install one time

688
00:21:47,039 --> 00:21:48,799
you can run this on basically any client

689
00:21:48,799 --> 00:21:51,360
os so windows mac linux docker

690
00:21:51,360 --> 00:21:53,520
containers azure cloud shell

691
00:21:53,520 --> 00:21:55,520
basically anything again that supports

692
00:21:55,520 --> 00:21:58,559
openssh and azcli is going to work here

693
00:21:58,559 --> 00:21:59,919
and then the client has to be able to

694
00:21:59,919 --> 00:22:02,240
reach the vm so this is specific to vms

695
00:22:02,240 --> 00:22:04,159
that are in azure i will talk about some

696
00:22:04,159 --> 00:22:05,760
slightly different requirements for the

697
00:22:05,760 --> 00:22:08,000
azure arc vms in a little bit

698
00:22:08,000 --> 00:22:09,440
but basically you have to be able to

699
00:22:09,440 --> 00:22:11,919
reach the vm on port 22 so this might be

700
00:22:11,919 --> 00:22:13,120
over the internet although that's not

701
00:22:13,120 --> 00:22:15,280
really recommended it could be over a

702
00:22:15,280 --> 00:22:17,280
site-to-site vpn to your azure instance

703
00:22:17,280 --> 00:22:18,880
it could be through azure bastion which

704
00:22:18,880 --> 00:22:21,200
is a bastion host solution or you could

705
00:22:21,200 --> 00:22:22,799
just do it in a browser using azure

706
00:22:22,799 --> 00:22:26,000
cloud shell

707
00:22:26,000 --> 00:22:27,440
the server side there's a couple

708
00:22:27,440 --> 00:22:29,440
prerequisites as well you have to have a

709
00:22:29,440 --> 00:22:31,039
linux server running in azure for the

710
00:22:31,039 --> 00:22:33,520
azure specific feature uh the linux

711
00:22:33,520 --> 00:22:35,039
server has to be running a supported

712
00:22:35,039 --> 00:22:37,360
distro so on our docs page we maintain a

713
00:22:37,360 --> 00:22:38,799
list of the distributions that we

714
00:22:38,799 --> 00:22:40,720
support on the server side

715
00:22:40,720 --> 00:22:42,640
again we're using openssh under the

716
00:22:42,640 --> 00:22:44,880
covers so openssh server has to be

717
00:22:44,880 --> 00:22:45,919
present

718
00:22:45,919 --> 00:22:47,360
and then the linux server has to be able

719
00:22:47,360 --> 00:22:49,760
to reach a few specific endpoints so one

720
00:22:49,760 --> 00:22:50,600
is

721
00:22:50,600 --> 00:22:52,240
packages.microsoft.com which is where

722
00:22:52,240 --> 00:22:54,720
you install the linux installer from or

723
00:22:54,720 --> 00:22:57,039
some server-side components from so

724
00:22:57,039 --> 00:22:58,799
that's just a standard package repo for

725
00:22:58,799 --> 00:22:59,440
us

726
00:22:59,440 --> 00:23:01,840
this 169 ip address which is the azure

727
00:23:01,840 --> 00:23:03,679
instance metadata service this is a

728
00:23:03,679 --> 00:23:05,440
service running on the host machine and

729
00:23:05,440 --> 00:23:07,120
azure that facilitates some

730
00:23:07,120 --> 00:23:08,960
functionality that has to be able to

731
00:23:08,960 --> 00:23:13,120
reach azure ad as well as azure are back

732
00:23:13,120 --> 00:23:15,600
finally the linux server needs to have a

733
00:23:15,600 --> 00:23:17,440
what's called a system assigned managed

734
00:23:17,440 --> 00:23:19,520
identity this gives the server a

735
00:23:19,520 --> 00:23:22,000
representation in the azure id directory

736
00:23:22,000 --> 00:23:23,760
so this is basically the resource that

737
00:23:23,760 --> 00:23:26,000
the user is going to be asked asking to

738
00:23:26,000 --> 00:23:28,080
access when they request their open ssh

739
00:23:28,080 --> 00:23:30,320
certificate so this is tied to the vm

740
00:23:30,320 --> 00:23:32,240
itself and then there's also an

741
00:23:32,240 --> 00:23:33,600
extension that has to be installed on

742
00:23:33,600 --> 00:23:35,200
the vm when you

743
00:23:35,200 --> 00:23:38,880
add the system assign managed identity

744
00:23:38,880 --> 00:23:40,799
so let's walk through how this actually

745
00:23:40,799 --> 00:23:42,159
works visually

746
00:23:42,159 --> 00:23:44,159
so again first component that we need to

747
00:23:44,159 --> 00:23:46,159
install is the extension software on the

748
00:23:46,159 --> 00:23:47,919
virtual machine itself so there's things

749
00:23:47,919 --> 00:23:51,039
in here like a pam module cert handler

750
00:23:51,039 --> 00:23:52,720
then we go and install our client-side

751
00:23:52,720 --> 00:23:55,520
components so we have azcli

752
00:23:55,520 --> 00:23:57,840
along with the ssh extension for it and

753
00:23:57,840 --> 00:23:59,679
that comes bundled with the microsoft

754
00:23:59,679 --> 00:24:02,320
authentication library

755
00:24:02,320 --> 00:24:04,880
then when i'm when i the end user want

756
00:24:04,880 --> 00:24:07,120
to initiate my connection to the vm i

757
00:24:07,120 --> 00:24:09,679
issue a command in azcli and that

758
00:24:09,679 --> 00:24:13,200
triggers the azcli to use m cell the

759
00:24:13,200 --> 00:24:15,279
authentic authentication library to go

760
00:24:15,279 --> 00:24:17,279
ask azure ad for one of these

761
00:24:17,279 --> 00:24:20,000
short-lived ephemeral one-hour ssh

762
00:24:20,000 --> 00:24:22,159
certificates at this point conditional

763
00:24:22,159 --> 00:24:24,720
access applies uh any controls need to

764
00:24:24,720 --> 00:24:26,720
be satisfied like am i on a compliant

765
00:24:26,720 --> 00:24:29,120
device have i done an mfa

766
00:24:29,120 --> 00:24:31,520
et cetera et cetera so conditional axis

767
00:24:31,520 --> 00:24:33,039
is in the mix here and we can apply

768
00:24:33,039 --> 00:24:35,760
those zero trust policies and if i pass

769
00:24:35,760 --> 00:24:38,559
all those checks then i get my ephemeral

770
00:24:38,559 --> 00:24:41,039
ssh returned so this is basically a one

771
00:24:41,039 --> 00:24:43,840
hour access token

772
00:24:43,840 --> 00:24:44,880
then

773
00:24:44,880 --> 00:24:47,679
what happens next is my openssh client

774
00:24:47,679 --> 00:24:50,480
is used by azcli to try to initiate a

775
00:24:50,480 --> 00:24:51,760
connection to the server that i

776
00:24:51,760 --> 00:24:54,240
specified and so the cert is passed as

777
00:24:54,240 --> 00:24:56,080
part of that authentication to the

778
00:24:56,080 --> 00:24:58,480
openssh server

779
00:24:58,480 --> 00:25:01,279
at that point the openssh server module

780
00:25:01,279 --> 00:25:03,760
passes the cert to the

781
00:25:03,760 --> 00:25:05,200
components that we installed on the

782
00:25:05,200 --> 00:25:07,440
server and we check with azure id to

783
00:25:07,440 --> 00:25:09,200
make sure that search is valid so we

784
00:25:09,200 --> 00:25:10,400
want to make sure it's not a forged

785
00:25:10,400 --> 00:25:11,919
certificate we want to make sure it's

786
00:25:11,919 --> 00:25:13,919
issued by the correct tenant it has the

787
00:25:13,919 --> 00:25:15,600
right information in it we just

788
00:25:15,600 --> 00:25:16,880
basically want to make sure that this is

789
00:25:16,880 --> 00:25:18,480
a legitimate certificate and not

790
00:25:18,480 --> 00:25:20,000
something forged we would do this with

791
00:25:20,000 --> 00:25:21,440
an access token for any other

792
00:25:21,440 --> 00:25:22,559
application

793
00:25:22,559 --> 00:25:24,880
and the azure instance metadata service

794
00:25:24,880 --> 00:25:26,720
running on the azure host is used to

795
00:25:26,720 --> 00:25:28,720
facilitate this

796
00:25:28,720 --> 00:25:31,120
in addition we also check the are back

797
00:25:31,120 --> 00:25:33,120
roles so there's two are back roles that

798
00:25:33,120 --> 00:25:35,840
we support today in azure are back one

799
00:25:35,840 --> 00:25:37,279
is the virtual machine administrator

800
00:25:37,279 --> 00:25:39,200
login role which gives you pseudo rights

801
00:25:39,200 --> 00:25:41,039
on the vm and the other is the virtual

802
00:25:41,039 --> 00:25:43,039
machine user login role which does not

803
00:25:43,039 --> 00:25:44,640
give you pseudo rights on the vr and

804
00:25:44,640 --> 00:25:45,919
these are the only two that we have

805
00:25:45,919 --> 00:25:47,919
today

806
00:25:47,919 --> 00:25:49,760
if i have the appropriate r back role

807
00:25:49,760 --> 00:25:51,760
and my certificate is legitimate then i

808
00:25:51,760 --> 00:25:54,320
get my ssh tunnel and finally i am

809
00:25:54,320 --> 00:25:56,240
connected so at this point i have signed

810
00:25:56,240 --> 00:25:58,400
into my vm with azure id and i've

811
00:25:58,400 --> 00:26:00,799
protected that ssh access using

812
00:26:00,799 --> 00:26:02,960
conditional access and my zero trust

813
00:26:02,960 --> 00:26:05,440
policies

814
00:26:06,799 --> 00:26:08,640
so now i want to talk about

815
00:26:08,640 --> 00:26:10,240
servers that are running outside of

816
00:26:10,240 --> 00:26:12,880
azure so those azure arc vms so i'm

817
00:26:12,880 --> 00:26:14,400
going to just focus on the bolted items

818
00:26:14,400 --> 00:26:16,720
here so the first requirement that's

819
00:26:16,720 --> 00:26:19,039
different for the azure arc machines is

820
00:26:19,039 --> 00:26:20,799
that the linux server must be onboarded

821
00:26:20,799 --> 00:26:22,799
to azure arc and have the azure arc

822
00:26:22,799 --> 00:26:24,960
service in a running and connected state

823
00:26:24,960 --> 00:26:27,760
so basically if i have my vm in aws or

824
00:26:27,760 --> 00:26:29,919
on-prem it needs to have the azure arc

825
00:26:29,919 --> 00:26:31,440
service on it and it needs to be

826
00:26:31,440 --> 00:26:33,520
connected to your azure tenant and in a

827
00:26:33,520 --> 00:26:36,080
connected state so all the underlying

828
00:26:36,080 --> 00:26:38,400
infrastructure needs to be healthy

829
00:26:38,400 --> 00:26:40,000
and then from a networking perspective

830
00:26:40,000 --> 00:26:41,919
there's a slight difference

831
00:26:41,919 --> 00:26:43,760
we have to configure the linux server to

832
00:26:43,760 --> 00:26:46,720
allow inbound connections on the ssh

833
00:26:46,720 --> 00:26:49,440
port in the arc configuration this is an

834
00:26:49,440 --> 00:26:52,159
arc specific config so in the arc config

835
00:26:52,159 --> 00:26:53,600
you say here are the ports that i want

836
00:26:53,600 --> 00:26:55,919
to publish through arc and then this is

837
00:26:55,919 --> 00:26:57,200
different than your firewall

838
00:26:57,200 --> 00:26:58,880
configuration on the device and i will

839
00:26:58,880 --> 00:27:00,559
show you what this means in a second

840
00:27:00,559 --> 00:27:02,799
visually

841
00:27:02,799 --> 00:27:04,559
so let's step through this again for a

842
00:27:04,559 --> 00:27:06,400
machine running somewhere else outside

843
00:27:06,400 --> 00:27:08,720
of azure so this could be on-prem aws

844
00:27:08,720 --> 00:27:11,360
gcp it doesn't matter

845
00:27:11,360 --> 00:27:13,840
so we installed the azure arc service

846
00:27:13,840 --> 00:27:15,520
first and this gets into a connected

847
00:27:15,520 --> 00:27:18,159
state with the azure arc cloud service

848
00:27:18,159 --> 00:27:19,679
so at this point our machine that's

849
00:27:19,679 --> 00:27:21,840
running outside of azure is connected to

850
00:27:21,840 --> 00:27:24,080
the azure management control plane

851
00:27:24,080 --> 00:27:25,840
we install our server extension just

852
00:27:25,840 --> 00:27:27,679
like before we install our client

853
00:27:27,679 --> 00:27:29,919
extension just like before and then my

854
00:27:29,919 --> 00:27:32,159
user tries to initiate a connection and

855
00:27:32,159 --> 00:27:33,919
just like before they run the exact same

856
00:27:33,919 --> 00:27:36,000
command and m cell tries to go get a

857
00:27:36,000 --> 00:27:38,240
certificate conditional access policies

858
00:27:38,240 --> 00:27:40,559
apply we can check for all of the things

859
00:27:40,559 --> 00:27:42,960
that we want like compliant device mfa

860
00:27:42,960 --> 00:27:44,720
etc

861
00:27:44,720 --> 00:27:46,799
next we get our ephemeral ssh

862
00:27:46,799 --> 00:27:48,480
certificate back

863
00:27:48,480 --> 00:27:51,200
and this time the ssh cert is actually

864
00:27:51,200 --> 00:27:53,440
passed to the azure art cloud service

865
00:27:53,440 --> 00:27:55,679
which can relay that traffic to the

866
00:27:55,679 --> 00:27:57,200
server that's running outside of your

867
00:27:57,200 --> 00:27:59,679
data or outside of your azure tenant

868
00:27:59,679 --> 00:28:01,760
so this is the fundamental difference

869
00:28:01,760 --> 00:28:03,200
from a networking perspective with the

870
00:28:03,200 --> 00:28:05,120
azure arc implementation which is that

871
00:28:05,120 --> 00:28:06,960
the user does not actually need direct

872
00:28:06,960 --> 00:28:08,720
line of sight to that machine so if i'm

873
00:28:08,720 --> 00:28:10,559
working remotely and i want to access

874
00:28:10,559 --> 00:28:12,080
something that's in my on-prem data

875
00:28:12,080 --> 00:28:13,919
center that traffic can be relayed

876
00:28:13,919 --> 00:28:16,480
through the azure arc service if we want

877
00:28:16,480 --> 00:28:18,399
so just like before we need to check and

878
00:28:18,399 --> 00:28:19,600
make sure that it's a legitimate

879
00:28:19,600 --> 00:28:21,520
certificate so we validate with our

880
00:28:21,520 --> 00:28:24,240
azure id tenant that it's good

881
00:28:24,240 --> 00:28:26,000
then we check the rbac rules no

882
00:28:26,000 --> 00:28:28,159
difference here same are back rules and

883
00:28:28,159 --> 00:28:30,640
then finally when i want when everything

884
00:28:30,640 --> 00:28:32,880
is in alignment and i get my connection

885
00:28:32,880 --> 00:28:35,039
that ssh connection is relayed through

886
00:28:35,039 --> 00:28:37,200
the azure arc service so again no line

887
00:28:37,200 --> 00:28:39,520
of sight required if we don't want it in

888
00:28:39,520 --> 00:28:43,039
order to use this functionality

889
00:28:43,600 --> 00:28:45,360
so in order to

890
00:28:45,360 --> 00:28:47,279
uh instantiate one of these connections

891
00:28:47,279 --> 00:28:48,640
we have to do a couple things so if

892
00:28:48,640 --> 00:28:50,399
we're using azcli the first thing we're

893
00:28:50,399 --> 00:28:52,880
going to do is run az login at this

894
00:28:52,880 --> 00:28:54,640
point we're just connecting to the azure

895
00:28:54,640 --> 00:28:56,159
tenant we're not doing anything specific

896
00:28:56,159 --> 00:28:58,960
to ssh into the vm any conditional

897
00:28:58,960 --> 00:29:00,880
access of policies that apply to the

898
00:29:00,880 --> 00:29:02,960
azure management cloud app will apply at

899
00:29:02,960 --> 00:29:04,799
this stage if you have multiple

900
00:29:04,799 --> 00:29:07,039
subscriptions you may also set the

901
00:29:07,039 --> 00:29:08,559
context of which subscription you want

902
00:29:08,559 --> 00:29:10,240
to be operating in so you would run a z

903
00:29:10,240 --> 00:29:13,679
account set and specify the subscription

904
00:29:13,679 --> 00:29:14,640
then

905
00:29:14,640 --> 00:29:17,679
you're going to run the azsh vm command

906
00:29:17,679 --> 00:29:19,200
and you can either specify the iap

907
00:29:19,200 --> 00:29:20,960
address or the name of the vm in the

908
00:29:20,960 --> 00:29:22,799
resource group if you don't care about

909
00:29:22,799 --> 00:29:24,240
the ip address and will just

910
00:29:24,240 --> 00:29:26,480
automatically resolve it for you

911
00:29:26,480 --> 00:29:28,240
at this point any conditional access

912
00:29:28,240 --> 00:29:30,240
policies that apply to the azure linux

913
00:29:30,240 --> 00:29:33,120
vm sign in cloud app will trigger

914
00:29:33,120 --> 00:29:34,799
so if you haven't satisfied any of the

915
00:29:34,799 --> 00:29:37,039
policies already when you're on azlogin

916
00:29:37,039 --> 00:29:38,559
we'll make you satisfy any of those

917
00:29:38,559 --> 00:29:40,480
additional controls at this point

918
00:29:40,480 --> 00:29:42,240
however if the controls are the same if

919
00:29:42,240 --> 00:29:44,559
the az login controls already apply

920
00:29:44,559 --> 00:29:46,880
things like device compliance and mfa

921
00:29:46,880 --> 00:29:48,960
you'll already have a session with those

922
00:29:48,960 --> 00:29:51,120
those controls satisfied and therefore

923
00:29:51,120 --> 00:29:53,440
we won't need to trigger an interactive

924
00:29:53,440 --> 00:29:55,200
authentication for the end user at that

925
00:29:55,200 --> 00:29:56,480
point

926
00:29:56,480 --> 00:29:58,480
this works the same for both vms that

927
00:29:58,480 --> 00:30:00,559
are running in azure as well as outside

928
00:30:00,559 --> 00:30:02,480
of azure from an end user perspective

929
00:30:02,480 --> 00:30:04,799
who's connecting to my vms i do not care

930
00:30:04,799 --> 00:30:06,480
about the underlying infrastructure the

931
00:30:06,480 --> 00:30:08,640
commands are exactly the same for me

932
00:30:08,640 --> 00:30:11,360
regardless of which type of vm i'm

933
00:30:11,360 --> 00:30:13,039
actually connecting to

934
00:30:13,039 --> 00:30:14,399
and with that i'm going to turn it back

935
00:30:14,399 --> 00:30:15,840
to mark to talk a little bit about what

936
00:30:15,840 --> 00:30:18,320
we can do for macs on the client side

937
00:30:18,320 --> 00:30:19,679
that's super cool that's really nice for

938
00:30:19,679 --> 00:30:21,679
the admin so okay let's talk about uh

939
00:30:21,679 --> 00:30:23,760
the client aspect of this so before we

940
00:30:23,760 --> 00:30:25,840
get into the mac specific stuff there

941
00:30:25,840 --> 00:30:27,600
are two critical capabilities that we're

942
00:30:27,600 --> 00:30:29,919
gonna want from any client os the first

943
00:30:29,919 --> 00:30:32,000
is ability to do device health

944
00:30:32,000 --> 00:30:34,000
attestation so on windows we have two

945
00:30:34,000 --> 00:30:36,399
choices here we have mdm compliance

946
00:30:36,399 --> 00:30:38,000
and if we splint a little bit we have

947
00:30:38,000 --> 00:30:39,919
hybrid azure ad join which basically

948
00:30:39,919 --> 00:30:42,399
tells us the device is doing joined to

949
00:30:42,399 --> 00:30:43,919
an active directory there's group

950
00:30:43,919 --> 00:30:45,520
policies being applied to it so it's got

951
00:30:45,520 --> 00:30:46,880
some light management there but we

952
00:30:46,880 --> 00:30:48,640
really should be moving more to a device

953
00:30:48,640 --> 00:30:50,000
compliance which actually tells us the

954
00:30:50,000 --> 00:30:52,960
health of the device now everything else

955
00:30:52,960 --> 00:30:54,960
only has one option which is mdm

956
00:30:54,960 --> 00:30:56,799
compliance there is no other good way

957
00:30:56,799 --> 00:30:59,200
for azure id to tell the the state of

958
00:30:59,200 --> 00:31:01,519
the device is in a good state or not and

959
00:31:01,519 --> 00:31:03,120
this is becoming more and more critical

960
00:31:03,120 --> 00:31:05,120
as customers that drop adopt those zero

961
00:31:05,120 --> 00:31:06,720
trust policies and principles and we're

962
00:31:06,720 --> 00:31:08,480
starting to see customers move those

963
00:31:08,480 --> 00:31:10,399
conditional access policies from saying

964
00:31:10,399 --> 00:31:13,120
you either have to do mfa or come from a

965
00:31:13,120 --> 00:31:14,880
compliant device to saying that you have

966
00:31:14,880 --> 00:31:17,200
to do mfa from identity perspective

967
00:31:17,200 --> 00:31:18,640
and you have to come from a compliant

968
00:31:18,640 --> 00:31:19,760
device and we're starting to include

969
00:31:19,760 --> 00:31:22,000
that device identity in that requirement

970
00:31:22,000 --> 00:31:23,120
that's really good from a zero trust

971
00:31:23,120 --> 00:31:24,320
perspective so if you haven't started

972
00:31:24,320 --> 00:31:26,320
moving your devices to mdmanage and that

973
00:31:26,320 --> 00:31:28,960
type of thing you really need to start

974
00:31:28,960 --> 00:31:30,960
the next thing here is we want to get

975
00:31:30,960 --> 00:31:33,120
single sign-on as much as we can i

976
00:31:33,120 --> 00:31:34,720
talked about earlier prompting our users

977
00:31:34,720 --> 00:31:36,000
too much is bad from a security

978
00:31:36,000 --> 00:31:38,080
perspective it's bad from a

979
00:31:38,080 --> 00:31:39,600
usability perspective so the user

980
00:31:39,600 --> 00:31:41,279
experience and security go hand in hand

981
00:31:41,279 --> 00:31:42,960
here we want to try to get as much

982
00:31:42,960 --> 00:31:44,960
single sign-on for our client devices as

983
00:31:44,960 --> 00:31:47,120
we can alright so let's talk about now

984
00:31:47,120 --> 00:31:48,720
what are some of the max specific things

985
00:31:48,720 --> 00:31:50,640
that we want to do so first we're going

986
00:31:50,640 --> 00:31:52,559
to want to enroll our macs in an mdm so

987
00:31:52,559 --> 00:31:53,760
we can start to get that device

988
00:31:53,760 --> 00:31:55,840
compliance now a key thing to know here

989
00:31:55,840 --> 00:31:57,360
is that some of the

990
00:31:57,360 --> 00:31:58,960
single sign-on settings you're going to

991
00:31:58,960 --> 00:32:00,799
want to also configure are going to

992
00:32:00,799 --> 00:32:03,760
require you to be in an uh you require

993
00:32:03,760 --> 00:32:06,159
you to come from an mdm now i want to be

994
00:32:06,159 --> 00:32:07,840
clear there's two separate aspects of

995
00:32:07,840 --> 00:32:09,840
this there's the conditional access from

996
00:32:09,840 --> 00:32:11,919
the device compliance piece from mdm and

997
00:32:11,919 --> 00:32:13,519
there's the single sign-on aspect which

998
00:32:13,519 --> 00:32:15,039
you know reduces your prompts gets a

999
00:32:15,039 --> 00:32:17,120
better end user experience these are

1000
00:32:17,120 --> 00:32:19,600
different features but they are related

1001
00:32:19,600 --> 00:32:21,760
so we recommend you deploy both but you

1002
00:32:21,760 --> 00:32:23,679
can as an mdn you can only deploy the

1003
00:32:23,679 --> 00:32:25,440
device compliance aspect and you build

1004
00:32:25,440 --> 00:32:27,039
past those conditional access policies

1005
00:32:27,039 --> 00:32:28,960
and not do single sign-on you can also

1006
00:32:28,960 --> 00:32:30,480
just deploy the single sign-on features

1007
00:32:30,480 --> 00:32:31,919
for mac os and not do the device

1008
00:32:31,919 --> 00:32:33,600
compliance if you don't want to but we

1009
00:32:33,600 --> 00:32:35,919
really recommend that you do both okay

1010
00:32:35,919 --> 00:32:37,840
so what are the mdms we can use to start

1011
00:32:37,840 --> 00:32:39,840
enrolling in device compliance so first

1012
00:32:39,840 --> 00:32:42,799
you can use intune or if you

1013
00:32:42,799 --> 00:32:44,960
are not using intune you can use an mdm

1014
00:32:44,960 --> 00:32:46,320
that integrates with intune so we're

1015
00:32:46,320 --> 00:32:47,919
able to get that device compliance to

1016
00:32:47,919 --> 00:32:50,320
azure id they publish this list here the

1017
00:32:50,320 --> 00:32:51,840
most common ones we see with customers

1018
00:32:51,840 --> 00:32:53,360
if you're not using intune is something

1019
00:32:53,360 --> 00:32:55,919
like jam pro or vmware workspace one and

1020
00:32:55,919 --> 00:32:57,279
this is really really important because

1021
00:32:57,279 --> 00:32:58,640
this will allow us to pass those

1022
00:32:58,640 --> 00:33:00,960
device-based conditional access policies

1023
00:33:00,960 --> 00:33:03,360
and if we don't do this remember azure

1024
00:33:03,360 --> 00:33:05,679
id is going to see all of these devices

1025
00:33:05,679 --> 00:33:07,679
as unmanaged so if we have stricter

1026
00:33:07,679 --> 00:33:09,039
conditional access policies being

1027
00:33:09,039 --> 00:33:11,279
applied all of our men of our corporate

1028
00:33:11,279 --> 00:33:12,960
max are going to fall into those

1029
00:33:12,960 --> 00:33:14,399
policies so we want to start moving our

1030
00:33:14,399 --> 00:33:16,720
corporate max from unmanaged to managed

1031
00:33:16,720 --> 00:33:18,799
and managed to compliant so let's take a

1032
00:33:18,799 --> 00:33:20,240
look at what that means to get to a

1033
00:33:20,240 --> 00:33:21,919
compliant device

1034
00:33:21,919 --> 00:33:24,480
so if intune is your mdm this is pretty

1035
00:33:24,480 --> 00:33:26,240
straightforward intune knows about azure

1036
00:33:26,240 --> 00:33:28,880
id azurity knows about intune in in tune

1037
00:33:28,880 --> 00:33:30,320
you will configure those device

1038
00:33:30,320 --> 00:33:32,320
compliance policies that device will

1039
00:33:32,320 --> 00:33:34,240
report its status back up to intune and

1040
00:33:34,240 --> 00:33:36,080
the intune service will write the is

1041
00:33:36,080 --> 00:33:38,159
compliant true or false attribute on the

1042
00:33:38,159 --> 00:33:40,559
device object and azure id recall

1043
00:33:40,559 --> 00:33:42,320
earlier we showed you that sign in event

1044
00:33:42,320 --> 00:33:43,679
where michael is trying to log into the

1045
00:33:43,679 --> 00:33:46,000
azure portal and the is compliant flag

1046
00:33:46,000 --> 00:33:47,679
was set to false that is being

1047
00:33:47,679 --> 00:33:50,399
controlled via intune if intune is not

1048
00:33:50,399 --> 00:33:51,840
your mdm provider so let's say you're

1049
00:33:51,840 --> 00:33:53,519
using something like jamf pro or that

1050
00:33:53,519 --> 00:33:55,200
airwatch it's going to follow a very

1051
00:33:55,200 --> 00:33:56,480
very similar pattern you're going to

1052
00:33:56,480 --> 00:33:58,159
have your compliance settings set in

1053
00:33:58,159 --> 00:34:00,320
that mdm provider like jam pro and

1054
00:34:00,320 --> 00:34:01,200
you're going to have to do a little bit

1055
00:34:01,200 --> 00:34:03,279
of work to hook it up to that in tune

1056
00:34:03,279 --> 00:34:04,960
service it will message over that device

1057
00:34:04,960 --> 00:34:07,200
compliance to intune and then once again

1058
00:34:07,200 --> 00:34:09,119
the intune service will then write to

1059
00:34:09,119 --> 00:34:11,040
that attribute on the device object is

1060
00:34:11,040 --> 00:34:12,639
compliant or not so it's a little bit of

1061
00:34:12,639 --> 00:34:14,320
extra work but we feel like this is

1062
00:34:14,320 --> 00:34:16,079
really really worth it because it really

1063
00:34:16,079 --> 00:34:17,440
allows you to pass those conditional

1064
00:34:17,440 --> 00:34:19,199
access policies we know that the device

1065
00:34:19,199 --> 00:34:20,879
is in a healthy state so we really

1066
00:34:20,879 --> 00:34:22,239
recommend that you do this if you're not

1067
00:34:22,239 --> 00:34:23,918
using intune you do the extra work and

1068
00:34:23,918 --> 00:34:26,480
you connect it up to the intune service

1069
00:34:26,480 --> 00:34:28,560
okay so let's now talk about single

1070
00:34:28,560 --> 00:34:30,480
sign-on so on the mac there are a few

1071
00:34:30,480 --> 00:34:31,760
different ways you can do single sign

1072
00:34:31,760 --> 00:34:33,119
that's when you've been using macs for a

1073
00:34:33,119 --> 00:34:35,040
while you may be familiar with the bind

1074
00:34:35,040 --> 00:34:36,639
method so this is where we bind it to an

1075
00:34:36,639 --> 00:34:38,560
ldap directory so commonly this is going

1076
00:34:38,560 --> 00:34:40,719
to be active directory and this allows

1077
00:34:40,719 --> 00:34:42,399
us to get kerberos tickets and do single

1078
00:34:42,399 --> 00:34:44,719
sign-on to those kerberos resources

1079
00:34:44,719 --> 00:34:46,159
if this is what you're doing today

1080
00:34:46,159 --> 00:34:48,000
beware that apple is actively telling

1081
00:34:48,000 --> 00:34:49,599
customers to move away from this they're

1082
00:34:49,599 --> 00:34:50,800
telling you to move to the next one

1083
00:34:50,800 --> 00:34:53,119
which is the apple kerberos sso

1084
00:34:53,119 --> 00:34:55,359
extension it works in a very similar way

1085
00:34:55,359 --> 00:34:58,000
but you have to deploy this via an mdm

1086
00:34:58,000 --> 00:34:59,520
and again just a reminder here this is

1087
00:34:59,520 --> 00:35:01,359
for kerberos based authentication so

1088
00:35:01,359 --> 00:35:02,960
this is mostly for those on-prem

1089
00:35:02,960 --> 00:35:04,720
resources it's not really designed for

1090
00:35:04,720 --> 00:35:06,000
those cloud apps we'll talk about that

1091
00:35:06,000 --> 00:35:08,079
here in a little bit why that is but if

1092
00:35:08,079 --> 00:35:09,760
you do have cloud apps you're going to

1093
00:35:09,760 --> 00:35:12,160
want to move to apple's extensible

1094
00:35:12,160 --> 00:35:14,880
enterprise sso framework i have to say

1095
00:35:14,880 --> 00:35:16,079
that multiple times during this

1096
00:35:16,079 --> 00:35:17,839
presentation i guarantee you i'm going

1097
00:35:17,839 --> 00:35:19,440
to mess that up in like a words out so

1098
00:35:19,440 --> 00:35:20,880
just know if i start stumbling i'm

1099
00:35:20,880 --> 00:35:22,560
probably talking about this but this

1100
00:35:22,560 --> 00:35:24,720
framework allows idps to create a

1101
00:35:24,720 --> 00:35:26,560
plug-in so they can get single sign-on

1102
00:35:26,560 --> 00:35:27,839
to those modern authentication

1103
00:35:27,839 --> 00:35:29,839
applications using tokens and i'll kind

1104
00:35:29,839 --> 00:35:30,960
of cover that here in a little bit so

1105
00:35:30,960 --> 00:35:32,079
what do you need to do this so first of

1106
00:35:32,079 --> 00:35:34,000
all you need an idp vendor that's us

1107
00:35:34,000 --> 00:35:35,839
that's azure id and you need to build

1108
00:35:35,839 --> 00:35:38,720
deploy that via mdm okay so let's talk

1109
00:35:38,720 --> 00:35:40,000
about here

1110
00:35:40,000 --> 00:35:42,560
how kerberos will actually work so if

1111
00:35:42,560 --> 00:35:44,800
you have applications that your users on

1112
00:35:44,800 --> 00:35:47,839
macs need to access that um that can do

1113
00:35:47,839 --> 00:35:49,520
kerberos you're going to want to deploy

1114
00:35:49,520 --> 00:35:51,599
the modern kerberos sso extension

1115
00:35:51,599 --> 00:35:53,440
through your mdm so we're going to walk

1116
00:35:53,440 --> 00:35:55,359
through how this works this is basically

1117
00:35:55,359 --> 00:35:56,960
just kerberos i'm going to play it a

1118
00:35:56,960 --> 00:35:58,240
little fast and loose because this is

1119
00:35:58,240 --> 00:36:00,079
not a deep dive into kerbos but you guys

1120
00:36:00,079 --> 00:36:01,839
will kind of know what i'm getting at so

1121
00:36:01,839 --> 00:36:03,119
first our user is going to enter their

1122
00:36:03,119 --> 00:36:04,480
username and password they have a very

1123
00:36:04,480 --> 00:36:06,000
strong password you can see their summer

1124
00:36:06,000 --> 00:36:08,640
2022 exclamation point that is going to

1125
00:36:08,640 --> 00:36:10,560
get sent over to active directory and if

1126
00:36:10,560 --> 00:36:12,160
the credentials are valid we're going to

1127
00:36:12,160 --> 00:36:14,079
get the kerberos ticket granting ticket

1128
00:36:14,079 --> 00:36:15,599
and that's going to get sent back to

1129
00:36:15,599 --> 00:36:16,800
that device

1130
00:36:16,800 --> 00:36:18,160
now we're going to try to access some

1131
00:36:18,160 --> 00:36:20,000
sort of kerberos application this could

1132
00:36:20,000 --> 00:36:21,359
be a web application that does

1133
00:36:21,359 --> 00:36:22,640
integrated windows off it could be a

1134
00:36:22,640 --> 00:36:24,640
file share doesn't really matter we

1135
00:36:24,640 --> 00:36:26,240
don't have the right ticket now to get

1136
00:36:26,240 --> 00:36:27,280
access to that resource so we're going

1137
00:36:27,280 --> 00:36:29,520
to need to take that tgt and exchange it

1138
00:36:29,520 --> 00:36:31,359
for a tgs so let's walk through what

1139
00:36:31,359 --> 00:36:32,560
happens there so we're going to the

1140
00:36:32,560 --> 00:36:34,400
client's going to take that tgt

1141
00:36:34,400 --> 00:36:36,000
everything's valid it's going to

1142
00:36:36,000 --> 00:36:37,520
generate that tgs that we need to talk

1143
00:36:37,520 --> 00:36:39,520
to the application it gets sent back to

1144
00:36:39,520 --> 00:36:41,200
the client the client now sends it to

1145
00:36:41,200 --> 00:36:42,960
the application and you get single

1146
00:36:42,960 --> 00:36:44,160
signed on there so again this happens

1147
00:36:44,160 --> 00:36:46,400
all under the covers this is nothing new

1148
00:36:46,400 --> 00:36:47,839
or special here this is just kerberos

1149
00:36:47,839 --> 00:36:50,000
but if you have resources that are still

1150
00:36:50,000 --> 00:36:52,400
on-prem using kerose you want to deploy

1151
00:36:52,400 --> 00:36:54,320
the sso extension and you can validate

1152
00:36:54,320 --> 00:36:55,599
this is working if you open your

1153
00:36:55,599 --> 00:36:57,520
terminal window you use type k list you

1154
00:36:57,520 --> 00:37:00,160
can see here we have a curb tgt ticket

1155
00:37:00,160 --> 00:37:02,320
we can see here we also have a tgs for a

1156
00:37:02,320 --> 00:37:04,800
file share on a domain controller here

1157
00:37:04,800 --> 00:37:07,119
so that's it this is basic stuff

1158
00:37:07,119 --> 00:37:08,480
but let's talk about where this starts

1159
00:37:08,480 --> 00:37:10,400
to kind of maybe come apart so kerberos

1160
00:37:10,400 --> 00:37:12,400
works really really well when the

1161
00:37:12,400 --> 00:37:13,920
resource that we're trying to access the

1162
00:37:13,920 --> 00:37:15,599
user that's trying to access it and the

1163
00:37:15,599 --> 00:37:17,599
and the kerberos distribution center

1164
00:37:17,599 --> 00:37:19,280
which is our case here is going to be

1165
00:37:19,280 --> 00:37:21,440
active directory is all on the same

1166
00:37:21,440 --> 00:37:23,440
corporate network this doesn't work so

1167
00:37:23,440 --> 00:37:25,040
well when we're trying to get things

1168
00:37:25,040 --> 00:37:26,480
over the internet because kerberos

1169
00:37:26,480 --> 00:37:28,320
really wasn't designed for this so let's

1170
00:37:28,320 --> 00:37:29,839
kind of walk through what would happen

1171
00:37:29,839 --> 00:37:31,839
instead of having a kerberos application

1172
00:37:31,839 --> 00:37:34,240
we had a sas app that used kerberos

1173
00:37:34,240 --> 00:37:36,800
authentication so um the first thing is

1174
00:37:36,800 --> 00:37:38,720
we're going to need a way to have the

1175
00:37:38,720 --> 00:37:41,119
client talk to that domain controller to

1176
00:37:41,119 --> 00:37:44,880
get that curb tgt and that curb tgs and

1177
00:37:44,880 --> 00:37:47,119
uh your domain controllers should not be

1178
00:37:47,119 --> 00:37:48,720
on the internet so this is actually not

1179
00:37:48,720 --> 00:37:50,079
going to work now if you're sitting

1180
00:37:50,079 --> 00:37:51,920
there thinking to yourself uh what are

1181
00:37:51,920 --> 00:37:53,520
you talking about mark my dcs are on the

1182
00:37:53,520 --> 00:37:55,520
internet stop watching this video go

1183
00:37:55,520 --> 00:37:56,960
start your instant response problems

1184
00:37:56,960 --> 00:37:58,400
process because you have much bigger

1185
00:37:58,400 --> 00:37:59,599
problems in your environment than trying

1186
00:37:59,599 --> 00:38:00,960
to get these macs to get single sign

1187
00:38:00,960 --> 00:38:02,720
onto some cribros applications for

1188
00:38:02,720 --> 00:38:03,920
everyone that was nodding along you kind

1189
00:38:03,920 --> 00:38:05,040
of see where this is going right we

1190
00:38:05,040 --> 00:38:07,200
can't get that tgt we can't get that tgs

1191
00:38:07,200 --> 00:38:08,560
the only way that this would actually

1192
00:38:08,560 --> 00:38:11,599
work is that the client has a vpn set up

1193
00:38:11,599 --> 00:38:13,280
and is able to see that line of sight to

1194
00:38:13,280 --> 00:38:14,480
a domain controller we would then be

1195
00:38:14,480 --> 00:38:17,040
able to get the tgt and tgs the sas app

1196
00:38:17,040 --> 00:38:17,920
would also have to be bound to the

1197
00:38:17,920 --> 00:38:19,280
domain things like that so this is not

1198
00:38:19,280 --> 00:38:20,800
really going to work for sas apps so we

1199
00:38:20,800 --> 00:38:22,640
need to move to something different so

1200
00:38:22,640 --> 00:38:23,680
we're going to start moving our

1201
00:38:23,680 --> 00:38:25,359
applications here to modern

1202
00:38:25,359 --> 00:38:27,680
authentication so things like saml or

1203
00:38:27,680 --> 00:38:29,920
even better like open id connect and the

1204
00:38:29,920 --> 00:38:31,520
big difference we get here is this is

1205
00:38:31,520 --> 00:38:33,280
browser-based so we have those web

1206
00:38:33,280 --> 00:38:34,880
sign-in flows you may have seen it in

1207
00:38:34,880 --> 00:38:36,400
your browser here or maybe like the mini

1208
00:38:36,400 --> 00:38:38,160
browser and something like outlook and

1209
00:38:38,160 --> 00:38:40,000
this gives us a huge advantage of

1210
00:38:40,000 --> 00:38:41,599
defenders so we have much more things

1211
00:38:41,599 --> 00:38:43,680
now we can require to get access to

1212
00:38:43,680 --> 00:38:46,079
resources now we can say things like in

1213
00:38:46,079 --> 00:38:47,680
order to get access to this resource you

1214
00:38:47,680 --> 00:38:50,480
have to do mfa so authenticator app sms

1215
00:38:50,480 --> 00:38:51,920
code we can start to do things like

1216
00:38:51,920 --> 00:38:53,760
require password list credentials things

1217
00:38:53,760 --> 00:38:56,320
like fido we can challenge for smart

1218
00:38:56,320 --> 00:38:58,560
cards we can also start proxying that

1219
00:38:58,560 --> 00:39:00,160
traffic through something like a casby

1220
00:39:00,160 --> 00:39:01,920
solution so when the user starts to

1221
00:39:01,920 --> 00:39:04,320
download their entire customer list at

1222
00:39:04,320 --> 00:39:06,160
one in the morning we can stop that so

1223
00:39:06,160 --> 00:39:08,240
it gives us many more things from a

1224
00:39:08,240 --> 00:39:10,000
protective control but it also gives us

1225
00:39:10,000 --> 00:39:11,599
many more things from a detective

1226
00:39:11,599 --> 00:39:13,280
control because now we have more

1227
00:39:13,280 --> 00:39:14,640
information so to give you an example of

1228
00:39:14,640 --> 00:39:15,599
this

1229
00:39:15,599 --> 00:39:17,280
let's say in your environment you're

1230
00:39:17,280 --> 00:39:19,440
mostly windows 10 maybe you have some

1231
00:39:19,440 --> 00:39:21,599
windows 11 max and linux and now you

1232
00:39:21,599 --> 00:39:23,599
have somebody that logs in from a

1233
00:39:23,599 --> 00:39:26,400
windows 8 client so that means one or

1234
00:39:26,400 --> 00:39:28,240
two things is happening either that is

1235
00:39:28,240 --> 00:39:30,079
deep deep in a drawer somewhere that

1236
00:39:30,079 --> 00:39:31,040
they pulled out and we have a lot of

1237
00:39:31,040 --> 00:39:32,400
work to do to get that up to date or

1238
00:39:32,400 --> 00:39:34,079
that's somebody trying to masquerade as

1239
00:39:34,079 --> 00:39:36,000
something else to avoid security control

1240
00:39:36,000 --> 00:39:37,920
so that is super super helpful so as

1241
00:39:37,920 --> 00:39:39,760
defenders we want to start moving our

1242
00:39:39,760 --> 00:39:42,160
applications to modern authentication as

1243
00:39:42,160 --> 00:39:44,240
much as we can okay so let's talk about

1244
00:39:44,240 --> 00:39:46,400
modern authentication i'm going to go a

1245
00:39:46,400 --> 00:39:47,920
little quick through this

1246
00:39:47,920 --> 00:39:49,920
but that's okay because actually last

1247
00:39:49,920 --> 00:39:51,599
year at defcon blue team village we did

1248
00:39:51,599 --> 00:39:54,000
an entire 50-minute talk on modern auth

1249
00:39:54,000 --> 00:39:56,000
for the security admin if you go to ak

1250
00:39:56,000 --> 00:39:59,359
dot msl btv modern auth we cover how

1251
00:39:59,359 --> 00:40:01,119
does sam will work how does oauth and

1252
00:40:01,119 --> 00:40:03,359
open id connect work how those flows why

1253
00:40:03,359 --> 00:40:05,440
your users probably don't want to do rpc

1254
00:40:05,440 --> 00:40:07,520
flows why you want osha developers to be

1255
00:40:07,520 --> 00:40:08,480
using

1256
00:40:08,480 --> 00:40:09,839
rolling their own libraries a whole

1257
00:40:09,839 --> 00:40:11,040
bunch of stuff like that so that's all

1258
00:40:11,040 --> 00:40:12,480
covered here but from a mountain off

1259
00:40:12,480 --> 00:40:13,920
perspective we really want to have one

1260
00:40:13,920 --> 00:40:15,920
goal which is to prompt our user one

1261
00:40:15,920 --> 00:40:18,480
time per device really and really per

1262
00:40:18,480 --> 00:40:19,920
password change unless something changes

1263
00:40:19,920 --> 00:40:21,680
and we're going to do that by using a

1264
00:40:21,680 --> 00:40:24,079
few different types of tokens the first

1265
00:40:24,079 --> 00:40:25,599
type of token that we're going to use is

1266
00:40:25,599 --> 00:40:27,760
called the primary refresh token this

1267
00:40:27,760 --> 00:40:30,800
acts as a token broker on windows mac os

1268
00:40:30,800 --> 00:40:33,760
ios or android it's good for a rolling

1269
00:40:33,760 --> 00:40:36,079
14 day window so as long as your user is

1270
00:40:36,079 --> 00:40:37,760
continuing to use their device like here

1271
00:40:37,760 --> 00:40:39,920
their mac once every 14 days the token

1272
00:40:39,920 --> 00:40:41,280
will continue to get refreshed and

1273
00:40:41,280 --> 00:40:43,119
extended and if they go on a long

1274
00:40:43,119 --> 00:40:44,960
vacation greater than 14 days something

1275
00:40:44,960 --> 00:40:47,359
i think that all us blue teamers deserve

1276
00:40:47,359 --> 00:40:48,560
then when they come back you would

1277
00:40:48,560 --> 00:40:49,839
probably see that they need to

1278
00:40:49,839 --> 00:40:52,160
re-authenticate now this prt is going to

1279
00:40:52,160 --> 00:40:53,680
work with two other types of tokens here

1280
00:40:53,680 --> 00:40:55,920
the refresh token and the access token

1281
00:40:55,920 --> 00:40:58,079
the refresh token ties a user to an

1282
00:40:58,079 --> 00:40:59,119
application so you're gonna have a

1283
00:40:59,119 --> 00:41:00,880
refresh token for outlook you're gonna

1284
00:41:00,880 --> 00:41:03,200
have a refresh token for onedrive and

1285
00:41:03,200 --> 00:41:05,920
that refresh token is used to get access

1286
00:41:05,920 --> 00:41:07,520
tokens so if you attended our talk last

1287
00:41:07,520 --> 00:41:10,240
year this is that bearer token which is

1288
00:41:10,240 --> 00:41:12,000
kind of only referred to and that means

1289
00:41:12,000 --> 00:41:14,079
because whoever bears that token has the

1290
00:41:14,079 --> 00:41:16,560
access to that resource so these tokens

1291
00:41:16,560 --> 00:41:18,079
are short-lived they're usually only

1292
00:41:18,079 --> 00:41:19,200
good for an hour this is kind of what

1293
00:41:19,200 --> 00:41:20,880
michael talked about from those

1294
00:41:20,880 --> 00:41:22,640
uh those certificates that we get on the

1295
00:41:22,640 --> 00:41:24,079
ssh side

1296
00:41:24,079 --> 00:41:26,400
same thing and when those access tokens

1297
00:41:26,400 --> 00:41:28,720
expire the refresh token is used to get

1298
00:41:28,720 --> 00:41:30,079
another access token this is where

1299
00:41:30,079 --> 00:41:31,680
conditional access is evaluated if

1300
00:41:31,680 --> 00:41:33,040
they're able to pass those conditional

1301
00:41:33,040 --> 00:41:34,800
access policies then we get an

1302
00:41:34,800 --> 00:41:36,560
additional access token and that primary

1303
00:41:36,560 --> 00:41:39,680
refresh token acts as a token broker so

1304
00:41:39,680 --> 00:41:41,200
you'll get less prompts if we have a

1305
00:41:41,200 --> 00:41:43,599
primary refresh token on the device okay

1306
00:41:43,599 --> 00:41:45,359
so let's talk about now what do we need

1307
00:41:45,359 --> 00:41:47,040
to do from a single sign-on perspective

1308
00:41:47,040 --> 00:41:49,280
to get that uh

1309
00:41:49,280 --> 00:41:51,119
enterprise sso framework so i just i'd

1310
00:41:51,119 --> 00:41:52,240
messed it up there you know i'm talking

1311
00:41:52,240 --> 00:41:53,920
about that last one the very long one so

1312
00:41:53,920 --> 00:41:55,040
what do we need here so the first thing

1313
00:41:55,040 --> 00:41:56,720
we're going to need is we're going to

1314
00:41:56,720 --> 00:41:59,760
need an idp that supports saml or openid

1315
00:41:59,760 --> 00:42:02,480
connect azure id is microsoft's cloud

1316
00:42:02,480 --> 00:42:04,319
idp we support both of those but there's

1317
00:42:04,319 --> 00:42:05,440
lots of other vendors and they should

1318
00:42:05,440 --> 00:42:07,520
support those protocols too we're going

1319
00:42:07,520 --> 00:42:08,880
to need to have our apps that are

1320
00:42:08,880 --> 00:42:11,040
integrated with that idp

1321
00:42:11,040 --> 00:42:13,359
and we're also going to need to have the

1322
00:42:13,359 --> 00:42:15,920
idp vendor create that sso extension

1323
00:42:15,920 --> 00:42:17,839
plugin so that's us we've actually done

1324
00:42:17,839 --> 00:42:18,800
that and we'll walk through how that

1325
00:42:18,800 --> 00:42:20,560
works here in a second and the other

1326
00:42:20,560 --> 00:42:21,920
thing is you're going to need to have

1327
00:42:21,920 --> 00:42:23,760
this deployed via mdm and you're going

1328
00:42:23,760 --> 00:42:25,599
to see why here in a minute this is very

1329
00:42:25,599 --> 00:42:27,440
very powerful capability so you're going

1330
00:42:27,440 --> 00:42:30,240
to have to deploy this under an mdm okay

1331
00:42:30,240 --> 00:42:31,520
so let's talk about here how this

1332
00:42:31,520 --> 00:42:32,800
actually works under the cover so we're

1333
00:42:32,800 --> 00:42:34,079
going to have a few things we have our

1334
00:42:34,079 --> 00:42:35,839
app that does modern authentication so

1335
00:42:35,839 --> 00:42:37,520
we'll just say exchange online we're

1336
00:42:37,520 --> 00:42:39,440
going to have an idp that is going to

1337
00:42:39,440 --> 00:42:40,960
issue tokens this is going to be azure

1338
00:42:40,960 --> 00:42:42,319
id and then we're going to need to get

1339
00:42:42,319 --> 00:42:44,640
these tokens from the idp to that

1340
00:42:44,640 --> 00:42:46,319
application so we're going to do this

1341
00:42:46,319 --> 00:42:48,720
using the sso extension this comes in

1342
00:42:48,720 --> 00:42:51,680
the microsoft company portal

1343
00:42:51,680 --> 00:42:53,920
you will have to have the company portal

1344
00:42:53,920 --> 00:42:56,400
on the device but your users will not

1345
00:42:56,400 --> 00:42:58,160
have to interact with it or sign in with

1346
00:42:58,160 --> 00:42:59,760
it or anything like that if you do not

1347
00:42:59,760 --> 00:43:01,040
want them to

1348
00:43:01,040 --> 00:43:02,560
we know this can be sometimes very

1349
00:43:02,560 --> 00:43:04,240
sensitive in the mac admins community

1350
00:43:04,240 --> 00:43:06,000
about making them use this you don't

1351
00:43:06,000 --> 00:43:08,480
have to but the company portal will need

1352
00:43:08,480 --> 00:43:10,640
to be on the device okay so once that's

1353
00:43:10,640 --> 00:43:11,920
on the device we've configured that via

1354
00:43:11,920 --> 00:43:13,200
our mdm we'll cover that here in a

1355
00:43:13,200 --> 00:43:14,720
second we now need to sign in and start

1356
00:43:14,720 --> 00:43:16,000
getting some of these tokens so we're

1357
00:43:16,000 --> 00:43:18,000
gonna sign in we're either going to you

1358
00:43:18,000 --> 00:43:19,359
know open an application that knows how

1359
00:43:19,359 --> 00:43:20,720
to work with this something like outlook

1360
00:43:20,720 --> 00:43:22,319
maybe you open a browser or you can have

1361
00:43:22,319 --> 00:43:23,760
your users go to the company portal

1362
00:43:23,760 --> 00:43:25,119
doesn't really matter and now we're

1363
00:43:25,119 --> 00:43:26,800
going to prompt them for credentials

1364
00:43:26,800 --> 00:43:27,839
because we're doing modern

1365
00:43:27,839 --> 00:43:30,079
authentication we can do many rich

1366
00:43:30,079 --> 00:43:31,599
things like requiring passwordless

1367
00:43:31,599 --> 00:43:33,280
authentication using authenticator app

1368
00:43:33,280 --> 00:43:35,680
we can do mfa with otp we can really do

1369
00:43:35,680 --> 00:43:36,880
whatever we want because we have that

1370
00:43:36,880 --> 00:43:38,720
browser-based flow

1371
00:43:38,720 --> 00:43:40,240
those credentials are going to get sent

1372
00:43:40,240 --> 00:43:42,319
over to azure id

1373
00:43:42,319 --> 00:43:43,839
if everything looks good we passed

1374
00:43:43,839 --> 00:43:45,839
conditional access policies now we're

1375
00:43:45,839 --> 00:43:47,839
going to get back that primary refresh

1376
00:43:47,839 --> 00:43:49,280
token which is going to stay on that

1377
00:43:49,280 --> 00:43:51,440
device and this is protected by the mac

1378
00:43:51,440 --> 00:43:52,560
keychain this is how if you're not

1379
00:43:52,560 --> 00:43:53,680
familiar with max this is how they

1380
00:43:53,680 --> 00:43:54,720
protect a lot of their sensitive

1381
00:43:54,720 --> 00:43:57,040
information nothing special there and

1382
00:43:57,040 --> 00:43:59,040
remember that this prt is good for a

1383
00:43:59,040 --> 00:44:01,040
14-day rolling window as long as the

1384
00:44:01,040 --> 00:44:02,560
person is consistently using their mac

1385
00:44:02,560 --> 00:44:04,720
once every 14 days they should not get

1386
00:44:04,720 --> 00:44:06,319
forced to re-authenticate they'll

1387
00:44:06,319 --> 00:44:07,920
continue to be able to use that primary

1388
00:44:07,920 --> 00:44:10,160
refresh token as it gets extended

1389
00:44:10,160 --> 00:44:11,680
all right now we gotta go get an access

1390
00:44:11,680 --> 00:44:13,280
token so there's going to be two

1391
00:44:13,280 --> 00:44:15,359
different ways that we can do this first

1392
00:44:15,359 --> 00:44:16,960
if you have an application that's built

1393
00:44:16,960 --> 00:44:18,800
using the msa authentication libraries

1394
00:44:18,800 --> 00:44:20,319
this is the microsoft authentication

1395
00:44:20,319 --> 00:44:21,680
library you heard michael talk about

1396
00:44:21,680 --> 00:44:22,880
this a little bit before with azure

1397
00:44:22,880 --> 00:44:25,200
command line interface um this is an

1398
00:44:25,200 --> 00:44:26,960
open source library we make it for

1399
00:44:26,960 --> 00:44:29,440
things like net python

1400
00:44:29,440 --> 00:44:32,240
java objective c swift whatever you want

1401
00:44:32,240 --> 00:44:33,760
but most of the microsoft apps are going

1402
00:44:33,760 --> 00:44:35,200
to use this and this knows how to talk

1403
00:44:35,200 --> 00:44:36,880
to the token broker directly so let's

1404
00:44:36,880 --> 00:44:39,200
say here we have outlook it's going to

1405
00:44:39,200 --> 00:44:41,119
reach out to the sso extension to ask to

1406
00:44:41,119 --> 00:44:43,280
get that access token the refresh token

1407
00:44:43,280 --> 00:44:45,440
is going to be used to azure id to ask

1408
00:44:45,440 --> 00:44:47,680
for that access token for that resource

1409
00:44:47,680 --> 00:44:49,119
conditional access here is going to be

1410
00:44:49,119 --> 00:44:50,960
validated assuming we pass everything we

1411
00:44:50,960 --> 00:44:52,960
need to do here that access token is

1412
00:44:52,960 --> 00:44:55,599
going to be

1413
00:44:55,599 --> 00:44:57,599
sent back to the company portal and the

1414
00:44:57,599 --> 00:44:59,440
company portal is then going to pass

1415
00:44:59,440 --> 00:45:01,040
that back to the authenticator app and

1416
00:45:01,040 --> 00:45:02,560
that's going to be used to get access to

1417
00:45:02,560 --> 00:45:04,079
the resource so now we'll get our mail

1418
00:45:04,079 --> 00:45:05,839
in our outlook profile all without

1419
00:45:05,839 --> 00:45:07,520
having to do any additional sign-in

1420
00:45:07,520 --> 00:45:09,040
prompts because we're able to use that

1421
00:45:09,040 --> 00:45:11,119
prt with the sso extension which is

1422
00:45:11,119 --> 00:45:12,800
bundled with the company portal so

1423
00:45:12,800 --> 00:45:14,079
that's how it works if you have an

1424
00:45:14,079 --> 00:45:16,160
application that does msl so again this

1425
00:45:16,160 --> 00:45:17,280
is going to be most of the microsoft

1426
00:45:17,280 --> 00:45:18,880
apps you can also do a line of business

1427
00:45:18,880 --> 00:45:20,640
app with those libraries works just the

1428
00:45:20,640 --> 00:45:22,560
same all right so now let's look at what

1429
00:45:22,560 --> 00:45:24,240
happens if we don't have that we have an

1430
00:45:24,240 --> 00:45:26,400
application that's not built on msao

1431
00:45:26,400 --> 00:45:27,680
this is where we're going to use the

1432
00:45:27,680 --> 00:45:29,839
thing called a redirect flow so the user

1433
00:45:29,839 --> 00:45:31,680
is going to maybe use safari they're

1434
00:45:31,680 --> 00:45:34,240
going to go to owa in this case uh so

1435
00:45:34,240 --> 00:45:35,920
they access that and that's going to say

1436
00:45:35,920 --> 00:45:37,760
hey i need to get you need to get an

1437
00:45:37,760 --> 00:45:39,839
access token from azure ad it's going to

1438
00:45:39,839 --> 00:45:41,599
tell you go back to azure id give me

1439
00:45:41,599 --> 00:45:42,640
that access token so we're going to

1440
00:45:42,640 --> 00:45:45,599
redirect over to that and this part here

1441
00:45:45,599 --> 00:45:47,920
the mac os network stack is going to

1442
00:45:47,920 --> 00:45:50,560
intercept that request and redirect it

1443
00:45:50,560 --> 00:45:52,720
to the sso extension so this is built

1444
00:45:52,720 --> 00:45:54,079
into the os this is part of that

1445
00:45:54,079 --> 00:45:56,079
platform that they made gets redirected

1446
00:45:56,079 --> 00:45:57,920
there and now we're going to use that

1447
00:45:57,920 --> 00:46:00,000
primary refresh token it's going to go

1448
00:46:00,000 --> 00:46:01,839
to azure id we're going to request that

1449
00:46:01,839 --> 00:46:03,280
access token we have to pass our

1450
00:46:03,280 --> 00:46:05,040
conditional access policies that's going

1451
00:46:05,040 --> 00:46:06,880
to get returned to the sso extension

1452
00:46:06,880 --> 00:46:08,319
which then gets returned back up the

1453
00:46:08,319 --> 00:46:10,560
network stack back to the browser and

1454
00:46:10,560 --> 00:46:12,720
off to the application here so now we

1455
00:46:12,720 --> 00:46:14,640
get access to owa so this was able to

1456
00:46:14,640 --> 00:46:16,079
work you didn't have to use the msl

1457
00:46:16,079 --> 00:46:17,280
libraries

1458
00:46:17,280 --> 00:46:19,200
but beware here this is a very very

1459
00:46:19,200 --> 00:46:21,200
powerful thing because the os is

1460
00:46:21,200 --> 00:46:22,960
intercepting that network traffic and

1461
00:46:22,960 --> 00:46:24,319
sending it off somewhere so if we

1462
00:46:24,319 --> 00:46:25,680
misconfigure this

1463
00:46:25,680 --> 00:46:28,079
we can break sso but if something is

1464
00:46:28,079 --> 00:46:29,599
malicious here it's going to send those

1465
00:46:29,599 --> 00:46:30,880
requests off to that so we have to be

1466
00:46:30,880 --> 00:46:32,480
very very careful so this is why this

1467
00:46:32,480 --> 00:46:35,119
has to be deployed via an mdm it's very

1468
00:46:35,119 --> 00:46:37,839
very powerful so if intune is your mdm

1469
00:46:37,839 --> 00:46:39,280
this is very straightforward you can

1470
00:46:39,280 --> 00:46:41,359
select from the sso app extension type

1471
00:46:41,359 --> 00:46:43,599
microsoft azure id there's a few other

1472
00:46:43,599 --> 00:46:44,880
things you can figure if you want to if

1473
00:46:44,880 --> 00:46:48,400
you go to ak to ms apple sso dash intune

1474
00:46:48,400 --> 00:46:50,000
it walks you through the process but

1475
00:46:50,000 --> 00:46:51,200
let's say you're not using intune let's

1476
00:46:51,200 --> 00:46:52,960
say you're using jamf pro as your mdm

1477
00:46:52,960 --> 00:46:54,400
there's a little more work we need to do

1478
00:46:54,400 --> 00:46:56,000
we actually have this documented for you

1479
00:46:56,000 --> 00:46:58,160
as well if you go to akita ms slash

1480
00:46:58,160 --> 00:47:00,960
apple sso dash jamf pro there's a sample

1481
00:47:00,960 --> 00:47:02,640
plist file we recommend you use that

1482
00:47:02,640 --> 00:47:04,160
because we've seen customers sometimes

1483
00:47:04,160 --> 00:47:06,319
fat finger this and it breaks their sso

1484
00:47:06,319 --> 00:47:08,400
so just be careful it's okay

1485
00:47:08,400 --> 00:47:09,760
follow the recommendation here follow

1486
00:47:09,760 --> 00:47:11,440
the configurations and you'll push those

1487
00:47:11,440 --> 00:47:13,200
p list files to the client and then

1488
00:47:13,200 --> 00:47:14,880
you'll able to get single sign-on if

1489
00:47:14,880 --> 00:47:17,280
jamf pro is your mdm

1490
00:47:17,280 --> 00:47:19,440
so now um

1491
00:47:19,440 --> 00:47:20,559
the last thing here to remember with

1492
00:47:20,559 --> 00:47:22,000
this is that

1493
00:47:22,000 --> 00:47:24,079
the company portal is going to be

1494
00:47:24,079 --> 00:47:26,079
required on the device but if you follow

1495
00:47:26,079 --> 00:47:28,240
our recommendations in our configuration

1496
00:47:28,240 --> 00:47:30,079
the users will not have to open the

1497
00:47:30,079 --> 00:47:32,000
company portal at all i know this seems

1498
00:47:32,000 --> 00:47:33,119
a little weird but if you talk to some

1499
00:47:33,119 --> 00:47:34,960
of your mac admins they sometimes can be

1500
00:47:34,960 --> 00:47:37,119
very very sensitive about this so the

1501
00:47:37,119 --> 00:47:38,880
mac the company portal needs to be there

1502
00:47:38,880 --> 00:47:40,319
but they actually don't need to log in

1503
00:47:40,319 --> 00:47:41,680
or interact with it

1504
00:47:41,680 --> 00:47:44,079
and remember here that the single scion

1505
00:47:44,079 --> 00:47:45,920
aspect of this and the device compliance

1506
00:47:45,920 --> 00:47:48,880
are two separate things in the mdm you

1507
00:47:48,880 --> 00:47:50,800
do not have to do both you can do one or

1508
00:47:50,800 --> 00:47:52,640
the other but we highly highly recommend

1509
00:47:52,640 --> 00:47:54,720
that you do both and just a tip from us

1510
00:47:54,720 --> 00:47:56,079
when working with customers if you need

1511
00:47:56,079 --> 00:47:58,559
to troubleshoot this um using safari in

1512
00:47:58,559 --> 00:48:00,720
private mode works works really really

1513
00:48:00,720 --> 00:48:01,839
well so go ahead and use that you can

1514
00:48:01,839 --> 00:48:03,920
see we're signing in with safari safari

1515
00:48:03,920 --> 00:48:05,119
in private mode you can test whatever

1516
00:48:05,119 --> 00:48:06,880
you need to test there

1517
00:48:06,880 --> 00:48:07,760
all right

1518
00:48:07,760 --> 00:48:09,280
so what are some things that we need to

1519
00:48:09,280 --> 00:48:10,960
be aware of before we deploy this so

1520
00:48:10,960 --> 00:48:14,240
first of all the sso extension is still

1521
00:48:14,240 --> 00:48:16,240
in public preview but it is fully

1522
00:48:16,240 --> 00:48:17,920
supported supported just like any other

1523
00:48:17,920 --> 00:48:19,520
feature in azure id that's in public

1524
00:48:19,520 --> 00:48:21,200
preview but i know that we have some

1525
00:48:21,200 --> 00:48:23,280
customers that only will use

1526
00:48:23,280 --> 00:48:25,520
functionalities if it's in general

1527
00:48:25,520 --> 00:48:26,960
availability but this is still in public

1528
00:48:26,960 --> 00:48:28,000
preview we have a little things we're

1529
00:48:28,000 --> 00:48:29,440
trying to button up to get this to ga

1530
00:48:29,440 --> 00:48:31,119
hopefully that comes here soon but as of

1531
00:48:31,119 --> 00:48:32,559
today this recording it's still in

1532
00:48:32,559 --> 00:48:35,680
public preview um for order for this to

1533
00:48:35,680 --> 00:48:37,680
work the applications either need to be

1534
00:48:37,680 --> 00:48:39,920
built using msal or they need to use

1535
00:48:39,920 --> 00:48:42,559
apple system frameworks if you do not

1536
00:48:42,559 --> 00:48:44,240
you will not get single sign-on for your

1537
00:48:44,240 --> 00:48:46,079
applications because the

1538
00:48:46,079 --> 00:48:48,079
sso extension is unaware of them and the

1539
00:48:48,079 --> 00:48:49,599
applications are unaware of it so you're

1540
00:48:49,599 --> 00:48:51,280
not going to get single sign-on for this

1541
00:48:51,280 --> 00:48:52,800
the two primary examples we see with

1542
00:48:52,800 --> 00:48:55,200
customers are chrome and firefox because

1543
00:48:55,200 --> 00:48:56,960
they implement their own network stack

1544
00:48:56,960 --> 00:48:58,319
they're not using the system network

1545
00:48:58,319 --> 00:49:00,160
stack in mac os

1546
00:49:00,160 --> 00:49:02,319
so as defenders we should be asking our

1547
00:49:02,319 --> 00:49:04,079
app vendors to support these sso

1548
00:49:04,079 --> 00:49:05,200
extensions and we see this come up in

1549
00:49:05,200 --> 00:49:07,280
the mac admin slack a few times where

1550
00:49:07,280 --> 00:49:09,040
some application doesn't work with this

1551
00:49:09,040 --> 00:49:10,960
you should go talk to your vendors ask

1552
00:49:10,960 --> 00:49:12,400
them to support this they should want to

1553
00:49:12,400 --> 00:49:13,760
support this it gives it a better end

1554
00:49:13,760 --> 00:49:16,000
user experience and apple is only making

1555
00:49:16,000 --> 00:49:18,000
sso extension more important as time

1556
00:49:18,000 --> 00:49:19,520
goes on so we really want to ask them to

1557
00:49:19,520 --> 00:49:21,760
support this

1558
00:49:21,760 --> 00:49:23,119
all right another thing i want to touch

1559
00:49:23,119 --> 00:49:24,800
on really quickly from a mac admin

1560
00:49:24,800 --> 00:49:27,119
perspective is and as well as ios's

1561
00:49:27,119 --> 00:49:29,280
perspective is we want users to use the

1562
00:49:29,280 --> 00:49:31,280
authenticator app wherever possible as i

1563
00:49:31,280 --> 00:49:32,800
just talked about how the company portal

1564
00:49:32,800 --> 00:49:34,720
works it acts as that primary refresh

1565
00:49:34,720 --> 00:49:36,720
token on the device that token broker

1566
00:49:36,720 --> 00:49:38,800
the authenticator app works the exact

1567
00:49:38,800 --> 00:49:41,280
same way for ios and ipad os devices as

1568
00:49:41,280 --> 00:49:43,200
well as android devices so you want to

1569
00:49:43,200 --> 00:49:44,559
make sure we get this installed you will

1570
00:49:44,559 --> 00:49:46,800
get less prompts just by having the

1571
00:49:46,800 --> 00:49:48,880
authenticator app on the device

1572
00:49:48,880 --> 00:49:50,079
if you rolled out mfa in your

1573
00:49:50,079 --> 00:49:51,680
environment maybe many years ago and we

1574
00:49:51,680 --> 00:49:53,119
weren't so

1575
00:49:53,119 --> 00:49:55,119
adamant about what type of mfa factor

1576
00:49:55,119 --> 00:49:56,400
they could use so we let people use

1577
00:49:56,400 --> 00:49:58,559
phone call or text message that's fine

1578
00:49:58,559 --> 00:49:59,599
but we want them to use the

1579
00:49:59,599 --> 00:50:02,160
authenticator app if you go to ak to ms

1580
00:50:02,160 --> 00:50:04,160
nudge after the user completes sign in

1581
00:50:04,160 --> 00:50:05,839
to azure id they will have to go through

1582
00:50:05,839 --> 00:50:07,440
the authenticator app registration

1583
00:50:07,440 --> 00:50:08,960
process another thing i want to make

1584
00:50:08,960 --> 00:50:10,480
sure all defenders know about is we want

1585
00:50:10,480 --> 00:50:12,079
to move from the push notification

1586
00:50:12,079 --> 00:50:13,440
aspect of authenticator app so that's

1587
00:50:13,440 --> 00:50:14,800
what you see there in the upper left so

1588
00:50:14,800 --> 00:50:16,480
you get the mfa request you get the

1589
00:50:16,480 --> 00:50:18,880
approved deny to move to the number

1590
00:50:18,880 --> 00:50:20,319
match experience so there you see in the

1591
00:50:20,319 --> 00:50:22,000
lower right the number pops up and you

1592
00:50:22,000 --> 00:50:24,079
actually have to type the number in to

1593
00:50:24,079 --> 00:50:26,319
be able to approve the mfa request this

1594
00:50:26,319 --> 00:50:28,240
helps tremendously with the mfa

1595
00:50:28,240 --> 00:50:29,599
hammering technique i talked about a

1596
00:50:29,599 --> 00:50:32,000
little bit earlier also number match is

1597
00:50:32,000 --> 00:50:33,599
what's going to be needed to use

1598
00:50:33,599 --> 00:50:34,960
passwordless

1599
00:50:34,960 --> 00:50:36,400
so let's talk about passwords really

1600
00:50:36,400 --> 00:50:38,559
really quick um

1601
00:50:38,559 --> 00:50:40,160
passwords gives you the best user

1602
00:50:40,160 --> 00:50:41,680
experience combined with the best

1603
00:50:41,680 --> 00:50:43,040
security and every time we talk to

1604
00:50:43,040 --> 00:50:44,400
customers about using power source

1605
00:50:44,400 --> 00:50:46,800
authentication someone will always say

1606
00:50:46,800 --> 00:50:48,720
look we can't use it because i have a

1607
00:50:48,720 --> 00:50:50,640
mainframe still i have these ldap

1608
00:50:50,640 --> 00:50:52,960
applications still blah blah blah we

1609
00:50:52,960 --> 00:50:54,720
totally understand you're not expecting

1610
00:50:54,720 --> 00:50:56,720
you to get rid of your passwords

1611
00:50:56,720 --> 00:50:58,880
overnight that's too that's too big of a

1612
00:50:58,880 --> 00:51:00,640
mountain to climb but we want you to

1613
00:51:00,640 --> 00:51:03,280
start looking to use passwords less so

1614
00:51:03,280 --> 00:51:04,800
any of the applications that you have

1615
00:51:04,800 --> 00:51:06,960
integrated with azure id you can use

1616
00:51:06,960 --> 00:51:08,640
pastel's credentials with and actually

1617
00:51:08,640 --> 00:51:10,800
michael and i have been completely

1618
00:51:10,800 --> 00:51:13,760
passwordless on the corporate mac that

1619
00:51:13,760 --> 00:51:16,000
we have from my msit

1620
00:51:16,000 --> 00:51:17,440
and we're accessing all those corporate

1621
00:51:17,440 --> 00:51:19,680
resources completely passwordless since

1622
00:51:19,680 --> 00:51:21,920
november 2020 right around thanksgiving

1623
00:51:21,920 --> 00:51:24,000
msit admins went in they scrambled our

1624
00:51:24,000 --> 00:51:25,760
passwords and we've been passwordless

1625
00:51:25,760 --> 00:51:27,599
ever since because most of the resources

1626
00:51:27,599 --> 00:51:30,720
that we access can you use kerberos or

1627
00:51:30,720 --> 00:51:32,400
they're mostly going to be modern

1628
00:51:32,400 --> 00:51:33,920
authentication applications so we can do

1629
00:51:33,920 --> 00:51:36,400
passwordless there so you may you may

1630
00:51:36,400 --> 00:51:38,079
have some applications that are on

1631
00:51:38,079 --> 00:51:39,359
mainframes and things like that that you

1632
00:51:39,359 --> 00:51:41,200
can't use passwords for but you may have

1633
00:51:41,200 --> 00:51:43,119
a substantial part of your environment

1634
00:51:43,119 --> 00:51:44,800
that can use passwords today so don't

1635
00:51:44,800 --> 00:51:46,480
discount this start to move your users

1636
00:51:46,480 --> 00:51:48,319
to passwordless so what are the methods

1637
00:51:48,319 --> 00:51:49,839
you can use the authentic here app with

1638
00:51:49,839 --> 00:51:51,440
number match is great

1639
00:51:51,440 --> 00:51:53,520
you can also use 502 keys where you see

1640
00:51:53,520 --> 00:51:54,720
there you click sign in with windows

1641
00:51:54,720 --> 00:51:56,160
hello or security keys you'll get

1642
00:51:56,160 --> 00:51:58,720
prompted to insert that fido key

1643
00:51:58,720 --> 00:52:00,720
today this works with edging chrome you

1644
00:52:00,720 --> 00:52:02,160
have to do that proof of presence or

1645
00:52:02,160 --> 00:52:03,520
maybe there's a biometric there it kind

1646
00:52:03,520 --> 00:52:05,119
of depends on the key but this works i

1647
00:52:05,119 --> 00:52:07,040
said for edge and chrome safari will be

1648
00:52:07,040 --> 00:52:08,880
coming in the future and then finally

1649
00:52:08,880 --> 00:52:09,920
another thing i talked about a little

1650
00:52:09,920 --> 00:52:11,520
bit at the beginning is pass keys this

1651
00:52:11,520 --> 00:52:13,040
is a really a cool thing it's an

1652
00:52:13,040 --> 00:52:14,800
emerging standard supported by apple

1653
00:52:14,800 --> 00:52:16,640
microsoft and google the pass keys are

1654
00:52:16,640 --> 00:52:17,680
going to be synced across the same

1655
00:52:17,680 --> 00:52:19,520
device so keep an eye on this this is a

1656
00:52:19,520 --> 00:52:21,200
really cool thing that is starting to

1657
00:52:21,200 --> 00:52:22,400
emerge

1658
00:52:22,400 --> 00:52:23,599
and with that i think michael's going to

1659
00:52:23,599 --> 00:52:25,119
take over here for the last part around

1660
00:52:25,119 --> 00:52:27,440
the linux client

1661
00:52:27,440 --> 00:52:29,200
okay so we've talked about mac clients

1662
00:52:29,200 --> 00:52:30,400
but we should also talk about what

1663
00:52:30,400 --> 00:52:32,960
capabilities exist for linux clients

1664
00:52:32,960 --> 00:52:34,960
so i want to go back and talk about how

1665
00:52:34,960 --> 00:52:35,920
we do

1666
00:52:35,920 --> 00:52:37,359
device os

1667
00:52:37,359 --> 00:52:39,200
identification in those conditional

1668
00:52:39,200 --> 00:52:41,440
access policies so there's really two

1669
00:52:41,440 --> 00:52:43,200
ways if the device is under intune

1670
00:52:43,200 --> 00:52:44,559
management we have a pretty strong way

1671
00:52:44,559 --> 00:52:46,400
of determining the device os because

1672
00:52:46,400 --> 00:52:47,520
it's had to provide us with a

1673
00:52:47,520 --> 00:52:49,280
certificate and the mdm has made us

1674
00:52:49,280 --> 00:52:51,200
aware that this is a windows device or

1675
00:52:51,200 --> 00:52:53,680
this is a mac device but in other cases

1676
00:52:53,680 --> 00:52:55,520
we have to fall back to things like user

1677
00:52:55,520 --> 00:52:57,520
agent strings to determine what os we're

1678
00:52:57,520 --> 00:53:00,319
on so if i'm using a bsd device for

1679
00:53:00,319 --> 00:53:02,960
example it's going to show up as bsd uh

1680
00:53:02,960 --> 00:53:05,520
or if i'm an attacker who wants to spoof

1681
00:53:05,520 --> 00:53:07,520
my user agent string i can provide

1682
00:53:07,520 --> 00:53:09,200
something like i'm not an attacker i

1683
00:53:09,200 --> 00:53:11,359
promise so we can really send anything

1684
00:53:11,359 --> 00:53:12,880
in the user agent string that we want

1685
00:53:12,880 --> 00:53:15,680
this is a modifiable field obviously so

1686
00:53:15,680 --> 00:53:17,520
we need to treat it like it's unverified

1687
00:53:17,520 --> 00:53:19,599
so if i'm using device types that azure

1688
00:53:19,599 --> 00:53:22,319
ads doesn't explicitly support i need to

1689
00:53:22,319 --> 00:53:23,839
make sure that i account for that in the

1690
00:53:23,839 --> 00:53:25,599
way i configure my conditional access

1691
00:53:25,599 --> 00:53:27,440
policies so we don't have support for

1692
00:53:27,440 --> 00:53:29,680
bsd for example so we may want to catch

1693
00:53:29,680 --> 00:53:31,599
those devices and stop them from being

1694
00:53:31,599 --> 00:53:33,760
used to access my environment or stop

1695
00:53:33,760 --> 00:53:35,119
attackers who are doing things like

1696
00:53:35,119 --> 00:53:37,040
forging their user agent strings like

1697
00:53:37,040 --> 00:53:39,280
mark's example of someone

1698
00:53:39,280 --> 00:53:41,760
looking like a windows 8.1 a device

1699
00:53:41,760 --> 00:53:44,160
earlier in the presentation

1700
00:53:44,160 --> 00:53:46,240
so if you're using device platform in

1701
00:53:46,240 --> 00:53:48,640
your conditional access policies if you

1702
00:53:48,640 --> 00:53:50,480
followed our best practices in the past

1703
00:53:50,480 --> 00:53:52,000
your policies would probably look

1704
00:53:52,000 --> 00:53:53,359
something like this you would have at

1705
00:53:53,359 --> 00:53:56,160
least one policy that's set to include

1706
00:53:56,160 --> 00:53:58,079
any device platform which is basically a

1707
00:53:58,079 --> 00:54:00,800
wildcard and then on that same policy

1708
00:54:00,800 --> 00:54:02,960
you would exclude the device platforms

1709
00:54:02,960 --> 00:54:05,040
that you explicitly support

1710
00:54:05,040 --> 00:54:07,119
and this would typically be android ios

1711
00:54:07,119 --> 00:54:08,960
windows and mac os and then you would

1712
00:54:08,960 --> 00:54:10,559
block that access

1713
00:54:10,559 --> 00:54:12,960
the end result of this policy is that i

1714
00:54:12,960 --> 00:54:15,200
can have other policies that apply to

1715
00:54:15,200 --> 00:54:17,520
android ios windows or mac because i

1716
00:54:17,520 --> 00:54:19,359
have other policies that may do things

1717
00:54:19,359 --> 00:54:21,520
like require device compliance for those

1718
00:54:21,520 --> 00:54:23,680
but if a user shows up with some other

1719
00:54:23,680 --> 00:54:25,760
user agent string like that bsd device

1720
00:54:25,760 --> 00:54:28,160
that windows 8.1 device that that

1721
00:54:28,160 --> 00:54:30,880
attacker with the attacker device i can

1722
00:54:30,880 --> 00:54:32,559
block that because they'll get caught by

1723
00:54:32,559 --> 00:54:34,319
the wild card so this has always been a

1724
00:54:34,319 --> 00:54:36,400
best practice and historically this is

1725
00:54:36,400 --> 00:54:38,720
also applied to linux it meant that

1726
00:54:38,720 --> 00:54:40,319
linux devices got blocked in our

1727
00:54:40,319 --> 00:54:41,680
environments

1728
00:54:41,680 --> 00:54:43,599
so a few months ago we actually released

1729
00:54:43,599 --> 00:54:45,920
support for linux as a device platform

1730
00:54:45,920 --> 00:54:48,079
in conditional access as well

1731
00:54:48,079 --> 00:54:50,960
so this is still using user agent string

1732
00:54:50,960 --> 00:54:54,000
typically so we can start to filter out

1733
00:54:54,000 --> 00:54:55,839
those linux devices

1734
00:54:55,839 --> 00:54:57,599
it's not as high of a security bar as

1735
00:54:57,599 --> 00:54:58,400
saying

1736
00:54:58,400 --> 00:55:00,480
requiring device compliance on linux but

1737
00:55:00,480 --> 00:55:02,160
it does give us some flexibility to

1738
00:55:02,160 --> 00:55:04,079
provide slightly better end user

1739
00:55:04,079 --> 00:55:06,079
experiences and some level of security

1740
00:55:06,079 --> 00:55:08,000
for our linux users you can see here in

1741
00:55:08,000 --> 00:55:09,680
the screenshot it's got a preview tag on

1742
00:55:09,680 --> 00:55:11,440
it since we made this deck it's actually

1743
00:55:11,440 --> 00:55:13,599
gone to ga so anybody who wants to use

1744
00:55:13,599 --> 00:55:16,799
this feature is fully supported to do so

1745
00:55:16,799 --> 00:55:19,040
so some common things that we've seen

1746
00:55:19,040 --> 00:55:20,480
customers implement using this

1747
00:55:20,480 --> 00:55:23,680
functionality is requiring mfa on linux

1748
00:55:23,680 --> 00:55:26,480
devices sometimes requiring mfa and

1749
00:55:26,480 --> 00:55:28,960
specific locations for the linux devices

1750
00:55:28,960 --> 00:55:31,040
so i might say my windows or macs can

1751
00:55:31,040 --> 00:55:33,520
get to resources from anywhere but if my

1752
00:55:33,520 --> 00:55:35,280
users on linux i want them to have to do

1753
00:55:35,280 --> 00:55:36,960
an mfa and i want them to have to come

1754
00:55:36,960 --> 00:55:39,440
from a corporate network i might also

1755
00:55:39,440 --> 00:55:42,400
apply uh risk-based policies to my users

1756
00:55:42,400 --> 00:55:44,319
on linux devices and it might apply

1757
00:55:44,319 --> 00:55:46,000
things like sign in frequency controls

1758
00:55:46,000 --> 00:55:47,680
to require users to re-authenticate

1759
00:55:47,680 --> 00:55:50,079
periodically as we discussed prompting

1760
00:55:50,079 --> 00:55:52,480
is not our favorite but in some cases

1761
00:55:52,480 --> 00:55:55,599
customers have chosen to do this

1762
00:55:55,599 --> 00:55:58,319
however naturally customers ask me

1763
00:55:58,319 --> 00:56:00,240
this is this all sounds good but when am

1764
00:56:00,240 --> 00:56:01,760
i going to get device compliance

1765
00:56:01,760 --> 00:56:03,760
supported for linux so

1766
00:56:03,760 --> 00:56:05,359
give me a couple slides and we'll talk

1767
00:56:05,359 --> 00:56:08,079
about that one as well

1768
00:56:08,079 --> 00:56:10,480
so just to reiterate this is a really

1769
00:56:10,480 --> 00:56:12,319
common policy set and something that we

1770
00:56:12,319 --> 00:56:13,839
might recommend for those environments

1771
00:56:13,839 --> 00:56:16,400
where you do need to support linux today

1772
00:56:16,400 --> 00:56:18,400
so you might have a policy that

1773
00:56:18,400 --> 00:56:21,680
explicitly includes

1774
00:56:21,680 --> 00:56:24,559
excuse me windows mac os ios and android

1775
00:56:24,559 --> 00:56:26,480
and then requires mfa and device

1776
00:56:26,480 --> 00:56:28,319
compliance this is a very strong zero

1777
00:56:28,319 --> 00:56:30,640
trust oriented policy for your supported

1778
00:56:30,640 --> 00:56:32,640
platforms then you might have another

1779
00:56:32,640 --> 00:56:35,359
policy that specifically targets linux

1780
00:56:35,359 --> 00:56:38,240
that requires mfa and a trusted location

1781
00:56:38,240 --> 00:56:40,400
so we can still provide some access for

1782
00:56:40,400 --> 00:56:42,400
developers who might be on linux devices

1783
00:56:42,400 --> 00:56:44,319
but we have some compensating security

1784
00:56:44,319 --> 00:56:45,920
controls since we don't have device

1785
00:56:45,920 --> 00:56:47,040
compliance

1786
00:56:47,040 --> 00:56:48,640
and then finally you need to have that

1787
00:56:48,640 --> 00:56:50,400
catch-all policy that grabs everything

1788
00:56:50,400 --> 00:56:52,400
else so the condition would be any

1789
00:56:52,400 --> 00:56:54,480
device other than our supported os's and

1790
00:56:54,480 --> 00:56:56,839
then the control would be to block

1791
00:56:56,839 --> 00:57:00,079
access but like i said we really want to

1792
00:57:00,079 --> 00:57:02,079
start moving towards device compliance

1793
00:57:02,079 --> 00:57:04,240
for everything and so this is something

1794
00:57:04,240 --> 00:57:06,319
that we're adding as mark mentioned

1795
00:57:06,319 --> 00:57:07,839
earlier there's really two critical

1796
00:57:07,839 --> 00:57:10,079
capabilities that we want on any os it's

1797
00:57:10,079 --> 00:57:12,319
not just the device compliance piece we

1798
00:57:12,319 --> 00:57:15,520
want sso and device compliance

1799
00:57:15,520 --> 00:57:17,040
so we're working on building this for

1800
00:57:17,040 --> 00:57:18,000
both

1801
00:57:18,000 --> 00:57:19,760
for linux in addition to all the other

1802
00:57:19,760 --> 00:57:20,880
platforms

1803
00:57:20,880 --> 00:57:23,040
so for the ssops just like we talked

1804
00:57:23,040 --> 00:57:25,040
about earlier we want to have prts on

1805
00:57:25,040 --> 00:57:27,280
linux that can be used by a broker so

1806
00:57:27,280 --> 00:57:29,200
just like on mac we're in tune company

1807
00:57:29,200 --> 00:57:30,720
portal is the broker we're building an

1808
00:57:30,720 --> 00:57:33,119
intune company portal app for linux that

1809
00:57:33,119 --> 00:57:35,280
will be able to have a prt and act as a

1810
00:57:35,280 --> 00:57:37,200
broker for other applications that want

1811
00:57:37,200 --> 00:57:40,079
to get access tokens this will also make

1812
00:57:40,079 --> 00:57:42,000
it so that we can support device-based

1813
00:57:42,000 --> 00:57:44,480
conditional access controls on linux so

1814
00:57:44,480 --> 00:57:46,720
you can start to move eventually from

1815
00:57:46,720 --> 00:57:48,640
those location based or risk-based

1816
00:57:48,640 --> 00:57:51,200
controls for linux to the device-centric

1817
00:57:51,200 --> 00:57:53,200
zero trust policies that we're using on

1818
00:57:53,200 --> 00:57:54,880
other oss

1819
00:57:54,880 --> 00:57:56,480
so this functionality is in preview

1820
00:57:56,480 --> 00:57:58,319
today uh so we're running a private

1821
00:57:58,319 --> 00:58:00,799
preview uh we'll have more to announce

1822
00:58:00,799 --> 00:58:03,839
about public or to public preview and ga

1823
00:58:03,839 --> 00:58:05,760
dates in the future but just to give you

1824
00:58:05,760 --> 00:58:07,520
an idea about what the scope of the

1825
00:58:07,520 --> 00:58:10,000
preview is currently we're working on

1826
00:58:10,000 --> 00:58:12,079
securing access to web applications

1827
00:58:12,079 --> 00:58:13,599
primarily and this is going to be done

1828
00:58:13,599 --> 00:58:15,440
via microsoft edge and i'll talk about

1829
00:58:15,440 --> 00:58:17,280
why that is in a second

1830
00:58:17,280 --> 00:58:19,040
so basically this will be this will give

1831
00:58:19,040 --> 00:58:21,839
you access in your edge browser to m365

1832
00:58:21,839 --> 00:58:24,880
applications sas apps lob apps other

1833
00:58:24,880 --> 00:58:26,160
applications you integrate with your

1834
00:58:26,160 --> 00:58:28,480
azure id environment as of today we're

1835
00:58:28,480 --> 00:58:30,880
supporting ubuntu 2004 we are working on

1836
00:58:30,880 --> 00:58:33,520
support for the next lts release

1837
00:58:33,520 --> 00:58:36,079
we're supporting compliance policies so

1838
00:58:36,079 --> 00:58:38,000
from an intune perspective we're going

1839
00:58:38,000 --> 00:58:39,920
to support applying compliance policies

1840
00:58:39,920 --> 00:58:42,000
to the linux devices there's other types

1841
00:58:42,000 --> 00:58:43,920
of policy objects in intune that we're

1842
00:58:43,920 --> 00:58:46,400
not going to support out of the gate

1843
00:58:46,400 --> 00:58:48,160
and then once those devices are enrolled

1844
00:58:48,160 --> 00:58:49,920
into intune we will have things like

1845
00:58:49,920 --> 00:58:52,079
this the compliance state of the device

1846
00:58:52,079 --> 00:58:54,240
some very lightweight device inventory

1847
00:58:54,240 --> 00:58:55,680
and then information about the

1848
00:58:55,680 --> 00:58:57,680
enrollment success

1849
00:58:57,680 --> 00:58:59,119
in the future

1850
00:58:59,119 --> 00:59:00,480
we are looking to add additional

1851
00:59:00,480 --> 00:59:02,799
capabilities like securing access to

1852
00:59:02,799 --> 00:59:05,920
azure resources and tools like azcli

1853
00:59:05,920 --> 00:59:08,079
to get cli for azure devops and we're

1854
00:59:08,079 --> 00:59:09,440
going to look at adding support for

1855
00:59:09,440 --> 00:59:12,400
additional distributions

1856
00:59:12,400 --> 00:59:14,000
so let's talk about how this is going to

1857
00:59:14,000 --> 00:59:15,599
work this is going to be very similar to

1858
00:59:15,599 --> 00:59:17,520
the mac example so just like before we

1859
00:59:17,520 --> 00:59:19,119
have the intune company portal app

1860
00:59:19,119 --> 00:59:20,799
that's installed on the device this

1861
00:59:20,799 --> 00:59:22,079
comes along with the microsoft

1862
00:59:22,079 --> 00:59:23,760
authentication library so if you haven't

1863
00:59:23,760 --> 00:59:25,599
figured it out yet msl is really really

1864
00:59:25,599 --> 00:59:27,599
important for a lot of these flows and

1865
00:59:27,599 --> 00:59:29,680
then we also built a broker so similar

1866
00:59:29,680 --> 00:59:32,319
to our android broker it's based on java

1867
00:59:32,319 --> 00:59:34,079
so this is a dependency for the engine

1868
00:59:34,079 --> 00:59:35,440
company portal when you install the

1869
00:59:35,440 --> 00:59:37,760
company portal from our package repo as

1870
00:59:37,760 --> 00:59:38,880
a dev or

1871
00:59:38,880 --> 00:59:40,880
in the future maybe an rpm

1872
00:59:40,880 --> 00:59:42,400
it's going to come bundled along with

1873
00:59:42,400 --> 00:59:44,240
the java broker technically separate

1874
00:59:44,240 --> 00:59:46,000
components but they're dependencies for

1875
00:59:46,000 --> 00:59:47,599
each other

1876
00:59:47,599 --> 00:59:49,359
then when i want to initiate enrollment

1877
00:59:49,359 --> 00:59:51,359
my user opens the company portal app or

1878
00:59:51,359 --> 00:59:53,119
is directed to the company portal app by

1879
00:59:53,119 --> 00:59:54,960
a conditional access policy blocking

1880
00:59:54,960 --> 00:59:56,160
their access

1881
00:59:56,160 --> 00:59:59,119
and the m cell module is used to present

1882
00:59:59,119 --> 01:00:01,200
the user with a sign in screen so they

1883
01:00:01,200 --> 01:00:02,640
initiate their sign in and just like

1884
01:00:02,640 --> 01:00:04,480
before they can do a password list sign

1885
01:00:04,480 --> 01:00:07,200
in or username and password plus mnfa

1886
01:00:07,200 --> 01:00:09,440
and then m cell takes those credentials

1887
01:00:09,440 --> 01:00:11,520
and passes them through the java broker

1888
01:00:11,520 --> 01:00:13,520
to azure ad where we do a device

1889
01:00:13,520 --> 01:00:15,440
registration so we get a device object

1890
01:00:15,440 --> 01:00:18,240
and azure id and then we can also get a

1891
01:00:18,240 --> 01:00:20,640
prt so we got a prt and a device

1892
01:00:20,640 --> 01:00:23,200
certificate in return

1893
01:00:23,200 --> 01:00:24,720
at this point our broker is in a

1894
01:00:24,720 --> 01:00:26,559
provision state so now we can start to

1895
01:00:26,559 --> 01:00:28,880
plug applications into it

1896
01:00:28,880 --> 01:00:30,640
the intune company portal will use

1897
01:00:30,640 --> 01:00:32,720
tokens acquired by the java broker to go

1898
01:00:32,720 --> 01:00:35,040
enroll into intune at this point

1899
01:00:35,040 --> 01:00:36,960
in tune will return the compliance

1900
01:00:36,960 --> 01:00:38,960
policy remember compliance policy is

1901
01:00:38,960 --> 01:00:40,240
where we're starting so we're not doing

1902
01:00:40,240 --> 01:00:42,559
configuration or anything yet

1903
01:00:42,559 --> 01:00:44,559
the compliance policy can be for things

1904
01:00:44,559 --> 01:00:47,040
like requiring password complexity for

1905
01:00:47,040 --> 01:00:49,520
the account sign in on the device

1906
01:00:49,520 --> 01:00:52,319
we can also require disk encryption

1907
01:00:52,319 --> 01:00:53,920
there's some nuances around disk

1908
01:00:53,920 --> 01:00:55,599
encryption on linux it's a little bit

1909
01:00:55,599 --> 01:00:57,599
trickier than some other os's we are

1910
01:00:57,599 --> 01:00:59,200
looking at future capabilities like

1911
01:00:59,200 --> 01:01:01,680
maybe requiring tpms or other compliance

1912
01:01:01,680 --> 01:01:03,839
controls and some customization but

1913
01:01:03,839 --> 01:01:06,480
today most customers are using password

1914
01:01:06,480 --> 01:01:08,079
complexity and disk encryption

1915
01:01:08,079 --> 01:01:10,400
requirements

1916
01:01:10,400 --> 01:01:11,839
the intune company portal returns

1917
01:01:11,839 --> 01:01:13,440
compliance information about whether or

1918
01:01:13,440 --> 01:01:14,960
not the device is in a compliance or

1919
01:01:14,960 --> 01:01:17,040
non-compliant state and then intune

1920
01:01:17,040 --> 01:01:18,960
provides that to azure ad and that's

1921
01:01:18,960 --> 01:01:20,720
what we use in

1922
01:01:20,720 --> 01:01:24,160
conditional access policy evaluation

1923
01:01:24,160 --> 01:01:25,839
next we might want to actually sign into

1924
01:01:25,839 --> 01:01:27,599
something so we open our edge browser

1925
01:01:27,599 --> 01:01:30,640
and again msl is present and this is why

1926
01:01:30,640 --> 01:01:32,640
edge is the first application that's

1927
01:01:32,640 --> 01:01:34,319
able to plug into the java broker is

1928
01:01:34,319 --> 01:01:36,640
because emcell is a hard requirement to

1929
01:01:36,640 --> 01:01:38,400
interface with the java broker

1930
01:01:38,400 --> 01:01:39,920
anything that's going to interface with

1931
01:01:39,920 --> 01:01:42,000
the java broker must use the m cell

1932
01:01:42,000 --> 01:01:44,559
library so on mac os or apple gave us an

1933
01:01:44,559 --> 01:01:46,400
os level redirection

1934
01:01:46,400 --> 01:01:48,240
capability we don't have something

1935
01:01:48,240 --> 01:01:50,799
similar on linux so on linux any app

1936
01:01:50,799 --> 01:01:53,520
that we want to participate in sso and

1937
01:01:53,520 --> 01:01:56,000
use that prt and pass those conditional

1938
01:01:56,000 --> 01:01:58,319
access policies needs to have msl built

1939
01:01:58,319 --> 01:01:59,920
into it so we've worked with the edge

1940
01:01:59,920 --> 01:02:02,799
team to do this on the edge for linux

1941
01:02:02,799 --> 01:02:04,480
build

1942
01:02:04,480 --> 01:02:06,319
so just like before we have compliance

1943
01:02:06,319 --> 01:02:08,799
information flowing through to azure id

1944
01:02:08,799 --> 01:02:10,720
my user might go to an application

1945
01:02:10,720 --> 01:02:12,559
request a token

1946
01:02:12,559 --> 01:02:15,440
and we go to evaluate conditional access

1947
01:02:15,440 --> 01:02:16,960
just like before we need to make sure

1948
01:02:16,960 --> 01:02:18,720
that the user's in a compliant state

1949
01:02:18,720 --> 01:02:20,400
that they've done their mfa whatever

1950
01:02:20,400 --> 01:02:22,000
controls are in place

1951
01:02:22,000 --> 01:02:23,520
if everything's good the token is

1952
01:02:23,520 --> 01:02:25,520
returned to the java broker the java

1953
01:02:25,520 --> 01:02:27,280
broker returns the token to the

1954
01:02:27,280 --> 01:02:30,079
application and the application uses the

1955
01:02:30,079 --> 01:02:32,559
token to access the app so i can open

1956
01:02:32,559 --> 01:02:35,599
edge on my device i can use the prt to

1957
01:02:35,599 --> 01:02:37,680
get single sign-on into resources and i

1958
01:02:37,680 --> 01:02:39,599
can satisfy device-based conditional

1959
01:02:39,599 --> 01:02:41,839
access policies so this is a new

1960
01:02:41,839 --> 01:02:44,160
capability that's coming in the future

1961
01:02:44,160 --> 01:02:46,079
so something to look forward to and just

1962
01:02:46,079 --> 01:02:48,160
remember like we said earlier the two

1963
01:02:48,160 --> 01:02:50,559
things we want on any device are sso and

1964
01:02:50,559 --> 01:02:52,240
device compliance and we're looking to

1965
01:02:52,240 --> 01:02:55,038
deliver that here

1966
01:02:55,200 --> 01:02:57,200
so let's recap and talk about what you

1967
01:02:57,200 --> 01:02:59,760
can go do in your own environment

1968
01:02:59,760 --> 01:03:00,559
so

1969
01:03:00,559 --> 01:03:02,559
the first thing is understand issues

1970
01:03:02,559 --> 01:03:04,640
with prompting talk to your identity and

1971
01:03:04,640 --> 01:03:06,480
access management team if you're not on

1972
01:03:06,480 --> 01:03:08,160
that team understand what your

1973
01:03:08,160 --> 01:03:10,160
conditional access policies look like

1974
01:03:10,160 --> 01:03:11,920
use those workbooks that we built so

1975
01:03:11,920 --> 01:03:13,760
that you can evaluate do i have a

1976
01:03:13,760 --> 01:03:15,680
prompting problem who's it occurring

1977
01:03:15,680 --> 01:03:17,760
with what type of devices

1978
01:03:17,760 --> 01:03:18,799
is it occurring with and what

1979
01:03:18,799 --> 01:03:21,440
applications is it occurring with

1980
01:03:21,440 --> 01:03:23,839
next modernize your linux server access

1981
01:03:23,839 --> 01:03:25,599
so that they can be treated like any

1982
01:03:25,599 --> 01:03:27,039
other resource subject to these

1983
01:03:27,039 --> 01:03:29,440
conditional access zero trust policies

1984
01:03:29,440 --> 01:03:32,240
so start playing around and deploying

1985
01:03:32,240 --> 01:03:34,319
the linux server sign-in via ssh

1986
01:03:34,319 --> 01:03:37,520
capability protected by ca

1987
01:03:37,520 --> 01:03:39,039
integrate your client os's with the

1988
01:03:39,039 --> 01:03:41,520
cloud to improve user experience and

1989
01:03:41,520 --> 01:03:44,240
security on mac os this means get your

1990
01:03:44,240 --> 01:03:46,559
devices into mdm management that can be

1991
01:03:46,559 --> 01:03:49,119
via intune or another third-party mdm so

1992
01:03:49,119 --> 01:03:51,440
that you can use the device state in

1993
01:03:51,440 --> 01:03:54,160
conditional access and then deploy sso

1994
01:03:54,160 --> 01:03:55,760
so we definitely want customers to be

1995
01:03:55,760 --> 01:03:57,920
deploying the azure ed sso extension and

1996
01:03:57,920 --> 01:03:59,760
if you still have those on-prem kerberos

1997
01:03:59,760 --> 01:04:01,520
apps think about modernizing with

1998
01:04:01,520 --> 01:04:03,760
apple's kerberos sso extension as well

1999
01:04:03,760 --> 01:04:06,000
move away from that ldap bind

2000
01:04:06,000 --> 01:04:08,400
and then finally for your linux clients

2001
01:04:08,400 --> 01:04:10,160
you can start formulating your

2002
01:04:10,160 --> 01:04:12,160
conditional access policies now to give

2003
01:04:12,160 --> 01:04:14,480
yourself some support for linux so today

2004
01:04:14,480 --> 01:04:16,240
like i laid out you can use linux as a

2005
01:04:16,240 --> 01:04:17,920
device platform to provide some

2006
01:04:17,920 --> 01:04:19,839
compensating controls for your linux

2007
01:04:19,839 --> 01:04:22,240
users and in the future start preparing

2008
01:04:22,240 --> 01:04:25,440
for us to have mdm and sso on linux just

2009
01:04:25,440 --> 01:04:27,760
like we have on mac os

2010
01:04:27,760 --> 01:04:29,760
and with that thank you the slides will

2011
01:04:29,760 --> 01:04:31,839
be available at aka dot ms slash

2012
01:04:31,839 --> 01:04:34,240
aadbtv2022

2013
01:04:34,240 --> 01:04:35,599
and please let us know if you have any

2014
01:04:35,599 --> 01:04:37,119
questions

2015
01:04:37,119 --> 01:04:40,280
thank you

