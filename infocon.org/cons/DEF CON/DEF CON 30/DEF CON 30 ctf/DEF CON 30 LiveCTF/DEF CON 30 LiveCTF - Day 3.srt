1
00:00:00,000 --> 00:00:18,769
[Music]

2
00:00:22,560 --> 00:00:25,560
so

3
00:00:30,790 --> 00:01:03,540
[Music]

4
00:01:06,120 --> 00:01:16,360
[Music]

5
00:01:17,360 --> 00:01:20,360
so

6
00:01:23,560 --> 00:01:54,399
[Music]

7
00:01:57,270 --> 00:02:00,470
[Music]

8
00:02:04,760 --> 00:02:13,040
[Music]

9
00:02:13,040 --> 00:02:15,870
so

10
00:02:15,870 --> 00:02:34,530
[Music]

11
00:02:42,720 --> 00:02:53,470
[Music]

12
00:03:00,590 --> 00:03:06,160
[Music]

13
00:03:06,160 --> 00:03:06,540
[Applause]

14
00:03:06,540 --> 00:03:19,888
[Music]

15
00:03:26,670 --> 00:03:33,759
[Music]

16
00:03:39,050 --> 00:03:44,449
[Music]

17
00:03:50,000 --> 00:03:59,800
[Music]

18
00:04:16,579 --> 00:04:50,080
[Music]

19
00:04:50,080 --> 00:04:51,370
so

20
00:04:51,370 --> 00:05:17,949
[Music]

21
00:05:21,690 --> 00:06:09,389
[Music]

22
00:06:11,759 --> 00:06:14,060
so

23
00:06:14,060 --> 00:06:24,639
[Music]

24
00:06:24,639 --> 00:06:25,690
so

25
00:06:25,690 --> 00:06:28,759
[Music]

26
00:06:37,660 --> 00:06:40,869
[Music]

27
00:06:43,650 --> 00:06:51,599
[Music]

28
00:07:00,420 --> 00:07:03,609
[Music]

29
00:07:27,520 --> 00:07:30,599
[Music]

30
00:07:42,550 --> 00:07:45,610
[Music]

31
00:07:48,460 --> 00:07:51,599
[Music]

32
00:08:00,510 --> 00:08:03,620
[Music]

33
00:08:12,480 --> 00:08:16,439
[Music]

34
00:08:18,500 --> 00:08:21,660
[Music]

35
00:08:25,690 --> 00:08:28,910
[Music]

36
00:08:33,490 --> 00:08:36,610
[Music]

37
00:08:51,440 --> 00:09:56,249
[Music]

38
00:10:01,060 --> 00:10:07,969
[Music]

39
00:10:12,040 --> 00:10:53,209
[Music]

40
00:11:03,150 --> 00:11:06,079
[Music]

41
00:11:06,079 --> 00:11:09,079
so

42
00:11:14,180 --> 00:11:17,410
[Music]

43
00:11:21,040 --> 00:11:24,040
so

44
00:11:24,340 --> 00:11:32,240
[Music]

45
00:11:32,240 --> 00:11:33,630
so

46
00:11:33,630 --> 00:11:55,080
[Music]

47
00:11:57,710 --> 00:12:08,399
[Music]

48
00:12:08,399 --> 00:12:09,780
down

49
00:12:09,780 --> 00:12:12,970
[Music]

50
00:12:14,240 --> 00:12:17,240
so

51
00:12:25,910 --> 00:12:31,440
[Music]

52
00:12:31,440 --> 00:12:34,370
so

53
00:12:34,370 --> 00:12:54,080
[Music]

54
00:12:59,260 --> 00:13:17,870
[Music]

55
00:13:21,070 --> 00:13:34,340
[Music]

56
00:13:37,350 --> 00:13:39,199
[Music]

57
00:13:39,199 --> 00:13:42,199
so

58
00:13:48,430 --> 00:13:53,040
[Music]

59
00:13:53,040 --> 00:13:56,040
so

60
00:13:56,930 --> 00:14:06,800
[Music]

61
00:14:06,800 --> 00:14:09,610
so

62
00:14:09,610 --> 00:14:28,000
[Music]

63
00:14:28,079 --> 00:14:30,130
minutes

64
00:14:30,130 --> 00:15:31,600
[Music]

65
00:15:31,600 --> 00:15:34,600
so

66
00:15:35,960 --> 00:15:45,379
[Music]

67
00:15:45,519 --> 00:15:48,519
so

68
00:15:57,519 --> 00:16:00,519
so

69
00:16:01,860 --> 00:16:29,379
[Music]

70
00:16:31,850 --> 00:17:22,799
[Music]

71
00:17:22,799 --> 00:17:25,799
so

72
00:17:31,600 --> 00:18:31,329
[Music]

73
00:18:35,490 --> 00:20:04,920
[Music]

74
00:20:04,960 --> 00:20:07,039
good morning and welcome back to day

75
00:20:07,039 --> 00:20:10,320
three of hackasat here at defcon ctf 30.

76
00:20:10,320 --> 00:20:11,760
let's get ready to do it

77
00:20:11,760 --> 00:20:14,960
not hack i said i did it i did it i was

78
00:20:14,960 --> 00:20:16,159
so afraid it was gonna do it welcome

79
00:20:16,159 --> 00:20:18,080
back to live ctf listen we're gonna edit

80
00:20:18,080 --> 00:20:20,240
that on the on the vod we're going to

81
00:20:20,240 --> 00:20:21,520
change it

82
00:20:21,520 --> 00:20:23,440
welcome back this year no we start over

83
00:20:23,440 --> 00:20:25,760
welcome back to live ctf here at def con

84
00:20:25,760 --> 00:20:28,320
ctf finals defcon 30. let's get right

85
00:20:28,320 --> 00:20:30,080
into it let's let the teams get going

86
00:20:30,080 --> 00:20:31,840
for the semi-final round

87
00:20:31,840 --> 00:20:33,600
five four

88
00:20:33,600 --> 00:20:34,559
three

89
00:20:34,559 --> 00:20:35,360
two

90
00:20:35,360 --> 00:20:36,159
one

91
00:20:36,159 --> 00:20:38,159
go

92
00:20:38,159 --> 00:20:41,679
all right so as you can see uh we are

93
00:20:41,679 --> 00:20:43,120
starting to get a little bit tired here

94
00:20:43,120 --> 00:20:44,559
as we get towards the end of the it's

95
00:20:44,559 --> 00:20:46,400
been a long competition but we are down

96
00:20:46,400 --> 00:20:48,240
to the semi-finals uh so we're gonna

97
00:20:48,240 --> 00:20:49,919
have two semi-finals a day and then the

98
00:20:49,919 --> 00:20:53,120
grand finals and uh these are important

99
00:20:53,120 --> 00:20:54,720
matches like looking at the current

100
00:20:54,720 --> 00:20:56,960
scoreboard of the defcon ctf these

101
00:20:56,960 --> 00:20:59,440
points will affect the final standings

102
00:20:59,440 --> 00:21:01,280
yes absolutely like that we're at the

103
00:21:01,280 --> 00:21:02,960
point where the both the point totals

104
00:21:02,960 --> 00:21:04,799
are going up the amount that teams are

105
00:21:04,799 --> 00:21:06,640
getting for making it further into live

106
00:21:06,640 --> 00:21:09,679
ctf and the teams that are here are all

107
00:21:09,679 --> 00:21:11,440
teams in the top half of the scoreboard

108
00:21:11,440 --> 00:21:13,679
and so this this can change things it

109
00:21:13,679 --> 00:21:16,159
really can definitely let's just uh take

110
00:21:16,159 --> 00:21:17,440
a quick look at each of the teams and

111
00:21:17,440 --> 00:21:19,360
see what they're doing uh starting over

112
00:21:19,360 --> 00:21:22,159
here with uh uh mmm

113
00:21:22,159 --> 00:21:26,240
um pulling up ghidra is that uh

114
00:21:26,240 --> 00:21:28,159
what they were using uh in the previous

115
00:21:28,159 --> 00:21:30,000
matches i don't remember well so they've

116
00:21:30,000 --> 00:21:32,799
changed their players uh before so it's

117
00:21:32,799 --> 00:21:35,280
it's i think jim mo was using ida but um

118
00:21:35,280 --> 00:21:37,679
i'd on windows yes yes but we may have

119
00:21:37,679 --> 00:21:40,799
had uh uh giter before from

120
00:21:40,799 --> 00:21:42,480
uh from robert so i'm not i'm not sure

121
00:21:42,480 --> 00:21:44,799
but right

122
00:21:44,799 --> 00:21:47,440
uh yeah let's uh check with uh starbucks

123
00:21:47,440 --> 00:21:49,520
yeah we can see a bit of a

124
00:21:49,520 --> 00:21:52,000
terminal starting a python let's go

125
00:21:52,000 --> 00:21:53,520
ahead and tell everybody the name of the

126
00:21:53,520 --> 00:21:54,799
challenge got the information on this

127
00:21:54,799 --> 00:21:58,159
one this is called aes of spades ace of

128
00:21:58,159 --> 00:21:59,200
spades

129
00:21:59,200 --> 00:22:00,559
because because really that's what it's

130
00:22:00,559 --> 00:22:02,080
all about right like it's it's very

131
00:22:02,080 --> 00:22:03,679
important that you get the good name the

132
00:22:03,679 --> 00:22:05,760
good pun yes and then you figure out how

133
00:22:05,760 --> 00:22:07,039
to make a challenge right and i

134
00:22:07,039 --> 00:22:09,280
originally made this challenge like i

135
00:22:09,280 --> 00:22:11,120
started making this challenge

136
00:22:11,120 --> 00:22:12,799
and it was like in a

137
00:22:12,799 --> 00:22:16,000
messy state and then uh josh

138
00:22:16,000 --> 00:22:18,080
came in and kind of like uh salvaged it

139
00:22:18,080 --> 00:22:19,440
and like turned it into something that

140
00:22:19,440 --> 00:22:22,000
we see here today so i

141
00:22:22,000 --> 00:22:24,080
don't really know what the challenge is

142
00:22:24,080 --> 00:22:25,919
about except that you know what it was

143
00:22:25,919 --> 00:22:27,840
about originally yes and it's changed

144
00:22:27,840 --> 00:22:29,440
and so we're going to find out right i

145
00:22:29,440 --> 00:22:32,400
mean it does involve aes encryption uh

146
00:22:32,400 --> 00:22:33,520
like that's

147
00:22:33,520 --> 00:22:34,400
that's

148
00:22:34,400 --> 00:22:36,559
definitely still there we can see if we

149
00:22:36,559 --> 00:22:40,000
switch over to mmm

150
00:22:40,000 --> 00:22:41,880
compilation here you can see that

151
00:22:41,880 --> 00:22:45,760
as128 in it and as128 encrypt so there

152
00:22:45,760 --> 00:22:48,960
is some kind of as encryption um

153
00:22:48,960 --> 00:22:50,400
thing going on here

154
00:22:50,400 --> 00:22:55,159
um so they are they are doing um

155
00:22:55,679 --> 00:22:57,520
a little bit of

156
00:22:57,520 --> 00:22:59,600
you know uh decompilation trying to name

157
00:22:59,600 --> 00:23:01,520
the variables making sense of the pro

158
00:23:01,520 --> 00:23:03,200
what the program is doing so we've been

159
00:23:03,200 --> 00:23:06,000
told that basically uh

160
00:23:06,000 --> 00:23:08,480
it's uh as encryption like it's an

161
00:23:08,480 --> 00:23:10,799
arbitrary right dressed up uh with some

162
00:23:10,799 --> 00:23:13,280
as encryption that's basically uh what

163
00:23:13,280 --> 00:23:16,080
what the challenge is about

164
00:23:16,080 --> 00:23:19,840
if we switch over to

165
00:23:20,559 --> 00:23:22,480
starbucks again we can see that they are

166
00:23:22,480 --> 00:23:24,480
doing some uh using an online

167
00:23:24,480 --> 00:23:26,320
disassembler i thought that was a little

168
00:23:26,320 --> 00:23:28,799
unusual i yeah i was surprised by that

169
00:23:28,799 --> 00:23:31,919
too um so they are i'm not entirely sure

170
00:23:31,919 --> 00:23:33,200
they are like

171
00:23:33,200 --> 00:23:34,880
verifying a couple of oh they're doing

172
00:23:34,880 --> 00:23:36,320
some calculation with some offsets i

173
00:23:36,320 --> 00:23:37,919
want to look at some maybe some op codes

174
00:23:37,919 --> 00:23:38,880
um

175
00:23:38,880 --> 00:23:40,799
yeah oh they're writing a little piece

176
00:23:40,799 --> 00:23:41,679
of

177
00:23:41,679 --> 00:23:43,279
writing a little piece of shell code

178
00:23:43,279 --> 00:23:44,400
right

179
00:23:44,400 --> 00:23:46,320
yeah you can see

180
00:23:46,320 --> 00:23:47,360
uh

181
00:23:47,360 --> 00:23:48,720
yeah so they're putting together a small

182
00:23:48,720 --> 00:23:51,039
piece of shell code

183
00:23:51,039 --> 00:23:53,440
and they really need to learn binges

184
00:23:53,440 --> 00:23:55,360
this is what binge is really good at i'm

185
00:23:55,360 --> 00:23:56,880
trying not to do it too much but i have

186
00:23:56,880 --> 00:23:58,320
to i have to

187
00:23:58,320 --> 00:23:59,360
this is exactly the kind of thing it

188
00:23:59,360 --> 00:24:01,279
works really well for yeah you can stay

189
00:24:01,279 --> 00:24:03,679
right in the one the one app

190
00:24:03,679 --> 00:24:05,200
but yeah it's so building up their

191
00:24:05,200 --> 00:24:06,799
payload using an online disassembler

192
00:24:06,799 --> 00:24:09,360
online assembler rather yeah

193
00:24:09,360 --> 00:24:10,720
and there we go we got a brief little

194
00:24:10,720 --> 00:24:11,760
glance at the source code and they're

195
00:24:11,760 --> 00:24:13,760
off again so this is uh interesting

196
00:24:13,760 --> 00:24:16,080
because we can see that uh in contrast

197
00:24:16,080 --> 00:24:19,120
to mmm who went like started more like

198
00:24:19,120 --> 00:24:20,640
analyzing the code right they went

199
00:24:20,640 --> 00:24:23,039
straight into putting together some kind

200
00:24:23,039 --> 00:24:25,679
of payload um you can see here their

201
00:24:25,679 --> 00:24:28,320
exploit scripts um being put together

202
00:24:28,320 --> 00:24:29,919
this one and shell code there that has

203
00:24:29,919 --> 00:24:32,400
been assembled and i'm not entirely sure

204
00:24:32,400 --> 00:24:34,080
what the shotgun was doing i saw that it

205
00:24:34,080 --> 00:24:36,640
was um it looked like a pointer address

206
00:24:36,640 --> 00:24:38,320
it was using some kind of pointer within

207
00:24:38,320 --> 00:24:40,320
the program and there was a syscall in

208
00:24:40,320 --> 00:24:41,679
there

209
00:24:41,679 --> 00:24:43,840
maybe changing memory protections

210
00:24:43,840 --> 00:24:44,720
um

211
00:24:44,720 --> 00:24:47,200
well it says it's it's code and it looks

212
00:24:47,200 --> 00:24:48,559
like they're dropping i mean right so it

213
00:24:48,559 --> 00:24:50,480
could be you know an m protect plus

214
00:24:50,480 --> 00:24:52,480
shell code right yeah

215
00:24:52,480 --> 00:24:53,760
yeah but the thing they have labeled

216
00:24:53,760 --> 00:24:55,520
code looked like it had a

217
00:24:55,520 --> 00:24:57,600
is that a pointer um

218
00:24:57,600 --> 00:24:59,600
no we'll see i think it is if we do

219
00:24:59,600 --> 00:25:00,960
switch over to

220
00:25:00,960 --> 00:25:03,279
mmm we see that they have also started

221
00:25:03,279 --> 00:25:05,520
um

222
00:25:05,520 --> 00:25:08,480
uh putting together uh an exploit script

223
00:25:08,480 --> 00:25:10,080
here you can see they have this

224
00:25:10,080 --> 00:25:12,720
calculate key function

225
00:25:12,720 --> 00:25:14,720
uh and so

226
00:25:14,720 --> 00:25:17,360
i guess that uh they

227
00:25:17,360 --> 00:25:20,000
in this program your uh

228
00:25:20,000 --> 00:25:22,559
um resulting payload

229
00:25:22,559 --> 00:25:24,240
it could be like the result of the

230
00:25:24,240 --> 00:25:26,400
encryption uh

231
00:25:26,400 --> 00:25:28,400
so i mean i will say watch it watch the

232
00:25:28,400 --> 00:25:30,720
starbucks like i

233
00:25:30,720 --> 00:25:31,840
it looks like they know what they're

234
00:25:31,840 --> 00:25:35,679
doing they certainly uh are making um

235
00:25:35,679 --> 00:25:38,080
making an attempt to uh

236
00:25:38,080 --> 00:25:41,840
to the they're extoring the uh the iv

237
00:25:41,840 --> 00:25:45,039
with uh their shell code oh okay so like

238
00:25:45,039 --> 00:25:46,960
uh and that sure that sure sounds like a

239
00:25:46,960 --> 00:25:49,120
thing that that would be useful

240
00:25:49,120 --> 00:25:50,000
yeah

241
00:25:50,000 --> 00:25:52,559
yeah so here okay so the payload is the

242
00:25:52,559 --> 00:25:56,159
iv oh interesting okay so the the iv

243
00:25:56,159 --> 00:25:58,080
that's used for the encryption

244
00:25:58,080 --> 00:25:59,520
is part of the payload and so actually

245
00:25:59,520 --> 00:26:00,720
that makes a lot of sense we're seeing

246
00:26:00,720 --> 00:26:02,880
them xor that in

247
00:26:02,880 --> 00:26:04,640
yeah yeah they saw that very very

248
00:26:04,640 --> 00:26:06,799
quickly certainly uh faster than we

249
00:26:06,799 --> 00:26:08,240
could follow along as they as i looked

250
00:26:08,240 --> 00:26:10,799
at it makes sense though these are our

251
00:26:10,799 --> 00:26:12,080
um

252
00:26:12,080 --> 00:26:14,720
uh our top uh our top teams oh so

253
00:26:14,720 --> 00:26:16,480
actually that where did that oh okay so

254
00:26:16,480 --> 00:26:17,919
that was memory

255
00:26:17,919 --> 00:26:19,200
that was a piece of memory that they

256
00:26:19,200 --> 00:26:20,960
pulled out of the binary and they're

257
00:26:20,960 --> 00:26:22,720
xoring that with the code which is the

258
00:26:22,720 --> 00:26:25,279
the iv oh okay that's interesting but

259
00:26:25,279 --> 00:26:26,640
it's it's actually interesting to see

260
00:26:26,640 --> 00:26:27,760
now so they are looking now in the

261
00:26:27,760 --> 00:26:30,559
debugger i guess they are uh now testing

262
00:26:30,559 --> 00:26:33,120
out their uh payload to see if it is

263
00:26:33,120 --> 00:26:34,240
working

264
00:26:34,240 --> 00:26:36,080
uh so this could be this could be a

265
00:26:36,080 --> 00:26:39,200
quick one um yeah like i mean i'm not

266
00:26:39,200 --> 00:26:40,720
sure exactly how many steps there are to

267
00:26:40,720 --> 00:26:42,240
this but you know if we're already

268
00:26:42,240 --> 00:26:43,679
seeing some shell code being thrown in

269
00:26:43,679 --> 00:26:45,840
there uh there might not be uh too many

270
00:26:45,840 --> 00:26:48,640
steps involved here uh at all

271
00:26:48,640 --> 00:26:51,120
uh if we switch over back to

272
00:26:51,120 --> 00:26:53,760
mmm we can see that they also they have

273
00:26:53,760 --> 00:26:55,279
this calculation function they put a

274
00:26:55,279 --> 00:26:56,960
bunch of like a's and b's in there and

275
00:26:56,960 --> 00:26:58,720
from that they're calculating a key and

276
00:26:58,720 --> 00:26:59,840
an iv

277
00:26:59,840 --> 00:27:02,000
um and we can see they're starting to

278
00:27:02,000 --> 00:27:03,679
put together the interaction to send

279
00:27:03,679 --> 00:27:05,440
this key send the iv

280
00:27:05,440 --> 00:27:07,679
are receiving an address there's maybe

281
00:27:07,679 --> 00:27:09,600
like a leak like an intentional thing we

282
00:27:09,600 --> 00:27:11,120
would just give them something there

283
00:27:11,120 --> 00:27:13,760
yeah and i don't i don't see them in yet

284
00:27:13,760 --> 00:27:15,279
creating that key stuff i mean looking

285
00:27:15,279 --> 00:27:16,559
at this now it looks like starbucks is a

286
00:27:16,559 --> 00:27:18,480
little bit ahead just based on how

287
00:27:18,480 --> 00:27:19,919
they've already got the memory address

288
00:27:19,919 --> 00:27:21,440
pulled out they're xoring with the iv

289
00:27:21,440 --> 00:27:24,640
which is their code so i'm seeing that

290
00:27:24,640 --> 00:27:25,600
uh

291
00:27:25,600 --> 00:27:27,760
that looks certainly further along but

292
00:27:27,760 --> 00:27:30,159
and we did see starbucks show up earlier

293
00:27:30,159 --> 00:27:32,640
into that payload and start it that said

294
00:27:32,640 --> 00:27:34,159
i would say that first person to start

295
00:27:34,159 --> 00:27:35,360
writing their payload script has not

296
00:27:35,360 --> 00:27:37,120
been an indicator of success right it's

297
00:27:37,120 --> 00:27:37,919
been

298
00:27:37,919 --> 00:27:39,440
sometimes slow and steady wins the race

299
00:27:39,440 --> 00:27:41,279
and sometimes quick to get your script

300
00:27:41,279 --> 00:27:42,799
out does and so it's right not

301
00:27:42,799 --> 00:27:45,279
consistent we saw mmm here trying

302
00:27:45,279 --> 00:27:47,360
testing their payload i saw them like

303
00:27:47,360 --> 00:27:49,360
connecting to a local uh

304
00:27:49,360 --> 00:27:50,399
setup

305
00:27:50,399 --> 00:27:54,399
um of the challenge um

306
00:27:54,399 --> 00:27:56,960
it it was not a successful exploit at

307
00:27:56,960 --> 00:27:58,720
least that's all i know it was hard to

308
00:27:58,720 --> 00:28:02,000
tell like to what extent it was uh

309
00:28:02,000 --> 00:28:03,679
you know successful or not the further

310
00:28:03,679 --> 00:28:04,880
along we get in this competition the

311
00:28:04,880 --> 00:28:06,480
more we need pause

312
00:28:06,480 --> 00:28:08,880
because these these players are so fast

313
00:28:08,880 --> 00:28:10,399
yeah uh just trying to kind of keep up

314
00:28:10,399 --> 00:28:12,000
with them uh we did see some of the

315
00:28:12,000 --> 00:28:14,399
classic aaa's being put in on starbugs

316
00:28:14,399 --> 00:28:16,320
just a second ago off off camera right

317
00:28:16,320 --> 00:28:18,880
they're also checking uh memory mappings

318
00:28:18,880 --> 00:28:20,640
there was it or

319
00:28:20,640 --> 00:28:22,000
yeah i don't know if they're searching

320
00:28:22,000 --> 00:28:23,840
for their values that they that they

321
00:28:23,840 --> 00:28:26,720
send in um

322
00:28:26,720 --> 00:28:28,880
right

323
00:28:28,880 --> 00:28:30,320
so just to

324
00:28:30,320 --> 00:28:32,640
do quickly a little bit recap of where

325
00:28:32,640 --> 00:28:34,399
we are in the tournament this is one of

326
00:28:34,399 --> 00:28:35,919
the first semi-finals between starbucks

327
00:28:35,919 --> 00:28:38,159
and mmm and then right after we will

328
00:28:38,159 --> 00:28:39,840
have the second uh semi-finals between

329
00:28:39,840 --> 00:28:42,320
perfect root and rekka pig and uh you

330
00:28:42,320 --> 00:28:43,919
know the winners of those respective

331
00:28:43,919 --> 00:28:46,799
matches uh go to the uh finals

332
00:28:46,799 --> 00:28:47,840
um

333
00:28:47,840 --> 00:28:49,279
and uh

334
00:28:49,279 --> 00:28:51,520
these teams i'm trying to look over a

335
00:28:51,520 --> 00:28:54,159
little bit at the scoreboard of the

336
00:28:54,159 --> 00:28:55,120
of the

337
00:28:55,120 --> 00:28:57,520
main event and uh

338
00:28:57,520 --> 00:28:59,120
yeah these

339
00:28:59,120 --> 00:29:03,279
are all in the top half at least of the

340
00:29:03,279 --> 00:29:05,679
scoreboard actually rekopik might might

341
00:29:05,679 --> 00:29:07,440
not be looking at that it's it's really

342
00:29:07,440 --> 00:29:09,360
all right okay so so in order relative

343
00:29:09,360 --> 00:29:11,279
to one another on the top scoreboard um

344
00:29:11,279 --> 00:29:14,640
mmm isn't in number one uh but perfect

345
00:29:14,640 --> 00:29:17,679
root is in number uh four and i would

346
00:29:17,679 --> 00:29:20,080
say they're within striking distance

347
00:29:20,080 --> 00:29:21,840
right so at four they're about four

348
00:29:21,840 --> 00:29:23,679
thousand points behind

349
00:29:23,679 --> 00:29:26,080
um mmm although uh actually a little bit

350
00:29:26,080 --> 00:29:27,360
less they're almost about three thousand

351
00:29:27,360 --> 00:29:28,320
and

352
00:29:28,320 --> 00:29:30,559
it depends though if if mmm wins this

353
00:29:30,559 --> 00:29:32,480
they've basically fended off any attack

354
00:29:32,480 --> 00:29:34,000
even if they lose in the finals i don't

355
00:29:34,000 --> 00:29:35,120
think anyone will be able to kind of

356
00:29:35,120 --> 00:29:37,520
close the gap uh to them based on this

357
00:29:37,520 --> 00:29:40,080
event uh but if they lose now and

358
00:29:40,080 --> 00:29:41,440
perfect root ends up winning in the

359
00:29:41,440 --> 00:29:43,039
finals yeah that could be that's gonna

360
00:29:43,039 --> 00:29:44,480
put it real close it's gonna put it very

361
00:29:44,480 --> 00:29:45,840
very close and it will really depend on

362
00:29:45,840 --> 00:29:46,960
how they do in the main event right

363
00:29:46,960 --> 00:29:48,480
let's not forget that they have like

364
00:29:48,480 --> 00:29:50,080
almost uh well it's like a couple of

365
00:29:50,080 --> 00:29:51,679
hours yeah it's three and a half hours

366
00:29:51,679 --> 00:29:53,360
of this yes exactly left in the game

367
00:29:53,360 --> 00:29:54,799
here too

368
00:29:54,799 --> 00:29:58,320
so uh definitely a really exciting um

369
00:29:58,320 --> 00:30:00,559
you know it's it's always fun when you

370
00:30:00,559 --> 00:30:03,039
know uh it's not the the competition is

371
00:30:03,039 --> 00:30:05,440
not decided until like yeah like the

372
00:30:05,440 --> 00:30:06,880
last it could go down to the wire you

373
00:30:06,880 --> 00:30:08,240
want it to you want it to be i mean as

374
00:30:08,240 --> 00:30:09,440
an organizer you want it to be as a

375
00:30:09,440 --> 00:30:10,960
player you would love to win it early

376
00:30:10,960 --> 00:30:13,360
and i mean i'm sure sure it is a blowout

377
00:30:13,360 --> 00:30:14,960
you know when you're playing a ctf like

378
00:30:14,960 --> 00:30:16,960
you're how many times have you not been

379
00:30:16,960 --> 00:30:18,240
thinking like oh can we just not like

380
00:30:18,240 --> 00:30:20,240
solve all challenges so i can go to bed

381
00:30:20,240 --> 00:30:22,880
uh and but yeah that's not gonna happen

382
00:30:22,880 --> 00:30:25,120
in the defcon ctf

383
00:30:25,120 --> 00:30:26,640
okay yeah so i'm seeing starbucks over

384
00:30:26,640 --> 00:30:28,240
here is definitely continuing to tweak

385
00:30:28,240 --> 00:30:29,919
their uh their script by pulling out

386
00:30:29,919 --> 00:30:31,120
their their

387
00:30:31,120 --> 00:30:32,720
uh the pointers of their

388
00:30:32,720 --> 00:30:34,080
the memory address that they're using

389
00:30:34,080 --> 00:30:36,080
they're verifying that memory and

390
00:30:36,080 --> 00:30:38,240
updating the uh the iv the because it's

391
00:30:38,240 --> 00:30:40,399
just called being made there

392
00:30:40,399 --> 00:30:42,399
uh and then they are

393
00:30:42,399 --> 00:30:43,520
trying to figure out what happens

394
00:30:43,520 --> 00:30:44,559
afterwards

395
00:30:44,559 --> 00:30:45,840
uh this might be it are we switching

396
00:30:45,840 --> 00:30:47,600
over to live

397
00:30:47,600 --> 00:30:49,440
oh was did it work

398
00:30:49,440 --> 00:30:51,679
uh they looked like they were

399
00:30:51,679 --> 00:30:53,200
it was

400
00:30:53,200 --> 00:30:56,640
that's this is going to be i mean

401
00:30:56,640 --> 00:30:59,519
this can is going to be tight

402
00:30:59,519 --> 00:31:01,840
i think both teams have pretty good

403
00:31:01,840 --> 00:31:03,440
progress on this

404
00:31:03,440 --> 00:31:05,120
um

405
00:31:05,120 --> 00:31:06,640
so

406
00:31:06,640 --> 00:31:08,320
yeah no they have some bad instruction

407
00:31:08,320 --> 00:31:09,519
there there's something wrong yeah

408
00:31:09,519 --> 00:31:10,799
there's a bug earlier there's something

409
00:31:10,799 --> 00:31:13,840
wrong in their uh and their exploits um

410
00:31:13,840 --> 00:31:14,960
so

411
00:31:14,960 --> 00:31:17,600
not there quite yet they're going back

412
00:31:17,600 --> 00:31:21,600
to the assembler oh they switched it to

413
00:31:21,600 --> 00:31:23,120
there was a typo there they missed and

414
00:31:23,120 --> 00:31:27,518
they missed a zero at the end of uh

415
00:31:27,840 --> 00:31:29,600
yeah and so everyone shifted off so the

416
00:31:29,600 --> 00:31:31,120
value was wrong and this is the thing

417
00:31:31,120 --> 00:31:34,320
like these saw that's the little one

418
00:31:34,320 --> 00:31:35,600
hold on did they just switch they just

419
00:31:35,600 --> 00:31:37,360
switched to throwing live

420
00:31:37,360 --> 00:31:39,200
they went through it live

421
00:31:39,200 --> 00:31:41,200
are they going for it

422
00:31:41,200 --> 00:31:43,120
oh they are typing it's going fast i'm

423
00:31:43,120 --> 00:31:47,239
just checking here oh no

424
00:31:50,960 --> 00:31:53,600
oh they're going they're going

425
00:31:53,600 --> 00:31:55,679
oh it did not work

426
00:31:55,679 --> 00:31:57,039
uh

427
00:31:57,039 --> 00:31:59,760
that's such port

428
00:31:59,760 --> 00:32:02,879
oh there it is here it is here it is

429
00:32:03,760 --> 00:32:05,679
oh typo there it is starbucks

430
00:32:05,679 --> 00:32:07,200
congratulations

431
00:32:07,200 --> 00:32:08,799
well done

432
00:32:08,799 --> 00:32:11,840
a super fast speed race well done on the

433
00:32:11,840 --> 00:32:14,559
challenge ace of spades congratulations

434
00:32:14,559 --> 00:32:17,120
to starbucks who makes it to our finals

435
00:32:17,120 --> 00:32:18,559
we'll see you back here for our next

436
00:32:18,559 --> 00:32:21,559
round

437
00:32:22,160 --> 00:33:28,979
[Music]

438
00:33:31,790 --> 00:33:38,680
[Music]

439
00:33:42,760 --> 00:33:45,279
[Music]

440
00:33:45,279 --> 00:33:48,279
so

441
00:33:48,320 --> 00:34:23,929
[Music]

442
00:34:33,860 --> 00:34:37,059
[Music]

443
00:34:40,639 --> 00:34:43,639
so

444
00:34:44,900 --> 00:35:00,720
[Music]

445
00:35:00,720 --> 00:35:01,870
children

446
00:35:01,870 --> 00:35:21,839
[Music]

447
00:35:21,839 --> 00:35:24,839
so

448
00:35:28,420 --> 00:35:43,680
[Music]

449
00:35:49,599 --> 00:35:52,599
so

450
00:35:56,620 --> 00:36:02,600
[Music]

451
00:36:03,680 --> 00:36:05,080
so

452
00:36:05,080 --> 00:36:16,480
[Music]

453
00:36:16,480 --> 00:36:18,370
so

454
00:36:18,370 --> 00:36:24,799
[Music]

455
00:36:32,640 --> 00:36:34,390
so

456
00:36:34,390 --> 00:36:48,580
[Music]

457
00:36:51,780 --> 00:37:05,050
[Music]

458
00:37:08,060 --> 00:37:11,389
[Music]

459
00:37:12,480 --> 00:37:15,480
so

460
00:37:19,140 --> 00:37:25,839
[Music]

461
00:37:25,839 --> 00:37:27,630
so

462
00:37:27,630 --> 00:37:58,710
[Music]

463
00:38:00,860 --> 00:38:07,839
[Music]

464
00:38:07,839 --> 00:38:10,839
so

465
00:38:11,080 --> 00:39:05,788
[Music]

466
00:39:06,160 --> 00:39:08,790
so

467
00:39:08,790 --> 00:39:11,050
[Music]

468
00:39:11,050 --> 00:39:11,440
[Applause]

469
00:39:11,440 --> 00:39:19,190
[Music]

470
00:39:19,200 --> 00:39:22,200
so

471
00:39:32,160 --> 00:39:33,900
so

472
00:39:33,900 --> 00:39:43,710
[Music]

473
00:39:47,920 --> 00:39:50,920
so

474
00:39:51,420 --> 00:40:00,090
[Music]

475
00:40:02,560 --> 00:40:55,100
[Music]

476
00:41:04,280 --> 00:42:02,030
[Music]

477
00:42:06,880 --> 00:42:09,880
so

478
00:42:10,390 --> 00:44:04,479
[Music]

479
00:44:19,070 --> 00:44:27,790
[Music]

480
00:44:28,160 --> 00:44:30,880
so

481
00:44:30,880 --> 00:44:37,019
[Music]

482
00:44:40,840 --> 00:44:43,969
[Music]

483
00:44:48,650 --> 00:44:51,949
[Music]

484
00:44:54,820 --> 00:45:20,099
[Music]

485
00:45:22,230 --> 00:45:47,360
[Music]

486
00:45:51,750 --> 00:45:56,929
[Music]

487
00:46:00,940 --> 00:46:04,019
[Music]

488
00:46:06,410 --> 00:46:10,480
[Music]

489
00:46:21,460 --> 00:46:41,780
[Music]

490
00:46:46,820 --> 00:46:54,760
[Music]

491
00:47:00,080 --> 00:47:05,160
[Music]

492
00:47:12,810 --> 00:47:24,340
[Music]

493
00:47:31,390 --> 00:47:42,779
[Music]

494
00:47:46,030 --> 00:47:49,159
[Music]

495
00:47:53,020 --> 00:47:56,150
[Music]

496
00:48:22,620 --> 00:48:25,690
[Music]

497
00:48:30,930 --> 00:48:36,190
[Music]

498
00:48:45,910 --> 00:48:55,038
[Music]

499
00:49:13,000 --> 00:49:37,980
[Music]

500
00:49:40,420 --> 00:49:43,769
[Music]

501
00:49:52,660 --> 00:49:55,710
[Music]

502
00:50:10,540 --> 00:50:17,239
[Music]

503
00:50:19,450 --> 00:50:25,129
[Music]

504
00:50:31,850 --> 00:50:49,409
[Music]

505
00:50:55,800 --> 00:51:01,359
[Music]

506
00:51:01,359 --> 00:51:04,359
so

507
00:51:04,810 --> 00:51:18,049
[Music]

508
00:51:23,440 --> 00:51:31,030
[Music]

509
00:51:35,480 --> 00:51:41,149
[Music]

510
00:51:50,200 --> 00:51:59,839
[Music]

511
00:52:23,330 --> 00:52:26,500
[Music]

512
00:52:30,140 --> 00:53:26,150
[Music]

513
00:53:55,110 --> 00:53:58,349
[Music]

514
00:54:04,810 --> 00:54:50,090
[Music]

515
00:54:51,839 --> 00:54:53,920
foreign

516
00:54:55,490 --> 00:54:58,700
[Music]

517
00:55:14,000 --> 00:55:17,000
so

518
00:55:56,480 --> 00:55:58,110
so

519
00:55:58,110 --> 00:56:15,099
[Music]

520
00:56:17,839 --> 00:56:20,839
so

521
00:56:23,260 --> 00:56:28,419
[Music]

522
00:57:15,520 --> 00:57:20,520
[Music]

523
00:58:02,380 --> 00:58:26,850
[Music]

524
00:58:45,950 --> 00:58:58,968
[Music]

525
00:59:04,970 --> 00:59:07,040
[Music]

526
00:59:07,040 --> 00:59:10,040
so

527
00:59:12,150 --> 00:59:15,820
[Music]

528
00:59:17,980 --> 00:59:31,580
[Music]

529
00:59:31,580 --> 00:59:32,910
[Applause]

530
00:59:32,910 --> 01:00:22,400
[Music]

531
01:00:22,400 --> 01:00:23,720
so

532
01:00:23,720 --> 01:00:46,160
[Music]

533
01:00:46,160 --> 01:00:47,230
so

534
01:00:47,230 --> 01:01:57,440
[Music]

535
01:01:57,440 --> 01:02:00,440
so

536
01:02:01,790 --> 01:02:19,779
[Music]

537
01:02:23,340 --> 01:02:27,999
[Music]

538
01:02:33,140 --> 01:02:37,969
[Music]

539
01:02:40,640 --> 01:02:43,640
so

540
01:02:44,520 --> 01:02:54,000
[Music]

541
01:02:54,000 --> 01:02:57,000
so

542
01:03:11,680 --> 01:04:11,270
[Music]

543
01:04:28,600 --> 01:04:31,670
[Music]

544
01:04:31,670 --> 01:04:32,130
[Applause]

545
01:04:32,130 --> 01:04:46,369
[Music]

546
01:04:49,300 --> 01:04:52,379
[Music]

547
01:04:57,590 --> 01:05:01,609
[Music]

548
01:05:09,790 --> 01:05:12,960
[Music]

549
01:05:19,830 --> 01:05:23,009
[Music]

550
01:05:26,000 --> 01:05:34,709
[Music]

551
01:05:39,530 --> 01:05:42,589
[Music]

552
01:05:43,790 --> 01:05:46,400
[Applause]

553
01:05:46,400 --> 01:06:11,280
[Music]

554
01:06:11,280 --> 01:06:12,960
do

555
01:06:12,960 --> 01:06:25,639
[Music]

556
01:06:28,640 --> 01:06:30,799
hello and welcome back to our second

557
01:06:30,799 --> 01:06:32,799
semi-final round i'm ciphertex here with

558
01:06:32,799 --> 01:06:35,039
zeta2 hello introduced to you sorry and

559
01:06:35,039 --> 01:06:36,640
uh on the line we also have live

560
01:06:36,640 --> 01:06:37,760
overflow

561
01:06:37,760 --> 01:06:40,000
hello i'm back excellent so we got a

562
01:06:40,000 --> 01:06:42,240
three commentator match up today as we

563
01:06:42,240 --> 01:06:44,000
get closer and closer to the finals here

564
01:06:44,000 --> 01:06:45,520
we're going to have a perfect root and

565
01:06:45,520 --> 01:06:47,200
rekta pig and let's just go ahead and

566
01:06:47,200 --> 01:06:49,039
count them down right away everybody

567
01:06:49,039 --> 01:06:51,839
five four three

568
01:06:51,839 --> 01:06:52,720
two

569
01:06:52,720 --> 01:06:53,599
one

570
01:06:53,599 --> 01:06:54,960
go

571
01:06:54,960 --> 01:06:56,240
and we'll quickly switch over to the

572
01:06:56,240 --> 01:06:58,160
teams they're they're ready for this

573
01:06:58,160 --> 01:07:00,640
challenge yeah we saw uh so they've been

574
01:07:00,640 --> 01:07:02,640
given the name of the challenge uh loopy

575
01:07:02,640 --> 01:07:03,520
brain

576
01:07:03,520 --> 01:07:04,880
uh which

577
01:07:04,880 --> 01:07:06,240
and they were told it was an interpreter

578
01:07:06,240 --> 01:07:09,280
all right so where does that take us

579
01:07:09,280 --> 01:07:12,079
i think also the menu is immediately uh

580
01:07:12,079 --> 01:07:14,160
telling the teams what what this is

581
01:07:14,160 --> 01:07:16,400
about yeah they they definitely knew

582
01:07:16,400 --> 01:07:18,240
what sort of uh uh challenges was in

583
01:07:18,240 --> 01:07:19,359
fact we even saw one of the teams

584
01:07:19,359 --> 01:07:21,359
beforehand yeah the web page open with

585
01:07:21,359 --> 01:07:22,799
the spec

586
01:07:22,799 --> 01:07:25,440
for that particular flavor of language

587
01:07:25,440 --> 01:07:26,240
uh

588
01:07:26,240 --> 01:07:27,680
well of language both flavors of

589
01:07:27,680 --> 01:07:30,319
language i guess right i saw um i was

590
01:07:30,319 --> 01:07:31,359
also actually looking at one of the

591
01:07:31,359 --> 01:07:33,039
competitors computers before the start

592
01:07:33,039 --> 01:07:33,839
and

593
01:07:33,839 --> 01:07:36,640
they had like in their exploit template

594
01:07:36,640 --> 01:07:38,559
they already had like helper functions

595
01:07:38,559 --> 01:07:40,839
for uh brain fog code

596
01:07:40,839 --> 01:07:43,359
so yeah they are going they're taking

597
01:07:43,359 --> 01:07:45,440
this seriously

598
01:07:45,440 --> 01:07:47,520
so so wait did i get this correctly you

599
01:07:47,520 --> 01:07:48,960
mentioned them the name and they

600
01:07:48,960 --> 01:07:50,640
immediately knew it was about uh brain

601
01:07:50,640 --> 01:07:52,720
factor yeah yes they knew before they

602
01:07:52,720 --> 01:07:54,480
even showed up they were like they were

603
01:07:54,480 --> 01:07:55,359
ready

604
01:07:55,359 --> 01:07:57,440
uh we've got oh you told them like way

605
01:07:57,440 --> 01:07:59,280
in advance of the name

606
01:07:59,280 --> 01:08:00,720
we do tell every team the name of the

607
01:08:00,720 --> 01:08:02,160
challenge yes like an hour in advance

608
01:08:02,160 --> 01:08:03,359
because we want them to send up the

609
01:08:03,359 --> 01:08:04,880
right person we didn't know i think we

610
01:08:04,880 --> 01:08:06,240
had a problem with our with our stream

611
01:08:06,240 --> 01:08:07,440
capture we may have been having some go

612
01:08:07,440 --> 01:08:08,480
to there but i think we got it all

613
01:08:08,480 --> 01:08:10,319
straightened out now it seems good right

614
01:08:10,319 --> 01:08:12,319
yes a little bit of visual artifact

615
01:08:12,319 --> 01:08:14,160
there so if you're on the stream we

616
01:08:14,160 --> 01:08:15,440
should now be up okay so let's go ahead

617
01:08:15,440 --> 01:08:17,839
and take a look um again they know that

618
01:08:17,839 --> 01:08:19,679
it's an interpreter they know that it's

619
01:08:19,679 --> 01:08:20,799
ponable

620
01:08:20,799 --> 01:08:22,319
and i think this is actually a category

621
01:08:22,319 --> 01:08:23,279
of challenges been around for a long

622
01:08:23,279 --> 01:08:24,960
time in fact we were looking and we

623
01:08:24,960 --> 01:08:26,719
realized that like uh someone had

624
01:08:26,719 --> 01:08:27,839
actually written a friend a friend of

625
01:08:27,839 --> 01:08:29,520
ours had written a version of this like

626
01:08:29,520 --> 01:08:31,839
nine years ago for another ctf that was

627
01:08:31,839 --> 01:08:33,600
a different challenge yes but it has a

628
01:08:33,600 --> 01:08:35,120
lot of similarities very very similar

629
01:08:35,120 --> 01:08:36,158
yeah so we thought it was really funny

630
01:08:36,158 --> 01:08:38,640
it's a common it's a common idea i think

631
01:08:38,640 --> 01:08:40,479
like difficulty wise since carl you

632
01:08:40,479 --> 01:08:41,920
wrote this like how would you rate this

633
01:08:41,920 --> 01:08:43,679
one relative some of the other ones so

634
01:08:43,679 --> 01:08:47,040
the original version of this was

635
01:08:47,040 --> 01:08:49,679
kind of difficult i would say and then

636
01:08:49,679 --> 01:08:50,560
we

637
01:08:50,560 --> 01:08:53,600
toned down the difficulty a bit

638
01:08:53,600 --> 01:08:56,080
so i would say it's still

639
01:08:56,080 --> 01:08:57,439
definitely not one of the easiest

640
01:08:57,439 --> 01:08:59,040
challenges we've had

641
01:08:59,040 --> 01:09:00,880
but i hope it's not one of the most

642
01:09:00,880 --> 01:09:03,120
difficult ones either

643
01:09:03,120 --> 01:09:05,839
i had a quick look at it and immediately

644
01:09:05,839 --> 01:09:07,439
i thought oh that's gonna be an easy

645
01:09:07,439 --> 01:09:09,520
challenge until i heard about

646
01:09:09,520 --> 01:09:12,158
or noticed a little twist uh that's in

647
01:09:12,158 --> 01:09:13,920
this this challenge that does make it a

648
01:09:13,920 --> 01:09:15,600
little bit more tricky well yeah go

649
01:09:15,600 --> 01:09:16,640
ahead and describe what you saw because

650
01:09:16,640 --> 01:09:18,158
i think for the stream we're gonna give

651
01:09:18,158 --> 01:09:19,679
them the uh the pleasure of knowing

652
01:09:19,679 --> 01:09:21,198
what's going on even as the competitors

653
01:09:21,198 --> 01:09:22,640
are having to figure it out

654
01:09:22,640 --> 01:09:23,439
yeah

655
01:09:23,439 --> 01:09:24,960
maybe i should maybe mention what brain

656
01:09:24,960 --> 01:09:27,359
 is um it's an interpreted language

657
01:09:27,359 --> 01:09:30,479
that is working on symbols uh you have

658
01:09:30,479 --> 01:09:33,600
like uh imagine a big

659
01:09:33,600 --> 01:09:35,600
like a field or something and then you

660
01:09:35,600 --> 01:09:37,600
can move a cursor to the left to the

661
01:09:37,600 --> 01:09:38,880
right you can increment you can

662
01:09:38,880 --> 01:09:42,319
decrement a certain field um and

663
01:09:42,319 --> 01:09:45,600
essentially uh here the

664
01:09:45,600 --> 01:09:48,158
like the the movement on this this big

665
01:09:48,158 --> 01:09:51,040
array um is has no constraint so you can

666
01:09:51,040 --> 01:09:52,880
have out of bounds reads and writes and

667
01:09:52,880 --> 01:09:55,120
so it should be pretty easy to

668
01:09:55,120 --> 01:09:57,679
go out of bounds and um i i don't know

669
01:09:57,679 --> 01:10:01,120
if that field is on the stack or um

670
01:10:01,120 --> 01:10:02,719
it's on the stack yeah so you should as

671
01:10:02,719 --> 01:10:03,840
you said you're like

672
01:10:03,840 --> 01:10:05,280
looking at it you can just like oh i'll

673
01:10:05,280 --> 01:10:07,920
just uh increment the data pointer

674
01:10:07,920 --> 01:10:10,640
outside the bounds of the data

675
01:10:10,640 --> 01:10:13,040
data area into like the return pointer

676
01:10:13,040 --> 01:10:14,719
and you're done right

677
01:10:14,719 --> 01:10:16,560
right and and that's what i thought oh

678
01:10:16,560 --> 01:10:18,560
this is actually some that they should

679
01:10:18,560 --> 01:10:20,239
figure this out very quickly and it

680
01:10:20,239 --> 01:10:21,920
would be quickly done and then it's just

681
01:10:21,920 --> 01:10:23,760
about the tooling to get the brain

682
01:10:23,760 --> 01:10:25,840
programmed to manipulate the memory in

683
01:10:25,840 --> 01:10:28,640
the correct way however there's a size

684
01:10:28,640 --> 01:10:31,040
restriction right on on the brain fog

685
01:10:31,040 --> 01:10:32,480
program

686
01:10:32,480 --> 01:10:35,199
makes it significantly

687
01:10:35,199 --> 01:10:36,719
more difficult

688
01:10:36,719 --> 01:10:38,400
so so like a lot of exploits right

689
01:10:38,400 --> 01:10:39,600
you're in a constrained environment

690
01:10:39,600 --> 01:10:41,040
you've got a small bit of shell code or

691
01:10:41,040 --> 01:10:42,880
a small payload

692
01:10:42,880 --> 01:10:47,120
so what are you going to to do with that

693
01:10:47,120 --> 01:10:48,640
yes

694
01:10:48,640 --> 01:10:50,080
so

695
01:10:50,080 --> 01:10:51,280
yeah go ahead

696
01:10:51,280 --> 01:10:53,360
yeah the the players are looking for

697
01:10:53,360 --> 01:10:55,040
something to

698
01:10:55,040 --> 01:10:57,679
loosen their constraints um

699
01:10:57,679 --> 01:10:59,440
and you know these things can get

700
01:10:59,440 --> 01:11:02,000
creative there are many ways how how one

701
01:11:02,000 --> 01:11:04,960
could do that um

702
01:11:04,960 --> 01:11:06,400
maybe you can

703
01:11:06,400 --> 01:11:10,000
change the the accepted size maybe you

704
01:11:10,000 --> 01:11:12,960
find an interesting you know

705
01:11:12,960 --> 01:11:14,960
maybe you can write overwrite the return

706
01:11:14,960 --> 01:11:17,600
pointer and find a very useful a gadget

707
01:11:17,600 --> 01:11:19,840
in an interesting way i mean it's it's a

708
01:11:19,840 --> 01:11:22,000
limited brain fog program but with some

709
01:11:22,000 --> 01:11:23,280
creativity

710
01:11:23,280 --> 01:11:24,719
they could find some very interesting

711
01:11:24,719 --> 01:11:26,560
exploitation paths for this it's a

712
01:11:26,560 --> 01:11:27,600
little similar to the environment

713
01:11:27,600 --> 01:11:29,280
challenge before right where we actually

714
01:11:29,280 --> 01:11:30,640
had a

715
01:11:30,640 --> 01:11:32,560
simple command injection except it was

716
01:11:32,560 --> 01:11:34,159
too few characters and so they'd use one

717
01:11:34,159 --> 01:11:36,159
of the other vulnerabilities to make

718
01:11:36,159 --> 01:11:38,159
that the limit larger and then they were

719
01:11:38,159 --> 01:11:40,640
able to use the original kind of right a

720
01:11:40,640 --> 01:11:42,400
lot of similarities here and i think

721
01:11:42,400 --> 01:11:45,520
a key thing here is that the the data

722
01:11:45,520 --> 01:11:47,040
the data array

723
01:11:47,040 --> 01:11:50,159
sits just after a program array that's

724
01:11:50,159 --> 01:11:51,679
that's the key inside when we see them

725
01:11:51,679 --> 01:11:53,520
naming like data and code and noticing

726
01:11:53,520 --> 01:11:55,199
they're adjacent to one another that's

727
01:11:55,199 --> 01:11:56,560
going to be the point at which we know

728
01:11:56,560 --> 01:11:58,320
that they're on their way to figuring

729
01:11:58,320 --> 01:12:00,719
this out if we look here at uh eureka

730
01:12:00,719 --> 01:12:02,880
pigs who someone says that it's how it's

731
01:12:02,880 --> 01:12:05,040
pronounced in the chat uh if that's

732
01:12:05,040 --> 01:12:06,640
correct yeah i'm not sure i'm not sure

733
01:12:06,640 --> 01:12:08,080
exactly which which one it is yeah we've

734
01:12:08,080 --> 01:12:09,360
been saying wreck-a-pigs throughout the

735
01:12:09,360 --> 01:12:11,280
tournament but it might be rika pig

736
01:12:11,280 --> 01:12:15,840
because they're from the team eureka um

737
01:12:16,880 --> 01:12:18,239
that's uh that sounds good to me yeah

738
01:12:18,239 --> 01:12:19,920
sounds good sounds good anyway what i

739
01:12:19,920 --> 01:12:21,520
was going to say was that they saw that

740
01:12:21,520 --> 01:12:23,600
there is a win function in the program

741
01:12:23,600 --> 01:12:26,159
so they don't need to do a full exploit

742
01:12:26,159 --> 01:12:27,679
chain like a robbed chain or something

743
01:12:27,679 --> 01:12:29,760
like this they just need to take control

744
01:12:29,760 --> 01:12:31,280
of the instruction pointer and point it

745
01:12:31,280 --> 01:12:33,600
to the the win function yeah yeah

746
01:12:33,600 --> 01:12:35,199
there's there's different things to make

747
01:12:35,199 --> 01:12:36,800
it easier harder and you know this one

748
01:12:36,800 --> 01:12:38,560
we already knew the challenge itself had

749
01:12:38,560 --> 01:12:40,880
enough difficulty with it that we wanted

750
01:12:40,880 --> 01:12:42,400
to make it a little bit easier once they

751
01:12:42,400 --> 01:12:43,199
had

752
01:12:43,199 --> 01:12:44,480
the ability to change a pointer for

753
01:12:44,480 --> 01:12:45,920
example

754
01:12:45,920 --> 01:12:47,920
right

755
01:12:47,920 --> 01:12:49,840
well we also can see uh the the

756
01:12:49,840 --> 01:12:52,719
interesting setup from uh rika pick uh

757
01:12:52,719 --> 01:12:54,960
with the with the interesting uh windows

758
01:12:54,960 --> 01:12:57,600
7 vm with all the reversing tools yeah

759
01:12:57,600 --> 01:12:59,760
and not even full screening it just like

760
01:12:59,760 --> 01:13:01,840
working in i don't know i don't need the

761
01:13:01,840 --> 01:13:04,480
full resolution i need two star bars are

762
01:13:04,480 --> 01:13:07,199
fine for me i know i i i'm i'm impressed

763
01:13:07,199 --> 01:13:08,640
it's like uh

764
01:13:08,640 --> 01:13:09,679
it feels like a little bit like a

765
01:13:09,679 --> 01:13:11,520
handicap like they're playing with the

766
01:13:11,520 --> 01:13:13,920
difficulty set to high yeah

767
01:13:13,920 --> 01:13:15,679
just to flex

768
01:13:15,679 --> 01:13:18,239
so just just switch over to uh perfect

769
01:13:18,239 --> 01:13:19,760
roots here i see a lot of blue stuff on

770
01:13:19,760 --> 01:13:21,120
this yeah so they've actually opened up

771
01:13:21,120 --> 01:13:23,280
the file in vim so they're hex editing

772
01:13:23,280 --> 01:13:24,880
the challenge

773
01:13:24,880 --> 01:13:26,080
to

774
01:13:26,080 --> 01:13:29,120
what to change the l the ld string i

775
01:13:29,120 --> 01:13:30,080
don't think i've seen that before it

776
01:13:30,080 --> 01:13:31,520
looked like they were changing all right

777
01:13:31,520 --> 01:13:33,280
this might be uh to make it easier to

778
01:13:33,280 --> 01:13:36,480
run the challenge uh locally uh oh

779
01:13:36,480 --> 01:13:38,719
modifying it to like their version

780
01:13:38,719 --> 01:13:41,199
that seems to be running now

781
01:13:41,199 --> 01:13:44,400
uh yeah did so did they also have

782
01:13:44,400 --> 01:13:47,440
problems with the with the version yeah

783
01:13:47,440 --> 01:13:49,520
i think it was the version of the loader

784
01:13:49,520 --> 01:13:50,880
uh is different than the one on their

785
01:13:50,880 --> 01:13:53,840
box and instead of so we actually give

786
01:13:53,840 --> 01:13:55,840
the the loader with everyone so you can

787
01:13:55,840 --> 01:13:56,800
one of the other teams demonstrated

788
01:13:56,800 --> 01:13:58,640
earlier uh which actually kimoza wasn't

789
01:13:58,640 --> 01:14:00,480
even aware of that you can run the

790
01:14:00,480 --> 01:14:02,159
loader as an executable and then pass it

791
01:14:02,159 --> 01:14:03,760
the argument of the the application and

792
01:14:03,760 --> 01:14:05,120
it will still run it which is basically

793
01:14:05,120 --> 01:14:06,320
what the kernel does for you when you

794
01:14:06,320 --> 01:14:08,800
execute it um but so instead of doing

795
01:14:08,800 --> 01:14:10,480
that they just literally put a bunch of

796
01:14:10,480 --> 01:14:13,360
forward slashes into the the raw string

797
01:14:13,360 --> 01:14:14,640
using vim

798
01:14:14,640 --> 01:14:16,480
where the reference to that that library

799
01:14:16,480 --> 01:14:18,719
was so that it would use the local one

800
01:14:18,719 --> 01:14:20,960
that they had instead of uh the one on

801
01:14:20,960 --> 01:14:22,400
our original system

802
01:14:22,400 --> 01:14:24,080
yeah

803
01:14:24,080 --> 01:14:25,120
um

804
01:14:25,120 --> 01:14:27,360
i want to switch back over to

805
01:14:27,360 --> 01:14:29,040
rika pig

806
01:14:29,040 --> 01:14:31,199
you can see them running

807
01:14:31,199 --> 01:14:32,719
the debugger

808
01:14:32,719 --> 01:14:34,239
here as well with the

809
01:14:34,239 --> 01:14:35,840
with the challenge and you can see a

810
01:14:35,840 --> 01:14:37,040
little bit there in the background you

811
01:14:37,040 --> 01:14:38,320
can barely see it but they have this

812
01:14:38,320 --> 01:14:40,320
script and you see all these like deck

813
01:14:40,320 --> 01:14:42,159
pointer ink valve deck valve and so on

814
01:14:42,159 --> 01:14:44,640
these are the the helper

815
01:14:44,640 --> 01:14:47,679
um yeah operations yes and you can also

816
01:14:47,679 --> 01:14:49,199
see that they had a comment in the code

817
01:14:49,199 --> 01:14:51,280
with the dot slash submitter too so they

818
01:14:51,280 --> 01:14:52,640
already have the

819
01:14:52,640 --> 01:14:54,800
the string the thing they have to run

820
01:14:54,800 --> 01:14:56,560
to win like so they're you know they're

821
01:14:56,560 --> 01:14:58,960
trying to like make all the difference

822
01:14:58,960 --> 01:15:01,600
time savings yes they know that this can

823
01:15:01,600 --> 01:15:03,280
be tied since

824
01:15:03,280 --> 01:15:05,199
seconds have literally mattered

825
01:15:05,199 --> 01:15:07,280
i i was wondering what are the rules if

826
01:15:07,280 --> 01:15:09,280
one team is accidentally running

827
01:15:09,280 --> 01:15:10,880
submitter with the wrong team number

828
01:15:10,880 --> 01:15:13,040
then that result stands so if you make

829
01:15:13,040 --> 01:15:14,800
the other team win the other team wins

830
01:15:14,800 --> 01:15:16,960
yeah we have told the team we did debate

831
01:15:16,960 --> 01:15:18,560
that and we told them that that was

832
01:15:18,560 --> 01:15:20,080
going to be the way that we would do it

833
01:15:20,080 --> 01:15:22,880
so be very very careful with your and i

834
01:15:22,880 --> 01:15:25,120
will say it's the risk isn't as bad as

835
01:15:25,120 --> 01:15:26,320
you might think

836
01:15:26,320 --> 01:15:28,320
only because each team when they first

837
01:15:28,320 --> 01:15:30,960
connect to the server um they get a they

838
01:15:30,960 --> 01:15:32,400
choose their team and it gives them

839
01:15:32,400 --> 01:15:33,920
their exact information so most the

840
01:15:33,920 --> 01:15:35,760
teams click their team name and then

841
01:15:35,760 --> 01:15:37,040
just copy and paste all the information

842
01:15:37,040 --> 01:15:38,400
from there so

843
01:15:38,400 --> 01:15:40,800
haven't anybody messed up yet but uh

844
01:15:40,800 --> 01:15:42,640
yeah my like

845
01:15:42,640 --> 01:15:44,000
my fear there would be that someone

846
01:15:44,000 --> 01:15:45,840
would like keep their template from like

847
01:15:45,840 --> 01:15:47,840
the previous match and then reuse it or

848
01:15:47,840 --> 01:15:49,520
yeah like this yeah maybe for next time

849
01:15:49,520 --> 01:15:51,040
we should have like not just one or two

850
01:15:51,040 --> 01:15:52,640
like a small we should match all the

851
01:15:52,640 --> 01:15:55,120
global the global ids of the for example

852
01:15:55,120 --> 01:15:56,719
every team has an idea on the defcon

853
01:15:56,719 --> 01:15:59,440
network as well yes um we should do uh

854
01:15:59,440 --> 01:16:00,640
we should do something less than learn

855
01:16:00,640 --> 01:16:02,400
for next year yeah there are a lot of

856
01:16:02,400 --> 01:16:04,560
things we can improve but i think it's

857
01:16:04,560 --> 01:16:06,719
been running pretty smooth uh this whole

858
01:16:06,719 --> 01:16:09,040
thing uh i hope you've been enjoying it

859
01:16:09,040 --> 01:16:10,560
the people who have been watching

860
01:16:10,560 --> 01:16:12,159
throughout the

861
01:16:12,159 --> 01:16:14,560
weekend so i haven't seen anybody yet

862
01:16:14,560 --> 01:16:16,719
figure out that that first constraint

863
01:16:16,719 --> 01:16:19,120
right i don't think i've seen anyone um

864
01:16:19,120 --> 01:16:22,080
get their way out of well we can switch

865
01:16:22,080 --> 01:16:24,640
over here to uh it might be difficult to

866
01:16:24,640 --> 01:16:26,800
assess if they if they have seen it

867
01:16:26,800 --> 01:16:28,719
because it's like a mental note they

868
01:16:28,719 --> 01:16:30,719
would make themselves right right we

869
01:16:30,719 --> 01:16:32,640
would have to look at when they start

870
01:16:32,640 --> 01:16:34,719
writing brain if they if they

871
01:16:34,719 --> 01:16:37,120
realize that they are constrained or not

872
01:16:37,120 --> 01:16:38,480
right and that's what what i wanted to

873
01:16:38,480 --> 01:16:40,640
point out here on perfect root screen uh

874
01:16:40,640 --> 01:16:42,880
so they tabbed away from it now but just

875
01:16:42,880 --> 01:16:44,239
when you switch it you can see that they

876
01:16:44,239 --> 01:16:46,960
had this small program with the loop and

877
01:16:46,960 --> 01:16:49,280
the input right there right the p equals

878
01:16:49,280 --> 01:16:50,159
yes

879
01:16:50,159 --> 01:16:52,640
you see the the comma is the input it

880
01:16:52,640 --> 01:16:55,520
will uh take it one byte input from

881
01:16:55,520 --> 01:16:56,960
standard input and write it to the

882
01:16:56,960 --> 01:16:59,120
current cell on the tape and then the

883
01:16:59,120 --> 01:17:01,440
brackets are a loop

884
01:17:01,440 --> 01:17:03,360
so they are

885
01:17:03,360 --> 01:17:04,880
they're kind of i think they're going to

886
01:17:04,880 --> 01:17:07,679
you see the input in a loop thing

887
01:17:07,679 --> 01:17:10,320
going on so that's uh definitely on the

888
01:17:10,320 --> 01:17:12,880
right track

889
01:17:13,120 --> 01:17:15,760
though i think they want the greater

890
01:17:15,760 --> 01:17:18,080
than sign rather than the plus sign

891
01:17:18,080 --> 01:17:18,800
but

892
01:17:18,800 --> 01:17:21,360
you know maybe they have another idea

893
01:17:21,360 --> 01:17:22,640
there's probably a lot of different

894
01:17:22,640 --> 01:17:24,640
solutions to this uh challenge but you

895
01:17:24,640 --> 01:17:27,280
need to escape that initial constraint

896
01:17:27,280 --> 01:17:29,199
yeah and letting the letting it over

897
01:17:29,199 --> 01:17:31,760
right into the next uh

898
01:17:31,760 --> 01:17:33,360
into the next buffer and then getting

899
01:17:33,360 --> 01:17:35,280
the interpreter into that buffer right

900
01:17:35,280 --> 01:17:37,520
so there are probably the hard

901
01:17:37,520 --> 01:17:40,000
like the main that's the bug bug yes

902
01:17:40,000 --> 01:17:42,000
exactly so well they're essentially two

903
01:17:42,000 --> 01:17:43,520
bugs right it's the one that live

904
01:17:43,520 --> 01:17:45,679
overflow mentioned initially here like

905
01:17:45,679 --> 01:17:47,280
you can uh

906
01:17:47,280 --> 01:17:49,199
uh increment or decrement the data

907
01:17:49,199 --> 01:17:51,760
pointer outside the data region right uh

908
01:17:51,760 --> 01:17:53,440
but then to be able to have enough code

909
01:17:53,440 --> 01:17:55,520
to do first place you need to escape

910
01:17:55,520 --> 01:17:57,840
this like nine character program limit

911
01:17:57,840 --> 01:17:59,199
and the way you can do that is they can

912
01:17:59,199 --> 01:18:01,360
actually get the uh instruction pointer

913
01:18:01,360 --> 01:18:02,320
to

914
01:18:02,320 --> 01:18:06,239
jump into the data region

915
01:18:06,880 --> 01:18:08,159
so they're gonna they're gonna stage up

916
01:18:08,159 --> 01:18:09,840
their shell code that's what we're

917
01:18:09,840 --> 01:18:12,960
looking to see if we don't see that

918
01:18:12,960 --> 01:18:14,080
in the next five minutes or so i think

919
01:18:14,080 --> 01:18:15,679
we're going to want to give them a hint

920
01:18:15,679 --> 01:18:16,880
on that one because we're going to want

921
01:18:16,880 --> 01:18:18,960
to see somebody with that second stage

922
01:18:18,960 --> 01:18:20,640
because they still have even

923
01:18:20,640 --> 01:18:22,080
more to the challenge even after that

924
01:18:22,080 --> 01:18:23,440
point so we'll see the exact timing and

925
01:18:23,440 --> 01:18:24,960
we'll figure it out but

926
01:18:24,960 --> 01:18:27,360
there's more work to do so this one is

927
01:18:27,360 --> 01:18:28,800
again this was a little on the harder

928
01:18:28,800 --> 01:18:30,000
side but it's also super interesting

929
01:18:30,000 --> 01:18:31,199
that they have to kind of like chain

930
01:18:31,199 --> 01:18:33,440
these things together yes so

931
01:18:33,440 --> 01:18:36,159
we can uh see here on

932
01:18:36,159 --> 01:18:38,560
wikipedi's uh the assembly

933
01:18:38,560 --> 01:18:42,239
uh you can see that they're looking at

934
01:18:42,320 --> 01:18:43,040
the

935
01:18:43,040 --> 01:18:45,280
reading of the program like the

936
01:18:45,280 --> 01:18:47,120
when you're reading in the program

937
01:18:47,120 --> 01:18:48,960
uh they're looking to see if they can

938
01:18:48,960 --> 01:18:50,880
smuggle for example they saw that we're

939
01:18:50,880 --> 01:18:53,280
using this the string length

940
01:18:53,280 --> 01:18:54,560
function there

941
01:18:54,560 --> 01:18:58,320
uh to maybe check if they can smuggle uh

942
01:18:58,320 --> 01:19:00,239
like null bytes or

943
01:19:00,239 --> 01:19:03,440
something into this uh

944
01:19:03,440 --> 01:19:05,199
yeah not exactly sure where they're

945
01:19:05,199 --> 01:19:07,120
going there but just looking more into

946
01:19:07,120 --> 01:19:09,120
that you can see now they this is they

947
01:19:09,120 --> 01:19:10,640
have the cursor

948
01:19:10,640 --> 01:19:12,960
basically on half the bug there you can

949
01:19:12,960 --> 01:19:16,480
see that the loop of the interpreter

950
01:19:16,480 --> 01:19:17,840
keeps going

951
01:19:17,840 --> 01:19:20,400
specifically until the

952
01:19:20,400 --> 01:19:22,880
program counter usually in a situation

953
01:19:22,880 --> 01:19:24,239
like this you would have like a

954
01:19:24,239 --> 01:19:26,320
comparison be like program counter is

955
01:19:26,320 --> 01:19:29,360
less than the end but in this case it's

956
01:19:29,360 --> 01:19:31,760
program counter not equals that specific

957
01:19:31,760 --> 01:19:33,760
size so if you manage to get the program

958
01:19:33,760 --> 01:19:36,480
counter larger than nine and just keep

959
01:19:36,480 --> 01:19:39,199
going it will keep going

960
01:19:39,199 --> 01:19:40,480
yeah so that's part of it but then but

961
01:19:40,480 --> 01:19:42,080
then how do you get it past it in the

962
01:19:42,080 --> 01:19:43,360
first place right so that's the other

963
01:19:43,360 --> 01:19:45,199
thing that they still have to find i i

964
01:19:45,199 --> 01:19:48,080
also just noticed that um i mean

965
01:19:48,080 --> 01:19:50,320
i have seen the source code and i didn't

966
01:19:50,320 --> 01:19:52,480
quite uh realize at the moment but i'm

967
01:19:52,480 --> 01:19:53,920
seeing it here in the disassembly that

968
01:19:53,920 --> 01:19:55,679
the size is hard-coded so it's not a

969
01:19:55,679 --> 01:19:57,920
variable that they can easily

970
01:19:57,920 --> 01:19:59,840
change so it is definitely a bit more

971
01:19:59,840 --> 01:20:03,360
tricky to escape that i in my mind i i

972
01:20:03,360 --> 01:20:06,000
thought they can change that

973
01:20:06,000 --> 01:20:08,560
limit in from a variable standpoint but

974
01:20:08,560 --> 01:20:10,239
it's definitely hard coded so it's right

975
01:20:10,239 --> 01:20:12,000
there as a

976
01:20:12,000 --> 01:20:14,800
um as an actual value immediate right in

977
01:20:14,800 --> 01:20:16,560
the the immediate

978
01:20:16,560 --> 01:20:19,520
compilation yeah and uh

979
01:20:19,520 --> 01:20:22,400
yeah we can uh

980
01:20:22,480 --> 01:20:24,800
that might be uh quite tricky so oh they

981
01:20:24,800 --> 01:20:26,560
found the bug here on perfect routes yes

982
01:20:26,560 --> 01:20:29,360
so yeah you saw there very briefly uh in

983
01:20:29,360 --> 01:20:31,679
their small initial payload you saw that

984
01:20:31,679 --> 01:20:34,480
they had an unmatched uh opening loop

985
01:20:34,480 --> 01:20:36,320
bracket at the end of their code and

986
01:20:36,320 --> 01:20:38,639
that is exactly the bug so

987
01:20:38,639 --> 01:20:41,040
uh if you have an unmatched bracket the

988
01:20:41,040 --> 01:20:44,000
the the subroutine that handles the the

989
01:20:44,000 --> 01:20:46,719
loop it will when it sees that initial

990
01:20:46,719 --> 01:20:49,920
uh bracket it will then keep searching

991
01:20:49,920 --> 01:20:52,080
forward and it defines the stop at the

992
01:20:52,080 --> 01:20:54,400
maximum limit exactly because that check

993
01:20:54,400 --> 01:20:56,000
is in the outer

994
01:20:56,000 --> 01:20:57,679
loop this is in like the subroutine to

995
01:20:57,679 --> 01:20:59,520
find that particular

996
01:20:59,520 --> 01:21:01,199
yes and it will just keep going until it

997
01:21:01,199 --> 01:21:03,600
finds a matching end bracket so you need

998
01:21:03,600 --> 01:21:05,360
to first

999
01:21:05,360 --> 01:21:08,239
write a uh right bracket

1000
01:21:08,239 --> 01:21:10,639
into the data section and then have a

1001
01:21:10,639 --> 01:21:12,719
left bracket in your code

1002
01:21:12,719 --> 01:21:14,159
and then the program counter will then

1003
01:21:14,159 --> 01:21:15,760
and and just just to clarify when you

1004
01:21:15,760 --> 01:21:18,480
say data section it is specifically the

1005
01:21:18,480 --> 01:21:21,280
the buffer in memory that is for data

1006
01:21:21,280 --> 01:21:24,639
right i'm not talking about yeah

1007
01:21:24,639 --> 01:21:26,480
no i'm talking within the

1008
01:21:26,480 --> 01:21:28,400
brain context we have like the

1009
01:21:28,400 --> 01:21:31,360
program and the data

1010
01:21:31,600 --> 01:21:33,199
excellent so yeah so i would say perfect

1011
01:21:33,199 --> 01:21:34,400
root

1012
01:21:34,400 --> 01:21:36,480
well underway no hit needed perfect

1013
01:21:36,480 --> 01:21:38,480
timing yeah that was that's that is

1014
01:21:38,480 --> 01:21:40,000
great to see and we're just looking to

1015
01:21:40,000 --> 01:21:43,199
see if eureka pigs can uh can

1016
01:21:43,199 --> 01:21:44,880
can catch up which certainly there's

1017
01:21:44,880 --> 01:21:47,360
still a lot left to go so it would be

1018
01:21:47,360 --> 01:21:49,120
in in the previous matches the reek epic

1019
01:21:49,120 --> 01:21:50,719
has shown uh

1020
01:21:50,719 --> 01:21:53,120
they they spend a lot of time in ida and

1021
01:21:53,120 --> 01:21:55,120
it always feels like they are behind

1022
01:21:55,120 --> 01:21:56,560
because they are still just reversing

1023
01:21:56,560 --> 01:21:58,639
they are not working on exploit but but

1024
01:21:58,639 --> 01:22:00,719
then suddenly they start crafting their

1025
01:22:00,719 --> 01:22:03,440
script uh almost blindly without really

1026
01:22:03,440 --> 01:22:05,679
a lot of testing it seems like and

1027
01:22:05,679 --> 01:22:07,520
suddenly they they

1028
01:22:07,520 --> 01:22:10,159
they really

1029
01:22:10,560 --> 01:22:12,320
yeah exactly very different there are

1030
01:22:12,320 --> 01:22:14,239
different styles you see a lot of a lot

1031
01:22:14,239 --> 01:22:15,760
of both

1032
01:22:15,760 --> 01:22:17,760
you can see that they are i think

1033
01:22:17,760 --> 01:22:19,840
looking at uh

1034
01:22:19,840 --> 01:22:22,880
like the god table and now back to the

1035
01:22:22,880 --> 01:22:24,800
like interpreter

1036
01:22:24,800 --> 01:22:28,000
um i haven't seen that much of their

1037
01:22:28,000 --> 01:22:29,600
exploit script yet so as i said they're

1038
01:22:29,600 --> 01:22:30,960
just like

1039
01:22:30,960 --> 01:22:32,719
really looking at the code trying to

1040
01:22:32,719 --> 01:22:36,239
figure out what's going on

1041
01:22:36,400 --> 01:22:37,679
um

1042
01:22:37,679 --> 01:22:39,040
yeah you can feel feel free to hang out

1043
01:22:39,040 --> 01:22:40,080
with them for just a little bit too

1044
01:22:40,080 --> 01:22:41,360
we'll wait and see if they bring up

1045
01:22:41,360 --> 01:22:43,040
their code right you might catch a

1046
01:22:43,040 --> 01:22:45,440
glimpse of that i'll keep an eye on uh

1047
01:22:45,440 --> 01:22:46,719
perfect route let me know if something's

1048
01:22:46,719 --> 01:22:49,360
happening over there

1049
01:22:49,520 --> 01:22:51,360
so uh

1050
01:22:51,360 --> 01:22:52,960
i'm

1051
01:22:52,960 --> 01:22:54,719
you know it's it's this is really the

1052
01:22:54,719 --> 01:22:56,080
situation where you would want to be

1053
01:22:56,080 --> 01:22:58,080
able to like read the minds of the

1054
01:22:58,080 --> 01:22:59,920
of the players just we just got to pause

1055
01:22:59,920 --> 01:23:01,440
time go over there and ask them what are

1056
01:23:01,440 --> 01:23:03,199
you thinking right now

1057
01:23:03,199 --> 01:23:04,800
no problem oh that's that's surely going

1058
01:23:04,800 --> 01:23:06,639
to be appreciated right yeah i'm sorry

1059
01:23:06,639 --> 01:23:09,120
can i interrupt you

1060
01:23:09,120 --> 01:23:10,480
this one derail your train of thought

1061
01:23:10,480 --> 01:23:12,159
will it right

1062
01:23:12,159 --> 01:23:14,400
but it feels like they have not quite

1063
01:23:14,400 --> 01:23:17,679
seen this loop bug yet

1064
01:23:17,679 --> 01:23:19,520
that's my impression

1065
01:23:19,520 --> 01:23:21,440
when like as a

1066
01:23:21,440 --> 01:23:23,679
you know with when you do programming or

1067
01:23:23,679 --> 01:23:25,280
reading assembly

1068
01:23:25,280 --> 01:23:27,440
when you have experience you have this

1069
01:23:27,440 --> 01:23:29,440
mental model and you you can really

1070
01:23:29,440 --> 01:23:31,760
reason about the code that is happening

1071
01:23:31,760 --> 01:23:34,000
um but brain is a language you

1072
01:23:34,000 --> 01:23:36,800
usually are not used to so now not only

1073
01:23:36,800 --> 01:23:39,920
have they to have they

1074
01:23:39,920 --> 01:23:41,760
not only do they need to craft the brain

1075
01:23:41,760 --> 01:23:43,440
 program but they have to craft a

1076
01:23:43,440 --> 01:23:45,760
very small buggy program that does

1077
01:23:45,760 --> 01:23:47,520
something interesting and reasoning

1078
01:23:47,520 --> 01:23:49,600
about this little code condensing it

1079
01:23:49,600 --> 01:23:52,560
down um these kind of abstraction layers

1080
01:23:52,560 --> 01:23:54,719
you have in your mind when working with

1081
01:23:54,719 --> 01:23:56,639
code bases and so forth this is all

1082
01:23:56,639 --> 01:23:58,159
missing with brain and i think that

1083
01:23:58,159 --> 01:23:59,600
is really really difficult to do

1084
01:23:59,600 --> 01:24:01,280
especially under pressure

1085
01:24:01,280 --> 01:24:03,760
yeah definitely i had this uh

1086
01:24:03,760 --> 01:24:06,000
when i was creating like the reference

1087
01:24:06,000 --> 01:24:07,440
solution for this

1088
01:24:07,440 --> 01:24:09,199
uh there were several moments where

1089
01:24:09,199 --> 01:24:12,719
where i went like oh i'll just do this

1090
01:24:12,719 --> 01:24:15,679
and then i realized that like doing this

1091
01:24:15,679 --> 01:24:17,440
is something that would be like trivial

1092
01:24:17,440 --> 01:24:18,480
in a

1093
01:24:18,480 --> 01:24:21,120
normal programming language anything

1094
01:24:21,120 --> 01:24:23,520
but in this context it's like actually

1095
01:24:23,520 --> 01:24:25,760
quite a hassle yeah and you're kind of

1096
01:24:25,760 --> 01:24:27,120
merging these two contexts too right

1097
01:24:27,120 --> 01:24:28,800
because you have and this is actually

1098
01:24:28,800 --> 01:24:30,000
really interesting because while this

1099
01:24:30,000 --> 01:24:31,760
isn't clearly a toy language and not

1100
01:24:31,760 --> 01:24:33,760
real it very much models what you see

1101
01:24:33,760 --> 01:24:36,159
like in a browser in javascript where

1102
01:24:36,159 --> 01:24:38,000
they have a virtual machine they have

1103
01:24:38,000 --> 01:24:39,600
you know often multiple interpreted

1104
01:24:39,600 --> 01:24:40,639
languages

1105
01:24:40,639 --> 01:24:42,560
and you are both working within and

1106
01:24:42,560 --> 01:24:44,480
outside of at the same time

1107
01:24:44,480 --> 01:24:45,679
so you have to work within the memory

1108
01:24:45,679 --> 01:24:47,120
model of the native approach from the

1109
01:24:47,120 --> 01:24:48,719
layers

1110
01:24:48,719 --> 01:24:50,400
yeah

1111
01:24:50,400 --> 01:24:52,239
yeah so i think because we're seeing uh

1112
01:24:52,239 --> 01:24:54,639
progress here on on perfect route like

1113
01:24:54,639 --> 01:24:56,400
we're good without a hint like that

1114
01:24:56,400 --> 01:24:58,560
they're yeah they don't seem stuck they

1115
01:24:58,560 --> 01:25:00,000
seem like they know what certainly the

1116
01:25:00,000 --> 01:25:02,159
first the first challenge is

1117
01:25:02,159 --> 01:25:04,159
um and you know rika pig's still got

1118
01:25:04,159 --> 01:25:05,920
time to to catch up so i think we're

1119
01:25:05,920 --> 01:25:08,239
okay yeah checking with uh we also do

1120
01:25:08,239 --> 01:25:09,199
have a little bit of extra time too

1121
01:25:09,199 --> 01:25:10,400
between this match and the next one

1122
01:25:10,400 --> 01:25:12,320
right so i'm not sure if you mentioned

1123
01:25:12,320 --> 01:25:15,120
it also that oh no yeah you did with the

1124
01:25:15,120 --> 01:25:17,360
unmatched uh loop variable that perfect

1125
01:25:17,360 --> 01:25:19,679
root has that already in the code right

1126
01:25:19,679 --> 01:25:21,840
yeah yeah exactly so you can tell there

1127
01:25:21,840 --> 01:25:24,159
and you can also see um

1128
01:25:24,159 --> 01:25:25,840
there was some debugger output there

1129
01:25:25,840 --> 01:25:27,600
when they were looking at the memory and

1130
01:25:27,600 --> 01:25:29,280
they're right here you can see all those

1131
01:25:29,280 --> 01:25:30,560
three e's

1132
01:25:30,560 --> 01:25:32,880
uh i think if i remember correctly that

1133
01:25:32,880 --> 01:25:36,560
uh corresponds to a dot right that's two

1134
01:25:36,560 --> 01:25:39,280
e so no or is it that great it's it's

1135
01:25:39,280 --> 01:25:40,880
one of the relevant characters in this

1136
01:25:40,880 --> 01:25:42,000
and you can see that there are way more

1137
01:25:42,000 --> 01:25:43,120
than nine of them i think it's going to

1138
01:25:43,120 --> 01:25:44,000
be the greater thing because they got

1139
01:25:44,000 --> 01:25:45,199
the greater than all right you can see

1140
01:25:45,199 --> 01:25:46,400
they're in the payload they're right in

1141
01:25:46,400 --> 01:25:48,080
a lot of greater density oh and this is

1142
01:25:48,080 --> 01:25:49,760
exactly what they need to do for the

1143
01:25:49,760 --> 01:25:51,840
stage two this is exactly what it is you

1144
01:25:51,840 --> 01:25:53,040
see they have to move that pointer all

1145
01:25:53,040 --> 01:25:54,400
the way over into return address

1146
01:25:54,400 --> 01:25:56,560
something else right um so they

1147
01:25:56,560 --> 01:25:57,679
definitely also i think they're just

1148
01:25:57,679 --> 01:25:58,800
calculating offsets they're just trying

1149
01:25:58,800 --> 01:26:00,480
to figure out how far to move it over

1150
01:26:00,480 --> 01:26:02,000
right and then they need to figure out

1151
01:26:02,000 --> 01:26:03,440
how far they need to or what they need

1152
01:26:03,440 --> 01:26:05,920
to increment to get that original return

1153
01:26:05,920 --> 01:26:07,520
address over the win function yeah so

1154
01:26:07,520 --> 01:26:10,159
the idea here is that you uh

1155
01:26:10,159 --> 01:26:12,000
you walk the data pointer over to the

1156
01:26:12,000 --> 01:26:14,639
return address pi is enabled so they

1157
01:26:14,639 --> 01:26:16,800
will have to first

1158
01:26:16,800 --> 01:26:19,440
they will have to print

1159
01:26:19,440 --> 01:26:22,480
uh they will have to print the

1160
01:26:22,480 --> 01:26:25,678
current return address

1161
01:26:28,080 --> 01:26:29,760
on the stack the current the print the

1162
01:26:29,760 --> 01:26:31,760
current return address on the stack

1163
01:26:31,760 --> 01:26:33,199
use that to calculate the address of the

1164
01:26:33,199 --> 01:26:34,800
win function and then write back the new

1165
01:26:34,800 --> 01:26:36,560
value

1166
01:26:36,560 --> 01:26:37,440
or

1167
01:26:37,440 --> 01:26:38,719
a partial

1168
01:26:38,719 --> 01:26:40,159
override of the return address might

1169
01:26:40,159 --> 01:26:42,239
also work fine

1170
01:26:42,239 --> 01:26:43,600
couple of options

1171
01:26:43,600 --> 01:26:45,520
just for clarification again what we are

1172
01:26:45,520 --> 01:26:47,600
seeing right now with the brainferg

1173
01:26:47,600 --> 01:26:50,400
program from perfect root um they

1174
01:26:50,400 --> 01:26:54,080
have an input loop the comma is input so

1175
01:26:54,080 --> 01:26:56,560
uh basically they have a loop that keeps

1176
01:26:56,560 --> 01:26:58,719
one that keeps

1177
01:26:58,719 --> 01:27:01,280
wanting to get input data and then they

1178
01:27:01,280 --> 01:27:03,360
send that and that causes you know

1179
01:27:03,360 --> 01:27:05,440
writing more of the code and then the

1180
01:27:05,440 --> 01:27:07,360
original program has the open bracket

1181
01:27:07,360 --> 01:27:09,440
which is now matching what they were

1182
01:27:09,440 --> 01:27:11,199
inputting later

1183
01:27:11,199 --> 01:27:13,360
yeah so because because they put another

1184
01:27:13,360 --> 01:27:16,400
bracket later that lets the the the part

1185
01:27:16,400 --> 01:27:17,840
of the program is looking for that match

1186
01:27:17,840 --> 01:27:19,840
to jump over the end of the code and

1187
01:27:19,840 --> 01:27:21,840
when it fishes in the data the later on

1188
01:27:21,840 --> 01:27:24,239
check that says i might am i equal to

1189
01:27:24,239 --> 01:27:25,920
the end says no you're not equal to the

1190
01:27:25,920 --> 01:27:27,199
end keep going this is fine and it

1191
01:27:27,199 --> 01:27:28,960
continues to interpret right you can see

1192
01:27:28,960 --> 01:27:31,280
here the additional data you've got in

1193
01:27:31,280 --> 01:27:32,960
there through the

1194
01:27:32,960 --> 01:27:34,639
input loop came in through all those

1195
01:27:34,639 --> 01:27:36,880
commands exactly yeah right and you can

1196
01:27:36,880 --> 01:27:38,960
see that the the second phase there in

1197
01:27:38,960 --> 01:27:41,199
the in the exploit script it starts with

1198
01:27:41,199 --> 01:27:44,480
a closing bracket to catch that uh

1199
01:27:44,480 --> 01:27:45,600
because otherwise it's going to go right

1200
01:27:45,600 --> 01:27:46,639
past it yeah

1201
01:27:46,639 --> 01:27:47,840
that's looking for the matching bracket

1202
01:27:47,840 --> 01:27:49,280
just keeps going until it's either there

1203
01:27:49,280 --> 01:27:51,360
or it hits the end of a memory

1204
01:27:51,360 --> 01:27:52,719
yeah exactly so it's not going to do

1205
01:27:52,719 --> 01:27:54,000
what you intend

1206
01:27:54,000 --> 01:27:56,080
um so they're definitely you know they

1207
01:27:56,080 --> 01:27:58,000
definitely know what they're doing here

1208
01:27:58,000 --> 01:28:01,600
uh they just need to uh figure

1209
01:28:01,600 --> 01:28:03,440
um

1210
01:28:03,440 --> 01:28:05,360
out like the details here

1211
01:28:05,360 --> 01:28:07,679
um yeah we're having some discussion in

1212
01:28:07,679 --> 01:28:10,400
the in the chat here about the uh google

1213
01:28:10,400 --> 01:28:13,520
ctf uh accelerate competition uh that i

1214
01:28:13,520 --> 01:28:15,280
was uh involved

1215
01:28:15,280 --> 01:28:18,719
with and a lot of my colleagues uh we uh

1216
01:28:18,719 --> 01:28:20,880
there are like similarities to this uh

1217
01:28:20,880 --> 01:28:22,800
but there's like the game hacking yeah

1218
01:28:22,800 --> 01:28:24,560
element to it it is a visual element

1219
01:28:24,560 --> 01:28:26,800
which is nice right yes so and we will

1220
01:28:26,800 --> 01:28:29,199
be hosting that as well uh in september

1221
01:28:29,199 --> 01:28:30,560
people are asking for videos are our

1222
01:28:30,560 --> 01:28:32,719
videos from 2020 coming out they are

1223
01:28:32,719 --> 01:28:35,600
coming out we've had uh you know

1224
01:28:35,600 --> 01:28:37,040
some uh

1225
01:28:37,040 --> 01:28:38,639
there was a lot of work there were

1226
01:28:38,639 --> 01:28:40,960
people getting like uh

1227
01:28:40,960 --> 01:28:43,199
long covered uh

1228
01:28:43,199 --> 01:28:44,719
you know they're like a bunch of

1229
01:28:44,719 --> 01:28:47,360
unfortunate events but the videos like

1230
01:28:47,360 --> 01:28:49,440
the video files still exist and we will

1231
01:28:49,440 --> 01:28:51,199
really lose they're coming out no no we

1232
01:28:51,199 --> 01:28:52,800
have them i have a spreadsheet tracking

1233
01:28:52,800 --> 01:28:54,560
all the all the different video files

1234
01:28:54,560 --> 01:28:57,440
they will be released uh so so yeah so

1235
01:28:57,440 --> 01:28:59,360
keep an eye out on you know social media

1236
01:28:59,360 --> 01:29:01,679
stuff for for the accelerate uh

1237
01:29:01,679 --> 01:29:03,199
information as well that's gonna be

1238
01:29:03,199 --> 01:29:04,800
super fun they were actually doing it on

1239
01:29:04,800 --> 01:29:06,639
site this year so very nice trying to

1240
01:29:06,639 --> 01:29:09,120
bring a bit of an esports vibe to it as

1241
01:29:09,120 --> 01:29:11,520
well uh i think that would be super cool

1242
01:29:11,520 --> 01:29:13,120
fantastic yeah it's it's really exciting

1243
01:29:13,120 --> 01:29:14,480
that we're seeing more and more of these

1244
01:29:14,480 --> 01:29:15,920
like uh

1245
01:29:15,920 --> 01:29:17,760
events that try to let you see inside

1246
01:29:17,760 --> 01:29:19,600
the hacking as it happens

1247
01:29:19,600 --> 01:29:20,960
yeah

1248
01:29:20,960 --> 01:29:22,639
i guess not a coincidence then those of

1249
01:29:22,639 --> 01:29:23,840
us that are involved in it tend to be

1250
01:29:23,840 --> 01:29:26,320
involved in multiple things too so yes

1251
01:29:26,320 --> 01:29:28,960
uh i would say the the you know

1252
01:29:28,960 --> 01:29:32,239
the area of like security uh

1253
01:29:32,239 --> 01:29:33,360
live

1254
01:29:33,360 --> 01:29:35,360
hacking competitions yeah it's very very

1255
01:29:35,360 --> 01:29:38,239
small yeah very niche yeah but all right

1256
01:29:38,239 --> 01:29:39,440
so we've changed up the code a little

1257
01:29:39,440 --> 01:29:41,199
bit so we've got our ending bracket

1258
01:29:41,199 --> 01:29:43,840
we're going to move the pointer just a

1259
01:29:43,840 --> 01:29:46,320
little bit extra

1260
01:29:46,320 --> 01:29:48,320
uh but that's actually

1261
01:29:48,320 --> 01:29:50,480
is the problem that the data pointer and

1262
01:29:50,480 --> 01:29:52,080
the instruction point are essentially

1263
01:29:52,080 --> 01:29:54,080
overlapping uh right now in their code

1264
01:29:54,080 --> 01:29:56,560
they're trying to

1265
01:29:56,560 --> 01:29:59,520
yeah this is this is uh exactly what i

1266
01:29:59,520 --> 01:30:00,800
think uh

1267
01:30:00,800 --> 01:30:02,480
you know uh you know live overflow here

1268
01:30:02,480 --> 01:30:04,880
you were you're talking about like this

1269
01:30:04,880 --> 01:30:06,639
you need to create this mental model of

1270
01:30:06,639 --> 01:30:09,760
these two pointers walking this buffer

1271
01:30:09,760 --> 01:30:11,199
and it's not really something that

1272
01:30:11,199 --> 01:30:13,600
you're familiar with yeah

1273
01:30:13,600 --> 01:30:15,760
so i'm just looking at this my guess is

1274
01:30:15,760 --> 01:30:17,679
that you can never win this race though

1275
01:30:17,679 --> 01:30:19,040
right because

1276
01:30:19,040 --> 01:30:21,440
uh a single byte is a single byte and so

1277
01:30:21,440 --> 01:30:22,480
if your data point or selection point

1278
01:30:22,480 --> 01:30:23,840
are the same and you you're going to

1279
01:30:23,840 --> 01:30:25,600
move them both the same same way do you

1280
01:30:25,600 --> 01:30:26,800
wouldn't you have to put into a loop

1281
01:30:26,800 --> 01:30:27,920
that would

1282
01:30:27,920 --> 01:30:30,000
that's how i did faster i basically just

1283
01:30:30,000 --> 01:30:32,719
had a loop uh that went on until like i

1284
01:30:32,719 --> 01:30:35,280
had an input loop and then until i sent

1285
01:30:35,280 --> 01:30:37,600
a null byte it would stop yeah yeah yeah

1286
01:30:37,600 --> 01:30:38,560
yeah i think i think they're going to

1287
01:30:38,560 --> 01:30:39,920
need something like that because i think

1288
01:30:39,920 --> 01:30:41,360
essentially just putting a bunch of move

1289
01:30:41,360 --> 01:30:43,040
bracket move rights is it's going to

1290
01:30:43,040 --> 01:30:44,480
increment both the program counter and

1291
01:30:44,480 --> 01:30:46,880
the data counter at the same rate right

1292
01:30:46,880 --> 01:30:48,000
and so you're never going to win that

1293
01:30:48,000 --> 01:30:49,120
race because they're both moving forward

1294
01:30:49,120 --> 01:30:50,480
at the same rate

1295
01:30:50,480 --> 01:30:52,320
i guess that would be different if each

1296
01:30:52,320 --> 01:30:54,239
uh and each byte was stored in like a

1297
01:30:54,239 --> 01:30:56,080
bigger structure like it was like a a d

1298
01:30:56,080 --> 01:30:57,040
word or something like that you might be

1299
01:30:57,040 --> 01:30:58,159
able to misline them differently that

1300
01:30:58,159 --> 01:30:59,440
way but

1301
01:30:59,440 --> 01:31:00,800
um

1302
01:31:00,800 --> 01:31:02,400
so i think until we see that they're

1303
01:31:02,400 --> 01:31:03,280
going to be

1304
01:31:03,280 --> 01:31:06,560
stuck on that stage unless i'm

1305
01:31:06,560 --> 01:31:08,480
misunderstanding where that is at and so

1306
01:31:08,480 --> 01:31:09,280
let's

1307
01:31:09,280 --> 01:31:10,639
yeah are we seeing anything from rika

1308
01:31:10,639 --> 01:31:12,400
pigs because they they have some ground

1309
01:31:12,400 --> 01:31:15,199
to gain they have been staring at the

1310
01:31:15,199 --> 01:31:18,239
at the ida code still i think i

1311
01:31:18,239 --> 01:31:19,760
i do wonder what they are thinking

1312
01:31:19,760 --> 01:31:20,719
because

1313
01:31:20,719 --> 01:31:23,199
they must see that they can move that

1314
01:31:23,199 --> 01:31:26,080
area out of bounds for sure i i cannot

1315
01:31:26,080 --> 01:31:27,280
like they

1316
01:31:27,280 --> 01:31:29,679
it's too easy they they for sure have to

1317
01:31:29,679 --> 01:31:31,679
know about it it's hard though when you

1318
01:31:31,679 --> 01:31:33,760
get like put on the spotlight sometimes

1319
01:31:33,760 --> 01:31:35,120
something that would be immediately

1320
01:31:35,120 --> 01:31:36,080
obvious

1321
01:31:36,080 --> 01:31:37,760
if you were sitting at home

1322
01:31:37,760 --> 01:31:39,600
but i do wonder if they have seen the

1323
01:31:39,600 --> 01:31:41,760
restrictions and they understand uh okay

1324
01:31:41,760 --> 01:31:44,159
we can't actually pull it off and maybe

1325
01:31:44,159 --> 01:31:47,120
they are hunting for a second bug um and

1326
01:31:47,120 --> 01:31:49,520
maybe playing around they might notice

1327
01:31:49,520 --> 01:31:51,199
could could notice it but i think they

1328
01:31:51,199 --> 01:31:53,679
are just like in their head trying to

1329
01:31:53,679 --> 01:31:55,199
yeah that's a good point again that's

1330
01:31:55,199 --> 01:31:56,239
what we saw earlier is that maybe

1331
01:31:56,239 --> 01:31:58,080
they're trying to just put this together

1332
01:31:58,080 --> 01:32:00,239
in a one shot as as opposed to like

1333
01:32:00,239 --> 01:32:01,600
build a small piece test it build a

1334
01:32:01,600 --> 01:32:03,199
small piece test it and so

1335
01:32:03,199 --> 01:32:05,440
you know speaking of uh mental models

1336
01:32:05,440 --> 01:32:07,840
again uh you can see that thanks to how

1337
01:32:07,840 --> 01:32:10,320
the program was compiled so if you look

1338
01:32:10,320 --> 01:32:12,719
at the source code the

1339
01:32:12,719 --> 01:32:14,560
the program array and the data array

1340
01:32:14,560 --> 01:32:15,840
there are oh

1341
01:32:15,840 --> 01:32:18,320
there we go oh nice that's a good

1342
01:32:18,320 --> 01:32:21,280
looking one yeah yeah

1343
01:32:21,280 --> 01:32:23,440
so

1344
01:32:23,520 --> 01:32:25,199
they're looking at the definition here

1345
01:32:25,199 --> 01:32:27,040
looking at the

1346
01:32:27,040 --> 01:32:29,679
loop uh construction yes yes that is an

1347
01:32:29,679 --> 01:32:31,040
interesting thing to look at i think

1348
01:32:31,040 --> 01:32:33,040
that's a fantastic thing to be looking

1349
01:32:33,040 --> 01:32:33,760
at

1350
01:32:33,760 --> 01:32:35,520
yeah and look how they write the code

1351
01:32:35,520 --> 01:32:38,080
here they write it in pseudo code yeah

1352
01:32:38,080 --> 01:32:40,480
and probably translate it then into um

1353
01:32:40,480 --> 01:32:42,080
into braintruck code because this is

1354
01:32:42,080 --> 01:32:42,960
just

1355
01:32:42,960 --> 01:32:44,719
easier for them to reason about what

1356
01:32:44,719 --> 01:32:47,280
they are doing right however i do wonder

1357
01:32:47,280 --> 01:32:50,000
if they miss then this trick with the

1358
01:32:50,000 --> 01:32:52,159
keeping open bracket because you know

1359
01:32:52,159 --> 01:32:53,760
that is something you can reason about

1360
01:32:53,760 --> 01:32:55,600
in a brain program that's moving

1361
01:32:55,600 --> 01:32:58,639
the cursor forward while you know

1362
01:32:58,639 --> 01:33:00,960
a dangling open bracket is not something

1363
01:33:00,960 --> 01:33:02,320
you would

1364
01:33:02,320 --> 01:33:04,080
no like if you would write

1365
01:33:04,080 --> 01:33:05,600
if you were writing c and you would have

1366
01:33:05,600 --> 01:33:07,040
like an unmatched bracket your code

1367
01:33:07,040 --> 01:33:08,800
wouldn't compile so that's like yeah

1368
01:33:08,800 --> 01:33:10,480
it's an error you fix it and then you're

1369
01:33:10,480 --> 01:33:12,718
done

1370
01:33:13,280 --> 01:33:15,120
yeah

1371
01:33:15,120 --> 01:33:17,040
so i was saying like in the source code

1372
01:33:17,040 --> 01:33:18,800
the program array and the data array are

1373
01:33:18,800 --> 01:33:21,040
the two separate variables next to each

1374
01:33:21,040 --> 01:33:23,600
other but the way this is compiled if

1375
01:33:23,600 --> 01:33:25,760
you look at the decompilation it looks

1376
01:33:25,760 --> 01:33:28,320
like one array and then there are a

1377
01:33:28,320 --> 01:33:30,800
bunch of offsets sometimes when this is

1378
01:33:30,800 --> 01:33:32,320
being accessed so

1379
01:33:32,320 --> 01:33:33,760
that can make it like a little bit

1380
01:33:33,760 --> 01:33:35,280
harder to reason about this you need to

1381
01:33:35,280 --> 01:33:37,280
kind of detangle this and say like no

1382
01:33:37,280 --> 01:33:38,800
this is not one array these are two

1383
01:33:38,800 --> 01:33:40,239
arrays that happen to be next to each

1384
01:33:40,239 --> 01:33:41,360
other yeah and that's the part that i

1385
01:33:41,360 --> 01:33:42,960
think we're still not seeing perfect

1386
01:33:42,960 --> 01:33:45,040
root uh kind of piece together because

1387
01:33:45,040 --> 01:33:46,320
they're they're trying to treat them

1388
01:33:46,320 --> 01:33:48,239
independently without realizing that i

1389
01:33:48,239 --> 01:33:49,199
think they happen to be overlapping

1390
01:33:49,199 --> 01:33:50,639
because they've got this they believe

1391
01:33:50,639 --> 01:33:52,560
they've calculated the distance uh

1392
01:33:52,560 --> 01:33:54,000
correctly but i think that all they're

1393
01:33:54,000 --> 01:33:56,159
gonna end up doing is overwriting

1394
01:33:56,159 --> 01:33:59,040
if they if they put too much data in

1395
01:33:59,040 --> 01:34:00,159
um

1396
01:34:00,159 --> 01:34:01,120
they're gonna end up actually just

1397
01:34:01,120 --> 01:34:02,320
overwriting the return address with

1398
01:34:02,320 --> 01:34:04,000
their data which won't help them right

1399
01:34:04,000 --> 01:34:05,040
right

1400
01:34:05,040 --> 01:34:05,920
because they're not going to be able to

1401
01:34:05,920 --> 01:34:07,520
write the proper values they're all

1402
01:34:07,520 --> 01:34:08,719
going to be very things that happen to

1403
01:34:08,719 --> 01:34:10,719
match these uh

1404
01:34:10,719 --> 01:34:13,440
these characters

1405
01:34:14,000 --> 01:34:16,320
now perfect root is going for here now

1406
01:34:16,320 --> 01:34:18,639
testing you know writing arbitrary bytes

1407
01:34:18,639 --> 01:34:20,960
instead of increments with the input

1408
01:34:20,960 --> 01:34:23,920
command which obviously would save space

1409
01:34:23,920 --> 01:34:24,719
yeah

1410
01:34:24,719 --> 01:34:25,840
yeah i think they they came to that

1411
01:34:25,840 --> 01:34:27,199
conclusion as well and realized oh wait

1412
01:34:27,199 --> 01:34:28,639
let's just put the value direct value

1413
01:34:28,639 --> 01:34:30,719
that we want over top of it again i

1414
01:34:30,719 --> 01:34:32,800
think that the the only the only piece

1415
01:34:32,800 --> 01:34:34,080
they're missing

1416
01:34:34,080 --> 01:34:35,280
is that they need to be able to

1417
01:34:35,280 --> 01:34:36,960
increment the pointer more efficiently

1418
01:34:36,960 --> 01:34:38,639
yeah all right sorry increment the data

1419
01:34:38,639 --> 01:34:39,840
pointer they need to be able to move the

1420
01:34:39,840 --> 01:34:41,520
data pointer to the right

1421
01:34:41,520 --> 01:34:43,119
without having the code pointer move at

1422
01:34:43,119 --> 01:34:45,360
the same rate and so once they

1423
01:34:45,360 --> 01:34:48,000
put that together

1424
01:34:48,000 --> 01:34:49,760
they should basically so there are

1425
01:34:49,760 --> 01:34:53,280
basically two ways you could do this

1426
01:34:57,119 --> 01:34:58,840
i

1427
01:34:58,840 --> 01:35:01,360
think no

1428
01:35:01,360 --> 01:35:02,320
no

1429
01:35:02,320 --> 01:35:03,760
they need a loop they have to have a

1430
01:35:03,760 --> 01:35:05,199
loop yeah i thought that they could have

1431
01:35:05,199 --> 01:35:08,239
stuff before the closing bracket but

1432
01:35:08,239 --> 01:35:09,840
that's the wrong direct that's the other

1433
01:35:09,840 --> 01:35:11,920
way around right it will be after that

1434
01:35:11,920 --> 01:35:13,280
it doesn't matter the closing bracket

1435
01:35:13,280 --> 01:35:14,639
always begins it just makes the problem

1436
01:35:14,639 --> 01:35:16,000
worse in fact if you do that yeah yeah

1437
01:35:16,000 --> 01:35:18,719
exactly so uh yes they will do they do

1438
01:35:18,719 --> 01:35:20,800
need the loop and this is exactly the

1439
01:35:20,800 --> 01:35:22,480
the type of problem you face here you're

1440
01:35:22,480 --> 01:35:24,719
thinking like oh i'll just overflow the

1441
01:35:24,719 --> 01:35:26,560
buffer and then it's like oh no wait but

1442
01:35:26,560 --> 01:35:28,560
i'm kind of like uh you know cutting off

1443
01:35:28,560 --> 01:35:30,480
the branch i'm sitting on wow that's a

1444
01:35:30,480 --> 01:35:34,239
great analogy yeah it's a great analogy

1445
01:35:34,719 --> 01:35:35,840
all right so

1446
01:35:35,840 --> 01:35:38,080
there there is a chance that we we need

1447
01:35:38,080 --> 01:35:39,440
to give uh

1448
01:35:39,440 --> 01:35:41,440
different hints potentially maybe if

1449
01:35:41,440 --> 01:35:42,560
they're both stuck and they're both not

1450
01:35:42,560 --> 01:35:43,600
making progress we need to give them

1451
01:35:43,600 --> 01:35:44,960
each a relative i hate to do that i

1452
01:35:44,960 --> 01:35:46,400
would really prefer

1453
01:35:46,400 --> 01:35:47,920
to give the same information to both but

1454
01:35:47,920 --> 01:35:49,679
if we end up i think we're still okay on

1455
01:35:49,679 --> 01:35:51,199
time and so i don't think we need to

1456
01:35:51,199 --> 01:35:52,719
immediately do anything but just

1457
01:35:52,719 --> 01:35:54,320
something we got to kind of figure out

1458
01:35:54,320 --> 01:35:57,679
yeah uh rekopik was highlighting uh this

1459
01:35:57,679 --> 01:36:01,520
this the the limitation of the length so

1460
01:36:01,520 --> 01:36:03,440
um i think they are still struggling

1461
01:36:03,440 --> 01:36:05,199
with yeah i think i think they need to

1462
01:36:05,199 --> 01:36:07,280
get past that initial hurdle and uh

1463
01:36:07,280 --> 01:36:09,119
perfect root is just really still stuck

1464
01:36:09,119 --> 01:36:10,639
on on this one

1465
01:36:10,639 --> 01:36:13,280
um but we have time i think and honestly

1466
01:36:13,280 --> 01:36:14,880
wreck a pig could come to this

1467
01:36:14,880 --> 01:36:16,560
realization and still catch up to

1468
01:36:16,560 --> 01:36:18,000
perfect route like that is absolutely

1469
01:36:18,000 --> 01:36:20,000
still possible here yeah yeah yeah

1470
01:36:20,000 --> 01:36:21,760
maybe they their mental model is already

1471
01:36:21,760 --> 01:36:22,960
much further i don't know they spent a

1472
01:36:22,960 --> 01:36:24,400
lot more time in either so maybe they

1473
01:36:24,400 --> 01:36:26,719
figured out the the array situation

1474
01:36:26,719 --> 01:36:27,760
right maybe they would better understand

1475
01:36:27,760 --> 01:36:29,360
that and be able to create that loop to

1476
01:36:29,360 --> 01:36:31,199
get them past that uh

1477
01:36:31,199 --> 01:36:33,678
that point

1478
01:36:37,440 --> 01:36:38,639
i mean i will say though that what

1479
01:36:38,639 --> 01:36:40,080
perfectrude is doing makes a lot of

1480
01:36:40,080 --> 01:36:42,560
sense in terms of of analyzing things in

1481
01:36:42,560 --> 01:36:43,760
the debugger while they're doing it but

1482
01:36:43,760 --> 01:36:45,600
what i think what they i think what they

1483
01:36:45,600 --> 01:36:48,000
need to do is to

1484
01:36:48,000 --> 01:36:50,320
track what the variables that represent

1485
01:36:50,320 --> 01:36:52,320
the pointers for the data and for the

1486
01:36:52,320 --> 01:36:54,080
code in the virtual machine itself i

1487
01:36:54,080 --> 01:36:55,520
think that would really help them kind

1488
01:36:55,520 --> 01:36:57,360
of realize this so what they keep

1489
01:36:57,360 --> 01:36:58,800
looking at is just the rods like the

1490
01:36:58,800 --> 01:37:00,880
stack frames basically just the raw data

1491
01:37:00,880 --> 01:37:02,400
where everything lives they're not

1492
01:37:02,400 --> 01:37:03,840
looking at

1493
01:37:03,840 --> 01:37:05,760
the like what is what is what is the

1494
01:37:05,760 --> 01:37:06,880
pointer for the code and what's the

1495
01:37:06,880 --> 01:37:08,480
pointer for the data and what's

1496
01:37:08,480 --> 01:37:10,000
happening there and so i think checking

1497
01:37:10,000 --> 01:37:12,080
that in their debug script each time

1498
01:37:12,080 --> 01:37:13,199
would probably

1499
01:37:13,199 --> 01:37:15,360
make it click for them uh what they need

1500
01:37:15,360 --> 01:37:16,800
to do

1501
01:37:16,800 --> 01:37:18,880
but we'll see we did get a question in

1502
01:37:18,880 --> 01:37:20,960
uh chat actually i would love to hear uh

1503
01:37:20,960 --> 01:37:22,800
both of y'all's opinion on this somebody

1504
01:37:22,800 --> 01:37:24,960
says how can i start learning ctf what

1505
01:37:24,960 --> 01:37:25,920
do you what do you guys need to

1506
01:37:25,920 --> 01:37:28,480
recommend that's a great question um

1507
01:37:28,480 --> 01:37:29,920
yeah live overflow what's your what's

1508
01:37:29,920 --> 01:37:32,400
your take here let's start there

1509
01:37:32,400 --> 01:37:34,239
well i hope my videos help i have a

1510
01:37:34,239 --> 01:37:37,840
binary application playlist uh and other

1511
01:37:37,840 --> 01:37:40,320
than that my go to because i learned by

1512
01:37:40,320 --> 01:37:42,719
doing it you know i didn't have video so

1513
01:37:42,719 --> 01:37:44,960
uh recommending the way i learned is

1514
01:37:44,960 --> 01:37:47,440
through war games like over the wire or

1515
01:37:47,440 --> 01:37:50,159
pico ctf i mean i haven't done pico cdf

1516
01:37:50,159 --> 01:37:52,400
myself but that seems to be an amazing

1517
01:37:52,400 --> 01:37:54,639
resource everybody recommends and over

1518
01:37:54,639 --> 01:37:56,080
the wire

1519
01:37:56,080 --> 01:37:58,159
these are the type of challenges that i

1520
01:37:58,159 --> 01:38:00,840
really learned with yeah there's

1521
01:38:00,840 --> 01:38:03,040
puntable.kr yeah oh yeah there are many

1522
01:38:03,040 --> 01:38:05,679
of those oh yeah i would definitely say

1523
01:38:05,679 --> 01:38:08,480
uh if i if i were to name like one

1524
01:38:08,480 --> 01:38:10,800
starting resource that would be pico ctf

1525
01:38:10,800 --> 01:38:12,400
uh that's that's where i would it is

1526
01:38:12,400 --> 01:38:13,760
really really well done yeah they do a

1527
01:38:13,760 --> 01:38:16,080
good job with that starts very easy very

1528
01:38:16,080 --> 01:38:18,320
simple they have like help forums where

1529
01:38:18,320 --> 01:38:19,520
you can ask

1530
01:38:19,520 --> 01:38:21,199
about it uh

1531
01:38:21,199 --> 01:38:23,840
and uh it slowly ramps up they have a

1532
01:38:23,840 --> 01:38:26,480
wide range of uh categories so it's not

1533
01:38:26,480 --> 01:38:28,400
only like the ponables that we've seen

1534
01:38:28,400 --> 01:38:30,400
in this tournament they have like web

1535
01:38:30,400 --> 01:38:32,400
challenges forensics cryptography all

1536
01:38:32,400 --> 01:38:33,360
the stuff

1537
01:38:33,360 --> 01:38:34,239
um

1538
01:38:34,239 --> 01:38:36,239
yeah and all of these popular sites uh

1539
01:38:36,239 --> 01:38:38,080
like pico ctf and all the wire there are

1540
01:38:38,080 --> 01:38:40,239
lots of solutions online which you

1541
01:38:40,239 --> 01:38:41,280
should

1542
01:38:41,280 --> 01:38:42,880
you know you need to find the balance

1543
01:38:42,880 --> 01:38:45,280
between avoiding the solutions and at

1544
01:38:45,280 --> 01:38:47,440
some point looking them up but not just

1545
01:38:47,440 --> 01:38:49,600
looking them up uh working through them

1546
01:38:49,600 --> 01:38:51,520
in case you choose to look through it

1547
01:38:51,520 --> 01:38:53,360
try to maybe look at it and then close

1548
01:38:53,360 --> 01:38:54,960
it again and re-implement it you know

1549
01:38:54,960 --> 01:38:57,199
there are various ways how you can learn

1550
01:38:57,199 --> 01:38:59,920
with just don't cheat yourself but um

1551
01:38:59,920 --> 01:39:01,440
yeah you could you could fail on either

1552
01:39:01,440 --> 01:39:02,639
side of that right like you can never

1553
01:39:02,639 --> 01:39:04,080
look at the other resources which is

1554
01:39:04,080 --> 01:39:06,320
kind of some people stubbornly refuse to

1555
01:39:06,320 --> 01:39:08,239
like get any outside kind of help which

1556
01:39:08,239 --> 01:39:09,360
takes them longer to learn things and

1557
01:39:09,360 --> 01:39:11,119
then other people look too early and

1558
01:39:11,119 --> 01:39:12,480
never force themselves to go through

1559
01:39:12,480 --> 01:39:13,520
learning process so i think that's a

1560
01:39:13,520 --> 01:39:15,280
great way to describe it i mean the

1561
01:39:15,280 --> 01:39:17,119
reason why i enjoyed

1562
01:39:17,119 --> 01:39:19,040
seeing live ctf back in the day was

1563
01:39:19,040 --> 01:39:21,360
exactly this problem because i was

1564
01:39:21,360 --> 01:39:24,560
playing these war games and uh you know

1565
01:39:24,560 --> 01:39:26,800
making it doing it kind of my way and

1566
01:39:26,800 --> 01:39:28,960
i've never seen anybody else how do they

1567
01:39:28,960 --> 01:39:30,960
do it and then i'm seeing live ctf and

1568
01:39:30,960 --> 01:39:34,000
they solve opponentable and see how they

1569
01:39:34,000 --> 01:39:35,520
do their exploit script and everything

1570
01:39:35,520 --> 01:39:38,560
that was mind-blowing to me so yeah it's

1571
01:39:38,560 --> 01:39:40,159
it's i think it's important to you know

1572
01:39:40,159 --> 01:39:42,480
take advantages of all these resources

1573
01:39:42,480 --> 01:39:44,480
what they can offer and combining them

1574
01:39:44,480 --> 01:39:46,239
all together

1575
01:39:46,239 --> 01:39:47,760
yeah i think you're you're not going to

1576
01:39:47,760 --> 01:39:49,760
be as fast as as the folks we're seeing

1577
01:39:49,760 --> 01:39:51,840
here today without years and years and

1578
01:39:51,840 --> 01:39:53,199
years and years of practice right these

1579
01:39:53,199 --> 01:39:55,040
are these are people who have at the top

1580
01:39:55,040 --> 01:39:57,280
of the field and have really practiced

1581
01:39:57,280 --> 01:39:59,920
they play a ton of ctfs and it takes a

1582
01:39:59,920 --> 01:40:01,360
lot to kind of get here so don't be

1583
01:40:01,360 --> 01:40:03,040
intimidated if you see see them them

1584
01:40:03,040 --> 01:40:04,880
doing this i mean even like as as

1585
01:40:04,880 --> 01:40:06,080
casters when we're watching them we're

1586
01:40:06,080 --> 01:40:07,840
in awe at the speed that some of these

1587
01:40:07,840 --> 01:40:10,000
people look at and like all three of us

1588
01:40:10,000 --> 01:40:11,360
are like you know

1589
01:40:11,360 --> 01:40:13,679
fairly experienced ctf players but we

1590
01:40:13,679 --> 01:40:15,920
are still you know impressed by this

1591
01:40:15,920 --> 01:40:17,840
thing mid i would say we're mid-tier

1592
01:40:17,840 --> 01:40:19,040
compared to what we're seeing in front

1593
01:40:19,040 --> 01:40:21,600
of us uh speed wise certainly

1594
01:40:21,600 --> 01:40:24,400
and this challenge is like doable i

1595
01:40:24,400 --> 01:40:27,280
think all the both players know that

1596
01:40:27,280 --> 01:40:30,159
this is doable and still it takes them a

1597
01:40:30,159 --> 01:40:32,400
lot of time and they are super fast you

1598
01:40:32,400 --> 01:40:34,639
know like but but maybe for an outsider

1599
01:40:34,639 --> 01:40:36,560
it might seem crazy that you have to

1600
01:40:36,560 --> 01:40:39,119
spend an hour on something that we would

1601
01:40:39,119 --> 01:40:41,920
call easy but it's just a matter of the

1602
01:40:41,920 --> 01:40:43,760
fact these things just take a lot of

1603
01:40:43,760 --> 01:40:45,600
iteration tons of information you need

1604
01:40:45,600 --> 01:40:48,560
to think about and reason about um

1605
01:40:48,560 --> 01:40:50,560
yeah i got an easy challenge i think we

1606
01:40:50,560 --> 01:40:52,159
do need to give a hint to both teams i

1607
01:40:52,159 --> 01:40:53,360
think we're getting the same hit to both

1608
01:40:53,360 --> 01:40:54,639
we're going to write two bits of

1609
01:40:54,639 --> 01:40:56,000
information to each one of them yes

1610
01:40:56,000 --> 01:40:57,199
right because we're going to write the

1611
01:40:57,199 --> 01:40:58,400
same hit on both they both get the same

1612
01:40:58,400 --> 01:41:00,239
height but it will contain two parts yes

1613
01:41:00,239 --> 01:41:03,360
uh the first part will what about

1614
01:41:03,360 --> 01:41:04,800
doing like

1615
01:41:04,800 --> 01:41:06,400
opening bracket closing bracket opening

1616
01:41:06,400 --> 01:41:08,960
brackets as the

1617
01:41:08,960 --> 01:41:11,119
as that one actually no yeah maybe we

1618
01:41:11,119 --> 01:41:12,560
each give them each just half the hint

1619
01:41:12,560 --> 01:41:13,760
because because the problem is if we

1620
01:41:13,760 --> 01:41:16,000
give oh then we tell them we're telling

1621
01:41:16,000 --> 01:41:17,280
them something that we're telling them

1622
01:41:17,280 --> 01:41:18,719
something that that perfect root has

1623
01:41:18,719 --> 01:41:20,320
already figured out so we need to tell

1624
01:41:20,320 --> 01:41:21,760
them one bit of information to get them

1625
01:41:21,760 --> 01:41:23,840
past where they're currently at right

1626
01:41:23,840 --> 01:41:24,880
this is

1627
01:41:24,880 --> 01:41:27,199
but in terms of fairness yeah yeah you

1628
01:41:27,199 --> 01:41:29,520
know both hints uh wouldn't it be like

1629
01:41:29,520 --> 01:41:31,679
just put it on the same table like the

1630
01:41:31,679 --> 01:41:33,520
problem with doing both hands yeah

1631
01:41:33,520 --> 01:41:34,960
here's here's the problem with both

1632
01:41:34,960 --> 01:41:36,400
hands if you give both hands you're

1633
01:41:36,400 --> 01:41:38,080
telling rekopek something that perfectly

1634
01:41:38,080 --> 01:41:40,080
well depends on how we tell them right

1635
01:41:40,080 --> 01:41:42,239
if we do so both of them are struggling

1636
01:41:42,239 --> 01:41:44,080
with loops right

1637
01:41:44,080 --> 01:41:45,760
so maybe the hint is like maybe you need

1638
01:41:45,760 --> 01:41:46,880
a loop

1639
01:41:46,880 --> 01:41:47,760
uh

1640
01:41:47,760 --> 01:41:48,800
for

1641
01:41:48,800 --> 01:41:50,639
have you considered using the key yeah

1642
01:41:50,639 --> 01:41:52,239
yeah yeah i think this is because this

1643
01:41:52,239 --> 01:41:54,560
is the exact same yeah that's fantastic

1644
01:41:54,560 --> 01:41:56,000
okay okay okay

1645
01:41:56,000 --> 01:41:57,760
that is brilliant and i love it and i

1646
01:41:57,760 --> 01:41:59,520
think we should definitely

1647
01:41:59,520 --> 01:42:01,679
um i think we should do so

1648
01:42:01,679 --> 01:42:03,679
that's a hint uh

1649
01:42:03,679 --> 01:42:06,239
you need to use a loop yeah

1650
01:42:06,239 --> 01:42:07,920
because they both do right now they both

1651
01:42:07,920 --> 01:42:10,639
need to use a loop

1652
01:42:10,719 --> 01:42:13,679
we will give the same hint but they will

1653
01:42:13,679 --> 01:42:15,679
have different contexts to it that's

1654
01:42:15,679 --> 01:42:17,119
fantastic

1655
01:42:17,119 --> 01:42:20,000
uh so uh jordan is preparing this uh

1656
01:42:20,000 --> 01:42:21,199
hint

1657
01:42:21,199 --> 01:42:22,880
um

1658
01:42:22,880 --> 01:42:26,639
so there was a question here in chat

1659
01:42:26,639 --> 01:42:29,360
what would you guys say is the ctf level

1660
01:42:29,360 --> 01:42:31,040
of this challenge

1661
01:42:31,040 --> 01:42:32,239
so

1662
01:42:32,239 --> 01:42:33,040
like

1663
01:42:33,040 --> 01:42:36,800
you know in any normal ctf context

1664
01:42:36,800 --> 01:42:38,719
i would call this a

1665
01:42:38,719 --> 01:42:40,280
fairly

1666
01:42:40,280 --> 01:42:43,920
easy challenge but for like the if you

1667
01:42:43,920 --> 01:42:46,560
talk the the big

1668
01:42:46,560 --> 01:42:48,639
serious ct it's not serious that sounds

1669
01:42:48,639 --> 01:42:50,800
so no it's not it's not an easy it's not

1670
01:42:50,800 --> 01:42:53,040
an easy beginner challenge it's an easy

1671
01:42:53,040 --> 01:42:54,239
challenge

1672
01:42:54,239 --> 01:42:56,080
in the context of

1673
01:42:56,080 --> 01:42:57,840
teams that have been playing cts for 10

1674
01:42:57,840 --> 01:42:59,920
years in that context is an easy

1675
01:42:59,920 --> 01:43:02,080
challenge uh for

1676
01:43:02,080 --> 01:43:04,239
for anybody like even for me you know

1677
01:43:04,239 --> 01:43:05,920
that's a nice challenge i would spend a

1678
01:43:05,920 --> 01:43:08,719
couple of hours on probably um

1679
01:43:08,719 --> 01:43:10,639
it's doable it's it doesn't feel

1680
01:43:10,639 --> 01:43:13,600
impossible but it's also like still has

1681
01:43:13,600 --> 01:43:16,320
some trickery you need to figure out

1682
01:43:16,320 --> 01:43:17,360
right

1683
01:43:17,360 --> 01:43:19,600
so we are about to give them the

1684
01:43:19,600 --> 01:43:21,520
hints now jordan is going to go sort

1685
01:43:21,520 --> 01:43:22,840
that out

1686
01:43:22,840 --> 01:43:25,840
uh yeah this uh

1687
01:43:25,840 --> 01:43:27,920
yeah there's this traditional uh so

1688
01:43:27,920 --> 01:43:29,360
mentioned here it's like there's someone

1689
01:43:29,360 --> 01:43:31,119
saying it's a 200 so sometimes you will

1690
01:43:31,119 --> 01:43:34,400
hear especially older ctf players like

1691
01:43:34,400 --> 01:43:37,360
rating some challenges on a 100 to 500

1692
01:43:37,360 --> 01:43:41,040
point scale which to all players who

1693
01:43:41,040 --> 01:43:42,320
started playing in like the last couple

1694
01:43:42,320 --> 01:43:43,679
of years doesn't really make sense

1695
01:43:43,679 --> 01:43:45,199
because nowadays we typically use the

1696
01:43:45,199 --> 01:43:47,199
dynamic scoring system but you know

1697
01:43:47,199 --> 01:43:49,600
that's the most common format of ctf is

1698
01:43:49,600 --> 01:43:51,840
the jeopardy style like inspired by the

1699
01:43:51,840 --> 01:43:54,480
tv show and in that show

1700
01:43:54,480 --> 01:43:56,400
you have like in each category you have

1701
01:43:56,400 --> 01:43:59,280
five uh questions uh of like 100 200 and

1702
01:43:59,280 --> 01:44:01,920
so on down to 500 points and that is how

1703
01:44:01,920 --> 01:44:04,400
ctf challenges used to be score

1704
01:44:04,400 --> 01:44:07,119
back in the days so yeah yeah it's so

1705
01:44:07,119 --> 01:44:08,480
the dynamic scoring system that's

1706
01:44:08,480 --> 01:44:09,920
currently in use makes a lot of sense

1707
01:44:09,920 --> 01:44:11,520
because you're sort of letting the

1708
01:44:11,520 --> 01:44:12,800
the one of the main problems and you've

1709
01:44:12,800 --> 01:44:14,400
seen it here this weekend right is we

1710
01:44:14,400 --> 01:44:15,520
think something is easy and turns out to

1711
01:44:15,520 --> 01:44:16,560
be harder we think something's harder it

1712
01:44:16,560 --> 01:44:18,080
turns out to be easier like we we

1713
01:44:18,080 --> 01:44:19,920
generally have gotten the the it pretty

1714
01:44:19,920 --> 01:44:21,440
right but it's it's impossible to be

1715
01:44:21,440 --> 01:44:22,800
perfect you're not going to get exactly

1716
01:44:22,800 --> 01:44:24,320
the difficulty right uh because you

1717
01:44:24,320 --> 01:44:25,520
don't know exactly how people are going

1718
01:44:25,520 --> 01:44:26,560
to solve things or what they're going to

1719
01:44:26,560 --> 01:44:28,639
see and so

1720
01:44:28,639 --> 01:44:31,199
yeah and what kind of technical problems

1721
01:44:31,199 --> 01:44:32,960
you run into i mean solving the

1722
01:44:32,960 --> 01:44:34,960
challenge thing is one thing but then

1723
01:44:34,960 --> 01:44:37,199
maybe you cannot run the binary oh yeah

1724
01:44:37,199 --> 01:44:39,440
maybe you look at the wrong thing

1725
01:44:39,440 --> 01:44:41,920
uh maybe you misinterpret something as a

1726
01:44:41,920 --> 01:44:44,159
bug that is not a bug or you know tons

1727
01:44:44,159 --> 01:44:46,159
of dead ends you can run into and waste

1728
01:44:46,159 --> 01:44:47,679
time on

1729
01:44:47,679 --> 01:44:50,480
yeah and so uh all that can factor in so

1730
01:44:50,480 --> 01:44:51,840
being able to dynamically score

1731
01:44:51,840 --> 01:44:53,280
challenges is really nice and it's

1732
01:44:53,280 --> 01:44:55,600
essentially the organizers saying

1733
01:44:55,600 --> 01:44:57,360
the fewer teams that score this or maybe

1734
01:44:57,360 --> 01:44:58,880
the longer time it goes unscored the

1735
01:44:58,880 --> 01:45:00,159
more points it's going to be worth and

1736
01:45:00,159 --> 01:45:01,360
the more people that solve it the less

1737
01:45:01,360 --> 01:45:02,719
it will be worth and so it kind of self

1738
01:45:02,719 --> 01:45:05,760
balances and so you gain more points by

1739
01:45:05,760 --> 01:45:07,199
solving things that fewer other teams

1740
01:45:07,199 --> 01:45:08,719
solve which kind of makes sense and then

1741
01:45:08,719 --> 01:45:10,320
if something is sold by fewer teams it's

1742
01:45:10,320 --> 01:45:12,239
more attractive more teams want to solve

1743
01:45:12,239 --> 01:45:14,000
it because it's worth more and so it's

1744
01:45:14,000 --> 01:45:15,840
sort of like it really does a good job

1745
01:45:15,840 --> 01:45:17,840
of letting that problem of the

1746
01:45:17,840 --> 01:45:19,520
organizers not being able to perfectly

1747
01:45:19,520 --> 01:45:20,719
gauge the difficulty doesn't really

1748
01:45:20,719 --> 01:45:22,800
matter because the team that solves

1749
01:45:22,800 --> 01:45:24,159
overall the most things that were sold

1750
01:45:24,159 --> 01:45:26,000
by the fewest other people are going to

1751
01:45:26,000 --> 01:45:29,040
be the ones with a high score

1752
01:45:29,199 --> 01:45:30,480
it also kind of

1753
01:45:30,480 --> 01:45:33,360
took away the first blood that was often

1754
01:45:33,360 --> 01:45:34,239
in some

1755
01:45:34,239 --> 01:45:37,600
ctfs which is with time zones sometimes

1756
01:45:37,600 --> 01:45:38,880
a little bit yeah it's very

1757
01:45:38,880 --> 01:45:40,880
controversial and even even in like in

1758
01:45:40,880 --> 01:45:42,719
person so even like here at defcon

1759
01:45:42,719 --> 01:45:45,600
finals um i'm not a huge fan of first

1760
01:45:45,600 --> 01:45:46,960
blood so that concept is you know the

1761
01:45:46,960 --> 01:45:49,840
first blood means uh just the first team

1762
01:45:49,840 --> 01:45:52,639
to score on a particular service and so

1763
01:45:52,639 --> 01:45:54,880
uh there was something has a bonus pool

1764
01:45:54,880 --> 01:45:56,000
of points that could only be and

1765
01:45:56,000 --> 01:45:57,199
sometimes there were like even stages

1766
01:45:57,199 --> 01:45:58,639
the first three teams would get some

1767
01:45:58,639 --> 01:46:00,960
sort of back off on points to do it

1768
01:46:00,960 --> 01:46:02,719
but yeah especially with things like

1769
01:46:02,719 --> 01:46:04,000
time zones

1770
01:46:04,000 --> 01:46:06,960
it can be uh it can be really hard to

1771
01:46:06,960 --> 01:46:08,639
have that work out the other problem

1772
01:46:08,639 --> 01:46:12,639
with first bloods is that um or actually

1773
01:46:12,639 --> 01:46:14,000
sometimes the reason that people did

1774
01:46:14,000 --> 01:46:15,520
first bloods was to try to counteract

1775
01:46:15,520 --> 01:46:18,320
big teams because large teams can spread

1776
01:46:18,320 --> 01:46:20,719
out on many many different topics but a

1777
01:46:20,719 --> 01:46:22,960
few really hard challenges that only an

1778
01:46:22,960 --> 01:46:24,960
expert could solve by having first blood

1779
01:46:24,960 --> 01:46:26,400
points you're incentivizing

1780
01:46:26,400 --> 01:46:27,840
you're one particular really good person

1781
01:46:27,840 --> 01:46:29,679
so that's actually one of the other

1782
01:46:29,679 --> 01:46:31,199
things that that organizers have to

1783
01:46:31,199 --> 01:46:33,760
consider is do they want to let their

1784
01:46:33,760 --> 01:46:35,119
game be winnable just because somebody

1785
01:46:35,119 --> 01:46:36,400
has a really really good team of people

1786
01:46:36,400 --> 01:46:38,560
who are all you know pretty good or do

1787
01:46:38,560 --> 01:46:41,920
you want to focus a core uh team of

1788
01:46:41,920 --> 01:46:44,000
experts and these are like topics that

1789
01:46:44,000 --> 01:46:46,239
you know people who are in the ctf

1790
01:46:46,239 --> 01:46:48,719
community or organizing ctfs like

1791
01:46:48,719 --> 01:46:50,480
love to discuss these things about like

1792
01:46:50,480 --> 01:46:52,320
you know it's a good bar topic

1793
01:46:52,320 --> 01:46:55,119
how how do we create fair uh competition

1794
01:46:55,119 --> 01:46:57,040
environment where you have these

1795
01:46:57,040 --> 01:46:58,960
different like conflicting aspects like

1796
01:46:58,960 --> 01:47:01,040
you wanted to be accessible for new

1797
01:47:01,040 --> 01:47:03,520
players while also being competitive for

1798
01:47:03,520 --> 01:47:05,520
experienced players and you want to

1799
01:47:05,520 --> 01:47:07,520
encourage the right type of behavior and

1800
01:47:07,520 --> 01:47:09,520
so on so it's definitely not an easy

1801
01:47:09,520 --> 01:47:11,360
thing

1802
01:47:11,360 --> 01:47:13,520
uh coming back at here what perfect root

1803
01:47:13,520 --> 01:47:15,440
is doing i mean they were given the hint

1804
01:47:15,440 --> 01:47:18,400
now that loops might be the solution to

1805
01:47:18,400 --> 01:47:21,119
the problem they are having but as

1806
01:47:21,119 --> 01:47:23,280
they haven't executed on it their code

1807
01:47:23,280 --> 01:47:25,840
still doesn't include uh any loop thing

1808
01:47:25,840 --> 01:47:27,760
they might be set on something they

1809
01:47:27,760 --> 01:47:29,360
might believe that they are on the right

1810
01:47:29,360 --> 01:47:31,520
track and keep going as far as i can

1811
01:47:31,520 --> 01:47:33,760
tell it yeah i'm afraid they either

1812
01:47:33,760 --> 01:47:35,280
i thought the hint applied to the thing

1813
01:47:35,280 --> 01:47:36,960
that they've already solved which it

1814
01:47:36,960 --> 01:47:38,400
kind of did which is why it was relevant

1815
01:47:38,400 --> 01:47:41,920
for rika pigs but they uh might not see

1816
01:47:41,920 --> 01:47:44,000
how it applies to their current problem

1817
01:47:44,000 --> 01:47:46,000
no so actually they i just realized they

1818
01:47:46,000 --> 01:47:48,639
might not need a loop um

1819
01:47:48,639 --> 01:47:50,960
go on yeah so i mean if they carefully

1820
01:47:50,960 --> 01:47:54,400
overwrite the values right no so you um

1821
01:47:54,400 --> 01:47:55,760
okay

1822
01:47:55,760 --> 01:47:57,679
everyone try to picture this in your

1823
01:47:57,679 --> 01:47:59,679
mind now we need a whiteboard yeah this

1824
01:47:59,679 --> 01:48:02,080
is where we need the whiteboard no yeah

1825
01:48:02,080 --> 01:48:04,639
carl needs to pull up a whiteboard

1826
01:48:04,639 --> 01:48:07,280
right but so you have the data the the

1827
01:48:07,280 --> 01:48:08,960
program section it's it's small and you

1828
01:48:08,960 --> 01:48:10,719
have the long data thing here right and

1829
01:48:10,719 --> 01:48:12,400
then you use a loop here in the program

1830
01:48:12,400 --> 01:48:14,639
thing to start writing stuff here so you

1831
01:48:14,639 --> 01:48:15,440
write

1832
01:48:15,440 --> 01:48:16,719
data that's coming and you're writing a

1833
01:48:16,719 --> 01:48:18,880
brain fact program here and then right

1834
01:48:18,880 --> 01:48:21,360
in the beginning here you have an end

1835
01:48:21,360 --> 01:48:24,239
bracket right so your data pointer will

1836
01:48:24,239 --> 01:48:25,600
go

1837
01:48:25,600 --> 01:48:26,639
over here

1838
01:48:26,639 --> 01:48:28,800
and then uh you will stop to this and

1839
01:48:28,800 --> 01:48:30,800
this will then jump to the end of your

1840
01:48:30,800 --> 01:48:32,719
program and jump to the end bracket here

1841
01:48:32,719 --> 01:48:35,199
so your uh instruction pointer is still

1842
01:48:35,199 --> 01:48:37,280
like in the beginning of your new

1843
01:48:37,280 --> 01:48:39,280
program while the data pointer is like

1844
01:48:39,280 --> 01:48:40,880
you know in the middle or later the data

1845
01:48:40,880 --> 01:48:43,199
pointer at the end yes and then you then

1846
01:48:43,199 --> 01:48:45,840
they keep going like they do go in

1847
01:48:45,840 --> 01:48:47,600
tandem but the data pointer is always

1848
01:48:47,600 --> 01:48:49,280
going racing ahead of the program

1849
01:48:49,280 --> 01:48:51,119
counter and then as long as you have

1850
01:48:51,119 --> 01:48:52,639
like enough instructions because you're

1851
01:48:52,639 --> 01:48:54,080
gonna need to go you need to have to go

1852
01:48:54,080 --> 01:48:55,840
back and forth a little bit to read and

1853
01:48:55,840 --> 01:48:57,440
write and you might need you know it

1854
01:48:57,440 --> 01:48:59,520
might catch up to you so as long as you

1855
01:48:59,520 --> 01:49:01,280
space all of that correctly and you

1856
01:49:01,280 --> 01:49:02,480
actually could put some attentional

1857
01:49:02,480 --> 01:49:03,920
padding there too right like you could

1858
01:49:03,920 --> 01:49:05,600
just easily pad that out all right like

1859
01:49:05,600 --> 01:49:07,119
you could put something just uh extra

1860
01:49:07,119 --> 01:49:09,840
characters and have your data pointer be

1861
01:49:09,840 --> 01:49:11,760
at the very end so this is definitely

1862
01:49:11,760 --> 01:49:15,199
doable without well we think it is

1863
01:49:15,199 --> 01:49:17,040
proven it yeah so it could be it could

1864
01:49:17,040 --> 01:49:18,880
be doable but it certainly would be

1865
01:49:18,880 --> 01:49:19,840
easier

1866
01:49:19,840 --> 01:49:22,080
to to to do it that way so we might just

1867
01:49:22,080 --> 01:49:23,280
be seeing

1868
01:49:23,280 --> 01:49:24,719
uh

1869
01:49:24,719 --> 01:49:25,520
uh

1870
01:49:25,520 --> 01:49:27,040
so yeah so maybe maybe they're fine

1871
01:49:27,040 --> 01:49:28,400
ignoring that hint and continuing on

1872
01:49:28,400 --> 01:49:31,119
which yeah we'll see how it goes

1873
01:49:31,119 --> 01:49:33,280
right

1874
01:49:33,280 --> 01:49:36,719
uh rika pick is still working with um

1875
01:49:36,719 --> 01:49:39,679
um the pseudo code trying to reason

1876
01:49:39,679 --> 01:49:41,920
about it there was a comment about a

1877
01:49:41,920 --> 01:49:43,920
leak uh

1878
01:49:43,920 --> 01:49:46,159
pointer to the leak or something um it

1879
01:49:46,159 --> 01:49:48,719
is just it's unfortunately uh just below

1880
01:49:48,719 --> 01:49:49,440
the

1881
01:49:49,440 --> 01:49:50,159
it

1882
01:49:50,159 --> 01:49:52,800
what they are showing right now

1883
01:49:52,800 --> 01:49:54,480
yeah it's uh

1884
01:49:54,480 --> 01:49:56,400
but essentially it's the same loop right

1885
01:49:56,400 --> 01:49:58,960
uh the get the pointer while loop and

1886
01:49:58,960 --> 01:49:59,920
then

1887
01:49:59,920 --> 01:50:01,360
pointer get like that's the correct

1888
01:50:01,360 --> 01:50:02,080
thing

1889
01:50:02,080 --> 01:50:04,320
it's and now just curious

1890
01:50:04,320 --> 01:50:05,520
if they

1891
01:50:05,520 --> 01:50:07,679
uh leave that bracket then at the end

1892
01:50:07,679 --> 01:50:09,840
open you know the this is the read in

1893
01:50:09,840 --> 01:50:12,480
loop that perfect root also has but uh

1894
01:50:12,480 --> 01:50:14,400
right if they figure out the open

1895
01:50:14,400 --> 01:50:15,440
bracket

1896
01:50:15,440 --> 01:50:17,520
it's still unclear and i want to switch

1897
01:50:17,520 --> 01:50:19,280
over to perfect router because i see

1898
01:50:19,280 --> 01:50:20,320
what i think they're trying to do when

1899
01:50:20,320 --> 01:50:22,159
they have a bug in the code again you

1900
01:50:22,159 --> 01:50:24,159
can see these like dot plus dot plus and

1901
01:50:24,159 --> 01:50:26,159
so on in their code what i think they

1902
01:50:26,159 --> 01:50:28,400
want here is a dot greater than dot

1903
01:50:28,400 --> 01:50:31,520
greater than to like uh dump out you see

1904
01:50:31,520 --> 01:50:33,360
i think there are eight of them in that

1905
01:50:33,360 --> 01:50:35,520
or maybe there's just six of them but uh

1906
01:50:35,520 --> 01:50:38,800
the idea here is that uh they uh you

1907
01:50:38,800 --> 01:50:40,719
want to use the dot to print the current

1908
01:50:40,719 --> 01:50:42,000
value and then you advance the data

1909
01:50:42,000 --> 01:50:44,239
point to the next step but

1910
01:50:44,239 --> 01:50:46,480
plus sign increments the current value

1911
01:50:46,480 --> 01:50:47,920
that you're pointing at which is not

1912
01:50:47,920 --> 01:50:49,440
what you want to do because then you're

1913
01:50:49,440 --> 01:50:51,119
just like those people they should see

1914
01:50:51,119 --> 01:50:53,040
it at least right so in the output yeah

1915
01:50:53,040 --> 01:50:54,080
but they'll notice that i'm just getting

1916
01:50:54,080 --> 01:50:55,119
this increment yes and this is why

1917
01:50:55,119 --> 01:50:56,000
they're getting you can see in the

1918
01:50:56,000 --> 01:50:58,159
output they're getting n-o-p-q-r-s

1919
01:50:58,159 --> 01:50:59,520
because they're just incrementing the

1920
01:50:59,520 --> 01:51:01,599
same byte and printing it out

1921
01:51:01,599 --> 01:51:03,040
over and over again so they want to

1922
01:51:03,040 --> 01:51:05,760
change those pluses to greater dens to

1923
01:51:05,760 --> 01:51:07,199
if they're trying to actually

1924
01:51:07,199 --> 01:51:09,840
catch good catch yeah uh

1925
01:51:09,840 --> 01:51:11,599
you can uh you know you might notice

1926
01:51:11,599 --> 01:51:12,560
that i've been

1927
01:51:12,560 --> 01:51:15,040
had to program a bit of uh brain

1928
01:51:15,040 --> 01:51:17,760
build this too i think so yes this is uh

1929
01:51:17,760 --> 01:51:19,840
you know not healthy it is at least you

1930
01:51:19,840 --> 01:51:20,880
know one of the things i've seen teams

1931
01:51:20,880 --> 01:51:23,679
do on similar kind of challenges is uh

1932
01:51:23,679 --> 01:51:25,040
just do a similar kind of virtual

1933
01:51:25,040 --> 01:51:26,239
machine but totally different

1934
01:51:26,239 --> 01:51:28,320
instructions at least this one is sort

1935
01:51:28,320 --> 01:51:30,560
of intuitive like plus and dot and

1936
01:51:30,560 --> 01:51:32,560
greater than and less than in fact i

1937
01:51:32,560 --> 01:51:35,440
think we even added uh memory servers we

1938
01:51:35,440 --> 01:51:37,199
added one instruction extended the

1939
01:51:37,199 --> 01:51:38,639
language with one instruction to make

1940
01:51:38,639 --> 01:51:40,400
the challenge easier so

1941
01:51:40,400 --> 01:51:43,040
uh in my original solution

1942
01:51:43,040 --> 01:51:45,119
uh because like if you do an override of

1943
01:51:45,119 --> 01:51:46,480
the return address you need the function

1944
01:51:46,480 --> 01:51:48,560
to actually return right

1945
01:51:48,560 --> 01:51:50,080
and the only condition for the loop to

1946
01:51:50,080 --> 01:51:51,679
break is if the program counter is at

1947
01:51:51,679 --> 01:51:53,920
exactly nine so in my original solution

1948
01:51:53,920 --> 01:51:55,760
you had to like make something to make

1949
01:51:55,760 --> 01:51:57,199
the program counter jump all the way

1950
01:51:57,199 --> 01:51:58,719
back to the beginning

1951
01:51:58,719 --> 01:52:01,040
but we decided that we get rid of that

1952
01:52:01,040 --> 01:52:02,800
and we just instead add another

1953
01:52:02,800 --> 01:52:05,280
instruction which is the the carrot uh

1954
01:52:05,280 --> 01:52:07,040
character and that will just uh it's a

1955
01:52:07,040 --> 01:52:08,800
little it's a little up arrow exactly so

1956
01:52:08,800 --> 01:52:10,320
like instead of going left or right to

1957
01:52:10,320 --> 01:52:11,920
go up uh

1958
01:52:11,920 --> 01:52:13,760
yeah

1959
01:52:13,760 --> 01:52:16,000
so uh but it is it is nice that uh this

1960
01:52:16,000 --> 01:52:17,119
is at least kind of intuitive these are

1961
01:52:17,119 --> 01:52:18,800
just random letters i feel like well

1962
01:52:18,800 --> 01:52:19,840
actually there were random letters what

1963
01:52:19,840 --> 01:52:20,960
you probably would see was them using

1964
01:52:20,960 --> 01:52:22,080
more of those kind of macro their

1965
01:52:22,080 --> 01:52:24,000
helpers to find a variable

1966
01:52:24,000 --> 01:52:26,159
that was called ink or deck or next or

1967
01:52:26,159 --> 01:52:27,360
prev or something like that and you'd

1968
01:52:27,360 --> 01:52:29,119
use those in line instead of the

1969
01:52:29,119 --> 01:52:31,199
the raw characters directly right oh you

1970
01:52:31,199 --> 01:52:32,400
totally

1971
01:52:32,400 --> 01:52:33,520
yes go ahead

1972
01:52:33,520 --> 01:52:35,360
i was just seeing enrique pick they

1973
01:52:35,360 --> 01:52:38,480
figured out the unmatched uh bracket

1974
01:52:38,480 --> 01:52:39,840
switch over

1975
01:52:39,840 --> 01:52:42,400
you see here on line 60

1976
01:52:42,400 --> 01:52:45,040
there's a comment unmatched bracket oh

1977
01:52:45,040 --> 01:52:46,080
yes

1978
01:52:46,080 --> 01:52:47,280
yes

1979
01:52:47,280 --> 01:52:49,360
nice oh very very good and i also wanted

1980
01:52:49,360 --> 01:52:51,520
to point out uh over on the perfect

1981
01:52:51,520 --> 01:52:53,119
route side you can see that they changed

1982
01:52:53,119 --> 01:52:54,480
all the pluses to greater than

1983
01:52:54,480 --> 01:52:56,400
characters in the yes

1984
01:52:56,400 --> 01:52:57,920
they're both making good progress this

1985
01:52:57,920 --> 01:53:00,560
is fantastic oh that's really great so

1986
01:53:00,560 --> 01:53:02,880
we can see do you would think that

1987
01:53:02,880 --> 01:53:04,800
ricky pig can catch up to this that's

1988
01:53:04,800 --> 01:53:06,639
that's the uh you know

1989
01:53:06,639 --> 01:53:08,719
exciting thing here

1990
01:53:08,719 --> 01:53:10,480
uh

1991
01:53:10,480 --> 01:53:12,239
just trying to keep an eye on on you

1992
01:53:12,239 --> 01:53:14,000
know both teams here so back to the the

1993
01:53:14,000 --> 01:53:15,040
the chat question there's a little bit

1994
01:53:15,040 --> 01:53:17,040
of discussion going on about uh dynamic

1995
01:53:17,040 --> 01:53:19,920
scoring and whether it's a bad uh signal

1996
01:53:19,920 --> 01:53:22,000
for beginners and that's true you can't

1997
01:53:22,000 --> 01:53:23,440
actually one of the downsides is if

1998
01:53:23,440 --> 01:53:25,119
every challenge starts at 200 points or

1999
01:53:25,119 --> 01:53:26,560
100 points and it's just based on

2000
01:53:26,560 --> 01:53:28,480
however many people solve it that you

2001
01:53:28,480 --> 01:53:30,639
find the ultimate difficulty um it's

2002
01:53:30,639 --> 01:53:32,159
hard as a new person to know where to

2003
01:53:32,159 --> 01:53:34,159
start a lot of ctfs will kind of give us

2004
01:53:34,159 --> 01:53:36,000
some hints they'll say an expected value

2005
01:53:36,000 --> 01:53:37,679
or they will say it's they'll have some

2006
01:53:37,679 --> 01:53:39,360
other difficulty arranging ranking

2007
01:53:39,360 --> 01:53:40,800
independent of the points and so that

2008
01:53:40,800 --> 01:53:42,800
way the organizers can say we think this

2009
01:53:42,800 --> 01:53:44,239
is hard hey turns out it was easy it was

2010
01:53:44,239 --> 01:53:46,239
a bug that they didn't intend it ends up

2011
01:53:46,239 --> 01:53:47,599
being easy the points drive low so you

2012
01:53:47,599 --> 01:53:49,199
can see that signal

2013
01:53:49,199 --> 01:53:50,560
afterwards and go i wasn't going to try

2014
01:53:50,560 --> 01:53:51,599
it but look at all the people solving it

2015
01:53:51,599 --> 01:53:53,040
maybe i'm going to try it now a lot of

2016
01:53:53,040 --> 01:53:55,360
the uh like long-running or like

2017
01:53:55,360 --> 01:53:59,119
notoriously uh difficult ctfs sometimes

2018
01:53:59,119 --> 01:54:00,880
have like a category that they call like

2019
01:54:00,880 --> 01:54:03,360
baby or like a tag yeah

2020
01:54:03,360 --> 01:54:04,880
so that they would say like you know

2021
01:54:04,880 --> 01:54:07,599
okay uh we we have a lot of difficult

2022
01:54:07,599 --> 01:54:09,440
challenges but we have selected a few

2023
01:54:09,440 --> 01:54:11,199
here that we think are going to be good

2024
01:54:11,199 --> 01:54:13,040
just for people starting yes also you

2025
01:54:13,040 --> 01:54:15,360
can just wait a bit to for you know wait

2026
01:54:15,360 --> 01:54:17,599
a couple of hours into the ctf and see

2027
01:54:17,599 --> 01:54:19,520
like which ones are being solved yes but

2028
01:54:19,520 --> 01:54:21,119
you don't even have to do that because

2029
01:54:21,119 --> 01:54:23,199
uh when when when i play ctf's like this

2030
01:54:23,199 --> 01:54:24,719
and i try to find the challenge that is

2031
01:54:24,719 --> 01:54:27,040
easy um i don't need to wait until the

2032
01:54:27,040 --> 01:54:28,880
points are degraded i look at the first

2033
01:54:28,880 --> 01:54:30,639
few solves of the challenge and if it's

2034
01:54:30,639 --> 01:54:32,560
teams i know like the big you know the

2035
01:54:32,560 --> 01:54:34,960
top ctf time teams that solved it i know

2036
01:54:34,960 --> 01:54:36,639
okay that's probably hard but if it's

2037
01:54:36,639 --> 01:54:38,880
like teams i don't know then i assume oh

2038
01:54:38,880 --> 01:54:40,639
this is doable that's a really

2039
01:54:40,639 --> 01:54:42,320
interesting signal yeah there's a lot of

2040
01:54:42,320 --> 01:54:44,159
like meta gaming

2041
01:54:44,159 --> 01:54:48,000
that's been developed over the years

2042
01:54:49,119 --> 01:54:50,719
all right so we're still seeing perfect

2043
01:54:50,719 --> 01:54:53,840
root is is tweaking and tuning i haven't

2044
01:54:53,840 --> 01:54:56,800
seen um

2045
01:54:57,280 --> 01:54:59,119
okay so they're

2046
01:54:59,119 --> 01:55:00,880
they're inputting in i mean i'm looking

2047
01:55:00,880 --> 01:55:02,320
at the code at the payload there and

2048
01:55:02,320 --> 01:55:04,159
like the structure is all correct like

2049
01:55:04,159 --> 01:55:05,679
they're dumping out yeah they're

2050
01:55:05,679 --> 01:55:07,360
rewinding the data pointer then they

2051
01:55:07,360 --> 01:55:09,280
they oh no no they have another bug

2052
01:55:09,280 --> 01:55:10,560
the

2053
01:55:10,560 --> 01:55:13,360
do you see the back uh the back the last

2054
01:55:13,360 --> 01:55:14,560
back arrow

2055
01:55:14,560 --> 01:55:16,159
needs to go forwards instead because

2056
01:55:16,159 --> 01:55:18,400
they're they're running over the return

2057
01:55:18,400 --> 01:55:20,320
address to print it out then they're

2058
01:55:20,320 --> 01:55:22,639
rewinding the data pointer but then they

2059
01:55:22,639 --> 01:55:25,599
need to go forwards again so that last

2060
01:55:25,599 --> 01:55:28,800
comma less tension

2061
01:55:29,119 --> 01:55:30,320
yeah

2062
01:55:30,320 --> 01:55:33,199
so this small things and i will say this

2063
01:55:33,199 --> 01:55:34,400
is a good example we're actually

2064
01:55:34,400 --> 01:55:35,840
building a programmable structure where

2065
01:55:35,840 --> 01:55:37,360
you didn't use com up here and you

2066
01:55:37,360 --> 01:55:39,360
actually just instead did something more

2067
01:55:39,360 --> 01:55:40,800
obvious might have helped your the

2068
01:55:40,800 --> 01:55:42,960
mental cue of like no no what do i

2069
01:55:42,960 --> 01:55:44,400
intend to do here am i trying to go

2070
01:55:44,400 --> 01:55:45,840
forward or backward or up or down or

2071
01:55:45,840 --> 01:55:47,280
yeah

2072
01:55:47,280 --> 01:55:48,080
um

2073
01:55:48,080 --> 01:55:49,760
but

2074
01:55:49,760 --> 01:55:52,080
we'll see so i'm i'm looking forward if

2075
01:55:52,080 --> 01:55:53,920
if rekha pig catches again or we can

2076
01:55:53,920 --> 01:55:56,639
pick this this absolutely could be

2077
01:55:56,639 --> 01:55:58,560
uh could be a match again

2078
01:55:58,560 --> 01:56:00,400
yeah i mean reek epic is definitely uh

2079
01:56:00,400 --> 01:56:03,760
getting uh catching up again because uh

2080
01:56:03,760 --> 01:56:05,679
perfect root has been at the stage now

2081
01:56:05,679 --> 01:56:08,480
for quite a while and is a bit i don't

2082
01:56:08,480 --> 01:56:11,119
know like the progress hasn't been as in

2083
01:56:11,119 --> 01:56:14,000
as big leaps uh i i feel like on on

2084
01:56:14,000 --> 01:56:15,840
perfect good side i mean they definitely

2085
01:56:15,840 --> 01:56:18,159
have a better understanding of it

2086
01:56:18,159 --> 01:56:19,040
but

2087
01:56:19,040 --> 01:56:20,239
you know

2088
01:56:20,239 --> 01:56:24,639
they are not close to to solving it

2089
01:56:24,639 --> 01:56:27,280
i i think oh no you said the magic words

2090
01:56:27,280 --> 01:56:28,880
as soon as we predict that they uh they

2091
01:56:28,880 --> 01:56:30,480
tend to blow through and solve it uh

2092
01:56:30,480 --> 01:56:32,080
it's like saying oh surely it won't rain

2093
01:56:32,080 --> 01:56:34,159
today uh because i just watched my car

2094
01:56:34,159 --> 01:56:35,679
um

2095
01:56:35,679 --> 01:56:37,119
yeah maybe you should predict the game

2096
01:56:37,119 --> 01:56:39,440
that rick is behind this is all right

2097
01:56:39,440 --> 01:56:40,639
it's real very hot there's no way they

2098
01:56:40,639 --> 01:56:42,719
can catch up two minutes later uh winner

2099
01:56:42,719 --> 01:56:45,280
winner uh pops up yeah we have uh

2100
01:56:45,280 --> 01:56:47,199
there's a lot of casters curse going on

2101
01:56:47,199 --> 01:56:48,480
at this tournament that's right i don't

2102
01:56:48,480 --> 01:56:50,639
wanna i don't wanna unduly influence the

2103
01:56:50,639 --> 01:56:52,639
game here oh yeah

2104
01:56:52,639 --> 01:56:53,920
okay so what are they looking they're

2105
01:56:53,920 --> 01:56:56,000
dumping out

2106
01:56:56,000 --> 01:56:57,119
they're printing what they believe to be

2107
01:56:57,119 --> 01:56:58,800
a leak okay so they're verifying a leak

2108
01:56:58,800 --> 01:57:01,520
they think they've got yes and you see

2109
01:57:01,520 --> 01:57:03,520
oh they just missed it

2110
01:57:03,520 --> 01:57:04,239
yeah

2111
01:57:04,239 --> 01:57:05,520
they just missed it they still need to

2112
01:57:05,520 --> 01:57:07,440
change that to a greater than yes

2113
01:57:07,440 --> 01:57:08,719
so the other way you can do it is you

2114
01:57:08,719 --> 01:57:11,199
can skip the rewinding and just type the

2115
01:57:11,199 --> 01:57:13,199
the address in backwards but this is

2116
01:57:13,199 --> 01:57:16,320
like an easier mental model

2117
01:57:16,320 --> 01:57:17,280
uh

2118
01:57:17,280 --> 01:57:19,599
i think perfect root is like very close

2119
01:57:19,599 --> 01:57:21,520
to the side

2120
01:57:21,520 --> 01:57:23,520
i think they only need to flip that less

2121
01:57:23,520 --> 01:57:25,280
than to a greater than and then you know

2122
01:57:25,280 --> 01:57:26,159
and they're basically done yeah they're

2123
01:57:26,159 --> 01:57:27,360
basically right then and they'll still

2124
01:57:27,360 --> 01:57:28,560
have to actually do the override but

2125
01:57:28,560 --> 01:57:29,679
they've got a leak and they've got the

2126
01:57:29,679 --> 01:57:30,880
address and they've got the difference

2127
01:57:30,880 --> 01:57:31,920
and then it's

2128
01:57:31,920 --> 01:57:34,239
yeah right four bytes in return uh the

2129
01:57:34,239 --> 01:57:36,239
only last thing would be do they see the

2130
01:57:36,239 --> 01:57:37,840
escape if they don't see the exit or

2131
01:57:37,840 --> 01:57:40,159
sorry the exit operation

2132
01:57:40,159 --> 01:57:40,960
um

2133
01:57:40,960 --> 01:57:42,080
right

2134
01:57:42,080 --> 01:57:43,679
they might not be able that might be

2135
01:57:43,679 --> 01:57:44,880
another

2136
01:57:44,880 --> 01:57:46,800
stumbling block all right because they

2137
01:57:46,800 --> 01:57:48,639
might be this is another danger right of

2138
01:57:48,639 --> 01:57:50,159
like abstractions and mental models

2139
01:57:50,159 --> 01:57:51,679
right they might say like oh this is

2140
01:57:51,679 --> 01:57:52,880
brain and then they're not even

2141
01:57:52,880 --> 01:57:54,320
looking at it no right and they're just

2142
01:57:54,320 --> 01:57:56,080
not noticing that we have this extra

2143
01:57:56,080 --> 01:57:58,239
because then

2144
01:57:58,239 --> 01:57:59,520
if they do need to rewind the

2145
01:57:59,520 --> 01:58:00,800
instruction point to think like all the

2146
01:58:00,800 --> 01:58:02,080
way to the back

2147
01:58:02,080 --> 01:58:04,000
uh that's

2148
01:58:04,000 --> 01:58:05,280
a little bit annoying because you need

2149
01:58:05,280 --> 01:58:06,960
to kind of shift the way you would do it

2150
01:58:06,960 --> 01:58:10,159
is you have like another unmatched uh

2151
01:58:10,159 --> 01:58:12,320
you have a more like closing brackets

2152
01:58:12,320 --> 01:58:13,840
and then it will search backwards for

2153
01:58:13,840 --> 01:58:15,520
corresponding opening brackets and you

2154
01:58:15,520 --> 01:58:17,040
do that like multiple times and stuff

2155
01:58:17,040 --> 01:58:17,760
it's

2156
01:58:17,760 --> 01:58:21,040
it's a bit annoying yeah

2157
01:58:21,040 --> 01:58:22,320
so let's see what are we what are we

2158
01:58:22,320 --> 01:58:24,159
leaking over here on perfect route we've

2159
01:58:24,159 --> 01:58:26,480
got

2160
01:58:27,840 --> 01:58:30,000
so

2161
01:58:30,400 --> 01:58:32,320
yeah it's really about like working that

2162
01:58:32,320 --> 01:58:34,960
debugger and like seeing that you know

2163
01:58:34,960 --> 01:58:36,239
they're not overriding what they think

2164
01:58:36,239 --> 01:58:38,959
they're overwriting

2165
01:58:43,840 --> 01:58:45,520
yes so

2166
01:58:45,520 --> 01:58:47,599
i want to switch over to

2167
01:58:47,599 --> 01:58:49,679
riku pigs because

2168
01:58:49,679 --> 01:58:51,920
i think they had you know the debugger

2169
01:58:51,920 --> 01:58:53,520
up looking into the code i want to see

2170
01:58:53,520 --> 01:58:55,280
what payload they are

2171
01:58:55,280 --> 01:58:56,960
currently sending

2172
01:58:56,960 --> 01:58:59,280
uh it's uh

2173
01:58:59,280 --> 01:59:01,280
you know they are they have progress

2174
01:59:01,280 --> 01:59:02,480
clearly

2175
01:59:02,480 --> 01:59:04,719
and now they're looking at

2176
01:59:04,719 --> 01:59:06,000
i'm trying to see what part of the code

2177
01:59:06,000 --> 01:59:07,360
this is

2178
01:59:07,360 --> 01:59:09,679
it's the printing

2179
01:59:09,679 --> 01:59:12,239
yeah so they're looking at the print

2180
01:59:12,239 --> 01:59:15,119
the dot operator

2181
01:59:15,119 --> 01:59:17,199
and uh

2182
01:59:17,199 --> 01:59:19,599
i'm not entirely sure what they what the

2183
01:59:19,599 --> 01:59:21,119
question they are trying to answer here

2184
01:59:21,119 --> 01:59:22,400
right now

2185
01:59:22,400 --> 01:59:23,360
uh

2186
01:59:23,360 --> 01:59:25,598
it's

2187
01:59:25,760 --> 01:59:28,400
yeah so

2188
01:59:28,400 --> 01:59:31,599
this is uh

2189
01:59:31,599 --> 01:59:33,520
hard to tell

2190
01:59:33,520 --> 01:59:34,800
yeah so we're internally you know we're

2191
01:59:34,800 --> 01:59:36,880
debating right now do we think they they

2192
01:59:36,880 --> 01:59:39,119
can solve it are we going to be uh

2193
01:59:39,119 --> 01:59:40,480
needing another hint or do we need to

2194
01:59:40,480 --> 01:59:43,040
switch to a sudden death um

2195
01:59:43,040 --> 01:59:44,960
it is

2196
01:59:44,960 --> 01:59:46,239
the the way that we've been handling

2197
01:59:46,239 --> 01:59:48,880
that transition is if we hit our uh time

2198
01:59:48,880 --> 01:59:50,080
limit which

2199
01:59:50,080 --> 01:59:51,840
we are actually uh coming up on the

2200
01:59:51,840 --> 01:59:54,080
original the original end but because

2201
01:59:54,080 --> 01:59:56,000
this match has an extra gap

2202
01:59:56,000 --> 01:59:56,880
um

2203
01:59:56,880 --> 01:59:59,280
we we might uh go up and basically ask

2204
01:59:59,280 --> 02:00:00,480
the team and say do you want to move to

2205
02:00:00,480 --> 02:00:01,679
sudden death do you want to switch this

2206
02:00:01,679 --> 02:00:03,119
i really don't want to switch to sudden

2207
02:00:03,119 --> 02:00:04,320
death though we've seen what happened

2208
02:00:04,320 --> 02:00:06,239
last time yeah i will say though our

2209
02:00:06,239 --> 02:00:07,520
sudden death is

2210
02:00:07,520 --> 02:00:09,840
real sudden uh on this one so if we go

2211
02:00:09,840 --> 02:00:11,679
to it yeah we're pretty sure that it

2212
02:00:11,679 --> 02:00:14,239
would it would be solvable uh but

2213
02:00:14,239 --> 02:00:15,679
certainly you would rather have the

2214
02:00:15,679 --> 02:00:17,040
teams be able to finish this out and we

2215
02:00:17,040 --> 02:00:18,320
do have a little bit actually we built

2216
02:00:18,320 --> 02:00:19,920
some a gap in time here between the

2217
02:00:19,920 --> 02:00:21,679
semifinals and the finals

2218
02:00:21,679 --> 02:00:22,800
um

2219
02:00:22,800 --> 02:00:25,040
so

2220
02:00:25,199 --> 02:00:26,560
i keeps i'm trying to figure out what

2221
02:00:26,560 --> 02:00:28,080
perfector's doing they're they're

2222
02:00:28,080 --> 02:00:29,840
re-running

2223
02:00:29,840 --> 02:00:32,000
the same thing over and over

2224
02:00:32,000 --> 02:00:34,639
yeah and that reminds me of how i play

2225
02:00:34,639 --> 02:00:35,840
ctf

2226
02:00:35,840 --> 02:00:36,960
hoping that

2227
02:00:36,960 --> 02:00:37,920
it

2228
02:00:37,920 --> 02:00:40,320
changes like oh yeah there was uh like

2229
02:00:40,320 --> 02:00:42,159
the same thing that uh

2230
02:00:42,159 --> 02:00:44,320
falk said yesterday like yeah exactly

2231
02:00:44,320 --> 02:00:45,440
even though i know it's not going to

2232
02:00:45,440 --> 02:00:47,760
keep rerunning it now they think

2233
02:00:47,760 --> 02:00:48,960
they've got to be doing this thinking

2234
02:00:48,960 --> 02:00:50,639
that there's some like

2235
02:00:50,639 --> 02:00:55,040
randomness that's impacting it

2236
02:00:55,040 --> 02:00:56,960
uh in the meantime i can give you a

2237
02:00:56,960 --> 02:00:59,599
score update on the uh defcon see the

2238
02:00:59,599 --> 02:01:03,199
main scoreboard for the defcon ctf um

2239
02:01:03,199 --> 02:01:05,040
by the way

2240
02:01:05,040 --> 02:01:07,520
mmm in first place tightly followed by

2241
02:01:07,520 --> 02:01:10,000
katsubin it's the same top fight as

2242
02:01:10,000 --> 02:01:11,199
we've seen

2243
02:01:11,199 --> 02:01:12,080
uh

2244
02:01:12,080 --> 02:01:14,000
multiple times before i think and then

2245
02:01:14,000 --> 02:01:18,159
we have a water paddler in third place

2246
02:01:18,159 --> 02:01:20,560
fairly close as well so there's

2247
02:01:20,560 --> 02:01:22,719
definitely a lot of things can happen

2248
02:01:22,719 --> 02:01:24,639
and the the all this stuff has not

2249
02:01:24,639 --> 02:01:26,239
factored in the points from this live

2250
02:01:26,239 --> 02:01:27,360
ctf so it's going to be really

2251
02:01:27,360 --> 02:01:28,880
interesting to see what happened

2252
02:01:28,880 --> 02:01:31,040
perfect route who is in this match they

2253
02:01:31,040 --> 02:01:33,760
are currently in fifth place but if they

2254
02:01:33,760 --> 02:01:35,679
would win this or like even go on and

2255
02:01:35,679 --> 02:01:37,119
win the finals

2256
02:01:37,119 --> 02:01:39,760
that would bring them almost up to first

2257
02:01:39,760 --> 02:01:41,440
place uh

2258
02:01:41,440 --> 02:01:43,440
almost i mean they wouldn't let them

2259
02:01:43,440 --> 02:01:45,599
jump it might let them jump cut to ben

2260
02:01:45,599 --> 02:01:47,360
but it wouldn't let them jump uh maple

2261
02:01:47,360 --> 02:01:49,679
for sure yes but they will also get some

2262
02:01:49,679 --> 02:01:51,199
points from the tournament yeah because

2263
02:01:51,199 --> 02:01:52,719
mmm is going to be getting some points

2264
02:01:52,719 --> 02:01:55,440
having made it to the semifinals right

2265
02:01:55,440 --> 02:01:57,599
how long will the main ctf uh run when

2266
02:01:57,599 --> 02:01:59,199
will that be over it runs for another

2267
02:01:59,199 --> 02:02:01,920
two hours so it's it's really getting

2268
02:02:01,920 --> 02:02:04,000
getting there yeah these these scores

2269
02:02:04,000 --> 02:02:05,280
are probably not going to shift much and

2270
02:02:05,280 --> 02:02:06,880
if you're not familiar so just like a

2271
02:02:06,880 --> 02:02:09,199
real quick summary of what the uh the

2272
02:02:09,199 --> 02:02:12,080
final format is for defcon ctf it's an

2273
02:02:12,080 --> 02:02:13,840
attack defense ctf

2274
02:02:13,840 --> 02:02:15,440
there are all the teams are given

2275
02:02:15,440 --> 02:02:17,040
essentially a number of systems that

2276
02:02:17,040 --> 02:02:19,199
there are a number of processes that are

2277
02:02:19,199 --> 02:02:20,880
running on a system of theirs they have

2278
02:02:20,880 --> 02:02:22,800
to defend it by patching those binaries

2279
02:02:22,800 --> 02:02:24,159
and they have to attack their opponents

2280
02:02:24,159 --> 02:02:25,360
by finding vulnerabilities creating

2281
02:02:25,360 --> 02:02:26,480
exploits and sending them against

2282
02:02:26,480 --> 02:02:28,400
everybody else and so it's a zero-sum

2283
02:02:28,400 --> 02:02:29,920
game you sort of start with like a

2284
02:02:29,920 --> 02:02:31,760
certain amount of points and then as

2285
02:02:31,760 --> 02:02:33,599
someone steals from you you lose a point

2286
02:02:33,599 --> 02:02:35,599
they gain a point and so you see what

2287
02:02:35,599 --> 02:02:36,880
you happened is you see everyone's

2288
02:02:36,880 --> 02:02:38,480
started i think at uh

2289
02:02:38,480 --> 02:02:40,400
20 000 points or 16 000 points something

2290
02:02:40,400 --> 02:02:42,239
like that and then they're spreading out

2291
02:02:42,239 --> 02:02:43,599
and so the top teams steal from the

2292
02:02:43,599 --> 02:02:45,360
lower teams and so the lowest team now

2293
02:02:45,360 --> 02:02:47,040
has down at 14 000 points and the

2294
02:02:47,040 --> 02:02:49,040
highest team is up at 22 000 points so

2295
02:02:49,040 --> 02:02:50,239
you don't start at zero and then build

2296
02:02:50,239 --> 02:02:51,679
up you start kind of in the middle and

2297
02:02:51,679 --> 02:02:54,159
then some go up and some go down um with

2298
02:02:54,159 --> 02:02:57,199
this particular scoring method and so uh

2299
02:02:57,199 --> 02:02:58,719
that does mean though that there's not a

2300
02:02:58,719 --> 02:03:00,880
lot of like um

2301
02:03:00,880 --> 02:03:03,840
big shifts wild shifts uh because it's

2302
02:03:03,840 --> 02:03:05,679
uh there's only so many kind of points

2303
02:03:05,679 --> 02:03:07,679
available uh and so it tends to be

2304
02:03:07,679 --> 02:03:09,040
harder to come from behind the very last

2305
02:03:09,040 --> 02:03:10,880
minute although it depends on how close

2306
02:03:10,880 --> 02:03:13,679
you are and there's there's uh you know

2307
02:03:13,679 --> 02:03:15,280
one new solo in a service that no one

2308
02:03:15,280 --> 02:03:17,760
else has done can can start to swing it

2309
02:03:17,760 --> 02:03:19,760
because these graphs will shift in terms

2310
02:03:19,760 --> 02:03:21,119
of the

2311
02:03:21,119 --> 02:03:23,679
rate of scoring uh go ahead leverage

2312
02:03:23,679 --> 02:03:25,040
we should look at perfect route they

2313
02:03:25,040 --> 02:03:27,599
were actually i think confident about

2314
02:03:27,599 --> 02:03:29,119
something that they that the code did

2315
02:03:29,119 --> 02:03:32,000
they had this you see it now uncommon um

2316
02:03:32,000 --> 02:03:35,280
echo poem they were running it um which

2317
02:03:35,280 --> 02:03:37,119
looked like they were checking if if

2318
02:03:37,119 --> 02:03:39,840
they got the code execution i

2319
02:03:39,840 --> 02:03:42,560
it i think they think they are pretty

2320
02:03:42,560 --> 02:03:44,800
close

2321
02:03:44,800 --> 02:03:47,920
yeah it's uh i still think that they are

2322
02:03:47,920 --> 02:03:49,760
missing that like

2323
02:03:49,760 --> 02:03:50,880
unless they're doing something different

2324
02:03:50,880 --> 02:03:52,480
than we expect i think you're right yeah

2325
02:03:52,480 --> 02:03:54,840
they can see they're trying to

2326
02:03:54,840 --> 02:03:58,239
submit uh

2327
02:03:59,360 --> 02:04:02,159
i mean they did uncomment it again uh

2328
02:04:02,159 --> 02:04:04,480
commented it out again but uh it was in

2329
02:04:04,480 --> 02:04:06,079
there and they they had it running for a

2330
02:04:06,079 --> 02:04:07,760
bit they had us

2331
02:04:07,760 --> 02:04:09,920
do see they have a wild true loop they

2332
02:04:09,920 --> 02:04:12,400
were thinking that something is uh yeah

2333
02:04:12,400 --> 02:04:14,480
as you said uh that something is random

2334
02:04:14,480 --> 02:04:16,239
a little bit when weird so they were

2335
02:04:16,239 --> 02:04:18,320
running it in a in a while true loop

2336
02:04:18,320 --> 02:04:21,040
just trying it over and over again yeah

2337
02:04:21,040 --> 02:04:22,159
and they headed off by there we go

2338
02:04:22,159 --> 02:04:23,360
that's what they were looking for that's

2339
02:04:23,360 --> 02:04:24,320
what they were looking for because they

2340
02:04:24,320 --> 02:04:26,000
had a 90 at the end they were oh that's

2341
02:04:26,000 --> 02:04:27,679
the oh no that yeah that's that's now

2342
02:04:27,679 --> 02:04:28,800
they have it they have the return that

2343
02:04:28,800 --> 02:04:30,560
was under it was top of the stack return

2344
02:04:30,560 --> 02:04:32,719
address they shoot they were off by one

2345
02:04:32,719 --> 02:04:34,480
bite they mainly added that extra right

2346
02:04:34,480 --> 02:04:35,599
over there

2347
02:04:35,599 --> 02:04:39,639
to the end and so

2348
02:04:39,840 --> 02:04:41,280
yeah that's not the most reliable of

2349
02:04:41,280 --> 02:04:43,679
exploits

2350
02:04:45,280 --> 02:04:47,920
yeah that's

2351
02:04:50,840 --> 02:04:54,079
uh-oh well there have been so depending

2352
02:04:54,079 --> 02:04:55,280
on the the

2353
02:04:55,280 --> 02:04:58,000
the challenges there was a situation

2354
02:04:58,000 --> 02:05:01,280
where you didn't always see your

2355
02:05:01,280 --> 02:05:03,119
output and so if you tried to do an echo

2356
02:05:03,119 --> 02:05:04,639
pone and detect on it i know that at

2357
02:05:04,639 --> 02:05:06,400
least some of the earlier challenges no

2358
02:05:06,400 --> 02:05:08,320
no it was just the semester program for

2359
02:05:08,320 --> 02:05:09,440
example

2360
02:05:09,440 --> 02:05:10,639
this should not be an issue here also

2361
02:05:10,639 --> 02:05:12,079
they're just running this locally oh no

2362
02:05:12,079 --> 02:05:13,599
i think it was specifically the the

2363
02:05:13,599 --> 02:05:14,960
command injection with the back text

2364
02:05:14,960 --> 02:05:16,480
that's that was what it was involved

2365
02:05:16,480 --> 02:05:18,159
right because then we needed to do the

2366
02:05:18,159 --> 02:05:20,320
semicolon right the back ticks you

2367
02:05:20,320 --> 02:05:21,440
wouldn't see your output so i think

2368
02:05:21,440 --> 02:05:22,880
though in this case that this is still

2369
02:05:22,880 --> 02:05:25,040
solid if they actually get this

2370
02:05:25,040 --> 02:05:27,520
um they they should be right so i'm

2371
02:05:27,520 --> 02:05:30,000
curious is that 0 0 69 is that them

2372
02:05:30,000 --> 02:05:31,840
calling the win function um was that the

2373
02:05:31,840 --> 02:05:34,880
offset of the uh i'm a little bit unsure

2374
02:05:34,880 --> 02:05:35,760
but like

2375
02:05:35,760 --> 02:05:36,800
to me

2376
02:05:36,800 --> 02:05:37,679
maybe

2377
02:05:37,679 --> 02:05:41,119
is it is pi enabled pi is enabled but

2378
02:05:41,119 --> 02:05:43,199
they are leaking the oh yeah they have a

2379
02:05:43,199 --> 02:05:46,320
leak they have a leak

2380
02:05:46,320 --> 02:05:50,079
uh but the thing is that

2381
02:05:51,760 --> 02:05:53,119
yes in fact five is enabled because you

2382
02:05:53,119 --> 02:05:54,159
can actually see your record it's

2383
02:05:54,159 --> 02:05:55,520
literally just now pulled up checks

2384
02:05:55,520 --> 02:05:57,040
right we just missed it on screen but

2385
02:05:57,040 --> 02:05:58,719
they were looking at check sec uh and

2386
02:05:58,719 --> 02:06:01,119
they saw the pi you can see it again

2387
02:06:01,119 --> 02:06:03,199
yeah they look like annoyed by like oh

2388
02:06:03,199 --> 02:06:05,360
no there is pi so i mean again it is

2389
02:06:05,360 --> 02:06:06,880
solvable but that doesn't mean that they

2390
02:06:06,880 --> 02:06:08,480
can't just hard code something and and

2391
02:06:08,480 --> 02:06:09,679
win

2392
02:06:09,679 --> 02:06:11,520
right but but come on we did get them a

2393
02:06:11,520 --> 02:06:13,280
win function so but if that's a concern

2394
02:06:13,280 --> 02:06:16,480
for ricky at this moment they feel like

2395
02:06:16,480 --> 02:06:18,400
they are getting close to like tweaking

2396
02:06:18,400 --> 02:06:20,560
some adverses maybe as well that's a

2397
02:06:20,560 --> 02:06:22,800
good point they may actually

2398
02:06:22,800 --> 02:06:25,280
yeah i i think we're really close here

2399
02:06:25,280 --> 02:06:26,400
um

2400
02:06:26,400 --> 02:06:28,560
from perfect route and it is

2401
02:06:28,560 --> 02:06:31,199
still possible that uh rika pig is able

2402
02:06:31,199 --> 02:06:33,678
to uh

2403
02:06:34,400 --> 02:06:36,000
uh depending on what the state of their

2404
02:06:36,000 --> 02:06:38,480
payload is

2405
02:06:39,280 --> 02:06:41,119
i'm really curious to

2406
02:06:41,119 --> 02:06:43,599
to just you know kind of post more and

2407
02:06:43,599 --> 02:06:45,440
analyze this later and figure out why

2408
02:06:45,440 --> 02:06:47,119
the like

2409
02:06:47,119 --> 02:06:49,360
many many many many runs on the perfect

2410
02:06:49,360 --> 02:06:51,520
route side is what part of this is not a

2411
02:06:51,520 --> 02:06:52,880
reliable

2412
02:06:52,880 --> 02:06:54,400
uh or what are they what are they

2413
02:06:54,400 --> 02:06:56,079
analyzing when they're

2414
02:06:56,079 --> 02:06:59,760
running it like a million times in a row

2415
02:06:59,760 --> 02:07:03,599
oh they change it out to remote

2416
02:07:04,400 --> 02:07:07,840
yeah they they're just gonna throw it

2417
02:07:07,840 --> 02:07:09,360
if they are confident that it's really

2418
02:07:09,360 --> 02:07:10,960
just a little bit of randomness that's

2419
02:07:10,960 --> 02:07:13,199
the problem and i'm not sure what

2420
02:07:13,199 --> 02:07:14,960
randomness is like

2421
02:07:14,960 --> 02:07:16,880
is coming into play that that would be

2422
02:07:16,880 --> 02:07:18,400
causing them trouble

2423
02:07:18,400 --> 02:07:20,639
yeah are they maybe just partially no no

2424
02:07:20,639 --> 02:07:22,079
they have a it looked like they were

2425
02:07:22,079 --> 02:07:23,360
partially all right you can see that

2426
02:07:23,360 --> 02:07:27,119
they took the leak and they uh

2427
02:07:27,119 --> 02:07:30,719
sent back everything except the last uh

2428
02:07:30,719 --> 02:07:32,320
or

2429
02:07:32,320 --> 02:07:34,560
they're brute forcing

2430
02:07:34,560 --> 02:07:35,599
that's what they're doing is they're

2431
02:07:35,599 --> 02:07:38,159
brute forcing the win relative address

2432
02:07:38,159 --> 02:07:39,840
i bet that's exactly what they're doing

2433
02:07:39,840 --> 02:07:41,199
they're gonna just

2434
02:07:41,199 --> 02:07:42,719
why are they not

2435
02:07:42,719 --> 02:07:44,400
just writing the exact difference like

2436
02:07:44,400 --> 02:07:46,159
read the full value and then change it

2437
02:07:46,159 --> 02:07:48,000
relatively i mean

2438
02:07:48,000 --> 02:07:49,520
i i don't know why but i think that's

2439
02:07:49,520 --> 02:07:51,199
what they're doing i'm pretty sure it's

2440
02:07:51,199 --> 02:07:52,960
the brain fact program in maine because

2441
02:07:52,960 --> 02:07:55,199
then the return pointer would be

2442
02:07:55,199 --> 02:07:56,480
uh

2443
02:07:56,480 --> 02:07:58,639
would that would that was just an issue

2444
02:07:58,639 --> 02:08:00,960
they are not like

2445
02:08:00,960 --> 02:08:04,000
is is i'm not so sure if i misremember

2446
02:08:04,000 --> 02:08:06,239
this but does that not point into uh

2447
02:08:06,239 --> 02:08:09,760
lipsy start rain and so that points to

2448
02:08:09,760 --> 02:08:12,800
the c code and not

2449
02:08:12,800 --> 02:08:13,920
uh

2450
02:08:13,920 --> 02:08:16,800
yeah so

2451
02:08:19,840 --> 02:08:21,760
but maybe i'm i'm also saying something

2452
02:08:21,760 --> 02:08:22,719
completely

2453
02:08:22,719 --> 02:08:25,760
the i might be

2454
02:08:25,760 --> 02:08:27,040
yeah actually no i'm not no that might

2455
02:08:27,040 --> 02:08:28,239
be they're sure they're not brute

2456
02:08:28,239 --> 02:08:29,520
forcing anything because they're not

2457
02:08:29,520 --> 02:08:31,760
trying different

2458
02:08:31,760 --> 02:08:33,360
yeah i mean that that brings me the last

2459
02:08:33,360 --> 02:08:34,840
two bites doesn't make

2460
02:08:34,840 --> 02:08:36,400
sense that this might be the issue what

2461
02:08:36,400 --> 02:08:38,159
is the issue

2462
02:08:38,159 --> 02:08:41,599
that the return address is

2463
02:08:41,599 --> 02:08:45,040
not to like since this is running

2464
02:08:45,040 --> 02:08:46,560
is this running in the main

2465
02:08:46,560 --> 02:08:47,840
[Music]

2466
02:08:47,840 --> 02:08:50,960
function and then

2467
02:08:50,960 --> 02:08:53,040
like the return address is not

2468
02:08:53,040 --> 02:08:54,960
it's to lib c

2469
02:08:54,960 --> 02:08:56,239
and not

2470
02:08:56,239 --> 02:08:58,718
um

2471
02:08:59,440 --> 02:09:01,440
and not within the program so they don't

2472
02:09:01,440 --> 02:09:05,280
have a leak in that sense

2473
02:09:05,280 --> 02:09:06,960
uh they would need to leak some other

2474
02:09:06,960 --> 02:09:09,920
valves so your solution then was was it

2475
02:09:09,920 --> 02:09:11,679
because it incremented or documented it

2476
02:09:11,679 --> 02:09:13,040
no because i used a much more

2477
02:09:13,040 --> 02:09:15,199
complicated solution before we

2478
02:09:15,199 --> 02:09:16,480
simplified the challenge but my

2479
02:09:16,480 --> 02:09:18,239
complicated solution still worked on the

2480
02:09:18,239 --> 02:09:21,199
simplified challenge but we didn't

2481
02:09:21,199 --> 02:09:24,320
verify that the simplified uh so what

2482
02:09:24,320 --> 02:09:26,000
was the complicated solution for

2483
02:09:26,000 --> 02:09:27,360
correctly overriding the return address

2484
02:09:27,360 --> 02:09:28,960
like what was that well it involved the

2485
02:09:28,960 --> 02:09:30,239
rob chain

2486
02:09:30,239 --> 02:09:32,719
oh interesting uh

2487
02:09:32,719 --> 02:09:33,440
but

2488
02:09:33,440 --> 02:09:35,119
sorry we've got a little bit of a we've

2489
02:09:35,119 --> 02:09:36,639
got a couple of bad cables we've been

2490
02:09:36,639 --> 02:09:39,360
fighting yeah so if we lost the stream

2491
02:09:39,360 --> 02:09:42,679
there for a second

2492
02:09:54,320 --> 02:09:55,760
you have your script and you just keep

2493
02:09:55,760 --> 02:09:58,079
running your thing looking at memory

2494
02:09:58,079 --> 02:09:59,679
values just

2495
02:09:59,679 --> 02:10:01,360
you know

2496
02:10:01,360 --> 02:10:04,400
running in circles a bit

2497
02:10:06,239 --> 02:10:08,480
yes

2498
02:10:09,199 --> 02:10:10,100
i'm trying to

2499
02:10:10,100 --> 02:10:11,360
[Music]

2500
02:10:11,360 --> 02:10:13,119
think about whether they could leak some

2501
02:10:13,119 --> 02:10:16,719
other value that's within the

2502
02:10:16,719 --> 02:10:18,480
uh you know

2503
02:10:18,480 --> 02:10:21,598
i mean they totally could

2504
02:10:21,760 --> 02:10:23,440
they just need to find

2505
02:10:23,440 --> 02:10:26,000
some value on the stack

2506
02:10:26,000 --> 02:10:28,480
that's within the program right

2507
02:10:28,480 --> 02:10:31,760
isn't it c main also like

2508
02:10:31,760 --> 02:10:34,880
a function that gets as a parameter the

2509
02:10:34,880 --> 02:10:37,040
rules of main which might then also be

2510
02:10:37,040 --> 02:10:39,119
right it has to be so like the one of

2511
02:10:39,119 --> 02:10:41,040
the address it will be on the stack just

2512
02:10:41,040 --> 02:10:43,040
a bit further away yeah oh maybe then

2513
02:10:43,040 --> 02:10:45,119
that's then maybe it's not the bug that

2514
02:10:45,119 --> 02:10:46,560
they had the the

2515
02:10:46,560 --> 02:10:47,920
less than signed maybe they're

2516
02:10:47,920 --> 02:10:50,239
overwriting but maybe so it was just

2517
02:10:50,239 --> 02:10:52,239
that they needed to go a little bit

2518
02:10:52,239 --> 02:10:54,320
further down the stack and then they go

2519
02:10:54,320 --> 02:10:56,159
up again so maybe that's not a bug at

2520
02:10:56,159 --> 02:10:58,079
all maybe we've just misunderstood yeah

2521
02:10:58,079 --> 02:10:59,679
they were intentionally leaking the main

2522
02:10:59,679 --> 02:11:01,280
point or not as a return address right

2523
02:11:01,280 --> 02:11:03,040
as an argument and then they want to

2524
02:11:03,040 --> 02:11:04,560
yeah and then they're writing that back

2525
02:11:04,560 --> 02:11:05,840
out so then the question is like well so

2526
02:11:05,840 --> 02:11:07,280
what is the bug like what are this what

2527
02:11:07,280 --> 02:11:08,800
is what is perfect root stuck on now

2528
02:11:08,800 --> 02:11:10,639
then if that's the case they should be

2529
02:11:10,639 --> 02:11:12,400
able to overwrite their return address

2530
02:11:12,400 --> 02:11:14,480
with that main pointer plus the offset

2531
02:11:14,480 --> 02:11:17,119
to to the win instead right yeah which

2532
02:11:17,119 --> 02:11:18,960
uh should

2533
02:11:18,960 --> 02:11:20,159
should work i mean that should

2534
02:11:20,159 --> 02:11:22,400
absolutely be a valid solution where it

2535
02:11:22,400 --> 02:11:24,239
will put them back into main uh put them

2536
02:11:24,239 --> 02:11:27,759
back or sorry put them back into the win

2537
02:11:33,199 --> 02:11:35,360
yeah so

2538
02:11:35,360 --> 02:11:36,800
oh this is so

2539
02:11:36,800 --> 02:11:38,480
you know i know nerve-racking it's

2540
02:11:38,480 --> 02:11:40,320
imperfect knowledge on on all sides and

2541
02:11:40,320 --> 02:11:41,440
let's just double check back to your

2542
02:11:41,440 --> 02:11:42,400
right

2543
02:11:42,400 --> 02:11:44,239
yeah because they look they are working

2544
02:11:44,239 --> 02:11:46,880
here with some addresses as well they

2545
02:11:46,880 --> 02:11:49,679
second pro address leak address low and

2546
02:11:49,679 --> 02:11:52,880
steady might still be be valid here so

2547
02:11:52,880 --> 02:11:53,920
yeah let's take a look at them for a

2548
02:11:53,920 --> 02:11:56,480
while now pointer should point to end of

2549
02:11:56,480 --> 02:11:57,920
second program

2550
02:11:57,920 --> 02:11:59,920
right

2551
02:11:59,920 --> 02:12:01,280
which is a good understanding which

2552
02:12:01,280 --> 02:12:03,280
maybe i don't know if perfect root had

2553
02:12:03,280 --> 02:12:05,199
that understanding where the

2554
02:12:05,199 --> 02:12:07,520
where the the pointer or the data

2555
02:12:07,520 --> 02:12:09,280
pointer and the instruction point are

2556
02:12:09,280 --> 02:12:12,320
pointing to of the brainfog program

2557
02:12:12,320 --> 02:12:13,599
yeah

2558
02:12:13,599 --> 02:12:15,199
no it's uh

2559
02:12:15,199 --> 02:12:16,719
definitely

2560
02:12:16,719 --> 02:12:18,079
interesting to see the completely

2561
02:12:18,079 --> 02:12:20,719
different uh you know approaches here to

2562
02:12:20,719 --> 02:12:22,560
to you know the challenges from the

2563
02:12:22,560 --> 02:12:24,800
different teams

2564
02:12:24,800 --> 02:12:27,360
um oh they have okay so i'm just keeping

2565
02:12:27,360 --> 02:12:28,800
an eye on perfect route they actually

2566
02:12:28,800 --> 02:12:30,079
had

2567
02:12:30,079 --> 02:12:31,679
they had win

2568
02:12:31,679 --> 02:12:32,719
is that a back track that they're

2569
02:12:32,719 --> 02:12:33,920
showing or is that just this is this

2570
02:12:33,920 --> 02:12:36,320
assembly they were

2571
02:12:36,320 --> 02:12:37,760
are you saying that they they did have

2572
02:12:37,760 --> 02:12:39,199
the address of the win function win

2573
02:12:39,199 --> 02:12:41,119
itself showed up in one of these these

2574
02:12:41,119 --> 02:12:43,679
traces so right there

2575
02:12:43,679 --> 02:12:46,480
it's flickering uh right there

2576
02:12:46,480 --> 02:12:48,239
where i think they're just doing a back

2577
02:12:48,239 --> 02:12:49,520
track i can't even tell i think that's a

2578
02:12:49,520 --> 02:12:50,480
stack right right there at the bottom of

2579
02:12:50,480 --> 02:12:51,520
the jeff right there right that's the

2580
02:12:51,520 --> 02:12:52,800
yeah the bottom line

2581
02:12:52,800 --> 02:12:54,639
is they showed when showed up on there

2582
02:12:54,639 --> 02:12:56,239
they had win in the stack trace and they

2583
02:12:56,239 --> 02:12:57,520
were hitting exception earlier so

2584
02:12:57,520 --> 02:12:58,480
something

2585
02:12:58,480 --> 02:13:00,000
was blocking them from returning

2586
02:13:00,000 --> 02:13:01,679
directly

2587
02:13:01,679 --> 02:13:02,639
yeah

2588
02:13:02,639 --> 02:13:04,239
because i mean they don't have in their

2589
02:13:04,239 --> 02:13:05,360
program that they're running right they

2590
02:13:05,360 --> 02:13:07,199
don't have anything that returns but

2591
02:13:07,199 --> 02:13:08,480
i've seen them hit the return

2592
02:13:08,480 --> 02:13:09,840
instructions so i'm a little bit unsure

2593
02:13:09,840 --> 02:13:11,360
what's going on oh

2594
02:13:11,360 --> 02:13:12,960
are they

2595
02:13:12,960 --> 02:13:14,480
is that what that's what they're brute

2596
02:13:14,480 --> 02:13:16,079
forcing they're brute forcing the

2597
02:13:16,079 --> 02:13:18,320
behavior to try to get an exit that's

2598
02:13:18,320 --> 02:13:22,239
clean instead of just calling exit

2599
02:13:22,960 --> 02:13:24,480
oh is that what they're trying to get

2600
02:13:24,480 --> 02:13:25,520
around

2601
02:13:25,520 --> 02:13:29,719
if they literally just called exit

2602
02:13:30,159 --> 02:13:32,079
that's uh

2603
02:13:32,079 --> 02:13:34,719
i mean could be oh wow that's

2604
02:13:34,719 --> 02:13:35,760
that might be what they're fighting it

2605
02:13:35,760 --> 02:13:37,280
make because again we don't see we don't

2606
02:13:37,280 --> 02:13:38,719
see them calling the exit instructions

2607
02:13:38,719 --> 02:13:40,480
no no yeah exactly so they should be

2608
02:13:40,480 --> 02:13:42,079
able to just

2609
02:13:42,079 --> 02:13:42,840
do

2610
02:13:42,840 --> 02:13:46,079
that i mean i think i think we need to

2611
02:13:46,079 --> 02:13:46,960
tell both of them because we haven't

2612
02:13:46,960 --> 02:13:48,719
seen neither team all right yeah so

2613
02:13:48,719 --> 02:13:52,480
let's add a hint for the for the

2614
02:13:52,960 --> 02:13:54,159
because i think we need to let both of

2615
02:13:54,159 --> 02:13:55,119
them know and this is probably going to

2616
02:13:55,119 --> 02:13:56,079
be the last thing if we can't get it

2617
02:13:56,079 --> 02:13:57,440
here soon we're going to just have to

2618
02:13:57,440 --> 02:13:58,639
unfortunately go to sudden death but

2619
02:13:58,639 --> 02:14:02,320
let's let's see if we can oh

2620
02:14:02,400 --> 02:14:04,159
oh no we can't give that hit we can no

2621
02:14:04,159 --> 02:14:06,960
longer give that hint i just saw that

2622
02:14:06,960 --> 02:14:08,320
yeah so

2623
02:14:08,320 --> 02:14:09,920
let's switch over to let me switch over

2624
02:14:09,920 --> 02:14:12,880
here to reykjavik you see that they have

2625
02:14:12,880 --> 02:14:15,199
uh they are uh

2626
02:14:15,199 --> 02:14:17,199
calling the l just so they're padding

2627
02:14:17,199 --> 02:14:20,239
their code with the exit instruction

2628
02:14:20,239 --> 02:14:22,480
so they are very aware of yeah that they

2629
02:14:22,480 --> 02:14:23,760
can use you know exactly what that's

2630
02:14:23,760 --> 02:14:24,880
gonna be if these two players would

2631
02:14:24,880 --> 02:14:26,880
combine their knowledge they each have

2632
02:14:26,880 --> 02:14:29,280
half of an exploit yeah

2633
02:14:29,280 --> 02:14:31,760
which is a a good example of real ctf

2634
02:14:31,760 --> 02:14:34,480
with uh with teams uh they would

2635
02:14:34,480 --> 02:14:36,400
complement each other so well and they

2636
02:14:36,400 --> 02:14:37,920
would have solved this in

2637
02:14:37,920 --> 02:14:38,800
you know

2638
02:14:38,800 --> 02:14:40,480
a fraction of the time though yeah and

2639
02:14:40,480 --> 02:14:41,679
that's why playing with a team is so

2640
02:14:41,679 --> 02:14:42,960
much more fun they catch your mistakes

2641
02:14:42,960 --> 02:14:44,000
they look over your shoulder and they

2642
02:14:44,000 --> 02:14:45,520
point out hey did you really mean to do

2643
02:14:45,520 --> 02:14:47,520
it a plus or a greater than or and you

2644
02:14:47,520 --> 02:14:49,440
know right um

2645
02:14:49,440 --> 02:14:51,599
it is so much more enjoyable to do a ctf

2646
02:14:51,599 --> 02:14:53,679
with uh with somebody else right and the

2647
02:14:53,679 --> 02:14:56,480
thing is here that perfect route um if

2648
02:14:56,480 --> 02:14:58,480
we if we go back to them they will not

2649
02:14:58,480 --> 02:14:59,840
notice this because they are not even

2650
02:14:59,840 --> 02:15:02,079
looking at the code anymore they're just

2651
02:15:02,079 --> 02:15:03,199
they're looking the expert to look at

2652
02:15:03,199 --> 02:15:05,520
the debugger they're completely missing

2653
02:15:05,520 --> 02:15:07,599
that there is this extra instruction

2654
02:15:07,599 --> 02:15:09,199
what do you think they try to do like

2655
02:15:09,199 --> 02:15:11,760
disconnect and then that makes main

2656
02:15:11,760 --> 02:15:14,480
return because it exits out of the the

2657
02:15:14,480 --> 02:15:16,480
the brain loop or how how do they

2658
02:15:16,480 --> 02:15:18,800
even reach the return i honestly think

2659
02:15:18,800 --> 02:15:20,480
they're flailing and i think they don't

2660
02:15:20,480 --> 02:15:22,719
have a clear plan and they're just

2661
02:15:22,719 --> 02:15:24,320
trying a bunch of different stuff to see

2662
02:15:24,320 --> 02:15:25,920
if they can get it to

2663
02:15:25,920 --> 02:15:27,199
um

2664
02:15:27,199 --> 02:15:29,119
call a system hold on what is this with

2665
02:15:29,119 --> 02:15:30,400
me stopped

2666
02:15:30,400 --> 02:15:32,480
wait oh there was a red look they

2667
02:15:32,480 --> 02:15:35,040
overwrote main red they add red and yeah

2668
02:15:35,040 --> 02:15:38,000
it's pointing into wind but

2669
02:15:38,000 --> 02:15:39,679
now they are exceptional

2670
02:15:39,679 --> 02:15:41,360
what are they yeah this should this

2671
02:15:41,360 --> 02:15:43,920
should just

2672
02:15:44,400 --> 02:15:46,960
oh no no pop rbp

2673
02:15:46,960 --> 02:15:48,960
pop rvp is gonna pop the pointer to win

2674
02:15:48,960 --> 02:15:50,639
off

2675
02:15:50,639 --> 02:15:51,840
right

2676
02:15:51,840 --> 02:15:53,920
because win is on the stack

2677
02:15:53,920 --> 02:15:55,599
no that's well is that oh no that's

2678
02:15:55,599 --> 02:15:57,599
actually the question i did pause on the

2679
02:15:57,599 --> 02:15:58,560
on the

2680
02:15:58,560 --> 02:15:59,599
they were

2681
02:15:59,599 --> 02:16:01,840
at the red of maine and it pointed into

2682
02:16:01,840 --> 02:16:04,400
win

2683
02:16:04,400 --> 02:16:06,079
so somehow they reached that red

2684
02:16:06,079 --> 02:16:08,719
apparently

2685
02:16:09,520 --> 02:16:10,719
yeah they haven't yet they're having

2686
02:16:10,719 --> 02:16:13,760
trouble with the call to system

2687
02:16:13,760 --> 02:16:16,239
is it are they accidentally no i don't

2688
02:16:16,239 --> 02:16:18,000
know yeah so they shouldn't have to

2689
02:16:18,000 --> 02:16:19,199
worry about the arguments because wind

2690
02:16:19,199 --> 02:16:20,719
sets all that up yeah

2691
02:16:20,719 --> 02:16:22,000
but they're if they're triggering if

2692
02:16:22,000 --> 02:16:23,360
they're breaking in there what is

2693
02:16:23,360 --> 02:16:24,960
breaking that's causing

2694
02:16:24,960 --> 02:16:26,960
are they trying to do like a small drop

2695
02:16:26,960 --> 02:16:29,440
thing here instead of just

2696
02:16:29,440 --> 02:16:30,639
yeah i'm not sure what they've actually

2697
02:16:30,639 --> 02:16:32,959
switched over to doing

2698
02:16:32,959 --> 02:16:35,359
so in one frame when i paused uh they

2699
02:16:35,359 --> 02:16:38,160
were at the return of main and so you

2700
02:16:38,160 --> 02:16:41,280
know it it the the jeff output showed

2701
02:16:41,280 --> 02:16:43,120
where it would continue and it pointed

2702
02:16:43,120 --> 02:16:45,359
into win but at the end of win at the

2703
02:16:45,359 --> 02:16:47,519
return of wins okay so they're like

2704
02:16:47,519 --> 02:16:49,599
offered by a few bytes

2705
02:16:49,599 --> 02:16:51,760
yeah but there was just one frame where

2706
02:16:51,760 --> 02:16:54,558
i paused on and then on the consecutive

2707
02:16:54,558 --> 02:16:56,240
one they were actually stepping through

2708
02:16:56,240 --> 02:16:57,359
win so

2709
02:16:57,359 --> 02:16:58,879
um

2710
02:16:58,879 --> 02:17:00,718
so i don't know what what changed like

2711
02:17:00,718 --> 02:17:03,120
why why suddenly it was at the start of

2712
02:17:03,120 --> 02:17:04,718
when sometimes not maybe that is the

2713
02:17:04,718 --> 02:17:06,318
randomness they are observing and we

2714
02:17:06,318 --> 02:17:08,959
haven't just noticed that right um i

2715
02:17:08,959 --> 02:17:10,558
want to switch back over to wikipedia a

2716
02:17:10,558 --> 02:17:11,920
little bit right

2717
02:17:11,920 --> 02:17:12,879
and

2718
02:17:12,879 --> 02:17:14,638
look at how i mean you can't quite see

2719
02:17:14,638 --> 02:17:16,398
it now you can see it like like how

2720
02:17:16,398 --> 02:17:19,120
beautiful their uh like exploit script

2721
02:17:19,120 --> 02:17:20,478
is here where they have created these

2722
02:17:20,478 --> 02:17:22,080
abstractions for the instructions and

2723
02:17:22,080 --> 02:17:24,080
they're giving them meaningful names

2724
02:17:24,080 --> 02:17:26,240
instead of these random symbols

2725
02:17:26,240 --> 02:17:28,160
uh and you can see how they're slowly

2726
02:17:28,160 --> 02:17:30,000
building this up adding the comments and

2727
02:17:30,000 --> 02:17:33,040
going very methodical in this and you

2728
02:17:33,040 --> 02:17:35,280
know they're slowly catching up uh

2729
02:17:35,280 --> 02:17:38,558
importing time not sure why but

2730
02:17:38,558 --> 02:17:40,478
uh maybe oh okay they're just gonna do a

2731
02:17:40,478 --> 02:17:44,398
short sleep here it seems

2732
02:17:44,879 --> 02:17:45,840
and

2733
02:17:45,840 --> 02:17:47,599
i'm not sure exactly how far but you can

2734
02:17:47,599 --> 02:17:49,599
see they have the initial stager with

2735
02:17:49,599 --> 02:17:50,318
the

2736
02:17:50,318 --> 02:17:52,799
unmatched

2737
02:17:52,799 --> 02:17:54,879
bracket they have

2738
02:17:54,879 --> 02:17:56,398
the second stage here

2739
02:17:56,398 --> 02:17:57,200
with

2740
02:17:57,200 --> 02:17:59,760
padding out with the exit instruction

2741
02:17:59,760 --> 02:18:01,200
stuff so you see they're really getting

2742
02:18:01,200 --> 02:18:05,040
there uh and uh

2743
02:18:05,040 --> 02:18:06,398
perfect route is you don't have to

2744
02:18:06,398 --> 02:18:07,840
switch back but i'm just watching them

2745
02:18:07,840 --> 02:18:10,160
they're in the bowels of gdb debugging

2746
02:18:10,160 --> 02:18:12,879
system uh trying to figure out

2747
02:18:12,879 --> 02:18:14,558
uh

2748
02:18:14,558 --> 02:18:16,318
oh just like

2749
02:18:16,318 --> 02:18:18,799
trying to figure out like in the lib c

2750
02:18:18,799 --> 02:18:21,359
and they're getting like

2751
02:18:21,359 --> 02:18:22,799
yeah like they're in like posix spawn

2752
02:18:22,799 --> 02:18:24,240
action currently like they're just

2753
02:18:24,240 --> 02:18:25,280
there's some other exception that's

2754
02:18:25,280 --> 02:18:26,478
being triggered i don't know what has

2755
02:18:26,478 --> 02:18:28,638
been corrupted or what's changed

2756
02:18:28,638 --> 02:18:30,558
they must be really frustrating that

2757
02:18:30,558 --> 02:18:33,039
they start

2758
02:18:33,120 --> 02:18:35,439
looking through that yeah

2759
02:18:35,439 --> 02:18:37,040
see we have the question what we want to

2760
02:18:37,040 --> 02:18:38,959
do here if we want to go to uh if we're

2761
02:18:38,959 --> 02:18:41,920
going to give them a hint or i mean

2762
02:18:41,920 --> 02:18:44,638
i kind of still want to

2763
02:18:44,638 --> 02:18:46,318
i feel like we do have a little bit of

2764
02:18:46,318 --> 02:18:48,478
time um we don't eat into all of our

2765
02:18:48,478 --> 02:18:50,240
spare time before our final match we

2766
02:18:50,240 --> 02:18:51,679
want to give the team whoever wins

2767
02:18:51,679 --> 02:18:53,040
doesn't want a little bit of a break to

2768
02:18:53,040 --> 02:18:54,799
flush their head and not go straight

2769
02:18:54,799 --> 02:18:56,718
into it yeah um

2770
02:18:56,718 --> 02:18:58,318
but like yeah we do have to cut this off

2771
02:18:58,318 --> 02:19:00,478
at some point and and switch to a sudden

2772
02:19:00,478 --> 02:19:02,799
death um

2773
02:19:02,799 --> 02:19:05,040
this this just

2774
02:19:05,040 --> 02:19:07,120
yeah this still feels like

2775
02:19:07,120 --> 02:19:08,959
something is inches away i mean i don't

2776
02:19:08,959 --> 02:19:10,558
know what in the world is is even

2777
02:19:10,558 --> 02:19:12,718
blocking this because we're seeing

2778
02:19:12,718 --> 02:19:14,799
the the wind function is being called

2779
02:19:14,799 --> 02:19:16,799
like they're calling win could it be

2780
02:19:16,799 --> 02:19:18,638
some like uh have they like messed up

2781
02:19:18,638 --> 02:19:20,080
the stack pointer in such a way that

2782
02:19:20,080 --> 02:19:23,760
there's like stack misalignment or uh

2783
02:19:23,760 --> 02:19:25,200
i i don't know and they certainly don't

2784
02:19:25,200 --> 02:19:26,318
either given

2785
02:19:26,318 --> 02:19:27,840
time the debugger being sent oh now

2786
02:19:27,840 --> 02:19:31,200
they're going for one gadget

2787
02:19:32,840 --> 02:19:35,120
yeah they're going to try to avoid our

2788
02:19:35,120 --> 02:19:36,718
wind function and instead just go

2789
02:19:36,718 --> 02:19:39,438
directly for

2790
02:19:40,240 --> 02:19:41,920
now did your original one use the win

2791
02:19:41,920 --> 02:19:43,920
function as well or was your original

2792
02:19:43,920 --> 02:19:46,080
solution avoiding it too no my original

2793
02:19:46,080 --> 02:19:47,359
solution did not use the win function

2794
02:19:47,359 --> 02:19:49,359
yeah so it may be that just by avoiding

2795
02:19:49,359 --> 02:19:50,960
it they're gonna end up getting uh

2796
02:19:50,960 --> 02:19:52,240
getting a win here so that is a

2797
02:19:52,240 --> 02:19:53,600
possibility but i just don't know how

2798
02:19:53,600 --> 02:19:55,280
long it's gonna take him to do that and

2799
02:19:55,280 --> 02:19:57,920
then the question is is rika pig

2800
02:19:57,920 --> 02:19:59,520
gonna sort of slow and steady and be

2801
02:19:59,520 --> 02:20:01,359
able to catch up or do we just need to

2802
02:20:01,359 --> 02:20:03,120
call this one and move on actually now

2803
02:20:03,120 --> 02:20:05,359
that you mentioned uh the misaligned

2804
02:20:05,359 --> 02:20:08,240
stack i do remember writing

2805
02:20:08,240 --> 02:20:10,960
a challenge for uh the cyber security

2806
02:20:10,960 --> 02:20:13,920
change germany like a basic ponable and

2807
02:20:13,920 --> 02:20:16,560
we and if you and there was a win

2808
02:20:16,560 --> 02:20:18,479
function i believe and when you solved

2809
02:20:18,479 --> 02:20:20,240
it there was a problem with misaligned

2810
02:20:20,240 --> 02:20:21,680
stack because

2811
02:20:21,680 --> 02:20:25,040
system or x something in in that code is

2812
02:20:25,040 --> 02:20:26,880
expecting uh

2813
02:20:26,880 --> 02:20:28,240
stuff to be aligned but there was a

2814
02:20:28,240 --> 02:20:29,760
pretty clear exception that when you

2815
02:20:29,760 --> 02:20:31,760
google it you would find

2816
02:20:31,760 --> 02:20:33,520
the information about that and the

2817
02:20:33,520 --> 02:20:36,560
solution you actually had to do one um

2818
02:20:36,560 --> 02:20:37,359
one

2819
02:20:37,359 --> 02:20:38,560
basically

2820
02:20:38,560 --> 02:20:39,680
pop

2821
02:20:39,680 --> 02:20:42,479
red to to align it again and then then

2822
02:20:42,479 --> 02:20:44,080
the wind function did work now that you

2823
02:20:44,080 --> 02:20:46,000
mentioned this i remember that which

2824
02:20:46,000 --> 02:20:47,120
though isn't really an option when

2825
02:20:47,120 --> 02:20:48,800
you're working from an interpreter like

2826
02:20:48,800 --> 02:20:50,000
this right where you sort of have this

2827
02:20:50,000 --> 02:20:53,200
different environment so it's not uh

2828
02:20:53,200 --> 02:20:54,960
it's not clear what that would even look

2829
02:20:54,960 --> 02:20:56,479
like because they don't have they have a

2830
02:20:56,479 --> 02:20:57,920
single override of the return address

2831
02:20:57,920 --> 02:20:58,880
they don't know i mean they can

2832
02:20:58,880 --> 02:21:01,120
overwrite like they can overwrite a lot

2833
02:21:01,120 --> 02:21:02,720
of stuff if they want like they could

2834
02:21:02,720 --> 02:21:04,399
yeah but sorry it would be they'd have

2835
02:21:04,399 --> 02:21:06,319
to override have to find the next return

2836
02:21:06,319 --> 02:21:07,760
address on the stack and then go

2837
02:21:07,760 --> 02:21:09,760
overwrite that as well no no no no no

2838
02:21:09,760 --> 02:21:11,359
they could replace just two in a row

2839
02:21:11,359 --> 02:21:12,960
yeah yeah that's right yeah yeah yeah

2840
02:21:12,960 --> 02:21:15,280
yeah they could do that oh definitely

2841
02:21:15,280 --> 02:21:16,479
that's actually that and since they have

2842
02:21:16,479 --> 02:21:18,319
a leak uh

2843
02:21:18,319 --> 02:21:20,240
they can use that to just you know find

2844
02:21:20,240 --> 02:21:22,479
the red gadget uh well they already had

2845
02:21:22,479 --> 02:21:24,319
the lipstick yeah yeah was already

2846
02:21:24,319 --> 02:21:26,240
essentially there oh here let's switch

2847
02:21:26,240 --> 02:21:28,160
over here again to uh riker pick because

2848
02:21:28,160 --> 02:21:30,319
uh i just saw on the terminal i saw the

2849
02:21:30,319 --> 02:21:32,560
stack smashing detected uh

2850
02:21:32,560 --> 02:21:34,399
message which means that they have

2851
02:21:34,399 --> 02:21:37,200
overwritten them from the uh and

2852
02:21:37,200 --> 02:21:38,880
not only have they overwritten the

2853
02:21:38,880 --> 02:21:40,800
return at this they have uh triggered

2854
02:21:40,800 --> 02:21:42,479
the return because otherwise the the

2855
02:21:42,479 --> 02:21:43,920
text message we knew that they had those

2856
02:21:43,920 --> 02:21:45,280
exits because they did that padding and

2857
02:21:45,280 --> 02:21:47,520
so they had that part of it right away

2858
02:21:47,520 --> 02:21:50,319
which again i i don't see that at all so

2859
02:21:50,319 --> 02:21:52,240
might we is it possible that we might

2860
02:21:52,240 --> 02:21:55,600
see the like you know a big catch-up

2861
02:21:55,600 --> 02:21:57,600
movement here from tortoises in the hair

2862
02:21:57,600 --> 02:21:59,600
this might might be it

2863
02:21:59,600 --> 02:22:01,920
yes

2864
02:22:04,240 --> 02:22:07,760
yeah there's a move apps instruction

2865
02:22:07,760 --> 02:22:08,640
that

2866
02:22:08,640 --> 02:22:10,160
doesn't like

2867
02:22:10,160 --> 02:22:14,640
unaligned addresses which is um

2868
02:22:14,640 --> 02:22:17,120
which happens in system

2869
02:22:17,120 --> 02:22:20,720
uh i have a video on that

2870
02:22:20,800 --> 02:22:22,800
solving that that basic pointable

2871
02:22:22,800 --> 02:22:25,359
challenges and i had this problem um

2872
02:22:25,359 --> 02:22:27,600
yeah you get a sec fault stack fault

2873
02:22:27,600 --> 02:22:30,319
that address zero a very weird exception

2874
02:22:30,319 --> 02:22:32,960
um and then you know you look at what

2875
02:22:32,960 --> 02:22:34,800
instruction caused the exception and

2876
02:22:34,800 --> 02:22:36,640
it's a move-ups instruction and when you

2877
02:22:36,640 --> 02:22:39,280
google that you then find move apps uh

2878
02:22:39,280 --> 02:22:42,880
unaligned address and then you know

2879
02:22:42,880 --> 02:22:44,880
so that might be the issue here that the

2880
02:22:44,880 --> 02:22:46,640
win function is just not callable well

2881
02:22:46,640 --> 02:22:49,359
no i my suspicion is it is callable if

2882
02:22:49,359 --> 02:22:51,920
you exit cleanly right so my suspicion

2883
02:22:51,920 --> 02:22:53,520
is because that brute force that we're

2884
02:22:53,520 --> 02:22:54,880
seeing from perfect route i think is an

2885
02:22:54,880 --> 02:22:57,520
artifact of how they're they're getting

2886
02:22:57,520 --> 02:22:58,479
their

2887
02:22:58,479 --> 02:22:59,439
uh

2888
02:22:59,439 --> 02:23:01,280
their return out right i think that's

2889
02:23:01,280 --> 02:23:02,640
what's what's potentially getting it

2890
02:23:02,640 --> 02:23:05,640
misaligned

2891
02:23:06,240 --> 02:23:07,760
whereas if they were to actually just

2892
02:23:07,760 --> 02:23:10,479
let the interpreter cleanly exit out

2893
02:23:10,479 --> 02:23:13,039
that they would

2894
02:23:13,200 --> 02:23:15,040
and here when i say and we see here

2895
02:23:15,040 --> 02:23:16,880
enrique pig's screen that you see that

2896
02:23:16,880 --> 02:23:18,160
right and you saw the stack smashing

2897
02:23:18,160 --> 02:23:20,479
detected there so

2898
02:23:20,479 --> 02:23:23,840
uh they have been like just writing

2899
02:23:23,840 --> 02:23:26,800
a bit too far uh on the stack i i'm not

2900
02:23:26,800 --> 02:23:29,600
entirely sure if this like is

2901
02:23:29,600 --> 02:23:31,120
an intentional

2902
02:23:31,120 --> 02:23:33,760
uh smash to just like

2903
02:23:33,760 --> 02:23:35,280
verify that they are doing the right

2904
02:23:35,280 --> 02:23:37,120
thing or if it's an accidental smash

2905
02:23:37,120 --> 02:23:39,359
because they misaligned some of their uh

2906
02:23:39,359 --> 02:23:40,640
data

2907
02:23:40,640 --> 02:23:43,520
that still uh remains to be seen

2908
02:23:43,520 --> 02:23:45,760
uh so yeah i think we and we are we are

2909
02:23:45,760 --> 02:23:47,600
going to have to like uh certainly go to

2910
02:23:47,600 --> 02:23:49,200
sun death here pretty soon i think in

2911
02:23:49,200 --> 02:23:50,880
certainly the next five minutes or so

2912
02:23:50,880 --> 02:23:53,120
yeah if we're not like real real close

2913
02:23:53,120 --> 02:23:54,560
because uh

2914
02:23:54,560 --> 02:23:57,359
we don't have confidence yet that

2915
02:23:57,359 --> 02:23:58,880
um

2916
02:23:58,880 --> 02:24:00,080
we don't know for certain if the exit

2917
02:24:00,080 --> 02:24:01,920
cleanly would solve it uh for perfect

2918
02:24:01,920 --> 02:24:03,600
fruit and we don't know

2919
02:24:03,600 --> 02:24:04,800
um and even the things that they're

2920
02:24:04,800 --> 02:24:07,040
changing now this one gadget attempt

2921
02:24:07,040 --> 02:24:08,880
might be a little

2922
02:24:08,880 --> 02:24:10,319
ambitious for the time that's left right

2923
02:24:10,319 --> 02:24:12,160
so we're still trying to

2924
02:24:12,160 --> 02:24:15,040
uh trying to figure that out

2925
02:24:15,040 --> 02:24:19,040
yes so the question is do we

2926
02:24:19,120 --> 02:24:20,960
do we ask them or do we just go to sun

2927
02:24:20,960 --> 02:24:22,880
and death

2928
02:24:22,880 --> 02:24:24,319
i

2929
02:24:24,319 --> 02:24:26,399
i don't think we give them an option um

2930
02:24:26,399 --> 02:24:28,080
yeah if we we should get them as long as

2931
02:24:28,080 --> 02:24:29,520
we can and once we hit the moment where

2932
02:24:29,520 --> 02:24:31,680
we we can't uh

2933
02:24:31,680 --> 02:24:33,920
can't go any further um because we just

2934
02:24:33,920 --> 02:24:35,600
have to take to get on to to queue up

2935
02:24:35,600 --> 02:24:37,120
for the finals then we're gonna have to

2936
02:24:37,120 --> 02:24:40,240
uh just just cut it off

2937
02:24:40,399 --> 02:24:41,600
yeah

2938
02:24:41,600 --> 02:24:42,399
so

2939
02:24:42,399 --> 02:24:44,000
uh i don't know that we're there yet

2940
02:24:44,000 --> 02:24:46,880
we're seeing a one gadget attempt uh

2941
02:24:46,880 --> 02:24:47,920
oh

2942
02:24:47,920 --> 02:24:49,840
man i want them i want them to do it

2943
02:24:49,840 --> 02:24:51,840
yeah i really want to see this

2944
02:24:51,840 --> 02:24:53,600
yeah so how's it looking over there

2945
02:24:53,600 --> 02:24:57,200
enrique pig uh yeah so ricky pig they

2946
02:24:57,200 --> 02:24:59,760
are inspecting the stack here in the

2947
02:24:59,760 --> 02:25:02,319
debugger

2948
02:25:05,680 --> 02:25:06,880
and

2949
02:25:06,880 --> 02:25:10,000
you can see here their their program the

2950
02:25:10,000 --> 02:25:13,600
padding that they filled up oh so okay

2951
02:25:13,600 --> 02:25:14,880
so since they're doing this padding

2952
02:25:14,880 --> 02:25:17,840
thing right then um

2953
02:25:17,840 --> 02:25:19,120
they are

2954
02:25:19,120 --> 02:25:21,200
i suspect that the smashing was because

2955
02:25:21,200 --> 02:25:23,520
of like they miscalculated exactly how

2956
02:25:23,520 --> 02:25:24,640
long

2957
02:25:24,640 --> 02:25:26,399
uh their like padding and stuff should

2958
02:25:26,399 --> 02:25:28,080
should be right so

2959
02:25:28,080 --> 02:25:30,960
um we'll see if uh if they can kind of

2960
02:25:30,960 --> 02:25:32,720
like fix that alignment up or like the

2961
02:25:32,720 --> 02:25:34,960
size of the payload and then to move on

2962
02:25:34,960 --> 02:25:38,760
to actually controlling the

2963
02:25:38,760 --> 02:25:40,399
[Music]

2964
02:25:40,399 --> 02:25:41,760
the overrides

2965
02:25:41,760 --> 02:25:44,640
that's what i'm trying to say

2966
02:25:48,319 --> 02:25:52,279
yeah it's uh

2967
02:25:52,319 --> 02:25:54,240
i mean for a while i was really like

2968
02:25:54,240 --> 02:25:55,920
okay uh the perfect route just gonna

2969
02:25:55,920 --> 02:25:57,760
yeah they were gonna have this one right

2970
02:25:57,760 --> 02:26:00,000
through it uh i'm not

2971
02:26:00,000 --> 02:26:02,319
so sure anymore like this could really

2972
02:26:02,319 --> 02:26:03,200
go

2973
02:26:03,200 --> 02:26:04,840
either way

2974
02:26:04,840 --> 02:26:08,160
um yeah and again i mean i think i think

2975
02:26:08,160 --> 02:26:10,399
i'm not confident uh i'm gonna say we

2976
02:26:10,399 --> 02:26:12,479
got to get three more minutes to like

2977
02:26:12,479 --> 02:26:13,840
be sure someone's gonna solve it or

2978
02:26:13,840 --> 02:26:15,200
we're just gonna gonna have to switch

2979
02:26:15,200 --> 02:26:17,600
over to uh to our sudden death because

2980
02:26:17,600 --> 02:26:19,840
we we do wanna give them at least a good

2981
02:26:19,840 --> 02:26:21,439
10 20 minutes to solve some death and

2982
02:26:21,439 --> 02:26:24,160
then go to the bathroom uh and come back

2983
02:26:24,160 --> 02:26:25,920
for for the the finals because you know

2984
02:26:25,920 --> 02:26:27,200
when i have to and the finals

2985
02:26:27,200 --> 02:26:29,520
unfortunately we we have to

2986
02:26:29,520 --> 02:26:31,359
have enough time for that because the

2987
02:26:31,359 --> 02:26:32,880
scores have to be in we have to announce

2988
02:26:32,880 --> 02:26:34,240
the winner it has to go it has to go

2989
02:26:34,240 --> 02:26:36,960
into the defcon ctf score so we we do

2990
02:26:36,960 --> 02:26:38,240
have some hard limits that we're

2991
02:26:38,240 --> 02:26:39,600
unfortunately working against where

2992
02:26:39,600 --> 02:26:40,399
right

2993
02:26:40,399 --> 02:26:42,640
this uh we need a winner uh to be able

2994
02:26:42,640 --> 02:26:44,160
to allocate these points the good thing

2995
02:26:44,160 --> 02:26:46,479
is that the teams

2996
02:26:46,479 --> 02:26:49,040
can choose to send another player uh for

2997
02:26:49,040 --> 02:26:50,399
the file that's a great point that's a

2998
02:26:50,399 --> 02:26:51,359
great point they were not required to

2999
02:26:51,359 --> 02:26:52,720
send the same player yeah so it is

3000
02:26:52,720 --> 02:26:54,479
entirely possible that someone decides

3001
02:26:54,479 --> 02:26:56,240
uh hey i'm burnt out you got to send

3002
02:26:56,240 --> 02:26:58,240
somebody else that that last etf ruined

3003
02:26:58,240 --> 02:26:59,359
me so

3004
02:26:59,359 --> 02:27:02,319
do you know how the other teams have

3005
02:27:02,319 --> 02:27:04,800
done this so far have they sent uh other

3006
02:27:04,800 --> 02:27:07,520
people in these so far

3007
02:27:07,520 --> 02:27:10,080
so you know the the total that any team

3008
02:27:10,080 --> 02:27:12,080
would have to send us for four rounds so

3009
02:27:12,080 --> 02:27:13,520
it's not an overwhelming amount spread

3010
02:27:13,520 --> 02:27:15,040
out over these three days right and so

3011
02:27:15,040 --> 02:27:16,720
it's not too crazy and so we've only

3012
02:27:16,720 --> 02:27:18,960
seen so far mmm i think is the only one

3013
02:27:18,960 --> 02:27:20,080
that i've noticed yeah they swapped

3014
02:27:20,080 --> 02:27:24,240
between uh robert and jinmo

3015
02:27:24,240 --> 02:27:26,720
for for their rounds so between their uh

3016
02:27:26,720 --> 02:27:28,160
first and second and second and third

3017
02:27:28,160 --> 02:27:31,840
there was a switch in and switch out

3018
02:27:32,240 --> 02:27:33,680
but everyone else seems to have been

3019
02:27:33,680 --> 02:27:36,720
sending the same person

3020
02:27:38,479 --> 02:27:41,120
do you think uh the players did this

3021
02:27:41,120 --> 02:27:43,280
voluntarily or do you think within the

3022
02:27:43,280 --> 02:27:44,880
team they had to

3023
02:27:44,880 --> 02:27:46,080
throw

3024
02:27:46,080 --> 02:27:48,000
a coin that's a that's a good question

3025
02:27:48,000 --> 02:27:50,399
yeah i'm not sure if it was uh it seems

3026
02:27:50,399 --> 02:27:52,640
that that's varied uh i do know some

3027
02:27:52,640 --> 02:27:53,840
other team specifically said they were

3028
02:27:53,840 --> 02:27:55,040
kind of like picking points because

3029
02:27:55,040 --> 02:27:57,120
multiple people wanted to go or uh and

3030
02:27:57,120 --> 02:27:58,399
they had to kind of pick out who was

3031
02:27:58,399 --> 02:27:59,920
available

3032
02:27:59,920 --> 02:28:02,319
yeah i wanted to go as positive i was

3033
02:28:02,319 --> 02:28:04,080
more worried that they would feel

3034
02:28:04,080 --> 02:28:05,600
uncomfortable okay i think we're gonna

3035
02:28:05,600 --> 02:28:08,000
have to switch over to sudden death um i

3036
02:28:08,000 --> 02:28:10,319
i i hate to do this um of course we want

3037
02:28:10,319 --> 02:28:12,479
to see them solve it but at this point

3038
02:28:12,479 --> 02:28:13,280
um

3039
02:28:13,280 --> 02:28:14,479
i'm just seeing some hesitation on

3040
02:28:14,479 --> 02:28:17,680
perfect root uh it doesn't seem like uh

3041
02:28:17,680 --> 02:28:18,960
alex has

3042
02:28:18,960 --> 02:28:20,319
kind of a sense of

3043
02:28:20,319 --> 02:28:21,760
of what it's gonna take to finish this

3044
02:28:21,760 --> 02:28:24,160
out so uh let's go ahead and i'm gonna

3045
02:28:24,160 --> 02:28:26,479
go ahead and let each team know um that

3046
02:28:26,479 --> 02:28:27,600
we're switching to sudden death because

3047
02:28:27,600 --> 02:28:28,640
we want to give them a break between the

3048
02:28:28,640 --> 02:28:29,760
final round

3049
02:28:29,760 --> 02:28:32,560
and we will uh uh just give me a second

3050
02:28:32,560 --> 02:28:34,160
i'm gonna take off my my gear i'm gonna

3051
02:28:34,160 --> 02:28:35,600
let them know and we'll count that one

3052
02:28:35,600 --> 02:28:37,200
in shortly

3053
02:28:37,200 --> 02:28:38,240
right

3054
02:28:38,240 --> 02:28:41,200
so uh yeah that's unfortunate to see

3055
02:28:41,200 --> 02:28:43,439
obviously we would want them we would

3056
02:28:43,439 --> 02:28:45,680
want to see a finish a working exploit

3057
02:28:45,680 --> 02:28:47,840
but it's understandable uh we

3058
02:28:47,840 --> 02:28:50,640
the the schedule requires it

3059
02:28:50,640 --> 02:28:52,160
and of course they are also missing from

3060
02:28:52,160 --> 02:28:54,479
the main ctf right i mean

3061
02:28:54,479 --> 02:28:56,399
it's it's not the final hour kind of of

3062
02:28:56,399 --> 02:28:58,479
the big ctf maybe

3063
02:28:58,479 --> 02:29:00,800
it is almost there's one and a half hour

3064
02:29:00,800 --> 02:29:02,640
left of the main ctf so it's not like

3065
02:29:02,640 --> 02:29:04,800
that they can do that much but still

3066
02:29:04,800 --> 02:29:06,240
they are missing from their main team

3067
02:29:06,240 --> 02:29:07,120
right

3068
02:29:07,120 --> 02:29:09,040
quite a long time now

3069
02:29:09,040 --> 02:29:11,600
and this is like a choice the the teams

3070
02:29:11,600 --> 02:29:13,760
have to make right

3071
02:29:13,760 --> 02:29:16,880
uh like which who do they send for this

3072
02:29:16,880 --> 02:29:19,040
like to balance that like where do they

3073
02:29:19,040 --> 02:29:19,920
think the

3074
02:29:19,920 --> 02:29:21,920
their most skilled players are of the

3075
02:29:21,920 --> 02:29:24,560
most views

3076
02:29:32,399 --> 02:29:34,080
right sorry there was some you know we

3077
02:29:34,080 --> 02:29:35,680
were just preparing for the for the

3078
02:29:35,680 --> 02:29:37,760
sudden death uh part here so we're just

3079
02:29:37,760 --> 02:29:39,280
getting them set up

3080
02:29:39,280 --> 02:29:42,319
uh swapping out the the challenge

3081
02:29:42,319 --> 02:29:45,200
um and giving them a new simple

3082
02:29:45,200 --> 02:29:46,720
challenge and this challenge is gonna be

3083
02:29:46,720 --> 02:29:49,520
super simple i mean i barely know if

3084
02:29:49,520 --> 02:29:50,960
we're gonna have the time to like

3085
02:29:50,960 --> 02:29:53,600
commentate on what's gonna go on here uh

3086
02:29:53,600 --> 02:29:56,160
because i think we're picking our

3087
02:29:56,160 --> 02:29:59,359
simplest challenge in the in the stash

3088
02:29:59,359 --> 02:30:03,960
um yeah it's gonna be rough

3089
02:30:09,760 --> 02:30:11,520
okay so jordan is over with the players

3090
02:30:11,520 --> 02:30:12,720
explaining the

3091
02:30:12,720 --> 02:30:14,399
explaining does somebody in chat ask

3092
02:30:14,399 --> 02:30:17,760
what sudden death is um of

3093
02:30:17,760 --> 02:30:21,359
this is when the weapons come out

3094
02:30:21,359 --> 02:30:24,240
yes yes no this is when we see the first

3095
02:30:24,240 --> 02:30:27,520
blood right exactly no so the sudden

3096
02:30:27,520 --> 02:30:29,840
death is that we stop the current

3097
02:30:29,840 --> 02:30:30,880
challenge

3098
02:30:30,880 --> 02:30:32,880
uh and

3099
02:30:32,880 --> 02:30:34,479
we should have people not walking past

3100
02:30:34,479 --> 02:30:35,439
the camera

3101
02:30:35,439 --> 02:30:38,800
um but anyway

3102
02:30:38,960 --> 02:30:40,160
suddendev we stopped the current

3103
02:30:40,160 --> 02:30:42,160
challenge we swap it out completely new

3104
02:30:42,160 --> 02:30:45,600
challenge this new challenge is

3105
02:30:45,600 --> 02:30:47,439
supposed to be super simple it's going

3106
02:30:47,439 --> 02:30:50,800
to be like it's going to be fast

3107
02:30:50,800 --> 02:30:53,519
let's start now

3108
02:30:53,680 --> 02:30:55,280
and then they have the new challenge and

3109
02:30:55,280 --> 02:30:56,399
they're downloading it we're switching

3110
02:30:56,399 --> 02:30:58,399
over to the split view downloading the

3111
02:30:58,399 --> 02:30:59,920
challenge

3112
02:30:59,920 --> 02:31:01,280
and

3113
02:31:01,280 --> 02:31:02,479
yeah they're going to look at it and

3114
02:31:02,479 --> 02:31:05,359
this is going to be a slaughter

3115
02:31:05,359 --> 02:31:08,560
is this the format string thing

3116
02:31:13,200 --> 02:31:16,000
jordan hello i'm not sure sorry

3117
02:31:16,000 --> 02:31:17,600
yes still gives it a bucket uh i

3118
02:31:17,600 --> 02:31:19,680
actually don't know which uh sudden

3119
02:31:19,680 --> 02:31:22,960
death we had lined up for this one

3120
02:31:23,280 --> 02:31:27,359
right so we can switch over to

3121
02:31:27,359 --> 02:31:28,479
perf

3122
02:31:28,479 --> 02:31:30,720
sorry to ricky pig

3123
02:31:30,720 --> 02:31:32,240
and see just up

3124
02:31:32,240 --> 02:31:34,560
look at it here and

3125
02:31:34,560 --> 02:31:37,359
the it's about inputting some passwords

3126
02:31:37,359 --> 02:31:38,160
here

3127
02:31:38,160 --> 02:31:40,720
and you need to input your

3128
02:31:40,720 --> 02:31:42,640
logins you can see that they need to log

3129
02:31:42,640 --> 02:31:43,920
in with admin and correct towards

3130
02:31:43,920 --> 02:31:46,160
battery stable the uh classic cd

3131
02:31:46,160 --> 02:31:48,800
password joke right yes and then

3132
02:31:48,800 --> 02:31:50,319
is it just reading in shellcode and

3133
02:31:50,319 --> 02:31:52,560
executing it

3134
02:31:52,560 --> 02:31:54,479
is that what i saw i'm pretty sure that

3135
02:31:54,479 --> 02:31:56,399
yeah this one is like meant to be pure

3136
02:31:56,399 --> 02:31:57,920
speed

3137
02:31:57,920 --> 02:31:59,920
perfect root is already

3138
02:31:59,920 --> 02:32:02,080
opening google right we have some shell

3139
02:32:02,080 --> 02:32:04,319
code in there uh

3140
02:32:04,319 --> 02:32:05,600
and

3141
02:32:05,600 --> 02:32:07,680
uh they are

3142
02:32:07,680 --> 02:32:09,439
wow this is stressful so i think they

3143
02:32:09,439 --> 02:32:11,600
basically just they send uh admin

3144
02:32:11,600 --> 02:32:13,600
password or a username password and then

3145
02:32:13,600 --> 02:32:15,520
send shell code and it will be executed

3146
02:32:15,520 --> 02:32:17,520
so let's see who can do this first we

3147
02:32:17,520 --> 02:32:20,319
can see them copy copy pasting um

3148
02:32:20,319 --> 02:32:21,920
the username

3149
02:32:21,920 --> 02:32:24,399
uh so and then they so we can see here

3150
02:32:24,399 --> 02:32:26,240
i'm gonna switch over to rica payne

3151
02:32:26,240 --> 02:32:28,319
because you see very clearly in their

3152
02:32:28,319 --> 02:32:31,280
exploit script um actually you can see

3153
02:32:31,280 --> 02:32:31,920
it

3154
02:32:31,920 --> 02:32:34,160
clearly in both of them oh this is gonna

3155
02:32:34,160 --> 02:32:37,040
be rough uh i really hope the

3156
02:32:37,040 --> 02:32:38,800
flag submission thing

3157
02:32:38,800 --> 02:32:40,399
is oh oh the

3158
02:32:40,399 --> 02:32:43,760
the ls didn't work no right perfect

3159
02:32:43,760 --> 02:32:45,520
right switch over to perfect route and

3160
02:32:45,520 --> 02:32:47,439
see that there's something not wrong not

3161
02:32:47,439 --> 02:32:48,720
working with their

3162
02:32:48,720 --> 02:32:50,960
uh i think they need so they're afraid

3163
02:32:50,960 --> 02:32:52,560
they might have to

3164
02:32:52,560 --> 02:32:54,720
pad out the

3165
02:32:54,720 --> 02:32:57,840
shell code to be the size of the

3166
02:32:57,840 --> 02:32:59,359
you know input there we go yep that's

3167
02:32:59,359 --> 02:33:00,319
exactly what we're seeing we're seeing

3168
02:33:00,319 --> 02:33:01,439
the branding coming in yeah they're

3169
02:33:01,439 --> 02:33:03,680
padding it out

3170
02:33:03,680 --> 02:33:06,000
uh and then they're sending it and will

3171
02:33:06,000 --> 02:33:08,800
it yes there it is there's a shell

3172
02:33:08,800 --> 02:33:12,080
there it is we have a winner

3173
02:33:12,160 --> 02:33:14,880
congratulations to perfect roots

3174
02:33:14,880 --> 02:33:17,439
oh my god that was brutal that was very

3175
02:33:17,439 --> 02:33:19,600
very harsh yeah uh we got to go on a

3176
02:33:19,600 --> 02:33:22,160
break we got to get back to uh the uh

3177
02:33:22,160 --> 02:33:23,439
the teams to talk to them real quickly

3178
02:33:23,439 --> 02:33:24,800
and line up the final round we'll be

3179
02:33:24,800 --> 02:33:28,000
here in 30 minutes uh with the finals i

3180
02:33:28,000 --> 02:33:28,960
look forward to seeing you back here

3181
02:33:28,960 --> 02:33:32,839
then see ya

3182
02:33:36,240 --> 02:33:37,600
hmm

3183
02:33:37,600 --> 02:34:39,309
[Music]

3184
02:34:42,120 --> 02:34:49,019
[Music]

3185
02:34:52,160 --> 02:34:55,160
so

3186
02:34:58,650 --> 02:35:34,260
[Music]

3187
02:35:43,920 --> 02:35:46,920
so

3188
02:35:55,230 --> 02:35:58,430
[Music]

3189
02:36:01,040 --> 02:36:04,040
so

3190
02:36:05,380 --> 02:36:34,399
[Music]

3191
02:36:38,980 --> 02:36:54,010
[Music]

3192
02:37:06,960 --> 02:37:24,479
[Music]

3193
02:37:24,479 --> 02:37:27,479
so

3194
02:37:28,720 --> 02:37:35,128
[Music]

3195
02:37:37,600 --> 02:37:40,320
so

3196
02:37:40,320 --> 02:37:58,549
[Music]

3197
02:38:02,110 --> 02:38:15,380
[Music]

3198
02:38:18,390 --> 02:38:21,730
[Music]

3199
02:38:29,470 --> 02:39:09,039
[Music]

3200
02:39:12,319 --> 02:39:15,319
so

3201
02:39:19,000 --> 02:39:28,610
[Music]

3202
02:39:29,680 --> 02:39:30,680
so

3203
02:39:30,680 --> 02:40:21,390
[Music]

3204
02:40:21,390 --> 02:40:21,770
[Applause]

3205
02:40:21,770 --> 02:40:24,479
[Music]

3206
02:40:24,479 --> 02:40:26,320
so

3207
02:40:26,320 --> 02:40:29,520
[Music]

3208
02:40:38,160 --> 02:40:41,160
so

3209
02:40:44,230 --> 02:40:53,439
[Music]

3210
02:40:53,439 --> 02:40:56,439
so

3211
02:41:01,760 --> 02:41:10,419
[Music]

3212
02:41:12,890 --> 02:41:59,019
[Music]

3213
02:42:03,120 --> 02:42:06,090
so

3214
02:42:06,090 --> 02:42:10,429
[Music]

3215
02:42:14,620 --> 02:43:12,160
[Music]

3216
02:43:12,160 --> 02:43:15,160
so

3217
02:43:16,530 --> 02:44:18,280
[Music]

3218
02:44:19,439 --> 02:44:21,380
and then

3219
02:44:21,380 --> 02:45:14,819
[Music]

3220
02:45:29,410 --> 02:45:37,420
[Music]

3221
02:45:41,230 --> 02:45:47,359
[Music]

3222
02:45:47,680 --> 02:45:50,680
so

3223
02:45:51,190 --> 02:45:54,889
[Music]

3224
02:45:58,990 --> 02:46:02,289
[Music]

3225
02:46:05,160 --> 02:46:30,439
[Music]

3226
02:46:32,570 --> 02:46:57,699
[Music]

3227
02:47:02,090 --> 02:47:07,290
[Music]

3228
02:47:11,250 --> 02:47:14,360
[Music]

3229
02:47:16,750 --> 02:47:20,819
[Music]

3230
02:47:31,800 --> 02:47:36,900
[Music]

3231
02:47:38,910 --> 02:47:52,119
[Music]

3232
02:47:57,160 --> 02:48:15,530
[Music]

3233
02:48:17,720 --> 02:48:20,970
[Music]

3234
02:48:23,150 --> 02:48:39,309
[Music]

3235
02:48:41,730 --> 02:48:53,119
[Music]

3236
02:48:56,390 --> 02:48:59,510
[Music]

3237
02:49:03,360 --> 02:49:06,479
[Music]

3238
02:49:41,280 --> 02:49:46,200
[Music]

3239
02:49:56,240 --> 02:50:05,378
[Music]

3240
02:50:23,340 --> 02:50:43,110
[Music]

3241
02:50:50,750 --> 02:50:54,110
[Music]

3242
02:51:02,990 --> 02:51:06,039
[Music]

3243
02:51:20,870 --> 02:51:23,920
[Music]

3244
02:51:23,920 --> 02:51:26,920
so

3245
02:51:29,790 --> 02:51:35,469
[Music]

3246
02:51:42,190 --> 02:51:51,309
[Music]

3247
02:51:55,480 --> 02:51:59,739
[Music]

3248
02:52:06,090 --> 02:52:27,540
[Music]

3249
02:52:38,210 --> 02:52:41,390
[Music]

3250
02:52:48,170 --> 02:52:51,479
[Music]

3251
02:53:00,530 --> 02:53:10,169
[Music]

3252
02:53:43,900 --> 02:54:24,190
[Music]

3253
02:54:25,760 --> 02:54:28,760
so

3254
02:54:30,590 --> 02:54:36,479
[Music]

3255
02:54:53,660 --> 02:55:00,109
[Music]

3256
02:55:05,440 --> 02:55:08,629
[Music]

3257
02:55:15,130 --> 02:55:57,840
[Music]

3258
02:55:57,840 --> 02:55:59,920
you

3259
02:56:05,820 --> 02:56:09,029
[Music]

3260
02:56:25,359 --> 02:56:28,359
uh

3261
02:57:05,730 --> 02:57:25,410
[Music]

3262
02:57:26,960 --> 02:57:29,960
so

3263
02:57:33,580 --> 02:57:41,860
[Music]

3264
02:58:24,790 --> 02:58:32,309
[Music]

3265
02:58:38,800 --> 02:58:41,800
so

3266
02:59:13,220 --> 02:59:37,188
[Music]

3267
02:59:56,270 --> 03:00:09,919
[Music]

3268
03:00:14,880 --> 03:00:17,880
so

3269
03:00:22,470 --> 03:00:26,140
[Music]

3270
03:00:28,300 --> 03:00:41,910
[Music]

3271
03:00:41,910 --> 03:00:43,230
[Applause]

3272
03:00:43,230 --> 03:03:30,100
[Music]

3273
03:03:33,660 --> 03:03:38,319
[Music]

3274
03:03:45,200 --> 03:03:48,279
[Music]

3275
03:03:51,750 --> 03:03:57,879
[Music]

3276
03:04:01,130 --> 03:04:04,560
[Music]

3277
03:04:21,990 --> 03:05:21,600
[Music]

3278
03:05:38,890 --> 03:05:56,680
[Music]

3279
03:05:59,610 --> 03:06:02,689
[Music]

3280
03:06:07,900 --> 03:06:11,920
[Music]

3281
03:06:20,110 --> 03:06:22,560
[Music]

3282
03:06:22,560 --> 03:06:25,560
do

3283
03:06:30,150 --> 03:06:33,320
[Music]

3284
03:06:36,310 --> 03:06:54,110
[Music]

3285
03:06:54,110 --> 03:06:56,120
[Applause]

3286
03:06:56,120 --> 03:07:00,419
[Music]

3287
03:07:02,960 --> 03:07:05,960
do

3288
03:07:06,450 --> 03:07:15,520
[Music]

3289
03:07:15,520 --> 03:07:18,000
do

3290
03:07:18,000 --> 03:07:34,740
[Music]

3291
03:07:42,550 --> 03:07:45,640
[Music]

3292
03:08:08,180 --> 03:08:13,170
[Music]

3293
03:08:16,080 --> 03:08:21,229
[Music]

3294
03:08:25,730 --> 03:08:28,930
[Music]

3295
03:08:32,110 --> 03:08:37,679
[Music]

3296
03:08:41,780 --> 03:08:58,069
[Music]

3297
03:09:03,310 --> 03:09:38,080
[Music]

3298
03:09:38,080 --> 03:09:39,380
so

3299
03:09:39,380 --> 03:09:42,458
[Music]

3300
03:09:42,640 --> 03:09:43,200
[Applause]

3301
03:09:43,200 --> 03:09:53,270
[Music]

3302
03:09:56,860 --> 03:09:59,909
[Music]

3303
03:10:02,090 --> 03:10:24,729
[Music]

3304
03:10:31,570 --> 03:10:35,850
[Music]

3305
03:10:38,050 --> 03:10:45,279
[Music]

3306
03:10:45,279 --> 03:10:48,279
so

3307
03:10:52,070 --> 03:10:58,119
[Music]

3308
03:11:18,319 --> 03:11:20,150
do

3309
03:11:20,150 --> 03:11:29,929
[Music]

3310
03:11:33,300 --> 03:12:07,310
[Music]

3311
03:12:09,200 --> 03:12:12,200
so

3312
03:12:13,940 --> 03:12:33,710
[Music]

3313
03:12:33,710 --> 03:12:34,530
[Applause]

3314
03:12:34,530 --> 03:12:37,700
[Music]

3315
03:12:39,200 --> 03:12:42,200
so

3316
03:12:44,760 --> 03:12:45,610
[Music]

3317
03:12:45,610 --> 03:12:56,009
[Applause]

3318
03:12:57,439 --> 03:13:00,439
uh

3319
03:13:09,040 --> 03:13:10,310
me

3320
03:13:10,310 --> 03:13:19,909
[Music]

3321
03:13:24,220 --> 03:13:32,160
[Music]

3322
03:13:32,160 --> 03:13:35,160
do

3323
03:13:35,990 --> 03:14:30,160
[Music]

3324
03:14:30,160 --> 03:14:33,160
so

3325
03:14:33,220 --> 03:14:41,139
[Music]

3326
03:14:44,850 --> 03:15:12,149
[Music]

3327
03:15:13,120 --> 03:15:15,220
so

3328
03:15:15,220 --> 03:15:33,600
[Music]

3329
03:15:33,600 --> 03:15:35,790
foreign

3330
03:15:35,790 --> 03:15:44,429
[Music]

3331
03:15:48,420 --> 03:15:51,889
[Music]

3332
03:16:08,130 --> 03:16:19,559
[Music]

3333
03:16:24,110 --> 03:16:28,110
[Music]

3334
03:16:31,780 --> 03:16:36,149
[Music]

3335
03:16:38,270 --> 03:16:44,089
[Music]

3336
03:16:47,940 --> 03:16:52,229
[Music]

3337
03:16:54,300 --> 03:16:57,340
[Music]

3338
03:16:57,430 --> 03:16:59,990
[Applause]

3339
03:16:59,990 --> 03:17:05,119
[Music]

3340
03:17:08,470 --> 03:17:12,340
[Music]

3341
03:17:13,590 --> 03:17:16,170
[Applause]

3342
03:17:16,170 --> 03:17:28,770
[Music]

3343
03:17:31,710 --> 03:17:37,070
[Music]

3344
03:17:39,870 --> 03:17:45,540
[Music]

3345
03:17:59,730 --> 03:18:23,329
[Music]

3346
03:18:26,960 --> 03:18:29,960
so

3347
03:18:32,480 --> 03:18:35,689
[Music]

3348
03:18:38,260 --> 03:18:48,389
[Music]

3349
03:18:51,420 --> 03:18:54,399
[Music]

3350
03:18:54,399 --> 03:18:57,399
so

3351
03:19:05,359 --> 03:19:08,080
hello and welcome back to our final

3352
03:19:08,080 --> 03:19:10,239
event of a very long weekend we are

3353
03:19:10,239 --> 03:19:12,160
super excited to be here we're super

3354
03:19:12,160 --> 03:19:13,760
excited to be looking at the best two

3355
03:19:13,760 --> 03:19:14,800
teams

3356
03:19:14,800 --> 03:19:16,560
uh are you ready you said you were

3357
03:19:16,560 --> 03:19:18,000
nervous the second ago oh yeah i mean

3358
03:19:18,000 --> 03:19:20,160
this is like the you know the

3359
03:19:20,160 --> 03:19:21,920
the final match like this is when it all

3360
03:19:21,920 --> 03:19:23,279
comes together

3361
03:19:23,279 --> 03:19:24,960
so we've had we've had perfect route

3362
03:19:24,960 --> 03:19:26,880
we've had starbug they've both battled

3363
03:19:26,880 --> 03:19:28,319
through three other rounds to make it

3364
03:19:28,319 --> 03:19:30,080
here to this final event

3365
03:19:30,080 --> 03:19:31,359
and uh we're going to get the game

3366
03:19:31,359 --> 03:19:32,880
started to to get the competitors are

3367
03:19:32,880 --> 03:19:34,319
nervous they're going to go uh for

3368
03:19:34,319 --> 03:19:36,640
context the game is over the defcon ctf

3369
03:19:36,640 --> 03:19:39,200
itself is ended uh this is the final bit

3370
03:19:39,200 --> 03:19:40,479
of points that anyone can get in this

3371
03:19:40,479 --> 03:19:41,680
event before it's going to be tallied

3372
03:19:41,680 --> 03:19:43,600
for the awards summary later today so

3373
03:19:43,600 --> 03:19:45,120
let's do it everybody we're going to

3374
03:19:45,120 --> 03:19:47,200
kick it off five

3375
03:19:47,200 --> 03:19:48,080
four

3376
03:19:48,080 --> 03:19:49,120
three

3377
03:19:49,120 --> 03:19:50,000
two

3378
03:19:50,000 --> 03:19:52,720
one go

3379
03:19:52,720 --> 03:19:55,359
and let's run rip so let's take a look

3380
03:19:55,359 --> 03:19:57,279
at the the teams and what they're up to

3381
03:19:57,279 --> 03:19:58,560
uh we're gonna need a reset on our

3382
03:19:58,560 --> 03:20:00,640
capture card over here capture card

3383
03:20:00,640 --> 03:20:02,080
reset please

3384
03:20:02,080 --> 03:20:03,840
yes we've got one that's not working but

3385
03:20:03,840 --> 03:20:04,880
in the meantime

3386
03:20:04,880 --> 03:20:07,439
we'll just go to perfect route uh and

3387
03:20:07,439 --> 03:20:09,920
watch what they're doing and uh we can

3388
03:20:09,920 --> 03:20:11,439
see that they're immediately going into

3389
03:20:11,439 --> 03:20:13,600
ida to look at the code oh we've got

3390
03:20:13,600 --> 03:20:14,640
different themes at least so now we've

3391
03:20:14,640 --> 03:20:17,200
got our black and white themes yes

3392
03:20:17,200 --> 03:20:18,640
both doing the exact same thing looking

3393
03:20:18,640 --> 03:20:22,640
at both both of their uh their systems

3394
03:20:22,640 --> 03:20:24,239
and popping open their their default

3395
03:20:24,239 --> 03:20:25,520
template scripts what is the name of

3396
03:20:25,520 --> 03:20:26,640
this challenge that we're that we're

3397
03:20:26,640 --> 03:20:28,560
looking at so we're looking at the f in

3398
03:20:28,560 --> 03:20:30,479
the stack right we actually had several

3399
03:20:30,479 --> 03:20:32,399
challenges and internally named after

3400
03:20:32,399 --> 03:20:34,160
that it was f1 stack and another f in

3401
03:20:34,160 --> 03:20:35,279
the stack we changed the name of that

3402
03:20:35,279 --> 03:20:37,200
one but this is the original f in the

3403
03:20:37,200 --> 03:20:39,040
stack uh you know

3404
03:20:39,040 --> 03:20:40,160
uh

3405
03:20:40,160 --> 03:20:40,840
it

3406
03:20:40,840 --> 03:20:44,640
is um so it's a reference obviously to

3407
03:20:44,640 --> 03:20:46,960
the the meme like yeah the chat but on

3408
03:20:46,960 --> 03:20:49,920
the stack uh right so does it does it

3409
03:20:49,920 --> 03:20:50,960
actually mean that we're looking at like

3410
03:20:50,960 --> 03:20:52,640
a stack based buffer overflow or is that

3411
03:20:52,640 --> 03:20:54,960
just kind of a troll uh on the name yeah

3412
03:20:54,960 --> 03:20:57,200
um uh not entirely sure we have a menu

3413
03:20:57,200 --> 03:20:59,040
here with three different options four

3414
03:20:59,040 --> 03:21:00,479
different options there's like you can

3415
03:21:00,479 --> 03:21:01,760
load a file

3416
03:21:01,760 --> 03:21:04,319
uh what else was there

3417
03:21:04,319 --> 03:21:06,239
and then uh you can when you do that

3418
03:21:06,239 --> 03:21:07,359
there's like a file name there's a

3419
03:21:07,359 --> 03:21:10,800
called f stat or l stat actually uh so

3420
03:21:10,800 --> 03:21:11,680
yeah

3421
03:21:11,680 --> 03:21:12,640
that was interesting actually let's

3422
03:21:12,640 --> 03:21:13,840
let's go ahead and take a look at that

3423
03:21:13,840 --> 03:21:16,560
um so that you said they it was f-stat

3424
03:21:16,560 --> 03:21:19,680
or l-stat but uh if we look closely

3425
03:21:19,680 --> 03:21:22,399
let's let that come up again

3426
03:21:22,399 --> 03:21:24,800
uh so again they're moving so fast but

3427
03:21:24,800 --> 03:21:26,080
if we notice

3428
03:21:26,080 --> 03:21:28,560
um there's a call to one of them but the

3429
03:21:28,560 --> 03:21:31,200
error message says the other right

3430
03:21:31,200 --> 03:21:33,200
and that's so that is it's interesting

3431
03:21:33,200 --> 03:21:34,319
interesting that's the kind of thing is

3432
03:21:34,319 --> 03:21:35,920
that like you know as of uh there we go

3433
03:21:35,920 --> 03:21:37,920
we're getting some f's thank you nice

3434
03:21:37,920 --> 03:21:38,800
chat

3435
03:21:38,800 --> 03:21:40,960
love to see it there we go so s in the

3436
03:21:40,960 --> 03:21:43,600
chat four f's in the stack well maybe

3437
03:21:43,600 --> 03:21:44,800
maybe we do that once it once it gets

3438
03:21:44,800 --> 03:21:46,560
solved yeah yeah yeah exactly one once

3439
03:21:46,560 --> 03:21:47,600
they actually beat it right now the

3440
03:21:47,600 --> 03:21:50,239
challenge is standing tall yeah um it's

3441
03:21:50,239 --> 03:21:51,920
a good idea and by the way the reference

3442
03:21:51,920 --> 03:21:53,920
there to defcon ctf is cancelled

3443
03:21:53,920 --> 03:21:55,359
defcon is cancelled it's very much a

3444
03:21:55,359 --> 03:21:56,880
meme if you've not been to defcon before

3445
03:21:56,880 --> 03:21:58,239
every year there's a joke that it is

3446
03:21:58,239 --> 03:21:59,279
cancelled

3447
03:21:59,279 --> 03:22:01,359
uh uh excellent glad to see live

3448
03:22:01,359 --> 03:22:03,680
overflow in chat as well uh looking

3449
03:22:03,680 --> 03:22:05,439
forward to hi everybody on live

3450
03:22:05,439 --> 03:22:06,880
overflow's twitch stream i know he's

3451
03:22:06,880 --> 03:22:09,680
been watching all weekend long with us

3452
03:22:09,680 --> 03:22:11,120
even on the times where he wasn't uh

3453
03:22:11,120 --> 03:22:13,200
chatting with us uh live right so we had

3454
03:22:13,200 --> 03:22:15,760
him as a commentator at one of our

3455
03:22:15,760 --> 03:22:17,760
three guest commentators we had one

3456
03:22:17,760 --> 03:22:19,680
person from nautilus institute lightning

3457
03:22:19,680 --> 03:22:22,479
here on site and we had gamosa labs and

3458
03:22:22,479 --> 03:22:25,120
uh live overflow uh calling in remotely

3459
03:22:25,120 --> 03:22:27,279
it's been uh really adding to the today

3460
03:22:27,279 --> 03:22:29,200
in fact we might wanna uh if we can get

3461
03:22:29,200 --> 03:22:31,680
the the title below our names fixed uh

3462
03:22:31,680 --> 03:22:32,800
we'll we'll

3463
03:22:32,800 --> 03:22:34,399
get that correct awesome but super minor

3464
03:22:34,399 --> 03:22:36,080
but yeah we can go to see starbucks you

3465
03:22:36,080 --> 03:22:38,239
can see that they are uh just dumping

3466
03:22:38,239 --> 03:22:40,319
out etc password so you can see here in

3467
03:22:40,319 --> 03:22:41,520
the menu they can load the file they can

3468
03:22:41,520 --> 03:22:42,880
print the loaded file they can unload

3469
03:22:42,880 --> 03:22:44,960
the last file and they have an extremely

3470
03:22:44,960 --> 03:22:47,840
convenient call rax oh well that's a

3471
03:22:47,840 --> 03:22:50,319
nice nice option that was very handy of

3472
03:22:50,319 --> 03:22:51,680
someone right

3473
03:22:51,680 --> 03:22:52,479
so

3474
03:22:52,479 --> 03:22:54,479
i would assume this means that you want

3475
03:22:54,479 --> 03:22:55,359
to

3476
03:22:55,359 --> 03:22:57,680
control the value in rax

3477
03:22:57,680 --> 03:22:59,840
uh we're looking at uh reading of proc

3478
03:22:59,840 --> 03:23:01,680
self mem uh

3479
03:23:01,680 --> 03:23:02,399
so

3480
03:23:02,399 --> 03:23:05,519
we're looking at interactions

3481
03:23:05,920 --> 03:23:07,279
okay yeah i thought i was freaked out

3482
03:23:07,279 --> 03:23:08,399
for a second i thought they had a shell

3483
03:23:08,399 --> 03:23:10,319
instantly right but it looked like you

3484
03:23:10,319 --> 03:23:12,399
know they were looking at uh proc self

3485
03:23:12,399 --> 03:23:15,279
ft zero so like opening standard in as a

3486
03:23:15,279 --> 03:23:17,359
file you can do a bunch of uh

3487
03:23:17,359 --> 03:23:19,040
stuff there yep uh they were looking at

3488
03:23:19,040 --> 03:23:21,439
proc self mem also an interesting file

3489
03:23:21,439 --> 03:23:23,760
the whole proc like pseudo file system

3490
03:23:23,760 --> 03:23:25,359
is pretty interesting in a lot of these

3491
03:23:25,359 --> 03:23:26,720
challenges yeah absolutely it comes in

3492
03:23:26,720 --> 03:23:29,200
very handy so yes uh the reference there

3493
03:23:29,200 --> 03:23:31,760
uh um everybody is confirming defcon ctf

3494
03:23:31,760 --> 03:23:34,160
the main cftf did end a little bit early

3495
03:23:34,160 --> 03:23:35,680
i don't know the full story but we heard

3496
03:23:35,680 --> 03:23:37,680
from the nautilus institute that

3497
03:23:37,680 --> 03:23:39,920
um there was uh some some issues that

3498
03:23:39,920 --> 03:23:41,600
they had to close down one hour earlier

3499
03:23:41,600 --> 03:23:43,680
than expected so normally the intended

3500
03:23:43,680 --> 03:23:46,160
end of the ctf this year was 2pm

3501
03:23:46,160 --> 03:23:47,840
uh but they ended up slightly early

3502
03:23:47,840 --> 03:23:50,000
which means this is the only game left

3503
03:23:50,000 --> 03:23:51,279
this is the only points that people can

3504
03:23:51,279 --> 03:23:52,239
be getting

3505
03:23:52,239 --> 03:23:53,760
and we've only got two teams that are in

3506
03:23:53,760 --> 03:23:55,040
running we've got perfect route and

3507
03:23:55,040 --> 03:23:56,640
we've got team starbug

3508
03:23:56,640 --> 03:24:00,000
and uh this could have this definitely

3509
03:24:00,000 --> 03:24:01,840
could change the destiny of perfect

3510
03:24:01,840 --> 03:24:03,439
route in terms of making it into the top

3511
03:24:03,439 --> 03:24:05,120
teams here i don't think it's going to

3512
03:24:05,120 --> 03:24:06,800
make them into first having seen the

3513
03:24:06,800 --> 03:24:08,479
scoreboard right before open dark it

3514
03:24:08,479 --> 03:24:09,520
probably wouldn't get them all the way

3515
03:24:09,520 --> 03:24:11,840
there although it is worth noting uh

3516
03:24:11,840 --> 03:24:14,000
there was actually uh an incident

3517
03:24:14,000 --> 03:24:14,960
earlier on one of the things that

3518
03:24:14,960 --> 03:24:17,040
happens a lot with um

3519
03:24:17,040 --> 03:24:18,399
with these kind of ctfs is you're really

3520
03:24:18,399 --> 03:24:20,000
worried about like fair play and what's

3521
03:24:20,000 --> 03:24:21,120
appropriate and appropriate and there

3522
03:24:21,120 --> 03:24:22,960
was unfortunately one of the members on

3523
03:24:22,960 --> 03:24:24,239
perfect route was fork bombing one of

3524
03:24:24,239 --> 03:24:25,439
the other boxes maybe they weren't aware

3525
03:24:25,439 --> 03:24:27,439
of kind of the ctf culture and when

3526
03:24:27,439 --> 03:24:29,200
their team caught it they they

3527
03:24:29,200 --> 03:24:30,720
specifically like said hey we're sorry

3528
03:24:30,720 --> 03:24:31,760
one of our team members didn't know this

3529
03:24:31,760 --> 03:24:33,200
was against the rules they were

3530
03:24:33,200 --> 03:24:34,800
penalized a little bit for that between

3531
03:24:34,800 --> 03:24:36,319
that penalty

3532
03:24:36,319 --> 03:24:37,920
plus the amount that they could get by

3533
03:24:37,920 --> 03:24:40,239
winning if they win this that would have

3534
03:24:40,239 --> 03:24:41,439
maybe been enough to bring them all the

3535
03:24:41,439 --> 03:24:44,080
way into first from that uh fourth uh

3536
03:24:44,080 --> 03:24:45,920
position that they were in uh but i

3537
03:24:45,920 --> 03:24:47,520
think with that penalty it will they

3538
03:24:47,520 --> 03:24:48,800
would probably end up somewhere in the

3539
03:24:48,800 --> 03:24:50,640
the second uh place range even if they

3540
03:24:50,640 --> 03:24:52,479
win so probably not going to upset the

3541
03:24:52,479 --> 03:24:54,239
entire competition just as a result of

3542
03:24:54,239 --> 03:24:55,279
this event

3543
03:24:55,279 --> 03:24:57,120
um but it's going to shuffle around it's

3544
03:24:57,120 --> 03:24:58,560
going to change the standings yeah no

3545
03:24:58,560 --> 03:25:00,000
matter what happens in fact even if it

3546
03:25:00,000 --> 03:25:01,279
ends up being team starbucks it's going

3547
03:25:01,279 --> 03:25:03,040
to jump them way up in the board we

3548
03:25:03,040 --> 03:25:04,399
should remember also that it's not only

3549
03:25:04,399 --> 03:25:05,920
the winner who gets points like there is

3550
03:25:05,920 --> 03:25:07,600
like a point distribution from for all

3551
03:25:07,600 --> 03:25:10,560
the teams in this tournament and uh as i

3552
03:25:10,560 --> 03:25:12,479
said they will probably not at this

3553
03:25:12,479 --> 03:25:14,000
point change the winner but it will

3554
03:25:14,000 --> 03:25:16,080
shuffle around the standings uh i want

3555
03:25:16,080 --> 03:25:18,080
to go and look at

3556
03:25:18,080 --> 03:25:20,800
star bugs because i was seeing some

3557
03:25:20,800 --> 03:25:22,160
interesting stuff there they're trying

3558
03:25:22,160 --> 03:25:24,000
to play around with the file system like

3559
03:25:24,000 --> 03:25:25,359
what interesting file could they be

3560
03:25:25,359 --> 03:25:26,479
looking at

3561
03:25:26,479 --> 03:25:27,520
um

3562
03:25:27,520 --> 03:25:29,279
i if i remember correctly like the

3563
03:25:29,279 --> 03:25:32,000
intended solution involves like a sim

3564
03:25:32,000 --> 03:25:33,680
link or something like you're supposed

3565
03:25:33,680 --> 03:25:34,640
to

3566
03:25:34,640 --> 03:25:37,040
open a sim link and then like close it

3567
03:25:37,040 --> 03:25:39,200
to get some kind of uninitialized memory

3568
03:25:39,200 --> 03:25:41,760
or something like this is this uh

3569
03:25:41,760 --> 03:25:44,080
i i know that yeah i've been i've i've

3570
03:25:44,080 --> 03:25:46,000
heard that it is involved with simulink

3571
03:25:46,000 --> 03:25:47,200
and that's the difference between that

3572
03:25:47,200 --> 03:25:50,720
lsat and that f-stat uh calls all right

3573
03:25:50,720 --> 03:25:53,920
link stat file stats uh that's i was

3574
03:25:53,920 --> 03:25:55,680
actually gonna ask about what the

3575
03:25:55,680 --> 03:25:57,680
difference there uh as i

3576
03:25:57,680 --> 03:25:59,600
you know did not remember this so so the

3577
03:25:59,600 --> 03:26:01,600
intended there i believe is in f-stat

3578
03:26:01,600 --> 03:26:03,120
which if you call it on a sim link we'll

3579
03:26:03,120 --> 03:26:04,880
give you the file it's pointed at the

3580
03:26:04,880 --> 03:26:06,560
ultimate actual file

3581
03:26:06,560 --> 03:26:09,040
but if you use lstat you're going to get

3582
03:26:09,040 --> 03:26:10,560
just the sim link information right

3583
03:26:10,560 --> 03:26:11,520
right so

3584
03:26:11,520 --> 03:26:13,920
that's i think the difference and one of

3585
03:26:13,920 --> 03:26:15,200
the changes again we've talked a lot

3586
03:26:15,200 --> 03:26:17,120
about how getting the difficulty right

3587
03:26:17,120 --> 03:26:19,359
on these can be can be initial

3588
03:26:19,359 --> 03:26:20,399
um

3589
03:26:20,399 --> 03:26:21,359
one of the things that we did during

3590
03:26:21,359 --> 03:26:23,040
testing was realize hey let's make this

3591
03:26:23,040 --> 03:26:24,560
a little bit more obvious that this is

3592
03:26:24,560 --> 03:26:26,239
intended so that's why the error message

3593
03:26:26,239 --> 03:26:28,239
that was in there just said before stat

3594
03:26:28,239 --> 03:26:30,160
failed and now it says specifically

3595
03:26:30,160 --> 03:26:32,160
f-stat failed right but that was as you

3596
03:26:32,160 --> 03:26:33,520
said that you know earlier when you saw

3597
03:26:33,520 --> 03:26:35,200
the call that's not the function that's

3598
03:26:35,200 --> 03:26:36,960
called right so hopefully it's a little

3599
03:26:36,960 --> 03:26:39,200
bit subtle but it's a hint

3600
03:26:39,200 --> 03:26:40,720
it's a hit that's kind of baked into the

3601
03:26:40,720 --> 03:26:42,319
challenge hopefully it's sufficient and

3602
03:26:42,319 --> 03:26:44,720
it gets them uh what they need

3603
03:26:44,720 --> 03:26:46,399
uh we'll see i still love the name of

3604
03:26:46,399 --> 03:26:47,680
that menu choice too extremely

3605
03:26:47,680 --> 03:26:49,840
convenient color yeah yeah yeah it's a

3606
03:26:49,840 --> 03:26:51,600
little tongue-in-cheek it's a little uh

3607
03:26:51,600 --> 03:26:53,600
yes we've been like you know because we

3608
03:26:53,600 --> 03:26:54,720
want to make these challenges like

3609
03:26:54,720 --> 03:26:56,080
simple enough that you can solve it very

3610
03:26:56,080 --> 03:26:56,960
quickly

3611
03:26:56,960 --> 03:26:58,960
we have been like putting in like a bit

3612
03:26:58,960 --> 03:27:02,479
artificial uh gadgets and the aspects of

3613
03:27:02,479 --> 03:27:04,319
the of the programs here to to make them

3614
03:27:04,319 --> 03:27:07,120
easier to actually exploit

3615
03:27:07,120 --> 03:27:08,800
so let's just see if we can get caught

3616
03:27:08,800 --> 03:27:10,399
up and get a sense of where everybody's

3617
03:27:10,399 --> 03:27:12,479
at i don't know that anybody yet it

3618
03:27:12,479 --> 03:27:15,279
knows exactly what they're doing i don't

3619
03:27:15,279 --> 03:27:17,439
think so either i haven't seen like i

3620
03:27:17,439 --> 03:27:19,200
haven't seen any crashes i haven't seen

3621
03:27:19,200 --> 03:27:20,560
any like weird behavior yet i think

3622
03:27:20,560 --> 03:27:22,160
they're still like exploring the program

3623
03:27:22,160 --> 03:27:24,239
trying to figure out what's going on you

3624
03:27:24,239 --> 03:27:25,920
could see their exploit in the exploit

3625
03:27:25,920 --> 03:27:28,319
script they're trying to like uh you

3626
03:27:28,319 --> 03:27:29,840
know start a build up that kind of like

3627
03:27:29,840 --> 03:27:31,279
template we've talked about before on

3628
03:27:31,279 --> 03:27:33,200
the stream like building abstractions

3629
03:27:33,200 --> 03:27:34,720
around those like interactions in the

3630
03:27:34,720 --> 03:27:36,640
program so that you can just easily

3631
03:27:36,640 --> 03:27:38,640
uh then put this these building blocks

3632
03:27:38,640 --> 03:27:41,359
together into an exploit

3633
03:27:41,359 --> 03:27:42,800
yeah and i will point out again these

3634
03:27:42,800 --> 03:27:45,200
are the top players

3635
03:27:45,200 --> 03:27:46,800
in what is already a collection of the

3636
03:27:46,800 --> 03:27:49,120
top players in the world right and so

3637
03:27:49,120 --> 03:27:50,880
this uh i think with the one the lesson

3638
03:27:50,880 --> 03:27:52,800
we found is that the further along we

3639
03:27:52,800 --> 03:27:54,720
make it in this this competition the

3640
03:27:54,720 --> 03:27:56,239
harder it is to see what they're doing

3641
03:27:56,239 --> 03:27:58,399
because they move so quickly yeah that

3642
03:27:58,399 --> 03:28:00,640
we need to freeze frame we need to pause

3643
03:28:00,640 --> 03:28:02,239
uh and one of these i like yeah we'd

3644
03:28:02,239 --> 03:28:03,520
love to do next year is actually bring

3645
03:28:03,520 --> 03:28:05,040
them in for commentary afterwards have a

3646
03:28:05,040 --> 03:28:06,479
little debrief session but we kind of

3647
03:28:06,479 --> 03:28:07,920
got to balance how much of their time we

3648
03:28:07,920 --> 03:28:09,920
take up since we are going concurrently

3649
03:28:09,920 --> 03:28:11,520
with the real event but this is part of

3650
03:28:11,520 --> 03:28:13,200
a competition it's a very prestigious

3651
03:28:13,200 --> 03:28:15,200
competition all the teams are here they

3652
03:28:15,200 --> 03:28:16,640
really really want to win

3653
03:28:16,640 --> 03:28:19,600
uh they uh get like you know the glory

3654
03:28:19,600 --> 03:28:21,920
of winning this the defcon ctf they are

3655
03:28:21,920 --> 03:28:24,239
awarded black badges right black badges

3656
03:28:24,239 --> 03:28:26,000
to the winning team every it is the only

3657
03:28:26,000 --> 03:28:27,840
event that is that has gotten

3658
03:28:27,840 --> 03:28:29,760
consistently eight back badges every

3659
03:28:29,760 --> 03:28:31,840
year normal events get one maybe or

3660
03:28:31,840 --> 03:28:33,920
maybe two and so this is like the

3661
03:28:33,920 --> 03:28:36,000
biggest pinnacle of all and there are

3662
03:28:36,000 --> 03:28:37,359
dozens or hundreds maybe even of

3663
03:28:37,359 --> 03:28:38,800
competitions if you can all the little

3664
03:28:38,800 --> 03:28:40,880
challenges all over the event there are

3665
03:28:40,880 --> 03:28:42,239
tons and tons of things here at def con

3666
03:28:42,239 --> 03:28:44,640
but this is the pinnacle and so we did

3667
03:28:44,640 --> 03:28:46,160
our best to try to like

3668
03:28:46,160 --> 03:28:49,920
integrate within the ctf but not uh

3669
03:28:49,920 --> 03:28:51,520
not take too much away from it right

3670
03:28:51,520 --> 03:28:52,960
we've got the best people up here we're

3671
03:28:52,960 --> 03:28:54,399
only here for a maximum of about four

3672
03:28:54,399 --> 03:28:56,479
hours each uh and that's you know over

3673
03:28:56,479 --> 03:28:57,920
the course of like a three-day event i

3674
03:28:57,920 --> 03:29:01,040
think the best the best we could do yes

3675
03:29:01,040 --> 03:29:02,960
and uh i mean overall the defcon ctf

3676
03:29:02,960 --> 03:29:04,560
like within the ctf community it's like

3677
03:29:04,560 --> 03:29:06,800
one of those like i would say top five

3678
03:29:06,800 --> 03:29:09,840
or so events of the year of the year

3679
03:29:09,840 --> 03:29:10,880
and it's certainly one of the most

3680
03:29:10,880 --> 03:29:13,920
longest running cts for sure

3681
03:29:13,920 --> 03:29:16,000
consistency uh

3682
03:29:16,000 --> 03:29:18,319
it's probably like the the

3683
03:29:18,319 --> 03:29:20,160
the best known or maybe the only known

3684
03:29:20,160 --> 03:29:21,920
like outside of like the ctf commune

3685
03:29:21,920 --> 03:29:23,520
like you know i have actually had people

3686
03:29:23,520 --> 03:29:25,760
like recognize defcon ctf if i'm wearing

3687
03:29:25,760 --> 03:29:27,200
like my my leather jacket so actually

3688
03:29:27,200 --> 03:29:28,239
it's one of the other things is that if

3689
03:29:28,239 --> 03:29:29,600
the winning team usually gets a leather

3690
03:29:29,600 --> 03:29:31,120
jacket or at least they have in the past

3691
03:29:31,120 --> 03:29:32,319
i don't know if they still still do that

3692
03:29:32,319 --> 03:29:33,840
but you would get like these defcon

3693
03:29:33,840 --> 03:29:35,040
branded leather jackets which doesn't

3694
03:29:35,040 --> 03:29:36,960
mean a lot of good in florida but yeah

3695
03:29:36,960 --> 03:29:38,479
occasionally i get a chance to wear it

3696
03:29:38,479 --> 03:29:40,640
right

3697
03:29:40,640 --> 03:29:42,239
so

3698
03:29:42,239 --> 03:29:45,359
switching over to starbucks again we can

3699
03:29:45,359 --> 03:29:47,520
see here that they're looking at

3700
03:29:47,520 --> 03:29:49,920
s maps which

3701
03:29:49,920 --> 03:29:52,160
i don't even know what that is what is

3702
03:29:52,160 --> 03:29:54,640
clock self s maps yes i don't know

3703
03:29:54,640 --> 03:29:56,560
either like maps will show you the

3704
03:29:56,560 --> 03:29:57,760
memory mapping which is actually what

3705
03:29:57,760 --> 03:29:59,120
perfectrt is doing right now they did

3706
03:29:59,120 --> 03:30:00,800
just that in their script they leaked

3707
03:30:00,800 --> 03:30:02,319
out rights of maps you can see there

3708
03:30:02,319 --> 03:30:03,920
they're looking at like a whole bunch of

3709
03:30:03,920 --> 03:30:06,000
uh other mappings and stuff so they're

3710
03:30:06,000 --> 03:30:07,760
they're playing around with this i maybe

3711
03:30:07,760 --> 03:30:08,960
i don't know if they like looking for

3712
03:30:08,960 --> 03:30:11,040
something specific or

3713
03:30:11,040 --> 03:30:11,920
uh

3714
03:30:11,920 --> 03:30:13,600
just checking around a bit to see what

3715
03:30:13,600 --> 03:30:15,600
they can find i mean certainly with that

3716
03:30:15,600 --> 03:30:18,960
callrax right or uh that they're given

3717
03:30:18,960 --> 03:30:22,080
um extremely suspicious uh menu option

3718
03:30:22,080 --> 03:30:23,680
uh it makes sense that they're in their

3719
03:30:23,680 --> 03:30:25,840
script they're gonna they might want to

3720
03:30:25,840 --> 03:30:27,920
um understand the base addresses so that

3721
03:30:27,920 --> 03:30:29,279
they can shift and adjust an actual

3722
03:30:29,279 --> 03:30:30,800
pointer where something is loaded so for

3723
03:30:30,800 --> 03:30:32,239
sure combining those i think makes a lot

3724
03:30:32,239 --> 03:30:34,080
of sense but there's right still you

3725
03:30:34,080 --> 03:30:35,439
need to break that down and then into

3726
03:30:35,439 --> 03:30:36,720
sub goals like you know that the end

3727
03:30:36,720 --> 03:30:38,720
goal is to control the value of this

3728
03:30:38,720 --> 03:30:40,479
register but like where are you going to

3729
03:30:40,479 --> 03:30:41,680
point it right where you're going to

3730
03:30:41,680 --> 03:30:43,840
point it and how do you get there yes

3731
03:30:43,840 --> 03:30:45,359
and i think they know where they're

3732
03:30:45,359 --> 03:30:46,319
going to point it by reading the

3733
03:30:46,319 --> 03:30:47,600
products of maps i think they both kind

3734
03:30:47,600 --> 03:30:49,040
of can figure that out they can figure

3735
03:30:49,040 --> 03:30:50,479
out the offsets they can find this stuff

3736
03:30:50,479 --> 03:30:51,840
and i don't remember is there a win

3737
03:30:51,840 --> 03:30:52,800
function

3738
03:30:52,800 --> 03:30:54,479
in this binary i don't remember if we've

3739
03:30:54,479 --> 03:30:57,039
seen that

3740
03:30:57,359 --> 03:30:58,960
if if it exists

3741
03:30:58,960 --> 03:31:00,399
does a wind function exist in this

3742
03:31:00,399 --> 03:31:02,160
binary i'm asking our producer does a

3743
03:31:02,160 --> 03:31:04,960
win function exist in this one

3744
03:31:04,960 --> 03:31:07,359
i don't know that it does um but we're

3745
03:31:07,359 --> 03:31:08,319
going to we're going to double check on

3746
03:31:08,319 --> 03:31:09,760
that i haven't announced on this very

3747
03:31:09,760 --> 03:31:11,680
shortly

3748
03:31:11,680 --> 03:31:13,840
in the meantime

3749
03:31:13,840 --> 03:31:16,399
we can see that perfect roots they are

3750
03:31:16,399 --> 03:31:17,840
yes perfect root is still the same

3751
03:31:17,840 --> 03:31:21,040
player they have not swapped out

3752
03:31:25,279 --> 03:31:26,479
okay

3753
03:31:26,479 --> 03:31:27,600
so

3754
03:31:27,600 --> 03:31:30,560
there are uh

3755
03:31:30,560 --> 03:31:32,319
they're in the binary there is not a

3756
03:31:32,319 --> 03:31:33,840
traditional win function the way we've

3757
03:31:33,840 --> 03:31:35,120
seen other ones where it's literally

3758
03:31:35,120 --> 03:31:37,600
just a system of bin sh which is you

3759
03:31:37,600 --> 03:31:38,800
could just call it and immediately get a

3760
03:31:38,800 --> 03:31:40,319
shell with a way that we've you know

3761
03:31:40,319 --> 03:31:41,760
these challenges have standard input

3762
03:31:41,760 --> 03:31:43,760
wired up to the network socket teams are

3763
03:31:43,760 --> 03:31:46,239
connecting to

3764
03:31:46,399 --> 03:31:48,399
but you can either hit one gadget or

3765
03:31:48,399 --> 03:31:49,760
there's actually a component in the

3766
03:31:49,760 --> 03:31:51,200
binary itself

3767
03:31:51,200 --> 03:31:52,880
that has a syscall available that's kind

3768
03:31:52,880 --> 03:31:54,960
of intended as another potential target

3769
03:31:54,960 --> 03:31:56,640
right and that's actually a good way to

3770
03:31:56,640 --> 03:31:58,800
to make it so that teams can

3771
03:31:58,800 --> 03:32:00,720
um that we can make sure the difficulty

3772
03:32:00,720 --> 03:32:01,760
is intended to be a little lower if

3773
03:32:01,760 --> 03:32:03,359
there's only exactly one path through

3774
03:32:03,359 --> 03:32:06,000
the binary

3775
03:32:06,160 --> 03:32:07,600
it decreases the odds that somebody's

3776
03:32:07,600 --> 03:32:08,800
gonna get to it in time so having a

3777
03:32:08,800 --> 03:32:10,160
couple of different sort of parallel

3778
03:32:10,160 --> 03:32:12,560
paths is often a nice way to

3779
03:32:12,560 --> 03:32:14,479
uh to make these accessible so okay

3780
03:32:14,479 --> 03:32:16,160
looking at i say we're looking at a

3781
03:32:16,160 --> 03:32:18,160
perfect uh perfect route i almost had

3782
03:32:18,160 --> 03:32:20,720
perfect blue which again

3783
03:32:20,720 --> 03:32:22,560
is one of the components yeah so again

3784
03:32:22,560 --> 03:32:24,399
perfect blue and rudimentary are the

3785
03:32:24,399 --> 03:32:26,080
components of this team

3786
03:32:26,080 --> 03:32:27,680
yeah and many of these teams are kind of

3787
03:32:27,680 --> 03:32:29,840
combined here for defcon ctf and some of

3788
03:32:29,840 --> 03:32:31,279
them i expect will play together

3789
03:32:31,279 --> 03:32:34,000
afterwards and some of them um will kind

3790
03:32:34,000 --> 03:32:35,840
of split back up and maybe only come

3791
03:32:35,840 --> 03:32:37,279
together once a year just just for this

3792
03:32:37,279 --> 03:32:38,640
event i think we'll see probably both of

3793
03:32:38,640 --> 03:32:41,200
those yes

3794
03:32:41,200 --> 03:32:43,680
so okay now this is so we're looking at

3795
03:32:43,680 --> 03:32:46,720
the the rights

3796
03:32:48,640 --> 03:32:51,760
yes we have some uh

3797
03:32:51,760 --> 03:32:54,560
cheer in the chat is that uh let's see

3798
03:32:54,560 --> 03:32:55,600
if i can

3799
03:32:55,600 --> 03:32:58,080
make not embarrass myself is that like

3800
03:32:58,080 --> 03:33:00,640
korean script and that is that is korean

3801
03:33:00,640 --> 03:33:01,840
yes for sure

3802
03:33:01,840 --> 03:33:02,640
i thought you were going to read it i

3803
03:33:02,640 --> 03:33:05,200
was like no no no no no no no no no

3804
03:33:05,200 --> 03:33:07,200
that far i just wanted to identify the

3805
03:33:07,200 --> 03:33:08,319
right uh

3806
03:33:08,319 --> 03:33:11,520
character character all right fair um

3807
03:33:11,520 --> 03:33:13,760
but uh but i've actually heard that like

3808
03:33:13,760 --> 03:33:16,239
actually uh learning to uh read the

3809
03:33:16,239 --> 03:33:18,319
korean is actually relatively simple

3810
03:33:18,319 --> 03:33:19,760
yeah the pronunciation is

3811
03:33:19,760 --> 03:33:21,439
straightforward and like unlike you know

3812
03:33:21,439 --> 03:33:23,760
uh chinese for example yeah i can i can

3813
03:33:23,760 --> 03:33:25,520
read a little bit of it but like it it's

3814
03:33:25,520 --> 03:33:27,359
every character's its own word so much

3815
03:33:27,359 --> 03:33:30,399
yeah yeah i love how how much love our

3816
03:33:30,399 --> 03:33:31,840
our contestants are getting they are so

3817
03:33:31,840 --> 03:33:34,239
handsome yeah they are so wonderful

3818
03:33:34,239 --> 03:33:36,080
and i'm glad our chat appreciates that

3819
03:33:36,080 --> 03:33:38,239
we have some fantastic competitors right

3820
03:33:38,239 --> 03:33:40,000
on on both sides uh so actually to

3821
03:33:40,000 --> 03:33:41,840
answer your question in chat um i know

3822
03:33:41,840 --> 03:33:44,880
we have um alex on the perfect route

3823
03:33:44,880 --> 03:33:46,880
side only because i saw a prompt earlier

3824
03:33:46,880 --> 03:33:48,399
so they've got their path their username

3825
03:33:48,399 --> 03:33:50,800
as alex uh in the virtual machine i

3826
03:33:50,800 --> 03:33:52,479
don't know if i've seen that for for

3827
03:33:52,479 --> 03:33:53,920
team starbug

3828
03:33:53,920 --> 03:33:55,359
the name of the player that they're

3829
03:33:55,359 --> 03:33:56,319
sending

3830
03:33:56,319 --> 03:33:58,560
right

3831
03:33:58,640 --> 03:33:59,520
so

3832
03:33:59,520 --> 03:34:01,600
there we go so we've got uh the answers

3833
03:34:01,600 --> 03:34:03,120
coming through oh yeah yeah excellent

3834
03:34:03,120 --> 03:34:06,000
you're doing fighting yeah that's uh

3835
03:34:06,000 --> 03:34:07,439
you know also something when i learned

3836
03:34:07,439 --> 03:34:09,520
when uh playing ctf's in korea that you

3837
03:34:09,520 --> 03:34:11,840
have the fighting that that's just like

3838
03:34:11,840 --> 03:34:13,439
yeah working hard there's like a post

3839
03:34:13,439 --> 03:34:15,520
thing like i think it was like

3840
03:34:15,520 --> 03:34:16,960
you know this

3841
03:34:16,960 --> 03:34:18,960
you know uh i apologize for any like you

3842
03:34:18,960 --> 03:34:21,120
know misremembrance of like how this uh

3843
03:34:21,120 --> 03:34:23,279
is supposed to be but uh back to the

3844
03:34:23,279 --> 03:34:26,840
game let's go to um

3845
03:34:26,840 --> 03:34:30,000
starbugs you can see here that they have

3846
03:34:30,000 --> 03:34:31,439
some kind of

3847
03:34:31,439 --> 03:34:33,520
leak i think because the pawn tools

3848
03:34:33,520 --> 03:34:35,359
output is switching to the

3849
03:34:35,359 --> 03:34:37,120
uh the hex

3850
03:34:37,120 --> 03:34:39,840
uh output which it does when there are

3851
03:34:39,840 --> 03:34:42,640
non uh like ascii but yeah non-ascii

3852
03:34:42,640 --> 03:34:44,479
characters in your debug log so this is

3853
03:34:44,479 --> 03:34:46,319
something i really like when using phone

3854
03:34:46,319 --> 03:34:47,760
tools like when you use the tubes

3855
03:34:47,760 --> 03:34:50,160
library turn on that like debugging

3856
03:34:50,160 --> 03:34:51,760
things you can just see all the bytes

3857
03:34:51,760 --> 03:34:54,640
being sent and received from it and you

3858
03:34:54,640 --> 03:34:57,040
can see that within like or prepended to

3859
03:34:57,040 --> 03:35:00,000
that text there is some um you know

3860
03:35:00,000 --> 03:35:02,080
seemingly random bytes but you know

3861
03:35:02,080 --> 03:35:04,000
probably well you can see like maybe a

3862
03:35:04,000 --> 03:35:04,880
pointer

3863
03:35:04,880 --> 03:35:06,319
that looks very much like a pointer that

3864
03:35:06,319 --> 03:35:07,760
might be a pointer to pointers there

3865
03:35:07,760 --> 03:35:09,600
actually yeah so you can see that

3866
03:35:09,600 --> 03:35:11,359
pattern with the zero f zero zero zero

3867
03:35:11,359 --> 03:35:13,200
zero um

3868
03:35:13,200 --> 03:35:16,080
looks like the three upper bytes of a

3869
03:35:16,080 --> 03:35:17,920
address typically

3870
03:35:17,920 --> 03:35:21,200
either uh probably the library uh

3871
03:35:21,200 --> 03:35:23,520
are gonna be in that range yeah like

3872
03:35:23,520 --> 03:35:26,160
like a uh the libsy or uh something else

3873
03:35:26,160 --> 03:35:27,680
so so thank you very much for chat we

3874
03:35:27,680 --> 03:35:30,000
appreciate the love it is it has been

3875
03:35:30,000 --> 03:35:32,000
exhausting we are really excited to see

3876
03:35:32,000 --> 03:35:33,359
these teams we're also really excited to

3877
03:35:33,359 --> 03:35:35,520
be done and rest our voices will just

3878
03:35:35,520 --> 03:35:36,960
lay on the ground i think and be quiet a

3879
03:35:36,960 --> 03:35:38,000
little while you're just gonna i'm just

3880
03:35:38,000 --> 03:35:40,080
gonna crash on the floor here just like

3881
03:35:40,080 --> 03:35:42,960
yeah uh but no i mean if you are here uh

3882
03:35:42,960 --> 03:35:45,279
in vegas at def con uh after like you

3883
03:35:45,279 --> 03:35:47,840
know uh void mercy sorry right void

3884
03:35:47,840 --> 03:35:49,520
mercy is then yes that makes a ton of

3885
03:35:49,520 --> 03:35:51,600
sense

3886
03:35:51,600 --> 03:35:54,000
oh okay nice that's that's the handle

3887
03:35:54,000 --> 03:35:55,840
there we go right

3888
03:35:55,840 --> 03:35:57,600
uh so if you are here at the event you

3889
03:35:57,600 --> 03:36:00,000
know come come talk to us afterwards uh

3890
03:36:00,000 --> 03:36:01,600
tell us what you you know what do you

3891
03:36:01,600 --> 03:36:03,520
think about the event so far maybe if

3892
03:36:03,520 --> 03:36:05,680
any have any wish

3893
03:36:05,680 --> 03:36:07,120
anything to the wish list for next year

3894
03:36:07,120 --> 03:36:08,560
if we do this again

3895
03:36:08,560 --> 03:36:10,239
um let's let's come back and take a look

3896
03:36:10,239 --> 03:36:12,080
at perfect true because uh their their

3897
03:36:12,080 --> 03:36:13,920
payload now they've actually been using

3898
03:36:13,920 --> 03:36:15,680
that um

3899
03:36:15,680 --> 03:36:18,840
uh the abilities to send things into

3900
03:36:18,840 --> 03:36:21,439
uh no where'd it go it went away so they

3901
03:36:21,439 --> 03:36:22,560
had oh they'll allocate check right

3902
03:36:22,560 --> 03:36:24,880
there so yeah by by doing a load file

3903
03:36:24,880 --> 03:36:25,760
from

3904
03:36:25,760 --> 03:36:27,840
uh standard inputs and then sending some

3905
03:36:27,840 --> 03:36:29,120
data they're able to allocate chunks of

3906
03:36:29,120 --> 03:36:31,279
different sizes so they they are

3907
03:36:31,279 --> 03:36:32,960
looking into ways to control the keep

3908
03:36:32,960 --> 03:36:36,080
allocations by using that standard input

3909
03:36:36,080 --> 03:36:37,600
as a file read and then just sending an

3910
03:36:37,600 --> 03:36:38,880
arbitrary amount of data to fill up that

3911
03:36:38,880 --> 03:36:40,160
buffer so that's a really clever way to

3912
03:36:40,160 --> 03:36:43,439
get exact sized allocations

3913
03:36:43,439 --> 03:36:45,120
and

3914
03:36:45,120 --> 03:36:47,359
we'll see if they are going to need that

3915
03:36:47,359 --> 03:36:49,359
uh for their for their exploit i still

3916
03:36:49,359 --> 03:36:50,880
don't

3917
03:36:50,880 --> 03:36:53,120
i don't see anyone who has actually

3918
03:36:53,120 --> 03:36:55,200
found the uh

3919
03:36:55,200 --> 03:36:56,880
the vulnerability itself we're about uh

3920
03:36:56,880 --> 03:36:58,800
15 minutes in now

3921
03:36:58,800 --> 03:37:00,319
and

3922
03:37:00,319 --> 03:37:03,040
uh

3923
03:37:03,040 --> 03:37:04,080
yeah just

3924
03:37:04,080 --> 03:37:05,120
standard end right you don't even need

3925
03:37:05,120 --> 03:37:06,319
to do the

3926
03:37:06,319 --> 03:37:08,000
the other version of it but i'm still

3927
03:37:08,000 --> 03:37:09,680
waiting to see somebody demonstrate

3928
03:37:09,680 --> 03:37:12,800
knowledge of the actual flaw itself i

3929
03:37:12,800 --> 03:37:14,239
mean they could be in their head but i'm

3930
03:37:14,239 --> 03:37:16,399
not seeing any any scriptures i do like

3931
03:37:16,399 --> 03:37:17,840
this uh

3932
03:37:17,840 --> 03:37:19,760
the leak that we're seeing here i i'm

3933
03:37:19,760 --> 03:37:21,279
pretty sure this is some kind of memory

3934
03:37:21,279 --> 03:37:23,200
leak sure yeah it sure looks like it i

3935
03:37:23,200 --> 03:37:25,200
tried here you're calculating the

3936
03:37:25,200 --> 03:37:26,800
lipstick base by taking the leak and

3937
03:37:26,800 --> 03:37:29,279
subtracting an offset the classic uh

3938
03:37:29,279 --> 03:37:30,399
part of your

3939
03:37:30,399 --> 03:37:33,600
exploit right um so there's definitely

3940
03:37:33,600 --> 03:37:36,800
some progress there um i'm not sure if

3941
03:37:36,800 --> 03:37:38,080
that will take them

3942
03:37:38,080 --> 03:37:40,399
all the way so

3943
03:37:40,399 --> 03:37:41,840
so we're saying that like one possible

3944
03:37:41,840 --> 03:37:43,680
solution here is to

3945
03:37:43,680 --> 03:37:47,359
leak libsy address get your libsy base

3946
03:37:47,359 --> 03:37:50,080
somehow control the register rex

3947
03:37:50,080 --> 03:37:51,920
register and then go for this one though

3948
03:37:51,920 --> 03:37:53,120
right that's we're still looking for

3949
03:37:53,120 --> 03:37:54,880
somebody to find that button right how

3950
03:37:54,880 --> 03:37:57,120
do they get that rax control once they

3951
03:37:57,120 --> 03:37:59,040
have that i think that the rest of the

3952
03:37:59,040 --> 03:38:01,120
components are pretty straightforward so

3953
03:38:01,120 --> 03:38:02,720
so that's what we're looking to see and

3954
03:38:02,720 --> 03:38:04,080
we've got plenty of time the good news

3955
03:38:04,080 --> 03:38:06,880
is this final round can also much like

3956
03:38:06,880 --> 03:38:08,239
the last semifinal round which was able

3957
03:38:08,239 --> 03:38:10,160
to go a little bit longer before we went

3958
03:38:10,160 --> 03:38:12,399
to the sudden death um we do have a good

3959
03:38:12,399 --> 03:38:14,080
hour and a half uh i think before we're

3960
03:38:14,080 --> 03:38:15,200
gonna have to switch over to a sudden

3961
03:38:15,200 --> 03:38:17,040
death uh but we do have still have a

3962
03:38:17,040 --> 03:38:19,359
hard limit yes so if we're not able to

3963
03:38:19,359 --> 03:38:21,279
solve it we will switch to one of our

3964
03:38:21,279 --> 03:38:23,279
our sudden deaths and as you noticed uh

3965
03:38:23,279 --> 03:38:25,120
in the last round our sudden deaths have

3966
03:38:25,120 --> 03:38:26,560
gotten real fast we made sure that our

3967
03:38:26,560 --> 03:38:28,160
sudden deaths are just very very quick

3968
03:38:28,160 --> 03:38:29,760
well that one was like what was it it

3969
03:38:29,760 --> 03:38:31,840
was like under five minutes and then it

3970
03:38:31,840 --> 03:38:34,720
was it was pretty quick yeah um so

3971
03:38:34,720 --> 03:38:35,520
um

3972
03:38:35,520 --> 03:38:37,279
in terms of both teams being korean

3973
03:38:37,279 --> 03:38:38,880
based actually i think we have a mix

3974
03:38:38,880 --> 03:38:41,520
mixture uh perfect root uh has a couple

3975
03:38:41,520 --> 03:38:42,560
of different

3976
03:38:42,560 --> 03:38:44,800
uh groups that have come together i know

3977
03:38:44,800 --> 03:38:47,359
right um but i i do think uh starbucks

3978
03:38:47,359 --> 03:38:50,319
may be predominantly uh korean right and

3979
03:38:50,319 --> 03:38:53,439
perfect root i think is mostly us-based

3980
03:38:53,439 --> 03:38:56,239
but students who may have come over or

3981
03:38:56,239 --> 03:38:57,439
yeah may have been from a variety of

3982
03:38:57,439 --> 03:39:00,000
places they have i think

3983
03:39:00,000 --> 03:39:01,359
friends from

3984
03:39:01,359 --> 03:39:03,520
different i know that perfect blue

3985
03:39:03,520 --> 03:39:06,560
is uh like a us-based and once again it

3986
03:39:06,560 --> 03:39:07,920
was a college team right there a lot of

3987
03:39:07,920 --> 03:39:08,880
them were still in class i think many of

3988
03:39:08,880 --> 03:39:10,640
them are graduated and are now in

3989
03:39:10,640 --> 03:39:12,160
industry but they were they kind of met

3990
03:39:12,160 --> 03:39:15,040
and started there yes um

3991
03:39:15,040 --> 03:39:15,840
so

3992
03:39:15,840 --> 03:39:18,560
all right let's we're still see this is

3993
03:39:18,560 --> 03:39:22,960
surprising to me i wonder are they

3994
03:39:22,960 --> 03:39:24,640
i feel like this is a lot of work on

3995
03:39:24,640 --> 03:39:26,479
both teams and yet

3996
03:39:26,479 --> 03:39:28,000
almost just stepping back and looking

3997
03:39:28,000 --> 03:39:29,520
and saying where's the bug

3998
03:39:29,520 --> 03:39:31,359
right because i don't see anybody who

3999
03:39:31,359 --> 03:39:32,560
has found the bug yet and i feel like

4000
03:39:32,560 --> 03:39:34,399
all this work that they're doing

4001
03:39:34,399 --> 03:39:36,239
it's a lot of motion but not a lot of

4002
03:39:36,239 --> 03:39:38,160
destination yet and so i kind of want to

4003
03:39:38,160 --> 03:39:39,359
see somebody

4004
03:39:39,359 --> 03:39:41,279
like just stop and just spend some time

4005
03:39:41,279 --> 03:39:42,960
really marking this up in a

4006
03:39:42,960 --> 03:39:46,000
decompiler really looking at

4007
03:39:46,000 --> 03:39:47,680
yes although

4008
03:39:47,680 --> 03:39:50,319
if i did not did we see that this is a

4009
03:39:50,319 --> 03:39:52,560
stack smashing detector there right

4010
03:39:52,560 --> 03:39:54,399
then maybe they we do know the uh the

4011
03:39:54,399 --> 03:39:57,199
bug on starbucks that's interesting uh

4012
03:39:57,199 --> 03:39:59,279
because so what is this

4013
03:39:59,279 --> 03:40:00,399
that was uh

4014
03:40:00,399 --> 03:40:02,720
that was a that was a shell i think what

4015
03:40:02,720 --> 03:40:05,040
was it

4016
03:40:05,040 --> 03:40:06,720
yeah so copying it into the vm this is

4017
03:40:06,720 --> 03:40:07,920
what we've seen before copying it out of

4018
03:40:07,920 --> 03:40:10,239
the vm and going to throw it on against

4019
03:40:10,239 --> 03:40:12,399
intense service say oh it's not working

4020
03:40:12,399 --> 03:40:15,680
remotely oh my god oh okay so we're very

4021
03:40:15,680 --> 03:40:16,960
we can see that we can hear the

4022
03:40:16,960 --> 03:40:18,720
frustration yeah

4023
03:40:18,720 --> 03:40:20,560
and his the teammates are behind yeah

4024
03:40:20,560 --> 03:40:22,000
they're sharing on

4025
03:40:22,000 --> 03:40:23,760
the the emotions the emotions long as

4026
03:40:23,760 --> 03:40:25,199
they're not telling advice yeah that's

4027
03:40:25,199 --> 03:40:26,800
the other side as long as they're not

4028
03:40:26,800 --> 03:40:28,399
giving any hints they can you know they

4029
03:40:28,399 --> 03:40:30,960
can show all the importance yeah is

4030
03:40:30,960 --> 03:40:32,720
exactly uh encouraged oh they're trying

4031
03:40:32,720 --> 03:40:34,640
to figure it out it's so

4032
03:40:34,640 --> 03:40:36,720
um yeah

4033
03:40:36,720 --> 03:40:38,080
so i would love to see take a look at

4034
03:40:38,080 --> 03:40:39,439
that expo the next time it comes up and

4035
03:40:39,439 --> 03:40:40,960
i'm i'm very curious what are we are we

4036
03:40:40,960 --> 03:40:42,560
seeing that they're trying to run it

4037
03:40:42,560 --> 03:40:44,640
remote oh they have that's a that's

4038
03:40:44,640 --> 03:40:46,080
they're running it it's is this it is

4039
03:40:46,080 --> 03:40:48,000
this it doubles double check it yes team

4040
03:40:48,000 --> 03:40:50,640
two team two tip

4041
03:40:51,640 --> 03:40:54,640
congratulations congratulations very

4042
03:40:54,640 --> 03:40:56,080
well done

4043
03:40:56,080 --> 03:40:58,399
very well done

4044
03:40:58,399 --> 03:41:00,479
all right

4045
03:41:00,479 --> 03:41:02,720
that was amazing let's go ahead and just

4046
03:41:02,720 --> 03:41:04,560
step back congratulations to team

4047
03:41:04,560 --> 03:41:05,760
starbug

4048
03:41:05,760 --> 03:41:07,680
starbuck was the winning team

4049
03:41:07,680 --> 03:41:10,479
so well done made it through all four

4050
03:41:10,479 --> 03:41:13,120
rounds of live ctf this whole weekend

4051
03:41:13,120 --> 03:41:14,880
i the amount of stress it's stressful

4052
03:41:14,880 --> 03:41:17,680
for us watching i cannot imagine how

4053
03:41:17,680 --> 03:41:19,600
much effort and energy these teams have

4054
03:41:19,600 --> 03:41:21,920
just been exhausting themselves it is so

4055
03:41:21,920 --> 03:41:23,600
hard to sit up here in a room full of

4056
03:41:23,600 --> 03:41:25,439
people staring over your shoulder yeah

4057
03:41:25,439 --> 03:41:28,239
it's the pressure is crushing it is it

4058
03:41:28,239 --> 03:41:30,800
is amazing so chat thank you very much

4059
03:41:30,800 --> 03:41:32,319
you guys hung out with us this all

4060
03:41:32,319 --> 03:41:33,199
weekend

4061
03:41:33,199 --> 03:41:35,040
uh look forward i can't wait to see a

4062
03:41:35,040 --> 03:41:36,720
lot of people figuring out afterwards

4063
03:41:36,720 --> 03:41:38,399
they're going to freeze frame in slo-mo

4064
03:41:38,399 --> 03:41:39,359
and we're going to get much more

4065
03:41:39,359 --> 03:41:40,800
information about

4066
03:41:40,800 --> 03:41:42,080
the different approaches and how things

4067
03:41:42,080 --> 03:41:43,760
worked i think live overflow is still

4068
03:41:43,760 --> 03:41:45,600
running his recap stream

4069
03:41:45,600 --> 03:41:47,439
uh you know if you want to head out over

4070
03:41:47,439 --> 03:41:50,319
there after this and um

4071
03:41:50,319 --> 03:41:51,760
keep keep an eye out for the challenges

4072
03:41:51,760 --> 03:41:52,880
because we are also going to be

4073
03:41:52,880 --> 03:41:55,279
releasing all of these challenges uh to

4074
03:41:55,279 --> 03:41:56,399
to the public we'll put out a github

4075
03:41:56,399 --> 03:41:58,080
repo with both source code and the exact

4076
03:41:58,080 --> 03:41:59,840
binaries that teams right uh we're

4077
03:41:59,840 --> 03:42:01,199
giving you put some information on the

4078
03:42:01,199 --> 03:42:03,040
website there uh link to the different

4079
03:42:03,040 --> 03:42:04,399
things the youtube channel the github

4080
03:42:04,399 --> 03:42:06,160
repo yeah let's go and take a look at

4081
03:42:06,160 --> 03:42:07,680
that bracket one last time and fill that

4082
03:42:07,680 --> 03:42:09,680
up and we'll show what uh what we did

4083
03:42:09,680 --> 03:42:11,520
this last several days right so we had

4084
03:42:11,520 --> 03:42:13,760
teams coming from the round of 16

4085
03:42:13,760 --> 03:42:16,000
all the way up to this final event

4086
03:42:16,000 --> 03:42:17,920
what a great showing that was super fun

4087
03:42:17,920 --> 03:42:19,680
we want to also like a big thanks to

4088
03:42:19,680 --> 03:42:21,520
everyone who helped out uh making this

4089
03:42:21,520 --> 03:42:25,359
possible so we had uh us and uh glenn

4090
03:42:25,359 --> 03:42:26,560
here uh

4091
03:42:26,560 --> 03:42:28,880
on site in vegas for doing for this and

4092
03:42:28,880 --> 03:42:30,880
you have multiple people uh offside as

4093
03:42:30,880 --> 03:42:32,880
well josh for all the challenges thanks

4094
03:42:32,880 --> 03:42:35,439
to nick for a challenge thanks to rusty

4095
03:42:35,439 --> 03:42:37,520
for a bunch of work on challenges uh

4096
03:42:37,520 --> 03:42:39,359
thanks to uh brumley for bringing us

4097
03:42:39,359 --> 03:42:40,560
food because we had several meals

4098
03:42:40,560 --> 03:42:41,920
brought to us here that was like super

4099
03:42:41,920 --> 03:42:44,239
super helpful so nice so this was this

4100
03:42:44,239 --> 03:42:46,160
was a blast and then we had the live

4101
03:42:46,160 --> 03:42:47,840
overflow on uh

4102
03:42:47,840 --> 03:42:49,760
commentary we had brandon falcon

4103
03:42:49,760 --> 03:42:52,720
camouflage on commentary i guess

4104
03:42:52,720 --> 03:42:54,080
competitor and lightning of course from

4105
03:42:54,080 --> 03:42:56,000
nautilus yeah and speaking of big thanks

4106
03:42:56,000 --> 03:42:57,920
to knowledge institutes for yeah

4107
03:42:57,920 --> 03:43:00,080
bringing us out in the first place right

4108
03:43:00,080 --> 03:43:02,800
we really appreciate that so good job uh

4109
03:43:02,800 --> 03:43:05,680
to star bugs for winning

4110
03:43:05,680 --> 03:43:08,560
fantastic all right we are uh gonna pack

4111
03:43:08,560 --> 03:43:09,760
it in i think that's about it for the

4112
03:43:09,760 --> 03:43:11,600
stream for now yeah we look forward to

4113
03:43:11,600 --> 03:43:14,000
coming back live ctf is not going away

4114
03:43:14,000 --> 03:43:15,840
forever uh we would love to come back

4115
03:43:15,840 --> 03:43:17,600
again for defcon ctf next year but if

4116
03:43:17,600 --> 03:43:19,920
you're actually interested in live ctf

4117
03:43:19,920 --> 03:43:22,239
coming to another ctf

4118
03:43:22,239 --> 03:43:23,520
we're like we want other people to be

4119
03:43:23,520 --> 03:43:25,040
doing this as well too we think just the

4120
03:43:25,040 --> 03:43:27,920
idea of showing what teams are doing and

4121
03:43:27,920 --> 03:43:29,040
talking about it and being able to make

4122
03:43:29,040 --> 03:43:31,279
it a little more accessible is uh is

4123
03:43:31,279 --> 03:43:33,040
super fun and so we're looking forward

4124
03:43:33,040 --> 03:43:34,399
to that that happening

4125
03:43:34,399 --> 03:43:37,439
right so yeah that's gonna be it for us

4126
03:43:37,439 --> 03:43:40,080
uh i've been carl sita2

4127
03:43:40,080 --> 03:43:42,160
jordan cyberdex and we will see you next

4128
03:43:42,160 --> 03:43:43,439
time

4129
03:43:43,439 --> 03:43:47,239
bye take care

4130
03:43:47,930 --> 03:44:47,579
[Music]

4131
03:44:49,590 --> 03:44:54,749
[Music]

4132
03:44:57,550 --> 03:45:04,458
[Music]

4133
03:45:08,530 --> 03:45:27,379
[Music]

4134
03:46:31,420 --> 03:47:38,239
[Music]

4135
03:47:41,020 --> 03:47:47,950
[Music]

4136
03:47:52,020 --> 03:48:19,950
[Music]

4137
03:48:20,239 --> 03:48:23,239
so

4138
03:48:26,130 --> 03:48:33,189
[Music]

4139
03:48:34,800 --> 03:48:37,800
so

4140
03:48:43,120 --> 03:48:46,309
[Music]

4141
03:48:49,040 --> 03:48:52,040
so

4142
03:48:54,150 --> 03:48:57,199
[Music]

4143
03:48:59,310 --> 03:49:14,239
[Music]

4144
03:49:14,239 --> 03:49:15,860
so

4145
03:49:15,860 --> 03:49:29,840
[Music]

4146
03:49:29,840 --> 03:49:32,840
so

4147
03:49:37,900 --> 03:49:41,760
[Music]

4148
03:49:41,760 --> 03:49:44,760
so

4149
03:49:46,790 --> 03:49:52,940
[Music]

4150
03:50:05,880 --> 03:50:11,859
[Music]

4151
03:50:12,640 --> 03:50:14,340
so

4152
03:50:14,340 --> 03:50:24,080
[Music]

4153
03:50:24,080 --> 03:50:27,080
so

4154
03:50:27,630 --> 03:50:34,049
[Music]

4155
03:50:37,400 --> 03:50:57,789
[Music]

4156
03:51:04,880 --> 03:51:06,960
you

