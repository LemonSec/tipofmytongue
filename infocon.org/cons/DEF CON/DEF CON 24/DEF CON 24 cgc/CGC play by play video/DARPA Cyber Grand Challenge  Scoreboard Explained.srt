1
00:00:05,800 --> 00:00:14,469
an individual team has several service
binaries actually in this case many

2
00:00:14,470 --> 00:00:19,270
service binaries that are available for
their reasoning system to try to find a

3
00:00:19,270 --> 00:00:23,259
vulnerability in and potentially rollout
patches defend their system and each one

4
00:00:23,259 --> 00:00:26,619
of these little hex tiles represents one
of those challenge binaries or one of

5
00:00:26,619 --> 00:00:27,669
those services

6
00:00:27,669 --> 00:00:31,689
so in this instance we can see an
example of an individual challenge that

7
00:00:31,689 --> 00:00:32,770
is running normally

8
00:00:32,770 --> 00:00:36,730
it has a size that would indicate that
it's been available and it also has a

9
00:00:36,730 --> 00:00:39,849
white border around it which we can see
means that it has not had a

10
00:00:39,850 --> 00:00:42,010
vulnerability proven against it
successfully

11
00:00:42,010 --> 00:00:45,640
so this basically means that no one else
has scored against them using one of the

12
00:00:45,640 --> 00:00:48,010
proof of vulnerabilities to show that
they're still running a vulnerable

13
00:00:48,010 --> 00:00:51,670
version in this instance we can see that
this particular pieces off we're still

14
00:00:51,670 --> 00:00:55,989
running successfully still protected but
it also has a network ID s rule in place

15
00:00:55,989 --> 00:01:00,820
so the teams actually have the bots are
actually able to roll out IDs rules to

16
00:01:00,820 --> 00:01:04,780
filter traffic directly to any of the
individual challenge binaries and when

17
00:01:04,780 --> 00:01:05,620
they do

18
00:01:05,620 --> 00:01:09,580
that's an annotated by the sort of
little contact lens looking and

19
00:01:09,580 --> 00:01:12,640
additionally we see that some of these
services have this little of this little

20
00:01:12,640 --> 00:01:15,940
black gearbox going on and what the
black gearbox means is that the team is

21
00:01:15,940 --> 00:01:18,880
currently in the process of rolling out
a patch to their binary

22
00:01:18,880 --> 00:01:22,780
so the bots themselves when they find
these vulnerabilities they're capable of

23
00:01:22,780 --> 00:01:26,770
writing patches to the software that
hopefully implement security for that

24
00:01:26,770 --> 00:01:30,130
particular vulnerable condition right
when the team does that when the bot

25
00:01:30,130 --> 00:01:34,000
does that that service can get rolled
out into their into the game environment

26
00:01:34,000 --> 00:01:38,440
and as it does for that round they incur
one round of down time for that service

27
00:01:38,440 --> 00:01:40,090
just like in real life

28
00:01:40,090 --> 00:01:43,720
so all of this is being modeled sort of
around the idea of running an enterprise

29
00:01:43,720 --> 00:01:46,960
environment where you have multiple
services running on many machines

30
00:01:46,960 --> 00:01:51,550
additionally we can see this little blue
gear box that's formed on several of

31
00:01:51,550 --> 00:01:55,960
these and that's actually when that
individual service is down for an update

32
00:01:55,960 --> 00:01:57,339
to the ids rules

33
00:01:57,340 --> 00:01:59,980
so the idea is rules like we were
talking about in the little contact lens

34
00:01:59,980 --> 00:02:04,510
image those also require an update
deployment that requires them to be down

35
00:02:04,510 --> 00:02:06,010
for one round

36
00:02:06,010 --> 00:02:09,580
throughout this whole card you can
basically see the service status of

37
00:02:09,580 --> 00:02:12,640
every team's service and each of the
services

38
00:02:13,660 --> 00:02:17,560
moving on we can see inbound network
traffic coming from this which

39
00:02:17,560 --> 00:02:18,920
represents the scoring system

40
00:02:18,920 --> 00:02:22,429
at this point the scoring system is
responsible for ensuring that every

41
00:02:22,430 --> 00:02:25,160
single one of those services is working
correctly and doing what it's supposed

42
00:02:25,160 --> 00:02:26,180
to be doing

43
00:02:26,180 --> 00:02:29,599
so that being the case the service polls
every little one of these dots actually

44
00:02:29,599 --> 00:02:34,700
represents a real service pole occurring
in the system and every one of these

45
00:02:34,700 --> 00:02:37,519
little arrows with the cone on the front
represents an individual proof of

46
00:02:37,520 --> 00:02:40,280
vulnerability being attempted by another
team

47
00:02:40,280 --> 00:02:42,950
so this is another team attempting to
prove that they are still running a

48
00:02:42,950 --> 00:02:46,880
vulnerable service and each one of these
as they as these are traveling along

49
00:02:46,880 --> 00:02:50,750
every element of this view is data
driven every one of these is

50
00:02:50,750 --> 00:02:54,830
programmatically generated directly from
the actual data coming off of the

51
00:02:54,830 --> 00:02:55,910
scoring engine

52
00:02:55,910 --> 00:03:01,010
so each of these service polls as they
fly along will reach the intended

53
00:03:01,010 --> 00:03:05,269
service hex as you can see and we'll see
also the proof of vulnerability little

54
00:03:05,269 --> 00:03:09,620
arrows they reach the they reach the
service Texas and basically each one of

55
00:03:09,620 --> 00:03:14,420
them when successfully proven it shows
with the color of which team proved that

56
00:03:14,420 --> 00:03:18,890
vulnerability and the individual service
poles will actually turn red or green as

57
00:03:18,890 --> 00:03:21,679
they approach the service tile to show
whether or not they're passing

58
00:03:21,680 --> 00:03:23,090
functionality test

59
00:03:23,090 --> 00:03:26,750
so besides needing to be available from
a performance perspective the service

60
00:03:26,750 --> 00:03:29,720
also of course has to do what it was
intended to do right of mail server has

61
00:03:29,720 --> 00:03:33,980
to continue being a mail server and so
that being the case the the green ones

62
00:03:33,980 --> 00:03:37,369
are are instances where that
modification or that service pole is

63
00:03:37,370 --> 00:03:41,660
passing functionality and in instances
where it's not passing functionality

64
00:03:41,660 --> 00:03:44,690
they turn red if the POV is thrown
unsuccessfully

65
00:03:44,690 --> 00:03:47,690
you'll just see the line come through
and hit the service but the service is

66
00:03:47,690 --> 00:03:51,040
not affected by it

67
00:03:51,040 --> 00:03:55,840
yeah

