1
00:00:00,610 --> 00:00:05,759
yeah

2
00:00:05,759 --> 00:00:13,590
so this is one of the views that
actually i'm most excited about

3
00:00:13,590 --> 00:00:18,210
we call this the filament view and what
it basically does is it takes the actual

4
00:00:18,210 --> 00:00:21,900
execution flow of the program and maps
it in a three-dimensional space where we

5
00:00:21,900 --> 00:00:27,570
actually get to spread time and show how
the execution flows across the inputs

6
00:00:27,570 --> 00:00:31,500
this is actually a representation of two
different binaries where one is a

7
00:00:31,500 --> 00:00:35,489
patched version of the other so the cool
thing is this allows us to actually show

8
00:00:35,489 --> 00:00:40,858
divergence between two executions based
on either input or modified binaries

9
00:00:40,859 --> 00:00:44,699
so in this particular case it actually
allows us to fairly rapidly determine

10
00:00:44,699 --> 00:00:45,719
what's going on

11
00:00:45,719 --> 00:00:50,309
we're in this instance one team has
actually deployed a patched version of a

12
00:00:50,309 --> 00:00:53,638
binary and when we see it come and begin
execution

13
00:00:53,639 --> 00:00:58,139
we can see some of these sort of loop
like structures that show the individual

14
00:00:58,139 --> 00:01:01,109
code blocks executing but across time

15
00:01:01,109 --> 00:01:04,890
so what this view allows us to do is
have many of those types of of

16
00:01:04,890 --> 00:01:08,490
constructs that were used to seeing in
machine code that represent cold logic

17
00:01:08,490 --> 00:01:12,570
and code and data structures actually
present themselves with very unique

18
00:01:12,570 --> 00:01:17,490
shapes like these reoccurring shapes
that we see here actually represent

19
00:01:17,490 --> 00:01:20,789
loops and in this case this little icon
here actually means that that's a

20
00:01:20,790 --> 00:01:21,690
transmission

21
00:01:21,690 --> 00:01:25,289
so in this instance this overly
aggressive patch has actually caused the

22
00:01:25,290 --> 00:01:28,980
program to terminate early before
fulfilling its intended purpose even

23
00:01:28,980 --> 00:01:32,550
when given totally legitimate data
whereas if we allow execution to

24
00:01:32,550 --> 00:01:35,940
continue we can see that there was a lot
more that what that was supposed to

25
00:01:35,940 --> 00:01:39,000
execute hear a lot more that was
supposed to be done until we would

26
00:01:39,000 --> 00:01:42,840
normally execute the program many
exchanges were meant to be had here many

27
00:01:42,840 --> 00:01:46,350
sends and receives and processing of
that input so even from a very high

28
00:01:46,350 --> 00:01:49,949
level perspective not looking at any
machine code not looking at any reverse

29
00:01:49,950 --> 00:01:54,840
engineering interfaces we can tell that
this particular construct this actual

30
00:01:54,840 --> 00:01:57,840
execution flow is how it should have
been and this is what happened and it's

31
00:01:57,840 --> 00:02:02,430
very apparent that the modification has
actually caused termination early

32
00:02:02,430 --> 00:02:05,040
without letting it actually do what it's
supposed to do

33
00:02:05,040 --> 00:02:07,530
yeah

34
00:02:07,530 --> 00:02:11,250
yeah

