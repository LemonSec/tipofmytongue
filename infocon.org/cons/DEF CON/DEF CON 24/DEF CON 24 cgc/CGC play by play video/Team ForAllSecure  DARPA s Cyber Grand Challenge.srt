1
00:00:01,210 --> 00:00:12,370
everything is becoming automated you
know

2
00:00:12,370 --> 00:00:16,750
pacemakers refrigerators everything is
connected to the internet one way or

3
00:00:16,750 --> 00:00:22,000
another these days and people are
writing software to run these things and

4
00:00:22,000 --> 00:00:24,939
often the people writing the software
don't have a sense of whether it's

5
00:00:24,939 --> 00:00:29,860
secure insecure and they're making
choices that impact all the users so for

6
00:00:29,860 --> 00:00:33,460
me personally I want to make sure that
everyone can check the security of the

7
00:00:33,460 --> 00:00:37,870
software they're using I want to make
sure that you know the person who buys a

8
00:00:37,870 --> 00:00:41,500
smart refrigerator knows that it's not
going to be a new avenue for someone to

9
00:00:41,500 --> 00:00:45,550
steal their credit card number that they
can install a new app on their phone and

10
00:00:45,550 --> 00:00:47,379
they don't have to worry about it

11
00:00:47,379 --> 00:00:52,059
stealing their personal contacts for all
secure is a start-up cyber security

12
00:00:52,059 --> 00:00:56,169
company patched from the halls of
carnegie mellon university in pittsburgh

13
00:00:56,170 --> 00:00:57,670
pennsylvania

14
00:00:57,670 --> 00:01:02,079
the team has been playing capture the
flag CTF for a long time

15
00:01:02,079 --> 00:01:05,680
the computer security version of capture
the flag is just like the game you

16
00:01:05,680 --> 00:01:10,030
played as a kid but the flags are made
of data and the field is made out of

17
00:01:10,030 --> 00:01:11,409
brand new code

18
00:01:11,409 --> 00:01:16,540
it's the job of CTF competitors to
reverse engineered that code to explore

19
00:01:16,540 --> 00:01:18,040
and heal its weaknesses

20
00:01:18,040 --> 00:01:22,570
every year the small changes you know
people get a little bit better and means

21
00:01:22,570 --> 00:01:26,320
you solve challenges a little bit faster
as it keep up with things but this is

22
00:01:26,320 --> 00:01:27,639
just a huge leap

23
00:01:27,640 --> 00:01:31,840
I mean the ability you know we tell the
computer go and it can find

24
00:01:31,840 --> 00:01:36,789
vulnerabilities and maybe a dozen
programs in a minute or less

25
00:01:36,789 --> 00:01:39,880
and that's just incredible i mean a
human just can't even process that much

26
00:01:39,880 --> 00:01:40,960
information

27
00:01:40,960 --> 00:01:45,038
that's where cgc fits and it's exactly
in our research area we want to check

28
00:01:45,039 --> 00:01:47,979
the world's programs for security
vulnerabilities

29
00:01:47,979 --> 00:01:52,390
we want to check for exploitable bugs we
think everyone should know whether the

30
00:01:52,390 --> 00:01:54,440
program they're using has a problem or
not

31
00:01:54,440 --> 00:01:58,190
and so we've been developing these tools
for a long time to not just find bugs

32
00:01:58,190 --> 00:02:02,149
but find the real serious security
vulnerabilities that hackers can exploit

33
00:02:02,150 --> 00:02:07,520
a software bug is a security error or
flaw on a computer program that causes

34
00:02:07,520 --> 00:02:12,320
it to produce an incorrect or unexpected
result or to behave in unintended ways

35
00:02:12,320 --> 00:02:16,760
and c GC is a way to feed into that
vision of making sure it's fully

36
00:02:16,760 --> 00:02:20,929
autonomous and beyond finding the
problems actually fixing them

37
00:02:20,930 --> 00:02:27,140
the team uses a two tiered approach
mayhem and Murphy mayhem uses symbolic

38
00:02:27,140 --> 00:02:31,429
execution to generate deep paths in the
program searching for flaws

39
00:02:31,430 --> 00:02:36,080
Murphy is a fast directed fuzzer that
can generate proof that a flaw exists

40
00:02:36,080 --> 00:02:39,770
beginning the patching process the team
calls them

41
00:02:39,770 --> 00:02:44,540
Murphy's flaws by combining two very
different automation techniques for all

42
00:02:44,540 --> 00:02:48,530
secure finds that the combination is
more powerful than either technique

43
00:02:48,530 --> 00:02:49,310
alone

44
00:02:49,310 --> 00:02:55,250
they've also named their crs mayhem it's
so much faster way to search through

45
00:02:55,250 --> 00:02:59,720
programs in my hand but there is a lot
of creativity and almost art in kind of

46
00:02:59,720 --> 00:03:02,209
crafting exploits in doing that sort of
thing

47
00:03:02,209 --> 00:03:06,440
and so the real solution is kind of a
two-pronged approach where you have

48
00:03:06,440 --> 00:03:08,180
computers and humans working together

49
00:03:08,180 --> 00:03:11,750
yeah I don't view computers as replacing
people at all

50
00:03:11,750 --> 00:03:16,790
I look at computers is freeing us from
the mundane tasks so you always want

51
00:03:16,790 --> 00:03:20,660
that human spark of creativity and
that's something a computer will never

52
00:03:20,660 --> 00:03:24,950
have but we want to make it so humans
really can just focus on that spark of

53
00:03:24,950 --> 00:03:28,790
creativity and don't have to keep track
of the little tiny details so i look at

54
00:03:28,790 --> 00:03:33,109
cgc is really just upping the bar so we
can focus more on those abstract

55
00:03:33,110 --> 00:03:36,350
concepts as people and let the computers
worry about the details

56
00:03:36,350 --> 00:03:41,690
if mayhem can find the most Murphy's
floss and fix them for all secure will

57
00:03:41,690 --> 00:03:44,690
claim the two million-dollar prize

58
00:03:45,810 --> 00:03:51,720
yeah

