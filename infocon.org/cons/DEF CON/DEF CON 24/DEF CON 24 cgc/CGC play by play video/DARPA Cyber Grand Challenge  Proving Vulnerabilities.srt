1
00:00:03,510 --> 00:00:06,510
yeah

2
00:00:08,890 --> 00:00:15,460
so what exactly are vulnerabilities your
flaws in the software that we don't know

3
00:00:15,460 --> 00:00:19,900
about yet they could lead to an external
attack or gaining access to your system

4
00:00:19,900 --> 00:00:22,689
for the cyber grand challenge

5
00:00:22,689 --> 00:00:27,160
the game is focused on what we call
memory corruption vulnerabilities a

6
00:00:27,160 --> 00:00:31,450
buffer overflow is one type of memory
corruption a memory disclosure

7
00:00:31,450 --> 00:00:37,030
vulnerability or heat buffer overflow
are all different types of memory

8
00:00:37,030 --> 00:00:42,430
corruption vulnerability to a computer
at its heart is a processor and some

9
00:00:42,430 --> 00:00:47,559
memory in a modern computer you know
that you have a hard drive and you have

10
00:00:47,559 --> 00:00:52,899
ram which is memory and you have a
processor or a computer turns on it

11
00:00:52,899 --> 00:00:56,829
reads the data the code that needs to
execute off of the hard drive into

12
00:00:56,829 --> 00:01:01,030
working memory into the ram module
because this is faster and the processor

13
00:01:01,030 --> 00:01:06,970
then interacts with it then a buffer is
simply a logical contract it's a piece

14
00:01:06,970 --> 00:01:10,900
of memory that has been dedicated for
one particular purpose by the program

15
00:01:13,050 --> 00:01:19,530
so let's um go over a classic
stack-based buffer overflow

16
00:01:19,530 --> 00:01:24,450
if I'm a program and the first thing I
do is say hello what is your name

17
00:01:25,110 --> 00:01:30,510
you're going to tell me your name hockey
ok so in this program I've allocated a

18
00:01:30,510 --> 00:01:34,080
particular area of memory on the stack
called a buffer right

19
00:01:34,080 --> 00:01:37,620
why is that program is operating another
thing that puts in this area of the

20
00:01:37,620 --> 00:01:41,070
stack is a pointer this is what it's
going to do next

21
00:01:41,070 --> 00:01:45,089
so I'm the program i say well i'm going
to ask him his name but after i asked

22
00:01:45,090 --> 00:01:45,900
him his name

23
00:01:45,900 --> 00:01:51,930
I'm going to tell him his zip code so i
say hello what is your name instead of

24
00:01:51,930 --> 00:01:53,160
you saying back

25
00:01:53,160 --> 00:01:58,710
Hakeem you say back Hakeem and i live on
fourth ave and I have a lot of friends

26
00:01:58,710 --> 00:02:03,210
and give me all your secret data and
that gets overwritten on my stack and

27
00:02:03,210 --> 00:02:07,470
instead of after I ask your name instead
of going back and saying okay I'm going

28
00:02:07,470 --> 00:02:08,970
to tell you your zip code

29
00:02:08,970 --> 00:02:12,240
I say oh here's all my secret data

30
00:02:12,240 --> 00:02:19,230
so we talk about what a buffer is the
stack buffer overflow

31
00:02:20,040 --> 00:02:23,760
what is he what's the difference the
heat is a more general purpose area of

32
00:02:23,760 --> 00:02:25,079
memory on the heap

33
00:02:25,080 --> 00:02:29,430
it will be dynamically allocated and
used by the program is operating

34
00:02:29,430 --> 00:02:33,510
we don't know specifically what's on the
heat there's no common usage of it

35
00:02:33,510 --> 00:02:37,980
there's a buffer on the heap user data
comes in and writes pass into that

36
00:02:37,980 --> 00:02:41,880
buffer but what's different is on a heap

37
00:02:41,880 --> 00:02:45,570
what's after the end of that buffer
sometimes a buffer overflow can have no

38
00:02:45,570 --> 00:02:46,739
effect whatsoever

39
00:02:46,740 --> 00:02:50,700
sometimes an overflow just crashes a
computer most people see the blue screen

40
00:02:50,700 --> 00:02:51,239
of death

41
00:02:51,240 --> 00:02:59,130
yes yes that's typically a result of
some type of memory corruption but an

42
00:02:59,130 --> 00:03:02,940
extension was written in openssl to
allow computers to say hey are you still

43
00:03:02,940 --> 00:03:03,570
there

44
00:03:03,570 --> 00:03:06,900
so we know the server is still up the
connection is still there

45
00:03:06,900 --> 00:03:15,750
so a client can send a packet to the
server the server just repeats that data

46
00:03:15,750 --> 00:03:16,710
back to the client

47
00:03:16,710 --> 00:03:21,000
yes I'm still here here's your data well
there's a link field that comes at the

48
00:03:21,000 --> 00:03:24,600
beginning of that data so the client
says I'm going to send you ten bites

49
00:03:24,600 --> 00:03:28,200
here's your headlights they go to the
server the services oh you sent me ten

50
00:03:28,200 --> 00:03:28,769
bites

51
00:03:28,770 --> 00:03:33,090
here's your 10 bikes there was a
vulnerability an error in the way that

52
00:03:33,090 --> 00:03:38,850
was written so a client could send a
packet the said hey give me 400 bites

53
00:03:38,850 --> 00:03:40,980
but it only had ten bites on it

54
00:03:40,980 --> 00:03:44,459
packet comes in the server goes oh you
said you sent me four hundred bites

55
00:03:44,460 --> 00:03:47,490
here's 400 bites here's the 10 you gave
me

56
00:03:47,490 --> 00:03:51,570
and then here's 390 bites of secrets and
it's not that packet back

57
00:03:51,570 --> 00:03:54,959
it's a very straightforward and very
simple one of the things that's very

58
00:03:54,960 --> 00:03:59,280
interesting and very compelling about
vulnerability research and expectation

59
00:03:59,280 --> 00:04:02,730
is that creativity and that uniqueness
of every vulnerability

60
00:04:03,570 --> 00:04:06,600
researchers once they find a
vulnerability

61
00:04:06,600 --> 00:04:10,170
then they produce what we call a proof
of concept but actually gain code

62
00:04:10,170 --> 00:04:14,160
execution on the Machine through using
this vulnerability and the way to do

63
00:04:14,160 --> 00:04:17,608
that might be really bizarre

64
00:04:17,608 --> 00:04:18,930
it might be really unique

65
00:04:18,930 --> 00:04:23,490
it might be really difficult to find I
see so with the cyber Grand Challenge

66
00:04:23,490 --> 00:04:28,440
turbines thrown down the gauntlet and
said we have got to bring software in to

67
00:04:28,440 --> 00:04:32,070
solve this problem we've got to have
automated reasoning systems that can

68
00:04:32,070 --> 00:04:38,639
respond to threats in real time but also
find these vulnerabilities both for the

69
00:04:38,639 --> 00:04:41,639
software ever gets filled in the first
place

70
00:04:43,860 --> 00:04:47,699
ok

