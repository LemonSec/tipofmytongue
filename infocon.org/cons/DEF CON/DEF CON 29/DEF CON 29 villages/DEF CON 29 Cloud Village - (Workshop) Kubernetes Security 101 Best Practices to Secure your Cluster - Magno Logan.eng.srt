1
00:00:00,000 --> 00:00:03,280
so yeah this um this workshop is going

2
00:00:03,280 --> 00:00:06,480
to be about kubernetes security 101

3
00:00:06,480 --> 00:00:10,720
uh some best practice to secure cluster

4
00:00:11,360 --> 00:00:12,639
okay

5
00:00:12,639 --> 00:00:15,200
so yeah just a little bit about myself

6
00:00:15,200 --> 00:00:18,080
as jeff mentioned i work at trend micro

7
00:00:18,080 --> 00:00:20,320
as an information security specialist

8
00:00:20,320 --> 00:00:22,160
i'm part of the cloud and container

9
00:00:22,160 --> 00:00:24,320
security research team

10
00:00:24,320 --> 00:00:27,519
i'm also a member of the cncf

11
00:00:27,519 --> 00:00:30,160
security tag team now to change name it

12
00:00:30,160 --> 00:00:32,159
was called seek security now security

13
00:00:32,159 --> 00:00:33,360
tag team

14
00:00:33,360 --> 00:00:35,120
which is like the technical advisory

15
00:00:35,120 --> 00:00:36,800
group for the cloud native computing

16
00:00:36,800 --> 00:00:39,040
foundation right it's a volunteer work

17
00:00:39,040 --> 00:00:42,079
that we do providing guidance and and

18
00:00:42,079 --> 00:00:44,480
creating uh documentation

19
00:00:44,480 --> 00:00:47,760
regards to uh cloud native tools supply

20
00:00:47,760 --> 00:00:50,320
chain attacks we've published last year

21
00:00:50,320 --> 00:00:51,920
our

22
00:00:51,920 --> 00:00:54,320
cloud native security white paper and

23
00:00:54,320 --> 00:00:56,160
recently our

24
00:00:56,160 --> 00:00:58,879
supply chain security white paper so um

25
00:00:58,879 --> 00:01:01,039
those are all available and free for

26
00:01:01,039 --> 00:01:03,280
everyone to check it out

27
00:01:03,280 --> 00:01:04,159
and

28
00:01:04,159 --> 00:01:06,159
i just want to say before we start that

29
00:01:06,159 --> 00:01:09,119
um i don't consider myself a kubernetes

30
00:01:09,119 --> 00:01:11,119
security expert

31
00:01:11,119 --> 00:01:12,960
as you're going to see in this workshop

32
00:01:12,960 --> 00:01:15,439
kubernetes is a very complex

33
00:01:15,439 --> 00:01:16,240
uh

34
00:01:16,240 --> 00:01:18,799
technology i would say and

35
00:01:18,799 --> 00:01:21,280
i've been studying for over one year one

36
00:01:21,280 --> 00:01:24,240
year and a half now and still sometimes

37
00:01:24,240 --> 00:01:27,439
it can be uh some things can be tricky

38
00:01:27,439 --> 00:01:30,479
and and so yeah uh feel free to ask

39
00:01:30,479 --> 00:01:32,640
questions if you have them the idea of

40
00:01:32,640 --> 00:01:34,799
this workshop here is to be

41
00:01:34,799 --> 00:01:37,759
a very hands-on so that you can do it

42
00:01:37,759 --> 00:01:39,920
yourself as well and follow along so i'm

43
00:01:39,920 --> 00:01:42,880
gonna do things very slow and and like

44
00:01:42,880 --> 00:01:45,680
step by step right um

45
00:01:45,680 --> 00:01:49,200
yeah and i also have a personal blog on

46
00:01:49,200 --> 00:01:52,799
uh the link there katennasac.com

47
00:01:52,799 --> 00:01:55,119
where i publish some

48
00:01:55,119 --> 00:01:56,399
articles

49
00:01:56,399 --> 00:01:59,439
at least once a month there is also a

50
00:01:59,439 --> 00:02:03,600
list of all my previous talks uh before

51
00:02:03,600 --> 00:02:05,520
the slides or videos if they were

52
00:02:05,520 --> 00:02:08,639
recorded since uh since 2011 when i

53
00:02:08,639 --> 00:02:11,840
started speaking at conferences about

54
00:02:11,840 --> 00:02:14,959
application security and all that stuff

55
00:02:14,959 --> 00:02:16,879
and there is also all my contact

56
00:02:16,879 --> 00:02:19,040
information on my social media

57
00:02:19,040 --> 00:02:21,280
and twitter github and linkedin it's all

58
00:02:21,280 --> 00:02:23,840
magna logan so you can easily find me if

59
00:02:23,840 --> 00:02:26,160
you want and feel free to add me and we

60
00:02:26,160 --> 00:02:31,359
can chat more after this workshop

61
00:02:32,080 --> 00:02:32,800
so

62
00:02:32,800 --> 00:02:36,720
the agenda for today is

63
00:02:36,720 --> 00:02:39,760
what is kubernetes right so i'm gonna

64
00:02:39,760 --> 00:02:42,560
assume that you either heard about

65
00:02:42,560 --> 00:02:45,519
kubernetes or at least uh

66
00:02:45,519 --> 00:02:46,959
have

67
00:02:46,959 --> 00:02:49,120
seen someone or an organization that

68
00:02:49,120 --> 00:02:52,239
uses kubernetes but in this workshop i'm

69
00:02:52,239 --> 00:02:54,480
going to assume that you've never used

70
00:02:54,480 --> 00:02:55,920
kubernetes right so

71
00:02:55,920 --> 00:02:59,440
um the idea is to start from scratch so

72
00:02:59,440 --> 00:03:01,040
what we're going to do

73
00:03:01,040 --> 00:03:04,319
um the way that this workshop works is

74
00:03:04,319 --> 00:03:06,239
we're going to set up an environment on

75
00:03:06,239 --> 00:03:08,640
aws that's why the there there was a

76
00:03:08,640 --> 00:03:12,239
prerequisite of having an aws account

77
00:03:12,239 --> 00:03:15,040
and we're going to use cloud9 which is

78
00:03:15,040 --> 00:03:17,680
like a virtual uh developer environment

79
00:03:17,680 --> 00:03:20,080
for aws so we're going to deploy a

80
00:03:20,080 --> 00:03:23,280
cloud9 instance and use that to uh

81
00:03:23,280 --> 00:03:25,680
deploy our cluster right

82
00:03:25,680 --> 00:03:26,959
uh so

83
00:03:26,959 --> 00:03:28,319
we're gonna understand what is

84
00:03:28,319 --> 00:03:30,400
kubernetes the kubernetes architecture

85
00:03:30,400 --> 00:03:32,319
right i'm gonna talk about all the small

86
00:03:32,319 --> 00:03:34,400
components um

87
00:03:34,400 --> 00:03:36,560
the the two main components the the

88
00:03:36,560 --> 00:03:38,400
control plane and the worker nodes and

89
00:03:38,400 --> 00:03:40,239
then the each little component that's

90
00:03:40,239 --> 00:03:43,599
inside those those major ones

91
00:03:43,599 --> 00:03:44,959
um

92
00:03:44,959 --> 00:03:46,879
as joff said we're going to do some crap

93
00:03:46,879 --> 00:03:49,200
modeling right i don't know if you heard

94
00:03:49,200 --> 00:03:50,959
but

95
00:03:50,959 --> 00:03:54,640
this year in april this year the miter

96
00:03:54,640 --> 00:03:57,519
released the attack framework the attack

97
00:03:57,519 --> 00:04:01,280
matrix for containers right and

98
00:04:01,280 --> 00:04:03,519
we were part of this this work with

99
00:04:03,519 --> 00:04:05,760
miter right so we partnered with mitre

100
00:04:05,760 --> 00:04:09,040
when they uh when they did this uh when

101
00:04:09,040 --> 00:04:10,959
they called the community for help and

102
00:04:10,959 --> 00:04:14,239
and we provided some data regarding our

103
00:04:14,239 --> 00:04:16,959
uh our honeypots we have some docker and

104
00:04:16,959 --> 00:04:18,720
kubernetes honeypots that we use to

105
00:04:18,720 --> 00:04:21,120
analyze uh attack data's on those

106
00:04:21,120 --> 00:04:22,639
environments so we're going to talk

107
00:04:22,639 --> 00:04:24,560
about that as well

108
00:04:24,560 --> 00:04:26,960
um then later we're going to talk about

109
00:04:26,960 --> 00:04:30,400
after we set up our environment on on

110
00:04:30,400 --> 00:04:33,199
aws we set up a cluster we're going to

111
00:04:33,199 --> 00:04:34,320
deploy

112
00:04:34,320 --> 00:04:37,759
a application uh a container contourize

113
00:04:37,759 --> 00:04:39,759
application there a vulnerable

114
00:04:39,759 --> 00:04:41,759
application and so we're going to attack

115
00:04:41,759 --> 00:04:44,320
it right so we're going to understand

116
00:04:44,320 --> 00:04:47,040
what's going on uh um how can an

117
00:04:47,040 --> 00:04:49,040
attacker compromise the cluster one of

118
00:04:49,040 --> 00:04:52,240
the many ways that uh that's possible

119
00:04:52,240 --> 00:04:54,400
and of course this is a misconfigured

120
00:04:54,400 --> 00:04:56,479
cluster right so that you understand the

121
00:04:56,479 --> 00:04:58,720
fundamentals of why it's important to

122
00:04:58,720 --> 00:05:01,360
keep your kubernetes cluster uh well

123
00:05:01,360 --> 00:05:03,520
configured and secured

124
00:05:03,520 --> 00:05:05,440
and if we have time then we're going to

125
00:05:05,440 --> 00:05:08,160
talk about defending kubernetes right so

126
00:05:08,160 --> 00:05:12,400
what are the main uh issues on

127
00:05:12,400 --> 00:05:13,919
that you can like what are the best

128
00:05:13,919 --> 00:05:15,360
practices right

129
00:05:15,360 --> 00:05:17,919
either regarding the api server and the

130
00:05:17,919 --> 00:05:20,320
whole uh process of deploying in a

131
00:05:20,320 --> 00:05:22,800
container uh generating a container

132
00:05:22,800 --> 00:05:25,600
right from scratch and deploying it into

133
00:05:25,600 --> 00:05:27,919
a kubernetes cluster and and there is

134
00:05:27,919 --> 00:05:30,320
many things that we can talk about here

135
00:05:30,320 --> 00:05:32,960
so yeah i hope you enjoy and and feel

136
00:05:32,960 --> 00:05:35,199
free to ask questions i know that people

137
00:05:35,199 --> 00:05:36,880
are monitoring those questions and and

138
00:05:36,880 --> 00:05:38,880
they can send them over to me so if

139
00:05:38,880 --> 00:05:40,639
you're struggling if you're not if

140
00:05:40,639 --> 00:05:42,080
you're you're trying to follow along and

141
00:05:42,080 --> 00:05:43,919
something's not working for you

142
00:05:43,919 --> 00:05:45,840
don't worry try feel free to ask

143
00:05:45,840 --> 00:05:48,720
questions and i can we can make this uh

144
00:05:48,720 --> 00:05:51,360
very interactive

145
00:05:51,360 --> 00:05:53,199
okay

146
00:05:53,199 --> 00:05:55,520
so

147
00:05:57,280 --> 00:06:01,360
before we start i just want to say that

148
00:06:01,360 --> 00:06:02,479
i uh

149
00:06:02,479 --> 00:06:04,840
since i started working with kubernetes

150
00:06:04,840 --> 00:06:07,840
uh last year

151
00:06:07,840 --> 00:06:09,840
i created this this kind of github

152
00:06:09,840 --> 00:06:11,919
project the awesome kubernetes security

153
00:06:11,919 --> 00:06:13,759
list

154
00:06:13,759 --> 00:06:16,479
and um this project has

155
00:06:16,479 --> 00:06:21,039
um has like a bunch of links and in

156
00:06:21,039 --> 00:06:24,080
information that i use myself to learn

157
00:06:24,080 --> 00:06:26,720
kubernetes and understand and has a lot

158
00:06:26,720 --> 00:06:29,840
of stuff about kubernetes security so

159
00:06:29,840 --> 00:06:31,600
let me share that here

160
00:06:31,600 --> 00:06:34,160
with you so that you can take a look as

161
00:06:34,160 --> 00:06:37,600
well so yeah first this uh um

162
00:06:37,600 --> 00:06:40,720
i started with that as a like a kind of

163
00:06:40,720 --> 00:06:42,800
my own thing when i was studying saving

164
00:06:42,800 --> 00:06:44,000
links on a

165
00:06:44,000 --> 00:06:47,039
text file uh for myself but i said no

166
00:06:47,039 --> 00:06:49,120
maybe maybe some people other people can

167
00:06:49,120 --> 00:06:52,240
benefit from that as well and

168
00:06:52,240 --> 00:06:54,240
and that's why i did this this github

169
00:06:54,240 --> 00:06:57,360
repo which has almost

170
00:06:57,360 --> 00:07:00,080
almost a thousand stars already right

171
00:07:00,080 --> 00:07:02,319
and i created that in october last year

172
00:07:02,319 --> 00:07:04,960
so it it hasn't been even over a year

173
00:07:04,960 --> 00:07:05,759
yet

174
00:07:05,759 --> 00:07:07,759
and has a lot of information i know

175
00:07:07,759 --> 00:07:09,599
there's some stuff that i need to update

176
00:07:09,599 --> 00:07:12,240
and i'll update it soon so

177
00:07:12,240 --> 00:07:14,880
so yeah feel free to start to fork it

178
00:07:14,880 --> 00:07:16,880
and if you have any other links that are

179
00:07:16,880 --> 00:07:18,319
either related to kubernetes or

180
00:07:18,319 --> 00:07:20,960
kubernetes security you can submit a pr

181
00:07:20,960 --> 00:07:24,000
to me and then i'll take a look and add

182
00:07:24,000 --> 00:07:26,000
to the list as well so there's a lot of

183
00:07:26,000 --> 00:07:29,560
information here

184
00:07:30,080 --> 00:07:33,039
okay so i'll give an overview of about

185
00:07:33,039 --> 00:07:34,800
what is kubernetes so that you can

186
00:07:34,800 --> 00:07:37,360
understand and then we go to set up the

187
00:07:37,360 --> 00:07:39,840
environment and now continue the slides

188
00:07:39,840 --> 00:07:41,680
while the environment is setting up

189
00:07:41,680 --> 00:07:43,599
because it takes a few minutes to set up

190
00:07:43,599 --> 00:07:45,919
the environment on aws

191
00:07:45,919 --> 00:07:49,280
so yeah let's let's do that first

192
00:07:49,280 --> 00:07:51,759
so what is what is kubernetes right so

193
00:07:51,759 --> 00:07:54,240
what is your understanding of kubernetes

194
00:07:54,240 --> 00:07:56,639
if you have uh if you have seen it if

195
00:07:56,639 --> 00:07:58,479
you have used it right

196
00:07:58,479 --> 00:08:00,720
yes kubernetes is an open source system

197
00:08:00,720 --> 00:08:03,039
for automating deployment scaling and

198
00:08:03,039 --> 00:08:04,960
management of contourized applications

199
00:08:04,960 --> 00:08:08,720
right and and but what does that mean

200
00:08:08,720 --> 00:08:11,280
if you remember when docker was released

201
00:08:11,280 --> 00:08:16,160
in 2013 right um there was a lot of uh

202
00:08:16,160 --> 00:08:18,720
hype about using docker and using

203
00:08:18,720 --> 00:08:20,680
containers and and

204
00:08:20,680 --> 00:08:23,599
containerizing everything right

205
00:08:23,599 --> 00:08:26,800
but quickly we learned that by doing

206
00:08:26,800 --> 00:08:27,759
that

207
00:08:27,759 --> 00:08:31,199
there was a lot of uh

208
00:08:31,280 --> 00:08:33,599
it increases the overhead of management

209
00:08:33,599 --> 00:08:35,760
of those applications right because when

210
00:08:35,760 --> 00:08:38,080
docker was released there was no way for

211
00:08:38,080 --> 00:08:39,360
you to

212
00:08:39,360 --> 00:08:40,958
easily manage

213
00:08:40,958 --> 00:08:43,120
multiple multiple containers running on

214
00:08:43,120 --> 00:08:46,720
multiple servers right and

215
00:08:46,720 --> 00:08:49,760
and so kubernetes was was created

216
00:08:49,760 --> 00:08:52,959
as an idea to help manage those

217
00:08:52,959 --> 00:08:55,120
containerized applications right so it's

218
00:08:55,120 --> 00:08:56,000
a no

219
00:08:56,000 --> 00:08:58,560
a container orchestrator as we say it

220
00:08:58,560 --> 00:08:59,360
right

221
00:08:59,360 --> 00:09:02,320
and um they just released the latest

222
00:09:02,320 --> 00:09:06,959
version which was 1.22 right and it has

223
00:09:06,959 --> 00:09:10,480
um before like uh until last year was

224
00:09:10,480 --> 00:09:12,959
new versions were released four times a

225
00:09:12,959 --> 00:09:15,120
year so kind of every quarter and i

226
00:09:15,120 --> 00:09:17,760
think now it's three times a year so it

227
00:09:17,760 --> 00:09:19,920
gets updated very quickly right so you

228
00:09:19,920 --> 00:09:21,040
need to

229
00:09:21,040 --> 00:09:23,360
follow along and keep yourself updated

230
00:09:23,360 --> 00:09:25,360
so that you also can

231
00:09:25,360 --> 00:09:27,680
keep your cluster updated right

232
00:09:27,680 --> 00:09:31,200
um so some of uh quick facts and fun

233
00:09:31,200 --> 00:09:34,080
facts about kubernetes here

234
00:09:34,080 --> 00:09:37,680
it was created by google right in 2014

235
00:09:37,680 --> 00:09:40,399
and it's based on uh on internal

236
00:09:40,399 --> 00:09:42,800
projects from google which are called

237
00:09:42,800 --> 00:09:45,200
borg and omega right which are closed

238
00:09:45,200 --> 00:09:47,839
source right and they they decided to

239
00:09:47,839 --> 00:09:49,920
google has been used containerized

240
00:09:49,920 --> 00:09:52,880
applications for for uh many years now

241
00:09:52,880 --> 00:09:54,640
and that's why they worked on this

242
00:09:54,640 --> 00:09:57,920
project kubernetes means uh

243
00:09:57,920 --> 00:10:00,320
it's a word from greek which means

244
00:10:00,320 --> 00:10:03,440
helmsman right and helmsman is like the

245
00:10:03,440 --> 00:10:06,480
the person who kind of drives the ship

246
00:10:06,480 --> 00:10:09,279
the ship right a big ship and in kind of

247
00:10:09,279 --> 00:10:10,160
a

248
00:10:10,160 --> 00:10:12,640
allusion to docker which are the

249
00:10:12,640 --> 00:10:15,519
containers right and the person kind of

250
00:10:15,519 --> 00:10:18,000
steering the wheel of the ship there

251
00:10:18,000 --> 00:10:20,560
that's that's the helmsman right

252
00:10:20,560 --> 00:10:21,600
um

253
00:10:21,600 --> 00:10:24,000
sometimes can be the captain sometimes

254
00:10:24,000 --> 00:10:27,200
it's another person so that's why um

255
00:10:27,200 --> 00:10:29,680
and that's another reason why the icon

256
00:10:29,680 --> 00:10:32,000
for kubernetes is a helm right that's

257
00:10:32,000 --> 00:10:34,000
what we call this kind of steering wheel

258
00:10:34,000 --> 00:10:36,720
of a ship right and it's a helm

259
00:10:36,720 --> 00:10:37,760
um

260
00:10:37,760 --> 00:10:41,120
yeah uh another fun fact burku brunei's

261
00:10:41,120 --> 00:10:45,279
is it's also called gates right kas and

262
00:10:45,279 --> 00:10:47,680
the reason for that is just because

263
00:10:47,680 --> 00:10:50,800
there is eight letters between k the k

264
00:10:50,800 --> 00:10:53,040
and the yes of kubernetes right if you

265
00:10:53,040 --> 00:10:55,120
count the letters there in between the

266
00:10:55,120 --> 00:10:57,440
uber nettie it's eight letters so that's

267
00:10:57,440 --> 00:11:00,560
why an abbreviation of that um that's

268
00:11:00,560 --> 00:11:02,800
the why the way that they do it

269
00:11:02,800 --> 00:11:04,480
um

270
00:11:04,480 --> 00:11:07,120
another thing kubernetes developed in go

271
00:11:07,120 --> 00:11:10,079
golang right it's as same as docker and

272
00:11:10,079 --> 00:11:11,920
many other um

273
00:11:11,920 --> 00:11:14,640
cloud native applications as well

274
00:11:14,640 --> 00:11:17,680
so yeah

275
00:11:18,240 --> 00:11:19,360
okay

276
00:11:19,360 --> 00:11:21,519
let's move on

277
00:11:21,519 --> 00:11:24,880
uh why kubernetes right so since since

278
00:11:24,880 --> 00:11:26,560
it's important to understand what

279
00:11:26,560 --> 00:11:29,279
kubernetes is it's also important to

280
00:11:29,279 --> 00:11:31,680
understand why kubernetes like should

281
00:11:31,680 --> 00:11:34,000
you use kubernetes in your organization

282
00:11:34,000 --> 00:11:36,720
right you don't want to go

283
00:11:36,720 --> 00:11:39,680
go to your company on on monday and say

284
00:11:39,680 --> 00:11:40,959
no we should move everything to

285
00:11:40,959 --> 00:11:42,640
kubernetes because kubernetes is the

286
00:11:42,640 --> 00:11:44,240
next big thing right

287
00:11:44,240 --> 00:11:46,800
um there is a lot of uh

288
00:11:46,800 --> 00:11:50,000
a lot of management required to run

289
00:11:50,000 --> 00:11:53,120
kubernetes clusters right and and as i

290
00:11:53,120 --> 00:11:55,440
said like i think personally from my

291
00:11:55,440 --> 00:11:58,160
perspective it's a very complex system

292
00:11:58,160 --> 00:12:00,480
it's hard to understand and especially

293
00:12:00,480 --> 00:12:03,839
if you don't have the the background of

294
00:12:03,839 --> 00:12:05,600
what kubernetes

295
00:12:05,600 --> 00:12:08,399
do in behind the curtains right so once

296
00:12:08,399 --> 00:12:10,720
you understand that that gets easier to

297
00:12:10,720 --> 00:12:13,120
to know what it's doing but but it's

298
00:12:13,120 --> 00:12:13,839
like

299
00:12:13,839 --> 00:12:16,320
you need to have that background right

300
00:12:16,320 --> 00:12:19,360
so yeah just a kind of a

301
00:12:19,360 --> 00:12:21,760
a comic here from dilbert right it's not

302
00:12:21,760 --> 00:12:23,600
everything that needs to be okay

303
00:12:23,600 --> 00:12:26,079
kubernetes right doesn't mean like that

304
00:12:26,079 --> 00:12:27,360
it's

305
00:12:27,360 --> 00:12:29,519
the you have uh

306
00:12:29,519 --> 00:12:31,440
very few people that really really

307
00:12:31,440 --> 00:12:33,200
understand kubernetes properly and

308
00:12:33,200 --> 00:12:36,880
especially even kubernetes security and

309
00:12:36,880 --> 00:12:40,399
and yeah it's if you want to

310
00:12:40,399 --> 00:12:42,720
start moving your applications to your

311
00:12:42,720 --> 00:12:44,320
kubernetes cluster then you're going to

312
00:12:44,320 --> 00:12:46,160
require not just

313
00:12:46,160 --> 00:12:49,680
uh budget right resources to do that but

314
00:12:49,680 --> 00:12:52,959
also uh skilled people to maintain your

315
00:12:52,959 --> 00:12:54,800
clusters right so

316
00:12:54,800 --> 00:12:57,360
think about that before you go into okay

317
00:12:57,360 --> 00:12:58,800
yeah let's let's move everything to

318
00:12:58,800 --> 00:13:01,360
kubernetes it might not be uh the

319
00:13:01,360 --> 00:13:04,000
solution and it might not be uh uh

320
00:13:04,000 --> 00:13:06,240
required for your needs and your

321
00:13:06,240 --> 00:13:09,279
organization needs

322
00:13:10,720 --> 00:13:11,760
okay

323
00:13:11,760 --> 00:13:15,360
uh what is the cncf right the cncf is

324
00:13:15,360 --> 00:13:17,680
the cloud native computing foundation

325
00:13:17,680 --> 00:13:20,560
it's the foundation uh uh it's a soviet

326
00:13:20,560 --> 00:13:22,959
foundation of the linux foundation

327
00:13:22,959 --> 00:13:25,760
it helps and maintain many different

328
00:13:25,760 --> 00:13:29,279
projects from uh what they consider

329
00:13:29,279 --> 00:13:31,040
cloud native right

330
00:13:31,040 --> 00:13:32,880
so kubernetes is just one of them there

331
00:13:32,880 --> 00:13:34,240
are many different others that you can

332
00:13:34,240 --> 00:13:36,480
see here and some of them are even part

333
00:13:36,480 --> 00:13:40,560
of kubernetes as lcd and core dns and

334
00:13:40,560 --> 00:13:43,120
also helm to to to

335
00:13:43,120 --> 00:13:45,519
package

336
00:13:45,600 --> 00:13:47,760
kubernetes applications as well so

337
00:13:47,760 --> 00:13:49,440
there's many different ones right so it

338
00:13:49,440 --> 00:13:51,519
doesn't mean just kubernetes when we're

339
00:13:51,519 --> 00:13:54,240
talking about cloud native uh cncf the

340
00:13:54,240 --> 00:13:56,079
cloud native computing foundation and

341
00:13:56,079 --> 00:13:58,240
cloud native security we're not just

342
00:13:58,240 --> 00:14:00,639
talking about kubernetes right this is

343
00:14:00,639 --> 00:14:03,199
the the url there at the bottom the l

344
00:14:03,199 --> 00:14:06,000
dot cncf dot io if you go there it's

345
00:14:06,000 --> 00:14:08,399
going to show you a lot of uh different

346
00:14:08,399 --> 00:14:10,079
projects that are related to cloud

347
00:14:10,079 --> 00:14:12,800
native right and just a quick thing here

348
00:14:12,800 --> 00:14:14,560
about um

349
00:14:14,560 --> 00:14:17,920
what what means to be a cloud native

350
00:14:17,920 --> 00:14:20,399
right doesn't mean that the application

351
00:14:20,399 --> 00:14:22,560
only runs in the cloud right and we're

352
00:14:22,560 --> 00:14:23,839
going to talk probably going to talk

353
00:14:23,839 --> 00:14:26,160
about that in the next few slides but

354
00:14:26,160 --> 00:14:27,519
just

355
00:14:27,519 --> 00:14:29,279
just to add to that

356
00:14:29,279 --> 00:14:32,399
um being cloud native is is there's

357
00:14:32,399 --> 00:14:33,760
different characteristics and

358
00:14:33,760 --> 00:14:36,800
applications that they uh they have and

359
00:14:36,800 --> 00:14:39,120
they're more they're they're they're

360
00:14:39,120 --> 00:14:42,079
created to run in cloud-native cloud

361
00:14:42,079 --> 00:14:44,240
environments but they can also run on

362
00:14:44,240 --> 00:14:45,920
premises right there are there are

363
00:14:45,920 --> 00:14:48,720
organizations and and many different

364
00:14:48,720 --> 00:14:50,480
companies that run kubernetes on

365
00:14:50,480 --> 00:14:52,079
premises right

366
00:14:52,079 --> 00:14:54,319
okay

367
00:14:54,800 --> 00:14:55,920
yeah so

368
00:14:55,920 --> 00:14:58,320
that's the slide here as i said like

369
00:14:58,320 --> 00:15:01,920
what what it means to be cloud native

370
00:15:01,920 --> 00:15:04,560
the definition here it's from the cncf

371
00:15:04,560 --> 00:15:06,880
itself and can be found on their github

372
00:15:06,880 --> 00:15:10,240
and basically uh as they say to a cloud

373
00:15:10,240 --> 00:15:12,160
to an application to be cloud native he

374
00:15:12,160 --> 00:15:14,320
needs to have this characteristics on

375
00:15:14,320 --> 00:15:16,880
the left your seven characteristics and

376
00:15:16,880 --> 00:15:19,120
some examples here that you probably are

377
00:15:19,120 --> 00:15:21,279
using or you probably heard about right

378
00:15:21,279 --> 00:15:24,000
containers service meshes micro services

379
00:15:24,000 --> 00:15:26,639
in general immutable infrastructure or

380
00:15:26,639 --> 00:15:29,040
infrastructure as code and declarative

381
00:15:29,040 --> 00:15:31,920
api so these are some examples of cloud

382
00:15:31,920 --> 00:15:34,639
native applications

383
00:15:34,639 --> 00:15:35,839
okay

384
00:15:35,839 --> 00:15:38,399
okay so i'm going to stop here before i

385
00:15:38,399 --> 00:15:40,959
go into the architecture and explain

386
00:15:40,959 --> 00:15:43,680
all the details i'm going to share my on

387
00:15:43,680 --> 00:15:47,199
my screen and and try to uh

388
00:15:47,199 --> 00:15:49,920
have everyone follow along to set up

389
00:15:49,920 --> 00:15:53,360
their environment okay

390
00:15:53,360 --> 00:15:56,399
so let me stop sharing let's see if it

391
00:15:56,399 --> 00:15:57,839
can

392
00:15:57,839 --> 00:16:02,160
oops i can share again one second

393
00:16:07,279 --> 00:16:09,839
okay

394
00:16:11,920 --> 00:16:13,360
okay

395
00:16:13,360 --> 00:16:15,759
okay can you see my screen yeah good

396
00:16:15,759 --> 00:16:18,959
so the uh one of the prerequisites of

397
00:16:18,959 --> 00:16:20,480
the workshop

398
00:16:20,480 --> 00:16:23,120
as we mentioned he's having an aws

399
00:16:23,120 --> 00:16:24,720
account right so

400
00:16:24,720 --> 00:16:27,040
go uh if you're not logged in on your

401
00:16:27,040 --> 00:16:30,000
aws account please go ahead and log in

402
00:16:30,000 --> 00:16:32,079
and and what we're gonna do as i said

403
00:16:32,079 --> 00:16:34,639
like we're going to

404
00:16:34,639 --> 00:16:36,959
deploy a

405
00:16:36,959 --> 00:16:39,680
a cloud9 instance right which is this

406
00:16:39,680 --> 00:16:41,839
service from aws and we're going to find

407
00:16:41,839 --> 00:16:43,519
out very soon how it works it's

408
00:16:43,519 --> 00:16:47,040
basically an online version of vs code

409
00:16:47,040 --> 00:16:48,000
um

410
00:16:48,000 --> 00:16:50,160
so if you use vs code before you're

411
00:16:50,160 --> 00:16:53,040
gonna find it very easy to follow along

412
00:16:53,040 --> 00:16:55,839
and from that right the idea of why why

413
00:16:55,839 --> 00:16:59,040
i'm using this right the idea is that i

414
00:16:59,040 --> 00:17:00,639
want to make sure that everyone has the

415
00:17:00,639 --> 00:17:02,959
same environment right and so if you're

416
00:17:02,959 --> 00:17:06,079
using i didn't want to like create a vm

417
00:17:06,079 --> 00:17:08,319
and deploy and send it to you to

418
00:17:08,319 --> 00:17:10,079
download and everything let's let's do

419
00:17:10,079 --> 00:17:12,959
it online right and using cloud9 is a

420
00:17:12,959 --> 00:17:14,799
good way to everyone is going to have

421
00:17:14,799 --> 00:17:17,280
the same environment if we use the same

422
00:17:17,280 --> 00:17:19,919
uh configuration here and then from

423
00:17:19,919 --> 00:17:20,799
there

424
00:17:20,799 --> 00:17:23,439
we we can set up the instance to deploy

425
00:17:23,439 --> 00:17:26,400
the cluster uh afterwards right once we

426
00:17:26,400 --> 00:17:28,559
have the cloud nightings set up and that

427
00:17:28,559 --> 00:17:31,280
takes uh that's that very quickly but

428
00:17:31,280 --> 00:17:34,480
then we configured the cluster on aws as

429
00:17:34,480 --> 00:17:36,320
well

430
00:17:36,320 --> 00:17:37,360
so

431
00:17:37,360 --> 00:17:39,600
okay let's start here and i'm gonna

432
00:17:39,600 --> 00:17:41,360
create one from scratch i have some

433
00:17:41,360 --> 00:17:43,200
created here but i'm gonna create a new

434
00:17:43,200 --> 00:17:46,200
one

435
00:17:47,039 --> 00:17:50,640
so let's see cloud

436
00:17:50,640 --> 00:17:52,799
out village right

437
00:17:52,799 --> 00:17:54,160
workshop

438
00:17:54,160 --> 00:17:56,559
so name the name you can can give any

439
00:17:56,559 --> 00:17:58,960
name that you want right just so just

440
00:17:58,960 --> 00:18:01,360
remember if you have different uh cloud9

441
00:18:01,360 --> 00:18:02,480
instances

442
00:18:02,480 --> 00:18:04,400
but yeah you can add a description as

443
00:18:04,400 --> 00:18:06,640
well

444
00:18:06,960 --> 00:18:07,919
here

445
00:18:07,919 --> 00:18:09,919
uh you have the settings of the

446
00:18:09,919 --> 00:18:11,760
environment of your cloud linings it's

447
00:18:11,760 --> 00:18:14,480
going to deploy an ec2 right so the way

448
00:18:14,480 --> 00:18:17,520
that cloud9 works it's deploying an ec2

449
00:18:17,520 --> 00:18:19,520
but it's going to configure it that's

450
00:18:19,520 --> 00:18:22,480
going to work as an online developer

451
00:18:22,480 --> 00:18:24,480
developing platform right so it's

452
00:18:24,480 --> 00:18:27,039
basically online vs code that's hosted

453
00:18:27,039 --> 00:18:30,000
on aws so that you have uh uh

454
00:18:30,000 --> 00:18:31,760
all your code there if you want you can

455
00:18:31,760 --> 00:18:33,200
use that as well

456
00:18:33,200 --> 00:18:34,960
um so yeah basically it's going to

457
00:18:34,960 --> 00:18:37,520
create a new ec2 environment right the

458
00:18:37,520 --> 00:18:40,480
idea here you can use t2 micro right

459
00:18:40,480 --> 00:18:42,400
um which is free

460
00:18:42,400 --> 00:18:45,200
uh free tier if you have free tier um

461
00:18:45,200 --> 00:18:47,679
yeah just another note here before

462
00:18:47,679 --> 00:18:49,360
before we move on

463
00:18:49,360 --> 00:18:51,520
there might be some charges because not

464
00:18:51,520 --> 00:18:53,520
because of this cloud9 but once we

465
00:18:53,520 --> 00:18:55,520
deploy the cluster and eks and

466
00:18:55,520 --> 00:18:56,400
everything

467
00:18:56,400 --> 00:18:59,200
uh depending on how long you leave the

468
00:18:59,200 --> 00:19:01,760
cluster online there might be some small

469
00:19:01,760 --> 00:19:04,559
charges on on on your

470
00:19:04,559 --> 00:19:07,200
credit card on your account right but

471
00:19:07,200 --> 00:19:08,960
but at the end of the workshop i'm gonna

472
00:19:08,960 --> 00:19:10,880
show how to remove everything so that

473
00:19:10,880 --> 00:19:13,840
you don't leave anything uh running and

474
00:19:13,840 --> 00:19:16,720
don't get charged a lot of money okay

475
00:19:16,720 --> 00:19:18,400
sounds good

476
00:19:18,400 --> 00:19:21,039
okay so here if you're out there

477
00:19:21,039 --> 00:19:23,760
um basically we're going to create a new

478
00:19:23,760 --> 00:19:26,960
c2 instance i i'm it doesn't matter like

479
00:19:26,960 --> 00:19:29,120
i don't need that large instance for the

480
00:19:29,120 --> 00:19:31,120
cloud 90s because i'm only dealing with

481
00:19:31,120 --> 00:19:33,520
code and executing some commands there

482
00:19:33,520 --> 00:19:34,960
so that's fine

483
00:19:34,960 --> 00:19:37,520
the platform can be

484
00:19:37,520 --> 00:19:39,280
amazon linux 2

485
00:19:39,280 --> 00:19:41,919
and i can leave this everything default

486
00:19:41,919 --> 00:19:45,440
here after the 30 minutes of idle time

487
00:19:45,440 --> 00:19:48,240
if i'm not using the cloud9 instance

488
00:19:48,240 --> 00:19:50,080
it's going to shut down

489
00:19:50,080 --> 00:19:51,919
automatically here so i can leave

490
00:19:51,919 --> 00:19:53,280
everything here

491
00:19:53,280 --> 00:19:55,600
as it is right by default

492
00:19:55,600 --> 00:19:57,919
and i'm on the right region yeah i'm on

493
00:19:57,919 --> 00:20:00,799
usb s1 so i'm going to deploy it on usb

494
00:20:00,799 --> 00:20:03,919
s1 the cluster i can deploy anywhere and

495
00:20:03,919 --> 00:20:05,919
and we're going to see how to do that

496
00:20:05,919 --> 00:20:07,679
but basically for the cloud9 instance

497
00:20:07,679 --> 00:20:09,200
make sure that everyone on is on the

498
00:20:09,200 --> 00:20:12,400
same uh uh same region and they have

499
00:20:12,400 --> 00:20:14,480
this access to the same features right

500
00:20:14,480 --> 00:20:16,480
that's that's the only uh the only

501
00:20:16,480 --> 00:20:19,200
reason for that

502
00:20:19,520 --> 00:20:23,280
okay here just uh um an overview of of

503
00:20:23,280 --> 00:20:25,440
the settings that i set up basically

504
00:20:25,440 --> 00:20:27,919
everything is default right now

505
00:20:27,919 --> 00:20:30,000
uh we're going to create a new row for

506
00:20:30,000 --> 00:20:32,960
for uh my instance later but let's do

507
00:20:32,960 --> 00:20:36,559
let's leave it at that right now

508
00:20:39,679 --> 00:20:41,520
okay so it's it's creating my

509
00:20:41,520 --> 00:20:43,520
environment it might take a few seconds

510
00:20:43,520 --> 00:20:46,240
to minutes right

511
00:20:46,240 --> 00:20:48,640
and this is going to be like if you use

512
00:20:48,640 --> 00:20:51,200
vs code before if you work with

513
00:20:51,200 --> 00:20:53,760
coding in and programming in vs code

514
00:20:53,760 --> 00:20:55,760
you're going to find it very interface

515
00:20:55,760 --> 00:20:58,159
is very similar there is a few things

516
00:20:58,159 --> 00:20:59,840
that we need to do here

517
00:20:59,840 --> 00:21:00,720
um

518
00:21:00,720 --> 00:21:03,039
once the environment is set up

519
00:21:03,039 --> 00:21:07,440
and and so creating an iem uh row for

520
00:21:07,440 --> 00:21:10,480
our instance and also disabling some

521
00:21:10,480 --> 00:21:12,640
credentials so i'm gonna show here once

522
00:21:12,640 --> 00:21:15,200
the cloud nine is is completed

523
00:21:15,200 --> 00:21:16,880
and deployed right

524
00:21:16,880 --> 00:21:20,240
um let me see

525
00:21:20,480 --> 00:21:23,440
see if it's taking a lot of time

526
00:21:23,440 --> 00:21:26,000
yeah let me go back

527
00:21:26,000 --> 00:21:29,520
um yeah if i have um i don't know if we

528
00:21:29,520 --> 00:21:31,520
have any questions so far

529
00:21:31,520 --> 00:21:34,000
but yeah feel free to ask them if you're

530
00:21:34,000 --> 00:21:35,760
stuck if you

531
00:21:35,760 --> 00:21:37,919
if you're like you missed something uh

532
00:21:37,919 --> 00:21:39,760
uh until now

533
00:21:39,760 --> 00:21:42,080
feel free to uh send the questions over

534
00:21:42,080 --> 00:21:44,559
through the the form the google form

535
00:21:44,559 --> 00:21:46,480
okay no questions sounds good awesome

536
00:21:46,480 --> 00:21:48,799
thank you

537
00:21:49,520 --> 00:21:51,760
so yeah let's let's let me wait here

538
00:21:51,760 --> 00:21:54,320
once okay now the client name cloud9

539
00:21:54,320 --> 00:21:55,840
instance is set up

540
00:21:55,840 --> 00:21:58,159
as you can see it's basically an ide

541
00:21:58,159 --> 00:21:59,679
platform

542
00:21:59,679 --> 00:22:01,280
online

543
00:22:01,280 --> 00:22:04,720
i have a terminal here um i can add new

544
00:22:04,720 --> 00:22:08,080
files and new terminals as well right

545
00:22:08,080 --> 00:22:10,320
okay

546
00:22:10,320 --> 00:22:14,720
so what we're going to do i mean

547
00:22:15,200 --> 00:22:17,440
new terminal

548
00:22:17,440 --> 00:22:18,640
okay

549
00:22:18,640 --> 00:22:20,799
is the font good enough

550
00:22:20,799 --> 00:22:23,600
uh for everyone to see

551
00:22:23,600 --> 00:22:25,280
i don't need maybe

552
00:22:25,280 --> 00:22:27,280
let's leave it like that okay

553
00:22:27,280 --> 00:22:29,200
so this is basically the environment

554
00:22:29,200 --> 00:22:30,960
that we're going to use

555
00:22:30,960 --> 00:22:31,679
to

556
00:22:31,679 --> 00:22:35,520
uh deploy our cluster from right

557
00:22:35,520 --> 00:22:37,600
okay so a few things that we need to set

558
00:22:37,600 --> 00:22:40,480
up here and i'm going to show you

559
00:22:40,480 --> 00:22:42,720
is oops sorry

560
00:22:42,720 --> 00:22:45,600
it's on this settings here on the top

561
00:22:45,600 --> 00:22:48,159
right corner of my

562
00:22:48,159 --> 00:22:50,559
uh interface there's

563
00:22:50,559 --> 00:22:54,400
a gear icon called preferences right and

564
00:22:54,400 --> 00:22:59,360
in this gear icon i need to go to

565
00:23:00,480 --> 00:23:03,200
aws settings

566
00:23:03,200 --> 00:23:05,919
and on the aws settings i'm going to

567
00:23:05,919 --> 00:23:08,400
disable this aws

568
00:23:08,400 --> 00:23:11,760
manage temporary credentials right all i

569
00:23:11,760 --> 00:23:14,240
need to do is click here and disable

570
00:23:14,240 --> 00:23:15,120
that

571
00:23:15,120 --> 00:23:17,039
and that should be fine

572
00:23:17,039 --> 00:23:19,360
okay

573
00:23:19,760 --> 00:23:23,120
everyone got that preferences go to aws

574
00:23:23,120 --> 00:23:26,559
settings and disable the aws manage

575
00:23:26,559 --> 00:23:30,400
temporary credentials good

576
00:23:30,400 --> 00:23:32,320
so after that

577
00:23:32,320 --> 00:23:33,679
um

578
00:23:33,679 --> 00:23:35,200
let's see

579
00:23:35,200 --> 00:23:38,640
let's now we're going to

580
00:23:38,799 --> 00:23:39,600
uh

581
00:23:39,600 --> 00:23:41,760
let's let's let's create the now we're

582
00:23:41,760 --> 00:23:45,039
going to go back to the aws console to

583
00:23:45,039 --> 00:23:47,440
create

584
00:23:48,080 --> 00:23:51,440
to create uh uh the iam road that i need

585
00:23:51,440 --> 00:23:53,360
to give to this

586
00:23:53,360 --> 00:23:55,840
uh ec2 instance because the cloud9 is an

587
00:23:55,840 --> 00:23:57,600
easy to incest to be able to have

588
00:23:57,600 --> 00:24:00,320
permissions to to deal to talk to ek

589
00:24:00,320 --> 00:24:02,400
acid and create clusters

590
00:24:02,400 --> 00:24:04,720
yes the workshop is going is is being

591
00:24:04,720 --> 00:24:06,400
recorded and it's going to be shared

592
00:24:06,400 --> 00:24:08,080
later as well

593
00:24:08,080 --> 00:24:10,159
so yeah

594
00:24:10,159 --> 00:24:11,039
fine

595
00:24:11,039 --> 00:24:14,559
okay let me go back to

596
00:24:14,960 --> 00:24:18,400
the aws console here let me open another

597
00:24:18,400 --> 00:24:19,440
tab

598
00:24:19,440 --> 00:24:22,559
and i think i need to share

599
00:24:22,559 --> 00:24:25,279
stop sharing this one and share the

600
00:24:25,279 --> 00:24:29,480
other one sorry about that

601
00:24:33,039 --> 00:24:35,120
okay

602
00:24:35,120 --> 00:24:37,279
so yeah on oops

603
00:24:37,279 --> 00:24:39,200
i think i'm in the console yeah

604
00:24:39,200 --> 00:24:43,120
on aws console what we're going to do is

605
00:24:43,120 --> 00:24:46,080
create an im row and

606
00:24:46,080 --> 00:24:48,400
please don't do this on your

607
00:24:48,400 --> 00:24:50,559
production account because what we're

608
00:24:50,559 --> 00:24:53,520
going to do is create an iam role with

609
00:24:53,520 --> 00:24:54,240
uh

610
00:24:54,240 --> 00:24:56,480
administrator permissions administrator

611
00:24:56,480 --> 00:24:57,760
privileges

612
00:24:57,760 --> 00:25:01,039
so that we can give um

613
00:25:01,039 --> 00:25:02,960
can give the cloud9 instance permissions

614
00:25:02,960 --> 00:25:04,400
to create the cluster and everything

615
00:25:04,400 --> 00:25:05,919
right so that we don't have any issues

616
00:25:05,919 --> 00:25:07,840
we don't face any issues we're going to

617
00:25:07,840 --> 00:25:11,039
give this administration a row so i'm

618
00:25:11,039 --> 00:25:14,720
going to iam and let me let me go back

619
00:25:14,720 --> 00:25:17,840
so what i did was okay i went to iam

620
00:25:17,840 --> 00:25:19,120
which is the

621
00:25:19,120 --> 00:25:21,600
the identity and access management uh

622
00:25:21,600 --> 00:25:23,840
service from aws

623
00:25:23,840 --> 00:25:26,080
and basically what we're going to do is

624
00:25:26,080 --> 00:25:27,760
create a role

625
00:25:27,760 --> 00:25:29,919
for that

626
00:25:29,919 --> 00:25:32,960
create row

627
00:25:32,960 --> 00:25:36,000
i go here to rows on the left side and

628
00:25:36,000 --> 00:25:38,799
create row

629
00:25:39,440 --> 00:25:40,480
and here

630
00:25:40,480 --> 00:25:44,000
i select aws service that's selected by

631
00:25:44,000 --> 00:25:47,039
default ec2 okay

632
00:25:47,039 --> 00:25:51,679
and then i click next in permissions

633
00:25:52,400 --> 00:25:54,640
under permissions it's going to load and

634
00:25:54,640 --> 00:25:57,279
i'm going to give this row administrator

635
00:25:57,279 --> 00:25:59,440
access to my account right so

636
00:25:59,440 --> 00:26:01,760
be very careful with that don't use that

637
00:26:01,760 --> 00:26:03,840
in in a production environment all right

638
00:26:03,840 --> 00:26:05,360
we don't want that because that's too

639
00:26:05,360 --> 00:26:06,799
permissive right i don't want to give

640
00:26:06,799 --> 00:26:08,720
that iam roll this is just for the

641
00:26:08,720 --> 00:26:11,200
workshop so that we don't

642
00:26:11,200 --> 00:26:13,039
don't have any issues deploying the

643
00:26:13,039 --> 00:26:14,159
cluster

644
00:26:14,159 --> 00:26:15,919
uh you can add tags but that's not

645
00:26:15,919 --> 00:26:17,679
needed

646
00:26:17,679 --> 00:26:20,559
and row name

647
00:26:21,360 --> 00:26:22,960
c9

648
00:26:22,960 --> 00:26:24,400
i'm gonna do cloud

649
00:26:24,400 --> 00:26:26,480
cloud9

650
00:26:26,480 --> 00:26:29,279
instance row okay

651
00:26:29,279 --> 00:26:31,120
you can put any name just remember that

652
00:26:31,120 --> 00:26:33,520
name because you need to attach that to

653
00:26:33,520 --> 00:26:36,080
your cloud9 instance okay

654
00:26:36,080 --> 00:26:39,200
so what i did was just repeating what is

655
00:26:39,200 --> 00:26:42,559
what i did was i went to iam i went to

656
00:26:42,559 --> 00:26:44,480
row and create a new row

657
00:26:44,480 --> 00:26:47,840
selected ec2 and gave uh the policies

658
00:26:47,840 --> 00:26:50,640
administrator access and created a name

659
00:26:50,640 --> 00:26:54,080
for it right that's it

660
00:26:56,400 --> 00:26:58,960
okay the role the role has been created

661
00:26:58,960 --> 00:27:01,279
so the next thing that i need to do

662
00:27:01,279 --> 00:27:03,120
is go back to

663
00:27:03,120 --> 00:27:05,520
i'm going to the ec2 now

664
00:27:05,520 --> 00:27:08,159
and attach that row to my easy tuning

665
00:27:08,159 --> 00:27:12,400
that's my cloud982 instance right

666
00:27:12,720 --> 00:27:14,799
so i'm going to ec2 here that's why i

667
00:27:14,799 --> 00:27:18,000
tap ec2 and okay to see my machines

668
00:27:18,000 --> 00:27:19,520
running i see that there is an instance

669
00:27:19,520 --> 00:27:21,440
running make sure that you're in on the

670
00:27:21,440 --> 00:27:23,120
same region that you deployed your

671
00:27:23,120 --> 00:27:25,279
cloud9 instance

672
00:27:25,279 --> 00:27:27,360
and basically

673
00:27:27,360 --> 00:27:29,520
see there is this instance running here

674
00:27:29,520 --> 00:27:32,480
that's that's why i i have the cloud9

675
00:27:32,480 --> 00:27:35,679
running as well so select the instance

676
00:27:35,679 --> 00:27:38,320
here the ec2 and

677
00:27:38,320 --> 00:27:40,640
on actions

678
00:27:40,640 --> 00:27:42,000
security

679
00:27:42,000 --> 00:27:45,120
modify iim roll okay

680
00:27:45,120 --> 00:27:47,039
that that's going to

681
00:27:47,039 --> 00:27:49,440
uh we're going to attach that row that

682
00:27:49,440 --> 00:27:51,679
we just created to the distances

683
00:27:51,679 --> 00:27:54,720
so again select my instance go to

684
00:27:54,720 --> 00:27:59,440
actions security and modify iam row

685
00:27:59,440 --> 00:28:01,760
and here i have my row that i just

686
00:28:01,760 --> 00:28:04,399
created the cloud9 instance row and i'm

687
00:28:04,399 --> 00:28:06,320
going to give it i'm going to attach

688
00:28:06,320 --> 00:28:08,960
that to the instance and i'm going to

689
00:28:08,960 --> 00:28:10,880
save

690
00:28:10,880 --> 00:28:11,840
okay

691
00:28:11,840 --> 00:28:13,039
if you got

692
00:28:13,039 --> 00:28:15,600
uh get this message so successfully

693
00:28:15,600 --> 00:28:18,240
attach your role to the instance that's

694
00:28:18,240 --> 00:28:20,000
that's great that's

695
00:28:20,000 --> 00:28:22,240
all we need so far

696
00:28:22,240 --> 00:28:24,240
um

697
00:28:24,240 --> 00:28:25,679
is is anyone

698
00:28:25,679 --> 00:28:29,120
uh behind does anyone have any questions

699
00:28:29,120 --> 00:28:31,679
anyone struggling with something feel

700
00:28:31,679 --> 00:28:34,720
free to ask okay

701
00:28:34,720 --> 00:28:37,840
so now that i set this up

702
00:28:37,840 --> 00:28:39,360
i need to

703
00:28:39,360 --> 00:28:43,120
go back to the cloud9 and install a few

704
00:28:43,120 --> 00:28:45,360
things on my cloud9 instance

705
00:28:45,360 --> 00:28:46,399
to

706
00:28:46,399 --> 00:28:48,720
be able to deploy the cluster right so

707
00:28:48,720 --> 00:28:50,799
some things i'm going to install

708
00:28:50,799 --> 00:28:52,799
is uh

709
00:28:52,799 --> 00:28:55,279
cube ctl

710
00:28:55,279 --> 00:28:57,520
some some other packages so we're going

711
00:28:57,520 --> 00:28:59,520
to follow along let me share that with

712
00:28:59,520 --> 00:29:01,120
you

713
00:29:01,120 --> 00:29:04,639
let's see if i have it here

714
00:29:07,840 --> 00:29:10,158
okay

715
00:29:11,039 --> 00:29:13,679
yes let me share my s let me go back to

716
00:29:13,679 --> 00:29:15,279
my cloud nines just because i'm not

717
00:29:15,279 --> 00:29:16,640
sharing that

718
00:29:16,640 --> 00:29:18,720
yeah

719
00:29:18,720 --> 00:29:22,880
sorry for this switching here but

720
00:29:23,039 --> 00:29:26,880
i don't wanna share any

721
00:29:26,880 --> 00:29:29,039
any sensitive information right

722
00:29:29,039 --> 00:29:30,640
yeah okay

723
00:29:30,640 --> 00:29:32,320
so i'm here

724
00:29:32,320 --> 00:29:34,399
one of the things that i need to do here

725
00:29:34,399 --> 00:29:37,520
on the cloud nine i've attached remember

726
00:29:37,520 --> 00:29:40,559
if you haven't done the aws settings

727
00:29:40,559 --> 00:29:43,039
right disable that as well just let me

728
00:29:43,039 --> 00:29:44,399
show it again

729
00:29:44,399 --> 00:29:47,279
right the temporary credentials

730
00:29:47,279 --> 00:29:48,559
and

731
00:29:48,559 --> 00:29:50,720
yeah okay so you can see that there is a

732
00:29:50,720 --> 00:29:53,039
kind of a directory structure here it

733
00:29:53,039 --> 00:29:54,399
shows your environment

734
00:29:54,399 --> 00:29:56,720
i can have many terminals and all that

735
00:29:56,720 --> 00:29:58,480
stuff that's great

736
00:29:58,480 --> 00:30:00,399
so

737
00:30:00,399 --> 00:30:03,760
now we're going to

738
00:30:04,000 --> 00:30:06,720
use this

739
00:30:07,360 --> 00:30:10,080
this project on github and and

740
00:30:10,080 --> 00:30:13,039
to download two files that that's all i

741
00:30:13,039 --> 00:30:15,279
need to set up my cluster basically off

742
00:30:15,279 --> 00:30:17,200
and i'm going to install uh some some

743
00:30:17,200 --> 00:30:19,120
package and some tools but basically

744
00:30:19,120 --> 00:30:21,919
those two files it's all i need to set

745
00:30:21,919 --> 00:30:24,000
up my cluster um

746
00:30:24,000 --> 00:30:26,720
so let me show you here we clone and

747
00:30:26,720 --> 00:30:30,880
this url the kubernetes sac 101 workshop

748
00:30:30,880 --> 00:30:33,120
if you download that

749
00:30:33,120 --> 00:30:35,039
you can see that there is basically two

750
00:30:35,039 --> 00:30:36,880
files there and i'm going to explain

751
00:30:36,880 --> 00:30:40,480
what they are soon i'm going to

752
00:30:40,480 --> 00:30:42,480
increase the font

753
00:30:42,480 --> 00:30:43,919
let me close this i don't think we're

754
00:30:43,919 --> 00:30:47,679
going to need this okay

755
00:30:48,000 --> 00:30:49,120
here

756
00:30:49,120 --> 00:30:50,399
and yeah

757
00:30:50,399 --> 00:30:52,000
so you can see that there is two files

758
00:30:52,000 --> 00:30:54,080
here two yml files right and if you

759
00:30:54,080 --> 00:30:56,000
haven't played with yaml before that's

760
00:30:56,000 --> 00:30:58,720
that's something that uh kubernetes uses

761
00:30:58,720 --> 00:30:59,679
a lot

762
00:30:59,679 --> 00:31:02,000
right to um

763
00:31:02,000 --> 00:31:05,039
to manage uh to deploy applications and

764
00:31:05,039 --> 00:31:07,279
objects on kubernetes right they're all

765
00:31:07,279 --> 00:31:09,519
usually ml files that

766
00:31:09,519 --> 00:31:11,440
that turn into json are sent to the

767
00:31:11,440 --> 00:31:13,360
kubernetes api server and i'm going to

768
00:31:13,360 --> 00:31:15,039
explain that soon

769
00:31:15,039 --> 00:31:16,240
um

770
00:31:16,240 --> 00:31:18,799
if you haven't cloned this so the

771
00:31:18,799 --> 00:31:20,640
command is git clone let me post the

772
00:31:20,640 --> 00:31:23,039
whole command there git clone

773
00:31:23,039 --> 00:31:26,320
uh i'll share it with the um

774
00:31:26,320 --> 00:31:28,799
the people participating and

775
00:31:28,799 --> 00:31:30,799
yeah if you clone that if you have those

776
00:31:30,799 --> 00:31:32,640
two files on your

777
00:31:32,640 --> 00:31:35,840
on your cloud9 instance you're good okay

778
00:31:35,840 --> 00:31:37,840
so far you're good let's let's let's

779
00:31:37,840 --> 00:31:40,399
move along

780
00:31:40,880 --> 00:31:42,799
so now

781
00:31:42,799 --> 00:31:45,919
uh um this this cloud9 instance is brand

782
00:31:45,919 --> 00:31:48,159
new right so i don't have if i try to

783
00:31:48,159 --> 00:31:50,960
use cube ctl which i'm going to explain

784
00:31:50,960 --> 00:31:53,840
some what it is but it's basically a cli

785
00:31:53,840 --> 00:31:54,880
to

786
00:31:54,880 --> 00:31:57,919
talk to your kubernetes cluster um

787
00:31:57,919 --> 00:31:59,600
so i don't have that right now right

788
00:31:59,600 --> 00:32:01,919
command not found that's not installed

789
00:32:01,919 --> 00:32:03,840
so i need to install that

790
00:32:03,840 --> 00:32:07,120
so the first command to install um

791
00:32:07,120 --> 00:32:12,000
cubectl is this one here let me see

792
00:32:13,120 --> 00:32:15,840
okay

793
00:32:15,919 --> 00:32:19,760
let me post that on the chat

794
00:32:19,760 --> 00:32:22,000
and so this is the first command here

795
00:32:22,000 --> 00:32:23,519
and i'm going to share with you so

796
00:32:23,519 --> 00:32:26,159
basically i'm downloading that

797
00:32:26,159 --> 00:32:30,559
uh from aws and see if that's done

798
00:32:30,559 --> 00:32:31,600
okay

799
00:32:31,600 --> 00:32:33,440
so now i should have

800
00:32:33,440 --> 00:32:36,240
uh oh i need to give it permissions of

801
00:32:36,240 --> 00:32:38,240
course

802
00:32:38,240 --> 00:32:40,960
the second command is to allow execution

803
00:32:40,960 --> 00:32:42,480
permissions to this

804
00:32:42,480 --> 00:32:45,600
binary right keep ctl and don't worry

805
00:32:45,600 --> 00:32:47,440
i'm going to explain everything once we

806
00:32:47,440 --> 00:32:48,960
once we start deploying the cluster

807
00:32:48,960 --> 00:32:51,440
which is the the thing that takes uh

808
00:32:51,440 --> 00:32:53,679
longer then we go back to the slides and

809
00:32:53,679 --> 00:32:54,880
i'm going to explain some things that

810
00:32:54,880 --> 00:32:56,960
i'm doing here if you may not uh if

811
00:32:56,960 --> 00:33:00,000
you're not uh able to understand yet but

812
00:33:00,000 --> 00:33:01,760
you you will be able to understand the

813
00:33:01,760 --> 00:33:03,279
words

814
00:33:03,279 --> 00:33:06,320
okay let's see

815
00:33:06,320 --> 00:33:08,799
yeah so keep ctl is working

816
00:33:08,799 --> 00:33:11,519
right we have that already now cube ctl

817
00:33:11,519 --> 00:33:13,600
controls the kubernetes cluster manager

818
00:33:13,600 --> 00:33:14,960
that's great

819
00:33:14,960 --> 00:33:17,039
um other things that we can install

820
00:33:17,039 --> 00:33:19,440
that's gonna help you um

821
00:33:19,440 --> 00:33:20,799
with our

822
00:33:20,799 --> 00:33:23,120
interaction with the cluster so let's

823
00:33:23,120 --> 00:33:25,600
start a few a couple packages

824
00:33:25,600 --> 00:33:28,640
uh um that can help you in and those

825
00:33:28,640 --> 00:33:32,159
packages are jku and and get tags and

826
00:33:32,159 --> 00:33:34,720
batch completion right so basically what

827
00:33:34,720 --> 00:33:38,240
i'm going to do is sudo uh yum style

828
00:33:38,240 --> 00:33:40,320
those packages right because they don't

829
00:33:40,320 --> 00:33:42,399
have that on the

830
00:33:42,399 --> 00:33:46,158
on the cloud9 instance by the phone

831
00:33:46,640 --> 00:33:48,320
great

832
00:33:48,320 --> 00:33:49,120
now

833
00:33:49,120 --> 00:33:49,980
i'm going to

834
00:33:49,980 --> 00:33:51,840
[Music]

835
00:33:51,840 --> 00:33:53,200
configure

836
00:33:53,200 --> 00:33:55,760
a batch completion to keep ctl so that

837
00:33:55,760 --> 00:33:58,159
helps me when i'm

838
00:33:58,159 --> 00:34:00,480
managing my cluster and using commands

839
00:34:00,480 --> 00:34:03,360
with with cubectl

840
00:34:03,360 --> 00:34:06,640
so basically cubectl completion bash

841
00:34:06,640 --> 00:34:08,079
bash completion

842
00:34:08,079 --> 00:34:09,918
and um

843
00:34:09,918 --> 00:34:11,679
another one here

844
00:34:11,679 --> 00:34:13,760
let me oops

845
00:34:13,760 --> 00:34:16,079
let me post those two comments to the

846
00:34:16,079 --> 00:34:20,919
team as well so they can share with you

847
00:34:21,280 --> 00:34:22,560
yeah

848
00:34:22,560 --> 00:34:24,719
okay so this is a true separate command

849
00:34:24,719 --> 00:34:26,960
that you're doing and let me

850
00:34:26,960 --> 00:34:28,560
let me clear here so that i move to the

851
00:34:28,560 --> 00:34:31,119
top okay that's better

852
00:34:31,119 --> 00:34:32,879
um okay

853
00:34:32,879 --> 00:34:35,599
any any questions so far anyone

854
00:34:35,599 --> 00:34:37,359
struggling any comments that you don't

855
00:34:37,359 --> 00:34:38,560
understand

856
00:34:38,560 --> 00:34:40,639
there's just a couple more things that

857
00:34:40,639 --> 00:34:42,560
we're going to do now we're going to

858
00:34:42,560 --> 00:34:46,440
install eks ctl right and and what

859
00:34:46,440 --> 00:34:48,480
eksctl is

860
00:34:48,480 --> 00:34:50,079
is a a

861
00:34:50,079 --> 00:34:54,159
another binary to interact and and help

862
00:34:54,159 --> 00:34:57,440
you deploy eks clusters right and what

863
00:34:57,440 --> 00:35:01,119
is zks eks is the manage kubernetes

864
00:35:01,119 --> 00:35:03,599
services from aws

865
00:35:03,599 --> 00:35:06,240
right so it's

866
00:35:06,240 --> 00:35:09,280
it's like a a kubernetes that's provided

867
00:35:09,280 --> 00:35:13,200
to you by aws and aws manages that right

868
00:35:13,200 --> 00:35:16,079
every major cloud provider has their own

869
00:35:16,079 --> 00:35:18,880
managed kubernetes services you have eks

870
00:35:18,880 --> 00:35:23,520
for a uh for aws you have aks for azure

871
00:35:23,520 --> 00:35:26,560
you have gke from google and and many

872
00:35:26,560 --> 00:35:27,839
others right

873
00:35:27,839 --> 00:35:30,960
okay so we're going to install the eks

874
00:35:30,960 --> 00:35:33,839
ctl uh binary because that's what you're

875
00:35:33,839 --> 00:35:35,920
going to use to deploy the cluster once

876
00:35:35,920 --> 00:35:37,680
the cluster is deployed

877
00:35:37,680 --> 00:35:39,839
excuse me we just use

878
00:35:39,839 --> 00:35:41,280
cubectl

879
00:35:41,280 --> 00:35:44,079
basically

880
00:35:44,079 --> 00:35:46,320
okay

881
00:35:46,560 --> 00:35:49,920
so let me set that up

882
00:35:50,400 --> 00:35:52,720
this is the command um i'm posting that

883
00:35:52,720 --> 00:35:54,400
to the team so they can share with you

884
00:35:54,400 --> 00:35:56,240
too

885
00:35:56,240 --> 00:35:59,839
sorry uh

886
00:36:00,880 --> 00:36:02,160
okay

887
00:36:02,160 --> 00:36:03,680
moving that to

888
00:36:03,680 --> 00:36:05,680
local being

889
00:36:05,680 --> 00:36:06,800
and

890
00:36:06,800 --> 00:36:08,560
also enabling

891
00:36:08,560 --> 00:36:13,000
batch completion for eksctl

892
00:36:16,720 --> 00:36:17,680
and

893
00:36:17,680 --> 00:36:18,720
that's it

894
00:36:18,720 --> 00:36:20,079
okay

895
00:36:20,079 --> 00:36:23,440
asctl okay that's working too

896
00:36:23,440 --> 00:36:24,480
great

897
00:36:24,480 --> 00:36:27,760
so so far we've only uh downloaded a few

898
00:36:27,760 --> 00:36:30,280
package installed cubectl and installed

899
00:36:30,280 --> 00:36:33,520
eksctl that's what the two main binaries

900
00:36:33,520 --> 00:36:34,960
that we're going to need

901
00:36:34,960 --> 00:36:38,079
to uh uh deploy our cluster

902
00:36:38,079 --> 00:36:40,400
right people may ask oh why why don't we

903
00:36:40,400 --> 00:36:43,280
need to install docker right we're not

904
00:36:43,280 --> 00:36:45,200
we're not running our cluster here on

905
00:36:45,200 --> 00:36:46,880
this instance right we're running that

906
00:36:46,880 --> 00:36:47,920
on

907
00:36:47,920 --> 00:36:49,920
we're going to deploy two new ins

908
00:36:49,920 --> 00:36:52,800
actually one new instance to uh uh to

909
00:36:52,800 --> 00:36:55,520
run our cluster right and the way that

910
00:36:55,520 --> 00:36:57,680
uh eks works

911
00:36:57,680 --> 00:36:59,440
is that on

912
00:36:59,440 --> 00:37:02,480
uh they they run they manage the control

913
00:37:02,480 --> 00:37:04,640
plane right off of the kubernetes

914
00:37:04,640 --> 00:37:07,520
cluster and we only need to deploy our

915
00:37:07,520 --> 00:37:09,520
worker nodes and that will that's what

916
00:37:09,520 --> 00:37:11,200
we're going to do we're going to deploy

917
00:37:11,200 --> 00:37:13,200
async to instance that's going to work

918
00:37:13,200 --> 00:37:15,839
as our worker node to run our

919
00:37:15,839 --> 00:37:17,839
applications

920
00:37:17,839 --> 00:37:18,800
okay

921
00:37:18,800 --> 00:37:21,200
let's see

922
00:37:21,200 --> 00:37:24,319
no questions so far

923
00:37:26,320 --> 00:37:30,960
oops stick your download link for

924
00:37:31,680 --> 00:37:32,800
sure

925
00:37:32,800 --> 00:37:36,040
let's see

926
00:37:37,440 --> 00:37:40,480
this is the whole

927
00:37:42,560 --> 00:37:44,880
yeah this is the whole link yeah maybe

928
00:37:44,880 --> 00:37:45,839
if it's

929
00:37:45,839 --> 00:37:48,240
truncated

930
00:37:48,240 --> 00:37:50,240
yeah that's

931
00:37:50,240 --> 00:37:51,599
that's the whole link basically i'm

932
00:37:51,599 --> 00:37:53,280
downloading the cube cdl binary if you

933
00:37:53,280 --> 00:37:54,640
want download that from directly from

934
00:37:54,640 --> 00:37:57,520
kubernetes uh uh the kubernetes website

935
00:37:57,520 --> 00:37:59,760
which is kubernetes dot io there is also

936
00:37:59,760 --> 00:38:01,760
a cube ctl there but i'm downloading

937
00:38:01,760 --> 00:38:04,880
that from aws from

938
00:38:04,880 --> 00:38:08,000
an s3 on aws that that they provide

939
00:38:08,000 --> 00:38:09,599
right so that's

940
00:38:09,599 --> 00:38:10,400
that's

941
00:38:10,400 --> 00:38:11,760
better i think i don't think you're

942
00:38:11,760 --> 00:38:13,119
going to have any issues if you download

943
00:38:13,119 --> 00:38:16,480
from from the kubernetes.i o website

944
00:38:16,480 --> 00:38:20,000
um but yeah if that doesn't work uh with

945
00:38:20,000 --> 00:38:23,520
the link please please let me know

946
00:38:24,800 --> 00:38:27,119
okay

947
00:38:27,760 --> 00:38:30,000
so so far we

948
00:38:30,000 --> 00:38:31,440
we configured

949
00:38:31,440 --> 00:38:34,000
just to give you like a um

950
00:38:34,000 --> 00:38:36,960
overview of what we've done if if you

951
00:38:36,960 --> 00:38:39,280
just joined the workshop

952
00:38:39,280 --> 00:38:41,839
we deployed the cloud9 instance we

953
00:38:41,839 --> 00:38:44,880
configured an iem row for this instance

954
00:38:44,880 --> 00:38:47,520
and then we downloaded the

955
00:38:47,520 --> 00:38:50,240
two files from a github

956
00:38:50,240 --> 00:38:52,320
uh that we're going to use to set up the

957
00:38:52,320 --> 00:38:55,200
cluster and then we installed cubectl

958
00:38:55,200 --> 00:38:57,839
and eksctl that's all we've did and

959
00:38:57,839 --> 00:38:59,359
don't worry if you don't understand some

960
00:38:59,359 --> 00:39:01,599
of those names and tools i'm going to

961
00:39:01,599 --> 00:39:04,320
explain that as soon as we start

962
00:39:04,320 --> 00:39:06,640
deploying our cluster and move back to

963
00:39:06,640 --> 00:39:08,880
the slides and i just i just don't want

964
00:39:08,880 --> 00:39:10,400
to waste

965
00:39:10,400 --> 00:39:13,440
too much time um so i want to do the

966
00:39:13,440 --> 00:39:15,680
setup first if

967
00:39:15,680 --> 00:39:18,000
people haven't been able to do that and

968
00:39:18,000 --> 00:39:19,839
and then we go to the slides while the

969
00:39:19,839 --> 00:39:23,680
cluster is is being deployed

970
00:39:23,680 --> 00:39:24,480
okay

971
00:39:24,480 --> 00:39:27,280
let's see here um

972
00:39:27,280 --> 00:39:31,280
so basically what we're going to do

973
00:39:34,720 --> 00:39:37,680
is okay to create this cluster i'm going

974
00:39:37,680 --> 00:39:39,599
to use let me show the files first let

975
00:39:39,599 --> 00:39:41,599
me go back to the files

976
00:39:41,599 --> 00:39:43,119
okay

977
00:39:43,119 --> 00:39:45,119
so the first file that we're going to

978
00:39:45,119 --> 00:39:47,680
use is uh that we're going to interact

979
00:39:47,680 --> 00:39:51,520
with is this dks dash cluster.gamo all

980
00:39:51,520 --> 00:39:54,640
right this is going to deploy my cluster

981
00:39:54,640 --> 00:39:55,440
on

982
00:39:55,440 --> 00:39:57,119
aws

983
00:39:57,119 --> 00:39:59,359
so that's why we installed dks that's

984
00:39:59,359 --> 00:40:01,280
going to help me and and here on this

985
00:40:01,280 --> 00:40:02,880
fire you can see the command here

986
00:40:02,880 --> 00:40:04,560
already right

987
00:40:04,560 --> 00:40:07,920
um that's that's what we're going to do

988
00:40:07,920 --> 00:40:09,359
basically run this command on the

989
00:40:09,359 --> 00:40:11,680
terminal uh

990
00:40:11,680 --> 00:40:13,520
of course pointing that to the file that

991
00:40:13,520 --> 00:40:16,960
we have and basically uh i'm deploying a

992
00:40:16,960 --> 00:40:19,280
cluster configuration right

993
00:40:19,280 --> 00:40:22,640
and this is the name of my cluster this

994
00:40:22,640 --> 00:40:25,760
is the region so here you may be able to

995
00:40:25,760 --> 00:40:28,560
change your region if if eks is

996
00:40:28,560 --> 00:40:31,520
available uh on the region that you are

997
00:40:31,520 --> 00:40:32,240
in

998
00:40:32,240 --> 00:40:33,599
right and

999
00:40:33,599 --> 00:40:35,760
it's also a good idea because if we

1000
00:40:35,760 --> 00:40:38,000
deploy all i don't know how many people

1001
00:40:38,000 --> 00:40:39,520
are following along and applying

1002
00:40:39,520 --> 00:40:42,000
clusters as well but if we all deploy

1003
00:40:42,000 --> 00:40:44,240
our clusters on the same region we might

1004
00:40:44,240 --> 00:40:46,560
run out of resources so

1005
00:40:46,560 --> 00:40:50,079
the way that it works on aws they have a

1006
00:40:50,079 --> 00:40:52,560
limited resources for

1007
00:40:52,560 --> 00:40:55,200
availability zones right so inside the

1008
00:40:55,200 --> 00:40:56,880
region there's different

1009
00:40:56,880 --> 00:40:59,599
availability zones and we might come

1010
00:40:59,599 --> 00:41:02,160
we might have some air horse saying that

1011
00:41:02,160 --> 00:41:04,319
you don't have enough resources to

1012
00:41:04,319 --> 00:41:06,800
deploy that cluster in that region or on

1013
00:41:06,800 --> 00:41:10,079
that availability zone because eksctl

1014
00:41:10,079 --> 00:41:11,760
they're going to choose

1015
00:41:11,760 --> 00:41:15,280
from this from this uh um

1016
00:41:15,280 --> 00:41:17,119
this configuration here they are going

1017
00:41:17,119 --> 00:41:20,319
to choose which availability zone on us

1018
00:41:20,319 --> 00:41:22,000
is one region

1019
00:41:22,000 --> 00:41:23,680
they want to deploy a cluster we we

1020
00:41:23,680 --> 00:41:25,359
don't manage that of course we could we

1021
00:41:25,359 --> 00:41:27,520
could add that to the configuration file

1022
00:41:27,520 --> 00:41:30,079
but i don't want to add a lot of uh

1023
00:41:30,079 --> 00:41:32,560
overhead to the configuration so you

1024
00:41:32,560 --> 00:41:35,599
don't need to worry about that

1025
00:41:35,599 --> 00:41:37,920
and on this cluster i'm creating a

1026
00:41:37,920 --> 00:41:39,440
managed node group

1027
00:41:39,440 --> 00:41:41,280
right and i'm calling that manage node

1028
00:41:41,280 --> 00:41:44,319
group one and i'm deploying an instance

1029
00:41:44,319 --> 00:41:47,040
uh of the size t2 small

1030
00:41:47,040 --> 00:41:49,920
right and here i can say the minimal

1031
00:41:49,920 --> 00:41:52,240
size and the maximum size that means

1032
00:41:52,240 --> 00:41:53,200
that

1033
00:41:53,200 --> 00:41:56,160
my cluster uh can

1034
00:41:56,160 --> 00:41:58,720
have only one worker node one in one

1035
00:41:58,720 --> 00:42:01,040
instance and maximum

1036
00:42:01,040 --> 00:42:03,839
free right so if i need to increase

1037
00:42:03,839 --> 00:42:05,760
uh the number of worker nodes on my

1038
00:42:05,760 --> 00:42:08,240
cluster i can easily do that right and

1039
00:42:08,240 --> 00:42:11,119
if i like if i can change that to 10 it

1040
00:42:11,119 --> 00:42:13,200
doesn't matter what's going to matter

1041
00:42:13,200 --> 00:42:15,359
here is the desired capacity right

1042
00:42:15,359 --> 00:42:17,119
that's what what's the cluster is going

1043
00:42:17,119 --> 00:42:19,760
to start with right if i change that to

1044
00:42:19,760 --> 00:42:21,760
free for example then it's going to

1045
00:42:21,760 --> 00:42:24,480
deploy three different ec2 instances of

1046
00:42:24,480 --> 00:42:27,040
the same size in the node group right

1047
00:42:27,040 --> 00:42:28,880
and i don't want that i don't wanna i

1048
00:42:28,880 --> 00:42:30,880
don't want free i don't wanna we're only

1049
00:42:30,880 --> 00:42:33,839
going to use a small web application

1050
00:42:33,839 --> 00:42:35,520
so

1051
00:42:35,520 --> 00:42:38,160
i i don't want that i just want one so

1052
00:42:38,160 --> 00:42:40,160
that it doesn't i don't need to pay a

1053
00:42:40,160 --> 00:42:42,480
lot of money uh for for deploying this

1054
00:42:42,480 --> 00:42:44,319
cluster all right this is the volume

1055
00:42:44,319 --> 00:42:46,640
size right the hard drive and some

1056
00:42:46,640 --> 00:42:49,440
labels the worker uh labels the worker

1057
00:42:49,440 --> 00:42:52,000
role right and that basically that's it

1058
00:42:52,000 --> 00:42:54,240
right that's that's all that is on my

1059
00:42:54,240 --> 00:42:55,920
cluster

1060
00:42:55,920 --> 00:42:58,319
so here

1061
00:42:58,319 --> 00:43:00,240
i'm going to use this command let me go

1062
00:43:00,240 --> 00:43:02,240
to the

1063
00:43:02,240 --> 00:43:05,599
okay say workshop

1064
00:43:05,599 --> 00:43:08,880
here is my eks cluster so i just enter

1065
00:43:08,880 --> 00:43:11,599
the directory of the uh

1066
00:43:11,599 --> 00:43:13,520
of the guitar project that i just

1067
00:43:13,520 --> 00:43:16,480
downloaded again it's it's just

1068
00:43:16,480 --> 00:43:18,800
if you haven't

1069
00:43:18,800 --> 00:43:21,520
this is

1070
00:43:22,079 --> 00:43:24,480
say hello

1071
00:43:24,480 --> 00:43:28,400
do you like sure okay

1072
00:43:32,160 --> 00:43:33,040
um

1073
00:43:33,040 --> 00:43:35,359
yeah maybe maybe the chat let me let me

1074
00:43:35,359 --> 00:43:37,520
share the

1075
00:43:37,520 --> 00:43:40,400
the whole file here

1076
00:43:40,400 --> 00:43:42,480
one second some people are struggling

1077
00:43:42,480 --> 00:43:46,319
with the commands the first commands

1078
00:43:46,319 --> 00:43:50,640
and then give me a few seconds here

1079
00:43:52,800 --> 00:43:56,640
let me put that in a drive and um

1080
00:43:56,640 --> 00:43:59,598
making sure that

1081
00:44:00,720 --> 00:44:02,800
one second

1082
00:44:02,800 --> 00:44:05,920
hang on i mean

1083
00:44:06,240 --> 00:44:08,960
i should have done that before

1084
00:44:08,960 --> 00:44:10,790
sorry about that

1085
00:44:10,790 --> 00:44:13,760
[Music]

1086
00:44:13,760 --> 00:44:16,760
okay

1087
00:44:35,839 --> 00:44:38,079
okay let me share

1088
00:44:38,079 --> 00:44:40,400
on this file here i created google docs

1089
00:44:40,400 --> 00:44:41,760
and i will share the link of the google

1090
00:44:41,760 --> 00:44:44,000
docs of all the commands

1091
00:44:44,000 --> 00:44:44,800
and

1092
00:44:44,800 --> 00:44:46,480
um

1093
00:44:46,480 --> 00:44:48,079
and then we can share with everyone

1094
00:44:48,079 --> 00:44:50,960
participating so that they can check

1095
00:44:50,960 --> 00:44:53,000
let me just

1096
00:44:53,000 --> 00:44:57,040
select 101 workshop

1097
00:44:57,040 --> 00:44:59,680
that quickly

1098
00:45:02,839 --> 00:45:05,839
okay yeah i'm sharing on the google docs

1099
00:45:05,839 --> 00:45:08,240
um so if you can share that link with

1100
00:45:08,240 --> 00:45:10,480
everyone everyone can see that link

1101
00:45:10,480 --> 00:45:12,400
and these are the main commands that we

1102
00:45:12,400 --> 00:45:13,440
did to

1103
00:45:13,440 --> 00:45:14,319
um

1104
00:45:14,319 --> 00:45:16,560
set up cubectl

1105
00:45:16,560 --> 00:45:18,880
and eka city out on the cluster so if

1106
00:45:18,880 --> 00:45:20,640
you're having any trouble

1107
00:45:20,640 --> 00:45:23,359
um some of those are or two commands so

1108
00:45:23,359 --> 00:45:26,240
remember that and yeah step one step

1109
00:45:26,240 --> 00:45:28,319
three so follow that along and check out

1110
00:45:28,319 --> 00:45:29,680
the commands there if you're still

1111
00:45:29,680 --> 00:45:31,680
struggling after following that let me

1112
00:45:31,680 --> 00:45:33,760
know please let me know

1113
00:45:33,760 --> 00:45:34,640
um

1114
00:45:34,640 --> 00:45:36,480
so i'll i'll move on here and i'll

1115
00:45:36,480 --> 00:45:38,720
deploy my cluster and and while that's

1116
00:45:38,720 --> 00:45:41,200
that's going on as we going back to the

1117
00:45:41,200 --> 00:45:43,200
slides i can help anyone that's

1118
00:45:43,200 --> 00:45:45,200
struggling or answering any questions

1119
00:45:45,200 --> 00:45:46,480
right

1120
00:45:46,480 --> 00:45:49,040
so yeah as i said right i i want to

1121
00:45:49,040 --> 00:45:50,640
create my cluster and to do that i'm

1122
00:45:50,640 --> 00:45:53,760
going to use eksctl

1123
00:45:53,760 --> 00:45:56,240
uh to do that and the command here is

1124
00:45:56,240 --> 00:45:59,359
ekstl create cluster right and i'm

1125
00:45:59,359 --> 00:46:01,520
passing a file

1126
00:46:01,520 --> 00:46:03,440
which is the one this file here that i

1127
00:46:03,440 --> 00:46:05,119
have

1128
00:46:05,119 --> 00:46:07,599
so this is the command and i'll add that

1129
00:46:07,599 --> 00:46:09,920
to the the spreadsheet as well

1130
00:46:09,920 --> 00:46:10,800
so

1131
00:46:10,800 --> 00:46:13,520
um so that you can follow along if you

1132
00:46:13,520 --> 00:46:17,119
uh if you get stuck or something

1133
00:46:18,480 --> 00:46:20,720
so let me add that to the spreadsheet so

1134
00:46:20,720 --> 00:46:23,040
that everyone can see

1135
00:46:23,040 --> 00:46:26,000
a gift clone

1136
00:46:26,839 --> 00:46:30,640
right it's like 101 workshop

1137
00:46:30,640 --> 00:46:31,920
okay

1138
00:46:31,920 --> 00:46:35,040
i'm adding that to the

1139
00:46:35,200 --> 00:46:36,560
to the

1140
00:46:36,560 --> 00:46:38,079
sorry to the

1141
00:46:38,079 --> 00:46:41,480
google docs

1142
00:46:42,960 --> 00:46:45,119
just adding that there so that you can

1143
00:46:45,119 --> 00:46:47,280
see

1144
00:46:48,720 --> 00:46:52,880
okay let's see if that's going to work

1145
00:46:52,880 --> 00:46:54,880
yeah like demos or live workshops

1146
00:46:54,880 --> 00:46:57,599
crafters always are always hard

1147
00:46:57,599 --> 00:46:59,920
so here i started creating my cluster

1148
00:46:59,920 --> 00:47:01,839
and as you can see chaos ctrl is doing

1149
00:47:01,839 --> 00:47:04,880
its job it's creating uh subnets it

1150
00:47:04,880 --> 00:47:07,760
creates a vpc and then does everything

1151
00:47:07,760 --> 00:47:10,720
for me so that makes things easier right

1152
00:47:10,720 --> 00:47:11,920
and

1153
00:47:11,920 --> 00:47:13,839
um this is what takes a little bit

1154
00:47:13,839 --> 00:47:16,640
longer you might face some errors here

1155
00:47:16,640 --> 00:47:19,040
uh because of resources if we're doing

1156
00:47:19,040 --> 00:47:20,960
on on the same region if everyone's

1157
00:47:20,960 --> 00:47:24,240
doing on usc one uh what what you need

1158
00:47:24,240 --> 00:47:27,119
to do basically is either try on a

1159
00:47:27,119 --> 00:47:29,599
different region or try again but change

1160
00:47:29,599 --> 00:47:32,000
the name of your uh cluster so that it

1161
00:47:32,000 --> 00:47:34,319
doesn't uh

1162
00:47:34,319 --> 00:47:37,040
what what this is doing actually eka ctl

1163
00:47:37,040 --> 00:47:39,440
is using cloud formation to deploy your

1164
00:47:39,440 --> 00:47:41,599
cluster right as you can see here it's

1165
00:47:41,599 --> 00:47:43,119
waiting for the cloud formation stack

1166
00:47:43,119 --> 00:47:45,760
and all the stuff and so

1167
00:47:45,760 --> 00:47:48,480
if you try to deploy and it didn't work

1168
00:47:48,480 --> 00:47:50,160
then if you try to deploy again with the

1169
00:47:50,160 --> 00:47:51,760
same name it's going to complain to you

1170
00:47:51,760 --> 00:47:54,559
oh there's already some cloud formation

1171
00:47:54,559 --> 00:47:56,960
template created with the same name and

1172
00:47:56,960 --> 00:47:58,640
let's hope we don't have we don't face

1173
00:47:58,640 --> 00:48:00,960
the issues these issues i faced that

1174
00:48:00,960 --> 00:48:02,960
on the previous uh

1175
00:48:02,960 --> 00:48:05,280
edition of this workshop that i did

1176
00:48:05,280 --> 00:48:07,280
but let's hope not

1177
00:48:07,280 --> 00:48:10,160
it seems that no issues so far

1178
00:48:10,160 --> 00:48:13,119
um so yeah i'm gonna leave it running

1179
00:48:13,119 --> 00:48:15,440
here i'm going to go back to the the

1180
00:48:15,440 --> 00:48:18,480
slides so that we can continue the

1181
00:48:18,480 --> 00:48:20,319
just the explanation of the kubernetes

1182
00:48:20,319 --> 00:48:22,079
architecture

1183
00:48:22,079 --> 00:48:24,400
and then once the cluster is deployed we

1184
00:48:24,400 --> 00:48:27,520
come back here to uh uh to deploy the

1185
00:48:27,520 --> 00:48:30,480
applications and and now play along with

1186
00:48:30,480 --> 00:48:32,880
the uh attacking the application and all

1187
00:48:32,880 --> 00:48:34,480
that stuff

1188
00:48:34,480 --> 00:48:35,520
okay

1189
00:48:35,520 --> 00:48:38,079
so i mean

1190
00:48:38,079 --> 00:48:41,680
stop screen

1191
00:48:44,880 --> 00:48:48,240
and share the slides again

1192
00:48:48,240 --> 00:48:50,400
okay

1193
00:48:50,400 --> 00:48:52,240
so yeah we stopped

1194
00:48:52,240 --> 00:48:55,200
we stopped here

1195
00:48:57,280 --> 00:48:59,119
we stopped here right the kubernetes

1196
00:48:59,119 --> 00:49:01,520
architecture

1197
00:49:01,520 --> 00:49:02,400
and

1198
00:49:02,400 --> 00:49:04,240
so as we can see

1199
00:49:04,240 --> 00:49:06,240
if you if you're struggling feel free to

1200
00:49:06,240 --> 00:49:08,559
ask questions i'll i'll stop and answer

1201
00:49:08,559 --> 00:49:09,359
them

1202
00:49:09,359 --> 00:49:11,680
uh why i'm explaining no problem don't

1203
00:49:11,680 --> 00:49:12,720
worry

1204
00:49:12,720 --> 00:49:14,720
as we can see

1205
00:49:14,720 --> 00:49:17,200
there's two main major components here

1206
00:49:17,200 --> 00:49:20,240
to use the kubernetes control plane it

1207
00:49:20,240 --> 00:49:21,599
used to be called

1208
00:49:21,599 --> 00:49:23,520
master node but for

1209
00:49:23,520 --> 00:49:26,160
inclusive language we don't usually we

1210
00:49:26,160 --> 00:49:27,920
don't call it anymore even on the new

1211
00:49:27,920 --> 00:49:30,640
version of kubernetes it doesn't say i

1212
00:49:30,640 --> 00:49:32,079
think it does say but it's being

1213
00:49:32,079 --> 00:49:34,480
deprecated the name master node right so

1214
00:49:34,480 --> 00:49:36,800
i'm going to call it uh from now on

1215
00:49:36,800 --> 00:49:38,720
control plane

1216
00:49:38,720 --> 00:49:41,280
and so this is on the left side here

1217
00:49:41,280 --> 00:49:44,480
with with five five smaller components

1218
00:49:44,480 --> 00:49:46,880
on the right side of the slides we have

1219
00:49:46,880 --> 00:49:49,040
three worker nodes right

1220
00:49:49,040 --> 00:49:51,200
and and the worker nodes are the ones

1221
00:49:51,200 --> 00:49:53,839
that we use to deploy our applications

1222
00:49:53,839 --> 00:49:55,760
and and today in this workshop we're

1223
00:49:55,760 --> 00:49:57,920
deploying only one worker node only one

1224
00:49:57,920 --> 00:50:01,119
in c2 instance that's going to function

1225
00:50:01,119 --> 00:50:02,720
as as the main

1226
00:50:02,720 --> 00:50:04,640
uh the main node for deploying our

1227
00:50:04,640 --> 00:50:06,400
vulnerable web application we don't need

1228
00:50:06,400 --> 00:50:08,640
three but if we need it as i showed

1229
00:50:08,640 --> 00:50:10,559
there with the the mac size and the

1230
00:50:10,559 --> 00:50:13,839
desired capacity on on the yaml file we

1231
00:50:13,839 --> 00:50:16,800
could easily change that there right

1232
00:50:16,800 --> 00:50:19,119
okay

1233
00:50:21,200 --> 00:50:23,680
awesome awesome yeah yeah i should have

1234
00:50:23,680 --> 00:50:27,119
thought about the google docs um so yeah

1235
00:50:27,119 --> 00:50:29,440
on on this on let's look at the left

1236
00:50:29,440 --> 00:50:30,720
side first

1237
00:50:30,720 --> 00:50:33,040
the cube api server

1238
00:50:33,040 --> 00:50:35,200
um the cube api server here in the

1239
00:50:35,200 --> 00:50:37,920
middle right we see that that's kind of

1240
00:50:37,920 --> 00:50:38,559
a

1241
00:50:38,559 --> 00:50:40,559
big thing it's a main component one of

1242
00:50:40,559 --> 00:50:43,119
the main components of the control plane

1243
00:50:43,119 --> 00:50:45,200
every other component is talking to the

1244
00:50:45,200 --> 00:50:46,880
api server and you can see from the

1245
00:50:46,880 --> 00:50:49,359
arrows there it's not just talking with

1246
00:50:49,359 --> 00:50:50,160
the

1247
00:50:50,160 --> 00:50:52,640
uh components from the control plane but

1248
00:50:52,640 --> 00:50:55,599
it's also talking to uh the worker nodes

1249
00:50:55,599 --> 00:50:57,040
as well right

1250
00:50:57,040 --> 00:50:59,119
and the cube api server it's it's

1251
00:50:59,119 --> 00:51:02,640
basically a api server and rest api

1252
00:51:02,640 --> 00:51:05,760
server if you played with apis before

1253
00:51:05,760 --> 00:51:06,839
and

1254
00:51:06,839 --> 00:51:10,559
that receives and forwards all the

1255
00:51:10,559 --> 00:51:13,119
communication from all the components of

1256
00:51:13,119 --> 00:51:17,280
kubernetes right it has a um

1257
00:51:17,280 --> 00:51:19,599
basically everything that you

1258
00:51:19,599 --> 00:51:22,640
when you type from cube out it becomes

1259
00:51:22,640 --> 00:51:24,800
an api request or an hp request that

1260
00:51:24,800 --> 00:51:26,960
goes to the api server

1261
00:51:26,960 --> 00:51:29,680
of your cluster right

1262
00:51:29,680 --> 00:51:32,480
on the bottom here on the bottom

1263
00:51:32,480 --> 00:51:33,520
left

1264
00:51:33,520 --> 00:51:35,680
we have at cd

1265
00:51:35,680 --> 00:51:37,200
and at cd

1266
00:51:37,200 --> 00:51:38,240
is

1267
00:51:38,240 --> 00:51:41,359
is the main database the data storage of

1268
00:51:41,359 --> 00:51:43,520
your cluster right it's a key value

1269
00:51:43,520 --> 00:51:45,839
store where all the components of the

1270
00:51:45,839 --> 00:51:48,640
kubernetes kubernetes cluster is stored

1271
00:51:48,640 --> 00:51:51,760
there right and and so

1272
00:51:51,760 --> 00:51:54,880
everything gets saved there as a

1273
00:51:54,880 --> 00:51:57,920
as an object as a key value store and

1274
00:51:57,920 --> 00:52:01,359
then uh kubernetes tries to checks that

1275
00:52:01,359 --> 00:52:03,680
and tries to create whatever you told it

1276
00:52:03,680 --> 00:52:06,640
to create on the that's saved on that cd

1277
00:52:06,640 --> 00:52:10,000
tries to create that on your notes okay

1278
00:52:10,000 --> 00:52:11,760
and that's something very important here

1279
00:52:11,760 --> 00:52:12,800
because

1280
00:52:12,800 --> 00:52:14,480
the

1281
00:52:14,480 --> 00:52:17,680
the kubernetes works in the way that

1282
00:52:17,680 --> 00:52:20,880
kubernetes works it's called desired

1283
00:52:20,880 --> 00:52:24,240
state right so kubernetes is smart

1284
00:52:24,240 --> 00:52:27,040
enough right it's smart enough to see

1285
00:52:27,040 --> 00:52:28,000
that

1286
00:52:28,000 --> 00:52:30,880
it constantly it's constantly checking

1287
00:52:30,880 --> 00:52:33,839
if whatever i told it to create for

1288
00:52:33,839 --> 00:52:36,880
example nodes or application or services

1289
00:52:36,880 --> 00:52:38,720
whatever i told it to create there on

1290
00:52:38,720 --> 00:52:39,920
that cd

1291
00:52:39,920 --> 00:52:41,200
it checks

1292
00:52:41,200 --> 00:52:44,880
it checks on your nodes and see okay is

1293
00:52:44,880 --> 00:52:47,280
this application running already do i

1294
00:52:47,280 --> 00:52:50,240
have free replicas of that application

1295
00:52:50,240 --> 00:52:51,119
right

1296
00:52:51,119 --> 00:52:53,680
if i do okay good that's that's the

1297
00:52:53,680 --> 00:52:55,200
desired state

1298
00:52:55,200 --> 00:52:58,079
if i don't if whatever is is on that cd

1299
00:52:58,079 --> 00:53:00,400
whatever configuration is there doesn't

1300
00:53:00,400 --> 00:53:03,920
match what's running on the cluster then

1301
00:53:03,920 --> 00:53:06,319
okay i need to fix it right i need they

1302
00:53:06,319 --> 00:53:09,119
need to match right and so

1303
00:53:09,119 --> 00:53:09,920
so

1304
00:53:09,920 --> 00:53:12,559
if let's say i only have one replica of

1305
00:53:12,559 --> 00:53:14,480
my application and i need free

1306
00:53:14,480 --> 00:53:16,720
kubernetes is going to check that and

1307
00:53:16,720 --> 00:53:18,640
it's going to tell the cluster to create

1308
00:53:18,640 --> 00:53:21,280
two more uh uh

1309
00:53:21,280 --> 00:53:23,359
applications two more containers right

1310
00:53:23,359 --> 00:53:24,240
from

1311
00:53:24,240 --> 00:53:26,800
actually spots but it's going to create

1312
00:53:26,800 --> 00:53:30,079
those to match those in cd so i need to

1313
00:53:30,079 --> 00:53:31,599
have three replicas running on my

1314
00:53:31,599 --> 00:53:34,240
cluster and it doesn't matter on on on

1315
00:53:34,240 --> 00:53:36,079
which worker node depending on your

1316
00:53:36,079 --> 00:53:38,400
configuration as well but i need to have

1317
00:53:38,400 --> 00:53:41,599
that matching right so it's constantly

1318
00:53:41,599 --> 00:53:43,280
checking if you check the logs of

1319
00:53:43,280 --> 00:53:46,000
kubernetes it's constantly there's many

1320
00:53:46,000 --> 00:53:47,760
different uh components that's

1321
00:53:47,760 --> 00:53:50,400
constantly checking to see the desired

1322
00:53:50,400 --> 00:53:53,200
state if whatever is on lcd should be

1323
00:53:53,200 --> 00:53:54,559
reflected

1324
00:53:54,559 --> 00:53:55,680
on

1325
00:53:55,680 --> 00:53:57,599
on your your whole cluster on your

1326
00:53:57,599 --> 00:53:59,119
worker notes right

1327
00:53:59,119 --> 00:54:01,839
so you can see here that the api server

1328
00:54:01,839 --> 00:54:04,720
and lcd there are two major components

1329
00:54:04,720 --> 00:54:06,960
of your kubernetes clustering that's why

1330
00:54:06,960 --> 00:54:08,800
you need to protect those and we're

1331
00:54:08,800 --> 00:54:11,760
going to talk about uh security the

1332
00:54:11,760 --> 00:54:13,680
security part of it and the best

1333
00:54:13,680 --> 00:54:16,240
practices as well but be very careful

1334
00:54:16,240 --> 00:54:17,839
with those components right if an

1335
00:54:17,839 --> 00:54:20,240
attacker has access to your ad cd and

1336
00:54:20,240 --> 00:54:22,960
they can change objects there right

1337
00:54:22,960 --> 00:54:25,119
basically whatever they change to

1338
00:54:25,119 --> 00:54:27,599
kubernetes is going to just follow along

1339
00:54:27,599 --> 00:54:29,200
just kubernetes is going okay if you

1340
00:54:29,200 --> 00:54:31,440
want me to create a deploy a malicious

1341
00:54:31,440 --> 00:54:33,280
container i'm going to deploy a

1342
00:54:33,280 --> 00:54:36,160
malicious container right it's it's not

1343
00:54:36,160 --> 00:54:38,160
it's not checking who who put that

1344
00:54:38,160 --> 00:54:40,480
information there it's only checking if

1345
00:54:40,480 --> 00:54:42,960
the information lcd is matching whatever

1346
00:54:42,960 --> 00:54:46,240
is created on the cluster okay

1347
00:54:46,240 --> 00:54:47,839
and

1348
00:54:47,839 --> 00:54:50,400
on the top left here we have the cube

1349
00:54:50,400 --> 00:54:52,480
controller manager right

1350
00:54:52,480 --> 00:54:54,720
and the cube controller manages exactly

1351
00:54:54,720 --> 00:54:58,079
this object that control that has a

1352
00:54:58,079 --> 00:55:00,240
bunch of different controllers the pod

1353
00:55:00,240 --> 00:55:02,160
controller the service controller and

1354
00:55:02,160 --> 00:55:04,240
other controllers that keeps talking to

1355
00:55:04,240 --> 00:55:07,520
the api server and checking on that cd

1356
00:55:07,520 --> 00:55:10,559
is it matching is it is it oh do you

1357
00:55:10,559 --> 00:55:12,720
have the right number of pods oh we have

1358
00:55:12,720 --> 00:55:15,359
five here but but we need ten right and

1359
00:55:15,359 --> 00:55:17,760
so it's constantly checking that then

1360
00:55:17,760 --> 00:55:20,880
each specific controller is doing that

1361
00:55:20,880 --> 00:55:23,200
the cloud controller manager on the top

1362
00:55:23,200 --> 00:55:25,280
right of the control plane is the one

1363
00:55:25,280 --> 00:55:27,200
that talks to cloud providers right

1364
00:55:27,200 --> 00:55:29,920
that's the reason why kubernetes can uh

1365
00:55:29,920 --> 00:55:32,319
work with different cloud providers you

1366
00:55:32,319 --> 00:55:34,400
have the cloud controller manager if you

1367
00:55:34,400 --> 00:55:37,520
want to use like disk volumes or load

1368
00:55:37,520 --> 00:55:39,920
balancers right kubernetes doesn't have

1369
00:55:39,920 --> 00:55:42,640
those objects doesn't have uh those

1370
00:55:42,640 --> 00:55:45,200
services so you need to use the ones

1371
00:55:45,200 --> 00:55:47,359
provided from your cloud provider and

1372
00:55:47,359 --> 00:55:50,880
we're going to do that on on eks today

1373
00:55:50,880 --> 00:55:52,799
we're going to deploy a load balancer to

1374
00:55:52,799 --> 00:55:55,440
expose our application to the internet

1375
00:55:55,440 --> 00:55:57,119
okay

1376
00:55:57,119 --> 00:55:58,160
good

1377
00:55:58,160 --> 00:56:00,960
and on the bottom right uh is the cube

1378
00:56:00,960 --> 00:56:03,200
scheduler it keeps scheduling exactly

1379
00:56:03,200 --> 00:56:06,000
the one that tells uh uh the worker

1380
00:56:06,000 --> 00:56:08,559
nodes to deploy the pods right to ins

1381
00:56:08,559 --> 00:56:10,559
and start the containers right it talks

1382
00:56:10,559 --> 00:56:13,760
to the cubelet on each worker node to

1383
00:56:13,760 --> 00:56:14,960
schedule

1384
00:56:14,960 --> 00:56:17,280
a pod it can be scheduled like instantly

1385
00:56:17,280 --> 00:56:20,799
right in it can be uh uh to cubelet talk

1386
00:56:20,799 --> 00:56:23,599
to the kubernetes runtime engine create

1387
00:56:23,599 --> 00:56:25,200
those spots

1388
00:56:25,200 --> 00:56:26,960
okay so those are the five main

1389
00:56:26,960 --> 00:56:30,000
components of the control plane right

1390
00:56:30,000 --> 00:56:31,280
now

1391
00:56:31,280 --> 00:56:33,520
let's talk to let's let's take a look at

1392
00:56:33,520 --> 00:56:34,400
the

1393
00:56:34,400 --> 00:56:37,200
the worker notes

1394
00:56:40,400 --> 00:56:42,319
here on the

1395
00:56:42,319 --> 00:56:43,760
on the right side

1396
00:56:43,760 --> 00:56:45,680
there are three main components on each

1397
00:56:45,680 --> 00:56:46,880
worker node

1398
00:56:46,880 --> 00:56:50,000
i have a cubelet i have a cube proxy

1399
00:56:50,000 --> 00:56:52,880
and i have the container runtime engine

1400
00:56:52,880 --> 00:56:54,160
okay

1401
00:56:54,160 --> 00:56:56,000
so

1402
00:56:56,000 --> 00:56:59,200
basically the cubelet is the agent that

1403
00:56:59,200 --> 00:57:01,839
runs on each node

1404
00:57:01,839 --> 00:57:04,720
that talks to the api server and

1405
00:57:04,720 --> 00:57:08,240
starts any any containers and also gets

1406
00:57:08,240 --> 00:57:09,119
some

1407
00:57:09,119 --> 00:57:11,280
statistics and health information about

1408
00:57:11,280 --> 00:57:14,240
those those containers right and i'm i'm

1409
00:57:14,240 --> 00:57:16,240
i'm talking i'm saying containers here

1410
00:57:16,240 --> 00:57:18,720
but it's actually pods but i'm going to

1411
00:57:18,720 --> 00:57:20,640
explain that once we move to the next

1412
00:57:20,640 --> 00:57:23,359
slides that the smallest unit of

1413
00:57:23,359 --> 00:57:26,480
kubernetes is actually pods right um

1414
00:57:26,480 --> 00:57:28,559
there is also the q proxy component

1415
00:57:28,559 --> 00:57:31,760
that's uh that handles all communication

1416
00:57:31,760 --> 00:57:33,760
networking communication inside the

1417
00:57:33,760 --> 00:57:36,640
cluster but also externally right with

1418
00:57:36,640 --> 00:57:39,040
outside the cluster as well

1419
00:57:39,040 --> 00:57:40,720
and the cube

1420
00:57:40,720 --> 00:57:42,880
the container runtime engine

1421
00:57:42,880 --> 00:57:43,839
which

1422
00:57:43,839 --> 00:57:45,920
by default was docker

1423
00:57:45,920 --> 00:57:47,040
and

1424
00:57:47,040 --> 00:57:48,799
you know there was some

1425
00:57:48,799 --> 00:57:51,119
a lot of discussions about when uh when

1426
00:57:51,119 --> 00:57:52,559
they're talking the docker was going to

1427
00:57:52,559 --> 00:57:54,559
be deplocated in kubernetes and all that

1428
00:57:54,559 --> 00:57:55,839
stuff i don't know if you heard about

1429
00:57:55,839 --> 00:57:58,559
this this story

1430
00:57:58,559 --> 00:58:01,040
but you can still use your docker

1431
00:58:01,040 --> 00:58:02,640
containers on kubernetes nothing is

1432
00:58:02,640 --> 00:58:05,599
going to change it's just that

1433
00:58:05,599 --> 00:58:07,280
um

1434
00:58:07,280 --> 00:58:09,760
the the the reason being that kubernetes

1435
00:58:09,760 --> 00:58:10,640
to

1436
00:58:10,640 --> 00:58:12,960
to be able to run docker kubernetes

1437
00:58:12,960 --> 00:58:15,839
developed a kind of uh another component

1438
00:58:15,839 --> 00:58:17,599
called the docker shim

1439
00:58:17,599 --> 00:58:19,920
to be able because docker doesn't follow

1440
00:58:19,920 --> 00:58:22,079
the

1441
00:58:22,079 --> 00:58:23,119
the

1442
00:58:23,119 --> 00:58:26,000
oci the open container interface

1443
00:58:26,000 --> 00:58:28,880
and kubernetes was created to to run any

1444
00:58:28,880 --> 00:58:30,319
oci

1445
00:58:30,319 --> 00:58:33,359
uh uh standard containers right

1446
00:58:33,359 --> 00:58:34,160
okay

1447
00:58:34,160 --> 00:58:36,240
so you can deploy that the con the

1448
00:58:36,240 --> 00:58:37,760
cubelet is going to talk with the

1449
00:58:37,760 --> 00:58:40,319
kubernetes runtime engine and that's

1450
00:58:40,319 --> 00:58:43,599
what's going to really create your uh

1451
00:58:43,599 --> 00:58:45,920
your containers and run that on your

1452
00:58:45,920 --> 00:58:48,400
nodes okay

1453
00:58:48,400 --> 00:58:50,880
any questions about this architecture

1454
00:58:50,880 --> 00:58:52,799
here so far

1455
00:58:52,799 --> 00:58:54,960
so we're going to interact right what

1456
00:58:54,960 --> 00:58:56,960
we're doing what we're doing here today

1457
00:58:56,960 --> 00:58:59,359
on this workshop we're using the cloud9

1458
00:58:59,359 --> 00:59:02,480
instance to talk to the control plane

1459
00:59:02,480 --> 00:59:04,480
right we're using that and tell we're

1460
00:59:04,480 --> 00:59:05,839
going to tell the control plane to

1461
00:59:05,839 --> 00:59:09,200
create some objects for us right we we

1462
00:59:09,200 --> 00:59:10,240
just

1463
00:59:10,240 --> 00:59:12,880
with the eka ctl command that we just

1464
00:59:12,880 --> 00:59:15,040
used that's creating the cluster let me

1465
00:59:15,040 --> 00:59:16,880
just quickly see that yeah still

1466
00:59:16,880 --> 00:59:19,920
creating um

1467
00:59:19,920 --> 00:59:20,880
with the

1468
00:59:20,880 --> 00:59:22,799
kstel command that we use to create the

1469
00:59:22,799 --> 00:59:25,119
cluster um

1470
00:59:25,119 --> 00:59:27,599
it's kubernetes is doing that and the

1471
00:59:27,599 --> 00:59:30,960
way that it works on eks

1472
00:59:30,960 --> 00:59:32,799
we don't have access to this control

1473
00:59:32,799 --> 00:59:34,079
plane right

1474
00:59:34,079 --> 00:59:35,119
because

1475
00:59:35,119 --> 00:59:38,240
uh aws handles that for us and and

1476
00:59:38,240 --> 00:59:40,240
that's a good thing because you also

1477
00:59:40,240 --> 00:59:41,760
don't need to worry about the security

1478
00:59:41,760 --> 00:59:44,400
aspect of the control plane all you need

1479
00:59:44,400 --> 00:59:47,680
to do you talk to the api endpoint of

1480
00:59:47,680 --> 00:59:50,319
your control plane and you tell it to

1481
00:59:50,319 --> 00:59:51,359
create

1482
00:59:51,359 --> 00:59:53,760
uh create applications deploy containers

1483
00:59:53,760 --> 00:59:57,160
and all that stuff

1484
01:00:00,240 --> 01:00:02,559
if you're still having uh issues

1485
01:00:02,559 --> 01:00:04,880
deploying the cluster if you're having

1486
01:00:04,880 --> 01:00:06,720
uh if it's saying that's not available

1487
01:00:06,720 --> 01:00:08,480
it doesn't have any resources on that

1488
01:00:08,480 --> 01:00:10,079
availability zone

1489
01:00:10,079 --> 01:00:12,720
try to change uh

1490
01:00:12,720 --> 01:00:15,200
change regions right if it's still not

1491
01:00:15,200 --> 01:00:17,280
working under different names if it's

1492
01:00:17,280 --> 01:00:18,799
still getting errors

1493
01:00:18,799 --> 01:00:20,559
i'm gonna show once my cluster is

1494
01:00:20,559 --> 01:00:22,799
completed i'm gonna show you the

1495
01:00:22,799 --> 01:00:25,359
the outputs of the console and see if

1496
01:00:25,359 --> 01:00:26,640
that you're getting that but try to

1497
01:00:26,640 --> 01:00:28,559
change different uh

1498
01:00:28,559 --> 01:00:32,640
regions if not working on the region

1499
01:00:34,079 --> 01:00:34,960
sure

1500
01:00:34,960 --> 01:00:38,079
uh the oci is the open container

1501
01:00:38,079 --> 01:00:41,040
initiative right it's like a standard

1502
01:00:41,040 --> 01:00:43,440
for uh

1503
01:00:43,440 --> 01:00:46,480
standard for creating containers right

1504
01:00:46,480 --> 01:00:48,880
and the

1505
01:00:48,880 --> 01:00:50,400
docker

1506
01:00:50,400 --> 01:00:53,760
didn't doesn't apply it doesn't like

1507
01:00:53,760 --> 01:00:56,000
it's not in compliance with that

1508
01:00:56,000 --> 01:00:58,000
standard as far as i know please please

1509
01:00:58,000 --> 01:01:00,000
correct me if i'm wrong

1510
01:01:00,000 --> 01:01:01,839
and and so

1511
01:01:01,839 --> 01:01:03,200
kubernetes

1512
01:01:03,200 --> 01:01:05,440
couldn't couldn't run

1513
01:01:05,440 --> 01:01:08,400
docker containers by default

1514
01:01:08,400 --> 01:01:10,640
they had to create another software

1515
01:01:10,640 --> 01:01:12,559
that's called the docker shin

1516
01:01:12,559 --> 01:01:14,640
to be able to do that

1517
01:01:14,640 --> 01:01:17,359
so the problem is that

1518
01:01:17,359 --> 01:01:19,839
this this component that

1519
01:01:19,839 --> 01:01:22,400
allows kubernetes to run docker

1520
01:01:22,400 --> 01:01:24,000
containers

1521
01:01:24,000 --> 01:01:26,640
is

1522
01:01:27,359 --> 01:01:29,119
is like

1523
01:01:29,119 --> 01:01:32,880
it's maintained by the kubernetes team

1524
01:01:33,839 --> 01:01:36,240
uh yeah

1525
01:01:36,240 --> 01:01:38,480
sure sure okay sounds good

1526
01:01:38,480 --> 01:01:41,200
um so

1527
01:01:41,280 --> 01:01:43,440
what's what what's going on is they

1528
01:01:43,440 --> 01:01:45,520
don't they didn't want to maintain that

1529
01:01:45,520 --> 01:01:48,160
component because that component was as

1530
01:01:48,160 --> 01:01:50,839
they call it the docker shim

1531
01:01:50,839 --> 01:01:54,799
s-h-i-m it is is a kind of a like

1532
01:01:54,799 --> 01:01:56,720
uh

1533
01:01:56,720 --> 01:01:58,720
it's not a good practice what they did

1534
01:01:58,720 --> 01:02:00,400
right because kubernetes should be able

1535
01:02:00,400 --> 01:02:03,280
to run oci standard uh containers by

1536
01:02:03,280 --> 01:02:06,319
default but unfortunately docker is not

1537
01:02:06,319 --> 01:02:08,319
uh compliant with that

1538
01:02:08,319 --> 01:02:09,839
so they said oh i know we're not going

1539
01:02:09,839 --> 01:02:11,760
to maintain the docker stream anymore

1540
01:02:11,760 --> 01:02:14,319
and the docker shim was going to be

1541
01:02:14,319 --> 01:02:15,760
deprecated

1542
01:02:15,760 --> 01:02:19,039
right so that's why this caused a lot of

1543
01:02:19,039 --> 01:02:21,200
stir on the on the

1544
01:02:21,200 --> 01:02:24,240
internet and on twitter a few months

1545
01:02:24,240 --> 01:02:25,200
back

1546
01:02:25,200 --> 01:02:27,440
because people thought oh maybe like

1547
01:02:27,440 --> 01:02:29,440
kubernetes is deprecating docker i'm not

1548
01:02:29,440 --> 01:02:31,440
going to be used to use be able to use

1549
01:02:31,440 --> 01:02:33,039
my docker containers and compress

1550
01:02:33,039 --> 01:02:35,200
anymore what's going on right because

1551
01:02:35,200 --> 01:02:39,200
pretty much i would say 90 to 95 or 99

1552
01:02:39,200 --> 01:02:42,079
of uh kubernetes clusters are running

1553
01:02:42,079 --> 01:02:44,000
docker containers and not the other ones

1554
01:02:44,000 --> 01:02:45,760
right you can have different runtime

1555
01:02:45,760 --> 01:02:48,480
engines you can have the container uh

1556
01:02:48,480 --> 01:02:51,839
the container d cryo or podman it can

1557
01:02:51,839 --> 01:02:53,920
there's different ones but since docker

1558
01:02:53,920 --> 01:02:56,319
was the default one people usually use

1559
01:02:56,319 --> 01:02:59,280
that right and and because docker is is

1560
01:02:59,280 --> 01:03:02,799
very well known and people have uh

1561
01:03:02,799 --> 01:03:04,799
have used docker before even before

1562
01:03:04,799 --> 01:03:06,960
kubernetes that's that's what they use

1563
01:03:06,960 --> 01:03:07,839
right

1564
01:03:07,839 --> 01:03:09,599
so i think that's that's that's it with

1565
01:03:09,599 --> 01:03:12,720
the oci there is a blog post i think

1566
01:03:12,720 --> 01:03:15,599
let me see docker kubernetes

1567
01:03:15,599 --> 01:03:17,920
advocated there's a there was a blog

1568
01:03:17,920 --> 01:03:20,160
post on the kubernetes website that

1569
01:03:20,160 --> 01:03:22,319
talks about that

1570
01:03:22,319 --> 01:03:23,440
whole

1571
01:03:23,440 --> 01:03:26,400
that whole issue

1572
01:03:26,559 --> 01:03:28,880
let's see

1573
01:03:29,280 --> 01:03:30,720
okay

1574
01:03:30,720 --> 01:03:33,839
yes let me post that thing here

1575
01:03:33,839 --> 01:03:37,599
and dr sheen faq

1576
01:03:37,599 --> 01:03:39,839
okay

1577
01:03:40,400 --> 01:03:43,359
let's move on if everybody got the kind

1578
01:03:43,359 --> 01:03:45,599
of the overview of the architecture here

1579
01:03:45,599 --> 01:03:48,720
let's move on with that

1580
01:03:49,280 --> 01:03:52,720
so as i said uh um before right

1581
01:03:52,720 --> 01:03:56,079
we're when we deploy a container on

1582
01:03:56,079 --> 01:03:57,599
kubernetes we're not deploying a

1583
01:03:57,599 --> 01:03:59,920
container itself we're deploying a pod

1584
01:03:59,920 --> 01:04:03,599
right so the pod is the smallest unit on

1585
01:04:03,599 --> 01:04:06,400
a kubernetes cluster right

1586
01:04:06,400 --> 01:04:08,720
the pod can have

1587
01:04:08,720 --> 01:04:11,280
one container inside that pod or

1588
01:04:11,280 --> 01:04:13,200
multiple containers right

1589
01:04:13,200 --> 01:04:16,079
so as the diagram here shows

1590
01:04:16,079 --> 01:04:19,200
um right you can have one two or many

1591
01:04:19,200 --> 01:04:22,079
right and and the reason being is that

1592
01:04:22,079 --> 01:04:25,359
the idea of containers is to run only

1593
01:04:25,359 --> 01:04:28,720
one process on that container right so

1594
01:04:28,720 --> 01:04:31,200
if i have my application running on my

1595
01:04:31,200 --> 01:04:33,680
container and i need something to let's

1596
01:04:33,680 --> 01:04:36,319
say collect the logs and ship those logs

1597
01:04:36,319 --> 01:04:38,000
to a central location

1598
01:04:38,000 --> 01:04:40,240
right i don't want to install that

1599
01:04:40,240 --> 01:04:42,160
application inside my application

1600
01:04:42,160 --> 01:04:43,920
container because that's going to break

1601
01:04:43,920 --> 01:04:45,200
the principle

1602
01:04:45,200 --> 01:04:47,839
and the idea of containers right so i

1603
01:04:47,839 --> 01:04:51,280
deploy another container on the same pod

1604
01:04:51,280 --> 01:04:54,000
usually on the same pod and that other

1605
01:04:54,000 --> 01:04:56,319
container talks to my first my

1606
01:04:56,319 --> 01:04:58,640
application container and collects the

1607
01:04:58,640 --> 01:05:01,520
logs from there to ship it to another

1608
01:05:01,520 --> 01:05:04,000
location so that container is usually

1609
01:05:04,000 --> 01:05:06,720
called a sidecar container right it can

1610
01:05:06,720 --> 01:05:09,599
be used to map to collect metrics logs

1611
01:05:09,599 --> 01:05:11,200
it can be used

1612
01:05:11,200 --> 01:05:13,280
as a security container as well some

1613
01:05:13,280 --> 01:05:16,000
tools some security tools that deploy

1614
01:05:16,000 --> 01:05:17,359
the word the way that they work they're

1615
01:05:17,359 --> 01:05:19,599
deployed as a side car as well

1616
01:05:19,599 --> 01:05:22,720
so there's different uh uh

1617
01:05:22,720 --> 01:05:25,200
different usage for that that sidecar

1618
01:05:25,200 --> 01:05:27,280
container right and since they're on the

1619
01:05:27,280 --> 01:05:30,319
same pod right they share the their uh

1620
01:05:30,319 --> 01:05:32,720
the name spaces there

1621
01:05:32,720 --> 01:05:34,480
um

1622
01:05:34,480 --> 01:05:36,480
so other objects that you can have on

1623
01:05:36,480 --> 01:05:39,520
kubernetes is a deployment right

1624
01:05:39,520 --> 01:05:42,319
you can you can deploy a pod by itself

1625
01:05:42,319 --> 01:05:43,119
but

1626
01:05:43,119 --> 01:05:45,200
you want to use the features provided by

1627
01:05:45,200 --> 01:05:47,359
kubernetes right and

1628
01:05:47,359 --> 01:05:50,079
the the way the deployment works it

1629
01:05:50,079 --> 01:05:52,640
gives kubernetes or your kubernetes

1630
01:05:52,640 --> 01:05:54,559
objects scaling

1631
01:05:54,559 --> 01:05:57,680
updates and rollback abilities right so

1632
01:05:57,680 --> 01:06:00,000
let's say if i need to

1633
01:06:00,000 --> 01:06:02,720
create another pod to handle traffic and

1634
01:06:02,720 --> 01:06:04,240
there is a lot of traffic on my

1635
01:06:04,240 --> 01:06:06,720
application i can easily do that with

1636
01:06:06,720 --> 01:06:09,119
deployments if i need to scale up or

1637
01:06:09,119 --> 01:06:11,680
scale balance more if i'm not using all

1638
01:06:11,680 --> 01:06:13,599
those containers and and i can save

1639
01:06:13,599 --> 01:06:15,200
money and reduce the number of

1640
01:06:15,200 --> 01:06:17,440
containers that are running then uh the

1641
01:06:17,440 --> 01:06:19,680
number of pods i can do that as well

1642
01:06:19,680 --> 01:06:22,400
with a deployment right deployment is

1643
01:06:22,400 --> 01:06:24,960
just an api a kubernetes api object

1644
01:06:24,960 --> 01:06:27,200
right it's not something that that

1645
01:06:27,200 --> 01:06:30,000
exists on on the the node itself it only

1646
01:06:30,000 --> 01:06:31,680
exists inside my cluster it's just a

1647
01:06:31,680 --> 01:06:34,240
configuration and the way that they use

1648
01:06:34,240 --> 01:06:35,920
there's many different objects that i'm

1649
01:06:35,920 --> 01:06:37,599
going to show on the next slide we're

1650
01:06:37,599 --> 01:06:39,760
not going to be able to cover all those

1651
01:06:39,760 --> 01:06:41,680
objects here but just to give you an

1652
01:06:41,680 --> 01:06:43,920
overview okay

1653
01:06:43,920 --> 01:06:47,039
and on top of that deployment

1654
01:06:47,039 --> 01:06:50,480
we have something called namespaces and

1655
01:06:50,480 --> 01:06:53,280
those are different than the the linux

1656
01:06:53,280 --> 01:06:55,920
kernel namespaces these are kubernetes

1657
01:06:55,920 --> 01:06:58,480
namespaces right and and the way that

1658
01:06:58,480 --> 01:07:01,520
the namespaces work here is that they

1659
01:07:01,520 --> 01:07:03,039
work like

1660
01:07:03,039 --> 01:07:06,240
they're just a logical separation of

1661
01:07:06,240 --> 01:07:07,920
different applications that i have on my

1662
01:07:07,920 --> 01:07:10,480
cluster right it's basically folders

1663
01:07:10,480 --> 01:07:13,039
inside my cluster right there is no kind

1664
01:07:13,039 --> 01:07:16,079
of a security boundary between those

1665
01:07:16,079 --> 01:07:18,079
namespaces right so i can have

1666
01:07:18,079 --> 01:07:20,160
a namespace for my

1667
01:07:20,160 --> 01:07:22,960
uh developer environment a namespace for

1668
01:07:22,960 --> 01:07:24,960
my keyway environment and a namespace

1669
01:07:24,960 --> 01:07:27,119
for my production environment i can also

1670
01:07:27,119 --> 01:07:30,160
have a namespace for my developer team

1671
01:07:30,160 --> 01:07:32,720
one and my name is space for developer

1672
01:07:32,720 --> 01:07:34,720
team two if they're both using the same

1673
01:07:34,720 --> 01:07:36,160
cluster right

1674
01:07:36,160 --> 01:07:37,200
so

1675
01:07:37,200 --> 01:07:39,119
and we're gonna talk about namespaces as

1676
01:07:39,119 --> 01:07:41,359
well here which is another part

1677
01:07:41,359 --> 01:07:43,280
on in another slide

1678
01:07:43,280 --> 01:07:45,359
and and on top of the namespaces there's

1679
01:07:45,359 --> 01:07:48,240
nodes right nodes is basically the the

1680
01:07:48,240 --> 01:07:50,720
server that's running my application so

1681
01:07:50,720 --> 01:07:51,680
it can be

1682
01:07:51,680 --> 01:07:54,799
a vm it can be an ec2 instance it can be

1683
01:07:54,799 --> 01:07:59,359
also a far gate on aws or other kind of

1684
01:07:59,359 --> 01:08:00,720
serverless

1685
01:08:00,720 --> 01:08:04,160
applications or service serverless

1686
01:08:04,160 --> 01:08:06,880
runtimes or workloads

1687
01:08:06,880 --> 01:08:09,039
so it can be anything it can also be

1688
01:08:09,039 --> 01:08:11,760
runny on prem and can be bare metal as

1689
01:08:11,760 --> 01:08:14,880
well there's there's also some uh

1690
01:08:14,880 --> 01:08:17,040
some companies that provide kubernetes

1691
01:08:17,040 --> 01:08:20,158
running on bare metal

1692
01:08:20,158 --> 01:08:22,479
okay

1693
01:08:22,880 --> 01:08:25,679
and let me go to the

1694
01:08:25,679 --> 01:08:28,799
api objects

1695
01:08:28,799 --> 01:08:30,560
so there's as i said there's different

1696
01:08:30,560 --> 01:08:32,799
api objects that you can create on your

1697
01:08:32,799 --> 01:08:36,238
cluster you have a pod as i mentioned

1698
01:08:36,238 --> 01:08:39,198
right there is replica set which is is

1699
01:08:39,198 --> 01:08:41,679
used by the deployment to replicate your

1700
01:08:41,679 --> 01:08:44,640
pods there is demonstrate stateful set

1701
01:08:44,640 --> 01:08:46,399
right the deployment itself as i

1702
01:08:46,399 --> 01:08:49,198
mentioned there's service that's used to

1703
01:08:49,198 --> 01:08:53,600
expose uh either like a port or or my uh

1704
01:08:53,600 --> 01:08:55,759
my application to the world they can

1705
01:08:55,759 --> 01:08:58,080
expose that through a load balancer um

1706
01:08:58,080 --> 01:08:59,279
as well

1707
01:08:59,279 --> 01:09:01,520
there's job and chrome job which are

1708
01:09:01,520 --> 01:09:04,880
used to uh uh just they use the job

1709
01:09:04,880 --> 01:09:06,960
container it's basically a pod or a

1710
01:09:06,960 --> 01:09:09,359
container that runs only once the job

1711
01:09:09,359 --> 01:09:10,880
and the chrome job it's basically a

1712
01:09:10,880 --> 01:09:13,359
container that runs according to the

1713
01:09:13,359 --> 01:09:15,839
chrome tab right i i

1714
01:09:15,839 --> 01:09:17,759
i apply the configuration there and it

1715
01:09:17,759 --> 01:09:20,238
can join it can run periodically like

1716
01:09:20,238 --> 01:09:22,319
every every other minute every other

1717
01:09:22,319 --> 01:09:24,719
hour whatever i choose and whatever i

1718
01:09:24,719 --> 01:09:26,799
configured on the crown tab

1719
01:09:26,799 --> 01:09:29,600
configuration of that container

1720
01:09:29,600 --> 01:09:32,640
um there is also config maps and secrets

1721
01:09:32,640 --> 01:09:34,880
my config maps and secrets are usually

1722
01:09:34,880 --> 01:09:37,759
used to store information right config

1723
01:09:37,759 --> 01:09:40,080
maps is for configuration information

1724
01:09:40,080 --> 01:09:42,880
that are not really sensitive

1725
01:09:42,880 --> 01:09:45,839
and secrets are supposed to store

1726
01:09:45,839 --> 01:09:47,439
secret information right sensitive

1727
01:09:47,439 --> 01:09:48,719
information

1728
01:09:48,719 --> 01:09:49,839
but

1729
01:09:49,839 --> 01:09:52,560
i'm just going to say here that

1730
01:09:52,560 --> 01:09:55,760
secrets are not really secret

1731
01:09:55,760 --> 01:09:58,239
in kubernetes because the way that

1732
01:09:58,239 --> 01:10:02,080
secret works by default is that all the

1733
01:10:02,080 --> 01:10:04,480
sensitive information is stored on that

1734
01:10:04,480 --> 01:10:05,600
cd

1735
01:10:05,600 --> 01:10:09,760
and it's stored on uh encoded as base64

1736
01:10:09,760 --> 01:10:12,159
right so you're probably aware that

1737
01:10:12,159 --> 01:10:14,400
basic 6664

1738
01:10:14,400 --> 01:10:17,679
can be easily decoded and so that's not

1739
01:10:17,679 --> 01:10:20,640
really protecting that information

1740
01:10:20,640 --> 01:10:22,719
and also

1741
01:10:22,719 --> 01:10:26,960
on xcd by default all the

1742
01:10:26,960 --> 01:10:29,840
all the information stored in that cd is

1743
01:10:29,840 --> 01:10:31,520
stored in plain text right it's not

1744
01:10:31,520 --> 01:10:34,000
encrypted right so there is another

1745
01:10:34,000 --> 01:10:36,000
issue there as well so there's different

1746
01:10:36,000 --> 01:10:38,400
uh ways that you can uh

1747
01:10:38,400 --> 01:10:41,360
use secrets on kubernetes you can maybe

1748
01:10:41,360 --> 01:10:44,239
use like a third-party solution like

1749
01:10:44,239 --> 01:10:47,040
hashicorp vault or use the

1750
01:10:47,040 --> 01:10:49,840
the one from aws as well it doesn't

1751
01:10:49,840 --> 01:10:51,600
matter so just be careful if you're

1752
01:10:51,600 --> 01:10:53,840
using secrets with kubernetes don't use

1753
01:10:53,840 --> 01:10:56,800
the default settings right apply there's

1754
01:10:56,800 --> 01:10:58,880
some uh configurations that you can

1755
01:10:58,880 --> 01:11:02,800
apply to at least encrypt your secrets

1756
01:11:02,800 --> 01:11:04,719
on that city

1757
01:11:04,719 --> 01:11:06,320
and yeah there is in-grass and many

1758
01:11:06,320 --> 01:11:07,760
different objects right and those

1759
01:11:07,760 --> 01:11:10,960
objects are all they all work

1760
01:11:10,960 --> 01:11:13,280
they can all be applied as a yemo file

1761
01:11:13,280 --> 01:11:15,199
and i tell that and apply that to my

1762
01:11:15,199 --> 01:11:18,239
cluster using tube ctl and and that

1763
01:11:18,239 --> 01:11:20,000
depending on what i'm creating on that

1764
01:11:20,000 --> 01:11:22,159
file that gets treated on the cluster

1765
01:11:22,159 --> 01:11:24,159
exactly because of the desired state

1766
01:11:24,159 --> 01:11:26,400
right i don't care how kubernetes is

1767
01:11:26,400 --> 01:11:28,800
going to do that i just tell it okay i

1768
01:11:28,800 --> 01:11:31,840
want this object created on my cluster

1769
01:11:31,840 --> 01:11:34,960
and and then okay apply that to to the

1770
01:11:34,960 --> 01:11:37,760
lcd once i send that information via

1771
01:11:37,760 --> 01:11:40,000
cube ctl that goes through the api

1772
01:11:40,000 --> 01:11:42,719
server and gets stored in that cd right

1773
01:11:42,719 --> 01:11:44,719
and now the the controller is checking

1774
01:11:44,719 --> 01:11:47,280
that oh something changed here and oh

1775
01:11:47,280 --> 01:11:50,080
they want me to create this uh this

1776
01:11:50,080 --> 01:11:53,199
object okay now deploy this object and

1777
01:11:53,199 --> 01:11:56,480
everything happens really quickly

1778
01:11:56,480 --> 01:11:57,440
okay

1779
01:11:57,440 --> 01:12:00,960
any questions so far

1780
01:12:01,679 --> 01:12:03,760
let me see here i think my cluster got

1781
01:12:03,760 --> 01:12:05,360
created so i'm just going to talk about

1782
01:12:05,360 --> 01:12:08,480
chip ctl and then we're going to go back

1783
01:12:08,480 --> 01:12:11,199
to the cluster if anyone's still having

1784
01:12:11,199 --> 01:12:12,080
uh

1785
01:12:12,080 --> 01:12:14,480
struggling or still having issues please

1786
01:12:14,480 --> 01:12:16,959
let me know

1787
01:12:17,280 --> 01:12:20,239
so basically the kip ctl as we

1788
01:12:20,239 --> 01:12:22,159
we did on the cloud9 instance right is

1789
01:12:22,159 --> 01:12:24,239
the cli tool that allows you to control

1790
01:12:24,239 --> 01:12:26,800
your kubernetes cluster right

1791
01:12:26,800 --> 01:12:28,960
it's it's a config file there is a

1792
01:12:28,960 --> 01:12:30,719
config file that

1793
01:12:30,719 --> 01:12:33,600
uh can be found on your home directory

1794
01:12:33,600 --> 01:12:37,040
under slash dot cube and i can show you

1795
01:12:37,040 --> 01:12:39,040
what's where that's stored on the on our

1796
01:12:39,040 --> 01:12:40,960
cloud9 instance right

1797
01:12:40,960 --> 01:12:44,800
it's very similar to the docker cli

1798
01:12:45,360 --> 01:12:47,760
uh for docker containers let me see

1799
01:12:47,760 --> 01:12:50,560
another question here is an api object

1800
01:12:50,560 --> 01:12:52,320
like request parameters to the

1801
01:12:52,320 --> 01:12:55,120
appropriate api endpoints

1802
01:12:55,120 --> 01:12:58,559
request parameters

1803
01:12:58,800 --> 01:13:01,840
not sure i understand the question

1804
01:13:01,840 --> 01:13:05,600
api objects on kubernetes

1805
01:13:05,600 --> 01:13:06,960
they are

1806
01:13:06,960 --> 01:13:08,400
they're

1807
01:13:08,400 --> 01:13:09,679
they're just like

1808
01:13:09,679 --> 01:13:11,440
different different objects they have

1809
01:13:11,440 --> 01:13:12,560
different

1810
01:13:12,560 --> 01:13:14,560
uh

1811
01:13:14,560 --> 01:13:17,360
how can i say functions right

1812
01:13:17,360 --> 01:13:19,760
so basically when you talk to kubernetes

1813
01:13:19,760 --> 01:13:22,159
and you talk to the api server there is

1814
01:13:22,159 --> 01:13:24,719
an endpoint for each each object right

1815
01:13:24,719 --> 01:13:27,760
so let's say my kubernetes cluster and

1816
01:13:27,760 --> 01:13:32,159
like slash api slash pod slash create

1817
01:13:32,159 --> 01:13:34,000
right so there's different endpoints

1818
01:13:34,000 --> 01:13:37,280
everything gets gets uh convert from the

1819
01:13:37,280 --> 01:13:41,600
api request and gets to the lcd

1820
01:13:41,600 --> 01:13:42,560
right

1821
01:13:42,560 --> 01:13:44,719
once that's stored on that cd

1822
01:13:44,719 --> 01:13:47,120
and depending on which type of object

1823
01:13:47,120 --> 01:13:50,000
that gets created on my cluster

1824
01:13:50,000 --> 01:13:51,840
right i'm not sure if you can try to

1825
01:13:51,840 --> 01:13:54,239
rephrase that question uh

1826
01:13:54,239 --> 01:13:56,800
please uh so that how can i try to

1827
01:13:56,800 --> 01:13:58,800
answer that better i'm not sure

1828
01:13:58,800 --> 01:14:01,280
if i understood correctly

1829
01:14:01,280 --> 01:14:03,840
but but yeah so the syntax of the cube

1830
01:14:03,840 --> 01:14:06,080
ctl right it's very similar to the

1831
01:14:06,080 --> 01:14:08,880
docker command the docker uh cli and and

1832
01:14:08,880 --> 01:14:11,199
the reason being as well that they did

1833
01:14:11,199 --> 01:14:12,480
that so

1834
01:14:12,480 --> 01:14:14,480
so that people that were using docker

1835
01:14:14,480 --> 01:14:17,040
already could easily shift and start

1836
01:14:17,040 --> 01:14:19,920
using kubernetes without facing too many

1837
01:14:19,920 --> 01:14:22,719
challenges right

1838
01:14:22,719 --> 01:14:24,719
so yeah that's it

1839
01:14:24,719 --> 01:14:27,360
see yeah that's before we move on let's

1840
01:14:27,360 --> 01:14:30,800
go back to our cluster and let me go to

1841
01:14:30,800 --> 01:14:34,640
uh the cloud9 instance here

1842
01:14:39,520 --> 01:14:41,120
okay

1843
01:14:41,120 --> 01:14:43,840
sure

1844
01:14:43,920 --> 01:14:45,760
okay

1845
01:14:45,760 --> 01:14:49,280
so you can see um

1846
01:14:50,400 --> 01:14:52,320
from the command that i did right create

1847
01:14:52,320 --> 01:14:54,560
cluster it did a bunch of things here

1848
01:14:54,560 --> 01:14:56,640
creating the cloud formation

1849
01:14:56,640 --> 01:14:59,440
and everything and should be uh

1850
01:14:59,440 --> 01:15:01,600
should be working right

1851
01:15:01,600 --> 01:15:03,360
so to make sure that everything is

1852
01:15:03,360 --> 01:15:05,840
working if as i said if you face any

1853
01:15:05,840 --> 01:15:08,159
errors if there was something going on

1854
01:15:08,159 --> 01:15:11,280
or there was no not enough resources

1855
01:15:11,280 --> 01:15:13,520
either either try to change the name of

1856
01:15:13,520 --> 01:15:15,679
your cluster and try again because it

1857
01:15:15,679 --> 01:15:18,080
could be just a temporary thing or the

1858
01:15:18,080 --> 01:15:20,880
availability zone that eks ctl chose for

1859
01:15:20,880 --> 01:15:23,440
you it wasn't uh there wasn't enough

1860
01:15:23,440 --> 01:15:26,080
resources and once you try again with a

1861
01:15:26,080 --> 01:15:27,760
different name it's going to try in a

1862
01:15:27,760 --> 01:15:29,679
different availability zone or you can

1863
01:15:29,679 --> 01:15:32,560
just change regions and and do the same

1864
01:15:32,560 --> 01:15:34,480
thing and and see if that works

1865
01:15:34,480 --> 01:15:35,920
unfortunately

1866
01:15:35,920 --> 01:15:37,120
i don't know if there is a way around

1867
01:15:37,120 --> 01:15:39,840
that if someone that works for aws can

1868
01:15:39,840 --> 01:15:41,760
tell me about it but as far as i know

1869
01:15:41,760 --> 01:15:42,960
there's

1870
01:15:42,960 --> 01:15:45,520
there's no way unless you create your

1871
01:15:45,520 --> 01:15:46,400
own

1872
01:15:46,400 --> 01:15:47,280
uh

1873
01:15:47,280 --> 01:15:49,760
subnets and vpcs and configure that that

1874
01:15:49,760 --> 01:15:51,120
you know that there are resources

1875
01:15:51,120 --> 01:15:54,800
available but that can be like a soft

1876
01:15:54,800 --> 01:15:55,840
limit

1877
01:15:55,840 --> 01:15:56,800
from

1878
01:15:56,800 --> 01:16:00,800
aws that i'm not very aware of

1879
01:16:00,800 --> 01:16:06,000
hey so let me just clear this

1880
01:16:06,000 --> 01:16:09,760
see okay good you guys see my screen

1881
01:16:09,760 --> 01:16:12,880
is there another question there

1882
01:16:12,880 --> 01:16:15,520
okay no questions

1883
01:16:15,520 --> 01:16:16,960
so basically

1884
01:16:16,960 --> 01:16:19,679
let me do cube ctl get

1885
01:16:19,679 --> 01:16:22,080
notes

1886
01:16:22,080 --> 01:16:23,360
okay

1887
01:16:23,360 --> 01:16:26,400
so i can see here right uh this is the

1888
01:16:26,400 --> 01:16:28,239
first command i'm getting all the nodes

1889
01:16:28,239 --> 01:16:30,640
that are part of my cluster right and

1890
01:16:30,640 --> 01:16:32,880
there's only one node which is this

1891
01:16:32,880 --> 01:16:35,679
instance here right that's running

1892
01:16:35,679 --> 01:16:37,679
and it's selling the kubernetes version

1893
01:16:37,679 --> 01:16:38,560
here

1894
01:16:38,560 --> 01:16:39,360
um

1895
01:16:39,360 --> 01:16:40,719
120

1896
01:16:40,719 --> 01:16:41,600
and

1897
01:16:41,600 --> 01:16:44,080
yeah it's ready right so the instance is

1898
01:16:44,080 --> 01:16:47,679
ready if i go to the aws console i can

1899
01:16:47,679 --> 01:16:49,920
see another instance created there as

1900
01:16:49,920 --> 01:16:53,040
well besides my cloud nine instance now

1901
01:16:53,040 --> 01:16:54,080
right

1902
01:16:54,080 --> 01:16:56,239
um

1903
01:16:56,239 --> 01:16:59,559
let's see

1904
01:17:02,960 --> 01:17:04,880
here on uh

1905
01:17:04,880 --> 01:17:06,480
on the

1906
01:17:06,480 --> 01:17:09,199
home directory slash dot cube

1907
01:17:09,199 --> 01:17:11,440
there are some stuff that was created

1908
01:17:11,440 --> 01:17:14,400
the config file right

1909
01:17:14,400 --> 01:17:17,040
if i cut that there is some

1910
01:17:17,040 --> 01:17:19,199
some information about my cluster how to

1911
01:17:19,199 --> 01:17:21,199
access my keys and other stuff right i'm

1912
01:17:21,199 --> 01:17:22,800
gonna not gonna show

1913
01:17:22,800 --> 01:17:25,920
everything but basically that's it it's

1914
01:17:25,920 --> 01:17:29,280
there you can see that there is uh some

1915
01:17:29,280 --> 01:17:32,000
certificates the ip of my cluster and

1916
01:17:32,000 --> 01:17:34,719
all that stuff

1917
01:17:35,040 --> 01:17:37,120
one thing that you need to be aware of

1918
01:17:37,120 --> 01:17:39,920
on eks

1919
01:17:39,920 --> 01:17:42,880
clusters is that by default

1920
01:17:42,880 --> 01:17:44,960
once i create my cluster

1921
01:17:44,960 --> 01:17:48,080
the api endpoint

1922
01:17:48,080 --> 01:17:51,120
the api endpoint for my cube api server

1923
01:17:51,120 --> 01:17:54,239
that's public by default right i know

1924
01:17:54,239 --> 01:17:57,440
that's a long url and it's it's hard to

1925
01:17:57,440 --> 01:17:58,400
guess

1926
01:17:58,400 --> 01:18:01,040
but there are attackers people on the

1927
01:18:01,040 --> 01:18:03,840
internet scanning uh the internet for

1928
01:18:03,840 --> 01:18:06,640
looking for those api endpoints

1929
01:18:06,640 --> 01:18:08,880
so if you don't need that

1930
01:18:08,880 --> 01:18:11,920
exposed to the internet be be be aware

1931
01:18:11,920 --> 01:18:13,840
of that and make sure that you configure

1932
01:18:13,840 --> 01:18:15,600
that to be private and we're going to

1933
01:18:15,600 --> 01:18:18,719
see that very soon

1934
01:18:18,800 --> 01:18:21,199
okay so now that my cluster is created

1935
01:18:21,199 --> 01:18:24,400
we're going to deploy the other objects

1936
01:18:24,400 --> 01:18:27,280
uh actually the objects off of my

1937
01:18:27,280 --> 01:18:29,280
kubernetes cluster right now my

1938
01:18:29,280 --> 01:18:31,440
kubernetes doesn't have anything right

1939
01:18:31,440 --> 01:18:33,920
so if i do keep ctl that

1940
01:18:33,920 --> 01:18:35,600
pods

1941
01:18:35,600 --> 01:18:38,719
no resources found

1942
01:18:38,840 --> 01:18:42,400
uh is some resources right from they are

1943
01:18:42,400 --> 01:18:45,280
the default resources of kubernetes uh

1944
01:18:45,280 --> 01:18:48,080
of the eks cluster right there are some

1945
01:18:48,080 --> 01:18:51,440
stuff core dns aws cube proxy running

1946
01:18:51,440 --> 01:18:54,000
but there is no no application run right

1947
01:18:54,000 --> 01:18:55,520
you can see that they're all running on

1948
01:18:55,520 --> 01:18:57,920
the cube system namespace which is the

1949
01:18:57,920 --> 01:19:01,040
main namespace of my uh control plane

1950
01:19:01,040 --> 01:19:02,640
components right

1951
01:19:02,640 --> 01:19:05,120
let me see if you've got pods

1952
01:19:05,120 --> 01:19:08,880
uh n s or or namespaces right so these

1953
01:19:08,880 --> 01:19:12,560
can do like this namespace or and as as

1954
01:19:12,560 --> 01:19:14,560
a shorter version

1955
01:19:14,560 --> 01:19:17,120
right and as i said namespaces are kind

1956
01:19:17,120 --> 01:19:18,239
of like

1957
01:19:18,239 --> 01:19:21,199
basically folders for organizing stuff

1958
01:19:21,199 --> 01:19:23,199
on your kubernetes cluster right and by

1959
01:19:23,199 --> 01:19:25,600
default i usually have those four

1960
01:19:25,600 --> 01:19:28,640
uh name spaces when i create my cluster

1961
01:19:28,640 --> 01:19:32,800
either on the manage or unmanage version

1962
01:19:32,800 --> 01:19:35,040
okay

1963
01:19:35,120 --> 01:19:37,120
so now let's create the objects right

1964
01:19:37,120 --> 01:19:39,199
and let me go to this file here and i'm

1965
01:19:39,199 --> 01:19:40,640
going to describe everything that's

1966
01:19:40,640 --> 01:19:44,000
there before we apply this uh

1967
01:19:44,000 --> 01:19:45,840
this object there

1968
01:19:45,840 --> 01:19:48,080
so i'm creating a new namespace on the

1969
01:19:48,080 --> 01:19:50,000
cluster object right you can see here

1970
01:19:50,000 --> 01:19:52,719
and this is our different every

1971
01:19:52,719 --> 01:19:55,120
the way that yammer works right every

1972
01:19:55,120 --> 01:19:58,800
three dashes here it it's it's basically

1973
01:19:58,800 --> 01:20:01,760
a separate file or separate object but i

1974
01:20:01,760 --> 01:20:03,520
put everything together right so that's

1975
01:20:03,520 --> 01:20:04,800
easy to

1976
01:20:04,800 --> 01:20:07,440
uh to understand

1977
01:20:07,440 --> 01:20:09,920
so i have one object being created here

1978
01:20:09,920 --> 01:20:11,920
that's a namespace called

1979
01:20:11,920 --> 01:20:14,000
web app right so basically i'm creating

1980
01:20:14,000 --> 01:20:17,520
a folder to deploy my web application

1981
01:20:17,520 --> 01:20:19,840
this is an our back configuration and

1982
01:20:19,840 --> 01:20:21,440
creating a cluster role and a cluster

1983
01:20:21,440 --> 01:20:24,800
role binding telling that the

1984
01:20:24,800 --> 01:20:27,280
um the service account and i'm going to

1985
01:20:27,280 --> 01:20:29,199
talk about our back and services account

1986
01:20:29,199 --> 01:20:31,280
later but basically telling the service

1987
01:20:31,280 --> 01:20:33,120
account that i'm gonna use to deploy my

1988
01:20:33,120 --> 01:20:36,400
web application my my my my pods running

1989
01:20:36,400 --> 01:20:39,360
on this web app are running as add me

1990
01:20:39,360 --> 01:20:42,080
right and and so that's a bad thing and

1991
01:20:42,080 --> 01:20:44,080
i'm i'm purposely doing a miss

1992
01:20:44,080 --> 01:20:46,639
configuration on my cluster but that's

1993
01:20:46,639 --> 01:20:48,639
for the exercise that's for the workshop

1994
01:20:48,639 --> 01:20:50,719
right by default you don't want to do

1995
01:20:50,719 --> 01:20:54,000
that you don't want to do that

1996
01:20:54,159 --> 01:20:56,000
um there is also

1997
01:20:56,000 --> 01:20:58,320
a deployment right and i'm using

1998
01:20:58,320 --> 01:20:59,760
deployments to

1999
01:20:59,760 --> 01:21:04,400
deploy my my web application i'm using

2000
01:21:04,400 --> 01:21:06,320
i'm creating like a drupal deployment

2001
01:21:06,320 --> 01:21:07,920
here because i'm we're deploying a

2002
01:21:07,920 --> 01:21:10,639
drupal web application and you can see

2003
01:21:10,639 --> 01:21:13,679
here down below that the specs of the

2004
01:21:13,679 --> 01:21:15,440
containers that i'm using i'm

2005
01:21:15,440 --> 01:21:18,639
downloading drupal 8.5.0

2006
01:21:18,639 --> 01:21:21,199
and since there's no specification of

2007
01:21:21,199 --> 01:21:22,960
which container registering i'm

2008
01:21:22,960 --> 01:21:24,320
downloading from

2009
01:21:24,320 --> 01:21:26,320
that's getting that from docker here

2010
01:21:26,320 --> 01:21:29,040
right so once i deploy that i apply that

2011
01:21:29,040 --> 01:21:31,120
object to my cluster

2012
01:21:31,120 --> 01:21:33,520
kubernetes knows that okay i don't have

2013
01:21:33,520 --> 01:21:36,719
that image here or or whatever whatever

2014
01:21:36,719 --> 01:21:38,320
you want so

2015
01:21:38,320 --> 01:21:40,159
i'm going to download the by default it

2016
01:21:40,159 --> 01:21:43,280
uses docker hub to look for images right

2017
01:21:43,280 --> 01:21:44,800
unless you want to apply of course

2018
01:21:44,800 --> 01:21:46,560
that's not a good practice there's not

2019
01:21:46,560 --> 01:21:48,560
something that you want to do because if

2020
01:21:48,560 --> 01:21:52,000
someone compromises the docker hub or or

2021
01:21:52,000 --> 01:21:54,159
puts a malicious image there then you're

2022
01:21:54,159 --> 01:21:55,760
downloading an image to your cluster

2023
01:21:55,760 --> 01:21:58,639
right so the best practice is to have

2024
01:21:58,639 --> 01:22:01,040
your private container registry and

2025
01:22:01,040 --> 01:22:03,440
store images your

2026
01:22:03,440 --> 01:22:06,239
approved images there for you to

2027
01:22:06,239 --> 01:22:10,639
download on your kubernetes cluster

2028
01:22:10,639 --> 01:22:12,480
sounds good

2029
01:22:12,480 --> 01:22:15,520
so and there is also

2030
01:22:15,520 --> 01:22:18,800
a a service i'm creating a service here

2031
01:22:18,800 --> 01:22:20,480
which i'm going to use services or

2032
01:22:20,480 --> 01:22:22,880
objects that are that i can use to

2033
01:22:22,880 --> 01:22:25,120
expose uh

2034
01:22:25,120 --> 01:22:27,520
my containers right and i can i can

2035
01:22:27,520 --> 01:22:29,760
expose just like there's different types

2036
01:22:29,760 --> 01:22:31,040
of service

2037
01:22:31,040 --> 01:22:32,719
the type that i'm creating here is a

2038
01:22:32,719 --> 01:22:34,560
load balancer which is going to create

2039
01:22:34,560 --> 01:22:38,639
an aws load balancer and i expose my

2040
01:22:38,639 --> 01:22:40,960
drupal web application right which is

2041
01:22:40,960 --> 01:22:43,360
running on port 80 and it's going to

2042
01:22:43,360 --> 01:22:45,440
expose that on a port 80 of the load

2043
01:22:45,440 --> 01:22:47,040
balancer as well

2044
01:22:47,040 --> 01:22:48,560
so as i said there's different types of

2045
01:22:48,560 --> 01:22:50,480
services there is cluster ipe there is

2046
01:22:50,480 --> 01:22:53,520
no port there is a load balancer and i

2047
01:22:53,520 --> 01:22:55,679
think one more

2048
01:22:55,679 --> 01:22:57,520
yeah i forgot the other one and no

2049
01:22:57,520 --> 01:23:00,719
problem i'll i'll oh i'll remember

2050
01:23:00,719 --> 01:23:03,360
and this is basically i'm adding

2051
01:23:03,360 --> 01:23:06,400
i'm adding just a kind of a flag here

2052
01:23:06,400 --> 01:23:08,800
that i use this is i use this this kind

2053
01:23:08,800 --> 01:23:09,520
of

2054
01:23:09,520 --> 01:23:13,280
setup to deploy a ctf challenge right so

2055
01:23:13,280 --> 01:23:15,920
i have a flag here i'm creating a secret

2056
01:23:15,920 --> 01:23:19,199
and i'm storing that secret as a

2057
01:23:19,199 --> 01:23:20,639
a flag

2058
01:23:20,639 --> 01:23:23,760
named ctf on the cube system namespace

2059
01:23:23,760 --> 01:23:26,239
and this is the the the result of the

2060
01:23:26,239 --> 01:23:28,880
flag here right the the the value of the

2061
01:23:28,880 --> 01:23:32,080
flag and it's basically base64 encoded

2062
01:23:32,080 --> 01:23:33,760
it's just a flag that we're going to

2063
01:23:33,760 --> 01:23:36,480
practice and try to get that once we

2064
01:23:36,480 --> 01:23:39,600
compromise the cluster okay

2065
01:23:39,600 --> 01:23:41,040
sounds good so

2066
01:23:41,040 --> 01:23:43,440
i i hope you understood all these

2067
01:23:43,440 --> 01:23:45,679
objects and we're going to apply that to

2068
01:23:45,679 --> 01:23:46,560
my

2069
01:23:46,560 --> 01:23:47,679
cluster and you're going to see that

2070
01:23:47,679 --> 01:23:50,159
that's going to be very uh

2071
01:23:50,159 --> 01:23:51,760
quick

2072
01:23:51,760 --> 01:23:55,520
let me go back to the

2073
01:23:55,760 --> 01:23:58,000
environment

2074
01:23:58,000 --> 01:24:00,480
let me go back to that uh project that

2075
01:24:00,480 --> 01:24:02,400
we downloaded from github

2076
01:24:02,400 --> 01:24:04,560
and that's where my cluster underline

2077
01:24:04,560 --> 01:24:06,000
objects is

2078
01:24:06,000 --> 01:24:08,159
um yeah just keep in mind that for the

2079
01:24:08,159 --> 01:24:09,920
first file

2080
01:24:09,920 --> 01:24:11,600
i don't know why i did this but the

2081
01:24:11,600 --> 01:24:14,159
first one i used dash and the second one

2082
01:24:14,159 --> 01:24:16,320
i used underlined so let's see if the

2083
01:24:16,320 --> 01:24:18,239
command is correct yeah it's using

2084
01:24:18,239 --> 01:24:20,239
underline so that's fine

2085
01:24:20,239 --> 01:24:24,560
so once i do this kubernetes apply

2086
01:24:24,560 --> 01:24:27,840
dash f right so dash f means that i'm

2087
01:24:27,840 --> 01:24:29,760
passing

2088
01:24:29,760 --> 01:24:32,400
feeding it a file and so it's going to

2089
01:24:32,400 --> 01:24:34,719
look whatever is in that file and apply

2090
01:24:34,719 --> 01:24:39,360
that to the cube the kubernetes cluster

2091
01:24:39,360 --> 01:24:43,040
let me just apply that

2092
01:24:43,360 --> 01:24:45,360
and you can see that all the objects

2093
01:24:45,360 --> 01:24:47,440
that were on that file were created

2094
01:24:47,440 --> 01:24:50,000
right the namespace web app

2095
01:24:50,000 --> 01:24:53,600
the service account the the deployment

2096
01:24:53,600 --> 01:24:55,760
the service and even the secret

2097
01:24:55,760 --> 01:24:58,719
everything is created now so if i do now

2098
01:24:58,719 --> 01:25:00,639
keep ctl get

2099
01:25:00,639 --> 01:25:03,440
namespaces

2100
01:25:03,440 --> 01:25:05,280
you can see that there is a web app and

2101
01:25:05,280 --> 01:25:08,320
space is there on the bottom right

2102
01:25:08,320 --> 01:25:11,280
if i do tip ctl

2103
01:25:11,280 --> 01:25:13,920
get um

2104
01:25:13,920 --> 01:25:16,480
pods

2105
01:25:17,520 --> 01:25:20,880
and web apps so now that i'm i just want

2106
01:25:20,880 --> 01:25:22,480
some information from a specific

2107
01:25:22,480 --> 01:25:24,880
namespace i'm using the the parameter

2108
01:25:24,880 --> 01:25:27,520
dash n to tell kubernetes i only want

2109
01:25:27,520 --> 01:25:31,840
the pods from this namespace right

2110
01:25:31,840 --> 01:25:33,600
see there is one pod running what

2111
01:25:33,600 --> 01:25:36,239
happens if i get this like cube ctl get

2112
01:25:36,239 --> 01:25:38,560
pods

2113
01:25:38,560 --> 01:25:40,719
no resource is found because if i don't

2114
01:25:40,719 --> 01:25:43,280
tell kubernetes the cube ctl a specific

2115
01:25:43,280 --> 01:25:44,800
namespace

2116
01:25:44,800 --> 01:25:47,040
it's going to look into the default one

2117
01:25:47,040 --> 01:25:49,040
the default one is this one here at the

2118
01:25:49,040 --> 01:25:51,360
top and it doesn't have anything there

2119
01:25:51,360 --> 01:25:53,360
that's why it's not gonna find it

2120
01:25:53,360 --> 01:25:55,280
right so you need this that's something

2121
01:25:55,280 --> 01:25:58,159
that people that are starting to work

2122
01:25:58,159 --> 01:25:59,920
with kubernetes may

2123
01:25:59,920 --> 01:26:01,920
may forget and may think oh i just

2124
01:26:01,920 --> 01:26:04,000
created this where is it right if you

2125
01:26:04,000 --> 01:26:06,000
don't specify anything

2126
01:26:06,000 --> 01:26:07,679
then it's all the objects that you

2127
01:26:07,679 --> 01:26:09,040
create are going to create on the

2128
01:26:09,040 --> 01:26:11,360
default namespace but as you can see

2129
01:26:11,360 --> 01:26:14,560
from the uh object that we use here i

2130
01:26:14,560 --> 01:26:17,520
created this new namespace and i told to

2131
01:26:17,520 --> 01:26:20,480
create all these objects on the web app

2132
01:26:20,480 --> 01:26:22,800
namespace right except this one which is

2133
01:26:22,800 --> 01:26:26,320
on the cube system okay

2134
01:26:26,320 --> 01:26:27,520
see

2135
01:26:27,520 --> 01:26:29,750
okay let's see another question

2136
01:26:29,750 --> 01:26:30,880
[Music]

2137
01:26:30,880 --> 01:26:34,239
where are these api objects going to do

2138
01:26:34,239 --> 01:26:36,480
these get sent to etcd

2139
01:26:36,480 --> 01:26:38,239
and then some pooling services check for

2140
01:26:38,239 --> 01:26:42,239
new additions resources using apis yes

2141
01:26:42,239 --> 01:26:45,600
yes so the api objects they go to at cd

2142
01:26:45,600 --> 01:26:48,000
as a like

2143
01:26:48,000 --> 01:26:50,400
a key value store right so there is this

2144
01:26:50,400 --> 01:26:51,920
stored on that cd

2145
01:26:51,920 --> 01:26:52,800
and

2146
01:26:52,800 --> 01:26:54,239
the controllers

2147
01:26:54,239 --> 01:26:56,239
the the cube controller manager with

2148
01:26:56,239 --> 01:26:59,199
their controllers they check at cd and

2149
01:26:59,199 --> 01:27:01,280
see what change do i need to create this

2150
01:27:01,280 --> 01:27:03,360
object oh oh yeah this i need to create

2151
01:27:03,360 --> 01:27:05,760
a service or this load balancer or this

2152
01:27:05,760 --> 01:27:09,360
pod and then it talks to other objects

2153
01:27:09,360 --> 01:27:11,920
like the if it's a pod talks to the cube

2154
01:27:11,920 --> 01:27:14,480
scheduler and tells okay create the spot

2155
01:27:14,480 --> 01:27:16,480
on my cluster i don't have that on my

2156
01:27:16,480 --> 01:27:18,560
cluster right now and i need etsy is

2157
01:27:18,560 --> 01:27:21,120
telling me lcd is the source of truth

2158
01:27:21,120 --> 01:27:23,120
right sd is telling me that i need this

2159
01:27:23,120 --> 01:27:25,280
cluster these object there so create

2160
01:27:25,280 --> 01:27:27,520
that for me so some objects in

2161
01:27:27,520 --> 01:27:30,080
kubernetes are are like

2162
01:27:30,080 --> 01:27:32,560
how how can i say they they have a uh

2163
01:27:32,560 --> 01:27:35,360
physical representation right so for

2164
01:27:35,360 --> 01:27:38,239
example uh uh uh pod

2165
01:27:38,239 --> 01:27:39,280
it creates

2166
01:27:39,280 --> 01:27:42,480
it it creates itself there on on the

2167
01:27:42,480 --> 01:27:44,480
when it's created on the cluster

2168
01:27:44,480 --> 01:27:46,239
i can see it i can see that there is a

2169
01:27:46,239 --> 01:27:48,000
pod and there is like something running

2170
01:27:48,000 --> 01:27:50,480
there is a container and all that stuff

2171
01:27:50,480 --> 01:27:54,800
some other objects are just kind of

2172
01:27:54,800 --> 01:27:57,040
uh how can i say they're kind of they're

2173
01:27:57,040 --> 01:27:59,120
more abstract

2174
01:27:59,120 --> 01:28:01,280
they exist there the existing kubernetes

2175
01:28:01,280 --> 01:28:03,199
and stuff but there is no kind of

2176
01:28:03,199 --> 01:28:05,600
physical representation of that object

2177
01:28:05,600 --> 01:28:08,320
besides the configuration at cd

2178
01:28:08,320 --> 01:28:11,840
right so it's just like uh uh some stuff

2179
01:28:11,840 --> 01:28:14,960
that kubernetes do to to to

2180
01:28:14,960 --> 01:28:17,120
kind of encapsulate that object in some

2181
01:28:17,120 --> 01:28:19,199
specific configurations like such as

2182
01:28:19,199 --> 01:28:21,280
deployment stateful set

2183
01:28:21,280 --> 01:28:23,440
it's just a way for you to

2184
01:28:23,440 --> 01:28:27,520
uh to help you deploy uh containers in

2185
01:28:27,520 --> 01:28:29,120
like different with different

2186
01:28:29,120 --> 01:28:32,400
characteristics right basically that

2187
01:28:32,400 --> 01:28:33,760
so yeah i hope that answers your

2188
01:28:33,760 --> 01:28:37,760
question if not yeah let me know

2189
01:28:38,719 --> 01:28:40,080
okay

2190
01:28:40,080 --> 01:28:43,440
so now i have a web application running

2191
01:28:43,440 --> 01:28:46,480
and we expose that web application

2192
01:28:46,480 --> 01:28:50,480
to the internet v via the load balancer

2193
01:28:50,480 --> 01:28:51,440
right

2194
01:28:51,440 --> 01:28:53,280
so now

2195
01:28:53,280 --> 01:28:57,040
i can get the service

2196
01:28:57,040 --> 01:28:59,600
of my web application

2197
01:28:59,600 --> 01:29:00,800
right and you see that there is a

2198
01:29:00,800 --> 01:29:04,320
service called uh drupal dash svc

2199
01:29:04,320 --> 01:29:06,880
load balancer running here and this is

2200
01:29:06,880 --> 01:29:09,440
what we need right the external ip

2201
01:29:09,440 --> 01:29:12,080
so this is the ip of my web application

2202
01:29:12,080 --> 01:29:14,480
that should be running there so if i

2203
01:29:14,480 --> 01:29:17,440
click on that if i copy that url and

2204
01:29:17,440 --> 01:29:19,440
open on my browser and i'm going to show

2205
01:29:19,440 --> 01:29:21,040
you right away

2206
01:29:21,040 --> 01:29:24,560
let me share the screen again

2207
01:29:24,560 --> 01:29:25,440
to

2208
01:29:25,440 --> 01:29:28,159
change

2209
01:29:30,400 --> 01:29:35,400
change here to my other tab

2210
01:29:39,440 --> 01:29:40,639
okay

2211
01:29:40,639 --> 01:29:42,800
here

2212
01:29:42,800 --> 01:29:45,120
oops

2213
01:29:45,520 --> 01:29:47,520
yeah so you can see here that there is a

2214
01:29:47,520 --> 01:29:48,560
drupal

2215
01:29:48,560 --> 01:29:49,280
uh

2216
01:29:49,280 --> 01:29:52,400
web application set up on on this url

2217
01:29:52,400 --> 01:29:54,239
right and i need to install it i need to

2218
01:29:54,239 --> 01:29:55,840
configure and that's what we're going to

2219
01:29:55,840 --> 01:29:59,679
do right and uh um but yeah basically

2220
01:29:59,679 --> 01:30:02,480
okay it's running i'm exposing

2221
01:30:02,480 --> 01:30:05,360
this drupal container to the internet

2222
01:30:05,360 --> 01:30:08,159
with with only that cluster only that

2223
01:30:08,159 --> 01:30:10,400
container right and with the service

2224
01:30:10,400 --> 01:30:12,560
load balancer of course if you go to the

2225
01:30:12,560 --> 01:30:14,719
aws console where where the load

2226
01:30:14,719 --> 01:30:16,719
balancers are you're going to see that

2227
01:30:16,719 --> 01:30:18,400
there is a load balancer created there

2228
01:30:18,400 --> 01:30:22,080
as well i'll show that later but yeah

2229
01:30:22,080 --> 01:30:23,920
so that's what's being used my container

2230
01:30:23,920 --> 01:30:25,840
is running inside my cluster my

2231
01:30:25,840 --> 01:30:27,360
kubernetes cluster i'm using the load

2232
01:30:27,360 --> 01:30:28,960
balancer to expose that and i'm

2233
01:30:28,960 --> 01:30:32,080
accessing that through that long url so

2234
01:30:32,080 --> 01:30:34,080
don't use the same url that i'm using

2235
01:30:34,080 --> 01:30:36,239
because your url's probably different

2236
01:30:36,239 --> 01:30:38,400
than mine right depending on on where

2237
01:30:38,400 --> 01:30:40,560
you deploy your cluster

2238
01:30:40,560 --> 01:30:41,440
um

2239
01:30:41,440 --> 01:30:43,679
so let me install here i hope that

2240
01:30:43,679 --> 01:30:45,760
nobody messes with my

2241
01:30:45,760 --> 01:30:47,520
drupal

2242
01:30:47,520 --> 01:30:49,440
what i want to do here is choose the

2243
01:30:49,440 --> 01:30:52,239
language use the standard one right we

2244
01:30:52,239 --> 01:30:54,480
need to configure the web application

2245
01:30:54,480 --> 01:30:56,159
and need it running so that we can

2246
01:30:56,159 --> 01:30:58,560
exploit it

2247
01:30:58,560 --> 01:31:00,719
i'm going to use sqlite which is the

2248
01:31:00,719 --> 01:31:02,480
database here

2249
01:31:02,480 --> 01:31:04,159
so that i don't i don't need to set

2250
01:31:04,159 --> 01:31:06,400
anything

2251
01:31:06,400 --> 01:31:07,760
and

2252
01:31:07,760 --> 01:31:10,159
yeah it's going to install

2253
01:31:10,159 --> 01:31:13,280
and there's some just a few minor uh

2254
01:31:13,280 --> 01:31:14,840
configurations

2255
01:31:14,840 --> 01:31:18,080
there but basically we all need to do

2256
01:31:18,080 --> 01:31:20,639
that if we want to exploit and and play

2257
01:31:20,639 --> 01:31:22,639
along with our

2258
01:31:22,639 --> 01:31:23,160
uh

2259
01:31:23,160 --> 01:31:24,400
[Music]

2260
01:31:24,400 --> 01:31:26,960
exploiting the application right

2261
01:31:26,960 --> 01:31:30,000
so dodge coins i can set anything here

2262
01:31:30,000 --> 01:31:31,679
like this this doesn't matter this

2263
01:31:31,679 --> 01:31:33,840
configuration is just to complete the

2264
01:31:33,840 --> 01:31:37,520
the configuration of my website but

2265
01:31:37,520 --> 01:31:41,320
but yeah cloud village

2266
01:31:41,320 --> 01:31:44,000
thatcom.com i'm not gonna use any of

2267
01:31:44,000 --> 01:31:45,920
that so don't worry about remembering

2268
01:31:45,920 --> 01:31:46,639
the

2269
01:31:46,639 --> 01:31:50,159
the the username or password or or

2270
01:31:50,159 --> 01:31:51,760
or anything because we're not gonna use

2271
01:31:51,760 --> 01:31:54,080
that we all we only want to do that to

2272
01:31:54,080 --> 01:31:56,080
set up our

2273
01:31:56,080 --> 01:31:57,199
um

2274
01:31:57,199 --> 01:32:00,080
our drupal web application

2275
01:32:00,080 --> 01:32:01,760
so i'm gonna use just a strong password

2276
01:32:01,760 --> 01:32:04,480
just in case that anybody tries to

2277
01:32:04,480 --> 01:32:07,440
mess with my uh application

2278
01:32:07,440 --> 01:32:10,879
but yeah that's it

2279
01:32:11,280 --> 01:32:13,840
okay

2280
01:32:15,440 --> 01:32:17,020
so

2281
01:32:17,020 --> 01:32:18,320
[Music]

2282
01:32:18,320 --> 01:32:20,239
yeah okay it's fine

2283
01:32:20,239 --> 01:32:22,400
so yeah now i see the drupal web

2284
01:32:22,400 --> 01:32:24,639
application is running right and you can

2285
01:32:24,639 --> 01:32:26,719
see that's working i'm logged in as

2286
01:32:26,719 --> 01:32:29,920
admin i can post i can like it can do

2287
01:32:29,920 --> 01:32:32,239
anything it's it's a regular drupal web

2288
01:32:32,239 --> 01:32:35,040
application it's just using an outdated

2289
01:32:35,040 --> 01:32:37,360
version because that outdated version

2290
01:32:37,360 --> 01:32:39,920
has a vulnerability right and now we're

2291
01:32:39,920 --> 01:32:41,600
going to uh

2292
01:32:41,600 --> 01:32:43,520
now we're going to exploit that

2293
01:32:43,520 --> 01:32:45,679
vulnerability

2294
01:32:45,679 --> 01:32:46,639
okay

2295
01:32:46,639 --> 01:32:48,719
no more questions

2296
01:32:48,719 --> 01:32:51,679
so yeah let me go back now to

2297
01:32:51,679 --> 01:32:53,760
to the slides i'm going to talk a little

2298
01:32:53,760 --> 01:32:55,520
bit about how we're going to exploit it

2299
01:32:55,520 --> 01:32:57,040
and the vulnerabilities that we're going

2300
01:32:57,040 --> 01:33:00,080
to do and then we go back to this web

2301
01:33:00,080 --> 01:33:02,639
application

2302
01:33:02,639 --> 01:33:05,639
true

2303
01:33:08,320 --> 01:33:10,559
okay

2304
01:33:11,440 --> 01:33:14,239
see change the slides you're good

2305
01:33:14,239 --> 01:33:17,199
so what we're using today uh um

2306
01:33:17,199 --> 01:33:19,040
and and as we mentioned in the beginning

2307
01:33:19,040 --> 01:33:22,560
right we're using trap modeling to

2308
01:33:22,560 --> 01:33:24,639
to attack this this web to see what

2309
01:33:24,639 --> 01:33:26,480
vulnerabilities are in the application

2310
01:33:26,480 --> 01:33:28,800
and then poc right so that's one of the

2311
01:33:28,800 --> 01:33:30,639
things that i do during my daily job

2312
01:33:30,639 --> 01:33:33,360
right so analyzing new technologies

2313
01:33:33,360 --> 01:33:34,880
especially cloud and container

2314
01:33:34,880 --> 01:33:36,719
technologies um

2315
01:33:36,719 --> 01:33:39,440
check the possibilities of of

2316
01:33:39,440 --> 01:33:41,760
any kind of like a hypothetical attack

2317
01:33:41,760 --> 01:33:43,840
and create a threat model for it and

2318
01:33:43,840 --> 01:33:46,159
then try to poc it right try to create a

2319
01:33:46,159 --> 01:33:48,800
proof of concept for that as well

2320
01:33:48,800 --> 01:33:51,280
um one of the things that we like to use

2321
01:33:51,280 --> 01:33:54,000
is the miter attack framework right

2322
01:33:54,000 --> 01:33:55,600
and as i mentioned the meta tag

2323
01:33:55,600 --> 01:33:58,080
framework is is a a very well known

2324
01:33:58,080 --> 01:33:59,600
framework on

2325
01:33:59,600 --> 01:34:00,480
the

2326
01:34:00,480 --> 01:34:03,440
among the infosec community right it's

2327
01:34:03,440 --> 01:34:04,560
like a

2328
01:34:04,560 --> 01:34:07,360
knowledge base of tactics and techniques

2329
01:34:07,360 --> 01:34:10,239
based on real world scenarios right so

2330
01:34:10,239 --> 01:34:12,960
you have the the minor attack uh for

2331
01:34:12,960 --> 01:34:14,960
enterprise you have the mother attack

2332
01:34:14,960 --> 01:34:17,280
for linux for windows

2333
01:34:17,280 --> 01:34:19,600
and you have even one for cloud which is

2334
01:34:19,600 --> 01:34:22,800
now called ias infrastructure service

2335
01:34:22,800 --> 01:34:25,600
for for uh the all the cloud major cloud

2336
01:34:25,600 --> 01:34:26,719
providers

2337
01:34:26,719 --> 01:34:29,840
but we didn't have one for um for

2338
01:34:29,840 --> 01:34:32,400
containers and kubernetes until

2339
01:34:32,400 --> 01:34:34,639
this year right

2340
01:34:34,639 --> 01:34:36,719
so

2341
01:34:36,719 --> 01:34:38,159
what uh

2342
01:34:38,159 --> 01:34:42,080
what we did was uh there was a um

2343
01:34:42,080 --> 01:34:45,600
one matrix released by microsoft

2344
01:34:45,600 --> 01:34:48,880
in april last year april 2020

2345
01:34:48,880 --> 01:34:51,840
that they they kind of use the miter

2346
01:34:51,840 --> 01:34:54,400
attack framework structure of tactics

2347
01:34:54,400 --> 01:34:57,520
and techniques this this matrix approach

2348
01:34:57,520 --> 01:34:58,800
to

2349
01:34:58,800 --> 01:35:01,360
uh to create their own their own matrix

2350
01:35:01,360 --> 01:35:04,159
like based on the data that they were

2351
01:35:04,159 --> 01:35:08,719
seeing on azure on their aks clusters

2352
01:35:08,719 --> 01:35:10,639
they created okay so these are the

2353
01:35:10,639 --> 01:35:13,440
techniques that attackers are exploiting

2354
01:35:13,440 --> 01:35:16,880
in kubernetes environment right

2355
01:35:16,880 --> 01:35:19,600
and so but that's not an official

2356
01:35:19,600 --> 01:35:22,800
miter matrix right a minor project

2357
01:35:22,800 --> 01:35:24,960
so in

2358
01:35:24,960 --> 01:35:27,920
in december december last year the the

2359
01:35:27,920 --> 01:35:31,360
mitre team for uh cloud and containers

2360
01:35:31,360 --> 01:35:33,119
they released like they publish a blog

2361
01:35:33,119 --> 01:35:34,000
post

2362
01:35:34,000 --> 01:35:34,960
asking

2363
01:35:34,960 --> 01:35:38,080
uh for help for from the community

2364
01:35:38,080 --> 01:35:40,719
to collect data about real-world

2365
01:35:40,719 --> 01:35:42,880
scenarios and and what attackers were

2366
01:35:42,880 --> 01:35:45,520
doing on those environments right so

2367
01:35:45,520 --> 01:35:48,480
either uh previous attacks that happen

2368
01:35:48,480 --> 01:35:50,080
real world attacks that happens to

2369
01:35:50,080 --> 01:35:54,000
organizations such as tesla and um i

2370
01:35:54,000 --> 01:35:56,320
think there's i don't recall others now

2371
01:35:56,320 --> 01:35:59,040
but yeah there's many others eks as well

2372
01:35:59,040 --> 01:36:02,000
they used as a baseline so

2373
01:36:02,000 --> 01:36:04,159
they're they're trying to gather real

2374
01:36:04,159 --> 01:36:06,320
world data and real-world information or

2375
01:36:06,320 --> 01:36:08,400
or honeypot information from what

2376
01:36:08,400 --> 01:36:11,280
attackers were doing there so since we

2377
01:36:11,280 --> 01:36:14,480
do this uh our research on on a daily

2378
01:36:14,480 --> 01:36:17,199
basis we had a lot of data that we reach

2379
01:36:17,199 --> 01:36:19,920
out to mitre to provide them with that

2380
01:36:19,920 --> 01:36:23,520
data to help build this matrix so the

2381
01:36:23,520 --> 01:36:26,639
the work started uh basically last year

2382
01:36:26,639 --> 01:36:28,400
beginning of this year

2383
01:36:28,400 --> 01:36:30,800
and in april this year they released the

2384
01:36:30,800 --> 01:36:33,600
official minor attack for containers and

2385
01:36:33,600 --> 01:36:35,600
and i i kind of

2386
01:36:35,600 --> 01:36:37,600
add and kubernetes as well because

2387
01:36:37,600 --> 01:36:39,440
that's not that's not what how mitre

2388
01:36:39,440 --> 01:36:41,520
calls it but there are some techniques

2389
01:36:41,520 --> 01:36:43,760
here that are very specific to

2390
01:36:43,760 --> 01:36:46,960
uh kubernetes environments right or

2391
01:36:46,960 --> 01:36:49,199
orchestrated container orchestration

2392
01:36:49,199 --> 01:36:51,520
environments but yeah basically this is

2393
01:36:51,520 --> 01:36:53,199
the miter the official miter attack for

2394
01:36:53,199 --> 01:36:56,719
containers that was released in uh april

2395
01:36:56,719 --> 01:36:58,000
this year

2396
01:36:58,000 --> 01:36:59,840
so you can see that there is the the

2397
01:36:59,840 --> 01:37:01,760
common tactics there and there is those

2398
01:37:01,760 --> 01:37:03,679
those techniques there are various some

2399
01:37:03,679 --> 01:37:06,400
of those already existed on the miter

2400
01:37:06,400 --> 01:37:07,679
framework but they didn't have the

2401
01:37:07,679 --> 01:37:09,520
context of

2402
01:37:09,520 --> 01:37:12,000
container environments right so they add

2403
01:37:12,000 --> 01:37:13,600
that reference or the technique

2404
01:37:13,600 --> 01:37:16,719
specifically or that right actor

2405
01:37:16,719 --> 01:37:18,960
and and some of the techniques are brand

2406
01:37:18,960 --> 01:37:21,360
new they didn't exist before and so

2407
01:37:21,360 --> 01:37:24,080
that's that was a kind of a cool project

2408
01:37:24,080 --> 01:37:26,719
that i did that i helped build with uh

2409
01:37:26,719 --> 01:37:28,800
with meyer and there is the link there

2410
01:37:28,800 --> 01:37:31,280
with the matrix but it's all official

2411
01:37:31,280 --> 01:37:34,159
made matrix uh for the mighty attack

2412
01:37:34,159 --> 01:37:37,600
framework for uh containers is this one

2413
01:37:37,600 --> 01:37:38,560
and

2414
01:37:38,560 --> 01:37:40,080
and yeah there's different techniques

2415
01:37:40,080 --> 01:37:41,760
here um

2416
01:37:41,760 --> 01:37:44,320
different actors actively exploiting

2417
01:37:44,320 --> 01:37:45,840
those environments

2418
01:37:45,840 --> 01:37:48,159
on on on one honey pot

2419
01:37:48,159 --> 01:37:51,679
that we deployed um it took less than 24

2420
01:37:51,679 --> 01:37:53,840
hours for the attackers to compromise

2421
01:37:53,840 --> 01:37:56,800
our environment and we didn't we didn't

2422
01:37:56,800 --> 01:37:58,960
like publicize that we didn't we just

2423
01:37:58,960 --> 01:38:01,600
deployed the kubernetes environment with

2424
01:38:01,600 --> 01:38:03,760
a vulnerable web application and in less

2425
01:38:03,760 --> 01:38:07,520
than 24 hours the attackers had um

2426
01:38:07,520 --> 01:38:10,719
compromised the cluster right and even

2427
01:38:10,719 --> 01:38:13,280
broke out of the cluster and compromised

2428
01:38:13,280 --> 01:38:15,440
the cloud environment that that we set

2429
01:38:15,440 --> 01:38:16,960
up the cluster in

2430
01:38:16,960 --> 01:38:19,600
and they started deploying

2431
01:38:19,600 --> 01:38:22,719
big instances to mine cryptocurrencies

2432
01:38:22,719 --> 01:38:24,880
right that and that's usually the end

2433
01:38:24,880 --> 01:38:28,239
goal here with docker and kubernetes

2434
01:38:28,239 --> 01:38:30,880
environments when attackers compromise

2435
01:38:30,880 --> 01:38:32,239
those environments

2436
01:38:32,239 --> 01:38:35,840
oh like 90 or 95 percent of the times

2437
01:38:35,840 --> 01:38:38,239
the end goal is to

2438
01:38:38,239 --> 01:38:39,520
either

2439
01:38:39,520 --> 01:38:42,400
um compromise the the already the

2440
01:38:42,400 --> 01:38:44,480
containers that are already running or

2441
01:38:44,480 --> 01:38:48,000
deploy new containers to mine uh monero

2442
01:38:48,000 --> 01:38:49,840
cryptocurrency right that's that's

2443
01:38:49,840 --> 01:38:53,760
usually what happens most of the times

2444
01:38:53,760 --> 01:38:56,320
okay so what i did with the track

2445
01:38:56,320 --> 01:38:59,520
modeling part was even before this was

2446
01:38:59,520 --> 01:39:01,360
done this diagram here was done even

2447
01:39:01,360 --> 01:39:03,760
before the miter framework was released

2448
01:39:03,760 --> 01:39:05,520
it was done last year

2449
01:39:05,520 --> 01:39:08,159
and what i did was exactly create this

2450
01:39:08,159 --> 01:39:09,920
model diagram

2451
01:39:09,920 --> 01:39:12,639
based based on the the

2452
01:39:12,639 --> 01:39:14,960
microsoft attack made the microsoft

2453
01:39:14,960 --> 01:39:17,840
kubernetes track matrix

2454
01:39:17,840 --> 01:39:19,119
and and so

2455
01:39:19,119 --> 01:39:21,600
i created like a scenario where okay

2456
01:39:21,600 --> 01:39:23,840
which are the steps that

2457
01:39:23,840 --> 01:39:27,040
an attacker can do to compromise a web

2458
01:39:27,040 --> 01:39:29,920
application running on a vulnerable web

2459
01:39:29,920 --> 01:39:31,760
application running on a kubernetes

2460
01:39:31,760 --> 01:39:32,800
cluster

2461
01:39:32,800 --> 01:39:34,320
excuse me

2462
01:39:34,320 --> 01:39:37,520
so yeah here we have the initial access

2463
01:39:37,520 --> 01:39:40,719
right the web app running in a pod

2464
01:39:40,719 --> 01:39:43,040
so we have that already we set up that

2465
01:39:43,040 --> 01:39:46,719
already on aws right and and the web app

2466
01:39:46,719 --> 01:39:49,119
has an application vulnerability and

2467
01:39:49,119 --> 01:39:50,880
you're going to see that really soon

2468
01:39:50,880 --> 01:39:51,760
we're going to talk about the

2469
01:39:51,760 --> 01:39:54,159
vulnerability that that

2470
01:39:54,159 --> 01:39:56,719
this drupal outdated drupal application

2471
01:39:56,719 --> 01:39:58,000
has

2472
01:39:58,000 --> 01:40:00,480
and the attacker exploits this rce right

2473
01:40:00,480 --> 01:40:02,960
they exploit this this vulnerability and

2474
01:40:02,960 --> 01:40:05,119
then they get a shell inside the pod

2475
01:40:05,119 --> 01:40:07,199
inside the container right and from

2476
01:40:07,199 --> 01:40:09,280
there they can do other things right and

2477
01:40:09,280 --> 01:40:11,119
so this is the kind of the diagram that

2478
01:40:11,119 --> 01:40:15,280
i created uh um to help me

2479
01:40:15,280 --> 01:40:17,840
understand what what an attacker was

2480
01:40:17,840 --> 01:40:20,400
able to do and and that's when i did the

2481
01:40:20,400 --> 01:40:22,960
poc to validate that

2482
01:40:22,960 --> 01:40:24,639
and of course then

2483
01:40:24,639 --> 01:40:26,960
then that's where this kind of this

2484
01:40:26,960 --> 01:40:28,719
workshop came from right from this

2485
01:40:28,719 --> 01:40:30,480
diagram there as well

2486
01:40:30,480 --> 01:40:32,560
so i can i uh i don't know if you can

2487
01:40:32,560 --> 01:40:34,560
see the whole diagram if it's if it's

2488
01:40:34,560 --> 01:40:37,760
too uh too small but i can share just a

2489
01:40:37,760 --> 01:40:41,360
diagram link later with you

2490
01:40:42,560 --> 01:40:45,360
so yeah attacking kubernetes if we have

2491
01:40:45,360 --> 01:40:46,719
set up this

2492
01:40:46,719 --> 01:40:48,960
like i call the website dodge coins

2493
01:40:48,960 --> 01:40:52,400
right if you have the drupal set up now

2494
01:40:52,400 --> 01:40:55,199
you should see kind of a similar screen

2495
01:40:55,199 --> 01:40:57,520
a screen to that to that screen

2496
01:40:57,520 --> 01:40:58,719
okay

2497
01:40:58,719 --> 01:41:00,400
okay

2498
01:41:00,400 --> 01:41:02,400
so what we're going to do

2499
01:41:02,400 --> 01:41:04,639
right what are we going to do today is

2500
01:41:04,639 --> 01:41:07,520
exploit this

2501
01:41:08,480 --> 01:41:10,560
yes yes i can share the attack scenario

2502
01:41:10,560 --> 01:41:11,760
diagram

2503
01:41:11,760 --> 01:41:14,400
um i don't have the link handy right now

2504
01:41:14,400 --> 01:41:17,760
um yeah someone is asking if i have this

2505
01:41:17,760 --> 01:41:19,360
attack scenario diagram uploaded

2506
01:41:19,360 --> 01:41:22,159
anywhere sorry um but yeah i do have it

2507
01:41:22,159 --> 01:41:24,639
i just don't have the link handy

2508
01:41:24,639 --> 01:41:27,360
with like a high higher resolution

2509
01:41:27,360 --> 01:41:29,520
version but i can share that together

2510
01:41:29,520 --> 01:41:33,119
with the slides no problem

2511
01:41:33,119 --> 01:41:35,600
so so yeah the initial access here right

2512
01:41:35,600 --> 01:41:37,760
so that's when we start now attacking

2513
01:41:37,760 --> 01:41:39,600
kubernetes and i know it took i'm sorry

2514
01:41:39,600 --> 01:41:41,520
it took too long to get here but i

2515
01:41:41,520 --> 01:41:44,320
wanted to everyone uh follow along and

2516
01:41:44,320 --> 01:41:47,280
be everybody on the same page to set up

2517
01:41:47,280 --> 01:41:49,199
the environment and so that you can

2518
01:41:49,199 --> 01:41:51,600
understand the basics of kubernetes so

2519
01:41:51,600 --> 01:41:54,000
now that we can start attacking it right

2520
01:41:54,000 --> 01:41:55,600
and that's that's what's important here

2521
01:41:55,600 --> 01:41:58,239
like unless you understand the basics

2522
01:41:58,239 --> 01:42:00,400
now it's just practicing different

2523
01:42:00,400 --> 01:42:02,239
scenarios and different attacks and

2524
01:42:02,239 --> 01:42:05,119
maybe you can do that on your own later

2525
01:42:05,119 --> 01:42:06,719
um

2526
01:42:06,719 --> 01:42:07,520
so

2527
01:42:07,520 --> 01:42:10,560
two main uh entry points of a kubernetes

2528
01:42:10,560 --> 01:42:11,920
cluster right

2529
01:42:11,920 --> 01:42:14,400
one of the entry points here is a

2530
01:42:14,400 --> 01:42:16,560
vulnerable web application right and

2531
01:42:16,560 --> 01:42:17,920
we're going to see

2532
01:42:17,920 --> 01:42:19,920
why why is that

2533
01:42:19,920 --> 01:42:22,239
this vulnerable web application has an

2534
01:42:22,239 --> 01:42:25,360
rce right a remote command execution uh

2535
01:42:25,360 --> 01:42:28,080
as you can see the cve from 2018 and

2536
01:42:28,080 --> 01:42:30,400
we're going to use that exploit code on

2537
01:42:30,400 --> 01:42:32,400
that github

2538
01:42:32,400 --> 01:42:35,280
to do that to exploit that vulnerability

2539
01:42:35,280 --> 01:42:37,519
right

2540
01:42:37,760 --> 01:42:40,480
other ways that

2541
01:42:40,480 --> 01:42:43,199
kubernetes clusters got compromised

2542
01:42:43,199 --> 01:42:46,159
before was the exposed dashboard so in

2543
01:42:46,159 --> 01:42:47,679
previous versions of kubernetes there

2544
01:42:47,679 --> 01:42:50,239
was a dashboard that was created by

2545
01:42:50,239 --> 01:42:52,719
default that allowed you to kind of

2546
01:42:52,719 --> 01:42:57,320
manage your cluster in a

2547
01:42:58,560 --> 01:43:01,920
graphic user interface way right

2548
01:43:01,920 --> 01:43:05,040
uh but that got deprecated and it's not

2549
01:43:05,040 --> 01:43:07,199
uh uh it's not deployed by default

2550
01:43:07,199 --> 01:43:09,360
anymore you can still do it but it's not

2551
01:43:09,360 --> 01:43:12,080
it's not applied anymore by default and

2552
01:43:12,080 --> 01:43:13,679
that that dashboard has some

2553
01:43:13,679 --> 01:43:16,960
invulnerability some issues that's how

2554
01:43:16,960 --> 01:43:18,880
one of the

2555
01:43:18,880 --> 01:43:21,520
uh one of the the cluster attacks that

2556
01:43:21,520 --> 01:43:24,880
happened a few years ago on a tesla

2557
01:43:24,880 --> 01:43:26,480
that's how they compromise their

2558
01:43:26,480 --> 01:43:29,199
environment they expose a dashboard

2559
01:43:29,199 --> 01:43:31,600
and and so that's not the case anymore

2560
01:43:31,600 --> 01:43:34,639
and see even the reason why on the if

2561
01:43:34,639 --> 01:43:36,960
you look at back at the kubernetes trap

2562
01:43:36,960 --> 01:43:38,639
matrix by microsoft

2563
01:43:38,639 --> 01:43:40,800
they kind of deprecated that that

2564
01:43:40,800 --> 01:43:42,719
technique right because

2565
01:43:42,719 --> 01:43:44,239
since it's not deployed by default let

2566
01:43:44,239 --> 01:43:46,480
me go back you can see here as the

2567
01:43:46,480 --> 01:43:49,679
initial access exposed dashboard is kind

2568
01:43:49,679 --> 01:43:52,960
of deprecated right there is other

2569
01:43:52,960 --> 01:43:54,800
options right on the initial access

2570
01:43:54,800 --> 01:43:56,960
there is using cloud credentials

2571
01:43:56,960 --> 01:43:58,880
compromise container registries and all

2572
01:43:58,880 --> 01:44:01,440
that stuff but i'm going to focus on the

2573
01:44:01,440 --> 01:44:05,799
application vulnerability here

2574
01:44:07,360 --> 01:44:09,840
um there is also the cube api server

2575
01:44:09,840 --> 01:44:10,639
right

2576
01:44:10,639 --> 01:44:13,119
and if the cube api server is exposed

2577
01:44:13,119 --> 01:44:16,239
and it's not properly configured right

2578
01:44:16,239 --> 01:44:19,679
you can even deploy pods through the the

2579
01:44:19,679 --> 01:44:22,239
api server the api endpoints right

2580
01:44:22,239 --> 01:44:24,480
so so yeah we it's the same thing with

2581
01:44:24,480 --> 01:44:26,800
the docker daemon api right if that's

2582
01:44:26,800 --> 01:44:29,040
exposed and there is no authentication

2583
01:44:29,040 --> 01:44:30,239
there is no

2584
01:44:30,239 --> 01:44:33,440
and the person which with access to that

2585
01:44:33,440 --> 01:44:36,159
can um

2586
01:44:36,159 --> 01:44:37,360
can have

2587
01:44:37,360 --> 01:44:40,639
we can have like uh uh access can reach

2588
01:44:40,639 --> 01:44:42,239
the api endpoint

2589
01:44:42,239 --> 01:44:44,159
then then they may be able to do some

2590
01:44:44,159 --> 01:44:45,760
things or get sensitive information

2591
01:44:45,760 --> 01:44:47,199
there right

2592
01:44:47,199 --> 01:44:49,440
uh the cube api server endpoint is

2593
01:44:49,440 --> 01:44:51,679
public by default right instant managed

2594
01:44:51,679 --> 01:44:53,760
services like eks

2595
01:44:53,760 --> 01:44:55,679
um sally asks you the question here do

2596
01:44:55,679 --> 01:44:57,920
you have any issues with aws having

2597
01:44:57,920 --> 01:45:00,840
vulnerabilities in your clusters

2598
01:45:00,840 --> 01:45:02,480
um

2599
01:45:02,480 --> 01:45:05,360
with this workshop right we're not

2600
01:45:05,360 --> 01:45:07,679
we're we're just deploying a vulnerable

2601
01:45:07,679 --> 01:45:10,080
cluster and we're compromising it

2602
01:45:10,080 --> 01:45:12,560
ourselves we're not stalling any malware

2603
01:45:12,560 --> 01:45:14,639
we're not running scans

2604
01:45:14,639 --> 01:45:16,880
on on aws and

2605
01:45:16,880 --> 01:45:18,400
yeah we

2606
01:45:18,400 --> 01:45:19,119
we

2607
01:45:19,119 --> 01:45:21,280
we had some issues in the beginning but

2608
01:45:21,280 --> 01:45:23,280
but like with our honeypots but we

2609
01:45:23,280 --> 01:45:25,600
changed the way that we deployed and and

2610
01:45:25,600 --> 01:45:27,199
also the environments

2611
01:45:27,199 --> 01:45:29,280
and and yeah uh i don't think we're

2612
01:45:29,280 --> 01:45:31,840
going to have issues with that

2613
01:45:31,840 --> 01:45:33,600
this scenario today

2614
01:45:33,600 --> 01:45:36,080
so yeah but if you do please let me know

2615
01:45:36,080 --> 01:45:37,600
and we're going to shut down everything

2616
01:45:37,600 --> 01:45:40,000
later so it's not going to be up for for

2617
01:45:40,000 --> 01:45:41,920
a whole lot

2618
01:45:41,920 --> 01:45:44,000
so that you don't get your your cluster

2619
01:45:44,000 --> 01:45:47,040
compromised by like someone else right

2620
01:45:47,040 --> 01:45:49,760
we don't want that

2621
01:45:49,760 --> 01:45:51,679
okay

2622
01:45:51,679 --> 01:45:53,679
so one of the main things

2623
01:45:53,679 --> 01:45:55,360
um

2624
01:45:55,360 --> 01:45:57,199
one of the main issues that i said is

2625
01:45:57,199 --> 01:45:59,600
the api endpoint right reaching the api

2626
01:45:59,600 --> 01:46:01,920
endpoint externally uh that can be a

2627
01:46:01,920 --> 01:46:04,719
problem you can see two examples here

2628
01:46:04,719 --> 01:46:08,000
accessing um on an unmanaged cluster the

2629
01:46:08,000 --> 01:46:11,199
api server of kubernetes runs on port 64

2630
01:46:11,199 --> 01:46:16,239
for free and on uh eks it runs on on

2631
01:46:16,239 --> 01:46:19,520
port 443 right and if i have the url of

2632
01:46:19,520 --> 01:46:22,719
that api endpoint i can just do a curve

2633
01:46:22,719 --> 01:46:25,840
request to to that url and i can get

2634
01:46:25,840 --> 01:46:28,800
some information about my uh my api

2635
01:46:28,800 --> 01:46:30,400
endpoint

2636
01:46:30,400 --> 01:46:32,239
so let's let's try to do that first

2637
01:46:32,239 --> 01:46:34,639
before we go into exploiting that let's

2638
01:46:34,639 --> 01:46:38,960
try to do that first let me go to the

2639
01:46:38,960 --> 01:46:41,840
um

2640
01:46:42,000 --> 01:46:44,639
yes call so let me share my screen here

2641
01:46:44,639 --> 01:46:46,480
sorry

2642
01:46:46,480 --> 01:46:50,440
keep forgetting that

2643
01:46:55,920 --> 01:46:59,199
so yeah i'm here on my aws console and i

2644
01:46:59,199 --> 01:47:02,320
went to eks the elastic kubernetes

2645
01:47:02,320 --> 01:47:03,679
service

2646
01:47:03,679 --> 01:47:05,280
and i'm gonna check my cluster here and

2647
01:47:05,280 --> 01:47:07,040
i can see that i have a cluster running

2648
01:47:07,040 --> 01:47:09,679
and it should be at least only one if if

2649
01:47:09,679 --> 01:47:11,440
it's a brand new account or something

2650
01:47:11,440 --> 01:47:12,400
like that

2651
01:47:12,400 --> 01:47:14,719
right and that's my am i the cluster

2652
01:47:14,719 --> 01:47:18,480
that we created for this workshop

2653
01:47:18,480 --> 01:47:19,440
um

2654
01:47:19,440 --> 01:47:22,400
so this is kind of the console of your

2655
01:47:22,400 --> 01:47:24,560
kind of your control plane right oh it's

2656
01:47:24,560 --> 01:47:26,320
telling me that i'm using an outdated

2657
01:47:26,320 --> 01:47:29,360
version there's a new version available

2658
01:47:29,360 --> 01:47:32,000
i can see my uh

2659
01:47:32,000 --> 01:47:34,719
can i see my configuration here right

2660
01:47:34,719 --> 01:47:36,480
so this is my api

2661
01:47:36,480 --> 01:47:37,520
endpoint

2662
01:47:37,520 --> 01:47:38,880
and that's

2663
01:47:38,880 --> 01:47:41,760
usually exposed by default let's see if

2664
01:47:41,760 --> 01:47:45,040
we can if we can open a new tab

2665
01:47:45,040 --> 01:47:48,920
you can see that yeah

2666
01:47:51,199 --> 01:47:53,440
okay let me show you here we can either

2667
01:47:53,440 --> 01:47:56,960
do a curl or or um

2668
01:47:56,960 --> 01:48:01,199
or just open a new tab in the browser

2669
01:48:01,360 --> 01:48:05,360
but yeah i'm gonna show you here

2670
01:48:05,360 --> 01:48:07,440
okay

2671
01:48:07,440 --> 01:48:09,600
so yeah you can see here that i got like

2672
01:48:09,600 --> 01:48:12,800
an er right

2673
01:48:13,520 --> 01:48:16,840
let's see api

2674
01:48:16,840 --> 01:48:20,719
version or just

2675
01:48:22,560 --> 01:48:24,480
version

2676
01:48:24,480 --> 01:48:26,239
oh yeah yeah

2677
01:48:26,239 --> 01:48:28,880
so so yeah i got just accessing the url

2678
01:48:28,880 --> 01:48:31,360
there i got an error right and i got

2679
01:48:31,360 --> 01:48:33,760
like this is kind of a json error and a

2680
01:48:33,760 --> 01:48:37,440
403 telling me forbidden user system

2681
01:48:37,440 --> 01:48:41,199
anonymous cannot get path slash right

2682
01:48:41,199 --> 01:48:43,840
and and okay this is okay i don't have

2683
01:48:43,840 --> 01:48:46,159
access to that and that's fine but you

2684
01:48:46,159 --> 01:48:48,639
can see that this is api response is

2685
01:48:48,639 --> 01:48:52,239
very specific to kubernetes right

2686
01:48:52,239 --> 01:48:55,119
and and you can already tell that

2687
01:48:55,119 --> 01:48:57,600
by the by the format that there is a

2688
01:48:57,600 --> 01:49:00,800
kubernetes cluster running here right

2689
01:49:00,800 --> 01:49:03,600
and if i go to slash version which is

2690
01:49:03,600 --> 01:49:06,639
usually open to anyone by default

2691
01:49:06,639 --> 01:49:07,760
i can see

2692
01:49:07,760 --> 01:49:10,000
the kubernetes version that's running i

2693
01:49:10,000 --> 01:49:11,920
can see

2694
01:49:11,920 --> 01:49:14,719
right the go version of my uh of my

2695
01:49:14,719 --> 01:49:16,880
kubernetes and the platform and all that

2696
01:49:16,880 --> 01:49:20,000
stuff so this is kind of a

2697
01:49:20,000 --> 01:49:24,159
uh information leak right um that it's

2698
01:49:24,159 --> 01:49:27,199
exposed by default and

2699
01:49:27,199 --> 01:49:29,760
in many eks clusters if you deploy the

2700
01:49:29,760 --> 01:49:31,760
cluster like we did by default with the

2701
01:49:31,760 --> 01:49:34,239
default settings it's going to expose

2702
01:49:34,239 --> 01:49:36,480
once someone knows this endpoint of

2703
01:49:36,480 --> 01:49:38,480
course it's a long url

2704
01:49:38,480 --> 01:49:40,239
but you can see that this is running on

2705
01:49:40,239 --> 01:49:43,199
eks right and basically what changes is

2706
01:49:43,199 --> 01:49:44,560
is this

2707
01:49:44,560 --> 01:49:47,199
this kind of uh sequence this string

2708
01:49:47,199 --> 01:49:48,400
here right

2709
01:49:48,400 --> 01:49:50,800
and so people can try to attackers can

2710
01:49:50,800 --> 01:49:51,679
try to

2711
01:49:51,679 --> 01:49:54,719
scan the web and scan for uh

2712
01:49:54,719 --> 01:49:57,119
for any kind of open clusters that may

2713
01:49:57,119 --> 01:50:00,159
be running a vulnerable version or or

2714
01:50:00,159 --> 01:50:03,119
are like exposed by default right so

2715
01:50:03,119 --> 01:50:05,440
they want to look for that so yeah be

2716
01:50:05,440 --> 01:50:07,280
careful about that

2717
01:50:07,280 --> 01:50:09,360
uh

2718
01:50:09,360 --> 01:50:10,960
let's see

2719
01:50:10,960 --> 01:50:13,440
what else can we do here

2720
01:50:13,440 --> 01:50:15,760
let's go back to the

2721
01:50:15,760 --> 01:50:18,080
let me go back to the

2722
01:50:18,080 --> 01:50:20,560
cloud9 instance now

2723
01:50:20,560 --> 01:50:22,080
we're going to

2724
01:50:22,080 --> 01:50:23,440
download

2725
01:50:23,440 --> 01:50:25,839
the

2726
01:50:26,239 --> 01:50:27,599
download the

2727
01:50:27,599 --> 01:50:32,080
the exploit that we're going to use and

2728
01:50:32,080 --> 01:50:33,440
and

2729
01:50:33,440 --> 01:50:36,080
and use it right basically that

2730
01:50:36,080 --> 01:50:39,840
so let me grab that again

2731
01:50:41,280 --> 01:50:44,559
uh one second

2732
01:50:51,119 --> 01:50:54,560
okay so this is the url

2733
01:50:54,560 --> 01:50:56,320
of the exploit

2734
01:50:56,320 --> 01:50:59,920
let me share here with everyone

2735
01:50:59,920 --> 01:51:02,239
uh let me share the screen to you

2736
01:51:02,239 --> 01:51:05,239
sorry

2737
01:51:08,960 --> 01:51:11,199
okay

2738
01:51:11,199 --> 01:51:12,639
so yeah this is the github of the

2739
01:51:12,639 --> 01:51:15,599
exploit uh for the cve

2740
01:51:15,599 --> 01:51:17,679
right it affects uh

2741
01:51:17,679 --> 01:51:20,400
drupal 8.5 so

2742
01:51:20,400 --> 01:51:23,280
8.50 that's the one that we're using

2743
01:51:23,280 --> 01:51:25,760
um just a couple things here um before

2744
01:51:25,760 --> 01:51:28,000
you just kind of

2745
01:51:28,000 --> 01:51:29,040
uh

2746
01:51:29,040 --> 01:51:32,320
clone this right if you did clone

2747
01:51:32,320 --> 01:51:35,920
and and download this to your uh cloud9

2748
01:51:35,920 --> 01:51:38,639
you need to have ruby running installed

2749
01:51:38,639 --> 01:51:41,360
it should have that on your cloud nine

2750
01:51:41,360 --> 01:51:43,679
uh but it might require it might require

2751
01:51:43,679 --> 01:51:45,840
some like dependencies

2752
01:51:45,840 --> 01:51:48,239
which is a gem and we're i'm going to do

2753
01:51:48,239 --> 01:51:50,159
that with you together if if that

2754
01:51:50,159 --> 01:51:52,639
happens we just install the dependence

2755
01:51:52,639 --> 01:51:55,280
and we can run right so all we need

2756
01:51:55,280 --> 01:51:58,800
right now is the the

2757
01:51:58,800 --> 01:52:00,159
um

2758
01:52:00,159 --> 01:52:02,800
the load balancer url

2759
01:52:02,800 --> 01:52:04,719
uh from where your application is

2760
01:52:04,719 --> 01:52:07,520
running so let's go back there

2761
01:52:07,520 --> 01:52:11,360
let me go to the cloud9

2762
01:52:11,760 --> 01:52:15,199
sorry for the switching screens

2763
01:52:15,199 --> 01:52:18,800
and that's that's safer

2764
01:52:18,800 --> 01:52:21,040
okay

2765
01:52:21,520 --> 01:52:23,520
so yeah i'm going to need i'm going to

2766
01:52:23,520 --> 01:52:26,159
need that url right so just save that

2767
01:52:26,159 --> 01:52:29,360
for later uh save it like on notepad or

2768
01:52:29,360 --> 01:52:30,960
something because you're going to need

2769
01:52:30,960 --> 01:52:34,000
that for exploiting the cluster right

2770
01:52:34,000 --> 01:52:36,000
and you can you could do that from

2771
01:52:36,000 --> 01:52:38,639
any other uh uh

2772
01:52:38,639 --> 01:52:41,119
machine i'm just going to do the

2773
01:52:41,119 --> 01:52:43,760
uh through the cloud9 because it has

2774
01:52:43,760 --> 01:52:45,360
rubbing installed already and so it's

2775
01:52:45,360 --> 01:52:48,560
going to be easier for me to do that

2776
01:52:48,560 --> 01:52:50,080
so

2777
01:52:50,080 --> 01:52:51,199
let's see

2778
01:52:51,199 --> 01:52:54,560
i'm going to add that command xl to the

2779
01:52:54,560 --> 01:52:57,960
google doc

2780
01:52:58,800 --> 01:53:02,239
and that and

2781
01:53:03,119 --> 01:53:04,560
each clone

2782
01:53:04,560 --> 01:53:06,480
let me just

2783
01:53:06,480 --> 01:53:09,959
get out of this

2784
01:53:12,800 --> 01:53:15,119
okay

2785
01:53:17,199 --> 01:53:19,840
so i downloaded the the

2786
01:53:19,840 --> 01:53:22,400
exploit which is which is written in

2787
01:53:22,400 --> 01:53:25,679
rugby from github and now i can see that

2788
01:53:25,679 --> 01:53:28,480
here right

2789
01:53:28,560 --> 01:53:30,880
if i take a look at the the description

2790
01:53:30,880 --> 01:53:33,599
there basically i just need to run the

2791
01:53:33,599 --> 01:53:36,239
uh exploit and set up a target right a

2792
01:53:36,239 --> 01:53:39,040
url of the vulnerable drupal application

2793
01:53:39,040 --> 01:53:41,040
right and that's the url of the load

2794
01:53:41,040 --> 01:53:44,080
balancer that we have already right

2795
01:53:44,080 --> 01:53:46,480
so let's try to run that and see if that

2796
01:53:46,480 --> 01:53:48,719
works if it doesn't then we install the

2797
01:53:48,719 --> 01:53:53,520
dependency on uh on on robbie and should

2798
01:53:53,520 --> 01:53:54,480
work

2799
01:53:54,480 --> 01:53:57,440
uh as intended

2800
01:53:57,440 --> 01:53:58,560
so

2801
01:53:58,560 --> 01:54:00,320
yeah

2802
01:54:00,320 --> 01:54:04,080
basically drupal got on the rb

2803
01:54:04,080 --> 01:54:04,880
and

2804
01:54:04,880 --> 01:54:07,520
the url of my

2805
01:54:07,520 --> 01:54:12,320
load balancer and let's hope that works

2806
01:54:15,760 --> 01:54:17,760
yeah it's missing

2807
01:54:17,760 --> 01:54:19,679
yeah

2808
01:54:19,679 --> 01:54:21,599
in high line see it's missing a

2809
01:54:21,599 --> 01:54:23,920
dependence here cannot load file

2810
01:54:23,920 --> 01:54:25,440
highlighting part

2811
01:54:25,440 --> 01:54:29,598
i think it's sudo jam install

2812
01:54:29,920 --> 01:54:32,400
timeline

2813
01:54:33,599 --> 01:54:35,520
yeah so another command let me add that

2814
01:54:35,520 --> 01:54:38,880
to the google docs

2815
01:54:40,000 --> 01:54:43,360
i had that already there

2816
01:54:43,679 --> 01:54:44,880
okay

2817
01:54:44,880 --> 01:54:47,040
so it should work now that's

2818
01:54:47,040 --> 01:54:49,119
fingers let me just

2819
01:54:49,119 --> 01:54:50,960
clear this

2820
01:54:50,960 --> 01:54:53,920
fingers crossed

2821
01:54:53,920 --> 01:54:54,880
oops

2822
01:54:54,880 --> 01:54:57,679
not yet

2823
01:54:57,679 --> 01:55:00,880
why did it work maybe

2824
01:55:01,840 --> 01:55:04,400
let me open the terminal again just in

2825
01:55:04,400 --> 01:55:07,400
case

2826
01:55:21,040 --> 01:55:24,560
let's try one more time

2827
01:55:24,560 --> 01:55:26,639
see if that works if it doesn't i'll do

2828
01:55:26,639 --> 01:55:30,880
from my own machine no problem

2829
01:55:31,360 --> 01:55:32,960
hmm

2830
01:55:32,960 --> 01:55:36,400
mine sounds good

2831
01:55:38,000 --> 01:55:41,199
i'm getting installed okay

2832
01:55:41,199 --> 01:55:43,199
and

2833
01:55:43,199 --> 01:55:46,639
do not work oh maybe i need okay

2834
01:55:46,639 --> 01:55:48,000
i need the

2835
01:55:48,000 --> 01:55:50,000
the path probably

2836
01:55:50,000 --> 01:55:52,480
yeah uh

2837
01:55:52,480 --> 01:55:54,639
let's try

2838
01:55:54,639 --> 01:55:56,239
let me show you from my machine and then

2839
01:55:56,239 --> 01:55:58,840
i'll figure out how to solve that for

2840
01:55:58,840 --> 01:56:00,480
everyone

2841
01:56:00,480 --> 01:56:01,440
okay

2842
01:56:01,440 --> 01:56:02,719
let me

2843
01:56:02,719 --> 01:56:05,840
open a terminal here

2844
01:56:05,840 --> 01:56:07,280
and i'll share my screen to wait a

2845
01:56:07,280 --> 01:56:10,280
second

2846
01:56:24,080 --> 01:56:26,840
let's do the

2847
01:56:26,840 --> 01:56:29,440
rv yeah that works let me share my

2848
01:56:29,440 --> 01:56:31,360
screen better

2849
01:56:31,360 --> 01:56:34,239
sorry about that

2850
01:56:34,400 --> 01:56:37,760
this is the problem with live

2851
01:56:37,760 --> 01:56:40,880
workshops live demos

2852
01:56:40,880 --> 01:56:44,080
i'm gonna share my terminal okay

2853
01:56:44,080 --> 01:56:46,560
so yeah i

2854
01:56:46,560 --> 01:56:48,880
i went to the drupalgetom folder where

2855
01:56:48,880 --> 01:56:51,280
where the exploit is right

2856
01:56:51,280 --> 01:56:53,440
and because i have the ruby and the

2857
01:56:53,440 --> 01:56:55,599
dependencies already installed that

2858
01:56:55,599 --> 01:56:58,320
worked already here and basically i did

2859
01:56:58,320 --> 01:57:00,320
drupal get on the rb

2860
01:57:00,320 --> 01:57:01,679
and uh

2861
01:57:01,679 --> 01:57:04,320
with the url of my load balancer right

2862
01:57:04,320 --> 01:57:07,119
where my application is running right so

2863
01:57:07,119 --> 01:57:09,360
i think there is some issues with the

2864
01:57:09,360 --> 01:57:12,560
with the path of robbie um

2865
01:57:12,560 --> 01:57:14,159
and on the

2866
01:57:14,159 --> 01:57:17,040
cloud9 and we can we can figure out that

2867
01:57:17,040 --> 01:57:18,880
soon so let me show you what's what's

2868
01:57:18,880 --> 01:57:21,040
going on here

2869
01:57:21,040 --> 01:57:23,119
so the exploit is running right is

2870
01:57:23,119 --> 01:57:25,360
looking for for the drupal stuff it's

2871
01:57:25,360 --> 01:57:27,520
it's collecting so you can can get

2872
01:57:27,520 --> 01:57:30,560
information about my uh

2873
01:57:30,560 --> 01:57:32,639
my web application where it's running

2874
01:57:32,639 --> 01:57:34,639
and all the stuff and and i get a shell

2875
01:57:34,639 --> 01:57:36,840
here right

2876
01:57:36,840 --> 01:57:38,480
so

2877
01:57:38,480 --> 01:57:41,440
let's see um

2878
01:57:41,440 --> 01:57:43,760
with mine

2879
01:57:43,760 --> 01:57:47,119
see it's running as the user wrapped up

2880
01:57:47,119 --> 01:57:48,000
data

2881
01:57:48,000 --> 01:57:52,639
from the web server or where these um

2882
01:57:52,639 --> 01:57:54,960
this container is running right

2883
01:57:54,960 --> 01:57:56,239
um

2884
01:57:56,239 --> 01:57:58,638
let's see

2885
01:58:00,320 --> 01:58:02,559
see

2886
01:58:04,639 --> 01:58:06,800
i can see from the files already that

2887
01:58:06,800 --> 01:58:07,760
right

2888
01:58:07,760 --> 01:58:10,239
if i've if you've known drupal before

2889
01:58:10,239 --> 01:58:12,400
and know the file structure of drupal

2890
01:58:12,400 --> 01:58:14,880
you can see that there is a drupal uh

2891
01:58:14,880 --> 01:58:16,480
application running

2892
01:58:16,480 --> 01:58:17,199
and

2893
01:58:17,199 --> 01:58:20,320
yeah so this is already i'm inside where

2894
01:58:20,320 --> 01:58:21,920
are where i am right now with the

2895
01:58:21,920 --> 01:58:24,320
exploitation of of the the web

2896
01:58:24,320 --> 01:58:27,119
application um in a shell

2897
01:58:27,119 --> 01:58:30,480
inside the pod that's running the drupal

2898
01:58:30,480 --> 01:58:32,719
container right

2899
01:58:32,719 --> 01:58:36,159
um so what else can we do here right

2900
01:58:36,159 --> 01:58:39,040
what else can we uh um

2901
01:58:39,040 --> 01:58:40,960
can we see

2902
01:58:40,960 --> 01:58:44,320
how do i know that this is a a

2903
01:58:44,320 --> 01:58:46,159
a cluster like this is running on a

2904
01:58:46,159 --> 01:58:48,560
cluster right

2905
01:58:48,560 --> 01:58:50,560
so some things that

2906
01:58:50,560 --> 01:58:53,040
can help you understand

2907
01:58:53,040 --> 01:58:55,599
um where is it running uh um the

2908
01:58:55,599 --> 01:58:57,280
environment right it's checking the

2909
01:58:57,280 --> 01:58:59,280
environment variables right

2910
01:58:59,280 --> 01:59:01,920
if i do and i saw will see a lot of

2911
01:59:01,920 --> 01:59:04,560
environment variables right i don't want

2912
01:59:04,560 --> 01:59:05,760
all of them

2913
01:59:05,760 --> 01:59:06,639
so

2914
01:59:06,639 --> 01:59:08,159
let me do

2915
01:59:08,159 --> 01:59:09,679
f

2916
01:59:09,679 --> 01:59:12,000
grab

2917
01:59:12,000 --> 01:59:13,679
h i

2918
01:59:13,679 --> 01:59:16,679
cube

2919
01:59:16,880 --> 01:59:18,639
let me do that

2920
01:59:18,639 --> 01:59:20,719
oh now i see there is a lot of

2921
01:59:20,719 --> 01:59:22,719
kubernetes environment variables and you

2922
01:59:22,719 --> 01:59:25,199
can see them all together here and i can

2923
01:59:25,199 --> 01:59:26,480
see

2924
01:59:26,480 --> 01:59:30,639
um the the ip address of my uh

2925
01:59:30,639 --> 01:59:34,080
my api endpoint my api server right you

2926
01:59:34,080 --> 01:59:36,400
can see the port that's running right

2927
01:59:36,400 --> 01:59:38,159
and so there's a lot of information here

2928
01:59:38,159 --> 01:59:40,480
so these already it's telling me

2929
01:59:40,480 --> 01:59:42,480
that this this is running on a

2930
01:59:42,480 --> 01:59:45,199
kubernetes cluster right

2931
01:59:45,199 --> 01:59:48,480
let me just add that

2932
01:59:56,719 --> 01:59:59,119
and just add that to the sorry to the

2933
01:59:59,119 --> 02:00:01,199
google docs

2934
02:00:01,199 --> 02:00:03,519
um

2935
02:00:05,119 --> 02:00:07,440
and

2936
02:00:07,679 --> 02:00:08,719
iq

2937
02:00:08,719 --> 02:00:10,480
uh what other

2938
02:00:10,480 --> 02:00:12,400
what other things that i can do here

2939
02:00:12,400 --> 02:00:14,480
right i'm inside the kubernetes spot

2940
02:00:14,480 --> 02:00:16,560
what can i do what else can i do right

2941
02:00:16,560 --> 02:00:18,400
it's not just like it's it's running

2942
02:00:18,400 --> 02:00:20,320
inside a container right

2943
02:00:20,320 --> 02:00:21,679
and and

2944
02:00:21,679 --> 02:00:24,560
um but what else what information can i

2945
02:00:24,560 --> 02:00:25,760
have

2946
02:00:25,760 --> 02:00:27,920
another thing is

2947
02:00:27,920 --> 02:00:28,800
that

2948
02:00:28,800 --> 02:00:30,960
kubernetes stores

2949
02:00:30,960 --> 02:00:32,400
their

2950
02:00:32,400 --> 02:00:35,040
service account tokens on each on every

2951
02:00:35,040 --> 02:00:36,000
pod

2952
02:00:36,000 --> 02:00:38,880
and that account token is used for the

2953
02:00:38,880 --> 02:00:41,599
pod to talk to talk back to the api

2954
02:00:41,599 --> 02:00:43,920
server right and so

2955
02:00:43,920 --> 02:00:46,560
if i go to any they are all on the

2956
02:00:46,560 --> 02:00:49,040
always on the same location on the same

2957
02:00:49,040 --> 02:00:50,960
uh directory

2958
02:00:50,960 --> 02:00:55,000
so if i go here to

2959
02:00:57,170 --> 02:00:58,400
[Music]

2960
02:00:58,400 --> 02:01:00,000
run

2961
02:01:00,000 --> 02:01:02,639
secrets

2962
02:01:02,800 --> 02:01:04,320
i think i need to increase the font a

2963
02:01:04,320 --> 02:01:07,639
little bit

2964
02:01:08,000 --> 02:01:10,199
secrets

2965
02:01:10,199 --> 02:01:13,360
kubernetes.i yo

2966
02:01:14,719 --> 02:01:17,520
service account

2967
02:01:20,719 --> 02:01:22,400
see if it's going to show me i don't

2968
02:01:22,400 --> 02:01:26,159
know if it's because of my shell no

2969
02:01:26,159 --> 02:01:26,430
see

2970
02:01:26,430 --> 02:01:29,469
[Music]

2971
02:01:30,639 --> 02:01:32,400
yeah my channel is not great i should

2972
02:01:32,400 --> 02:01:35,040
probably reply a new show okay

2973
02:01:35,040 --> 02:01:37,760
yeah now i can see it here

2974
02:01:37,760 --> 02:01:40,400
i can see there's free files here right

2975
02:01:40,400 --> 02:01:42,000
the certificate

2976
02:01:42,000 --> 02:01:44,719
the namespace which is basically where

2977
02:01:44,719 --> 02:01:46,320
where the the

2978
02:01:46,320 --> 02:01:48,480
vulnerable web applications running and

2979
02:01:48,480 --> 02:01:51,119
the token right and these can be used

2980
02:01:51,119 --> 02:01:54,480
for me to talk to the api server

2981
02:01:54,480 --> 02:01:56,320
there is another tool that can be used

2982
02:01:56,320 --> 02:01:58,400
as well

2983
02:01:58,400 --> 02:02:02,320
which is also it helps

2984
02:02:03,040 --> 02:02:05,360
getting information about the

2985
02:02:05,360 --> 02:02:08,560
the containerized environment

2986
02:02:08,560 --> 02:02:13,280
and this tool is called in my container

2987
02:02:14,800 --> 02:02:18,760
we post this

2988
02:02:19,360 --> 02:02:23,280
going to post that to the google docs

2989
02:02:30,560 --> 02:02:33,560
secrets

2990
02:02:43,840 --> 02:02:44,800
and

2991
02:02:44,800 --> 02:02:47,360
step nine we're going to

2992
02:02:47,360 --> 02:02:51,199
look at the mi container

2993
02:02:51,199 --> 02:02:53,920
so what we're going to do is use

2994
02:02:53,920 --> 02:02:55,840
download this tool

2995
02:02:55,840 --> 02:02:58,239
to the

2996
02:02:58,480 --> 02:03:01,440
um to the file that i'm running

2997
02:03:01,440 --> 02:03:04,000
and execute it right

2998
02:03:04,000 --> 02:03:05,199
so let me

2999
02:03:05,199 --> 02:03:08,159
go back here

3000
02:03:09,520 --> 02:03:12,840
one second

3001
02:03:14,800 --> 02:03:15,840
uh

3002
02:03:15,840 --> 02:03:18,400
where is it

3003
02:03:23,760 --> 02:03:24,800
okay

3004
02:03:24,800 --> 02:03:26,560
um

3005
02:03:26,560 --> 02:03:29,679
yes let me share that

3006
02:03:29,679 --> 02:03:30,719
so

3007
02:03:30,719 --> 02:03:32,960
let's see if that's going to work i have

3008
02:03:32,960 --> 02:03:36,480
the command somewhere here

3009
02:03:38,719 --> 02:03:40,239
yes uh

3010
02:03:40,239 --> 02:03:43,718
yeah here

3011
02:03:46,239 --> 02:03:48,320
basically

3012
02:03:48,320 --> 02:03:51,440
actually i want this one

3013
02:03:51,440 --> 02:03:52,560
um

3014
02:03:52,560 --> 02:03:54,639
yes i posted that to the google docs so

3015
02:03:54,639 --> 02:03:56,480
that everyone can follow

3016
02:03:56,480 --> 02:03:59,840
i'm going to try to do that through my

3017
02:03:59,840 --> 02:04:02,239
shell

3018
02:04:03,360 --> 02:04:06,400
it worked so basically i went to the

3019
02:04:06,400 --> 02:04:09,520
folder i used curl to download the

3020
02:04:09,520 --> 02:04:12,159
binary of my container from the github

3021
02:04:12,159 --> 02:04:13,119
right

3022
02:04:13,119 --> 02:04:17,040
and yeah change it uh

3023
02:04:17,360 --> 02:04:20,320
permissions there and execute it right

3024
02:04:20,320 --> 02:04:22,239
so you can see this is the output this

3025
02:04:22,239 --> 02:04:25,040
is the output of the mi container tool

3026
02:04:25,040 --> 02:04:27,280
and it shows that the container runtime

3027
02:04:27,280 --> 02:04:28,400
is cube

3028
02:04:28,400 --> 02:04:32,239
it shows it has namespaces pid namespace

3029
02:04:32,239 --> 02:04:35,119
through username space false it shows if

3030
02:04:35,119 --> 02:04:36,800
there is some

3031
02:04:36,800 --> 02:04:39,599
if there are any protections your um

3032
02:04:39,599 --> 02:04:41,679
linux security module is activated like

3033
02:04:41,679 --> 02:04:44,480
app armor or uh

3034
02:04:44,480 --> 02:04:47,360
sc linux or saka right so you can see

3035
02:04:47,360 --> 02:04:50,320
that the app armor is unconfined there

3036
02:04:50,320 --> 02:04:52,239
is some capabilities that you can see

3037
02:04:52,239 --> 02:04:53,520
here as well

3038
02:04:53,520 --> 02:04:56,719
and also syscalls that are blocked so i

3039
02:04:56,719 --> 02:04:59,360
know that as as well

3040
02:04:59,360 --> 02:05:01,760
um so this gives me a lot of information

3041
02:05:01,760 --> 02:05:04,400
already right so um

3042
02:05:04,400 --> 02:05:07,040
it's it's good for an attacker to

3043
02:05:07,040 --> 02:05:09,520
kind of do like a recon

3044
02:05:09,520 --> 02:05:12,639
of the internal environment right

3045
02:05:12,639 --> 02:05:15,679
i can even see if i can curl

3046
02:05:15,679 --> 02:05:20,280
i think i can even curl from here

3047
02:05:20,400 --> 02:05:24,560
yeah see the same thing that i uh

3048
02:05:24,560 --> 02:05:27,040
nopes not gonna work um so the same

3049
02:05:27,040 --> 02:05:30,400
thing that i did on accessing the tab

3050
02:05:30,400 --> 02:05:33,040
um the url i'm doing that from inside

3051
02:05:33,040 --> 02:05:35,679
the pod and since those are environment

3052
02:05:35,679 --> 02:05:38,000
variables it's going through it's

3053
02:05:38,000 --> 02:05:40,079
getting those and getting the kubernetes

3054
02:05:40,079 --> 02:05:42,400
the cluster information right

3055
02:05:42,400 --> 02:05:44,560
so that's interesting another thing that

3056
02:05:44,560 --> 02:05:47,040
i can do is

3057
02:05:47,040 --> 02:05:50,480
you probably heard about the

3058
02:05:50,480 --> 02:05:54,079
api metadata right the instance metadata

3059
02:05:54,079 --> 02:05:55,840
from uh

3060
02:05:55,840 --> 02:05:56,960
from

3061
02:05:56,960 --> 02:05:59,520
cloud providers right they all have one

3062
02:05:59,520 --> 02:06:03,040
aws has one google has one and azure as

3063
02:06:03,040 --> 02:06:04,000
well

3064
02:06:04,000 --> 02:06:06,960
so from a compromised pod if that's

3065
02:06:06,960 --> 02:06:10,000
enabled you can reach the api metadata

3066
02:06:10,000 --> 02:06:10,960
as well

3067
02:06:10,960 --> 02:06:14,320
and i'm not gonna show my

3068
02:06:14,320 --> 02:06:16,880
i'm not gonna show my api keys but i can

3069
02:06:16,880 --> 02:06:21,199
show you some stuff that works let's see

3070
02:06:22,560 --> 02:06:25,199
where is it

3071
02:06:28,079 --> 02:06:28,840
one

3072
02:06:28,840 --> 02:06:31,840
second and

3073
02:06:34,639 --> 02:06:37,280
yeah let me get okay let me grab that

3074
02:06:37,280 --> 02:06:39,920
first let

3075
02:06:42,560 --> 02:06:44,400
and find my

3076
02:06:44,400 --> 02:06:48,719
my cheat sheet here sorry about that

3077
02:06:50,480 --> 02:06:54,360
where is it okay

3078
02:06:59,599 --> 02:07:02,159
all right okay i'm not finding it so

3079
02:07:02,159 --> 02:07:04,960
yeah uh i'll show the the api metadata

3080
02:07:04,960 --> 02:07:08,000
soon don't worry let me just

3081
02:07:08,000 --> 02:07:10,079
another thing that you can do is

3082
02:07:10,079 --> 02:07:12,000
you can from the pod that you're

3083
02:07:12,000 --> 02:07:15,360
compromised right you can talk to the

3084
02:07:15,360 --> 02:07:17,119
api server too

3085
02:07:17,119 --> 02:07:20,000
and as i said here like i i just did the

3086
02:07:20,000 --> 02:07:22,880
curve to the api server but if i do it

3087
02:07:22,880 --> 02:07:24,320
like

3088
02:07:24,320 --> 02:07:27,840
just slash api

3089
02:07:27,920 --> 02:07:30,480
you can see that i got 403

3090
02:07:30,480 --> 02:07:32,880
uh error as well right so i got

3091
02:07:32,880 --> 02:07:34,960
forbidden because i'm not sending any

3092
02:07:34,960 --> 02:07:36,239
kind of

3093
02:07:36,239 --> 02:07:38,800
uh authentication on any kind of token

3094
02:07:38,800 --> 02:07:41,520
it's not working but as i showed that

3095
02:07:41,520 --> 02:07:43,199
there is some

3096
02:07:43,199 --> 02:07:45,199
credentials some service account

3097
02:07:45,199 --> 02:07:46,800
information the certificates and the

3098
02:07:46,800 --> 02:07:49,679
tokens inside the pod that i compromised

3099
02:07:49,679 --> 02:07:51,280
i can use that

3100
02:07:51,280 --> 02:07:52,239
to

3101
02:07:52,239 --> 02:07:53,040
feed

3102
02:07:53,040 --> 02:07:55,679
feed into my car request to talk to the

3103
02:07:55,679 --> 02:07:58,239
api server

3104
02:07:58,239 --> 02:08:00,638
let's see

3105
02:08:00,719 --> 02:08:03,840
let's go back there

3106
02:08:06,079 --> 02:08:08,400
so i'm going to create two environment

3107
02:08:08,400 --> 02:08:11,040
variables here let's see if they work

3108
02:08:11,040 --> 02:08:12,880
i'm going to create the token

3109
02:08:12,880 --> 02:08:15,599
environment variable that's

3110
02:08:15,599 --> 02:08:16,719
using

3111
02:08:16,719 --> 02:08:19,119
getting the token from that directory

3112
02:08:19,119 --> 02:08:21,840
and the namespace as well getting the

3113
02:08:21,840 --> 02:08:24,480
namespace from from that directory and

3114
02:08:24,480 --> 02:08:26,639
now

3115
02:08:26,639 --> 02:08:30,239
now i'm going to do occur request but

3116
02:08:30,239 --> 02:08:32,639
with that per request i'm sending

3117
02:08:32,639 --> 02:08:35,880
the header authorization there token to

3118
02:08:35,880 --> 02:08:37,679
[Music]

3119
02:08:37,679 --> 02:08:38,880
to this

3120
02:08:38,880 --> 02:08:40,159
um

3121
02:08:40,159 --> 02:08:43,920
to this api right api server

3122
02:08:43,920 --> 02:08:44,800
ah

3123
02:08:44,800 --> 02:08:47,440
didn't work

3124
02:08:47,760 --> 02:08:49,440
maybe so

3125
02:08:49,440 --> 02:08:52,638
maybe it didn't work my

3126
02:08:56,400 --> 02:08:58,159
no

3127
02:08:58,159 --> 02:08:59,119
yeah

3128
02:08:59,119 --> 02:09:03,280
so i need to copy probably copy that

3129
02:09:03,280 --> 02:09:05,040
fine

3130
02:09:05,040 --> 02:09:07,760
so fine

3131
02:09:14,159 --> 02:09:15,840
yeah i'm going to show my cooking that's

3132
02:09:15,840 --> 02:09:18,400
fine we're almost i think we're

3133
02:09:18,400 --> 02:09:20,560
almost at the end now

3134
02:09:20,560 --> 02:09:22,079
you know we're gonna have time to cover

3135
02:09:22,079 --> 02:09:23,199
everything

3136
02:09:23,199 --> 02:09:25,440
but yeah let me try to run that again

3137
02:09:25,440 --> 02:09:29,280
instead of token i'm going to

3138
02:09:29,280 --> 02:09:30,960
send that here

3139
02:09:30,960 --> 02:09:34,000
right let's see

3140
02:09:34,000 --> 02:09:36,880
unauthorized

3141
02:09:37,440 --> 02:09:40,320
something changed

3142
02:09:40,960 --> 02:09:43,760
it's not working

3143
02:09:44,079 --> 02:09:45,599
okay

3144
02:09:45,599 --> 02:09:47,199
no problem there

3145
02:09:47,199 --> 02:09:48,719
it's fine

3146
02:09:48,719 --> 02:09:50,560
let's go back to

3147
02:09:50,560 --> 02:09:52,960
slides and i'll figure out what's going

3148
02:09:52,960 --> 02:09:55,119
on

3149
02:09:55,199 --> 02:09:56,719
okay

3150
02:09:56,719 --> 02:09:59,719
yeah

3151
02:10:00,239 --> 02:10:03,440
so let's see where we are right now

3152
02:10:03,440 --> 02:10:06,000
on the

3153
02:10:06,239 --> 02:10:08,879
slides

3154
02:10:12,480 --> 02:10:13,360
okay

3155
02:10:13,360 --> 02:10:14,719
okay

3156
02:10:14,719 --> 02:10:15,760
so

3157
02:10:15,760 --> 02:10:19,280
we we've done the reconnaissance we

3158
02:10:19,280 --> 02:10:22,800
hope this light's not showing yet

3159
02:10:22,800 --> 02:10:26,599
someone adds lines

3160
02:10:30,719 --> 02:10:32,719
can you see these lines on my screen on

3161
02:10:32,719 --> 02:10:34,320
the screen

3162
02:10:34,320 --> 02:10:36,400
okay thank you

3163
02:10:36,400 --> 02:10:38,159
so yeah we did we did some internal

3164
02:10:38,159 --> 02:10:39,920
reconnaissance we inspected the

3165
02:10:39,920 --> 02:10:41,840
kubernetes environment we inspected the

3166
02:10:41,840 --> 02:10:44,079
environment variables right and and the

3167
02:10:44,079 --> 02:10:47,119
service account token we even used a

3168
02:10:47,119 --> 02:10:50,159
tool from outside right externally on

3169
02:10:50,159 --> 02:10:54,879
github downloaded that tool and executed

3170
02:10:55,920 --> 02:10:58,239
yes yes probably yeah there is some

3171
02:10:58,239 --> 02:10:59,920
probably some issues i'll check it out

3172
02:10:59,920 --> 02:11:01,599
soon i just don't want to

3173
02:11:01,599 --> 02:11:03,760
get stuck because we're almost

3174
02:11:03,760 --> 02:11:06,320
almost out of time and i want to

3175
02:11:06,320 --> 02:11:07,920
complete that but i'll

3176
02:11:07,920 --> 02:11:09,119
i'll take a look

3177
02:11:09,119 --> 02:11:10,719
we have more time

3178
02:11:10,719 --> 02:11:11,679
um

3179
02:11:11,679 --> 02:11:14,159
yeah so we did an overview of that right

3180
02:11:14,159 --> 02:11:16,560
there is many stuff that you can do here

3181
02:11:16,560 --> 02:11:19,119
on uh on your container

3182
02:11:19,119 --> 02:11:21,679
there is also a possibility of doing

3183
02:11:21,679 --> 02:11:25,679
because the way that this uh cluster is

3184
02:11:25,679 --> 02:11:27,040
configured

3185
02:11:27,040 --> 02:11:29,040
there is also a possibility of of doing

3186
02:11:29,040 --> 02:11:30,639
even like a post

3187
02:11:30,639 --> 02:11:32,960
post exploitation or persistence on the

3188
02:11:32,960 --> 02:11:36,239
cluster via a privilege escalation right

3189
02:11:36,239 --> 02:11:40,000
so there is this technique uh posted by

3190
02:11:40,000 --> 02:11:44,400
duffy cooley who works at uh isovent now

3191
02:11:44,400 --> 02:11:46,320
he used to work at apple

3192
02:11:46,320 --> 02:11:49,280
where he created he posted this uh kind

3193
02:11:49,280 --> 02:11:54,560
of command using cubectl to deploy a

3194
02:11:54,560 --> 02:11:56,239
a container

3195
02:11:56,239 --> 02:11:58,400
with with like the privileged container

3196
02:11:58,400 --> 02:12:01,840
that has access to the worker node right

3197
02:12:01,840 --> 02:12:02,719
um

3198
02:12:02,719 --> 02:12:05,119
and and on the left the right side here

3199
02:12:05,119 --> 02:12:07,679
is the kind of the structure of the json

3200
02:12:07,679 --> 02:12:10,880
format that he's using to override uh

3201
02:12:10,880 --> 02:12:13,520
that container that he's deploying

3202
02:12:13,520 --> 02:12:14,960
basically

3203
02:12:14,960 --> 02:12:17,920
what what's happening here and and he's

3204
02:12:17,920 --> 02:12:22,400
using like um hosts pid equals true

3205
02:12:22,400 --> 02:12:24,960
right he's using the the privilege

3206
02:12:24,960 --> 02:12:27,360
container true as well as the security

3207
02:12:27,360 --> 02:12:30,880
context he's um

3208
02:12:30,880 --> 02:12:32,840
he's doing a lot of

3209
02:12:32,840 --> 02:12:36,639
uh like different techniques to access

3210
02:12:36,639 --> 02:12:38,719
the the worker notes right

3211
02:12:38,719 --> 02:12:41,440
and and and that's one of the ways to to

3212
02:12:41,440 --> 02:12:44,719
do that and how that happens because i'm

3213
02:12:44,719 --> 02:12:46,960
allowed with with that service account

3214
02:12:46,960 --> 02:12:50,400
that we created which is uh um

3215
02:12:50,400 --> 02:12:52,960
which is giving me a lot of permissions

3216
02:12:52,960 --> 02:12:54,320
um

3217
02:12:54,320 --> 02:12:56,320
i can i can do that i can deploy a new

3218
02:12:56,320 --> 02:12:58,159
port and that's one of the one of the

3219
02:12:58,159 --> 02:13:01,280
ways of escalating privileges in a

3220
02:13:01,280 --> 02:13:03,440
kubernetes cluster is deploying a

3221
02:13:03,440 --> 02:13:05,840
privilege pod on that cluster if i have

3222
02:13:05,840 --> 02:13:08,239
missions to do so right of course i

3223
02:13:08,239 --> 02:13:10,719
would need to download and install cube

3224
02:13:10,719 --> 02:13:14,320
ctl on that pod first to run it and do

3225
02:13:14,320 --> 02:13:16,239
the privilege escalation and if we have

3226
02:13:16,239 --> 02:13:19,280
time we can try to do that as well

3227
02:13:19,280 --> 02:13:21,440
um that can be a little

3228
02:13:21,440 --> 02:13:22,800
kind of

3229
02:13:22,800 --> 02:13:25,920
tricky on managed clusters because some

3230
02:13:25,920 --> 02:13:27,199
the way that

3231
02:13:27,199 --> 02:13:28,239
uh

3232
02:13:28,239 --> 02:13:30,480
they they handle those privilege

3233
02:13:30,480 --> 02:13:31,679
escalations

3234
02:13:31,679 --> 02:13:33,599
but but yeah let's see if that works

3235
02:13:33,599 --> 02:13:35,199
soon

3236
02:13:35,199 --> 02:13:36,079
um

3237
02:13:36,079 --> 02:13:38,079
let me talk about the defenses before

3238
02:13:38,079 --> 02:13:39,520
before we do some other attacks

3239
02:13:39,520 --> 02:13:41,040
otherwise we're not gonna have time

3240
02:13:41,040 --> 02:13:41,920
right

3241
02:13:41,920 --> 02:13:43,840
how can i protect my cluster from

3242
02:13:43,840 --> 02:13:46,000
attackers right isn't kubernetes secured

3243
02:13:46,000 --> 02:13:50,480
by default and where do i start right um

3244
02:13:50,480 --> 02:13:52,800
basically we can see that kubernetes is

3245
02:13:52,800 --> 02:13:55,040
not secured by default by by many

3246
02:13:55,040 --> 02:13:56,639
reasons right

3247
02:13:56,639 --> 02:13:58,880
so let's take a look at some different

3248
02:13:58,880 --> 02:14:00,480
uh things that you can do to protect

3249
02:14:00,480 --> 02:14:02,800
your cluster

3250
02:14:02,800 --> 02:14:03,679
um

3251
02:14:03,679 --> 02:14:06,960
one of the basic things right is taking

3252
02:14:06,960 --> 02:14:08,960
a look at when you installed your

3253
02:14:08,960 --> 02:14:11,440
cluster and this this applies only to

3254
02:14:11,440 --> 02:14:13,520
unmanaged cluster where you have access

3255
02:14:13,520 --> 02:14:14,400
to the

3256
02:14:14,400 --> 02:14:16,239
to the control plane

3257
02:14:16,239 --> 02:14:18,719
um but one of the things is it's just

3258
02:14:18,719 --> 02:14:21,360
integrity monitoring right understanding

3259
02:14:21,360 --> 02:14:23,599
what files are created when you install

3260
02:14:23,599 --> 02:14:26,800
kubernetes uh the recommended ownership

3261
02:14:26,800 --> 02:14:30,079
and permissions and those are from the

3262
02:14:30,079 --> 02:14:32,320
cis kubernetes benchmark

3263
02:14:32,320 --> 02:14:34,320
and if if you have the integrity

3264
02:14:34,320 --> 02:14:36,159
monitoring set up on that

3265
02:14:36,159 --> 02:14:37,040
node

3266
02:14:37,040 --> 02:14:39,280
anything that changes on those files

3267
02:14:39,280 --> 02:14:42,639
either permissions or or ownership then

3268
02:14:42,639 --> 02:14:44,320
you should be alerted right something

3269
02:14:44,320 --> 02:14:47,040
suspicious is happening because usually

3270
02:14:47,040 --> 02:14:49,599
those don't change very often and those

3271
02:14:49,599 --> 02:14:52,159
are the recommended permissions the cis

3272
02:14:52,159 --> 02:14:53,920
kubernetes benchmark if you haven't

3273
02:14:53,920 --> 02:14:56,320
heard about it is like a

3274
02:14:56,320 --> 02:14:59,280
very extensive documentation with best

3275
02:14:59,280 --> 02:15:02,719
practices for setting up your cluster

3276
02:15:02,719 --> 02:15:05,599
on uh on kubernetes environments and

3277
02:15:05,599 --> 02:15:07,840
setting up playing

3278
02:15:07,840 --> 02:15:09,520
it correctly

3279
02:15:09,520 --> 02:15:13,199
there is also another kind of

3280
02:15:13,199 --> 02:15:15,520
a recent document that was published by

3281
02:15:15,520 --> 02:15:16,880
the nsa

3282
02:15:16,880 --> 02:15:18,159
called the

3283
02:15:18,159 --> 02:15:21,760
kubernetes hardening guidance i think

3284
02:15:21,760 --> 02:15:24,000
it was released a couple days ago so

3285
02:15:24,000 --> 02:15:25,599
it's pretty recent

3286
02:15:25,599 --> 02:15:27,360
but

3287
02:15:27,360 --> 02:15:29,199
as far as what i looked from the

3288
02:15:29,199 --> 02:15:31,679
document has um

3289
02:15:31,679 --> 02:15:34,880
has some issues right uh they talk about

3290
02:15:34,880 --> 02:15:36,480
spot security policies which is

3291
02:15:36,480 --> 02:15:37,840
something that we're going to talk about

3292
02:15:37,840 --> 02:15:40,320
soon but those are are being deprecated

3293
02:15:40,320 --> 02:15:42,079
or deprecated already

3294
02:15:42,079 --> 02:15:45,199
um they they don't mention much about

3295
02:15:45,199 --> 02:15:46,079
the

3296
02:15:46,079 --> 02:15:48,560
encrypting at cd right which is the

3297
02:15:48,560 --> 02:15:50,719
database of kubernetes they only have a

3298
02:15:50,719 --> 02:15:52,719
small example at the end

3299
02:15:52,719 --> 02:15:54,800
and they're using the docker files with

3300
02:15:54,800 --> 02:15:57,520
the tag latest which i don't think it's

3301
02:15:57,520 --> 02:15:59,360
a good idea using the latest stack and

3302
02:15:59,360 --> 02:16:01,040
that's something that you learn when

3303
02:16:01,040 --> 02:16:02,800
using containers

3304
02:16:02,800 --> 02:16:05,840
so yeah i think the the cis benchmark

3305
02:16:05,840 --> 02:16:09,119
document is a better one to use for

3306
02:16:09,119 --> 02:16:12,400
deploying your your cluster securely

3307
02:16:12,400 --> 02:16:14,159
um there's also the same thing with the

3308
02:16:14,159 --> 02:16:15,920
worker nodes right it's just different

3309
02:16:15,920 --> 02:16:17,920
files that are installed on the worker

3310
02:16:17,920 --> 02:16:20,239
nodes with with different ownerships and

3311
02:16:20,239 --> 02:16:22,239
that's from the recommendation from the

3312
02:16:22,239 --> 02:16:25,840
cas benchmark 1.51 there might be there

3313
02:16:25,840 --> 02:16:27,679
might be a newer version

3314
02:16:27,679 --> 02:16:30,639
but yeah take a look at that on the cis

3315
02:16:30,639 --> 02:16:32,558
benchmarks website

3316
02:16:32,558 --> 02:16:34,638
uh i talked about cuba system uh

3317
02:16:34,638 --> 02:16:37,200
namespaces already and and how they can

3318
02:16:37,200 --> 02:16:39,599
be uh um dangerous

3319
02:16:39,599 --> 02:16:41,120
like

3320
02:16:41,120 --> 02:16:43,359
as i said there is no

3321
02:16:43,359 --> 02:16:45,599
security boundary between namespaces

3322
02:16:45,599 --> 02:16:48,558
right so the cube system namespace which

3323
02:16:48,558 --> 02:16:50,638
is the main namespace of your kubernetes

3324
02:16:50,638 --> 02:16:53,359
cluster and it's like a inception right

3325
02:16:53,359 --> 02:16:55,840
kubernetes uses kubernetes to run

3326
02:16:55,840 --> 02:16:59,280
kubernetes um so all the the main pods

3327
02:16:59,280 --> 02:17:01,679
of your control plane

3328
02:17:01,679 --> 02:17:03,920
are on that coupe system namespace and

3329
02:17:03,920 --> 02:17:06,478
so if an attacker has access to those

3330
02:17:06,478 --> 02:17:09,200
then then it's it's likely that they can

3331
02:17:09,200 --> 02:17:11,679
do a lot of damage right

3332
02:17:11,679 --> 02:17:13,519
so be careful with that cube system

3333
02:17:13,519 --> 02:17:16,160
namespace you don't want to give access

3334
02:17:16,160 --> 02:17:19,359
to that namespace to every user on your

3335
02:17:19,359 --> 02:17:21,200
cluster and

3336
02:17:21,200 --> 02:17:23,359
the idea is that you can use our back

3337
02:17:23,359 --> 02:17:25,760
which is row based access control to

3338
02:17:25,760 --> 02:17:27,359
protect that namespace from being

3339
02:17:27,359 --> 02:17:29,679
accessed

3340
02:17:29,679 --> 02:17:31,840
i already talked about the api server

3341
02:17:31,840 --> 02:17:33,920
how that shouldn't be exposed and how we

3342
02:17:33,920 --> 02:17:35,679
can get some information from from the

3343
02:17:35,679 --> 02:17:38,160
api server and see if there is a

3344
02:17:38,160 --> 02:17:39,519
cluster running

3345
02:17:39,519 --> 02:17:42,478
right

3346
02:17:42,478 --> 02:17:43,760
um

3347
02:17:43,760 --> 02:17:45,280
yeah there is some information that you

3348
02:17:45,280 --> 02:17:46,799
can get running some comments if you

3349
02:17:46,799 --> 02:17:48,638
have access right in this case we don't

3350
02:17:48,638 --> 02:17:50,879
have access to the control plane right

3351
02:17:50,879 --> 02:17:52,959
shell access so

3352
02:17:52,959 --> 02:17:54,879
we can't see the configuration of the

3353
02:17:54,879 --> 02:17:57,760
api server but but yeah you can do that

3354
02:17:57,760 --> 02:18:01,280
if you do if it's an unmanaged cluster

3355
02:18:01,280 --> 02:18:03,760
um the cubelet right we talked about the

3356
02:18:03,760 --> 02:18:05,280
cubelet on the

3357
02:18:05,280 --> 02:18:07,519
architecture diagram it's the agent that

3358
02:18:07,519 --> 02:18:09,840
runs on each node of your cluster right

3359
02:18:09,840 --> 02:18:11,359
make sure that all containers are

3360
02:18:11,359 --> 02:18:13,040
burning in the pod

3361
02:18:13,040 --> 02:18:15,200
and uh two main security settings for

3362
02:18:15,200 --> 02:18:17,040
the cubelet is restricting cubelet

3363
02:18:17,040 --> 02:18:18,959
permissions and rotating the kubelet

3364
02:18:18,959 --> 02:18:21,760
certificates there is another thing

3365
02:18:21,760 --> 02:18:24,879
that uh there was a blog post that i

3366
02:18:24,879 --> 02:18:27,359
published earlier this year

3367
02:18:27,359 --> 02:18:31,040
uh talking about how attackers are using

3368
02:18:31,040 --> 02:18:34,240
a cubelet exploit to compromise

3369
02:18:34,240 --> 02:18:36,160
different clusters um

3370
02:18:36,160 --> 02:18:39,120
let me see if i do yeah

3371
02:18:39,120 --> 02:18:42,240
so the way that it works just as a a

3372
02:18:42,240 --> 02:18:44,638
quick overview and i'll post a link for

3373
02:18:44,638 --> 02:18:46,398
the blog here

3374
02:18:46,398 --> 02:18:47,679
and

3375
02:18:47,679 --> 02:18:50,478
it's not like i'm not trying to

3376
02:18:50,478 --> 02:18:52,318
promote anything is just that's a

3377
02:18:52,318 --> 02:18:54,959
technical blog on what we've analyzed

3378
02:18:54,959 --> 02:18:57,920
from a very famous uh

3379
02:18:57,920 --> 02:19:00,318
actor

3380
02:19:00,398 --> 02:19:02,398
the way that they do is they compromise

3381
02:19:02,398 --> 02:19:04,558
your environment and once inside your

3382
02:19:04,558 --> 02:19:06,879
environment they scan the your whole

3383
02:19:06,879 --> 02:19:08,318
entire network

3384
02:19:08,318 --> 02:19:10,959
for uh kubernetes clusters running

3385
02:19:10,959 --> 02:19:13,280
inside your network right and and they

3386
02:19:13,280 --> 02:19:15,840
specifically target the cubelet right

3387
02:19:15,840 --> 02:19:18,398
with a cubelet exploit that's been known

3388
02:19:18,398 --> 02:19:22,160
uh uh for a while okay

3389
02:19:22,160 --> 02:19:24,080
so take a look at that blog post if you

3390
02:19:24,080 --> 02:19:27,200
if you uh if the um

3391
02:19:27,200 --> 02:19:29,519
if they can share the link but but yeah

3392
02:19:29,519 --> 02:19:31,359
there is something that's happening on

3393
02:19:31,359 --> 02:19:34,799
uh on the y in the y out as well

3394
02:19:34,799 --> 02:19:36,000
as i said the

3395
02:19:36,000 --> 02:19:38,080
kubernetes benchmark is a guidance for

3396
02:19:38,080 --> 02:19:40,318
establishing secure configuration parser

3397
02:19:40,318 --> 02:19:41,920
for kubernetes

3398
02:19:41,920 --> 02:19:44,799
there is over 120 security checks for

3399
02:19:44,799 --> 02:19:46,558
your kubernetes cluster and it has been

3400
02:19:46,558 --> 02:19:48,960
developed by uh

3401
02:19:48,960 --> 02:19:51,040
cloud native and kubernetes security

3402
02:19:51,040 --> 02:19:53,280
professionals with much more experience

3403
02:19:53,280 --> 02:19:56,479
than than i have so rory mccoon from

3404
02:19:56,479 --> 02:19:58,640
aqua security and reason

3405
02:19:58,640 --> 02:20:01,200
liz rice from isovalent and many other

3406
02:20:01,200 --> 02:20:02,399
contributors

3407
02:20:02,399 --> 02:20:05,200
right and there's also specific ones for

3408
02:20:05,200 --> 02:20:08,319
eks and gke and i think there is one for

3409
02:20:08,319 --> 02:20:11,120
aks if not already

3410
02:20:11,120 --> 02:20:13,840
so because the way that the managed

3411
02:20:13,840 --> 02:20:16,880
services work they they are a little bit

3412
02:20:16,880 --> 02:20:18,319
different a little bit different than

3413
02:20:18,319 --> 02:20:21,680
the standard the unmanaged kubernetes so

3414
02:20:21,680 --> 02:20:23,040
yeah it's better to take a look at the

3415
02:20:23,040 --> 02:20:25,040
specific documentation for that and

3416
02:20:25,040 --> 02:20:28,160
that's i think that's the best uh

3417
02:20:28,160 --> 02:20:31,280
guidance out there for protecting your

3418
02:20:31,280 --> 02:20:34,479
kubernetes clusters

3419
02:20:34,800 --> 02:20:37,280
let's see

3420
02:20:37,280 --> 02:20:40,399
um if you don't wanna

3421
02:20:41,280 --> 02:20:44,880
if if you don't wanna run yeah and if

3422
02:20:44,880 --> 02:20:48,080
you don't want to check your benchmark

3423
02:20:48,080 --> 02:20:48,960
uh

3424
02:20:48,960 --> 02:20:50,800
manually right because it's a long

3425
02:20:50,800 --> 02:20:52,720
document it has a lot of tracks that you

3426
02:20:52,720 --> 02:20:54,479
need to do and the way that the

3427
02:20:54,479 --> 02:20:59,520
benchmark works is that you have um

3428
02:20:59,520 --> 02:21:00,720
you have

3429
02:21:00,720 --> 02:21:02,960
this the setting that's recommended okay

3430
02:21:02,960 --> 02:21:05,759
here's the setting

3431
02:21:05,840 --> 02:21:09,120
then it has how to check if the set if

3432
02:21:09,120 --> 02:21:11,200
that specific security setting is

3433
02:21:11,200 --> 02:21:13,040
properly set up

3434
02:21:13,040 --> 02:21:15,760
and then if not set up it has another

3435
02:21:15,760 --> 02:21:17,920
command for you to run to change that

3436
02:21:17,920 --> 02:21:19,680
setting to the proper

3437
02:21:19,680 --> 02:21:22,240
like configuration right so the

3438
02:21:22,240 --> 02:21:24,800
benchmark is a pdf file it has a lot of

3439
02:21:24,800 --> 02:21:27,520
stuff and like many uh

3440
02:21:27,520 --> 02:21:29,920
best practices configurations right but

3441
02:21:29,920 --> 02:21:31,520
it's very hard to do that manually and

3442
02:21:31,520 --> 02:21:33,520
especially if you have multiple clusters

3443
02:21:33,520 --> 02:21:35,600
that's gonna be properly probably

3444
02:21:35,600 --> 02:21:38,960
unfeasible for you to do right so uh

3445
02:21:38,960 --> 02:21:40,960
aqua security which is also a company

3446
02:21:40,960 --> 02:21:43,120
that that works with uh container

3447
02:21:43,120 --> 02:21:45,359
security uh

3448
02:21:45,359 --> 02:21:47,840
products they they provided they created

3449
02:21:47,840 --> 02:21:51,040
this tool called cubebench which is open

3450
02:21:51,040 --> 02:21:53,439
source and it's free for everyone to to

3451
02:21:53,439 --> 02:21:56,080
use that they check whether kubernetes

3452
02:21:56,080 --> 02:21:58,800
deploys securely or not right you can

3453
02:21:58,800 --> 02:22:01,359
validate it against your cisco bernat's

3454
02:22:01,359 --> 02:22:03,600
benchmark right and it's developed in

3455
02:22:03,600 --> 02:22:06,000
gold so it's open source and let me post

3456
02:22:06,000 --> 02:22:08,000
the link here

3457
02:22:08,000 --> 02:22:08,800
on

3458
02:22:08,800 --> 02:22:11,599
from github

3459
02:22:12,000 --> 02:22:14,880
to bench

3460
02:22:16,319 --> 02:22:18,319
i think there is

3461
02:22:18,319 --> 02:22:21,479
a dash

3462
02:22:25,280 --> 02:22:27,680
yeah

3463
02:22:28,080 --> 02:22:28,880
okay

3464
02:22:28,880 --> 02:22:31,680
uh so you can use that right so i i just

3465
02:22:31,680 --> 02:22:33,359
have an example here i don't know i

3466
02:22:33,359 --> 02:22:34,880
don't think we're gonna have time to run

3467
02:22:34,880 --> 02:22:37,520
cube bench on our own cluster but it's

3468
02:22:37,520 --> 02:22:39,680
very easy to do that and you can see an

3469
02:22:39,680 --> 02:22:42,160
example of an output here showing that

3470
02:22:42,160 --> 02:22:45,080
my cluster my uh has a lot of uh

3471
02:22:45,080 --> 02:22:48,000
vulnerabilities or or maybe like it

3472
02:22:48,000 --> 02:22:50,960
failed a lot of best practices from the

3473
02:22:50,960 --> 02:22:53,359
cis benchmarks right a lot of fails and

3474
02:22:53,359 --> 02:22:55,600
warnings and whatnot and it checks

3475
02:22:55,600 --> 02:22:57,920
everything from the master node the api

3476
02:22:57,920 --> 02:23:00,720
server the lcd and worker nodes as well

3477
02:23:00,720 --> 02:23:02,399
so it's interesting too

3478
02:23:02,399 --> 02:23:04,319
if you if you have closer running on

3479
02:23:04,319 --> 02:23:07,439
your organization and you want to see

3480
02:23:07,439 --> 02:23:10,240
um their status and then how they look

3481
02:23:10,240 --> 02:23:12,720
if they were configured or not it's a

3482
02:23:12,720 --> 02:23:15,120
good tool to to use and get a quick

3483
02:23:15,120 --> 02:23:18,000
overview of the uh if they're compliant

3484
02:23:18,000 --> 02:23:19,439
with some best practices from the

3485
02:23:19,439 --> 02:23:21,760
benchmark

3486
02:23:21,760 --> 02:23:24,080
um other stuff that you can do is use

3487
02:23:24,080 --> 02:23:26,240
some image scanning right

3488
02:23:26,240 --> 02:23:28,160
before you deploy your containers on

3489
02:23:28,160 --> 02:23:31,040
your cluster the idea is to

3490
02:23:31,040 --> 02:23:33,520
scan them for vulnerabilities or or

3491
02:23:33,520 --> 02:23:35,600
outdated dependencies and there's

3492
02:23:35,600 --> 02:23:38,160
different image scanning tools uh uh out

3493
02:23:38,160 --> 02:23:40,080
there i'm not going to talk about them

3494
02:23:40,080 --> 02:23:42,240
there there's different uh open source

3495
02:23:42,240 --> 02:23:44,240
and and and

3496
02:23:44,240 --> 02:23:47,359
enterprise ones uh all those here are

3497
02:23:47,359 --> 02:23:49,600
either free or open source so you can

3498
02:23:49,600 --> 02:23:52,319
take a look at those um there's even

3499
02:23:52,319 --> 02:23:54,479
like a native docker scan command that

3500
02:23:54,479 --> 02:23:57,280
you can use now which is based off a

3501
02:23:57,280 --> 02:23:58,319
snake

3502
02:23:58,319 --> 02:24:01,680
but yeah there is different others

3503
02:24:01,680 --> 02:24:03,120
okay now

3504
02:24:03,120 --> 02:24:05,359
you scan the container image and you

3505
02:24:05,359 --> 02:24:07,680
deploy that image on

3506
02:24:07,680 --> 02:24:10,240
your cluster right but how do i know

3507
02:24:10,240 --> 02:24:13,200
that someone has compromised my cluster

3508
02:24:13,200 --> 02:24:15,120
some compromised that container that

3509
02:24:15,120 --> 02:24:16,240
part right

3510
02:24:16,240 --> 02:24:18,240
that where that's when the the cloud

3511
02:24:18,240 --> 02:24:21,439
native runtime protection comes in right

3512
02:24:21,439 --> 02:24:25,200
and and probably if we had like a

3513
02:24:25,200 --> 02:24:27,760
tool such as like falco which is an open

3514
02:24:27,760 --> 02:24:29,680
source to as well that belongs to the

3515
02:24:29,680 --> 02:24:33,359
cncf now it was donated by cystic

3516
02:24:33,359 --> 02:24:34,319
and

3517
02:24:34,319 --> 02:24:36,800
we it probably would detect some of the

3518
02:24:36,800 --> 02:24:39,520
attacks and and the uh

3519
02:24:39,520 --> 02:24:42,000
shell that we got inside the container

3520
02:24:42,000 --> 02:24:43,040
right

3521
02:24:43,040 --> 02:24:45,840
so what falco does is falco parses linux

3522
02:24:45,840 --> 02:24:48,080
kernel c skulls at runtime right it's

3523
02:24:48,080 --> 02:24:51,359
using a technology called ebpf

3524
02:24:51,359 --> 02:24:54,080
extended berkeley packet filter which is

3525
02:24:54,080 --> 02:24:55,439
kind of a

3526
02:24:55,439 --> 02:24:57,840
technology that many uh

3527
02:24:57,840 --> 02:25:01,120
container security

3528
02:25:01,120 --> 02:25:02,800
companies are using

3529
02:25:02,800 --> 02:25:05,600
to create their own uh their own tools

3530
02:25:05,600 --> 02:25:07,600
their container security tools right and

3531
02:25:07,600 --> 02:25:09,840
it has a lot of visibility on the system

3532
02:25:09,840 --> 02:25:12,479
so you don't need to install agents and

3533
02:25:12,479 --> 02:25:14,160
and like

3534
02:25:14,160 --> 02:25:15,040
mass

3535
02:25:15,040 --> 02:25:17,120
mess with the container deploys

3536
02:25:17,120 --> 02:25:18,960
sometimes deploy side cars and all that

3537
02:25:18,960 --> 02:25:19,920
stuff

3538
02:25:19,920 --> 02:25:22,800
so falco is a real engine right it has a

3539
02:25:22,800 --> 02:25:24,800
easy and powerful powerful view room

3540
02:25:24,800 --> 02:25:26,800
engine you can create your own your own

3541
02:25:26,800 --> 02:25:29,200
rules for your vulnerabilities uh it

3542
02:25:29,200 --> 02:25:30,880
generates alerts based on the threat

3543
02:25:30,880 --> 02:25:34,640
detected i'm even using the um the falco

3544
02:25:34,640 --> 02:25:37,520
sidekick t-shirt today that i got as a

3545
02:25:37,520 --> 02:25:40,479
as a contributor to the falco project

3546
02:25:40,479 --> 02:25:43,120
and it detects unexpected behavior on a

3547
02:25:43,120 --> 02:25:45,439
cluster right and and the sidekick is

3548
02:25:45,439 --> 02:25:47,359
another project that runs with falcon it

3549
02:25:47,359 --> 02:25:50,479
gives you better kind of visibility

3550
02:25:50,479 --> 02:25:54,240
on on on what falco's seen right on the

3551
02:25:54,240 --> 02:25:56,880
logs and everything

3552
02:25:56,880 --> 02:25:58,319
um

3553
02:25:58,319 --> 02:26:01,120
here we're almost out of time but yeah

3554
02:26:01,120 --> 02:26:02,720
there is other settings that you can

3555
02:26:02,720 --> 02:26:05,439
apply to your pods right of course cpu

3556
02:26:05,439 --> 02:26:07,680
and memory is limiting resources to

3557
02:26:07,680 --> 02:26:10,319
avoid denial of service that's something

3558
02:26:10,319 --> 02:26:12,640
that you can do you can apply a security

3559
02:26:12,640 --> 02:26:14,560
context as well there's a different set

3560
02:26:14,560 --> 02:26:16,160
of of

3561
02:26:16,160 --> 02:26:17,680
uh

3562
02:26:17,680 --> 02:26:19,200
of settings that you can apply on a

3563
02:26:19,200 --> 02:26:20,560
security contest

3564
02:26:20,560 --> 02:26:22,960
some of those are are here

3565
02:26:22,960 --> 02:26:26,319
and as i said the the linux uh security

3566
02:26:26,319 --> 02:26:28,319
modules right there the kernel features

3567
02:26:28,319 --> 02:26:31,200
second by armor and selinux can also be

3568
02:26:31,200 --> 02:26:33,680
used to apply that to your kubernetes be

3569
02:26:33,680 --> 02:26:36,560
careful because docker has some default

3570
02:26:36,560 --> 02:26:39,520
uh profiles for those for app armor for

3571
02:26:39,520 --> 02:26:43,200
example and tecomp but when you use that

3572
02:26:43,200 --> 02:26:45,520
on kubernetes kubernetes doesn't inherit

3573
02:26:45,520 --> 02:26:47,280
that from docker so you need to apply

3574
02:26:47,280 --> 02:26:49,359
that as well

3575
02:26:49,359 --> 02:26:50,880
and

3576
02:26:50,880 --> 02:26:53,680
yeah pod security policies is something

3577
02:26:53,680 --> 02:26:56,240
that got deprecated it's not being used

3578
02:26:56,240 --> 02:26:57,359
anymore

3579
02:26:57,359 --> 02:26:59,600
it was a way to apply the security

3580
02:26:59,600 --> 02:27:03,520
context as a whole on a cluster level

3581
02:27:03,520 --> 02:27:05,760
and there is new features now new tools

3582
02:27:05,760 --> 02:27:07,520
that you can use some alternatives such

3583
02:27:07,520 --> 02:27:10,319
as oppa gatekeeper or kyverno which are

3584
02:27:10,319 --> 02:27:12,399
open source tools as well that you can

3585
02:27:12,399 --> 02:27:15,760
create policies as code to say okay only

3586
02:27:15,760 --> 02:27:18,080
deploy this container if it doesn't have

3587
02:27:18,080 --> 02:27:20,399
any high or critical vulnerabilities

3588
02:27:20,399 --> 02:27:21,200
right

3589
02:27:21,200 --> 02:27:24,880
uh there is a uh um

3590
02:27:24,880 --> 02:27:27,280
a new pod security now i forgot to

3591
02:27:27,280 --> 02:27:28,880
update the slide but there is a new part

3592
02:27:28,880 --> 02:27:31,680
security it's not psp but there's a new

3593
02:27:31,680 --> 02:27:34,479
version that's being implemented by the

3594
02:27:34,479 --> 02:27:37,040
kubernetes see seek off and seek

3595
02:27:37,040 --> 02:27:39,520
security team right there is a it has

3596
02:27:39,520 --> 02:27:42,240
been approved already

3597
02:27:42,240 --> 02:27:45,040
um yeah i won't have time to talk over

3598
02:27:45,040 --> 02:27:48,960
our back and at cd network policy and

3599
02:27:48,960 --> 02:27:50,720
yeah let me finish with the basics and

3600
02:27:50,720 --> 02:27:53,120
i'll share those lives with you and if

3601
02:27:53,120 --> 02:27:55,359
when i talk about those other things our

3602
02:27:55,359 --> 02:27:56,319
back

3603
02:27:56,319 --> 02:27:59,200
uh network policies and audit logs we

3604
02:27:59,200 --> 02:28:02,640
can chat later i i'm available on on

3605
02:28:02,640 --> 02:28:05,120
social media twitter or linkedin

3606
02:28:05,120 --> 02:28:07,200
but basically what i wanted to give you

3607
02:28:07,200 --> 02:28:09,680
here is just an overview of kubernetes

3608
02:28:09,680 --> 02:28:13,040
an overview of the the security issues

3609
02:28:13,040 --> 02:28:16,080
and also an overview of how to secure

3610
02:28:16,080 --> 02:28:18,319
your cluster right it doesn't mean to be

3611
02:28:18,319 --> 02:28:21,600
it's not an extensive uh workshop it's

3612
02:28:21,600 --> 02:28:24,000
not an in-depth workshop so keep that in

3613
02:28:24,000 --> 02:28:24,880
mind

3614
02:28:24,880 --> 02:28:27,280
um the so i just want to leave you with

3615
02:28:27,280 --> 02:28:30,399
with a few a few basic rules with

3616
02:28:30,399 --> 02:28:32,960
kubernetes right uh first thing is

3617
02:28:32,960 --> 02:28:35,280
update your environment version early

3618
02:28:35,280 --> 02:28:37,120
and often as i said there is new

3619
02:28:37,120 --> 02:28:39,600
versions being released uh

3620
02:28:39,600 --> 02:28:42,240
very frequently now three times a year

3621
02:28:42,240 --> 02:28:45,680
and the version 1.22 is the most

3622
02:28:45,680 --> 02:28:48,160
up-to-date one uh recently that was

3623
02:28:48,160 --> 02:28:50,319
released recently

3624
02:28:50,319 --> 02:28:52,640
don't use the cluster admin user for

3625
02:28:52,640 --> 02:28:54,399
your daily work right

3626
02:28:54,399 --> 02:28:56,560
treat it like roots right so the reason

3627
02:28:56,560 --> 02:28:59,760
being why we got to uh exploit that

3628
02:28:59,760 --> 02:29:03,040
vulnerability and then uh get shell on

3629
02:29:03,040 --> 02:29:05,120
the quad and then do bad stuff on the

3630
02:29:05,120 --> 02:29:08,479
cluster was because the service account

3631
02:29:08,479 --> 02:29:11,520
of that pod had too many permissions

3632
02:29:11,520 --> 02:29:13,840
right you can even deploy new pods and

3633
02:29:13,840 --> 02:29:17,040
scale privileges and all that stuff

3634
02:29:17,040 --> 02:29:19,760
so be aware of that

3635
02:29:19,760 --> 02:29:21,840
if you can use manage kubernetes

3636
02:29:21,840 --> 02:29:25,840
services such as aks eks or dke because

3637
02:29:25,840 --> 02:29:28,399
they have better security defaults and

3638
02:29:28,399 --> 02:29:29,600
you don't need to worry about the

3639
02:29:29,600 --> 02:29:31,280
control plane because they care they

3640
02:29:31,280 --> 02:29:34,080
care they take care of that for you

3641
02:29:34,080 --> 02:29:36,080
and as i said check out the cis

3642
02:29:36,080 --> 02:29:38,399
kubernetes benchmark for more security

3643
02:29:38,399 --> 02:29:40,319
best practices

3644
02:29:40,319 --> 02:29:42,399
uh i hope you enjoyed this workshop

3645
02:29:42,399 --> 02:29:44,640
there's some references here and i can

3646
02:29:44,640 --> 02:29:47,200
share the uh the whole

3647
02:29:47,200 --> 02:29:49,280
command list that i use and you can try

3648
02:29:49,280 --> 02:29:51,600
to replicate that on your environment

3649
02:29:51,600 --> 02:29:53,280
and i'm sorry if some of the commands

3650
02:29:53,280 --> 02:29:55,120
didn't work but i'll take a look and

3651
02:29:55,120 --> 02:29:57,359
make sure that's fixed and before i

3652
02:29:57,359 --> 02:30:02,479
share with you so yeah thank you

