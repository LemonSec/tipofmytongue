1
00:00:01,920 --> 00:00:03,199
hi everyone

2
00:00:03,199 --> 00:00:05,520
thank you very much for tuning in today

3
00:00:05,520 --> 00:00:06,720
today's talk is about

4
00:00:06,720 --> 00:00:08,880
attacking terraform environments by the

5
00:00:08,880 --> 00:00:09,920
end of this talk

6
00:00:09,920 --> 00:00:12,320
you learned ways to attack and secure

7
00:00:12,320 --> 00:00:14,400
your terraform environments

8
00:00:14,400 --> 00:00:16,720
this talk would cover a lot of things

9
00:00:16,720 --> 00:00:18,000
that probably

10
00:00:18,000 --> 00:00:21,199
not done before one thing to say before

11
00:00:21,199 --> 00:00:21,920
we start

12
00:00:21,920 --> 00:00:24,320
therefore by default is not as secure as

13
00:00:24,320 --> 00:00:25,439
you would think

14
00:00:25,439 --> 00:00:27,760
you have to put a lot of work to secure

15
00:00:27,760 --> 00:00:29,039
it and

16
00:00:29,039 --> 00:00:32,159
what i'm aiming for is by this at by the

17
00:00:32,159 --> 00:00:33,920
end of this talk is to learn about

18
00:00:33,920 --> 00:00:36,960
all the things that you can know

19
00:00:36,960 --> 00:00:38,960
uh so that you can secure your terraform

20
00:00:38,960 --> 00:00:40,000
environments

21
00:00:40,000 --> 00:00:44,320
and let's start

22
00:00:44,320 --> 00:00:46,320
a little bit about me my name is mazin

23
00:00:46,320 --> 00:00:48,640
ahmed i'm an application security and

24
00:00:48,640 --> 00:00:50,320
offensive security engineer

25
00:00:50,320 --> 00:00:52,320
i founded full hand it's a security

26
00:00:52,320 --> 00:00:53,680
startup that solves

27
00:00:53,680 --> 00:00:56,000
the attack surface visibility problem

28
00:00:56,000 --> 00:00:57,360
for companies and

29
00:00:57,360 --> 00:01:00,640
organizations and also i'm an occasional

30
00:01:00,640 --> 00:01:01,600
bug bounty hunter

31
00:01:01,600 --> 00:01:04,239
i have been acknowledged by facebook

32
00:01:04,239 --> 00:01:06,320
twitter

33
00:01:06,320 --> 00:01:08,560
linkedin zoom oracle and many other

34
00:01:08,560 --> 00:01:09,920
companies

35
00:01:09,920 --> 00:01:13,280
and of course i'm in love with cloud

36
00:01:13,280 --> 00:01:14,400
security

37
00:01:14,400 --> 00:01:16,320
anything related to cloud security and

38
00:01:16,320 --> 00:01:17,920
of course uh

39
00:01:17,920 --> 00:01:20,560
different things related to security are

40
00:01:20,560 --> 00:01:21,680
my passion

41
00:01:21,680 --> 00:01:24,080
and that's why i put the effort into

42
00:01:24,080 --> 00:01:25,520
having this research

43
00:01:25,520 --> 00:01:29,280
made the agenda for today

44
00:01:29,280 --> 00:01:32,560
is first we we're gonna go over things

45
00:01:32,560 --> 00:01:35,600
uh a background on terraform what

46
00:01:35,600 --> 00:01:38,240
styrofoam how does it work

47
00:01:38,240 --> 00:01:40,640
and why do we need to learn about all of

48
00:01:40,640 --> 00:01:41,520
this

49
00:01:41,520 --> 00:01:44,960
why is it important attack victors and

50
00:01:44,960 --> 00:01:45,840
scenarios

51
00:01:45,840 --> 00:01:48,159
attack victors and scenarios and of

52
00:01:48,159 --> 00:01:49,040
course the

53
00:01:49,040 --> 00:01:51,600
most important part is the demo which

54
00:01:51,600 --> 00:01:52,880
would be really

55
00:01:52,880 --> 00:01:56,880
cool the recommendations at the end

56
00:01:56,880 --> 00:02:01,280
and then would have room for questions

57
00:02:01,920 --> 00:02:04,799
so first of all what's infrastructure as

58
00:02:04,799 --> 00:02:06,240
good

59
00:02:06,240 --> 00:02:09,598
back in the years when cloud was

60
00:02:09,598 --> 00:02:10,479
starting

61
00:02:10,479 --> 00:02:13,520
was becoming a thing if someone would

62
00:02:13,520 --> 00:02:15,040
like to deploy something they would go

63
00:02:15,040 --> 00:02:16,160
to the console

64
00:02:16,160 --> 00:02:19,040
take their time in deploying their

65
00:02:19,040 --> 00:02:21,040
resources

66
00:02:21,040 --> 00:02:24,000
from the console and if they would like

67
00:02:24,000 --> 00:02:24,480
to

68
00:02:24,480 --> 00:02:26,319
do this again and again and maintain

69
00:02:26,319 --> 00:02:27,920
that they would have to log

70
00:02:27,920 --> 00:02:29,920
in every single time to do that which is

71
00:02:29,920 --> 00:02:31,280
a bit of a painful

72
00:02:31,280 --> 00:02:34,239
thing and does not really scale that's

73
00:02:34,239 --> 00:02:35,120
why

74
00:02:35,120 --> 00:02:37,840
infrastructure as code became a popular

75
00:02:37,840 --> 00:02:38,239
thing

76
00:02:38,239 --> 00:02:40,480
in the devops and lipstick of

77
00:02:40,480 --> 00:02:42,000
communities

78
00:02:42,000 --> 00:02:45,200
why because you would be able to write

79
00:02:45,200 --> 00:02:48,239
all of your resources and the cloud as

80
00:02:48,239 --> 00:02:49,920
code and then you would be able to

81
00:02:49,920 --> 00:02:52,000
deploy it many times

82
00:02:52,000 --> 00:02:54,800
at the same time you would allow room

83
00:02:54,800 --> 00:02:55,360
for

84
00:02:55,360 --> 00:02:58,080
peers if you so that the people in your

85
00:02:58,080 --> 00:02:59,760
team and different teams will be able to

86
00:02:59,760 --> 00:03:01,200
review it

87
00:03:01,200 --> 00:03:04,400
it's amazing so yep it allows

88
00:03:04,400 --> 00:03:06,800
that parts and of course uh one thing

89
00:03:06,800 --> 00:03:08,239
that you can say that

90
00:03:08,239 --> 00:03:10,000
once you have this being set up you

91
00:03:10,000 --> 00:03:12,400
would be able to run it through

92
00:03:12,400 --> 00:03:15,760
ci security scanning for compliance

93
00:03:15,760 --> 00:03:18,959
and you can automate many things without

94
00:03:18,959 --> 00:03:19,440
really

95
00:03:19,440 --> 00:03:21,599
having to have someone to review

96
00:03:21,599 --> 00:03:22,640
everything

97
00:03:22,640 --> 00:03:26,159
um uh being deployed

98
00:03:26,159 --> 00:03:28,720
and of course when you deploy this and

99
00:03:28,720 --> 00:03:29,680
using get

100
00:03:29,680 --> 00:03:32,000
you would be able to have an archive of

101
00:03:32,000 --> 00:03:34,000
everything being deployed

102
00:03:34,000 --> 00:03:36,000
it's just an amazing technology that

103
00:03:36,000 --> 00:03:38,159
everyone loves

104
00:03:38,159 --> 00:03:42,480
hopefully and uh what's their phone

105
00:03:42,480 --> 00:03:43,920
jira form is an open source

106
00:03:43,920 --> 00:03:46,640
infrastructure as code software made by

107
00:03:46,640 --> 00:03:49,760
hashicorp around 10 years ago

108
00:03:49,760 --> 00:03:52,720
and users define their code in a

109
00:03:52,720 --> 00:03:53,760
language called the

110
00:03:53,760 --> 00:03:56,799
hcl or hashicorp language

111
00:03:56,799 --> 00:03:59,840
and then deployments and and the entire

112
00:03:59,840 --> 00:04:01,680
infrastructure management happens

113
00:04:01,680 --> 00:04:03,599
through terraform whenever you write

114
00:04:03,599 --> 00:04:04,239
code

115
00:04:04,239 --> 00:04:07,200
you would pass it to a telephone build a

116
00:04:07,200 --> 00:04:09,200
binary and then it will

117
00:04:09,200 --> 00:04:12,400
read the term from state a state of

118
00:04:12,400 --> 00:04:14,400
the current infrastructure and then it

119
00:04:14,400 --> 00:04:17,279
will decide what changes should be done

120
00:04:17,279 --> 00:04:19,199
why i'm talking about true form today

121
00:04:19,199 --> 00:04:20,478
instead of all of

122
00:04:20,478 --> 00:04:23,120
apollo me or different uh or cloud

123
00:04:23,120 --> 00:04:24,320
formation or different

124
00:04:24,320 --> 00:04:27,440
uh cloud orchestrator because

125
00:04:27,440 --> 00:04:29,680
turf is the most popular iec

126
00:04:29,680 --> 00:04:32,880
orchestrated in the planet

127
00:04:33,440 --> 00:04:35,919
this year a couple of months back they

128
00:04:35,919 --> 00:04:37,199
have released

129
00:04:37,199 --> 00:04:40,479
terraform 1.0 the

130
00:04:40,479 --> 00:04:42,639
it has been a big thing for everyone

131
00:04:42,639 --> 00:04:43,919
that is

132
00:04:43,919 --> 00:04:48,080
working on with terraform and of course

133
00:04:48,080 --> 00:04:51,680
it passes 100 million downloads

134
00:04:51,680 --> 00:04:54,479
crazy numbers

135
00:04:55,120 --> 00:04:56,400
another thing that is cool about

136
00:04:56,400 --> 00:04:58,160
terraform once you have it

137
00:04:58,160 --> 00:05:01,520
is you can write the same infrastructure

138
00:05:01,520 --> 00:05:02,560
code

139
00:05:02,560 --> 00:05:04,880
and have it integrated with different

140
00:05:04,880 --> 00:05:05,759
providers so

141
00:05:05,759 --> 00:05:08,639
you can write code that allows you to

142
00:05:08,639 --> 00:05:09,440
deploy to

143
00:05:09,440 --> 00:05:13,680
aws or azure or gcp or anything else

144
00:05:13,680 --> 00:05:16,960
and it's not only these

145
00:05:16,960 --> 00:05:18,880
six technologies and six providers that

146
00:05:18,880 --> 00:05:20,080
are there

147
00:05:20,080 --> 00:05:22,400
they support more than a thousand

148
00:05:22,400 --> 00:05:23,120
provider

149
00:05:23,120 --> 00:05:26,960
as of today how how you would be able to

150
00:05:26,960 --> 00:05:27,759
do this

151
00:05:27,759 --> 00:05:30,400
is as a practitioner or a user you would

152
00:05:30,400 --> 00:05:31,600
write your code

153
00:05:31,600 --> 00:05:33,759
then once it's ready it will go through

154
00:05:33,759 --> 00:05:34,960
terraform plan

155
00:05:34,960 --> 00:05:37,919
and telephone plan is like the way that

156
00:05:37,919 --> 00:05:39,600
the form would be

157
00:05:39,600 --> 00:05:43,919
planning your deployment and show you

158
00:05:43,919 --> 00:05:46,400
what would be changing and then it would

159
00:05:46,400 --> 00:05:47,039
go through

160
00:05:47,039 --> 00:05:49,520
the apply and once you click on uh run

161
00:05:49,520 --> 00:05:50,639
apply

162
00:05:50,639 --> 00:05:53,919
it would be deploying directly

163
00:05:53,919 --> 00:05:59,440
to your cloud provider the thing is

164
00:05:59,919 --> 00:06:02,800
when you are running apply and plan on

165
00:06:02,800 --> 00:06:03,520
apply

166
00:06:03,520 --> 00:06:07,360
this means that you are checking that

167
00:06:07,360 --> 00:06:10,479
that drifts between the current code and

168
00:06:10,479 --> 00:06:12,160
what is there on the

169
00:06:12,160 --> 00:06:14,400
provider and if you are applying uh

170
00:06:14,400 --> 00:06:15,199
changes

171
00:06:15,199 --> 00:06:17,919
this means that you have right access on

172
00:06:17,919 --> 00:06:20,400
different things on your cloud provider

173
00:06:20,400 --> 00:06:22,400
and who would have this it would be

174
00:06:22,400 --> 00:06:24,319
terrifying

175
00:06:24,319 --> 00:06:28,639
so setting up their phone with grants at

176
00:06:28,639 --> 00:06:30,960
high permissions that allows it to do

177
00:06:30,960 --> 00:06:31,919
everything that you

178
00:06:31,919 --> 00:06:35,120
need to have it to do

179
00:06:35,120 --> 00:06:38,080
while it sounds curry it's the default

180
00:06:38,080 --> 00:06:38,639
thing

181
00:06:38,639 --> 00:06:41,039
we have to just set it up in a way that

182
00:06:41,039 --> 00:06:43,039
could be secure

183
00:06:43,039 --> 00:06:47,120
and not rely on the default things

184
00:06:47,120 --> 00:06:52,080
and try to think better about it

185
00:06:52,479 --> 00:06:55,919
as i said with great power comes great

186
00:06:55,919 --> 00:07:00,160
responsibility a single mistake here

187
00:07:00,160 --> 00:07:03,680
can lead to the entire

188
00:07:03,680 --> 00:07:06,880
compromise of the the cloud provider or

189
00:07:06,880 --> 00:07:08,160
the cloud account

190
00:07:08,160 --> 00:07:11,199
so imagine your entire aws account

191
00:07:11,199 --> 00:07:14,240
being held for ransom someone would uh

192
00:07:14,240 --> 00:07:15,680
like if someone compromised that they

193
00:07:15,680 --> 00:07:18,000
would go into your club

194
00:07:18,000 --> 00:07:20,240
provider they would be backing up all of

195
00:07:20,240 --> 00:07:21,840
your sv buckets

196
00:07:21,840 --> 00:07:25,360
they would uh incr or may uh delete

197
00:07:25,360 --> 00:07:26,000
everything

198
00:07:26,000 --> 00:07:28,800
they would have it somewhere else and

199
00:07:28,800 --> 00:07:29,440
then

200
00:07:29,440 --> 00:07:31,120
they would ask you for ransom imagine

201
00:07:31,120 --> 00:07:33,599
this ransom isn't the thing that you

202
00:07:33,599 --> 00:07:34,240
would see

203
00:07:34,240 --> 00:07:38,160
only on your uh internal network or

204
00:07:38,160 --> 00:07:40,160
or in your laptops is something that can

205
00:07:40,160 --> 00:07:41,599
be done also in the cloud

206
00:07:41,599 --> 00:07:44,000
it's not it's still not a thing today

207
00:07:44,000 --> 00:07:45,680
but i can imagine that this would be

208
00:07:45,680 --> 00:07:46,240
happening

209
00:07:46,240 --> 00:07:49,280
in the upcoming years

210
00:07:53,039 --> 00:07:57,120
and as i said about the terraform

211
00:07:57,120 --> 00:08:00,160
states the way that perform works is

212
00:08:00,160 --> 00:08:03,199
it would be storing all of the changes

213
00:08:03,199 --> 00:08:05,680
and all of the additions that it made

214
00:08:05,680 --> 00:08:09,440
in your cloud provider in a file

215
00:08:09,440 --> 00:08:11,680
that acts as a database called terraform

216
00:08:11,680 --> 00:08:13,280
state

217
00:08:13,280 --> 00:08:15,199
every time you do a change it would

218
00:08:15,199 --> 00:08:17,199
check it against

219
00:08:17,199 --> 00:08:19,520
that file and then would update it

220
00:08:19,520 --> 00:08:22,240
whenever there is anything

221
00:08:22,240 --> 00:08:24,479
there are many ways to have your

222
00:08:24,479 --> 00:08:26,639
terraform state being deployed

223
00:08:26,639 --> 00:08:29,440
one thing is you can have it locally

224
00:08:29,440 --> 00:08:30,400
second way that

225
00:08:30,400 --> 00:08:34,159
is i think the most common way by

226
00:08:34,159 --> 00:08:37,679
everyone that i know is using

227
00:08:37,679 --> 00:08:41,760
a remote backend of sv

228
00:08:41,760 --> 00:08:43,919
so that you would specify a bucket you

229
00:08:43,919 --> 00:08:45,360
would specify a key

230
00:08:45,360 --> 00:08:47,519
and then which region would you like to

231
00:08:47,519 --> 00:08:48,640
have this bucket at

232
00:08:48,640 --> 00:08:50,880
on and then terraform would be

233
00:08:50,880 --> 00:08:51,920
automatically

234
00:08:51,920 --> 00:08:54,320
uh creating this bucket for uh would be

235
00:08:54,320 --> 00:08:55,440
automatically uh

236
00:08:55,440 --> 00:08:58,480
pushing the the changes and the

237
00:08:58,480 --> 00:09:01,200
state file there and whenever it updates

238
00:09:01,200 --> 00:09:02,320
it would

239
00:09:02,320 --> 00:09:08,320
synchronize with that key

240
00:09:08,320 --> 00:09:13,440
so attack number one or thing number one

241
00:09:13,519 --> 00:09:16,800
if you go if you have uh get

242
00:09:16,800 --> 00:09:18,959
uh get object permission on the s3

243
00:09:18,959 --> 00:09:19,920
bucket for

244
00:09:19,920 --> 00:09:21,600
solving the state file then you would

245
00:09:21,600 --> 00:09:22,690
have access to

246
00:09:22,690 --> 00:09:23,920
[Music]

247
00:09:23,920 --> 00:09:26,480
secrets access keys and database

248
00:09:26,480 --> 00:09:27,279
credentials

249
00:09:27,279 --> 00:09:29,839
so everything that is being deployed

250
00:09:29,839 --> 00:09:30,720
from

251
00:09:30,720 --> 00:09:33,839
uh for the organization through

252
00:09:33,839 --> 00:09:35,519
terraform

253
00:09:35,519 --> 00:09:39,040
uh have a copy of it in the sit

254
00:09:39,040 --> 00:09:41,600
in the state file so there's something

255
00:09:41,600 --> 00:09:42,080
like

256
00:09:42,080 --> 00:09:44,560
an rds database would have their

257
00:09:44,560 --> 00:09:46,240
credentials stored somewhere

258
00:09:46,240 --> 00:09:49,120
and that place would have a copy in the

259
00:09:49,120 --> 00:09:50,080
state file

260
00:09:50,080 --> 00:09:53,360
same thing if you create the an im key

261
00:09:53,360 --> 00:09:55,760
access key then you would have it there

262
00:09:55,760 --> 00:09:56,399
or

263
00:09:56,399 --> 00:09:59,279
any other secrets that you would define

264
00:09:59,279 --> 00:09:59,760
or

265
00:09:59,760 --> 00:10:02,839
the provider would be defining for your

266
00:10:02,839 --> 00:10:05,600
phone so whenever you get access

267
00:10:05,600 --> 00:10:09,440
to uh to an organization and a

268
00:10:09,440 --> 00:10:12,800
cloud account try to search for

269
00:10:12,800 --> 00:10:16,160
if they have a sv bucket that

270
00:10:16,160 --> 00:10:18,880
looks like it's use uh it's storing

271
00:10:18,880 --> 00:10:20,480
secrets for your phone

272
00:10:20,480 --> 00:10:23,279
it would have the entire instructions

273
00:10:23,279 --> 00:10:23,839
for you

274
00:10:23,839 --> 00:10:32,160
to go further in the environment

275
00:10:32,160 --> 00:10:35,680
another thing is states on

276
00:10:35,680 --> 00:10:37,519
terraform enterprise terraform

277
00:10:37,519 --> 00:10:39,279
enterprise has

278
00:10:39,279 --> 00:10:41,519
terraform has an enterprise offering

279
00:10:41,519 --> 00:10:43,519
called terraform enterprise

280
00:10:43,519 --> 00:10:47,040
and the normal uh

281
00:10:47,040 --> 00:10:51,120
perform that people use is a cli binary

282
00:10:51,120 --> 00:10:51,760
that peop

283
00:10:51,760 --> 00:10:54,560
that people would be using for deploying

284
00:10:54,560 --> 00:10:55,200
uh

285
00:10:55,200 --> 00:10:57,279
infrastructure but with terraform

286
00:10:57,279 --> 00:11:00,160
enterprise you would have

287
00:11:00,160 --> 00:11:04,719
sso team management states

288
00:11:05,279 --> 00:11:06,959
says management in different ways and

289
00:11:06,959 --> 00:11:09,040
configurations and

290
00:11:09,040 --> 00:11:12,480
different ways for your integrations and

291
00:11:12,480 --> 00:11:15,120
terraform to price is amazing but still

292
00:11:15,120 --> 00:11:17,200
the same problem of storing the sales

293
00:11:17,200 --> 00:11:18,560
files

294
00:11:18,560 --> 00:11:22,959
is exist on terraform enterprise

295
00:11:22,959 --> 00:11:27,600
and how it works is you would

296
00:11:27,600 --> 00:11:29,600
deploy a terraform enterprise as an

297
00:11:29,600 --> 00:11:31,120
instance

298
00:11:31,120 --> 00:11:34,160
it follows itself hosted model also they

299
00:11:34,160 --> 00:11:36,480
provide a cloud hosted

300
00:11:36,480 --> 00:11:38,880
cloud hosted model that they would be

301
00:11:38,880 --> 00:11:40,800
hosting it within

302
00:11:40,800 --> 00:11:43,680
an offering called terraform cloud and

303
00:11:43,680 --> 00:11:44,399
but

304
00:11:44,399 --> 00:11:47,279
let's focus on this on the self-hosted

305
00:11:47,279 --> 00:11:49,279
one that you can host in your

306
00:11:49,279 --> 00:11:52,000
infrastructure the states can be stored

307
00:11:52,000 --> 00:11:54,240
in many ways

308
00:11:54,240 --> 00:11:58,160
postgresql aws rds

309
00:11:58,160 --> 00:12:02,399
a3 mounted disk same instance desk

310
00:12:02,399 --> 00:12:06,399
and many more

311
00:12:06,959 --> 00:12:10,000
if you get access to any of these

312
00:12:10,000 --> 00:12:13,839
places these places would have access

313
00:12:13,839 --> 00:12:17,200
to the state file and then you can copy

314
00:12:17,200 --> 00:12:18,079
this state file

315
00:12:18,079 --> 00:12:21,040
inspected for secrets use these secrets

316
00:12:21,040 --> 00:12:21,920
for

317
00:12:21,920 --> 00:12:25,839
getting a step ahead

318
00:12:32,880 --> 00:12:36,320
right another thing to say of course we

319
00:12:36,320 --> 00:12:38,399
we talked about therefore enterprise is

320
00:12:38,399 --> 00:12:39,839
deployed as an instance

321
00:12:39,839 --> 00:12:42,480
on the aws account or in the cloud

322
00:12:42,480 --> 00:12:44,320
account

323
00:12:44,320 --> 00:12:47,600
and if you compromised and inst at efe

324
00:12:47,600 --> 00:12:48,160
instance

325
00:12:48,160 --> 00:12:50,000
this is the best place for attack

326
00:12:50,000 --> 00:12:52,399
persistence and there are many reasons

327
00:12:52,399 --> 00:12:56,959
for that one and once it gets deployed

328
00:12:56,959 --> 00:13:01,360
successfully no one really touched it

329
00:13:01,360 --> 00:13:03,600
another thing is upgrades and

330
00:13:03,600 --> 00:13:06,079
maintenance really happened like

331
00:13:06,079 --> 00:13:08,639
it's not a common thing that uh and a

332
00:13:08,639 --> 00:13:10,480
devops engineer would go in

333
00:13:10,480 --> 00:13:13,200
and log and assess it to the server to

334
00:13:13,200 --> 00:13:13,839
see

335
00:13:13,839 --> 00:13:16,480
different things unless something is

336
00:13:16,480 --> 00:13:17,200
broken

337
00:13:17,200 --> 00:13:19,680
then that's for our there is an actual

338
00:13:19,680 --> 00:13:21,040
upgrade that would happen

339
00:13:21,040 --> 00:13:22,399
this is the only time that someone would

340
00:13:22,399 --> 00:13:24,160
go in and uh

341
00:13:24,160 --> 00:13:27,440
and try to uh ssh to this

342
00:13:27,440 --> 00:13:30,959
instance so this is one thing to add

343
00:13:30,959 --> 00:13:34,000
and of course it's uh if

344
00:13:34,000 --> 00:13:36,720
because terraform enterprise would have

345
00:13:36,720 --> 00:13:38,000
um

346
00:13:38,000 --> 00:13:40,160
permissions to deploy to the cloud to

347
00:13:40,160 --> 00:13:41,360
your cloud uh

348
00:13:41,360 --> 00:13:44,240
environment you would have the company

349
00:13:44,240 --> 00:13:45,680
would have to

350
00:13:45,680 --> 00:13:49,040
provide it with proper permissions

351
00:13:49,040 --> 00:13:52,320
to deploy to deploy online so it would

352
00:13:52,320 --> 00:13:52,720
have

353
00:13:52,720 --> 00:13:55,760
probably admin access to your aws

354
00:13:55,760 --> 00:13:57,040
accounts

355
00:13:57,040 --> 00:14:01,680
or any account that is being used for

356
00:14:01,680 --> 00:14:04,880
if you get access to this uh

357
00:14:04,880 --> 00:14:07,760
vm or this instance then you would have

358
00:14:07,760 --> 00:14:09,839
high permissions in doing whatever on

359
00:14:09,839 --> 00:14:12,160
the infrastructure you can create

360
00:14:12,160 --> 00:14:15,199
new users you can back their users you

361
00:14:15,199 --> 00:14:16,079
can

362
00:14:16,079 --> 00:14:19,120
read buckets which is

363
00:14:19,120 --> 00:14:21,920
something that is not really common but

364
00:14:21,920 --> 00:14:24,000
of course you can do that

365
00:14:24,000 --> 00:14:28,399
and you can do everything

366
00:14:28,480 --> 00:14:31,279
and one thing that is funny here is

367
00:14:31,279 --> 00:14:32,959
let's say that

368
00:14:32,959 --> 00:14:35,519
you are in engagement and the and the

369
00:14:35,519 --> 00:14:37,279
security team detected that

370
00:14:37,279 --> 00:14:39,600
your the database was compromised

371
00:14:39,600 --> 00:14:40,320
because of

372
00:14:40,320 --> 00:14:43,040
the state files and all they would

373
00:14:43,040 --> 00:14:44,800
ideally go and rotate the

374
00:14:44,800 --> 00:14:47,920
database keys and how would they

375
00:14:47,920 --> 00:14:49,920
rotate the keys they would rotate it

376
00:14:49,920 --> 00:14:51,199
through terraform

377
00:14:51,199 --> 00:14:54,320
that's a typical way uh or one way

378
00:14:54,320 --> 00:14:55,040
actually

379
00:14:55,040 --> 00:14:57,760
but if they uh if they updated it with

380
00:14:57,760 --> 00:14:58,480
terraform

381
00:14:58,480 --> 00:15:00,720
then you would still have the latest

382
00:15:00,720 --> 00:15:01,600
keys being

383
00:15:01,600 --> 00:15:03,680
synchronized uh on the terraform

384
00:15:03,680 --> 00:15:04,639
instance which is

385
00:15:04,639 --> 00:15:07,199
really cool

386
00:15:08,320 --> 00:15:13,839
let me pause for water

387
00:15:18,720 --> 00:15:22,160
and as i said they're from enterprise

388
00:15:22,160 --> 00:15:25,040
it has high permissions and it's not

389
00:15:25,040 --> 00:15:26,959
something that you should really put on

390
00:15:26,959 --> 00:15:28,320
the internet

391
00:15:28,320 --> 00:15:30,880
but there are hundreds of organizations

392
00:15:30,880 --> 00:15:32,240
around the world that have

393
00:15:32,240 --> 00:15:34,880
their terraform enterprise exposed to

394
00:15:34,880 --> 00:15:35,680
the public

395
00:15:35,680 --> 00:15:38,320
if there is a single zero day here i'm

396
00:15:38,320 --> 00:15:40,000
pretty sure this would be a nightmare

397
00:15:40,000 --> 00:15:44,639
for all of these companies

398
00:15:45,839 --> 00:15:48,079
and these are filters that you can use

399
00:15:48,079 --> 00:15:48,959
for

400
00:15:48,959 --> 00:15:54,720
just checking it out by yourself

401
00:15:54,720 --> 00:15:57,120
okay we talked about how you can use

402
00:15:57,120 --> 00:15:59,040
this in your advantage with

403
00:15:59,040 --> 00:16:02,480
uh when compromising and an aws account

404
00:16:02,480 --> 00:16:03,120
that has

405
00:16:03,120 --> 00:16:06,720
uh that or an aws user that has

406
00:16:06,720 --> 00:16:10,480
access to the sv bucket that stores

407
00:16:10,480 --> 00:16:13,600
the state files but let's say

408
00:16:13,600 --> 00:16:15,600
that you were not really able to

409
00:16:15,600 --> 00:16:17,040
compromise the aws

410
00:16:17,040 --> 00:16:19,519
account and you get access to a

411
00:16:19,519 --> 00:16:21,360
developer machine and this developer

412
00:16:21,360 --> 00:16:21,680
have

413
00:16:21,680 --> 00:16:23,440
access to there from enterprise or

414
00:16:23,440 --> 00:16:25,680
terraform cloud

415
00:16:25,680 --> 00:16:28,800
what things can you do here

416
00:16:28,800 --> 00:16:32,240
therefore i have

417
00:16:32,240 --> 00:16:34,800
exposed a full dedicated api that can be

418
00:16:34,800 --> 00:16:36,560
used for automating functionalities and

419
00:16:36,560 --> 00:16:37,440
tasks

420
00:16:37,440 --> 00:16:40,639
this can go from any uh everywhere from

421
00:16:40,639 --> 00:16:41,839
updating users

422
00:16:41,839 --> 00:16:46,079
to provision plans to

423
00:16:46,079 --> 00:16:50,240
add comments and everything

424
00:16:50,240 --> 00:16:53,120
one thing that they have is an api

425
00:16:53,120 --> 00:16:53,680
called

426
00:16:53,680 --> 00:16:56,399
state version output and this state

427
00:16:56,399 --> 00:16:58,800
vision output api allows you to download

428
00:16:58,800 --> 00:16:59,759
the state file

429
00:16:59,759 --> 00:17:03,440
that you you that you would have

430
00:17:03,440 --> 00:17:06,720
needed to compromise an actual you i am

431
00:17:06,720 --> 00:17:07,839
user or

432
00:17:07,839 --> 00:17:11,439
all of this so now if

433
00:17:11,439 --> 00:17:14,160
it wasn't really possible to do this you

434
00:17:14,160 --> 00:17:15,439
can just

435
00:17:15,439 --> 00:17:19,439
go to the api and ask it for your

436
00:17:19,439 --> 00:17:22,240
for your state file and nicely and it

437
00:17:22,240 --> 00:17:24,559
would respond

438
00:17:24,559 --> 00:17:26,880
with the actual state file in plain text

439
00:17:26,880 --> 00:17:29,360
which is nice

440
00:17:29,360 --> 00:17:31,280
of course this will also contain

441
00:17:31,280 --> 00:17:32,400
sensitive data

442
00:17:32,400 --> 00:17:34,640
with clear text credentials and

443
00:17:34,640 --> 00:17:35,760
everything that could be

444
00:17:35,760 --> 00:17:38,000
fun

445
00:17:40,559 --> 00:17:44,880
going further a couple months back

446
00:17:44,880 --> 00:17:47,840
alex k released a blog post talking

447
00:17:47,840 --> 00:17:50,240
about terraform plan rce

448
00:17:50,240 --> 00:17:53,200
it's a it's a problem that reform has it

449
00:17:53,200 --> 00:17:54,880
for over the years

450
00:17:54,880 --> 00:17:58,559
but it wasn't really talked about

451
00:17:58,559 --> 00:18:02,080
within the terraform communities

452
00:18:02,080 --> 00:18:05,520
and we and this uh this blog post

453
00:18:05,520 --> 00:18:08,799
has uh become a viral

454
00:18:08,799 --> 00:18:11,360
post about how this attack could be done

455
00:18:11,360 --> 00:18:12,480
in

456
00:18:12,480 --> 00:18:15,760
a practical way and they were talking

457
00:18:15,760 --> 00:18:17,200
about

458
00:18:17,200 --> 00:18:21,280
how you can use an a malicious provider

459
00:18:21,280 --> 00:18:24,480
or an external data source uh

460
00:18:24,480 --> 00:18:27,679
that could allows you to get

461
00:18:27,679 --> 00:18:30,400
code execution on the terraform

462
00:18:30,400 --> 00:18:32,160
enterprise or the

463
00:18:32,160 --> 00:18:34,720
the or the instance that is running

464
00:18:34,720 --> 00:18:36,240
terraform

465
00:18:36,240 --> 00:18:39,760
and this can result in

466
00:18:39,760 --> 00:18:41,840
uh the compromise of the entire

467
00:18:41,840 --> 00:18:43,360
infrastructure when someone

468
00:18:43,360 --> 00:18:46,480
submits a pr that is not approved

469
00:18:46,480 --> 00:18:49,520
what you're going to do is if you find

470
00:18:49,520 --> 00:18:51,679
let's say you said you landed on a

471
00:18:51,679 --> 00:18:53,039
developer machine

472
00:18:53,039 --> 00:18:55,679
and this developer machine has i don't

473
00:18:55,679 --> 00:18:57,280
know github token

474
00:18:57,280 --> 00:19:00,480
that allows it to sell to push pr

475
00:19:00,480 --> 00:19:03,679
on the account that is being

476
00:19:03,679 --> 00:19:06,799
in the repository that hosts

477
00:19:06,799 --> 00:19:08,799
the terraform code and this one is

478
00:19:08,799 --> 00:19:10,640
integrated with terraform enterprise

479
00:19:10,640 --> 00:19:11,520
lincoln

480
00:19:11,520 --> 00:19:14,480
and like the normal setup what would

481
00:19:14,480 --> 00:19:15,360
happen here

482
00:19:15,360 --> 00:19:19,120
is if the default if you as a developer

483
00:19:19,120 --> 00:19:22,160
check out the a feature branch and then

484
00:19:22,160 --> 00:19:26,640
push code and with the malicious payload

485
00:19:26,640 --> 00:19:29,840
and all the attack that about that

486
00:19:29,840 --> 00:19:32,559
talks about the malicious provider that

487
00:19:32,559 --> 00:19:33,280
you're going to

488
00:19:33,280 --> 00:19:36,320
talk about then you will get code

489
00:19:36,320 --> 00:19:37,039
execution

490
00:19:37,039 --> 00:19:38,880
on that server you would get shell

491
00:19:38,880 --> 00:19:40,240
access

492
00:19:40,240 --> 00:19:42,799
and this is really simple and of course

493
00:19:42,799 --> 00:19:44,320
it's not really intended

494
00:19:44,320 --> 00:19:46,640
and this should never happen in real

495
00:19:46,640 --> 00:19:47,760
life

496
00:19:47,760 --> 00:19:50,799
but it has been a fight

497
00:19:50,799 --> 00:19:53,360
between usability and security here it's

498
00:19:53,360 --> 00:19:53,840
hard

499
00:19:53,840 --> 00:19:55,919
to find a way to secure it at the same

500
00:19:55,919 --> 00:19:57,440
time it's hard to not

501
00:19:57,440 --> 00:20:00,559
allow uh something like external data

502
00:20:00,559 --> 00:20:02,640
sources to be used

503
00:20:02,640 --> 00:20:06,559
uh chris for alex k for having this book

504
00:20:06,559 --> 00:20:10,640
blog post written and shared to us

505
00:20:10,640 --> 00:20:13,600
and this is an example of an actual uh

506
00:20:13,600 --> 00:20:16,000
proof of concept

507
00:20:16,000 --> 00:20:18,159
you if you'd like to test it out and you

508
00:20:18,159 --> 00:20:20,000
are authorized to test it

509
00:20:20,000 --> 00:20:22,720
go in copy the code that i have here on

510
00:20:22,720 --> 00:20:24,000
my screen

511
00:20:24,000 --> 00:20:26,880
of course the slides would be with would

512
00:20:26,880 --> 00:20:28,559
be public on my website

513
00:20:28,559 --> 00:20:31,760
and my blog and just

514
00:20:31,760 --> 00:20:34,559
use this code and then push it in as a

515
00:20:34,559 --> 00:20:35,679
feature branch

516
00:20:35,679 --> 00:20:38,960
on and get the repository

517
00:20:38,960 --> 00:20:41,200
that is uh responsible for hosting the

518
00:20:41,200 --> 00:20:42,799
terraform code

519
00:20:42,799 --> 00:20:45,440
and then see the magic happens you would

520
00:20:45,440 --> 00:20:46,240
get

521
00:20:46,240 --> 00:20:50,960
access on that machine

522
00:20:51,600 --> 00:20:54,000
of course this is a big problem here but

523
00:20:54,000 --> 00:20:54,880
the thing is

524
00:20:54,880 --> 00:20:58,320
uh the other uh platforms

525
00:20:58,320 --> 00:21:00,080
are also vulnerable it's not only a

526
00:21:00,080 --> 00:21:02,320
problem for terraform enterprise

527
00:21:02,320 --> 00:21:04,400
anything that realized on terraform

528
00:21:04,400 --> 00:21:08,080
built would be vulnerable to this

529
00:21:08,080 --> 00:21:11,200
uh eric ostermann in 2018 tried to

530
00:21:11,200 --> 00:21:12,240
introduce a fix

531
00:21:12,240 --> 00:21:15,120
and it was rejected the fix was to use

532
00:21:15,120 --> 00:21:16,320
uh to

533
00:21:16,320 --> 00:21:19,679
to restrict users from uh

534
00:21:19,679 --> 00:21:22,240
querying guitar from them or within

535
00:21:22,240 --> 00:21:23,280
atlantis

536
00:21:23,280 --> 00:21:25,760
to only to only a subset that is being

537
00:21:25,760 --> 00:21:26,799
specified

538
00:21:26,799 --> 00:21:29,440
and this would grant security here and

539
00:21:29,440 --> 00:21:31,200
could be a temporary fix

540
00:21:31,200 --> 00:21:33,440
but it does not really resolve the

541
00:21:33,440 --> 00:21:35,919
actual problem from terraform

542
00:21:35,919 --> 00:21:39,280
ideally you should not really be able to

543
00:21:39,280 --> 00:21:42,840
run code on terraform enterprises

544
00:21:42,840 --> 00:21:46,000
uh enterprise instance and get full

545
00:21:46,000 --> 00:21:46,960
access to there

546
00:21:46,960 --> 00:21:50,880
or get access into the the machine or

547
00:21:50,880 --> 00:21:53,600
the instance that is running atlantis

548
00:21:53,600 --> 00:21:55,360
the student or even the developer

549
00:21:55,360 --> 00:21:55,919
machine

550
00:21:55,919 --> 00:21:59,200
that runs terraform plan this is not

551
00:21:59,200 --> 00:22:02,480
the thing the right thing

552
00:22:11,360 --> 00:22:14,400
all right moving ahead

553
00:22:14,400 --> 00:22:17,120
we talked about the attack that uh you

554
00:22:17,120 --> 00:22:17,520
can

555
00:22:17,520 --> 00:22:21,039
upload you can upload

556
00:22:21,039 --> 00:22:24,960
an external data source like this one

557
00:22:24,960 --> 00:22:28,320
to jain access there but wouldn't it be

558
00:22:28,320 --> 00:22:28,720
fun

559
00:22:28,720 --> 00:22:32,000
if we can do this in a way that

560
00:22:32,000 --> 00:22:35,200
is not really detected from the

561
00:22:35,200 --> 00:22:38,880
pr let's talk about

562
00:22:38,880 --> 00:22:41,919
the evil provider attack

563
00:22:41,919 --> 00:22:45,200
publishing providers within turf within

564
00:22:45,200 --> 00:22:46,320
hashicorps

565
00:22:46,320 --> 00:22:48,799
terraform is automated this is made to

566
00:22:48,799 --> 00:22:49,600
encourage

567
00:22:49,600 --> 00:22:54,080
publishers to push code to terraform

568
00:22:54,080 --> 00:22:57,919
uh but the thing is trust but verify

569
00:22:57,919 --> 00:23:00,799
we cannot really just push code and have

570
00:23:00,799 --> 00:23:01,120
it

571
00:23:01,120 --> 00:23:04,240
being uh trusted

572
00:23:04,240 --> 00:23:06,880
uh to be used by the community and by

573
00:23:06,880 --> 00:23:07,600
terraform

574
00:23:07,600 --> 00:23:09,919
without really verifying its content or

575
00:23:09,919 --> 00:23:11,679
even having

576
00:23:11,679 --> 00:23:14,799
a way to detect attacks here so let's

577
00:23:14,799 --> 00:23:17,039
say let's say for example

578
00:23:17,039 --> 00:23:19,520
that one of these providers or one of

579
00:23:19,520 --> 00:23:21,600
these 1000 providers

580
00:23:21,600 --> 00:23:23,440
that are being used by people it's not

581
00:23:23,440 --> 00:23:24,880
only these six or

582
00:23:24,880 --> 00:23:27,600
eight providers are have been

583
00:23:27,600 --> 00:23:28,960
compromised and

584
00:23:28,960 --> 00:23:30,880
they have been back there and we're

585
00:23:30,880 --> 00:23:32,960
going to talk about how

586
00:23:32,960 --> 00:23:36,000
and if this happens and someone

587
00:23:36,000 --> 00:23:37,760
just say perform in it and third from

588
00:23:37,760 --> 00:23:40,400
plan what would happen is the attacker

589
00:23:40,400 --> 00:23:42,000
would be compromising the company it

590
00:23:42,000 --> 00:23:43,200
would be

591
00:23:43,200 --> 00:23:45,600
chaos

592
00:23:48,080 --> 00:23:50,960
but you know i don't want to have this

593
00:23:50,960 --> 00:23:51,760
being

594
00:23:51,760 --> 00:23:54,400
as a theoretical attack that does not

595
00:23:54,400 --> 00:23:56,159
really happen in real world

596
00:23:56,159 --> 00:24:00,640
and someone is discussing it in public

597
00:24:00,640 --> 00:24:02,640
i would like to show an actual proof of

598
00:24:02,640 --> 00:24:04,720
concept about this attack

599
00:24:04,720 --> 00:24:09,200
from zero to the end so let's start

600
00:24:09,200 --> 00:24:14,799
first let's try to set up a provider

601
00:24:14,799 --> 00:24:18,240
i set up a new github account i called

602
00:24:18,240 --> 00:24:19,440
it event reform

603
00:24:19,440 --> 00:24:22,000
of course i didn't want to use my uh my

604
00:24:22,000 --> 00:24:22,720
personal

605
00:24:22,720 --> 00:24:25,039
github account because i know it may get

606
00:24:25,039 --> 00:24:26,480
suspended

607
00:24:26,480 --> 00:24:27,760
we're going to talk about this one in a

608
00:24:27,760 --> 00:24:30,000
bit

609
00:24:30,320 --> 00:24:33,360
and then i developed

610
00:24:33,360 --> 00:24:36,640
a sample provider and this provider

611
00:24:36,640 --> 00:24:38,559
was pushed into event terraform such

612
00:24:38,559 --> 00:24:40,400
different provider e

613
00:24:40,400 --> 00:24:43,440
of course this is my picture anyone can

614
00:24:43,440 --> 00:24:43,760
know

615
00:24:43,760 --> 00:24:48,158
that this the code that i have

616
00:24:48,400 --> 00:24:51,840
and then i backdoored this provider with

617
00:24:51,840 --> 00:24:55,520
this code this is a simple therefore

618
00:24:55,520 --> 00:24:58,559
this is a simple

619
00:24:59,200 --> 00:25:02,559
provider that would grant me uh

620
00:25:02,559 --> 00:25:05,279
reverse reverses official upon the

621
00:25:05,279 --> 00:25:06,720
execution

622
00:25:06,720 --> 00:25:12,159
to my server and then i pushed it to

623
00:25:12,159 --> 00:25:14,799
the terraform registry and it was

624
00:25:14,799 --> 00:25:16,480
accepted

625
00:25:16,480 --> 00:25:20,240
it was approved i had my category as

626
00:25:20,240 --> 00:25:22,559
cloud automations because it automates

627
00:25:22,559 --> 00:25:23,279
my

628
00:25:23,279 --> 00:25:26,320
hacking here and i was showing a bit

629
00:25:26,320 --> 00:25:28,640
what happened

630
00:25:28,640 --> 00:25:31,760
once i had the provide they're being

631
00:25:31,760 --> 00:25:33,200
approved by terraform

632
00:25:33,200 --> 00:25:37,279
i i i made a pr to push it

633
00:25:37,279 --> 00:25:40,640
to somewhere and

634
00:25:40,640 --> 00:25:43,120
it looked like this it's just this is

635
00:25:43,120 --> 00:25:45,120
the same way that we would be pushing

636
00:25:45,120 --> 00:25:46,640
providers

637
00:25:46,640 --> 00:25:50,559
in uh our companies

638
00:25:50,559 --> 00:25:54,159
and now the fun part is the demo

639
00:25:54,159 --> 00:25:57,360
popping uh she'll enter from cloud

640
00:25:57,360 --> 00:26:00,240
hosted by terraform that's right hosted

641
00:26:00,240 --> 00:26:00,640
by

642
00:26:00,640 --> 00:26:03,279
hashicorp

643
00:26:08,400 --> 00:26:25,840
this is app to telephone that i owe

644
00:27:12,720 --> 00:27:17,919
right and you would wonder from here

645
00:27:17,919 --> 00:27:21,039
is how is it detection here probably in

646
00:27:21,039 --> 00:27:22,159
a

647
00:27:22,159 --> 00:27:25,120
a for in a well organized uh environment

648
00:27:25,120 --> 00:27:26,000
that is running

649
00:27:26,000 --> 00:27:28,640
a good edr solution or antivirus

650
00:27:28,640 --> 00:27:29,600
solution

651
00:27:29,600 --> 00:27:31,279
this attack would be prevented or

652
00:27:31,279 --> 00:27:32,640
detected

653
00:27:32,640 --> 00:27:35,760
but it wasn't the case i i put

654
00:27:35,760 --> 00:27:39,360
i pushed the provider that i uh built

655
00:27:39,360 --> 00:27:42,559
into virustotal and

656
00:27:42,559 --> 00:27:49,600
no provider really detected that

657
00:27:49,600 --> 00:27:52,000
and back to the attack that we showed

658
00:27:52,000 --> 00:27:54,320
here

659
00:27:54,880 --> 00:27:57,600
pushing the provider that grants me a

660
00:27:57,600 --> 00:28:00,159
recipient

661
00:28:00,159 --> 00:28:03,120
got executed uh correctly within

662
00:28:03,120 --> 00:28:04,480
hashicorp

663
00:28:04,480 --> 00:28:06,880
infrastructure which is really bad uh

664
00:28:06,880 --> 00:28:08,159
imagine

665
00:28:08,159 --> 00:28:10,080
what could happen afterward i haven't

666
00:28:10,080 --> 00:28:11,760
really exploited this

667
00:28:11,760 --> 00:28:15,200
further i only stopped at this part

668
00:28:15,200 --> 00:28:17,039
and i tried my best to make it as

669
00:28:17,039 --> 00:28:18,399
obvious

670
00:28:18,399 --> 00:28:21,520
to the security team to see how the team

671
00:28:21,520 --> 00:28:23,360
response would be like

672
00:28:23,360 --> 00:28:26,559
and before i uh i

673
00:28:26,559 --> 00:28:29,679
i continue here i wanna say that

674
00:28:29,679 --> 00:28:32,240
this attack is against the terms of use

675
00:28:32,240 --> 00:28:33,520
by hashicorp

676
00:28:33,520 --> 00:28:35,760
running this in an account my resulting

677
00:28:35,760 --> 00:28:38,640
accounts expression

678
00:28:38,799 --> 00:28:40,720
so how was the security team response

679
00:28:40,720 --> 00:28:42,960
within hours of my exploitation

680
00:28:42,960 --> 00:28:45,919
they detected the evil provider attack

681
00:28:45,919 --> 00:28:46,240
and

682
00:28:46,240 --> 00:28:48,399
contact me directly to chat about my

683
00:28:48,399 --> 00:28:49,919
findings

684
00:28:49,919 --> 00:28:52,159
and then we discussed various ideas and

685
00:28:52,159 --> 00:28:53,760
thoughts to introduce a fix

686
00:28:53,760 --> 00:28:56,080
from for the thing that was presented

687
00:28:56,080 --> 00:28:57,520
here

688
00:28:57,520 --> 00:29:01,039
and uh hashicorp uh

689
00:29:01,039 --> 00:29:02,320
informed me that they are really

690
00:29:02,320 --> 00:29:04,799
thinking about ways into having this

691
00:29:04,799 --> 00:29:08,240
uh being mitigated in their uh for their

692
00:29:08,240 --> 00:29:09,679
customers

693
00:29:09,679 --> 00:29:12,559
for the time being there is no patch

694
00:29:12,559 --> 00:29:13,679
there is no fix

695
00:29:13,679 --> 00:29:16,559
to introduce and there is no way to

696
00:29:16,559 --> 00:29:19,279
prevent this

697
00:29:19,360 --> 00:29:22,159
i appreciate the hashicorp's efforts in

698
00:29:22,159 --> 00:29:23,840
handling and analyzing the

699
00:29:23,840 --> 00:29:27,360
research one thing to add is i was

700
00:29:27,360 --> 00:29:28,480
planning to

701
00:29:28,480 --> 00:29:32,000
to to make the responsible disclosure

702
00:29:32,000 --> 00:29:32,799
the next day

703
00:29:32,799 --> 00:29:36,080
of my tests and before even

704
00:29:36,080 --> 00:29:38,399
going to the next day they were the ones

705
00:29:38,399 --> 00:29:40,159
who were contacting me and i really

706
00:29:40,159 --> 00:29:41,200
appreciate

707
00:29:41,200 --> 00:29:44,640
them being this proactive

708
00:29:47,360 --> 00:29:49,440
uh one thing to add here is they are

709
00:29:49,440 --> 00:29:51,520
also thinking about

710
00:29:51,520 --> 00:29:54,559
starting their bug bounty program at

711
00:29:54,559 --> 00:29:55,919
the current time they don't have a

712
00:29:55,919 --> 00:29:57,760
quantity program but this is one thing

713
00:29:57,760 --> 00:29:59,120
that they also

714
00:29:59,120 --> 00:30:02,158
are planning to have

715
00:30:02,720 --> 00:30:06,559
now going to the recommendations first

716
00:30:06,559 --> 00:30:09,760
be careful there is

717
00:30:09,760 --> 00:30:12,000
like you would have hard times in

718
00:30:12,000 --> 00:30:14,799
maintaining a security from environment

719
00:30:14,799 --> 00:30:16,960
so being careful is my main

720
00:30:16,960 --> 00:30:19,440
recommendation here

721
00:30:19,440 --> 00:30:23,760
another thing is

722
00:30:23,760 --> 00:30:27,520
i don't know why is it like this

723
00:30:32,880 --> 00:30:37,120
okay uh another thing is when

724
00:30:37,120 --> 00:30:39,679
when using sv as a remote back-end try

725
00:30:39,679 --> 00:30:40,240
to have

726
00:30:40,240 --> 00:30:43,440
a bucket access policy to prevent other

727
00:30:43,440 --> 00:30:44,320
users

728
00:30:44,320 --> 00:30:47,120
other than their from instance to have

729
00:30:47,120 --> 00:30:48,159
access to your

730
00:30:48,159 --> 00:30:52,000
instance this way you can prevent that

731
00:30:52,000 --> 00:30:55,919
prevent like unauthorized access

732
00:30:55,919 --> 00:30:58,399
in certain ways of course there is a

733
00:30:58,399 --> 00:30:59,120
bypass

734
00:30:59,120 --> 00:31:02,399
there are bypasses for this uh solution

735
00:31:02,399 --> 00:31:05,600
where if you have another user that have

736
00:31:05,600 --> 00:31:08,799
access to modify the

737
00:31:08,799 --> 00:31:11,840
the bucket access policy for this bucket

738
00:31:11,840 --> 00:31:14,000
then they can delete the access pocket

739
00:31:14,000 --> 00:31:15,760
policy and then they can access the

740
00:31:15,760 --> 00:31:16,960
bucket here

741
00:31:16,960 --> 00:31:20,240
but at least if you can use

742
00:31:20,240 --> 00:31:22,799
this as a as a protection this would be

743
00:31:22,799 --> 00:31:25,200
a good way

744
00:31:25,200 --> 00:31:27,440
another thing is to continually update

745
00:31:27,440 --> 00:31:29,840
and review your terraform instance

746
00:31:29,840 --> 00:31:32,320
it can be easily forgotten in the noise

747
00:31:32,320 --> 00:31:32,880
and if

748
00:31:32,880 --> 00:31:36,720
there is an attacker or an actor that

749
00:31:36,720 --> 00:31:39,600
lands on your terraform instance as uh

750
00:31:39,600 --> 00:31:40,880
like mentioned earlier

751
00:31:40,880 --> 00:31:42,480
this is a great place for attack

752
00:31:42,480 --> 00:31:44,320
persistence so

753
00:31:44,320 --> 00:31:48,159
it can be easily abused badly here

754
00:31:48,159 --> 00:31:50,960
and then it can be easily for defenders

755
00:31:50,960 --> 00:31:51,360
to

756
00:31:51,360 --> 00:31:55,439
forget about it so yeah

757
00:31:56,480 --> 00:31:58,720
another thing is be careful in

758
00:31:58,720 --> 00:32:00,559
permitting people to have right access

759
00:32:00,559 --> 00:32:01,519
even feature

760
00:32:01,519 --> 00:32:03,840
like feature brand taxes for your uh

761
00:32:03,840 --> 00:32:05,519
terraform repository

762
00:32:05,519 --> 00:32:07,600
because it can lead to direct code

763
00:32:07,600 --> 00:32:08,799
execution uh

764
00:32:08,799 --> 00:32:12,480
and there is no way to pass it i'm

765
00:32:12,480 --> 00:32:15,440
waiting for the past to happen we uh

766
00:32:15,440 --> 00:32:16,320
hashicorp

767
00:32:16,320 --> 00:32:18,960
and i were talking about the way

768
00:32:18,960 --> 00:32:21,760
different ways to detect the attack

769
00:32:21,760 --> 00:32:26,080
meanwhile the actual uh patch is there

770
00:32:26,080 --> 00:32:28,799
but it's just ways to detect it there is

771
00:32:28,799 --> 00:32:32,158
no way to prevent it at the moment

772
00:32:32,559 --> 00:32:35,279
another thing is to maintain it from

773
00:32:35,279 --> 00:32:35,840
instance

774
00:32:35,840 --> 00:32:39,120
in an isolated vpc that no one really

775
00:32:39,120 --> 00:32:41,519
actually said on the internet do not be

776
00:32:41,519 --> 00:32:44,000
exposed to the internet this is bad

777
00:32:44,000 --> 00:32:46,000
the next day zero day that would happen

778
00:32:46,000 --> 00:32:47,440
someone would scan the internet and

779
00:32:47,440 --> 00:32:48,960
probably compromise your organization

780
00:32:48,960 --> 00:32:50,640
because of this mistake

781
00:32:50,640 --> 00:32:53,519
and it would be bad

782
00:32:54,080 --> 00:32:57,360
and i think this would be lastly state

783
00:32:57,360 --> 00:32:58,960
files are sensitive

784
00:32:58,960 --> 00:33:01,600
like they contain a lot of data from

785
00:33:01,600 --> 00:33:03,039
database passwords

786
00:33:03,039 --> 00:33:07,360
to ssl keys uh sorry ssl certificates

787
00:33:07,360 --> 00:33:12,399
access keys read them as sensitive data

788
00:33:12,640 --> 00:33:16,159
and of course a good idea is to set up

789
00:33:16,159 --> 00:33:19,279
ci check to detect the rogue terraform

790
00:33:19,279 --> 00:33:20,399
providers

791
00:33:20,399 --> 00:33:23,200
that this would aid in the exploitation

792
00:33:23,200 --> 00:33:24,000
discovery whenever

793
00:33:24,000 --> 00:33:26,720
someone is trying to exploit your uh

794
00:33:26,720 --> 00:33:29,360
telephone setup

795
00:33:29,360 --> 00:33:31,679
this is one thing to add as a defensive

796
00:33:31,679 --> 00:33:33,679
measure

797
00:33:33,679 --> 00:33:37,440
one thing that has a corp security team

798
00:33:37,440 --> 00:33:38,399
uh

799
00:33:38,399 --> 00:33:40,960
asked me to add is the terraform cloud

800
00:33:40,960 --> 00:33:43,279
security model

801
00:33:43,279 --> 00:33:45,519
this is a document that talks about

802
00:33:45,519 --> 00:33:46,559
different ways

803
00:33:46,559 --> 00:33:49,840
that that you can use for threat

804
00:33:49,840 --> 00:33:50,799
modeling your

805
00:33:50,799 --> 00:33:52,960
terraform class security while at the

806
00:33:52,960 --> 00:33:54,320
same time it

807
00:33:54,320 --> 00:33:56,240
it can apply for your term from

808
00:33:56,240 --> 00:33:59,679
enterprise setup

809
00:34:00,559 --> 00:34:02,480
and now we are reaching to the end of

810
00:34:02,480 --> 00:34:04,880
the talk

811
00:34:04,880 --> 00:34:07,519
final thoughts terraform is amazing i

812
00:34:07,519 --> 00:34:09,119
love your phone

813
00:34:09,119 --> 00:34:11,119
it brings several security features when

814
00:34:11,119 --> 00:34:12,560
implementing

815
00:34:12,560 --> 00:34:15,839
iec with terraform but still with great

816
00:34:15,839 --> 00:34:16,320
power

817
00:34:16,320 --> 00:34:19,199
comes great responsibility protect your

818
00:34:19,199 --> 00:34:21,839
terraform environment

819
00:34:22,879 --> 00:34:25,679
stay safe and set up persistent monitor

820
00:34:25,679 --> 00:34:26,159
like

821
00:34:26,159 --> 00:34:28,399
full hunt to discover shadow ide missed

822
00:34:28,399 --> 00:34:29,440
configurations

823
00:34:29,440 --> 00:34:32,239
and mistakenly exposed services of

824
00:34:32,239 --> 00:34:34,079
course it would not really work out

825
00:34:34,079 --> 00:34:35,839
for all of the other home attacks we

826
00:34:35,839 --> 00:34:37,359
talked here

827
00:34:37,359 --> 00:34:42,159
uh but yeah just one thing to add here

828
00:34:42,800 --> 00:34:46,639
and lastly the questions

829
00:34:46,639 --> 00:34:49,839
thank you very much

