1
00:00:01,839 --> 00:00:04,080
hello everyone and welcome to my talk

2
00:00:04,080 --> 00:00:05,600
with this pretty long title

3
00:00:05,600 --> 00:00:07,839
my name is alexey and here are just a

4
00:00:07,839 --> 00:00:09,519
few things to introduce myself

5
00:00:09,519 --> 00:00:12,400
i'm an ex-software developer who is now

6
00:00:12,400 --> 00:00:13,920
a full-time application security

7
00:00:13,920 --> 00:00:15,120
engineer

8
00:00:15,120 --> 00:00:17,760
and these acronyms but for what it's

9
00:00:17,760 --> 00:00:19,680
worth i don't consider myself to be a

10
00:00:19,680 --> 00:00:21,039
hardware hacker and today i'm going to

11
00:00:21,039 --> 00:00:22,400
talk to you about hacking

12
00:00:22,400 --> 00:00:25,359
devices so let's dive in a common

13
00:00:25,359 --> 00:00:26,000
perception

14
00:00:26,000 --> 00:00:28,160
is that application security and

15
00:00:28,160 --> 00:00:29,359
internet of things

16
00:00:29,359 --> 00:00:31,840
are two separate domains but is this

17
00:00:31,840 --> 00:00:33,600
really the case

18
00:00:33,600 --> 00:00:35,680
consider these two examples on the left

19
00:00:35,680 --> 00:00:36,960
hand side i

20
00:00:36,960 --> 00:00:39,680
have a classic web application displayed

21
00:00:39,680 --> 00:00:40,480
in the browser

22
00:00:40,480 --> 00:00:43,120
and on the right hand side i am looking

23
00:00:43,120 --> 00:00:44,079
at web ui

24
00:00:44,079 --> 00:00:47,120
from my home router but from the user's

25
00:00:47,120 --> 00:00:48,079
perspective

26
00:00:48,079 --> 00:00:50,640
these two are actually the same there's

27
00:00:50,640 --> 00:00:52,480
some code that runs in the browser

28
00:00:52,480 --> 00:00:54,480
and there's some code that runs on the

29
00:00:54,480 --> 00:00:55,520
server side

30
00:00:55,520 --> 00:00:59,199
and who cares where the server is

31
00:00:59,199 --> 00:01:02,000
in terms of requirements in order to run

32
00:01:02,000 --> 00:01:03,840
an application or a device

33
00:01:03,840 --> 00:01:07,280
we need a processor and memory we need

34
00:01:07,280 --> 00:01:09,200
some network so we can send and receive

35
00:01:09,200 --> 00:01:10,479
data

36
00:01:10,479 --> 00:01:13,439
we need our operating system and

37
00:01:13,439 --> 00:01:16,000
commonly these days devices run linux

38
00:01:16,000 --> 00:01:17,920
just like many other servers in the

39
00:01:17,920 --> 00:01:19,520
cloud

40
00:01:19,520 --> 00:01:22,000
we might need some services that will

41
00:01:22,000 --> 00:01:24,640
help us do whatever we need to do

42
00:01:24,640 --> 00:01:26,640
and libraries that we can build upon and

43
00:01:26,640 --> 00:01:28,640
programming language that we can use

44
00:01:28,640 --> 00:01:31,119
to write custom software and software

45
00:01:31,119 --> 00:01:32,000
developers

46
00:01:32,000 --> 00:01:34,000
who use programming language and

47
00:01:34,000 --> 00:01:36,000
libraries to create

48
00:01:36,000 --> 00:01:38,400
great things that will run and do

49
00:01:38,400 --> 00:01:39,040
whatever

50
00:01:39,040 --> 00:01:42,000
we need them to do in terms of security

51
00:01:42,000 --> 00:01:42,720
many of us

52
00:01:42,720 --> 00:01:45,759
are familiar with a wasp top 10 which is

53
00:01:45,759 --> 00:01:48,479
the list of the top 10 security risks in

54
00:01:48,479 --> 00:01:50,320
the web applications

55
00:01:50,320 --> 00:01:52,159
and also a couple years ago was

56
00:01:52,159 --> 00:01:54,320
published at iit top 10 and although

57
00:01:54,320 --> 00:01:56,719
these two lists are not exactly the same

58
00:01:56,719 --> 00:01:58,719
there is some correlation like broken

59
00:01:58,719 --> 00:02:01,360
authentication and hard-coded passwords

60
00:02:01,360 --> 00:02:04,159
and components with outdated components

61
00:02:04,159 --> 00:02:05,840
with no vulnerabilities

62
00:02:05,840 --> 00:02:08,000
and data exposure because of insecure

63
00:02:08,000 --> 00:02:09,520
data transfer

64
00:02:09,520 --> 00:02:13,360
and some insecure defaults and so on

65
00:02:13,360 --> 00:02:16,080
but i'd like to focus on just couple of

66
00:02:16,080 --> 00:02:17,520
things on the right side

67
00:02:17,520 --> 00:02:20,959
hand side the number two in iot top 10

68
00:02:20,959 --> 00:02:23,599
refers to software that runs on the

69
00:02:23,599 --> 00:02:24,720
device itself

70
00:02:24,720 --> 00:02:26,560
and number three refers to the software

71
00:02:26,560 --> 00:02:28,319
that runs elsewhere but it's part of the

72
00:02:28,319 --> 00:02:30,239
ecosystem so so the device could

73
00:02:30,239 --> 00:02:31,040
function and do

74
00:02:31,040 --> 00:02:34,640
useful things and as software these two

75
00:02:34,640 --> 00:02:36,160
things can have any

76
00:02:36,160 --> 00:02:39,760
of these awas top 10 issues and more

77
00:02:39,760 --> 00:02:43,040
so in reality in my opinion a proper

78
00:02:43,040 --> 00:02:44,560
diagram should look like this

79
00:02:44,560 --> 00:02:46,800
and i know some of my absec friends and

80
00:02:46,800 --> 00:02:47,680
colleagues

81
00:02:47,680 --> 00:02:50,080
are not going to like it but i think

82
00:02:50,080 --> 00:02:50,720
this is

83
00:02:50,720 --> 00:02:52,480
the case at least from the attacker's

84
00:02:52,480 --> 00:02:54,239
perspective

85
00:02:54,239 --> 00:02:56,480
one can attack a device either through

86
00:02:56,480 --> 00:02:58,000
an application that runs on it

87
00:02:58,000 --> 00:03:01,519
or through some other vectors

88
00:03:01,760 --> 00:03:04,480
okay who remembers march 2020 of course

89
00:03:04,480 --> 00:03:05,360
we all do

90
00:03:05,360 --> 00:03:07,760
that's when many businesses all over the

91
00:03:07,760 --> 00:03:08,400
world started

92
00:03:08,400 --> 00:03:09,599
closing their doors because of the

93
00:03:09,599 --> 00:03:11,760
global pandemic and many

94
00:03:11,760 --> 00:03:14,640
organizations and companies had to make

95
00:03:14,640 --> 00:03:16,000
very quick changes

96
00:03:16,000 --> 00:03:18,159
to go online and some of these

97
00:03:18,159 --> 00:03:20,000
organizations decided to try this new

98
00:03:20,000 --> 00:03:21,040
thing for them

99
00:03:21,040 --> 00:03:24,319
that was live streaming so

100
00:03:24,319 --> 00:03:27,120
they could broadcast whatever they

101
00:03:27,120 --> 00:03:28,480
needed to broadcast

102
00:03:28,480 --> 00:03:31,599
and stay connected with their users

103
00:03:31,599 --> 00:03:34,640
and i volunteered to help one non-profit

104
00:03:34,640 --> 00:03:36,000
organization

105
00:03:36,000 --> 00:03:39,519
set up live streaming but

106
00:03:39,519 --> 00:03:42,080
first of all let's discuss what live

107
00:03:42,080 --> 00:03:44,000
streaming is in a nutshell

108
00:03:44,000 --> 00:03:47,040
basically you have your video stream and

109
00:03:47,040 --> 00:03:47,920
audio stream

110
00:03:47,920 --> 00:03:50,159
in some digital form and what many

111
00:03:50,159 --> 00:03:52,080
people do is they build a general

112
00:03:52,080 --> 00:03:53,519
purpose computer with

113
00:03:53,519 --> 00:03:55,439
certain software on it very popular one

114
00:03:55,439 --> 00:03:57,599
is obs studio

115
00:03:57,599 --> 00:04:00,159
and this software just converts you know

116
00:04:00,159 --> 00:04:02,560
those streams to proper format

117
00:04:02,560 --> 00:04:06,000
um like h.264 and sends

118
00:04:06,000 --> 00:04:09,760
that stream to one of many of these

119
00:04:09,760 --> 00:04:13,040
services in the cloud

120
00:04:13,040 --> 00:04:16,000
so that's what i initially built but the

121
00:04:16,000 --> 00:04:17,918
people at that nonprofit organization

122
00:04:17,918 --> 00:04:19,759
are not very technically savvy

123
00:04:19,759 --> 00:04:21,839
and this computer was kind of a weak

124
00:04:21,839 --> 00:04:23,120
spot you know

125
00:04:23,120 --> 00:04:24,880
it requires requires maintenance it

126
00:04:24,880 --> 00:04:27,280
requires somebody to operate it

127
00:04:27,280 --> 00:04:30,479
and so on so i asked myself a question

128
00:04:30,479 --> 00:04:32,240
is it possible to replace this computer

129
00:04:32,240 --> 00:04:34,240
with something else that maintenance

130
00:04:34,240 --> 00:04:34,720
free

131
00:04:34,720 --> 00:04:36,560
and the answer is yes i did some

132
00:04:36,560 --> 00:04:38,320
research and i found

133
00:04:38,320 --> 00:04:41,759
that there are these hardware hdmi

134
00:04:41,759 --> 00:04:44,960
encoders that are not very expensive

135
00:04:44,960 --> 00:04:47,680
and i went ahead and bought one and came

136
00:04:47,680 --> 00:04:50,320
in it had hdmi port audio port

137
00:04:50,320 --> 00:04:53,600
and lan connectivity and it had this

138
00:04:53,600 --> 00:04:57,280
nice web interface where i could set up

139
00:04:57,280 --> 00:04:59,199
different video settings and also

140
00:04:59,199 --> 00:05:02,080
specify this url

141
00:05:02,080 --> 00:05:05,039
for the youtube ingest server that i

142
00:05:05,039 --> 00:05:06,720
wanted to stream to

143
00:05:06,720 --> 00:05:08,840
and everything worked beautifully like a

144
00:05:08,840 --> 00:05:10,479
charm

145
00:05:10,479 --> 00:05:12,880
and this was uh actually the final setup

146
00:05:12,880 --> 00:05:14,800
that i built here's my audio mixer and

147
00:05:14,800 --> 00:05:16,240
bunch of cables

148
00:05:16,240 --> 00:05:19,360
and this little box here with the red

149
00:05:19,360 --> 00:05:19,840
light

150
00:05:19,840 --> 00:05:23,840
is that is that video encoder

151
00:05:23,840 --> 00:05:26,800
and it worked great like i said and

152
00:05:26,800 --> 00:05:28,160
everybody was happy and that's the end

153
00:05:28,160 --> 00:05:28,560
of

154
00:05:28,560 --> 00:05:31,360
this presentation no not really i

155
00:05:31,360 --> 00:05:32,720
quickly realized that

156
00:05:32,720 --> 00:05:34,479
i was missing some settings in the

157
00:05:34,479 --> 00:05:36,080
device and

158
00:05:36,080 --> 00:05:38,720
in particular my camera that i was using

159
00:05:38,720 --> 00:05:39,360
did not

160
00:05:39,360 --> 00:05:41,360
had a very did not have a very good

161
00:05:41,360 --> 00:05:43,440
automatic color balance

162
00:05:43,440 --> 00:05:46,479
so i was wondering if it's possible to

163
00:05:46,479 --> 00:05:48,960
modify balance on the device and i

164
00:05:48,960 --> 00:05:50,639
looked in the advanced settings and

165
00:05:50,639 --> 00:05:52,560
although there was a lot of them

166
00:05:52,560 --> 00:05:56,479
and nothing documented i couldn't find

167
00:05:56,479 --> 00:05:59,280
the color balance settings so i thought

168
00:05:59,280 --> 00:06:00,000
okay maybe

169
00:06:00,000 --> 00:06:01,280
this device has some hidden

170
00:06:01,280 --> 00:06:03,199
functionality that is not exposed

171
00:06:03,199 --> 00:06:06,720
through the ui um now let me

172
00:06:06,720 --> 00:06:10,240
look inside so i opened the

173
00:06:10,240 --> 00:06:13,039
box and i looked at this circuit board

174
00:06:13,039 --> 00:06:13,919
and

175
00:06:13,919 --> 00:06:17,600
it didn't say anywhere plug here for

176
00:06:17,600 --> 00:06:20,400
a free shell so i just closed it again

177
00:06:20,400 --> 00:06:22,160
i'm not a hardware hacker i don't know

178
00:06:22,160 --> 00:06:24,880
what to do with this generally speaking

179
00:06:24,880 --> 00:06:26,800
so i decided to approach this as

180
00:06:26,800 --> 00:06:30,160
a software server so i quickly ran and

181
00:06:30,160 --> 00:06:33,199
the port scan and it found you know http

182
00:06:33,199 --> 00:06:35,600
server rtsp and rtmp are the video

183
00:06:35,600 --> 00:06:37,680
streaming services that you can use from

184
00:06:37,680 --> 00:06:38,720
the device itself

185
00:06:38,720 --> 00:06:41,759
it also had open telnet port

186
00:06:41,759 --> 00:06:44,960
um i tried a few obvious passwords like

187
00:06:44,960 --> 00:06:46,400
root root admin admin

188
00:06:46,400 --> 00:06:49,840
and none of them worked all right

189
00:06:49,840 --> 00:06:53,360
i also you know explored that web ui a

190
00:06:53,360 --> 00:06:55,840
little more and there was a

191
00:06:55,840 --> 00:06:58,720
a section for firmware upgrade and not

192
00:06:58,720 --> 00:07:00,639
only it had firmware upgrade it also had

193
00:07:00,639 --> 00:07:02,720
firmware backup and when i pushed on

194
00:07:02,720 --> 00:07:03,360
this button

195
00:07:03,360 --> 00:07:06,720
it sent me this rar file which is an

196
00:07:06,720 --> 00:07:10,000
archive and i placed it on my disk

197
00:07:10,000 --> 00:07:12,800
and i unpacked it and extracted a bunch

198
00:07:12,800 --> 00:07:13,599
of files

199
00:07:13,599 --> 00:07:17,680
this raw archive was made on windows 32

200
00:07:17,680 --> 00:07:20,720
doesn't matter and here's the here's the

201
00:07:20,720 --> 00:07:21,520
content

202
00:07:21,520 --> 00:07:23,680
it had some configuration files some

203
00:07:23,680 --> 00:07:25,840
libraries nginx server

204
00:07:25,840 --> 00:07:28,880
the web directory had a bunch of

205
00:07:28,880 --> 00:07:31,199
static files like html and css and

206
00:07:31,199 --> 00:07:32,240
javascript

207
00:07:32,240 --> 00:07:35,599
it had some common utilities

208
00:07:35,599 --> 00:07:38,560
it also had password file but the

209
00:07:38,560 --> 00:07:39,520
largest file

210
00:07:39,520 --> 00:07:42,960
in this firmware is this one box.v400

211
00:07:42,960 --> 00:07:45,039
underscore hdmi

212
00:07:45,039 --> 00:07:48,080
and this file happens to be and

213
00:07:48,080 --> 00:07:50,720
a compiled executable and i thought well

214
00:07:50,720 --> 00:07:51,199
um

215
00:07:51,199 --> 00:07:53,360
if nothing else matches that this is

216
00:07:53,360 --> 00:07:54,400
probably the one

217
00:07:54,400 --> 00:07:55,919
that actually runs on the device and

218
00:07:55,919 --> 00:07:57,919
controls everything

219
00:07:57,919 --> 00:07:59,840
and i was right but first i need to get

220
00:07:59,840 --> 00:08:02,479
on shell to get a shell

221
00:08:02,479 --> 00:08:04,560
so the question is how do i get there so

222
00:08:04,560 --> 00:08:06,160
i looked at this password file that was

223
00:08:06,160 --> 00:08:07,520
in the firmware backup

224
00:08:07,520 --> 00:08:10,879
and it had a one-way hash

225
00:08:10,879 --> 00:08:14,800
and i tried to crack it i i used some

226
00:08:14,800 --> 00:08:17,440
simple password lists but i couldn't

227
00:08:17,440 --> 00:08:19,120
find a match quickly

228
00:08:19,120 --> 00:08:21,120
and i thought well that's not actually a

229
00:08:21,120 --> 00:08:22,720
problem because what i can do

230
00:08:22,720 --> 00:08:24,639
is i can replace this password file with

231
00:08:24,639 --> 00:08:26,160
my own password file

232
00:08:26,160 --> 00:08:29,199
and upload the new firmware and have

233
00:08:29,199 --> 00:08:31,520
my own password to log into the device

234
00:08:31,520 --> 00:08:33,039
and that's exactly what i did i used

235
00:08:33,039 --> 00:08:34,559
openssl pro

236
00:08:34,559 --> 00:08:37,039
utility to generate hash for password

237
00:08:37,039 --> 00:08:38,320
root

238
00:08:38,320 --> 00:08:41,839
i used windows rar utility to

239
00:08:41,839 --> 00:08:45,360
repackage the firmware i uploaded it to

240
00:08:45,360 --> 00:08:46,160
the device

241
00:08:46,160 --> 00:08:49,360
rebooted it and beautiful thing i

242
00:08:49,360 --> 00:08:52,399
am in on the device as

243
00:08:52,399 --> 00:08:55,920
root by the way great now that i'm on

244
00:08:55,920 --> 00:08:57,760
the device as a super user i can do a

245
00:08:57,760 --> 00:08:58,959
lot of recon

246
00:08:58,959 --> 00:09:01,200
so i looked at like for example what

247
00:09:01,200 --> 00:09:02,560
linux version it runs

248
00:09:02,560 --> 00:09:05,360
and it runs the linux from high silicon

249
00:09:05,360 --> 00:09:07,519
high silicon happens to be a subsidiary

250
00:09:07,519 --> 00:09:10,399
of huawei that specialize on video

251
00:09:10,399 --> 00:09:12,320
surveillance devices and system and

252
00:09:12,320 --> 00:09:12,959
chips

253
00:09:12,959 --> 00:09:15,040
like ip cameras and different kinds of

254
00:09:15,040 --> 00:09:17,600
like video processing equipment

255
00:09:17,600 --> 00:09:19,519
and they have their own linux

256
00:09:19,519 --> 00:09:21,680
distribution i also looked at open ports

257
00:09:21,680 --> 00:09:23,440
nor surprises here the same ports that i

258
00:09:23,440 --> 00:09:24,560
saw with nmap

259
00:09:24,560 --> 00:09:26,800
but most of these ports are owned by

260
00:09:26,800 --> 00:09:28,800
this box executable which confirms that

261
00:09:28,800 --> 00:09:29,120
this

262
00:09:29,120 --> 00:09:31,440
is actually the workhorse that kind of

263
00:09:31,440 --> 00:09:33,120
does everything

264
00:09:33,120 --> 00:09:36,000
i also looked at the processes and i

265
00:09:36,000 --> 00:09:37,760
quickly reverse engineered the boot

266
00:09:37,760 --> 00:09:38,959
sequence

267
00:09:38,959 --> 00:09:41,440
that started couple of scripts and then

268
00:09:41,440 --> 00:09:42,959
at the very end this last step it

269
00:09:42,959 --> 00:09:43,839
started this

270
00:09:43,839 --> 00:09:46,720
box executable so i wanted to have like

271
00:09:46,720 --> 00:09:47,920
a

272
00:09:47,920 --> 00:09:49,920
like a clean device when i log in

273
00:09:49,920 --> 00:09:51,519
without this application

274
00:09:51,519 --> 00:09:54,399
running so i modified the boot so this

275
00:09:54,399 --> 00:09:56,320
application doesn't run so i could run

276
00:09:56,320 --> 00:09:58,480
it myself and play with it and let me

277
00:09:58,480 --> 00:10:00,160
show you how it looks

278
00:10:00,160 --> 00:10:03,200
so here is the um oh by the way i need

279
00:10:03,200 --> 00:10:04,000
to connect it first

280
00:10:04,000 --> 00:10:06,880
so here's one of these devices that i

281
00:10:06,880 --> 00:10:08,800
acquired it's not the original one

282
00:10:08,800 --> 00:10:12,079
um i had several of these and here is

283
00:10:12,079 --> 00:10:14,160
the inside pretty pretty neat

284
00:10:14,160 --> 00:10:16,480
but i don't really need it i just need

285
00:10:16,480 --> 00:10:18,399
to connect ethernet port

286
00:10:18,399 --> 00:10:20,880
ethernet cable sorry and give it some

287
00:10:20,880 --> 00:10:21,760
power

288
00:10:21,760 --> 00:10:24,240
lights up it's going to take a few

289
00:10:24,240 --> 00:10:25,600
seconds to boot i'm going to put it

290
00:10:25,600 --> 00:10:27,120
aside because we don't need to touch it

291
00:10:27,120 --> 00:10:28,480
anymore

292
00:10:28,480 --> 00:10:33,839
um and let me try to tell that

293
00:10:36,160 --> 00:10:39,440
okay it booted

294
00:10:39,440 --> 00:10:43,600
i'm in now i go to tmp directory where

295
00:10:43,600 --> 00:10:47,760
this box executable lives after

296
00:10:47,760 --> 00:10:50,560
after the boot so not only can i start

297
00:10:50,560 --> 00:10:52,240
this application

298
00:10:52,240 --> 00:10:55,360
on the console it also prints a lot of

299
00:10:55,360 --> 00:10:57,680
useful information on the console for

300
00:10:57,680 --> 00:10:59,200
which is very helpful for

301
00:10:59,200 --> 00:11:01,360
for debugging okay what else do we need

302
00:11:01,360 --> 00:11:03,120
okay let me go to the browser

303
00:11:03,120 --> 00:11:07,600
and go to this encoder

304
00:11:07,600 --> 00:11:10,320
of course i need to provide my

305
00:11:10,320 --> 00:11:12,000
credentials

306
00:11:12,000 --> 00:11:15,279
and i'm in and i see that it spit out a

307
00:11:15,279 --> 00:11:16,240
lot of

308
00:11:16,240 --> 00:11:19,440
information in the console

309
00:11:19,440 --> 00:11:22,720
here is the web interface um cool

310
00:11:22,720 --> 00:11:25,440
what else do i need i would like to see

311
00:11:25,440 --> 00:11:27,519
all the requests and responses

312
00:11:27,519 --> 00:11:29,920
going between back and forth between the

313
00:11:29,920 --> 00:11:31,360
browser and the device

314
00:11:31,360 --> 00:11:35,040
and so i'm used to burp suite

315
00:11:35,040 --> 00:11:37,279
this is a tool to intercept http

316
00:11:37,279 --> 00:11:38,640
requests

317
00:11:38,640 --> 00:11:40,800
so that's what i used here and here is

318
00:11:40,800 --> 00:11:42,160
one of such requests

319
00:11:42,160 --> 00:11:45,440
to get the the root page

320
00:11:45,440 --> 00:11:47,360
which just returns some html but you can

321
00:11:47,360 --> 00:11:48,480
see that it's using

322
00:11:48,480 --> 00:11:51,440
a certain authentication scheme which is

323
00:11:51,440 --> 00:11:53,760
called digest authentication

324
00:11:53,760 --> 00:11:57,360
uh keep that in mind and

325
00:11:57,360 --> 00:12:01,760
yeah i can also run curl against it

326
00:12:02,800 --> 00:12:04,720
but curl did not return anything so let

327
00:12:04,720 --> 00:12:07,680
me look at the headers that i returned

328
00:12:07,680 --> 00:12:09,680
and it actually says unauthorized of

329
00:12:09,680 --> 00:12:11,440
course because i did not provide my

330
00:12:11,440 --> 00:12:13,519
credentials for the current command

331
00:12:13,519 --> 00:12:17,600
so we'll do it later now

332
00:12:17,600 --> 00:12:21,040
let me go back to the slides

333
00:12:21,200 --> 00:12:22,880
okay now that i have console i'm on the

334
00:12:22,880 --> 00:12:25,760
device i also want to take a look at

335
00:12:25,760 --> 00:12:26,079
this

336
00:12:26,079 --> 00:12:28,240
executable and it's binary and binary is

337
00:12:28,240 --> 00:12:30,000
not very easy to work with

338
00:12:30,000 --> 00:12:32,399
so we need to reverse engineer it and

339
00:12:32,399 --> 00:12:33,360
this tool

340
00:12:33,360 --> 00:12:36,240
came out was released by nsa a couple

341
00:12:36,240 --> 00:12:36,959
years ago

342
00:12:36,959 --> 00:12:39,120
and i wanted to give it a try since then

343
00:12:39,120 --> 00:12:40,399
and i thought this was a perfect

344
00:12:40,399 --> 00:12:41,760
opportunity for that

345
00:12:41,760 --> 00:12:46,079
so i got this tool called kidra

346
00:12:46,320 --> 00:12:50,160
i ran it i gave it that executable file

347
00:12:50,160 --> 00:12:52,079
it analyzed it and it showed me

348
00:12:52,079 --> 00:12:54,639
disassembly and on the right hand side

349
00:12:54,639 --> 00:12:55,680
it shows you

350
00:12:55,680 --> 00:12:58,959
the decompile which is basically

351
00:12:58,959 --> 00:13:02,880
some c code and um

352
00:13:02,880 --> 00:13:04,880
it's it's a lot easier to read than

353
00:13:04,880 --> 00:13:06,079
assembly

354
00:13:06,079 --> 00:13:08,320
so you can make a lot more sense out of

355
00:13:08,320 --> 00:13:10,000
it

356
00:13:10,000 --> 00:13:12,320
okay

357
00:13:13,839 --> 00:13:16,079
and by this time i was no longer

358
00:13:16,079 --> 00:13:16,880
interested in

359
00:13:16,880 --> 00:13:19,519
modifying settings on the device some

360
00:13:19,519 --> 00:13:21,360
voice inside me told me that i should

361
00:13:21,360 --> 00:13:23,200
look for vulnerabilities and i have no

362
00:13:23,200 --> 00:13:24,720
idea how i got there

363
00:13:24,720 --> 00:13:26,720
but yeah i started looking for those

364
00:13:26,720 --> 00:13:28,480
vulnerabilities and the first issue i

365
00:13:28,480 --> 00:13:28,959
found

366
00:13:28,959 --> 00:13:31,760
was a backdoor in the application i

367
00:13:31,760 --> 00:13:32,639
decided to

368
00:13:32,639 --> 00:13:34,480
start attacking it through

369
00:13:34,480 --> 00:13:35,760
authentication function

370
00:13:35,760 --> 00:13:38,720
since i knew that the authentication was

371
00:13:38,720 --> 00:13:40,320
using

372
00:13:40,320 --> 00:13:43,040
admin for the username and you could not

373
00:13:43,040 --> 00:13:45,360
change it it must have been hard coded

374
00:13:45,360 --> 00:13:48,000
and it was not in any configuration file

375
00:13:48,000 --> 00:13:49,120
so i

376
00:13:49,120 --> 00:13:51,199
did a string search in gibra and i found

377
00:13:51,199 --> 00:13:52,959
exactly one occurrence of string

378
00:13:52,959 --> 00:13:56,399
admin and it's referenced in several

379
00:13:56,399 --> 00:13:58,079
in a couple of functions and one of them

380
00:13:58,079 --> 00:14:00,399
is here and it does look

381
00:14:00,399 --> 00:14:03,199
like the authentication so we compare a

382
00:14:03,199 --> 00:14:04,240
parameter against

383
00:14:04,240 --> 00:14:06,399
admin and then we compare the second

384
00:14:06,399 --> 00:14:08,399
parameter against

385
00:14:08,399 --> 00:14:11,199
a string and this string looks really

386
00:14:11,199 --> 00:14:12,079
strange

387
00:14:12,079 --> 00:14:14,639
what is this and it immediately looked

388
00:14:14,639 --> 00:14:16,240
at me

389
00:14:16,240 --> 00:14:19,680
as and said hey i'm the back door

390
00:14:19,680 --> 00:14:23,839
so first of all let me rename this

391
00:14:23,839 --> 00:14:26,320
function to box authenticate that's what

392
00:14:26,320 --> 00:14:26,959
gitra

393
00:14:26,959 --> 00:14:28,880
lets you do by the way it's very useful

394
00:14:28,880 --> 00:14:30,560
you can refactor on the fly

395
00:14:30,560 --> 00:14:33,839
so um we first compare uh the password

396
00:14:33,839 --> 00:14:34,399
to new

397
00:14:34,399 --> 00:14:36,399
new orange and bunch of eights and then

398
00:14:36,399 --> 00:14:37,920
if if there's no mag if it

399
00:14:37,920 --> 00:14:40,560
if there's a match we succeed and return

400
00:14:40,560 --> 00:14:40,959
if

401
00:14:40,959 --> 00:14:44,000
no if not then we compare it to the real

402
00:14:44,000 --> 00:14:47,279
password um to confirm my assumptions i

403
00:14:47,279 --> 00:14:49,040
entered this password in the browser and

404
00:14:49,040 --> 00:14:50,880
it didn't work

405
00:14:50,880 --> 00:14:53,839
and i thought okay that's interesting it

406
00:14:53,839 --> 00:14:56,079
should work right here

407
00:14:56,079 --> 00:14:58,880
i also noticed when i was looking at the

408
00:14:58,880 --> 00:15:00,079
admin string

409
00:15:00,079 --> 00:15:02,800
in the data section there was another

410
00:15:02,800 --> 00:15:04,480
string called basic

411
00:15:04,480 --> 00:15:06,000
and i thought maybe this application

412
00:15:06,000 --> 00:15:08,480
also supports basic authentication

413
00:15:08,480 --> 00:15:12,320
um and my assumption was right i did

414
00:15:12,320 --> 00:15:15,680
a little bit more investigation and

415
00:15:15,680 --> 00:15:20,239
i was able to use basic authentication

416
00:15:20,639 --> 00:15:24,320
like with this curl command great so now

417
00:15:24,320 --> 00:15:27,279
what if i try this password with basic

418
00:15:27,279 --> 00:15:28,800
authentication

419
00:15:28,800 --> 00:15:32,000
and it worked cool so it's definitely

420
00:15:32,000 --> 00:15:32,639
backdoor

421
00:15:32,639 --> 00:15:35,040
now i just got some html but it's not

422
00:15:35,040 --> 00:15:36,800
very helpful

423
00:15:36,800 --> 00:15:40,079
another function that i could launch

424
00:15:40,079 --> 00:15:43,120
is called get sys getsys returns a bunch

425
00:15:43,120 --> 00:15:44,000
of

426
00:15:44,000 --> 00:15:46,560
system parameters including the plain

427
00:15:46,560 --> 00:15:47,600
text

428
00:15:47,600 --> 00:15:49,360
password and you can just take this

429
00:15:49,360 --> 00:15:51,279
password and use it in the browser

430
00:15:51,279 --> 00:15:55,839
and get into the device as administrator

431
00:15:58,880 --> 00:16:02,480
so that's a big issue another big issue

432
00:16:02,480 --> 00:16:05,360
is on some devices the same password new

433
00:16:05,360 --> 00:16:06,720
orange and much of aids

434
00:16:06,720 --> 00:16:09,759
can be used to telnet into the device

435
00:16:09,759 --> 00:16:11,600
on other devices it's a different

436
00:16:11,600 --> 00:16:13,040
password or rather

437
00:16:13,040 --> 00:16:16,000
a couple others which are also pretty

438
00:16:16,000 --> 00:16:16,959
trivial

439
00:16:16,959 --> 00:16:19,759
so that's another kind of like a back

440
00:16:19,759 --> 00:16:22,959
door into the device

441
00:16:22,959 --> 00:16:24,639
the next serious issue that i found was

442
00:16:24,639 --> 00:16:26,480
path traversal that could be used to get

443
00:16:26,480 --> 00:16:28,639
any file from the system

444
00:16:28,639 --> 00:16:30,560
let's take a look at where this box

445
00:16:30,560 --> 00:16:31,920
authenticator is called from and it's

446
00:16:31,920 --> 00:16:32,720
called from

447
00:16:32,720 --> 00:16:35,199
this particular function that i renamed

448
00:16:35,199 --> 00:16:37,600
to process request because i realized

449
00:16:37,600 --> 00:16:39,360
that it was actually processing all the

450
00:16:39,360 --> 00:16:41,040
http requests

451
00:16:41,040 --> 00:16:44,720
and in this function we see this huge

452
00:16:44,720 --> 00:16:48,160
if statement that mentions these

453
00:16:48,160 --> 00:16:50,560
file extensions basically it compares

454
00:16:50,560 --> 00:16:51,360
the string

455
00:16:51,360 --> 00:16:53,920
against um it searches for these

456
00:16:53,920 --> 00:16:55,519
extensions in the string

457
00:16:55,519 --> 00:16:59,120
so it it does file matching um

458
00:16:59,120 --> 00:17:00,639
and if you follow the logic you'll

459
00:17:00,639 --> 00:17:02,240
realize that if

460
00:17:02,240 --> 00:17:04,400
if if a file matches one of these

461
00:17:04,400 --> 00:17:05,280
extensions

462
00:17:05,280 --> 00:17:06,959
then it would be served without

463
00:17:06,959 --> 00:17:10,640
authentication so let's give it a try

464
00:17:10,640 --> 00:17:13,119
i'm gonna go back to burp suite and pick

465
00:17:13,119 --> 00:17:14,319
a file

466
00:17:14,319 --> 00:17:19,359
send it to repeater

467
00:17:19,359 --> 00:17:21,679
and first of all let me remove all the

468
00:17:21,679 --> 00:17:24,240
unnecessary headers

469
00:17:24,240 --> 00:17:27,199
just to make it look cleaner and it

470
00:17:27,199 --> 00:17:28,960
still has the authorization header

471
00:17:28,960 --> 00:17:30,880
so it's authenticated now let me remove

472
00:17:30,880 --> 00:17:32,480
the authorization header

473
00:17:32,480 --> 00:17:35,520
and resend it and it still works great

474
00:17:35,520 --> 00:17:38,559
but it's a static file there's nothing

475
00:17:38,559 --> 00:17:39,440
really wrong with that

476
00:17:39,440 --> 00:17:41,919
it's not a secret uh of information of

477
00:17:41,919 --> 00:17:42,640
any kind

478
00:17:42,640 --> 00:17:44,720
but in on the console when it reported

479
00:17:44,720 --> 00:17:46,799
the file name i also noticed this double

480
00:17:46,799 --> 00:17:47,919
slashes

481
00:17:47,919 --> 00:17:50,880
which suggested that the developer was

482
00:17:50,880 --> 00:17:52,400
using some kind of a sloppy string

483
00:17:52,400 --> 00:17:54,400
concatenation so i decided to play with

484
00:17:54,400 --> 00:17:56,000
this a little bit

485
00:17:56,000 --> 00:17:58,559
like removing the slash and the slash

486
00:17:58,559 --> 00:17:59,679
disappeared from here

487
00:17:59,679 --> 00:18:02,720
so it looks like the this input is just

488
00:18:02,720 --> 00:18:04,000
concatenated

489
00:18:04,000 --> 00:18:07,600
with tmp slash web or whatever

490
00:18:07,600 --> 00:18:11,840
which means we can do things like

491
00:18:11,919 --> 00:18:14,080
traversing so we can build a relative

492
00:18:14,080 --> 00:18:16,080
path that would return us the same

493
00:18:16,080 --> 00:18:19,280
result so we can go all the way back to

494
00:18:19,280 --> 00:18:22,880
tmp slash tmp

495
00:18:22,880 --> 00:18:26,320
slash web yeah now can i get something

496
00:18:26,320 --> 00:18:30,159
more interesting like the password file

497
00:18:30,960 --> 00:18:34,320
no i cannot i get 401 unauthorized and

498
00:18:34,320 --> 00:18:35,600
that's because

499
00:18:35,600 --> 00:18:37,440
password file does not match one of

500
00:18:37,440 --> 00:18:40,000
these extensions okay

501
00:18:40,000 --> 00:18:42,640
let's take another look here and notice

502
00:18:42,640 --> 00:18:43,120
that

503
00:18:43,120 --> 00:18:46,080
they use the method find and method find

504
00:18:46,080 --> 00:18:48,000
of the basic string

505
00:18:48,000 --> 00:18:50,240
is looking for a substring anywhere in

506
00:18:50,240 --> 00:18:52,000
the string not just at the end

507
00:18:52,000 --> 00:18:53,440
so they're basically using the wrong

508
00:18:53,440 --> 00:18:55,520
method which

509
00:18:55,520 --> 00:18:58,960
means that if there is a one of these

510
00:18:58,960 --> 00:19:02,240
substrings anywhere on the path

511
00:19:02,240 --> 00:19:06,320
like say here it would match

512
00:19:06,320 --> 00:19:09,600
so let me try this and instead of

513
00:19:09,600 --> 00:19:11,280
unauthorized we get not found

514
00:19:11,280 --> 00:19:14,320
because such file does not exist

515
00:19:14,320 --> 00:19:18,240
well if only i had a directory with one

516
00:19:18,240 --> 00:19:20,160
of these patterns in its name

517
00:19:20,160 --> 00:19:21,919
then i could traverse from the directory

518
00:19:21,919 --> 00:19:24,320
anywhere and get any file and

519
00:19:24,320 --> 00:19:26,880
apparently on devices from one of these

520
00:19:26,880 --> 00:19:27,679
vendors

521
00:19:27,679 --> 00:19:30,080
there is such a directory so let me open

522
00:19:30,080 --> 00:19:31,760
another

523
00:19:31,760 --> 00:19:34,799
telnet session and look for

524
00:19:34,799 --> 00:19:38,880
search for directory

525
00:19:38,880 --> 00:19:42,559
with jpeg

526
00:19:42,559 --> 00:19:46,160
and its name and here is such a

527
00:19:46,160 --> 00:19:48,640
directory

528
00:19:49,200 --> 00:19:51,520
and this is the only one that matches

529
00:19:51,520 --> 00:19:52,320
now

530
00:19:52,320 --> 00:19:55,360
using this i

531
00:19:55,360 --> 00:19:59,120
can build a relative path

532
00:19:59,120 --> 00:20:03,039
all the way back to the root and

533
00:20:03,600 --> 00:20:06,640
descend down to any other file and now

534
00:20:06,640 --> 00:20:08,240
if i take this

535
00:20:08,240 --> 00:20:11,919
to my http request i should be able to

536
00:20:11,919 --> 00:20:15,440
get any file from the system

537
00:20:19,679 --> 00:20:21,679
and it totally worked i could get the

538
00:20:21,679 --> 00:20:23,440
password file from the

539
00:20:23,440 --> 00:20:25,679
uh from the system unauthenticated yeah

540
00:20:25,679 --> 00:20:27,280
but it's not the most interesting file

541
00:20:27,280 --> 00:20:27,679
on

542
00:20:27,679 --> 00:20:30,400
this box the more interesting one is

543
00:20:30,400 --> 00:20:31,679
called box.ini

544
00:20:31,679 --> 00:20:35,200
which among other things contains

545
00:20:35,200 --> 00:20:37,840
plain text administrative password which

546
00:20:37,840 --> 00:20:38,640
you could use

547
00:20:38,640 --> 00:20:41,840
and and then for for the

548
00:20:41,840 --> 00:20:46,639
admin access on that device

549
00:20:47,919 --> 00:20:49,919
let's continue playing with this device

550
00:20:49,919 --> 00:20:51,039
or rather with this

551
00:20:51,039 --> 00:20:53,200
application the next issue i identified

552
00:20:53,200 --> 00:20:55,120
was unauthenticated file upload

553
00:20:55,120 --> 00:20:59,678
that would lead to remote code execution

554
00:20:59,760 --> 00:21:03,360
going back to gitra i decided to

555
00:21:03,360 --> 00:21:06,320
just review the entire function that's

556
00:21:06,320 --> 00:21:07,919
processing request to see if there's

557
00:21:07,919 --> 00:21:09,360
anything else interesting

558
00:21:09,360 --> 00:21:10,960
and right off the bat at the very top of

559
00:21:10,960 --> 00:21:13,200
the function i saw this compare

560
00:21:13,200 --> 00:21:16,559
against multi-part form data and again

561
00:21:16,559 --> 00:21:18,240
if you follow the logic here we would

562
00:21:18,240 --> 00:21:19,840
see that if there is a match

563
00:21:19,840 --> 00:21:23,520
then the the the function would be

564
00:21:23,520 --> 00:21:24,720
called that would process

565
00:21:24,720 --> 00:21:27,840
multi-part data and just return http

566
00:21:27,840 --> 00:21:28,840
okay

567
00:21:28,840 --> 00:21:31,600
so yeah that looks like another

568
00:21:31,600 --> 00:21:34,480
unauthenticated process

569
00:21:34,480 --> 00:21:38,320
so i'm going to rename or refactor

570
00:21:38,320 --> 00:21:40,799
this function to box multipart for

571
00:21:40,799 --> 00:21:43,200
convenience

572
00:21:43,200 --> 00:21:46,240
um cool now

573
00:21:46,240 --> 00:21:49,840
where is form data used let me go back

574
00:21:49,840 --> 00:21:51,440
to my burp history

575
00:21:51,440 --> 00:21:53,919
and

576
00:21:55,360 --> 00:21:59,120
search for multipart

577
00:21:59,120 --> 00:22:00,799
there is a couple of post requests here

578
00:22:00,799 --> 00:22:02,320
and the first one of them

579
00:22:02,320 --> 00:22:05,520
is a logo upload here that's what i

580
00:22:05,520 --> 00:22:06,880
tried

581
00:22:06,880 --> 00:22:08,880
on the device what happens is on this

582
00:22:08,880 --> 00:22:11,600
device you can upload a logo

583
00:22:11,600 --> 00:22:14,159
that would be overlaid on top of your

584
00:22:14,159 --> 00:22:16,080
video stream

585
00:22:16,080 --> 00:22:18,559
it could be like maybe your company logo

586
00:22:18,559 --> 00:22:20,000
right

587
00:22:20,000 --> 00:22:26,159
let me let me try it real quick

588
00:22:26,159 --> 00:22:28,880
upload successful and here is a message

589
00:22:28,880 --> 00:22:29,919
and

590
00:22:29,919 --> 00:22:32,960
on the console cool

591
00:22:32,960 --> 00:22:34,720
now my suspicion is that this is

592
00:22:34,720 --> 00:22:36,559
unauthenticated so i'm going to send it

593
00:22:36,559 --> 00:22:40,559
to repeater again

594
00:22:40,559 --> 00:22:45,520
uh and remove the authorization header

595
00:22:45,760 --> 00:22:49,039
and press send and let's return http

596
00:22:49,039 --> 00:22:52,840
20 200 okay okay well this is really

597
00:22:52,840 --> 00:22:54,080
unauthenticated

598
00:22:54,080 --> 00:22:57,280
um well cool you can upload logo and

599
00:22:57,280 --> 00:22:59,200
do some harm but what else can you

600
00:22:59,200 --> 00:23:01,600
upload and the other thing that you can

601
00:23:01,600 --> 00:23:02,240
upload

602
00:23:02,240 --> 00:23:05,039
is actually a firmware update believe it

603
00:23:05,039 --> 00:23:05,919
or not

604
00:23:05,919 --> 00:23:10,000
so the app.bin or updatrar is can also

605
00:23:10,000 --> 00:23:12,159
be sent completely unauthenticated

606
00:23:12,159 --> 00:23:14,400
so that's a pretty serious issue you can

607
00:23:14,400 --> 00:23:16,480
basically create your malicious firmware

608
00:23:16,480 --> 00:23:17,200
push it on

609
00:23:17,200 --> 00:23:20,559
device without any credentials and have

610
00:23:20,559 --> 00:23:21,280
it run it

611
00:23:21,280 --> 00:23:23,840
now the problem is in order for this

612
00:23:23,840 --> 00:23:25,360
firmware to

613
00:23:25,360 --> 00:23:28,640
uh to run somebody needs to reboot the

614
00:23:28,640 --> 00:23:30,559
device

615
00:23:30,559 --> 00:23:33,200
and uh well like administrator pushing

616
00:23:33,200 --> 00:23:34,320
that button in the web

617
00:23:34,320 --> 00:23:36,720
web ui and that's not what something the

618
00:23:36,720 --> 00:23:38,480
attacker would want attacker would want

619
00:23:38,480 --> 00:23:40,720
to execute the code right away

620
00:23:40,720 --> 00:23:44,000
let's take a look and see what else can

621
00:23:44,000 --> 00:23:45,039
be uploaded

622
00:23:45,039 --> 00:23:47,840
maybe there is more i see in on the

623
00:23:47,840 --> 00:23:49,279
console this message

624
00:23:49,279 --> 00:23:51,279
with file name column and i'm going to

625
00:23:51,279 --> 00:23:52,400
go to my

626
00:23:52,400 --> 00:23:56,080
favorite string search in gydra

627
00:23:56,080 --> 00:23:58,720
and search for the string and it does

628
00:23:58,720 --> 00:23:59,520
find

629
00:23:59,520 --> 00:24:02,400
an occurrence of it and it's referenced

630
00:24:02,400 --> 00:24:05,840
in this function

631
00:24:06,000 --> 00:24:09,360
i'm going to call this function

632
00:24:10,720 --> 00:24:13,600
box upload

633
00:24:14,400 --> 00:24:15,679
because that's the function that

634
00:24:15,679 --> 00:24:18,640
processes file upload as you can see

635
00:24:18,640 --> 00:24:20,880
it's called from box multi-part which

636
00:24:20,880 --> 00:24:22,559
in turn is called from box process

637
00:24:22,559 --> 00:24:25,120
request all authenticated again

638
00:24:25,120 --> 00:24:29,039
now if i when i scroll down

639
00:24:29,039 --> 00:24:31,600
this function kind of looking at what's

640
00:24:31,600 --> 00:24:32,960
interesting here i see

641
00:24:32,960 --> 00:24:35,520
a list of these different compares we

642
00:24:35,520 --> 00:24:36,400
see our

643
00:24:36,400 --> 00:24:39,360
familiar load file bugs.ini and some

644
00:24:39,360 --> 00:24:39,840
others

645
00:24:39,840 --> 00:24:41,600
so this is basically a white list of

646
00:24:41,600 --> 00:24:43,200
allowed file names

647
00:24:43,200 --> 00:24:46,480
that uh one could upload to the device

648
00:24:46,480 --> 00:24:47,360
and one of them

649
00:24:47,360 --> 00:24:50,480
is uk.rar or uk.bin

650
00:24:50,480 --> 00:24:53,840
and it's not the up.rar

651
00:24:53,840 --> 00:24:56,720
not the original firmware upload upgrade

652
00:24:56,720 --> 00:24:58,240
it's something else

653
00:24:58,240 --> 00:25:02,559
so let me see where ukrar appears

654
00:25:02,559 --> 00:25:05,679
in this executable and

655
00:25:05,679 --> 00:25:09,840
it is mentioned in another place

656
00:25:10,400 --> 00:25:14,159
that reads uh as

657
00:25:14,159 --> 00:25:16,559
as soon as the file is uploaded to the

658
00:25:16,559 --> 00:25:17,200
device

659
00:25:17,200 --> 00:25:21,679
it's unpacked and then uk.txt

660
00:25:21,679 --> 00:25:23,600
that's supposedly present in this file

661
00:25:23,600 --> 00:25:25,679
gets executed by

662
00:25:25,679 --> 00:25:28,799
shell so that's your uh in

663
00:25:28,799 --> 00:25:31,360
instant code execution that we actually

664
00:25:31,360 --> 00:25:31,840
need

665
00:25:31,840 --> 00:25:34,240
so in other words we need to build a uk

666
00:25:34,240 --> 00:25:34,880
that rar

667
00:25:34,880 --> 00:25:37,679
with uk.txt inside that has some

668
00:25:37,679 --> 00:25:38,880
malicious code

669
00:25:38,880 --> 00:25:41,039
and that's what we're gonna do right now

670
00:25:41,039 --> 00:25:44,000
so i have this

671
00:25:44,159 --> 00:25:48,559
file uh uk.txt that has a single command

672
00:25:48,559 --> 00:25:51,039
with netcat listener by the way netcat

673
00:25:51,039 --> 00:25:52,400
is present on the device

674
00:25:52,400 --> 00:25:55,200
on the device very convenient for a

675
00:25:55,200 --> 00:25:57,039
hacker

676
00:25:57,039 --> 00:26:00,400
okay and make sure i

677
00:26:00,400 --> 00:26:03,279
use the correct raw command i need to

678
00:26:03,279 --> 00:26:06,240
use the version to downgrade the

679
00:26:06,240 --> 00:26:10,480
archive version okay now i have this

680
00:26:10,480 --> 00:26:13,919
rar file and i'm gonna send it to the

681
00:26:13,919 --> 00:26:15,600
device

682
00:26:15,600 --> 00:26:19,919
using curl so i'm sending a curl command

683
00:26:19,919 --> 00:26:22,080
which is a form with a single parameter

684
00:26:22,080 --> 00:26:24,080
with content of this file

685
00:26:24,080 --> 00:26:28,320
to encoder and executes the file gets

686
00:26:28,320 --> 00:26:29,039
extracted

687
00:26:29,039 --> 00:26:32,640
and ideally technically

688
00:26:32,880 --> 00:26:34,720
i should have the process and i do have

689
00:26:34,720 --> 00:26:37,360
the process that's running on the device

690
00:26:37,360 --> 00:26:39,520
listening for incoming connections and i

691
00:26:39,520 --> 00:26:42,879
can totally connect to it

692
00:26:44,080 --> 00:26:48,240
and i'm a root on the device and i own

693
00:26:48,240 --> 00:26:50,400
it

694
00:26:50,400 --> 00:26:53,679
i can do whatever i want and that's

695
00:26:53,679 --> 00:26:56,080
basically it

696
00:26:56,080 --> 00:26:59,279
for this vulnerability now the device is

697
00:26:59,279 --> 00:27:01,039
going to reboot automatically but that's

698
00:27:01,039 --> 00:27:03,279
okay

699
00:27:04,400 --> 00:27:07,840
going back to my presentation

700
00:27:08,480 --> 00:27:10,640
but this is not all uh another distinct

701
00:27:10,640 --> 00:27:12,640
issue with this file upload is command

702
00:27:12,640 --> 00:27:13,440
injection

703
00:27:13,440 --> 00:27:15,760
let's see what else happens there if we

704
00:27:15,760 --> 00:27:17,279
go back to see

705
00:27:17,279 --> 00:27:19,360
how ukr is processed you'll see that

706
00:27:19,360 --> 00:27:21,039
it's not the only file that gets special

707
00:27:21,039 --> 00:27:21,840
treatment

708
00:27:21,840 --> 00:27:25,039
png files are also processed in a

709
00:27:25,039 --> 00:27:25,760
certain way

710
00:27:25,760 --> 00:27:28,480
we build a command to run this utility

711
00:27:28,480 --> 00:27:30,480
to convert png to bmp

712
00:27:30,480 --> 00:27:32,240
and one of the parameters here just

713
00:27:32,240 --> 00:27:34,240
accepts user input which is the file

714
00:27:34,240 --> 00:27:34,799
name

715
00:27:34,799 --> 00:27:36,880
and this file name comes from the http

716
00:27:36,880 --> 00:27:37,919
request

717
00:27:37,919 --> 00:27:41,600
from here by some trial and error i

718
00:27:41,600 --> 00:27:43,760
found out that this name has to begin

719
00:27:43,760 --> 00:27:46,000
with logo and end with png

720
00:27:46,000 --> 00:27:48,960
but it can have anything in between like

721
00:27:48,960 --> 00:27:50,480
um

722
00:27:50,480 --> 00:27:52,480
i don't know whatever including

723
00:27:52,480 --> 00:27:53,600
semicolons

724
00:27:53,600 --> 00:27:55,600
and if you put a semicolon here it

725
00:27:55,600 --> 00:27:57,120
should become part of the command

726
00:27:57,120 --> 00:28:01,120
that runs and execute it

727
00:28:01,120 --> 00:28:03,200
and you'll see that foo is not found of

728
00:28:03,200 --> 00:28:05,679
course it's not but what is found

729
00:28:05,679 --> 00:28:10,640
on the device as we know is netcat

730
00:28:10,640 --> 00:28:13,679
and we can totally execute it and now

731
00:28:13,679 --> 00:28:16,559
if i look at the processes on the device

732
00:28:16,559 --> 00:28:18,640
i'll see that my netcat listener

733
00:28:18,640 --> 00:28:21,279
is here and alive and this is actually

734
00:28:21,279 --> 00:28:23,840
the full command that got generated with

735
00:28:23,840 --> 00:28:24,159
our

736
00:28:24,159 --> 00:28:27,600
injected input and now again i can

737
00:28:27,600 --> 00:28:31,039
connect to the device using netcat and

738
00:28:31,039 --> 00:28:35,039
do whatever i want

739
00:28:40,960 --> 00:28:42,960
up until now i was not looking for any

740
00:28:42,960 --> 00:28:44,080
specific vulnerability

741
00:28:44,080 --> 00:28:46,799
types i just happened to find some

742
00:28:46,799 --> 00:28:47,840
backdoors and

743
00:28:47,840 --> 00:28:50,320
injections and so on but there is a

744
00:28:50,320 --> 00:28:52,080
certain category that i wanted to

745
00:28:52,080 --> 00:28:53,360
specifically target

746
00:28:53,360 --> 00:28:55,840
in this application with c and c plus

747
00:28:55,840 --> 00:28:57,520
programs if you're not careful it's very

748
00:28:57,520 --> 00:28:58,240
easy

749
00:28:58,240 --> 00:28:59,919
to cause a buffer overflow and i thought

750
00:28:59,919 --> 00:29:02,000
there must be at least one buffer

751
00:29:02,000 --> 00:29:02,799
overflow

752
00:29:02,799 --> 00:29:06,159
in this application and did i find one

753
00:29:06,159 --> 00:29:09,200
well yeah i was looking

754
00:29:09,200 --> 00:29:12,880
for functions like s printf which takes

755
00:29:12,880 --> 00:29:14,880
input and combines it into a string and

756
00:29:14,880 --> 00:29:17,279
puts the result into a buffer

757
00:29:17,279 --> 00:29:18,559
with this kind of functions if you're

758
00:29:18,559 --> 00:29:21,200
not checking all the length it's very

759
00:29:21,200 --> 00:29:22,880
easy to get buffer overflow

760
00:29:22,880 --> 00:29:25,919
and i found several occurrences of these

761
00:29:25,919 --> 00:29:26,960
issues

762
00:29:26,960 --> 00:29:29,039
and this is just one of them there is a

763
00:29:29,039 --> 00:29:30,399
bunch

764
00:29:30,399 --> 00:29:33,200
but in this particular case we are

765
00:29:33,200 --> 00:29:35,440
dealing with

766
00:29:35,440 --> 00:29:38,720
building a response for our tsp rtsp is

767
00:29:38,720 --> 00:29:40,240
a video streaming protocol

768
00:29:40,240 --> 00:29:42,960
so you basically connect can connect

769
00:29:42,960 --> 00:29:45,279
your video player to this device and get

770
00:29:45,279 --> 00:29:48,240
video right off the device it's a

771
00:29:48,240 --> 00:29:50,720
text-based protocol just like http

772
00:29:50,720 --> 00:29:54,080
and it's using a sequence number here

773
00:29:54,080 --> 00:29:56,320
but in this case the device this

774
00:29:56,320 --> 00:29:57,679
application does not really care about

775
00:29:57,679 --> 00:29:59,120
the sequence number it just appends

776
00:29:59,120 --> 00:30:00,799
whatever the user gives

777
00:30:00,799 --> 00:30:03,279
to it and to back to the response and

778
00:30:03,279 --> 00:30:04,960
reflects back to the user

779
00:30:04,960 --> 00:30:07,600
let me show you how it looks since this

780
00:30:07,600 --> 00:30:08,240
is a

781
00:30:08,240 --> 00:30:11,840
text-based protocol i can just telnet

782
00:30:11,840 --> 00:30:16,399
to proper port which happens to be 554.

783
00:30:16,399 --> 00:30:19,120
i had to study this particle a little

784
00:30:19,120 --> 00:30:21,039
bit

785
00:30:21,039 --> 00:30:23,760
to build this proof of concept so this

786
00:30:23,760 --> 00:30:24,960
is just one command

787
00:30:24,960 --> 00:30:28,640
tear down and the sequence number is one

788
00:30:28,640 --> 00:30:30,720
and i just get one but if i give it

789
00:30:30,720 --> 00:30:32,720
anything else including any string

790
00:30:32,720 --> 00:30:37,120
i will get that any string back

791
00:30:37,120 --> 00:30:40,640
because buffer overflow i

792
00:30:40,640 --> 00:30:43,679
built this request tear down command

793
00:30:43,679 --> 00:30:47,120
with c sequence number of

794
00:30:47,120 --> 00:30:49,919
with very long value but before i send

795
00:30:49,919 --> 00:30:51,200
it to the device

796
00:30:51,200 --> 00:30:54,080
i want to do something else when we are

797
00:30:54,080 --> 00:30:54,880
debugging

798
00:30:54,880 --> 00:30:57,679
stuff like buffer overflow it's very

799
00:30:57,679 --> 00:31:00,080
helpful to have a debugger

800
00:31:00,080 --> 00:31:03,600
and the beauty with linux is

801
00:31:03,600 --> 00:31:05,279
you can use all the standard tools

802
00:31:05,279 --> 00:31:07,840
including gdb

803
00:31:07,840 --> 00:31:12,240
so i have uploaded a gdp server to this

804
00:31:12,240 --> 00:31:13,200
device

805
00:31:13,200 --> 00:31:16,640
and i'm going to run it it attached to

806
00:31:16,640 --> 00:31:19,519
this the process of my application and

807
00:31:19,519 --> 00:31:20,760
listening on port

808
00:31:20,760 --> 00:31:24,720
2345 now

809
00:31:25,200 --> 00:31:27,440
in another another window and i have to

810
00:31:27,440 --> 00:31:28,880
copy and paste these commands because

811
00:31:28,880 --> 00:31:30,080
they're pretty long

812
00:31:30,080 --> 00:31:32,240
i'm starting my debugger on local

813
00:31:32,240 --> 00:31:34,640
machine

814
00:31:35,120 --> 00:31:36,720
after i started i need to connect to

815
00:31:36,720 --> 00:31:38,240
that remote server

816
00:31:38,240 --> 00:31:41,360
and i have all the nicely colored

817
00:31:41,360 --> 00:31:42,399
information here

818
00:31:42,399 --> 00:31:44,240
as you might have noticed i am not using

819
00:31:44,240 --> 00:31:46,080
vanilla gdb i'm using jeff

820
00:31:46,080 --> 00:31:48,399
extension and that's a pretty cool thing

821
00:31:48,399 --> 00:31:49,760
to have if you're doing

822
00:31:49,760 --> 00:31:52,799
reverse engineering

823
00:31:53,360 --> 00:31:58,000
it just makes things a lot more easier

824
00:31:58,000 --> 00:32:01,519
cool now i have debugger i can

825
00:32:01,519 --> 00:32:03,840
see what's going on and i'm going to

826
00:32:03,840 --> 00:32:05,120
send that

827
00:32:05,120 --> 00:32:09,039
huge request to the application

828
00:32:09,039 --> 00:32:10,960
and something happened here i got

829
00:32:10,960 --> 00:32:13,200
segmentation violation

830
00:32:13,200 --> 00:32:15,919
and as you can see those a's that were

831
00:32:15,919 --> 00:32:17,600
in the sequence value

832
00:32:17,600 --> 00:32:19,919
are placed all over the place across

833
00:32:19,919 --> 00:32:21,200
multiple registers

834
00:32:21,200 --> 00:32:22,880
so there's it's definitely buffer

835
00:32:22,880 --> 00:32:25,760
overflow that that can cause

836
00:32:25,760 --> 00:32:27,840
the application to malfunction and to go

837
00:32:27,840 --> 00:32:28,880
different route

838
00:32:28,880 --> 00:32:31,919
it definitely causes a crash so the big

839
00:32:31,919 --> 00:32:32,799
question is

840
00:32:32,799 --> 00:32:35,440
can i get code execution with this

841
00:32:35,440 --> 00:32:36,000
because

842
00:32:36,000 --> 00:32:38,559
because with many overflows you can and

843
00:32:38,559 --> 00:32:40,880
i went into a very deep rabbit hole and

844
00:32:40,880 --> 00:32:43,039
after several nights i concluded that it

845
00:32:43,039 --> 00:32:44,640
was not possible in this case mostly

846
00:32:44,640 --> 00:32:46,399
because of aslr

847
00:32:46,399 --> 00:32:48,320
and at the time you get overflow the

848
00:32:48,320 --> 00:32:50,159
application is very unstable and is

849
00:32:50,159 --> 00:32:51,039
likely to just

850
00:32:51,039 --> 00:32:54,159
reboot and or crash and you could not

851
00:32:54,159 --> 00:32:54,559
try

852
00:32:54,559 --> 00:32:57,600
multiple things to get around aslr

853
00:32:57,600 --> 00:33:00,000
but if you combine this with the file

854
00:33:00,000 --> 00:33:01,039
disclosure

855
00:33:01,039 --> 00:33:03,519
you can get your base address to go

856
00:33:03,519 --> 00:33:04,799
around aslr

857
00:33:04,799 --> 00:33:07,360
through file disclosure so that's a

858
00:33:07,360 --> 00:33:08,159
possibility

859
00:33:08,159 --> 00:33:11,120
but even without that the sole purpose

860
00:33:11,120 --> 00:33:12,559
of these devices

861
00:33:12,559 --> 00:33:15,600
is to serve video reliably and if an

862
00:33:15,600 --> 00:33:16,640
attacker can

863
00:33:16,640 --> 00:33:20,000
crash it easily then

864
00:33:20,000 --> 00:33:23,279
then that's a big issue um that's um

865
00:33:23,279 --> 00:33:26,799
that's basically denial of service

866
00:33:27,440 --> 00:33:28,960
in summary we have several

867
00:33:28,960 --> 00:33:31,600
vulnerabilities that i'd like to put in

868
00:33:31,600 --> 00:33:33,120
three categories

869
00:33:33,120 --> 00:33:36,880
red green and yellow the two issues in

870
00:33:36,880 --> 00:33:38,000
the red category

871
00:33:38,000 --> 00:33:41,200
are the intentional vulnerabilities so

872
00:33:41,200 --> 00:33:42,880
somebody actually programmed that back

873
00:33:42,880 --> 00:33:43,840
door on purpose

874
00:33:43,840 --> 00:33:45,600
and somebody decided to leave the telnet

875
00:33:45,600 --> 00:33:47,760
open with a trivial password

876
00:33:47,760 --> 00:33:49,200
this is not good and completely

877
00:33:49,200 --> 00:33:51,760
unacceptable the issues in the green

878
00:33:51,760 --> 00:33:52,960
category

879
00:33:52,960 --> 00:33:54,880
are coding mistakes without any

880
00:33:54,880 --> 00:33:56,399
malicious intent

881
00:33:56,399 --> 00:33:59,440
we all make mistakes and that's okay

882
00:33:59,440 --> 00:34:01,039
we just need to learn and don't repeat

883
00:34:01,039 --> 00:34:02,720
those mistakes again

884
00:34:02,720 --> 00:34:05,519
now this issue with unauthenticated

885
00:34:05,519 --> 00:34:06,000
firmware

886
00:34:06,000 --> 00:34:08,879
upgrade it is possible that it's a bad

887
00:34:08,879 --> 00:34:09,599
coding

888
00:34:09,599 --> 00:34:12,239
but it's also possible that it was there

889
00:34:12,239 --> 00:34:13,119
on purpose

890
00:34:13,119 --> 00:34:15,280
so the vendors could update firmware

891
00:34:15,280 --> 00:34:17,280
without any credentials

892
00:34:17,280 --> 00:34:20,239
i don't really know but these devices

893
00:34:20,239 --> 00:34:22,159
are behind knight and firewall right

894
00:34:22,159 --> 00:34:24,960
well hopefully most of them are but

895
00:34:24,960 --> 00:34:25,599
showdown

896
00:34:25,599 --> 00:34:27,918
finds almost a thousand of such devices

897
00:34:27,918 --> 00:34:29,440
on the open internet

898
00:34:29,440 --> 00:34:31,760
when i did my research initially about a

899
00:34:31,760 --> 00:34:32,639
year ago

900
00:34:32,639 --> 00:34:34,560
showdown found only between three to

901
00:34:34,560 --> 00:34:36,079
four hundred of these

902
00:34:36,079 --> 00:34:38,960
and now the number has tripled it's not

903
00:34:38,960 --> 00:34:39,839
a huge number

904
00:34:39,839 --> 00:34:42,000
but it is significant and many of these

905
00:34:42,000 --> 00:34:43,040
devices could be

906
00:34:43,040 --> 00:34:46,079
still vulnerable i decided to disclose

907
00:34:46,079 --> 00:34:46,879
my findings

908
00:34:46,879 --> 00:34:49,839
to vendors and i got all sorts of

909
00:34:49,839 --> 00:34:51,760
interesting communication with them

910
00:34:51,760 --> 00:34:54,320
from no response to some automated

911
00:34:54,320 --> 00:34:55,440
response

912
00:34:55,440 --> 00:34:58,240
to misunderstanding like somebody

913
00:34:58,240 --> 00:34:59,760
telling me that their devices

914
00:34:59,760 --> 00:35:01,440
are meant to be used by home users and

915
00:35:01,440 --> 00:35:03,839
not security companies

916
00:35:03,839 --> 00:35:06,640
and even some people thought that i was

917
00:35:06,640 --> 00:35:07,920
trying to damage their company's

918
00:35:07,920 --> 00:35:08,720
reputation

919
00:35:08,720 --> 00:35:11,440
and they mentioned legal action against

920
00:35:11,440 --> 00:35:12,000
me

921
00:35:12,000 --> 00:35:14,240
and that's that was not something that i

922
00:35:14,240 --> 00:35:15,599
was interested in

923
00:35:15,599 --> 00:35:19,440
so i was pretty discouraged by this

924
00:35:19,440 --> 00:35:22,560
and i talked to my ex-co-worker who had

925
00:35:22,560 --> 00:35:23,760
some experience with third-party

926
00:35:23,760 --> 00:35:25,119
disclosures and he

927
00:35:25,119 --> 00:35:27,520
suggested that i get in touch with sword

928
00:35:27,520 --> 00:35:29,280
coordination center

929
00:35:29,280 --> 00:35:31,680
at carnegie mellon these guys help you

930
00:35:31,680 --> 00:35:33,200
with third party disclos

931
00:35:33,200 --> 00:35:35,359
with coordinated disclosures they do a

932
00:35:35,359 --> 00:35:37,280
lot of leg work contacting the vendors

933
00:35:37,280 --> 00:35:38,800
following up with them

934
00:35:38,800 --> 00:35:42,000
um building you know publication and

935
00:35:42,000 --> 00:35:43,599
everything so it was great

936
00:35:43,599 --> 00:35:47,040
uh overall i identified 11 vendors

937
00:35:47,040 --> 00:35:48,640
and i confirmed the three of them were

938
00:35:48,640 --> 00:35:50,160
vulnerable i had those devices

939
00:35:50,160 --> 00:35:54,079
and could test them eight others

940
00:35:54,079 --> 00:35:56,480
were likely vulnerable based on the

941
00:35:56,480 --> 00:35:58,320
information i could find online

942
00:35:58,320 --> 00:36:01,200
unfortunately only two vendors responded

943
00:36:01,200 --> 00:36:01,920
to

944
00:36:01,920 --> 00:36:06,079
our initial requests um too sad but okay

945
00:36:06,079 --> 00:36:09,040
meanwhile i i've got six cds assigned

946
00:36:09,040 --> 00:36:10,880
and eventually

947
00:36:10,880 --> 00:36:13,359
this got published couple days later

948
00:36:13,359 --> 00:36:14,079
huawei

949
00:36:14,079 --> 00:36:16,480
issued this statement saying that they

950
00:36:16,480 --> 00:36:17,760
produce sdk

951
00:36:17,760 --> 00:36:21,280
and chips and sdks and all user space

952
00:36:21,280 --> 00:36:22,000
programs

953
00:36:22,000 --> 00:36:26,560
are built by downstream vendors

954
00:36:26,560 --> 00:36:28,640
meanwhile the register picked up the

955
00:36:28,640 --> 00:36:30,320
story and published the article

956
00:36:30,320 --> 00:36:32,160
and couple of weeks later one of the

957
00:36:32,160 --> 00:36:35,520
bigger vendors for these devices opry

958
00:36:35,520 --> 00:36:38,320
published this advisory and they

959
00:36:38,320 --> 00:36:40,400
acknowledged all the issues and told the

960
00:36:40,400 --> 00:36:42,640
said that they're going to fix them and

961
00:36:42,640 --> 00:36:44,240
they also mentioned the name of the

962
00:36:44,240 --> 00:36:46,560
developer for the application new orange

963
00:36:46,560 --> 00:36:48,640
remember what the backdoor password was

964
00:36:48,640 --> 00:36:50,480
right it was new orange and bunch of

965
00:36:50,480 --> 00:36:52,160
ways totally makes sense

966
00:36:52,160 --> 00:36:53,839
i also like how they use the word

967
00:36:53,839 --> 00:36:55,920
maintenance instead of backdoor

968
00:36:55,920 --> 00:36:58,320
of course it's all maintenance fast

969
00:36:58,320 --> 00:37:00,800
forward to july 2021 i went ahead and

970
00:37:00,800 --> 00:37:02,640
ordered a few of these devices

971
00:37:02,640 --> 00:37:04,480
again to see if the issues have been

972
00:37:04,480 --> 00:37:05,680
resolved i got

973
00:37:05,680 --> 00:37:07,359
these encoders from three different

974
00:37:07,359 --> 00:37:09,520
vendors this time the first one that

975
00:37:09,520 --> 00:37:10,640
came in

976
00:37:10,640 --> 00:37:13,280
was from jtag digital and it had the

977
00:37:13,280 --> 00:37:14,880
telnet port closed

978
00:37:14,880 --> 00:37:17,200
good but the application was not fixed

979
00:37:17,200 --> 00:37:18,400
at all it still had all these

980
00:37:18,400 --> 00:37:19,440
vulnerabilities

981
00:37:19,440 --> 00:37:21,040
i went to the vendor's website and

982
00:37:21,040 --> 00:37:22,960
downloaded firmware and it was still the

983
00:37:22,960 --> 00:37:25,119
old one with all the issues

984
00:37:25,119 --> 00:37:28,480
the two other vendors ura and icv

985
00:37:28,480 --> 00:37:30,880
actually had the application fixed but

986
00:37:30,880 --> 00:37:32,240
the telnet was open

987
00:37:32,240 --> 00:37:35,520
with the trivial password i don't know

988
00:37:35,520 --> 00:37:36,240
why they

989
00:37:36,240 --> 00:37:40,640
decided to keep that open other vendors

990
00:37:40,640 --> 00:37:42,240
i did some online research i did not

991
00:37:42,240 --> 00:37:43,839
have the devices but i

992
00:37:43,839 --> 00:37:46,000
downloaded some firmware where it was

993
00:37:46,000 --> 00:37:46,880
available

994
00:37:46,880 --> 00:37:49,839
some of that was fixed other still had

995
00:37:49,839 --> 00:37:50,960
obvious issues

996
00:37:50,960 --> 00:37:53,920
but it's difficult to tell how many uh

997
00:37:53,920 --> 00:37:55,119
got the fixes out

998
00:37:55,119 --> 00:37:56,720
and some of them didn't even have

999
00:37:56,720 --> 00:37:58,320
anything for download

1000
00:37:58,320 --> 00:38:00,160
so it's a mixed bag but for the most

1001
00:38:00,160 --> 00:38:02,160
part i believe that

1002
00:38:02,160 --> 00:38:05,839
the developer for the software

1003
00:38:05,839 --> 00:38:08,480
new orange they address the issues it's

1004
00:38:08,480 --> 00:38:09,839
just a matter of pushing

1005
00:38:09,839 --> 00:38:12,160
those fixes downstream to all these

1006
00:38:12,160 --> 00:38:14,720
different vendors

1007
00:38:14,720 --> 00:38:18,240
takeaways from this presentation iot

1008
00:38:18,240 --> 00:38:20,000
devices are computers

1009
00:38:20,000 --> 00:38:23,119
and computers run applications and

1010
00:38:23,119 --> 00:38:26,079
many of us here know how to make

1011
00:38:26,079 --> 00:38:27,920
applications more secure how to find

1012
00:38:27,920 --> 00:38:30,160
vulnerabilities and address them

1013
00:38:30,160 --> 00:38:32,800
so let's do it because remember the

1014
00:38:32,800 --> 00:38:34,640
reality is this

1015
00:38:34,640 --> 00:38:36,960
you can apply your knowledge to other

1016
00:38:36,960 --> 00:38:38,720
areas and make the world

1017
00:38:38,720 --> 00:38:41,520
more secure

1018
00:38:42,079 --> 00:38:44,000
the complete write-up for this research

1019
00:38:44,000 --> 00:38:45,839
is available on my website

1020
00:38:45,839 --> 00:38:47,440
and also if you have any of these

1021
00:38:47,440 --> 00:38:49,040
devices and wanna do

1022
00:38:49,040 --> 00:38:51,599
run a quick test the exploit scripts are

1023
00:38:51,599 --> 00:38:53,839
on github and exploit db

1024
00:38:53,839 --> 00:38:55,440
i would love to hear from you whether

1025
00:38:55,440 --> 00:38:57,599
you like this presentation or not

1026
00:38:57,599 --> 00:39:00,160
if you have any questions or suggestions

1027
00:39:00,160 --> 00:39:01,119
or need help

1028
00:39:01,119 --> 00:39:03,839
please let me know i'll be happy to chat

1029
00:39:03,839 --> 00:39:04,320
thank you

1030
00:39:04,320 --> 00:39:06,320
very much for attending this talk and

1031
00:39:06,320 --> 00:39:09,839
good luck

