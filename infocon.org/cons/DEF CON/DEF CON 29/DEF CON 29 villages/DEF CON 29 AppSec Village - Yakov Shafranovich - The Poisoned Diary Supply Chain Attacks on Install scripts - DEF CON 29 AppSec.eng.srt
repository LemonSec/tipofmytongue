1
00:00:01,839 --> 00:00:04,160
hello and welcome to my presentation

2
00:00:04,160 --> 00:00:05,839
on supply chain attacks on install

3
00:00:05,839 --> 00:00:09,440
scripts at absec village at defcon 29

4
00:00:09,440 --> 00:00:10,960
uh before i start i would like to thank

5
00:00:10,960 --> 00:00:12,559
all of the organizers and attendees for

6
00:00:12,559 --> 00:00:15,120
making this talk happen

7
00:00:15,120 --> 00:00:18,160
um here's basic outline of my talk

8
00:00:18,160 --> 00:00:19,600
a little bit of introduction we're gonna

9
00:00:19,600 --> 00:00:21,439
talk about some different supply chain

10
00:00:21,439 --> 00:00:22,400
attacks

11
00:00:22,400 --> 00:00:24,240
i'm gonna talk specifically about the

12
00:00:24,240 --> 00:00:26,000
curl bash pattern

13
00:00:26,000 --> 00:00:28,720
uh talk about how we do verification of

14
00:00:28,720 --> 00:00:30,800
scripts that use that pattern

15
00:00:30,800 --> 00:00:32,320
some tooling that i developed some

16
00:00:32,320 --> 00:00:33,600
interesting things that are found along

17
00:00:33,600 --> 00:00:34,239
the way

18
00:00:34,239 --> 00:00:35,680
and we'll finish off with takeaways and

19
00:00:35,680 --> 00:00:37,040
hopefully their questions and answer

20
00:00:37,040 --> 00:00:38,480
session

21
00:00:38,480 --> 00:00:42,000
so as an introduction what prompted this

22
00:00:42,000 --> 00:00:42,719
journey

23
00:00:42,719 --> 00:00:44,800
so in april it was discovered that a

24
00:00:44,800 --> 00:00:46,000
bash script used

25
00:00:46,000 --> 00:00:48,160
by codecov.io which is called coverage

26
00:00:48,160 --> 00:00:49,920
tool has been compromised for at least

27
00:00:49,920 --> 00:00:50,879
three months

28
00:00:50,879 --> 00:00:53,680
here's a screenshot from the codecovale

29
00:00:53,680 --> 00:00:55,199
compromise page a lot more information

30
00:00:55,199 --> 00:00:56,320
available there

31
00:00:56,320 --> 00:00:58,640
but essentially somebody gained access

32
00:00:58,640 --> 00:00:59,760
to the script

33
00:00:59,760 --> 00:01:02,399
and since early january it has been

34
00:01:02,399 --> 00:01:03,920
compromised

35
00:01:03,920 --> 00:01:07,240
they injected code and as a result

36
00:01:07,240 --> 00:01:10,000
codecov.io users thousands of

37
00:01:10,000 --> 00:01:12,159
organizations tens of thousands of users

38
00:01:12,159 --> 00:01:13,600
and they're running malicious code

39
00:01:13,600 --> 00:01:15,280
within the environment

40
00:01:15,280 --> 00:01:18,320
when i saw this originally i kind of

41
00:01:18,320 --> 00:01:20,960
was it looked interesting to me and one

42
00:01:20,960 --> 00:01:23,360
of the things that looked interesting is

43
00:01:23,360 --> 00:01:25,600
is this something that's limited to this

44
00:01:25,600 --> 00:01:26,880
particular

45
00:01:26,880 --> 00:01:28,560
vendor or is this something that we use

46
00:01:28,560 --> 00:01:30,320
every day and i went out and started

47
00:01:30,320 --> 00:01:32,079
looking at other places where this

48
00:01:32,079 --> 00:01:33,600
pattern is used

49
00:01:33,600 --> 00:01:36,079
now that we know that we know that this

50
00:01:36,079 --> 00:01:37,200
thing is possible

51
00:01:37,200 --> 00:01:39,600
that a compromise of this nature can

52
00:01:39,600 --> 00:01:40,400
happen

53
00:01:40,400 --> 00:01:42,000
how do we go about making sure that it

54
00:01:42,000 --> 00:01:43,600
doesn't happen again

55
00:01:43,600 --> 00:01:45,360
so i'm going to be talking about supply

56
00:01:45,360 --> 00:01:47,920
chain attacks but specifically i want to

57
00:01:47,920 --> 00:01:49,119
focus on

58
00:01:49,119 --> 00:01:51,439
what i think is a corner of the supply

59
00:01:51,439 --> 00:01:52,240
chain

60
00:01:52,240 --> 00:01:54,720
which has not been looked at before

61
00:01:54,720 --> 00:01:56,000
which essentially is

62
00:01:56,000 --> 00:01:57,920
these shell scripts that use what i call

63
00:01:57,920 --> 00:01:59,360
the curl dash pattern

64
00:01:59,360 --> 00:02:01,360
and talk about some verification methods

65
00:02:01,360 --> 00:02:03,280
some approaches also some tooling

66
00:02:03,280 --> 00:02:06,000
interesting findings uh before i start

67
00:02:06,000 --> 00:02:07,920
just a little bit of an introduction i'm

68
00:02:07,920 --> 00:02:09,679
a software developer have been software

69
00:02:09,679 --> 00:02:10,800
for most of my life

70
00:02:10,800 --> 00:02:13,200
um did security always on the side for

71
00:02:13,200 --> 00:02:14,239
the last couple of years i've been

72
00:02:14,239 --> 00:02:16,400
privileged to work in security full-time

73
00:02:16,400 --> 00:02:18,560
but i want to be very very clear i am

74
00:02:18,560 --> 00:02:20,560
not here representing my employer

75
00:02:20,560 --> 00:02:22,400
i'm here in personal capacity i

76
00:02:22,400 --> 00:02:23,440
presented for a bunch of other

77
00:02:23,440 --> 00:02:24,640
conferences

78
00:02:24,640 --> 00:02:26,800
uh there's a bunch of anti-spam things

79
00:02:26,800 --> 00:02:28,319
out there that i've been involved with

80
00:02:28,319 --> 00:02:31,120
some rfcs security.txt is something that

81
00:02:31,120 --> 00:02:32,400
i've been recently working on

82
00:02:32,400 --> 00:02:35,760
i'm helping out at um overflow who is

83
00:02:35,760 --> 00:02:37,200
the original author it's about to become

84
00:02:37,200 --> 00:02:39,360
an rfc and there's also some other rfcs

85
00:02:39,360 --> 00:02:40,319
that i

86
00:02:40,319 --> 00:02:42,480
have done in the past um here are some

87
00:02:42,480 --> 00:02:44,800
cvs that i've discovered

88
00:02:44,800 --> 00:02:47,840
uh also i want to be very clear is two

89
00:02:47,840 --> 00:02:48,400
things

90
00:02:48,400 --> 00:02:50,720
one is i'm not blaming anyone there's

91
00:02:50,720 --> 00:02:51,599
gonna be a lot of

92
00:02:51,599 --> 00:02:53,280
vendors and open source projects

93
00:02:53,280 --> 00:02:55,120
mentioned in this talk but it's not

94
00:02:55,120 --> 00:02:56,080
their fault

95
00:02:56,080 --> 00:02:57,840
security is something that we all have

96
00:02:57,840 --> 00:02:59,360
to do and it's not an easy thing to

97
00:02:59,360 --> 00:03:00,239
implement

98
00:03:00,239 --> 00:03:01,920
many open source projects are often

99
00:03:01,920 --> 00:03:03,680
working for free

100
00:03:03,680 --> 00:03:06,080
the second thing is also my senate

101
00:03:06,080 --> 00:03:07,120
disclaimer

102
00:03:07,120 --> 00:03:08,560
as you can see the screenshot below for

103
00:03:08,560 --> 00:03:10,800
more games don't do anything without

104
00:03:10,800 --> 00:03:11,840
talking to a lawyer

105
00:03:11,840 --> 00:03:13,840
there are some techniques here and that

106
00:03:13,840 --> 00:03:15,519
i'm going to be presenting

107
00:03:15,519 --> 00:03:18,480
that may lead you on a chase to do

108
00:03:18,480 --> 00:03:19,519
something you're not supposed to be

109
00:03:19,519 --> 00:03:20,879
doing so once again

110
00:03:20,879 --> 00:03:22,959
don't do something without talking to

111
00:03:22,959 --> 00:03:26,159
someone in the legal profession

112
00:03:27,760 --> 00:03:30,000
before we start talking about the

113
00:03:30,000 --> 00:03:31,040
particular

114
00:03:31,040 --> 00:03:33,760
pattern of curl bash and install scripts

115
00:03:33,760 --> 00:03:35,200
let's talk about software supply chain

116
00:03:35,200 --> 00:03:37,040
tags in general

117
00:03:37,040 --> 00:03:39,360
modern supply chain due to its nature

118
00:03:39,360 --> 00:03:41,040
includes a lot of different phases

119
00:03:41,040 --> 00:03:42,480
there's the design of the software the

120
00:03:42,480 --> 00:03:43,840
development of the software while the

121
00:03:43,840 --> 00:03:46,000
software is built it gets distributed

122
00:03:46,000 --> 00:03:47,440
and then you have to get it from

123
00:03:47,440 --> 00:03:48,799
wherever it originates from to the

124
00:03:48,799 --> 00:03:50,239
organization that's using it

125
00:03:50,239 --> 00:03:52,959
and even after that there's updates

126
00:03:52,959 --> 00:03:53,680
because

127
00:03:53,680 --> 00:03:55,200
a lot of things are no longer done

128
00:03:55,200 --> 00:03:57,200
in-house and there's a lot of shared

129
00:03:57,200 --> 00:03:57,599
code

130
00:03:57,599 --> 00:03:59,200
out there modern software includes

131
00:03:59,200 --> 00:04:00,720
third-party components that come from

132
00:04:00,720 --> 00:04:03,040
both open source and commercial sources

133
00:04:03,040 --> 00:04:06,640
in addition even without that developer

134
00:04:06,640 --> 00:04:09,120
tools infrastructure csd tooling a lot

135
00:04:09,120 --> 00:04:10,080
of things that are

136
00:04:10,080 --> 00:04:12,799
around the business of building software

137
00:04:12,799 --> 00:04:14,319
also uses a lot of third-party

138
00:04:14,319 --> 00:04:15,439
components

139
00:04:15,439 --> 00:04:17,680
even after software is built and is

140
00:04:17,680 --> 00:04:18,959
ready to go out the door

141
00:04:18,959 --> 00:04:21,199
social distribution and updates a lot of

142
00:04:21,199 --> 00:04:22,400
the infrastructure there

143
00:04:22,400 --> 00:04:25,360
also uses third-party components there's

144
00:04:25,360 --> 00:04:27,759
cdns there's web services buckets

145
00:04:27,759 --> 00:04:29,199
developers and security teams often

146
00:04:29,199 --> 00:04:30,880
don't know what's inside these

147
00:04:30,880 --> 00:04:32,560
components how they delivered and how

148
00:04:32,560 --> 00:04:33,680
the legit

149
00:04:33,680 --> 00:04:35,600
uh whether the source that originates

150
00:04:35,600 --> 00:04:37,440
from matches which you actually have in

151
00:04:37,440 --> 00:04:38,240
your hand

152
00:04:38,240 --> 00:04:41,280
and anywhere along the line any of these

153
00:04:41,280 --> 00:04:43,120
pieces can be compromised

154
00:04:43,120 --> 00:04:44,960
this is what many people imagine the

155
00:04:44,960 --> 00:04:46,240
solar supply chain to be

156
00:04:46,240 --> 00:04:48,560
you have a beautiful castle in reality

157
00:04:48,560 --> 00:04:50,080
it's more like this cartoon

158
00:04:50,080 --> 00:04:52,320
underneath a beautiful piece of software

159
00:04:52,320 --> 00:04:53,919
that could be an open source component

160
00:04:53,919 --> 00:04:55,600
that somebody has been maintaining on

161
00:04:55,600 --> 00:04:56,400
their own

162
00:04:56,400 --> 00:04:59,919
for many years for free and what if that

163
00:04:59,919 --> 00:05:02,880
component is compromised and what if the

164
00:05:02,880 --> 00:05:05,039
maintainer of the component

165
00:05:05,039 --> 00:05:07,039
has been changed and now works for a

166
00:05:07,039 --> 00:05:08,400
nation state

167
00:05:08,400 --> 00:05:11,120
so the reality today is that even though

168
00:05:11,120 --> 00:05:13,199
it may look like a beautiful castle

169
00:05:13,199 --> 00:05:14,720
underneath there's a lot of pieces that

170
00:05:14,720 --> 00:05:17,199
may not be so beautiful

171
00:05:17,199 --> 00:05:19,840
now what are software supply chain

172
00:05:19,840 --> 00:05:20,560
attacks

173
00:05:20,560 --> 00:05:22,880
a software supply chain attack targets

174
00:05:22,880 --> 00:05:24,240
any third-party components

175
00:05:24,240 --> 00:05:25,280
infrastructure

176
00:05:25,280 --> 00:05:27,199
that using software development delivery

177
00:05:27,199 --> 00:05:29,039
it's sometimes it's third-party

178
00:05:29,039 --> 00:05:30,720
sometimes it could be something that

179
00:05:30,720 --> 00:05:32,639
a company owns but somewhat located

180
00:05:32,639 --> 00:05:34,080
somewhere else

181
00:05:34,080 --> 00:05:36,960
usually what an attacker tries to do is

182
00:05:36,960 --> 00:05:38,080
to replace

183
00:05:38,080 --> 00:05:40,080
a legitimate component or inject

184
00:05:40,080 --> 00:05:41,759
malicious code

185
00:05:41,759 --> 00:05:45,120
sometimes that may take a form of actual

186
00:05:45,120 --> 00:05:45,919
code

187
00:05:45,919 --> 00:05:48,000
sometimes they may target infrastructure

188
00:05:48,000 --> 00:05:49,759
instead of the software itself

189
00:05:49,759 --> 00:05:52,080
what is the goal of these attacks the

190
00:05:52,080 --> 00:05:52,800
goal is

191
00:05:52,800 --> 00:05:54,720
that they are trying to get a foothold

192
00:05:54,720 --> 00:05:56,639
inside organizations that are using the

193
00:05:56,639 --> 00:05:58,639
software that's being built

194
00:05:58,639 --> 00:06:00,080
and then usually that gets followed up

195
00:06:00,080 --> 00:06:02,080
by something much more nasty

196
00:06:02,080 --> 00:06:03,840
once they get the initial foothold

197
00:06:03,840 --> 00:06:05,680
through the door through the compromised

198
00:06:05,680 --> 00:06:07,440
software or infrastructure

199
00:06:07,440 --> 00:06:09,199
there's usually things like ransomware

200
00:06:09,199 --> 00:06:10,639
stealing data or

201
00:06:10,639 --> 00:06:12,000
something of that nature that comes

202
00:06:12,000 --> 00:06:14,160
along the way in the recent

203
00:06:14,160 --> 00:06:16,720
years a lot of these attacks due to the

204
00:06:16,720 --> 00:06:17,600
sophistication

205
00:06:17,600 --> 00:06:20,080
required to pull them off have been done

206
00:06:20,080 --> 00:06:22,720
by apts and nation states

207
00:06:22,720 --> 00:06:25,600
now some examples this is just a picture

208
00:06:25,600 --> 00:06:28,240
from that landing console report in 2020

209
00:06:28,240 --> 00:06:30,639
they tried to go out and catalog how

210
00:06:30,639 --> 00:06:31,919
often did this happen

211
00:06:31,919 --> 00:06:34,160
the 115 attacks that they have in the

212
00:06:34,160 --> 00:06:35,039
catalog you

213
00:06:35,039 --> 00:06:37,360
follow the link to the paper uh various

214
00:06:37,360 --> 00:06:38,240
different stages

215
00:06:38,240 --> 00:06:41,039
as you can see here 32 are in the

216
00:06:41,039 --> 00:06:41,919
beginning

217
00:06:41,919 --> 00:06:43,680
where the software components originate

218
00:06:43,680 --> 00:06:44,960
them some of them

219
00:06:44,960 --> 00:06:47,520
those six compromises the case you got

220
00:06:47,520 --> 00:06:48,000
open source

221
00:06:48,000 --> 00:06:50,800
repositories never compromised you got

222
00:06:50,800 --> 00:06:52,319
some sort of account access attack

223
00:06:52,319 --> 00:06:53,599
where i'm assuming probably developer

224
00:06:53,599 --> 00:06:55,039
account that gets compromised you got

225
00:06:55,039 --> 00:06:56,560
absolute compromise

226
00:06:56,560 --> 00:06:58,720
you got updates that's the flavor of the

227
00:06:58,720 --> 00:07:00,639
months updates are often also

228
00:07:00,639 --> 00:07:01,599
compromised

229
00:07:01,599 --> 00:07:04,960
and you know things of similar nature

230
00:07:04,960 --> 00:07:06,720
here are some examples that have

231
00:07:06,720 --> 00:07:08,000
happened recently

232
00:07:08,000 --> 00:07:11,440
not all that necessarily malicious cdngs

233
00:07:11,440 --> 00:07:13,599
cloudflare sadn that serves open source

234
00:07:13,599 --> 00:07:14,960
components

235
00:07:14,960 --> 00:07:16,319
research has shown that it can be

236
00:07:16,319 --> 00:07:18,319
compromised the bug was fixed

237
00:07:18,319 --> 00:07:20,160
some research from alex berson recently

238
00:07:20,160 --> 00:07:21,520
also showed

239
00:07:21,520 --> 00:07:24,560
how you can compromise modules that come

240
00:07:24,560 --> 00:07:27,199
in from public repositories

241
00:07:27,199 --> 00:07:29,520
codekov as i mentioned happened also

242
00:07:29,520 --> 00:07:30,319
solarwinds

243
00:07:30,319 --> 00:07:32,080
obviously is the big one that happened

244
00:07:32,080 --> 00:07:34,080
december of 2020.

245
00:07:34,080 --> 00:07:36,240
there's have been multiple attacks

246
00:07:36,240 --> 00:07:38,560
involving xcode projects because xcode

247
00:07:38,560 --> 00:07:40,319
can execute binary code

248
00:07:40,319 --> 00:07:42,000
developer downloads some xcode project

249
00:07:42,000 --> 00:07:44,240
they saw on github they get compromised

250
00:07:44,240 --> 00:07:46,960
um famous twilio sdk compromise because

251
00:07:46,960 --> 00:07:47,360
of a

252
00:07:47,360 --> 00:07:49,599
s3 bucket that was misconfigured not

253
00:07:49,599 --> 00:07:52,400
patea malicious piece of software

254
00:07:52,400 --> 00:07:55,520
allegedly from the ukrainian government

255
00:07:55,520 --> 00:07:59,039
released the virus also too many to

256
00:07:59,039 --> 00:08:00,879
count malicious modules

257
00:08:00,879 --> 00:08:03,199
in open source repositories this happens

258
00:08:03,199 --> 00:08:04,319
all the time

259
00:08:04,319 --> 00:08:08,400
npm gems python repository java

260
00:08:08,400 --> 00:08:10,479
to a lesser degree happens all the time

261
00:08:10,479 --> 00:08:11,599
mage card attacks

262
00:08:11,599 --> 00:08:13,199
the magic card attacks is when

263
00:08:13,199 --> 00:08:15,199
javascript gets compromised in a web

264
00:08:15,199 --> 00:08:16,400
page

265
00:08:16,400 --> 00:08:19,440
sometimes those compromises happen from

266
00:08:19,440 --> 00:08:20,960
a piece of javascript that comes from a

267
00:08:20,960 --> 00:08:23,440
third-party vendor and obviously many

268
00:08:23,440 --> 00:08:25,440
many more

269
00:08:25,440 --> 00:08:28,000
what can we do so before we can even

270
00:08:28,000 --> 00:08:29,039
talk about

271
00:08:29,039 --> 00:08:32,159
solutions to supply chain attacks one of

272
00:08:32,159 --> 00:08:33,519
the things that's very important is

273
00:08:33,519 --> 00:08:35,120
awareness

274
00:08:35,120 --> 00:08:38,000
do you know what's inside your software

275
00:08:38,000 --> 00:08:39,360
what's in your infrastructure what's

276
00:08:39,360 --> 00:08:40,320
inside your tooling

277
00:08:40,320 --> 00:08:42,479
your csd system your artifact repository

278
00:08:42,479 --> 00:08:43,440
cdn's

279
00:08:43,440 --> 00:08:45,120
the awareness of all the different

280
00:08:45,120 --> 00:08:47,600
pieces that are used to build your

281
00:08:47,600 --> 00:08:48,399
software

282
00:08:48,399 --> 00:08:49,680
or all of the different infrastructure

283
00:08:49,680 --> 00:08:52,320
that supports it and once you know

284
00:08:52,320 --> 00:08:53,600
what it is do you even know where it

285
00:08:53,600 --> 00:08:56,480
comes from if you have a release process

286
00:08:56,480 --> 00:08:57,839
which i hope you do

287
00:08:57,839 --> 00:08:59,600
who's in charge of it what's involved in

288
00:08:59,600 --> 00:09:01,440
getting raw source code

289
00:09:01,440 --> 00:09:03,920
into an actual release these are not

290
00:09:03,920 --> 00:09:05,760
easy problems to solve

291
00:09:05,760 --> 00:09:07,920
very often you could go down a rabbit

292
00:09:07,920 --> 00:09:09,519
hole you could have a component that

293
00:09:09,519 --> 00:09:12,000
uses a component that uses a component

294
00:09:12,000 --> 00:09:13,760
same thing for infrastructure today's

295
00:09:13,760 --> 00:09:15,519
infrastructure is no longer just a

296
00:09:15,519 --> 00:09:17,040
simple web server

297
00:09:17,040 --> 00:09:19,600
many times there are third-party pieces

298
00:09:19,600 --> 00:09:20,880
their cdns

299
00:09:20,880 --> 00:09:22,720
their package stores there's all kinds

300
00:09:22,720 --> 00:09:24,080
of cloud stuff

301
00:09:24,080 --> 00:09:25,760
and then if you're an organization that

302
00:09:25,760 --> 00:09:27,120
publishes and updates

303
00:09:27,120 --> 00:09:29,200
software do you know what's involved in

304
00:09:29,200 --> 00:09:30,160
your update process

305
00:09:30,160 --> 00:09:33,519
are those updates digitally signed

306
00:09:33,519 --> 00:09:35,200
the reason why this talk is called the

307
00:09:35,200 --> 00:09:37,760
poison diary is because for those of you

308
00:09:37,760 --> 00:09:38,160
who

309
00:09:38,160 --> 00:09:40,560
are harry potter fans this is a poison

310
00:09:40,560 --> 00:09:41,440
there is a

311
00:09:41,440 --> 00:09:43,440
magical artifact called the poison die

312
00:09:43,440 --> 00:09:44,720
the diary

313
00:09:44,720 --> 00:09:47,760
that was running essentially

314
00:09:47,760 --> 00:09:50,480
magical code turned not to be malicious

315
00:09:50,480 --> 00:09:50,800
and

316
00:09:50,800 --> 00:09:54,399
the point of the diary was

317
00:09:54,399 --> 00:09:56,160
you should not trust anything that can

318
00:09:56,160 --> 00:09:58,000
think for itself if you can't see where

319
00:09:58,000 --> 00:09:59,600
it keeps its brain

320
00:09:59,600 --> 00:10:01,920
if you are not controlling the

321
00:10:01,920 --> 00:10:03,440
particular component

322
00:10:03,440 --> 00:10:05,120
that you're using in your software

323
00:10:05,120 --> 00:10:07,600
infrastructure or if you're not

324
00:10:07,600 --> 00:10:09,760
controlling the particular

325
00:10:09,760 --> 00:10:12,240
infrastructure itself or the cicd

326
00:10:12,240 --> 00:10:15,200
process how do you know what's going in

327
00:10:15,200 --> 00:10:16,720
there

328
00:10:16,720 --> 00:10:18,880
how do we secure the supply chain this

329
00:10:18,880 --> 00:10:20,959
is a very very hard problem

330
00:10:20,959 --> 00:10:23,200
the basics require which are the

331
00:10:23,200 --> 00:10:25,040
requirements are pretty simple

332
00:10:25,040 --> 00:10:28,160
if you're a consumer of components

333
00:10:28,160 --> 00:10:29,680
you just need to make sure the component

334
00:10:29,680 --> 00:10:31,519
you are getting matches what the

335
00:10:31,519 --> 00:10:32,160
original

336
00:10:32,160 --> 00:10:34,079
project or commercial vendor actually

337
00:10:34,079 --> 00:10:35,360
produced

338
00:10:35,360 --> 00:10:37,279
in addition you also have to make sure

339
00:10:37,279 --> 00:10:38,560
that whatever they're giving you

340
00:10:38,560 --> 00:10:40,079
has not been injected with malicious

341
00:10:40,079 --> 00:10:42,000
code if you're a vendor

342
00:10:42,000 --> 00:10:43,279
or if you're an open source project

343
00:10:43,279 --> 00:10:45,680
maintainer one of the goals that you

344
00:10:45,680 --> 00:10:46,160
have

345
00:10:46,160 --> 00:10:47,519
is to making sure that whenever you

346
00:10:47,519 --> 00:10:49,200
publish something it actually matches

347
00:10:49,200 --> 00:10:50,720
the original source

348
00:10:50,720 --> 00:10:52,320
at the same time you want to make sure

349
00:10:52,320 --> 00:10:54,240
that nothing was injected into the

350
00:10:54,240 --> 00:10:55,279
original source

351
00:10:55,279 --> 00:10:58,959
but these are not easy problems to solve

352
00:10:58,959 --> 00:11:01,360
here are some approaches that are found

353
00:11:01,360 --> 00:11:02,399
in the wild

354
00:11:02,399 --> 00:11:04,640
so some people choose to answer security

355
00:11:04,640 --> 00:11:05,839
third parties

356
00:11:05,839 --> 00:11:08,000
for example in my research which i will

357
00:11:08,000 --> 00:11:08,880
show later

358
00:11:08,880 --> 00:11:10,880
there are people who rely on direct

359
00:11:10,880 --> 00:11:12,160
github downloads

360
00:11:12,160 --> 00:11:14,399
meaning their script that they're using

361
00:11:14,399 --> 00:11:16,079
is located in github source code that

362
00:11:16,079 --> 00:11:17,920
bypasses the entire

363
00:11:17,920 --> 00:11:20,160
infrastructure used for builds and

364
00:11:20,160 --> 00:11:21,839
you're getting this script essentially

365
00:11:21,839 --> 00:11:23,279
directly from the source

366
00:11:23,279 --> 00:11:24,560
some people choose to rely on package

367
00:11:24,560 --> 00:11:26,800
managers because packet managers

368
00:11:26,800 --> 00:11:29,120
have a more narrow release process

369
00:11:29,120 --> 00:11:30,640
people who

370
00:11:30,640 --> 00:11:32,560
are putting stuff into package managers

371
00:11:32,560 --> 00:11:34,160
are supposed to

372
00:11:34,160 --> 00:11:36,079
be you know have some semblance of

373
00:11:36,079 --> 00:11:38,079
control over their software

374
00:11:38,079 --> 00:11:39,519
there's also a push to do some

375
00:11:39,519 --> 00:11:41,680
cryptography checksums which we'll talk

376
00:11:41,680 --> 00:11:42,720
about later

377
00:11:42,720 --> 00:11:44,800
there's always digital signatures so for

378
00:11:44,800 --> 00:11:46,079
example gatekeeper

379
00:11:46,079 --> 00:11:47,680
and mac os there's athena code in

380
00:11:47,680 --> 00:11:49,920
windows using certificates to sign

381
00:11:49,920 --> 00:11:50,639
things

382
00:11:50,639 --> 00:11:52,880
in linux ecosystem you could use bgp

383
00:11:52,880 --> 00:11:53,920
signatures

384
00:11:53,920 --> 00:11:56,160
uh pgp signatures straight up uh we'll

385
00:11:56,160 --> 00:11:57,600
talk about that as well

386
00:11:57,600 --> 00:12:00,160
uh publicly ecosystem there are ways to

387
00:12:00,160 --> 00:12:02,000
get a cold signing certificate from a

388
00:12:02,000 --> 00:12:03,519
public certificate authority

389
00:12:03,519 --> 00:12:05,920
just like we do with ssl and by you

390
00:12:05,920 --> 00:12:07,920
trusting that ecosystem

391
00:12:07,920 --> 00:12:10,240
you end up trusting a certificate there

392
00:12:10,240 --> 00:12:11,839
are attacks in that as well

393
00:12:11,839 --> 00:12:13,839
there are some other ones you could do

394
00:12:13,839 --> 00:12:15,600
an antivirus scan

395
00:12:15,600 --> 00:12:17,519
unfortunately that doesn't necessarily

396
00:12:17,519 --> 00:12:19,360
find something that's new

397
00:12:19,360 --> 00:12:21,920
you could disable automatic updates then

398
00:12:21,920 --> 00:12:23,440
you get to lose

399
00:12:23,440 --> 00:12:25,760
if there is some sort of a flaw in the

400
00:12:25,760 --> 00:12:26,959
software you have

401
00:12:26,959 --> 00:12:28,639
there's going to be delay till you apply

402
00:12:28,639 --> 00:12:30,720
the update there's primary defenses you

403
00:12:30,720 --> 00:12:31,760
could have for example

404
00:12:31,760 --> 00:12:34,079
your ci cd system locked up you cannot

405
00:12:34,079 --> 00:12:34,959
go

406
00:12:34,959 --> 00:12:36,160
call out to the internet that makes

407
00:12:36,160 --> 00:12:38,240
things harder you could do detonation

408
00:12:38,240 --> 00:12:39,519
where you could try to download the

409
00:12:39,519 --> 00:12:40,240
update

410
00:12:40,240 --> 00:12:41,760
and see if it does something malicious

411
00:12:41,760 --> 00:12:43,279
kind of behavioral

412
00:12:43,279 --> 00:12:45,839
pieces there's manual review which is

413
00:12:45,839 --> 00:12:47,519
you know sometimes easy sometimes hard

414
00:12:47,519 --> 00:12:48,880
but requires humans

415
00:12:48,880 --> 00:12:50,560
there's some experimental approaches

416
00:12:50,560 --> 00:12:52,079
that haven't taken off yet

417
00:12:52,079 --> 00:12:54,639
for example reproducible builds there is

418
00:12:54,639 --> 00:12:55,120
a push

419
00:12:55,120 --> 00:12:56,800
out there to be able to take a piece of

420
00:12:56,800 --> 00:12:58,240
software and build it

421
00:12:58,240 --> 00:13:00,079
and see if that piece of software

422
00:13:00,079 --> 00:13:01,920
matches the official release

423
00:13:01,920 --> 00:13:04,079
because of the differences in how builds

424
00:13:04,079 --> 00:13:06,160
are done it's not an easy thing to pull

425
00:13:06,160 --> 00:13:06,720
off

426
00:13:06,720 --> 00:13:10,320
and obviously there's blockchain

427
00:13:15,120 --> 00:13:17,200
so now that we talked about supply chain

428
00:13:17,200 --> 00:13:18,320
tanks in general

429
00:13:18,320 --> 00:13:20,240
let's talk about the particular corner

430
00:13:20,240 --> 00:13:21,839
of the supply chain

431
00:13:21,839 --> 00:13:23,760
that i have been looking at for the last

432
00:13:23,760 --> 00:13:25,839
couple of months this is what i call the

433
00:13:25,839 --> 00:13:27,760
curl bash pattern

434
00:13:27,760 --> 00:13:29,680
what is the curl bash pattern here's an

435
00:13:29,680 --> 00:13:31,760
example from homebrew

436
00:13:31,760 --> 00:13:33,360
if you want to use homebrew you

437
00:13:33,360 --> 00:13:35,040
essentially use curl to pull the

438
00:13:35,040 --> 00:13:36,079
insulation script

439
00:13:36,079 --> 00:13:39,519
and you pipe it into bash this pattern

440
00:13:39,519 --> 00:13:41,839
use curl bash or wga bash or some

441
00:13:41,839 --> 00:13:43,040
similar approach

442
00:13:43,040 --> 00:13:44,880
to download a script from the internet

443
00:13:44,880 --> 00:13:46,399
and execute it automatically in your

444
00:13:46,399 --> 00:13:47,120
shell

445
00:13:47,120 --> 00:13:49,440
without anything in between it's a very

446
00:13:49,440 --> 00:13:50,560
convenient way to install

447
00:13:50,560 --> 00:13:52,079
software especially if you want to do

448
00:13:52,079 --> 00:13:54,079
something like bootstrapping

449
00:13:54,079 --> 00:13:56,240
there is a long-standing debate is this

450
00:13:56,240 --> 00:13:57,360
safe or not

451
00:13:57,360 --> 00:14:00,639
my honest opinion it is not safe because

452
00:14:00,639 --> 00:14:02,800
you are executing code that originates

453
00:14:02,800 --> 00:14:04,399
from an outside system without looking

454
00:14:04,399 --> 00:14:05,760
at it first

455
00:14:05,760 --> 00:14:07,920
historically security concerns with this

456
00:14:07,920 --> 00:14:09,360
approach have been downplayed

457
00:14:09,360 --> 00:14:11,440
and hear sound excuses that have people

458
00:14:11,440 --> 00:14:12,399
have used

459
00:14:12,399 --> 00:14:14,480
oh don't worry about it a user will

460
00:14:14,480 --> 00:14:16,480
review the script before running them

461
00:14:16,480 --> 00:14:18,959
or these scripts are not used often like

462
00:14:18,959 --> 00:14:21,920
how often does somebody install homebrew

463
00:14:21,920 --> 00:14:23,279
third one a malicious actor can

464
00:14:23,279 --> 00:14:25,519
compromise other things just as easy

465
00:14:25,519 --> 00:14:29,040
and i will talk about some of these now

466
00:14:29,040 --> 00:14:31,279
reviewing scripts an average shell

467
00:14:31,279 --> 00:14:32,639
script contains

468
00:14:32,639 --> 00:14:34,320
unix commands here's an example from

469
00:14:34,320 --> 00:14:36,079
xkcd which i'm sure many of you can

470
00:14:36,079 --> 00:14:37,040
relate to

471
00:14:37,040 --> 00:14:39,360
use commands use very complex command

472
00:14:39,360 --> 00:14:40,480
line options

473
00:14:40,480 --> 00:14:43,040
so here's an example using tar can you

474
00:14:43,040 --> 00:14:44,800
solve this problem can you type an

475
00:14:44,800 --> 00:14:46,000
entire command

476
00:14:46,000 --> 00:14:48,720
without googling i cannot and i bet you

477
00:14:48,720 --> 00:14:50,399
many of you cannot also

478
00:14:50,399 --> 00:14:51,920
the same thing applies to the shell

479
00:14:51,920 --> 00:14:54,160
scripts many times a shell script

480
00:14:54,160 --> 00:14:57,279
is pretty obtuse so if we cannot rely on

481
00:14:57,279 --> 00:14:58,000
users

482
00:14:58,000 --> 00:15:01,040
to be able to read a shell script here's

483
00:15:01,040 --> 00:15:02,240
another example

484
00:15:02,240 --> 00:15:04,160
kotkov that i mentioned earlier the

485
00:15:04,160 --> 00:15:05,680
script was used by thousands of

486
00:15:05,680 --> 00:15:06,480
organizations

487
00:15:06,480 --> 00:15:09,040
tens of thousands of people the way the

488
00:15:09,040 --> 00:15:10,079
issue was found

489
00:15:10,079 --> 00:15:12,880
is through checksums it was not found by

490
00:15:12,880 --> 00:15:13,920
somebody

491
00:15:13,920 --> 00:15:16,880
who was reading a script so you have

492
00:15:16,880 --> 00:15:18,560
three months of usage you have

493
00:15:18,560 --> 00:15:21,600
tens of thousands of humans machine

494
00:15:21,600 --> 00:15:25,120
cacd pipelines etc not a single person

495
00:15:25,120 --> 00:15:26,720
realized that they were using malicious

496
00:15:26,720 --> 00:15:29,440
code the only way we found the problem

497
00:15:29,440 --> 00:15:31,040
is because the attacker forgot

498
00:15:31,040 --> 00:15:33,759
to update the jackson file another

499
00:15:33,759 --> 00:15:35,199
example here's

500
00:15:35,199 --> 00:15:38,000
pip this this is one of the ways to

501
00:15:38,000 --> 00:15:40,240
install pip it's not the only one

502
00:15:40,240 --> 00:15:42,480
the way i found this is because i was

503
00:15:42,480 --> 00:15:44,320
monitoring for changes in the pip script

504
00:15:44,320 --> 00:15:45,279
over time

505
00:15:45,279 --> 00:15:47,199
and i couldn't view the changes it turns

506
00:15:47,199 --> 00:15:49,040
out they tell you that

507
00:15:49,040 --> 00:15:52,079
straight up pip includes binary data

508
00:15:52,079 --> 00:15:55,279
in the end it's base 85 and go to python

509
00:15:55,279 --> 00:15:58,160
so if you expect your users to actually

510
00:15:58,160 --> 00:15:59,600
read this it's not readable

511
00:15:59,600 --> 00:16:01,600
i actually went through the trouble of

512
00:16:01,600 --> 00:16:03,519
writing a small little utility trying to

513
00:16:03,519 --> 00:16:04,880
see what it would take to actually

514
00:16:04,880 --> 00:16:06,320
decrypt this

515
00:16:06,320 --> 00:16:09,440
um you encode it and look at it it

516
00:16:09,440 --> 00:16:11,279
produced a whole bunch of different

517
00:16:11,279 --> 00:16:14,079
files which were not easy to review

518
00:16:14,079 --> 00:16:18,000
another example going back to codecov

519
00:16:18,000 --> 00:16:20,079
since the incident has happened kodkov

520
00:16:20,079 --> 00:16:21,440
has come up with a new

521
00:16:21,440 --> 00:16:23,680
idea instead of using a shell script we

522
00:16:23,680 --> 00:16:25,120
will now use a binary

523
00:16:25,120 --> 00:16:27,680
so before if you were expecting people

524
00:16:27,680 --> 00:16:28,800
to review

525
00:16:28,800 --> 00:16:30,880
a shell script now we have to blindly

526
00:16:30,880 --> 00:16:32,320
trust someone with a binary and once

527
00:16:32,320 --> 00:16:34,160
again like i said earlier

528
00:16:34,160 --> 00:16:37,040
i'm not blaming kodkov this is a common

529
00:16:37,040 --> 00:16:37,519
issue

530
00:16:37,519 --> 00:16:40,240
with many many different projects where

531
00:16:40,240 --> 00:16:42,160
we have to go and blindly

532
00:16:42,160 --> 00:16:46,079
trust a binary here's another example

533
00:16:46,079 --> 00:16:47,360
one of the concerns that people

534
00:16:47,360 --> 00:16:49,360
mentioned is that hey it's not a problem

535
00:16:49,360 --> 00:16:51,440
because it's not used very often it's

536
00:16:51,440 --> 00:16:53,040
usually used by humans

537
00:16:53,040 --> 00:16:55,759
it's usually not something that gets run

538
00:16:55,759 --> 00:16:57,519
on a frequently basis

539
00:16:57,519 --> 00:17:00,320
here's an example if you could look here

540
00:17:00,320 --> 00:17:01,120
at

541
00:17:01,120 --> 00:17:04,400
line 2 13 and 9 214 this

542
00:17:04,400 --> 00:17:06,799
installs rust from a shell script this

543
00:17:06,799 --> 00:17:08,240
is part of a docker file

544
00:17:08,240 --> 00:17:10,240
that is part of a project part of an

545
00:17:10,240 --> 00:17:12,799
open source project called the pandabot

546
00:17:12,799 --> 00:17:15,199
again not blaming the pandabots but my

547
00:17:15,199 --> 00:17:16,959
point is that

548
00:17:16,959 --> 00:17:19,760
historically these scripts do not always

549
00:17:19,760 --> 00:17:21,359
end up being used by humans

550
00:17:21,359 --> 00:17:23,760
they end up being incorporated into cicd

551
00:17:23,760 --> 00:17:24,720
systems

552
00:17:24,720 --> 00:17:27,359
and it's not just about scripts if you

553
00:17:27,359 --> 00:17:29,760
look further down line 221

554
00:17:29,760 --> 00:17:33,039
and 222 you could see a similar approach

555
00:17:33,039 --> 00:17:33,679
where we are

556
00:17:33,679 --> 00:17:36,400
downloading some other thing from

557
00:17:36,400 --> 00:17:38,320
hashicorp it's not a shell script but

558
00:17:38,320 --> 00:17:40,400
the concept is the same there's

559
00:17:40,400 --> 00:17:42,160
automation happening here

560
00:17:42,160 --> 00:17:44,240
and if somebody were to interfere with

561
00:17:44,240 --> 00:17:45,679
these files

562
00:17:45,679 --> 00:17:47,440
a lot of projects that are relying on

563
00:17:47,440 --> 00:17:50,320
this automation will become compromised

564
00:17:50,320 --> 00:17:53,200
like i said in the earlier we don't want

565
00:17:53,200 --> 00:17:54,160
to trust something

566
00:17:54,160 --> 00:17:55,679
unless we know where it's coming from

567
00:17:55,679 --> 00:17:57,760
and this is very true for these shell

568
00:17:57,760 --> 00:18:00,000
scripts because a lot of times

569
00:18:00,000 --> 00:18:02,960
we these shell scripts are not something

570
00:18:02,960 --> 00:18:03,679
that you

571
00:18:03,679 --> 00:18:05,039
have an opportunity to review you don't

572
00:18:05,039 --> 00:18:08,080
look at them so why are we trusting them

573
00:18:08,080 --> 00:18:10,640
how common is this one of the other

574
00:18:10,640 --> 00:18:12,640
concerns that was raised and when i had

575
00:18:12,640 --> 00:18:13,760
discussions is

576
00:18:13,760 --> 00:18:15,679
is this really something that's common

577
00:18:15,679 --> 00:18:16,960
so i went out

578
00:18:16,960 --> 00:18:19,280
and i started coding a list this is what

579
00:18:19,280 --> 00:18:20,799
i this is one of my projects which i

580
00:18:20,799 --> 00:18:21,200
will

581
00:18:21,200 --> 00:18:23,919
show you later i want to show you know i

582
00:18:23,919 --> 00:18:25,840
want to see how common is this thing

583
00:18:25,840 --> 00:18:28,480
so unfortunately this is fairly common

584
00:18:28,480 --> 00:18:29,760
the good thing is

585
00:18:29,760 --> 00:18:33,120
that this a lot of times is not the only

586
00:18:33,120 --> 00:18:34,480
way to install something

587
00:18:34,480 --> 00:18:35,919
a lot of times there's an alternate way

588
00:18:35,919 --> 00:18:37,840
which is more secure the

589
00:18:37,840 --> 00:18:39,520
downside is if you want to verify

590
00:18:39,520 --> 00:18:41,440
whether these scripts are actually legit

591
00:18:41,440 --> 00:18:42,000
it is not

592
00:18:42,000 --> 00:18:44,480
an easy problem to solve but the bottom

593
00:18:44,480 --> 00:18:46,240
line is do you even know

594
00:18:46,240 --> 00:18:47,600
if this pattern is used in your

595
00:18:47,600 --> 00:18:49,440
organization

596
00:18:49,440 --> 00:18:53,200
here are some examples um here are some

597
00:18:53,200 --> 00:18:55,919
projects that use this pattern so that

598
00:18:55,919 --> 00:18:57,039
you know and i'm going to show you some

599
00:18:57,039 --> 00:18:58,799
examples later on

600
00:18:58,799 --> 00:19:01,039
azure you want to do the azure cli now

601
00:19:01,039 --> 00:19:02,880
to their defense is not the only way to

602
00:19:02,880 --> 00:19:03,919
install azure

603
00:19:03,919 --> 00:19:05,840
but if you want to install it from a

604
00:19:05,840 --> 00:19:08,240
script this is how you do it

605
00:19:08,240 --> 00:19:10,000
dell firmware update you want to update

606
00:19:10,000 --> 00:19:11,840
this particular server

607
00:19:11,840 --> 00:19:14,160
the way it's done is using a butch this

608
00:19:14,160 --> 00:19:16,000
particular script

609
00:19:16,000 --> 00:19:18,480
um firebase there's a client of google's

610
00:19:18,480 --> 00:19:19,120
firebase

611
00:19:19,120 --> 00:19:20,880
you want to install the tool this is how

612
00:19:20,880 --> 00:19:22,240
you do it again coming from a shell

613
00:19:22,240 --> 00:19:23,039
script

614
00:19:23,039 --> 00:19:24,480
obviously homebrew that i mentioned

615
00:19:24,480 --> 00:19:26,799
earlier pip is another example that i

616
00:19:26,799 --> 00:19:28,880
mentioned earlier as well

617
00:19:28,880 --> 00:19:32,000
rust rust is also you know it's a fairly

618
00:19:32,000 --> 00:19:32,480
new

619
00:19:32,480 --> 00:19:33,840
programming language becoming very you

620
00:19:33,840 --> 00:19:36,480
know very popular we install it is using

621
00:19:36,480 --> 00:19:39,600
one of these scripts now

622
00:19:39,600 --> 00:19:41,760
if you are doing install scripts and

623
00:19:41,760 --> 00:19:43,360
this is how you bootstrap

624
00:19:43,360 --> 00:19:46,400
if i'm an attacker what can i do so

625
00:19:46,400 --> 00:19:47,039
scripts

626
00:19:47,039 --> 00:19:48,960
just like every other piece of software

627
00:19:48,960 --> 00:19:50,720
comes from the original source code to a

628
00:19:50,720 --> 00:19:52,000
distribution point

629
00:19:52,000 --> 00:19:53,760
in codecov's example it ends up on some

630
00:19:53,760 --> 00:19:55,280
web server um

631
00:19:55,280 --> 00:19:57,600
unless you're doing direct downloads

632
00:19:57,600 --> 00:19:58,640
from

633
00:19:58,640 --> 00:20:00,880
a core a source code repository like for

634
00:20:00,880 --> 00:20:02,960
example in the homebrew case

635
00:20:02,960 --> 00:20:04,799
it's coming directly from github it's

636
00:20:04,799 --> 00:20:06,480
going to go through some third-party

637
00:20:06,480 --> 00:20:07,919
distribution point

638
00:20:07,919 --> 00:20:10,159
you could target anywhere any

639
00:20:10,159 --> 00:20:11,600
infrastructure along the way

640
00:20:11,600 --> 00:20:14,640
web servers or cdns so cdngs

641
00:20:14,640 --> 00:20:16,559
third-party cdn hosting javascript it

642
00:20:16,559 --> 00:20:18,240
copies the javascript from some source

643
00:20:18,240 --> 00:20:19,280
puts it on cdn

644
00:20:19,280 --> 00:20:21,280
on the cloudflare recent research has

645
00:20:21,280 --> 00:20:22,960
shown it can be compromised

646
00:20:22,960 --> 00:20:24,400
cloud buckets you see something in the

647
00:20:24,400 --> 00:20:26,000
cloud bucket you forget to configure it

648
00:20:26,000 --> 00:20:26,559
properly

649
00:20:26,559 --> 00:20:28,880
can be compromised twilio sdk that

650
00:20:28,880 --> 00:20:30,240
compromise that way

651
00:20:30,240 --> 00:20:32,320
codecof one of the underlying issues was

652
00:20:32,320 --> 00:20:33,520
some sort of a

653
00:20:33,520 --> 00:20:36,080
google cloud issue with the bucket build

654
00:20:36,080 --> 00:20:36,960
systems

655
00:20:36,960 --> 00:20:39,280
solarwinds if you look at the reports

656
00:20:39,280 --> 00:20:40,880
solar windows compromised by something

657
00:20:40,880 --> 00:20:42,000
being injected into their build

658
00:20:42,000 --> 00:20:42,880
environment

659
00:20:42,880 --> 00:20:44,799
original source code repository php

660
00:20:44,799 --> 00:20:46,480
recently had an attack directly on that

661
00:20:46,480 --> 00:20:48,080
git server

662
00:20:48,080 --> 00:20:49,760
you don't necessarily have to go after

663
00:20:49,760 --> 00:20:51,520
those systems directly you could go

664
00:20:51,520 --> 00:20:52,960
after the people who have access to

665
00:20:52,960 --> 00:20:54,480
those systems

666
00:20:54,480 --> 00:20:56,880
in my opinion these are novel attacks

667
00:20:56,880 --> 00:20:59,120
why because these things are not common

668
00:20:59,120 --> 00:21:01,039
shell scripts are not as common as for

669
00:21:01,039 --> 00:21:02,720
example npm module

670
00:21:02,720 --> 00:21:04,480
but you get a bigger bank for your buck

671
00:21:04,480 --> 00:21:06,320
if you're an attacker just think about

672
00:21:06,320 --> 00:21:08,159
what it would happen if ross installer

673
00:21:08,159 --> 00:21:10,320
or homebrew compromised even for a

674
00:21:10,320 --> 00:21:17,840
couple hours

675
00:21:20,000 --> 00:21:21,520
now that we know that these scripts

676
00:21:21,520 --> 00:21:23,280
exist and they represent

677
00:21:23,280 --> 00:21:25,679
some sort of a secure risk one of the

678
00:21:25,679 --> 00:21:26,880
other things that i

679
00:21:26,880 --> 00:21:29,200
want to research is if i want to do the

680
00:21:29,200 --> 00:21:30,080
right thing

681
00:21:30,080 --> 00:21:31,520
and to verify that these scripts are

682
00:21:31,520 --> 00:21:33,760
legit how do i do that

683
00:21:33,760 --> 00:21:37,520
let's say you want to do purification

684
00:21:37,520 --> 00:21:40,880
so i looked into how that can be done

685
00:21:40,880 --> 00:21:43,200
this is not an easy issue especially

686
00:21:43,200 --> 00:21:44,000
with cryptography

687
00:21:44,000 --> 00:21:46,559
pgp becomes very complex i did some

688
00:21:46,559 --> 00:21:47,600
tooling

689
00:21:47,600 --> 00:21:50,000
um i also when running it for several

690
00:21:50,000 --> 00:21:51,440
months i reached out to multiple

691
00:21:51,440 --> 00:21:52,880
projects and commercial vendors

692
00:21:52,880 --> 00:21:54,799
most unfortunately refused to implement

693
00:21:54,799 --> 00:21:56,159
the request because they did not

694
00:21:56,159 --> 00:21:57,520
consider the risk to be significant

695
00:21:57,520 --> 00:21:58,080
enough

696
00:21:58,080 --> 00:22:00,000
like i said earlier i do not blame them

697
00:22:00,000 --> 00:22:01,520
we are only aware of

698
00:22:01,520 --> 00:22:03,919
a handful of attacks on these particular

699
00:22:03,919 --> 00:22:04,799
scripts

700
00:22:04,799 --> 00:22:06,720
there's other issues that also came up

701
00:22:06,720 --> 00:22:08,320
but at the end of the day if you want to

702
00:22:08,320 --> 00:22:09,280
be secure

703
00:22:09,280 --> 00:22:12,080
what do you do easiest thing don't use

704
00:22:12,080 --> 00:22:12,720
them

705
00:22:12,720 --> 00:22:14,720
don't use the script in many cases

706
00:22:14,720 --> 00:22:16,080
there's another way to install something

707
00:22:16,080 --> 00:22:17,440
instead of using a script you could use

708
00:22:17,440 --> 00:22:19,760
a os package you could use

709
00:22:19,760 --> 00:22:22,400
a language package some offer official

710
00:22:22,400 --> 00:22:23,679
releases and binaries

711
00:22:23,679 --> 00:22:25,360
those are not perfect they can be

712
00:22:25,360 --> 00:22:26,640
compromised but they're not is

713
00:22:26,640 --> 00:22:27,679
necessarily

714
00:22:27,679 --> 00:22:29,280
compromised in the same way a lot of

715
00:22:29,280 --> 00:22:31,600
times they're harder to compromise

716
00:22:31,600 --> 00:22:33,919
there's also a formal release management

717
00:22:33,919 --> 00:22:35,840
scripts often don't have formula release

718
00:22:35,840 --> 00:22:37,280
management another version and they're

719
00:22:37,280 --> 00:22:38,320
not released

720
00:22:38,320 --> 00:22:40,400
former release management helps because

721
00:22:40,400 --> 00:22:41,840
you have a narrow

722
00:22:41,840 --> 00:22:43,520
pool of people who could do that as

723
00:22:43,520 --> 00:22:45,200
opposed to everybody who has access to

724
00:22:45,200 --> 00:22:46,320
the infrastructure

725
00:22:46,320 --> 00:22:48,159
if this is not again something that

726
00:22:48,159 --> 00:22:49,760
could be convenient in a lot of cases

727
00:22:49,760 --> 00:22:51,919
shell scripts are very convenient

728
00:22:51,919 --> 00:22:53,600
another option you will go directly to

729
00:22:53,600 --> 00:22:54,799
the source code

730
00:22:54,799 --> 00:22:57,520
like the homebrew case i showed earlier

731
00:22:57,520 --> 00:22:58,880
you could check the script directly from

732
00:22:58,880 --> 00:23:00,400
the source bypassing all of the third

733
00:23:00,400 --> 00:23:01,600
party infrastructure

734
00:23:01,600 --> 00:23:03,760
this relies on lions's law enough people

735
00:23:03,760 --> 00:23:05,840
see it someone will notice something

736
00:23:05,840 --> 00:23:07,520
the flip side is that when you have a

737
00:23:07,520 --> 00:23:08,720
source code repository with many

738
00:23:08,720 --> 00:23:10,240
committers only one commander needs to

739
00:23:10,240 --> 00:23:11,919
be compromised if it happens let's say

740
00:23:11,919 --> 00:23:13,200
at night when the other committees

741
00:23:13,200 --> 00:23:14,240
aren't there

742
00:23:14,240 --> 00:23:17,360
it could be you know fairly dangerous

743
00:23:17,360 --> 00:23:19,039
uh changes to source code all take

744
00:23:19,039 --> 00:23:20,799
effect immediately unlike when you have

745
00:23:20,799 --> 00:23:22,799
releases which takes time

746
00:23:22,799 --> 00:23:25,360
um this can happen as you know as soon

747
00:23:25,360 --> 00:23:26,960
as as soon as as soon as the attack

748
00:23:26,960 --> 00:23:28,159
happens

749
00:23:28,159 --> 00:23:30,960
um you can review the source manually

750
00:23:30,960 --> 00:23:31,919
you can save a

751
00:23:31,919 --> 00:23:33,840
good version um but a lot of these

752
00:23:33,840 --> 00:23:35,360
scripts are not versioned

753
00:23:35,360 --> 00:23:36,559
and therefore essentially what you're

754
00:23:36,559 --> 00:23:39,200
pulling is the latest and greatest

755
00:23:39,200 --> 00:23:41,840
and one example that i found um again

756
00:23:41,840 --> 00:23:43,440
this is an example of home brew

757
00:23:43,440 --> 00:23:44,960
again not blaming them this was a

758
00:23:44,960 --> 00:23:46,720
mistake back in 2020

759
00:23:46,720 --> 00:23:48,320
in 2012 one of the developers made a

760
00:23:48,320 --> 00:23:50,400
mistake and for about 10 minutes

761
00:23:50,400 --> 00:23:52,000
the homebrew script pointed to a

762
00:23:52,000 --> 00:23:53,600
different repository

763
00:23:53,600 --> 00:23:56,480
so as the result for 10 minutes somebody

764
00:23:56,480 --> 00:23:57,760
was downloading something else that was

765
00:23:57,760 --> 00:23:58,559
supposed to

766
00:23:58,559 --> 00:23:59,600
the developer originally finally

767
00:23:59,600 --> 00:24:01,840
reverted

768
00:24:01,840 --> 00:24:04,720
next another method checksums many

769
00:24:04,720 --> 00:24:06,080
projects publish exams

770
00:24:06,080 --> 00:24:08,320
so for example here's the case with code

771
00:24:08,320 --> 00:24:10,640
cop they were publishing a checksum file

772
00:24:10,640 --> 00:24:12,320
if you think about checksums are useless

773
00:24:12,320 --> 00:24:14,080
for security because an attacker can

774
00:24:14,080 --> 00:24:15,520
modify them but

775
00:24:15,520 --> 00:24:17,360
as the cold calf case is shown it is an

776
00:24:17,360 --> 00:24:18,880
extra barrier

777
00:24:18,880 --> 00:24:20,880
because the attacker has to be aware of

778
00:24:20,880 --> 00:24:22,240
it and go ahead and check

779
00:24:22,240 --> 00:24:24,240
you know change the file you could also

780
00:24:24,240 --> 00:24:25,760
choose to host the checksum to the

781
00:24:25,760 --> 00:24:27,039
separate server you could put them into

782
00:24:27,039 --> 00:24:28,320
the code repository

783
00:24:28,320 --> 00:24:29,679
now that that has to compromise two

784
00:24:29,679 --> 00:24:31,120
servers the same thing goes if you want

785
00:24:31,120 --> 00:24:32,400
to compare the script

786
00:24:32,400 --> 00:24:33,919
let's say you have a cdn you want to

787
00:24:33,919 --> 00:24:35,600
compare against the original there's

788
00:24:35,600 --> 00:24:36,400
another option

789
00:24:36,400 --> 00:24:37,919
there's also an option of doing this in

790
00:24:37,919 --> 00:24:39,600
the browser um

791
00:24:39,600 --> 00:24:42,320
sri if you do checksum in the browser

792
00:24:42,320 --> 00:24:42,960
where

793
00:24:42,960 --> 00:24:45,440
you know cdn suddenly changes that

794
00:24:45,440 --> 00:24:46,559
really works well

795
00:24:46,559 --> 00:24:49,679
but it only works because um you in the

796
00:24:49,679 --> 00:24:50,320
browser

797
00:24:50,320 --> 00:24:51,679
javascript components are usually

798
00:24:51,679 --> 00:24:53,520
versioned

799
00:24:53,520 --> 00:24:56,400
you could go a step further we can do

800
00:24:56,400 --> 00:24:57,279
cryptography

801
00:24:57,279 --> 00:25:01,279
so some oss can let you sign

802
00:25:01,279 --> 00:25:03,760
up things with a cia certificate

803
00:25:03,760 --> 00:25:05,679
chocolate uses this approach

804
00:25:05,679 --> 00:25:08,400
that uses the c infrastructure in the

805
00:25:08,400 --> 00:25:10,480
case of windows in the case of mac it

806
00:25:10,480 --> 00:25:10,880
uses

807
00:25:10,880 --> 00:25:13,279
apple's infrastructure there are issues

808
00:25:13,279 --> 00:25:14,799
with certificates you could get a stolen

809
00:25:14,799 --> 00:25:16,159
certificate you could get a legitimate

810
00:25:16,159 --> 00:25:17,600
certificate but it's still better than

811
00:25:17,600 --> 00:25:18,880
nothing and it's not

812
00:25:18,880 --> 00:25:22,000
it's not bad um because the pgp you

813
00:25:22,000 --> 00:25:23,279
could use pgp you could create a

814
00:25:23,279 --> 00:25:24,559
separate signature

815
00:25:24,559 --> 00:25:27,600
but it's not ca based so in a ca case

816
00:25:27,600 --> 00:25:28,559
you're relying on

817
00:25:28,559 --> 00:25:30,400
the fact that cas have some sort of

818
00:25:30,400 --> 00:25:32,720
checks in pgb's case

819
00:25:32,720 --> 00:25:34,880
the brown you run into ski distribution

820
00:25:34,880 --> 00:25:36,400
if you want to verify that a project is

821
00:25:36,400 --> 00:25:37,120
legit

822
00:25:37,120 --> 00:25:39,679
how do you distribute the key if you put

823
00:25:39,679 --> 00:25:41,600
it on the same server the attacker can

824
00:25:41,600 --> 00:25:42,320
change it

825
00:25:42,320 --> 00:25:44,720
if you have a pgp server those could be

826
00:25:44,720 --> 00:25:45,840
poisoned

827
00:25:45,840 --> 00:25:48,400
i have not seen yet attacks that involve

828
00:25:48,400 --> 00:25:49,679
compromised keys

829
00:25:49,679 --> 00:25:52,240
but it doesn't mean they cannot happen

830
00:25:52,240 --> 00:25:53,840
here's an example of chocolaty as you

831
00:25:53,840 --> 00:25:54,640
could see

832
00:25:54,640 --> 00:25:56,880
the chocolate script itself in the end

833
00:25:56,880 --> 00:25:59,440
has a couple of network signature

834
00:25:59,440 --> 00:26:01,600
here's an example of nyx os they're

835
00:26:01,600 --> 00:26:03,440
using pgp

836
00:26:03,440 --> 00:26:06,480
and when you are installing the original

837
00:26:06,480 --> 00:26:07,679
install script which is

838
00:26:07,679 --> 00:26:10,320
on top you can go ahead and pull the

839
00:26:10,320 --> 00:26:11,039
specific

840
00:26:11,039 --> 00:26:14,720
keys and signatures um they're using

841
00:26:14,720 --> 00:26:16,880
as you could see a key that's i didn't

842
00:26:16,880 --> 00:26:17,840
buy an id

843
00:26:17,840 --> 00:26:20,000
by fingerprint from a key server and you

844
00:26:20,000 --> 00:26:21,679
can actually verify that the script is

845
00:26:21,679 --> 00:26:23,200
legit

846
00:26:23,200 --> 00:26:25,679
in summary best thing is to avoid shell

847
00:26:25,679 --> 00:26:26,480
scripts

848
00:26:26,480 --> 00:26:28,559
and use package managers but it

849
00:26:28,559 --> 00:26:29,600
necessarily means

850
00:26:29,600 --> 00:26:31,520
as a safest option it's going to depend

851
00:26:31,520 --> 00:26:33,279
on a particular use case

852
00:26:33,279 --> 00:26:34,799
you could check sums you could download

853
00:26:34,799 --> 00:26:35,919
from source you could do comparison

854
00:26:35,919 --> 00:26:38,159
against version another version it helps

855
00:26:38,159 --> 00:26:40,240
as long as the attacker forgets to

856
00:26:40,240 --> 00:26:41,360
update both

857
00:26:41,360 --> 00:26:44,080
files or if it's hosted on both servers

858
00:26:44,080 --> 00:26:46,159
the priority cryptography works

859
00:26:46,159 --> 00:26:47,919
better than most of these approaches it

860
00:26:47,919 --> 00:26:49,520
is hard to set up and use and has its

861
00:26:49,520 --> 00:26:50,320
own issues

862
00:26:50,320 --> 00:26:52,080
like i said key distribution attacks for

863
00:26:52,080 --> 00:26:53,520
pgp

864
00:26:53,520 --> 00:26:55,760
ca certificates have issues as you could

865
00:26:55,760 --> 00:26:57,360
get an illegitimate certificate or you

866
00:26:57,360 --> 00:26:58,559
could steal a certificate

867
00:26:58,559 --> 00:26:59,760
most projects that i looked at do not

868
00:26:59,760 --> 00:27:01,919
provide any kind of signatures

869
00:27:01,919 --> 00:27:04,559
bottom line is organizations need to

870
00:27:04,559 --> 00:27:06,080
make their own decision if you're using

871
00:27:06,080 --> 00:27:06,880
these scripts

872
00:27:06,880 --> 00:27:08,640
and you want to verify them it is up to

873
00:27:08,640 --> 00:27:09,919
you to make a decision how to do it

874
00:27:09,919 --> 00:27:10,720
properly

875
00:27:10,720 --> 00:27:12,400
and we still need more work and more

876
00:27:12,400 --> 00:27:20,080
research on this particular area

877
00:27:20,080 --> 00:27:21,679
let's talk about tooling and i also want

878
00:27:21,679 --> 00:27:24,159
to share some things that i found

879
00:27:24,159 --> 00:27:27,200
so tooling one of the things that i

880
00:27:27,200 --> 00:27:29,200
wanted to find out if i want to do

881
00:27:29,200 --> 00:27:30,640
verification of the scripts

882
00:27:30,640 --> 00:27:33,120
in automated fashion how do i do that i

883
00:27:33,120 --> 00:27:34,880
also want to see how often these updates

884
00:27:34,880 --> 00:27:36,559
happen is there a lag

885
00:27:36,559 --> 00:27:38,240
between let's say a signature being

886
00:27:38,240 --> 00:27:39,760
updated and the actual file

887
00:27:39,760 --> 00:27:41,360
i want to monitor scripts for changes i

888
00:27:41,360 --> 00:27:43,520
was curious about what kind of changes

889
00:27:43,520 --> 00:27:45,200
happened install scripts

890
00:27:45,200 --> 00:27:47,039
the existing tooling wasn't really there

891
00:27:47,039 --> 00:27:48,559
i happen to write some of my own

892
00:27:48,559 --> 00:27:51,520
but it is kind of experimental uh the

893
00:27:51,520 --> 00:27:53,360
best way to do verification let's say

894
00:27:53,360 --> 00:27:56,080
using pgp is to use a tool like

895
00:27:56,080 --> 00:27:58,880
gpg directly those tools are not always

896
00:27:58,880 --> 00:27:59,760
easy to use

897
00:27:59,760 --> 00:28:01,440
one of the things that i ran into is it

898
00:28:01,440 --> 00:28:02,960
changes machine state

899
00:28:02,960 --> 00:28:05,120
when you download keys it changes the

900
00:28:05,120 --> 00:28:06,960
key ring on the machine you're using

901
00:28:06,960 --> 00:28:08,799
um i didn't want that i want something

902
00:28:08,799 --> 00:28:10,720
more clean there are ways to do that by

903
00:28:10,720 --> 00:28:12,080
using temporary directory but again i

904
00:28:12,080 --> 00:28:13,760
wanted something a little more cleaner

905
00:28:13,760 --> 00:28:16,159
i also want to have some configuration

906
00:28:16,159 --> 00:28:17,840
so i create a bunch of experimental

907
00:28:17,840 --> 00:28:18,559
tools

908
00:28:18,559 --> 00:28:20,080
um the first one is just a github

909
00:28:20,080 --> 00:28:21,679
project listing various different

910
00:28:21,679 --> 00:28:22,720
projects

911
00:28:22,720 --> 00:28:25,440
um using this this particular pattern

912
00:28:25,440 --> 00:28:28,880
there's a blog post this talk obviously

913
00:28:28,880 --> 00:28:30,960
also like a suite what i call ice trust

914
00:28:30,960 --> 00:28:31,919
it's a tool

915
00:28:31,919 --> 00:28:33,679
uh that lets you actually verify

916
00:28:33,679 --> 00:28:35,840
downloads some dashboarding around it

917
00:28:35,840 --> 00:28:37,360
and also there was another tool

918
00:28:37,360 --> 00:28:40,000
release auditor i found a bug in github

919
00:28:40,000 --> 00:28:41,360
uh which i'll talk about in

920
00:28:41,360 --> 00:28:42,880
a little bit but it's not really

921
00:28:42,880 --> 00:28:45,200
connected to the rest of the tooling

922
00:28:45,200 --> 00:28:46,880
what is the ice trust eyeshadows the

923
00:28:46,880 --> 00:28:48,480
python module lets you verify files you

924
00:28:48,480 --> 00:28:49,760
already downloaded so basically you're

925
00:28:49,760 --> 00:28:50,960
doing your curl you get

926
00:28:50,960 --> 00:28:54,240
wget and then you are using this tool by

927
00:28:54,240 --> 00:28:55,120
either comparing

928
00:28:55,120 --> 00:28:57,679
two different sources of script or

929
00:28:57,679 --> 00:28:59,840
you're doing a checksum file or pgp

930
00:28:59,840 --> 00:29:02,320
this is what i call canary mode where

931
00:29:02,320 --> 00:29:04,000
you could have json configuration files

932
00:29:04,000 --> 00:29:06,159
that can be run on a regular basis very

933
00:29:06,159 --> 00:29:07,039
useful for

934
00:29:07,039 --> 00:29:08,480
an open source project or a vendor

935
00:29:08,480 --> 00:29:10,799
that's publishing software wants to make

936
00:29:10,799 --> 00:29:12,720
sure that monitor

937
00:29:12,720 --> 00:29:14,720
make sure that the stuff doesn't change

938
00:29:14,720 --> 00:29:16,640
um some dashboarding example

939
00:29:16,640 --> 00:29:18,559
like nice visuals to see if you could

940
00:29:18,559 --> 00:29:20,080
see like multiple products at the same

941
00:29:20,080 --> 00:29:21,520
time there's some twitter account that

942
00:29:21,520 --> 00:29:22,000
also

943
00:29:22,000 --> 00:29:24,640
gets results under the hood uses github

944
00:29:24,640 --> 00:29:25,200
actions

945
00:29:25,200 --> 00:29:27,840
you could look take a look at the code

946
00:29:27,840 --> 00:29:29,440
github itself is used to

947
00:29:29,440 --> 00:29:32,559
store changes here's just

948
00:29:32,559 --> 00:29:35,360
an example i showed it earlier this is

949
00:29:35,360 --> 00:29:36,240
just a simple

950
00:29:36,240 --> 00:29:39,440
list of projects in the project what the

951
00:29:39,440 --> 00:29:40,000
script is

952
00:29:40,000 --> 00:29:41,679
if there's any particular integration

953
00:29:41,679 --> 00:29:43,279
linked to the original issue

954
00:29:43,279 --> 00:29:47,200
if it's known um ice trust istrust lets

955
00:29:47,200 --> 00:29:48,320
you

956
00:29:48,320 --> 00:29:51,200
essentially do things that you could do

957
00:29:51,200 --> 00:29:52,720
in gpg but a little bit easier

958
00:29:52,720 --> 00:29:54,159
if you could do gpg you should do it

959
00:29:54,159 --> 00:29:56,240
yourself for example here you do your

960
00:29:56,240 --> 00:29:56,960
curls

961
00:29:56,960 --> 00:29:58,320
or you download the files you download

962
00:29:58,320 --> 00:30:00,000
the signature and then you essentially

963
00:30:00,000 --> 00:30:00,320
run

964
00:30:00,320 --> 00:30:02,640
my tool against it with the key that's

965
00:30:02,640 --> 00:30:03,600
known

966
00:30:03,600 --> 00:30:05,200
if you want to use the key file itself

967
00:30:05,200 --> 00:30:06,399
you have to download it separately and

968
00:30:06,399 --> 00:30:07,679
you can do it that way again you could

969
00:30:07,679 --> 00:30:09,440
do this with gpg

970
00:30:09,440 --> 00:30:11,279
but i decided to do it this way because

971
00:30:11,279 --> 00:30:12,880
i wanted to

972
00:30:12,880 --> 00:30:14,399
script it in order to do this in a

973
00:30:14,399 --> 00:30:15,919
larger scale

974
00:30:15,919 --> 00:30:17,600
here's canary mode canary mode is where

975
00:30:17,600 --> 00:30:19,120
you have a json file json file

976
00:30:19,120 --> 00:30:20,880
essentially includes information about

977
00:30:20,880 --> 00:30:22,880
the project instead of doing the curls

978
00:30:22,880 --> 00:30:24,559
that matter and the curls yourself

979
00:30:24,559 --> 00:30:27,679
the tool will do it for you and it also

980
00:30:27,679 --> 00:30:28,480
outputs some

981
00:30:28,480 --> 00:30:31,600
data dashboarding this is a very simple

982
00:30:31,600 --> 00:30:33,440
github actions

983
00:30:33,440 --> 00:30:36,240
github pages jackal configuration takes

984
00:30:36,240 --> 00:30:37,440
the json file

985
00:30:37,440 --> 00:30:39,520
and what essentially this does is it

986
00:30:39,520 --> 00:30:40,960
looks at

987
00:30:40,960 --> 00:30:42,799
verification results on a regular basis

988
00:30:42,799 --> 00:30:44,240
you can also follow the links take a

989
00:30:44,240 --> 00:30:44,799
look at

990
00:30:44,799 --> 00:30:47,440
the file being changing um here's an

991
00:30:47,440 --> 00:30:48,480
example

992
00:30:48,480 --> 00:30:51,039
of file being changed yes codekov you

993
00:30:51,039 --> 00:30:52,720
could see that for example

994
00:30:52,720 --> 00:30:55,520
uh two days ago the version was changed

995
00:30:55,520 --> 00:30:56,480
um

996
00:30:56,480 --> 00:30:59,600
using the regular standard github blame

997
00:30:59,600 --> 00:31:02,080
and something a little more fancy is i

998
00:31:02,080 --> 00:31:02,960
trust

999
00:31:02,960 --> 00:31:05,519
uptime it is called an open source

1000
00:31:05,519 --> 00:31:07,600
project called apa pub time

1001
00:31:07,600 --> 00:31:09,600
it lets you essentially look at it kind

1002
00:31:09,600 --> 00:31:11,039
of like a status page

1003
00:31:11,039 --> 00:31:13,840
type thing um it also as you can see

1004
00:31:13,840 --> 00:31:14,720
here

1005
00:31:14,720 --> 00:31:17,279
it also lets you it opens up it issues

1006
00:31:17,279 --> 00:31:19,120
automatically to kind of track

1007
00:31:19,120 --> 00:31:22,000
historically what was changed what was

1008
00:31:22,000 --> 00:31:23,840
you know verification failing

1009
00:31:23,840 --> 00:31:25,840
uh twitter account just tells you you

1010
00:31:25,840 --> 00:31:27,120
know if i'll kind of change verification

1011
00:31:27,120 --> 00:31:28,960
fail verification passed

1012
00:31:28,960 --> 00:31:31,760
um how do now what i do with this with

1013
00:31:31,760 --> 00:31:32,559
these tools

1014
00:31:32,559 --> 00:31:34,480
so i'd recommend 25 projects to use this

1015
00:31:34,480 --> 00:31:36,240
pattern there's a whole bunch more that

1016
00:31:36,240 --> 00:31:37,519
i reached out

1017
00:31:37,519 --> 00:31:40,000
um still going through the disclosure i

1018
00:31:40,000 --> 00:31:41,600
can't talk about them yet

1019
00:31:41,600 --> 00:31:44,320
monitoring signatures on five projects

1020
00:31:44,320 --> 00:31:45,919
like i said most projects don't offer

1021
00:31:45,919 --> 00:31:47,279
cryptography

1022
00:31:47,279 --> 00:31:49,360
um also looking at where there's two

1023
00:31:49,360 --> 00:31:50,480
different copies looking

1024
00:31:50,480 --> 00:31:52,720
one against the other monitoring some

1025
00:31:52,720 --> 00:31:53,519
for changes

1026
00:31:53,519 --> 00:31:55,840
runs every six hours piping into all of

1027
00:31:55,840 --> 00:31:57,039
these different places

1028
00:31:57,039 --> 00:31:58,720
eventually looking at incorporating to

1029
00:31:58,720 --> 00:32:00,480
my own projects but

1030
00:32:00,480 --> 00:32:02,240
right now it's more of an experiment i

1031
00:32:02,240 --> 00:32:03,519
have been running this since

1032
00:32:03,519 --> 00:32:06,799
april what did i find

1033
00:32:06,799 --> 00:32:08,720
only my narrative projects offer a way

1034
00:32:08,720 --> 00:32:10,960
to do cryptograph cryptography

1035
00:32:10,960 --> 00:32:14,480
through pgp most project events are not

1036
00:32:14,480 --> 00:32:15,679
interesting to fix they don't consider

1037
00:32:15,679 --> 00:32:17,200
this issue to be important enough

1038
00:32:17,200 --> 00:32:19,120
although i suspect if these attacks

1039
00:32:19,120 --> 00:32:21,200
become more common that may change

1040
00:32:21,200 --> 00:32:22,720
there's usually better alternatives in

1041
00:32:22,720 --> 00:32:24,880
most projects but not all of them

1042
00:32:24,880 --> 00:32:26,960
raw github downloads is a fairly common

1043
00:32:26,960 --> 00:32:28,159
pattern

1044
00:32:28,159 --> 00:32:29,760
that's a lot how a lot of projects kind

1045
00:32:29,760 --> 00:32:31,360
of bypass those infrastructure

1046
00:32:31,360 --> 00:32:32,399
challenges

1047
00:32:32,399 --> 00:32:33,840
most of these scripts don't really

1048
00:32:33,840 --> 00:32:35,840
change very often or change in very

1049
00:32:35,840 --> 00:32:37,760
minor ways

1050
00:32:37,760 --> 00:32:39,919
some cases verification is not trivial

1051
00:32:39,919 --> 00:32:41,519
you have to parse them to get a version

1052
00:32:41,519 --> 00:32:42,720
number from the version now we have to

1053
00:32:42,720 --> 00:32:44,000
go to branch

1054
00:32:44,000 --> 00:32:46,880
there is a lag that happens sometimes

1055
00:32:46,880 --> 00:32:48,320
from the time a script is available

1056
00:32:48,320 --> 00:32:50,159
until the signature gets calculated

1057
00:32:50,159 --> 00:32:52,480
i suspect some projects haven't gotten

1058
00:32:52,480 --> 00:32:54,240
their release management done correctly

1059
00:32:54,240 --> 00:32:55,039
yet

1060
00:32:55,039 --> 00:32:56,799
the downside is that that happens and

1061
00:32:56,799 --> 00:32:58,640
you're doing verification automatically

1062
00:32:58,640 --> 00:33:00,799
the automation fails

1063
00:33:00,799 --> 00:33:02,399
there's often no formal release

1064
00:33:02,399 --> 00:33:05,440
management version for most scripts

1065
00:33:05,440 --> 00:33:09,039
the good thing is no supply chain index

1066
00:33:09,039 --> 00:33:10,480
i haven't found a single

1067
00:33:10,480 --> 00:33:13,679
um active attack as a result and it is

1068
00:33:13,679 --> 00:33:14,399
possible to

1069
00:33:14,399 --> 00:33:17,760
do monitoring on a larger scale

1070
00:33:17,760 --> 00:33:20,880
some incidental findings um above in

1071
00:33:20,880 --> 00:33:22,720
github you could go and modify a release

1072
00:33:22,720 --> 00:33:24,000
without anyone else knowing about

1073
00:33:24,000 --> 00:33:26,240
it i let github know they don't consider

1074
00:33:26,240 --> 00:33:27,840
it to be a bug i wrote this tool called

1075
00:33:27,840 --> 00:33:29,360
release order you could take a look at

1076
00:33:29,360 --> 00:33:29,919
it

1077
00:33:29,919 --> 00:33:32,720
um another surprise was firebase cli

1078
00:33:32,720 --> 00:33:34,080
from google for whatever reason it's

1079
00:33:34,080 --> 00:33:35,519
called google analytics

1080
00:33:35,519 --> 00:33:36,880
could be a privacy issue for those

1081
00:33:36,880 --> 00:33:38,559
people who are concerned

1082
00:33:38,559 --> 00:33:40,799
some scripts don't match the source code

1083
00:33:40,799 --> 00:33:42,799
when i want to do comparisons

1084
00:33:42,799 --> 00:33:44,159
there are some slight differences in the

1085
00:33:44,159 --> 00:33:46,159
source code it's a bit of a problem

1086
00:33:46,159 --> 00:33:47,840
because it's kind of hard to tell why

1087
00:33:47,840 --> 00:33:49,360
they differ

1088
00:33:49,360 --> 00:33:52,080
the research is still ongoing now what

1089
00:33:52,080 --> 00:33:53,279
can we take away

1090
00:33:53,279 --> 00:33:57,360
from this entire um you know journey

1091
00:33:57,360 --> 00:33:59,600
we need to have more awareness about

1092
00:33:59,600 --> 00:34:00,799
what's in our software

1093
00:34:00,799 --> 00:34:02,720
tooling and builds remember like i

1094
00:34:02,720 --> 00:34:04,799
mentioned earlier the poison diary

1095
00:34:04,799 --> 00:34:07,120
you need to know where the tools we're

1096
00:34:07,120 --> 00:34:08,079
using with

1097
00:34:08,079 --> 00:34:10,000
they keep their brains essentially the

1098
00:34:10,000 --> 00:34:11,760
usable subscripts in my opinion is

1099
00:34:11,760 --> 00:34:12,560
dangerous

1100
00:34:12,560 --> 00:34:14,879
they're so safer alternatives but you

1101
00:34:14,879 --> 00:34:16,159
have to validate your own risk

1102
00:34:16,159 --> 00:34:17,040
accordingly

1103
00:34:17,040 --> 00:34:20,000
not everyone agrees the same way and i

1104
00:34:20,000 --> 00:34:20,399
you know

1105
00:34:20,399 --> 00:34:22,079
can't say across the board this is

1106
00:34:22,079 --> 00:34:24,480
dangerous in every single case

1107
00:34:24,480 --> 00:34:26,399
it is possible to verify some scripts

1108
00:34:26,399 --> 00:34:28,639
however it's not a trivial case

1109
00:34:28,639 --> 00:34:30,639
you should prepared you must be prepared

1110
00:34:30,639 --> 00:34:32,719
for things that can break

1111
00:34:32,719 --> 00:34:34,320
if you are publishing scripts or

1112
00:34:34,320 --> 00:34:36,560
software yourself consider monitoring

1113
00:34:36,560 --> 00:34:37,359
them

1114
00:34:37,359 --> 00:34:39,839
you know for changes that could be an

1115
00:34:39,839 --> 00:34:41,199
additional control

1116
00:34:41,199 --> 00:34:43,280
a formal release management is important

1117
00:34:43,280 --> 00:34:44,879
uh these scripts don't necessarily have

1118
00:34:44,879 --> 00:34:46,960
formal release management in most cases

1119
00:34:46,960 --> 00:34:49,199
less people have access more you know

1120
00:34:49,199 --> 00:34:50,560
there's less things to compromise if

1121
00:34:50,560 --> 00:34:51,918
your former approval

1122
00:34:51,918 --> 00:34:53,199
if you have you know two people

1123
00:34:53,199 --> 00:34:55,199
approving it um

1124
00:34:55,199 --> 00:34:57,359
there's a lag between when the source

1125
00:34:57,359 --> 00:34:59,680
goes modified till it's published

1126
00:34:59,680 --> 00:35:01,359
use native tooling my tooling is

1127
00:35:01,359 --> 00:35:02,880
experimental you feel

1128
00:35:02,880 --> 00:35:04,160
feel free to play with it but it is

1129
00:35:04,160 --> 00:35:06,160
experimental and the

1130
00:35:06,160 --> 00:35:08,160
last thing is don't forget the rest of

1131
00:35:08,160 --> 00:35:09,760
the software supply chain

1132
00:35:09,760 --> 00:35:11,920
these scripts it was a fun project for

1133
00:35:11,920 --> 00:35:14,640
me but it's just one tiny corner of the

1134
00:35:14,640 --> 00:35:15,200
overall

1135
00:35:15,200 --> 00:35:22,000
software supply chain challenge

