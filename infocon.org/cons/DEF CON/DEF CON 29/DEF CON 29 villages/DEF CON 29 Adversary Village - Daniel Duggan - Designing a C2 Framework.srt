1
00:00:04,880 --> 00:00:07,279
hello everyone

2
00:00:05,920 --> 00:00:09,440
i hope you're all having a wonderful

3
00:00:07,279 --> 00:00:13,360
village welcome to my talk

4
00:00:09,440 --> 00:00:13,360
designing a c2 framework

5
00:00:15,440 --> 00:00:22,400
uh so my name is daniel duggan um

6
00:00:18,800 --> 00:00:22,400
otherwise known as rastamouse

7
00:00:23,920 --> 00:00:28,000
i'm the director of zero point security

8
00:00:26,160 --> 00:00:32,000
um you may have seen our

9
00:00:28,000 --> 00:00:34,160
red team ops course i blog over

10
00:00:32,000 --> 00:00:35,920
rastamast.me as well as on

11
00:00:34,160 --> 00:00:39,280
offensivedefense

12
00:00:35,920 --> 00:00:42,640
i'm on twitter github discord slack

13
00:00:39,280 --> 00:00:44,879
all the things if you want to uh

14
00:00:42,640 --> 00:00:45,920
get in touch with me after the talk by

15
00:00:44,879 --> 00:00:48,399
all means

16
00:00:45,920 --> 00:00:48,399
do so

17
00:00:52,000 --> 00:00:58,480
so what inspired this talk well

18
00:00:55,360 --> 00:01:02,000
it feels like to me prior to around

19
00:00:58,480 --> 00:01:06,400
2018 there weren't really that many

20
00:01:02,000 --> 00:01:10,479
um c2s or c2 frameworks available

21
00:01:06,400 --> 00:01:12,000
um the main commercial offering was

22
00:01:10,479 --> 00:01:13,280
probably called australia maybe a few

23
00:01:12,000 --> 00:01:15,280
others

24
00:01:13,280 --> 00:01:16,880
and there weren't that many open source

25
00:01:15,280 --> 00:01:20,479
frameworks either we had

26
00:01:16,880 --> 00:01:24,720
um powershell empire for a long time

27
00:01:20,479 --> 00:01:26,320
we have uh posh t2 for a long time

28
00:01:24,720 --> 00:01:27,840
and then covenant came along and some

29
00:01:26,320 --> 00:01:31,520
others came along

30
00:01:27,840 --> 00:01:35,680
and suddenly we just had this huge boom

31
00:01:31,520 --> 00:01:40,560
in these um c2

32
00:01:35,680 --> 00:01:42,640
tools um coming out

33
00:01:40,560 --> 00:01:43,840
we've also had a lot more commercial

34
00:01:42,640 --> 00:01:46,960
ones um

35
00:01:43,840 --> 00:01:50,640
as well so it seems to be

36
00:01:46,960 --> 00:01:52,799
an area of interest for sure and

37
00:01:50,640 --> 00:01:54,159
it's not um infrequent that i get

38
00:01:52,799 --> 00:01:57,360
approached and

39
00:01:54,159 --> 00:01:59,200
people are asking me if i've got any

40
00:01:57,360 --> 00:02:04,159
tips on how to

41
00:01:59,200 --> 00:02:04,159
build c2 and specifically in c sharp

42
00:02:04,320 --> 00:02:07,439
so i thought that this kind of talk

43
00:02:06,640 --> 00:02:12,239
would be uh

44
00:02:07,439 --> 00:02:14,640
helpful for those who were looking to

45
00:02:12,239 --> 00:02:16,160
you know take on the process of trying

46
00:02:14,640 --> 00:02:23,440
to

47
00:02:16,160 --> 00:02:26,319
put such a tool together

48
00:02:23,440 --> 00:02:29,520
now if you go over to uh the situate the

49
00:02:26,319 --> 00:02:33,200
c2 matrix

50
00:02:29,520 --> 00:02:37,040
um it's a a curated list of

51
00:02:33,200 --> 00:02:40,160
uh commercial and open source frameworks

52
00:02:37,040 --> 00:02:43,280
it now lists over 70 which is

53
00:02:40,160 --> 00:02:44,720
pretty astounding really and more than

54
00:02:43,280 --> 00:02:48,000
10 languages

55
00:02:44,720 --> 00:02:52,560
everything from python

56
00:02:48,000 --> 00:02:56,959
go rust c sharp ruby even power shell

57
00:02:52,560 --> 00:03:00,720
there's no uh shortage of variety

58
00:02:56,959 --> 00:03:01,519
and they all have different capabilities

59
00:03:00,720 --> 00:03:05,120
so

60
00:03:01,519 --> 00:03:07,840
some by default will be canova

61
00:03:05,120 --> 00:03:09,519
https and we'll go over dns and we'll go

62
00:03:07,840 --> 00:03:13,360
over

63
00:03:09,519 --> 00:03:13,760
um completely custom channels and some

64
00:03:13,360 --> 00:03:17,040
might

65
00:03:13,760 --> 00:03:20,319
ride on legitimate services like

66
00:03:17,040 --> 00:03:21,840
you know the dropbox is office 365

67
00:03:20,319 --> 00:03:24,239
different google services and things

68
00:03:21,840 --> 00:03:24,239
like that

69
00:03:24,400 --> 00:03:27,519
um if you're interested in learning more

70
00:03:27,040 --> 00:03:29,360
about

71
00:03:27,519 --> 00:03:30,560
some of the frameworks or some of the c2

72
00:03:29,360 --> 00:03:33,040
tools already out there

73
00:03:30,560 --> 00:03:34,640
i highly suggest you check out the

74
00:03:33,040 --> 00:03:38,640
matrix

75
00:03:34,640 --> 00:03:40,480
it has a really useful like um

76
00:03:38,640 --> 00:03:43,040
search tool i guess where you you plug

77
00:03:40,480 --> 00:03:46,080
in your requirements

78
00:03:43,040 --> 00:03:46,879
and it will recommend um some tools for

79
00:03:46,080 --> 00:03:50,000
you

80
00:03:46,879 --> 00:03:50,000
based on those requirements

81
00:03:52,000 --> 00:03:55,040
so let's take a step back and talk about

82
00:03:54,000 --> 00:03:58,400
c2

83
00:03:55,040 --> 00:04:01,519
what is c2 um

84
00:03:58,400 --> 00:04:03,760
well c2 is short for uh command and

85
00:04:01,519 --> 00:04:05,200
control

86
00:04:03,760 --> 00:04:06,799
you can imagine a scenario where you

87
00:04:05,200 --> 00:04:09,840
have um us

88
00:04:06,799 --> 00:04:12,879
cowboy operators and we have a target

89
00:04:09,840 --> 00:04:15,280
and the operator will

90
00:04:12,879 --> 00:04:16,079
deliver um some sort of implant or

91
00:04:15,280 --> 00:04:19,359
payload

92
00:04:16,079 --> 00:04:21,759
um sometimes also called a rat to that

93
00:04:19,359 --> 00:04:21,759
target

94
00:04:21,919 --> 00:04:26,400
and the operator needs to maintain some

95
00:04:24,800 --> 00:04:29,680
control over that

96
00:04:26,400 --> 00:04:31,600
over that implant somehow

97
00:04:29,680 --> 00:04:33,280
the implant needs to talk to the

98
00:04:31,600 --> 00:04:33,840
operator the operator needs to be able

99
00:04:33,280 --> 00:04:37,040
to

100
00:04:33,840 --> 00:04:38,639
give it commands and the implant needs

101
00:04:37,040 --> 00:04:43,840
to

102
00:04:38,639 --> 00:04:43,840
give the results back to the operator

103
00:04:44,880 --> 00:04:51,600
and the the model that is

104
00:04:48,000 --> 00:04:54,840
um used most i guess

105
00:04:51,600 --> 00:04:58,240
is to have some sort of um

106
00:04:54,840 --> 00:04:58,639
intermediary control server um often

107
00:04:58,240 --> 00:05:02,880
called

108
00:04:58,639 --> 00:05:06,160
a team server so the implant will

109
00:05:02,880 --> 00:05:09,199
communicate to the um team server

110
00:05:06,160 --> 00:05:10,320
over some sort of protocol again that

111
00:05:09,199 --> 00:05:15,120
might be http

112
00:05:10,320 --> 00:05:18,240
or dns or some other legit service

113
00:05:15,120 --> 00:05:21,759
and the operator will have you know

114
00:05:18,240 --> 00:05:25,360
some sort of admin interface

115
00:05:21,759 --> 00:05:26,800
to that control server so the implant

116
00:05:25,360 --> 00:05:28,000
will talk to the control server and it

117
00:05:26,800 --> 00:05:31,680
will kind of

118
00:05:28,000 --> 00:05:33,360
appear to the operator

119
00:05:31,680 --> 00:05:35,680
and the operator will be able to give it

120
00:05:33,360 --> 00:05:37,520
tasks

121
00:05:35,680 --> 00:05:39,199
the implant will grab those tasks from

122
00:05:37,520 --> 00:05:43,039
the server execute them

123
00:05:39,199 --> 00:05:43,039
and send send the results back

124
00:05:43,840 --> 00:05:50,800
it's worth noting that some

125
00:05:47,440 --> 00:05:55,680
of these servers have the

126
00:05:50,800 --> 00:05:55,680
admin interface kind of built into them

127
00:05:55,759 --> 00:05:58,960
while others require the operators to

128
00:05:57,680 --> 00:06:02,000
have

129
00:05:58,960 --> 00:06:05,280
um a standalone client

130
00:06:02,000 --> 00:06:08,400
that will connect to that um

131
00:06:05,280 --> 00:06:08,400
to that server for them

132
00:06:09,680 --> 00:06:16,319
so um conceptually not too complicated

133
00:06:13,759 --> 00:06:17,919
however the point of this talk is about

134
00:06:16,319 --> 00:06:21,600
designing

135
00:06:17,919 --> 00:06:24,800
a c2 framework not just designing c2

136
00:06:21,600 --> 00:06:27,120
and we need to understand specifically

137
00:06:24,800 --> 00:06:31,440
for the purposes of this talk that c2

138
00:06:27,120 --> 00:06:31,440
is not the same as a framework

139
00:06:32,000 --> 00:06:35,680
so if you go into the matrix again for

140
00:06:33,600 --> 00:06:39,440
example you'll see a lot of

141
00:06:35,680 --> 00:06:41,840
c2 tools that don't

142
00:06:39,440 --> 00:06:44,960
really readily provide that much

143
00:06:41,840 --> 00:06:49,280
flexibility to the operator

144
00:06:44,960 --> 00:06:53,520
um you know maybe a lot of those tools

145
00:06:49,280 --> 00:06:57,120
were designed in mind with i want to

146
00:06:53,520 --> 00:06:59,759
demonstrate being able to use c2 over

147
00:06:57,120 --> 00:07:00,160
office 365 for example and that's pretty

148
00:06:59,759 --> 00:07:03,840
much

149
00:07:00,160 --> 00:07:03,840
all it's capable of

150
00:07:04,240 --> 00:07:10,000
and to me that's not really a framework

151
00:07:07,039 --> 00:07:13,440
and this is all about frameworks

152
00:07:10,000 --> 00:07:16,560
so what does a framework provide well

153
00:07:13,440 --> 00:07:17,680
they're quite clearly listed here um so

154
00:07:16,560 --> 00:07:22,000
let's go through them

155
00:07:17,680 --> 00:07:25,520
the first is inversion of control

156
00:07:22,000 --> 00:07:28,800
now the overall flow of the program

157
00:07:25,520 --> 00:07:30,080
or the uh the programs that are involved

158
00:07:28,800 --> 00:07:33,280
in this whole process

159
00:07:30,080 --> 00:07:36,319
and not strictly uh controlled by

160
00:07:33,280 --> 00:07:38,080
the user so the flow

161
00:07:36,319 --> 00:07:39,520
is that the implant is going to talk to

162
00:07:38,080 --> 00:07:41,680
a server

163
00:07:39,520 --> 00:07:42,880
and the operator is going to task that

164
00:07:41,680 --> 00:07:44,879
implant and

165
00:07:42,880 --> 00:07:46,560
you know you've got that back and forth

166
00:07:44,879 --> 00:07:48,319
now that is a flow that's not controlled

167
00:07:46,560 --> 00:07:51,360
by the user

168
00:07:48,319 --> 00:07:53,520
you also have

169
00:07:51,360 --> 00:07:57,039
on the server side and on the implant

170
00:07:53,520 --> 00:07:59,840
side a lot of internal flows

171
00:07:57,039 --> 00:08:01,919
so the implant will receive a job it'll

172
00:07:59,840 --> 00:08:03,120
process it in some way and then send the

173
00:08:01,919 --> 00:08:07,039
results back

174
00:08:03,120 --> 00:08:10,639
that internal flow is not controlled by

175
00:08:07,039 --> 00:08:14,080
the operator um and

176
00:08:10,639 --> 00:08:16,800
a lot of flows

177
00:08:14,080 --> 00:08:18,000
internal to the team server are not

178
00:08:16,800 --> 00:08:20,000
necessarily going to be controlled by

179
00:08:18,000 --> 00:08:22,000
the user

180
00:08:20,000 --> 00:08:24,560
a framework also provides default

181
00:08:22,000 --> 00:08:24,560
behaviors

182
00:08:24,720 --> 00:08:29,280
but most importantly those are behaviors

183
00:08:27,759 --> 00:08:32,800
that can be

184
00:08:29,280 --> 00:08:32,800
overridden by the operator

185
00:08:33,200 --> 00:08:36,240
so again we're talking about the

186
00:08:34,959 --> 00:08:39,200
protocol that the

187
00:08:36,240 --> 00:08:41,519
implant is talking over or the protocol

188
00:08:39,200 --> 00:08:44,320
that teams here was listening on

189
00:08:41,519 --> 00:08:45,200
a framework may provide a default

190
00:08:44,320 --> 00:08:48,800
protocol for that

191
00:08:45,200 --> 00:08:50,959
such as http but the operator should be

192
00:08:48,800 --> 00:08:54,320
allowed to

193
00:08:50,959 --> 00:08:56,080
override that in some way either

194
00:08:54,320 --> 00:08:57,600
change the behaviors within that

195
00:08:56,080 --> 00:09:00,240
protocol

196
00:08:57,600 --> 00:09:02,800
or add their own complete custom

197
00:09:00,240 --> 00:09:06,839
protocols

198
00:09:02,800 --> 00:09:08,240
a framework also provides um

199
00:09:06,839 --> 00:09:12,160
extensibility

200
00:09:08,240 --> 00:09:16,560
and that is to introduce new

201
00:09:12,160 --> 00:09:19,760
behaviors and capabilities that are not

202
00:09:16,560 --> 00:09:20,240
currently within toolset so if you think

203
00:09:19,760 --> 00:09:23,360
about

204
00:09:20,240 --> 00:09:23,839
implants you might write your implant

205
00:09:23,360 --> 00:09:26,880
with

206
00:09:23,839 --> 00:09:29,760
a couple of commands but

207
00:09:26,880 --> 00:09:32,080
it needs to be able to be customizable

208
00:09:29,760 --> 00:09:33,600
for the operator they need to be able to

209
00:09:32,080 --> 00:09:35,519
add their own commands if they want

210
00:09:33,600 --> 00:09:38,560
their own capabilities their own

211
00:09:35,519 --> 00:09:39,600
post exploitation capabilities and they

212
00:09:38,560 --> 00:09:41,360
also need to be able to do that on the

213
00:09:39,600 --> 00:09:44,800
server side as well

214
00:09:41,360 --> 00:09:47,680
so if you have um something like

215
00:09:44,800 --> 00:09:48,800
you want reverse port forwarding on your

216
00:09:47,680 --> 00:09:50,560
implant

217
00:09:48,800 --> 00:09:52,160
you need to be able to introduce that

218
00:09:50,560 --> 00:09:53,760
capability to the implant

219
00:09:52,160 --> 00:09:55,519
the implant needs to send that data to

220
00:09:53,760 --> 00:09:58,080
the

221
00:09:55,519 --> 00:09:59,360
somewhere probably the team server the

222
00:09:58,080 --> 00:10:00,880
team server needs to

223
00:09:59,360 --> 00:10:02,800
relay that traffic to wherever it needs

224
00:10:00,880 --> 00:10:04,079
to go and then it needs to send that

225
00:10:02,800 --> 00:10:08,320
traffic back

226
00:10:04,079 --> 00:10:12,160
so both sides of that process

227
00:10:08,320 --> 00:10:14,880
need to be extensible by the operator to

228
00:10:12,160 --> 00:10:16,800
accommodate that

229
00:10:14,880 --> 00:10:19,839
a framework also provides reusable

230
00:10:16,800 --> 00:10:19,839
components which

231
00:10:21,760 --> 00:10:26,000
i think is self-explanatory but they're

232
00:10:24,560 --> 00:10:27,120
they're components that the framework

233
00:10:26,000 --> 00:10:30,720
provides to

234
00:10:27,120 --> 00:10:33,440
make the operators live easier

235
00:10:30,720 --> 00:10:36,079
and we'll see an example of that on the

236
00:10:33,440 --> 00:10:38,079
next slide

237
00:10:36,079 --> 00:10:41,120
so this is an example i've taken from

238
00:10:38,079 --> 00:10:44,399
the metaphor framework

239
00:10:41,120 --> 00:10:46,880
metasploit is a very mature product at

240
00:10:44,399 --> 00:10:49,760
this point and it's great to look at

241
00:10:46,880 --> 00:10:50,240
um if we're looking for inspiration on

242
00:10:49,760 --> 00:10:53,600
those

243
00:10:50,240 --> 00:10:53,600
frameworky things

244
00:10:53,920 --> 00:10:58,000
but if you're not familiar with maxploy

245
00:10:56,560 --> 00:11:00,640
anybody can

246
00:10:58,000 --> 00:11:01,600
write a module for it anybody can write

247
00:11:00,640 --> 00:11:05,519
an

248
00:11:01,600 --> 00:11:05,519
immersion module or an exploit module

249
00:11:06,240 --> 00:11:10,720
for that framework for other people to

250
00:11:08,399 --> 00:11:10,720
use

251
00:11:10,800 --> 00:11:14,560
and being a framework it provides a lot

252
00:11:13,120 --> 00:11:17,279
of helpers for you to

253
00:11:14,560 --> 00:11:19,040
you know in writing those modules so

254
00:11:17,279 --> 00:11:23,760
this example is taken from the ps

255
00:11:19,040 --> 00:11:25,760
exec module and

256
00:11:23,760 --> 00:11:28,240
the first thing you do in a module is to

257
00:11:25,760 --> 00:11:31,200
define some module information

258
00:11:28,240 --> 00:11:32,640
so this includes you know a name a

259
00:11:31,200 --> 00:11:36,880
description

260
00:11:32,640 --> 00:11:40,839
your an author or multiple authors

261
00:11:36,880 --> 00:11:43,839
references and so on and so forth

262
00:11:40,839 --> 00:11:45,680
and that information

263
00:11:43,839 --> 00:11:47,120
from the module is picked up by the rest

264
00:11:45,680 --> 00:11:48,800
of the framework

265
00:11:47,120 --> 00:11:50,240
so that as the operator whilst you're

266
00:11:48,800 --> 00:11:52,880
using the ui

267
00:11:50,240 --> 00:11:55,680
and you search for a module you can you

268
00:11:52,880 --> 00:11:57,440
know search it by name or whatever

269
00:11:55,680 --> 00:11:59,200
and then it comes up and you can see the

270
00:11:57,440 --> 00:12:01,680
name you can see its description and a

271
00:11:59,200 --> 00:12:06,720
bunch of other things

272
00:12:01,680 --> 00:12:11,440
uh you can also register options

273
00:12:06,720 --> 00:12:14,320
so this being a um a ps exec module

274
00:12:11,440 --> 00:12:15,760
the author here has said well you can

275
00:12:14,320 --> 00:12:19,360
define

276
00:12:15,760 --> 00:12:21,360
options for the service name um

277
00:12:19,360 --> 00:12:22,639
paths and a bunch of other things that

278
00:12:21,360 --> 00:12:25,760
are you know

279
00:12:22,639 --> 00:12:28,320
important to that module but more

280
00:12:25,760 --> 00:12:31,279
importantly

281
00:12:28,320 --> 00:12:31,920
there are some options that you don't

282
00:12:31,279 --> 00:12:35,120
have to

283
00:12:31,920 --> 00:12:38,240
explicitly define in the module

284
00:12:35,120 --> 00:12:40,560
so the framework knows that this is like

285
00:12:38,240 --> 00:12:42,079
a remote exploit module or whatever it

286
00:12:40,560 --> 00:12:46,800
knows that it needs

287
00:12:42,079 --> 00:12:48,720
the r host or you know your targets

288
00:12:46,800 --> 00:12:51,200
and the operator or the author of the

289
00:12:48,720 --> 00:12:54,079
module doesn't need to specifically put

290
00:12:51,200 --> 00:12:56,000
our host in as an option the framework

291
00:12:54,079 --> 00:12:58,639
already knows that that's required

292
00:12:56,000 --> 00:13:00,240
so that takes you know that burden off

293
00:12:58,639 --> 00:13:03,839
the operator

294
00:13:00,240 --> 00:13:07,200
or the author and you also have

295
00:13:03,839 --> 00:13:07,519
includes and helpers which are down here

296
00:13:07,200 --> 00:13:10,480
so

297
00:13:07,519 --> 00:13:13,600
these includes are other exploit modules

298
00:13:10,480 --> 00:13:17,440
that you can bring into your module

299
00:13:13,600 --> 00:13:20,399
and because this module is

300
00:13:17,440 --> 00:13:22,480
using you know smp is exec and smb

301
00:13:20,399 --> 00:13:24,800
there's already a module for that

302
00:13:22,480 --> 00:13:27,519
so you don't have to actually implement

303
00:13:24,800 --> 00:13:28,560
an entire smb library in your module or

304
00:13:27,519 --> 00:13:32,079
even

305
00:13:28,560 --> 00:13:34,800
the ps exec process in your module

306
00:13:32,079 --> 00:13:35,760
it's bringing in powershell and xs

307
00:13:34,800 --> 00:13:38,560
because you know

308
00:13:35,760 --> 00:13:41,440
you need to execute something so as the

309
00:13:38,560 --> 00:13:43,839
module author you don't even have to

310
00:13:41,440 --> 00:13:46,839
worry about the payload that you're

311
00:13:43,839 --> 00:13:48,079
going to send the framework does it for

312
00:13:46,839 --> 00:13:51,760
you

313
00:13:48,079 --> 00:13:55,120
um and you can see here that uh

314
00:13:51,760 --> 00:13:58,800
the uh service file name so this is um

315
00:13:55,120 --> 00:14:02,079
service file name here is an option

316
00:13:58,800 --> 00:14:05,360
if you haven't you know defined this

317
00:14:02,079 --> 00:14:07,360
option it takes the defaults and so

318
00:14:05,360 --> 00:14:11,040
these are the default behaviors

319
00:14:07,360 --> 00:14:13,120
so if you haven't uh provided a name

320
00:14:11,040 --> 00:14:14,079
it will pick it'll just make a random

321
00:14:13,120 --> 00:14:17,839
one for you

322
00:14:14,079 --> 00:14:20,800
and this rand text alpha is

323
00:14:17,839 --> 00:14:22,320
um another module in the framework so

324
00:14:20,800 --> 00:14:23,839
you don't have to worry about oh okay

325
00:14:22,320 --> 00:14:25,360
well i want a random string now i have

326
00:14:23,839 --> 00:14:29,199
to write a function for that

327
00:14:25,360 --> 00:14:31,600
it's in the framework already and

328
00:14:29,199 --> 00:14:33,440
those are the biggest strengths of

329
00:14:31,600 --> 00:14:36,320
frameworks

330
00:14:33,440 --> 00:14:38,320
is that as the module author they allow

331
00:14:36,320 --> 00:14:40,639
you just to focus on

332
00:14:38,320 --> 00:14:41,839
the task that you want and not worry

333
00:14:40,639 --> 00:14:43,440
about

334
00:14:41,839 --> 00:14:45,839
you know things that you don't want to

335
00:14:43,440 --> 00:14:45,839
worry about

336
00:14:47,600 --> 00:14:50,880
okay so where to start

337
00:14:51,199 --> 00:14:56,320
well this is like it seems pretty uh

338
00:14:54,800 --> 00:14:57,279
cliche but

339
00:14:56,320 --> 00:15:01,360
the first thing you should really

340
00:14:57,279 --> 00:15:04,639
understand is what are your motivations

341
00:15:01,360 --> 00:15:05,680
um what does success look like and that

342
00:15:04,639 --> 00:15:08,959
kind of sounds like

343
00:15:05,680 --> 00:15:12,320
we're at some sort of management retreat

344
00:15:08,959 --> 00:15:13,519
but um you kind of really need to think

345
00:15:12,320 --> 00:15:14,079
about what you're actually trying to

346
00:15:13,519 --> 00:15:17,360
achieve

347
00:15:14,079 --> 00:15:18,560
because you need to build it

348
00:15:17,360 --> 00:15:21,199
and you need to know what it's going to

349
00:15:18,560 --> 00:15:23,120
look like at the end so you know

350
00:15:21,199 --> 00:15:24,720
you might be doing this just for fun you

351
00:15:23,120 --> 00:15:27,120
might be doing it just to teach yourself

352
00:15:24,720 --> 00:15:31,199
some stuff you might want it to

353
00:15:27,120 --> 00:15:33,120
teach other people um

354
00:15:31,199 --> 00:15:34,560
you might be writing an internal tool if

355
00:15:33,120 --> 00:15:38,880
you're like a pen tester or

356
00:15:34,560 --> 00:15:40,079
a red teamer you might even want to sell

357
00:15:38,880 --> 00:15:44,000
it you might want to open

358
00:15:40,079 --> 00:15:46,240
source it um

359
00:15:44,000 --> 00:15:48,240
and if i had to draw like some sort of

360
00:15:46,240 --> 00:15:49,519
parallel i'd think about

361
00:15:48,240 --> 00:15:50,880
if you were going to build a car it's

362
00:15:49,519 --> 00:15:53,199
very easy to say i'm going to build a

363
00:15:50,880 --> 00:15:53,199
car

364
00:15:53,519 --> 00:15:57,759
but there are a lot of different types

365
00:15:54,720 --> 00:16:01,040
of cart right if you

366
00:15:57,759 --> 00:16:01,440
want something to take your family to

367
00:16:01,040 --> 00:16:03,199
the

368
00:16:01,440 --> 00:16:05,759
beach you probably don't want a mclaren

369
00:16:03,199 --> 00:16:07,199
p1 and likewise if you want to go

370
00:16:05,759 --> 00:16:09,040
around the nurburgring pretty quick you

371
00:16:07,199 --> 00:16:12,800
probably don't want

372
00:16:09,040 --> 00:16:14,800
i don't know some sort of absurd people

373
00:16:12,800 --> 00:16:17,519
carrier

374
00:16:14,800 --> 00:16:18,880
so even though they're both cars they

375
00:16:17,519 --> 00:16:19,680
are quite different and they have

376
00:16:18,880 --> 00:16:24,720
different

377
00:16:19,680 --> 00:16:28,320
features to you know

378
00:16:24,720 --> 00:16:28,320
make that goal a reality

379
00:16:28,959 --> 00:16:32,959
and there are all sorts of things that

380
00:16:30,240 --> 00:16:34,639
you you could think oh that would be

381
00:16:32,959 --> 00:16:35,519
really cool to have in my framework that

382
00:16:34,639 --> 00:16:39,680
would be

383
00:16:35,519 --> 00:16:42,959
you know but if it doesn't

384
00:16:39,680 --> 00:16:45,360
you know contribute towards

385
00:16:42,959 --> 00:16:47,759
what you're actually trying to achieve

386
00:16:45,360 --> 00:16:50,959
then it's kind of pointless

387
00:16:47,759 --> 00:16:54,000
and if you

388
00:16:50,959 --> 00:16:55,199
miss features that you need then you're

389
00:16:54,000 --> 00:16:56,320
not going to achieve your goal and

390
00:16:55,199 --> 00:16:59,040
you're going to end up with something

391
00:16:56,320 --> 00:16:59,040
that you didn't want

392
00:17:00,240 --> 00:17:07,360
so if you've never seen moscow

393
00:17:04,160 --> 00:17:08,640
this is a pretty good way to try and

394
00:17:07,360 --> 00:17:12,160
narrow down

395
00:17:08,640 --> 00:17:12,480
what you think you want so this stands

396
00:17:12,160 --> 00:17:15,039
for

397
00:17:12,480 --> 00:17:16,160
must have could have oh sorry must have

398
00:17:15,039 --> 00:17:18,559
should have

399
00:17:16,160 --> 00:17:19,439
could have and won't have so your

400
00:17:18,559 --> 00:17:21,839
must-haves

401
00:17:19,439 --> 00:17:22,720
are like mandatory things right these

402
00:17:21,839 --> 00:17:26,720
are things that

403
00:17:22,720 --> 00:17:30,720
your framework absolutely has to have to

404
00:17:26,720 --> 00:17:30,720
uh perform its function

405
00:17:31,520 --> 00:17:38,400
uh should haves are important and they

406
00:17:35,120 --> 00:17:39,039
they add significant value but they are

407
00:17:38,400 --> 00:17:42,559
not

408
00:17:39,039 --> 00:17:46,240
uh strictly mandatory um

409
00:17:42,559 --> 00:17:49,360
to function could haves are

410
00:17:46,240 --> 00:17:52,720
nice to haves but not really important

411
00:17:49,360 --> 00:17:56,799
and won't haves are least critical

412
00:17:52,720 --> 00:17:59,280
inappropriate or um undesirable

413
00:17:56,799 --> 00:18:00,160
and like the won't have you can split

414
00:17:59,280 --> 00:18:03,440
into

415
00:18:00,160 --> 00:18:06,960
kind of two camps i guess you can have

416
00:18:03,440 --> 00:18:10,000
won't haves like period and won't have

417
00:18:06,960 --> 00:18:11,200
this time and i'll sort of expand on

418
00:18:10,000 --> 00:18:15,840
this time

419
00:18:11,200 --> 00:18:15,840
um in a minute

420
00:18:16,799 --> 00:18:19,919
so what you really want to do is you

421
00:18:18,160 --> 00:18:22,000
want to get your goals straight

422
00:18:19,919 --> 00:18:22,960
and think about all the things that you

423
00:18:22,000 --> 00:18:26,080
think you

424
00:18:22,960 --> 00:18:27,840
might want in your tool

425
00:18:26,080 --> 00:18:29,120
um you can also take inspiration from

426
00:18:27,840 --> 00:18:31,200
other frameworks as well

427
00:18:29,120 --> 00:18:33,919
and tooling that's perfectly okay i

428
00:18:31,200 --> 00:18:36,400
don't think that's cheating

429
00:18:33,919 --> 00:18:37,679
because you kind of want the best parts

430
00:18:36,400 --> 00:18:40,960
of everything

431
00:18:37,679 --> 00:18:43,440
and you know why

432
00:18:40,960 --> 00:18:44,640
reinvent the wheel sometimes you can

433
00:18:43,440 --> 00:18:47,039
take good ideas from

434
00:18:44,640 --> 00:18:49,280
all sorts of places and that's perfectly

435
00:18:47,039 --> 00:18:51,280
fine in my book

436
00:18:49,280 --> 00:18:52,559
and then what you want to do is narrow

437
00:18:51,280 --> 00:18:55,760
everything down to

438
00:18:52,559 --> 00:18:59,120
an attainable first release

439
00:18:55,760 --> 00:19:01,840
using that moscow

440
00:18:59,120 --> 00:19:04,880
method and by attainable i mean

441
00:19:01,840 --> 00:19:08,559
attainable within your current skill set

442
00:19:04,880 --> 00:19:08,559
and your time budget

443
00:19:08,799 --> 00:19:12,480
and i think uh a mistake that a lot of

444
00:19:11,280 --> 00:19:15,360
people make

445
00:19:12,480 --> 00:19:17,039
is to look at things that have been out

446
00:19:15,360 --> 00:19:19,440
there for a long time so you look at

447
00:19:17,039 --> 00:19:21,440
empire you look at mass block framework

448
00:19:19,440 --> 00:19:23,120
and you look at covenant posh c2 and all

449
00:19:21,440 --> 00:19:25,039
of those well-established

450
00:19:23,120 --> 00:19:26,160
projects and they think that's what i

451
00:19:25,039 --> 00:19:28,640
want to build

452
00:19:26,160 --> 00:19:30,960
i'm going to build like my version of

453
00:19:28,640 --> 00:19:32,960
that framework

454
00:19:30,960 --> 00:19:34,720
but the thing is those projects they

455
00:19:32,960 --> 00:19:35,280
didn't get there overnight they didn't

456
00:19:34,720 --> 00:19:38,080
just

457
00:19:35,280 --> 00:19:39,360
pop out of nowhere at the quality that

458
00:19:38,080 --> 00:19:42,880
they are now

459
00:19:39,360 --> 00:19:44,400
some of them are months or years old

460
00:19:42,880 --> 00:19:46,960
so if you're trying to replicate that

461
00:19:44,400 --> 00:19:49,840
straight off the bat

462
00:19:46,960 --> 00:19:53,039
you know you've probably got easily six

463
00:19:49,840 --> 00:19:54,080
or twelve months worth of work

464
00:19:53,039 --> 00:19:56,320
and what you're going to do is you're

465
00:19:54,080 --> 00:19:58,080
going to work on it for i don't know a

466
00:19:56,320 --> 00:19:59,280
couple of months or however long you can

467
00:19:58,080 --> 00:20:00,799
stand

468
00:19:59,280 --> 00:20:02,320
you're going to get fed up with it

469
00:20:00,799 --> 00:20:03,039
you're going to get demotivated and then

470
00:20:02,320 --> 00:20:06,080
you're just going to

471
00:20:03,039 --> 00:20:07,520
put it to the side

472
00:20:06,080 --> 00:20:09,679
you'll come back to it maybe it's

473
00:20:07,520 --> 00:20:11,280
important you look at it you'll look at

474
00:20:09,679 --> 00:20:14,559
it and you'll think well

475
00:20:11,280 --> 00:20:16,640
i've only done about 20 of what i hoped

476
00:20:14,559 --> 00:20:18,799
to achieve

477
00:20:16,640 --> 00:20:22,240
and you're probably not going to pick it

478
00:20:18,799 --> 00:20:26,080
up again and it's going to end up in the

479
00:20:22,240 --> 00:20:29,120
software graveyard so

480
00:20:26,080 --> 00:20:30,240
small iterative releases are easily more

481
00:20:29,120 --> 00:20:33,280
achievable

482
00:20:30,240 --> 00:20:35,840
and far more likely to keep you

483
00:20:33,280 --> 00:20:35,840
motivated

484
00:20:36,320 --> 00:20:40,960
um and you're also going to grow your

485
00:20:39,440 --> 00:20:43,840
project with your skill set i mean you

486
00:20:40,960 --> 00:20:46,720
can you look at a lot of features in

487
00:20:43,840 --> 00:20:48,320
a lot of advanced frameworks now and you

488
00:20:46,720 --> 00:20:52,000
i mean they're pretty they're pretty

489
00:20:48,320 --> 00:20:54,880
like advanced concepts so if you're uh

490
00:20:52,000 --> 00:20:55,679
if you're doing this to teach yourself

491
00:20:54,880 --> 00:20:58,240
um

492
00:20:55,679 --> 00:20:59,760
you know coding it's probably not

493
00:20:58,240 --> 00:21:03,840
realistic to shoot for

494
00:20:59,760 --> 00:21:07,120
you know those kinds of um

495
00:21:03,840 --> 00:21:10,240
you know features or whatever

496
00:21:07,120 --> 00:21:11,520
so having a small project that's 100

497
00:21:10,240 --> 00:21:13,200
complete

498
00:21:11,520 --> 00:21:15,760
is a lot better and it's a lot more

499
00:21:13,200 --> 00:21:19,600
satisfying than a large project that

500
00:21:15,760 --> 00:21:19,600
that's you know 10 or 20 complete

501
00:21:20,240 --> 00:21:26,480
um so

502
00:21:23,600 --> 00:21:28,400
when i say attainable first release it's

503
00:21:26,480 --> 00:21:30,320
gonna be like

504
00:21:28,400 --> 00:21:32,480
probably the bare minimum of what will

505
00:21:30,320 --> 00:21:35,600
make a c2

506
00:21:32,480 --> 00:21:36,400
um framework function no bells or

507
00:21:35,600 --> 00:21:39,679
whistles

508
00:21:36,400 --> 00:21:41,919
but it's something to aim for right

509
00:21:39,679 --> 00:21:43,520
so you're gonna set yourself a schedule

510
00:21:41,919 --> 00:21:45,520
so you're gonna say i'm gonna target my

511
00:21:43,520 --> 00:21:48,159
first release my initial release

512
00:21:45,520 --> 00:21:49,679
in one month or whatever you think is

513
00:21:48,159 --> 00:21:53,200
realistic so you've got your

514
00:21:49,679 --> 00:21:54,960
moscow you've got your must-haves

515
00:21:53,200 --> 00:21:56,640
and your should haves and you're

516
00:21:54,960 --> 00:21:57,360
probably going to prioritize those the

517
00:21:56,640 --> 00:22:00,240
most so

518
00:21:57,360 --> 00:22:01,360
you could have you're probably not going

519
00:22:00,240 --> 00:22:03,760
to um

520
00:22:01,360 --> 00:22:04,880
really worry about too much because you

521
00:22:03,760 --> 00:22:07,919
just want something that's going to

522
00:22:04,880 --> 00:22:07,919
function that's going to work

523
00:22:08,080 --> 00:22:13,120
and you need to be cognizant of scope

524
00:22:11,679 --> 00:22:15,600
creep so it's really

525
00:22:13,120 --> 00:22:17,600
easy to just think i'll just add this

526
00:22:15,600 --> 00:22:20,559
i'll just add this

527
00:22:17,600 --> 00:22:21,840
um people post things on like twitter

528
00:22:20,559 --> 00:22:25,120
all the time or

529
00:22:21,840 --> 00:22:26,640
just did you know you could do this or

530
00:22:25,120 --> 00:22:28,799
you know new techniques blah blah blah

531
00:22:26,640 --> 00:22:31,520
blah and it's really easy just to try

532
00:22:28,799 --> 00:22:33,440
and add those in

533
00:22:31,520 --> 00:22:34,559
when really what you want to do is just

534
00:22:33,440 --> 00:22:37,360
stick to

535
00:22:34,559 --> 00:22:38,720
what you had planned for you know this

536
00:22:37,360 --> 00:22:41,360
release

537
00:22:38,720 --> 00:22:42,640
and if you see you know cool stuff

538
00:22:41,360 --> 00:22:43,840
coming into the public domain you can

539
00:22:42,640 --> 00:22:45,600
say well okay well

540
00:22:43,840 --> 00:22:48,480
i'm not going to do it now maybe i'll do

541
00:22:45,600 --> 00:22:48,480
it in the next release

542
00:22:49,039 --> 00:22:52,480
and for god's sake pace yourself so you

543
00:22:52,159 --> 00:22:54,400
know

544
00:22:52,480 --> 00:22:56,640
two hours a day for a month is not the

545
00:22:54,400 --> 00:22:59,760
same as 12 hours on four fridays

546
00:22:56,640 --> 00:23:01,520
in a month and maybe this is just a

547
00:22:59,760 --> 00:23:05,120
personal thing for me

548
00:23:01,520 --> 00:23:08,159
but little and often is

549
00:23:05,120 --> 00:23:10,559
it's just a more enjoyable way to code

550
00:23:08,159 --> 00:23:11,840
than having to sit at your desk for

551
00:23:10,559 --> 00:23:15,200
however many hours

552
00:23:11,840 --> 00:23:22,559
because you feel like you need to get

553
00:23:15,200 --> 00:23:25,120
something out

554
00:23:22,559 --> 00:23:27,440
so let's talk about languages for for a

555
00:23:25,120 --> 00:23:30,159
sec

556
00:23:27,440 --> 00:23:32,799
there are you know a billion different

557
00:23:30,159 --> 00:23:34,159
languages out there

558
00:23:32,799 --> 00:23:36,159
and you're gonna have to decide on

559
00:23:34,159 --> 00:23:39,280
something for your server

560
00:23:36,159 --> 00:23:40,480
and your implant and so depending on

561
00:23:39,280 --> 00:23:43,360
your model you might

562
00:23:40,480 --> 00:23:44,400
consider writing a client as well for

563
00:23:43,360 --> 00:23:46,720
the operators

564
00:23:44,400 --> 00:23:50,880
but in the world i'm just gonna sort of

565
00:23:46,720 --> 00:23:54,000
focus on the server and the implant

566
00:23:50,880 --> 00:23:58,080
for the server side i think you're

567
00:23:54,000 --> 00:23:59,760
much better off building off a framework

568
00:23:58,080 --> 00:24:04,559
that already exists some sort of

569
00:23:59,760 --> 00:24:07,039
web framework

570
00:24:04,559 --> 00:24:09,039
so you have um python ones like flask

571
00:24:07,039 --> 00:24:10,559
and django

572
00:24:09,039 --> 00:24:12,240
lots of different ones in the c sharp

573
00:24:10,559 --> 00:24:13,120
you have blazer which provides you know

574
00:24:12,240 --> 00:24:16,000
like a nice

575
00:24:13,120 --> 00:24:18,080
um web ui you can have something that's

576
00:24:16,000 --> 00:24:22,000
driven more by

577
00:24:18,080 --> 00:24:25,440
apis or rpc and you have lots of others

578
00:24:22,000 --> 00:24:25,440
like vue react and angular

579
00:24:26,240 --> 00:24:30,240
and on the implant side you kind of have

580
00:24:28,400 --> 00:24:33,279
to

581
00:24:30,240 --> 00:24:34,799
think about maybe

582
00:24:33,279 --> 00:24:37,440
well i mean this goes back to your goals

583
00:24:34,799 --> 00:24:39,919
really what it what

584
00:24:37,440 --> 00:24:40,799
what platform you really want to target

585
00:24:39,919 --> 00:24:43,840
with your

586
00:24:40,799 --> 00:24:45,039
framework i mean you can make your

587
00:24:43,840 --> 00:24:47,039
framework

588
00:24:45,039 --> 00:24:48,720
implants agnostic a lot of a lot of them

589
00:24:47,039 --> 00:24:50,480
already do that like mystic

590
00:24:48,720 --> 00:24:52,559
you can write your own implants for a

591
00:24:50,480 --> 00:24:54,720
framework and that would be

592
00:24:52,559 --> 00:24:57,039
you know really great if your framework

593
00:24:54,720 --> 00:24:58,960
did that but you probably also want to

594
00:24:57,039 --> 00:25:00,480
include an implant

595
00:24:58,960 --> 00:25:02,960
just to make it easier for people to

596
00:25:00,480 --> 00:25:06,000
pick up and use

597
00:25:02,960 --> 00:25:09,120
and so you have os um specific languages

598
00:25:06,000 --> 00:25:12,320
like um a c sharp

599
00:25:09,120 --> 00:25:14,240
target.net framework and you have swift

600
00:25:12,320 --> 00:25:16,559
on the mac os

601
00:25:14,240 --> 00:25:19,760
you have languages that cross compile

602
00:25:16,559 --> 00:25:22,720
like nim and go and rust

603
00:25:19,760 --> 00:25:24,480
and then you have um actual proper

604
00:25:22,720 --> 00:25:29,840
cross-platform languages like

605
00:25:24,480 --> 00:25:29,840
net.net core and sort of python

606
00:25:33,039 --> 00:25:37,600
but you certainly need to sort of

607
00:25:35,679 --> 00:25:42,080
consider how these elements are going to

608
00:25:37,600 --> 00:25:45,600
talk to each other and which language

609
00:25:42,080 --> 00:25:46,480
facilitates that best so you know i've

610
00:25:45,600 --> 00:25:48,640
already said that

611
00:25:46,480 --> 00:25:51,039
the control server should provide a

612
00:25:48,640 --> 00:25:54,799
means of

613
00:25:51,039 --> 00:25:58,640
communicating with your implant over

614
00:25:54,799 --> 00:26:01,679
any protocol or any means you want

615
00:25:58,640 --> 00:26:01,679
so you have to consider

616
00:26:01,760 --> 00:26:05,600
is the framework that i'm choosing gonna

617
00:26:04,000 --> 00:26:08,480
be able to facilitate that

618
00:26:05,600 --> 00:26:11,840
can i do that in python can i do that in

619
00:26:08,480 --> 00:26:11,840
you know whatever

620
00:26:12,559 --> 00:26:18,320
and then you kind of consider well if my

621
00:26:15,840 --> 00:26:21,440
chosen language doesn't really do that

622
00:26:18,320 --> 00:26:23,360
do i need to consider a different

623
00:26:21,440 --> 00:26:26,559
language

624
00:26:23,360 --> 00:26:28,320
and if you don't really know that

625
00:26:26,559 --> 00:26:31,360
language is it worth

626
00:26:28,320 --> 00:26:32,960
learning or is it worth

627
00:26:31,360 --> 00:26:35,919
sticking to what you know and just

628
00:26:32,960 --> 00:26:38,080
trying to make do the best you can

629
00:26:35,919 --> 00:26:39,840
i think that's a decision only like you

630
00:26:38,080 --> 00:26:43,279
can make based on

631
00:26:39,840 --> 00:26:45,520
your goals and your priorities um

632
00:26:43,279 --> 00:26:47,600
if you're learning if you're doing this

633
00:26:45,520 --> 00:26:48,559
as a learning process then maybe it's

634
00:26:47,600 --> 00:26:51,600
worth it

635
00:26:48,559 --> 00:26:53,760
maybe you specifically want to

636
00:26:51,600 --> 00:26:55,279
use this project as an opportunity to

637
00:26:53,760 --> 00:26:57,440
learn

638
00:26:55,279 --> 00:27:01,120
you know c-sharp for example i mean

639
00:26:57,440 --> 00:27:01,120
that's pretty a pretty popular choice

640
00:27:01,360 --> 00:27:05,120
then yeah by all means step out of your

641
00:27:04,000 --> 00:27:06,880
comfort zone

642
00:27:05,120 --> 00:27:09,039
and that kind of goes back to the

643
00:27:06,880 --> 00:27:11,120
attainable first um

644
00:27:09,039 --> 00:27:13,520
release thing is that if you're learning

645
00:27:11,120 --> 00:27:21,840
something new

646
00:27:13,520 --> 00:27:21,840
you've gotta like start small with it

647
00:27:22,880 --> 00:27:29,919
so in terms of uh design patterns

648
00:27:26,399 --> 00:27:32,480
there are two that i really um

649
00:27:29,919 --> 00:27:33,600
go for the first is this command design

650
00:27:32,480 --> 00:27:36,399
pattern

651
00:27:33,600 --> 00:27:37,360
and i think this is pretty good for

652
00:27:36,399 --> 00:27:39,919
picturing the

653
00:27:37,360 --> 00:27:41,360
flow of stuff between the different

654
00:27:39,919 --> 00:27:43,600
components

655
00:27:41,360 --> 00:27:45,279
and by components i mean like separate

656
00:27:43,600 --> 00:27:47,200
components such as the server and the

657
00:27:45,279 --> 00:27:50,399
implant in the operator

658
00:27:47,200 --> 00:27:54,080
not really internal

659
00:27:50,399 --> 00:27:54,080
to any one of those

660
00:27:54,480 --> 00:27:59,440
so we have the operator which is kind of

661
00:27:56,799 --> 00:28:04,240
like the clients

662
00:27:59,440 --> 00:28:06,640
and the operator wants to send a task

663
00:28:04,240 --> 00:28:07,520
to an implant so you're probably going

664
00:28:06,640 --> 00:28:09,440
to

665
00:28:07,520 --> 00:28:10,960
send some information maybe it's over an

666
00:28:09,440 --> 00:28:13,200
api you're going to post some

667
00:28:10,960 --> 00:28:16,640
information

668
00:28:13,200 --> 00:28:18,159
or post this data to your

669
00:28:16,640 --> 00:28:20,720
team server which is kind of like the

670
00:28:18,159 --> 00:28:25,440
director in

671
00:28:20,720 --> 00:28:25,440
this design pattern nomenclature

672
00:28:26,720 --> 00:28:33,039
so in this example i'm simply

673
00:28:30,000 --> 00:28:33,600
i've got a simple task model that has a

674
00:28:33,039 --> 00:28:36,080
command

675
00:28:33,600 --> 00:28:37,840
and some arguments and i want to task an

676
00:28:36,080 --> 00:28:40,399
implant that we're going to identify by

677
00:28:37,840 --> 00:28:40,399
a guide

678
00:28:41,520 --> 00:28:47,520
the server then takes that task

679
00:28:44,640 --> 00:28:49,840
and sends it to the implant so that's

680
00:28:47,520 --> 00:28:51,679
kind of the command

681
00:28:49,840 --> 00:28:54,559
and then the implant which is a receiver

682
00:28:51,679 --> 00:29:00,320
is going to execute that task

683
00:28:54,559 --> 00:29:00,320
now i've highlighted task do it here

684
00:29:00,399 --> 00:29:04,480
because it's in this model that the

685
00:29:03,120 --> 00:29:08,880
server

686
00:29:04,480 --> 00:29:14,000
um deals with but it's not in the model

687
00:29:08,880 --> 00:29:14,000
that the um the operator sends

688
00:29:14,799 --> 00:29:18,399
so the server if i want my server to

689
00:29:17,679 --> 00:29:21,520
track

690
00:29:18,399 --> 00:29:24,000
like task progress with the implant

691
00:29:21,520 --> 00:29:24,960
it's going to need something so my

692
00:29:24,000 --> 00:29:28,559
server

693
00:29:24,960 --> 00:29:30,559
excuse me in this example adds a good to

694
00:29:28,559 --> 00:29:33,039
all of the tasks

695
00:29:30,559 --> 00:29:34,880
and then when the implant can when the

696
00:29:33,039 --> 00:29:35,919
implant talks back to the server it can

697
00:29:34,880 --> 00:29:38,240
report

698
00:29:35,919 --> 00:29:39,520
it can use the same guide so that the

699
00:29:38,240 --> 00:29:42,960
server can track

700
00:29:39,520 --> 00:29:45,919
commands with the implant

701
00:29:42,960 --> 00:29:49,039
and this kind of brings me on to the

702
00:29:45,919 --> 00:29:49,039
subject of contracts

703
00:29:50,240 --> 00:29:54,799
so you have contracts between the

704
00:29:53,679 --> 00:29:57,840
different

705
00:29:54,799 --> 00:29:59,840
elements within your the overall

706
00:29:57,840 --> 00:30:02,080
solution so you have contracts between

707
00:29:59,840 --> 00:30:03,919
the operator and the server

708
00:30:02,080 --> 00:30:06,159
the server and the implant and maybe

709
00:30:03,919 --> 00:30:08,240
even the server and any storage that you

710
00:30:06,159 --> 00:30:09,840
want so if you're storing data so you

711
00:30:08,240 --> 00:30:11,919
can

712
00:30:09,840 --> 00:30:14,480
start and stop your team server without

713
00:30:11,919 --> 00:30:17,919
losing data

714
00:30:14,480 --> 00:30:21,200
and then what you really need

715
00:30:17,919 --> 00:30:24,080
is different models

716
00:30:21,200 --> 00:30:26,640
for each of those contracts don't try

717
00:30:24,080 --> 00:30:28,880
and use the same model

718
00:30:26,640 --> 00:30:32,320
between every element because you're

719
00:30:28,880 --> 00:30:35,840
just going to get a little bit unstuck

720
00:30:32,320 --> 00:30:37,840
so here's a code example of a task

721
00:30:35,840 --> 00:30:40,159
request so this is what an operator

722
00:30:37,840 --> 00:30:43,520
might post to the server

723
00:30:40,159 --> 00:30:46,799
this is a request so it's got a command

724
00:30:43,520 --> 00:30:50,960
an array of arguments and an artifact

725
00:30:46,799 --> 00:30:54,399
so if this was like an execute assembly

726
00:30:50,960 --> 00:30:56,320
um command the artifact would be like

727
00:30:54,399 --> 00:30:58,240
the whole assembly so you're gonna push

728
00:30:56,320 --> 00:31:02,000
like i don't know you're gonna push

729
00:30:58,240 --> 00:31:03,840
rubeus down to your implant

730
00:31:02,000 --> 00:31:06,640
and you're gonna tell it to execute with

731
00:31:03,840 --> 00:31:06,640
these arguments

732
00:31:06,880 --> 00:31:12,480
um the server will then

733
00:31:10,000 --> 00:31:13,679
add on that task guide and give me back

734
00:31:12,480 --> 00:31:16,240
that guide

735
00:31:13,679 --> 00:31:20,080
so as the operator i can then use that

736
00:31:16,240 --> 00:31:22,000
gui to check the status of that task

737
00:31:20,080 --> 00:31:23,840
and when i'm asking for that i don't

738
00:31:22,000 --> 00:31:25,760
necessarily i mean you might want to

739
00:31:23,840 --> 00:31:28,080
it's kind of up to you

740
00:31:25,760 --> 00:31:29,360
you might not want all of this original

741
00:31:28,080 --> 00:31:31,120
data back

742
00:31:29,360 --> 00:31:32,720
like you don't you might not i don't

743
00:31:31,120 --> 00:31:35,279
need to see like the whole assembly

744
00:31:32,720 --> 00:31:36,799
coming back i don't need to have rubius

745
00:31:35,279 --> 00:31:39,600
just going backwards and forwards on the

746
00:31:36,799 --> 00:31:42,320
wire between me and the server

747
00:31:39,600 --> 00:31:43,919
all i really want maybe is just the

748
00:31:42,320 --> 00:31:47,840
result

749
00:31:43,919 --> 00:31:47,840
and the status

750
00:31:48,559 --> 00:31:52,559
and you're going to find that you know

751
00:31:50,559 --> 00:31:54,799
if you're using like

752
00:31:52,559 --> 00:31:57,679
something like entity framework for

753
00:31:54,799 --> 00:32:00,640
storage if you're using c sharp

754
00:31:57,679 --> 00:32:02,240
you have to decorate your classes with

755
00:32:00,640 --> 00:32:04,960
all sorts of things so you have to

756
00:32:02,240 --> 00:32:06,240
have like attributes on your properties

757
00:32:04,960 --> 00:32:09,519
that define

758
00:32:06,240 --> 00:32:12,640
the like primary keys and stuff

759
00:32:09,519 --> 00:32:14,159
and that information just doesn't need

760
00:32:12,640 --> 00:32:17,440
to be coming back to the operator it

761
00:32:14,159 --> 00:32:22,159
doesn't need to be going to the implant

762
00:32:17,440 --> 00:32:22,159
so with every point you have to

763
00:32:22,640 --> 00:32:27,600
try sort of like translate each model to

764
00:32:25,919 --> 00:32:32,799
a different model

765
00:32:27,600 --> 00:32:32,799
and then pass it along the chain

766
00:32:34,399 --> 00:32:37,919
there's also this template method

767
00:32:37,200 --> 00:32:42,000
pattern

768
00:32:37,919 --> 00:32:42,559
and this is pretty good for planning you

769
00:32:42,000 --> 00:32:44,159
know

770
00:32:42,559 --> 00:32:45,440
plan more carefully planning your code

771
00:32:44,159 --> 00:32:46,000
what's your actual code going to look

772
00:32:45,440 --> 00:32:47,519
like

773
00:32:46,000 --> 00:32:50,640
and i'm sorry that all of my code

774
00:32:47,519 --> 00:32:53,200
examples are in c sharp

775
00:32:50,640 --> 00:32:55,039
mainly because that's all i really know

776
00:32:53,200 --> 00:32:58,640
but also that's what people

777
00:32:55,039 --> 00:32:58,640
are kind of more interested in i think

778
00:32:59,279 --> 00:33:05,039
so on the left i've got an abstract

779
00:33:01,679 --> 00:33:07,279
class that's going to act as like

780
00:33:05,039 --> 00:33:11,840
a building block to build custom

781
00:33:07,279 --> 00:33:11,840
listeners on my server

782
00:33:12,159 --> 00:33:18,880
i'm going to have a protected

783
00:33:16,000 --> 00:33:19,919
field at the top which is an itask

784
00:33:18,880 --> 00:33:22,960
manager

785
00:33:19,919 --> 00:33:26,880
and that is an interface that has these

786
00:33:22,960 --> 00:33:26,880
um methods on it

787
00:33:27,360 --> 00:33:34,399
so q task is the method that an

788
00:33:31,279 --> 00:33:36,640
operator would um

789
00:33:34,399 --> 00:33:38,880
use to task an agent so it would take in

790
00:33:36,640 --> 00:33:41,600
like a guide and i've just put a bite

791
00:33:38,880 --> 00:33:45,919
array but this would be the um

792
00:33:41,600 --> 00:33:45,919
the implant task model

793
00:33:46,320 --> 00:33:52,960
and then get tasks and receive output

794
00:33:49,919 --> 00:33:54,960
will be used like the listener side

795
00:33:52,960 --> 00:33:56,240
so that when an implant is talking to

796
00:33:54,960 --> 00:33:58,320
the listener

797
00:33:56,240 --> 00:34:00,640
it can just use this task manager just

798
00:33:58,320 --> 00:34:04,399
to grab the tasks

799
00:34:00,640 --> 00:34:08,800
and any tasks that are queued for it

800
00:34:04,399 --> 00:34:11,679
and also give the server any output that

801
00:34:08,800 --> 00:34:14,879
the implant is sending

802
00:34:11,679 --> 00:34:17,359
and then the listener it just has this

803
00:34:14,879 --> 00:34:18,800
init or initialized method to bring in

804
00:34:17,359 --> 00:34:22,159
that task manager

805
00:34:18,800 --> 00:34:22,159
and then just to start on a stop

806
00:34:22,800 --> 00:34:26,639
so let's have a look at what that could

807
00:34:24,960 --> 00:34:28,800
look like in c sharp so this is my

808
00:34:26,639 --> 00:34:30,159
abstract class

809
00:34:28,800 --> 00:34:32,399
you can see i've got the eye task

810
00:34:30,159 --> 00:34:34,800
manager here and this

811
00:34:32,399 --> 00:34:37,359
init just brings in the task manager and

812
00:34:34,800 --> 00:34:40,720
just assigns it to that field

813
00:34:37,359 --> 00:34:44,399
and then it has two abstract

814
00:34:40,720 --> 00:34:44,399
methods start and stop

815
00:34:44,560 --> 00:34:50,639
and when somebody comes along and

816
00:34:48,240 --> 00:34:51,919
implements their own custom listener

817
00:34:50,639 --> 00:34:55,200
they inherit

818
00:34:51,919 --> 00:34:58,480
from this listener class

819
00:34:55,200 --> 00:35:00,640
and this is the entire

820
00:34:58,480 --> 00:35:03,440
class here it's obviously not very

821
00:35:00,640 --> 00:35:05,440
functional it's just an example

822
00:35:03,440 --> 00:35:06,560
but you can see i've highlighted where

823
00:35:05,440 --> 00:35:09,760
it would use

824
00:35:06,560 --> 00:35:12,960
the task manager and

825
00:35:09,760 --> 00:35:15,680
as the author of

826
00:35:12,960 --> 00:35:16,320
the custom listener you don't have to

827
00:35:15,680 --> 00:35:18,400
worry

828
00:35:16,320 --> 00:35:20,960
about where the task manager is coming

829
00:35:18,400 --> 00:35:24,400
from or how it works

830
00:35:20,960 --> 00:35:25,040
because you've implemented this abstract

831
00:35:24,400 --> 00:35:27,520
class

832
00:35:25,040 --> 00:35:28,480
the framework is taking care of that for

833
00:35:27,520 --> 00:35:31,440
you

834
00:35:28,480 --> 00:35:32,079
and all you have to do is just the task

835
00:35:31,440 --> 00:35:35,280
manager

836
00:35:32,079 --> 00:35:38,960
is there is a field for you to use

837
00:35:35,280 --> 00:35:39,599
as appropriate so to get tasks you just

838
00:35:38,960 --> 00:35:42,800
call

839
00:35:39,599 --> 00:35:46,079
get tasks and to send any output

840
00:35:42,800 --> 00:35:49,119
into the server to

841
00:35:46,079 --> 00:35:54,079
like process you just call receive

842
00:35:49,119 --> 00:35:57,599
output so abstraction

843
00:35:54,079 --> 00:36:00,400
and interfaces are you know just they're

844
00:35:57,599 --> 00:36:00,400
just so useful

845
00:36:03,119 --> 00:36:08,640
um in terms of any implant that you're

846
00:36:06,400 --> 00:36:12,000
going to write

847
00:36:08,640 --> 00:36:15,839
base primitives are better in my

848
00:36:12,000 --> 00:36:19,760
view than i call it commands uh

849
00:36:15,839 --> 00:36:23,440
proliferation and you know you can see

850
00:36:19,760 --> 00:36:25,359
some um ct tools just have like a basili

851
00:36:23,440 --> 00:36:28,640
you type like help whatever you just get

852
00:36:25,359 --> 00:36:31,119
a bazillion um commands that you can

853
00:36:28,640 --> 00:36:31,119
execute

854
00:36:31,359 --> 00:36:37,680
and like me i find it a bit overwhelming

855
00:36:34,640 --> 00:36:39,520
because i don't know it's just a lot but

856
00:36:37,680 --> 00:36:44,560
it's also not that

857
00:36:39,520 --> 00:36:47,680
um like flexible for the operator

858
00:36:44,560 --> 00:36:49,359
so let's use mimikatz

859
00:36:47,680 --> 00:36:51,040
as an example here you could build in a

860
00:36:49,359 --> 00:36:52,560
command

861
00:36:51,040 --> 00:36:54,320
um to your framework that will

862
00:36:52,560 --> 00:36:56,000
automatically push moomin cats down to

863
00:36:54,320 --> 00:36:59,280
the implant

864
00:36:56,000 --> 00:37:01,280
um load it up in some way execute it and

865
00:36:59,280 --> 00:37:03,599
send the results back

866
00:37:01,280 --> 00:37:04,800
you could do that for seat belt and for

867
00:37:03,599 --> 00:37:07,680
rubius

868
00:37:04,800 --> 00:37:08,000
and it's very you know okay it's very

869
00:37:07,680 --> 00:37:11,200
nice

870
00:37:08,000 --> 00:37:14,079
just to have an automated way just to

871
00:37:11,200 --> 00:37:15,520
push all of these assemblies down but

872
00:37:14,079 --> 00:37:17,359
then as soon as the user

873
00:37:15,520 --> 00:37:21,200
well you know the operator says well i

874
00:37:17,359 --> 00:37:25,280
want to push down something custom

875
00:37:21,200 --> 00:37:25,280
you've not made it very easy to do that

876
00:37:25,760 --> 00:37:31,599
um so the base primitives

877
00:37:29,040 --> 00:37:34,160
are more about what allows these

878
00:37:31,599 --> 00:37:37,280
commands to actually happen

879
00:37:34,160 --> 00:37:40,560
so mimikats is tied to manual mapping

880
00:37:37,280 --> 00:37:43,119
in um like c sharp anyway so

881
00:37:40,560 --> 00:37:45,920
instead of providing like a mimikats

882
00:37:43,119 --> 00:37:50,000
command you could just

883
00:37:45,920 --> 00:37:53,440
um provide some sort of means of just

884
00:37:50,000 --> 00:37:55,040
manual mapping in your implant

885
00:37:53,440 --> 00:37:58,400
and that will allow the user just to

886
00:37:55,040 --> 00:38:02,800
send down an arbitrary

887
00:37:58,400 --> 00:38:02,800
dll or executable arbitrary

888
00:38:02,839 --> 00:38:08,240
commands

889
00:38:05,359 --> 00:38:10,320
just map it into the implant execute it

890
00:38:08,240 --> 00:38:13,359
and send the results back

891
00:38:10,320 --> 00:38:14,320
you can also you know expose reflective

892
00:38:13,359 --> 00:38:17,520
dlls

893
00:38:14,320 --> 00:38:19,839
dot net reflection power shell sockets

894
00:38:17,520 --> 00:38:20,800
you know whatever you want but the

895
00:38:19,839 --> 00:38:24,960
closer

896
00:38:20,800 --> 00:38:27,040
or the more easily you expose these base

897
00:38:24,960 --> 00:38:30,160
primitives to your operator

898
00:38:27,040 --> 00:38:34,320
the more easily they can

899
00:38:30,160 --> 00:38:34,320
write custom commands for your implant

900
00:38:34,800 --> 00:38:39,920
and in terms of commands this

901
00:38:38,160 --> 00:38:42,079
is something that i see quite often not

902
00:38:39,920 --> 00:38:45,200
even not just in like

903
00:38:42,079 --> 00:38:48,800
c2 tools but all sorts of tools that

904
00:38:45,200 --> 00:38:54,800
bring in some sort of user input

905
00:38:48,800 --> 00:38:54,800
this you know the command is a string

906
00:38:54,880 --> 00:39:00,480
and they're just well this is a switch

907
00:38:57,920 --> 00:39:02,720
statement but it could easily be like

908
00:39:00,480 --> 00:39:05,520
if else if else if else if if the

909
00:39:02,720 --> 00:39:09,040
command equals this do this

910
00:39:05,520 --> 00:39:09,760
and it's just not good um it's not very

911
00:39:09,040 --> 00:39:13,359
flexible

912
00:39:09,760 --> 00:39:15,119
obviously it's difficult to expand and

913
00:39:13,359 --> 00:39:18,240
maintain

914
00:39:15,119 --> 00:39:20,640
you know if you want to add another

915
00:39:18,240 --> 00:39:22,320
one in here it's gonna be like massive

916
00:39:20,640 --> 00:39:25,520
and if you've got

917
00:39:22,320 --> 00:39:28,960
a more complicated method

918
00:39:25,520 --> 00:39:32,960
than these it's just

919
00:39:28,960 --> 00:39:34,640
just don't um it's difficult to handle

920
00:39:32,960 --> 00:39:37,200
exceptions you could wrap this whole

921
00:39:34,640 --> 00:39:39,760
thing in like a try catch

922
00:39:37,200 --> 00:39:40,880
in which case you're only catching like

923
00:39:39,760 --> 00:39:43,040
maybe like generic

924
00:39:40,880 --> 00:39:44,320
exceptions or you could wrap each one of

925
00:39:43,040 --> 00:39:47,440
these in a try catch

926
00:39:44,320 --> 00:39:49,520
and that just makes it even bigger you

927
00:39:47,440 --> 00:39:52,640
can see we've got code duplication

928
00:39:49,520 --> 00:39:54,640
so we're requesting this like get

929
00:39:52,640 --> 00:39:56,079
current directory a whole bunch of times

930
00:39:54,640 --> 00:39:58,240
which isn't really a problem for

931
00:39:56,079 --> 00:40:01,760
something so short but if it's something

932
00:39:58,240 --> 00:40:04,800
more complicated then

933
00:40:01,760 --> 00:40:08,480
it that just becomes untenable

934
00:40:04,800 --> 00:40:10,319
it's not particularly performant because

935
00:40:08,480 --> 00:40:12,160
most the time i think especially if it's

936
00:40:10,319 --> 00:40:14,480
uh an if else if else if

937
00:40:12,160 --> 00:40:16,000
it always starts from the top and you go

938
00:40:14,480 --> 00:40:20,079
down

939
00:40:16,000 --> 00:40:20,079
um we're also

940
00:40:20,319 --> 00:40:25,200
forcing everything to be a string

941
00:40:23,520 --> 00:40:28,319
and it's just you know it's just ugly

942
00:40:25,200 --> 00:40:31,440
this is not a good way to

943
00:40:28,319 --> 00:40:31,440
um code something

944
00:40:31,680 --> 00:40:36,880
so what's a better um example perhaps

945
00:40:37,040 --> 00:40:43,760
is again to implement those abstracts

946
00:40:41,599 --> 00:40:44,640
so i've got an abstract class here which

947
00:40:43,760 --> 00:40:49,280
is called

948
00:40:44,640 --> 00:40:52,000
implant command um

949
00:40:49,280 --> 00:40:53,359
it has a string which is called command

950
00:40:52,000 --> 00:40:54,160
i probably should have called it name or

951
00:40:53,359 --> 00:40:57,680
something but

952
00:40:54,160 --> 00:40:57,680
this is like the name of the command

953
00:40:57,760 --> 00:41:04,800
and it's got an abstract

954
00:41:01,119 --> 00:41:08,000
method called execute that'll bring in

955
00:41:04,800 --> 00:41:09,040
the task that's been sent down to it and

956
00:41:08,000 --> 00:41:12,240
it has another

957
00:41:09,040 --> 00:41:13,599
in it which brings in a class in this

958
00:41:12,240 --> 00:41:18,240
case in case it's called

959
00:41:13,599 --> 00:41:18,240
implant but implant has

960
00:41:18,400 --> 00:41:23,920
several public methods you can see over

961
00:41:20,160 --> 00:41:25,839
on this right-hand side here for

962
00:41:23,920 --> 00:41:29,280
sending results back sending an error

963
00:41:25,839 --> 00:41:31,040
back and all sorts of things

964
00:41:29,280 --> 00:41:33,680
so the implant class again is not

965
00:41:31,040 --> 00:41:36,560
something the operator will

966
00:41:33,680 --> 00:41:37,119
care about but you can expose public

967
00:41:36,560 --> 00:41:41,520
methods

968
00:41:37,119 --> 00:41:41,520
on it for them to do useful things

969
00:41:41,760 --> 00:41:46,720
so like the listener example we want to

970
00:41:44,640 --> 00:41:49,280
create our own command

971
00:41:46,720 --> 00:41:50,960
that will inherit from implant command

972
00:41:49,280 --> 00:41:54,560
we give it a name in this case it's just

973
00:41:50,960 --> 00:41:56,880
ls and i've also thrown like sharpsploit

974
00:41:54,560 --> 00:42:00,839
in here as an example

975
00:41:56,880 --> 00:42:04,800
um as an example of like decoupling

976
00:42:00,839 --> 00:42:06,640
um a lot of like the back end execution

977
00:42:04,800 --> 00:42:08,560
from the actual command

978
00:42:06,640 --> 00:42:11,200
and that means that as a user if i want

979
00:42:08,560 --> 00:42:12,880
to implement another command that uses

980
00:42:11,200 --> 00:42:15,280
like sharp floyd they can do that really

981
00:42:12,880 --> 00:42:18,560
easily

982
00:42:15,280 --> 00:42:22,160
um you know again we're just

983
00:42:18,560 --> 00:42:25,839
making it as flexible as we can

984
00:42:22,160 --> 00:42:28,839
and of course um abstracts

985
00:42:25,839 --> 00:42:30,720
you are forced to implement so you have

986
00:42:28,839 --> 00:42:32,720
to um

987
00:42:30,720 --> 00:42:34,480
you know put some sort of implementation

988
00:42:32,720 --> 00:42:37,680
in when you override

989
00:42:34,480 --> 00:42:39,040
the this method and you can as the

990
00:42:37,680 --> 00:42:41,200
author you can just put whatever

991
00:42:39,040 --> 00:42:43,040
whatever you want in there and again you

992
00:42:41,200 --> 00:42:44,640
don't have to worry about the task

993
00:42:43,040 --> 00:42:46,720
it automatically is brought into the

994
00:42:44,640 --> 00:42:47,520
command for you you don't have to worry

995
00:42:46,720 --> 00:42:49,040
about

996
00:42:47,520 --> 00:42:51,440
where implant is coming from it's

997
00:42:49,040 --> 00:42:55,119
automatically done for you

998
00:42:51,440 --> 00:42:55,119
you just call the methods that you want

999
00:42:56,839 --> 00:43:04,640
um and then you can

1000
00:42:59,680 --> 00:43:08,079
this is within that implant um

1001
00:43:04,640 --> 00:43:12,000
class is there at some point we call

1002
00:43:08,079 --> 00:43:14,480
load commands and we can use

1003
00:43:12,000 --> 00:43:15,680
uh reflection to automatically

1004
00:43:14,480 --> 00:43:19,040
instantiate

1005
00:43:15,680 --> 00:43:22,480
every type of implement command

1006
00:43:19,040 --> 00:43:25,200
and initialize them

1007
00:43:22,480 --> 00:43:27,359
so they're ready to be used and then

1008
00:43:25,200 --> 00:43:29,119
that handle task

1009
00:43:27,359 --> 00:43:31,440
method where in the previous example was

1010
00:43:29,119 --> 00:43:34,640
that big old switch case

1011
00:43:31,440 --> 00:43:35,920
this is what it would look like so all

1012
00:43:34,640 --> 00:43:39,280
we need to do is

1013
00:43:35,920 --> 00:43:40,560
find the class that has the name that

1014
00:43:39,280 --> 00:43:42,960
we're looking for

1015
00:43:40,560 --> 00:43:45,119
you know in the actual um task that

1016
00:43:42,960 --> 00:43:47,440
comes down

1017
00:43:45,119 --> 00:43:48,800
if we didn't find it we send an error

1018
00:43:47,440 --> 00:43:51,680
back saying that

1019
00:43:48,800 --> 00:43:53,599
well the command isn't found otherwise

1020
00:43:51,680 --> 00:43:56,319
we just

1021
00:43:53,599 --> 00:43:56,319
execute it

1022
00:43:58,240 --> 00:44:01,599
i got another example here using

1023
00:43:59,920 --> 00:44:02,000
attributes but i'm actually running at a

1024
00:44:01,599 --> 00:44:05,839
time

1025
00:44:02,000 --> 00:44:05,839
so i have to skip to the summary

1026
00:44:07,119 --> 00:44:10,480
so to start with absolutely know your

1027
00:44:09,520 --> 00:44:12,240
goals

1028
00:44:10,480 --> 00:44:14,000
know what you're trying to build and why

1029
00:44:12,240 --> 00:44:16,000
you're trying to build it

1030
00:44:14,000 --> 00:44:17,839
only by knowing your goals will you

1031
00:44:16,000 --> 00:44:22,480
really understand what features you need

1032
00:44:17,839 --> 00:44:25,680
to put into your framework but i'd

1033
00:44:22,480 --> 00:44:26,880
also encourage you to focus on framework

1034
00:44:25,680 --> 00:44:30,960
features rather than

1035
00:44:26,880 --> 00:44:33,440
c2 features so by c2 features

1036
00:44:30,960 --> 00:44:35,760
i don't know um i guess i'm referring to

1037
00:44:33,440 --> 00:44:38,560
command

1038
00:44:35,760 --> 00:44:39,440
proliferation again but i would

1039
00:44:38,560 --> 00:44:41,440
definitely focus

1040
00:44:39,440 --> 00:44:42,720
especially in the early days of your of

1041
00:44:41,440 --> 00:44:46,560
your framework is

1042
00:44:42,720 --> 00:44:48,800
is focus on those framework um elements

1043
00:44:46,560 --> 00:44:51,280
you really want to provide the operators

1044
00:44:48,800 --> 00:44:52,480
the means to customize and expand your

1045
00:44:51,280 --> 00:44:56,720
framework

1046
00:44:52,480 --> 00:45:00,480
the way they want to do it prioritize

1047
00:44:56,720 --> 00:45:03,680
those base primitives on your implant

1048
00:45:00,480 --> 00:45:07,200
and provide an easy means for the

1049
00:45:03,680 --> 00:45:07,200
operators to interact with them

1050
00:45:07,760 --> 00:45:11,200
abstracts and interfaces are incredibly

1051
00:45:10,240 --> 00:45:14,160
useful

1052
00:45:11,200 --> 00:45:14,160
i can't think

1053
00:45:14,480 --> 00:45:21,359
really of a a better way to provide

1054
00:45:18,319 --> 00:45:24,160
that extensibility um

1055
00:45:21,359 --> 00:45:24,160
to the operators

1056
00:45:26,000 --> 00:45:30,079
plan small attainable releases don't try

1057
00:45:29,119 --> 00:45:33,040
and do

1058
00:45:30,079 --> 00:45:36,000
like a big big bang release for your you

1059
00:45:33,040 --> 00:45:36,000
know your first one

1060
00:45:36,640 --> 00:45:42,079
and if this is something that you want

1061
00:45:39,040 --> 00:45:44,400
to maintain over the long term

1062
00:45:42,079 --> 00:45:45,680
i would also say to limit each release

1063
00:45:44,400 --> 00:45:48,560
to only one

1064
00:45:45,680 --> 00:45:50,560
like big feature so if you look at

1065
00:45:48,560 --> 00:45:53,680
usually if you look at release notes for

1066
00:45:50,560 --> 00:45:57,359
for software most of them the vast

1067
00:45:53,680 --> 00:46:00,480
majority of the changes are bug fixes

1068
00:45:57,359 --> 00:46:01,839
you'll then get other types of um minor

1069
00:46:00,480 --> 00:46:04,400
improvements

1070
00:46:01,839 --> 00:46:05,119
and you'll probably only really see like

1071
00:46:04,400 --> 00:46:09,599
one

1072
00:46:05,119 --> 00:46:13,280
or maybe two like big new features

1073
00:46:09,599 --> 00:46:14,560
um so that is a kind of software design

1074
00:46:13,280 --> 00:46:17,440
thing that i would really encourage

1075
00:46:14,560 --> 00:46:20,160
don't try and change too much

1076
00:46:17,440 --> 00:46:20,160
in one go

1077
00:46:20,800 --> 00:46:28,880
and yeah i think that's pretty much it

1078
00:46:25,680 --> 00:46:30,240
um i hope the talk was useful and if

1079
00:46:28,880 --> 00:46:30,720
you've got any questions please let me

1080
00:46:30,240 --> 00:46:32,880
know

1081
00:46:30,720 --> 00:46:35,520
i'm going to try and be around for a q a

1082
00:46:32,880 --> 00:46:38,880
during the

1083
00:46:35,520 --> 00:46:40,560
village if not feel free to hit me up on

1084
00:46:38,880 --> 00:46:43,920
any of those

1085
00:46:40,560 --> 00:46:45,040
um socials i shared the beginning

1086
00:46:43,920 --> 00:46:53,040
i hope you enjoy the rest of the

1087
00:46:45,040 --> 00:46:53,040
conference thanks very much

