1
00:00:02,240 --> 00:00:05,200
hello everyone this is scaling apsec

2
00:00:05,200 --> 00:00:08,319
through education

3
00:00:09,360 --> 00:00:11,679
just briefly touch on

4
00:00:11,679 --> 00:00:13,040
who we are

5
00:00:13,040 --> 00:00:14,799
secure delivery

6
00:00:14,799 --> 00:00:18,000
um some takeaways from the slide here is

7
00:00:18,000 --> 00:00:19,199
that we do this sort of thing

8
00:00:19,199 --> 00:00:21,760
commercially at scale with large

9
00:00:21,760 --> 00:00:25,039
companies and and small

10
00:00:25,039 --> 00:00:27,840
but it's all built on os projects and

11
00:00:27,840 --> 00:00:29,359
especially built on the

12
00:00:29,359 --> 00:00:33,119
open application security curriculum

13
00:00:33,280 --> 00:00:35,520
of which i am one of the project leads

14
00:00:35,520 --> 00:00:38,320
together with toby irvine

15
00:00:38,320 --> 00:00:40,800
i also lead the os cornucopia project

16
00:00:40,800 --> 00:00:42,879
together with colin watson and i'm

17
00:00:42,879 --> 00:00:45,600
currently on the os global board

18
00:00:45,600 --> 00:00:47,760
lots of o-wasp there

19
00:00:47,760 --> 00:00:49,360
the real takeaway from this slide though

20
00:00:49,360 --> 00:00:52,480
is my handle rewtd root demon under

21
00:00:52,480 --> 00:00:54,800
which you'll find me gooning here on the

22
00:00:54,800 --> 00:00:56,399
defcon discord

23
00:00:56,399 --> 00:00:58,160
you'll also find me under that handle on

24
00:00:58,160 --> 00:01:00,399
twitter and on linkedin

25
00:01:00,399 --> 00:01:03,280
my dms are open so please give me

26
00:01:03,280 --> 00:01:04,479
feedback on the things that you hear

27
00:01:04,479 --> 00:01:06,080
today and the things that you liked and

28
00:01:06,080 --> 00:01:08,560
didn't like

29
00:01:09,040 --> 00:01:12,799
scaling uptick in large organizations in

30
00:01:12,799 --> 00:01:14,640
very little time

31
00:01:14,640 --> 00:01:17,360
here we go

32
00:01:18,400 --> 00:01:19,600
to start thinking about application

33
00:01:19,600 --> 00:01:21,840
security we have to define it let's draw

34
00:01:21,840 --> 00:01:24,799
box remotes that were clear

35
00:01:24,799 --> 00:01:27,600
cyber security is incredibly broad i.t

36
00:01:27,600 --> 00:01:29,600
security covers corporate identity email

37
00:01:29,600 --> 00:01:32,240
security desktop os's

38
00:01:32,240 --> 00:01:35,680
server patching file shares printers

39
00:01:35,680 --> 00:01:37,600
especially recently

40
00:01:37,600 --> 00:01:40,320
and there's a lot to do there

41
00:01:40,320 --> 00:01:42,240
we're concerned today with the part of

42
00:01:42,240 --> 00:01:44,000
cyber security you have to deal with

43
00:01:44,000 --> 00:01:45,520
when you're building your own software

44
00:01:45,520 --> 00:01:46,479
systems

45
00:01:46,479 --> 00:01:48,720
the part of cyber security that this

46
00:01:48,720 --> 00:01:51,200
village is all about

47
00:01:51,200 --> 00:01:53,040
your systems can be secure as designed

48
00:01:53,040 --> 00:01:55,680
and built but there are also many ways

49
00:01:55,680 --> 00:01:56,560
in

50
00:01:56,560 --> 00:01:58,079
how you are building them that can screw

51
00:01:58,079 --> 00:01:59,840
you over from a security point of view

52
00:01:59,840 --> 00:02:01,680
now someone could push production

53
00:02:01,680 --> 00:02:03,680
passwords or cloud api keys to a public

54
00:02:03,680 --> 00:02:05,119
repository

55
00:02:05,119 --> 00:02:07,200
or a sketchy person can approach one of

56
00:02:07,200 --> 00:02:08,639
the developers on your team outside of

57
00:02:08,639 --> 00:02:10,560
work and offer them an eye-watering

58
00:02:10,560 --> 00:02:14,000
amount of money to a little backdoor

59
00:02:14,000 --> 00:02:15,920
a supply chain attack an open source

60
00:02:15,920 --> 00:02:17,760
library that that you happen to use get

61
00:02:17,760 --> 00:02:19,840
some nasty code introduced to it

62
00:02:19,840 --> 00:02:21,760
you put it in on the next build of your

63
00:02:21,760 --> 00:02:23,280
system

64
00:02:23,280 --> 00:02:25,599
and there are many many more

65
00:02:25,599 --> 00:02:27,120
we're talking about

66
00:02:27,120 --> 00:02:29,360
quality supply chains materials value

67
00:02:29,360 --> 00:02:31,120
and activities and design and

68
00:02:31,120 --> 00:02:33,040
manufacturing processes

69
00:02:33,040 --> 00:02:35,040
then what we really mean by application

70
00:02:35,040 --> 00:02:36,959
security is

71
00:02:36,959 --> 00:02:39,840
product security

72
00:02:42,080 --> 00:02:43,840
now that's all pretty clear

73
00:02:43,840 --> 00:02:46,560
but security is an intrinsic quality of

74
00:02:46,560 --> 00:02:48,640
your system sounds a bit philosophical

75
00:02:48,640 --> 00:02:52,000
so let's define that too

76
00:02:52,000 --> 00:02:55,840
this is the iso iec 25010 system and

77
00:02:55,840 --> 00:02:58,560
software quality model

78
00:02:58,560 --> 00:02:59,440
it's

79
00:02:59,440 --> 00:03:01,360
in left to right importance the quality

80
00:03:01,360 --> 00:03:04,080
model is concerned and connected to how

81
00:03:04,080 --> 00:03:06,319
a system provides value

82
00:03:06,319 --> 00:03:08,879
so you might think that reliability is

83
00:03:08,879 --> 00:03:12,480
more important than performance

84
00:03:12,480 --> 00:03:13,760
but a system with five nines

85
00:03:13,760 --> 00:03:16,319
availability that's really slow and

86
00:03:16,319 --> 00:03:18,720
practically unusable by our customers

87
00:03:18,720 --> 00:03:21,280
completely useless

88
00:03:21,280 --> 00:03:23,599
now security sits somewhere on the

89
00:03:23,599 --> 00:03:25,120
border between the non-functionals that

90
00:03:25,120 --> 00:03:27,680
people care about and they can see

91
00:03:27,680 --> 00:03:29,200
and the non-functionals that people

92
00:03:29,200 --> 00:03:32,239
don't much care about and can't really

93
00:03:32,239 --> 00:03:34,319
see

94
00:03:34,319 --> 00:03:35,920
compare for example

95
00:03:35,920 --> 00:03:37,519
the business impact

96
00:03:37,519 --> 00:03:39,599
of a change that was pushed to

97
00:03:39,599 --> 00:03:41,440
production that adversely

98
00:03:41,440 --> 00:03:43,360
affects performance

99
00:03:43,360 --> 00:03:45,120
with a similar change that's pushed to

100
00:03:45,120 --> 00:03:46,959
production that adversely affects

101
00:03:46,959 --> 00:03:48,560
security

102
00:03:48,560 --> 00:03:50,239
the former

103
00:03:50,239 --> 00:03:51,280
your customers will notice it

104
00:03:51,280 --> 00:03:52,480
immediately

105
00:03:52,480 --> 00:03:53,760
the latter

106
00:03:53,760 --> 00:03:55,840
well something bad might happen

107
00:03:55,840 --> 00:03:58,000
it might never happen

108
00:03:58,000 --> 00:04:00,159
but the famous saying hope is not a

109
00:04:00,159 --> 00:04:01,599
strategy

110
00:04:01,599 --> 00:04:04,159
when deadlines pinch or resources get

111
00:04:04,159 --> 00:04:05,519
limited

112
00:04:05,519 --> 00:04:07,760
work on these qualities will drop away

113
00:04:07,760 --> 00:04:10,400
pretty predictably from right left

114
00:04:10,400 --> 00:04:12,239
ultimately just leaving

115
00:04:12,239 --> 00:04:15,840
functional work and testing

116
00:04:15,920 --> 00:04:17,680
this in addition to the team simply

117
00:04:17,680 --> 00:04:19,519
being unaware of the requirements for a

118
00:04:19,519 --> 00:04:20,959
non-functional

119
00:04:20,959 --> 00:04:23,840
is when technical debt starts to pile up

120
00:04:23,840 --> 00:04:26,639
when you hear technical debt think

121
00:04:26,639 --> 00:04:29,360
lower quality

122
00:04:29,360 --> 00:04:31,040
so product security is one aspect of its

123
00:04:31,040 --> 00:04:32,639
overall quality how do we ensure that an

124
00:04:32,639 --> 00:04:34,000
appropriately high enough level of

125
00:04:34,000 --> 00:04:35,440
security quality

126
00:04:35,440 --> 00:04:36,960
while still delivering at the pace

127
00:04:36,960 --> 00:04:38,880
required

128
00:04:38,880 --> 00:04:40,639
now this is a common way to think about

129
00:04:40,639 --> 00:04:43,040
maintaining security where rapid

130
00:04:43,040 --> 00:04:44,800
delivery of changes to production is at

131
00:04:44,800 --> 00:04:47,040
one end of a scale and being secure is

132
00:04:47,040 --> 00:04:48,560
at the other end

133
00:04:48,560 --> 00:04:50,400
and as an organization you

134
00:04:50,400 --> 00:04:51,759
kind of pick

135
00:04:51,759 --> 00:04:52,800
where along that scale you're

136
00:04:52,800 --> 00:04:54,240
comfortable with being according to your

137
00:04:54,240 --> 00:04:56,639
risk appetites this makes intuitive

138
00:04:56,639 --> 00:04:58,880
sense to us because as humans we

139
00:04:58,880 --> 00:05:00,800
perceive moving quickly as carrying more

140
00:05:00,800 --> 00:05:02,880
risk like driving a car with your foot

141
00:05:02,880 --> 00:05:04,000
down

142
00:05:04,000 --> 00:05:05,440
the problem with this intuition when

143
00:05:05,440 --> 00:05:07,120
applied to application delivery is that

144
00:05:07,120 --> 00:05:09,600
it's completely wrong

145
00:05:09,600 --> 00:05:11,440
i'm not saying rush everything it'll be

146
00:05:11,440 --> 00:05:12,720
fine

147
00:05:12,720 --> 00:05:15,039
but rapid delivery and high quality are

148
00:05:15,039 --> 00:05:17,280
not opposed to each other in fact they

149
00:05:17,280 --> 00:05:18,880
complement each other

150
00:05:18,880 --> 00:05:20,560
having the ability to develop and

151
00:05:20,560 --> 00:05:22,160
release change to production quickly

152
00:05:22,160 --> 00:05:23,039
means

153
00:05:23,039 --> 00:05:24,800
that you can improve things quicker you

154
00:05:24,800 --> 00:05:26,880
can find and fix issues quicker you'll

155
00:05:26,880 --> 00:05:28,240
find and fix those security issues

156
00:05:28,240 --> 00:05:29,919
quicker

157
00:05:29,919 --> 00:05:31,440
it means you have automated deployment

158
00:05:31,440 --> 00:05:32,639
processes

159
00:05:32,639 --> 00:05:34,400
which remove human error removes

160
00:05:34,400 --> 00:05:36,160
opportunities from licious intent and

161
00:05:36,160 --> 00:05:37,600
increases the reliability of your

162
00:05:37,600 --> 00:05:40,960
ability to actually deploy

163
00:05:41,199 --> 00:05:43,280
if you have automated testing processes

164
00:05:43,280 --> 00:05:45,199
then you're increasing your functional

165
00:05:45,199 --> 00:05:47,039
correctness and you'll also be

166
00:05:47,039 --> 00:05:48,960
increasing any un non-functional

167
00:05:48,960 --> 00:05:50,680
qualities that you're directly testing

168
00:05:50,680 --> 00:05:53,680
for think of performance again

169
00:05:53,680 --> 00:05:56,160
hopefully security

170
00:05:56,160 --> 00:05:57,680
you've probably got code that's clear

171
00:05:57,680 --> 00:05:59,680
and straightforward to extend

172
00:05:59,680 --> 00:06:01,120
and you're not handing off changes to

173
00:06:01,120 --> 00:06:02,960
other teams for assurance or for

174
00:06:02,960 --> 00:06:04,319
deployment

175
00:06:04,319 --> 00:06:06,319
you simply can't deliver pace unless

176
00:06:06,319 --> 00:06:07,280
you're paying attention to the

177
00:06:07,280 --> 00:06:08,880
non-functionals performance

178
00:06:08,880 --> 00:06:10,960
interruptable reliable usable

179
00:06:10,960 --> 00:06:13,120
maintainable and secure systems can be

180
00:06:13,120 --> 00:06:15,520
changed with confidence

181
00:06:15,520 --> 00:06:17,360
low quality systems are harder to change

182
00:06:17,360 --> 00:06:19,520
they're brittle unmaintainable

183
00:06:19,520 --> 00:06:21,039
unreliable

184
00:06:21,039 --> 00:06:24,160
insecure slow

185
00:06:24,160 --> 00:06:26,400
these low quality systems can't be

186
00:06:26,400 --> 00:06:28,080
changed quickly they'll functionally

187
00:06:28,080 --> 00:06:30,080
fall apart if you try and everyone

188
00:06:30,080 --> 00:06:33,199
is quite correctly far too scared to try

189
00:06:33,199 --> 00:06:34,880
every change leads to unpredictable

190
00:06:34,880 --> 00:06:37,919
failures and overly complex systems

191
00:06:37,919 --> 00:06:39,600
the slowest release cadence projects

192
00:06:39,600 --> 00:06:41,680
that i've worked with have all been the

193
00:06:41,680 --> 00:06:43,759
lowest quality the worst designs and

194
00:06:43,759 --> 00:06:45,840
terrible code bases

195
00:06:45,840 --> 00:06:47,120
delivering

196
00:06:47,120 --> 00:06:50,800
slowly isn't more secure it's fearful

197
00:06:50,800 --> 00:06:52,960
and if you're afraid

198
00:06:52,960 --> 00:06:55,440
of changing a system then that system is

199
00:06:55,440 --> 00:06:58,080
not secure

200
00:06:58,720 --> 00:07:00,639
taking all of this into account a

201
00:07:00,639 --> 00:07:01,919
security incident is a trailing

202
00:07:01,919 --> 00:07:03,919
indicator of low software quality

203
00:07:03,919 --> 00:07:05,680
a problem set in long before that

204
00:07:05,680 --> 00:07:06,880
incident happened right training

205
00:07:06,880 --> 00:07:09,840
indicators confirm long-term trends

206
00:07:09,840 --> 00:07:11,599
but they don't help us to predict them

207
00:07:11,599 --> 00:07:13,360
they're a terrible measure to base your

208
00:07:13,360 --> 00:07:15,120
organizational decision making and

209
00:07:15,120 --> 00:07:17,680
budget allocations on which is why a

210
00:07:17,680 --> 00:07:19,680
massive internal re-budgeting and

211
00:07:19,680 --> 00:07:21,440
shake-up in response to security

212
00:07:21,440 --> 00:07:22,479
incidents

213
00:07:22,479 --> 00:07:24,479
usually a bad idea

214
00:07:24,479 --> 00:07:26,720
so how do we manage security quality

215
00:07:26,720 --> 00:07:28,479
when the only thing we have is a

216
00:07:28,479 --> 00:07:30,639
training indicator well we need to get

217
00:07:30,639 --> 00:07:32,000
some leading indicators of software

218
00:07:32,000 --> 00:07:33,919
quality to get ahead of any potential

219
00:07:33,919 --> 00:07:36,160
instance if we had leading indicators

220
00:07:36,160 --> 00:07:37,599
that we have good measures to base our

221
00:07:37,599 --> 00:07:40,160
decision making on

222
00:07:40,160 --> 00:07:43,120
the leading indicators that are used

223
00:07:43,120 --> 00:07:45,360
to define

224
00:07:45,360 --> 00:07:47,599
high performing teams are these the four

225
00:07:47,599 --> 00:07:49,440
metrics that matter

226
00:07:49,440 --> 00:07:51,360
so high performing organizations produce

227
00:07:51,360 --> 00:07:53,360
derive more value from high quality

228
00:07:53,360 --> 00:07:54,800
software delivered by their high

229
00:07:54,800 --> 00:07:56,800
performing technology functions

230
00:07:56,800 --> 00:07:59,360
analysis by nicole forsgen

231
00:07:59,360 --> 00:08:02,639
gene kim and jess humble in 2018 in

232
00:08:02,639 --> 00:08:04,240
accelerate

233
00:08:04,240 --> 00:08:06,080
shows that there are four metrics that

234
00:08:06,080 --> 00:08:08,960
are strong leading indicators of high

235
00:08:08,960 --> 00:08:11,599
performing organizations they are lead

236
00:08:11,599 --> 00:08:13,840
time deployment frequency

237
00:08:13,840 --> 00:08:15,919
mean time to restore and change fill

238
00:08:15,919 --> 00:08:18,240
percentage

239
00:08:18,240 --> 00:08:20,000
notice that functional correctness

240
00:08:20,000 --> 00:08:21,680
doesn't impact any of these right you

241
00:08:21,680 --> 00:08:23,440
could build a completely

242
00:08:23,440 --> 00:08:24,800
wrong system

243
00:08:24,800 --> 00:08:26,400
make no money

244
00:08:26,400 --> 00:08:28,720
mess up your customers

245
00:08:28,720 --> 00:08:31,039
with extremely high quality if you like

246
00:08:31,039 --> 00:08:32,080
so

247
00:08:32,080 --> 00:08:33,440
getting the functionals right is still

248
00:08:33,440 --> 00:08:34,719
important

249
00:08:34,719 --> 00:08:37,519
but non-functionals do impact all of

250
00:08:37,519 --> 00:08:39,519
these

251
00:08:39,519 --> 00:08:41,279
security is interesting though because

252
00:08:41,279 --> 00:08:43,519
improving the security systems doesn't

253
00:08:43,519 --> 00:08:45,920
improve any of these metrics

254
00:08:45,920 --> 00:08:47,600
except insofar as we also improve the

255
00:08:47,600 --> 00:08:49,680
other non-functionals

256
00:08:49,680 --> 00:08:51,519
how we improve product security can make

257
00:08:51,519 --> 00:08:53,279
these metrics worse though

258
00:08:53,279 --> 00:08:56,399
we need to aim for as minimal an impact

259
00:08:56,399 --> 00:08:58,240
on those metrics

260
00:08:58,240 --> 00:09:00,560
while improving security and that's why

261
00:09:00,560 --> 00:09:02,399
tracking these four metrics is important

262
00:09:02,399 --> 00:09:03,680
for security

263
00:09:03,680 --> 00:09:04,959
so if we're measuring these four things

264
00:09:04,959 --> 00:09:06,080
in delivery

265
00:09:06,080 --> 00:09:08,320
then we have direct indicators of the

266
00:09:08,320 --> 00:09:09,839
underlying non-functional qualities of

267
00:09:09,839 --> 00:09:12,160
our system if these are trending badly

268
00:09:12,160 --> 00:09:13,440
as a team you're not paying enough

269
00:09:13,440 --> 00:09:15,360
attention to the non-functionals

270
00:09:15,360 --> 00:09:17,120
these are trending well then your

271
00:09:17,120 --> 00:09:19,120
current balance between getting features

272
00:09:19,120 --> 00:09:20,320
out the door while maintaining the

273
00:09:20,320 --> 00:09:22,880
quality of your work is sustainable

274
00:09:22,880 --> 00:09:24,560
to hone in on specific measures for

275
00:09:24,560 --> 00:09:25,760
security

276
00:09:25,760 --> 00:09:26,880
we're going to need something more

277
00:09:26,880 --> 00:09:28,880
though

278
00:09:28,880 --> 00:09:30,800
so in this study of

279
00:09:30,800 --> 00:09:33,680
the root causes of all cves reported in

280
00:09:33,680 --> 00:09:37,200
the eight years between 2008 and 2016

281
00:09:37,200 --> 00:09:38,959
says that almost

282
00:09:38,959 --> 00:09:40,720
all are in code right in the

283
00:09:40,720 --> 00:09:42,640
implementation section

284
00:09:42,640 --> 00:09:44,480
this makes sense because there are only

285
00:09:44,480 --> 00:09:46,480
so many ways you can scrub a design or

286
00:09:46,480 --> 00:09:48,000
configuration

287
00:09:48,000 --> 00:09:49,519
but there are countless ways to scrub

288
00:09:49,519 --> 00:09:53,200
while coding it's extremely complex

289
00:09:53,200 --> 00:09:55,440
traditional focus cyber security design

290
00:09:55,440 --> 00:09:58,160
reviews configuration hardening sys that

291
00:09:58,160 --> 00:09:59,200
sort of thing

292
00:09:59,200 --> 00:10:01,839
sits in this area it's useful but it's

293
00:10:01,839 --> 00:10:04,399
far from the whole picture

294
00:10:04,399 --> 00:10:06,079
so if most of product security lies in

295
00:10:06,079 --> 00:10:07,760
preventing security defects and code

296
00:10:07,760 --> 00:10:09,680
from reaching production and in fixing

297
00:10:09,680 --> 00:10:11,360
the ones that are already there

298
00:10:11,360 --> 00:10:13,839
and having a measure of direct security

299
00:10:13,839 --> 00:10:15,519
defect density and code from a security

300
00:10:15,519 --> 00:10:17,519
testing tool is a good direct metric

301
00:10:17,519 --> 00:10:20,480
for security quality

302
00:10:22,959 --> 00:10:24,079
lastly

303
00:10:24,079 --> 00:10:25,839
we've seen that we're building how we're

304
00:10:25,839 --> 00:10:27,839
building a system also affects the

305
00:10:27,839 --> 00:10:29,920
product security quality

306
00:10:29,920 --> 00:10:32,560
so we need some measures of that so what

307
00:10:32,560 --> 00:10:34,000
are the activities that have positive

308
00:10:34,000 --> 00:10:36,720
effects on quality generally

309
00:10:36,720 --> 00:10:38,079
well let's go through the ways that you

310
00:10:38,079 --> 00:10:39,839
would ensure performance in your systems

311
00:10:39,839 --> 00:10:40,880
first

312
00:10:40,880 --> 00:10:42,720
as it's more familiar and then we'll

313
00:10:42,720 --> 00:10:45,760
take it from there to security

314
00:10:45,760 --> 00:10:47,120
firstly we'll think about the

315
00:10:47,120 --> 00:10:49,600
performance impact any change

316
00:10:49,600 --> 00:10:51,519
might have while we're planning for it

317
00:10:51,519 --> 00:10:52,560
right

318
00:10:52,560 --> 00:10:54,399
during sprint planning

319
00:10:54,399 --> 00:10:56,000
we'll plan our overall system

320
00:10:56,000 --> 00:10:58,320
architecture around it being performant

321
00:10:58,320 --> 00:11:00,560
we'll make sure that it is performed

322
00:11:00,560 --> 00:11:02,000
we'll ensure that everyone on the team

323
00:11:02,000 --> 00:11:04,320
knows how to write performant code

324
00:11:04,320 --> 00:11:06,160
using the languages and the frameworks

325
00:11:06,160 --> 00:11:06,959
that

326
00:11:06,959 --> 00:11:09,680
need to happen

327
00:11:09,680 --> 00:11:11,360
we'll hire people with domain expertise

328
00:11:11,360 --> 00:11:13,680
and performance to come in and coach and

329
00:11:13,680 --> 00:11:15,600
guide our teams

330
00:11:15,600 --> 00:11:17,360
and the wider business to understand how

331
00:11:17,360 --> 00:11:20,160
important performance is

332
00:11:20,160 --> 00:11:22,720
will peter review code code changes for

333
00:11:22,720 --> 00:11:25,200
those inevitable human errors that slip

334
00:11:25,200 --> 00:11:28,160
in that might impact how performant our

335
00:11:28,160 --> 00:11:30,399
code is

336
00:11:30,399 --> 00:11:32,959
we'll share known performed code

337
00:11:32,959 --> 00:11:36,959
and internal libraries across the teams

338
00:11:37,040 --> 00:11:38,560
we'll make performance a key

339
00:11:38,560 --> 00:11:40,240
consideration in the selection of any

340
00:11:40,240 --> 00:11:42,160
third-party libraries or third-party

341
00:11:42,160 --> 00:11:45,439
services that we depend on

342
00:11:45,760 --> 00:11:48,399
we'll automatically test all changes for

343
00:11:48,399 --> 00:11:50,800
performance regression on every commit

344
00:11:50,800 --> 00:11:52,399
to develop so that developers can catch

345
00:11:52,399 --> 00:11:57,000
things quickly and catch them early

346
00:11:57,120 --> 00:12:00,399
we'll prioritize performance fixes

347
00:12:00,399 --> 00:12:02,160
that are on our backlog or in the

348
00:12:02,160 --> 00:12:05,040
development cycle

349
00:12:05,360 --> 00:12:08,399
and we'll inject comprehensive telemetry

350
00:12:08,399 --> 00:12:11,040
to measure and monitor performance in

351
00:12:11,040 --> 00:12:13,200
production

352
00:12:13,200 --> 00:12:14,639
we'll investigate any performance

353
00:12:14,639 --> 00:12:16,480
incidents we have in production and we

354
00:12:16,480 --> 00:12:19,519
will widely publish the findings

355
00:12:19,519 --> 00:12:20,959
and we'll have responsibility and

356
00:12:20,959 --> 00:12:24,079
accountability for performance will sit

357
00:12:24,079 --> 00:12:26,800
with the team the people building the

358
00:12:26,800 --> 00:12:28,320
systems

359
00:12:28,320 --> 00:12:29,279
now

360
00:12:29,279 --> 00:12:30,880
you've probably already guessed the big

361
00:12:30,880 --> 00:12:32,480
reveal is going to be here

362
00:12:32,480 --> 00:12:34,000
that's right

363
00:12:34,000 --> 00:12:35,680
it's similar across all of your

364
00:12:35,680 --> 00:12:37,360
non-functional qualities right so

365
00:12:37,360 --> 00:12:38,959
security is going to fit in exactly the

366
00:12:38,959 --> 00:12:40,160
same place

367
00:12:40,160 --> 00:12:41,440
now some of those we can measure and

368
00:12:41,440 --> 00:12:43,200
make visible like we can have a record

369
00:12:43,200 --> 00:12:46,480
of developers who've had secure training

370
00:12:46,480 --> 00:12:48,000
a team with only developers who haven't

371
00:12:48,000 --> 00:12:50,000
had it is much more likely to create a

372
00:12:50,000 --> 00:12:52,079
system with low security quality to

373
00:12:52,079 --> 00:12:53,279
given

374
00:12:53,279 --> 00:12:54,639
we can check github and gitlab for

375
00:12:54,639 --> 00:12:56,079
evidence of pull requests and reviews to

376
00:12:56,079 --> 00:12:57,839
show that peer review is actually

377
00:12:57,839 --> 00:12:58,800
happening

378
00:12:58,800 --> 00:13:00,639
now we can't see that it's for security

379
00:13:00,639 --> 00:13:03,920
but we can still see it is happening

380
00:13:03,920 --> 00:13:05,360
we can check

381
00:13:05,360 --> 00:13:07,519
jira or whatever work tracking system

382
00:13:07,519 --> 00:13:09,680
you have for the age of items that have

383
00:13:09,680 --> 00:13:11,360
been marked as security work to show

384
00:13:11,360 --> 00:13:12,880
that known issues aren't being

385
00:13:12,880 --> 00:13:16,000
de-prioritized they're not being ignored

386
00:13:16,000 --> 00:13:18,240
and we can check the build and test logs

387
00:13:18,240 --> 00:13:20,160
on our orchestration platforms for

388
00:13:20,160 --> 00:13:22,639
evidence the security tool test runs

389
00:13:22,639 --> 00:13:24,160
and we can pull all these

390
00:13:24,160 --> 00:13:26,079
delivery metrics direct code level

391
00:13:26,079 --> 00:13:27,920
security testing output and evidence of

392
00:13:27,920 --> 00:13:29,600
good ways of working together create

393
00:13:29,600 --> 00:13:30,480
strong

394
00:13:30,480 --> 00:13:32,839
indicators that we have a product

395
00:13:32,839 --> 00:13:35,680
security under control

396
00:13:35,680 --> 00:13:37,360
but how do we wrap this up in a scalable

397
00:13:37,360 --> 00:13:39,760
process that ensures security is at the

398
00:13:39,760 --> 00:13:41,440
level that it needs to be at while still

399
00:13:41,440 --> 00:13:43,760
delivering at pace

400
00:13:43,760 --> 00:13:45,440
we take a page

401
00:13:45,440 --> 00:13:47,199
out of site reliability engineering

402
00:13:47,199 --> 00:13:50,560
right we have some experts in the field

403
00:13:50,560 --> 00:13:52,079
that build

404
00:13:52,079 --> 00:13:54,160
self-service platforms it's important so

405
00:13:54,160 --> 00:13:55,760
they get out of the way

406
00:13:55,760 --> 00:13:56,720
and then

407
00:13:56,720 --> 00:13:58,240
provide us with launch engineers that

408
00:13:58,240 --> 00:13:59,519
work closely with the product teams to

409
00:13:59,519 --> 00:14:01,120
make sure that it hits the ground

410
00:14:01,120 --> 00:14:02,959
running it has all the things necessary

411
00:14:02,959 --> 00:14:06,079
to be reliable

412
00:14:06,079 --> 00:14:07,839
service level objectives well it costs a

413
00:14:07,839 --> 00:14:10,160
lot more to run a five nines reliable

414
00:14:10,160 --> 00:14:11,920
system than a two nines reliable system

415
00:14:11,920 --> 00:14:12,720
right

416
00:14:12,720 --> 00:14:14,399
so the difference between seven hours of

417
00:14:14,399 --> 00:14:17,920
personal downtime to just 26 seconds

418
00:14:17,920 --> 00:14:19,839
so agreeing what the product requires is

419
00:14:19,839 --> 00:14:22,000
fairly essential

420
00:14:22,000 --> 00:14:23,839
service level indicators relatively

421
00:14:23,839 --> 00:14:25,839
straightforward reliability right is the

422
00:14:25,839 --> 00:14:27,360
system up or down

423
00:14:27,360 --> 00:14:29,440
how long has the system been down for so

424
00:14:29,440 --> 00:14:31,600
far this month

425
00:14:31,600 --> 00:14:33,600
the operating model is simple it's data

426
00:14:33,600 --> 00:14:35,760
driven so there's no emotion provides a

427
00:14:35,760 --> 00:14:37,440
self-regulating back pressure on the

428
00:14:37,440 --> 00:14:39,680
product team if they let reliability go

429
00:14:39,680 --> 00:14:41,279
down with whatever changes they've made

430
00:14:41,279 --> 00:14:43,120
to the system over time

431
00:14:43,120 --> 00:14:45,279
a product team that has production

432
00:14:45,279 --> 00:14:47,040
support responsibility handed back to

433
00:14:47,040 --> 00:14:47,760
them

434
00:14:47,760 --> 00:14:50,079
when then has a strong incentive to now

435
00:14:50,079 --> 00:14:51,680
focus on getting reliability back to

436
00:14:51,680 --> 00:14:53,600
where it needs to be

437
00:14:53,600 --> 00:14:55,440
sre won't take on production support

438
00:14:55,440 --> 00:14:57,760
again until reliability is demonstrably

439
00:14:57,760 --> 00:15:00,399
back to the agreed level

440
00:15:00,399 --> 00:15:02,160
means the developers are not building

441
00:15:02,160 --> 00:15:03,519
new features because they're spending

442
00:15:03,519 --> 00:15:05,120
time doing support

443
00:15:05,120 --> 00:15:06,560
and they don't particularly like being

444
00:15:06,560 --> 00:15:10,160
woken up at 3 30 in the morning either

445
00:15:10,399 --> 00:15:14,160
can we apply this method to security

446
00:15:15,519 --> 00:15:18,880
product security engineering

447
00:15:19,440 --> 00:15:21,839
so you can map sre to security it's the

448
00:15:21,839 --> 00:15:24,079
same just making security part of the

449
00:15:24,079 --> 00:15:25,839
engineering function now it's an

450
00:15:25,839 --> 00:15:27,199
adjustment

451
00:15:27,199 --> 00:15:29,360
for some security teams to become that

452
00:15:29,360 --> 00:15:31,360
internal consultancy with an education

453
00:15:31,360 --> 00:15:33,040
focus

454
00:15:33,040 --> 00:15:34,800
who are building pipelines and making

455
00:15:34,800 --> 00:15:37,040
sure there's automated tools in place

456
00:15:37,040 --> 00:15:39,440
but others are already doing this right

457
00:15:39,440 --> 00:15:41,279
a lot of organizations are already doing

458
00:15:41,279 --> 00:15:43,199
it and a lot of those organizations are

459
00:15:43,199 --> 00:15:45,040
also already grouping systems based on

460
00:15:45,040 --> 00:15:47,040
criticality with greater security

461
00:15:47,040 --> 00:15:50,240
requirements on those critical systems

462
00:15:50,240 --> 00:15:51,759
so they need to specify where the

463
00:15:51,759 --> 00:15:53,199
security level indicators need to be for

464
00:15:53,199 --> 00:15:54,720
each group but they're almost there

465
00:15:54,720 --> 00:15:55,920
already

466
00:15:55,920 --> 00:15:57,519
now we don't have one

467
00:15:57,519 --> 00:15:59,680
clear service level indicator equivalent

468
00:15:59,680 --> 00:16:01,360
so we're going to have to combine

469
00:16:01,360 --> 00:16:02,560
multiple indicators to create a

470
00:16:02,560 --> 00:16:05,680
composite sli as you've already seen

471
00:16:05,680 --> 00:16:07,360
now back best to provide that back

472
00:16:07,360 --> 00:16:08,240
pressure is going to vary from

473
00:16:08,240 --> 00:16:10,160
organization organization

474
00:16:10,160 --> 00:16:11,440
we've made security visible through a

475
00:16:11,440 --> 00:16:13,199
slice but without meaningful back

476
00:16:13,199 --> 00:16:14,320
pressure the product teams can't

477
00:16:14,320 --> 00:16:16,800
self-regulate for security

478
00:16:16,800 --> 00:16:18,639
unlike reliability

479
00:16:18,639 --> 00:16:19,600
you probably aren't going to get a

480
00:16:19,600 --> 00:16:21,279
series of smaller security instance

481
00:16:21,279 --> 00:16:22,800
leading up to a big one right failure

482
00:16:22,800 --> 00:16:25,360
mode security is immediate ish not

483
00:16:25,360 --> 00:16:27,199
gradual

484
00:16:27,199 --> 00:16:28,880
this month we've been hacked twice

485
00:16:28,880 --> 00:16:30,959
briefly already we need to ease back on

486
00:16:30,959 --> 00:16:32,399
feature work and work on security so we

487
00:16:32,399 --> 00:16:34,480
don't get hacked anymore

488
00:16:34,480 --> 00:16:35,920
it's unfortunately not a realistic

489
00:16:35,920 --> 00:16:37,040
situation

490
00:16:37,040 --> 00:16:39,519
so strong incentives for product teams

491
00:16:39,519 --> 00:16:42,000
uh need to be in place to keep leading

492
00:16:42,000 --> 00:16:43,519
indicators where they need to be they're

493
00:16:43,519 --> 00:16:45,360
essential to avoid security quality

494
00:16:45,360 --> 00:16:46,639
deteriorating

495
00:16:46,639 --> 00:16:48,880
which will lead to sudden critical

496
00:16:48,880 --> 00:16:51,839
failures

497
00:16:52,079 --> 00:16:52,959
you need to be able to answer the

498
00:16:52,959 --> 00:16:54,000
question who's contributing to the

499
00:16:54,000 --> 00:16:56,240
system code design product decisions

500
00:16:56,240 --> 00:16:58,320
what subsystems make up the system what

501
00:16:58,320 --> 00:17:00,079
components make up those subsystems

502
00:17:00,079 --> 00:17:01,759
which code repositories map to those

503
00:17:01,759 --> 00:17:03,600
components from the bottom up you need

504
00:17:03,600 --> 00:17:04,559
to be able to go from source code

505
00:17:04,559 --> 00:17:06,319
repository it might be training a

506
00:17:06,319 --> 00:17:08,640
problem to the components subsystems and

507
00:17:08,640 --> 00:17:09,679
systems that are built from that

508
00:17:09,679 --> 00:17:10,880
repository

509
00:17:10,880 --> 00:17:12,640
without asking people

510
00:17:12,640 --> 00:17:14,319
people come and go

511
00:17:14,319 --> 00:17:16,319
software tends to stick around probably

512
00:17:16,319 --> 00:17:18,799
longer than it should if you can't do

513
00:17:18,799 --> 00:17:20,240
this from an engineering point of view

514
00:17:20,240 --> 00:17:22,079
the organization has zero chance of

515
00:17:22,079 --> 00:17:23,240
getting its

516
00:17:23,240 --> 00:17:24,559
[Music]

517
00:17:24,559 --> 00:17:26,799
act together

518
00:17:26,799 --> 00:17:28,240
or being able to build high quality

519
00:17:28,240 --> 00:17:30,400
secure systems or respond to identify

520
00:17:30,400 --> 00:17:32,640
problems adequately and evidencing to

521
00:17:32,640 --> 00:17:34,480
regulators that things are under control

522
00:17:34,480 --> 00:17:36,480
will be very hard proving there's been

523
00:17:36,480 --> 00:17:38,000
no negligence the event of a security

524
00:17:38,000 --> 00:17:41,520
breach will be next to impossible

525
00:17:41,520 --> 00:17:42,880
security level objectives can be as

526
00:17:42,880 --> 00:17:44,400
simple as comprehensive as your

527
00:17:44,400 --> 00:17:46,720
organization needs and automate it to

528
00:17:46,720 --> 00:17:48,320
the degree necessary to scale to the

529
00:17:48,320 --> 00:17:50,559
size of your organization

530
00:17:50,559 --> 00:17:52,240
this is a representation of the system

531
00:17:52,240 --> 00:17:54,320
that's currently previously built

532
00:17:54,320 --> 00:17:56,480
for a large organization it's heavily

533
00:17:56,480 --> 00:17:58,160
automated integrated with multiple other

534
00:17:58,160 --> 00:18:00,480
systems such as active directory hr for

535
00:18:00,480 --> 00:18:01,840
training data

536
00:18:01,840 --> 00:18:05,600
their eim system github enterprise

537
00:18:05,600 --> 00:18:07,360
with a composite security capability

538
00:18:07,360 --> 00:18:09,679
score calculated by an algorithm which

539
00:18:09,679 --> 00:18:11,440
factored in all the security level

540
00:18:11,440 --> 00:18:13,200
indicators identified as important to

541
00:18:13,200 --> 00:18:14,720
the bank

542
00:18:14,720 --> 00:18:17,919
the slo system itself exposed an api for

543
00:18:17,919 --> 00:18:19,520
automated deployment or change control

544
00:18:19,520 --> 00:18:20,480
systems

545
00:18:20,480 --> 00:18:22,080
to check the product and its team were

546
00:18:22,080 --> 00:18:23,440
currently in good standing to allow for

547
00:18:23,440 --> 00:18:25,600
rapid deployment to production

548
00:18:25,600 --> 00:18:26,480
now

549
00:18:26,480 --> 00:18:28,480
you may not need all this but the act of

550
00:18:28,480 --> 00:18:30,080
gathering requirements and establishing

551
00:18:30,080 --> 00:18:32,640
the baseline is very valuable and brings

552
00:18:32,640 --> 00:18:34,000
all stakeholders in your organization

553
00:18:34,000 --> 00:18:35,679
together to agree on the right balance

554
00:18:35,679 --> 00:18:37,919
and the approach to security quality for

555
00:18:37,919 --> 00:18:40,160
you

556
00:18:40,880 --> 00:18:42,720
we're all competitive

557
00:18:42,720 --> 00:18:45,760
no team wants to be the worst performing

558
00:18:45,760 --> 00:18:47,600
quality assurance activities have to

559
00:18:47,600 --> 00:18:48,799
happen

560
00:18:48,799 --> 00:18:50,640
so if a delivery team does them and

561
00:18:50,640 --> 00:18:52,480
evidences them they can go straight to

562
00:18:52,480 --> 00:18:53,520
prod

563
00:18:53,520 --> 00:18:55,280
the carrot right

564
00:18:55,280 --> 00:18:57,520
fast track to production

565
00:18:57,520 --> 00:18:59,360
if they don't then someone else will

566
00:18:59,360 --> 00:19:01,120
have to do it and that takes up a lot of

567
00:19:01,120 --> 00:19:02,320
time

568
00:19:02,320 --> 00:19:04,240
as we saw earlier

569
00:19:04,240 --> 00:19:05,200
you know you have to get the right

570
00:19:05,200 --> 00:19:07,039
operating model to acknowledge the

571
00:19:07,039 --> 00:19:08,880
aspects of product security explicitly

572
00:19:08,880 --> 00:19:10,880
to measure them to make the right people

573
00:19:10,880 --> 00:19:13,440
accountable

574
00:19:14,480 --> 00:19:15,520
so

575
00:19:15,520 --> 00:19:17,440
there will be many talks there have

576
00:19:17,440 --> 00:19:19,440
already been many and there are more to

577
00:19:19,440 --> 00:19:20,320
come

578
00:19:20,320 --> 00:19:23,360
on most of the rest of the slide

579
00:19:23,360 --> 00:19:25,039
today i'm going to focus on the part in

580
00:19:25,039 --> 00:19:27,360
bold mostly because i know that without

581
00:19:27,360 --> 00:19:29,039
developers learning to write and then

582
00:19:29,039 --> 00:19:31,600
continuing to write secure code

583
00:19:31,600 --> 00:19:34,799
we cannot hope to succeed

584
00:19:34,799 --> 00:19:36,880
my talk for oas but black at eu last

585
00:19:36,880 --> 00:19:40,160
year was on exactly that topic

586
00:19:40,160 --> 00:19:43,919
r u b f g red unless blue finds green

587
00:19:43,919 --> 00:19:45,760
so i'll leave the y

588
00:19:45,760 --> 00:19:47,840
as assumed for this talk and i'll focus

589
00:19:47,840 --> 00:19:48,799
on the how

590
00:19:48,799 --> 00:19:50,320
but feel free to check out that talk

591
00:19:50,320 --> 00:19:51,520
afterwards if you disagree with that

592
00:19:51,520 --> 00:19:52,400
premise

593
00:19:52,400 --> 00:19:54,240
and feel free to comment and give me

594
00:19:54,240 --> 00:19:57,520
some feedback on it as well

595
00:19:58,160 --> 00:20:00,080
so this brings us to secure software

596
00:20:00,080 --> 00:20:04,158
development training the how of it all

597
00:20:04,400 --> 00:20:06,559
today i want to talk about our latest

598
00:20:06,559 --> 00:20:09,039
our being oas latest attempt because

599
00:20:09,039 --> 00:20:10,720
this isn't the first time we've tried it

600
00:20:10,720 --> 00:20:12,960
to standardize and codify a curriculum

601
00:20:12,960 --> 00:20:15,200
for secure software development

602
00:20:15,200 --> 00:20:17,200
this is an awesome initiative i'm a huge

603
00:20:17,200 --> 00:20:18,640
fan of os

604
00:20:18,640 --> 00:20:20,480
especially of the open source approach

605
00:20:20,480 --> 00:20:22,480
to building stuff

606
00:20:22,480 --> 00:20:24,159
because then things happen in the open

607
00:20:24,159 --> 00:20:25,520
and everyone

608
00:20:25,520 --> 00:20:28,640
anyone can contribute

609
00:20:28,640 --> 00:20:30,320
it also makes sense to use the os

610
00:20:30,320 --> 00:20:32,080
projects that set the standard for

611
00:20:32,080 --> 00:20:34,880
measuring software quality just the svs

612
00:20:34,880 --> 00:20:35,679
and

613
00:20:35,679 --> 00:20:39,840
the deployment maturity which is the sam

614
00:20:39,840 --> 00:20:41,600
and to use the great work that's been

615
00:20:41,600 --> 00:20:43,280
done on these we also leverage

616
00:20:43,280 --> 00:20:45,840
cornucopia because that leverages those

617
00:20:45,840 --> 00:20:47,600
same projects as well and covers design

618
00:20:47,600 --> 00:20:48,559
principles

619
00:20:48,559 --> 00:20:50,000
and the top 10 because that's where

620
00:20:50,000 --> 00:20:52,880
everything starts

621
00:20:52,960 --> 00:20:54,320
speaking of starting let's kick this off

622
00:20:54,320 --> 00:20:58,240
with the fundamentals the top 10.

623
00:20:58,400 --> 00:21:00,240
the top 10 although there are now

624
00:21:00,240 --> 00:21:01,360
several

625
00:21:01,360 --> 00:21:03,120
is where most teams start to look at

626
00:21:03,120 --> 00:21:05,039
product security that's from the common

627
00:21:05,039 --> 00:21:06,799
defect side rather than how to build

628
00:21:06,799 --> 00:21:08,000
things right

629
00:21:08,000 --> 00:21:09,520
but the original top 10 the one that's

630
00:21:09,520 --> 00:21:11,039
being updated this year and is

631
00:21:11,039 --> 00:21:14,159
referenced indirectly now by the pci dss

632
00:21:14,159 --> 00:21:15,280
despite

633
00:21:15,280 --> 00:21:17,039
not being a standard

634
00:21:17,039 --> 00:21:19,120
is still a good place to start

635
00:21:19,120 --> 00:21:21,120
henry van stock

636
00:21:21,120 --> 00:21:23,520
who's the current top 10 project lead

637
00:21:23,520 --> 00:21:25,440
and executive executive director for

638
00:21:25,440 --> 00:21:26,880
royal wasp

639
00:21:26,880 --> 00:21:28,559
said at this year developer summit that

640
00:21:28,559 --> 00:21:30,000
the top 10 is a good place to learn to

641
00:21:30,000 --> 00:21:30,960
crawl from

642
00:21:30,960 --> 00:21:33,840
so here we begin

643
00:21:35,039 --> 00:21:36,960
briefly the top 10

644
00:21:36,960 --> 00:21:38,559
because there are full presentations of

645
00:21:38,559 --> 00:21:41,200
the top 10 and heck i even have a couple

646
00:21:41,200 --> 00:21:42,720
myself

647
00:21:42,720 --> 00:21:44,159
are currently the items on the right of

648
00:21:44,159 --> 00:21:45,440
this table

649
00:21:45,440 --> 00:21:47,440
those on the left are from the previous

650
00:21:47,440 --> 00:21:49,679
version which was released three

651
00:21:49,679 --> 00:21:52,559
four years prior to this one was

652
00:21:52,559 --> 00:21:54,000
as you can see the changes are fairly

653
00:21:54,000 --> 00:21:56,000
minor right two got dropped because

654
00:21:56,000 --> 00:21:58,000
framework changes correct the bulk we

655
00:21:58,000 --> 00:21:59,440
previously saw

656
00:21:59,440 --> 00:22:01,039
two got merged

657
00:22:01,039 --> 00:22:03,200
they're actually fairly similar

658
00:22:03,200 --> 00:22:06,640
three got added two of those via the

659
00:22:06,640 --> 00:22:11,120
then newly added community update

660
00:22:11,520 --> 00:22:13,440
created by the absence professionals who

661
00:22:13,440 --> 00:22:16,000
who found that these were important

662
00:22:16,000 --> 00:22:17,600
they are important and at the time data

663
00:22:17,600 --> 00:22:20,559
was hard to find on them

664
00:22:21,200 --> 00:22:23,760
broadly top 10 populates three areas

665
00:22:23,760 --> 00:22:26,320
validation issues access issues build

666
00:22:26,320 --> 00:22:28,400
issues by build i mean

667
00:22:28,400 --> 00:22:31,039
makeup or composition here so education

668
00:22:31,039 --> 00:22:32,480
on the top 10 tends to cover these three

669
00:22:32,480 --> 00:22:34,159
areas to greater or lesser degree using

670
00:22:34,159 --> 00:22:35,280
examples

671
00:22:35,280 --> 00:22:37,200
possibly demonstrations

672
00:22:37,200 --> 00:22:39,360
then talking through code samples and

673
00:22:39,360 --> 00:22:40,799
showing how you can fix it in the code

674
00:22:40,799 --> 00:22:42,400
and how those issues can be uncovered

675
00:22:42,400 --> 00:22:46,080
discovered and fixed remediated

676
00:22:46,080 --> 00:22:48,480
that's exactly what the asc 101 or ase

677
00:22:48,480 --> 00:22:50,400
foundation covers

678
00:22:50,400 --> 00:22:52,480
this is who it's aimed at all of product

679
00:22:52,480 --> 00:22:53,600
delivery from

680
00:22:53,600 --> 00:22:54,640
product owner right the way through

681
00:22:54,640 --> 00:22:56,720
engineers

682
00:22:56,720 --> 00:22:58,400
um you don't need to know anything going

683
00:22:58,400 --> 00:23:00,400
into it it is a foundational it's the

684
00:23:00,400 --> 00:23:02,480
it's the the basic uh

685
00:23:02,480 --> 00:23:04,320
entry level here

686
00:23:04,320 --> 00:23:05,919
um and it'll cover the top 10 and the

687
00:23:05,919 --> 00:23:09,360
basics of appsec

688
00:23:09,360 --> 00:23:11,440
it comes with a slide for each of the

689
00:23:11,440 --> 00:23:12,559
top 10

690
00:23:12,559 --> 00:23:14,400
and speaker notes based off of the

691
00:23:14,400 --> 00:23:15,919
expert experiences the guys who

692
00:23:15,919 --> 00:23:18,080
contributed

693
00:23:18,080 --> 00:23:19,679
and it can be found

694
00:23:19,679 --> 00:23:21,760
right here

695
00:23:21,760 --> 00:23:25,200
just a quick special thank you to hmrc

696
00:23:25,200 --> 00:23:27,360
her majesty's revenues and customs at

697
00:23:27,360 --> 00:23:29,679
the uk tax department who helped build

698
00:23:29,679 --> 00:23:31,679
this piece of work and then contributed

699
00:23:31,679 --> 00:23:33,520
back to oh wasp

700
00:23:33,520 --> 00:23:35,360
taxpayer money paid for this thank you

701
00:23:35,360 --> 00:23:38,080
very much folks

702
00:23:38,480 --> 00:23:40,080
but what comes after that what are the

703
00:23:40,080 --> 00:23:41,840
next steps

704
00:23:41,840 --> 00:23:43,600
copy of course

705
00:23:43,600 --> 00:23:46,159
because architectures are evolutionary

706
00:23:46,159 --> 00:23:47,919
and cornucopia allows developers to use

707
00:23:47,919 --> 00:23:49,360
the knowledge they learn through the

708
00:23:49,360 --> 00:23:51,520
game to evolve the thinking about

709
00:23:51,520 --> 00:23:52,480
threats

710
00:23:52,480 --> 00:23:54,000
through modelling perhaps

711
00:23:54,000 --> 00:23:55,919
as the architecture evolves

712
00:23:55,919 --> 00:23:59,840
we choose cornucopia it's perfect for it

713
00:23:59,919 --> 00:24:02,640
cornucopia itself stands on the giants

714
00:24:02,640 --> 00:24:04,559
that follow

715
00:24:04,559 --> 00:24:07,120
and kind of simplifies those more

716
00:24:07,120 --> 00:24:09,279
complex structures and the top 10 as

717
00:24:09,279 --> 00:24:11,360
well

718
00:24:11,360 --> 00:24:13,840
and it creates a top five

719
00:24:13,840 --> 00:24:16,640
places to consider doing either a user

720
00:24:16,640 --> 00:24:19,600
story or a user security story or a

721
00:24:19,600 --> 00:24:21,919
security spike or adding security nfrs

722
00:24:21,919 --> 00:24:23,279
to

723
00:24:23,279 --> 00:24:26,000
existing stories or acceptance criteria

724
00:24:26,000 --> 00:24:30,159
for security in existing stories

725
00:24:30,159 --> 00:24:32,799
cornucopia in case you don't know

726
00:24:32,799 --> 00:24:35,919
is a card game um and it's based off of

727
00:24:35,919 --> 00:24:39,200
atom showstax eop elevation of privilege

728
00:24:39,200 --> 00:24:42,159
now eop covers game of kai gamification

729
00:24:42,159 --> 00:24:43,440
and gamifying

730
00:24:43,440 --> 00:24:46,400
threat modeling for security folks

731
00:24:46,400 --> 00:24:49,600
well cornucopia does that for developers

732
00:24:49,600 --> 00:24:50,880
the point of view

733
00:24:50,880 --> 00:24:53,600
slips shifts just slightly now i have

734
00:24:53,600 --> 00:24:55,279
hours of presentation and demonstration

735
00:24:55,279 --> 00:24:57,039
materials on cornucopia

736
00:24:57,039 --> 00:24:58,840
and adam and i have done

737
00:24:58,840 --> 00:25:02,159
a panel where we we go back and forth on

738
00:25:02,159 --> 00:25:04,880
on the reds and merits of gamification

739
00:25:04,880 --> 00:25:06,720
and on the different tools we can use

740
00:25:06,720 --> 00:25:08,080
for that

741
00:25:08,080 --> 00:25:09,440
but if you want to learn

742
00:25:09,440 --> 00:25:10,960
how to play the game

743
00:25:10,960 --> 00:25:13,520
then watch this video

744
00:25:13,520 --> 00:25:15,679
and then reach out to me to get a hold

745
00:25:15,679 --> 00:25:17,679
of a deck i have a couple of decks that

746
00:25:17,679 --> 00:25:19,919
i can i can share with the first group

747
00:25:19,919 --> 00:25:21,600
people that reach out

748
00:25:21,600 --> 00:25:23,679
um or for b to access the online version

749
00:25:23,679 --> 00:25:26,320
that we're currently working on

750
00:25:26,320 --> 00:25:28,240
again i have hours on these so i'm going

751
00:25:28,240 --> 00:25:29,440
to just zip through the slides very

752
00:25:29,440 --> 00:25:30,559
quickly

753
00:25:30,559 --> 00:25:33,120
cornucopia or the os top five

754
00:25:33,120 --> 00:25:36,080
is made of six things

755
00:25:36,080 --> 00:25:38,480
you'll see why in a second

756
00:25:38,480 --> 00:25:40,159
those six things are

757
00:25:40,159 --> 00:25:41,279
all then

758
00:25:41,279 --> 00:25:43,679
who you are

759
00:25:43,679 --> 00:25:44,960
auth z

760
00:25:44,960 --> 00:25:47,840
what you're allowed to do

761
00:25:47,840 --> 00:25:50,480
session management the how and how often

762
00:25:50,480 --> 00:25:52,880
we check auth

763
00:25:52,880 --> 00:25:55,039
cryptography which is the secrets the

764
00:25:55,039 --> 00:25:56,400
hashes and

765
00:25:56,400 --> 00:25:58,320
the poor choices

766
00:25:58,320 --> 00:26:00,879
you know what i mean

767
00:26:01,039 --> 00:26:02,480
come on

768
00:26:02,480 --> 00:26:05,200
anyway moving along

769
00:26:05,200 --> 00:26:07,039
data validation encoding which is making

770
00:26:07,039 --> 00:26:08,320
sure that anything that crosses a

771
00:26:08,320 --> 00:26:11,279
security or a trust boundary is safe

772
00:26:11,279 --> 00:26:13,360
and then a catch-all because stuff

773
00:26:13,360 --> 00:26:16,000
doesn't always just work out never fits

774
00:26:16,000 --> 00:26:18,400
nicely

775
00:26:18,880 --> 00:26:20,159
so how do we use cornucopia as an

776
00:26:20,159 --> 00:26:21,679
educative tool

777
00:26:21,679 --> 00:26:23,279
well we play the game

778
00:26:23,279 --> 00:26:25,440
actually as a security person what you

779
00:26:25,440 --> 00:26:27,760
do is you teach developers the game

780
00:26:27,760 --> 00:26:29,360
and give them the materials that come

781
00:26:29,360 --> 00:26:30,480
with the game

782
00:26:30,480 --> 00:26:33,039
and then let them play on their own

783
00:26:33,039 --> 00:26:34,799
otherwise it's a little bit like playing

784
00:26:34,799 --> 00:26:36,960
cards against humanity

785
00:26:36,960 --> 00:26:39,679
with your parents

786
00:26:39,679 --> 00:26:42,159
then to cover off the do threat modeling

787
00:26:42,159 --> 00:26:45,200
check box um you have the devs tag the

788
00:26:45,200 --> 00:26:46,880
stories in epics and jira

789
00:26:46,880 --> 00:26:48,240
and you have them scanning their score

790
00:26:48,240 --> 00:26:49,200
sheet

791
00:26:49,200 --> 00:26:51,360
that gives your auditors something to

792
00:26:51,360 --> 00:26:54,480
feel feel warm and fussy about well you

793
00:26:54,480 --> 00:26:56,320
and the dev teams know that things have

794
00:26:56,320 --> 00:26:59,120
been done right

795
00:27:02,240 --> 00:27:04,240
but how do you level up from that

796
00:27:04,240 --> 00:27:06,640
well there are two possibilities and

797
00:27:06,640 --> 00:27:08,080
this is where most of the work is still

798
00:27:08,080 --> 00:27:09,039
happening

799
00:27:09,039 --> 00:27:10,799
we are to begin with wanting to make

800
00:27:10,799 --> 00:27:12,720
secure software development and skill

801
00:27:12,720 --> 00:27:14,400
that developers can gain while learning

802
00:27:14,400 --> 00:27:15,360
to code

803
00:27:15,360 --> 00:27:16,400
or

804
00:27:16,400 --> 00:27:18,720
learning to code

805
00:27:18,720 --> 00:27:20,559
writes or learning the right coding

806
00:27:20,559 --> 00:27:21,520
patterns

807
00:27:21,520 --> 00:27:24,240
most of us start fairly young

808
00:27:24,240 --> 00:27:26,640
my 11 year old is quite happily building

809
00:27:26,640 --> 00:27:28,640
software

810
00:27:28,640 --> 00:27:30,480
and so we're targeting in this case the

811
00:27:30,480 --> 00:27:32,080
tertiary education

812
00:27:32,080 --> 00:27:33,200
area

813
00:27:33,200 --> 00:27:35,120
with an eye to group skills into modules

814
00:27:35,120 --> 00:27:36,720
and then stack those modules up to cover

815
00:27:36,720 --> 00:27:38,880
the whole of this

816
00:27:38,880 --> 00:27:42,000
builder secure things space

817
00:27:42,000 --> 00:27:43,600
how does it work

818
00:27:43,600 --> 00:27:45,279
basically while the

819
00:27:45,279 --> 00:27:48,000
asps is ospr's answer to the question

820
00:27:48,000 --> 00:27:49,520
what is the standard against which

821
00:27:49,520 --> 00:27:52,480
software can be measured for security

822
00:27:52,480 --> 00:27:55,520
because well it is a standard

823
00:27:55,520 --> 00:27:57,039
and as a standard it has gone through a

824
00:27:57,039 --> 00:28:00,080
lot of rigor and scrutiny though perhaps

825
00:28:00,080 --> 00:28:02,080
never more so than we when we decided it

826
00:28:02,080 --> 00:28:03,120
would make a good basis for the

827
00:28:03,120 --> 00:28:05,279
curriculum

828
00:28:05,279 --> 00:28:06,799
the thousand-foot view of the svs in

829
00:28:06,799 --> 00:28:08,399
case you've never heard of it

830
00:28:08,399 --> 00:28:09,600
the first thing you need to know about

831
00:28:09,600 --> 00:28:11,279
the acs is that it's split into three

832
00:28:11,279 --> 00:28:12,720
levels

833
00:28:12,720 --> 00:28:14,960
each applicable to different types of

834
00:28:14,960 --> 00:28:16,640
applications

835
00:28:16,640 --> 00:28:20,240
level 1 should be used on all apps and

836
00:28:20,240 --> 00:28:22,240
it can be tested for using das tools

837
00:28:22,240 --> 00:28:23,919
alone

838
00:28:23,919 --> 00:28:27,039
zap is a great way to test level 1 osap

839
00:28:27,039 --> 00:28:29,120
take a look

840
00:28:29,120 --> 00:28:30,720
every app should probably get tested

841
00:28:30,720 --> 00:28:33,679
though to at least level two

842
00:28:33,679 --> 00:28:35,919
um the problem is when you go beyond

843
00:28:35,919 --> 00:28:38,080
level one then you need to look at code

844
00:28:38,080 --> 00:28:40,240
you need to review some designs you need

845
00:28:40,240 --> 00:28:42,399
to have conversations to the developers

846
00:28:42,399 --> 00:28:45,440
to get full testing in

847
00:28:45,440 --> 00:28:47,679
level three is for apps that are serious

848
00:28:47,679 --> 00:28:49,200
about security

849
00:28:49,200 --> 00:28:51,200
if your app manages special categories

850
00:28:51,200 --> 00:28:53,039
of data or connects to systems that do

851
00:28:53,039 --> 00:28:56,000
that think bank accounts patient records

852
00:28:56,000 --> 00:28:57,200
etc

853
00:28:57,200 --> 00:29:00,559
then you should be looking here

854
00:29:00,720 --> 00:29:02,240
there's also technically a level zero

855
00:29:02,240 --> 00:29:03,919
which is what any application assessed

856
00:29:03,919 --> 00:29:05,279
that didn't meet all requirements for at

857
00:29:05,279 --> 00:29:07,760
least level one is tagged to spin

858
00:29:07,760 --> 00:29:09,360
if you use level zero in your

859
00:29:09,360 --> 00:29:10,399
organization you probably want to

860
00:29:10,399 --> 00:29:14,320
document what a pass meant for you

861
00:29:14,320 --> 00:29:15,760
learning areas for the svs cover

862
00:29:15,760 --> 00:29:17,760
everything from architecture not which

863
00:29:17,760 --> 00:29:19,520
is not tested during level 1

864
00:29:19,520 --> 00:29:20,960
through to details about configuration

865
00:29:20,960 --> 00:29:22,559
which is incredibly tested during level

866
00:29:22,559 --> 00:29:23,600
1

867
00:29:23,600 --> 00:29:25,120
and includes the domains from cornucopia

868
00:29:25,120 --> 00:29:26,960
earlier right authentication

869
00:29:26,960 --> 00:29:29,760
uh access control authorization

870
00:29:29,760 --> 00:29:31,200
session management validation

871
00:29:31,200 --> 00:29:32,720
cryptography

872
00:29:32,720 --> 00:29:34,399
many others

873
00:29:34,399 --> 00:29:36,480
to assess to level three

874
00:29:36,480 --> 00:29:38,720
across all these domains is to cover off

875
00:29:38,720 --> 00:29:42,799
100 286 requirements

876
00:29:43,600 --> 00:29:44,720
so how do we break this down for

877
00:29:44,720 --> 00:29:46,559
teaching then well

878
00:29:46,559 --> 00:29:48,320
we break all the svs requirements into

879
00:29:48,320 --> 00:29:50,000
actions and terms

880
00:29:50,000 --> 00:29:52,080
we group the terms into units and then

881
00:29:52,080 --> 00:29:54,399
we weigh the actions described

882
00:29:54,399 --> 00:29:58,000
against bloom's taxonomy

883
00:29:59,840 --> 00:30:02,640
bloom's taxonomy or more accurately the

884
00:30:02,640 --> 00:30:05,360
cognitive domain of that taxonomy

885
00:30:05,360 --> 00:30:07,760
describes six levels of learning from

886
00:30:07,760 --> 00:30:09,679
remember through to create

887
00:30:09,679 --> 00:30:11,360
it's a standard applied by educators

888
00:30:11,360 --> 00:30:13,039
around the world and being hierarchical

889
00:30:13,039 --> 00:30:14,559
in order to

890
00:30:14,559 --> 00:30:16,320
successfully understand you also need to

891
00:30:16,320 --> 00:30:17,440
remember

892
00:30:17,440 --> 00:30:19,840
so remember first then understand

893
00:30:19,840 --> 00:30:21,919
in order to apply you need to remember

894
00:30:21,919 --> 00:30:23,600
and then understand and then be able to

895
00:30:23,600 --> 00:30:25,200
apply it

896
00:30:25,200 --> 00:30:28,000
now while six is theoretically possible

897
00:30:28,000 --> 00:30:29,440
we've not find cause to use it in the

898
00:30:29,440 --> 00:30:31,679
afc yet

899
00:30:31,679 --> 00:30:33,679
we've also not seen anything less than a

900
00:30:33,679 --> 00:30:34,799
two

901
00:30:34,799 --> 00:30:37,840
it's interesting to note

902
00:30:37,919 --> 00:30:39,600
the process is as follows we take a

903
00:30:39,600 --> 00:30:41,919
requirement from the svs like this one

904
00:30:41,919 --> 00:30:43,840
we identify the actions

905
00:30:43,840 --> 00:30:46,000
we identify and create the terms and we

906
00:30:46,000 --> 00:30:48,320
apply magic to determine the bloom's

907
00:30:48,320 --> 00:30:49,679
level required to fulfill the

908
00:30:49,679 --> 00:30:50,799
requirement

909
00:30:50,799 --> 00:30:52,399
that magic being

910
00:30:52,399 --> 00:30:53,840
a

911
00:30:53,840 --> 00:30:55,760
fair amount of experience with assessing

912
00:30:55,760 --> 00:30:57,600
against the asvs standard or building

913
00:30:57,600 --> 00:30:59,679
software that met those requirements the

914
00:30:59,679 --> 00:31:01,519
svs standard

915
00:31:01,519 --> 00:31:03,760
this results in the basis the curriculum

916
00:31:03,760 --> 00:31:05,600
though right what knowledge is required

917
00:31:05,600 --> 00:31:07,039
to build something that meets the

918
00:31:07,039 --> 00:31:09,279
requirement or to evaluate whether it

919
00:31:09,279 --> 00:31:11,279
does meet this requirement

920
00:31:11,279 --> 00:31:13,120
obviously the next steps from here are

921
00:31:13,120 --> 00:31:16,480
to find information on each term

922
00:31:16,480 --> 00:31:18,399
make a note to the standard authors

923
00:31:18,399 --> 00:31:20,159
about the item

924
00:31:20,159 --> 00:31:22,399
or maybe even add a knowledge-based

925
00:31:22,399 --> 00:31:25,120
article or some combination of the above

926
00:31:25,120 --> 00:31:26,480
and then actually build teaching

927
00:31:26,480 --> 00:31:28,399
materials from those terms which would

928
00:31:28,399 --> 00:31:30,080
be grouped by units

929
00:31:30,080 --> 00:31:31,679
curriculum may not go that to that

930
00:31:31,679 --> 00:31:33,279
degree but we have done it with the

931
00:31:33,279 --> 00:31:34,799
first section

932
00:31:34,799 --> 00:31:36,880
this particular

933
00:31:36,880 --> 00:31:38,799
requirement actually does have a note

934
00:31:38,799 --> 00:31:40,559
back to the asvs team

935
00:31:40,559 --> 00:31:42,799
and it also has a to-do item a thing

936
00:31:42,799 --> 00:31:44,240
that needs to be done

937
00:31:44,240 --> 00:31:46,720
because we don't have an article on

938
00:31:46,720 --> 00:31:48,399
feature-based approach for modeling

939
00:31:48,399 --> 00:31:50,960
role-based access control

940
00:31:50,960 --> 00:31:52,080
but there is somebody who's written a

941
00:31:52,080 --> 00:31:53,600
paper on it and that's a good source to

942
00:31:53,600 --> 00:31:56,000
start at

943
00:31:56,880 --> 00:31:58,559
now although we covered off asps in the

944
00:31:58,559 --> 00:32:00,559
tertiary section everything gleaned

945
00:32:00,559 --> 00:32:02,960
there can and must also become available

946
00:32:02,960 --> 00:32:04,640
through industry training

947
00:32:04,640 --> 00:32:06,320
as with everything discovered in

948
00:32:06,320 --> 00:32:08,240
industry training should eventually end

949
00:32:08,240 --> 00:32:11,600
up in the tertiary education section

950
00:32:11,600 --> 00:32:13,840
so imagine that all that previous work

951
00:32:13,840 --> 00:32:15,440
would also be broken up into parts that

952
00:32:15,440 --> 00:32:18,000
can be consumed in one three and five

953
00:32:18,000 --> 00:32:20,399
day increments grouped together in

954
00:32:20,399 --> 00:32:22,559
job shaped courses with related modules

955
00:32:22,559 --> 00:32:24,399
rather than the units previously

956
00:32:24,399 --> 00:32:26,000
described

957
00:32:26,000 --> 00:32:28,559
it's all still work in progress

958
00:32:28,559 --> 00:32:30,399
in this section we're going to cover owa

959
00:32:30,399 --> 00:32:31,360
sam

960
00:32:31,360 --> 00:32:33,360
where asps is about building a secure

961
00:32:33,360 --> 00:32:35,760
thing sam is about building a thing

962
00:32:35,760 --> 00:32:38,399
securely

963
00:32:38,640 --> 00:32:40,720
when it comes to telling folks how they

964
00:32:40,720 --> 00:32:42,799
should build software securely

965
00:32:42,799 --> 00:32:45,519
you need it to be prescriptive

966
00:32:45,519 --> 00:32:47,840
which is one of the reasons we picked

967
00:32:47,840 --> 00:32:50,320
sam over for example visa

968
00:32:50,320 --> 00:32:51,919
the other is of course that it's an

969
00:32:51,919 --> 00:32:53,600
oauth project and you may have noticed

970
00:32:53,600 --> 00:32:56,640
how much we like those

971
00:32:56,640 --> 00:33:00,720
sam is made up of five business function

972
00:33:00,720 --> 00:33:03,600
each business function is a category of

973
00:33:03,600 --> 00:33:05,919
activities that organizations involved

974
00:33:05,919 --> 00:33:09,440
in developing software somehow perform

975
00:33:09,440 --> 00:33:10,720
each of those functions has three

976
00:33:10,720 --> 00:33:12,240
security practices

977
00:33:12,240 --> 00:33:13,840
which are group

978
00:33:13,840 --> 00:33:16,000
related security activities that support

979
00:33:16,000 --> 00:33:17,039
them

980
00:33:17,039 --> 00:33:19,039
security practices have six activities

981
00:33:19,039 --> 00:33:21,200
grouped in logical flows divided into

982
00:33:21,200 --> 00:33:23,039
two streams

983
00:33:23,039 --> 00:33:24,640
and split across the three maturity

984
00:33:24,640 --> 00:33:26,480
levels giving us 90 requirements in

985
00:33:26,480 --> 00:33:28,000
total

986
00:33:28,000 --> 00:33:29,519
streams cover different aspects of a

987
00:33:29,519 --> 00:33:31,279
practice and have their own objectives

988
00:33:31,279 --> 00:33:33,360
aligning and linking the activities in

989
00:33:33,360 --> 00:33:36,799
the practice over the different levels

990
00:33:36,799 --> 00:33:38,640
now the learning areas in sam

991
00:33:38,640 --> 00:33:40,880
cover activities from overall governance

992
00:33:40,880 --> 00:33:43,519
and education hey that's a thought

993
00:33:43,519 --> 00:33:44,960
through to operational concerns like

994
00:33:44,960 --> 00:33:47,840
managing incidents

995
00:33:48,799 --> 00:33:51,120
as before with the asps we break down

996
00:33:51,120 --> 00:33:53,279
the activities into actions and terms

997
00:33:53,279 --> 00:33:55,120
and then go through the weighing process

998
00:33:55,120 --> 00:33:57,120
there are fewer activities in sam than

999
00:33:57,120 --> 00:34:00,399
requirements in the svs yay

1000
00:34:00,399 --> 00:34:03,919
but the activities are more complex

1001
00:34:03,919 --> 00:34:06,559
damn

1002
00:34:06,559 --> 00:34:08,800
we follow the process from before

1003
00:34:08,800 --> 00:34:11,359
but this time gathering actions

1004
00:34:11,359 --> 00:34:13,440
from a given function

1005
00:34:13,440 --> 00:34:16,000
uh function slash practice slash stream

1006
00:34:16,000 --> 00:34:18,159
for a given maturity level as you see at

1007
00:34:18,159 --> 00:34:19,520
the top there

1008
00:34:19,520 --> 00:34:21,520
and we group those actions into modules

1009
00:34:21,520 --> 00:34:25,839
and then the rest becomes identical

1010
00:34:27,520 --> 00:34:29,599
applying this in practice though

1011
00:34:29,599 --> 00:34:31,280
how do you get hold of the curriculum

1012
00:34:31,280 --> 00:34:32,399
well

1013
00:34:32,399 --> 00:34:33,599
foundations

1014
00:34:33,599 --> 00:34:35,918
it's easy just go get it

1015
00:34:35,918 --> 00:34:39,440
um sc101 is available on the os

1016
00:34:39,440 --> 00:34:40,639
website

1017
00:34:40,639 --> 00:34:42,560
on the application security curriculum

1018
00:34:42,560 --> 00:34:45,040
page that was linked earlier

1019
00:34:45,040 --> 00:34:47,679
go grab it teach to your teams

1020
00:34:47,679 --> 00:34:48,480
or

1021
00:34:48,480 --> 00:34:50,560
have us come in secure delivery a bit of

1022
00:34:50,560 --> 00:34:52,800
a pitch here and uh we'll present it to

1023
00:34:52,800 --> 00:34:55,918
your teams we leverage other tools like

1024
00:34:55,918 --> 00:34:59,440
secure flag which is another os project

1025
00:34:59,440 --> 00:35:02,079
and commercial tool and we we make it

1026
00:35:02,079 --> 00:35:04,720
live for your devs we give them hands-on

1027
00:35:04,720 --> 00:35:06,960
actually break you know break this

1028
00:35:06,960 --> 00:35:09,200
application by exporting it using that

1029
00:35:09,200 --> 00:35:10,880
vulnerability then show you the

1030
00:35:10,880 --> 00:35:12,640
vulnerabilities in code and then help

1031
00:35:12,640 --> 00:35:15,200
you to work out how to fix it

1032
00:35:15,200 --> 00:35:17,359
intermediate training

1033
00:35:17,359 --> 00:35:19,680
use the game with your teams reach out

1034
00:35:19,680 --> 00:35:21,280
for a deck of cards

1035
00:35:21,280 --> 00:35:23,119
uh again

1036
00:35:23,119 --> 00:35:25,200
at root demon

1037
00:35:25,200 --> 00:35:26,880
um

1038
00:35:26,880 --> 00:35:29,200
or reach out to us for b to access to

1039
00:35:29,200 --> 00:35:31,359
the the online version

1040
00:35:31,359 --> 00:35:33,200
or have us come and play with your teams

1041
00:35:33,200 --> 00:35:36,879
and have us teach them how to play

1042
00:35:37,040 --> 00:35:38,880
tertiary and industry training is still

1043
00:35:38,880 --> 00:35:40,400
work in progress

1044
00:35:40,400 --> 00:35:42,640
we've built parts of the whole and we're

1045
00:35:42,640 --> 00:35:44,240
able to present those parts to your

1046
00:35:44,240 --> 00:35:46,720
teams if they have a need for particular

1047
00:35:46,720 --> 00:35:48,000
aspects of them

1048
00:35:48,000 --> 00:35:49,440
but that's not the point right the point

1049
00:35:49,440 --> 00:35:51,040
is for this to become a standard and for

1050
00:35:51,040 --> 00:35:53,440
everyone to have access to it all of it

1051
00:35:53,440 --> 00:35:54,800
so we'll continue to build out what's

1052
00:35:54,800 --> 00:35:58,079
there until that is the case

1053
00:35:58,079 --> 00:35:59,359
future

1054
00:35:59,359 --> 00:36:00,320
well

1055
00:36:00,320 --> 00:36:02,320
help us to complete the mappings to work

1056
00:36:02,320 --> 00:36:03,680
on building the modules and units and

1057
00:36:03,680 --> 00:36:05,280
then possibly even creating slideshows

1058
00:36:05,280 --> 00:36:07,119
and speaker notes

1059
00:36:07,119 --> 00:36:08,720
sponsor the project

1060
00:36:08,720 --> 00:36:11,200
like hmrc has by engaging us

1061
00:36:11,200 --> 00:36:12,800
or through the oauth grants process

1062
00:36:12,800 --> 00:36:14,800
that's listed here

1063
00:36:14,800 --> 00:36:16,320
and most importantly give us your

1064
00:36:16,320 --> 00:36:17,359
feedback

1065
00:36:17,359 --> 00:36:19,839
that's my erwasp email address there

1066
00:36:19,839 --> 00:36:22,079
along with my twitter handle and of

1067
00:36:22,079 --> 00:36:24,560
course my discord handle

1068
00:36:24,560 --> 00:36:26,079
reach out to me here if you want to as

1069
00:36:26,079 --> 00:36:28,240
well

1070
00:36:28,560 --> 00:36:30,400
one last thing

1071
00:36:30,400 --> 00:36:32,480
there is a survey by the how to get into

1072
00:36:32,480 --> 00:36:34,880
abstech project the sister project to

1073
00:36:34,880 --> 00:36:36,160
the curriculum

1074
00:36:36,160 --> 00:36:37,680
which also falls under the oauth

1075
00:36:37,680 --> 00:36:39,599
education committee now they're doing a

1076
00:36:39,599 --> 00:36:41,119
survey to get details of abstract roles

1077
00:36:41,119 --> 00:36:42,240
around the world

1078
00:36:42,240 --> 00:36:43,520
and the survey is going to be used to

1079
00:36:43,520 --> 00:36:45,760
create destination personas endpoints in

1080
00:36:45,760 --> 00:36:47,520
the journey into appsec

1081
00:36:47,520 --> 00:36:49,040
and of course it will provide us with

1082
00:36:49,040 --> 00:36:51,280
the basis to build out the job-shaped

1083
00:36:51,280 --> 00:36:53,440
courses and those related modules that

1084
00:36:53,440 --> 00:36:55,680
we need to do

1085
00:36:55,680 --> 00:36:57,280
with that i'd like to thank you very

1086
00:36:57,280 --> 00:36:58,960
much for your time and i hope you've

1087
00:36:58,960 --> 00:37:00,640
gotten a lot out of today

1088
00:37:00,640 --> 00:37:02,640
again feel free to reach out to me any

1089
00:37:02,640 --> 00:37:04,000
way you like any of the options that

1090
00:37:04,000 --> 00:37:05,680
were available to you even through the

1091
00:37:05,680 --> 00:37:09,040
feedback channel here with that i wish

1092
00:37:09,040 --> 00:37:12,920
you a fantastic day

