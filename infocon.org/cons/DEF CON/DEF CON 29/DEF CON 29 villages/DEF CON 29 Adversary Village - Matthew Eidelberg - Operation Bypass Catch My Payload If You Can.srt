1
00:00:00,240 --> 00:00:05,120
hello and welcome to my talk

2
00:00:02,800 --> 00:00:06,640
operation bypass catch my payload if you

3
00:00:05,120 --> 00:00:08,559
can

4
00:00:06,640 --> 00:00:11,120
my name is matthewberg i'm a technical

5
00:00:08,559 --> 00:00:13,679
manager in optiv

6
00:00:11,120 --> 00:00:15,599
under the adversarial services i am

7
00:00:13,679 --> 00:00:17,520
primarily a lead there

8
00:00:15,599 --> 00:00:19,439
my role is focusing primarily on red

9
00:00:17,520 --> 00:00:21,680
teaming purple teaming basically any

10
00:00:19,439 --> 00:00:23,760
type of adversarial real

11
00:00:21,680 --> 00:00:25,680
nation-state-based attacks i've also

12
00:00:23,760 --> 00:00:27,519
authored numerous open source tools and

13
00:00:25,680 --> 00:00:30,560
frameworks

14
00:00:27,519 --> 00:00:33,920
a lot of the research i've done has been

15
00:00:30,560 --> 00:00:36,320
focused on invasion bypasses and as well

16
00:00:33,920 --> 00:00:38,239
as circumventing edr and other endpoint

17
00:00:36,320 --> 00:00:40,559
based controls and security

18
00:00:38,239 --> 00:00:43,440
i'm a microsoft hall of famer related to

19
00:00:40,559 --> 00:00:45,200
several disclosed microsoft com bypasses

20
00:00:43,440 --> 00:00:47,760
and has spoken at

21
00:00:45,200 --> 00:00:50,480
numerous places including defcons red

22
00:00:47,760 --> 00:00:52,879
team village derbycon b-size las vegas

23
00:00:50,480 --> 00:00:54,879
eurocon rsa

24
00:00:52,879 --> 00:00:56,079
so just a brief overview of

25
00:00:54,879 --> 00:00:58,079
the agenda that we're going to cover

26
00:00:56,079 --> 00:00:59,680
today first we're going to understand

27
00:00:58,079 --> 00:01:01,760
the level of detection and look at some

28
00:00:59,680 --> 00:01:04,879
upset considerations and understand some

29
00:01:01,760 --> 00:01:07,200
ttps for the modern era then we'll focus

30
00:01:04,879 --> 00:01:10,640
in on using scarecrow a framework for

31
00:01:07,200 --> 00:01:13,040
bypassing endpoint detection tools

32
00:01:10,640 --> 00:01:15,360
and then kind of drilling more into the

33
00:01:13,040 --> 00:01:17,280
indicators of compromise that can lead

34
00:01:15,360 --> 00:01:18,320
to a detection or any type of artifacts

35
00:01:17,280 --> 00:01:19,759
when we're talking about command and

36
00:01:18,320 --> 00:01:22,240
control services

37
00:01:19,759 --> 00:01:23,360
and then introduce a new tool to help

38
00:01:22,240 --> 00:01:24,840
with

39
00:01:23,360 --> 00:01:28,000
those c2

40
00:01:24,840 --> 00:01:30,320
profiles so to begin

41
00:01:28,000 --> 00:01:32,960
i mean this is a fairly you know common

42
00:01:30,320 --> 00:01:34,880
uh diagram to kind of depict the red

43
00:01:32,960 --> 00:01:36,720
team life cycle

44
00:01:34,880 --> 00:01:38,560
primarily we're really going to focus in

45
00:01:36,720 --> 00:01:40,799
today once again on the c2 and all the

46
00:01:38,560 --> 00:01:42,640
aspects of it from establishing that

47
00:01:40,799 --> 00:01:43,840
presence to making sure you don't get

48
00:01:42,640 --> 00:01:46,320
detected

49
00:01:43,840 --> 00:01:50,079
into your long-term longevity that leads

50
00:01:46,320 --> 00:01:52,479
into eventually postx techniques

51
00:01:50,079 --> 00:01:55,759
but first let's kind of define you know

52
00:01:52,479 --> 00:01:57,439
endpoint detection and response tools

53
00:01:55,759 --> 00:02:00,560
how do they actually detect us and you

54
00:01:57,439 --> 00:02:02,479
know subsequently prevent uh our attacks

55
00:02:00,560 --> 00:02:04,399
well they primarily rely on a series of

56
00:02:02,479 --> 00:02:06,880
different combinations these days uh

57
00:02:04,399 --> 00:02:10,160
user land hooking being the most common

58
00:02:06,880 --> 00:02:13,200
uh kernel callbacks using etw events

59
00:02:10,160 --> 00:02:14,000
or the moniker of machine learning ai

60
00:02:13,200 --> 00:02:16,319
which

61
00:02:14,000 --> 00:02:17,680
i use that in quotes because a lot of

62
00:02:16,319 --> 00:02:19,280
times when we get down to it it's

63
00:02:17,680 --> 00:02:21,360
usually a signature base or a

64
00:02:19,280 --> 00:02:23,280
combination of the three with something

65
00:02:21,360 --> 00:02:25,440
else in the background

66
00:02:23,280 --> 00:02:27,120
um not to dispute that there is any

67
00:02:25,440 --> 00:02:29,360
value to machine learning ai which is

68
00:02:27,120 --> 00:02:32,640
often times when

69
00:02:29,360 --> 00:02:35,519
we see this as a tool to prevent threats

70
00:02:32,640 --> 00:02:37,440
it's usually something that is really

71
00:02:35,519 --> 00:02:39,920
not selling the whole truth

72
00:02:37,440 --> 00:02:42,319
and so there are a lot of misconceptions

73
00:02:39,920 --> 00:02:42,319
to it

74
00:02:43,040 --> 00:02:45,519
so

75
00:02:44,000 --> 00:02:47,519
with that in mind how do we get around

76
00:02:45,519 --> 00:02:50,800
it well the most common things have been

77
00:02:47,519 --> 00:02:53,599
process injection but with more recent

78
00:02:50,800 --> 00:02:55,120
events in the modern you know landscape

79
00:02:53,599 --> 00:02:57,840
going to things such as using custom

80
00:02:55,120 --> 00:02:59,360
system calls uh using a technique called

81
00:02:57,840 --> 00:03:00,480
block dls which we'll kind of go into in

82
00:02:59,360 --> 00:03:03,519
a little bit

83
00:03:00,480 --> 00:03:05,040
uh but also more and more undocumented

84
00:03:03,519 --> 00:03:06,959
api calls

85
00:03:05,040 --> 00:03:08,800
now i've kind of

86
00:03:06,959 --> 00:03:11,760
posted a link here

87
00:03:08,800 --> 00:03:14,080
for a good buddy of mine he does an

88
00:03:11,760 --> 00:03:16,080
amazing bit of research and he has a

89
00:03:14,080 --> 00:03:19,040
great project called alternative shell

90
00:03:16,080 --> 00:03:21,440
code exec this really focuses on using

91
00:03:19,040 --> 00:03:23,360
alternative api calls

92
00:03:21,440 --> 00:03:24,879
and kernel callbacks to basically

93
00:03:23,360 --> 00:03:26,560
execute shell code

94
00:03:24,879 --> 00:03:27,760
that are not in the normal way and this

95
00:03:26,560 --> 00:03:30,400
kind of

96
00:03:27,760 --> 00:03:32,400
by nature allows us to

97
00:03:30,400 --> 00:03:34,640
circumvent the normal detections and

98
00:03:32,400 --> 00:03:35,920
therefore establish a presence without

99
00:03:34,640 --> 00:03:38,560
being detected because these are

100
00:03:35,920 --> 00:03:40,959
alternative ways so edrs and other tools

101
00:03:38,560 --> 00:03:43,680
are often not looking for these as a

102
00:03:40,959 --> 00:03:46,319
point to see if malicious activity is

103
00:03:43,680 --> 00:03:48,400
being used

104
00:03:46,319 --> 00:03:50,560
so block dlls this has been a very

105
00:03:48,400 --> 00:03:52,799
common and a great technique this is

106
00:03:50,560 --> 00:03:54,879
essentially a technique where

107
00:03:52,799 --> 00:03:56,640
you can set your process to have a flag

108
00:03:54,879 --> 00:03:57,920
and this flag says hey

109
00:03:56,640 --> 00:04:01,040
only allow

110
00:03:57,920 --> 00:04:05,439
microsoft signed dlls which means that

111
00:04:01,040 --> 00:04:08,640
only system level dlls such as ntdl

112
00:04:05,439 --> 00:04:10,319
kernel kernel 32 these ones they're all

113
00:04:08,640 --> 00:04:12,799
the only ones that are allowed to be

114
00:04:10,319 --> 00:04:15,519
loaded into our process which means

115
00:04:12,799 --> 00:04:17,680
frankly that any type of edr product

116
00:04:15,519 --> 00:04:21,840
can't load their dll into our process to

117
00:04:17,680 --> 00:04:21,840
then subsequently detect our activity

118
00:04:22,160 --> 00:04:27,600
so their response to our attacks

119
00:04:25,040 --> 00:04:30,479
they've started you getting their

120
00:04:27,600 --> 00:04:32,560
dll signed by microsoft ca so this is a

121
00:04:30,479 --> 00:04:33,759
very effective way so that allows them

122
00:04:32,560 --> 00:04:36,400
to basically

123
00:04:33,759 --> 00:04:38,880
still load in even with that flag

124
00:04:36,400 --> 00:04:40,400
deploying as a feature whitelisting

125
00:04:38,880 --> 00:04:41,840
controls

126
00:04:40,400 --> 00:04:43,840
rather than the traditional black

127
00:04:41,840 --> 00:04:46,160
listing but white listing where you

128
00:04:43,840 --> 00:04:49,040
block everything and only limit certain

129
00:04:46,160 --> 00:04:52,800
applications has been very effective as

130
00:04:49,040 --> 00:04:54,400
binary based attacks um no longer work

131
00:04:52,800 --> 00:04:56,960
uh these uh white listing rules are

132
00:04:54,400 --> 00:05:01,360
often using hashes so it's really hard

133
00:04:56,960 --> 00:05:04,080
to imitate a legitimate hash say of cmd

134
00:05:01,360 --> 00:05:07,520
with your implant

135
00:05:04,080 --> 00:05:09,520
um and other kind of controls xdr

136
00:05:07,520 --> 00:05:11,360
this is just you know endpoints uh

137
00:05:09,520 --> 00:05:13,039
detection tools way of gathering

138
00:05:11,360 --> 00:05:14,479
telemetry from different aspects rather

139
00:05:13,039 --> 00:05:16,400
than just the endpoint but looking at

140
00:05:14,479 --> 00:05:18,639
you know the network behavioral traffic

141
00:05:16,400 --> 00:05:20,560
what's egressing and activity between

142
00:05:18,639 --> 00:05:22,479
the host to determine you know baseline

143
00:05:20,560 --> 00:05:25,039
of malicious or suspicious activity such

144
00:05:22,479 --> 00:05:27,120
as you know wmi exec calls or anything

145
00:05:25,039 --> 00:05:29,199
along the lines that would lead to

146
00:05:27,120 --> 00:05:31,520
techniques that an attacker would do or

147
00:05:29,199 --> 00:05:32,960
things that are out of the norm for

148
00:05:31,520 --> 00:05:34,560
that user

149
00:05:32,960 --> 00:05:38,360
really heavily emphasizing the

150
00:05:34,560 --> 00:05:38,360
baselining of activity

151
00:05:38,479 --> 00:05:42,880
so

152
00:05:39,759 --> 00:05:44,960
our response to their response so one of

153
00:05:42,880 --> 00:05:46,639
the things that you know i kind of

154
00:05:44,960 --> 00:05:50,400
preaches with this data age of more and

155
00:05:46,639 --> 00:05:51,680
more people having their edr dll signed

156
00:05:50,400 --> 00:05:55,120
by

157
00:05:51,680 --> 00:05:57,120
microsoft is just to avoid block dlls as

158
00:05:55,120 --> 00:05:59,440
a whole especially for initial photos

159
00:05:57,120 --> 00:06:00,880
but also for postx techniques there are

160
00:05:59,440 --> 00:06:04,319
a lot of great techniques right now

161
00:06:00,880 --> 00:06:04,319
coming out there as a replacement

162
00:06:04,400 --> 00:06:09,280
but this really kind of helps

163
00:06:06,639 --> 00:06:12,240
prevent us from kind of being detected

164
00:06:09,280 --> 00:06:13,520
as this flag of my only sign microsoft

165
00:06:12,240 --> 00:06:15,600
dlls

166
00:06:13,520 --> 00:06:16,880
uh isn't really standard across a lot of

167
00:06:15,600 --> 00:06:18,400
processes and when we're talking about

168
00:06:16,880 --> 00:06:20,160
trying to blend in

169
00:06:18,400 --> 00:06:22,319
that flag itself can sometimes stick out

170
00:06:20,160 --> 00:06:25,199
as a sore thumb therefore kind of

171
00:06:22,319 --> 00:06:27,280
drawing more attention to our process

172
00:06:25,199 --> 00:06:29,039
than we actually want it

173
00:06:27,280 --> 00:06:30,880
um with regards to white listening

174
00:06:29,039 --> 00:06:33,120
controls uh we'll kind of talk a lot

175
00:06:30,880 --> 00:06:35,440
more about this but you know avoiding

176
00:06:33,120 --> 00:06:37,360
using power process injection

177
00:06:35,440 --> 00:06:38,720
in favor of a technique called side

178
00:06:37,360 --> 00:06:40,080
loading we're going to get into that in

179
00:06:38,720 --> 00:06:42,479
a little bit

180
00:06:40,080 --> 00:06:43,600
but with regards to xdr controls this is

181
00:06:42,479 --> 00:06:46,080
really where some of the interesting

182
00:06:43,600 --> 00:06:48,560
stuff about blocking or in-memory

183
00:06:46,080 --> 00:06:50,639
patching of etw events

184
00:06:48,560 --> 00:06:53,440
since um

185
00:06:50,639 --> 00:06:55,680
atw and other things like that uh aren't

186
00:06:53,440 --> 00:06:57,199
organically built into the windows

187
00:06:55,680 --> 00:06:59,120
environment

188
00:06:57,199 --> 00:07:00,400
how these things work is when they're

189
00:06:59,120 --> 00:07:02,720
actually running

190
00:07:00,400 --> 00:07:04,160
they actually have to basically start

191
00:07:02,720 --> 00:07:05,680
enabling the traffic and stuff so

192
00:07:04,160 --> 00:07:08,080
there's no additional resources that are

193
00:07:05,680 --> 00:07:09,759
loaded so by patching and terminating or

194
00:07:08,080 --> 00:07:11,360
tampering with them they don't send the

195
00:07:09,759 --> 00:07:14,080
right information therefore these

196
00:07:11,360 --> 00:07:15,120
controls don't really work

197
00:07:14,080 --> 00:07:16,800
and so

198
00:07:15,120 --> 00:07:19,360
this really comes down to the cat and

199
00:07:16,800 --> 00:07:20,479
mouse game and how do we get better

200
00:07:19,360 --> 00:07:21,840
and

201
00:07:20,479 --> 00:07:23,280
really really

202
00:07:21,840 --> 00:07:24,240
at the end of the day really has to come

203
00:07:23,280 --> 00:07:26,800
down to

204
00:07:24,240 --> 00:07:29,280
how are we getting that alert how are

205
00:07:26,800 --> 00:07:31,440
teams seeing us and it's sometimes not

206
00:07:29,280 --> 00:07:34,080
always the shell code or the implant's

207
00:07:31,440 --> 00:07:35,680
fault there is a lot of different

208
00:07:34,080 --> 00:07:37,120
phases that get to the point of that

209
00:07:35,680 --> 00:07:39,360
shell code running

210
00:07:37,120 --> 00:07:41,120
that can often be the catalyst for the

211
00:07:39,360 --> 00:07:43,759
trigger and we really need to understand

212
00:07:41,120 --> 00:07:45,520
this chain of events in order to

213
00:07:43,759 --> 00:07:47,680
identify where we need to improve in our

214
00:07:45,520 --> 00:07:50,160
trade craft

215
00:07:47,680 --> 00:07:51,680
so when we look at this here the example

216
00:07:50,160 --> 00:07:53,120
or definition i like to run by is

217
00:07:51,680 --> 00:07:55,120
there's the delivery

218
00:07:53,120 --> 00:07:56,319
the loader and the implant the delivery

219
00:07:55,120 --> 00:07:57,440
is the mechanism that you're going to

220
00:07:56,319 --> 00:08:00,160
get your

221
00:07:57,440 --> 00:08:02,560
your loader onto the box most commonly

222
00:08:00,160 --> 00:08:04,080
things like you know mshta

223
00:08:02,560 --> 00:08:06,160
bits admin anything that allows you to

224
00:08:04,080 --> 00:08:08,240
download or pull from a

225
00:08:06,160 --> 00:08:10,879
remote or local resource

226
00:08:08,240 --> 00:08:12,639
your code onto the desktop so that's one

227
00:08:10,879 --> 00:08:14,400
area the second area is the loader

228
00:08:12,639 --> 00:08:16,639
itself so you know whether it be a

229
00:08:14,400 --> 00:08:19,199
binary a dll

230
00:08:16,639 --> 00:08:21,599
you know a jscrip file what have you

231
00:08:19,199 --> 00:08:23,120
this is the file that contains you know

232
00:08:21,599 --> 00:08:24,479
your implant as well as you know

233
00:08:23,120 --> 00:08:27,360
whatever techniques you're going to use

234
00:08:24,479 --> 00:08:30,400
whether it be anti-sand boxing anything

235
00:08:27,360 --> 00:08:32,399
for unhooking dlls or like a decryption

236
00:08:30,400 --> 00:08:34,640
technique these are the things that

237
00:08:32,399 --> 00:08:36,719
happen inside this process before your

238
00:08:34,640 --> 00:08:38,640
actual implant will run i like to define

239
00:08:36,719 --> 00:08:40,320
the implant as the shell code or you

240
00:08:38,640 --> 00:08:42,719
know in cobalt strike says the

241
00:08:40,320 --> 00:08:44,560
reflective dll that runs in memory and

242
00:08:42,719 --> 00:08:46,800
that essentially is responsible for

243
00:08:44,560 --> 00:08:48,640
establishing that remote connection out

244
00:08:46,800 --> 00:08:50,080
so once we have these three things

245
00:08:48,640 --> 00:08:52,800
defined we need to understand what's

246
00:08:50,080 --> 00:08:52,800
detecting us

247
00:08:52,839 --> 00:08:56,399
so i like to break it down into two

248
00:08:55,200 --> 00:08:58,399
things

249
00:08:56,399 --> 00:09:01,680
behavioral

250
00:08:58,399 --> 00:09:03,600
which is really coming down to edrs so

251
00:09:01,680 --> 00:09:05,120
edrs really like to focus in on that

252
00:09:03,600 --> 00:09:07,360
behavioral indicators

253
00:09:05,120 --> 00:09:09,839
i have the example up here of why is

254
00:09:07,360 --> 00:09:11,040
excel spawning cmd.exe that that's a

255
00:09:09,839 --> 00:09:13,440
behavioral thing but there's also

256
00:09:11,040 --> 00:09:15,680
signaturizing you know as great as we

257
00:09:13,440 --> 00:09:18,160
look at it signaturized based such as

258
00:09:15,680 --> 00:09:20,640
like you know the historical antivirus

259
00:09:18,160 --> 00:09:22,000
agents that still comes into play when

260
00:09:20,640 --> 00:09:24,720
they're detecting things like large

261
00:09:22,000 --> 00:09:26,880
block strings of base64

262
00:09:24,720 --> 00:09:28,640
or shellcode

263
00:09:26,880 --> 00:09:30,720
but what is the harder thing to

264
00:09:28,640 --> 00:09:32,959
understand and often is more of the more

265
00:09:30,720 --> 00:09:35,120
common reason that leads to an event

266
00:09:32,959 --> 00:09:38,080
is actually coming from something like a

267
00:09:35,120 --> 00:09:41,040
human interaction a sim or some kind of

268
00:09:38,080 --> 00:09:42,640
stock tool that's monitoring for events

269
00:09:41,040 --> 00:09:44,320
this can be something like files being

270
00:09:42,640 --> 00:09:46,880
dropped in a location such as temp and

271
00:09:44,320 --> 00:09:48,080
then a process spawning from a weird

272
00:09:46,880 --> 00:09:50,640
location

273
00:09:48,080 --> 00:09:52,000
to something even more abnormal uh such

274
00:09:50,640 --> 00:09:53,360
as you know

275
00:09:52,000 --> 00:09:56,080
an alert that says hey we're seeing a

276
00:09:53,360 --> 00:09:57,920
lot of egress to a new destination and

277
00:09:56,080 --> 00:09:59,600
tracing it back this is a

278
00:09:57,920 --> 00:10:01,760
conference room pc so why is it calling

279
00:09:59,600 --> 00:10:03,680
out at three in the morning

280
00:10:01,760 --> 00:10:04,480
these are all taken from you know real

281
00:10:03,680 --> 00:10:06,800
life

282
00:10:04,480 --> 00:10:08,800
uh red team operations where there has

283
00:10:06,800 --> 00:10:10,240
been some kind of generated alert and

284
00:10:08,800 --> 00:10:11,839
you know the lessons here are really

285
00:10:10,240 --> 00:10:13,839
kind of some of them are really simple

286
00:10:11,839 --> 00:10:15,839
you know tell more of a

287
00:10:13,839 --> 00:10:18,880
convincing story but of them are more

288
00:10:15,839 --> 00:10:20,160
technical that you have to apply more

289
00:10:18,880 --> 00:10:22,480
uh technical

290
00:10:20,160 --> 00:10:25,279
advanced techniques to basically bypass

291
00:10:22,480 --> 00:10:26,880
that technical control

292
00:10:25,279 --> 00:10:28,399
so the detection

293
00:10:26,880 --> 00:10:29,519
these are the most common gotchas that i

294
00:10:28,399 --> 00:10:31,360
kind of mentioned i like to break them

295
00:10:29,519 --> 00:10:33,200
down to kind of four things to really

296
00:10:31,360 --> 00:10:34,959
focus in on when i'm developing an

297
00:10:33,200 --> 00:10:37,040
attack

298
00:10:34,959 --> 00:10:38,480
what is the command i'm executing so

299
00:10:37,040 --> 00:10:40,160
obviously

300
00:10:38,480 --> 00:10:42,480
you know these days things like

301
00:10:40,160 --> 00:10:45,040
powershell or bits admin

302
00:10:42,480 --> 00:10:46,880
they're very highly indicated there's

303
00:10:45,040 --> 00:10:49,120
been a lot of research they're a very

304
00:10:46,880 --> 00:10:51,360
prominent lol bin

305
00:10:49,120 --> 00:10:52,880
so by focusing and using that there's a

306
00:10:51,360 --> 00:10:54,720
high chance that there is some kind of

307
00:10:52,880 --> 00:10:57,120
rule or type of mechanism out there

308
00:10:54,720 --> 00:11:00,560
that's looking for the execution of it

309
00:10:57,120 --> 00:11:02,000
now there are a couple things you can do

310
00:11:00,560 --> 00:11:03,120
to kind of obfuscate that and that's

311
00:11:02,000 --> 00:11:05,200
really where you have to understand what

312
00:11:03,120 --> 00:11:07,519
you're going up against as well as being

313
00:11:05,200 --> 00:11:09,120
mindful of the file type

314
00:11:07,519 --> 00:11:12,240
obviously if you're dropping if you're

315
00:11:09,120 --> 00:11:14,240
downloading from some random location a

316
00:11:12,240 --> 00:11:16,880
binary is just straight there are going

317
00:11:14,240 --> 00:11:18,959
to be things that passes through um web

318
00:11:16,880 --> 00:11:21,360
proxies and external kind of control and

319
00:11:18,959 --> 00:11:23,519
they can see it this large data stream

320
00:11:21,360 --> 00:11:25,760
and you know binaries have a universal

321
00:11:23,519 --> 00:11:26,800
header so it's easy to detect that so

322
00:11:25,760 --> 00:11:29,519
these are all things you have to be

323
00:11:26,800 --> 00:11:31,200
mindful of when you're setting up this

324
00:11:29,519 --> 00:11:33,519
attack chain

325
00:11:31,200 --> 00:11:35,680
also for abnormal behavior this one's a

326
00:11:33,519 --> 00:11:37,680
little harder to kind of discern but

327
00:11:35,680 --> 00:11:39,200
what i like to say is that you know if

328
00:11:37,680 --> 00:11:41,200
you're going to start using commands you

329
00:11:39,200 --> 00:11:43,360
know lol bins

330
00:11:41,200 --> 00:11:44,880
you have to understand who you are you

331
00:11:43,360 --> 00:11:47,040
are you someone

332
00:11:44,880 --> 00:11:48,880
that you know as a standard user are you

333
00:11:47,040 --> 00:11:50,959
is your user someone that would probably

334
00:11:48,880 --> 00:11:52,399
use this and you know if a security team

335
00:11:50,959 --> 00:11:54,320
is looking at they wouldn't bat an eye

336
00:11:52,399 --> 00:11:56,399
so it's really about blending in telling

337
00:11:54,320 --> 00:11:58,720
that story and finally

338
00:11:56,399 --> 00:12:00,240
whitelisting controls so

339
00:11:58,720 --> 00:12:02,720
when i talk about whitelisting controls

340
00:12:00,240 --> 00:12:04,000
we have to really understand you know

341
00:12:02,720 --> 00:12:06,079
what's there

342
00:12:04,000 --> 00:12:08,160
uh oftentimes

343
00:12:06,079 --> 00:12:09,360
your whole you have the greatest attack

344
00:12:08,160 --> 00:12:12,160
chain ever

345
00:12:09,360 --> 00:12:13,600
but if they block your ability to run

346
00:12:12,160 --> 00:12:15,200
something you'll never know it and

347
00:12:13,600 --> 00:12:17,360
especially in a black box situation the

348
00:12:15,200 --> 00:12:19,200
beacon may not come home your implant

349
00:12:17,360 --> 00:12:21,040
your c2 essentially won't fire and you

350
00:12:19,200 --> 00:12:22,399
don't know if that detection is

351
00:12:21,040 --> 00:12:24,639
so if i can leave you with one thing

352
00:12:22,399 --> 00:12:26,399
when we talk about detections it's this

353
00:12:24,639 --> 00:12:28,639
detections are really easy to trigger

354
00:12:26,399 --> 00:12:30,720
but they can be impossible to understand

355
00:12:28,639 --> 00:12:32,560
unless you have the ability to look at

356
00:12:30,720 --> 00:12:34,480
the alert and understand what it's

357
00:12:32,560 --> 00:12:35,920
triggering on and sometimes that can

358
00:12:34,480 --> 00:12:37,680
only be done through life lessons and

359
00:12:35,920 --> 00:12:39,279
experience

360
00:12:37,680 --> 00:12:40,959
now let's kind of talk about an example

361
00:12:39,279 --> 00:12:43,200
in this situation will you use cobalt

362
00:12:40,959 --> 00:12:45,200
strike c2

363
00:12:43,200 --> 00:12:46,720
let's say powershell scripted web

364
00:12:45,200 --> 00:12:49,279
delivery so that would be a powershell

365
00:12:46,720 --> 00:12:53,120
script that you know remotely calls

366
00:12:49,279 --> 00:12:55,839
downloads establishes a beacon

367
00:12:53,120 --> 00:12:57,440
and this happens the beacon calls home

368
00:12:55,839 --> 00:12:58,959
calls home several times before the

369
00:12:57,440 --> 00:13:01,360
operator even executes a command the

370
00:12:58,959 --> 00:13:03,040
first command they run is who am i and

371
00:13:01,360 --> 00:13:04,839
all of a sudden the beacon stops calling

372
00:13:03,040 --> 00:13:06,800
home

373
00:13:04,839 --> 00:13:08,320
so

374
00:13:06,800 --> 00:13:11,120
right now let's kind of take a look and

375
00:13:08,320 --> 00:13:13,760
follow this flow

376
00:13:11,120 --> 00:13:15,760
so here we see you know the chain we see

377
00:13:13,760 --> 00:13:16,959
that you know cmd was used to spawn

378
00:13:15,760 --> 00:13:18,839
powershell

379
00:13:16,959 --> 00:13:22,800
something in powershell was executed and

380
00:13:18,839 --> 00:13:24,480
then who am i was the last process

381
00:13:22,800 --> 00:13:26,079
when we look into it

382
00:13:24,480 --> 00:13:27,920
we see that

383
00:13:26,079 --> 00:13:30,160
first and foremost

384
00:13:27,920 --> 00:13:33,200
the powershell script while it was an

385
00:13:30,160 --> 00:13:34,560
event they don't have enough information

386
00:13:33,200 --> 00:13:36,519
right here they believe there's

387
00:13:34,560 --> 00:13:39,120
something malicious and there has

388
00:13:36,519 --> 00:13:40,959
characteristics so it's not confirmed

389
00:13:39,120 --> 00:13:43,040
they still need more data you know these

390
00:13:40,959 --> 00:13:44,160
edr products don't want to you know jump

391
00:13:43,040 --> 00:13:45,440
to the gun or terminate because they can

392
00:13:44,160 --> 00:13:46,800
actually impact business so they need

393
00:13:45,440 --> 00:13:48,160
the right information because if they're

394
00:13:46,800 --> 00:13:50,800
terminating everything like that it

395
00:13:48,160 --> 00:13:52,480
cannot be used in the environment

396
00:13:50,800 --> 00:13:54,399
no one's going to use their product so

397
00:13:52,480 --> 00:13:56,320
they need more data points to make that

398
00:13:54,399 --> 00:13:58,320
decision

399
00:13:56,320 --> 00:14:00,639
the next alert okay so now it's a bit

400
00:13:58,320 --> 00:14:03,600
more of a severity they see there's a

401
00:14:00,639 --> 00:14:05,279
base64 encoded command and we and it

402
00:14:03,600 --> 00:14:06,880
appears to be malicious

403
00:14:05,279 --> 00:14:08,399
but there's not enough indicators right

404
00:14:06,880 --> 00:14:09,760
now for them to know what's going on

405
00:14:08,399 --> 00:14:12,240
because sometimes this could be a false

406
00:14:09,760 --> 00:14:12,240
positive

407
00:14:13,360 --> 00:14:17,519
and then the final one we see a recon

408
00:14:15,600 --> 00:14:19,760
command obviously who am i

409
00:14:17,519 --> 00:14:21,199
was used and with all this combined

410
00:14:19,760 --> 00:14:23,839
that's where this alert is so we see

411
00:14:21,199 --> 00:14:26,639
this breakdown it wasn't necessarily

412
00:14:23,839 --> 00:14:27,839
that the scripted web delivery was the

413
00:14:26,639 --> 00:14:29,760
catalyst

414
00:14:27,839 --> 00:14:32,079
it was simply enough behavioral

415
00:14:29,760 --> 00:14:33,680
indicators had been tripped for

416
00:14:32,079 --> 00:14:35,279
something to occur

417
00:14:33,680 --> 00:14:37,199
so once again

418
00:14:35,279 --> 00:14:39,440
oftentimes the implant

419
00:14:37,199 --> 00:14:41,440
cannot be the primary cause of the

420
00:14:39,440 --> 00:14:43,600
dejection it can sometimes be postx

421
00:14:41,440 --> 00:14:45,040
techniques

422
00:14:43,600 --> 00:14:46,720
and so

423
00:14:45,040 --> 00:14:49,680
when you are looking at this and you're

424
00:14:46,720 --> 00:14:51,839
establishing a uh a foothold you have to

425
00:14:49,680 --> 00:14:53,519
be also mindful of you know just because

426
00:14:51,839 --> 00:14:56,079
you have this world doesn't mean that

427
00:14:53,519 --> 00:14:57,760
you're free in the clear there are often

428
00:14:56,079 --> 00:15:00,000
secondary controls that can trigger that

429
00:14:57,760 --> 00:15:01,519
can lead to a preventative measure and a

430
00:15:00,000 --> 00:15:04,079
loss of a beacon

431
00:15:01,519 --> 00:15:06,079
so it's really important to understand

432
00:15:04,079 --> 00:15:08,079
even if you're successful how you be how

433
00:15:06,079 --> 00:15:10,399
you were successful are there still

434
00:15:08,079 --> 00:15:11,839
stuff are you fully flying blind do they

435
00:15:10,399 --> 00:15:13,760
have enough information is there

436
00:15:11,839 --> 00:15:14,880
something they're waiting for

437
00:15:13,760 --> 00:15:16,000
um

438
00:15:14,880 --> 00:15:18,639
even if you're using the latest

439
00:15:16,000 --> 00:15:19,680
techniques if you're using a very common

440
00:15:18,639 --> 00:15:21,920
you know

441
00:15:19,680 --> 00:15:24,480
catalyst like a delivery command that's

442
00:15:21,920 --> 00:15:26,959
highly indicated you can get caught

443
00:15:24,480 --> 00:15:28,959
really easily and thus those highly

444
00:15:26,959 --> 00:15:31,519
undetectable techniques will never

445
00:15:28,959 --> 00:15:33,360
really be triggered or used i like to

446
00:15:31,519 --> 00:15:35,040
call this fruit from a poison tree

447
00:15:33,360 --> 00:15:37,120
because if they're already on to you for

448
00:15:35,040 --> 00:15:38,639
the first initial call once again let's

449
00:15:37,120 --> 00:15:42,720
say powershell

450
00:15:38,639 --> 00:15:42,720
everything subsequent is already suspect

451
00:15:43,440 --> 00:15:46,720
so going back to that event

452
00:15:45,279 --> 00:15:48,320
i want to kind of say

453
00:15:46,720 --> 00:15:49,680
who am i was just the tipping point

454
00:15:48,320 --> 00:15:52,720
there was enough information from there

455
00:15:49,680 --> 00:15:55,120
because from the behavioral stance who

456
00:15:52,720 --> 00:15:57,519
am i simply used as a recon and with

457
00:15:55,120 --> 00:16:00,160
everything in that attack chain it was

458
00:15:57,519 --> 00:16:02,000
enough to discern and confirm

459
00:16:00,160 --> 00:16:03,040
that based on the fact that who am i is

460
00:16:02,000 --> 00:16:05,360
run

461
00:16:03,040 --> 00:16:08,000
that the power shell activity was indeed

462
00:16:05,360 --> 00:16:10,000
malicious

463
00:16:08,000 --> 00:16:10,959
and why they did that it might be a

464
00:16:10,000 --> 00:16:12,560
question

465
00:16:10,959 --> 00:16:15,040
why didn't they just instantly block

466
00:16:12,560 --> 00:16:17,920
powershell because powershell as much as

467
00:16:15,040 --> 00:16:20,800
we use this still has legitimate

468
00:16:17,920 --> 00:16:22,880
business uses for i.t and administration

469
00:16:20,800 --> 00:16:24,959
so by completely terminating it doesn't

470
00:16:22,880 --> 00:16:26,880
actually really work you need more

471
00:16:24,959 --> 00:16:28,160
points to make a decision i'd like to

472
00:16:26,880 --> 00:16:30,399
also call out here as an opposite

473
00:16:28,160 --> 00:16:31,600
consideration to avoid powershell at all

474
00:16:30,399 --> 00:16:34,000
costs

475
00:16:31,600 --> 00:16:36,240
most of these days c-sharp tools pretty

476
00:16:34,000 --> 00:16:38,240
much cover the gambit of everything the

477
00:16:36,240 --> 00:16:40,320
c-sharp is highly flexible it's easier

478
00:16:38,240 --> 00:16:42,480
to off these skates make it makes it

479
00:16:40,320 --> 00:16:44,160
harder for blue teams or even uh

480
00:16:42,480 --> 00:16:46,959
endpoint protection tools and

481
00:16:44,160 --> 00:16:48,800
anti-malware controls to detect this so

482
00:16:46,959 --> 00:16:50,240
if at all costs avoid using power

483
00:16:48,800 --> 00:16:53,360
powershell

484
00:16:50,240 --> 00:16:55,360
because it's highly indexed and um

485
00:16:53,360 --> 00:16:58,240
kind of indicators of compromise are

486
00:16:55,360 --> 00:16:58,240
clearly defined

487
00:16:58,480 --> 00:17:00,880
so

488
00:16:59,440 --> 00:17:03,040
some opsec considerations when we're

489
00:17:00,880 --> 00:17:05,360
building out these attack chains as well

490
00:17:03,040 --> 00:17:07,679
as our implants so first and foremost

491
00:17:05,360 --> 00:17:08,400
let's look at the implant itself

492
00:17:07,679 --> 00:17:11,039
so

493
00:17:08,400 --> 00:17:12,400
first i always say

494
00:17:11,039 --> 00:17:14,000
encryption

495
00:17:12,400 --> 00:17:15,799
always use some sort of encryption the

496
00:17:14,000 --> 00:17:19,280
higher the stronger the encryption the

497
00:17:15,799 --> 00:17:20,720
better um sometimes i have discussions

498
00:17:19,280 --> 00:17:23,280
and people ask well what about you know

499
00:17:20,720 --> 00:17:25,919
base64 or something along those lines

500
00:17:23,280 --> 00:17:27,679
that's good but it's by no means a

501
00:17:25,919 --> 00:17:28,559
replacement for encryption

502
00:17:27,679 --> 00:17:29,919
um

503
00:17:28,559 --> 00:17:31,200
it's great to use a combination

504
00:17:29,919 --> 00:17:33,120
especially when you're encrypting you

505
00:17:31,200 --> 00:17:35,039
know with aes or something like that the

506
00:17:33,120 --> 00:17:38,640
string into basic stream four encode it

507
00:17:35,039 --> 00:17:40,000
makes it easier to store in your file

508
00:17:38,640 --> 00:17:41,600
your loader

509
00:17:40,000 --> 00:17:44,080
now that being said the next issue

510
00:17:41,600 --> 00:17:46,720
becomes avoiding the strings this is

511
00:17:44,080 --> 00:17:47,919
often a common thing that you know yara

512
00:17:46,720 --> 00:17:49,760
rules or any type of blue teams are

513
00:17:47,919 --> 00:17:51,600
looking for is you know for something to

514
00:17:49,760 --> 00:17:53,440
write a rule or some kind of trigger on

515
00:17:51,600 --> 00:17:55,600
so if they can find a static string or a

516
00:17:53,440 --> 00:17:57,440
value that's always going to be the same

517
00:17:55,600 --> 00:17:59,360
they will use that as a catalyst to

518
00:17:57,440 --> 00:18:00,880
create their rule for detection this

519
00:17:59,360 --> 00:18:03,200
kind of plays away from the edr

520
00:18:00,880 --> 00:18:04,559
perspective into those simstock all that

521
00:18:03,200 --> 00:18:07,120
type of stuff

522
00:18:04,559 --> 00:18:08,080
so i always like to say if you can make

523
00:18:07,120 --> 00:18:10,720
your

524
00:18:08,080 --> 00:18:12,000
loader as morphic as it can be so each

525
00:18:10,720 --> 00:18:14,000
time you generate it's always going to

526
00:18:12,000 --> 00:18:15,760
be different values the strings are

527
00:18:14,000 --> 00:18:17,039
going to be different sizes and

528
00:18:15,760 --> 00:18:19,440
everything like that that just adds a

529
00:18:17,039 --> 00:18:21,679
level of entropy making it harder to see

530
00:18:19,440 --> 00:18:23,440
it you can kind of see here if you see

531
00:18:21,679 --> 00:18:25,200
in this example the yaro you can see

532
00:18:23,440 --> 00:18:27,440
these ops and all these things if these

533
00:18:25,200 --> 00:18:29,200
are static values the chances are that

534
00:18:27,440 --> 00:18:30,400
it when that triggers there will be an

535
00:18:29,200 --> 00:18:31,760
alert

536
00:18:30,400 --> 00:18:33,600
also

537
00:18:31,760 --> 00:18:35,919
if you can if depending how fluid or

538
00:18:33,600 --> 00:18:38,240
your comfortability in using uncommon

539
00:18:35,919 --> 00:18:40,400
languages is a great way to add a layer

540
00:18:38,240 --> 00:18:42,160
of observation to your loaders

541
00:18:40,400 --> 00:18:44,400
you know the most common ones these days

542
00:18:42,160 --> 00:18:47,120
for tooling is c sharp c plus but

543
00:18:44,400 --> 00:18:50,480
looking things like golang rust

544
00:18:47,120 --> 00:18:55,160
um f sharp can be very valuable as just

545
00:18:50,480 --> 00:18:55,160
a natural way of obvious skating

546
00:18:56,000 --> 00:18:59,520
so offset considerations when we're

547
00:18:57,520 --> 00:19:01,200
talking about a loader so

548
00:18:59,520 --> 00:19:03,840
this is where it becomes very much an

549
00:19:01,200 --> 00:19:05,760
art form and situational so the key

550
00:19:03,840 --> 00:19:07,600
thing here is to understand

551
00:19:05,760 --> 00:19:09,760
you know your environment what are you

552
00:19:07,600 --> 00:19:11,360
targeting what controls do they have

553
00:19:09,760 --> 00:19:13,280
is there something that you know could

554
00:19:11,360 --> 00:19:14,960
just not execute in that environment for

555
00:19:13,280 --> 00:19:15,919
a specific reason

556
00:19:14,960 --> 00:19:17,440
um

557
00:19:15,919 --> 00:19:19,440
more so to the point you know what are

558
00:19:17,440 --> 00:19:21,760
the products everything like that is it

559
00:19:19,440 --> 00:19:23,520
a thin client is it the endpoint that

560
00:19:21,760 --> 00:19:25,840
you're targeting is it like a limited

561
00:19:23,520 --> 00:19:27,440
box everything like that

562
00:19:25,840 --> 00:19:28,559
um if you're gonna you know use some

563
00:19:27,440 --> 00:19:30,799
kind of

564
00:19:28,559 --> 00:19:32,720
com agent or something like that are

565
00:19:30,799 --> 00:19:35,200
those com things if they're related to

566
00:19:32,720 --> 00:19:37,200
you know outlook or word

567
00:19:35,200 --> 00:19:38,559
they might not exist on the server so

568
00:19:37,200 --> 00:19:41,520
those are things you need to be mindful

569
00:19:38,559 --> 00:19:42,480
of other things

570
00:19:41,520 --> 00:19:44,240
can be

571
00:19:42,480 --> 00:19:46,400
you know the file name if your file name

572
00:19:44,240 --> 00:19:48,880
stands out as something very suspicious

573
00:19:46,400 --> 00:19:51,600
that's that's like one major thing

574
00:19:48,880 --> 00:19:53,600
it looks more like a like a program that

575
00:19:51,600 --> 00:19:55,120
would be found in enterprise that kind

576
00:19:53,600 --> 00:19:56,720
of makes it easier to tell that story

577
00:19:55,120 --> 00:19:58,559
once again to blend in

578
00:19:56,720 --> 00:20:00,080
as well as going deeper looking at the

579
00:19:58,559 --> 00:20:02,240
metadata at the attributes you don't

580
00:20:00,080 --> 00:20:05,039
want your home computer or your own

581
00:20:02,240 --> 00:20:06,320
personal name in the metadata

582
00:20:05,039 --> 00:20:08,400
and that all kind of stems down to how

583
00:20:06,320 --> 00:20:10,640
does it look on disk if it's just a

584
00:20:08,400 --> 00:20:12,480
weird size but a weird binary or

585
00:20:10,640 --> 00:20:13,600
something really weird sitting on the

586
00:20:12,480 --> 00:20:15,200
desktop

587
00:20:13,600 --> 00:20:17,200
on you know

588
00:20:15,200 --> 00:20:18,240
a laptop someone's laptop they might see

589
00:20:17,200 --> 00:20:19,440
this

590
00:20:18,240 --> 00:20:20,960
as well as you know where you're

591
00:20:19,440 --> 00:20:23,120
executing it from if you're once again

592
00:20:20,960 --> 00:20:24,640
executing from temp or app data it might

593
00:20:23,120 --> 00:20:26,799
it could be suspicious enough that it

594
00:20:24,640 --> 00:20:27,679
would warrant investigation

595
00:20:26,799 --> 00:20:29,600
um

596
00:20:27,679 --> 00:20:33,120
i called this up before but you know

597
00:20:29,600 --> 00:20:34,799
strings base64 large strings is a very

598
00:20:33,120 --> 00:20:36,559
easy way microsoft is becoming more

599
00:20:34,799 --> 00:20:39,440
adept into looking for files that have

600
00:20:36,559 --> 00:20:40,640
large basic base64 strings by breaking

601
00:20:39,440 --> 00:20:42,000
them up

602
00:20:40,640 --> 00:20:43,760
you uh it makes it harder for the

603
00:20:42,000 --> 00:20:45,760
discern that oh this is this is

604
00:20:43,760 --> 00:20:47,120
definitely something that's suspicious

605
00:20:45,760 --> 00:20:49,840
because there's this large string of

606
00:20:47,120 --> 00:20:49,840
code

607
00:20:50,080 --> 00:20:54,559
and as always binaries

608
00:20:52,480 --> 00:20:57,840
i don't mean to beat up on them a lot

609
00:20:54,559 --> 00:20:59,679
but binaries are really easy to detect

610
00:20:57,840 --> 00:21:01,760
that's why you know looking at and we're

611
00:20:59,679 --> 00:21:04,000
going to talk about it right now

612
00:21:01,760 --> 00:21:05,760
looking at new ways to

613
00:21:04,000 --> 00:21:08,400
basically

614
00:21:05,760 --> 00:21:10,240
load shell code into memory so

615
00:21:08,400 --> 00:21:12,000
onto the tactics techniques procedures

616
00:21:10,240 --> 00:21:13,520
for this modern era

617
00:21:12,000 --> 00:21:15,120
we talked about this a little bit but

618
00:21:13,520 --> 00:21:18,960
side loading

619
00:21:15,120 --> 00:21:18,960
this is becoming more and more prevalent

620
00:21:19,360 --> 00:21:22,240
threat groups around the world are

621
00:21:20,480 --> 00:21:24,640
trying to use this technique more and

622
00:21:22,240 --> 00:21:26,400
more in favor of traditional things like

623
00:21:24,640 --> 00:21:27,520
binaries or even process injection

624
00:21:26,400 --> 00:21:28,840
attacks

625
00:21:27,520 --> 00:21:33,039
this technique

626
00:21:28,840 --> 00:21:34,720
is simply the act of loading your dll

627
00:21:33,039 --> 00:21:37,120
into a program

628
00:21:34,720 --> 00:21:38,480
at a legitimate program of that in a

629
00:21:37,120 --> 00:21:40,480
malicious way

630
00:21:38,480 --> 00:21:43,200
so how this can be is you know an

631
00:21:40,480 --> 00:21:44,880
example can be with cpl files where when

632
00:21:43,200 --> 00:21:48,080
they are executed

633
00:21:44,880 --> 00:21:50,640
if you execute your malicious cpl file

634
00:21:48,080 --> 00:21:52,000
it will spawn run dll which is manage

635
00:21:50,640 --> 00:21:55,120
which is responsible for the control

636
00:21:52,000 --> 00:21:56,159
panel cpls or control panel applets

637
00:21:55,120 --> 00:21:58,799
so

638
00:21:56,159 --> 00:22:00,320
when you execute that binary that cpl i

639
00:21:58,799 --> 00:22:02,480
should say

640
00:22:00,320 --> 00:22:04,400
it will spawn a run dll process and that

641
00:22:02,480 --> 00:22:07,440
process will then load if it has the

642
00:22:04,400 --> 00:22:10,080
proper export functions that cpl file

643
00:22:07,440 --> 00:22:11,360
into memory and execute it

644
00:22:10,080 --> 00:22:14,080
so what does that look like it looks

645
00:22:11,360 --> 00:22:15,200
like run dll a legitimate pros

646
00:22:14,080 --> 00:22:16,960
process

647
00:22:15,200 --> 00:22:19,360
is loading something in you see this a

648
00:22:16,960 --> 00:22:20,799
lot with you know reg server 32 as well

649
00:22:19,360 --> 00:22:22,799
with dlls

650
00:22:20,799 --> 00:22:24,159
but it basically circumvents and a lot

651
00:22:22,799 --> 00:22:26,000
of times white listing controls because

652
00:22:24,159 --> 00:22:27,039
these are native to the windows

653
00:22:26,000 --> 00:22:28,480
operating system these are things that

654
00:22:27,039 --> 00:22:29,520
are allowed

655
00:22:28,480 --> 00:22:31,280
uh these are part of the system they're

656
00:22:29,520 --> 00:22:33,760
not selling foreign so they're often

657
00:22:31,280 --> 00:22:36,080
white listed there's many of them

658
00:22:33,760 --> 00:22:38,480
different types of silos i just use run

659
00:22:36,080 --> 00:22:41,039
dll and register as the most common ones

660
00:22:38,480 --> 00:22:43,360
out there but what's great about these

661
00:22:41,039 --> 00:22:46,080
is once they're loaded in

662
00:22:43,360 --> 00:22:48,640
your loader away that drops any type of

663
00:22:46,080 --> 00:22:50,159
dropper that drops that dll or cpl which

664
00:22:48,640 --> 00:22:52,240
whatever your

665
00:22:50,159 --> 00:22:53,840
catalyst you're using

666
00:22:52,240 --> 00:22:55,840
you can remove it and clean it up so

667
00:22:53,840 --> 00:22:57,679
that way the process is there

668
00:22:55,840 --> 00:22:59,360
it's running in memory and how you got

669
00:22:57,679 --> 00:23:00,640
it onto disk how you got everything you

670
00:22:59,360 --> 00:23:02,080
set up

671
00:23:00,640 --> 00:23:04,640
can be cleaned away and it's very

672
00:23:02,080 --> 00:23:04,640
effective

673
00:23:05,679 --> 00:23:10,720
so now let's talk about scarecrow

674
00:23:07,600 --> 00:23:12,320
scarecrow is the framework i developed

675
00:23:10,720 --> 00:23:13,919
that actually performs a lot of the kind

676
00:23:12,320 --> 00:23:15,760
of techniques we've been talking about

677
00:23:13,919 --> 00:23:17,600
so first and foremost

678
00:23:15,760 --> 00:23:19,440
using custom system calls it actually

679
00:23:17,600 --> 00:23:22,320
will reload

680
00:23:19,440 --> 00:23:24,559
ntdl kernel base and kernel 32 flushing

681
00:23:22,320 --> 00:23:26,720
out the edr's userland hooks in it so

682
00:23:24,559 --> 00:23:28,080
there won't be any hooks

683
00:23:26,720 --> 00:23:32,159
it also

684
00:23:28,080 --> 00:23:34,240
encrypts the shell code in an aes format

685
00:23:32,159 --> 00:23:36,559
it patches etw so that way there's no

686
00:23:34,240 --> 00:23:38,400
telemetry and it actually goes a step

687
00:23:36,559 --> 00:23:40,799
further in it and uses

688
00:23:38,400 --> 00:23:43,200
an alternative way to execute shell code

689
00:23:40,799 --> 00:23:44,720
that's not standard so everything we've

690
00:23:43,200 --> 00:23:46,640
just kind of talked about it's built in

691
00:23:44,720 --> 00:23:48,240
this framework what it also does is

692
00:23:46,640 --> 00:23:51,919
those loaders those files whether it be

693
00:23:48,240 --> 00:23:54,000
a binary a dll a jscript file it it

694
00:23:51,919 --> 00:23:55,760
spoofs the attributes of ones that are

695
00:23:54,000 --> 00:23:57,880
legitimately found on the windows

696
00:23:55,760 --> 00:23:59,559
environments you know ranging from

697
00:23:57,880 --> 00:24:02,200
cmd.exe

698
00:23:59,559 --> 00:24:05,520
word.exe to

699
00:24:02,200 --> 00:24:07,919
libcrypto.dll all these values as well

700
00:24:05,520 --> 00:24:09,840
as allows you the ability to validly

701
00:24:07,919 --> 00:24:12,080
code sign

702
00:24:09,840 --> 00:24:15,279
by actually spoofing the attributes of a

703
00:24:12,080 --> 00:24:16,799
domain for a code signing search

704
00:24:15,279 --> 00:24:19,520
uh i've provided a link and i'll provide

705
00:24:16,799 --> 00:24:22,000
an at the end um

706
00:24:19,520 --> 00:24:23,200
to the framework but talking about the

707
00:24:22,000 --> 00:24:24,799
loaders

708
00:24:23,200 --> 00:24:27,200
there are several different ones here

709
00:24:24,799 --> 00:24:29,360
and i've kind of listed them out so

710
00:24:27,200 --> 00:24:31,039
primarily it still does use binaries

711
00:24:29,360 --> 00:24:32,960
there is a place still in the world for

712
00:24:31,039 --> 00:24:34,960
binaries

713
00:24:32,960 --> 00:24:36,559
but the control the dll the excel ms

714
00:24:34,960 --> 00:24:38,720
exact and w script these are all

715
00:24:36,559 --> 00:24:40,000
techniques to side load so we've already

716
00:24:38,720 --> 00:24:44,480
kind of talked about

717
00:24:40,000 --> 00:24:46,880
control and dll but the dll is very

718
00:24:44,480 --> 00:24:49,039
polymorphic it can be used for anything

719
00:24:46,880 --> 00:24:50,640
um it just generates a dll and you can

720
00:24:49,039 --> 00:24:52,240
use it with any type of attack or you

721
00:24:50,640 --> 00:24:54,720
know exploit

722
00:24:52,240 --> 00:24:56,799
excel it actually will

723
00:24:54,720 --> 00:24:59,840
create an excel plugin once again with

724
00:24:56,799 --> 00:25:02,799
valid attributes and a code signing cert

725
00:24:59,840 --> 00:25:04,720
and then uses jscript to actually spawn

726
00:25:02,799 --> 00:25:07,360
excel in the background and load this

727
00:25:04,720 --> 00:25:09,600
plugin in to memory in a side learning

728
00:25:07,360 --> 00:25:12,480
technique

729
00:25:09,600 --> 00:25:15,520
we've recently added msi exec this

730
00:25:12,480 --> 00:25:18,320
creates an msi exact process and loads

731
00:25:15,520 --> 00:25:20,960
once again that dll into memory

732
00:25:18,320 --> 00:25:22,960
um in wscript it uses a technique called

733
00:25:20,960 --> 00:25:24,880
registrationfreecom

734
00:25:22,960 --> 00:25:26,960
which takes a manifest file and says

735
00:25:24,880 --> 00:25:28,559
this manifest cell says hey you need to

736
00:25:26,960 --> 00:25:30,640
load this dll

737
00:25:28,559 --> 00:25:31,919
into memory and it provides the

738
00:25:30,640 --> 00:25:33,679
attributes everything of what it needs

739
00:25:31,919 --> 00:25:35,600
to do so it will look for that dll which

740
00:25:33,679 --> 00:25:38,320
is our malicious dll

741
00:25:35,600 --> 00:25:39,200
and then load it into memory

742
00:25:38,320 --> 00:25:40,880
now

743
00:25:39,200 --> 00:25:42,799
because side loading has become so

744
00:25:40,880 --> 00:25:44,559
prevalent

745
00:25:42,799 --> 00:25:46,480
and as again you know threat actors are

746
00:25:44,559 --> 00:25:48,640
using this in the wild more and more

747
00:25:46,480 --> 00:25:49,760
edrs are trying to combat this

748
00:25:48,640 --> 00:25:52,400
so you can kind of see right here there

749
00:25:49,760 --> 00:25:54,240
was a malicious module loaded you know

750
00:25:52,400 --> 00:25:55,520
they rank this as a high but what are

751
00:25:54,240 --> 00:25:57,200
they actually looking at because this is

752
00:25:55,520 --> 00:25:59,360
a really hard thing to kind of detect

753
00:25:57,200 --> 00:26:01,120
and stop

754
00:25:59,360 --> 00:26:03,360
so you know

755
00:26:01,120 --> 00:26:05,279
simply put sometimes what from my

756
00:26:03,360 --> 00:26:06,960
investigations

757
00:26:05,279 --> 00:26:09,039
looking at it when they are looking at

758
00:26:06,960 --> 00:26:10,400
this look for some abnormal module

759
00:26:09,039 --> 00:26:12,320
behavior being

760
00:26:10,400 --> 00:26:13,360
occurring in the process what does that

761
00:26:12,320 --> 00:26:15,279
mean

762
00:26:13,360 --> 00:26:17,120
sometimes it can be as simple as

763
00:26:15,279 --> 00:26:19,600
the two dlls were loaded at the same

764
00:26:17,120 --> 00:26:21,279
time with the same name

765
00:26:19,600 --> 00:26:22,799
just by changing it

766
00:26:21,279 --> 00:26:23,919
there's no trigger anymore there's no

767
00:26:22,799 --> 00:26:25,840
alert

768
00:26:23,919 --> 00:26:28,320
so it really comes down to that this

769
00:26:25,840 --> 00:26:29,840
technique is very valuable and really

770
00:26:28,320 --> 00:26:32,400
hard to

771
00:26:29,840 --> 00:26:32,400
detect

772
00:26:33,039 --> 00:26:37,279
as such

773
00:26:34,640 --> 00:26:40,799
scarecrow does ensure that the dll names

774
00:26:37,279 --> 00:26:44,400
that it does load in for wscript excel

775
00:26:40,799 --> 00:26:46,240
run dll control panels uh they're not

776
00:26:44,400 --> 00:26:49,039
dlls you're ever going to see in those

777
00:26:46,240 --> 00:26:52,039
processes so this alert never will be

778
00:26:49,039 --> 00:26:52,039
triggered

779
00:26:53,039 --> 00:26:56,080
so

780
00:26:54,080 --> 00:26:57,120
i wanted to provide some tips using this

781
00:26:56,080 --> 00:26:59,840
framework

782
00:26:57,120 --> 00:27:02,159
so the first one is the loader flag

783
00:26:59,840 --> 00:27:03,919
this flag actually stipulates what type

784
00:27:02,159 --> 00:27:05,440
of loader you're going to make

785
00:27:03,919 --> 00:27:07,760
so as we kind of talked about side

786
00:27:05,440 --> 00:27:08,960
loading loaders are way better than

787
00:27:07,760 --> 00:27:10,960
binary

788
00:27:08,960 --> 00:27:13,200
base loaders this is simply because they

789
00:27:10,960 --> 00:27:15,039
can bypass whitelisting controls

790
00:27:13,200 --> 00:27:17,200
if you don't fill this in it will by

791
00:27:15,039 --> 00:27:19,279
default fill it in as binaries and that

792
00:27:17,200 --> 00:27:20,720
might break your success so always

793
00:27:19,279 --> 00:27:22,640
ensure that you know what you're using

794
00:27:20,720 --> 00:27:24,399
don't just use the defaults

795
00:27:22,640 --> 00:27:26,080
dlls like i said they have their place

796
00:27:24,399 --> 00:27:27,840
they're real it's really versatile so it

797
00:27:26,080 --> 00:27:30,159
can be used with pretty much any type of

798
00:27:27,840 --> 00:27:32,720
attack if you have a metasploit module

799
00:27:30,159 --> 00:27:35,039
or anything along those lines or maybe

800
00:27:32,720 --> 00:27:37,919
an ex another exploit where it needs a

801
00:27:35,039 --> 00:27:39,360
dll as a catalyst for your implant this

802
00:27:37,919 --> 00:27:40,960
is where that feature really comes into

803
00:27:39,360 --> 00:27:43,200
play

804
00:27:40,960 --> 00:27:44,720
the next one is the domain flag

805
00:27:43,200 --> 00:27:46,159
this flag

806
00:27:44,720 --> 00:27:47,840
basically determines the domain you're

807
00:27:46,159 --> 00:27:49,039
going to use to spoof the code signing

808
00:27:47,840 --> 00:27:50,880
search now

809
00:27:49,039 --> 00:27:52,399
if you do have a valid code sentence you

810
00:27:50,880 --> 00:27:53,679
can enter it

811
00:27:52,399 --> 00:27:55,919
along with the password and it will

812
00:27:53,679 --> 00:27:57,760
actually use that to validly code sign

813
00:27:55,919 --> 00:27:59,120
it

814
00:27:57,760 --> 00:28:00,880
one thing and it's a very common thing

815
00:27:59,120 --> 00:28:02,399
that i get asked is you know sometimes

816
00:28:00,880 --> 00:28:04,080
it doesn't work you can't reach out it's

817
00:28:02,399 --> 00:28:06,159
stalled when trying to sign that's

818
00:28:04,080 --> 00:28:08,000
sometimes because wherever you're

819
00:28:06,159 --> 00:28:10,240
creating your loader it needs to be able

820
00:28:08,000 --> 00:28:11,919
to reach out to that domain so if there

821
00:28:10,240 --> 00:28:14,320
if you're coming from a host that has no

822
00:28:11,919 --> 00:28:16,480
access to that domain name or the domain

823
00:28:14,320 --> 00:28:18,000
doesn't actually exist

824
00:28:16,480 --> 00:28:19,520
um

825
00:28:18,000 --> 00:28:21,520
that can be a problem

826
00:28:19,520 --> 00:28:23,200
um one of the biggest things i always

827
00:28:21,520 --> 00:28:24,640
want to stress to people is that when

828
00:28:23,200 --> 00:28:27,120
you're actually choosing the domain

829
00:28:24,640 --> 00:28:28,720
never use the company's domain

830
00:28:27,120 --> 00:28:31,039
very few companies

831
00:28:28,720 --> 00:28:33,120
unless they're a big tech company that

832
00:28:31,039 --> 00:28:36,159
actually has a code signature they they

833
00:28:33,120 --> 00:28:37,440
use software or anything like that um

834
00:28:36,159 --> 00:28:38,799
they're typically not going to have a

835
00:28:37,440 --> 00:28:40,399
code signing cert and therefore they're

836
00:28:38,799 --> 00:28:42,320
typically not going to whitelist it in

837
00:28:40,399 --> 00:28:44,799
their own edr products

838
00:28:42,320 --> 00:28:46,559
or across the enterprise so stick to

839
00:28:44,799 --> 00:28:48,320
things that are more common in the

840
00:28:46,559 --> 00:28:50,159
enterprise you know

841
00:28:48,320 --> 00:28:52,720
everyone has network switches everyone

842
00:28:50,159 --> 00:28:53,760
uses windows everyone uses you know

843
00:28:52,720 --> 00:28:54,960
those are the things that are going to

844
00:28:53,760 --> 00:28:57,679
give you a higher success rate when

845
00:28:54,960 --> 00:28:59,919
you're picking a domain

846
00:28:57,679 --> 00:29:01,840
next thing is the delivery command this

847
00:28:59,919 --> 00:29:03,279
is what we talked about this is very

848
00:29:01,840 --> 00:29:05,520
very very dependent on what you're

849
00:29:03,279 --> 00:29:07,919
facing like i've been saying you know

850
00:29:05,520 --> 00:29:09,360
lol bins are great

851
00:29:07,919 --> 00:29:11,919
but there's also they also come with a

852
00:29:09,360 --> 00:29:13,840
high chance of detection so the

853
00:29:11,919 --> 00:29:15,840
double-edged sword

854
00:29:13,840 --> 00:29:18,720
um the way i kind of tell people is that

855
00:29:15,840 --> 00:29:21,520
you know hgas are good but macros and

856
00:29:18,720 --> 00:29:23,840
calm objects they're better

857
00:29:21,520 --> 00:29:25,520
um you know everyone has there's always

858
00:29:23,840 --> 00:29:27,360
that once again that fluid it depends on

859
00:29:25,520 --> 00:29:29,360
the environment so the more information

860
00:29:27,360 --> 00:29:31,520
you get from your recon everything like

861
00:29:29,360 --> 00:29:33,360
that will really tell you which one will

862
00:29:31,520 --> 00:29:35,039
work better it's never going to be that

863
00:29:33,360 --> 00:29:36,640
this one's always the best it's always

864
00:29:35,039 --> 00:29:38,159
going to be this one is the best for

865
00:29:36,640 --> 00:29:40,320
this situation

866
00:29:38,159 --> 00:29:42,480
and that situation can change client to

867
00:29:40,320 --> 00:29:45,679
client network to network enterprise and

868
00:29:42,480 --> 00:29:47,360
security sector security stack

869
00:29:45,679 --> 00:29:49,440
you really want to then focus in on the

870
00:29:47,360 --> 00:29:51,919
user behavior i like to always say you

871
00:29:49,440 --> 00:29:53,600
know sally from accounting does not know

872
00:29:51,919 --> 00:29:56,000
how to use your tail so if you're trying

873
00:29:53,600 --> 00:29:57,360
to pretend to be sally maybe certain is

874
00:29:56,000 --> 00:30:00,799
probably not the best thing for you to

875
00:29:57,360 --> 00:30:03,279
do maybe it might be a different way um

876
00:30:00,799 --> 00:30:05,200
and i mean sometimes it can be as easy

877
00:30:03,279 --> 00:30:06,640
as if you have you know an rdp based

878
00:30:05,200 --> 00:30:08,159
access

879
00:30:06,640 --> 00:30:09,200
it's next to impossible for any product

880
00:30:08,159 --> 00:30:12,000
to detect

881
00:30:09,200 --> 00:30:14,000
you know a mouse and keyboard clicks

882
00:30:12,000 --> 00:30:16,320
there's no way to design that you know

883
00:30:14,000 --> 00:30:19,120
once again this is sally's clicks and

884
00:30:16,320 --> 00:30:21,760
keyboard actions versus my me as a

885
00:30:19,120 --> 00:30:23,360
malicious attacker so when you're

886
00:30:21,760 --> 00:30:25,520
thinking about it it really comes down

887
00:30:23,360 --> 00:30:27,200
to that story and what you have access

888
00:30:25,520 --> 00:30:29,679
to the more you have the better the

889
00:30:27,200 --> 00:30:29,679
story is

890
00:30:29,840 --> 00:30:34,320
i also wanted to provide some sample

891
00:30:32,559 --> 00:30:37,120
you know commands to get you know the

892
00:30:34,320 --> 00:30:39,679
ideas going so here we have

893
00:30:37,120 --> 00:30:41,120
the first one is just creating assigned

894
00:30:39,679 --> 00:30:43,760
binary

895
00:30:41,120 --> 00:30:45,760
with etw bypassing

896
00:30:43,760 --> 00:30:48,640
that's the first option

897
00:30:45,760 --> 00:30:50,559
second option is a jscript the jscript

898
00:30:48,640 --> 00:30:52,080
ones are usually my favorite they're my

899
00:30:50,559 --> 00:30:53,760
go-to

900
00:30:52,080 --> 00:30:56,000
jscript is really great to kind of get

901
00:30:53,760 --> 00:30:57,760
through those network controls and land

902
00:30:56,000 --> 00:30:59,200
on this environment

903
00:30:57,760 --> 00:31:01,279
so you see right here with the domain

904
00:30:59,200 --> 00:31:03,760
flag and the loader set to control with

905
00:31:01,279 --> 00:31:05,519
dash o

906
00:31:03,760 --> 00:31:08,960
then finally

907
00:31:05,519 --> 00:31:10,640
the last one uh w script now w script is

908
00:31:08,960 --> 00:31:12,480
my go-to loader uh just with that

909
00:31:10,640 --> 00:31:14,720
manifest file it's very powerful and

910
00:31:12,480 --> 00:31:16,559
really hard to detect but it might not

911
00:31:14,720 --> 00:31:18,240
be yours you might depending on once

912
00:31:16,559 --> 00:31:21,120
again in the situation it might be

913
00:31:18,240 --> 00:31:22,480
something better of a different loader

914
00:31:21,120 --> 00:31:24,960
always keep that in mind when you're

915
00:31:22,480 --> 00:31:26,080
looking at these situations

916
00:31:24,960 --> 00:31:29,919
so

917
00:31:26,080 --> 00:31:29,919
here we have a little example

918
00:31:30,720 --> 00:31:34,799
we have our loader.js and it's going to

919
00:31:33,760 --> 00:31:37,279
spawn

920
00:31:34,799 --> 00:31:39,440
and if you can see in the private bytes

921
00:31:37,279 --> 00:31:41,600
you can see that value is going up

922
00:31:39,440 --> 00:31:43,600
because our dll is being sideloaded into

923
00:31:41,600 --> 00:31:46,640
the process and once it's finished it

924
00:31:43,600 --> 00:31:49,120
will start executing it will unhook

925
00:31:46,640 --> 00:31:51,440
all those dlls then decode the shell

926
00:31:49,120 --> 00:31:52,880
code using custom system calls once that

927
00:31:51,440 --> 00:31:54,240
happens it will use a different way to

928
00:31:52,880 --> 00:31:55,600
execute

929
00:31:54,240 --> 00:31:57,200
giving us

930
00:31:55,600 --> 00:31:59,440
a remote shell

931
00:31:57,200 --> 00:32:02,640
here we can then enter commands

932
00:31:59,440 --> 00:32:02,640
without being detected

933
00:32:04,480 --> 00:32:08,640
so now let's talk indicators of

934
00:32:06,000 --> 00:32:08,640
compromise

935
00:32:08,880 --> 00:32:14,480
what are they simply put they are

936
00:32:12,080 --> 00:32:16,799
pieces of or artifacts that can help

937
00:32:14,480 --> 00:32:17,840
identify malicious activity

938
00:32:16,799 --> 00:32:22,080
this can be

939
00:32:17,840 --> 00:32:24,720
you know related to attacks postx um

940
00:32:22,080 --> 00:32:26,960
techniques you know data breaches or

941
00:32:24,720 --> 00:32:29,279
even infectious malware that we drop on

942
00:32:26,960 --> 00:32:31,679
environments uh

943
00:32:29,279 --> 00:32:33,919
as our attacks become more advanced in

944
00:32:31,679 --> 00:32:35,919
this age iocs are becoming more and more

945
00:32:33,919 --> 00:32:38,480
relied on to look for this is that

946
00:32:35,919 --> 00:32:40,399
transition away from relying solely on

947
00:32:38,480 --> 00:32:42,000
an anti-malware controller or an evil

948
00:32:40,399 --> 00:32:43,679
product to solely be your sole point but

949
00:32:42,000 --> 00:32:46,159
that layered approach

950
00:32:43,679 --> 00:32:48,559
where you have a sim or a sock analyzing

951
00:32:46,159 --> 00:32:49,679
all this stuff

952
00:32:48,559 --> 00:32:51,679
to ensure

953
00:32:49,679 --> 00:32:53,519
that the behavior or anything that's

954
00:32:51,679 --> 00:32:55,840
dropped or anything that happens is then

955
00:32:53,519 --> 00:32:58,399
correlated to behavioral or known attack

956
00:32:55,840 --> 00:32:58,399
techniques

957
00:32:58,559 --> 00:33:02,240
and

958
00:32:59,440 --> 00:33:04,640
we should care about this because this

959
00:33:02,240 --> 00:33:06,640
is how the game is changing

960
00:33:04,640 --> 00:33:08,559
as we look at it the defenders are

961
00:33:06,640 --> 00:33:10,159
learning from us they're they're in our

962
00:33:08,559 --> 00:33:12,159
they're coming to our talks they're com

963
00:33:10,159 --> 00:33:14,000
they're reading our research they're

964
00:33:12,159 --> 00:33:15,519
they they're following whenever we come

965
00:33:14,000 --> 00:33:18,399
up with new techniques and then trying

966
00:33:15,519 --> 00:33:20,240
to figure a signature to detect it

967
00:33:18,399 --> 00:33:23,519
and as we modify

968
00:33:20,240 --> 00:33:25,760
this so do the iocs so if we are

969
00:33:23,519 --> 00:33:28,000
constantly evolving our tradecraft

970
00:33:25,760 --> 00:33:29,919
we are circumventing those predefined

971
00:33:28,000 --> 00:33:32,399
iocs that they're looking for and once

972
00:33:29,919 --> 00:33:34,720
again that can mouse game is occurring

973
00:33:32,399 --> 00:33:37,200
and simply put if we can do that further

974
00:33:34,720 --> 00:33:38,640
by extending by modifying how our c2

975
00:33:37,200 --> 00:33:40,640
interacts

976
00:33:38,640 --> 00:33:42,720
that's a great step ahead and keeping

977
00:33:40,640 --> 00:33:43,919
them always keeping us always one step

978
00:33:42,720 --> 00:33:44,880
ahead of them

979
00:33:43,919 --> 00:33:46,480
and

980
00:33:44,880 --> 00:33:48,159
simply put thread actors are doing this

981
00:33:46,480 --> 00:33:50,720
with huge success

982
00:33:48,159 --> 00:33:52,559
so i'd like to give an example

983
00:33:50,720 --> 00:33:54,880
using cobalt strike

984
00:33:52,559 --> 00:33:58,000
and a c2 profile that didn't have

985
00:33:54,880 --> 00:34:00,240
beacon.dll stripped out a phishing email

986
00:33:58,000 --> 00:34:01,679
that contained a payload when the user

987
00:34:00,240 --> 00:34:04,000
opened the file and enabled the macro

988
00:34:01,679 --> 00:34:06,960
the shell code executed it's great

989
00:34:04,000 --> 00:34:08,800
the beacon called home but any time the

990
00:34:06,960 --> 00:34:10,879
command was executed

991
00:34:08,800 --> 00:34:12,800
the edr would block the payload by

992
00:34:10,879 --> 00:34:15,520
simply stripping things out such as

993
00:34:12,800 --> 00:34:18,240
beacon and beacon x64 out of the profile

994
00:34:15,520 --> 00:34:19,040
and retrying again the er did not catch

995
00:34:18,240 --> 00:34:21,280
on

996
00:34:19,040 --> 00:34:23,040
to this because it couldn't

997
00:34:21,280 --> 00:34:25,760
it wasn't look it was looking for this

998
00:34:23,040 --> 00:34:28,000
and didn't see beacon.dll in memory

999
00:34:25,760 --> 00:34:31,359
therefore it didn't have enough points

1000
00:34:28,000 --> 00:34:34,480
of data to make this discern decision to

1001
00:34:31,359 --> 00:34:36,159
terminate the process

1002
00:34:34,480 --> 00:34:39,119
that's just one example of what we can

1003
00:34:36,159 --> 00:34:40,240
do for our c2 to manipulate it to avoid

1004
00:34:39,119 --> 00:34:42,240
detection

1005
00:34:40,240 --> 00:34:43,200
another one once again looking at those

1006
00:34:42,240 --> 00:34:45,599
human

1007
00:34:43,200 --> 00:34:47,200
that human aspect

1008
00:34:45,599 --> 00:34:49,440
user agent strings now this only comes

1009
00:34:47,200 --> 00:34:50,960
into play you know if you're using dns

1010
00:34:49,440 --> 00:34:53,599
based beacons you don't really need to

1011
00:34:50,960 --> 00:34:55,679
worry about a user agent um

1012
00:34:53,599 --> 00:34:57,839
also while we're on the subject

1013
00:34:55,679 --> 00:34:59,280
really good to avoid using tcp over the

1014
00:34:57,839 --> 00:35:01,440
internet

1015
00:34:59,280 --> 00:35:04,160
it's very odd it sticks out if you're

1016
00:35:01,440 --> 00:35:06,240
going across the internet https is the

1017
00:35:04,160 --> 00:35:08,320
best

1018
00:35:06,240 --> 00:35:09,920
but oftentimes the usual agent string

1019
00:35:08,320 --> 00:35:11,760
can be a dead giveaway if it's something

1020
00:35:09,920 --> 00:35:12,880
that's odd or weird or doesn't look

1021
00:35:11,760 --> 00:35:14,960
normal

1022
00:35:12,880 --> 00:35:15,839
sometimes that's an indication that

1023
00:35:14,960 --> 00:35:17,280
there needs to be something to

1024
00:35:15,839 --> 00:35:20,000
investigate

1025
00:35:17,280 --> 00:35:22,800
more mature companies can go as specific

1026
00:35:20,000 --> 00:35:24,000
as looking at well we're a firefox shop

1027
00:35:22,800 --> 00:35:26,240
and then one day they start seeing

1028
00:35:24,000 --> 00:35:28,480
internet explorer user agent strings

1029
00:35:26,240 --> 00:35:30,560
that stands out from the crowd

1030
00:35:28,480 --> 00:35:33,680
and that's can be the point of an ioc

1031
00:35:30,560 --> 00:35:36,000
that they can start investigating on

1032
00:35:33,680 --> 00:35:38,000
so with all of this in your mind let's

1033
00:35:36,000 --> 00:35:41,280
introduce a new tool i'll be releasing

1034
00:35:38,000 --> 00:35:43,520
today called source point

1035
00:35:41,280 --> 00:35:45,920
source point is a tool that actually

1036
00:35:43,520 --> 00:35:47,920
generates malleable c2 profiles for

1037
00:35:45,920 --> 00:35:49,280
cobalt strike

1038
00:35:47,920 --> 00:35:51,599
talking using all these features we kind

1039
00:35:49,280 --> 00:35:53,200
of talked about and more

1040
00:35:51,599 --> 00:35:54,880
it really ensures that each time you

1041
00:35:53,200 --> 00:35:56,400
generate a profile regardless if you put

1042
00:35:54,880 --> 00:35:58,320
the same values in

1043
00:35:56,400 --> 00:36:00,560
the actual profile itself will be unique

1044
00:35:58,320 --> 00:36:02,480
so you can generate multiple profiles

1045
00:36:00,560 --> 00:36:03,920
using the same values and they'll be

1046
00:36:02,480 --> 00:36:06,320
unique from each other

1047
00:36:03,920 --> 00:36:09,040
there's over 15 different customization

1048
00:36:06,320 --> 00:36:11,200
options in this tool alone for you to

1049
00:36:09,040 --> 00:36:12,640
select but if you choose to use leave

1050
00:36:11,200 --> 00:36:14,240
them blank they'll be randomly selected

1051
00:36:12,640 --> 00:36:16,079
for you so you're always ensuring you

1052
00:36:14,240 --> 00:36:18,960
know a high level of entropy

1053
00:36:16,079 --> 00:36:21,040
it does you know 15 options can seem

1054
00:36:18,960 --> 00:36:23,839
daunting so there is yaml support so

1055
00:36:21,040 --> 00:36:25,440
it's really good to use a yaml file so

1056
00:36:23,839 --> 00:36:26,880
you can always have kind of like your

1057
00:36:25,440 --> 00:36:29,680
go-to sampling that you can start

1058
00:36:26,880 --> 00:36:31,760
modifying it is written in go

1059
00:36:29,680 --> 00:36:33,440
but it's simply using a template based

1060
00:36:31,760 --> 00:36:34,720
language to

1061
00:36:33,440 --> 00:36:36,240
generate these

1062
00:36:34,720 --> 00:36:38,720
profiles

1063
00:36:36,240 --> 00:36:40,000
so some of the features it has

1064
00:36:38,720 --> 00:36:42,160
as i mentioned before about that user

1065
00:36:40,000 --> 00:36:44,640
agent strength there's over 60 ranging

1066
00:36:42,160 --> 00:36:47,520
from windows 10 windows 10 chrome

1067
00:36:44,640 --> 00:36:48,640
windows 10 ie firefox

1068
00:36:47,520 --> 00:36:49,760
server

1069
00:36:48,640 --> 00:36:51,280
mac

1070
00:36:49,760 --> 00:36:53,599
linux you get you kind of get the

1071
00:36:51,280 --> 00:36:55,359
picture so there's a lot of them also

1072
00:36:53,599 --> 00:36:58,079
different options for a pe header

1073
00:36:55,359 --> 00:36:59,440
there's over 21 currently built into it

1074
00:36:58,079 --> 00:37:00,640
there are seven different types of

1075
00:36:59,440 --> 00:37:04,240
profiles

1076
00:37:00,640 --> 00:37:04,240
for your traffic to be shaped to

1077
00:37:04,400 --> 00:37:09,280
in right now it does strip out 95

1078
00:37:07,280 --> 00:37:11,440
strings that you know edrs use to look

1079
00:37:09,280 --> 00:37:12,800
and detect shell code especially around

1080
00:37:11,440 --> 00:37:15,119
your cobalt strike you can kind of see

1081
00:37:12,800 --> 00:37:16,400
right here a large list of them now

1082
00:37:15,119 --> 00:37:19,119
usually the question i get is well

1083
00:37:16,400 --> 00:37:21,839
there's options to obfuscate and encrypt

1084
00:37:19,119 --> 00:37:23,119
so why would i bother with this

1085
00:37:21,839 --> 00:37:25,119
oftentimes

1086
00:37:23,119 --> 00:37:27,119
all that stuff gets down to the point

1087
00:37:25,119 --> 00:37:28,800
that it's a great way to avoid detection

1088
00:37:27,119 --> 00:37:30,960
but at some point it needs to be read

1089
00:37:28,800 --> 00:37:33,280
and interpreted by the

1090
00:37:30,960 --> 00:37:35,680
the system so it has to be in an

1091
00:37:33,280 --> 00:37:38,000
unencrypted state for it to be processed

1092
00:37:35,680 --> 00:37:39,920
on the stack properly and that's when

1093
00:37:38,000 --> 00:37:42,320
those detection all over alerts can be

1094
00:37:39,920 --> 00:37:44,480
triggered so that's why going through

1095
00:37:42,320 --> 00:37:46,480
this i've looked through and found the

1096
00:37:44,480 --> 00:37:47,920
common indicators of compromise looking

1097
00:37:46,480 --> 00:37:51,680
for commonalities and things that they

1098
00:37:47,920 --> 00:37:53,200
would look for and just removing them

1099
00:37:51,680 --> 00:37:55,440
as i mentioned before there is a lot of

1100
00:37:53,200 --> 00:37:57,520
randomization so the values for

1101
00:37:55,440 --> 00:38:00,000
allocations on different features are

1102
00:37:57,520 --> 00:38:03,200
always changing

1103
00:38:00,000 --> 00:38:04,800
obviously there's you know sleep jitter

1104
00:38:03,200 --> 00:38:06,880
your kind of standard things but more

1105
00:38:04,800 --> 00:38:09,520
interesting thing is the manipulation of

1106
00:38:06,880 --> 00:38:13,280
injection based strings for post decks

1107
00:38:09,520 --> 00:38:13,280
there's even 18 options

1108
00:38:13,359 --> 00:38:18,000
i like to also call we can kind of see

1109
00:38:15,040 --> 00:38:19,680
here this is a great document or image

1110
00:38:18,000 --> 00:38:22,560
if you haven't had a chance please look

1111
00:38:19,680 --> 00:38:25,359
go ahead look at this it is basically a

1112
00:38:22,560 --> 00:38:27,440
parent relation process map of normal

1113
00:38:25,359 --> 00:38:29,760
windows processes and their parent and

1114
00:38:27,440 --> 00:38:31,920
child processes so with this when we're

1115
00:38:29,760 --> 00:38:33,520
talking about you know post decks or any

1116
00:38:31,920 --> 00:38:36,000
type of spawn to processes especially

1117
00:38:33,520 --> 00:38:38,720
like execute assembly we can actually

1118
00:38:36,000 --> 00:38:42,079
map a process with

1119
00:38:38,720 --> 00:38:44,640
a pro a more realistic child process for

1120
00:38:42,079 --> 00:38:46,320
spawning it makes sense and it's harder

1121
00:38:44,640 --> 00:38:47,359
to detect and it doesn't stand out as

1122
00:38:46,320 --> 00:38:50,079
much

1123
00:38:47,359 --> 00:38:52,240
uh this right this tool source point has

1124
00:38:50,079 --> 00:38:53,920
cdn support for anything that you need

1125
00:38:52,240 --> 00:38:55,920
for cdn depending on how you're setting

1126
00:38:53,920 --> 00:38:57,760
up your your c2

1127
00:38:55,920 --> 00:39:00,880
as well as our location

1128
00:38:57,760 --> 00:39:02,720
manipulation values also supports ssl

1129
00:39:00,880 --> 00:39:04,640
certificates

1130
00:39:02,720 --> 00:39:06,800
so why use it

1131
00:39:04,640 --> 00:39:08,640
it's been development for several years

1132
00:39:06,800 --> 00:39:11,920
it's been deployed on hundreds of red

1133
00:39:08,640 --> 00:39:12,960
team ops prior to today's public release

1134
00:39:11,920 --> 00:39:15,119
the most important thing i would

1135
00:39:12,960 --> 00:39:18,079
probably say is unique profiles if

1136
00:39:15,119 --> 00:39:19,359
you're taking something that is static

1137
00:39:18,079 --> 00:39:21,119
or using something that's the same

1138
00:39:19,359 --> 00:39:22,720
profile over and over again for multiple

1139
00:39:21,119 --> 00:39:24,320
engagements

1140
00:39:22,720 --> 00:39:25,839
eventually you're going to get caught

1141
00:39:24,320 --> 00:39:27,680
burnt

1142
00:39:25,839 --> 00:39:29,280
especially if it you're basing it off

1143
00:39:27,680 --> 00:39:31,280
with something that's public and you're

1144
00:39:29,280 --> 00:39:33,359
not really modifying it extensively

1145
00:39:31,280 --> 00:39:35,280
chances are other people are downloading

1146
00:39:33,359 --> 00:39:37,119
it and doing the same thing so having

1147
00:39:35,280 --> 00:39:39,839
completely unique profiles really does

1148
00:39:37,119 --> 00:39:42,640
aid and once again keeping

1149
00:39:39,839 --> 00:39:45,599
one step ahead of blue teams another

1150
00:39:42,640 --> 00:39:48,320
reason is it automates the process

1151
00:39:45,599 --> 00:39:50,560
and reduces the basically overhead of

1152
00:39:48,320 --> 00:39:52,880
building and stripping out these iocs

1153
00:39:50,560 --> 00:39:55,040
from your c2

1154
00:39:52,880 --> 00:39:57,359
my personal favorite is human error you

1155
00:39:55,040 --> 00:39:58,800
know people make mistakes i'm i often

1156
00:39:57,359 --> 00:40:01,440
make them that's why i developed this

1157
00:39:58,800 --> 00:40:03,839
it's that way i can do it once and have

1158
00:40:01,440 --> 00:40:05,520
it automate it

1159
00:40:03,839 --> 00:40:07,359
so i couldn't

1160
00:40:05,520 --> 00:40:09,119
show an example template because it

1161
00:40:07,359 --> 00:40:10,160
would just run off the screen we can be

1162
00:40:09,119 --> 00:40:11,359
here for hours going through all the

1163
00:40:10,160 --> 00:40:13,119
different features

1164
00:40:11,359 --> 00:40:15,520
uh but to kind of show you what the

1165
00:40:13,119 --> 00:40:17,200
results are from c2 in it

1166
00:40:15,520 --> 00:40:18,720
you can kind of see right here how it

1167
00:40:17,200 --> 00:40:20,319
looks all the different features what

1168
00:40:18,720 --> 00:40:21,839
it's done the transformations everything

1169
00:40:20,319 --> 00:40:25,800
like that the values and how it just

1170
00:40:21,839 --> 00:40:25,800
really blends in

1171
00:40:26,880 --> 00:40:31,359
so my final thoughts

1172
00:40:29,200 --> 00:40:32,960
before we wrap up

1173
00:40:31,359 --> 00:40:34,640
we really need to

1174
00:40:32,960 --> 00:40:36,560
as red teamers

1175
00:40:34,640 --> 00:40:38,480
understand blue teams and their

1176
00:40:36,560 --> 00:40:40,400
procedures better from that we can

1177
00:40:38,480 --> 00:40:42,160
understand how they're detecting us

1178
00:40:40,400 --> 00:40:43,599
and what we can do to go around those

1179
00:40:42,160 --> 00:40:45,920
detections

1180
00:40:43,599 --> 00:40:47,200
uh simply blue teamers are attending our

1181
00:40:45,920 --> 00:40:48,400
talks they're reading our research every

1182
00:40:47,200 --> 00:40:50,319
time we publish something they're

1183
00:40:48,400 --> 00:40:52,400
reading it they're learning it so that

1184
00:40:50,319 --> 00:40:54,560
way they can you know fine-tune their

1185
00:40:52,400 --> 00:40:56,640
tradecraft to be better at detecting it

1186
00:40:54,560 --> 00:40:58,560
so we really need to do that and that's

1187
00:40:56,640 --> 00:41:03,119
how this cat and mouse game is going to

1188
00:40:58,560 --> 00:41:05,040
work and continuously keep uh continue

1189
00:41:03,119 --> 00:41:06,560
lastly at the end of the day for us to

1190
00:41:05,040 --> 00:41:09,119
be better red teamers we need to start

1191
00:41:06,560 --> 00:41:09,119
learning blue

1192
00:41:11,520 --> 00:41:16,480
so any questions um you can find the

1193
00:41:13,920 --> 00:41:17,680
scarecrow framework for bypassing edrs

1194
00:41:16,480 --> 00:41:19,119
and all that stuff for developing

1195
00:41:17,680 --> 00:41:22,160
implants

1196
00:41:19,119 --> 00:41:23,520
here uh source point can be found on my

1197
00:41:22,160 --> 00:41:25,760
github

1198
00:41:23,520 --> 00:41:26,960
along with the slides

1199
00:41:25,760 --> 00:41:28,960
if you have any questions or ever want

1200
00:41:26,960 --> 00:41:30,720
to talk about the stuff you know i this

1201
00:41:28,960 --> 00:41:33,200
this is my passion my bread and butter i

1202
00:41:30,720 --> 00:41:34,800
really spend a lot of free time doing

1203
00:41:33,200 --> 00:41:36,319
this and learning and kind of advancing

1204
00:41:34,800 --> 00:41:37,520
my own tradecraft so if you ever have a

1205
00:41:36,319 --> 00:41:40,560
question i want to talk feel free to

1206
00:41:37,520 --> 00:41:42,240
reach out to me my twitter github

1207
00:41:40,560 --> 00:41:45,119
before i wrap up today i just want to

1208
00:41:42,240 --> 00:41:48,599
say thank you for attending my talk

1209
00:41:45,119 --> 00:41:48,599
have a great day

