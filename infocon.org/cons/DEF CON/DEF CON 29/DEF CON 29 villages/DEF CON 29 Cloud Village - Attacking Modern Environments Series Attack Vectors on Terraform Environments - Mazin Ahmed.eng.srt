1
00:00:00,560 --> 00:00:01,920
hi everyone

2
00:00:01,920 --> 00:00:04,240
thank you very much for tuning in today

3
00:00:04,240 --> 00:00:06,000
today's talk is about attacking

4
00:00:06,000 --> 00:00:07,839
terraform environments by the end of

5
00:00:07,839 --> 00:00:10,480
this talk you learned ways to attack and

6
00:00:10,480 --> 00:00:13,120
secure your terraform environments

7
00:00:13,120 --> 00:00:15,599
this talk would cover a lot of things

8
00:00:15,599 --> 00:00:18,800
that probably not known before

9
00:00:18,800 --> 00:00:20,880
one thing to say before we start their

10
00:00:20,880 --> 00:00:23,279
phone by default is not as secure as you

11
00:00:23,279 --> 00:00:25,279
would think you have to put a lot of

12
00:00:25,279 --> 00:00:28,880
work to secure it and what i'm aiming

13
00:00:28,880 --> 00:00:30,640
for is by this

14
00:00:30,640 --> 00:00:32,159
by the end of this talk is to learn

15
00:00:32,159 --> 00:00:36,079
about all the things that you can know

16
00:00:36,079 --> 00:00:37,680
so that you can secure your terraform

17
00:00:37,680 --> 00:00:41,600
environments and let's start

18
00:00:43,200 --> 00:00:45,200
a little bit about me my name is mazin

19
00:00:45,200 --> 00:00:47,360
ahmed i'm an application security and

20
00:00:47,360 --> 00:00:49,840
offensive security engineer i founded

21
00:00:49,840 --> 00:00:51,760
fullhand it's a security startup that

22
00:00:51,760 --> 00:00:54,079
solves the attack surface visibility

23
00:00:54,079 --> 00:00:56,840
problem for companies and

24
00:00:56,840 --> 00:00:59,359
organizations and also i'm an occasional

25
00:00:59,359 --> 00:01:01,600
bug bounty hunter i have

26
00:01:01,600 --> 00:01:05,040
been acknowledged by facebook twitter

27
00:01:05,040 --> 00:01:07,280
linkedin zoom oracle and many other

28
00:01:07,280 --> 00:01:08,640
companies

29
00:01:08,640 --> 00:01:12,000
and of course i'm in love with cloud

30
00:01:12,000 --> 00:01:14,320
security anything related to cloud

31
00:01:14,320 --> 00:01:16,640
security and of course uh

32
00:01:16,640 --> 00:01:19,040
different things related to security

33
00:01:19,040 --> 00:01:22,080
are my passion and that's why i put the

34
00:01:22,080 --> 00:01:24,840
effort into having this research

35
00:01:24,840 --> 00:01:28,000
made the agenda for today

36
00:01:28,000 --> 00:01:31,280
is first we we're gonna go over things

37
00:01:31,280 --> 00:01:34,079
uh a background on terraform

38
00:01:34,079 --> 00:01:36,960
what styrofoam how does it work

39
00:01:36,960 --> 00:01:39,360
and why do we need to learn about all of

40
00:01:39,360 --> 00:01:42,479
this why is it important

41
00:01:42,479 --> 00:01:44,880
attack victors and scenarios attack

42
00:01:44,880 --> 00:01:46,560
victors and scenarios

43
00:01:46,560 --> 00:01:49,119
and of course the most important part is

44
00:01:49,119 --> 00:01:53,200
the demo which would be really cool

45
00:01:53,200 --> 00:01:55,600
the recommendations at the end

46
00:01:55,600 --> 00:02:00,000
and then would have room for questions

47
00:02:00,640 --> 00:02:02,320
so first of all

48
00:02:02,320 --> 00:02:04,960
what's infrastructure as code

49
00:02:04,960 --> 00:02:06,399
back in the years

50
00:02:06,399 --> 00:02:07,600
when

51
00:02:07,600 --> 00:02:11,520
cloud was starting was becoming a thing

52
00:02:11,520 --> 00:02:12,959
if someone would like to deploy

53
00:02:12,959 --> 00:02:14,879
something they would go to the console

54
00:02:14,879 --> 00:02:17,760
take their time in deploying their

55
00:02:17,760 --> 00:02:19,760
resources

56
00:02:19,760 --> 00:02:21,599
from the console

57
00:02:21,599 --> 00:02:23,920
and if they would like to do this again

58
00:02:23,920 --> 00:02:26,000
and again and maintain that they would

59
00:02:26,000 --> 00:02:27,680
have to log in every single time to do

60
00:02:27,680 --> 00:02:30,720
that which is a bit of a painful thing

61
00:02:30,720 --> 00:02:33,840
and does not really scale that's why

62
00:02:33,840 --> 00:02:36,560
infrastructure as code became a popular

63
00:02:36,560 --> 00:02:39,200
thing in the devops and difficult

64
00:02:39,200 --> 00:02:40,720
communities

65
00:02:40,720 --> 00:02:43,920
why because you would be able to write

66
00:02:43,920 --> 00:02:46,959
all of your resources and the cloud as

67
00:02:46,959 --> 00:02:48,840
code and then you would be able to

68
00:02:48,840 --> 00:02:49,920
deploy it

69
00:02:49,920 --> 00:02:52,720
many times at the same time you would

70
00:02:52,720 --> 00:02:55,840
allow room for peers with you so that

71
00:02:55,840 --> 00:02:57,599
the people in your team and different

72
00:02:57,599 --> 00:02:59,920
teams will be able to review it

73
00:02:59,920 --> 00:03:01,760
it's amazing

74
00:03:01,760 --> 00:03:04,319
so yep it allows that parts and of

75
00:03:04,319 --> 00:03:06,959
course one thing that you can say that

76
00:03:06,959 --> 00:03:08,720
once you have this being set up you

77
00:03:08,720 --> 00:03:11,200
would be able to run it through

78
00:03:11,200 --> 00:03:14,879
ci security scanning for compliance and

79
00:03:14,879 --> 00:03:17,680
you can automate many things without

80
00:03:17,680 --> 00:03:20,319
really having to have someone to review

81
00:03:20,319 --> 00:03:21,360
everything

82
00:03:21,360 --> 00:03:24,959
um uh being deployed

83
00:03:24,959 --> 00:03:27,440
and of course when you deploy this and

84
00:03:27,440 --> 00:03:30,080
using get you would be able to have an

85
00:03:30,080 --> 00:03:32,720
archive of everything being deployed

86
00:03:32,720 --> 00:03:34,720
it's just an amazing technology that

87
00:03:34,720 --> 00:03:36,799
everyone loves

88
00:03:36,799 --> 00:03:38,560
hopefully

89
00:03:38,560 --> 00:03:39,519
and

90
00:03:39,519 --> 00:03:41,120
what's their phone

91
00:03:41,120 --> 00:03:42,560
jira form is an open source

92
00:03:42,560 --> 00:03:45,280
infrastructure as code software made by

93
00:03:45,280 --> 00:03:46,400
hashicorp

94
00:03:46,400 --> 00:03:48,400
around 10 years ago

95
00:03:48,400 --> 00:03:49,920
and uh

96
00:03:49,920 --> 00:03:51,840
users define their code in a language

97
00:03:51,840 --> 00:03:55,439
called the scl or hashicorp language

98
00:03:55,439 --> 00:03:57,439
and then deployments and

99
00:03:57,439 --> 00:03:59,840
and the entire infrastructure management

100
00:03:59,840 --> 00:04:02,000
happens through terraform whenever you

101
00:04:02,000 --> 00:04:04,799
write code you would pass it to a

102
00:04:04,799 --> 00:04:06,879
telephone build a binary and then it

103
00:04:06,879 --> 00:04:07,840
will

104
00:04:07,840 --> 00:04:11,200
read the terraform state a state of the

105
00:04:11,200 --> 00:04:13,200
current infrastructure and then it would

106
00:04:13,200 --> 00:04:15,920
decide what changes should be done

107
00:04:15,920 --> 00:04:17,839
why i'm talking about true form today

108
00:04:17,839 --> 00:04:20,720
instead of all of apollo me or different

109
00:04:20,720 --> 00:04:23,840
uh or cloud formation of different um

110
00:04:23,840 --> 00:04:26,720
cloud orchestrator because therefore is

111
00:04:26,720 --> 00:04:29,120
the most popular iec orchestrated in the

112
00:04:29,120 --> 00:04:31,520
planet

113
00:04:32,080 --> 00:04:34,560
this year a couple of months back they

114
00:04:34,560 --> 00:04:38,560
have released terraform 1.0

115
00:04:38,560 --> 00:04:41,280
the it has been a big thing for everyone

116
00:04:41,280 --> 00:04:45,280
that is working on with terraform

117
00:04:45,280 --> 00:04:46,720
and of course

118
00:04:46,720 --> 00:04:48,000
it passes

119
00:04:48,000 --> 00:04:50,320
100 million downloads

120
00:04:50,320 --> 00:04:53,120
crazy numbers

121
00:04:53,759 --> 00:04:55,040
another thing that is cool about

122
00:04:55,040 --> 00:04:57,600
terraform once you have it is

123
00:04:57,600 --> 00:05:00,160
you can write the same infrastructure

124
00:05:00,160 --> 00:05:01,199
code

125
00:05:01,199 --> 00:05:02,240
and

126
00:05:02,240 --> 00:05:03,520
have it integrated with different

127
00:05:03,520 --> 00:05:06,720
providers so you can write code that

128
00:05:06,720 --> 00:05:09,680
allows you to deploy to aws or azure or

129
00:05:09,680 --> 00:05:12,320
gcp or anything else

130
00:05:12,320 --> 00:05:13,440
and

131
00:05:13,440 --> 00:05:15,600
it's not only these

132
00:05:15,600 --> 00:05:17,520
six technologies and six providers that

133
00:05:17,520 --> 00:05:18,720
are there

134
00:05:18,720 --> 00:05:21,039
they support more than a thousand

135
00:05:21,039 --> 00:05:23,600
provider as of today

136
00:05:23,600 --> 00:05:24,639
how

137
00:05:24,639 --> 00:05:26,880
how you would be able to do this is as a

138
00:05:26,880 --> 00:05:29,280
practitioner or a user you would write

139
00:05:29,280 --> 00:05:31,759
your code then once it's ready it will

140
00:05:31,759 --> 00:05:34,240
go through terraform plan and telephone

141
00:05:34,240 --> 00:05:36,960
plan is like the way that telephone

142
00:05:36,960 --> 00:05:40,320
would be planning your deployment

143
00:05:40,320 --> 00:05:42,720
and show you

144
00:05:42,720 --> 00:05:44,240
what would be changing

145
00:05:44,240 --> 00:05:46,479
and then it would go through the apply

146
00:05:46,479 --> 00:05:49,280
and once you click on run apply

147
00:05:49,280 --> 00:05:51,759
it would be deploying

148
00:05:51,759 --> 00:05:55,360
directly to your cloud provider

149
00:05:55,360 --> 00:05:58,080
the thing is

150
00:05:58,560 --> 00:06:01,440
when you are running apply and plan on

151
00:06:01,440 --> 00:06:03,919
apply this means that

152
00:06:03,919 --> 00:06:05,039
you are

153
00:06:05,039 --> 00:06:07,840
checking that that drifts between the

154
00:06:07,840 --> 00:06:10,800
current code and what is there on the

155
00:06:10,800 --> 00:06:13,120
provider and if you are applying uh

156
00:06:13,120 --> 00:06:15,520
changes this means that you have right

157
00:06:15,520 --> 00:06:18,160
access on different things on your cloud

158
00:06:18,160 --> 00:06:20,800
provider and who would have this it

159
00:06:20,800 --> 00:06:22,960
would be terraform

160
00:06:22,960 --> 00:06:27,280
so setting up their phone with grants at

161
00:06:27,280 --> 00:06:29,680
high permissions that allows it to do

162
00:06:29,680 --> 00:06:32,319
everything that you need to have it to

163
00:06:32,319 --> 00:06:33,759
do

164
00:06:33,759 --> 00:06:35,840
while it sounds curry

165
00:06:35,840 --> 00:06:38,240
it's the default thing we have to just

166
00:06:38,240 --> 00:06:41,680
set it up in a way that could be secure

167
00:06:41,680 --> 00:06:43,120
and

168
00:06:43,120 --> 00:06:46,400
not rely on the default things and try

169
00:06:46,400 --> 00:06:47,280
to

170
00:06:47,280 --> 00:06:50,719
think better about it

171
00:06:51,120 --> 00:06:52,240
as i said

172
00:06:52,240 --> 00:06:54,560
with great power comes great

173
00:06:54,560 --> 00:06:56,960
responsibility

174
00:06:56,960 --> 00:07:00,800
a single mistake here can lead to the

175
00:07:00,800 --> 00:07:02,319
entire

176
00:07:02,319 --> 00:07:04,000
compromise of

177
00:07:04,000 --> 00:07:06,800
the cloud provider or the cloud account

178
00:07:06,800 --> 00:07:09,919
so imagine then your entire aws account

179
00:07:09,919 --> 00:07:12,880
being held for ransom someone would uh

180
00:07:12,880 --> 00:07:14,400
like if someone compromised that they

181
00:07:14,400 --> 00:07:15,120
would

182
00:07:15,120 --> 00:07:15,840
go

183
00:07:15,840 --> 00:07:17,840
into your club provider they would be

184
00:07:17,840 --> 00:07:20,479
backing up all of your sv buckets

185
00:07:20,479 --> 00:07:22,160
they would uh

186
00:07:22,160 --> 00:07:24,800
incr or may uh delete everything they

187
00:07:24,800 --> 00:07:27,120
would have it somewhere else

188
00:07:27,120 --> 00:07:29,280
and then they would ask you for ransom

189
00:07:29,280 --> 00:07:31,039
imagine this

190
00:07:31,039 --> 00:07:32,479
ransom isn't the thing that you would

191
00:07:32,479 --> 00:07:34,960
see only on your

192
00:07:34,960 --> 00:07:36,880
uh internal network or

193
00:07:36,880 --> 00:07:38,639
or in your laptops it's something that

194
00:07:38,639 --> 00:07:41,039
can be done also in the cloud it's not

195
00:07:41,039 --> 00:07:43,280
it's still not a thing today but i can

196
00:07:43,280 --> 00:07:45,039
imagine that this would be happening in

197
00:07:45,039 --> 00:07:47,919
the upcoming years

198
00:07:51,680 --> 00:07:54,160
and as i said about the

199
00:07:54,160 --> 00:07:55,759
terraform

200
00:07:55,759 --> 00:07:57,120
states

201
00:07:57,120 --> 00:07:59,440
the way that perform works is it would

202
00:07:59,440 --> 00:08:00,319
be

203
00:08:00,319 --> 00:08:02,400
storing all of the changes and all of

204
00:08:02,400 --> 00:08:04,319
the additions that it made

205
00:08:04,319 --> 00:08:06,639
in your cloud provider

206
00:08:06,639 --> 00:08:09,919
in a file that acts as a database called

207
00:08:09,919 --> 00:08:12,000
telephone state

208
00:08:12,000 --> 00:08:13,840
every time you do a change it would

209
00:08:13,840 --> 00:08:15,840
check it against

210
00:08:15,840 --> 00:08:18,240
that file and then would update it

211
00:08:18,240 --> 00:08:20,879
whenever there is anything

212
00:08:20,879 --> 00:08:22,560
there are many ways to

213
00:08:22,560 --> 00:08:25,280
have your terraform state being deployed

214
00:08:25,280 --> 00:08:28,080
one thing is you can have it locally

215
00:08:28,080 --> 00:08:29,840
second way that is

216
00:08:29,840 --> 00:08:32,799
i think the most common way by

217
00:08:32,799 --> 00:08:34,799
everyone that i know

218
00:08:34,799 --> 00:08:39,039
is using a remote backend of

219
00:08:39,039 --> 00:08:40,399
sv

220
00:08:40,399 --> 00:08:42,559
so that you would specify a bucket you

221
00:08:42,559 --> 00:08:44,880
would specify a key and then which

222
00:08:44,880 --> 00:08:46,480
region would you like to have this

223
00:08:46,480 --> 00:08:49,519
bucket at on and then terraform would be

224
00:08:49,519 --> 00:08:50,880
automatically

225
00:08:50,880 --> 00:08:52,959
creating this bucket for uh would be

226
00:08:52,959 --> 00:08:55,920
automatically uh pushing the the

227
00:08:55,920 --> 00:08:58,800
changes and the state file there and

228
00:08:58,800 --> 00:09:00,959
whenever it updates it would uh

229
00:09:00,959 --> 00:09:04,640
synchronize with that key

230
00:09:07,040 --> 00:09:12,160
so attack number one or thing number one

231
00:09:12,160 --> 00:09:13,040
if

232
00:09:13,040 --> 00:09:16,399
you go if you have uh get uh get object

233
00:09:16,399 --> 00:09:19,040
permission on the s3 bucket for solving

234
00:09:19,040 --> 00:09:20,640
the state file then you would have

235
00:09:20,640 --> 00:09:22,560
access to

236
00:09:22,560 --> 00:09:25,200
secrets access keys and database

237
00:09:25,200 --> 00:09:27,279
credentials so everything that is being

238
00:09:27,279 --> 00:09:28,560
deployed

239
00:09:28,560 --> 00:09:29,360
from

240
00:09:29,360 --> 00:09:30,320
uh

241
00:09:30,320 --> 00:09:32,240
for the organization

242
00:09:32,240 --> 00:09:33,760
through terraform

243
00:09:33,760 --> 00:09:34,640
would

244
00:09:34,640 --> 00:09:36,640
have a copy of it

245
00:09:36,640 --> 00:09:39,279
in the seat in the state file

246
00:09:39,279 --> 00:09:41,600
so there's something like an rds

247
00:09:41,600 --> 00:09:43,920
database would have their credentials

248
00:09:43,920 --> 00:09:46,480
stored somewhere and that place would

249
00:09:46,480 --> 00:09:49,279
have a copy in the state file same thing

250
00:09:49,279 --> 00:09:52,000
if you create the an im key

251
00:09:52,000 --> 00:09:54,480
access key then you would have it there

252
00:09:54,480 --> 00:09:56,800
or any other secrets that you would

253
00:09:56,800 --> 00:09:57,920
define

254
00:09:57,920 --> 00:10:00,800
or the provider would be defining uh for

255
00:10:00,800 --> 00:10:02,640
your phone

256
00:10:02,640 --> 00:10:05,040
so whenever you get access to

257
00:10:05,040 --> 00:10:08,079
uh to an organization and a

258
00:10:08,079 --> 00:10:11,440
cloud account try to search for

259
00:10:11,440 --> 00:10:13,839
if they have a sv bucket

260
00:10:13,839 --> 00:10:14,800
that

261
00:10:14,800 --> 00:10:17,519
looks like it's use uh it's storing

262
00:10:17,519 --> 00:10:20,000
secrets for turf on it would have the

263
00:10:20,000 --> 00:10:21,120
entire

264
00:10:21,120 --> 00:10:23,760
instructions for you to go

265
00:10:23,760 --> 00:10:27,279
further in the environment

266
00:10:30,800 --> 00:10:33,360
another thing is

267
00:10:33,360 --> 00:10:36,240
states on terraform enterprise terraform

268
00:10:36,240 --> 00:10:39,120
enterprise has um terraform has

269
00:10:39,120 --> 00:10:40,880
an enterprise offering called terraform

270
00:10:40,880 --> 00:10:42,160
enterprise

271
00:10:42,160 --> 00:10:44,160
and uh

272
00:10:44,160 --> 00:10:48,560
the normal uh perform that people use is

273
00:10:48,560 --> 00:10:51,600
a cli binary that peop that people would

274
00:10:51,600 --> 00:10:55,200
be using for deploying uh infrastructure

275
00:10:55,200 --> 00:10:56,959
but with three from enterprise you would

276
00:10:56,959 --> 00:10:58,880
have

277
00:10:58,880 --> 00:11:02,480
sso team management states uh

278
00:11:02,480 --> 00:11:04,000
uh

279
00:11:04,000 --> 00:11:05,600
says management in different ways and

280
00:11:05,600 --> 00:11:07,760
configurations and

281
00:11:07,760 --> 00:11:10,560
different ways for your integrations

282
00:11:10,560 --> 00:11:13,279
and terraform to price is amazing but

283
00:11:13,279 --> 00:11:15,519
still the same problem of storing the

284
00:11:15,519 --> 00:11:17,200
sase files

285
00:11:17,200 --> 00:11:21,600
is exist on terraform enterprise

286
00:11:21,680 --> 00:11:24,399
and how it works is

287
00:11:24,399 --> 00:11:26,320
you would

288
00:11:26,320 --> 00:11:28,240
deploy a terraform enterprise as an

289
00:11:28,240 --> 00:11:29,760
instance

290
00:11:29,760 --> 00:11:32,240
it follows itself hosted model

291
00:11:32,240 --> 00:11:35,120
also they provide a cloud hosted

292
00:11:35,120 --> 00:11:37,600
cloud hosted model that they would be

293
00:11:37,600 --> 00:11:39,519
hosting it within

294
00:11:39,519 --> 00:11:41,839
an offering called terraform

295
00:11:41,839 --> 00:11:45,279
and but let's focus on this on the

296
00:11:45,279 --> 00:11:47,120
self-hosted one that you can host in

297
00:11:47,120 --> 00:11:47,920
your

298
00:11:47,920 --> 00:11:49,360
infrastructure

299
00:11:49,360 --> 00:11:52,959
the states can be stored in many ways

300
00:11:52,959 --> 00:11:57,120
postgresql aws rds

301
00:11:57,120 --> 00:12:01,120
three mounted disks same instance desk

302
00:12:01,120 --> 00:12:02,560
and

303
00:12:02,560 --> 00:12:05,119
many more

304
00:12:05,680 --> 00:12:08,639
if you get access to any of these

305
00:12:08,639 --> 00:12:12,560
places these places would have access

306
00:12:12,560 --> 00:12:15,839
to the state file and then you can copy

307
00:12:15,839 --> 00:12:18,320
this state file inspected for secrets

308
00:12:18,320 --> 00:12:20,639
use these secrets for

309
00:12:20,639 --> 00:12:24,360
getting a step ahead

310
00:12:31,600 --> 00:12:34,079
right another thing to say

311
00:12:34,079 --> 00:12:36,320
of course we we talked about therefore

312
00:12:36,320 --> 00:12:38,880
enterprise is deployed as an instance on

313
00:12:38,880 --> 00:12:42,959
the aws account or in the cloud account

314
00:12:42,959 --> 00:12:43,760
and

315
00:12:43,760 --> 00:12:46,240
if you compromised and insta dfe

316
00:12:46,240 --> 00:12:48,079
instance this is the best place for

317
00:12:48,079 --> 00:12:50,560
attack cap resistance and there are many

318
00:12:50,560 --> 00:12:53,680
reasons for that one

319
00:12:53,680 --> 00:12:55,680
once it gets deployed

320
00:12:55,680 --> 00:12:57,040
successfully

321
00:12:57,040 --> 00:13:00,079
no one really touched it

322
00:13:00,079 --> 00:13:02,320
another thing is upgrades and

323
00:13:02,320 --> 00:13:04,720
maintenance really happened like

324
00:13:04,720 --> 00:13:07,360
it's not a common thing that uh and a

325
00:13:07,360 --> 00:13:10,320
devops engineer would go in and log and

326
00:13:10,320 --> 00:13:12,959
assess it to the server to see different

327
00:13:12,959 --> 00:13:14,639
things unless

328
00:13:14,639 --> 00:13:17,519
something is broken then that's for our

329
00:13:17,519 --> 00:13:19,200
there is an actual upgrade that would

330
00:13:19,200 --> 00:13:20,639
happen this is the only time that

331
00:13:20,639 --> 00:13:22,800
someone would go in and uh

332
00:13:22,800 --> 00:13:25,760
and try to uh ssh to

333
00:13:25,760 --> 00:13:27,440
this instance

334
00:13:27,440 --> 00:13:30,000
so this is one thing to add and of

335
00:13:30,000 --> 00:13:32,160
course it's uh

336
00:13:32,160 --> 00:13:34,720
if because terraform enterprise

337
00:13:34,720 --> 00:13:36,720
would have um

338
00:13:36,720 --> 00:13:38,880
permissions to deploy to the cloud to

339
00:13:38,880 --> 00:13:40,079
your cloud

340
00:13:40,079 --> 00:13:41,440
environment

341
00:13:41,440 --> 00:13:44,399
you would have the company would have to

342
00:13:44,399 --> 00:13:46,959
provide it with proper

343
00:13:46,959 --> 00:13:50,160
permissions to deploy to deploy online

344
00:13:50,160 --> 00:13:53,040
so it would have probably admin access

345
00:13:53,040 --> 00:13:55,680
to your aws accounts

346
00:13:55,680 --> 00:13:56,959
or any

347
00:13:56,959 --> 00:14:00,399
account that is being used for

348
00:14:00,399 --> 00:14:03,600
if you get access to this uh

349
00:14:03,600 --> 00:14:05,600
vm or this instance

350
00:14:05,600 --> 00:14:07,440
then you would have high permissions in

351
00:14:07,440 --> 00:14:09,760
doing whatever on the infrastructure you

352
00:14:09,760 --> 00:14:10,880
can create

353
00:14:10,880 --> 00:14:13,920
new users you can back their users you

354
00:14:13,920 --> 00:14:14,800
can

355
00:14:14,800 --> 00:14:16,320
read

356
00:14:16,320 --> 00:14:19,040
buckets which is something that

357
00:14:19,040 --> 00:14:21,040
is not really common but of course you

358
00:14:21,040 --> 00:14:22,720
can do that

359
00:14:22,720 --> 00:14:24,240
and

360
00:14:24,240 --> 00:14:27,040
you can do everything

361
00:14:27,199 --> 00:14:30,000
and one thing that is funny here is

362
00:14:30,000 --> 00:14:31,600
let's say that

363
00:14:31,600 --> 00:14:34,240
you are in engagement and the and the

364
00:14:34,240 --> 00:14:36,800
security team detected that your

365
00:14:36,800 --> 00:14:39,040
the database was compromised because of

366
00:14:39,040 --> 00:14:41,279
the state files and all

367
00:14:41,279 --> 00:14:43,440
they would ideally go and rotate the

368
00:14:43,440 --> 00:14:45,760
database keys and

369
00:14:45,760 --> 00:14:47,920
how would they rotate the keys they

370
00:14:47,920 --> 00:14:49,920
would rotate it through terraform

371
00:14:49,920 --> 00:14:52,399
that's a typical way

372
00:14:52,399 --> 00:14:55,519
or one way actually but if they uh if

373
00:14:55,519 --> 00:14:58,160
they updated it with terraform then you

374
00:14:58,160 --> 00:15:00,320
would still have the latest keys being

375
00:15:00,320 --> 00:15:01,680
synchronized

376
00:15:01,680 --> 00:15:03,360
on the terraform instance which is

377
00:15:03,360 --> 00:15:05,839
really cool

378
00:15:07,040 --> 00:15:10,920
let me pause for water

379
00:15:17,360 --> 00:15:18,880
and as i said

380
00:15:18,880 --> 00:15:20,880
they're from enterprise

381
00:15:20,880 --> 00:15:23,760
it has high permissions and it's not

382
00:15:23,760 --> 00:15:25,600
something that you should really put on

383
00:15:25,600 --> 00:15:26,959
the internet

384
00:15:26,959 --> 00:15:29,600
but there are hundreds of organizations

385
00:15:29,600 --> 00:15:31,759
around the world that have their

386
00:15:31,759 --> 00:15:33,680
terraform enterprise exposed to the

387
00:15:33,680 --> 00:15:35,839
public if there is a single zero day

388
00:15:35,839 --> 00:15:36,800
here

389
00:15:36,800 --> 00:15:38,160
i'm pretty sure this would be a

390
00:15:38,160 --> 00:15:40,399
nightmare for

391
00:15:40,399 --> 00:15:43,360
all these companies

392
00:15:44,639 --> 00:15:46,959
and these are filters that you can use

393
00:15:46,959 --> 00:15:47,759
for

394
00:15:47,759 --> 00:15:51,519
just checking it out by yourself

395
00:15:53,440 --> 00:15:55,839
okay we talked about how you can use

396
00:15:55,839 --> 00:15:58,480
this in your advantage with uh when

397
00:15:58,480 --> 00:16:01,839
compromising and an aws account that has

398
00:16:01,839 --> 00:16:02,639
uh

399
00:16:02,639 --> 00:16:07,120
that or an aws user that has access to

400
00:16:07,120 --> 00:16:09,839
the sv bucket that stores the state

401
00:16:09,839 --> 00:16:11,120
files

402
00:16:11,120 --> 00:16:13,920
but let's say that you were not really

403
00:16:13,920 --> 00:16:16,959
able to compromise the aws account

404
00:16:16,959 --> 00:16:18,720
and you get access to a developer

405
00:16:18,720 --> 00:16:20,720
machine and this developer have access

406
00:16:20,720 --> 00:16:22,639
to there from enterprise or perform

407
00:16:22,639 --> 00:16:24,399
cloud

408
00:16:24,399 --> 00:16:27,519
what things can you do here

409
00:16:27,519 --> 00:16:29,759
therefore

410
00:16:29,759 --> 00:16:30,959
i have

411
00:16:30,959 --> 00:16:33,519
exposed a full dedicated api that can be

412
00:16:33,519 --> 00:16:35,279
used for automating functionalities and

413
00:16:35,279 --> 00:16:37,360
tasks this can go

414
00:16:37,360 --> 00:16:39,839
from any uh everywhere from updating

415
00:16:39,839 --> 00:16:41,519
users to

416
00:16:41,519 --> 00:16:42,720
provision

417
00:16:42,720 --> 00:16:44,800
plans to

418
00:16:44,800 --> 00:16:48,160
add comments and everything

419
00:16:48,560 --> 00:16:51,839
and one thing that they have is an api

420
00:16:51,839 --> 00:16:54,240
called state version output

421
00:16:54,240 --> 00:16:56,560
and this state vision output api allows

422
00:16:56,560 --> 00:16:59,360
you to download the state file that you

423
00:16:59,360 --> 00:17:02,160
you uh that you would have uh

424
00:17:02,160 --> 00:17:05,039
needed to compromise with an actual you

425
00:17:05,039 --> 00:17:08,319
i am user or all of this

426
00:17:08,319 --> 00:17:11,280
so now if if it wasn't really possible

427
00:17:11,280 --> 00:17:12,640
to do this

428
00:17:12,640 --> 00:17:16,640
you can just uh go to the api and ask it

429
00:17:16,640 --> 00:17:20,640
for your for your state file and nicely

430
00:17:20,640 --> 00:17:23,280
and it would respond

431
00:17:23,280 --> 00:17:25,599
with the actual state file in plain text

432
00:17:25,599 --> 00:17:28,079
which is nice

433
00:17:28,079 --> 00:17:30,000
of course this will also contain

434
00:17:30,000 --> 00:17:32,400
sensitive data with clear text

435
00:17:32,400 --> 00:17:34,480
credentials and everything that could be

436
00:17:34,480 --> 00:17:36,720
fun

437
00:17:38,559 --> 00:17:41,919
okay going further

438
00:17:41,919 --> 00:17:43,600
a couple months back

439
00:17:43,600 --> 00:17:46,559
alex k released a blog post talking

440
00:17:46,559 --> 00:17:48,960
about terraform plan rce

441
00:17:48,960 --> 00:17:51,919
it's a it's a problem that reform has it

442
00:17:51,919 --> 00:17:53,600
for over the years

443
00:17:53,600 --> 00:17:57,280
but it wasn't really talked about

444
00:17:57,280 --> 00:18:00,799
within the terraform communities

445
00:18:00,799 --> 00:18:03,200
and we and this uh

446
00:18:03,200 --> 00:18:06,400
this blog post has uh become a

447
00:18:06,400 --> 00:18:07,520
viral

448
00:18:07,520 --> 00:18:10,080
post about how this attack could be done

449
00:18:10,080 --> 00:18:13,360
in uh a practical way

450
00:18:13,360 --> 00:18:15,919
and they were talking about

451
00:18:15,919 --> 00:18:18,000
how you can use

452
00:18:18,000 --> 00:18:21,280
an ammunitious provider or an external

453
00:18:21,280 --> 00:18:22,559
data source

454
00:18:22,559 --> 00:18:25,600
uh that could allows you to

455
00:18:25,600 --> 00:18:26,400
get

456
00:18:26,400 --> 00:18:28,400
code execution on

457
00:18:28,400 --> 00:18:30,880
the terraform enterprise or the

458
00:18:30,880 --> 00:18:31,760
the

459
00:18:31,760 --> 00:18:33,440
or the instance that is running

460
00:18:33,440 --> 00:18:34,960
terraform

461
00:18:34,960 --> 00:18:36,080
and

462
00:18:36,080 --> 00:18:38,400
this can result in

463
00:18:38,400 --> 00:18:40,559
uh the compromise of the entire

464
00:18:40,559 --> 00:18:43,520
infrastructure when someone submits a pr

465
00:18:43,520 --> 00:18:45,200
that is not approved

466
00:18:45,200 --> 00:18:47,440
what you're going to do is

467
00:18:47,440 --> 00:18:49,520
if you find let's say you said

468
00:18:49,520 --> 00:18:52,160
you landed on a developer machine and

469
00:18:52,160 --> 00:18:54,160
this developer machine has

470
00:18:54,160 --> 00:18:56,960
i don't know github token that allows it

471
00:18:56,960 --> 00:19:01,280
to so to push pr on the account

472
00:19:01,280 --> 00:19:03,600
that is being in the

473
00:19:03,600 --> 00:19:05,679
in the repository that hosts the

474
00:19:05,679 --> 00:19:07,520
terraform code and this one is

475
00:19:07,520 --> 00:19:09,360
integrated with terraform enterprise

476
00:19:09,360 --> 00:19:11,679
like the notebook and like the normal

477
00:19:11,679 --> 00:19:12,799
setup

478
00:19:12,799 --> 00:19:14,960
what would happen here is

479
00:19:14,960 --> 00:19:17,840
if the default if you as a developer

480
00:19:17,840 --> 00:19:18,960
check out

481
00:19:18,960 --> 00:19:21,679
the a feature branch and then push code

482
00:19:21,679 --> 00:19:22,640
and

483
00:19:22,640 --> 00:19:23,440
with

484
00:19:23,440 --> 00:19:25,360
the malicious payload

485
00:19:25,360 --> 00:19:28,640
and all the attack that uh about that

486
00:19:28,640 --> 00:19:31,280
talks about the malicious provider that

487
00:19:31,280 --> 00:19:33,840
you're going to talk about then you will

488
00:19:33,840 --> 00:19:34,720
get

489
00:19:34,720 --> 00:19:37,120
code execution on that server you would

490
00:19:37,120 --> 00:19:38,960
get sell access

491
00:19:38,960 --> 00:19:41,600
and this is really simple and of course

492
00:19:41,600 --> 00:19:43,679
it's not really intended and this should

493
00:19:43,679 --> 00:19:46,480
never happen in real life

494
00:19:46,480 --> 00:19:48,799
but it has been

495
00:19:48,799 --> 00:19:51,200
a fight between usability and security

496
00:19:51,200 --> 00:19:53,919
here it's hard to find a way to secure

497
00:19:53,919 --> 00:19:56,160
it at the same time it's hard to not

498
00:19:56,160 --> 00:19:57,919
allow

499
00:19:57,919 --> 00:19:59,840
something like external data sources to

500
00:19:59,840 --> 00:20:01,440
be used

501
00:20:01,440 --> 00:20:05,280
uh chris for alex k for having this

502
00:20:05,280 --> 00:20:09,440
blog post written and shared to us

503
00:20:09,440 --> 00:20:12,320
and this is an example of an actual uh

504
00:20:12,320 --> 00:20:14,799
proof of concept

505
00:20:14,799 --> 00:20:16,960
you if you'd like to test it out and you

506
00:20:16,960 --> 00:20:18,720
are authorized to test it

507
00:20:18,720 --> 00:20:19,679
go in

508
00:20:19,679 --> 00:20:21,679
copy the code that i have here on my

509
00:20:21,679 --> 00:20:22,720
screen

510
00:20:22,720 --> 00:20:25,440
of course if the slides would be uh with

511
00:20:25,440 --> 00:20:27,840
would be public on my website and my

512
00:20:27,840 --> 00:20:29,360
blog

513
00:20:29,360 --> 00:20:32,720
and just use this code and then push it

514
00:20:32,720 --> 00:20:34,400
in as a feature brand

515
00:20:34,400 --> 00:20:35,600
on

516
00:20:35,600 --> 00:20:38,640
and get the repository that is uh

517
00:20:38,640 --> 00:20:40,480
responsible for hosting the terraform

518
00:20:40,480 --> 00:20:41,520
code

519
00:20:41,520 --> 00:20:43,919
and then see the magic happens

520
00:20:43,919 --> 00:20:46,840
you would get shield access on

521
00:20:46,840 --> 00:20:50,158
that machine

522
00:20:50,480 --> 00:20:52,640
of course this is a big problem here

523
00:20:52,640 --> 00:20:55,919
but the thing is uh the other

524
00:20:55,919 --> 00:20:58,320
uh platforms are also vulnerable it's

525
00:20:58,320 --> 00:21:00,080
not only a problem for terraform

526
00:21:00,080 --> 00:21:02,320
enterprise anything that relies on

527
00:21:02,320 --> 00:21:04,799
terraform built would be vulnerable to

528
00:21:04,799 --> 00:21:06,880
this

529
00:21:06,880 --> 00:21:10,000
uh eric ostermann in 2018 tried to

530
00:21:10,000 --> 00:21:12,640
introduce a fix and it was rejected the

531
00:21:12,640 --> 00:21:15,039
fix was to use uh to

532
00:21:15,039 --> 00:21:18,480
to restrict users from uh

533
00:21:18,480 --> 00:21:20,960
querying guitar from plan or within

534
00:21:20,960 --> 00:21:24,159
atlantis to only to only a subset that

535
00:21:24,159 --> 00:21:26,960
is being specified and this would grant

536
00:21:26,960 --> 00:21:29,280
security here and could be a temporary

537
00:21:29,280 --> 00:21:32,080
fix but it does not really resolve the

538
00:21:32,080 --> 00:21:34,720
the actual problem from terraform

539
00:21:34,720 --> 00:21:38,000
ideally you should not really be able to

540
00:21:38,000 --> 00:21:41,600
run code uh on terraform enterprises

541
00:21:41,600 --> 00:21:44,480
uh enterprise instance and get

542
00:21:44,480 --> 00:21:47,760
full access to there or get access into

543
00:21:47,760 --> 00:21:48,720
the

544
00:21:48,720 --> 00:21:51,280
the machine or the instance that is

545
00:21:51,280 --> 00:21:53,600
running atlantis the student or even the

546
00:21:53,600 --> 00:21:56,080
developer machine that runs telephone

547
00:21:56,080 --> 00:21:57,039
plan

548
00:21:57,039 --> 00:22:01,120
this is not the thing the right thing

549
00:22:10,000 --> 00:22:13,120
all right moving ahead

550
00:22:13,120 --> 00:22:15,760
we talked about the attack that uh you

551
00:22:15,760 --> 00:22:18,640
can upload

552
00:22:18,720 --> 00:22:21,280
you can upload an an external data

553
00:22:21,280 --> 00:22:22,240
source

554
00:22:22,240 --> 00:22:23,600
like this one

555
00:22:23,600 --> 00:22:27,039
to gain access there but wouldn't it be

556
00:22:27,039 --> 00:22:30,799
fun if we can do this in a way that is

557
00:22:30,799 --> 00:22:32,880
not really detected

558
00:22:32,880 --> 00:22:36,159
from the pr

559
00:22:36,159 --> 00:22:37,600
let's talk about

560
00:22:37,600 --> 00:22:40,559
the evil provider attack

561
00:22:40,559 --> 00:22:42,640
publishing providers

562
00:22:42,640 --> 00:22:45,600
with inter within hashicorps terraform

563
00:22:45,600 --> 00:22:48,240
is automated this is made to encourage

564
00:22:48,240 --> 00:22:52,880
publishers to push code to terraform

565
00:22:52,960 --> 00:22:54,400
but the thing is

566
00:22:54,400 --> 00:22:56,640
trust but verify

567
00:22:56,640 --> 00:22:59,440
we cannot really just push code and have

568
00:22:59,440 --> 00:23:01,440
it being uh

569
00:23:01,440 --> 00:23:02,880
trusted

570
00:23:02,880 --> 00:23:05,520
uh to be used by the community and by

571
00:23:05,520 --> 00:23:07,840
terraform without really verifying its

572
00:23:07,840 --> 00:23:10,320
content or even having

573
00:23:10,320 --> 00:23:13,520
a way to detect attacks here so let's

574
00:23:13,520 --> 00:23:15,760
say let's say for example

575
00:23:15,760 --> 00:23:18,159
that one of these providers or one of

576
00:23:18,159 --> 00:23:21,039
these 1000 providers that are being used

577
00:23:21,039 --> 00:23:23,600
by people it's not only these six or

578
00:23:23,600 --> 00:23:25,600
eight providers

579
00:23:25,600 --> 00:23:28,080
are have been compromised and they have

580
00:23:28,080 --> 00:23:29,840
been back there and we're going to talk

581
00:23:29,840 --> 00:23:31,600
about how

582
00:23:31,600 --> 00:23:33,679
and if this happens

583
00:23:33,679 --> 00:23:36,000
and someone just say perform in it and

584
00:23:36,000 --> 00:23:37,440
third from plan

585
00:23:37,440 --> 00:23:39,200
what would happen is the attacker would

586
00:23:39,200 --> 00:23:41,840
be compromising the company it would be

587
00:23:41,840 --> 00:23:44,320
chaos

588
00:23:46,799 --> 00:23:47,600
but

589
00:23:47,600 --> 00:23:50,400
you know i don't want to have this being

590
00:23:50,400 --> 00:23:51,360
as

591
00:23:51,360 --> 00:23:53,120
a theoretical attack that does not

592
00:23:53,120 --> 00:23:56,000
really happen in the real world and

593
00:23:56,000 --> 00:23:57,440
someone is

594
00:23:57,440 --> 00:23:59,360
discussing it in public

595
00:23:59,360 --> 00:24:01,279
i would like to show an actual proof of

596
00:24:01,279 --> 00:24:04,720
concept about this attack from zero to

597
00:24:04,720 --> 00:24:06,400
the end

598
00:24:06,400 --> 00:24:07,840
so let's start

599
00:24:07,840 --> 00:24:09,840
first

600
00:24:09,840 --> 00:24:12,880
let's try to set up a provider

601
00:24:12,880 --> 00:24:15,039
uh i set up a new

602
00:24:15,039 --> 00:24:18,159
github account i called it event reform

603
00:24:18,159 --> 00:24:20,640
of course i didn't want to use my uh my

604
00:24:20,640 --> 00:24:23,120
personal github account because i know

605
00:24:23,120 --> 00:24:25,120
it may get suspended

606
00:24:25,120 --> 00:24:26,400
we're going to talk about this one in a

607
00:24:26,400 --> 00:24:28,640
bit

608
00:24:28,960 --> 00:24:30,080
and

609
00:24:30,080 --> 00:24:34,159
then i developed a sample provider and

610
00:24:34,159 --> 00:24:36,400
this provider was pushed into event

611
00:24:36,400 --> 00:24:39,120
terraform such therefore provider e

612
00:24:39,120 --> 00:24:41,520
of course this is my picture

613
00:24:41,520 --> 00:24:43,600
anyone can know that this

614
00:24:43,600 --> 00:24:47,039
the code that i have

615
00:24:47,039 --> 00:24:50,480
and then i backdoored this provider with

616
00:24:50,480 --> 00:24:51,760
this code

617
00:24:51,760 --> 00:24:54,240
this is a simple therefore

618
00:24:54,240 --> 00:24:57,200
this is a simple

619
00:24:57,919 --> 00:25:00,400
provider that would grant me

620
00:25:00,400 --> 00:25:01,200
a

621
00:25:01,200 --> 00:25:03,919
reverse reverse cp shield upon the

622
00:25:03,919 --> 00:25:05,360
execution

623
00:25:05,360 --> 00:25:08,158
to my server

624
00:25:08,320 --> 00:25:10,640
and then i pushed it to

625
00:25:10,640 --> 00:25:13,440
to the terraform registry and it was

626
00:25:13,440 --> 00:25:15,200
accepted

627
00:25:15,200 --> 00:25:17,200
it was approved

628
00:25:17,200 --> 00:25:20,000
i had my category as cloud automations

629
00:25:20,000 --> 00:25:23,760
because it automates my hacking here

630
00:25:23,760 --> 00:25:27,279
and i was showing a bit what happened

631
00:25:27,279 --> 00:25:30,480
once i had the provide they're being

632
00:25:30,480 --> 00:25:32,960
approved by terraform i

633
00:25:32,960 --> 00:25:33,679
i

634
00:25:33,679 --> 00:25:37,360
i made a pr to push it uh to

635
00:25:37,360 --> 00:25:38,799
somewhere

636
00:25:38,799 --> 00:25:41,840
and it looked like this it's just is

637
00:25:41,840 --> 00:25:44,240
the same way that we would be pushing

638
00:25:44,240 --> 00:25:45,600
providers

639
00:25:45,600 --> 00:25:46,400
in

640
00:25:46,400 --> 00:25:49,279
our companies

641
00:25:49,279 --> 00:25:50,480
and now

642
00:25:50,480 --> 00:25:52,880
the fun part is the demo

643
00:25:52,880 --> 00:25:56,480
popping uh shall enter from cloud hosted

644
00:25:56,480 --> 00:25:58,080
by terraform

645
00:25:58,080 --> 00:26:02,000
that's right hosted by hashicorp

646
00:26:07,120 --> 00:26:11,000
this is app the telephone.io

647
00:26:37,840 --> 00:26:39,918
you

648
00:27:11,360 --> 00:27:13,760
right

649
00:27:14,320 --> 00:27:17,600
and you would wonder from here is how is

650
00:27:17,600 --> 00:27:21,360
it a detection here probably you know

651
00:27:21,360 --> 00:27:24,000
in a well organized uh environment that

652
00:27:24,000 --> 00:27:25,600
is running a good

653
00:27:25,600 --> 00:27:28,559
edr solution or antivirus solution this

654
00:27:28,559 --> 00:27:31,360
attack would be prevented or detected

655
00:27:31,360 --> 00:27:35,039
but it wasn't the case i i put i pushed

656
00:27:35,039 --> 00:27:37,039
the provider that i

657
00:27:37,039 --> 00:27:38,080
built

658
00:27:38,080 --> 00:27:41,279
into virustotal and

659
00:27:41,279 --> 00:27:45,720
no provider really detected

660
00:27:48,240 --> 00:27:50,720
and back to the attack that we showed

661
00:27:50,720 --> 00:27:52,960
here

662
00:27:53,520 --> 00:27:56,240
pushing the provider that grants me a

663
00:27:56,240 --> 00:27:58,880
recipient

664
00:27:58,880 --> 00:27:59,840
got

665
00:27:59,840 --> 00:28:01,039
executed

666
00:28:01,039 --> 00:28:03,200
correctly within hashicorp

667
00:28:03,200 --> 00:28:05,600
infrastructure which is really bad

668
00:28:05,600 --> 00:28:06,799
imagine

669
00:28:06,799 --> 00:28:08,799
what could happen afterward i haven't

670
00:28:08,799 --> 00:28:10,480
really exploited this

671
00:28:10,480 --> 00:28:12,880
further i only stopped at this

672
00:28:12,880 --> 00:28:13,840
part

673
00:28:13,840 --> 00:28:15,760
and i tried my best to make it as

674
00:28:15,760 --> 00:28:17,120
obvious

675
00:28:17,120 --> 00:28:20,240
to the security team to see how the team

676
00:28:20,240 --> 00:28:22,080
response would be like

677
00:28:22,080 --> 00:28:24,399
and before i uh

678
00:28:24,399 --> 00:28:25,279
i

679
00:28:25,279 --> 00:28:28,640
i continue here i wanna say that this

680
00:28:28,640 --> 00:28:31,120
attack is against the terms of use by

681
00:28:31,120 --> 00:28:32,240
hashicorp

682
00:28:32,240 --> 00:28:34,399
running this in an account my resulting

683
00:28:34,399 --> 00:28:37,360
accounts person

684
00:28:37,520 --> 00:28:39,440
so how was the security team response

685
00:28:39,440 --> 00:28:41,840
within hours of my exploitation they

686
00:28:41,840 --> 00:28:44,880
detected the evil provider attack and

687
00:28:44,880 --> 00:28:47,039
contact me directly to chat about my

688
00:28:47,039 --> 00:28:48,640
findings

689
00:28:48,640 --> 00:28:50,880
and then we discussed various ideas and

690
00:28:50,880 --> 00:28:53,360
thoughts to introduce a fix from for the

691
00:28:53,360 --> 00:28:56,840
thing that was presented here

692
00:28:56,840 --> 00:28:59,840
and hashicorp uh

693
00:28:59,840 --> 00:29:01,440
for me that they are really thinking

694
00:29:01,440 --> 00:29:04,720
about ways into having this uh being

695
00:29:04,720 --> 00:29:06,960
mitigated in their uh for their

696
00:29:06,960 --> 00:29:08,320
customers

697
00:29:08,320 --> 00:29:11,279
for the time being there is no patch

698
00:29:11,279 --> 00:29:14,159
there is no fix to introduce

699
00:29:14,159 --> 00:29:17,919
and there is no way to prevent this

700
00:29:18,000 --> 00:29:20,799
i appreciate the hashicorp's efforts in

701
00:29:20,799 --> 00:29:24,240
handling and analyzing the research

702
00:29:24,240 --> 00:29:28,559
one thing to add is i was planning to to

703
00:29:28,559 --> 00:29:30,799
to make the responsible disclosure the

704
00:29:30,799 --> 00:29:33,279
next day of my tests

705
00:29:33,279 --> 00:29:35,679
and before even going to the next day

706
00:29:35,679 --> 00:29:36,559
they were

707
00:29:36,559 --> 00:29:38,640
the ones who were contacting me and i

708
00:29:38,640 --> 00:29:40,880
really appreciate them being this

709
00:29:40,880 --> 00:29:43,360
proactive

710
00:29:46,080 --> 00:29:48,960
uh one thing to add here is we are also

711
00:29:48,960 --> 00:29:51,600
thinking about uh starting their bug

712
00:29:51,600 --> 00:29:53,760
bounty program at the the current time

713
00:29:53,760 --> 00:29:55,679
they don't have a quantity program but

714
00:29:55,679 --> 00:29:57,840
this is one thing that they also

715
00:29:57,840 --> 00:30:00,879
are planning to have

716
00:30:01,440 --> 00:30:03,679
now going to the recommendations

717
00:30:03,679 --> 00:30:05,200
first

718
00:30:05,200 --> 00:30:08,399
be careful there is

719
00:30:08,399 --> 00:30:10,720
like you would have hard times in

720
00:30:10,720 --> 00:30:13,520
maintaining a security from environment

721
00:30:13,520 --> 00:30:14,480
so

722
00:30:14,480 --> 00:30:16,240
being careful is my main recommendation

723
00:30:16,240 --> 00:30:18,159
here

724
00:30:18,159 --> 00:30:21,880
another thing is

725
00:30:22,480 --> 00:30:26,240
i don't know why it sits like this

726
00:30:31,600 --> 00:30:34,399
okay uh another thing is

727
00:30:34,399 --> 00:30:36,080
when

728
00:30:36,080 --> 00:30:39,360
using sv as a remote backend try to have

729
00:30:39,360 --> 00:30:42,159
a bucket access policy to prevent other

730
00:30:42,159 --> 00:30:44,399
users other than

731
00:30:44,399 --> 00:30:46,480
there from instance to have access to

732
00:30:46,480 --> 00:30:48,080
your instance

733
00:30:48,080 --> 00:30:51,279
this way you can uh prevent that prevent

734
00:30:51,279 --> 00:30:52,640
uh

735
00:30:52,640 --> 00:30:55,760
like unauthorized access in certain ways

736
00:30:55,760 --> 00:30:58,159
of course there is a bypass there are

737
00:30:58,159 --> 00:31:00,320
bypasses for this uh

738
00:31:00,320 --> 00:31:02,799
solution where if you have another user

739
00:31:02,799 --> 00:31:07,039
that have access to modify the

740
00:31:07,039 --> 00:31:10,559
the bucket access policy for this bucket

741
00:31:10,559 --> 00:31:12,640
then they can delete the access pocket

742
00:31:12,640 --> 00:31:14,480
policy and then they can access the

743
00:31:14,480 --> 00:31:15,679
bucket here

744
00:31:15,679 --> 00:31:20,080
but at least if you can use this as a as

745
00:31:20,080 --> 00:31:23,919
a protection this would be a good way

746
00:31:23,919 --> 00:31:26,159
another thing is to continually update

747
00:31:26,159 --> 00:31:28,559
and review your terraform instance

748
00:31:28,559 --> 00:31:31,039
it can be easily forgotten in the noise

749
00:31:31,039 --> 00:31:33,360
and if there is an attacker

750
00:31:33,360 --> 00:31:35,360
or an actor that

751
00:31:35,360 --> 00:31:38,320
lands on your terraform instance as uh

752
00:31:38,320 --> 00:31:40,399
like mentioned earlier this is a great

753
00:31:40,399 --> 00:31:42,480
place for attack persistence

754
00:31:42,480 --> 00:31:44,799
so it can be easily

755
00:31:44,799 --> 00:31:46,880
abused badly here

756
00:31:46,880 --> 00:31:49,679
and then it can be easily for defenders

757
00:31:49,679 --> 00:31:51,840
to forget about it so

758
00:31:51,840 --> 00:31:54,158
yeah

759
00:31:55,120 --> 00:31:56,720
another thing is

760
00:31:56,720 --> 00:31:58,640
be careful in permitting people to have

761
00:31:58,640 --> 00:32:00,799
right access even feature like feature

762
00:32:00,799 --> 00:32:03,039
brand taxes for your uh terraform

763
00:32:03,039 --> 00:32:04,240
repository

764
00:32:04,240 --> 00:32:06,320
because it can lead to direct code

765
00:32:06,320 --> 00:32:08,720
execution uh and there is no way to pass

766
00:32:08,720 --> 00:32:10,320
it

767
00:32:10,320 --> 00:32:11,200
i'm

768
00:32:11,200 --> 00:32:13,600
waiting for pass to happen

769
00:32:13,600 --> 00:32:16,640
we uh hashicorp and i were talking about

770
00:32:16,640 --> 00:32:19,200
uh way different ways to detect the

771
00:32:19,200 --> 00:32:20,480
attack

772
00:32:20,480 --> 00:32:23,120
meanwhile the actual uh

773
00:32:23,120 --> 00:32:24,799
patch is there

774
00:32:24,799 --> 00:32:27,519
but it's just ways to detect it there is

775
00:32:27,519 --> 00:32:30,880
no way to prevent it at the moment

776
00:32:31,279 --> 00:32:34,000
another thing is to maintain a terraform

777
00:32:34,000 --> 00:32:36,880
instance in an isolated vpc that no one

778
00:32:36,880 --> 00:32:37,840
really

779
00:32:37,840 --> 00:32:40,240
actually said on the internet do not be

780
00:32:40,240 --> 00:32:42,720
exposed to the internet this is bad

781
00:32:42,720 --> 00:32:44,720
the next zero day that would happen

782
00:32:44,720 --> 00:32:46,159
someone would scan the internet and

783
00:32:46,159 --> 00:32:47,679
probably compromise your organization

784
00:32:47,679 --> 00:32:49,360
because of this mistake

785
00:32:49,360 --> 00:32:52,240
and it would be bad

786
00:32:52,799 --> 00:32:53,760
and

787
00:32:53,760 --> 00:32:56,480
i think this would be lastly state files

788
00:32:56,480 --> 00:32:59,360
are sensitive like they contain a lot of

789
00:32:59,360 --> 00:33:03,840
data from database passwords to ssl keys

790
00:33:03,840 --> 00:33:07,760
uh sorry ssl certificates access keys

791
00:33:07,760 --> 00:33:11,360
read them as sensitive data

792
00:33:11,360 --> 00:33:14,159
and of course a good idea is to

793
00:33:14,159 --> 00:33:17,600
set up ci check to detect uh rogue

794
00:33:17,600 --> 00:33:20,320
terraform providers that this would aid

795
00:33:20,320 --> 00:33:22,720
in the exploitation discovery whenever

796
00:33:22,720 --> 00:33:25,440
someone is trying to exploit your

797
00:33:25,440 --> 00:33:28,080
telephone setup

798
00:33:28,080 --> 00:33:30,399
this is one thing to add as a defensive

799
00:33:30,399 --> 00:33:32,399
measure

800
00:33:32,399 --> 00:33:33,600
one thing that

801
00:33:33,600 --> 00:33:35,279
has a corp

802
00:33:35,279 --> 00:33:37,120
security team

803
00:33:37,120 --> 00:33:39,679
asked me to add is the terraform cloud

804
00:33:39,679 --> 00:33:42,000
security model

805
00:33:42,000 --> 00:33:44,240
this is a document that talks about

806
00:33:44,240 --> 00:33:47,120
different ways that

807
00:33:47,120 --> 00:33:49,039
that you can use for threat modeling

808
00:33:49,039 --> 00:33:51,600
your terraform cloud security while at

809
00:33:51,600 --> 00:33:54,320
the same time it it can apply for your

810
00:33:54,320 --> 00:33:58,399
term from enterprise setup

811
00:33:59,279 --> 00:34:01,200
and now we are reaching to the end of

812
00:34:01,200 --> 00:34:03,600
the talk

813
00:34:03,600 --> 00:34:06,240
final thoughts terraform is amazing i

814
00:34:06,240 --> 00:34:07,840
love your phone

815
00:34:07,840 --> 00:34:09,839
it brings several security features when

816
00:34:09,839 --> 00:34:11,280
implementing

817
00:34:11,280 --> 00:34:12,960
iec with terraform

818
00:34:12,960 --> 00:34:15,918
but still with great power comes great

819
00:34:15,918 --> 00:34:18,320
responsibility protect your terraform

820
00:34:18,320 --> 00:34:21,320
environment

821
00:34:21,599 --> 00:34:24,399
stay safe and set up persistent monitor

822
00:34:24,399 --> 00:34:26,879
like full hunt to discover shadow ide

823
00:34:26,879 --> 00:34:29,440
missed configurations and mistakenly

824
00:34:29,440 --> 00:34:31,918
exposed services of course it would not

825
00:34:31,918 --> 00:34:33,839
really work out for all of the other

826
00:34:33,839 --> 00:34:36,560
home attacks we talked here

827
00:34:36,560 --> 00:34:40,960
but yeah just one thing to add here

828
00:34:41,520 --> 00:34:44,079
and lastly

829
00:34:44,079 --> 00:34:47,280
the questions

