1
00:00:00,880 --> 00:00:03,600
hi

2
00:00:01,839 --> 00:00:05,279
thank you for joining me today for

3
00:00:03,600 --> 00:00:08,160
tradecraft development in advisory

4
00:00:05,279 --> 00:00:10,400
simulations my name is fatouzabji also

5
00:00:08,160 --> 00:00:12,080
thanks advisory village and defcon for

6
00:00:10,400 --> 00:00:14,000
hosting me today

7
00:00:12,080 --> 00:00:16,240
today we will talk about tradecraft

8
00:00:14,000 --> 00:00:18,880
development and we will have different

9
00:00:16,240 --> 00:00:21,920
chapters that we will introduce how

10
00:00:18,880 --> 00:00:24,320
tradecraft works as well as how the

11
00:00:21,920 --> 00:00:26,000
other implementations can be used after

12
00:00:24,320 --> 00:00:28,320
that we will talk about how we can

13
00:00:26,000 --> 00:00:30,400
develop our own implementations

14
00:00:28,320 --> 00:00:32,239
chapter 1b will introduce the

15
00:00:30,400 --> 00:00:34,719
development environment to you and

16
00:00:32,239 --> 00:00:37,200
chapter 2 will help you to build your

17
00:00:34,719 --> 00:00:39,680
own c2 as well as implant

18
00:00:37,200 --> 00:00:41,120
chapter 3 will enrich your implant using

19
00:00:39,680 --> 00:00:43,760
windows apis and some other

20
00:00:41,120 --> 00:00:45,680
functionalities and chapter 4 will

21
00:00:43,760 --> 00:00:47,280
actually improve your implant for the

22
00:00:45,680 --> 00:00:50,399
evasion perspective

23
00:00:47,280 --> 00:00:52,239
so you can make your implant invisible

24
00:00:50,399 --> 00:00:54,960
as much as you like

25
00:00:52,239 --> 00:00:57,280
today the objective is developing an

26
00:00:54,960 --> 00:01:00,640
implant from basic to advanced skills

27
00:00:57,280 --> 00:01:02,960
it's up to you how you can enrich them

28
00:01:00,640 --> 00:01:05,600
my name is fatio zhaoji i'm managing

29
00:01:02,960 --> 00:01:07,280
security consultant in the missing link

30
00:01:05,600 --> 00:01:09,439
australia

31
00:01:07,280 --> 00:01:11,439
but actually i love advisor simulations

32
00:01:09,439 --> 00:01:13,360
and security research therefore i had

33
00:01:11,439 --> 00:01:14,640
several different tools developed for

34
00:01:13,360 --> 00:01:16,720
these purposes

35
00:01:14,640 --> 00:01:18,960
i have also presented those tools and my

36
00:01:16,720 --> 00:01:21,200
research in black at usa europe defcon

37
00:01:18,960 --> 00:01:23,759
and other sacred conferences i currently

38
00:01:21,200 --> 00:01:26,320
also study master of cyber security in

39
00:01:23,759 --> 00:01:28,479
university of new south wales so you

40
00:01:26,320 --> 00:01:30,159
will use some of those tools today as

41
00:01:28,479 --> 00:01:32,240
well

42
00:01:30,159 --> 00:01:34,799
let's talk about those tools i have

43
00:01:32,240 --> 00:01:36,960
developed ta-505 plus advisory

44
00:01:34,799 --> 00:01:39,280
simulation pack that is a full

45
00:01:36,960 --> 00:01:42,079
simulation pack that comes with some

46
00:01:39,280 --> 00:01:44,399
repurposed tools new tools as well as

47
00:01:42,079 --> 00:01:47,119
some additional evasions and bypasses it

48
00:01:44,399 --> 00:01:48,880
has four plus hours of video to prepare

49
00:01:47,119 --> 00:01:50,479
each stage for you as well as an

50
00:01:48,880 --> 00:01:52,880
implementation guide

51
00:01:50,479 --> 00:01:55,520
and in the end there is also a large

52
00:01:52,880 --> 00:01:57,680
report that explains how this tool and

53
00:01:55,520 --> 00:01:58,719
environment would work for you and it

54
00:01:57,680 --> 00:02:00,799
can be

55
00:01:58,719 --> 00:02:02,159
actually useful for you to build your

56
00:02:00,799 --> 00:02:04,560
own exercise

57
00:02:02,159 --> 00:02:06,640
i also developed a taxi to one and a

58
00:02:04,560 --> 00:02:09,360
half years ago and the reason behind of

59
00:02:06,640 --> 00:02:11,520
it was i needed to automate some of the

60
00:02:09,360 --> 00:02:14,000
red team actions probably it is also

61
00:02:11,520 --> 00:02:15,760
same for you so you need your own c2 you

62
00:02:14,000 --> 00:02:17,680
need your own implant and you need to

63
00:02:15,760 --> 00:02:21,360
make things automated for the blue team

64
00:02:17,680 --> 00:02:23,599
exercises for this work

65
00:02:21,360 --> 00:02:24,800
in addition i have also tested malware

66
00:02:23,599 --> 00:02:27,200
generator

67
00:02:24,800 --> 00:02:29,040
i assume that some of the attendees and

68
00:02:27,200 --> 00:02:31,040
participants here are actually coming

69
00:02:29,040 --> 00:02:33,120
from the blue team and sometimes even

70
00:02:31,040 --> 00:02:34,800
data analytics that's why sometimes you

71
00:02:33,120 --> 00:02:36,720
need friendly tools to generate this

72
00:02:34,800 --> 00:02:39,360
type of traffics and test that malware

73
00:02:36,720 --> 00:02:41,360
generator is a response for this one but

74
00:02:39,360 --> 00:02:43,200
it can be also used for your own

75
00:02:41,360 --> 00:02:45,599
tradecraft development because it comes

76
00:02:43,200 --> 00:02:47,040
with laser ui web interface and

77
00:02:45,599 --> 00:02:49,680
different types of protocols and

78
00:02:47,040 --> 00:02:52,000
services so you can enrich them and make

79
00:02:49,680 --> 00:02:52,879
them actually working with your implant

80
00:02:52,000 --> 00:02:55,440
and

81
00:02:52,879 --> 00:02:58,080
maybe it will be useful for you it's up

82
00:02:55,440 --> 00:02:59,280
to you finally i have also weaponizing

83
00:02:58,080 --> 00:03:01,760
c-sharp

84
00:02:59,280 --> 00:03:04,000
training that is that is also available

85
00:03:01,760 --> 00:03:05,680
in github repositories so you can just

86
00:03:04,000 --> 00:03:07,519
clone it and you can start working on it

87
00:03:05,680 --> 00:03:10,319
to understand how c-sharp can be

88
00:03:07,519 --> 00:03:12,560
weaponized for the purple team as well

89
00:03:10,319 --> 00:03:14,400
as every team exercises

90
00:03:12,560 --> 00:03:18,400
i am not a developer i develop those

91
00:03:14,400 --> 00:03:21,680
tools for fun as well as for simulations

92
00:03:18,400 --> 00:03:23,280
so if you want to start exercises today

93
00:03:21,680 --> 00:03:25,519
you need to actually clone a github

94
00:03:23,280 --> 00:03:27,680
repository that is the address of the

95
00:03:25,519 --> 00:03:30,400
github repository so you can use git

96
00:03:27,680 --> 00:03:32,879
clone to get this repository compile the

97
00:03:30,400 --> 00:03:35,040
tools and work on them it comes with

98
00:03:32,879 --> 00:03:37,120
code examples also

99
00:03:35,040 --> 00:03:40,640
the presentation itself

100
00:03:37,120 --> 00:03:42,640
in addition it has a c2 capabilities for

101
00:03:40,640 --> 00:03:45,519
example there is a text file there there

102
00:03:42,640 --> 00:03:47,840
is a actually a c sharp file

103
00:03:45,519 --> 00:03:50,720
executable so you can actually use these

104
00:03:47,840 --> 00:03:51,840
functionalities while building your c2

105
00:03:50,720 --> 00:03:53,280
implant

106
00:03:51,840 --> 00:03:55,360
and you can use them as a kind of

107
00:03:53,280 --> 00:03:57,680
instruction list so feel free to

108
00:03:55,360 --> 00:04:00,000
participate where when necessary or you

109
00:03:57,680 --> 00:04:02,080
feel comfortable

110
00:04:00,000 --> 00:04:03,200
i will talk about stress and simulations

111
00:04:02,080 --> 00:04:04,799
firstly

112
00:04:03,200 --> 00:04:07,040
we have different levels different

113
00:04:04,799 --> 00:04:09,280
colors of the advisory simulations red

114
00:04:07,040 --> 00:04:11,599
team is the most uh interesting one

115
00:04:09,280 --> 00:04:14,000
because we actually start with zero

116
00:04:11,599 --> 00:04:16,639
information we need no collaboration and

117
00:04:14,000 --> 00:04:18,959
we try to infiltrate the organization

118
00:04:16,639 --> 00:04:21,440
just like a trade actor

119
00:04:18,959 --> 00:04:24,400
in the purple team exercises we actually

120
00:04:21,440 --> 00:04:26,800
calibrate in this case the color changes

121
00:04:24,400 --> 00:04:29,440
the meaning is actually the blue team

122
00:04:26,800 --> 00:04:31,199
joins us blue team can be actually trade

123
00:04:29,440 --> 00:04:34,240
intelligence or security operations

124
00:04:31,199 --> 00:04:36,639
center uh or uh some uh actually

125
00:04:34,240 --> 00:04:38,000
interesting instant response teams or uh

126
00:04:36,639 --> 00:04:38,880
some other universal engineering teams

127
00:04:38,000 --> 00:04:41,199
as well

128
00:04:38,880 --> 00:04:43,520
and offensive offensive teams will be

129
00:04:41,199 --> 00:04:45,440
also a red team or penetration testing

130
00:04:43,520 --> 00:04:47,840
or maybe more than that

131
00:04:45,440 --> 00:04:50,240
there's also automated tools that can be

132
00:04:47,840 --> 00:04:52,560
used for breach and attack simulations

133
00:04:50,240 --> 00:04:54,240
and they are useful to actually ring

134
00:04:52,560 --> 00:04:56,240
some bells on the environments to

135
00:04:54,240 --> 00:04:58,960
understand that your coverage is correct

136
00:04:56,240 --> 00:05:01,199
or your network is in scope or your

137
00:04:58,960 --> 00:05:03,280
endpoints are in scope so different

138
00:05:01,199 --> 00:05:05,199
types of colors actually come with

139
00:05:03,280 --> 00:05:07,120
different abilities so it's up to you

140
00:05:05,199 --> 00:05:08,560
how to colorize them based on your

141
00:05:07,120 --> 00:05:11,360
purposes

142
00:05:08,560 --> 00:05:13,440
this is an example trade intelligence

143
00:05:11,360 --> 00:05:15,600
actually information uh extracted from

144
00:05:13,440 --> 00:05:18,240
microsoft trade intelligence reports it

145
00:05:15,600 --> 00:05:21,199
is about no value and how they operated

146
00:05:18,240 --> 00:05:23,120
there or actually the campaign

147
00:05:21,199 --> 00:05:25,039
during this campaign they compromised

148
00:05:23,120 --> 00:05:26,800
solarwinds then they compromise some of

149
00:05:25,039 --> 00:05:28,800
the vendors and after that some

150
00:05:26,800 --> 00:05:30,720
government organizations so you can

151
00:05:28,800 --> 00:05:32,639
extract this type of information from

152
00:05:30,720 --> 00:05:35,199
the trade intelligence reports this is a

153
00:05:32,639 --> 00:05:36,720
basic example so you can visit this link

154
00:05:35,199 --> 00:05:38,960
in microsoft trade intelligence

155
00:05:36,720 --> 00:05:41,039
repository and you can start working on

156
00:05:38,960 --> 00:05:43,600
it this is important because

157
00:05:41,039 --> 00:05:45,840
we advise actually while we are building

158
00:05:43,600 --> 00:05:48,720
the adversary simulations we use this

159
00:05:45,840 --> 00:05:51,280
type of information so

160
00:05:48,720 --> 00:05:53,759
if you look at them in a different way

161
00:05:51,280 --> 00:05:56,000
you can also reuse them for example this

162
00:05:53,759 --> 00:05:58,560
one is a simple attack and c2

163
00:05:56,000 --> 00:06:00,800
communication type of salary gate and

164
00:05:58,560 --> 00:06:02,400
you can see that it can target the

165
00:06:00,800 --> 00:06:04,960
organization if organization is in the

166
00:06:02,400 --> 00:06:07,199
target list it can start

167
00:06:04,960 --> 00:06:09,919
at second stage and then third stage and

168
00:06:07,199 --> 00:06:13,360
fourth and fifth whatever necessary but

169
00:06:09,919 --> 00:06:15,600
it actually works on different c2 types

170
00:06:13,360 --> 00:06:17,440
sometimes it is uh dns sometimes it is

171
00:06:15,600 --> 00:06:20,000
web sometimes social media in this

172
00:06:17,440 --> 00:06:22,479
nobelium case it started with the dns

173
00:06:20,000 --> 00:06:24,960
and then it also loaded a cabal strike

174
00:06:22,479 --> 00:06:26,880
as well so we can see this information

175
00:06:24,960 --> 00:06:29,039
in the thread intelligence report so we

176
00:06:26,880 --> 00:06:31,919
can actually customize our

177
00:06:29,039 --> 00:06:34,240
simulation based on this information

178
00:06:31,919 --> 00:06:36,080
when we read it carefully we can also

179
00:06:34,240 --> 00:06:37,919
see that there can be some additional

180
00:06:36,080 --> 00:06:40,639
campaigns as well this one is another

181
00:06:37,919 --> 00:06:42,960
example from nobelium but this time they

182
00:06:40,639 --> 00:06:45,360
have sent an email and after this email

183
00:06:42,960 --> 00:06:48,479
uh they started actually a javascript

184
00:06:45,360 --> 00:06:51,520
file an html smart link feature they

185
00:06:48,479 --> 00:06:53,680
actually downloaded an iso and this iso

186
00:06:51,520 --> 00:06:56,720
is mounted and then

187
00:06:53,680 --> 00:07:00,000
the code executed actually iso has been

188
00:06:56,720 --> 00:07:02,960
uh actually decoded so simply it writes

189
00:07:00,000 --> 00:07:04,639
the iso to disk so it's up to you how

190
00:07:02,960 --> 00:07:06,720
you can implement this you can use the

191
00:07:04,639 --> 00:07:09,199
javascript to download iso or you can

192
00:07:06,720 --> 00:07:12,000
just encode base64

193
00:07:09,199 --> 00:07:14,080
encode this iso file and just decode

194
00:07:12,000 --> 00:07:16,639
this on the fly and you can make it an

195
00:07:14,080 --> 00:07:18,800
hta file or html file or whatever you

196
00:07:16,639 --> 00:07:20,319
are comfortable with so simply you need

197
00:07:18,800 --> 00:07:22,880
to make it working

198
00:07:20,319 --> 00:07:24,960
but the intelligence report already

199
00:07:22,880 --> 00:07:28,160
gives you some information for example

200
00:07:24,960 --> 00:07:30,960
the iso content or how this

201
00:07:28,160 --> 00:07:32,880
lnk file link file works so you can see

202
00:07:30,960 --> 00:07:34,960
the commands and parameters there

203
00:07:32,880 --> 00:07:36,960
moreover the script content and some

204
00:07:34,960 --> 00:07:39,680
additional information can be also used

205
00:07:36,960 --> 00:07:41,680
to develop this type of tradecraft

206
00:07:39,680 --> 00:07:43,840
finally you are not alone there are

207
00:07:41,680 --> 00:07:46,800
other specialists actually working on

208
00:07:43,840 --> 00:07:47,680
this type of stuff for example creating

209
00:07:46,800 --> 00:07:50,319
um

210
00:07:47,680 --> 00:07:52,720
a kind of simulation like that

211
00:07:50,319 --> 00:07:55,360
it needs some steps first of all working

212
00:07:52,720 --> 00:07:59,199
on a javascript making it uh to be able

213
00:07:55,360 --> 00:08:01,759
to decode base64 file and start actually

214
00:07:59,199 --> 00:08:04,400
building an iso file and encode this for

215
00:08:01,759 --> 00:08:06,879
base64 and then embed this to the

216
00:08:04,400 --> 00:08:09,599
javascript to make it running

217
00:08:06,879 --> 00:08:12,560
the thing is it is slightly easier if

218
00:08:09,599 --> 00:08:14,560
you work on just one single exercise but

219
00:08:12,560 --> 00:08:15,840
if you try to automate this there will

220
00:08:14,560 --> 00:08:18,080
be some difficulties because of the

221
00:08:15,840 --> 00:08:20,800
compatibility requirements for example

222
00:08:18,080 --> 00:08:23,759
jorge ortiz has provided actually

223
00:08:20,800 --> 00:08:25,680
example for this exercise on atomic rate

224
00:08:23,759 --> 00:08:28,879
team so feel free to visit this and it

225
00:08:25,680 --> 00:08:31,599
can be useful also target is actually a

226
00:08:28,879 --> 00:08:33,519
blue tumor so he also develops some of

227
00:08:31,599 --> 00:08:35,760
the content the adversary simulation

228
00:08:33,519 --> 00:08:37,360
initial payload part so it can be also

229
00:08:35,760 --> 00:08:39,440
useful for you

230
00:08:37,360 --> 00:08:41,599
finally editing chester uh

231
00:08:39,440 --> 00:08:43,760
also worked on some csc sharp early

232
00:08:41,599 --> 00:08:46,240
sport types and how it can be exported

233
00:08:43,760 --> 00:08:48,720
it can be useful because we developed

234
00:08:46,240 --> 00:08:50,399
our tradecraft today using the c sharp

235
00:08:48,720 --> 00:08:53,760
and that net environment

236
00:08:50,399 --> 00:08:55,360
but they are actually not unmanaged dlls

237
00:08:53,760 --> 00:08:57,680
so they have no exports

238
00:08:55,360 --> 00:08:58,480
so if you want to export the functions

239
00:08:57,680 --> 00:09:00,240
and

240
00:08:58,480 --> 00:09:02,240
actually the

241
00:09:00,240 --> 00:09:04,720
content you use in the start net

242
00:09:02,240 --> 00:09:07,360
assembly you need to actually make your

243
00:09:04,720 --> 00:09:09,120
executable supporting them in the export

244
00:09:07,360 --> 00:09:10,959
section so you need to add them one by

245
00:09:09,120 --> 00:09:12,720
one to the exports you can do this

246
00:09:10,959 --> 00:09:15,200
manually or you can use some additional

247
00:09:12,720 --> 00:09:18,880
tools that's why this blog will help you

248
00:09:15,200 --> 00:09:22,560
to understand how this process works

249
00:09:18,880 --> 00:09:23,519
another one is actually ta-505 plus i

250
00:09:22,560 --> 00:09:25,360
actually

251
00:09:23,519 --> 00:09:26,399
will explain how this advances

252
00:09:25,360 --> 00:09:28,240
simulation

253
00:09:26,399 --> 00:09:31,040
environment works for you because this

254
00:09:28,240 --> 00:09:33,279
is end-to-end example the previous ones

255
00:09:31,040 --> 00:09:34,640
were only working on the initial payload

256
00:09:33,279 --> 00:09:36,720
preparation

257
00:09:34,640 --> 00:09:38,720
the initial payload is there for example

258
00:09:36,720 --> 00:09:42,240
starting with an email the email content

259
00:09:38,720 --> 00:09:44,480
could be html and that html file or hta

260
00:09:42,240 --> 00:09:46,399
file itself will have javascript that

261
00:09:44,480 --> 00:09:49,040
can get the code execution and the

262
00:09:46,399 --> 00:09:51,760
javascript content will actually put the

263
00:09:49,040 --> 00:09:53,600
file on the scan we can make it running

264
00:09:51,760 --> 00:09:55,839
or sometimes we can use eduard means for

265
00:09:53,600 --> 00:09:56,800
this initial payload as well but after

266
00:09:55,839 --> 00:09:58,880
that

267
00:09:56,800 --> 00:10:01,279
things get complicated we need a command

268
00:09:58,880 --> 00:10:03,760
and control server we need some security

269
00:10:01,279 --> 00:10:06,160
bypasses we need a uac by a password in

270
00:10:03,760 --> 00:10:08,160
the dmc bypass we need sometimes run

271
00:10:06,160 --> 00:10:10,240
somewhere examples as well

272
00:10:08,160 --> 00:10:12,560
to do that we need to prepare an advisor

273
00:10:10,240 --> 00:10:15,120
simulation pack from beginning to end

274
00:10:12,560 --> 00:10:18,240
ta-505 plus is a response for this

275
00:10:15,120 --> 00:10:20,079
because ta-505 was a trade actor

276
00:10:18,240 --> 00:10:21,519
actually currently is a trade actor but

277
00:10:20,079 --> 00:10:23,040
during those days they were also

278
00:10:21,519 --> 00:10:25,360
targeting the australian financial

279
00:10:23,040 --> 00:10:27,760
institutions so i worked on them and i

280
00:10:25,360 --> 00:10:30,160
made it a kind of exercise but i didn't

281
00:10:27,760 --> 00:10:32,800
use exactly what they had in the

282
00:10:30,160 --> 00:10:36,079
campaign reports my assumption was

283
00:10:32,800 --> 00:10:37,600
ta 505 could improve and upgrade their

284
00:10:36,079 --> 00:10:39,519
abilities

285
00:10:37,600 --> 00:10:43,120
this simply says that yes they can

286
00:10:39,519 --> 00:10:45,519
upgrade and we don't know

287
00:10:43,120 --> 00:10:48,160
let's make it known that's why i started

288
00:10:45,519 --> 00:10:50,560
working on windows 10 up to date office

289
00:10:48,160 --> 00:10:54,000
2019 up to date as well as windows

290
00:10:50,560 --> 00:10:56,480
defender and mc full update system so i

291
00:10:54,000 --> 00:11:00,399
decided that what if this system uh the

292
00:10:56,480 --> 00:11:02,560
target will be like that how ta 505 can

293
00:11:00,399 --> 00:11:04,480
improve their systems as well as the

294
00:11:02,560 --> 00:11:07,920
campaigns that's why this advisory

295
00:11:04,480 --> 00:11:10,160
simulation pack is coming with a plus

296
00:11:07,920 --> 00:11:12,959
and this advantage simulation pack

297
00:11:10,160 --> 00:11:15,600
has a full key chain that's why the kill

298
00:11:12,959 --> 00:11:18,000
chain has different stages coming with

299
00:11:15,600 --> 00:11:19,279
different tools for us to simulate them

300
00:11:18,000 --> 00:11:21,200
accurately

301
00:11:19,279 --> 00:11:23,120
as there is no actual reconnaissance

302
00:11:21,200 --> 00:11:24,959
phase for this one i prepare trade

303
00:11:23,120 --> 00:11:26,720
intelligence information there so the

304
00:11:24,959 --> 00:11:28,720
video and the content is based on trade

305
00:11:26,720 --> 00:11:31,360
intelligence but the rest of the phases

306
00:11:28,720 --> 00:11:34,000
pretty much like a trade actor so you

307
00:11:31,360 --> 00:11:35,920
only work on the weaponization you also

308
00:11:34,000 --> 00:11:37,920
work on the delivery and when you

309
00:11:35,920 --> 00:11:40,640
compromise this you actually install the

310
00:11:37,920 --> 00:11:41,519
malware there for persistency you also

311
00:11:40,640 --> 00:11:43,839
you're

312
00:11:41,519 --> 00:11:45,760
actually you also work on your own c2

313
00:11:43,839 --> 00:11:47,040
and you try to complete some of the

314
00:11:45,760 --> 00:11:48,720
objectives that include also

315
00:11:47,040 --> 00:11:51,360
ransomwaring

316
00:11:48,720 --> 00:11:53,680
so ransomwaring is a kind of uh known

317
00:11:51,360 --> 00:11:55,600
behavior of ta 505 that's why i

318
00:11:53,680 --> 00:11:57,839
developed a simple tool to simulate

319
00:11:55,600 --> 00:12:00,399
those features

320
00:11:57,839 --> 00:12:03,519
those are the tools i developed or

321
00:12:00,399 --> 00:12:06,160
repurposed for the ca 505 plus exercise

322
00:12:03,519 --> 00:12:07,920
so it can be useful for you to build for

323
00:12:06,160 --> 00:12:10,880
example patek dropper is the initial

324
00:12:07,920 --> 00:12:13,040
payload starter when it believes that

325
00:12:10,880 --> 00:12:15,120
the environment is safe for it it

326
00:12:13,040 --> 00:12:18,240
actually downloads the patek mc bypass

327
00:12:15,120 --> 00:12:20,560
to patch mc make it way more clean

328
00:12:18,240 --> 00:12:22,240
and to work and then it downloads the

329
00:12:20,560 --> 00:12:24,959
patek implant and

330
00:12:22,240 --> 00:12:27,519
go on and go on attack service is the

331
00:12:24,959 --> 00:12:30,320
city service and nmc patcher is the mca

332
00:12:27,519 --> 00:12:32,639
actually bypass utility uh and it is

333
00:12:30,320 --> 00:12:34,800
coming from daniel dargan's actually uh

334
00:12:32,639 --> 00:12:37,360
example but i repurposed it to avoid

335
00:12:34,800 --> 00:12:39,360
detections and also this dropper the

336
00:12:37,360 --> 00:12:42,320
patek dropper can start with an excel

337
00:12:39,360 --> 00:12:44,000
file because the ta505 was actively

338
00:12:42,320 --> 00:12:45,680
using the excel file i used excel

339
00:12:44,000 --> 00:12:47,839
anti-doughnut for it

340
00:12:45,680 --> 00:12:50,560
so there are some tools and there are

341
00:12:47,839 --> 00:12:52,959
some new tools in this bucket

342
00:12:50,560 --> 00:12:55,040
so how they work is just like this the

343
00:12:52,959 --> 00:12:57,839
excel file amp attack dropper protect

344
00:12:55,040 --> 00:12:59,680
dropper yes tmc bypass a tool when

345
00:12:57,839 --> 00:13:02,000
everything is clean it lost the implant

346
00:12:59,680 --> 00:13:04,399
and establishes a ct communications

347
00:13:02,000 --> 00:13:06,560
using the web sockets

348
00:13:04,399 --> 00:13:08,639
through this one we have a real time

349
00:13:06,560 --> 00:13:11,680
communication

350
00:13:08,639 --> 00:13:13,920
all this patch was undirected those days

351
00:13:11,680 --> 00:13:16,399
now it is elected of course the tools

352
00:13:13,920 --> 00:13:18,720
techniques and the pack was uh were

353
00:13:16,399 --> 00:13:20,800
public so there were some signatures

354
00:13:18,720 --> 00:13:22,480
generated for it however everything is

355
00:13:20,800 --> 00:13:25,040
open source so you can just repurpose

356
00:13:22,480 --> 00:13:26,959
those tools to do the same thing for

357
00:13:25,040 --> 00:13:30,480
example i have repurposed daniel

358
00:13:26,959 --> 00:13:32,399
duggan's amc patcher mc bypass

359
00:13:30,480 --> 00:13:34,560
to make it running again and there's a

360
00:13:32,399 --> 00:13:36,160
video for it so that will be your

361
00:13:34,560 --> 00:13:38,720
starting point and you can use another

362
00:13:36,160 --> 00:13:41,360
way to actually customize this and start

363
00:13:38,720 --> 00:13:43,600
using again

364
00:13:41,360 --> 00:13:46,240
when the exercise starts we actually

365
00:13:43,600 --> 00:13:49,680
establish a ground between the implant

366
00:13:46,240 --> 00:13:52,000
and c2 however we have objectives to

367
00:13:49,680 --> 00:13:53,920
work on and those objectives are not

368
00:13:52,000 --> 00:13:56,160
always on the end point there are some

369
00:13:53,920 --> 00:13:59,040
servers in the back there will be some

370
00:13:56,160 --> 00:14:01,760
class services and we need to connect

371
00:13:59,040 --> 00:14:03,920
those services those systems to actually

372
00:14:01,760 --> 00:14:05,519
achieve our objectives

373
00:14:03,920 --> 00:14:07,199
through this path

374
00:14:05,519 --> 00:14:08,800
i need to implement some additional

375
00:14:07,199 --> 00:14:10,959
features for my implant that's why

376
00:14:08,800 --> 00:14:13,040
patacity comes with implant implant

377
00:14:10,959 --> 00:14:14,880
linking and some additional features for

378
00:14:13,040 --> 00:14:16,880
lateral movement as well

379
00:14:14,880 --> 00:14:18,800
through this way i have demonstrated how

380
00:14:16,880 --> 00:14:21,040
we can compromise the servers using the

381
00:14:18,800 --> 00:14:23,279
lateral movement techniques as well as

382
00:14:21,040 --> 00:14:26,000
implant implant linking techniques

383
00:14:23,279 --> 00:14:28,240
in addition i safely executed meta

384
00:14:26,000 --> 00:14:29,839
arpeggio memory and actually used metal

385
00:14:28,240 --> 00:14:32,000
printer for remote exploitation in this

386
00:14:29,839 --> 00:14:33,680
case and my therapeutic was also using

387
00:14:32,000 --> 00:14:36,160
metasploit sc2

388
00:14:33,680 --> 00:14:39,040
i haven't used cobalt's rack c2 in this

389
00:14:36,160 --> 00:14:41,680
picture however it is widely used by

390
00:14:39,040 --> 00:14:44,880
ta505

391
00:14:41,680 --> 00:14:47,360
patak c2 while mentioning like that

392
00:14:44,880 --> 00:14:48,639
is a good cto for me because i have

393
00:14:47,360 --> 00:14:50,720
actually implemented some of the

394
00:14:48,639 --> 00:14:53,760
essential features and it helped me to

395
00:14:50,720 --> 00:14:56,079
customize them it avoided directions it

396
00:14:53,760 --> 00:14:57,040
also comes with some abilities as well

397
00:14:56,079 --> 00:14:59,680
normally

398
00:14:57,040 --> 00:15:01,920
it should be a kind of problem more

399
00:14:59,680 --> 00:15:03,839
specifically whenever you compromise the

400
00:15:01,920 --> 00:15:06,320
system you try to understand who you are

401
00:15:03,839 --> 00:15:10,000
what you do and you use windows commands

402
00:15:06,320 --> 00:15:13,680
instead patak actually accepts the sharp

403
00:15:10,000 --> 00:15:15,600
c sharp commas so direct c-sharp commas

404
00:15:13,680 --> 00:15:17,920
would work it compiles in memory and

405
00:15:15,600 --> 00:15:19,600
runs them for example console.writeline

406
00:15:17,920 --> 00:15:21,120
the username

407
00:15:19,600 --> 00:15:23,360
it writes the username and you don't

408
00:15:21,120 --> 00:15:25,199
need to use who am i for example

409
00:15:23,360 --> 00:15:27,600
that's why patak comes with some

410
00:15:25,199 --> 00:15:29,600
additional abilities for me and today i

411
00:15:27,600 --> 00:15:32,240
will talk about attack and other

412
00:15:29,600 --> 00:15:34,160
features but in this time i will assist

413
00:15:32,240 --> 00:15:36,639
you to develop your own c2 and your own

414
00:15:34,160 --> 00:15:39,519
implant and patak is coming

415
00:15:36,639 --> 00:15:41,519
in mit license so simply you can

416
00:15:39,519 --> 00:15:43,440
repurpose anything and you can reuse

417
00:15:41,519 --> 00:15:45,920
anything that means there are actually

418
00:15:43,440 --> 00:15:48,560
gadgets for you for today and i actually

419
00:15:45,920 --> 00:15:50,959
supplied them in chapter two and three

420
00:15:48,560 --> 00:15:53,040
folders so you can start enriching your

421
00:15:50,959 --> 00:15:54,880
implant using those abilities extracted

422
00:15:53,040 --> 00:15:56,880
from attack

423
00:15:54,880 --> 00:15:58,800
attack has lots of different gadgets

424
00:15:56,880 --> 00:16:00,160
like that that can be used

425
00:15:58,800 --> 00:16:02,079
lateral movement

426
00:16:00,160 --> 00:16:03,920
or implanting past linking different

427
00:16:02,079 --> 00:16:06,880
types of protocols assembly name pipe

428
00:16:03,920 --> 00:16:09,040
tcp udp web sockets they are all there

429
00:16:06,880 --> 00:16:12,480
what you need to do is only merging them

430
00:16:09,040 --> 00:16:14,399
combining them and making yours

431
00:16:12,480 --> 00:16:16,079
patak supports all of these features as

432
00:16:14,399 --> 00:16:18,160
the baseline for example that is

433
00:16:16,079 --> 00:16:19,839
something features or

434
00:16:18,160 --> 00:16:21,600
shellcode injection features or some

435
00:16:19,839 --> 00:16:24,240
essential features such as upload

436
00:16:21,600 --> 00:16:27,199
download or linking another implant so

437
00:16:24,240 --> 00:16:28,880
these type of things are implemented and

438
00:16:27,199 --> 00:16:30,959
as mentioned this is not a product this

439
00:16:28,880 --> 00:16:33,680
was a proof of concept for me and it can

440
00:16:30,959 --> 00:16:36,000
be your proof of concept as well

441
00:16:33,680 --> 00:16:38,480
in this case we have also some

442
00:16:36,000 --> 00:16:40,480
additional requirements sometimes it is

443
00:16:38,480 --> 00:16:41,600
a user interface a graphical user

444
00:16:40,480 --> 00:16:44,240
interface

445
00:16:41,600 --> 00:16:46,800
patek runs on command console which is

446
00:16:44,240 --> 00:16:49,199
not nice this is why i also developed

447
00:16:46,800 --> 00:16:51,600
asset malware a generator the asset

448
00:16:49,199 --> 00:16:53,120
helps us to actually simulate some of

449
00:16:51,600 --> 00:16:56,639
the malware traffic

450
00:16:53,120 --> 00:16:58,160
using the protocols http http websocket

451
00:16:56,639 --> 00:16:59,680
tcp udp

452
00:16:58,160 --> 00:17:02,639
those are the current

453
00:16:59,680 --> 00:17:04,240
capabilities and the dns icmp and some

454
00:17:02,639 --> 00:17:05,360
additional features will be added soon

455
00:17:04,240 --> 00:17:07,919
as well

456
00:17:05,360 --> 00:17:09,439
i'm actually i mention it here for it

457
00:17:07,919 --> 00:17:11,280
for another reason

458
00:17:09,439 --> 00:17:13,919
probably you also need graphical user

459
00:17:11,280 --> 00:17:16,400
interface for your c2 to make it shinier

460
00:17:13,919 --> 00:17:17,360
and look like a kind of real a good

461
00:17:16,400 --> 00:17:19,600
product

462
00:17:17,360 --> 00:17:22,319
in this case you can repurpose tessa as

463
00:17:19,600 --> 00:17:24,559
well it is also mit licensed and you can

464
00:17:22,319 --> 00:17:26,799
actually use the blazer ui for the

465
00:17:24,559 --> 00:17:28,480
interface and you can still use your.net

466
00:17:26,799 --> 00:17:31,520
environment so

467
00:17:28,480 --> 00:17:35,280
it comes as another free tool

468
00:17:31,520 --> 00:17:38,400
these are actually a real-life deals we

469
00:17:35,280 --> 00:17:41,039
generally try to simulate our exercises

470
00:17:38,400 --> 00:17:43,039
on cloud or on-premise servers and

471
00:17:41,039 --> 00:17:45,200
points and actually some of the remote

472
00:17:43,039 --> 00:17:46,640
locations that's why we need to support

473
00:17:45,200 --> 00:17:49,440
lots of different protocols and

474
00:17:46,640 --> 00:17:51,840
communications if you want to simulate

475
00:17:49,440 --> 00:17:53,679
them with no hostile capability tessa

476
00:17:51,840 --> 00:17:55,440
will work for you

477
00:17:53,679 --> 00:17:57,200
if you are looking for also some

478
00:17:55,440 --> 00:18:00,000
additional hostile capabilities such as

479
00:17:57,200 --> 00:18:02,320
code execution or command execution or

480
00:18:00,000 --> 00:18:04,799
shar code injection yes you need to

481
00:18:02,320 --> 00:18:06,640
improve your implant

482
00:18:04,799 --> 00:18:08,960
these are also screenshots of how

483
00:18:06,640 --> 00:18:10,799
tessart works

484
00:18:08,960 --> 00:18:13,200
now we talked about some development

485
00:18:10,799 --> 00:18:15,840
fundamentals as well

486
00:18:13,200 --> 00:18:17,520
c-sharp is our preferred language for

487
00:18:15,840 --> 00:18:20,640
this workshop

488
00:18:17,520 --> 00:18:22,640
we will talk about c-sharp add.net but

489
00:18:20,640 --> 00:18:24,400
also that net comes with different

490
00:18:22,640 --> 00:18:26,720
versions we need to understand this

491
00:18:24,400 --> 00:18:28,720
basics first because that net doesn't

492
00:18:26,720 --> 00:18:31,360
have one single version that works

493
00:18:28,720 --> 00:18:34,400
everywhere universally

494
00:18:31,360 --> 00:18:37,039
we we use c-sharp tools to develop

495
00:18:34,400 --> 00:18:39,440
custom abilities for us

496
00:18:37,039 --> 00:18:42,320
this is quite helpful for the advisory

497
00:18:39,440 --> 00:18:44,000
simulations because we try to avoid

498
00:18:42,320 --> 00:18:46,799
detections

499
00:18:44,000 --> 00:18:50,080
we actually prefer directions where they

500
00:18:46,799 --> 00:18:52,640
are necessary or where we need them

501
00:18:50,080 --> 00:18:53,840
if they are not needed we don't need to

502
00:18:52,640 --> 00:18:55,760
actually

503
00:18:53,840 --> 00:18:58,240
we don't need to be detected

504
00:18:55,760 --> 00:19:00,160
that's why our tools must be subtle as

505
00:18:58,240 --> 00:19:02,240
much as possible

506
00:19:00,160 --> 00:19:04,080
c-sharp tools actually started

507
00:19:02,240 --> 00:19:05,919
developing after powershell because

508
00:19:04,080 --> 00:19:07,919
powershell got secured by microsoft

509
00:19:05,919 --> 00:19:10,320
using a couple of different ways

510
00:19:07,919 --> 00:19:12,799
and that's why those restrictions moved

511
00:19:10,320 --> 00:19:15,200
all security researchers to c-sharp

512
00:19:12,799 --> 00:19:18,000
however c-sharp comes with additional

513
00:19:15,200 --> 00:19:20,960
problems for example different versions

514
00:19:18,000 --> 00:19:23,840
on windows linux and actually mac

515
00:19:20,960 --> 00:19:26,160
also.net framework and net core there's

516
00:19:23,840 --> 00:19:28,160
no universal language also windows comes

517
00:19:26,160 --> 00:19:31,200
with different versions for example the

518
00:19:28,160 --> 00:19:33,760
windows 7 comes with dotnet 3.5 and

519
00:19:31,200 --> 00:19:36,320
windows 10 comes with net 4.

520
00:19:33,760 --> 00:19:37,520
so we need to understand these parts

521
00:19:36,320 --> 00:19:39,679
moreover

522
00:19:37,520 --> 00:19:42,000
uh there's a problem with uh c-sharp and

523
00:19:39,679 --> 00:19:44,400
that assembly just like the power shell

524
00:19:42,000 --> 00:19:46,480
and what happened to powershell

525
00:19:44,400 --> 00:19:49,280
c-sharp also and

526
00:19:46,480 --> 00:19:50,880
that net also gets their own

527
00:19:49,280 --> 00:19:52,480
security controls

528
00:19:50,880 --> 00:19:54,400
after 4.8

529
00:19:52,480 --> 00:19:56,559
that net framework also has mc

530
00:19:54,400 --> 00:19:58,400
integration and windows defender can

531
00:19:56,559 --> 00:20:00,320
identify your malicious behaviors even

532
00:19:58,400 --> 00:20:02,080
though they are not running while you

533
00:20:00,320 --> 00:20:04,960
are loading the tools or certain

534
00:20:02,080 --> 00:20:07,120
functionalities they can be directed so

535
00:20:04,960 --> 00:20:09,679
it's not only about static analysis

536
00:20:07,120 --> 00:20:11,520
evasion or some dynamic analysis evasion

537
00:20:09,679 --> 00:20:13,679
it's more like someone is on your

538
00:20:11,520 --> 00:20:14,960
shoulder and watching what exactly you

539
00:20:13,679 --> 00:20:16,640
are doing

540
00:20:14,960 --> 00:20:19,440
so this type of abilities and

541
00:20:16,640 --> 00:20:21,600
limitations must be known because we can

542
00:20:19,440 --> 00:20:23,760
still leverage those abilities we can

543
00:20:21,600 --> 00:20:26,640
still work with implants we can still

544
00:20:23,760 --> 00:20:31,200
work with tools if we are actually aware

545
00:20:26,640 --> 00:20:33,120
of the um defender or mc or another edr

546
00:20:31,200 --> 00:20:35,039
watching us so we can just deal with

547
00:20:33,120 --> 00:20:38,880
them

548
00:20:35,039 --> 00:20:41,280
that net comes with actually clr and um

549
00:20:38,880 --> 00:20:42,640
we need this runtime to actually

550
00:20:41,280 --> 00:20:44,880
interpret our

551
00:20:42,640 --> 00:20:47,360
binaries the soundies but they are that

552
00:20:44,880 --> 00:20:49,360
meta sound is not native sound is to do

553
00:20:47,360 --> 00:20:51,840
that we need to understand what type of

554
00:20:49,360 --> 00:20:53,760
runtime environment we have

555
00:20:51,840 --> 00:20:55,919
if you are running on windows you can go

556
00:20:53,760 --> 00:20:58,080
to actually see windows microsoft.net

557
00:20:55,919 --> 00:20:59,360
framework and after that the version

558
00:20:58,080 --> 00:21:01,440
folder

559
00:20:59,360 --> 00:21:02,799
then you can see the versions whatever

560
00:21:01,440 --> 00:21:05,200
they are

561
00:21:02,799 --> 00:21:06,640
they may be dotnet 2 that the 3.5 or

562
00:21:05,200 --> 00:21:08,240
that n4

563
00:21:06,640 --> 00:21:10,720
some of the functionalities are missing

564
00:21:08,240 --> 00:21:13,200
in that net 2 or that net 3.5 that's why

565
00:21:10,720 --> 00:21:15,120
your implant must work on all of them

566
00:21:13,200 --> 00:21:17,520
actually universally

567
00:21:15,120 --> 00:21:19,679
and another problem there is it depends

568
00:21:17,520 --> 00:21:21,600
on how you compile them

569
00:21:19,679 --> 00:21:23,280
let's start with some basics before

570
00:21:21,600 --> 00:21:25,840
making things complicated

571
00:21:23,280 --> 00:21:28,240
how you can compile these operations as

572
00:21:25,840 --> 00:21:29,600
well as c-sharp binaries are quite

573
00:21:28,240 --> 00:21:31,600
simple actually

574
00:21:29,600 --> 00:21:34,640
you need mono

575
00:21:31,600 --> 00:21:37,039
and you can install mono using apt

576
00:21:34,640 --> 00:21:39,360
installed monocomplete on linux

577
00:21:37,039 --> 00:21:42,000
or for mac you can just download this or

578
00:21:39,360 --> 00:21:44,159
use brook install mono

579
00:21:42,000 --> 00:21:46,720
mono will help you to compile all these

580
00:21:44,159 --> 00:21:49,039
binaries with no hassle

581
00:21:46,720 --> 00:21:51,200
but there is also.net and dotnet is

582
00:21:49,039 --> 00:21:53,760
available for windows linux and mac as

583
00:21:51,200 --> 00:21:55,280
well and you can also download.net

584
00:21:53,760 --> 00:21:58,799
dot net can

585
00:21:55,280 --> 00:22:01,200
build run and work with nuggets as well

586
00:21:58,799 --> 00:22:03,760
and mono can do that mono can do this

587
00:22:01,200 --> 00:22:06,320
only for that net framework while that

588
00:22:03,760 --> 00:22:09,280
net can do this for net core

589
00:22:06,320 --> 00:22:13,520
that means our implant must be using.net

590
00:22:09,280 --> 00:22:15,679
framework to work on windows 7 and 10

591
00:22:13,520 --> 00:22:18,960
without any issue

592
00:22:15,679 --> 00:22:21,120
and our server side could be.net core

593
00:22:18,960 --> 00:22:23,360
which is cruise platform

594
00:22:21,120 --> 00:22:25,200
and it comes with additional features

595
00:22:23,360 --> 00:22:27,200
especially that need five

596
00:22:25,200 --> 00:22:30,080
which is another type of call the newer

597
00:22:27,200 --> 00:22:31,840
version latin 5 comes with additional

598
00:22:30,080 --> 00:22:33,760
actually functionalities that could

599
00:22:31,840 --> 00:22:36,880
really help us to automate some of the

600
00:22:33,760 --> 00:22:39,200
features and implement them easily

601
00:22:36,880 --> 00:22:42,559
that's why we will try to develop our

602
00:22:39,200 --> 00:22:45,200
server side using that net maybe 3.1 or

603
00:22:42,559 --> 00:22:47,200
latin five and decline and implement a

604
00:22:45,200 --> 00:22:48,559
implementation based on that net

605
00:22:47,200 --> 00:22:49,919
framework

606
00:22:48,559 --> 00:22:54,000
which is probably

607
00:22:49,919 --> 00:22:56,240
between 4 as well as 4.8

608
00:22:54,000 --> 00:22:58,400
now this is a simple hello

609
00:22:56,240 --> 00:23:01,039
we need to use our namespace we need to

610
00:22:58,400 --> 00:23:02,640
use a class which is program in this

611
00:23:01,039 --> 00:23:04,960
case and then we need to use a

612
00:23:02,640 --> 00:23:07,760
functionality here

613
00:23:04,960 --> 00:23:10,080
actually this class and the function

614
00:23:07,760 --> 00:23:12,720
will turn to a type and method when we

615
00:23:10,080 --> 00:23:15,200
compile them on.net assembly

616
00:23:12,720 --> 00:23:17,360
so it is quite useful and it is quite

617
00:23:15,200 --> 00:23:19,200
easy to customize them for example the

618
00:23:17,360 --> 00:23:22,240
console.writeline is there and i can use

619
00:23:19,200 --> 00:23:24,320
for example system.console.com

620
00:23:22,240 --> 00:23:27,440
it is there but if i have lots of

621
00:23:24,320 --> 00:23:30,480
console.writeline lines and instructions

622
00:23:27,440 --> 00:23:32,559
i prefer using system in top so simply

623
00:23:30,480 --> 00:23:34,320
system will help me to use console

624
00:23:32,559 --> 00:23:36,880
directly with no hassle

625
00:23:34,320 --> 00:23:39,200
so it is making things easier for the

626
00:23:36,880 --> 00:23:40,720
namespace wise

627
00:23:39,200 --> 00:23:43,520
this is another

628
00:23:40,720 --> 00:23:46,559
example this is for string operations

629
00:23:43,520 --> 00:23:49,120
string operationsof.net is also quite

630
00:23:46,559 --> 00:23:51,120
familiar if you previously developed

631
00:23:49,120 --> 00:23:53,440
some tools using a scripting language

632
00:23:51,120 --> 00:23:55,600
such as python you can see some of the

633
00:23:53,440 --> 00:23:58,000
string operations are quite easy to

634
00:23:55,600 --> 00:24:00,240
understand adding strings to other

635
00:23:58,000 --> 00:24:03,120
strings and modifying them getting

636
00:24:00,240 --> 00:24:06,159
indexes getting them maybe replaced or

637
00:24:03,120 --> 00:24:08,559
split they work well however if you are

638
00:24:06,159 --> 00:24:11,200
dealing with the.net framework not that

639
00:24:08,559 --> 00:24:13,760
net core you may have uh limitations

640
00:24:11,200 --> 00:24:15,760
that's why we use actually uh system

641
00:24:13,760 --> 00:24:19,039
text regular expressions

642
00:24:15,760 --> 00:24:20,640
that's why we use regex dot split

643
00:24:19,039 --> 00:24:24,240
and then the

644
00:24:20,640 --> 00:24:25,760
string and what could be split or how we

645
00:24:24,240 --> 00:24:27,919
can replace

646
00:24:25,760 --> 00:24:29,919
because if we use string dot replace or

647
00:24:27,919 --> 00:24:31,679
string dot split

648
00:24:29,919 --> 00:24:33,679
it would not work on that net framework

649
00:24:31,679 --> 00:24:35,360
because of the limitations it depends on

650
00:24:33,679 --> 00:24:37,440
the version of course but most of the

651
00:24:35,360 --> 00:24:38,880
time it is not implemented

652
00:24:37,440 --> 00:24:40,559
that's therefore while you are

653
00:24:38,880 --> 00:24:43,600
developing your implant please make sure

654
00:24:40,559 --> 00:24:46,240
that it works everywhere

655
00:24:43,600 --> 00:24:48,880
this is another example of if condition

656
00:24:46,240 --> 00:24:51,440
if you previously coded on another

657
00:24:48,880 --> 00:24:53,840
scripting language this may help you to

658
00:24:51,440 --> 00:24:56,960
understand how this coding works and how

659
00:24:53,840 --> 00:25:00,480
the conditioning the branching works

660
00:24:56,960 --> 00:25:03,200
in this case i simply used arguments

661
00:25:00,480 --> 00:25:05,679
and if there is no argument the length

662
00:25:03,200 --> 00:25:06,799
is zero it will say that what you want

663
00:25:05,679 --> 00:25:08,799
to do

664
00:25:06,799 --> 00:25:10,880
but if there is an argument it simply

665
00:25:08,799 --> 00:25:13,440
says that yes these are my arguments

666
00:25:10,880 --> 00:25:15,279
these are my parameters through

667
00:25:13,440 --> 00:25:16,960
it may help you to build your implant

668
00:25:15,279 --> 00:25:19,200
for the console wise

669
00:25:16,960 --> 00:25:21,440
but if is not the only way to create

670
00:25:19,200 --> 00:25:24,400
branches switch is also quite useful

671
00:25:21,440 --> 00:25:26,320
especially for the main generation

672
00:25:24,400 --> 00:25:28,559
if you want to create a menu for your

673
00:25:26,320 --> 00:25:31,039
console application switch will help you

674
00:25:28,559 --> 00:25:33,200
to create a kind of decision tree

675
00:25:31,039 --> 00:25:35,760
it is same for the implant as well just

676
00:25:33,200 --> 00:25:38,559
imagine that the arguments coming are

677
00:25:35,760 --> 00:25:41,120
not uh coming from the arguments they

678
00:25:38,559 --> 00:25:43,919
are coming from the websocket or a web

679
00:25:41,120 --> 00:25:45,520
page or a social media text

680
00:25:43,919 --> 00:25:48,400
so you can see that they are coming

681
00:25:45,520 --> 00:25:50,159
there so you can create your own branch

682
00:25:48,400 --> 00:25:51,919
for example the instruction is right and

683
00:25:50,159 --> 00:25:54,000
otherwise read so you can actually

684
00:25:51,919 --> 00:25:56,400
create your own instructions there

685
00:25:54,000 --> 00:25:57,600
try to keep the switch simple as well as

686
00:25:56,400 --> 00:25:59,919
short

687
00:25:57,600 --> 00:26:02,640
because you will need also the functions

688
00:25:59,919 --> 00:26:04,799
to handle things for example

689
00:26:02,640 --> 00:26:06,240
the right here is using console

690
00:26:04,799 --> 00:26:08,799
writeline

691
00:26:06,240 --> 00:26:10,400
but read is using the test function the

692
00:26:08,799 --> 00:26:13,200
test function is important because it

693
00:26:10,400 --> 00:26:15,200
gives you another opportunity to

694
00:26:13,200 --> 00:26:16,880
continue in that branch

695
00:26:15,200 --> 00:26:18,880
if you will implement everything under

696
00:26:16,880 --> 00:26:20,640
the switch and case

697
00:26:18,880 --> 00:26:23,760
this will be a problem for you and the

698
00:26:20,640 --> 00:26:24,799
structure will be unmanageable

699
00:26:23,760 --> 00:26:26,880
instead

700
00:26:24,799 --> 00:26:28,320
all your operations should be standalone

701
00:26:26,880 --> 00:26:31,520
functions

702
00:26:28,320 --> 00:26:33,679
in the same class or another class

703
00:26:31,520 --> 00:26:34,480
and you can refer them under the case

704
00:26:33,679 --> 00:26:36,880
under

705
00:26:34,480 --> 00:26:39,200
this conditioning if the condition

706
00:26:36,880 --> 00:26:41,279
matches such as the text is read

707
00:26:39,200 --> 00:26:43,440
that function will be called this type

708
00:26:41,279 --> 00:26:44,880
of structure would help you to build

709
00:26:43,440 --> 00:26:47,919
actually implant capabilities for

710
00:26:44,880 --> 00:26:48,960
example write delete read run this run

711
00:26:47,919 --> 00:26:52,720
that

712
00:26:48,960 --> 00:26:53,679
and maybe exit as well

713
00:26:52,720 --> 00:26:55,279
loops

714
00:26:53,679 --> 00:26:57,360
are pretty similar to the other

715
00:26:55,279 --> 00:27:00,480
languages as well and they can be

716
00:26:57,360 --> 00:27:01,440
implemented using for or while or for

717
00:27:00,480 --> 00:27:04,400
each

718
00:27:01,440 --> 00:27:07,679
for each is useful for the objects and

719
00:27:04,400 --> 00:27:10,960
it can actually get the objects

720
00:27:07,679 --> 00:27:13,360
maybe the items of a array or list or a

721
00:27:10,960 --> 00:27:15,360
dictionary and start working on them but

722
00:27:13,360 --> 00:27:17,840
while and four they are looking for a

723
00:27:15,360 --> 00:27:20,559
condition for example increase

724
00:27:17,840 --> 00:27:23,679
this integer one by one

725
00:27:20,559 --> 00:27:25,679
until the condition arrives or while

726
00:27:23,679 --> 00:27:27,919
condition is true

727
00:27:25,679 --> 00:27:30,240
do all of this in a loop

728
00:27:27,919 --> 00:27:32,559
this type of loops are useful when we

729
00:27:30,240 --> 00:27:34,960
are waiting or processing the objects if

730
00:27:32,559 --> 00:27:37,200
there is a kind of dictionary or a list

731
00:27:34,960 --> 00:27:40,080
to process we can use this type of for

732
00:27:37,200 --> 00:27:41,840
each approach or for approach whatever

733
00:27:40,080 --> 00:27:43,520
useful

734
00:27:41,840 --> 00:27:45,600
another thing is we

735
00:27:43,520 --> 00:27:49,520
also have issues

736
00:27:45,600 --> 00:27:51,679
as a starter we fail and fail is a good

737
00:27:49,520 --> 00:27:53,520
way to learn as well but we need to also

738
00:27:51,679 --> 00:27:54,880
catch those failures

739
00:27:53,520 --> 00:27:57,360
and they are called exceptions in the

740
00:27:54,880 --> 00:27:58,480
programming and that's why we use try

741
00:27:57,360 --> 00:28:00,399
and catch

742
00:27:58,480 --> 00:28:03,600
and this is a simple try and catch

743
00:28:00,399 --> 00:28:08,080
example and it may help us to understand

744
00:28:03,600 --> 00:28:08,080
how we can fail or how we can proceed

745
00:28:08,240 --> 00:28:12,960
now

746
00:28:09,679 --> 00:28:15,600
i also mentioned that you can use mcs or

747
00:28:12,960 --> 00:28:17,679
csc to compile right

748
00:28:15,600 --> 00:28:21,200
but compiling them will make them

749
00:28:17,679 --> 00:28:23,760
executable the pe binary

750
00:28:21,200 --> 00:28:25,440
but there are other ways to run them i

751
00:28:23,760 --> 00:28:28,480
will give you only the powershell

752
00:28:25,440 --> 00:28:30,480
starters now but there are several

753
00:28:28,480 --> 00:28:33,600
for example the powershell

754
00:28:30,480 --> 00:28:36,000
can load the net assembly and can use

755
00:28:33,600 --> 00:28:38,559
system reflection assembly to load it

756
00:28:36,000 --> 00:28:40,880
and to run it so it can actually get the

757
00:28:38,559 --> 00:28:43,200
types get emitted and even work it

758
00:28:40,880 --> 00:28:46,000
it can actually focus on entry point as

759
00:28:43,200 --> 00:28:50,720
well so they can be used

760
00:28:46,000 --> 00:28:53,200
to actually load the implant from remote

761
00:28:50,720 --> 00:28:55,440
let's collect everything together

762
00:28:53,200 --> 00:28:58,080
we have an implant that can actually

763
00:28:55,440 --> 00:29:00,399
accept some of the parameters the

764
00:28:58,080 --> 00:29:02,960
parameters can be coming from let's say

765
00:29:00,399 --> 00:29:07,200
console or a web page

766
00:29:02,960 --> 00:29:09,039
and we can branch it using switch or if

767
00:29:07,200 --> 00:29:10,960
when the condition arrives when the

768
00:29:09,039 --> 00:29:12,480
instruction arrives we can create our

769
00:29:10,960 --> 00:29:14,559
function

770
00:29:12,480 --> 00:29:17,039
and we can work on it

771
00:29:14,559 --> 00:29:19,760
if implant works just like that we need

772
00:29:17,039 --> 00:29:21,520
a starter that's why we use powershell

773
00:29:19,760 --> 00:29:24,000
and it can be called as a dropper as

774
00:29:21,520 --> 00:29:26,480
well and what we do is simply

775
00:29:24,000 --> 00:29:28,000
downloading the dll from remote

776
00:29:26,480 --> 00:29:29,760
and

777
00:29:28,000 --> 00:29:32,320
for example using system reflection to

778
00:29:29,760 --> 00:29:36,240
run it or we can download the source

779
00:29:32,320 --> 00:29:39,200
code the cs file and we can use add type

780
00:29:36,240 --> 00:29:42,240
and require assemblies if there is

781
00:29:39,200 --> 00:29:45,120
and then run it

782
00:29:42,240 --> 00:29:46,080
revealing your c sharp code would not be

783
00:29:45,120 --> 00:29:48,080
great

784
00:29:46,080 --> 00:29:49,039
but if it is just only a dropper just

785
00:29:48,080 --> 00:29:51,679
like this

786
00:29:49,039 --> 00:29:53,600
if it is sacrificable to sacrifice it

787
00:29:51,679 --> 00:29:55,360
and go on because it's a trade-off you

788
00:29:53,600 --> 00:29:58,640
need to make it running then you can

789
00:29:55,360 --> 00:30:01,440
load your actually important code when

790
00:29:58,640 --> 00:30:03,679
things are safe

791
00:30:01,440 --> 00:30:06,080
now it is exercise time

792
00:30:03,679 --> 00:30:08,720
i will give you some hints to make it

793
00:30:06,080 --> 00:30:10,880
your own exercise time as this is a

794
00:30:08,720 --> 00:30:13,360
pre-recorded workshop

795
00:30:10,880 --> 00:30:14,799
i will only give you the hints

796
00:30:13,360 --> 00:30:16,720
but meanwhile you will work on the

797
00:30:14,799 --> 00:30:19,039
exercises

798
00:30:16,720 --> 00:30:19,840
so let's work on first a couple of

799
00:30:19,039 --> 00:30:22,320
things

800
00:30:19,840 --> 00:30:25,840
you need to set up an environment you

801
00:30:22,320 --> 00:30:28,320
can use mono or dotnet installing.net is

802
00:30:25,840 --> 00:30:30,320
simple download.net from microsoft web

803
00:30:28,320 --> 00:30:33,200
page for your operating system and

804
00:30:30,320 --> 00:30:34,480
install it or you can use apt install

805
00:30:33,200 --> 00:30:37,360
monocomplete

806
00:30:34,480 --> 00:30:40,399
and mono comes with actually mcs and csc

807
00:30:37,360 --> 00:30:42,159
that can be used to compile that net

808
00:30:40,399 --> 00:30:43,679
c shop code

809
00:30:42,159 --> 00:30:45,840
compile the sample binary in your

810
00:30:43,679 --> 00:30:48,880
chapter one

811
00:30:45,840 --> 00:30:50,880
you can use hello as an example as well

812
00:30:48,880 --> 00:30:53,440
but there are also interactive menus so

813
00:30:50,880 --> 00:30:55,440
try to make an interactive menu that can

814
00:30:53,440 --> 00:30:57,360
use a sample function for you

815
00:30:55,440 --> 00:31:00,080
which is also given

816
00:30:57,360 --> 00:31:01,840
and make your implant running on the

817
00:31:00,080 --> 00:31:04,720
console first

818
00:31:01,840 --> 00:31:07,519
compile it using mono or net

819
00:31:04,720 --> 00:31:09,760
and run it

820
00:31:07,519 --> 00:31:12,240
i will provide just a kind of starter

821
00:31:09,760 --> 00:31:15,039
now this is a simple starter your

822
00:31:12,240 --> 00:31:18,559
chapter 1 comes with some examples right

823
00:31:15,039 --> 00:31:20,480
condition console parameters and hello

824
00:31:18,559 --> 00:31:21,760
the hello is simple as i actually

825
00:31:20,480 --> 00:31:23,120
previously

826
00:31:21,760 --> 00:31:24,399
shown

827
00:31:23,120 --> 00:31:29,120
it is simply

828
00:31:24,399 --> 00:31:32,159
writing a text using a console.writeline

829
00:31:29,120 --> 00:31:36,000
you can use mcs to compile this and

830
00:31:32,159 --> 00:31:38,720
slash out will give you the file name

831
00:31:36,000 --> 00:31:41,360
and you can just name it whatever you

832
00:31:38,720 --> 00:31:44,480
want to do it will be your output and

833
00:31:41,360 --> 00:31:46,399
mono can be used to run this executable

834
00:31:44,480 --> 00:31:48,240
but remember one thing here

835
00:31:46,399 --> 00:31:50,000
mono is necessary the executable won't

836
00:31:48,240 --> 00:31:52,000
work without the runtime

837
00:31:50,000 --> 00:31:53,919
in dot net it is slightly different you

838
00:31:52,000 --> 00:31:56,320
can use that net to compile things as

839
00:31:53,919 --> 00:31:58,720
well but you need to use that net new

840
00:31:56,320 --> 00:32:01,360
and then console application and your

841
00:31:58,720 --> 00:32:03,679
directory actually the application name

842
00:32:01,360 --> 00:32:06,480
and now i enter the application

843
00:32:03,679 --> 00:32:08,640
directory and it comes with a cs

844
00:32:06,480 --> 00:32:11,200
approach file as well as program cs

845
00:32:08,640 --> 00:32:12,720
program cs is similar again hello world

846
00:32:11,200 --> 00:32:16,320
it's the same

847
00:32:12,720 --> 00:32:18,480
but this time dot net needs cs approach

848
00:32:16,320 --> 00:32:20,960
that gives that net the instructions and

849
00:32:18,480 --> 00:32:24,080
the capabilities to run

850
00:32:20,960 --> 00:32:26,080
so simply when you hit that net run

851
00:32:24,080 --> 00:32:28,159
it lost if there is any references

852
00:32:26,080 --> 00:32:29,679
necessary in the cs approach and then

853
00:32:28,159 --> 00:32:31,760
runs it

854
00:32:29,679 --> 00:32:34,159
now you it's your turn to enrich this

855
00:32:31,760 --> 00:32:35,519
using other examples for example using

856
00:32:34,159 --> 00:32:38,480
interactive menu

857
00:32:35,519 --> 00:32:42,159
and the case searches

858
00:32:38,480 --> 00:32:44,320
so this is the end of our first chapter

859
00:32:42,159 --> 00:32:46,320
and thank you and stay tuned we will

860
00:32:44,320 --> 00:32:48,640
focus on the chapter 2 chapter 3 and

861
00:32:46,320 --> 00:32:51,440
chapter 4 and how we can actually start

862
00:32:48,640 --> 00:32:53,039
building our c2 implant

863
00:32:51,440 --> 00:32:55,519
if you have any questions i will be

864
00:32:53,039 --> 00:32:56,720
available on discord channel of advisory

865
00:32:55,519 --> 00:33:00,960
village

866
00:32:56,720 --> 00:33:00,960
thank you for listening this chapter one

867
00:33:01,039 --> 00:33:04,159
hi

868
00:33:01,919 --> 00:33:05,919
welcome to the chapter dew i hope you

869
00:33:04,159 --> 00:33:07,679
completed your exercises and your

870
00:33:05,919 --> 00:33:09,519
environment is ready to go

871
00:33:07,679 --> 00:33:10,399
now we will talk about how to develop an

872
00:33:09,519 --> 00:33:12,960
implant

873
00:33:10,399 --> 00:33:14,000
and a c2

874
00:33:12,960 --> 00:33:16,159
so

875
00:33:14,000 --> 00:33:17,919
we have microattack techniques and they

876
00:33:16,159 --> 00:33:20,159
are everywhere in the trade intelligence

877
00:33:17,919 --> 00:33:23,440
reports the offensive tools defensive

878
00:33:20,159 --> 00:33:25,360
tools what we need to do is focusing on

879
00:33:23,440 --> 00:33:28,000
what we can do with them

880
00:33:25,360 --> 00:33:31,360
therefore we need to understand what

881
00:33:28,000 --> 00:33:33,120
ideas and what features to be simulated

882
00:33:31,360 --> 00:33:34,240
and we can add them one by one to our

883
00:33:33,120 --> 00:33:36,320
implant

884
00:33:34,240 --> 00:33:38,640
as integrated or

885
00:33:36,320 --> 00:33:41,840
is it standalone binary or standalone

886
00:33:38,640 --> 00:33:44,799
feature that can run together

887
00:33:41,840 --> 00:33:46,159
so let's start with how we should design

888
00:33:44,799 --> 00:33:48,240
our implant

889
00:33:46,159 --> 00:33:49,760
our implant may have some various

890
00:33:48,240 --> 00:33:52,399
features

891
00:33:49,760 --> 00:33:54,720
and they can be used for attack

892
00:33:52,399 --> 00:33:58,000
simulation and those features could be

893
00:33:54,720 --> 00:33:59,519
built in or they can work from remote

894
00:33:58,000 --> 00:34:02,000
sources

895
00:33:59,519 --> 00:34:04,080
we have some essentials such as upload

896
00:34:02,000 --> 00:34:07,279
download functionalities or maybe some

897
00:34:04,080 --> 00:34:09,119
certain commas to run whatever we need

898
00:34:07,279 --> 00:34:11,119
constantly

899
00:34:09,119 --> 00:34:13,760
but there must be also some features

900
00:34:11,119 --> 00:34:15,599
capabilities focusing on

901
00:34:13,760 --> 00:34:17,599
the third party tools

902
00:34:15,599 --> 00:34:20,480
they could be dotnet applications

903
00:34:17,599 --> 00:34:22,960
powershell scripts shackles and some

904
00:34:20,480 --> 00:34:25,119
other features as well we don't know we

905
00:34:22,960 --> 00:34:26,879
will just develop our implant on demand

906
00:34:25,119 --> 00:34:28,879
whenever we need some micro attack

907
00:34:26,879 --> 00:34:30,879
techniques we will add those features

908
00:34:28,879 --> 00:34:32,879
using different capabilities

909
00:34:30,879 --> 00:34:34,480
even you can implement beacon object

910
00:34:32,879 --> 00:34:37,359
file both

911
00:34:34,480 --> 00:34:40,159
process as well if you want to add both

912
00:34:37,359 --> 00:34:42,159
process or both interpretation you need

913
00:34:40,159 --> 00:34:44,800
to add some additional layers let's

914
00:34:42,159 --> 00:34:47,040
focus on these base lines and how we can

915
00:34:44,800 --> 00:34:49,679
develop our implant to support a.net

916
00:34:47,040 --> 00:34:52,639
assembly that needs source code maybe

917
00:34:49,679 --> 00:34:54,079
powershell code and also shellcode

918
00:34:52,639 --> 00:34:57,359
itself using different types of

919
00:34:54,079 --> 00:34:58,560
injections moreover we need also lateral

920
00:34:57,359 --> 00:35:00,560
movement

921
00:34:58,560 --> 00:35:03,200
this means we need to also focus on some

922
00:35:00,560 --> 00:35:05,280
of the networking facts as well

923
00:35:03,200 --> 00:35:07,680
that's why lateral movement compromise

924
00:35:05,280 --> 00:35:09,359
and maybe impact implant linking will be

925
00:35:07,680 --> 00:35:11,920
necessary

926
00:35:09,359 --> 00:35:14,480
our implant will need to get multiple

927
00:35:11,920 --> 00:35:16,400
stages and instructions from web so

928
00:35:14,480 --> 00:35:18,640
there are some different types of

929
00:35:16,400 --> 00:35:20,800
um cto's

930
00:35:18,640 --> 00:35:23,200
the first cd type is

931
00:35:20,800 --> 00:35:26,400
just discovering things

932
00:35:23,200 --> 00:35:28,480
it's more like non-interactive c2

933
00:35:26,400 --> 00:35:31,119
and it will help you to identify the

934
00:35:28,480 --> 00:35:33,520
target whether target is in scope or not

935
00:35:31,119 --> 00:35:35,520
such as the solar gate exercise it may

936
00:35:33,520 --> 00:35:37,760
help you to get the initial instructions

937
00:35:35,520 --> 00:35:39,920
such as register yourself or this is

938
00:35:37,760 --> 00:35:41,760
your situ

939
00:35:39,920 --> 00:35:44,240
and they can be everywhere

940
00:35:41,760 --> 00:35:46,400
for example a social media and maybe a

941
00:35:44,240 --> 00:35:47,920
twitter tag as well

942
00:35:46,400 --> 00:35:50,960
and nobody will

943
00:35:47,920 --> 00:35:53,920
see or identify what would happen until

944
00:35:50,960 --> 00:35:56,640
someone actually to be using that tag or

945
00:35:53,920 --> 00:35:59,280
it can follow up a general tag and it

946
00:35:56,640 --> 00:36:02,079
could seek for some certain instruction

947
00:35:59,280 --> 00:36:03,760
and this has been done by tool anyway

948
00:36:02,079 --> 00:36:06,160
the other type of c2 is important

949
00:36:03,760 --> 00:36:09,040
because we need to now communicate not

950
00:36:06,160 --> 00:36:10,720
in real time maybe but we need to push

951
00:36:09,040 --> 00:36:13,040
out some data

952
00:36:10,720 --> 00:36:17,599
for the implant so if that will run it

953
00:36:13,040 --> 00:36:20,640
and would send some issues or maybe some

954
00:36:17,599 --> 00:36:22,240
tasks or maybe loot as well

955
00:36:20,640 --> 00:36:25,040
in this case it is important to

956
00:36:22,240 --> 00:36:28,560
understand what implant can do

957
00:36:25,040 --> 00:36:30,560
but also to understand what we want to

958
00:36:28,560 --> 00:36:32,400
do through this protocol

959
00:36:30,560 --> 00:36:35,440
based on those requirements we can use

960
00:36:32,400 --> 00:36:36,960
http or http websocket dns or similar

961
00:36:35,440 --> 00:36:39,359
protocols

962
00:36:36,960 --> 00:36:41,440
and it is called tasking

963
00:36:39,359 --> 00:36:43,040
and task management

964
00:36:41,440 --> 00:36:46,800
another type of

965
00:36:43,040 --> 00:36:49,359
cto protocol is payload servers

966
00:36:46,800 --> 00:36:52,079
and they are there to deploy additional

967
00:36:49,359 --> 00:36:54,400
stages if you want to deploy your second

968
00:36:52,079 --> 00:36:56,560
third stage malware or some dangerous

969
00:36:54,400 --> 00:36:58,880
binaries through your c2

970
00:36:56,560 --> 00:37:02,000
probably you will burn your c2

971
00:36:58,880 --> 00:37:03,760
therefore we use also payload servers

972
00:37:02,000 --> 00:37:05,680
and the payload server

973
00:37:03,760 --> 00:37:08,400
serves some additional stages for the

974
00:37:05,680 --> 00:37:10,640
implants such as some dlls some shell

975
00:37:08,400 --> 00:37:12,079
code or etc but they need to be also

976
00:37:10,640 --> 00:37:13,920
encrypted

977
00:37:12,079 --> 00:37:17,359
in some cases we see all of them

978
00:37:13,920 --> 00:37:19,920
combined and some advanced uh actually

979
00:37:17,359 --> 00:37:21,920
advisories we see them distributed to

980
00:37:19,920 --> 00:37:24,240
different decker containers different

981
00:37:21,920 --> 00:37:27,359
servers or maybe already compromised

982
00:37:24,240 --> 00:37:29,920
components or companies

983
00:37:27,359 --> 00:37:32,640
now if we want to build a new plant we

984
00:37:29,920 --> 00:37:35,280
need to start with some gadgets

985
00:37:32,640 --> 00:37:36,640
something must be there already and this

986
00:37:35,280 --> 00:37:40,320
can be

987
00:37:36,640 --> 00:37:43,520
actually a gadget list or pre-used code

988
00:37:40,320 --> 00:37:46,400
msdn is quite helpful and i use mstn to

989
00:37:43,520 --> 00:37:49,040
build we know the api code or some

990
00:37:46,400 --> 00:37:50,800
simple actually instructions

991
00:37:49,040 --> 00:37:52,640
but also there are really good

992
00:37:50,800 --> 00:37:55,920
researchers in the wild and their

993
00:37:52,640 --> 00:37:58,640
repositories are quite impressive

994
00:37:55,920 --> 00:38:00,720
if they're licensed at laws and if you

995
00:37:58,640 --> 00:38:03,200
show your respect to those

996
00:38:00,720 --> 00:38:05,839
authors and researchers you can use

997
00:38:03,200 --> 00:38:08,160
their samples in your implant to work

998
00:38:05,839 --> 00:38:09,920
out and if you have improvements please

999
00:38:08,160 --> 00:38:12,320
share with those researchers to improve

1000
00:38:09,920 --> 00:38:14,560
their work as well

1001
00:38:12,320 --> 00:38:17,440
for this perspective we generally focus

1002
00:38:14,560 --> 00:38:20,560
on the gadgets what we can use can we

1003
00:38:17,440 --> 00:38:23,839
make it a function can be implemented

1004
00:38:20,560 --> 00:38:26,000
in our implant in our malware okay

1005
00:38:23,839 --> 00:38:28,640
so there are several examples out there

1006
00:38:26,000 --> 00:38:32,400
in atomic writing repositories or

1007
00:38:28,640 --> 00:38:34,880
individual research repositories

1008
00:38:32,400 --> 00:38:36,880
registry it is one common feature we

1009
00:38:34,880 --> 00:38:38,880
need registry is important because we

1010
00:38:36,880 --> 00:38:41,760
need to add some registry keys or remove

1011
00:38:38,880 --> 00:38:43,599
some for different purposes persistency

1012
00:38:41,760 --> 00:38:46,160
is one of those but there are also

1013
00:38:43,599 --> 00:38:47,920
privilege escalation com hijacking

1014
00:38:46,160 --> 00:38:50,160
lateral movement techniques they are

1015
00:38:47,920 --> 00:38:51,680
there and they involve some registry

1016
00:38:50,160 --> 00:38:53,359
operations

1017
00:38:51,680 --> 00:38:56,079
to do that we need to understand how

1018
00:38:53,359 --> 00:38:59,119
registry works that's why registry basis

1019
00:38:56,079 --> 00:39:01,839
uh dictionary in this example

1020
00:38:59,119 --> 00:39:04,800
shows you what registry keys could be

1021
00:39:01,839 --> 00:39:07,520
used in hierarchy and how we can create

1022
00:39:04,800 --> 00:39:10,800
one or how we can work with that

1023
00:39:07,520 --> 00:39:13,760
and whenever we learn how to create how

1024
00:39:10,800 --> 00:39:16,079
to delete how to work on the registry

1025
00:39:13,760 --> 00:39:18,240
keys or the values

1026
00:39:16,079 --> 00:39:20,160
that would help us to build our implants

1027
00:39:18,240 --> 00:39:22,880
additional capabilities

1028
00:39:20,160 --> 00:39:25,760
so we need to make this a standalone

1029
00:39:22,880 --> 00:39:27,920
class or an integrated class or maybe a

1030
00:39:25,760 --> 00:39:30,240
third-party feature whenever necessary

1031
00:39:27,920 --> 00:39:31,520
we can load this from remote

1032
00:39:30,240 --> 00:39:34,400
but it is

1033
00:39:31,520 --> 00:39:37,119
used for several different purposes so

1034
00:39:34,400 --> 00:39:39,440
we implement this part

1035
00:39:37,119 --> 00:39:41,920
another one is also the process

1036
00:39:39,440 --> 00:39:44,480
it is important to understand how the

1037
00:39:41,920 --> 00:39:46,079
process things work because we need to

1038
00:39:44,480 --> 00:39:48,320
run some commands

1039
00:39:46,079 --> 00:39:51,119
as an implant we can simply run some

1040
00:39:48,320 --> 00:39:54,000
commands such as where my calcan etc or

1041
00:39:51,119 --> 00:39:56,560
notepad and they can be used for let's

1042
00:39:54,000 --> 00:39:59,599
say open book exercises to generate some

1043
00:39:56,560 --> 00:40:02,240
indicators of compromise but if we need

1044
00:39:59,599 --> 00:40:03,920
to go subtle we need to use some

1045
00:40:02,240 --> 00:40:05,920
additional features here such as

1046
00:40:03,920 --> 00:40:08,160
changing the startup parameters and

1047
00:40:05,920 --> 00:40:11,760
working on the process components but

1048
00:40:08,160 --> 00:40:13,440
this really helps us to run some commons

1049
00:40:11,760 --> 00:40:15,520
in this environment we can make it a

1050
00:40:13,440 --> 00:40:17,680
single liner or we can make it a bit

1051
00:40:15,520 --> 00:40:20,880
custom that helps us to give some

1052
00:40:17,680 --> 00:40:22,800
parameters and commands as well

1053
00:40:20,880 --> 00:40:25,680
one another requirement is the

1054
00:40:22,800 --> 00:40:30,000
encryption as our implant will retrieve

1055
00:40:25,680 --> 00:40:32,640
some data from the victim to our server

1056
00:40:30,000 --> 00:40:34,400
it is important to hide this data

1057
00:40:32,640 --> 00:40:36,319
in the cloud environments and insecure

1058
00:40:34,400 --> 00:40:37,359
networks we don't want to reveal the

1059
00:40:36,319 --> 00:40:39,359
data

1060
00:40:37,359 --> 00:40:41,839
without any intention

1061
00:40:39,359 --> 00:40:42,960
another problem there is we will need to

1062
00:40:41,839 --> 00:40:45,680
use

1063
00:40:42,960 --> 00:40:47,599
encryption to hide activities sorry hide

1064
00:40:45,680 --> 00:40:49,440
our malicious activities

1065
00:40:47,599 --> 00:40:51,680
some of our malicious activities will be

1066
00:40:49,440 --> 00:40:54,240
in the source code itself for example

1067
00:40:51,680 --> 00:40:56,160
hiding a kind of shell code or some of

1068
00:40:54,240 --> 00:40:58,880
those would be on the network such as

1069
00:40:56,160 --> 00:41:03,040
rct communication so encryption helps us

1070
00:40:58,880 --> 00:41:05,680
to harness this layer and make it none

1071
00:41:03,040 --> 00:41:08,079
let's say non-readable or

1072
00:41:05,680 --> 00:41:09,599
not easy to decode or not easy to

1073
00:41:08,079 --> 00:41:11,040
decorate

1074
00:41:09,599 --> 00:41:13,440
the problem there is

1075
00:41:11,040 --> 00:41:14,319
what encryption type we use

1076
00:41:13,440 --> 00:41:16,000
because

1077
00:41:14,319 --> 00:41:19,359
if we use symmetrical encryption our

1078
00:41:16,000 --> 00:41:22,000
implant will need a key hard coded or

1079
00:41:19,359 --> 00:41:24,079
during session we need to push it out

1080
00:41:22,000 --> 00:41:26,960
that will reveal the key and that will

1081
00:41:24,079 --> 00:41:29,520
be actually leading to a full compromise

1082
00:41:26,960 --> 00:41:31,520
and full decode of the implant

1083
00:41:29,520 --> 00:41:33,200
instead of this we can always use public

1084
00:41:31,520 --> 00:41:36,079
key private key encryption

1085
00:41:33,200 --> 00:41:37,920
so it is a kind of choice for you and

1086
00:41:36,079 --> 00:41:40,160
this is easier implementation of the

1087
00:41:37,920 --> 00:41:42,240
symmetrical encryption so you can use

1088
00:41:40,160 --> 00:41:44,160
this with the keys and keys can be

1089
00:41:42,240 --> 00:41:46,560
generated per session when the client

1090
00:41:44,160 --> 00:41:49,359
arrives when the client connects so this

1091
00:41:46,560 --> 00:41:51,680
will give you at least an option uh to

1092
00:41:49,359 --> 00:41:53,599
keep the key in memory instead of

1093
00:41:51,680 --> 00:41:56,319
hardcore in decline

1094
00:41:53,599 --> 00:41:58,720
in the implant itself

1095
00:41:56,319 --> 00:42:00,560
another one is also we need to retrieve

1096
00:41:58,720 --> 00:42:03,280
this instruction list or the content

1097
00:42:00,560 --> 00:42:06,240
from remote that's why we use some web

1098
00:42:03,280 --> 00:42:08,079
client or web socas or similar features

1099
00:42:06,240 --> 00:42:10,480
the problem there is

1100
00:42:08,079 --> 00:42:12,240
we don't know what we would retrieve

1101
00:42:10,480 --> 00:42:13,680
that's why we need to handle this very

1102
00:42:12,240 --> 00:42:16,640
carefully

1103
00:42:13,680 --> 00:42:20,079
we use a circuit.net features in this

1104
00:42:16,640 --> 00:42:22,240
case uh circuit.net will have web client

1105
00:42:20,079 --> 00:42:25,839
for us when we create a web client it

1106
00:42:22,240 --> 00:42:28,480
will give us some features such as

1107
00:42:25,839 --> 00:42:31,599
proxy options such as create cache

1108
00:42:28,480 --> 00:42:34,400
cached credentials so we can assume that

1109
00:42:31,599 --> 00:42:37,040
the user already had credentials before

1110
00:42:34,400 --> 00:42:38,160
us before we arrive and we can start

1111
00:42:37,040 --> 00:42:40,319
using it

1112
00:42:38,160 --> 00:42:42,720
that means we don't need authentication

1113
00:42:40,319 --> 00:42:44,880
that would make things easier but for

1114
00:42:42,720 --> 00:42:47,760
this simple implementation creating a

1115
00:42:44,880 --> 00:42:50,000
new web client will suffice

1116
00:42:47,760 --> 00:42:52,480
and from that moment you can just assume

1117
00:42:50,000 --> 00:42:55,280
that just like your interactive menu you

1118
00:42:52,480 --> 00:42:58,880
can use the client to get a file from

1119
00:42:55,280 --> 00:43:00,240
remote and use your own switch case to

1120
00:42:58,880 --> 00:43:02,160
create a branch

1121
00:43:00,240 --> 00:43:03,760
or maybe multiple branches it's up to

1122
00:43:02,160 --> 00:43:06,079
you

1123
00:43:03,760 --> 00:43:08,800
in this case webclient

1124
00:43:06,079 --> 00:43:10,319
may support multiple

1125
00:43:08,800 --> 00:43:12,560
actually multiple functions for your

1126
00:43:10,319 --> 00:43:14,079
multiple methods one of those is

1127
00:43:12,560 --> 00:43:15,440
download data and the second one is

1128
00:43:14,079 --> 00:43:16,960
download string

1129
00:43:15,440 --> 00:43:19,440
we use those two

1130
00:43:16,960 --> 00:43:21,440
too often because download data guess

1131
00:43:19,440 --> 00:43:23,200
everything in the byte array and

1132
00:43:21,440 --> 00:43:25,119
download string will give everything in

1133
00:43:23,200 --> 00:43:27,119
the string format

1134
00:43:25,119 --> 00:43:30,000
we use download data because because it

1135
00:43:27,119 --> 00:43:32,720
is uh less monitored or less understood

1136
00:43:30,000 --> 00:43:35,440
as it is by the array so we can get this

1137
00:43:32,720 --> 00:43:38,400
right array and we can process it if you

1138
00:43:35,440 --> 00:43:40,960
get the assembly as string and try to

1139
00:43:38,400 --> 00:43:43,839
parse it and also run it that will not

1140
00:43:40,960 --> 00:43:46,000
work instead if this is a byte data and

1141
00:43:43,839 --> 00:43:47,520
try to process this and then load this

1142
00:43:46,000 --> 00:43:49,280
assembly

1143
00:43:47,520 --> 00:43:50,880
of course loading assembly will require

1144
00:43:49,280 --> 00:43:52,240
another function for you that we will

1145
00:43:50,880 --> 00:43:53,839
discuss shortly

1146
00:43:52,240 --> 00:43:55,680
but if you want to enrich your web

1147
00:43:53,839 --> 00:43:57,839
client there is also an advanced feature

1148
00:43:55,680 --> 00:43:59,920
for it so we can always use web request

1149
00:43:57,839 --> 00:44:02,480
instead of web client web requests will

1150
00:43:59,920 --> 00:44:05,200
give you multiple options for example

1151
00:44:02,480 --> 00:44:06,880
communicate through the headers only

1152
00:44:05,200 --> 00:44:09,440
that is useful for the cloud

1153
00:44:06,880 --> 00:44:11,760
environments if you want to deploy your

1154
00:44:09,440 --> 00:44:14,800
c2 as a serverless application to the

1155
00:44:11,760 --> 00:44:18,319
cloud services you would prefer to use

1156
00:44:14,800 --> 00:44:20,319
some certain headers for example aws

1157
00:44:18,319 --> 00:44:22,720
other or google headers in your

1158
00:44:20,319 --> 00:44:25,359
communication to make it

1159
00:44:22,720 --> 00:44:27,920
let's say not easy to understand or not

1160
00:44:25,359 --> 00:44:30,160
easy to spot and you can basic foreign

1161
00:44:27,920 --> 00:44:33,599
code the content or maybe just encrypt

1162
00:44:30,160 --> 00:44:33,599
the content for this purpose

1163
00:44:34,240 --> 00:44:39,280
another uh type of uh requirement here

1164
00:44:37,119 --> 00:44:41,119
is actually to understand the flow

1165
00:44:39,280 --> 00:44:43,920
itself that's why sometimes you need to

1166
00:44:41,119 --> 00:44:46,240
use also the response and stream because

1167
00:44:43,920 --> 00:44:48,079
download data and download string will

1168
00:44:46,240 --> 00:44:49,839
give the data like this

1169
00:44:48,079 --> 00:44:51,920
but when you start dealing with the web

1170
00:44:49,839 --> 00:44:53,680
request you don't know how to deal with

1171
00:44:51,920 --> 00:44:55,680
the data because data will be even a

1172
00:44:53,680 --> 00:44:58,000
stream so you need to make it a stream

1173
00:44:55,680 --> 00:45:01,680
you need to handle the data properly to

1174
00:44:58,000 --> 00:45:01,680
not lose any content on the way

1175
00:45:02,640 --> 00:45:06,319
as i imagine that you can get a kind of

1176
00:45:04,480 --> 00:45:08,800
binary from remote but you need to run

1177
00:45:06,319 --> 00:45:10,880
it right that's why you use system

1178
00:45:08,800 --> 00:45:12,560
reflection assembly just like in the

1179
00:45:10,880 --> 00:45:14,560
powershell because it is also that net

1180
00:45:12,560 --> 00:45:17,040
feature available on powershell as well

1181
00:45:14,560 --> 00:45:20,319
as dotnet as well as c sharp so you can

1182
00:45:17,040 --> 00:45:23,200
still use system reflection glass for

1183
00:45:20,319 --> 00:45:26,000
this feature and you can use load

1184
00:45:23,200 --> 00:45:29,119
method to load an assembly from remote

1185
00:45:26,000 --> 00:45:30,079
or local whatever you do but i made this

1186
00:45:29,119 --> 00:45:32,800
function

1187
00:45:30,079 --> 00:45:35,520
for an easy access because whenever you

1188
00:45:32,800 --> 00:45:37,680
give a byte array it will load this and

1189
00:45:35,520 --> 00:45:40,400
run with the parameters there but you

1190
00:45:37,680 --> 00:45:42,800
can make the parameters uh also a

1191
00:45:40,400 --> 00:45:44,720
variable and you can put this in the

1192
00:45:42,800 --> 00:45:46,880
function there as well but this kind of

1193
00:45:44,720 --> 00:45:49,119
homework for you you can easily copy and

1194
00:45:46,880 --> 00:45:52,000
paste it there and you can look for any

1195
00:45:49,119 --> 00:45:54,079
parameters or any arguments given to run

1196
00:45:52,000 --> 00:45:56,800
because you can pass it through

1197
00:45:54,079 --> 00:45:56,800
it's up to you

1198
00:45:57,119 --> 00:46:03,119
also there is another option here

1199
00:45:59,680 --> 00:46:04,800
in that net core there is roslyn and in

1200
00:46:03,119 --> 00:46:07,920
that net framework we have

1201
00:46:04,800 --> 00:46:09,040
actually a c code provider for the

1202
00:46:07,920 --> 00:46:11,440
for

1203
00:46:09,040 --> 00:46:14,800
net compile features that means we can

1204
00:46:11,440 --> 00:46:17,200
compile c sharp code or simply.net

1205
00:46:14,800 --> 00:46:19,920
source code in memory

1206
00:46:17,200 --> 00:46:22,319
with providing no artifacts no files no

1207
00:46:19,920 --> 00:46:25,200
executables only in memory is a kind of

1208
00:46:22,319 --> 00:46:28,079
variable or a kind of data for us

1209
00:46:25,200 --> 00:46:30,079
roslin or a c sharp code provider will

1210
00:46:28,079 --> 00:46:32,800
work for us but it really depends on

1211
00:46:30,079 --> 00:46:34,400
what that net version you use and on

1212
00:46:32,800 --> 00:46:37,119
which platform

1213
00:46:34,400 --> 00:46:40,480
because it is not good for all platforms

1214
00:46:37,119 --> 00:46:43,119
and it doesn't work exactly as expected

1215
00:46:40,480 --> 00:46:44,880
in this case uh the provided example is

1216
00:46:43,119 --> 00:46:46,960
for that net framework so you can use

1217
00:46:44,880 --> 00:46:50,000
this on windows.net framework

1218
00:46:46,960 --> 00:46:52,400
environment to compile the given c sharp

1219
00:46:50,000 --> 00:46:54,000
in memory and make it an assembly and

1220
00:46:52,400 --> 00:46:56,640
load this and run it

1221
00:46:54,000 --> 00:46:59,520
the lines are explained in the comments

1222
00:46:56,640 --> 00:47:00,400
anyway so that's a good one

1223
00:46:59,520 --> 00:47:03,040
so

1224
00:47:00,400 --> 00:47:05,359
it is your exercise time i will give you

1225
00:47:03,040 --> 00:47:07,839
another hint here but this time it will

1226
00:47:05,359 --> 00:47:10,720
be extended because i don't know how you

1227
00:47:07,839 --> 00:47:12,720
want to go but i have different options

1228
00:47:10,720 --> 00:47:14,960
for you the option one is you can

1229
00:47:12,720 --> 00:47:17,359
download a simple text file and

1230
00:47:14,960 --> 00:47:20,160
understand that okay there's a content

1231
00:47:17,359 --> 00:47:22,720
here let's say c2 instructions given by

1232
00:47:20,160 --> 00:47:24,559
a server how can i run it

1233
00:47:22,720 --> 00:47:25,440
or you can actually

1234
00:47:24,559 --> 00:47:27,839
go

1235
00:47:25,440 --> 00:47:30,240
one step further and say that okay these

1236
00:47:27,839 --> 00:47:32,240
are the instructions can i load

1237
00:47:30,240 --> 00:47:34,640
anything else from remote any new

1238
00:47:32,240 --> 00:47:35,839
modules or something like that and one

1239
00:47:34,640 --> 00:47:37,680
more

1240
00:47:35,839 --> 00:47:40,559
let's make it for example download a

1241
00:47:37,680 --> 00:47:41,280
text file discover c2 download stages

1242
00:47:40,559 --> 00:47:43,119
and

1243
00:47:41,280 --> 00:47:45,680
start digging and run interactive in

1244
00:47:43,119 --> 00:47:47,280
real time implant and c2

1245
00:47:45,680 --> 00:47:48,400
so the problem there is how we can fit

1246
00:47:47,280 --> 00:47:50,079
everything in

1247
00:47:48,400 --> 00:47:52,240
let's say 15 minutes

1248
00:47:50,079 --> 00:47:54,720
that's not always possible so i will

1249
00:47:52,240 --> 00:47:57,119
assist you i show some code segments and

1250
00:47:54,720 --> 00:47:58,480
gadgets i have put in your chapter 2

1251
00:47:57,119 --> 00:48:01,280
folder

1252
00:47:58,480 --> 00:48:03,839
so let's start with that

1253
00:48:01,280 --> 00:48:06,640
firstly this is our environment and we

1254
00:48:03,839 --> 00:48:09,839
see the chapter 2 here the chapter 2

1255
00:48:06,640 --> 00:48:11,839
has multiple examples for us and some of

1256
00:48:09,839 --> 00:48:13,680
those are highly important and let's

1257
00:48:11,839 --> 00:48:16,720
start with the simple ones for example

1258
00:48:13,680 --> 00:48:19,200
the process check is a class and it has

1259
00:48:16,720 --> 00:48:20,960
a method there it is a function and it

1260
00:48:19,200 --> 00:48:23,680
is process running

1261
00:48:20,960 --> 00:48:26,079
so if you want to move this class to

1262
00:48:23,680 --> 00:48:28,800
your code you can easily access this

1263
00:48:26,079 --> 00:48:30,000
using process check that is process open

1264
00:48:28,800 --> 00:48:32,160
and explore

1265
00:48:30,000 --> 00:48:33,599
and it will find explorer if there is a

1266
00:48:32,160 --> 00:48:36,000
process like that

1267
00:48:33,599 --> 00:48:38,160
so it would help you to understand what

1268
00:48:36,000 --> 00:48:40,400
process is running another one is web

1269
00:48:38,160 --> 00:48:42,240
client you will need to download

1270
00:48:40,400 --> 00:48:45,040
something from remote right

1271
00:48:42,240 --> 00:48:48,079
that's your example it accepts some

1272
00:48:45,040 --> 00:48:51,280
arguments but arguments must be in an

1273
00:48:48,079 --> 00:48:52,720
order the console rightline help

1274
00:48:51,280 --> 00:48:56,480
actually shows you the options for

1275
00:48:52,720 --> 00:48:58,800
example url asm source and file asm file

1276
00:48:56,480 --> 00:49:01,040
source so simply you need to create a

1277
00:48:58,800 --> 00:49:02,880
web client if you want to deal with the

1278
00:49:01,040 --> 00:49:05,040
remote because the instructions and the

1279
00:49:02,880 --> 00:49:06,800
content will be coming from remote

1280
00:49:05,040 --> 00:49:09,040
and you need to also create some

1281
00:49:06,800 --> 00:49:11,359
variables for byte

1282
00:49:09,040 --> 00:49:13,520
data which would be assembly or source

1283
00:49:11,359 --> 00:49:14,319
code which could be string

1284
00:49:13,520 --> 00:49:16,240
and

1285
00:49:14,319 --> 00:49:18,319
you need to parse the instruction if

1286
00:49:16,240 --> 00:49:20,480
instruction is url that means you need

1287
00:49:18,319 --> 00:49:23,520
web client and get this from remote if

1288
00:49:20,480 --> 00:49:25,520
it matches with asm you should expect a

1289
00:49:23,520 --> 00:49:27,760
kind of assembly coming that's why you

1290
00:49:25,520 --> 00:49:30,559
have to use byte array and download data

1291
00:49:27,760 --> 00:49:32,480
and your function is a exec.net assembly

1292
00:49:30,559 --> 00:49:34,480
as i already shown you

1293
00:49:32,480 --> 00:49:36,559
it is there to pass this if it is

1294
00:49:34,480 --> 00:49:39,280
darkness source code you can use dotnet

1295
00:49:36,559 --> 00:49:42,000
actually uh download string

1296
00:49:39,280 --> 00:49:43,599
for uh web client but it can be also a

1297
00:49:42,000 --> 00:49:45,839
kind of battery download data and you

1298
00:49:43,599 --> 00:49:48,160
can convert this using encoding as well

1299
00:49:45,839 --> 00:49:51,520
but that's an option

1300
00:49:48,160 --> 00:49:53,599
file also shows you another option

1301
00:49:51,520 --> 00:49:55,599
and reading a file or reading your

1302
00:49:53,599 --> 00:49:57,440
content writing your content

1303
00:49:55,599 --> 00:49:59,680
so you now know that there's a kind of

1304
00:49:57,440 --> 00:50:02,640
class for you for the

1305
00:49:59,680 --> 00:50:05,200
file i o options

1306
00:50:02,640 --> 00:50:07,920
so simply you have these options but you

1307
00:50:05,200 --> 00:50:10,000
need also those functions in your code

1308
00:50:07,920 --> 00:50:12,240
in the same name space

1309
00:50:10,000 --> 00:50:14,800
so in this case compile.net source the

1310
00:50:12,240 --> 00:50:18,240
function i have shown you is here to

1311
00:50:14,800 --> 00:50:19,280
compile and run the c-sharp.net source

1312
00:50:18,240 --> 00:50:21,280
code

1313
00:50:19,280 --> 00:50:22,960
of course references will be a kind of

1314
00:50:21,280 --> 00:50:25,040
trouble so you need to adjust the

1315
00:50:22,960 --> 00:50:27,920
references and you should make it a kind

1316
00:50:25,040 --> 00:50:30,400
of area as well it is same for exact.net

1317
00:50:27,920 --> 00:50:32,720
assembly so it is up to you how to

1318
00:50:30,400 --> 00:50:35,680
improve those but it will work for the

1319
00:50:32,720 --> 00:50:38,319
simplex examples

1320
00:50:35,680 --> 00:50:40,400
one more thing is important because our

1321
00:50:38,319 --> 00:50:42,720
normal client will retrieve something

1322
00:50:40,400 --> 00:50:45,599
and start working on it what if we want

1323
00:50:42,720 --> 00:50:48,000
real-time communication that's

1324
00:50:45,599 --> 00:50:48,960
actually that's our reason for websocket

1325
00:50:48,000 --> 00:50:51,440
implant

1326
00:50:48,960 --> 00:50:53,280
and this website implant is quite simple

1327
00:50:51,440 --> 00:50:55,760
it creates a web circuit client this

1328
00:50:53,280 --> 00:50:58,319
time and it tries to connect a certain

1329
00:50:55,760 --> 00:51:01,440
service given and if the web circuit is

1330
00:50:58,319 --> 00:51:04,240
open it receives the instruction it

1331
00:51:01,440 --> 00:51:08,000
processes the instruction and after that

1332
00:51:04,240 --> 00:51:10,319
it actually sends the data as a result

1333
00:51:08,000 --> 00:51:12,640
that's actually a kind of pipe

1334
00:51:10,319 --> 00:51:15,040
that means the server side needs a kind

1335
00:51:12,640 --> 00:51:17,359
of menu to give this data implant needs

1336
00:51:15,040 --> 00:51:19,359
to run this and send this back so we

1337
00:51:17,359 --> 00:51:22,480
need a kind of communication like this

1338
00:51:19,359 --> 00:51:25,280
instruction process on the implant is

1339
00:51:22,480 --> 00:51:27,359
the function we actually use it is the

1340
00:51:25,280 --> 00:51:29,680
interactive menu you were looking for so

1341
00:51:27,359 --> 00:51:31,599
you can put actually everything there

1342
00:51:29,680 --> 00:51:34,240
an instruction process will help you to

1343
00:51:31,599 --> 00:51:36,480
do that the question is where can you

1344
00:51:34,240 --> 00:51:38,319
find the kind of website server that is

1345
00:51:36,480 --> 00:51:41,119
there actually in the same file in the

1346
00:51:38,319 --> 00:51:42,079
same folder website c2 folder has

1347
00:51:41,119 --> 00:51:44,319
program

1348
00:51:42,079 --> 00:51:46,400
cs as well as the websocket service for

1349
00:51:44,319 --> 00:51:47,359
you that means you can create a new web

1350
00:51:46,400 --> 00:51:50,800
socket

1351
00:51:47,359 --> 00:51:52,079
and create actually a kind of menu for

1352
00:51:50,800 --> 00:51:54,400
the user

1353
00:51:52,079 --> 00:51:56,079
and wait for the clients arrive if any

1354
00:51:54,400 --> 00:51:58,880
client arrives

1355
00:51:56,079 --> 00:52:00,880
and you can start actually waiting for

1356
00:51:58,880 --> 00:52:03,200
the input from the user whenever it

1357
00:52:00,880 --> 00:52:05,680
arrives just pass this to the client

1358
00:52:03,200 --> 00:52:07,440
the web success service class is there

1359
00:52:05,680 --> 00:52:10,000
for the general use

1360
00:52:07,440 --> 00:52:12,000
but you need to customize this for ssh

1361
00:52:10,000 --> 00:52:15,359
certificates and some other features as

1362
00:52:12,000 --> 00:52:18,400
well so it is up to you

1363
00:52:15,359 --> 00:52:20,640
so from this moment you have options

1364
00:52:18,400 --> 00:52:23,440
and you can use that so let's compile

1365
00:52:20,640 --> 00:52:26,319
them and see how will they work

1366
00:52:23,440 --> 00:52:29,520
first things first our mcs which is the

1367
00:52:26,319 --> 00:52:32,319
mono uh c sharp compiler will help us to

1368
00:52:29,520 --> 00:52:34,720
compile the web client in this case okay

1369
00:52:32,319 --> 00:52:37,920
and now web client will be the web

1370
00:52:34,720 --> 00:52:40,319
client is designed and it actually

1371
00:52:37,920 --> 00:52:42,079
gives us some options for example

1372
00:52:40,319 --> 00:52:45,119
running some additional features and

1373
00:52:42,079 --> 00:52:47,359
running some additional components

1374
00:52:45,119 --> 00:52:50,800
in this case i'm showing you the c2

1375
00:52:47,359 --> 00:52:52,400
commands i have put in the repository so

1376
00:52:50,800 --> 00:52:55,040
there is a kind of an executable

1377
00:52:52,400 --> 00:52:58,960
there.net binary so let's use web client

1378
00:52:55,040 --> 00:53:01,440
exam it simply says that url asm and

1379
00:52:58,960 --> 00:53:03,839
after that the exact uri

1380
00:53:01,440 --> 00:53:06,720
for the assembly so let's use that for

1381
00:53:03,839 --> 00:53:09,520
example mono that client url asm and

1382
00:53:06,720 --> 00:53:11,040
then that is the exact link of the

1383
00:53:09,520 --> 00:53:13,359
executable

1384
00:53:11,040 --> 00:53:15,520
i'm talking about the rolling by the way

1385
00:53:13,359 --> 00:53:17,280
please don't get confused there

1386
00:53:15,520 --> 00:53:18,960
when we get this it will load the

1387
00:53:17,280 --> 00:53:21,520
assembly and it will run the output is

1388
00:53:18,960 --> 00:53:23,359
coming from the assembly so we have

1389
00:53:21,520 --> 00:53:25,760
something to start right

1390
00:53:23,359 --> 00:53:27,200
so we can build something top of this

1391
00:53:25,760 --> 00:53:29,280
it's up to us

1392
00:53:27,200 --> 00:53:31,440
another one is also important because we

1393
00:53:29,280 --> 00:53:33,839
have some multiple options as mentioned

1394
00:53:31,440 --> 00:53:35,680
if you want to go to interactive patch

1395
00:53:33,839 --> 00:53:37,119
web circuit is a really good one to

1396
00:53:35,680 --> 00:53:40,880
implement this

1397
00:53:37,119 --> 00:53:42,800
and list is start using this example

1398
00:53:40,880 --> 00:53:45,920
let's start working on the web circuit

1399
00:53:42,800 --> 00:53:48,400
implant the vape circuit implant as i uh

1400
00:53:45,920 --> 00:53:50,640
actually demonstrated the code itself it

1401
00:53:48,400 --> 00:53:52,480
is quite easy to understand if you

1402
00:53:50,640 --> 00:53:54,880
understand the classes are coming from

1403
00:53:52,480 --> 00:53:57,200
that net not you developed

1404
00:53:54,880 --> 00:54:00,000
simply it will connect to the server but

1405
00:53:57,200 --> 00:54:03,680
it will require a parameter this time it

1406
00:54:00,000 --> 00:54:06,000
is using ws as the uri start

1407
00:54:03,680 --> 00:54:09,040
what http will work as well because that

1408
00:54:06,000 --> 00:54:11,280
is how websocket class of that networks

1409
00:54:09,040 --> 00:54:14,240
we need to run the server in this time

1410
00:54:11,280 --> 00:54:16,880
and the same folder has website c2 when

1411
00:54:14,240 --> 00:54:18,720
you enter it and when you use dotnet run

1412
00:54:16,880 --> 00:54:21,359
it will actually start

1413
00:54:18,720 --> 00:54:24,319
the website service

1414
00:54:21,359 --> 00:54:26,079
this means you can start listening to

1415
00:54:24,319 --> 00:54:29,200
the port is hardcoded you can change

1416
00:54:26,079 --> 00:54:30,880
this as well port is localhost 5001 it's

1417
00:54:29,200 --> 00:54:32,000
up to you

1418
00:54:30,880 --> 00:54:34,640
and now

1419
00:54:32,000 --> 00:54:36,400
we are looking for this part which is

1420
00:54:34,640 --> 00:54:40,559
quite easy

1421
00:54:36,400 --> 00:54:44,160
same uri and giving this as a parameter

1422
00:54:40,559 --> 00:54:46,640
and of course use mono not like me

1423
00:54:44,160 --> 00:54:48,000
and now they are connected to the cd

1424
00:54:46,640 --> 00:54:50,240
server

1425
00:54:48,000 --> 00:54:52,240
the thing is c2 server

1426
00:54:50,240 --> 00:54:53,599
will need to give commands an implant

1427
00:54:52,240 --> 00:54:55,280
needs to run them

1428
00:54:53,599 --> 00:54:57,839
the commands are not implemented on the

1429
00:54:55,280 --> 00:55:00,079
server side so the server says that yes

1430
00:54:57,839 --> 00:55:02,000
there is a client arrived so i can give

1431
00:55:00,079 --> 00:55:04,880
these commas on the client side we can

1432
00:55:02,000 --> 00:55:06,400
also debug all these features so

1433
00:55:04,880 --> 00:55:08,880
it is easy to understand this

1434
00:55:06,400 --> 00:55:12,240
communication and echo

1435
00:55:08,880 --> 00:55:13,920
a number it will be given by the client

1436
00:55:12,240 --> 00:55:15,440
and run who am i it is coming from the

1437
00:55:13,920 --> 00:55:17,599
client as well

1438
00:55:15,440 --> 00:55:20,240
it is real time communication and

1439
00:55:17,599 --> 00:55:22,079
whenever you hit exit the server as well

1440
00:55:20,240 --> 00:55:24,319
as the client they will just stop

1441
00:55:22,079 --> 00:55:26,720
working you can change the words and it

1442
00:55:24,319 --> 00:55:28,799
can be good as well it's up to you

1443
00:55:26,720 --> 00:55:30,480
so this is how it works

1444
00:55:28,799 --> 00:55:32,400
this is how it works for different

1445
00:55:30,480 --> 00:55:36,000
source types and different c2 and

1446
00:55:32,400 --> 00:55:39,280
implant types what you need to do is now

1447
00:55:36,000 --> 00:55:42,000
enriching the switch cases

1448
00:55:39,280 --> 00:55:44,720
and using branching your favor

1449
00:55:42,000 --> 00:55:47,440
and you need some classes there and you

1450
00:55:44,720 --> 00:55:49,440
need some code segments and

1451
00:55:47,440 --> 00:55:52,880
they are in this chapter 2 folder so you

1452
00:55:49,440 --> 00:55:55,760
can work on it and you can enrich it

1453
00:55:52,880 --> 00:55:58,160
okay i will be on the discord of

1454
00:55:55,760 --> 00:55:59,119
advisory village now so if you have any

1455
00:55:58,160 --> 00:56:01,359
questions

1456
00:55:59,119 --> 00:56:04,960
we can start working on it and how we

1457
00:56:01,359 --> 00:56:05,680
can go further is in that folder as well

1458
00:56:04,960 --> 00:56:07,440
as

1459
00:56:05,680 --> 00:56:08,880
on discord

1460
00:56:07,440 --> 00:56:10,880
thank you for your time and thank you

1461
00:56:08,880 --> 00:56:14,079
for listening to the chapter 2 of this

1462
00:56:10,880 --> 00:56:14,079
exercise and workshop

1463
00:56:15,040 --> 00:56:19,599
hi i hope you enjoyed your chapter 2

1464
00:56:17,920 --> 00:56:22,079
exercises and

1465
00:56:19,599 --> 00:56:23,760
i hope you already have a sort of

1466
00:56:22,079 --> 00:56:25,680
implant working

1467
00:56:23,760 --> 00:56:27,760
but this time chapter 3 will be a bit

1468
00:56:25,680 --> 00:56:30,079
different because i don't know what type

1469
00:56:27,760 --> 00:56:32,880
of implant you have and what type of

1470
00:56:30,079 --> 00:56:35,040
features you're exactly working on

1471
00:56:32,880 --> 00:56:37,520
that's why i will talk about

1472
00:56:35,040 --> 00:56:39,680
some techniques or capabilities that you

1473
00:56:37,520 --> 00:56:41,440
can add up of your implant

1474
00:56:39,680 --> 00:56:44,319
so this will be more like a kind of

1475
00:56:41,440 --> 00:56:46,400
instructive part but after that i will

1476
00:56:44,319 --> 00:56:48,000
supply some good examples to you that

1477
00:56:46,400 --> 00:56:49,520
you can utilize

1478
00:56:48,000 --> 00:56:51,040
in your implant

1479
00:56:49,520 --> 00:56:53,520
and some of those will be coming from

1480
00:56:51,040 --> 00:56:55,280
the attack implant i have mentioned in

1481
00:56:53,520 --> 00:56:57,440
my presentation

1482
00:56:55,280 --> 00:57:00,559
so now let's start with the windows api

1483
00:56:57,440 --> 00:57:02,160
and how we deal with that

1484
00:57:00,559 --> 00:57:04,480
windows api

1485
00:57:02,160 --> 00:57:06,400
in that net framework

1486
00:57:04,480 --> 00:57:08,319
we use windows api through the

1487
00:57:06,400 --> 00:57:11,280
platforming works

1488
00:57:08,319 --> 00:57:12,960
which are also known as pmox

1489
00:57:11,280 --> 00:57:15,440
platform inbox are available on

1490
00:57:12,960 --> 00:57:17,440
microsoft web page as well as the other

1491
00:57:15,440 --> 00:57:19,200
web pages in a different way because

1492
00:57:17,440 --> 00:57:21,280
microsoft web page

1493
00:57:19,200 --> 00:57:23,760
actually defines how platforming works

1494
00:57:21,280 --> 00:57:24,960
work and supplies some information but

1495
00:57:23,760 --> 00:57:27,599
you need

1496
00:57:24,960 --> 00:57:30,000
actually the platform invoke

1497
00:57:27,599 --> 00:57:31,760
actually the exports converted to that

1498
00:57:30,000 --> 00:57:33,599
net environment

1499
00:57:31,760 --> 00:57:34,720
simply allows us

1500
00:57:33,599 --> 00:57:37,119
to use

1501
00:57:34,720 --> 00:57:39,200
exports of the unmanaged code

1502
00:57:37,119 --> 00:57:41,440
but we need to understand what type of

1503
00:57:39,200 --> 00:57:45,119
variables what type of content they

1504
00:57:41,440 --> 00:57:47,040
expect what type of data is expected to

1505
00:57:45,119 --> 00:57:49,920
do that we need to understand actually

1506
00:57:47,040 --> 00:57:52,160
this as well as defining our code then

1507
00:57:49,920 --> 00:57:54,720
we can use those functions as our

1508
00:57:52,160 --> 00:57:57,119
internal functions

1509
00:57:54,720 --> 00:57:59,760
such as this this one is a good example

1510
00:57:57,119 --> 00:58:02,160
because it is using system runtime inter

1511
00:57:59,760 --> 00:58:05,760
op services because this is how platform

1512
00:58:02,160 --> 00:58:09,119
work works it is using actually user32

1513
00:58:05,760 --> 00:58:11,760
dll which is an internal windows tll and

1514
00:58:09,119 --> 00:58:14,319
it is used for windows api as well and

1515
00:58:11,760 --> 00:58:15,680
it is simply using message back a

1516
00:58:14,319 --> 00:58:17,280
message box

1517
00:58:15,680 --> 00:58:19,520
function

1518
00:58:17,280 --> 00:58:21,040
so what we see here is the first one is

1519
00:58:19,520 --> 00:58:22,960
the extern

1520
00:58:21,040 --> 00:58:25,839
simply defines

1521
00:58:22,960 --> 00:58:28,000
that export for us

1522
00:58:25,839 --> 00:58:31,200
simply we are looking for an export

1523
00:58:28,000 --> 00:58:33,040
called messagebox in the dll named

1524
00:58:31,200 --> 00:58:34,839
user.altitude data

1525
00:58:33,040 --> 00:58:39,359
and those are the

1526
00:58:34,839 --> 00:58:43,119
variables and data formats we expect

1527
00:58:39,359 --> 00:58:45,520
so now we can add our own and we can

1528
00:58:43,119 --> 00:58:49,040
make it working like that

1529
00:58:45,520 --> 00:58:50,640
it is easy if it is only message box

1530
00:58:49,040 --> 00:58:52,640
platform inbox

1531
00:58:50,640 --> 00:58:54,160
actually gives us more opportunities in

1532
00:58:52,640 --> 00:58:56,880
different platforms

1533
00:58:54,160 --> 00:58:59,760
for example if this could be a different

1534
00:58:56,880 --> 00:59:02,400
platform such as mac we will use

1535
00:58:59,760 --> 00:59:04,880
dynamic libraries just like the dlls

1536
00:59:02,400 --> 00:59:07,200
so it is not so different we can still

1537
00:59:04,880 --> 00:59:10,240
use private static or public static

1538
00:59:07,200 --> 00:59:12,799
external and we can just work on it

1539
00:59:10,240 --> 00:59:15,839
the problem there is though

1540
00:59:12,799 --> 00:59:18,720
if you start developing your tools based

1541
00:59:15,839 --> 00:59:21,920
on the apis you know the api or

1542
00:59:18,720 --> 00:59:24,720
mac or linux simply start using

1543
00:59:21,920 --> 00:59:26,400
unmanaged code in your environment

1544
00:59:24,720 --> 00:59:28,400
it will change your code as well as

1545
00:59:26,400 --> 00:59:31,520
programming perspective because it will

1546
00:59:28,400 --> 00:59:34,559
be not a part of your code

1547
00:59:31,520 --> 00:59:36,640
so it it may not be present in the

1548
00:59:34,559 --> 00:59:37,920
targeted environment in the victim

1549
00:59:36,640 --> 00:59:40,240
member

1550
00:59:37,920 --> 00:59:42,240
so you need to make sure that the apis

1551
00:59:40,240 --> 00:59:44,880
you need are available in the target

1552
00:59:42,240 --> 00:59:48,079
operating system otherwise they will be

1553
00:59:44,880 --> 00:59:48,880
there and they will work on mac linux

1554
00:59:48,079 --> 00:59:51,520
and

1555
00:59:48,880 --> 00:59:54,720
windows when you start referring certain

1556
00:59:51,520 --> 00:59:56,960
libraries things change

1557
00:59:54,720 --> 00:59:59,760
it is same for linux as you already see

1558
00:59:56,960 --> 01:00:02,960
it is this time leave c cheryl object

1559
00:59:59,760 --> 01:00:03,920
six so simply you try to get get peed

1560
01:00:02,960 --> 01:00:06,240
and

1561
01:00:03,920 --> 01:00:08,720
it works just like this

1562
01:00:06,240 --> 01:00:10,640
so things slightly

1563
01:00:08,720 --> 01:00:13,599
gets complicated from this moment

1564
01:00:10,640 --> 01:00:15,280
because we use one single dll one single

1565
01:00:13,599 --> 01:00:18,079
actually export

1566
01:00:15,280 --> 01:00:19,599
and if you want to go in different ways

1567
01:00:18,079 --> 01:00:22,240
for example the process injection

1568
01:00:19,599 --> 01:00:25,040
shellcode injection dna injection times

1569
01:00:22,240 --> 01:00:28,400
then we need to use multiple exposed

1570
01:00:25,040 --> 01:00:31,119
multiple windows apis using the right

1571
01:00:28,400 --> 01:00:33,440
content if we use them improperly

1572
01:00:31,119 --> 01:00:36,880
probably our application will crash

1573
01:00:33,440 --> 01:00:39,040
and worst case the process or the target

1574
01:00:36,880 --> 01:00:41,760
operating system will crash so we need

1575
01:00:39,040 --> 01:00:42,720
to be very careful from this moment

1576
01:00:41,760 --> 01:00:45,040
so

1577
01:00:42,720 --> 01:00:46,319
where can we find this information

1578
01:00:45,040 --> 01:00:49,839
though i mean

1579
01:00:46,319 --> 01:00:51,680
how we can understand what uh data types

1580
01:00:49,839 --> 01:00:54,880
are accepted by the targeted export

1581
01:00:51,680 --> 01:00:57,680
targeted unmanaged dll function

1582
01:00:54,880 --> 01:01:01,119
in this case pimwork.net helps us to

1583
01:00:57,680 --> 01:01:02,640
understand those apis and how we can use

1584
01:01:01,119 --> 01:01:04,960
those dlls

1585
01:01:02,640 --> 01:01:07,920
but we can also create all these using

1586
01:01:04,960 --> 01:01:07,920
their tools as well

1587
01:01:08,160 --> 01:01:12,720
this is another example at this time it

1588
01:01:10,559 --> 01:01:14,160
is going a bit complicated not so

1589
01:01:12,720 --> 01:01:15,119
complicated but

1590
01:01:14,160 --> 01:01:17,440
still

1591
01:01:15,119 --> 01:01:21,119
you need to follow this up first things

1592
01:01:17,440 --> 01:01:22,799
first this is a shellcode injection

1593
01:01:21,119 --> 01:01:26,480
this is a good start

1594
01:01:22,799 --> 01:01:29,200
let's focus on how we prepare our uh

1595
01:01:26,480 --> 01:01:30,960
initial part not before we actually we

1596
01:01:29,200 --> 01:01:33,040
need to prepare this part before using

1597
01:01:30,960 --> 01:01:35,839
our functions so it is important to

1598
01:01:33,040 --> 01:01:37,440
understand what api calls we are

1599
01:01:35,839 --> 01:01:39,520
planning to use

1600
01:01:37,440 --> 01:01:43,200
in this case virtual outlook will be

1601
01:01:39,520 --> 01:01:45,760
used to create a memory space for us

1602
01:01:43,200 --> 01:01:47,359
and we can create read only read write

1603
01:01:45,760 --> 01:01:49,520
or read execute

1604
01:01:47,359 --> 01:01:51,359
or read write execute permissions in

1605
01:01:49,520 --> 01:01:53,200
this memory space

1606
01:01:51,359 --> 01:01:55,760
create thread will allow us to create a

1607
01:01:53,200 --> 01:01:58,000
new thread and therefore single object

1608
01:01:55,760 --> 01:02:00,559
we will wait for single object will

1609
01:01:58,000 --> 01:02:03,520
allow us to actually wait for it

1610
01:02:00,559 --> 01:02:07,760
so let's start with that

1611
01:02:03,520 --> 01:02:09,760
if we try to use ritual outlook

1612
01:02:07,760 --> 01:02:11,839
using page read write execute

1613
01:02:09,760 --> 01:02:13,359
permissions it will create a memory

1614
01:02:11,839 --> 01:02:15,200
space for us and it will return the

1615
01:02:13,359 --> 01:02:16,480
function address

1616
01:02:15,200 --> 01:02:18,480
so simply

1617
01:02:16,480 --> 01:02:20,720
now we know that there is a memory space

1618
01:02:18,480 --> 01:02:22,720
created for us and we have the address

1619
01:02:20,720 --> 01:02:25,280
of the pointer of that

1620
01:02:22,720 --> 01:02:27,680
part so we can start using it

1621
01:02:25,280 --> 01:02:30,480
there are two options from this moment

1622
01:02:27,680 --> 01:02:32,799
to pass data to that memory address one

1623
01:02:30,480 --> 01:02:35,119
is the windows api

1624
01:02:32,799 --> 01:02:37,520
i didn't use this in the example but it

1625
01:02:35,119 --> 01:02:39,119
could be used for example write process

1626
01:02:37,520 --> 01:02:40,960
memory

1627
01:02:39,119 --> 01:02:43,520
the second one is the marshall

1628
01:02:40,960 --> 01:02:46,400
marshalling marginal copy that is an

1629
01:02:43,520 --> 01:02:48,640
internal functionality in the net

1630
01:02:46,400 --> 01:02:50,720
the difference between those two is

1631
01:02:48,640 --> 01:02:52,640
actually evasion

1632
01:02:50,720 --> 01:02:55,280
we will discuss this in chapter four but

1633
01:02:52,640 --> 01:02:58,319
this is a kind of simple evasion if the

1634
01:02:55,280 --> 01:03:00,559
edr or antivirus expects for example

1635
01:02:58,319 --> 01:03:03,039
virtual analog then write process memory

1636
01:03:00,559 --> 01:03:05,359
and create remote thread is a pattern

1637
01:03:03,039 --> 01:03:07,280
we simply break this pattern

1638
01:03:05,359 --> 01:03:10,240
we don't use right right process memory

1639
01:03:07,280 --> 01:03:13,200
in this example so this is one of the

1640
01:03:10,240 --> 01:03:15,280
points that we can add for evasion but

1641
01:03:13,200 --> 01:03:16,720
this is only for functionality and use

1642
01:03:15,280 --> 01:03:19,599
for here

1643
01:03:16,720 --> 01:03:22,640
and we use marginal copy

1644
01:03:19,599 --> 01:03:23,359
to push our shell code the byte array

1645
01:03:22,640 --> 01:03:26,240
to

1646
01:03:23,359 --> 01:03:27,680
the given function pointer

1647
01:03:26,240 --> 01:03:31,280
so simply

1648
01:03:27,680 --> 01:03:32,079
we define that shellcode from

1649
01:03:31,280 --> 01:03:34,960
the

1650
01:03:32,079 --> 01:03:37,599
actually zero and this function pointer

1651
01:03:34,960 --> 01:03:39,039
and the length of the shortcut

1652
01:03:37,599 --> 01:03:41,200
so simply

1653
01:03:39,039 --> 01:03:42,880
our data is in the memory

1654
01:03:41,200 --> 01:03:46,160
the problem there is we need to also

1655
01:03:42,880 --> 01:03:48,559
create a thread pointing that part

1656
01:03:46,160 --> 01:03:50,960
so the trade will start and

1657
01:03:48,559 --> 01:03:52,640
it will execute our given child code in

1658
01:03:50,960 --> 01:03:54,960
that memory space

1659
01:03:52,640 --> 01:03:56,400
so create thread will help us to create

1660
01:03:54,960 --> 01:03:58,640
a thread using

1661
01:03:56,400 --> 01:04:00,319
that data that's why we use the

1662
01:03:58,640 --> 01:04:03,520
functional address here

1663
01:04:00,319 --> 01:04:05,599
and then we simply create a new thread

1664
01:04:03,520 --> 01:04:07,200
in our own process

1665
01:04:05,599 --> 01:04:09,359
and we wait for it

1666
01:04:07,200 --> 01:04:11,440
and when it starts

1667
01:04:09,359 --> 01:04:13,920
that's good we have a new thread and the

1668
01:04:11,440 --> 01:04:16,880
shell code executed in the current

1669
01:04:13,920 --> 01:04:20,000
running process if the process exists

1670
01:04:16,880 --> 01:04:21,680
it dies if the process has been killed

1671
01:04:20,000 --> 01:04:23,920
it dies as well

1672
01:04:21,680 --> 01:04:26,160
so this is really important to

1673
01:04:23,920 --> 01:04:28,240
understand because it is still an inline

1674
01:04:26,160 --> 01:04:31,039
code execution

1675
01:04:28,240 --> 01:04:33,440
if we go for remote process

1676
01:04:31,039 --> 01:04:35,920
that will be a different case

1677
01:04:33,440 --> 01:04:37,440
this approach would be still called

1678
01:04:35,920 --> 01:04:39,200
slightly safe

1679
01:04:37,440 --> 01:04:41,440
because you are still in your current

1680
01:04:39,200 --> 01:04:44,559
process you run code in your current

1681
01:04:41,440 --> 01:04:46,240
process and it is a sort of normal

1682
01:04:44,559 --> 01:04:47,839
application behavior

1683
01:04:46,240 --> 01:04:50,640
when you start dealing with the remote

1684
01:04:47,839 --> 01:04:53,280
processes things will change and edrs

1685
01:04:50,640 --> 01:04:55,200
and other things will identify you

1686
01:04:53,280 --> 01:04:58,319
moreover whenever you start using

1687
01:04:55,200 --> 01:05:00,960
teamworks and apis like this the edr's

1688
01:04:58,319 --> 01:05:03,359
edrs will also catch you for the api

1689
01:05:00,960 --> 01:05:05,680
perspective

1690
01:05:03,359 --> 01:05:08,400
now there is another one but this time

1691
01:05:05,680 --> 01:05:09,200
we are using two user apc

1692
01:05:08,400 --> 01:05:11,200
and

1693
01:05:09,200 --> 01:05:14,079
as you imagined those

1694
01:05:11,200 --> 01:05:15,599
functions the apis also have there

1695
01:05:14,079 --> 01:05:17,760
actually definitions before this

1696
01:05:15,599 --> 01:05:20,480
function starts

1697
01:05:17,760 --> 01:05:22,640
let's try to explain lines here it is

1698
01:05:20,480 --> 01:05:25,200
important to understand the base64

1699
01:05:22,640 --> 01:05:27,280
content here normally most of the

1700
01:05:25,200 --> 01:05:28,799
researchers or sample uh

1701
01:05:27,280 --> 01:05:31,039
suppliers or proof of concept

1702
01:05:28,799 --> 01:05:34,079
researchers they put the shell code in

1703
01:05:31,039 --> 01:05:36,720
base64 format to the code or as a byte

1704
01:05:34,079 --> 01:05:41,440
array and it is really easy to spot

1705
01:05:36,720 --> 01:05:44,000
by the antivirus uh or maybe edr tools

1706
01:05:41,440 --> 01:05:46,960
but we can change this approach because

1707
01:05:44,000 --> 01:05:50,160
static analysis is also something and if

1708
01:05:46,960 --> 01:05:52,559
you have the payload that's a bad thing

1709
01:05:50,160 --> 01:05:53,520
simple evasion here is

1710
01:05:52,559 --> 01:05:56,160
just

1711
01:05:53,520 --> 01:05:58,720
placing a random string before the

1712
01:05:56,160 --> 01:06:01,680
base64 content which will break the base

1713
01:05:58,720 --> 01:06:04,799
base64 and then replace it in the next

1714
01:06:01,680 --> 01:06:07,839
line or maybe a few lines after

1715
01:06:04,799 --> 01:06:08,799
simply you will decode this

1716
01:06:07,839 --> 01:06:11,200
you will

1717
01:06:08,799 --> 01:06:12,640
access the real data but under certain

1718
01:06:11,200 --> 01:06:15,599
conditions

1719
01:06:12,640 --> 01:06:17,680
you can make it conditional as well

1720
01:06:15,599 --> 01:06:19,200
for example you can check the hostname

1721
01:06:17,680 --> 01:06:21,280
you can check the cloud

1722
01:06:19,200 --> 01:06:23,119
components you can check the device

1723
01:06:21,280 --> 01:06:25,200
that will help you to understand what

1724
01:06:23,119 --> 01:06:28,240
environment you are working in that is

1725
01:06:25,200 --> 01:06:31,119
also chapter four evasion techniques

1726
01:06:28,240 --> 01:06:33,520
when we deal with the other stuff it is

1727
01:06:31,119 --> 01:06:35,039
similar as well for example in this case

1728
01:06:33,520 --> 01:06:36,319
the process injection the trade

1729
01:06:35,039 --> 01:06:38,480
injection

1730
01:06:36,319 --> 01:06:41,760
to a remote process

1731
01:06:38,480 --> 01:06:44,400
works pretty much like this firstly we

1732
01:06:41,760 --> 01:06:47,280
use another process

1733
01:06:44,400 --> 01:06:49,839
but i'm not doing this to a remote

1734
01:06:47,280 --> 01:06:52,559
process already running we create a new

1735
01:06:49,839 --> 01:06:55,760
process that's the good part

1736
01:06:52,559 --> 01:06:57,599
and that also helps uh us uh in a couple

1737
01:06:55,760 --> 01:07:00,240
of a couple of different ways because we

1738
01:06:57,599 --> 01:07:03,200
can groom it we can just use another

1739
01:07:00,240 --> 01:07:05,920
process as its owner as well but that's

1740
01:07:03,200 --> 01:07:07,039
another example in your folders anyway

1741
01:07:05,920 --> 01:07:10,720
so you may

1742
01:07:07,039 --> 01:07:12,640
actually spoof your current pid

1743
01:07:10,720 --> 01:07:14,799
you can also change a couple of things

1744
01:07:12,640 --> 01:07:16,720
while process is suspended as well

1745
01:07:14,799 --> 01:07:18,640
because you created this process it is

1746
01:07:16,720 --> 01:07:21,039
suspended and is ready for any

1747
01:07:18,640 --> 01:07:22,240
manipulations so you know what state it

1748
01:07:21,039 --> 01:07:24,880
is

1749
01:07:22,240 --> 01:07:26,799
after that dealing with is handler i'm

1750
01:07:24,880 --> 01:07:28,400
creating a new memory space there using

1751
01:07:26,799 --> 01:07:30,319
visual analog

1752
01:07:28,400 --> 01:07:32,400
but this time using right process memory

1753
01:07:30,319 --> 01:07:34,240
to push the data you can still use

1754
01:07:32,400 --> 01:07:36,319
marginal copy but write process memory

1755
01:07:34,240 --> 01:07:38,880
helps here again

1756
01:07:36,319 --> 01:07:41,520
and get process id

1757
01:07:38,880 --> 01:07:43,760
and after that we have process id we

1758
01:07:41,520 --> 01:07:46,240
have threads we are

1759
01:07:43,760 --> 01:07:48,640
using open thread for the trade itself

1760
01:07:46,240 --> 01:07:51,359
and we recover the permissions of the

1761
01:07:48,640 --> 01:07:54,480
memory space using virtual protect this

1762
01:07:51,359 --> 01:07:56,240
time because initially we used read read

1763
01:07:54,480 --> 01:07:58,799
write using virtual outlook but this

1764
01:07:56,240 --> 01:08:01,200
time we make it read executable if we

1765
01:07:58,799 --> 01:08:03,839
don't do that it will fail if we use

1766
01:08:01,200 --> 01:08:06,000
read write execute that will be not good

1767
01:08:03,839 --> 01:08:07,440
for the dev perspective

1768
01:08:06,000 --> 01:08:08,480
so this is

1769
01:08:07,440 --> 01:08:09,680
more

1770
01:08:08,480 --> 01:08:12,319
accurate

1771
01:08:09,680 --> 01:08:14,079
after that we use q user apc

1772
01:08:12,319 --> 01:08:15,520
for this thread so simply the

1773
01:08:14,079 --> 01:08:17,120
application will know that there is

1774
01:08:15,520 --> 01:08:19,199
something waiting here

1775
01:08:17,120 --> 01:08:20,239
and it will process it and it starts

1776
01:08:19,199 --> 01:08:22,719
running

1777
01:08:20,239 --> 01:08:26,239
then we resume the thread and it will

1778
01:08:22,719 --> 01:08:28,719
work so this is how it would work in the

1779
01:08:26,239 --> 01:08:29,920
code perspective

1780
01:08:28,719 --> 01:08:32,239
so

1781
01:08:29,920 --> 01:08:33,600
in this case you need some of those

1782
01:08:32,239 --> 01:08:35,440
examples

1783
01:08:33,600 --> 01:08:36,880
the good part here is attack

1784
01:08:35,440 --> 01:08:40,239
capabilities

1785
01:08:36,880 --> 01:08:42,880
class is supplied in the chapter 3 4

1786
01:08:40,239 --> 01:08:45,040
folders so you can go to the attack

1787
01:08:42,880 --> 01:08:47,040
capabilities to see those

1788
01:08:45,040 --> 01:08:49,359
functionalities they are actually

1789
01:08:47,040 --> 01:08:51,920
enriched they are actually changed for

1790
01:08:49,359 --> 01:08:54,480
example they spoof the parent pid and

1791
01:08:51,920 --> 01:08:57,440
etc when you look at the code you will

1792
01:08:54,480 --> 01:08:59,920
see some improvements there moreover

1793
01:08:57,440 --> 01:09:02,080
as i mentioned some of the net features

1794
01:08:59,920 --> 01:09:03,920
allow us to pass the parameters while

1795
01:09:02,080 --> 01:09:04,719
running the assembly itself which is

1796
01:09:03,920 --> 01:09:06,480
good

1797
01:09:04,719 --> 01:09:08,480
and you can actually see that it is

1798
01:09:06,480 --> 01:09:09,279
implemented in that code it is same for

1799
01:09:08,480 --> 01:09:11,520
the

1800
01:09:09,279 --> 01:09:13,600
actually source code compile

1801
01:09:11,520 --> 01:09:16,880
the exec gives you multiple options for

1802
01:09:13,600 --> 01:09:20,159
the parameters so it is quite useful you

1803
01:09:16,880 --> 01:09:21,759
can either way get this class itself as

1804
01:09:20,159 --> 01:09:24,719
a part of you

1805
01:09:21,759 --> 01:09:26,960
or you can copy that function

1806
01:09:24,719 --> 01:09:28,880
but remember that you need the

1807
01:09:26,960 --> 01:09:31,199
previous definitions

1808
01:09:28,880 --> 01:09:34,159
because they are p marks

1809
01:09:31,199 --> 01:09:35,279
and you can copy to your own code one by

1810
01:09:34,159 --> 01:09:37,600
one

1811
01:09:35,279 --> 01:09:39,839
because patak is in the mit license so

1812
01:09:37,600 --> 01:09:40,880
that's the point you can use it as a

1813
01:09:39,839 --> 01:09:42,960
gadget

1814
01:09:40,880 --> 01:09:46,640
so you can actually extract whatever

1815
01:09:42,960 --> 01:09:49,759
functionality you need from that one

1816
01:09:46,640 --> 01:09:51,679
in addition uh it can run the powershell

1817
01:09:49,759 --> 01:09:53,839
but the powershell is running through

1818
01:09:51,679 --> 01:09:56,800
the system automation system management

1819
01:09:53,839 --> 01:10:00,000
automationdirect is deferred as well as

1820
01:09:56,800 --> 01:10:02,239
necessary when you compile this

1821
01:10:00,000 --> 01:10:06,320
and if you enabled or if you didn't

1822
01:10:02,239 --> 01:10:08,400
remove this powershell automation class

1823
01:10:06,320 --> 01:10:10,880
sorry add a function

1824
01:10:08,400 --> 01:10:13,520
you need to compile with the reference

1825
01:10:10,880 --> 01:10:15,600
of system management automation dll

1826
01:10:13,520 --> 01:10:18,560
which is a good example for you i put

1827
01:10:15,600 --> 01:10:19,600
the dll in the same directory so you can

1828
01:10:18,560 --> 01:10:21,840
see it

1829
01:10:19,600 --> 01:10:24,000
but if you target a specific framework

1830
01:10:21,840 --> 01:10:27,199
version it may not work so you need to

1831
01:10:24,000 --> 01:10:29,920
use nuggets to get the correct version

1832
01:10:27,199 --> 01:10:30,960
of the system management automation dll

1833
01:10:29,920 --> 01:10:32,400
and then

1834
01:10:30,960 --> 01:10:34,880
defer it

1835
01:10:32,400 --> 01:10:37,360
if you want to use specifically that dla

1836
01:10:34,880 --> 01:10:39,520
to work with your implant then you can

1837
01:10:37,360 --> 01:10:40,800
use actually some merging tools such as

1838
01:10:39,520 --> 01:10:43,280
ielt merge

1839
01:10:40,800 --> 01:10:46,320
so there will be one single binary with

1840
01:10:43,280 --> 01:10:48,719
this dll coming so simply it will be a

1841
01:10:46,320 --> 01:10:51,040
part of your functionality

1842
01:10:48,719 --> 01:10:54,400
and you don't need the system to have

1843
01:10:51,040 --> 01:10:57,199
this management automation data

1844
01:10:54,400 --> 01:10:59,840
so the exercises the exercises are

1845
01:10:57,199 --> 01:11:00,640
slightly simple but also complex this

1846
01:10:59,840 --> 01:11:02,640
time

1847
01:11:00,640 --> 01:11:04,560
simple because you will add one or two

1848
01:11:02,640 --> 01:11:06,960
functionalities i assume that you

1849
01:11:04,560 --> 01:11:09,120
already have an implant

1850
01:11:06,960 --> 01:11:10,400
and it can communicate with a web

1851
01:11:09,120 --> 01:11:13,040
service

1852
01:11:10,400 --> 01:11:16,159
using web sockets or a web page using

1853
01:11:13,040 --> 01:11:17,199
web client or a console application with

1854
01:11:16,159 --> 01:11:18,560
the user

1855
01:11:17,199 --> 01:11:21,280
and you already added some

1856
01:11:18,560 --> 01:11:22,960
functionalities there when you

1857
01:11:21,280 --> 01:11:24,159
looked at the chapter folders you

1858
01:11:22,960 --> 01:11:27,520
already found some of the

1859
01:11:24,159 --> 01:11:28,960
functionalities now in this exercise you

1860
01:11:27,520 --> 01:11:32,000
need to extract some of the

1861
01:11:28,960 --> 01:11:34,400
functionalities from attack and use them

1862
01:11:32,000 --> 01:11:37,280
as a gadget and you will understand what

1863
01:11:34,400 --> 01:11:40,080
is missing when you try to extract that

1864
01:11:37,280 --> 01:11:41,199
portion of code because the pinbox

1865
01:11:40,080 --> 01:11:43,360
defined

1866
01:11:41,199 --> 01:11:45,679
will be undefined in your code and the

1867
01:11:43,360 --> 01:11:48,719
compiler will fail

1868
01:11:45,679 --> 01:11:51,199
another thing is you can also add some

1869
01:11:48,719 --> 01:11:52,320
additional functionalities that are not

1870
01:11:51,199 --> 01:11:54,400
exactly

1871
01:11:52,320 --> 01:11:56,880
available in the attack gadgets but they

1872
01:11:54,400 --> 01:11:58,400
are available and also introduced you as

1873
01:11:56,880 --> 01:12:00,960
let's say encrypt and decrypt in the

1874
01:11:58,400 --> 01:12:02,159
previous word actually chapters

1875
01:12:00,960 --> 01:12:04,159
and you can make them a kind of

1876
01:12:02,159 --> 01:12:06,239
ransomware for yourself

1877
01:12:04,159 --> 01:12:08,719
for example encrypt a certain file they

1878
01:12:06,239 --> 01:12:10,640
keep the certain file use a key

1879
01:12:08,719 --> 01:12:12,640
if you remember the encryption and how

1880
01:12:10,640 --> 01:12:15,120
it can be used it can be dangerous as

1881
01:12:12,640 --> 01:12:17,760
well for the ransomware operations right

1882
01:12:15,120 --> 01:12:19,840
so let's start with that

1883
01:12:17,760 --> 01:12:23,360
first things first let's

1884
01:12:19,840 --> 01:12:26,719
work on our environment and

1885
01:12:23,360 --> 01:12:26,719
walk through our source code

1886
01:12:30,159 --> 01:12:34,640
sorry

1887
01:12:31,520 --> 01:12:38,560
yep this is our source code environment

1888
01:12:34,640 --> 01:12:39,520
so simply this uh chapter 3 has examples

1889
01:12:38,560 --> 01:12:40,719
of

1890
01:12:39,520 --> 01:12:43,600
encryption

1891
01:12:40,719 --> 01:12:46,400
as well as our capabilities

1892
01:12:43,600 --> 01:12:49,199
and some pin blocks the pin box are here

1893
01:12:46,400 --> 01:12:52,560
for you to copy and past and to be used

1894
01:12:49,199 --> 01:12:53,360
directly i also i also put the readme

1895
01:12:52,560 --> 01:12:55,679
here

1896
01:12:53,360 --> 01:12:57,840
in case of you need a kind of easy copy

1897
01:12:55,679 --> 01:13:00,400
pass for compile or to understand the

1898
01:12:57,840 --> 01:13:03,199
functionalities one other thing is also

1899
01:13:00,400 --> 01:13:04,960
the shell code here and charcoal invoke

1900
01:13:03,199 --> 01:13:07,920
that will help you to

1901
01:13:04,960 --> 01:13:10,239
actually inject a shell code to the

1902
01:13:07,920 --> 01:13:12,239
environment virtual outlook create

1903
01:13:10,239 --> 01:13:13,440
thread wait for single object these are

1904
01:13:12,239 --> 01:13:14,640
the example

1905
01:13:13,440 --> 01:13:18,000
actually

1906
01:13:14,640 --> 01:13:19,040
our examples previously mentioned

1907
01:13:18,000 --> 01:13:22,560
and this

1908
01:13:19,040 --> 01:13:25,040
can be actually utilized like

1909
01:13:22,560 --> 01:13:26,000
normal console applications or any other

1910
01:13:25,040 --> 01:13:28,080
example

1911
01:13:26,000 --> 01:13:31,040
if you remember your hello

1912
01:13:28,080 --> 01:13:33,760
example hello exa hello exo was actually

1913
01:13:31,040 --> 01:13:35,760
running as an assembly from remote right

1914
01:13:33,760 --> 01:13:36,719
if you understand that part you can also

1915
01:13:35,760 --> 01:13:39,360
use

1916
01:13:36,719 --> 01:13:41,199
this shellcode invoke and it may accept

1917
01:13:39,360 --> 01:13:43,280
the demo parameter

1918
01:13:41,199 --> 01:13:45,199
as you see here

1919
01:13:43,280 --> 01:13:47,760
it accepts parameters

1920
01:13:45,199 --> 01:13:50,320
and if the argument

1921
01:13:47,760 --> 01:13:53,280
the given parameter is demo

1922
01:13:50,320 --> 01:13:55,600
it runs this functionality

1923
01:13:53,280 --> 01:13:57,520
that means also

1924
01:13:55,600 --> 01:13:58,719
if we send demo

1925
01:13:57,520 --> 01:14:01,360
it will

1926
01:13:58,719 --> 01:14:05,120
run this shell code given using the exec

1927
01:14:01,360 --> 01:14:06,000
shellcode 64 function and the shortcode

1928
01:14:05,120 --> 01:14:08,560
is

1929
01:14:06,000 --> 01:14:10,640
the shellcode of calc

1930
01:14:08,560 --> 01:14:12,480
to run in your environment

1931
01:14:10,640 --> 01:14:14,400
this will only work on the windows of

1932
01:14:12,480 --> 01:14:15,920
course because process injection is not

1933
01:14:14,400 --> 01:14:19,440
designed for mac or

1934
01:14:15,920 --> 01:14:21,199
actual linux and it will require 64-bit

1935
01:14:19,440 --> 01:14:24,000
so this will use the function that i

1936
01:14:21,199 --> 01:14:26,320
will explain in a couple of minutes

1937
01:14:24,000 --> 01:14:28,960
so if that is the case

1938
01:14:26,320 --> 01:14:33,040
your implant can utilize

1939
01:14:28,960 --> 01:14:35,040
this dll this assembly from remote

1940
01:14:33,040 --> 01:14:36,960
what i suggest is

1941
01:14:35,040 --> 01:14:39,280
compile this

1942
01:14:36,960 --> 01:14:41,520
make necessary modifications upload this

1943
01:14:39,280 --> 01:14:43,600
to your remote location or use your

1944
01:14:41,520 --> 01:14:45,840
python simple http

1945
01:14:43,600 --> 01:14:48,880
server or something like that and serve

1946
01:14:45,840 --> 01:14:51,920
this data or you can use file io read as

1947
01:14:48,880 --> 01:14:53,440
well read all bytes in the file will

1948
01:14:51,920 --> 01:14:55,280
help you

1949
01:14:53,440 --> 01:14:58,840
if that's the case the file will be

1950
01:14:55,280 --> 01:15:01,760
loaded start using your own dotnet

1951
01:14:58,840 --> 01:15:04,400
code.net assembly run code

1952
01:15:01,760 --> 01:15:06,640
to run this assembly because this

1953
01:15:04,400 --> 01:15:08,880
assembly will require a parameter make

1954
01:15:06,640 --> 01:15:11,840
sure that this parameter is passed

1955
01:15:08,880 --> 01:15:13,840
through then you can observe

1956
01:15:11,840 --> 01:15:15,040
this example

1957
01:15:13,840 --> 01:15:17,760
will be

1958
01:15:15,040 --> 01:15:20,159
loaded from remote to run as would

1959
01:15:17,760 --> 01:15:23,040
inject the code

1960
01:15:20,159 --> 01:15:25,280
now let's work on the code part as you

1961
01:15:23,040 --> 01:15:27,120
see the base64 content

1962
01:15:25,280 --> 01:15:28,800
is there and it is

1963
01:15:27,120 --> 01:15:31,760
removed and replaced

1964
01:15:28,800 --> 01:15:34,480
so the static binary may have less

1965
01:15:31,760 --> 01:15:35,760
concerns i'm not saying zero directions

1966
01:15:34,480 --> 01:15:38,960
definitely

1967
01:15:35,760 --> 01:15:41,679
the pe executable when you compile this

1968
01:15:38,960 --> 01:15:43,199
we'll have already some indicators

1969
01:15:41,679 --> 01:15:45,360
because we use

1970
01:15:43,199 --> 01:15:49,360
pimokia

1971
01:15:45,360 --> 01:15:51,600
anyway the exec shellcode will actually

1972
01:15:49,360 --> 01:15:52,800
accept the byte array to run this

1973
01:15:51,600 --> 01:15:56,080
shortcut

1974
01:15:52,800 --> 01:15:58,480
there is also row demo i made actually

1975
01:15:56,080 --> 01:16:00,560
commas here you can uncomment this to

1976
01:15:58,480 --> 01:16:02,880
see the detections and the components

1977
01:16:00,560 --> 01:16:05,840
because it is the same source actually

1978
01:16:02,880 --> 01:16:08,159
same shell code same bytes but this time

1979
01:16:05,840 --> 01:16:09,280
it is not encoded it is the white area

1980
01:16:08,159 --> 01:16:11,120
itself

1981
01:16:09,280 --> 01:16:13,840
so you can use it

1982
01:16:11,120 --> 01:16:15,040
actually this will be also interesting

1983
01:16:13,840 --> 01:16:17,760
for you

1984
01:16:15,040 --> 01:16:18,960
so you can make it a kind of staged

1985
01:16:17,760 --> 01:16:22,000
environment

1986
01:16:18,960 --> 01:16:23,360
let's assume that you had already an

1987
01:16:22,000 --> 01:16:26,480
implant

1988
01:16:23,360 --> 01:16:29,040
and it was checking the c2 command text

1989
01:16:26,480 --> 01:16:31,760
on the github repository

1990
01:16:29,040 --> 01:16:33,679
so you can download

1991
01:16:31,760 --> 01:16:35,920
this dll

1992
01:16:33,679 --> 01:16:39,199
from remote

1993
01:16:35,920 --> 01:16:43,199
and given parameter will not be demo

1994
01:16:39,199 --> 01:16:44,400
given parameter will be another row dll

1995
01:16:43,199 --> 01:16:45,760
pointing to

1996
01:16:44,400 --> 01:16:48,800
the shell code

1997
01:16:45,760 --> 01:16:51,360
so simply you have multiple stages your

1998
01:16:48,800 --> 01:16:53,040
first stage is the implant itself

1999
01:16:51,360 --> 01:16:55,199
impact gets

2000
01:16:53,040 --> 01:16:56,400
the second stage which is another.net

2001
01:16:55,199 --> 01:16:59,760
assembly

2002
01:16:56,400 --> 01:17:00,719
and given by the c2 command text

2003
01:16:59,760 --> 01:17:02,800
and

2004
01:17:00,719 --> 01:17:06,159
this binary will also require the third

2005
01:17:02,800 --> 01:17:09,840
one which is the shell code in basics of

2006
01:17:06,159 --> 01:17:12,320
base64 uh encoded or byte array format

2007
01:17:09,840 --> 01:17:15,199
see multiple stages if you are making it

2008
01:17:12,320 --> 01:17:17,920
also a purple team exercise place flags

2009
01:17:15,199 --> 01:17:20,159
on them for example put some uh

2010
01:17:17,920 --> 01:17:23,040
variables change variable names and make

2011
01:17:20,159 --> 01:17:26,480
them a kind of flag for your blue team

2012
01:17:23,040 --> 01:17:29,679
to identify the levels of the structure

2013
01:17:26,480 --> 01:17:31,280
maybe they captured the first stager but

2014
01:17:29,679 --> 01:17:33,199
not the second

2015
01:17:31,280 --> 01:17:34,960
or maybe they have no idea about the

2016
01:17:33,199 --> 01:17:37,280
payload coming

2017
01:17:34,960 --> 01:17:38,719
you see what i mean you can add flags

2018
01:17:37,280 --> 01:17:41,440
and you can improve directions and you

2019
01:17:38,719 --> 01:17:43,440
can help your blue tumors to understand

2020
01:17:41,440 --> 01:17:45,280
this process and stage the approach

2021
01:17:43,440 --> 01:17:47,280
because if you do not ship everything in

2022
01:17:45,280 --> 01:17:49,600
one single monolithic file

2023
01:17:47,280 --> 01:17:52,080
the detections will fail

2024
01:17:49,600 --> 01:17:54,560
so it may help them to understand where

2025
01:17:52,080 --> 01:17:54,560
they fail

2026
01:17:54,640 --> 01:17:59,679
also this excel shellcode function is

2027
01:17:57,280 --> 01:18:03,120
the function i have actually shown you

2028
01:17:59,679 --> 01:18:05,520
so it is slightly simple

2029
01:18:03,120 --> 01:18:09,199
attack capabilities on the other hand

2030
01:18:05,520 --> 01:18:11,520
it is quite rich so you can exactly see

2031
01:18:09,199 --> 01:18:14,320
how it will work and what actually

2032
01:18:11,520 --> 01:18:16,719
variables it uses at

2033
01:18:14,320 --> 01:18:19,120
what pin box are already defined for

2034
01:18:16,719 --> 01:18:21,520
what purpose

2035
01:18:19,120 --> 01:18:25,280
when you scroll down you will start

2036
01:18:21,520 --> 01:18:27,840
seeing the functionalities each function

2037
01:18:25,280 --> 01:18:28,880
will have a different purpose in pataki

2038
01:18:27,840 --> 01:18:31,280
implant

2039
01:18:28,880 --> 01:18:33,199
in the repository you will understand

2040
01:18:31,280 --> 01:18:35,760
reasons as well as content

2041
01:18:33,199 --> 01:18:38,640
but in this example this simply checks

2042
01:18:35,760 --> 01:18:40,480
that the platform is vin or not if it is

2043
01:18:38,640 --> 01:18:42,719
not windows

2044
01:18:40,480 --> 01:18:44,400
your implant will refuse to work or say

2045
01:18:42,719 --> 01:18:46,239
that those functionalities are not

2046
01:18:44,400 --> 01:18:48,480
available on windows

2047
01:18:46,239 --> 01:18:49,280
please give them other functionalities

2048
01:18:48,480 --> 01:18:51,360
so

2049
01:18:49,280 --> 01:18:54,560
you can load another implant type

2050
01:18:51,360 --> 01:18:56,080
specifically for mac or linux this time

2051
01:18:54,560 --> 01:18:59,520
it's up to you

2052
01:18:56,080 --> 01:19:01,600
exec sharp assembly also

2053
01:18:59,520 --> 01:19:04,080
now accepts arguments

2054
01:19:01,600 --> 01:19:05,840
as well as thread support

2055
01:19:04,080 --> 01:19:08,000
so you can actually

2056
01:19:05,840 --> 01:19:10,480
give the arguments if it is not null it

2057
01:19:08,000 --> 01:19:13,360
will work with the parameters

2058
01:19:10,480 --> 01:19:16,320
and then it creates thread as well

2059
01:19:13,360 --> 01:19:19,120
so it will work as a new thread

2060
01:19:16,320 --> 01:19:20,800
it is similar for exec sharp code

2061
01:19:19,120 --> 01:19:24,000
and this time sharp code will be

2062
01:19:20,800 --> 01:19:26,080
slightly enriched but there is still

2063
01:19:24,000 --> 01:19:28,880
room to improve this because as you see

2064
01:19:26,080 --> 01:19:31,360
the references are hard coded so you can

2065
01:19:28,880 --> 01:19:32,640
actually create another area here or a

2066
01:19:31,360 --> 01:19:33,440
list

2067
01:19:32,640 --> 01:19:35,600
to

2068
01:19:33,440 --> 01:19:38,800
add more references so

2069
01:19:35,600 --> 01:19:40,960
if someone pushes sharp code a kind of c

2070
01:19:38,800 --> 01:19:43,920
sharp code to be compiled they can also

2071
01:19:40,960 --> 01:19:47,600
pass a list of references already

2072
01:19:43,920 --> 01:19:50,080
required for this compile operation

2073
01:19:47,600 --> 01:19:52,880
i'm scrolling down and there's also exec

2074
01:19:50,080 --> 01:19:55,120
here at exec as mentioned it's a kind of

2075
01:19:52,880 --> 01:19:57,440
process execution for us

2076
01:19:55,120 --> 01:19:59,040
so we can give some parameters to run

2077
01:19:57,440 --> 01:20:01,360
this executable

2078
01:19:59,040 --> 01:20:02,560
our shell automation is

2079
01:20:01,360 --> 01:20:03,440
there to

2080
01:20:02,560 --> 01:20:04,960
actually

2081
01:20:03,440 --> 01:20:06,080
run this powershell through the system

2082
01:20:04,960 --> 01:20:08,320
automation

2083
01:20:06,080 --> 01:20:11,920
so it will use system automation if you

2084
01:20:08,320 --> 01:20:15,520
give if you assign it if you referred

2085
01:20:11,920 --> 01:20:17,679
and exec shellcode will run the queue

2086
01:20:15,520 --> 01:20:20,159
user apc

2087
01:20:17,679 --> 01:20:22,080
shellcode injection so

2088
01:20:20,159 --> 01:20:24,320
the content is here

2089
01:20:22,080 --> 01:20:26,239
you can modify it or copy and past

2090
01:20:24,320 --> 01:20:28,000
whenever you deal with the windows apis

2091
01:20:26,239 --> 01:20:31,679
though like this

2092
01:20:28,000 --> 01:20:33,840
you need to make sure that you also copy

2093
01:20:31,679 --> 01:20:35,679
the definitions we already put before

2094
01:20:33,840 --> 01:20:38,480
the code

2095
01:20:35,679 --> 01:20:39,280
now one more thing before leaving this

2096
01:20:38,480 --> 01:20:41,520
fun

2097
01:20:39,280 --> 01:20:44,400
there is also rand soblin

2098
01:20:41,520 --> 01:20:47,280
and rand soblin is available here

2099
01:20:44,400 --> 01:20:49,360
ron swablin is a ransom variable coblin

2100
01:20:47,280 --> 01:20:50,560
simply i have used this in the ta 505

2101
01:20:49,360 --> 01:20:52,080
exercise

2102
01:20:50,560 --> 01:20:54,560
so it helps me

2103
01:20:52,080 --> 01:20:57,360
to encrypt a file and

2104
01:20:54,560 --> 01:20:59,600
decode it as well or decrypt it as well

2105
01:20:57,360 --> 01:21:02,320
and it can help you to add some

2106
01:20:59,600 --> 01:21:05,679
ransomware functionalities

2107
01:21:02,320 --> 01:21:08,000
as you already see it has a menu

2108
01:21:05,679 --> 01:21:09,120
that we already created normally using

2109
01:21:08,000 --> 01:21:11,520
switch

2110
01:21:09,120 --> 01:21:14,320
and if it says encrypt it encrypts if it

2111
01:21:11,520 --> 01:21:17,199
is decrypted it decrypts that's it but

2112
01:21:14,320 --> 01:21:20,080
it is using hardcoded keys so

2113
01:21:17,199 --> 01:21:23,280
it's up to you to give the key or change

2114
01:21:20,080 --> 01:21:24,239
the content so you can make it actually

2115
01:21:23,280 --> 01:21:25,280
a good

2116
01:21:24,239 --> 01:21:29,679
tool

2117
01:21:25,280 --> 01:21:30,480
right it is right here the key strings

2118
01:21:29,679 --> 01:21:32,320
now

2119
01:21:30,480 --> 01:21:34,080
one more thing we have

2120
01:21:32,320 --> 01:21:36,320
which is

2121
01:21:34,080 --> 01:21:37,600
our repositories that we can actually

2122
01:21:36,320 --> 01:21:39,280
improve things

2123
01:21:37,600 --> 01:21:41,199
as mentioned there are several different

2124
01:21:39,280 --> 01:21:43,440
types of functionalities codes and

2125
01:21:41,199 --> 01:21:46,960
methods here so

2126
01:21:43,440 --> 01:21:49,440
ga 505 plus adversity simulation pack

2127
01:21:46,960 --> 01:21:51,040
also have all of those it has

2128
01:21:49,440 --> 01:21:53,760
documentations

2129
01:21:51,040 --> 01:21:55,840
and it has actually resources there as

2130
01:21:53,760 --> 01:21:58,639
well the resources are developed for

2131
01:21:55,840 --> 01:22:01,040
this exercise the excel file and initial

2132
01:21:58,639 --> 01:22:03,679
dropper and some other contents as well

2133
01:22:01,040 --> 01:22:05,840
as some preparation commands shellcode

2134
01:22:03,679 --> 01:22:08,639
you can use them but more

2135
01:22:05,840 --> 01:22:11,520
important one is it comes with

2136
01:22:08,639 --> 01:22:13,520
the videos if you concern that where we

2137
01:22:11,520 --> 01:22:15,120
can find the videos in the same

2138
01:22:13,520 --> 01:22:17,360
repository

2139
01:22:15,120 --> 01:22:19,840
exercise videos

2140
01:22:17,360 --> 01:22:22,320
linked here and when you go

2141
01:22:19,840 --> 01:22:23,440
you will see lots of different videos

2142
01:22:22,320 --> 01:22:26,320
here

2143
01:22:23,440 --> 01:22:29,280
and they will help you for each stage of

2144
01:22:26,320 --> 01:22:31,120
this exercise design or

2145
01:22:29,280 --> 01:22:33,920
replicating the exercise content

2146
01:22:31,120 --> 01:22:35,120
weaponization phase is related to your

2147
01:22:33,920 --> 01:22:36,960
development

2148
01:22:35,120 --> 01:22:38,960
and after that delivery and lateral

2149
01:22:36,960 --> 01:22:41,600
movement will be related to the other

2150
01:22:38,960 --> 01:22:43,679
sections you are planning to run

2151
01:22:41,600 --> 01:22:46,960
one final thing if you want to enrich

2152
01:22:43,679 --> 01:22:49,600
your malware attack c2 is here it is

2153
01:22:46,960 --> 01:22:52,480
also mit licensed so you can easily

2154
01:22:49,600 --> 01:22:54,960
modify or copy code from there and go

2155
01:22:52,480 --> 01:22:57,440
further

2156
01:22:54,960 --> 01:22:59,920
now chapter 3 is done

2157
01:22:57,440 --> 01:23:02,480
and you can use those calls in your

2158
01:22:59,920 --> 01:23:04,320
chapter 3 folder to add additional

2159
01:23:02,480 --> 01:23:06,400
functionalities to your implant i don't

2160
01:23:04,320 --> 01:23:08,480
know what you want to add so

2161
01:23:06,400 --> 01:23:10,960
you have multiple options here feel free

2162
01:23:08,480 --> 01:23:14,320
to copy and paste them or add them

2163
01:23:10,960 --> 01:23:16,639
based on uh your own requirements

2164
01:23:14,320 --> 01:23:19,120
i hope this works for you and this is

2165
01:23:16,639 --> 01:23:21,280
end of chapter 3 in

2166
01:23:19,120 --> 01:23:24,239
chapter four we will discuss about

2167
01:23:21,280 --> 01:23:26,480
evasion tactics and some of the advanced

2168
01:23:24,239 --> 01:23:28,960
content but this time instead of

2169
01:23:26,480 --> 01:23:31,679
exercises we will try to understand how

2170
01:23:28,960 --> 01:23:33,360
researchers designed this n word

2171
01:23:31,679 --> 01:23:36,480
thank you for your time for the chapter

2172
01:23:33,360 --> 01:23:38,320
three and uh see you in chapter four

2173
01:23:36,480 --> 01:23:40,320
and i'm on discord by the way if you

2174
01:23:38,320 --> 01:23:42,400
have any questions feel free to jump to

2175
01:23:40,320 --> 01:23:44,560
this court and ask questions if i have

2176
01:23:42,400 --> 01:23:46,800
any mistakes with the information or if

2177
01:23:44,560 --> 01:23:48,800
i misinterpreted some of them please

2178
01:23:46,800 --> 01:23:53,520
also remind me the correct information

2179
01:23:48,800 --> 01:23:53,520
so everyone will fix this as well cheers

2180
01:23:55,440 --> 01:23:59,600
welcome back

2181
01:23:56,800 --> 01:24:02,239
this is chapter 4 the final version

2182
01:23:59,600 --> 01:24:05,360
we will talk about evasion i hope now

2183
01:24:02,239 --> 01:24:08,080
you have an implant working well with a

2184
01:24:05,360 --> 01:24:09,520
c2 or a website with some

2185
01:24:08,080 --> 01:24:13,280
functionalities

2186
01:24:09,520 --> 01:24:17,120
now it is our turn to make it evasive

2187
01:24:13,280 --> 01:24:19,760
and we will talk about evasion now

2188
01:24:17,120 --> 01:24:21,600
first things first we have simple

2189
01:24:19,760 --> 01:24:23,760
security measures that can be

2190
01:24:21,600 --> 01:24:26,719
implemented to avoid this type of

2191
01:24:23,760 --> 01:24:28,159
detections as well as security control

2192
01:24:26,719 --> 01:24:30,239
interception

2193
01:24:28,159 --> 01:24:32,480
that's why we talked about a couple of

2194
01:24:30,239 --> 01:24:34,000
basics first

2195
01:24:32,480 --> 01:24:36,080
staging

2196
01:24:34,000 --> 01:24:38,239
as i previously mentioned you can

2197
01:24:36,080 --> 01:24:39,440
actually split things out the first

2198
01:24:38,239 --> 01:24:41,840
thing is

2199
01:24:39,440 --> 01:24:44,320
loader the second will be stage one and

2200
01:24:41,840 --> 01:24:46,239
after that stage two stage three

2201
01:24:44,320 --> 01:24:48,800
whenever you split things up

2202
01:24:46,239 --> 01:24:50,639
that would help you to actually focus on

2203
01:24:48,800 --> 01:24:53,440
different components

2204
01:24:50,639 --> 01:24:55,520
moreover they will work together

2205
01:24:53,440 --> 01:24:58,400
it will help you to implement flags and

2206
01:24:55,520 --> 01:25:00,639
features for the blue tumors and finally

2207
01:24:58,400 --> 01:25:03,760
it will avoid detections because most of

2208
01:25:00,639 --> 01:25:05,199
the software as security controls

2209
01:25:03,760 --> 01:25:07,520
they focus on

2210
01:25:05,199 --> 01:25:09,920
everything in the same place

2211
01:25:07,520 --> 01:25:11,679
but you can actually use a loader

2212
01:25:09,920 --> 01:25:15,040
checking the environment if everything

2213
01:25:11,679 --> 01:25:17,440
is all right it can move on if it is not

2214
01:25:15,040 --> 01:25:20,000
it can't stop this is not my target

2215
01:25:17,440 --> 01:25:22,480
or you can implement another check for

2216
01:25:20,000 --> 01:25:26,320
example i don't want to be actually a

2217
01:25:22,480 --> 01:25:29,040
part of this environment can i escape or

2218
01:25:26,320 --> 01:25:31,040
you can add another check for example is

2219
01:25:29,040 --> 01:25:33,120
there any antivirus or a certain process

2220
01:25:31,040 --> 01:25:35,679
running if so

2221
01:25:33,120 --> 01:25:38,400
is it my process or is there any mc for

2222
01:25:35,679 --> 01:25:39,840
example if there is mc you can retrieve

2223
01:25:38,400 --> 01:25:42,880
the

2224
01:25:39,840 --> 01:25:44,719
bypass tool and it can bypass it then

2225
01:25:42,880 --> 01:25:47,199
you can start loading things but if

2226
01:25:44,719 --> 01:25:49,600
there is no mc you don't need to load

2227
01:25:47,199 --> 01:25:50,639
anything from remote so you won't expose

2228
01:25:49,600 --> 01:25:51,440
your code

2229
01:25:50,639 --> 01:25:54,320
so

2230
01:25:51,440 --> 01:25:55,600
simply staging helps you to speed

2231
01:25:54,320 --> 01:25:57,679
everything

2232
01:25:55,600 --> 01:26:00,560
to different components

2233
01:25:57,679 --> 01:26:04,639
and actually is easier to maintain

2234
01:26:00,560 --> 01:26:06,000
easier to deploy to the remote systems

2235
01:26:04,639 --> 01:26:09,760
also

2236
01:26:06,000 --> 01:26:11,360
deployment part would be a problem

2237
01:26:09,760 --> 01:26:15,760
if you remember the chapter 2 and

2238
01:26:11,360 --> 01:26:18,960
chapter 3 required you to download dlls

2239
01:26:15,760 --> 01:26:21,360
executables or some c-sharp source code

2240
01:26:18,960 --> 01:26:24,719
from a remote web service

2241
01:26:21,360 --> 01:26:27,679
the real life does not like this real

2242
01:26:24,719 --> 01:26:29,440
life has some proxy controls the content

2243
01:26:27,679 --> 01:26:30,639
filters as well as the network

2244
01:26:29,440 --> 01:26:33,280
connections

2245
01:26:30,639 --> 01:26:36,880
this means you need to change them

2246
01:26:33,280 --> 01:26:39,199
base64 encoding xrx encryption or

2247
01:26:36,880 --> 01:26:42,639
whatever encryption you want to add it

2248
01:26:39,199 --> 01:26:44,800
will help you to convert the content to

2249
01:26:42,639 --> 01:26:46,400
an unreadable format

2250
01:26:44,800 --> 01:26:48,880
you can add the garbage data before

2251
01:26:46,400 --> 01:26:50,880
base64 to broad break it

2252
01:26:48,880 --> 01:26:53,679
you can hide your content

2253
01:26:50,880 --> 01:26:55,120
inside an image file you can do a lot of

2254
01:26:53,679 --> 01:26:57,840
different things

2255
01:26:55,120 --> 01:26:59,600
to hide your data because on the network

2256
01:26:57,840 --> 01:27:02,080
they will be visible if you don't

2257
01:26:59,600 --> 01:27:04,560
implement any encryption or

2258
01:27:02,080 --> 01:27:06,639
encoding feature

2259
01:27:04,560 --> 01:27:09,520
this is same for the c2 communications

2260
01:27:06,639 --> 01:27:11,840
so you need to add also similar things

2261
01:27:09,520 --> 01:27:14,159
to your cto communications instead of a

2262
01:27:11,840 --> 01:27:16,000
direct communication channel you can

2263
01:27:14,159 --> 01:27:17,600
implement actually

2264
01:27:16,000 --> 01:27:20,159
encrypted channel

2265
01:27:17,600 --> 01:27:22,000
you have encrypted functions

2266
01:27:20,159 --> 01:27:24,960
add them to your implant

2267
01:27:22,000 --> 01:27:26,880
and send encrypted and decrypted data so

2268
01:27:24,960 --> 01:27:28,560
the network interception

2269
01:27:26,880 --> 01:27:30,880
will not work

2270
01:27:28,560 --> 01:27:33,120
even though that will be an interception

2271
01:27:30,880 --> 01:27:35,199
it will not work with your system either

2272
01:27:33,120 --> 01:27:37,360
so it's a way

2273
01:27:35,199 --> 01:27:39,120
another one is you may run in a

2274
01:27:37,360 --> 01:27:42,239
restricted environment that could be a

2275
01:27:39,120 --> 01:27:44,080
sandbox cloud or maybe an environment

2276
01:27:42,239 --> 01:27:45,040
restriction

2277
01:27:44,080 --> 01:27:47,120
so

2278
01:27:45,040 --> 01:27:50,159
that would be because of reverse

2279
01:27:47,120 --> 01:27:51,840
engineering or dynamic analysis or

2280
01:27:50,159 --> 01:27:54,320
similar things so it's a kind of

2281
01:27:51,840 --> 01:27:56,639
defensive security measure

2282
01:27:54,320 --> 01:27:58,719
what you need to do is implement some

2283
01:27:56,639 --> 01:28:01,280
security checks there for example check

2284
01:27:58,719 --> 01:28:02,800
the device ids check the device name

2285
01:28:01,280 --> 01:28:04,800
and try to understand that the

2286
01:28:02,800 --> 01:28:05,679
environment is virtual

2287
01:28:04,800 --> 01:28:07,760
or

2288
01:28:05,679 --> 01:28:10,080
real or fake

2289
01:28:07,760 --> 01:28:11,360
then you can move on and sometimes you

2290
01:28:10,080 --> 01:28:13,679
need to even

2291
01:28:11,360 --> 01:28:16,320
actually define the target and try to

2292
01:28:13,679 --> 01:28:18,560
direct the target there for example this

2293
01:28:16,320 --> 01:28:21,440
ip is in scope or not

2294
01:28:18,560 --> 01:28:24,320
this was used by also and the value in

2295
01:28:21,440 --> 01:28:25,600
the solar case uh sorry

2296
01:28:24,320 --> 01:28:26,800
solar winds

2297
01:28:25,600 --> 01:28:29,040
exercise

2298
01:28:26,800 --> 01:28:30,400
and campaign

2299
01:28:29,040 --> 01:28:31,679
so

2300
01:28:30,400 --> 01:28:32,719
bypassing

2301
01:28:31,679 --> 01:28:35,600
mc

2302
01:28:32,719 --> 01:28:38,480
will be another phase because now you

2303
01:28:35,600 --> 01:28:40,560
know that you escaped from the dynamic

2304
01:28:38,480 --> 01:28:42,400
analysis environment

2305
01:28:40,560 --> 01:28:44,639
you are in memory

2306
01:28:42,400 --> 01:28:46,159
and you can still load some objects from

2307
01:28:44,639 --> 01:28:48,480
remote

2308
01:28:46,159 --> 01:28:49,840
that's the good part for you and you're

2309
01:28:48,480 --> 01:28:50,960
at a good stage

2310
01:28:49,840 --> 01:28:53,920
however

2311
01:28:50,960 --> 01:28:56,080
the vmc all as well as windows defender

2312
01:28:53,920 --> 01:28:58,000
is on your shoulder

2313
01:28:56,080 --> 01:29:00,159
so what you need to do is

2314
01:28:58,000 --> 01:29:02,960
actually patch it

2315
01:29:00,159 --> 01:29:04,800
and you can work on a couple of patches

2316
01:29:02,960 --> 01:29:07,600
and this example is based on amc scan

2317
01:29:04,800 --> 01:29:10,480
buffer mccann buffer is actually

2318
01:29:07,600 --> 01:29:13,280
discovered by cyber arc and also a

2319
01:29:10,480 --> 01:29:16,080
good.net example is supplied by daniel

2320
01:29:13,280 --> 01:29:18,560
duggan also known as restaurants

2321
01:29:16,080 --> 01:29:19,679
so his code is good simply if you are

2322
01:29:18,560 --> 01:29:22,560
patching

2323
01:29:19,679 --> 01:29:26,000
that memory space

2324
01:29:22,560 --> 01:29:28,320
also it is necessary for us to say

2325
01:29:26,000 --> 01:29:30,480
simple things to mc

2326
01:29:28,320 --> 01:29:33,280
it is looking for the length of the

2327
01:29:30,480 --> 01:29:35,840
memory space we simply say that

2328
01:29:33,280 --> 01:29:36,840
zero look at only the beginning

2329
01:29:35,840 --> 01:29:38,480
not to

2330
01:29:36,840 --> 01:29:41,360
me

2331
01:29:38,480 --> 01:29:43,920
so the implementation here is actually

2332
01:29:41,360 --> 01:29:46,159
slightly simple we actually load the

2333
01:29:43,920 --> 01:29:48,480
mcdl

2334
01:29:46,159 --> 01:29:50,480
it is already there we try to get

2335
01:29:48,480 --> 01:29:52,239
actually memory space

2336
01:29:50,480 --> 01:29:54,000
actually the function pointer for the

2337
01:29:52,239 --> 01:29:57,120
mcscan quaffer

2338
01:29:54,000 --> 01:30:00,000
and then we simply uh create a new one

2339
01:29:57,120 --> 01:30:01,520
or work on the memory it depends on

2340
01:30:00,000 --> 01:30:04,320
what we do

2341
01:30:01,520 --> 01:30:07,120
mc has tampering protection so whenever

2342
01:30:04,320 --> 01:30:08,719
you try to deal with the memory address

2343
01:30:07,120 --> 01:30:10,719
directly

2344
01:30:08,719 --> 01:30:13,360
it stops you but if you create a new

2345
01:30:10,719 --> 01:30:15,840
memory space push your actually data

2346
01:30:13,360 --> 01:30:18,480
there and then move the pointer

2347
01:30:15,840 --> 01:30:20,719
that would work that's how it worked for

2348
01:30:18,480 --> 01:30:23,360
diane douglas case as well so move

2349
01:30:20,719 --> 01:30:25,440
memory address was the solution for it

2350
01:30:23,360 --> 01:30:27,360
however this

2351
01:30:25,440 --> 01:30:29,520
patch is also detected because of the

2352
01:30:27,360 --> 01:30:32,000
simple strings that's why the strings

2353
01:30:29,520 --> 01:30:34,239
are also split up to different portions

2354
01:30:32,000 --> 01:30:35,600
to avoid detection but it is still

2355
01:30:34,239 --> 01:30:37,920
detected so

2356
01:30:35,600 --> 01:30:39,679
i have another example in your chapter 4

2357
01:30:37,920 --> 01:30:43,040
repository

2358
01:30:39,679 --> 01:30:45,040
and it worked for me in the ta505 plus

2359
01:30:43,040 --> 01:30:47,600
i simply replaced the marshall copy with

2360
01:30:45,040 --> 01:30:50,560
the write process memory api

2361
01:30:47,600 --> 01:30:53,199
and i also used handle to my own process

2362
01:30:50,560 --> 01:30:55,040
and it's a different function so i used

2363
01:30:53,199 --> 01:30:57,440
some obvious skills in your

2364
01:30:55,040 --> 01:30:59,040
meaning and it worked so you may have a

2365
01:30:57,440 --> 01:31:01,040
different point of view there and you

2366
01:30:59,040 --> 01:31:03,280
can add more functionalities to make it

2367
01:31:01,040 --> 01:31:05,760
work

2368
01:31:03,280 --> 01:31:07,600
by passing event out tracing for windows

2369
01:31:05,760 --> 01:31:10,880
is also important for that net because

2370
01:31:07,600 --> 01:31:13,679
event tracing for windows is developed

2371
01:31:10,880 --> 01:31:16,480
for debugging and performance monitoring

2372
01:31:13,679 --> 01:31:18,320
for the applications however in that net

2373
01:31:16,480 --> 01:31:21,360
environment it gives a lot of

2374
01:31:18,320 --> 01:31:24,159
information about our.net assemblies to

2375
01:31:21,360 --> 01:31:27,120
agree avoid this type of stuff

2376
01:31:24,159 --> 01:31:28,960
we can actually take some precautions

2377
01:31:27,120 --> 01:31:31,840
changing some environment variables

2378
01:31:28,960 --> 01:31:32,960
pitching our binary and focusing on ew

2379
01:31:31,840 --> 01:31:36,239
content

2380
01:31:32,960 --> 01:31:37,840
that will really help us to change

2381
01:31:36,239 --> 01:31:40,639
our detections

2382
01:31:37,840 --> 01:31:43,040
even obviously would work for example

2383
01:31:40,639 --> 01:31:45,600
some of the tools check out the name of

2384
01:31:43,040 --> 01:31:47,360
the tool we use for example seat belt or

2385
01:31:45,600 --> 01:31:49,360
ghost pack tools they are identified

2386
01:31:47,360 --> 01:31:51,280
very fast because of their names so you

2387
01:31:49,360 --> 01:31:53,600
need to obfuscate them

2388
01:31:51,280 --> 01:31:56,560
that we will discuss shortly

2389
01:31:53,600 --> 01:31:58,800
silk etw from ruben

2390
01:31:56,560 --> 01:32:02,000
boone it's a really good proof of

2391
01:31:58,800 --> 01:32:04,800
concept to develop for etw and saying

2392
01:32:02,000 --> 01:32:07,199
that etw can be used to detect

2393
01:32:04,800 --> 01:32:09,360
actually.net binaries and applications

2394
01:32:07,199 --> 01:32:12,880
and malicious code and tradecraft

2395
01:32:09,360 --> 01:32:14,560
simply most of the edrs started actually

2396
01:32:12,880 --> 01:32:17,360
adding this feature to the their

2397
01:32:14,560 --> 01:32:20,000
products so it can be changed here

2398
01:32:17,360 --> 01:32:21,840
so whatever you do for etw

2399
01:32:20,000 --> 01:32:24,639
you need to somehow

2400
01:32:21,840 --> 01:32:27,120
evade this otherwise even proof of

2401
01:32:24,639 --> 01:32:30,480
conceptuals will understand you but now

2402
01:32:27,120 --> 01:32:32,080
it is also edr's monitoring you as well

2403
01:32:30,480 --> 01:32:34,239
these are the blocks coming from

2404
01:32:32,080 --> 01:32:38,080
different researchers they explain how

2405
01:32:34,239 --> 01:32:40,480
they have solved this problem

2406
01:32:38,080 --> 01:32:43,040
dynamic invoke is also important uh it

2407
01:32:40,480 --> 01:32:45,280
is again uh coming from ruben boone and

2408
01:32:43,040 --> 01:32:47,679
volva so simply

2409
01:32:45,280 --> 01:32:50,400
we have some issues with platform inbox

2410
01:32:47,679 --> 01:32:53,360
and this research is a solution for it

2411
01:32:50,400 --> 01:32:56,719
whenever we use platform invoke

2412
01:32:53,360 --> 01:32:59,679
we actually actually reveal our intent

2413
01:32:56,719 --> 01:33:03,600
and the imports of the pe binary also

2414
01:32:59,679 --> 01:33:06,239
includes those apis we try to add that

2415
01:33:03,600 --> 01:33:09,360
means even during the static analysis we

2416
01:33:06,239 --> 01:33:12,239
reveal our intent and it simply says

2417
01:33:09,360 --> 01:33:14,080
that these are the apis this pe binary

2418
01:33:12,239 --> 01:33:16,000
wants to use

2419
01:33:14,080 --> 01:33:18,320
to solve this problem we can actually

2420
01:33:16,000 --> 01:33:21,440
resolve them in memory

2421
01:33:18,320 --> 01:33:23,120
this has been a solution for the c

2422
01:33:21,440 --> 01:33:25,520
or assembly

2423
01:33:23,120 --> 01:33:28,239
unmanaged binaries

2424
01:33:25,520 --> 01:33:30,880
however in our c-sharp world we don't

2425
01:33:28,239 --> 01:33:33,920
have these type of functionalities on

2426
01:33:30,880 --> 01:33:34,639
the other hand reuben and de vova

2427
01:33:33,920 --> 01:33:36,800
have

2428
01:33:34,639 --> 01:33:40,000
solved this problem partially and they

2429
01:33:36,800 --> 01:33:42,239
focused on dynamic resolution so simply

2430
01:33:40,000 --> 01:33:45,520
they are uh offering that

2431
01:33:42,239 --> 01:33:46,719
why we are not resolving the same apis

2432
01:33:45,520 --> 01:33:48,639
in memory

2433
01:33:46,719 --> 01:33:51,440
but it comes with the cost as well of

2434
01:33:48,639 --> 01:33:53,520
course it focuses on delegation and the

2435
01:33:51,440 --> 01:33:55,920
function pointers you can read the

2436
01:33:53,520 --> 01:33:58,719
research try to understand this and its

2437
01:33:55,920 --> 01:33:59,520
background or the other option if you

2438
01:33:58,719 --> 01:34:01,920
don't

2439
01:33:59,520 --> 01:34:04,159
like to understand everything you can

2440
01:34:01,920 --> 01:34:06,400
use the nugget prepared by the voter to

2441
01:34:04,159 --> 01:34:09,560
implement this as well it is also a part

2442
01:34:06,400 --> 01:34:11,120
of sharpsploit which is a lot of

2443
01:34:09,560 --> 01:34:13,040
functionalities

2444
01:34:11,120 --> 01:34:15,440
packed in adl

2445
01:34:13,040 --> 01:34:18,239
all power exploit features as well as

2446
01:34:15,440 --> 01:34:20,800
newly added features are a packed sharps

2447
01:34:18,239 --> 01:34:23,920
floyd dll so you can use this data as a

2448
01:34:20,800 --> 01:34:25,199
part of your implant and you can start

2449
01:34:23,920 --> 01:34:28,239
invoking

2450
01:34:25,199 --> 01:34:30,239
all these apis using this type of

2451
01:34:28,239 --> 01:34:32,639
dynamic resolution

2452
01:34:30,239 --> 01:34:36,800
so each delay it relays on actually it

2453
01:34:32,639 --> 01:34:40,159
relies on the delegate pointer now

2454
01:34:36,800 --> 01:34:43,280
on the other hand dotnet can also run

2455
01:34:40,159 --> 01:34:44,560
some uh unsafe code for you that means

2456
01:34:43,280 --> 01:34:47,520
you can run

2457
01:34:44,560 --> 01:34:50,800
unmanaged code here but it will be

2458
01:34:47,520 --> 01:34:53,040
highly sensitive as well as fragile

2459
01:34:50,800 --> 01:34:55,840
so simply it can be broken and very

2460
01:34:53,040 --> 01:34:57,760
platform specific you simply hard code

2461
01:34:55,840 --> 01:35:00,400
things there so you need to be very

2462
01:34:57,760 --> 01:35:02,239
careful about what exactly you are doing

2463
01:35:00,400 --> 01:35:04,400
however that must support this if you

2464
01:35:02,239 --> 01:35:07,040
compile the application using the unsafe

2465
01:35:04,400 --> 01:35:08,800
parameter it will allow you to run this

2466
01:35:07,040 --> 01:35:11,119
type of stuff

2467
01:35:08,800 --> 01:35:11,920
but again it depends on what you want to

2468
01:35:11,119 --> 01:35:13,600
do

2469
01:35:11,920 --> 01:35:15,840
there are examples here again jake

2470
01:35:13,600 --> 01:35:17,520
harding and bell panty so simply you can

2471
01:35:15,840 --> 01:35:20,159
see how it works

2472
01:35:17,520 --> 01:35:22,960
for you and if you want to add more

2473
01:35:20,159 --> 01:35:25,960
assembly instructions there for example

2474
01:35:22,960 --> 01:35:29,360
dynamic uh resolving of

2475
01:35:25,960 --> 01:35:32,560
apeb so for this environment block and

2476
01:35:29,360 --> 01:35:34,800
then work on a kernel 32 of finding it

2477
01:35:32,560 --> 01:35:37,360
and then dynamically resolving uh the

2478
01:35:34,800 --> 01:35:40,400
rest using guest pros get processed at

2479
01:35:37,360 --> 01:35:43,280
32 and download library and move on and

2480
01:35:40,400 --> 01:35:45,600
move on and move on

2481
01:35:43,280 --> 01:35:48,239
running unmanagedcoding.net is also

2482
01:35:45,600 --> 01:35:51,679
possible if you actually

2483
01:35:48,239 --> 01:35:54,639
escape from this sandbox simply.net is a

2484
01:35:51,679 --> 01:35:57,199
managed environment and if you want to

2485
01:35:54,639 --> 01:35:59,360
go to unmanaged environment you need

2486
01:35:57,199 --> 01:36:02,480
pointers and delegation simply you need

2487
01:35:59,360 --> 01:36:04,719
to escape adam chester is a really good

2488
01:36:02,480 --> 01:36:07,760
researcher and he found a couple of

2489
01:36:04,719 --> 01:36:09,840
different ways that helps us to

2490
01:36:07,760 --> 01:36:12,400
actually escape from the.net managed

2491
01:36:09,840 --> 01:36:15,199
code to unmanaged environment it is

2492
01:36:12,400 --> 01:36:18,000
using actually metal disk and pointers

2493
01:36:15,199 --> 01:36:20,320
for the function pointers and it is very

2494
01:36:18,000 --> 01:36:23,119
similar to dynamic invoke and get

2495
01:36:20,320 --> 01:36:25,360
delegate for function pointer so simply

2496
01:36:23,119 --> 01:36:27,440
uh marshall get delegate for function

2497
01:36:25,360 --> 01:36:31,040
pointer has been used to dynamically

2498
01:36:27,440 --> 01:36:32,960
resolve the apis in the dmv research but

2499
01:36:31,040 --> 01:36:36,080
this time we simply used other

2500
01:36:32,960 --> 01:36:38,080
delegations intaccol and q call

2501
01:36:36,080 --> 01:36:40,560
to escape from the managed environment

2502
01:36:38,080 --> 01:36:40,560
unmatched

2503
01:36:40,960 --> 01:36:45,440
obfuscation is also required because

2504
01:36:42,960 --> 01:36:47,280
whenever we use dotnet we also know that

2505
01:36:45,440 --> 01:36:50,719
this is bytecode and bytecode can be

2506
01:36:47,280 --> 01:36:53,679
easily converted so it comes with a cost

2507
01:36:50,719 --> 01:36:56,159
which means there is nothing to hide

2508
01:36:53,679 --> 01:36:58,719
actually this is a good thing for us

2509
01:36:56,159 --> 01:37:00,960
because it makes things easier but it is

2510
01:36:58,719 --> 01:37:03,040
also a bad thing for

2511
01:37:00,960 --> 01:37:04,800
our activities if we are developing

2512
01:37:03,040 --> 01:37:07,119
advisory tradecraft for red team

2513
01:37:04,800 --> 01:37:09,520
operations we need to go subtle and we

2514
01:37:07,119 --> 01:37:11,679
should not reveal our intent

2515
01:37:09,520 --> 01:37:14,480
and in that case we need to also change

2516
01:37:11,679 --> 01:37:17,520
our point of view there are options for

2517
01:37:14,480 --> 01:37:19,679
us to actually convert our code to

2518
01:37:17,520 --> 01:37:22,159
non-readable format

2519
01:37:19,679 --> 01:37:25,440
but also keeping because as is so code

2520
01:37:22,159 --> 01:37:28,320
will work but also not easy to read

2521
01:37:25,440 --> 01:37:30,400
we call this as obfuscation conversation

2522
01:37:28,320 --> 01:37:33,520
can be implemented in different layers

2523
01:37:30,400 --> 01:37:36,560
for example randomizing strings or

2524
01:37:33,520 --> 01:37:38,400
adding some functionalities or maybe

2525
01:37:36,560 --> 01:37:41,440
the performance

2526
01:37:38,400 --> 01:37:44,159
optimizations can be rolled back simply

2527
01:37:41,440 --> 01:37:46,639
the compiler performs some

2528
01:37:44,159 --> 01:37:48,719
operations to actually simplify your

2529
01:37:46,639 --> 01:37:51,040
code that's why the performance

2530
01:37:48,719 --> 01:37:52,320
optimizations happen while compiling the

2531
01:37:51,040 --> 01:37:54,960
binaries

2532
01:37:52,320 --> 01:37:57,119
in this case you can actually

2533
01:37:54,960 --> 01:37:59,760
use similar functions to some

2534
01:37:57,119 --> 01:38:02,400
unnecessary calculations or you can make

2535
01:37:59,760 --> 01:38:04,880
the names as calculations as well this

2536
01:38:02,400 --> 01:38:07,520
will help you if you don't want to do

2537
01:38:04,880 --> 01:38:09,679
that manually which is understandable is

2538
01:38:07,520 --> 01:38:11,920
second of long and accurate process

2539
01:38:09,679 --> 01:38:13,360
there are some tools that help you to

2540
01:38:11,920 --> 01:38:16,719
obfuscate your

2541
01:38:13,360 --> 01:38:19,119
botnet applications confusor x or rose

2542
01:38:16,719 --> 01:38:22,719
for skater or similar to statistic for

2543
01:38:19,119 --> 01:38:25,280
powershell kimeria would help you to

2544
01:38:22,719 --> 01:38:27,840
add some obfuscation techniques

2545
01:38:25,280 --> 01:38:30,880
for example offensive pipeline would be

2546
01:38:27,840 --> 01:38:33,600
used to compile some opensource.net

2547
01:38:30,880 --> 01:38:34,560
projects the tradecraft and obfuscate

2548
01:38:33,600 --> 01:38:35,600
them

2549
01:38:34,560 --> 01:38:38,719
and then

2550
01:38:35,600 --> 01:38:41,600
compile and push out so it will help you

2551
01:38:38,719 --> 01:38:43,520
to actually automate some of your tool

2552
01:38:41,600 --> 01:38:45,520
and tradecraft management if you

2553
01:38:43,520 --> 01:38:47,520
implement this with your implant as well

2554
01:38:45,520 --> 01:38:50,480
as c2 that will give you more

2555
01:38:47,520 --> 01:38:52,800
flexibility for example the implant will

2556
01:38:50,480 --> 01:38:55,119
actually connect to the c2

2557
01:38:52,800 --> 01:38:58,639
start communicating whenever it is

2558
01:38:55,119 --> 01:39:01,840
necessary the c2 will compile the public

2559
01:38:58,639 --> 01:39:04,960
tool for example uh ghost pack tools by

2560
01:39:01,840 --> 01:39:06,480
spectrops and they can be supplied as a

2561
01:39:04,960 --> 01:39:09,840
dynamic content

2562
01:39:06,480 --> 01:39:12,960
so it's up to you and it's up to uh

2563
01:39:09,840 --> 01:39:14,159
how complex your implant

2564
01:39:12,960 --> 01:39:16,480
of course there are some general

2565
01:39:14,159 --> 01:39:18,400
suggestions here as well um because it

2566
01:39:16,480 --> 01:39:21,360
is a kind of adversary environment we

2567
01:39:18,400 --> 01:39:24,080
need to slightly simulate them right so

2568
01:39:21,360 --> 01:39:27,520
they need to be approximation uh or

2569
01:39:24,080 --> 01:39:29,600
maybe one to one emulation so it is

2570
01:39:27,520 --> 01:39:32,400
really up to us how we should follow

2571
01:39:29,600 --> 01:39:35,280
this path um getting a kind of uh

2572
01:39:32,400 --> 01:39:37,840
signing uh certificate uh some of those

2573
01:39:35,280 --> 01:39:40,159
already exposing the one says it's

2574
01:39:37,840 --> 01:39:42,239
stealing or reusing some of those in our

2575
01:39:40,159 --> 01:39:45,679
binaries making it legitimate one is a

2576
01:39:42,239 --> 01:39:48,960
kind of option or implementing a kind of

2577
01:39:45,679 --> 01:39:51,679
driver that will be another case for us

2578
01:39:48,960 --> 01:39:54,239
we can deliver some of the content using

2579
01:39:51,679 --> 01:39:56,800
the webdav and we can actually deliver

2580
01:39:54,239 --> 01:39:58,800
the content inside uh stages using

2581
01:39:56,800 --> 01:40:00,800
vmware as well and there are some sim

2582
01:39:58,800 --> 01:40:03,280
sharp verda implementation that you can

2583
01:40:00,800 --> 01:40:05,600
use if not you can still always use some

2584
01:40:03,280 --> 01:40:08,639
other binaries or python files that can

2585
01:40:05,600 --> 01:40:10,719
be compiled for windows legitimate

2586
01:40:08,639 --> 01:40:13,679
binaries are also important because i

2587
01:40:10,719 --> 01:40:15,679
can give you a lot of heads-ups there

2588
01:40:13,679 --> 01:40:17,119
and the actually

2589
01:40:15,679 --> 01:40:19,280
exercise will

2590
01:40:17,119 --> 01:40:22,400
get longer and longer and the workshop

2591
01:40:19,280 --> 01:40:24,960
would not end but elon means living off

2592
01:40:22,400 --> 01:40:27,040
the land binaries will help you to load

2593
01:40:24,960 --> 01:40:28,880
your.net applications so there are

2594
01:40:27,040 --> 01:40:30,719
several different ways to

2595
01:40:28,880 --> 01:40:33,199
sideload your.net application to

2596
01:40:30,719 --> 01:40:35,679
legitimate binaries that includes ms

2597
01:40:33,199 --> 01:40:38,400
build install util but there are also

2598
01:40:35,679 --> 01:40:40,639
some other.net binaries can be

2599
01:40:38,400 --> 01:40:42,800
actually loading your binary using only

2600
01:40:40,639 --> 01:40:45,199
the configs that you can add in the same

2601
01:40:42,800 --> 01:40:47,600
folder so it's another research for you

2602
01:40:45,199 --> 01:40:49,520
for as a kind of homework and other

2603
01:40:47,600 --> 01:40:52,080
things are also common for example

2604
01:40:49,520 --> 01:40:53,920
common hijacking common hijack actually

2605
01:40:52,080 --> 01:40:56,000
calm hijacking sorry

2606
01:40:53,920 --> 01:40:58,080
comb hijacking is also a kind of common

2607
01:40:56,000 --> 01:41:00,159
vector for the persistency and lateral

2608
01:40:58,080 --> 01:41:02,239
movement we discussed about this a bit

2609
01:41:00,159 --> 01:41:04,880
actually during the registry uh

2610
01:41:02,239 --> 01:41:05,840
manipulation so com hijacking will allow

2611
01:41:04,880 --> 01:41:06,880
you

2612
01:41:05,840 --> 01:41:09,280
to

2613
01:41:06,880 --> 01:41:11,040
influence the other processes and other

2614
01:41:09,280 --> 01:41:14,000
applications and their

2615
01:41:11,040 --> 01:41:16,000
execution style simply you can create

2616
01:41:14,000 --> 01:41:18,320
some registry keys

2617
01:41:16,000 --> 01:41:20,719
in your current user environment as they

2618
01:41:18,320 --> 01:41:23,920
will be available in the aka

2619
01:41:20,719 --> 01:41:26,320
route the applications will find the cls

2620
01:41:23,920 --> 01:41:28,719
id you created and it will actually run

2621
01:41:26,320 --> 01:41:31,520
the commands you have given those are

2622
01:41:28,719 --> 01:41:35,440
quite useful tactics if you want to run

2623
01:41:31,520 --> 01:41:38,880
your loader without a relationship to uh

2624
01:41:35,440 --> 01:41:40,800
the starter for example the excel files

2625
01:41:38,880 --> 01:41:43,440
amc is important you know the deal with

2626
01:41:40,800 --> 01:41:46,560
mc is mentioned you can

2627
01:41:43,440 --> 01:41:48,159
actually patch it or you can just unhook

2628
01:41:46,560 --> 01:41:50,880
it or you can dynamically resolve your

2629
01:41:48,159 --> 01:41:53,600
apis it's really up to you i didn't talk

2630
01:41:50,880 --> 01:41:56,320
about edr unlocking techniques here but

2631
01:41:53,600 --> 01:41:58,560
they can be still useful in that net

2632
01:41:56,320 --> 01:42:00,480
environment if you want to go to on

2633
01:41:58,560 --> 01:42:03,040
hooking the environment

2634
01:42:00,480 --> 01:42:05,520
so dotnet is a good environment and it

2635
01:42:03,040 --> 01:42:07,600
can provide some of those but not all of

2636
01:42:05,520 --> 01:42:09,840
course there is no kernel driver in uh

2637
01:42:07,600 --> 01:42:12,639
c-sharp express i know

2638
01:42:09,840 --> 01:42:15,600
but it can also help you to create some

2639
01:42:12,639 --> 01:42:16,719
other tools in this environment as well

2640
01:42:15,600 --> 01:42:18,560
this means

2641
01:42:16,719 --> 01:42:21,040
your tradecraft will be enriched

2642
01:42:18,560 --> 01:42:23,679
using.net but if.net is not your

2643
01:42:21,040 --> 01:42:26,560
favorite please use the other language

2644
01:42:23,679 --> 01:42:29,199
whatever you prefer uh to reach out this

2645
01:42:26,560 --> 01:42:31,360
type of data i supplied some examples in

2646
01:42:29,199 --> 01:42:33,040
your chapter 4 folder

2647
01:42:31,360 --> 01:42:36,560
to actually work on

2648
01:42:33,040 --> 01:42:39,360
all these so using this information now

2649
01:42:36,560 --> 01:42:42,000
you can actually make your implant

2650
01:42:39,360 --> 01:42:44,480
working with advanced features implement

2651
01:42:42,000 --> 01:42:46,400
different types of injections in your

2652
01:42:44,480 --> 01:42:48,159
implant and actually add some

2653
01:42:46,400 --> 01:42:50,639
innovations

2654
01:42:48,159 --> 01:42:52,159
for example your

2655
01:42:50,639 --> 01:42:55,040
your apis

2656
01:42:52,159 --> 01:42:56,639
will be dynamic results or you can get

2657
01:42:55,040 --> 01:42:59,199
the shellcode from remote with some

2658
01:42:56,639 --> 01:43:00,960
encryption you can take some sandbox you

2659
01:42:59,199 --> 01:43:02,639
can check your target

2660
01:43:00,960 --> 01:43:04,800
those are good things and if you

2661
01:43:02,639 --> 01:43:06,960
implement them and make them uh simple

2662
01:43:04,800 --> 01:43:10,480
classes that will be really good for the

2663
01:43:06,960 --> 01:43:12,960
environment or you can make them a small

2664
01:43:10,480 --> 01:43:15,199
assemblies called gadgets and you can

2665
01:43:12,960 --> 01:43:16,239
call it from remote and your initial

2666
01:43:15,199 --> 01:43:17,760
loader will not have those

2667
01:43:16,239 --> 01:43:21,040
functionalities

2668
01:43:17,760 --> 01:43:23,600
and it will try to get for example the

2669
01:43:21,040 --> 01:43:26,320
remote gadget of check windows or check

2670
01:43:23,600 --> 01:43:27,840
target assembly it's coming from remote

2671
01:43:26,320 --> 01:43:30,400
if sandbox doesn't have any remote

2672
01:43:27,840 --> 01:43:32,400
connection it will fail and you are safe

2673
01:43:30,400 --> 01:43:34,480
anyway dynamic uh

2674
01:43:32,400 --> 01:43:36,239
analysis will not work if you get this

2675
01:43:34,480 --> 01:43:38,800
from remote for example an online

2676
01:43:36,239 --> 01:43:41,199
sandbox that is also possible and you

2677
01:43:38,800 --> 01:43:43,199
can check windows and your cloud check

2678
01:43:41,199 --> 01:43:45,760
will be coming from cloud

2679
01:43:43,199 --> 01:43:47,840
and internet as well this has a cost

2680
01:43:45,760 --> 01:43:50,560
though if the client has no internet

2681
01:43:47,840 --> 01:43:52,960
connection your impact will not work so

2682
01:43:50,560 --> 01:43:56,480
it it's a kind of trade-off and you can

2683
01:43:52,960 --> 01:43:56,480
just work on this type of stuff

2684
01:43:56,560 --> 01:44:03,840
conclusion so we had a large uh set of

2685
01:44:01,280 --> 01:44:05,760
exercises today and you try to build

2686
01:44:03,840 --> 01:44:08,560
your implant you try to enrich your

2687
01:44:05,760 --> 01:44:10,960
capabilities you try to implement this

2688
01:44:08,560 --> 01:44:13,040
using a c2 and try to add some evasion

2689
01:44:10,960 --> 01:44:14,880
tactics here as well so

2690
01:44:13,040 --> 01:44:16,960
there are good things but you need also

2691
01:44:14,880 --> 01:44:19,840
a homework so you are looking for next

2692
01:44:16,960 --> 01:44:21,600
steps these are my suggested next steps

2693
01:44:19,840 --> 01:44:24,639
for you there are

2694
01:44:21,600 --> 01:44:27,360
some co2s and implants developed in c

2695
01:44:24,639 --> 01:44:31,040
sharp uh in the wild and they are

2696
01:44:27,360 --> 01:44:33,840
developed by uh really great guys and i

2697
01:44:31,040 --> 01:44:36,400
suggest to follow these guys on twitter

2698
01:44:33,840 --> 01:44:39,119
visit their github repositories and try

2699
01:44:36,400 --> 01:44:40,159
to use their tools and understand their

2700
01:44:39,119 --> 01:44:42,239
techniques

2701
01:44:40,159 --> 01:44:44,880
such as adam chester dale dagger and

2702
01:44:42,239 --> 01:44:47,600
cobb and they are there and they

2703
01:44:44,880 --> 01:44:49,440
generate a lot of different content

2704
01:44:47,600 --> 01:44:52,960
for that net as well as adversary

2705
01:44:49,440 --> 01:44:56,159
environments so they can be useful

2706
01:44:52,960 --> 01:44:58,320
and thank you for your time and joining

2707
01:44:56,159 --> 01:45:01,520
me in this workshop

2708
01:44:58,320 --> 01:45:03,119
the next phase for chapter four is your

2709
01:45:01,520 --> 01:45:05,600
homework so

2710
01:45:03,119 --> 01:45:09,520
feel uh free to take your time

2711
01:45:05,600 --> 01:45:10,960
understand this rewatch the exercises as

2712
01:45:09,520 --> 01:45:13,840
well as

2713
01:45:10,960 --> 01:45:16,400
all this presentation try to understand

2714
01:45:13,840 --> 01:45:18,960
how it works and what you missed and

2715
01:45:16,400 --> 01:45:21,760
after that we can just make it better as

2716
01:45:18,960 --> 01:45:24,480
well i will take actually questions

2717
01:45:21,760 --> 01:45:27,199
through the discord uh of advisory

2718
01:45:24,480 --> 01:45:29,840
village so simply please place your

2719
01:45:27,199 --> 01:45:32,000
questions through the advice privilege

2720
01:45:29,840 --> 01:45:35,119
channel i will be online

2721
01:45:32,000 --> 01:45:36,880
even though this recording will help you

2722
01:45:35,119 --> 01:45:38,080
serve you for online

2723
01:45:36,880 --> 01:45:39,199
purposes

2724
01:45:38,080 --> 01:45:40,719
and

2725
01:45:39,199 --> 01:45:42,560
thank you for your time

2726
01:45:40,719 --> 01:45:45,840
and thank you for joining me i will wait

2727
01:45:42,560 --> 01:45:45,840
for your questions

