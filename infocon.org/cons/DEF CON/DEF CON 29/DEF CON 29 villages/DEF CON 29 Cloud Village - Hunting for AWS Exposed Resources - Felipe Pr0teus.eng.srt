1
00:00:00,480 --> 00:00:01,680
hi everybody

2
00:00:01,680 --> 00:00:03,520
thanks for having me here in clouds

3
00:00:03,520 --> 00:00:04,880
called village

4
00:00:04,880 --> 00:00:07,600
and let's begin so

5
00:00:07,600 --> 00:00:10,160
about me bill everybody my name is

6
00:00:10,160 --> 00:00:12,240
felipe esposito and also known as

7
00:00:12,240 --> 00:00:14,799
proteus i'm secured researcher from

8
00:00:14,799 --> 00:00:16,560
tenchi security

9
00:00:16,560 --> 00:00:18,400
it's any startup focused on cloud

10
00:00:18,400 --> 00:00:19,600
security

11
00:00:19,600 --> 00:00:21,439
there is my handle in twitter and my

12
00:00:21,439 --> 00:00:24,320
email address from described below and

13
00:00:24,320 --> 00:00:26,480
i'm from the beautiful and dangerous

14
00:00:26,480 --> 00:00:28,840
city of the rio de janeiro

15
00:00:28,840 --> 00:00:31,119
brazil so

16
00:00:31,119 --> 00:00:34,960
my motivation for this talk

17
00:00:36,239 --> 00:00:39,040
every other day we have some data leak

18
00:00:39,040 --> 00:00:42,879
mostly because of some s3 buckets were

19
00:00:42,879 --> 00:00:45,760
misconfigured or

20
00:00:45,760 --> 00:00:48,000
anything related like that but there's

21
00:00:48,000 --> 00:00:50,000
nothing wrong with s3 buckets getting

22
00:00:50,000 --> 00:00:52,239
that much of attention they are probably

23
00:00:52,239 --> 00:00:54,879
the most prevalent and easy to find

24
00:00:54,879 --> 00:00:58,559
misconfigured aws resource

25
00:00:58,559 --> 00:01:00,640
on the internet and it stores a lot of

26
00:01:00,640 --> 00:01:01,840
data

27
00:01:01,840 --> 00:01:02,719
so

28
00:01:02,719 --> 00:01:04,959
yeah in

29
00:01:04,959 --> 00:01:07,680
greyhead warfare is my weakness there

30
00:01:07,680 --> 00:01:11,040
are at least two three nine four

31
00:01:11,040 --> 00:01:13,600
thousand public s3 buckets holding more

32
00:01:13,600 --> 00:01:16,320
than six billions of documents and

33
00:01:16,320 --> 00:01:18,880
that's a huge amount of documents right

34
00:01:18,880 --> 00:01:20,720
yep

35
00:01:20,720 --> 00:01:22,880
but

36
00:01:24,240 --> 00:01:27,600
aws has uh other services too

37
00:01:27,600 --> 00:01:29,840
and some of those sources services can

38
00:01:29,840 --> 00:01:32,240
also be misconfigured and exposed to the

39
00:01:32,240 --> 00:01:33,920
internet as well

40
00:01:33,920 --> 00:01:36,159
and today we are going to talk about six

41
00:01:36,159 --> 00:01:39,320
of them

42
00:01:40,560 --> 00:01:41,920
but uh

43
00:01:41,920 --> 00:01:42,799
first

44
00:01:42,799 --> 00:01:45,920
uh in 2020 scott piper published a list

45
00:01:45,920 --> 00:01:50,159
of aws exposable resources on github

46
00:01:50,159 --> 00:01:52,960
and this list has a

47
00:01:52,960 --> 00:01:56,079
20 or more exposable resources

48
00:01:56,079 --> 00:01:58,240
and that can be exposed to the public or

49
00:01:58,240 --> 00:02:00,560
to another aws account

50
00:02:00,560 --> 00:02:02,960
the list is on github it's pretty easy

51
00:02:02,960 --> 00:02:04,960
to find it's pretty easy to anyone to

52
00:02:04,960 --> 00:02:08,160
understand which aws api you have to

53
00:02:08,160 --> 00:02:10,000
reach to

54
00:02:10,000 --> 00:02:12,959
or request to expose that resource and

55
00:02:12,959 --> 00:02:14,959
based on that list we choose some

56
00:02:14,959 --> 00:02:16,959
services to understand a little bit

57
00:02:16,959 --> 00:02:19,280
better try to hurt them

58
00:02:19,280 --> 00:02:20,800
a little bit better about that service

59
00:02:20,800 --> 00:02:24,640
and try to hunt them on the internet

60
00:02:26,239 --> 00:02:29,360
so another pretty interesting project

61
00:02:29,360 --> 00:02:32,000
was end game from kenai mcqueen

62
00:02:32,000 --> 00:02:34,720
he released a new two earlier this year

63
00:02:34,720 --> 00:02:37,519
that was capable of backdooring aws

64
00:02:37,519 --> 00:02:40,800
resources by making it public or

65
00:02:40,800 --> 00:02:42,319
exposed for another

66
00:02:42,319 --> 00:02:45,519
aws account or an attacker account

67
00:02:45,519 --> 00:02:47,760
and this kind of dues it's helpful to

68
00:02:47,760 --> 00:02:50,640
show us the impact of a backyard aws

69
00:02:50,640 --> 00:02:52,480
resource that can be

70
00:02:52,480 --> 00:02:54,480
can that you can have on different

71
00:02:54,480 --> 00:02:56,640
environments and it helps blue teams to

72
00:02:56,640 --> 00:02:58,800
create detections for that

73
00:02:58,800 --> 00:03:00,480
so

74
00:03:00,480 --> 00:03:03,040
uh cheers for mcquaid for doing that for

75
00:03:03,040 --> 00:03:04,560
us

76
00:03:04,560 --> 00:03:08,000
and in 2019 ben maurice did a great job

77
00:03:08,000 --> 00:03:11,360
by analyzing exposed ebs volumes ebs

78
00:03:11,360 --> 00:03:13,120
volumes are like

79
00:03:13,120 --> 00:03:15,440
are hot black hard drivers

80
00:03:15,440 --> 00:03:18,000
when you're attached to a ec2 instance

81
00:03:18,000 --> 00:03:19,680
and

82
00:03:19,680 --> 00:03:22,080
you start things there right and for

83
00:03:22,080 --> 00:03:24,400
those ebs volumes they can be shared

84
00:03:24,400 --> 00:03:26,480
with another aws accounts and make it

85
00:03:26,480 --> 00:03:28,720
public on the aws

86
00:03:28,720 --> 00:03:29,680
so

87
00:03:29,680 --> 00:03:32,080
he did a great job by analyzing those

88
00:03:32,080 --> 00:03:34,720
public ebs and he was able to review

89
00:03:34,720 --> 00:03:37,200
some secret test source codes and pii

90
00:03:37,200 --> 00:03:38,159
stuff

91
00:03:38,159 --> 00:03:41,360
but in order to to carry to to find

92
00:03:41,360 --> 00:03:44,080
those ebs he just had to carry the aws

93
00:03:44,080 --> 00:03:47,519
api for to to get a list of those

94
00:03:47,519 --> 00:03:50,480
resources so it's what kind of kind of

95
00:03:50,480 --> 00:03:52,400
easy to find those resources

96
00:03:52,400 --> 00:03:54,799
so he did a great job he did great talk

97
00:03:54,799 --> 00:03:57,120
had some challenge to solve and he did

98
00:03:57,120 --> 00:03:58,879
it pretty well

99
00:03:58,879 --> 00:04:03,360
uh so congrats for him

100
00:04:03,360 --> 00:04:04,159
but

101
00:04:04,159 --> 00:04:07,120
uh all those exposed resources and data

102
00:04:07,120 --> 00:04:09,439
they came from uh

103
00:04:09,439 --> 00:04:10,720
somewhere

104
00:04:10,720 --> 00:04:12,799
i'd like to say sorry

105
00:04:12,799 --> 00:04:15,360
first because as some gymnastics at the

106
00:04:15,360 --> 00:04:18,320
olympics have some obligatory movements

107
00:04:18,320 --> 00:04:21,199
uh we do have an obligatory slide to

108
00:04:21,199 --> 00:04:23,600
cover before diving to aws manage

109
00:04:23,600 --> 00:04:26,199
resources and that is the shared

110
00:04:26,199 --> 00:04:29,919
responsibility model yeah unfortunately

111
00:04:29,919 --> 00:04:32,720
okay so the shared responsibility model

112
00:04:32,720 --> 00:04:35,360
uh dictates that aws is responsible for

113
00:04:35,360 --> 00:04:37,680
patching updating and maintaining the

114
00:04:37,680 --> 00:04:40,160
management and resources

115
00:04:40,160 --> 00:04:42,240
and the customer is responsible for

116
00:04:42,240 --> 00:04:44,639
configuring the resource policy security

117
00:04:44,639 --> 00:04:47,360
groups and for their secures their data

118
00:04:47,360 --> 00:04:49,759
so all those data that i found on this

119
00:04:49,759 --> 00:04:51,759
research was

120
00:04:51,759 --> 00:04:54,639
only possible because customers failed

121
00:04:54,639 --> 00:04:57,840
and protect their own stuff

122
00:04:59,440 --> 00:05:00,479
and

123
00:05:00,479 --> 00:05:02,800
just some stats so

124
00:05:02,800 --> 00:05:04,720
pretty quickly i was able to find at

125
00:05:04,720 --> 00:05:07,600
least 20 public read

126
00:05:07,600 --> 00:05:09,759
sqs qs

127
00:05:09,759 --> 00:05:12,479
19 public right sqs

128
00:05:12,479 --> 00:05:16,240
are also able to reach more than 690 000

129
00:05:16,240 --> 00:05:19,039
cloud research cloud search documents

130
00:05:19,039 --> 00:05:20,160
more than

131
00:05:20,160 --> 00:05:23,360
at least 30 unclosed active meq and more

132
00:05:23,360 --> 00:05:25,759
than five terabytes of exposed data on

133
00:05:25,759 --> 00:05:27,600
the logic searches itself

134
00:05:27,600 --> 00:05:30,080
and just a little bit quick disclaimer

135
00:05:30,080 --> 00:05:32,080
and it's important to note that i didn't

136
00:05:32,080 --> 00:05:34,720
x any of those data i just counted the

137
00:05:34,720 --> 00:05:36,720
data that i was possible to count

138
00:05:36,720 --> 00:05:38,880
without touching it so i don't want to

139
00:05:38,880 --> 00:05:40,479
go to jail

140
00:05:40,479 --> 00:05:41,520
and

141
00:05:41,520 --> 00:05:43,919
that's it

142
00:05:45,039 --> 00:05:45,919
so

143
00:05:45,919 --> 00:05:48,400
for the data source which data sources i

144
00:05:48,400 --> 00:05:51,600
choose to try to find to hunting for aws

145
00:05:51,600 --> 00:05:52,880
services

146
00:05:52,880 --> 00:05:53,919
well

147
00:05:53,919 --> 00:05:56,479
i choose two data sources for pacific

148
00:05:56,479 --> 00:05:59,520
dns risk aq the community one and

149
00:05:59,520 --> 00:06:03,280
security trails security is 50 bucks

150
00:06:03,280 --> 00:06:05,360
it's not as expensive

151
00:06:05,360 --> 00:06:07,680
so

152
00:06:07,680 --> 00:06:09,360
yeah it's a good source

153
00:06:09,360 --> 00:06:12,000
i have some other things techniques like

154
00:06:12,000 --> 00:06:15,120
way back machines domain enumeration and

155
00:06:15,120 --> 00:06:18,000
code repository

156
00:06:18,000 --> 00:06:20,720
so for a cold repository one thing that

157
00:06:20,720 --> 00:06:23,919
i did and was pretty interesting is to

158
00:06:23,919 --> 00:06:26,639
get the shh git project

159
00:06:26,639 --> 00:06:28,319
it's a project that

160
00:06:28,319 --> 00:06:29,919
is on github

161
00:06:29,919 --> 00:06:32,560
and their objective is to

162
00:06:32,560 --> 00:06:36,160
it keeps carrying the github api for

163
00:06:36,160 --> 00:06:39,280
trying to find some secrets uh

164
00:06:39,280 --> 00:06:41,680
credentials passwords that were leaked

165
00:06:41,680 --> 00:06:44,000
when a developer commit the code to the

166
00:06:44,000 --> 00:06:45,039
github

167
00:06:45,039 --> 00:06:48,160
so i just modified to find

168
00:06:48,160 --> 00:06:51,759
aws endpoint services

169
00:06:51,759 --> 00:06:55,039
also i had the idea to use the google

170
00:06:55,039 --> 00:06:57,840
cloud big carry to search for aws

171
00:06:57,840 --> 00:07:00,720
resources in a public data source so gcp

172
00:07:00,720 --> 00:07:03,520
has a public data source from

173
00:07:03,520 --> 00:07:05,280
github and

174
00:07:05,280 --> 00:07:07,840
it backs 2019

175
00:07:07,840 --> 00:07:10,080
and have more than two terabytes of data

176
00:07:10,080 --> 00:07:13,919
so uh it seems to work to checking out

177
00:07:13,919 --> 00:07:18,560
right and finally i wrote uh some python

178
00:07:18,560 --> 00:07:21,360
scripts to carry the github search api

179
00:07:21,360 --> 00:07:22,639
into point

180
00:07:22,639 --> 00:07:25,199
and the problem is that uh the

181
00:07:25,199 --> 00:07:28,240
the api endpoint is only comes back with

182
00:07:28,240 --> 00:07:29,520
the first

183
00:07:29,520 --> 00:07:32,800
first thousand resources results

184
00:07:32,800 --> 00:07:34,960
so i had to play a little bit around to

185
00:07:34,960 --> 00:07:37,199
implement some tweaks and darks to get

186
00:07:37,199 --> 00:07:39,280
enough relevant data

187
00:07:39,280 --> 00:07:41,680
but the good side the advantage of

188
00:07:41,680 --> 00:07:43,680
carrying the github is that some

189
00:07:43,680 --> 00:07:45,759
resources can be protected by username

190
00:07:45,759 --> 00:07:49,919
and password and sometimes developers

191
00:07:49,919 --> 00:07:52,160
make the mistake of committing them with

192
00:07:52,160 --> 00:07:54,479
the codes they are they are writing so

193
00:07:54,479 --> 00:07:57,520
it's worth looking into

194
00:07:57,520 --> 00:07:59,599
sorry

195
00:07:59,599 --> 00:08:00,400
and

196
00:08:00,400 --> 00:08:02,960
for subdomain enumerations uh i read a

197
00:08:02,960 --> 00:08:05,680
really good blog post from hika durama

198
00:08:05,680 --> 00:08:08,080
he wrote an article uh doing a

199
00:08:08,080 --> 00:08:11,840
comparison of nine sub domain numeration

200
00:08:11,840 --> 00:08:14,080
and based on those findings i picked the

201
00:08:14,080 --> 00:08:16,319
following for this research i choose to

202
00:08:16,319 --> 00:08:19,520
use find domain and ms a mass from

203
00:08:19,520 --> 00:08:21,680
velocity it's capable of getting uh

204
00:08:21,680 --> 00:08:23,440
information from several sources like

205
00:08:23,440 --> 00:08:26,319
way back machine gns dumpsters and

206
00:08:26,319 --> 00:08:30,319
wrapped in the dns for instance

207
00:08:32,080 --> 00:08:34,958
so and we also try to use scheduling

208
00:08:34,958 --> 00:08:38,159
senses for a few specific cases and we

209
00:08:38,159 --> 00:08:40,880
show in the results to the resistance

210
00:08:40,880 --> 00:08:43,279
likes to come but now that was not that

211
00:08:43,279 --> 00:08:46,000
successfully

212
00:08:46,000 --> 00:08:49,120
and by discovering the data sources uh i

213
00:08:49,120 --> 00:08:51,760
tried to use set string

214
00:08:51,760 --> 00:08:55,839
to try to identify some

215
00:08:56,160 --> 00:08:57,279
unique

216
00:08:57,279 --> 00:09:01,600
urls but as we are going to

217
00:09:01,600 --> 00:09:04,240
to see that aws is using wildcard

218
00:09:04,240 --> 00:09:06,480
certificates for most of the services

219
00:09:06,480 --> 00:09:08,640
which makes that string of no use in

220
00:09:08,640 --> 00:09:12,160
identifying uh individual host names

221
00:09:12,160 --> 00:09:13,279
but

222
00:09:13,279 --> 00:09:14,959
as we are going to perceive during the

223
00:09:14,959 --> 00:09:18,080
talk that most of aws resources has a

224
00:09:18,080 --> 00:09:20,480
hidden component in the dns

225
00:09:20,480 --> 00:09:22,880
and that must prevent from brute forcing

226
00:09:22,880 --> 00:09:24,880
but the set is string we can see the

227
00:09:24,880 --> 00:09:29,120
handle the handle part on certificateds

228
00:09:29,120 --> 00:09:31,360
so we only needed to find the name

229
00:09:31,360 --> 00:09:32,959
provided information

230
00:09:32,959 --> 00:09:34,959
when you create that resource

231
00:09:34,959 --> 00:09:37,360
but that would be like a brute force and

232
00:09:37,360 --> 00:09:39,920
a shot in the dark and brute forcing

233
00:09:39,920 --> 00:09:42,399
wasn't in scope for this research

234
00:09:42,399 --> 00:09:45,120
and i didn't try that i didn't went for

235
00:09:45,120 --> 00:09:47,519
that way

236
00:09:47,519 --> 00:09:48,480
right

237
00:09:48,480 --> 00:09:52,880
so uh i do have some metrics here

238
00:09:57,040 --> 00:09:57,920
uh

239
00:09:57,920 --> 00:10:01,440
i call it valid dns when the host name

240
00:10:01,440 --> 00:10:03,600
his and when that i got a first name any

241
00:10:03,600 --> 00:10:06,320
hit opens for uh ipad address that means

242
00:10:06,320 --> 00:10:09,920
that resource on aws is too active

243
00:10:09,920 --> 00:10:13,760
and i call it public ip when that ip

244
00:10:13,760 --> 00:10:16,880
resolved from the previously url or not

245
00:10:16,880 --> 00:10:21,920
in the rfc 1918 on the private ranges so

246
00:10:21,920 --> 00:10:22,720
uh

247
00:10:22,720 --> 00:10:24,800
yeah i chose these two metrics to decide

248
00:10:24,800 --> 00:10:28,800
uh which data source would be a good

249
00:10:30,839 --> 00:10:34,800
one so the first many services that i i

250
00:10:34,800 --> 00:10:37,120
explored was the commit db

251
00:10:37,120 --> 00:10:40,079
and i know that we can't access directly

252
00:10:40,079 --> 00:10:42,320
access the community b from the internet

253
00:10:42,320 --> 00:10:45,040
because it's always deployed in a vpc

254
00:10:45,040 --> 00:10:46,880
and that means that we need at least an

255
00:10:46,880 --> 00:10:48,320
ac2 instance

256
00:10:48,320 --> 00:10:50,640
to inside of that vpc to connect it

257
00:10:50,640 --> 00:10:52,800
first and make a tunnel through it to

258
00:10:52,800 --> 00:10:55,600
connect to the document db database

259
00:10:55,600 --> 00:10:58,000
but i was able to find

260
00:10:58,000 --> 00:11:01,120
some instance on the senses that have at

261
00:11:01,120 --> 00:11:04,560
http proxy tunneling the document db

262
00:11:04,560 --> 00:11:07,519
to the internet well people get creative

263
00:11:07,519 --> 00:11:10,240
ways to expose their data right

264
00:11:10,240 --> 00:11:13,519
yeah and from documentdb and those data

265
00:11:13,519 --> 00:11:16,399
sources for example uh what i call

266
00:11:16,399 --> 00:11:18,399
starco github it's the github from the

267
00:11:18,399 --> 00:11:19,600
big carry

268
00:11:19,600 --> 00:11:21,839
search and then i got seven unique

269
00:11:21,839 --> 00:11:24,800
results youtube search by carrying the

270
00:11:24,800 --> 00:11:28,399
api i got 117 a security trails came

271
00:11:28,399 --> 00:11:32,160
back with 33 results and passive total

272
00:11:32,160 --> 00:11:35,920
with just one from risk iq

273
00:11:35,920 --> 00:11:38,640
but the the true results are that only

274
00:11:38,640 --> 00:11:42,079
37 percent of the dna the the domains

275
00:11:42,079 --> 00:11:44,160
that i found was valid

276
00:11:44,160 --> 00:11:48,560
so 62 of that was old enough for us this

277
00:11:48,560 --> 00:11:50,240
was not valid at all

278
00:11:50,240 --> 00:11:52,560
and the most percentage of valid dns

279
00:11:52,560 --> 00:11:55,279
came from security trails followed by

280
00:11:55,279 --> 00:11:58,240
github carry so passive total it's just

281
00:11:58,240 --> 00:12:00,720
a little bit

282
00:12:03,120 --> 00:12:05,519
another service that i tried to

283
00:12:05,519 --> 00:12:06,560
explore

284
00:12:06,560 --> 00:12:08,639
was the amazon eq

285
00:12:08,639 --> 00:12:11,680
and when you create an amazon enemy cube

286
00:12:11,680 --> 00:12:13,839
by default you have to two kinds of them

287
00:12:13,839 --> 00:12:16,720
eqs to choose to two kinds of cues to

288
00:12:16,720 --> 00:12:18,959
choose you can choose between rapture

289
00:12:18,959 --> 00:12:21,600
mcq and activity queue

290
00:12:21,600 --> 00:12:24,000
when you create an active maq

291
00:12:24,000 --> 00:12:26,560
but by default it's created inside a vpc

292
00:12:26,560 --> 00:12:28,560
and it has a security group to protect

293
00:12:28,560 --> 00:12:29,680
it

294
00:12:29,680 --> 00:12:31,600
so it's not directly exposed to the

295
00:12:31,600 --> 00:12:33,120
internet

296
00:12:33,120 --> 00:12:34,480
unless

297
00:12:34,480 --> 00:12:36,240
the administrator changed the security

298
00:12:36,240 --> 00:12:40,000
group to allow zero zero zero inbound

299
00:12:40,000 --> 00:12:42,720
but when you create a rabbitmiq

300
00:12:42,720 --> 00:12:44,639
in the other hand it's all exposed

301
00:12:44,639 --> 00:12:47,040
directly to the internet so it's only

302
00:12:47,040 --> 00:12:48,880
protect by logging in password that you

303
00:12:48,880 --> 00:12:52,000
create when you create the webgmq

304
00:12:52,000 --> 00:12:54,639
right so i was able to find more than

305
00:12:54,639 --> 00:12:56,000
four thousand

306
00:12:56,000 --> 00:13:00,079
uh rabbiting queues in showdom

307
00:13:00,079 --> 00:13:01,279
and

308
00:13:01,279 --> 00:13:03,040
that's pretty straightforward

309
00:13:03,040 --> 00:13:04,480
and

310
00:13:04,480 --> 00:13:07,600
for the rest i was able to find around

311
00:13:07,600 --> 00:13:11,279
1500 uh a mass find domain two and stock

312
00:13:11,279 --> 00:13:15,200
github five on github search and 145 in

313
00:13:15,200 --> 00:13:17,200
security trails and none on passive

314
00:13:17,200 --> 00:13:19,120
total

315
00:13:19,120 --> 00:13:22,000
but well this is the print screen from

316
00:13:22,000 --> 00:13:23,440
from schroder

317
00:13:23,440 --> 00:13:27,279
so just uh we have a 116

318
00:13:27,279 --> 00:13:30,560
600 only for our usc 21

319
00:13:30,560 --> 00:13:31,839
and it's pretty straightforward just

320
00:13:31,839 --> 00:13:33,120
click it on

321
00:13:33,120 --> 00:13:35,200
if you know the username and the the

322
00:13:35,200 --> 00:13:37,839
password you can just log in and and see

323
00:13:37,839 --> 00:13:39,519
the queue

324
00:13:39,519 --> 00:13:40,320
right

325
00:13:40,320 --> 00:13:41,600
but well

326
00:13:41,600 --> 00:13:44,240
but what about unique urls

327
00:13:44,240 --> 00:13:47,680
uh we found around

328
00:13:47,680 --> 00:13:49,120
to 200

329
00:13:49,120 --> 00:13:52,720
300 around something unique urls but the

330
00:13:52,720 --> 00:13:55,519
most valid unique roles came from ms and

331
00:13:55,519 --> 00:13:56,639
phi domain

332
00:13:56,639 --> 00:13:59,360
if you check

333
00:13:59,360 --> 00:14:02,480
whose lights before

334
00:14:02,480 --> 00:14:07,000
msfi domain has 563

335
00:14:07,440 --> 00:14:10,880
unique urls and security trails has 145

336
00:14:10,880 --> 00:14:13,040
but when we get when you check for valid

337
00:14:13,040 --> 00:14:16,480
urls security trails is almost close to

338
00:14:16,480 --> 00:14:18,399
ms and phi domain

339
00:14:18,399 --> 00:14:19,519
so

340
00:14:19,519 --> 00:14:21,519
yeah and and you remember that when i

341
00:14:21,519 --> 00:14:23,440
say the hfmcu that you have to change

342
00:14:23,440 --> 00:14:26,079
execute group to allow zero zero zero

343
00:14:26,079 --> 00:14:29,199
inbounds yeah we found at least 30 cases

344
00:14:29,199 --> 00:14:31,760
where the admins did just that so i was

345
00:14:31,760 --> 00:14:34,639
able to access the console of the

346
00:14:34,639 --> 00:14:36,079
activemeq

347
00:14:36,079 --> 00:14:39,040
by just

348
00:14:39,040 --> 00:14:42,720
doing a http get on the url and the

349
00:14:42,720 --> 00:14:46,560
party par2h1 me 62.

350
00:14:47,600 --> 00:14:48,880
yeah well

351
00:14:48,880 --> 00:14:49,920
another

352
00:14:49,920 --> 00:14:52,959
uh managed service that i tried to

353
00:14:52,959 --> 00:14:55,680
explore was amazon cloud search

354
00:14:55,680 --> 00:14:57,360
and amazon implements

355
00:14:57,360 --> 00:14:59,279
an elastic load balance in front of the

356
00:14:59,279 --> 00:15:00,480
cloud search

357
00:15:00,480 --> 00:15:01,360
so

358
00:15:01,360 --> 00:15:04,720
and one interesting thing to note that

359
00:15:04,720 --> 00:15:05,680
uh

360
00:15:05,680 --> 00:15:07,760
the cloud search you have to choose a

361
00:15:07,760 --> 00:15:09,920
name then came the random

362
00:15:09,920 --> 00:15:12,399
stream the region cloud searching amazon

363
00:15:12,399 --> 00:15:15,680
aws from the url so looking for that and

364
00:15:15,680 --> 00:15:18,800
show them i could reach at least 38

365
00:15:18,800 --> 00:15:20,079
000

366
00:15:20,079 --> 00:15:20,800
uh

367
00:15:20,800 --> 00:15:22,000
cloud search

368
00:15:22,000 --> 00:15:24,240
servers on the internet but in

369
00:15:24,240 --> 00:15:26,240
chardonnay jones you only have the ip

370
00:15:26,240 --> 00:15:29,600
address so as amazon implements a last

371
00:15:29,600 --> 00:15:31,920
load balance in front of it without

372
00:15:31,920 --> 00:15:34,240
knowing the dns

373
00:15:34,240 --> 00:15:36,720
we are not unable to to get the correct

374
00:15:36,720 --> 00:15:38,480
v12 host

375
00:15:38,480 --> 00:15:41,199
which leads us to only a mass github and

376
00:15:41,199 --> 00:15:43,600
passive then yes as data sources

377
00:15:43,600 --> 00:15:45,920
and

378
00:15:46,000 --> 00:15:48,560
for those data sources

379
00:15:48,560 --> 00:15:50,959
i tried to check if the nes was valid

380
00:15:50,959 --> 00:15:53,759
and and try to do an unauthenticated

381
00:15:53,759 --> 00:15:56,480
research for letters e or a

382
00:15:56,480 --> 00:15:58,399
because i choose those letters because

383
00:15:58,399 --> 00:16:00,240
they are really common in almost all

384
00:16:00,240 --> 00:16:03,199
languages and if there is the resource

385
00:16:03,199 --> 00:16:06,320
policy of the cloud search was set to

386
00:16:06,320 --> 00:16:07,279
star

387
00:16:07,279 --> 00:16:09,040
i would be able to

388
00:16:09,040 --> 00:16:10,800
carry those

389
00:16:10,800 --> 00:16:12,079
those letters

390
00:16:12,079 --> 00:16:14,240
right

391
00:16:14,240 --> 00:16:15,680
so yeah

392
00:16:15,680 --> 00:16:18,320
just checking by valid dnas i found that

393
00:16:18,320 --> 00:16:21,040
security trails was the most privileged

394
00:16:21,040 --> 00:16:22,880
with more than 30

395
00:16:22,880 --> 00:16:25,519
a mass fan domain around 10 and passive

396
00:16:25,519 --> 00:16:28,959
the mes if only two

397
00:16:28,959 --> 00:16:32,320
valid dns but on those 42 valid dns that

398
00:16:32,320 --> 00:16:36,560
i found i was able to reach at least 609

399
00:16:36,560 --> 00:16:39,440
000 documents so it's a

400
00:16:39,440 --> 00:16:41,680
huge amount of data

401
00:16:41,680 --> 00:16:43,920
right

402
00:16:44,959 --> 00:16:46,000
well

403
00:16:46,000 --> 00:16:48,000
and another service that i tried to

404
00:16:48,000 --> 00:16:51,120
explore through explore was amazon sqs

405
00:16:51,120 --> 00:16:54,320
and amazon sqs are exposed by uh

406
00:16:54,320 --> 00:16:57,360
url so it's kind of tricky because if

407
00:16:57,360 --> 00:17:01,399
you have an url uh all the

408
00:17:01,399 --> 00:17:03,759
sksregion.amazonaws.com are valid they

409
00:17:03,759 --> 00:17:05,839
resolve for our ap address

410
00:17:05,839 --> 00:17:08,000
but the queue must exist might exist

411
00:17:08,000 --> 00:17:10,480
here or not so

412
00:17:10,480 --> 00:17:13,119
that completely er

413
00:17:13,119 --> 00:17:15,359
makes passive url your subdomain

414
00:17:15,359 --> 00:17:17,280
enumeration technique is completely

415
00:17:17,280 --> 00:17:18,720
ineffective

416
00:17:18,720 --> 00:17:21,439
so we only had historical github and

417
00:17:21,439 --> 00:17:24,000
github search to try to hunting for

418
00:17:24,000 --> 00:17:27,280
amazon sqs

419
00:17:29,039 --> 00:17:31,679
and by doing this research i just found

420
00:17:31,679 --> 00:17:33,600
that

421
00:17:33,600 --> 00:17:37,159
more than 450

422
00:17:39,120 --> 00:17:41,760
urls from github historical

423
00:17:41,760 --> 00:17:45,200
was not public so i couldn't read or

424
00:17:45,200 --> 00:17:48,640
write but i found that at least training

425
00:17:48,640 --> 00:17:52,400
was public readable and at least 19 or

426
00:17:52,400 --> 00:17:54,799
19 of that

427
00:17:54,799 --> 00:17:57,679
sqs are readable and writable

428
00:17:57,679 --> 00:17:59,679
this interesting part of the public

429
00:17:59,679 --> 00:18:01,840
readable is that you can intercept the

430
00:18:01,840 --> 00:18:04,720
messages from their pipeline and perhaps

431
00:18:04,720 --> 00:18:07,440
get some important piece of information

432
00:18:07,440 --> 00:18:10,960
and for those who are publicly writable

433
00:18:10,960 --> 00:18:12,480
it can lead for more serious

434
00:18:12,480 --> 00:18:15,360
vulnerabilities like ssrf

435
00:18:15,360 --> 00:18:17,919
or any remote cause execution by just

436
00:18:17,919 --> 00:18:20,960
depending which part of the code will

437
00:18:20,960 --> 00:18:23,760
consume the messages from the queue

438
00:18:23,760 --> 00:18:26,160
for instance if we have a lambda

439
00:18:26,160 --> 00:18:28,160
with some kind of vulnerability and we

440
00:18:28,160 --> 00:18:30,080
will be able to write anything that we

441
00:18:30,080 --> 00:18:31,440
want

442
00:18:31,440 --> 00:18:35,039
unexpected to that lambda would be

443
00:18:35,039 --> 00:18:38,000
might exploitable

444
00:18:40,240 --> 00:18:42,640
and the other services that i

445
00:18:42,640 --> 00:18:46,480
i tried to reach was amazon red shift

446
00:18:46,480 --> 00:18:50,160
and amazon redshift to uh it's like a

447
00:18:50,160 --> 00:18:52,559
a post-grid database like a cluster of

448
00:18:52,559 --> 00:18:54,559
data warehouse

449
00:18:54,559 --> 00:18:57,039
and also uh amazon exposed red shift

450
00:18:57,039 --> 00:18:59,360
through genius entries so

451
00:18:59,360 --> 00:19:01,840
every time amazon exposes something as

452
00:19:01,840 --> 00:19:04,320
the neic entries it's like uh one two

453
00:19:04,320 --> 00:19:05,120
one

454
00:19:05,120 --> 00:19:05,919
for

455
00:19:05,919 --> 00:19:09,440
dnas in ib address when it's by

456
00:19:09,440 --> 00:19:11,760
a last load balance you might have two

457
00:19:11,760 --> 00:19:17,200
ip address or more for that entry so

458
00:19:17,919 --> 00:19:20,799
it's kind of easiest to find uh amazon

459
00:19:20,799 --> 00:19:23,200
red shift so

460
00:19:23,200 --> 00:19:25,760
to public expose a redshift database to

461
00:19:25,760 --> 00:19:27,760
the internet you must

462
00:19:27,760 --> 00:19:30,480
one create an elastic ap address and

463
00:19:30,480 --> 00:19:32,480
then configuring the red shift to use

464
00:19:32,480 --> 00:19:35,280
the elastic ep address to train to use

465
00:19:35,280 --> 00:19:38,000
that elastic address you created before

466
00:19:38,000 --> 00:19:39,600
and then you have to change the security

467
00:19:39,600 --> 00:19:42,000
group to a low zero zero zero zero

468
00:19:42,000 --> 00:19:43,600
inbound

469
00:19:43,600 --> 00:19:46,240
for red shift uh amazon fine domain was

470
00:19:46,240 --> 00:19:49,120
able to find only 42 results

471
00:19:49,120 --> 00:19:51,600
start co git hub only seven github

472
00:19:51,600 --> 00:19:54,720
search around 192 and security trails

473
00:19:54,720 --> 00:19:58,320
226 pacific total only two

474
00:19:58,320 --> 00:19:59,520
but

475
00:19:59,520 --> 00:20:02,240
checking by if they are valid or not on

476
00:20:02,240 --> 00:20:03,200
the

477
00:20:03,200 --> 00:20:04,880
nes

478
00:20:04,880 --> 00:20:07,200
mostly the part of security trails were

479
00:20:07,200 --> 00:20:08,640
valid

480
00:20:08,640 --> 00:20:11,760
uh that is a ip address that resolve to

481
00:20:11,760 --> 00:20:12,480
that

482
00:20:12,480 --> 00:20:13,919
dns

483
00:20:13,919 --> 00:20:16,320
and for github care it's

484
00:20:16,320 --> 00:20:20,080
less than a massify domain so ms5 domain

485
00:20:20,080 --> 00:20:22,960
was able to find that 19 percent of

486
00:20:22,960 --> 00:20:27,360
valid dns by source instead of uh

487
00:20:27,360 --> 00:20:30,240
github carry

488
00:20:30,240 --> 00:20:31,840
right and

489
00:20:31,840 --> 00:20:34,559
one interesting thing to note

490
00:20:34,559 --> 00:20:37,039
is that

491
00:20:40,559 --> 00:20:42,799
sorry

492
00:20:42,799 --> 00:20:45,440
there's a thing to note is that

493
00:20:45,440 --> 00:20:47,360
i couldn't find any

494
00:20:47,360 --> 00:20:49,600
uh amazon red shift public exposed to

495
00:20:49,600 --> 00:20:52,640
the internet so can i hear an hallelujah

496
00:20:52,640 --> 00:20:53,760
yep

497
00:20:53,760 --> 00:20:56,799
at least one good thing

498
00:20:57,679 --> 00:21:00,400
so and the last service that i tried to

499
00:21:00,400 --> 00:21:03,919
to find and trying to explore was aws

500
00:21:03,919 --> 00:21:06,240
manager elasticsearch

501
00:21:06,240 --> 00:21:08,640
and when you create an elastic search

502
00:21:08,640 --> 00:21:10,320
you have to choose if you want to create

503
00:21:10,320 --> 00:21:13,280
it public or inside a vpc when you

504
00:21:13,280 --> 00:21:15,200
create it inside a vpc you get the

505
00:21:15,200 --> 00:21:18,480
following host name you got the vpc

506
00:21:18,480 --> 00:21:21,840
that dash name dash random stream

507
00:21:21,840 --> 00:21:25,600
that dot region dot a yes amazon.com and

508
00:21:25,600 --> 00:21:27,840
when you create a public one

509
00:21:27,840 --> 00:21:29,360
which means that they're reachable from

510
00:21:29,360 --> 00:21:30,799
the internet

511
00:21:30,799 --> 00:21:33,919
you have the host name like search slash

512
00:21:33,919 --> 00:21:38,640
name random region yes amazonws.com

513
00:21:38,640 --> 00:21:39,520
and

514
00:21:39,520 --> 00:21:42,640
elasticsearch is also exposed through

515
00:21:42,640 --> 00:21:45,360
a last load balance so we needed to know

516
00:21:45,360 --> 00:21:48,159
the name the exactly name from the host

517
00:21:48,159 --> 00:21:49,520
to to get the

518
00:21:49,520 --> 00:21:51,200
executive host

519
00:21:51,200 --> 00:21:53,280
and for elasticsearch you can also

520
00:21:53,280 --> 00:21:56,320
choose uh the type of authentication so

521
00:21:56,320 --> 00:21:58,960
you can choose between cognitive based

522
00:21:58,960 --> 00:22:03,280
galv from http yeah aim none

523
00:22:03,280 --> 00:22:04,240
and

524
00:22:04,240 --> 00:22:05,600
a little bit more

525
00:22:05,600 --> 00:22:08,000
a little

526
00:22:08,000 --> 00:22:09,919
open distro has another configuration

527
00:22:09,919 --> 00:22:11,280
that's a bit more

528
00:22:11,280 --> 00:22:13,280
specific

529
00:22:13,280 --> 00:22:15,679
well but looking for our public classic

530
00:22:15,679 --> 00:22:18,770
searchers scott piper published an uh

531
00:22:18,770 --> 00:22:20,000
[Music]

532
00:22:20,000 --> 00:22:21,039
on a

533
00:22:21,039 --> 00:22:22,720
forward cloud sec

534
00:22:22,720 --> 00:22:24,000
slack group

535
00:22:24,000 --> 00:22:27,159
that he was able to find at one year ago

536
00:22:27,159 --> 00:22:31,600
387 public aws managerial searches

537
00:22:31,600 --> 00:22:33,120
and the last time he departed in

538
00:22:33,120 --> 00:22:36,640
february he were able to find 359 he

539
00:22:36,640 --> 00:22:38,320
advised to

540
00:22:38,320 --> 00:22:41,200
to aws to close those

541
00:22:41,200 --> 00:22:44,320
publicly reachable aws manager services

542
00:22:44,320 --> 00:22:47,919
and i try to reproduce his his search

543
00:22:47,919 --> 00:22:50,400
and are only able to find five so yeah

544
00:22:50,400 --> 00:22:54,559
aws made a really good job closing those

545
00:22:54,559 --> 00:22:56,320
publicly

546
00:22:56,320 --> 00:22:59,280
managed searches but what i believe they

547
00:22:59,280 --> 00:23:02,240
what they did is was to put a load

548
00:23:02,240 --> 00:23:04,640
balance in front of them so we couldn't

549
00:23:04,640 --> 00:23:06,799
be able to reach them directly by ap

550
00:23:06,799 --> 00:23:09,799
address

551
00:23:10,720 --> 00:23:12,559
well some stats from energy

552
00:23:12,559 --> 00:23:15,120
elasticsearch

553
00:23:15,120 --> 00:23:15,840
by

554
00:23:15,840 --> 00:23:19,039
looking for a valid genius per source

555
00:23:19,039 --> 00:23:20,880
security traders was able to find more

556
00:23:20,880 --> 00:23:22,880
than a thousand

557
00:23:22,880 --> 00:23:25,520
valedic violence dnas

558
00:23:25,520 --> 00:23:28,240
followed by passive total amassed domain

559
00:23:28,240 --> 00:23:30,799
which had carried historical was

560
00:23:30,799 --> 00:23:32,559
way down

561
00:23:32,559 --> 00:23:35,360
but the percent of veg valid dns that i

562
00:23:35,360 --> 00:23:38,559
found was only 41 percent so 41 percent

563
00:23:38,559 --> 00:23:40,720
of the all the the hosts that i found

564
00:23:40,720 --> 00:23:43,360
was valid

565
00:23:44,799 --> 00:23:47,600
right well and those in

566
00:23:47,600 --> 00:23:51,120
those who are valid and i try to to get

567
00:23:51,120 --> 00:23:53,440
to some information i

568
00:23:53,440 --> 00:23:56,559
was able to determine that modern 800

569
00:23:56,559 --> 00:23:58,000
was the

570
00:23:58,000 --> 00:24:01,360
iim authentication type

571
00:24:01,360 --> 00:24:04,640
a little bit more than 100 was open to

572
00:24:04,640 --> 00:24:05,840
the internet

573
00:24:05,840 --> 00:24:07,279
and

574
00:24:07,279 --> 00:24:09,360
some a little bit less than 100 has

575
00:24:09,360 --> 00:24:11,840
basic authentication

576
00:24:11,840 --> 00:24:14,320
and for those who which were open i

577
00:24:14,320 --> 00:24:15,840
counted uh

578
00:24:15,840 --> 00:24:17,200
11 000

579
00:24:17,200 --> 00:24:20,400
number of indexes and at least 5.1

580
00:24:20,400 --> 00:24:23,120
terabytes of data that was exposable to

581
00:24:23,120 --> 00:24:26,479
the internet as well

582
00:24:27,360 --> 00:24:29,679
and when we try to understand which data

583
00:24:29,679 --> 00:24:32,400
sources are public by source we found

584
00:24:32,400 --> 00:24:34,559
that security trails

585
00:24:34,559 --> 00:24:36,799
were has 58 percent

586
00:24:36,799 --> 00:24:38,720
of the publicly open

587
00:24:38,720 --> 00:24:41,120
elastic search managers

588
00:24:41,120 --> 00:24:43,919
but when we try to to

589
00:24:43,919 --> 00:24:47,039
compare that with the amount of

590
00:24:47,039 --> 00:24:50,559
data that was exposed disposable mass

591
00:24:50,559 --> 00:24:52,960
with fine domain has more than 40

592
00:24:52,960 --> 00:24:54,320
percent of that

593
00:24:54,320 --> 00:24:55,760
so

594
00:24:55,760 --> 00:24:57,279
if you're trying to look for exposed

595
00:24:57,279 --> 00:25:01,679
data amazon domains are a bit more uh

596
00:25:01,679 --> 00:25:03,200
better than security traders in that

597
00:25:03,200 --> 00:25:05,039
case

598
00:25:05,039 --> 00:25:06,799
so

599
00:25:06,799 --> 00:25:09,440
yeah

600
00:25:09,440 --> 00:25:11,760
so some closing thoughts

601
00:25:11,760 --> 00:25:14,400
well take the shared responsibility

602
00:25:14,400 --> 00:25:17,200
model seriously and please

603
00:25:17,200 --> 00:25:20,720
do it well make sure you're not exposing

604
00:25:20,720 --> 00:25:21,919
any of your

605
00:25:21,919 --> 00:25:23,520
data

606
00:25:23,520 --> 00:25:26,080
find em resource policies data low

607
00:25:26,080 --> 00:25:27,200
principle

608
00:25:27,200 --> 00:25:30,000
star or equivalent and for this you can

609
00:25:30,000 --> 00:25:32,960
use some security tools to automatically

610
00:25:32,960 --> 00:25:34,559
detect and mitigate those kind of

611
00:25:34,559 --> 00:25:36,799
misconceptions configurations for

612
00:25:36,799 --> 00:25:38,799
instance cspm

613
00:25:38,799 --> 00:25:41,360
security hub or security hub or aws

614
00:25:41,360 --> 00:25:42,799
config rules

615
00:25:42,799 --> 00:25:44,880
and during the dynamic nature of the

616
00:25:44,880 --> 00:25:48,320
clouds historical github uh make data

617
00:25:48,320 --> 00:25:50,799
was obsolete so

618
00:25:50,799 --> 00:25:53,600
as the data stops in 2019 most of the

619
00:25:53,600 --> 00:25:55,440
services who were created

620
00:25:55,440 --> 00:25:59,360
and destroyed by them

621
00:25:59,360 --> 00:26:02,159
were not on validity anymore so we spent

622
00:26:02,159 --> 00:26:05,600
around 250 dollars in big carry searches

623
00:26:05,600 --> 00:26:07,760
for almost no valid hits

624
00:26:07,760 --> 00:26:11,039
so yeah sorry boss well

625
00:26:11,039 --> 00:26:13,200
and passive ness has a partial

626
00:26:13,200 --> 00:26:15,440
visibility of the cloud infrastructure

627
00:26:15,440 --> 00:26:17,200
but is still a good source for hunting

628
00:26:17,200 --> 00:26:20,640
for aws managing resources

629
00:26:20,640 --> 00:26:23,640
so

630
00:26:24,000 --> 00:26:26,480
yeah that's all that i have for today

631
00:26:26,480 --> 00:26:28,400
guys

632
00:26:28,400 --> 00:26:32,400
do i have time for questions

