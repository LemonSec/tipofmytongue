1
00:00:03,919 --> 00:00:06,960
hello everyone

2
00:00:04,960 --> 00:00:08,639
welcome and thanks for stopping by my

3
00:00:06,960 --> 00:00:11,200
session purple sharp

4
00:00:08,639 --> 00:00:12,000
automated adversary simulation really

5
00:00:11,200 --> 00:00:14,480
happy to be

6
00:00:12,000 --> 00:00:15,519
in this first adversary village at

7
00:00:14,480 --> 00:00:17,920
defcon

8
00:00:15,519 --> 00:00:19,760
um and yeah during the next 30 minutes

9
00:00:17,920 --> 00:00:20,560
what i want to do is i'd like to present

10
00:00:19,760 --> 00:00:22,560
to you

11
00:00:20,560 --> 00:00:24,640
the adversary simulation tool i've been

12
00:00:22,560 --> 00:00:25,920
working on for the past couple of years

13
00:00:24,640 --> 00:00:28,400
now on and off

14
00:00:25,920 --> 00:00:31,039
called purple sharp my goal with this

15
00:00:28,400 --> 00:00:33,840
session and the tool itself is to

16
00:00:31,039 --> 00:00:34,559
encourage other encourage detection

17
00:00:33,840 --> 00:00:37,680
teams to

18
00:00:34,559 --> 00:00:39,040
integrate adversary simulation exercises

19
00:00:37,680 --> 00:00:41,120
and practices

20
00:00:39,040 --> 00:00:44,320
into their detection program so to

21
00:00:41,120 --> 00:00:46,320
enhance the detection programs

22
00:00:44,320 --> 00:00:47,440
so yeah hopefully this is helpful to for

23
00:00:46,320 --> 00:00:50,399
some of you and

24
00:00:47,440 --> 00:00:52,480
let's go ahead and start so we'll start

25
00:00:50,399 --> 00:00:54,800
with a quick introduction

26
00:00:52,480 --> 00:00:57,120
first of all let me introduce myself my

27
00:00:54,800 --> 00:00:59,520
name is mauricio velasco

28
00:00:57,120 --> 00:01:01,440
i'm currently a part of a splunk's

29
00:00:59,520 --> 00:01:05,119
threat research team

30
00:01:01,440 --> 00:01:06,560
before that i used to be i used to be

31
00:01:05,119 --> 00:01:09,200
part of a blue team i would

32
00:01:06,560 --> 00:01:11,439
i used to run the threat management team

33
00:01:09,200 --> 00:01:13,280
or the detection team for a fortune 500

34
00:01:11,439 --> 00:01:15,040
organization

35
00:01:13,280 --> 00:01:17,439
did that for a few years and before that

36
00:01:15,040 --> 00:01:19,360
i was a pen tester

37
00:01:17,439 --> 00:01:20,560
i love meeting new people and chatting

38
00:01:19,360 --> 00:01:22,320
about infosec

39
00:01:20,560 --> 00:01:23,920
and interesting topics so i'll leave you

40
00:01:22,320 --> 00:01:25,840
my twitter account here

41
00:01:23,920 --> 00:01:28,240
where i share my work other people's

42
00:01:25,840 --> 00:01:29,920
work so do follow me on twitter

43
00:01:28,240 --> 00:01:32,640
if you are interested about adversary

44
00:01:29,920 --> 00:01:33,600
simulation threat hunting detection

45
00:01:32,640 --> 00:01:36,240
engineering

46
00:01:33,600 --> 00:01:37,920
i invite you to visit my github page

47
00:01:36,240 --> 00:01:40,880
where you'll find resources

48
00:01:37,920 --> 00:01:41,200
for the work i've done in the past years

49
00:01:40,880 --> 00:01:43,200
and

50
00:01:41,200 --> 00:01:45,280
some of the talks i've given the tools

51
00:01:43,200 --> 00:01:48,479
i've released etc

52
00:01:45,280 --> 00:01:49,759
um but okay let's let's move on so today

53
00:01:48,479 --> 00:01:52,320
i want to start

54
00:01:49,759 --> 00:01:53,119
talking about why i wrote purple sharp

55
00:01:52,320 --> 00:01:56,320
and

56
00:01:53,119 --> 00:01:58,399
um so as i mentioned before before

57
00:01:56,320 --> 00:02:00,079
uh being a threat researcher i used to

58
00:01:58,399 --> 00:02:03,280
run a blue team and specifically

59
00:02:00,079 --> 00:02:04,240
i built and and deployed a detection

60
00:02:03,280 --> 00:02:05,920
program

61
00:02:04,240 --> 00:02:08,000
and when i was building a detection

62
00:02:05,920 --> 00:02:11,680
program i learned a lot of things from

63
00:02:08,000 --> 00:02:13,360
from being a blue team but one lesson i

64
00:02:11,680 --> 00:02:16,560
think i learned that was the most

65
00:02:13,360 --> 00:02:17,920
important lesson about um about leading

66
00:02:16,560 --> 00:02:19,280
a detection program

67
00:02:17,920 --> 00:02:22,720
and i want to share with that with you

68
00:02:19,280 --> 00:02:25,840
guys i firmly believe

69
00:02:22,720 --> 00:02:26,720
that detection engineers need the

70
00:02:25,840 --> 00:02:29,599
capability

71
00:02:26,720 --> 00:02:30,560
to generate attack telemetry in order to

72
00:02:29,599 --> 00:02:33,760
be successful

73
00:02:30,560 --> 00:02:34,560
at their jobs imagine a scenario where

74
00:02:33,760 --> 00:02:37,040
we have

75
00:02:34,560 --> 00:02:38,959
we have instrumented an environment

76
00:02:37,040 --> 00:02:41,120
where we are

77
00:02:38,959 --> 00:02:42,000
getting telemetry from networks

78
00:02:41,120 --> 00:02:44,239
endpoints

79
00:02:42,000 --> 00:02:46,239
applications and you're centralizing

80
00:02:44,239 --> 00:02:48,480
that to an event pipeline

81
00:02:46,239 --> 00:02:50,000
um through an analytics engine like a

82
00:02:48,480 --> 00:02:52,879
sim or something like that right

83
00:02:50,000 --> 00:02:55,440
and detection engineers are creating

84
00:02:52,879 --> 00:02:57,840
detection supporting detections

85
00:02:55,440 --> 00:03:00,560
uh maintaining this this complex

86
00:02:57,840 --> 00:03:00,560
architecture

87
00:03:00,800 --> 00:03:06,000
when i was doing this i realized that

88
00:03:04,159 --> 00:03:08,319
we can have all the data all the

89
00:03:06,000 --> 00:03:11,120
telemetry but if we don't have that

90
00:03:08,319 --> 00:03:11,440
telemetry generated by attack techniques

91
00:03:11,120 --> 00:03:13,599
by

92
00:03:11,440 --> 00:03:15,680
executing the technique detections

93
00:03:13,599 --> 00:03:18,319
engineers are always going to be limited

94
00:03:15,680 --> 00:03:19,840
because you cannot write a detection if

95
00:03:18,319 --> 00:03:22,239
you don't know if you don't know

96
00:03:19,840 --> 00:03:24,720
how an attack looks like right so like i

97
00:03:22,239 --> 00:03:27,519
firmly believe that a detection team

98
00:03:24,720 --> 00:03:28,480
needs the capability to generate attack

99
00:03:27,519 --> 00:03:32,080
telemetry

100
00:03:28,480 --> 00:03:34,159
in other words i think detection teams

101
00:03:32,080 --> 00:03:36,080
need the capability to simulate

102
00:03:34,159 --> 00:03:38,720
techniques to simulate

103
00:03:36,080 --> 00:03:40,879
attack techniques and this is why i

104
00:03:38,720 --> 00:03:43,120
wrote purple sharp right

105
00:03:40,879 --> 00:03:45,840
purple sharp is an adversary simulation

106
00:03:43,120 --> 00:03:47,519
tool that executes adversary techniques

107
00:03:45,840 --> 00:03:49,519
within windows active directory

108
00:03:47,519 --> 00:03:51,360
environments

109
00:03:49,519 --> 00:03:53,040
it follows the attack miner framework

110
00:03:51,360 --> 00:03:55,280
you know for

111
00:03:53,040 --> 00:03:56,080
organization of the techniques it's

112
00:03:55,280 --> 00:03:59,280
written in c

113
00:03:56,080 --> 00:04:01,360
sharp um so for for the attack

114
00:03:59,280 --> 00:04:05,040
simulations what i use is

115
00:04:01,360 --> 00:04:08,720
that net libraries wherever possible and

116
00:04:05,040 --> 00:04:11,920
windows 32 api calls where i can

117
00:04:08,720 --> 00:04:13,200
and its main goal is to generate the

118
00:04:11,920 --> 00:04:16,000
attack telemetry

119
00:04:13,200 --> 00:04:16,479
that enables detection teams to build

120
00:04:16,000 --> 00:04:20,160
test

121
00:04:16,479 --> 00:04:22,160
and enhance detection controls okay

122
00:04:20,160 --> 00:04:23,840
that's the main goal of the tool one

123
00:04:22,160 --> 00:04:26,160
interesting thing is that

124
00:04:23,840 --> 00:04:27,520
purple sharp is not weaponized even

125
00:04:26,160 --> 00:04:31,040
though it executes

126
00:04:27,520 --> 00:04:31,600
techniques it doesn't provide the output

127
00:04:31,040 --> 00:04:34,240
to the

128
00:04:31,600 --> 00:04:35,120
to the operator so it's not weaponized

129
00:04:34,240 --> 00:04:37,199
for example

130
00:04:35,120 --> 00:04:39,520
when i'm doing a curve roasting attack

131
00:04:37,199 --> 00:04:42,720
even though i'm getting a service ticket

132
00:04:39,520 --> 00:04:44,320
for that spn i don't get the hash back i

133
00:04:42,720 --> 00:04:47,919
don't present the hashtag

134
00:04:44,320 --> 00:04:48,479
um so it executes techniques but it

135
00:04:47,919 --> 00:04:50,320
doesn't

136
00:04:48,479 --> 00:04:51,919
provide the output and it doesn't help

137
00:04:50,320 --> 00:04:55,520
you in a red team that's why

138
00:04:51,919 --> 00:04:56,320
it's what i call um adversary simulation

139
00:04:55,520 --> 00:04:58,639
right because

140
00:04:56,320 --> 00:05:00,240
if the goal is to execute the technique

141
00:04:58,639 --> 00:05:02,160
to generate the telemetry

142
00:05:00,240 --> 00:05:04,479
and not necessarily to execute the

143
00:05:02,160 --> 00:05:07,600
technique to move on to a different goal

144
00:05:04,479 --> 00:05:10,639
like a red team or a pentest would do

145
00:05:07,600 --> 00:05:13,280
so now let's let's dive deep into uh

146
00:05:10,639 --> 00:05:14,000
purple sharp and how it works okay let's

147
00:05:13,280 --> 00:05:15,840
and then

148
00:05:14,000 --> 00:05:17,680
after that we'll we're gonna go to some

149
00:05:15,840 --> 00:05:19,919
demos

150
00:05:17,680 --> 00:05:22,000
okay so there's five points i want to go

151
00:05:19,919 --> 00:05:24,720
over real quick uh in the next

152
00:05:22,000 --> 00:05:25,919
eight to eight ten minutes uh around

153
00:05:24,720 --> 00:05:28,960
purple sharp

154
00:05:25,919 --> 00:05:31,759
and um why i think it's uh different and

155
00:05:28,960 --> 00:05:35,360
why i think it's helpful

156
00:05:31,759 --> 00:05:36,800
so first flexibility purple sharp is

157
00:05:35,360 --> 00:05:39,440
flexible it's a simple c

158
00:05:36,800 --> 00:05:40,160
sharp assembly right when i was when we

159
00:05:39,440 --> 00:05:42,240
used to do

160
00:05:40,160 --> 00:05:44,160
adversary simulation exercises in my

161
00:05:42,240 --> 00:05:45,919
previous job at the beginning

162
00:05:44,160 --> 00:05:47,600
uh what we would do is you know work

163
00:05:45,919 --> 00:05:49,600
with command and control frameworks

164
00:05:47,600 --> 00:05:50,880
like open source and commercial both of

165
00:05:49,600 --> 00:05:53,600
them right but

166
00:05:50,880 --> 00:05:54,880
we would always lose time on setting up

167
00:05:53,600 --> 00:05:57,280
the infrastructure

168
00:05:54,880 --> 00:05:58,720
getting a shell back infecting that hose

169
00:05:57,280 --> 00:06:00,400
getting a payload

170
00:05:58,720 --> 00:06:01,919
and don't get me wrong they definitely

171
00:06:00,400 --> 00:06:03,919
work well right

172
00:06:01,919 --> 00:06:06,479
but we needed we needed to be a little

173
00:06:03,919 --> 00:06:07,440
bit more flexible a little bit faster

174
00:06:06,479 --> 00:06:08,960
right

175
00:06:07,440 --> 00:06:10,880
so now with purple sharp all i have to

176
00:06:08,960 --> 00:06:12,720
do is drop that c sharp binary

177
00:06:10,880 --> 00:06:14,160
and run it right like no command and

178
00:06:12,720 --> 00:06:17,280
control no pain

179
00:06:14,160 --> 00:06:20,880
no um um you know reverse shells

180
00:06:17,280 --> 00:06:24,560
or anything like that um another thing

181
00:06:20,880 --> 00:06:27,280
is that we for purple sharp supports

182
00:06:24,560 --> 00:06:28,080
json simulation playbooks a lot of other

183
00:06:27,280 --> 00:06:30,560
tools do this

184
00:06:28,080 --> 00:06:31,520
and i like to call this the simulation

185
00:06:30,560 --> 00:06:34,560
as code

186
00:06:31,520 --> 00:06:38,000
where you can define a

187
00:06:34,560 --> 00:06:41,360
simulation playbook with json

188
00:06:38,000 --> 00:06:44,960
files right and each technique

189
00:06:41,360 --> 00:06:47,039
has different parameters supported

190
00:06:44,960 --> 00:06:48,160
so let me look at an example here on the

191
00:06:47,039 --> 00:06:50,319
right this

192
00:06:48,160 --> 00:06:52,240
is a playbook for a password spraying

193
00:06:50,319 --> 00:06:53,120
attack okay as you can see i defined the

194
00:06:52,240 --> 00:06:55,440
technique

195
00:06:53,120 --> 00:06:58,319
the password even the protocol you can

196
00:06:55,440 --> 00:07:00,479
define which protocol to use

197
00:06:58,319 --> 00:07:02,319
i added here sleep time so we can we're

198
00:07:00,479 --> 00:07:04,240
going to wait 30 seconds between each

199
00:07:02,319 --> 00:07:05,919
authentication event

200
00:07:04,240 --> 00:07:08,240
we define the users that we're going to

201
00:07:05,919 --> 00:07:10,240
spray we define the target right

202
00:07:08,240 --> 00:07:11,280
so all the simulations supported by

203
00:07:10,240 --> 00:07:14,639
purple sharp

204
00:07:11,280 --> 00:07:17,199
come in a similar way you know easy to

205
00:07:14,639 --> 00:07:18,720
flexible easy to customize a lot of

206
00:07:17,199 --> 00:07:21,680
different parameters

207
00:07:18,720 --> 00:07:23,840
uh to customize the specific execution

208
00:07:21,680 --> 00:07:26,400
of the technique

209
00:07:23,840 --> 00:07:28,880
here's another two other examples on the

210
00:07:26,400 --> 00:07:30,880
first one this is how we create us

211
00:07:28,880 --> 00:07:32,160
we execute a persistent technique to

212
00:07:30,880 --> 00:07:33,759
create a service

213
00:07:32,160 --> 00:07:35,680
and on the right side to create a

214
00:07:33,759 --> 00:07:36,639
scheduled task as you can see we can

215
00:07:35,680 --> 00:07:38,960
define

216
00:07:36,639 --> 00:07:40,160
the name of the service the command that

217
00:07:38,960 --> 00:07:44,319
is going to be executed

218
00:07:40,160 --> 00:07:47,199
same for the scheduled task right

219
00:07:44,319 --> 00:07:48,000
next point um one of the goals that i

220
00:07:47,199 --> 00:07:49,919
had when

221
00:07:48,000 --> 00:07:51,440
writing a simulation tool is that i

222
00:07:49,919 --> 00:07:55,440
wanted to be able

223
00:07:51,440 --> 00:07:57,520
to repo remote simulation deployment i

224
00:07:55,440 --> 00:07:59,039
wanted to be able to execute techniques

225
00:07:57,520 --> 00:08:02,400
in remote hosts

226
00:07:59,039 --> 00:08:03,919
why is that because when you're

227
00:08:02,400 --> 00:08:06,319
executing techniques

228
00:08:03,919 --> 00:08:07,120
on your local network you're only

229
00:08:06,319 --> 00:08:09,919
testing

230
00:08:07,120 --> 00:08:11,520
the local network's detection controls i

231
00:08:09,919 --> 00:08:12,720
wanted to be able to drop that

232
00:08:11,520 --> 00:08:15,280
simulation

233
00:08:12,720 --> 00:08:16,800
far away on that network that is maybe

234
00:08:15,280 --> 00:08:18,160
in a different country maybe in a

235
00:08:16,800 --> 00:08:20,000
different continent

236
00:08:18,160 --> 00:08:21,759
without actually having to have someone

237
00:08:20,000 --> 00:08:24,960
there right

238
00:08:21,759 --> 00:08:25,599
so that was my goal uh what i ended up

239
00:08:24,960 --> 00:08:28,879
doing

240
00:08:25,599 --> 00:08:32,880
is just leveraging native services

241
00:08:28,879 --> 00:08:36,240
of windows like smb to copy the file

242
00:08:32,880 --> 00:08:39,120
um wmi to execute the file

243
00:08:36,240 --> 00:08:40,640
and name pipes for communication and of

244
00:08:39,120 --> 00:08:42,159
course it has a couple of requirements

245
00:08:40,640 --> 00:08:44,080
that this means that

246
00:08:42,159 --> 00:08:45,200
when we want to deploy the simulation on

247
00:08:44,080 --> 00:08:47,120
a remote host

248
00:08:45,200 --> 00:08:49,279
we're going to need to have network

249
00:08:47,120 --> 00:08:52,080
connectivity to these services

250
00:08:49,279 --> 00:08:54,000
as well as administrative credentials to

251
00:08:52,080 --> 00:08:56,240
these remote hosts right

252
00:08:54,000 --> 00:08:57,680
now let's dive a little even deeper on

253
00:08:56,240 --> 00:09:00,800
how this works

254
00:08:57,680 --> 00:09:03,040
there's three modules that work together

255
00:09:00,800 --> 00:09:04,959
the orchestrator that runs on the

256
00:09:03,040 --> 00:09:07,600
operator's computer

257
00:09:04,959 --> 00:09:08,399
the scout that runs on the simulation

258
00:09:07,600 --> 00:09:10,160
target

259
00:09:08,399 --> 00:09:11,440
and the simulator that also runs on the

260
00:09:10,160 --> 00:09:14,880
simulation target

261
00:09:11,440 --> 00:09:18,080
so these are three different modules um

262
00:09:14,880 --> 00:09:21,440
that synchronize with each other to

263
00:09:18,080 --> 00:09:24,480
execute the simulation um

264
00:09:21,440 --> 00:09:25,440
now one important thing is these modules

265
00:09:24,480 --> 00:09:27,760
they needed to

266
00:09:25,440 --> 00:09:28,880
share information right about the

267
00:09:27,760 --> 00:09:32,399
simulation

268
00:09:28,880 --> 00:09:34,640
um so what i'm using is name pipes

269
00:09:32,399 --> 00:09:35,680
and serialized objects so that they

270
00:09:34,640 --> 00:09:38,720
communicate

271
00:09:35,680 --> 00:09:40,959
over the network using namepipe so

272
00:09:38,720 --> 00:09:43,760
i did this because in a previous version

273
00:09:40,959 --> 00:09:46,800
i was just using command line parameters

274
00:09:43,760 --> 00:09:48,240
uh so i would have to copy those command

275
00:09:46,800 --> 00:09:49,200
line parameters and use them on the

276
00:09:48,240 --> 00:09:50,880
remote host

277
00:09:49,200 --> 00:09:52,560
but that wasn't good opsec right because

278
00:09:50,880 --> 00:09:54,160
you could see the parameters there and

279
00:09:52,560 --> 00:09:55,120
it was easy to detect that this was a

280
00:09:54,160 --> 00:09:56,800
simulation

281
00:09:55,120 --> 00:09:58,640
but now there's no more parameters

282
00:09:56,800 --> 00:10:00,880
because all the communication all the

283
00:09:58,640 --> 00:10:02,560
details about the simulations

284
00:10:00,880 --> 00:10:04,480
is flowing through name pipes from the

285
00:10:02,560 --> 00:10:08,240
orchestrator to the scout

286
00:10:04,480 --> 00:10:10,240
and from the scout to the simulator okay

287
00:10:08,240 --> 00:10:11,839
at a high level the way it works is that

288
00:10:10,240 --> 00:10:15,440
the orchestrator first

289
00:10:11,839 --> 00:10:18,320
copies itself using smb to

290
00:10:15,440 --> 00:10:19,360
the target to similar like psx right it

291
00:10:18,320 --> 00:10:23,440
copies itself

292
00:10:19,360 --> 00:10:26,000
then it uses wmi to execute the scout

293
00:10:23,440 --> 00:10:27,920
right the scout runs which is

294
00:10:26,000 --> 00:10:29,120
essentially a service like a name pipe

295
00:10:27,920 --> 00:10:32,079
service

296
00:10:29,120 --> 00:10:33,600
the scout runs some recon tasks to get a

297
00:10:32,079 --> 00:10:35,519
little bit more information about the

298
00:10:33,600 --> 00:10:37,519
target host

299
00:10:35,519 --> 00:10:39,519
and then the orchestrator starts talking

300
00:10:37,519 --> 00:10:40,560
to the scout over name pipes they share

301
00:10:39,519 --> 00:10:43,760
information

302
00:10:40,560 --> 00:10:45,760
once everything is ready the scout then

303
00:10:43,760 --> 00:10:46,959
executes the simulator which is in

304
00:10:45,760 --> 00:10:50,079
charge of actually

305
00:10:46,959 --> 00:10:51,120
the actual simulation itself i wanted to

306
00:10:50,079 --> 00:10:53,360
separate

307
00:10:51,120 --> 00:10:54,560
simulation the pro deployment from

308
00:10:53,360 --> 00:10:58,240
simulation itself

309
00:10:54,560 --> 00:11:02,000
which is why i separated these two okay

310
00:10:58,240 --> 00:11:04,800
um yeah this is just an example

311
00:11:02,000 --> 00:11:06,640
on the source code of like the scout

312
00:11:04,800 --> 00:11:08,480
this is the scout service as you can see

313
00:11:06,640 --> 00:11:10,720
it starts at namepipe service

314
00:11:08,480 --> 00:11:12,640
okay and it waits for the orchestrator

315
00:11:10,720 --> 00:11:15,519
to connect to it

316
00:11:12,640 --> 00:11:16,079
once it connects to it it it receives an

317
00:11:15,519 --> 00:11:18,000
object

318
00:11:16,079 --> 00:11:19,519
i know the object is the simulation

319
00:11:18,000 --> 00:11:22,880
request which is

320
00:11:19,519 --> 00:11:24,720
uh essentially a small kind of like a

321
00:11:22,880 --> 00:11:28,320
protocol that i came up with

322
00:11:24,720 --> 00:11:30,480
on how to exchange this simulation

323
00:11:28,320 --> 00:11:32,079
details right so this is the simulation

324
00:11:30,480 --> 00:11:34,560
request that has a header

325
00:11:32,079 --> 00:11:36,480
a type and it has a simulation playbook

326
00:11:34,560 --> 00:11:39,600
which has all the details about all the

327
00:11:36,480 --> 00:11:42,000
simulations that need to be executed

328
00:11:39,600 --> 00:11:43,600
um so yeah that's you can look at the

329
00:11:42,000 --> 00:11:44,640
source code to see how that works but

330
00:11:43,600 --> 00:11:46,320
it's pretty interesting

331
00:11:44,640 --> 00:11:48,399
and i'm pretty pretty happy with the

332
00:11:46,320 --> 00:11:50,959
results

333
00:11:48,399 --> 00:11:52,399
another requirement that i had when

334
00:11:50,959 --> 00:11:55,040
writing purple sharp

335
00:11:52,399 --> 00:11:57,680
is that when i was executing remote uh

336
00:11:55,040 --> 00:11:59,519
simulations

337
00:11:57,680 --> 00:12:02,240
the challenge was that because i'm using

338
00:11:59,519 --> 00:12:04,800
wmi to execute the scout

339
00:12:02,240 --> 00:12:06,639
the scout runs under the context of that

340
00:12:04,800 --> 00:12:09,200
service account

341
00:12:06,639 --> 00:12:11,519
that you use to deploy simulation right

342
00:12:09,200 --> 00:12:13,519
but i wanted to get user impersonation

343
00:12:11,519 --> 00:12:15,279
because when i'm executing a remote

344
00:12:13,519 --> 00:12:16,480
technique i know that there's a user

345
00:12:15,279 --> 00:12:19,440
logged on here

346
00:12:16,480 --> 00:12:21,040
so i wanted my simulation to run under

347
00:12:19,440 --> 00:12:23,040
the context of that user

348
00:12:21,040 --> 00:12:24,959
that's logged in on that host at that

349
00:12:23,040 --> 00:12:28,000
time right

350
00:12:24,959 --> 00:12:31,040
so how do i achieve that well

351
00:12:28,000 --> 00:12:33,040
i had a first a few approaches my first

352
00:12:31,040 --> 00:12:36,320
approach was to play with tokens

353
00:12:33,040 --> 00:12:39,519
and i used these api

354
00:12:36,320 --> 00:12:41,200
calls to duplic duplicate tokens and to

355
00:12:39,519 --> 00:12:42,399
start a process with a token that i

356
00:12:41,200 --> 00:12:44,720
stole because

357
00:12:42,399 --> 00:12:46,079
the scout runs in a high privilege mode

358
00:12:44,720 --> 00:12:49,360
so it has access

359
00:12:46,079 --> 00:12:51,760
it can get a handle to other processes

360
00:12:49,360 --> 00:12:52,800
my second approach was to inject shell

361
00:12:51,760 --> 00:12:55,440
code so inject

362
00:12:52,800 --> 00:12:56,000
purple sharp as a shell code to a remote

363
00:12:55,440 --> 00:12:58,000
process

364
00:12:56,000 --> 00:12:59,680
because once i inject that then i'm

365
00:12:58,000 --> 00:13:01,920
going to run under the context of that

366
00:12:59,680 --> 00:13:04,000
process and whoever owns that process

367
00:13:01,920 --> 00:13:04,959
so i tested these two first approaches

368
00:13:04,000 --> 00:13:07,680
they worked

369
00:13:04,959 --> 00:13:09,519
but still they were what i needed i

370
00:13:07,680 --> 00:13:11,680
ended up going in a different route what

371
00:13:09,519 --> 00:13:14,959
i did was

372
00:13:11,680 --> 00:13:17,360
i use parent process

373
00:13:14,959 --> 00:13:18,839
id spoofing technique which allows me to

374
00:13:17,360 --> 00:13:23,360
do two things

375
00:13:18,839 --> 00:13:25,760
one the parent process of my simulator

376
00:13:23,360 --> 00:13:27,279
now is going to be as is going to run

377
00:13:25,760 --> 00:13:28,240
under the context of the user who's

378
00:13:27,279 --> 00:13:31,279
logged in

379
00:13:28,240 --> 00:13:33,360
so i i'm breaking that parent

380
00:13:31,279 --> 00:13:35,279
child process relationship between the

381
00:13:33,360 --> 00:13:37,959
scout and the simulator

382
00:13:35,279 --> 00:13:39,360
and second because i'm using

383
00:13:37,959 --> 00:13:41,839
explorer.exe

384
00:13:39,360 --> 00:13:42,560
as the parent process then the child

385
00:13:41,839 --> 00:13:45,040
process

386
00:13:42,560 --> 00:13:47,680
the the simulator is also gonna run

387
00:13:45,040 --> 00:13:50,959
under the context of that user

388
00:13:47,680 --> 00:13:53,440
so i am stealing that

389
00:13:50,959 --> 00:13:55,120
token and leveraging that user's token

390
00:13:53,440 --> 00:13:58,399
that's logged in on that host

391
00:13:55,120 --> 00:14:00,079
without having to um to you know

392
00:13:58,399 --> 00:14:03,440
actually steal the token i'm just using

393
00:14:00,079 --> 00:14:06,560
parent process id spoofing right

394
00:14:03,440 --> 00:14:08,399
so now my simulator thanks to this

395
00:14:06,560 --> 00:14:09,760
runs under the context of that user and

396
00:14:08,399 --> 00:14:10,880
it's pretty that's pretty pretty

397
00:14:09,760 --> 00:14:13,760
interesting

398
00:14:10,880 --> 00:14:14,560
because it allows me to execute my

399
00:14:13,760 --> 00:14:18,000
simulation

400
00:14:14,560 --> 00:14:19,920
under a real user right so we no longer

401
00:14:18,000 --> 00:14:21,600
have to have that service account

402
00:14:19,920 --> 00:14:22,959
simulating techniques but now we have

403
00:14:21,600 --> 00:14:24,880
that real user

404
00:14:22,959 --> 00:14:26,399
that is able to authenticate to other

405
00:14:24,880 --> 00:14:29,600
hosts he's able to get

406
00:14:26,399 --> 00:14:32,079
coverage tickets um so now it looks like

407
00:14:29,600 --> 00:14:32,880
this is an actual user that has been

408
00:14:32,079 --> 00:14:34,560
compromised

409
00:14:32,880 --> 00:14:36,959
and is attacking the network which is

410
00:14:34,560 --> 00:14:39,279
pretty cool

411
00:14:36,959 --> 00:14:40,880
this is again just some code on how i do

412
00:14:39,279 --> 00:14:44,000
this this is the scout

413
00:14:40,880 --> 00:14:47,120
uh the the function called runs

414
00:14:44,000 --> 00:14:49,760
scout service serialize and

415
00:14:47,120 --> 00:14:50,160
as soon as the scout runs it receives

416
00:14:49,760 --> 00:14:52,720
that

417
00:14:50,160 --> 00:14:55,040
protocol uh that that message from the

418
00:14:52,720 --> 00:14:57,040
orchestrator like a syn packet

419
00:14:55,040 --> 00:14:58,639
and then automatically starts doing the

420
00:14:57,040 --> 00:14:59,920
recon okay

421
00:14:58,639 --> 00:15:02,079
so it sends that back to the

422
00:14:59,920 --> 00:15:04,639
orchestrator the orchestrator

423
00:15:02,079 --> 00:15:06,560
stages the attack the simulation and

424
00:15:04,639 --> 00:15:09,600
once the simulation is ready

425
00:15:06,560 --> 00:15:12,480
the orchestrator sends an act command

426
00:15:09,600 --> 00:15:15,040
and when that act command is received if

427
00:15:12,480 --> 00:15:17,440
the opsec technique is ppid

428
00:15:15,040 --> 00:15:18,720
what the scout runs it it runs the

429
00:15:17,440 --> 00:15:21,360
simulator

430
00:15:18,720 --> 00:15:21,920
using the parent process id spoofing

431
00:15:21,360 --> 00:15:24,399
technique

432
00:15:21,920 --> 00:15:25,360
right again you can look at the source

433
00:15:24,399 --> 00:15:28,639
code yourself and

434
00:15:25,360 --> 00:15:30,320
and check this out how this works

435
00:15:28,639 --> 00:15:32,399
so what we end up getting is something

436
00:15:30,320 --> 00:15:33,360
like this where as you can see here we

437
00:15:32,399 --> 00:15:35,839
have the scout

438
00:15:33,360 --> 00:15:37,920
running under the context of this p

439
00:15:35,839 --> 00:15:39,519
sharp account which is a service account

440
00:15:37,920 --> 00:15:41,360
that you're going to use to remotely

441
00:15:39,519 --> 00:15:44,480
authenticate to host

442
00:15:41,360 --> 00:15:46,720
but the simulator actually runs under

443
00:15:44,480 --> 00:15:47,040
the context of a real user that's logged

444
00:15:46,720 --> 00:15:49,839
in

445
00:15:47,040 --> 00:15:51,040
on this host and the panel process is

446
00:15:49,839 --> 00:15:53,839
going to be explorer

447
00:15:51,040 --> 00:15:55,199
right so now when this comes to an

448
00:15:53,839 --> 00:15:56,800
analyst

449
00:15:55,199 --> 00:15:58,480
they're going to think that this is a

450
00:15:56,800 --> 00:16:00,240
real attack and they're going to

451
00:15:58,480 --> 00:16:01,759
investigate it the right way which is

452
00:16:00,240 --> 00:16:04,000
another reason that i built purple

453
00:16:01,759 --> 00:16:04,959
shutter i wanted to test my team my sub

454
00:16:04,000 --> 00:16:07,680
team

455
00:16:04,959 --> 00:16:08,000
and this is one way of doing this

456
00:16:07,680 --> 00:16:11,519
because

457
00:16:08,000 --> 00:16:14,079
now this real user has real real hosts

458
00:16:11,519 --> 00:16:15,440
real data real proxy logs so they can

459
00:16:14,079 --> 00:16:18,639
hunt through this data

460
00:16:15,440 --> 00:16:20,399
and look for suspicious behavior

461
00:16:18,639 --> 00:16:22,000
another important thing for me was to

462
00:16:20,399 --> 00:16:24,079
execute the same technique

463
00:16:22,000 --> 00:16:26,800
in different variations and why is that

464
00:16:24,079 --> 00:16:29,440
because i want to be able to bypass

465
00:16:26,800 --> 00:16:30,880
or at least attempt to bypass existing

466
00:16:29,440 --> 00:16:32,639
detections

467
00:16:30,880 --> 00:16:34,720
it helps me validate detection

468
00:16:32,639 --> 00:16:37,519
resilience here's an example

469
00:16:34,720 --> 00:16:39,440
the technique power shell the way purple

470
00:16:37,519 --> 00:16:42,800
sharp can execute them is two ways

471
00:16:39,440 --> 00:16:44,800
one just calling powershell.exe right

472
00:16:42,800 --> 00:16:47,040
and putting the command there an encoded

473
00:16:44,800 --> 00:16:50,639
command but also another way is

474
00:16:47,040 --> 00:16:53,360
using.net and executing powershell

475
00:16:50,639 --> 00:16:55,920
leveraging the.net libraries without

476
00:16:53,360 --> 00:16:58,079
having to call powershell.exe so there's

477
00:16:55,920 --> 00:17:00,240
two ways of executing this technique

478
00:16:58,079 --> 00:17:02,320
and defenders should know how to detect

479
00:17:00,240 --> 00:17:04,319
these two ways

480
00:17:02,320 --> 00:17:05,679
here's a cooler example you probably

481
00:17:04,319 --> 00:17:06,720
know about this technique remote

482
00:17:05,679 --> 00:17:09,120
services

483
00:17:06,720 --> 00:17:10,559
it's when you are able to a lateral

484
00:17:09,120 --> 00:17:12,240
movement technique that allows you to

485
00:17:10,559 --> 00:17:14,240
execute code remotely

486
00:17:12,240 --> 00:17:16,160
by starting a remote service or by

487
00:17:14,240 --> 00:17:17,919
messing with a remote service right

488
00:17:16,160 --> 00:17:19,600
so there's three ways that i can support

489
00:17:17,919 --> 00:17:23,600
this

490
00:17:19,600 --> 00:17:24,720
one just using a negative binary sc.exe

491
00:17:23,600 --> 00:17:26,559
which allows you to

492
00:17:24,720 --> 00:17:28,799
if you have the right permissions on a

493
00:17:26,559 --> 00:17:29,600
remote host it allows you to create a

494
00:17:28,799 --> 00:17:32,320
remote

495
00:17:29,600 --> 00:17:34,640
service and start a remote service this

496
00:17:32,320 --> 00:17:36,799
is how i do it on purple shark

497
00:17:34,640 --> 00:17:38,400
second way is no longer using the

498
00:17:36,799 --> 00:17:41,600
command line but now using

499
00:17:38,400 --> 00:17:43,360
windows api calls the api called

500
00:17:41,600 --> 00:17:45,120
create service that allows me to create

501
00:17:43,360 --> 00:17:47,520
a remote service remotely

502
00:17:45,120 --> 00:17:48,400
and then i can also start that service

503
00:17:47,520 --> 00:17:53,120
remotely

504
00:17:48,400 --> 00:17:55,919
to execute that technique but finally

505
00:17:53,120 --> 00:17:57,200
and here's a way to bypass detections

506
00:17:55,919 --> 00:18:00,320
the first two ways

507
00:17:57,200 --> 00:18:02,559
what happens is that they both generate

508
00:18:00,320 --> 00:18:04,559
an event a service creation event which

509
00:18:02,559 --> 00:18:05,360
is a really cool way of detecting this

510
00:18:04,559 --> 00:18:08,320
technique

511
00:18:05,360 --> 00:18:08,960
but with this third variation we are no

512
00:18:08,320 --> 00:18:10,640
longer

513
00:18:08,960 --> 00:18:13,520
creating a new service because what

514
00:18:10,640 --> 00:18:16,880
purple sharp does is going to

515
00:18:13,520 --> 00:18:20,080
find an existing service modify it

516
00:18:16,880 --> 00:18:22,640
so that it's its binary path

517
00:18:20,080 --> 00:18:23,760
gets changed gets updated to a malicious

518
00:18:22,640 --> 00:18:26,480
command

519
00:18:23,760 --> 00:18:28,640
and then reverts it back right so now we

520
00:18:26,480 --> 00:18:30,640
bypass we're still leveraging

521
00:18:28,640 --> 00:18:32,160
service control manager on that remote

522
00:18:30,640 --> 00:18:33,520
host to execute code

523
00:18:32,160 --> 00:18:35,520
but we're no longer creating a new

524
00:18:33,520 --> 00:18:37,919
service what we're doing now

525
00:18:35,520 --> 00:18:39,600
is modifying existing service and by the

526
00:18:37,919 --> 00:18:41,360
way credits to the author

527
00:18:39,600 --> 00:18:42,640
this is a technique that i first saw on

528
00:18:41,360 --> 00:18:47,919
this tool called sc

529
00:18:42,640 --> 00:18:49,760
shell and i just replicated it

530
00:18:47,919 --> 00:18:51,520
so three ways of executing this

531
00:18:49,760 --> 00:18:54,080
technique another

532
00:18:51,520 --> 00:18:54,880
another example is password spraying i

533
00:18:54,080 --> 00:18:56,960
know that

534
00:18:54,880 --> 00:18:58,559
within active directory you can use

535
00:18:56,960 --> 00:19:01,280
passwords frame with kerberos

536
00:18:58,559 --> 00:19:01,840
and ntlm and that looks different on the

537
00:19:01,280 --> 00:19:03,600
logs

538
00:19:01,840 --> 00:19:05,679
it so it could be a way to bypass

539
00:19:03,600 --> 00:19:06,559
detection well purple sharp supports

540
00:19:05,679 --> 00:19:09,760
both

541
00:19:06,559 --> 00:19:10,400
kerberos and ntlm just by leveraging the

542
00:19:09,760 --> 00:19:13,520
api

543
00:19:10,400 --> 00:19:15,360
call logon user and i have to change a

544
00:19:13,520 --> 00:19:16,320
variable here and that's all you have to

545
00:19:15,360 --> 00:19:18,880
change

546
00:19:16,320 --> 00:19:21,120
to force the authentication to happen

547
00:19:18,880 --> 00:19:23,600
over curve rows instead of ntlm or

548
00:19:21,120 --> 00:19:26,080
the opposite so technique variations

549
00:19:23,600 --> 00:19:29,760
right pretty pretty interesting feature

550
00:19:26,080 --> 00:19:30,720
for proper shot finally another another

551
00:19:29,760 --> 00:19:32,400
important thing

552
00:19:30,720 --> 00:19:34,400
for proper sharp is i wanted to have

553
00:19:32,400 --> 00:19:37,760
active directory support meaning

554
00:19:34,400 --> 00:19:40,320
be able to execute techniques in active

555
00:19:37,760 --> 00:19:41,679
of course purple services c-sharp binary

556
00:19:40,320 --> 00:19:43,600
focus on windows

557
00:19:41,679 --> 00:19:46,000
but i also wanted to do more so for

558
00:19:43,600 --> 00:19:48,640
example purpose sharp is able to

559
00:19:46,000 --> 00:19:49,600
interact with active directory and the

560
00:19:48,640 --> 00:19:52,480
domain members

561
00:19:49,600 --> 00:19:53,520
in the context of that logged user right

562
00:19:52,480 --> 00:19:56,480
it also supports

563
00:19:53,520 --> 00:19:58,160
ldap queries to for random target

564
00:19:56,480 --> 00:19:59,520
selection so there are some techniques

565
00:19:58,160 --> 00:20:02,000
that require targets

566
00:19:59,520 --> 00:20:03,360
for example password spraying requires

567
00:20:02,000 --> 00:20:04,880
user targets right

568
00:20:03,360 --> 00:20:06,799
but a lateral movement technique

569
00:20:04,880 --> 00:20:08,720
requires host targets

570
00:20:06,799 --> 00:20:10,559
so what i do with purple sharp is that

571
00:20:08,720 --> 00:20:13,440
you can define two variables

572
00:20:10,559 --> 00:20:15,039
host target type or user target type and

573
00:20:13,440 --> 00:20:18,960
what these variables define

574
00:20:15,039 --> 00:20:21,440
is which targets you want to attack

575
00:20:18,960 --> 00:20:23,679
if you set these variables to two what

576
00:20:21,440 --> 00:20:26,720
happens is that proper sharp is going to

577
00:20:23,679 --> 00:20:29,360
automatically do random ldap queries

578
00:20:26,720 --> 00:20:29,840
against the against active directory and

579
00:20:29,360 --> 00:20:32,559
obtain

580
00:20:29,840 --> 00:20:33,760
random users obtain rendered hosts so

581
00:20:32,559 --> 00:20:36,799
you can target them

582
00:20:33,760 --> 00:20:38,799
in your simulation exercises

583
00:20:36,799 --> 00:20:40,720
and and when you're picking holes it

584
00:20:38,799 --> 00:20:43,200
actually does an extra check

585
00:20:40,720 --> 00:20:43,760
it goes against ldap it gets a list of

586
00:20:43,200 --> 00:20:46,400
hosts

587
00:20:43,760 --> 00:20:47,520
but also checks if those sources are

588
00:20:46,400 --> 00:20:50,240
alive with a pin

589
00:20:47,520 --> 00:20:51,760
it also checks with a a quick port scan

590
00:20:50,240 --> 00:20:53,760
on specific ports

591
00:20:51,760 --> 00:20:56,000
to see if those hosts are responding or

592
00:20:53,760 --> 00:20:56,960
not so it does some checks before

593
00:20:56,000 --> 00:20:59,679
returning

594
00:20:56,960 --> 00:21:01,039
um just an ldap result so pretty

595
00:20:59,679 --> 00:21:04,080
interesting because now

596
00:21:01,039 --> 00:21:06,000
i can pick random targets without

597
00:21:04,080 --> 00:21:08,240
having to define passwords because

598
00:21:06,000 --> 00:21:10,960
remember i'm leveraging that logged

599
00:21:08,240 --> 00:21:13,039
users token so and that user is already

600
00:21:10,960 --> 00:21:14,960
authenticated to domain so i'm just

601
00:21:13,039 --> 00:21:19,200
leveraging that to do all the queries

602
00:21:14,960 --> 00:21:22,640
without having to define passwords

603
00:21:19,200 --> 00:21:25,360
so now that we've looked at a few

604
00:21:22,640 --> 00:21:26,880
few ways of how purple sharp works a few

605
00:21:25,360 --> 00:21:29,440
features of purple sharp

606
00:21:26,880 --> 00:21:30,000
let me jump to the demos okay now what

607
00:21:29,440 --> 00:21:31,679
i'm going to do

608
00:21:30,000 --> 00:21:33,679
now i'm going to stop the video and i

609
00:21:31,679 --> 00:21:35,760
need to set up my environment

610
00:21:33,679 --> 00:21:36,720
but at a high level this is what we're

611
00:21:35,760 --> 00:21:38,880
going to be look at

612
00:21:36,720 --> 00:21:41,520
looking at right i have a lav

613
00:21:38,880 --> 00:21:44,480
environment

614
00:21:41,520 --> 00:21:46,640
a few i think 10 windows hose i'm using

615
00:21:44,480 --> 00:21:48,799
windows event forwarding

616
00:21:46,640 --> 00:21:49,760
and then i'm using a splunk community

617
00:21:48,799 --> 00:21:51,520
version

618
00:21:49,760 --> 00:21:52,880
and to get all those logs and we're

619
00:21:51,520 --> 00:21:55,440
going to be executing techniques

620
00:21:52,880 --> 00:21:57,120
and looking at some dashboards okay so

621
00:21:55,440 --> 00:21:58,000
give me a minute i'm going to set up my

622
00:21:57,120 --> 00:22:01,280
live environment

623
00:21:58,000 --> 00:22:04,080
and i'll be right back

624
00:22:01,280 --> 00:22:04,720
okay bucks uh sorry okay guys um okay so

625
00:22:04,080 --> 00:22:08,400
i'm back

626
00:22:04,720 --> 00:22:10,080
now and let's look at the first demo

627
00:22:08,400 --> 00:22:12,000
so on this first demo we're gonna

628
00:22:10,080 --> 00:22:13,520
execute two playbooks

629
00:22:12,000 --> 00:22:16,400
on the first playbook we're going to

630
00:22:13,520 --> 00:22:17,440
execute some reconnaissance or discovery

631
00:22:16,400 --> 00:22:20,480
techniques

632
00:22:17,440 --> 00:22:23,520
using the command line so using native

633
00:22:20,480 --> 00:22:25,360
files native windows binaries

634
00:22:23,520 --> 00:22:27,280
and then we're going to use the cover

635
00:22:25,360 --> 00:22:30,240
roasting attack

636
00:22:27,280 --> 00:22:31,280
okay on the second playbook we're going

637
00:22:30,240 --> 00:22:34,240
to execute this

638
00:22:31,280 --> 00:22:35,280
these techniques on a different hose

639
00:22:34,240 --> 00:22:37,679
we're going to execute

640
00:22:35,280 --> 00:22:39,120
some similar reconnaissance techniques

641
00:22:37,679 --> 00:22:41,440
but this time

642
00:22:39,120 --> 00:22:42,640
we're no longer going to use the command

643
00:22:41,440 --> 00:22:44,480
line to

644
00:22:42,640 --> 00:22:45,679
to execute them but we're going to use

645
00:22:44,480 --> 00:22:47,200
powershell commands

646
00:22:45,679 --> 00:22:49,600
so that that's going to look different

647
00:22:47,200 --> 00:22:51,600
on the logs and finally we're going to

648
00:22:49,600 --> 00:22:53,679
start executing some password spraying

649
00:22:51,600 --> 00:22:56,880
techniques

650
00:22:53,679 --> 00:22:58,880
from from that host okay

651
00:22:56,880 --> 00:23:00,480
all right so let's jump to this demo

652
00:22:58,880 --> 00:23:03,760
real quick guys

653
00:23:00,480 --> 00:23:06,960
um so i have my lab environment as i was

654
00:23:03,760 --> 00:23:08,960
showing as i was mentioning here we have

655
00:23:06,960 --> 00:23:11,679
a bunch of hoes i think it's 10

656
00:23:08,960 --> 00:23:12,240
uh 10 hoes uh oop i don't know what i

657
00:23:11,679 --> 00:23:16,159
did here

658
00:23:12,240 --> 00:23:16,159
hold on let me come back to this

659
00:23:17,600 --> 00:23:21,440
okay so i was as i was saying um so i

660
00:23:20,640 --> 00:23:24,480
have

661
00:23:21,440 --> 00:23:27,120
10 vms here a domain environment right

662
00:23:24,480 --> 00:23:28,240
and i have this computer here uh and as

663
00:23:27,120 --> 00:23:30,400
you can see i'm not

664
00:23:28,240 --> 00:23:31,760
this computer is not part of the domain

665
00:23:30,400 --> 00:23:33,919
okay

666
00:23:31,760 --> 00:23:35,440
so it's within a work group and i have a

667
00:23:33,919 --> 00:23:37,200
proper shop so what i'm going to do what

668
00:23:35,440 --> 00:23:39,679
i'm going to do is from here

669
00:23:37,200 --> 00:23:40,880
i'm going to deploy remote simulations

670
00:23:39,679 --> 00:23:44,000
to some of these hosts

671
00:23:40,880 --> 00:23:46,000
okay um so let's start looking at the

672
00:23:44,000 --> 00:23:47,039
playbook so for the first playbook we

673
00:23:46,000 --> 00:23:49,200
have this playbook

674
00:23:47,039 --> 00:23:50,960
let's quickly go over it so this is a

675
00:23:49,200 --> 00:23:53,679
remote playbook because i'm going to

676
00:23:50,960 --> 00:23:55,600
again i i said i'm going to deploy the

677
00:23:53,679 --> 00:23:56,799
simulation against remote hosts on this

678
00:23:55,600 --> 00:23:58,320
network

679
00:23:56,799 --> 00:23:59,679
i'm going to use this is going to be the

680
00:23:58,320 --> 00:24:02,720
service account that is going to be used

681
00:23:59,679 --> 00:24:04,159
to authenticate to those remote hosts

682
00:24:02,720 --> 00:24:06,159
so for this case for this first

683
00:24:04,159 --> 00:24:08,880
simulation i'm gonna um

684
00:24:06,159 --> 00:24:09,600
deploy to this windows 10-1 which is

685
00:24:08,880 --> 00:24:12,400
this guy

686
00:24:09,600 --> 00:24:13,440
and as you can see here it has the the

687
00:24:12,400 --> 00:24:15,840
march simpson

688
00:24:13,440 --> 00:24:18,080
user logged in okay so we're gonna

689
00:24:15,840 --> 00:24:20,000
deploy we're gonna execute simulation

690
00:24:18,080 --> 00:24:22,080
under the context of this user thanks to

691
00:24:20,000 --> 00:24:25,919
purple sharp's um

692
00:24:22,080 --> 00:24:29,039
user impersonation we defined

693
00:24:25,919 --> 00:24:29,919
the scout and the path and sorry the

694
00:24:29,039 --> 00:24:32,400
scout path

695
00:24:29,919 --> 00:24:33,919
and the simulator path um because they

696
00:24:32,400 --> 00:24:35,039
are also configurable

697
00:24:33,919 --> 00:24:37,120
and this is where the simulation is

698
00:24:35,039 --> 00:24:39,679
going to come from right

699
00:24:37,120 --> 00:24:41,360
and then we start defining some

700
00:24:39,679 --> 00:24:43,760
techniques

701
00:24:41,360 --> 00:24:44,400
system discovery using command line

702
00:24:43,760 --> 00:24:46,320
account

703
00:24:44,400 --> 00:24:48,159
using command line i'm not going to go

704
00:24:46,320 --> 00:24:50,320
over each one of these techniques

705
00:24:48,159 --> 00:24:52,320
you can look at mitre attack to see what

706
00:24:50,320 --> 00:24:54,320
they are finally we're going to use a

707
00:24:52,320 --> 00:24:57,360
curve roasting techniques we're going to

708
00:24:54,320 --> 00:25:00,320
use variation number one which means get

709
00:24:57,360 --> 00:25:02,240
all the service get all get a service

710
00:25:00,320 --> 00:25:04,320
ticket for all the service principal

711
00:25:02,240 --> 00:25:06,400
names that purposely can find

712
00:25:04,320 --> 00:25:08,000
which is a noisy way of executing it

713
00:25:06,400 --> 00:25:08,480
right but purple search supports other

714
00:25:08,000 --> 00:25:11,200
ways

715
00:25:08,480 --> 00:25:12,080
as well and i'm going to put a sleep

716
00:25:11,200 --> 00:25:15,520
time because

717
00:25:12,080 --> 00:25:16,720
why not i can put a sleep time and on my

718
00:25:15,520 --> 00:25:18,400
second simulation

719
00:25:16,720 --> 00:25:20,159
i'm going to run it against another hose

720
00:25:18,400 --> 00:25:22,320
windows 10-2

721
00:25:20,159 --> 00:25:23,840
and similar techniques but now this time

722
00:25:22,320 --> 00:25:26,480
i'm going to use powershell this is

723
00:25:23,840 --> 00:25:29,120
why i set the variation number two here

724
00:25:26,480 --> 00:25:29,679
with powershell with this variation too

725
00:25:29,120 --> 00:25:32,960
i'm gonna

726
00:25:29,679 --> 00:25:35,679
use powershell and i'm gonna use

727
00:25:32,960 --> 00:25:36,799
two password spraying techniques one

728
00:25:35,679 --> 00:25:40,000
using kerberos

729
00:25:36,799 --> 00:25:43,279
against 20 randomly picked users

730
00:25:40,000 --> 00:25:45,120
as i mentioned on the slides and on

731
00:25:43,279 --> 00:25:46,960
another password spring attack but this

732
00:25:45,120 --> 00:25:48,960
time we're going to authenticate

733
00:25:46,960 --> 00:25:50,240
to a remote hole so we're going to do a

734
00:25:48,960 --> 00:25:53,919
remote spatula

735
00:25:50,240 --> 00:25:57,360
spraying attack by finding a hose

736
00:25:53,919 --> 00:26:00,080
random hose and spraying it okay

737
00:25:57,360 --> 00:26:02,000
so i'm gonna execute this and and then

738
00:26:00,080 --> 00:26:02,799
just pause the video so we don't have to

739
00:26:02,000 --> 00:26:06,000
wait

740
00:26:02,799 --> 00:26:07,840
for this to finish okay so i

741
00:26:06,000 --> 00:26:09,440
define the password and here we go so

742
00:26:07,840 --> 00:26:12,640
i'm gonna stop the video and come back

743
00:26:09,440 --> 00:26:12,640
to this i'll be right back

744
00:26:13,279 --> 00:26:17,919
so one once purpose up is finished we

745
00:26:15,760 --> 00:26:19,600
can go in and look at the results

746
00:26:17,919 --> 00:26:21,200
uh don't forget that purple sharp writes

747
00:26:19,600 --> 00:26:22,400
the results to a json file in case you

748
00:26:21,200 --> 00:26:24,159
want to do that but

749
00:26:22,400 --> 00:26:25,919
for the purpose of time we'll just do

750
00:26:24,159 --> 00:26:28,080
this manually okay

751
00:26:25,919 --> 00:26:29,600
so two playbooks have executed let's

752
00:26:28,080 --> 00:26:32,240
look at the results

753
00:26:29,600 --> 00:26:33,840
on the first on the first one we see

754
00:26:32,240 --> 00:26:35,200
that purpose are authenticated to

755
00:26:33,840 --> 00:26:37,120
windows 10-1

756
00:26:35,200 --> 00:26:38,480
and started executing commands under

757
00:26:37,120 --> 00:26:40,960
this simulator of course

758
00:26:38,480 --> 00:26:41,919
under the context of a real user with

759
00:26:40,960 --> 00:26:44,000
this pid

760
00:26:41,919 --> 00:26:46,080
and starts executing some some

761
00:26:44,000 --> 00:26:46,799
enumeration commands using the command

762
00:26:46,080 --> 00:26:50,080
line

763
00:26:46,799 --> 00:26:50,799
and nothing fancy here get some results

764
00:26:50,080 --> 00:26:52,960
back

765
00:26:50,799 --> 00:26:54,400
right we can we're going to see that on

766
00:26:52,960 --> 00:26:57,039
splunk in a lunatic

767
00:26:54,400 --> 00:26:58,320
and then after that it starts the curve

768
00:26:57,039 --> 00:27:01,840
roasting technique so

769
00:26:58,320 --> 00:27:03,600
it queries ldap for spns it finds them

770
00:27:01,840 --> 00:27:05,360
and it starts getting a service ticket

771
00:27:03,600 --> 00:27:07,440
for each one of them executing kerberos

772
00:27:05,360 --> 00:27:09,120
and as you can see waits one second

773
00:27:07,440 --> 00:27:11,840
for each authentication event because we

774
00:27:09,120 --> 00:27:14,799
define that sleep time okay

775
00:27:11,840 --> 00:27:16,000
finally actually let's come back to the

776
00:27:14,799 --> 00:27:18,720
to

777
00:27:16,000 --> 00:27:19,360
the logs to see how this looks like so

778
00:27:18,720 --> 00:27:21,679
if i

779
00:27:19,360 --> 00:27:22,399
refresh this this dashboard that i have

780
00:27:21,679 --> 00:27:25,120
here

781
00:27:22,399 --> 00:27:26,320
we can see that in fact this host

782
00:27:25,120 --> 00:27:28,799
windows 10-1

783
00:27:26,320 --> 00:27:30,080
and this user march simpson executed a

784
00:27:28,799 --> 00:27:32,720
bunch of weird

785
00:27:30,080 --> 00:27:34,480
enumeration commands right but here

786
00:27:32,720 --> 00:27:36,080
here's the interesting things if we look

787
00:27:34,480 --> 00:27:39,279
at this curve roasting

788
00:27:36,080 --> 00:27:42,320
dashboard we see that in fact

789
00:27:39,279 --> 00:27:44,559
windows 10-1 and march samsung

790
00:27:42,320 --> 00:27:46,240
start getting service tickets for all

791
00:27:44,559 --> 00:27:48,480
these service accounts

792
00:27:46,240 --> 00:27:51,039
and waiting one second between each

793
00:27:48,480 --> 00:27:52,799
authentication and as you can see here

794
00:27:51,039 --> 00:27:54,720
and so that looks pretty interesting

795
00:27:52,799 --> 00:27:57,200
right um

796
00:27:54,720 --> 00:27:58,399
so now let's look at the results of the

797
00:27:57,200 --> 00:28:00,960
second playbook

798
00:27:58,399 --> 00:28:02,559
on the second playbook um now we started

799
00:28:00,960 --> 00:28:04,799
doing some intermodation

800
00:28:02,559 --> 00:28:06,320
but now this time we use powershell

801
00:28:04,799 --> 00:28:07,520
instead of the command line so we're

802
00:28:06,320 --> 00:28:10,240
going to look at that

803
00:28:07,520 --> 00:28:11,600
and finally e purple sharp would can

804
00:28:10,240 --> 00:28:15,120
execute

805
00:28:11,600 --> 00:28:19,039
um password spring attack against

806
00:28:15,120 --> 00:28:21,200
random users using kerberos and then now

807
00:28:19,039 --> 00:28:22,559
another password spring attack against

808
00:28:21,200 --> 00:28:26,480
another host

809
00:28:22,559 --> 00:28:29,679
using ntlm right so if we look

810
00:28:26,480 --> 00:28:30,240
at our enumeration dashboard now we see

811
00:28:29,679 --> 00:28:32,880
that

812
00:28:30,240 --> 00:28:33,679
this hosts windows 10-1 started

813
00:28:32,880 --> 00:28:36,080
executing

814
00:28:33,679 --> 00:28:37,600
this a bunch of powershell commands that

815
00:28:36,080 --> 00:28:39,600
are used for enumeration

816
00:28:37,600 --> 00:28:41,200
right and if we look at how it looks

817
00:28:39,600 --> 00:28:42,880
like on the command line

818
00:28:41,200 --> 00:28:44,960
we just see that a bunch of powershell

819
00:28:42,880 --> 00:28:47,120
being executed which is not helpful

820
00:28:44,960 --> 00:28:48,480
but if you have powershell logs we can

821
00:28:47,120 --> 00:28:50,559
see this right

822
00:28:48,480 --> 00:28:52,880
and finally if we look at the password

823
00:28:50,559 --> 00:28:57,520
spraying dashboard that we have here

824
00:28:52,880 --> 00:29:00,960
we can see hopefully that this guy

825
00:28:57,520 --> 00:29:03,919
puzzle spray against 19 users

826
00:29:00,960 --> 00:29:05,440
random users picked up a purple sharp

827
00:29:03,919 --> 00:29:08,640
this is with kerberos

828
00:29:05,440 --> 00:29:09,440
this is within tlm because purposeful

829
00:29:08,640 --> 00:29:12,720
also supports

830
00:29:09,440 --> 00:29:14,240
ntlm here we can see another way of

831
00:29:12,720 --> 00:29:15,120
catching this technique from the

832
00:29:14,240 --> 00:29:17,840
simulator

833
00:29:15,120 --> 00:29:20,159
how the simulator attempted to antique

834
00:29:17,840 --> 00:29:22,399
to authenticate with these 10 users

835
00:29:20,159 --> 00:29:24,080
um so yeah you get you get the idea

836
00:29:22,399 --> 00:29:26,159
right like different attacks different

837
00:29:24,080 --> 00:29:29,200
ways of detecting it

838
00:29:26,159 --> 00:29:31,760
okay cool all right so now real quick

839
00:29:29,200 --> 00:29:32,399
we're gonna move to the next demo uh in

840
00:29:31,760 --> 00:29:34,799
the next

841
00:29:32,399 --> 00:29:35,679
four minutes that we have here uh this

842
00:29:34,799 --> 00:29:38,640
guys we're gonna use

843
00:29:35,679 --> 00:29:39,279
lateral movement okay and a cool thing

844
00:29:38,640 --> 00:29:41,200
is that

845
00:29:39,279 --> 00:29:42,720
we're gonna execute these techniques on

846
00:29:41,200 --> 00:29:44,880
a remote host

847
00:29:42,720 --> 00:29:46,000
and the user that's logged in on this

848
00:29:44,880 --> 00:29:47,679
remote host

849
00:29:46,000 --> 00:29:50,320
if they have the privileges we're gonna

850
00:29:47,679 --> 00:29:54,320
be able to execute code remotely

851
00:29:50,320 --> 00:29:57,600
okay so let's continue to this demo

852
00:29:54,320 --> 00:30:00,559
okay so now we have a different playbook

853
00:29:57,600 --> 00:30:01,279
this playbook and now we're gonna

854
00:30:00,559 --> 00:30:04,240
execute

855
00:30:01,279 --> 00:30:05,279
the service creation and oh before i

856
00:30:04,240 --> 00:30:07,200
jump there

857
00:30:05,279 --> 00:30:08,320
let's look at the details so now we're

858
00:30:07,200 --> 00:30:10,960
gonna be using

859
00:30:08,320 --> 00:30:12,399
for the most the four most common

860
00:30:10,960 --> 00:30:13,520
lateral movement techniques in windows

861
00:30:12,399 --> 00:30:16,559
environments

862
00:30:13,520 --> 00:30:18,000
um we're gonna use remote services

863
00:30:16,559 --> 00:30:19,919
secure remote service

864
00:30:18,000 --> 00:30:22,159
schedule tasks to create a remote

865
00:30:19,919 --> 00:30:25,520
schedule task we're to use wmi

866
00:30:22,159 --> 00:30:26,240
in winram proposal supports all four of

867
00:30:25,520 --> 00:30:28,000
them

868
00:30:26,240 --> 00:30:30,960
and also we're going to use some network

869
00:30:28,000 --> 00:30:33,039
service scanning so scan some ports

870
00:30:30,960 --> 00:30:34,080
on on some random host and we're also

871
00:30:33,039 --> 00:30:37,120
going to do some network share

872
00:30:34,080 --> 00:30:40,320
enumeration why not okay

873
00:30:37,120 --> 00:30:42,080
okay so let's jump to

874
00:30:40,320 --> 00:30:44,080
our operator computer we have the

875
00:30:42,080 --> 00:30:46,559
playbook here this playbook is going to

876
00:30:44,080 --> 00:30:50,080
execute it when it's windows 10-2

877
00:30:46,559 --> 00:30:51,279
um actually both the the both tasks

878
00:30:50,080 --> 00:30:53,200
on the first playbook are going to

879
00:30:51,279 --> 00:30:55,039
execute against windows 10-2

880
00:30:53,200 --> 00:30:56,640
the reason behind that is that on

881
00:30:55,039 --> 00:31:00,320
windows 10-2

882
00:30:56,640 --> 00:31:03,600
we have a user mr burns and mr burns

883
00:31:00,320 --> 00:31:06,399
he is a local admin on all windows 10

884
00:31:03,600 --> 00:31:07,120
endpoints so which is what we need to be

885
00:31:06,399 --> 00:31:10,320
able to

886
00:31:07,120 --> 00:31:11,919
successfully move laterally okay so on

887
00:31:10,320 --> 00:31:15,679
this first technique we define

888
00:31:11,919 --> 00:31:19,440
like i said the scout the the simulator

889
00:31:15,679 --> 00:31:22,240
first we're gonna randomly scan

890
00:31:19,440 --> 00:31:23,519
hosts like pick random holes and scan

891
00:31:22,240 --> 00:31:25,919
them why not

892
00:31:23,519 --> 00:31:28,399
and then we're going to first create a

893
00:31:25,919 --> 00:31:31,760
and start a remote schedule task

894
00:31:28,399 --> 00:31:34,960
um on windows 10-3 i think this is wrong

895
00:31:31,760 --> 00:31:37,120
here windows 10-3 as you can see here

896
00:31:34,960 --> 00:31:38,320
using the command line so using sch

897
00:31:37,120 --> 00:31:40,640
tasks um

898
00:31:38,320 --> 00:31:42,320
okay and then we're going to create and

899
00:31:40,640 --> 00:31:45,600
start a remote service

900
00:31:42,320 --> 00:31:46,000
on also windows 10.3 this time using api

901
00:31:45,600 --> 00:31:47,679
call

902
00:31:46,000 --> 00:31:48,880
create service and this is the command

903
00:31:47,679 --> 00:31:49,919
that we're going to execute as part of

904
00:31:48,880 --> 00:31:52,640
the service

905
00:31:49,919 --> 00:31:53,279
um actually against windows 10-4 sorry

906
00:31:52,640 --> 00:31:56,399
about that

907
00:31:53,279 --> 00:31:58,480
the target is windows 10-4 okay

908
00:31:56,399 --> 00:32:02,080
and on the separate playbook we're going

909
00:31:58,480 --> 00:32:03,200
to execute commands remotely using wmi

910
00:32:02,080 --> 00:32:06,399
and winram

911
00:32:03,200 --> 00:32:08,000
as you can see here this one is um

912
00:32:06,399 --> 00:32:09,919
first actually we're gonna use some

913
00:32:08,000 --> 00:32:12,080
network share enumeration why not

914
00:32:09,919 --> 00:32:12,960
against five random hosts then we're

915
00:32:12,080 --> 00:32:15,760
gonna execute

916
00:32:12,960 --> 00:32:16,399
code remotely using wmi against five

917
00:32:15,760 --> 00:32:18,480
random

918
00:32:16,399 --> 00:32:20,720
random hosts here as you can see we

919
00:32:18,480 --> 00:32:23,360
define whole target type two which

920
00:32:20,720 --> 00:32:24,799
picks random targets five for a local

921
00:32:23,360 --> 00:32:26,000
for a total of five

922
00:32:24,799 --> 00:32:28,559
random targets and we're going to

923
00:32:26,000 --> 00:32:32,159
execute this command why not

924
00:32:28,559 --> 00:32:34,640
and then using winram executing

925
00:32:32,159 --> 00:32:36,000
against five other random hosts using

926
00:32:34,640 --> 00:32:38,000
winram

927
00:32:36,000 --> 00:32:40,799
and finally we're going to execute a

928
00:32:38,000 --> 00:32:42,240
variation of that same technique psx or

929
00:32:40,799 --> 00:32:44,240
remote services but

930
00:32:42,240 --> 00:32:46,399
this time we're gonna go over against

931
00:32:44,240 --> 00:32:48,399
windows 2019-1

932
00:32:46,399 --> 00:32:49,760
and there's a service here called purple

933
00:32:48,399 --> 00:32:53,919
sharp service

934
00:32:49,760 --> 00:32:55,519
as you can see here netflanders

935
00:32:53,919 --> 00:32:57,120
there's a service called purple sharp

936
00:32:55,519 --> 00:32:58,799
service okay

937
00:32:57,120 --> 00:33:00,320
and this purple sharp service has

938
00:32:58,799 --> 00:33:02,399
notepad what purpose

939
00:33:00,320 --> 00:33:03,600
is going to do is going to authenticate

940
00:33:02,399 --> 00:33:07,039
to a host

941
00:33:03,600 --> 00:33:08,080
and then uh change the configuration of

942
00:33:07,039 --> 00:33:09,600
that service

943
00:33:08,080 --> 00:33:11,760
so instead of note that we execute

944
00:33:09,600 --> 00:33:15,279
powershell and then move that service

945
00:33:11,760 --> 00:33:20,640
back to its original configuration okay

946
00:33:15,279 --> 00:33:22,960
all right so we execute demo2

947
00:33:20,640 --> 00:33:25,760
and let me just make sure that our hosts

948
00:33:22,960 --> 00:33:29,519
are up and running

949
00:33:25,760 --> 00:33:31,200
oh i'm missing one so give me one second

950
00:33:29,519 --> 00:33:32,880
okay i'm back and one thing that i

951
00:33:31,200 --> 00:33:35,039
forgot to mention is

952
00:33:32,880 --> 00:33:37,360
for the second playbook that executes

953
00:33:35,039 --> 00:33:40,399
code on random host

954
00:33:37,360 --> 00:33:43,919
i'm gonna run it again windows 10-4

955
00:33:40,399 --> 00:33:47,039
and why is that because on windows 10-4

956
00:33:43,919 --> 00:33:49,360
i have mr smithers logged in

957
00:33:47,039 --> 00:33:50,880
and mr smithers he's a domain admin so

958
00:33:49,360 --> 00:33:53,840
he's going to be able to

959
00:33:50,880 --> 00:33:55,039
execute code remotely on any host which

960
00:33:53,840 --> 00:33:56,799
is what we want because we're going to

961
00:33:55,039 --> 00:34:01,120
pick random hosts

962
00:33:56,799 --> 00:34:04,480
okay so let's

963
00:34:01,120 --> 00:34:07,200
execute this this now

964
00:34:04,480 --> 00:34:10,320
and let me just confirm that these guys

965
00:34:07,200 --> 00:34:10,320
are all up and running

966
00:34:10,720 --> 00:34:13,760
yeah this guy needs to come back okay so

967
00:34:13,440 --> 00:34:16,639
we

968
00:34:13,760 --> 00:34:18,320
execute it and we pass that service

969
00:34:16,639 --> 00:34:20,079
account password and just like before

970
00:34:18,320 --> 00:34:21,919
i'm gonna stop the video so we don't

971
00:34:20,079 --> 00:34:25,359
have to wait for this to finish

972
00:34:21,919 --> 00:34:27,040
and come back okay so purpose are

973
00:34:25,359 --> 00:34:29,040
finished and let's quickly take a look

974
00:34:27,040 --> 00:34:31,760
at this so the first playbook

975
00:34:29,040 --> 00:34:33,679
we run against windows 10-2 right so

976
00:34:31,760 --> 00:34:36,320
we're running under mr burns

977
00:34:33,679 --> 00:34:38,560
right here and we create a scheduled

978
00:34:36,320 --> 00:34:41,919
task on a remote host

979
00:34:38,560 --> 00:34:43,119
and then we we now create a remote

980
00:34:41,919 --> 00:34:45,839
service

981
00:34:43,119 --> 00:34:46,879
against windows 10-4 as we can see here

982
00:34:45,839 --> 00:34:50,000
purple sharp

983
00:34:46,879 --> 00:34:51,760
generated a random service name and use

984
00:34:50,000 --> 00:34:54,480
windows api calls to create

985
00:34:51,760 --> 00:34:55,119
start and delete that service um so

986
00:34:54,480 --> 00:34:57,040
let's like

987
00:34:55,119 --> 00:34:59,520
let's take a look at how this looks on

988
00:34:57,040 --> 00:35:02,720
the logs so first if we look at

989
00:34:59,520 --> 00:35:04,720
what windows 10-2 did we can see that it

990
00:35:02,720 --> 00:35:06,960
actually executed sch task

991
00:35:04,720 --> 00:35:08,079
to clear a remote task on this remote

992
00:35:06,960 --> 00:35:10,960
host again

993
00:35:08,079 --> 00:35:12,480
under the context of mr burns right and

994
00:35:10,960 --> 00:35:16,000
if we look at this

995
00:35:12,480 --> 00:35:19,520
dashboard that i have here looking for

996
00:35:16,000 --> 00:35:22,640
object changes we can see that

997
00:35:19,520 --> 00:35:26,079
um a schedule task was created

998
00:35:22,640 --> 00:35:29,280
on windows 10-3 right legit task

999
00:35:26,079 --> 00:35:32,880
as we saw here running run dll and

1000
00:35:29,280 --> 00:35:34,960
finally we also see this service account

1001
00:35:32,880 --> 00:35:36,160
with a random name that matches that

1002
00:35:34,960 --> 00:35:40,320
name that we saw

1003
00:35:36,160 --> 00:35:41,760
on on on the logs and mshta was executed

1004
00:35:40,320 --> 00:35:45,680
on windows 10-4

1005
00:35:41,760 --> 00:35:49,040
right so this is how we cut this

1006
00:35:45,680 --> 00:35:53,040
and if we move on to the last playbook

1007
00:35:49,040 --> 00:35:54,800
now we're going to execute code using wm

1008
00:35:53,040 --> 00:35:56,960
oh first we do some network share

1009
00:35:54,800 --> 00:35:57,599
numeration i'm not going to because of

1010
00:35:56,960 --> 00:35:59,760
time

1011
00:35:57,599 --> 00:36:01,359
i'm not gonna go over the results we're

1012
00:35:59,760 --> 00:36:03,839
just gonna go over

1013
00:36:01,359 --> 00:36:05,280
the lateral movement so now we're gonna

1014
00:36:03,839 --> 00:36:09,040
be using

1015
00:36:05,280 --> 00:36:12,079
um wmi to execute

1016
00:36:09,040 --> 00:36:15,280
code on five hosts remotely

1017
00:36:12,079 --> 00:36:18,320
and then winaram to execute code

1018
00:36:15,280 --> 00:36:20,800
on five other hosts remotely in the

1019
00:36:18,320 --> 00:36:22,880
first case msi exec and the second case

1020
00:36:20,800 --> 00:36:26,000
request vr32

1021
00:36:22,880 --> 00:36:29,280
so if we look at a parent

1022
00:36:26,000 --> 00:36:30,800
process relationship uh logs here and if

1023
00:36:29,280 --> 00:36:33,599
we refresh this

1024
00:36:30,800 --> 00:36:36,640
we're gonna see the the child processes

1025
00:36:33,599 --> 00:36:39,520
of wmi prvse.exe

1026
00:36:36,640 --> 00:36:40,000
msi exec as you can see here right so

1027
00:36:39,520 --> 00:36:43,839
this is how

1028
00:36:40,000 --> 00:36:47,520
we cut this lateral movement technique

1029
00:36:43,839 --> 00:36:49,520
and finally moving on with powershell

1030
00:36:47,520 --> 00:36:50,560
because when you execute code using

1031
00:36:49,520 --> 00:36:54,160
winram

1032
00:36:50,560 --> 00:36:56,960
we see a different a different

1033
00:36:54,160 --> 00:36:58,160
uh command executing on this host that

1034
00:36:56,960 --> 00:37:00,880
purple sharp

1035
00:36:58,160 --> 00:37:01,839
executed remote code on we used to win

1036
00:37:00,880 --> 00:37:04,320
ram

1037
00:37:01,839 --> 00:37:05,440
and finally for the first last task of

1038
00:37:04,320 --> 00:37:09,520
this playbook

1039
00:37:05,440 --> 00:37:13,280
we connected to windows 2019 2019-1

1040
00:37:09,520 --> 00:37:14,720
and then we identified the purpose of

1041
00:37:13,280 --> 00:37:18,000
service that was coming

1042
00:37:14,720 --> 00:37:19,920
using notepad.exe so now

1043
00:37:18,000 --> 00:37:22,079
purple sharp is going to change its

1044
00:37:19,920 --> 00:37:24,640
configuration to run powershell

1045
00:37:22,079 --> 00:37:25,680
started start that service and then move

1046
00:37:24,640 --> 00:37:27,520
it back

1047
00:37:25,680 --> 00:37:29,119
of course we confirmed this because we

1048
00:37:27,520 --> 00:37:32,000
did not get

1049
00:37:29,119 --> 00:37:32,720
a service creation event but if you look

1050
00:37:32,000 --> 00:37:36,119
here

1051
00:37:32,720 --> 00:37:37,680
we did see services.exe spawning

1052
00:37:36,119 --> 00:37:40,960
powershell.exe

1053
00:37:37,680 --> 00:37:44,000
on windows 10.1 so this was successful

1054
00:37:40,960 --> 00:37:46,800
but we bypassed some detection right

1055
00:37:44,000 --> 00:37:48,240
so that concludes my demos guys and i

1056
00:37:46,800 --> 00:37:50,720
think it's right on time a little bit

1057
00:37:48,240 --> 00:37:52,800
over but good on time if you like purple

1058
00:37:50,720 --> 00:37:54,800
sharp here's some documentation

1059
00:37:52,800 --> 00:37:57,520
if you like it do give me a star on

1060
00:37:54,800 --> 00:38:00,400
github if you have any feedback

1061
00:37:57,520 --> 00:38:01,920
wanna help with the project please

1062
00:38:00,400 --> 00:38:04,640
please you're more than welcome

1063
00:38:01,920 --> 00:38:05,119
and by the way all these json playbooks

1064
00:38:04,640 --> 00:38:08,160
um

1065
00:38:05,119 --> 00:38:09,280
i'm creating a database of or more like

1066
00:38:08,160 --> 00:38:12,079
a centralized

1067
00:38:09,280 --> 00:38:13,599
repository of playbooks so you can look

1068
00:38:12,079 --> 00:38:15,119
at this project to

1069
00:38:13,599 --> 00:38:16,800
to start getting some ideas on

1070
00:38:15,119 --> 00:38:19,839
simulations so

1071
00:38:16,800 --> 00:38:23,599
that's it for me guys thanks a lot and

1072
00:38:19,839 --> 00:38:23,599
yeah you have a great day

