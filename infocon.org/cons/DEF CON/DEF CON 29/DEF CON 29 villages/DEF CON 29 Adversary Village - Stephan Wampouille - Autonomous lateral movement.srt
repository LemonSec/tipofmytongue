1
00:00:01,920 --> 00:00:07,200
hello my name is stefan von puy and

2
00:00:04,640 --> 00:00:09,040
welcome to my first and hopefully not

3
00:00:07,200 --> 00:00:11,440
last defcon talk

4
00:00:09,040 --> 00:00:13,120
today i will be presenting my autonomous

5
00:00:11,440 --> 00:00:14,320
lateral movement technique that i have

6
00:00:13,120 --> 00:00:16,960
developed

7
00:00:14,320 --> 00:00:19,039
at my time as an intern at prelude

8
00:00:16,960 --> 00:00:20,560
research incorporated

9
00:00:19,039 --> 00:00:22,640
so before we get into it i'd like to

10
00:00:20,560 --> 00:00:25,039
discuss a little bit about myself

11
00:00:22,640 --> 00:00:27,519
so currently i am a rising senior

12
00:00:25,039 --> 00:00:28,800
mechanical engineering student at

13
00:00:27,519 --> 00:00:30,560
virginia tech

14
00:00:28,800 --> 00:00:32,160
hopefully there are some fellow hokies

15
00:00:30,560 --> 00:00:34,000
watching

16
00:00:32,160 --> 00:00:35,680
um and i know what you might be thinking

17
00:00:34,000 --> 00:00:37,200
mechanical engineering

18
00:00:35,680 --> 00:00:38,960
uh how does that relate with cyber

19
00:00:37,200 --> 00:00:40,960
security well that's where my time at

20
00:00:38,960 --> 00:00:43,120
prelude research incorporated has come

21
00:00:40,960 --> 00:00:45,039
in so keep in mind i'm an intern i've

22
00:00:43,120 --> 00:00:47,520
only been doing this for two months i'm

23
00:00:45,039 --> 00:00:49,920
not super familiar with the field yet so

24
00:00:47,520 --> 00:00:52,719
if i make any mistakes please bear with

25
00:00:49,920 --> 00:00:55,440
me let's hop in

26
00:00:52,719 --> 00:00:57,199
so the tools that i'll be using i'll be

27
00:00:55,440 --> 00:00:59,039
using preludes operator which is a

28
00:00:57,199 --> 00:01:00,879
command and control center

29
00:00:59,039 --> 00:01:02,960
i will be using two linux virtual

30
00:01:00,879 --> 00:01:05,119
machines which will be labeled as

31
00:01:02,960 --> 00:01:07,119
workstations a and b and which we will

32
00:01:05,119 --> 00:01:09,840
discuss in the next slide and i'll be

33
00:01:07,119 --> 00:01:12,320
using agents and adversaries agents are

34
00:01:09,840 --> 00:01:14,000
remote access trojans in which this case

35
00:01:12,320 --> 00:01:16,159
i will want to upload

36
00:01:14,000 --> 00:01:18,479
and have it connect back to me

37
00:01:16,159 --> 00:01:21,840
and adversaries are a culmination of

38
00:01:18,479 --> 00:01:24,159
ttps which i will use in my attack

39
00:01:21,840 --> 00:01:26,320
finally we have aws which will be used

40
00:01:24,159 --> 00:01:28,640
as a redirector which will allow me to

41
00:01:26,320 --> 00:01:31,200
have connections to workstations a and b

42
00:01:28,640 --> 00:01:34,640
and proxy back to my local laptop which

43
00:01:31,200 --> 00:01:34,640
we will talk about in one moment

44
00:01:35,520 --> 00:01:38,560
so what is the goal

45
00:01:36,880 --> 00:01:40,880
the goal of this attack is to gain

46
00:01:38,560 --> 00:01:43,520
control of workstation b through the use

47
00:01:40,880 --> 00:01:45,280
of agents and have full control using

48
00:01:43,520 --> 00:01:47,200
prelude operators command and control

49
00:01:45,280 --> 00:01:50,399
center which will allow me to distribute

50
00:01:47,200 --> 00:01:52,799
and execute ttps to that said agent

51
00:01:50,399 --> 00:01:56,799
allowing me to navigate and use the

52
00:01:52,799 --> 00:01:56,799
laptop or network server

53
00:01:57,200 --> 00:02:00,399
what is the plan

54
00:01:58,640 --> 00:02:02,719
so as we can see here

55
00:02:00,399 --> 00:02:04,399
that little circle me is that local

56
00:02:02,719 --> 00:02:06,560
computer that i'm currently recording

57
00:02:04,399 --> 00:02:08,879
this talk on right now

58
00:02:06,560 --> 00:02:10,160
i have connection to an aws redirector

59
00:02:08,879 --> 00:02:11,520
which allows me to connect to

60
00:02:10,160 --> 00:02:14,640
workstation a

61
00:02:11,520 --> 00:02:16,959
in this scenario workstation a is a

62
00:02:14,640 --> 00:02:19,520
remote worker's laptop

63
00:02:16,959 --> 00:02:21,599
so i drew inspiration from this tac

64
00:02:19,520 --> 00:02:24,239
or i drew inspiration for this from the

65
00:02:21,599 --> 00:02:25,840
not-patch attack where they got access

66
00:02:24,239 --> 00:02:28,560
from a

67
00:02:25,840 --> 00:02:31,280
worker's laptop and from there laterally

68
00:02:28,560 --> 00:02:33,280
moved on to the it network that's what

69
00:02:31,280 --> 00:02:35,120
i'm going to be recreating here

70
00:02:33,280 --> 00:02:37,200
so workstation a for the sake of

71
00:02:35,120 --> 00:02:40,080
simplicity we are already going to say i

72
00:02:37,200 --> 00:02:42,239
have access to so that is a workers

73
00:02:40,080 --> 00:02:44,000
remote laptop

74
00:02:42,239 --> 00:02:48,640
remote work laptop

75
00:02:44,000 --> 00:02:50,640
workstation b is the it network

76
00:02:48,640 --> 00:02:52,959
so we know that workstation a and b have

77
00:02:50,640 --> 00:02:54,319
a connection because that worker has

78
00:02:52,959 --> 00:02:56,560
connection to

79
00:02:54,319 --> 00:02:59,360
the it network in the real world that

80
00:02:56,560 --> 00:03:02,480
could be through a vpn which allows the

81
00:02:59,360 --> 00:03:04,400
worker to have access to any company

82
00:03:02,480 --> 00:03:07,840
securities or protocols

83
00:03:04,400 --> 00:03:09,440
so what we're missing is that purple

84
00:03:07,840 --> 00:03:11,760
dashed line

85
00:03:09,440 --> 00:03:13,360
that arrow so what we want is we want to

86
00:03:11,760 --> 00:03:16,080
establish a connection between

87
00:03:13,360 --> 00:03:18,400
workstation b and that aws redirector

88
00:03:16,080 --> 00:03:21,760
which will proxy back to my local laptop

89
00:03:18,400 --> 00:03:21,760
that is our goal in this plan

90
00:03:23,040 --> 00:03:25,440
so

91
00:03:23,920 --> 00:03:27,280
there are really only three steps and

92
00:03:25,440 --> 00:03:29,200
i'm going to be describing in this first

93
00:03:27,280 --> 00:03:32,480
half of the talk my

94
00:03:29,200 --> 00:03:34,319
on paper details of the attack so the

95
00:03:32,480 --> 00:03:36,879
three steps are the first one is to

96
00:03:34,319 --> 00:03:38,319
identify any known hosts on workstation

97
00:03:36,879 --> 00:03:40,799
a

98
00:03:38,319 --> 00:03:44,480
secondly we will use those known hosts

99
00:03:40,799 --> 00:03:46,400
that we find to secure copy an agent in

100
00:03:44,480 --> 00:03:48,080
this case the pneuma agent that

101
00:03:46,400 --> 00:03:51,120
prelude supports

102
00:03:48,080 --> 00:03:53,920
the new agent over an ssh connection to

103
00:03:51,120 --> 00:03:55,840
laptop b or workstation b

104
00:03:53,920 --> 00:03:58,560
and thirdly we will remote activate that

105
00:03:55,840 --> 00:04:01,599
agent over an ssh connection and have it

106
00:03:58,560 --> 00:04:02,959
connect back to our aws redirector

107
00:04:01,599 --> 00:04:04,720
now i know there are plenty of ways to

108
00:04:02,959 --> 00:04:07,120
do this and as i mentioned i'm still a

109
00:04:04,720 --> 00:04:08,640
beginner in this field and through my

110
00:04:07,120 --> 00:04:11,040
research i found secure shell

111
00:04:08,640 --> 00:04:13,519
connections to not only be versatile on

112
00:04:11,040 --> 00:04:16,400
their use but also on the simpler side

113
00:04:13,519 --> 00:04:16,400
for me to understand

114
00:04:16,959 --> 00:04:21,519
so this is the first step of code

115
00:04:19,519 --> 00:04:23,919
we're going to cat which will allow us

116
00:04:21,519 --> 00:04:25,680
to read the contents of a file and in

117
00:04:23,919 --> 00:04:28,720
this case we're going to do that in the

118
00:04:25,680 --> 00:04:31,360
hidden ssh directory in the node known

119
00:04:28,720 --> 00:04:32,880
hosts file or list so we want to cap

120
00:04:31,360 --> 00:04:35,600
that and read that and these are the

121
00:04:32,880 --> 00:04:35,600
outputs of that

122
00:04:35,840 --> 00:04:42,400
the outputs as you can see are the known

123
00:04:38,160 --> 00:04:44,240
hosts there so the ip address and also

124
00:04:42,400 --> 00:04:46,400
on the right you can see parse results

125
00:04:44,240 --> 00:04:48,880
which we'll get into

126
00:04:46,400 --> 00:04:51,280
later when we make it autonomous

127
00:04:48,880 --> 00:04:56,000
so now you can see that we have parsed

128
00:04:51,280 --> 00:04:57,680
an ip address or the known host

129
00:04:56,000 --> 00:04:59,360
now secondly we're going to move to

130
00:04:57,680 --> 00:05:02,080
secure copy net

131
00:04:59,360 --> 00:05:04,639
so the way ssh works if anyone's not

132
00:05:02,080 --> 00:05:07,520
familiar we're going to secure copy

133
00:05:04,639 --> 00:05:09,199
the file that we want for the contents

134
00:05:07,520 --> 00:05:11,120
the host

135
00:05:09,199 --> 00:05:13,120
at ip address

136
00:05:11,120 --> 00:05:16,880
and then the location of where we want

137
00:05:13,120 --> 00:05:17,840
to copy it to on that remote user

138
00:05:16,880 --> 00:05:21,280
so

139
00:05:17,840 --> 00:05:24,000
since aws supports linux os and in this

140
00:05:21,280 --> 00:05:26,400
case we're using the default hostname

141
00:05:24,000 --> 00:05:28,000
for that is ec2.user

142
00:05:26,400 --> 00:05:29,919
which is why i took a stab and just

143
00:05:28,000 --> 00:05:32,080
guessed for that that's why you can see

144
00:05:29,919 --> 00:05:33,680
that's the hostname i'm using

145
00:05:32,080 --> 00:05:36,000
and in this case the location that i'm

146
00:05:33,680 --> 00:05:37,919
distributing that numa agent is in the

147
00:05:36,000 --> 00:05:39,840
hidden directory ssh because at the time

148
00:05:37,919 --> 00:05:41,440
i figured you want to place it in

149
00:05:39,840 --> 00:05:42,240
somewhere that's more obscure obviously

150
00:05:41,440 --> 00:05:43,840
so

151
00:05:42,240 --> 00:05:45,360
no one can find it you'd be a little bit

152
00:05:43,840 --> 00:05:47,360
more discreet

153
00:05:45,360 --> 00:05:48,800
the outputs of running this command over

154
00:05:47,360 --> 00:05:51,440
operator are

155
00:05:48,800 --> 00:05:53,680
or follows with a green dot which means

156
00:05:51,440 --> 00:05:56,639
that it was successful a red dot would

157
00:05:53,680 --> 00:05:56,639
mean is a failure

158
00:05:56,880 --> 00:06:01,440
step three is to remote activate it over

159
00:06:00,160 --> 00:06:04,240
ssh

160
00:06:01,440 --> 00:06:06,960
so again ssh hostname at ip address or

161
00:06:04,240 --> 00:06:08,080
the known user that we grabbed

162
00:06:06,960 --> 00:06:10,240
the

163
00:06:08,080 --> 00:06:11,759
numa agent right here this is the

164
00:06:10,240 --> 00:06:13,440
properties we're going to run it in a

165
00:06:11,759 --> 00:06:16,720
detached terminal

166
00:06:13,440 --> 00:06:18,000
have it beacon back to my aws address

167
00:06:16,720 --> 00:06:22,080
right here

168
00:06:18,000 --> 00:06:23,919
and send any outputs or errors to null

169
00:06:22,080 --> 00:06:26,639
once again just to be a little bit more

170
00:06:23,919 --> 00:06:29,120
obscure and discrete

171
00:06:26,639 --> 00:06:32,639
and these are the outputs of that

172
00:06:29,120 --> 00:06:32,639
you see green so successful

173
00:06:32,960 --> 00:06:38,160
so through those three steps we found

174
00:06:35,600 --> 00:06:39,840
local we found known hosts we secure

175
00:06:38,160 --> 00:06:42,000
copied our agent and we activated our

176
00:06:39,840 --> 00:06:44,080
agent and the results of that are we

177
00:06:42,000 --> 00:06:46,880
went from workstation a

178
00:06:44,080 --> 00:06:49,120
to workstation b

179
00:06:46,880 --> 00:06:50,800
so we're done

180
00:06:49,120 --> 00:06:51,919
nope not yet

181
00:06:50,800 --> 00:06:54,400
we're gonna have a little bit more fun

182
00:06:51,919 --> 00:06:56,960
with it and make it even better

183
00:06:54,400 --> 00:06:58,560
we're gonna make it autonomous

184
00:06:56,960 --> 00:07:00,479
or automated

185
00:06:58,560 --> 00:07:01,680
so now let's hop back into prelude so

186
00:07:00,479 --> 00:07:04,880
that was the first step that was

187
00:07:01,680 --> 00:07:06,240
basically like our on plan on paper plan

188
00:07:04,880 --> 00:07:08,240
so now let's go into here and i want to

189
00:07:06,240 --> 00:07:10,319
describe one feature to you all right so

190
00:07:08,240 --> 00:07:13,039
now we're in operator i want to talk

191
00:07:10,319 --> 00:07:15,039
about their use of custom facts

192
00:07:13,039 --> 00:07:17,759
custom facts are variables that are

193
00:07:15,039 --> 00:07:20,000
saved to an agent as a fact

194
00:07:17,759 --> 00:07:23,280
as you can see here operator supports

195
00:07:20,000 --> 00:07:23,280
very many default ones

196
00:07:23,599 --> 00:07:26,560
so now going into

197
00:07:25,360 --> 00:07:28,720
our editor

198
00:07:26,560 --> 00:07:32,400
we can see the manual adversary the

199
00:07:28,720 --> 00:07:34,720
boring way so we can see that in the

200
00:07:32,400 --> 00:07:37,440
known the parse host

201
00:07:34,720 --> 00:07:39,680
there's an expected output a domain a

202
00:07:37,440 --> 00:07:41,039
file and an ip these are all facts so

203
00:07:39,680 --> 00:07:43,360
these are all variables saved to the

204
00:07:41,039 --> 00:07:45,440
agent as a fact which can be called on

205
00:07:43,360 --> 00:07:46,800
and later used to create a chain which

206
00:07:45,440 --> 00:07:49,120
will make things a lot simpler in this

207
00:07:46,800 --> 00:07:49,120
attack

208
00:07:50,000 --> 00:07:54,080
so now let's get into the automated way

209
00:07:52,160 --> 00:07:57,360
tweaking the code a little bit in action

210
00:07:54,080 --> 00:07:59,039
and adding an extra line allows us to

211
00:07:57,360 --> 00:08:00,319
deploy this adversary and have it

212
00:07:59,039 --> 00:08:03,199
connect to

213
00:08:00,319 --> 00:08:04,560
any ips or any host available to it that

214
00:08:03,199 --> 00:08:06,400
we have connection to

215
00:08:04,560 --> 00:08:07,919
just with one click of the button so

216
00:08:06,400 --> 00:08:09,360
once again we'll start with parse known

217
00:08:07,919 --> 00:08:12,080
hosts

218
00:08:09,360 --> 00:08:14,319
again we will search and find and

219
00:08:12,080 --> 00:08:16,080
document any hosts

220
00:08:14,319 --> 00:08:17,599
but what we are really looking for is

221
00:08:16,080 --> 00:08:20,240
this expected output we want this

222
00:08:17,599 --> 00:08:21,759
ip.t1018

223
00:08:20,240 --> 00:08:24,000
we're going to use that again

224
00:08:21,759 --> 00:08:25,599
so next step would be to secure copy

225
00:08:24,000 --> 00:08:26,720
we're going to secure copy and now you

226
00:08:25,599 --> 00:08:28,960
can see that the code is a little bit

227
00:08:26,720 --> 00:08:31,440
different than it was before

228
00:08:28,960 --> 00:08:34,159
this is a fact agent location is a

229
00:08:31,440 --> 00:08:37,360
default fact and operator that takes the

230
00:08:34,159 --> 00:08:39,360
agent's location the property location

231
00:08:37,360 --> 00:08:42,320
so in this case

232
00:08:39,360 --> 00:08:44,880
it's somewhere in the home user's

233
00:08:42,320 --> 00:08:46,720
address i'll show i'll show it later on

234
00:08:44,880 --> 00:08:49,279
but it knows

235
00:08:46,720 --> 00:08:51,760
it knows where to find it

236
00:08:49,279 --> 00:08:53,920
so we're going to secure copy that agent

237
00:08:51,760 --> 00:08:56,560
location on workstation a which contains

238
00:08:53,920 --> 00:08:59,680
all the newer properties

239
00:08:56,560 --> 00:09:02,800
to the username which i'll go back to

240
00:08:59,680 --> 00:09:04,560
at the ip address that we grabbed from

241
00:09:02,800 --> 00:09:06,640
parsing the known hosts

242
00:09:04,560 --> 00:09:09,200
and we're going to upload it to this

243
00:09:06,640 --> 00:09:10,320
location a temporary full temporary

244
00:09:09,200 --> 00:09:12,399
directory

245
00:09:10,320 --> 00:09:14,720
pneuma linux

246
00:09:12,399 --> 00:09:16,399
so now going back to this username this

247
00:09:14,720 --> 00:09:18,959
is the only manual part that i put into

248
00:09:16,399 --> 00:09:18,959
this attack

249
00:09:19,200 --> 00:09:25,440
since i knew that the default user for a

250
00:09:21,839 --> 00:09:28,080
os linux on aws was ec2.user

251
00:09:25,440 --> 00:09:30,920
dash user i added that as a custom fact

252
00:09:28,080 --> 00:09:32,880
and i could add anything i could do

253
00:09:30,920 --> 00:09:35,600
adversary.village

254
00:09:32,880 --> 00:09:37,120
and say us

255
00:09:35,600 --> 00:09:39,440
not sure how that would fit into this

256
00:09:37,120 --> 00:09:40,560
code but if you have any suggestions let

257
00:09:39,440 --> 00:09:42,320
me know

258
00:09:40,560 --> 00:09:44,120
so now you can see that i previously

259
00:09:42,320 --> 00:09:46,160
added the user.name

260
00:09:44,120 --> 00:09:48,880
ec2.user that's the only manual thing

261
00:09:46,160 --> 00:09:48,880
that i did in this

262
00:09:48,959 --> 00:09:53,600
so now going back to the automated way

263
00:09:51,279 --> 00:09:55,839
we're going to secure copy that numa

264
00:09:53,600 --> 00:09:59,040
location on workstation a

265
00:09:55,839 --> 00:10:02,320
to the username at ip address from

266
00:09:59,040 --> 00:10:02,320
the parsing known hosts

267
00:10:02,839 --> 00:10:07,760
next we're going to look at how to

268
00:10:05,120 --> 00:10:10,320
remote activate it to ssh remote

269
00:10:07,760 --> 00:10:13,040
activated so we have the username and ip

270
00:10:10,320 --> 00:10:15,440
address run in detached terminal

271
00:10:13,040 --> 00:10:18,480
and what we want is our numa executable

272
00:10:15,440 --> 00:10:21,279
right here our agent executable

273
00:10:18,480 --> 00:10:22,959
to make it automated i included a fact

274
00:10:21,279 --> 00:10:24,560
but to be able to grab this fact i added

275
00:10:22,959 --> 00:10:26,240
one more line of code

276
00:10:24,560 --> 00:10:28,160
what we're going to do is over an ssh

277
00:10:26,240 --> 00:10:30,160
command we're going to list

278
00:10:28,160 --> 00:10:32,480
the contents of

279
00:10:30,160 --> 00:10:34,880
that temporary directory that we

280
00:10:32,480 --> 00:10:37,040
uploaded uploaded our new

281
00:10:34,880 --> 00:10:39,200
linux agent to as you can see the

282
00:10:37,040 --> 00:10:42,200
expected output is file

283
00:10:39,200 --> 00:10:42,200
t1021.004

284
00:10:42,320 --> 00:10:46,000
that is what we're looking for and we're

285
00:10:44,079 --> 00:10:48,560
going to put that right in here so that

286
00:10:46,000 --> 00:10:49,839
it knows that this is where the agent

287
00:10:48,560 --> 00:10:52,959
location

288
00:10:49,839 --> 00:10:54,399
is on workstation b

289
00:10:52,959 --> 00:10:56,720
we're going to name it workstation

290
00:10:54,399 --> 00:10:58,640
underscore b and have it addressed back

291
00:10:56,720 --> 00:11:01,440
to operator.tcp

292
00:10:58,640 --> 00:11:03,600
that is the aws um

293
00:11:01,440 --> 00:11:05,200
tcp port address

294
00:11:03,600 --> 00:11:05,920
and then once again we're going to send

295
00:11:05,200 --> 00:11:09,040
the

296
00:11:05,920 --> 00:11:11,600
outputs and errors to null

297
00:11:09,040 --> 00:11:14,560
so now we have four steps all automated

298
00:11:11,600 --> 00:11:17,519
and now let's test it out

299
00:11:14,560 --> 00:11:18,880
so here we have workstation a

300
00:11:17,519 --> 00:11:20,880
and we're going to scroll down to our

301
00:11:18,880 --> 00:11:22,240
adversaries and find our automated the

302
00:11:20,880 --> 00:11:25,279
fun way

303
00:11:22,240 --> 00:11:25,279
and we're going to deploy it

304
00:11:26,480 --> 00:11:31,200
and just like that we have now connected

305
00:11:28,399 --> 00:11:33,040
to workstation b autonomously

306
00:11:31,200 --> 00:11:34,880
now the difference is in the manual way

307
00:11:33,040 --> 00:11:37,839
each step relies on each other so two

308
00:11:34,880 --> 00:11:40,320
requires one three requires two and one

309
00:11:37,839 --> 00:11:42,320
so if i wanted to secure copy or do any

310
00:11:40,320 --> 00:11:43,839
ssh command i needed to first know what

311
00:11:42,320 --> 00:11:46,079
the known hosts were and then manually

312
00:11:43,839 --> 00:11:47,120
go back into my code and change that in

313
00:11:46,079 --> 00:11:49,200
this way

314
00:11:47,120 --> 00:11:50,959
operator knows how to intuitively pick

315
00:11:49,200 --> 00:11:52,560
up the facts that it's learned and

316
00:11:50,959 --> 00:11:55,360
incorporate them into the next step

317
00:11:52,560 --> 00:11:56,800
which creates a chain of attacks

318
00:11:55,360 --> 00:11:58,800
now if we look into what actually

319
00:11:56,800 --> 00:11:59,680
happened we can see that it occurred

320
00:11:58,800 --> 00:12:01,360
twice

321
00:11:59,680 --> 00:12:02,720
so we found hosts

322
00:12:01,360 --> 00:12:04,639
and it actually picked up two different

323
00:12:02,720 --> 00:12:07,279
ip addresses

324
00:12:04,639 --> 00:12:09,040
if it uploaded the numa to different two

325
00:12:07,279 --> 00:12:10,720
different ip addresses

326
00:12:09,040 --> 00:12:12,320
it once again remote listed both of them

327
00:12:10,720 --> 00:12:14,639
to create that fact that we wanted and

328
00:12:12,320 --> 00:12:16,079
then remote activated each the problem

329
00:12:14,639 --> 00:12:18,800
is is i don't have credential access to

330
00:12:16,079 --> 00:12:21,120
one of the ip addresses but i have it to

331
00:12:18,800 --> 00:12:22,880
i only have it credential access to one

332
00:12:21,120 --> 00:12:24,959
so if this were a real-world scenario

333
00:12:22,880 --> 00:12:26,560
and you were deploying this attack on a

334
00:12:24,959 --> 00:12:28,800
network that had several connections and

335
00:12:26,560 --> 00:12:31,360
credential accesses to you it would

336
00:12:28,800 --> 00:12:34,000
result in a lot more agents connecting

337
00:12:31,360 --> 00:12:36,320
back and even more expansive network of

338
00:12:34,000 --> 00:12:37,760
agents that you control now

339
00:12:36,320 --> 00:12:39,680
all right so now if we look in here we

340
00:12:37,760 --> 00:12:41,920
can see the known hosts so we can see

341
00:12:39,680 --> 00:12:43,279
the ip address of

342
00:12:41,920 --> 00:12:44,880
the

343
00:12:43,279 --> 00:12:47,440
network that we connected to the it

344
00:12:44,880 --> 00:12:49,600
network and

345
00:12:47,440 --> 00:12:52,079
the results of doing that

346
00:12:49,600 --> 00:12:54,000
and the activation which resulted in our

347
00:12:52,079 --> 00:12:55,120
workstation b

348
00:12:54,000 --> 00:12:57,200
alright and that was it for my

349
00:12:55,120 --> 00:12:59,200
presentation on my lateral movement

350
00:12:57,200 --> 00:13:02,079
technique

351
00:12:59,200 --> 00:13:04,000
on preludes operator

352
00:13:02,079 --> 00:13:05,920
once again my name is stefan von puy as

353
00:13:04,000 --> 00:13:07,760
you can see my contacts are empty

354
00:13:05,920 --> 00:13:09,839
knowing you guys are all professionals

355
00:13:07,760 --> 00:13:11,360
in the cyber security field i am sure if

356
00:13:09,839 --> 00:13:12,320
you want to contact me you will find a

357
00:13:11,360 --> 00:13:14,399
way

358
00:13:12,320 --> 00:13:16,320
follow along on the blog the prelude

359
00:13:14,399 --> 00:13:18,720
blog because this was phase one out of

360
00:13:16,320 --> 00:13:21,120
my four phase attack and come back in

361
00:13:18,720 --> 00:13:22,880
when i conclude my attack fully

362
00:13:21,120 --> 00:13:24,959
thank you so much for your time and i

363
00:13:22,880 --> 00:13:28,920
hope to be at the next devcon

364
00:13:24,959 --> 00:13:28,920
have a great day bye

