1
00:00:00,719 --> 00:00:02,639
hello everyone and thank you for joining

2
00:00:02,639 --> 00:00:03,360
i'm ken

3
00:00:03,360 --> 00:00:05,040
and i'm honored and excited to be here

4
00:00:05,040 --> 00:00:07,200
today at defcon 29 and share our

5
00:00:07,200 --> 00:00:08,160
research about

6
00:00:08,160 --> 00:00:11,200
exploiting host document messaging

7
00:00:11,200 --> 00:00:13,360
a little bit about me i'm the co-founder

8
00:00:13,360 --> 00:00:15,360
and chief architect of enzo security i

9
00:00:15,360 --> 00:00:16,320
live in tel aviv

10
00:00:16,320 --> 00:00:18,480
i like to build things and hacking has

11
00:00:18,480 --> 00:00:22,560
been my profession since 2004.

12
00:00:22,720 --> 00:00:25,039
in this talk i'm going to talk about

13
00:00:25,039 --> 00:00:26,720
what course document messaging

14
00:00:26,720 --> 00:00:29,439
is how to hack it and how to use it

15
00:00:29,439 --> 00:00:31,359
safely

16
00:00:31,359 --> 00:00:34,960
but um when we looked into this

17
00:00:34,960 --> 00:00:38,000
issue to this subject and try to map

18
00:00:38,000 --> 00:00:40,239
what's uh the risks in it and how to

19
00:00:40,239 --> 00:00:41,760
handle it from application security

20
00:00:41,760 --> 00:00:43,120
perspective

21
00:00:43,120 --> 00:00:47,280
we found that when we are used to having

22
00:00:47,280 --> 00:00:51,520
very good tools into in introspecting

23
00:00:51,520 --> 00:00:53,680
web traffic in looking at the browser

24
00:00:53,680 --> 00:00:55,520
generally and being able to understand

25
00:00:55,520 --> 00:00:56,559
what's going

26
00:00:56,559 --> 00:00:59,760
on inside it especially in places where

27
00:00:59,760 --> 00:01:01,680
our application interface with other

28
00:01:01,680 --> 00:01:02,879
applications

29
00:01:02,879 --> 00:01:05,920
and and from perspective of a pentester

30
00:01:05,920 --> 00:01:07,200
this is a really interesting

31
00:01:07,200 --> 00:01:10,560
place and because document messaging

32
00:01:10,560 --> 00:01:13,520
offers communication between different

33
00:01:13,520 --> 00:01:14,240
origins

34
00:01:14,240 --> 00:01:17,520
different parties practically but

35
00:01:17,520 --> 00:01:20,720
there is little to no tools to actually

36
00:01:20,720 --> 00:01:22,799
properly look into these messaging

37
00:01:22,799 --> 00:01:25,280
protocols and understand what's going

38
00:01:25,280 --> 00:01:28,320
on inside them so and

39
00:01:28,320 --> 00:01:30,320
we decided to build their own tool and

40
00:01:30,320 --> 00:01:32,560
therefore this talk is also

41
00:01:32,560 --> 00:01:34,960
about the tool and how and the results

42
00:01:34,960 --> 00:01:36,240
that we made in order to

43
00:01:36,240 --> 00:01:41,839
build it and and i hope you like it

44
00:01:44,640 --> 00:01:47,200
so what is post document messaging

45
00:01:47,200 --> 00:01:49,119
course document messaging is window to

46
00:01:49,119 --> 00:01:51,280
window communication method

47
00:01:51,280 --> 00:01:54,000
and that allows frames from different

48
00:01:54,000 --> 00:01:57,759
origins to communicate with each other

49
00:01:57,840 --> 00:01:59,920
there is no network everything happens

50
00:01:59,920 --> 00:02:02,000
in the in the browser's memory it's

51
00:02:02,000 --> 00:02:02,560
actually

52
00:02:02,560 --> 00:02:04,479
binding functions it's actually

53
00:02:04,479 --> 00:02:05,840
everything is already loaded in the

54
00:02:05,840 --> 00:02:06,560
runtime

55
00:02:06,560 --> 00:02:08,639
and there is actually no network stack

56
00:02:08,639 --> 00:02:10,639
involved at all in these goals

57
00:02:10,639 --> 00:02:14,160
and the security model that that

58
00:02:14,160 --> 00:02:16,879
supports this is very straightforward in

59
00:02:16,879 --> 00:02:19,280
simpler

60
00:02:19,280 --> 00:02:21,520
let's talk about the functional flow of

61
00:02:21,520 --> 00:02:23,360
course messaging for a moment

62
00:02:23,360 --> 00:02:26,879
so inside the browsing window and

63
00:02:26,879 --> 00:02:28,959
content the document that opens inside

64
00:02:28,959 --> 00:02:30,640
the browsing window arrives on a

65
00:02:30,640 --> 00:02:32,400
specific origin

66
00:02:32,400 --> 00:02:35,519
and this document may include script

67
00:02:35,519 --> 00:02:37,360
this is basically some sort of

68
00:02:37,360 --> 00:02:38,640
perspective on how

69
00:02:38,640 --> 00:02:41,760
every web page loads there is a

70
00:02:41,760 --> 00:02:44,080
an object called window that is managed

71
00:02:44,080 --> 00:02:46,239
by by the browser and offers

72
00:02:46,239 --> 00:02:48,480
the api that documents and other

73
00:02:48,480 --> 00:02:50,080
elements in the

74
00:02:50,080 --> 00:02:51,280
in the runtime environment of the

75
00:02:51,280 --> 00:02:53,440
browser requires

76
00:02:53,440 --> 00:02:56,720
and this window is what hosts

77
00:02:56,720 --> 00:03:00,319
particularly the document and the script

78
00:03:01,360 --> 00:03:04,800
any document can open a new window

79
00:03:04,800 --> 00:03:07,519
and embed another document from another

80
00:03:07,519 --> 00:03:08,560
origin

81
00:03:08,560 --> 00:03:11,599
or open a window we're using a window

82
00:03:11,599 --> 00:03:13,200
opener and open another window in

83
00:03:13,200 --> 00:03:14,560
another tab

84
00:03:14,560 --> 00:03:18,720
and maintain a handle to that window so

85
00:03:18,720 --> 00:03:22,720
it can communicate with it later on

86
00:03:24,159 --> 00:03:27,040
the scripts that run inside windows if

87
00:03:27,040 --> 00:03:28,879
they have reference to

88
00:03:28,879 --> 00:03:32,879
other windows they can send

89
00:03:32,879 --> 00:03:35,360
messages to these windows using the post

90
00:03:35,360 --> 00:03:36,640
message command

91
00:03:36,640 --> 00:03:38,640
and they can also handle incoming

92
00:03:38,640 --> 00:03:40,480
messages by

93
00:03:40,480 --> 00:03:42,640
registering a listener on the message

94
00:03:42,640 --> 00:03:44,319
event on the window

95
00:03:44,319 --> 00:03:47,360
this will this is practically allowing

96
00:03:47,360 --> 00:03:49,680
duplex communication between two

97
00:03:49,680 --> 00:03:51,280
different origins

98
00:03:51,280 --> 00:03:54,239
say one page loaded from hacker.com and

99
00:03:54,239 --> 00:03:55,680
another page loaded from

100
00:03:55,680 --> 00:03:57,599
vikram.com they can still communicate

101
00:03:57,599 --> 00:03:58,959
with this technology

102
00:03:58,959 --> 00:04:00,879
as long as they have reference to each

103
00:04:00,879 --> 00:04:03,760
other's windows

104
00:04:04,239 --> 00:04:07,439
and in today more than web pages and

105
00:04:07,439 --> 00:04:09,280
applications there are always

106
00:04:09,280 --> 00:04:11,680
some use of framing some use of

107
00:04:11,680 --> 00:04:14,319
reloading and referring another window

108
00:04:14,319 --> 00:04:16,478
maybe sometimes in sso scenarios

109
00:04:16,478 --> 00:04:18,399
sometimes in just embedment it's very

110
00:04:18,399 --> 00:04:19,358
common

111
00:04:19,358 --> 00:04:22,400
in sites that needs to tap and interact

112
00:04:22,400 --> 00:04:24,000
with ad networks

113
00:04:24,000 --> 00:04:27,600
so the the final result is that many web

114
00:04:27,600 --> 00:04:29,360
pages are very complex in the way that

115
00:04:29,360 --> 00:04:30,080
they

116
00:04:30,080 --> 00:04:33,199
build a tree hierarchy of windows and

117
00:04:33,199 --> 00:04:35,919
because the way this um feature is

118
00:04:35,919 --> 00:04:37,759
implemented inside the browser

119
00:04:37,759 --> 00:04:39,280
because of the course document messaging

120
00:04:39,280 --> 00:04:40,720
is implementing inside the border the

121
00:04:40,720 --> 00:04:41,680
browser

122
00:04:41,680 --> 00:04:44,160
every window in the domain key can

123
00:04:44,160 --> 00:04:45,040
practically

124
00:04:45,040 --> 00:04:48,320
send messages to any other window or

125
00:04:48,320 --> 00:04:52,400
receive messages from any other window

126
00:04:54,080 --> 00:04:56,560
this brings us to the security model

127
00:04:56,560 --> 00:04:57,600
because

128
00:04:57,600 --> 00:05:00,479
in fact there is no way for the

129
00:05:00,479 --> 00:05:03,280
developer of a specific document

130
00:05:03,280 --> 00:05:06,000
to know if it's going to be loaded in

131
00:05:06,000 --> 00:05:07,759
different environments everybody can try

132
00:05:07,759 --> 00:05:10,720
and load them as iframe for example and

133
00:05:10,720 --> 00:05:12,240
if they are implementing

134
00:05:12,240 --> 00:05:14,720
some interface they are using some host

135
00:05:14,720 --> 00:05:15,759
messages

136
00:05:15,759 --> 00:05:18,880
um capabilities they are

137
00:05:18,880 --> 00:05:21,280
exposed to some different attacks so the

138
00:05:21,280 --> 00:05:23,120
security model is very straightforward

139
00:05:23,120 --> 00:05:24,639
forward and simple

140
00:05:24,639 --> 00:05:26,880
we have in the center in about how to

141
00:05:26,880 --> 00:05:28,000
follow how to start

142
00:05:28,000 --> 00:05:31,280
the uh the session some summary

143
00:05:31,280 --> 00:05:33,120
security headers and configuration allow

144
00:05:33,120 --> 00:05:34,800
you to prevent

145
00:05:34,800 --> 00:05:37,360
the window or instruct the browser to

146
00:05:37,360 --> 00:05:39,039
not load this document

147
00:05:39,039 --> 00:05:41,199
in some scenarios so for example very

148
00:05:41,199 --> 00:05:42,479
common very known

149
00:05:42,479 --> 00:05:45,759
extreme options will tell the browser

150
00:05:45,759 --> 00:05:48,400
to not load the document into an

151
00:05:48,400 --> 00:05:49,440
embedded

152
00:05:49,440 --> 00:05:52,479
window inside another window

153
00:05:52,479 --> 00:05:56,160
when uh when even even if the iframe

154
00:05:56,160 --> 00:05:56,880
points to

155
00:05:56,880 --> 00:06:00,319
uh to your target window um

156
00:06:00,319 --> 00:06:03,039
other security headers also restrict the

157
00:06:03,039 --> 00:06:05,600
use of the window opener

158
00:06:05,600 --> 00:06:07,600
but as as we all know about security

159
00:06:07,600 --> 00:06:08,960
headers sometimes it's

160
00:06:08,960 --> 00:06:11,440
not very simple to uh to be able to

161
00:06:11,440 --> 00:06:12,880
configure them sometimes the

162
00:06:12,880 --> 00:06:14,319
environments are very complex and

163
00:06:14,319 --> 00:06:15,120
sometimes and

164
00:06:15,120 --> 00:06:17,600
developers can override them so security

165
00:06:17,600 --> 00:06:18,479
headers are

166
00:06:18,479 --> 00:06:22,479
one part of the this model but it's not

167
00:06:22,479 --> 00:06:24,479
in many cases sufficient to cover

168
00:06:24,479 --> 00:06:27,199
everything so also on the chord level

169
00:06:27,199 --> 00:06:29,919
the sender code and is responsible and

170
00:06:29,919 --> 00:06:30,880
actually

171
00:06:30,880 --> 00:06:32,720
actually the browser of forces the api

172
00:06:32,720 --> 00:06:34,639
of the vowels of force is the sender to

173
00:06:34,639 --> 00:06:36,479
specify the remote origin

174
00:06:36,479 --> 00:06:40,160
but it allows to specify um any origin

175
00:06:40,160 --> 00:06:43,440
and because in some scenarios you need

176
00:06:43,440 --> 00:06:44,800
to still send

177
00:06:44,800 --> 00:06:46,800
when you don't know who the recipient is

178
00:06:46,800 --> 00:06:48,800
and in this case you're supposed to send

179
00:06:48,800 --> 00:06:49,199
only

180
00:06:49,199 --> 00:06:51,520
stuff that is not sensitive and on the

181
00:06:51,520 --> 00:06:53,919
receiving end the browser provides

182
00:06:53,919 --> 00:06:56,080
authoritative information about the

183
00:06:56,080 --> 00:06:57,680
origin of the request

184
00:06:57,680 --> 00:06:59,840
and all that is required from the side

185
00:06:59,840 --> 00:07:01,680
of developers is to verify that this

186
00:07:01,680 --> 00:07:03,440
origin is an origin that they trust and

187
00:07:03,440 --> 00:07:04,000
then

188
00:07:04,000 --> 00:07:05,919
follow up and only then process the

189
00:07:05,919 --> 00:07:07,360
request

190
00:07:07,360 --> 00:07:10,720
so this is basically an outlook of

191
00:07:10,720 --> 00:07:12,880
post document messaging that explains

192
00:07:12,880 --> 00:07:17,440
the playground of security in this uh

193
00:07:17,440 --> 00:07:20,000
when this technology is in use and i

194
00:07:20,000 --> 00:07:21,440
want to take it to a perspective of the

195
00:07:21,440 --> 00:07:23,120
offense and defense to see

196
00:07:23,120 --> 00:07:25,280
how how should we approach it from both

197
00:07:25,280 --> 00:07:26,319
directions

198
00:07:26,319 --> 00:07:29,599
so we can actually understand what kind

199
00:07:29,599 --> 00:07:31,280
of tooling is the most appropriate and

200
00:07:31,280 --> 00:07:32,639
what kind of method is the most

201
00:07:32,639 --> 00:07:33,759
appropriate for

202
00:07:33,759 --> 00:07:39,199
testing and fixing post messages problem

203
00:07:39,280 --> 00:07:44,240
so on the side of defense um

204
00:07:44,240 --> 00:07:47,280
we need to use security headers we need

205
00:07:47,280 --> 00:07:47,759
to

206
00:07:47,759 --> 00:07:50,720
only send messages to selective targets

207
00:07:50,720 --> 00:07:51,039
so

208
00:07:51,039 --> 00:07:53,199
don't just publish sensitive data to

209
00:07:53,199 --> 00:07:54,240
everybody

210
00:07:54,240 --> 00:07:56,840
and we need to authenticate incoming

211
00:07:56,840 --> 00:07:58,319
messages

212
00:07:58,319 --> 00:08:00,720
so defense is quite straightforward we

213
00:08:00,720 --> 00:08:03,440
need to use security headers when we can

214
00:08:03,440 --> 00:08:05,919
we need to instruct developers to only

215
00:08:05,919 --> 00:08:08,000
send messages to selective targets

216
00:08:08,000 --> 00:08:10,160
if they are sending to wildcard it must

217
00:08:10,160 --> 00:08:11,199
be something that is

218
00:08:11,199 --> 00:08:14,639
purely non-sensitive if such a thing

219
00:08:14,639 --> 00:08:15,919
exists

220
00:08:15,919 --> 00:08:17,360
and they need to authenticate incoming

221
00:08:17,360 --> 00:08:20,400
messages before they process them

222
00:08:20,400 --> 00:08:24,879
let's do a quick stride drilling down

223
00:08:24,879 --> 00:08:27,919
so um splitted to two

224
00:08:27,919 --> 00:08:30,240
different scenarios the first scenario

225
00:08:30,240 --> 00:08:31,919
is that our code is

226
00:08:31,919 --> 00:08:34,559
issuing a message is using post message

227
00:08:34,559 --> 00:08:35,839
and then

228
00:08:35,839 --> 00:08:39,039
the the risk is that the uh

229
00:08:39,039 --> 00:08:42,320
the window on the other side is not the

230
00:08:42,320 --> 00:08:43,839
is not coming from the origin that we

231
00:08:43,839 --> 00:08:45,680
think it's coming from

232
00:08:45,680 --> 00:08:49,200
and um the threats um

233
00:08:49,200 --> 00:08:51,279
is the actual threat is information

234
00:08:51,279 --> 00:08:53,200
leakage that we will send sensitive data

235
00:08:53,200 --> 00:08:54,800
to somewhere that we're not supposed to

236
00:08:54,800 --> 00:08:56,480
send it

237
00:08:56,480 --> 00:08:59,680
on the ad event listener side when our

238
00:08:59,680 --> 00:09:00,160
code

239
00:09:00,160 --> 00:09:03,040
is handling incoming traffic so again

240
00:09:03,040 --> 00:09:04,480
there is a threat that the

241
00:09:04,480 --> 00:09:08,880
the sender is the sender identity is not

242
00:09:08,880 --> 00:09:11,600
the uh is spoofed is not the center is

243
00:09:11,600 --> 00:09:12,640
not who we think

244
00:09:12,640 --> 00:09:16,800
they are and um the threat of elevation

245
00:09:16,800 --> 00:09:17,279
is

246
00:09:17,279 --> 00:09:21,040
that the functions um that the

247
00:09:21,040 --> 00:09:25,440
message instruct function in our context

248
00:09:25,440 --> 00:09:28,560
and that in this context the

249
00:09:28,560 --> 00:09:31,600
instruction can give the attacker more

250
00:09:31,600 --> 00:09:32,959
privileges on doing

251
00:09:32,959 --> 00:09:35,200
some things triggering some forward

252
00:09:35,200 --> 00:09:36,800
functions we consider this

253
00:09:36,800 --> 00:09:39,360
as elevation because the attacker is

254
00:09:39,360 --> 00:09:41,839
elevating from running in remote context

255
00:09:41,839 --> 00:09:45,600
into running in our context our controls

256
00:09:45,600 --> 00:09:46,800
for

257
00:09:46,800 --> 00:09:50,160
for threats of spoofing the recipient

258
00:09:50,160 --> 00:09:51,200
identity

259
00:09:51,200 --> 00:09:54,720
is do not send sensitive to wildcard

260
00:09:54,720 --> 00:09:58,399
and our control for

261
00:09:58,399 --> 00:09:59,440
for making sure that we're not

262
00:09:59,440 --> 00:10:01,600
processing unwanted messages

263
00:10:01,600 --> 00:10:04,000
is to authenticate the origin of all

264
00:10:04,000 --> 00:10:04,640
messages

265
00:10:04,640 --> 00:10:06,399
and only allow messages that we trust

266
00:10:06,399 --> 00:10:07,680
and that we have

267
00:10:07,680 --> 00:10:10,800
controlled their contact with um

268
00:10:10,800 --> 00:10:13,440
additional mitigation is to set up

269
00:10:13,440 --> 00:10:14,079
everything

270
00:10:14,079 --> 00:10:16,720
in security headers to restrict as much

271
00:10:16,720 --> 00:10:19,519
as possible the loading of our origin

272
00:10:19,519 --> 00:10:22,480
into other windows

273
00:10:23,519 --> 00:10:26,160
so attack is also in two scenarios the

274
00:10:26,160 --> 00:10:28,160
first one is to attack senders

275
00:10:28,160 --> 00:10:30,320
and listen to the data that they send to

276
00:10:30,320 --> 00:10:31,279
see if they send any

277
00:10:31,279 --> 00:10:34,000
anything sensitive and the second is to

278
00:10:34,000 --> 00:10:36,240
attack receivers by sending the messages

279
00:10:36,240 --> 00:10:38,480
and trying to run thing in the remote

280
00:10:38,480 --> 00:10:40,959
context

281
00:10:41,120 --> 00:10:43,519
we are addressing few different

282
00:10:43,519 --> 00:10:45,120
weaknesses here

283
00:10:45,120 --> 00:10:48,079
and the first weakness is that in some

284
00:10:48,079 --> 00:10:48,959
cases

285
00:10:48,959 --> 00:10:51,200
even if a x-frame option for example

286
00:10:51,200 --> 00:10:53,680
works still you can use a window opener

287
00:10:53,680 --> 00:10:55,600
and in some cases it's very difficult to

288
00:10:55,600 --> 00:10:57,279
propagate the security headers

289
00:10:57,279 --> 00:10:59,040
everywhere that is needed

290
00:10:59,040 --> 00:11:01,839
and to make sure that the window

291
00:11:01,839 --> 00:11:02,640
actually

292
00:11:02,640 --> 00:11:05,600
won't load in any risky scenario as

293
00:11:05,600 --> 00:11:07,360
testers we have to look at this

294
00:11:07,360 --> 00:11:10,720
and spot those places we need to try

295
00:11:10,720 --> 00:11:14,480
and host the vulnerable the vulnerable

296
00:11:14,480 --> 00:11:15,360
frame

297
00:11:15,360 --> 00:11:17,680
and uh make sure that we host it in a

298
00:11:17,680 --> 00:11:18,480
way that uh

299
00:11:18,480 --> 00:11:20,959
that is similar to a real scenario to

300
00:11:20,959 --> 00:11:21,519
actually

301
00:11:21,519 --> 00:11:24,160
make sure that it won't if in most cases

302
00:11:24,160 --> 00:11:25,519
it will be still possible

303
00:11:25,519 --> 00:11:27,920
either to operate in opener in window

304
00:11:27,920 --> 00:11:29,600
opener or in an iframe

305
00:11:29,600 --> 00:11:32,240
or maybe find another frame that has

306
00:11:32,240 --> 00:11:33,600
similar problems when you

307
00:11:33,600 --> 00:11:37,040
explore the your target and test the

308
00:11:37,040 --> 00:11:40,399
scope second weakness

309
00:11:40,399 --> 00:11:43,680
is that in some cases developer might

310
00:11:43,680 --> 00:11:45,920
be under the assumption that they are

311
00:11:45,920 --> 00:11:46,720
protected

312
00:11:46,720 --> 00:11:50,000
and sent unrestrictedly to wildcard

313
00:11:50,000 --> 00:11:51,920
we need to spot these places and see if

314
00:11:51,920 --> 00:11:53,200
any sensitive

315
00:11:53,200 --> 00:11:57,519
data is sent to any

316
00:11:57,519 --> 00:12:00,560
any uh origin this could happen because

317
00:12:00,560 --> 00:12:01,839
the developers

318
00:12:01,839 --> 00:12:04,240
think that they're protected but it can

319
00:12:04,240 --> 00:12:05,760
also happen because they

320
00:12:05,760 --> 00:12:07,519
operate in a very complex environment

321
00:12:07,519 --> 00:12:08,839
where they need to work with many

322
00:12:08,839 --> 00:12:11,200
origins and it's not very

323
00:12:11,200 --> 00:12:13,040
it's not possible for them to actually

324
00:12:13,040 --> 00:12:14,639
know which origin

325
00:12:14,639 --> 00:12:17,279
loads them but still sending sensitive

326
00:12:17,279 --> 00:12:18,079
data to one

327
00:12:18,079 --> 00:12:20,160
origin is dangerous and this is one of

328
00:12:20,160 --> 00:12:21,519
the things that we need to

329
00:12:21,519 --> 00:12:24,720
track in our

330
00:12:24,959 --> 00:12:26,720
the third weakness is that in some cases

331
00:12:26,720 --> 00:12:28,560
developer will even skip

332
00:12:28,560 --> 00:12:32,000
the authorization check completely and

333
00:12:32,000 --> 00:12:34,959
or maybe implement some string matching

334
00:12:34,959 --> 00:12:35,600
that is

335
00:12:35,600 --> 00:12:38,560
inadequate to actually test if this if

336
00:12:38,560 --> 00:12:39,839
the remote origin

337
00:12:39,839 --> 00:12:42,079
is trusted or not and in addition to

338
00:12:42,079 --> 00:12:43,680
that we'll do something sensitive with

339
00:12:43,680 --> 00:12:46,800
the data that they receive

340
00:12:46,959 --> 00:12:48,320
these are the three weaknesses we are

341
00:12:48,320 --> 00:12:50,800
addressing in two different attack

342
00:12:50,800 --> 00:12:51,600
scenarios

343
00:12:51,600 --> 00:12:54,240
one is to spot chatty victims and listen

344
00:12:54,240 --> 00:12:55,360
to the traffic and

345
00:12:55,360 --> 00:12:58,560
report it back to our headquarters and

346
00:12:58,560 --> 00:13:01,920
the second is to

347
00:13:01,920 --> 00:13:04,639
try and send messages to victims that

348
00:13:04,639 --> 00:13:06,480
implement sensitive

349
00:13:06,480 --> 00:13:12,000
and sensitive message handlers

350
00:13:12,000 --> 00:13:15,440
in this imaginary example the victim on

351
00:13:15,440 --> 00:13:17,360
the other side will use this

352
00:13:17,360 --> 00:13:20,959
on click url parameter to

353
00:13:20,959 --> 00:13:24,079
update the uh the source of

354
00:13:24,079 --> 00:13:27,360
the href of an a tag and then instead of

355
00:13:27,360 --> 00:13:30,639
instead of updating the actual link it

356
00:13:30,639 --> 00:13:32,560
will load our javascript

357
00:13:32,560 --> 00:13:35,120
and when the user clicks on it it will

358
00:13:35,120 --> 00:13:37,519
actually

359
00:13:37,760 --> 00:13:40,639
load this javascript into the victim's

360
00:13:40,639 --> 00:13:42,320
puzzle

361
00:13:42,320 --> 00:13:44,560
and

362
00:13:46,880 --> 00:13:50,880
so let's get into uh working our tour

363
00:13:50,880 --> 00:13:52,720
on our tour so the first thing that we

364
00:13:52,720 --> 00:13:54,639
need to do is we need to be able to see

365
00:13:54,639 --> 00:13:56,639
senders and their messages and receiver

366
00:13:56,639 --> 00:13:58,560
and messages

367
00:13:58,560 --> 00:14:00,320
additionally it needs to be able to

368
00:14:00,320 --> 00:14:02,000
simulate malicious senders

369
00:14:02,000 --> 00:14:05,199
or receivers so we can actually check if

370
00:14:05,199 --> 00:14:07,360
the window setting allows us to

371
00:14:07,360 --> 00:14:09,839
actually actually implement a real

372
00:14:09,839 --> 00:14:11,680
exploit in real

373
00:14:11,680 --> 00:14:14,719
real life scenario

374
00:14:15,360 --> 00:14:16,959
so we split the walk on the tool to a

375
00:14:16,959 --> 00:14:18,399
few different milestones

376
00:14:18,399 --> 00:14:21,040
and in this talk we're talking about the

377
00:14:21,040 --> 00:14:21,839
few

378
00:14:21,839 --> 00:14:24,480
the two first steps which is being able

379
00:14:24,480 --> 00:14:25,279
to see

380
00:14:25,279 --> 00:14:27,839
the clear the three of all windows in

381
00:14:27,839 --> 00:14:28,959
the browser

382
00:14:28,959 --> 00:14:31,040
and the release enables the messages

383
00:14:31,040 --> 00:14:32,880
practically the traffic and be able to

384
00:14:32,880 --> 00:14:34,639
simulate different attack scenarios to

385
00:14:34,639 --> 00:14:36,240
see if we actually found a vulnerable

386
00:14:36,240 --> 00:14:36,800
listener

387
00:14:36,800 --> 00:14:40,399
center and

388
00:14:40,399 --> 00:14:45,199
now we get into the research part so

389
00:14:45,199 --> 00:14:47,839
this technology the course document

390
00:14:47,839 --> 00:14:49,040
messaging technology

391
00:14:49,040 --> 00:14:51,680
is really almost invisible inside the

392
00:14:51,680 --> 00:14:53,360
browser as it is

393
00:14:53,360 --> 00:14:56,720
the the

394
00:14:56,800 --> 00:14:58,800
straightforward way to see this

395
00:14:58,800 --> 00:15:00,320
communication is to

396
00:15:00,320 --> 00:15:03,440
open dev tools go and

397
00:15:03,440 --> 00:15:06,480
look into a window object and look it's

398
00:15:06,480 --> 00:15:07,519
into its

399
00:15:07,519 --> 00:15:10,560
event listeners and then follow to the

400
00:15:10,560 --> 00:15:13,279
message event listeners but this is in

401
00:15:13,279 --> 00:15:14,639
practical when we talk about

402
00:15:14,639 --> 00:15:17,120
a lot of different test cases with a lot

403
00:15:17,120 --> 00:15:18,639
of different windows it's uh

404
00:15:18,639 --> 00:15:20,959
it's almost impossible to uh to

405
00:15:20,959 --> 00:15:22,079
accomplish

406
00:15:22,079 --> 00:15:24,160
this in large scale you have to somehow

407
00:15:24,160 --> 00:15:25,440
automate this

408
00:15:25,440 --> 00:15:28,560
so first thing we tried is to

409
00:15:28,560 --> 00:15:32,639
inject a javascript inside every browser

410
00:15:32,639 --> 00:15:35,360
session every every every document to be

411
00:15:35,360 --> 00:15:36,399
precise

412
00:15:36,399 --> 00:15:39,440
and and have this javascript in a hooks

413
00:15:39,440 --> 00:15:40,320
some calls

414
00:15:40,320 --> 00:15:42,560
inside the browser to make sure that

415
00:15:42,560 --> 00:15:43,600
some of the traffic

416
00:15:43,600 --> 00:15:47,040
goes flow through it and

417
00:15:47,040 --> 00:15:50,320
and using this method and to be able to

418
00:15:50,320 --> 00:15:53,680
see all the traffic and the frames

419
00:15:53,680 --> 00:15:57,279
the problem running this user land mode

420
00:15:57,279 --> 00:15:58,480
is that we didn't

421
00:15:58,480 --> 00:16:00,880
get enough data to show everything that

422
00:16:00,880 --> 00:16:02,000
we needed

423
00:16:02,000 --> 00:16:05,040
and and the setup was also unstable and

424
00:16:05,040 --> 00:16:06,639
complicated with

425
00:16:06,639 --> 00:16:08,480
additional extra steps to configure your

426
00:16:08,480 --> 00:16:10,560
proxy and make sure that it also

427
00:16:10,560 --> 00:16:13,199
handles all the content security policy

428
00:16:13,199 --> 00:16:14,480
restrictions that

429
00:16:14,480 --> 00:16:17,120
won't come into effect in a in a real

430
00:16:17,120 --> 00:16:18,720
world scenario because of

431
00:16:18,720 --> 00:16:22,079
how cost document messaging works and

432
00:16:22,079 --> 00:16:25,199
so we we tried to an approach that gives

433
00:16:25,199 --> 00:16:25,440
us

434
00:16:25,440 --> 00:16:27,279
a little bit more insight into the

435
00:16:27,279 --> 00:16:29,199
internals of the browser

436
00:16:29,199 --> 00:16:32,800
first attempt was to use home debugger

437
00:16:32,800 --> 00:16:34,959
and with a home depth of protocol

438
00:16:34,959 --> 00:16:37,519
connect with home remotely

439
00:16:37,519 --> 00:16:40,560
and operate the debugger api

440
00:16:40,560 --> 00:16:43,279
different kind of apis to uh to collect

441
00:16:43,279 --> 00:16:45,680
and track the data that we need

442
00:16:45,680 --> 00:16:48,000
this i was very disappointed to find

443
00:16:48,000 --> 00:16:48,959
that this

444
00:16:48,959 --> 00:16:51,680
wasn't very accomplishable in this

445
00:16:51,680 --> 00:16:52,560
method the

446
00:16:52,560 --> 00:16:55,600
debugger api if you move into debugger

447
00:16:55,600 --> 00:16:56,320
mode

448
00:16:56,320 --> 00:16:58,880
and it affects the user experience it

449
00:16:58,880 --> 00:17:00,320
breaks many things on

450
00:17:00,320 --> 00:17:03,440
some website in some cases and it also

451
00:17:03,440 --> 00:17:04,160
doesn't give us

452
00:17:04,160 --> 00:17:05,679
that didn't give us the data that we

453
00:17:05,679 --> 00:17:07,439
needed and there is

454
00:17:07,439 --> 00:17:10,720
problems in in the way that that

455
00:17:10,720 --> 00:17:12,480
different frames are represented in

456
00:17:12,480 --> 00:17:14,160
different apis which makes it

457
00:17:14,160 --> 00:17:17,199
tremendously difficult to uh to analyze

458
00:17:17,199 --> 00:17:19,359
this graph of this three of the

459
00:17:19,359 --> 00:17:22,799
frames loading and and then in the third

460
00:17:22,799 --> 00:17:24,720
approach we benefit from

461
00:17:24,720 --> 00:17:27,039
extra additional options is by using an

462
00:17:27,039 --> 00:17:28,000
extension

463
00:17:28,000 --> 00:17:30,080
it also properly accommodate our need

464
00:17:30,080 --> 00:17:32,320
for some ui and

465
00:17:32,320 --> 00:17:34,000
the data and it was a bit more

466
00:17:34,000 --> 00:17:36,240
simplistic and the data that

467
00:17:36,240 --> 00:17:39,520
that is in it was better still not very

468
00:17:39,520 --> 00:17:40,799
not perfect

469
00:17:40,799 --> 00:17:44,240
but better for us to be able to

470
00:17:44,240 --> 00:17:46,880
to to construct all the data together

471
00:17:46,880 --> 00:17:48,080
and show it in

472
00:17:48,080 --> 00:17:50,400
the way that that you can actually see

473
00:17:50,400 --> 00:17:51,919
all the frames together

474
00:17:51,919 --> 00:17:55,039
the final approach was a combination of

475
00:17:55,039 --> 00:17:55,679
different

476
00:17:55,679 --> 00:17:59,760
uh of different

477
00:17:59,760 --> 00:18:03,280
methods together to actually

478
00:18:03,280 --> 00:18:07,200
um be able to do what we need to do

479
00:18:07,200 --> 00:18:09,919
um let me show the the overall

480
00:18:09,919 --> 00:18:11,840
conclusion from this research

481
00:18:11,840 --> 00:18:14,240
so the bottom line is that the browser

482
00:18:14,240 --> 00:18:15,600
does not provide anything there's an

483
00:18:15,600 --> 00:18:16,400
easy interface

484
00:18:16,400 --> 00:18:18,160
right you can see web traffic can have

485
00:18:18,160 --> 00:18:20,080
many tools to manipulate it and

486
00:18:20,080 --> 00:18:22,000
to inspect elements and to see all the

487
00:18:22,000 --> 00:18:23,280
data

488
00:18:23,280 --> 00:18:26,400
um there is no good interface

489
00:18:26,400 --> 00:18:28,880
not for people and not for code to look

490
00:18:28,880 --> 00:18:30,320
at this data

491
00:18:30,320 --> 00:18:33,679
and in different apis of the browser

492
00:18:33,679 --> 00:18:34,480
frames are

493
00:18:34,480 --> 00:18:36,320
represented differently with different

494
00:18:36,320 --> 00:18:38,400
ids and different meaning to the id

495
00:18:38,400 --> 00:18:40,080
there is no

496
00:18:40,080 --> 00:18:43,600
no clear way of you you sometimes have

497
00:18:43,600 --> 00:18:43,919
to

498
00:18:43,919 --> 00:18:47,039
uh to assume things

499
00:18:47,039 --> 00:18:50,160
and if you run in new zealand

500
00:18:50,160 --> 00:18:53,280
the origin level installation limits

501
00:18:53,280 --> 00:18:54,080
what you see

502
00:18:54,080 --> 00:18:56,480
and then you need to find a way to uh to

503
00:18:56,480 --> 00:18:58,000
walk with this

504
00:18:58,000 --> 00:19:01,120
and the same goes for for extension and

505
00:19:01,120 --> 00:19:03,039
context segregation

506
00:19:03,039 --> 00:19:05,039
is also one obstacle in some cases

507
00:19:05,039 --> 00:19:06,080
because uh

508
00:19:06,080 --> 00:19:09,600
because the kind of

509
00:19:09,600 --> 00:19:11,360
impact the kind of a feature that we are

510
00:19:11,360 --> 00:19:13,039
looking for in our tour is to be able to

511
00:19:13,039 --> 00:19:14,799
see things in all contexts

512
00:19:14,799 --> 00:19:16,880
because we want to be able to to see all

513
00:19:16,880 --> 00:19:19,600
this traffic and manipulate it

514
00:19:19,600 --> 00:19:22,960
so with these lessons from our research

515
00:19:22,960 --> 00:19:25,840
we are finally ready to think about our

516
00:19:25,840 --> 00:19:27,919
tools components

517
00:19:27,919 --> 00:19:30,320
the first component is the extension

518
00:19:30,320 --> 00:19:32,720
content page its job is to run first

519
00:19:32,720 --> 00:19:33,520
basically

520
00:19:33,520 --> 00:19:36,799
we wanted to use it in order to

521
00:19:36,799 --> 00:19:39,600
load the agent but we couldn't do it

522
00:19:39,600 --> 00:19:41,600
directly from the extension content page

523
00:19:41,600 --> 00:19:43,840
because it is isolated from the

524
00:19:43,840 --> 00:19:46,960
document context and we wanted the agent

525
00:19:46,960 --> 00:19:47,360
to

526
00:19:47,360 --> 00:19:49,600
run in the document context but the

527
00:19:49,600 --> 00:19:51,600
extension the way the way content page

528
00:19:51,600 --> 00:19:55,280
works isolates it from the document

529
00:19:55,280 --> 00:19:57,760
the agent itself implements a sort of a

530
00:19:57,760 --> 00:19:58,960
hub that

531
00:19:58,960 --> 00:20:02,000
hooks a ad event listener

532
00:20:02,000 --> 00:20:05,280
and basically you wrap

533
00:20:05,280 --> 00:20:07,280
every call to an event listener in a way

534
00:20:07,280 --> 00:20:08,559
that we will see

535
00:20:08,559 --> 00:20:11,120
the message first and only then dispatch

536
00:20:11,120 --> 00:20:14,159
it to the actual event listener

537
00:20:14,159 --> 00:20:16,000
and this is also why we couldn't run it

538
00:20:16,000 --> 00:20:17,360
in the content page because

539
00:20:17,360 --> 00:20:21,039
the content page does not see the uh

540
00:20:21,039 --> 00:20:23,039
the calls to add event listener from the

541
00:20:23,039 --> 00:20:24,960
document it is isolated it's constant

542
00:20:24,960 --> 00:20:25,440
its

543
00:20:25,440 --> 00:20:28,320
context is isolated and the agent script

544
00:20:28,320 --> 00:20:29,120
is basically

545
00:20:29,120 --> 00:20:32,480
injected as a script

546
00:20:32,480 --> 00:20:35,600
by the content page uh to

547
00:20:35,600 --> 00:20:38,799
every new document that loads inside the

548
00:20:38,799 --> 00:20:40,240
browser

549
00:20:40,240 --> 00:20:43,039
then the extension option page is our ui

550
00:20:43,039 --> 00:20:44,080
it's a react-based

551
00:20:44,080 --> 00:20:45,760
user interface for everything that we

552
00:20:45,760 --> 00:20:47,600
need in this tool

553
00:20:47,600 --> 00:20:50,799
the extension background page is

554
00:20:50,799 --> 00:20:53,520
the backend hub and everything that the

555
00:20:53,520 --> 00:20:54,960
agent sees is reported

556
00:20:54,960 --> 00:20:56,799
to the background page and the

557
00:20:56,799 --> 00:20:58,880
background page also exposes the data

558
00:20:58,880 --> 00:20:59,919
object that the

559
00:20:59,919 --> 00:21:02,720
option page needs and in addition to

560
00:21:02,720 --> 00:21:04,960
that we have the test site and a

561
00:21:04,960 --> 00:21:08,159
small app factory that hot build all

562
00:21:08,159 --> 00:21:10,080
these components so you could actually

563
00:21:10,080 --> 00:21:16,000
develop this without losing your sending

564
00:21:16,000 --> 00:21:18,480
so without further ado this is posta we

565
00:21:18,480 --> 00:21:19,039
have

566
00:21:19,039 --> 00:21:22,400
um a place here for to see all

567
00:21:22,400 --> 00:21:24,320
tabs and the windows place to see all

568
00:21:24,320 --> 00:21:26,240
the messages and listeners

569
00:21:26,240 --> 00:21:29,520
the control panel to use some actions

570
00:21:29,520 --> 00:21:31,600
and some text a little playground

571
00:21:31,600 --> 00:21:35,199
let's open our testing page

572
00:21:35,840 --> 00:21:38,000
so this is the test page it holds at the

573
00:21:38,000 --> 00:21:38,960
moment a

574
00:21:38,960 --> 00:21:42,559
vulnerable iframe and

575
00:21:42,559 --> 00:21:44,400
here we can see this is gita and this is

576
00:21:44,400 --> 00:21:45,760
not us and this

577
00:21:45,760 --> 00:21:49,120
is our test page and the hosted iframe

578
00:21:49,120 --> 00:21:51,760
now let's take a look let's send

579
00:21:51,760 --> 00:21:54,320
something

580
00:21:54,400 --> 00:21:58,159
test as we can see this what this iphone

581
00:21:58,159 --> 00:21:59,679
does is to add

582
00:21:59,679 --> 00:22:03,039
a text here to the iphone itself

583
00:22:03,039 --> 00:22:06,320
let's take a look in poster we can see

584
00:22:06,320 --> 00:22:07,440
this message

585
00:22:07,440 --> 00:22:12,240
let's resend it

586
00:22:12,240 --> 00:22:16,799
resend us string

587
00:22:16,799 --> 00:22:18,640
and go back to the testing pages we can

588
00:22:18,640 --> 00:22:20,640
see that the payload is actually being

589
00:22:20,640 --> 00:22:21,440
sent

590
00:22:21,440 --> 00:22:27,840
let's try something else now

591
00:22:50,080 --> 00:22:53,280
and let's send

592
00:22:53,280 --> 00:22:56,480
as string again send

593
00:22:56,480 --> 00:23:00,640
and we see another one and

594
00:23:00,640 --> 00:23:03,760
this is how it works um you can

595
00:23:03,760 --> 00:23:07,039
also use the exploit page so if should

596
00:23:07,039 --> 00:23:08,480
go back to posta

597
00:23:08,480 --> 00:23:10,240
and open it in an exploit page which

598
00:23:10,240 --> 00:23:12,640
actually simulates hosting this

599
00:23:12,640 --> 00:23:16,400
it's uh let's send this message again

600
00:23:16,400 --> 00:23:19,919
this is not complete somehow

601
00:23:20,559 --> 00:23:24,240
send us link but as we can see here

602
00:23:24,240 --> 00:23:25,600
nothing happens let's

603
00:23:25,600 --> 00:23:28,799
try to see what the problem is and the

604
00:23:28,799 --> 00:23:30,320
problem is that the different origin

605
00:23:30,320 --> 00:23:32,480
subframe try to create a javascript

606
00:23:32,480 --> 00:23:33,360
dialogue

607
00:23:33,360 --> 00:23:35,679
so it's basically browser blocking the

608
00:23:35,679 --> 00:23:36,880
alert box

609
00:23:36,880 --> 00:23:38,640
and this is exactly why for this kind of

610
00:23:38,640 --> 00:23:40,400
scenarios and also to test

611
00:23:40,400 --> 00:23:43,039
for window loading we have the option to

612
00:23:43,039 --> 00:23:45,440
open this tab

613
00:23:45,440 --> 00:23:49,120
got it and this is it

614
00:23:49,120 --> 00:23:53,760
let's try again to send a string

615
00:23:53,760 --> 00:23:57,200
and it's here and it works so this is

616
00:23:57,200 --> 00:23:57,760
posta

617
00:23:57,760 --> 00:24:01,520
you can go to benzoio or to our

618
00:24:01,520 --> 00:24:05,840
it will lead you to a

619
00:24:09,279 --> 00:24:12,159
please feel free to take a look download

620
00:24:12,159 --> 00:24:13,279
and use

621
00:24:13,279 --> 00:24:16,559
in your tests so of course one of the

622
00:24:16,559 --> 00:24:18,080
first thing we did is to

623
00:24:18,080 --> 00:24:20,400
put this tooling to use in finding real

624
00:24:20,400 --> 00:24:21,279
bugs

625
00:24:21,279 --> 00:24:24,720
like this one by enzo ctobacter really

626
00:24:24,720 --> 00:24:27,039
which shows that there is an iframe

627
00:24:27,039 --> 00:24:28,480
specific iframe at the

628
00:24:28,480 --> 00:24:33,039
the syrian valley express that um

629
00:24:33,039 --> 00:24:35,520
that's again that is used by aliexpress

630
00:24:35,520 --> 00:24:37,760
that uh when sent a specific

631
00:24:37,760 --> 00:24:41,520
payload would actually take this data

632
00:24:41,520 --> 00:24:44,640
and uh let it affect the contact the

633
00:24:44,640 --> 00:24:45,760
menu

634
00:24:45,760 --> 00:24:49,360
the main menu of the of the shop and

635
00:24:49,360 --> 00:24:52,159
by sending a specific payload we managed

636
00:24:52,159 --> 00:24:52,559
to

637
00:24:52,559 --> 00:24:56,000
override the content of this of the menu

638
00:24:56,000 --> 00:24:58,960
and inject our own script that they

639
00:24:58,960 --> 00:25:00,640
respond to interaction with the menu

640
00:25:00,640 --> 00:25:05,760
with executing this notorious payload

641
00:25:06,480 --> 00:25:08,640
let's say wrap this up so course

642
00:25:08,640 --> 00:25:10,400
document messages weaknesses

643
00:25:10,400 --> 00:25:12,240
are that by default windows can send

644
00:25:12,240 --> 00:25:14,720
data to it to each other and we

645
00:25:14,720 --> 00:25:16,960
need to add security headers to prevent

646
00:25:16,960 --> 00:25:18,799
this to prevent our windows to from

647
00:25:18,799 --> 00:25:19,520
loading in

648
00:25:19,520 --> 00:25:22,240
in dangerous scenarios and on the

649
00:25:22,240 --> 00:25:23,520
receiver script

650
00:25:23,520 --> 00:25:26,000
there is no default authorization checks

651
00:25:26,000 --> 00:25:27,039
developers must

652
00:25:27,039 --> 00:25:30,240
implement code to do this and the sender

653
00:25:30,240 --> 00:25:32,000
script can publish data without

654
00:25:32,000 --> 00:25:33,440
restrictively choosing

655
00:25:33,440 --> 00:25:36,480
who is going to get it and again we need

656
00:25:36,480 --> 00:25:37,760
to make sure that

657
00:25:37,760 --> 00:25:39,760
the developers won't send sensitive data

658
00:25:39,760 --> 00:25:41,760
to other

659
00:25:41,760 --> 00:25:44,480
origins and we need to of course to

660
00:25:44,480 --> 00:25:45,200
always like

661
00:25:45,200 --> 00:25:46,960
like in every technology in especially

662
00:25:46,960 --> 00:25:48,640
in technology that interacts with other

663
00:25:48,640 --> 00:25:49,760
parties we need

664
00:25:49,760 --> 00:25:52,799
to make sure that we we spot

665
00:25:52,799 --> 00:25:54,720
all implementations of this technology

666
00:25:54,720 --> 00:25:57,120
and test them

667
00:25:57,120 --> 00:25:59,200
and some conclusions for more for

668
00:25:59,200 --> 00:26:00,960
engineers so we implement

669
00:26:00,960 --> 00:26:03,440
security headers to protect your windows

670
00:26:03,440 --> 00:26:04,960
make sure that you invest in this this

671
00:26:04,960 --> 00:26:06,000
is a

672
00:26:06,000 --> 00:26:09,120
fast efficient and effective way um

673
00:26:09,120 --> 00:26:12,159
only send data to explicit targets if

674
00:26:12,159 --> 00:26:12,799
you can

675
00:26:12,799 --> 00:26:16,159
and also something very important and

676
00:26:16,159 --> 00:26:18,159
when handling messages you have to look

677
00:26:18,159 --> 00:26:20,240
into event origin and make sure that it

678
00:26:20,240 --> 00:26:24,240
is an origin that you trust couple of

679
00:26:24,240 --> 00:26:25,440
words about enzo

680
00:26:25,440 --> 00:26:27,120
enzo's an application security posture

681
00:26:27,120 --> 00:26:29,200
management platform it allows

682
00:26:29,200 --> 00:26:31,679
upset teams to scale their upset

683
00:26:31,679 --> 00:26:32,400
activity

684
00:26:32,400 --> 00:26:36,480
to actually eliminate the chaos and

685
00:26:36,480 --> 00:26:39,039
lead the organizations to maturity with

686
00:26:39,039 --> 00:26:40,880
an autonomous discovery engine

687
00:26:40,880 --> 00:26:42,559
that finds out what assets you have and

688
00:26:42,559 --> 00:26:45,120
onboard them to your security tools

689
00:26:45,120 --> 00:26:47,600
gives you measurable actionable

690
00:26:47,600 --> 00:26:49,279
information about the performance of

691
00:26:49,279 --> 00:26:50,960
your different activities

692
00:26:50,960 --> 00:26:53,520
and let you control all of it in a

693
00:26:53,520 --> 00:26:55,600
single pane of glass with a lot of tools

694
00:26:55,600 --> 00:26:56,159
to

695
00:26:56,159 --> 00:26:58,880
simplify in in your day-to-day work as

696
00:26:58,880 --> 00:27:01,200
upset

697
00:27:01,520 --> 00:27:05,200
also check out at the upsetmap.com our

698
00:27:05,200 --> 00:27:08,320
new open initiative to map

699
00:27:08,320 --> 00:27:11,440
vendors and solutions in appsec

700
00:27:11,440 --> 00:27:14,320
and so vendors and petitioners can

701
00:27:14,320 --> 00:27:15,840
easily find each other

702
00:27:15,840 --> 00:27:17,520
and understand what kind of solutions

703
00:27:17,520 --> 00:27:19,600
are available for them in their absence

704
00:27:19,600 --> 00:27:22,080
forums

705
00:27:22,640 --> 00:27:24,640
thank you very much for listening i hope

706
00:27:24,640 --> 00:27:26,159
you enjoy it enjoy the rest of the

707
00:27:26,159 --> 00:27:26,960
conference

708
00:27:26,960 --> 00:27:30,880
and see you next time

