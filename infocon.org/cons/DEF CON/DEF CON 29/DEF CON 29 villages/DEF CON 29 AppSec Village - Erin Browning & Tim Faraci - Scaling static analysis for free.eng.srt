1
00:00:00,399 --> 00:00:03,600
hello hello hello and welcome to free as

2
00:00:03,600 --> 00:00:04,720
in beer

3
00:00:04,720 --> 00:00:07,040
creating a low-cost static analysis

4
00:00:07,040 --> 00:00:09,440
program

5
00:00:10,800 --> 00:00:12,160
you can grab the slides for this

6
00:00:12,160 --> 00:00:15,360
presentation afterwards at this url

7
00:00:15,360 --> 00:00:18,880
so take a screenshot or a photo if you

8
00:00:18,880 --> 00:00:19,600
would like

9
00:00:19,600 --> 00:00:22,160
to do that

10
00:00:22,800 --> 00:00:26,080
so who am i i'm aaron browning

11
00:00:26,080 --> 00:00:28,880
i'm a senior security engineer at slack

12
00:00:28,880 --> 00:00:31,599
in security for

13
00:00:31,599 --> 00:00:36,160
over six years now you can contact me at

14
00:00:36,160 --> 00:00:39,600
erin at frowning.wtf or

15
00:00:39,600 --> 00:00:42,879
on twitter at e frowning yes that's upon

16
00:00:42,879 --> 00:00:44,320
my last name

17
00:00:44,320 --> 00:00:46,719
hi my name is tim ferracci i'm a staff

18
00:00:46,719 --> 00:00:48,960
security engineer at slack

19
00:00:48,960 --> 00:00:51,760
you can hit me up at faraji tim

20
00:00:51,760 --> 00:00:53,039
gmail.com

21
00:00:53,039 --> 00:00:56,960
or linkedin tim ferracci

22
00:00:57,120 --> 00:00:58,800
so i mentioned that tim and i both work

23
00:00:58,800 --> 00:01:00,239
at slack

24
00:01:00,239 --> 00:01:04,640
and we're hiring we hire remote

25
00:01:07,040 --> 00:01:09,280
tim and i both have a lot of experience

26
00:01:09,280 --> 00:01:12,560
implementing static analysis programs

27
00:01:12,560 --> 00:01:14,960
personally i've implemented a static

28
00:01:14,960 --> 00:01:16,320
analysis program for

29
00:01:16,320 --> 00:01:18,640
1200 developers across multiple

30
00:01:18,640 --> 00:01:19,840
languages

31
00:01:19,840 --> 00:01:21,759
for a bunch of different compliance

32
00:01:21,759 --> 00:01:23,040
standards

33
00:01:23,040 --> 00:01:25,840
a little bit about my background i've

34
00:01:25,840 --> 00:01:26,479
run

35
00:01:26,479 --> 00:01:28,479
a lot of static application security

36
00:01:28,479 --> 00:01:30,000
testing programs

37
00:01:30,000 --> 00:01:32,240
implementing them from the ground up or

38
00:01:32,240 --> 00:01:33,920
going into a company

39
00:01:33,920 --> 00:01:36,159
looking at it and then making

40
00:01:36,159 --> 00:01:37,840
modifications or replacing

41
00:01:37,840 --> 00:01:41,520
the current implementation i work in pci

42
00:01:41,520 --> 00:01:44,479
hipaa and federance ramp compliance

43
00:01:44,479 --> 00:01:46,560
space

44
00:01:46,560 --> 00:01:49,200
i have experience in commercial and open

45
00:01:49,200 --> 00:01:51,439
source solutions

46
00:01:51,439 --> 00:01:55,439
for static application security testing

47
00:01:55,439 --> 00:01:57,600
i've seen almost embedded out almost

48
00:01:57,600 --> 00:01:59,280
every static application security

49
00:01:59,280 --> 00:02:00,240
testing

50
00:02:00,240 --> 00:02:03,439
software for in-house

51
00:02:03,439 --> 00:02:07,200
cloud mobile and

52
00:02:07,200 --> 00:02:10,479
more i want to tell you about some of

53
00:02:10,479 --> 00:02:12,000
the problems with static application

54
00:02:12,000 --> 00:02:14,080
security testing with vendors

55
00:02:14,080 --> 00:02:16,800
one they're slow most of the vendors

56
00:02:16,800 --> 00:02:18,560
take 30 minutes an hour or more

57
00:02:18,560 --> 00:02:20,840
worst case scenario i've seen it's 48

58
00:02:20,840 --> 00:02:22,879
hours

59
00:02:22,879 --> 00:02:24,879
if you love comcast data caps you're

60
00:02:24,879 --> 00:02:26,800
going to love scanning per gigabyte with

61
00:02:26,800 --> 00:02:28,319
vendors in their cost model

62
00:02:28,319 --> 00:02:30,239
or their cost model per app or their

63
00:02:30,239 --> 00:02:32,400
cost model for defining what a developer

64
00:02:32,400 --> 00:02:32,800
is

65
00:02:32,800 --> 00:02:37,599
on average about 200 000 dollars

66
00:02:37,599 --> 00:02:41,518
yearly sales negotiations enough said

67
00:02:41,920 --> 00:02:44,720
mystery secret scanning sauce do you

68
00:02:44,720 --> 00:02:45,680
know exactly what

69
00:02:45,680 --> 00:02:47,680
complete transparency what is being

70
00:02:47,680 --> 00:02:49,200
scanned and how it's being scanned

71
00:02:49,200 --> 00:02:51,120
no i would love to see that and i think

72
00:02:51,120 --> 00:02:52,640
everyone should it's a tenant of

73
00:02:52,640 --> 00:02:53,200
security

74
00:02:53,200 --> 00:02:55,680
transparency let me tell you about a

75
00:02:55,680 --> 00:02:56,800
better way

76
00:02:56,800 --> 00:02:59,360
static analysis is a 15 year old solved

77
00:02:59,360 --> 00:03:02,800
problem that anyone can do

78
00:03:02,959 --> 00:03:04,879
and you know i want to show you some of

79
00:03:04,879 --> 00:03:06,480
the things that i'm looking for

80
00:03:06,480 --> 00:03:09,440
in a good solution one open source

81
00:03:09,440 --> 00:03:11,440
easier implementation

82
00:03:11,440 --> 00:03:14,480
now integration is hard if it's open

83
00:03:14,480 --> 00:03:15,040
source

84
00:03:15,040 --> 00:03:16,720
it's easy we control it we can do

85
00:03:16,720 --> 00:03:19,360
whatever we want with it

86
00:03:19,360 --> 00:03:22,400
dev wants scan results fast

87
00:03:22,400 --> 00:03:25,920
scan results should be 3 minutes or less

88
00:03:25,920 --> 00:03:29,120
if it is any slower it makes devs

89
00:03:29,120 --> 00:03:32,159
sad they want to push code

90
00:03:32,159 --> 00:03:35,440
fast lots of language support product

91
00:03:35,440 --> 00:03:36,000
that we use

92
00:03:36,000 --> 00:03:38,080
has tons of language support nine at the

93
00:03:38,080 --> 00:03:40,000
time it's writing and slack created

94
00:03:40,000 --> 00:03:41,840
additional language support that's

95
00:03:41,840 --> 00:03:43,680
coming out

96
00:03:43,680 --> 00:03:45,360
and we want to leverage power the open

97
00:03:45,360 --> 00:03:47,920
source community we are smarter

98
00:03:47,920 --> 00:03:51,280
as a community than any single vendor

99
00:03:51,280 --> 00:03:54,959
i want to find vulnerabilities now

100
00:03:54,959 --> 00:03:56,319
the vulnerabilities that i've seen from

101
00:03:56,319 --> 00:03:58,560
commercial and open source are very

102
00:03:58,560 --> 00:04:02,799
very similar in fact they're so similar

103
00:04:02,799 --> 00:04:04,000
it's really hard to tell the difference

104
00:04:04,000 --> 00:04:06,000
between the two if you did a scan result

105
00:04:06,000 --> 00:04:08,720
side by side

106
00:04:08,959 --> 00:04:12,400
that's my years of experience

107
00:04:12,480 --> 00:04:14,319
and then you want to get that compliance

108
00:04:14,319 --> 00:04:16,399
check box

109
00:04:16,399 --> 00:04:18,880
the dirty little secret is any security

110
00:04:18,880 --> 00:04:20,160
scanner will get you that compliance

111
00:04:20,160 --> 00:04:21,279
checkbox

112
00:04:21,279 --> 00:04:23,759
but i prefer a good security scanner

113
00:04:23,759 --> 00:04:24,639
which is why

114
00:04:24,639 --> 00:04:27,600
we think you should check out semgrep at

115
00:04:27,600 --> 00:04:29,199
the time of this presentation

116
00:04:29,199 --> 00:04:31,600
semgrip has taken no money from us nor

117
00:04:31,600 --> 00:04:33,680
have we given them any money

118
00:04:33,680 --> 00:04:36,400
or editorial rights to this presentation

119
00:04:36,400 --> 00:04:38,320
we just think it's a cool program

120
00:04:38,320 --> 00:04:41,280
that you should check out this is why we

121
00:04:41,280 --> 00:04:43,520
chose to create our own static analysis

122
00:04:43,520 --> 00:04:44,080
program

123
00:04:44,080 --> 00:04:46,960
around this tool

124
00:04:49,919 --> 00:04:53,360
let's get right into it in order to

125
00:04:53,360 --> 00:04:54,000
create

126
00:04:54,000 --> 00:04:58,080
an easy to scale static analysis program

127
00:04:58,080 --> 00:05:01,199
we need the following things first of

128
00:05:01,199 --> 00:05:01,840
all

129
00:05:01,840 --> 00:05:05,199
we need a static analysis engine

130
00:05:05,199 --> 00:05:08,400
that can support multiple languages

131
00:05:08,400 --> 00:05:12,400
second of all we need the ability to

132
00:05:12,400 --> 00:05:15,840
not only define our own rules but

133
00:05:15,840 --> 00:05:19,120
to finely tune them

134
00:05:19,120 --> 00:05:21,680
and third we need to be able to build up

135
00:05:21,680 --> 00:05:22,639
our own

136
00:05:22,639 --> 00:05:24,720
infrastructure around these scanning

137
00:05:24,720 --> 00:05:25,840
tools

138
00:05:25,840 --> 00:05:29,199
after analyzing a variety of closed

139
00:05:29,199 --> 00:05:32,240
and open source tools we decided to

140
00:05:32,240 --> 00:05:34,479
implement our program around an open

141
00:05:34,479 --> 00:05:35,600
source tool called

142
00:05:35,600 --> 00:05:39,919
semgrep it is a generic engine

143
00:05:39,919 --> 00:05:41,600
which supports multiple languages

144
00:05:41,600 --> 00:05:44,800
exactly like we wanted

145
00:05:45,120 --> 00:05:47,280
the other cool thing about semgrep

146
00:05:47,280 --> 00:05:48,320
besides

147
00:05:48,320 --> 00:05:52,160
it being language agnostic is that

148
00:05:52,160 --> 00:05:54,160
you can write your own rules for it

149
00:05:54,160 --> 00:05:56,960
fairly trivially

150
00:05:56,960 --> 00:05:59,919
the rules are yaml files they're easy to

151
00:05:59,919 --> 00:06:00,560
write

152
00:06:00,560 --> 00:06:02,800
and also easy to modify there's a whole

153
00:06:02,800 --> 00:06:04,560
bunch of open source ones you can

154
00:06:04,560 --> 00:06:06,400
download that are based on

155
00:06:06,400 --> 00:06:10,240
common vulnerabilities

156
00:06:10,240 --> 00:06:13,919
i've written several now and

157
00:06:13,919 --> 00:06:15,840
it takes me longer to write the

158
00:06:15,840 --> 00:06:18,319
developer guidance than the actual rule

159
00:06:18,319 --> 00:06:20,880
which is incredible you can also get

160
00:06:20,880 --> 00:06:21,600
really down

161
00:06:21,600 --> 00:06:25,120
into the nitty-gritty of

162
00:06:25,120 --> 00:06:27,280
pattern matching so you can exclude

163
00:06:27,280 --> 00:06:29,520
things for example that

164
00:06:29,520 --> 00:06:32,720
let's say it's a command execution for

165
00:06:32,720 --> 00:06:34,400
command execution

166
00:06:34,400 --> 00:06:36,400
you can say okay if it's taking a static

167
00:06:36,400 --> 00:06:38,639
string we're going to say that's fine

168
00:06:38,639 --> 00:06:40,479
if it's taking a variable let's worry

169
00:06:40,479 --> 00:06:42,960
about that

170
00:06:44,000 --> 00:06:46,400
and you can actually express that in the

171
00:06:46,400 --> 00:06:49,360
semgrep rule sets which

172
00:06:49,360 --> 00:06:51,840
so many fewer false positives so many

173
00:06:51,840 --> 00:06:55,039
fewer false positives

174
00:06:56,240 --> 00:06:58,080
so here's a quick example of how the

175
00:06:58,080 --> 00:06:59,680
rules look

176
00:06:59,680 --> 00:07:02,000
you can see there's a pattern area

177
00:07:02,000 --> 00:07:04,880
developer guidance

178
00:07:04,880 --> 00:07:08,560
and you can include

179
00:07:08,560 --> 00:07:10,240
a whole bunch of other information if

180
00:07:10,240 --> 00:07:11,759
you need it for your

181
00:07:11,759 --> 00:07:15,360
statistics or reporting

182
00:07:15,599 --> 00:07:19,440
the company that makes semgrep is r2c

183
00:07:19,440 --> 00:07:22,240
and they have been so helpful as we've

184
00:07:22,240 --> 00:07:24,080
been implementing this program

185
00:07:24,080 --> 00:07:26,960
their tool has really met the

186
00:07:26,960 --> 00:07:29,039
flexibility requirements we wanted out

187
00:07:29,039 --> 00:07:31,599
of this program

188
00:07:31,599 --> 00:07:33,599
so we have some grip we have this

189
00:07:33,599 --> 00:07:35,280
generic engine

190
00:07:35,280 --> 00:07:37,039
how can we use that to scale up our

191
00:07:37,039 --> 00:07:40,240
static analysis program

192
00:07:40,240 --> 00:07:43,520
well i think everybody has seen this

193
00:07:43,520 --> 00:07:44,080
diagram

194
00:07:44,080 --> 00:07:48,240
right when you find a bug in code

195
00:07:48,240 --> 00:07:50,800
the later in the development process you

196
00:07:50,800 --> 00:07:51,440
find it

197
00:07:51,440 --> 00:07:54,639
the more expensive it is to fix we

198
00:07:54,639 --> 00:07:56,319
applied this thinking to the

199
00:07:56,319 --> 00:07:58,240
implementation of our static analysis

200
00:07:58,240 --> 00:07:59,840
program

201
00:07:59,840 --> 00:08:03,199
we want to push a lot of the

202
00:08:03,199 --> 00:08:06,319
heavy decisions around

203
00:08:06,319 --> 00:08:10,160
the design and implementation

204
00:08:10,160 --> 00:08:12,879
and rule set as early into the process

205
00:08:12,879 --> 00:08:14,319
as we could

206
00:08:14,319 --> 00:08:15,840
so that we wouldn't have to make

207
00:08:15,840 --> 00:08:18,240
expensive changes

208
00:08:18,240 --> 00:08:21,039
further down the line we also wanted to

209
00:08:21,039 --> 00:08:22,720
prevent

210
00:08:22,720 --> 00:08:27,919
having to deal with false positives

211
00:08:27,919 --> 00:08:31,199
and other similar issues again and again

212
00:08:31,199 --> 00:08:33,440
and again

213
00:08:33,440 --> 00:08:36,719
here is the nitty-gritty of our design

214
00:08:36,719 --> 00:08:39,200
first of all we need easy to maintain

215
00:08:39,200 --> 00:08:41,279
architecture

216
00:08:41,279 --> 00:08:44,240
for the infrastructure surrounding

217
00:08:44,240 --> 00:08:45,440
semgrep

218
00:08:45,440 --> 00:08:48,240
we decided to write python we have

219
00:08:48,240 --> 00:08:49,839
python code that runs

220
00:08:49,839 --> 00:08:52,240
the docker container we have python code

221
00:08:52,240 --> 00:08:55,200
for the configuration for each language

222
00:08:55,200 --> 00:08:58,560
we have python code for

223
00:08:58,560 --> 00:09:02,160
generating hash ids for performing

224
00:09:02,160 --> 00:09:06,160
comparisons everything's in python

225
00:09:06,160 --> 00:09:09,839
and here is how we add new code bases

226
00:09:09,839 --> 00:09:13,680
with one line of code we have an enabled

227
00:09:13,680 --> 00:09:14,320
file

228
00:09:14,320 --> 00:09:18,080
for each language we currently support

229
00:09:18,080 --> 00:09:22,080
this enabled file is newline separated

230
00:09:22,080 --> 00:09:23,680
repo names

231
00:09:23,680 --> 00:09:26,800
so if i wanted to add a new repo for

232
00:09:26,800 --> 00:09:28,399
going

233
00:09:28,399 --> 00:09:30,240
i would go to the enabled file for

234
00:09:30,240 --> 00:09:31,920
goatling

235
00:09:31,920 --> 00:09:34,720
type in the repo name save it commit it

236
00:09:34,720 --> 00:09:38,080
we're now scanning that repo

237
00:09:39,040 --> 00:09:40,720
we also wanted a graceful way of

238
00:09:40,720 --> 00:09:42,480
handling false positives

239
00:09:42,480 --> 00:09:45,360
that is low maintenance and allows

240
00:09:45,360 --> 00:09:47,600
developers to report false positives to

241
00:09:47,600 --> 00:09:48,560
us

242
00:09:48,560 --> 00:09:51,360
instead of a database we chose to use a

243
00:09:51,360 --> 00:09:52,560
json file

244
00:09:52,560 --> 00:09:55,360
for super easy maintenance we don't have

245
00:09:55,360 --> 00:09:57,519
to deal with database backups

246
00:09:57,519 --> 00:10:00,000
we just commit the json file straight to

247
00:10:00,000 --> 00:10:01,839
our project repo

248
00:10:01,839 --> 00:10:05,360
and if a developer finds a false

249
00:10:05,360 --> 00:10:06,800
positive or something they think is a

250
00:10:06,800 --> 00:10:08,320
false positive

251
00:10:08,320 --> 00:10:10,720
they can make a pull request adding it

252
00:10:10,720 --> 00:10:11,760
to this file

253
00:10:11,760 --> 00:10:14,880
when we onboard a new code base we also

254
00:10:14,880 --> 00:10:18,160
add an empty false positive file we do

255
00:10:18,160 --> 00:10:18,720
this

256
00:10:18,720 --> 00:10:22,240
to increase the anti-fragility of

257
00:10:22,240 --> 00:10:24,800
our infrastructure around semgrep

258
00:10:24,800 --> 00:10:25,839
otherwise

259
00:10:25,839 --> 00:10:28,959
our code may still try to run even if

260
00:10:28,959 --> 00:10:30,720
it's not removing false positives

261
00:10:30,720 --> 00:10:33,279
which we don't want so that file must

262
00:10:33,279 --> 00:10:34,959
exist

263
00:10:34,959 --> 00:10:37,760
we label each finding with a unique

264
00:10:37,760 --> 00:10:39,600
identifier

265
00:10:39,600 --> 00:10:42,480
we create those identifiers they are sha

266
00:10:42,480 --> 00:10:45,360
256 hashes

267
00:10:45,360 --> 00:10:47,680
which contain the following information

268
00:10:47,680 --> 00:10:49,440
the file path where the vulnerability

269
00:10:49,440 --> 00:10:51,040
was found

270
00:10:51,040 --> 00:10:53,360
three lines of code before and one line

271
00:10:53,360 --> 00:10:54,399
after

272
00:10:54,399 --> 00:10:58,720
of the line the finding is on

273
00:10:58,720 --> 00:11:02,720
the rule name that was triggered

274
00:11:03,200 --> 00:11:05,279
and then we we hash all that and that

275
00:11:05,279 --> 00:11:07,279
makes our identifiers

276
00:11:07,279 --> 00:11:10,079
we don't use the line number it's too

277
00:11:10,079 --> 00:11:11,040
fragile

278
00:11:11,040 --> 00:11:13,760
if somebody adds new code to a file the

279
00:11:13,760 --> 00:11:15,440
line number will change

280
00:11:15,440 --> 00:11:16,720
and then they have to go through the

281
00:11:16,720 --> 00:11:18,959
false positive process all over again

282
00:11:18,959 --> 00:11:21,200
we don't add that into our hash instead

283
00:11:21,200 --> 00:11:22,959
we put that in the message associated

284
00:11:22,959 --> 00:11:26,800
with the hash in the false positive file

285
00:11:27,440 --> 00:11:29,519
file path can also be a little fragile

286
00:11:29,519 --> 00:11:31,519
if somebody's going to re-architecture

287
00:11:31,519 --> 00:11:33,920
their application or their code base

288
00:11:33,920 --> 00:11:36,320
files will move around

289
00:11:36,320 --> 00:11:40,800
however we needed a way to differentiate

290
00:11:40,800 --> 00:11:42,560
findings where the code may be really

291
00:11:42,560 --> 00:11:44,399
similar

292
00:11:44,399 --> 00:11:46,480
so we included the file path what we're

293
00:11:46,480 --> 00:11:47,760
planning to do

294
00:11:47,760 --> 00:11:50,639
for pull requests in the future is

295
00:11:50,639 --> 00:11:52,000
analyze them for

296
00:11:52,000 --> 00:11:55,040
files that have been moved for files

297
00:11:55,040 --> 00:11:56,880
that have been moved

298
00:11:56,880 --> 00:11:59,120
we can then regenerate the false

299
00:11:59,120 --> 00:12:01,279
positive id

300
00:12:01,279 --> 00:12:03,839
and add it automatically to the false

301
00:12:03,839 --> 00:12:06,079
positive list

302
00:12:06,079 --> 00:12:08,000
this doesn't happen very often but it is

303
00:12:08,000 --> 00:12:11,040
an edge case we plan to support

304
00:12:11,040 --> 00:12:13,519
one of the benefits of using identifiers

305
00:12:13,519 --> 00:12:14,079
like this

306
00:12:14,079 --> 00:12:17,040
is we can do comparisons we can compare

307
00:12:17,040 --> 00:12:18,639
any two result files

308
00:12:18,639 --> 00:12:21,519
in any way imaginable this is our actual

309
00:12:21,519 --> 00:12:22,959
comparison code it's super

310
00:12:22,959 --> 00:12:25,519
straightforward

311
00:12:25,519 --> 00:12:28,000
so currently we perform a daily

312
00:12:28,000 --> 00:12:29,519
comparison

313
00:12:29,519 --> 00:12:31,839
we take yesterday's scan result compare

314
00:12:31,839 --> 00:12:33,519
it to today's scan result

315
00:12:33,519 --> 00:12:37,600
and alert if there is a new finding

316
00:12:37,600 --> 00:12:40,160
then we also do branch comparisons which

317
00:12:40,160 --> 00:12:41,040
run on our pr

318
00:12:41,040 --> 00:12:45,040
system we run different rule sets

319
00:12:45,040 --> 00:12:45,839
between

320
00:12:45,839 --> 00:12:48,880
the daily scan and the pr branch based

321
00:12:48,880 --> 00:12:50,160
scan

322
00:12:50,160 --> 00:12:52,639
in the daily scan we run more intensive

323
00:12:52,639 --> 00:12:54,330
rules rules we're testing

324
00:12:54,330 --> 00:12:55,839
[Music]

325
00:12:55,839 --> 00:12:58,480
rules that still need to be tuned

326
00:12:58,480 --> 00:12:58,959
because

327
00:12:58,959 --> 00:13:00,959
we don't want the scans to take too long

328
00:13:00,959 --> 00:13:03,360
for the developers

329
00:13:03,360 --> 00:13:06,000
the pr scans are intended for direct

330
00:13:06,000 --> 00:13:07,760
feedback to the developers on really

331
00:13:07,760 --> 00:13:09,440
dangerous functions

332
00:13:09,440 --> 00:13:12,160
tim will now run you through the pr scan

333
00:13:12,160 --> 00:13:14,160
and the processes we've developed around

334
00:13:14,160 --> 00:13:15,680
them

335
00:13:15,680 --> 00:13:17,680
the pull request scan is a bit different

336
00:13:17,680 --> 00:13:19,440
than the daily scan

337
00:13:19,440 --> 00:13:21,920
the pr scan hooks directly into our ci

338
00:13:21,920 --> 00:13:23,440
cd infrastructure

339
00:13:23,440 --> 00:13:26,959
in github what happens is when

340
00:13:26,959 --> 00:13:28,079
development triggers

341
00:13:28,079 --> 00:13:32,320
a pull request a jenkins job

342
00:13:32,320 --> 00:13:35,440
is triggered which downloads semgrip

343
00:13:35,440 --> 00:13:37,839
downloads slide specific semirep rules

344
00:13:37,839 --> 00:13:40,639
and downloads the repo

345
00:13:40,639 --> 00:13:42,160
the repo is then scanned with these

346
00:13:42,160 --> 00:13:44,560
rules and a result

347
00:13:44,560 --> 00:13:47,760
is re return back to github in form of a

348
00:13:47,760 --> 00:13:48,480
test

349
00:13:48,480 --> 00:13:52,480
pass or failure these tests

350
00:13:52,480 --> 00:13:54,399
are fast and they're meant to be fast

351
00:13:54,399 --> 00:13:55,600
they're meant to run

352
00:13:55,600 --> 00:13:58,639
the most important security rules

353
00:13:58,639 --> 00:14:01,680
we have we are targeting three minutes

354
00:14:01,680 --> 00:14:03,360
for our results

355
00:14:03,360 --> 00:14:05,120
if they take longer than that then we

356
00:14:05,120 --> 00:14:06,880
try to either adjust the rules or make

357
00:14:06,880 --> 00:14:08,639
our infrastructure faster

358
00:14:08,639 --> 00:14:11,839
it depends now

359
00:14:11,839 --> 00:14:14,079
how these rules work in the pull request

360
00:14:14,079 --> 00:14:14,880
scan is

361
00:14:14,880 --> 00:14:17,199
a diff is done between the scan results

362
00:14:17,199 --> 00:14:18,560
of the last master scan

363
00:14:18,560 --> 00:14:20,639
and the pull request if new

364
00:14:20,639 --> 00:14:22,240
vulnerabilities are found

365
00:14:22,240 --> 00:14:26,959
the test is failed if not it passes

366
00:14:27,600 --> 00:14:30,720
so these results end up in two different

367
00:14:30,720 --> 00:14:33,360
locations in our cicd infrastructure

368
00:14:33,360 --> 00:14:35,440
one is in directly in the jenkins

369
00:14:35,440 --> 00:14:36,480
console

370
00:14:36,480 --> 00:14:39,440
it's json it's not very fun to read not

371
00:14:39,440 --> 00:14:41,600
very fun formatted you gotta copy paste

372
00:14:41,600 --> 00:14:43,600
it in order to format it correctly

373
00:14:43,600 --> 00:14:45,760
but it's there and it's fast to click on

374
00:14:45,760 --> 00:14:46,720
and view

375
00:14:46,720 --> 00:14:49,920
however just as fast and easy to view

376
00:14:49,920 --> 00:14:53,680
is the html view it's the exact same

377
00:14:53,680 --> 00:14:54,639
results

378
00:14:54,639 --> 00:14:57,360
but in a nice digestible human readable

379
00:14:57,360 --> 00:14:59,040
format

380
00:14:59,040 --> 00:15:01,519
what's in this vulnerability output well

381
00:15:01,519 --> 00:15:03,040
the vulnerability

382
00:15:03,040 --> 00:15:06,000
the hash the time of the scan run you

383
00:15:06,000 --> 00:15:06,480
know

384
00:15:06,480 --> 00:15:10,639
the rule that triggered some education

385
00:15:10,639 --> 00:15:12,560
lots of education slack specific

386
00:15:12,560 --> 00:15:14,480
education general best practices

387
00:15:14,480 --> 00:15:16,560
education

388
00:15:16,560 --> 00:15:19,680
suggestions and how to remediate

389
00:15:19,680 --> 00:15:23,120
and the goal of this all of these

390
00:15:23,120 --> 00:15:24,560
vulnerability outputs if there are

391
00:15:24,560 --> 00:15:26,480
vulnerabilities is to give

392
00:15:26,480 --> 00:15:29,279
steps something to do that is actionable

393
00:15:29,279 --> 00:15:30,160
that you

394
00:15:30,160 --> 00:15:33,519
can work with either it is

395
00:15:33,519 --> 00:15:35,680
hey this is how i fix this or this is

396
00:15:35,680 --> 00:15:36,639
who i reach out to

397
00:15:36,639 --> 00:15:38,160
in order to ask questions to get help

398
00:15:38,160 --> 00:15:41,120
with this

399
00:15:41,120 --> 00:15:43,279
also on this vulnerability output we

400
00:15:43,279 --> 00:15:44,320
have a

401
00:15:44,320 --> 00:15:46,639
very simple command line interface that

402
00:15:46,639 --> 00:15:47,600
is on every

403
00:15:47,600 --> 00:15:51,279
developer's laptop so if there is a

404
00:15:51,279 --> 00:15:52,399
vulnerability

405
00:15:52,399 --> 00:15:55,839
and development says oh this isn't

406
00:15:55,839 --> 00:15:57,440
actually vulnerable or

407
00:15:57,440 --> 00:16:00,639
this is a legitimate use then

408
00:16:00,639 --> 00:16:03,759
they can go ahead and trigger a

409
00:16:03,759 --> 00:16:08,320
pull request for security to review

410
00:16:08,320 --> 00:16:11,920
security will review that pull request

411
00:16:11,920 --> 00:16:15,600
and go hmm is this a legitimate

412
00:16:15,600 --> 00:16:18,639
use case of the exact function

413
00:16:18,639 --> 00:16:22,480
perhaps well it's an internal script

414
00:16:22,480 --> 00:16:25,040
and it's only running on the box and

415
00:16:25,040 --> 00:16:26,560
user controlled

416
00:16:26,560 --> 00:16:28,959
yeah they should probably be able to run

417
00:16:28,959 --> 00:16:30,959
exact because

418
00:16:30,959 --> 00:16:34,880
their use case is fine what's nice about

419
00:16:34,880 --> 00:16:35,279
this

420
00:16:35,279 --> 00:16:37,759
when the scan results occur is they

421
00:16:37,759 --> 00:16:38,639
produce

422
00:16:38,639 --> 00:16:42,079
alerts these alerts can integrate

423
00:16:42,079 --> 00:16:43,600
directly into slack

424
00:16:43,600 --> 00:16:46,959
so if you have a development feature

425
00:16:46,959 --> 00:16:49,839
and some alerts come out you can throw

426
00:16:49,839 --> 00:16:51,199
those alerts directly

427
00:16:51,199 --> 00:16:53,600
into the channel so people can take a

428
00:16:53,600 --> 00:16:56,560
look at it immediately

429
00:16:56,560 --> 00:16:59,279
security can also hook into specific

430
00:16:59,279 --> 00:17:00,959
alerts we want to see

431
00:17:00,959 --> 00:17:03,519
with specific channels that are perhaps

432
00:17:03,519 --> 00:17:05,439
very sensitive infrastructure we want to

433
00:17:05,439 --> 00:17:06,880
know what's going on

434
00:17:06,880 --> 00:17:08,640
all of the alerting all the

435
00:17:08,640 --> 00:17:10,000
vulnerability output

436
00:17:10,000 --> 00:17:12,559
all of this is captured to bring us to

437
00:17:12,559 --> 00:17:14,160
metrics

438
00:17:14,160 --> 00:17:18,160
now we have initially 55

439
00:17:18,160 --> 00:17:20,959
repos that we have scanned at slack of

440
00:17:20,959 --> 00:17:24,000
those 55 repos we've had 648

441
00:17:24,000 --> 00:17:25,599
vulnerabilities

442
00:17:25,599 --> 00:17:28,880
now depending on who you are you may go

443
00:17:28,880 --> 00:17:31,280
that's a ton of vulnerabilities wow i

444
00:17:31,280 --> 00:17:32,320
can't believe you had so many

445
00:17:32,320 --> 00:17:33,520
vulnerabilities

446
00:17:33,520 --> 00:17:36,080
or oh man that static analysis really

447
00:17:36,080 --> 00:17:37,120
didn't find very much

448
00:17:37,120 --> 00:17:40,640
you know ain't doing a very good job

449
00:17:40,640 --> 00:17:43,679
now in my experience

450
00:17:43,679 --> 00:17:46,080
running through this it's doing a really

451
00:17:46,080 --> 00:17:46,720
good job

452
00:17:46,720 --> 00:17:49,760
we're finding similar true positive

453
00:17:49,760 --> 00:17:50,559
numbers

454
00:17:50,559 --> 00:17:54,480
running our open source sub grip

455
00:17:54,480 --> 00:17:57,679
uh rules as i am

456
00:17:57,679 --> 00:18:02,160
comparing it to commercial offerings

457
00:18:02,160 --> 00:18:05,679
of those 648 vulnerabilities 12 of them

458
00:18:05,679 --> 00:18:08,080
are actually true positives

459
00:18:08,080 --> 00:18:11,120
of low to high that's not very many

460
00:18:11,120 --> 00:18:12,799
vulnerabilities per repo

461
00:18:12,799 --> 00:18:16,320
it is really really low

462
00:18:16,320 --> 00:18:18,880
uh let's see here it's about one

463
00:18:18,880 --> 00:18:22,000
vulnerability per every four repos

464
00:18:22,000 --> 00:18:25,280
so one of the repos which

465
00:18:25,280 --> 00:18:27,039
was in development for a very long time

466
00:18:27,039 --> 00:18:28,720
it's a much older repo

467
00:18:28,720 --> 00:18:32,400
at the company and we've been a company

468
00:18:32,400 --> 00:18:33,360
for about what

469
00:18:33,360 --> 00:18:36,480
seven eight years this repo has it had

470
00:18:36,480 --> 00:18:39,919
eight vulnerabilities eight

471
00:18:39,919 --> 00:18:42,320
out of the eight plus eight years it's

472
00:18:42,320 --> 00:18:43,440
been in development or

473
00:18:43,440 --> 00:18:45,760
or whatever well working with

474
00:18:45,760 --> 00:18:46,559
development

475
00:18:46,559 --> 00:18:47,760
you know trying to vet these they're

476
00:18:47,760 --> 00:18:49,679
going oh man that's a lot of

477
00:18:49,679 --> 00:18:50,559
vulnerabilities

478
00:18:50,559 --> 00:18:54,000
or like no not really i mean given what

479
00:18:54,000 --> 00:18:54,840
we see here

480
00:18:54,840 --> 00:19:00,320
is for your cicd

481
00:19:00,320 --> 00:19:03,600
development process you would only be

482
00:19:03,600 --> 00:19:06,640
impacted potentially once a year in

483
00:19:06,640 --> 00:19:09,360
order to review a vulnerability

484
00:19:09,360 --> 00:19:11,919
i take this as part because slack has

485
00:19:11,919 --> 00:19:13,600
good developers we have very good

486
00:19:13,600 --> 00:19:14,559
developers here

487
00:19:14,559 --> 00:19:16,400
the other metric that we have here is

488
00:19:16,400 --> 00:19:17,840
the average scan time

489
00:19:17,840 --> 00:19:20,480
we've had of all of our repos has been

490
00:19:20,480 --> 00:19:21,840
3.2 minutes

491
00:19:21,840 --> 00:19:24,240
now some of them are slower we have some

492
00:19:24,240 --> 00:19:25,600
that are particularly big and they're

493
00:19:25,600 --> 00:19:26,720
skewing it up

494
00:19:26,720 --> 00:19:28,960
but that's a very good scan time very

495
00:19:28,960 --> 00:19:30,640
very very good

496
00:19:30,640 --> 00:19:33,760
again we do want to get this slower

497
00:19:33,760 --> 00:19:36,480
sub three minutes we might even have

498
00:19:36,480 --> 00:19:37,440
some stuff in place

499
00:19:37,440 --> 00:19:39,120
that we can even half this time

500
00:19:39,120 --> 00:19:41,039
depending on how we architect our

501
00:19:41,039 --> 00:19:42,000
scanning

502
00:19:42,000 --> 00:19:44,480
but we're not there yet and hopefully

503
00:19:44,480 --> 00:19:47,280
one day we will be

504
00:19:48,160 --> 00:19:50,400
a little bit about the soundgrap rules

505
00:19:50,400 --> 00:19:53,440
the same grip rules

506
00:19:53,440 --> 00:19:56,880
this is an example of a go laying

507
00:19:56,880 --> 00:19:59,440
some grip rule in particular looking for

508
00:19:59,440 --> 00:20:02,880
the exact command pattern

509
00:20:03,440 --> 00:20:05,440
the semcrep rules are actually really

510
00:20:05,440 --> 00:20:07,919
really easy to implement and create

511
00:20:07,919 --> 00:20:10,240
it's a very symbolistic pattern it's a

512
00:20:10,240 --> 00:20:11,440
better version

513
00:20:11,440 --> 00:20:15,440
of regex it's just a very simple pattern

514
00:20:15,440 --> 00:20:18,640
it's called pattern syntax

515
00:20:18,640 --> 00:20:22,400
alright so in these particular examples

516
00:20:22,400 --> 00:20:24,240
there is an ellipsis operator which is

517
00:20:24,240 --> 00:20:25,840
the dot dot dot

518
00:20:25,840 --> 00:20:29,120
and that's looking for any uh

519
00:20:29,120 --> 00:20:32,000
anything that is thrown into that

520
00:20:32,000 --> 00:20:32,960
function

521
00:20:32,960 --> 00:20:36,000
so we're looking for exact demand

522
00:20:36,000 --> 00:20:39,600
and we're looking for it doesn't matter

523
00:20:39,600 --> 00:20:40,320
what

524
00:20:40,320 --> 00:20:42,640
anytime anyone tries to throw anything

525
00:20:42,640 --> 00:20:44,240
into exact command

526
00:20:44,240 --> 00:20:46,480
we want to be alerted on it we talked

527
00:20:46,480 --> 00:20:48,720
about this before we have

528
00:20:48,720 --> 00:20:52,480
developer education this is important

529
00:20:52,480 --> 00:20:55,840
um i know at companies we do this

530
00:20:55,840 --> 00:20:58,320
uh stereotypical hey you're onboarded

531
00:20:58,320 --> 00:20:59,520
we're gonna teach you developer

532
00:20:59,520 --> 00:21:01,440
education we're gonna have a yearly

533
00:21:01,440 --> 00:21:04,640
interaction what the loss top ten is

534
00:21:04,640 --> 00:21:09,200
uh i mean it's useful right but

535
00:21:09,200 --> 00:21:12,000
i learned the most when it's in the

536
00:21:12,000 --> 00:21:13,120
moment

537
00:21:13,120 --> 00:21:15,600
we really try to make sure that all of

538
00:21:15,600 --> 00:21:16,960
the documentation

539
00:21:16,960 --> 00:21:21,039
at slack is actionable has education

540
00:21:21,039 --> 00:21:24,880
explains to development what this is and

541
00:21:24,880 --> 00:21:27,679
honestly we don't know which type of

542
00:21:27,679 --> 00:21:29,120
person we're going to get

543
00:21:29,120 --> 00:21:31,120
that's going to be submitting submitting

544
00:21:31,120 --> 00:21:33,200
code that could have a vulnerability

545
00:21:33,200 --> 00:21:35,120
it could be a very senior person who's

546
00:21:35,120 --> 00:21:37,280
just like oh yeah oops forgot about this

547
00:21:37,280 --> 00:21:38,480
i know all about this i'm going to go

548
00:21:38,480 --> 00:21:39,280
ahead and fix it

549
00:21:39,280 --> 00:21:41,760
to people who are very green and they

550
00:21:41,760 --> 00:21:42,320
would

551
00:21:42,320 --> 00:21:44,080
you know love to like look into this and

552
00:21:44,080 --> 00:21:45,840
read about it and it's really helpful

553
00:21:45,840 --> 00:21:46,320
for

554
00:21:46,320 --> 00:21:49,360
them in their career

555
00:21:49,360 --> 00:21:51,520
so another great thing is because we own

556
00:21:51,520 --> 00:21:52,559
the infrastructure

557
00:21:52,559 --> 00:21:55,360
we can make it faster we can we have

558
00:21:55,360 --> 00:21:56,400
some stuff that we're

559
00:21:56,400 --> 00:21:59,440
thinking about here paralyzing

560
00:21:59,440 --> 00:22:03,840
the rules downloading multiple different

561
00:22:03,840 --> 00:22:05,919
multiple copies of the code to be

562
00:22:05,919 --> 00:22:07,360
scanned but

563
00:22:07,360 --> 00:22:10,159
also running on different boxes with

564
00:22:10,159 --> 00:22:11,679
different flavors of the rules

565
00:22:11,679 --> 00:22:15,520
so you know scan results that

566
00:22:15,520 --> 00:22:17,760
would take maybe an hour it's going to

567
00:22:17,760 --> 00:22:18,960
take you know

568
00:22:18,960 --> 00:22:22,240
minutes um those three minute

569
00:22:22,240 --> 00:22:24,480
times we saw earlier um either running

570
00:22:24,480 --> 00:22:25,600
on beefier box

571
00:22:25,600 --> 00:22:28,640
or paralyze them uh just

572
00:22:28,640 --> 00:22:29,679
just some stuff that we're thinking

573
00:22:29,679 --> 00:22:30,720
about doing in the future but just

574
00:22:30,720 --> 00:22:32,720
haven't gotten to

575
00:22:32,720 --> 00:22:34,880
some grip supports 21 different

576
00:22:34,880 --> 00:22:36,559
programming languages

577
00:22:36,559 --> 00:22:39,520
however at slack our main code bases are

578
00:22:39,520 --> 00:22:41,840
written in hackling

579
00:22:41,840 --> 00:22:43,360
some grip doesn't currently support

580
00:22:43,360 --> 00:22:45,280
hackling

581
00:22:45,280 --> 00:22:47,280
so you may be asking okay so some grep

582
00:22:47,280 --> 00:22:48,720
supports all these different languages

583
00:22:48,720 --> 00:22:50,080
but it doesn't support the language i

584
00:22:50,080 --> 00:22:51,120
want it to

585
00:22:51,120 --> 00:22:53,600
well you can add languages to samgrep

586
00:22:53,600 --> 00:22:54,480
but

587
00:22:54,480 --> 00:22:58,799
how difficult is that well

588
00:22:58,799 --> 00:23:02,799
an intern can do it for two interns

589
00:23:02,799 --> 00:23:04,320
who are almost done with their computer

590
00:23:04,320 --> 00:23:06,720
science degrees

591
00:23:06,720 --> 00:23:08,480
these are our wonderful interns this

592
00:23:08,480 --> 00:23:11,120
summer david frankel and nicholas lynn

593
00:23:11,120 --> 00:23:13,840
who have been working tirelessly to

594
00:23:13,840 --> 00:23:14,559
implement

595
00:23:14,559 --> 00:23:18,480
hackling into semgrap

596
00:23:18,960 --> 00:23:21,760
they're both very cool people and we've

597
00:23:21,760 --> 00:23:23,120
been

598
00:23:23,120 --> 00:23:26,399
very lucky to have them

599
00:23:26,640 --> 00:23:30,400
nicholas came up with this project title

600
00:23:30,400 --> 00:23:33,440
project sushi aka static analysis using

601
00:23:33,440 --> 00:23:34,159
semgrep

602
00:23:34,159 --> 00:23:36,880
with hack integration and he made the

603
00:23:36,880 --> 00:23:38,000
r2c logo

604
00:23:38,000 --> 00:23:40,960
a little bit more delicious first it

605
00:23:40,960 --> 00:23:42,240
helps to understand

606
00:23:42,240 --> 00:23:45,600
a bit about how static analysis works

607
00:23:45,600 --> 00:23:48,159
all languages have grammar english has

608
00:23:48,159 --> 00:23:50,320
grammar chinese is grammar programming

609
00:23:50,320 --> 00:23:52,080
languages have grammar

610
00:23:52,080 --> 00:23:53,760
you can actually write up formal

611
00:23:53,760 --> 00:23:55,760
specifications for

612
00:23:55,760 --> 00:23:59,039
what the grammar is for your programming

613
00:23:59,039 --> 00:24:00,320
language

614
00:24:00,320 --> 00:24:03,120
and then you can take existing code in

615
00:24:03,120 --> 00:24:04,320
the language

616
00:24:04,320 --> 00:24:05,760
run it through the grammar and create a

617
00:24:05,760 --> 00:24:07,760
representation called

618
00:24:07,760 --> 00:24:11,440
a syntax tree there are two main types

619
00:24:11,440 --> 00:24:12,799
of syntax trees there's

620
00:24:12,799 --> 00:24:15,600
concretes and tax trees which are direct

621
00:24:15,600 --> 00:24:17,679
representations of grammar

622
00:24:17,679 --> 00:24:20,799
in tree form and there's abstract syntax

623
00:24:20,799 --> 00:24:21,600
trees

624
00:24:21,600 --> 00:24:23,840
which are simplified representations of

625
00:24:23,840 --> 00:24:25,200
code

626
00:24:25,200 --> 00:24:27,520
the concrete syntax tree will have so

627
00:24:27,520 --> 00:24:28,720
much information in it

628
00:24:28,720 --> 00:24:31,840
like everything the computer needs to

629
00:24:31,840 --> 00:24:33,679
run the program

630
00:24:33,679 --> 00:24:35,520
for our purposes we don't necessarily

631
00:24:35,520 --> 00:24:38,080
care about all of that extra information

632
00:24:38,080 --> 00:24:40,880
we just want to be able to understand

633
00:24:40,880 --> 00:24:44,480
the semantic meaning of the language

634
00:24:44,480 --> 00:24:47,039
an abstract syntax tree takes that

635
00:24:47,039 --> 00:24:48,240
complicated

636
00:24:48,240 --> 00:24:52,480
concrete syntax tree and reduces it to

637
00:24:52,480 --> 00:24:55,279
a useful representation of the code the

638
00:24:55,279 --> 00:24:55,840
teal

639
00:24:55,840 --> 00:24:59,279
is the same code as the orange

640
00:24:59,279 --> 00:25:01,440
it's just been reduced to a more useful

641
00:25:01,440 --> 00:25:04,640
format for analysis

642
00:25:07,360 --> 00:25:11,039
how do you get from a grammar to

643
00:25:11,039 --> 00:25:13,919
a syntax tree well you have to parse the

644
00:25:13,919 --> 00:25:14,799
code

645
00:25:14,799 --> 00:25:17,760
just like if you were to read a book you

646
00:25:17,760 --> 00:25:19,200
have to

647
00:25:19,200 --> 00:25:22,240
teach the computer to read the language

648
00:25:22,240 --> 00:25:24,720
you want your syntax tree to be strongly

649
00:25:24,720 --> 00:25:26,159
typed because you want

650
00:25:26,159 --> 00:25:29,200
to be able to say okay in this

651
00:25:29,200 --> 00:25:31,200
expression

652
00:25:31,200 --> 00:25:33,440
the grammar here is this is a variable

653
00:25:33,440 --> 00:25:35,120
this is a method

654
00:25:35,120 --> 00:25:37,360
this is an argument you you want to be

655
00:25:37,360 --> 00:25:38,480
able to know

656
00:25:38,480 --> 00:25:41,039
what each piece of the language means so

657
00:25:41,039 --> 00:25:42,320
strongly typing them

658
00:25:42,320 --> 00:25:45,440
is a huge advantage for when you want to

659
00:25:45,440 --> 00:25:47,279
get more semantic meaning

660
00:25:47,279 --> 00:25:50,720
out of your programming language

661
00:25:50,720 --> 00:25:53,760
we'll do a deeper dive later so once you

662
00:25:53,760 --> 00:25:55,520
have a grammar

663
00:25:55,520 --> 00:25:59,200
you need a parser the parser will read

664
00:25:59,200 --> 00:26:00,080
the source code

665
00:26:00,080 --> 00:26:04,720
and turn it into a concrete syntax tree

666
00:26:04,720 --> 00:26:06,240
and then when you want to go from a

667
00:26:06,240 --> 00:26:08,159
concrete syntax tree to a more

668
00:26:08,159 --> 00:26:08,960
simplified

669
00:26:08,960 --> 00:26:11,600
abstract syntax tree you need another

670
00:26:11,600 --> 00:26:14,080
parser

671
00:26:14,480 --> 00:26:18,240
we've been using tree sitter for grammar

672
00:26:18,240 --> 00:26:20,080
tree center is a wonderful project by

673
00:26:20,080 --> 00:26:23,200
github it allows you to specify grammar

674
00:26:23,200 --> 00:26:26,240
in javascript and

675
00:26:26,240 --> 00:26:30,159
r2c has a bunch of ocamel

676
00:26:30,159 --> 00:26:33,600
that takes the grammar rules

677
00:26:33,600 --> 00:26:38,080
from tree sitter and

678
00:26:38,080 --> 00:26:41,440
gives you a generated parser that you

679
00:26:41,440 --> 00:26:42,480
then have to go through

680
00:26:42,480 --> 00:26:44,960
and teach the grammar so we have to

681
00:26:44,960 --> 00:26:45,840
modify

682
00:26:45,840 --> 00:26:49,279
the o camera parser file to produce the

683
00:26:49,279 --> 00:26:51,600
correct inputs and outputs

684
00:26:51,600 --> 00:26:55,760
based on a generic grammar

685
00:26:55,760 --> 00:26:59,200
because semgrep is language agnostic

686
00:26:59,200 --> 00:27:02,559
when we have a cst and we're going to an

687
00:27:02,559 --> 00:27:06,880
ast we need to use constructs that

688
00:27:06,880 --> 00:27:08,559
semgrep can understand

689
00:27:08,559 --> 00:27:11,760
so some grip will know what a variable

690
00:27:11,760 --> 00:27:12,400
is

691
00:27:12,400 --> 00:27:15,840
but you have to tell it how the variable

692
00:27:15,840 --> 00:27:20,559
is specified is it prepended with int

693
00:27:20,559 --> 00:27:24,080
or is it implied like in python

694
00:27:24,080 --> 00:27:26,000
the other big initiative is once you

695
00:27:26,000 --> 00:27:28,960
have the hackling parsers

696
00:27:28,960 --> 00:27:31,200
well

697
00:27:32,080 --> 00:27:33,440
you can't do anything with them if you

698
00:27:33,440 --> 00:27:35,840
don't have rules so

699
00:27:35,840 --> 00:27:38,559
we've been working on creating a rule

700
00:27:38,559 --> 00:27:38,880
set

701
00:27:38,880 --> 00:27:42,159
for hackling that looks for

702
00:27:42,159 --> 00:27:45,520
common problems we've seen from our bug

703
00:27:45,520 --> 00:27:46,840
bounty program

704
00:27:46,840 --> 00:27:50,000
from internal reports from our own

705
00:27:50,000 --> 00:27:52,080
experience

706
00:27:52,080 --> 00:27:54,880
of course like olaf's top ten you can't

707
00:27:54,880 --> 00:27:55,520
forget

708
00:27:55,520 --> 00:27:59,520
the wasp and as i was mentioning earlier

709
00:27:59,520 --> 00:28:00,799
these rules are actually fairly

710
00:28:00,799 --> 00:28:02,000
straightforward to write

711
00:28:02,000 --> 00:28:03,760
it usually takes us longer to write the

712
00:28:03,760 --> 00:28:06,720
developer guidance

713
00:28:07,360 --> 00:28:10,640
let's put this all together we have an

714
00:28:10,640 --> 00:28:11,840
enabled file

715
00:28:11,840 --> 00:28:13,200
when you get a new code base that you

716
00:28:13,200 --> 00:28:15,919
need to scan you plop it in the enabled

717
00:28:15,919 --> 00:28:18,159
file

718
00:28:18,880 --> 00:28:22,960
there is then we create an empty json

719
00:28:22,960 --> 00:28:23,360
file

720
00:28:23,360 --> 00:28:26,559
for false positives

721
00:28:29,279 --> 00:28:32,640
then the scan runs we

722
00:28:32,640 --> 00:28:36,159
review the results mark down false

723
00:28:36,159 --> 00:28:37,120
positives

724
00:28:37,120 --> 00:28:40,479
look for true positives

725
00:28:40,880 --> 00:28:45,200
bam you're now scanning that code base

726
00:28:45,200 --> 00:28:46,559
even if you're still dealing with

727
00:28:46,559 --> 00:28:49,919
processing the results of the scan

728
00:28:49,919 --> 00:28:53,840
you're now scanning which means

729
00:28:53,840 --> 00:28:59,840
you're in compliance

730
00:29:01,120 --> 00:29:04,880
thanks to the snow team

731
00:29:04,880 --> 00:29:06,960
static analysis non-web app as we've

732
00:29:06,960 --> 00:29:09,919
been calling the project

733
00:29:09,919 --> 00:29:12,880
r2c for all of their help with creating

734
00:29:12,880 --> 00:29:14,799
the parsers

735
00:29:14,799 --> 00:29:17,039
our wonderful summer interns nicholas

736
00:29:17,039 --> 00:29:19,120
and david

737
00:29:19,120 --> 00:29:22,000
of course slack because without slack we

738
00:29:22,000 --> 00:29:22,720
wouldn't have

739
00:29:22,720 --> 00:29:25,679
gotten to work on this program and the

740
00:29:25,679 --> 00:29:27,520
apsec village for having us

741
00:29:27,520 --> 00:29:30,480
the sun turtle appreciates you and

742
00:29:30,480 --> 00:29:31,919
finally

743
00:29:31,919 --> 00:29:34,080
thank you to our lovely co-worker

744
00:29:34,080 --> 00:29:35,520
antonio who

745
00:29:35,520 --> 00:29:37,919
wrote a good chunk of the initial

746
00:29:37,919 --> 00:29:39,440
grammar for hackling

747
00:29:39,440 --> 00:29:42,720
and has guided both our team

748
00:29:42,720 --> 00:29:45,679
and our interns in implementing hacc

749
00:29:45,679 --> 00:29:47,840
this summer

750
00:29:47,840 --> 00:29:50,399
if you want further reading you can hit

751
00:29:50,399 --> 00:29:52,960
up these slides

752
00:29:52,960 --> 00:29:55,200
and also check out some crap we've been

753
00:29:55,200 --> 00:29:56,320
really happy with it

754
00:29:56,320 --> 00:29:58,559
thanks everyone and we appreciate you

755
00:29:58,559 --> 00:29:59,520
taking

756
00:29:59,520 --> 00:30:02,159
the time to come to our talk let us know

757
00:30:02,159 --> 00:30:04,320
if you have any questions in the discord

758
00:30:04,320 --> 00:30:09,799
and we're happy to chat with you

759
00:30:09,799 --> 00:30:12,799
bye

