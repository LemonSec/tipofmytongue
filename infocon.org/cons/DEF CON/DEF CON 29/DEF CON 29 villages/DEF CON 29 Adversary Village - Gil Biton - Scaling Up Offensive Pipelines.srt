1
00:00:00,000 --> 00:00:03,120
everyone and thank you for joining my

2
00:00:01,599 --> 00:00:05,600
talk my name

3
00:00:03,120 --> 00:00:08,080
is gilberton and today i'm going to talk

4
00:00:05,600 --> 00:00:10,960
about red team challenges

5
00:00:08,080 --> 00:00:11,920
i will also demonstrate how we tackled

6
00:00:10,960 --> 00:00:14,960
these challenges

7
00:00:11,920 --> 00:00:17,920
in our team and enable you to do so in

8
00:00:14,960 --> 00:00:17,920
yours

9
00:00:19,119 --> 00:00:23,680
before we dive in a bit about myself i'm

10
00:00:21,840 --> 00:00:24,080
originally from israel but currently

11
00:00:23,680 --> 00:00:27,119
based

12
00:00:24,080 --> 00:00:27,760
in singapore hacking was always part of

13
00:00:27,119 --> 00:00:30,240
my life

14
00:00:27,760 --> 00:00:32,399
resulting me in trying to figure out how

15
00:00:30,240 --> 00:00:33,120
i utilize technology and science in

16
00:00:32,399 --> 00:00:36,559
order

17
00:00:33,120 --> 00:00:38,559
to basically make my life easier i have

18
00:00:36,559 --> 00:00:40,239
over five years of experience within the

19
00:00:38,559 --> 00:00:42,160
cyber security industry

20
00:00:40,239 --> 00:00:43,360
where i started from application

21
00:00:42,160 --> 00:00:46,079
penetration tests

22
00:00:43,360 --> 00:00:47,680
through infrastructure engagements and

23
00:00:46,079 --> 00:00:50,239
red teaming

24
00:00:47,680 --> 00:00:51,039
my expertise lies around enterprise

25
00:00:50,239 --> 00:00:54,160
security

26
00:00:51,039 --> 00:00:57,280
and the related aspects of it

27
00:00:54,160 --> 00:00:59,199
today i work at signia consulting as an

28
00:00:57,280 --> 00:01:03,199
offensive security engineer

29
00:00:59,199 --> 00:01:05,199
being part of its security research team

30
00:01:03,199 --> 00:01:06,479
i am available on many social networks

31
00:01:05,199 --> 00:01:12,799
which are listed here

32
00:01:06,479 --> 00:01:16,080
so feel free to reach out

33
00:01:12,799 --> 00:01:18,960
first let me give you some context

34
00:01:16,080 --> 00:01:19,520
we have to admit it red and purple

35
00:01:18,960 --> 00:01:23,600
teaming

36
00:01:19,520 --> 00:01:26,960
became harder throughout the past years

37
00:01:23,600 --> 00:01:29,840
retinals are struggling with challenges

38
00:01:26,960 --> 00:01:31,600
during engagements this is because

39
00:01:29,840 --> 00:01:34,079
organization organizations

40
00:01:31,600 --> 00:01:34,720
lifted up their detection capabilities

41
00:01:34,079 --> 00:01:39,520
and also

42
00:01:34,720 --> 00:01:42,960
integrated advanced security solutions

43
00:01:39,520 --> 00:01:46,720
this caused the execution of even basic

44
00:01:42,960 --> 00:01:48,960
red team tasks to get complicated

45
00:01:46,720 --> 00:01:50,159
organizations have also a variety of

46
00:01:48,960 --> 00:01:52,640
products and vendors

47
00:01:50,159 --> 00:01:54,159
incorporated in their networks making

48
00:01:52,640 --> 00:01:55,360
techniques that worked in one

49
00:01:54,159 --> 00:01:59,600
organizations

50
00:01:55,360 --> 00:02:01,920
to fail or get detected on another

51
00:01:59,600 --> 00:02:04,000
logging and monitoring capabilities were

52
00:02:01,920 --> 00:02:07,360
also enhanced

53
00:02:04,000 --> 00:02:08,080
we are recorded 24 7 by the big brother

54
00:02:07,360 --> 00:02:11,360
sim and

55
00:02:08,080 --> 00:02:13,280
its sock siblings so avoid triggering

56
00:02:11,360 --> 00:02:16,720
alerts during an operation

57
00:02:13,280 --> 00:02:19,200
became a challenge by itself

58
00:02:16,720 --> 00:02:20,800
to handle the situation adversaries

59
00:02:19,200 --> 00:02:22,959
spend even more time on the

60
00:02:20,800 --> 00:02:25,520
weaponization phase

61
00:02:22,959 --> 00:02:27,680
and this is done prior and during the

62
00:02:25,520 --> 00:02:30,560
operation

63
00:02:27,680 --> 00:02:31,040
many times these tasks are repetitive

64
00:02:30,560 --> 00:02:33,680
and

65
00:02:31,040 --> 00:02:35,040
sometimes cause delays due to technical

66
00:02:33,680 --> 00:02:37,120
issues

67
00:02:35,040 --> 00:02:39,920
and these technical issues we have all

68
00:02:37,120 --> 00:02:43,360
experienced before

69
00:02:39,920 --> 00:02:47,200
let me ask you a question how many times

70
00:02:43,360 --> 00:02:49,840
have you weaponized the same tool or

71
00:02:47,200 --> 00:02:51,040
how many times you helped a colleague to

72
00:02:49,840 --> 00:02:54,800
use a technique

73
00:02:51,040 --> 00:02:58,159
that you found or used speaking about

74
00:02:54,800 --> 00:02:58,640
colleagues while working with a growing

75
00:02:58,159 --> 00:03:00,640
team

76
00:02:58,640 --> 00:03:02,319
that are divided across multiple

77
00:03:00,640 --> 00:03:04,640
engagements

78
00:03:02,319 --> 00:03:06,080
we realized that new challenges were

79
00:03:04,640 --> 00:03:09,040
added

80
00:03:06,080 --> 00:03:10,959
these challenges include working from

81
00:03:09,040 --> 00:03:14,400
home due to the covered era

82
00:03:10,959 --> 00:03:16,560
or back-to-back engagements also

83
00:03:14,400 --> 00:03:18,080
new developments that team members

84
00:03:16,560 --> 00:03:19,599
created got lost

85
00:03:18,080 --> 00:03:22,000
as soon as they finished their

86
00:03:19,599 --> 00:03:24,720
engagements

87
00:03:22,000 --> 00:03:27,599
so we understood that we want to have a

88
00:03:24,720 --> 00:03:30,720
better platform to collaborate on

89
00:03:27,599 --> 00:03:31,519
in my opinion having a base standout can

90
00:03:30,720 --> 00:03:33,519
enable

91
00:03:31,519 --> 00:03:35,599
equal capabilities across your team

92
00:03:33,519 --> 00:03:39,200
members

93
00:03:35,599 --> 00:03:42,560
now whenever we do develop

94
00:03:39,200 --> 00:03:43,280
or discover a new capability we have to

95
00:03:42,560 --> 00:03:46,720
somehow

96
00:03:43,280 --> 00:03:49,360
store it right there are

97
00:03:46,720 --> 00:03:50,400
many documentations and methodologies

98
00:03:49,360 --> 00:03:53,120
out there and

99
00:03:50,400 --> 00:03:53,680
every day a new exploit technique or

100
00:03:53,120 --> 00:03:57,040
tool

101
00:03:53,680 --> 00:03:59,360
are released so

102
00:03:57,040 --> 00:04:00,159
sometimes it's hard to follow and

103
00:03:59,360 --> 00:04:02,319
incorporate

104
00:04:00,159 --> 00:04:03,680
every technique in your methodologies

105
00:04:02,319 --> 00:04:07,200
while being busy

106
00:04:03,680 --> 00:04:07,200
on with multiple engagements

107
00:04:07,280 --> 00:04:10,400
security teams are also sharing thoughts

108
00:04:09,920 --> 00:04:13,599
during

109
00:04:10,400 --> 00:04:15,680
whole conversations or coffee breaks but

110
00:04:13,599 --> 00:04:17,759
memorizing and storing this entire

111
00:04:15,680 --> 00:04:21,199
content in an efficient way

112
00:04:17,759 --> 00:04:23,199
became complicated so until elon musk

113
00:04:21,199 --> 00:04:26,080
will provide us his neural link we have

114
00:04:23,199 --> 00:04:26,080
to find a solution

115
00:04:27,280 --> 00:04:30,960
we understood that we want to import

116
00:04:29,919 --> 00:04:33,759
more automation

117
00:04:30,960 --> 00:04:34,639
into our engagements as we want to

118
00:04:33,759 --> 00:04:37,199
reduce

119
00:04:34,639 --> 00:04:39,680
the time on repetitive tasks which we

120
00:04:37,199 --> 00:04:41,759
are not really interested in

121
00:04:39,680 --> 00:04:44,479
we know that the community already

122
00:04:41,759 --> 00:04:47,199
adapted the cicd pipelines concept

123
00:04:44,479 --> 00:04:50,639
to automate tasks that are related to

124
00:04:47,199 --> 00:04:53,120
offensive tool weaponization

125
00:04:50,639 --> 00:04:54,479
offensive ccd pipelines have been around

126
00:04:53,120 --> 00:04:57,040
for a couple of years

127
00:04:54,479 --> 00:04:57,600
with the goal of helping great teams to

128
00:04:57,040 --> 00:05:00,639
automate

129
00:04:57,600 --> 00:05:02,720
their tasks i'm not going to talk in

130
00:05:00,639 --> 00:05:04,720
detail about cicd

131
00:05:02,720 --> 00:05:05,840
but we are going to dive into the

132
00:05:04,720 --> 00:05:08,960
advantages

133
00:05:05,840 --> 00:05:11,680
of using it for offensive needs

134
00:05:08,960 --> 00:05:13,840
i truly believe that we cannot automate

135
00:05:11,680 --> 00:05:16,560
the entire editing operation

136
00:05:13,840 --> 00:05:17,280
as we need to bring our own expertise

137
00:05:16,560 --> 00:05:20,800
knowledge

138
00:05:17,280 --> 00:05:22,880
and way of thinking we want to have a

139
00:05:20,800 --> 00:05:23,680
mind behind the operation who can take

140
00:05:22,880 --> 00:05:25,680
decisions

141
00:05:23,680 --> 00:05:28,639
in real time and according to the

142
00:05:25,680 --> 00:05:31,520
feedback he receives

143
00:05:28,639 --> 00:05:32,960
so then you will be able to put more

144
00:05:31,520 --> 00:05:36,840
focus on bypassing

145
00:05:32,960 --> 00:05:39,840
new barriers which he never tackled

146
00:05:36,840 --> 00:05:39,840
before

147
00:05:40,960 --> 00:05:44,880
we started exploring the cicd area and

148
00:05:43,440 --> 00:05:47,600
perform a research that

149
00:05:44,880 --> 00:05:49,520
ended up with a pain that we really

150
00:05:47,600 --> 00:05:52,080
wanted to solve

151
00:05:49,520 --> 00:05:52,720
this pain pushed us to design and

152
00:05:52,080 --> 00:05:56,000
develop

153
00:05:52,720 --> 00:05:59,440
our own offensive pipeline framework

154
00:05:56,000 --> 00:06:02,720
while focusing on the needs of our

155
00:05:59,440 --> 00:06:06,080
growing adversarial team

156
00:06:02,720 --> 00:06:08,080
such needs include simplicity

157
00:06:06,080 --> 00:06:09,360
as being part of a growing team we

158
00:06:08,080 --> 00:06:12,880
wanted to onboard

159
00:06:09,360 --> 00:06:15,840
new members to use that concept easily

160
00:06:12,880 --> 00:06:16,880
and also make it even simpler for us so

161
00:06:15,840 --> 00:06:20,319
the migration

162
00:06:16,880 --> 00:06:21,680
will be faster there is also a need for

163
00:06:20,319 --> 00:06:24,080
modularity

164
00:06:21,680 --> 00:06:24,880
the framework must allow the developed

165
00:06:24,080 --> 00:06:27,840
techniques

166
00:06:24,880 --> 00:06:29,039
to be packaged individually so we can

167
00:06:27,840 --> 00:06:31,759
mix between them

168
00:06:29,039 --> 00:06:34,960
when assembling pipelines that weaponize

169
00:06:31,759 --> 00:06:36,720
different tools we wanted that the

170
00:06:34,960 --> 00:06:38,319
framework will be able to maintain

171
00:06:36,720 --> 00:06:41,600
itself so

172
00:06:38,319 --> 00:06:44,880
we don't add overhead to ourselves by

173
00:06:41,600 --> 00:06:47,919
making it we're looking for a system

174
00:06:44,880 --> 00:06:48,880
that anyone can contribute to so the

175
00:06:47,919 --> 00:06:51,280
efforts

176
00:06:48,880 --> 00:06:52,560
will be gained from each and every team

177
00:06:51,280 --> 00:06:54,560
member

178
00:06:52,560 --> 00:06:57,440
this is because we have all many

179
00:06:54,560 --> 00:07:00,880
engagements and any of our team members

180
00:06:57,440 --> 00:07:04,080
solving complex challenges

181
00:07:00,880 --> 00:07:09,039
that we can then uh share back

182
00:07:04,080 --> 00:07:09,039
to our uh offensive pipelines framework

183
00:07:09,440 --> 00:07:12,960
we want also that the environment's

184
00:07:11,360 --> 00:07:16,000
infrastructure

185
00:07:12,960 --> 00:07:18,240
be controlled by us since

186
00:07:16,000 --> 00:07:19,280
the sources and the tools we are trying

187
00:07:18,240 --> 00:07:22,240
to recognize

188
00:07:19,280 --> 00:07:23,039
considered malicious and we don't want

189
00:07:22,240 --> 00:07:26,479
them to get

190
00:07:23,039 --> 00:07:26,479
analyzed or blocked

191
00:07:27,120 --> 00:07:31,759
does having these frameworks on a sas

192
00:07:30,560 --> 00:07:34,319
solution

193
00:07:31,759 --> 00:07:36,560
could create obstacles throughout the

194
00:07:34,319 --> 00:07:36,560
way

195
00:07:37,280 --> 00:07:43,360
also while performing a letting you

196
00:07:40,319 --> 00:07:45,280
sometimes in a need for a specific tool

197
00:07:43,360 --> 00:07:46,879
this tool can aid you with achieving

198
00:07:45,280 --> 00:07:50,160
your goal and

199
00:07:46,879 --> 00:07:52,639
we all know that we may lose the

200
00:07:50,160 --> 00:07:54,000
the operation when having delays during

201
00:07:52,639 --> 00:07:56,639
it

202
00:07:54,000 --> 00:07:57,120
we have to remember that each engagement

203
00:07:56,639 --> 00:07:59,599
get

204
00:07:57,120 --> 00:08:00,560
different artifacts so it will not

205
00:07:59,599 --> 00:08:03,280
affect

206
00:08:00,560 --> 00:08:05,520
other other engagement if the device and

207
00:08:03,280 --> 00:08:08,800
the collection of the

208
00:08:05,520 --> 00:08:13,440
of the tools will be will be

209
00:08:08,800 --> 00:08:17,280
lost its reputation but

210
00:08:13,440 --> 00:08:20,800
now considering all these needs

211
00:08:17,280 --> 00:08:24,400
we ended up choosing gitlab as the core

212
00:08:20,800 --> 00:08:25,039
of our framework if you're looking at

213
00:08:24,400 --> 00:08:27,919
the

214
00:08:25,039 --> 00:08:28,319
high level description we may predict

215
00:08:27,919 --> 00:08:31,599
that

216
00:08:28,319 --> 00:08:32,080
it can answer our needs and let me

217
00:08:31,599 --> 00:08:35,200
explain

218
00:08:32,080 --> 00:08:36,159
why we researched a variety of

219
00:08:35,200 --> 00:08:40,479
frameworks

220
00:08:36,159 --> 00:08:43,919
such as jenkins circle ci github actions

221
00:08:40,479 --> 00:08:44,399
and appvio which served us for the past

222
00:08:43,919 --> 00:08:47,519
year

223
00:08:44,399 --> 00:08:48,240
where we learned the power of having ccd

224
00:08:47,519 --> 00:08:51,760
concepts

225
00:08:48,240 --> 00:08:54,160
within your security needs

226
00:08:51,760 --> 00:08:55,519
these tools didn't really came up with

227
00:08:54,160 --> 00:08:58,399
our needs

228
00:08:55,519 --> 00:08:59,279
even gitlab was not perfect i actually

229
00:08:58,399 --> 00:09:01,920
started

230
00:08:59,279 --> 00:09:05,040
going over their source code when i saw

231
00:09:01,920 --> 00:09:08,080
a possible constraint

232
00:09:05,040 --> 00:09:11,040
but still high level is debris

233
00:09:08,080 --> 00:09:13,760
gibberish so let's discuss the technical

234
00:09:11,040 --> 00:09:13,760
aspects of it

235
00:09:14,000 --> 00:09:18,160
so gitlab started off being code

236
00:09:16,080 --> 00:09:20,480
repository version control

237
00:09:18,160 --> 00:09:22,720
allowing you to store and manage sources

238
00:09:20,480 --> 00:09:26,000
of of your tools

239
00:09:22,720 --> 00:09:28,399
gitlab also provides a restful api

240
00:09:26,000 --> 00:09:30,000
which allows you to automate anything

241
00:09:28,399 --> 00:09:33,279
that you can basically do

242
00:09:30,000 --> 00:09:34,640
manually it comes together with a

243
00:09:33,279 --> 00:09:36,560
detailed documentation

244
00:09:34,640 --> 00:09:40,399
that can save you some time when you try

245
00:09:36,560 --> 00:09:42,800
to figure out how to approach a call

246
00:09:40,399 --> 00:09:44,080
a must-have feature is the gitlab ci

247
00:09:42,800 --> 00:09:46,240
providing you with

248
00:09:44,080 --> 00:09:47,680
the ability to create pipeline jobs

249
00:09:46,240 --> 00:09:50,880
which i refer

250
00:09:47,680 --> 00:09:53,200
as recipes this is done

251
00:09:50,880 --> 00:09:54,399
in a simple and organized manner through

252
00:09:53,200 --> 00:09:58,560
the yaml format

253
00:09:54,399 --> 00:10:00,560
files the ccd also offers multiple

254
00:09:58,560 --> 00:10:03,920
integrations to different systems

255
00:10:00,560 --> 00:10:04,880
where you can execute your job recipes

256
00:10:03,920 --> 00:10:07,760
for example

257
00:10:04,880 --> 00:10:09,040
as part of the ci concept you you need

258
00:10:07,760 --> 00:10:11,279
to execute your jobs

259
00:10:09,040 --> 00:10:12,079
in an operating system either linux or

260
00:10:11,279 --> 00:10:14,240
windows

261
00:10:12,079 --> 00:10:15,120
it can be on a single server or on a

262
00:10:14,240 --> 00:10:18,560
container

263
00:10:15,120 --> 00:10:22,000
and having a support

264
00:10:18,560 --> 00:10:23,200
with docker and kubernetes can help you

265
00:10:22,000 --> 00:10:28,079
with achieving the goal

266
00:10:23,200 --> 00:10:31,680
faster jobs can also be executed on

267
00:10:28,079 --> 00:10:34,560
on specified conditions for example

268
00:10:31,680 --> 00:10:35,600
on a push that you you just did your

269
00:10:34,560 --> 00:10:38,800
repository

270
00:10:35,600 --> 00:10:42,399
or whenever another pipeline just

271
00:10:38,800 --> 00:10:46,880
ended successfully or

272
00:10:42,399 --> 00:10:49,839
being triggered by another pipeline

273
00:10:46,880 --> 00:10:51,519
the multiple pipeline support allows to

274
00:10:49,839 --> 00:10:53,279
trigger several pipelines through

275
00:10:51,519 --> 00:10:55,680
executing only one

276
00:10:53,279 --> 00:10:56,399
for example when we perform a rating we

277
00:10:55,680 --> 00:10:59,279
tend to use

278
00:10:56,399 --> 00:10:59,600
a collection of tools and we don't want

279
00:10:59,279 --> 00:11:02,399
to

280
00:10:59,600 --> 00:11:03,360
weaponize them one by one right we want

281
00:11:02,399 --> 00:11:06,320
to trigger

282
00:11:03,360 --> 00:11:06,800
one pipeline that will deliver all of

283
00:11:06,320 --> 00:11:11,120
them

284
00:11:06,800 --> 00:11:13,200
to ourselves i believe that this is just

285
00:11:11,120 --> 00:11:14,480
the tip of the iceberg and i'm pretty

286
00:11:13,200 --> 00:11:18,880
sure that you'll find

287
00:11:14,480 --> 00:11:18,880
additional features to use in the future

288
00:11:20,240 --> 00:11:23,519
let's see a simple example of an

289
00:11:22,000 --> 00:11:27,040
offensive pipeline recipe

290
00:11:23,519 --> 00:11:29,680
in motion the pipeline starts off

291
00:11:27,040 --> 00:11:32,320
cloning the rubios tool a c-sharp tool

292
00:11:29,680 --> 00:11:34,959
from the code repository

293
00:11:32,320 --> 00:11:36,000
then the tool gets built using a job

294
00:11:34,959 --> 00:11:38,800
that we define

295
00:11:36,000 --> 00:11:40,399
containing the dependencies for ms of ms

296
00:11:38,800 --> 00:11:42,800
build

297
00:11:40,399 --> 00:11:43,440
the compiled binary passes to the next

298
00:11:42,800 --> 00:11:49,120
stage

299
00:11:43,440 --> 00:11:51,920
would get obfuscated using confuser ex

300
00:11:49,120 --> 00:11:53,120
the confused binary then passes to the

301
00:11:51,920 --> 00:11:56,000
next stage

302
00:11:53,120 --> 00:11:57,200
where it gets wrapped by a.net assembly

303
00:11:56,000 --> 00:12:00,639
loader

304
00:11:57,200 --> 00:12:06,079
those letting us

305
00:12:00,639 --> 00:12:06,079
to execute a dotnet tool via powershell

306
00:12:07,360 --> 00:12:11,040
finally it gets deployed to your

307
00:12:09,440 --> 00:12:13,360
favorite bucket

308
00:12:11,040 --> 00:12:14,560
so you can download it from anywhere you

309
00:12:13,360 --> 00:12:17,040
want

310
00:12:14,560 --> 00:12:19,600
in addition we also deploy it here to

311
00:12:17,040 --> 00:12:21,760
our point drop server which is a server

312
00:12:19,600 --> 00:12:25,120
that allows you to manage the way you

313
00:12:21,760 --> 00:12:27,200
download your files

314
00:12:25,120 --> 00:12:28,320
another example can go with powershell

315
00:12:27,200 --> 00:12:31,600
where we use the tool

316
00:12:28,320 --> 00:12:33,120
invoke domain passwords plane in this

317
00:12:31,600 --> 00:12:35,279
time we don't need to build it

318
00:12:33,120 --> 00:12:36,800
but aggregate it from few powershell

319
00:12:35,279 --> 00:12:39,360
scripts

320
00:12:36,800 --> 00:12:40,560
the combined powershell script is then

321
00:12:39,360 --> 00:12:42,959
passes to the

322
00:12:40,560 --> 00:12:44,079
next stage where it get where it being

323
00:12:42,959 --> 00:12:48,160
obfuscating

324
00:12:44,079 --> 00:12:50,399
or force obfuscated with chimera that

325
00:12:48,160 --> 00:12:51,440
a tool that designed to bypass ansi and

326
00:12:50,399 --> 00:12:55,040
i2 values

327
00:12:51,440 --> 00:12:57,120
when obfuscating powershell scripts

328
00:12:55,040 --> 00:12:58,959
then it goes directly to the last stage

329
00:12:57,120 --> 00:13:01,760
when it gets deployed

330
00:12:58,959 --> 00:13:02,480
to our pawn drop server so we'll be able

331
00:13:01,760 --> 00:13:04,839
to download

332
00:13:02,480 --> 00:13:06,560
and execute it on the targeted

333
00:13:04,839 --> 00:13:08,560
environment

334
00:13:06,560 --> 00:13:09,920
in the same way we made may add

335
00:13:08,560 --> 00:13:12,560
additional sources

336
00:13:09,920 --> 00:13:14,320
of different tools and define the

337
00:13:12,560 --> 00:13:17,519
pipelines with jobs

338
00:13:14,320 --> 00:13:18,000
that we already developed and this is

339
00:13:17,519 --> 00:13:20,959
where

340
00:13:18,000 --> 00:13:23,279
the modularity plays its significant

341
00:13:20,959 --> 00:13:25,920
role

342
00:13:23,279 --> 00:13:27,200
for desert we can use the pipeline

343
00:13:25,920 --> 00:13:30,320
triggering options

344
00:13:27,200 --> 00:13:33,120
or gitlab api to trigger

345
00:13:30,320 --> 00:13:34,800
multiple pipelines based on different

346
00:13:33,120 --> 00:13:37,839
groupings

347
00:13:34,800 --> 00:13:43,120
this enables us to weaponize

348
00:13:37,839 --> 00:13:43,120
tens and hundreds of tools in minutes

349
00:13:44,560 --> 00:13:50,560
today i want to introduce scallops

350
00:13:48,079 --> 00:13:53,120
scallops is a framework that empowers

351
00:13:50,560 --> 00:13:55,839
red teams by enabling them to put

352
00:13:53,120 --> 00:13:56,800
more focus on what they need to do

353
00:13:55,839 --> 00:13:59,519
instead of

354
00:13:56,800 --> 00:14:00,320
how to do it and this can be achieved by

355
00:13:59,519 --> 00:14:03,839
designing

356
00:14:00,320 --> 00:14:03,839
great recipes

357
00:14:04,240 --> 00:14:09,199
let's dive in to see the possibilities

358
00:14:06,240 --> 00:14:09,199
of this framework

359
00:14:09,600 --> 00:14:11,839
so

360
00:14:15,600 --> 00:14:20,320
after we authenticate to our git lab we

361
00:14:18,720 --> 00:14:22,160
can see that it contains few

362
00:14:20,320 --> 00:14:25,600
repositories

363
00:14:22,160 --> 00:14:28,160
the one the first one is the ci recipes

364
00:14:25,600 --> 00:14:30,079
the same recipes is a collection of all

365
00:14:28,160 --> 00:14:30,639
the yaml files that could contain the

366
00:14:30,079 --> 00:14:33,440
jobs

367
00:14:30,639 --> 00:14:35,600
that we are using to weaponize our tools

368
00:14:33,440 --> 00:14:45,839
the three other repositories

369
00:14:35,600 --> 00:14:45,839
are tools that we want to recognize

370
00:14:50,240 --> 00:14:54,639
now let's say we want to add additional

371
00:14:53,600 --> 00:14:58,079
tool

372
00:14:54,639 --> 00:15:01,120
and in this case we want to add the

373
00:14:58,079 --> 00:15:03,839
sharp edl checker what we're going to do

374
00:15:01,120 --> 00:15:05,040
is that we're going to enter the ci

375
00:15:03,839 --> 00:15:08,639
recipes tool

376
00:15:05,040 --> 00:15:12,000
the ci recipes repository

377
00:15:08,639 --> 00:15:16,000
and add the relevant direction

378
00:15:12,000 --> 00:15:16,000
for the sharp edl checker tool

379
00:15:18,800 --> 00:15:23,839
and this time we'll use the web id which

380
00:15:20,720 --> 00:15:23,839
is very useful here

381
00:15:24,959 --> 00:15:29,519
and you will see few sections within

382
00:15:27,920 --> 00:15:31,759
this repository

383
00:15:29,519 --> 00:15:32,720
the relevant repository for the tools

384
00:15:31,759 --> 00:15:34,800
are is the

385
00:15:32,720 --> 00:15:36,800
tools controller where you can see the

386
00:15:34,800 --> 00:15:38,240
recipes of the different tools we want

387
00:15:36,800 --> 00:15:40,720
to weaponize

388
00:15:38,240 --> 00:15:42,240
the tools index contain all the tools

389
00:15:40,720 --> 00:15:46,160
that are imported

390
00:15:42,240 --> 00:15:46,160
to the gitlab instance

391
00:15:47,199 --> 00:15:51,120
to add the additional tool we have to

392
00:15:48,880 --> 00:15:52,079
create an additional object within this

393
00:15:51,120 --> 00:15:54,959
array

394
00:15:52,079 --> 00:15:55,600
and provide it with the sharp edl

395
00:15:54,959 --> 00:16:09,839
checker

396
00:15:55,600 --> 00:16:09,839
git repository link

397
00:16:11,279 --> 00:16:16,160
we have to also specify the name of the

398
00:16:13,360 --> 00:16:19,839
project in order to for the

399
00:16:16,160 --> 00:16:21,680
automation to not uh to distinct between

400
00:16:19,839 --> 00:16:25,600
the other projects

401
00:16:21,680 --> 00:16:28,880
and also create a recipe for it

402
00:16:25,600 --> 00:16:33,199
so it can be automated

403
00:16:28,880 --> 00:16:36,320
with the whipponization of itself

404
00:16:33,199 --> 00:16:36,800
because the its recipe is not existing

405
00:16:36,320 --> 00:16:40,000
yet

406
00:16:36,800 --> 00:16:40,000
we have to create it

407
00:16:40,320 --> 00:16:43,440
using a new file

408
00:16:43,920 --> 00:16:47,279
and because sharpie dr checker is a

409
00:16:46,560 --> 00:16:51,199
seashell

410
00:16:47,279 --> 00:16:54,560
file that was built seemingly the same

411
00:16:51,199 --> 00:16:57,839
to a built-in structure

412
00:16:54,560 --> 00:16:59,519
the same as rubios we can actually copy

413
00:16:57,839 --> 00:17:05,839
the same recipe

414
00:16:59,519 --> 00:17:05,839
and change the relevant namings

415
00:17:10,400 --> 00:17:14,799
we have to remember which stages are we

416
00:17:12,799 --> 00:17:16,959
going to execute

417
00:17:14,799 --> 00:17:18,160
in this in this case we are going to

418
00:17:16,959 --> 00:17:21,280
build obfuscate

419
00:17:18,160 --> 00:17:24,559
and deploy it now all the

420
00:17:21,280 --> 00:17:27,839
relevant jobs are included within

421
00:17:24,559 --> 00:17:27,839
the yammels above

422
00:17:31,760 --> 00:17:39,120
now when when we commit tools index

423
00:17:35,440 --> 00:17:44,240
we actually trigger a pipeline

424
00:17:39,120 --> 00:17:44,240
that automatically imports the tool

425
00:17:44,799 --> 00:17:48,000
you can see that the pipeline was

426
00:17:46,160 --> 00:17:51,360
triggered below

427
00:17:48,000 --> 00:17:51,360
and a job was created

428
00:17:55,440 --> 00:18:02,799
we let the job to work and see how we

429
00:18:00,160 --> 00:18:04,640
we designed it to do it so under the cia

430
00:18:02,799 --> 00:18:05,520
maintain we included many things that

431
00:18:04,640 --> 00:18:07,679
maintain the

432
00:18:05,520 --> 00:18:09,600
framework and the infrastructure itself

433
00:18:07,679 --> 00:18:13,200
and in tools import

434
00:18:09,600 --> 00:18:16,720
we have the import public tools job

435
00:18:13,200 --> 00:18:20,320
where it reads the tools index file

436
00:18:16,720 --> 00:18:24,640
and compare it with the existing

437
00:18:20,320 --> 00:18:24,640
project within our gitlab instance

438
00:18:25,679 --> 00:18:31,919
eventually it imports imports

439
00:18:28,799 --> 00:18:31,919
the leftover tools

440
00:18:33,200 --> 00:18:36,960
as you can see the job was succeeded we

441
00:18:36,160 --> 00:18:40,320
also have

442
00:18:36,960 --> 00:18:43,039
the api output here and we can see

443
00:18:40,320 --> 00:18:45,840
that sharp edl checker was added to our

444
00:18:43,039 --> 00:18:45,840
projects list

445
00:18:49,840 --> 00:18:53,679
let's trigger its pipeline and see what

446
00:18:52,160 --> 00:18:56,400
happens

447
00:18:53,679 --> 00:18:57,200
if you remember we pointed it at builds

448
00:18:56,400 --> 00:19:00,720
obfuscate

449
00:18:57,200 --> 00:19:00,720
and deploy stages

450
00:19:03,760 --> 00:19:07,760
as you can see there are three different

451
00:19:05,679 --> 00:19:11,360
stages with each

452
00:19:07,760 --> 00:19:14,960
job on each of them so let's understand

453
00:19:11,360 --> 00:19:15,440
each and every job let's go to the build

454
00:19:14,960 --> 00:19:17,760
job

455
00:19:15,440 --> 00:19:18,880
which will possibly be under the ca

456
00:19:17,760 --> 00:19:25,840
builders

457
00:19:18,880 --> 00:19:28,559
in shoptools.yammen

458
00:19:25,840 --> 00:19:29,280
here we're using a customized windows

459
00:19:28,559 --> 00:19:32,240
container

460
00:19:29,280 --> 00:19:33,120
where we created it to contain the ms

461
00:19:32,240 --> 00:19:35,360
build

462
00:19:33,120 --> 00:19:38,720
and all its relevant dependencies to

463
00:19:35,360 --> 00:19:41,039
build c-sharp tools

464
00:19:38,720 --> 00:19:42,880
it will build it with it will compile it

465
00:19:41,039 --> 00:19:45,919
with the release configuration

466
00:19:42,880 --> 00:19:46,799
and eventually upload it to the job

467
00:19:45,919 --> 00:19:50,840
artifact

468
00:19:46,799 --> 00:19:53,840
so the next job will be able to pick it

469
00:19:50,840 --> 00:19:53,840
up

470
00:19:56,559 --> 00:20:02,960
the next stage is confuse is obfuscating

471
00:20:00,240 --> 00:20:05,039
with the confuser ex which will be under

472
00:20:02,960 --> 00:20:08,559
ci obfuscations

473
00:20:05,039 --> 00:20:10,960
the confuser ex also executed on a

474
00:20:08,559 --> 00:20:13,760
container a customized container that we

475
00:20:10,960 --> 00:20:13,760
created for it

476
00:20:15,120 --> 00:20:22,080
it starts off fetching the previous

477
00:20:19,039 --> 00:20:26,799
the artifact from the previous job

478
00:20:22,080 --> 00:20:30,240
and executing the confuser ex

479
00:20:26,799 --> 00:20:33,760
features to obfuscate the

480
00:20:30,240 --> 00:20:36,000
compiled binary eventually

481
00:20:33,760 --> 00:20:38,000
it will also upload the compiled

482
00:20:36,000 --> 00:20:41,120
obfuscated binary

483
00:20:38,000 --> 00:20:49,840
to the job artifact so the next job will

484
00:20:41,120 --> 00:20:49,840
be able to pick it up

485
00:20:50,240 --> 00:20:54,559
the last job is deploy to pawn drop

486
00:20:53,200 --> 00:20:57,520
let's take a look

487
00:20:54,559 --> 00:20:57,520
at what it is

488
00:20:57,600 --> 00:21:02,480
it will be under the ci deployers point

489
00:20:59,760 --> 00:21:06,080
drop deploy.job

490
00:21:02,480 --> 00:21:08,880
it will be executed on a linux container

491
00:21:06,080 --> 00:21:10,640
and if you noticed we are actually

492
00:21:08,880 --> 00:21:13,200
weaponizing our tool

493
00:21:10,640 --> 00:21:15,039
through two different operating systems

494
00:21:13,200 --> 00:21:18,799
with different dependencies

495
00:21:15,039 --> 00:21:18,799
and this is done in no time

496
00:21:19,440 --> 00:21:23,120
for deployment to pundop we have to

497
00:21:20,960 --> 00:21:27,120
provide this job relevant

498
00:21:23,120 --> 00:21:32,159
variables that it will be able to

499
00:21:27,120 --> 00:21:32,159
reach it and upload the files in with a

500
00:21:32,240 --> 00:21:37,200
with the relevant access since we didn't

501
00:21:35,280 --> 00:21:41,440
provide these variables

502
00:21:37,200 --> 00:21:41,440
this jo this job will be failed

503
00:21:42,640 --> 00:21:49,840
let's leave it here and go to the

504
00:21:45,760 --> 00:21:53,360
to to take a look at the multi pipeline

505
00:21:49,840 --> 00:21:56,240
feature this is will also be part of the

506
00:21:53,360 --> 00:21:56,240
ca recipes

507
00:21:56,960 --> 00:22:01,200
and we want actually to build and

508
00:21:59,760 --> 00:22:04,159
trigger the pipeline of the three

509
00:22:01,200 --> 00:22:07,280
repositories that we had

510
00:22:04,159 --> 00:22:09,280
so we already made a ad yaml under the

511
00:22:07,280 --> 00:22:12,559
under the ci multi pipeline

512
00:22:09,280 --> 00:22:15,600
folder where there are three different

513
00:22:12,559 --> 00:22:16,240
jobs that actually trigger the pipeline

514
00:22:15,600 --> 00:22:19,919
of the

515
00:22:16,240 --> 00:22:19,919
other repositories

516
00:22:23,520 --> 00:22:28,960
when we supply the the condition to

517
00:22:26,880 --> 00:22:31,679
to execute these jobs are when you

518
00:22:28,960 --> 00:22:34,720
supply the ci multi-trigger variable

519
00:22:31,679 --> 00:22:35,600
together with the relevant value and in

520
00:22:34,720 --> 00:22:39,039
that way

521
00:22:35,600 --> 00:22:40,960
we can tag different group of tools

522
00:22:39,039 --> 00:22:44,880
in order to trigger their pipelines

523
00:22:40,960 --> 00:22:44,880
together in an efficient way

524
00:22:52,880 --> 00:22:56,000
let's execute the pipeline of the ci

525
00:22:55,280 --> 00:22:58,799
recipes

526
00:22:56,000 --> 00:23:01,280
in order to choose the relevant the

527
00:22:58,799 --> 00:23:01,280
relevant

528
00:23:01,360 --> 00:23:09,840
the relevant pipeline

529
00:23:15,840 --> 00:23:20,159
as you can see we have the ci

530
00:23:17,640 --> 00:23:22,799
multi-trigger

531
00:23:20,159 --> 00:23:23,840
variable here which execute multiple

532
00:23:22,799 --> 00:23:26,720
pipelines

533
00:23:23,840 --> 00:23:28,000
so we want to execute all of them and

534
00:23:26,720 --> 00:23:31,120
they all have the

535
00:23:28,000 --> 00:23:31,760
all terms so we just write all and since

536
00:23:31,120 --> 00:23:33,760
we want to

537
00:23:31,760 --> 00:23:34,960
deploy them to our point of server we

538
00:23:33,760 --> 00:23:39,679
have to provide

539
00:23:34,960 --> 00:23:39,679
its url and also its right key

540
00:23:42,159 --> 00:23:46,720
we'll copy it and enter into the

541
00:23:45,360 --> 00:23:49,520
variables

542
00:23:46,720 --> 00:23:52,159
we can extract the right key from this

543
00:23:49,520 --> 00:23:52,159
green button

544
00:23:52,720 --> 00:24:00,400
don't enter don't enter this

545
00:23:56,880 --> 00:24:05,840
just take the right key now

546
00:24:00,400 --> 00:24:05,840
we can run the pipeline

547
00:24:06,240 --> 00:24:10,000
and see that the

548
00:24:10,400 --> 00:24:19,840
relevant repositories pipelines

549
00:24:13,600 --> 00:24:19,840
were triggered directly from here

550
00:24:20,799 --> 00:24:24,000
we can see that powerup sql was

551
00:24:22,640 --> 00:24:28,000
triggered rubios

552
00:24:24,000 --> 00:24:30,000
and also grody these tools are made from

553
00:24:28,000 --> 00:24:33,840
three different different languages that

554
00:24:30,000 --> 00:24:33,840
we wanted to show you

555
00:24:41,120 --> 00:24:44,559
rubio's passes through the build of

556
00:24:42,640 --> 00:24:46,080
boost case and deploy in the same way we

557
00:24:44,559 --> 00:24:47,520
did we sharped the out check here

558
00:24:46,080 --> 00:24:50,559
because we copied that

559
00:24:47,520 --> 00:24:53,919
power of sql goes through shimera and

560
00:24:50,559 --> 00:25:01,840
deployment and god just go to get built

561
00:24:53,919 --> 00:25:01,840
and being deployed

562
00:25:07,760 --> 00:25:11,360
now we'll wait for the pipelines to

563
00:25:09,919 --> 00:25:14,400
finish in order

564
00:25:11,360 --> 00:25:16,480
to see what happened so

565
00:25:14,400 --> 00:25:17,840
green indicates that everything was done

566
00:25:16,480 --> 00:25:19,760
successfully

567
00:25:17,840 --> 00:25:21,520
let's take a look at the output of the

568
00:25:19,760 --> 00:25:25,919
powerup sql jobs

569
00:25:21,520 --> 00:25:25,919
so we can understand what really

570
00:25:26,840 --> 00:25:29,840
happened

571
00:25:36,880 --> 00:25:40,480
we see that a lot of obfuscation values

572
00:25:39,600 --> 00:25:42,559
here and we see

573
00:25:40,480 --> 00:25:44,080
that it also uploaded the artifact for

574
00:25:42,559 --> 00:25:46,320
the next job

575
00:25:44,080 --> 00:25:48,320
here in the pen drop deploy we'll be

576
00:25:46,320 --> 00:25:50,400
able to see that the job succeeded and

577
00:25:48,320 --> 00:25:52,880
we can see also the response from the

578
00:25:50,400 --> 00:25:52,880
pawn drop

579
00:25:54,000 --> 00:25:58,880
it means that all the files that we just

580
00:25:56,880 --> 00:26:02,240
created all the pipelines should be

581
00:25:58,880 --> 00:26:02,240
right here deployed

582
00:26:05,120 --> 00:26:09,440
let's change the way that shimera is

583
00:26:08,480 --> 00:26:14,080
being

584
00:26:09,440 --> 00:26:14,080
downloaded and take a look at the file

585
00:26:21,600 --> 00:26:26,400
so as you can see all the strings looks

586
00:26:24,400 --> 00:26:29,679
obfuscated and randomized

587
00:26:26,400 --> 00:26:33,679
even the a function's name

588
00:26:29,679 --> 00:26:33,679
so looks very useful

589
00:26:37,200 --> 00:26:41,360
the last thing i wanted to show you is

590
00:26:39,520 --> 00:26:43,919
the docker files

591
00:26:41,360 --> 00:26:44,880
we are actually storing our customized

592
00:26:43,919 --> 00:26:48,000
docker files

593
00:26:44,880 --> 00:26:48,400
within the maintain folder where there

594
00:26:48,000 --> 00:26:51,279
is

595
00:26:48,400 --> 00:26:53,120
a job that that can pick them up and

596
00:26:51,279 --> 00:26:56,159
build build them

597
00:26:53,120 --> 00:26:57,919
on top of another container this is only

598
00:26:56,159 --> 00:27:00,159
supported with linux

599
00:26:57,919 --> 00:27:02,400
and is maintained through a google

600
00:27:00,159 --> 00:27:05,360
project named kaniko

601
00:27:02,400 --> 00:27:06,400
we actually can take this docker file

602
00:27:05,360 --> 00:27:09,440
and build it

603
00:27:06,400 --> 00:27:12,159
through our pipeline managing

604
00:27:09,440 --> 00:27:12,960
all the infrastructure and this

605
00:27:12,159 --> 00:27:15,600
framework

606
00:27:12,960 --> 00:27:15,600
as a code

607
00:27:18,960 --> 00:27:22,399
you can see that we have a special

608
00:27:20,399 --> 00:27:24,399
variable to trigger that kind of

609
00:27:22,399 --> 00:27:26,320
pipeline

610
00:27:24,399 --> 00:27:28,960
if we'll take a look at the ci recipes

611
00:27:26,320 --> 00:27:32,080
pipeline and try to trigger it

612
00:27:28,960 --> 00:27:34,240
we'll be able to provide

613
00:27:32,080 --> 00:27:37,440
the name of the docker files we want to

614
00:27:34,240 --> 00:27:37,440
build and push

615
00:27:39,600 --> 00:27:43,200
docker file build linux is the name of

616
00:27:41,279 --> 00:27:45,679
the variable and now

617
00:27:43,200 --> 00:27:46,240
we will enter the name of the docker

618
00:27:45,679 --> 00:27:48,480
file

619
00:27:46,240 --> 00:27:51,600
the prefix of it that we want to

620
00:27:48,480 --> 00:27:51,600
actually build and push

621
00:27:56,000 --> 00:27:59,760
as you can see a new job was created

622
00:27:58,240 --> 00:28:02,960
named build linux

623
00:27:59,760 --> 00:28:05,279
linux container and this job

624
00:28:02,960 --> 00:28:06,880
is can be found under the ci container

625
00:28:05,279 --> 00:28:09,360
builders

626
00:28:06,880 --> 00:28:11,760
where it actually uses the kaneko

627
00:28:09,360 --> 00:28:11,760
project

628
00:28:14,080 --> 00:28:23,440
eventually it pushes the container

629
00:28:17,919 --> 00:28:23,440
to our private container registry

630
00:28:29,760 --> 00:28:35,600
great so

631
00:28:33,120 --> 00:28:38,240
i hope you enjoyed the demo and after

632
00:28:35,600 --> 00:28:40,240
we've seen all the magic

633
00:28:38,240 --> 00:28:41,679
let's understand what is the

634
00:28:40,240 --> 00:28:44,399
infrastructure

635
00:28:41,679 --> 00:28:46,960
running behind the scenes of this

636
00:28:44,399 --> 00:28:46,960
framework

637
00:28:51,679 --> 00:28:56,559
so we start off having we start off

638
00:28:54,480 --> 00:28:59,200
having the gitlab instance

639
00:28:56,559 --> 00:29:01,520
and this gitlab instance comes with the

640
00:28:59,200 --> 00:29:03,600
built-in ci cd

641
00:29:01,520 --> 00:29:05,279
to execute our jobs we are using

642
00:29:03,600 --> 00:29:07,919
kubernetes cluster

643
00:29:05,279 --> 00:29:09,840
where we have two different node pools

644
00:29:07,919 --> 00:29:13,039
one node pool for executing

645
00:29:09,840 --> 00:29:14,000
linux related jobs and the other one for

646
00:29:13,039 --> 00:29:17,520
executing

647
00:29:14,000 --> 00:29:19,440
windows related jobs in order for the

648
00:29:17,520 --> 00:29:21,039
kubernetes cluster to communicate with

649
00:29:19,440 --> 00:29:23,120
the gitlab instance

650
00:29:21,039 --> 00:29:24,399
gitlab created something called gitlab

651
00:29:23,120 --> 00:29:26,880
runner which is

652
00:29:24,399 --> 00:29:29,520
a helm deployment that you can deploy to

653
00:29:26,880 --> 00:29:31,520
your ribbon to your kubernetes cluster

654
00:29:29,520 --> 00:29:33,360
which will act as a proxy between the

655
00:29:31,520 --> 00:29:34,159
gitlab instance and the kubernetes

656
00:29:33,360 --> 00:29:36,720
cluster

657
00:29:34,159 --> 00:29:37,360
it will receive jobs from the gitlab

658
00:29:36,720 --> 00:29:40,559
instance

659
00:29:37,360 --> 00:29:44,559
and instruct the kubernetes cluster how

660
00:29:40,559 --> 00:29:46,640
to to execute them we also created

661
00:29:44,559 --> 00:29:49,520
another gitlab runner deployment

662
00:29:46,640 --> 00:29:51,520
that responsible for the windows related

663
00:29:49,520 --> 00:29:54,559
jobs

664
00:29:51,520 --> 00:29:57,200
our kubernetes cluster is connected to

665
00:29:54,559 --> 00:29:59,200
our container registry where we are

666
00:29:57,200 --> 00:30:02,320
storing our customized

667
00:29:59,200 --> 00:30:07,120
container containers to use during

668
00:30:02,320 --> 00:30:10,000
the operation and the pipeline execution

669
00:30:07,120 --> 00:30:12,000
now having this framework on-prem can be

670
00:30:10,000 --> 00:30:14,399
nice and great

671
00:30:12,000 --> 00:30:16,080
let's assume that we can also shift it

672
00:30:14,399 --> 00:30:19,120
to the cloud

673
00:30:16,080 --> 00:30:19,919
and using in this example google cloud

674
00:30:19,120 --> 00:30:22,880
resources

675
00:30:19,919 --> 00:30:25,200
in order to host it and in this time we

676
00:30:22,880 --> 00:30:27,520
created the kubernetes engine

677
00:30:25,200 --> 00:30:28,240
together with google container registry

678
00:30:27,520 --> 00:30:31,600
which

679
00:30:28,240 --> 00:30:32,880
communicate perfect where we attached a

680
00:30:31,600 --> 00:30:35,039
service account with the relevant

681
00:30:32,880 --> 00:30:38,240
permissions to push and pull

682
00:30:35,039 --> 00:30:41,200
containers the

683
00:30:38,240 --> 00:30:41,840
kubernetes engine and the gitlab

684
00:30:41,200 --> 00:30:44,000
instance

685
00:30:41,840 --> 00:30:45,279
can communicate communicate internally

686
00:30:44,000 --> 00:30:48,720
because they are sitting

687
00:30:45,279 --> 00:30:51,520
on the same vpc we also added

688
00:30:48,720 --> 00:30:52,240
a google store cloud storage to allow

689
00:30:51,520 --> 00:30:55,360
ourselves

690
00:30:52,240 --> 00:30:59,519
storing some utilities that we will be

691
00:30:55,360 --> 00:31:01,679
we will need during our pipelines

692
00:30:59,519 --> 00:31:04,000
we also created a firewall rule to allow

693
00:31:01,679 --> 00:31:07,279
us operate the framework and use it

694
00:31:04,000 --> 00:31:11,120
and actually enjoy it without

695
00:31:07,279 --> 00:31:13,360
exposing it to the world internet

696
00:31:11,120 --> 00:31:14,559
everything is sitting on a single gcp

697
00:31:13,360 --> 00:31:18,080
project where we can

698
00:31:14,559 --> 00:31:21,519
maintain it in one place

699
00:31:18,080 --> 00:31:26,320
the gitlab then can import tools

700
00:31:21,519 --> 00:31:29,519
from a remote git repositories

701
00:31:26,320 --> 00:31:32,399
and as part of

702
00:31:29,519 --> 00:31:33,679
the scalabs framework we are releasing a

703
00:31:32,399 --> 00:31:36,480
telephone script

704
00:31:33,679 --> 00:31:38,000
that will allow you to deploy the exact

705
00:31:36,480 --> 00:31:40,960
same environment

706
00:31:38,000 --> 00:31:42,799
in your cloud this comes with the

707
00:31:40,960 --> 00:31:46,000
built-in recipes we've just

708
00:31:42,799 --> 00:31:49,279
shown before

709
00:31:46,000 --> 00:31:52,000
all you need is a gcp subscription and

710
00:31:49,279 --> 00:31:52,960
a web browser refer to the project's

711
00:31:52,000 --> 00:31:56,399
repository

712
00:31:52,960 --> 00:31:56,399
and follow the instructions

713
00:31:58,960 --> 00:32:02,880
few words about the cloud costs we can

714
00:32:02,240 --> 00:32:06,320
divide

715
00:32:02,880 --> 00:32:09,039
it to idle and to per job because

716
00:32:06,320 --> 00:32:09,600
we want the framework be a waiting for

717
00:32:09,039 --> 00:32:12,000
us so

718
00:32:09,600 --> 00:32:12,880
when we want to operate it and run the

719
00:32:12,000 --> 00:32:15,679
pipelines

720
00:32:12,880 --> 00:32:17,200
but we're not always continuously

721
00:32:15,679 --> 00:32:20,559
running pipelines

722
00:32:17,200 --> 00:32:23,120
so so there is a need to operate two

723
00:32:20,559 --> 00:32:25,440
instances that are utilizing most of our

724
00:32:23,120 --> 00:32:28,799
credit

725
00:32:25,440 --> 00:32:30,880
also there is a per job credit

726
00:32:28,799 --> 00:32:32,640
that takes out when you previously

727
00:32:30,880 --> 00:32:35,039
provision new nodes

728
00:32:32,640 --> 00:32:35,679
and this is very tricky because you may

729
00:32:35,039 --> 00:32:38,080
provision

730
00:32:35,679 --> 00:32:40,320
one node and create one job which will

731
00:32:38,080 --> 00:32:41,200
translate it into one pod but if you

732
00:32:40,320 --> 00:32:44,240
create

733
00:32:41,200 --> 00:32:46,960
10 jobs simultaneously they will use the

734
00:32:44,240 --> 00:32:46,960
same credit

735
00:32:47,120 --> 00:32:52,080
unless you plan you plan to supply

736
00:32:49,279 --> 00:32:55,120
weaponized tools to the world community

737
00:32:52,080 --> 00:32:58,000
the bottom line is that you have to pay

738
00:32:55,120 --> 00:32:59,039
less than 100 us dollars a month in

739
00:32:58,000 --> 00:33:01,919
order to use

740
00:32:59,039 --> 00:33:01,919
this framework

741
00:33:04,159 --> 00:33:08,880
additional thoughts that came up to my

742
00:33:06,240 --> 00:33:09,440
mind during creating the framework and

743
00:33:08,880 --> 00:33:13,679
also

744
00:33:09,440 --> 00:33:16,720
the this presentation is are that

745
00:33:13,679 --> 00:33:19,679
this can be a community driven framework

746
00:33:16,720 --> 00:33:21,519
we just released the infrastructure the

747
00:33:19,679 --> 00:33:24,080
the code of the infrastructure

748
00:33:21,519 --> 00:33:25,120
and also the ci recipes repository

749
00:33:24,080 --> 00:33:28,000
itself

750
00:33:25,120 --> 00:33:29,279
allowing people to collaborate and share

751
00:33:28,000 --> 00:33:32,640
their techniques

752
00:33:29,279 --> 00:33:35,760
through a through one place where anyone

753
00:33:32,640 --> 00:33:37,679
can enjoy and share

754
00:33:35,760 --> 00:33:38,880
this can be done in the same way people

755
00:33:37,679 --> 00:33:42,559
are sharing today

756
00:33:38,880 --> 00:33:42,559
cobble strike aggressor scripts

757
00:33:43,360 --> 00:33:50,799
there will be another problem

758
00:33:47,440 --> 00:33:52,000
coming up to you after using this

759
00:33:50,799 --> 00:33:54,880
framework because

760
00:33:52,000 --> 00:33:56,640
now you will be able to speeding speed

761
00:33:54,880 --> 00:33:58,960
up the tasks that

762
00:33:56,640 --> 00:33:59,760
you're using you're doing when you

763
00:33:58,960 --> 00:34:02,880
performing

764
00:33:59,760 --> 00:34:03,519
reactive engagements finding yourself

765
00:34:02,880 --> 00:34:06,080
collecting

766
00:34:03,519 --> 00:34:07,200
all the the enumeration reconnaissance a

767
00:34:06,080 --> 00:34:10,399
lot of information

768
00:34:07,200 --> 00:34:11,839
in no time so you find yourself trying

769
00:34:10,399 --> 00:34:15,760
to understand how you

770
00:34:11,839 --> 00:34:15,760
process all this data now

771
00:34:17,200 --> 00:34:24,800
also if your team will really

772
00:34:21,040 --> 00:34:24,800
take take the decision to

773
00:34:24,960 --> 00:34:28,560
use this framework in an efficient way

774
00:34:27,919 --> 00:34:32,079
you may

775
00:34:28,560 --> 00:34:35,839
end up finding an operator executing

776
00:34:32,079 --> 00:34:38,960
a task that bypassed few security

777
00:34:35,839 --> 00:34:42,079
tools security defensive tools

778
00:34:38,960 --> 00:34:45,119
when where they the operator will not

779
00:34:42,079 --> 00:34:48,560
even know how we bypass them

780
00:34:45,119 --> 00:34:49,599
and i'm not into not knowing what you're

781
00:34:48,560 --> 00:34:51,679
doing but

782
00:34:49,599 --> 00:34:52,720
this is the thing that can happen which

783
00:34:51,679 --> 00:34:55,359
may enable

784
00:34:52,720 --> 00:34:56,960
additional people to pers to perform

785
00:34:55,359 --> 00:35:00,640
adversary simulations

786
00:34:56,960 --> 00:35:02,480
and ratings also

787
00:35:00,640 --> 00:35:03,920
i believe that the question about

788
00:35:02,480 --> 00:35:07,119
commanding controls

789
00:35:03,920 --> 00:35:10,240
came up to your mind and we are not

790
00:35:07,119 --> 00:35:12,079
planning on replacing them with the

791
00:35:10,240 --> 00:35:15,680
offensive pipelines but

792
00:35:12,079 --> 00:35:18,480
we do have to use them together because

793
00:35:15,680 --> 00:35:18,960
command controls are very monitored

794
00:35:18,480 --> 00:35:21,760
tools

795
00:35:18,960 --> 00:35:23,440
by the detection and prevention security

796
00:35:21,760 --> 00:35:25,599
tools

797
00:35:23,440 --> 00:35:26,560
and also they are not they are not

798
00:35:25,599 --> 00:35:29,520
getting

799
00:35:26,560 --> 00:35:30,079
enough updates so you may find yourself

800
00:35:29,520 --> 00:35:33,520
using an

801
00:35:30,079 --> 00:35:36,240
old update of some tool and

802
00:35:33,520 --> 00:35:37,680
and trying to figure out how to load a

803
00:35:36,240 --> 00:35:40,640
new tool

804
00:35:37,680 --> 00:35:41,280
now also with the offensive pipelines

805
00:35:40,640 --> 00:35:45,119
you may

806
00:35:41,280 --> 00:35:47,680
find yourself grabbing your bitcoin

807
00:35:45,119 --> 00:35:49,280
agent or grant from your favorite

808
00:35:47,680 --> 00:35:52,160
command control

809
00:35:49,280 --> 00:35:53,119
perform the obfuscation and evasion

810
00:35:52,160 --> 00:35:57,520
techniques

811
00:35:53,119 --> 00:35:58,560
on it send it back to some hosting

812
00:35:57,520 --> 00:36:02,160
server

813
00:35:58,560 --> 00:36:04,880
so we will be able to download and

814
00:36:02,160 --> 00:36:08,320
execute it on the targeted environment

815
00:36:04,880 --> 00:36:08,320
without getting detected

816
00:36:09,520 --> 00:36:13,200
i also listed here the references to the

817
00:36:12,240 --> 00:36:16,640
technologies

818
00:36:13,200 --> 00:36:18,160
that this framework leans on

819
00:36:16,640 --> 00:36:20,160
you can go ahead to extend your

820
00:36:18,160 --> 00:36:26,160
knowledge about every byte and bit

821
00:36:20,160 --> 00:36:28,480
that actually created this framework

822
00:36:26,160 --> 00:36:30,160
i want to thank anyone who took part in

823
00:36:28,480 --> 00:36:32,160
designing this framework and

824
00:36:30,160 --> 00:36:35,040
also for anyone who helped me who helped

825
00:36:32,160 --> 00:36:38,480
me with preparing this presentation

826
00:36:35,040 --> 00:36:41,839
so thank you very much and also

827
00:36:38,480 --> 00:36:44,960
thank you for staying up until now

828
00:36:41,839 --> 00:36:47,760
i hope that that that you

829
00:36:44,960 --> 00:36:51,040
enjoy the talk and consider to adapt

830
00:36:47,760 --> 00:36:53,040
cicd concepts into your ratings

831
00:36:51,040 --> 00:36:54,720
i will be taking your questions

832
00:36:53,040 --> 00:36:59,599
feedbacks and comments

833
00:36:54,720 --> 00:36:59,599
on the discord server see you there bye

834
00:36:59,640 --> 00:37:02,640
bye

