1
00:00:09,840 --> 00:00:11,599
hi there my name is bailey bursick and

2
00:00:11,599 --> 00:00:13,120
i'm here with my co-worker mark

3
00:00:13,120 --> 00:00:15,440
marzinski and we're from the microsoft

4
00:00:15,440 --> 00:00:16,720
identity product group

5
00:00:16,720 --> 00:00:19,039
where we work on active directory active

6
00:00:19,039 --> 00:00:20,880
directory federation services

7
00:00:20,880 --> 00:00:23,519
and azure active directory and our team

8
00:00:23,519 --> 00:00:25,279
is one that works with customers who are

9
00:00:25,279 --> 00:00:27,119
deploying azure 80 and we take those

10
00:00:27,119 --> 00:00:28,560
learnings and feedback from those

11
00:00:28,560 --> 00:00:30,240
interactions and inject them back into

12
00:00:30,240 --> 00:00:32,079
the product to make it better

13
00:00:32,079 --> 00:00:33,520
and so today we're going to be talking

14
00:00:33,520 --> 00:00:35,280
about modern authentication for the

15
00:00:35,280 --> 00:00:36,480
security admin

16
00:00:36,480 --> 00:00:38,800
and since we work mostly with identity

17
00:00:38,800 --> 00:00:40,320
people during our day-to-day

18
00:00:40,320 --> 00:00:41,920
we have some conversations with the

19
00:00:41,920 --> 00:00:43,600
security folks and we've noticed that a

20
00:00:43,600 --> 00:00:45,280
lot of security folks don't have the

21
00:00:45,280 --> 00:00:46,960
same identity background

22
00:00:46,960 --> 00:00:48,640
and haven't gotten the opportunity to

23
00:00:48,640 --> 00:00:50,559
dig into some of these uh modern auth

24
00:00:50,559 --> 00:00:51,600
protocols so

25
00:00:51,600 --> 00:00:53,120
we're really excited to share some of

26
00:00:53,120 --> 00:00:54,719
these with you today

27
00:00:54,719 --> 00:00:56,640
and so to kick it off before we get into

28
00:00:56,640 --> 00:00:59,120
what saml oauth2 and openid connect are

29
00:00:59,120 --> 00:00:59,920
and then share

30
00:00:59,920 --> 00:01:01,840
an attack that we've been seeing on the

31
00:01:01,840 --> 00:01:03,760
rise we're going to first talk about

32
00:01:03,760 --> 00:01:05,760
why you would even want to move to

33
00:01:05,760 --> 00:01:07,920
modern auth in the first place

34
00:01:07,920 --> 00:01:10,000
and so when we're referring to modern

35
00:01:10,000 --> 00:01:11,280
auth we're referring to

36
00:01:11,280 --> 00:01:13,760
what's um happened after its predecessor

37
00:01:13,760 --> 00:01:15,759
with basic or legacy auth which

38
00:01:15,759 --> 00:01:17,759
if you're familiar with basic auth

39
00:01:17,759 --> 00:01:18,960
essentially you're

40
00:01:18,960 --> 00:01:21,600
not able to allow for users to mfa so

41
00:01:21,600 --> 00:01:23,439
with modern auth you can actually

42
00:01:23,439 --> 00:01:25,439
have mfa instead of just relying on the

43
00:01:25,439 --> 00:01:27,439
username and password

44
00:01:27,439 --> 00:01:29,280
there's also more tools to protect those

45
00:01:29,280 --> 00:01:31,520
resources so including some monitoring

46
00:01:31,520 --> 00:01:32,479
there

47
00:01:32,479 --> 00:01:34,320
i have a few examples up on the slide

48
00:01:34,320 --> 00:01:37,040
but in terms of a real world example

49
00:01:37,040 --> 00:01:39,840
if you have your entire fleet is windows

50
00:01:39,840 --> 00:01:40,320
10

51
00:01:40,320 --> 00:01:42,560
for example but then an attacker is

52
00:01:42,560 --> 00:01:43,759
trying to

53
00:01:43,759 --> 00:01:46,320
use a windows 7 device and it's trying

54
00:01:46,320 --> 00:01:48,000
to slip through the cracks there

55
00:01:48,000 --> 00:01:49,520
you're going to have some additional

56
00:01:49,520 --> 00:01:51,439
monitoring there to determine that

57
00:01:51,439 --> 00:01:54,399
that's irregular or abnormal and so that

58
00:01:54,399 --> 00:01:56,079
enhanced monitoring is going to be there

59
00:01:56,079 --> 00:01:58,159
with those modern auth capabilities

60
00:01:58,159 --> 00:01:59,759
and the last big selling point for

61
00:01:59,759 --> 00:02:01,680
modern auth is that those user

62
00:02:01,680 --> 00:02:02,399
credentials

63
00:02:02,399 --> 00:02:04,320
um are not exposed to the client and as

64
00:02:04,320 --> 00:02:05,920
we walk through a few of the flows today

65
00:02:05,920 --> 00:02:08,800
you'll see what we mean by that

66
00:02:08,800 --> 00:02:10,800
and so to get into our first flow with

67
00:02:10,800 --> 00:02:12,239
saml so

68
00:02:12,239 --> 00:02:14,560
saml stands for security assertion

69
00:02:14,560 --> 00:02:16,640
markup language and it's essentially an

70
00:02:16,640 --> 00:02:18,959
xml based authentication standard for

71
00:02:18,959 --> 00:02:20,000
ssowing to

72
00:02:20,000 --> 00:02:22,640
web-based apps and this one of the three

73
00:02:22,640 --> 00:02:25,040
has been around for a while so there's a

74
00:02:25,040 --> 00:02:25,599
lot of

75
00:02:25,599 --> 00:02:27,440
web apps that already have it and since

76
00:02:27,440 --> 00:02:29,040
there is a lot of libraries that have

77
00:02:29,040 --> 00:02:29,440
been

78
00:02:29,440 --> 00:02:31,280
um older than the two other protocols

79
00:02:31,280 --> 00:02:32,560
we're going to share with you

80
00:02:32,560 --> 00:02:34,400
it's easier for devs to implement so

81
00:02:34,400 --> 00:02:36,000
there's also no server to server

82
00:02:36,000 --> 00:02:39,920
comms with xaml and so in addition to

83
00:02:39,920 --> 00:02:42,239
it being around for a while if you have

84
00:02:42,239 --> 00:02:43,280
um

85
00:02:43,280 --> 00:02:45,599
certain older on-prem idps they may not

86
00:02:45,599 --> 00:02:48,000
support openid connect or oauth

87
00:02:48,000 --> 00:02:49,599
and also it would prevent you from

88
00:02:49,599 --> 00:02:51,599
having the additional overhead of having

89
00:02:51,599 --> 00:02:54,160
customers consenting to an application

90
00:02:54,160 --> 00:02:55,519
and so you'll see that later with the

91
00:02:55,519 --> 00:02:57,280
other flows but if this sounds like

92
00:02:57,280 --> 00:02:58,879
something you'd be looking for then a

93
00:02:58,879 --> 00:03:00,879
cmo flow may be correct for your

94
00:03:00,879 --> 00:03:03,200
particular use cases

95
00:03:03,200 --> 00:03:04,560
so to walk through what that would look

96
00:03:04,560 --> 00:03:06,959
like and as an example i have azure

97
00:03:06,959 --> 00:03:09,440
active directory as the idp since we

98
00:03:09,440 --> 00:03:11,599
come from that product group but feel

99
00:03:11,599 --> 00:03:13,599
free to mentally substitute that for

100
00:03:13,599 --> 00:03:15,760
octa or google or whatever you use as

101
00:03:15,760 --> 00:03:16,959
your identity

102
00:03:16,959 --> 00:03:19,599
as your idp and so in this example right

103
00:03:19,599 --> 00:03:20,239
here

104
00:03:20,239 --> 00:03:22,720
we have an end user who's trying to

105
00:03:22,720 --> 00:03:24,879
access a web app via their browser

106
00:03:24,879 --> 00:03:26,159
and then also it's important to note

107
00:03:26,159 --> 00:03:27,840
that there's a federated trust between

108
00:03:27,840 --> 00:03:28,560
azure id

109
00:03:28,560 --> 00:03:31,440
and that particular web app so first in

110
00:03:31,440 --> 00:03:33,440
this flow we're going to have the user

111
00:03:33,440 --> 00:03:35,599
open a browser and access that

112
00:03:35,599 --> 00:03:37,440
particular web app

113
00:03:37,440 --> 00:03:39,440
and then after that happens then the web

114
00:03:39,440 --> 00:03:40,959
app is going to redirect

115
00:03:40,959 --> 00:03:43,599
the saml authorization request back over

116
00:03:43,599 --> 00:03:47,200
to the browser

117
00:03:47,200 --> 00:03:48,959
once that happens the browser is going

118
00:03:48,959 --> 00:03:50,879
to relay that information

119
00:03:50,879 --> 00:03:54,640
over to azure ad

120
00:03:54,879 --> 00:03:56,239
and then that user is going to get

121
00:03:56,239 --> 00:03:58,159
authenticated within azure id

122
00:03:58,159 --> 00:03:59,840
and important as i mentioned earlier

123
00:03:59,840 --> 00:04:01,599
that an advantage of modern auth is that

124
00:04:01,599 --> 00:04:02,879
those user credits are not

125
00:04:02,879 --> 00:04:05,280
shared just a cml token is going to be

126
00:04:05,280 --> 00:04:06,879
sent back to the browser so

127
00:04:06,879 --> 00:04:08,560
the browser isn't going to get the

128
00:04:08,560 --> 00:04:10,560
user's username and password they're

129
00:04:10,560 --> 00:04:11,920
just going to get like a

130
00:04:11,920 --> 00:04:14,560
yes this user is good to go and so those

131
00:04:14,560 --> 00:04:16,079
tokens are going to be sent back to the

132
00:04:16,079 --> 00:04:17,358
browser

133
00:04:17,358 --> 00:04:19,120
and then that saml token is going to be

134
00:04:19,120 --> 00:04:20,720
redirected from the browser

135
00:04:20,720 --> 00:04:23,680
to that web app the web app is then

136
00:04:23,680 --> 00:04:25,759
going to validate that saml response and

137
00:04:25,759 --> 00:04:26,800
token

138
00:04:26,800 --> 00:04:28,400
and then it's going to return that

139
00:04:28,400 --> 00:04:30,720
requested web page to the user

140
00:04:30,720 --> 00:04:34,160
so again you know with those credentials

141
00:04:34,160 --> 00:04:36,240
not being sent directly to the web app

142
00:04:36,240 --> 00:04:38,080
if that web app for whatever reason got

143
00:04:38,080 --> 00:04:40,800
compromised um the username and password

144
00:04:40,800 --> 00:04:42,000
of that particular user

145
00:04:42,000 --> 00:04:44,639
would not be compromised so important to

146
00:04:44,639 --> 00:04:46,000
note

147
00:04:46,000 --> 00:04:48,720
and what i just showed you was a service

148
00:04:48,720 --> 00:04:50,800
provider initiated saml flow so you

149
00:04:50,800 --> 00:04:51,759
might hear the term

150
00:04:51,759 --> 00:04:53,840
service provider initiated or identity

151
00:04:53,840 --> 00:04:55,120
provider initiated

152
00:04:55,120 --> 00:04:57,600
when we're talking about cml flows um

153
00:04:57,600 --> 00:04:58,479
and so

154
00:04:58,479 --> 00:05:00,000
to give you an example of what an

155
00:05:00,000 --> 00:05:02,080
identity provider initiated flow may

156
00:05:02,080 --> 00:05:03,120
look like

157
00:05:03,120 --> 00:05:05,440
within azure id that may be like

158
00:05:05,440 --> 00:05:07,840
starting from the my apps page or if you

159
00:05:07,840 --> 00:05:09,600
use octa that might be starting from

160
00:05:09,600 --> 00:05:11,520
their end user dashboard

161
00:05:11,520 --> 00:05:13,280
but essentially it's just beginning at a

162
00:05:13,280 --> 00:05:15,440
different point in that sample flow

163
00:05:15,440 --> 00:05:17,039
and so other than that you know from

164
00:05:17,039 --> 00:05:18,960
your perspective as a security admin you

165
00:05:18,960 --> 00:05:20,720
may not need to go much more deeper into

166
00:05:20,720 --> 00:05:22,400
this particular one

167
00:05:22,400 --> 00:05:25,039
but as a defender you know what do you

168
00:05:25,039 --> 00:05:26,639
need to look for and what should you

169
00:05:26,639 --> 00:05:29,199
care about with respect to cml flows

170
00:05:29,199 --> 00:05:30,960
so first of all the biggest one that i

171
00:05:30,960 --> 00:05:32,960
think that has been on everybody's mind

172
00:05:32,960 --> 00:05:35,199
is gold and saml attacks so since solar

173
00:05:35,199 --> 00:05:36,160
gate happened

174
00:05:36,160 --> 00:05:38,080
this has been much more top of mind for

175
00:05:38,080 --> 00:05:39,759
a lot of customers that we've spoken

176
00:05:39,759 --> 00:05:40,320
with

177
00:05:40,320 --> 00:05:43,360
and so as a defender you know it's

178
00:05:43,360 --> 00:05:44,800
really important to ensure

179
00:05:44,800 --> 00:05:47,680
that those bad actors aren't able to

180
00:05:47,680 --> 00:05:48,560
compromise

181
00:05:48,560 --> 00:05:50,080
those different certificates so what

182
00:05:50,080 --> 00:05:52,160
happens in a golden samuel attack bad

183
00:05:52,160 --> 00:05:53,360
actor compromises

184
00:05:53,360 --> 00:05:55,039
the samuel assertion that you saw in

185
00:05:55,039 --> 00:05:57,039
that previous flow and then is able to

186
00:05:57,039 --> 00:05:59,680
forge those cml requests so essentially

187
00:05:59,680 --> 00:06:01,440
then they're able to sso into any

188
00:06:01,440 --> 00:06:03,039
service as any user

189
00:06:03,039 --> 00:06:06,240
which is particularly scary some other

190
00:06:06,240 --> 00:06:07,840
things that you may want to look out for

191
00:06:07,840 --> 00:06:08,880
is defenders

192
00:06:08,880 --> 00:06:11,680
the assertion consumer service url also

193
00:06:11,680 --> 00:06:13,120
called the acs url

194
00:06:13,120 --> 00:06:15,039
you may hear it referred to as the reply

195
00:06:15,039 --> 00:06:17,919
url which is required for some apps

196
00:06:17,919 --> 00:06:21,280
that is what uh routes the user to the

197
00:06:21,280 --> 00:06:22,880
app that they're supposed to go to so if

198
00:06:22,880 --> 00:06:23,360
this is

199
00:06:23,360 --> 00:06:25,280
compromised then a bad actor could be

200
00:06:25,280 --> 00:06:28,000
routing your end user to a malicious app

201
00:06:28,000 --> 00:06:30,880
and so it's important that um that's

202
00:06:30,880 --> 00:06:31,840
validated that

203
00:06:31,840 --> 00:06:33,199
you know that hasn't been changing and

204
00:06:33,199 --> 00:06:34,800
on the next slide i'll go through some

205
00:06:34,800 --> 00:06:36,400
ways that you could reduce your risk

206
00:06:36,400 --> 00:06:38,720
of these uh different things to look out

207
00:06:38,720 --> 00:06:39,520
for

208
00:06:39,520 --> 00:06:41,280
so the third thing that we've noticed is

209
00:06:41,280 --> 00:06:42,720
that if the sample log

210
00:06:42,720 --> 00:06:46,000
out rule is too complicated so um

211
00:06:46,000 --> 00:06:48,240
if the log out rule is too complicated

212
00:06:48,240 --> 00:06:50,479
the user may not be successfully logged

213
00:06:50,479 --> 00:06:50,960
out

214
00:06:50,960 --> 00:06:52,479
and so you could imagine that if the

215
00:06:52,479 --> 00:06:54,319
user is on a shared machine or a shared

216
00:06:54,319 --> 00:06:54,960
device

217
00:06:54,960 --> 00:06:56,800
then the next user who would come up to

218
00:06:56,800 --> 00:06:58,000
that or the next

219
00:06:58,000 --> 00:06:59,199
person would be able to have that

220
00:06:59,199 --> 00:07:01,360
previous user's access

221
00:07:01,360 --> 00:07:02,560
and then the last thing that we've

222
00:07:02,560 --> 00:07:04,160
noticed that you may want to take note

223
00:07:04,160 --> 00:07:06,080
of is token monitoring so

224
00:07:06,080 --> 00:07:07,840
swapping those sample tokens for session

225
00:07:07,840 --> 00:07:09,360
tokens and you can

226
00:07:09,360 --> 00:07:11,280
reduce your risk of that by ensuring

227
00:07:11,280 --> 00:07:13,440
there's some sort of inactivity timeout

228
00:07:13,440 --> 00:07:16,639
or a maximum token lifetime to reduce

229
00:07:16,639 --> 00:07:18,639
the possibility of those types of

230
00:07:18,639 --> 00:07:20,639
attacks and just monitoring those tokens

231
00:07:20,639 --> 00:07:22,240
in general it's going to be a great best

232
00:07:22,240 --> 00:07:23,599
practice

233
00:07:23,599 --> 00:07:25,039
and so overall with these different

234
00:07:25,039 --> 00:07:26,880
things that we've seen what can you do

235
00:07:26,880 --> 00:07:29,280
so in case of something like gold and

236
00:07:29,280 --> 00:07:30,720
saml attack

237
00:07:30,720 --> 00:07:32,960
protecting your idps like you protect

238
00:07:32,960 --> 00:07:34,800
your domain controllers is really

239
00:07:34,800 --> 00:07:35,680
important

240
00:07:35,680 --> 00:07:37,680
because if they can get a hold of or if

241
00:07:37,680 --> 00:07:40,000
a bad actor can get a hold of

242
00:07:40,000 --> 00:07:42,240
your idp then they can issue claims as

243
00:07:42,240 --> 00:07:45,039
absolutely anybody which is particularly

244
00:07:45,039 --> 00:07:45,919
scary

245
00:07:45,919 --> 00:07:47,360
the next one is to protect your

246
00:07:47,360 --> 00:07:50,080
certificate so use good cert hygiene

247
00:07:50,080 --> 00:07:53,360
use an hsm monitor for any changes any

248
00:07:53,360 --> 00:07:55,440
configuration changes and any addition

249
00:07:55,440 --> 00:07:58,960
of certificates and if this is you know

250
00:07:58,960 --> 00:08:00,720
a lot that you have here i want to let

251
00:08:00,720 --> 00:08:02,160
you know that we have you know some

252
00:08:02,160 --> 00:08:03,280
updated guidance

253
00:08:03,280 --> 00:08:06,160
uh our azure 80 secops guide so if you

254
00:08:06,160 --> 00:08:08,960
go to aka dot ms slash azure adsec ops

255
00:08:08,960 --> 00:08:10,879
you're going to see a guide that

256
00:08:10,879 --> 00:08:12,400
mark and myself contributed to but

257
00:08:12,400 --> 00:08:14,479
several other folks within the identity

258
00:08:14,479 --> 00:08:16,240
orig have written section have written

259
00:08:16,240 --> 00:08:17,360
sections on

260
00:08:17,360 --> 00:08:19,280
where we go through what to monitor what

261
00:08:19,280 --> 00:08:21,759
to look for and certain risk levels to

262
00:08:21,759 --> 00:08:23,680
be aware of with different areas

263
00:08:23,680 --> 00:08:27,039
in azure id we cover everything from uh

264
00:08:27,039 --> 00:08:29,759
apps to pim to other things but you will

265
00:08:29,759 --> 00:08:31,440
see some related content

266
00:08:31,440 --> 00:08:34,479
to those particular cmo flows so just

267
00:08:34,479 --> 00:08:35,679
worth noting

268
00:08:35,679 --> 00:08:36,799
and with that i'm going to hand it off

269
00:08:36,799 --> 00:08:38,719
to mark to talk about two of our other

270
00:08:38,719 --> 00:08:40,159
flows today

271
00:08:40,159 --> 00:08:42,958
all right thanks bailey the next one

272
00:08:42,958 --> 00:08:45,519
we're gonna talk about here is oauth 2

273
00:08:45,519 --> 00:08:47,680
and before we get into the details uh

274
00:08:47,680 --> 00:08:49,120
bailey and i found this tweet that we

275
00:08:49,120 --> 00:08:49,920
thought

276
00:08:49,920 --> 00:08:51,600
really landed a message home that we

277
00:08:51,600 --> 00:08:53,200
wanted to make sure landed with this

278
00:08:53,200 --> 00:08:54,880
audience so i'll just read it out here

279
00:08:54,880 --> 00:08:55,519
but

280
00:08:55,519 --> 00:08:57,680
how do developers mess up oauth2 you

281
00:08:57,680 --> 00:08:59,600
only need to understand the oauth

282
00:08:59,600 --> 00:09:03,200
oidc jwt which is json web token

283
00:09:03,200 --> 00:09:06,560
jwks standards nuances of http redirects

284
00:09:06,560 --> 00:09:09,920
nuances of rsa versus ecd essay remember

285
00:09:09,920 --> 00:09:10,800
to validate

286
00:09:10,800 --> 00:09:12,560
the json web token is signed using an

287
00:09:12,560 --> 00:09:13,920
expected algorithm

288
00:09:13,920 --> 00:09:16,080
check the expiration to have a chance of

289
00:09:16,080 --> 00:09:17,440
getting it right

290
00:09:17,440 --> 00:09:19,279
so this um twitter user here littlejoe

291
00:09:19,279 --> 00:09:21,360
tables um there is not

292
00:09:21,360 --> 00:09:24,080
wrong there is a lot going on in these

293
00:09:24,080 --> 00:09:25,839
modern authentication protocols

294
00:09:25,839 --> 00:09:27,279
and one of the takeaways that we wanted

295
00:09:27,279 --> 00:09:28,880
to make sure this audience

296
00:09:28,880 --> 00:09:31,279
uh had got was that if your developers

297
00:09:31,279 --> 00:09:32,480
are starting to move

298
00:09:32,480 --> 00:09:35,120
to these modern authentication protocols

299
00:09:35,120 --> 00:09:36,560
they should not be trying to

300
00:09:36,560 --> 00:09:38,560
roll their own implementation of oauth

301
00:09:38,560 --> 00:09:40,080
and open id connect

302
00:09:40,080 --> 00:09:41,839
there's a lot of things to keep track of

303
00:09:41,839 --> 00:09:43,519
here um they really need to use a

304
00:09:43,519 --> 00:09:45,519
library because well first of all

305
00:09:45,519 --> 00:09:46,880
it's a waste of their time to like write

306
00:09:46,880 --> 00:09:48,000
their own implementation when they could

307
00:09:48,000 --> 00:09:49,040
use a library but

308
00:09:49,040 --> 00:09:50,560
if they don't get a lot of these things

309
00:09:50,560 --> 00:09:53,200
correctly it really can lead to

310
00:09:53,200 --> 00:09:55,120
some drastic security mistakes and

311
00:09:55,120 --> 00:09:56,160
things like that so we want to make sure

312
00:09:56,160 --> 00:09:57,360
we're using libraries and we'll cover

313
00:09:57,360 --> 00:09:58,959
some of that here in a little bit but

314
00:09:58,959 --> 00:10:02,320
um hopefully as we talk through this

315
00:10:02,320 --> 00:10:04,160
rest of these sections here this whole

316
00:10:04,160 --> 00:10:05,760
thing this like word soup that littlejoe

317
00:10:05,760 --> 00:10:06,880
tables had here which is

318
00:10:06,880 --> 00:10:08,560
which is totally accurate um will start

319
00:10:08,560 --> 00:10:10,000
to actually make a little bit more sense

320
00:10:10,000 --> 00:10:10,959
so let's dig into

321
00:10:10,959 --> 00:10:13,839
here uh what we mean by oauth 2. so if

322
00:10:13,839 --> 00:10:15,600
you haven't heard of oauth before

323
00:10:15,600 --> 00:10:18,880
oauth is an authorization framework so

324
00:10:18,880 --> 00:10:20,720
it's not about authentication it's about

325
00:10:20,720 --> 00:10:22,560
authorization and it's really just a

326
00:10:22,560 --> 00:10:24,480
delegation protocol you may have seen it

327
00:10:24,480 --> 00:10:25,760
phrased as

328
00:10:25,760 --> 00:10:27,920
getting the right of access from one

329
00:10:27,920 --> 00:10:29,200
component of a system

330
00:10:29,200 --> 00:10:31,440
to another so that example on the right

331
00:10:31,440 --> 00:10:33,839
here is what the oauth consent dialog

332
00:10:33,839 --> 00:10:35,200
box looks like from an azure id

333
00:10:35,200 --> 00:10:36,800
perspective so here we can see

334
00:10:36,800 --> 00:10:38,160
that there's an application called

335
00:10:38,160 --> 00:10:40,079
contoso test app and it's

336
00:10:40,079 --> 00:10:42,079
asking for the ability for the user to

337
00:10:42,079 --> 00:10:44,320
read that user's contacts calendar and

338
00:10:44,320 --> 00:10:46,560
profile and um if you haven't used azure

339
00:10:46,560 --> 00:10:47,839
id that's okay you've probably seen this

340
00:10:47,839 --> 00:10:49,040
on different other

341
00:10:49,040 --> 00:10:51,040
web properties and if you haven't seen

342
00:10:51,040 --> 00:10:52,320
that at all i'm sure you've probably

343
00:10:52,320 --> 00:10:54,240
seen this on your mobile phone

344
00:10:54,240 --> 00:10:55,519
when you install an application right

345
00:10:55,519 --> 00:10:56,880
and the application might be asking for

346
00:10:56,880 --> 00:10:57,839
the ability to

347
00:10:57,839 --> 00:10:59,600
maybe read your contacts you access your

348
00:10:59,600 --> 00:11:00,880
pictures or access your counter

349
00:11:00,880 --> 00:11:03,200
very very similar type of thing that you

350
00:11:03,200 --> 00:11:04,399
probably experienced on your mobile

351
00:11:04,399 --> 00:11:05,040
phone

352
00:11:05,040 --> 00:11:07,839
now oauth is built to leverage http and

353
00:11:07,839 --> 00:11:09,839
it uses tokens and scopes to kind of

354
00:11:09,839 --> 00:11:10,720
communicate this

355
00:11:10,720 --> 00:11:12,000
information so let's take a look at a

356
00:11:12,000 --> 00:11:14,079
little bit of the components here of

357
00:11:14,079 --> 00:11:15,120
oauth so

358
00:11:15,120 --> 00:11:18,560
if you take a look at the oauth um rfc

359
00:11:18,560 --> 00:11:20,560
you're going to see four key components

360
00:11:20,560 --> 00:11:22,000
that's the resource owner

361
00:11:22,000 --> 00:11:24,079
it's the protected resource the client

362
00:11:24,079 --> 00:11:25,519
and the authorization server and this

363
00:11:25,519 --> 00:11:26,079
kind of

364
00:11:26,079 --> 00:11:27,279
seems a little weird it's not used to

365
00:11:27,279 --> 00:11:29,360
what we're kind of looking at but as we

366
00:11:29,360 --> 00:11:30,720
talk through this and then we have some

367
00:11:30,720 --> 00:11:32,320
slides to kind of lay this out

368
00:11:32,320 --> 00:11:34,399
visually from a sample um hopefully this

369
00:11:34,399 --> 00:11:35,519
will start to make a little bit more

370
00:11:35,519 --> 00:11:37,040
sense for you but the first one here

371
00:11:37,040 --> 00:11:39,360
the resource owner this is just the

372
00:11:39,360 --> 00:11:40,079
person

373
00:11:40,079 --> 00:11:42,079
and they're going to be at a browser and

374
00:11:42,079 --> 00:11:43,519
we have browser and quotes here because

375
00:11:43,519 --> 00:11:44,880
it doesn't have to be

376
00:11:44,880 --> 00:11:47,120
like edge or chrome or safari it could

377
00:11:47,120 --> 00:11:48,240
also be like a

378
00:11:48,240 --> 00:11:49,600
mini web browser inside of an

379
00:11:49,600 --> 00:11:51,040
application or something like that but

380
00:11:51,040 --> 00:11:52,079
they're going to be some sort of web

381
00:11:52,079 --> 00:11:52,880
flow

382
00:11:52,880 --> 00:11:56,079
and this owner resource owner or user

383
00:11:56,079 --> 00:11:58,399
has access to an api and they have the

384
00:11:58,399 --> 00:12:00,399
ability to delegate that access

385
00:12:00,399 --> 00:12:02,079
to that api and what they're really

386
00:12:02,079 --> 00:12:04,399
delegating access to is that protected

387
00:12:04,399 --> 00:12:06,240
resource which is the next component

388
00:12:06,240 --> 00:12:07,920
this is usually going to be a web api

389
00:12:07,920 --> 00:12:09,839
and this is the thing the resource owner

390
00:12:09,839 --> 00:12:10,160
has

391
00:12:10,160 --> 00:12:12,320
access to so in that previous slide you

392
00:12:12,320 --> 00:12:14,000
saw that the protected web api that i

393
00:12:14,000 --> 00:12:15,040
was being asked to

394
00:12:15,040 --> 00:12:17,200
get access to was the ability to read

395
00:12:17,200 --> 00:12:18,800
the calendar and contact so we're trying

396
00:12:18,800 --> 00:12:20,800
to get to that protected resource

397
00:12:20,800 --> 00:12:21,920
the thing that's trying to get to that

398
00:12:21,920 --> 00:12:24,480
protected resource is the client

399
00:12:24,480 --> 00:12:26,720
now this isn't client like has to be a

400
00:12:26,720 --> 00:12:28,160
thick client like on a desktop or

401
00:12:28,160 --> 00:12:29,440
anything it could be a web app

402
00:12:29,440 --> 00:12:31,040
but this is really going to be that

403
00:12:31,040 --> 00:12:33,279
piece of software that is accessing that

404
00:12:33,279 --> 00:12:34,560
protected resource

405
00:12:34,560 --> 00:12:36,959
on behalf of that resource owner so that

406
00:12:36,959 --> 00:12:38,000
previous example

407
00:12:38,000 --> 00:12:40,800
that was the contoso contoso test app

408
00:12:40,800 --> 00:12:42,399
that contoso test app is going to

409
00:12:42,399 --> 00:12:43,360
consume

410
00:12:43,360 --> 00:12:44,880
this protected resource it's going to

411
00:12:44,880 --> 00:12:47,200
consume that web api and the way it's

412
00:12:47,200 --> 00:12:48,000
going to do that

413
00:12:48,000 --> 00:12:49,120
is it's going to do that through

414
00:12:49,120 --> 00:12:50,880
something called access tokens and it's

415
00:12:50,880 --> 00:12:52,320
going to get an access token

416
00:12:52,320 --> 00:12:54,480
from the authorization server and this

417
00:12:54,480 --> 00:12:57,120
is the per trusted protected resource

418
00:12:57,120 --> 00:12:58,720
that's going to issue access tokens to

419
00:12:58,720 --> 00:13:00,880
the client that the protected resource

420
00:13:00,880 --> 00:13:03,200
sorry this is the authorization service

421
00:13:03,200 --> 00:13:04,959
trusted by the protected resource

422
00:13:04,959 --> 00:13:06,320
it's going to issue those access tokens

423
00:13:06,320 --> 00:13:07,839
to the client that client is going to

424
00:13:07,839 --> 00:13:10,000
take those from the authorization server

425
00:13:10,000 --> 00:13:12,000
and take those to the protected resource

426
00:13:12,000 --> 00:13:14,240
so one of the key things to learn here

427
00:13:14,240 --> 00:13:16,720
of all these four components is that the

428
00:13:16,720 --> 00:13:17,440
user

429
00:13:17,440 --> 00:13:19,680
never is exposing their credentials to

430
00:13:19,680 --> 00:13:20,560
the client

431
00:13:20,560 --> 00:13:21,680
they're only going to expose those

432
00:13:21,680 --> 00:13:23,279
things to the authorization server when

433
00:13:23,279 --> 00:13:24,800
they do authentication there so this is

434
00:13:24,800 --> 00:13:26,160
one of those patterns that bailey talked

435
00:13:26,160 --> 00:13:26,639
about

436
00:13:26,639 --> 00:13:27,600
why i want to move to modern

437
00:13:27,600 --> 00:13:28,720
authentication it's better from a

438
00:13:28,720 --> 00:13:30,480
security perspective we're not exposing

439
00:13:30,480 --> 00:13:31,760
those users credentials

440
00:13:31,760 --> 00:13:34,320
to that client piece of software okay so

441
00:13:34,320 --> 00:13:35,680
let's take a look at this from like an

442
00:13:35,680 --> 00:13:37,200
example kind of lay this out a little

443
00:13:37,200 --> 00:13:38,000
bit so

444
00:13:38,000 --> 00:13:40,000
um very similar to bailey's diagram here

445
00:13:40,000 --> 00:13:41,040
we have our

446
00:13:41,040 --> 00:13:42,800
user in the lower left that's the

447
00:13:42,800 --> 00:13:44,160
resource owner uh

448
00:13:44,160 --> 00:13:47,199
by the actual oauth rfc and that user is

449
00:13:47,199 --> 00:13:48,560
using some sort of application

450
00:13:48,560 --> 00:13:50,399
that's going to be the client and that

451
00:13:50,399 --> 00:13:52,240
client is going to want to access

452
00:13:52,240 --> 00:13:54,320
some sort of protected resource in our

453
00:13:54,320 --> 00:13:55,600
case here that's going to be the

454
00:13:55,600 --> 00:13:57,360
microsoft graph right that wanted to be

455
00:13:57,360 --> 00:13:58,079
able to read

456
00:13:58,079 --> 00:13:59,920
about that user's contacts and calendars

457
00:13:59,920 --> 00:14:01,360
and profile it's going to be using the

458
00:14:01,360 --> 00:14:02,079
microsoft

459
00:14:02,079 --> 00:14:03,519
graph and the way it's going to do that

460
00:14:03,519 --> 00:14:04,959
is it's going to need to talk to the

461
00:14:04,959 --> 00:14:06,880
authorization server to get that access

462
00:14:06,880 --> 00:14:07,440
token

463
00:14:07,440 --> 00:14:09,519
in our case here that is azure active

464
00:14:09,519 --> 00:14:11,600
directory and if everything works well

465
00:14:11,600 --> 00:14:13,920
right like it's supposed to that client

466
00:14:13,920 --> 00:14:14,639
is going to get

467
00:14:14,639 --> 00:14:16,480
an access token which will show up here

468
00:14:16,480 --> 00:14:17,839
on the lower left

469
00:14:17,839 --> 00:14:19,199
and that client is going to take that

470
00:14:19,199 --> 00:14:21,040
access token and it's going to

471
00:14:21,040 --> 00:14:22,639
give it to that protected resource so

472
00:14:22,639 --> 00:14:24,399
it's able to access the data it wants to

473
00:14:24,399 --> 00:14:25,040
access so

474
00:14:25,040 --> 00:14:26,880
let's take a look inside what's inside

475
00:14:26,880 --> 00:14:30,000
this access token so this access token

476
00:14:30,000 --> 00:14:32,720
is frequently called a bearer token or

477
00:14:32,720 --> 00:14:34,000
if you're actually reading the

478
00:14:34,000 --> 00:14:37,440
uh oauth rfc it's just called a token

479
00:14:37,440 --> 00:14:38,480
and the reason it's called that is

480
00:14:38,480 --> 00:14:39,920
because whoever has that token right

481
00:14:39,920 --> 00:14:41,680
whoever bears that token whoever carries

482
00:14:41,680 --> 00:14:42,639
that token

483
00:14:42,639 --> 00:14:44,480
has the right to use it so we want to

484
00:14:44,480 --> 00:14:46,399
make sure we're protecting those tokens

485
00:14:46,399 --> 00:14:47,680
as much as we can we want to make sure

486
00:14:47,680 --> 00:14:50,639
we're using https wherever possible

487
00:14:50,639 --> 00:14:53,760
now in the oauth rfc it does not define

488
00:14:53,760 --> 00:14:57,120
a token format or a message message

489
00:14:57,120 --> 00:14:59,199
signature but one of the more commonly

490
00:14:59,199 --> 00:15:00,800
used formats you're going to see with

491
00:15:00,800 --> 00:15:02,399
these access tokens is a

492
00:15:02,399 --> 00:15:05,519
jot token or a json web token or jwt and

493
00:15:05,519 --> 00:15:06,480
in this

494
00:15:06,480 --> 00:15:09,360
json web token it defines the ability to

495
00:15:09,360 --> 00:15:11,120
sign in and code and all this is defined

496
00:15:11,120 --> 00:15:13,839
in rfc 7119 if you want to look more

497
00:15:13,839 --> 00:15:14,399
info

498
00:15:14,399 --> 00:15:16,160
about json web token specifically we're

499
00:15:16,160 --> 00:15:17,199
not going to go into too many more

500
00:15:17,199 --> 00:15:18,079
details about

501
00:15:18,079 --> 00:15:19,760
those specifically but there's a very

502
00:15:19,760 --> 00:15:22,320
very common access token format

503
00:15:22,320 --> 00:15:24,399
now the key thing to understand about

504
00:15:24,399 --> 00:15:25,360
access tokens

505
00:15:25,360 --> 00:15:27,839
is that the authorization server is

506
00:15:27,839 --> 00:15:29,600
going to issue that access token

507
00:15:29,600 --> 00:15:31,759
and the protected resource is going to

508
00:15:31,759 --> 00:15:33,279
consume that access token

509
00:15:33,279 --> 00:15:35,120
and those are the only two people in

510
00:15:35,120 --> 00:15:37,279
this entire diagram flow that need to be

511
00:15:37,279 --> 00:15:39,440
able to use those tokens now the client

512
00:15:39,440 --> 00:15:41,759
job is going to take that access token

513
00:15:41,759 --> 00:15:43,600
and take it to that protected resource

514
00:15:43,600 --> 00:15:46,320
but the client has no need to actually

515
00:15:46,320 --> 00:15:47,839
look at that token or understand what's

516
00:15:47,839 --> 00:15:49,120
inside that token as long as the

517
00:15:49,120 --> 00:15:50,560
authorization server

518
00:15:50,560 --> 00:15:51,920
issues the access token and that

519
00:15:51,920 --> 00:15:53,759
protected resource which trusts it

520
00:15:53,759 --> 00:15:55,600
can consume access token our stuff will

521
00:15:55,600 --> 00:15:56,959
work we're good to go the client

522
00:15:56,959 --> 00:15:58,320
does not need to go and look at those

523
00:15:58,320 --> 00:15:59,680
tokens or make any changes right that

524
00:15:59,680 --> 00:16:01,040
kind of stuff it just takes the token

525
00:16:01,040 --> 00:16:02,560
from the authorization server

526
00:16:02,560 --> 00:16:04,000
and takes it to the protected resource

527
00:16:04,000 --> 00:16:05,680
and then what's inside that token when

528
00:16:05,680 --> 00:16:07,040
the protected resource is going to get

529
00:16:07,040 --> 00:16:07,360
it

530
00:16:07,360 --> 00:16:09,600
it's going to define what it can do like

531
00:16:09,600 --> 00:16:11,759
the ability to do user.reader and that's

532
00:16:11,759 --> 00:16:13,600
going to be inside that access token so

533
00:16:13,600 --> 00:16:15,040
this is what an access token looks like

534
00:16:15,040 --> 00:16:16,800
when it's encoded this is again this is

535
00:16:16,800 --> 00:16:17,920
what the client's going to see

536
00:16:17,920 --> 00:16:20,160
and the client has no need to actually

537
00:16:20,160 --> 00:16:21,360
inspect this or look at this it just

538
00:16:21,360 --> 00:16:22,560
needs to take this

539
00:16:22,560 --> 00:16:24,240
and take this over to that protected

540
00:16:24,240 --> 00:16:26,000
resource so let's look at what it looks

541
00:16:26,000 --> 00:16:28,079
like when it's actually decoded

542
00:16:28,079 --> 00:16:32,079
so uh powerpoint isn't the best uh

543
00:16:32,079 --> 00:16:33,839
tool to kind of look through an access

544
00:16:33,839 --> 00:16:36,000
token so uh this is like a json

545
00:16:36,000 --> 00:16:38,079
file so but we bolded a few things here

546
00:16:38,079 --> 00:16:39,199
to kind of make this stick out for you a

547
00:16:39,199 --> 00:16:40,720
little bit so the first one here is

548
00:16:40,720 --> 00:16:43,040
the very top you see the type is that

549
00:16:43,040 --> 00:16:45,040
json web token this is coming from

550
00:16:45,040 --> 00:16:46,720
azure id and we can tell that because

551
00:16:46,720 --> 00:16:48,000
you can see that kind of towards the

552
00:16:48,000 --> 00:16:48,800
upper middle

553
00:16:48,800 --> 00:16:51,120
you see the field of iss this is who

554
00:16:51,120 --> 00:16:52,079
issued the token

555
00:16:52,079 --> 00:16:54,639
and you can see sts.windows.net that's

556
00:16:54,639 --> 00:16:55,600
azure id

557
00:16:55,600 --> 00:16:57,759
and we can see the app display name is

558
00:16:57,759 --> 00:16:59,279
going to that line of business

559
00:16:59,279 --> 00:17:01,680
workshop demo so um those are some

560
00:17:01,680 --> 00:17:02,560
things in the token

561
00:17:02,560 --> 00:17:03,839
um there's lots of stuff in here we're

562
00:17:03,839 --> 00:17:04,799
not going to cover all them but this is

563
00:17:04,799 --> 00:17:06,480
what it looks like when it's decoded so

564
00:17:06,480 --> 00:17:08,240
another question really is how do i move

565
00:17:08,240 --> 00:17:10,000
this token from one

566
00:17:10,000 --> 00:17:12,959
field to another so there are many many

567
00:17:12,959 --> 00:17:14,079
different

568
00:17:14,079 --> 00:17:15,839
flows as part of oauth and one of the

569
00:17:15,839 --> 00:17:17,599
things as defenders that we want to make

570
00:17:17,599 --> 00:17:18,880
sure that we're doing

571
00:17:18,880 --> 00:17:20,480
is we want to make sure we understand

572
00:17:20,480 --> 00:17:22,319
these flows and what is the right flow

573
00:17:22,319 --> 00:17:24,079
for the job i've seen for multiple

574
00:17:24,079 --> 00:17:25,760
customers that i work with

575
00:17:25,760 --> 00:17:28,319
that um sometimes the devs just don't

576
00:17:28,319 --> 00:17:30,160
know and they're just pick a flow that

577
00:17:30,160 --> 00:17:31,520
they think is right and they really

578
00:17:31,520 --> 00:17:32,960
should be using a different flow and

579
00:17:32,960 --> 00:17:34,160
i've had this where the hawk on this

580
00:17:34,160 --> 00:17:35,120
doesn't do this and

581
00:17:35,120 --> 00:17:36,160
they've really just picked the wrong

582
00:17:36,160 --> 00:17:38,480
flow so what i've seen some customers do

583
00:17:38,480 --> 00:17:39,919
this that is actually really successful

584
00:17:39,919 --> 00:17:40,559
is

585
00:17:40,559 --> 00:17:42,799
the defenders and the app development

586
00:17:42,799 --> 00:17:44,559
teams and things like that kind of agree

587
00:17:44,559 --> 00:17:45,200
on

588
00:17:45,200 --> 00:17:46,880
these are the different types of

589
00:17:46,880 --> 00:17:48,960
application behaviors that we have in

590
00:17:48,960 --> 00:17:49,919
our environment

591
00:17:49,919 --> 00:17:51,520
and then as a new application comes in

592
00:17:51,520 --> 00:17:53,120
this is the right flow for the for the

593
00:17:53,120 --> 00:17:54,080
job so let's

594
00:17:54,080 --> 00:17:56,160
talk about these flows the first flow is

595
00:17:56,160 --> 00:17:57,520
the authorization

596
00:17:57,520 --> 00:17:59,200
code grant which is the majority of your

597
00:17:59,200 --> 00:18:00,880
app types will use this and i have about

598
00:18:00,880 --> 00:18:02,480
four or five slides we'll kind of walk

599
00:18:02,480 --> 00:18:03,440
through this flow

600
00:18:03,440 --> 00:18:05,280
it's kind of has the most steps in it

601
00:18:05,280 --> 00:18:06,640
but the other flows kind of behave in a

602
00:18:06,640 --> 00:18:08,080
very very similar way but once you kind

603
00:18:08,080 --> 00:18:09,440
of understand that flow

604
00:18:09,440 --> 00:18:10,559
you'll be able to pick up the rest

605
00:18:10,559 --> 00:18:12,799
pretty pretty easily the next flow is

606
00:18:12,799 --> 00:18:13,600
the implicit

607
00:18:13,600 --> 00:18:16,480
grant flow and this should only be used

608
00:18:16,480 --> 00:18:18,000
for single page apps right so that's

609
00:18:18,000 --> 00:18:19,200
where everything kind of lives in the

610
00:18:19,200 --> 00:18:19,840
browser

611
00:18:19,840 --> 00:18:21,039
and we kind of want you to move to

612
00:18:21,039 --> 00:18:23,120
authorization code flow if possible and

613
00:18:23,120 --> 00:18:24,880
the reason for that is

614
00:18:24,880 --> 00:18:26,880
that client piece uh that client

615
00:18:26,880 --> 00:18:28,720
component also needs to authenticate to

616
00:18:28,720 --> 00:18:30,080
the authorization server

617
00:18:30,080 --> 00:18:31,679
and an implicit grant flow because

618
00:18:31,679 --> 00:18:33,520
everything takes place in the browser

619
00:18:33,520 --> 00:18:34,960
there's no shared secret from that

620
00:18:34,960 --> 00:18:36,240
client so we kind of want to move you to

621
00:18:36,240 --> 00:18:37,440
the authorization

622
00:18:37,440 --> 00:18:40,320
code grant flow as possible another very

623
00:18:40,320 --> 00:18:41,679
very common flow

624
00:18:41,679 --> 00:18:43,200
that you'll probably run into is the on

625
00:18:43,200 --> 00:18:45,280
behalf of grant so this is when that

626
00:18:45,280 --> 00:18:47,120
client application is going to call that

627
00:18:47,120 --> 00:18:49,280
protected resource like call a web api

628
00:18:49,280 --> 00:18:51,280
and then that web api needs to call

629
00:18:51,280 --> 00:18:52,799
another web api so

630
00:18:52,799 --> 00:18:54,320
i'm very common i've seen with customers

631
00:18:54,320 --> 00:18:56,000
where they're maybe calling some you

632
00:18:56,000 --> 00:18:57,840
know base api and the api needs to query

633
00:18:57,840 --> 00:18:59,360
another database somewhere else for more

634
00:18:59,360 --> 00:19:00,480
additional information

635
00:19:00,480 --> 00:19:02,240
the on behalf of grant would be the flow

636
00:19:02,240 --> 00:19:03,919
you'd want to use for that

637
00:19:03,919 --> 00:19:05,760
the third one here is the device code

638
00:19:05,760 --> 00:19:07,440
grant so this is when we have those

639
00:19:07,440 --> 00:19:09,200
um input constrained devices where we

640
00:19:09,200 --> 00:19:11,200
don't have maybe a web browser we don't

641
00:19:11,200 --> 00:19:12,799
actually maybe have a mouse and keyboard

642
00:19:12,799 --> 00:19:14,720
you know so iot types of stuff

643
00:19:14,720 --> 00:19:16,640
maybe we have like just an ssh window or

644
00:19:16,640 --> 00:19:18,160
something like that that's when we

645
00:19:18,160 --> 00:19:19,520
want to use a device code grant so for

646
00:19:19,520 --> 00:19:21,200
iot printers things like that this is a

647
00:19:21,200 --> 00:19:22,080
really really good

648
00:19:22,080 --> 00:19:24,640
flow to use the next one here is the

649
00:19:24,640 --> 00:19:25,919
client credentials rent

650
00:19:25,919 --> 00:19:27,440
so this is really for those service and

651
00:19:27,440 --> 00:19:29,039
service calls there's no

652
00:19:29,039 --> 00:19:30,720
uh resource owner in the picture there's

653
00:19:30,720 --> 00:19:31,919
no user in the picture so this is for

654
00:19:31,919 --> 00:19:33,120
like service accounts

655
00:19:33,120 --> 00:19:34,480
and daemons that's when you want to use

656
00:19:34,480 --> 00:19:36,480
that so those are the main five flows we

657
00:19:36,480 --> 00:19:36,799
want

658
00:19:36,799 --> 00:19:38,640
people to be using now i'm also going to

659
00:19:38,640 --> 00:19:40,960
include this six flow which is a legit

660
00:19:40,960 --> 00:19:41,520
flow but

661
00:19:41,520 --> 00:19:42,880
we really don't want to use it which is

662
00:19:42,880 --> 00:19:44,880
called the resource owner password

663
00:19:44,880 --> 00:19:46,400
credential grant or sometimes this will

664
00:19:46,400 --> 00:19:47,360
be referred to as

665
00:19:47,360 --> 00:19:49,679
the ropc flow and if you look at those

666
00:19:49,679 --> 00:19:51,200
terms we just learned which is resource

667
00:19:51,200 --> 00:19:52,640
owner user

668
00:19:52,640 --> 00:19:54,160
and password credentials grant you're

669
00:19:54,160 --> 00:19:56,080
basically just having the user

670
00:19:56,080 --> 00:19:58,080
give their username and password to the

671
00:19:58,080 --> 00:19:59,600
client tab which was one of those

672
00:19:59,600 --> 00:20:00,640
patterns that we don't really want to

673
00:20:00,640 --> 00:20:01,679
follow that bailey talked about

674
00:20:01,679 --> 00:20:03,360
moving to modern authentication we don't

675
00:20:03,360 --> 00:20:05,679
want to do this so be very very

676
00:20:05,679 --> 00:20:08,159
sure if you're going to use an app that

677
00:20:08,159 --> 00:20:10,400
does ropc flows because

678
00:20:10,400 --> 00:20:12,159
you need to really understand the risks

679
00:20:12,159 --> 00:20:13,520
that you're going to be exposed to and

680
00:20:13,520 --> 00:20:15,600
one of the customers that i work with

681
00:20:15,600 --> 00:20:16,799
didn't quite understand that and they

682
00:20:16,799 --> 00:20:18,240
had a bunch of apps that were being used

683
00:20:18,240 --> 00:20:19,919
in rpc flow once they really took the

684
00:20:19,919 --> 00:20:21,760
time to learn these flows they realize

685
00:20:21,760 --> 00:20:23,200
they don't want to do this at all and

686
00:20:23,200 --> 00:20:24,720
they move to the authorization code

687
00:20:24,720 --> 00:20:25,440
grant flow

688
00:20:25,440 --> 00:20:27,039
so let's take a look at what this um

689
00:20:27,039 --> 00:20:28,640
actually looks like here from a

690
00:20:28,640 --> 00:20:30,720
authorization code flow so we have those

691
00:20:30,720 --> 00:20:32,159
same resources that we just showed you

692
00:20:32,159 --> 00:20:33,600
before right we have our user who's the

693
00:20:33,600 --> 00:20:34,080
resource

694
00:20:34,080 --> 00:20:35,840
owner we have the application which is

695
00:20:35,840 --> 00:20:37,280
considered to be the client

696
00:20:37,280 --> 00:20:39,200
we have that protected resource which is

697
00:20:39,200 --> 00:20:40,400
the microsoft graph

698
00:20:40,400 --> 00:20:41,919
we have our authorization server in our

699
00:20:41,919 --> 00:20:43,120
case here this is going to be azure

700
00:20:43,120 --> 00:20:44,640
active directory but this could be octa

701
00:20:44,640 --> 00:20:45,919
google any other type of identity

702
00:20:45,919 --> 00:20:47,280
provider that does oauth

703
00:20:47,280 --> 00:20:48,559
and what's going to happen here is that

704
00:20:48,559 --> 00:20:50,400
application or the client is going to

705
00:20:50,400 --> 00:20:52,000
request authorization

706
00:20:52,000 --> 00:20:53,520
to the resource owner so that

707
00:20:53,520 --> 00:20:55,200
application is going to request

708
00:20:55,200 --> 00:20:57,520
uh authorization to the user and it's

709
00:20:57,520 --> 00:20:59,039
going to redirect to that authorization

710
00:20:59,039 --> 00:20:59,679
endpoint

711
00:20:59,679 --> 00:21:01,360
against azure active directory and here

712
00:21:01,360 --> 00:21:02,640
this is where that user is going to

713
00:21:02,640 --> 00:21:03,840
provide their credentials they're going

714
00:21:03,840 --> 00:21:05,200
to authenticate against the

715
00:21:05,200 --> 00:21:06,640
authorization server

716
00:21:06,640 --> 00:21:08,159
and once they authenticate that's where

717
00:21:08,159 --> 00:21:09,760
we see that dialog box that you saw

718
00:21:09,760 --> 00:21:10,559
before

719
00:21:10,559 --> 00:21:12,640
and once they click accept to that the

720
00:21:12,640 --> 00:21:14,320
authorization server is going to

721
00:21:14,320 --> 00:21:15,200
redirect

722
00:21:15,200 --> 00:21:17,200
the user back to the client and give

723
00:21:17,200 --> 00:21:19,039
them a special authorization

724
00:21:19,039 --> 00:21:22,240
code now the client is going to take

725
00:21:22,240 --> 00:21:23,760
that authorization server

726
00:21:23,760 --> 00:21:26,320
i'm sorry to take that uh take from the

727
00:21:26,320 --> 00:21:28,400
authorization server that authorization

728
00:21:28,400 --> 00:21:29,039
code

729
00:21:29,039 --> 00:21:30,400
i'm saying the same authorization word

730
00:21:30,400 --> 00:21:32,159
like six times and i'm getting like

731
00:21:32,159 --> 00:21:33,280
tongue tied there so okay we have

732
00:21:33,280 --> 00:21:35,360
authorization code and it also has its

733
00:21:35,360 --> 00:21:36,720
own credentials right

734
00:21:36,720 --> 00:21:37,840
and it's gonna use those client

735
00:21:37,840 --> 00:21:39,679
credentials it's gonna present those as

736
00:21:39,679 --> 00:21:41,200
well as the authorization code it just

737
00:21:41,200 --> 00:21:42,640
got from that user

738
00:21:42,640 --> 00:21:44,400
um to the authorization server that

739
00:21:44,400 --> 00:21:45,840
everything works out like it's supposed

740
00:21:45,840 --> 00:21:46,559
to

741
00:21:46,559 --> 00:21:49,600
now the client is going to get an access

742
00:21:49,600 --> 00:21:50,240
token

743
00:21:50,240 --> 00:21:52,240
and it's going to use that access token

744
00:21:52,240 --> 00:21:53,600
it's going to go against the protected

745
00:21:53,600 --> 00:21:54,159
resource

746
00:21:54,159 --> 00:21:55,679
and it's going to be able to access that

747
00:21:55,679 --> 00:21:57,760
resource on behalf of that user so that

748
00:21:57,760 --> 00:21:58,960
dialog box that we saw

749
00:21:58,960 --> 00:22:00,720
with the contoso test app was asking the

750
00:22:00,720 --> 00:22:02,320
user can i read your

751
00:22:02,320 --> 00:22:04,799
uh contacts and calendar and profile the

752
00:22:04,799 --> 00:22:05,919
user clicked yes

753
00:22:05,919 --> 00:22:07,200
this is what's going to end up happening

754
00:22:07,200 --> 00:22:08,799
is that client piece of software is

755
00:22:08,799 --> 00:22:10,320
going to get an access token it's going

756
00:22:10,320 --> 00:22:11,520
to go against the protected resource

757
00:22:11,520 --> 00:22:12,640
which in our case here

758
00:22:12,640 --> 00:22:16,080
is the microsoft craft okay so

759
00:22:16,080 --> 00:22:19,120
a few key points i want to make sure uh

760
00:22:19,120 --> 00:22:20,640
we understand from an oauth flow

761
00:22:20,640 --> 00:22:22,799
perspective so the first thing was

762
00:22:22,799 --> 00:22:25,440
that user or the resource owner never

763
00:22:25,440 --> 00:22:27,039
provided their credentials to the client

764
00:22:27,039 --> 00:22:28,080
app the only place

765
00:22:28,080 --> 00:22:29,520
that those client credentials their

766
00:22:29,520 --> 00:22:30,720
username and password was used or

767
00:22:30,720 --> 00:22:32,000
however they're authenticating

768
00:22:32,000 --> 00:22:33,520
was against the authorization server

769
00:22:33,520 --> 00:22:35,200
which in our case here was azure

770
00:22:35,200 --> 00:22:36,480
this is a really really good pattern we

771
00:22:36,480 --> 00:22:38,559
did not expose those credentials

772
00:22:38,559 --> 00:22:40,080
to the client piece of software this is

773
00:22:40,080 --> 00:22:41,360
really really good from a security

774
00:22:41,360 --> 00:22:42,240
perspective

775
00:22:42,240 --> 00:22:45,600
the second thing here is that the user

776
00:22:45,600 --> 00:22:47,039
has the ability to delegate those

777
00:22:47,039 --> 00:22:47,840
permissions

778
00:22:47,840 --> 00:22:49,600
that are needed for the client and we

779
00:22:49,600 --> 00:22:51,360
can make sure we're following

780
00:22:51,360 --> 00:22:53,440
the principles of lease privilege right

781
00:22:53,440 --> 00:22:54,880
those permissions that that client asked

782
00:22:54,880 --> 00:22:55,280
for

783
00:22:55,280 --> 00:22:57,120
with the ability to read contacts and

784
00:22:57,120 --> 00:22:58,320
recounter because that's all it really

785
00:22:58,320 --> 00:22:59,679
needed to do it didn't ask for

786
00:22:59,679 --> 00:23:01,360
to read everything else about the user

787
00:23:01,360 --> 00:23:02,720
it didn't ask to read all users in the

788
00:23:02,720 --> 00:23:04,240
directory it didn't ask to read write

789
00:23:04,240 --> 00:23:05,760
into the directory it was able to be

790
00:23:05,760 --> 00:23:06,720
scoped down

791
00:23:06,720 --> 00:23:08,799
to only what that application needed to

792
00:23:08,799 --> 00:23:10,559
do and this is a tremendously good

793
00:23:10,559 --> 00:23:11,919
security practice as defenders that we

794
00:23:11,919 --> 00:23:12,559
want to make sure

795
00:23:12,559 --> 00:23:14,080
all our applications are following

796
00:23:14,080 --> 00:23:15,440
that's going to be in our go do's coming

797
00:23:15,440 --> 00:23:16,559
later we want to make sure we're using

798
00:23:16,559 --> 00:23:18,559
lease privilege wherever possible

799
00:23:18,559 --> 00:23:20,880
and then the client access for uh act

800
00:23:20,880 --> 00:23:22,400
sorry the client access the protected

801
00:23:22,400 --> 00:23:22,960
resource

802
00:23:22,960 --> 00:23:25,120
with the access token and it's the

803
00:23:25,120 --> 00:23:26,559
reason that works is because that

804
00:23:26,559 --> 00:23:27,760
protected resource

805
00:23:27,760 --> 00:23:29,600
in our case here is microsoft graph

806
00:23:29,600 --> 00:23:31,200
trust the authorization server so you

807
00:23:31,200 --> 00:23:32,240
have to have that kind of set up ahead

808
00:23:32,240 --> 00:23:33,919
of time but that's how that access token

809
00:23:33,919 --> 00:23:34,400
works

810
00:23:34,400 --> 00:23:35,760
so this is really really good flow

811
00:23:35,760 --> 00:23:37,840
authorization is we want to be using

812
00:23:37,840 --> 00:23:40,640
but let's take a look at this ropc flow

813
00:23:40,640 --> 00:23:42,000
this is one of those patterns that we

814
00:23:42,000 --> 00:23:43,919
don't want to be following so it's a

815
00:23:43,919 --> 00:23:45,120
real simple one

816
00:23:45,120 --> 00:23:47,600
the user gives their username and

817
00:23:47,600 --> 00:23:48,640
password

818
00:23:48,640 --> 00:23:51,760
to that application an application

819
00:23:51,760 --> 00:23:52,880
logs in as that user to the

820
00:23:52,880 --> 00:23:55,120
authorization server to get that access

821
00:23:55,120 --> 00:23:55,760
token

822
00:23:55,760 --> 00:23:57,919
there's no delegation here there's no

823
00:23:57,919 --> 00:23:59,679
mfa here right this is just the

824
00:23:59,679 --> 00:24:00,640
application

825
00:24:00,640 --> 00:24:02,400
authenticating as that user to the

826
00:24:02,400 --> 00:24:04,320
authorization server and this is

827
00:24:04,320 --> 00:24:05,279
basically

828
00:24:05,279 --> 00:24:06,720
just basic off right so bailey talked

829
00:24:06,720 --> 00:24:07,840
about we don't want to be on basic off

830
00:24:07,840 --> 00:24:08,799
we want to move to that modern

831
00:24:08,799 --> 00:24:09,600
authentication

832
00:24:09,600 --> 00:24:12,000
this is not really a good pattern from a

833
00:24:12,000 --> 00:24:13,360
modern authentication perspective there

834
00:24:13,360 --> 00:24:14,640
are very specific scenarios where you'd

835
00:24:14,640 --> 00:24:15,440
want to use this

836
00:24:15,440 --> 00:24:17,360
but this is very very risky so we want

837
00:24:17,360 --> 00:24:18,559
to make sure we understand

838
00:24:18,559 --> 00:24:20,320
fully what's about to happen to us

839
00:24:20,320 --> 00:24:21,760
because our users

840
00:24:21,760 --> 00:24:22,640
are going to give their username

841
00:24:22,640 --> 00:24:24,400
password to this client application that

842
00:24:24,400 --> 00:24:25,679
we better trust

843
00:24:25,679 --> 00:24:27,600
because that client is most likely going

844
00:24:27,600 --> 00:24:29,200
to cache that username and password as

845
00:24:29,200 --> 00:24:30,400
well so now those credentials are going

846
00:24:30,400 --> 00:24:31,840
to be stored there so we really really

847
00:24:31,840 --> 00:24:33,039
don't want to use this pattern

848
00:24:33,039 --> 00:24:34,960
unless we really really have to maybe

849
00:24:34,960 --> 00:24:36,720
it's a specific kind of business app

850
00:24:36,720 --> 00:24:37,360
that you guys

851
00:24:37,360 --> 00:24:39,520
um write as defenders or something like

852
00:24:39,520 --> 00:24:40,480
that and we really know what we're going

853
00:24:40,480 --> 00:24:41,840
to get ourselves into we're okay with it

854
00:24:41,840 --> 00:24:42,159
but

855
00:24:42,159 --> 00:24:43,279
you know you really really want to make

856
00:24:43,279 --> 00:24:44,880
sure everyone's aware of what's going to

857
00:24:44,880 --> 00:24:45,279
happen

858
00:24:45,279 --> 00:24:48,720
when we use ropc code phone okay

859
00:24:48,720 --> 00:24:51,039
so let's look at open id connect so open

860
00:24:51,039 --> 00:24:52,080
id connect

861
00:24:52,080 --> 00:24:54,000
is actually a standard that's built on

862
00:24:54,000 --> 00:24:56,080
top of oauth 2. so auth 2 was designed

863
00:24:56,080 --> 00:24:57,679
this way to be extended like this an

864
00:24:57,679 --> 00:24:58,720
open id connect

865
00:24:58,720 --> 00:25:00,799
it basically extended oauth 2 and now

866
00:25:00,799 --> 00:25:02,480
this will also perform the user

867
00:25:02,480 --> 00:25:03,840
authentication right

868
00:25:03,840 --> 00:25:06,080
oauth 2 is authorization sometimes the

869
00:25:06,080 --> 00:25:07,520
preview is off z

870
00:25:07,520 --> 00:25:10,159
open id connect is off and open id

871
00:25:10,159 --> 00:25:10,960
connect uses

872
00:25:10,960 --> 00:25:12,880
json web tokens as well as json object

873
00:25:12,880 --> 00:25:14,080
signing and encryption

874
00:25:14,080 --> 00:25:15,279
and basically you're going to have a

875
00:25:15,279 --> 00:25:17,440
very very similar pattern

876
00:25:17,440 --> 00:25:19,200
as you saw with oauth 2 except for when

877
00:25:19,200 --> 00:25:20,720
you get an access token

878
00:25:20,720 --> 00:25:23,679
you're also going to get an id token so

879
00:25:23,679 --> 00:25:25,279
one of the ways that you can kind of

880
00:25:25,279 --> 00:25:27,200
visualize and think through this is that

881
00:25:27,200 --> 00:25:29,039
that client piece of software

882
00:25:29,039 --> 00:25:31,200
is going to be that relying party i'm

883
00:25:31,200 --> 00:25:32,320
kind of like how bailly talked about

884
00:25:32,320 --> 00:25:33,840
from a cellular perspective where that

885
00:25:33,840 --> 00:25:36,080
identity provider trusts that um i'm

886
00:25:36,080 --> 00:25:37,120
sorry the app trust the identity

887
00:25:37,120 --> 00:25:38,640
provider very similar way here

888
00:25:38,640 --> 00:25:40,799
the client is now the relying party and

889
00:25:40,799 --> 00:25:41,919
then this claim is going to be who

890
00:25:41,919 --> 00:25:43,360
issued that token who's the subject of

891
00:25:43,360 --> 00:25:45,120
the token who the token is for

892
00:25:45,120 --> 00:25:46,640
how long the token is good for it's all

893
00:25:46,640 --> 00:25:48,159
going to be an open id connect

894
00:25:48,159 --> 00:25:50,400
so let's take a look here how this

895
00:25:50,400 --> 00:25:51,679
actually works so it's going to be very

896
00:25:51,679 --> 00:25:53,120
very similar to our previous flow and

897
00:25:53,120 --> 00:25:53,600
again

898
00:25:53,600 --> 00:25:55,520
we have our same components as before we

899
00:25:55,520 --> 00:25:57,200
have our resource owner who's the

900
00:25:57,200 --> 00:25:59,360
user we have the client which is the

901
00:25:59,360 --> 00:26:00,960
application we have a protected resource

902
00:26:00,960 --> 00:26:02,640
which is the microsoft graph we have an

903
00:26:02,640 --> 00:26:04,400
authorization server which is azure

904
00:26:04,400 --> 00:26:05,679
active directory so

905
00:26:05,679 --> 00:26:07,760
again our application is going to ask

906
00:26:07,760 --> 00:26:08,720
the user

907
00:26:08,720 --> 00:26:10,720
to get redirected to the authorization

908
00:26:10,720 --> 00:26:11,919
endpoint because it's going to ask for

909
00:26:11,919 --> 00:26:14,559
that consent so it redirects the user to

910
00:26:14,559 --> 00:26:16,080
azure active directory

911
00:26:16,080 --> 00:26:18,320
and we should see this is when the user

912
00:26:18,320 --> 00:26:19,120
gets

913
00:26:19,120 --> 00:26:21,200
authenticate and gets prompted so this

914
00:26:21,200 --> 00:26:22,640
is just like before the user

915
00:26:22,640 --> 00:26:24,720
authenticates they click accept

916
00:26:24,720 --> 00:26:26,240
now the authorization server is going to

917
00:26:26,240 --> 00:26:27,919
redirect the

918
00:26:27,919 --> 00:26:30,000
user back to the client piece of

919
00:26:30,000 --> 00:26:32,559
software with that authorization code

920
00:26:32,559 --> 00:26:34,400
that client now is going to do this

921
00:26:34,400 --> 00:26:36,159
again same thing as authorization code

922
00:26:36,159 --> 00:26:37,279
flow right so now we're going to send

923
00:26:37,279 --> 00:26:37,600
the

924
00:26:37,600 --> 00:26:39,279
client credentials as well as the

925
00:26:39,279 --> 00:26:41,039
authorization code to the authorization

926
00:26:41,039 --> 00:26:42,159
server

927
00:26:42,159 --> 00:26:44,080
and if everything works out we're now

928
00:26:44,080 --> 00:26:45,440
going to get that access token like we

929
00:26:45,440 --> 00:26:46,960
got before but now we get an additional

930
00:26:46,960 --> 00:26:48,799
token we get that id token and now that

931
00:26:48,799 --> 00:26:50,400
application is going to use that

932
00:26:50,400 --> 00:26:53,200
access um token to protect to access

933
00:26:53,200 --> 00:26:54,159
that protected

934
00:26:54,159 --> 00:26:55,679
resource and now we have an id token

935
00:26:55,679 --> 00:26:56,960
over here from the application

936
00:26:56,960 --> 00:26:57,600
perspective

937
00:26:57,600 --> 00:26:59,279
and it's able to request additional

938
00:26:59,279 --> 00:27:00,880
access tokens to kind of keep

939
00:27:00,880 --> 00:27:02,559
um accessing that resource if it needs

940
00:27:02,559 --> 00:27:04,720
to so the openid connect flow

941
00:27:04,720 --> 00:27:06,960
is very very similar hopefully that

942
00:27:06,960 --> 00:27:08,159
makes sense you're not at this point

943
00:27:08,159 --> 00:27:09,600
it's very very similar to the oauth 2

944
00:27:09,600 --> 00:27:10,080
flow

945
00:27:10,080 --> 00:27:11,840
instead of just getting an access token

946
00:27:11,840 --> 00:27:15,120
you also get an id token

947
00:27:15,120 --> 00:27:17,360
all right so what should we be looking

948
00:27:17,360 --> 00:27:19,440
for as defenders from this so the first

949
00:27:19,440 --> 00:27:20,320
thing is

950
00:27:20,320 --> 00:27:23,039
you want to make sure you're asking your

951
00:27:23,039 --> 00:27:24,720
independent software vendors like isvs

952
00:27:24,720 --> 00:27:25,760
or you know people you're buying your

953
00:27:25,760 --> 00:27:26,720
software from

954
00:27:26,720 --> 00:27:28,960
you want them to support open id connect

955
00:27:28,960 --> 00:27:30,640
wherever possible we don't want to use

956
00:27:30,640 --> 00:27:32,000
these legacy protocols we want to be

957
00:27:32,000 --> 00:27:33,600
able to use things like mfa we want to

958
00:27:33,600 --> 00:27:35,120
build you some of those additional

959
00:27:35,120 --> 00:27:36,480
uh things that bailey talked about where

960
00:27:36,480 --> 00:27:37,679
we can detect things because we have

961
00:27:37,679 --> 00:27:39,200
more information as defenders which is

962
00:27:39,200 --> 00:27:40,640
really really good it's harder for

963
00:27:40,640 --> 00:27:42,080
the attacker to kind of guess all that

964
00:27:42,080 --> 00:27:43,200
different stuff we really want to use

965
00:27:43,200 --> 00:27:43,679
this

966
00:27:43,679 --> 00:27:45,679
and i know a lot of people feel that

967
00:27:45,679 --> 00:27:47,440
like well i'm just a random company like

968
00:27:47,440 --> 00:27:49,039
why would they listen to me

969
00:27:49,039 --> 00:27:50,320
bailey and i work with some very large

970
00:27:50,320 --> 00:27:51,600
customers and some actually some very

971
00:27:51,600 --> 00:27:52,720
small customers and

972
00:27:52,720 --> 00:27:55,360
the voice uh really really matters um so

973
00:27:55,360 --> 00:27:56,080
when you're

974
00:27:56,080 --> 00:27:58,320
uh you know when you're buying software

975
00:27:58,320 --> 00:27:59,120
ask for this

976
00:27:59,120 --> 00:28:00,399
and tell them that you want this you

977
00:28:00,399 --> 00:28:01,679
don't want to do these legacy protocols

978
00:28:01,679 --> 00:28:02,799
anymore you want to make sure you're

979
00:28:02,799 --> 00:28:05,120
using open id connect wherever possible

980
00:28:05,120 --> 00:28:07,440
okay the next thing uh if you're not

981
00:28:07,440 --> 00:28:08,880
sure if it's a good idea to roll your

982
00:28:08,880 --> 00:28:09,679
own library

983
00:28:09,679 --> 00:28:11,200
reread that tweet and ask your devs if

984
00:28:11,200 --> 00:28:12,320
they know all those different parts of

985
00:28:12,320 --> 00:28:13,200
it because

986
00:28:13,200 --> 00:28:14,399
you just really don't want to do this

987
00:28:14,399 --> 00:28:15,919
it's kind of you know to me it feels

988
00:28:15,919 --> 00:28:17,200
like it's very much like kind of like

989
00:28:17,200 --> 00:28:18,480
rolling your own cryptography where

990
00:28:18,480 --> 00:28:19,520
you'd be like oh no no we're not going

991
00:28:19,520 --> 00:28:20,480
to do that we're going to use

992
00:28:20,480 --> 00:28:22,000
you know what well-known things use our

993
00:28:22,000 --> 00:28:23,679
libraries we want to make sure we do the

994
00:28:23,679 --> 00:28:24,720
same thing from this

995
00:28:24,720 --> 00:28:25,679
it's a waste of time from your

996
00:28:25,679 --> 00:28:27,679
developer's perspective and also there's

997
00:28:27,679 --> 00:28:29,440
bug fixes there's updates to things or

998
00:28:29,440 --> 00:28:30,080
secure things

999
00:28:30,080 --> 00:28:31,600
like you just don't really want to rule

1000
00:28:31,600 --> 00:28:33,279
your own so if you're using azure id

1001
00:28:33,279 --> 00:28:34,640
or any other microsoft identity stuff

1002
00:28:34,640 --> 00:28:37,360
like azure ad b2c the msl library is

1003
00:28:37,360 --> 00:28:39,320
what you want to use we have them for

1004
00:28:39,320 --> 00:28:42,080
python.net java you know mobile stuff

1005
00:28:42,080 --> 00:28:43,679
all kinds of stuff use these libraries

1006
00:28:43,679 --> 00:28:45,039
it handles a lot of this

1007
00:28:45,039 --> 00:28:47,600
these problems for you automatically the

1008
00:28:47,600 --> 00:28:48,640
third thing is

1009
00:28:48,640 --> 00:28:50,320
we don't want to use the ropc flow

1010
00:28:50,320 --> 00:28:51,520
hopefully at this point i made that very

1011
00:28:51,520 --> 00:28:52,000
clear

1012
00:28:52,000 --> 00:28:54,159
unless you absolutely have to and you

1013
00:28:54,159 --> 00:28:55,919
have a lot of trust in that client

1014
00:28:55,919 --> 00:28:57,360
application because you're basically

1015
00:28:57,360 --> 00:28:58,000
doing basic

1016
00:28:58,000 --> 00:28:59,600
auth your users are giving up their

1017
00:28:59,600 --> 00:29:01,279
username password to this piece of

1018
00:29:01,279 --> 00:29:01,919
software

1019
00:29:01,919 --> 00:29:03,760
and it's probably going to cache that so

1020
00:29:03,760 --> 00:29:05,679
we really really don't want to use that

1021
00:29:05,679 --> 00:29:07,279
uh fourth thing here we want to make

1022
00:29:07,279 --> 00:29:09,200
sure we're using https

1023
00:29:09,200 --> 00:29:11,279
wherever we can for this because whoever

1024
00:29:11,279 --> 00:29:12,799
has that access token

1025
00:29:12,799 --> 00:29:14,399
has the right to use it so we want to

1026
00:29:14,399 --> 00:29:15,840
make sure we're protecting those access

1027
00:29:15,840 --> 00:29:16,399
tokens

1028
00:29:16,399 --> 00:29:17,440
sometimes like i said they're called

1029
00:29:17,440 --> 00:29:19,039
bearer tokens and documentation or just

1030
00:29:19,039 --> 00:29:19,600
tokens

1031
00:29:19,600 --> 00:29:20,880
we want to make sure protecting those we

1032
00:29:20,880 --> 00:29:23,279
want to make sure we're using https

1033
00:29:23,279 --> 00:29:24,960
and then lastly here we want to make

1034
00:29:24,960 --> 00:29:26,799
sure we are focusing on least privilege

1035
00:29:26,799 --> 00:29:28,640
when it comes to apple education consent

1036
00:29:28,640 --> 00:29:31,120
that's a great great practice in in

1037
00:29:31,120 --> 00:29:31,760
general

1038
00:29:31,760 --> 00:29:34,880
um so when your line of business apps

1039
00:29:34,880 --> 00:29:37,039
are being used to open id connect you

1040
00:29:37,039 --> 00:29:38,159
want to make sure they're not asking for

1041
00:29:38,159 --> 00:29:39,520
too many permissions which is pretty

1042
00:29:39,520 --> 00:29:40,559
common right from a

1043
00:29:40,559 --> 00:29:41,520
like oh i don't know what i'm going to

1044
00:29:41,520 --> 00:29:42,559
need so i'm going to ask for the ability

1045
00:29:42,559 --> 00:29:44,080
to do directory read write all and just

1046
00:29:44,080 --> 00:29:45,279
do everything we want to make sure we're

1047
00:29:45,279 --> 00:29:46,720
following these privilege and we also

1048
00:29:46,720 --> 00:29:48,000
want to make sure that when we purchase

1049
00:29:48,000 --> 00:29:48,640
software

1050
00:29:48,640 --> 00:29:50,880
it is also following these projects this

1051
00:29:50,880 --> 00:29:52,399
is not a

1052
00:29:52,399 --> 00:29:54,640
new problem around least privileged with

1053
00:29:54,640 --> 00:29:56,159
applications right anyone that's been in

1054
00:29:56,159 --> 00:29:57,120
this field a little bit

1055
00:29:57,120 --> 00:29:59,039
someone buys a piece of software they go

1056
00:29:59,039 --> 00:30:00,320
okay can you please set up and install

1057
00:30:00,320 --> 00:30:01,919
it for us and it's like it needs domain

1058
00:30:01,919 --> 00:30:03,440
admin and it needs schema admin and

1059
00:30:03,440 --> 00:30:04,159
you're like

1060
00:30:04,159 --> 00:30:05,440
we're not doing any of this stuff this

1061
00:30:05,440 --> 00:30:07,039
is way too many permissions very very

1062
00:30:07,039 --> 00:30:08,080
similar thing with this we want to make

1063
00:30:08,080 --> 00:30:09,440
sure we're enforcing lease privilege

1064
00:30:09,440 --> 00:30:10,240
with this

1065
00:30:10,240 --> 00:30:11,919
and then last here at the very part here

1066
00:30:11,919 --> 00:30:13,440
there's an emerging attack when it comes

1067
00:30:13,440 --> 00:30:14,720
to application consent that bailey's

1068
00:30:14,720 --> 00:30:15,760
going to talk about so this is some

1069
00:30:15,760 --> 00:30:16,960
stuff we're starting to see

1070
00:30:16,960 --> 00:30:18,240
we want to make sure his defenders were

1071
00:30:18,240 --> 00:30:19,679
really really aware of that so with that

1072
00:30:19,679 --> 00:30:20,640
bailey's going to kind of

1073
00:30:20,640 --> 00:30:22,159
talk about that and then close up with

1074
00:30:22,159 --> 00:30:24,159
some go do's

1075
00:30:24,159 --> 00:30:26,480
thank you mark so diving into some of

1076
00:30:26,480 --> 00:30:27,840
those application

1077
00:30:27,840 --> 00:30:29,520
consent phishing attacks that we've been

1078
00:30:29,520 --> 00:30:31,679
seeing on the rise and before i go into

1079
00:30:31,679 --> 00:30:33,360
what that attack actually looks like i

1080
00:30:33,360 --> 00:30:35,600
want to go through some vocabulary that

1081
00:30:35,600 --> 00:30:36,080
may be

1082
00:30:36,080 --> 00:30:38,080
new to some folks who are listening so

1083
00:30:38,080 --> 00:30:40,080
i'm going to disambiguate between

1084
00:30:40,080 --> 00:30:42,159
delegated permissions and application

1085
00:30:42,159 --> 00:30:43,600
permissions and so

1086
00:30:43,600 --> 00:30:45,279
if you haven't heard the term delegated

1087
00:30:45,279 --> 00:30:47,600
permissions before we're basically

1088
00:30:47,600 --> 00:30:49,440
talking about permissions that are used

1089
00:30:49,440 --> 00:30:51,600
by an app that have a signed-in user

1090
00:30:51,600 --> 00:30:54,000
present in order to make calls on behalf

1091
00:30:54,000 --> 00:30:56,480
of that user and these can be consented

1092
00:30:56,480 --> 00:30:57,279
to by

1093
00:30:57,279 --> 00:30:59,679
non-admin users but some higher

1094
00:30:59,679 --> 00:31:01,600
privilege permissions do require that

1095
00:31:01,600 --> 00:31:02,799
admin consent

1096
00:31:02,799 --> 00:31:04,880
uh in azure id it may be different for

1097
00:31:04,880 --> 00:31:07,200
your identity provider

1098
00:31:07,200 --> 00:31:08,960
and then those effective permissions so

1099
00:31:08,960 --> 00:31:10,159
you can see i have this little venn

1100
00:31:10,159 --> 00:31:10,799
diagram

1101
00:31:10,799 --> 00:31:12,640
at the bottom and that's referring to

1102
00:31:12,640 --> 00:31:14,399
the intersection of the user's

1103
00:31:14,399 --> 00:31:15,840
underlying permissions

1104
00:31:15,840 --> 00:31:17,440
and what the application has been

1105
00:31:17,440 --> 00:31:19,760
granted consent to do

1106
00:31:19,760 --> 00:31:23,200
um and so essentially if we were to

1107
00:31:23,200 --> 00:31:25,120
think about it if a user were to consent

1108
00:31:25,120 --> 00:31:26,000
on behalf for an

1109
00:31:26,000 --> 00:31:28,640
app to read email they're not consenting

1110
00:31:28,640 --> 00:31:29,039
for

1111
00:31:29,039 --> 00:31:31,360
that app to read every user's email it

1112
00:31:31,360 --> 00:31:33,039
would just be theirs because i as a user

1113
00:31:33,039 --> 00:31:34,720
cannot read your inbox

1114
00:31:34,720 --> 00:31:37,120
for example and so we're talking about

1115
00:31:37,120 --> 00:31:38,880
application permissions it's a little

1116
00:31:38,880 --> 00:31:40,720
bit different so those are used by apps

1117
00:31:40,720 --> 00:31:42,880
and they run without a signed in user

1118
00:31:42,880 --> 00:31:43,519
present

1119
00:31:43,519 --> 00:31:45,200
and these are typically going to be your

1120
00:31:45,200 --> 00:31:47,279
higher level permissions and they always

1121
00:31:47,279 --> 00:31:49,360
require admin consent

1122
00:31:49,360 --> 00:31:51,360
and so some of these can include app

1123
00:31:51,360 --> 00:31:53,200
roles and app only permissions

1124
00:31:53,200 --> 00:31:55,279
um but you can think of these as

1125
00:31:55,279 --> 00:31:56,240
delegated

1126
00:31:56,240 --> 00:31:58,240
as an end user i can consent to these

1127
00:31:58,240 --> 00:32:00,080
application as an admin i have to

1128
00:32:00,080 --> 00:32:01,200
consent to these

1129
00:32:01,200 --> 00:32:03,519
and if an admin consents to delegated

1130
00:32:03,519 --> 00:32:05,120
permissions that consents to it on

1131
00:32:05,120 --> 00:32:07,200
behalf of the entire tenant which is

1132
00:32:07,200 --> 00:32:09,519
important to note as well

1133
00:32:09,519 --> 00:32:11,440
and so what is the attack that we've

1134
00:32:11,440 --> 00:32:13,600
been seeing come on the rise and so this

1135
00:32:13,600 --> 00:32:14,480
is something and

1136
00:32:14,480 --> 00:32:17,120
i have some screenshots of what this may

1137
00:32:17,120 --> 00:32:20,559
look like to end users

1138
00:32:27,360 --> 00:32:30,480
a lot of covet 19 themed emails um or it

1139
00:32:30,480 --> 00:32:32,480
could be a malicious web app so

1140
00:32:32,480 --> 00:32:34,480
for example it'll be a very normal

1141
00:32:34,480 --> 00:32:36,799
looking 0365 access

1142
00:32:36,799 --> 00:32:40,000
looks legit for my day to day or perhaps

1143
00:32:40,000 --> 00:32:40,480
a

1144
00:32:40,480 --> 00:32:42,000
you know link like this that i would

1145
00:32:42,000 --> 00:32:43,600
have to approve

1146
00:32:43,600 --> 00:32:45,360
and so essentially what we've seen

1147
00:32:45,360 --> 00:32:47,039
happening is that if a user then

1148
00:32:47,039 --> 00:32:48,799
consents and they go through those flows

1149
00:32:48,799 --> 00:32:50,720
that mark and i showed you earlier

1150
00:32:50,720 --> 00:32:53,039
um then the attacker can gain access to

1151
00:32:53,039 --> 00:32:54,480
their mail forwarding rules

1152
00:32:54,480 --> 00:32:56,559
file contacts you name it based off of

1153
00:32:56,559 --> 00:32:58,320
the permissions that that app has been

1154
00:32:58,320 --> 00:33:01,440
granted and so how do you find that

1155
00:33:01,440 --> 00:33:02,720
illicit consent

1156
00:33:02,720 --> 00:33:05,600
so speaking from an azure id perspective

1157
00:33:05,600 --> 00:33:06,320
and so

1158
00:33:06,320 --> 00:33:08,559
you know i imagine it would be a similar

1159
00:33:08,559 --> 00:33:10,080
process with whatever identity

1160
00:33:10,080 --> 00:33:12,320
provider that you have but what you

1161
00:33:12,320 --> 00:33:13,919
would look through is that first going

1162
00:33:13,919 --> 00:33:16,480
to that office 365 portal so if you

1163
00:33:16,480 --> 00:33:18,799
search through those audit logs

1164
00:33:18,799 --> 00:33:21,360
you can actually look for indicators of

1165
00:33:21,360 --> 00:33:22,960
compromise there and so

1166
00:33:22,960 --> 00:33:26,080
if you look at particularly the is admin

1167
00:33:26,080 --> 00:33:28,159
consent flag if that's set to true

1168
00:33:28,159 --> 00:33:29,919
then that indicates somebody with that

1169
00:33:29,919 --> 00:33:31,279
global admin access

1170
00:33:31,279 --> 00:33:34,159
may have granted access or granted that

1171
00:33:34,159 --> 00:33:35,840
permission on behalf of the entire

1172
00:33:35,840 --> 00:33:37,519
tenant which is particularly scary

1173
00:33:37,519 --> 00:33:38,159
because

1174
00:33:38,159 --> 00:33:39,760
if an admin fell for one of those

1175
00:33:39,760 --> 00:33:41,840
consent props that i showed earlier

1176
00:33:41,840 --> 00:33:44,399
then that's for every user in the entire

1177
00:33:44,399 --> 00:33:45,840
tenant and so not just your

1178
00:33:45,840 --> 00:33:49,039
everyday user with a smaller scope of

1179
00:33:49,039 --> 00:33:51,039
effective permissions

1180
00:33:51,039 --> 00:33:52,559
you can also check in the azure 80

1181
00:33:52,559 --> 00:33:55,279
portal so if you go into the audit logs

1182
00:33:55,279 --> 00:33:55,679
there

1183
00:33:55,679 --> 00:33:58,080
or if you go through uh go over to the

1184
00:33:58,080 --> 00:33:59,840
enterprise apps tab you can flip through

1185
00:33:59,840 --> 00:34:01,679
the permissions tab for each individual

1186
00:34:01,679 --> 00:34:02,480
apps

1187
00:34:02,480 --> 00:34:05,279
but i imagine that as defenders you may

1188
00:34:05,279 --> 00:34:06,000
have a lot

1189
00:34:06,000 --> 00:34:07,519
of apps to go through and that may not

1190
00:34:07,519 --> 00:34:09,760
be a good approach for you so we have a

1191
00:34:09,760 --> 00:34:11,520
powershell script up on the screen and

1192
00:34:11,520 --> 00:34:13,918
so if you go to aka dot ms

1193
00:34:13,918 --> 00:34:16,879
get azure ad permissions it'll actually

1194
00:34:16,879 --> 00:34:18,560
spit out a report of

1195
00:34:18,560 --> 00:34:20,079
all the granted permissions in your

1196
00:34:20,079 --> 00:34:21,440
environment and different apps and i'll

1197
00:34:21,440 --> 00:34:22,639
walk through what that looks like in a

1198
00:34:22,639 --> 00:34:23,199
moment

1199
00:34:23,199 --> 00:34:25,679
and that's totally free um but you know

1200
00:34:25,679 --> 00:34:27,520
an even better solution would be using

1201
00:34:27,520 --> 00:34:29,520
something like mcas or another cosby

1202
00:34:29,520 --> 00:34:32,000
solution um but this powershell script

1203
00:34:32,000 --> 00:34:33,359
is really awesome

1204
00:34:33,359 --> 00:34:35,520
because as i pull up an example here if

1205
00:34:35,520 --> 00:34:37,440
you go through and you start with

1206
00:34:37,440 --> 00:34:39,359
um just checking out the higher risk

1207
00:34:39,359 --> 00:34:40,800
apps or higher

1208
00:34:40,800 --> 00:34:43,679
um or apps with higher user assignment

1209
00:34:43,679 --> 00:34:45,359
that's something to monitor that if

1210
00:34:45,359 --> 00:34:47,359
you know there's something that you

1211
00:34:47,359 --> 00:34:49,040
wouldn't expect to be seeing

1212
00:34:49,040 --> 00:34:50,879
also be sure as you go through these and

1213
00:34:50,879 --> 00:34:53,199
if you see anything that looks really

1214
00:34:53,199 --> 00:34:55,839
bland so a um a customer of mine

1215
00:34:55,839 --> 00:34:57,839
actually had this attack happen to them

1216
00:34:57,839 --> 00:34:59,440
and it was where an end user was

1217
00:34:59,440 --> 00:35:01,359
consenting to something that had a very

1218
00:35:01,359 --> 00:35:02,240
generic name

1219
00:35:02,240 --> 00:35:04,880
but it seemed very similar to a video

1220
00:35:04,880 --> 00:35:06,800
conferencing app that they normally used

1221
00:35:06,800 --> 00:35:07,839
every day

1222
00:35:07,839 --> 00:35:10,079
but it actually put their entire company

1223
00:35:10,079 --> 00:35:11,040
directory up

1224
00:35:11,040 --> 00:35:14,000
online because they consented for the

1225
00:35:14,000 --> 00:35:15,680
app to be able to read the entire

1226
00:35:15,680 --> 00:35:17,839
directory which as an end user i can

1227
00:35:17,839 --> 00:35:20,400
see who's in my org and so all of that

1228
00:35:20,400 --> 00:35:21,839
personal information was published

1229
00:35:21,839 --> 00:35:23,280
online so

1230
00:35:23,280 --> 00:35:25,280
something to note in addition to just

1231
00:35:25,280 --> 00:35:26,640
your everyday users it's really

1232
00:35:26,640 --> 00:35:28,400
important to monitor those high risk

1233
00:35:28,400 --> 00:35:30,160
users so we have that in a tab for you

1234
00:35:30,160 --> 00:35:31,920
as well if you run this report

1235
00:35:31,920 --> 00:35:33,599
and so that's where you know those who

1236
00:35:33,599 --> 00:35:35,440
have higher privilege or higher access

1237
00:35:35,440 --> 00:35:35,920
so

1238
00:35:35,920 --> 00:35:38,079
for example any executives anyone who

1239
00:35:38,079 --> 00:35:40,320
may work in finance someone who

1240
00:35:40,320 --> 00:35:42,560
if the content that they had access to

1241
00:35:42,560 --> 00:35:44,880
got leaked it may be you know a front

1242
00:35:44,880 --> 00:35:46,320
page news story or something for your

1243
00:35:46,320 --> 00:35:47,359
organization so

1244
00:35:47,359 --> 00:35:49,440
might want to look into those and also

1245
00:35:49,440 --> 00:35:50,880
reviewing permissions for those

1246
00:35:50,880 --> 00:35:52,800
delegated applications so

1247
00:35:52,800 --> 00:35:54,000
you know especially those read

1248
00:35:54,000 --> 00:35:56,079
permissions like my customer um

1249
00:35:56,079 --> 00:35:58,560
fell victim to write permissions uh

1250
00:35:58,560 --> 00:36:00,000
star.all

1251
00:36:00,000 --> 00:36:01,520
um reviewing those to make sure that

1252
00:36:01,520 --> 00:36:03,359
they're appropriate when i say

1253
00:36:03,359 --> 00:36:04,640
reviewing to make sure that they're

1254
00:36:04,640 --> 00:36:06,320
appropriate i don't want you to have a

1255
00:36:06,320 --> 00:36:08,400
takeaway from this saying that

1256
00:36:08,400 --> 00:36:10,960
you know if an app asks for user read

1257
00:36:10,960 --> 00:36:12,400
write all it is

1258
00:36:12,400 --> 00:36:14,640
objectively a bad application that's not

1259
00:36:14,640 --> 00:36:15,760
what i'm seeing here

1260
00:36:15,760 --> 00:36:17,839
what i'm saying is to look at the

1261
00:36:17,839 --> 00:36:19,200
different permissions that are assigned

1262
00:36:19,200 --> 00:36:20,480
to a particular app

1263
00:36:20,480 --> 00:36:22,720
does this look legitimate is this app

1264
00:36:22,720 --> 00:36:24,560
something that actually needs that level

1265
00:36:24,560 --> 00:36:25,359
of permission

1266
00:36:25,359 --> 00:36:27,200
and then making a judgment call there as

1267
00:36:27,200 --> 00:36:28,880
a defender while balancing

1268
00:36:28,880 --> 00:36:31,040
you know the business impact there and

1269
00:36:31,040 --> 00:36:32,720
so i have a few more actionable steps

1270
00:36:32,720 --> 00:36:34,079
that you can take as well within azure

1271
00:36:34,079 --> 00:36:34,640
id

1272
00:36:34,640 --> 00:36:36,880
um but this also applies to any idp that

1273
00:36:36,880 --> 00:36:38,079
you may be using

1274
00:36:38,079 --> 00:36:40,960
so in terms of application consent uh my

1275
00:36:40,960 --> 00:36:41,920
customer had

1276
00:36:41,920 --> 00:36:44,240
this very bottom one checked so allowing

1277
00:36:44,240 --> 00:36:46,079
end users to consent for

1278
00:36:46,079 --> 00:36:49,040
any app um without restrictions there

1279
00:36:49,040 --> 00:36:51,119
and so we actually advise the center one

1280
00:36:51,119 --> 00:36:51,520
here

1281
00:36:51,520 --> 00:36:54,079
the little goldilocks recommendation of

1282
00:36:54,079 --> 00:36:56,000
allowing end users to consent to apps

1283
00:36:56,000 --> 00:36:56,320
from

1284
00:36:56,320 --> 00:36:58,960
verified publishers and so that would um

1285
00:36:58,960 --> 00:37:00,800
the publisher verification process is

1286
00:37:00,800 --> 00:37:01,760
something that

1287
00:37:01,760 --> 00:37:03,280
on the next screen i'll be able to show

1288
00:37:03,280 --> 00:37:05,280
you one where it's unverified

1289
00:37:05,280 --> 00:37:07,040
um but if they are verified that means

1290
00:37:07,040 --> 00:37:09,280
that you know microsoft has confirmed

1291
00:37:09,280 --> 00:37:10,800
that that is who they say they are

1292
00:37:10,800 --> 00:37:12,320
and that you can have a little bit more

1293
00:37:12,320 --> 00:37:14,880
trustworthiness to that application

1294
00:37:14,880 --> 00:37:16,720
and something else that you can do is by

1295
00:37:16,720 --> 00:37:18,240
you know setting up a policy with

1296
00:37:18,240 --> 00:37:20,880
mcas and you'll be able to automatically

1297
00:37:20,880 --> 00:37:21,599
revoke an

1298
00:37:21,599 --> 00:37:23,839
app or specific user from an app if risk

1299
00:37:23,839 --> 00:37:24,640
is detected

1300
00:37:24,640 --> 00:37:27,839
so something else to note there as well

1301
00:37:27,839 --> 00:37:29,760
now if you've selected that little

1302
00:37:29,760 --> 00:37:31,040
goldilocks option

1303
00:37:31,040 --> 00:37:32,880
you know you might say hey do i have an

1304
00:37:32,880 --> 00:37:35,119
ad as an admin have to consent to all of

1305
00:37:35,119 --> 00:37:36,640
these on behalf and the answer to that

1306
00:37:36,640 --> 00:37:37,359
would be no

1307
00:37:37,359 --> 00:37:40,480
so risk-based user step-up consent is

1308
00:37:40,480 --> 00:37:42,560
enabled by default within azure 80

1309
00:37:42,560 --> 00:37:44,480
and essentially the way it works is that

1310
00:37:44,480 --> 00:37:46,480
if i as a user

1311
00:37:46,480 --> 00:37:49,359
request for something to be stepped up

1312
00:37:49,359 --> 00:37:50,400
to my admin

1313
00:37:50,400 --> 00:37:52,960
then or rather excuse me i as an end

1314
00:37:52,960 --> 00:37:54,240
user want to consent to an

1315
00:37:54,240 --> 00:37:56,640
app and then it will require that admin

1316
00:37:56,640 --> 00:37:58,320
approval so

1317
00:37:58,320 --> 00:38:00,320
in order for the end user to get access

1318
00:38:00,320 --> 00:38:01,760
i as an admin will have to go through

1319
00:38:01,760 --> 00:38:02,320
and say

1320
00:38:02,320 --> 00:38:05,119
yes that end user made consent to it and

1321
00:38:05,119 --> 00:38:05,440
so

1322
00:38:05,440 --> 00:38:06,880
the admin has the ability to prove or

1323
00:38:06,880 --> 00:38:09,200
deny the end user just gets a warning

1324
00:38:09,200 --> 00:38:10,800
and an audit event is going to be logged

1325
00:38:10,800 --> 00:38:12,400
as well so you'll be able to have all of

1326
00:38:12,400 --> 00:38:14,000
that tracked as to

1327
00:38:14,000 --> 00:38:16,640
which admin um said yes to that user

1328
00:38:16,640 --> 00:38:19,839
having access and whatnot

1329
00:38:20,880 --> 00:38:22,160
and so a third thing that you could do

1330
00:38:22,160 --> 00:38:23,920
is detect risky oauth

1331
00:38:23,920 --> 00:38:25,680
apps so mark went through that oauth

1332
00:38:25,680 --> 00:38:27,359
flow earlier but something you can do

1333
00:38:27,359 --> 00:38:28,240
here is by

1334
00:38:28,240 --> 00:38:30,160
you know running that powershell script

1335
00:38:30,160 --> 00:38:31,680
an even better thing to be doing would

1336
00:38:31,680 --> 00:38:33,359
be to use something like azure monitor

1337
00:38:33,359 --> 00:38:34,720
where you could set up alerts that'll

1338
00:38:34,720 --> 00:38:35,599
notify you

1339
00:38:35,599 --> 00:38:37,599
when an oauth app meets certain criteria

1340
00:38:37,599 --> 00:38:39,680
so if they have that high permission set

1341
00:38:39,680 --> 00:38:42,079
or if it was authorized by you know 50

1342
00:38:42,079 --> 00:38:44,000
or more users or whatever you want to

1343
00:38:44,000 --> 00:38:45,119
set for yourself

1344
00:38:45,119 --> 00:38:46,400
and then that way you'll be able to be

1345
00:38:46,400 --> 00:38:48,560
in the know as to what's going on

1346
00:38:48,560 --> 00:38:50,320
and the last thing that you know if you

1347
00:38:50,320 --> 00:38:52,000
have the budget for it or the ability

1348
00:38:52,000 --> 00:38:54,720
would be to have a um hunting solution

1349
00:38:54,720 --> 00:38:57,359
like a cosby solution like mcas

1350
00:38:57,359 --> 00:38:58,560
because then you're going to be able to

1351
00:38:58,560 --> 00:39:00,320
have some fancier detection and

1352
00:39:00,320 --> 00:39:01,359
monitoring there and

1353
00:39:01,359 --> 00:39:04,560
additional hunting capabilities

1354
00:39:04,560 --> 00:39:06,079
now i think also it's important that if

1355
00:39:06,079 --> 00:39:07,920
you see something say something so

1356
00:39:07,920 --> 00:39:09,760
at the bottom of these app consent

1357
00:39:09,760 --> 00:39:12,079
screens it'll have a does this app look

1358
00:39:12,079 --> 00:39:13,680
suspicious report it here

1359
00:39:13,680 --> 00:39:15,280
and that'll send it over to our team

1360
00:39:15,280 --> 00:39:16,720
over at microsoft and we'll be able to

1361
00:39:16,720 --> 00:39:18,240
take action on it so

1362
00:39:18,240 --> 00:39:19,520
if you see something like this and if

1363
00:39:19,520 --> 00:39:22,160
this app like data extractor doesn't

1364
00:39:22,160 --> 00:39:23,839
seem like something legitimate that your

1365
00:39:23,839 --> 00:39:25,280
user should be seeing feel free to

1366
00:39:25,280 --> 00:39:26,800
report it to us and we'll be able to do

1367
00:39:26,800 --> 00:39:28,880
something about it

1368
00:39:28,880 --> 00:39:31,839
now some further app consent resources

1369
00:39:31,839 --> 00:39:33,599
that if you are not already aware could

1370
00:39:33,599 --> 00:39:35,440
be really valuable for you to take note

1371
00:39:35,440 --> 00:39:35,920
of

1372
00:39:35,920 --> 00:39:37,520
so we have some incident response

1373
00:39:37,520 --> 00:39:39,760
playbooks at aka.mslash

1374
00:39:39,760 --> 00:39:42,240
ir playbooks so if you haven't updated

1375
00:39:42,240 --> 00:39:43,920
yours lately that would be a great place

1376
00:39:43,920 --> 00:39:44,800
to start

1377
00:39:44,800 --> 00:39:47,040
we also have a sample malicious app

1378
00:39:47,040 --> 00:39:47,839
consent

1379
00:39:47,839 --> 00:39:49,920
or app with a consent prompt it's

1380
00:39:49,920 --> 00:39:51,200
written in python

1381
00:39:51,200 --> 00:39:53,280
and so you can go to mark's github to be

1382
00:39:53,280 --> 00:39:54,720
able to go check that out if you want to

1383
00:39:54,720 --> 00:39:56,400
go scare some people and demo to them

1384
00:39:56,400 --> 00:39:57,920
why this is really valuable that they

1385
00:39:57,920 --> 00:39:59,200
should go look at it

1386
00:39:59,200 --> 00:40:00,960
and then if you felt like this app

1387
00:40:00,960 --> 00:40:02,640
consent section was really short and you

1388
00:40:02,640 --> 00:40:04,160
wanted to learn a little bit more about

1389
00:40:04,160 --> 00:40:04,480
it

1390
00:40:04,480 --> 00:40:06,560
there's actually a full length hour-long

1391
00:40:06,560 --> 00:40:08,319
talk available on youtube

1392
00:40:08,319 --> 00:40:12,319
at aka.msla b-side ct for connecticut

1393
00:40:12,319 --> 00:40:15,040
2020 on app consent and so you can watch

1394
00:40:15,040 --> 00:40:16,800
an hour-long version of this instead of

1395
00:40:16,800 --> 00:40:17,280
about

1396
00:40:17,280 --> 00:40:21,920
a 15-minute bit on app consent

1397
00:40:22,480 --> 00:40:23,920
so if we look a little bit different we

1398
00:40:23,920 --> 00:40:26,240
had a slight glitch um but so we are

1399
00:40:26,240 --> 00:40:26,640
back

1400
00:40:26,640 --> 00:40:28,960
on the recording and so to get into our

1401
00:40:28,960 --> 00:40:29,680
go do's

1402
00:40:29,680 --> 00:40:31,200
uh that we have mentioned throughout the

1403
00:40:31,200 --> 00:40:33,440
talk today if perhaps this was a lot of

1404
00:40:33,440 --> 00:40:34,000
content

1405
00:40:34,000 --> 00:40:36,000
also know that this entire talk is

1406
00:40:36,000 --> 00:40:37,440
recorded and i believe will be on

1407
00:40:37,440 --> 00:40:38,000
youtube

1408
00:40:38,000 --> 00:40:40,079
so feel free to go back and replay any

1409
00:40:40,079 --> 00:40:41,440
bits if you want to

1410
00:40:41,440 --> 00:40:42,960
have a little bit of a recap because i

1411
00:40:42,960 --> 00:40:44,640
recognize this is a lot of technical

1412
00:40:44,640 --> 00:40:46,560
content that we're throwing at you

1413
00:40:46,560 --> 00:40:48,319
so the first go-to that we have for you

1414
00:40:48,319 --> 00:40:50,480
today is to start moving your apps to

1415
00:40:50,480 --> 00:40:52,000
modern auth so at the very

1416
00:40:52,000 --> 00:40:53,520
beginning of the talk we talked about

1417
00:40:53,520 --> 00:40:56,000
the advantages of modern auth over basic

1418
00:40:56,000 --> 00:40:56,640
auth

1419
00:40:56,640 --> 00:40:58,800
in that you can mfa you have additional

1420
00:40:58,800 --> 00:41:00,560
monitoring and all the good stuff

1421
00:41:00,560 --> 00:41:03,040
um and also that your users credentials

1422
00:41:03,040 --> 00:41:03,920
are not going to be

1423
00:41:03,920 --> 00:41:07,119
exposed so moving those apps to modern

1424
00:41:07,119 --> 00:41:08,400
auth if at all possible

1425
00:41:08,400 --> 00:41:10,960
use open id connect or oauth 2. if

1426
00:41:10,960 --> 00:41:12,079
that's not possible

1427
00:41:12,079 --> 00:41:14,079
saml is also a good option especially

1428
00:41:14,079 --> 00:41:16,240
because it's been around for so long

1429
00:41:16,240 --> 00:41:17,760
the second thing that we recommend that

1430
00:41:17,760 --> 00:41:19,680
y'all do is protect your

1431
00:41:19,680 --> 00:41:23,359
idp like your domain controllers

1432
00:41:23,359 --> 00:41:25,599
um so also protecting and monitoring

1433
00:41:25,599 --> 00:41:26,720
your certificates

1434
00:41:26,720 --> 00:41:28,640
and all of this kind of bubbles up into

1435
00:41:28,640 --> 00:41:30,240
those golden samuel attacks that we've

1436
00:41:30,240 --> 00:41:31,520
been seeing especially if you're

1437
00:41:31,520 --> 00:41:32,400
orgasing

1438
00:41:32,400 --> 00:41:34,000
so laurie it happened what do we do to

1439
00:41:34,000 --> 00:41:35,839
help um reduce our risk of something

1440
00:41:35,839 --> 00:41:37,359
like that happening to us

1441
00:41:37,359 --> 00:41:39,119
protecting your idp like your domain

1442
00:41:39,119 --> 00:41:41,040
controllers the next thing to kind of

1443
00:41:41,040 --> 00:41:41,599
look into

1444
00:41:41,599 --> 00:41:43,280
is ensuring that you have inactivity

1445
00:41:43,280 --> 00:41:46,160
timeouts and maximum token lifetimes

1446
00:41:46,160 --> 00:41:47,520
and then if you would like more

1447
00:41:47,520 --> 00:41:49,520
information on some

1448
00:41:49,520 --> 00:41:51,280
things to do in terms of security and

1449
00:41:51,280 --> 00:41:54,319
operations if you go to aka dot ms slash

1450
00:41:54,319 --> 00:41:55,520
azure adsec

1451
00:41:55,520 --> 00:41:57,599
ops we have a guide for you on things to

1452
00:41:57,599 --> 00:41:59,440
monitor different risk levels

1453
00:41:59,440 --> 00:42:00,880
and things that you can do within azure

1454
00:42:00,880 --> 00:42:02,800
id and if you don't use azure id

1455
00:42:02,800 --> 00:42:04,079
it's still a good guide to get you

1456
00:42:04,079 --> 00:42:06,079
started on some best practices that you

1457
00:42:06,079 --> 00:42:09,119
can apply to your own identity provider

1458
00:42:09,119 --> 00:42:10,560
the third thing that we really want to

1459
00:42:10,560 --> 00:42:12,160
stress is that you should use the

1460
00:42:12,160 --> 00:42:13,599
correct oauth 2

1461
00:42:13,599 --> 00:42:16,000
or open id connect flow for the job so

1462
00:42:16,000 --> 00:42:17,359
mark went through several different

1463
00:42:17,359 --> 00:42:18,079
flows

1464
00:42:18,079 --> 00:42:19,760
look into those and determine what's

1465
00:42:19,760 --> 00:42:21,200
best for your

1466
00:42:21,200 --> 00:42:24,480
situation also encourage your developers

1467
00:42:24,480 --> 00:42:25,760
to use a library and

1468
00:42:25,760 --> 00:42:27,920
not to roll their own just like as mark

1469
00:42:27,920 --> 00:42:29,200
mentioned how you wouldn't want them

1470
00:42:29,200 --> 00:42:30,720
creating their own cryptographic

1471
00:42:30,720 --> 00:42:31,599
algorithm

1472
00:42:31,599 --> 00:42:33,280
you don't want them to roll their own

1473
00:42:33,280 --> 00:42:35,760
libraries and so also in addition to

1474
00:42:35,760 --> 00:42:36,079
that

1475
00:42:36,079 --> 00:42:38,480
moving away from ropc if at all possible

1476
00:42:38,480 --> 00:42:39,359
because again

1477
00:42:39,359 --> 00:42:41,200
the whole purpose of using modern auth

1478
00:42:41,200 --> 00:42:42,720
one of the big selling points is that

1479
00:42:42,720 --> 00:42:44,480
you are not exposing that user's

1480
00:42:44,480 --> 00:42:45,599
credentials

1481
00:42:45,599 --> 00:42:47,520
and so if you already have apps using

1482
00:42:47,520 --> 00:42:49,680
ropc try to move over to a different

1483
00:42:49,680 --> 00:42:50,800
flow

1484
00:42:50,800 --> 00:42:52,720
the fourth thing is to ensure least

1485
00:42:52,720 --> 00:42:54,480
privilege is being followed by internal

1486
00:42:54,480 --> 00:42:55,920
and isb apps

1487
00:42:55,920 --> 00:42:58,560
so if you do end up running um that

1488
00:42:58,560 --> 00:43:00,240
powershell script to go see all of those

1489
00:43:00,240 --> 00:43:00,960
permissions

1490
00:43:00,960 --> 00:43:02,720
or if you do check up on permissions in

1491
00:43:02,720 --> 00:43:04,880
your environment you know call upon your

1492
00:43:04,880 --> 00:43:06,480
vendors to see if they can

1493
00:43:06,480 --> 00:43:08,480
make an app be lesser permissioned or

1494
00:43:08,480 --> 00:43:09,599
use the least privilege

1495
00:43:09,599 --> 00:43:11,920
possible if you believe that app is over

1496
00:43:11,920 --> 00:43:13,440
permissioned also your internal

1497
00:43:13,440 --> 00:43:14,720
developers look into

1498
00:43:14,720 --> 00:43:16,800
if they can use a lesser permission to

1499
00:43:16,800 --> 00:43:18,640
do that particular action

1500
00:43:18,640 --> 00:43:20,560
also look at current consented apps for

1501
00:43:20,560 --> 00:43:22,079
those that are suspicious the ones that

1502
00:43:22,079 --> 00:43:24,800
have really generic names like oh 365

1503
00:43:24,800 --> 00:43:25,520
access

1504
00:43:25,520 --> 00:43:28,480
or just mail we've seen other ones with

1505
00:43:28,480 --> 00:43:30,400
more hackery sounding names but often

1506
00:43:30,400 --> 00:43:31,920
times these apps are trying to hide in

1507
00:43:31,920 --> 00:43:33,440
plain sight so you're going to see a lot

1508
00:43:33,440 --> 00:43:34,720
of really bland

1509
00:43:34,720 --> 00:43:37,520
generic names on there within that also

1510
00:43:37,520 --> 00:43:39,119
updating your instant response

1511
00:43:39,119 --> 00:43:40,880
books for this type of attack and if you

1512
00:43:40,880 --> 00:43:42,319
wanted to that youtube link that i

1513
00:43:42,319 --> 00:43:43,920
shared earlier to go watch that

1514
00:43:43,920 --> 00:43:48,319
full bit of content on those app consent

1515
00:43:48,319 --> 00:43:51,119
phishing attacks and the very last thing

1516
00:43:51,119 --> 00:43:52,880
is to go deeper on oauth 2

1517
00:43:52,880 --> 00:43:55,440
open id connect saml json web tokens

1518
00:43:55,440 --> 00:43:57,119
this is going to be the new ntlm

1519
00:43:57,119 --> 00:43:59,839
kerberos tickets so if you are an

1520
00:43:59,839 --> 00:44:00,880
subject matter

1521
00:44:00,880 --> 00:44:03,359
subject matter expert on you know ntlm

1522
00:44:03,359 --> 00:44:04,880
kerberos all of that

1523
00:44:04,880 --> 00:44:06,960
just know that the next wave of stuff

1524
00:44:06,960 --> 00:44:08,000
that you're going to need to know

1525
00:44:08,000 --> 00:44:10,960
is a lot to open id connect and some of

1526
00:44:10,960 --> 00:44:12,640
the stuff that we've talked about today

1527
00:44:12,640 --> 00:44:14,240
so really set aside some time to go

1528
00:44:14,240 --> 00:44:15,599
through those flows and make sure that

1529
00:44:15,599 --> 00:44:16,319
you were

1530
00:44:16,319 --> 00:44:19,040
able to accurately defend on those and

1531
00:44:19,040 --> 00:44:19,520
so

1532
00:44:19,520 --> 00:44:21,040
as we close out mark was there anything

1533
00:44:21,040 --> 00:44:23,599
else that you wanted to share today

1534
00:44:23,599 --> 00:44:25,119
no i think that's it i mean i just

1535
00:44:25,119 --> 00:44:26,800
really can't stress that last one like

1536
00:44:26,800 --> 00:44:28,319
you're going to be seeing more apps that

1537
00:44:28,319 --> 00:44:30,079
use these protocols not less as you go

1538
00:44:30,079 --> 00:44:31,920
forward so this is really worth the time

1539
00:44:31,920 --> 00:44:32,640
i mean

1540
00:44:32,640 --> 00:44:34,319
we went very quickly through i mean this

1541
00:44:34,319 --> 00:44:36,319
is some very complex topics

1542
00:44:36,319 --> 00:44:37,839
that you may not have been exposed to so

1543
00:44:37,839 --> 00:44:39,200
we have quite a bit of time here i think

1544
00:44:39,200 --> 00:44:40,640
for us to be in the chat to answer

1545
00:44:40,640 --> 00:44:41,680
questions um this

1546
00:44:41,680 --> 00:44:43,920
is a very hard talk to do with no

1547
00:44:43,920 --> 00:44:46,240
audience

1548
00:44:46,240 --> 00:44:47,680
faces or anything like that so we have

1549
00:44:47,680 --> 00:44:49,520
no idea if you you followed it so

1550
00:44:49,520 --> 00:44:50,960
we'll be um in the chat here to answer

1551
00:44:50,960 --> 00:44:52,240
any questions but yeah please make sure

1552
00:44:52,240 --> 00:44:53,280
you spend some time

1553
00:44:53,280 --> 00:44:54,480
understand this stuff because you're

1554
00:44:54,480 --> 00:44:55,920
going to really want to do this i know

1555
00:44:55,920 --> 00:44:57,200
some of the best security people

1556
00:44:57,200 --> 00:44:58,640
they really understand ntlm they really

1557
00:44:58,640 --> 00:45:00,400
understand kerberos tickets kerberos and

1558
00:45:00,400 --> 00:45:01,280
all that good stuff

1559
00:45:01,280 --> 00:45:02,319
this is going to be the next way with

1560
00:45:02,319 --> 00:45:03,359
that stuff so you really want to make

1561
00:45:03,359 --> 00:45:05,119
sure this is a good investment of your

1562
00:45:05,119 --> 00:45:07,280
um timing career to help protect this uh

1563
00:45:07,280 --> 00:45:08,480
protect your environment using this

1564
00:45:08,480 --> 00:45:09,200
stuff so

1565
00:45:09,200 --> 00:45:11,280
um with that we have some time for q a

1566
00:45:11,280 --> 00:45:12,800
bailey i will be in the discord

1567
00:45:12,800 --> 00:45:14,400
you can also reach us on twitter she's

1568
00:45:14,400 --> 00:45:16,160
at bailey bursick and she's shooting up

1569
00:45:16,160 --> 00:45:18,079
the twitter followers chart

1570
00:45:18,079 --> 00:45:19,839
i'm at mark morrow but feel free if you

1571
00:45:19,839 --> 00:45:20,720
watch this later if you have any

1572
00:45:20,720 --> 00:45:22,319
questions feel free to bring us up ping

1573
00:45:22,319 --> 00:45:23,440
us and we're happy to

1574
00:45:23,440 --> 00:45:29,920
answer anything we can

