1
00:00:01,520 --> 00:00:04,080
hello everyone my name is jeremy brown

2
00:00:04,080 --> 00:00:04,880
and this is

3
00:00:04,880 --> 00:00:09,280
summer of fuzz august 2021

4
00:00:09,280 --> 00:00:12,400
at the defcon 29 apsec village

5
00:00:12,400 --> 00:00:15,440
mac os edition

6
00:00:15,599 --> 00:00:18,160
quick run through the agenda uh we'll

7
00:00:18,160 --> 00:00:18,640
take

8
00:00:18,640 --> 00:00:20,320
a walkthrough of some of the debugging

9
00:00:20,320 --> 00:00:22,800
tools used on mac for fuzzing

10
00:00:22,800 --> 00:00:25,599
uh talk about sip and the app sandbox

11
00:00:25,599 --> 00:00:27,119
crash reporting

12
00:00:27,119 --> 00:00:30,640
uh how to deal with sleep and ssh stuff

13
00:00:30,640 --> 00:00:33,360
looking at process execution like

14
00:00:33,360 --> 00:00:36,559
enumerating file and url handlers

15
00:00:36,559 --> 00:00:38,239
client and network services how to

16
00:00:38,239 --> 00:00:39,760
discover those

17
00:00:39,760 --> 00:00:40,960
and then talk about fuzzing the

18
00:00:40,960 --> 00:00:43,840
different cli and gui apps

19
00:00:43,840 --> 00:00:45,520
filtering network clients and servers

20
00:00:45,520 --> 00:00:47,920
again and some of the bugs found

21
00:00:47,920 --> 00:00:51,680
then finish off with a conclusion

22
00:00:51,760 --> 00:00:54,800
so who am i uh mostly interested in bug

23
00:00:54,800 --> 00:00:55,600
hunting

24
00:00:55,600 --> 00:00:58,000
fuzzing offensive security these days

25
00:00:58,000 --> 00:00:59,600
previously doing security stuff

26
00:00:59,600 --> 00:01:02,800
at microsoft amazon and video to name a

27
00:01:02,800 --> 00:01:04,239
few

28
00:01:04,239 --> 00:01:07,360
like breaking stuff of course that feeds

29
00:01:07,360 --> 00:01:08,240
into attacking

30
00:01:08,240 --> 00:01:10,320
different products and services and you

31
00:01:10,320 --> 00:01:12,000
know for the most part helping them get

32
00:01:12,000 --> 00:01:13,119
in better shape

33
00:01:13,119 --> 00:01:15,040
before release as well as a ton of other

34
00:01:15,040 --> 00:01:16,799
security stuff

35
00:01:16,799 --> 00:01:19,680
uh don't i like various different

36
00:01:19,680 --> 00:01:20,320
domains

37
00:01:20,320 --> 00:01:22,880
native code web services cloud

38
00:01:22,880 --> 00:01:24,400
containers type stuff's all interesting

39
00:01:24,400 --> 00:01:27,840
as well

40
00:01:28,400 --> 00:01:30,560
so intro i didn't know much about mac

41
00:01:30,560 --> 00:01:32,560
security before doing this research

42
00:01:32,560 --> 00:01:34,479
i was pretty new to mac in general it's

43
00:01:34,479 --> 00:01:36,240
always one of those things where

44
00:01:36,240 --> 00:01:38,400
it's like ah it's on mac how do i you

45
00:01:38,400 --> 00:01:39,759
know everything is so different

46
00:01:39,759 --> 00:01:42,000
than the windows and linux world a lot

47
00:01:42,000 --> 00:01:43,920
of similarities with linux but

48
00:01:43,920 --> 00:01:46,079
just it was kind of a learning curve

49
00:01:46,079 --> 00:01:47,280
just getting into and trying to wrap

50
00:01:47,280 --> 00:01:50,479
your head around all this stuff

51
00:01:51,040 --> 00:01:52,799
but i've been fuzzing for a while now

52
00:01:52,799 --> 00:01:54,560
and you know there's so many advances

53
00:01:54,560 --> 00:01:56,719
these days especially with afl plus plus

54
00:01:56,719 --> 00:01:59,600
and and all the interesting stuff coming

55
00:01:59,600 --> 00:02:00,719
out of that area

56
00:02:00,719 --> 00:02:02,640
and innovations there but i really want

57
00:02:02,640 --> 00:02:05,840
to look at it at a different angle

58
00:02:05,840 --> 00:02:08,318
i wanted to kind of forget a lot of what

59
00:02:08,318 --> 00:02:09,038
i already knew

60
00:02:09,038 --> 00:02:10,720
and what was conventional wisdom and

61
00:02:10,720 --> 00:02:12,000
what you know everything about

62
00:02:12,000 --> 00:02:14,080
instrumentation these days and

63
00:02:14,080 --> 00:02:16,000
got to make it super fast and scale and

64
00:02:16,000 --> 00:02:17,440
all this stuff and

65
00:02:17,440 --> 00:02:19,360
there's so many targets that just make

66
00:02:19,360 --> 00:02:21,200
it really hard to make a fuzzer that

67
00:02:21,200 --> 00:02:23,760
does that just kind of general purpose

68
00:02:23,760 --> 00:02:24,480
that handles

69
00:02:24,480 --> 00:02:27,040
all these different targets but is

70
00:02:27,040 --> 00:02:28,239
really good at all those

71
00:02:28,239 --> 00:02:29,840
you know very innovative stuff that's

72
00:02:29,840 --> 00:02:31,440
happening in fuzzing these days so i

73
00:02:31,440 --> 00:02:32,959
want to build something from scratch

74
00:02:32,959 --> 00:02:36,000
that really serves a purpose um

75
00:02:36,000 --> 00:02:38,879
and that makes it easy to fuzz a lot of

76
00:02:38,879 --> 00:02:40,800
different things

77
00:02:40,800 --> 00:02:43,120
although making some trade-offs and of

78
00:02:43,120 --> 00:02:45,280
course this ties into mac because a lot

79
00:02:45,280 --> 00:02:46,000
of the

80
00:02:46,000 --> 00:02:48,800
targets i'll be showing how to fuzz

81
00:02:48,800 --> 00:02:50,720
these days and how to set up fuzzing for

82
00:02:50,720 --> 00:02:51,360
that

83
00:02:51,360 --> 00:02:53,040
we'll get you started fuzzing uh

84
00:02:53,040 --> 00:02:56,560
userland stuff on mac

85
00:02:57,040 --> 00:02:59,200
so i'm mostly looking at core uh the a

86
00:02:59,200 --> 00:03:00,239
lot of the default

87
00:03:00,239 --> 00:03:03,360
applications on os x you know

88
00:03:03,360 --> 00:03:06,480
like i said again client and gui apps

89
00:03:06,480 --> 00:03:07,920
uh stuff that parses stuff on the

90
00:03:07,920 --> 00:03:09,519
command line uh

91
00:03:09,519 --> 00:03:12,319
files um but you know a lot of more

92
00:03:12,319 --> 00:03:13,599
interesting stuff is actually fuzzing

93
00:03:13,599 --> 00:03:14,480
the gui part

94
00:03:14,480 --> 00:03:17,360
which afl can have a hard time doing and

95
00:03:17,360 --> 00:03:18,800
of course the network

96
00:03:18,800 --> 00:03:20,959
services and you know how to fuzz

97
00:03:20,959 --> 00:03:22,000
network stuff

98
00:03:22,000 --> 00:03:25,280
natively with a fuzzer and then how to

99
00:03:25,280 --> 00:03:26,480
set up the environment for debugging

100
00:03:26,480 --> 00:03:27,840
there's a lot of stuff to know to

101
00:03:27,840 --> 00:03:29,519
actually get started

102
00:03:29,519 --> 00:03:31,599
fuzzing and being able to debug and

103
00:03:31,599 --> 00:03:33,599
triage crashes and things like that on

104
00:03:33,599 --> 00:03:34,720
mac

105
00:03:34,720 --> 00:03:36,560
again we're not we're not trying to do

106
00:03:36,560 --> 00:03:38,159
something that scales for

107
00:03:38,159 --> 00:03:40,879
a huge fuzzing farm a lot of this stuff

108
00:03:40,879 --> 00:03:42,080
you can automate

109
00:03:42,080 --> 00:03:45,200
to make the tooling do that but this is

110
00:03:45,200 --> 00:03:46,319
you know a lot of these things you can

111
00:03:46,319 --> 00:03:47,040
reproduce

112
00:03:47,040 --> 00:03:49,680
at home with a macbook and you know

113
00:03:49,680 --> 00:03:53,040
still have fun finding bugs

114
00:03:54,080 --> 00:03:56,239
so related prior work ben nagy's always

115
00:03:56,239 --> 00:03:57,439
got a ton of good stuff

116
00:03:57,439 --> 00:04:00,400
on fuzzing osx and some tooling around

117
00:04:00,400 --> 00:04:00,959
that

118
00:04:00,959 --> 00:04:03,439
crashling wrangler there's some pretty

119
00:04:03,439 --> 00:04:04,879
good stuff there too

120
00:04:04,879 --> 00:04:06,640
uh and the inspiration for getting back

121
00:04:06,640 --> 00:04:09,120
and fuzzing uh for me was this uh

122
00:04:09,120 --> 00:04:12,959
tip out sh zine article which was

123
00:04:12,959 --> 00:04:14,560
pretty interesting it really made me

124
00:04:14,560 --> 00:04:16,798
think wow you know you can start over

125
00:04:16,798 --> 00:04:18,798
with something super simple

126
00:04:18,798 --> 00:04:21,839
and still be effective

127
00:04:22,639 --> 00:04:25,680
so debugging xcode is your you know

128
00:04:25,680 --> 00:04:27,199
development package

129
00:04:27,199 --> 00:04:29,040
there's a headless script you can find

130
00:04:29,040 --> 00:04:31,040
online that i've referenced

131
00:04:31,040 --> 00:04:33,040
and you want to enable enable developer

132
00:04:33,040 --> 00:04:34,960
mode

133
00:04:34,960 --> 00:04:36,880
so pretty straightforward able developer

134
00:04:36,880 --> 00:04:37,919
mode that's going to help you do a lot

135
00:04:37,919 --> 00:04:39,199
of debugging stuff

136
00:04:39,199 --> 00:04:44,639
especially in a non-interactive way

137
00:04:45,919 --> 00:04:47,280
and then guard malloc so this is

138
00:04:47,280 --> 00:04:48,960
something this is a malik helper

139
00:04:48,960 --> 00:04:50,960
that can help you find some subtle

140
00:04:50,960 --> 00:04:52,960
memory corruption bugs

141
00:04:52,960 --> 00:04:55,040
you can use it you could just pass the

142
00:04:55,040 --> 00:04:56,080
environmental argument

143
00:04:56,080 --> 00:04:59,199
to the library and then run your

144
00:04:59,199 --> 00:05:01,360
run your target and the arguments and it

145
00:05:01,360 --> 00:05:02,560
will uh

146
00:05:02,560 --> 00:05:04,320
basically help you find crashes a little

147
00:05:04,320 --> 00:05:06,800
bit easier and more crashes too that you

148
00:05:06,800 --> 00:05:08,400
may have missed by not

149
00:05:08,400 --> 00:05:11,440
instrumenting and using this library and

150
00:05:11,440 --> 00:05:12,560
you can read more about that

151
00:05:12,560 --> 00:05:15,360
at the libg malik but that's available

152
00:05:15,360 --> 00:05:18,080
on osx

153
00:05:20,320 --> 00:05:23,039
then lldb is the debugger of choice on

154
00:05:23,039 --> 00:05:24,960
mac gdb

155
00:05:24,960 --> 00:05:26,479
had a hard time getting it working and

156
00:05:26,479 --> 00:05:29,120
it's sort of oh you know the lldb is

157
00:05:29,120 --> 00:05:31,120
it's nice interface nice environment a

158
00:05:31,120 --> 00:05:32,880
lot of stuff's already set up for mac

159
00:05:32,880 --> 00:05:38,160
so um yeah probably recommend using that

160
00:05:38,160 --> 00:05:39,759
me and you can automate a lot of the

161
00:05:39,759 --> 00:05:41,199
crash triage

162
00:05:41,199 --> 00:05:44,160
and uh produce bucketing data um you can

163
00:05:44,160 --> 00:05:44,800
parse

164
00:05:44,800 --> 00:05:48,320
the um the debugger logs

165
00:05:48,320 --> 00:05:51,199
for you know to sort things by pc you

166
00:05:51,199 --> 00:05:52,000
know the

167
00:05:52,000 --> 00:05:53,759
return address the program counter

168
00:05:53,759 --> 00:05:56,240
instruction pointer all that stuff

169
00:05:56,240 --> 00:05:58,560
look at the back traces a lot of stuff

170
00:05:58,560 --> 00:06:00,240
you can just pass with dash o

171
00:06:00,240 --> 00:06:02,560
which is just passing different uh one

172
00:06:02,560 --> 00:06:05,440
line commands to lldb

173
00:06:05,440 --> 00:06:07,039
and this is how you do you know

174
00:06:07,039 --> 00:06:08,960
automatic crash triage uh

175
00:06:08,960 --> 00:06:12,719
for in a very you know simple way

176
00:06:14,479 --> 00:06:16,639
sip is an interesting one on mac so

177
00:06:16,639 --> 00:06:18,639
system integrity protection

178
00:06:18,639 --> 00:06:20,720
does a bunch of different stuff uh

179
00:06:20,720 --> 00:06:22,160
restricts the root user

180
00:06:22,160 --> 00:06:24,160
you know sign processes protect slash

181
00:06:24,160 --> 00:06:25,840
system all that stuff

182
00:06:25,840 --> 00:06:29,120
um for debugging and for fuzzing stuff

183
00:06:29,120 --> 00:06:32,479
uh you're gonna wanna either enable sip

184
00:06:32,479 --> 00:06:34,960
without

185
00:06:35,199 --> 00:06:38,160
without a certain mode or just disable

186
00:06:38,160 --> 00:06:41,039
entirely while you're using it for that

187
00:06:41,039 --> 00:06:42,080
because that's going to get in the way

188
00:06:42,080 --> 00:06:44,880
of a lot of again debugging app uh stuff

189
00:06:44,880 --> 00:06:46,560
that that you're going to want to

190
00:06:46,560 --> 00:06:49,280
utilize for fuzzing

191
00:06:49,280 --> 00:06:50,960
so on a physical machine you can reboot

192
00:06:50,960 --> 00:06:53,440
recovery mode and then disable it or

193
00:06:53,440 --> 00:06:57,680
again enable it without debug

194
00:06:58,000 --> 00:06:59,360
so that will give you some debug

195
00:06:59,360 --> 00:07:02,400
privileges essentially

196
00:07:02,400 --> 00:07:05,199
and if you're using vmware fusion uh or

197
00:07:05,199 --> 00:07:06,000
any other

198
00:07:06,000 --> 00:07:08,880
uh or you know virtual environment uh

199
00:07:08,880 --> 00:07:09,680
for mac

200
00:07:09,680 --> 00:07:12,639
for for fuzzing and debugging um there's

201
00:07:12,639 --> 00:07:14,240
a bunch of steps there's a few

202
00:07:14,240 --> 00:07:16,400
blog articles to go over it but

203
00:07:16,400 --> 00:07:17,440
essentially you have to

204
00:07:17,440 --> 00:07:19,599
do some special steps to get around

205
00:07:19,599 --> 00:07:20,720
startup disk and

206
00:07:20,720 --> 00:07:22,720
restart the firmware and and get this

207
00:07:22,720 --> 00:07:24,240
stuff to work on the latest uh

208
00:07:24,240 --> 00:07:27,280
os x and ox os x and os

209
00:07:27,280 --> 00:07:30,479
11. so yeah big sur

210
00:07:30,479 --> 00:07:32,639
it's a little bit different and all this

211
00:07:32,639 --> 00:07:33,680
stuff but essentially you

212
00:07:33,680 --> 00:07:36,080
you want to enable this uh to to be able

213
00:07:36,080 --> 00:07:36,720
to

214
00:07:36,720 --> 00:07:40,479
you know debug on os x

215
00:07:40,479 --> 00:07:42,160
in the app sandbox uh it's another

216
00:07:42,160 --> 00:07:43,599
interesting one that can get in the way

217
00:07:43,599 --> 00:07:45,120
of fuzzing

218
00:07:45,120 --> 00:07:48,080
it's not you can work around it but it

219
00:07:48,080 --> 00:07:50,240
is something just to keep in mind

220
00:07:50,240 --> 00:07:52,639
when you are trying to fuzz for example

221
00:07:52,639 --> 00:07:53,919
guise

222
00:07:53,919 --> 00:07:55,840
because a lot of files can only only be

223
00:07:55,840 --> 00:07:58,240
opened in certain locations

224
00:07:58,240 --> 00:08:00,080
so let's say you mutated files that are

225
00:08:00,080 --> 00:08:01,280
in temp

226
00:08:01,280 --> 00:08:04,160
and you know you place your fuzz files

227
00:08:04,160 --> 00:08:04,960
and temp

228
00:08:04,960 --> 00:08:07,440
or wherever on the file system if you

229
00:08:07,440 --> 00:08:09,520
try to open that with some apps

230
00:08:09,520 --> 00:08:11,120
you'll get uh it can be open because you

231
00:08:11,120 --> 00:08:13,840
not permission so if you check the logs

232
00:08:13,840 --> 00:08:15,520
you can see it's being denied the

233
00:08:15,520 --> 00:08:17,440
sandbox is actually denying that file

234
00:08:17,440 --> 00:08:19,520
read

235
00:08:19,520 --> 00:08:22,160
so you can there's other directories you

236
00:08:22,160 --> 00:08:23,280
can put them

237
00:08:23,280 --> 00:08:26,479
so again if you can

238
00:08:26,479 --> 00:08:27,919
you know if you can manipulate the file

239
00:08:27,919 --> 00:08:29,199
system if you can write in certain

240
00:08:29,199 --> 00:08:31,599
places you can figure out where

241
00:08:31,599 --> 00:08:35,120
they want to see files open from

242
00:08:35,120 --> 00:08:36,479
and of course you can still double click

243
00:08:36,479 --> 00:08:38,320
and open the epub file from from you

244
00:08:38,320 --> 00:08:40,159
know downloads directory and stuff

245
00:08:40,159 --> 00:08:42,080
but for local fuzzing you're going to

246
00:08:42,080 --> 00:08:43,440
want to place them

247
00:08:43,440 --> 00:08:46,959
in somewhere that when the

248
00:08:46,959 --> 00:08:49,200
target is launched it it looks like it's

249
00:08:49,200 --> 00:08:50,959
in a good location and in the sandbox is

250
00:08:50,959 --> 00:08:55,600
happy with it

251
00:08:55,600 --> 00:08:58,240
so a report crash is an interesting one

252
00:08:58,240 --> 00:08:59,200
um

253
00:08:59,200 --> 00:09:01,040
generally uh if you're fuzzing and

254
00:09:01,040 --> 00:09:02,240
you're catching your own crashes and

255
00:09:02,240 --> 00:09:03,200
stuff you don't

256
00:09:03,200 --> 00:09:05,760
you know you can just disable it it may

257
00:09:05,760 --> 00:09:06,240
just

258
00:09:06,240 --> 00:09:08,399
if nothing else for perf issues you may

259
00:09:08,399 --> 00:09:10,480
be worried about

260
00:09:10,480 --> 00:09:12,240
crash reports being sent to apple stuff

261
00:09:12,240 --> 00:09:13,519
like that

262
00:09:13,519 --> 00:09:14,880
there's other things you can work around

263
00:09:14,880 --> 00:09:17,120
for submit diag info

264
00:09:17,120 --> 00:09:18,720
but if you want to disable it for the

265
00:09:18,720 --> 00:09:21,680
most part that can be useful

266
00:09:21,680 --> 00:09:24,720
but also you can use it

267
00:09:24,720 --> 00:09:25,920
you can use it to your advantage when

268
00:09:25,920 --> 00:09:28,480
fuzzing because

269
00:09:28,480 --> 00:09:31,839
if you enable it in certain cases

270
00:09:31,839 --> 00:09:33,519
it will help you and you can actually

271
00:09:33,519 --> 00:09:36,240
use those crash logs that it catches and

272
00:09:36,240 --> 00:09:36,959
puts in the

273
00:09:36,959 --> 00:09:40,240
diagnostic logs folder uh for triage

274
00:09:40,240 --> 00:09:41,920
so if there's you know scenario say

275
00:09:41,920 --> 00:09:43,680
we're fuzzing

276
00:09:43,680 --> 00:09:46,240
uh a udp server where it's hard kind of

277
00:09:46,240 --> 00:09:47,760
hard to catch crashes

278
00:09:47,760 --> 00:09:49,519
um you know if you're fuzzing it from

279
00:09:49,519 --> 00:09:52,240
from like a black box screen watch

280
00:09:52,240 --> 00:09:55,600
gray box approach uh you can attach it

281
00:09:55,600 --> 00:09:57,600
uh if you can attach to it run it into

282
00:09:57,600 --> 00:09:59,040
bugger catch crashes

283
00:09:59,040 --> 00:10:01,279
that's great uh sometimes for whatever

284
00:10:01,279 --> 00:10:02,720
reason you can't

285
00:10:02,720 --> 00:10:06,240
uh and in that case we could monitor the

286
00:10:06,240 --> 00:10:08,880
diagnostic logs folder uh to look for

287
00:10:08,880 --> 00:10:10,720
crashes to know when there is a crash

288
00:10:10,720 --> 00:10:14,560
things like that so it can actually help

289
00:10:14,560 --> 00:10:18,720
to enable report crash in certain cases

290
00:10:18,720 --> 00:10:21,360
and sleep super important for humans but

291
00:10:21,360 --> 00:10:22,320
on a mac

292
00:10:22,320 --> 00:10:23,600
it gets really annoying when you're

293
00:10:23,600 --> 00:10:25,279
frozen and all of a sudden your session

294
00:10:25,279 --> 00:10:26,640
is disconnected because

295
00:10:26,640 --> 00:10:28,480
it went to sleep and there's like 10

296
00:10:28,480 --> 00:10:31,040
different sleep modes on mac

297
00:10:31,040 --> 00:10:35,760
they're super eco friendly in that way

298
00:10:35,760 --> 00:10:37,519
which is great when you're just using it

299
00:10:37,519 --> 00:10:39,279
as a user but when you're fuzzing

300
00:10:39,279 --> 00:10:42,560
i need the you know os to be super awake

301
00:10:42,560 --> 00:10:43,680
all the time

302
00:10:43,680 --> 00:10:44,959
and so there's a bunch of different ways

303
00:10:44,959 --> 00:10:46,720
you can do it system sleep tm set you

304
00:10:46,720 --> 00:10:48,160
can use keeping you awake

305
00:10:48,160 --> 00:10:51,519
on the desktop side um and there's still

306
00:10:51,519 --> 00:10:52,320
some more work

307
00:10:52,320 --> 00:10:55,760
to do with ssh though

308
00:10:55,760 --> 00:10:58,560
so with ssh you know it's nice to be

309
00:10:58,560 --> 00:11:00,240
able to fuss guys over sh

310
00:11:00,240 --> 00:11:03,519
instead of uh the physical session

311
00:11:03,519 --> 00:11:05,519
you don't have to have physical access

312
00:11:05,519 --> 00:11:07,440
to to fuzz things like that

313
00:11:07,440 --> 00:11:09,440
it'll just open up from the command line

314
00:11:09,440 --> 00:11:10,560
on your

315
00:11:10,560 --> 00:11:14,160
desktop session but ssh can

316
00:11:14,160 --> 00:11:15,519
depending on your network and the

317
00:11:15,519 --> 00:11:17,360
environment stuff like that it can be a

318
00:11:17,360 --> 00:11:17,920
pain

319
00:11:17,920 --> 00:11:20,560
to get it to not uh you know disconnect

320
00:11:20,560 --> 00:11:21,279
your sessions

321
00:11:21,279 --> 00:11:23,839
uh in the middle of fuzzing so i wrote a

322
00:11:23,839 --> 00:11:25,279
bunch of stuff into a fuzzer that

323
00:11:25,279 --> 00:11:28,079
that tries to help with this by doing

324
00:11:28,079 --> 00:11:29,200
like these custom

325
00:11:29,200 --> 00:11:30,959
console pings to make sure it's always

326
00:11:30,959 --> 00:11:33,279
alive and things like that

327
00:11:33,279 --> 00:11:36,399
but uh yeah surprisingly uh that's it

328
00:11:36,399 --> 00:11:38,880
can be a lot of work just to make it not

329
00:11:38,880 --> 00:11:41,839
disconnect your session a lot so so one

330
00:11:41,839 --> 00:11:42,480
way to do it

331
00:11:42,480 --> 00:11:45,920
is modify the the your daemon config

332
00:11:45,920 --> 00:11:48,480
to do keep lives and zero zero for the

333
00:11:48,480 --> 00:11:50,320
client alive stuff

334
00:11:50,320 --> 00:11:53,040
and then restart the daemon this may not

335
00:11:53,040 --> 00:11:53,680
work for every

336
00:11:53,680 --> 00:11:55,519
everyone and again the network

337
00:11:55,519 --> 00:11:57,440
environment you know how many

338
00:11:57,440 --> 00:11:59,760
um you know whatever's going on your

339
00:11:59,760 --> 00:12:01,040
network how many disconnections you

340
00:12:01,040 --> 00:12:02,240
normally get or

341
00:12:02,240 --> 00:12:04,399
things like that can factor in uh but

342
00:12:04,399 --> 00:12:05,760
this is one way i found to do it to

343
00:12:05,760 --> 00:12:08,240
avoid that

344
00:12:08,240 --> 00:12:10,399
so for monitoring process execution uh

345
00:12:10,399 --> 00:12:12,160
see what's going on in the system

346
00:12:12,160 --> 00:12:14,160
there's a really handy dtrace script

347
00:12:14,160 --> 00:12:16,160
that's included on mac now

348
00:12:16,160 --> 00:12:19,200
uh called new proc d and you can use

349
00:12:19,200 --> 00:12:19,600
this

350
00:12:19,600 --> 00:12:22,320
uh again if you disabled sip or or gave

351
00:12:22,320 --> 00:12:24,000
yourself the bug privileges

352
00:12:24,000 --> 00:12:27,040
um you can use this to see

353
00:12:27,040 --> 00:12:29,040
all the stuff that's being executed and

354
00:12:29,040 --> 00:12:31,600
the command command line args for that

355
00:12:31,600 --> 00:12:33,440
which is super useful for looking at you

356
00:12:33,440 --> 00:12:35,120
know what is the attack service here

357
00:12:35,120 --> 00:12:36,320
and you can see different stuff

358
00:12:36,320 --> 00:12:38,639
happening like turning off file sharing

359
00:12:38,639 --> 00:12:41,200
turning on vnc stuff you know turning on

360
00:12:41,200 --> 00:12:42,320
printer sharing

361
00:12:42,320 --> 00:12:44,560
all those things when you're launching

362
00:12:44,560 --> 00:12:46,000
apps you can see what args are being

363
00:12:46,000 --> 00:12:46,480
launched

364
00:12:46,480 --> 00:12:49,360
although with xpc proxy that sort of

365
00:12:49,360 --> 00:12:50,639
does a lot of stuff under the hood

366
00:12:50,639 --> 00:12:52,480
instead of on the console

367
00:12:52,480 --> 00:12:53,839
which makes things a little bit harder

368
00:12:53,839 --> 00:12:57,360
to debug or see what's actually going on

369
00:12:57,360 --> 00:13:00,079
but uh d-trace is amazing and uh super

370
00:13:00,079 --> 00:13:00,800
helpful for

371
00:13:00,800 --> 00:13:06,000
process process execution stuff

372
00:13:06,000 --> 00:13:08,000
numerating the handlers i came across

373
00:13:08,000 --> 00:13:09,920
the swift default apps

374
00:13:09,920 --> 00:13:12,800
pretty cool project um you can it's got

375
00:13:12,800 --> 00:13:13,519
a

376
00:13:13,519 --> 00:13:16,320
swda

377
00:13:16,639 --> 00:13:18,639
program that will give you all the ur

378
00:13:18,639 --> 00:13:20,639
uri handlers

379
00:13:20,639 --> 00:13:22,399
so you can see what applications are

380
00:13:22,399 --> 00:13:23,680
handling

381
00:13:23,680 --> 00:13:27,920
address book afp cfs

382
00:13:27,920 --> 00:13:30,959
facetime stuff files all that stuff and

383
00:13:30,959 --> 00:13:32,480
you can see there's 101 different

384
00:13:32,480 --> 00:13:33,440
handlers so

385
00:13:33,440 --> 00:13:35,760
so yeah plenty of interesting stuff to

386
00:13:35,760 --> 00:13:38,399
poke at there

387
00:13:38,880 --> 00:13:41,040
and then for the file handlers you can

388
00:13:41,040 --> 00:13:42,480
see what stuff is actually

389
00:13:42,480 --> 00:13:45,440
handling the different file types that

390
00:13:45,440 --> 00:13:46,160
are registered

391
00:13:46,160 --> 00:13:50,720
on a mac so your flash videos pdfs

392
00:13:50,720 --> 00:13:52,800
archives you can see archives handled by

393
00:13:52,800 --> 00:13:54,000
archive utility

394
00:13:54,000 --> 00:13:57,839
things like that if you do a list 420

395
00:13:57,839 --> 00:14:00,160
different file formats that are

396
00:14:00,160 --> 00:14:02,639
registered to an application um

397
00:14:02,639 --> 00:14:06,320
yeah if you if you imagine uh half or

398
00:14:06,320 --> 00:14:08,000
or whatever are valid and they're

399
00:14:08,000 --> 00:14:09,360
actually going to map to something

400
00:14:09,360 --> 00:14:11,279
that's actually parsing the file format

401
00:14:11,279 --> 00:14:12,800
there's still a ton of attack surface

402
00:14:12,800 --> 00:14:17,279
there so lots of good stuff

403
00:14:17,279 --> 00:14:18,560
uh it doesn't necessarily tell you the

404
00:14:18,560 --> 00:14:20,560
file extensions so for example

405
00:14:20,560 --> 00:14:23,519
the apple script um you know it doesn't

406
00:14:23,519 --> 00:14:26,399
tell you exactly what the file type

407
00:14:26,399 --> 00:14:28,399
may be or the the file extension that

408
00:14:28,399 --> 00:14:30,079
you would want to look for to get

409
00:14:30,079 --> 00:14:33,279
test cases to fuzz with for example

410
00:14:33,279 --> 00:14:34,399
but so you may have to do a little bit

411
00:14:34,399 --> 00:14:36,399
of work for that when you start

412
00:14:36,399 --> 00:14:38,079
targeting an application

413
00:14:38,079 --> 00:14:42,079
but for the most part it's super helpful

414
00:14:42,160 --> 00:14:43,680
looking at network processes again we

415
00:14:43,680 --> 00:14:45,279
can use dtrace

416
00:14:45,279 --> 00:14:48,959
to capture um the different uh receive

417
00:14:48,959 --> 00:14:50,240
calls

418
00:14:50,240 --> 00:14:51,920
or sends that are coming across the

419
00:14:51,920 --> 00:14:54,240
network and we can see which processes

420
00:14:54,240 --> 00:14:55,199
are actually

421
00:14:55,199 --> 00:14:57,839
receiving network data and you know

422
00:14:57,839 --> 00:15:01,440
probably operating on that network data

423
00:15:04,240 --> 00:15:06,480
you can also just turn on everything you

424
00:15:06,480 --> 00:15:08,399
know system preferences

425
00:15:08,399 --> 00:15:10,240
sharing turn on everything look at

426
00:15:10,240 --> 00:15:12,320
netstat you get a good idea

427
00:15:12,320 --> 00:15:15,360
of what's listening uh you can use lsof

428
00:15:15,360 --> 00:15:17,760
to look at process more process

429
00:15:17,760 --> 00:15:18,959
information

430
00:15:18,959 --> 00:15:22,079
and other tooling too uh but uh

431
00:15:22,079 --> 00:15:23,920
yeah that's that's one way to look at

432
00:15:23,920 --> 00:15:27,839
the network services that are listening

433
00:15:31,759 --> 00:15:34,639
so for fuzzing

434
00:15:35,440 --> 00:15:41,440
afl if you try to run traditional afl

435
00:15:41,440 --> 00:15:44,480
on on mac um

436
00:15:44,480 --> 00:15:46,720
it doesn't work so well uh doesn't think

437
00:15:46,720 --> 00:15:48,320
a lot of things are a mock o even though

438
00:15:48,320 --> 00:15:49,120
it knows

439
00:15:49,120 --> 00:15:51,360
supposed to know how to recognize those

440
00:15:51,360 --> 00:15:52,720
afl plus plus again

441
00:15:52,720 --> 00:15:55,600
a ton of new development there looks

442
00:15:55,600 --> 00:15:56,880
like they got that figured out so you

443
00:15:56,880 --> 00:15:58,560
can use afl plus plus

444
00:15:58,560 --> 00:16:00,320
when you're fuzzing on mac with on

445
00:16:00,320 --> 00:16:02,320
simple console applications

446
00:16:02,320 --> 00:16:05,759
things like that but what about gui apps

447
00:16:05,759 --> 00:16:08,480
you know it doesn't work so well you

448
00:16:08,480 --> 00:16:08,800
know

449
00:16:08,800 --> 00:16:10,240
just just fundamentally the way it's

450
00:16:10,240 --> 00:16:12,720
designed uh it just doesn't optimize

451
00:16:12,720 --> 00:16:15,600
for doing things like that um you know

452
00:16:15,600 --> 00:16:17,120
it's it's looking for the program to

453
00:16:17,120 --> 00:16:18,160
exit for example

454
00:16:18,160 --> 00:16:20,320
uh and you know a lot of gui apps you

455
00:16:20,320 --> 00:16:21,600
need to exit them manually if you're

456
00:16:21,600 --> 00:16:22,000
going to open

457
00:16:22,000 --> 00:16:25,440
them what about network fuzzing windows

458
00:16:25,440 --> 00:16:27,519
yeah when afl and afl net a lot of

459
00:16:27,519 --> 00:16:29,120
respect goes to them

460
00:16:29,120 --> 00:16:31,199
very interesting projects but they have

461
00:16:31,199 --> 00:16:32,480
some limitations too

462
00:16:32,480 --> 00:16:34,320
and there's quite a bit of setup that

463
00:16:34,320 --> 00:16:37,440
goes along with them

464
00:16:37,440 --> 00:16:41,680
so uh wrote a new fuzzer recently

465
00:16:41,680 --> 00:16:43,440
that we'll be releasing in a few weeks

466
00:16:43,440 --> 00:16:45,360
if all goes well

467
00:16:45,360 --> 00:16:48,720
called life fuzz it just works

468
00:16:48,720 --> 00:16:50,720
that's the biggest theme you know i

469
00:16:50,720 --> 00:16:52,079
wanted a fuzzer that

470
00:16:52,079 --> 00:16:53,600
i didn't need a different setup on mac i

471
00:16:53,600 --> 00:16:55,360
didn't need a different setup on windows

472
00:16:55,360 --> 00:16:59,199
it worked on linux it you know i wanted

473
00:16:59,199 --> 00:16:59,839
to support

474
00:16:59,839 --> 00:17:02,079
file network fuzzing i want to be able

475
00:17:02,079 --> 00:17:03,920
to fix gui's

476
00:17:03,920 --> 00:17:06,079
even interactive ones like postman or

477
00:17:06,079 --> 00:17:08,319
filezilla stuff like that

478
00:17:08,319 --> 00:17:10,079
you always want you know automatic crash

479
00:17:10,079 --> 00:17:11,520
triage

480
00:17:11,520 --> 00:17:13,439
diffing as much information as much

481
00:17:13,439 --> 00:17:14,799
artifacts as possible that you can

482
00:17:14,799 --> 00:17:16,319
create

483
00:17:16,319 --> 00:17:18,640
to give yourself a you know a good

484
00:17:18,640 --> 00:17:19,439
analysis

485
00:17:19,439 --> 00:17:22,720
and a way to repro uh different crashes

486
00:17:22,720 --> 00:17:25,280
um lifos is most useful for closing

487
00:17:25,280 --> 00:17:26,799
source applications again

488
00:17:26,799 --> 00:17:29,039
um clients and servers that's what sort

489
00:17:29,039 --> 00:17:30,799
of was meant for of course you can do

490
00:17:30,799 --> 00:17:33,039
open source libraries and stuff too

491
00:17:33,039 --> 00:17:36,000
and it's really built for buck hunters

492
00:17:36,000 --> 00:17:36,720
it does some

493
00:17:36,720 --> 00:17:38,320
pretty interesting things unorthodox

494
00:17:38,320 --> 00:17:40,240
fashion um

495
00:17:40,240 --> 00:17:43,679
and it's it's able to sort of live off

496
00:17:43,679 --> 00:17:44,320
the land

497
00:17:44,320 --> 00:17:47,200
in a way and i'll talk about the

498
00:17:47,200 --> 00:17:48,000
trade-offs

499
00:17:48,000 --> 00:17:50,960
here in a moment for that

500
00:17:51,039 --> 00:17:52,960
so uh it breaks a lot of rules for

501
00:17:52,960 --> 00:17:54,880
modern fuzzing uh you know these days

502
00:17:54,880 --> 00:17:56,480
everything is about how fast can we do

503
00:17:56,480 --> 00:17:57,200
it

504
00:17:57,200 --> 00:17:59,039
how can we instrument this like how can

505
00:17:59,039 --> 00:18:01,280
we get down and get code coverage for

506
00:18:01,280 --> 00:18:02,240
every single

507
00:18:02,240 --> 00:18:04,960
um you know every single iteration uh

508
00:18:04,960 --> 00:18:06,000
how can we fuzz it

509
00:18:06,000 --> 00:18:08,880
you know a million iterations things

510
00:18:08,880 --> 00:18:09,919
like that

511
00:18:09,919 --> 00:18:13,120
um life us doesn't do that it says

512
00:18:13,120 --> 00:18:14,640
okay i want to cover all these different

513
00:18:14,640 --> 00:18:17,919
domains uh and i want to

514
00:18:17,919 --> 00:18:19,760
be able to not have to worry about

515
00:18:19,760 --> 00:18:21,679
crossfit platform problems for the most

516
00:18:21,679 --> 00:18:22,480
part you know

517
00:18:22,480 --> 00:18:25,200
other than if defs and stuff and i want

518
00:18:25,200 --> 00:18:26,960
to make to make it super simple to set

519
00:18:26,960 --> 00:18:28,320
up and i don't want it to

520
00:18:28,320 --> 00:18:30,240
fail it only works on this type of

521
00:18:30,240 --> 00:18:31,360
application or

522
00:18:31,360 --> 00:18:33,280
oh you gotta you know spend several

523
00:18:33,280 --> 00:18:34,880
hours instrumenting this app or getting

524
00:18:34,880 --> 00:18:36,080
it set up

525
00:18:36,080 --> 00:18:38,640
i want to make a trade-off to forget a

526
00:18:38,640 --> 00:18:41,360
lot of that stuff and just say okay

527
00:18:41,360 --> 00:18:43,280
it can flush black box apps it can focus

528
00:18:43,280 --> 00:18:45,520
open source but it doesn't need

529
00:18:45,520 --> 00:18:47,200
tons and tons of time to get set up you

530
00:18:47,200 --> 00:18:49,039
can start fuzzing as soon as you get

531
00:18:49,039 --> 00:18:50,799
some test cases for the most part

532
00:18:50,799 --> 00:18:53,440
on three different major platforms it

533
00:18:53,440 --> 00:18:55,520
doesn't have the

534
00:18:55,520 --> 00:18:58,000
devops integration stuff with automatic

535
00:18:58,000 --> 00:19:00,000
bug filing and all things like that

536
00:19:00,000 --> 00:19:04,000
of course it can be written around that

537
00:19:04,000 --> 00:19:06,720
and that can be a feature but most

538
00:19:06,720 --> 00:19:09,039
importantly what should be judged by

539
00:19:09,039 --> 00:19:12,400
for a bug hunter does it find bugs

540
00:19:12,400 --> 00:19:15,520
uh does it find bugs does it do does it

541
00:19:15,520 --> 00:19:17,039
do what it was meant to do like if

542
00:19:17,039 --> 00:19:18,480
you're fuzzing and you're not

543
00:19:18,480 --> 00:19:19,919
you're not finding any bug like you have

544
00:19:19,919 --> 00:19:21,840
all this infrastructure set up and

545
00:19:21,840 --> 00:19:24,240
everything's going great and but if

546
00:19:24,240 --> 00:19:26,080
you're not finding bugs and you're not

547
00:19:26,080 --> 00:19:28,400
uh you know getting like actionable

548
00:19:28,400 --> 00:19:29,200
stuff out of

549
00:19:29,200 --> 00:19:32,240
out of the tooling you know you can

550
00:19:32,240 --> 00:19:34,160
measure it how you like but uh

551
00:19:34,160 --> 00:19:37,520
i like to find bugs but then you ask

552
00:19:37,520 --> 00:19:38,799
yeah i don't know the fuzzer is doing a

553
00:19:38,799 --> 00:19:40,559
good job how have we compared it against

554
00:19:40,559 --> 00:19:42,080
other fuzzers how we did things like

555
00:19:42,080 --> 00:19:42,400
that

556
00:19:42,400 --> 00:19:44,400
how where how does the stack against afl

557
00:19:44,400 --> 00:19:45,520
other than the you know

558
00:19:45,520 --> 00:19:48,480
stuff we talked about um yeah does it

559
00:19:48,480 --> 00:19:49,200
find bugs

560
00:19:49,200 --> 00:19:51,280
that's what i'm optimizing towards and

561
00:19:51,280 --> 00:19:54,799
i've acknowledged trade-offs there too

562
00:19:55,120 --> 00:19:58,480
so with fuzzing mac uh some there's some

563
00:19:58,480 --> 00:19:59,840
intricacies

564
00:19:59,840 --> 00:20:02,960
around gui apps for example um

565
00:20:02,960 --> 00:20:05,200
notice when those fuzzing some apps they

566
00:20:05,200 --> 00:20:06,640
like unique file names if you give them

567
00:20:06,640 --> 00:20:07,600
another file name

568
00:20:07,600 --> 00:20:09,200
maybe they cached it or maybe they

569
00:20:09,200 --> 00:20:11,360
remember it somehow

570
00:20:11,360 --> 00:20:13,679
and it doesn't doesn't feel so well like

571
00:20:13,679 --> 00:20:15,840
that so they like unique file names

572
00:20:15,840 --> 00:20:19,039
uh some some apps at least they also

573
00:20:19,039 --> 00:20:20,559
prefer to have the right extension in a

574
00:20:20,559 --> 00:20:23,600
lot of times so you don't want to just

575
00:20:23,600 --> 00:20:25,280
create a bunch of files that are named

576
00:20:25,280 --> 00:20:27,200
dot fuzz um

577
00:20:27,200 --> 00:20:30,640
you tried to copy the

578
00:20:30,640 --> 00:20:32,960
input file name the test case whatever

579
00:20:32,960 --> 00:20:34,720
it was named on the extension as much as

580
00:20:34,720 --> 00:20:36,240
possible to make it look like you know a

581
00:20:36,240 --> 00:20:38,400
legit file so the parser's

582
00:20:38,400 --> 00:20:41,039
more willing to uh not bail when it

583
00:20:41,039 --> 00:20:42,080
looks at it and says oh

584
00:20:42,080 --> 00:20:44,000
you know i don't know what dot fuzz is

585
00:20:44,000 --> 00:20:46,960
but i know what dot pdf is for example

586
00:20:46,960 --> 00:20:48,559
and again with reading files within

587
00:20:48,559 --> 00:20:50,240
sandbox you may need to place

588
00:20:50,240 --> 00:20:53,200
the test cases in a certain uh folder uh

589
00:20:53,200 --> 00:20:53,679
which

590
00:20:53,679 --> 00:20:56,240
of course is an easy command line thing

591
00:20:56,240 --> 00:20:56,880
to do

592
00:20:56,880 --> 00:20:59,440
to choose that uh but some things are

593
00:20:59,440 --> 00:21:01,039
just hard to fuss directly

594
00:21:01,039 --> 00:21:04,559
so sometimes passing a command line arg

595
00:21:04,559 --> 00:21:06,080
it just won't accept it it wants it

596
00:21:06,080 --> 00:21:08,159
through another another piece of

597
00:21:08,159 --> 00:21:09,120
plumbing somewhere

598
00:21:09,120 --> 00:21:12,320
through ipc for example but

599
00:21:12,320 --> 00:21:15,200
many of the classic apps and a lot of

600
00:21:15,200 --> 00:21:16,480
the stuff on mac

601
00:21:16,480 --> 00:21:18,799
still work as command line apps for

602
00:21:18,799 --> 00:21:20,400
example so

603
00:21:20,400 --> 00:21:21,760
still quite a bit of attack service to

604
00:21:21,760 --> 00:21:23,919
tackle there

605
00:21:23,919 --> 00:21:27,360
so for target application do a cli

606
00:21:27,360 --> 00:21:29,919
or gui we're going to look at ibooks

607
00:21:29,919 --> 00:21:32,320
fontbook package util

608
00:21:32,320 --> 00:21:34,720
you know collect the test files again if

609
00:21:34,720 --> 00:21:37,120
it's not a known extension

610
00:21:37,120 --> 00:21:40,320
and it may not open it and you you need

611
00:21:40,320 --> 00:21:42,159
to specify if it only will open it from

612
00:21:42,159 --> 00:21:43,760
certain locations like the container

613
00:21:43,760 --> 00:21:44,640
locations

614
00:21:44,640 --> 00:21:48,000
you need to specify that as well

615
00:21:48,240 --> 00:21:50,960
if the target doesn't exit on its own

616
00:21:50,960 --> 00:21:53,360
for example gui apps for the most part

617
00:21:53,360 --> 00:21:54,960
measure reasonable timeout give it

618
00:21:54,960 --> 00:21:56,400
enough time to parse the data

619
00:21:56,400 --> 00:21:59,280
and then kill the kill the process and

620
00:21:59,280 --> 00:21:59,600
then

621
00:21:59,600 --> 00:22:03,360
start fuzzing so with ibooks

622
00:22:03,360 --> 00:22:05,440
i'm just going to demo some ways to use

623
00:22:05,440 --> 00:22:08,480
lifos to these things and you can infer

624
00:22:08,480 --> 00:22:11,280
you know some of how it works from there

625
00:22:11,280 --> 00:22:12,480
specify local mode

626
00:22:12,480 --> 00:22:15,840
and then the command would be

627
00:22:15,840 --> 00:22:18,559
the target application plus the keyword

628
00:22:18,559 --> 00:22:20,880
fuzz which basically says

629
00:22:20,880 --> 00:22:23,919
put put the fus file here and make that

630
00:22:23,919 --> 00:22:24,400
command

631
00:22:24,400 --> 00:22:27,760
execute you can also do sddn on most of

632
00:22:27,760 --> 00:22:28,720
the platforms

633
00:22:28,720 --> 00:22:31,200
by not specifying anything and it will

634
00:22:31,200 --> 00:22:32,480
just

635
00:22:32,480 --> 00:22:35,760
read the test case and then

636
00:22:35,760 --> 00:22:38,320
throw that to the target stdn input

637
00:22:38,320 --> 00:22:40,000
files give it some epub files

638
00:22:40,000 --> 00:22:43,520
uh specify an output file sorry output

639
00:22:43,520 --> 00:22:44,080
folder

640
00:22:44,080 --> 00:22:46,400
um just a specific one or automatically

641
00:22:46,400 --> 00:22:48,240
goes to crashes directory the

642
00:22:48,240 --> 00:22:51,360
root crash directory um and then give it

643
00:22:51,360 --> 00:22:52,799
a special tim directory

644
00:22:52,799 --> 00:22:55,120
so normally it would go in uh temp slash

645
00:22:55,120 --> 00:22:55,919
light fuzz

646
00:22:55,919 --> 00:22:59,200
slash the run

647
00:22:59,200 --> 00:23:01,600
the run number uh it's got each one gets

648
00:23:01,600 --> 00:23:03,360
its own folder

649
00:23:03,360 --> 00:23:05,520
each each fuzzing session gets its own

650
00:23:05,520 --> 00:23:08,400
folder but you could specify um the temp

651
00:23:08,400 --> 00:23:09,120
directory

652
00:23:09,120 --> 00:23:11,039
uh to be that container directory so

653
00:23:11,039 --> 00:23:13,200
that ibooks actually will open it

654
00:23:13,200 --> 00:23:14,880
max running time yeah again you're

655
00:23:14,880 --> 00:23:15,919
screaming oh this is going to take

656
00:23:15,919 --> 00:23:16,880
forever

657
00:23:16,880 --> 00:23:19,280
hey we're fuzzing the gui app so yeah

658
00:23:19,280 --> 00:23:20,720
there's again some trade-offs to be made

659
00:23:20,720 --> 00:23:21,120
for

660
00:23:21,120 --> 00:23:23,520
app fusing if you can't directly hit the

661
00:23:23,520 --> 00:23:24,799
harness

662
00:23:24,799 --> 00:23:27,520
uh number of iterations and then easy

663
00:23:27,520 --> 00:23:29,520
which we'll talk about

664
00:23:29,520 --> 00:23:33,440
soon and then with fontbook

665
00:23:33,440 --> 00:23:35,120
mostly the same thing except fontbook

666
00:23:35,120 --> 00:23:37,520
doesn't need the special temp directory

667
00:23:37,520 --> 00:23:40,799
um yeah easy is basically um the e

668
00:23:40,799 --> 00:23:43,279
option uh is to recycle any of the

669
00:23:43,279 --> 00:23:44,159
crashes found

670
00:23:44,159 --> 00:23:45,600
so when you're fuzzing and it finds

671
00:23:45,600 --> 00:23:47,600
crashes it'll actually

672
00:23:47,600 --> 00:23:50,559
put that crash directory as the input

673
00:23:50,559 --> 00:23:52,559
directory at the end of the session

674
00:23:52,559 --> 00:23:54,799
and it'll try to go through and mutate

675
00:23:54,799 --> 00:23:55,760
all of the

676
00:23:55,760 --> 00:23:58,240
crashing input to see if you can get any

677
00:23:58,240 --> 00:23:58,799
other

678
00:23:58,799 --> 00:24:01,919
you know different crash points

679
00:24:01,919 --> 00:24:03,760
and things like that so it's just a fun

680
00:24:03,760 --> 00:24:05,440
little feature uh i

681
00:24:05,440 --> 00:24:08,480
thought of doing and the z option is uh

682
00:24:08,480 --> 00:24:09,919
to enable any malik

683
00:24:09,919 --> 00:24:13,279
helpers such as um the uh

684
00:24:13,279 --> 00:24:15,360
g-lib malik that we talked about earlier

685
00:24:15,360 --> 00:24:17,679
the to help find some more subtle

686
00:24:17,679 --> 00:24:19,440
crashes so that's just enabling it when

687
00:24:19,440 --> 00:24:20,720
we run the application in the

688
00:24:20,720 --> 00:24:22,799
environment

689
00:24:22,799 --> 00:24:25,200
package util uh it's command line app so

690
00:24:25,200 --> 00:24:26,480
super easy to fuzz

691
00:24:26,480 --> 00:24:28,400
uh you could even fuzz this with afl in

692
00:24:28,400 --> 00:24:30,840
non-instrumented mode if you wanted to

693
00:24:30,840 --> 00:24:33,760
um uh yeah like i said life fuzzes

694
00:24:33,760 --> 00:24:36,000
uh for this scenario you could use afl

695
00:24:36,000 --> 00:24:38,080
but we can also use live fuzz for it

696
00:24:38,080 --> 00:24:40,159
uh and then uh i guess one of the

697
00:24:40,159 --> 00:24:41,600
advantages there is turning on

698
00:24:41,600 --> 00:24:44,640
the uh malik debuggers uh for if you use

699
00:24:44,640 --> 00:24:48,640
life us for for fuzzing package util

700
00:24:48,640 --> 00:24:50,480
and during the filing process there's a

701
00:24:50,480 --> 00:24:52,640
global std out

702
00:24:52,640 --> 00:24:54,320
so you can check the process see what's

703
00:24:54,320 --> 00:24:55,919
going on with the app so if we do this

704
00:24:55,919 --> 00:24:56,960
while we're fuzzing

705
00:24:56,960 --> 00:24:59,520
package util you can see that you know

706
00:24:59,520 --> 00:25:00,880
it's outputting uh it's

707
00:25:00,880 --> 00:25:03,279
it's you know it's xml file looks like

708
00:25:03,279 --> 00:25:04,640
it mutated some input

709
00:25:04,640 --> 00:25:07,360
can't open package for expansion um that

710
00:25:07,360 --> 00:25:08,559
package

711
00:25:08,559 --> 00:25:11,200
uh that fuzzing test case and uh yeah

712
00:25:11,200 --> 00:25:12,640
you could just kind of monitor

713
00:25:12,640 --> 00:25:15,520
um the the app's output and just see

714
00:25:15,520 --> 00:25:15,919
some

715
00:25:15,919 --> 00:25:18,000
pretty funny stuff depending on how how

716
00:25:18,000 --> 00:25:19,760
much it outputs during errors for

717
00:25:19,760 --> 00:25:20,480
example

718
00:25:20,480 --> 00:25:21,679
and you can see the guard malloc is

719
00:25:21,679 --> 00:25:23,520
enabled because that's at the top of the

720
00:25:23,520 --> 00:25:25,840
output

721
00:25:26,159 --> 00:25:29,200
so minimizing crashes is another fun

722
00:25:29,200 --> 00:25:31,360
fun feature of light fuzz um so it's a

723
00:25:31,360 --> 00:25:32,720
pretty

724
00:25:32,720 --> 00:25:35,520
pretty simplistic approach um the way it

725
00:25:35,520 --> 00:25:37,440
works is it just removes one bite at a

726
00:25:37,440 --> 00:25:38,640
time

727
00:25:38,640 --> 00:25:42,240
and runs the target with a new repro uh

728
00:25:42,240 --> 00:25:46,000
if the target crashes uh just keep uh

729
00:25:46,000 --> 00:25:46,880
continue on

730
00:25:46,880 --> 00:25:49,279
removing the bright removing the bytes

731
00:25:49,279 --> 00:25:51,200
and keep that new repro

732
00:25:51,200 --> 00:25:53,840
because we removed to buy it and it

733
00:25:53,840 --> 00:25:54,840
still crashed

734
00:25:54,840 --> 00:25:58,240
so that's good that means we don't need

735
00:25:58,240 --> 00:26:00,640
that byte for the test case

736
00:26:00,640 --> 00:26:03,279
theoretically and if the byte doesn't or

737
00:26:03,279 --> 00:26:04,880
the target doesn't crash when we remove

738
00:26:04,880 --> 00:26:05,600
the byte

739
00:26:05,600 --> 00:26:07,760
then restore the byte because apparently

740
00:26:07,760 --> 00:26:08,799
the byte's important

741
00:26:08,799 --> 00:26:11,840
because it made the program not crash

742
00:26:11,840 --> 00:26:14,960
so simple bye bye bye minimization

743
00:26:14,960 --> 00:26:19,120
and then you see here we had a crash

744
00:26:19,120 --> 00:26:22,159
xc bat access sec fault

745
00:26:22,159 --> 00:26:24,799
we throw that into the minimizer it

746
00:26:24,799 --> 00:26:26,720
tries to repro it once it re-pros it

747
00:26:26,720 --> 00:26:28,799
starts minimization and you can see it

748
00:26:28,799 --> 00:26:30,799
took it down you know

749
00:26:30,799 --> 00:26:32,640
you know a couple thousand bytes that it

750
00:26:32,640 --> 00:26:34,080
didn't even need and it reduced the

751
00:26:34,080 --> 00:26:34,880
crash

752
00:26:34,880 --> 00:26:38,640
um to there and it's also a way to find

753
00:26:38,640 --> 00:26:41,520
new crashes too so maybe when it's

754
00:26:41,520 --> 00:26:43,600
minimizing it it removes bytes that make

755
00:26:43,600 --> 00:26:44,720
it

756
00:26:44,720 --> 00:26:47,440
crash at a different pc so it's also

757
00:26:47,440 --> 00:26:48,720
interesting to know so it'll catch those

758
00:26:48,720 --> 00:26:50,840
new crashes as well when it's minimizing

759
00:26:50,840 --> 00:26:54,080
it and then superman mode is basically

760
00:26:54,080 --> 00:26:57,120
just repeat the process until the target

761
00:26:57,120 --> 00:26:58,080
is exhausted

762
00:26:58,080 --> 00:27:00,640
we've exhausted all the bytes and it

763
00:27:00,640 --> 00:27:01,600
will

764
00:27:01,600 --> 00:27:04,480
we can't go any lower we've achieved the

765
00:27:04,480 --> 00:27:08,000
maximum minimization on the bytes

766
00:27:08,000 --> 00:27:10,159
so yeah pretty neat features to minimize

767
00:27:10,159 --> 00:27:13,440
your test cases again super

768
00:27:14,080 --> 00:27:16,720
super simple way of doing it but

769
00:27:16,720 --> 00:27:19,039
effective

770
00:27:19,039 --> 00:27:21,360
so for targeting clients um we're just

771
00:27:21,360 --> 00:27:22,240
going to do a

772
00:27:22,240 --> 00:27:25,679
demo of uh smb util uh

773
00:27:25,679 --> 00:27:27,919
you essentially just capture uh you know

774
00:27:27,919 --> 00:27:29,360
use wireshark whatever

775
00:27:29,360 --> 00:27:32,080
to capture and export the protocol data

776
00:27:32,080 --> 00:27:33,679
for example if we're doing clients you

777
00:27:33,679 --> 00:27:35,279
want to get responses from

778
00:27:35,279 --> 00:27:38,559
from servers during a valid session

779
00:27:38,559 --> 00:27:41,679
so uh we use the um

780
00:27:41,679 --> 00:27:44,960
local client mode for for life which

781
00:27:44,960 --> 00:27:47,679
which allows us to still look for

782
00:27:47,679 --> 00:27:48,480
crashes

783
00:27:48,480 --> 00:27:50,000
uh in the app so we still have a lot of

784
00:27:50,000 --> 00:27:51,520
visibility uh

785
00:27:51,520 --> 00:27:53,279
there but we'll see later with some of

786
00:27:53,279 --> 00:27:54,720
the remote server fuzzing we don't have

787
00:27:54,720 --> 00:27:56,320
so much visibility

788
00:27:56,320 --> 00:27:59,919
we run s b util uh and then we can we're

789
00:27:59,919 --> 00:28:02,720
gonna listen so it's got a built-in

790
00:28:02,720 --> 00:28:05,279
fuzzing server that's going to listen on

791
00:28:05,279 --> 00:28:07,760
4455. we're going to tell smb view

792
00:28:07,760 --> 00:28:10,880
to connect to our host and you know view

793
00:28:10,880 --> 00:28:11,919
smb's stuff

794
00:28:11,919 --> 00:28:15,600
at 4455 instead of 445

795
00:28:15,600 --> 00:28:18,559
which is the default port give it some

796
00:28:18,559 --> 00:28:19,440
responses

797
00:28:19,440 --> 00:28:21,919
and then dash p is going to tell us to

798
00:28:21,919 --> 00:28:23,200
fuzz a session

799
00:28:23,200 --> 00:28:25,600
so with light files you can post binary

800
00:28:25,600 --> 00:28:27,440
sessions

801
00:28:27,440 --> 00:28:30,640
so this is saying that i've captured

802
00:28:30,640 --> 00:28:35,440
a session smb session of responses

803
00:28:35,440 --> 00:28:40,000
at this directory and to parse those

804
00:28:40,000 --> 00:28:44,480
parsers responses and fuss with them

805
00:28:44,480 --> 00:28:46,880
uh on the servers so uh you can pick

806
00:28:46,880 --> 00:28:47,760
different servers

807
00:28:47,760 --> 00:28:49,200
uh for example there's a there's some

808
00:28:49,200 --> 00:28:51,279
remote management um

809
00:28:51,279 --> 00:28:54,640
stuff with mac which is like a vnc type

810
00:28:54,640 --> 00:28:58,320
server screen sharing is more like a vnc

811
00:28:58,320 --> 00:28:59,200
server

812
00:28:59,200 --> 00:29:02,080
some interesting mac nuances there and

813
00:29:02,080 --> 00:29:02,559
again

814
00:29:02,559 --> 00:29:05,039
capture the stuff flying across the data

815
00:29:05,039 --> 00:29:06,880
or flying across the network

816
00:29:06,880 --> 00:29:11,039
and start fuzzing

817
00:29:11,039 --> 00:29:12,799
it's actually a great blog post too on

818
00:29:12,799 --> 00:29:14,240
the uh on uh

819
00:29:14,240 --> 00:29:16,880
red teaming blog post on some of this uh

820
00:29:16,880 --> 00:29:19,200
the ard agent and and things like that

821
00:29:19,200 --> 00:29:19,679
that

822
00:29:19,679 --> 00:29:20,799
you can check out to get some more

823
00:29:20,799 --> 00:29:23,840
information on how they work

824
00:29:23,840 --> 00:29:26,880
so we can use lsof and check and see

825
00:29:26,880 --> 00:29:30,159
the rd ar d agent is listening

826
00:29:30,159 --> 00:29:33,840
and what port and then we can run

827
00:29:33,840 --> 00:29:36,640
so if we were able to run this in

828
00:29:36,640 --> 00:29:37,840
debugger like some

829
00:29:37,840 --> 00:29:40,159
sometimes you you can run it stand alone

830
00:29:40,159 --> 00:29:41,039
some of these servers you can run

831
00:29:41,039 --> 00:29:41,679
standalone

832
00:29:41,679 --> 00:29:45,919
as a in a debugger or you can attach to

833
00:29:45,919 --> 00:29:48,240
them too

834
00:29:48,240 --> 00:29:49,919
so you kind of got to play with things

835
00:29:49,919 --> 00:29:52,320
here to see

836
00:29:52,320 --> 00:29:53,840
you know how the target likes to be

837
00:29:53,840 --> 00:29:55,520
interacted with uh

838
00:29:55,520 --> 00:29:58,559
and then we can pick udp fuzzing and if

839
00:29:58,559 --> 00:30:00,480
we're doing a remote server

840
00:30:00,480 --> 00:30:02,880
that address and that's going to fuzz

841
00:30:02,880 --> 00:30:04,159
udp packets

842
00:30:04,159 --> 00:30:07,120
from our input that we captured and send

843
00:30:07,120 --> 00:30:08,000
them over to

844
00:30:08,000 --> 00:30:11,120
the target listing on that port

845
00:30:11,120 --> 00:30:14,799
for rd a rt agent

846
00:30:14,799 --> 00:30:16,640
so this is where you know using crash

847
00:30:16,640 --> 00:30:18,640
report comes in to monitor for crashes

848
00:30:18,640 --> 00:30:20,559
also some features like that you know

849
00:30:20,559 --> 00:30:22,000
you can also do packet sniffing

850
00:30:22,000 --> 00:30:25,039
and you know uh kill everything when

851
00:30:25,039 --> 00:30:27,440
when no more packets are going on and

852
00:30:27,440 --> 00:30:28,880
running debugger things like that so

853
00:30:28,880 --> 00:30:29,919
there's a lot of different ways to catch

854
00:30:29,919 --> 00:30:32,480
crashes here

855
00:30:32,480 --> 00:30:36,159
and then we can see that rdard

856
00:30:36,159 --> 00:30:39,279
agent is uh receiving our packets

857
00:30:39,279 --> 00:30:41,360
and the you know it's it's should be

858
00:30:41,360 --> 00:30:43,200
parsing your packets as well

859
00:30:43,200 --> 00:30:45,440
using that detroit command to uh to see

860
00:30:45,440 --> 00:30:48,720
what's going on while we're fuzzing

861
00:30:48,799 --> 00:30:50,960
uh similar with screen sharing agent uh

862
00:30:50,960 --> 00:30:52,320
we're gonna look and see what's

863
00:30:52,320 --> 00:30:53,200
listening

864
00:30:53,200 --> 00:30:55,120
uh some of these processes launch d only

865
00:30:55,120 --> 00:30:57,279
runs them only runs like screen sharing

866
00:30:57,279 --> 00:30:57,760
d

867
00:30:57,760 --> 00:31:00,640
uh when you get a connection uh which

868
00:31:00,640 --> 00:31:01,840
which can be interesting because

869
00:31:01,840 --> 00:31:04,559
sometimes you need now you need to sleep

870
00:31:04,559 --> 00:31:05,919
if you want to attach the process for

871
00:31:05,919 --> 00:31:07,919
example you need to connect

872
00:31:07,919 --> 00:31:10,000
and then sleep and then attach the

873
00:31:10,000 --> 00:31:10,960
process uh

874
00:31:10,960 --> 00:31:12,559
because you then you'll get the pid to

875
00:31:12,559 --> 00:31:15,760
attach to stuff like that

876
00:31:15,760 --> 00:31:17,760
and then yeah we can a screen sharing

877
00:31:17,760 --> 00:31:20,640
session based on what we captured

878
00:31:20,640 --> 00:31:24,159
remotely and or locally and use the

879
00:31:24,159 --> 00:31:25,200
crash report to catch

880
00:31:25,200 --> 00:31:28,320
capture crashes as well

881
00:31:30,640 --> 00:31:33,039
which uh this is what we're doing here

882
00:31:33,039 --> 00:31:34,000
uh

883
00:31:34,000 --> 00:31:36,159
we're looking at report crash we're

884
00:31:36,159 --> 00:31:38,080
saying anything that looks like

885
00:31:38,080 --> 00:31:40,960
uh screen sharing d that you get you get

886
00:31:40,960 --> 00:31:42,320
a crash file for

887
00:31:42,320 --> 00:31:43,919
uh let me know because i'm interested in

888
00:31:43,919 --> 00:31:46,240
that and that would be a i would mark

889
00:31:46,240 --> 00:31:47,200
that as a crash

890
00:31:47,200 --> 00:31:50,399
and start copying a repros and stuff

891
00:31:50,399 --> 00:31:53,440
um interesting one when uh just trivial

892
00:31:53,440 --> 00:31:54,480
fuzzing this one

893
00:31:54,480 --> 00:31:56,960
looked like a cpu exhaustion bug when

894
00:31:56,960 --> 00:31:58,720
fuzzing screen sharing d

895
00:31:58,720 --> 00:32:00,880
um but yeah it just gives you an example

896
00:32:00,880 --> 00:32:02,720
of

897
00:32:02,720 --> 00:32:03,919
some of the stuff you may come across

898
00:32:03,919 --> 00:32:06,240
when fuzzing

899
00:32:06,240 --> 00:32:09,200
so as far as bugs go um yeah it's still

900
00:32:09,200 --> 00:32:10,559
some research is

901
00:32:10,559 --> 00:32:12,880
kind of still ongoing it's kind of early

902
00:32:12,880 --> 00:32:14,399
honestly uh

903
00:32:14,399 --> 00:32:16,320
but fuzz bugs out of a few different

904
00:32:16,320 --> 00:32:17,919
components applescript

905
00:32:17,919 --> 00:32:21,279
uh colorsync syslog

906
00:32:21,279 --> 00:32:23,840
also parsing some interesting stuff uh

907
00:32:23,840 --> 00:32:27,200
and some more upcoming cves so

908
00:32:27,200 --> 00:32:29,679
pretty pretty successful so far and a

909
00:32:29,679 --> 00:32:32,399
lot more to come

910
00:32:32,799 --> 00:32:34,480
so maybe you're more interested in

911
00:32:34,480 --> 00:32:36,399
fouling on mac now maybe before it was

912
00:32:36,399 --> 00:32:37,840
kind of this so

913
00:32:37,840 --> 00:32:39,519
i don't know it's different than windows

914
00:32:39,519 --> 00:32:41,440
and linux but

915
00:32:41,440 --> 00:32:44,159
now maybe you're more motivated and can

916
00:32:44,159 --> 00:32:44,799
see that

917
00:32:44,799 --> 00:32:46,000
yeah there's a learning curve but

918
00:32:46,000 --> 00:32:47,840
there's you know decent amount of attack

919
00:32:47,840 --> 00:32:49,760
service like every other os

920
00:32:49,760 --> 00:32:52,799
uh windows linux included

921
00:32:52,799 --> 00:32:54,000
you gotta work around some security

922
00:32:54,000 --> 00:32:56,559
features but it's not too bad

923
00:32:56,559 --> 00:32:58,159
by default though apple has spent a lot

924
00:32:58,159 --> 00:32:59,279
of effort locking down a lot of

925
00:32:59,279 --> 00:33:00,720
debugging features which

926
00:33:00,720 --> 00:33:02,960
yeah if you're going to you know get

927
00:33:02,960 --> 00:33:04,240
down for research

928
00:33:04,240 --> 00:33:06,720
you need to turn off so in order to

929
00:33:06,720 --> 00:33:07,360
figure

930
00:33:07,360 --> 00:33:09,600
you know get more visibility into the

931
00:33:09,600 --> 00:33:10,720
system

932
00:33:10,720 --> 00:33:12,799
and uh yeah some of the tooling uh even

933
00:33:12,799 --> 00:33:14,320
unconventional techniques and fuzzing

934
00:33:14,320 --> 00:33:14,960
can still

935
00:33:14,960 --> 00:33:17,840
yield good results and uh yeah pretty

936
00:33:17,840 --> 00:33:19,120
fun stuff

937
00:33:19,120 --> 00:33:22,640
so thank you very much for your time

938
00:33:22,640 --> 00:33:27,679
and that's the end of my stuff

