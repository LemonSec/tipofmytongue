1
00:00:00,000 --> 00:00:01,680
greetings to everyone i am muhammad

2
00:00:01,680 --> 00:00:03,600
al-dub from kuwait and today i'm going

3
00:00:03,600 --> 00:00:05,279
to talk to you about aid by sports

4
00:00:05,279 --> 00:00:07,279
exploitation using the

5
00:00:07,279 --> 00:00:10,160
tool called park so

6
00:00:10,160 --> 00:00:12,799
first of all that's me muhammad al-dub

7
00:00:12,799 --> 00:00:14,240
from kuwait

8
00:00:14,240 --> 00:00:16,079
i'm an independent security consultant

9
00:00:16,079 --> 00:00:18,160
in kuwait i worked on creating kuwait's

10
00:00:18,160 --> 00:00:19,680
national infrastructure for bki

11
00:00:19,680 --> 00:00:22,000
cryptography smart cars authentication

12
00:00:22,000 --> 00:00:23,279
so i've been there you know in the

13
00:00:23,279 --> 00:00:25,920
government kitchen doing nationals size

14
00:00:25,920 --> 00:00:27,760
projects even though national sites for

15
00:00:27,760 --> 00:00:29,840
kuwait is still pretty small then i

16
00:00:29,840 --> 00:00:30,960
delivered security training the

17
00:00:30,960 --> 00:00:33,520
workshops in session in the topics about

18
00:00:33,520 --> 00:00:35,600
cloud security api security application

19
00:00:35,600 --> 00:00:36,880
security

20
00:00:36,880 --> 00:00:38,960
and black hat for example in all around

21
00:00:38,960 --> 00:00:41,600
the world now focusing on that security

22
00:00:41,600 --> 00:00:43,120
of apis and

23
00:00:43,120 --> 00:00:45,200
modern cloud applications

24
00:00:45,200 --> 00:00:46,320
now

25
00:00:46,320 --> 00:00:48,239
to make a long story short

26
00:00:48,239 --> 00:00:49,760
before i uh

27
00:00:49,760 --> 00:00:51,920
i actually start i want to share my

28
00:00:51,920 --> 00:00:53,520
resources so i'd like to share my

29
00:00:53,520 --> 00:00:56,160
resources before i actually start

30
00:00:56,160 --> 00:00:58,399
those two books have been really great

31
00:00:58,399 --> 00:01:01,199
in in learning about aws security and

32
00:01:01,199 --> 00:01:02,320
aws

33
00:01:02,320 --> 00:01:04,479
exploitation and post exploitation so i

34
00:01:04,479 --> 00:01:06,479
do definitely recommend you check out

35
00:01:06,479 --> 00:01:08,560
these two books uh you might

36
00:01:08,560 --> 00:01:09,280
so

37
00:01:09,280 --> 00:01:11,200
okay so as i said

38
00:01:11,200 --> 00:01:13,439
these two books are a great resource for

39
00:01:13,439 --> 00:01:15,520
adlai security i do definitely recommend

40
00:01:15,520 --> 00:01:17,680
you check them out and also this is a

41
00:01:17,680 --> 00:01:19,840
tribute to a great friend of the edward

42
00:01:19,840 --> 00:01:23,200
security community uh spencer gates uh

43
00:01:23,200 --> 00:01:25,119
he passed away uh this year

44
00:01:25,119 --> 00:01:28,159
unfortunately uh spencer did a lot to

45
00:01:28,159 --> 00:01:30,159
the awa security community and did a lot

46
00:01:30,159 --> 00:01:32,479
to me personally in terms of advanced

47
00:01:32,479 --> 00:01:34,720
security research uh answering my

48
00:01:34,720 --> 00:01:37,600
questions uh so uh you will be missed

49
00:01:37,600 --> 00:01:40,079
dearly spencer and spencer is actually

50
00:01:40,079 --> 00:01:42,720
isaac actually was one of the people who

51
00:01:42,720 --> 00:01:45,439
worked on the uh parkour uh eight-based

52
00:01:45,439 --> 00:01:47,119
exploitation tool

53
00:01:47,119 --> 00:01:47,920
so

54
00:01:47,920 --> 00:01:49,840
uh now why should we attack edwards

55
00:01:49,840 --> 00:01:52,240
services because adlis is the cloud the

56
00:01:52,240 --> 00:01:53,840
king of cloud services with the market

57
00:01:53,840 --> 00:01:55,680
share of more than like more than half

58
00:01:55,680 --> 00:01:58,159
of the of the market uh edward services

59
00:01:58,159 --> 00:02:00,560
are documented and whites are bred so

60
00:02:00,560 --> 00:02:02,640
they run the gamut from simple stuff

61
00:02:02,640 --> 00:02:05,040
like s3 buckets to ground satellite

62
00:02:05,040 --> 00:02:06,719
stations all the way to aws infini

63
00:02:06,719 --> 00:02:08,080
infinidash

64
00:02:08,080 --> 00:02:10,720
just kidding about the last one uh so so

65
00:02:10,720 --> 00:02:12,879
many services in aws so you need to be

66
00:02:12,879 --> 00:02:15,760
really aware of uh how big your attack

67
00:02:15,760 --> 00:02:18,879
service is as far as running mls and aws

68
00:02:18,879 --> 00:02:20,959
cloud infrastructure now

69
00:02:20,959 --> 00:02:23,200
uh let's talk about ec2 instances

70
00:02:23,200 --> 00:02:25,200
attacking easter instances is nothing

71
00:02:25,200 --> 00:02:26,959
special so you attack it like you attack

72
00:02:26,959 --> 00:02:28,800
any other like application or server on

73
00:02:28,800 --> 00:02:30,879
the internet so exploit vulnerabilities

74
00:02:30,879 --> 00:02:33,599
in running diamonds like rdb exploits

75
00:02:33,599 --> 00:02:35,040
trying to exploit applications running

76
00:02:35,040 --> 00:02:37,280
on top of it especially web applications

77
00:02:37,280 --> 00:02:39,840
so things like uh os command os command

78
00:02:39,840 --> 00:02:41,920
injection remote like a remote file

79
00:02:41,920 --> 00:02:43,599
includes ssrf

80
00:02:43,599 --> 00:02:46,480
to access internal resources however

81
00:02:46,480 --> 00:02:48,879
these ec2 instances can have some

82
00:02:48,879 --> 00:02:50,480
special properties that make attacking

83
00:02:50,480 --> 00:02:52,720
them a bit more special so for example

84
00:02:52,720 --> 00:02:54,640
the internal metadata service that runs

85
00:02:54,640 --> 00:02:57,920
in in this internal uh private ib inside

86
00:02:57,920 --> 00:03:00,000
each each instance can be accessed using

87
00:03:00,000 --> 00:03:02,400
vulnerabilities like ssrf or lfi or even

88
00:03:02,400 --> 00:03:04,720
remote code execution uh internally the

89
00:03:04,720 --> 00:03:07,120
service can be used to expose aws

90
00:03:07,120 --> 00:03:08,959
credentials for the instance that's

91
00:03:08,959 --> 00:03:11,120
running and the for example the user

92
00:03:11,120 --> 00:03:12,800
data startup scripts

93
00:03:12,800 --> 00:03:14,319
can be downloaded in order to discover

94
00:03:14,319 --> 00:03:16,239
sensitive data so the user data startup

95
00:03:16,239 --> 00:03:18,959
script is a script that you can uh

96
00:03:18,959 --> 00:03:19,760
run

97
00:03:19,760 --> 00:03:21,920
or set to bootstrap any running is to

98
00:03:21,920 --> 00:03:23,920
instance when it starts it runs that

99
00:03:23,920 --> 00:03:26,239
user data script for example updating

100
00:03:26,239 --> 00:03:28,560
stuff uh pulling the latest source code

101
00:03:28,560 --> 00:03:31,040
from from github things like that so

102
00:03:31,040 --> 00:03:33,360
sometimes they have interesting or

103
00:03:33,360 --> 00:03:35,120
sensitive data inside of these

104
00:03:35,120 --> 00:03:36,720
credentials inside of these startup

105
00:03:36,720 --> 00:03:37,680
scripts

106
00:03:37,680 --> 00:03:39,200
the abs volume that's attached to

107
00:03:39,200 --> 00:03:41,200
instance can be for example detached and

108
00:03:41,200 --> 00:03:43,200
reattached to an attacker controlled ec2

109
00:03:43,200 --> 00:03:44,959
instance so an attacker for example

110
00:03:44,959 --> 00:03:49,040
could uh try to uh uh reattach that uh

111
00:03:49,040 --> 00:03:51,760
instance to his uh that actually bs

112
00:03:51,760 --> 00:03:54,239
volume is like a like a cloud uh flash

113
00:03:54,239 --> 00:03:56,480
drive like a cloud hard disk so you can

114
00:03:56,480 --> 00:03:59,200
just reattach it uh or copy it and

115
00:03:59,200 --> 00:04:00,959
attach it to your own instance then you

116
00:04:00,959 --> 00:04:02,720
can just browse around inside and see

117
00:04:02,720 --> 00:04:04,000
what kind of interesting stuff you can

118
00:04:04,000 --> 00:04:05,599
find for example if you're running an

119
00:04:05,599 --> 00:04:06,720
instance

120
00:04:06,720 --> 00:04:08,480
that is running windows active directory

121
00:04:08,480 --> 00:04:10,640
and tracker could use that to copy the

122
00:04:10,640 --> 00:04:14,560
hash files into the s.d.i dit database

123
00:04:14,560 --> 00:04:16,079
that contains all the hashes for those

124
00:04:16,079 --> 00:04:18,079
for that active directory interestingly

125
00:04:18,079 --> 00:04:20,720
for idlis also an uh also a very

126
00:04:20,720 --> 00:04:22,880
interesting opportunity for embezzlement

127
00:04:22,880 --> 00:04:25,199
so for example a rogue admin or maybe a

128
00:04:25,199 --> 00:04:27,440
compromised account could create a very

129
00:04:27,440 --> 00:04:30,800
expensive ami ami is an amazon image and

130
00:04:30,800 --> 00:04:32,160
there are there's like like a

131
00:04:32,160 --> 00:04:33,919
marketplace for images that you can

132
00:04:33,919 --> 00:04:36,400
purchase for example any of the popular

133
00:04:36,400 --> 00:04:38,479
uh software uh uh

134
00:04:38,479 --> 00:04:40,560
tools that you want are also could

135
00:04:40,560 --> 00:04:42,960
potentially be available as an uh

136
00:04:42,960 --> 00:04:45,040
an image in the marketplace so instead

137
00:04:45,040 --> 00:04:47,040
of you buying like a regular license for

138
00:04:47,040 --> 00:04:49,199
a software you actually uh buy a

139
00:04:49,199 --> 00:04:51,280
subscription to use that software inside

140
00:04:51,280 --> 00:04:53,759
aws so advice runs an instance that runs

141
00:04:53,759 --> 00:04:56,080
that license software for you uh so you

142
00:04:56,080 --> 00:04:58,240
pay for adblastic at the cost of running

143
00:04:58,240 --> 00:04:59,040
the

144
00:04:59,040 --> 00:05:00,880
cloud servers and you pay for the

145
00:05:00,880 --> 00:05:03,520
software uh company or the the owner of

146
00:05:03,520 --> 00:05:05,600
that software a license to use that

147
00:05:05,600 --> 00:05:06,960
software so uh

148
00:05:06,960 --> 00:05:08,639
you could for example

149
00:05:08,639 --> 00:05:11,199
create a very expensive am ami image and

150
00:05:11,199 --> 00:05:13,440
put it in the marketplace and then uh

151
00:05:13,440 --> 00:05:15,120
purchase that from accounts that you

152
00:05:15,120 --> 00:05:17,600
compromise uh or maybe a rogue admin

153
00:05:17,600 --> 00:05:20,560
doing that to to build the enterprise

154
00:05:20,560 --> 00:05:22,160
from inside every device itself so as

155
00:05:22,160 --> 00:05:23,680
far as building is concerned this is

156
00:05:23,680 --> 00:05:27,120
coming from the your monthly aws bill

157
00:05:27,120 --> 00:05:28,479
anyway

158
00:05:28,479 --> 00:05:30,080
let's talk about

159
00:05:30,080 --> 00:05:33,199
so park in arabic means lightning you

160
00:05:33,199 --> 00:05:36,000
know cloud and lightning so bark is the

161
00:05:36,000 --> 00:05:39,840
word for in arabic for lightning

162
00:05:40,080 --> 00:05:42,720
the reason i built baroque is to serve

163
00:05:42,720 --> 00:05:44,639
my own needs while doing cloud

164
00:05:44,639 --> 00:05:46,160
penetration testing cloud security

165
00:05:46,160 --> 00:05:49,360
consulting so sometimes in a cloud

166
00:05:49,360 --> 00:05:52,800
engagement you find the aws api keys uh

167
00:05:52,800 --> 00:05:54,240
somewhere for example an ssr

168
00:05:54,240 --> 00:05:56,319
vulnerability you find that you you

169
00:05:56,319 --> 00:05:59,759
social engineer an an admin uh you you

170
00:05:59,759 --> 00:06:01,360
for example find it somewhere in the

171
00:06:01,360 --> 00:06:02,880
source code of an application or web

172
00:06:02,880 --> 00:06:04,240
application at the configuration file

173
00:06:04,240 --> 00:06:06,479
for example so you obtain those api's

174
00:06:06,479 --> 00:06:08,080
keys and they can you be used to attack

175
00:06:08,080 --> 00:06:09,680
other idealized services for example you

176
00:06:09,680 --> 00:06:11,520
can put that if the

177
00:06:11,520 --> 00:06:14,639
api key in the or command line and or

178
00:06:14,639 --> 00:06:16,080
programming languages like for example

179
00:06:16,080 --> 00:06:19,440
the bottle 3 sdk for python anyway

180
00:06:19,440 --> 00:06:21,199
i developed this toolbox to serve a

181
00:06:21,199 --> 00:06:23,520
special a specific need which is that

182
00:06:23,520 --> 00:06:25,840
when you're running an ec2 instance

183
00:06:25,840 --> 00:06:28,000
uh suppose the institutions is all

184
00:06:28,000 --> 00:06:29,680
running and you want to have access

185
00:06:29,680 --> 00:06:30,560
inside

186
00:06:30,560 --> 00:06:32,880
and you don't have the uh

187
00:06:32,880 --> 00:06:36,400
the ssh key that was uh set for that

188
00:06:36,400 --> 00:06:38,800
ec2 instance how can you

189
00:06:38,800 --> 00:06:41,360
uh ssh or maybe have a shell on that

190
00:06:41,360 --> 00:06:44,160
running instance from the aws avi keys

191
00:06:44,160 --> 00:06:45,199
that you have

192
00:06:45,199 --> 00:06:47,680
you can't really have like direct

193
00:06:47,680 --> 00:06:50,319
access to those uh running ec2 servers

194
00:06:50,319 --> 00:06:52,240
if you don't have the ssh key unless you

195
00:06:52,240 --> 00:06:54,479
use the ssm service

196
00:06:54,479 --> 00:06:56,880
which is the uh

197
00:06:56,880 --> 00:06:58,960
session management service inside inside

198
00:06:58,960 --> 00:07:00,720
amazon that server is interesting

199
00:07:00,720 --> 00:07:03,120
because it supposes many apis including

200
00:07:03,120 --> 00:07:04,880
an api that actually allows you to run

201
00:07:04,880 --> 00:07:07,599
commands inside running instances given

202
00:07:07,599 --> 00:07:09,680
of course uh they are running with with

203
00:07:09,680 --> 00:07:12,080
the with a particular set of permissions

204
00:07:12,080 --> 00:07:12,880
so

205
00:07:12,880 --> 00:07:14,880
interestingly that was a very manual

206
00:07:14,880 --> 00:07:16,400
process to do so i built park to

207
00:07:16,400 --> 00:07:19,520
automate that aspect uh so buck is

208
00:07:19,520 --> 00:07:20,639
actually

209
00:07:20,639 --> 00:07:23,039
able to dump aws saved credentials from

210
00:07:23,039 --> 00:07:26,000
aw secrets manager and parameter store

211
00:07:26,000 --> 00:07:28,800
remotely control ec2 instances linux or

212
00:07:28,800 --> 00:07:30,800
windows without having the access to the

213
00:07:30,800 --> 00:07:33,199
ssh key and get a for example get them

214
00:07:33,199 --> 00:07:35,840
exploited reverse shells or regular bash

215
00:07:35,840 --> 00:07:37,840
shells on ec2 instances

216
00:07:37,840 --> 00:07:40,240
dumb metadata of ec2 instances and user

217
00:07:40,240 --> 00:07:42,639
data dump lamp the code and lambda

218
00:07:42,639 --> 00:07:44,479
function environmental variables

219
00:07:44,479 --> 00:07:46,639
and also if you want play with park it

220
00:07:46,639 --> 00:07:48,400
has a training mode

221
00:07:48,400 --> 00:07:49,840
that allows you to test it without

222
00:07:49,840 --> 00:07:51,840
messing with production environment so

223
00:07:51,840 --> 00:07:53,520
that's how it looks like the training

224
00:07:53,520 --> 00:07:56,000
mode is you just go to the to the menu

225
00:07:56,000 --> 00:07:57,520
inside training mode and then you say

226
00:07:57,520 --> 00:08:00,560
start it will create like a a temporary

227
00:08:00,560 --> 00:08:02,080
role for you an instance for you and

228
00:08:02,080 --> 00:08:03,599
once it's done with the training mode it

229
00:08:03,599 --> 00:08:05,199
will destroy all these resources it

230
00:08:05,199 --> 00:08:06,960
created for the training mode so you can

231
00:08:06,960 --> 00:08:08,400
just play with it safely without having

232
00:08:08,400 --> 00:08:10,160
to play with the current running

233
00:08:10,160 --> 00:08:12,479
instances and of course you can just one

234
00:08:12,479 --> 00:08:14,080
of the payloads available in sandbark is

235
00:08:14,080 --> 00:08:16,319
to run metasploit uh meteor protector

236
00:08:16,319 --> 00:08:19,680
payloads on the uh running ec2 servers

237
00:08:19,680 --> 00:08:22,000
uh so once for example we're going to

238
00:08:22,000 --> 00:08:24,479
show this one actually a live demo uh

239
00:08:24,479 --> 00:08:27,360
and also can dump adobe's uh password

240
00:08:27,360 --> 00:08:28,720
secrets and parameters from the

241
00:08:28,720 --> 00:08:30,479
parameter store and the aws secrets

242
00:08:30,479 --> 00:08:32,719
manager which usually contains database

243
00:08:32,719 --> 00:08:35,200
passwords keys under interesting stuff

244
00:08:35,200 --> 00:08:36,958
like that uh when you start running

245
00:08:36,958 --> 00:08:38,880
barcode you say advice attack surface to

246
00:08:38,880 --> 00:08:41,120
check what kind of stuff you have

247
00:08:41,120 --> 00:08:43,440
on the functions ac2 instances security

248
00:08:43,440 --> 00:08:45,040
groups and then you see details about

249
00:08:45,040 --> 00:08:47,120
these then you can launch further demos

250
00:08:47,120 --> 00:08:48,080
on them

251
00:08:48,080 --> 00:08:49,839
now i'm going to show you the the demo

252
00:08:49,839 --> 00:08:54,640
for park so let me show you my uh

253
00:08:54,640 --> 00:08:56,320
my kali terminal

254
00:08:56,320 --> 00:08:59,600
hopefully that's a very very uh uh uh

255
00:08:59,600 --> 00:09:01,120
very very clear

256
00:09:01,120 --> 00:09:02,640
so i'm going to say

257
00:09:02,640 --> 00:09:04,640
to run back now berkeley can run back

258
00:09:04,640 --> 00:09:06,399
with different options so i'm going to

259
00:09:06,399 --> 00:09:08,160
show you the the the option the help

260
00:09:08,160 --> 00:09:09,519
options for work

261
00:09:09,519 --> 00:09:12,880
uh of course you know all the ascii art

262
00:09:12,880 --> 00:09:15,200
needed stuff uh so you can run to the

263
00:09:15,200 --> 00:09:17,279
profile that you currently are already

264
00:09:17,279 --> 00:09:18,959
configured in your in your terminal or

265
00:09:18,959 --> 00:09:19,839
you can

266
00:09:19,839 --> 00:09:21,760
set a certain key id

267
00:09:21,760 --> 00:09:24,080
to supply the key and the secret

268
00:09:24,080 --> 00:09:25,760
and the session token for example if you

269
00:09:25,760 --> 00:09:28,560
got the uh credentials from

270
00:09:28,560 --> 00:09:31,040
vulnerability on an ec2

271
00:09:31,040 --> 00:09:34,560
instance now i'm going to run park

272
00:09:34,560 --> 00:09:37,920
so now first of all uh many options you

273
00:09:37,920 --> 00:09:40,080
see two attacks uh dumping secrets

274
00:09:40,080 --> 00:09:42,560
training mode uh uh uh

275
00:09:42,560 --> 00:09:44,080
and security groups for example but

276
00:09:44,080 --> 00:09:45,600
before all of that we have to run the

277
00:09:45,600 --> 00:09:47,760
attack surface uh

278
00:09:47,760 --> 00:09:49,440
let's say command to check what kind of

279
00:09:49,440 --> 00:09:51,360
stuff we have in this targeted list

280
00:09:51,360 --> 00:09:53,519
account so i'm going to say

281
00:09:53,519 --> 00:09:54,720
back surface

282
00:09:54,720 --> 00:09:56,800
and now it's going to through all of the

283
00:09:56,800 --> 00:09:59,519
available regions inside amazon cloud to

284
00:09:59,519 --> 00:10:01,760
check all of the available instances of

285
00:10:01,760 --> 00:10:03,760
the available available uh security

286
00:10:03,760 --> 00:10:05,760
groups and then once it finds anything

287
00:10:05,760 --> 00:10:07,440
interesting it will show it to you for

288
00:10:07,440 --> 00:10:08,640
example this security group has the

289
00:10:08,640 --> 00:10:11,600
following ips uh the sector group allows

290
00:10:11,600 --> 00:10:13,839
everyone to connect and then it will go

291
00:10:13,839 --> 00:10:15,839
and search for other stuff like for

292
00:10:15,839 --> 00:10:19,040
example lambda functions uh uh ac2

293
00:10:19,040 --> 00:10:21,200
instances through all of the regions

294
00:10:21,200 --> 00:10:23,920
available uh and of course

295
00:10:23,920 --> 00:10:25,519
is there any way you can get make a bit

296
00:10:25,519 --> 00:10:27,600
larger for the people who are watching

297
00:10:27,600 --> 00:10:30,480
sure sure sure okay sure

298
00:10:30,480 --> 00:10:33,519
so now let's going to check uh ec2 uh

299
00:10:33,519 --> 00:10:35,760
instances in all regions so for example

300
00:10:35,760 --> 00:10:39,120
this is a asia-pacific region uh uh i

301
00:10:39,120 --> 00:10:42,399
think this is maybe canada uh south asia

302
00:10:42,399 --> 00:10:44,240
as well maybe or maybe i know this is i

303
00:10:44,240 --> 00:10:46,640
think maybe sao paulo or was it

304
00:10:46,640 --> 00:10:47,920
anyway so it's going through all the

305
00:10:47,920 --> 00:10:50,079
regions now one by one

306
00:10:50,079 --> 00:10:52,880
it could take uh uh some time us was too

307
00:10:52,880 --> 00:10:54,800
so it's it tries to do an extensive

308
00:10:54,800 --> 00:10:56,399
attack surface check on all the

309
00:10:56,399 --> 00:10:59,680
available uh instances and uh uh

310
00:10:59,680 --> 00:11:01,200
resources that we have for example so in

311
00:11:01,200 --> 00:11:03,760
here it found some lambda functions uh

312
00:11:03,760 --> 00:11:05,120
here it found

313
00:11:05,120 --> 00:11:07,760
some ec2 instances running so i can say

314
00:11:07,760 --> 00:11:09,600
for example show me all the lambda

315
00:11:09,600 --> 00:11:12,000
functions

316
00:11:12,000 --> 00:11:14,240
now i have all my i can check the help

317
00:11:14,240 --> 00:11:16,959
menu so i can check for example for the

318
00:11:16,959 --> 00:11:18,160
current security groups that are

319
00:11:18,160 --> 00:11:20,000
available in in all of the regions and

320
00:11:20,000 --> 00:11:21,360
all of the rules so i can check for

321
00:11:21,360 --> 00:11:23,440
anything that's maybe suspicious or

322
00:11:23,440 --> 00:11:25,120
interesting certain ib addresses for

323
00:11:25,120 --> 00:11:26,640
example

324
00:11:26,640 --> 00:11:28,480
and then i can also check for example to

325
00:11:28,480 --> 00:11:30,880
dump the secrets in this account

326
00:11:30,880 --> 00:11:32,480
it would also go and dump all the

327
00:11:32,480 --> 00:11:33,680
secrets from

328
00:11:33,680 --> 00:11:35,440
from the parameter store and the secret

329
00:11:35,440 --> 00:11:38,959
manager from all the aws regions uh uh

330
00:11:38,959 --> 00:11:40,560
then it will if it finds anything

331
00:11:40,560 --> 00:11:41,920
interesting it will pause it to you and

332
00:11:41,920 --> 00:11:43,120
also will store it for you as a

333
00:11:43,120 --> 00:11:45,040
reference so you don't have to like for

334
00:11:45,040 --> 00:11:46,480
example check the output for this for

335
00:11:46,480 --> 00:11:48,720
this command all the time uh now of

336
00:11:48,720 --> 00:11:50,160
course

337
00:11:50,160 --> 00:11:51,920
uh while it uh

338
00:11:51,920 --> 00:11:53,920
it tries to keep on running maybe you

339
00:11:53,920 --> 00:11:55,760
can check the instantistic stuff we have

340
00:11:55,760 --> 00:11:56,880
before

341
00:11:56,880 --> 00:11:57,680
uh

342
00:11:57,680 --> 00:11:59,920
actually trying to pull me down all the

343
00:11:59,920 --> 00:12:02,240
way so anyway

344
00:12:02,240 --> 00:12:03,519
uh uh

345
00:12:03,519 --> 00:12:05,680
we will see an example of of how we can

346
00:12:05,680 --> 00:12:08,399
actually run uh like uh

347
00:12:08,399 --> 00:12:09,519
pass an

348
00:12:09,519 --> 00:12:12,800
uh payload from uh uh using the aws

349
00:12:12,800 --> 00:12:15,120
services the ls session manager so

350
00:12:15,120 --> 00:12:16,800
interesting the adverse session manager

351
00:12:16,800 --> 00:12:19,360
is an uh service inside amazon itself so

352
00:12:19,360 --> 00:12:21,760
as far as we are concerned this attack

353
00:12:21,760 --> 00:12:23,760
looks to come from inside amazon itself

354
00:12:23,760 --> 00:12:25,760
from inside the ssm service itself

355
00:12:25,760 --> 00:12:27,120
that's the the one that's actually

356
00:12:27,120 --> 00:12:28,880
running those commands now interestingly

357
00:12:28,880 --> 00:12:30,959
it found many interesting secrets inside

358
00:12:30,959 --> 00:12:33,279
passwords for databases

359
00:12:33,279 --> 00:12:34,720
api keys

360
00:12:34,720 --> 00:12:36,480
of course you can always show what you

361
00:12:36,480 --> 00:12:38,240
have collected using the command show

362
00:12:38,240 --> 00:12:40,480
secrets so it shows you all the secrets

363
00:12:40,480 --> 00:12:42,480
that it has found in your account now

364
00:12:42,480 --> 00:12:44,160
let's say for example lambda functions

365
00:12:44,160 --> 00:12:46,480
may want to actually download a lambda

366
00:12:46,480 --> 00:12:48,399
function that i have found to download

367
00:12:48,399 --> 00:12:50,079
its source code check what kind of stuff

368
00:12:50,079 --> 00:12:52,160
it contains so here it's going to check

369
00:12:52,160 --> 00:12:53,680
to me all the available love the

370
00:12:53,680 --> 00:12:55,519
functions i have i have this lambda

371
00:12:55,519 --> 00:12:57,200
function this lambda function this

372
00:12:57,200 --> 00:12:59,040
lambda function i could for example give

373
00:12:59,040 --> 00:13:00,800
it a name of one of the louder functions

374
00:13:00,800 --> 00:13:02,000
to download

375
00:13:02,000 --> 00:13:03,440
i'm going to say download this function

376
00:13:03,440 --> 00:13:05,600
to me and then it's going to show me an

377
00:13:05,600 --> 00:13:07,920
address a url that can actually use to

378
00:13:07,920 --> 00:13:10,160
download stuff so if i go for example

379
00:13:10,160 --> 00:13:12,720
and download uh this url let's go to to

380
00:13:12,720 --> 00:13:14,800
download the function for me i can just

381
00:13:14,800 --> 00:13:17,839
open it try to open what kind of details

382
00:13:17,839 --> 00:13:20,399
it's it has inside of it so for example

383
00:13:20,399 --> 00:13:23,120
this is the actual lambda code itself uh

384
00:13:23,120 --> 00:13:25,040
that's running in this

385
00:13:25,040 --> 00:13:28,079
in this uh lambda uh function so i can

386
00:13:28,079 --> 00:13:29,839
check this out for anything interesting

387
00:13:29,839 --> 00:13:32,160
or maybe vulnerabilities so i can try to

388
00:13:32,160 --> 00:13:34,959
to exploit them now interestingly

389
00:13:34,959 --> 00:13:37,839
going back to what we had in in in in

390
00:13:37,839 --> 00:13:40,399
our work tool let's now do the ac2

391
00:13:40,399 --> 00:13:41,440
attacks

392
00:13:41,440 --> 00:13:42,959
so i'm going to sit to list all the

393
00:13:42,959 --> 00:13:44,720
instances i found

394
00:13:44,720 --> 00:13:46,399
and i'm going to run one of the ec2

395
00:13:46,399 --> 00:13:47,920
attacks against against all these

396
00:13:47,920 --> 00:13:50,240
instances so i could for example target

397
00:13:50,240 --> 00:13:52,240
all the instances i have or maybe just

398
00:13:52,240 --> 00:13:54,880
one of them so i'm going to use option

399
00:13:54,880 --> 00:13:57,360
two then i can just post or maybe tab

400
00:13:57,360 --> 00:13:58,959
complete the

401
00:13:58,959 --> 00:14:00,720
instance that i want to target

402
00:14:00,720 --> 00:14:02,480
based on its id

403
00:14:02,480 --> 00:14:04,399
so i'm going to target this one it's a

404
00:14:04,399 --> 00:14:07,519
linux instance and it's uh the profile

405
00:14:07,519 --> 00:14:09,279
this is the profile name that's running

406
00:14:09,279 --> 00:14:12,240
uh under inside it so then i have many

407
00:14:12,240 --> 00:14:14,959
options i can run any command they want

408
00:14:14,959 --> 00:14:17,440
i can have a reverse shell i can have i

409
00:14:17,440 --> 00:14:19,920
can ask you to to visit url i can

410
00:14:19,920 --> 00:14:21,680
download the metadata inside it i can

411
00:14:21,680 --> 00:14:23,440
display a file for example if i want to

412
00:14:23,440 --> 00:14:26,160
run a command i'm going to choose number

413
00:14:26,160 --> 00:14:28,959
five enter the command to run maybe who

414
00:14:28,959 --> 00:14:30,720
who am i for example

415
00:14:30,720 --> 00:14:32,160
so probably it's going to run as root

416
00:14:32,160 --> 00:14:34,079
and that's interesting this this attack

417
00:14:34,079 --> 00:14:36,320
runs as root so the ssm manager inside

418
00:14:36,320 --> 00:14:38,560
aws when it pushes those commands to run

419
00:14:38,560 --> 00:14:40,639
on those running ec2 instances even if

420
00:14:40,639 --> 00:14:42,320
you don't have the ssr key it runs them

421
00:14:42,320 --> 00:14:44,480
as root so that's uh you know an extra

422
00:14:44,480 --> 00:14:45,920
privilege for you so and this and the

423
00:14:45,920 --> 00:14:48,240
output is is root now let's run another

424
00:14:48,240 --> 00:14:50,480
attack so you if we get if we can get

425
00:14:50,480 --> 00:14:52,639
the interpreter shell against that

426
00:14:52,639 --> 00:14:54,399
running instance so i'm going to choose

427
00:14:54,399 --> 00:14:56,560
it's it's its id

428
00:14:56,560 --> 00:14:58,880
and won't choose the uh

429
00:14:58,880 --> 00:15:01,839
number four for the metasploit

430
00:15:01,839 --> 00:15:04,320
now it says give me the remote ib you

431
00:15:04,320 --> 00:15:06,399
want to connect back to so i'm going to

432
00:15:06,399 --> 00:15:09,519
give it the internal ib for my uh for my

433
00:15:09,519 --> 00:15:11,360
cali for my calorie machine and then i'm

434
00:15:11,360 --> 00:15:14,240
going to to use the sport and then it

435
00:15:14,240 --> 00:15:16,880
wants to ask what kind of uh

436
00:15:16,880 --> 00:15:18,399
payload do you want to run so i'm going

437
00:15:18,399 --> 00:15:20,560
to choose payload number one so it's now

438
00:15:20,560 --> 00:15:22,240
it says if you want you can just paste

439
00:15:22,240 --> 00:15:24,800
this command in your in your kali server

440
00:15:24,800 --> 00:15:26,800
but i have already my listener running

441
00:15:26,800 --> 00:15:30,320
my listener is is already ready to me

442
00:15:30,320 --> 00:15:31,839
waiting for it and that's the command

443
00:15:31,839 --> 00:15:33,519
that's being sent

444
00:15:33,519 --> 00:15:34,959
that's the command that's being sent to

445
00:15:34,959 --> 00:15:36,800
the instance so it's a it's a python

446
00:15:36,800 --> 00:15:39,440
command to actually exploit this now it

447
00:15:39,440 --> 00:15:41,360
should be running we should have we

448
00:15:41,360 --> 00:15:45,199
should have a session in a short while

449
00:15:45,360 --> 00:15:46,800
okay so now

450
00:15:46,800 --> 00:15:49,360
now i'm praying that it's it all works

451
00:15:49,360 --> 00:15:51,920
sessions

452
00:15:52,000 --> 00:15:55,839
okay and we have a session okay so

453
00:15:55,839 --> 00:15:58,079
let's check this session

454
00:15:58,079 --> 00:16:00,959
sessions dash i and then

455
00:16:00,959 --> 00:16:02,399
search number one

456
00:16:02,399 --> 00:16:03,680
and then we can see that we already have

457
00:16:03,680 --> 00:16:04,959
a session inside

458
00:16:04,959 --> 00:16:06,639
so i can for example maybe run some

459
00:16:06,639 --> 00:16:08,880
commands like vs

460
00:16:08,880 --> 00:16:11,680
to check all of the of the uh uh

461
00:16:11,680 --> 00:16:14,399
processes running on that aec2 on that

462
00:16:14,399 --> 00:16:15,279
server

463
00:16:15,279 --> 00:16:16,720
uh so

464
00:16:16,720 --> 00:16:19,040
we can see for example our uh command

465
00:16:19,040 --> 00:16:21,839
that actually run the the the the the

466
00:16:21,839 --> 00:16:24,320
payload is the ssm manager that's

467
00:16:24,320 --> 00:16:26,880
running uh so now it's uh of course it

468
00:16:26,880 --> 00:16:28,800
timed out here because this is this

469
00:16:28,800 --> 00:16:30,480
command is taking a long time to return

470
00:16:30,480 --> 00:16:32,000
because it's captured the the session

471
00:16:32,000 --> 00:16:34,399
already but otherwise it's just going

472
00:16:34,399 --> 00:16:36,240
normal so for example i can just you

473
00:16:36,240 --> 00:16:37,440
know uh

474
00:16:37,440 --> 00:16:39,519
see the help me on my metric shell and

475
00:16:39,519 --> 00:16:42,800
they can for example get a shell inside

476
00:16:42,800 --> 00:16:44,639
so now i have a shell inside the server

477
00:16:44,639 --> 00:16:46,240
who are my roots

478
00:16:46,240 --> 00:16:48,079
maybe if config to check if i'm running

479
00:16:48,079 --> 00:16:51,279
actually inside an ec2 an ec2 server so

480
00:16:51,279 --> 00:16:53,440
interestingly that's my

481
00:16:53,440 --> 00:16:56,000
aec2 image that's running

482
00:16:56,000 --> 00:16:57,600
for example i can

483
00:16:57,600 --> 00:17:00,240
maybe backdoor curl against the metadata

484
00:17:00,240 --> 00:17:02,160
internal service which we discussed

485
00:17:02,160 --> 00:17:03,519
before

486
00:17:03,519 --> 00:17:04,959
see if we can

487
00:17:04,959 --> 00:17:06,880
ask this one

488
00:17:06,880 --> 00:17:08,720
it responds to us and yes it does

489
00:17:08,720 --> 00:17:11,199
respond so this is obviously an ec2

490
00:17:11,199 --> 00:17:13,039
server that's actually running for us

491
00:17:13,039 --> 00:17:14,079
now

492
00:17:14,079 --> 00:17:16,240
i can run other types of attack attacks

493
00:17:16,240 --> 00:17:18,799
for example i can try to

494
00:17:18,799 --> 00:17:20,079
download the

495
00:17:20,079 --> 00:17:22,720
metadata inside it for example or maybe

496
00:17:22,720 --> 00:17:24,079
ask it to

497
00:17:24,079 --> 00:17:25,760
run any command they want or a regular

498
00:17:25,760 --> 00:17:28,240
reverse shell so maybe display file to

499
00:17:28,240 --> 00:17:32,919
run to display the ttc password file

500
00:17:36,960 --> 00:17:38,880
so now it's going to to to to send the

501
00:17:38,880 --> 00:17:40,240
command to this instance and then it's

502
00:17:40,240 --> 00:17:42,160
going to display the file that's

503
00:17:42,160 --> 00:17:44,720
actually so that obviously it worked now

504
00:17:44,720 --> 00:17:47,200
it actually launched that command to

505
00:17:47,200 --> 00:17:49,360
show the hc password file on that remote

506
00:17:49,360 --> 00:17:51,440
ec2 instance even though i don't have

507
00:17:51,440 --> 00:17:52,799
any access to it normally i don't have

508
00:17:52,799 --> 00:17:54,720
the ssh key for that but we're doing the

509
00:17:54,720 --> 00:17:56,640
access from inside in place and using

510
00:17:56,640 --> 00:17:57,840
the ssm

511
00:17:57,840 --> 00:17:59,520
feature inside a device and even though

512
00:17:59,520 --> 00:18:01,280
it's a well documented feature many many

513
00:18:01,280 --> 00:18:02,960
security admins in edwards don't know

514
00:18:02,960 --> 00:18:04,960
about it so if

515
00:18:04,960 --> 00:18:06,400
unless you actually actually know what

516
00:18:06,400 --> 00:18:08,480
you're looking for this command will

517
00:18:08,480 --> 00:18:09,840
look like as if it was coming from

518
00:18:09,840 --> 00:18:11,440
inside aws so it's not coming from

519
00:18:11,440 --> 00:18:14,559
outside so maybe people might not find

520
00:18:14,559 --> 00:18:15,840
it you know might not look for it

521
00:18:15,840 --> 00:18:18,080
properly in in in their logging systems

522
00:18:18,080 --> 00:18:19,679
uh so that's something to to care about

523
00:18:19,679 --> 00:18:21,919
if you're running easy any cloud let's

524
00:18:21,919 --> 00:18:23,600
say environment now if i were to run

525
00:18:23,600 --> 00:18:25,600
this against like a bunch of vc2

526
00:18:25,600 --> 00:18:27,280
instances all of them maybe i have like

527
00:18:27,280 --> 00:18:29,039
10 ec2 instances i can just choose

528
00:18:29,039 --> 00:18:30,880
number one it will say do you want to do

529
00:18:30,880 --> 00:18:33,520
this on all instances yes i want what

530
00:18:33,520 --> 00:18:35,760
kind of uh thing do you want to do i'm

531
00:18:35,760 --> 00:18:38,000
going to actually run the command which

532
00:18:38,000 --> 00:18:40,720
is uh for example a

533
00:18:40,720 --> 00:18:42,400
cat etc

534
00:18:42,400 --> 00:18:44,320
uh password now it's going to run it on

535
00:18:44,320 --> 00:18:46,559
all on all targets it's going to give me

536
00:18:46,559 --> 00:18:48,480
a command for linux instances and for

537
00:18:48,480 --> 00:18:50,320
windows because they could be they could

538
00:18:50,320 --> 00:18:51,840
be different forward for for instance

539
00:18:51,840 --> 00:18:53,039
i'm going to say from the number who am

540
00:18:53,039 --> 00:18:55,200
i and then it says

541
00:18:55,200 --> 00:18:56,799
that now it's going to launch the attack

542
00:18:56,799 --> 00:18:57,919
on all of them if you want to check the

543
00:18:57,919 --> 00:18:59,919
results of those attacks on all of these

544
00:18:59,919 --> 00:19:02,080
instances maybe 10 or 20 instances you

545
00:19:02,080 --> 00:19:04,799
can check the the command results option

546
00:19:04,799 --> 00:19:08,720
so i'm going to say command results yes

547
00:19:08,720 --> 00:19:10,640
sorry i'm continuously interrupting you

548
00:19:10,640 --> 00:19:14,480
apologies uh it's now at uh 39 minutes

549
00:19:14,480 --> 00:19:16,640
past so just to give you okay

550
00:19:16,640 --> 00:19:18,799
so you have about five minutes

551
00:19:18,799 --> 00:19:21,120
excellent excellent yes excellent so now

552
00:19:21,120 --> 00:19:22,640
if i check the command result option

553
00:19:22,640 --> 00:19:24,960
it's going to say command id and then

554
00:19:24,960 --> 00:19:26,960
for the for this particular instance the

555
00:19:26,960 --> 00:19:28,960
command result is success and then it's

556
00:19:28,960 --> 00:19:31,039
going to give me the command output so

557
00:19:31,039 --> 00:19:32,559
whatever commands i can run on all of

558
00:19:32,559 --> 00:19:34,559
the instances that i have it will go to

559
00:19:34,559 --> 00:19:36,000
this will go and they should run that

560
00:19:36,000 --> 00:19:37,280
command on all of these instances and

561
00:19:37,280 --> 00:19:39,360
then to go to report to me the output

562
00:19:39,360 --> 00:19:41,600
for that command so obviously the bulk

563
00:19:41,600 --> 00:19:44,160
can help you launching attacks against

564
00:19:44,160 --> 00:19:45,919
many instances at the same time or one

565
00:19:45,919 --> 00:19:47,440
particular instance that you want and

566
00:19:47,440 --> 00:19:49,520
the attacks are very let's say

567
00:19:49,520 --> 00:19:51,200
customized you can use some of the ready

568
00:19:51,200 --> 00:19:52,720
ones or you can just run any command

569
00:19:52,720 --> 00:19:55,360
that you want by yourself so uh in a

570
00:19:55,360 --> 00:19:58,400
nutshell that's what that's what uh burp

571
00:19:58,400 --> 00:19:59,520
is

572
00:19:59,520 --> 00:20:01,760
i can also show you the training

573
00:20:01,760 --> 00:20:02,960
mode but it's going to take a few

574
00:20:02,960 --> 00:20:05,280
minutes so otherwise those are the the

575
00:20:05,280 --> 00:20:08,000
the the available uh features inside

576
00:20:08,000 --> 00:20:11,039
lambda sidebar so far and of course i'm

577
00:20:11,039 --> 00:20:13,039
going to keep on you know working on it

578
00:20:13,039 --> 00:20:15,120
so for example next four part is to do

579
00:20:15,120 --> 00:20:17,200
more lambda focused attacks you see in

580
00:20:17,200 --> 00:20:18,240
the attack where we downloaded the

581
00:20:18,240 --> 00:20:19,600
lambda function i'm going to add one

582
00:20:19,600 --> 00:20:20,960
where you can actually upload or

583
00:20:20,960 --> 00:20:23,200
backdoor the lambda function uh do some

584
00:20:23,200 --> 00:20:25,280
persistence and backdooring to add for

585
00:20:25,280 --> 00:20:26,400
example add

586
00:20:26,400 --> 00:20:28,400
utilize or maybe abuse the trust

587
00:20:28,400 --> 00:20:31,440
relationships between accounts or maybe

588
00:20:31,440 --> 00:20:33,440
open up some security groups and also

589
00:20:33,440 --> 00:20:35,360
enable third marty a third-party model

590
00:20:35,360 --> 00:20:38,080
supports and also a web interface api so

591
00:20:38,080 --> 00:20:39,520
if you would like if you think park is

592
00:20:39,520 --> 00:20:41,039
interesting to to help you in your

593
00:20:41,039 --> 00:20:42,960
inventory testing inside abs maybe you

594
00:20:42,960 --> 00:20:44,720
can contribute at this add this at this

595
00:20:44,720 --> 00:20:45,440
uh

596
00:20:45,440 --> 00:20:46,640
url

597
00:20:46,640 --> 00:20:48,480
i'm not going to bite i'm going to be

598
00:20:48,480 --> 00:20:50,159
very very very pleased with your

599
00:20:50,159 --> 00:20:52,799
contributions to bach now uh uh i'm

600
00:20:52,799 --> 00:20:55,039
finished and now it's time for questions

601
00:20:55,039 --> 00:20:56,720
so if you have any questions i'll be

602
00:20:56,720 --> 00:20:57,919
more than

603
00:20:57,919 --> 00:21:01,679
ready to answer

