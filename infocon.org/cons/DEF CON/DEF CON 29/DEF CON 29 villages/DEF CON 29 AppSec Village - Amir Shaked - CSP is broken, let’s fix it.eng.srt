1
00:00:00,399 --> 00:00:02,879
hi everyone thank you for joining me uh

2
00:00:02,879 --> 00:00:04,880
today we're going to talk about csp

3
00:00:04,880 --> 00:00:06,560
where it is broken what can you do to

4
00:00:06,560 --> 00:00:08,880
fix it um or just demystify

5
00:00:08,880 --> 00:00:12,960
some of the aspects of csp so

6
00:00:12,960 --> 00:00:14,559
once again thank you for joining me for

7
00:00:14,559 --> 00:00:17,440
this this talk

8
00:00:17,440 --> 00:00:20,640
okay my name is amir shakad i lead the

9
00:00:20,640 --> 00:00:23,359
engineering and research at parameter x

10
00:00:23,359 --> 00:00:27,039
um private rex we're a cyber security

11
00:00:27,039 --> 00:00:28,640
company

12
00:00:28,640 --> 00:00:31,760
doing multiple apsec products

13
00:00:31,760 --> 00:00:34,960
and uh i'm a lifelong hacker and i love

14
00:00:34,960 --> 00:00:36,880
building things with good people and

15
00:00:36,880 --> 00:00:38,160
seeing them use the

16
00:00:38,160 --> 00:00:41,120
to help people in any aspect especially

17
00:00:41,120 --> 00:00:42,320
protecting from

18
00:00:42,320 --> 00:00:45,600
bad actors okay

19
00:00:45,600 --> 00:00:49,280
so let's begin um we'll start with the

20
00:00:49,280 --> 00:00:50,640
story the story of

21
00:00:50,640 --> 00:00:54,079
i wanted to enable csp on my own website

22
00:00:54,079 --> 00:00:56,399
i went on and i read and understood the

23
00:00:56,399 --> 00:00:58,000
meaning of all the directives

24
00:00:58,000 --> 00:00:59,280
and all the different options and

25
00:00:59,280 --> 00:01:01,199
configurations uh exist the

26
00:01:01,199 --> 00:01:04,400
documentation was pretty straightforward

27
00:01:04,400 --> 00:01:07,360
um i added the csp header with the

28
00:01:07,360 --> 00:01:08,400
report only

29
00:01:08,400 --> 00:01:12,799
option to see all the potential

30
00:01:13,200 --> 00:01:15,759
traffic coming out of my website i

31
00:01:15,759 --> 00:01:16,799
analyzed it

32
00:01:16,799 --> 00:01:18,479
about day later i marked all the

33
00:01:18,479 --> 00:01:19,920
resources that i really think are

34
00:01:19,920 --> 00:01:21,040
related to our

35
00:01:21,040 --> 00:01:25,200
website and configured the csp properly

36
00:01:25,200 --> 00:01:28,000
rolled out block mode and had zero

37
00:01:28,000 --> 00:01:29,920
issues with the with my uh

38
00:01:29,920 --> 00:01:31,840
infra everything kept on working

39
00:01:31,840 --> 00:01:33,200
properly

40
00:01:33,200 --> 00:01:36,720
um so that's my story uh and

41
00:01:36,720 --> 00:01:38,720
i think no one ever said such a story

42
00:01:38,720 --> 00:01:40,000
because it doesn't work

43
00:01:40,000 --> 00:01:42,640
never happened in such a way um for

44
00:01:42,640 --> 00:01:44,479
multiple reasons and we're gonna

45
00:01:44,479 --> 00:01:47,360
see examples of some of those reasons um

46
00:01:47,360 --> 00:01:49,360
today

47
00:01:49,360 --> 00:01:53,600
a different story that happened

48
00:01:53,600 --> 00:01:57,040
later that year this one is a real story

49
00:01:57,040 --> 00:02:00,079
unfortunately um came from

50
00:02:00,079 --> 00:02:03,759
a customer of ours

51
00:02:04,399 --> 00:02:07,119
they got a call from the credit card

52
00:02:07,119 --> 00:02:09,360
company

53
00:02:09,360 --> 00:02:13,360
and telling them that a lot of credit

54
00:02:13,360 --> 00:02:14,400
cards were

55
00:02:14,400 --> 00:02:18,239
stolen via their website

56
00:02:18,239 --> 00:02:20,000
working with them trying to analyze the

57
00:02:20,000 --> 00:02:22,000
details they brought in a security

58
00:02:22,000 --> 00:02:24,080
consultant they found a third-party

59
00:02:24,080 --> 00:02:26,239
vendor that was used

60
00:02:26,239 --> 00:02:28,800
and was responsible and the third-party

61
00:02:28,800 --> 00:02:30,959
script was breached their source code

62
00:02:30,959 --> 00:02:33,040
was bridged

63
00:02:33,040 --> 00:02:36,160
and that that snippet started sending

64
00:02:36,160 --> 00:02:37,280
additional information

65
00:02:37,280 --> 00:02:39,440
collected from the page to an external

66
00:02:39,440 --> 00:02:41,519
domain say malicious.com but any

67
00:02:41,519 --> 00:02:42,400
external

68
00:02:42,400 --> 00:02:46,239
domain and that's how the credit card

69
00:02:46,239 --> 00:02:47,120
information was

70
00:02:47,120 --> 00:02:49,360
stolen from the website and one of the

71
00:02:49,360 --> 00:02:50,480
things

72
00:02:50,480 --> 00:02:52,879
that was brought up and was a question

73
00:02:52,879 --> 00:02:54,080
of how can it be

74
00:02:54,080 --> 00:02:58,400
because csp was supposed to do exactly

75
00:02:58,400 --> 00:02:58,720
that

76
00:02:58,720 --> 00:03:01,440
protect the client side in terms of what

77
00:03:01,440 --> 00:03:04,879
types of communications are allowed

78
00:03:04,879 --> 00:03:08,239
and where can the data be pushed over to

79
00:03:08,239 --> 00:03:11,840
and and the sad story is that the csp

80
00:03:11,840 --> 00:03:14,000
was there but it wasn't there because of

81
00:03:14,000 --> 00:03:15,200
a lot of

82
00:03:15,200 --> 00:03:16,720
gaps that can happen while you're

83
00:03:16,720 --> 00:03:18,319
configuring it

84
00:03:18,319 --> 00:03:21,280
either it's missing some key directives

85
00:03:21,280 --> 00:03:22,000
or

86
00:03:22,000 --> 00:03:23,760
[Music]

87
00:03:23,760 --> 00:03:27,280
setting a connect source only

88
00:03:27,280 --> 00:03:30,799
or from where you can pull script

89
00:03:30,799 --> 00:03:32,799
but the attacker just bypassed that with

90
00:03:32,799 --> 00:03:33,920
some image tags

91
00:03:33,920 --> 00:03:37,120
and adding the information as um as the

92
00:03:37,120 --> 00:03:38,640
request parameters

93
00:03:38,640 --> 00:03:40,640
and we're going to touch on some key

94
00:03:40,640 --> 00:03:42,080
examples uh later on

95
00:03:42,080 --> 00:03:47,840
in the in this talk

96
00:03:58,840 --> 00:04:00,239
okay

97
00:04:00,239 --> 00:04:03,360
so what is csp

98
00:04:03,920 --> 00:04:05,960
csp is um

99
00:04:05,960 --> 00:04:09,339
[Music]

100
00:04:11,200 --> 00:04:13,120
first is short for content security

101
00:04:13,120 --> 00:04:15,280
policy it's an added layer

102
00:04:15,280 --> 00:04:17,279
uh primarily focused are trying to

103
00:04:17,279 --> 00:04:18,478
protect um

104
00:04:18,478 --> 00:04:20,880
from different types of attacks on the

105
00:04:20,880 --> 00:04:23,040
client side mostly cross-site scripting

106
00:04:23,040 --> 00:04:25,280
or data injections

107
00:04:25,280 --> 00:04:27,520
and those attacks are mostly used for

108
00:04:27,520 --> 00:04:29,040
different kinds of data theft

109
00:04:29,040 --> 00:04:32,960
or phishing um defacement potentially

110
00:04:32,960 --> 00:04:35,280
though that's less common it's mostly uh

111
00:04:35,280 --> 00:04:37,280
the those exercises are mostly for

112
00:04:37,280 --> 00:04:40,320
uh data theft and um

113
00:04:40,320 --> 00:04:43,120
either directly or indirectly via

114
00:04:43,120 --> 00:04:45,199
phishing forms trying to extract extra

115
00:04:45,199 --> 00:04:46,080
information

116
00:04:46,080 --> 00:04:49,120
additional information from the user the

117
00:04:49,120 --> 00:04:50,880
standard itself originally

118
00:04:50,880 --> 00:04:53,600
named content restrictions actually that

119
00:04:53,600 --> 00:04:55,040
was proposed uh

120
00:04:55,040 --> 00:04:58,400
back in 2004 by robert hansen

121
00:04:58,400 --> 00:05:00,720
and it was first implemented in firefox

122
00:05:00,720 --> 00:05:01,840
4

123
00:05:01,840 --> 00:05:05,400
actually later on the first

124
00:05:05,400 --> 00:05:10,160
wc3c draft became public in 2012

125
00:05:10,160 --> 00:05:13,039
with the latest version 2 which is the

126
00:05:13,039 --> 00:05:14,080
most common in the

127
00:05:14,080 --> 00:05:16,720
one used today in practice we had the

128
00:05:16,720 --> 00:05:19,120
final version in 2016

129
00:05:19,120 --> 00:05:22,320
and the version 3

130
00:05:22,320 --> 00:05:24,639
which adds a lot of additional layers

131
00:05:24,639 --> 00:05:26,000
but

132
00:05:26,000 --> 00:05:28,080
again sadly not enough that's still in

133
00:05:28,080 --> 00:05:29,039
draft mode

134
00:05:29,039 --> 00:05:33,280
and still open for uh comments

135
00:05:34,639 --> 00:05:37,360
so how does it work what's the big

136
00:05:37,360 --> 00:05:38,160
promise and

137
00:05:38,160 --> 00:05:40,400
the idea behind csp essentially there

138
00:05:40,400 --> 00:05:41,919
are two types of headers

139
00:05:41,919 --> 00:05:43,759
uh it's an http header where there are

140
00:05:43,759 --> 00:05:45,360
two of those one

141
00:05:45,360 --> 00:05:48,800
is for uh report only they both have the

142
00:05:48,800 --> 00:05:49,919
same policy

143
00:05:49,919 --> 00:05:51,919
but they behave differently there is the

144
00:05:51,919 --> 00:05:53,520
report only policy

145
00:05:53,520 --> 00:05:56,560
whereas the browser will behave as if

146
00:05:56,560 --> 00:05:59,919
it is going to do the um

147
00:05:59,919 --> 00:06:02,240
the policy enforcement but it will only

148
00:06:02,240 --> 00:06:03,199
send information

149
00:06:03,199 --> 00:06:04,880
on what would have happened should the

150
00:06:04,880 --> 00:06:06,720
policy have been enforced and the other

151
00:06:06,720 --> 00:06:10,240
is active blocking basically enforcing

152
00:06:10,240 --> 00:06:11,440
the policy

153
00:06:11,440 --> 00:06:14,319
and having the option to report what was

154
00:06:14,319 --> 00:06:15,039
blocked

155
00:06:15,039 --> 00:06:19,520
so let's look at this example we have um

156
00:06:19,520 --> 00:06:23,600
three directives uh the default source

157
00:06:23,600 --> 00:06:26,800
and um scripts also report your arri

158
00:06:26,800 --> 00:06:28,400
what we basically have is

159
00:06:28,400 --> 00:06:31,440
here is any default source self says

160
00:06:31,440 --> 00:06:34,880
anything from the the website's domain

161
00:06:34,880 --> 00:06:38,800
can be loaded um javascript code can be

162
00:06:38,800 --> 00:06:40,960
loaded either from the domain website or

163
00:06:40,960 --> 00:06:43,440
from cdnjs.net

164
00:06:43,440 --> 00:06:45,120
and if there is any violation that's

165
00:06:45,120 --> 00:06:46,560
going to be reported to

166
00:06:46,560 --> 00:06:49,680
our domain slash csp logging

167
00:06:49,680 --> 00:06:51,120
now if you look at the example we have

168
00:06:51,120 --> 00:06:53,759
an image loaded from a local website and

169
00:06:53,759 --> 00:06:54,479
a scripts

170
00:06:54,479 --> 00:06:57,280
loaded from the cdn whitelisted domain

171
00:06:57,280 --> 00:06:58,240
that's gonna be

172
00:06:58,240 --> 00:07:01,360
valid and gonna work and if for some

173
00:07:01,360 --> 00:07:02,000
reason

174
00:07:02,000 --> 00:07:05,280
we have an additional um

175
00:07:05,280 --> 00:07:08,400
request coming from our website um that

176
00:07:08,400 --> 00:07:10,880
will not

177
00:07:10,880 --> 00:07:12,560
work and you can see it will not work

178
00:07:12,560 --> 00:07:14,160
because the domain is a bit differently

179
00:07:14,160 --> 00:07:14,880
uh it's

180
00:07:14,880 --> 00:07:16,010
common

181
00:07:16,010 --> 00:07:19,190
[Music]

182
00:07:20,240 --> 00:07:22,479
okay

183
00:07:23,440 --> 00:07:26,720
so it looks like a a great

184
00:07:26,720 --> 00:07:30,080
story of uh how a policy standard can

185
00:07:30,080 --> 00:07:31,440
help us protect the

186
00:07:31,440 --> 00:07:34,800
client side um but the problem with

187
00:07:34,800 --> 00:07:38,160
uh specifications like any specification

188
00:07:38,160 --> 00:07:40,560
is the gaps that it have and here is

189
00:07:40,560 --> 00:07:42,000
where the story starts

190
00:07:42,000 --> 00:07:44,879
uh going down to the rabbit hole first

191
00:07:44,879 --> 00:07:46,479
it's not fully defined

192
00:07:46,479 --> 00:07:48,639
uh things like what a report holds when

193
00:07:48,639 --> 00:07:50,639
to report leading to inconsistency when

194
00:07:50,639 --> 00:07:52,000
you're trying to actually analyze

195
00:07:52,000 --> 00:07:54,319
information those metrics or logs being

196
00:07:54,319 --> 00:07:56,160
reported by the browsers

197
00:07:56,160 --> 00:07:58,240
the implementation itself may be lacking

198
00:07:58,240 --> 00:07:59,680
um just search

199
00:07:59,680 --> 00:08:03,120
csp in the cve database and there are

200
00:08:03,120 --> 00:08:05,919
always items being found and it's very

201
00:08:05,919 --> 00:08:07,919
usage dependent because it's policy

202
00:08:07,919 --> 00:08:09,599
based and that can be abused and we're

203
00:08:09,599 --> 00:08:12,160
going to cover examples on all of these

204
00:08:12,160 --> 00:08:15,840
gaps in the specification

205
00:08:15,840 --> 00:08:19,360
so let's start with numbers um

206
00:08:19,360 --> 00:08:21,039
is it actually being used you know it's

207
00:08:21,039 --> 00:08:22,560
a great looks like a great technology

208
00:08:22,560 --> 00:08:23,840
security technology but

209
00:08:23,840 --> 00:08:26,479
is it actually being used out there by

210
00:08:26,479 --> 00:08:27,919
uh

211
00:08:27,919 --> 00:08:31,680
web developers or devsecops

212
00:08:31,680 --> 00:08:35,200
administrating websites this data

213
00:08:35,200 --> 00:08:38,159
is based on the http archive scans from

214
00:08:38,159 --> 00:08:40,080
the past few years it's an amazing

215
00:08:40,080 --> 00:08:43,360
database uh it's my first go-to when

216
00:08:43,360 --> 00:08:44,720
trying to do analysis

217
00:08:44,720 --> 00:08:46,880
on how different web technologies are

218
00:08:46,880 --> 00:08:48,160
being used

219
00:08:48,160 --> 00:08:51,440
uh well it can always have gaps it's

220
00:08:51,440 --> 00:08:53,680
just an amazing data source each month

221
00:08:53,680 --> 00:08:55,760
they scan

222
00:08:55,760 --> 00:08:58,640
around 4 million websites and store all

223
00:08:58,640 --> 00:09:00,240
the information

224
00:09:00,240 --> 00:09:02,399
in the http archives database anybody

225
00:09:02,399 --> 00:09:04,800
can access and use it for research

226
00:09:04,800 --> 00:09:06,880
so what do we see here what we have here

227
00:09:06,880 --> 00:09:08,240
is the use of

228
00:09:08,240 --> 00:09:11,120
actual security headers over time in the

229
00:09:11,120 --> 00:09:12,560
past few years and then

230
00:09:12,560 --> 00:09:14,240
you can see it relative to the amount of

231
00:09:14,240 --> 00:09:16,000
scan domains so it's relative

232
00:09:16,000 --> 00:09:17,120
information

233
00:09:17,120 --> 00:09:18,399
and what we see is actually very

234
00:09:18,399 --> 00:09:21,040
interesting we see

235
00:09:21,040 --> 00:09:24,640
that first of all the csp adoption grows

236
00:09:24,640 --> 00:09:26,959
while slowly but it is growing at about

237
00:09:26,959 --> 00:09:29,120
10 of the sites today

238
00:09:29,120 --> 00:09:32,480
um and if we will look

239
00:09:32,480 --> 00:09:36,560
at the actual um actual items

240
00:09:36,560 --> 00:09:39,600
we'll see that the first uh

241
00:09:39,600 --> 00:09:41,839
the top one is mostly that's all the

242
00:09:41,839 --> 00:09:43,120
security headers by the way

243
00:09:43,120 --> 00:09:46,080
uh as you can see not just csp so we see

244
00:09:46,080 --> 00:09:48,160
a growing usage of two headers that are

245
00:09:48,160 --> 00:09:50,240
actually deprecated

246
00:09:50,240 --> 00:09:51,920
and were replaced by different

247
00:09:51,920 --> 00:09:54,959
directives in csp

248
00:09:54,959 --> 00:09:57,600
and we do see an increase in overall

249
00:09:57,600 --> 00:09:59,200
security

250
00:09:59,200 --> 00:10:01,600
options in http but they're mostly

251
00:10:01,600 --> 00:10:04,800
around making sure the traffic is

252
00:10:04,800 --> 00:10:07,680
secured by tls that's what we can see

253
00:10:07,680 --> 00:10:09,839
here

254
00:10:10,880 --> 00:10:13,120
so it looks like a positive trend we see

255
00:10:13,120 --> 00:10:14,560
more and more websites

256
00:10:14,560 --> 00:10:18,320
using this uh security uh technologies

257
00:10:18,320 --> 00:10:21,200
but if you actually look at those uh 700

258
00:10:21,200 --> 00:10:22,800
000 websites

259
00:10:22,800 --> 00:10:25,760
um using csp and trying to understand

260
00:10:25,760 --> 00:10:27,200
what they're actually using we'll see

261
00:10:27,200 --> 00:10:27,760
that they're

262
00:10:27,760 --> 00:10:30,959
basically uh these directives are the

263
00:10:30,959 --> 00:10:32,320
most common ones

264
00:10:32,320 --> 00:10:35,200
and they're basically uh just replacing

265
00:10:35,200 --> 00:10:35,600
the

266
00:10:35,600 --> 00:10:38,720
um the obsolete ones

267
00:10:38,720 --> 00:10:41,120
with the new version of those so it's

268
00:10:41,120 --> 00:10:42,880
not a real adoption of the more

269
00:10:42,880 --> 00:10:46,720
um complicated and uh

270
00:10:46,720 --> 00:10:48,959
interesting directives it's mostly just

271
00:10:48,959 --> 00:10:50,079
the tls

272
00:10:50,079 --> 00:10:52,399
um what we have here brief explanation

273
00:10:52,399 --> 00:10:53,680
so the top one

274
00:10:53,680 --> 00:10:56,959
uh frame ancestors that directive

275
00:10:56,959 --> 00:10:59,680
states uh if our website is allowed to

276
00:10:59,680 --> 00:11:01,040
be embedded within a page

277
00:11:01,040 --> 00:11:03,279
should the browser allowed our website

278
00:11:03,279 --> 00:11:05,040
to be embedded within a page

279
00:11:05,040 --> 00:11:07,440
uh that's the most common one the next

280
00:11:07,440 --> 00:11:08,160
to

281
00:11:08,160 --> 00:11:10,320
the operating secure moves all the

282
00:11:10,320 --> 00:11:11,760
traffic to https

283
00:11:11,760 --> 00:11:14,880
and block mixed content states that no

284
00:11:14,880 --> 00:11:17,279
traffic should be without http without

285
00:11:17,279 --> 00:11:18,480
https so

286
00:11:18,480 --> 00:11:21,760
do not allow both secure and insecure

287
00:11:21,760 --> 00:11:24,160
connections for you within the page

288
00:11:24,160 --> 00:11:25,760
just in case somebody made a mistake in

289
00:11:25,760 --> 00:11:27,680
the programming

290
00:11:27,680 --> 00:11:30,320
all the fetch directives uh default

291
00:11:30,320 --> 00:11:32,160
source script source etc

292
00:11:32,160 --> 00:11:34,160
those are the ones actually controlling

293
00:11:34,160 --> 00:11:36,320
the domains that can be communicated

294
00:11:36,320 --> 00:11:37,519
from the website

295
00:11:37,519 --> 00:11:38,959
so these are the interesting ones we

296
00:11:38,959 --> 00:11:40,399
want to focus on and you can see that

297
00:11:40,399 --> 00:11:41,600
the adoption here is

298
00:11:41,600 --> 00:11:43,920
still pretty low compared to the amount

299
00:11:43,920 --> 00:11:46,399
of websites out there

300
00:11:46,399 --> 00:11:48,800
so it looks like a positive trend but

301
00:11:48,800 --> 00:11:51,920
there is still a gap here

302
00:11:52,560 --> 00:11:54,800
and

303
00:11:55,760 --> 00:11:57,680
you want to be mindful when you're

304
00:11:57,680 --> 00:11:58,880
talking about a policy

305
00:11:58,880 --> 00:12:01,279
uh some of the examples i saw when i

306
00:12:01,279 --> 00:12:02,880
started to dive into all those

307
00:12:02,880 --> 00:12:05,920
uh thousands of uh

308
00:12:05,920 --> 00:12:08,240
actual users in the wild and we see

309
00:12:08,240 --> 00:12:11,279
cases where

310
00:12:11,279 --> 00:12:14,079
a very insecure usage like default

311
00:12:14,079 --> 00:12:15,360
source which allows

312
00:12:15,360 --> 00:12:19,600
any unsafe eval or unsafe inline code

313
00:12:19,600 --> 00:12:21,600
essentially allowing anything to be run

314
00:12:21,600 --> 00:12:23,600
on the page protecting nothing

315
00:12:23,600 --> 00:12:27,760
versus um a very restrictive mode

316
00:12:27,760 --> 00:12:29,519
like the script source with the nonce

317
00:12:29,519 --> 00:12:31,760
stating that any inline code should

318
00:12:31,760 --> 00:12:33,040
match one of these

319
00:12:33,040 --> 00:12:35,120
signatures so somebody can even

320
00:12:35,120 --> 00:12:38,399
manipulate your own inline code

321
00:12:38,399 --> 00:12:40,240
unless they actually control the server

322
00:12:40,240 --> 00:12:43,120
obviously and can change everything

323
00:12:43,120 --> 00:12:45,040
but outside the website they can't

324
00:12:45,040 --> 00:12:47,519
control it

325
00:12:47,920 --> 00:12:50,959
we saw a lot of examples of just pool

326
00:12:50,959 --> 00:12:52,160
usage uh

327
00:12:52,160 --> 00:12:54,000
when i was looking at the directives i

328
00:12:54,000 --> 00:12:55,839
saw over 700 of those

329
00:12:55,839 --> 00:12:57,680
uh where there should be only about 30.

330
00:12:57,680 --> 00:12:59,680
uh i gave some examples here

331
00:12:59,680 --> 00:13:01,920
uh the last one uh i would say the

332
00:13:01,920 --> 00:13:04,000
funniest for me uh it's been around

333
00:13:04,000 --> 00:13:06,000
for a while go for it i really have no

334
00:13:06,000 --> 00:13:07,839
idea what they were trying to accomplish

335
00:13:07,839 --> 00:13:09,040
with that policy

336
00:13:09,040 --> 00:13:11,519
but a lot of mistakes um from different

337
00:13:11,519 --> 00:13:13,120
kinds

338
00:13:13,120 --> 00:13:16,240
when actually trying to implement uh csp

339
00:13:16,240 --> 00:13:19,360
uh spelling errors uh replacing the

340
00:13:19,360 --> 00:13:20,399
header

341
00:13:20,399 --> 00:13:23,760
key with the header content

342
00:13:23,760 --> 00:13:25,279
and the issue is with that whenever the

343
00:13:25,279 --> 00:13:27,519
policy is invalid it's just

344
00:13:27,519 --> 00:13:29,600
not doing anything and there is also no

345
00:13:29,600 --> 00:13:31,600
reporting so uh

346
00:13:31,600 --> 00:13:34,240
you can really have no idea that nothing

347
00:13:34,240 --> 00:13:35,360
is actually working

348
00:13:35,360 --> 00:13:37,360
so i really invite everybody who's

349
00:13:37,360 --> 00:13:39,360
trying to use it to use the

350
00:13:39,360 --> 00:13:42,399
csp evaluator uh by google uh it's an

351
00:13:42,399 --> 00:13:45,279
amazing one that shows

352
00:13:45,279 --> 00:13:46,959
it's the best evaluator i've seen to

353
00:13:46,959 --> 00:13:49,760
date to make sure the policy is actually

354
00:13:49,760 --> 00:13:52,240
accurate

355
00:13:55,120 --> 00:13:57,920
okay so let's talk about actually

356
00:13:57,920 --> 00:13:59,519
reading the reports

357
00:13:59,519 --> 00:14:01,040
this is an interesting case when you

358
00:14:01,040 --> 00:14:03,279
actually have an installation in place

359
00:14:03,279 --> 00:14:04,560
with the reporting on different

360
00:14:04,560 --> 00:14:05,680
violations and you're trying to

361
00:14:05,680 --> 00:14:07,199
understand what you're seeing you see

362
00:14:07,199 --> 00:14:07,920
that

363
00:14:07,920 --> 00:14:10,480
data isn't normalized it really is full

364
00:14:10,480 --> 00:14:11,600
of

365
00:14:11,600 --> 00:14:14,079
stuff that's not relevant anything that

366
00:14:14,079 --> 00:14:15,680
an extension

367
00:14:15,680 --> 00:14:18,160
on the browser that adds code to the

368
00:14:18,160 --> 00:14:20,160
page will actually create

369
00:14:20,160 --> 00:14:22,639
violations that you have nothing to to

370
00:14:22,639 --> 00:14:23,199
do with

371
00:14:23,199 --> 00:14:26,079
ads can create that noise web proxies

372
00:14:26,079 --> 00:14:26,800
that load the

373
00:14:26,800 --> 00:14:29,680
website can create it bots as well and

374
00:14:29,680 --> 00:14:30,959
the issue is that

375
00:14:30,959 --> 00:14:34,720
um all that nonsense of information

376
00:14:34,720 --> 00:14:37,279
is really creating a lot of problems and

377
00:14:37,279 --> 00:14:38,399
trying to analyze

378
00:14:38,399 --> 00:14:41,760
if there is a problem with the policy

379
00:14:41,760 --> 00:14:44,480
that you created do do your users

380
00:14:44,480 --> 00:14:47,760
experience any kind of problems or not

381
00:14:47,760 --> 00:14:49,440
let's take extensions for example this

382
00:14:49,440 --> 00:14:51,360
is an interesting case

383
00:14:51,360 --> 00:14:55,760
by design an extension within a chrome

384
00:14:55,760 --> 00:14:56,399
browser

385
00:14:56,399 --> 00:14:59,920
can bypass the website's csp policy

386
00:14:59,920 --> 00:15:03,199
um and can ignore it completely

387
00:15:03,199 --> 00:15:05,040
so it's not protecting from stuff that

388
00:15:05,040 --> 00:15:07,199
can come from within the

389
00:15:07,199 --> 00:15:08,880
machine itself like an extension

390
00:15:08,880 --> 00:15:10,800
installed on the browser

391
00:15:10,800 --> 00:15:12,399
but if the extension is doing something

392
00:15:12,399 --> 00:15:14,240
within the page uh

393
00:15:14,240 --> 00:15:16,079
in a certain way you will still get the

394
00:15:16,079 --> 00:15:18,240
violation reports from that extension

395
00:15:18,240 --> 00:15:19,440
and you have nothing to do with it

396
00:15:19,440 --> 00:15:21,920
because uh they will still work

397
00:15:21,920 --> 00:15:24,880
um the last one here has some the github

398
00:15:24,880 --> 00:15:27,279
here uh some really interesting examples

399
00:15:27,279 --> 00:15:29,040
of uh trying to explain

400
00:15:29,040 --> 00:15:31,920
and a lot of unexplained cases as well

401
00:15:31,920 --> 00:15:32,800
um different

402
00:15:32,800 --> 00:15:35,720
um reports that

403
00:15:35,720 --> 00:15:38,079
[Music]

404
00:15:38,079 --> 00:15:40,720
this security analyst have seen over

405
00:15:40,720 --> 00:15:42,959
time

406
00:15:44,079 --> 00:15:45,199
and then we have the browser

407
00:15:45,199 --> 00:15:47,519
misalignments actually like we said the

408
00:15:47,519 --> 00:15:49,839
actual data

409
00:15:49,839 --> 00:15:52,240
isn't it's not defined within the spec

410
00:15:52,240 --> 00:15:54,160
when and how the information should be

411
00:15:54,160 --> 00:15:56,160
sent and you can see a few examples here

412
00:15:56,160 --> 00:15:57,519
which are actually very interesting

413
00:15:57,519 --> 00:15:59,199
let's start with chrome

414
00:15:59,199 --> 00:16:02,560
in chrome if a block was actually

415
00:16:02,560 --> 00:16:04,480
and the resource was actually blocked

416
00:16:04,480 --> 00:16:06,160
then we will get the report

417
00:16:06,160 --> 00:16:10,079
um once um and only once for that

418
00:16:10,079 --> 00:16:11,759
first block even if the resource is

419
00:16:11,759 --> 00:16:14,079
being called again and again and again

420
00:16:14,079 --> 00:16:17,519
um on firefox for example you will get

421
00:16:17,519 --> 00:16:20,639
uh the reports for every time the

422
00:16:20,639 --> 00:16:22,240
resource is trying to be called

423
00:16:22,240 --> 00:16:25,680
so that's one big difference on its own

424
00:16:25,680 --> 00:16:27,810
and then safari at least and the

425
00:16:27,810 --> 00:16:28,959
[Music]

426
00:16:28,959 --> 00:16:32,079
version that we analyzed at the time

427
00:16:32,079 --> 00:16:35,519
um would only report

428
00:16:35,519 --> 00:16:37,600
the block uri for example and it would

429
00:16:37,600 --> 00:16:39,680
truncate that to the top level domain it

430
00:16:39,680 --> 00:16:40,480
will give you

431
00:16:40,480 --> 00:16:44,079
the full uri so these kind of

432
00:16:44,079 --> 00:16:45,920
misalignments create a lot of

433
00:16:45,920 --> 00:16:47,920
noise and but also create some

434
00:16:47,920 --> 00:16:50,079
guidelines or tricks that you can use to

435
00:16:50,079 --> 00:16:50,480
get

436
00:16:50,480 --> 00:16:52,480
better value out of the reports that

437
00:16:52,480 --> 00:16:55,040
you're getting

438
00:16:56,639 --> 00:16:59,839
and last but not least i haven't seen a

439
00:16:59,839 --> 00:17:01,279
lot of cases of this but

440
00:17:01,279 --> 00:17:03,600
log spamming where the client side by

441
00:17:03,600 --> 00:17:05,679
design cannot be verified and the

442
00:17:05,679 --> 00:17:07,520
reporting can be abused

443
00:17:07,520 --> 00:17:09,599
uh especially if you have some machine

444
00:17:09,599 --> 00:17:11,359
learning model trying to learn

445
00:17:11,359 --> 00:17:13,199
what domains should be whitelisted by

446
00:17:13,199 --> 00:17:14,720
volume for example

447
00:17:14,720 --> 00:17:18,400
so either it's creating a dos

448
00:17:18,400 --> 00:17:21,359
on your sock group or just trying to do

449
00:17:21,359 --> 00:17:22,959
adversarial machine learning

450
00:17:22,959 --> 00:17:25,599
uh the fact that there is no validation

451
00:17:25,599 --> 00:17:26,720
on the reports

452
00:17:26,720 --> 00:17:30,480
can be an attempt to abuse the concept

453
00:17:30,480 --> 00:17:30,880
and

454
00:17:30,880 --> 00:17:34,880
and put domains into the white list

455
00:17:36,480 --> 00:17:38,960
okay so we talked a lot about the first

456
00:17:38,960 --> 00:17:40,720
item in the agenda let's talk briefly

457
00:17:40,720 --> 00:17:41,840
about the second items

458
00:17:41,840 --> 00:17:44,640
um just looking at the cvs over time and

459
00:17:44,640 --> 00:17:47,039
we see there are implementation gaps

460
00:17:47,039 --> 00:17:50,000
and i don't blame the browser developers

461
00:17:50,000 --> 00:17:50,559
it's a

462
00:17:50,559 --> 00:17:53,120
complicated policy uh complicated

463
00:17:53,120 --> 00:17:53,760
standard

464
00:17:53,760 --> 00:17:58,480
it's and and it's not easy to create a

465
00:17:58,480 --> 00:17:59,679
full

466
00:17:59,679 --> 00:18:02,320
a safe system to fully implement the

467
00:18:02,320 --> 00:18:03,280
policy

468
00:18:03,280 --> 00:18:06,960
but do you see gaps over time

469
00:18:06,960 --> 00:18:08,559
overall and specific in the specific

470
00:18:08,559 --> 00:18:11,200
browsers over time

471
00:18:11,200 --> 00:18:13,440
gaps in the implementation are found i

472
00:18:13,440 --> 00:18:14,240
want to

473
00:18:14,240 --> 00:18:17,919
give an example of one such cve that we

474
00:18:17,919 --> 00:18:21,120
found and published last year and

475
00:18:21,120 --> 00:18:22,960
it's pretty straightforward to explain

476
00:18:22,960 --> 00:18:24,480
it so

477
00:18:24,480 --> 00:18:27,280
using the following directives say

478
00:18:27,280 --> 00:18:28,000
object source

479
00:18:28,000 --> 00:18:29,760
should be none child source none and

480
00:18:29,760 --> 00:18:31,039
script source only

481
00:18:31,039 --> 00:18:34,080
from yourself the following code should

482
00:18:34,080 --> 00:18:36,240
be blocked and it is blocked when you're

483
00:18:36,240 --> 00:18:38,240
just trying to create an element and add

484
00:18:38,240 --> 00:18:39,919
a

485
00:18:39,919 --> 00:18:43,280
url coming from an external

486
00:18:43,280 --> 00:18:47,600
domain but if we do a little trick

487
00:18:47,600 --> 00:18:51,039
creating the element as an iframe

488
00:18:51,039 --> 00:18:54,080
with the javascript source in it

489
00:18:54,080 --> 00:18:56,000
that will work now this was patched

490
00:18:56,000 --> 00:18:57,840
already and it was resolved but

491
00:18:57,840 --> 00:19:00,480
it's an example of how attackers can

492
00:19:00,480 --> 00:19:02,240
really try to find the

493
00:19:02,240 --> 00:19:04,559
slightest gaps in the implementation to

494
00:19:04,559 --> 00:19:05,840
bypass

495
00:19:05,840 --> 00:19:10,400
um the way the

496
00:19:10,400 --> 00:19:13,360
model actually works within browsers so

497
00:19:13,360 --> 00:19:15,280
here is an example of such a case

498
00:19:15,280 --> 00:19:20,160
obviously already mitigated by chrome

499
00:19:20,320 --> 00:19:24,240
and the last one um is the story i like

500
00:19:24,240 --> 00:19:25,200
best because

501
00:19:25,200 --> 00:19:27,919
it really takes all the concept of

502
00:19:27,919 --> 00:19:29,440
having a policy

503
00:19:29,440 --> 00:19:32,880
and break it apart um

504
00:19:32,880 --> 00:19:35,280
and show how it can go completely wrong

505
00:19:35,280 --> 00:19:36,400
and the idea here

506
00:19:36,400 --> 00:19:40,320
came from the research concept here was

507
00:19:40,320 --> 00:19:43,440
straightforward so looking at all the

508
00:19:43,440 --> 00:19:45,200
websites and all the domains that are

509
00:19:45,200 --> 00:19:46,960
whitelisted and how they're actually

510
00:19:46,960 --> 00:19:48,559
using csp

511
00:19:48,559 --> 00:19:50,799
um the question came to mind was okay

512
00:19:50,799 --> 00:19:52,240
let's look at the most common allowed

513
00:19:52,240 --> 00:19:53,280
targets

514
00:19:53,280 --> 00:19:56,480
um for this traffic

515
00:19:56,480 --> 00:19:58,640
from the website what are those actually

516
00:19:58,640 --> 00:19:59,840
being used

517
00:19:59,840 --> 00:20:02,000
by websites and we can see that if we

518
00:20:02,000 --> 00:20:05,360
look from march 2020 to june 2021

519
00:20:05,360 --> 00:20:08,799
and the most common one was

520
00:20:08,799 --> 00:20:10,960
and still is just increasing numbers

521
00:20:10,960 --> 00:20:12,960
google analytics

522
00:20:12,960 --> 00:20:14,559
and this is just the top level domains

523
00:20:14,559 --> 00:20:16,159
you can see here the example of all

524
00:20:16,159 --> 00:20:17,440
kinds of subdomains

525
00:20:17,440 --> 00:20:20,320
uh it's in june 2021 as well just lower

526
00:20:20,320 --> 00:20:21,520
numbers

527
00:20:21,520 --> 00:20:24,320
but just taking the top one without even

528
00:20:24,320 --> 00:20:25,039
the

529
00:20:25,039 --> 00:20:27,840
following domains uh google analytics is

530
00:20:27,840 --> 00:20:28,960
the most common

531
00:20:28,960 --> 00:20:32,799
allowed domain in csp policies

532
00:20:32,799 --> 00:20:36,480
when they're actually trying to to limit

533
00:20:36,480 --> 00:20:38,400
with the with the fetch directive and

534
00:20:38,400 --> 00:20:40,000
not just have the

535
00:20:40,000 --> 00:20:44,880
high level tls protections

536
00:20:44,960 --> 00:20:48,000
and if this was live i would

537
00:20:48,000 --> 00:20:50,320
ask what would you do with it uh we'll

538
00:20:50,320 --> 00:20:51,679
jump to the answer

539
00:20:51,679 --> 00:20:54,000
and the answer is let's try to abuse it

540
00:20:54,000 --> 00:20:56,000
if they're whitelisting google analytics

541
00:20:56,000 --> 00:20:57,919
can we use it to extract information

542
00:20:57,919 --> 00:21:00,159
obviously the answer is yes that's

543
00:21:00,159 --> 00:21:02,159
pretty simple

544
00:21:02,159 --> 00:21:04,320
there are no built-in protections around

545
00:21:04,320 --> 00:21:07,600
that so we just add a piece of code

546
00:21:07,600 --> 00:21:12,240
to the let's say we've reached a third

547
00:21:12,240 --> 00:21:16,159
party script bridge the supply chain

548
00:21:16,159 --> 00:21:19,039
in some way and it's important to

549
00:21:19,039 --> 00:21:19,760
remember

550
00:21:19,760 --> 00:21:23,360
bridging supply chain is it is a very

551
00:21:23,360 --> 00:21:24,400
common techniques

552
00:21:24,400 --> 00:21:26,880
was and still is even just a few weeks

553
00:21:26,880 --> 00:21:29,280
ago

554
00:21:29,360 --> 00:21:33,120
there was a um it was an actual breach

555
00:21:33,120 --> 00:21:34,640
but it was a risk published

556
00:21:34,640 --> 00:21:38,480
on uh on cloth rose cdn

557
00:21:38,480 --> 00:21:42,000
gs where a potential

558
00:21:42,000 --> 00:21:45,360
actor malicious actor could change code

559
00:21:45,360 --> 00:21:48,559
being served by the cdn so that's an

560
00:21:48,559 --> 00:21:50,159
open risk and it can happen

561
00:21:50,159 --> 00:21:52,320
from anywhere can happen at the cdn

562
00:21:52,320 --> 00:21:53,440
level and it can happen

563
00:21:53,440 --> 00:21:55,919
on a small company without the proper

564
00:21:55,919 --> 00:21:57,600
security measures being bridged but

565
00:21:57,600 --> 00:21:58,480
their

566
00:21:58,480 --> 00:22:00,880
sensor is used in our application

567
00:22:00,880 --> 00:22:02,400
because that's how you build modern

568
00:22:02,400 --> 00:22:03,840
applications today

569
00:22:03,840 --> 00:22:06,240
so let's say you try to protect yourself

570
00:22:06,240 --> 00:22:08,080
with xss you put the csp

571
00:22:08,080 --> 00:22:10,240
and control the domains somebody can

572
00:22:10,240 --> 00:22:11,120
still abuse the

573
00:22:11,120 --> 00:22:13,840
safe list by adding a few lines of code

574
00:22:13,840 --> 00:22:15,200
assuming your white listing google

575
00:22:15,200 --> 00:22:16,240
analytics

576
00:22:16,240 --> 00:22:19,360
most do and just send the bitcoin

577
00:22:19,360 --> 00:22:22,080
on the data collected on the page uh the

578
00:22:22,080 --> 00:22:23,280
code is pretty simple

579
00:22:23,280 --> 00:22:25,760
and straightforward and then we go into

580
00:22:25,760 --> 00:22:27,760
their google analytics page

581
00:22:27,760 --> 00:22:31,760
we have the information extracted report

582
00:22:31,760 --> 00:22:35,200
base64 and there we have it uh username

583
00:22:35,200 --> 00:22:35,679
and

584
00:22:35,679 --> 00:22:40,080
password being collected and um

585
00:22:40,080 --> 00:22:42,400
all the protections that we try to build

586
00:22:42,400 --> 00:22:44,480
collapse under the fact that we just

587
00:22:44,480 --> 00:22:45,610
whitelisted

588
00:22:45,610 --> 00:22:46,720
[Music]

589
00:22:46,720 --> 00:22:55,840
google analytics

590
00:22:58,159 --> 00:22:59,919
so trying to protect that the next

591
00:22:59,919 --> 00:23:01,679
question that comes to mind is

592
00:23:01,679 --> 00:23:03,440
let's put some query parameter

593
00:23:03,440 --> 00:23:05,520
protection would it be nice if we just

594
00:23:05,520 --> 00:23:08,240
you know protect and say a specific

595
00:23:08,240 --> 00:23:09,360
account

596
00:23:09,360 --> 00:23:11,760
tid let's let's limit it to specific

597
00:23:11,760 --> 00:23:12,480
values

598
00:23:12,480 --> 00:23:15,200
and then for actually pretty obvious

599
00:23:15,200 --> 00:23:15,840
reasons

600
00:23:15,840 --> 00:23:19,919
um performance mostly uh questions

601
00:23:19,919 --> 00:23:23,120
this is a quote from the spec um you you

602
00:23:23,120 --> 00:23:23,600
can't

603
00:23:23,600 --> 00:23:26,559
protect query string uh parameters uh

604
00:23:26,559 --> 00:23:28,400
it's not evaluated within the expression

605
00:23:28,400 --> 00:23:31,600
only the top level domain is part of the

606
00:23:31,600 --> 00:23:35,200
policy nothing beyond that so that won't

607
00:23:35,200 --> 00:23:37,039
work

608
00:23:37,039 --> 00:23:39,919
um and the interesting thing is um the

609
00:23:39,919 --> 00:23:40,960
flow was

610
00:23:40,960 --> 00:23:43,039
so this is a theory somebody might be

611
00:23:43,039 --> 00:23:44,240
able to do it uh

612
00:23:44,240 --> 00:23:46,240
because that's the most common one we

613
00:23:46,240 --> 00:23:48,320
published the article about the method

614
00:23:48,320 --> 00:23:51,679
as theoretical idea

615
00:23:51,679 --> 00:23:54,400
and then just a few days later uh there

616
00:23:54,400 --> 00:23:56,080
were reports by different security

617
00:23:56,080 --> 00:23:57,760
vendors stating that they actually

618
00:23:57,760 --> 00:24:01,039
found the this method being used in the

619
00:24:01,039 --> 00:24:02,720
wild by skimmers

620
00:24:02,720 --> 00:24:05,840
uh digital schemers abusing the

621
00:24:05,840 --> 00:24:09,200
concept of google analytics by csp

622
00:24:09,200 --> 00:24:13,279
so the flow here was interesting

623
00:24:13,279 --> 00:24:16,080
we looked at what is the most common how

624
00:24:16,080 --> 00:24:18,480
can we abuse it

625
00:24:18,480 --> 00:24:21,440
we looked at it as a story and then the

626
00:24:21,440 --> 00:24:22,320
fact is that this

627
00:24:22,320 --> 00:24:24,559
is actually being used in the wild by

628
00:24:24,559 --> 00:24:26,000
attackers

629
00:24:26,000 --> 00:24:29,200
means that it's a very real risk that

630
00:24:29,200 --> 00:24:32,400
attackers have found and are already

631
00:24:32,400 --> 00:24:34,559
abusing

632
00:24:34,559 --> 00:24:36,320
and there is no mitigation around this

633
00:24:36,320 --> 00:24:37,760
this is important and it's not just

634
00:24:37,760 --> 00:24:40,159
unique to google analytics as well

635
00:24:40,159 --> 00:24:42,720
um and here is where it went wrong if

636
00:24:42,720 --> 00:24:44,400
you want to look at it and managing a

637
00:24:44,400 --> 00:24:45,039
policy

638
00:24:45,039 --> 00:24:46,960
it just doesn't holds in today's modern

639
00:24:46,960 --> 00:24:48,400
web apps

640
00:24:48,400 --> 00:24:51,840
and and it's not just google analytics

641
00:24:51,840 --> 00:24:53,200
they're not unique

642
00:24:53,200 --> 00:24:56,000
if you look at the concept of trying to

643
00:24:56,000 --> 00:25:00,000
whitelist domains

644
00:25:00,000 --> 00:25:03,120
um when you're constantly adding third

645
00:25:03,120 --> 00:25:04,559
parties first party

646
00:25:04,559 --> 00:25:08,080
um all the time and and

647
00:25:08,080 --> 00:25:10,320
you're trying to manage uh different

648
00:25:10,320 --> 00:25:11,440
succox names of

649
00:25:11,440 --> 00:25:14,799
who can add code and where

650
00:25:14,799 --> 00:25:17,840
it becomes impossible to limit the

651
00:25:17,840 --> 00:25:19,520
domains that are actually being used but

652
00:25:19,520 --> 00:25:22,159
even when you try to limit them

653
00:25:22,159 --> 00:25:24,000
the most common ones that are actually

654
00:25:24,000 --> 00:25:25,840
being used as you've seen from the data

655
00:25:25,840 --> 00:25:26,880
itself from

656
00:25:26,880 --> 00:25:31,679
what um suckups teams are actually doing

657
00:25:31,679 --> 00:25:34,640
all of those are websites that in by

658
00:25:34,640 --> 00:25:35,440
potential

659
00:25:35,440 --> 00:25:37,039
can be used the same way that google

660
00:25:37,039 --> 00:25:38,880
analytics was used you know anything

661
00:25:38,880 --> 00:25:39,520
from

662
00:25:39,520 --> 00:25:42,159
either if it's free accounts where you

663
00:25:42,159 --> 00:25:43,120
can create on

664
00:25:43,120 --> 00:25:47,200
youtube or twitter on all of those

665
00:25:47,200 --> 00:25:49,600
or even if it's paid accounts on some

666
00:25:49,600 --> 00:25:50,880
vendor

667
00:25:50,880 --> 00:25:54,080
it would still be very cheap to create

668
00:25:54,080 --> 00:25:55,279
an account and then

669
00:25:55,279 --> 00:25:58,320
use the domain to send information now

670
00:25:58,320 --> 00:25:59,520
in order to protect

671
00:25:59,520 --> 00:26:04,400
here we need help from both ends

672
00:26:04,720 --> 00:26:07,919
these services they can help

673
00:26:07,919 --> 00:26:13,039
if they will define the i would say the

674
00:26:13,039 --> 00:26:16,159
destination id as part of the sub domain

675
00:26:16,159 --> 00:26:18,799
and not just part of the query parameter

676
00:26:18,799 --> 00:26:19,520
and

677
00:26:19,520 --> 00:26:21,679
won't allow it also as part of the post

678
00:26:21,679 --> 00:26:23,520
data or even if the post data is being

679
00:26:23,520 --> 00:26:25,200
sent they will validate that the sub

680
00:26:25,200 --> 00:26:26,320
domain matches

681
00:26:26,320 --> 00:26:28,720
think of it if all they do is google

682
00:26:28,720 --> 00:26:29,520
analytics and

683
00:26:29,520 --> 00:26:31,679
other vendors big vendors like that will

684
00:26:31,679 --> 00:26:33,520
add

685
00:26:33,520 --> 00:26:36,799
the option to use a subdomain

686
00:26:36,799 --> 00:26:39,360
then the csp would work and it would be

687
00:26:39,360 --> 00:26:40,320
a hit

688
00:26:40,320 --> 00:26:43,279
but most of them don't allow that so

689
00:26:43,279 --> 00:26:46,159
that's one gap

690
00:26:46,320 --> 00:26:50,720
and the other is from our side

691
00:26:50,720 --> 00:26:54,000
limiting those destinations and also

692
00:26:54,000 --> 00:26:56,640
removing these resources if we don't

693
00:26:56,640 --> 00:26:58,400
have to have them in specific parts of

694
00:26:58,400 --> 00:26:58,720
the

695
00:26:58,720 --> 00:27:01,919
of the site so even if we do use google

696
00:27:01,919 --> 00:27:02,960
analytics

697
00:27:02,960 --> 00:27:05,600
maybe we can remove it from sensitive

698
00:27:05,600 --> 00:27:06,080
pages

699
00:27:06,080 --> 00:27:08,320
where there is sensitive information

700
00:27:08,320 --> 00:27:09,840
that somebody can

701
00:27:09,840 --> 00:27:13,440
try and use try and steal from us and

702
00:27:13,440 --> 00:27:21,440
for malicious intent

703
00:27:21,440 --> 00:27:23,679
so

704
00:27:28,960 --> 00:27:31,679
let's talk about what we can do to make

705
00:27:31,679 --> 00:27:32,840
the best of it

706
00:27:32,840 --> 00:27:35,840
um

707
00:27:36,080 --> 00:27:38,399
one thing i haven't mentioned um going

708
00:27:38,399 --> 00:27:39,600
back to the first item

709
00:27:39,600 --> 00:27:42,880
is how we can differentiate if a report

710
00:27:42,880 --> 00:27:44,880
is coming from one user or the other

711
00:27:44,880 --> 00:27:47,600
and the most common practice here is to

712
00:27:47,600 --> 00:27:48,720
create some

713
00:27:48,720 --> 00:27:51,840
uh either random value

714
00:27:51,840 --> 00:27:54,080
in one way or another on the report url

715
00:27:54,080 --> 00:27:55,360
as a request forum

716
00:27:55,360 --> 00:27:57,600
so you add an identifier and then when

717
00:27:57,600 --> 00:27:59,039
the report comes back

718
00:27:59,039 --> 00:28:01,600
from the browser if there was a

719
00:28:01,600 --> 00:28:02,880
violation

720
00:28:02,880 --> 00:28:04,559
you can use those requests for arms in

721
00:28:04,559 --> 00:28:05,919
order to understand

722
00:28:05,919 --> 00:28:08,080
which user or how many users were

723
00:28:08,080 --> 00:28:10,240
actually affected with that

724
00:28:10,240 --> 00:28:12,720
report

725
00:28:13,360 --> 00:28:16,320
say you have a session id being set by

726
00:28:16,320 --> 00:28:17,039
the

727
00:28:17,039 --> 00:28:19,679
your javascript code the server can take

728
00:28:19,679 --> 00:28:20,880
that into

729
00:28:20,880 --> 00:28:24,000
the report and and bring it back as part

730
00:28:24,000 --> 00:28:25,360
of the header

731
00:28:25,360 --> 00:28:26,799
so we'll be able to differentiate

732
00:28:26,799 --> 00:28:28,480
between different users and understand

733
00:28:28,480 --> 00:28:29,679
how many users you're

734
00:28:29,679 --> 00:28:33,440
seeing versus how many ips you're seeing

735
00:28:33,440 --> 00:28:35,840
with reports second is to filter the

736
00:28:35,840 --> 00:28:36,640
reports

737
00:28:36,640 --> 00:28:38,799
the best practice that i recommend here

738
00:28:38,799 --> 00:28:40,480
is to focus on the

739
00:28:40,480 --> 00:28:42,880
most common browsers you see on your

740
00:28:42,880 --> 00:28:45,600
website whether it's chrome safari or

741
00:28:45,600 --> 00:28:49,600
um whatever um and just focus on those

742
00:28:49,600 --> 00:28:51,440
if you have a problem with your policy

743
00:28:51,440 --> 00:28:53,520
they will pop up on a common one and

744
00:28:53,520 --> 00:28:55,360
it's really no point on

745
00:28:55,360 --> 00:28:59,360
um trying to focus on all the

746
00:28:59,360 --> 00:29:02,559
isotheric cases um

747
00:29:02,559 --> 00:29:04,320
there is the option to a b test the

748
00:29:04,320 --> 00:29:06,640
policy which is actually pretty cool

749
00:29:06,640 --> 00:29:08,960
you can take a subset of the traffic use

750
00:29:08,960 --> 00:29:10,399
a report only

751
00:29:10,399 --> 00:29:14,640
policy on that do it even in a very

752
00:29:14,640 --> 00:29:18,159
very strict limit everything and then

753
00:29:18,159 --> 00:29:19,760
you can play with which domains you're

754
00:29:19,760 --> 00:29:23,039
unloading and disabling

755
00:29:23,120 --> 00:29:24,640
to make sure that the policy is up to

756
00:29:24,640 --> 00:29:26,399
date and accurate and that you're not

757
00:29:26,399 --> 00:29:28,320
leaving domains that are invalid or

758
00:29:28,320 --> 00:29:29,200
irrelevant

759
00:29:29,200 --> 00:29:32,559
uh one example i've seen uh is

760
00:29:32,559 --> 00:29:35,679
on websites that whitelist domains

761
00:29:35,679 --> 00:29:37,279
just because they did a poc with some

762
00:29:37,279 --> 00:29:38,960
startup then they dropped it

763
00:29:38,960 --> 00:29:41,039
and then later on the startup was closed

764
00:29:41,039 --> 00:29:42,480
they still white is the domain

765
00:29:42,480 --> 00:29:44,159
somebody can just buy the domain and use

766
00:29:44,159 --> 00:29:46,799
that as a drop point

767
00:29:46,799 --> 00:29:49,039
so also something you want to make sure

768
00:29:49,039 --> 00:29:50,000
that your list

769
00:29:50,000 --> 00:29:52,000
is up to date with relevant domains and

770
00:29:52,000 --> 00:29:53,600
not something you added before

771
00:29:53,600 --> 00:29:55,039
and that's because there is no report on

772
00:29:55,039 --> 00:29:56,559
what is actually being used it's only

773
00:29:56,559 --> 00:29:58,559
proportional violation one of again

774
00:29:58,559 --> 00:30:01,919
a gap in how a policy

775
00:30:01,919 --> 00:30:05,679
um can be used

776
00:30:05,679 --> 00:30:07,919
but the nice thing here is you can use

777
00:30:07,919 --> 00:30:09,679
that your advantage and a b test the

778
00:30:09,679 --> 00:30:11,200
policy and make sure it's always up to

779
00:30:11,200 --> 00:30:11,600
date

780
00:30:11,600 --> 00:30:15,918
and limited

781
00:30:16,000 --> 00:30:18,240
i would also recommend adding more

782
00:30:18,240 --> 00:30:20,240
layers of security such as lancers and

783
00:30:20,240 --> 00:30:21,930
hashes on only inline code

784
00:30:21,930 --> 00:30:23,120
[Music]

785
00:30:23,120 --> 00:30:25,919
if you can do it it will protect you as

786
00:30:25,919 --> 00:30:26,880
well

787
00:30:26,880 --> 00:30:29,679
and last thing like i said being context

788
00:30:29,679 --> 00:30:31,360
aware different policies for different

789
00:30:31,360 --> 00:30:33,039
sections of the website also very

790
00:30:33,039 --> 00:30:34,000
important

791
00:30:34,000 --> 00:30:36,580
in order to better protect um

792
00:30:36,580 --> 00:30:37,760
[Music]

793
00:30:37,760 --> 00:30:40,880
and limit the in

794
00:30:40,880 --> 00:30:42,960
the built-in gaps that there is within

795
00:30:42,960 --> 00:30:44,880
csp so i'm saying a lot of

796
00:30:44,880 --> 00:30:48,159
um a lot about gaps here

797
00:30:48,159 --> 00:30:50,720
and the concept but it still is a good

798
00:30:50,720 --> 00:30:52,039
concept it's not like you have an

799
00:30:52,039 --> 00:30:53,919
alternative

800
00:30:53,919 --> 00:30:57,200
to csp that is fully proof

801
00:30:57,200 --> 00:30:59,440
and bulletproof so i would still

802
00:30:59,440 --> 00:31:01,919
recommend to use it but be aware of the

803
00:31:01,919 --> 00:31:04,240
issues and definitely have ideas as

804
00:31:04,240 --> 00:31:06,720
security researchers especially

805
00:31:06,720 --> 00:31:10,480
to come up to csp3 with comments

806
00:31:10,480 --> 00:31:13,679
and sure there are ways we can

807
00:31:13,679 --> 00:31:17,279
improve the standards that's it

808
00:31:17,279 --> 00:31:19,360
thanks for listening um

809
00:31:19,360 --> 00:31:20,480
[Music]

810
00:31:20,480 --> 00:31:23,760
i'm open to q a

811
00:31:23,760 --> 00:31:25,360
i'm happy to answer any questions that

812
00:31:25,360 --> 00:31:32,399
you have

