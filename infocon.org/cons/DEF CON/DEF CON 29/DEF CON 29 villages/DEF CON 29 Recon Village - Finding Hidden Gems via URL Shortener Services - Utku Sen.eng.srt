1
00:00:01,599 --> 00:00:02,960
hello everyone welcome to my

2
00:00:02,960 --> 00:00:05,120
presentation named finding hidden games

3
00:00:05,120 --> 00:00:07,440
via url shortener services

4
00:00:07,440 --> 00:00:09,519
in this presentation i will talk about

5
00:00:09,519 --> 00:00:11,759
the security risks of url shortener

6
00:00:11,759 --> 00:00:12,799
services

7
00:00:12,799 --> 00:00:17,359
and how can we take an advantage of it

8
00:00:17,359 --> 00:00:19,520
let me introduce myself a bit i'm odd

9
00:00:19,520 --> 00:00:21,920
cushion i'm working in invictus security

10
00:00:21,920 --> 00:00:22,320
as

11
00:00:22,320 --> 00:00:24,960
application security manager i'm writing

12
00:00:24,960 --> 00:00:26,720
various of security tools

13
00:00:26,720 --> 00:00:29,439
you can check them on my github account

14
00:00:29,439 --> 00:00:30,960
also i'm writing

15
00:00:30,960 --> 00:00:33,440
blogs about security and you can visit

16
00:00:33,440 --> 00:00:34,559
my website to

17
00:00:34,559 --> 00:00:37,040
read them

18
00:00:38,640 --> 00:00:40,800
let's start with a highly debated topic

19
00:00:40,800 --> 00:00:42,879
secured by obscurity

20
00:00:42,879 --> 00:00:44,559
usually people are arguing against

21
00:00:44,559 --> 00:00:46,000
secured by obscurity

22
00:00:46,000 --> 00:00:47,680
since it doesn't provide an actual

23
00:00:47,680 --> 00:00:49,200
security

24
00:00:49,200 --> 00:00:51,360
it relies on hiding an information from

25
00:00:51,360 --> 00:00:52,640
an attacker

26
00:00:52,640 --> 00:00:54,320
if the attacker somehow finds the

27
00:00:54,320 --> 00:00:57,039
information it's a game over

28
00:00:57,039 --> 00:00:59,039
however in some cases secured by

29
00:00:59,039 --> 00:01:01,359
obscurity can be useful

30
00:01:01,359 --> 00:01:03,760
and sometimes you have no other option

31
00:01:03,760 --> 00:01:04,720
to trust the

32
00:01:04,720 --> 00:01:08,240
obscurity let's check some examples

33
00:01:08,240 --> 00:01:10,000
let's say you have an admin panel on

34
00:01:10,000 --> 00:01:11,920
your website and you don't want to

35
00:01:11,920 --> 00:01:13,840
attackers to find it

36
00:01:13,840 --> 00:01:18,240
the best practice is allowing users

37
00:01:18,240 --> 00:01:20,080
the best practices allowing users for

38
00:01:20,080 --> 00:01:21,840
that endpoint by checking their ip

39
00:01:21,840 --> 00:01:23,200
addresses right

40
00:01:23,200 --> 00:01:25,280
but in some cases this might not be

41
00:01:25,280 --> 00:01:27,040
possible due to different reasons such

42
00:01:27,040 --> 00:01:28,479
as cost

43
00:01:28,479 --> 00:01:31,840
lack of engineers to do it etc in this

44
00:01:31,840 --> 00:01:33,280
type of cases

45
00:01:33,280 --> 00:01:35,600
best option would be hiding the url with

46
00:01:35,600 --> 00:01:36,799
random strings

47
00:01:36,799 --> 00:01:38,400
so that an attacker won't be able to

48
00:01:38,400 --> 00:01:41,840
guess it the same goes for the shareable

49
00:01:41,840 --> 00:01:44,880
urls such as google docs as well the

50
00:01:44,880 --> 00:01:46,799
shared links should be accessible by

51
00:01:46,799 --> 00:01:47,520
everyone

52
00:01:47,520 --> 00:01:49,360
but the attackers shouldn't find it

53
00:01:49,360 --> 00:01:50,640
easily

54
00:01:50,640 --> 00:01:52,799
therefore they are generating the urls

55
00:01:52,799 --> 00:01:55,840
with random strings

56
00:01:56,479 --> 00:01:58,479
but of course it's not impossible to

57
00:01:58,479 --> 00:02:00,799
find those hidden urls

58
00:02:00,799 --> 00:02:03,520
there are different methods to find them

59
00:02:03,520 --> 00:02:04,640
when you visit or

60
00:02:04,640 --> 00:02:07,040
share a url it's locked into different

61
00:02:07,040 --> 00:02:08,000
places

62
00:02:08,000 --> 00:02:10,080
for example if you didn't make a

63
00:02:10,080 --> 00:02:12,720
restriction with robots.txt file

64
00:02:12,720 --> 00:02:14,640
google search engine may index your

65
00:02:14,640 --> 00:02:16,720
pages therefore

66
00:02:16,720 --> 00:02:18,879
an attacker will be able to find it with

67
00:02:18,879 --> 00:02:20,879
a basic search

68
00:02:20,879 --> 00:02:23,520
also archive orgs wayback machine saves

69
00:02:23,520 --> 00:02:25,599
everything on its database

70
00:02:25,599 --> 00:02:28,080
you can cure the wayback machine to find

71
00:02:28,080 --> 00:02:30,080
sensitive urls

72
00:02:30,080 --> 00:02:32,160
another source is alienvault's

73
00:02:32,160 --> 00:02:34,080
openthread exchange service

74
00:02:34,080 --> 00:02:36,239
alienvault also caches lots of different

75
00:02:36,239 --> 00:02:39,840
urls for uh threat intelligence purposes

76
00:02:39,840 --> 00:02:42,480
however you can take an advantage of it

77
00:02:42,480 --> 00:02:43,680
by searching for

78
00:02:43,680 --> 00:02:46,800
sensitive urls there is a great tool

79
00:02:46,800 --> 00:02:49,280
named get all urls which allows you to

80
00:02:49,280 --> 00:02:50,000
search on the

81
00:02:50,000 --> 00:02:53,360
mentioned sources it's widely used by

82
00:02:53,360 --> 00:02:55,440
bug bounty hunters and it works really

83
00:02:55,440 --> 00:02:56,800
well

84
00:02:56,800 --> 00:02:59,200
the other method for finding sensitive

85
00:02:59,200 --> 00:03:01,440
url is brute forcing them

86
00:03:01,440 --> 00:03:03,599
however it won't be very efficient if

87
00:03:03,599 --> 00:03:05,120
the website uses

88
00:03:05,120 --> 00:03:08,640
random and long strings

89
00:03:13,200 --> 00:03:15,440
let's check the following examples if

90
00:03:15,440 --> 00:03:17,120
the website uses

91
00:03:17,120 --> 00:03:20,159
common names for the url pets it will be

92
00:03:20,159 --> 00:03:22,560
possible to reinforce it

93
00:03:22,560 --> 00:03:25,280
if you have a good crafted word list you

94
00:03:25,280 --> 00:03:26,959
can send lots of requests

95
00:03:26,959 --> 00:03:30,480
with tools such as go buster

96
00:03:30,480 --> 00:03:33,280
the second example harder to guess since

97
00:03:33,280 --> 00:03:34,000
uh since

98
00:03:34,000 --> 00:03:37,200
it also uses numbers in the url path

99
00:03:37,200 --> 00:03:38,959
uh you won't be able to guess it with

100
00:03:38,959 --> 00:03:41,360
common word lists uh you have to tweak

101
00:03:41,360 --> 00:03:42,959
it by yourself

102
00:03:42,959 --> 00:03:45,920
however it's still not impossible the

103
00:03:45,920 --> 00:03:46,959
last example is

104
00:03:46,959 --> 00:03:50,159
google docs with which creates urls with

105
00:03:50,159 --> 00:03:52,799
random and long strings when you

106
00:03:52,799 --> 00:03:54,959
calculate the brute force pool size

107
00:03:54,959 --> 00:03:57,040
you will see that it's impossible to

108
00:03:57,040 --> 00:04:01,840
guess it with an online attack

109
00:04:02,080 --> 00:04:05,280
now the fun part starts people are

110
00:04:05,280 --> 00:04:07,599
widely using url shortener services to

111
00:04:07,599 --> 00:04:09,120
share urls

112
00:04:09,120 --> 00:04:12,640
so why they are using it because it

113
00:04:12,640 --> 00:04:15,040
it's because url shortener services are

114
00:04:15,040 --> 00:04:17,519
converting long and ugly urls

115
00:04:17,519 --> 00:04:20,639
into short and beautiful ones also some

116
00:04:20,639 --> 00:04:22,800
websites such as twitter and linkedin

117
00:04:22,800 --> 00:04:23,520
makes the

118
00:04:23,520 --> 00:04:26,960
url shorter by default therefore some

119
00:04:26,960 --> 00:04:28,560
urls are already

120
00:04:28,560 --> 00:04:30,880
shorted even if you wasn't intend to do

121
00:04:30,880 --> 00:04:31,919
it

122
00:04:31,919 --> 00:04:35,040
so how does how does those services work

123
00:04:35,040 --> 00:04:37,360
uh when you provide a url to shorten a

124
00:04:37,360 --> 00:04:38,479
service

125
00:04:38,479 --> 00:04:40,960
it generates a short and unique string

126
00:04:40,960 --> 00:04:42,160
for it

127
00:04:42,160 --> 00:04:45,040
so when you visit that generated url it

128
00:04:45,040 --> 00:04:47,120
basically redirects you to the original

129
00:04:47,120 --> 00:04:48,160
one

130
00:04:48,160 --> 00:04:51,040
so what is the risk here why is a big

131
00:04:51,040 --> 00:04:52,479
deal

132
00:04:52,479 --> 00:04:55,040
in the previous slide we said that it's

133
00:04:55,040 --> 00:04:57,040
impossible to brute force a google docs

134
00:04:57,040 --> 00:04:58,560
url since it's a long

135
00:04:58,560 --> 00:05:01,919
and random string uh it will take

136
00:05:01,919 --> 00:05:05,440
months to reinforce it but now we have a

137
00:05:05,440 --> 00:05:07,039
very short url

138
00:05:07,039 --> 00:05:09,919
it's seven characters longs so in order

139
00:05:09,919 --> 00:05:12,160
to find the long and complex google docs

140
00:05:12,160 --> 00:05:12,880
url

141
00:05:12,880 --> 00:05:15,199
you just need to brute force a seven

142
00:05:15,199 --> 00:05:18,400
characters long string

143
00:05:20,240 --> 00:05:22,840
let's compare their brute force search

144
00:05:22,840 --> 00:05:24,000
spaces

145
00:05:24,000 --> 00:05:26,800
the google docs citrix contains upper

146
00:05:26,800 --> 00:05:28,560
lower alphabetic characters

147
00:05:28,560 --> 00:05:33,280
and numbers its length is 44

148
00:05:33,280 --> 00:05:36,479
and the search space is encrypted

149
00:05:36,479 --> 00:05:38,960
incredibly long and impossible to brute

150
00:05:38,960 --> 00:05:40,320
force it

151
00:05:40,320 --> 00:05:42,880
on the other hand bitly string contains

152
00:05:42,880 --> 00:05:44,960
upper lower alphabetic characters as

153
00:05:44,960 --> 00:05:45,680
well

154
00:05:45,680 --> 00:05:48,880
and numbers however

155
00:05:48,880 --> 00:05:51,680
its length is 7. therefore the search

156
00:05:51,680 --> 00:05:52,080
space

157
00:05:52,080 --> 00:05:55,280
is equals to 3 trillion but of course

158
00:05:55,280 --> 00:05:57,199
you can say that it's still too much for

159
00:05:57,199 --> 00:05:57,440
an

160
00:05:57,440 --> 00:06:06,720
online tank and you have a point here

161
00:06:06,720 --> 00:06:08,960
however our main goal shouldn't be

162
00:06:08,960 --> 00:06:09,759
finding that

163
00:06:09,759 --> 00:06:13,199
exact exact string right if we brute

164
00:06:13,199 --> 00:06:15,440
force random seven character strings

165
00:06:15,440 --> 00:06:18,240
or we can follow a pattern uh we will be

166
00:06:18,240 --> 00:06:20,080
able to find lots of bullet urls

167
00:06:20,080 --> 00:06:23,199
on our way for example you sent the

168
00:06:23,199 --> 00:06:24,880
first request to bitly and

169
00:06:24,880 --> 00:06:27,759
received 404 error after done you

170
00:06:27,759 --> 00:06:29,680
increase the last character by 1

171
00:06:29,680 --> 00:06:33,039
and send it again you got 4 or 4 error

172
00:06:33,039 --> 00:06:34,400
again

173
00:06:34,400 --> 00:06:37,600
and in the next request we got 300

174
00:06:37,600 --> 00:06:40,240
redirection which means that the url

175
00:06:40,240 --> 00:06:41,759
exists

176
00:06:41,759 --> 00:06:44,639
we can take a note of the redirected url

177
00:06:44,639 --> 00:06:46,639
and continue to search

178
00:06:46,639 --> 00:06:48,960
if we make enough guesses we will be

179
00:06:48,960 --> 00:06:51,360
able to guess lots of valid urls

180
00:06:51,360 --> 00:06:53,840
but of course to gather an optimal

181
00:06:53,840 --> 00:06:54,960
amount of urls

182
00:06:54,960 --> 00:06:58,319
we need a high uh firepower we might

183
00:06:58,319 --> 00:06:59,039
need

184
00:06:59,039 --> 00:07:01,280
lots of servers to make continuous

185
00:07:01,280 --> 00:07:02,960
guesses every day

186
00:07:02,960 --> 00:07:06,000
but isn't it so expensive uh how can we

187
00:07:06,000 --> 00:07:08,560
achieve that

188
00:07:08,720 --> 00:07:11,120
thanks scott we are lucky about this and

189
00:07:11,120 --> 00:07:13,199
we don't need to spend tons of money on

190
00:07:13,199 --> 00:07:14,639
the servers

191
00:07:14,639 --> 00:07:16,800
because there is a volunteered group

192
00:07:16,800 --> 00:07:19,039
named url team out there

193
00:07:19,039 --> 00:07:22,080
url team has lots of tools

194
00:07:22,080 --> 00:07:24,720
uh allows you to brute force various of

195
00:07:24,720 --> 00:07:26,960
url shortener services

196
00:07:26,960 --> 00:07:28,880
lots of different people are using this

197
00:07:28,880 --> 00:07:30,080
tool to brute force

198
00:07:30,080 --> 00:07:32,160
those services every day and they are

199
00:07:32,160 --> 00:07:35,440
saving the found urls on their platform

200
00:07:35,440 --> 00:07:38,880
for example they brute force 18 billion

201
00:07:38,880 --> 00:07:39,520
google

202
00:07:39,520 --> 00:07:42,720
service urls and they were able to find

203
00:07:42,720 --> 00:07:45,280
three billion working urls

204
00:07:45,280 --> 00:07:47,039
which means that if you used google

205
00:07:47,039 --> 00:07:49,599
service to make your sensitive url

206
00:07:49,599 --> 00:07:50,720
shorter

207
00:07:50,720 --> 00:07:53,520
most likely your sensitive url is now

208
00:07:53,520 --> 00:07:54,000
saved

209
00:07:54,000 --> 00:07:57,039
to their database and the attacker can

210
00:07:57,039 --> 00:07:57,520
find it

211
00:07:57,520 --> 00:08:00,799
if they are looking for it

212
00:08:03,520 --> 00:08:05,680
url team also provides a guidance for

213
00:08:05,680 --> 00:08:07,440
each shortener service

214
00:08:07,440 --> 00:08:09,520
for example what kind of url pet they

215
00:08:09,520 --> 00:08:12,160
are using what http methods

216
00:08:12,160 --> 00:08:14,240
they are using what is the character

217
00:08:14,240 --> 00:08:16,400
sets they are using

218
00:08:16,400 --> 00:08:18,560
also how much delay you need to put

219
00:08:18,560 --> 00:08:21,199
between every request

220
00:08:21,199 --> 00:08:23,520
how can you understand if there is a url

221
00:08:23,520 --> 00:08:24,879
or not

222
00:08:24,879 --> 00:08:27,440
also those services will be able to ban

223
00:08:27,440 --> 00:08:28,000
you

224
00:08:28,000 --> 00:08:30,000
if you send lots of requests in short

225
00:08:30,000 --> 00:08:31,599
amount of time

226
00:08:31,599 --> 00:08:35,120
therefore we are using delays here

227
00:08:35,120 --> 00:08:37,519
also they are providing status quo so

228
00:08:37,519 --> 00:08:39,360
that you can understand if you are bent

229
00:08:39,360 --> 00:08:41,039
or not

230
00:08:41,039 --> 00:08:42,958
those guides are really helpful it

231
00:08:42,958 --> 00:08:44,800
allows you to brute force them

232
00:08:44,800 --> 00:08:47,600
practically so that you won't waste your

233
00:08:47,600 --> 00:08:50,720
time and resources

234
00:08:51,760 --> 00:08:54,240
i quoted a tool named url hunter to

235
00:08:54,240 --> 00:08:56,240
parse url teams raw data

236
00:08:56,240 --> 00:08:59,200
and allows users to make smart searches

237
00:08:59,200 --> 00:09:00,720
on them

238
00:09:00,720 --> 00:09:03,200
the tool is written in go and you can

239
00:09:03,200 --> 00:09:05,600
find it on my github account

240
00:09:05,600 --> 00:09:08,320
so how can you benefit from this tool

241
00:09:08,320 --> 00:09:09,519
you have three

242
00:09:09,519 --> 00:09:12,320
you have different search options the

243
00:09:12,320 --> 00:09:14,560
first one is single keyword

244
00:09:14,560 --> 00:09:17,120
in here url hunter will search the given

245
00:09:17,120 --> 00:09:18,720
keywords on the database

246
00:09:18,720 --> 00:09:21,600
and will show you the matched ones for

247
00:09:21,600 --> 00:09:22,080
example

248
00:09:22,080 --> 00:09:24,800
when you search for example.com it will

249
00:09:24,800 --> 00:09:25,760
both match with

250
00:09:25,760 --> 00:09:29,839
example.com blabla and another.com

251
00:09:29,839 --> 00:09:33,600
referrer equals to example.com

252
00:09:33,600 --> 00:09:36,080
the other search method is using

253
00:09:36,080 --> 00:09:37,680
multiple keywords

254
00:09:37,680 --> 00:09:40,399
in here url hunter searches given

255
00:09:40,399 --> 00:09:42,560
keyword with and logic

256
00:09:42,560 --> 00:09:44,959
therefore both keywords must be present

257
00:09:44,959 --> 00:09:46,480
in the url

258
00:09:46,480 --> 00:09:48,320
for example if you search for both

259
00:09:48,320 --> 00:09:51,279
example.com and admin keywords

260
00:09:51,279 --> 00:09:54,080
it will match with example.com secret

261
00:09:54,080 --> 00:09:55,519
slash admin panel

262
00:09:55,519 --> 00:09:58,399
but it won't match with example.com

263
00:09:58,399 --> 00:10:00,480
something else

264
00:10:00,480 --> 00:10:03,600
the other search method is using regexis

265
00:10:03,600 --> 00:10:05,519
it's good to catch specific patterns

266
00:10:05,519 --> 00:10:07,360
such as credit card data

267
00:10:07,360 --> 00:10:09,920
map coordinates or something else it's

268
00:10:09,920 --> 00:10:12,800
totally up to you

269
00:10:13,519 --> 00:10:19,839
now let's watch url hunter's demo video

270
00:10:31,120 --> 00:10:33,680
you won't be

271
00:10:37,920 --> 00:10:42,160
sore uh so you're a hunter

272
00:10:42,160 --> 00:10:44,959
what's your own hunter doing there is

273
00:10:44,959 --> 00:10:46,640
downloading to

274
00:10:46,640 --> 00:10:50,000
archives from the url hunters i mean

275
00:10:50,000 --> 00:10:53,440
url teams repository

276
00:10:56,320 --> 00:10:58,959
and of course those uh archive files are

277
00:10:58,959 --> 00:11:01,040
big since it they are contained millions

278
00:11:01,040 --> 00:11:04,399
or billions urls in it

279
00:11:11,920 --> 00:11:14,320
and after done it's basically unzipping

280
00:11:14,320 --> 00:11:16,560
them

281
00:11:18,640 --> 00:11:20,560
and now it searches for the given

282
00:11:20,560 --> 00:11:21,839
keywords in it

283
00:11:21,839 --> 00:11:23,760
for example in this example we are

284
00:11:23,760 --> 00:11:25,880
searching for

285
00:11:25,880 --> 00:11:28,079
docs.google.com and

286
00:11:28,079 --> 00:11:31,200
with it should contain spreadsheets

287
00:11:31,200 --> 00:11:33,519
in it

288
00:11:34,640 --> 00:11:37,519
also it searches for trello dot com

289
00:11:37,519 --> 00:11:40,000
keyword

290
00:11:41,279 --> 00:11:45,200
so now we are checking the output

291
00:11:45,200 --> 00:11:48,240
and as you can see uh url hunter matches

292
00:11:48,240 --> 00:11:51,760
with the given keywords on the

293
00:11:51,760 --> 00:11:57,839
located databases

294
00:12:08,000 --> 00:12:10,720
ah sorry about that the screen recording

295
00:12:10,720 --> 00:12:12,079
software is gone matt

296
00:12:12,079 --> 00:12:15,920
okay also there is another project name

297
00:12:15,920 --> 00:12:18,079
uh there is on another project is came

298
00:12:18,079 --> 00:12:20,079
out after i released the url hunter

299
00:12:20,079 --> 00:12:20,959
tools

300
00:12:20,959 --> 00:12:23,360
uh many of you probably already know the

301
00:12:23,360 --> 00:12:26,639
greyhead warfare's s3 bucket search tool

302
00:12:26,639 --> 00:12:28,560
which allows you to search on publicly

303
00:12:28,560 --> 00:12:31,279
xboxed exposed packets

304
00:12:31,279 --> 00:12:33,920
it's a great project and i'm a huge fan

305
00:12:33,920 --> 00:12:35,200
of it

306
00:12:35,200 --> 00:12:37,839
and now they support xposed urls via

307
00:12:37,839 --> 00:12:40,000
shortener services as well

308
00:12:40,000 --> 00:12:43,680
also it has an advantage over eurohunter

309
00:12:43,680 --> 00:12:46,000
url hunter downloads the archive files

310
00:12:46,000 --> 00:12:47,120
in order to make

311
00:12:47,120 --> 00:12:50,720
a search on them therefore it takes time

312
00:12:50,720 --> 00:12:53,040
however greyhead warfare downloads the

313
00:12:53,040 --> 00:12:55,279
archives on their own server

314
00:12:55,279 --> 00:12:58,079
and allows you to search on them quickly

315
00:12:58,079 --> 00:12:59,200
therefore

316
00:12:59,200 --> 00:13:07,120
huge kudos to them

317
00:13:07,120 --> 00:13:08,800
so let's talk about what kind of

318
00:13:08,800 --> 00:13:12,000
sensitive data we can find there

319
00:13:12,000 --> 00:13:14,720
what we should expect to find as a

320
00:13:14,720 --> 00:13:15,279
summary

321
00:13:15,279 --> 00:13:17,360
i can easily say that it's a gold mine

322
00:13:17,360 --> 00:13:19,279
for bug bounty hunters

323
00:13:19,279 --> 00:13:21,440
also intelligence researchers can also

324
00:13:21,440 --> 00:13:24,000
get huge benefits from it

325
00:13:24,000 --> 00:13:27,920
let's explain them with examples

326
00:13:28,800 --> 00:13:30,639
the first one is finding sensitive

327
00:13:30,639 --> 00:13:32,959
google docs and drive files

328
00:13:32,959 --> 00:13:34,880
lots of companies are keeping their

329
00:13:34,880 --> 00:13:36,880
internal documents and files on those

330
00:13:36,880 --> 00:13:38,480
services

331
00:13:38,480 --> 00:13:40,959
to share their documents or files they

332
00:13:40,959 --> 00:13:42,000
are usually get a

333
00:13:42,000 --> 00:13:44,240
publicly shareable link since they think

334
00:13:44,240 --> 00:13:45,920
that nobody will be able to

335
00:13:45,920 --> 00:13:49,519
find them however it's possible to find

336
00:13:49,519 --> 00:13:52,560
the files with specific queries the most

337
00:13:52,560 --> 00:13:53,839
common url prefix

338
00:13:53,839 --> 00:13:57,279
is docs.google.com

339
00:13:57,279 --> 00:14:01,120
a slash company name and the extension

340
00:14:01,120 --> 00:14:03,440
i really don't know why this works why

341
00:14:03,440 --> 00:14:05,920
there is a company domain in the url

342
00:14:05,920 --> 00:14:08,720
uh probably they are using a paid google

343
00:14:08,720 --> 00:14:10,480
service or something but i really

344
00:14:10,480 --> 00:14:12,000
couldn't find it

345
00:14:12,000 --> 00:14:14,480
but it makes it easy to find sensitive

346
00:14:14,480 --> 00:14:15,120
documents

347
00:14:15,120 --> 00:14:18,720
belongs to a specific company

348
00:14:20,079 --> 00:14:22,399
the other most common sensitive urls are

349
00:14:22,399 --> 00:14:24,959
publicly exposed trello boards

350
00:14:24,959 --> 00:14:26,880
some employees keeping their company

351
00:14:26,880 --> 00:14:28,480
works inside their

352
00:14:28,480 --> 00:14:31,360
personal trello boards and shares them

353
00:14:31,360 --> 00:14:33,120
publicly

354
00:14:33,120 --> 00:14:35,680
those boards can be useful for bug

355
00:14:35,680 --> 00:14:37,199
bounty purposes

356
00:14:37,199 --> 00:14:39,519
you can find sensitive data there and

357
00:14:39,519 --> 00:14:40,320
report it

358
00:14:40,320 --> 00:14:43,440
right away you can find those kind of

359
00:14:43,440 --> 00:14:45,920
urls with the following search logic

360
00:14:45,920 --> 00:14:49,279
it should include bots trello.com

361
00:14:49,279 --> 00:14:52,480
and company name

362
00:14:57,519 --> 00:14:59,680
the other obvious sensitive data is

363
00:14:59,680 --> 00:15:02,720
admin panels or hidden paths

364
00:15:02,720 --> 00:15:05,440
if you can't find a login panel you can

365
00:15:05,440 --> 00:15:07,040
try default credentials

366
00:15:07,040 --> 00:15:10,720
or even conduct brute force attacks also

367
00:15:10,720 --> 00:15:13,279
you can search for paths of software

368
00:15:13,279 --> 00:15:16,160
that has known vulnerabilities

369
00:15:16,160 --> 00:15:18,320
the search query will be similar with

370
00:15:18,320 --> 00:15:19,600
the previous ones

371
00:15:19,600 --> 00:15:23,120
it should both contain company.com

372
00:15:23,120 --> 00:15:27,839
and admin or private

373
00:15:27,920 --> 00:15:30,719
or something else

374
00:15:31,199 --> 00:15:33,680
another useful data could be urls that

375
00:15:33,680 --> 00:15:34,800
contain

376
00:15:34,800 --> 00:15:38,639
password reset tokens some websites

377
00:15:38,639 --> 00:15:41,279
allows you to use the password reset

378
00:15:41,279 --> 00:15:43,600
link for multiple times

379
00:15:43,600 --> 00:15:46,079
as a search query you need to determine

380
00:15:46,079 --> 00:15:47,120
that

381
00:15:47,120 --> 00:15:49,279
what kind of settings are included in

382
00:15:49,279 --> 00:15:50,480
the urls

383
00:15:50,480 --> 00:15:52,639
and you need to search for them for

384
00:15:52,639 --> 00:15:53,759
example

385
00:15:53,759 --> 00:15:55,839
the search query should include both

386
00:15:55,839 --> 00:15:57,120
company.com and

387
00:15:57,120 --> 00:15:59,920
reset token

388
00:16:01,199 --> 00:16:03,920
some websites are sending station tokens

389
00:16:03,920 --> 00:16:04,560
with

390
00:16:04,560 --> 00:16:07,759
get requests if you know a website does

391
00:16:07,759 --> 00:16:08,639
that

392
00:16:08,639 --> 00:16:10,720
you can search for them in order to log

393
00:16:10,720 --> 00:16:13,199
in on behalf of other users

394
00:16:13,199 --> 00:16:16,160
for example an example search query

395
00:16:16,160 --> 00:16:17,199
could be

396
00:16:17,199 --> 00:16:21,279
includes company.com and php session id

397
00:16:21,279 --> 00:16:25,120
which refers to a session token

398
00:16:26,240 --> 00:16:28,160
another important thing is map

399
00:16:28,160 --> 00:16:29,440
coordinates

400
00:16:29,440 --> 00:16:31,440
platforms such as google maps are

401
00:16:31,440 --> 00:16:33,519
carrying the coordinate information

402
00:16:33,519 --> 00:16:36,399
in the url section let's say an

403
00:16:36,399 --> 00:16:38,399
intelligence agency is expecting a

404
00:16:38,399 --> 00:16:41,199
terror attack on a specific location

405
00:16:41,199 --> 00:16:43,360
they can search for those coordinates on

406
00:16:43,360 --> 00:16:45,040
the export urls

407
00:16:45,040 --> 00:16:47,279
if there is a match they can contact

408
00:16:47,279 --> 00:16:49,279
with the short term service to find

409
00:16:49,279 --> 00:16:50,639
which ip address

410
00:16:50,639 --> 00:16:55,199
is used to shorten that url

411
00:16:59,600 --> 00:17:01,360
there is also another possibility with

412
00:17:01,360 --> 00:17:03,199
the map coordinates

413
00:17:03,199 --> 00:17:05,760
some of you may remember there was a

414
00:17:05,760 --> 00:17:08,160
there is a platform named strava

415
00:17:08,160 --> 00:17:10,240
which is used for tracking your running

416
00:17:10,240 --> 00:17:13,119
and cycling statistics

417
00:17:13,119 --> 00:17:15,520
a few years ago strava published the

418
00:17:15,520 --> 00:17:17,679
coordinates of places in which strava

419
00:17:17,679 --> 00:17:18,000
gets

420
00:17:18,000 --> 00:17:21,119
its signals it was looking harmless

421
00:17:21,119 --> 00:17:22,079
initially

422
00:17:22,079 --> 00:17:24,480
however osint researchers are realized

423
00:17:24,480 --> 00:17:26,640
that there are tons of strava users

424
00:17:26,640 --> 00:17:30,240
in out of nowhere in the middle east

425
00:17:30,240 --> 00:17:32,320
it was a clear indicator that those

426
00:17:32,320 --> 00:17:35,520
places are hidden cia basis

427
00:17:35,520 --> 00:17:37,039
so let's say you are collecting

428
00:17:37,039 --> 00:17:39,120
coordinates that are exposed

429
00:17:39,120 --> 00:17:42,080
via url shortener services and you

430
00:17:42,080 --> 00:17:43,200
realize that

431
00:17:43,200 --> 00:17:45,840
a coordinate in which is located in

432
00:17:45,840 --> 00:17:46,799
desert

433
00:17:46,799 --> 00:17:50,160
is appears lots of times it might be a

434
00:17:50,160 --> 00:17:51,840
good indicator that that

435
00:17:51,840 --> 00:17:53,520
there is something going on that

436
00:17:53,520 --> 00:17:55,039
location right

437
00:17:55,039 --> 00:18:00,160
so just keep that in mind

438
00:18:00,160 --> 00:18:02,880
so as a conclusion we can clearly say

439
00:18:02,880 --> 00:18:03,200
that

440
00:18:03,200 --> 00:18:06,240
uh relying on obscurity when hiding urls

441
00:18:06,240 --> 00:18:09,919
is a bad idea it can be exposed with

442
00:18:09,919 --> 00:18:12,240
lots of different methods as we

443
00:18:12,240 --> 00:18:13,200
explained in the

444
00:18:13,200 --> 00:18:16,320
previous slides you need to set proper

445
00:18:16,320 --> 00:18:18,400
access restrictions on them such as

446
00:18:18,400 --> 00:18:21,919
ipvite distinct and maybe authentication

447
00:18:21,919 --> 00:18:25,520
etc finding sensitive data via url

448
00:18:25,520 --> 00:18:26,640
shortener services

449
00:18:26,640 --> 00:18:30,160
can also be a good bug bounty method

450
00:18:30,160 --> 00:18:31,200
right

451
00:18:31,200 --> 00:18:33,520
back hunters may find private company

452
00:18:33,520 --> 00:18:35,679
data and get paid with it

453
00:18:35,679 --> 00:18:39,120
for example you can find some private

454
00:18:39,120 --> 00:18:40,080
company data

455
00:18:40,080 --> 00:18:43,440
in google drive or you can find some

456
00:18:43,440 --> 00:18:45,679
devops processes and credentials on

457
00:18:45,679 --> 00:18:46,799
trello boards

458
00:18:46,799 --> 00:18:50,160
etc and companies uh probably

459
00:18:50,160 --> 00:18:56,160
will reward you for that

460
00:18:56,160 --> 00:18:59,120
so and that was all from my site thank

461
00:18:59,120 --> 00:19:00,640
you so much for listening

462
00:19:00,640 --> 00:19:02,880
i hope uh it was an insightful

463
00:19:02,880 --> 00:19:05,039
presentation for you all

464
00:19:05,039 --> 00:19:07,039
and i hope you very safe thanks for

465
00:19:07,039 --> 00:19:10,000
everyone and if we have any questions

466
00:19:10,000 --> 00:19:12,320
and i'm willing to answer them right now

467
00:19:12,320 --> 00:19:17,520
thank you

