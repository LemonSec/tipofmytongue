1
00:00:00,000 --> 00:00:02,000
welcome to extracting all the azure

2
00:00:02,000 --> 00:00:04,560
passwords i'm carl fawson if we're

3
00:00:04,560 --> 00:00:06,000
watching this right now it means that

4
00:00:06,000 --> 00:00:08,320
i've either had some catastrophic issues

5
00:00:08,320 --> 00:00:10,719
with my laptop and wasn't able to join

6
00:00:10,719 --> 00:00:12,880
the live stream to do this presentation

7
00:00:12,880 --> 00:00:13,840
live

8
00:00:13,840 --> 00:00:16,160
but all of the information and slides

9
00:00:16,160 --> 00:00:17,520
will be here

10
00:00:17,520 --> 00:00:18,400
we'll still be able to do the

11
00:00:18,400 --> 00:00:20,720
presentation and i will join for the q a

12
00:00:20,720 --> 00:00:22,800
at the end so uh please save any of your

13
00:00:22,800 --> 00:00:25,119
questions for the questions section that

14
00:00:25,119 --> 00:00:27,359
we have at the end but a little bit of

15
00:00:27,359 --> 00:00:30,800
background on myself here i'm a practice

16
00:00:30,800 --> 00:00:32,800
director at a company called netspy i

17
00:00:32,800 --> 00:00:34,719
currently lead up our pacific northwest

18
00:00:34,719 --> 00:00:37,200
team out of portland oregon along with

19
00:00:37,200 --> 00:00:39,200
that i lead up our cloud pen testing

20
00:00:39,200 --> 00:00:41,680
services where i primarily focus on

21
00:00:41,680 --> 00:00:43,840
azure pen testing as this whole talk is

22
00:00:43,840 --> 00:00:45,680
going to be about azure and how we can

23
00:00:45,680 --> 00:00:47,360
get passwords from it

24
00:00:47,360 --> 00:00:48,640
kind of makes sense that i'd spend a lot

25
00:00:48,640 --> 00:00:50,879
of time doing research there but i also

26
00:00:50,879 --> 00:00:53,600
dabble in other cloud platforms that are

27
00:00:53,600 --> 00:00:55,039
out there as well

28
00:00:55,039 --> 00:00:57,840
spent a little bit of time in aws gcp

29
00:00:57,840 --> 00:00:59,520
handful of other cloud providers out

30
00:00:59,520 --> 00:01:01,440
there so i consider myself a bit of a

31
00:01:01,440 --> 00:01:02,879
cloud enthusiast

32
00:01:02,879 --> 00:01:05,840
in my spare time also a cloud enthusiast

33
00:01:05,840 --> 00:01:09,520
as a private pilot i like to fly and

34
00:01:09,520 --> 00:01:11,920
try to avoid the clouds myself but uh

35
00:01:11,920 --> 00:01:15,439
spent some time up in the sky as well

36
00:01:15,439 --> 00:01:17,840
the last thing on my list here is author

37
00:01:17,840 --> 00:01:20,320
this is a recent edition for me over the

38
00:01:20,320 --> 00:01:22,640
last year or so here i've been

39
00:01:22,640 --> 00:01:25,360
co-authoring the penetration testing

40
00:01:25,360 --> 00:01:27,119
azure for ethical hackers book with

41
00:01:27,119 --> 00:01:29,600
david okioti we will have that book out

42
00:01:29,600 --> 00:01:31,920
in mid-october with packed publishing

43
00:01:31,920 --> 00:01:33,439
but if anybody's interested in

44
00:01:33,439 --> 00:01:36,159
pre-ordering it is out on amazon right

45
00:01:36,159 --> 00:01:38,720
now so feel free to check it out there

46
00:01:38,720 --> 00:01:40,560
otherwise you can find me on the netspy

47
00:01:40,560 --> 00:01:42,479
github where we'll be talking about some

48
00:01:42,479 --> 00:01:44,320
tools that i've released through the

49
00:01:44,320 --> 00:01:46,000
netsby github

50
00:01:46,000 --> 00:01:49,040
and uh i blog on the netspy blog you can

51
00:01:49,040 --> 00:01:50,320
find me on twitter where i'm usually

52
00:01:50,320 --> 00:01:51,840
talking about things that i've

53
00:01:51,840 --> 00:01:53,920
contributed to the netspy blog or to the

54
00:01:53,920 --> 00:01:55,040
github

55
00:01:55,040 --> 00:01:58,799
and that's at kfossen for twitter

56
00:01:58,799 --> 00:02:01,439
so uh this is a cloud village talk so i

57
00:02:01,439 --> 00:02:02,640
would hope that most folks here

58
00:02:02,640 --> 00:02:05,119
understand what azure is but for those

59
00:02:05,119 --> 00:02:07,040
that are not as familiar with it it's

60
00:02:07,040 --> 00:02:10,239
the cloud provider from microsoft and

61
00:02:10,239 --> 00:02:12,720
from i guess my perspective and netspy's

62
00:02:12,720 --> 00:02:14,160
perspective we're seeing lots of our

63
00:02:14,160 --> 00:02:17,360
clients move to the azure cloud for a

64
00:02:17,360 --> 00:02:18,959
number of different reasons the primary

65
00:02:18,959 --> 00:02:21,920
driver really being office 365 services

66
00:02:21,920 --> 00:02:23,599
the integration between on-premise

67
00:02:23,599 --> 00:02:26,160
active directory where lots of clients

68
00:02:26,160 --> 00:02:28,879
we work with are currently in and moving

69
00:02:28,879 --> 00:02:30,720
over to azure active directory which

70
00:02:30,720 --> 00:02:32,080
we'll talk about the structure of that

71
00:02:32,080 --> 00:02:33,599
in a few slides here

72
00:02:33,599 --> 00:02:34,879
and then utilizing some of these

73
00:02:34,879 --> 00:02:36,640
services that we'll talk about in the

74
00:02:36,640 --> 00:02:39,680
talk here to either replicate existing

75
00:02:39,680 --> 00:02:41,760
services that they have on an on-premise

76
00:02:41,760 --> 00:02:44,400
environment or build cloud native up in

77
00:02:44,400 --> 00:02:47,280
azure as a new application or service

78
00:02:47,280 --> 00:02:49,200
that they want to have up in the cloud

79
00:02:49,200 --> 00:02:50,640
so an important thing that we want to

80
00:02:50,640 --> 00:02:53,840
think about here is that at certain iam

81
00:02:53,840 --> 00:02:57,760
rbac role levels within an azure tenant

82
00:02:57,760 --> 00:02:59,360
be it at azure active directory the

83
00:02:59,360 --> 00:03:00,879
subscription

84
00:03:00,879 --> 00:03:02,720
there are passwords in multiple

85
00:03:02,720 --> 00:03:05,280
different areas so typically with

86
00:03:05,280 --> 00:03:06,720
contributor rights

87
00:03:06,720 --> 00:03:08,800
we have multiple different services with

88
00:03:08,800 --> 00:03:11,599
an azure subscription that we're able to

89
00:03:11,599 --> 00:03:13,760
pull out credentials from and we'll be

90
00:03:13,760 --> 00:03:15,120
talking about those different services

91
00:03:15,120 --> 00:03:17,440
today

92
00:03:17,680 --> 00:03:20,480
so uh before we get too far into the

93
00:03:20,480 --> 00:03:22,080
services themselves here just wanna make

94
00:03:22,080 --> 00:03:23,920
sure everybody's using kind of the same

95
00:03:23,920 --> 00:03:25,840
terminology and understanding the

96
00:03:25,840 --> 00:03:28,000
structure of an azure tenant

97
00:03:28,000 --> 00:03:29,840
so from an azure active directory tenant

98
00:03:29,840 --> 00:03:31,040
standpoint

99
00:03:31,040 --> 00:03:33,440
this is kind of the top of the

100
00:03:33,440 --> 00:03:36,080
organization for an azure environment so

101
00:03:36,080 --> 00:03:38,319
the tenant is really that core identity

102
00:03:38,319 --> 00:03:41,040
provider within azure so for role-based

103
00:03:41,040 --> 00:03:43,120
access control and identity and access

104
00:03:43,120 --> 00:03:44,959
management the identities that are

105
00:03:44,959 --> 00:03:47,360
stored in azure active directory will

106
00:03:47,360 --> 00:03:49,519
have roles applied and those roles allow

107
00:03:49,519 --> 00:03:51,599
for access to different subscriptions

108
00:03:51,599 --> 00:03:53,040
services

109
00:03:53,040 --> 00:03:54,959
tenant level roles that will be applied

110
00:03:54,959 --> 00:03:55,920
as well

111
00:03:55,920 --> 00:03:58,239
and in order to apply a role you have to

112
00:03:58,239 --> 00:04:00,720
have a security principle so principles

113
00:04:00,720 --> 00:04:02,480
are made up of a number of different

114
00:04:02,480 --> 00:04:05,040
identities within azure active directory

115
00:04:05,040 --> 00:04:08,400
these could be users and or guest users

116
00:04:08,400 --> 00:04:10,480
primary users being

117
00:04:10,480 --> 00:04:12,879
users that would either be part of the

118
00:04:12,879 --> 00:04:15,280
synced active directory environment or

119
00:04:15,280 --> 00:04:18,320
just direct on microsoft managed

120
00:04:18,320 --> 00:04:20,160
accounts and those are accounts that

121
00:04:20,160 --> 00:04:22,160
only live in azure active directory

122
00:04:22,160 --> 00:04:24,880
they're not synced down with an ad sync

123
00:04:24,880 --> 00:04:27,199
down to an on-premise domain controller

124
00:04:27,199 --> 00:04:29,120
there's some subtle differences between

125
00:04:29,120 --> 00:04:31,360
the two but in general they're users

126
00:04:31,360 --> 00:04:33,040
they're in azure active directory we can

127
00:04:33,040 --> 00:04:35,360
apply roles to them likewise with guest

128
00:04:35,360 --> 00:04:37,360
users those are users that are part of a

129
00:04:37,360 --> 00:04:39,120
different tenant for the core of their

130
00:04:39,120 --> 00:04:41,759
identity those can be added to your

131
00:04:41,759 --> 00:04:44,080
tenant as a guest user and provided

132
00:04:44,080 --> 00:04:46,080
access to different services through

133
00:04:46,080 --> 00:04:48,160
application roles or custom roles

134
00:04:48,160 --> 00:04:50,400
anything like that

135
00:04:50,400 --> 00:04:52,320
for managed identities we have system

136
00:04:52,320 --> 00:04:54,400
assigned and user assigned where system

137
00:04:54,400 --> 00:04:56,639
assigned is really more of

138
00:04:56,639 --> 00:04:58,960
the resource itself having an identity

139
00:04:58,960 --> 00:05:01,039
tied to it versus a user assigned

140
00:05:01,039 --> 00:05:02,960
identity which is more of a subscription

141
00:05:02,960 --> 00:05:04,639
level identity that can then be applied

142
00:05:04,639 --> 00:05:07,039
to individual resources they're kind of

143
00:05:07,039 --> 00:05:09,039
inverses of each other but the core of

144
00:05:09,039 --> 00:05:11,600
it is you can assign a specific identity

145
00:05:11,600 --> 00:05:14,000
to a service so something like a virtual

146
00:05:14,000 --> 00:05:16,000
machine if we want that virtual machine

147
00:05:16,000 --> 00:05:18,400
to be able to have rights within either

148
00:05:18,400 --> 00:05:19,840
azure active directory or the

149
00:05:19,840 --> 00:05:22,400
subscription to access data or make

150
00:05:22,400 --> 00:05:24,960
changes we would assign an identity to

151
00:05:24,960 --> 00:05:27,840
that virtual machine that vm would get

152
00:05:27,840 --> 00:05:30,080
the token for that identity

153
00:05:30,080 --> 00:05:32,320
and then be able to authenticate to

154
00:05:32,320 --> 00:05:33,759
azure id or

155
00:05:33,759 --> 00:05:36,160
to the subscription itself and access

156
00:05:36,160 --> 00:05:38,960
data or make changes so the last one on

157
00:05:38,960 --> 00:05:41,520
here is service principles these are

158
00:05:41,520 --> 00:05:44,080
more of application accounts within an

159
00:05:44,080 --> 00:05:45,759
active directory tenant

160
00:05:45,759 --> 00:05:46,960
you might be familiar with app

161
00:05:46,960 --> 00:05:49,680
registrations within the azure active

162
00:05:49,680 --> 00:05:51,600
directory tenant

163
00:05:51,600 --> 00:05:53,759
these are

164
00:05:53,759 --> 00:05:56,080
kind of more service type credentials

165
00:05:56,080 --> 00:05:57,840
that are utilized by either applications

166
00:05:57,840 --> 00:06:00,400
or services as a long-term or

167
00:06:00,400 --> 00:06:03,120
potentially long-term credential with a

168
00:06:03,120 --> 00:06:06,000
static certificate or password that you

169
00:06:06,000 --> 00:06:08,080
could rotate or change over

170
00:06:08,080 --> 00:06:09,360
typically these are just used for

171
00:06:09,360 --> 00:06:11,600
services that are not used for daily

172
00:06:11,600 --> 00:06:14,319
interaction the user and utilized for

173
00:06:14,319 --> 00:06:16,080
individual services

174
00:06:16,080 --> 00:06:18,160
so to reiterate with all of these things

175
00:06:18,160 --> 00:06:20,319
these security principles are assigned

176
00:06:20,319 --> 00:06:22,400
roles and those roles assign access

177
00:06:22,400 --> 00:06:25,520
within the azure active directory tenant

178
00:06:25,520 --> 00:06:27,520
so going one step down here from the

179
00:06:27,520 --> 00:06:28,800
tenant down to the individual

180
00:06:28,800 --> 00:06:30,960
subscriptions subscriptions can be

181
00:06:30,960 --> 00:06:32,720
housed within management groups

182
00:06:32,720 --> 00:06:34,400
management groups can have child

183
00:06:34,400 --> 00:06:36,240
management groups there's subscriptions

184
00:06:36,240 --> 00:06:37,680
underneath that

185
00:06:37,680 --> 00:06:39,120
within the subscription itself there's

186
00:06:39,120 --> 00:06:41,840
resource groups and resources and the

187
00:06:41,840 --> 00:06:43,120
application of the roles we're going to

188
00:06:43,120 --> 00:06:45,840
talk about here can be applied at any of

189
00:06:45,840 --> 00:06:47,919
those levels that we see down here on

190
00:06:47,919 --> 00:06:50,560
the bottom so typically in a normal

191
00:06:50,560 --> 00:06:52,080
subscription i would say for the most

192
00:06:52,080 --> 00:06:54,240
part we're seeing roles that are applied

193
00:06:54,240 --> 00:06:55,840
at the subscription level or the

194
00:06:55,840 --> 00:06:57,360
management group level

195
00:06:57,360 --> 00:06:59,199
if somebody's really

196
00:06:59,199 --> 00:07:01,520
really interested in setting our back

197
00:07:01,520 --> 00:07:03,919
and im controls around their environment

198
00:07:03,919 --> 00:07:05,280
they'll scope things all the way down to

199
00:07:05,280 --> 00:07:07,280
individual resources but from a

200
00:07:07,280 --> 00:07:09,840
practical day-to-day perspective we're

201
00:07:09,840 --> 00:07:12,000
usually just seeing things scoped to the

202
00:07:12,000 --> 00:07:13,680
subscription or management group for

203
00:07:13,680 --> 00:07:15,840
specific users that are either cloud

204
00:07:15,840 --> 00:07:18,000
engineers or developers within that

205
00:07:18,000 --> 00:07:19,520
subscription or management group that

206
00:07:19,520 --> 00:07:21,120
we're working with

207
00:07:21,120 --> 00:07:23,680
so uh primary roles that we're working

208
00:07:23,680 --> 00:07:25,680
with here are owner contributor and

209
00:07:25,680 --> 00:07:28,240
reader from our perspective as a pen

210
00:07:28,240 --> 00:07:30,560
tester we're often granted reader level

211
00:07:30,560 --> 00:07:33,199
access to a subscription as it doesn't

212
00:07:33,199 --> 00:07:34,960
allow us to make any changes in the

213
00:07:34,960 --> 00:07:38,080
subscription which could potentially

214
00:07:38,080 --> 00:07:39,440
cause an issue

215
00:07:39,440 --> 00:07:41,360
modify existing resources anything like

216
00:07:41,360 --> 00:07:43,199
that so oftentimes we're initially

217
00:07:43,199 --> 00:07:45,759
granted reader level access and try to

218
00:07:45,759 --> 00:07:47,440
escalate up to say owner of the

219
00:07:47,440 --> 00:07:49,599
subscription or up into azure active

220
00:07:49,599 --> 00:07:51,039
directory

221
00:07:51,039 --> 00:07:52,960
so contributors on the subscription

222
00:07:52,960 --> 00:07:54,000
allow

223
00:07:54,000 --> 00:07:56,319
the user to make changes to the

224
00:07:56,319 --> 00:07:58,800
resources themselves in the subscription

225
00:07:58,800 --> 00:08:00,400
contributors really what we're seeing

226
00:08:00,400 --> 00:08:02,240
for the day-to-day users across the

227
00:08:02,240 --> 00:08:03,280
board

228
00:08:03,280 --> 00:08:05,520
people like developers or cloud

229
00:08:05,520 --> 00:08:07,599
engineers that are making changes in the

230
00:08:07,599 --> 00:08:08,720
environment

231
00:08:08,720 --> 00:08:10,400
typically it's a subscription level

232
00:08:10,400 --> 00:08:12,479
contributor permission that's set so

233
00:08:12,479 --> 00:08:14,800
that that user can access everything

234
00:08:14,800 --> 00:08:16,879
that is in that subscription

235
00:08:16,879 --> 00:08:18,319
and the only difference between owner

236
00:08:18,319 --> 00:08:19,919
and contributor is that owners are

237
00:08:19,919 --> 00:08:21,919
allowed to make role assignments within

238
00:08:21,919 --> 00:08:24,080
that subscription so if i'm an owner in

239
00:08:24,080 --> 00:08:25,680
the subscription and want to assign

240
00:08:25,680 --> 00:08:27,199
another user

241
00:08:27,199 --> 00:08:29,599
contributor or reader or another role

242
00:08:29,599 --> 00:08:31,680
within that subscription i have rights

243
00:08:31,680 --> 00:08:33,760
to do that now roles can be applied at

244
00:08:33,760 --> 00:08:34,958
multiple different levels we talked

245
00:08:34,958 --> 00:08:36,159
about the

246
00:08:36,159 --> 00:08:37,599
kind of different subscription or

247
00:08:37,599 --> 00:08:39,599
management group levels there's also

248
00:08:39,599 --> 00:08:42,000
azure active directory tenant level

249
00:08:42,000 --> 00:08:43,440
roles that we're not really going to

250
00:08:43,440 --> 00:08:45,120
talk about today because

251
00:08:45,120 --> 00:08:46,480
they don't necessarily apply to the

252
00:08:46,480 --> 00:08:48,080
subscriptions that's probably a whole

253
00:08:48,080 --> 00:08:50,000
other talk but

254
00:08:50,000 --> 00:08:51,920
for the subscription level roles that

255
00:08:51,920 --> 00:08:53,600
are applied typically service or

256
00:08:53,600 --> 00:08:55,440
application specific roles that we'll

257
00:08:55,440 --> 00:08:57,040
see we'll talk about a couple of ones

258
00:08:57,040 --> 00:08:59,120
that are important for us to use for

259
00:08:59,120 --> 00:09:00,800
gathering passwords in a couple of

260
00:09:00,800 --> 00:09:03,279
slides here

261
00:09:03,680 --> 00:09:05,120
so uh

262
00:09:05,120 --> 00:09:06,640
for all of the

263
00:09:06,640 --> 00:09:08,160
examples that we're going to talk about

264
00:09:08,160 --> 00:09:10,399
in the presentation today just assume

265
00:09:10,399 --> 00:09:12,480
that we have contributor on the

266
00:09:12,480 --> 00:09:13,920
subscription that we're working with

267
00:09:13,920 --> 00:09:16,399
here again typically developers and

268
00:09:16,399 --> 00:09:17,839
engineers are going to have this role

269
00:09:17,839 --> 00:09:19,920
and it's a very common

270
00:09:19,920 --> 00:09:21,360
role that we're going to work with in a

271
00:09:21,360 --> 00:09:23,120
subscription now some folks are going to

272
00:09:23,120 --> 00:09:25,120
say oh that's basically admin and you

273
00:09:25,120 --> 00:09:27,040
can do everything there

274
00:09:27,040 --> 00:09:29,200
yeah it's kind of true i would say it's

275
00:09:29,200 --> 00:09:31,440
on par with say a local admin on a

276
00:09:31,440 --> 00:09:33,440
workstation in a traditional active

277
00:09:33,440 --> 00:09:35,440
directory environment you've got some

278
00:09:35,440 --> 00:09:37,040
power with the

279
00:09:37,040 --> 00:09:39,920
specific environment that you're in say

280
00:09:39,920 --> 00:09:41,279
the subscription

281
00:09:41,279 --> 00:09:43,200
but overall you don't have tenant level

282
00:09:43,200 --> 00:09:44,959
management you're not you know global

283
00:09:44,959 --> 00:09:47,279
admin on the azure active directory

284
00:09:47,279 --> 00:09:48,240
tenant

285
00:09:48,240 --> 00:09:49,760
you don't have rights to add or remove

286
00:09:49,760 --> 00:09:51,600
users anything like that it's really

287
00:09:51,600 --> 00:09:53,360
just yeah i can create a virtual machine

288
00:09:53,360 --> 00:09:55,360
or a key vault or anything like that

289
00:09:55,360 --> 00:09:56,800
and that's typically what we're seeing

290
00:09:56,800 --> 00:09:58,959
in a lot of subscriptions that we work

291
00:09:58,959 --> 00:09:59,839
with

292
00:09:59,839 --> 00:10:02,160
alternatively there are other roles that

293
00:10:02,160 --> 00:10:04,480
you might gain access to during the part

294
00:10:04,480 --> 00:10:07,360
of a pen test so look out for things

295
00:10:07,360 --> 00:10:09,680
like website contributor storage account

296
00:10:09,680 --> 00:10:11,440
contributor we're gonna have a very

297
00:10:11,440 --> 00:10:13,760
specific log analytics contributor

298
00:10:13,760 --> 00:10:15,360
example at the end of the presentation

299
00:10:15,360 --> 00:10:18,000
here but there's multiple different

300
00:10:18,000 --> 00:10:19,760
service specific roles that you might be

301
00:10:19,760 --> 00:10:21,279
able to make use of to gather

302
00:10:21,279 --> 00:10:23,839
credentials from an azure subscription

303
00:10:23,839 --> 00:10:25,360
and we'll cover how we can do that in a

304
00:10:25,360 --> 00:10:27,680
minute

305
00:10:27,839 --> 00:10:30,560
so how do we manually access individual

306
00:10:30,560 --> 00:10:32,399
credentials so let's say that we have

307
00:10:32,399 --> 00:10:34,320
rights to read credentials for a

308
00:10:34,320 --> 00:10:35,920
specific

309
00:10:35,920 --> 00:10:37,760
service that we're utilizing in an azure

310
00:10:37,760 --> 00:10:38,959
subscription

311
00:10:38,959 --> 00:10:40,399
most of the time i would recommend just

312
00:10:40,399 --> 00:10:42,800
using the azure portal

313
00:10:42,800 --> 00:10:44,800
you probably have other options via the

314
00:10:44,800 --> 00:10:47,680
cli or powershell to just manually grab

315
00:10:47,680 --> 00:10:50,240
individual keys or credentials for kind

316
00:10:50,240 --> 00:10:52,000
of one-off collection we'll go through

317
00:10:52,000 --> 00:10:53,760
those for each of the different

318
00:10:53,760 --> 00:10:57,120
subscriptions and sorry subscriptions

319
00:10:57,120 --> 00:10:58,240
resources

320
00:10:58,240 --> 00:11:00,399
and services and uh for each of those

321
00:11:00,399 --> 00:11:01,760
services we'll talk about manual

322
00:11:01,760 --> 00:11:02,959
collection and then how we would

323
00:11:02,959 --> 00:11:05,440
automate that within get a z passwords

324
00:11:05,440 --> 00:11:07,440
which we'll talk about next

325
00:11:07,440 --> 00:11:09,279
so uh from a manual collection

326
00:11:09,279 --> 00:11:11,040
perspective this is fine if you only

327
00:11:11,040 --> 00:11:12,959
have just kind of one-off access to the

328
00:11:12,959 --> 00:11:16,480
portal or the cli or an active session

329
00:11:16,480 --> 00:11:18,480
but from a practical pen tester's

330
00:11:18,480 --> 00:11:20,240
perspective we want something that can

331
00:11:20,240 --> 00:11:22,160
automate all of this collection

332
00:11:22,160 --> 00:11:25,519
so we wrote git azpasswords to automate

333
00:11:25,519 --> 00:11:27,600
the collection of passwords out of an

334
00:11:27,600 --> 00:11:30,079
azure subscription it really wraps the

335
00:11:30,079 --> 00:11:32,800
az powershell functions to automate that

336
00:11:32,800 --> 00:11:35,360
collection and just actively and

337
00:11:35,360 --> 00:11:37,760
passively gather

338
00:11:37,760 --> 00:11:39,680
passwords from different services within

339
00:11:39,680 --> 00:11:41,600
a subscription more the active stuff

340
00:11:41,600 --> 00:11:42,880
we'll talk about with things like

341
00:11:42,880 --> 00:11:44,079
automation accounts where we have to

342
00:11:44,079 --> 00:11:46,320
upload a malicious run book but the

343
00:11:46,320 --> 00:11:47,920
passive configuration gathering is

344
00:11:47,920 --> 00:11:49,200
usually just one or two lines of

345
00:11:49,200 --> 00:11:51,760
powershell to say grab a publishing

346
00:11:51,760 --> 00:11:53,839
profile from app services

347
00:11:53,839 --> 00:11:55,440
so if you're interested in microburst we

348
00:11:55,440 --> 00:11:57,519
have a number of different functions

349
00:11:57,519 --> 00:12:00,160
within the toolset i've got the link out

350
00:12:00,160 --> 00:12:03,760
to the netspy github here for microburst

351
00:12:03,760 --> 00:12:04,800
we talked about all the different

352
00:12:04,800 --> 00:12:07,040
functions uh some other time

353
00:12:07,040 --> 00:12:08,079
but

354
00:12:08,079 --> 00:12:09,680
there's a lot of different tools within

355
00:12:09,680 --> 00:12:12,079
the tool set for enumeration and

356
00:12:12,079 --> 00:12:14,880
attacking different services that are in

357
00:12:14,880 --> 00:12:17,760
azure subscriptions

358
00:12:17,839 --> 00:12:20,000
so the first of these services we'll

359
00:12:20,000 --> 00:12:22,800
talk about today is key vaults now you

360
00:12:22,800 --> 00:12:24,399
may be thinking okay

361
00:12:24,399 --> 00:12:26,480
let's talk about passwords

362
00:12:26,480 --> 00:12:28,320
key vault store passwords this makes

363
00:12:28,320 --> 00:12:30,399
sense uh service is pretty

364
00:12:30,399 --> 00:12:32,399
straightforward it stores credentials

365
00:12:32,399 --> 00:12:34,480
and it's used in an azure subscription

366
00:12:34,480 --> 00:12:36,720
to hold you know secrets keys

367
00:12:36,720 --> 00:12:38,160
certificates anything that you would

368
00:12:38,160 --> 00:12:41,760
want to protect and you know keep in a

369
00:12:41,760 --> 00:12:44,320
password vault or a key vault

370
00:12:44,320 --> 00:12:46,160
so it's pretty simple service uh

371
00:12:46,160 --> 00:12:48,639
manually dumping credentials from this

372
00:12:48,639 --> 00:12:50,720
service is also pretty straightforward

373
00:12:50,720 --> 00:12:53,440
you can go into the keys and secrets if

374
00:12:53,440 --> 00:12:55,839
you have access to read those and then

375
00:12:55,839 --> 00:12:58,720
just manually show the secret value or

376
00:12:58,720 --> 00:12:59,920
download a backup copy of the

377
00:12:59,920 --> 00:13:01,040
certificate

378
00:13:01,040 --> 00:13:02,720
the portal actually makes it pretty easy

379
00:13:02,720 --> 00:13:05,200
to do but this also requires you to have

380
00:13:05,200 --> 00:13:06,800
rights to read

381
00:13:06,800 --> 00:13:10,320
and list any of those keys or secrets in

382
00:13:10,320 --> 00:13:12,320
the access policy so you can see in the

383
00:13:12,320 --> 00:13:14,079
bottom right hand corner here the add

384
00:13:14,079 --> 00:13:16,160
access policy button here

385
00:13:16,160 --> 00:13:18,800
with the key vaults there are individual

386
00:13:18,800 --> 00:13:21,279
access policies for the vaults where you

387
00:13:21,279 --> 00:13:23,680
can configure individual security

388
00:13:23,680 --> 00:13:25,360
principles

389
00:13:25,360 --> 00:13:28,880
and set permissions for the key vault

390
00:13:28,880 --> 00:13:31,120
via the access policy so instead of just

391
00:13:31,120 --> 00:13:33,120
saying hey all of the contributors have

392
00:13:33,120 --> 00:13:35,519
access to list and read

393
00:13:35,519 --> 00:13:37,120
the credentials are stored in the key

394
00:13:37,120 --> 00:13:39,519
vault there's an extra step within azure

395
00:13:39,519 --> 00:13:41,199
key vaults where you have to add an

396
00:13:41,199 --> 00:13:43,440
access policy in order to access those

397
00:13:43,440 --> 00:13:45,040
keys and secrets

398
00:13:45,040 --> 00:13:47,360
just by default when you create a key

399
00:13:47,360 --> 00:13:49,279
vault it's not one of those oh hey

400
00:13:49,279 --> 00:13:51,120
everybody has that it's tied into azure

401
00:13:51,120 --> 00:13:52,880
our back it's one of those things where

402
00:13:52,880 --> 00:13:55,120
you have to add the access policy for

403
00:13:55,120 --> 00:13:56,000
that

404
00:13:56,000 --> 00:13:58,160
during a pen test we may want to

405
00:13:58,160 --> 00:14:00,720
modify that access policy temporarily so

406
00:14:00,720 --> 00:14:03,120
that we can access the credentials that

407
00:14:03,120 --> 00:14:05,600
are in that vault and we definitely want

408
00:14:05,600 --> 00:14:07,279
to revert those changes after we're done

409
00:14:07,279 --> 00:14:09,760
with that that is something that you can

410
00:14:09,760 --> 00:14:11,600
do we have functions and we'll talk

411
00:14:11,600 --> 00:14:13,199
about that in the next slide here that

412
00:14:13,199 --> 00:14:15,680
allow you to do that

413
00:14:15,680 --> 00:14:18,720
but you know it's it's not a huge impact

414
00:14:18,720 --> 00:14:20,000
it is something that

415
00:14:20,000 --> 00:14:22,639
could potentially be logged in uh

416
00:14:22,639 --> 00:14:24,480
the subscription logs themselves and

417
00:14:24,480 --> 00:14:27,040
potentially noted as malicious activity

418
00:14:27,040 --> 00:14:29,199
so something to watch out for there

419
00:14:29,199 --> 00:14:32,079
uh additionally access can be restricted

420
00:14:32,079 --> 00:14:34,160
by source iop and network so things like

421
00:14:34,160 --> 00:14:35,680
private endpoint connections would

422
00:14:35,680 --> 00:14:37,760
restrict where you can actually access

423
00:14:37,760 --> 00:14:39,600
the key vault from this is something

424
00:14:39,600 --> 00:14:41,600
that we do not have automation built in

425
00:14:41,600 --> 00:14:44,639
to get easy passwords for it's not that

426
00:14:44,639 --> 00:14:46,639
i recommend changing something from a

427
00:14:46,639 --> 00:14:48,720
private endpoint to a public endpoint is

428
00:14:48,720 --> 00:14:50,800
definitely a major state change i would

429
00:14:50,800 --> 00:14:52,720
not recommend doing that

430
00:14:52,720 --> 00:14:54,399
but it may be something to keep in mind

431
00:14:54,399 --> 00:14:56,079
as you're trying to get credentials out

432
00:14:56,079 --> 00:14:58,399
of those key vaults

433
00:14:58,399 --> 00:15:01,120
so from an automation perspective it's

434
00:15:01,120 --> 00:15:03,760
pretty straightforward with get ac

435
00:15:03,760 --> 00:15:05,680
passwords we're utilizing the getaz

436
00:15:05,680 --> 00:15:08,079
keyvault function from azpowershell to

437
00:15:08,079 --> 00:15:09,920
list out all the key vaults then for

438
00:15:09,920 --> 00:15:11,279
each vault we want to see what that

439
00:15:11,279 --> 00:15:13,600
access policy is up front if we need to

440
00:15:13,600 --> 00:15:15,760
modify it to add git and list

441
00:15:15,760 --> 00:15:18,720
permissions for our user we can do that

442
00:15:18,720 --> 00:15:21,680
we'll just make a backup of the existing

443
00:15:21,680 --> 00:15:23,360
access policies that we can restore to

444
00:15:23,360 --> 00:15:25,680
at the very end and then modify the

445
00:15:25,680 --> 00:15:28,160
access policy to give ourselves access

446
00:15:28,160 --> 00:15:30,480
then we get the keys and secrets

447
00:15:30,480 --> 00:15:32,480
return those out to the user through the

448
00:15:32,480 --> 00:15:34,800
get a z passwords

449
00:15:34,800 --> 00:15:36,639
powershell function and then return

450
00:15:36,639 --> 00:15:38,240
everything back to its original state

451
00:15:38,240 --> 00:15:39,680
after we're done

452
00:15:39,680 --> 00:15:41,360
pretty straightforward

453
00:15:41,360 --> 00:15:42,720
definitely very handy for dumping out

454
00:15:42,720 --> 00:15:44,880
key vault contents we can also also

455
00:15:44,880 --> 00:15:47,839
export certificates to individual files

456
00:15:47,839 --> 00:15:50,160
as well so if you want to get a pfx

457
00:15:50,160 --> 00:15:51,759
file for a certificate

458
00:15:51,759 --> 00:15:55,680
get a z password support that as well

459
00:15:55,680 --> 00:15:57,519
so the next service that we'll cover is

460
00:15:57,519 --> 00:15:58,959
app services

461
00:15:58,959 --> 00:16:00,399
for those that are not familiar with app

462
00:16:00,399 --> 00:16:01,519
services

463
00:16:01,519 --> 00:16:03,920
at its core it's really

464
00:16:03,920 --> 00:16:05,839
application services that you can use to

465
00:16:05,839 --> 00:16:09,199
host web applications and apis within

466
00:16:09,199 --> 00:16:11,839
azure so in general what we're seeing

467
00:16:11,839 --> 00:16:15,040
app service is used for primarily

468
00:16:15,040 --> 00:16:18,480
function logic apps api endpoints and

469
00:16:18,480 --> 00:16:20,560
more of your traditional application

470
00:16:20,560 --> 00:16:22,959
servers so from a more traditional

471
00:16:22,959 --> 00:16:24,399
on-premise environment let's say you've

472
00:16:24,399 --> 00:16:26,720
got an ias server and want to ship all

473
00:16:26,720 --> 00:16:29,360
of your asp code up to the cloud you can

474
00:16:29,360 --> 00:16:31,759
make use of azure app services to

475
00:16:31,759 --> 00:16:34,959
basically be your web server and

476
00:16:34,959 --> 00:16:36,880
run all of your application code up in

477
00:16:36,880 --> 00:16:39,680
azure super handy from a pentest

478
00:16:39,680 --> 00:16:41,839
perspective we are

479
00:16:41,839 --> 00:16:43,279
potentially getting into app service

480
00:16:43,279 --> 00:16:44,880
applications through traditional web

481
00:16:44,880 --> 00:16:46,880
application vulnerabilities some of the

482
00:16:46,880 --> 00:16:49,680
most impactful ones being code execution

483
00:16:49,680 --> 00:16:51,519
which is extremely impactful in the

484
00:16:51,519 --> 00:16:53,040
first place anyways regardless of where

485
00:16:53,040 --> 00:16:55,120
the application is being hosted but from

486
00:16:55,120 --> 00:16:56,560
a cloud perspective it potentially

487
00:16:56,560 --> 00:16:58,240
allows us to pivot within the cloud

488
00:16:58,240 --> 00:16:59,519
environment

489
00:16:59,519 --> 00:17:02,320
so uh for the app services themselves

490
00:17:02,320 --> 00:17:04,000
there's frequently passwords stored in

491
00:17:04,000 --> 00:17:06,079
configuration files potentially

492
00:17:06,079 --> 00:17:08,880
hard-coded in application configurations

493
00:17:08,880 --> 00:17:11,280
or the application files themselves

494
00:17:11,280 --> 00:17:12,319
there's connection strings are

495
00:17:12,319 --> 00:17:13,919
associated with the app service which

496
00:17:13,919 --> 00:17:16,000
we'll see in a moment here

497
00:17:16,000 --> 00:17:17,520
additionally function app files were

498
00:17:17,520 --> 00:17:20,240
frequently seen configurations there

499
00:17:20,240 --> 00:17:22,559
one of the kind of common things that we

500
00:17:22,559 --> 00:17:24,079
run into from a reader perspective is

501
00:17:24,079 --> 00:17:25,760
being able to read those function app

502
00:17:25,760 --> 00:17:28,160
files and parsed out any hard-coded

503
00:17:28,160 --> 00:17:30,000
credentials there i've quite frequently

504
00:17:30,000 --> 00:17:31,760
seen service principal credentials

505
00:17:31,760 --> 00:17:34,160
stored there and we can pull those out

506
00:17:34,160 --> 00:17:35,760
to get access to whatever that service

507
00:17:35,760 --> 00:17:36,880
principle

508
00:17:36,880 --> 00:17:39,039
needs uh you know say from a key vault

509
00:17:39,039 --> 00:17:41,039
perspective anything like that so those

510
00:17:41,039 --> 00:17:42,480
are definitely handy

511
00:17:42,480 --> 00:17:43,600
and then

512
00:17:43,600 --> 00:17:45,520
there's also app services configuration

513
00:17:45,520 --> 00:17:47,520
service which can then apply down some

514
00:17:47,520 --> 00:17:50,000
of those configurations onto multiple

515
00:17:50,000 --> 00:17:52,000
app services and kind of set standard

516
00:17:52,000 --> 00:17:53,760
deployments things like that that's also

517
00:17:53,760 --> 00:17:57,280
an interesting service to dive into

518
00:17:57,280 --> 00:17:59,039
so i'm manually dumping these

519
00:17:59,039 --> 00:18:00,480
credentials from an app service

520
00:18:00,480 --> 00:18:02,000
application

521
00:18:02,000 --> 00:18:04,320
we just navigate to the application in

522
00:18:04,320 --> 00:18:06,559
the portal go over to the get published

523
00:18:06,559 --> 00:18:08,880
profile link over on the top right there

524
00:18:08,880 --> 00:18:10,559
and get the publish settings file that

525
00:18:10,559 --> 00:18:12,799
we can see here now i've redacted all of

526
00:18:12,799 --> 00:18:14,640
our user passwords here but you can see

527
00:18:14,640 --> 00:18:16,000
all of the usernames are dollar sign

528
00:18:16,000 --> 00:18:19,039
netspy it's for the netspy app service

529
00:18:19,039 --> 00:18:20,240
application

530
00:18:20,240 --> 00:18:22,559
and uh you know all of the creds here

531
00:18:22,559 --> 00:18:24,559
are a bit of an eye chart to look at

532
00:18:24,559 --> 00:18:26,240
here but

533
00:18:26,240 --> 00:18:28,559
we've got web credentials we've got ftp

534
00:18:28,559 --> 00:18:29,520
credentials we've got a number of

535
00:18:29,520 --> 00:18:30,640
different credentials that we might be

536
00:18:30,640 --> 00:18:34,160
able to utilize as an attacker

537
00:18:34,160 --> 00:18:36,160
so uh these credentials that we're going

538
00:18:36,160 --> 00:18:37,280
to get out of the published profile

539
00:18:37,280 --> 00:18:39,600
would allow us to access the application

540
00:18:39,600 --> 00:18:41,600
from an ftp perspective which would give

541
00:18:41,600 --> 00:18:44,000
us access to application code any

542
00:18:44,000 --> 00:18:45,600
configuration files that might be living

543
00:18:45,600 --> 00:18:47,120
in the web directory

544
00:18:47,120 --> 00:18:48,720
and potentially pull sensitive

545
00:18:48,720 --> 00:18:50,559
information out of there much less

546
00:18:50,559 --> 00:18:52,240
getting access to the source code which

547
00:18:52,240 --> 00:18:54,160
could be useful in its own way in

548
00:18:54,160 --> 00:18:56,320
addition to that we have access to web

549
00:18:56,320 --> 00:18:58,160
management credentials

550
00:18:58,160 --> 00:19:00,480
that would allow us to authenticate to

551
00:19:00,480 --> 00:19:03,039
this kudu environment that we have up on

552
00:19:03,039 --> 00:19:04,960
the screen here now typically you would

553
00:19:04,960 --> 00:19:07,120
access that through the azure portal if

554
00:19:07,120 --> 00:19:10,480
you actually go to the scm link so in

555
00:19:10,480 --> 00:19:11,200
this case we see

556
00:19:11,200 --> 00:19:14,200
netspy.stm.azurewebsites.net

557
00:19:14,720 --> 00:19:17,280
if you specify forward slash basic auth

558
00:19:17,280 --> 00:19:18,880
on the end of that

559
00:19:18,880 --> 00:19:21,039
it's kind of a neat workaround trick so

560
00:19:21,039 --> 00:19:22,320
you can use those credentials we

561
00:19:22,320 --> 00:19:24,480
identified in that published profile

562
00:19:24,480 --> 00:19:27,440
to access the kudu interface here

563
00:19:27,440 --> 00:19:30,960
now this interface is super handy for

564
00:19:30,960 --> 00:19:33,360
just getting access to the application

565
00:19:33,360 --> 00:19:35,520
itself the files that are in there we

566
00:19:35,520 --> 00:19:38,160
can see debug console process explorer

567
00:19:38,160 --> 00:19:40,160
you get a powershell shell so you can

568
00:19:40,160 --> 00:19:43,600
run commands on the app service itself

569
00:19:43,600 --> 00:19:44,480
and

570
00:19:44,480 --> 00:19:46,160
super handy so from a persistence

571
00:19:46,160 --> 00:19:47,840
perspective i would recommend pulling

572
00:19:47,840 --> 00:19:50,000
down published profiles for any apps

573
00:19:50,000 --> 00:19:52,880
that you're able to compromise and use

574
00:19:52,880 --> 00:19:55,520
that for persistence to keep a presence

575
00:19:55,520 --> 00:19:58,080
within that app services application

576
00:19:58,080 --> 00:19:59,280
finally the last thing in here is

577
00:19:59,280 --> 00:20:00,960
connection string so by default if you

578
00:20:00,960 --> 00:20:02,720
set a standard

579
00:20:02,720 --> 00:20:04,480
connection string for the application to

580
00:20:04,480 --> 00:20:06,720
use at the app services

581
00:20:06,720 --> 00:20:08,559
resource level that connection string

582
00:20:08,559 --> 00:20:09,679
also gets pulled down with that

583
00:20:09,679 --> 00:20:12,480
published profile

584
00:20:12,480 --> 00:20:14,240
so uh one of the things i want to touch

585
00:20:14,240 --> 00:20:16,880
on here if we're able to use that kudu

586
00:20:16,880 --> 00:20:19,760
interface is potentially using app

587
00:20:19,760 --> 00:20:22,799
services managed identities so an app

588
00:20:22,799 --> 00:20:24,559
service application that has a managed

589
00:20:24,559 --> 00:20:27,360
identity tied to it to access key vaults

590
00:20:27,360 --> 00:20:28,080
so

591
00:20:28,080 --> 00:20:30,000
our potential scenario here is let's say

592
00:20:30,000 --> 00:20:31,919
we're doing an application pen test

593
00:20:31,919 --> 00:20:34,480
against an app services application

594
00:20:34,480 --> 00:20:37,600
we get command execution or some way to

595
00:20:37,600 --> 00:20:41,200
pull a token out of the application

596
00:20:41,200 --> 00:20:43,440
and then utilizing that token we can

597
00:20:43,440 --> 00:20:46,320
potentially collect key vault contents

598
00:20:46,320 --> 00:20:49,280
as that managed identity so by hitting

599
00:20:49,280 --> 00:20:51,760
the metadata service for that app

600
00:20:51,760 --> 00:20:54,159
services application we're able to pull

601
00:20:54,159 --> 00:20:56,960
back a token we have to get token scoped

602
00:20:56,960 --> 00:20:59,520
for the management level and the key

603
00:20:59,520 --> 00:21:01,120
vault level we'll talk about some

604
00:21:01,120 --> 00:21:04,000
specifics later here as we go through uh

605
00:21:04,000 --> 00:21:06,320
some of the other content here but

606
00:21:06,320 --> 00:21:09,120
basically you scope out tokens for this

607
00:21:09,120 --> 00:21:11,600
and you can use the get ac key vault

608
00:21:11,600 --> 00:21:14,559
keys rest or secrets rest to use the

609
00:21:14,559 --> 00:21:16,880
rest apis to collect those out of the

610
00:21:16,880 --> 00:21:18,159
application

611
00:21:18,159 --> 00:21:19,520
so it is super handy because we do

612
00:21:19,520 --> 00:21:21,600
frequently see app services being

613
00:21:21,600 --> 00:21:23,840
configured with managed identities those

614
00:21:23,840 --> 00:21:26,320
identities have rights in an access poll

615
00:21:26,320 --> 00:21:28,240
policy and key vault and key vaults

616
00:21:28,240 --> 00:21:29,679
potentially storing sensitive

617
00:21:29,679 --> 00:21:32,880
information for the application

618
00:21:32,880 --> 00:21:33,840
so

619
00:21:33,840 --> 00:21:35,760
again this is pretty simple to dump all

620
00:21:35,760 --> 00:21:37,360
of this information

621
00:21:37,360 --> 00:21:38,960
we just list out all of the available

622
00:21:38,960 --> 00:21:41,120
app services apps and then for each app

623
00:21:41,120 --> 00:21:43,679
we just pull down the publishing profile

624
00:21:43,679 --> 00:21:45,840
we then parse the profiles for any

625
00:21:45,840 --> 00:21:47,440
credentials and return those back to the

626
00:21:47,440 --> 00:21:49,600
users forget az passwords it's pretty

627
00:21:49,600 --> 00:21:51,918
simple

628
00:21:52,799 --> 00:21:55,200
so next up is automation accounts it's

629
00:21:55,200 --> 00:21:57,520
one of my personal favorites within

630
00:21:57,520 --> 00:22:00,880
azure here but for automation accounts

631
00:22:00,880 --> 00:22:03,120
you've got a service that basically runs

632
00:22:03,120 --> 00:22:05,280
serverless code for you

633
00:22:05,280 --> 00:22:07,600
to automate management and other certain

634
00:22:07,600 --> 00:22:09,200
tasks that you would want to handle

635
00:22:09,200 --> 00:22:11,360
within an azure subscription we're

636
00:22:11,360 --> 00:22:13,280
seeing automation accounts do all sorts

637
00:22:13,280 --> 00:22:14,960
of different things in subscriptions

638
00:22:14,960 --> 00:22:17,760
that we're dealing with but primarily

639
00:22:17,760 --> 00:22:19,760
we see things like virtual machines

640
00:22:19,760 --> 00:22:21,919
being spun up or spun down in the azure

641
00:22:21,919 --> 00:22:23,440
environment for things like cost

642
00:22:23,440 --> 00:22:25,760
management or for update management

643
00:22:25,760 --> 00:22:28,159
applying updates to any machines that

644
00:22:28,159 --> 00:22:31,039
need updates in that azure virtual

645
00:22:31,039 --> 00:22:32,720
machine infrastructure

646
00:22:32,720 --> 00:22:34,640
so there's a lot of other things that

647
00:22:34,640 --> 00:22:36,720
you can integrate uh automation accounts

648
00:22:36,720 --> 00:22:38,640
to do but

649
00:22:38,640 --> 00:22:41,360
in order to utilize the automation

650
00:22:41,360 --> 00:22:43,840
accounts to do things in the

651
00:22:43,840 --> 00:22:46,159
subscription frequently we'll run into

652
00:22:46,159 --> 00:22:48,000
credentials that are tied to the

653
00:22:48,000 --> 00:22:49,760
automation account itself so these can

654
00:22:49,760 --> 00:22:51,760
either be clear text credentials that

655
00:22:51,760 --> 00:22:54,640
end up hard coded in a run book

656
00:22:54,640 --> 00:22:57,520
this is bad not a good practice but we

657
00:22:57,520 --> 00:22:59,919
do frequently run into it as a reader we

658
00:22:59,919 --> 00:23:01,919
can potentially read those run books

659
00:23:01,919 --> 00:23:03,919
with read-only access and get those

660
00:23:03,919 --> 00:23:05,679
credentials out of there

661
00:23:05,679 --> 00:23:07,360
platform level story credentials these

662
00:23:07,360 --> 00:23:09,760
are stored credentials that

663
00:23:09,760 --> 00:23:12,720
are in the automation account itself at

664
00:23:12,720 --> 00:23:14,400
the cloud platform level there's a

665
00:23:14,400 --> 00:23:15,840
section called credentials where you can

666
00:23:15,840 --> 00:23:17,360
store credentials in the automation

667
00:23:17,360 --> 00:23:18,799
account

668
00:23:18,799 --> 00:23:21,520
and then run as accounts that are

669
00:23:21,520 --> 00:23:24,400
tied to the automation account itself

670
00:23:24,400 --> 00:23:27,760
so as an owner of a subscription we can

671
00:23:27,760 --> 00:23:29,120
set an

672
00:23:29,120 --> 00:23:31,600
app registration that is tied to the

673
00:23:31,600 --> 00:23:33,520
automation account itself

674
00:23:33,520 --> 00:23:34,320
now

675
00:23:34,320 --> 00:23:36,799
this application or

676
00:23:36,799 --> 00:23:39,679
i guess service principle uh is then

677
00:23:39,679 --> 00:23:42,159
used as a run as account

678
00:23:42,159 --> 00:23:44,559
and that authenticates within the azure

679
00:23:44,559 --> 00:23:46,799
runbook itself with a certificate we can

680
00:23:46,799 --> 00:23:49,279
actually access and extract that

681
00:23:49,279 --> 00:23:51,520
credential using a runbook we'll show

682
00:23:51,520 --> 00:23:53,760
how we can do that in just a minute here

683
00:23:53,760 --> 00:23:56,400
that's super handy as the run as

684
00:23:56,400 --> 00:23:58,159
accounts are typically set up as a

685
00:23:58,159 --> 00:24:00,559
contributor or at least as a default

686
00:24:00,559 --> 00:24:02,640
configuration the run as account is a

687
00:24:02,640 --> 00:24:05,679
contributor on the subscription

688
00:24:05,679 --> 00:24:08,880
and then from a key vaults perspective

689
00:24:08,880 --> 00:24:10,400
if any key vaults are being called from

690
00:24:10,400 --> 00:24:12,080
the automation account typically being

691
00:24:12,080 --> 00:24:14,559
used with run as accounts we can

692
00:24:14,559 --> 00:24:16,400
potentially use that run as account to

693
00:24:16,400 --> 00:24:18,880
access the key vaults we'll talk about

694
00:24:18,880 --> 00:24:20,720
that in the slide here

695
00:24:20,720 --> 00:24:23,840
so uh doing the password

696
00:24:23,840 --> 00:24:26,799
dumping manually here we can utilize run

697
00:24:26,799 --> 00:24:28,880
books themselves we can view the run

698
00:24:28,880 --> 00:24:30,799
books very simply by hitting the view

699
00:24:30,799 --> 00:24:32,640
button and reviewing the source for the

700
00:24:32,640 --> 00:24:34,880
runs runbooks uh

701
00:24:34,880 --> 00:24:38,000
very very simple here

702
00:24:38,159 --> 00:24:40,159
then actually pulling out the stored

703
00:24:40,159 --> 00:24:42,000
credentials we have to get a little bit

704
00:24:42,000 --> 00:24:44,559
more complicated with our powershell

705
00:24:44,559 --> 00:24:46,559
code here so we can see in the

706
00:24:46,559 --> 00:24:48,480
screenshot here that we have two

707
00:24:48,480 --> 00:24:50,159
different sections for pulling out

708
00:24:50,159 --> 00:24:51,679
credentials the top one is for the

709
00:24:51,679 --> 00:24:54,000
stored credentials at the platform level

710
00:24:54,000 --> 00:24:55,440
the bottom is for the run as

711
00:24:55,440 --> 00:24:56,960
certificates now we don't need to go

712
00:24:56,960 --> 00:24:59,279
line by line but the core of it is the

713
00:24:59,279 --> 00:25:01,360
top section here we get the credential

714
00:25:01,360 --> 00:25:02,880
we cast that out to a username and

715
00:25:02,880 --> 00:25:04,480
password variable and then write that

716
00:25:04,480 --> 00:25:08,960
out to the output of the run book from a

717
00:25:08,960 --> 00:25:11,679
kind of manual perspective i

718
00:25:11,679 --> 00:25:13,520
definitely recommend just running this

719
00:25:13,520 --> 00:25:15,760
in the test pane itself if you've got

720
00:25:15,760 --> 00:25:17,279
contributor rights and the ability to

721
00:25:17,279 --> 00:25:19,200
write a run book i would just write a

722
00:25:19,200 --> 00:25:22,159
temporary run book run that in the test

723
00:25:22,159 --> 00:25:24,080
test pane which we'll see in the next

724
00:25:24,080 --> 00:25:25,279
slide here

725
00:25:25,279 --> 00:25:26,559
and

726
00:25:26,559 --> 00:25:28,640
look at the output there

727
00:25:28,640 --> 00:25:30,080
some of that will be logged within the

728
00:25:30,080 --> 00:25:32,080
logs itself but it won't be run as a job

729
00:25:32,080 --> 00:25:34,159
so the output won't be stored in jobs so

730
00:25:34,159 --> 00:25:36,480
it's a little bit more stealthy there

731
00:25:36,480 --> 00:25:38,400
with the run as certificate extraction

732
00:25:38,400 --> 00:25:39,760
here that's something we really don't

733
00:25:39,760 --> 00:25:42,240
need to dive too deep into here but

734
00:25:42,240 --> 00:25:44,000
essentially we get the certificate

735
00:25:44,000 --> 00:25:45,840
associated with the run as account we

736
00:25:45,840 --> 00:25:47,919
export that to a pfx file

737
00:25:47,919 --> 00:25:50,240
go base64 and then you can take that

738
00:25:50,240 --> 00:25:52,320
base64 and write that back out to a file

739
00:25:52,320 --> 00:25:54,559
on your end and then later use that for

740
00:25:54,559 --> 00:25:57,520
authentication as the app registration

741
00:25:57,520 --> 00:26:00,799
tied to that run as account

742
00:26:00,799 --> 00:26:02,480
so in the test pane here we can see up

743
00:26:02,480 --> 00:26:04,159
at the top we had test test as a

744
00:26:04,159 --> 00:26:06,480
credential and we can see the mii or the

745
00:26:06,480 --> 00:26:09,440
start of the base 64 certificate there

746
00:26:09,440 --> 00:26:11,600
out in the test pane now from a

747
00:26:11,600 --> 00:26:13,200
practicality standpoint you're probably

748
00:26:13,200 --> 00:26:14,880
looking at this oh i don't have to

749
00:26:14,880 --> 00:26:17,600
manually put in a runbook like this

750
00:26:17,600 --> 00:26:19,360
and deal with all of this so we've

751
00:26:19,360 --> 00:26:21,760
automated this within get ac passwords

752
00:26:21,760 --> 00:26:24,240
and also protected those credentials as

753
00:26:24,240 --> 00:26:26,799
we'll see in a moment

754
00:26:26,799 --> 00:26:28,960
so uh as i mentioned

755
00:26:28,960 --> 00:26:31,440
protecting the credentials here if we

756
00:26:31,440 --> 00:26:34,400
were to run an automation account

757
00:26:34,400 --> 00:26:36,799
run book and export

758
00:26:36,799 --> 00:26:39,200
usernames passwords anything sensitive

759
00:26:39,200 --> 00:26:41,120
from that automation account that could

760
00:26:41,120 --> 00:26:42,880
potentially be dumped out in clear text

761
00:26:42,880 --> 00:26:45,919
in the output for the automation account

762
00:26:45,919 --> 00:26:48,559
job so we run that run book you got

763
00:26:48,559 --> 00:26:50,240
clear text credentials in the output

764
00:26:50,240 --> 00:26:52,000
someone with reader permissions could

765
00:26:52,000 --> 00:26:53,840
read that jobs output

766
00:26:53,840 --> 00:26:54,880
and potentially get access to

767
00:26:54,880 --> 00:26:56,480
credentials they shouldn't have access

768
00:26:56,480 --> 00:26:58,960
to so as a pen tester we don't want to

769
00:26:58,960 --> 00:27:01,919
leave an environment worse than we

770
00:27:01,919 --> 00:27:04,320
showed up to it so we want to make sure

771
00:27:04,320 --> 00:27:05,840
that we're protecting that data in the

772
00:27:05,840 --> 00:27:07,440
output

773
00:27:07,440 --> 00:27:08,799
doesn't necessarily apply for the test

774
00:27:08,799 --> 00:27:10,880
pane as we talked about earlier so what

775
00:27:10,880 --> 00:27:13,200
we're going to do is encrypt that output

776
00:27:13,200 --> 00:27:15,200
with a certificate so that we don't have

777
00:27:15,200 --> 00:27:16,640
to worry about leaving clear text

778
00:27:16,640 --> 00:27:18,480
credentials in the output

779
00:27:18,480 --> 00:27:20,559
so from a microburst perspective we just

780
00:27:20,559 --> 00:27:22,720
generate assert locally upload that with

781
00:27:22,720 --> 00:27:25,520
malicious run books and then decrypt

782
00:27:25,520 --> 00:27:27,200
everything when it comes back down

783
00:27:27,200 --> 00:27:30,000
client side

784
00:27:30,559 --> 00:27:32,159
so uh

785
00:27:32,159 --> 00:27:33,520
one of the things i wanted to kind of

786
00:27:33,520 --> 00:27:35,440
touch on here that's kind of similar to

787
00:27:35,440 --> 00:27:37,679
what we talked about in the app services

788
00:27:37,679 --> 00:27:40,640
section is utilizing the run as accounts

789
00:27:40,640 --> 00:27:42,880
to get access to key vault so

790
00:27:42,880 --> 00:27:44,880
in a very similar method to what we

791
00:27:44,880 --> 00:27:46,640
talked about manage identities with app

792
00:27:46,640 --> 00:27:49,679
services we can use the run as accounts

793
00:27:49,679 --> 00:27:51,840
that may have key vault permissions to

794
00:27:51,840 --> 00:27:55,360
read keys and secrets out of a key vault

795
00:27:55,360 --> 00:27:57,520
we've written automation into microburst

796
00:27:57,520 --> 00:28:00,240
with the get ac key vaults automation

797
00:28:00,240 --> 00:28:02,799
to upload a malicious

798
00:28:02,799 --> 00:28:05,440
automation account run book that then

799
00:28:05,440 --> 00:28:07,039
lists all of the key vaults and pulls

800
00:28:07,039 --> 00:28:09,520
out any available keys certificates

801
00:28:09,520 --> 00:28:11,919
anything like that from the key vaults

802
00:28:11,919 --> 00:28:13,360
this was technically addressed by

803
00:28:13,360 --> 00:28:15,919
microsoft by a cde there were some

804
00:28:15,919 --> 00:28:17,760
default configurations associated with

805
00:28:17,760 --> 00:28:18,640
that

806
00:28:18,640 --> 00:28:20,320
we put out a blog post

807
00:28:20,320 --> 00:28:22,080
related to that that

808
00:28:22,080 --> 00:28:23,760
kind of goes into more detail it

809
00:28:23,760 --> 00:28:25,440
explains all of that stuff but we don't

810
00:28:25,440 --> 00:28:27,039
need to cover that here so something to

811
00:28:27,039 --> 00:28:28,240
keep in mind as you get access to

812
00:28:28,240 --> 00:28:29,760
automation accounts is you may be able

813
00:28:29,760 --> 00:28:31,840
to hit key vaults from that automation

814
00:28:31,840 --> 00:28:34,158
account

815
00:28:34,799 --> 00:28:37,679
so uh doing this with azpowershell

816
00:28:37,679 --> 00:28:39,679
certainly easier but this is one of

817
00:28:39,679 --> 00:28:42,080
those more active gatherings of

818
00:28:42,080 --> 00:28:43,679
credentials it's not like we're pulling

819
00:28:43,679 --> 00:28:46,080
down a single configuration here

820
00:28:46,080 --> 00:28:48,399
we're actually actively running run

821
00:28:48,399 --> 00:28:50,080
books in the automation account to pull

822
00:28:50,080 --> 00:28:51,279
out credentials

823
00:28:51,279 --> 00:28:52,640
so for each of the automation accounts

824
00:28:52,640 --> 00:28:53,600
we're just going to list out the

825
00:28:53,600 --> 00:28:56,159
available credentials the connections or

826
00:28:56,159 --> 00:28:58,159
run as accounts and then upload

827
00:28:58,159 --> 00:29:01,200
malicious run books typically with the

828
00:29:01,200 --> 00:29:03,279
get a z passwords we have everything

829
00:29:03,279 --> 00:29:05,279
randomly named for the runbooks so it'll

830
00:29:05,279 --> 00:29:07,200
be pretty easy to identify

831
00:29:07,200 --> 00:29:09,600
which runbooks are ours and that way we

832
00:29:09,600 --> 00:29:10,960
don't have to worry about conflicts with

833
00:29:10,960 --> 00:29:12,559
naming or getting confused with which

834
00:29:12,559 --> 00:29:14,080
runbook we're running

835
00:29:14,080 --> 00:29:16,559
in the subscription itself

836
00:29:16,559 --> 00:29:19,200
get the output from the job output

837
00:29:19,200 --> 00:29:21,120
delete the runbooks from the automation

838
00:29:21,120 --> 00:29:22,080
account

839
00:29:22,080 --> 00:29:24,559
and then create a local authentication

840
00:29:24,559 --> 00:29:26,399
script to utilize the run as

841
00:29:26,399 --> 00:29:28,559
certificates which we'll kind of see at

842
00:29:28,559 --> 00:29:30,720
the end of the demo here one quick note

843
00:29:30,720 --> 00:29:32,960
about running get ac passwords for

844
00:29:32,960 --> 00:29:35,200
automation accounts is

845
00:29:35,200 --> 00:29:37,840
avoid hitting control c to stop the

846
00:29:37,840 --> 00:29:40,159
powershell function midway through

847
00:29:40,159 --> 00:29:41,520
dumping credentials for automation

848
00:29:41,520 --> 00:29:44,480
accounts as we're uploading these run

849
00:29:44,480 --> 00:29:46,480
books to the automation account if we

850
00:29:46,480 --> 00:29:48,080
stop the function before we're able to

851
00:29:48,080 --> 00:29:50,880
delete the run book you end up having

852
00:29:50,880 --> 00:29:53,120
kind of orphaned run books up in the

853
00:29:53,120 --> 00:29:55,360
automation account that we need to go

854
00:29:55,360 --> 00:29:57,279
back and clean up after the fact again

855
00:29:57,279 --> 00:29:59,279
we don't want to leave the environment

856
00:29:59,279 --> 00:30:01,520
worse than we started so i want to make

857
00:30:01,520 --> 00:30:02,640
sure that we're cleaning up after

858
00:30:02,640 --> 00:30:05,039
ourselves in the automation accounts

859
00:30:05,039 --> 00:30:06,559
if your computer crashes or something

860
00:30:06,559 --> 00:30:09,760
else happens uh you know there's nothing

861
00:30:09,760 --> 00:30:11,120
that you can really do about that at

862
00:30:11,120 --> 00:30:13,600
that point otherwise go in and manually

863
00:30:13,600 --> 00:30:15,679
delete the runbooks at that point

864
00:30:15,679 --> 00:30:17,840
but something to look out for because

865
00:30:17,840 --> 00:30:19,600
i've definitely had that problem in the

866
00:30:19,600 --> 00:30:21,760
past when i thought this this runbook's

867
00:30:21,760 --> 00:30:24,240
never going to end and i've spent plenty

868
00:30:24,240 --> 00:30:26,559
of time waiting for those run books to

869
00:30:26,559 --> 00:30:31,120
complete so some to look out for there

870
00:30:31,279 --> 00:30:34,000
so moving on to storage accounts storage

871
00:30:34,000 --> 00:30:36,559
accounts are pretty simply named as for

872
00:30:36,559 --> 00:30:39,840
what they do but they're a file storage

873
00:30:39,840 --> 00:30:41,840
service in the azure cloud there's

874
00:30:41,840 --> 00:30:44,159
multiple different types of files and

875
00:30:44,159 --> 00:30:45,760
kind of areas that we have within the

876
00:30:45,760 --> 00:30:47,520
storage accounts themselves but at a

877
00:30:47,520 --> 00:30:50,000
high level we've got storage account

878
00:30:50,000 --> 00:30:52,480
keys that gain or allow us to gain

879
00:30:52,480 --> 00:30:53,840
access to the storage accounts

880
00:30:53,840 --> 00:30:55,279
themselves through things like the azure

881
00:30:55,279 --> 00:30:57,360
storage explorer and underneath that we

882
00:30:57,360 --> 00:30:59,840
can access other things like files cues

883
00:30:59,840 --> 00:31:02,080
tables blob storage anything like that

884
00:31:02,080 --> 00:31:04,320
in addition to that files themselves

885
00:31:04,320 --> 00:31:06,320
that are stored within the storage

886
00:31:06,320 --> 00:31:08,080
accounts may potentially contain

887
00:31:08,080 --> 00:31:10,320
credentials so with access to a storage

888
00:31:10,320 --> 00:31:12,240
account you may be able to pull out

889
00:31:12,240 --> 00:31:14,399
configuration files or read other

890
00:31:14,399 --> 00:31:16,960
sensitive information that might be in

891
00:31:16,960 --> 00:31:18,480
that storage account now this isn't

892
00:31:18,480 --> 00:31:19,679
really easy to automate and pull

893
00:31:19,679 --> 00:31:21,360
credentials out of so we'd recommend

894
00:31:21,360 --> 00:31:23,840
manually doing that just anyways uh

895
00:31:23,840 --> 00:31:26,000
typically requires contributor access to

896
00:31:26,000 --> 00:31:27,440
actually get access to the files

897
00:31:27,440 --> 00:31:29,200
themselves this kind of breaks down to

898
00:31:29,200 --> 00:31:30,960
the data plane management plane

899
00:31:30,960 --> 00:31:32,559
permissions and

900
00:31:32,559 --> 00:31:34,320
accessing the storage account keys but

901
00:31:34,320 --> 00:31:36,399
we don't need to dive too deep into that

902
00:31:36,399 --> 00:31:37,760
in terms of getting access to the

903
00:31:37,760 --> 00:31:40,240
storage account keys to actually load up

904
00:31:40,240 --> 00:31:42,399
something like azure storage explorer to

905
00:31:42,399 --> 00:31:44,240
gain access to the storage account

906
00:31:44,240 --> 00:31:45,919
they're available in the portal they're

907
00:31:45,919 --> 00:31:48,000
also really easy to rotate so if they're

908
00:31:48,000 --> 00:31:50,000
ever compromised or you just want to

909
00:31:50,000 --> 00:31:51,840
regularly rotate the key

910
00:31:51,840 --> 00:31:53,600
it's just that simple recycle button

911
00:31:53,600 --> 00:31:57,120
down there to rotate the key

912
00:31:57,919 --> 00:31:59,919
so one thing to note about storage

913
00:31:59,919 --> 00:32:02,720
accounts is that they are used by cloud

914
00:32:02,720 --> 00:32:04,559
shell and we've got a blog post linked

915
00:32:04,559 --> 00:32:06,080
down on the bottom here that really

916
00:32:06,080 --> 00:32:07,760
talks about all of the specifics about

917
00:32:07,760 --> 00:32:09,519
this attack but

918
00:32:09,519 --> 00:32:11,840
if you're utilizing cloud shell within

919
00:32:11,840 --> 00:32:13,440
azure there is potential that anyone

920
00:32:13,440 --> 00:32:15,840
with contributor access to the storage

921
00:32:15,840 --> 00:32:18,080
account associated with the cloud shell

922
00:32:18,080 --> 00:32:20,399
could potentially overwrite the image

923
00:32:20,399 --> 00:32:22,799
files that are mounted up in cloud shell

924
00:32:22,799 --> 00:32:25,600
to potentially run commands

925
00:32:25,600 --> 00:32:28,640
and gain access to another account

926
00:32:28,640 --> 00:32:30,799
within the subscription

927
00:32:30,799 --> 00:32:32,640
so if we have a global admin that's

928
00:32:32,640 --> 00:32:35,919
utilizing cloud shell and another user

929
00:32:35,919 --> 00:32:37,840
who is a contributor on that same

930
00:32:37,840 --> 00:32:39,679
subscription where the cloud shell files

931
00:32:39,679 --> 00:32:41,519
are being stored for that global admin

932
00:32:41,519 --> 00:32:43,919
that other contributor could potentially

933
00:32:43,919 --> 00:32:45,840
get access to the cloud shell for a

934
00:32:45,840 --> 00:32:47,519
global administrator now there's

935
00:32:47,519 --> 00:32:48,799
restrictions you can put in place to

936
00:32:48,799 --> 00:32:50,640
help protect those cloud shell files

937
00:32:50,640 --> 00:32:52,799
microsoft has some good recommendations

938
00:32:52,799 --> 00:32:54,960
as to how you can lock those down but in

939
00:32:54,960 --> 00:32:56,320
general we kind of recommend against

940
00:32:56,320 --> 00:32:58,080
using privileged accounts with cloud

941
00:32:58,080 --> 00:32:59,760
shell as that could potentially allow

942
00:32:59,760 --> 00:33:01,919
for privilege escalation so the process

943
00:33:01,919 --> 00:33:03,519
for that's pretty straightforward you

944
00:33:03,519 --> 00:33:06,399
get access to the img file for the cloud

945
00:33:06,399 --> 00:33:09,279
shell itself modify both bash and

946
00:33:09,279 --> 00:33:12,720
powershell startup files uh

947
00:33:12,720 --> 00:33:14,000
i would recommend doing both because you

948
00:33:14,000 --> 00:33:16,960
don't know necessarily which cloud shell

949
00:33:16,960 --> 00:33:18,720
a user is going to be using

950
00:33:18,720 --> 00:33:20,559
and once those startup files are

951
00:33:20,559 --> 00:33:22,880
modified you re-upload that to the file

952
00:33:22,880 --> 00:33:26,000
shared that hosts the cloud cloud shell

953
00:33:26,000 --> 00:33:28,159
files and then the next time that cloud

954
00:33:28,159 --> 00:33:30,080
shell is opened up commands are executed

955
00:33:30,080 --> 00:33:31,919
as that victim user

956
00:33:31,919 --> 00:33:33,760
so it's not necessarily the most

957
00:33:33,760 --> 00:33:35,919
practical attack in the book it does

958
00:33:35,919 --> 00:33:37,840
take a lot of time to download that five

959
00:33:37,840 --> 00:33:41,120
gigabyte file to modify that img file

960
00:33:41,120 --> 00:33:42,320
it's not a guarantee that that

961
00:33:42,320 --> 00:33:43,840
privileged account is going to log in

962
00:33:43,840 --> 00:33:45,519
with cloud shell you can potentially

963
00:33:45,519 --> 00:33:47,679
phish somebody with a link for the cloud

964
00:33:47,679 --> 00:33:49,120
shell

965
00:33:49,120 --> 00:33:51,200
url and get them to go visit the cloud

966
00:33:51,200 --> 00:33:53,360
shell it is a legitimate link and the

967
00:33:53,360 --> 00:33:54,960
second that they open that up that

968
00:33:54,960 --> 00:33:56,640
starts kicking off those startup scripts

969
00:33:56,640 --> 00:33:58,799
so you might have some look there but

970
00:33:58,799 --> 00:34:01,200
mileage may vary uh other recommendation

971
00:34:01,200 --> 00:34:03,440
there is those uh

972
00:34:03,440 --> 00:34:05,919
img files potentially can't contain

973
00:34:05,919 --> 00:34:07,760
sensitive files that you know maybe

974
00:34:07,760 --> 00:34:09,679
there's a setup script that's stored

975
00:34:09,679 --> 00:34:11,760
within cloud shell for that user

976
00:34:11,760 --> 00:34:13,679
definitely take a look at those files as

977
00:34:13,679 --> 00:34:14,960
well as you might be able to pull out

978
00:34:14,960 --> 00:34:17,520
credentials there

979
00:34:17,520 --> 00:34:19,440
so back to actually pulling passwords

980
00:34:19,440 --> 00:34:21,520
out of the service itself it's

981
00:34:21,520 --> 00:34:25,040
basically 10 lines and get a z password

982
00:34:25,040 --> 00:34:27,520
that's even being generous uh

983
00:34:27,520 --> 00:34:30,000
if i got rid of some extra line spaces

984
00:34:30,000 --> 00:34:31,119
anything like that we could probably cut

985
00:34:31,119 --> 00:34:33,040
it down to like three or four lines but

986
00:34:33,040 --> 00:34:34,719
you get the list of storage accounts and

987
00:34:34,719 --> 00:34:37,040
then for each account get the key

988
00:34:37,040 --> 00:34:39,359
two commands very simple

989
00:34:39,359 --> 00:34:41,440
it's really easy to take a look at and

990
00:34:41,440 --> 00:34:44,159
get ac passwords

991
00:34:44,159 --> 00:34:46,239
so the next thing that we want to cover

992
00:34:46,239 --> 00:34:49,040
is azure container registries so this

993
00:34:49,040 --> 00:34:51,040
service specifically stores container

994
00:34:51,040 --> 00:34:53,280
images for container related services in

995
00:34:53,280 --> 00:34:54,320
azure

996
00:34:54,320 --> 00:34:55,839
technically you could use the container

997
00:34:55,839 --> 00:34:58,400
registry outside of azure itself for

998
00:34:58,400 --> 00:35:00,640
storing container images for anything

999
00:35:00,640 --> 00:35:02,960
that you might utilize images for but in

1000
00:35:02,960 --> 00:35:05,920
general we mostly see azure registries

1001
00:35:05,920 --> 00:35:08,400
tied into things like aks or individual

1002
00:35:08,400 --> 00:35:11,200
container instances up in azure

1003
00:35:11,200 --> 00:35:13,920
from a passwords perspective you could

1004
00:35:13,920 --> 00:35:15,839
find credentials in the container images

1005
00:35:15,839 --> 00:35:17,839
themselves as a reader on the

1006
00:35:17,839 --> 00:35:19,200
subscription you should be able to pull

1007
00:35:19,200 --> 00:35:21,839
down any of the container images and

1008
00:35:21,839 --> 00:35:24,400
then parse those for credentials

1009
00:35:24,400 --> 00:35:27,040
it seems like a weird ability to have as

1010
00:35:27,040 --> 00:35:29,280
a reader you're actually able to connect

1011
00:35:29,280 --> 00:35:31,920
with docker up to the registry list out

1012
00:35:31,920 --> 00:35:33,920
pull down any of the available images

1013
00:35:33,920 --> 00:35:36,240
and we frequently see images containing

1014
00:35:36,240 --> 00:35:39,119
credentials service principle

1015
00:35:39,119 --> 00:35:41,200
passwords or certificates all sorts of

1016
00:35:41,200 --> 00:35:43,440
different things that could be utilized

1017
00:35:43,440 --> 00:35:46,160
by the container itself to act in the

1018
00:35:46,160 --> 00:35:47,839
active directory tenant or within the

1019
00:35:47,839 --> 00:35:49,680
subscription itself so definitely look

1020
00:35:49,680 --> 00:35:52,000
at those images if you've at a minimum

1021
00:35:52,000 --> 00:35:54,640
got reader access to an acr

1022
00:35:54,640 --> 00:35:56,560
additionally there are acr admin

1023
00:35:56,560 --> 00:35:58,160
credentials that can be exported for

1024
00:35:58,160 --> 00:35:59,440
more of a kind of persistence

1025
00:35:59,440 --> 00:36:01,280
perspective or

1026
00:36:01,280 --> 00:36:03,680
for just you know being an admin of the

1027
00:36:03,680 --> 00:36:05,839
container registry so we can see in the

1028
00:36:05,839 --> 00:36:07,760
screenshot here we've got a registry

1029
00:36:07,760 --> 00:36:09,920
named netspy we've enabled the admin

1030
00:36:09,920 --> 00:36:12,160
user we set the username to netspy and

1031
00:36:12,160 --> 00:36:14,160
we have passwords for that those are

1032
00:36:14,160 --> 00:36:15,839
long gone so don't worry about trying to

1033
00:36:15,839 --> 00:36:18,320
authenticate to those anybody

1034
00:36:18,320 --> 00:36:19,520
trying that

1035
00:36:19,520 --> 00:36:20,400
but

1036
00:36:20,400 --> 00:36:22,160
you know in terms of trying to automate

1037
00:36:22,160 --> 00:36:25,200
this it's not super easy to automate the

1038
00:36:25,200 --> 00:36:27,599
pulling down containers and manually or

1039
00:36:27,599 --> 00:36:30,000
i guess automatically parsing those

1040
00:36:30,000 --> 00:36:32,560
container images for any available

1041
00:36:32,560 --> 00:36:34,400
credentials but as we talked about that

1042
00:36:34,400 --> 00:36:36,720
only requires reader from an automation

1043
00:36:36,720 --> 00:36:38,960
standpoint for the acr credentials there

1044
00:36:38,960 --> 00:36:41,599
are specific commands to do that and

1045
00:36:41,599 --> 00:36:44,079
it's very simple alternatively these are

1046
00:36:44,079 --> 00:36:46,560
available in the portal

1047
00:36:46,560 --> 00:36:47,359
so

1048
00:36:47,359 --> 00:36:49,040
much like storage accounts here it's a

1049
00:36:49,040 --> 00:36:51,280
very straightforward get the list and

1050
00:36:51,280 --> 00:36:53,680
for each of the registries in the list

1051
00:36:53,680 --> 00:36:56,799
get the credentials for it

1052
00:36:57,440 --> 00:36:59,280
so one of the

1053
00:36:59,280 --> 00:37:01,440
supported services i guess through the

1054
00:37:01,440 --> 00:37:03,839
container registries is aks or azure

1055
00:37:03,839 --> 00:37:06,320
kubernetes services and this can contain

1056
00:37:06,320 --> 00:37:08,160
passwords in a couple of different spots

1057
00:37:08,160 --> 00:37:09,599
that we'll go over today

1058
00:37:09,599 --> 00:37:11,599
so the services itself runs container

1059
00:37:11,599 --> 00:37:14,240
container images within azure in a

1060
00:37:14,240 --> 00:37:16,000
kubernetes cluster that gets spun up

1061
00:37:16,000 --> 00:37:18,480
underneath the aks service

1062
00:37:18,480 --> 00:37:21,200
passwords could be in the virtual

1063
00:37:21,200 --> 00:37:22,720
machines that support the clusters

1064
00:37:22,720 --> 00:37:24,400
themselves we'll talk about how we can

1065
00:37:24,400 --> 00:37:26,480
extract those out of the clusters in a

1066
00:37:26,480 --> 00:37:27,599
minute here

1067
00:37:27,599 --> 00:37:30,720
because that's a a fairly active process

1068
00:37:30,720 --> 00:37:33,280
it's just not a manual grab something

1069
00:37:33,280 --> 00:37:35,280
and get the credentials we can either

1070
00:37:35,280 --> 00:37:37,680
get service prevent service principal

1071
00:37:37,680 --> 00:37:40,160
credentials with that in clear text

1072
00:37:40,160 --> 00:37:42,000
or a managed identity token that we can

1073
00:37:42,000 --> 00:37:45,680
utilize elsewhere with the rest apis

1074
00:37:45,680 --> 00:37:47,839
additionally aks admin credentials can

1075
00:37:47,839 --> 00:37:50,079
be exported for persistence from say a

1076
00:37:50,079 --> 00:37:52,960
cube ctl type perspective so that we can

1077
00:37:52,960 --> 00:37:54,880
run commands on the

1078
00:37:54,880 --> 00:37:57,200
clusters after the fact

1079
00:37:57,200 --> 00:38:00,400
be able to manage the aks clusters

1080
00:38:00,400 --> 00:38:02,160
with that as well

1081
00:38:02,160 --> 00:38:05,280
so doing this manually is kind of a pain

1082
00:38:05,280 --> 00:38:06,880
uh either for

1083
00:38:06,880 --> 00:38:07,920
uh

1084
00:38:07,920 --> 00:38:09,839
trying to get the

1085
00:38:09,839 --> 00:38:11,599
credentials out of the cluster itself or

1086
00:38:11,599 --> 00:38:13,520
the kube config files uh one kind of

1087
00:38:13,520 --> 00:38:15,599
handy trick for this uh that i wanted to

1088
00:38:15,599 --> 00:38:16,960
make mention of since we talked about

1089
00:38:16,960 --> 00:38:18,400
cloud shell previously

1090
00:38:18,400 --> 00:38:21,280
is if you do have access to either

1091
00:38:21,280 --> 00:38:23,599
the cloud shell files for another user

1092
00:38:23,599 --> 00:38:26,720
or access to a cloud shell itself and

1093
00:38:26,720 --> 00:38:28,480
contributor level access

1094
00:38:28,480 --> 00:38:30,560
you can actually use the get credentials

1095
00:38:30,560 --> 00:38:33,200
command with the azcli to get that kube

1096
00:38:33,200 --> 00:38:34,800
config file here

1097
00:38:34,800 --> 00:38:36,320
and then just cut that out from the

1098
00:38:36,320 --> 00:38:38,560
cloud shell and then copy that off to

1099
00:38:38,560 --> 00:38:41,280
another system to utilize for accessing

1100
00:38:41,280 --> 00:38:43,599
the cluster there if use the dash admin

1101
00:38:43,599 --> 00:38:45,440
flag for that command that we see in the

1102
00:38:45,440 --> 00:38:47,359
screenshot at the top you can get the

1103
00:38:47,359 --> 00:38:49,839
cluster admin credentials

1104
00:38:49,839 --> 00:38:50,960
it's not

1105
00:38:50,960 --> 00:38:53,119
the easiest thing to do it's

1106
00:38:53,119 --> 00:38:54,880
kind of a pain and it takes a couple

1107
00:38:54,880 --> 00:38:56,880
extra steps i honestly just recommend

1108
00:38:56,880 --> 00:38:59,119
using get ac passwords if the coupe

1109
00:38:59,119 --> 00:39:01,280
config files are what you're going after

1110
00:39:01,280 --> 00:39:02,320
here

1111
00:39:02,320 --> 00:39:03,200
but

1112
00:39:03,200 --> 00:39:04,400
it is an option if that's something you

1113
00:39:04,400 --> 00:39:06,800
want to do

1114
00:39:06,800 --> 00:39:10,000
so from an automation perspective we can

1115
00:39:10,000 --> 00:39:13,280
utilize the getaz aks aks cluster

1116
00:39:13,280 --> 00:39:15,520
command to list out all of the clusters

1117
00:39:15,520 --> 00:39:18,480
and then for each of those clusters

1118
00:39:18,480 --> 00:39:20,720
we actually need to use the rest apis

1119
00:39:20,720 --> 00:39:22,640
themselves to get the kube config files

1120
00:39:22,640 --> 00:39:24,640
that we just talked about

1121
00:39:24,640 --> 00:39:26,960
there's not really good support within

1122
00:39:26,960 --> 00:39:29,760
the az powershell commandlets to pull

1123
00:39:29,760 --> 00:39:32,880
out those configuration files

1124
00:39:32,880 --> 00:39:34,880
uh the easiest way that i found was

1125
00:39:34,880 --> 00:39:37,760
actually just to use the getaz access

1126
00:39:37,760 --> 00:39:38,880
token

1127
00:39:38,880 --> 00:39:41,280
from the az powershell commandlets to

1128
00:39:41,280 --> 00:39:44,400
pull down a rest api token to then just

1129
00:39:44,400 --> 00:39:46,000
reach out to the rest apis and grab

1130
00:39:46,000 --> 00:39:47,920
those cubeconfig files

1131
00:39:47,920 --> 00:39:50,480
so it's kind of branching out of our our

1132
00:39:50,480 --> 00:39:53,040
standard practice with the getaz

1133
00:39:53,040 --> 00:39:55,280
passwords where we're not strictly just

1134
00:39:55,280 --> 00:39:57,520
using the az powershell commandlets but

1135
00:39:57,520 --> 00:39:59,040
we're kind of using them and using the

1136
00:39:59,040 --> 00:40:01,520
rest apis as well

1137
00:40:01,520 --> 00:40:04,160
so if the cluster itself is configured

1138
00:40:04,160 --> 00:40:06,240
with a service principle

1139
00:40:06,240 --> 00:40:08,560
we can actually access those clear text

1140
00:40:08,560 --> 00:40:11,440
credentials in the azure.json file under

1141
00:40:11,440 --> 00:40:13,839
the etsy kubernetes folder

1142
00:40:13,839 --> 00:40:15,359
and uh

1143
00:40:15,359 --> 00:40:17,599
that one's really interesting so with

1144
00:40:17,599 --> 00:40:19,280
the cluster itself there are virtual

1145
00:40:19,280 --> 00:40:21,599
machine scale sets that support that

1146
00:40:21,599 --> 00:40:23,920
cluster those are created into a special

1147
00:40:23,920 --> 00:40:26,160
resource group that's named after

1148
00:40:26,160 --> 00:40:27,680
the cluster itself and the resource

1149
00:40:27,680 --> 00:40:29,760
group that the cluster is deployed into

1150
00:40:29,760 --> 00:40:32,240
but it's pretty easy to identify that

1151
00:40:32,240 --> 00:40:33,200
from

1152
00:40:33,200 --> 00:40:34,319
the

1153
00:40:34,319 --> 00:40:36,720
az powershell commandlets and identify

1154
00:40:36,720 --> 00:40:39,839
where that virtual machine scale set is

1155
00:40:39,839 --> 00:40:41,920
so by using the

1156
00:40:41,920 --> 00:40:43,680
run command feature for the virtual

1157
00:40:43,680 --> 00:40:45,599
machine scale set we can just issue a

1158
00:40:45,599 --> 00:40:48,400
cat command for the azure.json file read

1159
00:40:48,400 --> 00:40:50,079
out those clear text credentials in the

1160
00:40:50,079 --> 00:40:53,119
output of that and then get access to

1161
00:40:53,119 --> 00:40:55,040
the service principal credentials

1162
00:40:55,040 --> 00:40:57,760
alternatively if that cluster is

1163
00:40:57,760 --> 00:41:00,480
utilizing a managed identity instead we

1164
00:41:00,480 --> 00:41:03,599
can use the metadata service from the

1165
00:41:03,599 --> 00:41:06,720
cluster and using that same

1166
00:41:06,720 --> 00:41:09,520
azvm ss vm run command

1167
00:41:09,520 --> 00:41:10,640
we can

1168
00:41:10,640 --> 00:41:13,040
ping the metadata service get back a

1169
00:41:13,040 --> 00:41:15,119
managed identity token and then start

1170
00:41:15,119 --> 00:41:16,960
going from there

1171
00:41:16,960 --> 00:41:20,079
so a quick demo here we have a recording

1172
00:41:20,079 --> 00:41:22,000
for a recording but we can see at the

1173
00:41:22,000 --> 00:41:23,680
top here we've imported the microburst

1174
00:41:23,680 --> 00:41:25,839
modules that include the get az

1175
00:41:25,839 --> 00:41:27,440
passwords function

1176
00:41:27,440 --> 00:41:29,839
we recommend using the verbose flag here

1177
00:41:29,839 --> 00:41:31,920
and we're also using modify policies and

1178
00:41:31,920 --> 00:41:34,160
export certificates so that we'll modify

1179
00:41:34,160 --> 00:41:35,040
any

1180
00:41:35,040 --> 00:41:36,480
key vault policies that we need to

1181
00:41:36,480 --> 00:41:38,880
modify to gain access to a key vault and

1182
00:41:38,880 --> 00:41:40,880
then any certificates that are in the

1183
00:41:40,880 --> 00:41:43,599
key vault will write out two pfx files

1184
00:41:43,599 --> 00:41:45,680
in the directory that we're running

1185
00:41:45,680 --> 00:41:46,800
the

1186
00:41:46,800 --> 00:41:48,640
function from so we can see that we're

1187
00:41:48,640 --> 00:41:50,720
getting key vault items here app

1188
00:41:50,720 --> 00:41:53,280
services configuration some container

1189
00:41:53,280 --> 00:41:55,280
registry credentials storage account

1190
00:41:55,280 --> 00:41:56,640
keys

1191
00:41:56,640 --> 00:41:59,119
automation accounts are running the run

1192
00:41:59,119 --> 00:42:02,400
as certificate gathering

1193
00:42:02,400 --> 00:42:04,319
let's see here what else

1194
00:42:04,319 --> 00:42:06,000
cosmos db which we didn't really talk

1195
00:42:06,000 --> 00:42:07,839
about but that one's super basic we

1196
00:42:07,839 --> 00:42:10,000
don't need to dive too far in depth we

1197
00:42:10,000 --> 00:42:12,000
can see here we've got a pfx file along

1198
00:42:12,000 --> 00:42:14,560
with the azure run as connection ps1

1199
00:42:14,560 --> 00:42:16,240
file that we can use to authenticate as

1200
00:42:16,240 --> 00:42:17,760
that run as account

1201
00:42:17,760 --> 00:42:19,920
and we exported all of this to out grid

1202
00:42:19,920 --> 00:42:22,560
view i do recommend using this or

1203
00:42:22,560 --> 00:42:25,280
outputting everything to an exported csv

1204
00:42:25,280 --> 00:42:27,119
within powershell so that you have a

1205
00:42:27,119 --> 00:42:29,599
little bit more persistent file storage

1206
00:42:29,599 --> 00:42:31,680
of those credentials if you need that

1207
00:42:31,680 --> 00:42:33,520
but outputting them out to grid view

1208
00:42:33,520 --> 00:42:35,520
here is also pretty handy for just kind

1209
00:42:35,520 --> 00:42:36,640
of quick review of all of the

1210
00:42:36,640 --> 00:42:38,480
credentials we have access to

1211
00:42:38,480 --> 00:42:39,680
so we're going to scroll through the top

1212
00:42:39,680 --> 00:42:41,760
ones pretty quick here but we've got all

1213
00:42:41,760 --> 00:42:43,520
of the credentials that we talked about

1214
00:42:43,520 --> 00:42:45,760
during the slides here and

1215
00:42:45,760 --> 00:42:48,319
as we're starting up the demo here

1216
00:42:48,319 --> 00:42:49,839
important things down here at the bottom

1217
00:42:49,839 --> 00:42:51,599
we've got the aks cluster service

1218
00:42:51,599 --> 00:42:53,520
principle where we can see the client

1219
00:42:53,520 --> 00:42:55,280
secret it's a little truncated here but

1220
00:42:55,280 --> 00:42:57,119
we have the client id that's tied to

1221
00:42:57,119 --> 00:42:58,880
that as well so you can authenticate as

1222
00:42:58,880 --> 00:43:00,400
that service principle

1223
00:43:00,400 --> 00:43:03,520
and a handful of other credentials so

1224
00:43:03,520 --> 00:43:04,640
this entire

1225
00:43:04,640 --> 00:43:07,200
entire environment has been burned down

1226
00:43:07,200 --> 00:43:09,040
so uh none of these credentials should

1227
00:43:09,040 --> 00:43:10,480
work

1228
00:43:10,480 --> 00:43:11,200
so

1229
00:43:11,200 --> 00:43:14,000
no need trying them but after i recorded

1230
00:43:14,000 --> 00:43:16,240
this uh recording here

1231
00:43:16,240 --> 00:43:18,079
immediately deleted everything in that

1232
00:43:18,079 --> 00:43:20,640
subscription and changed any existing or

1233
00:43:20,640 --> 00:43:22,160
deleted any existing credentials like

1234
00:43:22,160 --> 00:43:24,960
the service principle

1235
00:43:24,960 --> 00:43:27,280
so a final note here uh now that we

1236
00:43:27,280 --> 00:43:29,520
understand how to utilize get ac

1237
00:43:29,520 --> 00:43:31,359
passwords wanted to talk about a

1238
00:43:31,359 --> 00:43:33,440
privilege escalation opportunity that's

1239
00:43:33,440 --> 00:43:37,599
in one of the azure default roles

1240
00:43:37,599 --> 00:43:40,400
so the log analytics contributor role is

1241
00:43:40,400 --> 00:43:42,720
something that we frequently see for

1242
00:43:42,720 --> 00:43:45,440
users that need access to the log

1243
00:43:45,440 --> 00:43:48,400
analytics workspaces i need to say

1244
00:43:48,400 --> 00:43:49,599
modify

1245
00:43:49,599 --> 00:43:50,880
any

1246
00:43:50,880 --> 00:43:53,359
parsing of those log analytics

1247
00:43:53,359 --> 00:43:55,839
items it allows you to read monitoring

1248
00:43:55,839 --> 00:43:58,160
data edit monitoring senate settings

1249
00:43:58,160 --> 00:43:59,599
anything like that

1250
00:43:59,599 --> 00:44:00,400
so

1251
00:44:00,400 --> 00:44:02,640
as part of that the

1252
00:44:02,640 --> 00:44:05,440
role itself has automation account star

1253
00:44:05,440 --> 00:44:06,800
permissions

1254
00:44:06,800 --> 00:44:09,200
for the actions on wherever it's applied

1255
00:44:09,200 --> 00:44:10,800
we typically see this applied at the

1256
00:44:10,800 --> 00:44:12,319
subscription level

1257
00:44:12,319 --> 00:44:14,319
so uh one thing to keep in mind with the

1258
00:44:14,319 --> 00:44:15,920
automation accounts is by default those

1259
00:44:15,920 --> 00:44:19,440
run as accounts are contributors on the

1260
00:44:19,440 --> 00:44:21,920
subscription and as a log analytics

1261
00:44:21,920 --> 00:44:25,440
contributor it's a slightly limited

1262
00:44:25,440 --> 00:44:28,160
uh contributor role so it's really more

1263
00:44:28,160 --> 00:44:30,960
focused on the log analytics services we

1264
00:44:30,960 --> 00:44:32,480
see here things like virtual machine

1265
00:44:32,480 --> 00:44:34,000
extensions you have

1266
00:44:34,000 --> 00:44:36,160
some options there you can list keys for

1267
00:44:36,160 --> 00:44:37,200
storage accounts but it's not

1268
00:44:37,200 --> 00:44:39,440
necessarily full

1269
00:44:39,440 --> 00:44:41,280
contributor rights that you would

1270
00:44:41,280 --> 00:44:44,000
typically see for a contributor

1271
00:44:44,000 --> 00:44:45,200
so uh

1272
00:44:45,200 --> 00:44:47,200
using that log analytics contributor

1273
00:44:47,200 --> 00:44:49,200
role we can use the automation account

1274
00:44:49,200 --> 00:44:50,319
functionality that we talked about

1275
00:44:50,319 --> 00:44:52,480
earlier to get access to that

1276
00:44:52,480 --> 00:44:54,720
contributor run as account now it's kind

1277
00:44:54,720 --> 00:44:57,040
of a minor escalation here

1278
00:44:57,040 --> 00:44:59,040
but it does allow you to move from log

1279
00:44:59,040 --> 00:45:01,040
analytics contributor up to full

1280
00:45:01,040 --> 00:45:03,440
subscription level contributor microsoft

1281
00:45:03,440 --> 00:45:05,040
actually recently addressed this in

1282
00:45:05,040 --> 00:45:07,119
their documentation they intend on

1283
00:45:07,119 --> 00:45:09,359
removing the automation account rights

1284
00:45:09,359 --> 00:45:11,760
for the log analytics contributor role i

1285
00:45:11,760 --> 00:45:13,839
actually recommend utilizing a custom

1286
00:45:13,839 --> 00:45:16,640
role to basically apply any permissions

1287
00:45:16,640 --> 00:45:18,560
that you might need to for specific

1288
00:45:18,560 --> 00:45:21,119
users in that subscription

1289
00:45:21,119 --> 00:45:23,119
so uh once we do have that run as a

1290
00:45:23,119 --> 00:45:25,200
certificate we can then authenticate as

1291
00:45:25,200 --> 00:45:26,000
that

1292
00:45:26,000 --> 00:45:28,720
full contributor as the run as account

1293
00:45:28,720 --> 00:45:30,800
and that can be super handy to

1294
00:45:30,800 --> 00:45:32,880
potentially escalate privileges here

1295
00:45:32,880 --> 00:45:34,560
so uh given that it's not fully

1296
00:45:34,560 --> 00:45:36,560
addressed in the role yet i assume that

1297
00:45:36,560 --> 00:45:38,000
it might be viable for a little bit

1298
00:45:38,000 --> 00:45:39,359
longer here but i'm guessing that

1299
00:45:39,359 --> 00:45:41,040
microsoft's going to fully remove those

1300
00:45:41,040 --> 00:45:43,280
rights relatively soon here so something

1301
00:45:43,280 --> 00:45:46,240
to keep an eye out for

1302
00:45:46,240 --> 00:45:48,880
so uh well we do questions here this is

1303
00:45:48,880 --> 00:45:51,920
uh a recording but uh we'll leave

1304
00:45:51,920 --> 00:45:54,240
the information slide up at the end here

1305
00:45:54,240 --> 00:45:55,760
before we get to the questions here i

1306
00:45:55,760 --> 00:45:57,760
just wanted to do a couple of thanks

1307
00:45:57,760 --> 00:46:00,160
here uh for the microburst contributors

1308
00:46:00,160 --> 00:46:03,280
jake josh thomas we've had a handful of

1309
00:46:03,280 --> 00:46:04,720
people that have contributed to the

1310
00:46:04,720 --> 00:46:07,040
microburst toolset i want to say thanks

1311
00:46:07,040 --> 00:46:08,880
to all of those folks and their

1312
00:46:08,880 --> 00:46:10,720
contributions we've talked about several

1313
00:46:10,720 --> 00:46:12,880
of the functions they've all helped on

1314
00:46:12,880 --> 00:46:15,599
earlier here and uh slide design

1315
00:46:15,599 --> 00:46:17,520
assistance from sofia and that's by

1316
00:46:17,520 --> 00:46:19,119
thank you for the microburst with a

1317
00:46:19,119 --> 00:46:21,040
knife i really like that

1318
00:46:21,040 --> 00:46:23,040
and then uh for that basic auth kind of

1319
00:46:23,040 --> 00:46:26,800
login hack for app services uh mcomy on

1320
00:46:26,800 --> 00:46:29,359
twitter same person that does storm

1321
00:46:29,359 --> 00:46:31,680
spotter definitely go check that out

1322
00:46:31,680 --> 00:46:34,640
and uh yeah thanks everybody

1323
00:46:34,640 --> 00:46:36,000
so here's some additional information

1324
00:46:36,000 --> 00:46:37,200
here we'll leave that up during the

1325
00:46:37,200 --> 00:46:39,520
questions hopefully and

1326
00:46:39,520 --> 00:46:41,359
if you want to access microburst we've

1327
00:46:41,359 --> 00:46:43,599
got the link here the netspy blogs also

1328
00:46:43,599 --> 00:46:45,680
available and some specific get a z

1329
00:46:45,680 --> 00:46:48,319
passwords blogs these slides themselves

1330
00:46:48,319 --> 00:46:50,240
will be linked out for my twitter i'll

1331
00:46:50,240 --> 00:46:52,079
most likely host those up in azure as

1332
00:46:52,079 --> 00:46:53,599
pdf

1333
00:46:53,599 --> 00:46:56,599
thanks

