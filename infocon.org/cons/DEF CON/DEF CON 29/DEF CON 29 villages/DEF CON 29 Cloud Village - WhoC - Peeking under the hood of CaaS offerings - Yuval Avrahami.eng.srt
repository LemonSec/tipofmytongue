1
00:00:00,240 --> 00:00:01,120
thanks

2
00:00:01,120 --> 00:00:02,879
thanks and thanks

3
00:00:02,879 --> 00:00:04,960
everyone for joining i am your valencia

4
00:00:04,960 --> 00:00:06,480
i'm a security researcher at palo alto

5
00:00:06,480 --> 00:00:08,960
networks uh well when me and the rest of

6
00:00:08,960 --> 00:00:10,880
my team we look into the security of the

7
00:00:10,880 --> 00:00:13,840
cloud and containers uh specifically and

8
00:00:13,840 --> 00:00:15,839
i'm very excited today to be presenting

9
00:00:15,839 --> 00:00:17,039
you husi

10
00:00:17,039 --> 00:00:19,119
which is a tool i wrote it's actually a

11
00:00:19,119 --> 00:00:21,520
container image that can be used to look

12
00:00:21,520 --> 00:00:23,519
under the hood of container as a service

13
00:00:23,519 --> 00:00:25,519
platforms so

14
00:00:25,519 --> 00:00:27,279
let's start off with by going over the

15
00:00:27,279 --> 00:00:30,080
agenda so we'll start off by talking

16
00:00:30,080 --> 00:00:31,679
about what our container as a service

17
00:00:31,679 --> 00:00:33,840
platforms are and why are they

18
00:00:33,840 --> 00:00:35,120
interesting

19
00:00:35,120 --> 00:00:38,000
we'll then talk about hussy what it does

20
00:00:38,000 --> 00:00:40,800
and how it does it

21
00:00:40,800 --> 00:00:43,360
then i'll show a quick demo and will go

22
00:00:43,360 --> 00:00:45,840
over into the low levels of the

23
00:00:45,840 --> 00:00:47,520
implementations

24
00:00:47,520 --> 00:00:49,440
and finally i'll discuss some of the

25
00:00:49,440 --> 00:00:51,680
findings that i was able to

26
00:00:51,680 --> 00:00:54,079
see with hussy

27
00:00:54,079 --> 00:00:56,399
and we'll wrap it up with some questions

28
00:00:56,399 --> 00:00:58,320
so let's start with container as a

29
00:00:58,320 --> 00:01:01,039
service so you probably heard about some

30
00:01:01,039 --> 00:01:02,399
of the

31
00:01:02,399 --> 00:01:04,000
containers and service platforms out

32
00:01:04,000 --> 00:01:06,159
there you have aws far gate azure

33
00:01:06,159 --> 00:01:08,799
container instances google cloud run and

34
00:01:08,799 --> 00:01:11,520
then more recently ibm code engine

35
00:01:11,520 --> 00:01:13,200
and those platforms are really a way to

36
00:01:13,200 --> 00:01:15,600
run serverless containers the way for

37
00:01:15,600 --> 00:01:17,360
you to take container

38
00:01:17,360 --> 00:01:19,439
just upload it to the cloud and have it

39
00:01:19,439 --> 00:01:22,000
process events scale up and scale down

40
00:01:22,000 --> 00:01:23,920
according to demand and it's really a

41
00:01:23,920 --> 00:01:26,000
way to you know run your services

42
00:01:26,000 --> 00:01:28,720
without managing on or worrying about

43
00:01:28,720 --> 00:01:31,040
the underlying infrastructures uh

44
00:01:31,040 --> 00:01:32,640
managing the underlying servers or

45
00:01:32,640 --> 00:01:34,479
managing the underlying nodes

46
00:01:34,479 --> 00:01:37,280
which is a really great way uh

47
00:01:37,280 --> 00:01:38,960
to you know

48
00:01:38,960 --> 00:01:41,439
it's really a way to improve your ease

49
00:01:41,439 --> 00:01:43,680
of use of those platforms

50
00:01:43,680 --> 00:01:44,560
but

51
00:01:44,560 --> 00:01:46,960
on the other hand without management you

52
00:01:46,960 --> 00:01:49,520
really have no visibility into how your

53
00:01:49,520 --> 00:01:52,320
containers run on the cloud

54
00:01:52,320 --> 00:01:53,119
and

55
00:01:53,119 --> 00:01:55,040
that brings the question can you really

56
00:01:55,040 --> 00:01:57,040
trust container as a service platforms

57
00:01:57,040 --> 00:01:58,560
with your containers

58
00:01:58,560 --> 00:02:00,159
so

59
00:02:00,159 --> 00:02:03,119
what could be an issue well container as

60
00:02:03,119 --> 00:02:05,520
a service platform like you know every

61
00:02:05,520 --> 00:02:07,200
public cloud offering

62
00:02:07,200 --> 00:02:10,000
it runs your workloads alongside other

63
00:02:10,000 --> 00:02:12,560
customers workloads right so you need to

64
00:02:12,560 --> 00:02:14,319
trust

65
00:02:14,319 --> 00:02:17,520
the platform to segregate your workloads

66
00:02:17,520 --> 00:02:19,840
from other customers workloads because

67
00:02:19,840 --> 00:02:22,400
there may be a malicious customer but

68
00:02:22,400 --> 00:02:24,400
with container as a service offerings

69
00:02:24,400 --> 00:02:27,200
you really have almost no visibility

70
00:02:27,200 --> 00:02:28,959
into how your container run you just

71
00:02:28,959 --> 00:02:31,360
upload your container image it receives

72
00:02:31,360 --> 00:02:34,400
some you know http endpoint

73
00:02:34,400 --> 00:02:36,560
but without beside that you don't know

74
00:02:36,560 --> 00:02:38,640
you know how is the cloud provided how

75
00:02:38,640 --> 00:02:41,519
is the cloud provider protecting

76
00:02:41,519 --> 00:02:42,959
your workloads

77
00:02:42,959 --> 00:02:45,200
and that's really what hussey

78
00:02:45,200 --> 00:02:47,519
tries to do so the motivation is really

79
00:02:47,519 --> 00:02:50,160
to gain visibility into how container as

80
00:02:50,160 --> 00:02:53,280
a service platforms run our containers

81
00:02:53,280 --> 00:02:55,280
and the way using russia does it it's

82
00:02:55,280 --> 00:02:57,519
really a container image that upon

83
00:02:57,519 --> 00:03:00,560
execution exfiltrates the underlying

84
00:03:00,560 --> 00:03:02,879
host container runtime to a remote

85
00:03:02,879 --> 00:03:05,680
server and it actually sends the actual

86
00:03:05,680 --> 00:03:08,400
binary and you might see something

87
00:03:08,400 --> 00:03:10,319
pretty interesting that you have a

88
00:03:10,319 --> 00:03:12,959
container that reads a file from the

89
00:03:12,959 --> 00:03:15,599
host the container runtime so we'll get

90
00:03:15,599 --> 00:03:19,280
to how hussey does that in just a bit

91
00:03:19,280 --> 00:03:21,840
but let's start off with by seeing a

92
00:03:21,840 --> 00:03:23,120
demo

93
00:03:23,120 --> 00:03:24,400
so

94
00:03:24,400 --> 00:03:27,280
what i have here

95
00:03:27,519 --> 00:03:29,599
is a file server

96
00:03:29,599 --> 00:03:32,560
that will receive the runtime and i'm

97
00:03:32,560 --> 00:03:34,959
going

98
00:03:37,440 --> 00:03:40,239
to use ibm code engine which is a class

99
00:03:40,239 --> 00:03:42,640
platform

100
00:03:43,760 --> 00:03:45,040
so first i'm

101
00:03:45,040 --> 00:03:47,200
creating a job template

102
00:03:47,200 --> 00:03:49,760
and it uses the hussy container image as

103
00:03:49,760 --> 00:03:51,519
you can see

104
00:03:51,519 --> 00:03:53,920
and now

105
00:03:53,920 --> 00:03:56,560
i'm going to deploy the juse container

106
00:03:56,560 --> 00:03:59,360
to ibm cloud and have it run it in the

107
00:03:59,360 --> 00:04:02,400
container as a service platform

108
00:04:02,400 --> 00:04:03,360
so

109
00:04:03,360 --> 00:04:05,599
this is a live demo so hopefully it will

110
00:04:05,599 --> 00:04:07,680
work

111
00:04:07,680 --> 00:04:09,760
okay so the container is just now

112
00:04:09,760 --> 00:04:11,360
uploaded and you can see that the file

113
00:04:11,360 --> 00:04:12,319
server

114
00:04:12,319 --> 00:04:15,360
receives the cell some file

115
00:04:15,360 --> 00:04:18,320
and we just wait up it finished and if

116
00:04:18,320 --> 00:04:22,560
we take a look at the file that we got

117
00:04:23,840 --> 00:04:25,919
we can see that we got

118
00:04:25,919 --> 00:04:26,960
ransi

119
00:04:26,960 --> 00:04:28,880
which is the industry standard container

120
00:04:28,880 --> 00:04:31,360
runtime so this is the version that is

121
00:04:31,360 --> 00:04:32,880
used

122
00:04:32,880 --> 00:04:35,199
in ibm code engine

123
00:04:35,199 --> 00:04:36,160
and

124
00:04:36,160 --> 00:04:38,320
that's the actual binary

125
00:04:38,320 --> 00:04:40,080
you can see that it's a go binary so

126
00:04:40,080 --> 00:04:41,360
it's pretty large

127
00:04:41,360 --> 00:04:43,759
so that's very very cool

128
00:04:43,759 --> 00:04:45,840
in my opinion at least

129
00:04:45,840 --> 00:04:46,720
and

130
00:04:46,720 --> 00:04:49,280
let's continue

131
00:04:49,280 --> 00:04:51,040
and talk about what we expect to find

132
00:04:51,040 --> 00:04:53,360
with this tool just before we talk about

133
00:04:53,360 --> 00:04:56,320
the implementation so like we saw with

134
00:04:56,320 --> 00:04:58,400
ibm code engine

135
00:04:58,400 --> 00:05:00,400
and we can expect a lot of rantsy right

136
00:05:00,400 --> 00:05:02,800
ranci is the industry standard container

137
00:05:02,800 --> 00:05:04,960
runtime so we can expect to see a lot of

138
00:05:04,960 --> 00:05:05,680
it

139
00:05:05,680 --> 00:05:07,919
we might see some old and vulnerable

140
00:05:07,919 --> 00:05:09,520
rancid version

141
00:05:09,520 --> 00:05:12,000
we might see some custom changes that

142
00:05:12,000 --> 00:05:14,560
cloud provider made to valena to vanilla

143
00:05:14,560 --> 00:05:16,880
rancid and we might even see other

144
00:05:16,880 --> 00:05:19,199
runtimes maybe proprietary runtimes you

145
00:05:19,199 --> 00:05:20,720
really can't know

146
00:05:20,720 --> 00:05:22,800
and

147
00:05:22,800 --> 00:05:25,280
let's continue we talk to talk about how

148
00:05:25,280 --> 00:05:28,160
is who's implemented so hussy basically

149
00:05:28,160 --> 00:05:30,720
follows two steps the first step is to

150
00:05:30,720 --> 00:05:33,280
trick the runtime to execute itself

151
00:05:33,280 --> 00:05:35,520
inside the container and the second step

152
00:05:35,520 --> 00:05:37,759
is to have someone in the container

153
00:05:37,759 --> 00:05:41,120
reads the random binary from proc pid

154
00:05:41,120 --> 00:05:43,440
exit and send it to a remote server

155
00:05:43,440 --> 00:05:46,240
so if that sounds a little complex right

156
00:05:46,240 --> 00:05:49,120
now let's break it down step by step

157
00:05:49,120 --> 00:05:51,120
so the first step is to trick the

158
00:05:51,120 --> 00:05:54,080
runtime into executing it into executing

159
00:05:54,080 --> 00:05:56,160
itself inside the container

160
00:05:56,160 --> 00:05:58,479
so how do we do it well it's pretty

161
00:05:58,479 --> 00:06:00,080
simple that's the docker file of the

162
00:06:00,080 --> 00:06:02,479
container image all we do is set the

163
00:06:02,479 --> 00:06:05,199
entry point to slash proc slash self

164
00:06:05,199 --> 00:06:06,400
slash exit

165
00:06:06,400 --> 00:06:07,919
and slash blocks

166
00:06:07,919 --> 00:06:09,520
self exit

167
00:06:09,520 --> 00:06:10,400
is a

168
00:06:10,400 --> 00:06:11,520
unique

169
00:06:11,520 --> 00:06:12,720
magic link

170
00:06:12,720 --> 00:06:14,479
in linux

171
00:06:14,479 --> 00:06:15,520
so

172
00:06:15,520 --> 00:06:18,160
whatever process access that path you

173
00:06:18,160 --> 00:06:20,720
will actually see a link

174
00:06:20,720 --> 00:06:22,479
to the binary that is running so you can

175
00:06:22,479 --> 00:06:24,800
see in the image below when elast tries

176
00:06:24,800 --> 00:06:28,080
to access proxy factse he sees that proc

177
00:06:28,080 --> 00:06:31,120
self exe points to ls but when the

178
00:06:31,120 --> 00:06:32,960
rhytlic binary tries to access spokes

179
00:06:32,960 --> 00:06:36,880
self exam proxy fx points to lead link

180
00:06:36,880 --> 00:06:39,120
so when we tell the run time

181
00:06:39,120 --> 00:06:41,680
to please execute prox effects as the

182
00:06:41,680 --> 00:06:43,360
container entry point

183
00:06:43,360 --> 00:06:46,319
we actually make it execute itself

184
00:06:46,319 --> 00:06:48,560
inside our container

185
00:06:48,560 --> 00:06:49,840
so

186
00:06:49,840 --> 00:06:51,680
that's the first step right we we have a

187
00:06:51,680 --> 00:06:54,560
way to trick the runtime into to execute

188
00:06:54,560 --> 00:06:57,120
itself inside the container and the

189
00:06:57,120 --> 00:06:58,960
second step is to have someone in the

190
00:06:58,960 --> 00:07:02,319
container read that process that runtime

191
00:07:02,319 --> 00:07:03,360
process

192
00:07:03,360 --> 00:07:06,160
proc pid exact and send it to a remote

193
00:07:06,160 --> 00:07:07,599
server

194
00:07:07,599 --> 00:07:08,880
so

195
00:07:08,880 --> 00:07:11,199
that's how it looks right we have the

196
00:07:11,199 --> 00:07:13,599
runtime we tricked it to execute itself

197
00:07:13,599 --> 00:07:15,599
inside the container and then our

198
00:07:15,599 --> 00:07:17,840
process inside the container reads the

199
00:07:17,840 --> 00:07:20,560
runtime executable

200
00:07:20,560 --> 00:07:22,720
through slash clock slash runtime pid

201
00:07:22,720 --> 00:07:25,520
slash excel and sends it to our remote

202
00:07:25,520 --> 00:07:27,199
server right

203
00:07:27,199 --> 00:07:28,319
so

204
00:07:28,319 --> 00:07:30,400
it's actually not that simple

205
00:07:30,400 --> 00:07:33,039
because containers can only have one

206
00:07:33,039 --> 00:07:35,120
entry point they are made to run one

207
00:07:35,120 --> 00:07:36,160
process

208
00:07:36,160 --> 00:07:38,720
so if we set the entry point to proxy

209
00:07:38,720 --> 00:07:41,360
effects and make the runtime execute

210
00:07:41,360 --> 00:07:43,120
itself inside the container

211
00:07:43,120 --> 00:07:45,840
we really have no way to spawn our

212
00:07:45,840 --> 00:07:47,360
process that is supposed to send the

213
00:07:47,360 --> 00:07:49,759
runtime right we have no way to spawn

214
00:07:49,759 --> 00:07:53,840
the red process in this image

215
00:07:55,520 --> 00:07:56,879
so

216
00:07:56,879 --> 00:07:59,360
how can we overcome this

217
00:07:59,360 --> 00:08:01,759
well the solution is to actually replace

218
00:08:01,759 --> 00:08:04,240
the dynamic linker inside the container

219
00:08:04,240 --> 00:08:05,680
image

220
00:08:05,680 --> 00:08:07,759
so we assume the runtime is dynamically

221
00:08:07,759 --> 00:08:10,240
linked and in linux when a dynamically

222
00:08:10,240 --> 00:08:13,199
linked executable starts running the

223
00:08:13,199 --> 00:08:14,319
kernel

224
00:08:14,319 --> 00:08:16,960
loads the dynamic linker

225
00:08:16,960 --> 00:08:19,199
to the process memory

226
00:08:19,199 --> 00:08:22,319
of the dynamically linked executable

227
00:08:22,319 --> 00:08:23,199
and

228
00:08:23,199 --> 00:08:25,520
transfers execution to the dynamic

229
00:08:25,520 --> 00:08:29,199
linker so the dynamic linker can load

230
00:08:29,199 --> 00:08:31,120
the necessary libraries that the process

231
00:08:31,120 --> 00:08:32,000
needs

232
00:08:32,000 --> 00:08:34,479
so the kernel actually searches for the

233
00:08:34,479 --> 00:08:35,919
dynamic linker

234
00:08:35,919 --> 00:08:37,039
from the

235
00:08:37,039 --> 00:08:38,958
in the root file system of the process

236
00:08:38,958 --> 00:08:40,880
and because we trick the runtime to run

237
00:08:40,880 --> 00:08:42,958
inside our container it will actually

238
00:08:42,958 --> 00:08:46,560
look take the container dynamic linker

239
00:08:46,560 --> 00:08:47,440
so

240
00:08:47,440 --> 00:08:49,200
in order to make this happen we actually

241
00:08:49,200 --> 00:08:51,680
only add one line to the

242
00:08:51,680 --> 00:08:52,959
docker file

243
00:08:52,959 --> 00:08:55,839
and that's the second line here we take

244
00:08:55,839 --> 00:08:58,560
we create a fake dynamic link

245
00:08:58,560 --> 00:09:01,519
and use it and replace the dynamic link

246
00:09:01,519 --> 00:09:03,360
in the container with it

247
00:09:03,360 --> 00:09:04,959
so

248
00:09:04,959 --> 00:09:06,480
that's actually

249
00:09:06,480 --> 00:09:09,440
a pretty nice trick but we need to a way

250
00:09:09,440 --> 00:09:12,000
to actually create a dynamic linker and

251
00:09:12,000 --> 00:09:14,320
when i was approaching that this task i

252
00:09:14,320 --> 00:09:17,440
really had no idea how to do that

253
00:09:17,440 --> 00:09:19,600
so

254
00:09:19,600 --> 00:09:20,880
as we've said

255
00:09:20,880 --> 00:09:23,040
the kernel loads dynamic clinical to

256
00:09:23,040 --> 00:09:25,519
process memory to load uh shared

257
00:09:25,519 --> 00:09:27,360
libraries right

258
00:09:27,360 --> 00:09:29,040
so first of all

259
00:09:29,040 --> 00:09:31,200
the dynamic network the dynamic linker

260
00:09:31,200 --> 00:09:33,040
must be statically linked right it

261
00:09:33,040 --> 00:09:35,120
cannot have dependencies on other

262
00:09:35,120 --> 00:09:37,040
libraries because the dynamic link is

263
00:09:37,040 --> 00:09:39,600
the one that is responsible

264
00:09:39,600 --> 00:09:41,920
that is responsible for loading

265
00:09:41,920 --> 00:09:42,959
libraries

266
00:09:42,959 --> 00:09:44,480
second you know second of all it needs

267
00:09:44,480 --> 00:09:47,519
to be written in c or maybe cpp i

268
00:09:47,519 --> 00:09:49,680
haven't tried cpp because

269
00:09:49,680 --> 00:09:51,600
languages with complex runtimes like

270
00:09:51,600 --> 00:09:52,959
golang

271
00:09:52,959 --> 00:09:55,279
they don't expect to run in the context

272
00:09:55,279 --> 00:09:56,080
which

273
00:09:56,080 --> 00:09:58,320
the dynamic linker runs

274
00:09:58,320 --> 00:10:00,640
so they can cause some issues

275
00:10:00,640 --> 00:10:02,000
and

276
00:10:02,000 --> 00:10:03,920
at my first story i tried compiling with

277
00:10:03,920 --> 00:10:05,200
the gillipc

278
00:10:05,200 --> 00:10:07,120
and it turns out that the

279
00:10:07,120 --> 00:10:09,279
a feature of glibc called fred local

280
00:10:09,279 --> 00:10:10,880
storage

281
00:10:10,880 --> 00:10:13,200
actually causes some problem but if you

282
00:10:13,200 --> 00:10:15,839
compile with muscle lipsy then

283
00:10:15,839 --> 00:10:18,800
everything works fine so that's how i

284
00:10:18,800 --> 00:10:22,160
created a my custom dynamic linker

285
00:10:22,160 --> 00:10:24,399
and to wrap things up that's how the

286
00:10:24,399 --> 00:10:27,360
demo we saw worked so ibm

287
00:10:27,360 --> 00:10:30,079
cloud took our who's the image the entry

288
00:10:30,079 --> 00:10:33,200
point was set to slash proxy self slash

289
00:10:33,200 --> 00:10:34,640
exit

290
00:10:34,640 --> 00:10:36,880
and when

291
00:10:36,880 --> 00:10:39,920
the container has one was run

292
00:10:39,920 --> 00:10:42,480
our fake dynamic linker was loaded to

293
00:10:42,480 --> 00:10:45,200
the runtime process and sent the runtime

294
00:10:45,200 --> 00:10:48,320
binary to our remote server

295
00:10:48,320 --> 00:10:49,360
so

296
00:10:49,360 --> 00:10:50,720
we have a way

297
00:10:50,720 --> 00:10:52,560
uh

298
00:10:52,560 --> 00:10:53,279
to

299
00:10:53,279 --> 00:10:55,839
read the binary the container runtime

300
00:10:55,839 --> 00:10:58,160
binary from the host but there is also

301
00:10:58,160 --> 00:11:00,640
an assumption in this

302
00:11:00,640 --> 00:11:02,959
in this way which is that the run time

303
00:11:02,959 --> 00:11:05,120
is dynamically linked right because if

304
00:11:05,120 --> 00:11:07,839
the runtime is statically linked

305
00:11:07,839 --> 00:11:08,560
the

306
00:11:08,560 --> 00:11:10,880
linker isn't loaded into the memory

307
00:11:10,880 --> 00:11:13,279
because it isn't needed so

308
00:11:13,279 --> 00:11:14,800
in this scenario

309
00:11:14,800 --> 00:11:17,200
we need some way to have someone in the

310
00:11:17,200 --> 00:11:19,920
container read the runtime and send it

311
00:11:19,920 --> 00:11:21,519
to us right

312
00:11:21,519 --> 00:11:24,079
so i actually gave this some thought and

313
00:11:24,079 --> 00:11:26,399
eventually the solution i came up with

314
00:11:26,399 --> 00:11:29,279
is to read the runtime whenever is there

315
00:11:29,279 --> 00:11:32,000
is an exec like a docker x0 or q-cup

316
00:11:32,000 --> 00:11:34,720
cube catalex if you're familiar with it

317
00:11:34,720 --> 00:11:36,800
whenever there is an exec into the jose

318
00:11:36,800 --> 00:11:39,040
container

319
00:11:39,040 --> 00:11:41,680
this flavor of hussie will send the

320
00:11:41,680 --> 00:11:44,399
runtime and most containers of service

321
00:11:44,399 --> 00:11:46,560
platforms they support a docker exec

322
00:11:46,560 --> 00:11:48,320
like experience to the uploaded

323
00:11:48,320 --> 00:11:50,480
container so if it's really not clear

324
00:11:50,480 --> 00:11:53,680
yet let's see the docker file so

325
00:11:53,680 --> 00:11:56,480
we now have our binary just run at the

326
00:11:56,480 --> 00:11:58,560
entry point right we have a binary that

327
00:11:58,560 --> 00:12:00,800
knows how to

328
00:12:00,800 --> 00:12:02,880
upload the runtime

329
00:12:02,880 --> 00:12:05,120
and

330
00:12:05,440 --> 00:12:07,440
when we run the container that's what

331
00:12:07,440 --> 00:12:09,200
you have right just that process running

332
00:12:09,200 --> 00:12:11,680
inside the house container but then when

333
00:12:11,680 --> 00:12:14,720
someone docker exit inside the container

334
00:12:14,720 --> 00:12:18,880
we actually ask it to exec slash proxy

335
00:12:18,880 --> 00:12:21,600
exam which makes the runtime process

336
00:12:21,600 --> 00:12:23,440
appear inside the container right we

337
00:12:23,440 --> 00:12:26,160
trick it to execute itself inside the

338
00:12:26,160 --> 00:12:28,160
container

339
00:12:28,160 --> 00:12:30,720
and then our upload runtime which runs

340
00:12:30,720 --> 00:12:33,040
as pid 1

341
00:12:33,040 --> 00:12:34,880
waits for the runtime to jump in and

342
00:12:34,880 --> 00:12:36,959
whenever it jumps in it sends it to

343
00:12:36,959 --> 00:12:39,360
remote server so

344
00:12:39,360 --> 00:12:42,160
let's see a demo

345
00:12:43,360 --> 00:12:46,480
so first off we need a file server right

346
00:12:46,480 --> 00:12:49,040
and because the file server runs on our

347
00:12:49,040 --> 00:12:51,760
local machine we need to see how local

348
00:12:51,760 --> 00:12:54,480
container

349
00:12:54,720 --> 00:12:56,800
see

350
00:12:56,800 --> 00:12:58,880
the ip of the local machine and that's

351
00:12:58,880 --> 00:13:00,639
really the idea of the default gateway

352
00:13:00,639 --> 00:13:04,000
so i'm just going to grab

353
00:13:04,839 --> 00:13:08,160
that and now we're going to

354
00:13:08,160 --> 00:13:10,240
run our container

355
00:13:10,240 --> 00:13:12,079
and that's the ip that you can see there

356
00:13:12,079 --> 00:13:14,160
that we earlier saw is the ip of the

357
00:13:14,160 --> 00:13:17,360
host from the context of the container

358
00:13:17,360 --> 00:13:18,959
so again you can see this is the wait

359
00:13:18,959 --> 00:13:22,480
for exact flavor of hussey

360
00:13:22,480 --> 00:13:23,600
and

361
00:13:23,600 --> 00:13:25,120
hussein now waits

362
00:13:25,120 --> 00:13:27,360
runs as the pid 1 of the container and

363
00:13:27,360 --> 00:13:30,399
waits for the run time to execute

364
00:13:30,399 --> 00:13:33,440
so that's what we're going to do

365
00:13:33,440 --> 00:13:35,920
and the name of the container

366
00:13:35,920 --> 00:13:38,399
up so

367
00:13:38,720 --> 00:13:40,480
and we're going to ask you to execute

368
00:13:40,480 --> 00:13:43,519
blog self-exam

369
00:13:43,760 --> 00:13:45,040
and you can see that

370
00:13:45,040 --> 00:13:46,079
hussy

371
00:13:46,079 --> 00:13:48,240
noticed the runtime

372
00:13:48,240 --> 00:13:51,760
exiting into the container and uploaded

373
00:13:51,760 --> 00:13:54,000
the runtime over here

374
00:13:54,000 --> 00:13:57,040
to the file server

375
00:13:57,279 --> 00:13:59,199
and if we try to see what file we

376
00:13:59,199 --> 00:14:02,599
actually got

377
00:14:04,240 --> 00:14:05,760
we can see that again

378
00:14:05,760 --> 00:14:08,079
it's the runtime of the underlying host

379
00:14:08,079 --> 00:14:10,399
which also in my

380
00:14:10,399 --> 00:14:14,000
linux vm is run c

381
00:14:14,399 --> 00:14:15,199
so

382
00:14:15,199 --> 00:14:17,440
that's how you solve

383
00:14:17,440 --> 00:14:19,360
study that's how i solve

384
00:14:19,360 --> 00:14:22,079
statically linked runtimes uh having a

385
00:14:22,079 --> 00:14:25,120
process in the container wait for docker

386
00:14:25,120 --> 00:14:27,600
exec into the container

387
00:14:27,600 --> 00:14:29,680
and that's really how hoosie is

388
00:14:29,680 --> 00:14:31,839
implemented you have this flavor which

389
00:14:31,839 --> 00:14:34,079
is for statically linked runtime

390
00:14:34,079 --> 00:14:35,600
and you have

391
00:14:35,600 --> 00:14:38,160
the dynamic lincoln flavor which is for

392
00:14:38,160 --> 00:14:41,839
a dynamically linked runtimes and when i

393
00:14:41,839 --> 00:14:44,800
took huci to a real

394
00:14:44,800 --> 00:14:46,720
container as a service platforms i

395
00:14:46,720 --> 00:14:48,800
actually saw both i saw

396
00:14:48,800 --> 00:14:50,480
dynamically in current time and i also

397
00:14:50,480 --> 00:14:53,279
saw a statically linked runtimes

398
00:14:53,279 --> 00:14:56,320
so with that let's talk about

399
00:14:56,320 --> 00:14:59,040
the findings so far so as i expected in

400
00:14:59,040 --> 00:15:01,920
the beginning uh i saw a lot a lot of

401
00:15:01,920 --> 00:15:03,680
ransi which is the really the industry

402
00:15:03,680 --> 00:15:06,880
standard contender anton but i also saw

403
00:15:06,880 --> 00:15:09,600
old and vulnerable rancid versions which

404
00:15:09,600 --> 00:15:11,440
led to some

405
00:15:11,440 --> 00:15:13,680
quite interesting research that they yet

406
00:15:13,680 --> 00:15:15,680
can't disclose

407
00:15:15,680 --> 00:15:18,399
uh well what about custom changes to

408
00:15:18,399 --> 00:15:20,000
vanilla rancid

409
00:15:20,000 --> 00:15:21,360
well

410
00:15:21,360 --> 00:15:23,760
i really haven't had the time to take a

411
00:15:23,760 --> 00:15:26,079
deeper look into that but from a shallow

412
00:15:26,079 --> 00:15:27,360
look

413
00:15:27,360 --> 00:15:30,800
i didn't see any custom changes but

414
00:15:30,800 --> 00:15:32,480
i'm not

415
00:15:32,480 --> 00:15:34,959
like i haven't looked into that

416
00:15:34,959 --> 00:15:36,800
to the fullest because i was

417
00:15:36,800 --> 00:15:39,279
more preoccupied with a

418
00:15:39,279 --> 00:15:41,360
vulnerable rancid version

419
00:15:41,360 --> 00:15:43,600
and finally i didn't see any other

420
00:15:43,600 --> 00:15:47,199
runtime other than run c

421
00:15:47,199 --> 00:15:48,880
so

422
00:15:48,880 --> 00:15:51,600
what's next well you can use hussie to

423
00:15:51,600 --> 00:15:53,199
poke at the underlying contender run

424
00:15:53,199 --> 00:15:55,839
time of whatever container as a service

425
00:15:55,839 --> 00:15:57,519
platforms you lack you can get

426
00:15:57,519 --> 00:16:00,720
visibility into how your containers run

427
00:16:00,720 --> 00:16:03,120
on the platform and maybe you'll find

428
00:16:03,120 --> 00:16:05,360
some security issue with the runtime and

429
00:16:05,360 --> 00:16:08,320
possibly get a bounty and help how they

430
00:16:08,320 --> 00:16:10,560
contain other service platforms so right

431
00:16:10,560 --> 00:16:12,959
after this talk i'm gonna make this link

432
00:16:12,959 --> 00:16:14,639
publicly accessible

433
00:16:14,639 --> 00:16:16,399
and i think i'm ready for

434
00:16:16,399 --> 00:16:19,600
four questions

