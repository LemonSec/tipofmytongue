1
00:00:00,960 --> 00:00:03,120
hi everyone i want to thank you for

2
00:00:03,120 --> 00:00:04,560
coming to my talk titled

3
00:00:04,560 --> 00:00:06,480
let the bugs come to me how to build

4
00:00:06,480 --> 00:00:07,759
cloud-based recon

5
00:00:07,759 --> 00:00:10,559
automation at scale for the first half

6
00:00:10,559 --> 00:00:11,360
of this talk

7
00:00:11,360 --> 00:00:13,840
we're going to go through an overview of

8
00:00:13,840 --> 00:00:15,599
how you can build your own cloud-based

9
00:00:15,599 --> 00:00:16,320
automation

10
00:00:16,320 --> 00:00:18,320
ecosystem so we'll go through kind of

11
00:00:18,320 --> 00:00:20,080
the framework the methodology

12
00:00:20,080 --> 00:00:22,560
lessons learned and provide an overview

13
00:00:22,560 --> 00:00:24,160
of a lot of the cloud services

14
00:00:24,160 --> 00:00:26,320
that you can utilize and then just talk

15
00:00:26,320 --> 00:00:28,640
about methodologies that we can apply

16
00:00:28,640 --> 00:00:31,039
um so that way all the challenges and

17
00:00:31,039 --> 00:00:31,760
mistakes

18
00:00:31,760 --> 00:00:33,360
and lessons learned that i've had over

19
00:00:33,360 --> 00:00:34,960
the past year and a half

20
00:00:34,960 --> 00:00:37,200
you can avoid that as you build this out

21
00:00:37,200 --> 00:00:38,559
and then for the second half of this

22
00:00:38,559 --> 00:00:39,760
presentation and talk

23
00:00:39,760 --> 00:00:41,440
we're going to do some live walkthroughs

24
00:00:41,440 --> 00:00:43,360
of the actual environment show how it

25
00:00:43,360 --> 00:00:44,000
works how it

26
00:00:44,000 --> 00:00:47,120
runs and at the conclusion of this

27
00:00:47,120 --> 00:00:49,120
i'll make sure to release the majority

28
00:00:49,120 --> 00:00:50,640
of the code that you'll see today so

29
00:00:50,640 --> 00:00:52,000
that way you can reference it

30
00:00:52,000 --> 00:00:53,680
and hopefully you can take it and build

31
00:00:53,680 --> 00:00:56,239
out your own environment and

32
00:00:56,239 --> 00:00:58,559
drive that success for recon

33
00:00:58,559 --> 00:00:59,600
additionally

34
00:00:59,600 --> 00:01:01,280
i posted earlier this week a

35
00:01:01,280 --> 00:01:02,960
supplementary article that i'll

36
00:01:02,960 --> 00:01:04,479
reference on the slide here

37
00:01:04,479 --> 00:01:07,040
and feel free to pull up the link and

38
00:01:07,040 --> 00:01:09,200
kind of follow along as we go the talk

39
00:01:09,200 --> 00:01:11,040
doesn't go line by line with it but i

40
00:01:11,040 --> 00:01:12,880
think if you want to delve in and try to

41
00:01:12,880 --> 00:01:15,040
gain more information throughout

42
00:01:15,040 --> 00:01:17,119
feel free to jump in there and leverage

43
00:01:17,119 --> 00:01:18,799
those resources there's a lot of live

44
00:01:18,799 --> 00:01:20,880
code snippets and pieces that may

45
00:01:20,880 --> 00:01:26,159
add some background context

46
00:01:26,159 --> 00:01:27,680
so i wanted to share a little bit about

47
00:01:27,680 --> 00:01:30,159
myself my name is ryan elkins

48
00:01:30,159 --> 00:01:32,320
i'm a husband i'm a father i have two

49
00:01:32,320 --> 00:01:33,280
kids

50
00:01:33,280 --> 00:01:35,439
and by day i'm an information security

51
00:01:35,439 --> 00:01:37,280
architect i spend the majority of my

52
00:01:37,280 --> 00:01:38,400
time

53
00:01:38,400 --> 00:01:40,159
learning about cloud solutions how to

54
00:01:40,159 --> 00:01:41,680
secure cloud and

55
00:01:41,680 --> 00:01:45,040
um my primary focus is cloud and

56
00:01:45,040 --> 00:01:47,280
um eventually once the kids are in bed

57
00:01:47,280 --> 00:01:49,280
ten o'clock rolls around i like to try

58
00:01:49,280 --> 00:01:51,280
to be a security researcher and hack

59
00:01:51,280 --> 00:01:52,159
things

60
00:01:52,159 --> 00:01:54,000
when i can when i have the when i have

61
00:01:54,000 --> 00:01:55,840
the energy and so that's

62
00:01:55,840 --> 00:01:57,920
that's really what led me into this talk

63
00:01:57,920 --> 00:01:58,880
is that

64
00:01:58,880 --> 00:02:01,520
limited time factor where a lot of times

65
00:02:01,520 --> 00:02:02,560
the free time that i

66
00:02:02,560 --> 00:02:05,439
do have starts at 10 p.m at night

67
00:02:05,439 --> 00:02:07,119
however at the same time i still want to

68
00:02:07,119 --> 00:02:08,720
be able to participate in

69
00:02:08,720 --> 00:02:11,440
learning and bug bounties and in doing a

70
00:02:11,440 --> 00:02:12,239
lot of the

71
00:02:12,239 --> 00:02:14,239
the hobby security work that i really

72
00:02:14,239 --> 00:02:15,280
love and

73
00:02:15,280 --> 00:02:17,040
not to mention that it helps me out in

74
00:02:17,040 --> 00:02:19,040
my day-to-day career as well and

75
00:02:19,040 --> 00:02:20,239
we'll share some different lessons

76
00:02:20,239 --> 00:02:22,720
learned but leading into that i guess it

77
00:02:22,720 --> 00:02:25,200
reminds me of a story and i'll i'll call

78
00:02:25,200 --> 00:02:25,920
this the

79
00:02:25,920 --> 00:02:29,040
the blockbuster dilemma and i'll ask the

80
00:02:29,040 --> 00:02:30,160
audience here

81
00:02:30,160 --> 00:02:33,360
does does anybody remember going to

82
00:02:33,360 --> 00:02:35,440
rent movies and actually walking into a

83
00:02:35,440 --> 00:02:37,440
store or into a blockbuster and you

84
00:02:37,440 --> 00:02:39,840
actually go and pick it out

85
00:02:39,840 --> 00:02:41,040
well if not i'll walk through the

86
00:02:41,040 --> 00:02:42,640
process and i think there's a lot of

87
00:02:42,640 --> 00:02:44,239
carryover traits to

88
00:02:44,239 --> 00:02:46,080
the at least my experience with bug

89
00:02:46,080 --> 00:02:47,360
bounties and

90
00:02:47,360 --> 00:02:50,400
so you're sitting here on a friday night

91
00:02:50,400 --> 00:02:52,560
you just finished eating your your pizza

92
00:02:52,560 --> 00:02:54,319
that you just had to carry out dinner or

93
00:02:54,319 --> 00:02:55,040
pizza

94
00:02:55,040 --> 00:02:56,959
and you realize hey we have four hours

95
00:02:56,959 --> 00:02:58,480
to do something let's watch a movie

96
00:02:58,480 --> 00:02:59,440
tonight so

97
00:02:59,440 --> 00:03:01,519
you get the family in the car you you

98
00:03:01,519 --> 00:03:03,280
drive to the nearest blockbuster

99
00:03:03,280 --> 00:03:06,159
or grocery store wherever they have

100
00:03:06,159 --> 00:03:07,680
movies that you can rent

101
00:03:07,680 --> 00:03:10,159
and you go in you spend about 45 minutes

102
00:03:10,159 --> 00:03:11,680
trying to get a movie that everybody

103
00:03:11,680 --> 00:03:12,480
agrees on

104
00:03:12,480 --> 00:03:14,720
you eventually compromise you pick the

105
00:03:14,720 --> 00:03:16,879
selection you drive home

106
00:03:16,879 --> 00:03:19,440
and then you make some popcorn you you

107
00:03:19,440 --> 00:03:20,959
go upstairs you drag down all the

108
00:03:20,959 --> 00:03:22,640
pillows and blankets you get everything

109
00:03:22,640 --> 00:03:23,840
in front of the tv

110
00:03:23,840 --> 00:03:26,080
you eventually start the movie about two

111
00:03:26,080 --> 00:03:27,920
and a half hours later so you're down to

112
00:03:27,920 --> 00:03:29,599
maybe an hour and a half

113
00:03:29,599 --> 00:03:31,040
you get the movie started and you fall

114
00:03:31,040 --> 00:03:33,120
asleep you wake up the next morning you

115
00:03:33,120 --> 00:03:34,720
realize hey i missed the whole movie

116
00:03:34,720 --> 00:03:36,720
i'm going to try to cram in the movie

117
00:03:36,720 --> 00:03:38,560
before i have to return the movie that

118
00:03:38,560 --> 00:03:40,720
day or you get fined and you eventually

119
00:03:40,720 --> 00:03:42,480
end up missing the day by like 10

120
00:03:42,480 --> 00:03:44,959
minutes and you pay for an extra day

121
00:03:44,959 --> 00:03:47,760
that is exactly the challenge with bug

122
00:03:47,760 --> 00:03:48,959
bounties and i feel like

123
00:03:48,959 --> 00:03:52,080
we are reliving the times of the vhs

124
00:03:52,080 --> 00:03:54,080
rentals and the dvd rentals

125
00:03:54,080 --> 00:03:56,480
picture bug bounty this this was me

126
00:03:56,480 --> 00:03:58,080
before creating and why

127
00:03:58,080 --> 00:04:00,239
what drove me to build this ecosystem

128
00:04:00,239 --> 00:04:01,920
that i'm sharing with you today

129
00:04:01,920 --> 00:04:05,200
is you get the kids to bed it's 10 p.m

130
00:04:05,200 --> 00:04:07,040
i decide i want to hack tonight i'm

131
00:04:07,040 --> 00:04:08,239
going to work on a program

132
00:04:08,239 --> 00:04:10,560
try to learn figure things out so i go

133
00:04:10,560 --> 00:04:12,799
in open up the computer i log into every

134
00:04:12,799 --> 00:04:14,000
single platform

135
00:04:14,000 --> 00:04:15,599
see what's available i review all the

136
00:04:15,599 --> 00:04:17,519
programs i look at my private invites i

137
00:04:17,519 --> 00:04:19,440
look at the public programs i dig deep

138
00:04:19,440 --> 00:04:20,798
trying to see maybe there's a public

139
00:04:20,798 --> 00:04:22,160
program somebody missed you do that

140
00:04:22,160 --> 00:04:23,440
every time even though

141
00:04:23,440 --> 00:04:25,680
you don't always find something and then

142
00:04:25,680 --> 00:04:27,440
and then you also look at what programs

143
00:04:27,440 --> 00:04:28,560
have incentives and

144
00:04:28,560 --> 00:04:30,479
eventually you get to the point where

145
00:04:30,479 --> 00:04:31,919
you select a program so you have your

146
00:04:31,919 --> 00:04:33,040
program now

147
00:04:33,040 --> 00:04:35,280
you need to find all those ssh keys that

148
00:04:35,280 --> 00:04:36,639
you forget where you store them on your

149
00:04:36,639 --> 00:04:38,400
computer or the what password did i use

150
00:04:38,400 --> 00:04:39,199
to log in

151
00:04:39,199 --> 00:04:40,639
so you get all that together then you

152
00:04:40,639 --> 00:04:42,080
realize hey i haven't even started my

153
00:04:42,080 --> 00:04:43,600
vps server and do so you

154
00:04:43,600 --> 00:04:46,080
start at the vps server and then it

155
00:04:46,080 --> 00:04:47,840
starts up you fire up burp suite or

156
00:04:47,840 --> 00:04:49,360
whatever proxy you use

157
00:04:49,360 --> 00:04:51,040
you start manually converting these

158
00:04:51,040 --> 00:04:52,720
scopes over into your burp suite

159
00:04:52,720 --> 00:04:54,080
console you get everything ready then

160
00:04:54,080 --> 00:04:56,479
realize well i don't want to just go for

161
00:04:56,479 --> 00:04:56,880
that

162
00:04:56,880 --> 00:04:58,960
root c domain let's we should do some

163
00:04:58,960 --> 00:05:00,160
recon so then

164
00:05:00,160 --> 00:05:02,720
you figure out you update a mass and you

165
00:05:02,720 --> 00:05:03,759
go out and you

166
00:05:03,759 --> 00:05:05,600
look up the syntax you get the syntax

167
00:05:05,600 --> 00:05:06,800
you load it up

168
00:05:06,800 --> 00:05:09,199
run it you kick it off you wait about 10

169
00:05:09,199 --> 00:05:10,000
minutes you get

170
00:05:10,000 --> 00:05:12,240
tired and you fall asleep you wake up

171
00:05:12,240 --> 00:05:13,039
the next morning

172
00:05:13,039 --> 00:05:15,440
you just realize that you just slept all

173
00:05:15,440 --> 00:05:16,400
night while

174
00:05:16,400 --> 00:05:18,000
a mass is running you have this big

175
00:05:18,000 --> 00:05:19,840
arsenal of subdomains

176
00:05:19,840 --> 00:05:21,120
but you're going to have to wait another

177
00:05:21,120 --> 00:05:23,120
few days to be able to tap into this so

178
00:05:23,120 --> 00:05:25,120
your whole night was basically gone

179
00:05:25,120 --> 00:05:26,960
because you only have a few hours your

180
00:05:26,960 --> 00:05:28,160
time is so

181
00:05:28,160 --> 00:05:31,280
so important and for me

182
00:05:31,280 --> 00:05:33,280
i was living that over and over again

183
00:05:33,280 --> 00:05:34,880
where i would do this i would have this

184
00:05:34,880 --> 00:05:36,160
recon and then the next week i would

185
00:05:36,160 --> 00:05:37,440
just decide i'm gonna go for a different

186
00:05:37,440 --> 00:05:38,479
program and do and

187
00:05:38,479 --> 00:05:40,960
it was a it's really a systemic issue

188
00:05:40,960 --> 00:05:41,600
that

189
00:05:41,600 --> 00:05:43,280
probably a lot of us face and i hope i

190
00:05:43,280 --> 00:05:45,199
hope some of this resonates with you

191
00:05:45,199 --> 00:05:47,840
and some of the challenges so i needed

192
00:05:47,840 --> 00:05:49,520
to figure out a different strategy a

193
00:05:49,520 --> 00:05:50,639
better strategy

194
00:05:50,639 --> 00:05:53,840
how do i solve this and i loved it i

195
00:05:53,840 --> 00:05:54,560
thought

196
00:05:54,560 --> 00:05:57,520
a couple weeks ago i know kodingo um

197
00:05:57,520 --> 00:05:58,240
michael

198
00:05:58,240 --> 00:06:01,360
skelton and heath adams the cyber mentor

199
00:06:01,360 --> 00:06:01,680
were

200
00:06:01,680 --> 00:06:04,240
talking on twitter about comparing poker

201
00:06:04,240 --> 00:06:05,520
to bug bounty

202
00:06:05,520 --> 00:06:07,440
and that really resonated with me

203
00:06:07,440 --> 00:06:09,680
because it fit the exact objective of

204
00:06:09,680 --> 00:06:11,120
what i've been trying to accomplish with

205
00:06:11,120 --> 00:06:12,479
this automation is

206
00:06:12,479 --> 00:06:14,000
i wanted to build this scalable

207
00:06:14,000 --> 00:06:16,479
cost-effective cloud-based platform

208
00:06:16,479 --> 00:06:19,280
that can do full recon automation end to

209
00:06:19,280 --> 00:06:20,000
end

210
00:06:20,000 --> 00:06:22,080
so that way it takes all this raw data

211
00:06:22,080 --> 00:06:23,840
and transforms it into actionable

212
00:06:23,840 --> 00:06:25,199
intelligence

213
00:06:25,199 --> 00:06:27,919
and for me the poker comparison is that

214
00:06:27,919 --> 00:06:29,440
the best poker players they don't play

215
00:06:29,440 --> 00:06:30,400
every hand

216
00:06:30,400 --> 00:06:32,479
the hands that they play they want to

217
00:06:32,479 --> 00:06:34,560
make sure they have the best statistics

218
00:06:34,560 --> 00:06:36,880
and the best chances at winning that

219
00:06:36,880 --> 00:06:38,400
hand and they play it

220
00:06:38,400 --> 00:06:40,800
in the same way the time that i manually

221
00:06:40,800 --> 00:06:42,319
spend on a program or

222
00:06:42,319 --> 00:06:44,800
doing analysis i want the highest

223
00:06:44,800 --> 00:06:45,600
likelihood

224
00:06:45,600 --> 00:06:48,240
of signal versus the noise that i'm

225
00:06:48,240 --> 00:06:49,039
going to

226
00:06:49,039 --> 00:06:50,800
find a vulnerability whether it be a

227
00:06:50,800 --> 00:06:52,400
duplicate or not i don't care at that

228
00:06:52,400 --> 00:06:52,960
point

229
00:06:52,960 --> 00:06:56,240
i'm just happy to have proper raw intel

230
00:06:56,240 --> 00:06:58,720
or actionable intelligence from the raw

231
00:06:58,720 --> 00:06:59,280
data

232
00:06:59,280 --> 00:07:01,599
that i can act on so that's the ultimate

233
00:07:01,599 --> 00:07:02,319
goal

234
00:07:02,319 --> 00:07:04,880
and i feel like this program that i'm

235
00:07:04,880 --> 00:07:06,479
going to show and walk through

236
00:07:06,479 --> 00:07:09,520
we we come pretty close to that and and

237
00:07:09,520 --> 00:07:12,319
we'll talk through that as well

238
00:07:12,319 --> 00:07:14,400
so as i developed it i thought about it

239
00:07:14,400 --> 00:07:15,360
and i thought there's

240
00:07:15,360 --> 00:07:17,680
there's actually i categorized into nine

241
00:07:17,680 --> 00:07:18,880
tenets that i

242
00:07:18,880 --> 00:07:20,560
felt important to make sure that i'm

243
00:07:20,560 --> 00:07:22,000
always guiding towards and

244
00:07:22,000 --> 00:07:23,680
i definitely didn't hit every one of

245
00:07:23,680 --> 00:07:25,680
those and there's still iterations and

246
00:07:25,680 --> 00:07:28,160
mvp and post mvp processes but

247
00:07:28,160 --> 00:07:29,120
eventually

248
00:07:29,120 --> 00:07:31,039
i want to stick as closely as i can to

249
00:07:31,039 --> 00:07:32,240
these nine tenets and i think it's

250
00:07:32,240 --> 00:07:33,840
important as you as you think about this

251
00:07:33,840 --> 00:07:34,880
as well that they all

252
00:07:34,880 --> 00:07:37,120
they all resonate and make sense so the

253
00:07:37,120 --> 00:07:39,039
scales horizontally part this

254
00:07:39,039 --> 00:07:41,919
solution had to cover every bug bounty

255
00:07:41,919 --> 00:07:43,599
program in existence i'm not smart

256
00:07:43,599 --> 00:07:44,000
enough

257
00:07:44,000 --> 00:07:46,720
technically to be able to be writing my

258
00:07:46,720 --> 00:07:48,400
own exploits in zero days

259
00:07:48,400 --> 00:07:50,960
but i am smart enough to apply the oauth

260
00:07:50,960 --> 00:07:52,720
top 10 and search for those and some of

261
00:07:52,720 --> 00:07:53,199
the

262
00:07:53,199 --> 00:07:55,120
common themes that we see and we read

263
00:07:55,120 --> 00:07:56,720
about and we learn about

264
00:07:56,720 --> 00:07:59,120
the problem is i need to i can't just

265
00:07:59,120 --> 00:08:00,080
hone in on five

266
00:08:00,080 --> 00:08:02,000
things and ever find it so i need to be

267
00:08:02,000 --> 00:08:03,520
able to scale that

268
00:08:03,520 --> 00:08:06,160
breadth of knowledge across every single

269
00:08:06,160 --> 00:08:07,680
program at once

270
00:08:07,680 --> 00:08:09,680
the other part was scaling vertically so

271
00:08:09,680 --> 00:08:11,199
i want something that now

272
00:08:11,199 --> 00:08:13,199
now once i have the data the

273
00:08:13,199 --> 00:08:14,879
intelligence information the

274
00:08:14,879 --> 00:08:16,080
fingerprinting the

275
00:08:16,080 --> 00:08:17,599
the server information about every

276
00:08:17,599 --> 00:08:20,080
single program i can continue to add

277
00:08:20,080 --> 00:08:23,039
new checks things so the the scales

278
00:08:23,039 --> 00:08:25,039
vertically are kind of your bug classes

279
00:08:25,039 --> 00:08:26,000
that you're checking for

280
00:08:26,000 --> 00:08:28,160
across the entire ecosystem environment

281
00:08:28,160 --> 00:08:31,199
of bug programs

282
00:08:31,199 --> 00:08:32,320
the other piece is i wanted to be

283
00:08:32,320 --> 00:08:34,399
cloud-based i don't want to have to

284
00:08:34,399 --> 00:08:36,399
stand up my own server racks and run

285
00:08:36,399 --> 00:08:37,919
capital investments of hardware and

286
00:08:37,919 --> 00:08:38,880
things in my

287
00:08:38,880 --> 00:08:40,880
my home office i mean that that had no

288
00:08:40,880 --> 00:08:42,399
appeal to me i want to be able to have

289
00:08:42,399 --> 00:08:43,679
on-demand

290
00:08:43,679 --> 00:08:45,680
scalability the same reason that

291
00:08:45,680 --> 00:08:47,519
businesses are driving towards cloud

292
00:08:47,519 --> 00:08:49,200
are the same things that i wanted to do

293
00:08:49,200 --> 00:08:51,839
i need that compute power when i need it

294
00:08:51,839 --> 00:08:53,440
and i want i want to make sure that i

295
00:08:53,440 --> 00:08:55,200
have it at my fingertips so cloud-based

296
00:08:55,200 --> 00:08:56,959
is extremely important with no

297
00:08:56,959 --> 00:09:00,000
on-premise dependencies the other piece

298
00:09:00,000 --> 00:09:01,839
is infrastructure as code so

299
00:09:01,839 --> 00:09:04,000
being able to deploy your infrastructure

300
00:09:04,000 --> 00:09:05,600
repeatably and source control and

301
00:09:05,600 --> 00:09:07,200
version control and all that it's really

302
00:09:07,200 --> 00:09:08,399
important i've failed

303
00:09:08,399 --> 00:09:10,080
quite a bit in this area because a lot

304
00:09:10,080 --> 00:09:11,760
of times i'm just working on something

305
00:09:11,760 --> 00:09:13,440
and i want to make it work and i can go

306
00:09:13,440 --> 00:09:14,880
in the gui and click so

307
00:09:14,880 --> 00:09:16,399
that's probably the area that i have the

308
00:09:16,399 --> 00:09:17,839
most technical debt that i need to

309
00:09:17,839 --> 00:09:19,920
revisit but i'm certainly something i'm

310
00:09:19,920 --> 00:09:21,200
working towards

311
00:09:21,200 --> 00:09:23,519
robust documentation for me i could

312
00:09:23,519 --> 00:09:24,560
write a line of code

313
00:09:24,560 --> 00:09:26,320
and i could forget what it does the next

314
00:09:26,320 --> 00:09:28,240
day so being able to kind of

315
00:09:28,240 --> 00:09:30,160
understand why i did something a certain

316
00:09:30,160 --> 00:09:32,959
way have articles about it explaining it

317
00:09:32,959 --> 00:09:34,880
that way i can revisit this and not have

318
00:09:34,880 --> 00:09:36,000
to continue to relearn

319
00:09:36,000 --> 00:09:38,959
that and then it also helps with sharing

320
00:09:38,959 --> 00:09:40,640
to the world and to the industry and

321
00:09:40,640 --> 00:09:42,240
making us all better for the same things

322
00:09:42,240 --> 00:09:43,040
by having

323
00:09:43,040 --> 00:09:44,800
some statements and documentation around

324
00:09:44,800 --> 00:09:47,120
it low cost is another piece

325
00:09:47,120 --> 00:09:49,200
it it can get really expensive as you

326
00:09:49,200 --> 00:09:51,200
start standing up multiple vps servers

327
00:09:51,200 --> 00:09:52,640
and running containers and

328
00:09:52,640 --> 00:09:55,760
cloud services so my goal is to keep it

329
00:09:55,760 --> 00:09:56,880
within the price

330
00:09:56,880 --> 00:09:59,600
of finding one low vulnerability per

331
00:09:59,600 --> 00:10:00,240
month

332
00:10:00,240 --> 00:10:02,240
i'm scaling right on the edge between

333
00:10:02,240 --> 00:10:04,079
like a low medium

334
00:10:04,079 --> 00:10:06,640
but my goal is to optimize this as much

335
00:10:06,640 --> 00:10:07,839
as possible so

336
00:10:07,839 --> 00:10:10,640
that way i can basically one low

337
00:10:10,640 --> 00:10:12,320
vulnerability per month will pay my

338
00:10:12,320 --> 00:10:13,760
cloud bills now

339
00:10:13,760 --> 00:10:16,000
hopefully once we scale vertically it's

340
00:10:16,000 --> 00:10:17,839
going to gain more expenses but that

341
00:10:17,839 --> 00:10:19,200
hopefully means there's more success

342
00:10:19,200 --> 00:10:21,040
being driven and it's not as big an

343
00:10:21,040 --> 00:10:22,800
impact financially because it's

344
00:10:22,800 --> 00:10:25,440
generated in a profit at that point

345
00:10:25,440 --> 00:10:27,120
the other piece is aggregating the data

346
00:10:27,120 --> 00:10:29,279
analysis and anomaly discovery so

347
00:10:29,279 --> 00:10:32,079
i want this raw data and i want it to be

348
00:10:32,079 --> 00:10:34,399
aggregated across different tools and

349
00:10:34,399 --> 00:10:36,480
pulling everything together so i don't

350
00:10:36,480 --> 00:10:38,480
have to individually go and look at one

351
00:10:38,480 --> 00:10:40,240
tool's output and then the next one

352
00:10:40,240 --> 00:10:42,480
but bringing it all together to make the

353
00:10:42,480 --> 00:10:45,040
most relevant intelligence possible

354
00:10:45,040 --> 00:10:47,200
being a security practitioner myself

355
00:10:47,200 --> 00:10:48,800
security best practices are

356
00:10:48,800 --> 00:10:50,959
also important and i think that our our

357
00:10:50,959 --> 00:10:52,000
program owners

358
00:10:52,000 --> 00:10:53,920
care about that as well i mean they're

359
00:10:53,920 --> 00:10:55,600
they're giving us the opportunity to go

360
00:10:55,600 --> 00:10:56,480
do recon

361
00:10:56,480 --> 00:10:59,360
find potentially damaging multi-million

362
00:10:59,360 --> 00:10:59,760
dollar

363
00:10:59,760 --> 00:11:02,160
impacts to these companies based on some

364
00:11:02,160 --> 00:11:03,680
of these sub ones pri

365
00:11:03,680 --> 00:11:05,839
and criticals it's important that we

366
00:11:05,839 --> 00:11:07,760
take our own due diligence seriously

367
00:11:07,760 --> 00:11:09,279
around the data that we're collecting

368
00:11:09,279 --> 00:11:11,519
and harvesting from these programs so

369
00:11:11,519 --> 00:11:13,839
that may be performing least privilege

370
00:11:13,839 --> 00:11:15,839
changing passwords regularly

371
00:11:15,839 --> 00:11:17,360
doing encryption and transit and that

372
00:11:17,360 --> 00:11:18,959
rest and just general

373
00:11:18,959 --> 00:11:21,519
good security hygiene then the last

374
00:11:21,519 --> 00:11:22,959
thing is version control the last thing

375
00:11:22,959 --> 00:11:24,079
i want to do is spend

376
00:11:24,079 --> 00:11:27,200
a year on this and make a mistake and

377
00:11:27,200 --> 00:11:29,200
have no idea what i broke or lose the

378
00:11:29,200 --> 00:11:31,040
code or delete something so keeping this

379
00:11:31,040 --> 00:11:32,640
in github under version control is

380
00:11:32,640 --> 00:11:33,920
extremely important and

381
00:11:33,920 --> 00:11:36,719
super valuable

382
00:11:38,079 --> 00:11:39,600
so i want to try jump into this

383
00:11:39,600 --> 00:11:41,120
architecture what am i actually talking

384
00:11:41,120 --> 00:11:42,640
about why are you spending your time

385
00:11:42,640 --> 00:11:43,519
today to learn

386
00:11:43,519 --> 00:11:45,519
and i i think one of the things that

387
00:11:45,519 --> 00:11:48,079
i'll ask of you as you listen to this is

388
00:11:48,079 --> 00:11:49,760
looking at this this is the

389
00:11:49,760 --> 00:11:52,160
the actual diagram of the architecture

390
00:11:52,160 --> 00:11:53,440
that's built out in the cloud and i'll

391
00:11:53,440 --> 00:11:55,040
share the code and you'll see it all

392
00:11:55,040 --> 00:11:57,120
working in different things through

393
00:11:57,120 --> 00:11:58,639
follow-up articles and code that i'll

394
00:11:58,639 --> 00:11:59,120
release

395
00:11:59,120 --> 00:12:00,480
and we'll walk through a few examples

396
00:12:00,480 --> 00:12:02,240
within here it's a fairly large

397
00:12:02,240 --> 00:12:03,680
ecosystem

398
00:12:03,680 --> 00:12:06,000
thus far so we won't touch on everything

399
00:12:06,000 --> 00:12:07,440
in detail today but

400
00:12:07,440 --> 00:12:09,760
as you think about this this even though

401
00:12:09,760 --> 00:12:10,800
this talk is more

402
00:12:10,800 --> 00:12:13,920
focused around bug bounty and recon this

403
00:12:13,920 --> 00:12:16,399
applies so effectively to pretty much

404
00:12:16,399 --> 00:12:18,079
any area of information security and i

405
00:12:18,079 --> 00:12:19,600
would even extend that to

406
00:12:19,600 --> 00:12:22,800
any area of i.t or technology i mean if

407
00:12:22,800 --> 00:12:23,440
you work in

408
00:12:23,440 --> 00:12:26,560
incident response or doing any types of

409
00:12:26,560 --> 00:12:28,560
forensic analysis or vulnerability

410
00:12:28,560 --> 00:12:29,279
management

411
00:12:29,279 --> 00:12:31,680
or even if you're a risk analyst or

412
00:12:31,680 --> 00:12:33,519
someone that's maybe not developing code

413
00:12:33,519 --> 00:12:34,160
or and it's

414
00:12:34,160 --> 00:12:36,800
quite as technical of a role these this

415
00:12:36,800 --> 00:12:38,880
is basically just taking data

416
00:12:38,880 --> 00:12:41,279
turning into intelligent decisions and

417
00:12:41,279 --> 00:12:43,360
using orchestrated workflows

418
00:12:43,360 --> 00:12:46,160
and that's that's basically the extent

419
00:12:46,160 --> 00:12:47,200
of this

420
00:12:47,200 --> 00:12:49,120
but doing it properly can make you

421
00:12:49,120 --> 00:12:51,440
extremely successful

422
00:12:51,440 --> 00:12:54,480
and leading into this i feel like just

423
00:12:54,480 --> 00:12:56,160
in general across the industry if you're

424
00:12:56,160 --> 00:12:57,519
looking for a niche

425
00:12:57,519 --> 00:13:00,560
to really fill it's leveraging cloud

426
00:13:00,560 --> 00:13:02,959
to further mature your secu your

427
00:13:02,959 --> 00:13:04,800
company's security program

428
00:13:04,800 --> 00:13:06,639
and i think if you go out and search for

429
00:13:06,639 --> 00:13:08,079
articles you're going to see a lot of

430
00:13:08,079 --> 00:13:08,880
information

431
00:13:08,880 --> 00:13:10,720
and data about how do you secure the

432
00:13:10,720 --> 00:13:12,560
cloud how do you secure cloud services

433
00:13:12,560 --> 00:13:14,399
you're going to see a few things about

434
00:13:14,399 --> 00:13:16,560
how do you hack cloud hack the cloud how

435
00:13:16,560 --> 00:13:17,760
do you do that

436
00:13:17,760 --> 00:13:20,000
what you're going to find very limited

437
00:13:20,000 --> 00:13:21,920
is how can you trans

438
00:13:21,920 --> 00:13:24,000
leverage the cloud to actually transform

439
00:13:24,000 --> 00:13:25,839
and mature your own security program

440
00:13:25,839 --> 00:13:27,519
your own security processes

441
00:13:27,519 --> 00:13:29,519
so this is just taking one niche area of

442
00:13:29,519 --> 00:13:31,040
bug bounty and recon

443
00:13:31,040 --> 00:13:33,120
automating that with cloud services but

444
00:13:33,120 --> 00:13:34,240
this could absolutely

445
00:13:34,240 --> 00:13:37,040
apply to all areas and i would challenge

446
00:13:37,040 --> 00:13:38,000
you to

447
00:13:38,000 --> 00:13:40,160
start to use this within your own within

448
00:13:40,160 --> 00:13:42,560
your own job roles as well

449
00:13:42,560 --> 00:13:45,760
so what happens in this ecosystem is

450
00:13:45,760 --> 00:13:49,279
i'm i'm using i'm actually tying into

451
00:13:49,279 --> 00:13:50,320
all the major

452
00:13:50,320 --> 00:13:53,440
bug bounty platforms and i'm using um

453
00:13:53,440 --> 00:13:56,800
a it's an existing github repo by our

454
00:13:56,800 --> 00:13:59,839
arcadi tedelman and he's actually going

455
00:13:59,839 --> 00:14:00,399
through and

456
00:14:00,399 --> 00:14:02,079
making a lot of the api calls and

457
00:14:02,079 --> 00:14:03,920
scraping the programs and sites so

458
00:14:03,920 --> 00:14:05,680
eventually i'd like to get directly

459
00:14:05,680 --> 00:14:07,360
integrated into every single platform

460
00:14:07,360 --> 00:14:08,959
itself and not have that as a dependency

461
00:14:08,959 --> 00:14:10,560
but i'm using the raw

462
00:14:10,560 --> 00:14:13,120
json output that he's developed and

463
00:14:13,120 --> 00:14:15,040
published out to the community and i'll

464
00:14:15,040 --> 00:14:16,880
reference it here for you and

465
00:14:16,880 --> 00:14:19,519
um so i just i i thank him for the

466
00:14:19,519 --> 00:14:20,399
awesome

467
00:14:20,399 --> 00:14:22,399
project he has out there and available

468
00:14:22,399 --> 00:14:24,000
to everyone and um i've been able to

469
00:14:24,000 --> 00:14:24,959
leverage that

470
00:14:24,959 --> 00:14:27,120
and through that i can load block load

471
00:14:27,120 --> 00:14:28,880
every single project out there that's at

472
00:14:28,880 --> 00:14:29,440
least in

473
00:14:29,440 --> 00:14:31,440
the major platforms and then there's

474
00:14:31,440 --> 00:14:33,120
always the situations where you need to

475
00:14:33,120 --> 00:14:33,680
load

476
00:14:33,680 --> 00:14:35,839
maybe an external one that i want to do

477
00:14:35,839 --> 00:14:37,199
ad hoc or something

478
00:14:37,199 --> 00:14:39,360
i also have the ability to make an api

479
00:14:39,360 --> 00:14:41,040
post request that will load that program

480
00:14:41,040 --> 00:14:42,079
so once you have

481
00:14:42,079 --> 00:14:44,720
all the programs loaded it's then

482
00:14:44,720 --> 00:14:45,760
literally just a

483
00:14:45,760 --> 00:14:47,920
get request with the program name that i

484
00:14:47,920 --> 00:14:50,320
want to initiate this recon cycle on

485
00:14:50,320 --> 00:14:52,240
it steps through every single thing you

486
00:14:52,240 --> 00:14:54,160
see on this reference architecture

487
00:14:54,160 --> 00:14:56,240
it does all inmate automation it kicks

488
00:14:56,240 --> 00:14:57,760
off

489
00:14:57,760 --> 00:15:00,480
scans it does um domain enumeration

490
00:15:00,480 --> 00:15:01,199
through

491
00:15:01,199 --> 00:15:04,000
project sonar it has a mass module that

492
00:15:04,000 --> 00:15:05,440
i'm not going to talk through in detail

493
00:15:05,440 --> 00:15:07,120
today i'm not using it as extensively

494
00:15:07,120 --> 00:15:07,760
right now

495
00:15:07,760 --> 00:15:09,440
i'm more interested in hitting some of

496
00:15:09,440 --> 00:15:11,199
the the data sources directly with their

497
00:15:11,199 --> 00:15:12,160
apis

498
00:15:12,160 --> 00:15:14,240
but then once it gathers all that data

499
00:15:14,240 --> 00:15:16,480
from the the initial scope

500
00:15:16,480 --> 00:15:19,440
it will then kick off a httpx scan that

501
00:15:19,440 --> 00:15:21,680
gets kind of your urls and gets some of

502
00:15:21,680 --> 00:15:21,920
the

503
00:15:21,920 --> 00:15:24,639
base ports and the fingerprint details

504
00:15:24,639 --> 00:15:26,880
and the response codes and everything

505
00:15:26,880 --> 00:15:29,040
and after it has that it will circle

506
00:15:29,040 --> 00:15:30,880
back and it will do a web crawl of all

507
00:15:30,880 --> 00:15:31,759
those seated

508
00:15:31,759 --> 00:15:34,800
base urls and then the nice thing is

509
00:15:34,800 --> 00:15:37,199
iteratively whatever urls it finds it

510
00:15:37,199 --> 00:15:38,399
does the json

511
00:15:38,399 --> 00:15:40,240
the js link finder it looks for

512
00:15:40,240 --> 00:15:42,320
everything api endpoints

513
00:15:42,320 --> 00:15:45,199
analyzes all that pulls it back gathers

514
00:15:45,199 --> 00:15:47,279
a list of every url found in there

515
00:15:47,279 --> 00:15:49,199
whether it's in scope or out of scope

516
00:15:49,199 --> 00:15:50,959
does a double check to make sure that

517
00:15:50,959 --> 00:15:52,800
everything is back into scope creates

518
00:15:52,800 --> 00:15:53,759
that list

519
00:15:53,759 --> 00:15:57,680
feeds it back into the the recon process

520
00:15:57,680 --> 00:15:59,839
does the recursive recon and then goes

521
00:15:59,839 --> 00:16:01,040
back through

522
00:16:01,040 --> 00:16:03,199
and it will keep cycling through until

523
00:16:03,199 --> 00:16:05,199
it get until it gets

524
00:16:05,199 --> 00:16:07,680
tons of information all the raw output

525
00:16:07,680 --> 00:16:10,160
then as it's done and completed

526
00:16:10,160 --> 00:16:12,240
it will do commands that aggregates the

527
00:16:12,240 --> 00:16:13,839
raw output all together

528
00:16:13,839 --> 00:16:15,920
and you basically get into structured

529
00:16:15,920 --> 00:16:17,120
formats that you can

530
00:16:17,120 --> 00:16:18,800
you can query you can search you can

531
00:16:18,800 --> 00:16:21,360
sync it to persistent systems

532
00:16:21,360 --> 00:16:24,240
and run tools like a sem grip or a sift

533
00:16:24,240 --> 00:16:24,880
or a

534
00:16:24,880 --> 00:16:26,800
regular expression whatever you want to

535
00:16:26,800 --> 00:16:27,920
you could even do

536
00:16:27,920 --> 00:16:30,560
i'm using nucle nuclei templates locally

537
00:16:30,560 --> 00:16:31,519
against the

538
00:16:31,519 --> 00:16:33,279
the file all the responses that are

539
00:16:33,279 --> 00:16:35,440
stored across millions and millions of

540
00:16:35,440 --> 00:16:36,079
web pages

541
00:16:36,079 --> 00:16:39,040
so there's unlimited amount of depth

542
00:16:39,040 --> 00:16:39,920
that you can do

543
00:16:39,920 --> 00:16:43,120
once you have data basically curated

544
00:16:43,120 --> 00:16:46,320
in a usable format

545
00:16:47,519 --> 00:16:49,519
the overall infrastructure is broken

546
00:16:49,519 --> 00:16:51,440
into really three main components

547
00:16:51,440 --> 00:16:52,000
there's

548
00:16:52,000 --> 00:16:54,880
program generation program operations

549
00:16:54,880 --> 00:16:56,320
and program analytics

550
00:16:56,320 --> 00:16:57,920
and that's kind of how i bucketed

551
00:16:57,920 --> 00:16:59,360
everything that goes on

552
00:16:59,360 --> 00:17:01,680
so this is an example of what you would

553
00:17:01,680 --> 00:17:03,360
start with so if you want to do

554
00:17:03,360 --> 00:17:06,400
recon on in this example you can see i

555
00:17:06,400 --> 00:17:08,480
have tesla so i want to say i want to do

556
00:17:08,480 --> 00:17:09,599
tesla this is

557
00:17:09,599 --> 00:17:11,359
initial operation the nice thing about

558
00:17:11,359 --> 00:17:13,280
this too is that if i want to just do

559
00:17:13,280 --> 00:17:15,599
like a crawl i would say operation crawl

560
00:17:15,599 --> 00:17:17,199
and it's going to crawl the existing

561
00:17:17,199 --> 00:17:19,599
data i have for it or i could say httpx

562
00:17:19,599 --> 00:17:20,160
and it'll

563
00:17:20,160 --> 00:17:22,480
do an httpx scan against the urls that

564
00:17:22,480 --> 00:17:23,919
we have for it but in this case this

565
00:17:23,919 --> 00:17:24,720
just says

566
00:17:24,720 --> 00:17:26,880
do the entire recon so it's going to

567
00:17:26,880 --> 00:17:28,559
kick it off and at the outcome of

568
00:17:28,559 --> 00:17:30,400
without touching anything else with just

569
00:17:30,400 --> 00:17:32,080
this post request i'm going to have

570
00:17:32,080 --> 00:17:34,080
dashboards like you see below where

571
00:17:34,080 --> 00:17:37,360
i i can do have real-time analytics and

572
00:17:37,360 --> 00:17:39,280
filtering capability around the urls

573
00:17:39,280 --> 00:17:41,200
their status codes their responses

574
00:17:41,200 --> 00:17:42,960
and this isn't going to tell me

575
00:17:42,960 --> 00:17:44,640
specifically vulnerabilities at this

576
00:17:44,640 --> 00:17:45,039
point

577
00:17:45,039 --> 00:17:48,080
but this gives me in a way to filter

578
00:17:48,080 --> 00:17:50,240
through and structure this so i can have

579
00:17:50,240 --> 00:17:52,799
the most highest likelihood of signal

580
00:17:52,799 --> 00:17:53,280
through

581
00:17:53,280 --> 00:17:54,799
all the extensive noise that we've

582
00:17:54,799 --> 00:17:56,960
discovered through the recon process

583
00:17:56,960 --> 00:17:59,200
and then i think graph database is a

584
00:17:59,200 --> 00:18:00,080
really powerful

585
00:18:00,080 --> 00:18:02,000
visualization tool to quickly see those

586
00:18:02,000 --> 00:18:03,360
anomalies that are sitting

587
00:18:03,360 --> 00:18:05,200
and then you can also see relationships

588
00:18:05,200 --> 00:18:08,000
and this is a neo4j

589
00:18:08,000 --> 00:18:10,640
that's running within it's the neo4j

590
00:18:10,640 --> 00:18:11,840
cloud service but

591
00:18:11,840 --> 00:18:14,400
it's issued through as a third-party

592
00:18:14,400 --> 00:18:16,400
google cloud api so i have that i'm not

593
00:18:16,400 --> 00:18:18,720
using as extensively because cost wise

594
00:18:18,720 --> 00:18:21,440
i don't think honestly i can afford it

595
00:18:21,440 --> 00:18:23,280
to run it across all the programs it's

596
00:18:23,280 --> 00:18:24,960
great for like one or two programs but

597
00:18:24,960 --> 00:18:26,400
once you start hitting those

598
00:18:26,400 --> 00:18:28,559
node limits that it just gets too costly

599
00:18:28,559 --> 00:18:30,000
to expand that out so maybe

600
00:18:30,000 --> 00:18:31,760
once we start returning having some

601
00:18:31,760 --> 00:18:33,440
return on investment we'll we'll do more

602
00:18:33,440 --> 00:18:34,559
there but i'm using

603
00:18:34,559 --> 00:18:36,960
network x locally with the python

604
00:18:36,960 --> 00:18:38,400
libraries and you can still

605
00:18:38,400 --> 00:18:40,720
generate some raw analytics around some

606
00:18:40,720 --> 00:18:42,480
of the individual programs which is

607
00:18:42,480 --> 00:18:45,120
fascinating

608
00:18:47,120 --> 00:18:48,960
so it really starts with the program

609
00:18:48,960 --> 00:18:50,799
generation it's important to have all

610
00:18:50,799 --> 00:18:52,559
the programs loaded ready to go and

611
00:18:52,559 --> 00:18:54,160
that's where i i talked about

612
00:18:54,160 --> 00:18:57,039
arkady titleman's um bug bounty targets

613
00:18:57,039 --> 00:18:58,640
github repository that's just

614
00:18:58,640 --> 00:19:00,400
awesome and you can go through but i

615
00:19:00,400 --> 00:19:01,919
will highlight one of the challenges

616
00:19:01,919 --> 00:19:04,320
that i faced early on is with scope

617
00:19:04,320 --> 00:19:06,320
being so important that we stay within

618
00:19:06,320 --> 00:19:07,679
scope the

619
00:19:07,679 --> 00:19:10,240
bounty the program owners care about

620
00:19:10,240 --> 00:19:11,840
scope for a reason and a lot of times

621
00:19:11,840 --> 00:19:13,280
these companies they want to be able to

622
00:19:13,280 --> 00:19:14,720
have these programs and

623
00:19:14,720 --> 00:19:17,120
do this but they truly are sometimes

624
00:19:17,120 --> 00:19:18,240
systems that may be

625
00:19:18,240 --> 00:19:20,000
our legacy or they know that it's not

626
00:19:20,000 --> 00:19:21,520
going to handle the traffic

627
00:19:21,520 --> 00:19:24,160
it might be that they're just not ready

628
00:19:24,160 --> 00:19:24,799
to have

629
00:19:24,799 --> 00:19:26,400
everything within their ecosystem or

630
00:19:26,400 --> 00:19:28,400
environment to be hit by

631
00:19:28,400 --> 00:19:30,400
thousands of hackers across the globe

632
00:19:30,400 --> 00:19:32,080
and i think that's fair and i think

633
00:19:32,080 --> 00:19:34,320
at the same time for us as researchers

634
00:19:34,320 --> 00:19:35,919
it's important to honor that

635
00:19:35,919 --> 00:19:37,600
scope and make sure that we stay the

636
00:19:37,600 --> 00:19:39,600
best we can within scope

637
00:19:39,600 --> 00:19:41,840
and what i quickly found when you try to

638
00:19:41,840 --> 00:19:43,840
automate across everything is that

639
00:19:43,840 --> 00:19:46,000
it's difficult because the scope even if

640
00:19:46,000 --> 00:19:47,760
it's in the same exact field

641
00:19:47,760 --> 00:19:50,720
varies significantly so i've i've tried

642
00:19:50,720 --> 00:19:51,440
to build and

643
00:19:51,440 --> 00:19:53,360
iterate over different scope types where

644
00:19:53,360 --> 00:19:55,120
you might have a url with a

645
00:19:55,120 --> 00:19:56,880
wildcard at the end of it you might have

646
00:19:56,880 --> 00:19:58,640
a domain with

647
00:19:58,640 --> 00:20:00,720
the subdomain wildcard but does that

648
00:20:00,720 --> 00:20:02,320
mean that i can also wildcard other

649
00:20:02,320 --> 00:20:03,520
pieces of it

650
00:20:03,520 --> 00:20:06,159
and then there's cider ranges and ip

651
00:20:06,159 --> 00:20:07,440
addresses and you'll kind of see the

652
00:20:07,440 --> 00:20:09,520
different variations here listed

653
00:20:09,520 --> 00:20:12,720
and one example i learned pretty quickly

654
00:20:12,720 --> 00:20:14,799
is making sure that github is not

655
00:20:14,799 --> 00:20:16,640
included as the in scope whenever they

656
00:20:16,640 --> 00:20:18,640
have a repository there because i

657
00:20:18,640 --> 00:20:20,559
quickly learned that you start crawling

658
00:20:20,559 --> 00:20:22,159
github you get a lot of

659
00:20:22,159 --> 00:20:24,240
responses and it can really take a long

660
00:20:24,240 --> 00:20:26,559
time for unnecessary scope so

661
00:20:26,559 --> 00:20:29,600
i made that mistake once and have fixed

662
00:20:29,600 --> 00:20:31,120
that pretty quickly so

663
00:20:31,120 --> 00:20:32,799
but tons of lessons learned like this

664
00:20:32,799 --> 00:20:34,480
that i never anticipated when i started

665
00:20:34,480 --> 00:20:35,520
on this journey of

666
00:20:35,520 --> 00:20:37,600
developing this environment and then you

667
00:20:37,600 --> 00:20:39,440
can see if you want to load a new

668
00:20:39,440 --> 00:20:41,280
program the post request payload is

669
00:20:41,280 --> 00:20:42,640
right here where all you have to do is

670
00:20:42,640 --> 00:20:43,679
provide the program

671
00:20:43,679 --> 00:20:45,760
the scope in the scope out the platform

672
00:20:45,760 --> 00:20:47,280
and the invite type so that way i can

673
00:20:47,280 --> 00:20:49,120
filter and protect any private

674
00:20:49,120 --> 00:20:52,559
um private repositories or programs

675
00:20:52,559 --> 00:20:54,400
without whenever i'm doing demos and

676
00:20:54,400 --> 00:20:55,840
things i can better hide those

677
00:20:55,840 --> 00:20:58,480
so that's that's pretty much all it does

678
00:20:58,480 --> 00:21:00,720
and it is all loaded and stored inside

679
00:21:00,720 --> 00:21:02,000
an aws dynamo

680
00:21:02,000 --> 00:21:05,280
db so it's structurally maintained and

681
00:21:05,280 --> 00:21:07,120
then i have a time stamp field where i

682
00:21:07,120 --> 00:21:07,919
can then

683
00:21:07,919 --> 00:21:09,600
trigger and say once i have this and i

684
00:21:09,600 --> 00:21:12,080
run recon i set the timestamp so i know

685
00:21:12,080 --> 00:21:13,760
when the last time i ran this again so

686
00:21:13,760 --> 00:21:15,760
if i want to start doing more

687
00:21:15,760 --> 00:21:17,440
automation around if i haven't touched

688
00:21:17,440 --> 00:21:18,799
the program in 30 days let's

689
00:21:18,799 --> 00:21:20,159
automatically kick this off and those

690
00:21:20,159 --> 00:21:21,600
are all future enhancements that i could

691
00:21:21,600 --> 00:21:22,320
do but

692
00:21:22,320 --> 00:21:24,000
just trying to attract the program so

693
00:21:24,000 --> 00:21:25,520
you can see in the screenshot right now

694
00:21:25,520 --> 00:21:28,080
i have 653 programs loaded

695
00:21:28,080 --> 00:21:30,320
i know i have a couple other places to

696
00:21:30,320 --> 00:21:31,840
pull programs from so that's

697
00:21:31,840 --> 00:21:33,760
definitely not comprehensive yet but

698
00:21:33,760 --> 00:21:35,440
that's that's certainly enough to get

699
00:21:35,440 --> 00:21:38,000
started with

700
00:21:38,320 --> 00:21:40,720
and then the operations piece is

701
00:21:40,720 --> 00:21:42,960
everything is initiated via api

702
00:21:42,960 --> 00:21:44,799
so there's there's really there's

703
00:21:44,799 --> 00:21:46,000
nothing that you have to do

704
00:21:46,000 --> 00:21:48,640
outside of an api curl recall request if

705
00:21:48,640 --> 00:21:49,600
you have so

706
00:21:49,600 --> 00:21:52,320
it's you you make the crow request to

707
00:21:52,320 --> 00:21:53,679
the aws api

708
00:21:53,679 --> 00:21:55,280
service you can set your own custom

709
00:21:55,280 --> 00:21:58,159
cname i have api.brevityammotion.com

710
00:21:58,159 --> 00:21:59,440
that's that's kind of where i host my

711
00:21:59,440 --> 00:22:01,360
blog and other things and and i've

712
00:22:01,360 --> 00:22:02,400
leveraged that so i

713
00:22:02,400 --> 00:22:04,400
make the request there what it does is

714
00:22:04,400 --> 00:22:06,400
it feeds in and you can proxy that api

715
00:22:06,400 --> 00:22:08,080
call to what's called aws

716
00:22:08,080 --> 00:22:11,280
lambda and picture the aws lambda

717
00:22:11,280 --> 00:22:12,320
service has a

718
00:22:12,320 --> 00:22:15,600
serverless function that is running

719
00:22:15,600 --> 00:22:18,240
and you think about like python definite

720
00:22:18,240 --> 00:22:19,760
or python functions

721
00:22:19,760 --> 00:22:21,520
that's pretty much you want to leverage

722
00:22:21,520 --> 00:22:23,600
these as small modular components that

723
00:22:23,600 --> 00:22:23,919
do

724
00:22:23,919 --> 00:22:25,840
one task and they do that single task

725
00:22:25,840 --> 00:22:28,799
well and so i proxy that api call

726
00:22:28,799 --> 00:22:30,400
and then the parameters i send in the

727
00:22:30,400 --> 00:22:32,159
post or get request to get filtered

728
00:22:32,159 --> 00:22:34,320
in as arguments into that function so

729
00:22:34,320 --> 00:22:35,200
it's just a

730
00:22:35,200 --> 00:22:38,400
quick way to make a function api based

731
00:22:38,400 --> 00:22:39,600
and that's awesome i mean just think

732
00:22:39,600 --> 00:22:41,120
about that power alone

733
00:22:41,120 --> 00:22:42,799
where in your company that you write a

734
00:22:42,799 --> 00:22:45,440
lambda or a python script or have some

735
00:22:45,440 --> 00:22:46,960
some type of thing that you want that

736
00:22:46,960 --> 00:22:49,039
had takes arguments and it maybe runs on

737
00:22:49,039 --> 00:22:50,080
the server today

738
00:22:50,080 --> 00:22:51,679
throw it in there proxy it through the

739
00:22:51,679 --> 00:22:54,240
api gateway now you have an api call to

740
00:22:54,240 --> 00:22:56,000
some type of data processing that you

741
00:22:56,000 --> 00:22:57,520
could kick off and that that's just so

742
00:22:57,520 --> 00:22:58,960
powerful in itself

743
00:22:58,960 --> 00:23:01,520
to be able to apply to so many areas and

744
00:23:01,520 --> 00:23:03,039
then once those functions run

745
00:23:03,039 --> 00:23:06,159
they output all the data into

746
00:23:06,159 --> 00:23:09,280
into s3 buckets which are object-based

747
00:23:09,280 --> 00:23:10,720
storage that just scales

748
00:23:10,720 --> 00:23:12,480
along with however much room that we

749
00:23:12,480 --> 00:23:14,720
need the other piece is ephemeral

750
00:23:14,720 --> 00:23:16,720
workloads so i'm i'm actually anything

751
00:23:16,720 --> 00:23:17,679
that i perform

752
00:23:17,679 --> 00:23:20,240
actively against the target so those are

753
00:23:20,240 --> 00:23:22,159
the the web crawls and the

754
00:23:22,159 --> 00:23:24,640
nuclei scans or anything like that that

755
00:23:24,640 --> 00:23:25,520
is all

756
00:23:25,520 --> 00:23:29,200
stood up dynamically on ephemeral

757
00:23:29,200 --> 00:23:31,440
droplets within digital oceans i use

758
00:23:31,440 --> 00:23:32,480
digital ocean

759
00:23:32,480 --> 00:23:35,440
droplets for everything that i do and it

760
00:23:35,440 --> 00:23:36,240
pretty much

761
00:23:36,240 --> 00:23:39,360
writes a custom startup script

762
00:23:39,360 --> 00:23:40,640
where i start up the droplet

763
00:23:40,640 --> 00:23:42,559
automatically via api it feeds the

764
00:23:42,559 --> 00:23:43,760
startup script to it

765
00:23:43,760 --> 00:23:45,200
and the last command that i have in

766
00:23:45,200 --> 00:23:48,080
there is shutdown so the startup script

767
00:23:48,080 --> 00:23:50,240
also completes all the work synchronizes

768
00:23:50,240 --> 00:23:51,360
the data

769
00:23:51,360 --> 00:23:54,559
queries or i guess queries aws s3 pulls

770
00:23:54,559 --> 00:23:55,600
all the data in

771
00:23:55,600 --> 00:23:57,760
and then runs its processes and then the

772
00:23:57,760 --> 00:23:59,520
last step is synchronizing the data back

773
00:23:59,520 --> 00:24:01,679
to s3 so we don't lose the output

774
00:24:01,679 --> 00:24:03,520
and then it shuts the instance down and

775
00:24:03,520 --> 00:24:04,720
then i have a

776
00:24:04,720 --> 00:24:06,640
a lambda that runs every five minutes

777
00:24:06,640 --> 00:24:08,720
that's always querying my

778
00:24:08,720 --> 00:24:11,279
my digitalocean account and anytime that

779
00:24:11,279 --> 00:24:12,000
there's a

780
00:24:12,000 --> 00:24:14,159
droplet that's shut down it will just

781
00:24:14,159 --> 00:24:15,760
terminate it so i don't get charged for

782
00:24:15,760 --> 00:24:16,880
longer than the

783
00:24:16,880 --> 00:24:18,799
duration so worst case i have five

784
00:24:18,799 --> 00:24:20,080
minutes of extra time

785
00:24:20,080 --> 00:24:22,480
run time from every operation i do and

786
00:24:22,480 --> 00:24:23,200
it's just

787
00:24:23,200 --> 00:24:25,120
over and over sets up ephemeral for

788
00:24:25,120 --> 00:24:27,679
every process then it's very modular

789
00:24:27,679 --> 00:24:29,200
so that's that's how we do it i'll share

790
00:24:29,200 --> 00:24:30,799
all the code you'll see snippets you'll

791
00:24:30,799 --> 00:24:31,200
have

792
00:24:31,200 --> 00:24:32,240
i think that's already in the

793
00:24:32,240 --> 00:24:33,840
supplementary article so you'll be able

794
00:24:33,840 --> 00:24:34,240
to

795
00:24:34,240 --> 00:24:35,919
kind of see how i do it but it's it's

796
00:24:35,919 --> 00:24:37,520
really that just-in-time dynamic

797
00:24:37,520 --> 00:24:40,799
approach that i've been leveraging

798
00:24:41,600 --> 00:24:43,440
the last piece is the program analysis

799
00:24:43,440 --> 00:24:44,799
and i i know i already mentioned the

800
00:24:44,799 --> 00:24:47,200
data is stored in aws s3 buckets but i

801
00:24:47,200 --> 00:24:47,520
have

802
00:24:47,520 --> 00:24:50,240
buckets for raw data i have data or

803
00:24:50,240 --> 00:24:52,240
buckets for refined data i have buckets

804
00:24:52,240 --> 00:24:52,640
for

805
00:24:52,640 --> 00:24:54,159
data sets that i pull in from like

806
00:24:54,159 --> 00:24:55,840
third-party sources if you think like

807
00:24:55,840 --> 00:24:56,880
the max minds

808
00:24:56,880 --> 00:25:00,880
apis for asn lists or geoip and all that

809
00:25:00,880 --> 00:25:02,400
and then there's a curated slash

810
00:25:02,400 --> 00:25:04,159
presentation area where

811
00:25:04,159 --> 00:25:06,559
you can do the presentation pieces where

812
00:25:06,559 --> 00:25:07,520
i might point

813
00:25:07,520 --> 00:25:08,799
what you see here is a quick site

814
00:25:08,799 --> 00:25:10,960
dashboard and i'll point to that data

815
00:25:10,960 --> 00:25:12,799
and it correlates aggregates it all

816
00:25:12,799 --> 00:25:15,039
scans it through and presents it back to

817
00:25:15,039 --> 00:25:16,480
me and um

818
00:25:16,480 --> 00:25:18,640
where i can have the the visualizations

819
00:25:18,640 --> 00:25:21,360
and the summarized output of it so i can

820
00:25:21,360 --> 00:25:23,440
make better use of my time and not dig

821
00:25:23,440 --> 00:25:24,799
through thousands of

822
00:25:24,799 --> 00:25:26,720
individual text files which i know a lot

823
00:25:26,720 --> 00:25:30,480
of us face and struggle with today

824
00:25:33,279 --> 00:25:35,039
all right well with the time left i

825
00:25:35,039 --> 00:25:37,760
think we should try a live demo let's

826
00:25:37,760 --> 00:25:40,240
let's try to walk through the the recon

827
00:25:40,240 --> 00:25:41,440
engine end to end

828
00:25:41,440 --> 00:25:43,360
in the workflow and as we go through it

829
00:25:43,360 --> 00:25:45,440
i'll explain what each step is doing and

830
00:25:45,440 --> 00:25:47,039
try to fill in all those pieces and i

831
00:25:47,039 --> 00:25:48,320
think that will probably

832
00:25:48,320 --> 00:25:50,080
wrap up the rest of this talk but

833
00:25:50,080 --> 00:25:51,600
there's going to be tons of follow-up

834
00:25:51,600 --> 00:25:53,120
information i advise that you

835
00:25:53,120 --> 00:25:54,960
follow me on twitter check out the blog

836
00:25:54,960 --> 00:25:56,720
and i'll continue just to post more and

837
00:25:56,720 --> 00:25:58,880
more information so you can replicate

838
00:25:58,880 --> 00:26:00,960
big chunks or if not all of this

839
00:26:00,960 --> 00:26:02,960
yourself personally

840
00:26:02,960 --> 00:26:05,760
so let's go ahead and jump into the aws

841
00:26:05,760 --> 00:26:07,120
console here so

842
00:26:07,120 --> 00:26:09,120
i know earlier i mentioned you can kick

843
00:26:09,120 --> 00:26:11,279
things off for the crow request and do

844
00:26:11,279 --> 00:26:13,520
all that you can actually test directly

845
00:26:13,520 --> 00:26:15,440
within the ecosystem as well so i'm

846
00:26:15,440 --> 00:26:17,200
going to just jump straight into the api

847
00:26:17,200 --> 00:26:18,480
gateway this is

848
00:26:18,480 --> 00:26:20,320
this is the api structure that i

849
00:26:20,320 --> 00:26:22,480
currently have set up within here

850
00:26:22,480 --> 00:26:24,799
since we're going to test out adding a

851
00:26:24,799 --> 00:26:26,640
brand new program to here that doesn't

852
00:26:26,640 --> 00:26:27,840
exist anywhere else

853
00:26:27,840 --> 00:26:30,080
so far we're going to go ahead and check

854
00:26:30,080 --> 00:26:31,279
out our post request

855
00:26:31,279 --> 00:26:33,039
and we can kind of see the structure of

856
00:26:33,039 --> 00:26:34,559
how this is set up where it's going to

857
00:26:34,559 --> 00:26:35,919
go through the api

858
00:26:35,919 --> 00:26:38,159
it's going to get proxied straight

859
00:26:38,159 --> 00:26:39,600
through and hit this

860
00:26:39,600 --> 00:26:42,720
back end lambda for a post request

861
00:26:42,720 --> 00:26:44,640
and one thing i don't think i mentioned

862
00:26:44,640 --> 00:26:46,080
yet is that

863
00:26:46,080 --> 00:26:49,360
i do all of the developments within

864
00:26:49,360 --> 00:26:51,919
cloud9 which is another aws service

865
00:26:51,919 --> 00:26:54,159
which also makes it so i don't need any

866
00:26:54,159 --> 00:26:55,679
crazy powerful laptop

867
00:26:55,679 --> 00:26:57,200
all i need is something where i can get

868
00:26:57,200 --> 00:26:59,120
to the browser and do that development

869
00:26:59,120 --> 00:27:01,039
so i'll show you we'll hop into the

870
00:27:01,039 --> 00:27:02,960
cloud 9 development environment here so

871
00:27:02,960 --> 00:27:03,520
this is

872
00:27:03,520 --> 00:27:05,360
this is what the ide looks like it looks

873
00:27:05,360 --> 00:27:07,120
very similar to like a

874
00:27:07,120 --> 00:27:08,720
visual studio code or something like

875
00:27:08,720 --> 00:27:10,799
that but what we're going to do is i

876
00:27:10,799 --> 00:27:12,640
have some test cases written out here

877
00:27:12,640 --> 00:27:15,440
for for example so as i'm going through

878
00:27:15,440 --> 00:27:17,200
deploying new code or anything

879
00:27:17,200 --> 00:27:19,039
i can go in here and get some quick

880
00:27:19,039 --> 00:27:21,360
examples so we want to do a post request

881
00:27:21,360 --> 00:27:22,159
in here

882
00:27:22,159 --> 00:27:25,200
so i know this is an example if i want

883
00:27:25,200 --> 00:27:28,880
to test this out so let's copy this over

884
00:27:28,880 --> 00:27:30,880
and let's put this into the api post

885
00:27:30,880 --> 00:27:32,559
request gateway so we want we want to

886
00:27:32,559 --> 00:27:34,080
test out this service and

887
00:27:34,080 --> 00:27:35,760
if it's a get request we'd put it in

888
00:27:35,760 --> 00:27:37,760
here you can add some custom headers or

889
00:27:37,760 --> 00:27:38,960
anything like that

890
00:27:38,960 --> 00:27:40,080
we're going to go straight to the

891
00:27:40,080 --> 00:27:42,399
request body and paste this in now

892
00:27:42,399 --> 00:27:44,960
this program already exists so just for

893
00:27:44,960 --> 00:27:46,240
demo purposes this

894
00:27:46,240 --> 00:27:48,080
shows something that's completely brand

895
00:27:48,080 --> 00:27:50,240
new let's call this

896
00:27:50,240 --> 00:27:53,840
recon let's actually call it defcon

897
00:27:53,840 --> 00:27:56,799
recon village so we'll start that's

898
00:27:56,799 --> 00:27:58,240
going to be our program name we're going

899
00:27:58,240 --> 00:27:59,120
to look for

900
00:27:59,120 --> 00:28:00,320
here's our scope in so we're going to

901
00:28:00,320 --> 00:28:02,000
give it a wildcard to make sure that we

902
00:28:02,000 --> 00:28:02,480
can do

903
00:28:02,480 --> 00:28:05,279
some additional recon steps uh add

904
00:28:05,279 --> 00:28:06,399
another site and let's

905
00:28:06,399 --> 00:28:08,559
put a an out of scope site as well and

906
00:28:08,559 --> 00:28:10,000
then we'll call it an external platform

907
00:28:10,000 --> 00:28:11,440
and this is all my own so what we're

908
00:28:11,440 --> 00:28:13,919
basically going to do is crawl my blog

909
00:28:13,919 --> 00:28:16,000
for for sites so we're going to kick

910
00:28:16,000 --> 00:28:19,440
this off here and say test we should get

911
00:28:19,440 --> 00:28:21,600
a response in a second

912
00:28:21,600 --> 00:28:24,480
which tells us whether it successfully

913
00:28:24,480 --> 00:28:26,159
loads or not

914
00:28:26,159 --> 00:28:28,080
let's hope for success program

915
00:28:28,080 --> 00:28:29,360
successfully created

916
00:28:29,360 --> 00:28:32,480
so it created the program and it's most

917
00:28:32,480 --> 00:28:34,960
likely entered into our step functions

918
00:28:34,960 --> 00:28:36,720
functionality here so let's let's go

919
00:28:36,720 --> 00:28:38,000
into aws stem

920
00:28:38,000 --> 00:28:39,679
step functions and this is our

921
00:28:39,679 --> 00:28:41,440
orchestration unit so we can see it's

922
00:28:41,440 --> 00:28:42,960
running right now so let's let's click

923
00:28:42,960 --> 00:28:45,440
in here and see what it's doing

924
00:28:45,440 --> 00:28:47,440
i love how you can get kind of a visual

925
00:28:47,440 --> 00:28:49,200
status of what all it's going through so

926
00:28:49,200 --> 00:28:49,760
as we

927
00:28:49,760 --> 00:28:51,440
as we go through here it hits the first

928
00:28:51,440 --> 00:28:53,039
choice

929
00:28:53,039 --> 00:28:55,120
and it kicks over to program build based

930
00:28:55,120 --> 00:28:56,880
on the operations we send it

931
00:28:56,880 --> 00:28:59,679
so it built the program or loaded into

932
00:28:59,679 --> 00:29:01,440
dynamodb

933
00:29:01,440 --> 00:29:03,200
and then what it does is it checks the

934
00:29:03,200 --> 00:29:05,440
build status it feels successful

935
00:29:05,440 --> 00:29:07,679
it goes in and goes ahead and does a

936
00:29:07,679 --> 00:29:09,039
sonar query against the

937
00:29:09,039 --> 00:29:12,399
rapid7 data set of basically the four

938
00:29:12,399 --> 00:29:15,760
dns services and so it it does an aws

939
00:29:15,760 --> 00:29:18,559
s3 bucket query using the athena service

940
00:29:18,559 --> 00:29:18,960
here

941
00:29:18,960 --> 00:29:20,399
and it's in progress so it's pulling

942
00:29:20,399 --> 00:29:22,240
those results back so if we're going to

943
00:29:22,240 --> 00:29:23,360
go into the

944
00:29:23,360 --> 00:29:26,159
athena service here we can actually go

945
00:29:26,159 --> 00:29:27,200
and look at our

946
00:29:27,200 --> 00:29:30,240
query history and we should see

947
00:29:30,240 --> 00:29:32,399
the current query it's running against

948
00:29:32,399 --> 00:29:34,640
the rapid seven forward data set

949
00:29:34,640 --> 00:29:36,559
and so here's here's what it's running

950
00:29:36,559 --> 00:29:37,760
exactly

951
00:29:37,760 --> 00:29:39,600
and it just loaded i guess i clicked it

952
00:29:39,600 --> 00:29:41,360
so we we have it here so this is what it

953
00:29:41,360 --> 00:29:42,799
automatically generates pulling the

954
00:29:42,799 --> 00:29:44,320
results back

955
00:29:44,320 --> 00:29:46,480
and once it completes it looks like it

956
00:29:46,480 --> 00:29:47,919
completed successfully

957
00:29:47,919 --> 00:29:49,440
it would have stored those results into

958
00:29:49,440 --> 00:29:51,440
an s3 bucket and now

959
00:29:51,440 --> 00:29:54,799
it's doing running httpx so since this

960
00:29:54,799 --> 00:29:55,279
is an

961
00:29:55,279 --> 00:29:57,919
active process against the actual target

962
00:29:57,919 --> 00:29:59,279
being my website

963
00:29:59,279 --> 00:30:01,200
it's going to kick off a digitalocean

964
00:30:01,200 --> 00:30:02,960
droplet to run this command and it's

965
00:30:02,960 --> 00:30:04,480
going to build install it

966
00:30:04,480 --> 00:30:06,240
everything from scratch so if we go over

967
00:30:06,240 --> 00:30:08,399
here into my digital ocean account

968
00:30:08,399 --> 00:30:10,960
you can see that this droplet just

969
00:30:10,960 --> 00:30:11,520
finished

970
00:30:11,520 --> 00:30:14,720
getting created the ip information and i

971
00:30:14,720 --> 00:30:16,480
have a naming structure so i know at

972
00:30:16,480 --> 00:30:18,880
least which program it results to so

973
00:30:18,880 --> 00:30:21,039
while this is running it's probably

974
00:30:21,039 --> 00:30:22,000
loading up everything

975
00:30:22,000 --> 00:30:23,760
it's going to do all the installs we'll

976
00:30:23,760 --> 00:30:25,120
keep an eye on that but we'll talk

977
00:30:25,120 --> 00:30:26,960
through some other steps as it goes

978
00:30:26,960 --> 00:30:28,559
so let's let's jump back to the step

979
00:30:28,559 --> 00:30:30,159
function so

980
00:30:30,159 --> 00:30:32,799
so far what is really neat about step

981
00:30:32,799 --> 00:30:33,679
functions is

982
00:30:33,679 --> 00:30:35,440
you can do something called callbacks

983
00:30:35,440 --> 00:30:37,120
and one of the limitations with

984
00:30:37,120 --> 00:30:40,640
the lambda service is that a lambda can

985
00:30:40,640 --> 00:30:42,159
only run for 15 minutes

986
00:30:42,159 --> 00:30:43,919
and you're charged for the duration that

987
00:30:43,919 --> 00:30:45,760
it runs and so when you're doing

988
00:30:45,760 --> 00:30:48,159
something like a web crawl or an https

989
00:30:48,159 --> 00:30:48,960
scan

990
00:30:48,960 --> 00:30:51,039
you really don't want your lambda

991
00:30:51,039 --> 00:30:52,880
function waiting the entire time for

992
00:30:52,880 --> 00:30:55,120
that to return back so what we did was

993
00:30:55,120 --> 00:30:57,519
we called the lambda the lambda kicked

994
00:30:57,519 --> 00:30:58,720
off the

995
00:30:58,720 --> 00:31:01,440
program gen or the operation built the

996
00:31:01,440 --> 00:31:03,360
droplet and then the lambda completed so

997
00:31:03,360 --> 00:31:04,080
it closed so

998
00:31:04,080 --> 00:31:05,760
right now we're not getting charged

999
00:31:05,760 --> 00:31:07,840
anything within the aws ecosystem for

1000
00:31:07,840 --> 00:31:08,559
running

1001
00:31:08,559 --> 00:31:10,720
and then this this step function state

1002
00:31:10,720 --> 00:31:12,240
machine is waiting on what's called a

1003
00:31:12,240 --> 00:31:13,120
callback

1004
00:31:13,120 --> 00:31:15,519
so whenever i built the droplet in the

1005
00:31:15,519 --> 00:31:17,679
in the startup script i added a callback

1006
00:31:17,679 --> 00:31:18,080
task

1007
00:31:18,080 --> 00:31:19,840
that says when you get to the end of

1008
00:31:19,840 --> 00:31:21,440
this the last thing to do before

1009
00:31:21,440 --> 00:31:22,640
shutting down

1010
00:31:22,640 --> 00:31:25,440
is to make an api call to the step

1011
00:31:25,440 --> 00:31:27,360
function service in aws

1012
00:31:27,360 --> 00:31:29,039
and tell it that you've completed your

1013
00:31:29,039 --> 00:31:30,720
journey and then

1014
00:31:30,720 --> 00:31:32,640
success or fail and when it reads that

1015
00:31:32,640 --> 00:31:34,640
in it will it will determine where to go

1016
00:31:34,640 --> 00:31:36,399
next in the workflow so

1017
00:31:36,399 --> 00:31:38,240
this workflow is essentially in a paused

1018
00:31:38,240 --> 00:31:40,320
state just waiting on that callback to

1019
00:31:40,320 --> 00:31:41,200
happen so

1020
00:31:41,200 --> 00:31:42,880
we'll give that some time and see when

1021
00:31:42,880 --> 00:31:45,279
that happens

1022
00:31:45,279 --> 00:31:47,120
what else can we jump into here as we're

1023
00:31:47,120 --> 00:31:48,559
as we're talking about that let's

1024
00:31:48,559 --> 00:31:51,279
let's check out some of the the actual

1025
00:31:51,279 --> 00:31:53,519
lambda function that ran

1026
00:31:53,519 --> 00:31:55,519
for the program build i think that

1027
00:31:55,519 --> 00:31:57,760
that's pretty interesting so let's

1028
00:31:57,760 --> 00:32:00,080
let's pull up these are our lambda

1029
00:32:00,080 --> 00:32:01,519
functions here what they look like so

1030
00:32:01,519 --> 00:32:03,200
we're running httpx so let's

1031
00:32:03,200 --> 00:32:06,480
look at operation httpx and so

1032
00:32:06,480 --> 00:32:08,240
basically it's listening for event

1033
00:32:08,240 --> 00:32:10,399
context every single lambda has this

1034
00:32:10,399 --> 00:32:11,919
same kind of format

1035
00:32:11,919 --> 00:32:15,039
so it was sent in event into it

1036
00:32:15,039 --> 00:32:17,200
and you can see the events get triggered

1037
00:32:17,200 --> 00:32:19,200
as it goes down through so

1038
00:32:19,200 --> 00:32:21,200
the operation hdbex we can click here

1039
00:32:21,200 --> 00:32:22,640
and we can actually look at the step

1040
00:32:22,640 --> 00:32:24,559
input and see that this is what was

1041
00:32:24,559 --> 00:32:26,640
submitted to that lambda function so it

1042
00:32:26,640 --> 00:32:28,640
submitted the program variable

1043
00:32:28,640 --> 00:32:30,960
and the operation so when we go back to

1044
00:32:30,960 --> 00:32:32,240
that lambda

1045
00:32:32,240 --> 00:32:34,640
we will be able to see where we

1046
00:32:34,640 --> 00:32:35,519
basically go

1047
00:32:35,519 --> 00:32:38,159
we pull in some of the data parameters

1048
00:32:38,159 --> 00:32:40,080
and then we check does program exist

1049
00:32:40,080 --> 00:32:41,360
and does operation as long as we have

1050
00:32:41,360 --> 00:32:42,720
both of those things we know we're on

1051
00:32:42,720 --> 00:32:43,200
track

1052
00:32:43,200 --> 00:32:45,039
we have the right status it's going to

1053
00:32:45,039 --> 00:32:47,120
go ahead and run so it's creating some

1054
00:32:47,120 --> 00:32:49,360
initial file names of the domain storing

1055
00:32:49,360 --> 00:32:50,559
an s3

1056
00:32:50,559 --> 00:32:52,000
doing and then here's some other

1057
00:32:52,000 --> 00:32:54,159
commands where it says prepare httpx

1058
00:32:54,159 --> 00:32:56,399
generate the install script so let's

1059
00:32:56,399 --> 00:32:57,840
let's hop in and check out the install

1060
00:32:57,840 --> 00:32:59,840
script i think this is one of the

1061
00:32:59,840 --> 00:33:01,519
coolest things that it took a while to

1062
00:33:01,519 --> 00:33:03,120
figure out of thinking through

1063
00:33:03,120 --> 00:33:07,120
how am i going to manage scripts across

1064
00:33:07,120 --> 00:33:09,760
600 plus programs what if i want to make

1065
00:33:09,760 --> 00:33:11,360
a change to the syntax or what if

1066
00:33:11,360 --> 00:33:13,200
there's a project update where

1067
00:33:13,200 --> 00:33:14,880
i need to add a different command or

1068
00:33:14,880 --> 00:33:17,200
something like that when you're reliant

1069
00:33:17,200 --> 00:33:19,919
so what this does is it generates these

1070
00:33:19,919 --> 00:33:20,720
scripts

1071
00:33:20,720 --> 00:33:23,039
based on the runtime dynamically just in

1072
00:33:23,039 --> 00:33:24,480
time so i don't have like a bunch of

1073
00:33:24,480 --> 00:33:26,320
scripts just sitting ready at program

1074
00:33:26,320 --> 00:33:26,720
build

1075
00:33:26,720 --> 00:33:28,720
this actually gets generated on the fly

1076
00:33:28,720 --> 00:33:30,799
immediately before the program is

1077
00:33:30,799 --> 00:33:33,039
or before the operations initiated so i

1078
00:33:33,039 --> 00:33:34,720
only have one central place within the

1079
00:33:34,720 --> 00:33:36,799
code that i need to update these scripts

1080
00:33:36,799 --> 00:33:39,360
which makes it really easy to make

1081
00:33:39,360 --> 00:33:41,200
changes and modify and keep things up to

1082
00:33:41,200 --> 00:33:42,960
date as we go

1083
00:33:42,960 --> 00:33:44,399
so what we'll do is we'll jump down into

1084
00:33:44,399 --> 00:33:46,640
the code that does that

1085
00:33:46,640 --> 00:33:49,840
and what it is is you can see here like

1086
00:33:49,840 --> 00:33:50,159
for

1087
00:33:50,159 --> 00:33:52,480
generate script httpx what this is doing

1088
00:33:52,480 --> 00:33:54,159
is this is writing

1089
00:33:54,159 --> 00:33:56,399
this is writing the file using python

1090
00:33:56,399 --> 00:33:57,200
code

1091
00:33:57,200 --> 00:33:59,840
generating this file here so this is the

1092
00:33:59,840 --> 00:34:01,360
this is actually the operation what i'm

1093
00:34:01,360 --> 00:34:03,600
using so you can see the httpx command

1094
00:34:03,600 --> 00:34:04,320
here

1095
00:34:04,320 --> 00:34:07,279
my passing in my program name parameters

1096
00:34:07,279 --> 00:34:09,119
it gives me a program name defined

1097
00:34:09,119 --> 00:34:10,879
output so i know which one it comes from

1098
00:34:10,879 --> 00:34:12,320
in the json

1099
00:34:12,320 --> 00:34:14,000
and then i'm telling it kind of the

1100
00:34:14,000 --> 00:34:16,239
syntax of what i want from it

1101
00:34:16,239 --> 00:34:18,960
everything and then store your responses

1102
00:34:18,960 --> 00:34:20,960
so i'm storing raw responses locally on

1103
00:34:20,960 --> 00:34:21,359
that

1104
00:34:21,359 --> 00:34:23,839
droplet that's running and then

1105
00:34:23,839 --> 00:34:25,520
eventually you get to the point where it

1106
00:34:25,520 --> 00:34:27,440
gets down it gets everything finished it

1107
00:34:27,440 --> 00:34:29,440
processes it at one point i was actually

1108
00:34:29,440 --> 00:34:31,040
tarring all the responses up

1109
00:34:31,040 --> 00:34:32,480
and just storing them trying to save

1110
00:34:32,480 --> 00:34:34,560
space and compatibility but it became

1111
00:34:34,560 --> 00:34:35,119
easier

1112
00:34:35,119 --> 00:34:37,040
and more difficult and time consuming to

1113
00:34:37,040 --> 00:34:38,879
continually untar the files

1114
00:34:38,879 --> 00:34:40,320
do that especially when you're getting

1115
00:34:40,320 --> 00:34:42,639
into the millions of files individually

1116
00:34:42,639 --> 00:34:44,079
so it just does a

1117
00:34:44,079 --> 00:34:47,040
copy over to s3 this is the sync script

1118
00:34:47,040 --> 00:34:48,480
that it's just another script that's in

1119
00:34:48,480 --> 00:34:49,918
the supplementary materials you could

1120
00:34:49,918 --> 00:34:51,440
you could reference and see

1121
00:34:51,440 --> 00:34:53,119
it does that wait and then when it's

1122
00:34:53,119 --> 00:34:55,199
done this is that callback to step

1123
00:34:55,199 --> 00:34:57,200
function saying i finished everything i

1124
00:34:57,200 --> 00:34:59,280
wrote all my files back to s3

1125
00:34:59,280 --> 00:35:01,680
i'm all done here go on step functions

1126
00:35:01,680 --> 00:35:03,599
to the next thing

1127
00:35:03,599 --> 00:35:05,520
and when i write this file this is all a

1128
00:35:05,520 --> 00:35:07,440
file written to s3 so when this

1129
00:35:07,440 --> 00:35:09,680
when this droplet runs it downloads this

1130
00:35:09,680 --> 00:35:11,119
file to the server

1131
00:35:11,119 --> 00:35:13,040
and then it knows based on the variables

1132
00:35:13,040 --> 00:35:15,359
to run run this directly so you kind of

1133
00:35:15,359 --> 00:35:17,280
it's like a script to run more scripts

1134
00:35:17,280 --> 00:35:20,240
is essentially what it's doing

1135
00:35:20,240 --> 00:35:21,680
so let's go back and let's check the

1136
00:35:21,680 --> 00:35:24,000
status of our step functions here so it

1137
00:35:24,000 --> 00:35:24,960
looks like hey we

1138
00:35:24,960 --> 00:35:28,800
it succeeded it was successful and both

1139
00:35:28,800 --> 00:35:30,960
getting the httpx data and then

1140
00:35:30,960 --> 00:35:32,720
processing it so if we go back to the

1141
00:35:32,720 --> 00:35:34,960
digitalocean place we'll see that

1142
00:35:34,960 --> 00:35:36,720
hey check it out if you remember this

1143
00:35:36,720 --> 00:35:38,920
first droplet we created was called

1144
00:35:38,920 --> 00:35:41,040
brevity-httpx and it's gone so

1145
00:35:41,040 --> 00:35:42,400
that means that the lambda function

1146
00:35:42,400 --> 00:35:43,839
that's checking for the shutdown ones

1147
00:35:43,839 --> 00:35:44,560
already ran

1148
00:35:44,560 --> 00:35:46,720
deleted it for me completely gone no

1149
00:35:46,720 --> 00:35:47,839
history of it

1150
00:35:47,839 --> 00:35:50,000
and it just it's standing up right now

1151
00:35:50,000 --> 00:35:51,200
or our web crawl

1152
00:35:51,200 --> 00:35:53,760
of the of the new data that it's found

1153
00:35:53,760 --> 00:35:54,240
so

1154
00:35:54,240 --> 00:35:55,359
we'll let it go ahead and crawl and

1155
00:35:55,359 --> 00:35:56,880
we'll jump back to our step functions

1156
00:35:56,880 --> 00:35:59,200
and see what happened here

1157
00:35:59,200 --> 00:36:01,680
one thing i'm doing with the httpx data

1158
00:36:01,680 --> 00:36:02,480
that i think

1159
00:36:02,480 --> 00:36:05,280
is helpful and it's not out of box from

1160
00:36:05,280 --> 00:36:06,880
the command is when you have so many

1161
00:36:06,880 --> 00:36:08,320
different programs and you have so many

1162
00:36:08,320 --> 00:36:09,440
output files

1163
00:36:09,440 --> 00:36:11,280
it's one thing to add kind of the

1164
00:36:11,280 --> 00:36:12,960
program name to the naming convention

1165
00:36:12,960 --> 00:36:13,920
the output file

1166
00:36:13,920 --> 00:36:15,359
but what happens when you start to

1167
00:36:15,359 --> 00:36:17,760
aggregate the data directly within those

1168
00:36:17,760 --> 00:36:19,680
if it doesn't have the program reference

1169
00:36:19,680 --> 00:36:21,119
and i found that to be

1170
00:36:21,119 --> 00:36:22,640
fairly consistent across a lot of the

1171
00:36:22,640 --> 00:36:24,320
tools is that it will have the

1172
00:36:24,320 --> 00:36:26,320
information the urls the domains

1173
00:36:26,320 --> 00:36:28,079
but what happens when i do my aggregate

1174
00:36:28,079 --> 00:36:30,480
analysis and i see some random domain

1175
00:36:30,480 --> 00:36:32,720
i have no idea other than trying to

1176
00:36:32,720 --> 00:36:34,480
track down and figure out the source

1177
00:36:34,480 --> 00:36:36,800
file that it came from honestly that's

1178
00:36:36,800 --> 00:36:38,640
one of the most difficult parts is tying

1179
00:36:38,640 --> 00:36:39,200
it back

1180
00:36:39,200 --> 00:36:42,560
to the the original program so what this

1181
00:36:42,560 --> 00:36:44,560
process http x does is it

1182
00:36:44,560 --> 00:36:47,520
reads the json file within just python

1183
00:36:47,520 --> 00:36:50,320
code pulls the json and actually adds an

1184
00:36:50,320 --> 00:36:52,560
additional two elements so it adds the

1185
00:36:52,560 --> 00:36:54,000
program name and then it adds

1186
00:36:54,000 --> 00:36:56,640
the base url because it the httpx output

1187
00:36:56,640 --> 00:36:58,560
actually has the full url has the domain

1188
00:36:58,560 --> 00:36:59,760
it has the parameters

1189
00:36:59,760 --> 00:37:01,599
but it doesn't have that base and why

1190
00:37:01,599 --> 00:37:03,200
why is the base important the base is

1191
00:37:03,200 --> 00:37:04,079
important

1192
00:37:04,079 --> 00:37:06,160
for things like nuclei templates where i

1193
00:37:06,160 --> 00:37:08,320
don't want to just go after

1194
00:37:08,320 --> 00:37:10,640
something dot com slash and then my

1195
00:37:10,640 --> 00:37:11,839
nuclei

1196
00:37:11,839 --> 00:37:14,079
payload i want it to be something dot

1197
00:37:14,079 --> 00:37:16,320
com slash api slash

1198
00:37:16,320 --> 00:37:18,800
slash whatever and do that and whenever

1199
00:37:18,800 --> 00:37:20,880
i can do that generate the distinct

1200
00:37:20,880 --> 00:37:24,079
aliases are distinct url base urls

1201
00:37:24,079 --> 00:37:26,000
without any parameters or any additional

1202
00:37:26,000 --> 00:37:26,640
on there

1203
00:37:26,640 --> 00:37:28,880
it just makes it fewer and fewer bad

1204
00:37:28,880 --> 00:37:30,320
requests that i'm going to be sending to

1205
00:37:30,320 --> 00:37:31,440
these programs as i

1206
00:37:31,440 --> 00:37:34,640
as i do any type of fuzzing so as the

1207
00:37:34,640 --> 00:37:36,079
crawl goes it's going to go

1208
00:37:36,079 --> 00:37:37,599
through it's going to do a similar

1209
00:37:37,599 --> 00:37:39,200
process where i dynamically wrote the

1210
00:37:39,200 --> 00:37:40,400
crawl script it

1211
00:37:40,400 --> 00:37:42,560
feeds the crawl writes it back to s3

1212
00:37:42,560 --> 00:37:44,880
does all the processing analytics

1213
00:37:44,880 --> 00:37:47,119
and then one of the neat things that i

1214
00:37:47,119 --> 00:37:49,040
think is really neat is

1215
00:37:49,040 --> 00:37:51,599
amazon has a service called glue and

1216
00:37:51,599 --> 00:37:52,320
it's

1217
00:37:52,320 --> 00:37:54,320
basically a crawler where it can crawl

1218
00:37:54,320 --> 00:37:56,240
across an s3 bucket

1219
00:37:56,240 --> 00:37:59,599
so as security reachers or bug

1220
00:37:59,599 --> 00:38:01,520
bounty hunters we probably have hundreds

1221
00:38:01,520 --> 00:38:03,680
of output files from the same

1222
00:38:03,680 --> 00:38:05,680
tools over and over so i'll continue to

1223
00:38:05,680 --> 00:38:07,920
use httpx as the example

1224
00:38:07,920 --> 00:38:10,560
so what happens is i will aggregate all

1225
00:38:10,560 --> 00:38:11,680
100 plus

1226
00:38:11,680 --> 00:38:13,760
httpx commands that we have across

1227
00:38:13,760 --> 00:38:16,000
programs i'll put it into the same

1228
00:38:16,000 --> 00:38:18,160
directory structure within a bucket

1229
00:38:18,160 --> 00:38:20,000
and then i can set up what's called a

1230
00:38:20,000 --> 00:38:21,520
glue crawler

1231
00:38:21,520 --> 00:38:24,400
that will crawl this bucket and it will

1232
00:38:24,400 --> 00:38:25,280
automatically

1233
00:38:25,280 --> 00:38:27,200
extract the data so you can see here

1234
00:38:27,200 --> 00:38:28,720
where it goes through

1235
00:38:28,720 --> 00:38:31,040
it finds i have i've run the recon so

1236
00:38:31,040 --> 00:38:33,200
far on 91 programs i don't have all 600

1237
00:38:33,200 --> 00:38:34,640
of them yet i've been kind of going

1238
00:38:34,640 --> 00:38:36,320
slowly trying to monitor

1239
00:38:36,320 --> 00:38:37,920
two things as we go so right now i have

1240
00:38:37,920 --> 00:38:39,440
91 programs

1241
00:38:39,440 --> 00:38:43,040
you can see there's just over 10 million

1242
00:38:43,040 --> 00:38:45,440
unique urls across those 91 programs

1243
00:38:45,440 --> 00:38:46,960
that i have indexed

1244
00:38:46,960 --> 00:38:49,680
and then it will do a smart indexing so

1245
00:38:49,680 --> 00:38:51,520
it basically creates a

1246
00:38:51,520 --> 00:38:54,160
structured index table that points to

1247
00:38:54,160 --> 00:38:55,119
the raw

1248
00:38:55,119 --> 00:38:58,640
json output files of httpx with these so

1249
00:38:58,640 --> 00:39:01,920
so this is a and now i i can use the

1250
00:39:01,920 --> 00:39:04,079
athena service and use presto functions

1251
00:39:04,079 --> 00:39:05,359
and query syntax

1252
00:39:05,359 --> 00:39:08,000
and i can query programs now based on

1253
00:39:08,000 --> 00:39:10,000
the httpx aggregate

1254
00:39:10,000 --> 00:39:12,000
and you can see i i believe i have the

1255
00:39:12,000 --> 00:39:13,520
the program name these are the custom

1256
00:39:13,520 --> 00:39:14,079
the program

1257
00:39:14,079 --> 00:39:15,839
name and the base url i mentioned are

1258
00:39:15,839 --> 00:39:17,440
are not out of box from there but from

1259
00:39:17,440 --> 00:39:18,960
the processing i went ahead and added

1260
00:39:18,960 --> 00:39:20,320
those in so i can do

1261
00:39:20,320 --> 00:39:22,880
smarter queries against it so when we

1262
00:39:22,880 --> 00:39:24,640
hop back to it looks like step function

1263
00:39:24,640 --> 00:39:26,079
is still running we'll we'll give it a

1264
00:39:26,079 --> 00:39:27,680
little bit more time here

1265
00:39:27,680 --> 00:39:29,760
to run let's check on yep you can see

1266
00:39:29,760 --> 00:39:31,440
the server's still going

1267
00:39:31,440 --> 00:39:33,040
so as we're waiting let's jump into

1268
00:39:33,040 --> 00:39:34,640
athena and i'll show you what i mean by

1269
00:39:34,640 --> 00:39:36,320
some of those queries so

1270
00:39:36,320 --> 00:39:39,200
if you we pull in all the httpx data and

1271
00:39:39,200 --> 00:39:39,599
let's

1272
00:39:39,599 --> 00:39:41,359
let's use tesla as the example this was

1273
00:39:41,359 --> 00:39:43,200
a simple query i wrote but if you saw

1274
00:39:43,200 --> 00:39:43,839
like the

1275
00:39:43,839 --> 00:39:46,000
the table syntax there and you can i'll

1276
00:39:46,000 --> 00:39:47,200
expand it here

1277
00:39:47,200 --> 00:39:48,800
here's all of our all the different

1278
00:39:48,800 --> 00:39:50,240
things so if you're trying to

1279
00:39:50,240 --> 00:39:51,760
let's say you're doing fuzzing or brute

1280
00:39:51,760 --> 00:39:53,920
forcing apis you might want to look for

1281
00:39:53,920 --> 00:39:54,960
anything with the word

1282
00:39:54,960 --> 00:39:57,760
api in in the url like just like it's

1283
00:39:57,760 --> 00:39:58,800
written here

1284
00:39:58,800 --> 00:40:01,839
and then with a status code of 200 or

1285
00:40:01,839 --> 00:40:03,599
maybe you don't want 200 maybe you want

1286
00:40:03,599 --> 00:40:05,200
to try to send payloads that are going

1287
00:40:05,200 --> 00:40:07,920
to bypass a 403 forbidden or something

1288
00:40:07,920 --> 00:40:09,040
like that so

1289
00:40:09,040 --> 00:40:11,599
this query would run i hit run query and

1290
00:40:11,599 --> 00:40:12,800
it returns

1291
00:40:12,800 --> 00:40:14,960
it looks like two results we'll watch it

1292
00:40:14,960 --> 00:40:17,440
run here

1293
00:40:18,160 --> 00:40:21,440
in about four seconds it crawled 12 12

1294
00:40:21,440 --> 00:40:23,520
gigabytes of data in five seconds and it

1295
00:40:23,520 --> 00:40:24,000
returned

1296
00:40:24,000 --> 00:40:26,000
these two results here so let's let's

1297
00:40:26,000 --> 00:40:27,920
adjust this i i haven't tested this one

1298
00:40:27,920 --> 00:40:29,520
out so we'll see what happens if we do a

1299
00:40:29,520 --> 00:40:31,520
403 status if we get any more

1300
00:40:31,520 --> 00:40:33,520
or any less i don't know what will

1301
00:40:33,520 --> 00:40:34,960
happen here hopefully we have some

1302
00:40:34,960 --> 00:40:36,240
results that will be fun to talk about

1303
00:40:36,240 --> 00:40:37,520
but let's watch this run

1304
00:40:37,520 --> 00:40:40,720
all zero results that's no good

1305
00:40:40,720 --> 00:40:42,160
but you kind of see what i mean where

1306
00:40:42,160 --> 00:40:44,319
you can then start to think about well

1307
00:40:44,319 --> 00:40:47,040
what do i want to start doing downstream

1308
00:40:47,040 --> 00:40:49,200
now do i want to look for specific url

1309
00:40:49,200 --> 00:40:50,960
parameters or anything you write this in

1310
00:40:50,960 --> 00:40:51,599
here

1311
00:40:51,599 --> 00:40:53,760
and then what's cool is the at the

1312
00:40:53,760 --> 00:40:55,599
completion of every one of these queries

1313
00:40:55,599 --> 00:40:58,160
it outputs it into a csv file into an s3

1314
00:40:58,160 --> 00:40:58,960
bucket

1315
00:40:58,960 --> 00:41:01,200
so if you take that ephemeral approach

1316
00:41:01,200 --> 00:41:03,520
for a nuclei template or something

1317
00:41:03,520 --> 00:41:06,000
i can do the same ephemeral startup of a

1318
00:41:06,000 --> 00:41:06,880
droplet

1319
00:41:06,880 --> 00:41:10,319
install nuclei and then i can pull this

1320
00:41:10,319 --> 00:41:12,800
query that only maybe i write it so that

1321
00:41:12,800 --> 00:41:14,800
it only selects url so that way i just

1322
00:41:14,800 --> 00:41:16,480
have a list of urls that meet this

1323
00:41:16,480 --> 00:41:17,599
criteria

1324
00:41:17,599 --> 00:41:19,119
download it to the s3 bucket and

1325
00:41:19,119 --> 00:41:20,880
automatically pull that as my word list

1326
00:41:20,880 --> 00:41:22,480
that feeds in the urls

1327
00:41:22,480 --> 00:41:24,960
that it puts that targets for from an

1328
00:41:24,960 --> 00:41:26,480
intelligent standpoint so

1329
00:41:26,480 --> 00:41:28,560
i've just increased the likelihood that

1330
00:41:28,560 --> 00:41:30,079
i'm going to have a hit without having

1331
00:41:30,079 --> 00:41:31,440
to send millions and millions of

1332
00:41:31,440 --> 00:41:32,480
requests that are just

1333
00:41:32,480 --> 00:41:35,359
never ever going to to have a finding a

1334
00:41:35,359 --> 00:41:36,560
result so

1335
00:41:36,560 --> 00:41:38,240
i think i think that's pretty cool and

1336
00:41:38,240 --> 00:41:40,160
i'm really excited to dig in more and

1337
00:41:40,160 --> 00:41:40,880
more

1338
00:41:40,880 --> 00:41:44,560
doing doing some of that there

1339
00:41:44,640 --> 00:41:46,960
all right so when we hop back into our

1340
00:41:46,960 --> 00:41:48,800
workflow and step functions it looks

1341
00:41:48,800 --> 00:41:50,079
like our command's

1342
00:41:50,079 --> 00:41:52,560
finally completed so let's check it out

1343
00:41:52,560 --> 00:41:54,960
i think one of the fastest ways to do is

1344
00:41:54,960 --> 00:41:55,599
do the

1345
00:41:55,599 --> 00:41:57,760
the glue athena search so let's let's

1346
00:41:57,760 --> 00:41:58,880
see if the

1347
00:41:58,880 --> 00:42:00,880
updated table is actually successfully

1348
00:42:00,880 --> 00:42:02,720
updated if we do a

1349
00:42:02,720 --> 00:42:04,640
quick athena query here we'll we'll use

1350
00:42:04,640 --> 00:42:06,880
this previous one and let's

1351
00:42:06,880 --> 00:42:09,920
let's create a new query

1352
00:42:09,920 --> 00:42:11,760
and then we're going to say select the

1353
00:42:11,760 --> 00:42:14,640
url the content length from here

1354
00:42:14,640 --> 00:42:16,640
let's just get out the let's take out

1355
00:42:16,640 --> 00:42:18,079
the url api

1356
00:42:18,079 --> 00:42:20,079
while card and status and let's just

1357
00:42:20,079 --> 00:42:22,480
skip straight to program so we have

1358
00:42:22,480 --> 00:42:26,240
where program equals what did we call it

1359
00:42:26,240 --> 00:42:27,599
we called it

1360
00:42:27,599 --> 00:42:30,800
defcon recon village

1361
00:42:30,800 --> 00:42:32,480
order by content link that looks fine

1362
00:42:32,480 --> 00:42:34,319
let's let's run in just see if it worked

1363
00:42:34,319 --> 00:42:37,200
see what we have here

1364
00:42:38,720 --> 00:42:40,640
should take about five seconds and check

1365
00:42:40,640 --> 00:42:42,560
it out here's our program here's all of

1366
00:42:42,560 --> 00:42:43,359
our

1367
00:42:43,359 --> 00:42:46,240
our urls and ordered by content links so

1368
00:42:46,240 --> 00:42:47,599
we can kind of see what returned what

1369
00:42:47,599 --> 00:42:48,880
didn't

1370
00:42:48,880 --> 00:42:51,359
and i think the last thing the show is

1371
00:42:51,359 --> 00:42:53,119
just the recon dashboard so you can see

1372
00:42:53,119 --> 00:42:53,839
i can

1373
00:42:53,839 --> 00:42:56,079
automatically update this dashboard to

1374
00:42:56,079 --> 00:42:58,240
pull in the data so i have

1375
00:42:58,240 --> 00:43:00,319
was that eight just over eight million

1376
00:43:00,319 --> 00:43:01,839
rows imported here

1377
00:43:01,839 --> 00:43:03,839
into these analytics and i've i've

1378
00:43:03,839 --> 00:43:06,640
already custom sorted by program here

1379
00:43:06,640 --> 00:43:08,000
i don't think i have it filtered on

1380
00:43:08,000 --> 00:43:09,520
private and bytes public input so i'm

1381
00:43:09,520 --> 00:43:11,200
not going to hit the drop down

1382
00:43:11,200 --> 00:43:13,280
but you can see that i have 91 total

1383
00:43:13,280 --> 00:43:15,040
programs count of urls

1384
00:43:15,040 --> 00:43:17,359
this has 8 million urls generated in

1385
00:43:17,359 --> 00:43:19,359
there i have a dashboard of

1386
00:43:19,359 --> 00:43:22,160
i can look for like random response

1387
00:43:22,160 --> 00:43:24,319
codes that might be anomalies so

1388
00:43:24,319 --> 00:43:26,240
if i scroll down i bottom ranked or we

1389
00:43:26,240 --> 00:43:28,560
have some that's a 300 response code i

1390
00:43:28,560 --> 00:43:29,760
don't even know what that is but

1391
00:43:29,760 --> 00:43:30,800
it sounds like something we should

1392
00:43:30,800 --> 00:43:33,920
probably check out or a 202 or a 203 if

1393
00:43:33,920 --> 00:43:35,839
if i have one result out of 8 million

1394
00:43:35,839 --> 00:43:36,640
requests

1395
00:43:36,640 --> 00:43:38,400
it could be an anomaly or something so

1396
00:43:38,400 --> 00:43:40,160
then we can go through there and do

1397
00:43:40,160 --> 00:43:41,520
and you'll see the different status

1398
00:43:41,520 --> 00:43:43,119
codes that we have you'll you'll notice

1399
00:43:43,119 --> 00:43:44,880
pretty quickly these are out of scope

1400
00:43:44,880 --> 00:43:46,400
there's certain things that i'm not

1401
00:43:46,400 --> 00:43:48,240
going to attack or do payloads or

1402
00:43:48,240 --> 00:43:49,119
exploitation

1403
00:43:49,119 --> 00:43:50,880
but it's still interesting to see the

1404
00:43:50,880 --> 00:43:52,319
third party libraries that you might

1405
00:43:52,319 --> 00:43:53,680
point off to or do and

1406
00:43:53,680 --> 00:43:55,119
what i think will be interesting in the

1407
00:43:55,119 --> 00:43:57,359
future as we cross examine these using

1408
00:43:57,359 --> 00:43:59,200
graph databases and things are

1409
00:43:59,200 --> 00:44:01,359
how many commonalities do we have across

1410
00:44:01,359 --> 00:44:02,720
the programs as a whole

1411
00:44:02,720 --> 00:44:04,400
all the programs are they reaching out

1412
00:44:04,400 --> 00:44:06,160
to the same javascript libraries is

1413
00:44:06,160 --> 00:44:07,599
there something that if i could go to

1414
00:44:07,599 --> 00:44:10,319
this connect facebook stk.js

1415
00:44:10,319 --> 00:44:12,880
are there 60 programs out of the 600

1416
00:44:12,880 --> 00:44:14,319
that maybe have that same

1417
00:44:14,319 --> 00:44:16,560
relationship so if if i go from a

1418
00:44:16,560 --> 00:44:19,040
facebook bug bounding program standpoint

1419
00:44:19,040 --> 00:44:21,440
find a flaw in the sdk.js file i can

1420
00:44:21,440 --> 00:44:23,040
submit that to facebook but at the same

1421
00:44:23,040 --> 00:44:24,400
time let's submit it to all the other

1422
00:44:24,400 --> 00:44:26,319
programs and try to find those

1423
00:44:26,319 --> 00:44:28,000
double up on on some of the profits

1424
00:44:28,000 --> 00:44:29,359
around this so those are some of the

1425
00:44:29,359 --> 00:44:30,160
relationship

1426
00:44:30,160 --> 00:44:32,240
techniques that you could use and apply

1427
00:44:32,240 --> 00:44:34,640
so but as we wrap up today i

1428
00:44:34,640 --> 00:44:36,480
really want to thank you for checking

1429
00:44:36,480 --> 00:44:38,160
out and just taking this journey with me

1430
00:44:38,160 --> 00:44:38,640
and

1431
00:44:38,640 --> 00:44:40,079
i know i i don't think i mentioned

1432
00:44:40,079 --> 00:44:42,400
earlier but this i probably put in about

1433
00:44:42,400 --> 00:44:44,880
500 hours honestly into this project

1434
00:44:44,880 --> 00:44:45,280
there's

1435
00:44:45,280 --> 00:44:47,359
a lot of code a lot of lessons learned a

1436
00:44:47,359 --> 00:44:50,079
lot of trial and error a ton of failures

1437
00:44:50,079 --> 00:44:52,400
and i'm i'm actually starting to see

1438
00:44:52,400 --> 00:44:54,640
some success and this is finally getting

1439
00:44:54,640 --> 00:44:55,440
to kind of the

1440
00:44:55,440 --> 00:44:58,400
the exciting part after the grind so

1441
00:44:58,400 --> 00:45:00,079
feel free to reach out to me i love

1442
00:45:00,079 --> 00:45:01,359
talking about this i'm

1443
00:45:01,359 --> 00:45:03,359
excited to learn and meet a lot more

1444
00:45:03,359 --> 00:45:04,880
people share ideas and

1445
00:45:04,880 --> 00:45:06,880
and learn how some of you are doing your

1446
00:45:06,880 --> 00:45:08,400
automation so i

1447
00:45:08,400 --> 00:45:10,240
really appreciate your time today and

1448
00:45:10,240 --> 00:45:11,440
enjoy the rest of the

1449
00:45:11,440 --> 00:45:13,440
recon village and i think the team for

1450
00:45:13,440 --> 00:45:18,160
having me thank you

