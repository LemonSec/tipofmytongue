1
00:00:00,000 --> 00:00:02,560
hi i'm adam shaw and i'm here today to

2
00:00:02,560 --> 00:00:04,319
talk to you about a deep dive in supply

3
00:00:04,319 --> 00:00:05,759
chain vulnerabilities

4
00:00:05,759 --> 00:00:08,639
and how sec devops can save the day a

5
00:00:08,639 --> 00:00:10,080
little more about me

6
00:00:10,080 --> 00:00:12,320
i'm the director of enterprise security

7
00:00:12,320 --> 00:00:14,960
at contrast security

8
00:00:14,960 --> 00:00:16,560
application security and product

9
00:00:16,560 --> 00:00:18,160
security is under my purview

10
00:00:18,160 --> 00:00:19,840
so i spent a lot of time thinking about

11
00:00:19,840 --> 00:00:21,600
supply chain vulnerabilities

12
00:00:21,600 --> 00:00:25,199
and ways to mitigate them

13
00:00:25,199 --> 00:00:27,840
especially in today's threat landscape

14
00:00:27,840 --> 00:00:30,000
i've also spent about a decade of making

15
00:00:30,000 --> 00:00:32,320
and breaking applications so i have a

16
00:00:32,320 --> 00:00:33,920
good experience kind of on both sides of

17
00:00:33,920 --> 00:00:35,600
the coin

18
00:00:35,600 --> 00:00:38,879
with development and security there's my

19
00:00:38,879 --> 00:00:40,640
twitter handle on my website if you'd

20
00:00:40,640 --> 00:00:42,559
like to follow my work

21
00:00:42,559 --> 00:00:46,000
or get in touch afterwards i'm also on

22
00:00:46,000 --> 00:00:48,559
the appsec village discord

23
00:00:48,559 --> 00:00:50,879
under the same handle clever and wise

24
00:00:50,879 --> 00:00:52,239
hit me up if you have questions about

25
00:00:52,239 --> 00:00:53,920
the content i'm producing

26
00:00:53,920 --> 00:00:56,800
or if you want to chat about my talk

27
00:00:56,800 --> 00:00:57,600
i'll be

28
00:00:57,600 --> 00:01:00,559
available after the talk as well some of

29
00:01:00,559 --> 00:01:02,239
my hobbies include family time

30
00:01:02,239 --> 00:01:04,319
home lab home automation i enjoy

31
00:01:04,319 --> 00:01:06,159
participating in ctfs

32
00:01:06,159 --> 00:01:09,280
and hackathons i also

33
00:01:09,280 --> 00:01:11,040
enjoy working with the community i

34
00:01:11,040 --> 00:01:12,479
helped start a

35
00:01:12,479 --> 00:01:15,520
uh a local cyber security conference

36
00:01:15,520 --> 00:01:18,560
in omaha nebraska called colonel con

37
00:01:18,560 --> 00:01:21,600
love for i'd love to have you out uh

38
00:01:21,600 --> 00:01:27,119
also i helped run a local defcon group

39
00:01:27,119 --> 00:01:28,720
but let's talk about supply chain

40
00:01:28,720 --> 00:01:30,880
attacks what are they

41
00:01:30,880 --> 00:01:34,479
besides being the 2021 buzzword bingo

42
00:01:34,479 --> 00:01:38,000
center square supply chain attacks are

43
00:01:38,000 --> 00:01:40,479
a cyber security attack vector where

44
00:01:40,479 --> 00:01:41,439
malicious actors

45
00:01:41,439 --> 00:01:43,439
basically target less secure elements in

46
00:01:43,439 --> 00:01:45,200
the supply chain

47
00:01:45,200 --> 00:01:48,880
so if i read that you know it's it's

48
00:01:48,880 --> 00:01:52,079
attacking the low-hanging fruit

49
00:01:52,079 --> 00:01:55,200
um recently there's been quite a few

50
00:01:55,200 --> 00:01:56,719
large supply chain attacks

51
00:01:56,719 --> 00:01:59,920
just today jfrog analyzed pi pi software

52
00:01:59,920 --> 00:02:01,439
and found eight packages

53
00:02:01,439 --> 00:02:03,600
that have been downloaded over 30 000

54
00:02:03,600 --> 00:02:06,640
times that contained malicious elements

55
00:02:06,640 --> 00:02:10,160
also in 2021 kasaya helped ransomware

56
00:02:10,160 --> 00:02:13,680
1500 businesses because of its own flaws

57
00:02:13,680 --> 00:02:16,720
in software and lack of patching you may

58
00:02:16,720 --> 00:02:19,440
have also heard of the code cove breach

59
00:02:19,440 --> 00:02:21,760
where an attacker exploited a flaw in

60
00:02:21,760 --> 00:02:23,680
the container build process

61
00:02:23,680 --> 00:02:27,360
and modified part of the bash uploader

62
00:02:27,360 --> 00:02:29,599
uh leaking environmental variables

63
00:02:29,599 --> 00:02:30,879
secrets and more

64
00:02:30,879 --> 00:02:34,879
and that affected 29 000 clients

65
00:02:34,879 --> 00:02:38,000
and 2020s big one

66
00:02:38,000 --> 00:02:40,480
uh solar winds it led to a massive

67
00:02:40,480 --> 00:02:42,319
attack on american companies

68
00:02:42,319 --> 00:02:44,959
um and the attackers basically got into

69
00:02:44,959 --> 00:02:46,640
solar winds

70
00:02:46,640 --> 00:02:49,519
uh changed some code maliciously hid

71
00:02:49,519 --> 00:02:50,640
their tracks

72
00:02:50,640 --> 00:02:53,599
and then the routine update that

73
00:02:53,599 --> 00:02:54,560
solarwinds

74
00:02:54,560 --> 00:02:57,599
sent to all of its clients

75
00:02:57,599 --> 00:03:00,080
then added all the malicious code and

76
00:03:00,080 --> 00:03:00,879
backdoors

77
00:03:00,879 --> 00:03:04,080
to all of their clients it was a huge

78
00:03:04,080 --> 00:03:07,120
attack at 2020. these are recent attacks

79
00:03:07,120 --> 00:03:07,920
though

80
00:03:07,920 --> 00:03:12,159
um when i look at like the timeline of

81
00:03:12,159 --> 00:03:15,360
supply chain attacks uh one of the first

82
00:03:15,360 --> 00:03:17,720
ones can be traced back to

83
00:03:17,720 --> 00:03:20,959
1983 when ken thompson

84
00:03:20,959 --> 00:03:23,440
the co-author of unix he created a c

85
00:03:23,440 --> 00:03:24,239
compiler

86
00:03:24,239 --> 00:03:26,959
that backdoored every program so these

87
00:03:26,959 --> 00:03:28,879
have been

88
00:03:28,879 --> 00:03:32,000
you know in the in the news and

89
00:03:32,000 --> 00:03:34,640
uh infosec communities have been aware

90
00:03:34,640 --> 00:03:36,959
of it since 1983.

91
00:03:36,959 --> 00:03:41,120
so why are they still so prevalent today

92
00:03:41,120 --> 00:03:44,239
right why is

93
00:03:44,239 --> 00:03:46,560
supply chain attacks you know such a big

94
00:03:46,560 --> 00:03:47,360
deal

95
00:03:47,360 --> 00:03:51,040
now well it's that weakest link part

96
00:03:51,040 --> 00:03:54,480
right um when we look at the difficulty

97
00:03:54,480 --> 00:03:55,760
of an exploit

98
00:03:55,760 --> 00:03:58,159
uh operating system attacks have always

99
00:03:58,159 --> 00:04:00,560
been more difficult to exploit than

100
00:04:00,560 --> 00:04:02,560
somewhere along the line in the supply

101
00:04:02,560 --> 00:04:03,840
chain but

102
00:04:03,840 --> 00:04:07,120
it isn't until modern day times where

103
00:04:07,120 --> 00:04:09,439
supply chain attacks have actually

104
00:04:09,439 --> 00:04:10,560
started to really

105
00:04:10,560 --> 00:04:13,760
build out its impact level

106
00:04:13,760 --> 00:04:16,639
today's software you know takes an

107
00:04:16,639 --> 00:04:18,880
enormous amount of

108
00:04:18,880 --> 00:04:21,600
dependencies i think that something like

109
00:04:21,600 --> 00:04:23,199
98 99

110
00:04:23,199 --> 00:04:26,000
of software has dependencies of some

111
00:04:26,000 --> 00:04:26,800
sort

112
00:04:26,800 --> 00:04:30,400
and now um supply chain attacks

113
00:04:30,400 --> 00:04:32,560
have the ability to have a large impact

114
00:04:32,560 --> 00:04:35,199
on communities

115
00:04:35,199 --> 00:04:38,720
so um yeah that large impact

116
00:04:38,720 --> 00:04:41,919
there's dependencies in the code uh mpm

117
00:04:41,919 --> 00:04:45,360
yarn maven pi pi nuget uh all kinds of

118
00:04:45,360 --> 00:04:46,080
things

119
00:04:46,080 --> 00:04:47,520
and there's microservices in the

120
00:04:47,520 --> 00:04:49,520
architecture

121
00:04:49,520 --> 00:04:50,639
and then there's vendors in the

122
00:04:50,639 --> 00:04:52,800
environment and then hardware and

123
00:04:52,800 --> 00:04:53,919
everything

124
00:04:53,919 --> 00:04:57,680
and you didn't write any of this

125
00:04:57,680 --> 00:05:01,039
uh that uh trusting trust

126
00:05:01,039 --> 00:05:04,400
uh paper that ken thompson wrote um

127
00:05:04,400 --> 00:05:06,160
in there he says you can't trust

128
00:05:06,160 --> 00:05:08,639
anything unless you write it yourself

129
00:05:08,639 --> 00:05:12,000
but in modern software

130
00:05:12,000 --> 00:05:13,280
the amount of stuff that you write

131
00:05:13,280 --> 00:05:15,199
yourself is so little

132
00:05:15,199 --> 00:05:16,479
compared to what you're pulling from

133
00:05:16,479 --> 00:05:18,320
other people that

134
00:05:18,320 --> 00:05:21,600
it's pretty much impossible you know you

135
00:05:21,600 --> 00:05:24,000
didn't write your vendors you didn't you

136
00:05:24,000 --> 00:05:25,360
didn't write the

137
00:05:25,360 --> 00:05:27,280
hardware you didn't write all your

138
00:05:27,280 --> 00:05:30,080
dependencies

139
00:05:30,160 --> 00:05:33,199
but talking about this it makes you

140
00:05:33,199 --> 00:05:35,360
sound like oh my gosh

141
00:05:35,360 --> 00:05:39,120
you can't find pepe silva right

142
00:05:39,120 --> 00:05:41,360
well this scope is just way too big to

143
00:05:41,360 --> 00:05:42,880
discuss all of this

144
00:05:42,880 --> 00:05:45,759
so we need to we need to narrow our

145
00:05:45,759 --> 00:05:47,680
scope a little bit we need to

146
00:05:47,680 --> 00:05:51,120
bring it down so today's talk

147
00:05:51,120 --> 00:05:52,639
we're going to focus on javascript

148
00:05:52,639 --> 00:05:55,039
attacks um

149
00:05:55,039 --> 00:05:56,880
many projects use javascript and build

150
00:05:56,880 --> 00:05:58,080
dependencies

151
00:05:58,080 --> 00:05:59,840
there's a wide range of an experience of

152
00:05:59,840 --> 00:06:01,680
experience and use

153
00:06:01,680 --> 00:06:04,880
so i hope that a lot of people viewing

154
00:06:04,880 --> 00:06:05,600
this talk

155
00:06:05,600 --> 00:06:08,960
can relate uh also um most of the

156
00:06:08,960 --> 00:06:11,120
defensive strategies that we discuss

157
00:06:11,120 --> 00:06:14,160
can be used in other supply chain um

158
00:06:14,160 --> 00:06:17,360
mitigations so i'm hoping that this is

159
00:06:17,360 --> 00:06:19,360
uh ubiquitous enough that people can

160
00:06:19,360 --> 00:06:20,400
take

161
00:06:20,400 --> 00:06:22,720
pieces of this and apply it to other

162
00:06:22,720 --> 00:06:23,840
different

163
00:06:23,840 --> 00:06:28,000
uh software or supply chain levels

164
00:06:28,000 --> 00:06:30,800
and then lastly one of the reasons why i

165
00:06:30,800 --> 00:06:32,800
want to focus on js attacks

166
00:06:32,800 --> 00:06:36,160
was in may of this year the node.js

167
00:06:36,160 --> 00:06:38,000
vulnerability reporting program

168
00:06:38,000 --> 00:06:40,880
shut down and they closed all of their

169
00:06:40,880 --> 00:06:42,400
existing reports

170
00:06:42,400 --> 00:06:44,800
with an ask that researchers reopened

171
00:06:44,800 --> 00:06:45,840
their findings

172
00:06:45,840 --> 00:06:49,120
through a private company and uh

173
00:06:49,120 --> 00:06:51,680
nothing against the private company but

174
00:06:51,680 --> 00:06:53,039
um

175
00:06:53,039 --> 00:06:54,479
a lot of researchers aren't going to

176
00:06:54,479 --> 00:06:56,080
double dip their the work

177
00:06:56,080 --> 00:06:58,800
or they've moved on and so i worry that

178
00:06:58,800 --> 00:06:59,680
there's

179
00:06:59,680 --> 00:07:01,840
you know hanging node vulnerabilities

180
00:07:01,840 --> 00:07:03,360
that just never got

181
00:07:03,360 --> 00:07:06,639
uh never got triaged or any attention

182
00:07:06,639 --> 00:07:08,000
because they were in the

183
00:07:08,000 --> 00:07:10,639
backlog of the nodejs vulnerability

184
00:07:10,639 --> 00:07:12,080
reporting program

185
00:07:12,080 --> 00:07:15,440
and now they're uh now they're

186
00:07:15,440 --> 00:07:20,160
you know closed so

187
00:07:20,240 --> 00:07:22,960
uh let's talk about the problem with the

188
00:07:22,960 --> 00:07:24,880
javascript supply chain though

189
00:07:24,880 --> 00:07:27,199
this is a fact modern software contains

190
00:07:27,199 --> 00:07:28,560
only about 22

191
00:07:28,560 --> 00:07:32,160
custom code uh that's modern javascript

192
00:07:32,160 --> 00:07:35,840
uh applications so 78 of it comes from

193
00:07:35,840 --> 00:07:37,919
open source dependencies or link

194
00:07:37,919 --> 00:07:40,479
link or language libraries which is an

195
00:07:40,479 --> 00:07:42,319
incredible amount when you think about

196
00:07:42,319 --> 00:07:42,960
it

197
00:07:42,960 --> 00:07:45,440
over almost eighty percent of your code

198
00:07:45,440 --> 00:07:47,360
you didn't write

199
00:07:47,360 --> 00:07:50,400
and there's a problem with that um

200
00:07:50,400 --> 00:07:52,319
it's almost impossible to audit all of

201
00:07:52,319 --> 00:07:54,160
the code and dependencies

202
00:07:54,160 --> 00:07:56,160
uh managing vulnerabilities in

203
00:07:56,160 --> 00:07:57,520
dependencies is

204
00:07:57,520 --> 00:07:59,759
is cumbersome and nearly impossible

205
00:07:59,759 --> 00:08:01,360
right um

206
00:08:01,360 --> 00:08:03,199
and updating dependencies means

207
00:08:03,199 --> 00:08:05,280
continuously bringing in new code

208
00:08:05,280 --> 00:08:08,479
that hasn't been evaluated yet yet so

209
00:08:08,479 --> 00:08:11,520
when you have code that

210
00:08:11,520 --> 00:08:14,000
when you have code that goes in a

211
00:08:14,000 --> 00:08:17,039
dependency that asks for an update

212
00:08:17,039 --> 00:08:19,680
you have to bring in code that you

213
00:08:19,680 --> 00:08:20,879
haven't actually

214
00:08:20,879 --> 00:08:23,919
like looked at and so it's risky to just

215
00:08:23,919 --> 00:08:27,680
update even in other words

216
00:08:27,680 --> 00:08:29,599
when you look at a dependency here this

217
00:08:29,599 --> 00:08:31,759
is an engine i o dependency this brings

218
00:08:31,759 --> 00:08:32,000
in

219
00:08:32,000 --> 00:08:34,958
18 other dependencies so it's it's

220
00:08:34,958 --> 00:08:36,080
basically

221
00:08:36,080 --> 00:08:39,120
a human pyramid right it's it's as

222
00:08:39,120 --> 00:08:41,599
secure or as safe as its weakest link

223
00:08:41,599 --> 00:08:43,360
i mean look at that that guy in the blue

224
00:08:43,360 --> 00:08:46,000
hoodie he's definitely falling

225
00:08:46,000 --> 00:08:50,480
and that pyramid is gonna collapse

226
00:08:50,720 --> 00:08:53,680
so let's examine some case studies and

227
00:08:53,680 --> 00:08:54,880
learn from mistakes

228
00:08:54,880 --> 00:08:57,680
that can help us inform solutions these

229
00:08:57,680 --> 00:08:58,560
are some of the most

230
00:08:58,560 --> 00:09:03,680
famous famous cases supply chain attack

231
00:09:03,680 --> 00:09:08,560
attacks in in javascript applications

232
00:09:08,560 --> 00:09:12,000
uh well not this one uh this is the this

233
00:09:12,000 --> 00:09:12,640
is

234
00:09:12,640 --> 00:09:15,279
uh popular it's a typo squatting

235
00:09:15,279 --> 00:09:16,320
vulnerability

236
00:09:16,320 --> 00:09:19,680
um i uh i made this for a ctf

237
00:09:19,680 --> 00:09:23,519
two years ago i cloned a react js

238
00:09:23,519 --> 00:09:26,560
color picker and then i added

239
00:09:26,560 --> 00:09:29,519
some code around it warning people about

240
00:09:29,519 --> 00:09:31,680
type of squatting vulnerabilities

241
00:09:31,680 --> 00:09:34,800
and i even have a flag

242
00:09:34,800 --> 00:09:39,040
i discuss different types of

243
00:09:39,040 --> 00:09:41,760
supply chain vulnerabilities and yet it

244
00:09:41,760 --> 00:09:42,480
still gets

245
00:09:42,480 --> 00:09:46,240
eight weekly downloads to this day

246
00:09:46,240 --> 00:09:47,920
people are still downloading this

247
00:09:47,920 --> 00:09:50,320
because they um

248
00:09:50,320 --> 00:09:52,160
you know they spelled color with the

249
00:09:52,160 --> 00:09:54,000
british way and they forgot an e

250
00:09:54,000 --> 00:09:57,120
and on the word picker and people still

251
00:09:57,120 --> 00:09:58,399
end up downloading

252
00:09:58,399 --> 00:10:01,519
this color picker and even though

253
00:10:01,519 --> 00:10:03,760
in the read me i talk about typo

254
00:10:03,760 --> 00:10:04,560
squatting

255
00:10:04,560 --> 00:10:07,120
and i say this is not the package you

256
00:10:07,120 --> 00:10:08,560
think it is

257
00:10:08,560 --> 00:10:10,959
and people are still downloading it

258
00:10:10,959 --> 00:10:13,600
which just blows my mind

259
00:10:13,600 --> 00:10:14,880
that's that's basically what type of

260
00:10:14,880 --> 00:10:16,880
squatting is is uh

261
00:10:16,880 --> 00:10:19,519
somebody goes and they downloads a

262
00:10:19,519 --> 00:10:20,560
package

263
00:10:20,560 --> 00:10:24,640
that they didn't intend to

264
00:10:24,640 --> 00:10:27,360
uh let's talk about a malicious update

265
00:10:27,360 --> 00:10:28,399
this is a

266
00:10:28,399 --> 00:10:31,279
this is um a very famous vulnerability

267
00:10:31,279 --> 00:10:32,240
that i thought

268
00:10:32,240 --> 00:10:35,600
was insane

269
00:10:35,600 --> 00:10:38,160
with the amount of thought that went

270
00:10:38,160 --> 00:10:40,880
into it by the attacker

271
00:10:40,880 --> 00:10:43,519
event event stream was a very popular

272
00:10:43,519 --> 00:10:44,800
npm package

273
00:10:44,800 --> 00:10:46,959
which exposed a lot of node helpers for

274
00:10:46,959 --> 00:10:48,560
working within streams

275
00:10:48,560 --> 00:10:53,839
it had 1.9 million weekly downloads

276
00:10:53,839 --> 00:10:55,920
there's two characters in this story

277
00:10:55,920 --> 00:10:57,360
there's dominic

278
00:10:57,360 --> 00:10:59,680
uh and right nine control or the bad

279
00:10:59,680 --> 00:11:00,560
actor

280
00:11:00,560 --> 00:11:04,240
uh dominic is a 10x engineer he's

281
00:11:04,240 --> 00:11:06,720
uh you know he's built out 600 or

282
00:11:06,720 --> 00:11:07,920
something

283
00:11:07,920 --> 00:11:11,120
npm repos and

284
00:11:11,120 --> 00:11:15,360
packages and uh he has

285
00:11:15,360 --> 00:11:18,480
you know a crazy level of um

286
00:11:18,480 --> 00:11:22,000
community help that he's built out so

287
00:11:22,000 --> 00:11:25,920
uh dominic created event stream

288
00:11:25,920 --> 00:11:29,760
uh in 2011 and it had been kind of

289
00:11:29,760 --> 00:11:32,800
in maintenance mode for two years before

290
00:11:32,800 --> 00:11:33,600
september

291
00:11:33,600 --> 00:11:37,040
18th um right nine control

292
00:11:37,040 --> 00:11:40,480
made a few commits on github basically

293
00:11:40,480 --> 00:11:42,959
adding unnecessary stuff to the repo

294
00:11:42,959 --> 00:11:46,320
uh he then emailed dominic and said

295
00:11:46,320 --> 00:11:48,720
can i have permission to publish from

296
00:11:48,720 --> 00:11:51,040
this repo to npm

297
00:11:51,040 --> 00:11:53,440
uh dominic went ahead and granted

298
00:11:53,440 --> 00:11:54,839
permission

299
00:11:54,839 --> 00:11:59,040
um then in the middle of september 2018

300
00:11:59,040 --> 00:12:02,000
he made a few more commits he actually

301
00:12:02,000 --> 00:12:03,920
like deleted some of his previous

302
00:12:03,920 --> 00:12:05,600
commits it was

303
00:12:05,600 --> 00:12:07,600
uh if you were actually watching these

304
00:12:07,600 --> 00:12:09,839
commits it was kind of obvious that he

305
00:12:09,839 --> 00:12:11,279
was just

306
00:12:11,279 --> 00:12:13,920
um doing whatever he wanted and it

307
00:12:13,920 --> 00:12:14,639
didn't

308
00:12:14,639 --> 00:12:17,920
make any real impact on the code uh

309
00:12:17,920 --> 00:12:19,920
and then he emailed dominic and he asked

310
00:12:19,920 --> 00:12:21,920
for ownership of the github repo

311
00:12:21,920 --> 00:12:25,360
and the mpm package now dominic

312
00:12:25,360 --> 00:12:27,920
wrote this in 2011 this is seven years

313
00:12:27,920 --> 00:12:28,800
later

314
00:12:28,800 --> 00:12:33,040
and dominic had already moved off of it

315
00:12:33,040 --> 00:12:35,279
you know he had been two years where he

316
00:12:35,279 --> 00:12:37,519
hadn't made a commit

317
00:12:37,519 --> 00:12:40,320
but this package was still getting 1.9

318
00:12:40,320 --> 00:12:42,560
million weekly downloads

319
00:12:42,560 --> 00:12:44,720
so dominic went ahead and transferred

320
00:12:44,720 --> 00:12:46,240
the ownership he doesn't

321
00:12:46,240 --> 00:12:48,399
get anything from it he hasn't used it

322
00:12:48,399 --> 00:12:49,279
for years

323
00:12:49,279 --> 00:12:51,200
um so he went ahead and transferred the

324
00:12:51,200 --> 00:12:52,560
ability to publish

325
00:12:52,560 --> 00:12:56,079
to the npm repo to the bad actor

326
00:12:56,079 --> 00:12:59,519
he also attempted to move the entire

327
00:12:59,519 --> 00:13:01,040
github repo

328
00:13:01,040 --> 00:13:03,680
to the attacker this is where the

329
00:13:03,680 --> 00:13:05,760
attacker

330
00:13:05,760 --> 00:13:08,480
he really big brained it he uh he

331
00:13:08,480 --> 00:13:08,959
actually

332
00:13:08,959 --> 00:13:12,399
forked dominic's repo so dominic

333
00:13:12,399 --> 00:13:16,560
couldn't transfer the github repository

334
00:13:16,560 --> 00:13:21,040
to right nine control because uh he had

335
00:13:21,040 --> 00:13:23,760
a repo with the same name so he couldn't

336
00:13:23,760 --> 00:13:24,560
transfer it

337
00:13:24,560 --> 00:13:27,200
over to him and so dominic still

338
00:13:27,200 --> 00:13:28,320
maintained

339
00:13:28,320 --> 00:13:32,639
the repo under under his user

340
00:13:32,639 --> 00:13:35,760
um right nine control had ownership of

341
00:13:35,760 --> 00:13:36,880
the repo

342
00:13:36,880 --> 00:13:40,160
um as did dominic but uh

343
00:13:40,160 --> 00:13:42,720
if people went and looked at it it still

344
00:13:42,720 --> 00:13:45,120
looks like it's under the same trusty

345
00:13:45,120 --> 00:13:48,160
trusty person who's you know always

346
00:13:48,160 --> 00:13:49,279
maintained it

347
00:13:49,279 --> 00:13:52,160
because right nine control basically

348
00:13:52,160 --> 00:13:56,000
blocked the transfer intentionally

349
00:13:56,959 --> 00:13:59,920
uh then september 9th uh right nine

350
00:13:59,920 --> 00:14:00,560
control

351
00:14:00,560 --> 00:14:02,079
that's this is where he kind of went

352
00:14:02,079 --> 00:14:04,880
nuts he adds the dependency flatmap

353
00:14:04,880 --> 00:14:05,440
stream

354
00:14:05,440 --> 00:14:08,560
into the github repository and he

355
00:14:08,560 --> 00:14:12,160
published it to the npm package so

356
00:14:12,160 --> 00:14:15,760
uh flatmap stream was a

357
00:14:15,760 --> 00:14:18,959
a dependency of event stream and event

358
00:14:18,959 --> 00:14:19,920
stream

359
00:14:19,920 --> 00:14:22,000
was a dependency of a lot of major

360
00:14:22,000 --> 00:14:23,680
software at the time

361
00:14:23,680 --> 00:14:27,040
so that's why it had such high volume

362
00:14:27,040 --> 00:14:29,279
so now when you look at this dependency

363
00:14:29,279 --> 00:14:31,040
map um

364
00:14:31,040 --> 00:14:33,519
you know flat map stream is now the one

365
00:14:33,519 --> 00:14:34,079
of the

366
00:14:34,079 --> 00:14:37,360
um dependencies of event stream and

367
00:14:37,360 --> 00:14:40,639
flat map stream turns out actually had

368
00:14:40,639 --> 00:14:41,360
vulnerable

369
00:14:41,360 --> 00:14:44,240
malicious code in it and this code would

370
00:14:44,240 --> 00:14:45,600
look for

371
00:14:45,600 --> 00:14:49,120
um certain crypto wallets on your

372
00:14:49,120 --> 00:14:52,079
file system and if you had said crypto

373
00:14:52,079 --> 00:14:52,880
wallets

374
00:14:52,880 --> 00:14:56,000
then it would try to break them and

375
00:14:56,000 --> 00:14:58,560
send uh your cryptocurrency and your

376
00:14:58,560 --> 00:14:59,440
keys

377
00:14:59,440 --> 00:15:02,560
uh back to an attacker back to a server

378
00:15:02,560 --> 00:15:04,560
which the attacker controlled

379
00:15:04,560 --> 00:15:08,320
so right now he adds this vulnerability

380
00:15:08,320 --> 00:15:10,720
and he uh he adds the malicious code and

381
00:15:10,720 --> 00:15:12,079
he publishes it

382
00:15:12,079 --> 00:15:14,959
then a week later he actually removes

383
00:15:14,959 --> 00:15:16,079
the dependency

384
00:15:16,079 --> 00:15:18,079
and implements it manually which you

385
00:15:18,079 --> 00:15:19,920
think okay well maybe he figured out it

386
00:15:19,920 --> 00:15:21,360
was malicious

387
00:15:21,360 --> 00:15:23,279
here's where here's where the difference

388
00:15:23,279 --> 00:15:26,000
matters he publishes it to mpm as

389
00:15:26,000 --> 00:15:29,040
a major major version number

390
00:15:29,040 --> 00:15:33,600
so by updating the major version

391
00:15:33,600 --> 00:15:36,800
right um he effectively locks anybody

392
00:15:36,800 --> 00:15:38,320
who uses a carrot

393
00:15:38,320 --> 00:15:41,920
or a tilde to um describe their version

394
00:15:41,920 --> 00:15:42,560
number

395
00:15:42,560 --> 00:15:45,440
in their package.json into the

396
00:15:45,440 --> 00:15:46,800
vulnerable version

397
00:15:46,800 --> 00:15:48,240
but if they went and evaluated the

398
00:15:48,240 --> 00:15:50,480
current version it would look

399
00:15:50,480 --> 00:15:54,399
legit it would look like it was um

400
00:15:54,399 --> 00:15:57,839
it would look like it was good

401
00:15:57,839 --> 00:16:00,160
uh code without any without any

402
00:16:00,160 --> 00:16:01,680
malicious code

403
00:16:01,680 --> 00:16:04,079
um because he implemented flatmap stream

404
00:16:04,079 --> 00:16:05,199
manually

405
00:16:05,199 --> 00:16:08,000
and removed the dependency which had the

406
00:16:08,000 --> 00:16:09,759
had the malicious stuff in it

407
00:16:09,759 --> 00:16:12,959
so all the people who

408
00:16:12,959 --> 00:16:16,000
who all the people who um download the

409
00:16:16,000 --> 00:16:17,600
latest version

410
00:16:17,600 --> 00:16:20,240
um were fine but all the people who had

411
00:16:20,240 --> 00:16:22,160
been using it for quite some time

412
00:16:22,160 --> 00:16:24,079
are basically locked into a vulnerable

413
00:16:24,079 --> 00:16:26,240
version so it's another way that he's

414
00:16:26,240 --> 00:16:27,680
obfuscating

415
00:16:27,680 --> 00:16:29,519
this ability to detect this

416
00:16:29,519 --> 00:16:31,519
vulnerability

417
00:16:31,519 --> 00:16:33,600
so yeah like i said if you go check out

418
00:16:33,600 --> 00:16:35,120
the latest code on npm

419
00:16:35,120 --> 00:16:37,519
the crypto crypto mining code isn't

420
00:16:37,519 --> 00:16:38,240
there

421
00:16:38,240 --> 00:16:39,920
uh if you check out the latest code on

422
00:16:39,920 --> 00:16:42,000
github the crypto mining code is in

423
00:16:42,000 --> 00:16:42,639
there

424
00:16:42,639 --> 00:16:45,360
also github still points to your

425
00:16:45,360 --> 00:16:46,639
reliable dominic

426
00:16:46,639 --> 00:16:50,079
who you know right there is where he

427
00:16:50,079 --> 00:16:52,560
talks about how he tried to transfer it

428
00:16:52,560 --> 00:16:54,720
but github aired because he already had

429
00:16:54,720 --> 00:16:55,839
a fork on it

430
00:16:55,839 --> 00:16:59,839
so dominic had tried

431
00:16:59,839 --> 00:17:02,839
already to to send this to another

432
00:17:02,839 --> 00:17:05,760
person

433
00:17:05,760 --> 00:17:08,160
so his tracks were covered he was mining

434
00:17:08,160 --> 00:17:09,039
wallets for

435
00:17:09,039 --> 00:17:12,400
two months before any discovery on uh

436
00:17:12,400 --> 00:17:14,799
any application that used event stream

437
00:17:14,799 --> 00:17:16,880
uh the discovery is kind of interesting

438
00:17:16,880 --> 00:17:19,039
it was discovered because the attacker

439
00:17:19,039 --> 00:17:21,599
used a deprecated library

440
00:17:21,599 --> 00:17:24,240
which is hilarious to me because he's

441
00:17:24,240 --> 00:17:26,319
basically attacking the supply chain

442
00:17:26,319 --> 00:17:28,640
and he was using a deprecated library

443
00:17:28,640 --> 00:17:30,480
which popped a warning

444
00:17:30,480 --> 00:17:34,160
and some dev uh saw the deprecation

445
00:17:34,160 --> 00:17:35,760
warning and tracked down and thought

446
00:17:35,760 --> 00:17:36,640
what is

447
00:17:36,640 --> 00:17:38,400
producing this warning and he figured

448
00:17:38,400 --> 00:17:39,679
out that it was this

449
00:17:39,679 --> 00:17:42,799
flat map stream and

450
00:17:42,799 --> 00:17:44,799
then and then he thought what's flat map

451
00:17:44,799 --> 00:17:46,400
stream doing

452
00:17:46,400 --> 00:17:48,080
and that's where he noticed that some

453
00:17:48,080 --> 00:17:49,520
strange activity

454
00:17:49,520 --> 00:17:52,960
that turned out was the uh crypto mining

455
00:17:52,960 --> 00:17:56,000
and discovery took a huge effort uh

456
00:17:56,000 --> 00:17:57,520
you had to get github to remove the

457
00:17:57,520 --> 00:18:00,480
commit you'd have mpm remove the package

458
00:18:00,480 --> 00:18:03,840
in each organization to to ban the user

459
00:18:03,840 --> 00:18:08,080
um and uh and then npm even archived

460
00:18:08,080 --> 00:18:09,600
event stream

461
00:18:09,600 --> 00:18:12,559
and uh prevented any future updates from

462
00:18:12,559 --> 00:18:12,880
it

463
00:18:12,880 --> 00:18:15,280
they rolled it back before flatmap

464
00:18:15,280 --> 00:18:15,919
stream

465
00:18:15,919 --> 00:18:17,600
and they prevented any future updates

466
00:18:17,600 --> 00:18:20,240
from ever being committed to it

467
00:18:20,240 --> 00:18:22,960
so this brought a lot of attention to

468
00:18:22,960 --> 00:18:24,240
process right

469
00:18:24,240 --> 00:18:27,440
uh a lot of people didn't know that

470
00:18:27,440 --> 00:18:30,640
what's published in mpm doesn't have to

471
00:18:30,640 --> 00:18:32,080
match github

472
00:18:32,080 --> 00:18:35,520
uh you know that in any way so what's on

473
00:18:35,520 --> 00:18:36,160
mpm

474
00:18:36,160 --> 00:18:39,919
could be fake uh what's on github

475
00:18:39,919 --> 00:18:42,240
could be totally different a lot of

476
00:18:42,240 --> 00:18:43,360
people

477
00:18:43,360 --> 00:18:46,160
you know thought well how how could you

478
00:18:46,160 --> 00:18:47,679
transfer the ownership

479
00:18:47,679 --> 00:18:50,880
to this person uh when i

480
00:18:50,880 --> 00:18:54,720
use this and the honest answer was

481
00:18:54,720 --> 00:18:57,120
that dominic hadn't used it for two

482
00:18:57,120 --> 00:18:58,080
years

483
00:18:58,080 --> 00:19:01,360
and a interested party came and

484
00:19:01,360 --> 00:19:04,000
knocking and offered to do some free

485
00:19:04,000 --> 00:19:06,080
development work

486
00:19:06,080 --> 00:19:08,640
so it's things like these that really

487
00:19:08,640 --> 00:19:09,520
you know

488
00:19:09,520 --> 00:19:12,640
lay out kind of the difficulty around

489
00:19:12,640 --> 00:19:15,039
uh around protecting against supply

490
00:19:15,039 --> 00:19:17,679
chain attacks

491
00:19:18,000 --> 00:19:21,120
so then recently

492
00:19:21,120 --> 00:19:22,720
more recently you might have seen this

493
00:19:22,720 --> 00:19:24,640
one this is a uh

494
00:19:24,640 --> 00:19:28,400
a really interesting attack vector

495
00:19:28,400 --> 00:19:32,240
alex burson published an article about

496
00:19:32,240 --> 00:19:33,679
dependency confusion

497
00:19:33,679 --> 00:19:35,520
where he and another researcher noticed

498
00:19:35,520 --> 00:19:38,640
that paypal had non-public dependencies

499
00:19:38,640 --> 00:19:41,039
uh most likely internal called out in

500
00:19:41,039 --> 00:19:43,039
their package.json

501
00:19:43,039 --> 00:19:46,480
so basically these dependencies in red

502
00:19:46,480 --> 00:19:49,760
right here uh they were internal

503
00:19:49,760 --> 00:19:51,280
dependencies

504
00:19:51,280 --> 00:19:54,400
um but if the

505
00:19:54,400 --> 00:19:57,520
um so the build server when it was

506
00:19:57,520 --> 00:19:59,039
looking for these dependencies it would

507
00:19:59,039 --> 00:20:01,440
go to the public npm

508
00:20:01,440 --> 00:20:05,200
and if it failed it would then look

509
00:20:05,200 --> 00:20:06,159
internally

510
00:20:06,159 --> 00:20:07,600
so they set up their build server

511
00:20:07,600 --> 00:20:09,840
incorrectly it was first looking

512
00:20:09,840 --> 00:20:10,480
publicly

513
00:20:10,480 --> 00:20:13,919
before internally and when it failed it

514
00:20:13,919 --> 00:20:14,880
would go to an

515
00:20:14,880 --> 00:20:17,919
internal dependency but if it

516
00:20:17,919 --> 00:20:20,559
if it didn't fail it would download from

517
00:20:20,559 --> 00:20:21,760
this public

518
00:20:21,760 --> 00:20:24,320
npm repo so they went ahead and

519
00:20:24,320 --> 00:20:26,000
registered

520
00:20:26,000 --> 00:20:29,039
those names on the public npm repo

521
00:20:29,039 --> 00:20:32,080
and they were now able to get

522
00:20:32,080 --> 00:20:35,840
um get into the build server itself

523
00:20:35,840 --> 00:20:40,240
and with with node um

524
00:20:40,240 --> 00:20:43,120
uh with uh node scripts you can actually

525
00:20:43,120 --> 00:20:44,640
use something called pre and post

526
00:20:44,640 --> 00:20:45,679
install

527
00:20:45,679 --> 00:20:48,960
so you can actually run uh

528
00:20:48,960 --> 00:20:52,880
run your own code on this build server

529
00:20:52,880 --> 00:20:55,600
just by them pointing at one of your

530
00:20:55,600 --> 00:20:56,400
packages

531
00:20:56,400 --> 00:20:59,200
which is crazy and the amount of effort

532
00:20:59,200 --> 00:21:01,120
that

533
00:21:01,120 --> 00:21:02,720
the amount of effort it took is very

534
00:21:02,720 --> 00:21:04,159
minimal right

535
00:21:04,159 --> 00:21:07,440
it's registering something with it

536
00:21:07,440 --> 00:21:09,760
with that name uh my co-worker matt

537
00:21:09,760 --> 00:21:10,960
austin

538
00:21:10,960 --> 00:21:12,640
uh we read this article and we were

539
00:21:12,640 --> 00:21:14,159
talking about it and

540
00:21:14,159 --> 00:21:17,600
he went and um pulled uh

541
00:21:17,600 --> 00:21:20,640
microsoft teams

542
00:21:20,640 --> 00:21:24,080
and looked at the uh and he looked at

543
00:21:24,080 --> 00:21:25,200
their

544
00:21:25,200 --> 00:21:28,159
um their electron apps dependencies and

545
00:21:28,159 --> 00:21:29,440
he went and he registered

546
00:21:29,440 --> 00:21:31,919
uh some npm dependencies and he was able

547
00:21:31,919 --> 00:21:32,799
to get hits

548
00:21:32,799 --> 00:21:35,919
from microsoft's build servers which is

549
00:21:35,919 --> 00:21:39,440
is crazy to me that this is still super

550
00:21:39,440 --> 00:21:42,880
um exposed and super vulnerable uh and

551
00:21:42,880 --> 00:21:45,840
really a problem

552
00:21:46,240 --> 00:21:49,039
so let's talk about some sec devops

553
00:21:49,039 --> 00:21:50,080
solutions here

554
00:21:50,080 --> 00:21:52,320
how can we install guardrails to help us

555
00:21:52,320 --> 00:21:55,440
mitigate some of these vulnerabilities

556
00:21:55,440 --> 00:21:58,960
uh first sec devops let's acknowledge

557
00:21:58,960 --> 00:22:00,080
that

558
00:22:00,080 --> 00:22:03,200
we talked about the 2021 buzzword bingo

559
00:22:03,200 --> 00:22:03,840
square

560
00:22:03,840 --> 00:22:07,280
sec devops is probably the 2020 or 2019

561
00:22:07,280 --> 00:22:09,280
buzzword bingo center square

562
00:22:09,280 --> 00:22:11,760
what is it well it's the process of

563
00:22:11,760 --> 00:22:13,200
integrating security into the

564
00:22:13,200 --> 00:22:13,840
development

565
00:22:13,840 --> 00:22:16,799
and deployment workflows uh basically

566
00:22:16,799 --> 00:22:18,240
security processes

567
00:22:18,240 --> 00:22:21,039
and checks um enter the lifecycle at a

568
00:22:21,039 --> 00:22:22,400
very early stage

569
00:22:22,400 --> 00:22:24,480
uh to keep up with the rapid devops

570
00:22:24,480 --> 00:22:26,960
release approach

571
00:22:26,960 --> 00:22:29,039
one of the things that i always preach

572
00:22:29,039 --> 00:22:30,799
is that we want to be

573
00:22:30,799 --> 00:22:34,640
partners not hindrances in apsec and so

574
00:22:34,640 --> 00:22:37,679
uh partnering up with devops and trying

575
00:22:37,679 --> 00:22:38,320
to

576
00:22:38,320 --> 00:22:42,400
engage in this rapid release approach

577
00:22:42,400 --> 00:22:46,000
really helps solidify that partnership

578
00:22:46,000 --> 00:22:50,320
between apsec and development

579
00:22:50,320 --> 00:22:53,679
so some of the things that um

580
00:22:53,679 --> 00:22:56,799
you know your organization can do uh

581
00:22:56,799 --> 00:22:59,120
ahead of time and really just as part of

582
00:22:59,120 --> 00:23:00,559
the process here

583
00:23:00,559 --> 00:23:03,520
is squat your own enterprise uh that

584
00:23:03,520 --> 00:23:04,720
sounds funny but

585
00:23:04,720 --> 00:23:08,080
um honestly it's it's it's really easy

586
00:23:08,080 --> 00:23:08,640
to do

587
00:23:08,640 --> 00:23:11,280
and it's uh it's probably going to save

588
00:23:11,280 --> 00:23:11,760
you

589
00:23:11,760 --> 00:23:14,159
on a lot of type of squatting type

590
00:23:14,159 --> 00:23:16,480
vulnerabilities

591
00:23:16,480 --> 00:23:18,080
one of the things you do is you purchase

592
00:23:18,080 --> 00:23:20,000
all potential typo

593
00:23:20,000 --> 00:23:24,080
domains for less than 10 a year you can

594
00:23:24,080 --> 00:23:27,440
buy 20 or 30 domains and don't forget

595
00:23:27,440 --> 00:23:28,400
combinations

596
00:23:28,400 --> 00:23:32,000
of alternate uh tlds like

597
00:23:32,000 --> 00:23:34,960
dot com.net.org you want to grab all

598
00:23:34,960 --> 00:23:35,760
those

599
00:23:35,760 --> 00:23:39,120
dot gov is another popular one uh

600
00:23:39,120 --> 00:23:40,640
these are these are things that you want

601
00:23:40,640 --> 00:23:42,880
to go and grab and own

602
00:23:42,880 --> 00:23:47,120
right and um this isn't part of the

603
00:23:47,120 --> 00:23:49,120
supply chain but you probably also want

604
00:23:49,120 --> 00:23:51,120
to set up

605
00:23:51,120 --> 00:23:54,320
email servers and have those email

606
00:23:54,320 --> 00:23:56,799
servers

607
00:23:57,039 --> 00:23:58,480
you know points to your internal

608
00:23:58,480 --> 00:24:00,320
security team you don't want people

609
00:24:00,320 --> 00:24:01,760
accidentally

610
00:24:01,760 --> 00:24:05,039
sending out billing information

611
00:24:05,039 --> 00:24:08,000
to a wrong domain you want to know about

612
00:24:08,000 --> 00:24:08,320
that

613
00:24:08,320 --> 00:24:11,760
treat it as a teachable moment

614
00:24:12,000 --> 00:24:14,240
don't don't just register the domains

615
00:24:14,240 --> 00:24:16,080
though redirect them

616
00:24:16,080 --> 00:24:18,080
point them to the main domain to help

617
00:24:18,080 --> 00:24:19,440
alleviate confusion

618
00:24:19,440 --> 00:24:21,360
uh you don't have to pay to do that that

619
00:24:21,360 --> 00:24:23,039
can be done without hosting

620
00:24:23,039 --> 00:24:26,400
uh again this is a super cheap option

621
00:24:26,400 --> 00:24:28,400
um just a guard rail that you can put in

622
00:24:28,400 --> 00:24:29,919
place

623
00:24:29,919 --> 00:24:33,200
and then register namespaces on public

624
00:24:33,200 --> 00:24:34,720
dependency managers

625
00:24:34,720 --> 00:24:38,480
uh this is important um because uh

626
00:24:38,480 --> 00:24:41,120
uh if you do that you can help prevent

627
00:24:41,120 --> 00:24:42,880
some of that dependency confusion stuff

628
00:24:42,880 --> 00:24:44,159
that we talked about

629
00:24:44,159 --> 00:24:47,120
um it'll if you register the names in

630
00:24:47,120 --> 00:24:48,159
similar spellings

631
00:24:48,159 --> 00:24:50,799
remember typo squatting uh of internal

632
00:24:50,799 --> 00:24:52,320
libraries and packages

633
00:24:52,320 --> 00:24:54,880
on all public repositories uh even the

634
00:24:54,880 --> 00:24:55,679
reserve name

635
00:24:55,679 --> 00:24:58,400
even if they're never used it basically

636
00:24:58,400 --> 00:25:00,159
prevents an attacker from tricking a

637
00:25:00,159 --> 00:25:00,960
developer

638
00:25:00,960 --> 00:25:03,679
and into using that an identically or

639
00:25:03,679 --> 00:25:05,440
similarly named package on a public

640
00:25:05,440 --> 00:25:08,240
repository

641
00:25:08,400 --> 00:25:11,360
uh speaking of um you want to activate

642
00:25:11,360 --> 00:25:13,120
name spaced modules

643
00:25:13,120 --> 00:25:15,120
many package managers including maven

644
00:25:15,120 --> 00:25:16,559
and mpm support

645
00:25:16,559 --> 00:25:19,200
namespaced modules which prevent the

646
00:25:19,200 --> 00:25:20,720
same name from being used

647
00:25:20,720 --> 00:25:23,600
by two different resources another good

648
00:25:23,600 --> 00:25:24,240
way

649
00:25:24,240 --> 00:25:27,600
to protect your enterprise

650
00:25:27,600 --> 00:25:30,640
and then lastly treat your list

651
00:25:30,640 --> 00:25:32,559
of internal packages as sensitive

652
00:25:32,559 --> 00:25:35,279
information the success of these attacks

653
00:25:35,279 --> 00:25:36,720
depend on knowing the name

654
00:25:36,720 --> 00:25:40,000
of internal research resources and so

655
00:25:40,000 --> 00:25:41,760
organizations can't be cavalier about

656
00:25:41,760 --> 00:25:44,159
that they need to protect it

657
00:25:44,159 --> 00:25:47,200
and you can't just push all of your

658
00:25:47,200 --> 00:25:48,400
internal

659
00:25:48,400 --> 00:25:52,000
uh internal packages into a

660
00:25:52,000 --> 00:25:55,440
production client owned you know package

661
00:25:55,440 --> 00:25:58,720
that's easily uh decipherable um

662
00:25:58,720 --> 00:26:00,080
so this is the kind of stuff that you

663
00:26:00,080 --> 00:26:02,000
want to keep um keep

664
00:26:02,000 --> 00:26:05,360
as private as possible uh

665
00:26:05,360 --> 00:26:06,640
some ways that you can guard against

666
00:26:06,640 --> 00:26:08,799
militia malicious updates

667
00:26:08,799 --> 00:26:11,840
use a lock file lock files ensure that

668
00:26:11,840 --> 00:26:13,600
you get the same package version

669
00:26:13,600 --> 00:26:16,480
on every install so if you're secure

670
00:26:16,480 --> 00:26:19,360
today you'll be secure tomorrow

671
00:26:19,360 --> 00:26:21,440
this would have really helped with that

672
00:26:21,440 --> 00:26:22,960
event stream vulnerability i talked

673
00:26:22,960 --> 00:26:24,320
about

674
00:26:24,320 --> 00:26:27,919
again it was created in 2011

675
00:26:27,919 --> 00:26:30,080
and in 2015 it really entered

676
00:26:30,080 --> 00:26:32,480
maintenance mode

677
00:26:32,480 --> 00:26:35,679
and if you had been locked in to

678
00:26:35,679 --> 00:26:39,200
that maintenance mode version when uh

679
00:26:39,200 --> 00:26:42,799
when flatmap stream was added at 336

680
00:26:42,799 --> 00:26:45,520
version 336 you would not have installed

681
00:26:45,520 --> 00:26:46,080
it

682
00:26:46,080 --> 00:26:47,760
right so you would have never you would

683
00:26:47,760 --> 00:26:49,679
have never had to even install it

684
00:26:49,679 --> 00:26:53,200
so um that would have really uh

685
00:26:53,200 --> 00:26:55,360
saved you know save the day in that

686
00:26:55,360 --> 00:26:57,039
scenario

687
00:26:57,039 --> 00:27:00,000
uh something else that i ask uh is that

688
00:27:00,000 --> 00:27:00,559
um

689
00:27:00,559 --> 00:27:02,159
developers think before they install

690
00:27:02,159 --> 00:27:04,159
dependencies right um

691
00:27:04,159 --> 00:27:05,840
many organizations have limited

692
00:27:05,840 --> 00:27:07,520
visibility into the sources of their

693
00:27:07,520 --> 00:27:08,240
software

694
00:27:08,240 --> 00:27:10,480
which is a problem when you're a big

695
00:27:10,480 --> 00:27:11,520
organization

696
00:27:11,520 --> 00:27:13,200
or when you're an organization doing a

697
00:27:13,200 --> 00:27:15,200
lot of m a lot of mergers and

698
00:27:15,200 --> 00:27:16,720
acquisitions

699
00:27:16,720 --> 00:27:18,559
knowing kind of the source of your

700
00:27:18,559 --> 00:27:20,080
software is

701
00:27:20,080 --> 00:27:22,799
vital you need to understand the

702
00:27:22,799 --> 00:27:23,600
dependencies

703
00:27:23,600 --> 00:27:26,320
and track them at a very granular level

704
00:27:26,320 --> 00:27:28,320
and this can be difficult but

705
00:27:28,320 --> 00:27:31,760
um if you don't start now then you could

706
00:27:31,760 --> 00:27:32,559
regret it

707
00:27:32,559 --> 00:27:34,960
it could be you know in two weeks or two

708
00:27:34,960 --> 00:27:36,159
years

709
00:27:36,159 --> 00:27:39,279
but um the best time to start thinking

710
00:27:39,279 --> 00:27:41,279
about this and about where your software

711
00:27:41,279 --> 00:27:42,320
comes from

712
00:27:42,320 --> 00:27:45,440
is now and not tomorrow

713
00:27:45,440 --> 00:27:47,520
and you can put in organizational

714
00:27:47,520 --> 00:27:49,919
policies and checklists

715
00:27:49,919 --> 00:27:53,200
for your devs um just

716
00:27:53,200 --> 00:27:56,640
as a good way to uh to

717
00:27:56,640 --> 00:27:59,440
help guard against some of the uh the

718
00:27:59,440 --> 00:28:00,240
problems with

719
00:28:00,240 --> 00:28:02,720
uh supply chain attacks some of the

720
00:28:02,720 --> 00:28:03,919
checklists would be

721
00:28:03,919 --> 00:28:06,480
um do you need to install this

722
00:28:06,480 --> 00:28:08,080
dependency

723
00:28:08,080 --> 00:28:11,039
is the package well maintained do it you

724
00:28:11,039 --> 00:28:11,679
know

725
00:28:11,679 --> 00:28:14,399
do they have like actual issues that get

726
00:28:14,399 --> 00:28:15,279
closed

727
00:28:15,279 --> 00:28:18,960
do they have open security issues uh

728
00:28:18,960 --> 00:28:22,080
does the package match the package

729
00:28:22,080 --> 00:28:24,960
manager source right like

730
00:28:24,960 --> 00:28:27,200
are they publishing the same thing that

731
00:28:27,200 --> 00:28:28,880
shows on their

732
00:28:28,880 --> 00:28:32,399
public repository uh can you write it

733
00:28:32,399 --> 00:28:33,039
yourself

734
00:28:33,039 --> 00:28:35,600
um this is a big one i'm not sure if

735
00:28:35,600 --> 00:28:36,240
many of you

736
00:28:36,240 --> 00:28:38,480
have heard of the term or the the

737
00:28:38,480 --> 00:28:40,000
program left pad

738
00:28:40,000 --> 00:28:43,200
but a developer another huge community

739
00:28:43,200 --> 00:28:44,240
developer

740
00:28:44,240 --> 00:28:48,240
had you know 140 packages on npm

741
00:28:48,240 --> 00:28:51,760
and uh mpm decided to give

742
00:28:51,760 --> 00:28:55,279
one of his packages names

743
00:28:55,279 --> 00:28:57,360
to a company that wasn't even going to

744
00:28:57,360 --> 00:28:59,279
use it

745
00:28:59,279 --> 00:29:00,960
because they were the company and it was

746
00:29:00,960 --> 00:29:03,039
a trademark thing

747
00:29:03,039 --> 00:29:06,799
and he uh he had created the package i

748
00:29:06,799 --> 00:29:09,440
think before the company was even named

749
00:29:09,440 --> 00:29:12,880
and um he was mad and he

750
00:29:12,880 --> 00:29:16,240
actually removed all of his all of his

751
00:29:16,240 --> 00:29:18,080
uh modules that he built well one of

752
00:29:18,080 --> 00:29:20,240
them was called left

753
00:29:20,240 --> 00:29:23,760
pad and all left pad did was nine lines

754
00:29:23,760 --> 00:29:24,799
of code

755
00:29:24,799 --> 00:29:26,880
and i think it just added spaces to the

756
00:29:26,880 --> 00:29:28,480
left of something

757
00:29:28,480 --> 00:29:30,799
uh to the left of something that

758
00:29:30,799 --> 00:29:32,720
converted it from white space to spaces

759
00:29:32,720 --> 00:29:34,640
or something like that but it was it was

760
00:29:34,640 --> 00:29:35,840
nine lines of code

761
00:29:35,840 --> 00:29:37,520
and it probably didn't even need to be

762
00:29:37,520 --> 00:29:40,960
nine lines and um

763
00:29:40,960 --> 00:29:44,720
but he had made it at some point um and

764
00:29:44,720 --> 00:29:48,559
uh somebody used it uh at some point

765
00:29:48,559 --> 00:29:51,679
it got some spread and eventually um

766
00:29:51,679 --> 00:29:55,120
babel the main transpiler of javascript

767
00:29:55,120 --> 00:29:57,440
of modern javascript applications

768
00:29:57,440 --> 00:30:00,559
uh had left pat as a dependency so by

769
00:30:00,559 --> 00:30:01,919
removing his

770
00:30:01,919 --> 00:30:05,840
uh repos he effectively killed babel

771
00:30:05,840 --> 00:30:09,200
and uh and every modern javascript

772
00:30:09,200 --> 00:30:10,799
application i'm talking ember

773
00:30:10,799 --> 00:30:14,640
angular react uh you know all of the uh

774
00:30:14,640 --> 00:30:17,520
common uh javascript applications at the

775
00:30:17,520 --> 00:30:18,159
time

776
00:30:18,159 --> 00:30:21,279
they all like just broke they could no

777
00:30:21,279 --> 00:30:22,480
longer

778
00:30:22,480 --> 00:30:25,520
take um the framework and convert it to

779
00:30:25,520 --> 00:30:27,600
vanilla javascript

780
00:30:27,600 --> 00:30:31,039
for use and it um it was huge it

781
00:30:31,039 --> 00:30:32,960
affected all of the javascript world and

782
00:30:32,960 --> 00:30:33,840
community

783
00:30:33,840 --> 00:30:35,520
and it was just because this developer

784
00:30:35,520 --> 00:30:37,279
got mad and he removed

785
00:30:37,279 --> 00:30:39,360
what essentially amounted to nine lines

786
00:30:39,360 --> 00:30:40,640
of code uh

787
00:30:40,640 --> 00:30:42,720
that somebody when working on babel

788
00:30:42,720 --> 00:30:44,480
could have just

789
00:30:44,480 --> 00:30:48,159
made natively and it would have been uh

790
00:30:48,159 --> 00:30:52,000
never an issue so i always tell people

791
00:30:52,000 --> 00:30:52,720
about it

792
00:30:52,720 --> 00:30:55,200
this when i'm when i get when i educate

793
00:30:55,200 --> 00:30:56,880
them with this checklist because

794
00:30:56,880 --> 00:31:00,320
that's something that uh you know

795
00:31:00,320 --> 00:31:01,440
easily could have been written

796
00:31:01,440 --> 00:31:03,519
themselves but by

797
00:31:03,519 --> 00:31:05,760
inheriting a dependency you've inherited

798
00:31:05,760 --> 00:31:07,039
another risk

799
00:31:07,039 --> 00:31:09,039
right you've opened yourself up to more

800
00:31:09,039 --> 00:31:11,760
risk by having this dependency

801
00:31:11,760 --> 00:31:15,440
and um another option is uh if

802
00:31:15,440 --> 00:31:16,840
you're a little unsure about this

803
00:31:16,840 --> 00:31:18,480
dependency

804
00:31:18,480 --> 00:31:21,840
is you can evaluate it as is

805
00:31:21,840 --> 00:31:25,039
and then fork it or clone it and then

806
00:31:25,039 --> 00:31:28,399
just point to that directory so

807
00:31:28,399 --> 00:31:30,080
if you're not sure it's getting proper

808
00:31:30,080 --> 00:31:32,000
updates and you like it

809
00:31:32,000 --> 00:31:35,440
as is uh you can host it yourself

810
00:31:35,440 --> 00:31:38,480
and just point to that instead of the

811
00:31:38,480 --> 00:31:41,679
public one and now now

812
00:31:41,679 --> 00:31:43,600
now you have complete control over that

813
00:31:43,600 --> 00:31:46,000
code that code is now your code that

814
00:31:46,000 --> 00:31:46,640
you're

815
00:31:46,640 --> 00:31:50,159
using and you're not taking any updates

816
00:31:50,159 --> 00:31:54,080
um the one of the reasons why this is um

817
00:31:54,080 --> 00:31:56,880
this is there this is a good solution if

818
00:31:56,880 --> 00:31:58,960
you're willing to also

819
00:31:58,960 --> 00:32:02,240
you know check the updates that it does

820
00:32:02,240 --> 00:32:02,799
get

821
00:32:02,799 --> 00:32:04,399
because if there is a security update

822
00:32:04,399 --> 00:32:06,240
you want to you want to make sure that

823
00:32:06,240 --> 00:32:07,279
you uh

824
00:32:07,279 --> 00:32:10,559
add that to your side um and so

825
00:32:10,559 --> 00:32:12,240
there's guardrails that you can set up

826
00:32:12,240 --> 00:32:14,640
here where you're hosting it yourself

827
00:32:14,640 --> 00:32:17,200
but you're evaluating every update

828
00:32:17,200 --> 00:32:19,039
and then pushing it to what you've you

829
00:32:19,039 --> 00:32:20,880
hosted yourself

830
00:32:20,880 --> 00:32:24,399
that's another option uh another

831
00:32:24,399 --> 00:32:26,080
thing that you want to do um you know

832
00:32:26,080 --> 00:32:28,000
part of the cia triad

833
00:32:28,000 --> 00:32:29,919
is you want to protect the integrity of

834
00:32:29,919 --> 00:32:31,360
these dependencies

835
00:32:31,360 --> 00:32:34,159
uh one option is you can use a sub

836
00:32:34,159 --> 00:32:34,720
resource

837
00:32:34,720 --> 00:32:38,000
integrity with cdns basically

838
00:32:38,000 --> 00:32:40,000
directing the browser to only pull a

839
00:32:40,000 --> 00:32:41,360
specific resource

840
00:32:41,360 --> 00:32:43,679
if the hash of the file matches the

841
00:32:43,679 --> 00:32:45,919
cryptographic hash that you've specified

842
00:32:45,919 --> 00:32:47,519
so what you're doing there is you're

843
00:32:47,519 --> 00:32:49,360
saying uh

844
00:32:49,360 --> 00:32:52,880
i expect it to be this and

845
00:32:52,880 --> 00:32:55,919
if it isn't the browser is not you know

846
00:32:55,919 --> 00:32:56,640
the

847
00:32:56,640 --> 00:32:58,320
the project won't pull that that

848
00:32:58,320 --> 00:33:00,240
resource in right which is

849
00:33:00,240 --> 00:33:03,200
which is what you want you you if this

850
00:33:03,200 --> 00:33:05,279
is different than what you said it was

851
00:33:05,279 --> 00:33:06,799
you don't want to pull it in because

852
00:33:06,799 --> 00:33:09,279
it's been modified and it's potentially

853
00:33:09,279 --> 00:33:10,000
been modified

854
00:33:10,000 --> 00:33:13,039
maliciously uh

855
00:33:13,039 --> 00:33:14,960
also you want to continuously monitor

856
00:33:14,960 --> 00:33:16,080
your dependencies

857
00:33:16,080 --> 00:33:18,080
you can use tools like mpm audit

858
00:33:18,080 --> 00:33:20,159
retire.js dependency check

859
00:33:20,159 --> 00:33:22,880
and dependabot these are good ways to

860
00:33:22,880 --> 00:33:24,000
continuously monitor

861
00:33:24,000 --> 00:33:27,120
your dependencies but take but there's a

862
00:33:27,120 --> 00:33:29,440
stipulation that goes along with this

863
00:33:29,440 --> 00:33:31,200
make sure you understand the results

864
00:33:31,200 --> 00:33:33,200
right um there was a great article

865
00:33:33,200 --> 00:33:33,840
recently

866
00:33:33,840 --> 00:33:37,120
um i forget who it was but uh where they

867
00:33:37,120 --> 00:33:38,000
talked about how

868
00:33:38,000 --> 00:33:40,960
and the mpm audit results are very

869
00:33:40,960 --> 00:33:42,000
misleading

870
00:33:42,000 --> 00:33:45,279
um because several of the results uh

871
00:33:45,279 --> 00:33:49,200
involved dev dependencies basically

872
00:33:49,200 --> 00:33:51,279
build dependencies that never made it to

873
00:33:51,279 --> 00:33:52,240
production

874
00:33:52,240 --> 00:33:55,600
so when i'm deploying an app that uses

875
00:33:55,600 --> 00:33:56,559
javascript

876
00:33:56,559 --> 00:33:58,399
and i'm using some packages to build

877
00:33:58,399 --> 00:34:00,320
stuff it doesn't matter if the

878
00:34:00,320 --> 00:34:02,720
package that's that's building something

879
00:34:02,720 --> 00:34:04,480
has a cross-site scripting vulnerability

880
00:34:04,480 --> 00:34:06,399
in it because that's on my build server

881
00:34:06,399 --> 00:34:09,280
and all i'm using is i'm all i'm using

882
00:34:09,280 --> 00:34:11,760
it for is to generate another package

883
00:34:11,760 --> 00:34:14,000
and deploy it and if it doesn't get

884
00:34:14,000 --> 00:34:15,199
deployed with it

885
00:34:15,199 --> 00:34:18,399
it doesn't matter to me so you need to

886
00:34:18,399 --> 00:34:20,079
understand these results and

887
00:34:20,079 --> 00:34:22,079
really like really read through them and

888
00:34:22,079 --> 00:34:24,480
understand exactly what you're

889
00:34:24,480 --> 00:34:27,760
um what they mean but

890
00:34:27,760 --> 00:34:30,239
you can always uh train people to do

891
00:34:30,239 --> 00:34:30,879
that

892
00:34:30,879 --> 00:34:34,719
or you can um you know add some sort of

893
00:34:34,719 --> 00:34:37,119
rules or run books around how to

894
00:34:37,119 --> 00:34:38,560
determine whether or not

895
00:34:38,560 --> 00:34:40,560
a finding is a finding you need to be

896
00:34:40,560 --> 00:34:41,599
concerned about

897
00:34:41,599 --> 00:34:43,599
or if it's a finding that you you can

898
00:34:43,599 --> 00:34:47,359
kind of put on the back burner

899
00:34:47,359 --> 00:34:49,359
so that's just the stipulation with that

900
00:34:49,359 --> 00:34:50,480
one

901
00:34:50,480 --> 00:34:53,359
uh always uh prefer signed packages uh

902
00:34:53,359 --> 00:34:54,879
from official sources

903
00:34:54,879 --> 00:34:57,760
um because it reduces the chance of

904
00:34:57,760 --> 00:34:58,320
having

905
00:34:58,320 --> 00:35:01,200
modified or malicious content uh and

906
00:35:01,200 --> 00:35:02,160
then

907
00:35:02,160 --> 00:35:03,680
something else uh protect your

908
00:35:03,680 --> 00:35:06,000
deployment accounts right because

909
00:35:06,000 --> 00:35:09,359
uh when you're pushing stuff uh to

910
00:35:09,359 --> 00:35:14,000
mpm or um whatever you could be

911
00:35:14,000 --> 00:35:15,599
uh you could be someone in a supply

912
00:35:15,599 --> 00:35:18,240
chain right like think of solar winds

913
00:35:18,240 --> 00:35:20,400
they they were in the supply chain of

914
00:35:20,400 --> 00:35:22,160
all of the companies that got attacked

915
00:35:22,160 --> 00:35:22,960
by the

916
00:35:22,960 --> 00:35:26,320
by by their update really that by the

917
00:35:26,320 --> 00:35:28,560
malicious code put into their update

918
00:35:28,560 --> 00:35:30,720
and so protect anything that you're

919
00:35:30,720 --> 00:35:32,079
deploying as well

920
00:35:32,079 --> 00:35:34,400
um that means two-factor rotating

921
00:35:34,400 --> 00:35:35,280
service keys

922
00:35:35,280 --> 00:35:36,960
uh also use like role-based

923
00:35:36,960 --> 00:35:39,920
authentication on who can push artifacts

924
00:35:39,920 --> 00:35:42,800
you know really narrow the scope of who

925
00:35:42,800 --> 00:35:44,560
has the ability to do that

926
00:35:44,560 --> 00:35:47,920
and uh put that into a trusted group

927
00:35:47,920 --> 00:35:49,760
and then make sure that there's um you

928
00:35:49,760 --> 00:35:52,000
know a process in place for rotating

929
00:35:52,000 --> 00:35:53,040
service keys

930
00:35:53,040 --> 00:35:54,880
and then if somebody leaves the

931
00:35:54,880 --> 00:35:56,640
organization make sure that there's a

932
00:35:56,640 --> 00:35:57,520
way to

933
00:35:57,520 --> 00:36:00,640
uh rotate their keys or

934
00:36:00,640 --> 00:36:02,560
you know delete them from the group

935
00:36:02,560 --> 00:36:04,480
properly so that they still don't have

936
00:36:04,480 --> 00:36:06,240
the ability to push something

937
00:36:06,240 --> 00:36:08,560
out into a package manager which would

938
00:36:08,560 --> 00:36:10,960
be a big

939
00:36:10,960 --> 00:36:13,040
all right problem those are some of the

940
00:36:13,040 --> 00:36:14,480
ways

941
00:36:14,480 --> 00:36:17,200
you know that that this matter um that

942
00:36:17,200 --> 00:36:18,720
you can protect against it

943
00:36:18,720 --> 00:36:21,200
but honestly like we talked about how

944
00:36:21,200 --> 00:36:24,240
this has been around since 1983.

945
00:36:24,240 --> 00:36:27,359
why is it still such a problem

946
00:36:27,359 --> 00:36:31,280
and what can we do about that well

947
00:36:31,280 --> 00:36:34,240
it's still pretty ongoing because of two

948
00:36:34,240 --> 00:36:35,599
big reasons i think

949
00:36:35,599 --> 00:36:38,560
uh there's a lack of awareness right um

950
00:36:38,560 --> 00:36:39,040
without

951
00:36:39,040 --> 00:36:40,800
appsec educating the product and the

952
00:36:40,800 --> 00:36:42,800
engineering teams about the dangers

953
00:36:42,800 --> 00:36:44,960
of supply chain risks it can be

954
00:36:44,960 --> 00:36:47,599
difficult to get the priority it needs

955
00:36:47,599 --> 00:36:50,560
right and so i think that one of the

956
00:36:50,560 --> 00:36:52,560
things that you can do as appsec

957
00:36:52,560 --> 00:36:53,440
engineers as

958
00:36:53,440 --> 00:36:56,480
as internal appsec teams it's really

959
00:36:56,480 --> 00:36:58,560
build out that education make people

960
00:36:58,560 --> 00:36:59,520
understand

961
00:36:59,520 --> 00:37:02,400
hey this is super risky and it's gonna

962
00:37:02,400 --> 00:37:04,240
it could have a large effect on

963
00:37:04,240 --> 00:37:08,240
us and here's what we need to do to

964
00:37:08,240 --> 00:37:10,720
safeguard it and if we don't do it

965
00:37:10,720 --> 00:37:12,640
that's that could be a problem

966
00:37:12,640 --> 00:37:15,520
and make them understand i mean uh

967
00:37:15,520 --> 00:37:17,440
without that education

968
00:37:17,440 --> 00:37:20,880
uh some people are unaware that just

969
00:37:20,880 --> 00:37:23,680
pulling in gobs and gobs of dependencies

970
00:37:23,680 --> 00:37:24,240
isn't

971
00:37:24,240 --> 00:37:26,240
the best idea you know a lot of people

972
00:37:26,240 --> 00:37:28,320
think oh i can code so much faster

973
00:37:28,320 --> 00:37:32,079
if i pull in these 30 dependencies and

974
00:37:32,079 --> 00:37:33,599
you know i'm pulling in things that'll

975
00:37:33,599 --> 00:37:35,119
do arithmetic for me

976
00:37:35,119 --> 00:37:38,079
or generate html or something you know

977
00:37:38,079 --> 00:37:38,800
silly

978
00:37:38,800 --> 00:37:41,920
uh that's not a great thing

979
00:37:41,920 --> 00:37:46,000
right so there's a there's a

980
00:37:46,000 --> 00:37:48,720
cost analysis that goes with that i mean

981
00:37:48,720 --> 00:37:50,079
what's the time it would take somebody

982
00:37:50,079 --> 00:37:51,920
to implement something themselves

983
00:37:51,920 --> 00:37:55,520
um but you know they probably can do it

984
00:37:55,520 --> 00:37:58,320
and you need to start factoring in risk

985
00:37:58,320 --> 00:38:00,640
with your cost analysis

986
00:38:00,640 --> 00:38:02,880
and that brings me to my next point uh

987
00:38:02,880 --> 00:38:04,320
developers have extremely tight

988
00:38:04,320 --> 00:38:05,520
deadlines right

989
00:38:05,520 --> 00:38:07,920
we live in this uh we live in this

990
00:38:07,920 --> 00:38:10,160
community in this world where

991
00:38:10,160 --> 00:38:13,359
software nowadays has tight turnaround

992
00:38:13,359 --> 00:38:14,079
times

993
00:38:14,079 --> 00:38:18,000
um tech debt is growing uh

994
00:38:18,000 --> 00:38:20,000
developers um you know are getting

995
00:38:20,000 --> 00:38:21,520
pressure from product

996
00:38:21,520 --> 00:38:24,560
and uh public stakeholders uh

997
00:38:24,560 --> 00:38:26,480
you know you've got your investors and

998
00:38:26,480 --> 00:38:28,880
some public companies have shareholders

999
00:38:28,880 --> 00:38:30,720
and they have to produce results and

1000
00:38:30,720 --> 00:38:32,160
it's just there's

1001
00:38:32,160 --> 00:38:35,599
a lot of pressure and so as absec

1002
00:38:35,599 --> 00:38:38,960
team members right we need to have um

1003
00:38:38,960 --> 00:38:41,119
we need to be good team members and one

1004
00:38:41,119 --> 00:38:42,480
of the ways to do that

1005
00:38:42,480 --> 00:38:46,160
is to fight to get them the time

1006
00:38:46,160 --> 00:38:49,440
to code securely and app second

1007
00:38:49,440 --> 00:38:50,720
development should be

1008
00:38:50,720 --> 00:38:53,119
should be like a cooperation not a

1009
00:38:53,119 --> 00:38:54,240
competition

1010
00:38:54,240 --> 00:38:58,880
so um you need to be good partners

1011
00:38:58,880 --> 00:39:02,320
on good partners in your company and um

1012
00:39:02,320 --> 00:39:04,960
that's something that um i think really

1013
00:39:04,960 --> 00:39:05,920
like

1014
00:39:05,920 --> 00:39:08,320
is a key component with some of the

1015
00:39:08,320 --> 00:39:09,599
supply chain risk

1016
00:39:09,599 --> 00:39:12,079
because uh if you're a good partner and

1017
00:39:12,079 --> 00:39:13,280
you're helping

1018
00:39:13,280 --> 00:39:17,599
um them uh get the time they need to

1019
00:39:17,599 --> 00:39:20,160
code something more securely or code

1020
00:39:20,160 --> 00:39:21,599
something themselves instead of bringing

1021
00:39:21,599 --> 00:39:23,040
in a dependency

1022
00:39:23,040 --> 00:39:26,160
um it's a win-win scenario right they

1023
00:39:26,160 --> 00:39:28,000
don't want to produce bad code

1024
00:39:28,000 --> 00:39:31,040
everyone wants to code securely and uh

1025
00:39:31,040 --> 00:39:33,760
you want the company and the product to

1026
00:39:33,760 --> 00:39:34,880
be secure

1027
00:39:34,880 --> 00:39:38,960
so remember that you know that's that's

1028
00:39:38,960 --> 00:39:41,040
that's one of the big takeaways your

1029
00:39:41,040 --> 00:39:42,079
team

1030
00:39:42,079 --> 00:39:43,440
and here are the guardrails that you

1031
00:39:43,440 --> 00:39:46,720
want to implement with your team

1032
00:39:46,720 --> 00:39:49,680
here's some of my sources thank you all

1033
00:39:49,680 --> 00:39:50,960
for your attention

1034
00:39:50,960 --> 00:39:53,119
like i said i'll be i'll be on discord

1035
00:39:53,119 --> 00:39:54,880
if you have any questions

1036
00:39:54,880 --> 00:39:57,680
hit me up you can also follow me on

1037
00:39:57,680 --> 00:39:58,800
twitter

1038
00:39:58,800 --> 00:40:02,000
and give me a message there if you want

1039
00:40:02,000 --> 00:40:02,480
to

1040
00:40:02,480 --> 00:40:05,520
touch base i really appreciate it thanks

1041
00:40:05,520 --> 00:40:07,359
for the opportunity to apsec village

1042
00:40:07,359 --> 00:40:10,319
i know that going virtually with uh two

1043
00:40:10,319 --> 00:40:11,040
weeks left

1044
00:40:11,040 --> 00:40:13,280
or three weeks left is uh extremely

1045
00:40:13,280 --> 00:40:14,240
difficult

1046
00:40:14,240 --> 00:40:16,720
so um thank you all to the organizers as

1047
00:40:16,720 --> 00:40:17,440
well

1048
00:40:17,440 --> 00:40:20,720
and uh i look forward uh to

1049
00:40:20,720 --> 00:40:23,280
you know getting back to normal and

1050
00:40:23,280 --> 00:40:25,920
hopefully being back next year in person

1051
00:40:25,920 --> 00:40:39,520
thank you

1052
00:40:39,520 --> 00:40:41,599
you

