1
00:00:00,399 --> 00:00:02,879
hi i am seth grover i am the maintainer

2
00:00:02,879 --> 00:00:04,880
of malcolm the network traffic analysis

3
00:00:04,880 --> 00:00:07,040
tool suite

4
00:00:07,040 --> 00:00:10,080
network traffic analysis is all about

5
00:00:10,080 --> 00:00:12,480
getting to the important stuff as

6
00:00:12,480 --> 00:00:14,480
quickly as possible there's a lot of

7
00:00:14,480 --> 00:00:16,640
open source and proprietary tools out

8
00:00:16,640 --> 00:00:19,760
there for analyzing raw packet capture

9
00:00:19,760 --> 00:00:21,439
or pcap files

10
00:00:21,439 --> 00:00:25,599
wireshark network miner grass marlin

11
00:00:25,599 --> 00:00:28,640
but analyzing pcapp sets that are large

12
00:00:28,640 --> 00:00:30,800
or from complex networks

13
00:00:30,800 --> 00:00:32,399
with many

14
00:00:32,399 --> 00:00:35,360
tools is difficult

15
00:00:35,360 --> 00:00:36,960
because often

16
00:00:36,960 --> 00:00:39,920
tools that handle raw pcap data

17
00:00:39,920 --> 00:00:42,559
struggle to handle packet capture files

18
00:00:42,559 --> 00:00:44,480
that are you know large larger than

19
00:00:44,480 --> 00:00:46,239
maybe a few hundred megabytes or

20
00:00:46,239 --> 00:00:48,640
gigabyte or two depending on your system

21
00:00:48,640 --> 00:00:49,920
resources

22
00:00:49,920 --> 00:00:50,960
um

23
00:00:50,960 --> 00:00:52,800
so today we're going to talk about

24
00:00:52,800 --> 00:00:54,000
malcolm

25
00:00:54,000 --> 00:00:55,360
a tool that was developed and is

26
00:00:55,360 --> 00:00:57,039
developed at the idaho national lab with

27
00:00:57,039 --> 00:00:58,640
support of the united states department

28
00:00:58,640 --> 00:01:01,039
of homeland security cisa

29
00:01:01,039 --> 00:01:03,120
you may be familiar with some or all of

30
00:01:03,120 --> 00:01:05,280
the tools that make up malcolm because

31
00:01:05,280 --> 00:01:06,880
they're open source and they're all

32
00:01:06,880 --> 00:01:08,640
generally in use

33
00:01:08,640 --> 00:01:09,760
in the

34
00:01:09,760 --> 00:01:11,840
in the security and network traffic

35
00:01:11,840 --> 00:01:13,520
analysis community

36
00:01:13,520 --> 00:01:15,840
but what malcolm provides is a framework

37
00:01:15,840 --> 00:01:18,479
of interconnectivity for these tools

38
00:01:18,479 --> 00:01:20,640
which which streamlines network traffic

39
00:01:20,640 --> 00:01:22,560
analysis and helps you bring all that

40
00:01:22,560 --> 00:01:25,119
important stuff to the foreground as

41
00:01:25,119 --> 00:01:26,880
painlessly as possible

42
00:01:26,880 --> 00:01:28,479
so that's what we're going to talk about

43
00:01:28,479 --> 00:01:30,400
today in this video is using malcolm to

44
00:01:30,400 --> 00:01:32,560
gain insight into both link layer and

45
00:01:32,560 --> 00:01:36,000
application layer network traffic

46
00:01:36,000 --> 00:01:37,759
before we jump into our discussion about

47
00:01:37,759 --> 00:01:39,360
malcolm and some of its primary

48
00:01:39,360 --> 00:01:41,600
components like zeek and the elastic

49
00:01:41,600 --> 00:01:43,439
stack and archime

50
00:01:43,439 --> 00:01:46,799
let's take a minute and talk about

51
00:01:46,799 --> 00:01:48,880
intrusion detection systems so we can

52
00:01:48,880 --> 00:01:50,479
get an understanding of what these tools

53
00:01:50,479 --> 00:01:52,479
do and how they fit into the threat

54
00:01:52,479 --> 00:01:54,799
detection landscape when talking about

55
00:01:54,799 --> 00:01:56,799
intrusion detection systems usually

56
00:01:56,799 --> 00:01:58,240
you're going to be talking about tools

57
00:01:58,240 --> 00:02:00,320
in one of two categories

58
00:02:00,320 --> 00:02:03,280
host intrusion detection systems or hids

59
00:02:03,280 --> 00:02:06,000
utilize a native agent that runs locally

60
00:02:06,000 --> 00:02:07,680
on individual hosts and endpoints on the

61
00:02:07,680 --> 00:02:08,560
network

62
00:02:08,560 --> 00:02:11,038
and these agents monitor you know not

63
00:02:11,038 --> 00:02:12,000
only

64
00:02:12,000 --> 00:02:14,080
maybe network traffic and stuff at the

65
00:02:14,080 --> 00:02:15,599
device nic level

66
00:02:15,599 --> 00:02:18,000
but also track modifications to system

67
00:02:18,000 --> 00:02:20,080
files or monitor user authentication

68
00:02:20,080 --> 00:02:22,560
events configuration changes

69
00:02:22,560 --> 00:02:25,200
and and report these events to a central

70
00:02:25,200 --> 00:02:28,400
manager for alerting and reporting

71
00:02:28,400 --> 00:02:30,239
host intrusion detection systems is not

72
00:02:30,239 --> 00:02:31,280
what we're going to be talking about

73
00:02:31,280 --> 00:02:32,800
today as it's not really the main focus

74
00:02:32,800 --> 00:02:34,720
of malcolm there are plugins that you

75
00:02:34,720 --> 00:02:36,959
can use to get host data into malcolm

76
00:02:36,959 --> 00:02:38,560
and maybe at some future point we'll put

77
00:02:38,560 --> 00:02:39,680
together a

78
00:02:39,680 --> 00:02:41,760
a video that will instruct you how to do

79
00:02:41,760 --> 00:02:42,879
that

80
00:02:42,879 --> 00:02:44,480
but for now we're going to be talking

81
00:02:44,480 --> 00:02:47,519
about the other category of ids which is

82
00:02:47,519 --> 00:02:49,519
network intrusion detection systems or

83
00:02:49,519 --> 00:02:50,560
nids

84
00:02:50,560 --> 00:02:52,319
network intrusion detection systems are

85
00:02:52,319 --> 00:02:53,760
generally passive and out-of-band

86
00:02:53,760 --> 00:02:56,879
programs or devices that capture and

87
00:02:56,879 --> 00:02:59,200
analyze network traffic at strategic

88
00:02:59,200 --> 00:03:00,800
points in your network

89
00:03:00,800 --> 00:03:02,640
in order to monitor traffic among

90
00:03:02,640 --> 00:03:04,959
devices in the network or between

91
00:03:04,959 --> 00:03:06,879
devices on the network and the outside

92
00:03:06,879 --> 00:03:08,319
world

93
00:03:08,319 --> 00:03:10,239
so um a couple of different ways that we

94
00:03:10,239 --> 00:03:12,319
can do this the monitoring and analysis

95
00:03:12,319 --> 00:03:14,640
can be done concurrently in other words

96
00:03:14,640 --> 00:03:16,400
analyzing the traffic and forwarding it

97
00:03:16,400 --> 00:03:18,080
along

98
00:03:18,080 --> 00:03:19,519
sorry capturing the traffic and then

99
00:03:19,519 --> 00:03:21,599
forwarding it along for analysis as it's

100
00:03:21,599 --> 00:03:22,879
captured

101
00:03:22,879 --> 00:03:24,080
or um

102
00:03:24,080 --> 00:03:25,840
the other way is the network traffic can

103
00:03:25,840 --> 00:03:27,840
be analyzed

104
00:03:27,840 --> 00:03:29,519
after it's been captured in the past

105
00:03:29,519 --> 00:03:30,400
right

106
00:03:30,400 --> 00:03:31,840
we can capture it first with with

107
00:03:31,840 --> 00:03:34,480
whatever set of tools we want um

108
00:03:34,480 --> 00:03:35,920
matt we're going to talk mostly about

109
00:03:35,920 --> 00:03:37,599
the latter today uh just for our

110
00:03:37,599 --> 00:03:40,000
examples i'll be importing pcap data and

111
00:03:40,000 --> 00:03:42,400
then analyzing that pcap data rather

112
00:03:42,400 --> 00:03:44,000
than using a live network sensor to

113
00:03:44,000 --> 00:03:46,080
capture and forward that data the

114
00:03:46,080 --> 00:03:50,000
malcolm project does include a

115
00:03:50,080 --> 00:03:52,239
linux distribution called hedgehog linux

116
00:03:52,239 --> 00:03:53,920
that's kind of a stripped down debian

117
00:03:53,920 --> 00:03:55,840
based linux that has

118
00:03:55,840 --> 00:03:58,239
these capture tools and an easy

119
00:03:58,239 --> 00:03:59,920
configuration for those capture tools to

120
00:03:59,920 --> 00:04:02,560
set them up and capture and and forward

121
00:04:02,560 --> 00:04:03,920
to malcolm

122
00:04:03,920 --> 00:04:06,159
there's another one of the videos uh on

123
00:04:06,159 --> 00:04:08,640
the malcolm network traffic analysis

124
00:04:08,640 --> 00:04:10,480
youtube channel that talks about how to

125
00:04:10,480 --> 00:04:12,400
set up hedgehog and malcolm and set up

126
00:04:12,400 --> 00:04:14,159
that forwarding together but today we're

127
00:04:14,159 --> 00:04:16,399
going to talk about um more of the i've

128
00:04:16,399 --> 00:04:17,918
already captured i've got some pcap and

129
00:04:17,918 --> 00:04:19,358
i want to upload and analyze it with

130
00:04:19,358 --> 00:04:21,199
malcolm

131
00:04:21,199 --> 00:04:23,360
one other good important point about ids

132
00:04:23,360 --> 00:04:25,199
is it's generally passive meaning that

133
00:04:25,199 --> 00:04:27,360
it shouldn't alter the network traffic

134
00:04:27,360 --> 00:04:30,720
itself as a side effect of its analysis

135
00:04:30,720 --> 00:04:32,560
there are systems out there that

136
00:04:32,560 --> 00:04:34,560
actively drop suspicious network traffic

137
00:04:34,560 --> 00:04:35,919
and those are called intrusion

138
00:04:35,919 --> 00:04:37,440
prevention systems

139
00:04:37,440 --> 00:04:39,759
or ips instead of intrusion detection

140
00:04:39,759 --> 00:04:40,840
systems or

141
00:04:40,840 --> 00:04:43,680
ids and it's important particularly in

142
00:04:43,680 --> 00:04:46,720
networks with critical infrastructure

143
00:04:46,720 --> 00:04:49,520
one of the focuses of malcolm is

144
00:04:49,520 --> 00:04:51,280
industrial control systems or or

145
00:04:51,280 --> 00:04:54,320
critical infrastructure networks with ot

146
00:04:54,320 --> 00:04:56,400
protocols while it's perfectly suitable

147
00:04:56,400 --> 00:04:58,160
for using in a purely it network that's

148
00:04:58,160 --> 00:05:00,080
fine

149
00:05:00,080 --> 00:05:02,320
but particularly on ot networks it's

150
00:05:02,320 --> 00:05:04,479
important that we don't go knocking

151
00:05:04,479 --> 00:05:05,840
things over

152
00:05:05,840 --> 00:05:08,400
as far as network services go because

153
00:05:08,400 --> 00:05:09,440
because that may be critical

154
00:05:09,440 --> 00:05:10,880
infrastructure right

155
00:05:10,880 --> 00:05:12,720
and so it's important that ids is done

156
00:05:12,720 --> 00:05:15,120
out of band and and

157
00:05:15,120 --> 00:05:16,479
in a way that won't influence the

158
00:05:16,479 --> 00:05:18,880
network traffic itself

159
00:05:18,880 --> 00:05:20,560
um so let's talk about some of the

160
00:05:20,560 --> 00:05:23,520
different approaches to ids uh each has

161
00:05:23,520 --> 00:05:25,600
its strengths and weaknesses i guess you

162
00:05:25,600 --> 00:05:26,880
could say

163
00:05:26,880 --> 00:05:29,360
first there's signature based

164
00:05:29,360 --> 00:05:31,280
uh detection and this is what you're

165
00:05:31,280 --> 00:05:33,360
familiar to in the context of like a

166
00:05:33,360 --> 00:05:34,960
antivirus

167
00:05:34,960 --> 00:05:37,600
an antivirus program you know it has or

168
00:05:37,600 --> 00:05:39,759
a malware program that recognizes

169
00:05:39,759 --> 00:05:42,240
malware based on some pattern or

170
00:05:42,240 --> 00:05:43,360
signature

171
00:05:43,360 --> 00:05:46,240
uh in the malware itself and then

172
00:05:46,240 --> 00:05:47,759
you know it has a list of predefined

173
00:05:47,759 --> 00:05:49,600
patterns that it's looking for

174
00:05:49,600 --> 00:05:51,919
and when it finds a file or traffic or

175
00:05:51,919 --> 00:05:53,120
whatever that matches one of those

176
00:05:53,120 --> 00:05:54,639
patterns

177
00:05:54,639 --> 00:05:58,960
it flags an alert as malicious behavior

178
00:05:58,960 --> 00:06:01,759
while signature based ids is great for

179
00:06:01,759 --> 00:06:04,240
known attacks and it's usually efficient

180
00:06:04,240 --> 00:06:07,039
as far as resource utilization goes

181
00:06:07,039 --> 00:06:08,720
it's not generally effective at

182
00:06:08,720 --> 00:06:11,280
detecting novel attacks

183
00:06:11,280 --> 00:06:13,360
because it's like the new attacks the

184
00:06:13,360 --> 00:06:14,800
zero days or whatever you want to call

185
00:06:14,800 --> 00:06:17,360
them they're the unknown unknowns and

186
00:06:17,360 --> 00:06:18,720
you you can't write a signature for

187
00:06:18,720 --> 00:06:19,919
something that you don't know about

188
00:06:19,919 --> 00:06:22,240
generally

189
00:06:22,240 --> 00:06:25,360
the the second camp there for ids is

190
00:06:25,360 --> 00:06:27,840
statistical anomaly based detection

191
00:06:27,840 --> 00:06:28,720
um

192
00:06:28,720 --> 00:06:30,479
this is this is

193
00:06:30,479 --> 00:06:31,919
the machine learning right machine

194
00:06:31,919 --> 00:06:34,479
learning is

195
00:06:34,479 --> 00:06:36,800
either math cleverly disguised as magic

196
00:06:36,800 --> 00:06:38,960
or magic cleverly disguised as math i'm

197
00:06:38,960 --> 00:06:42,319
not exactly sure which it's cool um but

198
00:06:42,319 --> 00:06:45,280
uh the basic idea is that it's creating

199
00:06:45,280 --> 00:06:48,000
a baseline for trusted network behavior

200
00:06:48,000 --> 00:06:50,000
and then it will compare new behavior

201
00:06:50,000 --> 00:06:52,560
against that baseline um using this

202
00:06:52,560 --> 00:06:53,919
magic or math

203
00:06:53,919 --> 00:06:56,639
and this technique can be detec it can

204
00:06:56,639 --> 00:06:59,360
be effective in detecting anomalies or

205
00:06:59,360 --> 00:07:01,520
um you know novel attacks things that

206
00:07:01,520 --> 00:07:03,759
you're not necessarily looking for but

207
00:07:03,759 --> 00:07:04,560
uh

208
00:07:04,560 --> 00:07:06,800
you have to it can suffer from high

209
00:07:06,800 --> 00:07:08,720
false positive rates especially if you

210
00:07:08,720 --> 00:07:09,919
don't have

211
00:07:09,919 --> 00:07:11,520
the um

212
00:07:11,520 --> 00:07:14,319
the baseline there to to really define

213
00:07:14,319 --> 00:07:16,400
what is normal which can be difficult in

214
00:07:16,400 --> 00:07:18,479
a network assessment particularly if

215
00:07:18,479 --> 00:07:20,080
you're coming in from the point of view

216
00:07:20,080 --> 00:07:21,039
of like

217
00:07:21,039 --> 00:07:22,960
i don't necessarily maybe have this

218
00:07:22,960 --> 00:07:25,759
long-term um this long-term network

219
00:07:25,759 --> 00:07:27,680
traffic i want to analyze i just have

220
00:07:27,680 --> 00:07:30,800
some pcaps or whatever right

221
00:07:30,800 --> 00:07:32,639
it can be computationally expensive as

222
00:07:32,639 --> 00:07:33,440
well

223
00:07:33,440 --> 00:07:36,000
as far as resources for the um

224
00:07:36,000 --> 00:07:36,960
the

225
00:07:36,960 --> 00:07:38,479
anomaly the machine learning kind of

226
00:07:38,479 --> 00:07:40,160
anomaly stuff

227
00:07:40,160 --> 00:07:41,680
certainly has its place in the threat

228
00:07:41,680 --> 00:07:43,680
detection landscape and

229
00:07:43,680 --> 00:07:46,800
there are tools built into malcolm once

230
00:07:46,800 --> 00:07:48,240
we won't really be talking about today

231
00:07:48,240 --> 00:07:49,840
necessarily but

232
00:07:49,840 --> 00:07:51,440
maybe in a future video we'll do one for

233
00:07:51,440 --> 00:07:53,520
that as well where we can set up anomaly

234
00:07:53,520 --> 00:07:55,039
detectors and

235
00:07:55,039 --> 00:07:56,960
and start to get that baseline

236
00:07:56,960 --> 00:07:59,199
established but

237
00:07:59,199 --> 00:08:00,800
today we'll be talking more about i

238
00:08:00,800 --> 00:08:04,080
think the third camp which is where um

239
00:08:04,080 --> 00:08:08,000
i feel is a nice kind of blend of of

240
00:08:08,000 --> 00:08:09,919
knowing what i'm looking for versus

241
00:08:09,919 --> 00:08:10,960
trying to

242
00:08:10,960 --> 00:08:13,120
flag interesting things that i might not

243
00:08:13,120 --> 00:08:15,039
be looking for and that is stateful

244
00:08:15,039 --> 00:08:18,160
protocol analysis

245
00:08:18,160 --> 00:08:19,680
stateful protocol analysis-based

246
00:08:19,680 --> 00:08:22,000
detection uses knowledge of network

247
00:08:22,000 --> 00:08:24,639
protocols to look for deviations from

248
00:08:24,639 --> 00:08:26,639
profiles of generally accepted

249
00:08:26,639 --> 00:08:28,639
definitions of normal activity in other

250
00:08:28,639 --> 00:08:31,199
words you know i know what normal http

251
00:08:31,199 --> 00:08:33,599
http traffic normally looks like

252
00:08:33,599 --> 00:08:35,360
you know usually i see

253
00:08:35,360 --> 00:08:36,958
these error codes and these kinds of

254
00:08:36,958 --> 00:08:40,640
requests or you know i know what smb

255
00:08:40,640 --> 00:08:43,360
file shares do most of the time and so

256
00:08:43,360 --> 00:08:45,120
if i can kind of categorize based on my

257
00:08:45,120 --> 00:08:47,839
knowledge of that network protocol um we

258
00:08:47,839 --> 00:08:48,720
can

259
00:08:48,720 --> 00:08:50,640
programs can then say hey you know

260
00:08:50,640 --> 00:08:52,399
here's a summary of what we're doing in

261
00:08:52,399 --> 00:08:53,920
this particular protocol or that

262
00:08:53,920 --> 00:08:56,000
particular protocol and it helps us

263
00:08:56,000 --> 00:08:57,600
recognize patterns as we look at that

264
00:08:57,600 --> 00:08:59,920
data

265
00:09:00,399 --> 00:09:03,279
so what type of intrusions or attacks

266
00:09:03,279 --> 00:09:05,680
might we hope to uncover using an

267
00:09:05,680 --> 00:09:08,160
intrusion detection system

268
00:09:08,160 --> 00:09:09,839
let's talk about that a scanning attack

269
00:09:09,839 --> 00:09:12,000
first a scanning attack is

270
00:09:12,000 --> 00:09:13,440
used to

271
00:09:13,440 --> 00:09:16,399
detect network topology to assimilate

272
00:09:16,399 --> 00:09:18,160
information about a system or a network

273
00:09:18,160 --> 00:09:19,760
being attacked

274
00:09:19,760 --> 00:09:21,680
by attempting connections to a range of

275
00:09:21,680 --> 00:09:23,680
ip addresses within a network or

276
00:09:23,680 --> 00:09:25,600
scanning for open ports

277
00:09:25,600 --> 00:09:27,519
which would correspond to corresponding

278
00:09:27,519 --> 00:09:30,240
to responding services on those hosts

279
00:09:30,240 --> 00:09:32,399
an attacker puts together a map of the

280
00:09:32,399 --> 00:09:34,320
topology of your network the types of

281
00:09:34,320 --> 00:09:35,680
network traffic that are allowed through

282
00:09:35,680 --> 00:09:37,600
a firewall what active hosts are on the

283
00:09:37,600 --> 00:09:40,000
network the operating system kernel and

284
00:09:40,000 --> 00:09:42,480
software versions running on the exposed

285
00:09:42,480 --> 00:09:43,760
services

286
00:09:43,760 --> 00:09:45,680
this information can then be used to

287
00:09:45,680 --> 00:09:47,920
launch attacks aimed

288
00:09:47,920 --> 00:09:50,080
at at specific vulnerabilities with

289
00:09:50,080 --> 00:09:52,080
specific exploits

290
00:09:52,080 --> 00:09:54,160
and and a good idea should be able to

291
00:09:54,160 --> 00:09:56,800
notice these kinds of attacks these

292
00:09:56,800 --> 00:09:58,720
kinds of accesses because they might

293
00:09:58,720 --> 00:10:00,480
possibly be seen as a series of

294
00:10:00,480 --> 00:10:02,720
sequential connections from one host to

295
00:10:02,720 --> 00:10:05,279
a range of ip addresses or ports or you

296
00:10:05,279 --> 00:10:08,480
know a brute force attempt to to log on

297
00:10:08,480 --> 00:10:10,720
to some exposed service

298
00:10:10,720 --> 00:10:13,839
and then you know can alert on that host

299
00:10:13,839 --> 00:10:17,200
scan or that port scan that took place

300
00:10:17,200 --> 00:10:19,519
a denial of service attack

301
00:10:19,519 --> 00:10:22,079
works by flooding a network or host with

302
00:10:22,079 --> 00:10:23,920
an overwhelming number of connections or

303
00:10:23,920 --> 00:10:25,839
requests so this could be something as

304
00:10:25,839 --> 00:10:28,079
simple as sending a large number of ping

305
00:10:28,079 --> 00:10:30,480
packets which is like a ping flood or by

306
00:10:30,480 --> 00:10:32,480
forging the initiation of a tcp

307
00:10:32,480 --> 00:10:35,200
connection a syn flood causing the host

308
00:10:35,200 --> 00:10:36,480
to be

309
00:10:36,480 --> 00:10:38,000
unable to respond to legitimate

310
00:10:38,000 --> 00:10:39,440
connections

311
00:10:39,440 --> 00:10:41,120
intrusion detection systems are usually

312
00:10:41,120 --> 00:10:43,360
good at categorizing traffic

313
00:10:43,360 --> 00:10:46,160
from or to a particular host or service

314
00:10:46,160 --> 00:10:48,640
and so um can often track things like

315
00:10:48,640 --> 00:10:50,560
connection state for various network

316
00:10:50,560 --> 00:10:52,160
protocols or at least you know the

317
00:10:52,160 --> 00:10:54,399
number of connections attempts which

318
00:10:54,399 --> 00:10:56,000
makes identifying

319
00:10:56,000 --> 00:10:58,480
a denial of service

320
00:10:58,480 --> 00:11:00,880
attack pretty easy um it's pretty it's

321
00:11:00,880 --> 00:11:02,560
pretty obvious i guess when it's

322
00:11:02,560 --> 00:11:04,640
happening that that your network is

323
00:11:04,640 --> 00:11:06,800
overwhelmed or your host is overwhelmed

324
00:11:06,800 --> 00:11:09,839
um just based on the pure volume

325
00:11:09,839 --> 00:11:12,160
and then finally a penetration attack

326
00:11:12,160 --> 00:11:14,720
this is any type of attack which gives

327
00:11:14,720 --> 00:11:17,120
an unauthorized attacker

328
00:11:17,120 --> 00:11:19,040
the ability to actually access system

329
00:11:19,040 --> 00:11:21,600
resources privileges or data by

330
00:11:21,600 --> 00:11:24,560
exploiting a misconfigured system or a

331
00:11:24,560 --> 00:11:25,920
software flaw

332
00:11:25,920 --> 00:11:27,200
these types of attacks are more

333
00:11:27,200 --> 00:11:30,000
difficult to identify because often they

334
00:11:30,000 --> 00:11:30,800
they

335
00:11:30,800 --> 00:11:32,880
look like legitimate traffic right or

336
00:11:32,880 --> 00:11:35,040
they may be exploiting

337
00:11:35,040 --> 00:11:37,440
like i said a misconfiguration or or

338
00:11:37,440 --> 00:11:40,079
some unknown loophole uh to get in and

339
00:11:40,079 --> 00:11:42,880
get a foothold in the system

340
00:11:42,880 --> 00:11:45,279
and so it's at that point once they get

341
00:11:45,279 --> 00:11:46,800
a foothold in a system and can maybe

342
00:11:46,800 --> 00:11:49,120
pivot to another area in the system

343
00:11:49,120 --> 00:11:50,560
it's easier for them to cover their

344
00:11:50,560 --> 00:11:52,720
tracks for future communications and

345
00:11:52,720 --> 00:11:54,880
mask their commands as normal network

346
00:11:54,880 --> 00:11:57,760
traffic so this is particularly true

347
00:11:57,760 --> 00:12:01,360
with custom targeted zero-day exploits

348
00:12:01,360 --> 00:12:03,040
or

349
00:12:03,040 --> 00:12:05,440
exploits for which the attack vector was

350
00:12:05,440 --> 00:12:08,639
not previously known

351
00:12:09,200 --> 00:12:11,200
and hence there's not signatures to

352
00:12:11,200 --> 00:12:12,800
detect them

353
00:12:12,800 --> 00:12:15,760
however ids's can still be valuable in

354
00:12:15,760 --> 00:12:18,079
identifying penetration attacks when

355
00:12:18,079 --> 00:12:20,160
they are protocol aware allowing

356
00:12:20,160 --> 00:12:22,320
analysts to recognize changes in

357
00:12:22,320 --> 00:12:24,160
patterns of behavior or unusual

358
00:12:24,160 --> 00:12:26,240
operations in the context of those

359
00:12:26,240 --> 00:12:30,160
protocols within normal network traffic

360
00:12:30,160 --> 00:12:31,760
so um zeek we're going to talk about

361
00:12:31,760 --> 00:12:33,680
zeke for a little bit zeke which was

362
00:12:33,680 --> 00:12:35,680
formerly known as bro

363
00:12:35,680 --> 00:12:37,519
is one of the two

364
00:12:37,519 --> 00:12:40,560
pcap analyzing engines used by malcolm

365
00:12:40,560 --> 00:12:42,560
to generate metadata about network

366
00:12:42,560 --> 00:12:45,519
traffic which metadata is indexed and

367
00:12:45,519 --> 00:12:47,200
made searchable through malcolm's

368
00:12:47,200 --> 00:12:48,800
visualization tools

369
00:12:48,800 --> 00:12:49,600
so

370
00:12:49,600 --> 00:12:51,519
before we get into what those tools are

371
00:12:51,519 --> 00:12:53,600
let's do a little more laying the

372
00:12:53,600 --> 00:12:55,600
groundwork of what zeke's capabilities

373
00:12:55,600 --> 00:12:57,440
are and what zeke is to better

374
00:12:57,440 --> 00:12:59,680
understand what it offers

375
00:12:59,680 --> 00:13:02,880
analysts as a malcolm data source

376
00:13:02,880 --> 00:13:04,399
so where does z come into the picture

377
00:13:04,399 --> 00:13:05,600
what is zeke

378
00:13:05,600 --> 00:13:08,160
sometimes it's referred to as zeek ids

379
00:13:08,160 --> 00:13:10,160
and it incorporates some techniques from

380
00:13:10,160 --> 00:13:12,079
the previous slide

381
00:13:12,079 --> 00:13:15,200
but zeek is more than just a

382
00:13:15,200 --> 00:13:17,360
intrusion detection system really it's

383
00:13:17,360 --> 00:13:19,040
it's it's really great it's an

384
00:13:19,040 --> 00:13:21,519
extensible open source passive network

385
00:13:21,519 --> 00:13:24,079
analysis framework and

386
00:13:24,079 --> 00:13:26,160
it does packet capture trafficking

387
00:13:26,160 --> 00:13:29,519
inspection intrusion detection

388
00:13:29,519 --> 00:13:32,560
records flow logs it can even be used

389
00:13:32,560 --> 00:13:34,880
has a robust scripting and data

390
00:13:34,880 --> 00:13:37,120
structure framework for log enrichments

391
00:13:37,120 --> 00:13:38,800
or for

392
00:13:38,800 --> 00:13:40,880
writing your own you know creating your

393
00:13:40,880 --> 00:13:42,560
own logs or even writing your own

394
00:13:42,560 --> 00:13:44,320
network analyzers

395
00:13:44,320 --> 00:13:46,480
so if i had to categorize zeek into one

396
00:13:46,480 --> 00:13:48,959
of the three detection method categories

397
00:13:48,959 --> 00:13:50,240
from from

398
00:13:50,240 --> 00:13:52,959
our previous slide i'd categorize it in

399
00:13:52,959 --> 00:13:54,079
the

400
00:13:54,079 --> 00:13:56,320
stateful protocol analysis detection

401
00:13:56,320 --> 00:13:57,120
camp

402
00:13:57,120 --> 00:13:59,120
zeke's network traffic parsers examine

403
00:13:59,120 --> 00:14:01,440
network traffic at the application layer

404
00:14:01,440 --> 00:14:04,160
and then reports on the behaviors of

405
00:14:04,160 --> 00:14:05,760
hosts that are communicating over those

406
00:14:05,760 --> 00:14:08,320
protocols so these logs can then be used

407
00:14:08,320 --> 00:14:10,079
to do a more in-depth

408
00:14:10,079 --> 00:14:12,959
manual or automated analysis as we'll

409
00:14:12,959 --> 00:14:15,680
see throughout our discussion of malcolm

410
00:14:15,680 --> 00:14:17,440
today

411
00:14:17,440 --> 00:14:19,040
i would say that zeke as well is

412
00:14:19,040 --> 00:14:21,040
fundamentally different from other ids's

413
00:14:21,040 --> 00:14:23,360
in that it goes beyond pure signature

414
00:14:23,360 --> 00:14:24,320
matching

415
00:14:24,320 --> 00:14:27,040
in favor of uh of analyzing that

416
00:14:27,040 --> 00:14:29,120
application layer behavior of the host

417
00:14:29,120 --> 00:14:30,959
themselves although it does have

418
00:14:30,959 --> 00:14:32,079
signature

419
00:14:32,079 --> 00:14:34,800
matching capabilities similar to

420
00:14:34,800 --> 00:14:36,480
yara or snort

421
00:14:36,480 --> 00:14:38,959
generally its focus is more on

422
00:14:38,959 --> 00:14:39,760
just

423
00:14:39,760 --> 00:14:41,519
parsing network traffic at the

424
00:14:41,519 --> 00:14:43,279
application layer

425
00:14:43,279 --> 00:14:46,160
zeek features can be combined with

426
00:14:46,160 --> 00:14:48,240
combining powerful ways to provide

427
00:14:48,240 --> 00:14:50,639
insight into network traffic

428
00:14:50,639 --> 00:14:53,120
with ziklog the network analysis

429
00:14:53,120 --> 00:14:55,519
can include content extraction for

430
00:14:55,519 --> 00:14:57,519
example extracting

431
00:14:57,519 --> 00:14:59,279
exfiltrated files from pcapps for

432
00:14:59,279 --> 00:15:01,519
further examination

433
00:15:01,519 --> 00:15:03,279
behavior analysis and session

434
00:15:03,279 --> 00:15:05,760
correlation as zeek is is highly

435
00:15:05,760 --> 00:15:08,160
stateful extensively tracking

436
00:15:08,160 --> 00:15:10,399
application layer network state it can

437
00:15:10,399 --> 00:15:12,320
be used to determine what else took

438
00:15:12,320 --> 00:15:14,399
place during a session or during the

439
00:15:14,399 --> 00:15:16,880
communication between two hosts or maybe

440
00:15:16,880 --> 00:15:19,279
what proceeded or followed a suspicious

441
00:15:19,279 --> 00:15:21,360
event and then like i said zeek is

442
00:15:21,360 --> 00:15:22,560
extensible

443
00:15:22,560 --> 00:15:24,320
support for uncommon protocols for

444
00:15:24,320 --> 00:15:27,680
example ot protocols can be added via

445
00:15:27,680 --> 00:15:30,240
scripts and plugin architecture

446
00:15:30,240 --> 00:15:32,800
as as i work a lot with analysts that

447
00:15:32,800 --> 00:15:34,639
deal as i said earlier in industrial

448
00:15:34,639 --> 00:15:37,120
control systems or

449
00:15:37,120 --> 00:15:38,399
critical infrastructure kinds of

450
00:15:38,399 --> 00:15:40,480
networks a lot of these protocols are

451
00:15:40,480 --> 00:15:42,720
not commonly seen you know on the

452
00:15:42,720 --> 00:15:45,040
internet as a whole and so a lot of the

453
00:15:45,040 --> 00:15:46,720
times off-the-shelf tools that you'll

454
00:15:46,720 --> 00:15:47,600
find

455
00:15:47,600 --> 00:15:49,440
for dealing with um

456
00:15:49,440 --> 00:15:51,279
don't include dealing with this kind of

457
00:15:51,279 --> 00:15:53,440
traffic and so

458
00:15:53,440 --> 00:15:54,880
one of the things that malcolm has done

459
00:15:54,880 --> 00:15:57,120
with its use of zeek is

460
00:15:57,120 --> 00:16:00,000
is add a bunch more support for ot

461
00:16:00,000 --> 00:16:02,959
protocols for ics protocols and and then

462
00:16:02,959 --> 00:16:04,959
allowing us to kind of bring that

463
00:16:04,959 --> 00:16:06,959
metadata that's associated with those

464
00:16:06,959 --> 00:16:09,759
communications to the forefront

465
00:16:09,759 --> 00:16:12,000
alongside the you know more common i.t

466
00:16:12,000 --> 00:16:13,360
protocols

467
00:16:13,360 --> 00:16:15,680
so zeke is really

468
00:16:15,680 --> 00:16:17,360
powerful tool it's commonly used in

469
00:16:17,360 --> 00:16:19,519
network traffic analysis but it does you

470
00:16:19,519 --> 00:16:22,560
know have its own set of hurdles and in

471
00:16:22,560 --> 00:16:25,920
a minute we'll hopefully see how malcolm

472
00:16:25,920 --> 00:16:27,199
you'll hopefully see how malcolm helps

473
00:16:27,199 --> 00:16:28,959
overcome those hurdles

474
00:16:28,959 --> 00:16:30,560
while zeke

475
00:16:30,560 --> 00:16:32,240
for example you know zeke

476
00:16:32,240 --> 00:16:34,560
is going to give us that metadata but it

477
00:16:34,560 --> 00:16:37,839
can be difficult for for someone who

478
00:16:37,839 --> 00:16:40,880
is not you know an expert traffic

479
00:16:40,880 --> 00:16:43,360
analyst an expert network analyst to get

480
00:16:43,360 --> 00:16:46,639
back from the zeek data to the original

481
00:16:46,639 --> 00:16:48,079
packet payload

482
00:16:48,079 --> 00:16:49,279
um

483
00:16:49,279 --> 00:16:51,279
and and you know if you do need to get

484
00:16:51,279 --> 00:16:54,079
into the to the actual low-level payload

485
00:16:54,079 --> 00:16:55,440
um

486
00:16:55,440 --> 00:16:57,600
it can be difficult to like go from zeek

487
00:16:57,600 --> 00:16:59,759
to say wireshark and open that up

488
00:16:59,759 --> 00:17:00,720
um

489
00:17:00,720 --> 00:17:02,240
with just the the tools that you might

490
00:17:02,240 --> 00:17:04,720
be used to using um the one of the other

491
00:17:04,720 --> 00:17:06,319
things right zeke it

492
00:17:06,319 --> 00:17:08,319
generates a bunch of flat text log files

493
00:17:08,319 --> 00:17:10,160
right a bunch of delimited or json log

494
00:17:10,160 --> 00:17:12,400
files and if you've got gigabytes of

495
00:17:12,400 --> 00:17:14,559
text files um there you know there are

496
00:17:14,559 --> 00:17:17,119
some tools to to manipulate those and

497
00:17:17,119 --> 00:17:20,000
stuff but again if you're not um maybe

498
00:17:20,000 --> 00:17:21,919
uh uh really well versed on the command

499
00:17:21,919 --> 00:17:24,559
line or um if you don't already have a

500
00:17:24,559 --> 00:17:26,319
tool set in place to process those text

501
00:17:26,319 --> 00:17:28,640
files it can be difficult to to run zeke

502
00:17:28,640 --> 00:17:30,320
and then know what am i supposed to do

503
00:17:30,320 --> 00:17:31,919
with all of this

504
00:17:31,919 --> 00:17:34,320
all this logs all these logs

505
00:17:34,320 --> 00:17:35,520
um

506
00:17:35,520 --> 00:17:37,840
so uh we're going to talk today about

507
00:17:37,840 --> 00:17:40,160
zeke mostly in its context as a

508
00:17:40,160 --> 00:17:41,760
component of malcolm

509
00:17:41,760 --> 00:17:44,720
to perform post capture network analysis

510
00:17:44,720 --> 00:17:47,360
against pcap files that we've already

511
00:17:47,360 --> 00:17:49,520
gathered previously um

512
00:17:49,520 --> 00:17:51,679
so uh let's talk about the kinds of logs

513
00:17:51,679 --> 00:17:53,440
that zeke generates so that when we get

514
00:17:53,440 --> 00:17:55,760
to looking at that data we can recognize

515
00:17:55,760 --> 00:17:58,559
what what we're seeing

516
00:17:58,799 --> 00:18:01,760
first uh the

517
00:18:01,760 --> 00:18:03,840
kind of the backbone of zeek traffic

518
00:18:03,840 --> 00:18:08,159
analysis is con.log

519
00:18:08,240 --> 00:18:10,400
con stands for connection and it's

520
00:18:10,400 --> 00:18:12,000
that's what it is it's network session

521
00:18:12,000 --> 00:18:13,120
tracking

522
00:18:13,120 --> 00:18:15,840
con.log is the backbone of a zeke

523
00:18:15,840 --> 00:18:18,000
analyst

524
00:18:18,000 --> 00:18:20,640
of a zeke analysis because each line of

525
00:18:20,640 --> 00:18:22,000
con.log

526
00:18:22,000 --> 00:18:24,799
each record in con.log represents a

527
00:18:24,799 --> 00:18:26,640
unique network session which is

528
00:18:26,640 --> 00:18:30,480
identified by a four tuple consisting of

529
00:18:30,480 --> 00:18:33,840
uh originating or source you can kind of

530
00:18:33,840 --> 00:18:36,400
think of it like that uh source

531
00:18:36,400 --> 00:18:38,799
or originating ip and port and

532
00:18:38,799 --> 00:18:43,200
responding or destination ip and port so

533
00:18:43,200 --> 00:18:45,840
originating ipport destination iport

534
00:18:45,840 --> 00:18:48,880
makes up that for tuple that is a unique

535
00:18:48,880 --> 00:18:51,600
identifier for that session so each

536
00:18:51,600 --> 00:18:54,640
connection in con.log each session is

537
00:18:54,640 --> 00:18:58,000
assigned a randomish 18 character unique

538
00:18:58,000 --> 00:19:00,640
identifier or uid

539
00:19:00,640 --> 00:19:03,440
and so a particular session's uid

540
00:19:03,440 --> 00:19:05,440
from con.log

541
00:19:05,440 --> 00:19:08,080
will be referenced in any other zeke log

542
00:19:08,080 --> 00:19:10,720
files generated from that same network

543
00:19:10,720 --> 00:19:14,960
traffic so for example in the case of a

544
00:19:14,960 --> 00:19:17,440
an http session between a web browser

545
00:19:17,440 --> 00:19:20,080
and a website there may be one line

546
00:19:20,080 --> 00:19:21,840
representing the entire session in

547
00:19:21,840 --> 00:19:25,039
con.log because that http session is is

548
00:19:25,039 --> 00:19:28,160
a tcp connection and it's from an ip and

549
00:19:28,160 --> 00:19:31,120
a port to an ip and a port and then

550
00:19:31,120 --> 00:19:33,840
during the course of that connection

551
00:19:33,840 --> 00:19:37,760
there could be many http operations

552
00:19:37,760 --> 00:19:40,160
gets and posts and

553
00:19:40,160 --> 00:19:44,000
responses and requests and each of those

554
00:19:44,000 --> 00:19:46,080
actions in the http section each of

555
00:19:46,080 --> 00:19:48,720
those operations will be represented in

556
00:19:48,720 --> 00:19:50,240
http.log

557
00:19:50,240 --> 00:19:52,400
so you may have one line in con.log with

558
00:19:52,400 --> 00:19:53,919
this uid

559
00:19:53,919 --> 00:19:56,320
and then that uid will tie to many lines

560
00:19:56,320 --> 00:19:58,000
in http.log

561
00:19:58,000 --> 00:19:59,520
because those requests belong to the

562
00:19:59,520 --> 00:20:00,960
same session

563
00:20:00,960 --> 00:20:03,200
and so you can use that con

564
00:20:03,200 --> 00:20:07,600
dot log uid that zeke uid to to find out

565
00:20:07,600 --> 00:20:09,520
like what happened across all of my

566
00:20:09,520 --> 00:20:11,760
network traffic in the context of this

567
00:20:11,760 --> 00:20:13,120
session

568
00:20:13,120 --> 00:20:15,440
so there are a lot also besides con.log

569
00:20:15,440 --> 00:20:18,480
of protocol specific log files that zeke

570
00:20:18,480 --> 00:20:21,280
will generate so taking note of which

571
00:20:21,280 --> 00:20:23,600
log files are generated from a network

572
00:20:23,600 --> 00:20:24,480
trace

573
00:20:24,480 --> 00:20:27,440
can can give you insight into what's

574
00:20:27,440 --> 00:20:29,280
in your network

575
00:20:29,280 --> 00:20:31,440
even before you begin analyzing the

576
00:20:31,440 --> 00:20:34,559
file's contents for example if i see an

577
00:20:34,559 --> 00:20:36,240
ssh.log

578
00:20:36,240 --> 00:20:38,799
in a network maybe where i wasn't

579
00:20:38,799 --> 00:20:40,640
i didn't know i had ssh going on or

580
00:20:40,640 --> 00:20:42,240
something like that right

581
00:20:42,240 --> 00:20:43,919
that can that can be like hey i better

582
00:20:43,919 --> 00:20:46,159
go look at that because i don't i don't

583
00:20:46,159 --> 00:20:48,640
know what that is and so um even just

584
00:20:48,640 --> 00:20:50,320
starting it like what log files do i

585
00:20:50,320 --> 00:20:51,919
have what does zeke generate today on

586
00:20:51,919 --> 00:20:54,480
this pcapp can give you a good idea of

587
00:20:54,480 --> 00:20:57,039
just what traffic is in your network

588
00:20:57,039 --> 00:20:59,360
zeek has a really powerful file analysis

589
00:20:59,360 --> 00:21:02,000
engine that attempts to detect and

590
00:21:02,000 --> 00:21:05,840
identify when file transfers occur so um

591
00:21:05,840 --> 00:21:07,280
in other words any time a file is

592
00:21:07,280 --> 00:21:08,799
transferred across one of the protocols

593
00:21:08,799 --> 00:21:12,080
that zeek can understand

594
00:21:12,320 --> 00:21:14,240
zeek can recognize hey this is a file

595
00:21:14,240 --> 00:21:15,919
transfer this is a file being uploaded

596
00:21:15,919 --> 00:21:18,159
or downloaded across your network using

597
00:21:18,159 --> 00:21:23,039
you know http or ftp or smb or irc

598
00:21:23,039 --> 00:21:24,080
or

599
00:21:24,080 --> 00:21:25,919
smtp email

600
00:21:25,919 --> 00:21:27,440
there's various different protocols that

601
00:21:27,440 --> 00:21:29,520
are supported in zeke's

602
00:21:29,520 --> 00:21:31,360
file analysis engine

603
00:21:31,360 --> 00:21:34,000
similar to connections each file in

604
00:21:34,000 --> 00:21:36,880
files.log is assigned a random file

605
00:21:36,880 --> 00:21:39,600
unique identifier or fuid that can be

606
00:21:39,600 --> 00:21:42,240
referenced in other log files so

607
00:21:42,240 --> 00:21:44,240
very similar to our previous example a

608
00:21:44,240 --> 00:21:46,080
file is transferred by

609
00:21:46,080 --> 00:21:49,440
an http request and response

610
00:21:49,440 --> 00:21:50,880
and um

611
00:21:50,880 --> 00:21:53,200
that file will generate a line in

612
00:21:53,200 --> 00:21:57,280
files.log with a unique fu id

613
00:21:57,280 --> 00:21:58,799
and then

614
00:21:58,799 --> 00:22:01,760
that could be referenced in the http.log

615
00:22:01,760 --> 00:22:03,600
to see the details of that connection

616
00:22:03,600 --> 00:22:05,760
right so use that uid just in the same

617
00:22:05,760 --> 00:22:08,960
way that you use the uid and con.log to

618
00:22:08,960 --> 00:22:11,520
reference the session across the entire

619
00:22:11,520 --> 00:22:15,039
analysis data set use that files.log

620
00:22:15,039 --> 00:22:18,559
fuid to reference that file transfer

621
00:22:18,559 --> 00:22:20,720
across the various different protocols

622
00:22:20,720 --> 00:22:23,120
that it may have been involved in

623
00:22:23,120 --> 00:22:25,280
entries and files.log can also be linked

624
00:22:25,280 --> 00:22:26,799
to the sessions during which they were

625
00:22:26,799 --> 00:22:29,360
transferred in con.log by the connection

626
00:22:29,360 --> 00:22:30,400
uid

627
00:22:30,400 --> 00:22:32,799
so this these two file fields that

628
00:22:32,799 --> 00:22:34,400
con.uid

629
00:22:34,400 --> 00:22:36,640
and that files.fuid

630
00:22:36,640 --> 00:22:38,640
can be really really important for

631
00:22:38,640 --> 00:22:40,799
getting context about what's going on in

632
00:22:40,799 --> 00:22:42,960
a network session

633
00:22:42,960 --> 00:22:46,000
two specific types of files

634
00:22:46,000 --> 00:22:48,320
that zeke breaks out into their own log

635
00:22:48,320 --> 00:22:51,280
files is uh pe.log pe stands for

636
00:22:51,280 --> 00:22:53,679
portable executable and this contained

637
00:22:53,679 --> 00:22:55,520
entries about

638
00:22:55,520 --> 00:22:57,600
file transfers that were done for

639
00:22:57,600 --> 00:22:59,520
portable executable files in other words

640
00:22:59,520 --> 00:23:02,320
you know a windows.exe or a linux elf

641
00:23:02,320 --> 00:23:03,919
file

642
00:23:03,919 --> 00:23:05,679
that might be specifically of interest

643
00:23:05,679 --> 00:23:07,120
as a network

644
00:23:07,120 --> 00:23:09,600
security analyst because oftentimes you

645
00:23:09,600 --> 00:23:10,960
know

646
00:23:10,960 --> 00:23:12,960
you may be like hey you know you we're

647
00:23:12,960 --> 00:23:14,159
not supposed to be downloading

648
00:23:14,159 --> 00:23:15,840
executable files or whatever and running

649
00:23:15,840 --> 00:23:17,360
them on our on these systems on these

650
00:23:17,360 --> 00:23:18,880
endpoints

651
00:23:18,880 --> 00:23:21,200
there's also x509.log which contains

652
00:23:21,200 --> 00:23:23,120
information about

653
00:23:23,120 --> 00:23:27,200
x509 formatted public key signatures

654
00:23:27,200 --> 00:23:29,200
or public key certificates like you

655
00:23:29,200 --> 00:23:31,120
would see in an ssl

656
00:23:31,120 --> 00:23:32,480
or tls

657
00:23:32,480 --> 00:23:34,799
session

658
00:23:35,440 --> 00:23:37,840
one really important log file for zeek

659
00:23:37,840 --> 00:23:39,760
and and almost kind of where i would

660
00:23:39,760 --> 00:23:41,600
start if i was going to look at a zeke

661
00:23:41,600 --> 00:23:43,440
log uh

662
00:23:43,440 --> 00:23:44,880
a collection of z clouds would be

663
00:23:44,880 --> 00:23:46,640
nodus.log

664
00:23:46,640 --> 00:23:51,039
notice.log is zeek's concept of an alarm

665
00:23:51,039 --> 00:23:53,200
a big red flag a way to draw extra

666
00:23:53,200 --> 00:23:54,799
attention to an event

667
00:23:54,799 --> 00:23:58,320
so notices can be um generated from any

668
00:23:58,320 --> 00:24:00,320
other zeek script or protocol as its

669
00:24:00,320 --> 00:24:02,559
processing traffic

670
00:24:02,559 --> 00:24:06,000
zeke currently implements i think

671
00:24:06,000 --> 00:24:08,559
maybe 50 or so notices kind of in its

672
00:24:08,559 --> 00:24:10,960
default configuration and then malcolm

673
00:24:10,960 --> 00:24:12,640
adds several more

674
00:24:12,640 --> 00:24:14,640
ranging from um

675
00:24:14,640 --> 00:24:16,559
you know brute force ssh login attempts

676
00:24:16,559 --> 00:24:20,000
to sql injection attacks to expired ssl

677
00:24:20,000 --> 00:24:21,600
certificates and then some of the ones

678
00:24:21,600 --> 00:24:24,320
that malcolm adds for um

679
00:24:24,320 --> 00:24:26,799
recent cves that that you may be aware

680
00:24:26,799 --> 00:24:29,039
of or uh have heard of in the in the

681
00:24:29,039 --> 00:24:31,760
news in the last couple of years

682
00:24:31,760 --> 00:24:33,600
events that are

683
00:24:33,600 --> 00:24:35,760
categorized according to the mitre

684
00:24:35,760 --> 00:24:38,000
attack framework um

685
00:24:38,000 --> 00:24:39,520
so when you see the presence of a

686
00:24:39,520 --> 00:24:41,760
nodus.log you know go we'll go check

687
00:24:41,760 --> 00:24:43,440
that out and say

688
00:24:43,440 --> 00:24:44,960
what's going on here that the zeke

689
00:24:44,960 --> 00:24:46,960
thinks this needs to raise this red flag

690
00:24:46,960 --> 00:24:48,080
that i that i should look at this

691
00:24:48,080 --> 00:24:49,840
traffic and we'll give some examples of

692
00:24:49,840 --> 00:24:51,840
those as we get into the um

693
00:24:51,840 --> 00:24:53,120
the

694
00:24:53,120 --> 00:24:55,440
demo kinds of stuff here which

695
00:24:55,440 --> 00:24:57,600
uh my plan is to sprinkle throughout

696
00:24:57,600 --> 00:24:59,279
this video so as you're watching this

697
00:24:59,279 --> 00:25:00,559
video on youtube

698
00:25:00,559 --> 00:25:04,799
or uh if you know wherever you got it um

699
00:25:04,799 --> 00:25:05,919
that's that's kind of my plan is

700
00:25:05,919 --> 00:25:07,600
there'll be there'll be some demo stuff

701
00:25:07,600 --> 00:25:10,159
in here as well

702
00:25:10,159 --> 00:25:14,240
uh weird.log weird is um a good place to

703
00:25:14,240 --> 00:25:16,240
begin when looking for

704
00:25:16,240 --> 00:25:17,679
anomalous

705
00:25:17,679 --> 00:25:19,679
network traffic from the point of view

706
00:25:19,679 --> 00:25:20,480
of

707
00:25:20,480 --> 00:25:22,240
anomalous

708
00:25:22,240 --> 00:25:25,679
in that the protocol itself is not being

709
00:25:25,679 --> 00:25:28,080
is not behaving the way that you expect

710
00:25:28,080 --> 00:25:30,400
it to um you can kind of some people

711
00:25:30,400 --> 00:25:32,720
kind of look at weird as like a notice

712
00:25:32,720 --> 00:25:35,600
log light like stuff that's

713
00:25:35,600 --> 00:25:37,760
kind of strange or maybe not

714
00:25:37,760 --> 00:25:38,720
you know a little bit out of the

715
00:25:38,720 --> 00:25:41,279
ordinary um but

716
00:25:41,279 --> 00:25:43,520
it could be you know it might be nothing

717
00:25:43,520 --> 00:25:46,080
um and so you know it's something to

718
00:25:46,080 --> 00:25:48,480
look into but also you need to

719
00:25:48,480 --> 00:25:52,159
understand your network in order to um

720
00:25:52,159 --> 00:25:53,840
you know to maybe weed out some of the

721
00:25:53,840 --> 00:25:56,240
false positives or things that you you

722
00:25:56,240 --> 00:25:57,520
know actually do expect to see your

723
00:25:57,520 --> 00:26:00,320
network for example you know what

724
00:26:00,320 --> 00:26:01,679
because what's weird in one network

725
00:26:01,679 --> 00:26:04,799
might be perfectly normal in another um

726
00:26:04,799 --> 00:26:06,640
for example in in some networks that

727
00:26:06,640 --> 00:26:09,600
i've been in and seen where old serial

728
00:26:09,600 --> 00:26:12,080
protocols are being encapsulated over

729
00:26:12,080 --> 00:26:13,440
ethernet

730
00:26:13,440 --> 00:26:17,039
um that that may be very common in uh

731
00:26:17,039 --> 00:26:18,880
an aging industrial control systems

732
00:26:18,880 --> 00:26:20,000
network

733
00:26:20,000 --> 00:26:22,640
uh that's using you know

734
00:26:22,640 --> 00:26:26,000
serial modbus or something like that um

735
00:26:26,000 --> 00:26:27,520
and then

736
00:26:27,520 --> 00:26:29,760
you would see from zeke a weird.log

737
00:26:29,760 --> 00:26:32,080
that's like hey i've got non uh

738
00:26:32,080 --> 00:26:34,320
iptraffic over ethernet

739
00:26:34,320 --> 00:26:35,279
um

740
00:26:35,279 --> 00:26:37,039
and

741
00:26:37,039 --> 00:26:38,960
i look at that in an ot network and i'm

742
00:26:38,960 --> 00:26:40,240
like yeah you know this is pretty much

743
00:26:40,240 --> 00:26:41,760
what i expect that's not really that

744
00:26:41,760 --> 00:26:44,320
weird but in maybe in your it network or

745
00:26:44,320 --> 00:26:46,480
in your corporate side of your network

746
00:26:46,480 --> 00:26:47,279
um

747
00:26:47,279 --> 00:26:50,320
that would be unusual right so uh

748
00:26:50,320 --> 00:26:51,919
i don't one man's trash is another man

749
00:26:51,919 --> 00:26:53,760
treasure or whatever

750
00:26:53,760 --> 00:26:54,880
but you just kind of need to get

751
00:26:54,880 --> 00:26:56,159
familiar with your network enough to

752
00:26:56,159 --> 00:26:59,279
know really what is weird and what's not

753
00:26:59,279 --> 00:27:00,880
signatures.log

754
00:27:00,880 --> 00:27:02,400
is used to flag kits from zeek's

755
00:27:02,400 --> 00:27:04,080
signature based engine

756
00:27:04,080 --> 00:27:06,640
and is also used by malcolm to log hits

757
00:27:06,640 --> 00:27:08,960
from file scanning engines on

758
00:27:08,960 --> 00:27:11,279
transferred files extracted by zeke and

759
00:27:11,279 --> 00:27:13,760
we'll talk more about that later

760
00:27:13,760 --> 00:27:16,000
um and then this one uh we won't spend a

761
00:27:16,000 --> 00:27:18,320
ton of time on this but um

762
00:27:18,320 --> 00:27:20,559
at a configurable interval uh defaulting

763
00:27:20,559 --> 00:27:21,600
to one day

764
00:27:21,600 --> 00:27:25,039
zeke will dump summary lists of various

765
00:27:25,039 --> 00:27:28,000
entities endpoints services whatever

766
00:27:28,000 --> 00:27:29,600
that it's seen over the course of that

767
00:27:29,600 --> 00:27:31,520
period so that might include ssl

768
00:27:31,520 --> 00:27:35,039
certificates mac addresses um

769
00:27:35,039 --> 00:27:37,360
hosts that have performed tcp handshakes

770
00:27:37,360 --> 00:27:39,120
modbus

771
00:27:39,120 --> 00:27:42,640
servers and clients and tcps uh i said

772
00:27:42,640 --> 00:27:44,799
tcp services but um

773
00:27:44,799 --> 00:27:45,919
yeah like

774
00:27:45,919 --> 00:27:48,320
you know what services what servers are

775
00:27:48,320 --> 00:27:50,120
on your network

776
00:27:50,120 --> 00:27:53,279
knownhost.log along with con.log

777
00:27:53,279 --> 00:27:55,279
can be an essential part of zeek for

778
00:27:55,279 --> 00:27:57,919
building a network diagram or from from

779
00:27:57,919 --> 00:28:01,840
validating an asset inventory list

780
00:28:01,840 --> 00:28:03,840
zeke may also generate a software log

781
00:28:03,840 --> 00:28:06,080
software.log where it can identify

782
00:28:06,080 --> 00:28:08,080
software communicating

783
00:28:08,080 --> 00:28:10,559
across the network client server you

784
00:28:10,559 --> 00:28:11,520
know and

785
00:28:11,520 --> 00:28:13,760
possible if possible include the actual

786
00:28:13,760 --> 00:28:16,080
version of that software so examples

787
00:28:16,080 --> 00:28:18,399
might include identifying windows

788
00:28:18,399 --> 00:28:20,480
operating system versions and clients

789
00:28:20,480 --> 00:28:21,760
and servers

790
00:28:21,760 --> 00:28:26,559
communicating over http ftp ssh smtp

791
00:28:26,559 --> 00:28:28,480
mysql

792
00:28:28,480 --> 00:28:29,760
and this can be useful during an

793
00:28:29,760 --> 00:28:32,159
assessment to identify

794
00:28:32,159 --> 00:28:33,919
network hosts or devices that are

795
00:28:33,919 --> 00:28:36,159
running software or firmware with known

796
00:28:36,159 --> 00:28:38,480
vulnerabilities and uh

797
00:28:38,480 --> 00:28:40,320
or or software that's out of date right

798
00:28:40,320 --> 00:28:42,640
that hasn't been patched uh and when

799
00:28:42,640 --> 00:28:44,960
identifying servers by operating system

800
00:28:44,960 --> 00:28:47,279
type of application running and and you

801
00:28:47,279 --> 00:28:48,640
know like i said the version of that

802
00:28:48,640 --> 00:28:50,720
software

803
00:28:50,720 --> 00:28:51,760
um

804
00:28:51,760 --> 00:28:53,360
so we've talked a little bit about zeek

805
00:28:53,360 --> 00:28:56,080
now let's talk about archime

806
00:28:56,080 --> 00:28:59,520
archime is the other pcap analyzer used

807
00:28:59,520 --> 00:29:01,919
to populate malcolm's network session

808
00:29:01,919 --> 00:29:04,080
metadata database

809
00:29:04,080 --> 00:29:06,080
um so archime

810
00:29:06,080 --> 00:29:08,880
has a lot of similarities to zeek in um

811
00:29:08,880 --> 00:29:11,120
in that it parses network traffic data

812
00:29:11,120 --> 00:29:13,520
and and generates these these sessions

813
00:29:13,520 --> 00:29:15,360
these these logs

814
00:29:15,360 --> 00:29:17,919
that represent network connections

815
00:29:17,919 --> 00:29:20,399
these archime session logs are written

816
00:29:20,399 --> 00:29:22,799
into an elasticsearch database where

817
00:29:22,799 --> 00:29:24,480
they are indexed and they become

818
00:29:24,480 --> 00:29:25,840
searchable

819
00:29:25,840 --> 00:29:28,240
what's unique and powerful about archime

820
00:29:28,240 --> 00:29:29,440
is that

821
00:29:29,440 --> 00:29:32,000
these network sessions then can be tied

822
00:29:32,000 --> 00:29:34,399
back into

823
00:29:34,399 --> 00:29:36,559
that original payload that exists in

824
00:29:36,559 --> 00:29:39,200
that pcap file so that allows for deeper

825
00:29:39,200 --> 00:29:41,279
packet inspection and searching that's

826
00:29:41,279 --> 00:29:43,520
not just limited to

827
00:29:43,520 --> 00:29:45,840
packet headers

828
00:29:45,840 --> 00:29:46,559
so

829
00:29:46,559 --> 00:29:48,320
that's kind of the list of components

830
00:29:48,320 --> 00:29:50,159
that put together that are put together

831
00:29:50,159 --> 00:29:51,440
to make malcolm

832
00:29:51,440 --> 00:29:53,360
at least the main ones

833
00:29:53,360 --> 00:29:54,960
the components comprising malcolm are

834
00:29:54,960 --> 00:29:57,200
our industry standard open source tools

835
00:29:57,200 --> 00:29:59,760
and uh that makes it easy to integrate

836
00:29:59,760 --> 00:30:02,159
malcolm with other solutions in those

837
00:30:02,159 --> 00:30:04,880
tools respective ecosystems whether that

838
00:30:04,880 --> 00:30:07,520
be importing more z plugins or or

839
00:30:07,520 --> 00:30:09,360
dashboards into kibana or whatever it

840
00:30:09,360 --> 00:30:11,279
happens to be

841
00:30:11,279 --> 00:30:13,520
i've got a list here of the network

842
00:30:13,520 --> 00:30:14,640
traffic

843
00:30:14,640 --> 00:30:16,559
network application protocols that

844
00:30:16,559 --> 00:30:19,760
malcolm can can parse interpret

845
00:30:19,760 --> 00:30:21,360
and and there's dozens of them there as

846
00:30:21,360 --> 00:30:23,120
you can see including several protocols

847
00:30:23,120 --> 00:30:26,080
commonly seen in ot networks

848
00:30:26,080 --> 00:30:28,240
much of malcolm's development right now

849
00:30:28,240 --> 00:30:30,960
is dedicated towards improving malcolm's

850
00:30:30,960 --> 00:30:33,279
coverage of protocols used by ics

851
00:30:33,279 --> 00:30:35,520
devices

852
00:30:35,520 --> 00:30:38,159
um so let's kind of talk about the the

853
00:30:38,159 --> 00:30:40,799
journey that your pcap file will take as

854
00:30:40,799 --> 00:30:44,320
it uh is on its way to being enriched

855
00:30:44,320 --> 00:30:46,960
and indexed and user searchable

856
00:30:46,960 --> 00:30:50,559
um upon upload malcolm generates the

857
00:30:50,559 --> 00:30:53,279
metadata for

858
00:30:53,279 --> 00:30:54,799
the network

859
00:30:54,799 --> 00:30:56,399
traffic that was represented by that

860
00:30:56,399 --> 00:30:59,760
pcap file using both zeek and archimese

861
00:30:59,760 --> 00:31:01,840
molec capture

862
00:31:01,840 --> 00:31:03,600
and so that pcap gets sent two

863
00:31:03,600 --> 00:31:04,640
directions

864
00:31:04,640 --> 00:31:06,880
um

865
00:31:06,880 --> 00:31:09,200
mullick capture aggregates its metadata

866
00:31:09,200 --> 00:31:11,200
for particular network connections and

867
00:31:11,200 --> 00:31:13,760
it aggregates that into a session record

868
00:31:13,760 --> 00:31:15,679
which is then written into elasticsearch

869
00:31:15,679 --> 00:31:18,080
for us to index

870
00:31:18,080 --> 00:31:19,840
zeek as well as we've talked about

871
00:31:19,840 --> 00:31:22,000
generates these log files that are

872
00:31:22,000 --> 00:31:23,679
broken out primarily by application

873
00:31:23,679 --> 00:31:26,640
protocol and they similarly contain

874
00:31:26,640 --> 00:31:29,760
uh metadata that that is you know quite

875
00:31:29,760 --> 00:31:31,519
that is not unlike that done by mullet

876
00:31:31,519 --> 00:31:33,519
capture

877
00:31:33,519 --> 00:31:36,399
malcolm also uses zeke's ability to

878
00:31:36,399 --> 00:31:38,399
carve out files transferred over these

879
00:31:38,399 --> 00:31:41,120
protocols and these files can be scanned

880
00:31:41,120 --> 00:31:44,080
for example by an anti-virus tool or or

881
00:31:44,080 --> 00:31:47,039
preserved for analysis with

882
00:31:47,039 --> 00:31:48,320
you know with other tools with whatever

883
00:31:48,320 --> 00:31:50,559
your your tool of choice is

884
00:31:50,559 --> 00:31:53,360
so those z clogs are forwarded by

885
00:31:53,360 --> 00:31:55,760
filebeat to logs dash for further

886
00:31:55,760 --> 00:31:58,240
enrichment and it's normalized to the

887
00:31:58,240 --> 00:32:00,399
same underlying database schema the

888
00:32:00,399 --> 00:32:02,320
underlying the same underlying field

889
00:32:02,320 --> 00:32:05,519
schema that archime uses so that those z

890
00:32:05,519 --> 00:32:08,159
as much as possible those z logs and

891
00:32:08,159 --> 00:32:10,000
those arcaney sessions can be viewed

892
00:32:10,000 --> 00:32:12,720
side by side as apples and apples

893
00:32:12,720 --> 00:32:14,559
and then that's index into elasticsearch

894
00:32:14,559 --> 00:32:15,679
as well

895
00:32:15,679 --> 00:32:18,880
and then once ingested by elasticsearch

896
00:32:18,880 --> 00:32:21,440
malcolm provides two interfaces for

897
00:32:21,440 --> 00:32:23,519
visualizing that network traffic

898
00:32:23,519 --> 00:32:24,720
cabana

899
00:32:24,720 --> 00:32:26,799
primarily for the z-clogs and then

900
00:32:26,799 --> 00:32:28,640
archimede viewer which can be used to

901
00:32:28,640 --> 00:32:30,640
visualize the z clogs as well as the

902
00:32:30,640 --> 00:32:32,480
arcane session data

903
00:32:32,480 --> 00:32:35,120
so now that we have had a kind of an

904
00:32:35,120 --> 00:32:37,440
overview of the main components of

905
00:32:37,440 --> 00:32:39,679
malcolm and how they fit together and

906
00:32:39,679 --> 00:32:42,000
kind of the theory behind what they do

907
00:32:42,000 --> 00:32:44,960
let's get into the process of actually

908
00:32:44,960 --> 00:32:46,240
um

909
00:32:46,240 --> 00:32:48,799
doing network traffic analysis and and

910
00:32:48,799 --> 00:32:49,679
that

911
00:32:49,679 --> 00:32:51,600
surprisingly that doesn't start with

912
00:32:51,600 --> 00:32:53,039
just uploading your pcap file you would

913
00:32:53,039 --> 00:32:55,039
think that would be the first step but

914
00:32:55,039 --> 00:32:56,480
there's actually one very useful step

915
00:32:56,480 --> 00:32:58,080
that we want to do first as much as

916
00:32:58,080 --> 00:32:59,279
possible

917
00:32:59,279 --> 00:33:02,480
and that is to identify network hosts

918
00:33:02,480 --> 00:33:04,240
and subnets

919
00:33:04,240 --> 00:33:05,760
so

920
00:33:05,760 --> 00:33:07,120
for that there's an interface that

921
00:33:07,120 --> 00:33:08,640
malcolm provides

922
00:33:08,640 --> 00:33:10,720
called the host and network segment name

923
00:33:10,720 --> 00:33:12,080
mapping interface

924
00:33:12,080 --> 00:33:14,240
and that allows you to assign names for

925
00:33:14,240 --> 00:33:15,679
network segments

926
00:33:15,679 --> 00:33:18,880
or or subnets and a host and that might

927
00:33:18,880 --> 00:33:21,519
be any kind of endpoint whether that's a

928
00:33:21,519 --> 00:33:24,559
a server or a desktop or a laptop or

929
00:33:24,559 --> 00:33:28,240
a plc or an hmi or

930
00:33:28,240 --> 00:33:30,080
you know whatever whatever has ip

931
00:33:30,080 --> 00:33:31,600
addresses or mac addresses on your

932
00:33:31,600 --> 00:33:32,880
network

933
00:33:32,880 --> 00:33:35,519
as z clogs are processed into malcolm's

934
00:33:35,519 --> 00:33:38,080
elasticsearch instance the log's source

935
00:33:38,080 --> 00:33:40,480
and destination ip and mac address

936
00:33:40,480 --> 00:33:42,279
fields which is

937
00:33:42,279 --> 00:33:45,120
zeek.orig underscore h and that's that

938
00:33:45,120 --> 00:33:47,120
naming convention we kind of hinted at

939
00:33:47,120 --> 00:33:49,440
it earlier but that originating host

940
00:33:49,440 --> 00:33:51,440
that's a ridge underscore h

941
00:33:51,440 --> 00:33:53,600
zeek dot resp underscore h that's

942
00:33:53,600 --> 00:33:55,279
responding host

943
00:33:55,279 --> 00:33:57,519
and then the mac address fields a ridge

944
00:33:57,519 --> 00:34:00,799
underscore l2 underscore adder and resp

945
00:34:00,799 --> 00:34:03,200
underscore l2 underscore adder

946
00:34:03,200 --> 00:34:06,720
so basically you know source ip desktop

947
00:34:06,720 --> 00:34:08,560
source mac and desk mac

948
00:34:08,560 --> 00:34:10,639
they're compared against the lists of

949
00:34:10,639 --> 00:34:13,040
the host addresses provided in this

950
00:34:13,040 --> 00:34:16,159
interface and uh when a match is found a

951
00:34:16,159 --> 00:34:19,679
new field is added to the log it's zeek

952
00:34:19,679 --> 00:34:22,079
dot a ridge underscore host name or zeke

953
00:34:22,079 --> 00:34:25,679
dot resp responding underscore host name

954
00:34:25,679 --> 00:34:27,520
uh so that a ridge underscore host name

955
00:34:27,520 --> 00:34:29,760
and the rest under score host name is

956
00:34:29,760 --> 00:34:32,879
added to allow your custom defined host

957
00:34:32,879 --> 00:34:34,560
name that you've you know mapped out to

958
00:34:34,560 --> 00:34:36,800
these ip addresses or mac addresses to

959
00:34:36,800 --> 00:34:37,599
be

960
00:34:37,599 --> 00:34:39,040
to be actually written along with those

961
00:34:39,040 --> 00:34:41,040
logs

962
00:34:41,040 --> 00:34:43,359
for traffic matching the list of segment

963
00:34:43,359 --> 00:34:46,000
addresses provided zeek dot a ridge

964
00:34:46,000 --> 00:34:49,199
underscore segment and z.resp underscore

965
00:34:49,199 --> 00:34:51,199
segment fields are added

966
00:34:51,199 --> 00:34:53,760
if both seek.origin underscore segment

967
00:34:53,760 --> 00:34:56,239
and zeek.resp underscore segment are

968
00:34:56,239 --> 00:34:58,560
added to a log and if they contain

969
00:34:58,560 --> 00:35:01,440
different values different subnets then

970
00:35:01,440 --> 00:35:04,720
a tag a value to the tags field will be

971
00:35:04,720 --> 00:35:07,359
added with the cross segment value

972
00:35:07,359 --> 00:35:09,280
and that allows you to conveniently

973
00:35:09,280 --> 00:35:11,440
identify cross segment traffic

974
00:35:11,440 --> 00:35:12,960
so this you know maybe right now you're

975
00:35:12,960 --> 00:35:14,800
like my eyes are glazing over what is

976
00:35:14,800 --> 00:35:17,119
this resp underscore a ridge underscore

977
00:35:17,119 --> 00:35:19,200
l2

978
00:35:19,200 --> 00:35:21,280
um it's it's really it's not that

979
00:35:21,280 --> 00:35:23,359
complicated it's just a way for you to

980
00:35:23,359 --> 00:35:24,400
say hey

981
00:35:24,400 --> 00:35:26,240
here's some ip addresses i want to give

982
00:35:26,240 --> 00:35:28,320
them names that i recognize here's some

983
00:35:28,320 --> 00:35:30,720
network subnets i want to give them

984
00:35:30,720 --> 00:35:33,839
names that i recognize right this is my

985
00:35:33,839 --> 00:35:36,240
this is my corporate zone this is my ot

986
00:35:36,240 --> 00:35:38,400
zone this is my dmz

987
00:35:38,400 --> 00:35:41,119
whatever um and then

988
00:35:41,119 --> 00:35:43,200
if you can identify what those are ahead

989
00:35:43,200 --> 00:35:46,400
of time upon ingestion of that traffic

990
00:35:46,400 --> 00:35:48,480
will just malcolm will tag that traffic

991
00:35:48,480 --> 00:35:51,359
as such and then note when things like

992
00:35:51,359 --> 00:35:52,880
cross traffic

993
00:35:52,880 --> 00:35:54,880
cross-segment traffic is happening right

994
00:35:54,880 --> 00:35:57,280
if you have device in your

995
00:35:57,280 --> 00:35:59,839
control systems network that is that is

996
00:35:59,839 --> 00:36:01,599
talking to reaching out to the internet

997
00:36:01,599 --> 00:36:03,920
or talking to a device in your corporate

998
00:36:03,920 --> 00:36:06,079
network uh you know it would

999
00:36:06,079 --> 00:36:08,160
ideally flag that as cross-segment

1000
00:36:08,160 --> 00:36:09,760
traffic and you would be able to to

1001
00:36:09,760 --> 00:36:12,000
recognize that without having to go hunt

1002
00:36:12,000 --> 00:36:14,000
it down yourself

1003
00:36:14,000 --> 00:36:15,760
there's all field in this in this

1004
00:36:15,760 --> 00:36:17,760
interface called the

1005
00:36:17,760 --> 00:36:20,400
required tag field and basically what

1006
00:36:20,400 --> 00:36:22,880
that is is it's a way for you to say

1007
00:36:22,880 --> 00:36:23,920
only

1008
00:36:23,920 --> 00:36:27,200
apply this tag or only apply this name

1009
00:36:27,200 --> 00:36:29,839
this segment or hostname if this tag

1010
00:36:29,839 --> 00:36:30,880
exists

1011
00:36:30,880 --> 00:36:32,880
as we get into uploading pcap files in a

1012
00:36:32,880 --> 00:36:34,640
minute we'll talk about how you can

1013
00:36:34,640 --> 00:36:36,960
apply tags that go along with your

1014
00:36:36,960 --> 00:36:40,000
uploaded pcap data so in other words um

1015
00:36:40,000 --> 00:36:43,119
if if for example i'm uh uploading a

1016
00:36:43,119 --> 00:36:45,760
pcap that's represented by a particular

1017
00:36:45,760 --> 00:36:48,400
representative of a particular um

1018
00:36:48,400 --> 00:36:49,520
facility

1019
00:36:49,520 --> 00:36:51,040
and that facility's name is you know

1020
00:36:51,040 --> 00:36:53,200
facility abc

1021
00:36:53,200 --> 00:36:55,440
i could tag that upload with facility

1022
00:36:55,440 --> 00:36:56,640
abc

1023
00:36:56,640 --> 00:36:58,800
and then in this

1024
00:36:58,800 --> 00:37:01,359
network segment name mapping interface

1025
00:37:01,359 --> 00:37:03,920
basically say only apply this name to

1026
00:37:03,920 --> 00:37:07,280
this ip address if the tag facility abc

1027
00:37:07,280 --> 00:37:09,440
is present

1028
00:37:09,440 --> 00:37:12,640
these mappings can also be defined as in

1029
00:37:12,640 --> 00:37:15,440
a delimited format in cider dash map dot

1030
00:37:15,440 --> 00:37:18,240
text and host dash map dot text in the

1031
00:37:18,240 --> 00:37:20,079
malcolm installation directory i would

1032
00:37:20,079 --> 00:37:21,760
refer you to the malcolm documentation

1033
00:37:21,760 --> 00:37:24,079
on github to see the format for that i

1034
00:37:24,079 --> 00:37:25,520
hope to be able to come up with a

1035
00:37:25,520 --> 00:37:27,760
feature in the future where like you

1036
00:37:27,760 --> 00:37:29,440
could take an excel spreadsheet or

1037
00:37:29,440 --> 00:37:32,000
something similar and upload it straight

1038
00:37:32,000 --> 00:37:33,440
into this interface and have it

1039
00:37:33,440 --> 00:37:35,520
magically figure stuff out for you

1040
00:37:35,520 --> 00:37:37,440
it's not quite there at this point but

1041
00:37:37,440 --> 00:37:39,200
um that's that's something that maybe we

1042
00:37:39,200 --> 00:37:41,839
can look at doing in the future

1043
00:37:41,839 --> 00:37:43,839
so we're going to go ahead and do our

1044
00:37:43,839 --> 00:37:47,119
host and network segment mapping now and

1045
00:37:47,119 --> 00:37:49,280
i'm going to do that by navigating on

1046
00:37:49,280 --> 00:37:50,880
the malcolm

1047
00:37:50,880 --> 00:37:52,720
web interface to

1048
00:37:52,720 --> 00:37:54,560
my malcolm instances running on

1049
00:37:54,560 --> 00:37:57,920
localhost and the name map ui

1050
00:37:57,920 --> 00:38:00,400
is the interface that i'm interested in

1051
00:38:00,400 --> 00:38:02,480
and since i was previously authenticated

1052
00:38:02,480 --> 00:38:04,960
before i started recording this i

1053
00:38:04,960 --> 00:38:06,480
i didn't have to put in my username and

1054
00:38:06,480 --> 00:38:07,520
password

1055
00:38:07,520 --> 00:38:09,200
now if i was going to start doing this

1056
00:38:09,200 --> 00:38:11,040
from scratch um

1057
00:38:11,040 --> 00:38:12,640
you know depending on how big my network

1058
00:38:12,640 --> 00:38:13,920
is

1059
00:38:13,920 --> 00:38:15,440
i'd either just start typing i p

1060
00:38:15,440 --> 00:38:18,560
addresses in you know one at a time

1061
00:38:18,560 --> 00:38:21,440
something like this

1062
00:38:23,119 --> 00:38:24,800
then click save

1063
00:38:24,800 --> 00:38:27,119
or maybe another segment

1064
00:38:27,119 --> 00:38:29,280
home network

1065
00:38:29,280 --> 00:38:33,160
and we're going to call oops 1 two

1066
00:38:33,160 --> 00:38:36,320
16.0.0.12 or something like that

1067
00:38:36,320 --> 00:38:39,520
and you know this is home network etc uh

1068
00:38:39,520 --> 00:38:41,839
in this case for our example i've

1069
00:38:41,839 --> 00:38:44,400
already created a network mapping for

1070
00:38:44,400 --> 00:38:47,119
the pcap that i'll be using for our

1071
00:38:47,119 --> 00:38:48,640
for this demonstration

1072
00:38:48,640 --> 00:38:51,119
so if you've done that before you can

1073
00:38:51,119 --> 00:38:52,640
actually save that and back that up and

1074
00:38:52,640 --> 00:38:54,240
then restore it later which is what i'll

1075
00:38:54,240 --> 00:38:55,520
be doing now

1076
00:38:55,520 --> 00:38:57,839
so i'm going to click import

1077
00:38:57,839 --> 00:38:59,040
and i'm going to replace the name

1078
00:38:59,040 --> 00:39:02,000
mappings with this netmap.json file that

1079
00:39:02,000 --> 00:39:04,480
i previously created that already

1080
00:39:04,480 --> 00:39:06,640
corresponds to this pcapp

1081
00:39:06,640 --> 00:39:08,640
i'm going to do that and you'll see that

1082
00:39:08,640 --> 00:39:09,440
it

1083
00:39:09,440 --> 00:39:11,440
populates my list here with segments and

1084
00:39:11,440 --> 00:39:12,400
hosts

1085
00:39:12,400 --> 00:39:13,599
that

1086
00:39:13,599 --> 00:39:16,480
that make up my network map um

1087
00:39:16,480 --> 00:39:18,880
as you're doing these you can also uh

1088
00:39:18,880 --> 00:39:21,280
you can search the list for example if

1089
00:39:21,280 --> 00:39:23,280
you want to come back later and

1090
00:39:23,280 --> 00:39:24,960
look up you know what you what you

1091
00:39:24,960 --> 00:39:28,000
created as your um you want your list of

1092
00:39:28,000 --> 00:39:29,520
you know historians or something like

1093
00:39:29,520 --> 00:39:32,160
that i can start typing historian here

1094
00:39:32,160 --> 00:39:34,320
and it'll filter that list

1095
00:39:34,320 --> 00:39:35,119
or

1096
00:39:35,119 --> 00:39:38,240
just any text that's available here

1097
00:39:38,240 --> 00:39:39,920
you know we can start typing that and

1098
00:39:39,920 --> 00:39:42,720
then it will filter that list but once

1099
00:39:42,720 --> 00:39:44,960
we've defined our host and network

1100
00:39:44,960 --> 00:39:47,200
name mappings we're going to go down to

1101
00:39:47,200 --> 00:39:48,720
the bottom of this list

1102
00:39:48,720 --> 00:39:51,040
we're going to click save

1103
00:39:51,040 --> 00:39:54,079
and click yes to save our name mappings

1104
00:39:54,079 --> 00:39:55,599
and then what we're going to do is

1105
00:39:55,599 --> 00:39:56,400
before

1106
00:39:56,400 --> 00:39:58,640
that will take effect into our name

1107
00:39:58,640 --> 00:40:00,960
ingestion into our pcap ingestion excuse

1108
00:40:00,960 --> 00:40:01,760
me

1109
00:40:01,760 --> 00:40:04,480
we will need to click restart logstash

1110
00:40:04,480 --> 00:40:06,640
and it will tell us

1111
00:40:06,640 --> 00:40:07,839
make sure that we actually want to do

1112
00:40:07,839 --> 00:40:09,119
that want to apply the save name

1113
00:40:09,119 --> 00:40:11,280
mappings and restart logstash

1114
00:40:11,280 --> 00:40:13,760
and if we do that

1115
00:40:13,760 --> 00:40:15,520
it says log stash ingestion is

1116
00:40:15,520 --> 00:40:17,280
restarting in the background log

1117
00:40:17,280 --> 00:40:18,800
ingestion will be resumed in a few

1118
00:40:18,800 --> 00:40:19,760
minutes

1119
00:40:19,760 --> 00:40:21,359
and i can click ok

1120
00:40:21,359 --> 00:40:22,160
and

1121
00:40:22,160 --> 00:40:23,920
and at this point after i wait a couple

1122
00:40:23,920 --> 00:40:25,680
of minutes and wait for logstash to come

1123
00:40:25,680 --> 00:40:28,400
back up we will be able to

1124
00:40:28,400 --> 00:40:30,400
to continue with our upload and make

1125
00:40:30,400 --> 00:40:33,200
sure that those ip addresses are mapped

1126
00:40:33,200 --> 00:40:37,640
to the names that we specified here

1127
00:40:38,000 --> 00:40:40,560
we've defined our network uh

1128
00:40:40,560 --> 00:40:43,680
subnets and host names um we're ready to

1129
00:40:43,680 --> 00:40:46,319
upload that pcapp data um it

1130
00:40:46,319 --> 00:40:49,040
elasticsearch is a write once read many

1131
00:40:49,040 --> 00:40:52,720
kind of mentality of a storage um

1132
00:40:52,720 --> 00:40:56,400
platform and so we we can't upload pcapp

1133
00:40:56,400 --> 00:40:59,200
data and then go back after the fact and

1134
00:40:59,200 --> 00:41:01,599
apply those network and host names

1135
00:41:01,599 --> 00:41:03,040
we need to

1136
00:41:03,040 --> 00:41:04,960
um we need to have that ahead of time so

1137
00:41:04,960 --> 00:41:06,720
that we can enrich that data as we're

1138
00:41:06,720 --> 00:41:08,400
doing it and so if you come up later and

1139
00:41:08,400 --> 00:41:10,400
you say oh i didn't do my network hosts

1140
00:41:10,400 --> 00:41:11,599
or whatever

1141
00:41:11,599 --> 00:41:13,680
it's not like a huge deal

1142
00:41:13,680 --> 00:41:15,040
malcolm generally is pretty quick to

1143
00:41:15,040 --> 00:41:17,200
analyze network traffic and so you know

1144
00:41:17,200 --> 00:41:20,000
what i would do is is wipe that data out

1145
00:41:20,000 --> 00:41:21,680
clear the database for malcolm and then

1146
00:41:21,680 --> 00:41:23,680
you know apply my network

1147
00:41:23,680 --> 00:41:25,760
subnets and host names and just reingest

1148
00:41:25,760 --> 00:41:27,760
the data is kind of the workflow that we

1149
00:41:27,760 --> 00:41:30,160
generally see

1150
00:41:30,160 --> 00:41:32,160
so so once we've done that malcolm can

1151
00:41:32,160 --> 00:41:35,359
be must be provided with network capture

1152
00:41:35,359 --> 00:41:36,960
network traffic to analyze right in

1153
00:41:36,960 --> 00:41:40,000
other words a pcap file um

1154
00:41:40,000 --> 00:41:41,760
so we've talked a little bit how that

1155
00:41:41,760 --> 00:41:43,280
could be done with dedicated network

1156
00:41:43,280 --> 00:41:46,640
sensors like hedgehog linux

1157
00:41:46,640 --> 00:41:48,240
oftentimes though in an assessment

1158
00:41:48,240 --> 00:41:49,040
you'll

1159
00:41:49,040 --> 00:41:51,440
be given pcap files that have been

1160
00:41:51,440 --> 00:41:54,079
previously captured and and you know

1161
00:41:54,079 --> 00:41:56,400
provided to you as network security

1162
00:41:56,400 --> 00:41:58,400
analyst or that you have captured at

1163
00:41:58,400 --> 00:42:00,160
some other point in your network or some

1164
00:42:00,160 --> 00:42:01,200
other point in the past and you're

1165
00:42:01,200 --> 00:42:03,359
bringing in to analyze now

1166
00:42:03,359 --> 00:42:05,680
so pcap files can be uploaded to malcolm

1167
00:42:05,680 --> 00:42:07,680
by processing

1168
00:42:07,680 --> 00:42:10,800
for processing by accessing the the

1169
00:42:10,800 --> 00:42:12,880
upload interface so whatever your

1170
00:42:12,880 --> 00:42:15,520
malcolm ip address slash upload on the

1171
00:42:15,520 --> 00:42:17,680
host at which malcolm is running

1172
00:42:17,680 --> 00:42:19,599
prior to starting the upload as i

1173
00:42:19,599 --> 00:42:21,040
mentioned you can add tags which will

1174
00:42:21,040 --> 00:42:23,440
allow the data from the pcap files

1175
00:42:23,440 --> 00:42:25,760
being uploaded to be searchable using

1176
00:42:25,760 --> 00:42:28,319
those tags later on

1177
00:42:28,319 --> 00:42:30,480
there's also some other behavior here on

1178
00:42:30,480 --> 00:42:32,880
on how the pcap file is parsed uh with

1179
00:42:32,880 --> 00:42:34,400
regards to whether you're analyzing it

1180
00:42:34,400 --> 00:42:36,240
with zeek or whether files are being

1181
00:42:36,240 --> 00:42:38,880
extracted or not generally i like to set

1182
00:42:38,880 --> 00:42:41,280
these in the um the configuration

1183
00:42:41,280 --> 00:42:43,359
options so they're just done globally

1184
00:42:43,359 --> 00:42:45,599
and i don't have to mess with them here

1185
00:42:45,599 --> 00:42:47,359
but if you want to override the global

1186
00:42:47,359 --> 00:42:48,560
behavior that you've set during

1187
00:42:48,560 --> 00:42:51,520
configuration with as far as the zeek

1188
00:42:51,520 --> 00:42:53,599
and zeek file extraction goes you can do

1189
00:42:53,599 --> 00:42:57,560
that here in the upload interface

1190
00:42:59,040 --> 00:43:01,680
we're going to upload our pcap file now

1191
00:43:01,680 --> 00:43:04,560
by navigating to the

1192
00:43:04,560 --> 00:43:05,839
localhost

1193
00:43:05,839 --> 00:43:07,200
upload

1194
00:43:07,200 --> 00:43:08,560
and that's going to present us with the

1195
00:43:08,560 --> 00:43:11,440
malcolm capture file and log upload

1196
00:43:11,440 --> 00:43:13,280
log archive upload

1197
00:43:13,280 --> 00:43:16,800
interface that we that we just discussed

1198
00:43:16,800 --> 00:43:19,760
i have got my pcap file here

1199
00:43:19,760 --> 00:43:22,160
and so as it uploads this pcap file i

1200
00:43:22,160 --> 00:43:23,599
talked about the tags it's going to

1201
00:43:23,599 --> 00:43:24,480
apply

1202
00:43:24,480 --> 00:43:27,200
so um you know if i wanted to tag this

1203
00:43:27,200 --> 00:43:28,160
with

1204
00:43:28,160 --> 00:43:29,760
for example i'm doing this for uh for

1205
00:43:29,760 --> 00:43:30,560
this

1206
00:43:30,560 --> 00:43:33,839
uh training video so i could

1207
00:43:33,839 --> 00:43:35,440
create a tag called training and it

1208
00:43:35,440 --> 00:43:36,800
would add that or if this was a

1209
00:43:36,800 --> 00:43:41,560
particular site you know um site abc

1210
00:43:41,560 --> 00:43:43,359
customer123

1211
00:43:43,359 --> 00:43:46,960
uh you know incident

1212
00:43:47,520 --> 00:43:48,800
omega

1213
00:43:48,800 --> 00:43:51,760
whatever oops you got the idea anyway i

1214
00:43:51,760 --> 00:43:53,359
could apply whatever tags i want here

1215
00:43:53,359 --> 00:43:55,040
and those tags would be

1216
00:43:55,040 --> 00:43:58,240
searchable after i do the upload

1217
00:43:58,240 --> 00:44:01,119
additionally malcolm will take

1218
00:44:01,119 --> 00:44:03,119
and create tags from the name in the

1219
00:44:03,119 --> 00:44:05,520
pcat file itself so in this case where

1220
00:44:05,520 --> 00:44:08,960
the pcapp's file name is cyberville.pcat

1221
00:44:08,960 --> 00:44:11,040
the tag cyberville will automatically be

1222
00:44:11,040 --> 00:44:12,480
applied

1223
00:44:12,480 --> 00:44:13,440
so i'm not going to create any

1224
00:44:13,440 --> 00:44:14,880
additional tags here i don't really need

1225
00:44:14,880 --> 00:44:16,560
any besides this default one that i've

1226
00:44:16,560 --> 00:44:17,520
got

1227
00:44:17,520 --> 00:44:18,880
from the file name

1228
00:44:18,880 --> 00:44:20,720
but i could add as many other pcap files

1229
00:44:20,720 --> 00:44:22,800
as i wanted to here if i had multiple

1230
00:44:22,800 --> 00:44:24,160
pcap files

1231
00:44:24,160 --> 00:44:26,000
and and then once i'm done i can either

1232
00:44:26,000 --> 00:44:28,000
start them individually or just click

1233
00:44:28,000 --> 00:44:30,800
start upload

1234
00:44:34,079 --> 00:44:36,079
before we we take a harder look at

1235
00:44:36,079 --> 00:44:38,720
cabana and archimese user interfaces

1236
00:44:38,720 --> 00:44:42,079
let's talk for a moment about the fields

1237
00:44:42,079 --> 00:44:45,280
that logstash can use to enrich log data

1238
00:44:45,280 --> 00:44:47,520
before it's written into the database

1239
00:44:47,520 --> 00:44:49,119
so um

1240
00:44:49,119 --> 00:44:50,960
in other words there's there's a lot of

1241
00:44:50,960 --> 00:44:53,839
stuff that we can infer from our network

1242
00:44:53,839 --> 00:44:56,240
session metadata that might not

1243
00:44:56,240 --> 00:44:58,800
initially be in that data

1244
00:44:58,800 --> 00:45:01,760
mac addresses for example mac addresses

1245
00:45:01,760 --> 00:45:03,920
can generally be mapped to a hardware

1246
00:45:03,920 --> 00:45:05,520
vendor as

1247
00:45:05,520 --> 00:45:07,359
the first three

1248
00:45:07,359 --> 00:45:10,319
octets of a mac address

1249
00:45:10,319 --> 00:45:12,880
are called an oui or organizationally

1250
00:45:12,880 --> 00:45:14,480
unique identifier

1251
00:45:14,480 --> 00:45:16,800
it can be used to distinguish a network

1252
00:45:16,800 --> 00:45:19,040
card that was manufactured

1253
00:45:19,040 --> 00:45:21,920
by you know intel from one manufactured

1254
00:45:21,920 --> 00:45:24,960
by dell or you know a vmware network

1255
00:45:24,960 --> 00:45:26,880
interface or

1256
00:45:26,880 --> 00:45:29,680
an interface on a schneider plc or

1257
00:45:29,680 --> 00:45:31,520
whatever

1258
00:45:31,520 --> 00:45:34,560
this uh this mac address then is used to

1259
00:45:34,560 --> 00:45:36,960
look up that vendor and and that's added

1260
00:45:36,960 --> 00:45:39,680
into that log whenever possible

1261
00:45:39,680 --> 00:45:41,839
malcolm also can be configured to do

1262
00:45:41,839 --> 00:45:47,119
guip and asn lookups for ip addresses

1263
00:45:47,119 --> 00:45:49,599
we can identify internal and external

1264
00:45:49,599 --> 00:45:51,920
traffic based on ip ranges or in other

1265
00:45:51,920 --> 00:45:55,040
words you know private ip ranges versus

1266
00:45:55,040 --> 00:45:57,359
publicly routable globally routable ip

1267
00:45:57,359 --> 00:45:58,720
addresses

1268
00:45:58,720 --> 00:46:01,440
malcolm can do reverse dns lookups it

1269
00:46:01,440 --> 00:46:03,200
can do

1270
00:46:03,200 --> 00:46:08,000
dns query and hostname entropy analysis

1271
00:46:08,000 --> 00:46:10,880
in order to detect dgas or domain

1272
00:46:10,880 --> 00:46:13,280
generation algorithm host names that are

1273
00:46:13,280 --> 00:46:15,760
often used by malware so um some malware

1274
00:46:15,760 --> 00:46:17,119
will will use

1275
00:46:17,119 --> 00:46:19,440
for um

1276
00:46:19,440 --> 00:46:21,040
it's you can go read it on wikipedia or

1277
00:46:21,040 --> 00:46:22,720
whatever right look up domain generation

1278
00:46:22,720 --> 00:46:24,960
algorithms uh but basically you know the

1279
00:46:24,960 --> 00:46:27,520
malware generates this long giant

1280
00:46:27,520 --> 00:46:28,960
uh

1281
00:46:28,960 --> 00:46:30,160
hostname

1282
00:46:30,160 --> 00:46:31,359
or uh

1283
00:46:31,359 --> 00:46:34,319
url or whatever that that is like

1284
00:46:34,319 --> 00:46:35,599
a bunch a whole a whole bunch of

1285
00:46:35,599 --> 00:46:37,839
characters letters and numbers dot a

1286
00:46:37,839 --> 00:46:39,520
whole bunch of ugly stuff

1287
00:46:39,520 --> 00:46:40,720
and uh

1288
00:46:40,720 --> 00:46:43,280
that high entropy that that randomness

1289
00:46:43,280 --> 00:46:45,040
in that um

1290
00:46:45,040 --> 00:46:48,160
url host name uh or that dns lookup or

1291
00:46:48,160 --> 00:46:51,680
whatever uh can be used to uh can be can

1292
00:46:51,680 --> 00:46:54,079
be bubbled to the top for your for your

1293
00:46:54,079 --> 00:46:55,920
analysis

1294
00:46:55,920 --> 00:46:57,280
the other kind of things that we'll do

1295
00:46:57,280 --> 00:47:00,079
on enrichment with malcolm is community

1296
00:47:00,079 --> 00:47:02,240
standard fingerprinting algorithms to be

1297
00:47:02,240 --> 00:47:03,520
applied

1298
00:47:03,520 --> 00:47:05,760
whenever applicable so that can make

1299
00:47:05,760 --> 00:47:07,520
malcolm's data

1300
00:47:07,520 --> 00:47:09,680
cross-referenceable with other tools one

1301
00:47:09,680 --> 00:47:12,079
really good example of that is

1302
00:47:12,079 --> 00:47:14,240
a flow hashing technique called

1303
00:47:14,240 --> 00:47:15,839
community id

1304
00:47:15,839 --> 00:47:16,960
that

1305
00:47:16,960 --> 00:47:19,760
basically takes the the

1306
00:47:19,760 --> 00:47:21,599
relevant stuff in a network connection

1307
00:47:21,599 --> 00:47:23,440
ip addresses and ports

1308
00:47:23,440 --> 00:47:24,400
primarily

1309
00:47:24,400 --> 00:47:26,640
and generates this unique hash

1310
00:47:26,640 --> 00:47:29,760
of that flow and then that hash can be

1311
00:47:29,760 --> 00:47:32,160
used to cross-reference

1312
00:47:32,160 --> 00:47:35,200
logs from you know not only inside of

1313
00:47:35,200 --> 00:47:38,000
malcolm zeke and arcane but you know off

1314
00:47:38,000 --> 00:47:40,720
to surakata or or whatever other network

1315
00:47:40,720 --> 00:47:41,599
tool

1316
00:47:41,599 --> 00:47:43,440
that supports community id and it's

1317
00:47:43,440 --> 00:47:45,760
quite a long list

1318
00:47:45,760 --> 00:47:46,960
the other one that i would mention we've

1319
00:47:46,960 --> 00:47:48,559
already kind of talked about this is

1320
00:47:48,559 --> 00:47:50,160
enrichment is done

1321
00:47:50,160 --> 00:47:52,640
to populate that tags field with each

1322
00:47:52,640 --> 00:47:53,760
log

1323
00:47:53,760 --> 00:47:55,359
and some of the tags that i would make

1324
00:47:55,359 --> 00:47:57,680
particular note of would be these ones

1325
00:47:57,680 --> 00:48:00,160
that are listed here the internal source

1326
00:48:00,160 --> 00:48:02,800
internal destination external source

1327
00:48:02,800 --> 00:48:05,200
external destination those are hopefully

1328
00:48:05,200 --> 00:48:06,400
self um

1329
00:48:06,400 --> 00:48:08,800
you know self describing or whatever but

1330
00:48:08,800 --> 00:48:11,440
uh to identify traffic that is on a

1331
00:48:11,440 --> 00:48:15,599
private subnet your 192 dot your 172 dot

1332
00:48:15,599 --> 00:48:20,480
your uh so your 192 168 dot your 172 dot

1333
00:48:20,480 --> 00:48:22,480
and your 10 dot

1334
00:48:22,480 --> 00:48:25,040
ip address ranges versus globally

1335
00:48:25,040 --> 00:48:27,599
routable ip addresses

1336
00:48:27,599 --> 00:48:29,440
and then that cross segment one if

1337
00:48:29,440 --> 00:48:31,760
you've defined your network segments in

1338
00:48:31,760 --> 00:48:32,880
the

1339
00:48:32,880 --> 00:48:35,520
previous interface that we talked about

1340
00:48:35,520 --> 00:48:37,280
that cross segment tag will be applied

1341
00:48:37,280 --> 00:48:39,599
whenever it sees traffic in the z clogs

1342
00:48:39,599 --> 00:48:41,040
that crosses one of those network

1343
00:48:41,040 --> 00:48:43,839
segment boundaries

1344
00:48:44,000 --> 00:48:45,920
once you've got data into malcolm it'll

1345
00:48:45,920 --> 00:48:47,920
take once it's been processed after a

1346
00:48:47,920 --> 00:48:49,440
few minutes you'll start to see logs

1347
00:48:49,440 --> 00:48:51,440
trickle in and and you can visualize

1348
00:48:51,440 --> 00:48:52,960
that log data

1349
00:48:52,960 --> 00:48:55,440
cabana is one of malcolm's two user

1350
00:48:55,440 --> 00:48:59,119
interfaces for visualizing log data

1351
00:48:59,119 --> 00:49:01,359
where cabana really shines for me is in

1352
00:49:01,359 --> 00:49:02,480
providing

1353
00:49:02,480 --> 00:49:03,440
a

1354
00:49:03,440 --> 00:49:05,440
an intuitive interactive representation

1355
00:49:05,440 --> 00:49:08,400
of log data that um

1356
00:49:08,400 --> 00:49:10,800
that simplifies the process of starting

1357
00:49:10,800 --> 00:49:12,559
at like this high level

1358
00:49:12,559 --> 00:49:14,480
and and then being able to drill down

1359
00:49:14,480 --> 00:49:16,640
quickly to stuff that is interesting to

1360
00:49:16,640 --> 00:49:19,599
you so filtering from this big pile of

1361
00:49:19,599 --> 00:49:21,440
hay and you're looking for the the

1362
00:49:21,440 --> 00:49:23,920
needle in the haystack to like a much

1363
00:49:23,920 --> 00:49:25,920
smaller pile of hay

1364
00:49:25,920 --> 00:49:28,559
that makes it easier to find the needle

1365
00:49:28,559 --> 00:49:30,640
being able to quickly drill down on an

1366
00:49:30,640 --> 00:49:32,559
individual host or connection of

1367
00:49:32,559 --> 00:49:34,079
interest

1368
00:49:34,079 --> 00:49:36,480
malcolm comes with dozens of pre-built

1369
00:49:36,480 --> 00:49:39,119
visualizations specifically for data

1370
00:49:39,119 --> 00:49:42,400
ingested from uh from zclogs its

1371
00:49:42,400 --> 00:49:44,960
dashboards fall into two categories

1372
00:49:44,960 --> 00:49:47,920
overview dashboards and protocol

1373
00:49:47,920 --> 00:49:49,680
specific dashboards and we'll review

1374
00:49:49,680 --> 00:49:51,520
some of those here in a minute

1375
00:49:51,520 --> 00:49:53,920
and a site from the pre-built dashboards

1376
00:49:53,920 --> 00:49:56,319
cabana provides an easy

1377
00:49:56,319 --> 00:49:58,800
drag-and-drop wysiwyg editor for

1378
00:49:58,800 --> 00:50:01,359
creating um new visualizations on the

1379
00:50:01,359 --> 00:50:03,280
fly

1380
00:50:03,280 --> 00:50:04,640
now um

1381
00:50:04,640 --> 00:50:06,960
the key to effectively using kibana is

1382
00:50:06,960 --> 00:50:08,559
learning how to

1383
00:50:08,559 --> 00:50:10,480
how to apply filters how to apply

1384
00:50:10,480 --> 00:50:14,480
filters how to how to search the data um

1385
00:50:14,480 --> 00:50:16,079
so

1386
00:50:16,079 --> 00:50:18,400
as as we talk about applying filters

1387
00:50:18,400 --> 00:50:19,359
like

1388
00:50:19,359 --> 00:50:21,599
you know you'll be using these patterns

1389
00:50:21,599 --> 00:50:24,000
throughout all network traffic analysis

1390
00:50:24,000 --> 00:50:25,280
in cabana

1391
00:50:25,280 --> 00:50:27,119
to do what we just talked about to start

1392
00:50:27,119 --> 00:50:29,200
from this big picture and drill down

1393
00:50:29,200 --> 00:50:30,880
into something to zoom in on something

1394
00:50:30,880 --> 00:50:33,119
of interest

1395
00:50:33,119 --> 00:50:36,000
the first step to applying filters is

1396
00:50:36,000 --> 00:50:38,880
identifying the time range of interest

1397
00:50:38,880 --> 00:50:40,640
this can be done by using the time

1398
00:50:40,640 --> 00:50:42,800
filter controls that are in the upper

1399
00:50:42,800 --> 00:50:45,040
right hand corner of the interface

1400
00:50:45,040 --> 00:50:45,760
if

1401
00:50:45,760 --> 00:50:47,520
and this is me as much as anyone else

1402
00:50:47,520 --> 00:50:49,440
i've ever seen but

1403
00:50:49,440 --> 00:50:51,839
oftentimes if i'm not seeing the traffic

1404
00:50:51,839 --> 00:50:53,520
that i want to see

1405
00:50:53,520 --> 00:50:55,119
and i'm like where's my data it's

1406
00:50:55,119 --> 00:50:56,559
because i'm searching on the wrong time

1407
00:50:56,559 --> 00:50:58,960
frame right it's because i captured my

1408
00:50:58,960 --> 00:51:00,800
pcap two weeks ago

1409
00:51:00,800 --> 00:51:02,240
for analysis and i'm finally getting

1410
00:51:02,240 --> 00:51:04,079
around to it and like the default

1411
00:51:04,079 --> 00:51:06,960
controls for cabana are are like set for

1412
00:51:06,960 --> 00:51:08,559
the last 15 minutes or something like

1413
00:51:08,559 --> 00:51:11,280
that so always check your time frame in

1414
00:51:11,280 --> 00:51:12,960
that uh in those time controls in the

1415
00:51:12,960 --> 00:51:14,640
upper right hand corner and then you can

1416
00:51:14,640 --> 00:51:17,359
use that time histogram that that that

1417
00:51:17,359 --> 00:51:19,200
like logs over time graph that you'll

1418
00:51:19,200 --> 00:51:21,599
see on most of the kibana interfaces

1419
00:51:21,599 --> 00:51:24,640
most of the dashboards to to zoom in or

1420
00:51:24,640 --> 00:51:27,280
zoom out based on what time frame you're

1421
00:51:27,280 --> 00:51:29,040
interested in

1422
00:51:29,040 --> 00:51:30,960
additionally the query bar allows you to

1423
00:51:30,960 --> 00:51:33,040
specify search constraints

1424
00:51:33,040 --> 00:51:34,720
and you can do that using a couple of

1425
00:51:34,720 --> 00:51:36,960
different syntaxes actually

1426
00:51:36,960 --> 00:51:41,359
the traditional lucene query syntax

1427
00:51:41,359 --> 00:51:42,240
or

1428
00:51:42,240 --> 00:51:43,520
the new

1429
00:51:43,520 --> 00:51:46,640
kql cabana query language syntax and in

1430
00:51:46,640 --> 00:51:48,720
the documentation and in some tables

1431
00:51:48,720 --> 00:51:50,880
that i'll probably include here in this

1432
00:51:50,880 --> 00:51:53,119
video you'll see um maybe some of the

1433
00:51:53,119 --> 00:51:55,680
differences in those syntaxes and and

1434
00:51:55,680 --> 00:51:57,280
there's really no magic bullet other

1435
00:51:57,280 --> 00:51:59,440
than just you know having the reference

1436
00:51:59,440 --> 00:52:01,359
bookmarked and uh and then getting used

1437
00:52:01,359 --> 00:52:03,119
to what that syntax is for creating your

1438
00:52:03,119 --> 00:52:06,000
queries um modifying the contents of

1439
00:52:06,000 --> 00:52:07,760
this search bar

1440
00:52:07,760 --> 00:52:09,200
and then hitting enter or clicking the

1441
00:52:09,200 --> 00:52:11,599
search icon to the right of it will run

1442
00:52:11,599 --> 00:52:13,119
the search and update the results that

1443
00:52:13,119 --> 00:52:16,319
are displayed so um

1444
00:52:16,319 --> 00:52:19,760
you know the uh time filter that search

1445
00:52:19,760 --> 00:52:21,599
query bar and then finally the filter

1446
00:52:21,599 --> 00:52:24,559
bar which is a more

1447
00:52:24,559 --> 00:52:27,280
gooey kind of based filter creator

1448
00:52:27,280 --> 00:52:29,359
underneath the search bar is the third

1449
00:52:29,359 --> 00:52:32,319
way of specifying search constraints

1450
00:52:32,319 --> 00:52:34,160
although it provides more of a gui kind

1451
00:52:34,160 --> 00:52:36,240
of interface to do so

1452
00:52:36,240 --> 00:52:38,480
it's generally not quite as like free

1453
00:52:38,480 --> 00:52:40,720
form or flexible as as writing textual

1454
00:52:40,720 --> 00:52:42,000
queries

1455
00:52:42,000 --> 00:52:43,520
in most cases there's not really a

1456
00:52:43,520 --> 00:52:45,040
meaningful distinction between putting

1457
00:52:45,040 --> 00:52:47,200
query terms in the query bar versus the

1458
00:52:47,200 --> 00:52:49,119
filter bar

1459
00:52:49,119 --> 00:52:50,880
what the filter bar does allow you to do

1460
00:52:50,880 --> 00:52:53,359
which is nice is allows you to pin those

1461
00:52:53,359 --> 00:52:55,520
filters so that when you navigate from

1462
00:52:55,520 --> 00:52:58,640
one dashboard to another

1463
00:52:58,640 --> 00:53:00,400
those filters stick around and the ones

1464
00:53:00,400 --> 00:53:02,960
in the query bar generally don't

1465
00:53:02,960 --> 00:53:04,880
filter bars are also what's the filter

1466
00:53:04,880 --> 00:53:06,880
bar is also what's populated when you

1467
00:53:06,880 --> 00:53:09,359
click on values in the charts or tables

1468
00:53:09,359 --> 00:53:11,760
so um whenever you see a value in a

1469
00:53:11,760 --> 00:53:13,680
chart or a table in a cabana

1470
00:53:13,680 --> 00:53:15,839
visualization you mouse over it there'll

1471
00:53:15,839 --> 00:53:17,760
be like a little

1472
00:53:17,760 --> 00:53:19,839
magnifying glass with a plus icon or a

1473
00:53:19,839 --> 00:53:21,680
minus icon in it

1474
00:53:21,680 --> 00:53:24,240
so you can use that to

1475
00:53:24,240 --> 00:53:26,880
create or exclude filters

1476
00:53:26,880 --> 00:53:29,839
or create filters for or filters to

1477
00:53:29,839 --> 00:53:32,400
exclude those values based on what you

1478
00:53:32,400 --> 00:53:33,839
want to see or don't want to see in that

1479
00:53:33,839 --> 00:53:36,240
result set and as you click those inter

1480
00:53:36,240 --> 00:53:37,920
click those magnifying glasses you'll

1481
00:53:37,920 --> 00:53:41,680
see the filter bar is updated to

1482
00:53:41,680 --> 00:53:43,839
to reflect that filter

1483
00:53:43,839 --> 00:53:45,520
i've read that a future release of

1484
00:53:45,520 --> 00:53:47,839
kibana will merge the query bar and the

1485
00:53:47,839 --> 00:53:49,119
filter bar

1486
00:53:49,119 --> 00:53:51,440
into like one component i i'm i'm not

1487
00:53:51,440 --> 00:53:52,960
exactly sure how they'll do that but i

1488
00:53:52,960 --> 00:53:54,000
guess that's something we have to look

1489
00:53:54,000 --> 00:53:56,160
forward to

1490
00:53:56,160 --> 00:53:59,280
let's talk about the overview dashboards

1491
00:53:59,280 --> 00:54:02,000
the dashboards under the general section

1492
00:54:02,000 --> 00:54:04,559
of malcolm's cabana interface

1493
00:54:04,559 --> 00:54:05,599
provide

1494
00:54:05,599 --> 00:54:07,920
a high level overview of network traffic

1495
00:54:07,920 --> 00:54:10,559
from across all of the

1496
00:54:10,559 --> 00:54:12,240
logs generated by zeek in other words

1497
00:54:12,240 --> 00:54:14,079
they're not restricted to like a

1498
00:54:14,079 --> 00:54:15,440
particular

1499
00:54:15,440 --> 00:54:17,200
application protocol

1500
00:54:17,200 --> 00:54:19,040
these dashboards are a good jumping off

1501
00:54:19,040 --> 00:54:20,880
point for investigation when you're

1502
00:54:20,880 --> 00:54:22,559
trying to get a feel for the network and

1503
00:54:22,559 --> 00:54:24,960
application protocols

1504
00:54:24,960 --> 00:54:26,319
and and the hosts that are on that

1505
00:54:26,319 --> 00:54:29,200
network and using those protocols

1506
00:54:29,200 --> 00:54:34,000
uh one of note is the notices dashboard

1507
00:54:34,000 --> 00:54:36,640
as discussed earlier zeke notices are

1508
00:54:36,640 --> 00:54:39,440
the tools way of raising some uh some

1509
00:54:39,440 --> 00:54:41,119
event to the forefront of an analyst's

1510
00:54:41,119 --> 00:54:42,960
attention

1511
00:54:42,960 --> 00:54:45,520
and those notices are are summarized

1512
00:54:45,520 --> 00:54:48,960
here in the zeke notices dashboard

1513
00:54:48,960 --> 00:54:51,760
the third party zeke plugins that

1514
00:54:51,760 --> 00:54:53,599
malcolm uses

1515
00:54:53,599 --> 00:54:56,240
to generate additional notices or to to

1516
00:54:56,240 --> 00:54:58,319
analyze traffic in different ways can be

1517
00:54:58,319 --> 00:55:00,640
found in the malcolm readme on the

1518
00:55:00,640 --> 00:55:02,480
malcolm's github page

1519
00:55:02,480 --> 00:55:04,000
they include some of the interesting

1520
00:55:04,000 --> 00:55:06,480
ones include but aren't limited to

1521
00:55:06,480 --> 00:55:08,559
notices that are generated for

1522
00:55:08,559 --> 00:55:11,520
clear text passwords detected in http

1523
00:55:11,520 --> 00:55:13,200
post requests

1524
00:55:13,200 --> 00:55:16,400
non-compliant http post requests

1525
00:55:16,400 --> 00:55:18,960
sorry non-compliant http requests

1526
00:55:18,960 --> 00:55:21,280
like those that might be used for um

1527
00:55:21,280 --> 00:55:24,480
you know for http smuggling um extor

1528
00:55:24,480 --> 00:55:26,640
obfuscated file transfers

1529
00:55:26,640 --> 00:55:29,119
um i mentioned this earlier but behavior

1530
00:55:29,119 --> 00:55:31,599
or techniques categorized according to

1531
00:55:31,599 --> 00:55:34,400
the miter attack framework um and then

1532
00:55:34,400 --> 00:55:36,319
like lots of various other cves and

1533
00:55:36,319 --> 00:55:38,960
vulnerabilities uh bad neighbor call

1534
00:55:38,960 --> 00:55:40,160
stranger

1535
00:55:40,160 --> 00:55:43,040
um cigred zero logon

1536
00:55:43,040 --> 00:55:44,480
uh

1537
00:55:44,480 --> 00:55:48,640
you know the ecc certificate validation

1538
00:55:48,720 --> 00:55:49,760
and the

1539
00:55:49,760 --> 00:55:52,480
new tls unencrypted session ticket

1540
00:55:52,480 --> 00:55:53,760
dissection

1541
00:55:53,760 --> 00:55:57,040
um the eternal family of samba windows

1542
00:55:57,040 --> 00:56:00,160
exploits from smbv1

1543
00:56:00,160 --> 00:56:02,160
which includes eternal blue internal

1544
00:56:02,160 --> 00:56:04,400
synergy eternal romance

1545
00:56:04,400 --> 00:56:06,559
uh double pulsar

1546
00:56:06,559 --> 00:56:07,599
uh

1547
00:56:07,599 --> 00:56:11,280
other various smb exploits uh ripple 20.

1548
00:56:11,280 --> 00:56:12,160
so

1549
00:56:12,160 --> 00:56:14,240
the developers of malcolm

1550
00:56:14,240 --> 00:56:17,119
endeavor to stay abreast of of

1551
00:56:17,119 --> 00:56:18,960
developments in the threat landscape and

1552
00:56:18,960 --> 00:56:20,960
whenever possible we release updates

1553
00:56:20,960 --> 00:56:23,200
that include you know new zeke plug-ins

1554
00:56:23,200 --> 00:56:24,400
to detect

1555
00:56:24,400 --> 00:56:26,160
uh or scripts to detect these

1556
00:56:26,160 --> 00:56:28,880
vulnerabilities and exploits as they are

1557
00:56:28,880 --> 00:56:30,480
discovered

1558
00:56:30,480 --> 00:56:32,400
another interesting dashboard from a

1559
00:56:32,400 --> 00:56:34,480
security standpoint

1560
00:56:34,480 --> 00:56:36,480
a pair of dashboards actually is the

1561
00:56:36,480 --> 00:56:39,040
security overview dashboard and the ics

1562
00:56:39,040 --> 00:56:42,480
slash iot security overview dashboards

1563
00:56:42,480 --> 00:56:44,319
these highlight events that may be of

1564
00:56:44,319 --> 00:56:46,079
particular interest from a security

1565
00:56:46,079 --> 00:56:49,119
standpoint including zeek notices

1566
00:56:49,119 --> 00:56:51,440
signatures triggered from file scans

1567
00:56:51,440 --> 00:56:54,480
clear tracks transmission of passwords

1568
00:56:54,480 --> 00:56:56,720
outdated or insecure versions of

1569
00:56:56,720 --> 00:56:58,960
application protocols

1570
00:56:58,960 --> 00:57:01,680
traffic originating from or directed to

1571
00:57:01,680 --> 00:57:04,079
public ip addresses

1572
00:57:04,079 --> 00:57:06,319
types of files transferred and more

1573
00:57:06,319 --> 00:57:08,160
these these dashboards can be a good

1574
00:57:08,160 --> 00:57:09,680
jumping off place

1575
00:57:09,680 --> 00:57:11,520
when looking for indicators of

1576
00:57:11,520 --> 00:57:13,359
compromise in your network or

1577
00:57:13,359 --> 00:57:16,240
vulnerabilities in your network traffic

1578
00:57:16,240 --> 00:57:19,119
where possible malcolm

1579
00:57:19,119 --> 00:57:20,880
correlates common fields from across

1580
00:57:20,880 --> 00:57:22,559
different protocols

1581
00:57:22,559 --> 00:57:25,200
to allow you to view one device or

1582
00:57:25,200 --> 00:57:27,119
application's network traffic in the

1583
00:57:27,119 --> 00:57:29,760
context of the other traffic occurring

1584
00:57:29,760 --> 00:57:32,319
around it

1585
00:57:32,400 --> 00:57:34,559
for example multiple failed http

1586
00:57:34,559 --> 00:57:37,119
authentication attempts followed by a

1587
00:57:37,119 --> 00:57:39,520
successful authenticated http post

1588
00:57:39,520 --> 00:57:40,559
operation

1589
00:57:40,559 --> 00:57:42,559
followed by i don't know

1590
00:57:42,559 --> 00:57:44,880
sequential reads and writes

1591
00:57:44,880 --> 00:57:46,480
to a file server could indicate that a

1592
00:57:46,480 --> 00:57:49,280
foothold was obtained in an http server

1593
00:57:49,280 --> 00:57:51,520
that allowed the adversary to pivot to

1594
00:57:51,520 --> 00:57:54,720
another service on the network

1595
00:57:54,720 --> 00:57:56,799
so a good example of this is the actions

1596
00:57:56,799 --> 00:57:58,799
and results dashboards

1597
00:57:58,799 --> 00:58:00,559
in which actions

1598
00:58:00,559 --> 00:58:02,079
a lot of network protocols have the

1599
00:58:02,079 --> 00:58:04,720
concept of of action

1600
00:58:04,720 --> 00:58:05,520
and

1601
00:58:05,520 --> 00:58:07,520
you know a cause and effect action and

1602
00:58:07,520 --> 00:58:08,480
result

1603
00:58:08,480 --> 00:58:10,559
um request and response whatever you

1604
00:58:10,559 --> 00:58:12,480
want to call it and so actions are

1605
00:58:12,480 --> 00:58:14,559
things such as a file was written a

1606
00:58:14,559 --> 00:58:16,319
logon was attempted a web page was

1607
00:58:16,319 --> 00:58:18,559
requested and then the results would be

1608
00:58:18,559 --> 00:58:22,640
success access denied page not found

1609
00:58:22,640 --> 00:58:24,880
across all the protocols that that i can

1610
00:58:24,880 --> 00:58:26,319
figure out what those actions and

1611
00:58:26,319 --> 00:58:28,799
results are i normally normalize those

1612
00:58:28,799 --> 00:58:31,520
to the same fields so that in for

1613
00:58:31,520 --> 00:58:33,599
example the actions in results dashboard

1614
00:58:33,599 --> 00:58:34,839
you can see

1615
00:58:34,839 --> 00:58:37,200
actions and results across all these

1616
00:58:37,200 --> 00:58:40,399
different protocols together

1617
00:58:40,559 --> 00:58:43,040
in addition to the overview dashboards

1618
00:58:43,040 --> 00:58:45,280
malcolm provides dozens of dashboards

1619
00:58:45,280 --> 00:58:48,319
tailored specifically to application

1620
00:58:48,319 --> 00:58:49,520
protocols

1621
00:58:49,520 --> 00:58:52,720
including protocols commonly found in

1622
00:58:52,720 --> 00:58:54,960
industrial control system networks as

1623
00:58:54,960 --> 00:58:57,599
well as those found in more traditional

1624
00:58:57,599 --> 00:58:58,559
i.t

1625
00:58:58,559 --> 00:59:01,040
kinds of networks

1626
00:59:01,040 --> 00:59:03,920
the discover view cabana's discover view

1627
00:59:03,920 --> 00:59:06,240
enables you to view events on a

1628
00:59:06,240 --> 00:59:08,480
record-by-record basis

1629
00:59:08,480 --> 00:59:11,040
similar to a session record in archime

1630
00:59:11,040 --> 00:59:14,079
which we'll discuss in a moment

1631
00:59:14,079 --> 00:59:15,839
in other words the discover view allows

1632
00:59:15,839 --> 00:59:18,480
you to look at an individual line from a

1633
00:59:18,480 --> 00:59:20,400
z clock an individual record from a z

1634
00:59:20,400 --> 00:59:21,760
clock

1635
00:59:21,760 --> 00:59:23,760
the data table in the discovery view can

1636
00:59:23,760 --> 00:59:26,799
be customized to display only the fields

1637
00:59:26,799 --> 00:59:28,240
that are relevant to the traffic that

1638
00:59:28,240 --> 00:59:30,240
you're interested in so for example if i

1639
00:59:30,240 --> 00:59:33,040
wanted to put together a play-by-play of

1640
00:59:33,040 --> 00:59:35,760
an http session

1641
00:59:35,760 --> 00:59:38,160
rather than looking at this big

1642
00:59:38,160 --> 00:59:39,200
you know

1643
00:59:39,200 --> 00:59:41,839
json log that contains all the fields

1644
00:59:41,839 --> 00:59:43,520
that may not be relevant to my traffic

1645
00:59:43,520 --> 00:59:44,960
right now

1646
00:59:44,960 --> 00:59:48,319
i could go to the discover page filter

1647
00:59:48,319 --> 00:59:51,839
on seek.log type for http

1648
00:59:51,839 --> 00:59:55,599
sort by time and then include source ip

1649
00:59:55,599 --> 00:59:59,680
user agent referrer deskt

1650
00:59:59,680 --> 01:00:02,559
and then the http host uri and status

1651
01:00:02,559 --> 01:00:04,000
message right

1652
01:00:04,000 --> 01:00:06,640
and and by doing that i've got

1653
01:00:06,640 --> 01:00:08,799
a more um

1654
01:00:08,799 --> 01:00:11,520
focused view of http traffic that i can

1655
01:00:11,520 --> 01:00:13,119
then go through and see this happen and

1656
01:00:13,119 --> 01:00:14,960
then that and then this

1657
01:00:14,960 --> 01:00:16,559
and then once i've got a configuration

1658
01:00:16,559 --> 01:00:17,920
that i like for a particular kind of

1659
01:00:17,920 --> 01:00:20,240
traffic i can store i can save that

1660
01:00:20,240 --> 01:00:23,040
search as you know http traffic analysis

1661
01:00:23,040 --> 01:00:24,559
or whatever i want to call it and then

1662
01:00:24,559 --> 01:00:26,480
return to it for further investigation

1663
01:00:26,480 --> 01:00:27,599
in the future

1664
01:00:27,599 --> 01:00:30,400
the visualizations page allows you to

1665
01:00:30,400 --> 01:00:33,520
view and manage visualization components

1666
01:00:33,520 --> 01:00:35,520
which are are like graphical building

1667
01:00:35,520 --> 01:00:38,319
blocks to be used in dashboards

1668
01:00:38,319 --> 01:00:40,559
cabana includes lots of different kinds

1669
01:00:40,559 --> 01:00:42,960
of charts tables maps for displaying

1670
01:00:42,960 --> 01:00:44,160
your data

1671
01:00:44,160 --> 01:00:47,119
well cabana is great for at a glance

1672
01:00:47,119 --> 01:00:48,960
views and for creating custom

1673
01:00:48,960 --> 01:00:50,240
visualizations

1674
01:00:50,240 --> 01:00:52,319
archime which until recently was known

1675
01:00:52,319 --> 01:00:55,520
as molok provides another interface for

1676
01:00:55,520 --> 01:00:56,880
examining

1677
01:00:56,880 --> 01:00:58,799
network traffic that may be better

1678
01:00:58,799 --> 01:01:00,319
suited to

1679
01:01:00,319 --> 01:01:04,000
in-depth analysis and network forensics

1680
01:01:04,000 --> 01:01:05,920
earlier when we talked about the malcolm

1681
01:01:05,920 --> 01:01:08,720
p-cap processing pipeline we mentioned

1682
01:01:08,720 --> 01:01:11,760
that that pcap data um got sent two

1683
01:01:11,760 --> 01:01:14,079
directions right it got sent to zeek

1684
01:01:14,079 --> 01:01:16,480
and uh and then it also got set down to

1685
01:01:16,480 --> 01:01:18,160
mullet capture which is our committee's

1686
01:01:18,160 --> 01:01:20,400
program for ingesting that data

1687
01:01:20,400 --> 01:01:22,720
while malcolm's cabana dashboards are

1688
01:01:22,720 --> 01:01:25,359
focused on the zeke logs and the

1689
01:01:25,359 --> 01:01:27,520
archimedes sessions won't necessarily be

1690
01:01:27,520 --> 01:01:30,160
reflected there

1691
01:01:30,160 --> 01:01:31,920
malcolm's instance of archimede can be

1692
01:01:31,920 --> 01:01:35,040
used to view both z-clogs and arcane

1693
01:01:35,040 --> 01:01:38,400
sessions together in the same interface

1694
01:01:38,400 --> 01:01:40,799
another really great strength of archime

1695
01:01:40,799 --> 01:01:43,520
and and i mean arguably its

1696
01:01:43,520 --> 01:01:46,000
kind of initial reason for existing is

1697
01:01:46,000 --> 01:01:49,200
as a full p cap

1698
01:01:49,200 --> 01:01:52,160
a full p cap solution right its ability

1699
01:01:52,160 --> 01:01:54,880
to tie the session metadata back to the

1700
01:01:54,880 --> 01:01:57,200
original packets bytes

1701
01:01:57,200 --> 01:01:59,200
the original packet payload

1702
01:01:59,200 --> 01:02:01,200
which allows you to view and search and

1703
01:02:01,200 --> 01:02:03,359
export the data

1704
01:02:03,359 --> 01:02:05,920
deeper in the pcapp that might not be

1705
01:02:05,920 --> 01:02:09,839
referenced in the metadata so archimede

1706
01:02:09,839 --> 01:02:11,280
what it really allows you to do which i

1707
01:02:11,280 --> 01:02:12,319
think is

1708
01:02:12,319 --> 01:02:14,960
so so incredibly powerful is efficiently

1709
01:02:14,960 --> 01:02:18,079
deal with very large pcap file sets

1710
01:02:18,079 --> 01:02:20,880
and still have access to the underlying

1711
01:02:20,880 --> 01:02:22,960
payload data

1712
01:02:22,960 --> 01:02:26,720
something that wireshark struggles to do

1713
01:02:27,039 --> 01:02:29,119
so similar to

1714
01:02:29,119 --> 01:02:30,480
kibana

1715
01:02:30,480 --> 01:02:32,480
we want to learn how to

1716
01:02:32,480 --> 01:02:35,440
effectively build filters in archime

1717
01:02:35,440 --> 01:02:37,680
um to to narrow in on the data that's of

1718
01:02:37,680 --> 01:02:38,960
interest to us

1719
01:02:38,960 --> 01:02:42,240
um so we've got at the at the top of the

1720
01:02:42,240 --> 01:02:44,880
archime interface you've got controls

1721
01:02:44,880 --> 01:02:47,280
for specifying your time filter to

1722
01:02:47,280 --> 01:02:49,200
define your time search frame

1723
01:02:49,200 --> 01:02:51,359
your search time frame and

1724
01:02:51,359 --> 01:02:52,640
just like in kibana that's very

1725
01:02:52,640 --> 01:02:53,920
important make sure you know what the

1726
01:02:53,920 --> 01:02:55,200
time frame of the data that you're

1727
01:02:55,200 --> 01:02:57,280
looking at is

1728
01:02:57,280 --> 01:02:58,480
there's a

1729
01:02:58,480 --> 01:03:00,480
little globe icon that can be clicked to

1730
01:03:00,480 --> 01:03:03,119
expand a map filter that allows you to

1731
01:03:03,119 --> 01:03:05,119
restrict results to a geo location which

1732
01:03:05,119 --> 01:03:06,880
may be of interest if you're looking at

1733
01:03:06,880 --> 01:03:08,880
data that that is going out to the

1734
01:03:08,880 --> 01:03:10,160
internet

1735
01:03:10,160 --> 01:03:11,440
there's a query bar where you can

1736
01:03:11,440 --> 01:03:14,319
specify queries in archime syntax

1737
01:03:14,319 --> 01:03:15,440
and then

1738
01:03:15,440 --> 01:03:16,960
to the right of the search button

1739
01:03:16,960 --> 01:03:19,119
there's this eyeball

1740
01:03:19,119 --> 01:03:21,119
this the views button and that allows

1741
01:03:21,119 --> 01:03:22,480
you to overlay

1742
01:03:22,480 --> 01:03:23,760
uh

1743
01:03:23,760 --> 01:03:26,640
previously specified filters onto

1744
01:03:26,640 --> 01:03:28,880
the current sessions filters and so for

1745
01:03:28,880 --> 01:03:31,359
convenience malcolm provides several uh

1746
01:03:31,359 --> 01:03:34,079
archemy pre-configured views including

1747
01:03:34,079 --> 01:03:35,920
some that involve the zeke.log type

1748
01:03:35,920 --> 01:03:37,920
field so that in

1749
01:03:37,920 --> 01:03:39,920
archime as we're viewing both archimedes

1750
01:03:39,920 --> 01:03:42,480
sessions and z-clogs you've got a quick

1751
01:03:42,480 --> 01:03:44,799
way to say hey right now i only want to

1752
01:03:44,799 --> 01:03:47,039
look at arcane sessions that are tied to

1753
01:03:47,039 --> 01:03:49,760
pcap files or i want to look at zeek

1754
01:03:49,760 --> 01:03:51,599
logs that

1755
01:03:51,599 --> 01:03:53,520
were generated from pcap files but don't

1756
01:03:53,520 --> 01:03:56,319
leak directly back to the payload like

1757
01:03:56,319 --> 01:03:58,720
the arcane sessions do so

1758
01:03:58,720 --> 01:04:00,960
you can see those here the

1759
01:04:00,960 --> 01:04:02,799
some of the views that malcolm has pre

1760
01:04:02,799 --> 01:04:04,640
pre-configured for us archimedes

1761
01:04:04,640 --> 01:04:07,200
sessions tab provides a low-level

1762
01:04:07,200 --> 01:04:08,880
details of the sessions being

1763
01:04:08,880 --> 01:04:10,319
investigated

1764
01:04:10,319 --> 01:04:12,240
in a way similar to how kibana's

1765
01:04:12,240 --> 01:04:14,000
discovery interface does it

1766
01:04:14,000 --> 01:04:16,400
and in the sessions view you will see

1767
01:04:16,400 --> 01:04:19,039
archime sessions that are created from

1768
01:04:19,039 --> 01:04:21,200
pcap files and then that archime session

1769
01:04:21,200 --> 01:04:22,720
log is written to the elasticsearch

1770
01:04:22,720 --> 01:04:23,839
database

1771
01:04:23,839 --> 01:04:26,960
and you'll see zeke logs mapped to that

1772
01:04:26,960 --> 01:04:29,520
same archime session database schema and

1773
01:04:29,520 --> 01:04:31,440
you'll see those together in the same in

1774
01:04:31,440 --> 01:04:34,400
the same pane of glass

1775
01:04:34,400 --> 01:04:35,680
it should be noted that you can

1776
01:04:35,680 --> 01:04:37,680
distinguish between the two

1777
01:04:37,680 --> 01:04:40,880
by the value in or the absence of a

1778
01:04:40,880 --> 01:04:44,480
value in the zeek log type column in the

1779
01:04:44,480 --> 01:04:45,520
sessions

1780
01:04:45,520 --> 01:04:47,440
in the sessions table

1781
01:04:47,440 --> 01:04:48,720
similar to how we did with the

1782
01:04:48,720 --> 01:04:51,520
discussion to the discover table

1783
01:04:51,520 --> 01:04:55,440
earlier in our discussion you can also

1784
01:04:55,440 --> 01:04:57,200
customize the set of fields present in

1785
01:04:57,200 --> 01:04:58,720
the sessions table

1786
01:04:58,720 --> 01:05:01,520
and then you know save or later recall

1787
01:05:01,520 --> 01:05:03,680
those configurations of fields that

1788
01:05:03,680 --> 01:05:05,599
you're interested in to exist in that

1789
01:05:05,599 --> 01:05:07,359
table

1790
01:05:07,359 --> 01:05:10,400
as mentioned arkhami's ability to

1791
01:05:10,400 --> 01:05:12,640
tie a session record back to its

1792
01:05:12,640 --> 01:05:14,799
original packet is is one of its

1793
01:05:14,799 --> 01:05:17,200
greatest strengths so details for an

1794
01:05:17,200 --> 01:05:19,599
individual session or log can be

1795
01:05:19,599 --> 01:05:21,760
expanded by clicking on that plus icon

1796
01:05:21,760 --> 01:05:24,480
on the left hand side of the

1797
01:05:24,480 --> 01:05:26,559
on the left hand side of each row in the

1798
01:05:26,559 --> 01:05:27,839
sessions table

1799
01:05:27,839 --> 01:05:30,160
for archime sessions records

1800
01:05:30,160 --> 01:05:32,240
an additional packet section will be

1801
01:05:32,240 --> 01:05:35,920
visible underneath the metadata section

1802
01:05:35,920 --> 01:05:38,640
when the details of this section uh

1803
01:05:38,640 --> 01:05:40,640
when the details of a session

1804
01:05:40,640 --> 01:05:42,400
of this type in other words an archime

1805
01:05:42,400 --> 01:05:45,839
session are expanded archime will will

1806
01:05:45,839 --> 01:05:48,480
reach out to where the pcap is stored

1807
01:05:48,480 --> 01:05:51,760
and um extract the payload for that

1808
01:05:51,760 --> 01:05:53,839
session for display here

1809
01:05:53,839 --> 01:05:56,079
various controls can be used to adjust

1810
01:05:56,079 --> 01:05:58,319
how the packet is displayed

1811
01:05:58,319 --> 01:06:00,160
personally i like to enable natural

1812
01:06:00,160 --> 01:06:02,160
decoding and click

1813
01:06:02,160 --> 01:06:05,119
show images and files um and and that

1814
01:06:05,119 --> 01:06:07,119
produces you know visually appealing

1815
01:06:07,119 --> 01:06:08,720
results to me for for when i'm looking

1816
01:06:08,720 --> 01:06:10,160
at payload data

1817
01:06:10,160 --> 01:06:12,000
but there's lots of options there um

1818
01:06:12,000 --> 01:06:13,839
other options also become invisible when

1819
01:06:13,839 --> 01:06:16,240
you have uh pcapp data available when

1820
01:06:16,240 --> 01:06:18,880
you have that pcap session data to be

1821
01:06:18,880 --> 01:06:20,799
extracted for the payload and that

1822
01:06:20,799 --> 01:06:23,280
includes downloading the pcap itself

1823
01:06:23,280 --> 01:06:25,920
downloading and generating carving out

1824
01:06:25,920 --> 01:06:28,880
if you will a pcap for that particular

1825
01:06:28,880 --> 01:06:30,640
session

1826
01:06:30,640 --> 01:06:32,640
carving out and downloading or viewing

1827
01:06:32,640 --> 01:06:34,880
images and files applying decoding

1828
01:06:34,880 --> 01:06:36,000
filters

1829
01:06:36,000 --> 01:06:39,119
and examining payloads in cyberchef

1830
01:06:39,119 --> 01:06:41,200
all that can be done from this

1831
01:06:41,200 --> 01:06:44,160
packet payload section

1832
01:06:44,160 --> 01:06:46,880
back up at the top of the interface um

1833
01:06:46,880 --> 01:06:48,799
if you click the down arrow to the far

1834
01:06:48,799 --> 01:06:51,039
right of the search bar you'll see some

1835
01:06:51,039 --> 01:06:52,880
new actions presented there including

1836
01:06:52,880 --> 01:06:54,960
pcap export

1837
01:06:54,960 --> 01:06:57,520
when a full pcapp sessions are displayed

1838
01:06:57,520 --> 01:07:01,119
the pcap export feature allows you to

1839
01:07:01,119 --> 01:07:03,200
generate a new pcap file from the

1840
01:07:03,200 --> 01:07:05,680
matching archime sessions including

1841
01:07:05,680 --> 01:07:08,480
controls for which sessions are included

1842
01:07:08,480 --> 01:07:11,119
in other words open items only the ones

1843
01:07:11,119 --> 01:07:13,359
that i actually got expanded right now

1844
01:07:13,359 --> 01:07:15,520
visible items which is everything that

1845
01:07:15,520 --> 01:07:17,839
i'm seeing on this page right now or all

1846
01:07:17,839 --> 01:07:19,680
matching items everything matching my

1847
01:07:19,680 --> 01:07:21,680
current search filters

1848
01:07:21,680 --> 01:07:23,280
and then whether or not to include link

1849
01:07:23,280 --> 01:07:24,400
segments

1850
01:07:24,400 --> 01:07:26,000
once you've defined how you want to do

1851
01:07:26,000 --> 01:07:26,960
that

1852
01:07:26,960 --> 01:07:29,440
what your filters are and then which

1853
01:07:29,440 --> 01:07:31,520
sessions you want to include click the

1854
01:07:31,520 --> 01:07:34,559
export pcap button to generate the pcap

1855
01:07:34,559 --> 01:07:36,559
and after which you'll presented with a

1856
01:07:36,559 --> 01:07:39,760
browser download dialog to save or open

1857
01:07:39,760 --> 01:07:41,359
that file in y shark or whatever it

1858
01:07:41,359 --> 01:07:43,200
happens to be

1859
01:07:43,200 --> 01:07:45,119
note that dispen

1860
01:07:45,119 --> 01:07:47,359
depending on the scope of your filters

1861
01:07:47,359 --> 01:07:48,960
this could take a long time right to

1862
01:07:48,960 --> 01:07:50,640
generate that pcap file or it might even

1863
01:07:50,640 --> 01:07:53,760
time out so it's it's a good practice to

1864
01:07:53,760 --> 01:07:56,079
look at the number of matching sessions

1865
01:07:56,079 --> 01:07:58,960
there on your arcame sessions interface

1866
01:07:58,960 --> 01:08:00,880
before you go exporting a pcap and if

1867
01:08:00,880 --> 01:08:02,799
it's like hey you know this is

1868
01:08:02,799 --> 01:08:05,359
one billion sessions i may want to apply

1869
01:08:05,359 --> 01:08:07,680
further filters before generating that

1870
01:08:07,680 --> 01:08:09,440
pcap file

1871
01:08:09,440 --> 01:08:11,920
to further narrow my um

1872
01:08:11,920 --> 01:08:13,359
narrow my search

1873
01:08:13,359 --> 01:08:15,839
um note here as well and and this is

1874
01:08:15,839 --> 01:08:17,600
kind of a known issue that that i hope

1875
01:08:17,600 --> 01:08:19,040
to be able to figure out a way to

1876
01:08:19,040 --> 01:08:21,120
resolve but um

1877
01:08:21,120 --> 01:08:23,520
you will probably get an error if you

1878
01:08:23,520 --> 01:08:26,158
try to do an export pcap without

1879
01:08:26,158 --> 01:08:28,799
applying the pcap files view with that

1880
01:08:28,799 --> 01:08:30,960
little eyeball icon to the sessions

1881
01:08:30,960 --> 01:08:32,479
first

1882
01:08:32,479 --> 01:08:33,759
there's there's

1883
01:08:33,759 --> 01:08:35,439
a bug in what i'm doing i guess or or

1884
01:08:35,439 --> 01:08:37,679
something that when

1885
01:08:37,679 --> 01:08:41,040
it tries to export a pcap file from

1886
01:08:41,040 --> 01:08:42,880
logs that don't have pcap associated

1887
01:08:42,880 --> 01:08:44,000
with it

1888
01:08:44,000 --> 01:08:46,799
you might get an error so uh if you'll

1889
01:08:46,799 --> 01:08:48,399
if you'll apply that pcap files view

1890
01:08:48,399 --> 01:08:50,319
first you'll make sure that that that

1891
01:08:50,319 --> 01:08:52,960
error is avoided

1892
01:08:52,960 --> 01:08:55,359
um moving on from the sessions interface

1893
01:08:55,359 --> 01:08:58,560
uh we're gonna go to archimedes spy view

1894
01:08:58,560 --> 01:09:00,479
spy stands for session profile

1895
01:09:00,479 --> 01:09:03,679
information and the spy view provides a

1896
01:09:03,679 --> 01:09:06,799
quick and easy to use interface for

1897
01:09:06,799 --> 01:09:09,679
exploring session or log metrics

1898
01:09:09,679 --> 01:09:11,920
basically what the spy view page does is

1899
01:09:11,920 --> 01:09:14,640
list categories for general session

1900
01:09:14,640 --> 01:09:17,359
metrics like protocol source and

1901
01:09:17,359 --> 01:09:19,439
nation ip addresses source and

1902
01:09:19,439 --> 01:09:21,359
destination ports

1903
01:09:21,359 --> 01:09:23,359
and also like all of the various

1904
01:09:23,359 --> 01:09:24,960
different network protocols that are

1905
01:09:24,960 --> 01:09:27,679
understood by archimean zeke so whether

1906
01:09:27,679 --> 01:09:32,080
it's http or snmp or bacnet or whatever

1907
01:09:32,080 --> 01:09:34,238
these categories can be expanded and the

1908
01:09:34,238 --> 01:09:36,640
top n values displayed for whatever

1909
01:09:36,640 --> 01:09:39,359
field of interest

1910
01:09:39,359 --> 01:09:41,839
exists there including that field's

1911
01:09:41,839 --> 01:09:44,080
values cardinality

1912
01:09:44,080 --> 01:09:46,080
in other words it's a it's a good like

1913
01:09:46,080 --> 01:09:49,920
top talkers top n whatever um

1914
01:09:49,920 --> 01:09:52,158
display of of any field of interest for

1915
01:09:52,158 --> 01:09:52,880
you

1916
01:09:52,880 --> 01:09:56,880
in uh in malcolm's logs and between

1917
01:09:56,880 --> 01:09:59,199
arcme and zeke

1918
01:09:59,199 --> 01:10:03,440
data sources malcolm's list of um

1919
01:10:03,440 --> 01:10:05,120
of fields that are available for you to

1920
01:10:05,120 --> 01:10:07,040
check out here in the spy view is is

1921
01:10:07,040 --> 01:10:08,640
over 1300

1922
01:10:08,640 --> 01:10:10,320
different fields across all these

1923
01:10:10,320 --> 01:10:12,400
different kinds of network traffic

1924
01:10:12,400 --> 01:10:14,480
so click on the plus icon to the right

1925
01:10:14,480 --> 01:10:16,480
of a category to expand it

1926
01:10:16,480 --> 01:10:18,719
and the values for specific fields are

1927
01:10:18,719 --> 01:10:21,120
displayed by by clicking that fields

1928
01:10:21,120 --> 01:10:22,400
description in the fields list

1929
01:10:22,400 --> 01:10:24,480
underneath the category name

1930
01:10:24,480 --> 01:10:26,159
that list of fields can be filtered by

1931
01:10:26,159 --> 01:10:28,640
typing part of the field name in the

1932
01:10:28,640 --> 01:10:31,280
search for fields dialogs to display

1933
01:10:31,280 --> 01:10:34,480
uh in this category text input

1934
01:10:34,480 --> 01:10:35,440
um

1935
01:10:35,440 --> 01:10:38,159
the the load all and unload all buttons

1936
01:10:38,159 --> 01:10:40,880
can be used to to just like

1937
01:10:40,880 --> 01:10:42,719
bring forward everything that it knows

1938
01:10:42,719 --> 01:10:45,520
about that protocol at once um but you

1939
01:10:45,520 --> 01:10:46,880
may want to be careful with this as it

1940
01:10:46,880 --> 01:10:49,040
is going to run a lot of queries and and

1941
01:10:49,040 --> 01:10:50,719
it might take a while so

1942
01:10:50,719 --> 01:10:52,480
you know if if you know you actually

1943
01:10:52,480 --> 01:10:54,239
want to see everything yeah go ahead and

1944
01:10:54,239 --> 01:10:57,360
smash that load all button but um

1945
01:10:57,360 --> 01:10:59,360
it it might you know end up giving you

1946
01:10:59,360 --> 01:11:00,960
more data than you really want depending

1947
01:11:00,960 --> 01:11:03,040
on on what your interests are

1948
01:11:03,040 --> 01:11:05,440
uh once displayed a field's name or one

1949
01:11:05,440 --> 01:11:07,120
of its values can be clicked on to

1950
01:11:07,120 --> 01:11:09,920
provide further actions for filtering or

1951
01:11:09,920 --> 01:11:12,719
displaying that field or its values so

1952
01:11:12,719 --> 01:11:15,040
of a particular interest might be the

1953
01:11:15,040 --> 01:11:16,800
open field name

1954
01:11:16,800 --> 01:11:18,800
spygraph option when clicking on a

1955
01:11:18,800 --> 01:11:20,880
field's name or pivoting to another

1956
01:11:20,880 --> 01:11:24,400
sessions tab with that field filtered

1957
01:11:24,400 --> 01:11:26,480
that will open a new tab with the

1958
01:11:26,480 --> 01:11:28,400
spygraph populated or the sessions

1959
01:11:28,400 --> 01:11:29,920
populated with that filter already

1960
01:11:29,920 --> 01:11:32,320
applied

1961
01:11:32,560 --> 01:11:35,840
note that because the spy view group

1962
01:11:35,840 --> 01:11:36,719
page

1963
01:11:36,719 --> 01:11:39,280
can potentially run many queries spy

1964
01:11:39,280 --> 01:11:42,000
view limits the search domain to seven

1965
01:11:42,000 --> 01:11:44,560
days or in other words seven indices as

1966
01:11:44,560 --> 01:11:47,040
each index represents one day's worth of

1967
01:11:47,040 --> 01:11:49,840
data in malcolm so when using spy view

1968
01:11:49,840 --> 01:11:51,920
basically that means you need to limit

1969
01:11:51,920 --> 01:11:54,080
your search time frame to less than or

1970
01:11:54,080 --> 01:11:56,320
equal to seven days before you flip over

1971
01:11:56,320 --> 01:11:58,560
this tab or or it'll

1972
01:11:58,560 --> 01:11:59,840
complain at you

1973
01:11:59,840 --> 01:12:02,400
for doing that

1974
01:12:02,640 --> 01:12:05,120
spy graph is is another really cool way

1975
01:12:05,120 --> 01:12:06,560
to visualize

1976
01:12:06,560 --> 01:12:10,000
the top n field values of a particular

1977
01:12:10,000 --> 01:12:11,360
um field

1978
01:12:11,360 --> 01:12:13,679
both chronologically and geographically

1979
01:12:13,679 --> 01:12:15,760
um so spygraph session profile

1980
01:12:15,760 --> 01:12:17,760
information graph visualizes the

1981
01:12:17,760 --> 01:12:20,159
occurrence of of whatever fields values

1982
01:12:20,159 --> 01:12:22,320
over time

1983
01:12:22,320 --> 01:12:24,719
and and for me that's particularly

1984
01:12:24,719 --> 01:12:26,400
useful because it helps me identify

1985
01:12:26,400 --> 01:12:27,840
trends in a particular type of

1986
01:12:27,840 --> 01:12:29,040
communication

1987
01:12:29,040 --> 01:12:30,480
over time

1988
01:12:30,480 --> 01:12:32,880
when i'm looking at uh

1989
01:12:32,880 --> 01:12:35,199
just kind of the conglomeration of all

1990
01:12:35,199 --> 01:12:37,440
of the traffic over the date histogram

1991
01:12:37,440 --> 01:12:38,960
they're up at the very top

1992
01:12:38,960 --> 01:12:41,199
it's hard it's hard to pick out patterns

1993
01:12:41,199 --> 01:12:43,199
for a particular protocol or a

1994
01:12:43,199 --> 01:12:44,480
particular

1995
01:12:44,480 --> 01:12:47,360
ip address or user agent

1996
01:12:47,360 --> 01:12:48,480
so

1997
01:12:48,480 --> 01:12:50,719
traffic for example using protocol as an

1998
01:12:50,719 --> 01:12:52,560
example traffic using a particular

1999
01:12:52,560 --> 01:12:55,280
protocol when seen sparsely at regular

2000
01:12:55,280 --> 01:12:57,120
intervals on that protocol's date

2001
01:12:57,120 --> 01:12:59,600
histogram in the spygraph could indicate

2002
01:12:59,600 --> 01:13:02,080
you know a connection check or polling

2003
01:13:02,080 --> 01:13:04,400
or beaconing

2004
01:13:04,400 --> 01:13:05,280
and

2005
01:13:05,280 --> 01:13:07,440
having it split out by protocol by value

2006
01:13:07,440 --> 01:13:08,640
like that

2007
01:13:08,640 --> 01:13:10,239
is very useful

2008
01:13:10,239 --> 01:13:11,679
but it doesn't have to be protocol it

2009
01:13:11,679 --> 01:13:13,840
can be any of those 1300 fields that

2010
01:13:13,840 --> 01:13:16,159
malcolm knows about you can set as kind

2011
01:13:16,159 --> 01:13:18,880
of that pivot value for the spy graph to

2012
01:13:18,880 --> 01:13:21,440
to split out those top n values and show

2013
01:13:21,440 --> 01:13:23,679
you chronologically and geographically

2014
01:13:23,679 --> 01:13:25,520
where those took place

2015
01:13:25,520 --> 01:13:27,199
controls can be found underneath the

2016
01:13:27,199 --> 01:13:28,880
time bounding controls for selecting

2017
01:13:28,880 --> 01:13:30,640
that field of interest

2018
01:13:30,640 --> 01:13:32,159
for the number of elements that you want

2019
01:13:32,159 --> 01:13:34,800
to be displayed for the sort order and

2020
01:13:34,800 --> 01:13:36,960
for if you want to periodically refresh

2021
01:13:36,960 --> 01:13:39,679
that data view or not

2022
01:13:39,679 --> 01:13:41,120
uh one of my

2023
01:13:41,120 --> 01:13:43,679
favorite ones to play around with is the

2024
01:13:43,679 --> 01:13:46,880
connections view um but also just from

2025
01:13:46,880 --> 01:13:48,880
being cool it is very useful the

2026
01:13:48,880 --> 01:13:50,880
connections view presents network

2027
01:13:50,880 --> 01:13:53,120
communications via a force directed

2028
01:13:53,120 --> 01:13:55,840
graph so it makes it easy to visualize

2029
01:13:55,840 --> 01:13:59,280
logical connections between

2030
01:13:59,280 --> 01:14:00,880
these logical relationships between

2031
01:14:00,880 --> 01:14:03,440
network hosts or between

2032
01:14:03,440 --> 01:14:05,840
uh subnets or between

2033
01:14:05,840 --> 01:14:08,400
you know again any fields any of these

2034
01:14:08,400 --> 01:14:11,440
1300 different data points that we have

2035
01:14:11,440 --> 01:14:12,800
you can visualize kind of how the

2036
01:14:12,800 --> 01:14:14,239
traffic goes between source and

2037
01:14:14,239 --> 01:14:15,520
destination

2038
01:14:15,520 --> 01:14:17,840
based on that field values

2039
01:14:17,840 --> 01:14:19,920
controls are available for specifying

2040
01:14:19,920 --> 01:14:22,239
the query size

2041
01:14:22,239 --> 01:14:22,960
so

2042
01:14:22,960 --> 01:14:25,199
this again can run a lot of queries and

2043
01:14:25,199 --> 01:14:26,320
so

2044
01:14:26,320 --> 01:14:28,960
by default like with the query size set

2045
01:14:28,960 --> 01:14:31,280
to to small which is like 100 i think is

2046
01:14:31,280 --> 01:14:32,400
the default

2047
01:14:32,400 --> 01:14:33,440
um

2048
01:14:33,440 --> 01:14:34,159
you

2049
01:14:34,159 --> 01:14:36,480
it'll run faster but you actually may

2050
01:14:36,480 --> 01:14:38,960
not be getting all of your data right

2051
01:14:38,960 --> 01:14:40,000
so

2052
01:14:40,000 --> 01:14:41,760
what i like to do is set up my other

2053
01:14:41,760 --> 01:14:43,760
filters and get everything kind of the

2054
01:14:43,760 --> 01:14:46,159
way i want it with my my query size set

2055
01:14:46,159 --> 01:14:48,000
to small and then once i've got it all

2056
01:14:48,000 --> 01:14:49,840
set the way i want it with my filters

2057
01:14:49,840 --> 01:14:51,920
and my views and like the source and

2058
01:14:51,920 --> 01:14:53,520
destination nodes set to the fields that

2059
01:14:53,520 --> 01:14:55,760
i'm interested in then i will increase

2060
01:14:55,760 --> 01:14:57,280
the query size

2061
01:14:57,280 --> 01:14:59,760
uh to like the max value so i can you

2062
01:14:59,760 --> 01:15:01,600
know see everything

2063
01:15:01,600 --> 01:15:03,760
that i'm interested in there

2064
01:15:03,760 --> 01:15:05,199
but that will take longer to execute

2065
01:15:05,199 --> 01:15:06,480
right

2066
01:15:06,480 --> 01:15:08,640
so you can select the query size you can

2067
01:15:08,640 --> 01:15:10,560
select which fields to use as the source

2068
01:15:10,560 --> 01:15:12,800
and destination for node values

2069
01:15:12,800 --> 01:15:15,040
you can set a minimum connection

2070
01:15:15,040 --> 01:15:16,640
threshold

2071
01:15:16,640 --> 01:15:18,480
the method for determining the weight or

2072
01:15:18,480 --> 01:15:20,320
the thickness of that line between the

2073
01:15:20,320 --> 01:15:22,239
nodes and and the size of the nodes

2074
01:15:22,239 --> 01:15:23,760
themselves

2075
01:15:23,760 --> 01:15:25,280
as is the case with pretty much every

2076
01:15:25,280 --> 01:15:27,199
other visualization in archime that

2077
01:15:27,199 --> 01:15:29,120
graph is interactive so by clicking on a

2078
01:15:29,120 --> 01:15:31,199
node or clicking a link between two

2079
01:15:31,199 --> 01:15:34,159
nodes you can you can apply or modify

2080
01:15:34,159 --> 01:15:35,199
filters

2081
01:15:35,199 --> 01:15:36,239
you can

2082
01:15:36,239 --> 01:15:37,760
reposition the notes themselves by

2083
01:15:37,760 --> 01:15:39,440
dragging and dropping them

2084
01:15:39,440 --> 01:15:40,800
um

2085
01:15:40,800 --> 01:15:42,719
a note's color indicates whether it's

2086
01:15:42,719 --> 01:15:45,040
communicated as a

2087
01:15:45,040 --> 01:15:47,120
source or a destination an originator

2088
01:15:47,120 --> 01:15:50,960
responder or or both

2089
01:15:50,960 --> 01:15:53,440
so while the default is uh source and

2090
01:15:53,440 --> 01:15:56,159
destination ip for those fields

2091
01:15:56,159 --> 01:15:58,640
um the connections view is able to use

2092
01:15:58,640 --> 01:16:00,400
any combination of any of the fields

2093
01:16:00,400 --> 01:16:02,560
that archime knows about so some that i

2094
01:16:02,560 --> 01:16:05,920
have found interesting or useful before

2095
01:16:05,920 --> 01:16:09,040
selecting source oui and desto ui to

2096
01:16:09,040 --> 01:16:10,880
view which

2097
01:16:10,880 --> 01:16:12,239
devices from which hardware

2098
01:16:12,239 --> 01:16:15,679
manufacturers are speaking to each other

2099
01:16:15,679 --> 01:16:19,120
source ip to protocol can be

2100
01:16:19,120 --> 01:16:21,280
a good way of visualizing

2101
01:16:21,280 --> 01:16:23,440
what hosts are communicating to what

2102
01:16:23,440 --> 01:16:26,080
servers out there based on the services

2103
01:16:26,080 --> 01:16:27,440
that they provide

2104
01:16:27,440 --> 01:16:29,520
maybe originating network segment and

2105
01:16:29,520 --> 01:16:31,199
responding network segment if we

2106
01:16:31,199 --> 01:16:33,520
populated our network segments at the

2107
01:16:33,520 --> 01:16:35,120
very very beginning before we even

2108
01:16:35,120 --> 01:16:38,159
created our pcap file in that define

2109
01:16:38,159 --> 01:16:40,719
network host and subnet name

2110
01:16:40,719 --> 01:16:42,719
interface

2111
01:16:42,719 --> 01:16:44,400
maybe originating

2112
01:16:44,400 --> 01:16:47,679
goip city and responding city could

2113
01:16:47,679 --> 01:16:49,840
be interesting to see where my source

2114
01:16:49,840 --> 01:16:52,159
and destination traffic is is going out

2115
01:16:52,159 --> 01:16:54,320
to on the internet so any of the

2116
01:16:54,320 --> 01:16:56,159
combination of these or other fields can

2117
01:16:56,159 --> 01:16:58,400
be used to specify that source node and

2118
01:16:58,400 --> 01:17:01,360
destination node in the connections view

2119
01:17:01,360 --> 01:17:03,040
another cool recent addition to this

2120
01:17:03,040 --> 01:17:03,920
feature

2121
01:17:03,920 --> 01:17:06,000
and one that actually we developed here

2122
01:17:06,000 --> 01:17:08,960
at the inl and then contributed back

2123
01:17:08,960 --> 01:17:11,120
upstream to archime

2124
01:17:11,120 --> 01:17:13,679
was the ability to specify a baseline

2125
01:17:13,679 --> 01:17:15,840
time frame in the connections view and

2126
01:17:15,840 --> 01:17:18,159
then visualize use that baseline to

2127
01:17:18,159 --> 01:17:21,199
visualize changes to a network over time

2128
01:17:21,199 --> 01:17:23,440
in other words you know new hosts or

2129
01:17:23,440 --> 01:17:25,520
protocols that appear to my network this

2130
01:17:25,520 --> 01:17:28,560
week that didn't exist last week

2131
01:17:28,560 --> 01:17:30,239
this feature is mainly useful if you

2132
01:17:30,239 --> 01:17:32,080
have prior long-term packet captures

2133
01:17:32,080 --> 01:17:34,000
available in order to establish that

2134
01:17:34,000 --> 01:17:36,159
baseline right in order to define what

2135
01:17:36,159 --> 01:17:38,480
my previous time frame is versus what my

2136
01:17:38,480 --> 01:17:40,560
current time frame is so that you can do

2137
01:17:40,560 --> 01:17:42,880
that comparison

2138
01:17:42,880 --> 01:17:44,960
another really cool feature of archime

2139
01:17:44,960 --> 01:17:47,840
uh that allows you to um

2140
01:17:47,840 --> 01:17:50,480
to get access to the payload data and

2141
01:17:50,480 --> 01:17:53,040
actually search the packets themselves

2142
01:17:53,040 --> 01:17:55,120
versus just the session metadata is the

2143
01:17:55,120 --> 01:17:56,719
hunt feature

2144
01:17:56,719 --> 01:17:58,400
you can kind of think of this as like a

2145
01:17:58,400 --> 01:18:01,840
a pcap grep um the the search string

2146
01:18:01,840 --> 01:18:03,840
that you specify for the hunt filter can

2147
01:18:03,840 --> 01:18:05,840
be specified with ascii

2148
01:18:05,840 --> 01:18:09,280
uh with or without case sensitivity uh

2149
01:18:09,280 --> 01:18:12,320
hex codes regular expressions and

2150
01:18:12,320 --> 01:18:14,880
basically you you create this

2151
01:18:14,880 --> 01:18:17,199
packet search job on the hunt page with

2152
01:18:17,199 --> 01:18:19,520
the filters and the other parameters

2153
01:18:19,520 --> 01:18:21,199
that you're interested in to limit that

2154
01:18:21,199 --> 01:18:23,199
search um

2155
01:18:23,199 --> 01:18:24,480
scope

2156
01:18:24,480 --> 01:18:26,880
to make that packet search go a little

2157
01:18:26,880 --> 01:18:29,760
bit faster um and then once that hunt

2158
01:18:29,760 --> 01:18:31,199
job is complete it runs in the

2159
01:18:31,199 --> 01:18:32,960
background but once it's complete it

2160
01:18:32,960 --> 01:18:35,440
tags matching sessions with that hunt id

2161
01:18:35,440 --> 01:18:37,600
and you can go view the sessions or the

2162
01:18:37,600 --> 01:18:40,239
matching uh payloads in the sessions

2163
01:18:40,239 --> 01:18:41,280
view

2164
01:18:41,280 --> 01:18:42,640
um

2165
01:18:42,640 --> 01:18:43,440
so

2166
01:18:43,440 --> 01:18:46,159
note that whatever filters you specify

2167
01:18:46,159 --> 01:18:47,920
in the

2168
01:18:47,920 --> 01:18:51,040
search bar when that

2169
01:18:51,040 --> 01:18:53,280
hunt bar when that hunt job is created

2170
01:18:53,280 --> 01:18:56,000
will also apply to the hunt job as well

2171
01:18:56,000 --> 01:18:58,080
so if i'm over on the sessions view and

2172
01:18:58,080 --> 01:19:00,800
i've got a filter in the query bar and i

2173
01:19:00,800 --> 01:19:03,040
switch over to the hunt view those those

2174
01:19:03,040 --> 01:19:04,880
filters

2175
01:19:04,880 --> 01:19:07,360
limit the search of packets the search

2176
01:19:07,360 --> 01:19:09,360
of the scope of the packets the scope of

2177
01:19:09,360 --> 01:19:10,960
the search of the packets that i'm

2178
01:19:10,960 --> 01:19:14,320
looking at in that hunt job

2179
01:19:14,480 --> 01:19:16,640
and and so pay close attention to that

2180
01:19:16,640 --> 01:19:18,880
um there's a little little like

2181
01:19:18,880 --> 01:19:21,040
information icon that says creating a

2182
01:19:21,040 --> 01:19:22,880
new packet search job will search the

2183
01:19:22,880 --> 01:19:24,320
packets of

2184
01:19:24,320 --> 01:19:26,239
1 million sessions or whatever that

2185
01:19:26,239 --> 01:19:28,000
number is just be aware of what that

2186
01:19:28,000 --> 01:19:30,480
number is because um your

2187
01:19:30,480 --> 01:19:33,679
your search your hunts execution time

2188
01:19:33,679 --> 01:19:35,520
will be directly related to how many

2189
01:19:35,520 --> 01:19:38,880
packets it needs to go out and look in

2190
01:19:38,880 --> 01:19:40,480
note that the hunt view is only

2191
01:19:40,480 --> 01:19:42,560
available for sessions created from full

2192
01:19:42,560 --> 01:19:45,120
packet capture data not z-clogs in other

2193
01:19:45,120 --> 01:19:47,040
words archimedes sessions only not

2194
01:19:47,040 --> 01:19:48,239
z-clogs

2195
01:19:48,239 --> 01:19:51,120
so it's a good idea again here to apply

2196
01:19:51,120 --> 01:19:53,520
the to click that eyeball icon click the

2197
01:19:53,520 --> 01:19:56,640
view eyeball and select the pcap files

2198
01:19:56,640 --> 01:19:59,440
view to exclude z clogs from your

2199
01:19:59,440 --> 01:20:02,080
candidate sessions um prior to using the

2200
01:20:02,080 --> 01:20:05,320
hunt feature

2201
01:20:06,159 --> 01:20:07,920
a couple of notes

2202
01:20:07,920 --> 01:20:08,800
on

2203
01:20:08,800 --> 01:20:11,520
correlating data sources between the

2204
01:20:11,520 --> 01:20:13,280
archime and

2205
01:20:13,280 --> 01:20:14,800
zeek

2206
01:20:14,800 --> 01:20:17,440
data sources

2207
01:20:17,440 --> 01:20:18,800
note that

2208
01:20:18,800 --> 01:20:20,080
because these are different tools

2209
01:20:20,080 --> 01:20:22,480
developed by different organizations for

2210
01:20:22,480 --> 01:20:24,480
different purposes

2211
01:20:24,480 --> 01:20:27,280
the search syntax between archime and

2212
01:20:27,280 --> 01:20:29,679
cabana is different right malcolm is

2213
01:20:29,679 --> 01:20:31,440
utilizing both of these open source

2214
01:20:31,440 --> 01:20:34,159
tools together but um

2215
01:20:34,159 --> 01:20:36,480
you know in some cases the

2216
01:20:36,480 --> 01:20:38,719
in in all cases really the search syntax

2217
01:20:38,719 --> 01:20:39,920
will be a little bit different between

2218
01:20:39,920 --> 01:20:42,000
archiving and kibana and in some cases

2219
01:20:42,000 --> 01:20:43,440
the field names themselves will be a

2220
01:20:43,440 --> 01:20:44,639
little different

2221
01:20:44,639 --> 01:20:46,719
so um

2222
01:20:46,719 --> 01:20:48,320
you know refer to that documentation

2223
01:20:48,320 --> 01:20:49,679
refer to that table that we showed you

2224
01:20:49,679 --> 01:20:53,120
earlier uh to to compare like how do i

2225
01:20:53,120 --> 01:20:54,560
write a query that

2226
01:20:54,560 --> 01:20:57,679
um searches an ip address based on its

2227
01:20:57,679 --> 01:21:00,560
presence in a subnet uh you know or for

2228
01:21:00,560 --> 01:21:02,560
sessions that that include that subnet

2229
01:21:02,560 --> 01:21:04,639
or for how do i do a regular expression

2230
01:21:04,639 --> 01:21:05,679
or whatever

2231
01:21:05,679 --> 01:21:07,040
because it won't necessarily be the same

2232
01:21:07,040 --> 01:21:09,760
in our community versus cabana

2233
01:21:09,760 --> 01:21:11,840
um

2234
01:21:11,840 --> 01:21:13,840
the as i mentioned archimede uses its

2235
01:21:13,840 --> 01:21:16,080
own field names in its user interface

2236
01:21:16,080 --> 01:21:18,639
for example in archime you would search

2237
01:21:18,639 --> 01:21:21,679
protocols equals equals http

2238
01:21:21,679 --> 01:21:23,120
but in kibana the equivalent search

2239
01:21:23,120 --> 01:21:26,239
would be protocol colon http

2240
01:21:26,239 --> 01:21:28,800
so going to archimese help

2241
01:21:28,800 --> 01:21:30,400
which is the click on the owl icon in

2242
01:21:30,400 --> 01:21:32,560
the upper left hand corner and then go

2243
01:21:32,560 --> 01:21:35,040
down to the fields section which is at

2244
01:21:35,040 --> 01:21:37,440
the bottom of that help page and click

2245
01:21:37,440 --> 01:21:40,239
uh database display display database

2246
01:21:40,239 --> 01:21:43,199
fields can help you map what archimedes

2247
01:21:43,199 --> 01:21:45,920
field names are to uh what the

2248
01:21:45,920 --> 01:21:48,239
underlying database field names are that

2249
01:21:48,239 --> 01:21:51,840
the um that the z clogs might use

2250
01:21:51,840 --> 01:21:54,159
as much as possible during ingestion we

2251
01:21:54,159 --> 01:21:57,600
do try to map those arcane fields to

2252
01:21:57,600 --> 01:21:59,120
sorry the zeke logs to their

2253
01:21:59,120 --> 01:22:01,840
corresponding arcane fields um

2254
01:22:01,840 --> 01:22:04,239
but uh but it might help to know like if

2255
01:22:04,239 --> 01:22:06,320
i'm jumping from arkham over to kibana

2256
01:22:06,320 --> 01:22:07,679
and i want to know what fields it was

2257
01:22:07,679 --> 01:22:09,360
actually searching when i was in archime

2258
01:22:09,360 --> 01:22:11,280
you may need to do some manual

2259
01:22:11,280 --> 01:22:14,080
mental mapping of the arcane field names

2260
01:22:14,080 --> 01:22:17,840
to the underlying database field names

2261
01:22:17,840 --> 01:22:19,520
also you know despite considerable

2262
01:22:19,520 --> 01:22:21,840
overlap especially for common protocols

2263
01:22:21,840 --> 01:22:23,840
there are differences in protocol parser

2264
01:22:23,840 --> 01:22:25,840
support between zika and archimede

2265
01:22:25,840 --> 01:22:29,120
notably malcolm's configuration of zeek

2266
01:22:29,120 --> 01:22:32,239
parses a lot more ics protocols than

2267
01:22:32,239 --> 01:22:34,639
than archemy does because that's one of

2268
01:22:34,639 --> 01:22:37,199
the main focuses of this project

2269
01:22:37,199 --> 01:22:38,880
so we've looked at these two different

2270
01:22:38,880 --> 01:22:42,320
interfaces to uh to analyze that same

2271
01:22:42,320 --> 01:22:44,880
underlying um

2272
01:22:44,880 --> 01:22:47,040
the session metadata from our network

2273
01:22:47,040 --> 01:22:48,239
traffic

2274
01:22:48,239 --> 01:22:50,960
we've taken this one p cap and archime

2275
01:22:50,960 --> 01:22:53,360
has generated its session records and

2276
01:22:53,360 --> 01:22:56,080
zeke has generated its logs

2277
01:22:56,080 --> 01:22:58,159
and um

2278
01:22:58,159 --> 01:23:00,159
how can we correlate the two how can we

2279
01:23:00,159 --> 01:23:02,400
how can we bring them together and and

2280
01:23:02,400 --> 01:23:04,639
see like this get the strengths of both

2281
01:23:04,639 --> 01:23:07,280
tools right get the information about

2282
01:23:07,280 --> 01:23:08,480
the

2283
01:23:08,480 --> 01:23:09,920
protocols and stuff that our community

2284
01:23:09,920 --> 01:23:12,400
maybe doesn't have support for

2285
01:23:12,400 --> 01:23:14,400
from our ziklogs but then at the same

2286
01:23:14,400 --> 01:23:16,080
time be able to see the archimedes

2287
01:23:16,080 --> 01:23:17,199
sessions

2288
01:23:17,199 --> 01:23:19,600
that correspond to those

2289
01:23:19,600 --> 01:23:21,120
events of interest or whatever they are

2290
01:23:21,120 --> 01:23:23,120
from the z clogs so that we can get down

2291
01:23:23,120 --> 01:23:25,600
if we want to and see the payload and

2292
01:23:25,600 --> 01:23:28,960
and do analysis uh kind of at that level

2293
01:23:28,960 --> 01:23:31,199
um so as i mentioned just in in the

2294
01:23:31,199 --> 01:23:33,440
previous topic like

2295
01:23:33,440 --> 01:23:35,199
one of the things that

2296
01:23:35,199 --> 01:23:37,280
that malcolm does to try to facilitate

2297
01:23:37,280 --> 01:23:38,880
this is it maps

2298
01:23:38,880 --> 01:23:40,719
wherever possible

2299
01:23:40,719 --> 01:23:41,679
zeke

2300
01:23:41,679 --> 01:23:44,800
fields to corresponding archime fields

2301
01:23:44,800 --> 01:23:46,800
in the database schema

2302
01:23:46,800 --> 01:23:49,280
but then for any protocols or fields

2303
01:23:49,280 --> 01:23:51,679
where um

2304
01:23:51,679 --> 01:23:53,120
where archimede doesn't already have

2305
01:23:53,120 --> 01:23:54,400
native support

2306
01:23:54,400 --> 01:23:57,760
malcolm creates a native uh

2307
01:23:57,760 --> 01:24:00,639
database uh a native data source type i

2308
01:24:00,639 --> 01:24:02,719
guess for that kind of zika log

2309
01:24:02,719 --> 01:24:04,480
for all these other z clock values for

2310
01:24:04,480 --> 01:24:06,320
which there's not currently

2311
01:24:06,320 --> 01:24:09,280
support or an equivalent in archime

2312
01:24:09,280 --> 01:24:11,280
the fields section of archimese help

2313
01:24:11,280 --> 01:24:13,120
which i referenced a few minutes ago can

2314
01:24:13,120 --> 01:24:14,880
provide a list of all of those known

2315
01:24:14,880 --> 01:24:17,199
fields across both the arcame and the

2316
01:24:17,199 --> 01:24:19,360
zeke data sources

2317
01:24:19,360 --> 01:24:21,280
so in this way when full packet capture

2318
01:24:21,280 --> 01:24:23,040
is an option

2319
01:24:23,040 --> 01:24:25,360
analysis of pcap files can be enhanced

2320
01:24:25,360 --> 01:24:27,040
by the additional

2321
01:24:27,040 --> 01:24:28,960
information zeke provides

2322
01:24:28,960 --> 01:24:30,800
why i say when pcap

2323
01:24:30,800 --> 01:24:33,360
full packet capture is an option um you

2324
01:24:33,360 --> 01:24:35,440
know there may be cases where for

2325
01:24:35,440 --> 01:24:36,880
whatever reason whether it's size

2326
01:24:36,880 --> 01:24:39,440
constraints or um

2327
01:24:39,440 --> 01:24:41,040
uh you know

2328
01:24:41,040 --> 01:24:43,280
sensitivity of the information like you

2329
01:24:43,280 --> 01:24:45,760
may be able to to capture z-clogs just

2330
01:24:45,760 --> 01:24:48,080
see clogs and actually not store the

2331
01:24:48,080 --> 01:24:49,840
full pcap so

2332
01:24:49,840 --> 01:24:52,159
in that case malcolm can still be used

2333
01:24:52,159 --> 01:24:53,600
in both the archimede and the cabana

2334
01:24:53,600 --> 01:24:55,520
interfaces but when you have the full

2335
01:24:55,520 --> 01:24:58,560
packet capture available to you um

2336
01:24:58,560 --> 01:25:00,639
you you are able to

2337
01:25:00,639 --> 01:25:01,920
you know

2338
01:25:01,920 --> 01:25:04,560
enhance that full capture beyond just

2339
01:25:04,560 --> 01:25:06,480
what the arcane sessions giving you with

2340
01:25:06,480 --> 01:25:08,480
with the z clogs as well versus the z

2341
01:25:08,480 --> 01:25:10,480
clocks just being alone

2342
01:25:10,480 --> 01:25:11,679
the value

2343
01:25:11,679 --> 01:25:13,040
the values of the records that are

2344
01:25:13,040 --> 01:25:15,440
created from zeke logs can be expanded

2345
01:25:15,440 --> 01:25:16,800
and viewed

2346
01:25:16,800 --> 01:25:18,880
like any native arcane session by

2347
01:25:18,880 --> 01:25:20,639
clicking that plus icon to the left of

2348
01:25:20,639 --> 01:25:22,159
the record in the sessions view just as

2349
01:25:22,159 --> 01:25:24,000
we showed you when we were talking about

2350
01:25:24,000 --> 01:25:25,360
the sessions view

2351
01:25:25,360 --> 01:25:26,960
however note that when when you deal

2352
01:25:26,960 --> 01:25:28,880
with those zeke logs

2353
01:25:28,880 --> 01:25:32,480
uh the zeek records the full payload

2354
01:25:32,480 --> 01:25:34,159
that section on the packet payload

2355
01:25:34,159 --> 01:25:36,000
doesn't exist right because the pack

2356
01:25:36,000 --> 01:25:37,920
contents aren't available

2357
01:25:37,920 --> 01:25:39,760
so the buttons that deal with viewing

2358
01:25:39,760 --> 01:25:42,480
and exporting pcap information

2359
01:25:42,480 --> 01:25:44,800
like don't behave the same they don't do

2360
01:25:44,800 --> 01:25:46,480
anything basically as they would for

2361
01:25:46,480 --> 01:25:48,560
records with pcap files

2362
01:25:48,560 --> 01:25:50,239
other than that though zeke records and

2363
01:25:50,239 --> 01:25:52,239
their values are usable in malcolm just

2364
01:25:52,239 --> 01:25:54,719
like their native archimedes session

2365
01:25:54,719 --> 01:25:56,560
counterparts

2366
01:25:56,560 --> 01:25:59,360
a few fields of particular mention that

2367
01:25:59,360 --> 01:26:01,760
help limit returned results to those

2368
01:26:01,760 --> 01:26:02,960
ziklogs

2369
01:26:02,960 --> 01:26:05,280
and archimedes session records generated

2370
01:26:05,280 --> 01:26:07,360
from the name from the same network

2371
01:26:07,360 --> 01:26:08,400
connection

2372
01:26:08,400 --> 01:26:11,360
are community id and zeke's connection

2373
01:26:11,360 --> 01:26:13,120
uid we've mentioned both of those

2374
01:26:13,120 --> 01:26:14,000
earlier

2375
01:26:14,000 --> 01:26:16,880
and we can talk about how

2376
01:26:16,880 --> 01:26:21,040
let's talk about how we can use those to

2377
01:26:21,040 --> 01:26:22,639
to get kind of that full picture right

2378
01:26:22,639 --> 01:26:24,080
so so the example that we're talking

2379
01:26:24,080 --> 01:26:25,840
about here is something interesting

2380
01:26:25,840 --> 01:26:27,600
happened on my network

2381
01:26:27,600 --> 01:26:30,000
i want to see in one list

2382
01:26:30,000 --> 01:26:32,080
everything i know about it i want to see

2383
01:26:32,080 --> 01:26:34,239
all the z-clogs and i want to see the

2384
01:26:34,239 --> 01:26:36,000
arcane session or archimedes sessions

2385
01:26:36,000 --> 01:26:37,920
that corresponded it to it

2386
01:26:37,920 --> 01:26:39,600
there's kind of a hard way and an easy

2387
01:26:39,600 --> 01:26:41,840
way to um

2388
01:26:41,840 --> 01:26:44,400
to do that the hard way would be

2389
01:26:44,400 --> 01:26:46,000
you know find the logs that i'm

2390
01:26:46,000 --> 01:26:48,239
interested in or whatever in kibana

2391
01:26:48,239 --> 01:26:50,159
or or however i want to do it and then

2392
01:26:50,159 --> 01:26:51,679
like say okay

2393
01:26:51,679 --> 01:26:54,080
i've got this source ip and that desk ip

2394
01:26:54,080 --> 01:26:56,239
and this port and it happened at this

2395
01:26:56,239 --> 01:26:58,159
time and just kind of try to like hand

2396
01:26:58,159 --> 01:27:00,320
craft your filters to

2397
01:27:00,320 --> 01:27:01,760
to include everything you want but

2398
01:27:01,760 --> 01:27:03,280
nothing you don't want

2399
01:27:03,280 --> 01:27:05,280
and that's difficult to do but what we

2400
01:27:05,280 --> 01:27:07,679
can do is um we can use this z

2401
01:27:07,679 --> 01:27:08,880
connection

2402
01:27:08,880 --> 01:27:12,800
uid zeek.uid and that community id and

2403
01:27:12,800 --> 01:27:15,360
we can use that to kind of build a query

2404
01:27:15,360 --> 01:27:17,840
filter that includes everything that has

2405
01:27:17,840 --> 01:27:20,159
to do with that session across both zeek

2406
01:27:20,159 --> 01:27:22,320
logs and arcane sessions

2407
01:27:22,320 --> 01:27:24,719
community id is a specification for

2408
01:27:24,719 --> 01:27:26,239
standard flow hashing published by

2409
01:27:26,239 --> 01:27:28,560
corelight and the intent is to make it

2410
01:27:28,560 --> 01:27:31,199
easier to pivot from one data set like

2411
01:27:31,199 --> 01:27:33,440
archime sessions to another data set

2412
01:27:33,440 --> 01:27:36,480
like z con.log entries

2413
01:27:36,480 --> 01:27:39,600
in malcolm both archime and zeek

2414
01:27:39,600 --> 01:27:41,920
populate that community id value which

2415
01:27:41,920 --> 01:27:43,520
makes it possible to filter for a

2416
01:27:43,520 --> 01:27:45,600
specific network connection

2417
01:27:45,600 --> 01:27:48,320
and see both data sources results for

2418
01:27:48,320 --> 01:27:50,080
that connection

2419
01:27:50,080 --> 01:27:52,880
that zeke.uid is also mapped to another

2420
01:27:52,880 --> 01:27:55,840
archimede database field called uh

2421
01:27:55,840 --> 01:27:58,639
root id so you can use zeek.uid or root

2422
01:27:58,639 --> 01:28:01,280
id interchangeably that root id field is

2423
01:28:01,280 --> 01:28:03,440
used by archime to link session records

2424
01:28:03,440 --> 01:28:06,159
together when a particular session has

2425
01:28:06,159 --> 01:28:08,480
too many packets to be represented by a

2426
01:28:08,480 --> 01:28:11,040
single session when normalizing z clogs

2427
01:28:11,040 --> 01:28:12,960
to archime schema malcolm kind of

2428
01:28:12,960 --> 01:28:15,280
piggybacks or hijacks on root id and

2429
01:28:15,280 --> 01:28:16,800
stores that

2430
01:28:16,800 --> 01:28:19,520
connection uid to cross-reference uh

2431
01:28:19,520 --> 01:28:21,600
entries across z-clock types

2432
01:28:21,600 --> 01:28:22,719
so um

2433
01:28:22,719 --> 01:28:24,639
that that's interchangeable zeke.uid or

2434
01:28:24,639 --> 01:28:25,760
root id

2435
01:28:25,760 --> 01:28:26,560
so

2436
01:28:26,560 --> 01:28:28,800
the the cool pattern that i want to kind

2437
01:28:28,800 --> 01:28:31,280
of get across here in this example is

2438
01:28:31,280 --> 01:28:34,320
by filtering on the community id

2439
01:28:34,320 --> 01:28:38,239
ored with the zqid so community id

2440
01:28:38,239 --> 01:28:41,440
equals equals some horrible long string

2441
01:28:41,440 --> 01:28:43,440
or pipe pipe

2442
01:28:43,440 --> 01:28:46,000
root id equals equals some different

2443
01:28:46,000 --> 01:28:47,600
horrible long string that represents the

2444
01:28:47,600 --> 01:28:49,760
zqid

2445
01:28:49,760 --> 01:28:51,760
that will that will cast this tent which

2446
01:28:51,760 --> 01:28:54,320
will include both the archimedes

2447
01:28:54,320 --> 01:28:56,480
sessions and the z clogs

2448
01:28:56,480 --> 01:28:58,320
that are generated by this particular

2449
01:28:58,320 --> 01:28:59,920
network connection and you can see them

2450
01:28:59,920 --> 01:29:02,880
together in one place

2451
01:29:07,199 --> 01:29:08,800
one item that was

2452
01:29:08,800 --> 01:29:10,159
mentioned earlier but we didn't really

2453
01:29:10,159 --> 01:29:12,080
get into the details of how it works is

2454
01:29:12,080 --> 01:29:12,800
the

2455
01:29:12,800 --> 01:29:15,120
malcolm's ability to analyze files that

2456
01:29:15,120 --> 01:29:17,840
are carved from network traffic

2457
01:29:17,840 --> 01:29:20,719
as i did mention earlier as i referenced

2458
01:29:20,719 --> 01:29:23,280
this feature zeke can carve files from a

2459
01:29:23,280 --> 01:29:25,199
variety of protocols

2460
01:29:25,199 --> 01:29:27,760
in observed network traffic um

2461
01:29:27,760 --> 01:29:28,960
and then those files can actually be

2462
01:29:28,960 --> 01:29:31,440
extracted and stored temporarily locally

2463
01:29:31,440 --> 01:29:33,600
by malcolm for analysis

2464
01:29:33,600 --> 01:29:36,400
malcolm leverages that feature to submit

2465
01:29:36,400 --> 01:29:38,960
these carved files to a number of file

2466
01:29:38,960 --> 01:29:40,880
scanning tools

2467
01:29:40,880 --> 01:29:42,719
clam ev for example which is an open

2468
01:29:42,719 --> 01:29:44,639
source antivirus engine

2469
01:29:44,639 --> 01:29:46,320
can be used to scan for known malware

2470
01:29:46,320 --> 01:29:47,440
signatures

2471
01:29:47,440 --> 01:29:48,639
yara

2472
01:29:48,639 --> 01:29:52,159
the pattern matching swiss army knife

2473
01:29:52,159 --> 01:29:54,239
scans the files using a curated list of

2474
01:29:54,239 --> 01:29:56,320
security related signatures or your own

2475
01:29:56,320 --> 01:29:59,679
custom ers signatures that you can write

2476
01:29:59,679 --> 01:30:02,639
kappa which is a portable executable

2477
01:30:02,639 --> 01:30:04,639
capabilities analyzer

2478
01:30:04,639 --> 01:30:07,440
and virustotal an online database of

2479
01:30:07,440 --> 01:30:09,679
file hashes now to use virustool you do

2480
01:30:09,679 --> 01:30:12,560
have to specify your api token and you

2481
01:30:12,560 --> 01:30:13,679
would need to have an internet

2482
01:30:13,679 --> 01:30:16,639
connection for those um to be

2483
01:30:16,639 --> 01:30:18,400
submitted for those hashes to be looked

2484
01:30:18,400 --> 01:30:20,560
up so malcolm can be

2485
01:30:20,560 --> 01:30:22,639
configured to

2486
01:30:22,639 --> 01:30:23,520
there's a couple different other

2487
01:30:23,520 --> 01:30:25,280
configurations with the file scanning

2488
01:30:25,280 --> 01:30:27,520
behavior that you can set number one you

2489
01:30:27,520 --> 01:30:30,960
can set which kinds of files you

2490
01:30:30,960 --> 01:30:33,600
extract and scan to begin with

2491
01:30:33,600 --> 01:30:34,719
meaning

2492
01:30:34,719 --> 01:30:37,360
do i want to scan all files do i want to

2493
01:30:37,360 --> 01:30:38,400
scan

2494
01:30:38,400 --> 01:30:39,600
files

2495
01:30:39,600 --> 01:30:42,080
that are just of mime types that may be

2496
01:30:42,080 --> 01:30:45,040
of particular interest when it comes to

2497
01:30:45,040 --> 01:30:48,000
a security standpoint right things like

2498
01:30:48,000 --> 01:30:51,920
zip files or executable files or pdf

2499
01:30:51,920 --> 01:30:54,159
files that might be vectors for for

2500
01:30:54,159 --> 01:30:56,159
common known attacks

2501
01:30:56,159 --> 01:30:57,840
and then additionally to which file in

2502
01:30:57,840 --> 01:31:00,960
addition to which files we scan

2503
01:31:00,960 --> 01:31:02,719
we can specify

2504
01:31:02,719 --> 01:31:05,679
which files we want to preserve if any

2505
01:31:05,679 --> 01:31:07,679
in other words do i want to preserve all

2506
01:31:07,679 --> 01:31:09,600
files and and then to get stored in this

2507
01:31:09,600 --> 01:31:11,120
directory locally on the malcolm

2508
01:31:11,120 --> 01:31:12,080
instance

2509
01:31:12,080 --> 01:31:15,040
or do i want to only preserve files that

2510
01:31:15,040 --> 01:31:17,679
get hits from the scanning engines

2511
01:31:17,679 --> 01:31:19,840
that might be flagged as suspicious

2512
01:31:19,840 --> 01:31:21,440
or do i not want to preserve files at

2513
01:31:21,440 --> 01:31:23,199
all and then those files if they are

2514
01:31:23,199 --> 01:31:26,800
preserved can be downloaded from that

2515
01:31:26,800 --> 01:31:28,719
directory where they were preserved and

2516
01:31:28,719 --> 01:31:30,560
then you can do whatever further

2517
01:31:30,560 --> 01:31:32,400
examination you want on them whether

2518
01:31:32,400 --> 01:31:33,840
that's submitting them to other file

2519
01:31:33,840 --> 01:31:36,960
scanners or reverse engineering them

2520
01:31:36,960 --> 01:31:40,159
with with gidra or or ida pro or

2521
01:31:40,159 --> 01:31:41,600
whatever your

2522
01:31:41,600 --> 01:31:44,320
tool of choice is there

2523
01:31:44,320 --> 01:31:45,679
as the

2524
01:31:45,679 --> 01:31:47,360
files are scanned

2525
01:31:47,360 --> 01:31:49,280
if zeek file carving is enabled and

2526
01:31:49,280 --> 01:31:50,960
those scanners are turned on

2527
01:31:50,960 --> 01:31:53,199
questionable files will be written into

2528
01:31:53,199 --> 01:31:55,679
the signatures log and reported on the

2529
01:31:55,679 --> 01:31:59,120
signatures dashboard in kibana

2530
01:31:59,120 --> 01:32:00,880
the signatures dashboard will break it

2531
01:32:00,880 --> 01:32:02,880
down by the scanning engine and then

2532
01:32:02,880 --> 01:32:05,840
also the name of the signature

2533
01:32:05,840 --> 01:32:09,040
or rule that triggered on that file

2534
01:32:09,040 --> 01:32:12,480
the z connection uid zeek.uid and file

2535
01:32:12,480 --> 01:32:15,040
uid zeek.fuid

2536
01:32:15,040 --> 01:32:17,520
fields in these logs in the signatures

2537
01:32:17,520 --> 01:32:20,239
log can be used to cross reference to

2538
01:32:20,239 --> 01:32:22,320
other visualizations to provide the

2539
01:32:22,320 --> 01:32:24,239
context for how that file was

2540
01:32:24,239 --> 01:32:26,639
transferred so in other words you know

2541
01:32:26,639 --> 01:32:28,800
finding on the signatures page a

2542
01:32:28,800 --> 01:32:31,520
reference to a zeke.fund for a triggered

2543
01:32:31,520 --> 01:32:35,199
signature filtering on that zeke fu id

2544
01:32:35,199 --> 01:32:38,639
and then jumping over to the files.log

2545
01:32:38,639 --> 01:32:41,199
to see what what is it about this file

2546
01:32:41,199 --> 01:32:43,280
that i know how was it transferred how

2547
01:32:43,280 --> 01:32:45,760
big was it what other dashboards might

2548
01:32:45,760 --> 01:32:49,520
reference that file that sort of thing

2549
01:32:49,600 --> 01:32:53,199
just a few search tips before uh

2550
01:32:53,199 --> 01:32:56,480
before we close out here um

2551
01:32:56,480 --> 01:32:58,400
to effectively search in cabana and

2552
01:32:58,400 --> 01:33:00,719
archime um number one always check your

2553
01:33:00,719 --> 01:33:02,560
search time frame if you're not seeing

2554
01:33:02,560 --> 01:33:04,159
the data you're expecting to see often

2555
01:33:04,159 --> 01:33:06,159
it's because the data lies outside of

2556
01:33:06,159 --> 01:33:09,839
the window of time that you're searching

2557
01:33:10,719 --> 01:33:13,120
number two this effective technique for

2558
01:33:13,120 --> 01:33:15,600
investigating is is

2559
01:33:15,600 --> 01:33:16,719
zoom in

2560
01:33:16,719 --> 01:33:18,800
for example narrow in on a particular

2561
01:33:18,800 --> 01:33:20,560
type of file that's transferred or a

2562
01:33:20,560 --> 01:33:22,560
particular host

2563
01:33:22,560 --> 01:33:24,960
once you find something of interest

2564
01:33:24,960 --> 01:33:27,600
pivot to another field so

2565
01:33:27,600 --> 01:33:30,639
select the source ip address that was

2566
01:33:30,639 --> 01:33:32,800
the source of this file transfer

2567
01:33:32,800 --> 01:33:35,600
and then zoom back out by removing the

2568
01:33:35,600 --> 01:33:37,679
file type filter to see what other

2569
01:33:37,679 --> 01:33:40,880
activity that source ip was involved in

2570
01:33:40,880 --> 01:33:42,719
that that's a very effective way when

2571
01:33:42,719 --> 01:33:45,280
dealing with a large data set is is you

2572
01:33:45,280 --> 01:33:46,880
find some value that's of interest to

2573
01:33:46,880 --> 01:33:47,600
you

2574
01:33:47,600 --> 01:33:51,040
zoom in on that value see the contextual

2575
01:33:51,040 --> 01:33:54,320
the other values in context with that

2576
01:33:54,320 --> 01:33:56,320
and then zoom back out by filtering on

2577
01:33:56,320 --> 01:33:57,840
these new values and removing the

2578
01:33:57,840 --> 01:34:00,000
original filters

2579
01:34:00,000 --> 01:34:02,400
remember that most elements in kibana

2580
01:34:02,400 --> 01:34:04,560
and archime are interactive and can be

2581
01:34:04,560 --> 01:34:06,719
configured to work with any of the more

2582
01:34:06,719 --> 01:34:08,960
than 1300 data fields that malcolm knows

2583
01:34:08,960 --> 01:34:10,480
about so

2584
01:34:10,480 --> 01:34:12,639
generally in archimede kibana if you can

2585
01:34:12,639 --> 01:34:14,560
click on it you can you can create a

2586
01:34:14,560 --> 01:34:16,960
filter or you can pivot to some other

2587
01:34:16,960 --> 01:34:18,560
view and

2588
01:34:18,560 --> 01:34:19,840
and

2589
01:34:19,840 --> 01:34:21,360
you don't have to go

2590
01:34:21,360 --> 01:34:24,639
find these things manually uh you know

2591
01:34:24,639 --> 01:34:26,000
don't don't

2592
01:34:26,000 --> 01:34:28,239
save yourself some work by by learning

2593
01:34:28,239 --> 01:34:30,480
to create filters from the graphical

2594
01:34:30,480 --> 01:34:33,040
interface uh rather than just having to

2595
01:34:33,040 --> 01:34:34,880
go remember and oh what was my query

2596
01:34:34,880 --> 01:34:36,719
string that i was doing before and then

2597
01:34:36,719 --> 01:34:39,199
and then get to it that way

2598
01:34:39,199 --> 01:34:40,159
um

2599
01:34:40,159 --> 01:34:42,800
learn how to filter on on common fields

2600
01:34:42,800 --> 01:34:45,600
like zeek.log type

2601
01:34:45,600 --> 01:34:48,480
the the source ip desktop source port

2602
01:34:48,480 --> 01:34:50,560
desport protocol field

2603
01:34:50,560 --> 01:34:52,800
action and result

2604
01:34:52,800 --> 01:34:56,560
oui source oil ui and dust oui

2605
01:34:56,560 --> 01:34:58,639
these fields that get normalized across

2606
01:34:58,639 --> 01:35:00,000
all of the different log types that we

2607
01:35:00,000 --> 01:35:03,440
can do uh with zeke um you know there's

2608
01:35:03,440 --> 01:35:05,199
there's you're not gonna memorize all

2609
01:35:05,199 --> 01:35:06,880
thirteen hundreds of the fields that we

2610
01:35:06,880 --> 01:35:08,639
have uh

2611
01:35:08,639 --> 01:35:10,800
that we could populate in malcolm but

2612
01:35:10,800 --> 01:35:12,320
you know as you start to become familiar

2613
01:35:12,320 --> 01:35:14,639
with those most common ones

2614
01:35:14,639 --> 01:35:16,080
learn to build filters around those

2615
01:35:16,080 --> 01:35:18,080
fields and you'll become more effective

2616
01:35:18,080 --> 01:35:19,760
in your searching

2617
01:35:19,760 --> 01:35:21,360
finally don't forget about that tags

2618
01:35:21,360 --> 01:35:22,960
field

2619
01:35:22,960 --> 01:35:25,760
using pre-populated tags like the ones

2620
01:35:25,760 --> 01:35:27,679
that we do during enrichment for the

2621
01:35:27,679 --> 01:35:30,159
private and public ip space

2622
01:35:30,159 --> 01:35:32,880
the tags that you that got generated

2623
01:35:32,880 --> 01:35:35,600
when you uploaded your data

2624
01:35:35,600 --> 01:35:37,360
the tags that got created during the

2625
01:35:37,360 --> 01:35:40,080
segment mapping stage of enrichment

2626
01:35:40,080 --> 01:35:42,000
all of these tags including tags that

2627
01:35:42,000 --> 01:35:44,000
are populated automatically based on

2628
01:35:44,000 --> 01:35:46,239
pcapp file name

2629
01:35:46,239 --> 01:35:47,920
learn to search on those tags apply

2630
01:35:47,920 --> 01:35:50,960
filters on the tags field

2631
01:35:50,960 --> 01:35:53,679
and you can narrow your you can you know

2632
01:35:53,679 --> 01:35:56,000
easily narrow to cross segment traffic

2633
01:35:56,000 --> 01:35:59,760
with tags equals cross segment

2634
01:35:59,760 --> 01:36:01,199
and it's much harder to do the same

2635
01:36:01,199 --> 01:36:03,679
thing with source ipn

2636
01:36:03,679 --> 01:36:05,400
you know

2637
01:36:05,400 --> 01:36:08,840
192.168.0.0 slash whatever and

2638
01:36:08,840 --> 01:36:10,800
desktopn10.whatever.whatever like yeah

2639
01:36:10,800 --> 01:36:12,000
you could do it that way but it's going

2640
01:36:12,000 --> 01:36:13,600
to be a lot easier just to use the tag

2641
01:36:13,600 --> 01:36:17,199
that's already populated for that field

2642
01:36:17,199 --> 01:36:19,920
i hope this was a good kind of malcolm

2643
01:36:19,920 --> 01:36:22,159
101 course for really starting to get

2644
01:36:22,159 --> 01:36:25,199
down and get our hands dirty on

2645
01:36:25,199 --> 01:36:28,480
with pcap analysis

2646
01:36:28,639 --> 01:36:30,159
i enjoy

2647
01:36:30,159 --> 01:36:32,560
maintaining this project and and showing

2648
01:36:32,560 --> 01:36:34,239
people how to use the tool

2649
01:36:34,239 --> 01:36:36,880
um if you've got feedback for me

2650
01:36:36,880 --> 01:36:39,199
reach out on on github

2651
01:36:39,199 --> 01:36:42,159
uh reach out via if you want to in the

2652
01:36:42,159 --> 01:36:43,760
youtube um

2653
01:36:43,760 --> 01:36:46,400
comments or uh or get in touch with me

2654
01:36:46,400 --> 01:36:48,639
any other way you can figure out

2655
01:36:48,639 --> 01:36:50,719
and and let me know what you think

2656
01:36:50,719 --> 01:36:53,360
we're interested to to know how the

2657
01:36:53,360 --> 01:36:55,920
community is using the tool and and ways

2658
01:36:55,920 --> 01:36:58,639
that we could improve it

2659
01:36:58,639 --> 01:37:00,560
thank you for your time and happy

2660
01:37:00,560 --> 01:37:03,560
hunting

