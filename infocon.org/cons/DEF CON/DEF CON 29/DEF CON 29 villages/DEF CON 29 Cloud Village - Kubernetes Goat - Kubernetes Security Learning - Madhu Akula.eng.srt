1
00:00:00,240 --> 00:00:02,320
uh thank you so much everyone uh for

2
00:00:02,320 --> 00:00:04,720
joining me in this awesome session at

3
00:00:04,720 --> 00:00:06,879
cloud village def con uh in a virtual

4
00:00:06,879 --> 00:00:07,839
edition

5
00:00:07,839 --> 00:00:10,880
so today i'll be focusing on talking on

6
00:00:10,880 --> 00:00:13,679
kubernetes code it's a project meant to

7
00:00:13,679 --> 00:00:16,800
be trying to teach community security uh

8
00:00:16,800 --> 00:00:20,400
by using vulnerable by design labs

9
00:00:20,400 --> 00:00:22,880
so today i will be like a big disclaimer

10
00:00:22,880 --> 00:00:25,199
trying to be not showing a slides are

11
00:00:25,199 --> 00:00:27,199
mostly focusing on the demo and how the

12
00:00:27,199 --> 00:00:29,039
project can be set up and used as a

13
00:00:29,039 --> 00:00:32,000
normal user and learn from it and go

14
00:00:32,000 --> 00:00:34,160
back and try out your kubernetes skills

15
00:00:34,160 --> 00:00:35,120
right

16
00:00:35,120 --> 00:00:37,600
so without you let me

17
00:00:37,600 --> 00:00:39,840
go head over to the project uh this is

18
00:00:39,840 --> 00:00:42,399
the project uh you can find it in the

19
00:00:42,399 --> 00:00:44,239
github.com

20
00:00:44,239 --> 00:00:45,520
kubernetes code

21
00:00:45,520 --> 00:00:48,559
uh as you see it's uh pretty much try to

22
00:00:48,559 --> 00:00:51,440
design for intentionally use of like

23
00:00:51,440 --> 00:00:53,840
learning towards kubernetes security uh

24
00:00:53,840 --> 00:00:55,360
it doesn't matter if you are someone

25
00:00:55,360 --> 00:00:57,440
beginner or trying to learn offensive

26
00:00:57,440 --> 00:01:00,000
side or defensive side or even some kind

27
00:01:00,000 --> 00:01:01,920
of tool which you are trying to learn

28
00:01:01,920 --> 00:01:04,159
and see how it is effective right so we

29
00:01:04,159 --> 00:01:05,438
kind of look at like some of the

30
00:01:05,438 --> 00:01:07,760
scenarios and see how it looks like

31
00:01:07,760 --> 00:01:10,080
right uh

32
00:01:10,080 --> 00:01:10,960
yeah

33
00:01:10,960 --> 00:01:13,439
before we diving into the good project

34
00:01:13,439 --> 00:01:15,600
let me just zoom in a bit to see making

35
00:01:15,600 --> 00:01:17,920
sure everything is fine so we kind of

36
00:01:17,920 --> 00:01:20,560
have a ton of scenarios in this uh code

37
00:01:20,560 --> 00:01:23,040
uh which is like uh basically trying to

38
00:01:23,040 --> 00:01:25,280
take this naming from similar to web

39
00:01:25,280 --> 00:01:27,200
code which is a standard ovals project

40
00:01:27,200 --> 00:01:28,479
for years

41
00:01:28,479 --> 00:01:30,479
and we kind of showcase a different

42
00:01:30,479 --> 00:01:33,119
variety of scenarios on different areas

43
00:01:33,119 --> 00:01:35,119
both offensive security and defensive

44
00:01:35,119 --> 00:01:36,880
side of the kubernetes

45
00:01:36,880 --> 00:01:37,680
so

46
00:01:37,680 --> 00:01:39,439
let's see how it goes

47
00:01:39,439 --> 00:01:43,040
bit about me uh myself okay i kind of

48
00:01:43,040 --> 00:01:44,560
working towards kubernetes and

49
00:01:44,560 --> 00:01:47,280
containers for quite some time uh nearly

50
00:01:47,280 --> 00:01:48,640
past four years

51
00:01:48,640 --> 00:01:50,159
apart from that i have been trying to

52
00:01:50,159 --> 00:01:51,759
present my research and share with the

53
00:01:51,759 --> 00:01:53,280
community around the world like black

54
00:01:53,280 --> 00:01:55,280
eyed defcon use nix or really a bunch of

55
00:01:55,280 --> 00:01:56,960
other conferences

56
00:01:56,960 --> 00:01:58,960
uh i'm fortunate to find some kind of

57
00:01:58,960 --> 00:02:01,040
vulnerabilities quite some time back uh

58
00:02:01,040 --> 00:02:02,399
and contribute to the community

59
00:02:02,399 --> 00:02:04,640
especially open source ecosystem and

60
00:02:04,640 --> 00:02:05,840
also

61
00:02:05,840 --> 00:02:07,840
part of a bunch of communities like all

62
00:02:07,840 --> 00:02:09,199
the devops and all

63
00:02:09,199 --> 00:02:11,280
and also written and reviewed bunch of

64
00:02:11,280 --> 00:02:12,720
books and

65
00:02:12,720 --> 00:02:16,560
yeah that's pretty much about me

66
00:02:16,720 --> 00:02:18,560
regarding the project uh if you are

67
00:02:18,560 --> 00:02:20,800
someone who are getting started with

68
00:02:20,800 --> 00:02:23,599
kubernetes uh i would highly recommend

69
00:02:23,599 --> 00:02:25,680
learning the basics before trying out

70
00:02:25,680 --> 00:02:28,160
this project so it adds a ton of value

71
00:02:28,160 --> 00:02:30,319
than learning directly the security

72
00:02:30,319 --> 00:02:31,760
parts right

73
00:02:31,760 --> 00:02:33,360
i feel that if you understand the

74
00:02:33,360 --> 00:02:35,519
technology the most of the concept which

75
00:02:35,519 --> 00:02:37,360
you learn from security uh can be

76
00:02:37,360 --> 00:02:39,440
applied here right sometimes whatever

77
00:02:39,440 --> 00:02:41,599
you say firewalls uh maybe in cloud

78
00:02:41,599 --> 00:02:43,599
world they call it as like security

79
00:02:43,599 --> 00:02:46,400
groups or nacl right something like that

80
00:02:46,400 --> 00:02:47,840
in kubernetes maybe they call network

81
00:02:47,840 --> 00:02:49,920
security policies right so this

82
00:02:49,920 --> 00:02:52,000
terminology may differ a bit i would

83
00:02:52,000 --> 00:02:53,680
highly recommend learn about the

84
00:02:53,680 --> 00:02:55,519
technology and understand these concepts

85
00:02:55,519 --> 00:02:57,760
so that you can make most out of it

86
00:02:57,760 --> 00:02:59,840
than just having it

87
00:02:59,840 --> 00:03:01,599
if you are someone new to kubernetes

88
00:03:01,599 --> 00:03:03,280
it's an open source container

89
00:03:03,280 --> 00:03:05,760
orchestration system mainly designed for

90
00:03:05,760 --> 00:03:07,280
deploying your applications into the

91
00:03:07,280 --> 00:03:08,879
cloud so that you can scale and manage

92
00:03:08,879 --> 00:03:11,280
efficiently uh it was originally created

93
00:03:11,280 --> 00:03:13,599
by a project uh from google called park

94
00:03:13,599 --> 00:03:15,200
and now they donated this as a

95
00:03:15,200 --> 00:03:17,360
kubernetes to cncf which is the cloud

96
00:03:17,360 --> 00:03:19,360
native computing foundation

97
00:03:19,360 --> 00:03:21,599
and i definitely highly recommend this

98
00:03:21,599 --> 00:03:23,440
video i think i do bunch of trainings

99
00:03:23,440 --> 00:03:25,680
and workshops so everyone i highly

100
00:03:25,680 --> 00:03:27,920
recommend to go through this video it is

101
00:03:27,920 --> 00:03:29,360
kind of children's way how you can

102
00:03:29,360 --> 00:03:31,920
explain kubernetes to someone which is

103
00:03:31,920 --> 00:03:34,000
just getting started right

104
00:03:34,000 --> 00:03:36,560
and um yeah maybe i can just give a very

105
00:03:36,560 --> 00:03:38,560
quick fast track one minute version of

106
00:03:38,560 --> 00:03:41,120
overview which is definitely hard though

107
00:03:41,120 --> 00:03:43,519
uh in kubernetes there is a concept like

108
00:03:43,519 --> 00:03:45,519
master and note like where it's like

109
00:03:45,519 --> 00:03:47,440
client server architecture type so the

110
00:03:47,440 --> 00:03:49,680
master holds bunch of components which

111
00:03:49,680 --> 00:03:51,440
means master node has something called

112
00:03:51,440 --> 00:03:53,360
api server which is like a brain of

113
00:03:53,360 --> 00:03:54,879
kubernetes it doesn't matter if you are

114
00:03:54,879 --> 00:03:57,120
sending a request from external world or

115
00:03:57,120 --> 00:03:58,720
internal components which are like

116
00:03:58,720 --> 00:04:00,640
something like their own processes which

117
00:04:00,640 --> 00:04:01,519
is

118
00:04:01,519 --> 00:04:03,680
talking to the kubernetes right so it

119
00:04:03,680 --> 00:04:05,599
has to go through the api server so

120
00:04:05,599 --> 00:04:07,200
think of this as a quite critical

121
00:04:07,200 --> 00:04:08,959
component in the kubernetes like a brain

122
00:04:08,959 --> 00:04:10,080
right

123
00:04:10,080 --> 00:04:13,040
once it's sent uh so the xcd is like a

124
00:04:13,040 --> 00:04:14,720
database it's kind of key value store

125
00:04:14,720 --> 00:04:16,959
where it stores all this data

126
00:04:16,959 --> 00:04:19,680
and uh okay let's say as a developer our

127
00:04:19,680 --> 00:04:21,440
devops team i sent like i wanted to

128
00:04:21,440 --> 00:04:22,400
scale

129
00:04:22,400 --> 00:04:23,680
like 10

130
00:04:23,680 --> 00:04:26,080
10 engine exports in a kubernetes and

131
00:04:26,080 --> 00:04:29,120
run it right so to answer this like

132
00:04:29,120 --> 00:04:30,720
where i have these resources and

133
00:04:30,720 --> 00:04:32,720
everything so scheduler is the job to

134
00:04:32,720 --> 00:04:34,479
pick up like how much resources i have

135
00:04:34,479 --> 00:04:36,080
in the notes where i should schedule and

136
00:04:36,080 --> 00:04:37,759
all these things right

137
00:04:37,759 --> 00:04:40,000
so controller manager is like kind of

138
00:04:40,000 --> 00:04:41,759
the way how it's like uh

139
00:04:41,759 --> 00:04:43,840
talk to this 8 cd and making sure these

140
00:04:43,840 --> 00:04:45,759
are running always the declared or

141
00:04:45,759 --> 00:04:48,560
desired state right so this is a very

142
00:04:48,560 --> 00:04:50,240
high level i think there is ton of

143
00:04:50,240 --> 00:04:52,400
things once you get into the details

144
00:04:52,400 --> 00:04:54,400
similarly let's say once scheduler says

145
00:04:54,400 --> 00:04:56,320
i wanted to apply this pod into some

146
00:04:56,320 --> 00:04:59,440
node right so cubelet is another uh

147
00:04:59,440 --> 00:05:01,520
process which sits on the node making

148
00:05:01,520 --> 00:05:03,199
sure talking to the runtime it doesn't

149
00:05:03,199 --> 00:05:05,120
matter it is docker run c cut or some

150
00:05:05,120 --> 00:05:07,120
other container runtime so it is talking

151
00:05:07,120 --> 00:05:08,639
to the container runtime which is in the

152
00:05:08,639 --> 00:05:10,800
node uh to schedule the part which is

153
00:05:10,800 --> 00:05:12,960
told by like api server right

154
00:05:12,960 --> 00:05:15,199
and it kind of works across like sharing

155
00:05:15,199 --> 00:05:17,600
this data here from to the api server as

156
00:05:17,600 --> 00:05:19,759
a way right and another thing is like a

157
00:05:19,759 --> 00:05:21,680
cube proxy which is like traditional ip

158
00:05:21,680 --> 00:05:23,520
tables rules right so which kind of

159
00:05:23,520 --> 00:05:26,400
connects these proc uh services across

160
00:05:26,400 --> 00:05:29,360
these nodes to serve to the users and uh

161
00:05:29,360 --> 00:05:31,600
applications and services right

162
00:05:31,600 --> 00:05:33,759
and all your parts are deployed here

163
00:05:33,759 --> 00:05:35,759
ford is like a minimum leased unit it

164
00:05:35,759 --> 00:05:38,800
can have one or more containers right so

165
00:05:38,800 --> 00:05:40,800
this is like a super quick one-on-one

166
00:05:40,800 --> 00:05:43,120
view but i would highly recommend refer

167
00:05:43,120 --> 00:05:44,880
to the documentation they have ton of

168
00:05:44,880 --> 00:05:47,440
really detailed things and also if you

169
00:05:47,440 --> 00:05:48,960
are someone trying to get started i

170
00:05:48,960 --> 00:05:50,400
would highly recommend this kubernetes

171
00:05:50,400 --> 00:05:52,400
by examples if you stuck something maybe

172
00:05:52,400 --> 00:05:54,479
i wanted to just know what is exactly is

173
00:05:54,479 --> 00:05:56,479
name spaces or volumes right maybe you

174
00:05:56,479 --> 00:05:58,560
can quickly get your hands on on top of

175
00:05:58,560 --> 00:06:01,039
it so these are quite learning material

176
00:06:01,039 --> 00:06:03,440
if you are someone getting started okay

177
00:06:03,440 --> 00:06:05,199
so let's say that you already be

178
00:06:05,199 --> 00:06:07,120
comfortable with communities like now i

179
00:06:07,120 --> 00:06:08,720
wanted to go and understand what kind of

180
00:06:08,720 --> 00:06:11,600
security things i can uh identify issues

181
00:06:11,600 --> 00:06:13,440
or like learn and secure the cluster

182
00:06:13,440 --> 00:06:14,400
right

183
00:06:14,400 --> 00:06:16,319
so i feel because i have been doing

184
00:06:16,319 --> 00:06:18,080
trains for quite some time it's tough to

185
00:06:18,080 --> 00:06:20,160
people to set up these environments so

186
00:06:20,160 --> 00:06:21,919
what i have done is i try to create an

187
00:06:21,919 --> 00:06:23,759
online playground which is just by

188
00:06:23,759 --> 00:06:25,280
clicking in a url you can start a

189
00:06:25,280 --> 00:06:27,759
browser environment where you can play

190
00:06:27,759 --> 00:06:30,319
with this project and try to learn as a

191
00:06:30,319 --> 00:06:32,400
concept rather than focusing on your

192
00:06:32,400 --> 00:06:34,080
setup and understanding the the

193
00:06:34,080 --> 00:06:36,319
complexity of the things right so you

194
00:06:36,319 --> 00:06:38,240
can go ahead and start here like a click

195
00:06:38,240 --> 00:06:39,680
on the launch which means that you will

196
00:06:39,680 --> 00:06:41,120
start a kubernetes cluster for you

197
00:06:41,120 --> 00:06:43,280
within the browser and uh once you run

198
00:06:43,280 --> 00:06:44,800
these two commands these two comma kind

199
00:06:44,800 --> 00:06:46,840
of sets up a project for you

200
00:06:46,840 --> 00:06:50,080
right so whatever the guide you see it

201
00:06:50,080 --> 00:06:52,240
is detailed in a way like everything is

202
00:06:52,240 --> 00:06:53,840
documented what all things you can go

203
00:06:53,840 --> 00:06:55,919
back and try definitely i don't have

204
00:06:55,919 --> 00:06:57,199
enough time to cover all of these

205
00:06:57,199 --> 00:06:59,840
scenarios uh but i try to document each

206
00:06:59,840 --> 00:07:01,520
and every step by step so that you can

207
00:07:01,520 --> 00:07:03,199
go back and apply this learning

208
00:07:03,199 --> 00:07:04,800
knowledge right

209
00:07:04,800 --> 00:07:05,919
so

210
00:07:05,919 --> 00:07:07,599
while it is trying to set up like you

211
00:07:07,599 --> 00:07:09,840
can see that we just set it up and we

212
00:07:09,840 --> 00:07:11,520
hit the enter it will go ahead and set

213
00:07:11,520 --> 00:07:13,919
up the some of the scenarios which we

214
00:07:13,919 --> 00:07:16,319
are going to play around today or after

215
00:07:16,319 --> 00:07:19,199
later as well and we can able to get the

216
00:07:19,199 --> 00:07:21,360
access after this right

217
00:07:21,360 --> 00:07:23,440
so for the sake of the time i try to set

218
00:07:23,440 --> 00:07:25,919
it up already uh i can just type cube

219
00:07:25,919 --> 00:07:27,360
cuddle get notes

220
00:07:27,360 --> 00:07:29,680
uh you can see that uh there are a bunch

221
00:07:29,680 --> 00:07:31,360
of nodes

222
00:07:31,360 --> 00:07:33,199
sorry again

223
00:07:33,199 --> 00:07:35,120
so you can see three nodes running uh

224
00:07:35,120 --> 00:07:37,440
within the kubernetes cluster and uh

225
00:07:37,440 --> 00:07:39,599
which means the three node parts of the

226
00:07:39,599 --> 00:07:40,400
the

227
00:07:40,400 --> 00:07:42,240
nodes are there in the kubernetes side

228
00:07:42,240 --> 00:07:44,400
and you can also see bunch of pods which

229
00:07:44,400 --> 00:07:46,720
means number of containers one or more

230
00:07:46,720 --> 00:07:49,120
running right in some cases too

231
00:07:49,120 --> 00:07:50,960
some cases one right

232
00:07:50,960 --> 00:07:52,240
so

233
00:07:52,240 --> 00:07:53,599
this is like a kind of trying to

234
00:07:53,599 --> 00:07:55,440
replicate a real world cluster with

235
00:07:55,440 --> 00:07:56,960
intentionally vulnerabilities to

236
00:07:56,960 --> 00:07:59,360
showcase how kubernetes security we can

237
00:07:59,360 --> 00:08:00,560
learn right

238
00:08:00,560 --> 00:08:02,080
uh so

239
00:08:02,080 --> 00:08:04,319
if you are someone like playing this uh

240
00:08:04,319 --> 00:08:06,560
using katakura or definitely you can set

241
00:08:06,560 --> 00:08:09,120
it up your own so you can also do like

242
00:08:09,120 --> 00:08:11,759
uh making sure the parts are running

243
00:08:11,759 --> 00:08:14,240
before you hitting the last script which

244
00:08:14,240 --> 00:08:16,720
is nothing but trying to expose the all

245
00:08:16,720 --> 00:08:19,199
vulnerable apps or services within your

246
00:08:19,199 --> 00:08:21,120
local system so that it may not expose

247
00:08:21,120 --> 00:08:22,800
to the internet someone like a real

248
00:08:22,800 --> 00:08:24,879
attacker may not just exploit your

249
00:08:24,879 --> 00:08:26,879
cluster right and also i would highly

250
00:08:26,879 --> 00:08:28,240
recommend maybe i didn't go through the

251
00:08:28,240 --> 00:08:31,039
disclaimer a bit early uh maybe i think

252
00:08:31,039 --> 00:08:33,039
i might have put please do not try to

253
00:08:33,039 --> 00:08:35,679
put or run your kubernetes code project

254
00:08:35,679 --> 00:08:37,440
on your production workloads or in your

255
00:08:37,440 --> 00:08:39,599
company workloads which basically has

256
00:08:39,599 --> 00:08:42,080
intentional vulnerabilities so we it

257
00:08:42,080 --> 00:08:43,599
doesn't come with any warranties or

258
00:08:43,599 --> 00:08:45,760
guarantees so making sure try to run in

259
00:08:45,760 --> 00:08:48,240
your safe environment and try to run in

260
00:08:48,240 --> 00:08:49,760
a play environment where you can just

261
00:08:49,760 --> 00:08:51,839
try it out things right

262
00:08:51,839 --> 00:08:53,279
cool

263
00:08:53,279 --> 00:08:55,839
once you set it up basically the project

264
00:08:55,839 --> 00:08:58,480
uh then you kind of uh

265
00:08:58,480 --> 00:09:00,800
written with a url basically where you

266
00:09:00,800 --> 00:09:02,720
can access the kubernetes code right

267
00:09:02,720 --> 00:09:04,560
like which is kind of like once you run

268
00:09:04,560 --> 00:09:06,959
the script you end up seeing this

269
00:09:06,959 --> 00:09:08,720
so this is how it looks like this is

270
00:09:08,720 --> 00:09:10,959
kind of a home for the kubernetes code

271
00:09:10,959 --> 00:09:13,279
where you can find out all the scenarios

272
00:09:13,279 --> 00:09:15,360
which is available and how you can get

273
00:09:15,360 --> 00:09:17,920
started with them to learn or practice

274
00:09:17,920 --> 00:09:20,720
right so if you see here uh definitely

275
00:09:20,720 --> 00:09:23,200
this guide is quite handy uh like this

276
00:09:23,200 --> 00:09:25,040
is what we are trying to go through

277
00:09:25,040 --> 00:09:27,440
today as well uh because i can't

278
00:09:27,440 --> 00:09:29,600
remember everything for sure and there

279
00:09:29,600 --> 00:09:31,600
are ton of other things also so you can

280
00:09:31,600 --> 00:09:32,720
if you stuck somewhere when you are

281
00:09:32,720 --> 00:09:34,399
trying certain scenario you can come

282
00:09:34,399 --> 00:09:37,200
here and try to refer certain example or

283
00:09:37,200 --> 00:09:41,120
a certain scenario uh more details right

284
00:09:41,120 --> 00:09:44,560
so yeah let me just see uh making sure

285
00:09:44,560 --> 00:09:46,160
i'll try to showcase you how you can

286
00:09:46,160 --> 00:09:48,080
access this as well so once you hit the

287
00:09:48,080 --> 00:09:50,399
bash script of access kubernetes code it

288
00:09:50,399 --> 00:09:53,279
all exposed so now you can go ahead and

289
00:09:53,279 --> 00:09:56,080
use this project and uh it is making

290
00:09:56,080 --> 00:09:58,000
sure it's up and running right

291
00:09:58,000 --> 00:10:00,080
so if you are someone trying to browse

292
00:10:00,080 --> 00:10:02,079
that in other scenarios like let's say

293
00:10:02,079 --> 00:10:04,560
ssrf in gate as well right rather than

294
00:10:04,560 --> 00:10:06,880
browsing if you are using the katakura i

295
00:10:06,880 --> 00:10:08,640
would highly recommend use this custom

296
00:10:08,640 --> 00:10:11,760
port and mention this port number and

297
00:10:11,760 --> 00:10:15,279
just use it right so that simple as uh

298
00:10:15,279 --> 00:10:16,800
to just set up the project and get

299
00:10:16,800 --> 00:10:18,399
started you are learning of community

300
00:10:18,399 --> 00:10:20,959
security right so let me go through some

301
00:10:20,959 --> 00:10:22,959
of the scenarios and showcase both

302
00:10:22,959 --> 00:10:25,120
attackers our offensive side as well as

303
00:10:25,120 --> 00:10:27,120
defenders and how we can learn security

304
00:10:27,120 --> 00:10:28,399
of the system

305
00:10:28,399 --> 00:10:30,880
and also see last part how vendors like

306
00:10:30,880 --> 00:10:32,800
uh enterprise security or open source

307
00:10:32,800 --> 00:10:35,279
projects can leverage this as a tool to

308
00:10:35,279 --> 00:10:37,120
see how much gaps are improve their

309
00:10:37,120 --> 00:10:40,240
projects as well right our products

310
00:10:40,240 --> 00:10:42,320
to quickly showcase a simple attack

311
00:10:42,320 --> 00:10:44,720
factor or scenario i think this is quite

312
00:10:44,720 --> 00:10:46,800
commonly you see in day to day ca cd

313
00:10:46,800 --> 00:10:49,360
system right docker in docker if you are

314
00:10:49,360 --> 00:10:51,360
someone using any most of the bl system

315
00:10:51,360 --> 00:10:53,279
like github ci or

316
00:10:53,279 --> 00:10:55,279
pipeline bitbucket pipelines or github

317
00:10:55,279 --> 00:10:57,040
actions and all you might end up seeing

318
00:10:57,040 --> 00:10:58,720
something called a tint which means

319
00:10:58,720 --> 00:11:01,360
docker and docker so if someone building

320
00:11:01,360 --> 00:11:03,120
a docker command or like a docker

321
00:11:03,120 --> 00:11:04,800
container within your build system they

322
00:11:04,800 --> 00:11:06,560
might want some way to access your

323
00:11:06,560 --> 00:11:08,959
docker socket or docker api so that they

324
00:11:08,959 --> 00:11:10,720
can build that image like definitely

325
00:11:10,720 --> 00:11:12,399
there are some alternatives keep coming

326
00:11:12,399 --> 00:11:14,480
in the world so most people still till

327
00:11:14,480 --> 00:11:16,720
to date i see in especially penn testing

328
00:11:16,720 --> 00:11:19,120
engagements or in real world people try

329
00:11:19,120 --> 00:11:21,360
to use this method to build that thing

330
00:11:21,360 --> 00:11:23,760
so what i have trying to showcase is how

331
00:11:23,760 --> 00:11:25,680
we can exploit this or gain access to

332
00:11:25,680 --> 00:11:27,760
the underlying host system by escaping

333
00:11:27,760 --> 00:11:29,920
from the container to the host system

334
00:11:29,920 --> 00:11:32,320
right so to get started uh with this

335
00:11:32,320 --> 00:11:34,160
scenario you can go ahead and click this

336
00:11:34,160 --> 00:11:36,240
url so which has an intentionally

337
00:11:36,240 --> 00:11:37,760
vulnerable uh

338
00:11:37,760 --> 00:11:40,800
lab or like application so as for this

339
00:11:40,800 --> 00:11:42,160
demo i don't want to focus on

340
00:11:42,160 --> 00:11:44,320
application security issues so i'll try

341
00:11:44,320 --> 00:11:46,399
to go ahead and showcase you that this

342
00:11:46,399 --> 00:11:48,000
application is vulnerable to remote code

343
00:11:48,000 --> 00:11:50,560
execution which means that it has like a

344
00:11:50,560 --> 00:11:53,040
rc right command injection vulnerability

345
00:11:53,040 --> 00:11:54,880
so from here which means that you have

346
00:11:54,880 --> 00:11:56,639
to identify what is this it is running

347
00:11:56,639 --> 00:11:58,560
in and how we can get escape out of this

348
00:11:58,560 --> 00:12:00,639
container by looking at different paths

349
00:12:00,639 --> 00:12:02,079
and aspects right

350
00:12:02,079 --> 00:12:04,320
so now one thing as i look like maybe i

351
00:12:04,320 --> 00:12:06,720
can look at like my process uh okay

352
00:12:06,720 --> 00:12:08,560
where it is running exactly so you can

353
00:12:08,560 --> 00:12:11,519
go ahead and run cad prox lfc group

354
00:12:11,519 --> 00:12:13,519
it kind of tells that okay it is running

355
00:12:13,519 --> 00:12:15,839
and kubernetes spots so it try to

356
00:12:15,839 --> 00:12:17,839
showcase you the runtime sometimes and

357
00:12:17,839 --> 00:12:19,760
also there is tools like am i contained

358
00:12:19,760 --> 00:12:21,600
by jessica frazil which also kind of

359
00:12:21,600 --> 00:12:23,839
showcase and give it a container uh

360
00:12:23,839 --> 00:12:26,240
information so now once i identify

361
00:12:26,240 --> 00:12:27,839
definitely you need to understand is

362
00:12:27,839 --> 00:12:29,200
there anything which is running in the

363
00:12:29,200 --> 00:12:31,920
file system or is there any something

364
00:12:31,920 --> 00:12:34,240
which i can think of like something

365
00:12:34,240 --> 00:12:35,600
interesting right

366
00:12:35,600 --> 00:12:37,519
so as i already know this is

367
00:12:37,519 --> 00:12:39,360
intentionally built and trying to put

368
00:12:39,360 --> 00:12:41,600
some vulnerabilities i can see that

369
00:12:41,600 --> 00:12:43,519
there is a darker socket mounted here

370
00:12:43,519 --> 00:12:46,480
right it is in the custom docker docker

371
00:12:46,480 --> 00:12:49,600
dot sock right so which means that

372
00:12:49,600 --> 00:12:51,519
there is a docker socket which is passed

373
00:12:51,519 --> 00:12:53,600
from the whole system to the container

374
00:12:53,600 --> 00:12:55,839
right maybe i can just showcase in a

375
00:12:55,839 --> 00:12:57,120
nicer way

376
00:12:57,120 --> 00:12:58,399
maybe

377
00:12:58,399 --> 00:13:00,160
so

378
00:13:00,160 --> 00:13:02,320
so this is your application running uh

379
00:13:02,320 --> 00:13:03,360
which is

380
00:13:03,360 --> 00:13:06,639
in a pod or container i would say right

381
00:13:06,639 --> 00:13:09,279
so which is running in a node which is

382
00:13:09,279 --> 00:13:11,920
in the kubernetes node right so now the

383
00:13:11,920 --> 00:13:13,680
docker is running here like which is

384
00:13:13,680 --> 00:13:15,200
where run

385
00:13:15,200 --> 00:13:17,360
a

386
00:13:17,600 --> 00:13:19,600
docker dot song right

387
00:13:19,600 --> 00:13:21,839
so now what we are trying to see is uh

388
00:13:21,839 --> 00:13:24,480
this docker socket also passed to the

389
00:13:24,480 --> 00:13:26,480
container in a different part which is

390
00:13:26,480 --> 00:13:28,560
like custom

391
00:13:28,560 --> 00:13:30,959
upper or top or soft so now we are

392
00:13:30,959 --> 00:13:33,200
trying to leverage this docker socket

393
00:13:33,200 --> 00:13:35,040
and talk to the host system because this

394
00:13:35,040 --> 00:13:37,120
is mapped with the whole system and see

395
00:13:37,120 --> 00:13:38,800
if we can escape out of this spot or

396
00:13:38,800 --> 00:13:41,040
container and gain access to node right

397
00:13:41,040 --> 00:13:42,320
like that is what we are trying to

398
00:13:42,320 --> 00:13:44,000
exploit and uh see if you can gain

399
00:13:44,000 --> 00:13:46,320
access right as i said you can

400
00:13:46,320 --> 00:13:48,320
definitely go through this documentation

401
00:13:48,320 --> 00:13:49,839
and you can see this how you can

402
00:13:49,839 --> 00:13:52,639
leverage uh maybe we can use even curl

403
00:13:52,639 --> 00:13:54,560
basically to talk to the thing or you

404
00:13:54,560 --> 00:13:56,720
can even use the docker right so there

405
00:13:56,720 --> 00:13:58,639
is no docker so

406
00:13:58,639 --> 00:14:00,639
the one way in real word attackers can

407
00:14:00,639 --> 00:14:02,720
leverage is definitely you can download

408
00:14:02,720 --> 00:14:04,240
the docker because it's just a binary

409
00:14:04,240 --> 00:14:06,399
you can double gate or like

410
00:14:06,399 --> 00:14:09,440
and exploit this system or in another

411
00:14:09,440 --> 00:14:11,040
way maybe you can even interact with the

412
00:14:11,040 --> 00:14:12,800
docker by using call with the unique

413
00:14:12,800 --> 00:14:14,560
socket by passing right

414
00:14:14,560 --> 00:14:16,720
so for this uh this thing you can just

415
00:14:16,720 --> 00:14:18,959
download this and uh make it available

416
00:14:18,959 --> 00:14:20,800
into local system as binary now you can

417
00:14:20,800 --> 00:14:22,800
see i tried to already put it here and

418
00:14:22,800 --> 00:14:23,519
now

419
00:14:23,519 --> 00:14:25,279
as i attacked if you wanted to interact

420
00:14:25,279 --> 00:14:26,959
with the docker socket you need to

421
00:14:26,959 --> 00:14:29,519
specify the iphone h flag so that you

422
00:14:29,519 --> 00:14:31,440
can talk to this specific docker host

423
00:14:31,440 --> 00:14:34,560
socket right so now you can see here uh

424
00:14:34,560 --> 00:14:36,560
i can just say that and i can also query

425
00:14:36,560 --> 00:14:38,480
images right

426
00:14:38,480 --> 00:14:39,360
so

427
00:14:39,360 --> 00:14:41,440
as you can see here uh you already got

428
00:14:41,440 --> 00:14:43,120
bunch of docker images which are in the

429
00:14:43,120 --> 00:14:45,199
host system right which is basically now

430
00:14:45,199 --> 00:14:47,600
we are trying to query the node docker

431
00:14:47,600 --> 00:14:50,000
container images uh without here

432
00:14:50,000 --> 00:14:52,320
underlying in the node system right so

433
00:14:52,320 --> 00:14:54,320
enough as an attacker if you wanted to

434
00:14:54,320 --> 00:14:56,320
basically go exploit this and get a

435
00:14:56,320 --> 00:14:58,160
shell back or something maybe you can

436
00:14:58,160 --> 00:15:00,639
just run a container uh

437
00:15:00,639 --> 00:15:03,040
volume on everything uh which is in the

438
00:15:03,040 --> 00:15:06,160
whole system with either read earlier

439
00:15:06,160 --> 00:15:08,000
or whatever the way you want or you can

440
00:15:08,000 --> 00:15:10,320
even pass a flags like privileged equal

441
00:15:10,320 --> 00:15:12,320
to true to get a privileged containers

442
00:15:12,320 --> 00:15:14,079
maybe adding extra capabilities or

443
00:15:14,079 --> 00:15:16,160
something right or you can just run at

444
00:15:16,160 --> 00:15:17,920
your own container like i can create my

445
00:15:17,920 --> 00:15:19,440
own container saying that it gets a

446
00:15:19,440 --> 00:15:21,279
reverse shell back to me uh in this

447
00:15:21,279 --> 00:15:23,360
container uh whatever the thing that's

448
00:15:23,360 --> 00:15:25,360
it once you run basically get a shell

449
00:15:25,360 --> 00:15:27,120
back from there you can traverse and

450
00:15:27,120 --> 00:15:29,199
learn more attack surface and exploit

451
00:15:29,199 --> 00:15:30,000
more

452
00:15:30,000 --> 00:15:32,399
but uh for the sake of the demo i just

453
00:15:32,399 --> 00:15:35,120
will try to stop here but uh definitely

454
00:15:35,120 --> 00:15:36,880
in real world there is a lot of little

455
00:15:36,880 --> 00:15:38,959
moment and attack attack exploration

456
00:15:38,959 --> 00:15:41,519
from here right so this is a typical

457
00:15:41,519 --> 00:15:44,160
example of how you can exploit docker in

458
00:15:44,160 --> 00:15:46,000
docker sockets uh in a kubernetes

459
00:15:46,000 --> 00:15:48,399
clusters or in general right

460
00:15:48,399 --> 00:15:49,519
and there are ton of other

461
00:15:49,519 --> 00:15:51,759
vulnerabilities definitely i i try to

462
00:15:51,759 --> 00:15:53,360
not able to cover

463
00:15:53,360 --> 00:15:54,720
but you can go back and definitely

464
00:15:54,720 --> 00:15:56,000
explore like there is another

465
00:15:56,000 --> 00:15:57,839
vulnerability where if they have extra

466
00:15:57,839 --> 00:16:00,240
privileges right uh maybe you can just

467
00:16:00,240 --> 00:16:02,399
see if they have so many privileges by

468
00:16:02,399 --> 00:16:04,560
running capacity that's testing now you

469
00:16:04,560 --> 00:16:06,480
can see bunch of other

470
00:16:06,480 --> 00:16:09,040
capabilities it has already given right

471
00:16:09,040 --> 00:16:10,800
maybe you can see that there is an extra

472
00:16:10,800 --> 00:16:13,040
file system mounted or like a found in

473
00:16:13,040 --> 00:16:14,880
the whole system right there is a host

474
00:16:14,880 --> 00:16:17,519
system so you can definitely leverage

475
00:16:17,519 --> 00:16:20,160
the traditional uh way of like a ch root

476
00:16:20,160 --> 00:16:22,720
and slash system

477
00:16:22,720 --> 00:16:23,839
uh

478
00:16:23,839 --> 00:16:26,000
and whatever the command you want to run

479
00:16:26,000 --> 00:16:28,720
right so now if you see here like we are

480
00:16:28,720 --> 00:16:30,880
trying to basically uh leverage this and

481
00:16:30,880 --> 00:16:33,440
try to run commands or systems uh within

482
00:16:33,440 --> 00:16:36,920
the host system

483
00:16:37,199 --> 00:16:39,279
so now whatever the commands you run

484
00:16:39,279 --> 00:16:41,120
which are going to run within the whole

485
00:16:41,120 --> 00:16:43,360
system by escaping out of the container

486
00:16:43,360 --> 00:16:44,720
looks like there is no containers

487
00:16:44,720 --> 00:16:45,680
running

488
00:16:45,680 --> 00:16:47,680
another reason uh which is most probably

489
00:16:47,680 --> 00:16:48,959
due to the reason

490
00:16:48,959 --> 00:16:50,720
they are might be using container

491
00:16:50,720 --> 00:16:52,720
because the underlying whole system is

492
00:16:52,720 --> 00:16:54,720
changed but you can see docker images

493
00:16:54,720 --> 00:16:56,160
works pretty fine

494
00:16:56,160 --> 00:16:58,399
right so this is maybe another way to

495
00:16:58,399 --> 00:17:00,240
escape and from there maybe you can use

496
00:17:00,240 --> 00:17:02,399
and leverage this cube cuddle config

497
00:17:02,399 --> 00:17:04,720
like which is available in most of the

498
00:17:04,720 --> 00:17:07,919
container nodes right so which is in uh

499
00:17:07,919 --> 00:17:11,039
utc vanities

500
00:17:11,039 --> 00:17:14,160
and uh you can see cube like uh

501
00:17:14,160 --> 00:17:15,679
cube config

502
00:17:15,679 --> 00:17:17,919
so this is a cube light config which

503
00:17:17,919 --> 00:17:20,000
means that it used to talk to the master

504
00:17:20,000 --> 00:17:22,400
node like as you see uh when you

505
00:17:22,400 --> 00:17:25,119
describe the architecture right so as

506
00:17:25,119 --> 00:17:26,880
attacker you can also leverage this

507
00:17:26,880 --> 00:17:29,360
config like uh cube catal

508
00:17:29,360 --> 00:17:31,520
dash

509
00:17:31,520 --> 00:17:32,679
cube dash

510
00:17:32,960 --> 00:17:35,280
and uh pass the flag of uh whatever the

511
00:17:35,280 --> 00:17:36,960
config which you found

512
00:17:36,960 --> 00:17:37,919
uh

513
00:17:37,919 --> 00:17:38,880
like

514
00:17:38,880 --> 00:17:42,559
dot tube config and get parts right

515
00:17:42,559 --> 00:17:45,039
so now we can use this to query if any

516
00:17:45,039 --> 00:17:47,760
parts available within the cluster

517
00:17:47,760 --> 00:17:50,080
and see if we can be able to use this

518
00:17:50,080 --> 00:17:52,240
privileges or something to get the data

519
00:17:52,240 --> 00:17:53,200
right

520
00:17:53,200 --> 00:17:55,919
looks like yeah cool now we can see so

521
00:17:55,919 --> 00:17:58,240
what we just did here is now we kind of

522
00:17:58,240 --> 00:18:00,400
escaped from the whole system by

523
00:18:00,400 --> 00:18:02,559
leveraging the whole system file path

524
00:18:02,559 --> 00:18:04,960
mount and we use this vulnerability to

525
00:18:04,960 --> 00:18:07,360
run here and also we leverage the cube

526
00:18:07,360 --> 00:18:09,600
light tube config

527
00:18:09,600 --> 00:18:12,320
to talk to the api server and from there

528
00:18:12,320 --> 00:18:14,160
you can also leverage see if what kind

529
00:18:14,160 --> 00:18:16,240
of privileges it has and from there you

530
00:18:16,240 --> 00:18:18,320
can now can go on a bit more uh

531
00:18:18,320 --> 00:18:20,559
authorization authentication exploits

532
00:18:20,559 --> 00:18:21,360
right

533
00:18:21,360 --> 00:18:24,000
so i can also query using what can i can

534
00:18:24,000 --> 00:18:26,880
i delete nodes sorry

535
00:18:26,880 --> 00:18:28,400
can i delete

536
00:18:28,400 --> 00:18:29,919
notes

537
00:18:29,919 --> 00:18:31,760
so this is kind of imperative command to

538
00:18:31,760 --> 00:18:33,760
query to the api server asking whatever

539
00:18:33,760 --> 00:18:36,160
the config i found cubelet using this

540
00:18:36,160 --> 00:18:38,400
can i do something uh whatever operation

541
00:18:38,400 --> 00:18:40,080
so you can see this

542
00:18:40,080 --> 00:18:41,679
this configuration are the permission

543
00:18:41,679 --> 00:18:43,840
which we have we can't be able to delete

544
00:18:43,840 --> 00:18:46,160
nodes right maybe we can create fonts

545
00:18:46,160 --> 00:18:47,919
right so we can use this extra

546
00:18:47,919 --> 00:18:50,240
permissions to maybe create another part

547
00:18:50,240 --> 00:18:52,320
within the another node maybe you can

548
00:18:52,320 --> 00:18:54,080
hop into another node from there you

549
00:18:54,080 --> 00:18:56,160
kind of do lateral movement on top of

550
00:18:56,160 --> 00:18:58,000
each node and node and maybe gain more

551
00:18:58,000 --> 00:19:01,200
and more data or containers access right

552
00:19:01,200 --> 00:19:03,679
so this is how a typical maybe offensive

553
00:19:03,679 --> 00:19:05,520
side you can definitely look and as i

554
00:19:05,520 --> 00:19:07,440
said a bunch of other examples and

555
00:19:07,440 --> 00:19:09,840
scenarios you can find like how we can

556
00:19:09,840 --> 00:19:11,840
consume resources and memories when they

557
00:19:11,840 --> 00:19:13,840
don't define resource limits and uh

558
00:19:13,840 --> 00:19:14,960
quotas or

559
00:19:14,960 --> 00:19:16,400
limit ranges

560
00:19:16,400 --> 00:19:17,280
right

561
00:19:17,280 --> 00:19:20,000
and if you look at like uh uh

562
00:19:20,000 --> 00:19:21,919
example of defense right maybe i'm

563
00:19:21,919 --> 00:19:24,160
trying to showcase a simple use case of

564
00:19:24,160 --> 00:19:26,320
open source utility called like falco

565
00:19:26,320 --> 00:19:28,400
which kind of help us to do monitoring

566
00:19:28,400 --> 00:19:31,120
of runtime security right

567
00:19:31,120 --> 00:19:33,440
so i wanted to deploy this simple uh

568
00:19:33,440 --> 00:19:34,640
falco

569
00:19:34,640 --> 00:19:37,120
deployment into our kubernetes cluster

570
00:19:37,120 --> 00:19:39,679
and i will go ahead and update this repo

571
00:19:39,679 --> 00:19:40,799
in my health

572
00:19:40,799 --> 00:19:42,880
and i will install this health card into

573
00:19:42,880 --> 00:19:44,080
the kubernetes cluster which is

574
00:19:44,080 --> 00:19:45,520
available right

575
00:19:45,520 --> 00:19:48,080
so now you can see this it got deployed

576
00:19:48,080 --> 00:19:50,000
now you can see the parts running of the

577
00:19:50,000 --> 00:19:51,600
falco in the light

578
00:19:51,600 --> 00:19:54,080
which is basically creating and the

579
00:19:54,080 --> 00:19:56,000
reason you may ask why these are running

580
00:19:56,000 --> 00:19:58,000
three right uh if you look at like nodes

581
00:19:58,000 --> 00:20:00,320
which we have three different nodes so

582
00:20:00,320 --> 00:20:02,559
falco currently runs with a demand set

583
00:20:02,559 --> 00:20:04,559
which means that if you have n number of

584
00:20:04,559 --> 00:20:06,799
nodes so each node will have one part

585
00:20:06,799 --> 00:20:08,559
running so that we wanted to collect all

586
00:20:08,559 --> 00:20:10,320
the data and matrix and so that we can

587
00:20:10,320 --> 00:20:12,640
monitor the each and every node level uh

588
00:20:12,640 --> 00:20:14,320
the runtime and all these data right

589
00:20:14,320 --> 00:20:16,400
containers so that's why it is kind of

590
00:20:16,400 --> 00:20:18,799
running with a demand set so if you go

591
00:20:18,799 --> 00:20:20,960
ahead and see the parts uh you can see

592
00:20:20,960 --> 00:20:22,799
that they're running up and running so

593
00:20:22,799 --> 00:20:25,280
now what we can do is uh falco has like

594
00:20:25,280 --> 00:20:27,760
a bunch of uh rule set to detect certain

595
00:20:27,760 --> 00:20:29,200
kind of security issues within the

596
00:20:29,200 --> 00:20:31,600
kubernetes or in general linux right so

597
00:20:31,600 --> 00:20:32,960
there are something like if someone

598
00:20:32,960 --> 00:20:34,480
tried to browse some sensitive files

599
00:20:34,480 --> 00:20:36,559
like cat edition shadow or something it

600
00:20:36,559 --> 00:20:38,559
might trigger an alert right so what i'm

601
00:20:38,559 --> 00:20:40,240
going to do is i'll go ahead and query

602
00:20:40,240 --> 00:20:43,120
these logs uh from this falco right from

603
00:20:43,120 --> 00:20:45,280
the all these spots and also try to

604
00:20:45,280 --> 00:20:46,799
simulate some kind of attack or

605
00:20:46,799 --> 00:20:48,400
vulnerability something which falco

606
00:20:48,400 --> 00:20:50,400
triggers and see how we can detect these

607
00:20:50,400 --> 00:20:52,720
as a defense point of view right

608
00:20:52,720 --> 00:20:55,280
so let me go ahead and query these logs

609
00:20:55,280 --> 00:20:56,640
uh

610
00:20:56,640 --> 00:20:58,799
now you can see the logs coming so what

611
00:20:58,799 --> 00:21:00,400
i'll do is i'll go ahead and create a

612
00:21:00,400 --> 00:21:01,600
container

613
00:21:01,600 --> 00:21:03,840
which kind of exists into your bash and

614
00:21:03,840 --> 00:21:05,600
you can see i'm trying to use a hacker

615
00:21:05,600 --> 00:21:08,240
container maybe i'll come a bit later

616
00:21:08,240 --> 00:21:10,320
what exactly it is let me go ahead and

617
00:21:10,320 --> 00:21:13,280
run this container

618
00:21:13,600 --> 00:21:16,799
if you see me i just started a container

619
00:21:16,799 --> 00:21:18,559
and exiting into the bash of that

620
00:21:18,559 --> 00:21:21,039
container right now

621
00:21:21,039 --> 00:21:23,520
uh okay i'll just quickly showcase this

622
00:21:23,520 --> 00:21:26,320
example i think then i think i'll try to

623
00:21:26,320 --> 00:21:30,520
cover the last section

624
00:21:34,240 --> 00:21:36,960
yeah so now uh as you see uh whenever

625
00:21:36,960 --> 00:21:39,440
some kind of new triggers happens within

626
00:21:39,440 --> 00:21:40,960
the kubernetes cluster in terms of

627
00:21:40,960 --> 00:21:43,039
security point of view you can see this

628
00:21:43,039 --> 00:21:45,280
logs coming up right so let me go ahead

629
00:21:45,280 --> 00:21:47,760
and do the simple example right edc

630
00:21:47,760 --> 00:21:49,760
shadow whenever i read the file

631
00:21:49,760 --> 00:21:52,159
sensitive because as you see falco has a

632
00:21:52,159 --> 00:21:53,840
rule set for that it automatically

633
00:21:53,840 --> 00:21:55,840
detects that which container it got

634
00:21:55,840 --> 00:21:58,080
triggered and which file it has read

635
00:21:58,080 --> 00:22:00,240
which container which node so it kind of

636
00:22:00,240 --> 00:22:02,000
provides a detection or defensive

637
00:22:02,000 --> 00:22:04,799
mechanism to understand identify like a

638
00:22:04,799 --> 00:22:06,320
security point of view what kind of

639
00:22:06,320 --> 00:22:08,000
things happening around the system and

640
00:22:08,000 --> 00:22:10,080
all so we try to focus on different

641
00:22:10,080 --> 00:22:12,400
scenarios how we can teach this defense

642
00:22:12,400 --> 00:22:14,480
side as well uh in terms of kubernetes

643
00:22:14,480 --> 00:22:16,080
security and how we can leverage these

644
00:22:16,080 --> 00:22:16,880
things

645
00:22:16,880 --> 00:22:18,799
and like network security policies and

646
00:22:18,799 --> 00:22:19,600
all

647
00:22:19,600 --> 00:22:21,840
as i am trying to come to the end uh as

648
00:22:21,840 --> 00:22:24,320
i said uh please give it a try there are

649
00:22:24,320 --> 00:22:26,080
ton of other uh scenarios which i

650
00:22:26,080 --> 00:22:27,840
couldn't cover and also i tried to

651
00:22:27,840 --> 00:22:30,159
showcase some uh vulnerability reports

652
00:22:30,159 --> 00:22:31,919
from some of the tools which are open

653
00:22:31,919 --> 00:22:33,760
source as well as the commercial uh

654
00:22:33,760 --> 00:22:36,559
maybe not commercial uh to see how they

655
00:22:36,559 --> 00:22:38,240
can detect these things as part of your

656
00:22:38,240 --> 00:22:40,000
ci cd file system like privilege

657
00:22:40,000 --> 00:22:41,840
escalation is allowed so maybe you want

658
00:22:41,840 --> 00:22:45,440
to detect them so this is also quite uh

659
00:22:45,440 --> 00:22:47,200
helpful when you are trying to learn and

660
00:22:47,200 --> 00:22:49,039
how you can apply in your organization

661
00:22:49,039 --> 00:22:50,080
at all

662
00:22:50,080 --> 00:22:52,720
so with that i think uh thank you so

663
00:22:52,720 --> 00:22:54,159
much once again for giving the

664
00:22:54,159 --> 00:22:56,480
opportunity and uh i would highly

665
00:22:56,480 --> 00:22:59,200
recommend uh give it a try and see how

666
00:22:59,200 --> 00:23:01,520
it looks like and share the feedback

667
00:23:01,520 --> 00:23:03,520
and also if you like the project and if

668
00:23:03,520 --> 00:23:05,919
you use please share us some love by

669
00:23:05,919 --> 00:23:07,840
giving your handle our name so that we

670
00:23:07,840 --> 00:23:09,679
kind of may be helpful for us to take

671
00:23:09,679 --> 00:23:11,520
feedback and improve this

672
00:23:11,520 --> 00:23:14,400
as well

