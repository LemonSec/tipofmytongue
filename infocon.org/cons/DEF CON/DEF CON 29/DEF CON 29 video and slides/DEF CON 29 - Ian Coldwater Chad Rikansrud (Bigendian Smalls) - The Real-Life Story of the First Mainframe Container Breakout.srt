1
00:00:01,920 --> 00:00:03,480
- Hi, I'm Ian.

2
00:00:03,480 --> 00:00:04,530
I do container things.

3
00:00:04,530 --> 00:00:05,570
- Hi, I'm Chad.

4
00:00:05,570 --> 00:00:07,210
I do mainframe things.

5
00:00:07,210 --> 00:00:08,940
- And we're here to tell you a story today

6
00:00:08,940 --> 00:00:10,993
about some things we did together.

7
00:00:12,170 --> 00:00:14,750
We both live in Minneapolis, Minnesota,

8
00:00:14,750 --> 00:00:17,210
which is a cold dark
place, where it's winter

9
00:00:17,210 --> 00:00:18,783
six months out of the year.

10
00:00:19,640 --> 00:00:22,280
Minnesotan hackers
spend their long winters

11
00:00:22,280 --> 00:00:25,790
stuck inside, doing deep
dive studying ancient Arcana

12
00:00:25,790 --> 00:00:28,980
and getting good at deep
magic, which lends itself well

13
00:00:28,980 --> 00:00:32,403
to weird specializations, and
that's how we ended up here.

14
00:00:33,310 --> 00:00:35,390
It all began in spring 2019.

15
00:00:35,390 --> 00:00:38,423
Like many good things, it
began with a shit post.

16
00:00:40,490 --> 00:00:42,780
A person involved in
DevOps said Kubernetes

17
00:00:42,780 --> 00:00:44,050
is the next mainframe.

18
00:00:44,050 --> 00:00:46,613
So of course, I tagged
Chad and it was like,

19
00:00:46,613 --> 00:00:47,750
what do you think?

20
00:00:47,750 --> 00:00:50,130
I'm not qualified to speak on mainframes.

21
00:00:50,130 --> 00:00:52,200
I'm about as qualified
to speak on mainframes

22
00:00:52,200 --> 00:00:53,900
as I am on beekeeping.

23
00:00:53,900 --> 00:00:56,130
I think I've gotten a
little better at it since,

24
00:00:56,130 --> 00:00:58,683
but anyway, a few days later-

25
00:00:59,754 --> 00:01:02,700
- A few days after that shit
post, we met at a local con

26
00:01:02,700 --> 00:01:04,470
for the first time in-person and talked

27
00:01:04,470 --> 00:01:07,360
about our niche specializations,
the similarities

28
00:01:07,360 --> 00:01:09,120
and differences between them.

29
00:01:09,120 --> 00:01:11,960
Although our worlds don't usually overlap,

30
00:01:11,960 --> 00:01:14,590
the cultures are different,
the timeline is different,

31
00:01:14,590 --> 00:01:16,867
I mean, mainframes have
been around since the 50s

32
00:01:16,867 --> 00:01:19,040
and Kubernetes have been
around for like what?

33
00:01:19,040 --> 00:01:20,760
Six or seven days?

34
00:01:20,760 --> 00:01:22,880
Our approaches had some similarities

35
00:01:22,880 --> 00:01:25,490
and we both knew we had
some knowledge in common.

36
00:01:25,490 --> 00:01:27,960
In the mainframe world,
it's not uncommon to patch

37
00:01:27,960 --> 00:01:31,300
the systems maybe once, twice a year.

38
00:01:31,300 --> 00:01:34,490
- And in the DevOps world,
people do multiple deploys a day.

39
00:01:34,490 --> 00:01:35,950
Culturally, it's really different.

40
00:01:35,950 --> 00:01:38,210
DevOps people are really
open to new things,

41
00:01:38,210 --> 00:01:40,020
open source software, really excited

42
00:01:40,020 --> 00:01:43,380
about doing things quickly
and doing new stuff

43
00:01:43,380 --> 00:01:44,960
and mainframes, maybe not so much.

44
00:01:44,960 --> 00:01:47,050
- No one would ever accuse
the mainframe community

45
00:01:47,050 --> 00:01:49,620
of being excited about change.

46
00:01:49,620 --> 00:01:50,453
- Fair enough.

47
00:01:50,453 --> 00:01:52,300
- Both of us had experienced
pulling things off

48
00:01:52,300 --> 00:01:54,970
that other people said
were completely impossible

49
00:01:54,970 --> 00:01:56,450
in our respective fields.

50
00:01:56,450 --> 00:01:59,460
We figured out how to navigate
an uncharted territory.

51
00:01:59,460 --> 00:02:02,270
We took apart technology
without dedicated tooling

52
00:02:02,270 --> 00:02:04,183
and with little or no prior art.

53
00:02:05,090 --> 00:02:06,750
- We did have some
things in common though.

54
00:02:06,750 --> 00:02:08,620
We had shared knowledge of Linux hacking,

55
00:02:08,620 --> 00:02:11,530
which ended up becoming
helpful for this project later

56
00:02:11,530 --> 00:02:14,010
because containers are
made out of Linux features

57
00:02:14,010 --> 00:02:16,640
and mainframes use Unix filesystems too.

58
00:02:16,640 --> 00:02:18,670
We joked about whether or
not we really could prove

59
00:02:18,670 --> 00:02:21,670
that guy wrong, about Kubernetes
being the next mainframe,

60
00:02:21,670 --> 00:02:23,590
but I didn't really
think we would ever get

61
00:02:23,590 --> 00:02:26,160
to do our thing together because honestly,

62
00:02:26,160 --> 00:02:28,772
who puts containers on a mainframe?

63
00:02:28,772 --> 00:02:32,710
Well, the joke was on me
because just a few months later,

64
00:02:32,710 --> 00:02:36,840
in fall 2019, IBM announced
z/OS Container Extensions,

65
00:02:36,840 --> 00:02:40,173
which we will be referring
to from here on out as zCX.

66
00:02:41,120 --> 00:02:44,030
So we made it into a winter project.

67
00:02:44,030 --> 00:02:46,700
Joining forces and
combining our very specific

68
00:02:46,700 --> 00:02:49,440
particular sets of skills,
we were able to become

69
00:02:49,440 --> 00:02:52,120
the first people on the
planet to escape a container

70
00:02:52,120 --> 00:02:55,150
on mainframe, and that
was just getting started.

71
00:02:55,150 --> 00:02:56,950
This talk is about how we did that.

72
00:02:56,950 --> 00:02:59,320
It's a talk about
friendship, collaboration,

73
00:02:59,320 --> 00:03:02,420
cross-disciplinary skill
sharing and figuring out

74
00:03:02,420 --> 00:03:04,980
how to escape containers on the moon.

75
00:03:04,980 --> 00:03:06,553
But first, a couple of things.

76
00:03:07,519 --> 00:03:10,440
- It would violate the
laws of physics and math

77
00:03:10,440 --> 00:03:12,460
to fit all of the technical background

78
00:03:12,460 --> 00:03:15,570
that Ian and myself had about
our two niche disciplines

79
00:03:15,570 --> 00:03:17,900
into the amount of time
that we have for this talk.

80
00:03:17,900 --> 00:03:20,760
However, we have not figured
out how yet to do this,

81
00:03:20,760 --> 00:03:23,120
but we're making a lot of
progress and we'll make

82
00:03:23,120 --> 00:03:24,990
a note of it for future talks.

83
00:03:24,990 --> 00:03:27,280
So we're not doing that today.

84
00:03:27,280 --> 00:03:29,600
We encourage people that are
interested in finding out more

85
00:03:29,600 --> 00:03:31,630
to check the resources in
our reference sections,

86
00:03:31,630 --> 00:03:34,250
or if you're seeing this
in-person come around

87
00:03:34,250 --> 00:03:35,640
and ask a question.

88
00:03:35,640 --> 00:03:37,133
There's a lot of ways to attack this thing

89
00:03:37,133 --> 00:03:39,420
that we're not gonna be covering today,

90
00:03:39,420 --> 00:03:41,100
but we reserve the right

91
00:03:41,100 --> 00:03:43,260
to not answer questions about those.

92
00:03:43,260 --> 00:03:45,230
- If you're not here
in-person and you're watching

93
00:03:45,230 --> 00:03:48,610
this virtually now or later,
we're around the interwebs too,

94
00:03:48,610 --> 00:03:49,824
you could probably find
out probably Twitter.

95
00:03:49,824 --> 00:03:51,074
- Probably Twitter, yeah.

96
00:03:52,560 --> 00:03:56,160
Speaking of which, we
disclosed this to IBM and IBM

97
00:03:56,160 --> 00:03:58,240
sent us a formal statement about it.

98
00:03:58,240 --> 00:04:00,500
To our knowledge, this is unprecedented.

99
00:04:00,500 --> 00:04:02,301
So we figured we would share it here.

100
00:04:02,301 --> 00:04:03,780
'Cause it's from IBM.

101
00:04:03,780 --> 00:04:07,040
- Yeah, I've disclosed
vulnerabilities to IBM in the past

102
00:04:07,040 --> 00:04:09,630
and friends of mine have also
disclosed vulnerabilities

103
00:04:09,630 --> 00:04:12,180
to IBM, specifically, for System Z

104
00:04:12,180 --> 00:04:14,570
and they never get talked about publicly.

105
00:04:14,570 --> 00:04:16,667
This is fantastic, I
really appreciate this,

106
00:04:16,667 --> 00:04:18,867
and I hope they do this
again in the future.

107
00:04:19,730 --> 00:04:21,780
- So yeah, that was pretty cool.

108
00:04:21,780 --> 00:04:23,380
Anyway, let's get to it.

109
00:04:23,380 --> 00:04:25,063
So what is this thing?

110
00:04:26,190 --> 00:04:27,520
Containers on a mainframe?

111
00:04:27,520 --> 00:04:28,353
What?

112
00:04:28,353 --> 00:04:29,186
That's weird.

113
00:04:30,420 --> 00:04:32,650
- First off, let's do some myth-busting.

114
00:04:32,650 --> 00:04:35,210
Mainframes still exist,
they're widely used

115
00:04:35,210 --> 00:04:37,950
and the tech is more
modern than you think.

116
00:04:37,950 --> 00:04:41,960
Unix or AIX has been ported
and running a mainframe

117
00:04:41,960 --> 00:04:45,020
since the early 90s and now,
there are actual containers

118
00:04:45,020 --> 00:04:47,380
that run inside an address space on IBM's

119
00:04:47,380 --> 00:04:50,530
most prevalent mainframe OS z/OS.

120
00:04:50,530 --> 00:04:53,550
Every one of you used a
mainframe today or in-person

121
00:04:53,550 --> 00:04:57,270
on the way here if you ran a credit card,

122
00:04:57,270 --> 00:05:00,310
if you went to an ATM,
if you took an airplane,

123
00:05:00,310 --> 00:05:01,453
you used a mainframe.

124
00:05:02,930 --> 00:05:05,860
IBM's product name for this is zCX.

125
00:05:05,860 --> 00:05:08,220
I'll explain what that
is, but first, let's do

126
00:05:08,220 --> 00:05:10,930
some super basic mainframe primmer.

127
00:05:10,930 --> 00:05:13,130
The mainframe we're referring to today

128
00:05:13,130 --> 00:05:16,280
is IBM's flagship System Z.

129
00:05:16,280 --> 00:05:18,220
The operating system is known z/OS.

130
00:05:18,220 --> 00:05:21,410
Some site, excuse me,
sometimes it's still called MPS

131
00:05:21,410 --> 00:05:22,770
by us old timers.

132
00:05:22,770 --> 00:05:24,460
It runs most of the
mainframes on the planet

133
00:05:24,460 --> 00:05:27,260
and it runs a unique architecture
called z/Architecture.

134
00:05:28,390 --> 00:05:32,550
Within this OS, the basic unit
of user or process separation

135
00:05:32,550 --> 00:05:34,450
is known as an address space.

136
00:05:34,450 --> 00:05:38,840
zCX is a custom hypervisor,
which emulates z/Architecture

137
00:05:38,840 --> 00:05:42,111
and runs in its own address base on z/OS.

138
00:05:42,111 --> 00:05:44,710
Atop zCX, there is a customized

139
00:05:44,710 --> 00:05:48,460
barebones Linux image
running Docker containers.

140
00:05:48,460 --> 00:05:52,250
IBM hardened this image and
created a custom Docker plugin

141
00:05:52,250 --> 00:05:55,560
to support a secure Docker base install,

142
00:05:55,560 --> 00:05:58,490
which allows the user to
create and manage containers.

143
00:05:58,490 --> 00:06:00,883
So, Ian, what's a container?

144
00:06:02,000 --> 00:06:04,210
- [Ian] What is a container?

145
00:06:04,210 --> 00:06:06,660
First of all, let's talk
about what it's not.

146
00:06:06,660 --> 00:06:09,410
A container is not the same
thing as a virtual machine.

147
00:06:09,410 --> 00:06:11,040
Containers don't have their own kernels

148
00:06:11,040 --> 00:06:14,050
or standalone resources,
at least most of the time.

149
00:06:14,050 --> 00:06:15,780
Containers share resources with each other

150
00:06:15,780 --> 00:06:18,430
and with their hosts, and
unlike a virtual machine,

151
00:06:18,430 --> 00:06:20,060
if you kill a container process,

152
00:06:20,060 --> 00:06:22,200
you kill the entire container.

153
00:06:22,200 --> 00:06:23,950
Docker is the most
common container engine,

154
00:06:23,950 --> 00:06:26,650
but it's not the only one, and
they can vary pretty widely

155
00:06:26,650 --> 00:06:28,440
in implementation and behavior.

156
00:06:28,440 --> 00:06:30,311
Some of them even have hypervisors.

157
00:06:30,311 --> 00:06:32,230
zCX does use Docker though,

158
00:06:32,230 --> 00:06:34,550
so that's what we're going
to be talking about today.

159
00:06:34,550 --> 00:06:36,140
This isn't the first
time Docker containers

160
00:06:36,140 --> 00:06:37,770
have been run on mainframe computers.

161
00:06:37,770 --> 00:06:39,960
Docker has been running on
bare metal Linux instances

162
00:06:39,960 --> 00:06:42,951
on mainframes for a minute,
but that's just plain Linux.

163
00:06:42,951 --> 00:06:45,230
zCX is different because
it's the first time

164
00:06:45,230 --> 00:06:48,020
containers have been run on z/OS.

165
00:06:48,020 --> 00:06:49,570
But what is a container anyway?

166
00:06:50,510 --> 00:06:53,680
Well, a container isn't
really a thing at all.

167
00:06:53,680 --> 00:06:55,650
They're basically a set
of native Linux features

168
00:06:55,650 --> 00:06:58,820
that are put together in
order to isolate a process.

169
00:06:58,820 --> 00:07:00,996
These features are cgroups and namespaces.

170
00:07:00,996 --> 00:07:03,140
Cgroups determined what
resources a process

171
00:07:03,140 --> 00:07:06,110
is permitted to use like CPU and memory.

172
00:07:06,110 --> 00:07:08,830
Namespaces determine what a
process is permitted to see,

173
00:07:08,830 --> 00:07:11,300
like directories and other processes.

174
00:07:11,300 --> 00:07:13,300
Together, cgroups and namespaces make up

175
00:07:13,300 --> 00:07:14,480
what we call a container,

176
00:07:14,480 --> 00:07:17,130
which is really just an isolated process.

177
00:07:17,130 --> 00:07:19,280
Containers as a concept don't really exist

178
00:07:19,280 --> 00:07:20,560
in the Linux kernel.

179
00:07:20,560 --> 00:07:22,860
As far as the kernel is
concerned, a container

180
00:07:22,860 --> 00:07:26,300
is no different than any other
process running on the host.

181
00:07:26,300 --> 00:07:28,400
What this also means is that you can look

182
00:07:28,400 --> 00:07:29,860
at a container process like you could

183
00:07:29,860 --> 00:07:31,900
any other process at the Linux host.

184
00:07:31,900 --> 00:07:34,460
For this demo, we've already
escaped to the zCX host,

185
00:07:34,460 --> 00:07:35,860
so we're looking from there.

186
00:07:37,010 --> 00:07:38,750
So let's run a container
with the name honk

187
00:07:38,750 --> 00:07:41,090
command sleep 1312.

188
00:07:41,090 --> 00:07:42,830
The honk isn't really necessary here,

189
00:07:42,830 --> 00:07:44,680
I just wanted to honk at you.

190
00:07:44,680 --> 00:07:45,940
If we list our containers,

191
00:07:45,940 --> 00:07:48,480
we can then see that container running.

192
00:07:48,480 --> 00:07:51,190
We can see this or any other
container on the outside

193
00:07:51,190 --> 00:07:53,300
by running a PS command,
which will show us

194
00:07:53,300 --> 00:07:56,330
containers running on the host
alongside other processes.

195
00:07:56,330 --> 00:07:58,820
This command output will
give you the process ID,

196
00:07:58,820 --> 00:08:00,730
the user running it,
the PID namespace number

197
00:08:00,730 --> 00:08:02,800
and the command line argument.

198
00:08:02,800 --> 00:08:05,220
If we want to take a look at
the inside of the container,

199
00:08:05,220 --> 00:08:07,760
we can do so by looking
at the proc and S folder

200
00:08:07,760 --> 00:08:10,000
for the process ID of that container.

201
00:08:10,000 --> 00:08:12,230
We found the PID of the
container we just created

202
00:08:12,230 --> 00:08:14,480
in the PS command output we just ran.

203
00:08:14,480 --> 00:08:15,730
Let's take a closer look.

204
00:08:16,840 --> 00:08:19,350
We take a look here, we can
see the cgroup at the top

205
00:08:19,350 --> 00:08:21,330
and the other namespaces on the bottom.

206
00:08:21,330 --> 00:08:24,600
All processes on X are made
up of these namespaces.

207
00:08:24,600 --> 00:08:27,030
As of kernel version 5.6,
there's also a time namespace,

208
00:08:27,030 --> 00:08:29,630
but zCX runs it old ass kernel,

209
00:08:29,630 --> 00:08:31,198
so this demo won't show you that one.

210
00:08:31,198 --> 00:08:32,770
Depending on the configuration

211
00:08:32,770 --> 00:08:34,260
and how the container was created,

212
00:08:34,260 --> 00:08:36,520
some of these namespaces
might be shared with the host

213
00:08:36,520 --> 00:08:38,582
and some might be unique to the container.

214
00:08:38,582 --> 00:08:40,440
We're not going to get into that here,

215
00:08:40,440 --> 00:08:42,120
but I recommend checking out the resources

216
00:08:42,120 --> 00:08:44,350
in the reference section to learn more.

217
00:08:44,350 --> 00:08:45,200
And that's it.

218
00:08:45,200 --> 00:08:47,030
Honestly, that might be the closest thing

219
00:08:47,030 --> 00:08:48,170
you're ever going to be able to get

220
00:08:48,170 --> 00:08:50,660
to being able to actually
look at a container

221
00:08:50,660 --> 00:08:52,780
because that's all a container is,

222
00:08:52,780 --> 00:08:54,980
a process made up of
cgroups and namespaces.

223
00:08:56,140 --> 00:08:58,490
Because containers do share
resources with one another

224
00:08:58,490 --> 00:09:00,860
and their hosts, containers present a wide

225
00:09:00,860 --> 00:09:02,920
and varied attack surface
where if a container

226
00:09:02,920 --> 00:09:04,680
is compromised or misconfigured,

227
00:09:04,680 --> 00:09:07,400
containers can compromise
each other and their hosts.

228
00:09:07,400 --> 00:09:09,550
I just think they're neat,
they're fun to break.

229
00:09:09,550 --> 00:09:11,343
So let's talk about breaking some.

230
00:09:13,413 --> 00:09:16,260
So how to break this thing anyway.

231
00:09:16,260 --> 00:09:18,190
We approached zCX from both ends

232
00:09:18,190 --> 00:09:20,440
using our respective
knowledge and skill sets,

233
00:09:20,440 --> 00:09:23,270
and we ended up taking
zCX completely apart

234
00:09:23,270 --> 00:09:25,800
from both the container
side down into the mainframe

235
00:09:25,800 --> 00:09:28,133
and the mainframe side
up into the containers.

236
00:09:29,110 --> 00:09:30,920
But first, before we did anything else,

237
00:09:30,920 --> 00:09:32,720
Chad set up a lab in the cloud.

238
00:09:32,720 --> 00:09:33,658
- It's true.

239
00:09:33,658 --> 00:09:36,220
It was a complicated
lab and it took a while

240
00:09:36,220 --> 00:09:37,200
to get it going.

241
00:09:37,200 --> 00:09:38,540
Let me explain.

242
00:09:38,540 --> 00:09:41,830
We had to build a
cloud-based z/OS environment

243
00:09:41,830 --> 00:09:44,620
with the latest zCX code release.

244
00:09:44,620 --> 00:09:47,590
We used IBM's zPDT that stands

245
00:09:47,590 --> 00:09:49,710
for z Personal Development Tool.

246
00:09:49,710 --> 00:09:52,930
It's a virtualized platform
that emulates z hardware

247
00:09:52,930 --> 00:09:55,140
and runs atop Linux.

248
00:09:55,140 --> 00:09:59,280
On top of the zPDT, we loaded
the newest z/OS version,

249
00:09:59,280 --> 00:10:01,550
fully patched it and we're able to install

250
00:10:01,550 --> 00:10:03,350
and run zCX in the cloud.

251
00:10:03,350 --> 00:10:05,030
So it looks a little bit like this.

252
00:10:05,030 --> 00:10:07,780
Atop of Leno, which is a hosting provider,

253
00:10:07,780 --> 00:10:09,620
we run a Linux instance.

254
00:10:09,620 --> 00:10:13,030
Running that Linux instance is zPDT.

255
00:10:13,030 --> 00:10:16,239
On top of zPDT hypervisor is z/OS.

256
00:10:16,239 --> 00:10:18,720
Within z/OS, there's an address space,

257
00:10:18,720 --> 00:10:21,120
which runs the zCX hypervisor.

258
00:10:21,120 --> 00:10:23,370
Atop that, runs a Linux instance,

259
00:10:23,370 --> 00:10:26,394
and in that, runs Docker on Docker,

260
00:10:26,394 --> 00:10:29,880
and that's our research
environment, simple.

261
00:10:29,880 --> 00:10:32,490
- Something along those lines, yeah.

262
00:10:32,490 --> 00:10:35,980
So, but to really be able to attack this,

263
00:10:35,980 --> 00:10:38,170
we needed to level up our skill sets.

264
00:10:38,170 --> 00:10:40,700
So we started out by
cross-training each other.

265
00:10:40,700 --> 00:10:42,390
We set aside time to share skills

266
00:10:42,390 --> 00:10:45,040
and get each other up to
speed enough to be dangerous

267
00:10:45,040 --> 00:10:47,440
because for me, I didn't really know

268
00:10:47,440 --> 00:10:49,410
how to do anything with a mainframe.

269
00:10:49,410 --> 00:10:50,710
- I couldn't spell Docker.

270
00:10:51,926 --> 00:10:53,070
- But you're good.

271
00:10:53,070 --> 00:10:55,755
And so, we needed a little bit of help

272
00:10:55,755 --> 00:10:57,210
getting each other up to speed.

273
00:10:57,210 --> 00:10:58,460
So we started doing that.

274
00:11:00,030 --> 00:11:03,030
First thing, I took Chad's
Evil Mainframe class.

275
00:11:03,030 --> 00:11:04,170
Chad's a really good teacher.

276
00:11:04,170 --> 00:11:05,190
It's a really good training.

277
00:11:05,190 --> 00:11:07,000
If you ever get the
chance, I recommend it.

278
00:11:07,000 --> 00:11:09,530
It's offered as such cons that you may

279
00:11:09,530 --> 00:11:11,250
or may not have heard of like BlackHat

280
00:11:11,250 --> 00:11:12,610
every once in a while.

281
00:11:12,610 --> 00:11:14,610
So the training is multiple days long.

282
00:11:14,610 --> 00:11:16,340
It goes over the history of mainframes,

283
00:11:16,340 --> 00:11:19,190
how everything works and
there was a CTF at the end.

284
00:11:19,190 --> 00:11:21,550
It was really good, I had a
really good time with that.

285
00:11:21,550 --> 00:11:24,070
Mainframes were brand new to me.

286
00:11:24,070 --> 00:11:25,640
I had never touched one before.

287
00:11:25,640 --> 00:11:28,150
I had never really had an occasion to.

288
00:11:28,150 --> 00:11:30,710
I'm used to bleeding edge
cloud native tech stacks.

289
00:11:30,710 --> 00:11:33,480
That old stuff never really
comes into play for me at work,

290
00:11:33,480 --> 00:11:36,155
and while Unix system
services felt familiar enough,

291
00:11:36,155 --> 00:11:38,100
the older stuff was wild.

292
00:11:38,100 --> 00:11:40,130
I had never seen or
dealt with architecture

293
00:11:40,130 --> 00:11:40,963
like that before.

294
00:11:40,963 --> 00:11:43,030
It was so foreign to me, it might as well

295
00:11:43,030 --> 00:11:44,770
have been made on the moon.

296
00:11:44,770 --> 00:11:45,940
I learn in systems.

297
00:11:45,940 --> 00:11:48,600
So it took me a little while
longer to ramp up at first,

298
00:11:48,600 --> 00:11:50,840
until I figured out how the
whole thing works together.

299
00:11:50,840 --> 00:11:52,366
Chad was very patient with this.

300
00:11:52,366 --> 00:11:54,080
I did get there eventually.

301
00:11:54,080 --> 00:11:56,250
I still got the mainframes though.

302
00:11:56,250 --> 00:11:57,610
- Don't let Ian fool you.

303
00:11:57,610 --> 00:11:59,880
They picked up mainframes super fast,

304
00:11:59,880 --> 00:12:01,563
as good as anyone I've seen.

305
00:12:03,500 --> 00:12:05,660
The next thing was for me
to train up on containers,

306
00:12:05,660 --> 00:12:09,770
and Ian helped me do the
Secure Kubernetes CTF.

307
00:12:09,770 --> 00:12:12,550
I'd done only a little bit
of work on Docker before,

308
00:12:12,550 --> 00:12:15,310
generally with CTFs and the like.

309
00:12:15,310 --> 00:12:18,290
It's always seemed like a
little bit of magic to me.

310
00:12:18,290 --> 00:12:19,860
Working with Kubernetes and Dockers

311
00:12:19,860 --> 00:12:22,870
and the Secure Kubernetes
CTF really helped me

312
00:12:22,870 --> 00:12:24,840
make some sense out of it.

313
00:12:24,840 --> 00:12:27,670
It did bring me back to my
beginning mainframe days.

314
00:12:27,670 --> 00:12:31,710
I mean, this is complex and
a really steep learning curve

315
00:12:31,710 --> 00:12:34,680
of a bunch of abstract concepts.

316
00:12:34,680 --> 00:12:37,140
I still put my overall
understanding of Kubernetes

317
00:12:37,140 --> 00:12:40,420
at like 5% maybe and containers somewhere

318
00:12:40,420 --> 00:12:42,490
in the neighborhood of maybe 30%,

319
00:12:42,490 --> 00:12:46,340
but working side by side with
Ian has really helped me.

320
00:12:46,340 --> 00:12:49,790
They always stopped to take the
time to answer my questions,

321
00:12:49,790 --> 00:12:52,350
very detailed answers and examples.

322
00:12:52,350 --> 00:12:54,640
I definitely would not
have wanted to embark

323
00:12:54,640 --> 00:12:57,603
on this without their
guidance and patience.

324
00:12:58,660 --> 00:13:00,160
- Don't let Chad fool you either.

325
00:13:00,160 --> 00:13:02,530
He took right to it because he already had

326
00:13:02,530 --> 00:13:04,800
a base of Linux knowledge
and because containers

327
00:13:04,800 --> 00:13:06,240
are made out of Linux internals

328
00:13:06,240 --> 00:13:08,600
and container orchestration
is made out of containers,

329
00:13:08,600 --> 00:13:11,250
he was up and running really fast.

330
00:13:11,250 --> 00:13:13,680
It was really fun to watch,
and it was really fun to get

331
00:13:13,680 --> 00:13:15,770
to come up with a curriculum to train you

332
00:13:15,770 --> 00:13:17,720
'cause I'm not a professional trainer.

333
00:13:17,720 --> 00:13:19,330
That wasn't really
something I had done before,

334
00:13:19,330 --> 00:13:21,540
so it was cool to like
come up with one for ya,

335
00:13:21,540 --> 00:13:24,810
to teach you everything, or
at least some of the things.

336
00:13:24,810 --> 00:13:27,340
Anyway, so after we had
trained each other up,

337
00:13:27,340 --> 00:13:29,470
we took our new skills
and our existing knowledge

338
00:13:29,470 --> 00:13:31,550
and started taking a look at the product.

339
00:13:31,550 --> 00:13:33,350
Working together but separately,

340
00:13:33,350 --> 00:13:35,750
we looked at our respective spaces.

341
00:13:35,750 --> 00:13:37,590
I looked at the containers.

342
00:13:37,590 --> 00:13:39,017
- And I looked at the mainframes.

343
00:13:39,017 --> 00:13:42,173
- And we tried to figure
out how to get into it.

344
00:13:42,173 --> 00:13:44,210
- But the mainframe, and I started

345
00:13:44,210 --> 00:13:47,440
with the initial provisioning of zCX.

346
00:13:47,440 --> 00:13:49,870
This is where the primary image files live

347
00:13:49,870 --> 00:13:52,570
in the Unix subsystems on the mainframe.

348
00:13:52,570 --> 00:13:54,640
This is where you initiate zCX.

349
00:13:54,640 --> 00:13:57,210
You provision it, and
thus all of the artifacts

350
00:13:57,210 --> 00:13:59,633
that might be interesting
to us are stored here.

351
00:14:02,610 --> 00:14:04,527
I offloaded these files used to build

352
00:14:04,527 --> 00:14:07,160
the root zCX filesystem to a Linux box,

353
00:14:07,160 --> 00:14:10,170
and then I could take them
apart with the proper tools.

354
00:14:10,170 --> 00:14:14,383
I fired up my exotic
hacking tools like strings.

355
00:14:14,383 --> 00:14:17,760
I quickly discerned that
the core of these image

356
00:14:17,760 --> 00:14:21,290
had two main parts, a
whole bunch of Bash scripts

357
00:14:21,290 --> 00:14:23,960
and a bunch of Linux disc images.

358
00:14:23,960 --> 00:14:26,350
I extracted and examined
these Bash scripts

359
00:14:26,350 --> 00:14:31,070
alongside the job log, which
shows messages as zCX launches.

360
00:14:31,070 --> 00:14:32,810
Immediately, I noticed that the scripts

361
00:14:32,810 --> 00:14:34,510
all had debugging outputs,

362
00:14:34,510 --> 00:14:36,970
but that none of the debugging
outputs were showing up

363
00:14:36,970 --> 00:14:38,160
on the job log.

364
00:14:38,160 --> 00:14:39,023
What to do?

365
00:14:39,023 --> 00:14:41,270
Well, going back to the Bash scripts,

366
00:14:41,270 --> 00:14:43,640
I looked and there was
this super helpful line

367
00:14:43,640 --> 00:14:45,640
near the top of the
first bootloader script

368
00:14:45,640 --> 00:14:47,060
that gave away the secret.

369
00:14:47,060 --> 00:14:49,910
Uncomment this line to
enable debugging output.

370
00:14:49,910 --> 00:14:53,000
Thanks developers, who said
being a hacker was difficult?

371
00:14:53,000 --> 00:14:55,363
All you have to do is
just learn how to read.

372
00:14:56,580 --> 00:14:59,463
So I patched this binary,
put it back on the mainframe

373
00:14:59,463 --> 00:15:03,890
and re-provisioned a new zCX, fabulous.

374
00:15:03,890 --> 00:15:06,310
The job log sped out all of the debug

375
00:15:06,310 --> 00:15:08,420
for all of the bootloader stages.

376
00:15:08,420 --> 00:15:09,820
There were so many messages though

377
00:15:09,820 --> 00:15:12,630
about keys and decryption.

378
00:15:12,630 --> 00:15:15,253
My interests was piqued
and the hunt was on.

379
00:15:16,180 --> 00:15:18,780
I patched the Bash script
up again and started

380
00:15:18,780 --> 00:15:21,000
looking for the initial decryption keys.

381
00:15:21,000 --> 00:15:23,230
I used the tried and true hacker skills

382
00:15:23,230 --> 00:15:26,500
of echo privatekey.pem,
and I dumped the first

383
00:15:26,500 --> 00:15:28,870
of several encryption keys to the job log.

384
00:15:28,870 --> 00:15:32,480
However, I couldn't fully
reverse the filesystem yet

385
00:15:32,480 --> 00:15:35,540
because despite being
able to echo these keys

386
00:15:35,540 --> 00:15:38,620
in the initial bootloader
processes to the job log,

387
00:15:38,620 --> 00:15:41,710
I couldn't actually find
the keys in the filesystem.

388
00:15:41,710 --> 00:15:43,199
It's a pretty complex setup.

389
00:15:43,199 --> 00:15:46,830
So I could copy the keys one
by one out of the job log,

390
00:15:46,830 --> 00:15:49,040
but this is a colossal pain in the ass.

391
00:15:49,040 --> 00:15:50,930
For the moment, I was stuck

392
00:15:50,930 --> 00:15:52,610
and I turned it back over to Ian.

393
00:15:52,610 --> 00:15:54,270
- So looking at the container set up,

394
00:15:54,270 --> 00:15:56,870
I immediately saw some
things that looked promising.

395
00:15:57,720 --> 00:16:00,370
First of all, the initial
user was in the Docker group,

396
00:16:00,370 --> 00:16:02,630
which is a security host so fundamental,

397
00:16:02,630 --> 00:16:04,580
it literally comes with a warning label

398
00:16:04,580 --> 00:16:06,723
on every new install on z/OS.

399
00:16:07,720 --> 00:16:09,190
Somebody had to have seen this label

400
00:16:09,190 --> 00:16:10,990
and actively ignored it.

401
00:16:10,990 --> 00:16:12,250
Wow, okay.

402
00:16:12,250 --> 00:16:14,010
So, sweet, this looks good.

403
00:16:14,010 --> 00:16:15,543
Moving on.

404
00:16:15,543 --> 00:16:20,290
The container setup that zCX
has was Docker and Docker,

405
00:16:20,290 --> 00:16:21,910
which has known security holes,

406
00:16:21,910 --> 00:16:24,160
especially in certain configurations.

407
00:16:24,160 --> 00:16:26,860
There are a couple of
approaches to Docker and Docker.

408
00:16:27,840 --> 00:16:29,480
It can mean running the Docker daemon

409
00:16:29,480 --> 00:16:32,350
inside a container, running
inside another container

410
00:16:32,350 --> 00:16:36,890
or it can mean running only the Docker CLI

411
00:16:36,890 --> 00:16:39,120
or the Docker STK in the
container and connecting it

412
00:16:39,120 --> 00:16:40,910
to the Docker daemon on the host.

413
00:16:40,910 --> 00:16:43,273
zCX has a set up like the latter one.

414
00:16:44,510 --> 00:16:47,080
The approach to Docker
and Docker that zCX uses

415
00:16:47,080 --> 00:16:49,120
has a few different no
drawbacks and some known

416
00:16:49,120 --> 00:16:51,900
security holes, because in this setup,

417
00:16:51,900 --> 00:16:53,660
the container running the Docker CLI

418
00:16:53,660 --> 00:16:56,760
can manipulate any containers
running on the host.

419
00:16:56,760 --> 00:16:59,740
It can, for example, remove containers,

420
00:16:59,740 --> 00:17:01,590
it can create privileged containers

421
00:17:01,590 --> 00:17:04,140
that allow root equivalent
access to the host

422
00:17:05,650 --> 00:17:10,650
and zcxauthplugin, which was
part of their security model,

423
00:17:10,770 --> 00:17:12,260
tried to account for this,

424
00:17:12,260 --> 00:17:14,300
but it didn't quite work entirely.

425
00:17:14,300 --> 00:17:15,133
Wait, what?

426
00:17:15,133 --> 00:17:17,130
I hadn't mentioned zcxauthplugin yet.

427
00:17:17,130 --> 00:17:18,250
What's up with this?

428
00:17:18,250 --> 00:17:19,570
Let's get there.

429
00:17:19,570 --> 00:17:22,940
So I had looked at this
and realized pretty quickly

430
00:17:22,940 --> 00:17:25,070
that it wasn't completely wide open.

431
00:17:25,070 --> 00:17:26,920
My first attempts of doing this sort

432
00:17:26,920 --> 00:17:29,570
of like most bog standard
kind of like, okay,

433
00:17:29,570 --> 00:17:31,780
can I run a container that
is privileged in here?

434
00:17:31,780 --> 00:17:33,160
Can I execute a command as root?

435
00:17:33,160 --> 00:17:34,630
That kind of thing, we're blocked

436
00:17:34,630 --> 00:17:37,760
by this Docker authorization plugin

437
00:17:37,760 --> 00:17:40,448
that they were using called zcxauthplugin.

438
00:17:40,448 --> 00:17:42,640
Zcxauthplugin did a few different things,

439
00:17:42,640 --> 00:17:44,150
blocked privileged containers,

440
00:17:44,150 --> 00:17:46,140
blocked executed commands as root,

441
00:17:46,140 --> 00:17:47,840
it also blocked mounting the host path

442
00:17:47,840 --> 00:17:49,410
as a rewrite (indistinct).

443
00:17:49,410 --> 00:17:51,070
Okay, fair enough.

444
00:17:51,070 --> 00:17:52,630
But I knew there had to
be a way to get into this,

445
00:17:52,630 --> 00:17:54,730
because honestly, just look at that setup

446
00:17:54,730 --> 00:17:56,760
and I wanted to figure
out how the thing worked.

447
00:17:56,760 --> 00:18:01,410
So as I do, I went to the
docs and as they often do,

448
00:18:01,410 --> 00:18:05,465
the docs pointed the way, quite literally.

449
00:18:05,465 --> 00:18:08,610
IBM helpfully listed all
the security restrictions

450
00:18:08,610 --> 00:18:10,603
on the product, telling us all the things

451
00:18:10,603 --> 00:18:12,360
that we were not allowed to do

452
00:18:12,360 --> 00:18:14,650
because they adversely
affected security features

453
00:18:14,650 --> 00:18:16,980
or may compromise the product.

454
00:18:16,980 --> 00:18:19,230
Well then, thanks IBM.

455
00:18:19,230 --> 00:18:20,400
I appreciate the tips.

456
00:18:20,400 --> 00:18:21,720
I was clearly going to have to try

457
00:18:21,720 --> 00:18:23,730
all of those immediately.

458
00:18:23,730 --> 00:18:25,856
The language in the
docs at the time claimed

459
00:18:25,856 --> 00:18:28,290
that it was not possible to become root

460
00:18:28,290 --> 00:18:31,310
or access or modify the Linux host,

461
00:18:31,310 --> 00:18:33,770
but I knew that it was
possible because they gave

462
00:18:33,770 --> 00:18:35,750
enough information that
way about their system

463
00:18:35,750 --> 00:18:36,740
to tell me so.

464
00:18:36,740 --> 00:18:37,780
Here's why.

465
00:18:37,780 --> 00:18:40,580
For one thing, what zcxauthplugin blocked

466
00:18:40,580 --> 00:18:43,040
gave me very specific error messages.

467
00:18:43,040 --> 00:18:45,380
For another thing, the
commands they were blocking

468
00:18:45,380 --> 00:18:47,698
through zcxauthplugin were very specific,

469
00:18:47,698 --> 00:18:51,470
which pointed to a specific
set of system configurations

470
00:18:51,470 --> 00:18:54,440
and also as a possibility
maybe that they might be

471
00:18:54,440 --> 00:18:56,974
blocking through pattern matching rejects.

472
00:18:56,974 --> 00:18:58,500
Really?

473
00:18:58,500 --> 00:19:00,740
This was like trying to
prevent SQL injections

474
00:19:00,740 --> 00:19:03,090
by banning the string 01 one equals one

475
00:19:03,090 --> 00:19:05,220
without banning other
things like for example,

476
00:19:05,220 --> 00:19:09,360
and one he was one or
parameterizing queries

477
00:19:09,360 --> 00:19:10,690
on the backend or anything else,

478
00:19:10,690 --> 00:19:13,640
like one by two with SQL injections.

479
00:19:13,640 --> 00:19:16,760
Even if it is possible
to prevent all attacks

480
00:19:16,760 --> 00:19:18,850
via trying to block known bad syntax,

481
00:19:18,850 --> 00:19:20,914
which I think those people
here can probably guess

482
00:19:20,914 --> 00:19:24,360
that it's not because there's
lots of ways to bypass that,

483
00:19:24,360 --> 00:19:27,430
it was also immediately
clear upon looking at this

484
00:19:27,430 --> 00:19:29,956
that there were a lot
of options they missed,

485
00:19:29,956 --> 00:19:32,030
many of which were security relevant.

486
00:19:32,030 --> 00:19:33,420
And in fact, going through the docs,

487
00:19:33,420 --> 00:19:36,820
it became obvious pretty
quickly that maybe the folks

488
00:19:36,820 --> 00:19:37,820
who were developing this thing

489
00:19:37,820 --> 00:19:39,703
were a little newer to containers.

490
00:19:41,630 --> 00:19:43,160
Another page in the documentation

491
00:19:43,160 --> 00:19:45,220
had a section on
restrictions on bind mounts,

492
00:19:45,220 --> 00:19:48,550
which said that you couldn't
mount host resources.

493
00:19:48,550 --> 00:19:50,450
Okay, I already knew that the plugin

494
00:19:50,450 --> 00:19:52,100
tried to block that one.

495
00:19:52,100 --> 00:19:56,680
It also mentioned that
var/run/docker.sock was read-only.

496
00:19:56,680 --> 00:19:59,643
Oh, that was the key to the front door.

497
00:20:00,760 --> 00:20:02,923
Let's talk about the
Docker socket for a minute.

498
00:20:04,010 --> 00:20:08,250
The Docker socket is
a known security hole,

499
00:20:08,250 --> 00:20:11,890
if you leave it exposed, to, for example,

500
00:20:11,890 --> 00:20:13,260
users in the Docker group.

501
00:20:13,260 --> 00:20:16,960
This gives that user root
equivalent access to the host.

502
00:20:16,960 --> 00:20:20,250
And read-only for the Docker socket

503
00:20:20,250 --> 00:20:22,950
is not a security boundary
for a couple of reasons.

504
00:20:22,950 --> 00:20:25,770
One, you can make a whole volume read-only

505
00:20:25,770 --> 00:20:28,170
and all of the files
in a folder read-only,

506
00:20:28,170 --> 00:20:29,600
and that doesn't actually affect sockets

507
00:20:29,600 --> 00:20:31,410
because sockets don't work that way.

508
00:20:31,410 --> 00:20:34,330
Also, the Docker socket in
particular has an API layer

509
00:20:34,330 --> 00:20:37,530
that you can make calls to and
an entire Docker Engine API

510
00:20:37,530 --> 00:20:39,400
for commands that you could execute to it

511
00:20:39,400 --> 00:20:41,080
while making those calls.

512
00:20:41,080 --> 00:20:44,230
And in the commands that the
docs had mentioned blocking,

513
00:20:44,230 --> 00:20:46,020
they didn't mention any of the syntax

514
00:20:46,020 --> 00:20:48,323
around the Engine API at all.

515
00:20:52,470 --> 00:20:55,100
So I made a cURL call.

516
00:20:55,100 --> 00:20:57,360
Creating a new container
that mounted the host path

517
00:20:57,360 --> 00:21:00,260
as a rewrite bind mount via Engine syntax.

518
00:21:00,260 --> 00:21:02,100
And hey, it worked.

519
00:21:02,100 --> 00:21:04,110
So I knew that making calls could work

520
00:21:04,110 --> 00:21:06,210
and that binds was an option they missed.

521
00:21:06,210 --> 00:21:07,220
Sweet.

522
00:21:07,220 --> 00:21:09,440
But when I tried shooting
out into the host system,

523
00:21:09,440 --> 00:21:11,790
it didn't quite work the
way that I wanted it to,

524
00:21:11,790 --> 00:21:14,630
because they had enabled
username space remapping.

525
00:21:14,630 --> 00:21:16,500
What this means for my
purposes is that once

526
00:21:16,500 --> 00:21:17,770
I was out of that namespace,

527
00:21:17,770 --> 00:21:19,280
even though it said I was root,

528
00:21:19,280 --> 00:21:22,250
I couldn't really do anything
meaningful in that namespace,

529
00:21:22,250 --> 00:21:25,340
and they had locked down the
(indistinct) file real hard,

530
00:21:25,340 --> 00:21:26,603
which was running weird permissions errors

531
00:21:26,603 --> 00:21:28,390
that I haven't seen before.

532
00:21:28,390 --> 00:21:31,140
So that was kinda odd, but okay,

533
00:21:31,140 --> 00:21:33,260
maybe this one wasn't gonna
work, but at this point,

534
00:21:33,260 --> 00:21:34,810
I knew I was getting somewhere.

535
00:21:36,760 --> 00:21:37,610
I'm gonna take a second here

536
00:21:37,610 --> 00:21:40,620
to explain usernames-based
remapping because it's important.

537
00:21:40,620 --> 00:21:43,480
Linux namespaces provide
isolation for running processes.

538
00:21:43,480 --> 00:21:45,460
They limit their access
to system resources

539
00:21:45,460 --> 00:21:49,109
without the running process
being aware of the limitations.

540
00:21:49,109 --> 00:21:51,550
You don't want to run your containers

541
00:21:51,550 --> 00:21:53,190
as a root user generally.

542
00:21:53,190 --> 00:21:55,830
It is not a secure thing
to do, but sometimes

543
00:21:55,830 --> 00:21:58,270
for various system reasons,
you get a container

544
00:21:58,270 --> 00:22:00,510
in which something has to run as root.

545
00:22:00,510 --> 00:22:03,010
So for those containers
whose processes have to run

546
00:22:03,010 --> 00:22:04,830
as the root user within the container,

547
00:22:04,830 --> 00:22:07,540
you can remap this user via
username space remapping

548
00:22:07,540 --> 00:22:09,921
to a less privileged
user on the Docker host.

549
00:22:09,921 --> 00:22:12,500
The mapped user is
assigned a range of UIDs,

550
00:22:12,500 --> 00:22:14,980
which function within the
namespace as normal UIDs

551
00:22:14,980 --> 00:22:18,300
from zero to 65536, but
they have no privileges

552
00:22:18,300 --> 00:22:19,850
on the host machine itself.

553
00:22:19,850 --> 00:22:22,010
This was why, even though
I was theoretically running

554
00:22:22,010 --> 00:22:24,210
as UID zero, I couldn't
really get anywhere.

555
00:22:25,810 --> 00:22:29,810
So knowing that the API calls
could work to the Engine API,

556
00:22:29,810 --> 00:22:31,340
but that username space remapping

557
00:22:31,340 --> 00:22:33,350
was kinda cramping my style,

558
00:22:33,350 --> 00:22:35,260
I figured I'd try something else.

559
00:22:35,260 --> 00:22:38,410
I tried a user namespace
host option through the API,

560
00:22:38,410 --> 00:22:40,520
because sending usernames space to host

561
00:22:40,520 --> 00:22:42,590
bring you to a namespace remapping.

562
00:22:42,590 --> 00:22:44,910
This option was blocked by
the plugin when I had tried it

563
00:22:44,910 --> 00:22:49,010
before in a Docker run command,
but via the API it worked.

564
00:22:49,010 --> 00:22:51,800
And this time when I got
in, I had full root access

565
00:22:51,800 --> 00:22:53,373
to all the host resources.

566
00:22:55,190 --> 00:22:58,760
Wow, this system really
needed more defensive depth

567
00:22:58,760 --> 00:23:00,750
and appeared to have been
built upon the assumption

568
00:23:00,750 --> 00:23:03,180
that no one could ever
become root on the host.

569
00:23:03,180 --> 00:23:04,013
What?

570
00:23:04,013 --> 00:23:05,470
They really believe their own propaganda,

571
00:23:05,470 --> 00:23:08,000
so nothing was really
locked down on the backend

572
00:23:08,000 --> 00:23:09,000
by that point.

573
00:23:09,000 --> 00:23:11,280
Once you were in, and once you were root,

574
00:23:11,280 --> 00:23:15,730
you could really do whatever,
and it was kinda fun actually.

575
00:23:15,730 --> 00:23:16,860
I haven't really had that much fun

576
00:23:16,860 --> 00:23:19,370
running around the environment
since early Kubernetes,

577
00:23:19,370 --> 00:23:21,011
which was similarly locked down,

578
00:23:21,011 --> 00:23:24,960
and I hadn't gotten to do that in a while

579
00:23:24,960 --> 00:23:27,220
since Kubernetes improved,
so that was fun for me.

580
00:23:27,220 --> 00:23:31,060
Anyway, the first thing
I did once I had access

581
00:23:31,060 --> 00:23:33,120
to the host filesystem, was
looking inside the Root folder

582
00:23:33,120 --> 00:23:34,750
because, why not?

583
00:23:34,750 --> 00:23:36,810
And in the Root folder,
there was another folder

584
00:23:36,810 --> 00:23:37,741
called Root Keys.

585
00:23:37,741 --> 00:23:40,400
Well, that sounded great.

586
00:23:40,400 --> 00:23:41,577
Obviously, there was gonna
be something interesting

587
00:23:41,577 --> 00:23:44,040
in Root Keys, so I took a look in there

588
00:23:44,040 --> 00:23:45,820
and I found a product key

589
00:23:45,820 --> 00:23:48,290
called IBM Encapsulation Private PEM.

590
00:23:48,290 --> 00:23:50,660
Didn't quite know what
that was, but I think

591
00:23:50,660 --> 00:23:51,880
he'd probably viewed it,

592
00:23:51,880 --> 00:23:53,940
so I went and handed it to Chad,

593
00:23:53,940 --> 00:23:55,630
figuring it might be useful.

594
00:23:55,630 --> 00:23:57,440
Chad then took the key, reverse engineer,

595
00:23:57,440 --> 00:24:00,440
the COBOL or something, and
then we had a system to look at.

596
00:24:01,290 --> 00:24:02,123
- Right.

597
00:24:02,123 --> 00:24:06,268
So it wasn't exactly COBOL,
but it was pretty complex.

598
00:24:06,268 --> 00:24:07,101
- So it was like a Fortran, right?

599
00:24:07,101 --> 00:24:08,420
- Exactly, it was Fortran.

600
00:24:08,420 --> 00:24:09,410
Thank you.

601
00:24:09,410 --> 00:24:10,790
- It was not Fortran.

602
00:24:10,790 --> 00:24:12,920
- Ian had found the key
that I was looking for,

603
00:24:12,920 --> 00:24:16,370
and once I had the key, I could
finish reverse engineering

604
00:24:16,370 --> 00:24:19,270
the root filesystem and then
I was able to look at this

605
00:24:19,270 --> 00:24:20,920
in more depth.

606
00:24:20,920 --> 00:24:23,610
The root filesystem bootloader processes

607
00:24:23,610 --> 00:24:26,423
are a myriad of Lux encrypted filesystems,

608
00:24:27,363 --> 00:24:30,827
initramfs filesystems,
wrapped encryption keys

609
00:24:30,827 --> 00:24:33,523
and a whole bunch of scripts
putting it all together.

610
00:24:34,410 --> 00:24:36,620
After parsing it all and reassembling

611
00:24:36,620 --> 00:24:40,280
the unencrypted filesystems
on my Linux box,

612
00:24:40,280 --> 00:24:43,440
I had a moment and realized what this was.

613
00:24:43,440 --> 00:24:45,790
This is IBM's secure service container,

614
00:24:45,790 --> 00:24:47,040
or as it used to be called,

615
00:24:47,040 --> 00:24:49,873
z Appliance Container
Infrastructure, zACI.

616
00:24:50,957 --> 00:24:53,240
IBM Secure Service
Container is an offering

617
00:24:53,240 --> 00:24:57,310
that they sell for Linux,
LinuxONE where it runs directly

618
00:24:57,310 --> 00:25:01,173
on bare metal IBM mainframes
as a secure appliance.

619
00:25:02,310 --> 00:25:04,950
The filesystems were
littered with these acronyms.

620
00:25:04,950 --> 00:25:07,990
It dawned on me that what
they had done was taken this,

621
00:25:07,990 --> 00:25:10,090
and this is why there was this wild maze

622
00:25:10,090 --> 00:25:12,630
of keys and encryption and scripts.

623
00:25:12,630 --> 00:25:15,350
They lifted this SSC, which normally

624
00:25:15,350 --> 00:25:17,080
has its initial decryption keys

625
00:25:17,080 --> 00:25:19,570
inside of hardware service module,

626
00:25:19,570 --> 00:25:22,970
and poured the whole thing
to software on a disc.

627
00:25:22,970 --> 00:25:25,570
IBM normally builds
these hardware enclaves,

628
00:25:25,570 --> 00:25:27,900
but it's harder to do that in the cloud.

629
00:25:27,900 --> 00:25:29,740
- As it turns out you can't actually lift

630
00:25:29,740 --> 00:25:31,423
and shift things into the sky.

631
00:25:33,160 --> 00:25:35,200
What we were coming to find
out is that the security model

632
00:25:35,200 --> 00:25:37,550
in zCX was a combination of mainframe

633
00:25:37,550 --> 00:25:39,110
and container security models,

634
00:25:39,110 --> 00:25:42,960
and a combination that worked
in kind of interesting ways.

635
00:25:42,960 --> 00:25:45,850
Since containers share
resources with each other

636
00:25:45,850 --> 00:25:48,210
and their hosts securing for containers

637
00:25:48,210 --> 00:25:49,950
requires a holistic approach.

638
00:25:49,950 --> 00:25:52,320
Any given container
system is only as secure

639
00:25:52,320 --> 00:25:54,650
as any given part of the stack,

640
00:25:54,650 --> 00:25:56,590
really, every part of the stack.

641
00:25:56,590 --> 00:25:57,940
You have to have defense in depth

642
00:25:57,940 --> 00:25:59,730
in every layer on a container system.

643
00:25:59,730 --> 00:26:02,330
Containers are literally
made out of layers,

644
00:26:02,330 --> 00:26:05,010
but that means that you
not only do you need to,

645
00:26:05,010 --> 00:26:07,623
but that you can do every
little bit at a time.

646
00:26:09,320 --> 00:26:11,100
- This is somewhat
different security model

647
00:26:11,100 --> 00:26:13,030
than that on a mainframe.

648
00:26:13,030 --> 00:26:15,820
The mainframe security
model is really granular.

649
00:26:15,820 --> 00:26:17,160
You can configure security

650
00:26:17,160 --> 00:26:19,610
on literally anything on the mainframe,

651
00:26:19,610 --> 00:26:23,043
however, it's also a monolith
in it's security model

652
00:26:23,043 --> 00:26:26,380
and it can be very binary,
like a light switch.

653
00:26:26,380 --> 00:26:28,050
Defense in depth on the mainframe

654
00:26:28,050 --> 00:26:30,880
can be really difficult if you have made

655
00:26:30,880 --> 00:26:33,920
any security configuration
errors that would allow you

656
00:26:33,920 --> 00:26:37,000
to basically bypass all
of the security controls

657
00:26:37,000 --> 00:26:38,410
because you screwed up one or two

658
00:26:38,410 --> 00:26:39,943
really key important things.

659
00:26:39,943 --> 00:26:41,870
- I think those are wild.

660
00:26:41,870 --> 00:26:42,703
- They're wild.

661
00:26:43,700 --> 00:26:46,350
- So the differing approaches
to these two security models

662
00:26:46,350 --> 00:26:49,068
came into play with the
way that zCX got built,

663
00:26:49,068 --> 00:26:53,078
and these two combined in
some somewhat unexpected ways,

664
00:26:53,078 --> 00:26:56,380
and the way they got combined

665
00:26:56,380 --> 00:26:59,870
led to some somewhat unexpected
behavior for both of us.

666
00:26:59,870 --> 00:27:02,703
So we worked together,
passing things back and forth.

667
00:27:03,680 --> 00:27:06,280
When let either of us ran into
the limits of our knowledge

668
00:27:06,280 --> 00:27:08,080
or saw something that
didn't really make sense

669
00:27:08,080 --> 00:27:10,070
in the respective
contexts we were used to,

670
00:27:10,070 --> 00:27:11,920
we would pass the problems
with the other person,

671
00:27:11,920 --> 00:27:14,470
who would recognize it from
their knowledge and context,

672
00:27:14,470 --> 00:27:16,083
and then we would do it again.

673
00:27:17,750 --> 00:27:19,700
So back to the container system,

674
00:27:19,700 --> 00:27:21,640
and in there I have full read access,

675
00:27:21,640 --> 00:27:23,620
but I was having a hard time understanding

676
00:27:23,620 --> 00:27:25,294
some behavior that I was running into.

677
00:27:25,294 --> 00:27:27,820
The Docker service kept
throwing these weird Systemd

678
00:27:27,820 --> 00:27:30,910
errors I hadn't seen before
and my debugging tools

679
00:27:30,910 --> 00:27:33,560
weren't really helping in
helping me figure out why.

680
00:27:33,560 --> 00:27:35,828
I wasn't really sure
what was up with this.

681
00:27:35,828 --> 00:27:38,660
- Meanwhile, on the
mainframe side of things,

682
00:27:38,660 --> 00:27:42,010
I found this directory
in etc Systemd services

683
00:27:42,010 --> 00:27:45,100
have these weird permissions on it, 644,

684
00:27:45,100 --> 00:27:48,350
which any of you Linux
people with know that 644

685
00:27:48,350 --> 00:27:50,140
is kind of odd permissions for a directory

686
00:27:50,140 --> 00:27:52,350
because the execute bit isn't set.

687
00:27:52,350 --> 00:27:55,010
I found this because I was
copying it from a Linux box

688
00:27:55,010 --> 00:27:57,450
to another directory and my copy command

689
00:27:57,450 --> 00:28:00,500
through an error because it
couldn't copy that directory.

690
00:28:00,500 --> 00:28:02,480
Why would you want a
non-executable directory?

691
00:28:02,480 --> 00:28:03,950
I'd never seen this before.

692
00:28:03,950 --> 00:28:05,330
I showed this to Ian with a comment

693
00:28:05,330 --> 00:28:07,120
about how strange I thought this was.

694
00:28:07,120 --> 00:28:08,550
- Oh, huh, okay.

695
00:28:08,550 --> 00:28:11,240
This partly explained the
errors that I had been getting

696
00:28:11,240 --> 00:28:12,730
with the Docker service,
that I haven't been able

697
00:28:12,730 --> 00:28:15,050
to figure out, sort of.

698
00:28:15,050 --> 00:28:17,384
The permissions bit made
sense in a container context.

699
00:28:17,384 --> 00:28:19,540
644 are actually pretty
standard permissions

700
00:28:19,540 --> 00:28:21,680
for the Docker service,
for compliance reasons,

701
00:28:21,680 --> 00:28:24,070
but this particular
service didn't quite act

702
00:28:24,070 --> 00:28:26,220
the way that I would
normally expect it to.

703
00:28:27,170 --> 00:28:29,260
The Docker service
interacting with several

704
00:28:29,260 --> 00:28:30,640
other Systemd services.

705
00:28:30,640 --> 00:28:32,630
One of the services it
was interacting with

706
00:28:32,630 --> 00:28:35,310
was called zcxauthplugin.service.

707
00:28:35,310 --> 00:28:37,120
So I took a look at that.

708
00:28:37,120 --> 00:28:39,206
I wanted to know how this plugin worked

709
00:28:39,206 --> 00:28:41,057
and could we disable it?

710
00:28:41,057 --> 00:28:44,440
Docker authorization plugins
aren't super commonly used,

711
00:28:44,440 --> 00:28:47,060
but the ones that I had
seen, which were open source

712
00:28:47,060 --> 00:28:49,740
generally behaved in pretty similar ways.

713
00:28:49,740 --> 00:28:51,630
This authorization plugin was different.

714
00:28:51,630 --> 00:28:54,190
It was closed-source and
it interacted with Systemd

715
00:28:54,190 --> 00:28:56,880
as a service in a way
that I hadn't seen before.

716
00:28:56,880 --> 00:28:58,910
It kept making these calls back and forth

717
00:28:58,910 --> 00:29:02,100
and running against a
list of string magic text.

718
00:29:02,100 --> 00:29:03,200
What the fuck?

719
00:29:03,200 --> 00:29:06,140
This wasn't common behavior
in container context at all.

720
00:29:06,140 --> 00:29:07,643
I had never seen such a thing.

721
00:29:08,699 --> 00:29:12,330
- Ian explained this to
me and it occurred to me

722
00:29:12,330 --> 00:29:14,320
that what was going on here might

723
00:29:14,320 --> 00:29:17,380
have a similar corollary
in the mainframe world,

724
00:29:17,380 --> 00:29:19,410
specifically mainframe exits.

725
00:29:19,410 --> 00:29:20,750
Let me explain.

726
00:29:20,750 --> 00:29:24,000
So within z/OS, there's
a concept of an exit.

727
00:29:24,000 --> 00:29:26,140
What an exit is used
for is if you wanna do

728
00:29:26,140 --> 00:29:28,540
some really specific customization

729
00:29:28,540 --> 00:29:30,460
to some part of the system.

730
00:29:30,460 --> 00:29:32,360
An exit is literally a program

731
00:29:32,360 --> 00:29:36,620
that you write usually in
Assembler or C, maybe C++,

732
00:29:36,620 --> 00:29:41,500
that is called from an API in
some kind of system routine.

733
00:29:41,500 --> 00:29:44,200
So the way it works is,
let's take an example,

734
00:29:44,200 --> 00:29:46,070
a password processing routine.

735
00:29:46,070 --> 00:29:48,130
So Ian's gonna change their password

736
00:29:48,130 --> 00:29:49,740
on the mainframe to sparkle.

737
00:29:49,740 --> 00:29:51,880
So they type in the password sparkle,

738
00:29:51,880 --> 00:29:53,840
the mainframe then says,
"Okay, that's fine,

739
00:29:53,840 --> 00:29:55,680
but I see that there's an exit defined

740
00:29:55,680 --> 00:29:57,660
for password compliance."

741
00:29:57,660 --> 00:29:59,660
So it will call them the
program that I wrote,

742
00:29:59,660 --> 00:30:03,260
and in my program, the mainframe
exit for password policy,

743
00:30:03,260 --> 00:30:05,400
I'm gonna check all kinds of things.

744
00:30:05,400 --> 00:30:07,590
Is this word part of the dictionary list?

745
00:30:07,590 --> 00:30:09,470
Is it the month?

746
00:30:09,470 --> 00:30:10,450
Is it the current year?

747
00:30:10,450 --> 00:30:12,090
Is it Ian's name?

748
00:30:12,090 --> 00:30:15,280
Things like that the system
wouldn't normally check,

749
00:30:15,280 --> 00:30:18,170
and if it is okay, I'm gonna
pass back a return code

750
00:30:18,170 --> 00:30:19,130
that says, "That's fine.

751
00:30:19,130 --> 00:30:20,250
Ian can you sparkle."

752
00:30:20,250 --> 00:30:22,470
Or if it's not good,
I'm gonna say, not good,

753
00:30:22,470 --> 00:30:24,100
and I'm gonna make them
change their password

754
00:30:24,100 --> 00:30:25,630
back to something else.

755
00:30:25,630 --> 00:30:28,160
So I explained this to Ian, and I said,

756
00:30:28,160 --> 00:30:31,290
I think what's happening
here is that the programmers

757
00:30:31,290 --> 00:30:33,290
who know how to write exits to modify

758
00:30:33,290 --> 00:30:36,700
and control system behavior
have written an exit

759
00:30:36,700 --> 00:30:39,630
in the zcxauthplugin and
that's how they're trying

760
00:30:39,630 --> 00:30:42,252
to control the security at this product.

761
00:30:42,252 --> 00:30:43,780
- Wild.

762
00:30:43,780 --> 00:30:47,560
- Meanwhile, I was also
looking at the zcxauthplugin,

763
00:30:47,560 --> 00:30:49,490
but I was looking at the binary.

764
00:30:49,490 --> 00:30:52,830
And the first thing that I
noticed was that it was huge.

765
00:30:52,830 --> 00:30:55,680
I mean, listen, normally on mainframes,

766
00:30:55,680 --> 00:30:59,440
things are built with really
tight assembly code or C code,

767
00:30:59,440 --> 00:31:01,650
the binaries, even for super complex

768
00:31:01,650 --> 00:31:04,310
mainframe systems are small.

769
00:31:04,310 --> 00:31:06,790
Because of this reason,
take example of the nucleus

770
00:31:06,790 --> 00:31:08,960
on a mainframe, which is
kind of like the kernel,

771
00:31:08,960 --> 00:31:11,820
like the core bit that
tells everybody what to do.

772
00:31:11,820 --> 00:31:14,070
It's maybe 50 megs on the main frame

773
00:31:14,070 --> 00:31:17,640
and the zcxauthplugin is six megs.

774
00:31:17,640 --> 00:31:19,860
I started dumping it in and looking at it

775
00:31:19,860 --> 00:31:22,150
with a hex editor and a disassembler,

776
00:31:22,150 --> 00:31:23,720
and there's all kinds of calls in here

777
00:31:23,720 --> 00:31:26,240
to things that have nothing
whatsoever to do with,

778
00:31:26,240 --> 00:31:31,090
doctor or security, and I was
like, what is going on here

779
00:31:31,090 --> 00:31:31,990
with this thing?

780
00:31:31,990 --> 00:31:33,740
So I called it back to Ian and I said,

781
00:31:33,740 --> 00:31:34,573
what is this?

782
00:31:34,573 --> 00:31:35,879
What's happening here?

783
00:31:35,879 --> 00:31:38,300
- This is what I knew, it was a Go binary.

784
00:31:38,300 --> 00:31:40,130
They were thick like that.

785
00:31:40,130 --> 00:31:41,550
They have a lot of dependencies,

786
00:31:41,550 --> 00:31:44,670
they make a lot of extra
calls, that's normal for Go.

787
00:31:44,670 --> 00:31:48,040
At one point, I tried to Docker
pull the image for Golang

788
00:31:48,040 --> 00:31:51,020
and I crashed our entire
lab for disk space.

789
00:31:51,020 --> 00:31:52,566
Oops.

790
00:31:52,566 --> 00:31:55,020
I was unfamiliar with these
kinds of size constraints

791
00:31:55,020 --> 00:31:57,490
because I'm used to Go, it's big.

792
00:31:57,490 --> 00:32:01,769
And so, although I recognize
the Go patterns in the code

793
00:32:01,769 --> 00:32:04,260
that made sense to me, some
of what that code was doing

794
00:32:04,260 --> 00:32:05,800
looked kind of weird.

795
00:32:05,800 --> 00:32:08,850
I was like, it looked unfamiliar in a way

796
00:32:08,850 --> 00:32:10,570
that at this point, I had
learned to figure out,

797
00:32:10,570 --> 00:32:12,000
probably meant it was doing something

798
00:32:12,000 --> 00:32:14,300
kind of weirdly mainframe
specific just by the fact

799
00:32:14,300 --> 00:32:16,630
that it was Golang thing
that I might otherwise

800
00:32:16,630 --> 00:32:18,050
be used to seeing.

801
00:32:18,050 --> 00:32:20,410
So at this point, I think we all knew,

802
00:32:20,410 --> 00:32:22,160
this was clearly going to keep happening

803
00:32:22,160 --> 00:32:23,510
and we were going to need to get

804
00:32:23,510 --> 00:32:25,800
a deeper looking at the system together,

805
00:32:25,800 --> 00:32:28,840
but to get into the system
as deep as we wanted to,

806
00:32:28,840 --> 00:32:31,290
we were going to need
persistence and tools.

807
00:32:31,290 --> 00:32:35,357
- So we made a lab version
of zCX and we ripped out

808
00:32:35,357 --> 00:32:37,780
all of the security features that IBM

809
00:32:37,780 --> 00:32:39,230
had left behind for us.

810
00:32:39,230 --> 00:32:41,110
We disabled the zcxauthplugin,

811
00:32:41,110 --> 00:32:43,710
we disabled user namespace
(indistinct) remap,

812
00:32:43,710 --> 00:32:46,980
we made all of the read-only
mounts into rewrite mounts,

813
00:32:46,980 --> 00:32:50,420
we stored this filesystem
onto a mainframe dataset.

814
00:32:50,420 --> 00:32:53,220
We added a debugger, we
got APT up and running

815
00:32:53,220 --> 00:32:55,350
so we can update the software and install

816
00:32:55,350 --> 00:32:58,360
new applications and programs, and I even,

817
00:32:58,360 --> 00:33:01,520
very proud of this, figured
out how to make SSH run

818
00:33:01,520 --> 00:33:05,090
on the root filesystem by
copying the sshd binaries

819
00:33:05,090 --> 00:33:06,981
and the corresponding libraries

820
00:33:06,981 --> 00:33:09,770
out of the Docker overlay filesystems

821
00:33:09,770 --> 00:33:11,540
and running them in the root filesystem,

822
00:33:11,540 --> 00:33:15,070
so we had a direct backdoor
into the root filesystem

823
00:33:15,070 --> 00:33:18,940
and could commence doing a
little bit deeper research.

824
00:33:18,940 --> 00:33:20,690
- We're still doing more with that.

825
00:33:21,640 --> 00:33:23,390
So where do we go from here?

826
00:33:23,390 --> 00:33:24,920
Well, we have a to-do list

827
00:33:25,860 --> 00:33:27,600
as we're still working on this project.

828
00:33:27,600 --> 00:33:30,060
We have a couple of
obvious points to attack

829
00:33:30,060 --> 00:33:32,167
that we've already gathered
some information about

830
00:33:32,167 --> 00:33:33,382
and maybe some less obvious buttons

831
00:33:33,382 --> 00:33:35,100
that we won't be talking about here.

832
00:33:35,100 --> 00:33:38,180
- One of my favorite
things is disassembling

833
00:33:38,180 --> 00:33:40,420
a reverse engineering code.

834
00:33:40,420 --> 00:33:42,606
So disassembling the
zcxauthplugin is something

835
00:33:42,606 --> 00:33:45,330
that I'm absolutely looking forward to.

836
00:33:45,330 --> 00:33:47,227
However, it's written in Go

837
00:33:47,227 --> 00:33:49,640
and it's on an architecture using tools

838
00:33:49,640 --> 00:33:52,090
that were not really designed
for that architecture.

839
00:33:52,090 --> 00:33:53,220
Let me explain.

840
00:33:53,220 --> 00:33:55,230
If you look at any of
the open source tooling

841
00:33:55,230 --> 00:33:57,361
designed for mainframe, what
you'll see is the architecture

842
00:33:57,361 --> 00:33:59,940
not listed as zArchitecture,

843
00:33:59,940 --> 00:34:02,810
but listed as s390X Architecture.

844
00:34:02,810 --> 00:34:03,860
They are the same thing.

845
00:34:03,860 --> 00:34:08,080
In open-source parlance,
s390x equals zArchitecture.

846
00:34:08,080 --> 00:34:11,528
And even though I have things
like (indistinct) and GDB

847
00:34:11,528 --> 00:34:14,640
and that sort of thing, when
I disassemble these binaries,

848
00:34:14,640 --> 00:34:18,640
I'm gonna end up with z
Assembler code, not x86,

849
00:34:18,640 --> 00:34:20,870
not AMD, but z Assembler code.

850
00:34:20,870 --> 00:34:23,480
So this is gonna make it
quite a bit more complicated

851
00:34:23,480 --> 00:34:27,380
to get through, but doing
this I think is gonna open up

852
00:34:27,380 --> 00:34:30,766
some obvious pointers to other
security vulnerabilities.

853
00:34:30,766 --> 00:34:33,500
- s390x architecture kept coming up

854
00:34:33,500 --> 00:34:35,340
and kept kinda throwing wrenches at things

855
00:34:35,340 --> 00:34:38,121
throughout this process
because open source tooling

856
00:34:38,121 --> 00:34:41,740
sometimes supports s390x, but
a lot of the time it doesn't,

857
00:34:41,740 --> 00:34:44,060
and honestly, for really hell of reasons.

858
00:34:44,060 --> 00:34:47,220
Open source developers often
who are working for free

859
00:34:47,220 --> 00:34:50,120
are like, "I don't work for IBM,

860
00:34:50,120 --> 00:34:52,990
why would I work for
something that is specific

861
00:34:52,990 --> 00:34:54,170
to IBM architecture?

862
00:34:54,170 --> 00:34:55,550
They're not paying me to do this.

863
00:34:55,550 --> 00:34:56,830
If you want people to do this,

864
00:34:56,830 --> 00:34:58,100
you can hire people to do this."

865
00:34:58,100 --> 00:35:01,070
And therefore, a lot of
tools just aren't supported.

866
00:35:01,070 --> 00:35:03,670
That kept coming up as I
kept running into like,

867
00:35:03,670 --> 00:35:05,870
okay, I'm going to go
get this open source tool

868
00:35:05,870 --> 00:35:07,570
that I'm used to using
and having it be like,

869
00:35:07,570 --> 00:35:10,370
no, and have some sort of
terrible architecture failure,

870
00:35:10,370 --> 00:35:11,800
like seven layers down the stack.

871
00:35:11,800 --> 00:35:14,340
It was kinda cool for learning
and also a pain in the ass.

872
00:35:14,340 --> 00:35:17,420
Anyway, the real goal here for us

873
00:35:17,420 --> 00:35:20,500
would it be a full hypervisor escape,

874
00:35:20,500 --> 00:35:22,029
which we believe can be done.

875
00:35:22,029 --> 00:35:25,360
zCX runs in an average space within z/OS

876
00:35:25,360 --> 00:35:27,813
and that address space runs as authorized.

877
00:35:28,700 --> 00:35:29,680
Let me explain what this means.

878
00:35:29,680 --> 00:35:32,280
In a mainframe context,
running as authorized

879
00:35:32,280 --> 00:35:33,563
means something specific.

880
00:35:34,590 --> 00:35:38,570
It's like security through the filesystem.

881
00:35:38,570 --> 00:35:41,170
So if you had a folder
on Linux where anything

882
00:35:41,170 --> 00:35:43,350
that was in that folder automatically ran

883
00:35:43,350 --> 00:35:46,180
as a UID zero as root, and not only that,

884
00:35:46,180 --> 00:35:49,720
it had root access to
everything else in the system,

885
00:35:49,720 --> 00:35:51,460
that's actually how mainframe

886
00:35:51,460 --> 00:35:54,650
authorized address spaces
work, which is wild.

887
00:35:54,650 --> 00:35:57,340
And what this means is that
if we can get code execution

888
00:35:57,340 --> 00:35:59,270
in that address space, which frankly,

889
00:35:59,270 --> 00:36:01,810
we believe that we can, we will be able

890
00:36:01,810 --> 00:36:05,570
to own the entire mainframe
server, all of it, everything.

891
00:36:05,570 --> 00:36:08,890
We already know that there
are direct memory links.

892
00:36:08,890 --> 00:36:11,110
IBM helpfully, provided us this hideously

893
00:36:11,110 --> 00:36:14,050
ugly diagram in Comic Sans telling us so,

894
00:36:14,050 --> 00:36:16,613
and also we know because of this demo.

895
00:36:19,365 --> 00:36:20,220
- Okay.

896
00:36:20,220 --> 00:36:21,510
Just gonna show you a quick demo

897
00:36:21,510 --> 00:36:23,850
on what we think might be
possible in the future.

898
00:36:23,850 --> 00:36:26,230
We've done a little research
on the shared memory links

899
00:36:26,230 --> 00:36:29,010
between zCX and z/OS.

900
00:36:29,010 --> 00:36:31,080
We know the exist, they're
in some of the diagrams

901
00:36:31,080 --> 00:36:32,920
and the documentation talks about it,

902
00:36:32,920 --> 00:36:34,610
but we found one of particular instance

903
00:36:34,610 --> 00:36:35,910
we'd like to show you now.

904
00:36:35,910 --> 00:36:38,470
So this demo is basically just giving you

905
00:36:38,470 --> 00:36:42,320
kind of a window into
what might be possible

906
00:36:42,320 --> 00:36:45,080
by way of just kind of
a fun demonstration.

907
00:36:45,080 --> 00:36:50,080
So if you log into our
backdoor of our zCX instance,

908
00:36:51,070 --> 00:36:53,504
so this is an SSH server that I booted up

909
00:36:53,504 --> 00:36:55,220
that's just running on the root level

910
00:36:55,220 --> 00:36:58,140
of the zCX instance now,
not bothering having to go

911
00:36:58,140 --> 00:37:01,950
back in through Docker and
escape down to the root instance,

912
00:37:01,950 --> 00:37:05,180
we're just running an SSH
Daemon directly from it now

913
00:37:05,180 --> 00:37:07,810
to get in and out as part
of our research environment.

914
00:37:07,810 --> 00:37:09,680
And I'm gonna run some hackery commands

915
00:37:09,680 --> 00:37:12,826
from the zCX instance that
I'm not gonna show today.

916
00:37:12,826 --> 00:37:14,420
And just to give you an example

917
00:37:14,420 --> 00:37:15,900
of what we think is possible,

918
00:37:15,900 --> 00:37:17,880
let's log back into the mainframe system.

919
00:37:17,880 --> 00:37:22,880
So I'm gonna go log in with
my TSO ID onto our mainframe.

920
00:37:25,200 --> 00:37:28,400
And once I'm into TSO,
I'm gonna launch ISPF,

921
00:37:28,400 --> 00:37:31,650
which is kind of the green screen

922
00:37:31,650 --> 00:37:34,010
that everybody associates with mainframe,

923
00:37:34,010 --> 00:37:36,360
and is still probably the primary means

924
00:37:36,360 --> 00:37:39,760
of accessing the mainframe,
and I'm gonna go into SDSF,

925
00:37:39,760 --> 00:37:42,750
which is where all the output
for all the jobs is stored,

926
00:37:42,750 --> 00:37:45,750
and look at one of our active
jobs, which is named Moon,

927
00:37:45,750 --> 00:37:48,280
which is the zCX server
that we're looking at.

928
00:37:48,280 --> 00:37:49,607
So if I scroll down in this job log

929
00:37:49,607 --> 00:37:51,030
and I go all the way down to the bottom,

930
00:37:51,030 --> 00:37:56,010
you can see that there is
definitely a connection

931
00:37:56,010 --> 00:37:59,420
between the commands that
I just executed in zCX,

932
00:37:59,420 --> 00:38:02,920
and my ability to write
to memory inside of z/OS.

933
00:38:02,920 --> 00:38:05,140
I'm placing the goose there
at the end of that job log.

934
00:38:05,140 --> 00:38:07,520
So the demonstration here was basically

935
00:38:07,520 --> 00:38:11,660
just to show you that what we've done

936
00:38:11,660 --> 00:38:13,971
is we've gone down
through the Docker Engine,

937
00:38:13,971 --> 00:38:15,970
into the root Linux container,

938
00:38:15,970 --> 00:38:17,830
what's labeled here is Linux Kernel.

939
00:38:17,830 --> 00:38:19,980
And that we know there
are a memory connections

940
00:38:19,980 --> 00:38:23,680
between that kernel through
the zCX hypervisor and z/OS.

941
00:38:23,680 --> 00:38:26,260
And so our next project is
really to try to figure out

942
00:38:26,260 --> 00:38:29,540
how to take advantage of
that and do memory overwrites

943
00:38:29,540 --> 00:38:31,420
and gain access, then full access

944
00:38:31,420 --> 00:38:34,206
to an authorized address
space within z/OS.

945
00:38:34,206 --> 00:38:37,010
Doing so will give us access
to then all of the data,

946
00:38:37,010 --> 00:38:38,700
the programs and
everything running on z/OS,

947
00:38:38,700 --> 00:38:42,183
which is ultimately, the end goal.

948
00:38:45,800 --> 00:38:47,660
We couldn't wrap this
up without discussing

949
00:38:47,660 --> 00:38:49,120
what we've learned.

950
00:38:49,120 --> 00:38:53,210
None of this or any of the
future work that we will do

951
00:38:53,210 --> 00:38:55,520
would be possible without
the sparkling partnership

952
00:38:55,520 --> 00:38:57,110
between Ian and myself.

953
00:38:57,110 --> 00:38:58,150
And I have to add a side note,

954
00:38:58,150 --> 00:38:59,970
that I think I've said
sparkling in this talk

955
00:38:59,970 --> 00:39:01,640
more than I've ever
said it my entire life,

956
00:39:01,640 --> 00:39:02,939
when I wasn't ordering a drink.

957
00:39:02,939 --> 00:39:04,200
- It's all a glitter (indistinct).

958
00:39:04,200 --> 00:39:06,330
- It is indeed, there's a lot of glitter.

959
00:39:06,330 --> 00:39:07,700
Here's what I learned.

960
00:39:07,700 --> 00:39:09,830
In my niche world, I'm often the expert

961
00:39:09,830 --> 00:39:11,440
that people come to for input.

962
00:39:11,440 --> 00:39:13,580
I liked this, I worked hard for it.

963
00:39:13,580 --> 00:39:15,970
I like the recognition
that comes with this.

964
00:39:15,970 --> 00:39:19,670
I admit, I find it hard to ask for help

965
00:39:19,670 --> 00:39:23,430
or admit that I don't really
know where to start on a thing,

966
00:39:23,430 --> 00:39:25,410
especially if it's something
that I could probably

967
00:39:25,410 --> 00:39:27,440
figure it out on my own eventually,

968
00:39:27,440 --> 00:39:31,122
but maybe it would take
me six months or a year.

969
00:39:31,122 --> 00:39:33,510
I don't know if this
resonates with any of you,

970
00:39:33,510 --> 00:39:36,310
but collaborating on a thing like this

971
00:39:36,310 --> 00:39:38,250
means sharing the spotlight, right?

972
00:39:38,250 --> 00:39:41,910
Letting somebody else
guide you and being humble.

973
00:39:41,910 --> 00:39:43,060
This is hard.

974
00:39:43,060 --> 00:39:46,360
This is hard for me, and maybe
it's hard for some of you,

975
00:39:46,360 --> 00:39:48,090
but it's been a really good experience.

976
00:39:48,090 --> 00:39:49,560
It's been really good for me.

977
00:39:49,560 --> 00:39:52,230
I'd like to encourage
all of you watching this

978
00:39:52,230 --> 00:39:54,110
to do this too.

979
00:39:54,110 --> 00:39:59,110
Be vulnerable, ask for help,
be humble, even when it's hard.

980
00:39:59,170 --> 00:40:00,700
It's not only okay, but the outcome

981
00:40:00,700 --> 00:40:03,843
can and likely will be
better than going in alone.

982
00:40:06,250 --> 00:40:07,963
- I've learned too.

983
00:40:07,963 --> 00:40:10,090
I'm more used to asking for help.

984
00:40:10,090 --> 00:40:11,870
I work collaboratively a lot.

985
00:40:11,870 --> 00:40:15,410
I'm a member of a hacker crew
called SIG-Honk, greets Honk,

986
00:40:15,410 --> 00:40:19,550
and so we worked together all the time

987
00:40:19,550 --> 00:40:21,560
and admit when we don't
know things and ask for help

988
00:40:21,560 --> 00:40:22,393
and do that a lot.

989
00:40:22,393 --> 00:40:23,860
So I was more used to that.

990
00:40:23,860 --> 00:40:25,913
What I wasn't used to
was working with people

991
00:40:25,913 --> 00:40:30,170
who have a skillset that
overlaps a little with mine.

992
00:40:30,170 --> 00:40:32,020
'Cause usually when I
do collaborative work,

993
00:40:32,020 --> 00:40:33,880
I do it with other container people,

994
00:40:33,880 --> 00:40:36,120
and it's been really awesome
to get to work with somebody

995
00:40:36,120 --> 00:40:39,897
who has knowledge that is so new to me

996
00:40:39,897 --> 00:40:41,250
and is so different from mine.

997
00:40:41,250 --> 00:40:42,540
I've gotten to learn so much from you

998
00:40:42,540 --> 00:40:43,760
and it's been great.

999
00:40:43,760 --> 00:40:48,240
And to me, I felt really inspired by that.

1000
00:40:48,240 --> 00:40:50,789
I think we both have, about
what kinds of possibilities

1001
00:40:50,789 --> 00:40:53,100
this could lead to for people,

1002
00:40:53,100 --> 00:40:54,870
because we don't always
think about this, right?

1003
00:40:54,870 --> 00:40:56,560
We hang out with people in our bubble,

1004
00:40:56,560 --> 00:40:58,430
maybe they do the same
kind of things we do.

1005
00:40:58,430 --> 00:41:00,028
Maybe they're a lot like us,

1006
00:41:00,028 --> 00:41:03,750
and if we start working
more closely with people

1007
00:41:03,750 --> 00:41:05,470
who are really different from us,

1008
00:41:05,470 --> 00:41:08,520
either in just their
skillset or just in the way

1009
00:41:08,520 --> 00:41:10,140
that they are, the way that they grew up,

1010
00:41:10,140 --> 00:41:12,880
the way that they live,
you can learn a whole lot

1011
00:41:12,880 --> 00:41:15,270
from doing that in a way
that is really awesome.

1012
00:41:15,270 --> 00:41:17,180
And if we all start doing that more,

1013
00:41:17,180 --> 00:41:18,600
we can learn more from each other

1014
00:41:18,600 --> 00:41:22,060
and we can build and break
things more amazingly

1015
00:41:22,060 --> 00:41:24,840
and things that wouldn't
have been possible before,

1016
00:41:24,840 --> 00:41:29,060
if we can work across chasms in that way.

1017
00:41:29,060 --> 00:41:31,840
So that's been really sweet and
we want to encourage you all

1018
00:41:31,840 --> 00:41:35,430
to do that too, because
what can you do together?

1019
00:41:35,430 --> 00:41:36,400
What can you build?

1020
00:41:36,400 --> 00:41:37,813
What can you break?

1021
00:41:37,813 --> 00:41:40,032
There are infinite possibilities

1022
00:41:40,032 --> 00:41:43,680
and we really want to see
what you can do with that.

1023
00:41:43,680 --> 00:41:45,170
We want to see what we all do with that.

1024
00:41:45,170 --> 00:41:48,040
I don't think we do it
as enough as an industry.

1025
00:41:48,040 --> 00:41:50,510
So let's find each other.

1026
00:41:50,510 --> 00:41:51,671
Let's make things happen.

1027
00:41:51,671 --> 00:41:54,260
You and a small crew of committed friends

1028
00:41:54,260 --> 00:41:55,980
can change the world.

1029
00:41:55,980 --> 00:41:58,283
The secret is to really begin.

1030
00:41:59,213 --> 00:42:00,194
Thank you.

1031
00:42:00,194 --> 00:42:01,194
- Thank you.

