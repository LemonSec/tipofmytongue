1
00:00:00,630 --> 00:00:02,350
- Hello, DEF CON.

2
00:00:02,350 --> 00:00:04,967
Today, we present to you our research

3
00:00:04,967 --> 00:00:07,040
on the DNS vulnerability class

4
00:00:07,040 --> 00:00:08,820
in DNS-as-a-service providers.

5
00:00:08,820 --> 00:00:12,590
My name is Shir, and I lead
the research team at Wiz,

6
00:00:12,590 --> 00:00:13,630
the cloud security company.

7
00:00:13,630 --> 00:00:16,900
With me in the room is Ami Luttwak-

8
00:00:16,900 --> 00:00:18,813
- Hi.
- The CTO of Wiz.

9
00:00:20,530 --> 00:00:22,910
- Thank you, Shir, and it's
really great to be here.

10
00:00:22,910 --> 00:00:25,960
And so, let's start with a
bit of background about us.

11
00:00:25,960 --> 00:00:27,800
So we are the Wiz research team.

12
00:00:27,800 --> 00:00:30,490
Wiz is a cloud security company.

13
00:00:30,490 --> 00:00:34,100
The team is composed of
experienced security researchers,

14
00:00:34,100 --> 00:00:35,160
many of them with background

15
00:00:35,160 --> 00:00:36,960
from Microsoft Cloud Security group,

16
00:00:36,960 --> 00:00:39,980
and our goal is to do
groundbreaking cloud research

17
00:00:39,980 --> 00:00:42,790
to find vulnerabilities,
misconfigurations,

18
00:00:42,790 --> 00:00:46,290
risks in cloud environments
that customers are not aware of,

19
00:00:46,290 --> 00:00:48,693
and would impact anyone using the cloud.

20
00:00:50,710 --> 00:00:53,600
So we started looking
into DNS-as-a-service.

21
00:00:53,600 --> 00:00:54,433
Why DNS-as-a-service?

22
00:00:54,433 --> 00:00:57,540
So first of all, DNS, as we all know,

23
00:00:57,540 --> 00:00:59,120
is the lifeblood of the internet.

24
00:00:59,120 --> 00:01:00,940
It's probably one of the most important

25
00:01:00,940 --> 00:01:02,200
services that we have.

26
00:01:02,200 --> 00:01:05,700
Now, DNS-as-a-service has huge impact.

27
00:01:05,700 --> 00:01:07,990
If you think about it,
it holds your domain,

28
00:01:07,990 --> 00:01:09,750
it holds your internet routing.

29
00:01:09,750 --> 00:01:12,200
Now, what's cool about DNS-as-a-service,

30
00:01:12,200 --> 00:01:15,750
unlike usual cloud services, is that also

31
00:01:15,750 --> 00:01:18,840
it controls not only
cloud activities, right,

32
00:01:18,840 --> 00:01:21,290
when you use DNS-as-a-service,
it also impacts

33
00:01:21,290 --> 00:01:22,870
your on-premise activities.

34
00:01:22,870 --> 00:01:25,410
So potentially, DNS-as-a-service has

35
00:01:25,410 --> 00:01:27,520
huge impact on an organization.

36
00:01:27,520 --> 00:01:30,320
Now, on top of that, what is really great

37
00:01:30,320 --> 00:01:33,280
for researchers is the DNS protocol is

38
00:01:33,280 --> 00:01:35,170
one of the oldest protocols that we use.

39
00:01:35,170 --> 00:01:36,980
It's more than 20 years old.

40
00:01:36,980 --> 00:01:38,830
It's incredibly complex,

41
00:01:38,830 --> 00:01:41,240
and there's so many different
implementations of it,

42
00:01:41,240 --> 00:01:43,000
both from the DNS providers,

43
00:01:43,000 --> 00:01:45,650
but also think about
millions of DNS clients

44
00:01:45,650 --> 00:01:46,610
that we have out there,

45
00:01:46,610 --> 00:01:48,750
each of them implemented in different way,

46
00:01:48,750 --> 00:01:51,440
creating a very, very
interesting attack vector

47
00:01:51,440 --> 00:01:52,790
for researchers to explore.

48
00:01:54,940 --> 00:01:57,630
So we started from looking into Route 53,

49
00:01:57,630 --> 00:02:00,030
which is the DNS service provided by AWS,

50
00:02:00,030 --> 00:02:03,193
and it's highly popular
across AWS customers.

51
00:02:05,370 --> 00:02:10,370
- So Route 53 is built on
thousands of DNS servers

52
00:02:10,483 --> 00:02:14,000
that host DNS zones for all AWS customers.

53
00:02:14,000 --> 00:02:18,210
We mapped around 2,000 servers
in the Route 53 platform.

54
00:02:18,210 --> 00:02:20,560
Whenever the customer
is hosting a domain name

55
00:02:20,560 --> 00:02:23,730
on the platform, they get
four shared name servers

56
00:02:23,730 --> 00:02:25,180
to manage the desired domain.

57
00:02:26,740 --> 00:02:29,100
On that right side of the slide,

58
00:02:29,100 --> 00:02:33,340
you can see a simulation of
one out of the four DNS servers

59
00:02:33,340 --> 00:02:35,530
Amazon provides each domain.

60
00:02:35,530 --> 00:02:40,110
The server stores the DNS
zones for wiz.io, for example,

61
00:02:40,110 --> 00:02:43,660
and several other AWS customers.

62
00:02:43,660 --> 00:02:46,590
If the server is queried
for one of the domains

63
00:02:46,590 --> 00:02:49,360
under management, it will
return the appropriate records

64
00:02:49,360 --> 00:02:50,573
for that domain.

65
00:02:52,690 --> 00:02:57,170
While studying Route
53, we discovered that

66
00:02:57,170 --> 00:03:02,100
anyone can register any domain
they want on the platform.

67
00:03:02,100 --> 00:03:04,930
There is no restriction
on whether the domain

68
00:03:04,930 --> 00:03:06,457
is already hosted on the platform,

69
00:03:06,457 --> 00:03:09,340
and there is no ownership verification.

70
00:03:09,340 --> 00:03:11,430
The only limitation is that

71
00:03:11,430 --> 00:03:14,860
if the domain already exists
in one of the name servers,

72
00:03:14,860 --> 00:03:16,940
it will not be possible
to register it again

73
00:03:16,940 --> 00:03:18,023
on the same server.

74
00:03:18,900 --> 00:03:20,610
And it makes a lot of sense,

75
00:03:20,610 --> 00:03:24,570
and it's indeed not possible.

76
00:03:24,570 --> 00:03:25,683
Trust us, we tried.

77
00:03:27,170 --> 00:03:30,190
Basically, anyone can register any domain

78
00:03:30,190 --> 00:03:31,660
on any of the name servers,

79
00:03:31,660 --> 00:03:34,580
as long as it does not
already exist there.

80
00:03:34,580 --> 00:03:37,480
But is there anything dangerous here?

81
00:03:37,480 --> 00:03:40,870
For me, as a security
researcher, it felt like

82
00:03:40,870 --> 00:03:43,620
we had too much control here.

83
00:03:43,620 --> 00:03:47,500
But almost any DNS-as-a-service
provider works this way.

84
00:03:47,500 --> 00:03:49,853
So is it really a security problem?

85
00:03:53,658 --> 00:03:54,820
All right, this is an example that

86
00:03:54,820 --> 00:03:57,272
if you try to register
Wiz again on the server,

87
00:03:57,272 --> 00:03:59,733
it would be impossible,
because it's already there.

88
00:04:00,720 --> 00:04:03,490
- So we started with a very, very simple

89
00:04:03,490 --> 00:04:05,440
and interesting research question.

90
00:04:05,440 --> 00:04:07,860
If we can register any domain, right,

91
00:04:07,860 --> 00:04:10,310
what domain can we possibly register

92
00:04:10,310 --> 00:04:13,260
that will give us interesting
access to data, right?

93
00:04:13,260 --> 00:04:15,520
So we wanted to register a domain

94
00:04:15,520 --> 00:04:17,607
that is not already
present or the name server,

95
00:04:17,607 --> 00:04:20,300
and that for some reason DNS clients will

96
00:04:20,300 --> 00:04:21,620
actually query for that.

97
00:04:21,620 --> 00:04:25,040
So we started into a quest
to think what domains

98
00:04:25,040 --> 00:04:27,170
can we register that no one thought about,

99
00:04:27,170 --> 00:04:29,573
and we could actually
somehow break the DNS?

100
00:04:31,180 --> 00:04:35,623
- So we thought about it,
and came up with an idea.

101
00:04:36,650 --> 00:04:38,790
What would happen if we register

102
00:04:38,790 --> 00:04:43,150
one of the official AWS name
servers on the platform?

103
00:04:43,150 --> 00:04:44,526
What would happen if we registered

104
00:04:44,526 --> 00:04:48,530
one of the Route 53 name
servers under the same server?

105
00:04:48,530 --> 00:04:51,430
So we chose an arbitrary name server.

106
00:04:51,430 --> 00:04:55,940
In this case, it's the ns-1611,
as you see on the slide,

107
00:04:55,940 --> 00:04:59,590
and we tried to register it
on the platform enough times

108
00:04:59,590 --> 00:05:01,800
that at least once it would
fall under the management

109
00:05:01,800 --> 00:05:04,100
of the same name server.

110
00:05:04,100 --> 00:05:05,873
Let's do an illustration of that.

111
00:05:07,100 --> 00:05:09,123
So as you can see in the slide,

112
00:05:09,123 --> 00:05:12,344
we have an illustration of
the ns-1611 name server,

113
00:05:12,344 --> 00:05:14,857
which is an official Route 53 name server,

114
00:05:14,857 --> 00:05:18,010
and you can see it
already contains DNS zones

115
00:05:18,010 --> 00:05:20,513
for several of a lot of
these three customers.

116
00:05:21,460 --> 00:05:24,780
What do you think would happen
if you managed to register

117
00:05:24,780 --> 00:05:28,120
the name server domain name ns-16-11

118
00:05:28,120 --> 00:05:29,983
under its own management?

119
00:05:31,750 --> 00:05:34,107
I totally don't know what would happen,

120
00:05:34,107 --> 00:05:35,965
but we must check it out.
- Definitely.

121
00:05:35,965 --> 00:05:36,900
(Ami laughs)

122
00:05:36,900 --> 00:05:39,230
- So we tried it, and it worked

123
00:05:41,294 --> 00:05:42,590
As you can see on the slide,

124
00:05:42,590 --> 00:05:45,760
our new domain is now
managed within a name server

125
00:05:45,760 --> 00:05:47,913
with the same domain name.

126
00:05:49,680 --> 00:05:50,940
We were really excited.

127
00:05:50,940 --> 00:05:54,170
We didn't know if it will have any impact,

128
00:05:54,170 --> 00:05:57,360
but we had a really good
feeling about this one.

129
00:05:57,360 --> 00:06:01,380
So to test the effect of what we did,

130
00:06:01,380 --> 00:06:04,490
we decided to specify an IP record,

131
00:06:04,490 --> 00:06:07,253
IP record pointing to our server.

132
00:06:08,960 --> 00:06:12,500
So now, if a DNS client will connect

133
00:06:12,500 --> 00:06:17,180
to the ns-1611 name server
and ask it about itself

134
00:06:17,180 --> 00:06:20,730
it is our IP address
that will be returned.

135
00:06:20,730 --> 00:06:23,460
At this point, we were
really curious to know

136
00:06:23,460 --> 00:06:27,500
if anyone is asking Amazon's
server about itself,

137
00:06:27,500 --> 00:06:29,440
and if anyone is trying
to connect with us,

138
00:06:29,440 --> 00:06:31,760
because of the manipulation we did.

139
00:06:31,760 --> 00:06:35,320
So we ran tcpdump on our server,

140
00:06:35,320 --> 00:06:37,270
and hoped to see something interesting.

141
00:06:38,880 --> 00:06:42,340
Surprisingly, we started
receiving thousands of requests

142
00:06:42,340 --> 00:06:44,580
from thousands of different IPs.

143
00:06:44,580 --> 00:06:47,150
We realized we were onto something.

144
00:06:47,150 --> 00:06:48,810
The next step in the research was

145
00:06:48,810 --> 00:06:50,730
to analyze all these DNS queries,

146
00:06:50,730 --> 00:06:55,593
and figure out why these
queries are being sent to us.

147
00:06:57,670 --> 00:07:00,480
- So wait, why are we getting any traffic?

148
00:07:00,480 --> 00:07:02,960
And no one was supposed
to ask the name server

149
00:07:02,960 --> 00:07:04,300
for their own domain.

150
00:07:04,300 --> 00:07:06,880
The name server actual
domain is registered

151
00:07:06,880 --> 00:07:07,853
on other name servers, right?

152
00:07:07,853 --> 00:07:10,160
So why are we getting any traffic?

153
00:07:10,160 --> 00:07:12,305
And what's more weird was that

154
00:07:12,305 --> 00:07:15,250
it wasn't actual regular traffic.

155
00:07:15,250 --> 00:07:16,330
It wasn't even DNS traffic.

156
00:07:16,330 --> 00:07:18,490
It was dynamic DNS traffic,

157
00:07:18,490 --> 00:07:21,420
which is a very specific protocol that

158
00:07:21,420 --> 00:07:23,200
you wouldn't even expect to see

159
00:07:23,200 --> 00:07:26,180
in this type of internet traffic.

160
00:07:26,180 --> 00:07:28,390
Now, we were getting a lot of data.

161
00:07:28,390 --> 00:07:30,020
I'm talking about IP addresses,

162
00:07:30,020 --> 00:07:32,200
computer names, domain names.

163
00:07:32,200 --> 00:07:33,653
So we started investigating.

164
00:07:35,730 --> 00:07:37,560
We started to look into the data.

165
00:07:37,560 --> 00:07:41,730
So basically, we saw,
we were getting millions

166
00:07:41,730 --> 00:07:44,570
of extra requests from endpoints,

167
00:07:44,570 --> 00:07:46,280
and when we started looking into it,

168
00:07:46,280 --> 00:07:47,460
we saw it's a lot of data.

169
00:07:47,460 --> 00:07:50,780
We were seeing internal IPs, external IPs,

170
00:07:50,780 --> 00:07:52,070
names of computers.

171
00:07:52,070 --> 00:07:54,211
We very quickly understood

172
00:07:54,211 --> 00:07:56,850
these are names of endpoints

173
00:07:56,850 --> 00:07:59,800
within many, many different
organizations across the globe.

174
00:08:00,830 --> 00:08:03,190
And the scale was totally unbelievable.

175
00:08:03,190 --> 00:08:07,010
I'd say within a few hours
of sniffing the traffic,

176
00:08:07,010 --> 00:08:09,400
we saw more than a
million unique endpoints,

177
00:08:09,400 --> 00:08:11,140
and they would belong to,

178
00:08:11,140 --> 00:08:13,020
based on the initial analysis we did,

179
00:08:13,020 --> 00:08:15,750
we saw more than 50,000 organization,

180
00:08:15,750 --> 00:08:20,010
15,000 organizations,
all of them using AWS

181
00:08:20,010 --> 00:08:22,270
as a DNS service.

182
00:08:22,270 --> 00:08:25,377
Now, we said, "Okay,
let's try to figure out

183
00:08:25,377 --> 00:08:28,840
"what organizations are
we seeing here," right?

184
00:08:28,840 --> 00:08:32,150
So it was quickly we understood that

185
00:08:32,150 --> 00:08:34,830
we are stepping into an unbelievable tap

186
00:08:34,830 --> 00:08:37,680
of worldwide organization and traffic.

187
00:08:37,680 --> 00:08:40,110
We saw Fortune 500 companies.

188
00:08:40,110 --> 00:08:43,830
We saw more than 130 government agencies

189
00:08:43,830 --> 00:08:45,370
right in the traffic.

190
00:08:45,370 --> 00:08:48,750
So we knew we were probably
onto something big,

191
00:08:48,750 --> 00:08:50,720
but the problem is that we had no clue

192
00:08:50,720 --> 00:08:52,163
what we were seeing and why.

193
00:08:54,340 --> 00:08:56,490
So what do we know so far?

194
00:08:56,490 --> 00:08:58,900
We registered a name server domain

195
00:08:58,900 --> 00:09:00,600
on the name server, right?

196
00:09:00,600 --> 00:09:03,560
We have no idea why, but for some reason,

197
00:09:03,560 --> 00:09:05,910
millions of endpoints started sending

198
00:09:05,910 --> 00:09:07,860
tons of dynamic queries to us.

199
00:09:07,860 --> 00:09:09,960
But again, why?

200
00:09:09,960 --> 00:09:11,850
Why are we seeing dynamic DNS?

201
00:09:11,850 --> 00:09:13,650
Before we are able to answer

202
00:09:13,650 --> 00:09:15,930
that simple, mysterious question,

203
00:09:15,930 --> 00:09:19,120
we have no way to actually
understand what we are seeing.

204
00:09:19,120 --> 00:09:20,880
So we decided we are going

205
00:09:20,880 --> 00:09:23,273
to step into the world of dynamic DNS.

206
00:09:25,160 --> 00:09:28,183
- So what is exactly dynamic DNS?

207
00:09:28,183 --> 00:09:32,350
Dynamic DNS is an extension
to the DNS protocol,

208
00:09:32,350 --> 00:09:36,500
which is specified in RFC 2136.

209
00:09:36,500 --> 00:09:40,300
It allows clients to
dynamically update DNS records

210
00:09:40,300 --> 00:09:42,500
of a target DNS server,

211
00:09:42,500 --> 00:09:47,040
and it's commonly used to
help devices find each other

212
00:09:47,040 --> 00:09:48,930
in internal Windows networks.

213
00:09:48,930 --> 00:09:50,080
Let's see how it works.

214
00:09:51,320 --> 00:09:54,550
So when my Windows computer
joined the company's network,

215
00:09:54,550 --> 00:09:56,610
and receive a new IP address,

216
00:09:56,610 --> 00:10:01,350
as you see on the slide, it
updates the local DNS server,

217
00:10:01,350 --> 00:10:05,950
which is called master
server on its new IP address.

218
00:10:05,950 --> 00:10:09,280
Now, when Ami is trying
to connect to my computer,

219
00:10:09,280 --> 00:10:12,943
he can query the local
DNS server about SHIR-PC,

220
00:10:14,150 --> 00:10:15,930
and the master server will answer it

221
00:10:15,930 --> 00:10:18,000
with my current IP address.

222
00:10:18,000 --> 00:10:20,720
So far, sounds like a great feature.

223
00:10:20,720 --> 00:10:23,470
At the moment, it is still not clear to us

224
00:10:23,470 --> 00:10:27,450
why endpoints sends dynamic
DNS updates to our server.

225
00:10:27,450 --> 00:10:29,710
These are requests that should never leave

226
00:10:29,710 --> 00:10:31,500
the internal network.

227
00:10:31,500 --> 00:10:33,410
Could it be that the endpoints

228
00:10:33,410 --> 00:10:37,470
think of our server as
their master server?

229
00:10:37,470 --> 00:10:41,073
How does it even know to
find the master server?

230
00:10:42,530 --> 00:10:47,430
So it turns out Microsoft
has its own algorithm

231
00:10:47,430 --> 00:10:49,210
for finding the master server,

232
00:10:49,210 --> 00:10:53,063
and it does not work exactly
as specified in the RFC.

233
00:10:54,010 --> 00:10:56,750
Just before we go into the
logic of the algorithm,

234
00:10:56,750 --> 00:10:59,210
let's do a brief refresh on DNS records

235
00:10:59,210 --> 00:11:02,153
for those who have not
touched DNS recently.

236
00:11:04,090 --> 00:11:05,737
So in order to fully
understand the algorithm,

237
00:11:05,737 --> 00:11:09,200
it is important to remember
only three types of records,

238
00:11:09,200 --> 00:11:10,980
and we'll make it very quick.

239
00:11:10,980 --> 00:11:12,643
The first will be the A record.

240
00:11:13,630 --> 00:11:15,960
A records specify the IP address

241
00:11:15,960 --> 00:11:18,200
of which the domain points to.

242
00:11:18,200 --> 00:11:21,060
The second would be the NS record,

243
00:11:21,060 --> 00:11:24,010
which specify the name
server of the domain name.

244
00:11:24,010 --> 00:11:26,830
The third is the SOA record,

245
00:11:26,830 --> 00:11:29,610
which is short for Start of Authority.

246
00:11:29,610 --> 00:11:31,330
The SOA records contain

247
00:11:31,330 --> 00:11:33,690
administrative information
about the domain,

248
00:11:33,690 --> 00:11:37,180
and its first parameter
is the master server.

249
00:11:37,180 --> 00:11:39,590
This is the server in
which clients would attempt

250
00:11:39,590 --> 00:11:42,420
to update doing dynamic DNS updates.

251
00:11:42,420 --> 00:11:44,480
Usually, this server will be

252
00:11:44,480 --> 00:11:47,651
on one of the domain's name servers,

253
00:11:47,651 --> 00:11:51,630
and in Route 53, the
default value of this field

254
00:11:51,630 --> 00:11:53,980
will be the first Amazon's name server

255
00:11:53,980 --> 00:11:56,050
from the name servers list.

256
00:11:56,050 --> 00:11:58,720
And now that we have all
refreshed our memory,

257
00:11:58,720 --> 00:12:00,173
let's get into the algorithm.

258
00:12:01,870 --> 00:12:04,760
Now, this is the primary name server.

259
00:12:04,760 --> 00:12:07,670
So when a Windows endpoint want to update

260
00:12:07,670 --> 00:12:10,410
the internal master server
for its new IP address,

261
00:12:10,410 --> 00:12:12,150
it first needs to find it.

262
00:12:12,150 --> 00:12:14,420
The endpoint will send the SOA query

263
00:12:14,420 --> 00:12:15,870
for the internal DNS resolver

264
00:12:15,870 --> 00:12:19,690
on its own fully qualified domain name.

265
00:12:19,690 --> 00:12:22,130
The internal DNS resolver knows that

266
00:12:22,130 --> 00:12:26,150
the wiz.io DNS zone is managed internally,

267
00:12:26,150 --> 00:12:28,390
so when queried it will return

268
00:12:28,390 --> 00:12:33,063
the internal master server
within the SOA response.

269
00:12:35,210 --> 00:12:39,110
Now, when the endpoints
find the master server,

270
00:12:39,110 --> 00:12:41,960
it will update it as we saw
in the previous illustration,

271
00:12:44,240 --> 00:12:46,003
and the update succeed.

272
00:12:47,310 --> 00:12:51,770
But what happens if the
corporate DNS resolver

273
00:12:51,770 --> 00:12:53,520
is not set correctly,

274
00:12:53,520 --> 00:12:57,570
and does not contain a DNS
zone for the local domain?

275
00:12:57,570 --> 00:13:00,870
Or what would happen when the computer

276
00:13:00,870 --> 00:13:02,680
leaves the organization,

277
00:13:02,680 --> 00:13:05,170
and starts working with
external DNS resolvers

278
00:13:05,170 --> 00:13:06,533
provided by home routers?

279
00:13:08,120 --> 00:13:10,160
In that cases, when the computer query

280
00:13:10,160 --> 00:13:13,070
for the corporate domain, the
DNS resolver will treat it

281
00:13:13,070 --> 00:13:16,050
as an external domain and
will return the master server

282
00:13:16,050 --> 00:13:18,210
of the external domain, just as it will do

283
00:13:18,210 --> 00:13:19,443
with any other domain.

284
00:13:20,490 --> 00:13:22,140
This is where the problem starts.

285
00:13:23,930 --> 00:13:27,560
So imagine an employee of Wiz
decided to work from home,

286
00:13:27,560 --> 00:13:30,933
like most of us lately, and
connected to their home Wi-Fi.

287
00:13:31,780 --> 00:13:34,400
The computer got an internal IP address

288
00:13:34,400 --> 00:13:35,840
from the home router,

289
00:13:35,840 --> 00:13:39,453
and now trying to find the local
master server to update it.

290
00:13:40,800 --> 00:13:44,410
Because the external DNS
resolver are not familiar

291
00:13:44,410 --> 00:13:47,360
with wiz.io, it is going to resolve it

292
00:13:47,360 --> 00:13:49,233
just like any other domain.

293
00:13:50,250 --> 00:13:53,300
Because the domain is managed on Route 53,

294
00:13:53,300 --> 00:13:55,480
it will return the wiz.io master server

295
00:13:55,480 --> 00:13:57,623
as specified in Route 53.

296
00:13:59,830 --> 00:14:03,250
The endpoint will then try
to update the master server,

297
00:14:03,250 --> 00:14:07,290
which is an Amazon shared name server

298
00:14:07,290 --> 00:14:09,543
that manages thousands of customers.

299
00:14:11,270 --> 00:14:14,860
Obviously, Amazon servers
does not support dynamic DNS,

300
00:14:14,860 --> 00:14:16,510
so the update request would fail.

301
00:14:18,810 --> 00:14:21,860
The thing is that Microsoft's algorithm

302
00:14:21,860 --> 00:14:23,003
does not give up here.

303
00:14:23,850 --> 00:14:26,380
The algorithm believes
it still has a chance

304
00:14:26,380 --> 00:14:28,260
to find the master server.

305
00:14:28,260 --> 00:14:30,070
So the next step would be to check

306
00:14:30,070 --> 00:14:35,070
if the wiz.io's name servers have records

307
00:14:35,160 --> 00:14:37,067
for the master server.

308
00:14:37,067 --> 00:14:40,280
So the DNS client connects directly

309
00:14:40,280 --> 00:14:42,950
to the IP address of the name server,

310
00:14:42,950 --> 00:14:46,967
and ask them what is the IP
address of the master server.

311
00:14:46,967 --> 00:14:50,703
In our case, it is the same
domain name as the name server.

312
00:14:51,788 --> 00:14:54,160
And here happens the interesting part.

313
00:14:54,160 --> 00:14:56,140
In fact, Windows DNS clients queries

314
00:14:56,140 --> 00:14:58,250
the name server for itself.

315
00:14:58,250 --> 00:15:01,720
And if you remember, we have
registered this DNS zone,

316
00:15:01,720 --> 00:15:04,163
and here we can return any record we want.

317
00:15:05,500 --> 00:15:09,410
So we returned our IP
address to the DNS client,

318
00:15:09,410 --> 00:15:12,243
and now, the computer
will update our server

319
00:15:14,470 --> 00:15:18,250
with DNS updates, which is
the malicious actor server,

320
00:15:18,250 --> 00:15:20,273
and this is very crazy.

321
00:15:22,900 --> 00:15:26,600
- So now we reached the point

322
00:15:26,600 --> 00:15:29,080
that we started understanding
what's happening, right?

323
00:15:29,080 --> 00:15:31,860
Because what we know, we
know that Windows endpoints,

324
00:15:31,860 --> 00:15:34,870
they use a custom algorithm
to find the master DNS.

325
00:15:34,870 --> 00:15:38,020
The algorithm queries the name
server for its own address.

326
00:15:38,020 --> 00:15:41,310
When you are in external
and using Route 53,

327
00:15:41,310 --> 00:15:43,140
what happens is that this means that

328
00:15:43,140 --> 00:15:45,610
you're actually querying the
name server for its own domain,

329
00:15:45,610 --> 00:15:47,598
and that explains what happened.

330
00:15:47,598 --> 00:15:52,060
That's why we are able to
register our malicious DNS server,

331
00:15:52,060 --> 00:15:54,370
and we were receiving
this dynamic DNS traffic

332
00:15:54,370 --> 00:15:55,560
from millions of endpoints,

333
00:15:55,560 --> 00:15:58,810
because all of the
organizations using Route 53,

334
00:15:58,810 --> 00:16:02,650
when these devices are
actually outside of the domain

335
00:16:02,650 --> 00:16:03,960
and outside of the company,

336
00:16:03,960 --> 00:16:06,340
they will actually use this algorithm,

337
00:16:06,340 --> 00:16:09,750
and we would be able to get
traffic from those devices.

338
00:16:09,750 --> 00:16:12,280
So we understood what's going on.

339
00:16:12,280 --> 00:16:14,170
The next step was to figure out

340
00:16:14,170 --> 00:16:16,270
how much data are we actually getting,

341
00:16:16,270 --> 00:16:18,330
and what can we find from it?

342
00:16:18,330 --> 00:16:20,510
So when we started looking into the data,

343
00:16:20,510 --> 00:16:25,163
we quickly understood that
we are actually building here

344
00:16:25,163 --> 00:16:28,470
what we called a nation state
intelligence capability,

345
00:16:28,470 --> 00:16:29,940
because think about it.

346
00:16:29,940 --> 00:16:33,660
We saw IPs for millions of endpoints

347
00:16:33,660 --> 00:16:36,440
from more than 15,000 organizations,

348
00:16:36,440 --> 00:16:38,530
but it's not just DNS requests.

349
00:16:38,530 --> 00:16:43,040
We are seeing external IPs,
internal IPs, computer names.

350
00:16:43,040 --> 00:16:46,250
We are starting to map all
of those organizations.

351
00:16:46,250 --> 00:16:48,550
So let's see what we
can do with this scale

352
00:16:48,550 --> 00:16:51,100
of intelligence capabilities.

353
00:16:51,100 --> 00:16:54,140
So we started from what we
call IP-based intelligence.

354
00:16:54,140 --> 00:16:56,840
Imagine that you can map companies

355
00:16:56,840 --> 00:16:59,400
and a portion of
companies around the world

356
00:16:59,400 --> 00:17:01,050
and map their global sites,

357
00:17:01,050 --> 00:17:03,170
map where their employees are at, right?

358
00:17:03,170 --> 00:17:05,440
So we looked at one company, for example,

359
00:17:05,440 --> 00:17:08,633
and view, and just see
how amazing this is.

360
00:17:08,633 --> 00:17:11,280
So this is one of the
largest services companies

361
00:17:11,280 --> 00:17:14,320
in the world, and we
got around 40K endpoints

362
00:17:14,320 --> 00:17:16,860
actively reporting from this company.

363
00:17:16,860 --> 00:17:21,480
Now, we are seeing a mapping
of all of their global sites,

364
00:17:21,480 --> 00:17:23,870
all of their actual offices,

365
00:17:23,870 --> 00:17:25,830
the employee locations, right?

366
00:17:25,830 --> 00:17:28,793
So from just the external IPs, we can map,

367
00:17:29,673 --> 00:17:33,570
create a map of offices and
home locations of employees

368
00:17:33,570 --> 00:17:35,220
across all of those companies.

369
00:17:35,220 --> 00:17:37,080
It's pretty amazing.

370
00:17:37,080 --> 00:17:39,038
And we can go even deeper, right?

371
00:17:39,038 --> 00:17:42,080
This is an exhibit of a specific office,

372
00:17:42,080 --> 00:17:45,930
where we detected 600 endpoints
of that company, right?

373
00:17:45,930 --> 00:17:48,160
So imagine an intelligence capability

374
00:17:48,160 --> 00:17:52,750
that maps for you in one
single tap into the DNS

375
00:17:52,750 --> 00:17:56,740
without any trace actual structures

376
00:17:56,740 --> 00:17:58,610
of organizations across the world

377
00:17:58,610 --> 00:18:01,423
and all of their different
offices and locations.

378
00:18:02,490 --> 00:18:04,250
So, but it doesn't stop there.

379
00:18:04,250 --> 00:18:05,083
Then we started thinking,

380
00:18:05,083 --> 00:18:07,627
"Okay, what interesting
data can we pull from this

381
00:18:07,627 --> 00:18:10,380
"if we're an intelligence agency now?"

382
00:18:10,380 --> 00:18:12,560
So we started looking at companies

383
00:18:12,560 --> 00:18:13,810
that are in violation

384
00:18:13,810 --> 00:18:17,070
of the Office of Foreign Assets Control.

385
00:18:17,070 --> 00:18:19,150
And we saw interesting things.

386
00:18:19,150 --> 00:18:21,210
For example, this mining company,

387
00:18:21,210 --> 00:18:23,420
it's an international mining company,

388
00:18:23,420 --> 00:18:26,260
and interestingly, we found six employees

389
00:18:26,260 --> 00:18:27,710
working from the Ivory Coast,

390
00:18:27,710 --> 00:18:30,020
which is definitely a
place that is not allowed

391
00:18:30,020 --> 00:18:33,060
in that regulation at all, right?

392
00:18:33,060 --> 00:18:37,850
And we saw so many interesting
examples like that.

393
00:18:37,850 --> 00:18:42,230
So we found a subsidiary
of a large credit union

394
00:18:42,230 --> 00:18:43,923
with a branch in Iran.

395
00:18:44,900 --> 00:18:48,210
Again, 13 endpoints working from Iran

396
00:18:49,090 --> 00:18:53,310
based on our newly revised
intelligence capability, right?

397
00:18:53,310 --> 00:18:56,420
So it's not only mapping
all organizations.

398
00:18:56,420 --> 00:18:58,740
We can now start finding violations.

399
00:18:58,740 --> 00:19:02,440
We can ask questions across
so many different agencies.

400
00:19:02,440 --> 00:19:03,923
You remember, we are actually seeing

401
00:19:03,923 --> 00:19:05,540
also government agencies.

402
00:19:05,540 --> 00:19:08,543
I wonder where are all
of their offices, right?

403
00:19:09,400 --> 00:19:12,280
Now, it doesn't stop there,
because if you remember,

404
00:19:12,280 --> 00:19:15,490
external IPs is just a small
portion of the data, right?

405
00:19:15,490 --> 00:19:17,260
We also have internal IPs.

406
00:19:17,260 --> 00:19:19,790
So what can you do with the internal IPs?

407
00:19:19,790 --> 00:19:22,930
If I have internal IPs
from different endpoints

408
00:19:22,930 --> 00:19:24,890
from the company, I can start building

409
00:19:24,890 --> 00:19:26,170
the map of the network,

410
00:19:26,170 --> 00:19:29,240
the internal logical
network of the company.

411
00:19:29,240 --> 00:19:31,510
So for example, these are the segments.

412
00:19:31,510 --> 00:19:33,070
This is the employee segment.

413
00:19:33,070 --> 00:19:33,903
This is the ICT.

414
00:19:33,903 --> 00:19:35,340
Here's the operational network.

415
00:19:35,340 --> 00:19:37,690
Remember that we also
see names of devices,

416
00:19:37,690 --> 00:19:40,540
so we can start really
understanding all of the segments,

417
00:19:40,540 --> 00:19:42,440
so building an intelligence map

418
00:19:42,440 --> 00:19:44,700
of the organization
externally and internally

419
00:19:44,700 --> 00:19:46,770
across thousands of organizations.

420
00:19:46,770 --> 00:19:49,310
Now, we also had computer names

421
00:19:49,310 --> 00:19:51,960
and the computer names
actually hold information

422
00:19:51,960 --> 00:19:53,480
about the endpoint, right?

423
00:19:53,480 --> 00:19:55,870
And many times, you get employee names.

424
00:19:55,870 --> 00:19:58,940
You understand the actual
role of the machine.

425
00:19:58,940 --> 00:20:01,216
You can see the specific, the build

426
00:20:01,216 --> 00:20:04,440
the machines is using, right?

427
00:20:04,440 --> 00:20:07,790
So we are actually getting
quite a lot of information

428
00:20:07,790 --> 00:20:10,830
about those companies based on the IPs,

429
00:20:10,830 --> 00:20:12,700
the computer names.

430
00:20:12,700 --> 00:20:14,170
Here, we see this is finance,

431
00:20:14,170 --> 00:20:15,810
and we see all of those machines

432
00:20:15,810 --> 00:20:17,340
are part of a specific segment.

433
00:20:17,340 --> 00:20:19,480
Okay, perfect, I am starting to build

434
00:20:19,480 --> 00:20:21,940
my internal map of this company.

435
00:20:21,940 --> 00:20:24,010
That's perfect.

436
00:20:24,010 --> 00:20:28,833
Now, just so we understand the scope here,

437
00:20:30,510 --> 00:20:35,470
we looked at a specific DNS provider.

438
00:20:35,470 --> 00:20:38,500
Then we asked, "Wait, is
this only this DNS provider?"

439
00:20:38,500 --> 00:20:40,390
So we started looking at others,

440
00:20:40,390 --> 00:20:43,123
and we soon found there is many others

441
00:20:43,123 --> 00:20:46,200
also susceptible to the
same vulnerabilities, right?

442
00:20:46,200 --> 00:20:48,710
This is not just a Route 53 vulnerability.

443
00:20:48,710 --> 00:20:50,920
This seems to be something that is shared

444
00:20:50,920 --> 00:20:53,490
across most of the DNS service providers,

445
00:20:53,490 --> 00:20:54,741
and if you think about it,

446
00:20:54,741 --> 00:20:56,970
we don't have to stop
at the cloud providers.

447
00:20:56,970 --> 00:20:58,290
You have shared hosting.

448
00:20:58,290 --> 00:20:59,760
You have domain registrars.

449
00:20:59,760 --> 00:21:03,500
There is so many different
service providers using,

450
00:21:03,500 --> 00:21:05,990
again, I think the shared a concept here

451
00:21:05,990 --> 00:21:07,650
is that they provide DNS services

452
00:21:07,650 --> 00:21:09,530
for many, many different companies,

453
00:21:09,530 --> 00:21:13,260
and there is a chance that many,
many of them are vulnerable

454
00:21:13,260 --> 00:21:15,333
to this attack of name server hijacking.

455
00:21:18,670 --> 00:21:22,810
So we started from AWS.

456
00:21:22,810 --> 00:21:25,174
We reported the vulnerability,

457
00:21:25,174 --> 00:21:26,640
and it was fixed really, really quickly

458
00:21:26,640 --> 00:21:30,443
by the AWS Route 53 team.

459
00:21:31,720 --> 00:21:35,180
Again, I think that within
a week, or two it was fixed,

460
00:21:35,180 --> 00:21:38,820
and no one can now utilize
this vulnerability in Route 53,

461
00:21:38,820 --> 00:21:41,240
because you are not
allowed anymore to register

462
00:21:41,240 --> 00:21:43,980
those special domains in the name server,

463
00:21:43,980 --> 00:21:46,150
and we are in disclosure process

464
00:21:46,150 --> 00:21:48,580
with several additional cloud providers,

465
00:21:48,580 --> 00:21:51,310
and we believe there is
many, many more to come,

466
00:21:51,310 --> 00:21:54,730
and it's part also of
what we call the industry

467
00:21:54,730 --> 00:21:56,500
to start looking into,

468
00:21:56,500 --> 00:21:59,543
and actually check across
all of the DNS providers.

469
00:22:00,880 --> 00:22:03,313
- So as Ami just said,

470
00:22:03,313 --> 00:22:06,053
AWS fixed the vulnerability very easily.

471
00:22:06,960 --> 00:22:09,880
They added all the names
of their name servers

472
00:22:09,880 --> 00:22:13,393
to an ignore list, which is
simple, and very effective.

473
00:22:14,260 --> 00:22:16,746
Users trying to register
one of the official

474
00:22:16,746 --> 00:22:19,917
AWS name servers on the Route 53 platform

475
00:22:19,917 --> 00:22:22,930
are now receiving the
following error message,

476
00:22:22,930 --> 00:22:25,970
which says that the domain is invalid,

477
00:22:25,970 --> 00:22:27,623
and you can see it on the slide.

478
00:22:29,980 --> 00:22:32,960
When we reported our
discovery to Microsoft,

479
00:22:32,960 --> 00:22:35,753
they explained to us that this
is a known misconfiguration

480
00:22:35,753 --> 00:22:38,190
that occur when the organization works

481
00:22:38,190 --> 00:22:40,247
with the external DNS resolvers,

482
00:22:41,452 --> 00:22:45,220
and it's not considered
as a vulnerability.

483
00:22:45,220 --> 00:22:48,150
So we would like to offer a solution

484
00:22:48,150 --> 00:22:50,557
for both platforms and organizations

485
00:22:50,557 --> 00:22:52,650
who would like to protect themselves

486
00:22:52,650 --> 00:22:55,610
from these kind of attacks.

487
00:22:55,610 --> 00:22:58,990
So first, we will start
with the platforms.

488
00:22:58,990 --> 00:23:02,480
DNS providers who want to
ensure they are not vulnerable

489
00:23:02,480 --> 00:23:04,260
should make sure it is
impossible to register

490
00:23:04,260 --> 00:23:07,520
their own domains on the platform.

491
00:23:07,520 --> 00:23:11,280
DNS providers who want to
have even a better security

492
00:23:11,280 --> 00:23:13,610
can also do ownership verification

493
00:23:13,610 --> 00:23:16,943
to ensure users only
register their own domains.

494
00:23:18,210 --> 00:23:21,720
And in addition, it is
very important to make sure

495
00:23:21,720 --> 00:23:25,730
that the platform user cannot
register a reserved name,

496
00:23:25,730 --> 00:23:27,553
as specified in the DNS RFC.

497
00:23:28,410 --> 00:23:31,330
The RFC is full of reserved domains

498
00:23:31,330 --> 00:23:33,260
that should not be allowed to register,

499
00:23:33,260 --> 00:23:36,603
and their registration may
lead to unexpected behavior.

500
00:23:38,900 --> 00:23:41,425
For organizations that want to make sure

501
00:23:41,425 --> 00:23:43,973
they're not vulnerable,
we recommend making sure

502
00:23:43,973 --> 00:23:47,410
that the primary name
server in their SOA record

503
00:23:47,410 --> 00:23:49,020
does not point to a different domain

504
00:23:49,020 --> 00:23:50,920
owned by the DNS provider.

505
00:23:50,920 --> 00:23:52,450
As you can see in the slide,

506
00:23:52,450 --> 00:23:54,240
and now you can see it,

507
00:23:54,240 --> 00:23:56,130
the default primary name server

508
00:23:56,130 --> 00:23:58,900
that a domain owner receives
when they add their domain

509
00:23:58,900 --> 00:24:01,030
to the Route 53 is the first

510
00:24:01,030 --> 00:24:04,443
of the four name servers,
which manage the DNS zone.

511
00:24:07,942 --> 00:24:10,180
Changing the primary name server

512
00:24:10,180 --> 00:24:14,603
to an invalid sub-domain
of the organization,

513
00:24:14,603 --> 00:24:18,103
or the even the real primary master server

514
00:24:19,820 --> 00:24:21,570
will fix the issue,

515
00:24:21,570 --> 00:24:24,570
and attackers, and will not
allow potential attackers

516
00:24:24,570 --> 00:24:27,133
to register domain on the platform,

517
00:24:27,133 --> 00:24:28,533
as you can see in the slide.

518
00:24:29,890 --> 00:24:32,273
And yeah, we are very close to the end.

519
00:24:34,560 --> 00:24:37,080
- So just a few summaries and take-aways.

520
00:24:37,080 --> 00:24:40,070
First of all, what's
really cool here is that

521
00:24:40,070 --> 00:24:41,040
we were able to get

522
00:24:41,040 --> 00:24:44,000
to nation state intelligence capabilities

523
00:24:44,000 --> 00:24:46,070
from a simple domain registration.

524
00:24:46,070 --> 00:24:49,090
Just a simple for the
registration got us so much power,

525
00:24:49,090 --> 00:24:52,520
and we believe what we
saw here is a new class

526
00:24:52,520 --> 00:24:53,940
of DNS vulnerabilities.

527
00:24:53,940 --> 00:24:56,120
This is just one idea of a domain.

528
00:24:56,120 --> 00:24:57,430
Think about how many different

529
00:24:57,430 --> 00:24:59,410
interesting domains you
can try to register,

530
00:24:59,410 --> 00:25:01,770
and remember today, you
can basically, right,

531
00:25:01,770 --> 00:25:03,210
register any domain that you want

532
00:25:03,210 --> 00:25:05,630
that would trigger unexpected results.

533
00:25:05,630 --> 00:25:08,840
No one thought, and we honestly
didn't understand initially

534
00:25:08,840 --> 00:25:10,860
what would be the impact of registering

535
00:25:10,860 --> 00:25:12,350
the name server on itself.

536
00:25:12,350 --> 00:25:14,580
I'm sure there's many other magic domains

537
00:25:14,580 --> 00:25:15,770
that you can register,

538
00:25:15,770 --> 00:25:18,320
and it opens up so many
interesting questions,

539
00:25:18,320 --> 00:25:20,910
like all of this traffic was dynamic DNS.

540
00:25:20,910 --> 00:25:25,860
Why is it actually, dynamic
DNS was built as a protocol

541
00:25:25,860 --> 00:25:28,490
like 20 years ago for on-premise networks.

542
00:25:28,490 --> 00:25:31,490
Why are we still seeing it
outside in the internet?

543
00:25:31,490 --> 00:25:33,310
What are the implications of this protocol

544
00:25:33,310 --> 00:25:35,700
still being active on the internet,

545
00:25:35,700 --> 00:25:39,070
and potentially endangering
both the endpoints

546
00:25:39,070 --> 00:25:40,750
and the DNS servers, right?

547
00:25:40,750 --> 00:25:43,950
So there's so much here that we see

548
00:25:43,950 --> 00:25:46,530
as potential research areas for us

549
00:25:46,530 --> 00:25:48,710
and also for the community,

550
00:25:48,710 --> 00:25:51,210
and we believe the scope here is huge,

551
00:25:51,210 --> 00:25:53,360
'cause it's not a single service.

552
00:25:53,360 --> 00:25:55,870
We found it across multiple DNS providers,

553
00:25:55,870 --> 00:25:57,717
and we are pretty sure
that this vulnerability

554
00:25:57,717 --> 00:25:59,920
and many others will probably impact

555
00:25:59,920 --> 00:26:04,473
many, many, many of those DNS providers.

556
00:26:07,477 --> 00:26:10,170
- All right, thank you very much, guys.

557
00:26:10,170 --> 00:26:11,460
- Thank you.
- It was very fun.

558
00:26:11,460 --> 00:26:12,293
- Yeah?

