1
00:00:01,520 --> 00:00:02,820
- Welcome to the presentation,

2
00:00:02,820 --> 00:00:04,670
Central Bank Digital Currency,

3
00:00:04,670 --> 00:00:06,807
Threats and Vulnerabilities.

4
00:00:10,049 --> 00:00:12,716
We will start with a background.

5
00:00:16,220 --> 00:00:17,790
Then we'll move over a detailed

6
00:00:17,790 --> 00:00:21,683
system description of the
prototype, system components,

7
00:00:22,827 --> 00:00:26,000
and to point out functions
that need protection,

8
00:00:26,000 --> 00:00:29,293
information to secure,
and secure communication.

9
00:00:30,370 --> 00:00:33,050
Then we will deep dive
into vulnerabilities

10
00:00:33,050 --> 00:00:34,610
that we have found in
the retail central bank

11
00:00:34,610 --> 00:00:38,240
digital currency prototype for phase one,

12
00:00:38,240 --> 00:00:42,710
and then I have to talk
about everything else

13
00:00:42,710 --> 00:00:44,620
that needs to be handled

14
00:00:44,620 --> 00:00:46,340
before going to production.

15
00:00:46,340 --> 00:00:50,410
And we'll end with a short
description of the solutions

16
00:00:50,410 --> 00:00:52,553
and an even shorter summary.

17
00:00:53,660 --> 00:00:55,570
There will be lots of slides

18
00:00:55,570 --> 00:00:57,230
and lots of information,

19
00:00:57,230 --> 00:01:00,358
and I have to talk really, really fast.

20
00:01:00,358 --> 00:01:04,750
So don't forget to note
down interesting slides

21
00:01:04,750 --> 00:01:05,987
if you want to go back

22
00:01:05,987 --> 00:01:08,893
and actually understand what I have said.

23
00:01:12,970 --> 00:01:14,613
So where to start?

24
00:01:16,490 --> 00:01:18,090
My name is Ian Vitek.

25
00:01:18,090 --> 00:01:20,310
I'm born in Stockholm, Sweden,

26
00:01:20,310 --> 00:01:23,653
and starting doing
penetration tests, 1996.

27
00:01:28,290 --> 00:01:30,870
I moved from being consultant

28
00:01:30,870 --> 00:01:35,870
to work at a big retail
banking company in Sweden

29
00:01:36,840 --> 00:01:41,683
and started with the Computer
Emergency Response Team.

30
00:01:43,980 --> 00:01:45,270
And after a couple of years,

31
00:01:45,270 --> 00:01:47,123
I moved into information security.

32
00:01:48,716 --> 00:01:51,663
I've been working at the
Riksbank for eight years,

33
00:01:52,746 --> 00:01:56,123
but the last two with the
central bank digital currency.

34
00:01:58,340 --> 00:02:01,850
My interests are web application security

35
00:02:01,850 --> 00:02:03,210
and network layer too.

36
00:02:03,210 --> 00:02:04,493
I'm a writer of MACOF.

37
00:02:06,160 --> 00:02:09,140
I love party tricks like DMA attacks,

38
00:02:09,140 --> 00:02:10,630
and local ping bypass attacks,

39
00:02:10,630 --> 00:02:13,123
and other attacks you can
do at the bar counter.

40
00:02:15,325 --> 00:02:18,560
I also have attended DEFCON many years.

41
00:02:18,560 --> 00:02:20,330
My first DEFCON was DEFCON 6,

42
00:02:20,330 --> 00:02:25,100
and I'd been speaker and helped out

43
00:02:25,100 --> 00:02:28,813
at DEFCON with other
things during the years.

44
00:02:29,970 --> 00:02:31,763
The Central Bank of
Sweden, Sveriges Riksbank

45
00:02:31,763 --> 00:02:33,380
is a very small central bank.

46
00:02:33,380 --> 00:02:37,890
It's just maybe 350 employees.

47
00:02:37,890 --> 00:02:41,030
I have also a small disclaimer,

48
00:02:41,030 --> 00:02:42,599
the views and opinions expressed

49
00:02:42,599 --> 00:02:44,510
in the presentation are mine,

50
00:02:44,510 --> 00:02:47,617
and do not necessarily represent the views

51
00:02:47,617 --> 00:02:49,753
and opinions of the Riksbank.

52
00:02:52,810 --> 00:02:55,163
So the e-krona project.

53
00:02:56,200 --> 00:02:58,175
Why central bank digital currency?

54
00:02:58,175 --> 00:03:00,210
I will not talk about the politics here,

55
00:03:00,210 --> 00:03:03,410
but I have to mention
that the physical cash

56
00:03:03,410 --> 00:03:05,403
in Sweden has been declining.

57
00:03:08,400 --> 00:03:11,510
Commercial banks has a very good

58
00:03:11,510 --> 00:03:13,920
and widespread digital ID,

59
00:03:13,920 --> 00:03:16,870
and also a payment service called Swish.

60
00:03:16,870 --> 00:03:19,603
And Swish is connected to
one of your bank accounts,

61
00:03:20,680 --> 00:03:24,530
so it's very easy to do
person-to-person transfers,

62
00:03:24,530 --> 00:03:27,402
and now, we also can
do payments in stores.

63
00:03:27,402 --> 00:03:31,270
So in Sweden, most of the transfers

64
00:03:31,270 --> 00:03:35,400
are bank transfers, card payments,

65
00:03:35,400 --> 00:03:37,657
or Swish transfers.

66
00:03:40,812 --> 00:03:42,820
The Central Bank of Sweden

67
00:03:42,820 --> 00:03:45,680
thinks there should be a digital

68
00:03:45,680 --> 00:03:47,793
alternative to physical cash.

69
00:03:51,130 --> 00:03:55,040
The e-krona project
started at the Riksbank,

70
00:03:55,040 --> 00:04:00,040
and we want to run a pilot to see

71
00:04:00,400 --> 00:04:04,130
how a central bank digital
currency should work.

72
00:04:04,130 --> 00:04:06,840
So we first started with a procurement.

73
00:04:06,840 --> 00:04:09,360
We had some requirements, of course.

74
00:04:09,360 --> 00:04:12,730
We didn't have requirements

75
00:04:12,730 --> 00:04:17,530
of the technology that should be used,

76
00:04:17,530 --> 00:04:20,422
but we have security requirements,

77
00:04:20,422 --> 00:04:22,200
functional requirements,
like user stories,

78
00:04:22,200 --> 00:04:23,890
and non-functional requirements.

79
00:04:23,890 --> 00:04:26,203
And there were a winning company.

80
00:04:27,490 --> 00:04:31,389
And the winning company has
to develop the prototype.

81
00:04:31,389 --> 00:04:35,210
And I will talk about that prototype

82
00:04:35,210 --> 00:04:37,750
of phase one at year one.

83
00:04:37,750 --> 00:04:40,580
We are still working on the prototype,

84
00:04:40,580 --> 00:04:43,480
but we call it now, phase two.

85
00:04:43,480 --> 00:04:45,336
But this presentation is only

86
00:04:45,336 --> 00:04:47,689
focused on the phase one prototype.

87
00:04:47,689 --> 00:04:50,966
The goal of this presentation
is to share insights

88
00:04:50,966 --> 00:04:53,800
of the security challenges
of building a prototype

89
00:04:53,800 --> 00:04:56,840
of a two-tier retail central
bank digital currency

90
00:04:56,840 --> 00:05:01,313
based on blockchain
and value-based tokens.

91
00:05:03,630 --> 00:05:07,230
So we'll now go into the detailed

92
00:05:07,230 --> 00:05:10,130
system description of the prototype.

93
00:05:12,360 --> 00:05:15,610
So the prototype in
phase one is a blockchain

94
00:05:15,610 --> 00:05:18,253
with value-based tokens
in a two-tier model.

95
00:05:19,307 --> 00:05:22,620
So we have user, we have an app.

96
00:05:22,620 --> 00:05:25,410
In the app, there are logic, of course,

97
00:05:25,410 --> 00:05:27,920
and we have stored information

98
00:05:29,110 --> 00:05:30,600
in the payment instrument.

99
00:05:30,600 --> 00:05:32,950
The payment instrument
could be a mobile phone,

100
00:05:32,950 --> 00:05:36,900
but we have also developed a payment card,

101
00:05:36,900 --> 00:05:40,883
a smart card that can
handle these payments.

102
00:05:42,290 --> 00:05:45,934
So the logic in the app is that

103
00:05:45,934 --> 00:05:49,203
it needs to be secured
is for example, a PIN,

104
00:05:50,480 --> 00:05:54,280
PIN handling, signing the
transaction encryption,

105
00:05:54,280 --> 00:05:56,880
and on the disk of the application,

106
00:05:56,880 --> 00:06:00,833
we store, of course, the PIN verification.

107
00:06:02,700 --> 00:06:04,894
The PIN, we can call it as PIN.

108
00:06:04,894 --> 00:06:08,800
And private keys for the tokens,

109
00:06:08,800 --> 00:06:10,973
authentication keys, and message keys.

110
00:06:12,960 --> 00:06:15,370
So we have lots of things in the app

111
00:06:15,370 --> 00:06:17,923
and on the mobile or payment device,

112
00:06:18,820 --> 00:06:21,700
payment instrument that needs protection,

113
00:06:21,700 --> 00:06:22,680
but we're not talking about anything

114
00:06:22,680 --> 00:06:25,100
about the tax against the user

115
00:06:25,100 --> 00:06:27,728
or user interface.

116
00:06:27,728 --> 00:06:29,707
And the app will connect

117
00:06:32,660 --> 00:06:36,943
to the payment service
provider's business logic.

118
00:06:41,910 --> 00:06:45,850
So the arrows here in the presentation

119
00:06:45,850 --> 00:06:48,370
is that the arrows also

120
00:06:48,370 --> 00:06:51,913
has a need some type of
protection, of course.

121
00:06:53,080 --> 00:06:58,080
So in the payment service
provider's business logic,

122
00:06:59,580 --> 00:07:04,580
we have authentication,
push messages like Firebase.

123
00:07:05,290 --> 00:07:07,200
If you want any limits,

124
00:07:07,200 --> 00:07:09,400
like how big transfers could be

125
00:07:09,400 --> 00:07:11,930
or how many transfers you can do,

126
00:07:11,930 --> 00:07:15,810
this is limits in the business logic.

127
00:07:15,810 --> 00:07:19,353
And we have lots of back
office functions here.

128
00:07:21,740 --> 00:07:23,777
And this is stored in the database

129
00:07:23,777 --> 00:07:25,840
and also on the disk, of course,

130
00:07:25,840 --> 00:07:28,070
but I just write database here.

131
00:07:28,070 --> 00:07:30,730
So we need the storage
of authentication keys,

132
00:07:30,730 --> 00:07:32,423
payment history, customer data,

133
00:07:33,370 --> 00:07:36,003
message keys, and so on somewhere.

134
00:07:36,003 --> 00:07:39,760
And all these functions

135
00:07:39,760 --> 00:07:42,780
and information need protection.

136
00:07:42,780 --> 00:07:46,120
But the business logic communicates

137
00:07:46,120 --> 00:07:50,494
with a payment service
provider's Corda node.

138
00:07:50,494 --> 00:07:53,240
And the Corda node handles the security

139
00:07:53,240 --> 00:07:57,308
logic of token transactions,
token verification,

140
00:07:57,308 --> 00:07:58,697
and wallet management.

141
00:07:58,697 --> 00:08:00,764
And the database of the Corda node,

142
00:08:00,764 --> 00:08:02,440
the payment service provider's Corda node,

143
00:08:02,440 --> 00:08:07,440
they, of course, need
have the user public keys,

144
00:08:07,630 --> 00:08:10,410
wallets, tokens, backchain,

145
00:08:11,451 --> 00:08:12,720
I will come back to what backchain is,

146
00:08:12,720 --> 00:08:14,703
and lots of certificates.

147
00:08:16,420 --> 00:08:18,226
But you can't do anything

148
00:08:18,226 --> 00:08:21,880
if you don't have any money
or tokens in this case.

149
00:08:21,880 --> 00:08:26,880
So at the Riksbank, also has a Corda node,

150
00:08:28,745 --> 00:08:31,900
and the security logic here is issue

151
00:08:31,900 --> 00:08:35,090
and redeem token verification,

152
00:08:35,090 --> 00:08:37,233
and Corda network management.

153
00:08:39,654 --> 00:08:41,954
The information is handled
on that Corda node.

154
00:08:43,120 --> 00:08:45,390
We will have to secure the public keys

155
00:08:45,390 --> 00:08:47,573
and backchain certificates.

156
00:08:50,582 --> 00:08:55,582
But when dealing a
transaction, the consensus

157
00:08:55,660 --> 00:09:00,320
mechanism of the Corda is a Corda notary.

158
00:09:00,320 --> 00:09:02,423
So this is a consensus mechanism

159
00:09:02,423 --> 00:09:04,503
in the prototype of phase one.

160
00:09:05,740 --> 00:09:09,533
And then if you are doing a transaction,

161
00:09:11,020 --> 00:09:14,710
you have to check for double-spends.

162
00:09:14,710 --> 00:09:18,137
So the Corda notary
prevents double-spends,

163
00:09:18,137 --> 00:09:20,793
and it also signs that transaction.

164
00:09:21,700 --> 00:09:25,690
Through that Corda
node, we have a database

165
00:09:25,690 --> 00:09:28,200
where we have keys and certificate,

166
00:09:28,200 --> 00:09:30,100
but we have also the hashes of tokens.

167
00:09:31,676 --> 00:09:34,108
These are the hashes,

168
00:09:34,108 --> 00:09:36,490
these are the tokens that are spent,

169
00:09:36,490 --> 00:09:38,940
information about spent tokens.

170
00:09:38,940 --> 00:09:42,310
So if you can remove
tokens from this database,

171
00:09:42,310 --> 00:09:45,530
you can spend tokens once
more and do double-spends.

172
00:09:45,530 --> 00:09:47,723
So it's very important that it's secure.

173
00:09:48,990 --> 00:09:52,060
But the Riksbank also has business logic.

174
00:09:52,060 --> 00:09:54,220
We have lots of back office functions,

175
00:09:54,220 --> 00:09:59,220
and we want to be able to pay interests

176
00:10:00,983 --> 00:10:03,150
for the money circulation.

177
00:10:04,510 --> 00:10:07,215
And we also have information about

178
00:10:07,215 --> 00:10:10,860
the outstanding central
bank digital currency

179
00:10:10,860 --> 00:10:13,010
that's in circulation.

180
00:10:13,010 --> 00:10:17,290
We also have connections to the Riksbank

181
00:10:17,290 --> 00:10:20,193
real-time gross settlement system.

182
00:10:21,120 --> 00:10:25,970
This is a RTGS system that
most central banks have,

183
00:10:25,970 --> 00:10:26,887
but we'll not talk about that

184
00:10:26,887 --> 00:10:30,080
because that has nothing
to do about the threat

185
00:10:30,080 --> 00:10:32,263
and vulnerabilities of this prototype.

186
00:10:33,351 --> 00:10:36,430
But to be able to pay, yeah,

187
00:10:36,430 --> 00:10:41,430
I know that technicians love public keys

188
00:10:41,470 --> 00:10:46,220
but normal users, we want some similar way

189
00:10:46,220 --> 00:10:49,290
to do payments like a phone number,

190
00:10:49,290 --> 00:10:51,770
or email address, or
an alias, or something.

191
00:10:51,770 --> 00:10:53,860
So we have an alias database,

192
00:10:53,860 --> 00:10:56,710
and that handles add and remove aliases

193
00:10:56,710 --> 00:10:59,990
and mapper alias to a payment

194
00:10:59,990 --> 00:11:01,653
service provider and wallet.

195
00:11:02,940 --> 00:11:07,940
And these aliases and wallets
are stored in a database.

196
00:11:08,830 --> 00:11:11,450
And this is also a critical
part of the solution

197
00:11:11,450 --> 00:11:14,250
because you can imagine what happens

198
00:11:14,250 --> 00:11:19,250
if you change that all aliases
pointed to your wallet.

199
00:11:24,750 --> 00:11:27,650
So of course, it has to be secured also.

200
00:11:27,650 --> 00:11:31,060
But we also have lots of other
payment service providers

201
00:11:31,060 --> 00:11:34,160
in our prototype so we can
do payment service provider

202
00:11:34,160 --> 00:11:38,590
to payment service
provider payments, so yeah.

203
00:11:42,073 --> 00:11:44,560
So what is backchain?

204
00:11:44,560 --> 00:11:46,643
And how to exploit bad implementation?

205
00:11:59,860 --> 00:12:02,748
To explain this in a very simple way,

206
00:12:02,748 --> 00:12:04,748
the Riksbank Corda node,

207
00:12:06,216 --> 00:12:09,212
so we have a Corda node at Riksbank,

208
00:12:09,212 --> 00:12:13,545
and if payment service
provider needs tokens, money,

209
00:12:15,140 --> 00:12:19,262
it offer an issue and
Riksbank make that issue.

210
00:12:19,262 --> 00:12:23,074
So this is how it looks
in a very simple way.

211
00:12:23,074 --> 00:12:28,074
So from nothing, the Corda
starts with a transaction,

212
00:12:29,210 --> 00:12:31,440
the actual transaction number here

213
00:12:33,077 --> 00:12:36,227
is a very long binary number,

214
00:12:36,227 --> 00:12:38,077
but I just write one here

215
00:12:38,077 --> 00:12:40,660
as an example to simplify it.

216
00:12:40,660 --> 00:12:45,261
And in that transaction,
we have one token,

217
00:12:45,261 --> 00:12:49,560
and the name of the token
is the transaction ID

218
00:12:49,560 --> 00:12:52,610
and the index of the token.

219
00:12:52,610 --> 00:12:55,970
So this is the first token
in transaction number one.

220
00:12:55,970 --> 00:13:00,040
Amount is 1,000, owner is
Payment Service Provider One,

221
00:13:00,040 --> 00:13:05,040
and the Riksbank has
signed this transaction

222
00:13:05,850 --> 00:13:08,363
as there are no references from in there.

223
00:13:10,577 --> 00:13:13,763
And then maybe UserA
wants to withdraw 200.

224
00:13:15,890 --> 00:13:19,126
Then there's something
called token selection.

225
00:13:19,126 --> 00:13:22,040
So Corda will look for a token

226
00:13:27,600 --> 00:13:30,913
or tokens that has 200.

227
00:13:31,820 --> 00:13:34,780
It finds this token and locks it.

228
00:13:34,780 --> 00:13:36,490
That means that no one else can touch

229
00:13:36,490 --> 00:13:39,063
this token during this process.

230
00:13:45,940 --> 00:13:50,760
Then Corda creates another transaction,

231
00:13:50,760 --> 00:13:52,990
this is example number two,

232
00:13:52,990 --> 00:13:56,370
and creates one output token here.

233
00:13:56,370 --> 00:13:57,963
So this token is called two,

234
00:13:58,990 --> 00:14:01,347
and this is the first,

235
00:14:01,347 --> 00:14:04,790
the first token of transaction two.

236
00:14:04,790 --> 00:14:07,440
It's 200, it's owned by UserA.

237
00:14:07,440 --> 00:14:10,120
So this is the public key for UserA here,

238
00:14:10,120 --> 00:14:14,550
and it's signed by Payment
Service Provider One,

239
00:14:14,550 --> 00:14:16,220
and it has a reference.

240
00:14:16,220 --> 00:14:20,350
So this token derives from this token.

241
00:14:24,683 --> 00:14:27,600
The first token of transaction one.

242
00:14:28,862 --> 00:14:31,279
But we have change here also.

243
00:14:33,083 --> 00:14:38,083
So UserA gets 200, but the
payment service provider

244
00:14:38,400 --> 00:14:42,560
actually creates its own change of 800.

245
00:14:42,560 --> 00:14:46,170
And then that token is called

246
00:14:47,210 --> 00:14:50,370
it's the second token in transaction two,

247
00:14:50,370 --> 00:14:52,832
and its owner is PSP1,

248
00:14:52,832 --> 00:14:55,127
and it's signed by PSP1,

249
00:14:55,127 --> 00:14:59,270
and it also has the same reference points

250
00:14:59,270 --> 00:15:01,980
to that transaction.

251
00:15:01,980 --> 00:15:03,943
Then everything is done.

252
00:15:04,850 --> 00:15:08,415
The first token here is more than spent.

253
00:15:08,415 --> 00:15:10,193
You can't use that anymore.

254
00:15:11,070 --> 00:15:13,054
And then maybe one day,

255
00:15:13,054 --> 00:15:17,463
UserA want to make a
transfer to UserB at PSP2 .

256
00:15:18,346 --> 00:15:22,388
So UserA wanted to send UserB 50.

257
00:15:22,388 --> 00:15:23,780
So the token selection here

258
00:15:23,780 --> 00:15:26,130
looks for a token owned by UserA

259
00:15:26,130 --> 00:15:28,350
that could handle this transaction.

260
00:15:28,350 --> 00:15:30,560
So it finds it, locks it,

261
00:15:30,560 --> 00:15:33,440
creates another transaction,

262
00:15:33,440 --> 00:15:34,973
makes one output token,

263
00:15:37,690 --> 00:15:40,890
and also the change to UserA.

264
00:15:40,890 --> 00:15:45,890
This is sent to Payment
Service Provider Two.

265
00:15:46,470 --> 00:15:51,470
So Payment Service Provider
Two also get these tokens.

266
00:15:55,541 --> 00:15:58,291
So Payment Service Provider Two,

267
00:15:59,867 --> 00:16:04,287
to verify the authenticity,

268
00:16:04,287 --> 00:16:06,003
to see that this is valid,

269
00:16:09,086 --> 00:16:11,930
the Corda node of Payment
Service Provider Two

270
00:16:11,930 --> 00:16:16,930
must verify it by looking
at all earlier transactions,

271
00:16:18,510 --> 00:16:21,610
but it has only that transaction three,

272
00:16:21,610 --> 00:16:23,707
so Payment Service Provider Two Corda node

273
00:16:23,707 --> 00:16:25,730
will ask for all earlier transaction

274
00:16:25,730 --> 00:16:27,323
leading up to this transaction.

275
00:16:28,230 --> 00:16:31,430
It will ask Payment Service Provider One

276
00:16:31,430 --> 00:16:33,453
for the backchain here.

277
00:16:34,930 --> 00:16:37,380
So Payment Service Provider Two

278
00:16:37,380 --> 00:16:40,860
can verify the references here.

279
00:16:40,860 --> 00:16:42,370
So it points back to this transaction,

280
00:16:42,370 --> 00:16:44,730
to point out to this transaction,

281
00:16:44,730 --> 00:16:46,320
and this is an issue.

282
00:16:46,320 --> 00:16:48,920
So then we have the whole backchain

283
00:16:48,920 --> 00:16:53,710
from the issuing to the
transaction number three.

284
00:16:53,710 --> 00:16:57,950
And now, the Corda node of
Payment Service Provider Two

285
00:16:57,950 --> 00:17:00,210
can verify all the signatures

286
00:17:00,210 --> 00:17:02,610
and see that the chain is not broken.

287
00:17:02,610 --> 00:17:03,950
This is very important,

288
00:17:03,950 --> 00:17:06,513
and I will come back to this later.

289
00:17:08,410 --> 00:17:10,897
The prototype for phase one

290
00:17:12,400 --> 00:17:15,500
was built on Corda 4.5

291
00:17:15,500 --> 00:17:19,963
and its corresponding token SDK.

292
00:17:20,840 --> 00:17:25,840
And most of the information

293
00:17:26,540 --> 00:17:28,100
is very simplified, of course,

294
00:17:28,100 --> 00:17:31,403
and the bugs in the
prototype in the design,

295
00:17:32,620 --> 00:17:36,113
I have verified them in Corda 4.7 also.

296
00:17:41,050 --> 00:17:45,570
So how to exploit token
selection on backchains?

297
00:17:45,570 --> 00:17:47,910
So what can a user do

298
00:17:47,910 --> 00:17:51,423
if they want to mess things up?

299
00:17:53,370 --> 00:17:56,393
They can withdraw three and deposit two.

300
00:17:57,261 --> 00:17:58,323
So this is a start.

301
00:17:59,582 --> 00:18:03,033
So when a user wants to withdraw three,

302
00:18:05,080 --> 00:18:07,443
it will take 200 from the PSP1,

303
00:18:08,788 --> 00:18:11,420
and PSP1 will create the change of...

304
00:18:11,420 --> 00:18:16,370
So it receives a token of 197,

305
00:18:16,370 --> 00:18:19,720
but UserA will receive a token of three.

306
00:18:19,720 --> 00:18:21,430
Then it wants to deposit two.

307
00:18:21,430 --> 00:18:26,430
It will looks for a token
that can be deposited

308
00:18:27,700 --> 00:18:29,960
or used for depositing,

309
00:18:29,960 --> 00:18:32,700
and will find this token three

310
00:18:32,700 --> 00:18:35,605
and create a new token of one,

311
00:18:35,605 --> 00:18:37,223
that the change back to UserA,

312
00:18:38,136 --> 00:18:40,157
and a token of two.

313
00:18:42,820 --> 00:18:44,993
So the money goes back to PSP1,

314
00:18:46,032 --> 00:18:47,699
two go back to PSP1.

315
00:18:48,853 --> 00:18:51,670
To make it a little bit
clearer how this work,

316
00:18:51,670 --> 00:18:53,470
I will clean this up a little bit.

317
00:18:53,470 --> 00:18:56,910
So I move all historic
transactions to the left

318
00:19:00,050 --> 00:19:03,180
and adjust all the tokens.

319
00:19:03,180 --> 00:19:07,130
And so what A does is he does

320
00:19:07,130 --> 00:19:09,683
this over and over again.

321
00:19:10,540 --> 00:19:13,877
So he withdraw three, so now, it's 194,

322
00:19:16,518 --> 00:19:18,720
and then he deposit two,

323
00:19:18,720 --> 00:19:21,450
and he gets that, and it's moved over.

324
00:19:21,450 --> 00:19:24,920
And you can do this
many, many, many times.

325
00:19:24,920 --> 00:19:28,283
You'll get many tokens,
many historic tokens,

326
00:19:30,604 --> 00:19:35,604
and in the end, the UserA
deposit all his tokens.

327
00:19:36,537 --> 00:19:39,237
So all the tokens that is I have,

328
00:19:41,776 --> 00:19:45,193
all hundreds of them are deposit to PSP1.

329
00:19:47,549 --> 00:19:51,210
So now, PSP1 have all the historic tokens

330
00:19:51,210 --> 00:19:55,103
and all the tokens that
are still valid, not spent.

331
00:19:56,160 --> 00:19:58,710
But sometime in the future,

332
00:19:58,710 --> 00:20:02,150
maybe the administrator of
Payment Service Provider One

333
00:20:02,150 --> 00:20:04,980
want to redeem, and move
it back to the Riksbank.

334
00:20:04,980 --> 00:20:07,080
Sell the tokens back to Riksbank

335
00:20:07,080 --> 00:20:10,390
to get some Swedish krona instead.

336
00:20:13,270 --> 00:20:17,340
And what happens is that all the tokens

337
00:20:18,760 --> 00:20:22,863
is moved over to the Riksbank Corda node,

338
00:20:25,020 --> 00:20:29,660
and the Riksbank Corda node
wants to validate the tokens.

339
00:20:39,309 --> 00:20:43,963
And to do so, it needs the history

340
00:20:45,650 --> 00:20:47,133
and the backchain actually,

341
00:20:48,420 --> 00:20:51,103
of all the tokens that are redeemed.

342
00:20:52,050 --> 00:20:55,470
And this will draw lots of resources

343
00:20:55,470 --> 00:20:56,883
on the Riksbank Corda node.

344
00:20:58,790 --> 00:21:00,530
And the Riksbank Corda node

345
00:21:00,530 --> 00:21:04,230
can actually crash if it's not setup

346
00:21:04,230 --> 00:21:06,533
or the system is not designed correctly.

347
00:21:11,540 --> 00:21:14,830
I will go into the
consequences a bit later,

348
00:21:14,830 --> 00:21:19,690
but I want to describe
there are other setups

349
00:21:19,690 --> 00:21:22,020
that gives better effect.

350
00:21:22,020 --> 00:21:25,943
So if you're using several issued tokens,

351
00:21:27,520 --> 00:21:32,273
you also can start with several,

352
00:21:33,403 --> 00:21:35,540
you will get several merkle trees.

353
00:21:35,540 --> 00:21:38,477
It's a simple way of describing it.

354
00:21:38,477 --> 00:21:41,070
It's like Payment Service Provider One

355
00:21:41,070 --> 00:21:43,911
has three issued tokens.

356
00:21:43,911 --> 00:21:47,627
Payment Service Provider One

357
00:21:47,627 --> 00:21:50,564
has done one issue of 1,500,

358
00:21:50,564 --> 00:21:54,570
one issue of 2,000,
and one issue of 3,000.

359
00:21:54,570 --> 00:21:57,610
And UserA doesn't withdraw 100,

360
00:21:57,610 --> 00:22:02,610
waits for sometime,

361
00:22:02,737 --> 00:22:06,360
and make another withdrawal.

362
00:22:06,360 --> 00:22:11,360
Maybe it will get a token
from another issued token.

363
00:22:17,580 --> 00:22:22,580
And then the user splits
up his tokens to several.

364
00:22:22,710 --> 00:22:27,710
Maybe it has a friend, UserB.

365
00:22:28,909 --> 00:22:33,003
So UserA sends lots of
small transaction to UserB,

366
00:22:34,430 --> 00:22:36,720
and that will split up his tokens

367
00:22:36,720 --> 00:22:38,693
to very many small parts.

368
00:22:40,410 --> 00:22:44,630
And then UserB sends them back to UserA

369
00:22:45,859 --> 00:22:47,609
but in one big chunk.

370
00:22:49,742 --> 00:22:53,742
So now, we are getting a
very complex backchain,

371
00:22:55,780 --> 00:22:59,930
and if UserA does this
over and over again,

372
00:22:59,930 --> 00:23:02,630
so it also, we have lots of tokens

373
00:23:02,630 --> 00:23:03,893
and very long backchain,

374
00:23:04,946 --> 00:23:07,167
we'll get the TransactionOfDeath,

375
00:23:07,167 --> 00:23:10,321
and what can we do with
a TransactionOfDeath?

376
00:23:10,321 --> 00:23:11,930
It can permanently lock tokens

377
00:23:12,838 --> 00:23:15,710
because when you're
selling TransactionOfDeath

378
00:23:15,710 --> 00:23:20,023
to someone, it may crash Corda nodes,

379
00:23:20,940 --> 00:23:24,173
and sometimes crashes
gave inconsistencies.

380
00:23:25,250 --> 00:23:28,913
So if UserA want to transfer five,

381
00:23:30,310 --> 00:23:32,860
this TransactionOfDeath,
this is the five here

382
00:23:32,860 --> 00:23:36,920
is a transaction with many tokens,

383
00:23:36,920 --> 00:23:38,930
and a very long backchain,

384
00:23:38,930 --> 00:23:40,340
and it sends it to UserC

385
00:23:41,484 --> 00:23:44,610
to a payment service provider

386
00:23:44,610 --> 00:23:46,790
that has not seen any of these tokens

387
00:23:46,790 --> 00:23:48,663
or backchains before.

388
00:23:51,743 --> 00:23:54,120
So somewhere in this process,

389
00:23:55,200 --> 00:23:58,890
someone will have to send
to the Riksbank Corda node,

390
00:23:59,787 --> 00:24:04,787
please mark this transaction
or token as used.

391
00:24:05,760 --> 00:24:09,427
But given this TransactionOfDeath,

392
00:24:11,940 --> 00:24:16,940
I am able to crash both
Payment Service Provider One,

393
00:24:17,760 --> 00:24:21,930
the one payment service
provider I'm sending from,

394
00:24:21,930 --> 00:24:26,080
but also the receiving party.

395
00:24:26,080 --> 00:24:28,347
So both nodes can crash.

396
00:24:28,347 --> 00:24:30,420
One can crash, two can crash.

397
00:24:30,420 --> 00:24:32,263
It depends on the setup, resources,

398
00:24:32,263 --> 00:24:33,973
and so on, the design.

399
00:24:34,970 --> 00:24:36,443
But when this crash happens,

400
00:24:40,650 --> 00:24:45,180
it also can happen before the Corda nodes

401
00:24:45,180 --> 00:24:48,413
actually mark them as spent.

402
00:24:49,962 --> 00:24:54,160
So in the test that I
have done, the Corda,

403
00:24:55,057 --> 00:24:57,000
the Riksbank Corda notary marked

404
00:24:57,000 --> 00:24:59,570
this transaction as used.

405
00:24:59,570 --> 00:25:03,637
This token is used but
this token is available

406
00:25:03,637 --> 00:25:05,573
for the payment service provider.

407
00:25:06,417 --> 00:25:11,417
So UserA can't use his wallet anymore

408
00:25:12,249 --> 00:25:14,670
because you look at your wallet,

409
00:25:14,670 --> 00:25:19,670
you see the amount, the
balance is just 100.

410
00:25:20,710 --> 00:25:22,883
But when you try to transfer them,

411
00:25:24,610 --> 00:25:26,080
the Corda node will say,

412
00:25:26,080 --> 00:25:28,550
some of them, the tokens in this

413
00:25:28,550 --> 00:25:31,130
transaction are marked as used,

414
00:25:31,130 --> 00:25:35,383
and therefore you can't make
any transfer from this wallet.

415
00:25:36,590 --> 00:25:40,650
The wallet is permanently disabled

416
00:25:40,650 --> 00:25:44,593
or it's not functioning
anymore as you wanted.

417
00:25:45,980 --> 00:25:49,280
And you have to solve

418
00:25:49,280 --> 00:25:54,280
the inconsistencies of this somehow.

419
00:25:59,610 --> 00:26:03,030
There are other design weaknesses

420
00:26:03,030 --> 00:26:05,453
that you have to look out for.

421
00:26:07,380 --> 00:26:12,380
It's network problems,

422
00:26:12,750 --> 00:26:15,150
timeouts, in-memory token selection,

423
00:26:15,150 --> 00:26:18,647
and locked tokens until restarted.

424
00:26:22,942 --> 00:26:27,942
So card payments in
the prototype phase one

425
00:26:28,330 --> 00:26:32,570
is a signed transaction on the smart card

426
00:26:32,570 --> 00:26:36,260
traveling through the
payment service provider

427
00:26:36,260 --> 00:26:39,060
of the merchant to the card holder

428
00:26:39,060 --> 00:26:40,733
payment service provider.

429
00:26:44,567 --> 00:26:49,330
And then the transaction is going back

430
00:26:49,330 --> 00:26:51,060
from Payment Service Provider Three

431
00:26:51,060 --> 00:26:53,543
to Payment Service Provider
One in this example.

432
00:26:55,010 --> 00:27:00,010
So what I did in the
prototype for phase one,

433
00:27:03,866 --> 00:27:08,866
that I did card payments
every second or so,

434
00:27:12,130 --> 00:27:14,853
as fast as I could, I
did small card payments.

435
00:27:16,844 --> 00:27:21,603
And when I'm doing these card payments,

436
00:27:23,570 --> 00:27:27,800
Payment Service Provider
One will communicate

437
00:27:27,800 --> 00:27:31,903
with the Riksbank Corda node to mark,

438
00:27:32,860 --> 00:27:35,200
to say that this token used

439
00:27:35,200 --> 00:27:38,980
in the new card payments is stamped.

440
00:27:43,082 --> 00:27:45,950
But when doing these card payments,

441
00:27:45,950 --> 00:27:49,963
I asked kill the Corda notary process.

442
00:27:51,886 --> 00:27:54,386
But still, in another process,

443
00:27:55,442 --> 00:27:57,410
the Corda notary is down,

444
00:27:57,410 --> 00:28:00,803
I still continuing to doing card payments.

445
00:28:02,730 --> 00:28:06,490
So now, errors start to happen.

446
00:28:06,490 --> 00:28:10,600
So Payment Service Provider
One will get timeouts

447
00:28:10,600 --> 00:28:11,900
and will send errors back

448
00:28:11,900 --> 00:28:13,810
to Payment Service Provider Three,

449
00:28:13,810 --> 00:28:15,053
and they will say, "Some of the tokens

450
00:28:15,053 --> 00:28:16,730
"you are using has not been spent

451
00:28:16,730 --> 00:28:18,940
"because you have timeouts."

452
00:28:18,940 --> 00:28:23,460
But when I start up the
Riksbank Corda notary,

453
00:28:23,460 --> 00:28:26,510
I still continuing to do card payments,

454
00:28:26,510 --> 00:28:29,363
and somewhere here, it get mixed up.

455
00:28:32,840 --> 00:28:37,540
So some of the transactions
will be marked as used

456
00:28:40,042 --> 00:28:45,042
but in memory of the Payment
Service Provider Three,

457
00:28:45,790 --> 00:28:48,753
the tokens are still marked as available.

458
00:28:52,810 --> 00:28:57,650
This is very easy to fix.

459
00:28:57,650 --> 00:29:01,470
You have to restart the PSP3 Corda node,

460
00:29:01,470 --> 00:29:06,470
and the tokens will get
updated in the correct way,

461
00:29:06,930 --> 00:29:09,690
and marked as spent here also

462
00:29:11,314 --> 00:29:13,330
at the Payment Service Provider Three.

463
00:29:13,330 --> 00:29:18,143
But these are very complex processes,

464
00:29:18,143 --> 00:29:23,143
and you have to be sure
that the right tokens

465
00:29:23,390 --> 00:29:25,750
are marked spent where,

466
00:29:25,750 --> 00:29:27,620
and when you should do that

467
00:29:29,850 --> 00:29:32,100
to be able to not have this

468
00:29:32,100 --> 00:29:35,223
type of weaknesses in the system.

469
00:29:37,575 --> 00:29:42,430
And there were some people out there, ING,

470
00:29:43,290 --> 00:29:46,530
that found out that also an evil

471
00:29:46,530 --> 00:29:48,530
payment service provider can lock tokens

472
00:29:49,378 --> 00:29:51,443
that other payment service providers has.

473
00:29:52,320 --> 00:29:55,680
So in this example,
UserA want to send five

474
00:30:01,250 --> 00:30:06,250
to UserC at Payment
Service Provider Three.

475
00:30:07,530 --> 00:30:11,623
Normal transaction, so A sends tokens

476
00:30:16,308 --> 00:30:19,143
to UserC at Payment
Service Provider Three,

477
00:30:20,620 --> 00:30:23,500
and that Payment Service Provider Three

478
00:30:23,500 --> 00:30:25,650
will mark that token as spent.

479
00:30:25,650 --> 00:30:30,650
So the token in this transaction is spent,

480
00:30:30,765 --> 00:30:34,713
and it's marked in the
Riksbank Corda notary.

481
00:30:35,610 --> 00:30:39,690
Everything is fine but...

482
00:30:41,200 --> 00:30:43,563
So the Token#2 is available, of course,

483
00:30:46,293 --> 00:30:48,941
and Token#1 was spent in the transaction.

484
00:30:48,941 --> 00:30:50,349
Everything is fine.

485
00:30:50,349 --> 00:30:54,849
But as you are the evil
payment service provider here,

486
00:30:57,301 --> 00:31:01,149
you actually have information
about token number two,

487
00:31:01,149 --> 00:31:04,737
so you can send a
transaction to the Riksbank

488
00:31:04,737 --> 00:31:06,820
Corda notary node to say,

489
00:31:07,773 --> 00:31:10,273
"Well, Token#2 is also spent."

490
00:31:14,910 --> 00:31:16,993
So now, Token#2 is spent,

491
00:31:19,606 --> 00:31:23,023
and the UserC can't use his token anymore

492
00:31:23,897 --> 00:31:25,535
because Riksbank notary node

493
00:31:25,535 --> 00:31:27,730
has marked it as spent.

494
00:31:27,730 --> 00:31:30,900
This is how the setup for the prototype

495
00:31:30,900 --> 00:31:35,390
for the Riksbank phase one is done.

496
00:31:35,390 --> 00:31:37,710
It's a non-validating notary node.

497
00:31:37,710 --> 00:31:39,910
It can be solved by changing

498
00:31:39,910 --> 00:31:42,470
to a validating notary node,

499
00:31:42,470 --> 00:31:46,623
and then you can't do this attack anymore.

500
00:31:48,120 --> 00:31:51,843
And we have to take this into account too.

501
00:31:53,301 --> 00:31:56,227
And also have an ending
note on token selection.

502
00:31:57,914 --> 00:32:01,100
So if a payment service provider

503
00:32:02,690 --> 00:32:05,740
want to make a redeem,

504
00:32:05,740 --> 00:32:08,823
in this example, the
Payment Service Provider One

505
00:32:09,730 --> 00:32:11,720
has three tokens in its wallet,

506
00:32:11,720 --> 00:32:14,813
owned by Payment Service Provider One.

507
00:32:14,813 --> 00:32:16,517
So there's one token of two million,

508
00:32:16,517 --> 00:32:17,573
one token of one million,

509
00:32:17,573 --> 00:32:19,322
another token of one million.

510
00:32:19,322 --> 00:32:21,710
So the administrator want to make

511
00:32:21,710 --> 00:32:24,218
a redeem of 3 1/2 million.

512
00:32:24,218 --> 00:32:27,718
But if the user, just milliseconds before,

513
00:32:28,946 --> 00:32:31,696
want to make a withdrawal of 50,

514
00:32:33,240 --> 00:32:35,510
the Corda will start doing that

515
00:32:35,510 --> 00:32:37,563
by locking one the tokens.

516
00:32:40,718 --> 00:32:44,797
And Corda will tell the administrator,

517
00:32:44,797 --> 00:32:48,217
"Well, you don't have
3.5 million right now

518
00:32:48,217 --> 00:32:51,493
"because you only have
three million available.

519
00:32:53,188 --> 00:32:54,830
"You have to try again later."

520
00:32:54,830 --> 00:32:57,800
But the UserA will get his 50.

521
00:32:57,800 --> 00:32:59,120
This is not a big problem

522
00:32:59,120 --> 00:33:00,700
if you just has one user,

523
00:33:00,700 --> 00:33:03,520
but if you have millions of user

524
00:33:03,520 --> 00:33:06,730
that always is trying to withdraw,

525
00:33:06,730 --> 00:33:09,890
it will be very hard to do some

526
00:33:09,890 --> 00:33:12,010
of the back office functions.

527
00:33:12,010 --> 00:33:15,490
You have to have a
design that handle this.

528
00:33:15,490 --> 00:33:17,810
It just was the parent thesis

529
00:33:19,820 --> 00:33:22,737
of the challenges that we have had.

530
00:33:25,841 --> 00:33:29,674
Then now, we'll move
over to privacy problems.

531
00:33:31,630 --> 00:33:36,630
So as we talked about
before about the backchain,

532
00:33:39,961 --> 00:33:42,358
to be able to verify the authenticity

533
00:33:42,358 --> 00:33:47,033
of the tokens, all historic transactions

534
00:33:47,033 --> 00:33:49,949
for that token is needed.

535
00:33:49,949 --> 00:33:52,225
For PSP to verify this token,

536
00:33:52,225 --> 00:33:55,392
it need all the historic transactions.

537
00:33:58,130 --> 00:34:03,130
So PSP2 can see how
PSP1 have done one issue

538
00:34:03,240 --> 00:34:08,120
and how UserA withdrawn 200 for paying

539
00:34:08,120 --> 00:34:11,593
this token to a user on PSP2.

540
00:34:13,690 --> 00:34:17,853
But older and longer
backchains reveals more.

541
00:34:21,240 --> 00:34:25,463
So what can an administrator of PSP2 see?

542
00:34:26,490 --> 00:34:31,163
Well, if that PSP2 get
one transaction of 60,

543
00:34:33,700 --> 00:34:36,143
to verify the authenticity of this token,

544
00:34:38,110 --> 00:34:42,040
it needs all the historic transactions

545
00:34:45,370 --> 00:34:47,283
deriving up to this token.

546
00:34:49,425 --> 00:34:51,913
So where does this 60 comes from?

547
00:34:52,801 --> 00:34:55,520
So the payment, the Corda node

548
00:34:55,520 --> 00:34:57,650
of Payment Service Provider Two

549
00:34:57,650 --> 00:35:00,170
will get the backchain to see that

550
00:35:00,170 --> 00:35:04,659
UserG from PSP1 has sent 50,

551
00:35:04,659 --> 00:35:08,420
a token of 50 to UserA,

552
00:35:08,420 --> 00:35:13,350
and UserC from PSP3 has
sent a token of 20 too.

553
00:35:13,350 --> 00:35:16,053
So this 60 contains, doesn't matter,

554
00:35:17,110 --> 00:35:21,098
20 from this token,
and 40 from this token,

555
00:35:21,098 --> 00:35:22,575
or maybe 50 from this token,

556
00:35:22,575 --> 00:35:23,915
and 10 from this token.

557
00:35:23,915 --> 00:35:26,080
Doesn't matter, but both of these tokens

558
00:35:26,080 --> 00:35:28,400
were used in this transaction here.

559
00:35:28,400 --> 00:35:31,480
But where does these tokens comes from?

560
00:35:31,480 --> 00:35:35,992
So the Corda node will go
out on the Corda network

561
00:35:35,992 --> 00:35:38,955
and get all the backchain.

562
00:35:38,955 --> 00:35:42,252
And the backchain is all the transaction

563
00:35:42,252 --> 00:35:44,169
arriving to this token,

564
00:35:48,927 --> 00:35:52,293
and it needs to go back to the issuing.

565
00:35:53,688 --> 00:35:56,833
So it will continue going back and back.

566
00:35:58,780 --> 00:36:01,853
So we will see that the token of 50

567
00:36:04,500 --> 00:36:07,480
comes from another token of 50,

568
00:36:07,480 --> 00:36:10,620
that comes from a transaction of 325.

569
00:36:10,620 --> 00:36:14,180
And that user, 325,

570
00:36:14,180 --> 00:36:16,573
comes from three other tokens.

571
00:36:17,683 --> 00:36:21,170
And then we coming back
to the issuing here.

572
00:36:21,170 --> 00:36:26,170
So when we have the whole
chain back to the issuing,

573
00:36:26,517 --> 00:36:30,723
we have all the transaction
leading up to this token.

574
00:36:31,760 --> 00:36:35,760
Now, that Corda network can verify

575
00:36:35,760 --> 00:36:37,730
the authenticity of the token

576
00:36:37,730 --> 00:36:40,590
by verifying all the signatures,

577
00:36:40,590 --> 00:36:42,743
see that the chain is not broken.

578
00:36:44,090 --> 00:36:48,780
But the administrator of
Payment Service Provider Two

579
00:36:48,780 --> 00:36:51,480
can also go into the Corda node

580
00:36:51,480 --> 00:36:54,040
to see all these historic transactions

581
00:36:57,640 --> 00:36:59,983
to deal with this more practically.

582
00:37:04,770 --> 00:37:09,770
So I have written some small scripts

583
00:37:13,772 --> 00:37:15,622
to be able to visualize the backchain

584
00:37:17,908 --> 00:37:20,748
and the historic transactions.

585
00:37:20,748 --> 00:37:23,165
So in this practical example,

586
00:37:25,322 --> 00:37:28,739
I've been running the Corda node of PSP2,

587
00:37:31,201 --> 00:37:36,065
and I'm an administrator of
Payment Service Provider Two,

588
00:37:36,065 --> 00:37:38,317
and when all the information

589
00:37:38,317 --> 00:37:41,741
from the Payment Service
Provider Two Corda node,

590
00:37:41,741 --> 00:37:44,973
and the business layer of
Payment Service Provider Two,

591
00:37:44,973 --> 00:37:49,973
I've been able to get the
backchain and visualize it,

592
00:37:50,065 --> 00:37:54,148
and I will practically
show you how this is done.

593
00:37:56,030 --> 00:37:59,480
So what we have to do is
extract the backchain,

594
00:37:59,480 --> 00:38:02,599
get that all the transactions
in the backchain,

595
00:38:02,599 --> 00:38:04,563
maybe do some data mining,

596
00:38:05,420 --> 00:38:07,033
and then visualize it.

597
00:38:08,539 --> 00:38:12,410
So this is how you should do that.

598
00:38:13,940 --> 00:38:16,070
So to get the backchain,

599
00:38:16,070 --> 00:38:19,320
you log into the PSP2 Corda node,

600
00:38:19,320 --> 00:38:23,673
and in the Corda process
also has a Corda shell.

601
00:38:24,570 --> 00:38:29,570
So you log into the PSP2 Corda node

602
00:38:30,457 --> 00:38:32,840
and start the Corda node shell,

603
00:38:32,840 --> 00:38:34,696
and then you run the command,

604
00:38:34,696 --> 00:38:37,779
internalVerifiedTransactionsSnapshot.

605
00:38:39,160 --> 00:38:40,920
When running this command,

606
00:38:43,014 --> 00:38:47,130
Corda will output all
verified transactions.

607
00:38:48,160 --> 00:38:51,940
All transaction it knows about.

608
00:38:51,940 --> 00:38:56,940
And also, about all the
backchain transactions.

609
00:38:57,100 --> 00:39:01,160
It's just a mess but I just, for example,

610
00:39:01,160 --> 00:39:03,320
points out one transaction here.

611
00:39:03,320 --> 00:39:05,790
This is how one transaction

612
00:39:05,790 --> 00:39:08,665
from that command looks like.

613
00:39:08,665 --> 00:39:12,457
So we have the transaction
ID first, transaction ID.

614
00:39:14,200 --> 00:39:18,149
We have also the signer
of this transaction.

615
00:39:18,149 --> 00:39:23,149
So we know who is a payer here.

616
00:39:24,780 --> 00:39:28,480
So this is the from address,

617
00:39:28,480 --> 00:39:31,743
and here are the inputs
of this transaction.

618
00:39:32,962 --> 00:39:36,880
And this shows the tokens from the input,

619
00:39:36,880 --> 00:39:39,573
it can be one or more tokens.

620
00:39:40,500 --> 00:39:45,500
And the naming here is this
is an early transaction,

621
00:39:47,460 --> 00:39:49,520
and this is a token.

622
00:39:49,520 --> 00:39:52,540
The first token in this old transaction

623
00:39:52,540 --> 00:39:55,957
was the input token for this transaction.

624
00:39:58,791 --> 00:40:01,010
And then we have output tokens.

625
00:40:01,010 --> 00:40:04,320
The first output tokens
is always the payee

626
00:40:04,320 --> 00:40:06,150
who gets the transaction.

627
00:40:06,150 --> 00:40:10,520
So this is the public key of the payee,

628
00:40:10,520 --> 00:40:12,640
and here, we can see here, the amount.

629
00:40:12,640 --> 00:40:15,480
If there are a second output,

630
00:40:15,480 --> 00:40:20,120
it is a change that the owner

631
00:40:20,120 --> 00:40:22,020
of the token gets back.

632
00:40:22,020 --> 00:40:24,820
You can see the public key of the change

633
00:40:24,820 --> 00:40:28,450
is the same of the signer
of that transaction.

634
00:40:28,450 --> 00:40:31,770
So what we do now is
just write a small script

635
00:40:31,770 --> 00:40:36,400
that takes out the payer, the from,

636
00:40:38,940 --> 00:40:43,920
and who is the payee receiving the amount.

637
00:40:43,920 --> 00:40:45,860
That's all what we need,

638
00:40:45,860 --> 00:40:50,350
But I also take out if
there are any inputs,

639
00:40:50,350 --> 00:40:54,030
if there are no inputs
in this transaction,

640
00:40:54,030 --> 00:40:56,472
I know it's a transaction
from the Riksbank

641
00:40:56,472 --> 00:40:58,110
because the Riksbank is the only one

642
00:40:58,110 --> 00:41:00,120
that can issue transactions.

643
00:41:00,120 --> 00:41:01,410
When you're issuing transactions,

644
00:41:01,410 --> 00:41:04,163
there are no input tokens.

645
00:41:05,540 --> 00:41:09,970
I can also look at the public key.

646
00:41:09,970 --> 00:41:14,690
If the public key is a
couple of bytes shorter,

647
00:41:14,690 --> 00:41:17,560
it's in our prototype for phase one,

648
00:41:17,560 --> 00:41:20,220
it's a payment service provider.

649
00:41:20,220 --> 00:41:22,860
So users has a little bit longer keys.

650
00:41:22,860 --> 00:41:25,850
So now, we can see who's the Riksbank,

651
00:41:25,850 --> 00:41:29,180
who's the payment service providers,

652
00:41:29,180 --> 00:41:30,673
and what users.

653
00:41:32,950 --> 00:41:36,130
So I just extract all those transaction

654
00:41:36,130 --> 00:41:36,963
and creates a JSON file.

655
00:41:38,146 --> 00:41:40,970
So yes, that's from this public key

656
00:41:40,970 --> 00:41:43,373
to this public key and the amount.

657
00:41:43,373 --> 00:41:48,373
So it's just thousands of
transactions in the JSON file,

658
00:41:50,660 --> 00:41:53,463
and that's all we need right now.

659
00:41:57,030 --> 00:42:00,510
But you maybe want to have wallet IDs.

660
00:42:00,510 --> 00:42:05,093
And wallet IDs can be
found in the business layer

661
00:42:10,690 --> 00:42:13,793
of the Payment Service Provider Two.

662
00:42:14,670 --> 00:42:19,530
So if you have an app,

663
00:42:19,530 --> 00:42:23,100
you want to go see the
transaction history,

664
00:42:23,100 --> 00:42:26,020
your historic transactions,

665
00:42:26,020 --> 00:42:28,240
and that's stored in the business layer.

666
00:42:28,240 --> 00:42:30,940
So the administrator of the
Payment Service Provider Two

667
00:42:30,940 --> 00:42:35,583
can go in and look there.

668
00:42:36,520 --> 00:42:38,950
So this is the user
historic record extract

669
00:42:38,950 --> 00:42:41,580
from the payment to business layer.

670
00:42:41,580 --> 00:42:44,210
So here, we have the transaction ID,

671
00:42:44,210 --> 00:42:47,110
and actually, that's
the same transaction ID

672
00:42:47,110 --> 00:42:50,480
that was in the backchain.

673
00:42:50,480 --> 00:42:54,990
So here, we can map the
payer and payee wallet ID,

674
00:42:54,990 --> 00:42:57,610
but there are other ways to do it also,

675
00:42:57,610 --> 00:43:02,610
because if one of my user
has received a payment

676
00:43:05,400 --> 00:43:08,483
or sent a payment to someone,

677
00:43:09,450 --> 00:43:11,740
I have their wallet ID in my

678
00:43:13,270 --> 00:43:15,860
transaction history, of course.

679
00:43:15,860 --> 00:43:19,200
And then in Corda, you always can look up

680
00:43:19,200 --> 00:43:21,210
the public key for a wallet.

681
00:43:21,210 --> 00:43:26,210
So if I just look at
my transaction history,

682
00:43:26,760 --> 00:43:28,130
there are lots of wallet IDs,

683
00:43:28,130 --> 00:43:29,420
and I can just look up all

684
00:43:29,420 --> 00:43:31,990
the public addresses I know of,

685
00:43:31,990 --> 00:43:36,387
and then map them, therefore
enrich the JSON file.

686
00:43:38,720 --> 00:43:41,450
So now, I have enriched JSON file

687
00:43:41,450 --> 00:43:44,580
and just pulled that into a HTML file.

688
00:43:44,580 --> 00:43:48,510
And with a D3.js, Data-Driven Documents

689
00:43:50,020 --> 00:43:55,020
library called D3.js, here's a function

690
00:43:55,040 --> 00:43:57,310
called D3.layout.force,

691
00:43:57,310 --> 00:43:59,930
and they just connect all those arrows,

692
00:43:59,930 --> 00:44:02,150
all those transactions from A to B,

693
00:44:02,150 --> 00:44:04,501
B to C automatically.

694
00:44:04,501 --> 00:44:07,401
So in my HTML file, I just say,

695
00:44:07,401 --> 00:44:09,700
I just points at the JSON file

696
00:44:09,700 --> 00:44:13,363
where I have the enriched transactions,

697
00:44:14,590 --> 00:44:19,037
I set up the graph with the arrows,

698
00:44:20,500 --> 00:44:21,927
and just print it,

699
00:44:21,927 --> 00:44:23,763
and it would look like this.

700
00:44:31,268 --> 00:44:34,768
And so, this is how the webpage look like.

701
00:44:37,530 --> 00:44:40,653
So I have here, I can detect the Riksbank.

702
00:44:42,820 --> 00:44:47,020
I can see one of the historic transaction

703
00:44:47,020 --> 00:44:48,870
to a payment service provider.

704
00:44:48,870 --> 00:44:51,076
So this is an issue.

705
00:44:51,076 --> 00:44:52,833
So this payment service provider

706
00:44:52,833 --> 00:44:55,080
has done an issue of one million.

707
00:44:55,080 --> 00:44:57,930
And from that one million,

708
00:44:57,930 --> 00:45:02,930
one user called this wallet ID on PSP1

709
00:45:04,940 --> 00:45:09,473
has withdrawn 1,337.10.

710
00:45:11,883 --> 00:45:14,680
So then I know this
payment service provider

711
00:45:20,653 --> 00:45:23,320
is Payment Service Provider One.

712
00:45:26,161 --> 00:45:27,417
So this wallet has another transaction,

713
00:45:31,105 --> 00:45:33,743
so let's see if I can get hold of it, no?

714
00:45:37,560 --> 00:45:40,490
To this Payment Service Provider Three,

715
00:45:40,490 --> 00:45:42,020
and there has been two transactions

716
00:45:42,020 --> 00:45:43,920
to this payment service provider,

717
00:45:43,920 --> 00:45:48,200
the wallet on this Payment
Service Provider Three,

718
00:45:48,200 --> 00:45:51,443
and it's one transaction
of 1,337.40 and 1,337.50.

719
00:45:56,770 --> 00:46:01,700
Then it comes to my Payment
Service Provider Two here

720
00:46:01,700 --> 00:46:04,810
to my user here at the
Payment Service Provider Two.

721
00:46:04,810 --> 00:46:09,357
But when I received this
payment of 1,337.60,

722
00:46:15,848 --> 00:46:19,145
I also get all historic backchains,

723
00:46:19,145 --> 00:46:22,520
so I can now see all the historic

724
00:46:25,197 --> 00:46:30,197
transactions leading up to this.

725
00:46:35,750 --> 00:46:39,543
Yeah, so backchain and privacy.

726
00:46:42,130 --> 00:46:43,530
First, I have to say,

727
00:46:43,530 --> 00:46:45,320
even if you don't have the wallet ID,

728
00:46:45,320 --> 00:46:48,420
you have always the public key.

729
00:46:48,420 --> 00:46:50,180
And public keys are probably

730
00:46:50,180 --> 00:46:52,593
also personal identifiable information.

731
00:46:53,800 --> 00:46:57,827
And whichever technology you choose,

732
00:46:59,270 --> 00:47:01,520
you have to take this into account,

733
00:47:01,520 --> 00:47:04,290
and for some blockchain technologies,

734
00:47:04,290 --> 00:47:05,673
this can be challenged.

735
00:47:09,810 --> 00:47:13,873
So we have to fix this in phase two.

736
00:47:15,320 --> 00:47:18,400
Then we have everything else.

737
00:47:18,400 --> 00:47:19,920
Everything else that I've not talked

738
00:47:19,920 --> 00:47:23,110
about in this presentation,

739
00:47:23,110 --> 00:47:25,100
and everything else that has to be sold

740
00:47:25,100 --> 00:47:26,250
before going into production

741
00:47:26,250 --> 00:47:28,803
with a token-based retail
central banking currency.

742
00:47:30,165 --> 00:47:32,243
So we have performance

743
00:47:32,243 --> 00:47:35,130
and the verification of the tokens.

744
00:47:37,390 --> 00:47:41,590
We have to store, if you
have lots of lots of tokens

745
00:47:41,590 --> 00:47:43,260
or very long backchains.

746
00:47:47,210 --> 00:47:50,710
It doesn't matter what
technology you are using,

747
00:47:50,710 --> 00:47:55,240
you have to verify the authenticity

748
00:47:55,240 --> 00:47:56,673
and have the performance.

749
00:47:57,590 --> 00:48:01,527
And we have also, a challenge
for the high availability

750
00:48:01,527 --> 00:48:02,690
and in-memory token selection.

751
00:48:02,690 --> 00:48:05,720
So all the token selection is done

752
00:48:05,720 --> 00:48:09,900
in the memory of the Corda node,

753
00:48:09,900 --> 00:48:12,940
so how should you do 24/7 service

754
00:48:12,940 --> 00:48:16,900
like if you're gonna upgrade
Corda or operating system?

755
00:48:16,900 --> 00:48:19,238
You can't just shut down the Corda node

756
00:48:19,238 --> 00:48:22,923
and disable payments during this time.

757
00:48:24,130 --> 00:48:27,230
And how should you do resolve

758
00:48:27,230 --> 00:48:30,180
the recovery after catastrophic failures?

759
00:48:30,180 --> 00:48:33,260
You can't just take a database backup

760
00:48:33,260 --> 00:48:37,710
and restore it because you're missing

761
00:48:37,710 --> 00:48:39,240
all the transactions leading up

762
00:48:39,240 --> 00:48:41,270
to that catastrophic failure.

763
00:48:41,270 --> 00:48:45,430
So you need some kind of area, storage,

764
00:48:45,430 --> 00:48:47,836
where you store all the transactions

765
00:48:47,836 --> 00:48:52,730
that you can build up or in other ways,

766
00:48:54,320 --> 00:48:59,320
fix the inconsistency when
restoring a Corda node.

767
00:49:00,730 --> 00:49:03,210
And then secure offline.

768
00:49:03,210 --> 00:49:04,190
Can that been done?

769
00:49:04,190 --> 00:49:05,097
We have to look at it,

770
00:49:05,097 --> 00:49:07,432
and we will look at it.

771
00:49:07,432 --> 00:49:11,160
And we have problems with non-repudiation,

772
00:49:11,160 --> 00:49:13,363
meaning whether it's authorization.

773
00:49:15,216 --> 00:49:17,430
You have to be sure it is right person

774
00:49:17,430 --> 00:49:19,360
that has done the transaction,

775
00:49:19,360 --> 00:49:24,360
and it has to be proof of that

776
00:49:26,160 --> 00:49:29,500
that this user has done this transaction.

777
00:49:29,500 --> 00:49:32,500
And then we have another thing

778
00:49:32,500 --> 00:49:34,650
regarding information security,

779
00:49:34,650 --> 00:49:38,090
like access control, operational security,

780
00:49:38,090 --> 00:49:40,090
incident management, fraud detection,

781
00:49:40,090 --> 00:49:42,940
AML, new customer.

782
00:49:42,940 --> 00:49:46,200
We have all the IT security to solve

783
00:49:46,200 --> 00:49:49,570
or has to be in place
before going in production.

784
00:49:49,570 --> 00:49:51,889
And of course, compliance, laws,

785
00:49:51,889 --> 00:49:53,900
regulation, financial compliance,

786
00:49:53,900 --> 00:49:55,767
and there are lots of solutions.

787
00:49:57,465 --> 00:50:00,610
There are many solutions for
the presented challenges.

788
00:50:02,130 --> 00:50:06,768
So I have talked about lots of challenges

789
00:50:06,768 --> 00:50:07,950
but there are lots of solutions.

790
00:50:07,950 --> 00:50:12,180
I will not go into the
solutions in this presentation.

791
00:50:12,180 --> 00:50:15,130
There are chain snipping,
chipping, key rotation,

792
00:50:15,130 --> 00:50:16,820
zero knowledge proof, and other encryption

793
00:50:16,820 --> 00:50:18,833
to solve some things,

794
00:50:18,833 --> 00:50:22,130
and we have validating notary nodes

795
00:50:22,130 --> 00:50:23,663
to solve other things.

796
00:50:24,580 --> 00:50:26,193
We have hardware wallets.

797
00:50:29,630 --> 00:50:32,680
Maybe could that work with offline?

798
00:50:32,680 --> 00:50:36,280
And restore procedures and functions

799
00:50:36,280 --> 00:50:38,480
for correcting inconsistencies.

800
00:50:38,480 --> 00:50:40,460
Maybe we can fix everything.

801
00:50:40,460 --> 00:50:41,820
It's a technical project

802
00:50:41,820 --> 00:50:45,481
and we probably can solve it technically.

803
00:50:45,481 --> 00:50:47,740
And Riksbank is now
experimenting with other designs,

804
00:50:47,740 --> 00:50:49,840
and we'll also look at other technologies.

805
00:50:51,215 --> 00:50:54,160
But I also have to say that every solution

806
00:50:54,160 --> 00:50:57,000
will have their own consequences.

807
00:50:57,000 --> 00:50:58,810
So if we just solve one thing,

808
00:50:58,810 --> 00:51:00,987
maybe we have other problems with it

809
00:51:00,987 --> 00:51:03,737
like performance or other things.

810
00:51:06,480 --> 00:51:09,160
I also want to say that during phase one,

811
00:51:09,160 --> 00:51:11,840
we had a design where the private key

812
00:51:11,840 --> 00:51:13,227
was on the payment instrument

813
00:51:13,227 --> 00:51:16,883
but the tokens were on the Corda node.

814
00:51:17,849 --> 00:51:22,849
So to experiment with the payment service

815
00:51:23,312 --> 00:51:25,895
directly to PSP2, we are trying

816
00:51:27,472 --> 00:51:32,472
to have both the key and the tokens

817
00:51:33,050 --> 00:51:34,650
on the payment service provider,

818
00:51:35,610 --> 00:51:39,400
and we're also looking
for offline functionality,

819
00:51:39,400 --> 00:51:42,920
and then we will experiment
with having the key

820
00:51:42,920 --> 00:51:45,323
and the tokens on the payment instrument.

821
00:51:46,300 --> 00:51:51,300
And so, we can do the
transfer of tokens offline

822
00:51:52,650 --> 00:51:56,220
to another payment instrument device.

823
00:51:56,220 --> 00:51:58,720
So we're looking at lots of other

824
00:52:00,390 --> 00:52:02,623
fun things during phase two,

825
00:52:03,790 --> 00:52:08,790
and we're not ready for
production anytime yet.

826
00:52:09,330 --> 00:52:13,420
And we probably have to change

827
00:52:13,420 --> 00:52:17,360
the laws of the Central Bank in Sweden,

828
00:52:17,360 --> 00:52:22,360
the Riksbank law before going
into production anyway, so.

829
00:52:22,510 --> 00:52:24,780
But we will still look, still looking

830
00:52:24,780 --> 00:52:26,137
at the central bank digital currency

831
00:52:26,137 --> 00:52:27,603
and other technologies.

832
00:52:29,426 --> 00:52:33,180
So the summary, the goal
of this presentation

833
00:52:33,180 --> 00:52:37,250
is to share insights of
the security challenge

834
00:52:37,250 --> 00:52:39,602
of building a prototype of a two-tier

835
00:52:39,602 --> 00:52:40,933
retail central bank digital currency

836
00:52:40,933 --> 00:52:44,433
based on a blockchain
with value-based tokens.

837
00:52:45,880 --> 00:52:48,863
I have only presented
threats, vulnerabilities,

838
00:52:48,863 --> 00:52:51,580
and security fails, and some unknowns.

839
00:52:51,580 --> 00:52:55,030
I have not presented all the good design

840
00:52:55,030 --> 00:52:57,740
and all the positive lessons learned.

841
00:52:57,740 --> 00:53:00,072
That's another presentation.

842
00:53:00,072 --> 00:53:05,072
So we have invented and built so much

843
00:53:05,720 --> 00:53:10,203
good working parts,
components, solution design,

844
00:53:11,080 --> 00:53:15,300
and we have learned so much going for,

845
00:53:15,300 --> 00:53:17,000
when we're now going forward,

846
00:53:17,000 --> 00:53:20,450
and we'll look how we
should build a system

847
00:53:20,450 --> 00:53:25,300
that could be run in production in Sweden.

848
00:53:25,300 --> 00:53:27,620
But I've not talked about that

849
00:53:27,620 --> 00:53:29,560
in this presentation.

850
00:53:29,560 --> 00:53:31,693
That's the bad stuff, okay?

851
00:53:34,455 --> 00:53:36,455
Thank you for attending.

