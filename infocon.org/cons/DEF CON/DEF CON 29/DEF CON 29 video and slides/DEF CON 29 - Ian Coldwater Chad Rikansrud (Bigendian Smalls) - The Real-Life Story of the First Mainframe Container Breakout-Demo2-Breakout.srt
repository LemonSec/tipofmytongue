1
00:00:00,000 --> 00:00:03,160
- So I made a curl call,

2
00:00:03,160 --> 00:00:05,430
creating a new container
that mounted the host path

3
00:00:05,430 --> 00:00:08,320
as a read/write bind map via engine syntax

4
00:00:08,320 --> 00:00:10,170
and hey, it works.

5
00:00:10,170 --> 00:00:12,170
So, I knew that making calls could work

6
00:00:12,170 --> 00:00:15,270
and that bindings was an
option they missed. Sweet.

7
00:00:15,270 --> 00:00:17,490
But when I tried chroot-ing
out into the whole system

8
00:00:17,490 --> 00:00:19,850
it didn't quite work the
way that I wanted it to,

9
00:00:19,850 --> 00:00:22,700
because they had enabled
user namespace remapping.

10
00:00:22,700 --> 00:00:24,350
What this means for my purposes is that

11
00:00:24,350 --> 00:00:25,820
once I was out of that namespace,

12
00:00:25,820 --> 00:00:27,350
even though it said I was root,

13
00:00:27,350 --> 00:00:30,310
I couldn't really do anything
meaningful in that namespace.

14
00:00:30,310 --> 00:00:33,410
And they had locked down
the sudoers file real hard,

15
00:00:33,410 --> 00:00:35,090
which was throwing
weird permissions errors

16
00:00:35,090 --> 00:00:36,450
that I haven't seen before.

17
00:00:36,450 --> 00:00:38,897
So that was kind of odd, but okay,

18
00:00:38,897 --> 00:00:41,330
maybe this one wasn't going
to work, but at this point,

19
00:00:41,330 --> 00:00:42,880
I knew I was getting somewhere.

20
00:00:44,760 --> 00:00:46,220
I'm gonna take a second here to explain

21
00:00:46,220 --> 00:00:48,690
user namespace remapping,
because it's important.

22
00:00:48,690 --> 00:00:51,550
Linux namespaces provide
isolation for running processes.

23
00:00:51,550 --> 00:00:53,520
They limit their access
to system resources

24
00:00:53,520 --> 00:00:56,213
without the running process
being aware of the limitations.

25
00:00:57,610 --> 00:01:00,230
You don't want to run your
containers as a root user,

26
00:01:00,230 --> 00:01:03,200
generally, it is not a secure thing to do.

27
00:01:03,200 --> 00:01:05,280
But sometimes for various system reasons,

28
00:01:05,280 --> 00:01:08,590
you get a container in which
something has to run as root.

29
00:01:08,590 --> 00:01:10,610
So, for those containers whose processes

30
00:01:10,610 --> 00:01:12,900
have to run as the root
user within the container,

31
00:01:12,900 --> 00:01:15,600
you can remap this user via
user namespace remapping

32
00:01:15,600 --> 00:01:18,260
to a less-privileged
user on the Docker host.

33
00:01:18,260 --> 00:01:20,540
The mapped user is
assigned a range of UIDs,

34
00:01:20,540 --> 00:01:23,050
which function within the
namespace as normal UIDs

35
00:01:23,050 --> 00:01:26,360
from 0 to 65536, but
they have no privileges

36
00:01:26,360 --> 00:01:28,640
on those machine itself. This was why,

37
00:01:28,640 --> 00:01:30,960
even though I was
theoretically running as UID 0,

38
00:01:30,960 --> 00:01:32,510
I couldn't really get anywhere.

39
00:01:33,870 --> 00:01:37,890
So, knowing that the API calls
could work to the engine API,

40
00:01:37,890 --> 00:01:40,240
but that user namespace
remapping was kind of cramping

41
00:01:40,240 --> 00:01:43,330
my style, I figured
I'd try something else.

42
00:01:43,330 --> 00:01:46,460
I tried a user namespace
host option through the API

43
00:01:46,460 --> 00:01:48,670
because setting user namespace to host

44
00:01:48,670 --> 00:01:50,660
breaks user namespace re-mapping.

45
00:01:50,660 --> 00:01:52,240
This option was blocked by the plugin

46
00:01:52,240 --> 00:01:54,720
when I had tried it before
in a Docker run command,

47
00:01:54,720 --> 00:01:57,080
but via the API it worked.

48
00:01:57,080 --> 00:01:58,600
And this time when I got in,

49
00:01:58,600 --> 00:02:01,423
I had full root access to
all of these resources.

50
00:02:03,280 --> 00:02:04,190
Wow.

51
00:02:04,190 --> 00:02:06,810
This system really needed
more defensive depth.

52
00:02:06,810 --> 00:02:09,120
It appeared to have been
built upon the assumption

53
00:02:09,120 --> 00:02:11,240
that no one could ever
become root on the host,

54
00:02:11,240 --> 00:02:13,540
like they really believed
their own propaganda.

55
00:02:13,540 --> 00:02:16,070
So, nothing was really
locked down on the backend

56
00:02:16,070 --> 00:02:18,949
by that point. Once you were
in, and once you were root,

57
00:02:18,949 --> 00:02:21,800
you could really do whatever.

58
00:02:21,800 --> 00:02:23,790
And it was kind of fun, actually.

59
00:02:23,790 --> 00:02:25,530
I haven't really had that
much fun running around

60
00:02:25,530 --> 00:02:27,430
an environment since
like early Kubernetes,

61
00:02:27,430 --> 00:02:29,490
which was similarly locked down.

62
00:02:29,490 --> 00:02:31,410
And I hadn't gotten to do that.

63
00:02:31,410 --> 00:02:33,810
So in a, in a while,
since Kubernetes improved,

64
00:02:33,810 --> 00:02:36,003
so that was fun for me. Anyway.

65
00:02:36,870 --> 00:02:39,250
The first thing I did once I had access to

66
00:02:39,250 --> 00:02:41,180
the host file system was
look inside the root folder.

67
00:02:41,180 --> 00:02:43,800
Because you know, why not?
And in the root folder,

68
00:02:43,800 --> 00:02:46,170
there was another folder called root keys.

69
00:02:46,170 --> 00:02:48,015
Well, that sounded great.

70
00:02:48,015 --> 00:02:49,960
Obviously there's gonna
be something interesting

71
00:02:49,960 --> 00:02:52,100
in root keys. So I took a look in there,

72
00:02:52,100 --> 00:02:54,002
and I found a private key called,

73
00:02:54,002 --> 00:02:56,011
IBM encapsulation private pem.

74
00:02:56,011 --> 00:02:58,090
Didn't quite know what that was,

75
00:02:58,090 --> 00:02:59,950
but I think you probably, you did.

76
00:02:59,950 --> 00:03:02,000
So I went and handed it in Chad,

77
00:03:02,000 --> 00:03:03,690
figuring it might be useful.

78
00:03:03,690 --> 00:03:05,550
Chad, then took the
key, reversed engineered

79
00:03:05,550 --> 00:03:06,670
the COBOL or something.

80
00:03:06,670 --> 00:03:08,470
And then we had a system to look at.

