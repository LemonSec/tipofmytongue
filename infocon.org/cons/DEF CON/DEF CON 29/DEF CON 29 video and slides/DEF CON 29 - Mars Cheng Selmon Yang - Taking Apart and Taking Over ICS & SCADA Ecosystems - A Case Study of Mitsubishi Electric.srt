1
00:00:00,980 --> 00:00:02,490
- Hello, everyone.

2
00:00:02,490 --> 00:00:04,770
I am Mars from TXOne Networks,

3
00:00:04,770 --> 00:00:06,980
and we are happy to have the opportunity

4
00:00:06,980 --> 00:00:11,520
to share our research results
on the DEF CON 29 stage.

5
00:00:11,520 --> 00:00:14,830
In this session, we will
discuss the ecosystem

6
00:00:14,830 --> 00:00:17,734
of ICS and SCADA, and more deeply focus

7
00:00:17,734 --> 00:00:21,223
on the Mitsubishi Electric's
communication protocols.

8
00:00:23,570 --> 00:00:26,370
And please allow me to
quickly introduce TXOne.

9
00:00:26,370 --> 00:00:31,300
TXOne is a subsidiary
company under Trend Micro.

10
00:00:31,300 --> 00:00:33,270
We focus on providing cyber defense

11
00:00:33,270 --> 00:00:35,370
and visibility for operational technology.

12
00:00:37,650 --> 00:00:41,060
And currently, I'm the
threat researcher for TXOne.

13
00:00:41,060 --> 00:00:43,970
I'm focused on IoT, ICS, and SCADA,

14
00:00:43,970 --> 00:00:47,080
enterprise-related security
and threat research,

15
00:00:47,080 --> 00:00:50,830
and also shared many results

16
00:00:50,830 --> 00:00:52,490
of my security research

17
00:00:52,490 --> 00:00:54,853
at the major cybersecurity conferences,

18
00:00:54,853 --> 00:00:58,311
such as Black Hat, HITCON, SecTor,

19
00:00:58,311 --> 00:00:59,611
Hack In The Box Conference,

20
00:00:59,611 --> 00:01:01,960
and other major cybersecurity conference.

21
00:01:01,960 --> 00:01:04,870
I'm also the general coordinator

22
00:01:04,870 --> 00:01:08,117
of the Hacks in Taiwan
Conference, HITCON 2021.

23
00:01:09,090 --> 00:01:10,900
And my colleague Selmon,

24
00:01:10,900 --> 00:01:15,900
Selmon very specialized in IT
and SCADA protocol parsing,

25
00:01:16,530 --> 00:01:18,220
and Linux kernel programming.

26
00:01:18,220 --> 00:01:21,130
He also has both speaking experience

27
00:01:21,130 --> 00:01:22,590
at the global conference,

28
00:01:22,590 --> 00:01:25,853
such as CYBERSEC, HITCON,
Hack In The Box Conference,

29
00:01:25,853 --> 00:01:29,733
and also made a repo for
regular ICS research.

30
00:01:31,160 --> 00:01:35,720
And today's outline, and first
we will discuss modern ICS

31
00:01:35,720 --> 00:01:39,850
and SCADA ecosystem, and
then move on to the problem

32
00:01:39,850 --> 00:01:41,300
of Mitsubishi ecosystem,

33
00:01:41,300 --> 00:01:45,300
including to how we, how to analyze

34
00:01:45,300 --> 00:01:48,393
and successfully take over
the entire ecosystems.

35
00:01:49,560 --> 00:01:51,840
Because Mitsubishi is now very actively

36
00:01:52,860 --> 00:01:55,690
facing this issue of our finding,

37
00:01:55,690 --> 00:01:58,470
and we will also share the process

38
00:01:58,470 --> 00:02:00,213
of our content with Mitsubishi,

39
00:02:01,270 --> 00:02:06,060
and show why we decided
to share our finding

40
00:02:06,060 --> 00:02:09,090
based on the public's right to know.

41
00:02:09,090 --> 00:02:11,320
And finally, we will also share,

42
00:02:11,320 --> 00:02:14,093
let you know how to perform mitigation.

43
00:02:15,380 --> 00:02:19,153
And first one, Modern
ICS/SCADA Ecosystem Overview.

44
00:02:21,180 --> 00:02:24,670
Mitsubishi is world's third largest

45
00:02:24,670 --> 00:02:28,180
industrial control
manufacturers by market value

46
00:02:28,180 --> 00:02:31,970
with a global market
share of more than 10%.

47
00:02:31,970 --> 00:02:33,810
So you will see the top three,

48
00:02:33,810 --> 00:02:36,217
and then so very powerful percentage

49
00:02:36,217 --> 00:02:38,570
in the global market here.

50
00:02:38,570 --> 00:02:42,937
And also, ordered by the
net annually sales revenue

51
00:02:42,937 --> 00:02:45,700
in the industrial automation status,

52
00:02:45,700 --> 00:02:48,060
Mitsubishi is also among the top three,

53
00:02:48,060 --> 00:02:50,110
the top three here.

54
00:02:50,110 --> 00:02:51,180
You will see here.

55
00:02:51,180 --> 00:02:53,670
And at the same time,
it is also ranked third

56
00:02:53,670 --> 00:02:56,760
among the most popular PLCs

57
00:02:56,760 --> 00:02:59,730
with the commercial status entities.

58
00:02:59,730 --> 00:03:03,070
In the previous slide, we can see

59
00:03:03,070 --> 00:03:07,333
that Mitsubishi has performed
very well in this field.

60
00:03:09,510 --> 00:03:11,397
And we're also very interested

61
00:03:11,397 --> 00:03:13,640
about the Mitsubishi ecosystem scope.

62
00:03:13,640 --> 00:03:15,380
So let's take a look, close look,

63
00:03:15,380 --> 00:03:18,280
at the scope of Mitsubishi PLC series.

64
00:03:18,280 --> 00:03:21,790
And Mitsubishi can basically cover

65
00:03:21,790 --> 00:03:25,150
any size, system size,
from small to large,

66
00:03:25,150 --> 00:03:28,980
and they provide different levels of PLC

67
00:03:28,980 --> 00:03:30,880
for different system size.

68
00:03:30,880 --> 00:03:34,070
So from the slide you will see

69
00:03:34,070 --> 00:03:36,230
from small size to large size

70
00:03:36,230 --> 00:03:39,250
the MELSEC-F, iQ-F, L, Q,

71
00:03:39,250 --> 00:03:42,210
or iQ-R are the small to large order

72
00:03:42,210 --> 00:03:44,258
of land that can cover that.

73
00:03:44,258 --> 00:03:47,551
And also, but you will be
interested in one more thing.

74
00:03:47,551 --> 00:03:51,780
It's where are their PLCs used.

75
00:03:51,780 --> 00:03:54,140
So based on Mitsubishi's
official statement

76
00:03:54,140 --> 00:03:56,900
and our own observations,

77
00:03:56,900 --> 00:03:59,896
Mitsubishi's PLC's very powerful

78
00:03:59,896 --> 00:04:03,560
and widely in use by a range of verticals,

79
00:04:03,560 --> 00:04:06,950
including automotive, automated,

80
00:04:06,950 --> 00:04:10,960
or warehoused, food and beverage,

81
00:04:10,960 --> 00:04:14,280
semiconductor, general automation,

82
00:04:14,280 --> 00:04:17,960
chemical, FPD, inspection machines,

83
00:04:17,960 --> 00:04:21,613
and (mumbles) land and including
the building automation,

84
00:04:22,820 --> 00:04:26,410
injection molding,
printing, machine tools,

85
00:04:26,410 --> 00:04:31,410
and many more of them
use the Mitsubishi PLCs.

86
00:04:31,880 --> 00:04:32,940
It's very widely used,

87
00:04:32,940 --> 00:04:36,000
and they covered all
critical infrastructure,

88
00:04:36,000 --> 00:04:38,830
many infrastructure, such as we daily use

89
00:04:38,830 --> 00:04:41,040
like power, water, wastewater, and so on,

90
00:04:41,040 --> 00:04:44,083
and it's very close with people's life.

91
00:04:45,090 --> 00:04:46,407
You just imagine

92
00:04:47,290 --> 00:04:50,180
whether those industry are close tied

93
00:04:50,180 --> 00:04:55,180
into your daily life,
maybe for security issues,

94
00:04:55,220 --> 00:04:57,450
occupying critical devices,

95
00:04:57,450 --> 00:05:00,303
like the maintenance (mumbles) industry.

96
00:05:01,620 --> 00:05:05,720
The attacks can disrupt,
or control our asset,

97
00:05:05,720 --> 00:05:08,300
and may will be very dangerous

98
00:05:08,300 --> 00:05:11,200
and very powerful and huge.

99
00:05:11,200 --> 00:05:13,400
So you should take care of these.

100
00:05:13,400 --> 00:05:16,400
Initial, before we
performed this research,

101
00:05:16,400 --> 00:05:19,990
we reviewed previous very powerful

102
00:05:20,960 --> 00:05:22,807
industrial security research,

103
00:05:22,807 --> 00:05:24,977
and we noticed something important.

104
00:05:26,117 --> 00:05:29,470
Almost no one conducted
research on Mitsubishi.

105
00:05:29,470 --> 00:05:33,230
Most of the related research is

106
00:05:33,230 --> 00:05:35,893
instead focused on Siemens S7.

107
00:05:36,810 --> 00:05:41,810
So it was in Black Hat
2019, 2017, 2016, 2010, '11

108
00:05:43,680 --> 00:05:45,453
focused on Siemens' devices.

109
00:05:46,970 --> 00:05:48,950
Or even then only focused on Siemens,

110
00:05:48,950 --> 00:05:52,280
about some other part

111
00:05:52,280 --> 00:05:55,040
have nothing to do with the
communication protocols,

112
00:05:55,040 --> 00:05:58,180
like ICS-targeted malware,

113
00:05:58,180 --> 00:06:01,160
or attack vectors in different centers.

114
00:06:01,160 --> 00:06:03,540
So we believe this is,

115
00:06:03,540 --> 00:06:07,710
we revealed it of
opportunity to work in depth

116
00:06:07,710 --> 00:06:09,293
with the Mitsubishi ecosystems.

117
00:06:10,832 --> 00:06:13,241
And also, we also more review

118
00:06:13,241 --> 00:06:14,766
the Mitsubishi vulnerabilities.

119
00:06:14,766 --> 00:06:17,740
It is a very important
thing, so we reviewed it,

120
00:06:17,740 --> 00:06:21,110
and has already announced

121
00:06:21,110 --> 00:06:23,032
the vulnerability in the PAC,

122
00:06:23,032 --> 00:06:26,800
in maybe one years ago, a few months ago.

123
00:06:26,800 --> 00:06:29,730
Also, here this table shows some examples.

124
00:06:29,730 --> 00:06:31,377
But there are many more,

125
00:06:32,443 --> 00:06:37,133
and we have found that most of
the published vulnerabilities

126
00:06:37,133 --> 00:06:41,653
are only specific devices,
modules, softwares,

127
00:06:41,653 --> 00:06:44,660
and do not specifically address issues

128
00:06:44,660 --> 00:06:47,750
in their communication protocols itself.

129
00:06:47,750 --> 00:06:51,350
So now that we have introduced
the starting perspective

130
00:06:51,350 --> 00:06:54,555
of our research, let's take a look

131
00:06:54,555 --> 00:06:57,863
of the three different ICS ecosystems.

132
00:06:59,370 --> 00:07:01,298
And how does the ecosystem

133
00:07:01,298 --> 00:07:05,610
of critical infrastructure
control system look like?

134
00:07:05,610 --> 00:07:07,217
Our first example is Modbus,

135
00:07:08,410 --> 00:07:10,686
and you will see that HMI appears.

136
00:07:10,686 --> 00:07:12,740
Engineering workstation offline use

137
00:07:12,740 --> 00:07:15,210
Modbus TCP communications,

138
00:07:15,210 --> 00:07:18,240
and only the PLC and
with field devices use

139
00:07:18,240 --> 00:07:21,130
the Modbus RTU, or ASCII.

140
00:07:21,130 --> 00:07:24,092
Well, usually, it's a
secure line based on TCP/IP,

141
00:07:24,092 --> 00:07:26,184
not based on SNI Ethernet,

142
00:07:26,184 --> 00:07:28,542
but they were something different.

143
00:07:28,542 --> 00:07:31,883
But to focus on the Modbus TCP layout,

144
00:07:31,883 --> 00:07:34,530
something different occurring
to the different function

145
00:07:34,530 --> 00:07:37,660
implemented by different manufacturers,

146
00:07:37,660 --> 00:07:38,960
or licensed vendors.

147
00:07:38,960 --> 00:07:42,623
But basically, the native
functions are quite limited.

148
00:07:43,620 --> 00:07:45,730
And also, second example is Siemens.

149
00:07:45,730 --> 00:07:48,980
So in Siemens, it provide
their own private protocol.

150
00:07:48,980 --> 00:07:53,963
Siemens S7, S7+ has already
the strong-handed security

151
00:07:53,963 --> 00:07:57,060
to a certain extent by applying

152
00:07:57,060 --> 00:07:59,930
in depth research from many researchers.

153
00:07:59,930 --> 00:08:04,860
So while I dare not say that
this protocol is secure,

154
00:08:04,860 --> 00:08:09,016
but I must say its security is

155
00:08:09,016 --> 00:08:14,016
already much better in conversation

156
00:08:15,560 --> 00:08:16,903
to other ICS protocols.

157
00:08:18,140 --> 00:08:22,230
So we will say, oh, Siemens is a good,

158
00:08:22,230 --> 00:08:26,290
do a good job for cybersecurity
than other ICS vendors.

159
00:08:26,290 --> 00:08:30,064
But finally, what about Mitsubishi?

160
00:08:30,064 --> 00:08:32,610
And between the HMI and PLC,

161
00:08:32,610 --> 00:08:35,162
it support a wider range
of communication protocols,

162
00:08:35,162 --> 00:08:38,940
such as SLMP, Modbus,
TCP, and Ethernet/ IP

163
00:08:38,940 --> 00:08:41,130
based on different amount network modules

164
00:08:41,130 --> 00:08:44,887
in order to support
their company's abilities

165
00:08:46,904 --> 00:08:48,987
with a variety of assets.

166
00:08:49,965 --> 00:08:52,941
And from the perspective of attacker,

167
00:08:52,941 --> 00:08:56,000
if you come, cut from the HMI,

168
00:08:56,000 --> 00:08:57,910
you must understand that

169
00:08:57,910 --> 00:09:01,230
various protocols can
be used in your attack.

170
00:09:01,230 --> 00:09:04,250
But for their PLC engineering workstation,

171
00:09:04,250 --> 00:09:05,757
they use the MELSOFT,

172
00:09:05,757 --> 00:09:08,050
and MELSOFT, a private protocol,

173
00:09:08,050 --> 00:09:09,900
is used to communicate between

174
00:09:09,900 --> 00:09:11,570
engineering workstation and PLC,

175
00:09:11,570 --> 00:09:15,850
and if someone can take
over MELSOFT protocol,

176
00:09:15,850 --> 00:09:18,940
they can compromise all Mitsubishi PLCs,

177
00:09:18,940 --> 00:09:21,917
and master the entire ecosystem,

178
00:09:21,917 --> 00:09:25,453
and we were able to actually publish this.

179
00:09:29,060 --> 00:09:32,730
Now, to have a fun part, let's dissect

180
00:09:32,730 --> 00:09:34,843
and compromise Mitsubishi ecosystems.

181
00:09:35,710 --> 00:09:40,250
So for attacker, if we can
discover a vulnerability

182
00:09:40,250 --> 00:09:44,260
in MELSOFT, and we can basically take over

183
00:09:44,260 --> 00:09:47,187
Mitsubishi ecosystem completely,

184
00:09:47,187 --> 00:09:49,407
and we can fake an (mumbles).

185
00:09:51,140 --> 00:09:53,990
Engineering workstation
to pass the command

186
00:09:54,919 --> 00:09:59,850
under the PLC, so it does
whatever we want it do that.

187
00:09:59,850 --> 00:10:02,250
So we configure it exactly.

188
00:10:02,250 --> 00:10:06,457
We've used the MELSOFT protocol
to communicate with the PLC.

189
00:10:07,940 --> 00:10:12,760
And also, yes, MELSOFT have
authentication mechanism,

190
00:10:12,760 --> 00:10:15,530
but this authentication mechanism is not,

191
00:10:15,530 --> 00:10:17,170
is very, very weak.

192
00:10:17,170 --> 00:10:20,730
In other words, as long as we
can pass the authentication,

193
00:10:20,730 --> 00:10:23,588
then we can take over everything.

194
00:10:23,588 --> 00:10:28,430
And as you can see, this is
just a few handshake process

195
00:10:29,503 --> 00:10:31,583
between the engineering
workstation and PLC you see,

196
00:10:31,583 --> 00:10:35,690
and at beginning of the
entire authentication process

197
00:10:35,690 --> 00:10:38,580
engineering will, engineering
workstation will send

198
00:10:38,580 --> 00:10:43,580
a challenge request, it's
message one, to the PLC.

199
00:10:43,630 --> 00:10:47,940
PLC will return the random
10-byte challenge code

200
00:10:47,940 --> 00:10:49,940
to engineering workstation.

201
00:10:49,940 --> 00:10:52,160
And then engineering workstation, EWS,

202
00:10:52,160 --> 00:10:53,650
will do the calculation based

203
00:10:53,650 --> 00:10:56,210
on this 10-byte challenge code,

204
00:10:56,210 --> 00:11:00,090
and send back the 32-byte code to the PLC.

205
00:11:00,090 --> 00:11:02,360
And then confirm whatever, or not

206
00:11:02,360 --> 00:11:05,083
if has passed the authentication.

207
00:11:06,680 --> 00:11:07,710
How we have to do this,

208
00:11:07,710 --> 00:11:12,710
and what we have to do is to
reverse the calculation process

209
00:11:12,900 --> 00:11:16,290
of these 32-bytes, and let's
edit the things we need to do.

210
00:11:16,290 --> 00:11:18,310
Then we want to find
out is something tricky,

211
00:11:18,310 --> 00:11:20,833
or something interesting in that part.

212
00:11:22,000 --> 00:11:24,374
So how can we reverse?

213
00:11:24,374 --> 00:11:27,510
Their engineering workstation
software is our goal,

214
00:11:27,510 --> 00:11:30,170
and GxWorks2 and GxWorks3,

215
00:11:30,170 --> 00:11:34,180
and because they support
different PLC type and PLC modules

216
00:11:35,060 --> 00:11:36,520
we know from small to large.

217
00:11:36,520 --> 00:11:39,317
So you can think of
GxWorks3 is the newest,

218
00:11:39,317 --> 00:11:42,270
and GxWorks2 is older,
but you can see this,

219
00:11:42,270 --> 00:11:44,350
and let's take this apart.

220
00:11:44,350 --> 00:11:47,220
But I will say on the new
application is something different

221
00:11:47,220 --> 00:11:50,523
in the other, some backend services.

222
00:11:51,510 --> 00:11:56,163
And so, now we will start our
reverse engineering general.

223
00:11:57,290 --> 00:11:59,280
But there are many, many steps,

224
00:11:59,280 --> 00:12:02,393
but they are not too complicated,

225
00:12:03,440 --> 00:12:07,690
but all of them are exchanges
between the various bits,

226
00:12:07,690 --> 00:12:09,223
or operations between arrays.

227
00:12:11,500 --> 00:12:16,260
After receiving the random
10-byte challenge code,

228
00:12:16,260 --> 00:12:19,720
the first thing is engineering
workstation will calculate

229
00:12:21,007 --> 00:12:23,940
the exclusive OR operation

230
00:12:25,080 --> 00:12:29,390
with a challenge code and
an execution xor_base_hex.

231
00:12:29,390 --> 00:12:32,567
Here you will see that from the red.

232
00:12:33,520 --> 00:12:36,910
You ask for the blah, blah,
blah here in step one,

233
00:12:36,910 --> 00:12:40,350
and they will change
in Xored_buffer place,

234
00:12:40,350 --> 00:12:42,620
so it'll change the place state.

235
00:12:42,620 --> 00:12:43,873
So it's step two.

236
00:12:45,410 --> 00:12:47,193
And into the step three,

237
00:12:48,545 --> 00:12:52,597
it will convert the tmp_buf
to the shortened variable,

238
00:12:52,597 --> 00:12:55,764
and verify PLC 10-byte challenge code,

239
00:12:56,933 --> 00:12:59,418
and sum the tmp_buf.

240
00:12:59,418 --> 00:13:02,074
We believe this behavior is used

241
00:13:02,074 --> 00:13:06,720
to confirm the integrated of
the 10-bytes challenge codes,

242
00:13:06,720 --> 00:13:09,540
make sure that it not be modified

243
00:13:09,540 --> 00:13:12,210
by other people, or attacks.

244
00:13:12,210 --> 00:13:14,333
So they will calculate this.

245
00:13:16,070 --> 00:13:18,376
And after that, there were, yeah,

246
00:13:18,376 --> 00:13:19,560
engineering workstation will retrieve

247
00:13:19,560 --> 00:13:23,140
the four short variable
to integer variables,

248
00:13:23,140 --> 00:13:26,310
and then go to the function, sub 62C3E.

249
00:13:30,040 --> 00:13:33,470
So go to deeper to the sub-function.

250
00:13:33,470 --> 00:13:35,030
In this moment that we were,

251
00:13:35,030 --> 00:13:37,240
I will say there are
many, many sub-function,

252
00:13:37,240 --> 00:13:39,290
and got your layer, go by layer,

253
00:13:39,290 --> 00:13:43,448
so just be patient.

254
00:13:43,448 --> 00:13:44,303
It should (mumbles),

255
00:13:44,303 --> 00:13:47,370
because there are many, many operations

256
00:13:47,370 --> 00:13:52,370
for creating these 32-byte response.

257
00:13:52,750 --> 00:13:57,290
So also in step six, after
land in the function 62C3E

258
00:13:58,440 --> 00:14:02,640
and we'll use the predefined 32-byte code

259
00:14:02,640 --> 00:14:06,286
to generate the 32-byte passcode.

260
00:14:06,286 --> 00:14:11,286
And you will see the
predefined 32 bytes right here.

261
00:14:11,460 --> 00:14:14,360
But I will say these
32-byte array will be based

262
00:14:14,360 --> 00:14:16,787
on the different PLC model, right,

263
00:14:16,787 --> 00:14:18,840
and get a different value.

264
00:14:18,840 --> 00:14:22,380
So you need to trace
the ID spawned by one.

265
00:14:22,380 --> 00:14:26,720
If you want to attack a A model,
you need to trace A, right?

266
00:14:26,720 --> 00:14:28,430
Yeah, and also on step seven,

267
00:14:28,430 --> 00:14:33,430
where I'd like to generate
the 64-byte output buffers.

268
00:14:35,628 --> 00:14:37,190
So you will see the pseudocode here,

269
00:14:37,190 --> 00:14:39,423
and (mumbles) will put it here.

270
00:14:40,700 --> 00:14:44,280
And also, after that, it
just had the calculations,

271
00:14:44,280 --> 00:14:47,300
but after they will
generate the 64-byte array

272
00:14:47,300 --> 00:14:49,310
with the value 0x36,

273
00:14:50,980 --> 00:14:54,510
and for step nine, and
perform the exclusive OR

274
00:14:54,510 --> 00:14:58,780
on the first 32 bytes, and the 5cdb array,

275
00:14:58,780 --> 00:15:03,343
and then jump to the function sub 62860.

276
00:15:05,220 --> 00:15:09,810
So you will see the left light of here.

277
00:15:09,810 --> 00:15:11,370
Here, here.

278
00:15:11,370 --> 00:15:13,040
Yeah, so you see here.

279
00:15:13,040 --> 00:15:14,880
Okay, and in step 10,

280
00:15:18,170 --> 00:15:20,680
they will generate a
code to another function.

281
00:15:20,680 --> 00:15:24,467
Yeah, yeah, 62860 here,

282
00:15:24,467 --> 00:15:28,552
and generate another 104-bytes array,

283
00:15:28,552 --> 00:15:32,840
and copy the value from right here

284
00:15:32,840 --> 00:15:35,880
to the first 32-byte parts here.

285
00:15:35,880 --> 00:15:39,390
So the value could be five
byte at least the variable,

286
00:15:39,390 --> 00:15:41,936
but just yeah, I'm gonna go through this,

287
00:15:41,936 --> 00:15:45,593
and then copy the 64 bytes from right.

288
00:15:46,620 --> 00:15:51,360
Yeah, 100 bytes, and fill the
zero in the last eight bytes,

289
00:15:51,360 --> 00:15:54,840
and show on this table.

290
00:15:54,840 --> 00:15:56,940
So you can quickly through and query,

291
00:15:56,940 --> 00:16:01,940
understanding the 104-byte,
or greater of the list,

292
00:16:01,950 --> 00:16:04,260
including some things here.

293
00:16:04,260 --> 00:16:08,960
So and then, go down to another.

294
00:16:08,960 --> 00:16:12,440
Go back to the sub-function 62C3E

295
00:16:13,320 --> 00:16:18,320
and jump to sub-function 62B7B,

296
00:16:18,420 --> 00:16:22,270
and jump to the sub-function 6289B

297
00:16:22,270 --> 00:16:26,677
to handle the last eight
byte of the 100-bytes array.

298
00:16:27,648 --> 00:16:29,981
And set the last eight bytes

299
00:16:31,080 --> 00:16:33,600
as a two integer variable,

300
00:16:33,600 --> 00:16:36,800
and add the value 0x40.

301
00:16:36,800 --> 00:16:38,353
So you will see this.

302
00:16:39,847 --> 00:16:43,430
And also, after that, we'll do the, yeah,

303
00:16:43,430 --> 00:16:45,820
another, after another

304
00:16:45,820 --> 00:16:49,980
on sub-function 628C7

305
00:16:49,980 --> 00:16:52,053
after 6289B.

306
00:16:53,730 --> 00:16:55,380
And it will run the calculation,

307
00:16:55,380 --> 00:16:57,650
and update the first 32

308
00:16:59,680 --> 00:17:01,993
bytes of the 100-bytes array.

309
00:17:02,890 --> 00:17:05,006
But it just had a huge calculation,

310
00:17:05,006 --> 00:17:08,350
and you know, just quickly goes away,

311
00:17:08,350 --> 00:17:12,713
yeah, because no very special things here.

312
00:17:13,710 --> 00:17:18,710
And also, it's queued the
sub-function 62B7B again,

313
00:17:19,680 --> 00:17:22,763
and updated 104-bytes array

314
00:17:22,763 --> 00:17:26,126
based on the computed challenge code,

315
00:17:26,126 --> 00:17:29,140
and therefore go to step 15.

316
00:17:29,140 --> 00:17:31,310
It's queued up some function

317
00:17:31,310 --> 00:17:33,343
on 62BC6.

318
00:17:34,707 --> 00:17:36,840
So we'll see go here,

319
00:17:36,840 --> 00:17:40,585
then update the value in offset 0x30.

320
00:17:40,585 --> 00:17:41,835
This is at 0x80

321
00:17:44,295 --> 00:17:46,295
from the 104-byte array,

322
00:17:47,950 --> 00:17:49,993
and add an offset 0x60,

323
00:17:53,290 --> 00:17:55,300
and you will see there's many sub-function

324
00:17:55,300 --> 00:17:58,433
in the sub-function of 62BC6.

325
00:18:02,250 --> 00:18:04,480
So and then we go down layer,

326
00:18:04,480 --> 00:18:08,057
and to calculate the, I'll
point out these functions,

327
00:18:08,057 --> 00:18:10,740
and we read in some function

328
00:18:10,740 --> 00:18:14,010
to help you understand a lot
of things, like the arrays.

329
00:18:14,010 --> 00:18:16,410
And also, yeah,

330
00:18:16,410 --> 00:18:18,333
in step six, function,

331
00:18:19,663 --> 00:18:21,650
sub-function 62ACS

332
00:18:21,650 --> 00:18:24,700
on the update the 104bytes_array buffer

333
00:18:24,700 --> 00:18:27,400
from offset 0x31,

334
00:18:27,400 --> 00:18:29,470
and set the 27 bytes to zero,

335
00:18:32,474 --> 00:18:33,724
and offset 0x60

336
00:18:35,497 --> 00:18:37,080
add the value 0x27.

337
00:18:39,288 --> 00:18:43,570
And then, update the 104-byte
array buffer used to,

338
00:18:43,570 --> 00:18:45,890
yeah, but we will, before that,

339
00:18:45,890 --> 00:18:48,990
you will see the 62AC7 function

340
00:18:48,990 --> 00:18:52,780
being already used in
the previous function.

341
00:18:52,780 --> 00:18:56,500
So it's used to just update first 32 byte,

342
00:18:56,500 --> 00:18:58,160
just so we're not duplicating

343
00:18:58,160 --> 00:19:00,960
these two repeatedly on the part.

344
00:19:00,960 --> 00:19:04,020
And go down later to step 17,

345
00:19:04,020 --> 00:19:08,810
it is a function also update
the 104-byte array buffer

346
00:19:08,810 --> 00:19:10,890
from offset 0x58.

347
00:19:10,890 --> 00:19:13,140
Set the four bytes to zero.

348
00:19:13,140 --> 00:19:17,550
Add an offset 0x64 to a integer variable

349
00:19:17,550 --> 00:19:19,150
and left-shift three bit,

350
00:19:19,150 --> 00:19:21,893
and swap it with the offset 0x5c.

351
00:19:23,296 --> 00:19:24,629
For offset 0x50,

352
00:19:26,550 --> 00:19:27,633
add 0x8 here.

353
00:19:32,679 --> 00:19:36,000
And then, also still in
the same sub-function,

354
00:19:36,000 --> 00:19:40,263
but we'll jump to another
sub-function, to 62B49,

355
00:19:42,330 --> 00:19:45,700
and update to 104-byte array

356
00:19:45,700 --> 00:19:48,900
to 136-byte.

357
00:19:48,900 --> 00:19:50,263
Yeah, you will see here,

358
00:19:50,263 --> 00:19:53,800
where the first 32 bytes
was eight integers,

359
00:19:53,800 --> 00:19:58,169
and add the 32 bytes offset

360
00:19:58,169 --> 00:19:59,002
0x0104,

361
00:20:00,690 --> 00:20:01,613
and then swap it.

362
00:20:03,926 --> 00:20:06,140
So you'll have it right here.

363
00:20:06,140 --> 00:20:09,840
And about step 19,

364
00:20:09,840 --> 00:20:12,820
the offset 0x136

365
00:20:12,820 --> 00:20:16,970
set 0x5c bytes value

366
00:20:16,970 --> 00:20:18,700
to 0x40.

367
00:20:18,700 --> 00:20:20,813
The byte array is 200 bytes now.

368
00:20:23,749 --> 00:20:26,180
So we will calculate later for it

369
00:20:26,180 --> 00:20:29,240
based on this 200-byte amount.

370
00:20:29,240 --> 00:20:32,580
And step 20, the loop,

371
00:20:32,580 --> 00:20:34,150
you will see the (mumbles) for loop.

372
00:20:34,150 --> 00:20:37,850
We see exclusive OR, the last 32 byte

373
00:20:37,850 --> 00:20:40,770
in the 200 byte array within Output,

374
00:20:40,770 --> 00:20:43,880
and storing to the 200 byte array, right?

375
00:20:43,880 --> 00:20:47,520
And the following function is just repeat

376
00:20:47,520 --> 00:20:50,340
the same function behavior

377
00:20:50,340 --> 00:20:52,060
based on this, and just based,

378
00:20:52,060 --> 00:20:55,330
just use this 200 bytes to calculate it.

379
00:20:55,330 --> 00:20:57,728
So after all of our calculations,

380
00:20:57,728 --> 00:21:00,220
and getting the final 200 bytes

381
00:21:00,220 --> 00:21:01,810
and the first 32 bytes is

382
00:21:03,450 --> 00:21:05,980
the MELSOFT authentication function need.

383
00:21:05,980 --> 00:21:09,669
So, you notice they just catch

384
00:21:09,669 --> 00:21:13,460
the first 32 bytes from
the final 200 bytes,

385
00:21:13,460 --> 00:21:15,610
and then sent back to the PLC,

386
00:21:15,610 --> 00:21:18,093
and just passed the authentication.

387
00:21:19,820 --> 00:21:21,827
And also, at this part I think

388
00:21:22,820 --> 00:21:24,620
you already know how to trick

389
00:21:24,620 --> 00:21:26,440
MELSOFT authentication mechanism,

390
00:21:26,440 --> 00:21:30,470
but I want to emphasize one
thing is on network traffic

391
00:21:30,470 --> 00:21:34,560
kind of is absolutely indispensable
to the latest research,

392
00:21:34,560 --> 00:21:36,960
because when we do a lot
of reverse engineering,

393
00:21:36,960 --> 00:21:39,890
but listen, protocol is network protocol.

394
00:21:39,890 --> 00:21:42,610
So you cannot without any tools

395
00:21:42,610 --> 00:21:45,460
help you to analyze the network traffic.

396
00:21:45,460 --> 00:21:47,540
So we believe this, if we combine them,

397
00:21:47,540 --> 00:21:50,083
we can totally take over
it, and more easily.

398
00:21:51,010 --> 00:21:55,600
So for this purpose, we built
the Wireshark Lua plugin

399
00:21:55,600 --> 00:21:56,653
for the MELSOFT protocol,

400
00:21:57,520 --> 00:22:00,140
and also we will show this protocol later

401
00:22:00,140 --> 00:22:02,650
for our demo.

402
00:22:02,650 --> 00:22:06,840
And we will kind of share
our plugins for the MELSOFT

403
00:22:06,840 --> 00:22:11,840
and can help us to recognize
understanding the Wireshark

404
00:22:12,231 --> 00:22:14,314
and the MELSOFT protocol.

405
00:22:15,167 --> 00:22:19,320
And now, we come to the fun part.

406
00:22:19,320 --> 00:22:23,450
In our scenario we want to
take over the entire PLC,

407
00:22:23,450 --> 00:22:24,510
the Mitsubishi ecosystem, right?

408
00:22:24,510 --> 00:22:26,350
So we built this scenario.

409
00:22:26,350 --> 00:22:28,450
It's overwriting the PLC program,

410
00:22:28,450 --> 00:22:31,294
and it's our goal, because
after the bypass authentication,

411
00:22:31,294 --> 00:22:32,550
everything we can do later.

412
00:22:32,550 --> 00:22:35,570
But we want to overwrite
in the PLC program.

413
00:22:35,570 --> 00:22:36,710
Right, it's our goal.

414
00:22:36,710 --> 00:22:39,577
Just a demo, so you can see that,

415
00:22:39,577 --> 00:22:41,370
and if we can bypass an authentication,

416
00:22:41,370 --> 00:22:44,260
and successfully
overwrite the PLC program,

417
00:22:44,260 --> 00:22:48,353
and we can perform any other
function we want to perform.

418
00:22:49,280 --> 00:22:52,750
And so, that's a look how
to overwrite the process.

419
00:22:52,750 --> 00:22:56,720
So here, we just let you know

420
00:22:56,720 --> 00:23:00,036
how to quickly go through
this handshake process,

421
00:23:00,036 --> 00:23:03,210
and we will, later we will step-by-step

422
00:23:03,210 --> 00:23:06,770
to let you know with
the Wireshark screenshot

423
00:23:06,770 --> 00:23:09,530
to describe this, the function behavior.

424
00:23:09,530 --> 00:23:11,590
So you will see the message one is used

425
00:23:11,590 --> 00:23:13,210
to send the challenge code,

426
00:23:13,210 --> 00:23:17,780
and back to the 10-byte
challenge code from PLC,

427
00:23:17,780 --> 00:23:20,820
and it message you, and
message three were sent

428
00:23:20,820 --> 00:23:23,970
to send us our authentication request

429
00:23:23,970 --> 00:23:28,363
with the 32-byte challenge code,

430
00:23:29,590 --> 00:23:32,030
so to the PLC, and pass an authentication.

431
00:23:32,030 --> 00:23:34,180
So after message four,

432
00:23:34,180 --> 00:23:37,120
an attacker can do
anything they want to do.

433
00:23:37,120 --> 00:23:38,370
And you likely remote stopped,

434
00:23:38,370 --> 00:23:41,930
but here, just if you need
to overwrite the PLC program,

435
00:23:41,930 --> 00:23:43,810
you need to do remote stop first,

436
00:23:43,810 --> 00:23:48,810
and open the file, and search the file,

437
00:23:49,500 --> 00:23:51,720
and read the PLC program file here,

438
00:23:51,720 --> 00:23:56,110
and after that, you need to write data,

439
00:23:56,110 --> 00:23:58,970
the data, the byte you
want to write to the file,

440
00:23:58,970 --> 00:24:00,693
so with the message 13.

441
00:24:01,585 --> 00:24:04,973
And after that, update the
file size with message 15.

442
00:24:06,610 --> 00:24:09,220
Change, modify the file creation date

443
00:24:09,220 --> 00:24:11,380
and time to close file,

444
00:24:11,380 --> 00:24:13,370
and write a file modification to storage.

445
00:24:13,370 --> 00:24:17,670
After that, you're already done
with all the file operations

446
00:24:17,670 --> 00:24:19,270
and then you just need to remote run it.

447
00:24:19,270 --> 00:24:23,960
You can run the PLC program,

448
00:24:23,960 --> 00:24:25,550
which you replace it.

449
00:24:25,550 --> 00:24:29,460
So here is this totally handshake process.

450
00:24:29,460 --> 00:24:30,443
Quickly go through this.

451
00:24:30,443 --> 00:24:31,510
Just keep in mind,

452
00:24:31,510 --> 00:24:35,840
and you will know our
whole process is like this.

453
00:24:35,840 --> 00:24:37,810
As well, we also have
the Wireshark screenshot

454
00:24:37,810 --> 00:24:39,800
for follow-up detail and step-by-step.

455
00:24:39,800 --> 00:24:41,120
So the first, the message one

456
00:24:41,120 --> 00:24:43,977
the engineering workstation
will send to the PLC

457
00:24:45,260 --> 00:24:46,947
a challenge code 0x5a0000ff

458
00:24:48,970 --> 00:24:50,073
to get the challenge code.

459
00:24:50,073 --> 00:24:53,000
This is a fixed number,
it's a fixed value,

460
00:24:53,000 --> 00:24:54,950
and it never changed,

461
00:24:54,950 --> 00:24:58,567
and when PLC receive
this, it will generate

462
00:24:58,567 --> 00:25:00,950
the 10-bytes challenge code

463
00:25:00,950 --> 00:25:03,117
to the engineering workstation.

464
00:25:03,117 --> 00:25:05,520
And engineering workstation will,

465
00:25:05,520 --> 00:25:08,520
our fake engineering
workstation will calculate

466
00:25:08,520 --> 00:25:13,148
the the 32 bytes of payload
that will you see here.

467
00:25:13,148 --> 00:25:15,216
You will see here,

468
00:25:15,216 --> 00:25:16,049
so where we'll payload to the PLC,

469
00:25:20,110 --> 00:25:23,254
and when PLC receive this 32-byte payload,

470
00:25:23,254 --> 00:25:26,460
and will integrate it, and
then pass an authentication.

471
00:25:26,460 --> 00:25:30,733
So after that, if the
message for the error code

472
00:25:30,733 --> 00:25:32,333
in message four is 0x0000,

473
00:25:34,050 --> 00:25:36,630
it means this is success.

474
00:25:36,630 --> 00:25:39,370
If it is another value,
and authentication failed,

475
00:25:39,370 --> 00:25:40,850
so after that, we saw that.

476
00:25:40,850 --> 00:25:42,530
We see that it is very exciting,

477
00:25:42,530 --> 00:25:45,930
because we successfully
to pass an authentication,

478
00:25:45,930 --> 00:25:47,560
and then from message five,

479
00:25:47,560 --> 00:25:49,915
the attacker can do
anything we want to do.

480
00:25:49,915 --> 00:25:54,170
So we do a remote stop
with this function code,

481
00:25:54,170 --> 00:25:56,210
because we want to
overwrite the PLC program.

482
00:25:56,210 --> 00:25:59,830
So you need to stop the PLC now.

483
00:25:59,830 --> 00:26:02,480
You can operate the program, right?

484
00:26:02,480 --> 00:26:05,080
So get a function code 0000 for you,

485
00:26:05,080 --> 00:26:07,380
and then you can send a request to,

486
00:26:07,380 --> 00:26:10,310
you want to open the PLC program file,

487
00:26:10,310 --> 00:26:13,089
but you don't know where
is the PLC program.

488
00:26:13,089 --> 00:26:16,416
Find out where, so you
send another comment is

489
00:26:16,416 --> 00:26:19,973
you want to find, you
want to search this file.

490
00:26:19,973 --> 00:26:21,249
You will see that you want to search

491
00:26:21,249 --> 00:26:24,800
for MAIN.QPG PLC program file here.

492
00:26:24,800 --> 00:26:26,940
Okay, so get a response,

493
00:26:26,940 --> 00:26:31,183
and then send the request
to message 11 to read file.

494
00:26:31,183 --> 00:26:36,050
We want to read the PLC
program file MAIN.QPG,

495
00:26:36,050 --> 00:26:40,160
and get a response, successfully
read, successfully read,

496
00:26:40,160 --> 00:26:43,630
and send the MELSOFT request

497
00:26:43,630 --> 00:26:46,040
with message 13.

498
00:26:46,040 --> 00:26:48,450
You want to write your data to file,

499
00:26:48,450 --> 00:26:52,224
and this method repeated tries,

500
00:26:52,224 --> 00:26:56,800
because it's based on your data,

501
00:26:56,800 --> 00:26:59,550
how big your data your want
to write into the file.

502
00:26:59,550 --> 00:27:00,670
But we want to replace,

503
00:27:00,670 --> 00:27:03,330
we want to overwrite in
the PLC program, so here.

504
00:27:04,690 --> 00:27:05,990
Just like this.

505
00:27:05,990 --> 00:27:10,510
So we'll give two tries
to file one, file two,

506
00:27:10,510 --> 00:27:13,473
and get the successfully error code.

507
00:27:15,169 --> 00:27:18,400
And send the update,
another function code update

508
00:27:18,400 --> 00:27:22,060
of file size, because you
already changed the files,

509
00:27:22,060 --> 00:27:23,910
and the file size need to be changed.

510
00:27:25,360 --> 00:27:26,193
And then,

511
00:27:28,780 --> 00:27:31,727
we send them a message searching to modify

512
00:27:31,727 --> 00:27:36,727
the file creation date and
time of at least this file.

513
00:27:37,320 --> 00:27:41,970
Okay, and send a close file.

514
00:27:41,970 --> 00:27:44,110
So you already close file.

515
00:27:44,110 --> 00:27:46,090
Meanwhile, you see you already write

516
00:27:46,090 --> 00:27:49,500
all the, how you want to write
your PLC program is done.

517
00:27:49,500 --> 00:27:54,040
And modify the, write
the file modification

518
00:27:54,040 --> 00:27:55,113
to the storage.

519
00:27:57,130 --> 00:27:59,493
Get that error for you again,

520
00:28:00,810 --> 00:28:02,620
and now, you can remote run.

521
00:28:02,620 --> 00:28:04,270
You can run the program,

522
00:28:04,270 --> 00:28:07,553
and if you run it, you
can (mumbles) to run

523
00:28:09,441 --> 00:28:12,820
the PLC program you overwrited.

524
00:28:12,820 --> 00:28:15,170
So that is successfully.

525
00:28:15,170 --> 00:28:17,700
Now, we show another demo

526
00:28:18,570 --> 00:28:22,240
of our demo of these procedures.

527
00:28:22,240 --> 00:28:25,790
So this demo will just show whole process

528
00:28:25,790 --> 00:28:30,110
of our previous slides for
overwriting PLC program,

529
00:28:30,110 --> 00:28:31,617
and normal status here is

530
00:28:34,107 --> 00:28:36,910
normal running, everything is normal.

531
00:28:36,910 --> 00:28:39,710
Green light of PLC running.

532
00:28:39,710 --> 00:28:44,610
And in our text area, we
overwrite the PLC program.

533
00:28:44,610 --> 00:28:45,460
So...

534
00:28:48,200 --> 00:28:51,640
Download the PLC program
to PLC will make the PLC

535
00:28:51,640 --> 00:28:53,440
to stop operations state,

536
00:28:53,440 --> 00:28:56,440
because it's the empty PLC program.

537
00:28:56,440 --> 00:29:01,440
But also if you want to modify
a specific point of the PLC,

538
00:29:02,940 --> 00:29:04,090
you can change this.

539
00:29:04,090 --> 00:29:07,663
So in here you'll see the
PLC already be stopped,

540
00:29:07,663 --> 00:29:11,760
because we update, we
download the empty PLC program

541
00:29:11,760 --> 00:29:12,833
to the PLC.

542
00:29:13,990 --> 00:29:15,920
So also you will see here,

543
00:29:15,920 --> 00:29:18,520
if we use (mumbles) organization to view

544
00:29:19,360 --> 00:29:21,730
the PLC program, you will see

545
00:29:21,730 --> 00:29:24,540
before we overwrite the PLC program,

546
00:29:24,540 --> 00:29:25,373
it look like this.

547
00:29:25,373 --> 00:29:28,877
It's very normal status,
and average ladder logic.

548
00:29:28,877 --> 00:29:31,039
Ladder logic very normal.

549
00:29:31,039 --> 00:29:34,353
After we overwrite it,
it's empty, totally empty.

550
00:29:35,840 --> 00:29:39,940
So we can really make huge
some impact on this site

551
00:29:39,940 --> 00:29:42,363
if you can change
everything you want to do.

552
00:29:43,940 --> 00:29:48,440
But how about a lot of potential
impact on these attacks

553
00:29:48,440 --> 00:29:50,600
if you, when we use the MELSOFT protocol,

554
00:29:50,600 --> 00:29:52,363
and according also, right, we know,

555
00:29:53,590 --> 00:29:56,690
generally speaking of PLC series

556
00:29:56,690 --> 00:29:59,490
of Mitsubishi were impaired
by the MELSOFT protocol,

557
00:29:59,490 --> 00:30:02,750
because they use MELSOFT to communicate

558
00:30:02,750 --> 00:30:05,510
between engineering workstation and a PLC.

559
00:30:05,510 --> 00:30:09,000
Also, some newest PLC will (mumbles) it

560
00:30:09,000 --> 00:30:11,400
to MELSOFT authentication,

561
00:30:11,400 --> 00:30:14,600
but if you know attacker
know the MELSOFT protocol,

562
00:30:14,600 --> 00:30:16,913
they can take over the devices directly.

563
00:30:17,857 --> 00:30:18,690
It's very easy.

564
00:30:18,690 --> 00:30:22,855
And also, we will say
other people will study,

565
00:30:22,855 --> 00:30:25,051
you know, SLMP protocols,

566
00:30:25,051 --> 00:30:27,450
and we will say this is just small part,

567
00:30:27,450 --> 00:30:31,300
and also we will discuss an issue later,

568
00:30:31,300 --> 00:30:34,200
because we will share our reporting

569
00:30:34,200 --> 00:30:38,367
of the vulnerability
process with Mitsubishi.

570
00:30:38,367 --> 00:30:41,250
And also, the potential
impact of the attack

571
00:30:41,250 --> 00:30:43,590
using the MELSOFT protocols,

572
00:30:43,590 --> 00:30:46,440
so not only many things you can do,

573
00:30:46,440 --> 00:30:48,540
like remote run, remote stop,

574
00:30:48,540 --> 00:30:50,470
or to interrupt the process,

575
00:30:50,470 --> 00:30:53,557
or you can overwrite the
previous program, like us,

576
00:30:53,557 --> 00:30:56,530
or you can write and
read and (mumbles) data

577
00:30:56,530 --> 00:30:59,703
to change the small part control process,

578
00:31:00,608 --> 00:31:04,510
and also you can move the
malicious file in the PLC,

579
00:31:04,510 --> 00:31:06,303
and generate that to the PL file.

580
00:31:08,090 --> 00:31:12,540
So we know you will, something
understanding about it,

581
00:31:12,540 --> 00:31:14,530
so we provided a common baseline

582
00:31:14,530 --> 00:31:17,790
based on the MITRE ATT&CK Matrix for ICS,

583
00:31:17,790 --> 00:31:19,870
and basically the impact we can achieve

584
00:31:19,870 --> 00:31:22,880
just by taking over the
MELSOFT protocol is rich,

585
00:31:22,880 --> 00:31:26,430
and depending on what the
attacks want to achieve.

586
00:31:26,430 --> 00:31:29,640
So you will see the part is including

587
00:31:32,101 --> 00:31:35,520
manipulation of control,
denial of control,

588
00:31:35,520 --> 00:31:36,988
and loss of control

589
00:31:36,988 --> 00:31:40,003
both included with our attack scope.

590
00:31:42,070 --> 00:31:44,960
So now, so as we mentioned before,

591
00:31:44,960 --> 00:31:48,350
we say Mitsubishi is now
already facing these issues.

592
00:31:48,350 --> 00:31:51,000
So we want to highlight,
because it's not a problem

593
00:31:51,000 --> 00:31:52,362
only for Mitsubishi.

594
00:31:52,362 --> 00:31:55,600
Other vendors we contact, we meet

595
00:31:55,600 --> 00:32:00,463
also have some of this attitude to very,

596
00:32:01,420 --> 00:32:06,030
not very attitude to
handle the vulnerabilities.

597
00:32:06,030 --> 00:32:07,040
But we want to highlight it,

598
00:32:07,040 --> 00:32:09,280
just we want to keep everyone know

599
00:32:09,280 --> 00:32:12,520
about this very serious thing.

600
00:32:12,520 --> 00:32:15,480
So here is our timeline
for we get our first reply

601
00:32:16,410 --> 00:32:17,523
from the vendors.

602
00:32:18,850 --> 00:32:21,770
So on May 30, 2020,

603
00:32:21,770 --> 00:32:24,670
this is the first time the vendor replied,

604
00:32:24,670 --> 00:32:26,790
and when we notified that.

605
00:32:26,790 --> 00:32:31,790
And the vendor replies that
the authentication process

606
00:32:32,310 --> 00:32:37,310
we point out is not to protect
the customer's security,

607
00:32:38,260 --> 00:32:40,640
but to prevent connection to devices

608
00:32:40,640 --> 00:32:43,963
of other companies, and more plainly this,

609
00:32:45,060 --> 00:32:48,210
that it's not a vulnerability
from the vendor's side,

610
00:32:48,210 --> 00:32:51,680
from the vendor perspective.

611
00:32:51,680 --> 00:32:55,020
However, regardless of
the original purpose,

612
00:32:55,020 --> 00:32:58,093
this authentication
process does have problems.

613
00:32:59,800 --> 00:33:04,670
Attacks can use it well to
perform the various operations.

614
00:33:04,670 --> 00:33:08,490
Our research showed how
this is a severe risk.

615
00:33:08,490 --> 00:33:11,397
So we know the vendor don't think,

616
00:33:11,397 --> 00:33:12,383
this is not a vulnerability.

617
00:33:12,383 --> 00:33:17,330
This is like a feature, just prevent

618
00:33:17,330 --> 00:33:18,690
other vendors' connection.

619
00:33:18,690 --> 00:33:19,790
But we don't think so.

620
00:33:21,350 --> 00:33:25,500
And after the vendors first replied,

621
00:33:25,500 --> 00:33:29,940
we write back later the
message to let them know

622
00:33:30,780 --> 00:33:32,967
why we think this is a vulnerability,

623
00:33:32,967 --> 00:33:36,890
and this is very serious,
and just how we find it,

624
00:33:36,890 --> 00:33:38,893
and as well as how it can be exploited.

625
00:33:40,320 --> 00:33:43,500
So in response, and we
said this is unfair reply,

626
00:33:43,500 --> 00:33:47,350
and we want to highlight it and point out

627
00:33:47,350 --> 00:33:49,577
we can successfully bypass
this authentication.

628
00:33:49,577 --> 00:33:50,877
We can make such a impact.

629
00:33:52,463 --> 00:33:53,600
You should know.

630
00:33:53,600 --> 00:33:55,000
As a vendor, you should have

631
00:33:55,000 --> 00:33:56,873
some security awareness of this.

632
00:33:58,220 --> 00:33:59,123
Should not avoid.

633
00:34:00,230 --> 00:34:03,240
And also it is a part of our second reply

634
00:34:03,240 --> 00:34:06,550
that we want to also explain what happens

635
00:34:06,550 --> 00:34:09,720
when the authentication is not passed,

636
00:34:09,720 --> 00:34:12,450
and basically we think this
is need to be addressed,

637
00:34:12,450 --> 00:34:16,910
and think likely to lead
to very serious dangers

638
00:34:16,910 --> 00:34:18,617
when their (mumbles) exploited.

639
00:34:21,710 --> 00:34:25,860
So here, okay, and the
vendor declined on that part,

640
00:34:25,860 --> 00:34:29,980
because we highlight the
scope from MELSOFT and SLMP,

641
00:34:29,980 --> 00:34:33,603
and they say SLMP does not
require the authentication, yeah.

642
00:34:34,470 --> 00:34:37,007
After our modification,

643
00:34:37,007 --> 00:34:40,750
it is now required authentication of SLMP.

644
00:34:40,750 --> 00:34:42,680
I would like point out this one point,

645
00:34:42,680 --> 00:34:46,440
since it's this is not
actually more dangerous

646
00:34:46,440 --> 00:34:49,293
without authentication
between HMI and PLC,

647
00:34:50,270 --> 00:34:53,760
and attacker can easy to attack PLC.

648
00:34:53,760 --> 00:34:55,550
I know that it's a legacy protocol

649
00:34:55,550 --> 00:34:58,745
usually you see for, this protocol for ICS

650
00:34:58,745 --> 00:35:01,640
and offline are not securely designed.

651
00:35:01,640 --> 00:35:06,249
But I think it's not a reason
for not to focus on this,

652
00:35:06,249 --> 00:35:09,590
not be able to, not
face the security issue.

653
00:35:09,590 --> 00:35:13,520
And these functions have some limitation

654
00:35:13,520 --> 00:35:14,960
compared with MELSOFT here.

655
00:35:14,960 --> 00:35:19,600
So we will say the SLMP
is a subset of MELSOFT,

656
00:35:19,600 --> 00:35:23,720
and we can provide attacks
with richer results

657
00:35:23,720 --> 00:35:25,313
to compromise devices.

658
00:35:26,895 --> 00:35:29,160
And also, this is a part of our,

659
00:35:29,160 --> 00:35:34,160
on some question we want
to, yeah, render repairs.

660
00:35:36,200 --> 00:35:39,606
And here, we are (mumbles)

661
00:35:39,606 --> 00:35:42,970
the last time I replied.

662
00:35:42,970 --> 00:35:46,870
Basically, we want to lay
out how much information

663
00:35:46,870 --> 00:35:49,523
we have addressed as to the exploit.

664
00:35:52,930 --> 00:35:54,430
From forging the engineering workstation,

665
00:35:54,430 --> 00:35:57,880
we can successfully read and
write everything we want,

666
00:35:57,880 --> 00:36:00,080
and should not, this
behavior should not be

667
00:36:00,990 --> 00:36:03,890
used by the unauthorized user,

668
00:36:03,890 --> 00:36:06,283
or attacks to do this behavior.

669
00:36:07,780 --> 00:36:10,370
And so, we said yeah,

670
00:36:10,370 --> 00:36:13,490
if we cannot upload at
least some of the material,

671
00:36:13,490 --> 00:36:17,130
we still just, we still
want to highlight the issue,

672
00:36:17,130 --> 00:36:20,550
and not compare with SLMP,
because this is independent.

673
00:36:20,550 --> 00:36:24,570
SLMP is SLMP, and MELSOFT is MELSOFT.

674
00:36:26,690 --> 00:36:31,028
But they said yeah, it
is, in our Q series,

675
00:36:31,028 --> 00:36:33,528
it is possible to use SLMP
to operate the MAIN.QPG

676
00:36:34,600 --> 00:36:36,800
and just as possible to operate

677
00:36:36,800 --> 00:36:38,410
through forging engineering workstation.

678
00:36:38,410 --> 00:36:42,080
So they say yeah, our
SLMP does not support

679
00:36:43,440 --> 00:36:46,410
user to operate its program file,

680
00:36:46,410 --> 00:36:48,840
but SLMP will allow that authentication.

681
00:36:48,840 --> 00:36:52,440
So everything can do that,
so no security issue.

682
00:36:52,440 --> 00:36:57,020
This is very, yeah, I
know, well, unbelievable,

683
00:36:57,020 --> 00:37:00,860
but we know this is the
vendor's perspective,

684
00:37:00,860 --> 00:37:05,860
because manufacture is different
with the security guys.

685
00:37:06,050 --> 00:37:10,330
So also, and later I
decide to close this case,

686
00:37:10,330 --> 00:37:12,860
because the vendor find out,

687
00:37:12,860 --> 00:37:16,270
and totally does not recognize
this as a vulnerability,

688
00:37:16,270 --> 00:37:18,320
but we think this is a vulnerability.

689
00:37:18,320 --> 00:37:21,540
And after a few days, because we also,

690
00:37:21,540 --> 00:37:24,883
in here, we also sent our,

691
00:37:27,130 --> 00:37:28,920
we walked through procedures.

692
00:37:28,920 --> 00:37:33,313
We want to let people know.

693
00:37:34,481 --> 00:37:37,650
We want to share our
finding to other people too

694
00:37:37,650 --> 00:37:38,860
in a cybersecurity conference.

695
00:37:38,860 --> 00:37:43,089
So after go Mitsubishi,

696
00:37:43,089 --> 00:37:45,290
vendor say yeah, another,

697
00:37:45,290 --> 00:37:47,930
we receive another reply from vendors

698
00:37:47,930 --> 00:37:50,440
and hoping that we would indicate

699
00:37:50,440 --> 00:37:53,890
and first say this is not a vulnerability,

700
00:37:54,816 --> 00:37:59,286
this issue is not a vulnerability
in Mitsubishi products.

701
00:37:59,286 --> 00:38:03,199
So of course, yes, we
respect the vendors say this,

702
00:38:03,199 --> 00:38:06,740
because we know, we can only understand

703
00:38:06,740 --> 00:38:09,060
that a lot of vendors, it's not easy.

704
00:38:09,060 --> 00:38:12,803
You need to build it in also
huge systems security devices.

705
00:38:12,803 --> 00:38:16,100
But we know there's some conflict

706
00:38:16,100 --> 00:38:21,100
with the security people
and manufacturers.

707
00:38:21,970 --> 00:38:25,630
So we respect the vendors,
I have to say that.

708
00:38:25,630 --> 00:38:27,440
And so, we will say,

709
00:38:27,440 --> 00:38:30,730
so we say this is conflicted

710
00:38:30,730 --> 00:38:33,200
with the security perspective

711
00:38:33,200 --> 00:38:35,520
and the manufacturer's perspective.

712
00:38:35,520 --> 00:38:38,200
So this issue is not a vulnerability

713
00:38:38,200 --> 00:38:41,460
in Mitsubishi products
from vendor's perspective.

714
00:38:41,460 --> 00:38:45,290
But we still hope that
this issue can be remedied

715
00:38:45,290 --> 00:38:50,253
before it lead to a problem
for work-side stakeholders.

716
00:38:51,500 --> 00:38:52,823
So for that reason,

717
00:38:54,210 --> 00:38:56,720
let's take a look how
to handle this issue.

718
00:38:56,720 --> 00:39:00,410
Okay, so there are short-term
and medium to long-terms.

719
00:39:00,410 --> 00:39:02,997
For short-term, you need to
mitigate your environment.

720
00:39:02,997 --> 00:39:05,010
You need to detecting,
you need to protecting

721
00:39:05,010 --> 00:39:07,158
your ICS and SCADA protocols.

722
00:39:07,158 --> 00:39:08,157
Even they are legacy protocol,

723
00:39:08,157 --> 00:39:11,350
they are the security they decide.

724
00:39:11,350 --> 00:39:15,590
But you should try to
protect your environment.

725
00:39:15,590 --> 00:39:18,600
Basically, sometimes
vendors cannot patch it,

726
00:39:18,600 --> 00:39:20,620
or vendor would not patch,

727
00:39:20,620 --> 00:39:23,970
because they may want to
deliver new versions maybe.

728
00:39:23,970 --> 00:39:26,630
And also, for these reasons,

729
00:39:26,630 --> 00:39:28,870
only for MELSOFT we focus on this.

730
00:39:28,870 --> 00:39:32,411
So we provide the Lua plugin
for analyzing MELSOFT protocol

731
00:39:32,411 --> 00:39:34,190
and we also provide Snort rules.

732
00:39:34,190 --> 00:39:37,050
It is IDS new rule, IDS, IPS rules,

733
00:39:37,050 --> 00:39:40,470
and for open source, and this can help you

734
00:39:40,470 --> 00:39:44,320
to detecting and to
protecting MELSOFT traffic.

735
00:39:44,320 --> 00:39:46,013
So something like this.

736
00:39:46,960 --> 00:39:48,810
Here is our rule set.

737
00:39:48,810 --> 00:39:51,961
You can just copy this
to your Snort rule list,

738
00:39:51,961 --> 00:39:54,240
and then run it, and it
can help you to detect

739
00:39:54,240 --> 00:39:57,290
and to protect some specific

740
00:39:58,387 --> 00:40:01,037
MELSOFT communication, like
MELSOFT authentication,

741
00:40:01,037 --> 00:40:05,000
remote stop, remote run, or
write files on this behavior,

742
00:40:05,000 --> 00:40:08,020
and also you can check this is how to,

743
00:40:08,020 --> 00:40:10,483
oh yeah, a rule is useful.

744
00:40:12,840 --> 00:40:16,363
And also, last part is,

745
00:40:17,300 --> 00:40:22,300
yeah, the mid to long-term
complete planning.

746
00:40:22,490 --> 00:40:26,140
We want to help you to think, yeah.

747
00:40:26,140 --> 00:40:29,527
We know the ICS vendor usually don't have

748
00:40:29,527 --> 00:40:30,953
the security awareness.

749
00:40:31,970 --> 00:40:34,210
We face many, many ICS vendor lately

750
00:40:34,210 --> 00:40:36,503
usually don't have the security awareness.

751
00:40:36,503 --> 00:40:39,870
OT guys, ICS vendors, ICS manufacturers,

752
00:40:39,870 --> 00:40:42,170
they don't have the security awareness.

753
00:40:42,170 --> 00:40:43,633
So I think that is first thing

754
00:40:43,633 --> 00:40:46,113
that you should be able to
allow security awareness.

755
00:40:46,113 --> 00:40:48,930
And you can each now try to build

756
00:40:48,930 --> 00:40:52,050
your defense in depth
environment for outside,

757
00:40:52,050 --> 00:40:55,139
like a simulated attack from the outside,

758
00:40:55,139 --> 00:40:56,410
and what they want to do,

759
00:40:56,410 --> 00:41:00,320
and how you build your
security environment

760
00:41:00,320 --> 00:41:02,850
from outside with some security devices,

761
00:41:02,850 --> 00:41:05,603
you know, firewall, or IPS, maybe,

762
00:41:06,620 --> 00:41:09,600
but still based on your environment.

763
00:41:09,600 --> 00:41:13,650
And also, there is a security
design in the protocol,

764
00:41:13,650 --> 00:41:15,800
or other components from inside.

765
00:41:15,800 --> 00:41:18,510
So it's based on the ICS vendors.

766
00:41:18,510 --> 00:41:21,360
They need to, they should be

767
00:41:21,360 --> 00:41:22,930
doing the security side

768
00:41:22,930 --> 00:41:24,800
that prevent the vulnerability happening

769
00:41:24,800 --> 00:41:27,203
in their components, or service,

770
00:41:28,040 --> 00:41:30,570
because other people,
power, water they use

771
00:41:30,570 --> 00:41:33,140
will be more secure.

772
00:41:33,140 --> 00:41:36,630
And then you can secure
your ICS and SCADA ecosystem

773
00:41:36,630 --> 00:41:38,730
more securely in the future.

774
00:41:38,730 --> 00:41:40,770
And often we said in Oracle,

775
00:41:40,770 --> 00:41:42,530
there was, they say our priority

776
00:41:42,530 --> 00:41:44,480
is keep the operation running.

777
00:41:44,480 --> 00:41:45,490
Yeah, we believe.

778
00:41:45,490 --> 00:41:48,230
But we more believe is the near future

779
00:41:48,230 --> 00:41:51,580
you should keep your
operation secured strongly,

780
00:41:51,580 --> 00:41:55,780
because attacker is more and more,

781
00:41:55,780 --> 00:41:57,680
they try to compromise

782
00:41:57,680 --> 00:42:00,750
more and more infrastructure environment.

783
00:42:00,750 --> 00:42:02,150
We cannot overlook it.

784
00:42:02,150 --> 00:42:04,073
We should take a serious (mumbles).

785
00:42:05,640 --> 00:42:08,870
So that is my presentation,
and thank you for listening,

786
00:42:08,870 --> 00:42:10,820
and if you do have any questions,

787
00:42:10,820 --> 00:42:13,370
I'd welcome, and coming in the future,

788
00:42:13,370 --> 00:42:16,350
we'll (mumbles) websites,
and we are welcome.

789
00:42:16,350 --> 00:42:18,650
And thank you for
listening, again, thank you.

