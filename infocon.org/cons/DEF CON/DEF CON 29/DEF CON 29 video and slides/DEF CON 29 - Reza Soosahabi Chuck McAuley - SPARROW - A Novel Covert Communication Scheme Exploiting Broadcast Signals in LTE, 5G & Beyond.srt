1
00:00:01,480 --> 00:00:03,400
- Hello, this is Reza Soosahabi.

2
00:00:03,400 --> 00:00:05,400
And with my colleague, Chuck McAuley,

3
00:00:05,400 --> 00:00:06,850
we would like to present

4
00:00:07,790 --> 00:00:10,030
our novel covert communication scheme

5
00:00:10,030 --> 00:00:14,220
that exploits broadcast
signals in LTE, 5G,

6
00:00:14,220 --> 00:00:16,093
and other technologies.

7
00:00:18,170 --> 00:00:19,400
I would like first,

8
00:00:19,400 --> 00:00:21,653
give a little introduction
about ourselves.

9
00:00:23,350 --> 00:00:25,230
The application research team lead

10
00:00:25,230 --> 00:00:27,660
at Keysight ATI Research Center.

11
00:00:27,660 --> 00:00:31,490
I do open research on 5G RAN security

12
00:00:31,490 --> 00:00:35,950
and develop algorithms to both
make or break awesome things.

13
00:00:35,950 --> 00:00:38,320
I come from math and signal
processing background.

14
00:00:38,320 --> 00:00:42,040
So I try to apply them to new problems

15
00:00:42,040 --> 00:00:43,100
as much as I can.

16
00:00:43,100 --> 00:00:46,640
And typically, I happen
to be at the right time

17
00:00:46,640 --> 00:00:48,130
and in the right place.

18
00:00:48,130 --> 00:00:49,810
So I have been breaking things

19
00:00:49,810 --> 00:00:52,700
and triggering rare events for fun.

20
00:00:52,700 --> 00:00:53,820
When I become a dad,

21
00:00:53,820 --> 00:00:57,940
and now I love spending
time with my toddler son.

22
00:00:57,940 --> 00:01:01,670
So I would like to turn
to my colleague, Chuck.

23
00:01:01,670 --> 00:01:02,990
Hi, I'm Chuck McAuley.

24
00:01:02,990 --> 00:01:05,260
I'm a principal security researcher

25
00:01:05,260 --> 00:01:07,743
at the ATI Research Center at Keysight.

26
00:01:08,620 --> 00:01:11,870
My hobbies include skiing
and breaking my Land Rover

27
00:01:11,870 --> 00:01:13,990
and fixing it pretty frequently.

28
00:01:13,990 --> 00:01:17,100
At Keysight, I'm involved
in new product initiatives

29
00:01:17,100 --> 00:01:21,310
and bring a long 20-year
cybersecurity background

30
00:01:21,310 --> 00:01:24,510
to everything Keysight
works on and touches.

31
00:01:24,510 --> 00:01:26,110
- I really would like to expand

32
00:01:27,000 --> 00:01:30,320
on the ambitions and the
thoughts behind this research

33
00:01:30,320 --> 00:01:31,710
to encourage future research.

34
00:01:31,710 --> 00:01:33,440
I believe this is as important

35
00:01:33,440 --> 00:01:35,483
as the research I'm presenting here.

36
00:01:36,850 --> 00:01:38,750
As my father always put it,

37
00:01:38,750 --> 00:01:40,950
talking about fishing is more important

38
00:01:40,950 --> 00:01:42,410
than talking about fish itself.

39
00:01:42,410 --> 00:01:44,930
So I had some past academic
research experience

40
00:01:44,930 --> 00:01:46,060
in wireless security.

41
00:01:46,060 --> 00:01:50,170
I published my work on IoT
security in IEEE in the past.

42
00:01:50,170 --> 00:01:53,800
So most of my work was
deep in theories and math.

43
00:01:53,800 --> 00:01:55,330
So I decided joining industry

44
00:01:55,330 --> 00:01:57,760
to explore more practical
problems out there.

45
00:01:57,760 --> 00:02:00,670
And I was offering R&D consulting services

46
00:02:00,670 --> 00:02:04,300
to mobile operators and was
a 5G system engineer a while

47
00:02:04,300 --> 00:02:05,900
before joining Keysight in 2018.

48
00:02:07,570 --> 00:02:09,250
Without being officially in InfoSec,

49
00:02:09,250 --> 00:02:11,620
I always had the tendency
to break things around

50
00:02:11,620 --> 00:02:13,010
for fun and curiosity.

51
00:02:13,010 --> 00:02:17,460
So my new job at ATI enabled
me to explore new ideas

52
00:02:17,460 --> 00:02:20,280
lesser known in wireless community,

53
00:02:20,280 --> 00:02:22,610
most notably protocol tunneling techniques

54
00:02:22,610 --> 00:02:25,060
that are used for data exfiltration.

55
00:02:25,060 --> 00:02:29,570
I was converging kind of my
past and present experiences,

56
00:02:29,570 --> 00:02:31,880
that one day in Fall 2019,

57
00:02:31,880 --> 00:02:35,530
our cool boss invited me to take a lead

58
00:02:35,530 --> 00:02:37,800
in a 5G security research project

59
00:02:37,800 --> 00:02:40,620
and got me a lab with a super expensive

60
00:02:40,620 --> 00:02:42,700
basement emulator in there.

61
00:02:42,700 --> 00:02:45,413
So with that level of
trust that he vested in me,

62
00:02:46,370 --> 00:02:50,340
I decided to go after a
0-day vulnerability discovery

63
00:02:50,340 --> 00:02:52,330
other than simulating existing ones.

64
00:02:52,330 --> 00:02:56,520
So I discovered this vulnerability
in 5G and LTE standards

65
00:02:56,520 --> 00:02:57,490
the following winter,

66
00:02:57,490 --> 00:03:00,193
and we successfully
disclosed it with GSMA.

67
00:03:01,330 --> 00:03:03,430
Things kind of went slow

68
00:03:03,430 --> 00:03:06,270
due to pandemic and my parenting leave,

69
00:03:06,270 --> 00:03:09,530
but after watching this interesting talk

70
00:03:09,530 --> 00:03:10,750
in last year DEFCON

71
00:03:10,750 --> 00:03:12,980
on eavesdropping satellite signals,

72
00:03:12,980 --> 00:03:14,530
I got really excited and pumped

73
00:03:15,470 --> 00:03:17,700
to put this work together

74
00:03:17,700 --> 00:03:20,260
and present it for DEFCON this year.

75
00:03:20,260 --> 00:03:22,370
I took a holistic approach of organizing

76
00:03:22,370 --> 00:03:25,150
the existing work in the
biggest possible picture,

77
00:03:25,150 --> 00:03:26,370
or a call it a box,

78
00:03:26,370 --> 00:03:28,690
and then discovered a hole in it.

79
00:03:28,690 --> 00:03:30,900
So I realized that covert communication

80
00:03:30,900 --> 00:03:35,900
is the biggest umbrella that
I can put all techniques

81
00:03:36,480 --> 00:03:38,940
for data exfiltration,
command and control,

82
00:03:38,940 --> 00:03:41,090
and other means of communications,

83
00:03:41,090 --> 00:03:42,700
unauthorized communications,

84
00:03:42,700 --> 00:03:44,110
all together in it.

85
00:03:44,110 --> 00:03:46,650
So it's usually regarded
as a potential threat

86
00:03:46,650 --> 00:03:50,550
and taken seriously in the
context of defense in depth.

87
00:03:50,550 --> 00:03:53,680
When I serve a literature
related to covert communication

88
00:03:53,680 --> 00:03:55,000
or topics related to it,

89
00:03:55,000 --> 00:03:57,650
I realize there are
two dominant viewpoints

90
00:03:57,650 --> 00:04:01,740
that are coming either from
hackers or wireless engineers.

91
00:04:01,740 --> 00:04:04,922
So people with hacker
mentality, like Chuck,

92
00:04:04,922 --> 00:04:07,930
(chuckles) have targeted
software protocol stack,

93
00:04:07,930 --> 00:04:08,880
most of the time.

94
00:04:08,880 --> 00:04:12,880
So like message tunneling
in L3-7 protocol,

95
00:04:12,880 --> 00:04:15,090
such as ICMP, DNS, and et cetera.

96
00:04:15,090 --> 00:04:16,640
A lot of cool techniques there.

97
00:04:17,500 --> 00:04:20,820
They have barely looked
below IP layer, in fact.

98
00:04:20,820 --> 00:04:22,280
As we know it,

99
00:04:22,280 --> 00:04:25,220
the security industry has
actively been monitoring

100
00:04:25,220 --> 00:04:27,130
the research in this area.

101
00:04:27,130 --> 00:04:30,230
So they track and block
malicious IP traffic

102
00:04:30,230 --> 00:04:34,560
using boxes, like IPSs,
IDSs, and lawful intercept.

103
00:04:34,560 --> 00:04:35,550
On the other hand,

104
00:04:35,550 --> 00:04:37,810
wireless engineers, such as myself,

105
00:04:37,810 --> 00:04:41,130
are really fascinated with
the beauty of radio systems,

106
00:04:41,130 --> 00:04:43,370
internals, and physical layer.

107
00:04:43,370 --> 00:04:44,890
So there is a huge literature

108
00:04:44,890 --> 00:04:46,690
on coding and modulation techniques

109
00:04:46,690 --> 00:04:50,300
to build optimal radios
for covert communication.

110
00:04:50,300 --> 00:04:53,410
These techniques usually
involve low-power communication

111
00:04:53,410 --> 00:04:56,200
and avoiding spectrum monitoring systems.

112
00:04:56,200 --> 00:04:59,340
So devices such as like
LoRaWAN, ham radios,

113
00:04:59,340 --> 00:05:02,730
and other low-power technologies
can be kind of retrofitted

114
00:05:02,730 --> 00:05:04,560
and used for covert communication,

115
00:05:04,560 --> 00:05:08,420
but their operational
range dramatically degrades

116
00:05:08,420 --> 00:05:12,373
when both sender and the
receivers are at low altitudes,

117
00:05:13,330 --> 00:05:14,660
where the signal, in fact,

118
00:05:14,660 --> 00:05:17,420
is blocked by buildings and foliage.

119
00:05:17,420 --> 00:05:20,380
Looking at the protocol stack,

120
00:05:20,380 --> 00:05:21,990
I thought of a new viewpoint,

121
00:05:21,990 --> 00:05:23,400
come up with a new viewpoint

122
00:05:23,400 --> 00:05:26,240
that combines both mentalities.

123
00:05:26,240 --> 00:05:28,110
So I come up with this question,

124
00:05:28,110 --> 00:05:31,980
how about exploiting the
MAC layer protocol weakness

125
00:05:31,980 --> 00:05:34,930
in existing wireless infrastructure?

126
00:05:34,930 --> 00:05:38,870
This was the big question
that inspired this work.

127
00:05:38,870 --> 00:05:42,180
It leads us to a new scheme
that can be more effective

128
00:05:42,180 --> 00:05:45,393
than existing ones in many aspects.

129
00:05:46,240 --> 00:05:47,073
At this point,

130
00:05:47,073 --> 00:05:49,620
I was almost certain that I can find

131
00:05:49,620 --> 00:05:53,020
some simple example quickly
in LTE and 5G standards

132
00:05:53,020 --> 00:05:55,530
because I was very familiar with them.

133
00:05:55,530 --> 00:05:59,780
So very related to the theme of DEFCON 29,

134
00:05:59,780 --> 00:06:03,650
I developed a framework to
exploit the unstoppable signals

135
00:06:03,650 --> 00:06:06,990
from cellular base stations
that are everywhere.

136
00:06:06,990 --> 00:06:10,830
So height is what makes
the RF signals unstoppable.

137
00:06:10,830 --> 00:06:13,760
And operators spend big money

138
00:06:13,760 --> 00:06:16,500
to mount antennas on tall com towers,

139
00:06:16,500 --> 00:06:19,020
or recently, some companies are trying

140
00:06:19,020 --> 00:06:21,740
to fly them on low-orbiting satellites.

141
00:06:21,740 --> 00:06:25,360
And this is all about getting
more and more coverage

142
00:06:25,360 --> 00:06:27,810
to as many users as possible.

143
00:06:27,810 --> 00:06:29,660
So let's look at this scenario

144
00:06:30,830 --> 00:06:32,550
that we're gonna be using moving forward.

145
00:06:32,550 --> 00:06:36,890
So Trudy has intruded a
secure air-gapped building

146
00:06:36,890 --> 00:06:39,083
with a program or device.

147
00:06:40,090 --> 00:06:43,610
So she would like to send a
message to her friend, Ricky,

148
00:06:43,610 --> 00:06:45,320
with a passive sniffing device

149
00:06:45,320 --> 00:06:48,023
sitting somewhere a few miles away,

150
00:06:49,020 --> 00:06:52,250
like these anime geeks that we have

151
00:06:52,250 --> 00:06:53,980
down below this frame.

152
00:06:53,980 --> 00:06:54,990
The picture.

153
00:06:54,990 --> 00:06:57,090
There is no radio signal path between them

154
00:06:57,090 --> 00:06:59,030
due to buildings and foliage.

155
00:06:59,030 --> 00:07:01,670
So however, both can
send and receive signal

156
00:07:01,670 --> 00:07:04,040
from a nearby cellular tower.

157
00:07:04,040 --> 00:07:06,700
So what if Trudy send a special,

158
00:07:06,700 --> 00:07:08,750
low-power (indistinct)
signal that triggers

159
00:07:08,750 --> 00:07:11,380
high-power broadcast
signals from the tower

160
00:07:11,380 --> 00:07:14,450
that then are received
and decoded by Ricky?

161
00:07:14,450 --> 00:07:15,860
So simple, right?

162
00:07:15,860 --> 00:07:17,960
So this will create a mutual

163
00:07:17,960 --> 00:07:21,310
covert communication channel
between Trudy and Ricky.

164
00:07:21,310 --> 00:07:25,020
And this is basically the
description of the technique

165
00:07:25,020 --> 00:07:28,200
that we are going to present here.

166
00:07:28,200 --> 00:07:30,740
Putting it simple and memorable for you,

167
00:07:30,740 --> 00:07:31,970
we are creating, in fact,

168
00:07:31,970 --> 00:07:34,260
a reflection that are
observable everywhere

169
00:07:34,260 --> 00:07:35,740
around the cellular tower.

170
00:07:35,740 --> 00:07:37,400
That's the key idea.

171
00:07:37,400 --> 00:07:39,130
So think of a Batman movie.

172
00:07:39,130 --> 00:07:41,130
They did not know where Batman is, right?

173
00:07:41,130 --> 00:07:44,380
So they were reflecting
this light beam off the sky

174
00:07:44,380 --> 00:07:46,610
to make it visible everywhere,

175
00:07:46,610 --> 00:07:48,113
so that he can see it.

176
00:07:50,840 --> 00:07:54,510
So I would like to go
and start talking about

177
00:07:54,510 --> 00:07:58,303
the example that I've discovered
in LTE and 5G standard.

178
00:08:00,770 --> 00:08:04,573
So let's take a look
at the protocol stack.

179
00:08:05,690 --> 00:08:07,123
What is a MAC layer?

180
00:08:08,660 --> 00:08:11,260
What does that mean, exploiting MAC layer?

181
00:08:11,260 --> 00:08:12,450
So in protocol stacks,

182
00:08:12,450 --> 00:08:14,890
some initialization or handshake steps

183
00:08:14,890 --> 00:08:16,710
always happen within each layer

184
00:08:16,710 --> 00:08:20,050
before it starts responding
to data from the upper layers.

185
00:08:20,050 --> 00:08:22,160
This is how protocol stack crank up,

186
00:08:22,160 --> 00:08:24,240
always from bottom to the top.

187
00:08:24,240 --> 00:08:27,910
So this work is related to
the Layer 2 in OSI model,

188
00:08:27,910 --> 00:08:30,000
often called the MAC layer.

189
00:08:30,000 --> 00:08:32,680
And from operating system perspective,

190
00:08:32,680 --> 00:08:37,370
this layer is whatever
layer that enables devices

191
00:08:37,370 --> 00:08:38,580
to send IP packets.

192
00:08:38,580 --> 00:08:40,630
So they don't care what's happens in it.

193
00:08:40,630 --> 00:08:42,350
They just look at it as an interface

194
00:08:42,350 --> 00:08:44,780
or gateway to send IP packets.

195
00:08:44,780 --> 00:08:48,390
In order to understand what
we are talking about today,

196
00:08:48,390 --> 00:08:50,920
it helps to understand
the analogous version

197
00:08:50,920 --> 00:08:52,640
of what happens when you connect

198
00:08:52,640 --> 00:08:55,760
a ethernet cable to a switch.

199
00:08:55,760 --> 00:08:57,770
Right when you plug in your cable,

200
00:08:57,770 --> 00:08:59,710
before you get a green
light on your switch,

201
00:08:59,710 --> 00:09:02,980
indicating your link speed and duplexing,

202
00:09:02,980 --> 00:09:06,130
a protocol negotiation
has already taken place.

203
00:09:06,130 --> 00:09:07,760
The radio signals have synced up

204
00:09:07,760 --> 00:09:09,740
and found a signal in both directions.

205
00:09:09,740 --> 00:09:11,010
So there are some messages,

206
00:09:11,010 --> 00:09:13,210
such as like a rate, auto-negotiation,

207
00:09:13,210 --> 00:09:15,100
that happened very early

208
00:09:15,100 --> 00:09:18,500
that people normally
do not care about them

209
00:09:18,500 --> 00:09:21,193
or observing them in
their packet captures.

210
00:09:22,250 --> 00:09:26,903
So let's now talk about the
LTE and 5G Big MAC layers.

211
00:09:28,000 --> 00:09:30,130
something more delicious, right?

212
00:09:30,130 --> 00:09:31,820
So this hairy-armed man

213
00:09:31,820 --> 00:09:34,660
is searching for signal
in the middle of nowhere.

214
00:09:34,660 --> 00:09:36,860
So when he finally gets a signal,

215
00:09:36,860 --> 00:09:40,510
before he's allowed to
send a selfie to Instagram

216
00:09:40,510 --> 00:09:41,970
about his situation,

217
00:09:41,970 --> 00:09:44,790
it tries to attach to a cell tower, right?

218
00:09:44,790 --> 00:09:47,710
And see if it allows to access it.

219
00:09:47,710 --> 00:09:50,103
That mostly involves
SIM card voodoo stuff.

220
00:09:51,220 --> 00:09:52,990
The apps running on his phone

221
00:09:52,990 --> 00:09:56,340
only care about sending IP
packets to the internet, right?

222
00:09:56,340 --> 00:10:00,800
So the apps do not care about
whether it is WiFi or LTE

223
00:10:00,800 --> 00:10:03,640
or what happens inside
these protocols neither.

224
00:10:03,640 --> 00:10:05,410
So they see all this voodoo stuff

225
00:10:05,410 --> 00:10:08,370
happening below IP layer
as a big MAC layer.

226
00:10:08,370 --> 00:10:10,690
That's why they call it the Big MAC.

227
00:10:10,690 --> 00:10:12,810
They do not care what's in it.

228
00:10:12,810 --> 00:10:16,600
They just enjoy using
it or what it delivers.

229
00:10:16,600 --> 00:10:20,090
The commercial wireless
infrastructure has many components,

230
00:10:20,090 --> 00:10:24,430
such as cell towers and a bunch
of coordinate work servers

231
00:10:24,430 --> 00:10:27,970
whose job is managing millions
of users across a wide area.

232
00:10:27,970 --> 00:10:29,690
This Big MAC layer that
we're talking about,

233
00:10:29,690 --> 00:10:34,690
in cellular standards, has
similar sublayer protocols in it,

234
00:10:34,940 --> 00:10:36,920
like a Big MAC, right?

235
00:10:36,920 --> 00:10:39,250
They define the interaction of user device

236
00:10:39,250 --> 00:10:41,930
with various components
of the operator's network,

237
00:10:41,930 --> 00:10:44,150
but not the internet.

238
00:10:44,150 --> 00:10:47,220
So this Big MAC is called
control plane as well

239
00:10:47,220 --> 00:10:50,400
Or sometimes, the people
who built this network,

240
00:10:50,400 --> 00:10:51,970
they call them Layer 2 and 3.

241
00:10:51,970 --> 00:10:54,570
In the context of LTE
and 5G, in particular,

242
00:10:54,570 --> 00:10:55,780
related to our talk today,

243
00:10:55,780 --> 00:10:58,510
these standards are made
by a global organization

244
00:10:58,510 --> 00:11:01,080
called 3GPP, for your information.

245
00:11:01,080 --> 00:11:03,740
It uses a protocol known as the RRC,

246
00:11:03,740 --> 00:11:05,053
or Radio Resource Control,

247
00:11:05,900 --> 00:11:07,500
which is an access protocol

248
00:11:07,500 --> 00:11:10,310
that is the toppest layer of this Big MAC,

249
00:11:10,310 --> 00:11:12,690
or we can call it the
bun layer (chuckles),

250
00:11:12,690 --> 00:11:14,935
that works more like a RADIUS,

251
00:11:14,935 --> 00:11:18,030
or messages in it, looks more like SNMP.

252
00:11:18,030 --> 00:11:20,603
But this is not what
this talk about today.

253
00:11:22,100 --> 00:11:24,120
This talk today about is

254
00:11:24,120 --> 00:11:27,750
the link establishment for RRC protocol,

255
00:11:27,750 --> 00:11:31,610
the very initial MAC layer handshake

256
00:11:31,610 --> 00:11:34,330
that happens very early on

257
00:11:34,330 --> 00:11:37,270
before establishing an RRC connection.

258
00:11:37,270 --> 00:11:39,140
This is what this call is about.

259
00:11:39,140 --> 00:11:40,900
Think of it like a handshake

260
00:11:40,900 --> 00:11:42,780
between a phone and a cell tower

261
00:11:42,780 --> 00:11:45,150
before all other handshakes.

262
00:11:45,150 --> 00:11:47,480
And it has some interesting features to it

263
00:11:47,480 --> 00:11:49,170
that we are going to explore.

264
00:11:49,170 --> 00:11:50,230
And in fact,

265
00:11:50,230 --> 00:11:52,680
it does not travel to the
operator's core network,

266
00:11:52,680 --> 00:11:55,600
making it suitable for
covert communication.

267
00:11:55,600 --> 00:11:58,810
Some simple terminology notes in here.

268
00:11:58,810 --> 00:12:01,840
So essentially, in the
context of LTE and 5G,

269
00:12:01,840 --> 00:12:06,840
we call all the devices that
interact with the cell towers

270
00:12:07,370 --> 00:12:09,070
UE, or user equipment,

271
00:12:09,070 --> 00:12:11,150
whether it has a SIM card
or doesn't have a SIM card.

272
00:12:11,150 --> 00:12:12,800
Doesn't matter.

273
00:12:12,800 --> 00:12:15,410
And there is another more
important terminology note

274
00:12:15,410 --> 00:12:16,860
that I'm going to talk about here,

275
00:12:16,860 --> 00:12:19,330
is that the story of a NodeB.

276
00:12:19,330 --> 00:12:20,210
So in LTE,

277
00:12:20,210 --> 00:12:22,980
they call these cell towers
or base stations eNobeB.

278
00:12:22,980 --> 00:12:25,856
In 5G, they start calling them gNodeB.

279
00:12:25,856 --> 00:12:29,020
And actually, when I was
talking about 5G with Chuck,

280
00:12:29,020 --> 00:12:31,310
Chuck said that, "What
happened with the fNodeB?"

281
00:12:31,310 --> 00:12:34,020
And I said, "Interesting.
Nobody uses fNodeB."

282
00:12:34,020 --> 00:12:36,770
So I decided to use fNodeB here

283
00:12:36,770 --> 00:12:39,010
throughout the following presentation

284
00:12:39,010 --> 00:12:41,670
to refer to both LTE and 5G.

285
00:12:41,670 --> 00:12:44,470
So random access procedure
is a common functionality

286
00:12:44,470 --> 00:12:45,530
in wireless MAC layers.

287
00:12:45,530 --> 00:12:49,030
So there is a small set
of signals, called RACH,

288
00:12:49,030 --> 00:12:50,430
that are reserved for the UEs

289
00:12:50,430 --> 00:12:53,400
connecting to an fNodeB
for the first time.

290
00:12:53,400 --> 00:12:54,233
See? fNodeB.

291
00:12:55,210 --> 00:12:57,850
All the fNodeBs respond to the signals

292
00:12:57,850 --> 00:12:59,920
regardless of device type or identity,

293
00:12:59,920 --> 00:13:02,100
even if it doesn't have a SIM card.

294
00:13:02,100 --> 00:13:05,510
The diagram here shows the
normal RRC connection procedure.

295
00:13:05,510 --> 00:13:07,610
There are four Plain Text messages

296
00:13:07,610 --> 00:13:09,790
exchanged between the UE and the fNodeB

297
00:13:09,790 --> 00:13:12,350
before the UE creates
an authenticated session

298
00:13:12,350 --> 00:13:14,280
with the core network.

299
00:13:14,280 --> 00:13:16,190
These messages serve similar purpose

300
00:13:16,190 --> 00:13:18,470
to the ethernet
auto-negotiation handshake,

301
00:13:18,470 --> 00:13:20,613
which is setting up synchronization.

302
00:13:21,840 --> 00:13:24,440
First, UE randomly
sends a scrambled signal

303
00:13:24,440 --> 00:13:26,460
from the RACH set,

304
00:13:26,460 --> 00:13:29,370
and then fNodeB responds with
more (indistinct) parameters

305
00:13:29,370 --> 00:13:33,433
that helps the UE to fine-tune
it's framing synchronization.

306
00:13:34,310 --> 00:13:36,270
But these are not the important ones.

307
00:13:36,270 --> 00:13:39,550
The important ones are the Message3 and 4.

308
00:13:39,550 --> 00:13:43,380
They enable the fNodeB to
resolve resource contentions

309
00:13:43,380 --> 00:13:46,810
between UEs that are
simultaneously attempting RACH.

310
00:13:46,810 --> 00:13:48,230
Per standard,

311
00:13:48,230 --> 00:13:51,550
the UE should send a 48-bit string

312
00:13:51,550 --> 00:13:55,680
that contains a 40-bit random ID in it,

313
00:13:55,680 --> 00:13:59,283
then wait for the fNodeB
to broadcast Message4.

314
00:14:00,400 --> 00:14:02,640
This string is called CRI,

315
00:14:02,640 --> 00:14:04,950
or Contention Resolution Identity.

316
00:14:04,950 --> 00:14:08,210
If the fNodeB replies with
the same string in Message4,

317
00:14:08,210 --> 00:14:11,340
it means that the UE can
proceed with the RRC connection.

318
00:14:11,340 --> 00:14:13,800
Otherwise, it knows that someone else

319
00:14:13,800 --> 00:14:15,130
is supposed to go ahead

320
00:14:15,130 --> 00:14:20,020
and this one has to stay and retry later.

321
00:14:20,020 --> 00:14:22,570
I think probably by now you've guessed

322
00:14:22,570 --> 00:14:24,910
what's wrong with this broadcast ping-pong

323
00:14:24,910 --> 00:14:26,890
within Message3 and Message4.

324
00:14:26,890 --> 00:14:28,470
So coming to the Trudy and Ricky's

325
00:14:28,470 --> 00:14:29,870
covert communication scenario,

326
00:14:29,870 --> 00:14:33,560
Trudy and Ricky can have prior
agreement under target fNodeB

327
00:14:33,560 --> 00:14:36,320
and Trudy's RACH signal selection.

328
00:14:36,320 --> 00:14:38,570
Then Ricky is passively scanning

329
00:14:38,570 --> 00:14:41,550
and decoding Message2
and 4 from the fNodeB

330
00:14:41,550 --> 00:14:43,870
using it's low-power radio.

331
00:14:43,870 --> 00:14:47,310
Instead of including random
40-bit identity in CRI,

332
00:14:47,310 --> 00:14:49,660
Trudy can encode a short message in it

333
00:14:49,660 --> 00:14:51,803
and sending it up in Message3.

334
00:14:53,470 --> 00:14:55,990
This message can include a signature byte,

335
00:14:55,990 --> 00:14:58,120
indicating it is made by her,

336
00:14:58,120 --> 00:15:00,860
not by other users in this cell.

337
00:15:00,860 --> 00:15:03,320
Then Ricky can pick up and
decode the same message

338
00:15:03,320 --> 00:15:05,920
from the fNodeB's message for broadcast

339
00:15:05,920 --> 00:15:07,503
that happens immediately after.

340
00:15:08,620 --> 00:15:10,020
Simple, right?

341
00:15:10,020 --> 00:15:12,220
This is a kind of like an illustration

342
00:15:12,220 --> 00:15:13,610
for a unidirectional channel,

343
00:15:13,610 --> 00:15:16,810
but essentially, Ricky can
repeat the same procedure

344
00:15:16,810 --> 00:15:19,460
to establish a reverse link to Trudy

345
00:15:19,460 --> 00:15:22,180
to kind of send information,
like acknowledgement.

346
00:15:22,180 --> 00:15:24,220
Looking at the history of this procedure,

347
00:15:24,220 --> 00:15:26,900
we believe that this
vulnerability may exist

348
00:15:26,900 --> 00:15:29,313
in other wireless MAC layers as well.

349
00:15:30,280 --> 00:15:33,290
This particular example
has been in LTE and 5G

350
00:15:33,290 --> 00:15:34,370
for over a decade.

351
00:15:34,370 --> 00:15:35,870
But no worries.

352
00:15:35,870 --> 00:15:38,790
I will share the remediation
before this talk ends.

353
00:15:38,790 --> 00:15:42,720
So exploiting, a little
bit expanding on how,

354
00:15:42,720 --> 00:15:45,300
what they can gain by using SPARROW.

355
00:15:45,300 --> 00:15:48,240
A SPARROW UE can break long messages

356
00:15:48,240 --> 00:15:51,480
into chunks of 40-bit messages

357
00:15:51,480 --> 00:15:53,810
and send them in multiple RACH attempts.

358
00:15:53,810 --> 00:15:56,240
Successive RACH attempts
do not have much impact

359
00:15:56,240 --> 00:15:58,860
on other users in the cell.

360
00:15:58,860 --> 00:16:00,690
And there is a backoff also timer

361
00:16:00,690 --> 00:16:02,690
that's built into the standard document,

362
00:16:02,690 --> 00:16:06,183
as you can see the snapshot right below,

363
00:16:07,310 --> 00:16:10,750
that the UEs have to basically
pick up a random value

364
00:16:10,750 --> 00:16:12,410
as a backoff timer.

365
00:16:12,410 --> 00:16:14,719
But it's all been left
to the user discretion,

366
00:16:14,719 --> 00:16:17,090
and the eNodeBs or fNodeBs

367
00:16:17,090 --> 00:16:19,440
do not have any way to enforce it.

368
00:16:19,440 --> 00:16:22,660
So picking a backoff time,
like 10 milliseconds,

369
00:16:22,660 --> 00:16:24,860
usually the Message1 to 4 exchange

370
00:16:24,860 --> 00:16:27,090
takes on average of like 30 milliseconds.

371
00:16:27,090 --> 00:16:29,010
So in total,

372
00:16:29,010 --> 00:16:34,010
this can give Trudy a one
kilobit-ps throughput link

373
00:16:34,490 --> 00:16:37,570
to reach messages to Ricky.

374
00:16:37,570 --> 00:16:39,540
Very limited, but it's still comparable

375
00:16:39,540 --> 00:16:41,863
to other low-power
technologies, like LoRa.

376
00:16:42,840 --> 00:16:45,260
Outdoor LTE and 5G base stations

377
00:16:45,260 --> 00:16:47,370
operating at lower frequency bands,

378
00:16:47,370 --> 00:16:49,540
particularly below two
GHz are more suitable

379
00:16:49,540 --> 00:16:51,540
for a SPARROW technique,

380
00:16:51,540 --> 00:16:54,950
mainly because their signal
can reach up to five miles

381
00:16:54,950 --> 00:16:57,770
and also they can reach indoors very well.

382
00:16:57,770 --> 00:16:59,930
5G New Radio,

383
00:16:59,930 --> 00:17:01,960
and you'll reduce some new frequency bands

384
00:17:01,960 --> 00:17:03,810
above six gigahertz.

385
00:17:03,810 --> 00:17:06,870
That they involve lots of RF voodoo stuff,

386
00:17:06,870 --> 00:17:08,303
like beamforming,

387
00:17:09,160 --> 00:17:10,960
that making it difficult for Ricky

388
00:17:10,960 --> 00:17:12,600
and his fellows down below

389
00:17:12,600 --> 00:17:15,230
to decode and broadcast his signals.

390
00:17:15,230 --> 00:17:18,780
There is also a new
satellite-based 5G standard,

391
00:17:18,780 --> 00:17:22,070
called 5G-NTN, which is in development.

392
00:17:22,070 --> 00:17:25,370
That might actually give the SPARROW UEs

393
00:17:25,370 --> 00:17:26,923
10 times more mileage.

394
00:17:27,840 --> 00:17:29,690
Hopefully, we can get our remediation

395
00:17:29,690 --> 00:17:32,760
built as a secure RACH
option for that standard.

396
00:17:32,760 --> 00:17:37,670
Also, benefits of using the
SPARROW are really great.

397
00:17:37,670 --> 00:17:41,210
So you can get really
super stealthy with it.

398
00:17:41,210 --> 00:17:42,430
No network footprint

399
00:17:42,430 --> 00:17:46,110
because messages are local to the fNodeB,

400
00:17:46,110 --> 00:17:50,340
and nobody is going to
log the MAC layer messages

401
00:17:50,340 --> 00:17:51,840
at the edge of their network.

402
00:17:51,840 --> 00:17:53,500
Also, the SPARROW UE activity

403
00:17:53,500 --> 00:17:56,070
is indistinguishable from the other UEs.

404
00:17:56,070 --> 00:18:00,130
So no radio spectrum footprint
that's going to be there

405
00:18:00,130 --> 00:18:03,931
for external passive monitoring systems

406
00:18:03,931 --> 00:18:06,740
to geolocate the transmitter.

407
00:18:06,740 --> 00:18:09,190
These are the reason I call them SPARROWS.

408
00:18:09,190 --> 00:18:11,630
So no need for expensive equipment, right?

409
00:18:11,630 --> 00:18:15,290
So hundred bucks low-power
SDRs can do the job.

410
00:18:15,290 --> 00:18:16,630
They can also live off

411
00:18:16,630 --> 00:18:19,480
rechargeable batteries or solar power.

412
00:18:19,480 --> 00:18:21,240
No need for high-gain antennas

413
00:18:21,240 --> 00:18:23,130
since they get their rebroadcast power

414
00:18:23,130 --> 00:18:24,920
from the fNodeBs, right?

415
00:18:24,920 --> 00:18:29,370
I will also show some more
range expansion techniques

416
00:18:29,370 --> 00:18:30,700
further in the presentation.

417
00:18:30,700 --> 00:18:34,630
So they can get higher
range per RF wattage

418
00:18:34,630 --> 00:18:36,380
in a cluttered environment.

419
00:18:36,380 --> 00:18:37,270
And that's a very key point,

420
00:18:37,270 --> 00:18:40,350
compared to the other
complex commercial radios,

421
00:18:40,350 --> 00:18:41,853
like walkie-talkie or LoRa.

422
00:18:42,860 --> 00:18:44,440
Who cares about the SPARROWs?

423
00:18:44,440 --> 00:18:45,850
I mean, really, there are...

424
00:18:45,850 --> 00:18:48,700
Sparrow birds are everywhere.
They're among us, right?

425
00:18:48,700 --> 00:18:49,970
Nobody cares about them.

426
00:18:49,970 --> 00:18:51,660
I know, historically,

427
00:18:51,660 --> 00:18:53,360
sometimes they cared about them for crops,

428
00:18:53,360 --> 00:18:54,370
but nobody cares about them.

429
00:18:54,370 --> 00:18:56,210
And this is the same with the SPARROW

430
00:18:56,210 --> 00:18:59,340
with regards to cellular operators

431
00:18:59,340 --> 00:19:01,520
because they do not see
any immediate impact

432
00:19:01,520 --> 00:19:03,700
on their networks, so
they do not care about it.

433
00:19:03,700 --> 00:19:04,710
And as a matter of fact,

434
00:19:04,710 --> 00:19:07,440
any temporary solution
to block the SPARROWs

435
00:19:07,440 --> 00:19:10,960
kind of lead to some performance
degradation to real users.

436
00:19:10,960 --> 00:19:12,740
And we will talk about that.

437
00:19:12,740 --> 00:19:15,080
But the remediations
that we have developed

438
00:19:16,430 --> 00:19:19,040
has to go be implemented
at the standard level.

439
00:19:19,040 --> 00:19:22,493
So so far, SPARROWs are unstoppable.

440
00:19:23,605 --> 00:19:25,400
(keyboard clicking)

441
00:19:25,400 --> 00:19:27,110
So here, I'm going to actually

442
00:19:28,320 --> 00:19:31,160
turn the presentation
to my colleague, Chuck,

443
00:19:31,160 --> 00:19:34,780
to talk about our demo, and show the demo,

444
00:19:34,780 --> 00:19:38,760
and also talk more about
the use cases for SPARROW.

445
00:19:38,760 --> 00:19:39,593
Chuck?

446
00:19:39,593 --> 00:19:40,533
- Thank you, Reza.

447
00:19:42,010 --> 00:19:44,490
So one of the benefits of working

448
00:19:44,490 --> 00:19:45,960
at an organization like Keysight

449
00:19:45,960 --> 00:19:48,933
is we get to play with
a lot of cool tools.

450
00:19:49,780 --> 00:19:52,300
Even though we were in
the middle of a pandemic,

451
00:19:52,300 --> 00:19:55,890
we were able to work
with a lot of our peers

452
00:19:55,890 --> 00:19:57,480
in different parts of the world.

453
00:19:57,480 --> 00:20:00,380
And we were able to convince the GSMA

454
00:20:00,380 --> 00:20:04,330
that we'd actually found a design flaw

455
00:20:04,330 --> 00:20:07,540
in the RACH contention
messaging structure.

456
00:20:07,540 --> 00:20:09,820
So what you see here is our demo lab

457
00:20:09,820 --> 00:20:13,340
that got set up for us
by our peers in Italy.

458
00:20:13,340 --> 00:20:16,170
At the bottom, you see
something that we call a UXM.

459
00:20:16,170 --> 00:20:20,480
Now this device allows us to
emulate a eNodeB, a gNodeB,

460
00:20:20,480 --> 00:20:22,730
and hopefully, in the
future, even an fNodeB.

461
00:20:24,460 --> 00:20:26,600
And what you can do with this device

462
00:20:26,600 --> 00:20:30,320
is emulate a cell phone tower effectively.

463
00:20:30,320 --> 00:20:32,034
And at the top,

464
00:20:32,034 --> 00:20:35,470
(clears throat) you see
what we call UE SIM,

465
00:20:35,470 --> 00:20:39,010
which simulates whatever's gonna
connect to a mobile network

466
00:20:39,010 --> 00:20:41,650
and allows you to play with
the messaging structure

467
00:20:41,650 --> 00:20:45,773
and validate a fNodeB or a
gNodeB or a eNodeB, right?

468
00:20:46,750 --> 00:20:47,790
But what you can do

469
00:20:47,790 --> 00:20:50,690
is if you take both of these
two test validation systems,

470
00:20:50,690 --> 00:20:53,060
you can put 'em together
and build, effectively,

471
00:20:53,060 --> 00:20:57,973
a cell network in isolation
and test out some theories.

472
00:20:59,580 --> 00:21:00,760
In the lower right-hand corner,

473
00:21:00,760 --> 00:21:03,190
you can see sort of a screenshot here

474
00:21:03,190 --> 00:21:07,620
of our test script that enables our UXM

475
00:21:07,620 --> 00:21:10,160
to pretend to be a eNodeB

476
00:21:10,160 --> 00:21:12,560
doing the rash contention messages.

477
00:21:12,560 --> 00:21:15,900
And in our next slide,

478
00:21:15,900 --> 00:21:16,830
well, not really a slide.

479
00:21:16,830 --> 00:21:19,090
In the next video that's
coming up right here,

480
00:21:19,090 --> 00:21:22,651
we're gonna introduce
our friend, Befekadu.

481
00:21:22,651 --> 00:21:24,480
Befekadu works out of Italy,

482
00:21:24,480 --> 00:21:29,480
and he has put together a quick video

483
00:21:29,750 --> 00:21:32,010
demonstrating SPARROW working for us

484
00:21:32,010 --> 00:21:34,040
that we then presented to the GSMA.

485
00:21:34,040 --> 00:21:35,740
- My name is Befekadu Mengesha.

486
00:21:35,740 --> 00:21:39,620
I'm an application engineer
at Keysight Technologies.

487
00:21:39,620 --> 00:21:40,453
In this video,

488
00:21:40,453 --> 00:21:43,650
I am going to demonstrate
the proof of concept

489
00:21:43,650 --> 00:21:46,180
for the SPARROW Project.

490
00:21:46,180 --> 00:21:49,230
With this (indistinct)
graphical user interface,

491
00:21:49,230 --> 00:21:51,987
we've configured a UE on a LSU,

492
00:21:51,987 --> 00:21:56,987
and that's with an IP address
of 10.40.88.70 as a TX.

493
00:21:58,400 --> 00:22:00,390
Therefore, we set the mode as a TX

494
00:22:00,390 --> 00:22:04,060
and the random access parameter to eight.

495
00:22:04,060 --> 00:22:06,770
And the Plain Text message

496
00:22:06,770 --> 00:22:09,390
to be sniffed by the receiver UE

497
00:22:09,390 --> 00:22:12,357
is set to, "Welcome to the DEF CON!"

498
00:22:13,320 --> 00:22:14,450
Similarly,

499
00:22:14,450 --> 00:22:19,250
we have set the UE-B on LSU-B

500
00:22:20,910 --> 00:22:25,637
with an IP address of
10.14.88.157 as an RX.

501
00:22:28,090 --> 00:22:31,220
Therefore, we set the mode to RX

502
00:22:31,220 --> 00:22:35,093
and the random access
parameter ID to eight.

503
00:22:36,920 --> 00:22:38,640
On the current (indistinct) side the fare,

504
00:22:38,640 --> 00:22:43,640
the PRT script activated the
5G in a standard load cell

505
00:22:43,840 --> 00:22:47,090
with the synchronization signal block

506
00:22:47,090 --> 00:22:49,910
is broadcasted via the XM platform

507
00:22:49,910 --> 00:22:52,763
with a periodicity of 20 millisecond.

508
00:22:53,610 --> 00:22:55,890
If the master information blocks

509
00:22:55,890 --> 00:23:00,550
is decoded with success on both UE,

510
00:23:00,550 --> 00:23:03,740
two of the cells will get sync.

511
00:23:03,740 --> 00:23:05,260
And in service,

512
00:23:05,260 --> 00:23:09,803
if the System Information
Block Type 1 is decoded.

513
00:23:10,650 --> 00:23:14,650
Since both UE are in service,

514
00:23:14,650 --> 00:23:16,123
it's in sync and idle,

515
00:23:16,960 --> 00:23:21,960
we can connect the GUI to
the Layer 3 test manager

516
00:23:23,710 --> 00:23:27,073
and verify if the SIM is decoded.

517
00:23:28,440 --> 00:23:30,963
Then the cell should get in service.

518
00:23:36,960 --> 00:23:40,450
We can run the scenario
from the RX side first now

519
00:23:42,440 --> 00:23:44,823
and from the TX side.

520
00:23:46,030 --> 00:23:48,570
It seems that the transmitted message

521
00:23:48,570 --> 00:23:52,660
is with success from the TX side.

522
00:23:52,660 --> 00:23:56,550
And let's verify if the receiver UE side

523
00:23:56,550 --> 00:23:59,620
decoded the message successfully.

524
00:23:59,620 --> 00:24:01,713
So from the scenario logger,

525
00:24:04,410 --> 00:24:08,847
here we have decoded the message,

526
00:24:08,847 --> 00:24:11,667
"Welcome to the DEF Conference!"

527
00:24:20,090 --> 00:24:21,580
From the TX side,

528
00:24:21,580 --> 00:24:25,380
it can be verified that the Message2

529
00:24:25,380 --> 00:24:28,620
is decoded with the valid RAR.

530
00:24:28,620 --> 00:24:32,453
Also, on the RX side, we can check.

531
00:24:36,530 --> 00:24:40,680
The Message2 is decoded with the valid RAR

532
00:24:40,680 --> 00:24:43,453
as a TX UE.

533
00:24:44,620 --> 00:24:45,460
If this is the case,

534
00:24:45,460 --> 00:24:50,460
we can also verify the Message3 is decoded

535
00:24:50,944 --> 00:24:55,944
with success first from the TX side.

536
00:24:58,310 --> 00:25:00,530
So here, we can confirm

537
00:25:00,530 --> 00:25:03,370
that the UE contention resolution IDs

538
00:25:03,370 --> 00:25:07,020
decoded with success on the TX side.

539
00:25:07,020 --> 00:25:09,892
And let's see also on the RX side.

540
00:25:09,892 --> 00:25:14,892
So the RX side Message3 is
also decoded with success.

541
00:25:15,760 --> 00:25:20,760
So since we have
implemented a CRC decoding,

542
00:25:22,350 --> 00:25:25,210
if the method is decoded,

543
00:25:25,210 --> 00:25:30,210
we can see the message on the RX side,

544
00:25:30,370 --> 00:25:34,727
So if you can see, the message
is decoded successfully,

545
00:25:34,727 --> 00:25:36,417
"Welcome to the DEF CON!"

546
00:25:39,400 --> 00:25:42,500
- So there you saw Befe showing us

547
00:25:42,500 --> 00:25:45,920
how you can bounce a
message between two UEs

548
00:25:45,920 --> 00:25:48,233
across a cell phone tower,

549
00:25:49,270 --> 00:25:51,050
which is pretty wild.

550
00:25:51,050 --> 00:25:53,890
So let's talk about what you could do

551
00:25:53,890 --> 00:25:55,763
with this sort of technique.

552
00:25:57,510 --> 00:26:00,260
A lot of the applications
are pretty obvious

553
00:26:00,260 --> 00:26:01,550
from the get-go,

554
00:26:01,550 --> 00:26:04,890
but one that we thought was
pretty neat to highlight

555
00:26:04,890 --> 00:26:07,740
would be the ability to exfiltrate data

556
00:26:07,740 --> 00:26:09,790
out of a secure site.

557
00:26:09,790 --> 00:26:10,960
There are cell phone towers

558
00:26:10,960 --> 00:26:14,060
that are doing these RACH
procedures all the time.

559
00:26:14,060 --> 00:26:16,060
So it'd be very hard for you to notice

560
00:26:16,060 --> 00:26:19,750
an additional RACH procedure
occurring with a cell site

561
00:26:19,750 --> 00:26:22,573
from a specific UE at a specific location.

562
00:26:24,220 --> 00:26:26,450
When you start thinking
about the application layer

563
00:26:26,450 --> 00:26:28,770
and digging into data in there,

564
00:26:28,770 --> 00:26:30,370
you can either have a service provider

565
00:26:30,370 --> 00:26:34,350
or a government entity intercept
that communication layer

566
00:26:34,350 --> 00:26:37,110
and prevent it in
multiple different paths.

567
00:26:37,110 --> 00:26:39,080
But at this low layer on the MAC layer,

568
00:26:39,080 --> 00:26:42,520
this is happening before
any of those things occur.

569
00:26:42,520 --> 00:26:45,560
You could also this to easily
trigger events remotely,

570
00:26:45,560 --> 00:26:47,790
like opening a door or, more drastically,

571
00:26:47,790 --> 00:26:49,423
triggering a bomb to occur.

572
00:26:50,335 --> 00:26:52,900
(clears throat) And
you can be well within,

573
00:26:52,900 --> 00:26:56,010
say, five to 10 miles away from the site

574
00:26:56,010 --> 00:26:57,670
in the event that you're
triggering, right?

575
00:26:57,670 --> 00:27:00,360
So that's a long distance to cover

576
00:27:00,360 --> 00:27:03,003
and figure out the source of the message.

577
00:27:03,980 --> 00:27:05,030
And lastly,

578
00:27:05,030 --> 00:27:07,380
this could also be part
of a supply chain attack,

579
00:27:07,380 --> 00:27:10,000
where you actually bake in some kind of

580
00:27:10,000 --> 00:27:13,170
remote control process into the device

581
00:27:13,170 --> 00:27:16,193
and then access it at a later date, right?

582
00:27:17,300 --> 00:27:19,810
Which is also a big risk these days

583
00:27:19,810 --> 00:27:24,743
with our vast and multiple-country
supply chains that occur.

584
00:27:26,170 --> 00:27:28,570
But there's also good
applications for this

585
00:27:28,570 --> 00:27:30,540
that are used for good.

586
00:27:30,540 --> 00:27:35,090
If a tower loses its uplink to
the rest of the data network,

587
00:27:35,090 --> 00:27:38,670
it still can provide some use.

588
00:27:38,670 --> 00:27:39,503
Whereas before,

589
00:27:39,503 --> 00:27:41,860
it might've been just a
thing that just sits there

590
00:27:41,860 --> 00:27:45,070
and waits until the
connectivity's re-established.

591
00:27:45,070 --> 00:27:47,420
So this could be used
for broadcast messages

592
00:27:47,420 --> 00:27:50,330
in case of disaster or emergency.

593
00:27:50,330 --> 00:27:51,990
It could also be used to connect

594
00:27:52,860 --> 00:27:55,840
emergency personnel
themselves to each other

595
00:27:55,840 --> 00:27:57,460
and tell 'em where help is needed

596
00:27:57,460 --> 00:27:58,920
or what needs to be done,

597
00:27:58,920 --> 00:28:03,590
which we think is a really
neat application of this,

598
00:28:03,590 --> 00:28:04,423
in general.

599
00:28:06,510 --> 00:28:08,190
And then lastly,

600
00:28:08,190 --> 00:28:09,890
we think that there's
a lot of opportunities

601
00:28:09,890 --> 00:28:11,610
for mischief here.

602
00:28:11,610 --> 00:28:13,360
Instead of using LoRaWAN

603
00:28:13,360 --> 00:28:18,360
or other IoT-based, low-bitrate protocols,

604
00:28:18,590 --> 00:28:21,520
you could use someone
else's cell phone tower

605
00:28:21,520 --> 00:28:25,700
to provide the overlay
network for your IoT devices,

606
00:28:25,700 --> 00:28:27,160
and then simply have one device

607
00:28:27,160 --> 00:28:28,430
that picks up all the signals

608
00:28:28,430 --> 00:28:32,120
and transmits them on an
internet uplink somewhere.

609
00:28:32,120 --> 00:28:36,020
You could also use this to
help improve a pager network.

610
00:28:36,020 --> 00:28:38,330
This device here, this doesn't use it.

611
00:28:38,330 --> 00:28:40,530
This uses LoRaWAN right now.

612
00:28:40,530 --> 00:28:42,180
But it's made by Natural (indistinct),

613
00:28:42,180 --> 00:28:45,520
and he uses it to pass
messages back between

614
00:28:45,520 --> 00:28:48,840
different devices at Shmoo and DEFCON.

615
00:28:48,840 --> 00:28:51,540
You could easily hijack
a cell phone tower,

616
00:28:51,540 --> 00:28:55,210
and then instead of having
a mile or two of distance

617
00:28:55,210 --> 00:28:56,630
or a giant ugly antenna,

618
00:28:56,630 --> 00:28:58,220
you could just be passing messages

619
00:28:58,220 --> 00:29:00,663
with something a lot
smaller and a lot neater.

620
00:29:03,810 --> 00:29:06,200
And now I'm gonna bounce
it back over to Reza,

621
00:29:06,200 --> 00:29:09,920
who's gonna talk about
increasing the signal boost

622
00:29:09,920 --> 00:29:11,370
and some remediation.

623
00:29:11,370 --> 00:29:13,460
- So in the case of LTE and 5G,

624
00:29:13,460 --> 00:29:17,503
the SPARROW UEs can exploit
kind of like multiple fNodeBs,

625
00:29:19,110 --> 00:29:21,820
except the very rural areas.

626
00:29:21,820 --> 00:29:24,170
It is common for a SPARROW to have access

627
00:29:24,170 --> 00:29:28,420
to multiple LTE or 5G carrier signals

628
00:29:28,420 --> 00:29:32,710
in any area within range
of a few miles apart

629
00:29:32,710 --> 00:29:36,210
when the UEs use are not that
much far from each other.

630
00:29:36,210 --> 00:29:40,860
So this can help them
to essentially establish

631
00:29:40,860 --> 00:29:42,820
parallel communication channels

632
00:29:42,820 --> 00:29:46,440
and enhance their throughput
above like one kbps

633
00:29:46,440 --> 00:29:48,100
that we estimated.

634
00:29:48,100 --> 00:29:52,930
Another cooler way actually
for us to use multiple cells

635
00:29:52,930 --> 00:29:55,720
is really to expand the range

636
00:29:55,720 --> 00:30:00,400
beyond a single cell radius coverage,

637
00:30:00,400 --> 00:30:01,880
like beyond five miles.

638
00:30:01,880 --> 00:30:03,040
So for doing that,

639
00:30:03,040 --> 00:30:07,860
in fact, the SPARROW, you will
need to use SPARROW relays.

640
00:30:07,860 --> 00:30:10,000
So SPARROW relays are dropped

641
00:30:10,000 --> 00:30:13,360
basically where they
can listen and transmit

642
00:30:13,360 --> 00:30:15,340
and interact with multiple cell towers.

643
00:30:15,340 --> 00:30:18,710
And their job is being Ricky in one cell

644
00:30:18,710 --> 00:30:21,190
and being acting like
Trudy in the other cell,

645
00:30:21,190 --> 00:30:22,890
as you can see here.

646
00:30:22,890 --> 00:30:24,950
So SPARROW relays can be small,

647
00:30:24,950 --> 00:30:27,070
kind of like solar-powered devices

648
00:30:27,070 --> 00:30:30,270
that are dropped on random places.

649
00:30:30,270 --> 00:30:32,110
So to be more specific,

650
00:30:32,110 --> 00:30:35,730
LTE cells are deployed in kind
of like a hexagonal pattern

651
00:30:35,730 --> 00:30:37,000
to cover an area.

652
00:30:37,000 --> 00:30:40,080
So this picture that I'm going
to show in the next slide

653
00:30:40,080 --> 00:30:43,510
is going to show how the
relay nodes can be placed.

654
00:30:43,510 --> 00:30:45,240
As you can see in here,

655
00:30:45,240 --> 00:30:49,447
so you have multiple ways
in here to place them.

656
00:30:49,447 --> 00:30:52,500
So you can actually place many of them

657
00:30:52,500 --> 00:30:57,430
in where the actual sector
coverage areas overlap

658
00:30:57,430 --> 00:30:58,820
and create a mesh network,

659
00:30:58,820 --> 00:31:01,160
so every node can talk to every other node

660
00:31:01,160 --> 00:31:02,310
and relay messages.

661
00:31:02,310 --> 00:31:05,150
Or you can actually
create a specific chain

662
00:31:05,150 --> 00:31:09,333
to expand the range between two endpoints.

663
00:31:10,320 --> 00:31:12,390
But what is the remediation here?

664
00:31:12,390 --> 00:31:13,990
I mean, with all what we said here,

665
00:31:13,990 --> 00:31:15,660
what is the remediation?

666
00:31:15,660 --> 00:31:17,890
So let's start before I
get to the remediation,

667
00:31:17,890 --> 00:31:20,680
I think there is a value to learn

668
00:31:21,950 --> 00:31:26,950
in case what is the
general weakness modeled

669
00:31:27,130 --> 00:31:31,260
that has enabled the
SPARROW in LTE and 5G.

670
00:31:31,260 --> 00:31:34,350
And potentially it can
exist in other protocols.

671
00:31:34,350 --> 00:31:37,630
So I kind of spent some time
and have formulated this,

672
00:31:37,630 --> 00:31:40,880
and possibly I'm going to
be publishing all this work

673
00:31:40,880 --> 00:31:41,890
following the DEFCON.

674
00:31:41,890 --> 00:31:45,050
But to kind of give you
a general idea about it,

675
00:31:45,050 --> 00:31:47,150
a wireless MAC layer protocol I found

676
00:31:47,150 --> 00:31:49,550
is vulnerable to SPARROW technique.

677
00:31:49,550 --> 00:31:51,550
If any of these procedures

678
00:31:51,550 --> 00:31:56,480
allow forming two sets of
uplink messages, that I call M,

679
00:31:56,480 --> 00:31:59,890
and a downlink broadcast
message, I call them B,

680
00:31:59,890 --> 00:32:02,530
that satisfy the following conditions:

681
00:32:02,530 --> 00:32:05,120
So the first one is a passive reception.

682
00:32:05,120 --> 00:32:08,010
So every signal in B

683
00:32:08,010 --> 00:32:11,900
should be receivable and
decodable everywhere.

684
00:32:11,900 --> 00:32:15,130
So it should be kind of like
an omnidirectional broadcast

685
00:32:15,130 --> 00:32:18,690
that any passive device
anonymously can decode it.

686
00:32:18,690 --> 00:32:23,282
Another key feature is,
basically, we call it bijectivity,

687
00:32:23,282 --> 00:32:25,780
but it's a one-to-one
relation between them.

688
00:32:25,780 --> 00:32:28,780
So essentially, if you
have a set of 10 messages

689
00:32:28,780 --> 00:32:29,613
in each of them,

690
00:32:29,613 --> 00:32:32,980
each message B can only be triggered

691
00:32:32,980 --> 00:32:37,010
by a specific message
that is in the set M.

692
00:32:37,010 --> 00:32:39,980
In other words, when
a receiver receives B,

693
00:32:39,980 --> 00:32:43,640
it can almost surely assume that

694
00:32:43,640 --> 00:32:48,270
its intended transmitter has
transmitted a specific message.

695
00:32:48,270 --> 00:32:51,950
So that way they can have less error

696
00:32:51,950 --> 00:32:54,970
during their communication channel.

697
00:32:54,970 --> 00:32:56,930
Another one, which is
a key important thing,

698
00:32:56,930 --> 00:32:58,150
but it's kind of like optional,

699
00:32:58,150 --> 00:33:00,410
but it is a good, important thing to have,

700
00:33:00,410 --> 00:33:02,170
and we have it right now in the example

701
00:33:02,170 --> 00:33:03,940
that I showed you in the SPARROW,

702
00:33:03,940 --> 00:33:05,290
is that anonymous uplink.

703
00:33:05,290 --> 00:33:07,410
So essentially, the transmitting device

704
00:33:07,410 --> 00:33:09,300
doesn't have to attach to the network

705
00:33:09,300 --> 00:33:11,320
or authenticate to the network

706
00:33:11,320 --> 00:33:14,340
to be able to send those messages,

707
00:33:14,340 --> 00:33:17,440
which actually we already
constructed a message said,

708
00:33:17,440 --> 00:33:18,840
which is actually the CRI

709
00:33:18,840 --> 00:33:22,240
and that 40-bit string that they can pick

710
00:33:22,240 --> 00:33:24,720
are going to form or superset

711
00:33:24,720 --> 00:33:27,950
for set of messages
that they can transmit.

712
00:33:27,950 --> 00:33:29,540
Another key feature down here,

713
00:33:29,540 --> 00:33:31,843
number four, is being stateless uplink.

714
00:33:32,790 --> 00:33:36,210
It is important that the
transmitter, or Trudy,

715
00:33:36,210 --> 00:33:40,750
can successively send any
messages from M, set M,

716
00:33:40,750 --> 00:33:42,190
without protocol violation,

717
00:33:42,190 --> 00:33:44,950
as we talked about is
sending successive messages

718
00:33:44,950 --> 00:33:49,133
and not caring much about
the backoff in between them.

719
00:33:50,030 --> 00:33:51,940
So all these four conditions together

720
00:33:51,940 --> 00:33:55,410
if they apply in any specific
wireless MAC protocol,

721
00:33:55,410 --> 00:33:58,320
that means that some similar
techniques to the SPARROW

722
00:33:58,320 --> 00:34:00,983
can be formed around it
for covert communication.

723
00:34:01,820 --> 00:34:06,280
Any remediation should
preserve the purpose of CRI.

724
00:34:06,280 --> 00:34:08,550
So why we have this here?

725
00:34:08,550 --> 00:34:11,893
Why we have that selective
Message3 and Message4 ping-pong?

726
00:34:13,290 --> 00:34:16,030
So as you can see, it's
for contention resolution.

727
00:34:16,030 --> 00:34:17,330
So there's more details about that.

728
00:34:17,330 --> 00:34:19,980
So let's assume that
two UEs are picking up

729
00:34:19,980 --> 00:34:23,863
the same RACH signals
to attempt with eNodeB.

730
00:34:24,880 --> 00:34:27,897
So essentially, at this point,

731
00:34:27,897 --> 00:34:29,970
eNodeB doesn't know there
are two messages coming

732
00:34:29,970 --> 00:34:32,210
because of the properties
of the RACH signal.

733
00:34:32,210 --> 00:34:35,600
Only one of them is going
to make it to the eNodeB.

734
00:34:35,600 --> 00:34:37,660
So eNodeB is going to send additional,

735
00:34:37,660 --> 00:34:40,663
basically, fine-tuning
parameters for one of them.

736
00:34:41,890 --> 00:34:43,730
But the point is the Message2,

737
00:34:43,730 --> 00:34:45,730
both of them are going
to receive Message2.

738
00:34:45,730 --> 00:34:46,840
So at this point,

739
00:34:46,840 --> 00:34:49,340
both of them think that
they are succeeding.

740
00:34:49,340 --> 00:34:54,170
So that's the point that fNodeB
actually has to have a way

741
00:34:54,170 --> 00:34:57,510
to signal only one UE to proceed

742
00:34:57,510 --> 00:34:59,800
and the rest of them to back off.

743
00:34:59,800 --> 00:35:02,990
And that's the point
that it requests every UE

744
00:35:02,990 --> 00:35:07,763
to send 48-bit CRI message.

745
00:35:08,760 --> 00:35:11,020
And then, it's just going to rebroadcast

746
00:35:11,020 --> 00:35:13,000
the one that it has received.

747
00:35:13,000 --> 00:35:16,270
That is going to surely
indicate that one UE

748
00:35:16,270 --> 00:35:19,240
is going to know it can succeed

749
00:35:19,240 --> 00:35:21,600
and the rest of the UEs
are going to basically

750
00:35:21,600 --> 00:35:22,873
back off and retry.

751
00:35:23,850 --> 00:35:26,340
So before getting to the
solution that works...

752
00:35:26,340 --> 00:35:29,840
I know maybe some of you
already are thinking about

753
00:35:29,840 --> 00:35:30,910
some solution ideas.

754
00:35:30,910 --> 00:35:32,000
So let's talk about them

755
00:35:32,000 --> 00:35:34,993
and talk about why they do not work.

756
00:35:35,890 --> 00:35:39,110
So what about like presetting CRI, phone?

757
00:35:39,110 --> 00:35:41,860
Why the phones have to
randomly select them?

758
00:35:41,860 --> 00:35:43,630
What if we hard-code all the phones

759
00:35:43,630 --> 00:35:45,970
to make it like a MAC address,

760
00:35:45,970 --> 00:35:47,360
so they have to use the same thing?

761
00:35:47,360 --> 00:35:50,773
There are actually some
privacy concerns with that.

762
00:35:50,773 --> 00:35:54,870
There are already attacks
in LTE and 5G on privacy,

763
00:35:54,870 --> 00:35:57,850
and we have lots of techniques
for catching people,

764
00:35:57,850 --> 00:35:59,190
phone numbers and (indistinct).

765
00:35:59,190 --> 00:36:02,150
So any tying up any fixed identity

766
00:36:02,150 --> 00:36:04,040
that can be broadcasted everywhere,

767
00:36:04,040 --> 00:36:09,040
that can lead to privacy
issues for the users.

768
00:36:09,430 --> 00:36:12,110
So this is not like a WiFi,
which is a local network.

769
00:36:12,110 --> 00:36:14,350
It is a global network.

770
00:36:14,350 --> 00:36:16,250
Another one is shared secret.

771
00:36:16,250 --> 00:36:17,650
No, there is no shared secret

772
00:36:17,650 --> 00:36:19,660
between the UE and fNodeB at this point

773
00:36:19,660 --> 00:36:22,670
because all the cell towers are required

774
00:36:22,670 --> 00:36:24,563
to do these interaction with devices,

775
00:36:24,563 --> 00:36:27,093
even if they don't have
any identity or SIM card.

776
00:36:28,060 --> 00:36:31,740
So what about like a crypto
hashing and salting, right?

777
00:36:31,740 --> 00:36:32,850
That's a to-go thing.

778
00:36:32,850 --> 00:36:34,633
Crypto, the funnest stuff.

779
00:36:36,640 --> 00:36:40,250
That in fact, doesn't
work because first of all,

780
00:36:40,250 --> 00:36:43,333
if you think about Message3
and Message4 broadcast,

781
00:36:44,430 --> 00:36:49,430
if the fNodeB tries to basically hash

782
00:36:50,520 --> 00:36:52,350
what it puts in into Message4

783
00:36:52,350 --> 00:36:57,350
so that the designated UE
can just check the hash

784
00:36:57,520 --> 00:36:59,610
or recompute the hash
and compare and proceed,

785
00:36:59,610 --> 00:37:02,060
and the rest of them, they
are going to back off,

786
00:37:03,560 --> 00:37:05,150
it has to basically,

787
00:37:05,150 --> 00:37:07,760
even if it just starts like
using like a salting technique

788
00:37:07,760 --> 00:37:11,070
down here with hash, the most
sophisticated way to do it,

789
00:37:11,070 --> 00:37:12,440
even if it is using salting,

790
00:37:12,440 --> 00:37:17,440
it has to ship the salt string
with the hash all together.

791
00:37:18,410 --> 00:37:22,240
But does it really prevent Ricky and Trudy

792
00:37:22,240 --> 00:37:23,990
from exchanging messages?

793
00:37:23,990 --> 00:37:25,150
Not, not that much.

794
00:37:25,150 --> 00:37:28,670
It just adds a little bit
computational complexity

795
00:37:28,670 --> 00:37:29,890
to the mix,

796
00:37:29,890 --> 00:37:33,520
but in fact, the Ricky can still recompute

797
00:37:33,520 --> 00:37:35,840
because it's going to have
the hashing algorithm.

798
00:37:35,840 --> 00:37:37,070
It's going to have the salt.

799
00:37:37,070 --> 00:37:39,810
And it's going to be able to compute

800
00:37:39,810 --> 00:37:43,690
these values for any set
of known code book messages

801
00:37:43,690 --> 00:37:45,280
that they decide to use,

802
00:37:45,280 --> 00:37:46,960
and they can just stick to that code book.

803
00:37:46,960 --> 00:37:49,490
So it can slightly slow them down,

804
00:37:49,490 --> 00:37:52,120
but it's not going to
solve the bigger problem.

805
00:37:52,120 --> 00:37:54,100
Also, the fNodeB cannot distinguish

806
00:37:54,100 --> 00:37:56,090
between the Trudy and the other users.

807
00:37:56,090 --> 00:37:58,650
So any attempt to blocking
some of the signals

808
00:37:58,650 --> 00:38:02,680
if they repeat successively,

809
00:38:02,680 --> 00:38:05,040
it is going to have a performance impact.

810
00:38:05,040 --> 00:38:07,550
So the actual users have to pay the cost.

811
00:38:07,550 --> 00:38:08,800
And as I've mentioned before,

812
00:38:08,800 --> 00:38:11,980
the operators are reluctant
to take such necessary steps.

813
00:38:11,980 --> 00:38:14,420
So what is the real solution?

814
00:38:14,420 --> 00:38:16,170
This is the solution I put together

815
00:38:16,170 --> 00:38:17,550
to be proposed to the standards.

816
00:38:17,550 --> 00:38:20,950
So the remediation has to
come to the standard level,

817
00:38:20,950 --> 00:38:23,760
which actually might have
applications in other fields.

818
00:38:23,760 --> 00:38:28,367
I call it Extensible Loss-Induced
Security Hashing Algo,

819
00:38:28,367 --> 00:38:29,490
like that.

820
00:38:29,490 --> 00:38:34,490
What it does is just
adding one layer of entropy

821
00:38:35,070 --> 00:38:38,550
over that solving and hashing
that we were talking about.

822
00:38:38,550 --> 00:38:42,100
So the first few steps are very similar.

823
00:38:42,100 --> 00:38:44,100
So we do some salting.

824
00:38:44,100 --> 00:38:46,570
So once the fNodeB receives a Message3,

825
00:38:46,570 --> 00:38:48,690
it's going to apply salting

826
00:38:50,380 --> 00:38:53,170
and apply the crypto hash.

827
00:38:53,170 --> 00:38:55,750
Right there, I kind of come up
with a new salting algorithm

828
00:38:55,750 --> 00:38:58,130
called Random Multiplicative Salting.

829
00:38:58,130 --> 00:39:00,410
It's a kind of new algorithm that helps

830
00:39:02,630 --> 00:39:04,720
reduce the collision probability

831
00:39:04,720 --> 00:39:07,330
when you're using crypto hash functions

832
00:39:07,330 --> 00:39:10,730
with shorter strings, like CRI.

833
00:39:10,730 --> 00:39:13,020
And then after that,

834
00:39:13,020 --> 00:39:17,370
it starts applying some random erasure

835
00:39:17,370 --> 00:39:19,040
to the output of the hash function.

836
00:39:19,040 --> 00:39:21,410
So it decides to not transmit all the bits

837
00:39:21,410 --> 00:39:23,260
that come from the hash digest,

838
00:39:23,260 --> 00:39:26,240
but randomly select a bunch of them

839
00:39:26,240 --> 00:39:29,320
and send them out in Message4,

840
00:39:29,320 --> 00:39:31,700
so that the intended UE can, you know,

841
00:39:31,700 --> 00:39:34,670
essentially, has to
have all the information

842
00:39:34,670 --> 00:39:37,190
to repeat the same process
and compare the output,

843
00:39:37,190 --> 00:39:38,570
and if it matches, it can proceed.

844
00:39:38,570 --> 00:39:40,620
If it doesn't match, it has to back off.

845
00:39:40,620 --> 00:39:43,920
So that means that the salt,
in addition to the salt,

846
00:39:43,920 --> 00:39:48,660
we have to also ship
basically a bit string

847
00:39:48,660 --> 00:39:51,410
that indicates that which
bits we have selected

848
00:39:51,410 --> 00:39:53,320
and which bits we have not selected

849
00:39:54,300 --> 00:39:56,530
from the output of the crypto hash

850
00:39:56,530 --> 00:39:58,810
all together to the UE.

851
00:39:58,810 --> 00:40:00,330
So that's what I call it, bit mask.

852
00:40:00,330 --> 00:40:03,260
As you can see, in this case,

853
00:40:03,260 --> 00:40:05,160
there are two advantages to this

854
00:40:05,160 --> 00:40:08,520
that makes it impossible for
Trudy and Ricky to communicate.

855
00:40:08,520 --> 00:40:10,710
First of all, they cannot (vocalizes)...

856
00:40:10,710 --> 00:40:13,070
They were reconstructing
like a rainbow tables

857
00:40:13,070 --> 00:40:16,410
and recomputing the
hash for the code book.

858
00:40:16,410 --> 00:40:18,900
But the point is that layer of the erasure

859
00:40:18,900 --> 00:40:20,570
that we put in between,

860
00:40:20,570 --> 00:40:23,920
they cannot create a code book

861
00:40:23,920 --> 00:40:26,960
that both can be recomputed
by a hashing algorithm

862
00:40:26,960 --> 00:40:27,940
and at the same time,

863
00:40:27,940 --> 00:40:31,130
have error-correcting features
and capabilities in it.

864
00:40:31,130 --> 00:40:36,020
So that kind of enabling
those erasures and errors

865
00:40:36,020 --> 00:40:37,800
in there, in their communication,

866
00:40:37,800 --> 00:40:40,870
is going to totally reduce their chance

867
00:40:40,870 --> 00:40:41,920
to correct those errors.

868
00:40:41,920 --> 00:40:44,390
So that way, their whole
communication scheme

869
00:40:44,390 --> 00:40:46,280
is going to fall apart.

870
00:40:46,280 --> 00:40:49,730
Another key point in here to mention

871
00:40:49,730 --> 00:40:51,010
is about the cost, right?

872
00:40:51,010 --> 00:40:54,210
I mean, always there is
no free lunch out there.

873
00:40:54,210 --> 00:40:56,020
So that's the whole point in engineering,

874
00:40:56,020 --> 00:40:57,880
is that whenever we're
trying to improve things,

875
00:40:57,880 --> 00:40:58,850
we have to pay the cost.

876
00:40:58,850 --> 00:41:01,240
But is it the cost we are
paying is the right cost?

877
00:41:01,240 --> 00:41:02,760
In this case, as you can see,

878
00:41:02,760 --> 00:41:05,320
significantly increase
the number of the bits

879
00:41:05,320 --> 00:41:06,750
we are replying in the Message4

880
00:41:06,750 --> 00:41:08,900
instead of replying by 48 bits.

881
00:41:08,900 --> 00:41:11,480
So an example of like a MD5 hash,

882
00:41:11,480 --> 00:41:13,110
instead of playing back 48 bits,

883
00:41:13,110 --> 00:41:15,880
we might be playing back
about like a 200 bits.

884
00:41:15,880 --> 00:41:18,347
But that's not the
problem with LTE and 5G.

885
00:41:18,347 --> 00:41:20,850
And the amount of the
bandwidth and resources

886
00:41:20,850 --> 00:41:22,960
that are available for this,

887
00:41:22,960 --> 00:41:25,430
this is not going to be a big cost to pay,

888
00:41:25,430 --> 00:41:27,170
barely, for preventing this.

889
00:41:27,170 --> 00:41:28,150
So as a matter of fact,

890
00:41:28,150 --> 00:41:30,630
what we are proposing here is going to be

891
00:41:30,630 --> 00:41:34,030
more of a optional, secure RACH.

892
00:41:34,030 --> 00:41:35,890
So it doesn't have to be implemented

893
00:41:35,890 --> 00:41:37,660
everywhere across the network,

894
00:41:37,660 --> 00:41:41,220
but maybe the operators
want to implement this

895
00:41:41,220 --> 00:41:43,770
near some critical facilities and areas

896
00:41:43,770 --> 00:41:45,563
where they are requested to do so.

897
00:41:47,280 --> 00:41:48,840
So I would like to kind of

898
00:41:48,840 --> 00:41:51,060
get to the wrap-up points in here.

899
00:41:51,060 --> 00:41:54,430
So I'm going to turn quick to Chuck

900
00:41:54,430 --> 00:41:58,240
to share his concluding
bits about the story.

901
00:41:58,240 --> 00:42:01,490
And he's been all along observing
me, working through this.

902
00:42:01,490 --> 00:42:03,960
So I would like to also share him

903
00:42:03,960 --> 00:42:05,700
to share his feedback with you.

904
00:42:05,700 --> 00:42:06,630
Chuck?
- Thank you, Reza.

905
00:42:06,630 --> 00:42:08,307
When Reza came to me and he talked about,

906
00:42:08,307 --> 00:42:10,277
"I think I figured something
out in the MAC layer,

907
00:42:10,277 --> 00:42:12,427
"and we can smuggle messages in and out

908
00:42:12,427 --> 00:42:14,740
"of a cell phone network,"

909
00:42:14,740 --> 00:42:16,390
I was like, no, there's no way.

910
00:42:16,390 --> 00:42:18,430
MAC layers are boring.

911
00:42:18,430 --> 00:42:21,170
The best way you can do
with anything like that

912
00:42:21,170 --> 00:42:24,203
is get from Port 1 to Port 2 on a switch.

913
00:42:25,210 --> 00:42:26,720
But just because it's Layer 2

914
00:42:26,720 --> 00:42:28,750
doesn't mean that it's localized.

915
00:42:28,750 --> 00:42:31,710
And I think that's something
that I really sort of

916
00:42:31,710 --> 00:42:33,073
took away from all of this.

917
00:42:34,810 --> 00:42:38,510
We also really don't think that LTE and 5G

918
00:42:38,510 --> 00:42:41,050
are the only systems that are vulnerable

919
00:42:41,050 --> 00:42:42,563
to these types of attacks.

920
00:42:43,510 --> 00:42:45,140
If you just start digging around some

921
00:42:45,140 --> 00:42:47,700
of the MAC layer protocols
that are used by satellites,

922
00:42:47,700 --> 00:42:50,840
there seem to be about 10 to 20 of them,

923
00:42:50,840 --> 00:42:53,540
and that would give you a
lot for a lot farther reach

924
00:42:53,540 --> 00:42:56,290
than anything that's terrestrial-based.

925
00:42:56,290 --> 00:42:58,930
And there's a whole host of
other radio broadcast signals

926
00:42:58,930 --> 00:43:00,841
out there as well,

927
00:43:00,841 --> 00:43:03,690
from 802.11 to Bluetooth to LoRaWAN

928
00:43:03,690 --> 00:43:06,220
to other things that
can probably be abused

929
00:43:06,220 --> 00:43:07,403
in similar fashions.

930
00:43:08,490 --> 00:43:10,660
Also, just to note,

931
00:43:10,660 --> 00:43:13,600
LTE and 5G is now for everyone.

932
00:43:13,600 --> 00:43:16,960
With a budget of about the
same as a gaming computer,

933
00:43:16,960 --> 00:43:18,850
you can buy enough equipment now

934
00:43:18,850 --> 00:43:20,440
to build your own LTE network.

935
00:43:20,440 --> 00:43:22,970
and even the FCC's granted spectrum

936
00:43:22,970 --> 00:43:24,500
for you to go and play around with it

937
00:43:24,500 --> 00:43:26,920
in your own sort of private space,

938
00:43:26,920 --> 00:43:28,073
which is pretty wild.

939
00:43:29,700 --> 00:43:32,260
So yeah, we'd like to also say thank you

940
00:43:32,260 --> 00:43:34,180
to many people in our team,

941
00:43:34,180 --> 00:43:35,670
including Befe and Luca.

942
00:43:35,670 --> 00:43:38,520
And Reza would like to say
thank you to a few others too.

943
00:43:39,720 --> 00:43:41,430
- Yes. Thanks, Chuck.

944
00:43:41,430 --> 00:43:43,230
I think I'm going to thank Chuck

945
00:43:43,230 --> 00:43:46,570
for all the work and his
support that he offered me

946
00:43:46,570 --> 00:43:48,590
during the (indistinct) process

947
00:43:48,590 --> 00:43:50,700
and putting all this talk together.

948
00:43:50,700 --> 00:43:53,390
Also, the ATI management staff,

949
00:43:53,390 --> 00:43:55,310
Chris, Steve McGregory,

950
00:43:55,310 --> 00:43:57,210
the cool boss I mentioned early on

951
00:43:58,050 --> 00:44:00,700
who kind of like inspired me

952
00:44:00,700 --> 00:44:03,330
to go to this 0-day discovery.

953
00:44:03,330 --> 00:44:04,380
And also I would like to thank

954
00:44:04,380 --> 00:44:08,730
our Keysight IP Program
Coordinator, Pete Marsico,

955
00:44:08,730 --> 00:44:10,050
that he did a great job

956
00:44:10,050 --> 00:44:13,330
of sticking to a very fast timeline

957
00:44:13,330 --> 00:44:15,870
so that I can share the remediation bits

958
00:44:15,870 --> 00:44:17,240
here with you, team.

959
00:44:17,240 --> 00:44:19,520
And in general, I really thank DEFCON.

960
00:44:19,520 --> 00:44:21,763
It's been a really
great experience for me.

961
00:44:22,880 --> 00:44:27,420
I really love to continue
being engaged in the community.

962
00:44:27,420 --> 00:44:28,253
Thank you.

