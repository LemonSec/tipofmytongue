1
00:00:00,300 --> 00:00:01,990
- Okay. Just gonna show you a quick demo

2
00:00:01,990 --> 00:00:04,310
on what we think might be
possible in the future.

3
00:00:04,310 --> 00:00:06,700
We've done a little research
on the shared memory links

4
00:00:06,700 --> 00:00:09,480
between zCX and z/OS.

5
00:00:09,480 --> 00:00:10,470
We know they exist.

6
00:00:10,470 --> 00:00:11,540
They're in some of the diagrams

7
00:00:11,540 --> 00:00:13,400
and the documentation talks about it.

8
00:00:13,400 --> 00:00:14,233
But we found one,

9
00:00:14,233 --> 00:00:16,380
a particular instance
we'd like to show you now.

10
00:00:16,380 --> 00:00:18,930
So this demo is basically just giving you

11
00:00:18,930 --> 00:00:22,780
kind of a window into
what might be possible,

12
00:00:22,780 --> 00:00:25,550
by way of just kind of
a fun demonstration.

13
00:00:25,550 --> 00:00:30,550
So if we log into our
backdoor of our zCX instance,

14
00:00:31,540 --> 00:00:34,330
so this is an SSH server that I booted up

15
00:00:34,330 --> 00:00:35,680
that's just running on the root level

16
00:00:35,680 --> 00:00:37,430
of the zCX instance now,

17
00:00:37,430 --> 00:00:39,670
not bothering having to
go back in through Docker

18
00:00:39,670 --> 00:00:42,430
and escape down to the root instance.

19
00:00:42,430 --> 00:00:45,640
We're just running an SSH
daemon directly from it now

20
00:00:45,640 --> 00:00:46,473
to get in and out.

21
00:00:46,473 --> 00:00:48,270
It's part of our research environment.

22
00:00:48,270 --> 00:00:50,140
And I'm gonna run some hackery commands

23
00:00:50,140 --> 00:00:53,650
from the zCX instance that
I'm not gonna show today.

24
00:00:53,650 --> 00:00:54,900
And just to give you an example

25
00:00:54,900 --> 00:00:56,370
of what we think is possible,

26
00:00:56,370 --> 00:00:58,350
let's log back into the mainframe system.

27
00:00:58,350 --> 00:01:03,350
So I'm going to go log in with
my TSO ID onto our mainframe.

28
00:01:05,660 --> 00:01:07,430
And once I'm into TSO,

29
00:01:07,430 --> 00:01:08,850
I'm gonna launch ispf,

30
00:01:08,850 --> 00:01:12,110
which is kind of the green screen

31
00:01:12,110 --> 00:01:14,470
that everybody associates with mainframe

32
00:01:14,470 --> 00:01:16,820
and is still probably the primary means

33
00:01:16,820 --> 00:01:18,490
of accessing the mainframe.

34
00:01:18,490 --> 00:01:20,220
And I'm gonna go into isdf,

35
00:01:20,220 --> 00:01:23,180
which is where all the output
for all the jobs is stored,

36
00:01:23,180 --> 00:01:24,660
and look at one of our active jobs,

37
00:01:24,660 --> 00:01:26,220
which is named MOON,

38
00:01:26,220 --> 00:01:28,750
which is the zCX server
that we're looking at.

39
00:01:28,750 --> 00:01:30,380
So if I scroll down in this job log

40
00:01:30,380 --> 00:01:31,500
and I go all the way down to the bottom,

41
00:01:31,500 --> 00:01:36,470
you can see that there is
definitely a connection

42
00:01:36,470 --> 00:01:39,870
between the commands that
I just executed in zCX

43
00:01:39,870 --> 00:01:43,660
and my ability to write
to memory inside of z/OS,

44
00:01:43,660 --> 00:01:45,620
placing the goose there at
the end of that job log.

45
00:01:45,620 --> 00:01:48,810
So the demonstration here was
basically just to show you

46
00:01:48,810 --> 00:01:51,120
that what we have is,

47
00:01:51,120 --> 00:01:52,280
what we've done is,

48
00:01:52,280 --> 00:01:54,840
we've gone down through the Docker engine,

49
00:01:54,840 --> 00:01:56,440
into the root Linux container,

50
00:01:56,440 --> 00:01:58,300
what's labeled here as Linux kernel.

51
00:01:58,300 --> 00:02:00,450
And that we know there
are memory connections

52
00:02:00,450 --> 00:02:04,120
between that kernel through
the zCX hypervisor and z/OS.

53
00:02:04,120 --> 00:02:06,404
And so our next project is
really to try to figure out

54
00:02:06,404 --> 00:02:08,230
how to take advantage of that

55
00:02:08,230 --> 00:02:10,020
and do memory overwrites

56
00:02:10,020 --> 00:02:11,900
and gain access, then, full access,

57
00:02:11,900 --> 00:02:15,120
to an authorized address
space within z/OS.

58
00:02:15,120 --> 00:02:17,470
Doing so will give us access
to then all of the data,

59
00:02:17,470 --> 00:02:19,160
the programs, and
everything running on z/OS,

60
00:02:19,160 --> 00:02:22,583
which is ultimately the end goal.

