1
00:00:00,000 --> 00:00:01,760
- Nice to meet you, my name is Barak,

2
00:00:01,760 --> 00:00:03,260
and I'm going to speak about:

3
00:00:03,260 --> 00:00:06,120
Extension-Land in my DEFCON talk which is:

4
00:00:06,120 --> 00:00:09,470
Exploits and Rootkits for
your Browser Extensions.

5
00:00:09,470 --> 00:00:10,713
So let's get into it.

6
00:00:12,490 --> 00:00:13,790
First, a little bit about me;

7
00:00:13,790 --> 00:00:15,830
so my name is Barak Sternberg.

8
00:00:15,830 --> 00:00:18,280
I'm a Senior Security Researcher,

9
00:00:18,280 --> 00:00:22,160
and I'm previously an
Author at SentinelOne Labs.

10
00:00:22,160 --> 00:00:27,160
I also did published research
regarding smart devices

11
00:00:27,310 --> 00:00:30,700
and hacking smart-devices
in the (indistinct) DEFCON.

12
00:00:30,700 --> 00:00:34,630
And I also have a BSC
and MSC in algorithms,

13
00:00:34,630 --> 00:00:37,410
specialized in bioinformatics.

14
00:00:37,410 --> 00:00:41,690
But today I'm going to really
focus on my main appetite

15
00:00:41,690 --> 00:00:44,170
for vulnerability research,

16
00:00:44,170 --> 00:00:47,910
and also to analyze malwares in the wild,

17
00:00:47,910 --> 00:00:51,980
and combining it all and
focus on these validation

18
00:00:51,980 --> 00:00:54,070
on the extension-land.

19
00:00:54,070 --> 00:00:57,170
I also love to DJ and party,

20
00:00:57,170 --> 00:01:01,760
so check out also my
mixcloud for mixes and such.

21
00:01:01,760 --> 00:01:04,600
So concluding that, let's continue.

22
00:01:04,600 --> 00:01:07,990
So, what is the motivation for our talk?

23
00:01:07,990 --> 00:01:11,260
First of all, attackers are
pushing harder and harder.

24
00:01:11,260 --> 00:01:14,070
There are more than 2 millions extensions

25
00:01:14,070 --> 00:01:15,640
inside the web stores,

26
00:01:15,640 --> 00:01:18,470
inside the Chrome stores
or the Mozilla store.

27
00:01:18,470 --> 00:01:22,820
And it's a widely popular target,

28
00:01:22,820 --> 00:01:25,120
both for developing malicious extensions

29
00:01:25,120 --> 00:01:26,890
and attacking these extensions

30
00:01:26,890 --> 00:01:30,290
with XSS uXXS, et cetera.

31
00:01:30,290 --> 00:01:31,770
The second reason is that,

32
00:01:31,770 --> 00:01:34,490
well, extensions are cross-platform,

33
00:01:34,490 --> 00:01:36,180
of course, only for the desktop,

34
00:01:36,180 --> 00:01:39,960
but are cross platform,
they are generic in a sense,

35
00:01:39,960 --> 00:01:44,960
these just JavaScript a
malicious thing to develop.

36
00:01:45,120 --> 00:01:46,980
And they have so many more permission

37
00:01:46,980 --> 00:01:49,500
than just regular sites or even,

38
00:01:49,500 --> 00:01:51,480
render or exploit and stuff like that.

39
00:01:51,480 --> 00:01:54,000
They have permissions to
access any origins sometime,

40
00:01:54,000 --> 00:01:56,250
and they can control the entire browser,

41
00:01:56,250 --> 00:01:58,930
and more on cookies and
many other things as well.

42
00:01:58,930 --> 00:02:01,310
So the cross-platform abilities

43
00:02:01,310 --> 00:02:03,340
and the easy thing to develop,

44
00:02:03,340 --> 00:02:05,620
make them a really popular target,

45
00:02:05,620 --> 00:02:08,890
and also an interesting one
to investigate and research.

46
00:02:08,890 --> 00:02:13,890
So the syllabus we have
contains couple of the subjects.

47
00:02:15,290 --> 00:02:16,910
First of all, I'm going to introduce you

48
00:02:16,910 --> 00:02:18,480
the Chrome extensions in general,

49
00:02:18,480 --> 00:02:20,890
I'm going to focus on
the Chrome extensions,

50
00:02:20,890 --> 00:02:25,390
in my windows desktop, but
it doesn't applicable only

51
00:02:25,390 --> 00:02:27,740
to these Chrome extensions in my desktop.

52
00:02:27,740 --> 00:02:32,220
It's applicable to any kind of extensions

53
00:02:32,220 --> 00:02:35,060
which are desktop related.

54
00:02:35,060 --> 00:02:38,620
It's this kind of research
and attack surfaces I observe,

55
00:02:38,620 --> 00:02:42,630
are also applicable to many
other platforms as well.

56
00:02:42,630 --> 00:02:46,163
Next, I'm going to
tackle the communication,

57
00:02:47,080 --> 00:02:49,330
communication routines
between the extensions,

58
00:02:49,330 --> 00:02:52,080
beneath, besides, above,

59
00:02:52,080 --> 00:02:54,220
and in so many other places.

60
00:02:54,220 --> 00:02:58,087
After that, I'm going to go
into the Zotero extension.

61
00:02:58,087 --> 00:03:00,780
I'm going to tell how I managed to jump

62
00:03:00,780 --> 00:03:05,780
from one good Chrome app which
seemingly doesn't do nothing

63
00:03:07,400 --> 00:03:09,470
in your computer, just, I don't know,

64
00:03:09,470 --> 00:03:13,010
open TCP sockets and kind of that it.

65
00:03:13,010 --> 00:03:16,580
And from there to really own the browser,

66
00:03:16,580 --> 00:03:21,040
by owning and owning the Zotero extension,

67
00:03:21,040 --> 00:03:24,093
managing to jump from one
Chrome app to another.

68
00:03:25,130 --> 00:03:26,890
After that I'm going to exploit Vimium

69
00:03:26,890 --> 00:03:28,437
in which you accesses Vimium,

70
00:03:29,490 --> 00:03:32,410
because of some communication,
interesting problem,

71
00:03:32,410 --> 00:03:37,150
And I will finish with
developing and implementing,

72
00:03:37,150 --> 00:03:39,970
implanting my own extension rootkit,

73
00:03:39,970 --> 00:03:44,410
and I'll tell you how to really
modify any good extension,

74
00:03:44,410 --> 00:03:47,513
that is previously installed in your PC,

75
00:03:48,420 --> 00:03:53,420
to make all of these extensions go bad.

76
00:03:55,100 --> 00:03:58,263
So I'm excited, let's get started.

77
00:03:59,510 --> 00:04:00,890
So first things first,

78
00:04:00,890 --> 00:04:02,067
when I tackle the extension

79
00:04:02,067 --> 00:04:04,920
or I tackle, of course,
the extension anatomy,

80
00:04:04,920 --> 00:04:09,650
and I reach to absorb the multiple layers

81
00:04:09,650 --> 00:04:11,069
inside the extensions themselves.

82
00:04:11,069 --> 00:04:15,023
So, extensions actually include couple of,

83
00:04:15,960 --> 00:04:17,760
well in an eye-level manner.

84
00:04:17,760 --> 00:04:21,390
They include couple of components.

85
00:04:21,390 --> 00:04:24,440
The first component is the content script.

86
00:04:24,440 --> 00:04:27,530
The content script is the
actually the extensions frontend.

87
00:04:27,530 --> 00:04:32,530
It includes a specific type of compound

88
00:04:32,820 --> 00:04:37,483
of JavaScript and HTML code,

89
00:04:38,770 --> 00:04:41,620
that can be loaded in the
matching sites for example,

90
00:04:41,620 --> 00:04:45,100
if you're an ad-blocker
so, for every site,

91
00:04:45,100 --> 00:04:49,390
every site you are into, the
content scripts are loaded,

92
00:04:49,390 --> 00:04:52,070
but compared to the background scripts,

93
00:04:52,070 --> 00:04:57,070
the content scripts are loaded
only inside specific sites,

94
00:04:57,070 --> 00:04:59,460
and they are not persistent,

95
00:04:59,460 --> 00:05:03,470
meaning they are not
the same for every site,

96
00:05:03,470 --> 00:05:05,770
and they disappear when
you close the site,

97
00:05:05,770 --> 00:05:08,930
when you close the tab, these
content scripts are gone.

98
00:05:08,930 --> 00:05:12,350
The background is actually
the backend of the extensions.

99
00:05:12,350 --> 00:05:15,920
There is like one dedicated
process which is really cool

100
00:05:15,920 --> 00:05:19,250
and it's like, behind it all,

101
00:05:19,250 --> 00:05:24,010
and it manages all the things related

102
00:05:24,010 --> 00:05:26,950
to the extensions main APIs.

103
00:05:26,950 --> 00:05:29,900
And it has many more
APIs that is accessible.

104
00:05:29,900 --> 00:05:33,670
And also we can do more things compared

105
00:05:33,670 --> 00:05:35,737
to the frontend content Script

106
00:05:35,737 --> 00:05:38,370
and it actually communicate
the background script,

107
00:05:38,370 --> 00:05:41,070
and the content script
communicate between each other.

108
00:05:42,010 --> 00:05:45,660
So, if you know maybe Chrome,
it's considered to be like,

109
00:05:45,660 --> 00:05:47,350
the content script is
the rendering process

110
00:05:47,350 --> 00:05:49,090
which is in every site.

111
00:05:49,090 --> 00:05:50,150
And the background script might be

112
00:05:50,150 --> 00:05:52,810
like the godfather process,

113
00:05:52,810 --> 00:05:55,020
which is like the browser context,

114
00:05:55,020 --> 00:05:58,940
which is like controllers
of this tiny content script

115
00:05:58,940 --> 00:06:01,590
in a sense, cool.

116
00:06:01,590 --> 00:06:03,800
And least, but not last,

117
00:06:03,800 --> 00:06:06,260
we have the Extension-Dir,
which is in my PC

118
00:06:06,260 --> 00:06:07,960
in the local app data.

119
00:06:07,960 --> 00:06:10,320
And also one more important
thing is the Manifest.

120
00:06:10,320 --> 00:06:15,070
So, if you maybe remember the
manifest XML inside Android,

121
00:06:15,070 --> 00:06:17,580
it's actually exactly the same.

122
00:06:17,580 --> 00:06:22,580
The Manifest XML in the Android
is quite similar in a sense

123
00:06:24,320 --> 00:06:29,320
that is defining the whole approach about

124
00:06:29,460 --> 00:06:31,120
how extension is built.

125
00:06:31,120 --> 00:06:32,650
And this is the Manifest JSON,

126
00:06:32,650 --> 00:06:34,890
which is inside every extension.

127
00:06:34,890 --> 00:06:38,570
So the Manifest JSON, defines truly

128
00:06:38,570 --> 00:06:40,810
what will be the background script,

129
00:06:40,810 --> 00:06:42,520
what are the content script,

130
00:06:42,520 --> 00:06:44,590
what are the permissions
the extension have

131
00:06:44,590 --> 00:06:46,343
and so much more.

132
00:06:47,300 --> 00:06:49,530
The last thing is the signature.

133
00:06:49,530 --> 00:06:53,950
So, every extension also
have its own signatures

134
00:06:53,950 --> 00:06:57,860
in a calculated directory,

135
00:06:57,860 --> 00:07:00,830
I mean, calculated directory,
I mean by that directory

136
00:07:00,830 --> 00:07:04,280
that includes all the hashes, (indistinct)

137
00:07:04,280 --> 00:07:07,180
that are assigned by the public key

138
00:07:07,180 --> 00:07:10,850
of the extensions
developer or the web store

139
00:07:10,850 --> 00:07:15,640
dependent from where you have
download this extension from.

140
00:07:15,640 --> 00:07:20,640
And the most important
point to know about it,

141
00:07:20,680 --> 00:07:25,440
is that every time you open an extension,

142
00:07:25,440 --> 00:07:28,800
or you use an extension,
this extension gets verified

143
00:07:28,800 --> 00:07:30,880
and this extension gets verified

144
00:07:30,880 --> 00:07:34,560
and analyzed fully in a
sense that if the data

145
00:07:34,560 --> 00:07:37,860
and the JavaScript inside
these extensions are not valid

146
00:07:37,860 --> 00:07:42,180
and are not the same as
published out there in the web

147
00:07:42,180 --> 00:07:45,530
and not signed, then the extension

148
00:07:45,530 --> 00:07:48,910
would be considered
invalid, and will not work.

149
00:07:48,910 --> 00:07:52,780
So, Chrome automatically
check the signatures

150
00:07:52,780 --> 00:07:55,780
for extensions dynamically, cool.

151
00:07:55,780 --> 00:07:59,170
So, let's go for the Manifest Anatomy.

152
00:07:59,170 --> 00:08:02,080
The anatomy of the
extensions include the spots,

153
00:08:02,080 --> 00:08:03,990
as I told you already.

154
00:08:03,990 --> 00:08:08,800
It defined in the first part
in a cool JSON kind of way.

155
00:08:10,770 --> 00:08:12,790
The first part is like a key values,

156
00:08:12,790 --> 00:08:14,750
the first part is like
the background scripts.

157
00:08:14,750 --> 00:08:16,620
So we define which are the background,

158
00:08:16,620 --> 00:08:18,020
whether it persistent or not.

159
00:08:18,020 --> 00:08:20,300
Usually most of the
background is persistent,

160
00:08:20,300 --> 00:08:23,130
meaning the process runs all the time

161
00:08:23,130 --> 00:08:24,810
of the background process.

162
00:08:24,810 --> 00:08:29,640
Content script with all the
definitions inside of them.

163
00:08:29,640 --> 00:08:31,490
And one of the most important things

164
00:08:31,490 --> 00:08:35,080
inside the content script
is actually the sites

165
00:08:35,080 --> 00:08:36,280
that are matched with.

166
00:08:36,280 --> 00:08:38,293
So for example, if you go to Google,

167
00:08:39,430 --> 00:08:41,960
you don't automatically
load all the content script

168
00:08:41,960 --> 00:08:43,350
for all the extensions.

169
00:08:43,350 --> 00:08:45,380
You just load the content scripts

170
00:08:45,380 --> 00:08:49,070
that used to work on this site.

171
00:08:49,070 --> 00:08:52,770
So if you have an extension
that works only on Google,

172
00:08:52,770 --> 00:08:55,220
you can tell in the Manifest,

173
00:08:55,220 --> 00:08:58,090
I'm working only on
Google in the matches key.

174
00:08:58,090 --> 00:09:00,160
You can see the matches key
inside the content script

175
00:09:00,160 --> 00:09:01,380
and that will tell the browser

176
00:09:01,380 --> 00:09:03,610
to load this content script only there.

177
00:09:03,610 --> 00:09:06,720
The last thing is that,
well, the last important one

178
00:09:06,720 --> 00:09:08,160
is the web accessible resources,

179
00:09:08,160 --> 00:09:11,420
which are extension pages
that are accessible.

180
00:09:11,420 --> 00:09:15,930
And I will show you later
on how to, other websites

181
00:09:15,930 --> 00:09:19,180
and you can implement, embed them, sorry,

182
00:09:19,180 --> 00:09:22,130
inside as an iframe in your website,

183
00:09:22,130 --> 00:09:24,000
and also the permissions themselves,

184
00:09:24,000 --> 00:09:28,280
which mean the permissions
that the extension can use.

185
00:09:28,280 --> 00:09:33,280
So, concluding it all in
some cool eye-level overview.

186
00:09:33,820 --> 00:09:35,570
So we can see the eye-level diagram here

187
00:09:35,570 --> 00:09:40,180
and communication-wise and eye-level wise.

188
00:09:40,180 --> 00:09:41,880
You can see the DOM is,

189
00:09:41,880 --> 00:09:43,870
when you go for example to Google site,

190
00:09:43,870 --> 00:09:47,700
there is the DOM which is the main site,

191
00:09:47,700 --> 00:09:48,920
the main context we have.

192
00:09:48,920 --> 00:09:51,460
This is like the all the
DOM HTML elements of Google,

193
00:09:51,460 --> 00:09:54,800
the page scripts of the Google sites

194
00:09:54,800 --> 00:09:57,020
and many more that are
loaded are accessible

195
00:09:57,020 --> 00:10:01,100
of course in this DOM, but
not just the page scripts,

196
00:10:01,100 --> 00:10:02,950
but also the content scripts

197
00:10:02,950 --> 00:10:07,950
and all the other sites
of the extension itself.

198
00:10:08,040 --> 00:10:11,730
So, the extension is also
accessible to the DOM.

199
00:10:11,730 --> 00:10:14,460
Of course, if it's should
be loaded in the site

200
00:10:14,460 --> 00:10:15,293
and the content scripts
can access the DOM page

201
00:10:15,293 --> 00:10:19,430
of these Google sites.

202
00:10:19,430 --> 00:10:21,287
The content scripts which are the frontend

203
00:10:21,287 --> 00:10:25,280
and I already told, use messaging platform

204
00:10:25,280 --> 00:10:27,440
to communicate to the background,

205
00:10:27,440 --> 00:10:29,300
to the backend of the extension itself.

206
00:10:29,300 --> 00:10:32,450
So the background page
is the background context

207
00:10:32,450 --> 00:10:37,450
of the extension, and it
doesn't directly communicated

208
00:10:37,640 --> 00:10:39,760
with from the site.

209
00:10:39,760 --> 00:10:44,670
Only, well, mostly indirectly
by the content script itself.

210
00:10:44,670 --> 00:10:46,887
So this is like the old
communication between these things

211
00:10:46,887 --> 00:10:49,020
in the extension world.

212
00:10:49,020 --> 00:10:51,500
So, a quick, maybe a reminder,

213
00:10:51,500 --> 00:10:53,200
or maybe example for couple of few

214
00:10:54,260 --> 00:10:55,820
content scripts and background scripts.

215
00:10:55,820 --> 00:10:57,580
So, if I'm an ad-blocker,

216
00:10:57,580 --> 00:11:00,993
and I want to remove all DOM elements

217
00:11:00,993 --> 00:11:02,770
that are advertisements,

218
00:11:02,770 --> 00:11:05,640
I can just access the DOM
and remove these elements.

219
00:11:05,640 --> 00:11:08,990
So this is one example for the
content scripts themselves.

220
00:11:08,990 --> 00:11:11,650
You can see this example over here.

221
00:11:11,650 --> 00:11:13,390
And the background scripts,

222
00:11:13,390 --> 00:11:15,903
if they want to remove specific Ad or URL,

223
00:11:15,903 --> 00:11:19,170
that is being processed
and requested by the user

224
00:11:19,170 --> 00:11:21,010
and the browser's client,

225
00:11:21,010 --> 00:11:24,150
it can just remove it
by using the Web proxy.

226
00:11:24,150 --> 00:11:26,840
Well, actually the WebRequest proxy.

227
00:11:26,840 --> 00:11:30,990
So you just add specific
hook to the WebRequest

228
00:11:30,990 --> 00:11:32,470
and catch all the events,

229
00:11:32,470 --> 00:11:35,470
the network events to redirect
this URL to entirely new URL.

230
00:11:38,150 --> 00:11:41,470
it owns, or just about
blank if it wants to.

231
00:11:41,470 --> 00:11:46,470
Therefore it blocks these
advertisements in this manner.

232
00:11:47,020 --> 00:11:49,910
This is the technique of
the background scripts.

233
00:11:49,910 --> 00:11:53,860
Okay, so let's consider now
the website versus extension,

234
00:11:53,860 --> 00:11:55,880
let's consider all the
communication within

235
00:11:55,880 --> 00:11:57,260
that are available.

236
00:11:57,260 --> 00:12:01,650
So, first of all, we have
the cross-origin messages.

237
00:12:01,650 --> 00:12:05,810
This one is really a known
way and a known technique

238
00:12:05,810 --> 00:12:10,320
to just make communication
between every arbitrary

239
00:12:10,320 --> 00:12:12,240
like origin, cross-origin stuff,

240
00:12:12,240 --> 00:12:15,570
and they are widely popular
and used also in extensions.

241
00:12:15,570 --> 00:12:18,800
You define your message
listener, you do post message,

242
00:12:18,800 --> 00:12:21,570
and they communicate between each other.

243
00:12:21,570 --> 00:12:23,270
The second thing is that DOM changes

244
00:12:23,270 --> 00:12:25,660
in events like extension.

245
00:12:25,660 --> 00:12:27,600
The content script can intercept

246
00:12:27,600 --> 00:12:30,840
and hook the onclick events, onfocus.

247
00:12:30,840 --> 00:12:33,189
They can search for specific
div with specific classes

248
00:12:33,189 --> 00:12:36,000
and use them to do many things.

249
00:12:36,000 --> 00:12:38,380
And of course, if I'm an attacker website,

250
00:12:38,380 --> 00:12:42,290
I can control and define
these kinds of things.

251
00:12:42,290 --> 00:12:47,000
The last thing is the, well,
is the most kind of unique

252
00:12:47,000 --> 00:12:49,820
and interesting property
that extension have.

253
00:12:49,820 --> 00:12:53,460
And this is like extension
pages that are accessible.

254
00:12:53,460 --> 00:12:56,610
They're like in a sense
reminds of a content script

255
00:12:56,610 --> 00:12:58,200
that are accessible to DOM,

256
00:12:58,200 --> 00:13:02,540
but they have more capabilities
because you can embed

257
00:13:02,540 --> 00:13:05,290
specific web accessible URLs,

258
00:13:05,290 --> 00:13:08,810
which is URLs that the extensions need

259
00:13:08,810 --> 00:13:12,330
to define inside this Manifests,
and they are open wide,

260
00:13:12,330 --> 00:13:16,170
and you can embed them in an
iframe in your own website,

261
00:13:16,170 --> 00:13:19,490
and access them, of
course not stop breaking,

262
00:13:19,490 --> 00:13:21,200
but you can access them in a manner

263
00:13:21,200 --> 00:13:24,450
that they can be embedded
and they can be accessed

264
00:13:24,450 --> 00:13:29,100
from cross-origin messaging
or maybe many more features

265
00:13:29,100 --> 00:13:29,933
that you can have.

266
00:13:29,933 --> 00:13:33,500
So this is like the three
main options I will tackled

267
00:13:33,500 --> 00:13:37,943
in the website versus
extensions content scripts,

268
00:13:39,020 --> 00:13:40,410
communication with thing.

269
00:13:40,410 --> 00:13:44,987
So, how about, well, I
talked about content scripts,

270
00:13:44,987 --> 00:13:46,540
how about the background scripts.

271
00:13:46,540 --> 00:13:50,600
So the background scripts have
cool way of communication,

272
00:13:50,600 --> 00:13:53,380
in actually many other
and non-spectable ways.

273
00:13:53,380 --> 00:13:57,070
So, first of all, there
is the WebRequest proxy,

274
00:13:57,070 --> 00:14:00,330
the exact WebRequest proxy
actually handle these requests,

275
00:14:00,330 --> 00:14:02,900
and also the responses
from the service site.

276
00:14:02,900 --> 00:14:05,270
So if where, maybe a
malicious server wants

277
00:14:05,270 --> 00:14:07,530
to attack in a specific extension,

278
00:14:07,530 --> 00:14:11,030
we can maybe inject headers
and or specific response

279
00:14:11,030 --> 00:14:14,090
that will be analyzed for this extension

280
00:14:14,090 --> 00:14:18,410
and therefore affect the
extension background scripts.

281
00:14:18,410 --> 00:14:20,980
The background scripts
intercept the request

282
00:14:20,980 --> 00:14:21,920
and the responses.

283
00:14:21,920 --> 00:14:26,190
This is a cool way to
intercept and communicate

284
00:14:26,190 --> 00:14:29,200
in a indirect way with
the background scripts.

285
00:14:29,200 --> 00:14:31,920
Another way for the background
scripts is actually,

286
00:14:31,920 --> 00:14:36,280
it can access the tabs,
the cookies, storage data,

287
00:14:36,280 --> 00:14:41,280
and much, much more inside
the websites we have.

288
00:14:42,230 --> 00:14:45,720
So for example, the
background scripts have access

289
00:14:45,720 --> 00:14:47,960
to this API with the Chrome tabs,

290
00:14:47,960 --> 00:14:50,520
and we can query the info, the data,

291
00:14:50,520 --> 00:14:52,960
cookies, and much, much more.

292
00:14:52,960 --> 00:14:54,620
And we can affect them of course,

293
00:14:54,620 --> 00:14:56,430
if we control a specific sites,

294
00:14:56,430 --> 00:14:58,610
we can make a user access these sites.

295
00:14:58,610 --> 00:15:02,970
And the last thing, which is
not the web accessible pages,

296
00:15:02,970 --> 00:15:06,240
it's a new and a cool,
well, not so new, of course,

297
00:15:06,240 --> 00:15:09,860
it's a feature existing
probably from 2012,

298
00:15:09,860 --> 00:15:13,070
but it's worth mentioning that
you can externally connect

299
00:15:13,070 --> 00:15:16,410
also to pages, and by externally connect,

300
00:15:16,410 --> 00:15:21,410
I don't mean just embed an
iframe of this extension page,

301
00:15:22,020 --> 00:15:27,020
but also like really communicate
with the background scripts

302
00:15:27,417 --> 00:15:29,140
for specific websites.

303
00:15:29,140 --> 00:15:32,640
So when you open specific websites

304
00:15:32,640 --> 00:15:35,630
that the extension defined is a valid one

305
00:15:35,630 --> 00:15:38,790
and an extension like
trust on these sites,

306
00:15:38,790 --> 00:15:42,770
it can actually use the site to...

307
00:15:44,210 --> 00:15:46,750
To send messages through the background.

308
00:15:46,750 --> 00:15:51,030
So for example, in the
following, in your screen,

309
00:15:51,030 --> 00:15:56,030
you can see that if I
serve to the X.com site

310
00:15:56,140 --> 00:16:00,390
and X.com was previously defined
as externally connectable,

311
00:16:00,390 --> 00:16:02,530
then the API interface,

312
00:16:02,530 --> 00:16:04,580
to send message to this extension ID,

313
00:16:04,580 --> 00:16:06,730
which is handled in the background script

314
00:16:07,898 --> 00:16:10,280
is fully open to me to access.

315
00:16:10,280 --> 00:16:12,480
So it's a really cool
way to access internals

316
00:16:12,480 --> 00:16:16,393
if I am, of course, accessible
to these sites, cool.

317
00:16:17,610 --> 00:16:21,250
So, also extensions and extensions

318
00:16:21,250 --> 00:16:22,823
of communication between them,

319
00:16:25,610 --> 00:16:28,380
well, it includes a couple
of things first of all,

320
00:16:28,380 --> 00:16:30,650
all the website versus
extension communication

321
00:16:30,650 --> 00:16:33,650
is available of course,
because any extension

322
00:16:33,650 --> 00:16:36,110
usually can open specific website,

323
00:16:36,110 --> 00:16:40,500
or fake maybe a new
website and open a new tab

324
00:16:40,500 --> 00:16:44,690
and unlike fake these communication.

325
00:16:44,690 --> 00:16:46,740
So, all what they show you in the webs

326
00:16:46,740 --> 00:16:48,820
if communication is available,

327
00:16:48,820 --> 00:16:51,350
but also more things are available,

328
00:16:51,350 --> 00:16:53,030
and sometimes the extension,

329
00:16:53,030 --> 00:16:55,330
for example, the externally
connectable sites,

330
00:16:57,190 --> 00:16:59,670
can include also extension IDs

331
00:16:59,670 --> 00:17:03,350
that are able to communicate
with this extension.

332
00:17:03,350 --> 00:17:06,130
Of course, it's dependent
on the extension developer

333
00:17:06,130 --> 00:17:08,020
to add your extension ID

334
00:17:08,020 --> 00:17:12,220
and to make sure that your
API is available to you

335
00:17:12,220 --> 00:17:14,640
as a remote extension.

336
00:17:14,640 --> 00:17:16,990
The other thing is also
TCP and UDP connection.

337
00:17:16,990 --> 00:17:18,540
It dependent on permissions,

338
00:17:18,540 --> 00:17:20,060
whether you can open a TCP server,

339
00:17:20,060 --> 00:17:23,160
a TCP socket, and much, much more.

340
00:17:23,160 --> 00:17:28,160
And well, for example, let's
say I want to do an injection

341
00:17:28,830 --> 00:17:32,060
from one extension to another extension.

342
00:17:32,060 --> 00:17:33,470
And the way I can do it is actually

343
00:17:33,470 --> 00:17:36,490
with these externable, connectable things.

344
00:17:36,490 --> 00:17:39,770
What I can actually do is
to make the first extension

345
00:17:39,770 --> 00:17:43,350
to inject the code into a legitimate site,

346
00:17:43,350 --> 00:17:46,480
so the second extension will actually feel

347
00:17:46,480 --> 00:17:50,260
that this extension and
this code that was injected

348
00:17:50,260 --> 00:17:53,470
in the site is actually its own code.

349
00:17:53,470 --> 00:17:58,320
So we will think that this
code is legitimate and the API,

350
00:17:58,320 --> 00:18:01,590
the Chrome, will open
the API to send messages

351
00:18:03,105 --> 00:18:06,510
to this extension ID
because my first extension

352
00:18:06,510 --> 00:18:09,340
was injecting JavaScript code

353
00:18:09,340 --> 00:18:13,860
to a legitimate trusted site
by the second extension.

354
00:18:13,860 --> 00:18:18,270
And therefore we can manage to communicate

355
00:18:18,270 --> 00:18:22,460
with the background scripts
from one extension to another,

356
00:18:22,460 --> 00:18:27,223
even though we might not have
the permission of extension ID

357
00:18:28,360 --> 00:18:31,450
specific API that is accessible.

358
00:18:31,450 --> 00:18:34,420
So we can inject to other
site and communicate

359
00:18:34,420 --> 00:18:38,120
by that in the background
scripts of the other one.

360
00:18:38,120 --> 00:18:39,723
It's really easy thing to do.

361
00:18:40,720 --> 00:18:44,470
Cool, so this is like,
this kind of injection.

362
00:18:44,470 --> 00:18:46,673
Let's go now and dive into like,

363
00:18:47,870 --> 00:18:49,810
we are all here for the
vulnerabilities, right?

364
00:18:49,810 --> 00:18:52,060
So, let's dive into the real business

365
00:18:52,060 --> 00:18:54,470
and show some vulnerabilities out there.

366
00:18:54,470 --> 00:18:57,940
So first of all, I will
tackle the Zotero extension.

367
00:18:57,940 --> 00:19:00,860
Zotero extension is a
popular academic extension,

368
00:19:00,860 --> 00:19:05,390
commonly used to organize
citations and share research.

369
00:19:05,390 --> 00:19:09,610
It works really and suits completely

370
00:19:09,610 --> 00:19:12,850
with the Zotero-Desktop edition.

371
00:19:12,850 --> 00:19:17,790
The Zotero-Desktop edition save
your data locally in the PC.

372
00:19:17,790 --> 00:19:21,590
And it's plugging together
usually as Zotero extension

373
00:19:21,590 --> 00:19:23,140
and Zotero-Desktop.

374
00:19:23,140 --> 00:19:26,260
Not always many people actually use

375
00:19:26,260 --> 00:19:29,101
only the Zotero extension
because it's easier to use,

376
00:19:29,101 --> 00:19:32,050
you don't need to configure
anything, really easy,

377
00:19:32,050 --> 00:19:34,430
and they communicate, the desktop version,

378
00:19:34,430 --> 00:19:36,070
and the Zotero Connector,

379
00:19:36,070 --> 00:19:39,993
they communicate for
TCP ports on local host.

380
00:19:40,940 --> 00:19:45,940
So, let's see what we can do
with that, or actually, well,

381
00:19:46,500 --> 00:19:49,820
you can understand by now,
like I'm going to exploit

382
00:19:49,820 --> 00:19:53,770
this kind of thing, and try to
manage to run JavaScript code

383
00:19:53,770 --> 00:19:56,283
inside Zotero extension.

384
00:19:57,400 --> 00:20:01,273
So I have also found that there
is the Zotero translators.

385
00:20:02,435 --> 00:20:04,990
Zotero translators are cool features,

386
00:20:04,990 --> 00:20:09,690
well, more than 500 JavaScript translators

387
00:20:09,690 --> 00:20:13,260
that can get executed
to every site you enter

388
00:20:15,450 --> 00:20:18,180
within the Zotero extension.

389
00:20:18,180 --> 00:20:20,072
Of course, they are really suspectable

390
00:20:20,072 --> 00:20:21,330
to supply chain attacks.

391
00:20:21,330 --> 00:20:25,648
They're like open source
and inside the public GitHub

392
00:20:25,648 --> 00:20:27,310
in the Zotero repo,

393
00:20:27,310 --> 00:20:30,290
but I'm not going to
consider and focus that.

394
00:20:30,290 --> 00:20:32,990
More we need to understand
that this translator job

395
00:20:32,990 --> 00:20:37,280
is to actually take and
extract specific data

396
00:20:37,280 --> 00:20:42,140
from specific websites,
and take for example, URLs,

397
00:20:42,140 --> 00:20:47,140
and academic URLs and citation
notes and stuff like that,

398
00:20:47,160 --> 00:20:50,280
and extract them using
their own JavaScript

399
00:20:50,280 --> 00:20:54,550
to make citations and sharing much better.

400
00:20:54,550 --> 00:20:59,550
So, I don't really know the whole way

401
00:20:59,630 --> 00:21:01,970
about how this works, but I don't care.

402
00:21:01,970 --> 00:21:03,110
They help me to run code,

403
00:21:03,110 --> 00:21:05,040
they help me to run JavaScript code so,

404
00:21:05,040 --> 00:21:07,670
that's what I'm actually in for.

405
00:21:07,670 --> 00:21:11,820
And the way I managed
to do it is actually by,

406
00:21:11,820 --> 00:21:14,670
well, you have this Zotero translation,

407
00:21:14,670 --> 00:21:17,870
also an auto-update mechanism.

408
00:21:17,870 --> 00:21:20,350
This is like an auto-update system,

409
00:21:20,350 --> 00:21:22,860
and it actually tries to communicate

410
00:21:22,860 --> 00:21:25,400
with the standalone desktop edition,

411
00:21:25,400 --> 00:21:27,450
I already told you about.

412
00:21:27,450 --> 00:21:30,200
And what it tries to do is to
try to get new translators,

413
00:21:30,200 --> 00:21:32,880
if new translators need to be updated,

414
00:21:32,880 --> 00:21:35,620
it also download the new
JavaScript code from there

415
00:21:35,620 --> 00:21:37,610
and, well, 'c'est la vie'

416
00:21:37,610 --> 00:21:42,610
So it's perfect to maybe try
to manipulate and maybe try,

417
00:21:43,330 --> 00:21:46,350
I don't know, open and listen,

418
00:21:46,350 --> 00:21:49,890
to specific port, listen
to local host maybe.

419
00:21:49,890 --> 00:21:51,940
Can we do this kind of things?

420
00:21:51,940 --> 00:21:53,800
Well, apparently yes,

421
00:21:53,800 --> 00:21:57,640
we can actually put new
listener on the local host.

422
00:21:57,640 --> 00:21:59,160
We can do it by, well,

423
00:21:59,160 --> 00:22:02,616
of course, my legitimate Mappy Chrome app.

424
00:22:02,616 --> 00:22:05,080
My Mappy Chrome app is a Chrome app

425
00:22:05,080 --> 00:22:06,650
and not a Chrome extension,

426
00:22:06,650 --> 00:22:11,650
but it's still a valid
Chrome extension like,

427
00:22:11,690 --> 00:22:13,650
it looks like a Chrome extension.

428
00:22:13,650 --> 00:22:15,290
It have some more capabilities.

429
00:22:15,290 --> 00:22:19,360
One of these capabilities
is to open TCP server on,

430
00:22:19,360 --> 00:22:21,310
well, on high port, of course,

431
00:22:21,310 --> 00:22:23,940
but it's actually good enough for me.

432
00:22:23,940 --> 00:22:26,677
I just open a new port on this,

433
00:22:26,677 --> 00:22:30,050
put the listener and
send the new JavaScript

434
00:22:30,050 --> 00:22:34,690
and execute code on the content scripts

435
00:22:34,690 --> 00:22:36,520
inside the Zotero extension.

436
00:22:36,520 --> 00:22:40,210
So this all mechanism and
the code has been run,

437
00:22:40,210 --> 00:22:45,210
after all, is actually been
run in the content scripts,

438
00:22:46,110 --> 00:22:47,530
again, context.

439
00:22:47,530 --> 00:22:52,530
So the content script
actually try to run my code.

440
00:22:52,670 --> 00:22:55,850
You can see in this presentation
that like in the slides,

441
00:22:55,850 --> 00:22:58,400
you can see the eval,
the eval consider like,

442
00:22:58,400 --> 00:23:01,020
I'm in sandbox manager kind of thing.

443
00:23:01,020 --> 00:23:04,770
I'm like, I'm doing a
sandbox manager execution,

444
00:23:04,770 --> 00:23:06,403
yeah, it should go right.

445
00:23:07,360 --> 00:23:09,130
Of course it is a sandbox.

446
00:23:09,130 --> 00:23:11,970
Well, not so much sandbox.

447
00:23:11,970 --> 00:23:15,050
This sandbox manager
actually means nothing.

448
00:23:15,050 --> 00:23:18,820
And the code I'm able to
execute in JavaScript mode here

449
00:23:18,820 --> 00:23:22,730
was able to access DOM
elements, HTML elements,

450
00:23:22,730 --> 00:23:25,727
configurations, APIs,

451
00:23:25,727 --> 00:23:29,090
and it runs in the context of the Zotero.

452
00:23:29,090 --> 00:23:31,540
So we won, right?

453
00:23:31,540 --> 00:23:34,270
I'm like, I'm running
my own JavaScript code

454
00:23:34,270 --> 00:23:35,840
inside the content script.

455
00:23:35,840 --> 00:23:39,130
And I will show you later on
a demo of how it's all done.

456
00:23:39,130 --> 00:23:42,070
So after I managed to run code

457
00:23:42,070 --> 00:23:44,600
inside the content script itself,

458
00:23:44,600 --> 00:23:47,310
let's, well, let's be more greedy, right?

459
00:23:47,310 --> 00:23:50,250
Let's, the content script is
fine, but it's not persistent.

460
00:23:50,250 --> 00:23:51,830
We have a little bit of problems.

461
00:23:51,830 --> 00:23:54,150
Let's try to attack also the
background scripts, right?

462
00:23:54,150 --> 00:23:56,190
So from the content scripts themselves,

463
00:23:56,190 --> 00:23:59,620
there are a lot of APIs and
attack surface I can use.

464
00:23:59,620 --> 00:24:02,140
So I try to investigate
these attack surfaces.

465
00:24:02,140 --> 00:24:03,457
Of course there is the same message,

466
00:24:03,457 --> 00:24:06,600
and the connect one that like,

467
00:24:06,600 --> 00:24:09,130
this is the interface between the content

468
00:24:09,130 --> 00:24:11,710
and the background script
as I already told you,

469
00:24:11,710 --> 00:24:15,302
and you have access to
shared extension URLs.

470
00:24:15,302 --> 00:24:18,140
And there is also like a
storage and configuration

471
00:24:18,140 --> 00:24:19,620
that might be shared.

472
00:24:19,620 --> 00:24:21,940
And all of these are quite interesting,

473
00:24:21,940 --> 00:24:24,700
but it's like an attack surface.

474
00:24:24,700 --> 00:24:27,510
And I don't really know how
to continue from there, right?

475
00:24:27,510 --> 00:24:29,940
So I try to do the opposite and try to go,

476
00:24:29,940 --> 00:24:32,059
easy peasy, let's go from the evals

477
00:24:32,059 --> 00:24:34,420
and the bad things they're
are doing in the background

478
00:24:34,420 --> 00:24:37,230
and try to trace back and
found the attack surface

479
00:24:37,230 --> 00:24:39,950
that is reaching down, and
I actually found something.

480
00:24:39,950 --> 00:24:41,190
So in the Zotero background scripts

481
00:24:41,190 --> 00:24:43,097
there is an interesting eval related

482
00:24:43,097 --> 00:24:44,810
to the Google docs integration.

483
00:24:44,810 --> 00:24:47,740
So, let's see how it is done.

484
00:24:47,740 --> 00:24:51,920
So what I've observed is that
in the background context

485
00:24:51,920 --> 00:24:53,200
of the Zotero mechanism,

486
00:24:53,200 --> 00:24:56,990
there is this weird Google
docs integration system.

487
00:24:56,990 --> 00:24:59,840
And by weird Google docs
integration I mean that,

488
00:24:59,840 --> 00:25:03,630
they actually update
their integration scripts

489
00:25:03,630 --> 00:25:07,620
for the Google docs operation
from remote website.

490
00:25:07,620 --> 00:25:11,990
And actually this remote
website can be easily configured

491
00:25:11,990 --> 00:25:15,460
using the Chrome storage APIs.

492
00:25:15,460 --> 00:25:17,270
So on the first line here,

493
00:25:17,270 --> 00:25:21,078
you can see that the
preferences are gotten

494
00:25:21,078 --> 00:25:24,230
from the current configuration

495
00:25:24,230 --> 00:25:26,063
and then using these preferences,

496
00:25:28,158 --> 00:25:33,070
the Zotero mechanism for
the Google integration

497
00:25:33,070 --> 00:25:37,660
loads new background scripts
for this integration itself.

498
00:25:37,660 --> 00:25:41,410
So as you can see on this slide,

499
00:25:41,410 --> 00:25:44,300
these scripts that have
been remotely fetched

500
00:25:44,300 --> 00:25:48,180
from a new site, the JavaScript files,

501
00:25:48,180 --> 00:25:49,740
arbitrary JavaScript files.

502
00:25:49,740 --> 00:25:53,110
No validation, no verification,
no signature even,

503
00:25:53,110 --> 00:25:55,020
only to validate that this version

504
00:25:55,020 --> 00:25:57,050
is higher than the current version

505
00:25:57,050 --> 00:25:59,350
and automatically download it,

506
00:25:59,350 --> 00:26:02,570
downloaded and executed
in the background context.

507
00:26:02,570 --> 00:26:06,500
So you ask yourself, how can
we control these ones, right?

508
00:26:06,500 --> 00:26:10,720
So we managed to control these one because

509
00:26:10,720 --> 00:26:12,730
if we are in the content scripts,

510
00:26:12,730 --> 00:26:16,340
we're actually accessible
to the configuration

511
00:26:16,340 --> 00:26:19,260
of the background scripts itself.

512
00:26:19,260 --> 00:26:23,580
So from configuration, we
inject new configuration values

513
00:26:23,580 --> 00:26:25,320
inside the background scripts,

514
00:26:25,320 --> 00:26:29,860
hence fully control
this remote server that,

515
00:26:29,860 --> 00:26:32,403
well, it's going to be
downloaded in the background

516
00:26:32,403 --> 00:26:34,860
then executed the JavaScript code.

517
00:26:34,860 --> 00:26:39,860
And therefore we launch arbitrary
JavaScript code execution

518
00:26:39,970 --> 00:26:41,250
in the background.

519
00:26:41,250 --> 00:26:44,390
This gives us the ability to
jump from the content script

520
00:26:44,390 --> 00:26:47,480
to the background script
and run our arbitrary code,

521
00:26:47,480 --> 00:26:49,420
which is also persistent.

522
00:26:49,420 --> 00:26:52,923
And now let me show you a video
of how it's actually done.

523
00:26:53,790 --> 00:26:56,840
You can see here, this
is the Mappy extension,

524
00:26:56,840 --> 00:26:59,693
good extension, yeah,
very good absolutely.

525
00:27:01,190 --> 00:27:04,620
You can see that it's have
permission only to TCP sockets

526
00:27:04,620 --> 00:27:08,453
and stuff like that, but
no sites permission at all,

527
00:27:10,640 --> 00:27:11,980
no site permission at all.

528
00:27:11,980 --> 00:27:15,910
And I'm going to show you, it
gonna be a little bit quicker.

529
00:27:15,910 --> 00:27:20,400
I'm going to skip to
the way that I managed

530
00:27:20,400 --> 00:27:22,810
to run code in the background script.

531
00:27:22,810 --> 00:27:25,260
And I will show you how this data

532
00:27:25,260 --> 00:27:28,520
has been transmitted back to my PC.

533
00:27:28,520 --> 00:27:30,390
So we can see this is
the Zotero extension.

534
00:27:30,390 --> 00:27:32,597
This is property, it's
accessible to all sites.

535
00:27:32,597 --> 00:27:35,270
I'm going to use the Zotero extension

536
00:27:35,270 --> 00:27:40,110
in order to do privilege of elevation P

537
00:27:40,110 --> 00:27:41,460
from my extension to another.

538
00:27:41,460 --> 00:27:43,510
You can see here, this is the background,

539
00:27:44,640 --> 00:27:47,670
while I was speaking, it was already doing

540
00:27:47,670 --> 00:27:49,760
the injection from content script

541
00:27:49,760 --> 00:27:51,790
to the background script.

542
00:27:51,790 --> 00:27:54,890
And code was run in the background script

543
00:27:54,890 --> 00:27:59,520
and send it back to my server.

544
00:27:59,520 --> 00:28:01,040
You can see I'm searching for something,

545
00:28:01,040 --> 00:28:04,650
it'll also appear in my
side because I injected

546
00:28:04,650 --> 00:28:08,640
from the Mappy into the
background script on the Zotero.

547
00:28:08,640 --> 00:28:11,640
You can see that there's
nothing showing the network

548
00:28:11,640 --> 00:28:12,473
in the dev tools.

549
00:28:12,473 --> 00:28:13,990
I'm not sending anything

550
00:28:13,990 --> 00:28:16,560
from this VM context, it's totally hidden.

551
00:28:16,560 --> 00:28:18,640
So I'm actually tracing the user

552
00:28:18,640 --> 00:28:22,230
from another different context
inside the Zotero context.

553
00:28:22,230 --> 00:28:23,337
And you can see that all the data

554
00:28:23,337 --> 00:28:25,080
has been received back to me,

555
00:28:25,080 --> 00:28:27,080
and I'm fully controller of this browser

556
00:28:27,080 --> 00:28:31,480
by exfiltrating data back to my PC.

557
00:28:31,480 --> 00:28:33,040
And my code is actually running

558
00:28:33,040 --> 00:28:36,400
inside this good, beautiful
extension, the Zotero extension,

559
00:28:36,400 --> 00:28:39,090
and I jumped from one
extension to another.

560
00:28:39,090 --> 00:28:41,080
The Mappy extension is
actually not relevant,

561
00:28:41,080 --> 00:28:42,210
though you can remove it,

562
00:28:42,210 --> 00:28:44,830
but it won't change anything
because I already injected

563
00:28:44,830 --> 00:28:49,630
my configuration inside
the Zotero extension.

564
00:28:49,630 --> 00:28:51,700
That's it, so I'm
actually fully in control,

565
00:28:51,700 --> 00:28:53,780
nothing in the dev tools,
nothing in the network.

566
00:28:53,780 --> 00:28:57,420
You can see, it all happens
in separate VM contexts

567
00:28:57,420 --> 00:28:59,540
and execution.

568
00:28:59,540 --> 00:29:01,690
Okay, let's go now to another extension.

569
00:29:01,690 --> 00:29:02,940
Let's go to the Vimium extension.

570
00:29:02,940 --> 00:29:05,120
So the Vimium extension make your browser

571
00:29:05,120 --> 00:29:06,660
a theme like extension.

572
00:29:06,660 --> 00:29:10,650
It helps you to easily
do browser navigation

573
00:29:10,650 --> 00:29:14,133
without mouse clicks
and anything like that.

574
00:29:15,340 --> 00:29:20,260
It has its own keyboard
shortcuts like in Vim

575
00:29:20,260 --> 00:29:23,260
we can do copy, edit, search, navigate,

576
00:29:23,260 --> 00:29:24,453
and much, much more.

577
00:29:25,390 --> 00:29:28,590
And this is for example,
an example of how we do it.

578
00:29:28,590 --> 00:29:31,830
You can see that when you
click a couple of buttons

579
00:29:31,830 --> 00:29:32,940
in the keyboard,

580
00:29:32,940 --> 00:29:36,780
all of the links in the browser
seems like a clickable links

581
00:29:36,780 --> 00:29:38,750
by the keyboard, and for example,

582
00:29:38,750 --> 00:29:42,130
when you click D you will
actually go to the search bar

583
00:29:42,130 --> 00:29:45,370
and you can easily navigate
just with your keyboard

584
00:29:45,370 --> 00:29:50,370
inside all of these
browser viewable objects.

585
00:29:51,960 --> 00:29:54,560
So this is a cool thing,
but let's say, well,

586
00:29:54,560 --> 00:29:57,890
our scenario is we are a
website, not an extension.

587
00:29:57,890 --> 00:29:59,280
We can consider extension,

588
00:29:59,280 --> 00:30:02,890
but it might be a little
bit harder thing to do.

589
00:30:02,890 --> 00:30:06,130
So let's consider now only website,

590
00:30:06,130 --> 00:30:08,000
and we want to attack Vimium extension

591
00:30:08,000 --> 00:30:09,993
like Vimium extension users.

592
00:30:11,700 --> 00:30:14,240
So, let's see what is our attack surface.

593
00:30:14,240 --> 00:30:15,970
So our attack surface is actually,

594
00:30:15,970 --> 00:30:18,340
includes all the things I've been talking

595
00:30:18,340 --> 00:30:20,880
to you about in the communication
with things and stuff,

596
00:30:20,880 --> 00:30:22,590
but includes much, much more.

597
00:30:22,590 --> 00:30:25,520
For example, it includes
the Vomnibar widget,

598
00:30:25,520 --> 00:30:28,150
which is a widget that
seems like a search bar

599
00:30:28,150 --> 00:30:31,850
where you can easily search
inside the Vimium extension

600
00:30:31,850 --> 00:30:33,060
for more data and stuff.

601
00:30:33,060 --> 00:30:35,170
The helper widget which open in help thing

602
00:30:35,170 --> 00:30:37,730
and visual mode, like a Vim kind of thing.

603
00:30:37,730 --> 00:30:41,420
So it has a lot of possibilities to do.

604
00:30:41,420 --> 00:30:46,420
And I focused on actually
on the Vomnibar iframe.

605
00:30:46,840 --> 00:30:49,010
The Vomnibar iframe was seemingly

606
00:30:49,010 --> 00:30:52,080
the most interesting
widget I've been find out.

607
00:30:52,080 --> 00:30:54,290
So how the Vomnibar often works

608
00:30:54,290 --> 00:30:55,450
is actually quite interesting.

609
00:30:55,450 --> 00:30:58,890
So the user clicks Enter, O + Enter,

610
00:30:58,890 --> 00:31:03,580
and then the content
scripts catch this event,

611
00:31:03,580 --> 00:31:08,060
the onclick event, the enter
event and adds an iframe.

612
00:31:08,060 --> 00:31:10,300
It adds the Vomnibar iframe.

613
00:31:10,300 --> 00:31:13,090
And when this Vomnibar
iframe has been added,

614
00:31:13,090 --> 00:31:17,360
it's not enough, this iframe
is actually a widget page

615
00:31:17,360 --> 00:31:20,987
from the extension that is
accessibly website URLs,

616
00:31:24,100 --> 00:31:26,640
defined from the manifest of the Vimium.

617
00:31:26,640 --> 00:31:31,540
And after you put that, you
still want the content script

618
00:31:31,540 --> 00:31:34,210
and this iframe to communicate
between each other.

619
00:31:34,210 --> 00:31:36,560
And this is like exactly
what they are going to do.

620
00:31:36,560 --> 00:31:38,500
On the next step they
are going to authorize.

621
00:31:38,500 --> 00:31:42,490
So the content script try to
authorize with its own secret

622
00:31:42,490 --> 00:31:44,000
to the Vomnibar iframe,

623
00:31:44,000 --> 00:31:47,840
the Vomnibar iframe because it
runs under the page extension

624
00:31:47,840 --> 00:31:50,610
is also accessible to this current secret,

625
00:31:50,610 --> 00:31:55,610
the Vimium Secret, so it
can verify that one context

626
00:31:55,830 --> 00:31:59,190
the browser that is going to accessing

627
00:31:59,190 --> 00:32:03,220
and try to communicate with
Vim have relevant secret.

628
00:32:03,220 --> 00:32:06,090
So it verifies also these secret.

629
00:32:06,090 --> 00:32:08,100
And after it verifies the secrets,

630
00:32:08,100 --> 00:32:11,000
it opens also a message channel,

631
00:32:11,000 --> 00:32:13,680
which is kind of a
JavaScript kind of mechanism

632
00:32:13,680 --> 00:32:17,260
to place like a TCP kind of sockets

633
00:32:17,260 --> 00:32:20,680
between different website context.

634
00:32:20,680 --> 00:32:24,310
So now the content script
and the Vimium Vomnibar

635
00:32:24,310 --> 00:32:27,113
communicate between each
other, all cool, all good.

636
00:32:28,010 --> 00:32:30,220
They know that if I am an attacker,

637
00:32:30,220 --> 00:32:32,670
I can actually put the
Vomnibar iframe in my site,

638
00:32:32,670 --> 00:32:34,823
and maybe try to authorize myself, right?

639
00:32:36,120 --> 00:32:38,353
But they still need, yes, you're right,

640
00:32:38,353 --> 00:32:41,790
I still need to break these Vimium Secret.

641
00:32:41,790 --> 00:32:45,640
So, how does the Vimium
Secret is being generated?

642
00:32:45,640 --> 00:32:47,780
How does the token we've talked

643
00:32:47,780 --> 00:32:50,800
that's used for the
authorization is being generated?

644
00:32:50,800 --> 00:32:54,500
Well, apparently, it's a
very, very state-of-the-art

645
00:32:54,500 --> 00:32:56,340
random number generation.

646
00:32:56,340 --> 00:33:00,400
As we can see here, they
just use math.random,

647
00:33:00,400 --> 00:33:04,093
and math.random is actually
pretty predictable,

648
00:33:05,010 --> 00:33:07,530
if you are in the same process of course.

649
00:33:07,530 --> 00:33:10,090
Unfortunately we are
not in the same process.

650
00:33:10,090 --> 00:33:13,650
So does it mean we can't break it?

651
00:33:13,650 --> 00:33:18,650
Not quite, because the
secret is contained,

652
00:33:18,840 --> 00:33:22,760
well, only 31 bits of entropy.

653
00:33:22,760 --> 00:33:27,500
Then we can manage to use that
and actually do bruteforce

654
00:33:27,500 --> 00:33:29,450
and maintain this bruteforce to succeed

655
00:33:30,870 --> 00:33:33,683
in our operation of breaking this secret.

656
00:33:34,880 --> 00:33:37,830
This is like an example of a bruteforce.

657
00:33:37,830 --> 00:33:42,260
We inject our own Vomnibar
iframe, we place a new element,

658
00:33:42,260 --> 00:33:43,820
a new iframe element.

659
00:33:43,820 --> 00:33:46,841
We then set this iframe element

660
00:33:46,841 --> 00:33:51,420
to point to the Vomnibar
HTML, I showed you.

661
00:33:51,420 --> 00:33:54,010
And then we try to
authenticate with these,

662
00:33:54,010 --> 00:33:57,820
to authorize us between this iframe.

663
00:33:57,820 --> 00:34:00,510
We use the secret that
we want to bruteforce,

664
00:34:00,510 --> 00:34:03,050
for example, in this
code, it's the deadbeef.

665
00:34:03,050 --> 00:34:06,790
So I tried to guess that
the secret is deadbeef

666
00:34:06,790 --> 00:34:09,140
and I'm sending data
to this content window.

667
00:34:09,140 --> 00:34:11,500
If I get success, the port is open,

668
00:34:11,500 --> 00:34:14,703
if not, no response and nothing goes on.

669
00:34:16,500 --> 00:34:20,670
So this is like cool
opportunity to do bruteforce,

670
00:34:20,670 --> 00:34:25,670
but we have couple of problems
I've been tackled with it.

671
00:34:26,020 --> 00:34:30,120
First of all, these are
not scalable because

672
00:34:30,120 --> 00:34:33,200
if their browser is
hidden, the tab is hidden,

673
00:34:33,200 --> 00:34:36,200
you go to another website,
you close the screen.

674
00:34:36,200 --> 00:34:37,660
Then the JavaScript gets suspended

675
00:34:37,660 --> 00:34:39,140
because it runs on the frontend.

676
00:34:39,140 --> 00:34:40,910
So what I managed to do is actually,

677
00:34:40,910 --> 00:34:43,486
well, why not WebWorkers?

678
00:34:43,486 --> 00:34:46,150
WebWorkers is, well, amazing opportunity

679
00:34:46,150 --> 00:34:49,490
to just do whatever we want
because they are suitable

680
00:34:49,490 --> 00:34:50,850
to run in the background.

681
00:34:50,850 --> 00:34:52,630
So when I use the WebWorkers,

682
00:34:52,630 --> 00:34:55,900
I trigger the brute-force
routines from the background

683
00:34:55,900 --> 00:34:57,560
of the WebWorkers themselves.

684
00:34:57,560 --> 00:35:01,140
So I use the background
WebWorkers to actually

685
00:35:01,140 --> 00:35:06,140
in periodically interval,
trigger the bruteforce routine,

686
00:35:06,770 --> 00:35:11,770
which lays inside the context
I open inside the iframe.

687
00:35:13,350 --> 00:35:16,350
So, the flow was like WebWorkers triggers

688
00:35:16,350 --> 00:35:18,790
at every two milliseconds,

689
00:35:18,790 --> 00:35:22,250
the frontend routine that
do the bruteforce attempt,

690
00:35:22,250 --> 00:35:26,474
and going on and on and
on, stays up even when,

691
00:35:26,474 --> 00:35:28,260
and it also stays up even if the tab

692
00:35:28,260 --> 00:35:30,010
or the window is hidden.

693
00:35:30,010 --> 00:35:33,510
It stays up at all time,
it's such an awesome thing.

694
00:35:33,510 --> 00:35:36,340
So it's like, even if
the screen is closed,

695
00:35:36,340 --> 00:35:39,510
even if an advertisement, I
can like place my own things

696
00:35:39,510 --> 00:35:40,617
and you won't even notice it, a

697
00:35:40,617 --> 00:35:42,880
and I could run it days and days,

698
00:35:42,880 --> 00:35:45,010
until you close your browser.

699
00:35:45,010 --> 00:35:47,550
So it's really, really cool thing.

700
00:35:47,550 --> 00:35:52,143
I use WebWorkers and now we've
broken the Vomnibar Secret.

701
00:35:53,060 --> 00:35:57,970
So, let's now focus on the
Vomnibar communication.

702
00:35:57,970 --> 00:36:02,710
The Vomnibar communication,
well, includes,

703
00:36:02,710 --> 00:36:04,650
well, couple of things they can do.

704
00:36:04,650 --> 00:36:08,170
So, I assume now we've broke
the secret, the Vimium Secret.

705
00:36:08,170 --> 00:36:10,610
And I'm trying to communicate
between this iframe,

706
00:36:10,610 --> 00:36:13,670
this Vimium iframe and
try to manipulate them.

707
00:36:13,670 --> 00:36:18,670
First operation is it
search for URL completion.

708
00:36:18,670 --> 00:36:22,110
The second thing it activates search

709
00:36:22,110 --> 00:36:23,970
and jumps to new URLs.

710
00:36:24,930 --> 00:36:26,920
It also helps you search for hints.

711
00:36:26,920 --> 00:36:31,240
It does auto-completion
for things and stuff.

712
00:36:31,240 --> 00:36:34,470
Yeah, I don't really care
about these things, right?

713
00:36:34,470 --> 00:36:37,610
And the last thing, it's
use to run JavaScript code.

714
00:36:37,610 --> 00:36:40,010
This is the main course, right?

715
00:36:40,010 --> 00:36:42,050
Cool, so how it works.

716
00:36:42,050 --> 00:36:46,620
So for example, let's say
I have this Vomnibar Vimium

717
00:36:46,620 --> 00:36:48,323
which seems like the search bar,

718
00:36:49,341 --> 00:36:51,210
this is the Vimium widget.

719
00:36:51,210 --> 00:36:54,360
And I write inside JavaScript scheme,

720
00:36:54,360 --> 00:36:59,360
and then I click Enter and 'voila'

721
00:36:59,920 --> 00:37:03,870
So I actually can also
inject JavaScript using,

722
00:37:03,870 --> 00:37:08,210
like JavaScript scheme is inside
this Vomnibar browser text,

723
00:37:08,210 --> 00:37:11,560
it's really cool, but the
main problem with that is that

724
00:37:11,560 --> 00:37:14,920
I run code inside those websites context.

725
00:37:14,920 --> 00:37:18,180
So, I can't really get
out of my context, right?

726
00:37:18,180 --> 00:37:21,343
I stay in my context, in this example.com

727
00:37:21,343 --> 00:37:22,753
that triggers originally this iframe,

728
00:37:22,753 --> 00:37:25,230
this Vomnibar iframe.

729
00:37:25,230 --> 00:37:27,780
And here come to rescue
some communication problem.

730
00:37:28,690 --> 00:37:33,590
Yes, well, I managed
to run JavaScript code.

731
00:37:33,590 --> 00:37:38,590
This gets into the picture,
the communication problem.

732
00:37:38,760 --> 00:37:42,100
So how the Vomnibar and
the JavaScript scheme.

733
00:37:42,100 --> 00:37:44,010
So it tried to find the auto-completion,

734
00:37:44,010 --> 00:37:45,720
it calls some background script.

735
00:37:45,720 --> 00:37:48,067
So, the Vomnibar iframe
calls the content script,

736
00:37:48,067 --> 00:37:50,270
the content script calls
the background script,

737
00:37:50,270 --> 00:37:53,550
the background script
returned with the send message

738
00:37:53,550 --> 00:37:56,800
to the con tab, the results.

739
00:37:56,800 --> 00:38:00,660
So it returns data to the content script

740
00:38:00,660 --> 00:38:03,660
running currently in this tab.

741
00:38:03,660 --> 00:38:07,500
This is how we do it,
and the last send message

742
00:38:07,500 --> 00:38:10,060
is from the background to the context.

743
00:38:10,060 --> 00:38:13,350
And it says, "Okay, execute JavaScript."

744
00:38:13,350 --> 00:38:16,690
Okay, but what happens actually

745
00:38:16,690 --> 00:38:20,890
if we place one more iframe in this area.

746
00:38:20,890 --> 00:38:24,940
So, because Vimium is actually
run inside all of the iframe,

747
00:38:24,940 --> 00:38:27,580
inside Con tab and the content scripts

748
00:38:27,580 --> 00:38:31,030
are inside every tab inside this iframes.

749
00:38:34,510 --> 00:38:39,450
So if the background
context do send message

750
00:38:39,450 --> 00:38:42,270
to the content scripts
inside specific tab,

751
00:38:42,270 --> 00:38:45,910
it actually send message to
all of the contents scripts

752
00:38:45,910 --> 00:38:46,980
inside this tab.

753
00:38:46,980 --> 00:38:49,313
And if it does send message, for example,

754
00:38:50,440 --> 00:38:53,190
evaluate and execute JavaScript
in this content scripts,

755
00:38:53,190 --> 00:38:56,870
so it's actually mean we can
manage to run JavaScript code

756
00:38:56,870 --> 00:39:01,870
inside another website, and
this is the whole thing.

757
00:39:01,940 --> 00:39:04,640
The reason is that there is no validation,

758
00:39:04,640 --> 00:39:06,110
you get a send message,

759
00:39:06,110 --> 00:39:07,740
you get a message from
the background script,

760
00:39:07,740 --> 00:39:09,940
and the content script doesn't really know

761
00:39:09,940 --> 00:39:12,880
which one was actually the trigger.

762
00:39:12,880 --> 00:39:13,820
Well, in our scenario,

763
00:39:13,820 --> 00:39:16,690
of course you can add defenses for that.

764
00:39:16,690 --> 00:39:18,240
But in our scenario,

765
00:39:18,240 --> 00:39:20,820
you don't know when you usually don't know

766
00:39:20,820 --> 00:39:25,760
which one was actually
triggering these send message.

767
00:39:25,760 --> 00:39:29,840
Okay, so the reason that it works is that

768
00:39:29,840 --> 00:39:32,237
when you place handler
in the content script,

769
00:39:34,398 --> 00:39:38,280
the own message, which is
the handler for send messages

770
00:39:38,280 --> 00:39:41,700
from the background, runs
inside every content script

771
00:39:43,775 --> 00:39:45,464
inside this tab.

772
00:39:45,464 --> 00:39:47,873
So every content script inside this tab

773
00:39:47,873 --> 00:39:51,320
will run its own message handler.

774
00:39:51,320 --> 00:39:54,230
So that way we can manipulate
other content script

775
00:39:54,230 --> 00:39:59,050
and inject them our own data
and evaluate inside them,

776
00:39:59,050 --> 00:40:00,690
how well should be messages.

777
00:40:00,690 --> 00:40:05,690
So, let's see now how it
works in the content script

778
00:40:07,017 --> 00:40:09,730
and in the background script context.

779
00:40:09,730 --> 00:40:11,970
And I show you the
communication between them

780
00:40:11,970 --> 00:40:13,540
and I show what is problematic,

781
00:40:13,540 --> 00:40:16,190
and later on, I will
also show you the demo

782
00:40:16,190 --> 00:40:17,840
that concludes it all.

783
00:40:17,840 --> 00:40:19,980
So first thing first, the content script

784
00:40:19,980 --> 00:40:22,330
actually sends a message
from a specific iframe

785
00:40:23,239 --> 00:40:24,920
to the background script.

786
00:40:24,920 --> 00:40:27,280
After it does that, then
the background script

787
00:40:27,280 --> 00:40:30,107
send a message back to this tab.

788
00:40:30,107 --> 00:40:33,020
So, it sends a message to this tab

789
00:40:33,020 --> 00:40:34,883
with the send message API.

790
00:40:36,160 --> 00:40:41,160
And when it happens, the
content script inside,

791
00:40:41,300 --> 00:40:44,640
well you can see that I
have here two iframes,

792
00:40:44,640 --> 00:40:47,630
like one iframe and one tall frame.

793
00:40:47,630 --> 00:40:49,590
So you need to consider
that I have one iframe

794
00:40:49,590 --> 00:40:53,820
which is abc.com and the tall
frame, which is example.com.

795
00:40:53,820 --> 00:40:56,280
And when the background send the message,

796
00:40:56,280 --> 00:40:57,670
both of them received the message.

797
00:40:57,670 --> 00:41:00,350
The content script that
runs inside this iframe

798
00:41:00,350 --> 00:41:03,330
runs as well, and also the content script

799
00:41:03,330 --> 00:41:07,150
that is in example.com
also receive this message.

800
00:41:07,150 --> 00:41:09,130
So this is the problem.

801
00:41:09,130 --> 00:41:14,130
We can trigger the JavaScript
scheme handling message,

802
00:41:14,860 --> 00:41:17,900
and then when the response
gets back from the background,

803
00:41:17,900 --> 00:41:20,590
it will be sent to all iframe
and execute our JavaScript

804
00:41:20,590 --> 00:41:23,100
in another context, that's really cool.

805
00:41:23,100 --> 00:41:25,133
So let's go see a demo of it.

806
00:41:26,890 --> 00:41:31,890
So, now we can see this
is my Chrome version,

807
00:41:35,910 --> 00:41:39,030
and you can see, well,
this was the latest one

808
00:41:39,030 --> 00:41:42,040
before I update, I did a full request

809
00:41:42,040 --> 00:41:46,740
and I updated there, and fix this bug.

810
00:41:46,740 --> 00:41:48,740
So we can see this is the site.

811
00:41:48,740 --> 00:41:51,653
And whenever the user will click on Enter,

812
00:41:53,430 --> 00:41:55,310
it will inject the code in facebook.com.

813
00:41:55,310 --> 00:41:57,660
You can see that the site is local host.

814
00:41:57,660 --> 00:42:01,273
So whenever the user click Enter,

815
00:42:02,220 --> 00:42:05,700
JavaScript will be executed,
not on the attacker side,

816
00:42:05,700 --> 00:42:08,810
not on the local host site,
but on the facebook.com,

817
00:42:08,810 --> 00:42:12,560
which of course you can
see is invisible over here.

818
00:42:12,560 --> 00:42:14,237
So, and this happens exactly because

819
00:42:14,237 --> 00:42:19,143
the communication problem I
told you about before, cool?

820
00:42:20,170 --> 00:42:24,850
So to conclude it all,
we show now a technique

821
00:42:24,850 --> 00:42:29,850
that will be able to any
attacker to modified previously,

822
00:42:30,050 --> 00:42:32,070
good extension in your machine,

823
00:42:32,070 --> 00:42:36,330
and also make them persistent
with some generic techniques

824
00:42:36,330 --> 00:42:38,760
which are available to any conversion.

825
00:42:38,760 --> 00:42:41,550
And it's a really cool
thing because in that way,

826
00:42:41,550 --> 00:42:43,990
you can also add permissions,

827
00:42:43,990 --> 00:42:46,330
change extension and modify it.

828
00:42:46,330 --> 00:42:49,830
And why it's not an easy
peasy thing to do is well,

829
00:42:49,830 --> 00:42:54,830
the reason is that the
extension director is signs,

830
00:42:54,910 --> 00:42:59,550
so Chrome software actually verifies

831
00:42:59,550 --> 00:43:01,630
and analyze these extension directory,

832
00:43:01,630 --> 00:43:04,160
and verifies that all the
signature in the hashes

833
00:43:04,160 --> 00:43:09,100
for this extension data is
the same as it should be.

834
00:43:09,100 --> 00:43:11,430
So we can't really change in run time,

835
00:43:11,430 --> 00:43:14,360
even not in afterwards,

836
00:43:14,360 --> 00:43:18,370
and make these extension
be a different one.

837
00:43:18,370 --> 00:43:23,020
But, you can still think
about the scenario where,

838
00:43:23,020 --> 00:43:27,440
well, I'm in developer, I
really in devoted developer

839
00:43:27,440 --> 00:43:29,970
and I don't want to sign my extension

840
00:43:29,970 --> 00:43:31,730
every time I do bug fix.

841
00:43:31,730 --> 00:43:33,670
I want to check things,
I want to add feature.

842
00:43:33,670 --> 00:43:35,850
I don't want to sign my
extension every time.

843
00:43:35,850 --> 00:43:39,150
So, of course there is a
method to load new extension

844
00:43:39,150 --> 00:43:40,810
as developer, right?

845
00:43:40,810 --> 00:43:42,080
So yes, you're right.

846
00:43:42,080 --> 00:43:45,240
There is like an unpacked
mode that helps developers

847
00:43:45,240 --> 00:43:49,160
load their extensions without
verifying the signatures

848
00:43:49,160 --> 00:43:52,780
and without verifying anything
regarding the extensions

849
00:43:52,780 --> 00:43:57,580
for compatibility and to
check their extensions.

850
00:43:57,580 --> 00:43:59,990
So the scenario is that you manage

851
00:43:59,990 --> 00:44:02,750
to run code over user device.

852
00:44:02,750 --> 00:44:06,133
These are post exploitation
and method like,

853
00:44:08,440 --> 00:44:11,420
I propose like a post
exploitation technique,

854
00:44:11,420 --> 00:44:16,420
which consider installing
new persistent JavaScript,

855
00:44:16,467 --> 00:44:18,500
put it inside your machine.

856
00:44:18,500 --> 00:44:21,440
And the way we can actually
do it is actually exploit

857
00:44:21,440 --> 00:44:25,250
these unpacked mode to
replace previous extension.

858
00:44:25,250 --> 00:44:28,320
The extension will look almost the same.

859
00:44:28,320 --> 00:44:31,370
The user won't even notice
because it's previous extension

860
00:44:31,370 --> 00:44:34,280
we work as suggested
all the, I don't know,

861
00:44:34,280 --> 00:44:36,680
antivirals and stuff, we see that, well,

862
00:44:36,680 --> 00:44:38,840
the extension ID will stay the same,

863
00:44:38,840 --> 00:44:42,060
all will be the same,
so all cool, no problem.

864
00:44:42,060 --> 00:44:46,310
The way we can do it is actually
by adding a new argument,

865
00:44:46,310 --> 00:44:48,960
this new cool argument
called load extension,

866
00:44:48,960 --> 00:44:52,580
we add it to the argument
in the command line,

867
00:44:52,580 --> 00:44:57,580
and this argument gets the path
of the extension to open up.

868
00:44:58,350 --> 00:45:00,640
And when this extension
is actually the same

869
00:45:00,640 --> 00:45:02,410
as the previous extension,

870
00:45:02,410 --> 00:45:05,410
you just replace it without
check the signature,

871
00:45:05,410 --> 00:45:09,150
without checking nothing, and
without even warning the user.

872
00:45:09,150 --> 00:45:11,800
This is really cool, and it's
amazing technique to just,

873
00:45:11,800 --> 00:45:14,730
you can modify specific
files, add this argument,

874
00:45:14,730 --> 00:45:17,890
and then you can replace
every extension you want.

875
00:45:17,890 --> 00:45:20,040
And when you modified with extension,

876
00:45:20,040 --> 00:45:23,480
you can actually also add
any permissions you need.

877
00:45:23,480 --> 00:45:27,793
You can also add file system
access with the file URLs.

878
00:45:29,170 --> 00:45:32,653
You can add so many features
that run in the Chrome context.

879
00:45:33,940 --> 00:45:36,070
You can also access the cookies tabs,

880
00:45:36,070 --> 00:45:38,540
and much much more as I already told you.

881
00:45:38,540 --> 00:45:42,190
And you can also run hiddenly
in a separate hidden context.

882
00:45:42,190 --> 00:45:45,690
So now I show you how hidden
we are in this context

883
00:45:45,690 --> 00:45:48,010
and how it looks like to replace

884
00:45:48,010 --> 00:45:50,300
and use a persistent generic technique

885
00:45:50,300 --> 00:45:53,620
to replace a specific extension.

886
00:45:53,620 --> 00:45:57,240
In this video, I present you the replacing

887
00:45:57,240 --> 00:45:58,340
of the ad-blocker.

888
00:45:58,340 --> 00:46:02,210
You can see that ad-blocker
is installed in your machine.

889
00:46:02,210 --> 00:46:05,850
It installed, like Google tells
you it installed correctly,

890
00:46:05,850 --> 00:46:07,163
no problems.

891
00:46:09,666 --> 00:46:11,940
The ID is correctly,
all installed correctly.

892
00:46:11,940 --> 00:46:15,360
You can see that even if
you go to the extension,

893
00:46:15,360 --> 00:46:19,560
a privacy and the extension privacy area,

894
00:46:19,560 --> 00:46:23,540
you can see it's all looks
the same, but you can see here

895
00:46:23,540 --> 00:46:26,080
that I injected my own JavaScript code,

896
00:46:26,080 --> 00:46:27,500
and this is the main thing.

897
00:46:27,500 --> 00:46:32,110
I injected and modified
these persistent extension

898
00:46:32,110 --> 00:46:35,580
in your PC, but I kept all its data

899
00:46:35,580 --> 00:46:40,000
and all the things inside
of it, almost the same.

900
00:46:40,000 --> 00:46:42,320
And it looks the same,
the extension ID the same,

901
00:46:42,320 --> 00:46:45,810
Chrome is installing legitimate extension,

902
00:46:45,810 --> 00:46:50,020
and it's really cool
technique to inject malwares

903
00:46:50,020 --> 00:46:51,250
inside extensions.

904
00:46:51,250 --> 00:46:55,600
So finally, I would
introduce you the, my utility

905
00:46:55,600 --> 00:46:57,200
which is the maltensions.

906
00:46:57,200 --> 00:47:00,950
These like utilities to help
you generate for testing,

907
00:47:00,950 --> 00:47:02,183
of course, for testing.

908
00:47:03,490 --> 00:47:07,670
JavaScript malwares are
inside the popular extensions,

909
00:47:07,670 --> 00:47:09,583
and actually an extension.

910
00:47:11,208 --> 00:47:14,670
This is the GitHub source and
it has a lot of techniques.

911
00:47:14,670 --> 00:47:16,180
I placed like many techniques,

912
00:47:16,180 --> 00:47:18,430
you can do plug and play inside of them,

913
00:47:18,430 --> 00:47:20,250
easy to comply your own JavaScript

914
00:47:20,250 --> 00:47:23,340
in output of standalone JavaScript.

915
00:47:23,340 --> 00:47:26,250
You can inject as a
payload or as an extension,

916
00:47:26,250 --> 00:47:30,300
you can open up an unpacked
mode, whatever you need.

917
00:47:30,300 --> 00:47:32,190
And it have so many features.

918
00:47:32,190 --> 00:47:34,230
So, to conclude:

919
00:47:34,230 --> 00:47:37,570
First, extension can be useful PEs.

920
00:47:37,570 --> 00:47:39,580
PEs like in the extension world.

921
00:47:39,580 --> 00:47:42,210
Using one extension to
gain more permissions

922
00:47:42,210 --> 00:47:45,550
from another permissionless extension.

923
00:47:45,550 --> 00:47:49,460
The second thing is that
detections will get harder

924
00:47:49,460 --> 00:47:53,160
because it's very hard to find out

925
00:47:53,160 --> 00:47:56,030
like dynamic executions
in JavaScript evaluation

926
00:47:56,030 --> 00:47:57,920
inside new extensions,

927
00:47:57,920 --> 00:48:01,100
and they can do whatever
they want inside of them.

928
00:48:01,100 --> 00:48:02,340
The third thing is that,

929
00:48:02,340 --> 00:48:06,200
well, there are more
attack surfaces to explore.

930
00:48:06,200 --> 00:48:09,790
Attack surfaces are not
considered, only the typical ones,

931
00:48:09,790 --> 00:48:11,800
but more like content scripts

932
00:48:11,800 --> 00:48:14,750
to background scripts attack surface.

933
00:48:14,750 --> 00:48:16,580
Background scripts to websites.

934
00:48:16,580 --> 00:48:19,900
Extension to extensions attack surfaces.

935
00:48:19,900 --> 00:48:23,280
Many of them haven't yet explored so far,

936
00:48:23,280 --> 00:48:25,550
not in this manner before.

937
00:48:25,550 --> 00:48:27,650
Well, and unfortunately it means that,

938
00:48:27,650 --> 00:48:32,010
well, extensions and malicious extensions

939
00:48:32,010 --> 00:48:33,650
are probably here to stay,

940
00:48:33,650 --> 00:48:37,380
and this is the bullet we
need to carry on with us.

941
00:48:37,380 --> 00:48:40,180
Thank you very much, I'm
very happy to be here

942
00:48:40,180 --> 00:48:43,620
and to talk about this presentation.

943
00:48:43,620 --> 00:48:46,533
I hope you learned and
made the best out of it.

