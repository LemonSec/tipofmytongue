1
00:00:00,720 --> 00:00:02,450
- For the last couple of months,

2
00:00:02,450 --> 00:00:05,040
I've been playing with
different SAST tools.

3
00:00:05,040 --> 00:00:06,130
I'm playing with SAST tools

4
00:00:06,130 --> 00:00:11,130
because part of my job and
part of my actually interest

5
00:00:12,300 --> 00:00:16,590
is how to secure code
and then the best way

6
00:00:16,590 --> 00:00:21,590
and doing so, we always
start by playing with SAST.

7
00:00:21,970 --> 00:00:24,900
After SAST, the much
more highest than SAST

8
00:00:24,900 --> 00:00:29,900
but we'll focus about static
tools and I turned to play

9
00:00:32,570 --> 00:00:34,620
with them and abuse
them in different ways.

10
00:00:34,620 --> 00:00:35,643
I will show you how.

11
00:00:36,720 --> 00:00:38,490
So, who am I?

12
00:00:38,490 --> 00:00:39,930
I'm Rotem.

13
00:00:39,930 --> 00:00:41,290
Nice to meet you.

14
00:00:41,290 --> 00:00:43,840
I am the head of marketplace
at Cider Security.

15
00:00:43,840 --> 00:00:48,070
It's a startup I joined a few months ago.

16
00:00:48,070 --> 00:00:50,640
But more important, I'm
a bug bounty researcher.

17
00:00:50,640 --> 00:00:54,820
I play with lots of different
programs over the years

18
00:00:56,270 --> 00:01:01,240
and I'm a Cyber Paladin
for the last 20 years now.

19
00:01:01,240 --> 00:01:05,310
So I started my InfoSec
career 20 years ago,

20
00:01:05,310 --> 00:01:08,150
and then I'm just playing
around with different,

21
00:01:08,150 --> 00:01:11,680
some application testing
to infrastructure testing

22
00:01:11,680 --> 00:01:13,900
to developing a different SAST tools

23
00:01:13,900 --> 00:01:18,503
and now playing and
abusing the SAST tools.

24
00:01:19,540 --> 00:01:21,443
I will show you what I've done.

25
00:01:22,830 --> 00:01:25,420
So, first of all, who
is my target audience?

26
00:01:25,420 --> 00:01:28,210
So I'm talking to the
different type of people,

27
00:01:28,210 --> 00:01:32,290
and I think this will interest
also security engineers

28
00:01:32,290 --> 00:01:34,870
who want to fix problems

29
00:01:34,870 --> 00:01:38,780
and they have to tell other people

30
00:01:38,780 --> 00:01:41,310
where they have gone wrong.

31
00:01:41,310 --> 00:01:42,660
I'm talking to DevOps people

32
00:01:42,660 --> 00:01:45,720
because they are in charge
of large scale deployments,

33
00:01:45,720 --> 00:01:48,380
and everyday we have
more and more automation

34
00:01:48,380 --> 00:01:53,380
and more automated deployments
going out everyday.

35
00:01:57,190 --> 00:01:59,550
SAST Builders, of
course, it's a different,

36
00:01:59,550 --> 00:02:01,470
like this talk is about SAST

37
00:02:01,470 --> 00:02:04,350
so I'm talking with you guys.

38
00:02:04,350 --> 00:02:06,970
And I bet the bad guys,

39
00:02:06,970 --> 00:02:10,170
people who have decided to
harm other people for a living.

40
00:02:10,170 --> 00:02:14,520
I hope none in the audience
here, but if you are,

41
00:02:14,520 --> 00:02:17,393
please go to the good side
and start helping people.

42
00:02:18,510 --> 00:02:21,720
So a bit about what
we'll be talking about.

43
00:02:21,720 --> 00:02:24,600
It's SAST, how it works.

44
00:02:24,600 --> 00:02:26,290
I'm going to give a brief intro

45
00:02:26,290 --> 00:02:29,240
about how we can get the works

46
00:02:29,240 --> 00:02:31,350
and why I started this research.

47
00:02:31,350 --> 00:02:35,350
I will show up the hacking
and what I've done,

48
00:02:35,350 --> 00:02:37,710
and that will wrap up
with different conclusions

49
00:02:37,710 --> 00:02:40,740
and what is the impact of all of this.

50
00:02:40,740 --> 00:02:43,470
So SAST 101.

51
00:02:43,470 --> 00:02:44,400
What is SAST?

52
00:02:44,400 --> 00:02:47,880
SAST is static application
security testing.

53
00:02:47,880 --> 00:02:51,880
This means that we are
testing applications

54
00:02:51,880 --> 00:02:52,923
in a static manner.

55
00:02:54,570 --> 00:02:56,570
So I went to Wikipedia

56
00:02:56,570 --> 00:03:00,940
and Wikipedia says very, very easy,

57
00:03:00,940 --> 00:03:03,400
that static program
analysis is the analysis

58
00:03:03,400 --> 00:03:06,270
of computer software that is performed

59
00:03:06,270 --> 00:03:09,343
without actually executing any programs.

60
00:03:11,000 --> 00:03:16,000
This is very important
because static analysis

61
00:03:16,145 --> 00:03:20,240
can happen on different targets

62
00:03:20,240 --> 00:03:22,310
with different types of class

63
00:03:22,310 --> 00:03:24,920
and we don't want to execute any programs.

64
00:03:24,920 --> 00:03:27,700
Let's say that we have different puzzles

65
00:03:27,700 --> 00:03:31,040
that do execute programs and
their sandbox environments,

66
00:03:31,040 --> 00:03:35,903
but SAST was supposed
not to execute nothing.

67
00:03:37,100 --> 00:03:39,037
So why do we run the SAST?

68
00:03:43,192 --> 00:03:45,787
The first thing is to stop
bad security practices.

69
00:03:46,660 --> 00:03:50,170
We want to make sure that nobody

70
00:03:50,170 --> 00:03:53,537
and so it's a bad code
into an organization.

71
00:03:56,260 --> 00:03:58,390
We want to prevent infrastructure mistakes

72
00:03:58,390 --> 00:04:00,600
and now we have lots of
infrastructure as code

73
00:04:00,600 --> 00:04:03,320
and we want to assess code.

74
00:04:03,320 --> 00:04:07,380
So if we have like a big security test,

75
00:04:07,380 --> 00:04:11,120
sometimes I will run a bunch of SAST tools

76
00:04:11,120 --> 00:04:13,400
to check the code.

77
00:04:13,400 --> 00:04:15,330
And they want to create standardization

78
00:04:15,330 --> 00:04:18,840
and consistency across lots of codes.

79
00:04:18,840 --> 00:04:23,840
So let's say, there was
no eval in our code.

80
00:04:23,870 --> 00:04:24,703
We can create a rule.

81
00:04:24,703 --> 00:04:29,610
No eval and we run it and
it would be standardized.

82
00:04:33,890 --> 00:04:36,020
So why SAST?

83
00:04:36,020 --> 00:04:38,930
And we have different pros vs cons.

84
00:04:38,930 --> 00:04:42,410
But the pros, it's very fast.

85
00:04:42,410 --> 00:04:44,120
It can run on code.

86
00:04:44,120 --> 00:04:46,890
Different SAST have different like times,

87
00:04:46,890 --> 00:04:48,990
but it's much faster than SAST

88
00:04:48,990 --> 00:04:53,390
and much faster than other
fuzzing and various solutions.

89
00:04:53,390 --> 00:04:54,266
It's safe.

90
00:04:54,266 --> 00:04:58,700
It doesn't execute any code and it's easy.

91
00:04:58,700 --> 00:05:00,110
We can run on the code.

92
00:05:00,110 --> 00:05:03,150
We usually don't need any other resources.

93
00:05:03,150 --> 00:05:05,130
Sometimes we have inputs
and stuff like that,

94
00:05:05,130 --> 00:05:09,660
but usually, it's inside
the same code based

95
00:05:09,660 --> 00:05:12,623
and we don't need
external resources for it.

96
00:05:14,916 --> 00:05:18,230
About the cons, we have
lots of false positives.

97
00:05:18,230 --> 00:05:23,230
Like SAST can do as much
as looking at the code,

98
00:05:23,570 --> 00:05:25,560
but it doesn't know what's the logic

99
00:05:25,560 --> 00:05:28,970
and it doesn't know how was it use.

100
00:05:28,970 --> 00:05:31,370
It's very hard to track a flow control.

101
00:05:31,370 --> 00:05:34,930
So if you have lots of complex flows,

102
00:05:34,930 --> 00:05:37,537
SAST will be a nightmare over you.

103
00:05:41,110 --> 00:05:43,870
Not why SAST, but how do they work?

104
00:05:43,870 --> 00:05:47,460
How does the scanners work exactly?

105
00:05:47,460 --> 00:05:49,820
So, first of all, the
scanners take the code.

106
00:05:49,820 --> 00:05:51,820
They pass the code and
they look for different,

107
00:05:51,820 --> 00:05:53,130
let's say, job script.

108
00:05:53,130 --> 00:05:54,980
So they look for job script files

109
00:05:55,920 --> 00:05:59,880
and then they start converting
these JavaScript text files

110
00:05:59,880 --> 00:06:01,203
into AST structures.

111
00:06:02,187 --> 00:06:06,910
AST is a structure of how to template code

112
00:06:06,910 --> 00:06:09,810
in a way we can process it later.

113
00:06:09,810 --> 00:06:11,770
So after we create the say, standard,

114
00:06:11,770 --> 00:06:14,330
we'll show you later how it looks like.

115
00:06:14,330 --> 00:06:16,290
We start processing it.

116
00:06:16,290 --> 00:06:17,773
When we process the code,

117
00:06:21,260 --> 00:06:24,970
in basic, we have different
rules and different findings

118
00:06:26,830 --> 00:06:28,020
where we want to look for.

119
00:06:28,020 --> 00:06:29,830
And then the more complex SAST,

120
00:06:29,830 --> 00:06:31,320
we have flow control analysis,

121
00:06:31,320 --> 00:06:34,830
and we start looking
for sources and sinks.

122
00:06:34,830 --> 00:06:36,660
But then we have all the results

123
00:06:36,660 --> 00:06:39,420
and we'll create a result based on SAST.

124
00:06:39,420 --> 00:06:40,910
Usually today, we have SARIF.

125
00:06:40,910 --> 00:06:43,610
It's a really fun format

126
00:06:43,610 --> 00:06:46,600
that lots of tools are starting to adapt.

127
00:06:46,600 --> 00:06:48,680
And we are working with this

128
00:06:48,680 --> 00:06:50,670
and we are creating the results,

129
00:06:50,670 --> 00:06:52,703
so other systems can not consume them.

130
00:06:54,270 --> 00:06:56,030
Let's take an example.

131
00:06:56,030 --> 00:06:59,993
If we have a Log one plus two times three.

132
00:07:01,340 --> 00:07:02,630
It's a very simple function

133
00:07:02,630 --> 00:07:04,643
that does a arithmetic computation.

134
00:07:05,610 --> 00:07:07,547
And how does it look like in AST?

135
00:07:08,790 --> 00:07:12,060
So, first of all, if we look
at the binary of the tree,

136
00:07:12,060 --> 00:07:17,060
so we see the program,
the CallExpression is Log.

137
00:07:17,260 --> 00:07:20,530
It has a plus expression.

138
00:07:20,530 --> 00:07:22,950
And then there's a split like one,

139
00:07:22,950 --> 00:07:27,950
and because times is before
class, this is a basic math,

140
00:07:28,170 --> 00:07:30,030
so we have split over there

141
00:07:30,030 --> 00:07:32,353
and then there's the two and a three.

142
00:07:33,300 --> 00:07:38,300
Sometimes these AST are by ANTLR.

143
00:07:38,340 --> 00:07:41,900
It's like the structuring
tokenize of a language

144
00:07:41,900 --> 00:07:45,790
or by other means, it doesn't
matter how it created it

145
00:07:45,790 --> 00:07:48,670
but then it creates this too.

146
00:07:48,670 --> 00:07:52,922
From this tree, we can create JSON or XML

147
00:07:52,922 --> 00:07:55,280
or however we want to represent it

148
00:07:55,280 --> 00:07:58,540
but we are creating the data

149
00:07:58,540 --> 00:08:01,200
that we can start looking up on it.

150
00:08:01,200 --> 00:08:03,227
So let's say, we have
here a CallExpression

151
00:08:03,227 --> 00:08:04,070
in the identifier.

152
00:08:04,070 --> 00:08:06,370
Again, we have a callee and arguments

153
00:08:06,370 --> 00:08:07,980
and you can see the binary expression,

154
00:08:07,980 --> 00:08:10,100
so now we can start walking the two

155
00:08:10,100 --> 00:08:12,650
and start understanding
what's happening over here.

156
00:08:13,750 --> 00:08:16,333
If we take a basic rule, let's say,

157
00:08:18,900 --> 00:08:22,630
if this is a CallExpression
and we have a log

158
00:08:23,980 --> 00:08:27,630
and the length is above
zero, we have arguments,

159
00:08:27,630 --> 00:08:29,660
then we can say there's a log function

160
00:08:29,660 --> 00:08:31,333
with more than one argument.

161
00:08:34,970 --> 00:08:36,410
It can get complex.

162
00:08:36,410 --> 00:08:41,410
We can have more very flow control

163
00:08:41,410 --> 00:08:44,190
and a very complex architectures.

164
00:08:44,190 --> 00:08:47,470
So let's say we have this if and then,

165
00:08:47,470 --> 00:08:50,780
and all this goes into a
variable we call source.

166
00:08:50,780 --> 00:08:52,063
We target as a source.

167
00:08:53,060 --> 00:08:55,260
And then we create another argument,

168
00:08:55,260 --> 00:08:58,193
another look up forward sinks.

169
00:09:00,306 --> 00:09:03,070
If we using nil for JSON or
some other graph database,

170
00:09:03,070 --> 00:09:05,450
we can start connecting sinks and source

171
00:09:05,450 --> 00:09:09,860
and seeing the whole trace,
and then if data source,

172
00:09:09,860 --> 00:09:11,990
we can report a finding.

173
00:09:11,990 --> 00:09:14,793
So it can get very complex and very fast,

174
00:09:17,240 --> 00:09:21,523
but still it's very
functional, it's very static.

175
00:09:23,640 --> 00:09:25,663
We never executed the code.

176
00:09:27,470 --> 00:09:32,210
So as Wikipedia said, it clearly
doesn't execute the code.

177
00:09:32,210 --> 00:09:36,630
We don't have any execution
over here and we are good to go

178
00:09:36,630 --> 00:09:39,480
and we can start using the SAST to assess

179
00:09:39,480 --> 00:09:44,480
even the most malicious programs
and malicious code areas.

180
00:09:46,000 --> 00:09:49,133
So my hypothesis and my question was,

181
00:09:50,209 --> 00:09:55,209
what if I could write code
that will intentionally abuse

182
00:09:56,780 --> 00:10:01,780
a scanner once statically scanned?

183
00:10:02,730 --> 00:10:07,280
So this means, can I
create a method or way

184
00:10:07,280 --> 00:10:12,280
with these areas to change
the behavior of the scanner?

185
00:10:15,210 --> 00:10:17,123
To abuse it or change it though.

186
00:10:19,000 --> 00:10:22,200
So I looked up at different
previously researches

187
00:10:22,200 --> 00:10:24,800
and we had in the past,

188
00:10:24,800 --> 00:10:27,483
there was a Checkov remote code execution.

189
00:10:28,330 --> 00:10:29,240
It was fixed.

190
00:10:29,240 --> 00:10:31,920
And then I Checkov 2 one day created it.

191
00:10:31,920 --> 00:10:35,510
Someone could create a
malicious terraform file.

192
00:10:35,510 --> 00:10:36,900
And with this terraform file,

193
00:10:36,900 --> 00:10:41,140
it could execute code inside Checkov

194
00:10:41,140 --> 00:10:44,130
and the one executing the code had access

195
00:10:44,130 --> 00:10:46,993
to the whole environment
of work was executed.

196
00:10:48,140 --> 00:10:50,570
And there was a very
simple Checkov walkaround.

197
00:10:50,570 --> 00:10:53,290
Do not run Checkov on terraform file

198
00:10:53,290 --> 00:10:56,100
from untrusted sources or pull requests.

199
00:10:56,100 --> 00:11:00,160
But I want to run Checkov
on untested sources.

200
00:11:00,160 --> 00:11:01,960
This is why I'm doing it.

201
00:11:01,960 --> 00:11:05,540
So it's a bit of a mix.

202
00:11:05,540 --> 00:11:08,363
So they fixed it and now, I feel I'm okay,

203
00:11:09,237 --> 00:11:13,180
and I can run again Checkov.

204
00:11:13,180 --> 00:11:18,050
But I was playing with, it was a repo,

205
00:11:18,050 --> 00:11:20,423
but you can use it also as a SAST.

206
00:11:22,470 --> 00:11:25,630
It's a Clojure repo that you
can use also as a SAST tool

207
00:11:25,630 --> 00:11:27,433
and create different types of rules,

208
00:11:28,300 --> 00:11:30,790
and I will expand about it a bit later.

209
00:11:30,790 --> 00:11:35,790
But I opened a bug about it
that it actually evaluates code.

210
00:11:36,620 --> 00:11:40,670
I will show you exactly what
it does and how it does it,

211
00:11:40,670 --> 00:11:45,080
but in the comment I got, I
talked to the guy over there

212
00:11:45,080 --> 00:11:48,350
and they said, "okay, but this
is how this kind of works."

213
00:11:48,350 --> 00:11:51,680
And we have nothing to do about it.

214
00:11:51,680 --> 00:11:53,343
Maybe add the computation.

215
00:11:55,640 --> 00:11:58,120
So I'm looking at terraform.

216
00:11:58,120 --> 00:12:02,250
Terraform was actually,
it's not SAST, I know,

217
00:12:02,250 --> 00:12:06,510
but we do have different SAST scanners

218
00:12:06,510 --> 00:12:11,343
like Snyk or Terrascan that
do rely on the terraform plan.

219
00:12:13,360 --> 00:12:18,250
So one of the recommendations
inside CI/CD environments

220
00:12:18,250 --> 00:12:23,250
is before running like Synk
IaC is to create a TF plan,

221
00:12:24,430 --> 00:12:28,680
and they show here in the
documentation, run terraform plan,

222
00:12:28,680 --> 00:12:31,720
and then terraform will show.

223
00:12:31,720 --> 00:12:33,140
So we have terraform.

224
00:12:33,140 --> 00:12:36,960
Terraform has a plan and then apply.

225
00:12:36,960 --> 00:12:40,530
And in the apply, it
does actually do stuff

226
00:12:40,530 --> 00:12:43,000
with the environment and executes code,

227
00:12:43,000 --> 00:12:46,713
but the plan shouldn't
do anything malicious.

228
00:12:50,350 --> 00:12:53,030
Hiroki Suezawa, someone I talked with

229
00:12:53,030 --> 00:12:57,260
in one of the cloud forums and he pointed

230
00:12:57,260 --> 00:12:59,543
that actually terraform plan can run code.

231
00:13:01,490 --> 00:13:05,080
You can create a terraform provider exec

232
00:13:05,080 --> 00:13:06,930
and you can run code with it.

233
00:13:06,930 --> 00:13:10,980
So if you're running any SAST

234
00:13:10,980 --> 00:13:14,770
that is relying in terraform plan

235
00:13:14,770 --> 00:13:18,300
and the other terraform
plan before the SAST,

236
00:13:18,300 --> 00:13:21,960
then you should know that
someone can create a provider

237
00:13:21,960 --> 00:13:24,310
and you can create even
an unofficial provider

238
00:13:24,310 --> 00:13:29,103
that will download it from
our HTTP server and execute.

239
00:13:32,000 --> 00:13:37,000
So you can see also Alex Casso
has created a very nice blog

240
00:13:37,080 --> 00:13:40,063
about it, but this is other.

241
00:13:41,360 --> 00:13:43,110
So by the hacking time

242
00:13:43,110 --> 00:13:46,050
and now we are going coming
into different stuff.

243
00:13:46,050 --> 00:13:49,963
But first I want to
have a small disclaimer.

244
00:13:50,910 --> 00:13:52,520
I believe in open source

245
00:13:52,520 --> 00:13:57,140
and I think that makes the world secure

246
00:13:57,140 --> 00:14:00,053
and it makes our life
easier with open source,

247
00:14:01,020 --> 00:14:03,510
but we need to use it responsibly,

248
00:14:03,510 --> 00:14:08,510
because open source is not a
full blown commercial tool.

249
00:14:12,670 --> 00:14:17,250
It didn't have the use of
development and lots of clients.

250
00:14:21,400 --> 00:14:22,860
Maybe it didn't have lots of clients,

251
00:14:22,860 --> 00:14:24,820
but it doesn't have enough resources

252
00:14:25,750 --> 00:14:30,750
to always to be in the best
security maturity level.

253
00:14:30,810 --> 00:14:32,600
And we need to understand this,

254
00:14:32,600 --> 00:14:37,150
'cause when we use open source
and I believe in using it,

255
00:14:37,150 --> 00:14:40,950
but we need to make sure that we run it

256
00:14:40,950 --> 00:14:44,680
and we treat it as something
that it's not fully baked

257
00:14:48,590 --> 00:14:52,250
or it's not like some are more
mature, some are less mature,

258
00:14:52,250 --> 00:14:55,800
and we have to know about these areas.

259
00:14:55,800 --> 00:14:59,980
And one of the parts of my
mission and what I want to do

260
00:14:59,980 --> 00:15:04,980
is to make sure that it
will be safer and safer

261
00:15:04,980 --> 00:15:09,980
to use open source in
companies and in real life.

262
00:15:10,760 --> 00:15:13,230
But for starters, we have to make sure

263
00:15:13,230 --> 00:15:17,200
that we are running in a safe environment

264
00:15:17,200 --> 00:15:18,770
and that everything is configurable,

265
00:15:18,770 --> 00:15:22,313
then we know how to configure it properly.

266
00:15:23,580 --> 00:15:26,150
So that's about that.

267
00:15:26,150 --> 00:15:28,040
But my experiment.

268
00:15:28,040 --> 00:15:30,023
So my experiment is very simple.

269
00:15:32,207 --> 00:15:37,207
I looked at different
scanners like collected

270
00:15:40,450 --> 00:15:41,930
through my experience.

271
00:15:41,930 --> 00:15:44,930
And then I started looking
at how they will execute

272
00:15:44,930 --> 00:15:47,800
or what can I do with them?

273
00:15:47,800 --> 00:15:50,970
And they created different
kinds of evil files.

274
00:15:50,970 --> 00:15:51,970
What is evil files?

275
00:15:51,970 --> 00:15:55,070
I will show you in the
experiments there now,

276
00:15:55,070 --> 00:15:57,593
but I'm adding these
evil files to the repo.

277
00:15:58,580 --> 00:16:03,320
I'm letting the environment clone the repo

278
00:16:04,280 --> 00:16:07,130
and then assuming the scanner will walk

279
00:16:07,130 --> 00:16:11,230
in the same working
directory as the repo clone.

280
00:16:11,230 --> 00:16:15,790
Now, this is a assumption
based on different levels

281
00:16:15,790 --> 00:16:20,690
of knowledge in companies and
they saw in lots of places,

282
00:16:20,690 --> 00:16:24,240
the scanners are running inside
the same working directory

283
00:16:24,240 --> 00:16:26,890
as the repo and scanning themselves,

284
00:16:26,890 --> 00:16:28,373
scanning the repo itself.

285
00:16:29,593 --> 00:16:31,110
Then executing the scanner

286
00:16:31,110 --> 00:16:33,170
and they want to see what's the outcome.

287
00:16:33,170 --> 00:16:34,143
What can I do?

288
00:16:35,830 --> 00:16:38,073
So experiment number one, Checkov.

289
00:16:39,540 --> 00:16:42,067
Before we had the rce on Checkhov

290
00:16:42,067 --> 00:16:45,660
and this is why I started looking at it.

291
00:16:45,660 --> 00:16:48,420
And they started looking
and edit the commendation

292
00:16:48,420 --> 00:16:52,090
and they saw that Checkov
is actually running against,

293
00:16:52,090 --> 00:16:53,940
you can run it against the directory.

294
00:16:54,820 --> 00:16:56,580
Against a working directory.

295
00:16:56,580 --> 00:16:59,860
The same working directory
or the home directory,

296
00:16:59,860 --> 00:17:03,520
and once you are running
against the directory,

297
00:17:03,520 --> 00:17:07,580
it looks for a .checkov.yml file

298
00:17:07,580 --> 00:17:09,143
to load it as a config file.

299
00:17:10,320 --> 00:17:14,240
This is interesting, because
it's actually how you need

300
00:17:14,240 --> 00:17:17,183
to work with Chekhov or
with other SAST tools.

301
00:17:18,361 --> 00:17:22,160
The SAST tools as you
develop different changes

302
00:17:22,160 --> 00:17:27,160
and different types of levels
of maturity inside the code

303
00:17:27,920 --> 00:17:32,310
and developers are able to skip rules

304
00:17:32,310 --> 00:17:37,310
and optimize each repo according
to what they want to do.

305
00:17:39,550 --> 00:17:44,550
But this means that also,
if I will take a repo,

306
00:17:46,290 --> 00:17:48,070
I would scan it.

307
00:17:48,070 --> 00:17:52,213
And I added the checkov.yml
file into the repo,

308
00:17:53,420 --> 00:17:56,300
I can say, check none.

309
00:17:56,300 --> 00:18:01,300
I can give it a check none file.

310
00:18:01,470 --> 00:18:03,120
What will happen is that the Checkov

311
00:18:03,120 --> 00:18:05,560
will pick the configuration up

312
00:18:05,560 --> 00:18:10,560
if there's no forced
configuration and it's big if

313
00:18:12,580 --> 00:18:16,130
but most or lots of places I saw

314
00:18:16,130 --> 00:18:18,913
don't have force configuration.

315
00:18:19,830 --> 00:18:23,220
So it will actually not scan the code.

316
00:18:23,220 --> 00:18:26,523
It will give you everything is okay.

317
00:18:27,669 --> 00:18:32,669
This is in a philosophical
way, a question.

318
00:18:34,360 --> 00:18:37,810
If this is how we should run code,

319
00:18:37,810 --> 00:18:42,420
because we are giving the
developer lots of permission

320
00:18:42,420 --> 00:18:46,013
and lots of ability to configure properly

321
00:18:50,560 --> 00:18:52,900
what he wants to do, but at the same time,

322
00:18:52,900 --> 00:18:56,170
we are giving him the
permission to do nothing.

323
00:18:56,170 --> 00:18:58,050
To say, just skip it.

324
00:18:58,050 --> 00:19:03,050
Let's bypass security altogether
and just leave me alone.

325
00:19:05,650 --> 00:19:06,860
This is a good question

326
00:19:06,860 --> 00:19:10,113
about what is the
security team I should do?

327
00:19:11,670 --> 00:19:13,570
Let's look at a demo.

328
00:19:13,570 --> 00:19:17,163
Here we took TerraGoat, a TerraGoat is,

329
00:19:19,420 --> 00:19:21,020
let's see if we can see it here.

330
00:19:22,083 --> 00:19:23,640
(Rotem speaking faintly)

331
00:19:23,640 --> 00:19:24,473
We talked TerraGoat.

332
00:19:24,473 --> 00:19:29,030
TerraGoat is a repo that
has lots of problems

333
00:19:30,251 --> 00:19:32,170
for the Checkov, and you can see,

334
00:19:32,170 --> 00:19:33,873
we have lots of fair checks.

335
00:19:35,511 --> 00:19:38,504
Then the echo, this is
a very important thing.

336
00:19:38,504 --> 00:19:41,350
The tone code is one.

337
00:19:41,350 --> 00:19:42,750
One means there was a problem

338
00:19:42,750 --> 00:19:47,463
and if it was in a CI/CD
environment, it would fail.

339
00:19:49,070 --> 00:19:51,870
Now I'm echoing again the same thing,

340
00:19:51,870 --> 00:19:55,203
but I'm adding the bypass
checks into .checkov.yml

341
00:19:56,268 --> 00:19:57,760
and running again Checkov.

342
00:20:00,400 --> 00:20:01,680
Nothing.

343
00:20:01,680 --> 00:20:02,570
Everything is good.

344
00:20:02,570 --> 00:20:04,080
There are no errors, no nothing.

345
00:20:04,080 --> 00:20:05,343
Their code is zero.

346
00:20:06,220 --> 00:20:07,563
Everything is awesome.

347
00:20:08,400 --> 00:20:13,400
So this means with a very
simple adding of the rule,

348
00:20:14,103 --> 00:20:15,563
I think of this file,

349
00:20:17,470 --> 00:20:21,780
we bypass the whole scanner configuration.

350
00:20:21,780 --> 00:20:26,780
So after we saw what
we can do with Checkov,

351
00:20:28,360 --> 00:20:31,860
I looked into different other tools

352
00:20:31,860 --> 00:20:35,620
and they all, as I say though,
by definition or not all,

353
00:20:35,620 --> 00:20:39,070
but lots of them give you
the same configuration,

354
00:20:39,070 --> 00:20:40,710
the same ability.

355
00:20:40,710 --> 00:20:42,910
They have a different configuration file.

356
00:20:42,910 --> 00:20:47,910
You can create it and then
bypass or create different rules.

357
00:20:48,960 --> 00:20:52,930
And we can see here, PHP Stan,
Tfsec, and KICS, and Bandit,

358
00:20:52,930 --> 00:20:55,340
and Brakeman, Checkov and SEMGREP

359
00:20:55,340 --> 00:20:58,163
and I'm sure there are
more that I didn't check.

360
00:20:59,240 --> 00:21:00,860
We have the different configuration.

361
00:21:00,860 --> 00:21:02,710
If you put this different configuration,

362
00:21:02,710 --> 00:21:04,890
tell them bypass our rules,

363
00:21:04,890 --> 00:21:07,064
they will bypass all the rules.

364
00:21:07,064 --> 00:21:10,090
You can see there's so
many stars on the scanners.

365
00:21:10,090 --> 00:21:14,713
I think it's about like
12, 15, we have 25.

366
00:21:16,230 --> 00:21:18,970
We have lots of get up stars.

367
00:21:18,970 --> 00:21:21,570
Over here, let's say get
up stars we are looking at.

368
00:21:25,609 --> 00:21:27,031
Before we went more,

369
00:21:27,031 --> 00:21:29,633
I want to emphasize and talk
about the scanners hijacking.

370
00:21:33,730 --> 00:21:36,710
So what have we done?

371
00:21:36,710 --> 00:21:40,660
We were able to add all
the source code in a manner

372
00:21:40,660 --> 00:21:43,500
that we were able to manipulate

373
00:21:43,500 --> 00:21:45,400
and abuse how this kinda works,

374
00:21:45,400 --> 00:21:47,640
this kind of behavior itself.

375
00:21:47,640 --> 00:21:52,640
So if someone adds a file inside
a repo and I'm running it,

376
00:21:55,967 --> 00:21:59,070
I'm able to tell them
now everything is okay,

377
00:21:59,070 --> 00:22:00,353
just skip skittling.

378
00:22:03,300 --> 00:22:05,190
Sometimes it's good that we can do it

379
00:22:05,190 --> 00:22:06,917
and sometimes we don't know about it

380
00:22:06,917 --> 00:22:09,210
and we don't have the proper visibility

381
00:22:10,120 --> 00:22:11,810
if someone really did it.

382
00:22:11,810 --> 00:22:16,070
Like I don't look at
all the files out there

383
00:22:16,070 --> 00:22:19,710
in my 1,000 peoples inside my organization

384
00:22:19,710 --> 00:22:23,960
and start looking did
someone manipulate and abuse

385
00:22:23,960 --> 00:22:27,230
and bypass my scanners.

386
00:22:27,230 --> 00:22:29,180
Like this of what I'm doing.

387
00:22:29,180 --> 00:22:30,720
The scanners don't tell you,

388
00:22:30,720 --> 00:22:34,173
ah someone bypassed me, please check this.

389
00:22:36,170 --> 00:22:39,200
So that's a good place to think about

390
00:22:39,200 --> 00:22:42,233
and understand what we want to
do with this for the future.

391
00:22:43,820 --> 00:22:44,880
Let's go, this is DEF CON.

392
00:22:44,880 --> 00:22:47,823
So I'm going into experiment number two,

393
00:22:47,823 --> 00:22:49,750
and this is much more interesting.

394
00:22:49,750 --> 00:22:52,490
So I continued to look inside Checkov

395
00:22:52,490 --> 00:22:55,680
and I saw there is external checks there.

396
00:22:55,680 --> 00:22:59,513
Now does a directory for
custom checks to be loaded?

397
00:23:00,870 --> 00:23:04,283
I like custom checks, because
custom checks means code.

398
00:23:05,380 --> 00:23:08,710
So looking at the different what I can do.

399
00:23:08,710 --> 00:23:13,420
So again, I created a repo
that I can clone it, scan it.

400
00:23:13,420 --> 00:23:15,580
It has .checkov.yml inside.

401
00:23:15,580 --> 00:23:17,540
I load the configuration.

402
00:23:17,540 --> 00:23:21,410
And inside, I tell it,
go to external checks,

403
00:23:21,410 --> 00:23:23,980
so inside the directory checks.

404
00:23:23,980 --> 00:23:26,990
Now I can call the clone,
I can call the repo.

405
00:23:26,990 --> 00:23:31,333
So I created a directory with
that checks with init py,

406
00:23:32,330 --> 00:23:36,680
and then inside, I can create
any Python file I want,

407
00:23:36,680 --> 00:23:37,970
and it will load it.

408
00:23:37,970 --> 00:23:41,320
Like one Checkov will scan,

409
00:23:41,320 --> 00:23:45,323
it will first load my
files and execute them.

410
00:23:46,250 --> 00:23:51,120
So now not only I'm able to
bypass the configuration.

411
00:23:51,120 --> 00:23:56,120
I'm actually able to execute
code inside the environment

412
00:23:57,000 --> 00:23:59,493
that the scanner is running.

413
00:24:01,820 --> 00:24:05,630
And let's see a demo about
this what we have in demos.

414
00:24:05,630 --> 00:24:07,858
So I created here like I have my pipeline

415
00:24:07,858 --> 00:24:10,290
that is waiting for an event.

416
00:24:10,290 --> 00:24:14,310
I have a rce file over here

417
00:24:14,310 --> 00:24:19,310
and I created a .checkov.yml
file with different tunnels.

418
00:24:19,720 --> 00:24:21,650
Inside the tunnel, it just creates it,

419
00:24:21,650 --> 00:24:25,446
cause the rce.sh with Checkov.

420
00:24:25,446 --> 00:24:27,790
Rce.sh just send something to my pipeline

421
00:24:27,790 --> 00:24:31,230
so I get on call, I don't remember.

422
00:24:31,230 --> 00:24:33,730
And as you see, at the
moment I run checkov,

423
00:24:33,730 --> 00:24:34,680
I see a post.

424
00:24:34,680 --> 00:24:36,630
I got something from Checkov.

425
00:24:36,630 --> 00:24:41,630
I even see it had a picash
complied to my files,

426
00:24:41,710 --> 00:24:43,590
I side it's stuff.

427
00:24:43,590 --> 00:24:45,380
So it's actually pretty cool.

428
00:24:45,380 --> 00:24:48,360
Now with this command
execution, I can execute.

429
00:24:48,360 --> 00:24:49,930
I can access environ variables.

430
00:24:49,930 --> 00:24:52,763
I can access different networks.

431
00:24:53,620 --> 00:24:56,020
I'm actually running as
the scanners themselves.

432
00:24:58,010 --> 00:24:59,993
So that's important.

433
00:25:01,530 --> 00:25:03,020
Experiment number three.

434
00:25:03,020 --> 00:25:06,203
Now I talked about Kibit
before, about Clojure.

435
00:25:06,203 --> 00:25:09,990
Clojure is a very interesting language.

436
00:25:09,990 --> 00:25:13,363
It's very, very dynamic and very fun.

437
00:25:14,320 --> 00:25:18,900
This is better from the
source code of Kibit.

438
00:25:18,900 --> 00:25:20,900
Those are read file,
and this is how it reads

439
00:25:20,900 --> 00:25:24,523
the files themselves the source code.

440
00:25:24,523 --> 00:25:27,283
It uses a function called read.

441
00:25:28,200 --> 00:25:33,200
Now we have a warning
inside the source code

442
00:25:34,370 --> 00:25:37,840
that you should not use
clojure core read or its string

443
00:25:37,840 --> 00:25:41,080
which is weird, because
every junior developer

444
00:25:41,080 --> 00:25:44,540
will try to read string and read data

445
00:25:44,540 --> 00:25:45,693
from untrusted sources.

446
00:25:47,010 --> 00:25:51,350
So this means that the question is why.

447
00:25:51,350 --> 00:25:55,360
Like you may be asking
why is this a warning?

448
00:25:55,360 --> 00:25:57,640
What read actually does

449
00:25:57,640 --> 00:26:02,640
is reads the Clojure
code and evaluates it.

450
00:26:03,510 --> 00:26:05,350
And then Clojure, we have something called

451
00:26:05,350 --> 00:26:10,260
like a self-evaluating
form and I will get to it

452
00:26:10,260 --> 00:26:13,570
in the later slide, but this is Kibit.

453
00:26:13,570 --> 00:26:15,613
Kibit it as a static code analyzer.

454
00:26:17,040 --> 00:26:21,558
It takes some code and
then when you run it,

455
00:26:21,558 --> 00:26:22,950
you run it to your applying user.

456
00:26:22,950 --> 00:26:26,579
It's lein is like the npm of the Clojure.

457
00:26:26,579 --> 00:26:28,410
You want it to apply and it tells you,

458
00:26:28,410 --> 00:26:29,490
okay, this is a problem.

459
00:26:29,490 --> 00:26:31,573
We'll consider using when instead of if.

460
00:26:33,330 --> 00:26:38,330
But then if you use self-evaluating form,

461
00:26:39,380 --> 00:26:43,800
that's #= something.

462
00:26:43,800 --> 00:26:45,777
This will actually run if you run it

463
00:26:45,777 --> 00:26:47,583
through read the function.

464
00:26:48,550 --> 00:26:52,480
So I created, again, I
load different libraries

465
00:26:52,480 --> 00:26:54,040
because Clojure is very dynamic.

466
00:26:54,040 --> 00:26:56,050
I can load everything I want,

467
00:26:56,050 --> 00:27:00,380
and I did a print line to a shell

468
00:27:00,380 --> 00:27:04,050
to run again the same rce Kibit

469
00:27:04,050 --> 00:27:07,550
and then shut down agents
just to exit nicely.

470
00:27:07,550 --> 00:27:10,500
So I run it line, Kibit, running code

471
00:27:10,500 --> 00:27:13,760
and then I see the exit
code, exit 1: out success.

472
00:27:13,760 --> 00:27:16,553
I'm able to run my code.

473
00:27:18,420 --> 00:27:19,673
Experiment number four.

474
00:27:20,790 --> 00:27:22,803
We see we have pre-processing.

475
00:27:24,300 --> 00:27:29,300
So Rubocop for instance
has a configuration file

476
00:27:31,350 --> 00:27:36,350
that is very cool and very
dynamic and so dynamic.

477
00:27:36,550 --> 00:27:40,543
Once it sees, it'll be
contemplating, it executes it.

478
00:27:42,344 --> 00:27:44,510
I saw in the documentation.

479
00:27:44,510 --> 00:27:46,523
Yeah, let's do get status.

480
00:27:47,490 --> 00:27:52,253
So I just did run rce Rubocop, exit.

481
00:27:53,108 --> 00:27:53,941
It worked.

482
00:27:53,941 --> 00:27:58,830
So the moment I load Rubocop,
it looks for .rubocop.yml,

483
00:28:01,750 --> 00:28:03,433
executes my codes and exit.

484
00:28:04,560 --> 00:28:06,040
Great success.

485
00:28:06,040 --> 00:28:08,040
Experiment number five.

486
00:28:08,040 --> 00:28:10,300
And this is a bit
different than the others,

487
00:28:10,300 --> 00:28:14,550
because I didn't find a PMD any way

488
00:28:14,550 --> 00:28:16,363
to have a configuration file,

489
00:28:17,330 --> 00:28:21,258
but it looks for so much environ variables

490
00:28:21,258 --> 00:28:25,040
and one of the environ
variables is the Java Opts.

491
00:28:25,040 --> 00:28:28,980
So you can tell that what options

492
00:28:28,980 --> 00:28:30,893
to give Java one running PMD.

493
00:28:32,190 --> 00:28:33,983
So I told them, use jar.

494
00:28:35,090 --> 00:28:37,263
Use my jar instead of your jar.

495
00:28:39,070 --> 00:28:41,223
You can run an Eviljar, it works

496
00:28:41,223 --> 00:28:43,760
and you can load the another jar.

497
00:28:43,760 --> 00:28:47,670
But the question is how can I
tell it, the environ valuable?

498
00:28:47,670 --> 00:28:52,620
So in some CI environment,
so in some areas I know

499
00:28:52,620 --> 00:28:56,400
like even I know my sh,
you can create a plugin

500
00:28:56,400 --> 00:29:00,423
that if you see a .env
file, load it automatically.

501
00:29:02,710 --> 00:29:07,710
So if I also submitted
that .env file, ENV,

502
00:29:08,270 --> 00:29:12,360
sometimes it will load
in the environ variables

503
00:29:12,360 --> 00:29:15,353
before running the scanner.

504
00:29:16,310 --> 00:29:19,430
So it's a good way to do stuff.

505
00:29:19,430 --> 00:29:21,503
I played with it.

506
00:29:25,120 --> 00:29:27,930
Some areas I will able to put a .env file

507
00:29:27,930 --> 00:29:32,270
into lower the different
environment variable

508
00:29:32,270 --> 00:29:33,723
and they executed my code.

509
00:29:35,250 --> 00:29:39,140
So if I am concluding and
I have much more scanners

510
00:29:39,140 --> 00:29:42,240
in the pipeline to check
and I have different areas,

511
00:29:42,240 --> 00:29:45,240
but this is a bit about the
stuff that I talked about.

512
00:29:45,240 --> 00:29:47,085
We have Checkov.

513
00:29:47,085 --> 00:29:48,130
For the configuration of file.

514
00:29:48,130 --> 00:29:51,970
Checkov, PHP Stan, Rubocop
for the configuration file.

515
00:29:51,970 --> 00:29:54,450
We have Kibit for code.

516
00:29:54,450 --> 00:29:57,300
I can create code that will execute.

517
00:29:57,300 --> 00:30:01,383
I have PMD and cdxgen and Dep-Scan.

518
00:30:01,383 --> 00:30:02,450
I didn't talk about them,

519
00:30:02,450 --> 00:30:05,953
but same thing with environ variables.

520
00:30:08,568 --> 00:30:11,870
Every time someone shows me now study cos.

521
00:30:11,870 --> 00:30:15,200
I'm checking what the configuration file?

522
00:30:15,200 --> 00:30:18,863
Does it have some kind
of a loading of rules,

523
00:30:19,926 --> 00:30:24,350
and more, more and more.

524
00:30:24,350 --> 00:30:26,353
Every day I'm finding more and more.

525
00:30:27,900 --> 00:30:32,203
So what Wikipedia says is correct.

526
00:30:33,190 --> 00:30:37,133
It doesn't actually execute the program

527
00:30:37,133 --> 00:30:41,963
over the static program, but
it does execute programs.

528
00:30:43,330 --> 00:30:48,210
So I am able to execute
programs for different,

529
00:30:48,210 --> 00:30:51,240
we can call side channels
from the configuration

530
00:30:51,240 --> 00:30:54,920
or from other methods of
the scanners themselves

531
00:30:54,920 --> 00:30:59,920
to be dynamic, but except Kibit
that does execute programs.

532
00:31:00,150 --> 00:31:05,150
So normally, but all the others
are really for the ecosystem

533
00:31:09,130 --> 00:31:11,423
of different work that we are using.

534
00:31:12,900 --> 00:31:17,230
So I'm saying like your
code will probably be able

535
00:31:17,230 --> 00:31:18,833
to execute other programs.

536
00:31:19,790 --> 00:31:21,550
This is something we need to understand

537
00:31:21,550 --> 00:31:23,363
and know and live with.

538
00:31:27,040 --> 00:31:28,790
Big question is what is the impact?

539
00:31:29,750 --> 00:31:31,730
If I'm looking at the impact
and then trying to look

540
00:31:31,730 --> 00:31:34,763
at what it can do to my environment,

541
00:31:42,940 --> 00:31:47,940
then I need to understand
first where I'm gonna get.

542
00:31:48,200 --> 00:31:53,200
So I can run static analysis
in development machines usually

543
00:31:54,090 --> 00:31:58,410
except if someone will do a get
clone from untrusted sources

544
00:31:58,410 --> 00:32:02,570
and just load into his
idea or some other areas,

545
00:32:02,570 --> 00:32:05,790
and the security team
automatically analyzes it.

546
00:32:05,790 --> 00:32:07,870
He decides to analyze it.

547
00:32:07,870 --> 00:32:09,680
This is a risk.

548
00:32:09,680 --> 00:32:11,040
We have security researchers.

549
00:32:11,040 --> 00:32:15,773
If I want to scan untrusted
code, how do I do it?

550
00:32:16,670 --> 00:32:19,777
Because SAST may execute code

551
00:32:19,777 --> 00:32:22,843
and I don't want to execute
the code on my computer.

552
00:32:23,840 --> 00:32:28,840
But my environment and what
I am researching mainly

553
00:32:29,210 --> 00:32:32,373
in the last couple of months is the CI/CD.

554
00:32:33,600 --> 00:32:37,513
So inside the CI/CD, how does it work?

555
00:32:38,500 --> 00:32:41,920
First of all, developers commit and push

556
00:32:41,920 --> 00:32:43,713
to development branches.

557
00:32:45,020 --> 00:32:46,680
When you commit and push,

558
00:32:46,680 --> 00:32:51,143
lots of systems do CI
checks on every push.

559
00:32:52,280 --> 00:32:56,570
They do it in their
internal cloud or in Jenkins

560
00:32:56,570 --> 00:32:59,160
or in other CI environments,

561
00:32:59,160 --> 00:33:02,150
but they run different
types of security testing

562
00:33:03,958 --> 00:33:05,410
on the code so we make sure

563
00:33:05,410 --> 00:33:10,060
that no code will be
insert into production.

564
00:33:10,060 --> 00:33:13,873
But maybe we can attack
the systems themselves.

565
00:33:14,750 --> 00:33:16,533
The next place is the pull request.

566
00:33:20,640 --> 00:33:21,880
I never pull request.

567
00:33:21,880 --> 00:33:25,170
This is the request I want to merge

568
00:33:25,170 --> 00:33:26,820
this code into production.

569
00:33:26,820 --> 00:33:28,760
We are doing lots of checks

570
00:33:28,760 --> 00:33:32,610
and lots of checks usually also done

571
00:33:32,610 --> 00:33:34,230
against the production environment

572
00:33:34,230 --> 00:33:36,770
or against staging environments

573
00:33:36,770 --> 00:33:39,763
that have really credentials into areas.

574
00:33:40,700 --> 00:33:44,270
And lastly, we have merge into production.

575
00:33:44,270 --> 00:33:45,760
So the merge into production,

576
00:33:45,760 --> 00:33:50,080
we can merge from people that by mistake

577
00:33:50,080 --> 00:33:53,933
or by intention, push directly
into the master branch.

578
00:33:55,260 --> 00:33:57,670
And for the pull request.

579
00:33:57,670 --> 00:33:59,790
But the same, we have
to have the CI checks,

580
00:33:59,790 --> 00:34:03,330
and then we need CD deployments to deploy.

581
00:34:03,330 --> 00:34:07,860
Now, this gets tricky because
sometimes companies forget

582
00:34:07,860 --> 00:34:10,270
to separate between the
checks and the deployments

583
00:34:10,270 --> 00:34:12,643
or give too much formations to the checks.

584
00:34:14,810 --> 00:34:16,443
The implications over here.

585
00:34:17,970 --> 00:34:20,300
First of all, I can
extract sensitive data.

586
00:34:20,300 --> 00:34:24,230
We had different attacks in
the last couple of months,

587
00:34:24,230 --> 00:34:28,940
that running code inside
our CI/CD environment,

588
00:34:28,940 --> 00:34:32,520
extracted sensitive data
and like environ variables

589
00:34:32,520 --> 00:34:37,330
and different AWS keys and even code

590
00:34:37,330 --> 00:34:38,910
and send them back home.

591
00:34:38,910 --> 00:34:42,800
If you have access to the
internet, it's problematic.

592
00:34:42,800 --> 00:34:44,773
You can bypass protections.

593
00:34:46,470 --> 00:34:49,130
Let's say we don't even
have command execution,

594
00:34:49,130 --> 00:34:52,293
but we do have the configuration bypass.

595
00:34:53,480 --> 00:34:58,480
We can create like a
policy to bypass the code,

596
00:34:59,760 --> 00:35:04,760
to say, skip security.

597
00:35:04,970 --> 00:35:06,040
I don't need them.

598
00:35:06,040 --> 00:35:06,873
I don't want them.

599
00:35:06,873 --> 00:35:11,240
They were just making it harder for me

600
00:35:11,240 --> 00:35:13,003
to deploy into production.

601
00:35:14,100 --> 00:35:15,760
We can infiltrate the network.

602
00:35:15,760 --> 00:35:19,550
We can go and use this as a stepping stone

603
00:35:19,550 --> 00:35:22,240
inside the network itself.

604
00:35:22,240 --> 00:35:24,270
Lots of good teams I've done.

605
00:35:24,270 --> 00:35:29,090
I played from one place
inside the internal network,

606
00:35:29,090 --> 00:35:33,950
you can stop nmapping, you
can stop going our SNMP.

607
00:35:33,950 --> 00:35:37,060
You can do lots of stuff into other areas,

608
00:35:37,060 --> 00:35:38,983
maybe it's connected.

609
00:35:42,410 --> 00:35:44,050
The last, but most important,

610
00:35:44,050 --> 00:35:46,380
maybe you can deploy as production.

611
00:35:46,380 --> 00:35:49,120
You can skip the CI checks.

612
00:35:49,120 --> 00:35:54,120
You can false deployment through the CI

613
00:35:57,070 --> 00:35:59,313
and this is problematic.

614
00:36:01,332 --> 00:36:03,450
Assume code will execute.

615
00:36:03,450 --> 00:36:06,020
This is my assumptions.

616
00:36:06,020 --> 00:36:09,750
We need to put around
this code as much guards

617
00:36:09,750 --> 00:36:14,260
and lasers and boxes and sandboxes

618
00:36:14,260 --> 00:36:17,200
and different areas we can,

619
00:36:17,200 --> 00:36:22,200
that eventually someone will
find a way to execute code.

620
00:36:22,890 --> 00:36:27,890
If it's from a very small
open source SAST tool

621
00:36:30,980 --> 00:36:35,743
to a very large commercial
SAST tool or some other things

622
00:36:38,270 --> 00:36:40,910
like let's say, code coverage tools.

623
00:36:40,910 --> 00:36:41,743
I don't know.

624
00:36:42,890 --> 00:36:44,460
Someone can hack a code coverage tool.

625
00:36:44,460 --> 00:36:45,583
It can be awesome.

626
00:36:50,180 --> 00:36:54,200
We assume the code will execute,
and if the code executes,

627
00:36:54,200 --> 00:36:59,200
we need to be prepared to make
sure that it can't do nothing

628
00:36:59,700 --> 00:37:00,853
and we know about it.

629
00:37:04,700 --> 00:37:08,940
A bit about before I showed the workflow,

630
00:37:08,940 --> 00:37:13,490
the CI/CD workflow, but
in this attack flow,

631
00:37:13,490 --> 00:37:18,340
I can add code execution to
a scanner configuration file.

632
00:37:18,340 --> 00:37:21,120
We can push new commit into the branch

633
00:37:21,120 --> 00:37:23,130
and then create a PR request.

634
00:37:23,130 --> 00:37:28,130
This is every user inside
the organization can do it.

635
00:37:30,210 --> 00:37:32,970
Sometimes we can do it from the outside,

636
00:37:32,970 --> 00:37:36,210
even let's say, and get up from folk.

637
00:37:36,210 --> 00:37:40,370
Actually get up, fix this
problem or I don't know,

638
00:37:40,370 --> 00:37:44,630
fix but made it much
harder, because now today,

639
00:37:44,630 --> 00:37:49,630
new commits don't execute
the workflow automatically.

640
00:37:50,250 --> 00:37:55,250
And this is lots of attacks,
got stopped in this area,

641
00:37:57,270 --> 00:38:02,030
but other areas are less
mature and do execute code

642
00:38:02,960 --> 00:38:05,433
if you push it to the branch or the PR.

643
00:38:06,550 --> 00:38:09,020
But then one repo will
be scanned by a scanner

644
00:38:09,020 --> 00:38:10,863
and the PR, it will execute.

645
00:38:12,350 --> 00:38:17,350
This execution has access to our network.

646
00:38:19,780 --> 00:38:22,110
Sometimes also it's the same network

647
00:38:22,110 --> 00:38:24,621
and same environ variables
that the deployments

648
00:38:24,621 --> 00:38:27,553
and the CD deployments have.

649
00:38:29,240 --> 00:38:31,890
We can also just skip the whole check

650
00:38:31,890 --> 00:38:34,293
and tell the scanner all is good.

651
00:38:35,630 --> 00:38:37,150
Continue on into production

652
00:38:37,150 --> 00:38:41,140
even that we introduced
very bad code practices

653
00:38:41,140 --> 00:38:43,283
back those or whatever you want.

654
00:38:45,490 --> 00:38:47,580
A bit about high level possible solutions.

655
00:38:47,580 --> 00:38:52,093
I don't want to go into much
here, so just gonna scan this.

656
00:38:53,510 --> 00:38:58,510
A bit the network protected, deny photos,

657
00:38:59,400 --> 00:39:01,500
deny access to the outside,

658
00:39:01,500 --> 00:39:05,040
isolate only what you
need inside the host.

659
00:39:05,040 --> 00:39:08,667
The same great content knows
and pods and run everything

660
00:39:08,667 --> 00:39:11,290
and list play permission,

661
00:39:11,290 --> 00:39:14,210
and then verify everything is deleted.

662
00:39:14,210 --> 00:39:19,210
Sometimes if you have a part
of designing for 10 hours,

663
00:39:19,250 --> 00:39:21,430
maybe it's a crypto mining,

664
00:39:21,430 --> 00:39:24,870
maybe it's just stealing the data.

665
00:39:24,870 --> 00:39:25,890
Monitor everything,

666
00:39:25,890 --> 00:39:28,780
just monitor everything that you can do

667
00:39:28,780 --> 00:39:30,723
and then look for malicious activity.

668
00:39:32,230 --> 00:39:34,440
We need to understand the risks

669
00:39:34,440 --> 00:39:37,320
on running unverified
code inside our laptop

670
00:39:37,320 --> 00:39:40,030
and inside our CI/CD environments.

671
00:39:40,030 --> 00:39:43,490
We need to educate ourselves,
educate the organization,

672
00:39:43,490 --> 00:39:48,490
educate the DevOps in what's the best

673
00:39:48,500 --> 00:39:51,010
and the how to do it properly.

674
00:39:51,010 --> 00:39:53,610
Do what teams on the CI/CD.

675
00:39:53,610 --> 00:39:57,490
We want to verify the tools
we are running are good,

676
00:39:57,490 --> 00:39:59,610
but we don't have enough
resources to do it,

677
00:39:59,610 --> 00:40:02,530
so we need to create a framework.

678
00:40:02,530 --> 00:40:07,530
To check that how we can
ensure that the execution

679
00:40:09,010 --> 00:40:12,573
is running in the most secure way.

680
00:40:14,700 --> 00:40:17,137
Just ensure that your scanner

681
00:40:17,137 --> 00:40:19,850
aren't doing any malicious stuff,

682
00:40:19,850 --> 00:40:23,630
try to stick to SAST, to static

683
00:40:25,850 --> 00:40:28,980
and deny any execution possible.

684
00:40:28,980 --> 00:40:32,360
If you can make sure
configuration is really picked up

685
00:40:32,360 --> 00:40:33,840
by your configuration.

686
00:40:33,840 --> 00:40:35,640
How it code in the configuration.

687
00:40:35,640 --> 00:40:39,670
Lots of tools have option
to hold coded configuration

688
00:40:39,670 --> 00:40:41,920
to something specific.

689
00:40:41,920 --> 00:40:44,950
So it won't pick up the
default configuration files,

690
00:40:44,950 --> 00:40:46,110
also environment variables

691
00:40:46,110 --> 00:40:48,510
and set them if you don't need them,

692
00:40:48,510 --> 00:40:49,910
and the list goes on and on.

693
00:40:52,570 --> 00:40:55,230
I think that security needs

694
00:40:55,230 --> 00:40:57,590
are getting bigger and bigger every day.

695
00:40:57,590 --> 00:41:02,590
I think I see it and we are
getting into massive automation.

696
00:41:04,040 --> 00:41:07,740
We're going into a DevOps deploying

697
00:41:08,870 --> 00:41:13,870
different production features
every minutes, seconds even.

698
00:41:16,340 --> 00:41:18,050
We have to be proactive

699
00:41:18,050 --> 00:41:21,910
and understand the next
generation of attackers

700
00:41:21,910 --> 00:41:26,610
and how they will abuse our
infrastructure, our automations.

701
00:41:26,610 --> 00:41:31,610
How they will attack us from
side channels, from internally,

702
00:41:39,261 --> 00:41:42,678
just abusing automation that we are doing

703
00:41:43,740 --> 00:41:47,243
in order to make our lives
easier, and secure them.

704
00:41:48,683 --> 00:41:50,910
Other study code SAST tools.

705
00:41:50,910 --> 00:41:52,170
It's not only security.

706
00:41:52,170 --> 00:41:53,830
It's also linters.

707
00:41:53,830 --> 00:41:57,940
It's also code coverage,
testing frameworks.

708
00:41:57,940 --> 00:42:01,020
We have much more automations coming on.

709
00:42:01,020 --> 00:42:02,680
We need to deep dive

710
00:42:02,680 --> 00:42:05,283
and understand the
different SAST scanners.

711
00:42:06,150 --> 00:42:09,440
We want to analyze the Wrappers.

712
00:42:09,440 --> 00:42:12,880
Let's say we have GitHub
actions and then talk about it

713
00:42:12,880 --> 00:42:17,050
over here, but different GitHub
actions or Wrapping or Orbs.

714
00:42:19,487 --> 00:42:23,940
Wrapping all scanners and
creating it more difficult

715
00:42:23,940 --> 00:42:26,863
to add configuration files.

716
00:42:30,520 --> 00:42:34,030
It's more difficult to check

717
00:42:34,030 --> 00:42:38,440
if there is a configuration
file to run security.

718
00:42:38,440 --> 00:42:39,640
We need to analyze them.

719
00:42:40,880 --> 00:42:43,270
We need to create a standard
for security working

720
00:42:43,270 --> 00:42:45,643
with code analysis tool of any kind.

721
00:42:48,250 --> 00:42:51,960
I would want the standard,
not only for the output

722
00:42:51,960 --> 00:42:54,740
like sorry for that, as for input

723
00:42:54,740 --> 00:42:57,713
How am I running security code tools?

724
00:42:58,650 --> 00:43:03,650
Maybe do a SAST for
executing security tools.

725
00:43:04,430 --> 00:43:06,540
I don't know, it's a bit meta,

726
00:43:06,540 --> 00:43:09,113
but we have much more to do.

727
00:43:11,680 --> 00:43:14,010
First of all, I want to thank you guys

728
00:43:14,010 --> 00:43:16,360
for coming to my presentation,

729
00:43:16,360 --> 00:43:20,180
and I want to thank all the
open source developers out there

730
00:43:20,180 --> 00:43:22,730
for creating the awesome
tools they are developing.

731
00:43:24,720 --> 00:43:27,160
It's tons of work.

732
00:43:27,160 --> 00:43:30,817
We have millions, thousands
of companies working

733
00:43:32,600 --> 00:43:37,600
with these tools and you're
helping them in so much ways.

734
00:43:38,580 --> 00:43:42,047
I created a bit of a POC
about what I talked about,

735
00:43:42,047 --> 00:43:43,410
CI/CD lamb.

736
00:43:43,410 --> 00:43:45,350
You can check it out over here.

737
00:43:45,350 --> 00:43:47,493
This POC is running great.

738
00:43:49,330 --> 00:43:52,480
Once scanned with different scan tools,

739
00:43:52,480 --> 00:43:54,310
it's time to execute them.

740
00:43:54,310 --> 00:43:57,280
You can just pick it up, try to use it.

741
00:43:57,280 --> 00:43:58,730
Don't attack nobody.

742
00:43:58,730 --> 00:44:01,070
Just do it for research purposes

743
00:44:01,070 --> 00:44:06,070
and start to understand
how can you run it by then?

744
00:44:07,670 --> 00:44:09,683
I started creating a community,

745
00:44:10,620 --> 00:44:12,660
I called it Security Tools DEF CON.

746
00:44:12,660 --> 00:44:15,280
This link code goes to a Slack

747
00:44:15,280 --> 00:44:18,840
and they want to start connecting

748
00:44:18,840 --> 00:44:21,293
between the open source
developers out there.

749
00:44:23,931 --> 00:44:26,610
I don't know, anyone
else that wants to join

750
00:44:26,610 --> 00:44:30,560
and started thinking about how
can we standardize our tools,

751
00:44:30,560 --> 00:44:34,030
how can we create better recommendation

752
00:44:34,030 --> 00:44:38,640
and better ways to make sure

753
00:44:38,640 --> 00:44:42,900
that once people are running our tools,

754
00:44:42,900 --> 00:44:45,033
they're doing it in the most secure way.

755
00:44:46,190 --> 00:44:48,710
Also, I want to raise
awareness about this.

756
00:44:48,710 --> 00:44:51,290
You can pick me up on Twitter.

757
00:44:55,580 --> 00:45:00,400
You can pick me up in the
Slack and I will be in DEF CON.

758
00:45:00,400 --> 00:45:02,590
I will be going around.

759
00:45:02,590 --> 00:45:04,590
Just send me a message.

760
00:45:04,590 --> 00:45:05,423
Hey, let's meet.

761
00:45:05,423 --> 00:45:06,350
I have an idea.

762
00:45:06,350 --> 00:45:07,630
I want to talk.

763
00:45:07,630 --> 00:45:09,390
I will be happy to talk with you

764
00:45:09,390 --> 00:45:13,880
and have a beer, go to a party.

765
00:45:13,880 --> 00:45:14,713
I don't know.

766
00:45:15,890 --> 00:45:16,933
Just hang around.

767
00:45:18,346 --> 00:45:21,803
Thanks again and we'll see you at DEF CON.

