1
00:00:00,290 --> 00:00:02,420
- Hi, I'm gonna be talking to you today

2
00:00:02,420 --> 00:00:05,090
about hacking RFID attendance systems

3
00:00:05,090 --> 00:00:07,990
to be in two places at once.

4
00:00:07,990 --> 00:00:11,240
Our story begins in the
spring of 2020 with an unnamed

5
00:00:11,240 --> 00:00:14,350
18-year-old computer
science undergrad student.

6
00:00:14,350 --> 00:00:17,260
With just two requirements
left, he's about to become

7
00:00:17,260 --> 00:00:19,380
the youngest ever
computer science graduate

8
00:00:19,380 --> 00:00:20,850
from his university.

9
00:00:20,850 --> 00:00:23,780
Unfortunately, as he's
registering for his final semester

10
00:00:23,780 --> 00:00:27,110
of classes, he realizes that
his two remaining courses

11
00:00:27,110 --> 00:00:30,000
are both scheduled that
basically the same time.

12
00:00:30,000 --> 00:00:33,310
But surprisingly, he was
able to register just fine.

13
00:00:33,310 --> 00:00:35,650
At the time, the scheduling
system only checked

14
00:00:35,650 --> 00:00:38,400
whether classes were at
the exact same start time,

15
00:00:38,400 --> 00:00:40,320
not whether they overlapped at all.

16
00:00:40,320 --> 00:00:42,090
So he registered for both classes,

17
00:00:42,090 --> 00:00:44,400
and thought, "Problem solved, I'm in."

18
00:00:44,400 --> 00:00:46,010
The student may, or may not have

19
00:00:46,010 --> 00:00:49,160
actually been attending his
classes regularly anyways,

20
00:00:49,160 --> 00:00:52,600
so how one can be present
in two simultaneous classes

21
00:00:52,600 --> 00:00:54,750
was not at top-of-mind.

22
00:00:54,750 --> 00:00:57,430
And a quick look at the
course syllabi revealed that

23
00:00:57,430 --> 00:01:00,730
between 10 and 15% of the
points were for attendance.

24
00:01:00,730 --> 00:01:03,430
This means that missing half,
or even all of the lectures

25
00:01:03,430 --> 00:01:05,430
shouldn't have been the end of the world.

26
00:01:05,430 --> 00:01:08,340
It wasn't until the week
before classes started that

27
00:01:08,340 --> 00:01:10,430
he decided to look more closely,

28
00:01:10,430 --> 00:01:12,730
and he was surprised to
find a new policy that

29
00:01:12,730 --> 00:01:15,810
students with more than
six unexcused absences

30
00:01:15,810 --> 00:01:17,700
would not be allowed to pass the course.

31
00:01:17,700 --> 00:01:19,980
They would have to retake it.

32
00:01:19,980 --> 00:01:21,090
Well, this was an issue,

33
00:01:21,090 --> 00:01:22,970
because he was so close to graduating,

34
00:01:22,970 --> 00:01:25,650
and he was about to
set a record after all.

35
00:01:25,650 --> 00:01:28,220
So he started thinking
about how these courses

36
00:01:28,220 --> 00:01:30,930
actually enforce their
attendance policies.

37
00:01:30,930 --> 00:01:33,410
What do these large
universities use to keep track

38
00:01:33,410 --> 00:01:35,840
of attendance for
thousands of the students?

39
00:01:35,840 --> 00:01:38,420
Well, it turns out that
this is what they use.

40
00:01:38,420 --> 00:01:40,900
It's an RFID-based polling system

41
00:01:40,900 --> 00:01:44,150
that has become increasingly
popular at universities

42
00:01:44,150 --> 00:01:46,190
due to the ease of conducting attendance

43
00:01:46,190 --> 00:01:49,210
for even large classes
with hundreds of students.

44
00:01:49,210 --> 00:01:51,950
Every student in the course
will be assigned one of these,

45
00:01:51,950 --> 00:01:53,830
a remote with a unique identifier

46
00:01:53,830 --> 00:01:55,960
linked to their student account.

47
00:01:55,960 --> 00:01:58,580
Then throughout the lecture,
instructors will ask

48
00:01:58,580 --> 00:02:01,540
multiple choice questions,
and have students respond

49
00:02:01,540 --> 00:02:04,760
by pressing the corresponding
button on their remote.

50
00:02:04,760 --> 00:02:06,830
The remote will then
broadcast their answer

51
00:02:06,830 --> 00:02:09,750
along with their student ID
back to the base station,

52
00:02:09,750 --> 00:02:12,380
so that after class
instructors can generate

53
00:02:12,380 --> 00:02:14,450
a list of students in attendance,

54
00:02:14,450 --> 00:02:16,500
along with the answer they chose.

55
00:02:16,500 --> 00:02:18,240
So it actually serves a dual purpose,

56
00:02:18,240 --> 00:02:20,920
both enforcing attendance
by requiring students

57
00:02:20,920 --> 00:02:23,180
to actually show up with their remote,

58
00:02:23,180 --> 00:02:25,910
but also serving as a
small quiz each lecture

59
00:02:25,910 --> 00:02:28,300
to make sure students
are paying attention.

60
00:02:28,300 --> 00:02:30,790
Well, it would seem
that this system should

61
00:02:30,790 --> 00:02:34,540
make it impossible to attend
two lectures at the same time.

62
00:02:34,540 --> 00:02:37,450
Even if a student were to
give his remote to a classmate

63
00:02:37,450 --> 00:02:40,010
to answer for him in one of the lectures,

64
00:02:40,010 --> 00:02:43,070
he then wouldn't have the
remote to answer with himself

65
00:02:43,070 --> 00:02:44,550
in another lecture.

66
00:02:44,550 --> 00:02:47,990
So if he's gonna make this
work, he better get creative.

67
00:02:47,990 --> 00:02:50,670
What he could do is try
attending one class,

68
00:02:50,670 --> 00:02:52,130
then attending the other class,

69
00:02:52,130 --> 00:02:55,450
alternating which one he
attends and which one he misses,

70
00:02:55,450 --> 00:02:57,460
but that only gets him
'til the end of February

71
00:02:57,460 --> 00:02:59,050
until he's used up all his drops,

72
00:02:59,050 --> 00:03:01,640
so that doesn't exactly work.

73
00:03:01,640 --> 00:03:04,830
Okay, but maybe he could try
clicking in in one class,

74
00:03:04,830 --> 00:03:07,720
then sprinting across
campus to the other lecture,

75
00:03:07,720 --> 00:03:09,140
and clicking in there,

76
00:03:09,140 --> 00:03:12,530
then sprinting back before
the next question starts.

77
00:03:12,530 --> 00:03:15,730
But our mystery student
isn't exactly Usain Bolt,

78
00:03:15,730 --> 00:03:18,010
so that one might not work either.

79
00:03:18,010 --> 00:03:21,080
What he really needed was a Time-Turner.

80
00:03:21,080 --> 00:03:24,500
It's this magical device from
the "Harry Potter" series

81
00:03:24,500 --> 00:03:28,560
that the students used to take
two classes at the same time

82
00:03:28,560 --> 00:03:30,090
by time traveling.

83
00:03:30,090 --> 00:03:31,890
Now, without the luxury of magic,

84
00:03:31,890 --> 00:03:33,960
he would need the next best thing,

85
00:03:33,960 --> 00:03:35,810
which is of course, hacking,

86
00:03:35,810 --> 00:03:38,010
specifically hacking this system,

87
00:03:38,010 --> 00:03:40,820
the one that actually
enforces his attendance.

88
00:03:40,820 --> 00:03:43,750
If he can get this system
to mark him present

89
00:03:43,750 --> 00:03:46,490
in both classes, he would in effect be

90
00:03:46,490 --> 00:03:49,050
in two places at once.

91
00:03:49,050 --> 00:03:51,870
Well, the bad news is
that this remote uses

92
00:03:51,870 --> 00:03:54,040
completely proprietary hardware

93
00:03:54,040 --> 00:03:57,170
and software to communicate
with the base station.

94
00:03:57,170 --> 00:03:59,330
The good news is that hackers exist,

95
00:03:59,330 --> 00:04:02,320
so of course, it was
quickly reverse engineered

96
00:04:02,320 --> 00:04:05,220
by some colleagues of mine at Cornell.

97
00:04:05,220 --> 00:04:07,660
I've added some links here
to their original paper,

98
00:04:07,660 --> 00:04:09,410
and it's definitely worth a read,

99
00:04:09,410 --> 00:04:12,010
but for now, I'm going
to outline the techniques

100
00:04:12,010 --> 00:04:15,160
they used to approach reverse
engineering this system,

101
00:04:15,160 --> 00:04:17,300
and then I'll explain what they found,

102
00:04:17,300 --> 00:04:21,360
and how it could be exploited
by our hypothetical student.

103
00:04:21,360 --> 00:04:23,580
This is actually a fairly simple device

104
00:04:23,580 --> 00:04:26,050
with only two significant ICs,

105
00:04:26,050 --> 00:04:28,740
the first being an
eight-bit micro-controller

106
00:04:28,740 --> 00:04:30,700
manufactured by NXP,

107
00:04:30,700 --> 00:04:35,080
and the second being a
915-megahertz ISM transceiver

108
00:04:35,080 --> 00:04:37,310
manufactured by Semtech.

109
00:04:37,310 --> 00:04:40,380
All one has to do to
monitor the communications

110
00:04:40,380 --> 00:04:44,030
between these two components
is tap into the data pins

111
00:04:44,030 --> 00:04:46,070
for the SPI bus here,

112
00:04:46,070 --> 00:04:49,350
which is exactly what my
colleagues did to sniff the data

113
00:04:49,350 --> 00:04:51,620
in transit between the two ICs.

114
00:04:51,620 --> 00:04:55,420
It's important to note that
the manufacturer of this device

115
00:04:55,420 --> 00:04:58,400
prevented the firmware from
being directly analyzed

116
00:04:58,400 --> 00:05:01,240
by burning the security program fuse.

117
00:05:01,240 --> 00:05:02,460
They didn't, however, do this

118
00:05:02,460 --> 00:05:04,410
on an earlier version of the device,

119
00:05:04,410 --> 00:05:08,030
so that firmware is now available online.

120
00:05:08,030 --> 00:05:10,700
Another thing my colleagues
did was just packet sniff

121
00:05:10,700 --> 00:05:14,580
the RF signals to see what the
device was emitting directly.

122
00:05:14,580 --> 00:05:18,100
A waterfall plot for the
answer A is shown here.

123
00:05:18,100 --> 00:05:20,840
It seems like the device
is just broadcasting

124
00:05:20,840 --> 00:05:23,260
a single short packet for each response

125
00:05:23,260 --> 00:05:25,220
using 2-FSK modulation

126
00:05:25,220 --> 00:05:29,280
at a bit rate of 152 kilobits per second.

127
00:05:29,280 --> 00:05:30,870
The base station then sends back

128
00:05:30,870 --> 00:05:33,150
a single acknowledgement packet,

129
00:05:33,150 --> 00:05:36,350
although this is less
important for our use case.

130
00:05:36,350 --> 00:05:38,900
The base station and the
remote appear to negotiate

131
00:05:38,900 --> 00:05:41,940
a single fixed frequency for transmitting

132
00:05:41,940 --> 00:05:44,250
and one for receiving,
depending on what channel

133
00:05:44,250 --> 00:05:46,190
they're set to use, although in practice,

134
00:05:46,190 --> 00:05:48,053
it's almost always just AA.

135
00:05:49,740 --> 00:05:52,950
Now, knowing the frequency
and the encoding scheme,

136
00:05:52,950 --> 00:05:55,650
the researchers simply
pressed each of the buttons

137
00:05:55,650 --> 00:05:58,690
A through E, and observed
what the contents

138
00:05:58,690 --> 00:06:02,450
of the resulting answer packet
were, which are shown here.

139
00:06:02,450 --> 00:06:05,250
Surprisingly, the packets
that the remote sends

140
00:06:05,250 --> 00:06:08,070
to the base station are
just five bytes long,

141
00:06:08,070 --> 00:06:10,280
which is just barely
enough space to encode

142
00:06:10,280 --> 00:06:13,930
a device serial number and an
answer with maybe a checksum,

143
00:06:13,930 --> 00:06:17,480
so there can't be that much
more than that going on.

144
00:06:17,480 --> 00:06:20,420
Additionally, only the final
two bytes of each packet

145
00:06:20,420 --> 00:06:22,720
actually change when the answer changes,

146
00:06:22,720 --> 00:06:24,900
so this must be the portion of the message

147
00:06:24,900 --> 00:06:27,200
which encodes the selected answer.

148
00:06:27,200 --> 00:06:29,750
The first three bytes of the
packet are always the same,

149
00:06:29,750 --> 00:06:31,340
which must mean that this is the portion

150
00:06:31,340 --> 00:06:32,930
that encodes the device ID,

151
00:06:32,930 --> 00:06:35,280
so let's look at this part first.

152
00:06:35,280 --> 00:06:37,170
It turns out that what's happening here is

153
00:06:37,170 --> 00:06:39,250
just a basic transposition cipher

154
00:06:39,250 --> 00:06:41,660
that shuffles the bits of the device ID

155
00:06:41,660 --> 00:06:45,670
according to a predetermined
and easily reversible system.

156
00:06:45,670 --> 00:06:47,870
It also turns out that the device IDs,

157
00:06:47,870 --> 00:06:50,300
which have eight hexadecimal digits,

158
00:06:50,300 --> 00:06:52,780
contain a rudimentary built-in checksum,

159
00:06:52,780 --> 00:06:55,080
whereby the fourth byte is just the xor

160
00:06:55,080 --> 00:06:57,060
of the first three bytes.

161
00:06:57,060 --> 00:06:59,950
Just by reversing the
process in this table,

162
00:06:59,950 --> 00:07:02,790
we can now construct the first
part of the answer packet

163
00:07:02,790 --> 00:07:05,260
for any valid device ID.

164
00:07:05,260 --> 00:07:08,230
Now, let's look at the last
two bytes of this message.

165
00:07:08,230 --> 00:07:10,510
The fourth byte of the
message just encodes

166
00:07:10,510 --> 00:07:13,700
the answer choice according
to a predetermined table,

167
00:07:13,700 --> 00:07:16,080
and the fifth and final byte is a checksum

168
00:07:16,080 --> 00:07:19,930
of the entire message
according to this algorithm.

169
00:07:19,930 --> 00:07:21,540
We now have everything we need

170
00:07:21,540 --> 00:07:25,430
to reconstruct the entire
protocol, which is shown here.

171
00:07:25,430 --> 00:07:28,050
All that's left to do is to build a device

172
00:07:28,050 --> 00:07:30,600
that can emulate the legitimate remote,

173
00:07:30,600 --> 00:07:35,450
and it turns out that this
$25 Adafruit Feather M0 board

174
00:07:35,450 --> 00:07:38,970
has all of the hardware
necessary to accomplish this.

175
00:07:38,970 --> 00:07:41,940
The firmware that I wrote to
emulate the polling system

176
00:07:41,940 --> 00:07:44,080
is linked here along with a tutorial

177
00:07:44,080 --> 00:07:45,130
for how to set it up.

178
00:07:45,130 --> 00:07:49,110
The entire firmware compiles
down to less than 10 kilobytes

179
00:07:49,110 --> 00:07:50,610
and can comfortably reside

180
00:07:50,610 --> 00:07:53,210
in the Arduino's built-in flash storage.

181
00:07:53,210 --> 00:07:56,270
But enough talking about
it, let's see it in action.

182
00:07:56,270 --> 00:07:57,910
All right, now for a brief demo.

183
00:07:57,910 --> 00:08:00,740
On my left is the
legitimate polling system,

184
00:08:00,740 --> 00:08:04,010
and as always, if I select
an answer on my remote,

185
00:08:04,010 --> 00:08:07,670
it'll be broadcast, and
received by the base station.

186
00:08:07,670 --> 00:08:10,760
On my right is an Arduino
running the custom firmware

187
00:08:10,760 --> 00:08:13,410
and initialized to a random serial number.

188
00:08:13,410 --> 00:08:16,140
It's connected to my laptop
right now with the USB,

189
00:08:16,140 --> 00:08:18,480
so I can manually send it commands,

190
00:08:18,480 --> 00:08:21,250
and if I instruct it
to broadcast an answer

191
00:08:21,250 --> 00:08:24,020
as if it were a remote,
right now it'll look

192
00:08:24,020 --> 00:08:25,840
to the base station as though

193
00:08:25,840 --> 00:08:29,340
another student is submitting
an answer using their remote.

194
00:08:29,340 --> 00:08:31,070
Now, let's try this again,

195
00:08:31,070 --> 00:08:33,960
but this time I'm going to set the Arduino

196
00:08:33,960 --> 00:08:36,770
to the same serial number as my remote.

197
00:08:36,770 --> 00:08:40,370
Now, if I click in with
the remote as normal,

198
00:08:40,370 --> 00:08:44,023
and then instruct the Arduino
to broadcast an answer,

199
00:08:49,130 --> 00:08:51,230
it appears to the base station as though

200
00:08:51,230 --> 00:08:55,210
the same student is simply
changing their response.

201
00:08:55,210 --> 00:08:57,720
In effect, these two devices are acting

202
00:08:57,720 --> 00:09:00,210
as if they are the same remote.

203
00:09:00,210 --> 00:09:03,370
As it stands though, this only
addresses half our problem,

204
00:09:03,370 --> 00:09:05,390
because although our
student would now be able

205
00:09:05,390 --> 00:09:08,990
to transmit answers as if
he were using a real remote,

206
00:09:08,990 --> 00:09:11,600
he still wouldn't know which
answer choice was correct

207
00:09:11,600 --> 00:09:13,380
without being physically present,

208
00:09:13,380 --> 00:09:15,670
and frankly, even then it's questionable.

209
00:09:15,670 --> 00:09:18,410
Luckily, by reverse
engineering this protocol,

210
00:09:18,410 --> 00:09:21,360
it becomes as easy to
emulate a base station

211
00:09:21,360 --> 00:09:24,830
as it is a remote, simply
by setting the packet radio

212
00:09:24,830 --> 00:09:28,060
on the M0 to receive mode,
rather than transmit.

213
00:09:28,060 --> 00:09:29,730
This would then allow him to see

214
00:09:29,730 --> 00:09:31,260
what other students are answering,

215
00:09:31,260 --> 00:09:34,260
and simply choose the
most popular response.

216
00:09:34,260 --> 00:09:37,090
Okay, same demo as
before, except this time,

217
00:09:37,090 --> 00:09:40,240
my Arduino is set up to
emulate a base station.

218
00:09:40,240 --> 00:09:42,190
So when a student submits an answer,

219
00:09:42,190 --> 00:09:45,890
it's overheard not just by
the legitimate base station,

220
00:09:45,890 --> 00:09:49,110
but also by the Arduino,
which can then nicely display

221
00:09:49,110 --> 00:09:51,880
all of the student
selections on my laptop.

222
00:09:51,880 --> 00:09:53,640
All right, well, obviously we don't want

223
00:09:53,640 --> 00:09:56,540
to have to keep manually
controlling this device.

224
00:09:56,540 --> 00:09:59,040
Luckily, if we combine the
last two demonstrations,

225
00:09:59,040 --> 00:10:01,750
it's not hard to imagine
a fairly basic protocol

226
00:10:01,750 --> 00:10:03,900
for automating this process.

227
00:10:03,900 --> 00:10:06,960
We should start by instructing
the device to remain idle

228
00:10:06,960 --> 00:10:09,820
until the expected
start time of the class.

229
00:10:09,820 --> 00:10:11,050
Then it should turn on,

230
00:10:11,050 --> 00:10:14,910
and start emulating both a
base station and a remote.

231
00:10:14,910 --> 00:10:18,580
It should wait until a flurry
of radioactivity occurs,

232
00:10:18,580 --> 00:10:21,540
indicating the likely
start of a new question.

233
00:10:21,540 --> 00:10:24,620
It should then use the base
station emulator to determine

234
00:10:24,620 --> 00:10:27,220
what the most popular student response is,

235
00:10:27,220 --> 00:10:29,900
at which point it should
use the remote emulator

236
00:10:29,900 --> 00:10:32,480
to broadcast that same response.

237
00:10:32,480 --> 00:10:35,710
It should repeat those steps
until the expected end time

238
00:10:35,710 --> 00:10:38,610
of the class, thereby
answering every question,

239
00:10:38,610 --> 00:10:40,290
and most of them correctly.

240
00:10:40,290 --> 00:10:41,610
So now we're getting somewhere,

241
00:10:41,610 --> 00:10:44,057
but this is not exactly
a practical solution.

242
00:10:44,057 --> 00:10:48,090
It has to remain tethered to
a PC and manually controlled.

243
00:10:48,090 --> 00:10:51,430
The first step towards a
completely self-contained solution

244
00:10:51,430 --> 00:10:53,860
is to attach a standalone input device,

245
00:10:53,860 --> 00:10:55,750
which I've done here by crudely soldering

246
00:10:55,750 --> 00:11:00,620
on a 128 by 32 pixel OLED
screen with three input buttons.

247
00:11:00,620 --> 00:11:02,140
The really nice thing about using

248
00:11:02,140 --> 00:11:05,070
an ultra low power platform
like Arduino is that

249
00:11:05,070 --> 00:11:07,790
this device, even with a display attached,

250
00:11:07,790 --> 00:11:11,520
has a peak current draw
of about 20 milliamps,

251
00:11:11,520 --> 00:11:13,140
as you can see here,

252
00:11:13,140 --> 00:11:16,930
so this tiny 500 milliamp
hour lithium polymer battery

253
00:11:16,930 --> 00:11:20,680
should last well over 24
hours on a single charge.

254
00:11:20,680 --> 00:11:23,570
If I connect this up, we now
have something resembling

255
00:11:23,570 --> 00:11:26,360
a practical self-contained device.

256
00:11:26,360 --> 00:11:27,480
Here's the same device,

257
00:11:27,480 --> 00:11:29,710
just with a little electrical tape added

258
00:11:29,710 --> 00:11:31,350
to hold everything together.

259
00:11:31,350 --> 00:11:34,350
This finished device is
what I call my Time-Turner.

260
00:11:34,350 --> 00:11:36,770
It bears not much
resemblance to the original,

261
00:11:36,770 --> 00:11:38,820
but it can achieve many
of the same results.

262
00:11:38,820 --> 00:11:39,940
Let me show you.

263
00:11:39,940 --> 00:11:43,360
The most basic thing I can do
with this Time-Turner device

264
00:11:43,360 --> 00:11:45,970
is just submit a vote as if I were using

265
00:11:45,970 --> 00:11:47,630
a legitimate remote.

266
00:11:47,630 --> 00:11:49,470
As you can see, the base station here

267
00:11:49,470 --> 00:11:51,530
still can't tell the difference.

268
00:11:51,530 --> 00:11:55,230
Another thing I can do is view
the votes of my classmates.

269
00:11:55,230 --> 00:11:56,890
It might be hard to see this screen,

270
00:11:56,890 --> 00:11:58,660
but no matter which option I choose

271
00:11:58,660 --> 00:12:01,700
on this legitimate remote,
it is automatically displayed

272
00:12:01,700 --> 00:12:03,380
on the Time-Turner.

273
00:12:03,380 --> 00:12:06,200
Now, if I were more
nefarious, what I could do is

274
00:12:06,200 --> 00:12:08,910
try to change the votes of my classmates.

275
00:12:08,910 --> 00:12:10,743
I'm going to restart the poll here.

276
00:12:12,800 --> 00:12:16,100
And this time, no matter
what my classmate chooses,

277
00:12:16,100 --> 00:12:19,253
their vote will automatically
be changed to B.

278
00:12:27,630 --> 00:12:29,343
Let's try picking an answer.

279
00:12:30,400 --> 00:12:32,110
And no matter what I choose,

280
00:12:32,110 --> 00:12:36,110
it is automatically overwritten
by the Time-Turner device.

281
00:12:36,110 --> 00:12:38,730
Now, a vulnerability
that allows me to change

282
00:12:38,730 --> 00:12:41,830
someone else's vote on a
so-called polling system

283
00:12:41,830 --> 00:12:44,080
is a major oversight.

284
00:12:44,080 --> 00:12:46,360
But if I were more nefarious still,

285
00:12:46,360 --> 00:12:49,470
I could simply perform a
denial-of-service attack.

286
00:12:49,470 --> 00:12:51,730
Submitting hundreds of
votes per second will

287
00:12:51,730 --> 00:12:53,890
quickly overwhelm the host device,

288
00:12:53,890 --> 00:12:55,610
eventually causing it to crash,

289
00:12:55,610 --> 00:12:58,530
and making it impossible
for a legitimate student

290
00:12:58,530 --> 00:12:59,763
to submit their vote.

291
00:13:00,930 --> 00:13:03,160
Let's restart this poll one last time

292
00:13:03,160 --> 00:13:05,640
to show the most relevant type of attack,

293
00:13:05,640 --> 00:13:08,330
which is simply copying
the most popular vote

294
00:13:08,330 --> 00:13:09,480
for any given question.

295
00:13:14,340 --> 00:13:15,770
So I'm going to restart the polling,

296
00:13:15,770 --> 00:13:18,730
and this time, the
Time-Turner will just copy

297
00:13:18,730 --> 00:13:20,800
whatever the most popular vote is.

298
00:13:20,800 --> 00:13:23,800
So let's say I vote for
A as a legitimate device.

299
00:13:23,800 --> 00:13:26,420
The Time-Turner immediately copies that.

300
00:13:26,420 --> 00:13:29,500
If the most popular vote
changes to something else,

301
00:13:29,500 --> 00:13:32,050
the Time-Turner will
eventually change its vote,

302
00:13:32,050 --> 00:13:35,050
always making sure to
stay within the majority.

303
00:13:35,050 --> 00:13:38,170
The idea is that with just
a little adhesive putty

304
00:13:38,170 --> 00:13:40,360
the student can go in the previous night,

305
00:13:40,360 --> 00:13:43,650
and covertly attach this
device to some surface

306
00:13:43,650 --> 00:13:44,800
in the lecture hall,

307
00:13:44,800 --> 00:13:47,710
and he can be sure that the
next morning this device will

308
00:13:47,710 --> 00:13:50,490
attend class for him while
he attends the other class

309
00:13:50,490 --> 00:13:51,830
the normal way.

310
00:13:51,830 --> 00:13:53,260
Of course, if he can do this,

311
00:13:53,260 --> 00:13:56,350
then he could just as
easily build two devices

312
00:13:56,350 --> 00:13:59,590
and attach them both the
surfaces in the lecture halls,

313
00:13:59,590 --> 00:14:01,590
and then these will both
attend class for him,

314
00:14:01,590 --> 00:14:05,130
and he can catch up on
homework, or sleep in.

315
00:14:05,130 --> 00:14:06,670
Now, I'm not gonna tell
you if this student

316
00:14:06,670 --> 00:14:09,420
eventually just built these
for all of his classes,

317
00:14:09,420 --> 00:14:13,870
but I'll let you come to your
own conclusion on that one.

318
00:14:13,870 --> 00:14:16,280
What I can tell you is
that this device was

319
00:14:16,280 --> 00:14:18,820
pretty darn effective,
and by mid-semester,

320
00:14:18,820 --> 00:14:21,860
the student had almost full
points in both attendance

321
00:14:21,860 --> 00:14:23,380
and quiz correctness.

322
00:14:23,380 --> 00:14:26,083
So what does that tell us about this?

323
00:14:26,930 --> 00:14:30,730
First of all, it's a great
lesson about authentication.

324
00:14:30,730 --> 00:14:34,430
You may already know that an
authentication mechanism should

325
00:14:34,430 --> 00:14:37,530
either be something you
know, like a password,

326
00:14:37,530 --> 00:14:41,430
something you have, like a
universal second factor key,

327
00:14:41,430 --> 00:14:44,550
or something you are,
like your biometric data.

328
00:14:44,550 --> 00:14:47,890
These factors are all
in theory unique to you,

329
00:14:47,890 --> 00:14:50,670
but this is just a polling device.

330
00:14:50,670 --> 00:14:52,400
It's being used incorrectly

331
00:14:52,400 --> 00:14:55,540
to authenticate someone's
physical presence at a lecture,

332
00:14:55,540 --> 00:14:57,630
when in fact there is
no real authentication

333
00:14:57,630 --> 00:14:59,010
happening here at all.

334
00:14:59,010 --> 00:15:00,780
It's just broadcasting an answer

335
00:15:00,780 --> 00:15:04,930
and an ID number in plain
text over a radio signal.

336
00:15:04,930 --> 00:15:07,700
Now, to their credit,
hey did try to hide this

337
00:15:07,700 --> 00:15:09,780
by using a proprietary protocol

338
00:15:09,780 --> 00:15:11,510
that shuffles the bits around.

339
00:15:11,510 --> 00:15:13,690
But I mean, this is an obvious violation

340
00:15:13,690 --> 00:15:16,130
of Kerckhoffs's principle,
which states that

341
00:15:16,130 --> 00:15:17,550
a system should be secure,

342
00:15:17,550 --> 00:15:21,430
even if everything except
the key is public knowledge.

343
00:15:21,430 --> 00:15:23,390
When using security through obscurity,

344
00:15:23,390 --> 00:15:24,840
it's only a matter of time

345
00:15:24,840 --> 00:15:28,060
until someone completely
reverse engineers your system,

346
00:15:28,060 --> 00:15:31,170
and what little security
you had disappears.

347
00:15:31,170 --> 00:15:34,700
So now that the security flaws
of this particular system

348
00:15:34,700 --> 00:15:36,480
have come to light, let's talk about

349
00:15:36,480 --> 00:15:38,680
the various shortcomings of its design,

350
00:15:38,680 --> 00:15:40,810
and how they might be addressed.

351
00:15:40,810 --> 00:15:43,900
I think the flaws of
this system map cleanly

352
00:15:43,900 --> 00:15:46,930
onto the three so-called CIA properties,

353
00:15:46,930 --> 00:15:51,610
which are Confidentiality,
Integrity, and Availability.

354
00:15:51,610 --> 00:15:55,010
I'll recount what I see as the
core issues with this system,

355
00:15:55,010 --> 00:15:58,410
and then propose a simple
way to fix each of them.

356
00:15:58,410 --> 00:16:00,690
First, with regards to confidentiality,

357
00:16:00,690 --> 00:16:03,050
there is none to speak
of as I demonstrated

358
00:16:03,050 --> 00:16:07,040
when we were able to listen
into other students' answers.

359
00:16:07,040 --> 00:16:10,480
Next is integrity, and again,
because I was able to build

360
00:16:10,480 --> 00:16:13,530
a device that could
indistinguishably emulate

361
00:16:13,530 --> 00:16:15,950
my own, or anyone else's remote,

362
00:16:15,950 --> 00:16:18,580
and even change other people's answers,

363
00:16:18,580 --> 00:16:20,530
the integrity of the answers received

364
00:16:20,530 --> 00:16:23,350
by a base station cannot be assured.

365
00:16:23,350 --> 00:16:26,340
And finally, with respect to availability,

366
00:16:26,340 --> 00:16:29,160
I demonstrated a simple
denial-of-service attack

367
00:16:29,160 --> 00:16:30,750
that would make it difficult

368
00:16:30,750 --> 00:16:33,530
for a legitimate remote to be heard.

369
00:16:33,530 --> 00:16:36,270
And now, as promised,
some proposed solutions,

370
00:16:36,270 --> 00:16:38,500
starting with availability.

371
00:16:38,500 --> 00:16:40,380
This one is pretty straightforward.

372
00:16:40,380 --> 00:16:43,140
Every single remote in a
classroom is transmitting

373
00:16:43,140 --> 00:16:46,470
and receiving on the
exact same frequencies.

374
00:16:46,470 --> 00:16:48,430
For the default AA channel,

375
00:16:48,430 --> 00:16:53,430
that's about 916.5 and 903
megahertz respectively.

376
00:16:53,430 --> 00:16:56,380
One would actually expect
far more natural collisions

377
00:16:56,380 --> 00:16:59,740
and packet drops if each honest
remote wasn't broadcasting

378
00:16:59,740 --> 00:17:01,810
just five bytes at a time.

379
00:17:01,810 --> 00:17:04,440
But it does make this system
particularly vulnerable

380
00:17:04,440 --> 00:17:06,913
to denial-of-service attacks as we saw.

381
00:17:07,840 --> 00:17:11,470
Perhaps a better idea
would be to use FHSS,

382
00:17:11,470 --> 00:17:14,430
whereby the frequency
used by a given remote

383
00:17:14,430 --> 00:17:17,210
rapidly changes in a
way that is predictable

384
00:17:17,210 --> 00:17:20,920
to the base station, but
not to any passive observer.

385
00:17:20,920 --> 00:17:23,100
Standardized protocols like Bluetooth

386
00:17:23,100 --> 00:17:24,990
already implement this by default,

387
00:17:24,990 --> 00:17:26,710
and that's for a good reason.

388
00:17:26,710 --> 00:17:28,700
It's still not impossible to jam,

389
00:17:28,700 --> 00:17:30,100
but it becomes much harder,

390
00:17:30,100 --> 00:17:33,210
and requires wide spectrum
radio frequency jamming,

391
00:17:33,210 --> 00:17:36,010
which is very expensive, and very illegal.

392
00:17:36,010 --> 00:17:38,160
That's not to say that
any of these attacks are

393
00:17:38,160 --> 00:17:41,640
particularly legal if you're
not using your own system,

394
00:17:41,640 --> 00:17:42,683
like I am here.

395
00:17:43,920 --> 00:17:47,690
Next, confidentiality, which
is also not too tricky,

396
00:17:47,690 --> 00:17:50,540
one way to address this
would be for the base station

397
00:17:50,540 --> 00:17:53,620
and remote to perform an
authenticated key exchange

398
00:17:53,620 --> 00:17:55,990
when they first establish a connection,

399
00:17:55,990 --> 00:17:58,590
and then use the symmetric session key

400
00:17:58,590 --> 00:18:01,950
to encrypt all communications
moving forward.

401
00:18:01,950 --> 00:18:04,910
Something like mutual auth
TLS could be used to do this

402
00:18:04,910 --> 00:18:06,590
in a standardized way.

403
00:18:06,590 --> 00:18:08,900
In fact, the chip used by this device

404
00:18:08,900 --> 00:18:12,580
already has built-in hardware
support for AES encryption,

405
00:18:12,580 --> 00:18:15,523
but it was intentionally
disabled for whatever reason.

406
00:18:16,560 --> 00:18:19,070
And again, standard protocols
like Bluetooth would

407
00:18:19,070 --> 00:18:20,740
already do this by default,

408
00:18:20,740 --> 00:18:24,070
although the mechanism there
is a bit more intricate.

409
00:18:24,070 --> 00:18:27,330
Finally, integrity, this is
the trickiest problem to solve,

410
00:18:27,330 --> 00:18:29,130
but one idea might be to use

411
00:18:29,130 --> 00:18:32,130
a Physically Un-cloneable
Function, or PUF,

412
00:18:32,130 --> 00:18:34,480
a laser-based design, as shown here,

413
00:18:34,480 --> 00:18:37,250
but silicon PUFs can be
had for a few dollars,

414
00:18:37,250 --> 00:18:40,550
and it would make it nearly
impossible for me to build

415
00:18:40,550 --> 00:18:43,840
another device that replicates
the behavior of my remote,

416
00:18:43,840 --> 00:18:46,423
or the remote of any other
student for that matter.

417
00:18:47,870 --> 00:18:50,360
This still doesn't solve
the broader problem

418
00:18:50,360 --> 00:18:52,850
of authenticating physical presence,

419
00:18:52,850 --> 00:18:55,540
due to the possibility of relaying answers

420
00:18:55,540 --> 00:18:59,330
from a legitimate device to
one, or more remote locations.

421
00:18:59,330 --> 00:19:01,120
To combat this, you would need to add

422
00:19:01,120 --> 00:19:04,840
a challenge response mechanism
with a tight time window,

423
00:19:04,840 --> 00:19:07,660
just large enough for
devices in close proximity

424
00:19:07,660 --> 00:19:10,670
to submit a response, a
matter of microseconds,

425
00:19:10,670 --> 00:19:12,740
but not nearly what it
would take to actually

426
00:19:12,740 --> 00:19:14,810
relay a message over the internet,

427
00:19:14,810 --> 00:19:17,860
which would be at least
a few milliseconds.

428
00:19:17,860 --> 00:19:21,240
A student, or at least their real remote,

429
00:19:21,240 --> 00:19:24,100
would therefore have to
actually be in the room

430
00:19:24,100 --> 00:19:26,380
in order to respond to the challenges sent

431
00:19:26,380 --> 00:19:28,360
by the base station fast enough

432
00:19:28,360 --> 00:19:30,300
for their attendance to count.

433
00:19:30,300 --> 00:19:31,950
All right, let's summarize.

434
00:19:31,950 --> 00:19:35,550
It's hard to overstate how
vulnerable this system is,

435
00:19:35,550 --> 00:19:38,490
and it's even more shocking
that this exact model

436
00:19:38,490 --> 00:19:42,240
is currently used at
over 1,100 universities,

437
00:19:42,240 --> 00:19:45,990
and in nearly 100,000 classrooms.

438
00:19:45,990 --> 00:19:48,560
To summarize my security recommendations,

439
00:19:48,560 --> 00:19:51,270
if a new version of this
system were released,

440
00:19:51,270 --> 00:19:53,210
they should consider using FHSS

441
00:19:53,210 --> 00:19:55,050
to avoid denial-of-service attacks,

442
00:19:55,050 --> 00:19:58,630
and use encryption in transit
to protect confidentiality,

443
00:19:58,630 --> 00:20:01,280
bonus points if these first
two problems are both solved

444
00:20:01,280 --> 00:20:03,400
by simply using an open source standard,

445
00:20:03,400 --> 00:20:06,140
which satisfies Kerckhoffs's principle.

446
00:20:06,140 --> 00:20:07,770
Lastly, they should use a PUF

447
00:20:07,770 --> 00:20:10,460
with a time challenge
response mechanism to produce

448
00:20:10,460 --> 00:20:13,080
what would then be an
incredibly secure device,

449
00:20:13,080 --> 00:20:15,960
especially by comparison
to its current form.

450
00:20:15,960 --> 00:20:18,420
Well, it turns out that
the authentication problem

451
00:20:18,420 --> 00:20:20,580
may be even worse than it seems.

452
00:20:20,580 --> 00:20:23,340
That's because in addition
to the student remote,

453
00:20:23,340 --> 00:20:26,600
the same company also
produces an instructor remote

454
00:20:26,600 --> 00:20:29,460
that allows teachers to
start and stop polling,

455
00:20:29,460 --> 00:20:31,520
show and hide the poll results,

456
00:20:31,520 --> 00:20:34,080
switch slides on a
PowerPoint presentation,

457
00:20:34,080 --> 00:20:37,110
and even select the correct quiz answer.

458
00:20:37,110 --> 00:20:39,190
Now, if these devices look similar,

459
00:20:39,190 --> 00:20:42,140
that's because they're actually
identical under the hood.

460
00:20:42,140 --> 00:20:45,150
So it's as easy to emulate
this instructor remote

461
00:20:45,150 --> 00:20:47,600
as it was to emulate this student remote,

462
00:20:47,600 --> 00:20:49,050
and once one can do that,

463
00:20:49,050 --> 00:20:51,480
they can do everything
from changing the slides

464
00:20:51,480 --> 00:20:53,230
on the instructor's presentation

465
00:20:53,230 --> 00:20:56,510
to even selecting their own
quiz answers as correct,

466
00:20:56,510 --> 00:20:59,020
which really emphasizes
the need for a PUF,

467
00:20:59,020 --> 00:21:02,110
or some other hardware-based
authentication mechanism.

468
00:21:02,110 --> 00:21:04,490
Now, it needs to be emphasized that PUFs

469
00:21:04,490 --> 00:21:06,220
and Bluetooth chips are already

470
00:21:06,220 --> 00:21:08,100
bulk-produced commodity hardware

471
00:21:08,100 --> 00:21:10,600
that cost a few dollars at the most.

472
00:21:10,600 --> 00:21:14,600
After all, this is a $54 device,

473
00:21:14,600 --> 00:21:15,910
so it's hard to argue that

474
00:21:15,910 --> 00:21:18,360
there is a major cost barrier here.

475
00:21:18,360 --> 00:21:21,880
By the way, this one is about $30

476
00:21:21,880 --> 00:21:24,490
if you already have a soldering iron.

477
00:21:24,490 --> 00:21:27,290
As for our canonical student,
well, as I mentioned,

478
00:21:27,290 --> 00:21:30,290
all of this was taking
place in the spring of 2020,

479
00:21:30,290 --> 00:21:31,890
and around the same time,

480
00:21:31,890 --> 00:21:35,560
another major world event
was starting to unfold.

481
00:21:35,560 --> 00:21:37,680
So of course, midway through the semester,

482
00:21:37,680 --> 00:21:39,670
he ends up receiving this email,

483
00:21:39,670 --> 00:21:42,090
which among other things tells him that

484
00:21:42,090 --> 00:21:44,490
all of his classes have been moved online,

485
00:21:44,490 --> 00:21:47,770
and that all students will
get full participation points.

486
00:21:47,770 --> 00:21:49,840
So while this didn't end up being helpful,

487
00:21:49,840 --> 00:21:53,240
hopefully it at least made for
an interesting DEF CON talk.

488
00:21:53,240 --> 00:21:55,470
As for these days, well,
if a student wanted

489
00:21:55,470 --> 00:21:58,000
to attend two classes at once today,

490
00:21:58,000 --> 00:22:00,140
this is how they would do it.

491
00:22:00,140 --> 00:22:00,973
Thank you.

