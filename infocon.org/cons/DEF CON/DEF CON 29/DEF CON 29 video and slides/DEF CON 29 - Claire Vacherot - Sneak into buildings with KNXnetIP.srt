1
00:00:00,470 --> 00:00:02,410
- Hi, I'm Claire Vacherot and today

2
00:00:02,410 --> 00:00:04,750
I'm going to talk about
sneaking into buildings

3
00:00:04,750 --> 00:00:07,843
using the building management
system protocol KNXnet/IP.

4
00:00:09,340 --> 00:00:11,410
First, a little bit about myself.

5
00:00:11,410 --> 00:00:13,920
I started as a software developer,

6
00:00:13,920 --> 00:00:17,190
then moved to software security
and then to embedded and

7
00:00:17,190 --> 00:00:19,263
industrial devices and systems security.

8
00:00:20,210 --> 00:00:22,430
Also in my job, I like penetration tests

9
00:00:22,430 --> 00:00:24,330
on unusual environments.

10
00:00:24,330 --> 00:00:28,760
And by unusual environments,
I mean for instance,

11
00:00:28,760 --> 00:00:31,840
factories, transportation
systems, amusement parks

12
00:00:31,840 --> 00:00:32,673
and so on.

13
00:00:33,749 --> 00:00:35,060
During during these assessments,

14
00:00:35,060 --> 00:00:38,010
we often have new environments
with unknown devices

15
00:00:38,010 --> 00:00:41,660
and protocols, and we usually
don't know where to start.

16
00:00:41,660 --> 00:00:43,590
And this is what happened for me

17
00:00:43,590 --> 00:00:46,433
with building management
system and KNXnet/IP.

18
00:00:48,250 --> 00:00:51,600
Just before we start, a little disclaimer.

19
00:00:51,600 --> 00:00:54,497
Testing industrial systems and
building management systems

20
00:00:54,497 --> 00:00:56,070
can be dangerous.

21
00:00:56,070 --> 00:00:58,320
They control physical process.

22
00:00:58,320 --> 00:01:01,690
So they may have an
impact on people's safety

23
00:01:01,690 --> 00:01:04,940
causing accidents or disabling alerts.

24
00:01:04,940 --> 00:01:07,410
So please be careful.

25
00:01:07,410 --> 00:01:10,500
So during our assessments, we usually test

26
00:01:10,500 --> 00:01:13,810
on mock environments or at
least environments we control

27
00:01:13,810 --> 00:01:15,963
to avoid unknown side effects.

28
00:01:18,150 --> 00:01:21,590
Now that said, let's talk about
building management systems.

29
00:01:21,590 --> 00:01:24,950
You may have already heard of
them, as this is a really not

30
00:01:24,950 --> 00:01:27,770
the first talk about
building management systems.

31
00:01:27,770 --> 00:01:29,680
But I don't feel it's yet the time

32
00:01:29,680 --> 00:01:31,310
to stop introducing them first.

33
00:01:31,310 --> 00:01:32,423
So here we go.

34
00:01:34,300 --> 00:01:37,720
Building Management Systems
or Building Automation Systems

35
00:01:37,720 --> 00:01:40,490
are systems that can
control every component

36
00:01:40,490 --> 00:01:44,180
in a facility from lighting
to security systems,

37
00:01:44,180 --> 00:01:47,323
including HVAC, sometimes
elevators and so on.

38
00:01:48,380 --> 00:01:50,810
As their name suggests,
they are used to automate

39
00:01:50,810 --> 00:01:54,020
these components and
to control them easily,

40
00:01:54,020 --> 00:01:56,550
and you can find them in
all types of facilities

41
00:01:56,550 --> 00:01:59,933
like homes, factories,
hospitals and so on.

42
00:02:02,070 --> 00:02:06,640
So here's an interesting example
from the movie "Hackers",

43
00:02:06,640 --> 00:02:09,590
which has a BMS hacking scene.

44
00:02:09,590 --> 00:02:12,890
The main character hacks
into his school BMS interface

45
00:02:12,890 --> 00:02:16,030
and he schedules the sprinkler system

46
00:02:16,030 --> 00:02:19,083
to run at a certain time,
basically for revenge.

47
00:02:20,930 --> 00:02:23,053
And this is what's happens.

48
00:02:24,320 --> 00:02:27,320
So I don't know how it was back in 1995,

49
00:02:27,320 --> 00:02:30,560
but now apart from this
weird (indistinct) interface,

50
00:02:30,560 --> 00:02:32,840
this is quite a workable scenario.

51
00:02:32,840 --> 00:02:35,830
We can definitely do
this, provided of course

52
00:02:35,830 --> 00:02:37,920
that sprinkler system is linked

53
00:02:37,920 --> 00:02:39,823
to the building management system.

54
00:02:42,860 --> 00:02:46,403
So now, let's take a closer
look at this technically.

55
00:02:47,410 --> 00:02:51,390
In BMS, as a main part, is the field part

56
00:02:51,390 --> 00:02:54,110
where the actual components are.

57
00:02:54,110 --> 00:02:56,100
We often find three types of components,

58
00:02:56,100 --> 00:02:59,610
sensors, actuators, and controllers.

59
00:02:59,610 --> 00:03:02,230
If we take them, the
example from "Hackers",

60
00:03:02,230 --> 00:03:04,960
a sensor could be a fire detector.

61
00:03:04,960 --> 00:03:08,447
The actuators could be
the sprinklers and so on.

62
00:03:09,570 --> 00:03:12,640
So they communicate,
these devices communicate

63
00:03:12,640 --> 00:03:15,530
with each other using Fieldbus protocols,

64
00:03:15,530 --> 00:03:18,770
usually on twisted pairs
or radio frequencies.

65
00:03:18,770 --> 00:03:21,210
So this part can work standalone.

66
00:03:21,210 --> 00:03:25,384
And in fact, before it was the only part.

67
00:03:25,384 --> 00:03:27,570
But then the field bus got connected

68
00:03:27,570 --> 00:03:29,480
to the IP network.

69
00:03:29,480 --> 00:03:32,327
First, because there's that
trend to connect everything,

70
00:03:32,327 --> 00:03:35,470
but also most probably, so
that operators could reach

71
00:03:35,470 --> 00:03:37,920
and control them more easily.

72
00:03:37,920 --> 00:03:40,790
So basically, there are additional devices

73
00:03:40,790 --> 00:03:44,100
that will call IP interfaces or gateways

74
00:03:44,100 --> 00:03:46,370
or server or whatever.

75
00:03:46,370 --> 00:03:49,870
And these IP interfaces
makes a translation

76
00:03:49,870 --> 00:03:53,110
between the IP world and the field world.

77
00:03:53,110 --> 00:03:55,330
So to simplify, the
operator just needs to be

78
00:03:55,330 --> 00:03:58,270
on the same network as this IP interface,

79
00:03:58,270 --> 00:04:00,320
to configure and control the field parts.

80
00:04:01,460 --> 00:04:05,510
In a way, we expose
components that used to be

81
00:04:05,510 --> 00:04:08,570
only reachable physically
to anyone on the network

82
00:04:08,570 --> 00:04:09,933
or even the internet.

83
00:04:11,610 --> 00:04:13,340
And that's interesting for us.

84
00:04:13,340 --> 00:04:16,450
And we may definitely
want to take a look at it

85
00:04:16,450 --> 00:04:17,950
from a security point of view.

86
00:04:19,150 --> 00:04:21,670
So in industrial and
building management system

87
00:04:21,670 --> 00:04:24,110
maiden software and protocol were created

88
00:04:24,110 --> 00:04:26,543
before we started talking
about cybersecurity.

89
00:04:27,440 --> 00:04:29,270
Or they were created without considering

90
00:04:29,270 --> 00:04:30,980
that they may be exposed someday.

91
00:04:30,980 --> 00:04:34,260
And they are usually meant
to last for a long time.

92
00:04:34,260 --> 00:04:37,730
So some of them do cover safety measures,

93
00:04:37,730 --> 00:04:41,080
which are prevention against
involuntary failures,

94
00:04:41,080 --> 00:04:43,770
but they don't cover security issues.

95
00:04:43,770 --> 00:04:46,050
They don't cover provoked error.

96
00:04:46,050 --> 00:04:48,830
For instance, they don't prevent from

97
00:04:48,830 --> 00:04:51,700
forging or replaying packets.

98
00:04:51,700 --> 00:04:53,570
And it's also quite common to find

99
00:04:53,570 --> 00:04:57,130
configuration flaws on them,
such as default credentials

100
00:04:57,130 --> 00:05:00,830
or only one user which
is used to run everything

101
00:05:00,830 --> 00:05:04,710
on a device and its root and so on.

102
00:05:04,710 --> 00:05:07,980
So see first, a lot of
things to think about

103
00:05:07,980 --> 00:05:10,550
when it comes to industrial systems

104
00:05:10,550 --> 00:05:12,550
and building management system security.

105
00:05:13,660 --> 00:05:14,593
But there's more.

106
00:05:16,640 --> 00:05:19,210
Let's take and even closer
look at the interface

107
00:05:19,210 --> 00:05:21,290
between the LAN and the field.

108
00:05:21,290 --> 00:05:23,780
So it's usually a device
in an electric cabinet.

109
00:05:23,780 --> 00:05:28,480
So it's means that it's
hardly reachable physically,

110
00:05:28,480 --> 00:05:32,190
but of course, reachable from the LAN.

111
00:05:32,190 --> 00:05:33,870
And if you just scan one of them,

112
00:05:33,870 --> 00:05:37,130
you may notice that several
services are running.

113
00:05:37,130 --> 00:05:40,950
Like first the usual
stuff for administration,

114
00:05:40,950 --> 00:05:45,950
most likely at least HTTP,
maybe SSH or any other.

115
00:05:47,400 --> 00:05:49,340
But you may also notice another port,

116
00:05:49,340 --> 00:05:52,190
which is the building management
system protocol service.

117
00:05:53,440 --> 00:05:54,850
What are they?

118
00:05:54,850 --> 00:05:56,820
As I said before, field components

119
00:05:56,820 --> 00:05:59,950
communicate with each other,
using a field protocol.

120
00:05:59,950 --> 00:06:03,310
Some of them now have
an IP layer, which means

121
00:06:03,310 --> 00:06:06,850
that you can contact
interface and field devices

122
00:06:06,850 --> 00:06:11,140
directly using the IP
version of this protocol.

123
00:06:11,140 --> 00:06:13,470
The most two common of such protocol

124
00:06:13,470 --> 00:06:14,593
being BACnet and KNX.

125
00:06:16,190 --> 00:06:19,970
So what happens, is that the operator

126
00:06:19,970 --> 00:06:23,580
will send a BACnet IP or KNXnet/IP request

127
00:06:23,580 --> 00:06:26,830
to the interface, which will interpret it

128
00:06:26,830 --> 00:06:30,533
and relay it to the field bus.

129
00:06:32,090 --> 00:06:36,543
They are field BACnet
or field KNX requests.

130
00:06:39,110 --> 00:06:42,390
Today, I want to focus on
thought for several reasons.

131
00:06:42,390 --> 00:06:46,480
First, because we already
know the other services

132
00:06:46,480 --> 00:06:49,240
and you can at least expect
some basic protections

133
00:06:49,240 --> 00:06:52,010
from the vendor, which
is not necessarily true

134
00:06:52,010 --> 00:06:53,363
for the BMS protocol.

135
00:06:54,260 --> 00:06:57,640
And more importantly, this
protocol is a direct way

136
00:06:57,640 --> 00:06:59,040
to talk to devices.

137
00:06:59,040 --> 00:07:01,420
It's the best way to gather information

138
00:07:01,420 --> 00:07:04,130
and to run commands on the BMS.

139
00:07:04,130 --> 00:07:05,760
And finally, they have the same flaws

140
00:07:05,760 --> 00:07:08,060
as many of our industrial components

141
00:07:08,060 --> 00:07:10,840
are protocols do not
consider cyber security.

142
00:07:10,840 --> 00:07:14,560
And a lot of implementation
were written a long time ago

143
00:07:14,560 --> 00:07:16,253
and never updated since then.

144
00:07:18,950 --> 00:07:20,540
What do we have so far?

145
00:07:20,540 --> 00:07:24,090
So we have field devices and protocol

146
00:07:24,090 --> 00:07:25,493
that should not be exposed.

147
00:07:26,620 --> 00:07:29,720
And we know that they're actually hard

148
00:07:29,720 --> 00:07:31,750
and that we can reach them.

149
00:07:31,750 --> 00:07:32,640
Yeah.

150
00:07:32,640 --> 00:07:35,320
IP interface devices.

151
00:07:35,320 --> 00:07:37,450
We also know that there's this IP version

152
00:07:37,450 --> 00:07:41,520
of the field protocol no one
has heard of before to do that.

153
00:07:41,520 --> 00:07:45,680
And finally, we know that we
can talk to devices directly

154
00:07:45,680 --> 00:07:48,610
using that IP version of a BMS protocol

155
00:07:48,610 --> 00:07:50,760
through that IP gateway.

156
00:07:50,760 --> 00:07:51,593
Yeah.

157
00:07:53,650 --> 00:07:55,640
What can we do with that?

158
00:07:55,640 --> 00:07:57,400
So in the next few slides, I talk about

159
00:07:57,400 --> 00:08:01,070
two general attack scenarios
on building management systems.

160
00:08:01,070 --> 00:08:03,960
The first one consisting
in sending valid stuff

161
00:08:03,960 --> 00:08:07,870
on the IP interface,
using the BMS protocol,

162
00:08:07,870 --> 00:08:10,890
and the second one consisting in sending

163
00:08:10,890 --> 00:08:13,223
invalid stuff, which is brilliant I know.

164
00:08:16,440 --> 00:08:18,050
So, let's talk about the first one,

165
00:08:18,050 --> 00:08:20,330
which is the most obvious one.

166
00:08:20,330 --> 00:08:22,330
Here, we want to send legitimate commands

167
00:08:22,330 --> 00:08:24,690
to change the BMS' behaviors.

168
00:08:24,690 --> 00:08:27,640
If we go back to the
example from "Hackers",

169
00:08:27,640 --> 00:08:30,500
we could for instance, enable sprinklers,

170
00:08:30,500 --> 00:08:34,150
which may or may not be fun
depending on the situation.

171
00:08:34,150 --> 00:08:36,500
We could disable the fire detection,

172
00:08:36,500 --> 00:08:38,173
which is not fun at all.

173
00:08:39,821 --> 00:08:43,170
In a trickier way, we could
also change thresholds.

174
00:08:43,170 --> 00:08:45,630
For instance, by setting

175
00:08:45,630 --> 00:08:48,420
the smoke detector thresholds higher,

176
00:08:48,420 --> 00:08:52,500
when an alert is triggered,
it may already be too late,

177
00:08:52,500 --> 00:08:53,743
which is still not fun.

178
00:08:55,300 --> 00:08:58,420
Or you can just do whatever you want

179
00:08:58,420 --> 00:09:00,180
as long as it's allowed by the system

180
00:09:00,180 --> 00:09:02,839
and this is very important.

181
00:09:02,839 --> 00:09:04,230
And why can we do that?

182
00:09:04,230 --> 00:09:06,820
Because as I mentioned
before, these protocols

183
00:09:06,820 --> 00:09:09,230
do not cope with cybersecurity.

184
00:09:09,230 --> 00:09:11,460
There is no protection
against replay or whatsoever

185
00:09:11,460 --> 00:09:13,930
and often no authentication

186
00:09:13,930 --> 00:09:16,353
or at least authentication by default.

187
00:09:19,500 --> 00:09:23,000
So here's a small example
I did a few months ago.

188
00:09:23,000 --> 00:09:25,553
This is an HVAC system
in a test environment,

189
00:09:26,450 --> 00:09:28,323
which can be controlled with BACnet.

190
00:09:29,260 --> 00:09:32,190
So I have no idea what's
inside the BACnet protocol,

191
00:09:32,190 --> 00:09:34,990
but just by listening to the traffic

192
00:09:34,990 --> 00:09:36,910
and extracting the right frame,

193
00:09:36,910 --> 00:09:39,043
I was able to make it unavailable.

194
00:09:40,060 --> 00:09:41,813
So this is a script I used.

195
00:09:42,660 --> 00:09:45,700
This, it just replace the command

196
00:09:45,700 --> 00:09:48,530
to turn the system off every one second,

197
00:09:48,530 --> 00:09:50,083
and that's enough.

198
00:09:51,370 --> 00:09:53,410
And by doing this in a real environment,

199
00:09:53,410 --> 00:09:55,440
this could have a really bad effect.

200
00:09:55,440 --> 00:09:58,130
For instance, in a data
center without the HVAC,

201
00:09:58,130 --> 00:10:01,830
the servers would just overheat to death.

202
00:10:01,830 --> 00:10:04,503
Also in buildings made entirely of glass,

203
00:10:05,520 --> 00:10:08,570
what happens if you turn the HVAC off?

204
00:10:08,570 --> 00:10:13,570
Also imagine in Vegas and
for the air renewing parts,

205
00:10:15,340 --> 00:10:17,460
if it's turned off, all the bad things

206
00:10:17,460 --> 00:10:21,290
would stay in the air, which
is really not suitable,

207
00:10:21,290 --> 00:10:22,740
especially during a pandemic.

208
00:10:26,800 --> 00:10:30,360
So the other scenario is the
unintended use of devices

209
00:10:30,360 --> 00:10:32,110
using these protocols.

210
00:10:32,110 --> 00:10:35,090
In scenario one, we run
a legitimate commands

211
00:10:35,090 --> 00:10:37,990
and can only perform expected operations.

212
00:10:37,990 --> 00:10:40,330
Here, we want to send malicious stuff

213
00:10:40,330 --> 00:10:42,520
and wait for something unexpected,

214
00:10:42,520 --> 00:10:45,510
most likely something you could exploit.

215
00:10:45,510 --> 00:10:48,290
And what makes it happen, is of course,

216
00:10:48,290 --> 00:10:50,963
the combination of security
issues on these devices

217
00:10:50,963 --> 00:10:53,060
that we talked about previously.

218
00:10:54,044 --> 00:10:58,450
But it's even easier knowing
that a lot of BMS IP interfaces

219
00:10:58,450 --> 00:11:00,943
run Linux-based operating systems.

220
00:11:01,890 --> 00:11:05,970
So here's an example of what you can do.

221
00:11:05,970 --> 00:11:10,970
If for instance, you can
compromise an IP interface

222
00:11:11,430 --> 00:11:13,140
exposed on the internet.

223
00:11:13,140 --> 00:11:18,000
From the internet, you could
gain a foothold in the network

224
00:11:18,000 --> 00:11:22,110
and possibly keep it or move
somewhere else on that network,

225
00:11:22,110 --> 00:11:24,593
or do anything else on that network.

226
00:11:27,370 --> 00:11:30,397
An alternative to this scenario
could be to use the BMS

227
00:11:30,397 --> 00:11:31,453
for network pivoting.

228
00:11:32,858 --> 00:11:35,000
For instance, in industrial systems,

229
00:11:35,000 --> 00:11:37,492
IT and OT network should be segregated.

230
00:11:37,492 --> 00:11:40,810
They're not always segregated,
but at least they should be.

231
00:11:40,810 --> 00:11:44,770
So now imagine having a BMS
that's connected to both.

232
00:11:44,770 --> 00:11:46,790
I'm not saying this is a common setting,

233
00:11:46,790 --> 00:11:49,000
but it can definitely happen.

234
00:11:49,000 --> 00:11:51,490
So someone who has access to the IT

235
00:11:51,490 --> 00:11:54,700
and wants to move to the
OT would probably consider

236
00:11:54,700 --> 00:11:57,573
compromising devices that
are connected to both.

237
00:12:01,430 --> 00:12:03,660
So this is it for the scenario.

238
00:12:03,660 --> 00:12:06,490
Of course I didn't invent any of this.

239
00:12:06,490 --> 00:12:09,380
And if you want to know
more about BMS in general,

240
00:12:09,380 --> 00:12:12,490
there are already a few
conferences and paper.

241
00:12:12,490 --> 00:12:14,980
Also, there are already a few talks

242
00:12:14,980 --> 00:12:17,990
about BMS exploitation and among them,

243
00:12:17,990 --> 00:12:21,830
I recommend the one by
Jesus Molina at Defcon 22,

244
00:12:21,830 --> 00:12:25,467
which talks about abusing
a KNX system in a hotel,

245
00:12:25,467 --> 00:12:26,823
and which is really good.

246
00:12:29,650 --> 00:12:31,800
Also, there is already some work about

247
00:12:31,800 --> 00:12:35,530
advanced testing on BACnet
systems and research about

248
00:12:35,530 --> 00:12:38,623
attack detection and
remediation on BACnet.

249
00:12:39,750 --> 00:12:43,330
But as you can see this is
really all about BACnet,

250
00:12:43,330 --> 00:12:44,583
so where is KNX?

251
00:12:45,660 --> 00:12:48,120
Actually, the scenario
that we just went through

252
00:12:48,120 --> 00:12:51,000
can be applied to any building
management system protocol

253
00:12:51,000 --> 00:12:52,470
that has an IP layer.

254
00:12:52,470 --> 00:12:56,800
So there's of course BACnet,
but there's also KNX.

255
00:12:56,800 --> 00:12:58,430
And we don't know much about it

256
00:12:58,430 --> 00:13:00,840
from an offensive point of view.

257
00:13:00,840 --> 00:13:03,620
So in the context of everything
that we've just seen,

258
00:13:03,620 --> 00:13:05,300
we're going to focus on that protocol

259
00:13:05,300 --> 00:13:06,950
for the rest of the presentation.

260
00:13:09,130 --> 00:13:10,683
So let's talk about KNX.

261
00:13:12,910 --> 00:13:14,370
So as you already know,

262
00:13:14,370 --> 00:13:17,620
KNX is a BMS protocol with an IP layer.

263
00:13:17,620 --> 00:13:20,050
It's mostly used in Europe and Asia,

264
00:13:20,050 --> 00:13:23,220
whereas BACnet is mostly used in the US.

265
00:13:23,220 --> 00:13:25,870
And of course, like the
other, you can find it

266
00:13:25,870 --> 00:13:28,240
in all types of homes and buildings.

267
00:13:28,240 --> 00:13:31,100
For instance, in my office,
the lights and chargers

268
00:13:31,100 --> 00:13:33,740
are operated by KNX.

269
00:13:33,740 --> 00:13:36,970
So, I just like to say a
few words about its history,

270
00:13:36,970 --> 00:13:39,730
because I think it's
interesting to understand

271
00:13:39,730 --> 00:13:42,060
some choices they made about the protocol.

272
00:13:42,060 --> 00:13:44,410
So basically, it's a merger of

273
00:13:44,410 --> 00:13:46,070
three European field protocol standards

274
00:13:46,070 --> 00:13:49,397
that were used since the '80s.

275
00:13:49,397 --> 00:13:51,683
And they were merged into KNX in 1999,

276
00:13:52,950 --> 00:13:56,220
then eight years later,
KNXnet/IP was created

277
00:13:56,220 --> 00:13:59,880
and then the KNX
installation became reachable

278
00:13:59,880 --> 00:14:00,783
from the network.

279
00:14:01,758 --> 00:14:06,520
And then again, six years
later, security came.

280
00:14:06,520 --> 00:14:09,313
The first KNXnet/IP
security extension came out.

281
00:14:11,520 --> 00:14:14,330
And finally, it's important
to note that the Standard

282
00:14:14,330 --> 00:14:16,270
is only free since 2016.

283
00:14:16,270 --> 00:14:20,643
So that's only been five
years, which is not that long.

284
00:14:23,880 --> 00:14:25,653
But even with the
specifications available,

285
00:14:25,653 --> 00:14:27,970
they're still pretty hard to use.

286
00:14:27,970 --> 00:14:29,483
And I get back to it later.

287
00:14:30,500 --> 00:14:33,040
There are a few external documentation

288
00:14:33,040 --> 00:14:36,713
and also a few research and
work about KNX security.

289
00:14:38,010 --> 00:14:40,880
But, obviously that does not mean

290
00:14:40,880 --> 00:14:42,493
there is nothing to say about it.

291
00:14:44,261 --> 00:14:48,563
And actually, there's a
lot to say. (chuckles)

292
00:14:52,030 --> 00:14:53,883
But the Standard got it covered.

293
00:14:55,180 --> 00:14:59,040
They say, "For KNX,
security is a minor concern,

294
00:14:59,040 --> 00:15:01,130
as any breach of security requires

295
00:15:01,130 --> 00:15:02,707
local access to the network."

296
00:15:05,687 --> 00:15:07,730
But that does not mean there is nothing

297
00:15:07,730 --> 00:15:09,980
about security in KNX.

298
00:15:09,980 --> 00:15:12,270
Some vendors implement authentication,

299
00:15:12,270 --> 00:15:15,730
not all of them, but this
is usually an option,

300
00:15:15,730 --> 00:15:19,060
which is usually disabled by default.

301
00:15:19,060 --> 00:15:21,360
Also there are security protection.

302
00:15:21,360 --> 00:15:26,060
I mentioned extensions,
which are KNX IP Secure

303
00:15:26,060 --> 00:15:28,260
and KNX Data Secure.

304
00:15:28,260 --> 00:15:30,800
But once again, they're extensions.

305
00:15:30,800 --> 00:15:31,830
They're add-ons.

306
00:15:31,830 --> 00:15:34,040
And you usually have to pay more

307
00:15:34,040 --> 00:15:36,880
or to get better devices to have them.

308
00:15:36,880 --> 00:15:38,683
So yeah, security is optional.

309
00:15:39,760 --> 00:15:43,020
And about the device's
exposed, I'm sure that.

310
00:15:43,020 --> 00:15:46,700
I'm not saying that none
of them use authentication

311
00:15:46,700 --> 00:15:50,660
or security extensions,
but I'm just saying

312
00:15:50,660 --> 00:15:52,443
that most of them probably don't.

313
00:15:55,701 --> 00:15:58,730
But then, the Standard
go that covered too.

314
00:15:58,730 --> 00:16:02,620
They say, "It is quite
unlikely that legitimate users

315
00:16:02,620 --> 00:16:05,420
of a network would have
the means to intercept,

316
00:16:05,420 --> 00:16:08,550
decipher, and then
tamper with the KNXnet/IP

317
00:16:08,550 --> 00:16:11,887
without excessive study of
the KNX specifications."

318
00:16:12,920 --> 00:16:16,580
So, this is what we call
security by obscurity,

319
00:16:16,580 --> 00:16:18,070
and that's bad.

320
00:16:18,070 --> 00:16:21,313
So KNX, hold my beer.

321
00:16:25,430 --> 00:16:28,030
So now let's get started.

322
00:16:28,030 --> 00:16:29,623
Let's start testing KNX.

323
00:16:30,707 --> 00:16:33,530
The Standard is right about one thing.

324
00:16:33,530 --> 00:16:35,020
The protocol is complicated.

325
00:16:35,020 --> 00:16:37,430
We have few resources and it's hard

326
00:16:37,430 --> 00:16:39,700
to start testing KNX really.

327
00:16:39,700 --> 00:16:41,660
So at least now the
specifications are free,

328
00:16:41,660 --> 00:16:45,540
but, and you just need an
account on KNX websites.

329
00:16:45,540 --> 00:16:48,000
But you also need good nerves

330
00:16:48,000 --> 00:16:53,000
because the specification is
148 PDF files in 10 sections,

331
00:16:53,360 --> 00:16:55,660
with information spread everywhere.

332
00:16:55,660 --> 00:16:57,930
So you just don't know
where to find what you need

333
00:16:57,930 --> 00:16:59,810
and you can grep as a need needs.

334
00:16:59,810 --> 00:17:01,740
That's a nightmare. (chuckles)

335
00:17:01,740 --> 00:17:03,900
Most likely, you only
need the volume three,

336
00:17:03,900 --> 00:17:06,600
but it's still 35 PDF files

337
00:17:06,600 --> 00:17:09,630
with information spread everywhere again.

338
00:17:09,630 --> 00:17:10,990
And for instance, if you're looking for

339
00:17:10,990 --> 00:17:12,420
how to build a request,

340
00:17:12,420 --> 00:17:14,200
that to send the value to an address,

341
00:17:14,200 --> 00:17:17,220
you need at least four
different PDF files.

342
00:17:17,220 --> 00:17:19,870
So we don't want to do that.

343
00:17:19,870 --> 00:17:22,433
And there's a better way
to get things started.

344
00:17:23,350 --> 00:17:27,140
We could set up a test
environment with free tools

345
00:17:27,140 --> 00:17:29,290
provided by the KNX Association.

346
00:17:29,290 --> 00:17:34,290
So we could use KNX Virtual
to emulate a KNX environment

347
00:17:34,410 --> 00:17:37,740
that will combine with ETS,

348
00:17:37,740 --> 00:17:39,480
which is the official engineering tool

349
00:17:39,480 --> 00:17:42,230
to configure a KNX environments.

350
00:17:42,230 --> 00:17:44,680
So you just set up that environment

351
00:17:44,680 --> 00:17:46,580
and then you just have to play with that

352
00:17:46,580 --> 00:17:50,040
while listening to the
traffic and you learn a lot.

353
00:17:50,040 --> 00:17:52,893
And this is all virtual,
so no side effects here.

354
00:17:54,190 --> 00:17:58,550
Also Wireshark already
has a KNXnet/IP dissector,

355
00:17:58,550 --> 00:18:00,200
which is really convenient.

356
00:18:00,200 --> 00:18:03,730
And also I have to say that
the code for the dissector

357
00:18:03,730 --> 00:18:06,823
is way more understandable
than the specifications.

358
00:18:09,060 --> 00:18:11,650
So I show you briefly how it looks like.

359
00:18:11,650 --> 00:18:14,370
I have a project configured in ETS,

360
00:18:14,370 --> 00:18:16,070
with lights and switches.

361
00:18:16,070 --> 00:18:18,310
I downloaded it to KNX Virtual.

362
00:18:18,310 --> 00:18:20,660
And we can see that if I click on buttons,

363
00:18:20,660 --> 00:18:22,910
it turns on and off lights.

364
00:18:22,910 --> 00:18:24,720
So that's a very straight forward set up,

365
00:18:24,720 --> 00:18:27,660
but that's already enough
to run a few things

366
00:18:27,660 --> 00:18:32,210
in a safe environment, and
we can also run diagnostic

367
00:18:32,210 --> 00:18:37,103
on ETS and see what happens
on Wireshark, and so on.

368
00:18:40,253 --> 00:18:43,266
Just before we really start testing KNX,

369
00:18:43,266 --> 00:18:46,140
there are a few key
concepts I'd like to mention

370
00:18:46,140 --> 00:18:49,800
because they are useful to fully
understand what's going on.

371
00:18:49,800 --> 00:18:52,770
So when an operator pushes a configuration

372
00:18:52,770 --> 00:18:56,290
or sends a command, a KNXnet/IP request

373
00:18:56,290 --> 00:18:59,150
is sent to the KNXnet IP interface.

374
00:18:59,150 --> 00:19:03,870
This frame may contain only
KNXnet/IP relevant information,

375
00:19:03,870 --> 00:19:06,330
or it can embed raw KNX data,

376
00:19:06,330 --> 00:19:08,413
which is related to the KNX layer.

377
00:19:09,290 --> 00:19:13,627
So this KNX data are called cEMI

378
00:19:13,627 --> 00:19:16,160
for common External Messaging Interface.

379
00:19:16,160 --> 00:19:19,300
And they are independent KNX messages

380
00:19:19,300 --> 00:19:23,266
with their own format inside
the KNXnet/IP requests.

381
00:19:23,266 --> 00:19:26,630
So this means that they
have their own headers,

382
00:19:26,630 --> 00:19:30,790
their own types, their
own bodies and so on.

383
00:19:30,790 --> 00:19:35,680
So this also means that we
don't have one protocol to test,

384
00:19:35,680 --> 00:19:38,100
but to, with different impacts,

385
00:19:38,100 --> 00:19:39,650
depending on the one we target.

386
00:19:43,212 --> 00:19:45,560
And finally, a few words
about the topology.

387
00:19:45,560 --> 00:19:47,150
When you are on the IP layer,

388
00:19:47,150 --> 00:19:48,780
of course you use IP addresses,

389
00:19:48,780 --> 00:19:51,680
but when you run the KNX layer,

390
00:19:51,680 --> 00:19:54,090
there are two types of addresses.

391
00:19:54,090 --> 00:19:56,750
The first one is individual addresses,

392
00:19:56,750 --> 00:19:58,973
which are used to refer to the device.

393
00:20:00,390 --> 00:20:02,200
The other one is group addresses,

394
00:20:02,200 --> 00:20:04,830
which we refer more to functions.

395
00:20:04,830 --> 00:20:07,470
So it's not a collection of devices,

396
00:20:07,470 --> 00:20:10,313
but more collection of
actions that devices can do.

397
00:20:11,210 --> 00:20:14,170
For instance, we can imagine
that the fire detector

398
00:20:14,170 --> 00:20:17,500
and the sprinklers subscribe
to the same group address.

399
00:20:17,500 --> 00:20:20,990
And when there's a fire, the fire detector

400
00:20:20,990 --> 00:20:25,990
will set the value 1 to the
group address associated to it.

401
00:20:26,640 --> 00:20:30,870
And when that's group
address answer value 1,

402
00:20:30,870 --> 00:20:32,763
it's just starts to sprinkler.

403
00:20:33,750 --> 00:20:35,100
I know it's a bit hard to understand,

404
00:20:35,100 --> 00:20:36,973
but it comes with practice, trust me.

405
00:20:38,070 --> 00:20:39,950
And that's all we need to know for now,

406
00:20:39,950 --> 00:20:42,513
and now we can really start testing.

407
00:20:44,510 --> 00:20:45,820
So there are already a few tools

408
00:20:45,820 --> 00:20:48,060
that we can use to do that.

409
00:20:48,060 --> 00:20:51,150
First there is, of course, ETS.

410
00:20:51,150 --> 00:20:52,480
KNXmap is also a great tool

411
00:20:52,480 --> 00:20:55,883
if you want to discover
devices and interact with them.

412
00:20:58,010 --> 00:20:59,769
So let me show you quickly.

413
00:20:59,769 --> 00:21:03,770
You can just KNXmap to scan
IP interfaces on the network.

414
00:21:03,770 --> 00:21:06,480
And you can see that we
don't need to know much

415
00:21:06,480 --> 00:21:09,253
about KNX to use KNXmap, which is cool.

416
00:21:10,350 --> 00:21:13,800
We can see from Wireshark,
that a lot of things happened.

417
00:21:13,800 --> 00:21:16,910
First, we see that we need
to send a KNX request.

418
00:21:16,910 --> 00:21:19,769
Then a tunneling request with a cEMI.

419
00:21:19,769 --> 00:21:22,233
And so on that, we'll
get back to it later.

420
00:21:24,580 --> 00:21:27,280
So there's KNXmap, but there's also

421
00:21:28,540 --> 00:21:31,570
the KNXnet/IP layer for Scapy,

422
00:21:31,570 --> 00:21:34,533
which was written by my
colleague Julien Bedel.

423
00:21:35,460 --> 00:21:38,070
It's not yet on a release,
but it's at least merged

424
00:21:38,070 --> 00:21:41,140
to Scapy Master, so
you can already use it.

425
00:21:41,140 --> 00:21:43,420
So thanks to thanks to Julien

426
00:21:43,420 --> 00:21:45,470
and thanks to Scapy maintainers for that.

427
00:21:48,220 --> 00:21:51,910
Both Scapy and KNXmap are
suitable for basic interaction.

428
00:21:51,910 --> 00:21:55,750
However, when I wanted to start
using them for my own tests,

429
00:21:55,750 --> 00:21:58,700
I encountered some limitations.

430
00:21:58,700 --> 00:22:02,400
So, first KNXmap is great if
you don't know the protocol.

431
00:22:02,400 --> 00:22:05,590
But, I could not use it
to craft invalid frames.

432
00:22:05,590 --> 00:22:10,160
I could not modify KNXmap
code to alter requests

433
00:22:10,160 --> 00:22:14,920
without rewriting parts of it
because they handle errors.

434
00:22:14,920 --> 00:22:15,870
Which is a good practice,

435
00:22:15,870 --> 00:22:17,620
but for fuzzing we don't want that.

436
00:22:18,460 --> 00:22:19,660
For Scapy, the opposite.

437
00:22:20,700 --> 00:22:21,850
You can't really use it

438
00:22:21,850 --> 00:22:23,950
if you don't know the protocol in details.

439
00:22:24,810 --> 00:22:27,770
But you can definitely use
it to craft invalid frames.

440
00:22:27,770 --> 00:22:30,070
However, they can become
really complicated,

441
00:22:30,070 --> 00:22:32,780
especially when they embed cEMI frames

442
00:22:32,780 --> 00:22:36,790
and also IP interfaces
are very strict usually,

443
00:22:36,790 --> 00:22:37,860
regarding the format.

444
00:22:37,860 --> 00:22:41,970
So when you fuzz, you have
to fuzz specific fields,

445
00:22:41,970 --> 00:22:43,710
which can become really complicated

446
00:22:43,710 --> 00:22:46,170
and the syntax can be really tough.

447
00:22:46,170 --> 00:22:48,920
So obviously, when nothing suits my need,

448
00:22:48,920 --> 00:22:50,533
it's fun to write a new tool.

449
00:22:53,200 --> 00:22:55,920
So now, I'm going to talk about
BOF which is a tool we wrote

450
00:22:55,920 --> 00:22:59,583
when I started using and
testing KNXnet/IP devices.

451
00:23:02,510 --> 00:23:05,520
BOF is a license free library
that we wrote to discover,

452
00:23:05,520 --> 00:23:07,630
interact with, and test devices,

453
00:23:07,630 --> 00:23:09,910
they are the industrial network protocols.

454
00:23:09,910 --> 00:23:11,950
So I originally created KNXnet/IP,

455
00:23:11,950 --> 00:23:14,530
but we can add other protocols.

456
00:23:14,530 --> 00:23:17,210
For instance, we are currently
adding Modbus support.

457
00:23:17,210 --> 00:23:18,450
So this is a library.

458
00:23:18,450 --> 00:23:22,570
So it's most likely meant
to write attack scripts,

459
00:23:22,570 --> 00:23:24,500
to change device's behaviors,

460
00:23:24,500 --> 00:23:27,660
or to test protocol
implementation on devices.

461
00:23:27,660 --> 00:23:31,510
So if you recall the attack
scenario I talked about earlier,

462
00:23:31,510 --> 00:23:35,803
about sending valid and invalid
frames to KNXnet/IP devices.

463
00:23:36,980 --> 00:23:39,520
BOF has been written to do both.

464
00:23:39,520 --> 00:23:40,970
No joke. (chuckles)

465
00:23:40,970 --> 00:23:42,830
And if you want to take a look at it,

466
00:23:42,830 --> 00:23:45,323
it's available on
Orange-Cyberdefense Github.

467
00:23:48,780 --> 00:23:51,850
To be honest, I wrote it
for my own needs first,

468
00:23:51,850 --> 00:23:53,360
and I use it doing pen tests

469
00:23:53,360 --> 00:23:55,890
for discovery and to send commands.

470
00:23:55,890 --> 00:23:59,150
But I also use it for
vulnerability research

471
00:23:59,150 --> 00:24:02,700
on protocol implementations on devices.

472
00:24:02,700 --> 00:24:07,540
So I use both to write dumb
and not-so-dumb fuzzer.

473
00:24:07,540 --> 00:24:08,990
I can say they are smart.

474
00:24:08,990 --> 00:24:11,350
And I give you an example of that soon.

475
00:24:11,350 --> 00:24:13,370
And the more I go further in my research,

476
00:24:13,370 --> 00:24:16,280
the more features I add in
both to help my testing.

477
00:24:16,280 --> 00:24:18,747
So hopefully it's getting
better and better.

478
00:24:22,040 --> 00:24:23,840
So before I show you how to use both

479
00:24:23,840 --> 00:24:26,150
for discovery and testing,
just a quick information

480
00:24:26,150 --> 00:24:29,383
about BOF internals, which
I think is interesting.

481
00:24:30,310 --> 00:24:33,250
The first version of BOF relied on JSON5

482
00:24:33,250 --> 00:24:36,800
for protocol implementations,
because it was easy to

483
00:24:36,800 --> 00:24:38,780
add and change things in the protocol.

484
00:24:38,780 --> 00:24:41,263
But at one point we had
too many limitations.

485
00:24:42,210 --> 00:24:44,410
So, and when I first presented BOF,

486
00:24:44,410 --> 00:24:47,610
I was asked, why not use Scapy?

487
00:24:47,610 --> 00:24:50,010
Which is actually a good question.

488
00:24:50,010 --> 00:24:52,567
And I was like, "Hmm, now
that you mentioned that?"

489
00:24:54,260 --> 00:24:57,480
So long story short, we ended up adding it

490
00:24:57,480 --> 00:24:59,770
to handle protocol implementations,

491
00:24:59,770 --> 00:25:03,163
but internally there's a
wrapper around it in BOF

492
00:25:03,163 --> 00:25:06,410
so that we don't lose
some of BOF capabilities

493
00:25:06,410 --> 00:25:09,750
that were not compatible
with Scapy's behaviors.

494
00:25:09,750 --> 00:25:12,230
However, we still let the
user access the Scapy object

495
00:25:12,230 --> 00:25:14,450
directly within BOF if she wants.

496
00:25:14,450 --> 00:25:16,150
So if you want to know more about that,

497
00:25:16,150 --> 00:25:19,323
we did tell how and why we
did that in the documentation.

498
00:25:20,950 --> 00:25:22,183
Now back to using BOF.

499
00:25:23,250 --> 00:25:26,740
As I mentioned before, BOF
can be used for discovery,

500
00:25:26,740 --> 00:25:29,720
basic interaction and advanced testing.

501
00:25:29,720 --> 00:25:31,723
So there are three ways to use BOF.

502
00:25:32,910 --> 00:25:34,920
The first is the high-level one,

503
00:25:34,920 --> 00:25:37,270
which requires no knowledge
about the protocol.

504
00:25:38,320 --> 00:25:40,330
There are just some
functions in the library

505
00:25:40,330 --> 00:25:43,600
that can be called to
perform basic operations

506
00:25:43,600 --> 00:25:45,313
on KNX installations.

507
00:25:46,240 --> 00:25:49,770
So for instance, this is my test setup.

508
00:25:49,770 --> 00:25:52,850
Here we want to turn
on this light and fan,

509
00:25:52,850 --> 00:25:55,770
which are linked to a switching actuator.

510
00:25:55,770 --> 00:25:58,000
The actuator is linked to an IP gateway

511
00:25:58,000 --> 00:26:00,520
that makes you reachable
from the local network

512
00:26:00,520 --> 00:26:02,300
and I'm on that local network,

513
00:26:02,300 --> 00:26:05,573
so I can communicate with
it choosing KNXnet/IP.

514
00:26:07,200 --> 00:26:10,730
The actuator is subscribed
group address 1/1/1

515
00:26:10,730 --> 00:26:14,840
for the light and fan witching
operations, both of them.

516
00:26:14,840 --> 00:26:17,300
When it's switched off, the value is 0.

517
00:26:17,300 --> 00:26:19,610
And when it's switched on, it's 1.

518
00:26:19,610 --> 00:26:24,540
So if I write value 1
to group address 1/1/1

519
00:26:24,540 --> 00:26:26,163
using the function group_write,

520
00:26:26,163 --> 00:26:28,783
we can see that something happens.

521
00:26:34,830 --> 00:26:36,420
Then there's an intermediate usage,

522
00:26:36,420 --> 00:26:39,603
which requires some basic
knowledge about the protocol.

523
00:26:40,620 --> 00:26:44,030
For instance, you could do the same thing

524
00:26:44,030 --> 00:26:48,000
as in the previous example,
but you can use this level

525
00:26:48,000 --> 00:26:51,770
to have more control on the exchange

526
00:26:51,770 --> 00:26:53,033
and the frames you sent.

527
00:26:54,640 --> 00:26:57,363
So for instance, if you
want to do the same thing,

528
00:26:58,830 --> 00:27:01,450
that's to say, change a value on devices.

529
00:27:01,450 --> 00:27:03,180
This is what happens.

530
00:27:03,180 --> 00:27:07,000
We send a KNXnet/IP frame to initiate

531
00:27:07,000 --> 00:27:09,620
a tunneling connection to the KNX layer.

532
00:27:09,620 --> 00:27:12,660
We then sent a tunneling
request containing

533
00:27:12,660 --> 00:27:15,250
a raw KNX frame, a cEMI.

534
00:27:15,250 --> 00:27:19,220
Here it's L_data/req,
which will be extracted

535
00:27:19,220 --> 00:27:21,470
and relayed to the KNX layer.

536
00:27:21,470 --> 00:27:23,680
The server responds with an ACK

537
00:27:23,680 --> 00:27:27,280
and also with a confirmation KNX frame

538
00:27:27,280 --> 00:27:30,430
to which we reply with an ACK because,

539
00:27:30,430 --> 00:27:33,340
at least my test server
is upset if I don't,

540
00:27:33,340 --> 00:27:34,407
and yes it's UDP.

541
00:27:37,566 --> 00:27:39,420
So using BOF, we'll just write a script

542
00:27:39,420 --> 00:27:41,560
that does exactly that.

543
00:27:41,560 --> 00:27:44,640
In here, the tunneling
request is just broken down

544
00:27:44,640 --> 00:27:46,900
so that you can see how it looks like.

545
00:27:46,900 --> 00:27:49,790
But there's also a direct
method that can be called

546
00:27:49,790 --> 00:27:52,023
to initiate and send the request.

547
00:27:54,690 --> 00:27:56,583
The code actually looks like that.

548
00:27:57,720 --> 00:28:00,853
So, let's try to switch
everything on again.

549
00:28:05,210 --> 00:28:06,423
And success.

550
00:28:08,380 --> 00:28:10,900
If we use the group
addresses that are attached

551
00:28:10,900 --> 00:28:13,900
to only one object in
the KNX configuration,

552
00:28:13,900 --> 00:28:17,203
we can also turn on and
off objects on their own.

553
00:28:21,890 --> 00:28:24,560
Oh and also something went wrong

554
00:28:24,560 --> 00:28:26,820
when we were setting up the demo.

555
00:28:26,820 --> 00:28:30,960
So let me introduce you what
I think is the first ever

556
00:28:30,960 --> 00:28:32,433
KNX operated gun.

557
00:28:34,042 --> 00:28:38,292
(motor winding and pellets firing)

558
00:28:41,420 --> 00:28:45,050
And the final level is the one
use to build the other ones,

559
00:28:45,050 --> 00:28:47,830
that can be used to change
everything in a frame.

560
00:28:47,830 --> 00:28:50,043
See, and this is the
part I use for fuzzing.

561
00:28:52,460 --> 00:28:56,293
Now, I just show you how to
start writing a fuzzer with BOF.

562
00:28:56,293 --> 00:28:57,370
We won't talk about the results

563
00:28:57,370 --> 00:28:59,410
because this is not
another conference about

564
00:28:59,410 --> 00:29:02,080
how we fuzz something to
find buffer overflows.

565
00:29:02,080 --> 00:29:04,410
Although, BOF can be used to do that.

566
00:29:04,410 --> 00:29:08,060
And KNXnet/IP interface
usually have Linux-based OS

567
00:29:08,060 --> 00:29:11,130
with services in C or
other compiler languages.

568
00:29:11,130 --> 00:29:13,383
So it's definitely
something that can happen.

569
00:29:14,360 --> 00:29:16,580
But back to our fuzzer.

570
00:29:16,580 --> 00:29:19,780
Here I choose to write
another type of frames

571
00:29:19,780 --> 00:29:22,480
because fuzzing tunneling
requests just writes

572
00:29:22,480 --> 00:29:24,837
bad configuration to test devices.

573
00:29:24,837 --> 00:29:28,620
So that's not the best
way to start I guess.

574
00:29:28,620 --> 00:29:31,778
So I want to mutate a
configuration requests.

575
00:29:31,778 --> 00:29:34,180
This means that I have my base frame

576
00:29:34,180 --> 00:29:36,100
and I wrote a generator function

577
00:29:36,100 --> 00:29:39,783
that will set a random value
to random field in that frame.

578
00:29:40,667 --> 00:29:42,897
Again, just fuzz the whole frame because

579
00:29:42,897 --> 00:29:44,880
if the a frame is not valid,

580
00:29:44,880 --> 00:29:47,130
it will be rejected by the IP interface

581
00:29:47,130 --> 00:29:48,910
before it's even processed.

582
00:29:48,910 --> 00:29:50,450
And here we don't want that

583
00:29:50,450 --> 00:29:52,300
because we are trying to cause errors

584
00:29:52,300 --> 00:29:54,483
while processing our frames.

585
00:29:55,390 --> 00:29:59,350
So I have to first mutate specific fields,

586
00:29:59,350 --> 00:30:02,500
not all of them because some
of them must remain valid

587
00:30:02,500 --> 00:30:04,533
for the request to be accepted.

588
00:30:06,110 --> 00:30:09,490
The request, the rest of
the code handle the exchange

589
00:30:09,490 --> 00:30:12,600
with a similar process as
for the tunneling request

590
00:30:12,600 --> 00:30:13,793
with the ACK and all.

591
00:30:14,860 --> 00:30:18,143
And it will send my
mutated KNXnet/IP frames.

592
00:30:18,980 --> 00:30:21,880
Some of them may trigger
some unexpected behaviors,

593
00:30:21,880 --> 00:30:25,963
which we would want to test
more afterwards to investigate.

594
00:30:26,920 --> 00:30:29,990
So here we want to first know which field

595
00:30:29,990 --> 00:30:33,510
triggered a handled error
to exclude them later

596
00:30:33,510 --> 00:30:35,140
from the final results.

597
00:30:35,140 --> 00:30:39,270
And we also want to know which
fields triggered timeout,

598
00:30:39,270 --> 00:30:41,870
that's to say frames that
did not get an answer.

599
00:30:41,870 --> 00:30:45,940
That's, they are the most
interesting ones for us.

600
00:30:45,940 --> 00:30:48,237
So let's run it on a test device.

601
00:30:48,237 --> 00:30:50,810
And you can see on Wireshark,
that's a lot of packets

602
00:30:50,810 --> 00:30:52,333
are being sent and received.

603
00:30:53,290 --> 00:30:55,990
At some point, we already
have some results.

604
00:30:55,990 --> 00:30:57,490
All of them are timeouts.

605
00:30:57,490 --> 00:31:02,490
And for each one of them, I
have the name of the field

606
00:31:02,610 --> 00:31:05,220
and the value that were mutated,

607
00:31:05,220 --> 00:31:09,470
as well as a view of the complete frame.

608
00:31:09,470 --> 00:31:12,210
So the result we have show that frames

609
00:31:12,210 --> 00:31:15,999
with some values in some
fields did not get a response

610
00:31:15,999 --> 00:31:17,600
from the test device.

611
00:31:17,600 --> 00:31:19,610
So here we have six results.

612
00:31:19,610 --> 00:31:21,890
So this means that we have six potentially

613
00:31:21,890 --> 00:31:25,793
problematic fields that we
will want to investigate.

614
00:31:27,170 --> 00:31:29,440
But at that point, there's one question.

615
00:31:29,440 --> 00:31:32,360
How do we know if the
device rejected the frame

616
00:31:32,360 --> 00:31:34,123
or crashed by processing it?

617
00:31:35,067 --> 00:31:37,950
And the answer is, using
all of this we don't.

618
00:31:37,950 --> 00:31:41,350
We could add an additional...

619
00:31:41,350 --> 00:31:43,020
We could send an additional frame

620
00:31:43,020 --> 00:31:47,080
to check if the device
just stopped responding.

621
00:31:47,080 --> 00:31:50,220
But even when the device
keeps on responding,

622
00:31:50,220 --> 00:31:52,400
that does not mean there was no crash.

623
00:31:52,400 --> 00:31:54,410
So the next things to do

624
00:31:54,410 --> 00:31:57,623
is to add a debugger on the
device and keep testing.

625
00:32:00,820 --> 00:32:02,980
But what do we expect to find then?

626
00:32:02,980 --> 00:32:05,270
So, first of all, we
expect to have crashes.

627
00:32:05,270 --> 00:32:07,300
Now that just the situations where,

628
00:32:07,300 --> 00:32:09,980
what we sent is not handled correctly

629
00:32:09,980 --> 00:32:13,970
and that we can investigate
to eventually exploit them.

630
00:32:13,970 --> 00:32:17,320
But depending on when, on
where the crash occurs,

631
00:32:17,320 --> 00:32:19,450
it may have different meaning.

632
00:32:19,450 --> 00:32:21,740
If it's anywhere in the KNXnet/IP frame,

633
00:32:21,740 --> 00:32:23,960
we can suspect that's a service

634
00:32:23,960 --> 00:32:27,030
or any other software
interpreting the frame

635
00:32:27,030 --> 00:32:30,430
crashed and that we can use it to possibly

636
00:32:30,430 --> 00:32:32,663
compromise the IP interface itself.

637
00:32:33,780 --> 00:32:36,753
But, if there's an error in the KNX frame,

638
00:32:37,710 --> 00:32:40,120
it can also be that...

639
00:32:41,080 --> 00:32:43,470
It can also be on the KNX layer,

640
00:32:43,470 --> 00:32:45,353
on the IP interface KNX layer,

641
00:32:46,534 --> 00:32:50,937
that a crash occurred leading
to the interface compromise.

642
00:32:52,110 --> 00:32:55,083
But it may also be on devices themself.

643
00:32:56,260 --> 00:32:58,210
However, it has never happen to me so far.

644
00:32:58,210 --> 00:33:01,100
So I might even be lying to
you right now. (chuckles)

645
00:33:01,100 --> 00:33:03,573
But investigating on
this is exciting anyway.

646
00:33:06,170 --> 00:33:07,570
It's time to wrap things up.

647
00:33:09,980 --> 00:33:12,670
So, we have seen that
there's lot of things to do

648
00:33:12,670 --> 00:33:15,140
on BMS and KNX security.

649
00:33:15,140 --> 00:33:17,110
What we have so far is environments

650
00:33:17,110 --> 00:33:18,880
that control important stuff,

651
00:33:18,880 --> 00:33:21,900
but where security is a minor concern.

652
00:33:21,900 --> 00:33:24,900
So for now we don't need to go really deep

653
00:33:24,900 --> 00:33:27,560
into hacking techniques,
as there is no protection

654
00:33:27,560 --> 00:33:29,770
to bypass or a few of them.

655
00:33:29,770 --> 00:33:32,760
But even when there is, can we consider

656
00:33:32,760 --> 00:33:36,053
that building management
system that use KNX are secure?

657
00:33:37,160 --> 00:33:40,500
So apart from just abusing such systems,

658
00:33:40,500 --> 00:33:44,350
we can go further and there
are a lot of research subject

659
00:33:44,350 --> 00:33:46,340
left to work on here.

660
00:33:46,340 --> 00:33:48,780
For instance, to find
out what's really inside

661
00:33:48,780 --> 00:33:52,400
widely-used implementations
and what we can do with them.

662
00:33:52,400 --> 00:33:55,610
Or what's inside KNX security extensions?

663
00:33:55,610 --> 00:33:58,720
Or even how to secure BMS efficiently

664
00:33:58,720 --> 00:34:01,163
and how to make sure
they are actually secure?

665
00:34:03,520 --> 00:34:05,410
Until then, there are a few things

666
00:34:05,410 --> 00:34:08,450
that we can already do
to make things better.

667
00:34:08,450 --> 00:34:11,620
So first, a quick message
to vendors and users.

668
00:34:11,620 --> 00:34:13,920
Stop assuming it's the other's problem.

669
00:34:13,920 --> 00:34:17,100
You both have your part to do in it.

670
00:34:17,100 --> 00:34:19,130
So vendors, please at least make sure that

671
00:34:19,130 --> 00:34:21,540
secure settings are default settings.

672
00:34:21,540 --> 00:34:26,320
And, users check all settings
and segregate your network,

673
00:34:26,320 --> 00:34:30,003
or at least don't expose
your devices on internet.

674
00:34:32,541 --> 00:34:35,910
And for us, we have a
brand new attacks surface,

675
00:34:35,910 --> 00:34:37,540
so let's test it.

676
00:34:37,540 --> 00:34:39,810
Maybe someone will learn something.

677
00:34:39,810 --> 00:34:41,250
Just be careful when you do that,

678
00:34:41,250 --> 00:34:43,373
and testing controlled environments.

679
00:34:44,230 --> 00:34:46,710
As for Defenders, lucky you,

680
00:34:46,710 --> 00:34:48,510
you get a brand new defense surface.

681
00:34:49,660 --> 00:34:50,690
So that's all for me.

682
00:34:50,690 --> 00:34:52,800
I hope you enjoy the presentation.

683
00:34:52,800 --> 00:34:54,000
Thank you for listening.

