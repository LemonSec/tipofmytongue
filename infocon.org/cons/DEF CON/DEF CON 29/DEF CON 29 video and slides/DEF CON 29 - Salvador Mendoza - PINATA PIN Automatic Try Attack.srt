1
00:00:00,810 --> 00:00:01,643
- Hello to everyone.

2
00:00:01,643 --> 00:00:04,000
Is a real pleasure to
be part of DefCon 29.

3
00:00:04,000 --> 00:00:05,340
My name is Salvador Mendoza

4
00:00:05,340 --> 00:00:08,080
and I'm a Security
Researcher at Metabase Q.

5
00:00:08,080 --> 00:00:09,540
And I'm proudly member of

6
00:00:09,540 --> 00:00:11,223
Ocelot Offensive Security Team.

7
00:00:12,870 --> 00:00:14,720
Today, I'm going to talk
about the Pinata attack,

8
00:00:14,720 --> 00:00:16,500
or PIN Automatic Try Attack,

9
00:00:16,500 --> 00:00:18,313
regarding EMV technology.

10
00:00:20,020 --> 00:00:22,470
So let's start with the agenda for today.

11
00:00:22,470 --> 00:00:25,240
We're going to have an
introduction to terminology.

12
00:00:25,240 --> 00:00:28,400
Also we're going to talk about
the EMV transaction flow,

13
00:00:28,400 --> 00:00:31,530
which basically is how the card data goes

14
00:00:31,530 --> 00:00:32,460
from the terminal

15
00:00:32,460 --> 00:00:34,413
to the bank institutions,

16
00:00:35,290 --> 00:00:36,440
and how it's processed.

17
00:00:37,700 --> 00:00:39,090
After that we're going to talk about

18
00:00:39,090 --> 00:00:43,700
the inadequate implementation
regarding this attack.

19
00:00:43,700 --> 00:00:46,573
How someone could exploit it.

20
00:00:48,020 --> 00:00:50,200
Finally we're going to have a demo

21
00:00:50,200 --> 00:00:54,980
implementing a internal tool, named Elma.

22
00:00:54,980 --> 00:00:55,813
And after that,

23
00:00:55,813 --> 00:00:57,890
we're going to have some
conclusions regarding

24
00:00:57,890 --> 00:00:58,833
this research.

25
00:01:05,270 --> 00:01:08,340
Let's analyze some terminology
that we're going to use

26
00:01:08,340 --> 00:01:10,610
throughout this presentation.

27
00:01:10,610 --> 00:01:12,600
Some of them are going
to be very important

28
00:01:12,600 --> 00:01:14,630
for the demos, for example,

29
00:01:14,630 --> 00:01:19,130
or to understand a little
bit more in depth, how,

30
00:01:19,130 --> 00:01:22,563
how the issue, how the bad
practices are implemented.

31
00:01:23,840 --> 00:01:26,383
So let's start with a
secure element, or SE,

32
00:01:27,290 --> 00:01:32,290
which is basically a responsible
to sign the transaction,

33
00:01:32,420 --> 00:01:35,530
but to keep the secrets in the
card, on the physical card,

34
00:01:35,530 --> 00:01:38,403
to sign the transactions,
when is processing it.

35
00:01:40,230 --> 00:01:43,840
There's CVM, is the cardholder
verification method,

36
00:01:43,840 --> 00:01:45,740
which could be different, right?

37
00:01:45,740 --> 00:01:48,800
It could be that you verify
the transaction by signing it,

38
00:01:48,800 --> 00:01:52,653
or it could be by PIN entry mode.

39
00:01:54,810 --> 00:01:58,259
Also, we have the APDU,
application protocol data unit,

40
00:01:58,259 --> 00:02:02,160
is a protocol in charge to communicate

41
00:02:02,160 --> 00:02:04,470
or to conduct the
communication between the card

42
00:02:04,470 --> 00:02:05,633
and the terminal.

43
00:02:08,580 --> 00:02:11,423
Also, we have the ICC, or
integrated circuit card.

44
00:02:13,300 --> 00:02:17,133
We know these cards, as well
as smart cards, for example,

45
00:02:18,030 --> 00:02:19,850
but we're going to talk specifically

46
00:02:19,850 --> 00:02:22,740
to the EMV transactions.

47
00:02:22,740 --> 00:02:24,683
That's to be clear.

48
00:02:25,750 --> 00:02:28,290
The PRC is the PIN retry counter.

49
00:02:28,290 --> 00:02:31,140
One of the most important
terms that we're going to use

50
00:02:31,140 --> 00:02:32,900
during this presentation

51
00:02:32,900 --> 00:02:37,900
and also the ARC or ARPC,
authorization response code,

52
00:02:38,810 --> 00:02:42,510
how the bank institution
responds back to the transaction

53
00:02:42,510 --> 00:02:43,343
into a terminal.

54
00:02:46,440 --> 00:02:50,310
The EMV contact payment
is one of the most common,

55
00:02:50,310 --> 00:02:52,560
un-secure technology that we implement

56
00:02:52,560 --> 00:02:55,063
and use every day to make transactions.

57
00:02:55,910 --> 00:02:59,200
Because it implements a secure element.

58
00:02:59,200 --> 00:03:04,200
The secure element is in
charge to sign the transactions

59
00:03:04,220 --> 00:03:05,420
or to sign the challenge

60
00:03:05,420 --> 00:03:07,270
that terminal is sending to the card.

61
00:03:08,520 --> 00:03:10,720
Basically a contact payment.

62
00:03:10,720 --> 00:03:13,453
It's when we insert the
card into a terminal,

63
00:03:14,460 --> 00:03:17,470
and we'll leave it there
until the transaction finish.

64
00:03:17,470 --> 00:03:22,360
Sometimes the user will require to insert,

65
00:03:22,360 --> 00:03:25,830
or to enter the PIN, for the transaction.

66
00:03:25,830 --> 00:03:29,220
Sometimes it will require to sign a paper

67
00:03:29,220 --> 00:03:31,113
to verify the transaction.

68
00:03:36,640 --> 00:03:39,620
When the card is in
inserted into a terminal

69
00:03:39,620 --> 00:03:40,740
is going to be detected

70
00:03:40,740 --> 00:03:42,753
and after that is going to be reset.

71
00:03:44,058 --> 00:03:45,780
Is going to be the list applications,

72
00:03:45,780 --> 00:03:48,170
and is going to be
different the steps until

73
00:03:48,170 --> 00:03:49,593
the transaction is complete.

74
00:03:50,460 --> 00:03:51,560
During these steps.

75
00:03:51,560 --> 00:03:54,500
One of the most important
is if the transaction

76
00:03:54,500 --> 00:03:56,190
is going to be processed online

77
00:03:56,190 --> 00:03:59,430
or is going to be processed offline mode.

78
00:04:00,340 --> 00:04:02,739
It will depend on different factors.

79
00:04:02,739 --> 00:04:03,652
And of course,

80
00:04:03,652 --> 00:04:05,963
is going to depend on
the verification method.

81
00:04:11,000 --> 00:04:14,690
If we take a look into different details

82
00:04:14,690 --> 00:04:17,590
regarding the terminal
on card communication,

83
00:04:17,590 --> 00:04:21,400
we can see in the protocol phases, how,

84
00:04:21,400 --> 00:04:24,370
how this transaction goes through.

85
00:04:24,370 --> 00:04:27,400
For example, we have
the card authentication,

86
00:04:27,400 --> 00:04:29,970
we have the cardholder
verification method,

87
00:04:29,970 --> 00:04:32,680
and also we have the
transaction authorization.

88
00:04:32,680 --> 00:04:35,113
It is going to be the last phase,

89
00:04:35,960 --> 00:04:38,313
after the verification in the transaction.

90
00:04:39,460 --> 00:04:42,540
When the terminal starts
sending commands to the card,

91
00:04:42,540 --> 00:04:47,180
the card must answer back
for that specific command.

92
00:04:47,180 --> 00:04:48,290
But for example,

93
00:04:48,290 --> 00:04:51,050
let's say if the terminal sends a command

94
00:04:51,050 --> 00:04:53,503
that is not properly right,

95
00:04:54,510 --> 00:04:57,943
the card will answer back that
that command wasn't right.

96
00:05:01,080 --> 00:05:03,990
So the terminal is going
to prepare a new command

97
00:05:03,990 --> 00:05:05,870
and send it back to the card.

98
00:05:05,870 --> 00:05:07,970
So basically, it's when
you're typing something

99
00:05:07,970 --> 00:05:10,913
to a terminal and every
command you're getting

100
00:05:10,913 --> 00:05:14,467
a response back, it's the
same thing with a terminal

101
00:05:14,467 --> 00:05:15,393
and the card.

102
00:05:16,870 --> 00:05:20,800
It's like a, sending a command
and getting a response back

103
00:05:20,800 --> 00:05:21,633
very quickly.

104
00:05:22,850 --> 00:05:26,140
One of the most important
parts and this protocol phase

105
00:05:26,140 --> 00:05:27,530
is the cardholder modification method

106
00:05:27,530 --> 00:05:31,293
that we're going to implement
for the Pinata attack.

107
00:05:35,840 --> 00:05:38,937
Many people think that the
communication between the card

108
00:05:38,937 --> 00:05:43,937
and the terminal is encrypted,
but is not, sadly is not.

109
00:05:44,860 --> 00:05:47,750
And they use the ISO 7816,

110
00:05:47,750 --> 00:05:51,760
which basically, many other
technologies use it as well.

111
00:05:51,760 --> 00:05:53,600
Such as NFC, for example.

112
00:05:53,600 --> 00:05:58,460
NFC implements the application APDU layer

113
00:05:58,460 --> 00:06:00,680
to communicate with a terminal, as well.

114
00:06:00,680 --> 00:06:02,690
And also the same technology

115
00:06:02,690 --> 00:06:05,460
that we use for our cell phones.

116
00:06:05,460 --> 00:06:07,860
This chip that you put in cell phone,

117
00:06:07,860 --> 00:06:11,820
it communicates implementing
the same APDU layer

118
00:06:11,820 --> 00:06:14,370
with a cellular phone.

119
00:06:14,370 --> 00:06:17,200
So it's not encrypted the communication,

120
00:06:17,200 --> 00:06:21,053
but you need to follows a format
and we're going to analyze

121
00:06:21,053 --> 00:06:24,720
what is the format? What
is the APDU command format?

122
00:06:24,720 --> 00:06:27,950
And also what is the APDU answer format?

123
00:06:27,950 --> 00:06:31,310
So how they know how to answer back

124
00:06:31,310 --> 00:06:33,230
and which format is going to be.

125
00:06:33,230 --> 00:06:38,010
And take a look into the
different details of parameters

126
00:06:38,010 --> 00:06:41,483
inside of this, of this APDU protocol.

127
00:06:43,670 --> 00:06:46,297
So let's analyze one of
the most important parts

128
00:06:46,297 --> 00:06:47,840
in the APDU protocol,

129
00:06:47,840 --> 00:06:50,350
which are the commands and the responses.

130
00:06:50,350 --> 00:06:53,720
So basically let's start
with the APDU command,

131
00:06:53,720 --> 00:06:58,100
which is literally different
from the card response.

132
00:06:58,100 --> 00:06:59,510
We have a header,

133
00:06:59,510 --> 00:07:01,030
and we have a body.

134
00:07:01,030 --> 00:07:03,020
And the body we have the
length of the command.

135
00:07:03,020 --> 00:07:05,160
And also we have the
data from the commands

136
00:07:05,160 --> 00:07:06,460
or the command, basically.

137
00:07:07,910 --> 00:07:11,810
On the response, we have the
data and we have the trailer.

138
00:07:11,810 --> 00:07:15,000
The trailer basically is the status

139
00:07:15,000 --> 00:07:16,840
of the previous command from a terminal,

140
00:07:16,840 --> 00:07:20,350
which basically that
it tells if the command

141
00:07:20,350 --> 00:07:23,513
was secured correctly, or
if there is something wrong.

142
00:07:24,460 --> 00:07:27,290
Something in the answer

143
00:07:28,350 --> 00:07:30,600
is going to be in the
status of this trailer.

144
00:07:31,650 --> 00:07:35,070
So to have a better idea,

145
00:07:35,070 --> 00:07:38,400
let's analyze a APDU command example.

146
00:07:38,400 --> 00:07:41,963
This one on the, is going
to be the first command

147
00:07:41,963 --> 00:07:43,973
that the terminal sends to the card.

148
00:07:45,070 --> 00:07:47,720
We analyze it separately.

149
00:07:47,720 --> 00:07:49,260
We can see what is a class,

150
00:07:49,260 --> 00:07:51,180
what is the instruction,

151
00:07:51,180 --> 00:07:53,540
we have a parameter one, parameter two,

152
00:07:53,540 --> 00:07:55,470
and we have the command length

153
00:07:55,470 --> 00:07:56,913
and after that, we have the command

154
00:07:56,913 --> 00:07:59,073
that is going to be sent to the card.

155
00:08:01,340 --> 00:08:04,083
The same way, we have the card response,

156
00:08:05,410 --> 00:08:09,420
which basically is the data.
And after that is a trailer.

157
00:08:09,420 --> 00:08:11,660
So in this particular example,

158
00:08:11,660 --> 00:08:14,770
we have the data and the

159
00:08:14,770 --> 00:08:16,970
trailer is going to be 90 00,

160
00:08:16,970 --> 00:08:19,920
which basically is that
the previous command was,

161
00:08:19,920 --> 00:08:21,223
it secured correctly.

162
00:08:22,920 --> 00:08:26,240
So now to analyze the data,
for example, in this response

163
00:08:26,240 --> 00:08:28,460
we need to decode it.

164
00:08:28,460 --> 00:08:33,460
To decode this data, we need
to use a TLV decoding method.

165
00:08:35,000 --> 00:08:40,000
Or we can use the
emvlab.org, decoding tool,

166
00:08:40,220 --> 00:08:42,900
which basically you put the APDU

167
00:08:42,900 --> 00:08:45,313
is going to break apart each,

168
00:08:46,800 --> 00:08:48,370
each command or each answer

169
00:08:48,370 --> 00:08:51,150
that they print to the card,

170
00:08:51,150 --> 00:08:53,460
which is very straightforward.

171
00:08:53,460 --> 00:08:57,878
For this type of responses,
or commands we can analyze

172
00:08:57,878 --> 00:09:02,878
very quickly to see what is
inside of the APDU protocol.

173
00:09:04,690 --> 00:09:07,040
But essential to understand the process

174
00:09:07,040 --> 00:09:09,660
and to understand the
communication between the terminal

175
00:09:10,620 --> 00:09:11,453
on the card.

176
00:09:15,259 --> 00:09:16,370
As a security researcher,

177
00:09:16,370 --> 00:09:18,800
sometimes you need to find a way

178
00:09:18,800 --> 00:09:21,853
to test some implementations,

179
00:09:22,810 --> 00:09:26,010
but sometimes even when you have the idea,

180
00:09:26,010 --> 00:09:29,830
you need to design or
create hardware or software,

181
00:09:29,830 --> 00:09:31,873
depending on what you want to test.

182
00:09:33,250 --> 00:09:34,560
This was the case

183
00:09:34,560 --> 00:09:39,560
when we need to design a
tool to analyze APDU protocol

184
00:09:40,100 --> 00:09:45,033
between the contact card, or
EMV card, and the terminal.

185
00:09:46,360 --> 00:09:50,150
Because we know that these security cards,

186
00:09:50,150 --> 00:09:53,757
but one thing is, what they mentioned

187
00:09:53,757 --> 00:09:56,730
saying that they are security cards

188
00:09:56,730 --> 00:09:58,620
and another thing very differently

189
00:09:58,620 --> 00:10:00,380
is the implementation.

190
00:10:00,380 --> 00:10:05,380
So we decide to create or to
design the Elma technology.

191
00:10:05,970 --> 00:10:10,400
This Elma tool is a EMV
Laboratory Middleware Assistant,

192
00:10:10,400 --> 00:10:12,760
which basically is what it does.

193
00:10:12,760 --> 00:10:17,760
It assist to analyze the EMV
protocol between the terminal

194
00:10:17,910 --> 00:10:19,193
on the card.

195
00:10:20,441 --> 00:10:23,217
We're going to go into it tells about

196
00:10:23,217 --> 00:10:27,180
how we design this hardware
and what are the capabilities

197
00:10:27,180 --> 00:10:29,390
that we have in the laboratory

198
00:10:29,390 --> 00:10:31,693
to analyze these technologies.

199
00:10:34,610 --> 00:10:36,670
So this is the Elma board.

200
00:10:36,670 --> 00:10:41,203
Is based on Simtrace 2, which
is a open hardware project.

201
00:10:42,620 --> 00:10:47,120
Is specifically designed
for the same technologies

202
00:10:47,120 --> 00:10:51,423
implemented in the cellular
phones, or the GSM network.

203
00:10:52,920 --> 00:10:56,930
So the idea of Simtrace
2 is that you can sniff

204
00:10:56,930 --> 00:11:01,630
or emulate traffic using the
same adapter on the board,

205
00:11:01,630 --> 00:11:05,773
or using the USB cable connect
to a client in the computer.

206
00:11:08,000 --> 00:11:08,900
On the other hand,

207
00:11:09,870 --> 00:11:13,080
the Elma board is specifically designed,

208
00:11:13,080 --> 00:11:17,260
using adapter, flexible
adapters, on both ends.

209
00:11:17,260 --> 00:11:20,783
But also it has a capability
to implement the USB,

210
00:11:21,920 --> 00:11:26,920
to feed the board or
to analyze the traffic

211
00:11:27,530 --> 00:11:30,423
between the terminal on the EMV card.

212
00:11:31,810 --> 00:11:35,060
Also, it's capable to connect to a server,

213
00:11:35,060 --> 00:11:39,763
implementing the wifi
connectivity, using the ESP 32.

214
00:11:40,910 --> 00:11:43,610
And it help us a lot in the laboratory

215
00:11:43,610 --> 00:11:47,140
to understand the protocol
and to understand the features

216
00:11:47,140 --> 00:11:49,853
in the EMV cards.

217
00:11:52,460 --> 00:11:55,890
These are some of the
characteristics of the Elma board.

218
00:11:55,890 --> 00:12:00,140
We have the USB-C connector,
which basically is for,

219
00:12:00,140 --> 00:12:02,550
for flexibility.

220
00:12:02,550 --> 00:12:06,490
Also, we have the ESP
32 that we implemented

221
00:12:06,490 --> 00:12:09,710
for wifi connectivity to the server

222
00:12:09,710 --> 00:12:12,830
or to external server
where we can send data

223
00:12:12,830 --> 00:12:16,460
from the board, process it.

224
00:12:16,460 --> 00:12:18,490
And after that, send
them back to the board.

225
00:12:18,490 --> 00:12:22,423
So the board can emulate
it directly to a terminal.

226
00:12:23,270 --> 00:12:26,810
Of course, where you have
different adapters to connect,

227
00:12:26,810 --> 00:12:30,453
like for example, EMV cards or SIM cards,

228
00:12:31,910 --> 00:12:35,290
we have different modes
that they could be, eh,

229
00:12:35,290 --> 00:12:40,060
sniffing modes, fuzzers or
emulation specifically for,

230
00:12:40,060 --> 00:12:41,880
for a task.

231
00:12:41,880 --> 00:12:43,896
Let me show you how it looks a,

232
00:12:43,896 --> 00:12:47,033
a connection for the sniffing traffic.

233
00:12:49,010 --> 00:12:52,250
We have the EMV card in one side

234
00:12:52,250 --> 00:12:55,400
and we have the Elma in the middle.

235
00:12:55,400 --> 00:12:56,233
And after that,

236
00:12:56,233 --> 00:12:58,360
we implement another connector

237
00:12:58,360 --> 00:13:01,370
with a physical physical board

238
00:13:02,770 --> 00:13:07,770
that simulates a physical
EMV card to the terminal,

239
00:13:08,260 --> 00:13:13,260
which basically, it sends
the data through the Elma.

240
00:13:13,860 --> 00:13:16,703
And it simulates a transaction.
Let's say, for example.

241
00:13:17,610 --> 00:13:19,947
Basically this idea is to
sniff the traffic from the card

242
00:13:19,947 --> 00:13:24,947
to the terminal and read
the responses from the,

243
00:13:25,600 --> 00:13:26,433
from the card.

244
00:13:27,350 --> 00:13:30,080
The idea of seeing the
commands from the terminal

245
00:13:30,080 --> 00:13:33,755
and seeing the response
from the card is to analyze

246
00:13:33,755 --> 00:13:36,994
how they interact with
each other and after that

247
00:13:36,994 --> 00:13:40,180
we can analyze their responses.

248
00:13:40,180 --> 00:13:42,370
And to see there is something where

249
00:13:43,630 --> 00:13:45,493
putting this communication process.

250
00:13:52,350 --> 00:13:55,220
So let's analyze the Elma tool set.

251
00:13:55,220 --> 00:13:58,570
Elma has different
capabilities in the client.

252
00:13:58,570 --> 00:14:00,330
And also in the board.

253
00:14:00,330 --> 00:14:02,610
For example, we can use a sniffer

254
00:14:02,610 --> 00:14:04,743
or emulator depending on the task.

255
00:14:05,580 --> 00:14:09,570
Let's say for example, that
we want to sniff some traffic.

256
00:14:09,570 --> 00:14:12,210
We can run the sniffer,

257
00:14:12,210 --> 00:14:15,603
the sniffer platform,
or the sniffer firmware.

258
00:14:16,600 --> 00:14:18,850
Or we want to emulate something

259
00:14:18,850 --> 00:14:23,380
we can use the emulator
for that task specifically.

260
00:14:23,380 --> 00:14:25,000
Inside of the emulator,

261
00:14:25,000 --> 00:14:28,428
we have different features
like man-in-the-middle.

262
00:14:28,428 --> 00:14:30,970
The man-in-the-middle can alter the CVM,

263
00:14:30,970 --> 00:14:34,571
or basically the cardholder
verification method.

264
00:14:34,571 --> 00:14:35,894
Imagine that we have the list

265
00:14:35,894 --> 00:14:37,763
of the cardholder verification method

266
00:14:37,763 --> 00:14:41,980
that in this list, depending on the order,

267
00:14:41,980 --> 00:14:43,830
it could be the verification method.

268
00:14:43,830 --> 00:14:46,800
So we can change that implementing this,

269
00:14:46,800 --> 00:14:50,330
this type of man-in-the-middle
emulation mode.

270
00:14:50,330 --> 00:14:52,710
Also we can change the terminal commands,

271
00:14:52,710 --> 00:14:55,580
we can adapt the card response,

272
00:14:55,580 --> 00:14:58,230
but one of the most
important parts is that

273
00:14:58,230 --> 00:15:02,070
we can modify any EMV type value.

274
00:15:02,070 --> 00:15:06,320
This is to test the
environment, basically.

275
00:15:06,320 --> 00:15:11,320
Also, we have APDU fuzzer
is to send random data

276
00:15:11,640 --> 00:15:13,970
to a terminal or to the card

277
00:15:13,970 --> 00:15:18,780
to see if we can break something. Right?

278
00:15:18,780 --> 00:15:21,860
Of course, we have the Pinata attack.

279
00:15:21,860 --> 00:15:24,540
And in these, in these features,

280
00:15:24,540 --> 00:15:28,283
which is basically this
presentation is based on.

281
00:15:29,490 --> 00:15:31,430
And above all of that,

282
00:15:31,430 --> 00:15:35,253
we have the option to implement a relay.

283
00:15:37,141 --> 00:15:40,330
This means that for example, we can have,

284
00:15:40,330 --> 00:15:43,210
the Elma board and one computer,

285
00:15:43,210 --> 00:15:46,780
and even the physical card
could be in another location.

286
00:15:46,780 --> 00:15:48,910
And we can start data from that card,

287
00:15:48,910 --> 00:15:53,910
implementing the client
for, for this, for this Elma

288
00:15:54,130 --> 00:15:54,963
is my work.

289
00:15:58,570 --> 00:16:00,280
So the virtual smart card

290
00:16:00,280 --> 00:16:05,100
is the core of the Elma technology.

291
00:16:05,100 --> 00:16:09,800
Basically, I can relate
it to a software emulator

292
00:16:09,800 --> 00:16:11,193
of smart cards,

293
00:16:12,160 --> 00:16:13,920
but you have the capabilities

294
00:16:13,920 --> 00:16:17,410
to connect physical card
readers to your computer

295
00:16:17,410 --> 00:16:20,033
and move the data between these,

296
00:16:20,033 --> 00:16:22,860
virtual smart card readers,

297
00:16:22,860 --> 00:16:25,493
change the data and send it back.

298
00:16:26,340 --> 00:16:29,760
And it could be sending back
over a relay for example,

299
00:16:29,760 --> 00:16:32,973
or you can send it back
locally to another device

300
00:16:32,973 --> 00:16:36,530
that is connected to the device.

301
00:16:36,530 --> 00:16:38,190
It's very easy to use it.

302
00:16:38,190 --> 00:16:42,723
And we implemented a
lot in the Elma design.

303
00:16:44,720 --> 00:16:47,100
So after we analyze the APDU protocol

304
00:16:47,100 --> 00:16:52,100
and how we design the Elma
prototype, or Elma technology.

305
00:16:53,860 --> 00:16:54,693
Let me talk a little bit

306
00:16:54,693 --> 00:16:56,850
about this inadequate implementation

307
00:16:56,850 --> 00:17:01,537
to reset the PIN retry
counter in the EMV cards,

308
00:17:02,790 --> 00:17:07,053
or bank cards, let's say.

309
00:17:08,300 --> 00:17:13,300
So let's talk a little bit
about what is a process

310
00:17:14,250 --> 00:17:15,960
in the protocol

311
00:17:15,960 --> 00:17:19,920
when a transaction starts in the terminal

312
00:17:20,970 --> 00:17:23,460
Initially, we have the
card authentication.

313
00:17:23,460 --> 00:17:26,080
After that we have the
cardholder verification,

314
00:17:26,080 --> 00:17:29,500
and then we have the
transaction authorization.

315
00:17:29,500 --> 00:17:34,500
So let's start with the
card authentication.

316
00:17:34,690 --> 00:17:35,780
In this step,

317
00:17:35,780 --> 00:17:40,030
the terminal start sending commands

318
00:17:40,030 --> 00:17:42,100
to list the applications.

319
00:17:42,100 --> 00:17:46,043
Basically this point the
terminal knows what kind of card

320
00:17:46,043 --> 00:17:51,043
you are using. Let's say visa,
MasterCard, American express,

321
00:17:53,010 --> 00:17:54,650
something else.

322
00:17:54,650 --> 00:17:57,260
So in the next, in the next step

323
00:17:57,260 --> 00:18:00,280
is going to be the cardholder
verification method.

324
00:18:00,280 --> 00:18:05,280
It's where the terminal is
going to prompt to enter a PIN.

325
00:18:05,820 --> 00:18:10,820
Or it's going to ask you to
sign, to sign in terminal,

326
00:18:10,900 --> 00:18:15,207
or is going, is going to depend,

327
00:18:15,207 --> 00:18:17,400
depending of the terminal technology.

328
00:18:17,400 --> 00:18:21,033
And of course, comparing
to the card technology.

329
00:18:22,700 --> 00:18:26,500
All this process is going to finish

330
00:18:26,500 --> 00:18:28,493
with the transaction authorization.

331
00:18:30,240 --> 00:18:34,120
And this part, the terminal sends,

332
00:18:34,120 --> 00:18:36,123
all the data to the backend,

333
00:18:37,020 --> 00:18:38,713
to the financial institution.

334
00:18:39,710 --> 00:18:41,363
And the financial institutions,

335
00:18:42,350 --> 00:18:45,703
the financial institutions
sends back the IRC,

336
00:18:47,080 --> 00:18:50,250
which basically is the
authorization response code.

337
00:18:50,250 --> 00:18:53,540
And this is applied to
the card or on of course,

338
00:18:53,540 --> 00:18:56,023
applied to the, to a transaction.

339
00:18:58,240 --> 00:19:00,600
So at this point,

340
00:19:00,600 --> 00:19:05,000
the transaction can go through
or it could be declined.

341
00:19:05,000 --> 00:19:09,563
Is going to depend in all of
these, all of these forms.

342
00:19:13,840 --> 00:19:17,590
So let's focus in on the
cardholder verification phase,

343
00:19:17,590 --> 00:19:19,030
which is one of them,

344
00:19:19,030 --> 00:19:22,053
one of the important
steps in this research.

345
00:19:23,230 --> 00:19:25,810
Do you know how many
cardholder verification methods

346
00:19:25,810 --> 00:19:26,643
do we have,

347
00:19:28,220 --> 00:19:30,580
to make a transaction, for example?

348
00:19:30,580 --> 00:19:33,600
So let's focus and read a little bit about

349
00:19:34,500 --> 00:19:38,220
how many this verification
methods, implements,

350
00:19:38,220 --> 00:19:40,203
in the terminal on the card,

351
00:19:41,460 --> 00:19:43,930
when you're making a transaction.

352
00:19:43,930 --> 00:19:47,840
So we have a kind of
list inside of the card

353
00:19:47,840 --> 00:19:50,580
that it tells the terminal,

354
00:19:50,580 --> 00:19:53,693
what kind of verification
methods is capable of.

355
00:19:54,796 --> 00:19:56,260
Some of them are like,

356
00:19:56,260 --> 00:20:00,590
no CVM required, signing the paper,

357
00:20:00,590 --> 00:20:03,323
plaintext PIN by ICC,

358
00:20:04,737 --> 00:20:06,683
plaintext PIN on paper,

359
00:20:08,320 --> 00:20:13,240
also encrypt PIN by ICC, or
encrypt by ICC and sign paper.

360
00:20:13,240 --> 00:20:16,930
And one of the most
important is encrypted PIN

361
00:20:16,930 --> 00:20:19,860
and is verification online,

362
00:20:19,860 --> 00:20:23,138
which is one of the normal verification

363
00:20:23,138 --> 00:20:26,760
when you're using an ATM for example,

364
00:20:26,760 --> 00:20:29,480
the verification is encrypted PIN

365
00:20:29,480 --> 00:20:33,160
and verify online all the time.

366
00:20:33,160 --> 00:20:36,140
So this some of the most common

367
00:20:36,140 --> 00:20:38,600
cardholder verification
methods that we use

368
00:20:39,490 --> 00:20:40,783
with the transactions.

369
00:20:43,040 --> 00:20:46,234
So let's analyze this card response,

370
00:20:46,234 --> 00:20:49,023
where we need to take
a look at the CVM list,

371
00:20:50,430 --> 00:20:55,393
especially putting attention
to the 8E tag value.

372
00:20:56,370 --> 00:21:01,323
So the first step is to
decode it, to see how it's,

373
00:21:02,590 --> 00:21:03,660
how it's implemented

374
00:21:03,660 --> 00:21:08,523
or what kind of value
the 8E attack contains.

375
00:21:09,890 --> 00:21:11,890
So after we decode it,

376
00:21:11,890 --> 00:21:14,440
we can see the cardholder
verification method list.

377
00:21:15,470 --> 00:21:20,080
Inside of the list we have all the values,

378
00:21:20,080 --> 00:21:25,080
all the possibilities
that the physical card has

379
00:21:25,350 --> 00:21:27,213
to verify a transaction.

380
00:21:29,670 --> 00:21:34,403
Specifically, I'm talking
about the 8E EMV tag.

381
00:21:36,540 --> 00:21:41,350
If we split the values we can
understand them individually.

382
00:21:41,350 --> 00:21:42,910
So let's do that.

383
00:21:42,910 --> 00:21:47,690
So we have this list and
we are going to separate

384
00:21:47,690 --> 00:21:51,080
each value to understand what exactly,

385
00:21:51,080 --> 00:21:52,053
what exactly means.

386
00:21:53,350 --> 00:21:56,253
So we have encrypt, encrypted
PIN, in the first row,

387
00:21:57,493 --> 00:21:59,003
if terminal supports CVM.

388
00:21:59,840 --> 00:22:03,043
The second row, is encrypted PIN by ICC.

389
00:22:04,150 --> 00:22:07,433
And the third row is plain PIN by ICC.

390
00:22:08,635 --> 00:22:11,390
And the next one is a sign.

391
00:22:11,390 --> 00:22:13,713
Under that one, is no CVM required.

392
00:22:15,210 --> 00:22:17,643
You can see this list is in order.

393
00:22:18,950 --> 00:22:22,840
Do you might what happened if
I flip the values, let's say,

394
00:22:22,840 --> 00:22:27,083
if I put the 1F03 on the top of the list?

395
00:22:29,450 --> 00:22:33,410
That could be another
attack of another research,

396
00:22:33,410 --> 00:22:36,290
but let's say we're going to be focused on

397
00:22:36,290 --> 00:22:38,393
the plain Pin by ICC.

398
00:22:39,850 --> 00:22:41,773
What this verification method does?

399
00:22:43,550 --> 00:22:48,350
What exactly does is
that you can verify a PIN

400
00:22:48,350 --> 00:22:50,713
against the ICC.

401
00:22:52,250 --> 00:22:57,250
So for example, I want to
verify a PIN 1, 2, 3, and 4.

402
00:22:57,710 --> 00:23:01,851
So I can send this 1, 2, 3, and 4

403
00:23:01,851 --> 00:23:04,380
to the card implementing this command.

404
00:23:06,040 --> 00:23:10,910
On the EMV card has different
possibilities to respond.

405
00:23:10,910 --> 00:23:14,014
Let's say if it is that the right thing,

406
00:23:14,014 --> 00:23:18,070
you're going to be a 90 00,

407
00:23:18,070 --> 00:23:23,070
which is going to be the trail
of the EMV card response.

408
00:23:24,940 --> 00:23:27,770
But also they have no more options

409
00:23:27,770 --> 00:23:32,770
like 63 C2, which means
there is a wrong PIN,

410
00:23:32,880 --> 00:23:34,993
but you have two more attempts left.

411
00:23:36,250 --> 00:23:40,510
And after that is going to be 63 C1,

412
00:23:40,510 --> 00:23:42,120
which means is a wrong PIN,

413
00:23:42,120 --> 00:23:43,787
and one more attempt left.

414
00:23:43,787 --> 00:23:48,233
And 63 C0, which means wrong
PIN and no more attempts left.

415
00:23:49,100 --> 00:23:54,100
So you imagine, this is a
counter, PIN retry counter,

416
00:23:55,710 --> 00:23:59,330
which basically it counts
how many attempts left

417
00:23:59,330 --> 00:24:01,113
inside of the ICC.

418
00:24:02,420 --> 00:24:05,083
So if this counters goes to zero,

419
00:24:06,220 --> 00:24:09,285
that means that we don't
have any more possibilities

420
00:24:09,285 --> 00:24:12,920
to attempt with another PIN,

421
00:24:12,920 --> 00:24:15,960
which is a mechanisms to protect

422
00:24:15,960 --> 00:24:18,253
against brute force attacks.

423
00:24:19,400 --> 00:24:23,060
So to be able to send
these commands to the,

424
00:24:23,060 --> 00:24:26,490
to the card, or to the EMV card,

425
00:24:26,490 --> 00:24:29,270
first of course, the card has to support

426
00:24:29,270 --> 00:24:30,697
plain PIN by ICC.

427
00:24:32,427 --> 00:24:35,943
And another thing is, if we
go through the EMV flow chart,

428
00:24:37,430 --> 00:24:41,510
we can see that to send PINs to the card,

429
00:24:41,510 --> 00:24:44,600
we need to go through
the card identification.

430
00:24:44,600 --> 00:24:46,120
And after that, we're going to be

431
00:24:46,120 --> 00:24:47,950
in the cardholder verification.

432
00:24:47,950 --> 00:24:50,680
At this point is where is,

433
00:24:50,680 --> 00:24:55,253
where we able to send
commands to the card.

434
00:24:56,150 --> 00:24:59,280
So let's say that we start sending

435
00:24:59,280 --> 00:25:01,093
to check their retry PIN counter.

436
00:25:02,280 --> 00:25:03,300
And at this point,

437
00:25:03,300 --> 00:25:07,980
the retry PIN counter has
three more attempts left

438
00:25:07,980 --> 00:25:10,140
to try different PINs.

439
00:25:10,140 --> 00:25:14,303
So we start sending the PIN 07 18.

440
00:25:15,960 --> 00:25:20,803
We got a response back, which is 63 C2,

441
00:25:22,280 --> 00:25:24,597
which basically means is a wrong PIN.

442
00:25:24,597 --> 00:25:26,783
And we have two more attempts left.

443
00:25:27,660 --> 00:25:30,033
After we sent the last PIN,

444
00:25:30,896 --> 00:25:33,403
which is going to be the 07 20,

445
00:25:34,260 --> 00:25:37,123
we can notice that we got the 63 C0,

446
00:25:38,380 --> 00:25:42,463
which means the PIN retry
counter is equal to zero.

447
00:25:43,670 --> 00:25:46,120
That means that we don't
have more attempts left.

448
00:25:47,250 --> 00:25:50,920
We are not able to try more, more PINs.

449
00:25:50,920 --> 00:25:53,800
So here, the question is,

450
00:25:53,800 --> 00:25:58,143
how can we reset this PIN
retry counter to three, again?

451
00:26:01,560 --> 00:26:03,800
We have two common ways to reset the PRC,

452
00:26:03,800 --> 00:26:05,710
or the PIN retry counter.

453
00:26:05,710 --> 00:26:10,520
One of the most common is
when, do you remember the PIN?

454
00:26:10,520 --> 00:26:12,897
And you can go to any ATM from the,

455
00:26:12,897 --> 00:26:15,830
from the financial institution.

456
00:26:15,830 --> 00:26:18,950
And when you insert the card to the ATM,

457
00:26:18,950 --> 00:26:20,240
using the correct PIN,

458
00:26:20,240 --> 00:26:23,900
the ATM internally is
going to run the scripts

459
00:26:23,900 --> 00:26:25,860
specifically to do the card management.

460
00:26:25,860 --> 00:26:29,160
And it's going to reset this PRC

461
00:26:30,320 --> 00:26:33,793
to the value that it has before.

462
00:26:34,650 --> 00:26:36,810
Another way to do it is when the card

463
00:26:36,810 --> 00:26:39,830
contains the encryption key

464
00:26:39,830 --> 00:26:41,545
on the MACE scripts

465
00:26:41,545 --> 00:26:43,710
inside of the card.

466
00:26:43,710 --> 00:26:47,030
So when the terminal basically generates

467
00:26:47,030 --> 00:26:48,950
the application cryptogram

468
00:26:48,950 --> 00:26:52,510
and response with the ARPC,

469
00:26:55,010 --> 00:26:56,510
basically for online approval,

470
00:26:57,940 --> 00:27:00,780
the financial institution
is going to response

471
00:27:00,780 --> 00:27:02,550
with the ARPC,

472
00:27:02,550 --> 00:27:04,140
which basically is for the approval

473
00:27:04,140 --> 00:27:06,140
or rejection of the transaction.

474
00:27:06,140 --> 00:27:10,656
But inside of this data,
we're going to have the CSU,

475
00:27:10,656 --> 00:27:13,846
which basically is the card status update,

476
00:27:13,846 --> 00:27:18,320
which contains some data
that could update the,

477
00:27:18,320 --> 00:27:19,990
the card internally,

478
00:27:19,990 --> 00:27:24,533
which could be a command to
reset the PRC specifically.

479
00:27:28,080 --> 00:27:30,200
Let's imagine that we have a card

480
00:27:30,200 --> 00:27:33,693
and we already try three different PINs.

481
00:27:34,870 --> 00:27:38,833
So we don't have any more
attempts left in the EMV card.

482
00:27:39,730 --> 00:27:43,000
That means that we need to
try to make a transaction,

483
00:27:43,000 --> 00:27:48,000
to see if the financial institution resets

484
00:27:48,350 --> 00:27:50,133
the PIN retry counter.

485
00:27:51,460 --> 00:27:53,465
So how we can do this?

486
00:27:53,465 --> 00:27:57,540
We can try to make a transaction
with no CVM required,

487
00:27:57,540 --> 00:27:59,590
or we can try to make a transaction

488
00:28:00,840 --> 00:28:04,253
implementing the signature CVM.

489
00:28:05,110 --> 00:28:06,940
We can do this in different ways,

490
00:28:06,940 --> 00:28:10,410
but normally, like the mobile POS's,

491
00:28:10,410 --> 00:28:13,310
many of them implement no CVM

492
00:28:13,310 --> 00:28:16,933
or signature CVM here in United States.

493
00:28:18,325 --> 00:28:20,900
So the idea is that after generating

494
00:28:20,900 --> 00:28:22,423
the application cryptogram,

495
00:28:23,490 --> 00:28:27,533
the financial institution
returns the ARPC.

496
00:28:28,450 --> 00:28:32,480
We can verify if the PIN
retry counter is set to three,

497
00:28:32,480 --> 00:28:36,856
for example, or to five,
depending of the configuration.

498
00:28:36,856 --> 00:28:40,460
And we can notice this in the last step

499
00:28:40,460 --> 00:28:45,127
of the transaction when the
ARPC is applied to the card.

500
00:28:48,378 --> 00:28:52,975
After this step we can
verify the PIN retry counter

501
00:28:52,975 --> 00:28:56,471
is sets to the back,
to the previous value,

502
00:28:56,471 --> 00:28:58,696
which it should be three or five,

503
00:28:58,696 --> 00:29:01,120
depending on the implementation.

504
00:29:01,120 --> 00:29:04,815
But, of course, this is a
inadequate implementation,

505
00:29:04,815 --> 00:29:06,853
bad practice to do it.

506
00:29:09,700 --> 00:29:12,050
The best way to reset
the PIN retry counter

507
00:29:12,050 --> 00:29:16,420
is by using an ATM in the
financial institution,

508
00:29:16,420 --> 00:29:21,420
or by calling a representative
from the bank, for example,

509
00:29:22,729 --> 00:29:26,180
to assign a new PIN to the card.

510
00:29:26,180 --> 00:29:30,120
And after they used that card in the ATM,

511
00:29:30,120 --> 00:29:33,550
they are going to reset
the PIN retry counter,

512
00:29:33,550 --> 00:29:35,130
but doing,

513
00:29:35,130 --> 00:29:39,630
doing this type of reset
after a transaction,

514
00:29:39,630 --> 00:29:41,980
it could be very dangerous,

515
00:29:41,980 --> 00:29:43,280
I'm going to show you why.

516
00:29:45,232 --> 00:29:48,457
So let's imagine that we
have a normal ARC from the,

517
00:29:49,890 --> 00:29:53,420
from the bank, which
basically I can see some,

518
00:29:53,420 --> 00:29:57,690
some changes between each responses.

519
00:29:57,690 --> 00:29:59,750
So this one is a normal transaction

520
00:30:00,760 --> 00:30:03,230
when you didn't receive

521
00:30:03,230 --> 00:30:07,160
any order to change the PIN retry counter.

522
00:30:07,160 --> 00:30:12,160
But in this slide, we can see a different,

523
00:30:12,700 --> 00:30:17,163
different bytes that I can relate it to,

524
00:30:18,030 --> 00:30:20,300
to the PIN retry counter, basically

525
00:30:20,300 --> 00:30:23,483
to change it to the to the previous value.

526
00:30:25,890 --> 00:30:28,533
So to be able to use the Pinata attack,

527
00:30:29,630 --> 00:30:32,830
the card has to implement
two different features.

528
00:30:32,830 --> 00:30:37,370
One is the plain PIN by ICC
cardholder verification method,

529
00:30:37,370 --> 00:30:40,230
and also the PIN retry reset by the user

530
00:30:40,230 --> 00:30:42,740
when the PRC is zero.

531
00:30:42,740 --> 00:30:44,380
With these two characteristics,

532
00:30:44,380 --> 00:30:48,383
we can run the Pinata
attack against the EMV card.

533
00:30:48,383 --> 00:30:52,910
And we are going to show
you how I did my setup

534
00:30:52,910 --> 00:30:56,213
to do this and to run this Pinata attack.

535
00:30:57,360 --> 00:30:59,680
To run the Pinata attack we need to

536
00:30:59,680 --> 00:31:03,433
make a special Elma set up project.

537
00:31:04,500 --> 00:31:06,100
For this specific case,

538
00:31:06,100 --> 00:31:09,720
I'm going to use the GPD
pocket 2, a small computer

539
00:31:10,690 --> 00:31:15,690
or pocket computer is one
of the most powerful devices

540
00:31:16,058 --> 00:31:19,211
in this size specifically
to do different things.

541
00:31:19,211 --> 00:31:22,420
But I mean, you can use
any, any other device

542
00:31:22,420 --> 00:31:27,120
that you have available
to do this type of setup.

543
00:31:27,120 --> 00:31:31,870
Also, we're going to use
a cheapest card reader

544
00:31:31,870 --> 00:31:36,550
that you can find on the
internet, is the SCR3310,

545
00:31:36,550 --> 00:31:38,370
which basically what is going to do is

546
00:31:38,370 --> 00:31:42,210
we're going to extract
the original EMV data

547
00:31:42,210 --> 00:31:46,940
from this reader. So our
card, our financial card

548
00:31:46,940 --> 00:31:50,150
is going to be inserted in this reader.

549
00:31:50,150 --> 00:31:52,390
So basically with the pocket computer,

550
00:31:52,390 --> 00:31:54,717
we're going to start reading the card

551
00:31:54,717 --> 00:31:56,630
and we're going to process the data.

552
00:31:56,630 --> 00:31:58,520
And after that, we're going to send it,

553
00:31:58,520 --> 00:32:00,230
send it to the Elma board.

554
00:32:02,420 --> 00:32:05,690
So ultimately we're going to
need the Elma board, of course,

555
00:32:05,690 --> 00:32:09,690
and we're going to need
the SumUp payment system.

556
00:32:09,690 --> 00:32:13,230
Basically is a, is a
payment system that you can,

557
00:32:13,230 --> 00:32:16,240
that you can run implement
in a cellular phone.

558
00:32:16,240 --> 00:32:18,650
So you have an application and you can,

559
00:32:18,650 --> 00:32:21,653
you can make payments directly
to this, to this device.

560
00:32:22,800 --> 00:32:25,390
The idea to have this device is to,

561
00:32:25,390 --> 00:32:29,993
to be able to control the
payment environment, basically.

562
00:32:31,500 --> 00:32:35,700
So the idea of the Elma at
this point is going to simulate

563
00:32:35,700 --> 00:32:39,580
a real EMV card to SumUp,

564
00:32:39,580 --> 00:32:42,062
but it's going to process
the data that we are going to

565
00:32:42,062 --> 00:32:45,553
extract from the card reader, basically.

566
00:32:51,380 --> 00:32:54,500
Because we're going to use
a mobile payment system

567
00:32:54,500 --> 00:32:57,930
and we are going to have this application

568
00:32:57,930 --> 00:33:01,840
for the SumUp payment system
in our cellular phone,

569
00:33:01,840 --> 00:33:05,050
we need to implement the
Auto Clicker application.

570
00:33:05,050 --> 00:33:08,030
The Auto Clicker, basically,
what is going to do

571
00:33:08,030 --> 00:33:10,930
is going to play an
important role to make,

572
00:33:10,930 --> 00:33:15,310
or to help us to automatize
different different tasks.

573
00:33:15,310 --> 00:33:16,340
For example,

574
00:33:16,340 --> 00:33:19,291
let's say that we try three different PINs

575
00:33:19,291 --> 00:33:21,690
and we need to make a new transaction

576
00:33:21,690 --> 00:33:24,700
to reset the PIN retry counter.

577
00:33:24,700 --> 00:33:28,010
So the Auto Clicker is going
to that automatically for us.

578
00:33:28,010 --> 00:33:30,930
So that's one of the most
important parts in this,

579
00:33:30,930 --> 00:33:32,707
in this Pinata attack.

580
00:33:35,260 --> 00:33:37,050
So this is my set up.

581
00:33:37,050 --> 00:33:42,050
I have the Pocket 2,
basically in the middle,

582
00:33:42,100 --> 00:33:45,970
we have the card reader, SCR3310,

583
00:33:45,970 --> 00:33:48,480
where from where we are
going to strike data,

584
00:33:48,480 --> 00:33:50,773
the original data from the card.

585
00:33:50,773 --> 00:33:54,060
On the other side, we have the
Elma board connected by USB.

586
00:33:54,060 --> 00:33:57,280
This could be a relay or
an internet, but for this,

587
00:33:57,280 --> 00:34:01,093
for this demo, we are using a
locally, locally connection.

588
00:34:02,300 --> 00:34:05,510
The Elma is going to
simulate the transaction,

589
00:34:05,510 --> 00:34:09,420
implementing the, the
connector to the SumUp.

590
00:34:09,420 --> 00:34:12,450
So when the SumUp sends the first command,

591
00:34:12,450 --> 00:34:13,450
Elma is going to process it,

592
00:34:13,450 --> 00:34:17,427
is going to send it to the
client in the pocket computer.

593
00:34:17,427 --> 00:34:21,000
And the pocket is going to
send the last command to the,

594
00:34:21,000 --> 00:34:21,833
to the card.

595
00:34:22,790 --> 00:34:25,330
What's going to do on the client side

596
00:34:25,330 --> 00:34:29,060
is going to start checking
for some kind of flags.

597
00:34:29,060 --> 00:34:32,420
Let's say, if I activate the Pinata attack

598
00:34:32,420 --> 00:34:34,530
is going to detect when we are going to be

599
00:34:34,530 --> 00:34:36,410
in the verification mode.

600
00:34:36,410 --> 00:34:38,510
And after that, we're going to start

601
00:34:38,510 --> 00:34:41,784
making the brute force
attack against the PINs.

602
00:34:41,784 --> 00:34:44,992
After we have a zero on
the PIN retry counter,

603
00:34:44,992 --> 00:34:47,815
we're going to start a new transaction

604
00:34:47,815 --> 00:34:50,343
to reset this PIN retry counter.

605
00:34:50,343 --> 00:34:54,936
And after, we have another
three attempts in the counter.

606
00:34:54,936 --> 00:34:57,190
We are going to start the process again,

607
00:34:57,190 --> 00:35:01,683
to make the brute force
attack against this EMV card.

608
00:35:05,850 --> 00:35:08,150
Internally in the computer
is going to be running

609
00:35:08,150 --> 00:35:11,400
a virtual card reader, which
is going to expect data

610
00:35:11,400 --> 00:35:14,090
from the card reader
or the physical reader.

611
00:35:14,090 --> 00:35:17,510
And it's going to send this
data to the Elma board.

612
00:35:17,510 --> 00:35:20,300
Basically is to process
the data internally.

613
00:35:20,300 --> 00:35:23,620
And after that, to present
this data to a terminal.

614
00:35:23,620 --> 00:35:25,510
the idea of implementing
virtual card reader

615
00:35:25,510 --> 00:35:30,510
is to be able basically
to emulate a card reader,

616
00:35:31,700 --> 00:35:35,913
but simultaneously to be able
to modify data in real time.

617
00:35:39,340 --> 00:35:41,133
To visualize that Pinata attack.

618
00:35:42,460 --> 00:35:46,030
So what it does basically
is after a transaction,

619
00:35:46,030 --> 00:35:51,030
it checks if the plain PIN
by ICC verification method

620
00:35:51,360 --> 00:35:56,340
is available. If it is, it
checks the PIN try counter.

621
00:35:56,340 --> 00:36:00,160
If it is greater than zero
means that we have possibilities

622
00:36:00,160 --> 00:36:02,540
to make a brute force attack.

623
00:36:02,540 --> 00:36:05,090
If we couldn't find a PIN,

624
00:36:05,090 --> 00:36:09,553
basically we repeat this cycle
until we get the correct PIN.

625
00:36:10,390 --> 00:36:15,390
So mentioning this, we can go
directly to the demo slide.

626
00:36:19,510 --> 00:36:22,560
So first I went to run the client software

627
00:36:22,560 --> 00:36:24,150
to start to make a first,

628
00:36:24,150 --> 00:36:25,250
the first transaction.

629
00:36:26,160 --> 00:36:28,330
Here is a where the Auto
Clicker is very handy.

630
00:36:28,330 --> 00:36:30,070
So it's going to help,

631
00:36:30,070 --> 00:36:31,660
help a lot with all the transaction

632
00:36:31,660 --> 00:36:33,560
that we are going to need.

633
00:36:33,560 --> 00:36:35,940
After we, we made the first transaction,

634
00:36:35,940 --> 00:36:38,340
we are going to check
the PIN retry counter

635
00:36:38,340 --> 00:36:40,480
to see if it's greater than zero.

636
00:36:40,480 --> 00:36:44,480
If it is, we're going to
try to brute force the PIN,

637
00:36:44,480 --> 00:36:49,480
implementing a list of
possible PINs to try.

638
00:36:50,530 --> 00:36:53,140
If we couldn't find any correct PIN,

639
00:36:53,140 --> 00:36:56,010
we're going to make a new transaction

640
00:36:56,010 --> 00:36:58,790
to reset the PIN retry counter.

641
00:36:58,790 --> 00:37:03,047
And after we reset, we try
to make a brute force attack

642
00:37:03,047 --> 00:37:05,530
against the EMV card.

643
00:37:05,530 --> 00:37:10,530
If, we couldn't find, we'll
repeat the cycle until we,

644
00:37:10,540 --> 00:37:12,973
we are able to, to find the correct PIN.

645
00:37:14,020 --> 00:37:17,754
And in this last try, we
find we'll be able to find

646
00:37:17,754 --> 00:37:22,754
the correct PIN. And is the 07 22,

647
00:37:24,110 --> 00:37:27,920
which basically is the PIN that we can use

648
00:37:27,920 --> 00:37:30,783
to make a transaction
with the card, basically.

649
00:37:31,760 --> 00:37:34,070
On this point, we can
use this card in the ATM,

650
00:37:34,070 --> 00:37:37,700
or to make a purchase in
any store implementing,

651
00:37:37,700 --> 00:37:39,383
implementing the correct PIN.

652
00:38:00,714 --> 00:38:02,600
I want to say thank you to these people.

653
00:38:02,600 --> 00:38:04,960
They helped me a lot in this research,

654
00:38:04,960 --> 00:38:07,580
especially the Metabase Q
team for all the details

655
00:38:07,580 --> 00:38:08,413
and support.

656
00:38:09,700 --> 00:38:13,320
Thank you for being part of DefCon 29.

657
00:38:13,320 --> 00:38:15,270
Hope you guys keep enjoying this event.

