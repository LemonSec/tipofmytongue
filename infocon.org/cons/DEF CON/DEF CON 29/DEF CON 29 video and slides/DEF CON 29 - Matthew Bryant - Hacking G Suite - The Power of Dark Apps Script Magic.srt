1
00:00:03,480 --> 00:00:04,460
- Thank you all for coming.

2
00:00:04,460 --> 00:00:07,853
This is Hacking G Suite: The
Power of Dark App Script Magic.

3
00:00:09,380 --> 00:00:12,150
A little bit of background on
myself, I'm Matthew Bryant,

4
00:00:12,150 --> 00:00:14,470
I go often by my handle mandatory,

5
00:00:14,470 --> 00:00:17,170
I currently lead the Red
Team Effort at Snapchat,

6
00:00:17,170 --> 00:00:18,940
and also outside of work,

7
00:00:18,940 --> 00:00:21,187
I also post occasionally
about security on Twitter

8
00:00:21,187 --> 00:00:22,730
@IAmMandatory.

9
00:00:22,730 --> 00:00:25,070
And additionally, I also
do hacking write-ups

10
00:00:25,070 --> 00:00:28,737
and research posts at my
website, thehackerblog.com.

11
00:00:31,100 --> 00:00:32,930
So, to start us off with
some context and background

12
00:00:32,930 --> 00:00:35,503
sort of give a base to what
we'll be talking about today.

13
00:00:37,030 --> 00:00:39,440
So Google Workspace, for those
of you who aren't familiar,

14
00:00:39,440 --> 00:00:41,080
essentially, this is the new name

15
00:00:41,080 --> 00:00:42,870
that they've given to G Suites.

16
00:00:42,870 --> 00:00:43,890
I know it can be tough to keep up

17
00:00:43,890 --> 00:00:46,700
with all of Google's ever
changing brand guidelines

18
00:00:46,700 --> 00:00:47,650
and stuff.

19
00:00:47,650 --> 00:00:49,530
I will still be referring
to this as G Suite

20
00:00:49,530 --> 00:00:50,363
throughout the talk,

21
00:00:50,363 --> 00:00:51,220
just because I think most people

22
00:00:51,220 --> 00:00:54,220
are more familiar with G
Suite than Google Workspace,

23
00:00:54,220 --> 00:00:55,919
but we know what G Suite is essentially,

24
00:00:55,919 --> 00:00:58,610
is it's sort of the
suite of Google services

25
00:00:58,610 --> 00:00:59,500
that people use,

26
00:00:59,500 --> 00:01:04,050
things Gmail, Drive,
Calendar, all that stuff.

27
00:01:04,050 --> 00:01:05,493
This is available both for regular users,

28
00:01:05,493 --> 00:01:10,493
personal individuals as well
as companies, enterprises.

29
00:01:10,950 --> 00:01:13,622
And this allows people to sort of

30
00:01:13,622 --> 00:01:15,490
if it's a company, for example,

31
00:01:15,490 --> 00:01:17,400
they can collaborate
online to get work done

32
00:01:17,400 --> 00:01:19,900
using all of the various Google services.

33
00:01:19,900 --> 00:01:21,560
And at the time of this research,

34
00:01:21,560 --> 00:01:24,250
they were boasting over 2 billion users.

35
00:01:24,250 --> 00:01:26,903
So a ton, a ton, a ton
of people use this stuff.

36
00:01:29,290 --> 00:01:31,542
So for those of you who aren't
familiar with Apps Scripts,

37
00:01:31,542 --> 00:01:32,818
apps script is essentially this,

38
00:01:32,818 --> 00:01:34,636
basically JavaScript language

39
00:01:34,636 --> 00:01:37,590
that is just used to write these
server-less JavaScript apps

40
00:01:37,590 --> 00:01:39,570
that run on Google infrastructure.

41
00:01:39,570 --> 00:01:43,000
And it's kind of this
custom way to build apps

42
00:01:43,000 --> 00:01:46,300
where it's highly optimized
for automating Google services.

43
00:01:46,300 --> 00:01:48,170
It comes with a lot of
really useful libraries

44
00:01:48,170 --> 00:01:49,760
when it comes to automating everything

45
00:01:49,760 --> 00:01:51,980
from Google docs, to Gmail,

46
00:01:51,980 --> 00:01:54,410
to any sort of Google
service you can think of.

47
00:01:54,410 --> 00:01:56,410
And on top of having all
these prebuilt libraries

48
00:01:56,410 --> 00:01:57,870
it has the seamless integration

49
00:01:57,870 --> 00:01:59,611
with Google's app registration system

50
00:01:59,611 --> 00:02:01,680
and sort of their OAuth system.

51
00:02:01,680 --> 00:02:04,720
So normally when you set up
a new OAuth app with Google,

52
00:02:04,720 --> 00:02:09,153
you have to set up a callback URI,

53
00:02:09,153 --> 00:02:11,400
and can figure your app to work with it

54
00:02:11,400 --> 00:02:13,500
and all sorts of these,
all sorts of these things.

55
00:02:13,500 --> 00:02:14,610
But when you use Apps Script,

56
00:02:14,610 --> 00:02:16,390
that's all sort of magically done for you.

57
00:02:16,390 --> 00:02:18,910
All this authorization stuff
is just sort of handled

58
00:02:18,910 --> 00:02:21,523
and it sort of automatically
takes care of it.

59
00:02:23,450 --> 00:02:26,920
So it also offers a variety
of triggers that you can use

60
00:02:26,920 --> 00:02:28,730
to start your little
scripts that you write.

61
00:02:28,730 --> 00:02:31,810
So everything from somebody
hits the web endpoint

62
00:02:31,810 --> 00:02:32,980
that kicks off the script

63
00:02:32,980 --> 00:02:35,130
to that they've opened a Google Doc

64
00:02:35,130 --> 00:02:37,235
and something's running
at the beginning of that

65
00:02:37,235 --> 00:02:39,977
to schedule a cron, sort
of cron-style things.

66
00:02:39,977 --> 00:02:42,450
where you have scheduled execution jobs

67
00:02:42,450 --> 00:02:43,700
and stuff of that nature.

68
00:02:46,260 --> 00:02:47,560
This is an example of a screenshot

69
00:02:47,560 --> 00:02:49,700
of the Apps Script Editor.

70
00:02:49,700 --> 00:02:53,020
You can see it's actually
pretty full ID environment.

71
00:02:53,020 --> 00:02:57,610
It has everything from code
completion to breakpoints,

72
00:02:57,610 --> 00:02:59,580
debugging, all the stuff
that you'd kind of expect

73
00:02:59,580 --> 00:03:00,783
from your regular dev.

74
00:03:04,180 --> 00:03:05,460
So Google's OAuth system

75
00:03:05,460 --> 00:03:09,060
is very similar to a lot of
the OAuth systems out there.

76
00:03:09,060 --> 00:03:11,520
Essentially the idea is,
it's a system that's built

77
00:03:11,520 --> 00:03:14,100
to sort of allow these third-party apps

78
00:03:14,100 --> 00:03:16,500
built by whatever individuals

79
00:03:16,500 --> 00:03:20,500
to request access to
resources that Google users

80
00:03:20,500 --> 00:03:21,760
have in their account.

81
00:03:21,760 --> 00:03:24,830
So for example maybe I have
some Google Docs in my account

82
00:03:24,830 --> 00:03:28,590
and I wanna automate something
for these Google Docs

83
00:03:28,590 --> 00:03:29,950
using a third-party app.

84
00:03:29,950 --> 00:03:31,880
This allows me to
basically delegate access

85
00:03:31,880 --> 00:03:34,880
to my Google Docs to this third
party app to do that for me.

86
00:03:36,090 --> 00:03:38,970
So these permissions to these resources,

87
00:03:38,970 --> 00:03:41,140
they're essentially known as scopes

88
00:03:41,140 --> 00:03:43,007
and there're over 250 of them.

89
00:03:43,007 --> 00:03:45,660
And so these are for all of
the various Google services

90
00:03:45,660 --> 00:03:47,370
that you can think of, right?

91
00:03:47,370 --> 00:03:50,700
So everything from BigQuery,
Gmail, Google Docs,

92
00:03:50,700 --> 00:03:51,533
stuff like that.

93
00:03:52,616 --> 00:03:53,570
The way that it works, right,

94
00:03:53,570 --> 00:03:55,920
is you sort of your app will redirect them

95
00:03:55,920 --> 00:03:57,020
to an authorization prompt

96
00:03:57,020 --> 00:03:58,620
that gives them a brief summary

97
00:03:58,620 --> 00:04:01,260
of what you're requesting permission-wise.

98
00:04:01,260 --> 00:04:03,557
And the user can kind of
think it over and decide,

99
00:04:03,557 --> 00:04:04,570
"Yep, I'm gonna allow that"

100
00:04:04,570 --> 00:04:05,727
or "No, I'm gonna reject that".

101
00:04:05,727 --> 00:04:06,840
And if they allow it,

102
00:04:06,840 --> 00:04:08,760
essentially your app
gets handed some tokens,

103
00:04:08,760 --> 00:04:11,125
which you can then use
to talk to these APIs,

104
00:04:11,125 --> 00:04:12,653
authenticate as the user.

105
00:04:16,120 --> 00:04:17,960
So as I mentioned that prompter,

106
00:04:17,960 --> 00:04:19,240
this is what that looks like.

107
00:04:19,240 --> 00:04:22,420
You have sort of a human-readable
little summary here

108
00:04:22,420 --> 00:04:24,760
in this case, this example app,

109
00:04:24,760 --> 00:04:27,070
it has "Hey, this is gonna request access

110
00:04:27,070 --> 00:04:27,903
and if you allow it,

111
00:04:27,903 --> 00:04:30,160
it will have access to your Gmail stuff,

112
00:04:30,160 --> 00:04:33,270
it'll have access to Google
Cloud and everything in it."

113
00:04:33,270 --> 00:04:36,070
And also it's asking for
permission to sort of run

114
00:04:36,070 --> 00:04:36,903
when you're not present.

115
00:04:36,903 --> 00:04:38,930
So it's not just a one-time thing,

116
00:04:38,930 --> 00:04:42,173
in the future it could just
keep running, indefinitely.

117
00:04:45,120 --> 00:04:46,360
So tying all these concepts together

118
00:04:46,360 --> 00:04:49,070
and thinking about
things at a higher level,

119
00:04:49,070 --> 00:04:50,730
and this becomes a pretty effective option

120
00:04:50,730 --> 00:04:53,910
when it comes to targeting
organizations or companies

121
00:04:53,910 --> 00:04:56,680
that are sort of on the G Suite stack,

122
00:04:56,680 --> 00:04:59,090
Apps Script becomes
pretty attractive option

123
00:04:59,090 --> 00:05:01,730
for things like phishing,
targeted spear phishing,

124
00:05:01,730 --> 00:05:03,411
as well as say you've already compromised,

125
00:05:03,411 --> 00:05:08,411
an individual employee
account in a G Suite org.

126
00:05:08,810 --> 00:05:10,274
It becomes a very attractive
option for backdooring

127
00:05:10,274 --> 00:05:11,910
that account as well.

128
00:05:11,910 --> 00:05:14,713
And the reason why it's an
attractive option is because,

129
00:05:14,713 --> 00:05:17,230
if you have an Apps Script implant,

130
00:05:17,230 --> 00:05:18,570
it's actually sort of outside

131
00:05:18,570 --> 00:05:22,410
of the eyes of all the regular
machine-monitor controls

132
00:05:22,410 --> 00:05:25,653
that run people's end machines
and their laptops and stuff

133
00:05:25,653 --> 00:05:28,760
so regular antivirus, their
endpoint detection tooling,

134
00:05:28,760 --> 00:05:29,940
and sort of on device monitoring,

135
00:05:29,940 --> 00:05:31,200
none of that's really effective here,

136
00:05:31,200 --> 00:05:33,140
because again it runs completely
enclosed infrastructure.

137
00:05:33,140 --> 00:05:34,960
It's like a total service environment,

138
00:05:34,960 --> 00:05:38,360
so that they don't have any
visibility into that at all.

139
00:05:38,360 --> 00:05:39,600
And even better,

140
00:05:39,600 --> 00:05:42,530
you have your victim wipes
their laptop for some reason,

141
00:05:42,530 --> 00:05:44,040
your implant is completely unaffected,

142
00:05:44,040 --> 00:05:47,093
just totally remains with
full access to their account.

143
00:05:50,890 --> 00:05:52,410
So another thing that's interesting,

144
00:05:52,410 --> 00:05:54,320
if you think about some of these companies

145
00:05:54,320 --> 00:05:58,150
that have sort of these
extremely hardened environments

146
00:05:58,150 --> 00:06:00,660
Apps Script becomes an
interesting option even then.

147
00:06:00,660 --> 00:06:03,060
So when I'm talking, when I
say hardened environments,

148
00:06:03,060 --> 00:06:04,620
what I mean is companies with things

149
00:06:04,620 --> 00:06:08,370
like mandatory hardware, U2F on logins,

150
00:06:08,370 --> 00:06:10,900
so places where traditional
credential phishing

151
00:06:10,900 --> 00:06:13,220
just isn't gonna work because
they have a hardware key

152
00:06:13,220 --> 00:06:16,304
that they actually have
to hit in order to login.

153
00:06:16,304 --> 00:06:18,390
Things like they have hardened Chromebooks

154
00:06:18,390 --> 00:06:20,050
with lockdown enterprise policy.

155
00:06:20,050 --> 00:06:20,883
So you don't have things,

156
00:06:20,883 --> 00:06:24,190
you can't get a binary
implant running on there.

157
00:06:24,190 --> 00:06:26,080
You got to key in even to
get to the Chrome extensions,

158
00:06:26,080 --> 00:06:28,750
potentially if they have
lockdown enterprise policy

159
00:06:28,750 --> 00:06:30,200
and they have hardware attestation

160
00:06:30,200 --> 00:06:31,460
and all that other good stuff, right.

161
00:06:31,460 --> 00:06:34,080
So super-lockdown environments.

162
00:06:34,080 --> 00:06:35,650
And so getting around these measures

163
00:06:35,650 --> 00:06:37,040
we've got to think a
little bit more clever

164
00:06:37,040 --> 00:06:38,020
than your average attacker.

165
00:06:38,020 --> 00:06:39,001
This isn't like the casual

166
00:06:39,001 --> 00:06:41,540
Windows Networking style pen tests

167
00:06:41,540 --> 00:06:43,720
that are potentially more common.

168
00:06:43,720 --> 00:06:46,477
This is a completely sort
of unique environment.

169
00:06:46,477 --> 00:06:48,160
And so we'll have to be
a little bit more unique

170
00:06:48,160 --> 00:06:50,683
in how we think about and
how we approach these things.

171
00:06:55,200 --> 00:06:57,780
So I'm gonna go into some
historical precedent here.

172
00:06:57,780 --> 00:07:01,250
One thing that I think is a
particularly interesting example

173
00:07:01,250 --> 00:07:03,959
is the attack that
happened a few years ago,

174
00:07:03,959 --> 00:07:07,510
which was essentially
basically built around using,

175
00:07:07,510 --> 00:07:09,513
Google's OAuth and API system.

176
00:07:11,242 --> 00:07:13,232
Some of you may recognize
this screenshot here,

177
00:07:13,232 --> 00:07:15,033
if you were one of the individuals

178
00:07:15,033 --> 00:07:17,070
that was affected by this,

179
00:07:17,070 --> 00:07:19,420
but essentially this was
what was later dubbed

180
00:07:19,420 --> 00:07:23,150
as the Google Doc worm.

181
00:07:23,150 --> 00:07:23,983
So the way that this worked

182
00:07:23,983 --> 00:07:27,180
is it would essentially this worm

183
00:07:27,180 --> 00:07:29,450
would basically send
these phishing emails,

184
00:07:29,450 --> 00:07:30,283
looking like this.

185
00:07:30,283 --> 00:07:32,580
And you know, this would be from somebody

186
00:07:32,580 --> 00:07:34,830
you personally knew coming from
their actual email address.

187
00:07:34,830 --> 00:07:38,080
And it would say, "Hey,
your friends has invited you

188
00:07:38,080 --> 00:07:39,169
to view a document."

189
00:07:39,169 --> 00:07:40,527
And it would give you this
button to, sort of like,

190
00:07:40,527 --> 00:07:42,177
"Okay, let's open that document",

191
00:07:43,060 --> 00:07:44,520
but when you actually went and did that,

192
00:07:44,520 --> 00:07:47,760
it would actually present you
with this OAuth prompt here.

193
00:07:47,760 --> 00:07:49,970
And it says, "Hey Google Docs

194
00:07:49,970 --> 00:07:52,980
wants to have access to read, send, delete

195
00:07:52,980 --> 00:07:56,040
and manage your email, and
also access all your contacts."

196
00:07:56,040 --> 00:07:57,790
Now of course, for security
people watching this,

197
00:07:57,790 --> 00:08:00,140
they're like, "I would
never approve that prompt",

198
00:08:00,140 --> 00:08:01,590
but for the average user,

199
00:08:01,590 --> 00:08:02,497
they're sort of looking at this

200
00:08:02,497 --> 00:08:03,647
and they're like,

201
00:08:03,647 --> 00:08:07,580
"Okay, Google docs wants access
to my Gmail and contents.

202
00:08:07,580 --> 00:08:10,210
Yeah, I mean, I thought they
would already have that,

203
00:08:10,210 --> 00:08:11,043
sure, why not?" right.

204
00:08:11,043 --> 00:08:12,100
And they would probably go through

205
00:08:12,100 --> 00:08:14,060
and just go ahead and approve this.

206
00:08:14,060 --> 00:08:16,708
So it's sort of very,
very convincing attack

207
00:08:16,708 --> 00:08:19,403
for a lot of the regular computer users.

208
00:08:20,570 --> 00:08:21,640
Of course, if they did do that

209
00:08:21,640 --> 00:08:22,785
and they did authorize this app

210
00:08:22,785 --> 00:08:24,980
to have access to their Google account,

211
00:08:24,980 --> 00:08:26,500
what would it immediately then go do

212
00:08:26,500 --> 00:08:28,250
is it would use the contact access

213
00:08:28,250 --> 00:08:31,906
to essentially get their a
thousand most recent contacts.

214
00:08:31,906 --> 00:08:33,760
Their emails, their friends

215
00:08:33,760 --> 00:08:35,077
and coworkers and stuff like that.

216
00:08:35,077 --> 00:08:37,380
And it would send out this
exact same phishing email,

217
00:08:37,380 --> 00:08:41,000
as them, to all of their
friends and contacts.

218
00:08:41,000 --> 00:08:42,470
And this would basically repeat the cycle

219
00:08:42,470 --> 00:08:43,920
where they would then
get that phishing email

220
00:08:43,920 --> 00:08:45,393
that we saw before, right.

221
00:08:47,720 --> 00:08:50,570
The impact of this attack was
actually pretty impressive.

222
00:08:50,570 --> 00:08:51,968
It ended up spreading like wildfire

223
00:08:51,968 --> 00:08:54,165
and essentially it actually affected

224
00:08:54,165 --> 00:08:56,220
over a million Google users.

225
00:08:56,220 --> 00:08:59,370
And this is everything from
your personal Google users,

226
00:08:59,370 --> 00:09:00,410
like you and me,

227
00:09:00,410 --> 00:09:03,400
to sort of the big
enterprise business users,

228
00:09:03,400 --> 00:09:06,100
sort of the G Suite organizations.

229
00:09:06,100 --> 00:09:08,503
And Google sort of
rapidly responded to this

230
00:09:08,503 --> 00:09:10,920
actually they had really
good response time.

231
00:09:10,920 --> 00:09:12,880
They did everything from
like killed the emails

232
00:09:12,880 --> 00:09:14,830
that were spreading around,

233
00:09:14,830 --> 00:09:16,760
killed off all the apps
and stuff like that.

234
00:09:16,760 --> 00:09:19,220
And they did all of this in a couple hours

235
00:09:20,080 --> 00:09:21,905
and after doing some post-mortem analysis

236
00:09:21,905 --> 00:09:24,130
on basically the JavaScript

237
00:09:24,130 --> 00:09:26,680
that was used to control
and run this attack,

238
00:09:26,680 --> 00:09:27,709
it turns out the coding for it,

239
00:09:27,709 --> 00:09:30,130
was actually pretty amateur, right?

240
00:09:30,130 --> 00:09:32,990
It wasn't this advanced
crazy nation state thing

241
00:09:32,990 --> 00:09:34,690
that most people assume.

242
00:09:34,690 --> 00:09:35,820
And it essentially it looked like

243
00:09:35,820 --> 00:09:38,430
it was only collecting email addresses.

244
00:09:38,430 --> 00:09:40,770
So all things considered this attack

245
00:09:40,770 --> 00:09:42,740
could have been, much, much worse.

246
00:09:42,740 --> 00:09:43,573
It almost seemed as if,

247
00:09:43,573 --> 00:09:45,850
you know somebody said it
was actually like unfinished.

248
00:09:48,510 --> 00:09:50,370
So yeah, let's break down this attack

249
00:09:50,370 --> 00:09:51,850
into its kind of core components here.

250
00:09:51,850 --> 00:09:56,347
One, I would say fairly
advanced trait that they did

251
00:09:56,347 --> 00:09:57,350
was they did think ahead

252
00:09:57,350 --> 00:09:58,770
and they had multiple rotating apps.

253
00:09:58,770 --> 00:10:01,990
They've registered multiple
OAuth apps ahead of time

254
00:10:01,990 --> 00:10:03,160
and they sort of randomized them

255
00:10:03,160 --> 00:10:04,490
along with different domains,

256
00:10:04,490 --> 00:10:06,810
to essentially prevent
the easy case of Google

257
00:10:06,810 --> 00:10:09,580
just blocking their app or
blocking given domain, right.

258
00:10:09,580 --> 00:10:11,210
They had to instead
track on all of the apps

259
00:10:11,210 --> 00:10:12,540
and all the domains and block all of them

260
00:10:12,540 --> 00:10:14,090
to prevent this from spreading.

261
00:10:15,030 --> 00:10:16,960
It made use of some Unicode characters.

262
00:10:16,960 --> 00:10:17,917
Yeah, I saw it earlier,

263
00:10:17,917 --> 00:10:20,720
the app name was actually
called Google Drive.

264
00:10:20,720 --> 00:10:23,160
That was because they were
basically evading some filters,

265
00:10:23,160 --> 00:10:24,600
which no way prevented you
from setting stuff like Google

266
00:10:24,600 --> 00:10:27,709
in the name of the app by
using Unicode characters,

267
00:10:27,709 --> 00:10:30,780
which look exactly the same
as their ASCII equivalents,

268
00:10:30,780 --> 00:10:33,973
so it was like Google with
maybe a Swedish O, for example.

269
00:10:35,470 --> 00:10:37,560
And of course, use the social engineering

270
00:10:37,560 --> 00:10:38,700
and the phishing scheme that we saw,

271
00:10:38,700 --> 00:10:40,870
which was quite convincing to people.

272
00:10:40,870 --> 00:10:42,560
And it actually it self-propagated

273
00:10:42,560 --> 00:10:45,910
and sort of the old-school
email spam style, right?

274
00:10:45,910 --> 00:10:48,490
So infect somebody, send
to all of their contacts,

275
00:10:48,490 --> 00:10:52,835
some of your friends end up falling for it

276
00:10:52,835 --> 00:10:55,160
and then they'd send it to
all their contacts as well,

277
00:10:55,160 --> 00:10:58,570
except, unlike all the email worms of old,

278
00:10:58,570 --> 00:11:01,010
this used some of the
more modern OAuth-style

279
00:11:01,010 --> 00:11:02,450
authentication and authorization

280
00:11:02,450 --> 00:11:04,070
to actually carry out these attacks,

281
00:11:04,070 --> 00:11:06,360
as opposed to old school
credential harvesting

282
00:11:06,360 --> 00:11:08,313
and stuff like that.

283
00:11:11,100 --> 00:11:12,310
So, as you can imagine,

284
00:11:12,310 --> 00:11:13,757
this was pretty shocking
to a lot of companies

285
00:11:13,757 --> 00:11:15,057
and a lot of users.

286
00:11:15,057 --> 00:11:17,420
And so Google made some
pretty quick changes

287
00:11:17,420 --> 00:11:19,712
and mitigations after this happened.

288
00:11:19,712 --> 00:11:20,960
Around two months later,

289
00:11:20,960 --> 00:11:24,340
they introduced a G Suite Admin Control

290
00:11:24,340 --> 00:11:27,220
for sort of administrators of companies

291
00:11:27,220 --> 00:11:28,440
to essentially lockdown their orgs.

292
00:11:28,440 --> 00:11:30,190
And the way that this would work

293
00:11:30,190 --> 00:11:33,270
is essentially it, they could publish it,

294
00:11:33,270 --> 00:11:34,270
they could basically set a setting

295
00:11:34,270 --> 00:11:37,230
that says none of my employees
are allowed to grant access

296
00:11:37,230 --> 00:11:39,710
to any of their Google account data

297
00:11:39,710 --> 00:11:41,110
for their employee account,

298
00:11:41,110 --> 00:11:44,230
unless it's for one of
these explicit OAuth apps

299
00:11:44,230 --> 00:11:46,150
that I've explicitly allowed.

300
00:11:46,150 --> 00:11:47,530
So this would allow you to lockdown

301
00:11:47,530 --> 00:11:50,100
to prevent, you know, say
this were to happen again.

302
00:11:50,100 --> 00:11:50,980
Their place just straight up,

303
00:11:50,980 --> 00:11:53,590
would not be able to grant
these permissions their account

304
00:11:53,590 --> 00:11:54,470
because it would be blocked,

305
00:11:54,470 --> 00:11:57,683
unless it was whitelisted
under this policy.

306
00:11:59,270 --> 00:12:02,450
And Google later
introduced what are called

307
00:12:02,450 --> 00:12:04,050
sort of Sensitive and Restricted scopes,

308
00:12:04,050 --> 00:12:06,870
they basically labeled a
bunch of these permissions,

309
00:12:06,870 --> 00:12:07,770
as I mentioned before,

310
00:12:07,770 --> 00:12:09,690
as either Sensitive or Restricted,

311
00:12:09,690 --> 00:12:12,290
depending on the kind of
data that they would grant.

312
00:12:13,350 --> 00:12:14,460
And in addition to that,

313
00:12:14,460 --> 00:12:15,780
they introduced what's called

314
00:12:15,780 --> 00:12:18,110
the Unverified App warning prompt,

315
00:12:18,110 --> 00:12:21,240
for some of the smaller apps
that require these scopes

316
00:12:21,240 --> 00:12:22,660
and they went and they cracked down

317
00:12:22,660 --> 00:12:25,010
a lot of these other
misleading OAuth apps, right.

318
00:12:25,010 --> 00:12:26,120
They beefed up their security

319
00:12:26,120 --> 00:12:28,210
around what you can name an OAuth app

320
00:12:28,210 --> 00:12:30,480
to prevent sort of the same
exact attack we saw before.

321
00:12:30,480 --> 00:12:32,700
So they couldn't mimic Google-style names

322
00:12:32,700 --> 00:12:34,100
and stuff like that as well.

323
00:12:35,960 --> 00:12:38,920
So just some quick food for thought here,

324
00:12:38,920 --> 00:12:40,249
this attack really didn't utilize

325
00:12:40,249 --> 00:12:44,559
a whole lot of crazy Zero-Day
bugs or exploits apart from,

326
00:12:44,559 --> 00:12:47,920
I guess, some of the Unicode
trickery for the name,

327
00:12:47,920 --> 00:12:51,145
it was basically kind of
using the system as designed.

328
00:12:51,145 --> 00:12:54,800
But the impact was actually
incredibly substantial, right?

329
00:12:54,800 --> 00:12:56,290
So that's something to
really think about here

330
00:12:56,290 --> 00:12:59,550
is you don't necessarily
have to have one big bug

331
00:12:59,550 --> 00:13:02,240
or one exploit to sort of
pull off these crazy attacks.

332
00:13:02,240 --> 00:13:04,700
You can simply abuse the
system as it was designed.

333
00:13:04,700 --> 00:13:06,430
And the design itself can just lend itself

334
00:13:06,430 --> 00:13:07,693
to attacks like this.

335
00:13:08,750 --> 00:13:10,490
So just something to sort
of think about in general

336
00:13:10,490 --> 00:13:12,413
with this, that kind of stock.

337
00:13:14,570 --> 00:13:15,610
So we talked about the history,

338
00:13:15,610 --> 00:13:17,280
let's go into the latest, right?

339
00:13:17,280 --> 00:13:19,330
So we all have mitigations in place,

340
00:13:19,330 --> 00:13:20,900
what can we bypass and what can we do

341
00:13:20,900 --> 00:13:22,283
in this sort of modern age?

342
00:13:24,190 --> 00:13:27,260
So, I talked earlier about
the Unverified App prompt.

343
00:13:27,260 --> 00:13:30,530
This is for apps, of course,
that ask these sensitive scopes

344
00:13:30,530 --> 00:13:32,640
and there's quite a few of them.

345
00:13:32,640 --> 00:13:35,980
So what essentially, this is
not kind of a light warning.

346
00:13:35,980 --> 00:13:37,348
This is a really serious prompt

347
00:13:37,348 --> 00:13:40,040
that actually would dissuade
users from continuing.

348
00:13:40,040 --> 00:13:41,950
It kind of takes, it looks
a sort of takes some tips

349
00:13:41,950 --> 00:13:45,830
from Google Chrome's UI
for in data as a cell,

350
00:13:45,830 --> 00:13:46,960
you know, sites that you visit.

351
00:13:46,960 --> 00:13:48,950
And so the way that the
user can actually continue

352
00:13:48,950 --> 00:13:51,220
is they have to click
this little text that says

353
00:13:51,220 --> 00:13:53,840
Show Advanced and they have
to go down to the bottom

354
00:13:53,840 --> 00:13:57,110
and click through and
for the regular user,

355
00:13:57,110 --> 00:13:58,640
this is just not gonna be a tenable thing,

356
00:13:58,640 --> 00:13:59,917
they're just not gonna be
able to get through this.

357
00:13:59,917 --> 00:14:02,640
And so it actually poses
significant barrier for us

358
00:14:02,640 --> 00:14:06,273
as attackers and our, if we
want to phish or use OAuth here.

359
00:14:08,610 --> 00:14:11,820
So what is a Sensitive
or Restricted scope?

360
00:14:11,820 --> 00:14:14,410
So that just means any API
with the potential to access

361
00:14:14,410 --> 00:14:16,441
sort of private data.

362
00:14:16,441 --> 00:14:19,250
This is everything from Gmail, BigQuery,

363
00:14:19,250 --> 00:14:22,420
Google Cloud, Drive,
Calendar it's basically,

364
00:14:22,420 --> 00:14:24,100
it's actually a large
percentage of the scope.

365
00:14:24,100 --> 00:14:26,900
So it's over 120 APIs.

366
00:14:26,900 --> 00:14:28,770
And the way that works is
essentially if it's a small app,

367
00:14:28,770 --> 00:14:30,280
if it has less than a hundred users,

368
00:14:30,280 --> 00:14:32,300
you have this Unverified App prompts

369
00:14:32,300 --> 00:14:34,460
and if the app is bigger
than a hundred users,

370
00:14:34,460 --> 00:14:36,780
you need to go through an
even more strict process

371
00:14:36,780 --> 00:14:37,700
where you undergo

372
00:14:37,700 --> 00:14:40,170
sort of this intense
manual review process.

373
00:14:40,170 --> 00:14:42,280
And this process is like no joke,

374
00:14:42,280 --> 00:14:44,560
there are companies that
you have to use these scopes

375
00:14:44,560 --> 00:14:47,880
legitimately for real-world
services that they provide.

376
00:14:47,880 --> 00:14:50,705
And they have written
entire postscripts saying,

377
00:14:50,705 --> 00:14:52,460
"It's so hard for us to get
past this review process",

378
00:14:52,460 --> 00:14:53,600
So this is the real deal.

379
00:14:53,600 --> 00:14:57,080
And it's definitely not something
that we could really cross

380
00:14:57,080 --> 00:14:59,197
if we were an attacker trying
to publish a malicious app,

381
00:14:59,197 --> 00:15:01,113
it's just not a tenable route for us,

382
00:15:02,140 --> 00:15:05,210
but there are some
exceptions to this policy.

383
00:15:05,210 --> 00:15:07,670
So you take a look at the
documentation around this,

384
00:15:07,670 --> 00:15:09,050
essentially if you have,

385
00:15:09,050 --> 00:15:10,960
if it is the case where
you have some Apps Script,

386
00:15:10,960 --> 00:15:13,858
or an app, and you use a Sensitive scope

387
00:15:13,858 --> 00:15:16,640
and you fall into any of these categories,

388
00:15:16,640 --> 00:15:18,720
then either the normal OAuth flow

389
00:15:18,720 --> 00:15:20,370
without the Unverified
App prompt will happen

390
00:15:20,370 --> 00:15:22,980
or the unverified OAuth flow will happen.

391
00:15:22,980 --> 00:15:24,646
So one of these is particular,

392
00:15:24,646 --> 00:15:26,743
which is the intersection of these two.

393
00:15:27,710 --> 00:15:30,080
And essentially what this says is it says

394
00:15:30,080 --> 00:15:35,080
Hey, if the publisher of this
app is in the same G Suite org

395
00:15:36,150 --> 00:15:39,280
as the user who's authorizing
it and running it,

396
00:15:39,280 --> 00:15:41,510
then there'll be no Unverified App prompt.

397
00:15:41,510 --> 00:15:43,560
And this sort of makes sense, right?

398
00:15:43,560 --> 00:15:45,315
you can imagine you've got an employee

399
00:15:45,315 --> 00:15:46,950
who works with you,

400
00:15:46,950 --> 00:15:49,430
they've created this app and
they then share it with you

401
00:15:49,430 --> 00:15:51,000
and you wanna run it, it doesn't really,

402
00:15:51,000 --> 00:15:53,480
you trust them and it's
an internal action.

403
00:15:53,480 --> 00:15:56,110
So it wouldn't really make
sense to have this scary prompt,

404
00:15:56,110 --> 00:15:57,440
cause it's sort of used internal

405
00:15:57,440 --> 00:15:59,240
and somewhat implicitly trustworthy.

406
00:16:00,400 --> 00:16:01,400
So that's something interesting

407
00:16:01,400 --> 00:16:02,660
if we could abuse that

408
00:16:02,660 --> 00:16:05,150
we could essentially get around this.

409
00:16:05,150 --> 00:16:07,234
So one other thing to
note about Apps Script

410
00:16:07,234 --> 00:16:08,780
is when you have an Apps Script app,

411
00:16:08,780 --> 00:16:10,916
it can be either a sort
of standalone project,

412
00:16:10,916 --> 00:16:13,040
a standalone script that runs,

413
00:16:13,040 --> 00:16:14,388
or they can be with what's called

414
00:16:14,388 --> 00:16:16,820
bound to a container,

415
00:16:16,820 --> 00:16:18,662
and by container this means basically

416
00:16:18,662 --> 00:16:22,900
you can bind it to a Google
Doc, or a Sheet, or a Slide.

417
00:16:22,900 --> 00:16:25,650
And when you do this,
this allows you scripting

418
00:16:25,650 --> 00:16:28,126
to basically you can
manipulate the document,

419
00:16:28,126 --> 00:16:31,400
customize the UI, stuff like that.

420
00:16:31,400 --> 00:16:32,840
And the way that works is essentially

421
00:16:32,840 --> 00:16:35,210
the regular triggers
I talked about before,

422
00:16:35,210 --> 00:16:36,300
they'll run for any user

423
00:16:36,300 --> 00:16:38,610
who basically has edit access to the Docs,

424
00:16:38,610 --> 00:16:40,050
so they have to have
edit access to the Doc

425
00:16:40,050 --> 00:16:42,090
and then they can kick off any
of these Apps Script triggers

426
00:16:42,090 --> 00:16:43,930
and sort of run this app.

427
00:16:43,930 --> 00:16:44,870
Keeping in mind, of course,

428
00:16:44,870 --> 00:16:46,753
they still have to
accept the OAuth prompts

429
00:16:46,753 --> 00:16:49,503
if they're requesting any scopes.

430
00:16:51,340 --> 00:16:52,173
So if you imagine

431
00:16:52,173 --> 00:16:54,750
sort of our average OAuth
phishing scenario, right?

432
00:16:54,750 --> 00:16:56,870
Say we have a Google Doc
with some Apps Script

433
00:16:56,870 --> 00:17:00,470
attached to it and we
send our victim this link

434
00:17:00,470 --> 00:17:02,730
who's inside of this G Suite org.

435
00:17:02,730 --> 00:17:05,780
When they go to actually they open the Doc

436
00:17:05,780 --> 00:17:08,260
and they trigger it and prompt spawns,

437
00:17:08,260 --> 00:17:09,374
they of course get the

438
00:17:09,374 --> 00:17:11,684
"Hey, Google, hasn't verified this app

439
00:17:11,684 --> 00:17:13,520
suppress the Sensitive scopes.

440
00:17:13,520 --> 00:17:14,997
And so likely the victims would be like,

441
00:17:14,997 --> 00:17:15,990
"Nah, this isn't for me,

442
00:17:15,990 --> 00:17:17,270
I don't even know how to get through this"

443
00:17:17,270 --> 00:17:20,343
and so our attempt is probably
gonna fail here, right?

444
00:17:22,560 --> 00:17:24,660
So one interesting thing about Google Docs

445
00:17:24,660 --> 00:17:27,050
and Sheets and Slides and all this stuff,

446
00:17:27,050 --> 00:17:29,470
is that if you change the average URL

447
00:17:29,470 --> 00:17:32,540
that you get from edit to copy,

448
00:17:32,540 --> 00:17:36,000
instead of just directly opening
to this document interface,

449
00:17:36,000 --> 00:17:38,790
you'll actually get this prompt instead,

450
00:17:38,790 --> 00:17:41,227
and so this essentially
this prompt here says,

451
00:17:41,227 --> 00:17:42,992
"Hey, do you wanna make
a copy of, in this case,

452
00:17:42,992 --> 00:17:46,480
Confidential Org-wide
Comp & Promo Details?"

453
00:17:46,480 --> 00:17:47,640
And they get a little button that says

454
00:17:47,640 --> 00:17:49,540
Make a copy and when they click this,

455
00:17:49,540 --> 00:17:50,620
what ends up happening is,

456
00:17:50,620 --> 00:17:52,790
it copies the the document, the sheet

457
00:17:52,790 --> 00:17:54,470
into their own Google Drive

458
00:17:54,470 --> 00:17:55,790
and then they're immediately taken

459
00:17:55,790 --> 00:18:00,243
to the the full UI interface
for working with the sheet.

460
00:18:01,550 --> 00:18:04,610
And so, going back to the
attack I mentioned earlier,

461
00:18:04,610 --> 00:18:07,410
so now if we're an attacker
and we send our victim,

462
00:18:07,410 --> 00:18:09,710
this copy link, instead
of the regular link,

463
00:18:09,710 --> 00:18:10,543
when they go through this link,

464
00:18:10,543 --> 00:18:12,578
and they click to make a copy of it.

465
00:18:12,578 --> 00:18:15,980
They'll essentially, like it
copies into their Google Drive

466
00:18:15,980 --> 00:18:17,190
and then when they trigger

467
00:18:17,190 --> 00:18:18,710
the Apps Script that's attached to it,

468
00:18:18,710 --> 00:18:20,150
they will get the regular prompt

469
00:18:20,150 --> 00:18:22,453
without this Unverified App screen.

470
00:18:23,320 --> 00:18:25,020
And the reason why they get this

471
00:18:25,020 --> 00:18:27,380
is because if you look at the app itself,

472
00:18:27,380 --> 00:18:29,410
you'll notice that the actual developer

473
00:18:29,410 --> 00:18:31,490
behind the app is the victim.

474
00:18:31,490 --> 00:18:32,485
And the reason why it's the victim

475
00:18:32,485 --> 00:18:34,970
is because when they copied that doc,

476
00:18:34,970 --> 00:18:35,900
what they ended up doing

477
00:18:35,900 --> 00:18:38,800
was essentially they became the creator,

478
00:18:38,800 --> 00:18:39,810
because they copied the doc,

479
00:18:39,810 --> 00:18:42,580
they're now the creator
and owner of the script.

480
00:18:42,580 --> 00:18:44,700
And so they'll actually
see that they themselves

481
00:18:44,700 --> 00:18:47,000
are requesting the
permission from themselves.

482
00:18:50,090 --> 00:18:53,342
So there is one problem though,
so when you actually copy,

483
00:18:53,342 --> 00:18:56,430
a document with Apps
Script attached to it,

484
00:18:56,430 --> 00:18:58,440
the triggers don't come
along for the ride.

485
00:18:58,440 --> 00:19:00,620
So they don't really have
a way to trigger this thing

486
00:19:00,620 --> 00:19:02,230
to get this prompt to display.

487
00:19:02,230 --> 00:19:04,363
So that's kind of a pain,

488
00:19:05,880 --> 00:19:07,870
so one way that we can
get around this problem

489
00:19:07,870 --> 00:19:10,580
is Google Sheets have
what are called macros.

490
00:19:10,580 --> 00:19:12,500
And this is sort of
something made to compete

491
00:19:12,500 --> 00:19:16,070
with Microsoft Excels
VB script style stuff

492
00:19:16,070 --> 00:19:18,440
to manipulate and automate spreadsheets.

493
00:19:18,440 --> 00:19:20,350
But what's useful about
the Google Sheets version

494
00:19:20,350 --> 00:19:22,703
is they can call out
arbitrary Apps Scripts.

495
00:19:23,560 --> 00:19:25,050
And what's even more
useful, is you can actually,

496
00:19:25,050 --> 00:19:29,030
if you have an image or an
item in your Google Sheets,

497
00:19:29,030 --> 00:19:30,640
you can assign a macro,

498
00:19:30,640 --> 00:19:32,550
so when somebody clicks on the image,

499
00:19:32,550 --> 00:19:34,510
it will automatically run this macro,

500
00:19:34,510 --> 00:19:37,300
which by proxy runs any
arbitrary Apps Scripts

501
00:19:37,300 --> 00:19:38,133
that you want.

502
00:19:38,133 --> 00:19:40,200
So this basically it's a great way

503
00:19:40,200 --> 00:19:42,550
to sort of trigger your
Apps Script to payload.

504
00:19:44,140 --> 00:19:45,270
So I've got a little demo here

505
00:19:45,270 --> 00:19:46,590
where you can see the victim

506
00:19:46,590 --> 00:19:49,230
and they go in here and
they click, Make a copy,

507
00:19:49,230 --> 00:19:52,150
of this Google Sheets and after
they've clicked that button,

508
00:19:52,150 --> 00:19:54,367
you take them directly
to your copied sheets.

509
00:19:54,367 --> 00:19:56,560
And you see this beautiful
image of this goose

510
00:19:56,560 --> 00:19:57,420
with this butter knife

511
00:19:57,420 --> 00:19:59,700
looking totally not threatening at all.

512
00:19:59,700 --> 00:20:01,020
And when they go to click on that,

513
00:20:01,020 --> 00:20:02,500
they get the authorization prompts

514
00:20:02,500 --> 00:20:03,830
and when they click Continue,

515
00:20:03,830 --> 00:20:06,660
you can see they have
the regular OAuth prompt,

516
00:20:06,660 --> 00:20:08,740
no warnings at all.

517
00:20:08,740 --> 00:20:10,983
So essentially bypass
that whole restriction

518
00:20:10,983 --> 00:20:13,660
around Unverified Apps,

519
00:20:13,660 --> 00:20:15,212
but that's not actually
all that we bypass.

520
00:20:15,212 --> 00:20:19,910
So in addition to bypassing
the Unverified App screen,

521
00:20:19,910 --> 00:20:22,128
we've also, I mentioned earlier this,

522
00:20:22,128 --> 00:20:23,800
a little bit earlier in the talk,

523
00:20:23,800 --> 00:20:26,060
but that G Suite Admin setting

524
00:20:26,060 --> 00:20:28,690
that allows you to basically
lockdown your organization

525
00:20:28,690 --> 00:20:30,210
to prevent third party OAuth apps

526
00:20:30,210 --> 00:20:33,410
from requesting permissions
on your employee's accounts.

527
00:20:33,410 --> 00:20:35,981
This actually gets around that as well.

528
00:20:35,981 --> 00:20:38,298
This entire system is
essentially bypassed.

529
00:20:38,298 --> 00:20:40,431
And the reason for that
is exactly the same reason

530
00:20:40,431 --> 00:20:43,970
as the reason for bypassing
the Unverified App prompts

531
00:20:43,970 --> 00:20:45,800
because the app is owned by,

532
00:20:45,800 --> 00:20:48,950
it's basically when the copy
is made into the Google Drive

533
00:20:48,950 --> 00:20:52,780
of the the victim and
they're inside the org,

534
00:20:52,780 --> 00:20:54,853
essentially it means that
the OAuth app itself,

535
00:20:54,853 --> 00:20:58,490
instead of the new owner,
it's an internal app.

536
00:20:58,490 --> 00:21:00,740
So it's not a third-party app.
It's actually first-party,

537
00:21:00,740 --> 00:21:02,995
it's inside the org and
so this doesn't apply.

538
00:21:02,995 --> 00:21:04,989
This block on all third-party API access,

539
00:21:04,989 --> 00:21:07,863
it doesn't apply, so
this is bypassed as well.

540
00:21:10,980 --> 00:21:13,670
So another fun tip for sort of defeating

541
00:21:13,670 --> 00:21:15,825
both the third-party app restrictions

542
00:21:15,825 --> 00:21:18,700
and the Unverified App prompt

543
00:21:18,700 --> 00:21:21,530
is that if you go through the Docs,

544
00:21:21,530 --> 00:21:25,610
you realize that the doc that's
attached to the Apps Script

545
00:21:25,610 --> 00:21:28,880
and vice versa, they have the same owner.

546
00:21:28,880 --> 00:21:30,190
And so what's interesting about this

547
00:21:30,190 --> 00:21:31,700
is saying you have somebody who's created

548
00:21:31,700 --> 00:21:34,000
a new Google Sheets or Doc or whatever,

549
00:21:34,000 --> 00:21:36,284
inside of their G Suite domain,

550
00:21:36,284 --> 00:21:37,400
when they've created that

551
00:21:37,400 --> 00:21:39,730
that's actually a kind of
a bypass wanting to happen,

552
00:21:39,730 --> 00:21:42,050
because if they share edit access

553
00:21:42,050 --> 00:21:45,090
with anybody outside of the organization,

554
00:21:45,090 --> 00:21:47,085
that person where their edit
access can actually go in

555
00:21:47,085 --> 00:21:50,940
and they can then create some
Apps Script for that document.

556
00:21:50,940 --> 00:21:52,730
And the owner is still the person

557
00:21:52,730 --> 00:21:55,660
that created the doc, the sheet
in the first place, right?

558
00:21:55,660 --> 00:21:57,050
So since that sticks,

559
00:21:57,050 --> 00:21:58,580
now you can essentially use that

560
00:21:58,580 --> 00:22:02,040
to start off your phishing
or whatever attempt, right?

561
00:22:02,040 --> 00:22:05,220
Because that will bypass
all of the third-party

562
00:22:05,220 --> 00:22:06,420
and Unverified App restrictions

563
00:22:06,420 --> 00:22:07,420
that we talked about previously,

564
00:22:07,420 --> 00:22:08,330
'cause it will be owned

565
00:22:08,330 --> 00:22:10,960
by the employee that first
created this document.

566
00:22:10,960 --> 00:22:12,352
So if you can find one of these,

567
00:22:12,352 --> 00:22:13,990
this is a great starting place,

568
00:22:13,990 --> 00:22:17,363
where you can sort of skip
the whole copy style attack.

569
00:22:20,188 --> 00:22:22,720
We talked about how to sort
of pierce the perimeter.

570
00:22:22,720 --> 00:22:24,970
Now let's go into sort of
once you've got some access,

571
00:22:24,970 --> 00:22:29,100
you've maybe a compromised one
employee, a G Suite account,

572
00:22:29,100 --> 00:22:30,470
where do you go past then, right?

573
00:22:30,470 --> 00:22:31,890
What can you pivot to,

574
00:22:31,890 --> 00:22:33,490
how can you escalate privileges?

575
00:22:35,210 --> 00:22:37,460
So likely, most companies

576
00:22:37,460 --> 00:22:39,360
I'd say probably the most
interesting data they have

577
00:22:39,360 --> 00:22:42,940
is in Google Cloud and so
pivoting to Google Cloud

578
00:22:42,940 --> 00:22:45,373
from Apps Script implant
seems pretty important.

579
00:22:46,750 --> 00:22:48,940
So accessing Google
Cloud through Apps Script

580
00:22:48,940 --> 00:22:50,150
is not super documented,

581
00:22:50,150 --> 00:22:51,920
but you can do it by basically

582
00:22:51,920 --> 00:22:54,540
requesting the scope cloud platform.

583
00:22:54,540 --> 00:22:57,660
And that actually gives
you access to all GCP APIs.

584
00:22:57,660 --> 00:23:00,310
So everything from BigQuery
to Google Cloud functions,

585
00:23:00,310 --> 00:23:03,020
GCE, all of it, as the user

586
00:23:03,020 --> 00:23:08,020
who basically authorizes
access to your app, right?

587
00:23:08,070 --> 00:23:10,690
So the way that you essentially
authenticate to these APIs

588
00:23:10,690 --> 00:23:14,797
is you use the Apps Script
function, ScriptApp.getOAuthToken

589
00:23:16,512 --> 00:23:17,440
You take that value

590
00:23:17,440 --> 00:23:19,280
and put it in the
authorization bearer header,

591
00:23:19,280 --> 00:23:22,080
and you can use that to
authenticate to all of the APIs,

592
00:23:24,370 --> 00:23:26,350
but when you do this,
there's kind of a gotcha.

593
00:23:26,350 --> 00:23:27,910
So you'll notice that
when you try to use this

594
00:23:27,910 --> 00:23:30,030
for the Google GCP APIs,

595
00:23:30,030 --> 00:23:32,209
you're gonna get this warning that says,

596
00:23:32,209 --> 00:23:35,425
"API that you're trying to access,

597
00:23:35,425 --> 00:23:37,267
it's not been used in this project ID,

598
00:23:37,267 --> 00:23:39,313
you know, this number before,

599
00:23:39,313 --> 00:23:41,276
either it's not been
used or it's disabled".

600
00:23:41,276 --> 00:23:44,324
So this request is failed.

601
00:23:44,324 --> 00:23:45,720
What's your more strange

602
00:23:45,720 --> 00:23:48,340
is the product number that's displayed.

603
00:23:48,340 --> 00:23:49,360
It's not gonna be for the product

604
00:23:49,360 --> 00:23:51,370
that you're even trying to access.

605
00:23:51,370 --> 00:23:53,383
So what's the deal with this here?

606
00:23:55,020 --> 00:23:56,710
Again, not super-well documented,

607
00:23:56,710 --> 00:24:00,640
but essentially when you
create a new Apps Script app

608
00:24:00,640 --> 00:24:01,670
upon that creation,

609
00:24:01,670 --> 00:24:05,460
you're allocated a sort of
hidden Google call project.

610
00:24:05,460 --> 00:24:07,860
That's immediately attached
to this Apps Script app

611
00:24:07,860 --> 00:24:09,189
associated with it.

612
00:24:09,189 --> 00:24:12,308
And so what happens is this implicitly

613
00:24:12,308 --> 00:24:14,770
binds your API requests that you make

614
00:24:14,770 --> 00:24:17,940
from your access token
generated by your implant

615
00:24:17,940 --> 00:24:18,840
with this project.

616
00:24:18,840 --> 00:24:19,790
So it just sort of,

617
00:24:19,790 --> 00:24:21,590
that's why you have this
arbitrary product number

618
00:24:21,590 --> 00:24:23,120
it's for this hidden project.

619
00:24:23,120 --> 00:24:24,650
And you, unfortunately,
for the hidden project,

620
00:24:24,650 --> 00:24:25,543
you can't access it

621
00:24:25,543 --> 00:24:28,240
via the Google Cloud Control
Panel or anything that.

622
00:24:28,240 --> 00:24:30,950
You can't enable services
on it, use programmatically,

623
00:24:30,950 --> 00:24:32,710
like you normally would be able to.

624
00:24:32,710 --> 00:24:36,030
And so this is kind of
a big problem, right?

625
00:24:36,030 --> 00:24:38,330
Well, it turns out that you
can actually get around this

626
00:24:38,330 --> 00:24:43,250
by specifying the
x-goog-user-project header.

627
00:24:43,250 --> 00:24:45,160
And you simply specify the product name

628
00:24:45,160 --> 00:24:46,840
that you're trying to query, right?

629
00:24:46,840 --> 00:24:50,390
So if you're going for, you
wanna modify a project example,

630
00:24:50,390 --> 00:24:53,480
you do this header and
then set it to that value.

631
00:24:53,480 --> 00:24:55,959
That basically looks
this, set your product ID

632
00:24:55,959 --> 00:24:58,700
in your API calls and
set it in the header.

633
00:24:58,700 --> 00:25:00,640
And then you put your
authorization bearer header

634
00:25:00,640 --> 00:25:01,473
to that script,

635
00:25:01,473 --> 00:25:03,840
to the script app that
get OAuth token value

636
00:25:03,840 --> 00:25:05,050
that I mentioned before.

637
00:25:05,050 --> 00:25:08,980
And you can go on and you
can talk to all the GCP APIs

638
00:25:08,980 --> 00:25:10,530
to your heart's content, right?

639
00:25:13,650 --> 00:25:16,010
It's the data you're looking
for, it doesn't happen to be,

640
00:25:16,010 --> 00:25:18,191
the good stuff isn't in Google Cloud,

641
00:25:18,191 --> 00:25:21,170
then it's probably in Google Drive, right?

642
00:25:21,170 --> 00:25:23,090
Maybe more financial, different companies,

643
00:25:23,090 --> 00:25:25,770
all their stuff is in Sheets and Drive.

644
00:25:25,770 --> 00:25:27,870
And so let's talk about
sort of mining Google Drive

645
00:25:27,870 --> 00:25:28,963
for the good stuff.

646
00:25:30,580 --> 00:25:32,950
We'll begin with kind
of the general overview

647
00:25:32,950 --> 00:25:35,640
of how sharing works in Google Drive.

648
00:25:35,640 --> 00:25:37,220
So by default in G Suite,

649
00:25:37,220 --> 00:25:39,430
there's essentially these
three permission levels,

650
00:25:39,430 --> 00:25:43,840
the most restricted sharing
settings for a file is that,

651
00:25:43,840 --> 00:25:47,260
only people who are
explicitly added to the ACL

652
00:25:47,260 --> 00:25:49,097
are allowed to access the documents.

653
00:25:49,097 --> 00:25:50,400
You've just got to go one by one

654
00:25:50,400 --> 00:25:53,440
and add other users, and
to give them access to it,

655
00:25:53,440 --> 00:25:54,540
and if they aren't on the list,

656
00:25:54,540 --> 00:25:57,850
they cannot view the document,
right, they can't access it.

657
00:25:57,850 --> 00:25:58,930
So, the second level

658
00:25:58,930 --> 00:26:02,750
is anybody who has a link
to the document or the file,

659
00:26:02,750 --> 00:26:05,890
they can access it, so you
said you're sharing by link.

660
00:26:05,890 --> 00:26:08,060
So if they have a link,
they can access it,

661
00:26:08,060 --> 00:26:09,720
but if they don't, they can't, right.

662
00:26:09,720 --> 00:26:12,770
And then the widest most open setting

663
00:26:12,770 --> 00:26:13,770
is you can even make it so that,

664
00:26:13,770 --> 00:26:15,020
hey, anybody who just searches

665
00:26:15,020 --> 00:26:16,530
inside of the Drive web page,

666
00:26:16,530 --> 00:26:18,950
they can find your internal
doc by doing that, right,

667
00:26:18,950 --> 00:26:20,500
if they're also in the company.

668
00:26:22,590 --> 00:26:24,530
So yeah, these are the defaults,

669
00:26:24,530 --> 00:26:25,820
essentially by default,

670
00:26:25,820 --> 00:26:27,190
it has the strictest sharing settings

671
00:26:27,190 --> 00:26:29,400
where you have to explicitly add people,

672
00:26:29,400 --> 00:26:31,720
one click away from that,
the most restrictive settings

673
00:26:31,720 --> 00:26:34,181
is share my link with
everybody who has the link,

674
00:26:34,181 --> 00:26:36,090
they can access the document

675
00:26:36,090 --> 00:26:37,774
and then if you do more clicks,

676
00:26:37,774 --> 00:26:40,313
you can get it searchable
by everybody, right.

677
00:26:41,370 --> 00:26:43,420
And of course once somebody view,

678
00:26:43,420 --> 00:26:44,650
if it is shared by link, right,

679
00:26:44,650 --> 00:26:46,370
and somebody else views it once,

680
00:26:46,370 --> 00:26:48,250
it becomes searchable in the future,

681
00:26:48,250 --> 00:26:51,400
because the assumption
is you have the link,

682
00:26:51,400 --> 00:26:53,350
you should be able to find it again,

683
00:26:53,350 --> 00:26:55,710
because you were able to visit it once.

684
00:26:55,710 --> 00:26:59,310
These unique document URLs
are outside of the range

685
00:26:59,310 --> 00:27:00,143
of brute forcing.

686
00:27:00,143 --> 00:27:01,300
So if somebody does share my link,

687
00:27:01,300 --> 00:27:03,690
you're not gonna be able to brute force

688
00:27:03,690 --> 00:27:04,710
the actual link itself,

689
00:27:04,710 --> 00:27:06,610
you're gonna have to actually have it.

690
00:27:08,000 --> 00:27:10,230
So we talked about sort
of what the default

691
00:27:10,230 --> 00:27:11,420
and what the setting system is,

692
00:27:11,420 --> 00:27:13,940
but real world usage tends
to be quite different

693
00:27:13,940 --> 00:27:15,890
than sort of the strictly
technical bits, right?

694
00:27:15,890 --> 00:27:18,060
So what actually ends up happening?

695
00:27:18,060 --> 00:27:19,948
So in my experience, usually
what ends up happening is,

696
00:27:19,948 --> 00:27:23,533
if a file is important, almost
kind of by definition, right?

697
00:27:23,533 --> 00:27:25,330
It's gonna be shared
with other people, right?

698
00:27:25,330 --> 00:27:27,070
Other people are gonna view this document.

699
00:27:27,070 --> 00:27:29,720
They're gonna maybe make
changes, do adjustments to it.

700
00:27:29,720 --> 00:27:31,725
And so in the strictest security setting

701
00:27:31,725 --> 00:27:35,120
that we mentioned previously
the owner of the doc

702
00:27:35,120 --> 00:27:37,990
is gonna have to add into
individual users one by one.

703
00:27:37,990 --> 00:27:39,867
And that's a very tedious process,

704
00:27:39,867 --> 00:27:42,472
especially when you have say
you're doing it 40 people,

705
00:27:42,472 --> 00:27:45,010
that's very time consuming.

706
00:27:45,010 --> 00:27:46,137
And you can use Google Groups

707
00:27:46,137 --> 00:27:49,040
and sort of put together ACL groups

708
00:27:49,040 --> 00:27:50,920
that can be added in bulk together,

709
00:27:50,920 --> 00:27:52,610
but it's still very
tedious process, right.

710
00:27:52,610 --> 00:27:54,320
So what often ends up happening

711
00:27:54,320 --> 00:27:56,040
is people get to a point
where they're just like,

712
00:27:56,040 --> 00:27:58,190
they share it with so many people

713
00:27:58,190 --> 00:27:59,790
that they're just like, "Ah, forget it".

714
00:27:59,790 --> 00:28:01,160
Right and they just share by link

715
00:28:01,160 --> 00:28:01,993
with a large,

716
00:28:01,993 --> 00:28:04,340
anybody who has the link,
they're good to view it.

717
00:28:04,340 --> 00:28:07,040
So in practice that tends
to be pretty, pretty common.

718
00:28:08,330 --> 00:28:10,130
And only a tiny portion ended up being

719
00:28:10,130 --> 00:28:12,210
that wide searchable mode
that we talked about before,

720
00:28:12,210 --> 00:28:14,723
just because of the amount
of user interaction required.

721
00:28:15,910 --> 00:28:19,310
So, how do we get access
to these this big area,

722
00:28:19,310 --> 00:28:22,190
which is stuff that's shared by link?

723
00:28:22,190 --> 00:28:24,640
So of course there's the basic method,

724
00:28:24,640 --> 00:28:27,350
which is just a search all
the internally shared systems

725
00:28:27,350 --> 00:28:30,100
inside of a company, let's check the chat,

726
00:28:30,100 --> 00:28:31,910
let's check internal forums.

727
00:28:31,910 --> 00:28:35,340
You got Internal Q&A sites,
your ticket management queues,

728
00:28:35,340 --> 00:28:38,440
zero whatever, bug trackers,
and try to mine out

729
00:28:38,440 --> 00:28:41,770
and try and look for all
this Google Doc Drive links.

730
00:28:41,770 --> 00:28:44,660
And you can do that, but there's
also another way to do it,

731
00:28:44,660 --> 00:28:47,097
which is actually the same
way that we do it on the web.

732
00:28:47,097 --> 00:28:52,097
How we index and make documents
searchable on the web.

733
00:28:52,200 --> 00:28:53,810
And so the way this works
essentially is, yeah,

734
00:28:53,810 --> 00:28:56,488
you can have a script which
will simply take some seed,

735
00:28:56,488 --> 00:29:00,080
Google Drive links,
Google Sheets/Docs links.

736
00:29:00,080 --> 00:29:02,130
It will essentially it'll
go through each one of them,

737
00:29:02,130 --> 00:29:03,830
so say you give a Google Sheet,

738
00:29:03,830 --> 00:29:05,250
it'll go through that, it'll parse it.

739
00:29:05,250 --> 00:29:07,570
It'll find all the links
inside of a document.

740
00:29:07,570 --> 00:29:08,884
And it will recursively crawl

741
00:29:08,884 --> 00:29:10,620
all of those documents as well,

742
00:29:10,620 --> 00:29:13,510
and look for links inside
them and so forth and so on.

743
00:29:13,510 --> 00:29:15,420
Until it essentially is able to enumerate

744
00:29:15,420 --> 00:29:16,810
all of these other documents,

745
00:29:16,810 --> 00:29:18,697
which are sort of indirectly linked

746
00:29:18,697 --> 00:29:21,053
to all these other documents, right?

747
00:29:22,550 --> 00:29:24,070
So I've written an Apps Script Spider

748
00:29:24,070 --> 00:29:25,090
that does exactly this,

749
00:29:25,090 --> 00:29:27,420
which you can essentially do
what I just described, right.

750
00:29:27,420 --> 00:29:29,300
Take some seed links, plug it in,

751
00:29:29,300 --> 00:29:30,627
it uses a starting point

752
00:29:30,627 --> 00:29:32,305
and recursively crawls all this stuff

753
00:29:32,305 --> 00:29:33,960
until it's exhausted all the paths

754
00:29:33,960 --> 00:29:37,105
and it gives you along the
way it collects metadata

755
00:29:37,105 --> 00:29:39,660
about sharing, document context,

756
00:29:39,660 --> 00:29:41,620
the authors and stuff like that,

757
00:29:41,620 --> 00:29:43,990
so you can essentially, let it run,

758
00:29:43,990 --> 00:29:45,740
gather up all these documents

759
00:29:45,740 --> 00:29:47,280
and you can then look through the results

760
00:29:47,280 --> 00:29:50,500
to see if it has the data
that you're looking for.

761
00:29:50,500 --> 00:29:52,860
This is available at
this GitHub link here,

762
00:29:52,860 --> 00:29:54,283
so feel free to take a look.

763
00:29:56,520 --> 00:29:57,540
Another useful thing to do

764
00:29:57,540 --> 00:30:00,400
is to basically request Google backaccess

765
00:30:00,400 --> 00:30:03,283
for the people API and so
what this is essentially

766
00:30:03,283 --> 00:30:08,283
a G Suite, it ships with this
really neat ability actually,

767
00:30:09,840 --> 00:30:12,850
it comes with an internal
employee directory.

768
00:30:12,850 --> 00:30:14,160
And so with the people API,

769
00:30:14,160 --> 00:30:16,291
if you request the
directory.readonly scope

770
00:30:16,291 --> 00:30:18,466
at a minimum you can access,

771
00:30:18,466 --> 00:30:20,300
you can figure out all the other employees

772
00:30:20,300 --> 00:30:22,430
in the G Suite org, and
you can get everything

773
00:30:22,430 --> 00:30:25,297
from names, emails,
titles, whatever it is.

774
00:30:25,297 --> 00:30:26,895
And it's becomes extremely useful.

775
00:30:26,895 --> 00:30:29,180
Something that you probably
wanna collect early on,

776
00:30:29,180 --> 00:30:31,660
so say you first compromised
the G Suite employee.

777
00:30:31,660 --> 00:30:34,650
You wanna use this, to immediately
mine all those data out,

778
00:30:34,650 --> 00:30:38,070
because say you get
revoked by an administrator

779
00:30:38,070 --> 00:30:40,260
who catches you, or they
basically figure out

780
00:30:40,260 --> 00:30:44,260
that you did this phishing
campaign and revoke your app,

781
00:30:44,260 --> 00:30:46,600
delete all of your implant stuff.

782
00:30:46,600 --> 00:30:49,170
So having this data is very,
very useful for reentry,

783
00:30:49,170 --> 00:30:52,100
because you can make a much,
much more well-planned attack

784
00:30:52,100 --> 00:30:55,160
now that you have a good idea
of their entire organization,

785
00:30:55,160 --> 00:30:59,513
via this API, so highly
recommend this as an avenue.

786
00:31:01,810 --> 00:31:03,280
So let's talk about escalating
our privileges, right?

787
00:31:03,280 --> 00:31:04,510
Let's sort of talk about

788
00:31:04,510 --> 00:31:06,740
how we can increase
what privileges we have

789
00:31:06,740 --> 00:31:08,240
and get access to more things.

790
00:31:10,020 --> 00:31:14,470
So, one thing that is a very good source

791
00:31:14,470 --> 00:31:15,390
of privilege escalation

792
00:31:15,390 --> 00:31:18,530
is legitimate internal Apps Script apps

793
00:31:18,530 --> 00:31:19,710
that are developed by people

794
00:31:19,710 --> 00:31:21,900
inside of a G Suite organization

795
00:31:21,900 --> 00:31:24,740
that are attached to
Google Docs/Sheets/Slides,

796
00:31:24,740 --> 00:31:25,713
stuff like that.

797
00:31:26,600 --> 00:31:28,570
So recall earlier we
talked about Apps Script

798
00:31:28,570 --> 00:31:29,403
as being able to be,

799
00:31:29,403 --> 00:31:33,840
we talked about being bound to
a doc or a sheet or a slide.

800
00:31:33,840 --> 00:31:36,730
And this file that a script is bound to

801
00:31:36,730 --> 00:31:38,820
is called its container.

802
00:31:38,820 --> 00:31:40,770
And so one of the things
we have to ask ourselves

803
00:31:40,770 --> 00:31:43,501
is say you have some Apps
Scripts attached to a doc, right?

804
00:31:43,501 --> 00:31:46,503
So in this case, do
they have separate ACL?

805
00:31:46,503 --> 00:31:48,243
So, can you make it so they
can only edit the script,

806
00:31:48,243 --> 00:31:49,940
but not the doc?

807
00:31:49,940 --> 00:31:52,040
How does that, how does that work exactly?

808
00:31:52,900 --> 00:31:54,295
So if you read the Google documentation,

809
00:31:54,295 --> 00:31:58,470
they actually share their ACL
exactly with this container.

810
00:31:58,470 --> 00:32:01,650
So if you have a Google Doc
with some Apps Script attached,

811
00:32:01,650 --> 00:32:04,640
and somebody has edit permission on a doc,

812
00:32:04,640 --> 00:32:07,653
they by proxy have edit
permission to the script as well.

813
00:32:09,180 --> 00:32:11,760
So this leads to some more
interesting questions, right?

814
00:32:11,760 --> 00:32:13,387
So you recall the edit access is required

815
00:32:13,387 --> 00:32:16,130
as I mentioned earlier, to
even run the Apps Script,

816
00:32:16,130 --> 00:32:16,963
that's attached to a doc.

817
00:32:16,963 --> 00:32:19,490
So they can't even use your application

818
00:32:19,490 --> 00:32:21,720
unless they have edit access to your doc.

819
00:32:21,720 --> 00:32:23,010
But if they have edit access

820
00:32:23,010 --> 00:32:25,160
to the doc or sheet or slide or whatever,

821
00:32:25,160 --> 00:32:27,250
then they also have access

822
00:32:27,250 --> 00:32:29,960
to be able to edit the Apps
Script that's attached to it.

823
00:32:29,960 --> 00:32:31,280
So how does this work?

824
00:32:31,280 --> 00:32:33,950
We have a bunch of people
that all sharing the same doc

825
00:32:33,950 --> 00:32:37,710
or sheet or slide and using
the Apps Script attached to it.

826
00:32:37,710 --> 00:32:39,989
So in this given situation,
right, you have one app

827
00:32:39,989 --> 00:32:42,510
say, this is access to these employees,

828
00:32:42,510 --> 00:32:44,870
like Google Drive,
BigQuery, stuff like that,

829
00:32:44,870 --> 00:32:46,330
it's automating some process for them.

830
00:32:46,330 --> 00:32:50,790
They all have to be granted
editor access on the doc

831
00:32:50,790 --> 00:32:52,930
in order to be able to
use the Apps Script.

832
00:32:52,930 --> 00:32:54,820
And they're all sort
of sharing it together.

833
00:32:54,820 --> 00:32:57,060
So they've all authorized this thing,

834
00:32:57,060 --> 00:33:00,030
to access their services on their behalf.

835
00:33:00,030 --> 00:33:02,850
And then you have one
user that's malicious,

836
00:33:02,850 --> 00:33:05,260
and of course they have
editor access in the doc.

837
00:33:05,260 --> 00:33:06,740
They go in and use their editor access

838
00:33:06,740 --> 00:33:08,570
to modify the Apps Script
attached to the doc,

839
00:33:08,570 --> 00:33:10,700
to contain instead of
the legitimate script,

840
00:33:10,700 --> 00:33:13,820
a malicious payload that does
something nefarious, right?

841
00:33:13,820 --> 00:33:15,423
Maybe it like exfiltrates the docs

842
00:33:15,423 --> 00:33:17,160
that they have access
to, that the attacker

843
00:33:17,160 --> 00:33:18,820
doesn't have access to
something like that.

844
00:33:18,820 --> 00:33:21,480
And then when the regular users come along

845
00:33:21,480 --> 00:33:24,790
and they trigger the Apps
Script, like they regularly do.

846
00:33:24,790 --> 00:33:28,750
The malicious code now
runs them, so this becomes

847
00:33:28,750 --> 00:33:30,820
it's basically very,
very hard to write an app

848
00:33:30,820 --> 00:33:31,653
like this securely,

849
00:33:31,653 --> 00:33:34,970
because just in the way
that the system is designed,

850
00:33:34,970 --> 00:33:37,240
you have to get people edit
access and when you do that,

851
00:33:37,240 --> 00:33:39,050
then you have access
to edit the Apps Script

852
00:33:39,050 --> 00:33:43,190
and so any shared documents
with scripts attached to them,

853
00:33:43,190 --> 00:33:44,533
become very exploitable.

854
00:33:46,240 --> 00:33:48,170
So we can do actually even
do one better than this.

855
00:33:48,170 --> 00:33:49,913
So this piece of tech kind of implies

856
00:33:49,913 --> 00:33:52,030
that you have to wait
around for these people

857
00:33:52,030 --> 00:33:54,520
to trigger this Apps Script,
that's attached to the doc.

858
00:33:54,520 --> 00:33:57,110
And as attackers, we're
often quite impatient.

859
00:33:57,110 --> 00:33:59,990
We'd rather force this
to happen right now,

860
00:33:59,990 --> 00:34:01,611
so this can be done essentially by,

861
00:34:01,611 --> 00:34:03,300
you can force a re-trigger

862
00:34:03,300 --> 00:34:04,940
by basically going to the Apps Script

863
00:34:04,940 --> 00:34:07,880
and you can publish a web endpoints.

864
00:34:07,880 --> 00:34:10,060
And when you publish this,
you essentially get a URL.

865
00:34:10,060 --> 00:34:12,403
And that URL, if it's
visited by any of these users

866
00:34:12,403 --> 00:34:13,910
that have authorized this app,

867
00:34:13,910 --> 00:34:17,280
it will immediately trigger
the script to execute us then.

868
00:34:18,170 --> 00:34:21,560
And this is actually really
nice because it doesn't,

869
00:34:21,560 --> 00:34:24,770
it's not just they have to
visit it, in their web browser,

870
00:34:24,770 --> 00:34:27,020
they can visit a web page
that simply has an image in it

871
00:34:27,020 --> 00:34:28,600
that links to this URL.

872
00:34:28,600 --> 00:34:31,420
And it will completely,
that works completely fine,

873
00:34:31,420 --> 00:34:33,370
it will execute the script as them,

874
00:34:33,370 --> 00:34:36,123
just from an image that links to this.

875
00:34:37,400 --> 00:34:38,233
So the way that you do this

876
00:34:38,233 --> 00:34:41,010
is you just go to the Deploy
menu in your Apps Scripts,

877
00:34:41,010 --> 00:34:42,160
you do New Deployment,

878
00:34:42,160 --> 00:34:44,570
you do a deployment type of web app.

879
00:34:44,570 --> 00:34:47,389
And you simply say, "Hey,
when people hit this endpoint,

880
00:34:47,389 --> 00:34:50,900
I want to run as the user
who's accessing the web app

881
00:34:50,900 --> 00:34:52,413
and deploy it.

882
00:34:53,480 --> 00:34:55,530
When you do that, you get
this nice little URL back,

883
00:34:55,530 --> 00:34:56,840
and this is what you can basically do

884
00:34:56,840 --> 00:35:00,630
you can put this inside of
a image tag or something,

885
00:35:00,630 --> 00:35:02,203
or somehow get the victim to visit this

886
00:35:02,203 --> 00:35:04,030
in their web browser.

887
00:35:04,030 --> 00:35:05,850
And this will trigger this script

888
00:35:05,850 --> 00:35:07,300
to automatically run as them.

889
00:35:10,690 --> 00:35:13,630
So another useful technique
for lateral movement

890
00:35:13,630 --> 00:35:14,940
inside of a G Suite organization

891
00:35:14,940 --> 00:35:18,883
is enumerating and joining
open Google Groups.

892
00:35:20,090 --> 00:35:22,470
So to talk about Google Groups, right,

893
00:35:22,470 --> 00:35:27,020
Google Groups are used for
ACL and both Google Cloud

894
00:35:27,020 --> 00:35:28,078
in GCP/IAM settings

895
00:35:28,078 --> 00:35:32,220
and for a variety of G
Suite style services, right?

896
00:35:32,220 --> 00:35:34,340
So they're used extensively in ACL.

897
00:35:34,340 --> 00:35:36,810
But in addition to that,
they're by default,

898
00:35:36,810 --> 00:35:39,800
when you create a Google Group
instead of a G Suite org,

899
00:35:39,800 --> 00:35:42,910
they're openly joinable
by everybody internally.

900
00:35:42,910 --> 00:35:45,240
So by themselves, neither is an issue,

901
00:35:45,240 --> 00:35:46,970
but when you put them together,

902
00:35:46,970 --> 00:35:49,180
this is actually not so great, right.

903
00:35:49,180 --> 00:35:51,577
something that's used
extensively for ACL's

904
00:35:51,577 --> 00:35:55,680
being by default widely open and insecure.

905
00:35:55,680 --> 00:35:57,134
So anybody inside the company can join

906
00:35:57,134 --> 00:35:59,650
and basically grant the
permissions of this ACL

907
00:35:59,650 --> 00:36:01,090
just by joining your group.

908
00:36:01,090 --> 00:36:02,950
This is a being kind
of basically a factory

909
00:36:02,950 --> 00:36:05,430
for endless privilege escalation, right?

910
00:36:05,430 --> 00:36:07,290
So oftentimes searching
and joining Google Groups

911
00:36:07,290 --> 00:36:10,160
is a great way to just
escalate your privileges

912
00:36:10,160 --> 00:36:13,143
inside of a Google G Suite organization.

913
00:36:14,810 --> 00:36:16,570
So what all can be gated by Google Groups?

914
00:36:16,570 --> 00:36:17,900
So we mentioned Google Cloud

915
00:36:17,900 --> 00:36:19,590
and all the services under it, right?

916
00:36:19,590 --> 00:36:21,370
I've mentioned Google Cloud functions,

917
00:36:21,370 --> 00:36:23,479
but it's also stuff like Google Drive,

918
00:36:23,479 --> 00:36:26,898
Docs/Sheets, whatever
things like Google Calendar

919
00:36:26,898 --> 00:36:31,898
Data Studio and even G
Suite Admin ACL groups.

920
00:36:33,100 --> 00:36:34,590
And it could even use for stuff

921
00:36:34,590 --> 00:36:36,100
like publishing Chrome extensions.

922
00:36:36,100 --> 00:36:40,330
So most Google services have
some sort of ACL integration

923
00:36:40,330 --> 00:36:41,240
with Google Groups.

924
00:36:41,240 --> 00:36:44,033
So tons of places to
escalate your privileges.

925
00:36:45,630 --> 00:36:47,070
So talking about this
in the context of like,

926
00:36:47,070 --> 00:36:48,587
if you have an Apps Script implant,

927
00:36:48,587 --> 00:36:52,170
unfortunately modifying
Google Groups via Apps Script

928
00:36:52,170 --> 00:36:54,020
is not as easy as it sounds.

929
00:36:54,020 --> 00:36:54,853
For some reason,

930
00:36:54,853 --> 00:36:57,384
unlike all the other
sort of Google services,

931
00:36:57,384 --> 00:37:00,120
the Google Groups API is,

932
00:37:00,120 --> 00:37:02,010
which is known as the directory API

933
00:37:02,010 --> 00:37:04,500
it's restricted only to admins.

934
00:37:04,500 --> 00:37:08,660
So only G Suite admins can
actually utilize the API,

935
00:37:08,660 --> 00:37:10,210
but there is another API which is called

936
00:37:10,210 --> 00:37:13,450
the cloud identity API, and
that is available to all users.

937
00:37:13,450 --> 00:37:15,427
So your Apps Script implant
could make use of it.

938
00:37:15,427 --> 00:37:18,707
And this allows some access
to Google Groups via the API.

939
00:37:20,042 --> 00:37:21,230
So there's some stuff
that you can do with this

940
00:37:21,230 --> 00:37:22,930
is you can list all the Google Groups,

941
00:37:22,930 --> 00:37:24,330
they give an organization,

942
00:37:24,330 --> 00:37:26,920
you can list the members
of the Groups, their roles.

943
00:37:26,920 --> 00:37:30,130
And you can also, you can
create your own Google Groups.

944
00:37:30,130 --> 00:37:33,280
You can update them, delete
members, stuff like that.

945
00:37:33,280 --> 00:37:35,540
And you can manage stuff that you create.

946
00:37:35,540 --> 00:37:36,373
But unfortunately,

947
00:37:36,373 --> 00:37:38,060
the one thing you cannot do via this API,

948
00:37:38,060 --> 00:37:40,100
is you can't join an open Google Group,

949
00:37:40,100 --> 00:37:41,773
which is super unfortunate.

950
00:37:42,770 --> 00:37:43,710
But, if you did have that,

951
00:37:43,710 --> 00:37:48,380
if you did have a full level
access to the G Suite account,

952
00:37:48,380 --> 00:37:49,450
joining open Google Groups

953
00:37:49,450 --> 00:37:52,000
is a great way to sort of
escalate your privileges.

954
00:37:52,950 --> 00:37:55,750
So now we talked about
escalation, let's talk about,

955
00:37:55,750 --> 00:37:57,560
sort of stealth and persistence, right?

956
00:37:57,560 --> 00:37:58,950
When you get access to a victim,

957
00:37:58,950 --> 00:38:02,240
you don't want point in time,
you want persistent access,

958
00:38:02,240 --> 00:38:05,140
so you can keep fooling around
inside of the organization.

959
00:38:06,260 --> 00:38:08,890
We'll start off by talking
about some Gmail trickery.

960
00:38:08,890 --> 00:38:11,190
One things that recommend
with your Apps Script implant

961
00:38:11,190 --> 00:38:13,540
using your API access to Gmail

962
00:38:13,540 --> 00:38:16,240
is create filters in Gmail

963
00:38:16,240 --> 00:38:18,170
to essentially hide
security notifications.

964
00:38:18,170 --> 00:38:19,927
So things like the emails that say,

965
00:38:19,927 --> 00:38:24,021
"Hey, you just granted
access to a new Google App",

966
00:38:24,021 --> 00:38:25,630
those kinds of notifications,

967
00:38:25,630 --> 00:38:27,240
you can hide them from the user.

968
00:38:27,240 --> 00:38:28,550
You can also create a bunch of filters

969
00:38:28,550 --> 00:38:30,380
to hide password reset emails.

970
00:38:30,380 --> 00:38:31,498
So you can basically

971
00:38:31,498 --> 00:38:33,338
when somebody gets inbound
password reset email,

972
00:38:33,338 --> 00:38:36,133
you can hide it in either their trash

973
00:38:36,133 --> 00:38:39,060
or some other folder so
that they don't see it.

974
00:38:39,060 --> 00:38:40,450
And since people's email accounts

975
00:38:40,450 --> 00:38:43,270
tend to be the center
of all their security,

976
00:38:43,270 --> 00:38:45,268
you can then basically,

977
00:38:45,268 --> 00:38:48,240
later on, you can essentially do resets

978
00:38:48,240 --> 00:38:49,720
for all these sub-accounts,

979
00:38:49,720 --> 00:38:51,900
use the Apps Script to pull
the password reset email

980
00:38:51,900 --> 00:38:53,700
on them and thus get access to them.

981
00:38:54,700 --> 00:38:55,850
Unfortunately,

982
00:38:55,850 --> 00:38:59,340
when it comes to creating
an forwarding addresses

983
00:38:59,340 --> 00:39:02,300
and stuff like this in Gmail,
you can't do this via the API,

984
00:39:02,300 --> 00:39:03,330
but we will talk about

985
00:39:03,330 --> 00:39:05,590
if you have the full
access to their account,

986
00:39:05,590 --> 00:39:08,120
if you have the full UI access to Gmail,

987
00:39:08,120 --> 00:39:09,610
you can do something that's called

988
00:39:09,610 --> 00:39:11,430
adding a forwarding address.

989
00:39:11,430 --> 00:39:13,620
This is super useful
for persisting access.

990
00:39:13,620 --> 00:39:14,750
Essentially, the way that it works

991
00:39:14,750 --> 00:39:18,229
is you can set it so that
you have an external mailbox,

992
00:39:18,229 --> 00:39:21,477
something@yahoo.com or
whatever the external email is,

993
00:39:21,477 --> 00:39:23,390
and you can make it so that anything

994
00:39:23,390 --> 00:39:25,150
that matches a given filter,

995
00:39:25,150 --> 00:39:27,250
or even just every email they receive,

996
00:39:27,250 --> 00:39:29,590
a copy of that email will
automatically be sent

997
00:39:29,590 --> 00:39:31,670
to this other email box, right?

998
00:39:31,670 --> 00:39:34,010
So this way you can basically
get a copy of all their stuff

999
00:39:34,010 --> 00:39:35,330
that's coming in to them.

1000
00:39:35,330 --> 00:39:37,759
And you can set this to
either delete the email

1001
00:39:37,759 --> 00:39:42,630
or just make a copy and
not make any changes.

1002
00:39:42,630 --> 00:39:43,530
So this is a super good way

1003
00:39:43,530 --> 00:39:46,150
to sort of keep persistent
access to their stuff.

1004
00:39:46,150 --> 00:39:50,063
Even if you end up getting
revoked or ripped out later on.

1005
00:39:52,010 --> 00:39:53,000
So one of the things we talked about

1006
00:39:53,000 --> 00:39:55,220
with this historical campaign

1007
00:39:55,220 --> 00:39:58,084
where they used an app
name of Google Drive,

1008
00:39:58,084 --> 00:40:01,832
having a deceptive app
name is quite useful.

1009
00:40:01,832 --> 00:40:04,680
So you can tell that you can
see here in this little demo,

1010
00:40:04,680 --> 00:40:09,030
if I try to set my Apps Script
app name to Google Docs,

1011
00:40:09,030 --> 00:40:11,440
when you actually go to the
permission prompt there,

1012
00:40:11,440 --> 00:40:13,920
it shows it won't actually
do it for you, right.

1013
00:40:13,920 --> 00:40:17,660
It says it'll basically deny
us as still on type of project.

1014
00:40:17,660 --> 00:40:18,740
It won't send it to Google Doc,

1015
00:40:18,740 --> 00:40:20,470
because that's a misleading name.

1016
00:40:20,470 --> 00:40:22,300
It knows you're trying to
do something fishy there.

1017
00:40:22,300 --> 00:40:23,640
So essentially prevents you

1018
00:40:23,640 --> 00:40:25,423
from setting a app name like that.

1019
00:40:26,450 --> 00:40:30,730
But and if you look into some of the stuff

1020
00:40:30,730 --> 00:40:34,100
that they've implemented after
this Google Doc worm came out

1021
00:40:35,080 --> 00:40:36,310
all of the sort of like,

1022
00:40:36,310 --> 00:40:38,450
when they were doing the tricks
with the Unicode characters

1023
00:40:38,450 --> 00:40:41,520
to essentially get the same looking name,

1024
00:40:41,520 --> 00:40:43,380
to an official Google product,

1025
00:40:43,380 --> 00:40:44,680
all of that has been
pretty well stripped out.

1026
00:40:44,680 --> 00:40:46,890
they have a good system for preventing you

1027
00:40:46,890 --> 00:40:51,890
from setting G-Swedish O-O-G-L
Docs, all that's prevented.

1028
00:40:52,720 --> 00:40:55,850
None of the, no-width-space
tricks, any of that works.

1029
00:40:55,850 --> 00:40:57,251
But I did find that you can use

1030
00:40:57,251 --> 00:40:59,670
with the magic of what's called

1031
00:40:59,670 --> 00:41:01,520
the Right-to-Left Override character.

1032
00:41:02,440 --> 00:41:03,483
So for those of you that aren't familiar,

1033
00:41:03,483 --> 00:41:04,830
what this is,

1034
00:41:04,830 --> 00:41:07,000
it's a Unicode character
that you can paste in.

1035
00:41:07,000 --> 00:41:10,397
And when you paste it, all the
characters that come after it

1036
00:41:10,397 --> 00:41:12,560
end up getting put in reverse.

1037
00:41:12,560 --> 00:41:13,701
And so in this case, you can see,

1038
00:41:13,701 --> 00:41:15,830
I basically paste the character in

1039
00:41:15,830 --> 00:41:19,640
and I go on to type in
Google Docs backwards.

1040
00:41:19,640 --> 00:41:22,700
And because this is
reversed from right to left

1041
00:41:22,700 --> 00:41:23,720
instead of left to right.

1042
00:41:23,720 --> 00:41:27,160
It actually appears in the
prompt as Google Docs, right?

1043
00:41:27,160 --> 00:41:29,830
So we've completely bypassed
this protection by using this.

1044
00:41:29,830 --> 00:41:31,270
And when the user actually
goes to approve this,

1045
00:41:31,270 --> 00:41:33,450
they will just see a Google
Docs just as they did

1046
00:41:33,450 --> 00:41:36,053
with the initial sort of Google Docs worm.

1047
00:41:39,200 --> 00:41:40,220
So in our thing we wanna do

1048
00:41:40,220 --> 00:41:43,140
right is likely perpetual
Apps Script execution.

1049
00:41:43,140 --> 00:41:47,170
So we want our script to
continually have access

1050
00:41:47,170 --> 00:41:48,680
to their account, we don't just want like,

1051
00:41:48,680 --> 00:41:50,480
we authorize it, it runs once, that's it.

1052
00:41:50,480 --> 00:41:53,090
We wanna keep access, keep
persistence and keep around

1053
00:41:53,090 --> 00:41:56,853
so we can figure out what's
inside the org and do our thing.

1054
00:41:58,430 --> 00:41:59,970
So Apps Script has a
really useful feature,

1055
00:41:59,970 --> 00:42:02,700
which is time-based triggers
instead of cron-style stuff

1056
00:42:02,700 --> 00:42:03,697
that I mentioned earlier.

1057
00:42:03,697 --> 00:42:07,530
And this allows for background
execution on a schedule,

1058
00:42:07,530 --> 00:42:10,210
and this can be run as
often as every minute.

1059
00:42:10,210 --> 00:42:11,790
And it executes, of course,

1060
00:42:11,790 --> 00:42:14,110
as whatever user was running the script

1061
00:42:14,110 --> 00:42:16,500
that ended up programmatically
creating this trigger, right?

1062
00:42:16,500 --> 00:42:18,250
So you can see some example code here.

1063
00:42:18,250 --> 00:42:20,620
We've got ScriptaApp.newTrigger.

1064
00:42:20,620 --> 00:42:22,190
It creates one that runs every minute

1065
00:42:22,190 --> 00:42:25,130
and this we'll run our some function call

1066
00:42:25,130 --> 00:42:26,223
every minute or so.

1067
00:42:28,000 --> 00:42:30,620
Now, if you read the
documentation on this,

1068
00:42:30,620 --> 00:42:31,770
it says in order to do this

1069
00:42:31,770 --> 00:42:34,150
in order to run these background scripts,

1070
00:42:34,150 --> 00:42:35,900
you need to request the specific scope,

1071
00:42:35,900 --> 00:42:38,350
which is Script.ScriptApp.

1072
00:42:38,350 --> 00:42:40,940
And this will cause this little thing

1073
00:42:40,940 --> 00:42:42,307
to come up in your OAuth prompt that says,

1074
00:42:42,307 --> 00:42:43,900
"Hey, allow this application to run

1075
00:42:43,900 --> 00:42:44,733
when you're not present".

1076
00:42:44,733 --> 00:42:46,700
So it explicitly warns the user

1077
00:42:46,700 --> 00:42:48,790
that this is running in the background.

1078
00:42:48,790 --> 00:42:51,790
It will run continuously even
after you've approved it once.

1079
00:42:52,830 --> 00:42:56,644
So it turns out that this
is more of a suggestion

1080
00:42:56,644 --> 00:42:58,480
than it is a hard rule.

1081
00:42:58,480 --> 00:43:01,670
They say you need to do
this, but as it turns out,

1082
00:43:01,670 --> 00:43:03,660
it's more of a suggestion, really.

1083
00:43:03,660 --> 00:43:05,500
You could still create time
triggers programmatically

1084
00:43:05,500 --> 00:43:07,030
without declaring the scope.

1085
00:43:07,030 --> 00:43:10,150
And as long as you declare
some other scope of any type

1086
00:43:10,150 --> 00:43:12,670
Google Drive, Gmail, whatever it is,

1087
00:43:12,670 --> 00:43:14,190
as long as they authorize those,

1088
00:43:14,190 --> 00:43:16,270
you can programmatically create,
time triggers all you want,

1089
00:43:16,270 --> 00:43:18,873
and they'll execute it just fine.

1090
00:43:18,873 --> 00:43:22,770
So you can use those
to persist indefinitely

1091
00:43:22,770 --> 00:43:25,350
without any of the OAuth
warnings to the user.

1092
00:43:25,350 --> 00:43:28,053
So more of a guideline than a strict rule.

1093
00:43:30,510 --> 00:43:31,343
So great.

1094
00:43:31,343 --> 00:43:32,970
We've covered a variety of topics here

1095
00:43:32,970 --> 00:43:35,120
around how you can sort of do everything

1096
00:43:35,120 --> 00:43:37,450
from pierce the perimeter,
escalate privileges,

1097
00:43:37,450 --> 00:43:40,701
pivot around, persist and stuff like that.

1098
00:43:40,701 --> 00:43:43,570
So thank you all for taking
the time to see my talk

1099
00:43:43,570 --> 00:43:47,050
and be happy to answer any
questions that you have.

