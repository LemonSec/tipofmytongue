1
00:00:01,870 --> 00:00:04,550
- Hi everyone, my name is Paz Hameiri

2
00:00:04,550 --> 00:00:07,580
and I'll be talking about
the project I'm working on

3
00:00:07,580 --> 00:00:09,233
named Tempest Radio Station.

4
00:00:10,560 --> 00:00:13,020
First allow me to introduce myself.

5
00:00:13,020 --> 00:00:14,980
I've been developing hardware and software

6
00:00:14,980 --> 00:00:19,250
for more than 30 years and I'm
working as a system engineer

7
00:00:19,250 --> 00:00:20,583
for more than a decade.

8
00:00:21,420 --> 00:00:25,020
I started my professional
career very early.

9
00:00:25,020 --> 00:00:27,530
During my teen years, I cracked games

10
00:00:27,530 --> 00:00:29,860
and develop software tools.

11
00:00:29,860 --> 00:00:31,810
One of the software
tools that I've developed

12
00:00:31,810 --> 00:00:34,040
was called the Message Sticker.

13
00:00:34,040 --> 00:00:37,640
And during Defcon25, Inbar has showed code

14
00:00:37,640 --> 00:00:42,020
that he had coded to
deactivate the Message Sticker.

15
00:00:42,020 --> 00:00:46,147
He called his software
Unpazz and Undefpazz.

16
00:00:50,300 --> 00:00:52,760
Okay, so what is Tempest?

17
00:00:52,760 --> 00:00:57,400
Tempest is a US NSA specification
and NATO certification.

18
00:00:57,400 --> 00:01:01,880
The acronym refers to
information leakage from a system

19
00:01:01,880 --> 00:01:05,350
through unintentional radio
signals or audio signals

20
00:01:05,350 --> 00:01:07,213
or electrical signals and so on.

21
00:01:08,420 --> 00:01:11,550
In 1985, the researcher Will Van Eck

22
00:01:11,550 --> 00:01:15,190
published the first unclassified
analysis of the problem.

23
00:01:15,190 --> 00:01:19,340
He analyzed information
leakage from computer monitors,

24
00:01:19,340 --> 00:01:22,800
but government researchers
were already aware

25
00:01:22,800 --> 00:01:24,370
of the problem.

26
00:01:24,370 --> 00:01:29,370
The US army became aware
that the equipment the army

27
00:01:29,820 --> 00:01:34,820
is using during World War Two
was emitting unintentional

28
00:01:35,040 --> 00:01:37,050
electromagnetic waves.

29
00:01:37,050 --> 00:01:39,230
And that these electromagnetic waves,

30
00:01:39,230 --> 00:01:42,190
the unintentional electromagnetic
waves are carrying

31
00:01:42,190 --> 00:01:47,083
valuable data, classified
data out of the device.

32
00:01:48,170 --> 00:01:50,840
And since the '50s,

33
00:01:50,840 --> 00:01:54,750
the NSA is developing
specification and certification

34
00:01:54,750 --> 00:01:56,890
for classified devices

35
00:01:56,890 --> 00:02:01,700
in order to reduce these
unintentional emissions

36
00:02:02,610 --> 00:02:04,550
by grounding the equipment,

37
00:02:04,550 --> 00:02:06,170
shielding the equipment,

38
00:02:06,170 --> 00:02:10,373
separating different types
of data lines and so on.

39
00:02:13,790 --> 00:02:14,623
Okay.

40
00:02:14,623 --> 00:02:17,420
How did they ended up
doing that project name,

41
00:02:17,420 --> 00:02:18,803
Tempest Radio Station?

42
00:02:19,940 --> 00:02:23,300
Well, I read "TEMPEST@Home-Finding
Radio Frequency

43
00:02:23,300 --> 00:02:26,320
Side Channels" by Davidov Oldenburg.

44
00:02:26,320 --> 00:02:29,500
They wrote about their experiments

45
00:02:29,500 --> 00:02:32,790
transmitting electromagnetic
waves from a computer

46
00:02:32,790 --> 00:02:34,830
to a remote receiver,

47
00:02:34,830 --> 00:02:36,810
50 feet away,

48
00:02:36,810 --> 00:02:39,340
and they manipulated the GPU clock

49
00:02:39,340 --> 00:02:41,523
to control the transmission.

50
00:02:42,740 --> 00:02:46,750
And one of the most
important thing that I found

51
00:02:46,750 --> 00:02:51,750
in their work was, until then I thought

52
00:02:52,990 --> 00:02:57,540
or I guess that the
electromagnetic waves emission

53
00:02:57,540 --> 00:03:02,540
regulation tests are
preventing computers and cars

54
00:03:02,750 --> 00:03:05,523
from the emitting much
energy into the air.

55
00:03:06,440 --> 00:03:07,533
And I was wrong.

56
00:03:08,430 --> 00:03:11,670
Another thing I learned
from their work was the use

57
00:03:11,670 --> 00:03:16,260
of software-defined radio
receivers or SDRs receivers.

58
00:03:16,260 --> 00:03:19,750
These are cheap radio receivers.

59
00:03:19,750 --> 00:03:23,750
The most common radio receivers
of this type are generable

60
00:03:23,750 --> 00:03:28,750
from almost zero to two gigahertz
and they have really good

61
00:03:29,130 --> 00:03:30,340
reception quality.

62
00:03:30,340 --> 00:03:35,340
So I bought one and I study
the electromagnetic emissions

63
00:03:37,320 --> 00:03:39,173
generated by my laptop,

64
00:03:40,070 --> 00:03:44,690
and I got very interested by this work.

65
00:03:44,690 --> 00:03:49,690
And I started wondering,
what can I do with it?

66
00:03:50,070 --> 00:03:53,693
How far can I transmit
data using these emissions?

67
00:03:54,640 --> 00:03:57,340
And is it possible to
transmit audio in real time

68
00:03:58,220 --> 00:04:00,383
and above all how hard can it be?

69
00:04:01,730 --> 00:04:03,130
So to figure it out,

70
00:04:03,130 --> 00:04:07,840
I decided to start the
Tempest radio station project

71
00:04:07,840 --> 00:04:12,840
transmitting audio in real
time using these emissions

72
00:04:13,780 --> 00:04:16,743
and who knows how hard can it be?

73
00:04:20,890 --> 00:04:25,410
So first I have a project
then I need to define

74
00:04:25,410 --> 00:04:26,773
the project goals.

75
00:04:28,110 --> 00:04:30,530
The first goal was tunable frequency,

76
00:04:30,530 --> 00:04:33,660
and this is very important
because if there are a lot of

77
00:04:33,660 --> 00:04:36,390
computers in a single area,

78
00:04:36,390 --> 00:04:40,400
and I want to extract
data from one computer,

79
00:04:40,400 --> 00:04:42,543
I need to separate the data

80
00:04:42,543 --> 00:04:44,880
it is transmitting from the other.

81
00:04:44,880 --> 00:04:46,990
And perhaps I want to receive
more than one computer

82
00:04:46,990 --> 00:04:48,010
in the same area.

83
00:04:48,010 --> 00:04:52,613
So I need to have a dedicated
frequency per computer.

84
00:04:54,270 --> 00:04:56,360
Very similar to radio stations.

85
00:04:56,360 --> 00:04:59,863
Each radio station has its own frequency.

86
00:05:01,180 --> 00:05:06,180
And the second reason
for tunable frequency

87
00:05:06,710 --> 00:05:09,710
is that if you can choose the frequency,

88
00:05:09,710 --> 00:05:11,820
then you can find a quiet,

89
00:05:11,820 --> 00:05:13,230
relatively quiet

90
00:05:15,730 --> 00:05:19,000
frequency band with as little
interference as possible

91
00:05:19,000 --> 00:05:21,620
and transmit the data
in that frequency band

92
00:05:22,490 --> 00:05:25,460
and get a good signal to noise ratio,

93
00:05:25,460 --> 00:05:27,563
which is important for reception.

94
00:05:28,770 --> 00:05:31,840
Another goal for the probe
for the project was maximum

95
00:05:31,840 --> 00:05:34,273
bit rate to maximize the audio quality.

96
00:05:35,500 --> 00:05:38,320
The third goal was innocent
looking software to avoid

97
00:05:38,320 --> 00:05:43,320
detection for obvious reasons
and last but not least,

98
00:05:44,380 --> 00:05:46,883
trying to achieve maximum distance.

99
00:05:50,030 --> 00:05:50,863
Okay.

100
00:05:50,863 --> 00:05:53,690
So let's begin with the crash course

101
00:05:54,670 --> 00:05:57,593
about radio waves transmission.

102
00:05:58,600 --> 00:06:03,130
When you take a conductor
and you pass time-varying

103
00:06:03,130 --> 00:06:04,330
electric current through it,

104
00:06:04,330 --> 00:06:09,030
it will emit electromagnetic
radiation that will propagate

105
00:06:09,030 --> 00:06:11,540
from it to space

106
00:06:12,990 --> 00:06:17,534
and reception works the other way around,

107
00:06:17,534 --> 00:06:20,580
if an electromagnetic radiation
is close to a conductor,

108
00:06:20,580 --> 00:06:25,580
it will generate time varying
electric current in it.

109
00:06:26,430 --> 00:06:27,880
And this is the transmission

110
00:06:27,880 --> 00:06:31,383
and reception of electromagnetic
waves in a nut shell.

111
00:06:32,480 --> 00:06:34,863
This could be done with any conductor,

112
00:06:36,307 --> 00:06:40,570
it could either be wires
or for this project,

113
00:06:40,570 --> 00:06:43,620
PCB traces, PCB is the
printed circuit boards

114
00:06:43,620 --> 00:06:47,573
that carry the electric
components inside the computers.

115
00:06:48,410 --> 00:06:53,410
Traces are the fine wires within the PCB

116
00:06:53,750 --> 00:06:55,670
that connect between the terminals

117
00:06:55,670 --> 00:06:57,803
of the electrical components.

118
00:06:59,130 --> 00:07:02,533
And that's radio waves crash course.

119
00:07:04,210 --> 00:07:08,680
Another important thing to
understand about broadcasting

120
00:07:08,680 --> 00:07:10,170
is modulation.

121
00:07:10,170 --> 00:07:15,170
Modulation is the manipulation that we do

122
00:07:15,190 --> 00:07:20,190
on the carrier wave, the
expanding electromagnetic waves

123
00:07:21,510 --> 00:07:25,323
in order to make it carry the
data that we wanted to carry.

124
00:07:27,290 --> 00:07:30,170
Most of you probably heard
about amplitude modulation

125
00:07:30,170 --> 00:07:31,630
and frequency modulation,

126
00:07:31,630 --> 00:07:36,313
which are the two common methods
used by commercial radio.

127
00:07:37,580 --> 00:07:39,600
But there other types of population,

128
00:07:39,600 --> 00:07:42,823
the most simple type of
modulation is the On-Off Keying,

129
00:07:45,000 --> 00:07:47,675
you have an energy source,

130
00:07:47,675 --> 00:07:49,580
you turn it on it emits
energy, you turn it off,

131
00:07:49,580 --> 00:07:51,500
stops emitting energy,

132
00:07:51,500 --> 00:07:55,630
and you can put the
data or encode the data

133
00:07:55,630 --> 00:07:57,363
in the duration of the purse.

134
00:07:58,330 --> 00:08:03,330
And if the transmitter and
receiver has the same protocol,

135
00:08:03,400 --> 00:08:07,380
then they can pass the
data from one to another.

136
00:08:07,380 --> 00:08:12,380
The most common and known
On-Off Keying modulation use

137
00:08:13,490 --> 00:08:15,550
is Morse code.

138
00:08:15,550 --> 00:08:18,900
Morse code has only two
symbols, short pulse

139
00:08:18,900 --> 00:08:23,730
and the long pulse and
you use those two symbols

140
00:08:23,730 --> 00:08:26,370
to transmit the whole alphabet, words,

141
00:08:26,370 --> 00:08:27,983
sentences and so on.

142
00:08:31,820 --> 00:08:32,653
Okay.

143
00:08:32,653 --> 00:08:35,650
So we understand that
we can turn PCB traces

144
00:08:35,650 --> 00:08:40,650
in the computers into a
electromagnetic waves generators.

145
00:08:42,270 --> 00:08:47,270
And we know that if we can take a line

146
00:08:48,023 --> 00:08:53,023
and make it emit energy at our will

147
00:08:54,390 --> 00:08:55,500
and control the duration,

148
00:08:55,500 --> 00:08:59,600
and stop the line from
emitting energy at our will.

149
00:08:59,600 --> 00:09:03,640
Then we have On-Off Keying modulation.

150
00:09:03,640 --> 00:09:05,793
Now we need to have such a signal.

151
00:09:06,990 --> 00:09:07,823
Okay.

152
00:09:07,823 --> 00:09:12,560
So the signals I decided
to use where the signals

153
00:09:14,430 --> 00:09:16,715
between the GPU and the GDDR,

154
00:09:16,715 --> 00:09:19,570
the GDDR is the memory
installed in the graphic cards

155
00:09:20,500 --> 00:09:23,500
and the GPU perform memory
read and write operations

156
00:09:23,500 --> 00:09:26,673
by operating the control
and data lines of the GDDR,

157
00:09:27,890 --> 00:09:30,670
here you can see in this slide,

158
00:09:30,670 --> 00:09:35,670
a tiny diagram of GDDR6 which
is a common memory type list.

159
00:09:39,906 --> 00:09:44,906
And there are four major lines
that the GPU is operating.

160
00:09:45,440 --> 00:09:50,440
The two signals in the
upper side of the graph,

161
00:09:50,620 --> 00:09:54,343
are CK and CA, CA is
the commanding signal.

162
00:09:57,849 --> 00:09:59,350
And the GPU use the commanding signals

163
00:09:59,350 --> 00:10:01,720
to command the memory
to do a right operation

164
00:10:01,720 --> 00:10:03,420
or a read operation.

165
00:10:03,420 --> 00:10:07,570
And CK is the clock of CA it helps the GPU

166
00:10:07,570 --> 00:10:10,123
to command the memory.

167
00:10:11,980 --> 00:10:15,630
Similar to that the two lower signals,

168
00:10:15,630 --> 00:10:18,990
the data signal carries the data itself.

169
00:10:18,990 --> 00:10:20,653
And WCK is the clock of the data.

170
00:10:22,310 --> 00:10:25,590
Whenever the GPU is
performing a write operation

171
00:10:25,590 --> 00:10:27,530
or a read operation,

172
00:10:27,530 --> 00:10:31,120
it operates these lines when
it is not performing a read

173
00:10:31,120 --> 00:10:35,530
or write operation, it is
not operating these lines.

174
00:10:35,530 --> 00:10:38,920
And this is the key to the On-Off Keying,

175
00:10:38,920 --> 00:10:42,630
meaning that when we want
to transmit the symbol,

176
00:10:42,630 --> 00:10:45,920
we start a memory read and write.

177
00:10:45,920 --> 00:10:50,920
And ration of the operation
is predefined by us.

178
00:10:51,490 --> 00:10:55,603
And when it ends, the energy
stopped being transmitted.

179
00:10:58,380 --> 00:11:00,873
Okay, let's talk about
the duration of the pulse.

180
00:11:02,280 --> 00:11:04,830
The electromagnetic
radiation, as I explained,

181
00:11:04,830 --> 00:11:07,760
is submitted when the control
and data lines are active,

182
00:11:07,760 --> 00:11:10,190
it is not emitted when it is not active.

183
00:11:10,190 --> 00:11:13,070
So we need now to control the duration.

184
00:11:13,070 --> 00:11:18,070
There is almost linear
connection between the time

185
00:11:18,200 --> 00:11:20,880
it takes to write a batch of bytes

186
00:11:22,494 --> 00:11:23,327
and the size of the batch

187
00:11:23,327 --> 00:11:24,160
of the bytes.

188
00:11:25,898 --> 00:11:28,270
So if we have a small
volume of bytes to write,

189
00:11:28,270 --> 00:11:30,010
it will be a short operation.

190
00:11:30,010 --> 00:11:35,010
If we have big volume of bytes to write,

191
00:11:35,430 --> 00:11:39,050
then it will be a very
long writing operation.

192
00:11:39,050 --> 00:11:41,603
And that's the key to
control the symbol length.

193
00:11:44,710 --> 00:11:48,003
Whenever we are performing
a memory transfer,

194
00:11:49,677 --> 00:11:51,890
a symbol will be transmitted,

195
00:11:51,890 --> 00:11:56,890
and the duration is predefined
by the amount of bytes

196
00:11:56,970 --> 00:12:00,080
that are going to be read than written

197
00:12:01,560 --> 00:12:02,913
during the memory transfer.

198
00:12:06,990 --> 00:12:07,990
As I explained,

199
00:12:07,990 --> 00:12:11,190
the connection between similar duration

200
00:12:11,190 --> 00:12:13,690
and similar bite count is almost linear.

201
00:12:13,690 --> 00:12:18,690
This is because the GPU
hardware is using dedicated

202
00:12:19,420 --> 00:12:23,170
hardware to perform a
large memory transfers.

203
00:12:23,170 --> 00:12:27,693
And this dedicated hardware
is time deterministic.

204
00:12:28,790 --> 00:12:33,100
So to define the On-Off Keying protocol

205
00:12:33,100 --> 00:12:35,590
between the transmitter and the receiver,

206
00:12:35,590 --> 00:12:40,590
I need to predefine to
both what is a symbol.

207
00:12:41,870 --> 00:12:44,680
And I define the symbols
in the following manner.

208
00:12:44,680 --> 00:12:49,480
The symbol duration equals
two symbol value plus one

209
00:12:49,480 --> 00:12:53,090
multiplied by a time constant
that both the transmitter

210
00:12:53,090 --> 00:12:56,190
and the receiver know in advance,

211
00:12:56,190 --> 00:13:00,720
the plus one helps me
to avoid a zero duration

212
00:13:00,720 --> 00:13:03,123
if I have a zero symbol value.

213
00:13:05,790 --> 00:13:10,220
In order to transmit these symbols,

214
00:13:10,220 --> 00:13:15,220
I need to transfer a
known amount of bytes.

215
00:13:15,900 --> 00:13:18,570
So the symbol transfer size,

216
00:13:18,570 --> 00:13:20,520
which is relative to the symbol duration

217
00:13:20,520 --> 00:13:25,140
equals symbol value plus one
multiplied by a bytes constant.

218
00:13:25,140 --> 00:13:26,310
And as I explain,

219
00:13:26,310 --> 00:13:28,910
there is a linear relationship
between the time constant

220
00:13:28,910 --> 00:13:30,550
and the byte constant.

221
00:13:30,550 --> 00:13:34,180
So if I do a very large memory transfer

222
00:13:34,180 --> 00:13:37,423
measure the time it takes
to perform the transfer,

223
00:13:38,690 --> 00:13:42,440
then I get the ratio
between bytes constant

224
00:13:42,440 --> 00:13:43,733
and time constant.

225
00:13:45,420 --> 00:13:47,443
And that's the whole story.

226
00:13:50,419 --> 00:13:52,093
Here you can see it graphically,

227
00:13:53,480 --> 00:13:56,120
in the upper graph you see
the energy being emitted

228
00:13:56,120 --> 00:13:58,790
for three different symbols,

229
00:13:58,790 --> 00:14:02,330
in the lower graph you
can see the relation

230
00:14:02,330 --> 00:14:07,330
between the calculation I showed you

231
00:14:08,831 --> 00:14:13,831
in the last slide and the
amount of time it takes

232
00:14:14,910 --> 00:14:16,650
to transmit each symbol.

233
00:14:16,650 --> 00:14:17,660
Here, you can see, for example,

234
00:14:17,660 --> 00:14:20,610
the symbol value five, you
add one to it you get six,

235
00:14:20,610 --> 00:14:22,110
six multiplied by time constant.

236
00:14:22,110 --> 00:14:24,020
And this is the size of the symbol.

237
00:14:24,020 --> 00:14:25,890
Again, you can see it
for a symbol value three

238
00:14:25,890 --> 00:14:27,173
and symbol value eight.

239
00:14:31,260 --> 00:14:33,783
Why using the GDDR memory.

240
00:14:35,710 --> 00:14:37,620
When I chose the GDDR memory,

241
00:14:37,620 --> 00:14:42,120
I had good reasons
following the project goals,

242
00:14:42,120 --> 00:14:43,540
the first and most important

243
00:14:43,540 --> 00:14:46,453
was that it has tunable frequency.

244
00:14:48,022 --> 00:14:49,320
You can set the memory,

245
00:14:49,320 --> 00:14:54,320
the GDDR memory frequency
by APIs that are available.

246
00:14:56,240 --> 00:14:59,213
It's very easy to do so and I did it.

247
00:15:00,260 --> 00:15:03,510
The second thing was because the hardware

248
00:15:03,510 --> 00:15:08,060
is very time deterministic
and it helped me

249
00:15:08,979 --> 00:15:11,163
build solid, good symbols,

250
00:15:13,220 --> 00:15:15,210
which are transmitted and then received

251
00:15:15,210 --> 00:15:17,960
and because it is very time deterministic

252
00:15:17,960 --> 00:15:21,170
I can get the same results
over and over offer

253
00:15:21,170 --> 00:15:24,033
on different computers
and different hardware.

254
00:15:25,640 --> 00:15:28,520
And most of the time,

255
00:15:28,520 --> 00:15:32,660
the GPU is idle because when
it's not in use it's idle.

256
00:15:32,660 --> 00:15:35,330
And when it is idle is not doing anything

257
00:15:35,330 --> 00:15:39,650
and it's a free resource,
then why not use it?

258
00:15:39,650 --> 00:15:41,743
So I used it.

259
00:15:45,570 --> 00:15:46,940
This is Scotty.

260
00:15:46,940 --> 00:15:50,030
Scotty is the transmission software

261
00:15:51,600 --> 00:15:53,160
it is installed in the stolen the computer

262
00:15:53,160 --> 00:15:56,853
that is broadcasting the data, the audio,

263
00:15:58,210 --> 00:16:01,990
on the top left, you see a GPU list.

264
00:16:01,990 --> 00:16:04,870
And here you select the
GPU that you want to use,

265
00:16:04,870 --> 00:16:09,790
the graphical card that you
want, the graphics card, sorry.

266
00:16:09,790 --> 00:16:12,200
And below that you have two check boxes

267
00:16:12,200 --> 00:16:14,380
to start the transmission.

268
00:16:14,380 --> 00:16:16,160
The first one is for intelligence testing

269
00:16:16,160 --> 00:16:18,910
and the other one is
to transmit the Wi-Fi.

270
00:16:18,910 --> 00:16:22,680
The name of the Wi-Fi is
written in the line down

271
00:16:22,680 --> 00:16:27,680
below and to the right of GPU
list you see memory clock.

272
00:16:28,040 --> 00:16:30,943
This is WCK, the data memory clock.

273
00:16:32,290 --> 00:16:35,400
To its right you can see a
divided value and the data value,

274
00:16:35,400 --> 00:16:37,723
the data value is the value of the data

275
00:16:37,723 --> 00:16:39,703
that is being written in the memory.

276
00:16:40,610 --> 00:16:42,320
And you can see memory based clock.

277
00:16:42,320 --> 00:16:44,640
This is CA the command clock,

278
00:16:44,640 --> 00:16:46,730
the relationship between the memory clock

279
00:16:46,730 --> 00:16:50,810
and the base clock is in this case four.

280
00:16:50,810 --> 00:16:55,810
And the values here are
relative to each graphic card.

281
00:16:57,820 --> 00:17:02,820
The graphic card can tell
you the type of memory

282
00:17:04,050 --> 00:17:07,010
that it is installed
inside the graphic card.

283
00:17:07,010 --> 00:17:09,930
Then from the parameters, it gives you,

284
00:17:09,930 --> 00:17:11,773
you can get these numbers,

285
00:17:14,360 --> 00:17:17,063
below memory clock you
see base clock shift.

286
00:17:18,567 --> 00:17:21,990
This is the way that I'm
moving the base clock

287
00:17:23,690 --> 00:17:25,700
and tuning the base clock

288
00:17:26,700 --> 00:17:28,740
to its right you can see a shift frequency

289
00:17:28,740 --> 00:17:33,490
checkbox that command the
Scotty to perform the frequency

290
00:17:33,490 --> 00:17:37,560
shifts and to its right you
can see the center frequency.

291
00:17:37,560 --> 00:17:42,170
This is the frequency that
Scotty is calculating by adding

292
00:17:42,170 --> 00:17:46,800
the memory based clock
to base clock shift.

293
00:17:46,800 --> 00:17:48,423
And this is the result,

294
00:17:49,360 --> 00:17:53,000
more important is the indicator below it,

295
00:17:53,000 --> 00:17:56,200
which is called measured
transmission frequency,

296
00:17:56,200 --> 00:17:59,220
because this is the transmission frequency

297
00:17:59,220 --> 00:18:01,340
that the GPU is measuring.

298
00:18:01,340 --> 00:18:05,173
And this is the actual frequency
that is carrying the data.

299
00:18:07,577 --> 00:18:12,400
Below base clock shift you
see two bit rate indicators,

300
00:18:12,400 --> 00:18:16,020
the lower one data bit rate

301
00:18:16,020 --> 00:18:20,290
is showing you the data bit
rate, but only the data.

302
00:18:20,290 --> 00:18:25,040
This is the pure data bit
rate and the raw bit rate

303
00:18:25,040 --> 00:18:29,223
equals to the data bit
rate plus additional bits

304
00:18:30,870 --> 00:18:35,870
that are used for control and monitoring

305
00:18:37,800 --> 00:18:39,503
to build a data packet.

306
00:18:41,220 --> 00:18:44,440
The last indicator is data
transmitted in percentage

307
00:18:44,440 --> 00:18:47,190
which is the percentage of the data

308
00:18:47,190 --> 00:18:49,313
that was transmitted from the Wi-Fi.

309
00:18:53,500 --> 00:18:54,333
Okay.

310
00:18:54,333 --> 00:18:56,523
So what does Scotty do?

311
00:18:58,910 --> 00:19:01,310
Scotty is doing the foreign tests,

312
00:19:01,310 --> 00:19:03,150
it's measuring the time required

313
00:19:03,150 --> 00:19:06,220
to perform loud GPU memory transfers.

314
00:19:06,220 --> 00:19:09,100
It is calculating the bytes constant

315
00:19:09,100 --> 00:19:11,130
for a predefined time constant,

316
00:19:11,130 --> 00:19:16,083
which is predefined for both
transmitter and receiver.

317
00:19:17,100 --> 00:19:19,913
It is setting the GDDR
memory clock frequency,

318
00:19:21,324 --> 00:19:23,270
or broadcasting frequency,

319
00:19:23,270 --> 00:19:27,650
and it is loading a wave file
and transmitting 8,000 audio

320
00:19:27,650 --> 00:19:29,473
PCM samples every second.

321
00:19:30,830 --> 00:19:35,250
I targeted the CK clock,

322
00:19:35,250 --> 00:19:40,250
the command clock as my
main broadcasting frequency.

323
00:19:40,990 --> 00:19:43,270
And this is why I'm referring to setting

324
00:19:43,270 --> 00:19:46,180
GDDR memory clock frequency as setting

325
00:19:46,180 --> 00:19:47,543
the transmission frequency.

326
00:19:51,160 --> 00:19:51,993
Okay,

327
00:19:51,993 --> 00:19:55,540
so we have the wave file
and it is broken by Scotty

328
00:19:55,540 --> 00:20:00,021
every second to a thousand
audio PCM samples.

329
00:20:00,021 --> 00:20:05,021
And then it is transmitting
the 8,000 audio PCM samples

330
00:20:07,010 --> 00:20:08,593
in one second intervals.

331
00:20:09,440 --> 00:20:13,940
And first it is encoding
the 8,000 audio PCM samples.

332
00:20:13,940 --> 00:20:16,550
Then it is bundling the data into packets,

333
00:20:16,550 --> 00:20:19,463
according to protocol
to a protocol, sorry,

334
00:20:21,390 --> 00:20:24,520
and the protocol comprises header bytes,

335
00:20:24,520 --> 00:20:27,240
Read-Solomon forward error
correction parity bytes

336
00:20:27,240 --> 00:20:32,240
to for error-correction
recovery at the receiver,

337
00:20:34,680 --> 00:20:36,940
audio packets counter to
count how many packets

338
00:20:36,940 --> 00:20:41,940
were already sent and
G.726 encoded audio bytes.

339
00:20:42,270 --> 00:20:46,300
This is the real payload and
audio data checksum bytes

340
00:20:46,300 --> 00:20:50,553
to see that the data is
valid at the receiver.

341
00:20:53,990 --> 00:20:58,920
Scotty is transmitting each
packet symbol by symbol,

342
00:20:58,920 --> 00:21:01,520
and when all 8,000 samples
have been transmitted,

343
00:21:01,520 --> 00:21:05,260
the software stops and waits
for the one second interval

344
00:21:05,260 --> 00:21:06,153
to elapse.

345
00:21:09,970 --> 00:21:10,803
Okay.

346
00:21:10,803 --> 00:21:15,077
So Scotty is now transmitting
the data to free space

347
00:21:17,844 --> 00:21:22,844
and the electromagnetic waves
are propagating in the area.

348
00:21:24,970 --> 00:21:29,970
And the reason why we'll
talk now about the radio path

349
00:21:32,060 --> 00:21:32,953
or the wave path.

350
00:21:35,210 --> 00:21:38,213
Scotty is transmitting the
data from the computer,

351
00:21:39,258 --> 00:21:40,243
which is seen on the left,

352
00:21:41,870 --> 00:21:45,130
to the right side of the graph
you can see of the chart.

353
00:21:45,130 --> 00:21:48,350
You can see the reception equipment,

354
00:21:48,350 --> 00:21:53,350
which comprises an antenna that
converts the electromagnetic

355
00:21:53,500 --> 00:21:55,753
waves to time varying current.

356
00:21:57,670 --> 00:21:59,860
After that you can see LNA is amplified

357
00:21:59,860 --> 00:22:02,600
that amplifies these weak signals,

358
00:22:02,600 --> 00:22:07,600
and then an SDR receiver that
receive the signals samples

359
00:22:07,730 --> 00:22:12,730
the signals and passes the
samples to a reception computer

360
00:22:14,980 --> 00:22:16,810
that runs a software named Spock

361
00:22:16,810 --> 00:22:20,513
that is extracting the
data from the signals.

362
00:22:21,600 --> 00:22:23,330
In the middle you can see a photograph

363
00:22:23,330 --> 00:22:25,153
of this reception equipment.

364
00:22:30,740 --> 00:22:35,740
Hear you you can see how CK, the wave,

365
00:22:37,380 --> 00:22:41,840
the electromagnetic waves
that are emitted from the CK

366
00:22:41,840 --> 00:22:45,430
PCB traces is received 50 feet away

367
00:22:45,430 --> 00:22:47,810
from the source computer.

368
00:22:47,810 --> 00:22:52,413
You see here, power versus frequency band,

369
00:22:55,570 --> 00:23:00,570
and you should expect
for a fixed frequency,

370
00:23:01,490 --> 00:23:02,630
fixed clock frequent

371
00:23:05,160 --> 00:23:09,200
to see all the energy concentrated
on a single frequency,

372
00:23:09,200 --> 00:23:13,080
the clock frequency,
as you can understand,

373
00:23:13,080 --> 00:23:14,593
this is not the case.

374
00:23:16,210 --> 00:23:21,120
The manufacturers are shifting the clock

375
00:23:24,240 --> 00:23:27,633
in small portions up
and down, up and down.

376
00:23:29,800 --> 00:23:32,100
And in this graph,

377
00:23:32,100 --> 00:23:36,313
it would be right and
left, right and left,

378
00:23:37,960 --> 00:23:42,560
and they are doing so to
reduce the average power

379
00:23:42,560 --> 00:23:43,683
per frequency.

380
00:23:44,790 --> 00:23:45,903
And why is that?

381
00:23:48,440 --> 00:23:51,670
Both cars manufacturers
and computer manufacturers

382
00:23:51,670 --> 00:23:56,633
has to pass electromagnetic
waves, emission tests.

383
00:24:00,073 --> 00:24:01,070
These emission tests are required

384
00:24:01,070 --> 00:24:04,283
to get a regulation approval.

385
00:24:05,370 --> 00:24:08,250
And if all of the energy
would have been concentrated

386
00:24:08,250 --> 00:24:13,250
on a single frequency, they
might not pass the test.

387
00:24:14,636 --> 00:24:17,240
The power might be too large

388
00:24:19,320 --> 00:24:22,360
and pass the threshold of the test

389
00:24:22,360 --> 00:24:25,283
and the car or the computer
will fail the test.

390
00:24:28,036 --> 00:24:31,730
To better prepare for these tests

391
00:24:31,730 --> 00:24:35,810
the manufacturer are spreading
the energy on a small

392
00:24:35,810 --> 00:24:36,793
frequency event,

393
00:24:37,740 --> 00:24:40,640
and this way they are lowering the average

394
00:24:40,640 --> 00:24:42,810
power period frequency.

395
00:24:42,810 --> 00:24:44,560
And by this method,

396
00:24:44,560 --> 00:24:47,580
they are improving the chances

397
00:24:47,580 --> 00:24:51,110
of passing the regulation tests.

398
00:24:51,110 --> 00:24:53,463
And this is why the signal
looks the way it is.

399
00:24:56,670 --> 00:24:57,503
Okay.

400
00:24:57,503 --> 00:24:59,150
So we spoke about Scotty.

401
00:24:59,150 --> 00:25:00,723
Now let's speak about Spock.

402
00:25:02,540 --> 00:25:07,260
Here you can see the screen of
Spock, on the left top side,

403
00:25:07,260 --> 00:25:09,060
you can see the SDRs list.

404
00:25:09,060 --> 00:25:12,860
These are these as the receivers
available on the computer

405
00:25:13,870 --> 00:25:17,032
and below that you can
see center frequency,

406
00:25:17,032 --> 00:25:20,640
which is the frequency that
you need to set to receive

407
00:25:20,640 --> 00:25:25,320
the data, below that you
can see to gain controls.

408
00:25:25,320 --> 00:25:29,780
They are used to set the system
game, the SDR system game,

409
00:25:29,780 --> 00:25:32,890
and to get the best result you need to

410
00:25:32,890 --> 00:25:34,170
tune all three of them,

411
00:25:34,170 --> 00:25:37,120
the center frequency, the gain
reduction and the LNA state.

412
00:25:38,520 --> 00:25:41,240
Once you set the frequency
and the system gang,

413
00:25:41,240 --> 00:25:42,950
and you get good reception,

414
00:25:42,950 --> 00:25:46,330
all you need to do is to check
the play audio checkbox below

415
00:25:46,330 --> 00:25:49,413
the system gain and hear the audio.

416
00:25:50,970 --> 00:25:54,230
In the middle portion of the screen,

417
00:25:54,230 --> 00:25:57,243
you see the sample versus time graph.

418
00:25:59,210 --> 00:26:01,170
Here you can see the wave forms.

419
00:26:01,170 --> 00:26:05,950
The samples are creating wave forms.

420
00:26:05,950 --> 00:26:08,430
And here you can see two symbols

421
00:26:09,410 --> 00:26:14,110
and shape of the wave
forms is highly influenced

422
00:26:14,110 --> 00:26:17,500
by this breathing technique
I explained earlier,

423
00:26:17,500 --> 00:26:20,370
the spread spectrum club generation,

424
00:26:20,370 --> 00:26:23,110
that shifts the clock up and down

425
00:26:23,110 --> 00:26:24,703
or the graph right and left.

426
00:26:25,790 --> 00:26:29,713
And this is how it looks like overtime.

427
00:26:31,410 --> 00:26:33,430
Below that you can see three check boxes

428
00:26:33,430 --> 00:26:34,790
are used for debugging.

429
00:26:34,790 --> 00:26:37,310
The most important of
them is the clear numbers

430
00:26:37,310 --> 00:26:40,430
on the right, because it
is clearing the statistics

431
00:26:40,430 --> 00:26:41,960
on the right.

432
00:26:41,960 --> 00:26:44,470
And on the right side of the screen,

433
00:26:44,470 --> 00:26:47,840
you can see all sorts of information,

434
00:26:47,840 --> 00:26:52,710
which helped me develop the
software and analyze the quality

435
00:26:52,710 --> 00:26:54,240
of the reception.

436
00:26:54,240 --> 00:26:57,110
You can see how many
samples are for iteration,

437
00:26:57,110 --> 00:26:59,133
how many good packets were received,

438
00:27:00,067 --> 00:27:03,669
last packets that are lost
and the good packets ratio,

439
00:27:03,669 --> 00:27:05,880
which is important because
it is indicating the quality

440
00:27:05,880 --> 00:27:10,253
of the reception and other types of data.

441
00:27:13,730 --> 00:27:14,690
Okay.

442
00:27:14,690 --> 00:27:16,293
What is Spock doing?

443
00:27:17,700 --> 00:27:19,373
Well, it is doing a lot.

444
00:27:21,298 --> 00:27:24,980
Spoke is doing two batches of tasks.

445
00:27:24,980 --> 00:27:29,427
The first batch of task is
dealing with the samples,

446
00:27:31,510 --> 00:27:35,800
the raw samples that are
being picked up from the air

447
00:27:35,800 --> 00:27:38,500
and analyzing and processing these signals

448
00:27:38,500 --> 00:27:42,343
and getting the symbols
out of the samples.

449
00:27:43,180 --> 00:27:47,710
And the second batch of tasks
is working with the symbols

450
00:27:47,710 --> 00:27:49,710
to recover the data.

451
00:27:49,710 --> 00:27:52,373
So let's speak about the
first batch of tasks.

452
00:27:54,070 --> 00:27:56,610
Spock is setting up the SDR receiver.

453
00:27:56,610 --> 00:27:58,790
It is receiving psychic batches of samples

454
00:27:58,790 --> 00:28:00,640
from the SDR receiver.

455
00:28:00,640 --> 00:28:03,750
It is calculating the absolute
amplitude of the samples.

456
00:28:03,750 --> 00:28:04,730
Don't be intimidated.

457
00:28:04,730 --> 00:28:08,513
There's a graph in the next
slide explaining better,

458
00:28:09,430 --> 00:28:12,954
and it is filtering the data
with the low pass filter.

459
00:28:12,954 --> 00:28:14,940
It is calculating the amplitude threshold

460
00:28:14,940 --> 00:28:16,500
to recover the symbols.

461
00:28:16,500 --> 00:28:20,230
And it is recovering the
symbols using all of this data.

462
00:28:20,230 --> 00:28:23,190
And it saves the length of each symbol,

463
00:28:23,190 --> 00:28:25,473
the duration of each symbol in a buffer.

464
00:28:28,500 --> 00:28:29,830
You can see it in the graph,

465
00:28:29,830 --> 00:28:31,723
and I hope it will be much clearer.

466
00:28:35,160 --> 00:28:39,323
At the top graph we see the
absolute value of the samples,

467
00:28:40,260 --> 00:28:45,260
and you can see the symbols
here, power versus time.

468
00:28:46,400 --> 00:28:47,720
And in the middle graph,

469
00:28:47,720 --> 00:28:52,720
you see the filtered value
and it looks much more like

470
00:28:52,970 --> 00:28:55,050
digital data.

471
00:28:55,050 --> 00:28:58,590
And in the lower graph,
you see the digitized data,

472
00:28:58,590 --> 00:29:00,103
the recovered symbols.

473
00:29:04,090 --> 00:29:05,400
As I spoke earlier,

474
00:29:05,400 --> 00:29:07,940
Spoke is doing two batches of tasks.

475
00:29:07,940 --> 00:29:09,270
This is the second batch.

476
00:29:09,270 --> 00:29:12,680
Now that it has the
duration of each symbol,

477
00:29:12,680 --> 00:29:15,040
it has the symbol value.

478
00:29:15,040 --> 00:29:18,813
So it is looking for the header
bytes, the header symbols,

479
00:29:20,450 --> 00:29:21,440
if you recall,

480
00:29:21,440 --> 00:29:23,700
each packet starts with header bytes

481
00:29:23,700 --> 00:29:25,690
and when you have the symbols,

482
00:29:25,690 --> 00:29:27,363
it starts with header symbols.

483
00:29:28,790 --> 00:29:30,920
Once it found the header symbol,

484
00:29:30,920 --> 00:29:32,853
it can recover the packet.

485
00:29:33,806 --> 00:29:36,700
So it is recovering the data
packet from the symbols,

486
00:29:36,700 --> 00:29:39,340
and then it is using for error correction,

487
00:29:39,340 --> 00:29:44,340
the coding to correct
errors in the data, if any,

488
00:29:45,190 --> 00:29:48,240
and afterwards it's
verifying packet validity.

489
00:29:48,240 --> 00:29:52,410
If the packet is valid, then
it is decoding the audio

490
00:29:52,410 --> 00:29:55,690
using a G.726 decoder.

491
00:29:55,690 --> 00:29:58,783
And it is storing the
PCN samples in a buffer.

492
00:29:59,620 --> 00:30:02,120
If there are any missing
packets, lost packets,

493
00:30:02,120 --> 00:30:07,110
it is filling the PCM
samples a buffer with zeros,

494
00:30:07,110 --> 00:30:09,560
and then it is playing the other.

495
00:30:09,560 --> 00:30:12,743
That's the whole circle
between Scotty and Spock.

496
00:30:17,060 --> 00:30:18,553
Let's talk about tests,

497
00:30:19,520 --> 00:30:23,530
the first batch of tests that they did

498
00:30:23,530 --> 00:30:25,360
had the following properties,

499
00:30:25,360 --> 00:30:29,090
time constant was set to 14 microseconds.

500
00:30:29,090 --> 00:30:32,990
The data packet structure
was four header bytes,

501
00:30:32,990 --> 00:30:36,650
20 Reed-Solomon forward error
correction parity bytes,

502
00:30:36,650 --> 00:30:41,650
a single audio packets counter,
and 63 encoded audio bytes.

503
00:30:43,140 --> 00:30:47,203
And I used two beats per PCM encoding,

504
00:30:48,170 --> 00:30:53,170
fair PCM sample encoding and
last but not least two audio

505
00:30:54,310 --> 00:30:55,623
data checks and bytes.

506
00:30:57,500 --> 00:31:01,930
Each packet was transmitted
with four beats per symbol.

507
00:31:01,930 --> 00:31:06,560
I took every byte divided into two nibbles

508
00:31:06,560 --> 00:31:08,923
and transmitted four bits per symbol.

509
00:31:12,640 --> 00:31:16,800
Here you can see the
computers I use for the tests.

510
00:31:16,800 --> 00:31:19,810
One was a laptop computer,

511
00:31:19,810 --> 00:31:23,160
and one was a desktop computer.

512
00:31:23,160 --> 00:31:28,160
You can see here the hardware
of the two computers.

513
00:31:30,740 --> 00:31:34,663
Here you can see the
setup in my apartment,

514
00:31:35,920 --> 00:31:40,470
on the left you can see the
laptop computer on a table,

515
00:31:40,470 --> 00:31:43,320
on the right you can see
the reception equipment

516
00:31:43,320 --> 00:31:44,240
and in the middle,

517
00:31:44,240 --> 00:31:47,260
you can see the corridor
inside the apartment.

518
00:31:47,260 --> 00:31:50,060
And at one end, you see
the laptop computer.

519
00:31:50,060 --> 00:31:52,313
On the other end, you see the antenna.

520
00:31:54,900 --> 00:31:57,410
Here you can see the same setup,

521
00:31:57,410 --> 00:32:00,230
but for the desktop computer on the left,

522
00:32:00,230 --> 00:32:02,610
you can see the desktop
computer on the table,

523
00:32:02,610 --> 00:32:04,920
on the right the reception equipment

524
00:32:04,920 --> 00:32:09,123
and in the middle of the
corridor with both sides.

525
00:32:11,750 --> 00:32:15,273
Okay, let's see some tests.

526
00:32:19,490 --> 00:32:21,323
Here you can see Scotty on a laptop.

527
00:32:23,480 --> 00:32:24,430
It's in flight mode

528
00:32:29,400 --> 00:32:31,123
and here it begins to transmit.

529
00:32:41,390 --> 00:32:44,950
And now that you got a good
sense of the raw bit rate time

530
00:32:44,950 --> 00:32:48,433
working backwards through
the reception equipment,

531
00:32:56,670 --> 00:32:58,413
this is the reception equipment,

532
00:33:03,514 --> 00:33:04,597
the antennae,

533
00:33:07,377 --> 00:33:12,253
low noise amplifier and SDR receiver.

534
00:33:18,664 --> 00:33:20,270
- [Announcer] Despite the striking fact

535
00:33:20,270 --> 00:33:23,887
that most of the scientist
that the world has ever known--

536
00:33:24,822 --> 00:33:26,905
- Flight model of course.

537
00:33:29,037 --> 00:33:30,083
And this is Spock.

538
00:33:31,007 --> 00:33:34,040
- [Announcer] Scientific manpower
is doubling every 12 years

539
00:33:34,990 --> 00:33:38,277
in a rate of growth,
more than three times,

540
00:33:38,277 --> 00:33:40,120
that of our population--
- Lets clear the numbers.

541
00:33:40,120 --> 00:33:45,120
- [Announcer] As a whole
despite that best sketches

542
00:33:45,320 --> 00:33:46,153
of the unknown

543
00:33:47,067 --> 00:33:52,067
and the unanswered and the
unfinished still far outstrip

544
00:33:53,270 --> 00:33:55,402
our collective comprehension.

545
00:33:55,402 --> 00:33:57,985
(static sound)

546
00:34:02,280 --> 00:34:05,373
We chose to go to the moon in this decade

547
00:34:05,373 --> 00:34:06,770
and do the other thing.

548
00:34:06,770 --> 00:34:08,690
Not because they are easy,

549
00:34:08,690 --> 00:34:12,170
but because they are
hard because that goal

550
00:34:13,170 --> 00:34:17,120
will fare to organize and
measure the best of our energies

551
00:34:17,120 --> 00:34:20,400
and skills, because that challenge is one

552
00:34:20,400 --> 00:34:22,490
that we're willing to accept.

553
00:34:22,490 --> 00:34:25,260
One we are unwilling to postpone

554
00:34:25,260 --> 00:34:28,341
and one we intend to
win and the other too.

555
00:34:28,341 --> 00:34:31,091
(Audience claps)

556
00:34:32,671 --> 00:34:34,440
- And that was the laptop.

557
00:34:34,440 --> 00:34:39,440
This is the desktop, you
can see raw bit rate.

558
00:35:08,980 --> 00:35:10,320
And this is Spock.

559
00:35:10,320 --> 00:35:13,150
- [Announcer] Scientific
manpower is doubling

560
00:35:13,150 --> 00:35:16,403
every 12 years in a rate of growth,

561
00:35:17,290 --> 00:35:21,023
more than three times that
about population as a whole,

562
00:35:21,920 --> 00:35:26,920
despite that the best
sketches of the unknown

563
00:35:27,170 --> 00:35:30,140
and the unanswered and the unfinished

564
00:35:31,500 --> 00:35:35,721
still far out step our
collective comprehension.

565
00:35:35,721 --> 00:35:38,304
(static sound)

566
00:35:41,050 --> 00:35:44,160
We set sail on this new scene

567
00:35:44,160 --> 00:35:47,400
because there is new
knowledge to be gained

568
00:35:47,400 --> 00:35:51,363
and new rites to be won,
and they must be won a new

569
00:35:53,347 --> 00:35:54,847
on the progress of all people.

570
00:35:58,240 --> 00:36:00,343
- And that's the first batch.

571
00:36:01,590 --> 00:36:03,590
Here are the test results.

572
00:36:03,590 --> 00:36:08,260
I got a good audio and
good the average bit rate

573
00:36:10,837 --> 00:36:13,430
and I even got good packet ratio,

574
00:36:13,430 --> 00:36:16,843
but I noticed something interesting.

575
00:36:18,367 --> 00:36:22,100
I got on the desktop better ratio

576
00:36:23,290 --> 00:36:28,163
when the monitor was turned
off, then when it was turned on.

577
00:36:29,140 --> 00:36:32,653
So I started to investigate this,

578
00:36:36,670 --> 00:36:37,900
when examined,

579
00:36:37,900 --> 00:36:41,010
the signals understood
that the desktop computer

580
00:36:41,010 --> 00:36:44,833
is the meeting signals, which
Scotty did not generate.

581
00:36:46,030 --> 00:36:49,430
And the computer stops
transmitting these signals

582
00:36:49,430 --> 00:36:53,093
once the monitor is turned
off by the windows power plan.

583
00:36:54,370 --> 00:36:58,890
So since I got better
results with the monitor off,

584
00:36:58,890 --> 00:37:03,890
I've decided to set the parameters,

585
00:37:05,260 --> 00:37:10,260
the packet structure differently
for a second batch of tests

586
00:37:12,930 --> 00:37:16,703
and try to achieve better audio quality.

587
00:37:18,100 --> 00:37:21,343
So I set the time constant
to eight microseconds.

588
00:37:22,388 --> 00:37:25,560
I used 4 Reed-Solomon forward
error correction parity bytes

589
00:37:26,600 --> 00:37:28,350
instead of 20 in the first batch.

590
00:37:28,350 --> 00:37:33,170
And I used three bits first
PCM sample and coding,

591
00:37:33,170 --> 00:37:34,003
instead of two.

592
00:37:36,760 --> 00:37:37,810
Let's see what I got.

593
00:37:43,720 --> 00:37:45,160
This is the desktop of course.

594
00:37:45,160 --> 00:37:46,860
And you can see a higher bit rate,

595
00:38:07,380 --> 00:38:08,280
and this is Spock.

596
00:38:11,480 --> 00:38:15,713
And as you can see, there
are a lot of lost packets.

597
00:38:17,012 --> 00:38:19,570
The audio quality is quite poor.

598
00:38:19,570 --> 00:38:22,593
The reception quality is quite poor,

599
00:38:23,470 --> 00:38:27,103
and this is because the
monitor is still on.

600
00:38:30,630 --> 00:38:35,630
So let's wait a few seconds
to see how it will go

601
00:38:36,080 --> 00:38:38,717
when the display will be off.

602
00:38:45,230 --> 00:38:47,383
And this is with the display off.

603
00:38:48,698 --> 00:38:51,730
You can see that the lost
packets indicator has halted

604
00:38:51,730 --> 00:38:55,280
and the good packets ratio is increasing

605
00:38:56,233 --> 00:38:58,711
and we get good audio.

606
00:38:58,711 --> 00:39:00,311
- [Announcer] The best
man that's learned to use

607
00:39:00,311 --> 00:39:02,330
the skins of animals to cover them.

608
00:39:02,330 --> 00:39:04,530
Then about 10 years ago,

609
00:39:04,530 --> 00:39:08,750
under this standard, man
emerged from his caves

610
00:39:08,750 --> 00:39:10,550
to construct other kinds of shelter.

611
00:39:11,860 --> 00:39:12,886
- Clearing the numbers.

612
00:39:12,886 --> 00:39:15,469
(static sound)

613
00:39:19,050 --> 00:39:21,630
- [Announcer] Many years ago,
the great British Explorer,

614
00:39:21,630 --> 00:39:23,270
George Mallory,

615
00:39:23,270 --> 00:39:27,360
who was to die on Mount Everest was asked,

616
00:39:27,360 --> 00:39:29,430
why did he want to climb it?

617
00:39:29,430 --> 00:39:31,500
He said, because it is there.

618
00:39:31,500 --> 00:39:33,070
Well, space is there,

619
00:39:33,070 --> 00:39:36,141
and we're going to climb it and the moon

620
00:39:36,141 --> 00:39:37,300
and the planets are there,

621
00:39:37,300 --> 00:39:40,290
and new hopes for knowledge
and peace are there.

622
00:39:40,290 --> 00:39:43,090
And therefore, as we set sail,

623
00:39:43,090 --> 00:39:47,770
we have God's blessing on the
most hesitant and dangerous

624
00:39:47,770 --> 00:39:50,803
and greatest adventure on
which man has ever embarked.

625
00:39:52,544 --> 00:39:53,377
Thank you.

626
00:39:53,377 --> 00:39:55,100
(Crowd applauds)

627
00:39:55,100 --> 00:39:57,680
- It's a wonderful speech by JFK,

628
00:39:57,680 --> 00:40:00,580
and I recommend you all to listen to it.

629
00:40:00,580 --> 00:40:01,963
It's a great speech.

630
00:40:03,620 --> 00:40:05,240
So these are the test results.

631
00:40:05,240 --> 00:40:08,890
I got better audio and better bit rate

632
00:40:09,790 --> 00:40:12,153
and better packet rate.

633
00:40:12,153 --> 00:40:14,413
Then everything is great.

634
00:40:18,800 --> 00:40:23,130
The whole project was designed around CK,

635
00:40:23,130 --> 00:40:25,270
the command clock,

636
00:40:25,270 --> 00:40:29,040
but it is important to
remember that other signals

637
00:40:29,040 --> 00:40:31,240
are being transmitted as well.

638
00:40:31,240 --> 00:40:35,240
On the same time we have
the four basic signals here,

639
00:40:35,240 --> 00:40:39,980
but there are more derive the
signals from these signals.

640
00:40:39,980 --> 00:40:44,730
And there are a lot of
signals being transmitted

641
00:40:44,730 --> 00:40:48,143
at every symbol transmission.

642
00:40:49,090 --> 00:40:52,790
So if you can't get your
data on one frequency,

643
00:40:52,790 --> 00:40:55,910
you might find it on
different frequencies.

644
00:40:55,910 --> 00:40:58,120
Let's see an example of that.

645
00:40:58,120 --> 00:41:03,120
Here you can see the
power versus frequency

646
00:41:04,540 --> 00:41:09,540
of a signal which equals the
command clock divided by two.

647
00:41:12,000 --> 00:41:16,540
And you can see good power and
here you can see that Spock

648
00:41:16,540 --> 00:41:21,540
receives it well, we are
at 99.6 good packets ratio.

649
00:41:23,930 --> 00:41:26,940
The only difference you may
see is in the wave forms,

650
00:41:26,940 --> 00:41:30,110
the wave form of half of CK is different

651
00:41:30,110 --> 00:41:31,853
from the wave form of CK.

652
00:41:32,990 --> 00:41:37,990
And if you want to receive
this signal instead of CK,

653
00:41:39,315 --> 00:41:44,315
then you need to adjust
Spock to process the samples

654
00:41:45,420 --> 00:41:48,373
with this wave form to
get the best results.

655
00:41:49,685 --> 00:41:50,518
But as you can see,

656
00:41:50,518 --> 00:41:52,990
this was not handled
or tampered in any way

657
00:41:52,990 --> 00:41:57,463
and it's just gives good reception.

658
00:42:00,170 --> 00:42:01,150
Okay.

659
00:42:01,150 --> 00:42:03,453
So let's talk about conclusions.

660
00:42:04,315 --> 00:42:05,400
The first are fun conclusions.

661
00:42:05,400 --> 00:42:06,970
First it works.

662
00:42:06,970 --> 00:42:07,803
Yay.

663
00:42:09,560 --> 00:42:12,500
The second conclusion is that
my apartment is too small

664
00:42:12,500 --> 00:42:14,113
for the range tests.

665
00:42:15,430 --> 00:42:18,370
I had enough power I
could have gone further,

666
00:42:18,370 --> 00:42:20,680
but that's the length of the corridor.

667
00:42:20,680 --> 00:42:23,030
So that was it for me.

668
00:42:23,030 --> 00:42:26,500
And they got so excited
that I've made the jingle

669
00:42:26,500 --> 00:42:28,720
for Tempest Radio Station.

670
00:42:28,720 --> 00:42:29,553
Let's hear it.

671
00:42:30,517 --> 00:42:33,184
♪ Tempest Radio ♪

672
00:42:34,430 --> 00:42:35,380
That is the jingle,

673
00:42:37,880 --> 00:42:40,950
but let's talk about more
alarming conclusions.

674
00:42:40,950 --> 00:42:44,603
First, timed memory transfers
are easy to produce.

675
00:42:45,950 --> 00:42:50,950
It's only memory transfers
and you can leak data

676
00:42:51,730 --> 00:42:54,210
just like you can leak
audio because as you saw,

677
00:42:54,210 --> 00:42:55,810
the audio was already digitized,

678
00:42:55,810 --> 00:42:59,583
they could have passed any other
pillow that I could choose.

679
00:43:02,400 --> 00:43:06,160
You can use this method
on air-gap computer.

680
00:43:06,160 --> 00:43:07,810
You look at an air-gap computer.

681
00:43:07,810 --> 00:43:12,290
It doesn't have any radio
based communication channel,

682
00:43:12,290 --> 00:43:13,910
but if it has the GPU,

683
00:43:13,910 --> 00:43:17,670
then you can use this method
to get the information

684
00:43:17,670 --> 00:43:18,503
out of it.

685
00:43:19,825 --> 00:43:22,870
And this is most important
during non-working hours

686
00:43:22,870 --> 00:43:26,443
because the GPU is either,
there is no supervision,

687
00:43:28,245 --> 00:43:32,520
the monitor can be turned off
to achieve maximum bit rate

688
00:43:32,520 --> 00:43:36,560
either by the attacker
or by the companies,

689
00:43:36,560 --> 00:43:40,330
the IT policy and the attacker

690
00:43:40,330 --> 00:43:43,140
can choose the time of transmissions.

691
00:43:43,140 --> 00:43:43,973
For example,

692
00:43:43,973 --> 00:43:47,440
it can hide the reception
equipment in the parking lot

693
00:43:47,440 --> 00:43:52,440
and choose the data to be
transmitted from 9:00 PM

694
00:43:53,100 --> 00:43:56,813
till midnight, and get the data.

695
00:44:00,300 --> 00:44:03,990
Everything I spoke about is
not supervised by any software,

696
00:44:03,990 --> 00:44:08,760
not by antivirus, firewalls,
port monitoring, software,

697
00:44:08,760 --> 00:44:09,593
whatever.

698
00:44:10,860 --> 00:44:14,290
And this is important
not only to, for example,

699
00:44:14,290 --> 00:44:16,870
extract plans and design
from internal networks,

700
00:44:16,870 --> 00:44:20,980
you can also do it on open networks,

701
00:44:20,980 --> 00:44:23,220
networks that are
connected to the internet

702
00:44:23,220 --> 00:44:26,390
because nobody's monitoring this channel.

703
00:44:26,390 --> 00:44:28,200
It's an open channel.

704
00:44:28,200 --> 00:44:30,060
And since nobody is monitoring,

705
00:44:30,060 --> 00:44:31,623
you can pass whatever you want.

706
00:44:32,550 --> 00:44:36,690
And as long as you can hide
the reception equipment

707
00:44:36,690 --> 00:44:41,690
and get the data out, you
can enjoy Tempest Radio.

708
00:44:44,650 --> 00:44:46,780
Thank you very much for watching,

709
00:44:46,780 --> 00:44:50,010
here are the links to
the source code on GitHub

710
00:44:50,010 --> 00:44:52,103
for both Scotty and Spock.

711
00:44:53,440 --> 00:44:56,720
And here you can see the
references from my work.

712
00:44:56,720 --> 00:44:58,160
Thanks again.

713
00:44:58,160 --> 00:45:00,133
And I hope you enjoyed it.

