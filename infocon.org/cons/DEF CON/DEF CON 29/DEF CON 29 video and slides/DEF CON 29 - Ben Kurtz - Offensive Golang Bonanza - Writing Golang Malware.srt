1
00:00:01,720 --> 00:00:05,603
- Hello and welcome to
Offensive Golang Bonanza.

2
00:00:07,090 --> 00:00:10,950
I'm Ben, hi, Defcon 29.

3
00:00:10,950 --> 00:00:13,333
We're gonna talk about Golang malware.

4
00:00:14,320 --> 00:00:15,710
Little a bit about myself,

5
00:00:15,710 --> 00:00:18,373
my first Defcon talk was at Defcon 13.

6
00:00:19,410 --> 00:00:21,390
I'm the host of a hacker-themed podcast

7
00:00:21,390 --> 00:00:24,240
where we interview a lot of
people around this community.

8
00:00:24,240 --> 00:00:25,993
Very in-depth, very technical.

9
00:00:26,860 --> 00:00:29,340
Please check that out and I have

10
00:00:29,340 --> 00:00:31,190
a bunch of random projects on GitHub.

11
00:00:33,340 --> 00:00:34,540
So what this talk is gonna be,

12
00:00:34,540 --> 00:00:35,750
there's two ways to consume it.

13
00:00:35,750 --> 00:00:37,990
One, you can just listen to me describe

14
00:00:37,990 --> 00:00:40,430
a whole bunch of Golang malware components

15
00:00:40,430 --> 00:00:42,040
and you'll get a sense
of what's out there,

16
00:00:42,040 --> 00:00:44,330
what's available, what's possible.

17
00:00:44,330 --> 00:00:47,720
And if you wanna go
in-depth, there are links

18
00:00:47,720 --> 00:00:52,720
on all of the slides to the
actual code repos themself,

19
00:00:53,260 --> 00:00:57,053
code samples, interviews, news
articles, all kinds of stuff.

20
00:01:00,480 --> 00:01:04,960
So to start with, I'm gonna
do a little bit of back story

21
00:01:04,960 --> 00:01:09,180
on my hacker crew and
a little bit on Golang

22
00:01:09,180 --> 00:01:11,400
and why it's so interesting
to malware developers.

23
00:01:11,400 --> 00:01:12,940
And then we'll start going through

24
00:01:12,940 --> 00:01:14,403
various components and tools.

25
00:01:16,520 --> 00:01:19,640
So in the beginning, I was interested in

26
00:01:19,640 --> 00:01:23,960
anti-censorship surrounding a
particular Iranian election.

27
00:01:23,960 --> 00:01:27,440
I was taking a look at the
Tor's obfuscation proxy,

28
00:01:27,440 --> 00:01:32,440
obfsproxy2 at the time, and
I thought I could do better.

29
00:01:32,570 --> 00:01:34,950
And so I started the Ratnet project

30
00:01:34,950 --> 00:01:38,300
which is a pretty cool NIDS evasion thing

31
00:01:38,300 --> 00:01:40,240
we're gonna talk about later

32
00:01:40,240 --> 00:01:43,801
and I was using that project
as an excuse to learn Golang.

33
00:01:43,801 --> 00:01:45,951
And what I learned is
that Golang is magic.

34
00:01:46,810 --> 00:01:50,240
Unlike any programming
language I've used before,

35
00:01:50,240 --> 00:01:53,190
just anything you need,
anything you would normally

36
00:01:53,190 --> 00:01:56,210
have to install as a
separate library or utility,

37
00:01:56,210 --> 00:01:57,660
it's just there for you.

38
00:01:57,660 --> 00:02:01,150
Everything from crypto,
networking libraries,

39
00:02:01,150 --> 00:02:04,180
virtual file systems
are supported natively

40
00:02:04,180 --> 00:02:06,470
which is totally unique.

41
00:02:06,470 --> 00:02:09,825
The compiler cross-compiles
easily to every other

42
00:02:09,825 --> 00:02:12,470
architecture and operating system.

43
00:02:12,470 --> 00:02:16,770
There's built-in test frameworks,
vendored in frameworks,

44
00:02:16,770 --> 00:02:19,460
it's garbage collected,
it has a very efficient

45
00:02:19,460 --> 00:02:23,438
thread implementation and
it has its own assembler.

46
00:02:23,438 --> 00:02:27,840
And the third party library
support is totally unparalleled,

47
00:02:27,840 --> 00:02:30,990
so Rust is years away just
to answer the question

48
00:02:30,990 --> 00:02:33,143
of why don't I rewrite everything in Rust?

49
00:02:34,730 --> 00:02:36,880
But the main reason that I love Go

50
00:02:36,880 --> 00:02:39,960
is that it is the fastest way to be done

51
00:02:39,960 --> 00:02:43,790
and my goal is not to
reinvent every wheel.

52
00:02:43,790 --> 00:02:45,500
My goal is when I start a project

53
00:02:45,500 --> 00:02:48,828
is to be done with the
project and use the project.

54
00:02:48,828 --> 00:02:52,300
And the fastest way to
learn Go, the way I learned,

55
00:02:52,300 --> 00:02:55,440
is a document called Effective
Go on the Golang website

56
00:02:55,440 --> 00:02:57,620
which assumes that you
already know how to program

57
00:02:57,620 --> 00:03:00,570
and just tells you what's
different about Go.

58
00:03:00,570 --> 00:03:04,410
I highly recommend that to
anyone who wants to learn Go

59
00:03:04,410 --> 00:03:06,320
especially if you already
know how to program.

60
00:03:06,320 --> 00:03:08,900
So a few relevant facts about Go.

61
00:03:08,900 --> 00:03:09,860
It is not interpreted.

62
00:03:09,860 --> 00:03:12,970
I'm not sure why people seem
to get that misconception.

63
00:03:12,970 --> 00:03:14,800
It is statically compiled.

64
00:03:14,800 --> 00:03:19,740
However, it also, every Go binary includes

65
00:03:21,258 --> 00:03:24,040
a kind of monolithic runtime

66
00:03:24,040 --> 00:03:27,870
which is like 800K on
most operating systems.

67
00:03:27,870 --> 00:03:30,850
So it's a bit of overhead per binary.

68
00:03:30,850 --> 00:03:33,540
And then all of your code
is statically compiled

69
00:03:33,540 --> 00:03:35,300
on top of that, all of the
dependencies and everything

70
00:03:35,300 --> 00:03:37,050
that aren't already in the runtime.

71
00:03:38,185 --> 00:03:40,000
The embedded assembly language

72
00:03:40,000 --> 00:03:42,040
is based on Plan9's assembly language,

73
00:03:42,040 --> 00:03:44,410
so it's a little bit crazy.

74
00:03:44,410 --> 00:03:45,872
We don't have time to go into it,

75
00:03:45,872 --> 00:03:50,610
but I did a write-up that
will kind of help you cope.

76
00:03:50,610 --> 00:03:51,800
It's linked on this slide.

77
00:03:51,800 --> 00:03:53,300
I recommend checking that out.

78
00:03:55,185 --> 00:03:58,280
So to get into the story,
so Stuxnet happened,

79
00:03:58,280 --> 00:04:01,580
and everyone got very hot
on environmental keying.

80
00:04:01,580 --> 00:04:03,520
I environmentally keyed payloads.

81
00:04:03,520 --> 00:04:05,562
Josh Pitts made a tool in Golang

82
00:04:05,562 --> 00:04:08,807
to do environmentally keyed
payloads called Ebowla.

83
00:04:10,012 --> 00:04:12,970
They got very popular with
the red teamers at the time.

84
00:04:12,970 --> 00:04:15,727
And so all of the EDRs and AV companies

85
00:04:15,727 --> 00:04:18,550
wanted to write sigs for Ebowla,

86
00:04:18,550 --> 00:04:22,370
but they had never seen a
Golang hacker tool before.

87
00:04:22,370 --> 00:04:24,790
And so they all ended
up writing signatures

88
00:04:24,790 --> 00:04:26,330
for the Golang runtime

89
00:04:26,330 --> 00:04:29,420
which is included in every Golang process.

90
00:04:29,420 --> 00:04:32,820
So what happened next is
that all of the AV utilities

91
00:04:32,820 --> 00:04:36,223
triggered on every Go binary
including the installer,

92
00:04:37,720 --> 00:04:41,820
but it also included the very
prevalent orchestration tools,

93
00:04:41,820 --> 00:04:43,660
Docker and Terraform.

94
00:04:43,660 --> 00:04:45,410
And so as a result, they all had to

95
00:04:45,410 --> 00:04:47,540
pull those sigs very quickly,

96
00:04:47,540 --> 00:04:51,457
because people need their Terraform.

97
00:04:52,340 --> 00:04:56,511
And this is a pattern that
malware developers look for.

98
00:04:56,511 --> 00:04:59,420
We call the jar2exe pattern

99
00:04:59,420 --> 00:05:01,080
where basically if you have anything

100
00:05:01,080 --> 00:05:04,049
that makes a native binary for you,

101
00:05:04,049 --> 00:05:07,300
but it has one legitimate user

102
00:05:07,300 --> 00:05:10,030
that means the AV companies
need to whitelist it

103
00:05:10,030 --> 00:05:12,930
and they have trouble
creating sigs for like Java

104
00:05:12,930 --> 00:05:16,530
inside a jar2exe binary.

105
00:05:16,530 --> 00:05:18,230
They have trouble creating sigs for Python

106
00:05:18,230 --> 00:05:21,670
inside a py2exe binary
if those are whitelisted.

107
00:05:21,670 --> 00:05:24,440
And similarly, they have
trouble creating sigs

108
00:05:24,440 --> 00:05:27,850
for Go code which is statically compiled

109
00:05:27,850 --> 00:05:29,313
past the Go runtime.

110
00:05:30,300 --> 00:05:32,070
So realizing that and also

111
00:05:32,070 --> 00:05:34,700
I had this sweet exfiltration library

112
00:05:34,700 --> 00:05:36,353
I had been working on called Ratnet,

113
00:05:37,610 --> 00:05:40,800
I started talking to other security people

114
00:05:40,800 --> 00:05:43,010
that were interested in Go

115
00:05:43,010 --> 00:05:45,220
and we got together, shared ideas,

116
00:05:45,220 --> 00:05:47,362
things escalated very quickly,

117
00:05:47,362 --> 00:05:52,362
and we, you know, this has
happened in the past with Python.

118
00:05:53,850 --> 00:05:55,885
Now it's happening with Go.

119
00:05:55,885 --> 00:06:00,885
And we made a bit of a
community, probably the best

120
00:06:01,640 --> 00:06:05,280
example of this is there's
a particular Slack server

121
00:06:06,130 --> 00:06:08,053
where #golang, the Slack channel,

122
00:06:09,570 --> 00:06:13,570
has like literally, it's like

123
00:06:13,570 --> 00:06:15,260
the best place on the Internet.

124
00:06:15,260 --> 00:06:20,260
It has like all the people
working in Golang malware

125
00:06:20,300 --> 00:06:21,220
basically hang out there.

126
00:06:21,220 --> 00:06:23,930
They share ideas, they're
really nice to each other.

127
00:06:23,930 --> 00:06:25,810
There's no kind of like political

128
00:06:25,810 --> 00:06:27,810
or weird other Internet nonsense.

129
00:06:27,810 --> 00:06:30,370
It's just people helping
each other with projects,

130
00:06:30,370 --> 00:06:34,991
suggesting project ideas,
and it's just amazing.

131
00:06:34,991 --> 00:06:38,100
So we're gonna talk about
tools from a lot of people

132
00:06:38,100 --> 00:06:39,900
in this chatroom.

133
00:06:39,900 --> 00:06:43,430
I boldfaced the ones that
are specifically mentioned

134
00:06:43,430 --> 00:06:45,440
in this deck, but everybody in there,

135
00:06:45,440 --> 00:06:49,969
just thank you, it's been
totally critical for my sanity

136
00:06:49,969 --> 00:06:52,000
especially over the last year.

137
00:06:52,000 --> 00:06:56,170
And I especially wanna thank
the community organizer,

138
00:06:56,170 --> 00:06:59,083
jeffmcjunkin for keeping
most of the crazy out.

139
00:07:02,020 --> 00:07:04,740
So just a quick word
about offense and defense,

140
00:07:04,740 --> 00:07:07,260
all of these tools are open source.

141
00:07:07,260 --> 00:07:09,330
We post the code, we hope that

142
00:07:09,330 --> 00:07:12,810
the people who work on
operating system and defenses

143
00:07:12,810 --> 00:07:16,430
and defensive tools will study these

144
00:07:16,430 --> 00:07:19,400
and learn how they can improve

145
00:07:20,980 --> 00:07:25,547
some of the problems
especially the bypass tools

146
00:07:25,547 --> 00:07:27,907
exploit have been around for 10, 20,

147
00:07:27,907 --> 00:07:29,823
and in some cases 30 years.

148
00:07:30,680 --> 00:07:35,680
So having, it's not 0-day, it's just like,

149
00:07:37,380 --> 00:07:39,510
things have been broken for a long time.

150
00:07:39,510 --> 00:07:42,123
You can't just bury your hand in the sand.

151
00:07:43,300 --> 00:07:45,290
So we're trying to make things better

152
00:07:45,290 --> 00:07:48,963
by helping people understand
how things actually work.

153
00:07:50,520 --> 00:07:53,310
And on that note, I'm
gonna talk briefly about

154
00:07:53,310 --> 00:07:56,660
what tools exist for
reversing Go binaries.

155
00:07:56,660 --> 00:07:59,270
There aren't a lot that are useful.

156
00:07:59,270 --> 00:08:01,720
Even now, the most useful one is probably

157
00:08:01,720 --> 00:08:02,990
the Go Reversing Toolkit.

158
00:08:02,990 --> 00:08:04,540
They have a tool called Redress

159
00:08:05,490 --> 00:08:08,290
which is fairly successful
at extracting metadata

160
00:08:08,290 --> 00:08:10,770
from stripped Go binaries
including dependencies

161
00:08:10,770 --> 00:08:12,350
and compiler versions.

162
00:08:12,350 --> 00:08:15,607
And then there's a few
IDA scripts and blog posts

163
00:08:15,607 --> 00:08:19,680
linked on this slide which
give you some clues as to

164
00:08:19,680 --> 00:08:21,400
how to go about reversing a Go binary,

165
00:08:21,400 --> 00:08:24,970
but it's still pretty primitive.

166
00:08:24,970 --> 00:08:26,810
And I think a lot of the trouble is that

167
00:08:26,810 --> 00:08:28,210
the static compilation aspect,

168
00:08:28,210 --> 00:08:32,770
if you ever try to open
up an embedded C program

169
00:08:32,770 --> 00:08:34,530
that's statically compiled in IDA,

170
00:08:34,530 --> 00:08:36,700
you end up having to
sort of manually work out

171
00:08:36,700 --> 00:08:37,870
what a lot of the functions do.

172
00:08:37,870 --> 00:08:40,130
There are kind of flare signatures,

173
00:08:40,130 --> 00:08:44,083
but I haven't seen that for Golang yet.

174
00:08:46,220 --> 00:08:48,260
So some of the core components

175
00:08:48,260 --> 00:08:50,750
for the rest of the tools
we're gonna talk about.

176
00:08:50,750 --> 00:08:54,020
The first one, the one that
gets used by almost everything

177
00:08:54,020 --> 00:08:58,880
is our fork of Go standard debug library.

178
00:08:58,880 --> 00:09:01,870
So Go comes with a library called debug.

179
00:09:01,870 --> 00:09:06,387
It parses all binary formats
PE, for Windows Elf, Linux,

180
00:09:06,387 --> 00:09:07,993
and Mach-O for OSX.

181
00:09:09,280 --> 00:09:11,960
We forked that, fixed a bunch of bugs,

182
00:09:11,960 --> 00:09:16,960
and added support for editing the file,

183
00:09:16,960 --> 00:09:19,450
changing things by their fields,

184
00:09:19,450 --> 00:09:24,173
and then writing the file back
out once you've changed it.

185
00:09:25,080 --> 00:09:26,990
So we turned it into an

186
00:09:26,990 --> 00:09:29,880
arbitrary binary modification framework

187
00:09:29,880 --> 00:09:32,230
and we also made it parse files

188
00:09:32,230 --> 00:09:33,980
that are already loaded into memory.

189
00:09:33,980 --> 00:09:37,970
And also you can write
them back out to memory,

190
00:09:37,970 --> 00:09:41,090
but you need a tool we're
gonna talk about later.

191
00:09:41,090 --> 00:09:42,480
But this is especially cool,

192
00:09:42,480 --> 00:09:44,962
because you can parse your own process

193
00:09:44,962 --> 00:09:47,940
which lets you do a lot
of neat malware tricks,

194
00:09:47,940 --> 00:09:52,827
as we'll see, and you can
also inject shellcode into

195
00:09:54,400 --> 00:09:57,283
a file on disk which is also pretty handy.

196
00:09:59,590 --> 00:10:03,950
So the parser entry points
for PE, Elf, and Mach-O

197
00:10:03,950 --> 00:10:06,513
are always either new file
or new file from memory.

198
00:10:07,390 --> 00:10:10,160
The generator entry points
are always called bytes

199
00:10:10,160 --> 00:10:12,530
in case you're looking at the code.

200
00:10:12,530 --> 00:10:14,190
Also some of the stuff we added,

201
00:10:14,190 --> 00:10:17,600
we added base relocations and relocations.

202
00:10:17,600 --> 00:10:20,770
We added imported address table fix-ups,

203
00:10:20,770 --> 00:10:22,780
the ability to add sections,

204
00:10:22,780 --> 00:10:24,640
the ability to hook entry points,

205
00:10:24,640 --> 00:10:28,100
and the ability to
access and add signatures

206
00:10:28,100 --> 00:10:31,480
which comes up in a lot of
the malware tools we're using,

207
00:10:31,480 --> 00:10:33,980
but this might be useful
for other things as well.

208
00:10:35,862 --> 00:10:37,563
Another core component is cppgo.

209
00:10:38,410 --> 00:10:40,060
We got this from Loren Segal.

210
00:10:40,060 --> 00:10:42,450
We just forked and added support for

211
00:10:42,450 --> 00:10:45,000
the Apple M1 for ARM 64.

212
00:10:45,000 --> 00:10:49,380
Basically this is a way
from Go to make native calls

213
00:10:49,380 --> 00:10:53,420
into any other library using any ABI,

214
00:10:53,420 --> 00:10:55,340
any calling convention.

215
00:10:55,340 --> 00:10:59,017
So it comes with standard
call, cdecl, and thiscall.

216
00:10:59,017 --> 00:11:01,189
And so this is absolutely critical

217
00:11:01,189 --> 00:11:05,870
for a lot of malware
functionality from Go.

218
00:11:05,870 --> 00:11:07,380
I highly recommend you check it out.

219
00:11:07,380 --> 00:11:09,883
It's a great example of Go assembler.

220
00:11:11,840 --> 00:11:14,893
Moving on to the
exploitation tools category.

221
00:11:15,880 --> 00:11:20,450
Our first exploitation
tool is called binjection

222
00:11:20,450 --> 00:11:25,450
and this uses the Binject debug
binary modification platform

223
00:11:26,720 --> 00:11:28,470
and adds a layer on top of it

224
00:11:28,470 --> 00:11:31,090
which implements a variety
of different algorithms

225
00:11:31,090 --> 00:11:34,250
for inserting shellcode into a binary,

226
00:11:34,250 --> 00:11:35,700
predominately hooking the entry point,

227
00:11:35,700 --> 00:11:37,490
but it wouldn't necessarily have to be.

228
00:11:37,490 --> 00:11:38,760
So there's a command line utility.

229
00:11:38,760 --> 00:11:40,513
You can also use it as a library.

230
00:11:41,549 --> 00:11:45,470
And so it's very extensible

231
00:11:45,470 --> 00:11:48,030
and we've implemented
a variety of algorithms

232
00:11:49,190 --> 00:11:52,620
including for PE, the one we
use the most often these days

233
00:11:52,620 --> 00:11:54,330
is just adding a new section.

234
00:11:54,330 --> 00:11:56,440
You hook the entry point to
point to the new section.

235
00:11:56,440 --> 00:11:59,050
At the end of the new section,

236
00:11:59,050 --> 00:12:01,810
you have it point back to
the original entry point.

237
00:12:01,810 --> 00:12:04,110
So basically file starts,
runs your shellcode

238
00:12:04,110 --> 00:12:07,060
in the new section, jumps back
to the original entry point.

239
00:12:08,009 --> 00:12:12,000
Modern PEs don't have a lot
of code cave space anymore.

240
00:12:12,000 --> 00:12:13,850
I guess there have been
compiler improvements,

241
00:12:13,850 --> 00:12:17,190
so this is the most successful
method for PE we found.

242
00:12:17,190 --> 00:12:19,430
For ELF, we have a variety
of different methods.

243
00:12:19,430 --> 00:12:20,840
We're probably gonna add more.

244
00:12:20,840 --> 00:12:23,659
We have Silvio Cesare's original
padding infection method

245
00:12:23,659 --> 00:12:26,496
which we updated a little
bit, so it supports

246
00:12:26,496 --> 00:12:31,496
position independent
executables, and we also,

247
00:12:31,740 --> 00:12:34,710
sblip from the channel also implemented a

248
00:12:34,710 --> 00:12:37,810
completely new injection
method based on PT_NOTE

249
00:12:39,330 --> 00:12:42,080
which is in there and we also have

250
00:12:43,350 --> 00:12:46,750
ctors or constructor hooking
for shared libraries.

251
00:12:46,750 --> 00:12:48,390
So not only can you hook an executable,

252
00:12:48,390 --> 00:12:50,890
you can also inject shellcode
into a shared library

253
00:12:50,890 --> 00:12:52,983
and have that run when the library loads.

254
00:12:54,140 --> 00:12:57,010
For Mach-O, we're predominately
hooking the entry point

255
00:12:57,010 --> 00:13:00,010
and using the one giant code cave

256
00:13:00,010 --> 00:13:02,230
which is in all Mach-O binaries

257
00:13:02,230 --> 00:13:05,150
before that first load segment.

258
00:13:05,150 --> 00:13:08,730
I'm not sure why that is always the case,

259
00:13:08,730 --> 00:13:10,880
but there's always one giant code cave

260
00:13:10,880 --> 00:13:13,380
you can fit a bunch of
shellcode in, I don't know.

261
00:13:15,460 --> 00:13:17,510
Just a quick example of
what the code looks like.

262
00:13:17,510 --> 00:13:22,510
This is the whole Silvio
method from binjection.

263
00:13:23,600 --> 00:13:27,260
There are no, there's no weird
offsets, there's no hex math.

264
00:13:27,260 --> 00:13:30,889
You can just read it and it's
referring to the actual fields

265
00:13:30,889 --> 00:13:35,889
in the file format and that's
coming from binjectdebug.

266
00:13:35,940 --> 00:13:38,100
And this is the right layer of abstraction

267
00:13:38,100 --> 00:13:41,160
that you wanna code
injection algorithms in

268
00:13:41,160 --> 00:13:42,910
and that's kind of the whole point,

269
00:13:42,910 --> 00:13:45,330
so it's easy to understand the algorithm.

270
00:13:45,330 --> 00:13:48,230
Just by reading the code, it's
easy to add new algorithms.

271
00:13:49,390 --> 00:13:51,738
Now what kind of kicked
off the binjectdebug

272
00:13:51,738 --> 00:13:54,070
and binjection project
was the desire to make

273
00:13:54,070 --> 00:13:58,090
the old tool from Josh Pitts's
backdoorfactory work again.

274
00:13:58,090 --> 00:13:59,940
So backdoorfactory stopped working

275
00:13:59,940 --> 00:14:01,050
and we were like, "Hey, let's just

276
00:14:01,050 --> 00:14:02,190
rewrite this whole thing in Go."

277
00:14:02,190 --> 00:14:03,830
We broke it into modules and we ended up

278
00:14:03,830 --> 00:14:05,540
with binjectdebug binjection.

279
00:14:05,540 --> 00:14:06,710
And finally, we needed to

280
00:14:06,710 --> 00:14:09,630
close the loop with backdoorfactory.

281
00:14:09,630 --> 00:14:12,830
So backdoorfactory is the
thing, man in the middle,

282
00:14:12,830 --> 00:14:14,390
someone's who's trying
to download a binary,

283
00:14:14,390 --> 00:14:16,790
it injects shellcode into
the binary automatically.

284
00:14:16,790 --> 00:14:18,890
It was beautiful, red teamers loved it,

285
00:14:18,890 --> 00:14:20,730
got to use it all the time,
and then it stopped working,

286
00:14:20,730 --> 00:14:22,190
and we were all very sad.

287
00:14:22,190 --> 00:14:26,230
Backdoorfactory originally
worked with a tool called

288
00:14:26,230 --> 00:14:28,739
Ettercap which is terrible and old.

289
00:14:28,739 --> 00:14:33,320
I mean it worked at the
time, but it was into curses,

290
00:14:33,320 --> 00:14:36,470
and there's a better Go
rewrite called bettercap

291
00:14:36,470 --> 00:14:39,739
which adds support for more
man in the middle methods.

292
00:14:39,739 --> 00:14:44,180
And so we decided to use
bettercap for the rewrite.

293
00:14:44,180 --> 00:14:45,930
And then we already had binjection.

294
00:14:47,740 --> 00:14:51,740
So basically, bettercap
has a scripting language

295
00:14:51,740 --> 00:14:54,530
called caplet scripts and they already had

296
00:14:54,530 --> 00:14:56,990
implemented a script for bettercap called

297
00:14:56,990 --> 00:15:01,410
download-autopwn which
intercepts web downloads

298
00:15:01,410 --> 00:15:03,890
and replaces them with
a malicious payload.

299
00:15:03,890 --> 00:15:05,020
So it doesn't inject it into a file,

300
00:15:05,020 --> 00:15:10,020
it just replaces it entirely,
but we just started from that.

301
00:15:10,190 --> 00:15:11,710
And then in the caplet language only,

302
00:15:11,710 --> 00:15:14,410
it exposes read file
and write file commands.

303
00:15:14,410 --> 00:15:16,210
It's the only way you can
interact with anything

304
00:15:16,210 --> 00:15:17,903
outside of JavaScript.

305
00:15:17,903 --> 00:15:22,903
And so, we figure we'll just
make a named pipe server

306
00:15:22,980 --> 00:15:26,640
and use read file and write file to pass

307
00:15:26,640 --> 00:15:29,220
the file being man in the
middled out to binjection,

308
00:15:29,220 --> 00:15:32,190
inject your shellcode,
and then use a read file

309
00:15:32,190 --> 00:15:34,283
to read it back in through another pipe,

310
00:15:34,283 --> 00:15:38,190
back into the caplet, and
return it to the user.

311
00:15:38,190 --> 00:15:39,210
So that looks like this.

312
00:15:39,210 --> 00:15:41,420
So you can use bettercap
to man in the middle

313
00:15:41,420 --> 00:15:45,670
someone's download using
ARP spoofing, DNS poisoning,

314
00:15:45,670 --> 00:15:49,230
DHCPv6 or anything else
bettercap supports.

315
00:15:49,230 --> 00:15:51,020
Their download request comes to you,

316
00:15:51,020 --> 00:15:52,150
you go out to the server

317
00:15:52,150 --> 00:15:54,140
they were originally trying to access,

318
00:15:54,140 --> 00:15:56,800
and download the file
they were trying to get.

319
00:15:56,800 --> 00:15:59,960
And then you pass that file
through the new pipe server,

320
00:15:59,960 --> 00:16:01,980
the new backdoorfactory to binjection

321
00:16:01,980 --> 00:16:05,160
where shellcode gets injected
into the executables.

322
00:16:05,160 --> 00:16:07,190
And then the whole thing gets repackaged

323
00:16:07,190 --> 00:16:10,840
and passed back to the user
and they think it was the file

324
00:16:10,840 --> 00:16:12,180
they were trying to download.

325
00:16:12,180 --> 00:16:13,880
Open it, run it, run your shellcode.

326
00:16:13,880 --> 00:16:15,890
That's the general idea.

327
00:16:15,890 --> 00:16:20,593
So our implementation of
backdoorfactory lives in Binject.

328
00:16:20,593 --> 00:16:23,770
Basically what it does, it
starts up this pipe server,

329
00:16:23,770 --> 00:16:27,383
it spits out the caplet
and bettercap config files

330
00:16:27,383 --> 00:16:29,760
that you need and it tells you exactly

331
00:16:29,760 --> 00:16:33,730
what bettercap command to
run which is just mainly

332
00:16:33,730 --> 00:16:36,570
'cause I kept forgetting
how to use bettercap.

333
00:16:36,570 --> 00:16:39,210
You may need to customize that caplet file

334
00:16:39,210 --> 00:16:40,790
in the bettercap config.

335
00:16:40,790 --> 00:16:42,470
You'll have to customize the caplet

336
00:16:42,470 --> 00:16:45,433
if you want to support
different user agents.

337
00:16:46,750 --> 00:16:48,720
If you only wanna trigger
on certain user agents,

338
00:16:48,720 --> 00:16:50,620
you can do that by regular expression

339
00:16:50,620 --> 00:16:53,960
or if you only wanna trigger
on certain file extensions,

340
00:16:53,960 --> 00:16:55,640
you can also edit that in the caplet.

341
00:16:55,640 --> 00:16:58,730
Also by default, it will do ARP spoofing

342
00:16:58,730 --> 00:17:00,130
that might be too loud.

343
00:17:00,130 --> 00:17:02,060
If you wanna do DNS poisoning,

344
00:17:02,060 --> 00:17:05,180
you'll have to edit the
default bettercap config

345
00:17:05,180 --> 00:17:06,380
that comes out of there.

346
00:17:08,020 --> 00:17:09,360
So some features that we added,

347
00:17:09,360 --> 00:17:11,420
we added support for unpacking archives.

348
00:17:11,420 --> 00:17:15,140
So it'll actually, if someone's
trying to download a TGZ

349
00:17:15,140 --> 00:17:18,600
or a ZIP file, it will
unzip that on the fly,

350
00:17:18,600 --> 00:17:20,310
inject all of the binaries inside it,

351
00:17:20,310 --> 00:17:22,810
then re-zip it and pass
it back to the user.

352
00:17:22,810 --> 00:17:24,890
We're also working on adding support

353
00:17:24,890 --> 00:17:28,500
for re-signing the binary
with a stolen or purchased key

354
00:17:29,970 --> 00:17:32,950
and we'll work on that in a sec.

355
00:17:32,950 --> 00:17:35,690
And we also ported this to Wifi Pineapple,

356
00:17:35,690 --> 00:17:38,410
because back in the day,
running backdoorfactory

357
00:17:38,410 --> 00:17:40,670
on a malicious access point was super fun

358
00:17:40,670 --> 00:17:45,240
and Golang supports easy
cross-compilation to MIPS32.

359
00:17:45,240 --> 00:17:46,320
So there are links to the bettercap

360
00:17:46,320 --> 00:17:49,713
and backdoorfactory packages
we made on this slide.

361
00:17:51,860 --> 00:17:52,793
So quick demo.

362
00:17:55,401 --> 00:17:58,450
So on the right, we're
downloading a file wget

363
00:18:01,450 --> 00:18:05,170
and unzipping it, running it, and it says

364
00:18:05,170 --> 00:18:08,120
I'm a simple program, blah, blah, blah.

365
00:18:08,120 --> 00:18:10,870
Now in the upper left, we're
starting the pipe server

366
00:18:10,870 --> 00:18:13,997
which opens up some
named pipes to binjection

367
00:18:15,230 --> 00:18:17,820
and it gave us, generated
some bettercap configs,

368
00:18:17,820 --> 00:18:20,970
gives us the command to run
bettercap in another window.

369
00:18:20,970 --> 00:18:25,440
We run bettercap and
it starts the ARP spoof

370
00:18:27,480 --> 00:18:30,563
and intercepting files using our caplet.

371
00:18:32,730 --> 00:18:35,090
So we go and download the same file

372
00:18:35,090 --> 00:18:36,373
we just downloaded again.

373
00:18:40,210 --> 00:18:42,483
You can see the size's
a little bit different.

374
00:18:44,500 --> 00:18:47,700
Unzip that, run the binary inside,

375
00:18:47,700 --> 00:18:50,220
and you can see it printed test

376
00:18:50,220 --> 00:18:54,300
in addition to the original output.

377
00:18:54,300 --> 00:18:56,330
That is a shellcode we made

378
00:18:56,330 --> 00:19:00,190
that we use as a test
shellcode which prints test,

379
00:19:00,190 --> 00:19:02,440
so that's proof that our
shellcode has been injected

380
00:19:02,440 --> 00:19:04,440
and also the original program still ran.

381
00:19:06,080 --> 00:19:08,710
So that's the new backdoorfactory.

382
00:19:08,710 --> 00:19:12,260
So because the files are
being passed in by a pipe,

383
00:19:12,260 --> 00:19:15,150
we actually don't, we lose
the extension of the file

384
00:19:15,150 --> 00:19:16,180
on the way in.

385
00:19:16,180 --> 00:19:17,660
We don't get that through the pipe,

386
00:19:17,660 --> 00:19:20,480
so we're actually using MIME.

387
00:19:20,480 --> 00:19:23,470
So we're using a Go library
to determine the MIME type

388
00:19:23,470 --> 00:19:25,530
and then we have the switch statement

389
00:19:25,530 --> 00:19:28,580
based on the MIME type
on what injection to do

390
00:19:28,580 --> 00:19:30,210
like that's how we figure
out what file it is.

391
00:19:30,210 --> 00:19:32,330
So if you wanna extend
it, you can just extend it

392
00:19:32,330 --> 00:19:35,338
by MIME type which is
actually pretty awesome.

393
00:19:35,338 --> 00:19:38,230
There's different MIME types
for like jars than zips

394
00:19:38,230 --> 00:19:40,530
which is pretty cool, 'cause
some programs will tell you

395
00:19:40,530 --> 00:19:41,730
they're the same format.

396
00:19:43,300 --> 00:19:48,300
And the main call to
binjection looks like this

397
00:19:48,310 --> 00:19:50,840
inside backdoorfactory,
it's injective binary.

398
00:19:50,840 --> 00:19:53,400
It does a quick check of the magic number

399
00:19:53,400 --> 00:19:56,614
to see if it's a Mach-O, ELF, or PE.

400
00:19:56,614 --> 00:20:01,150
And then it calls, it pulls
the appropriate shellcode

401
00:20:01,150 --> 00:20:04,890
and then calls Binject
near the bottom there

402
00:20:06,390 --> 00:20:11,250
to inject the appropriate
shellcode into the binary.

403
00:20:11,250 --> 00:20:16,200
So signing from Golang is
also very well-supported.

404
00:20:16,200 --> 00:20:20,050
The two main libraries I'd
recommend that you check out,

405
00:20:20,050 --> 00:20:23,100
one is called Limelighter which,

406
00:20:23,100 --> 00:20:26,536
it does authenticode
signing of EXEs and DLLs.

407
00:20:26,536 --> 00:20:30,210
You can either use a real cert
or it'll make one up for you

408
00:20:30,210 --> 00:20:33,000
which is also kind of
handy for EDR evasion.

409
00:20:33,000 --> 00:20:34,130
Another one that's a little bit heavier,

410
00:20:34,130 --> 00:20:37,840
but signs everything is Relic and Relic

411
00:20:37,840 --> 00:20:39,991
not only does the
authenticode signing stuff,

412
00:20:39,991 --> 00:20:44,991
it also supports like CentOS
RPMs, Debian DEB files,

413
00:20:45,080 --> 00:20:49,810
Java JAR files, Silverlight
XAP files which is pretty handy

414
00:20:51,150 --> 00:20:53,100
if you can still find some Silverlight.

415
00:20:54,056 --> 00:20:59,056
PowerScript, Android APKs, and
Mach-Os, and DMGs for Macs.

416
00:21:00,632 --> 00:21:04,080
So there's a lot of
possibilities for extending

417
00:21:04,080 --> 00:21:07,083
backdoorfactory to new and
interesting file formats.

418
00:21:08,090 --> 00:21:11,140
So moving onto a different
exploitation tool.

419
00:21:11,140 --> 00:21:13,520
From C-Sto, we have goWMIExec

420
00:21:13,520 --> 00:21:17,370
which actually brings the
ability to just do remote WMI,

421
00:21:17,370 --> 00:21:20,940
Windows Management Interface calls to Go

422
00:21:20,940 --> 00:21:23,410
which lets you just run
random shell commands

423
00:21:23,410 --> 00:21:27,160
on some target Windows
machine out in space.

424
00:21:27,160 --> 00:21:28,280
There's also another library

425
00:21:28,280 --> 00:21:33,280
that gives you full SMB support, go-smb2.

426
00:21:33,560 --> 00:21:36,320
And so if you put those two together,

427
00:21:36,320 --> 00:21:39,440
you can replicate in packets
smbexec functionality,

428
00:21:39,440 --> 00:21:44,390
so you can upload a file
with go-smb to a target

429
00:21:44,390 --> 00:21:48,300
and then you can execute
it with goWMIExec.

430
00:21:48,300 --> 00:21:50,050
So you can put this in your implant

431
00:21:50,050 --> 00:21:52,170
and have it like auto-spread,

432
00:21:52,170 --> 00:21:53,969
or you can use it as an initial inject

433
00:21:53,969 --> 00:21:57,918
assuming you have creds for a Windows box.

434
00:21:57,918 --> 00:22:02,918
And so in code, it's kind
of just as easy as this.

435
00:22:03,090 --> 00:22:06,179
I couldn't fit all of the
file upload stuff in there,

436
00:22:06,179 --> 00:22:10,240
but you can see the WMI call.

437
00:22:10,240 --> 00:22:13,027
Basically, you just, you
pass a username, password,

438
00:22:13,027 --> 00:22:15,729
or you can use a hash if you have it,

439
00:22:15,729 --> 00:22:20,640
'cause C-Sto is magic and like the domain

440
00:22:20,640 --> 00:22:21,660
and the client name and stuff,

441
00:22:21,660 --> 00:22:24,470
you can either randomize
those or they're optional.

442
00:22:24,470 --> 00:22:27,393
So it's pretty easy to use.

443
00:22:28,610 --> 00:22:32,010
And for a full example of smbexec in Go

444
00:22:32,010 --> 00:22:34,200
including the file upload stuff,

445
00:22:34,200 --> 00:22:37,270
check out the source code bundle
on the Defcon media server

446
00:22:37,270 --> 00:22:42,200
for my Defcon 29 Workshop:
Writing Golang Malware

447
00:22:42,200 --> 00:22:47,090
and there's a lot more detail
in the workshop slides.

448
00:22:47,090 --> 00:22:49,600
So some other exploitation tools,

449
00:22:49,600 --> 00:22:50,433
don't have time to go into,

450
00:22:50,433 --> 00:22:54,096
but gophish is a very
popular phishing toolkit.

451
00:22:54,096 --> 00:22:58,975
Gobuster is good for
brute-forcing sub-domains.

452
00:22:58,975 --> 00:23:02,490
There's a little DNS server
you can use for XXEs.

453
00:23:02,490 --> 00:23:04,090
It's also good for DNS blackholing

454
00:23:04,090 --> 00:23:06,550
which is good for Android reversing.

455
00:23:06,550 --> 00:23:10,350
And there's also modlishka which
is a phishing reverse proxy

456
00:23:10,350 --> 00:23:14,230
which has some novel
2FA bypass stuff in it.

457
00:23:14,230 --> 00:23:17,940
So those are all Go repos
you should check out

458
00:23:17,940 --> 00:23:20,040
or use as a reference.

459
00:23:20,040 --> 00:23:22,563
Moving onto EDR and NIDS evasion tools.

460
00:23:23,550 --> 00:23:25,400
The most important one is garble.

461
00:23:25,400 --> 00:23:28,410
This is the state of the
art Golang obfuscator.

462
00:23:28,410 --> 00:23:31,850
It does not do control
obfuscation unfortunately,

463
00:23:31,850 --> 00:23:34,060
but hopefully that's coming.

464
00:23:34,060 --> 00:23:37,542
But it will strip out
almost all Go metadata

465
00:23:37,542 --> 00:23:40,120
and with the optional
dash literals command,

466
00:23:40,120 --> 00:23:43,140
it will replace string
literals with lambdas

467
00:23:43,140 --> 00:23:46,093
which is very important for avoiding sigs.

468
00:23:47,770 --> 00:23:50,433
And gobfuscate was a bit broken.

469
00:23:54,542 --> 00:23:56,150
It was slow, it didn't
work with Go modules,

470
00:23:56,150 --> 00:23:57,890
it had trouble with dependencies.

471
00:23:57,890 --> 00:24:00,890
Garble fixes all of that,
it's actually remarkably fast,

472
00:24:00,890 --> 00:24:02,620
it's incredibly easy to use,

473
00:24:02,620 --> 00:24:06,610
and I haven't seen it choke
on anything at all yet

474
00:24:06,610 --> 00:24:09,540
which is amazing, so
there's really no reason

475
00:24:09,540 --> 00:24:13,393
not to use garble on
everything as far as I know.

476
00:24:14,300 --> 00:24:17,660
And definitely try that Redress tool.

477
00:24:17,660 --> 00:24:20,670
Try Redress on something
before you garble it

478
00:24:20,670 --> 00:24:23,860
and then try it after you
garble it and see what happens.

479
00:24:23,860 --> 00:24:25,860
That's probably a good time.

480
00:24:25,860 --> 00:24:28,550
So in terms of NIDS evasion,

481
00:24:28,550 --> 00:24:33,550
there's a lot of kind of
network code out there.

482
00:24:33,930 --> 00:24:36,010
My own project is Ratnet.

483
00:24:36,010 --> 00:24:39,370
It works, it has a couple
of unique features.

484
00:24:39,370 --> 00:24:41,110
It works on store and forward,

485
00:24:41,110 --> 00:24:42,950
so it actually is not stream-based.

486
00:24:42,950 --> 00:24:45,510
It bundles messages up into batches

487
00:24:45,510 --> 00:24:48,120
and each message is
individually and end-encrypted,

488
00:24:48,120 --> 00:24:52,770
but the batches are also encrypted
separately for every hop.

489
00:24:52,770 --> 00:24:54,080
It works on mesh routing,

490
00:24:54,080 --> 00:24:56,463
so every Ratnet node acts as a router.

491
00:24:57,426 --> 00:25:00,210
And it also supports pluggable transports.

492
00:25:00,210 --> 00:25:02,720
You can have different
transports between hops.

493
00:25:02,720 --> 00:25:05,302
You can also support
multiple transports at once

494
00:25:05,302 --> 00:25:08,040
and you can dynamically
change between transports.

495
00:25:08,040 --> 00:25:10,720
So the transports that we ship with,

496
00:25:10,720 --> 00:25:14,550
we have UDP, TLS, HTTPS
which is like cloud-fronting,

497
00:25:14,550 --> 00:25:18,150
and we also have DNS,
and AWS S3 as a transport

498
00:25:19,350 --> 00:25:20,993
which is pretty neat.

499
00:25:22,170 --> 00:25:25,590
And this also works without the Internet

500
00:25:25,590 --> 00:25:27,330
as just a mesh routing middleware

501
00:25:27,330 --> 00:25:31,140
and I'm working on a handheld
Ratnet-based hardware device

502
00:25:31,140 --> 00:25:33,640
which will come out as a
crowd supply next year,

503
00:25:33,640 --> 00:25:35,860
so watch this space for that.

504
00:25:35,860 --> 00:25:39,550
So a couple of use cases
that we support with Ratnet.

505
00:25:39,550 --> 00:25:44,049
One is, say you've hit a bunch
of machines with an implant

506
00:25:44,049 --> 00:25:47,520
and you, not all of them
have direct Internet access

507
00:25:47,520 --> 00:25:51,080
and you want pivot, you
want to be able to talk

508
00:25:51,080 --> 00:25:54,233
to all of the implants from your C2.

509
00:25:55,986 --> 00:25:58,660
So what you can do is
you can make an implant

510
00:25:58,660 --> 00:26:02,533
where the implants find each
other using mDNS or multicast.

511
00:26:03,936 --> 00:26:07,390
And if they can't get to
the Internet directly,

512
00:26:07,390 --> 00:26:11,560
they will just automatically
route all of their messages out

513
00:26:11,560 --> 00:26:13,530
through one of their peers.

514
00:26:13,530 --> 00:26:16,520
And if any one of those
peers can find their way

515
00:26:16,520 --> 00:26:19,540
out to the Internet to
the C2, you can actually,

516
00:26:19,540 --> 00:26:21,210
it'll just automatically make a network

517
00:26:21,210 --> 00:26:23,770
and you can talk to all of the implants,

518
00:26:23,770 --> 00:26:24,660
because the implants in the middle

519
00:26:24,660 --> 00:26:25,850
will automatically act as a router,

520
00:26:25,850 --> 00:26:28,070
'cause that's how Ratnet works.

521
00:26:28,070 --> 00:26:30,210
So there's actually a demo of this working

522
00:26:30,210 --> 00:26:31,873
also in the workshop source code.

523
00:26:33,280 --> 00:26:35,770
The other use case that
we wanna support is

524
00:26:35,770 --> 00:26:40,450
if you drop an implant into
an egress proxy data center.

525
00:26:40,450 --> 00:26:44,870
So if all web traffic or like
almost all traffic is blocked

526
00:26:44,870 --> 00:26:47,333
out to the open Internet
from where you are,

527
00:26:48,370 --> 00:26:50,070
you can still usually get out with DNS,

528
00:26:50,070 --> 00:26:53,700
because the local DNS
server will hopefully pass

529
00:26:53,700 --> 00:26:55,940
look-ups out through recursion.

530
00:26:55,940 --> 00:26:59,640
So that's why the, that's
what the DNS transport is for.

531
00:26:59,640 --> 00:27:01,380
You also might find
yourself in a situation

532
00:27:01,380 --> 00:27:02,760
where lots of things are blocked,

533
00:27:02,760 --> 00:27:04,430
but some things are whitelisted,

534
00:27:04,430 --> 00:27:07,850
and in those situations,
typically AWS is whitelisted,

535
00:27:07,850 --> 00:27:09,890
because almost everything is using AWS

536
00:27:09,890 --> 00:27:10,990
at least a little bit.

537
00:27:13,030 --> 00:27:15,350
So there's a lot of other Ratnet, sorry,

538
00:27:15,350 --> 00:27:16,950
there's a lot of other Golang tunnels

539
00:27:16,950 --> 00:27:19,253
and proxies to look at other than Ratnet.

540
00:27:20,370 --> 00:27:23,340
So some of the popular ones
are Chashell and Chisel

541
00:27:23,340 --> 00:27:24,860
which got used together

542
00:27:24,860 --> 00:27:26,610
in a ransomware attack very recently.

543
00:27:26,610 --> 00:27:30,000
There's a link in this to a
very interesting breakdown

544
00:27:30,000 --> 00:27:32,053
of some ransomware that used those two.

545
00:27:33,030 --> 00:27:37,560
And there's also Wireguard
as a distributed VPN

546
00:27:37,560 --> 00:27:38,950
which is actually commercial product

547
00:27:38,950 --> 00:27:42,900
which is implemented in Go
and very worth checking out.

548
00:27:42,900 --> 00:27:45,930
It's a lot easier to set up
than OpenVPN just in general.

549
00:27:45,930 --> 00:27:49,640
And so there's a lot of other
tunnel and proxy code in Go,

550
00:27:49,640 --> 00:27:52,203
because Go is typically very stable.

551
00:27:54,600 --> 00:27:57,070
Probably more resulted the
built-in testing framework

552
00:27:57,070 --> 00:27:59,490
than anything else, but there's a lot of

553
00:27:59,490 --> 00:28:01,810
good network stuff in Go.

554
00:28:01,810 --> 00:28:05,510
Moving on to another EDR evasion tool.

555
00:28:05,510 --> 00:28:08,640
There's pandorasbox, so
I mentioned that Golang

556
00:28:08,640 --> 00:28:11,310
has native support for
a virtual file system.

557
00:28:11,310 --> 00:28:14,468
That means that anytime in Go
you're referring to a file,

558
00:28:14,468 --> 00:28:18,500
you can totally control
the file abstraction.

559
00:28:18,500 --> 00:28:21,180
It doesn't really have
to go to the file system.

560
00:28:21,180 --> 00:28:25,000
You can make a, for example,
an encrypted in-memory

561
00:28:25,000 --> 00:28:28,270
virtual file system and
use it exactly the same way

562
00:28:28,270 --> 00:28:30,790
from your Go code that
you talk to normal files

563
00:28:30,790 --> 00:28:32,750
and that is what pandorasbox does.

564
00:28:32,750 --> 00:28:36,550
It basically is a shim
between the MemGuard library

565
00:28:36,550 --> 00:28:38,680
which tries as hard as it possibly can

566
00:28:38,680 --> 00:28:41,600
to give you a secure enclave in memory

567
00:28:41,600 --> 00:28:45,120
to protect what you're
putting in a MemGuarded region

568
00:28:45,120 --> 00:28:48,920
from tools like Volatility
or other analysis tools.

569
00:28:48,920 --> 00:28:53,670
And so basically pandorasbox
is the bridge between

570
00:28:53,670 --> 00:28:57,256
the Golang file abstraction and MemGuard,

571
00:28:57,256 --> 00:29:02,256
but it gives you an encrypted
VFS very, very easily.

572
00:29:03,730 --> 00:29:07,123
Definitely worth checking out.

573
00:29:08,820 --> 00:29:11,210
So this is another one of my tools,

574
00:29:11,210 --> 00:29:13,680
I call it the Universal Loader.

575
00:29:13,680 --> 00:29:16,970
I implemented reflective
DLL loading in Golang

576
00:29:16,970 --> 00:29:21,030
for all platforms including the Apple M1,

577
00:29:21,030 --> 00:29:24,150
so it actually works with ARM 64.

578
00:29:24,150 --> 00:29:27,390
This might be the first
loader I've seen anywhere

579
00:29:27,390 --> 00:29:28,890
that actually supports the M1.

580
00:29:30,250 --> 00:29:32,370
Although other than that,
it's doing a lot of sort of

581
00:29:32,370 --> 00:29:34,503
traditional reflective DLL loading stuff.

582
00:29:35,410 --> 00:29:38,080
So reflective DLL loading
basically mimics the behavior

583
00:29:38,080 --> 00:29:40,000
of the system loader when it loads

584
00:29:40,000 --> 00:29:41,853
a dynamic library into a process.

585
00:29:42,960 --> 00:29:45,040
It just does all the things
the system loader does

586
00:29:45,040 --> 00:29:47,760
as best it can, so it loads the library

587
00:29:47,760 --> 00:29:49,670
into the process, lets you call functions

588
00:29:49,670 --> 00:29:52,660
that were in the library,
but doing it reflectively

589
00:29:52,660 --> 00:29:54,180
means that you never need to touch disk

590
00:29:54,180 --> 00:29:55,890
which is the main advantage.

591
00:29:55,890 --> 00:29:58,413
If you never touch disk,
maybe a V never triggers.

592
00:30:00,356 --> 00:30:05,356
Duh-duh-duh, so...the back
ends for the Universal Loader

593
00:30:09,900 --> 00:30:13,030
for Windows, OSX, and Linux
are a little bit different.

594
00:30:13,030 --> 00:30:15,967
The Windows method does
not use the system loader.

595
00:30:15,967 --> 00:30:19,920
It does use some Go
assembly to walk the PEB

596
00:30:19,920 --> 00:30:24,700
and figure out, and then
it uses binjectdebug

597
00:30:24,700 --> 00:30:26,210
to like parse the process you're in

598
00:30:26,210 --> 00:30:29,883
and like figure out the imports
and exports of everything.

599
00:30:31,430 --> 00:30:33,390
And there is a branch
of the Universal Loader

600
00:30:33,390 --> 00:30:35,560
that actually does the
import address table fix-ups.

601
00:30:35,560 --> 00:30:37,210
It's called import address table.

602
00:30:38,140 --> 00:30:43,140
And so if you are loading a library

603
00:30:43,420 --> 00:30:45,150
that depends on other libraries,

604
00:30:45,150 --> 00:30:48,303
you will definitely need
to use the IAT branch.

605
00:30:49,650 --> 00:30:54,120
The OSX method actually
does use the system loader.

606
00:30:54,120 --> 00:30:56,330
We followed a training from MalwareUnicorn

607
00:30:56,330 --> 00:30:59,950
which I highly recommend checking
out on writing OSX malware

608
00:30:59,950 --> 00:31:04,720
and it actually finds where
the dynamic loader library

609
00:31:04,720 --> 00:31:08,960
is in memory and then
parses it with Binject,

610
00:31:08,960 --> 00:31:11,040
finds a couple of key functions in there

611
00:31:11,040 --> 00:31:14,630
that for some reason OSX is
the only operating system

612
00:31:14,630 --> 00:31:17,780
that has a built-in part
of the operating system

613
00:31:17,780 --> 00:31:21,070
that lets you load a library from RAM.

614
00:31:21,070 --> 00:31:24,260
Both Windows and Linux
require a file somewhere,

615
00:31:24,260 --> 00:31:27,347
but OSX does not, so we just use that,

616
00:31:27,347 --> 00:31:29,720
"Oh, load a library from RAM" method

617
00:31:29,720 --> 00:31:32,280
and Bob's your uncle,
so that's kind of why

618
00:31:32,280 --> 00:31:36,090
we're using the system loader
for OSX and no one else.

619
00:31:36,090 --> 00:31:38,323
And then the Linux method

620
00:31:38,323 --> 00:31:41,070
does not use the system loader either,

621
00:31:41,070 --> 00:31:42,480
but it also does not use memfd.

622
00:31:42,480 --> 00:31:46,300
It really does a reflective
library load for Linux.

623
00:31:46,300 --> 00:31:49,000
Memfd is a Linux RAM disk

624
00:31:49,000 --> 00:31:54,000
and the previous loaders
for Golang just dumped your

625
00:31:54,540 --> 00:31:59,540
library to memfd and then
just loaded it with dlopen.

626
00:31:59,560 --> 00:32:03,260
We do not do that, although
it is easy and it works.

627
00:32:03,260 --> 00:32:06,990
Use of memfd is unusual
and it's easy to detect.

628
00:32:06,990 --> 00:32:10,450
So doing an actual reflective library load

629
00:32:10,450 --> 00:32:13,853
is a bit stealthier and
that's what we're doing.

630
00:32:16,180 --> 00:32:17,920
So this is what it looks like in code.

631
00:32:17,920 --> 00:32:19,960
The interface, as I said
in code, is the same

632
00:32:19,960 --> 00:32:21,530
for all operating systems.

633
00:32:21,530 --> 00:32:24,700
Basically, you got your
library loaded in a buffer.

634
00:32:24,700 --> 00:32:26,570
You make a new loader with new loader,

635
00:32:26,570 --> 00:32:28,360
you call loader.LoadLibrary.

636
00:32:28,360 --> 00:32:32,250
That's the universal, loading
your buffer as a library,

637
00:32:32,250 --> 00:32:34,887
and that will under the
hood work differently

638
00:32:34,887 --> 00:32:38,150
for whatever operating
system you compile it for,

639
00:32:38,150 --> 00:32:40,050
but the interface remains the same.

640
00:32:40,050 --> 00:32:43,783
And then you can just call
exported functions in it

641
00:32:43,783 --> 00:32:46,190
with that library.call.

642
00:32:46,190 --> 00:32:47,550
In this example, we're
calling the function

643
00:32:47,550 --> 00:32:50,300
called the runme, we're
passing it the argument seven.

644
00:32:50,300 --> 00:32:51,790
So this is just a super simple example,

645
00:32:51,790 --> 00:32:53,880
but it's gonna be exactly like this

646
00:32:53,880 --> 00:32:54,713
for every operating system.

647
00:32:54,713 --> 00:32:56,680
The only thing that'll
change is the library

648
00:32:56,680 --> 00:32:57,830
that you actually load.

649
00:32:58,830 --> 00:33:00,663
So a couple of notes.

650
00:33:02,570 --> 00:33:04,600
Because you're not
using the system loader,

651
00:33:04,600 --> 00:33:06,010
the libraries that you're dependent on

652
00:33:06,010 --> 00:33:07,730
will not automatically be loaded for you.

653
00:33:07,730 --> 00:33:10,730
So for Windows, you have to
use the IAT branch as I said.

654
00:33:10,730 --> 00:33:12,770
But then every library that you depend on,

655
00:33:12,770 --> 00:33:16,390
you have to call
syscall.MustLoadDLL for that library

656
00:33:16,390 --> 00:33:19,320
to make sure that it's already
loaded and present for you

657
00:33:19,320 --> 00:33:21,093
before you use Universal,

658
00:33:22,070 --> 00:33:24,680
but it'll automatically
work it out from there.

659
00:33:24,680 --> 00:33:27,740
And for Linux, I would just recommend

660
00:33:27,740 --> 00:33:29,610
that you statically compile the libraries

661
00:33:29,610 --> 00:33:31,090
you need to load with Universal,

662
00:33:31,090 --> 00:33:32,150
'cause you can do that for Linux.

663
00:33:32,150 --> 00:33:34,250
It doesn't really work for Windows,

664
00:33:34,250 --> 00:33:36,373
but if you just statically
compile a library

665
00:33:36,373 --> 00:33:39,640
like it'll just work fine and it's easy.

666
00:33:39,640 --> 00:33:42,370
All right, moving on to
our next tool is Donut.

667
00:33:42,370 --> 00:33:45,649
Donut is amazing, it is a
payload creation framework

668
00:33:45,649 --> 00:33:50,437
that lets you convert any
executable, DLL, .NET assembly,

669
00:33:50,437 --> 00:33:54,637
or VBS to an encrypted
injectable shellcode.

670
00:33:55,490 --> 00:33:58,710
And then it is also the assembly loader

671
00:33:58,710 --> 00:34:02,210
that decrypts and loads those
payloads into a process.

672
00:34:02,210 --> 00:34:03,830
It is very configurable.

673
00:34:03,830 --> 00:34:05,810
Definitely check it out.

674
00:34:05,810 --> 00:34:10,460
One of its cool features is
that it supports remote loads,

675
00:34:10,460 --> 00:34:12,330
so you can actually configure the loader

676
00:34:12,330 --> 00:34:15,250
to pull down the rest of the
payload from a web server

677
00:34:15,250 --> 00:34:19,223
instead of having to bundle
it in which is pretty sick.

678
00:34:21,337 --> 00:34:25,700
And so I ported the utility
that converts things

679
00:34:25,700 --> 00:34:28,680
to Donut payloads to Go,

680
00:34:28,680 --> 00:34:32,323
so that you can use it from
an implant or from a C2.

681
00:34:33,460 --> 00:34:36,500
And you might be wondering
why would you wanna do this.

682
00:34:36,500 --> 00:34:38,070
We'll see an example in a minute.

683
00:34:38,070 --> 00:34:40,810
Turns out to be a
surprisingly handy thing to do

684
00:34:40,810 --> 00:34:42,860
and because it's Pure Go,
you can now do this from

685
00:34:42,860 --> 00:34:44,740
any operating system.

686
00:34:44,740 --> 00:34:47,361
So most people's C2s are
on Linux, not Windows,

687
00:34:47,361 --> 00:34:48,753
so that comes in handy.

688
00:34:49,750 --> 00:34:52,890
So a note, you could use
both Universal or Donut

689
00:34:52,890 --> 00:34:55,300
as a module system for your implants.

690
00:34:55,300 --> 00:34:58,563
A note on why you might
wanna do one or the other.

691
00:34:59,400 --> 00:35:02,060
So basically, Donuts,

692
00:35:02,060 --> 00:35:06,120
you can make run in a
process all by themself.

693
00:35:06,120 --> 00:35:08,470
Universal will try and load a library

694
00:35:08,470 --> 00:35:09,710
in your current process.

695
00:35:09,710 --> 00:35:12,460
There are a few situations
that will break Universal,

696
00:35:12,460 --> 00:35:13,917
because there are things that don't

697
00:35:13,917 --> 00:35:16,550
like running not on the main thread.

698
00:35:16,550 --> 00:35:20,630
For example, mimikatz starts
up some COM hosting stuff

699
00:35:20,630 --> 00:35:23,254
that doesn't work right if
it's not on the main thread.

700
00:35:23,254 --> 00:35:26,954
So I don't think it's ever
gonna work right in Universal

701
00:35:26,954 --> 00:35:31,340
which means, but it works fine
through Donut as we'll see.

702
00:35:31,340 --> 00:35:34,431
And there's also a Go
scheduler bug that's linked

703
00:35:34,431 --> 00:35:38,610
and so you can often run into problems

704
00:35:38,610 --> 00:35:41,560
if you try and load two Go
runtimes in the same thread.

705
00:35:41,560 --> 00:35:46,381
So if you're loading another
Go program with Universal,

706
00:35:46,381 --> 00:35:49,290
you might be better off with Donut instead

707
00:35:49,290 --> 00:35:51,499
just to avoid, a load is possible.

708
00:35:51,499 --> 00:35:56,499
It is easier to avoid having
two runtimes in one process

709
00:35:58,882 --> 00:36:01,940
and so you can just use
Donut instead of Universal

710
00:36:01,940 --> 00:36:03,250
in that situation.

711
00:36:03,250 --> 00:36:06,200
There's another payload creation
framework called Scarecrow

712
00:36:06,200 --> 00:36:09,620
which is very popular and
definitely worth checking out.

713
00:36:09,620 --> 00:36:11,573
It does some kind of funny stuff.

714
00:36:13,240 --> 00:36:15,600
It signs its loader using Limelighter

715
00:36:15,600 --> 00:36:17,490
as we mentioned before even if you don't

716
00:36:17,490 --> 00:36:19,440
give it a cert, it'll just sign it anyway

717
00:36:19,440 --> 00:36:21,550
as a way of reducing EDR signal.

718
00:36:21,550 --> 00:36:24,340
And its kind of unique
and most badass feature

719
00:36:24,340 --> 00:36:27,500
is that it implements, it
disables the Windows Event Toolkit

720
00:36:27,500 --> 00:36:32,398
which a lot of EDRs rely
on by unhooking itself

721
00:36:32,398 --> 00:36:36,740
in memory from EDR, or sorry, from ETW

722
00:36:36,740 --> 00:36:40,240
which is super cool
and worth checking out.

723
00:36:40,240 --> 00:36:42,390
And this is open source
too, so that's like

724
00:36:43,710 --> 00:36:46,870
code worth stealing or just use Scarecrow.

725
00:36:46,870 --> 00:36:47,820
A lot of people do.

726
00:36:49,020 --> 00:36:52,460
So now, bananaphone I almost put

727
00:36:52,460 --> 00:36:54,350
in the core components category.

728
00:36:54,350 --> 00:36:57,310
It is so cool, and so important,

729
00:36:57,310 --> 00:36:59,540
and so awesome for EDR evasion.

730
00:36:59,540 --> 00:37:01,290
It is an implementation of Hell's Gate

731
00:37:01,290 --> 00:37:05,150
or direct system calls in Go.

732
00:37:05,150 --> 00:37:07,100
There's a link to the original paper here,

733
00:37:07,100 --> 00:37:10,984
but basically what that means,
there are stubs in NTDLL

734
00:37:10,984 --> 00:37:14,690
that everything is in
Windows compiled to use

735
00:37:14,690 --> 00:37:16,540
that then in turn calls system calls.

736
00:37:17,700 --> 00:37:20,030
But those stubs in NTDLL
are commonly hooked

737
00:37:20,030 --> 00:37:21,927
or monitored by EDR.

738
00:37:23,920 --> 00:37:28,090
And so you can just parse NTDLL,

739
00:37:28,090 --> 00:37:30,760
'cause it's already loaded
in your process, I guarantee.

740
00:37:30,760 --> 00:37:33,607
So you can look at your run
process memory, look at NTDLL,

741
00:37:33,607 --> 00:37:36,410
figure out where those
direct system calls go,

742
00:37:36,410 --> 00:37:37,990
set up a call frame yourself,

743
00:37:37,990 --> 00:37:40,110
and just call them directly and not bother

744
00:37:40,110 --> 00:37:42,450
going through NTDLL thus avoiding hooks.

745
00:37:42,450 --> 00:37:43,870
That's what Hell's Gate is.

746
00:37:43,870 --> 00:37:47,430
So bananaphone is a completely
transparent implementation

747
00:37:47,430 --> 00:37:51,490
of Hell's Gate, it's very
easy to port existing Go code

748
00:37:51,490 --> 00:37:53,700
that uses syscall to bananaphone,

749
00:37:53,700 --> 00:37:56,998
because C-Sto was kind enough to

750
00:37:56,998 --> 00:38:00,030
make a version of the mkwinsyscall utility

751
00:38:00,030 --> 00:38:04,650
that converts headers to Go stubs.

752
00:38:04,650 --> 00:38:07,540
He made a version of that
called make direct win syscall

753
00:38:07,540 --> 00:38:11,860
which converts headers
to Hell's Gate-d Go stubs

754
00:38:11,860 --> 00:38:13,820
and it works exactly
the same way as syscall,

755
00:38:13,820 --> 00:38:16,450
so it's just mad easy to
convert syscall code over.

756
00:38:16,450 --> 00:38:17,810
Highly recommend doing that.

757
00:38:17,810 --> 00:38:20,220
It also has a unique improvement

758
00:38:20,220 --> 00:38:23,684
over traditional Hell's Gate
found kind of by accident,

759
00:38:23,684 --> 00:38:28,040
but there's auto mode will actually detect

760
00:38:28,040 --> 00:38:31,410
when your in-memory NTDLL
has been hooked by EDR

761
00:38:31,410 --> 00:38:33,920
and automatically fall back to reloading

762
00:38:33,920 --> 00:38:36,680
a fresh copy of NTDLL from disk

763
00:38:36,680 --> 00:38:38,350
instead of the hooked
version, the one on disk

764
00:38:38,350 --> 00:38:40,908
will not be hooked and you
can parse the one on disk

765
00:38:40,908 --> 00:38:45,310
to figure out where the, to
make the direct syscall to

766
00:38:45,310 --> 00:38:46,730
and it works just as well.

767
00:38:46,730 --> 00:38:50,210
And although this creates
theoretically more signal,

768
00:38:50,210 --> 00:38:52,723
because loading another
copy of NTDLL is sketchy,

769
00:38:53,890 --> 00:38:57,810
in practice, this actually
works pretty well.

770
00:38:57,810 --> 00:39:00,740
It works on one of the more popular EDRs

771
00:39:00,740 --> 00:39:02,593
without triggering anything.

772
00:39:02,593 --> 00:39:05,243
So that's kind of neat.

773
00:39:05,243 --> 00:39:09,000
There's also an implementation
of Heaven's Gate in Go

774
00:39:10,200 --> 00:39:12,510
called gopherheaven and this is another

775
00:39:12,510 --> 00:39:16,070
EDR evasion technique
where you call 64-bit code

776
00:39:16,070 --> 00:39:18,120
from 32-bit code, 'cause nobody

777
00:39:18,120 --> 00:39:21,056
is expecting 32-bit code, boy.

778
00:39:21,056 --> 00:39:23,469
And so this is pretty slick.

779
00:39:23,469 --> 00:39:26,220
And this also has a really great example

780
00:39:26,220 --> 00:39:31,220
of 32-bit 386 Go assembly
in case you need that

781
00:39:31,920 --> 00:39:32,753
for some reason.

782
00:39:32,753 --> 00:39:36,373
This is one of the few
examples that works.

783
00:39:38,090 --> 00:39:42,100
All right, so we've gone
over a bunch of EDR evasion

784
00:39:42,100 --> 00:39:43,350
and NIDS evasion tools.

785
00:39:43,350 --> 00:39:46,310
Let's go on to post-exploitation
which is super fun,

786
00:39:46,310 --> 00:39:47,360
'cause it's the loot.

787
00:39:48,320 --> 00:39:50,800
So go-mimikatz, basically

788
00:39:50,800 --> 00:39:53,450
this combines go-donut and bananaphone.

789
00:39:53,450 --> 00:39:55,000
It downloads mimikatz to memory,

790
00:39:55,000 --> 00:39:58,170
makes it into a donut payload,
injects it into itself,

791
00:39:58,170 --> 00:40:00,830
into its own process of
bananaphone system calls

792
00:40:00,830 --> 00:40:03,410
and it lets you run mimikatz on systems

793
00:40:03,410 --> 00:40:05,260
where you really shouldn't be able to.

794
00:40:05,260 --> 00:40:07,260
The whole program is 150 lines of code.

795
00:40:07,260 --> 00:40:10,667
This is the best example of
bananaphone and go-donut.

796
00:40:10,667 --> 00:40:12,213
There's the go-donut bit up top

797
00:40:12,213 --> 00:40:14,530
and the bananaphone bit down bottom.

798
00:40:14,530 --> 00:40:16,480
I couldn't fit 150 lines in a slide,

799
00:40:16,480 --> 00:40:18,540
but you can pull it up on a browser.

800
00:40:18,540 --> 00:40:19,440
I made a quick demo.

801
00:40:19,440 --> 00:40:24,020
I cross-compiled go-mimikatz
to Windows AMD 64.

802
00:40:24,020 --> 00:40:25,070
That's all you have to do

803
00:40:25,070 --> 00:40:27,069
to cross-compile it in Go
by the way, super easy.

804
00:40:27,069 --> 00:40:30,630
I copied it to an SMB
share with the name gm.exe.

805
00:40:30,630 --> 00:40:34,120
I did not garble it and
I set up a Win10 Edge,

806
00:40:34,120 --> 00:40:37,453
let it update, Defender's
enabled, I'm running from SMB,

807
00:40:37,453 --> 00:40:42,453
and I get the little
like proof strings up.

808
00:40:43,200 --> 00:40:45,810
And then I just run it
and bam, mimikatz runs,

809
00:40:45,810 --> 00:40:48,920
nothing flags, and I can interact with it

810
00:40:48,920 --> 00:40:50,890
which is just crazy.

811
00:40:50,890 --> 00:40:54,590
So that's current mimikatz,
current Win10 Edge.

812
00:40:54,590 --> 00:40:56,540
You will get caught by behavioral stuff

813
00:40:56,540 --> 00:40:58,410
once you start doing stuff in mimikatz,

814
00:40:58,410 --> 00:41:00,800
so you will have to do some other trickery

815
00:41:00,800 --> 00:41:03,260
to avoid the behavioral detections.

816
00:41:03,260 --> 00:41:05,779
There's another utility
worth checking out from vyrus

817
00:41:05,779 --> 00:41:08,610
called msflib which makes your

818
00:41:08,610 --> 00:41:09,830
implants work with Metasploit.

819
00:41:09,830 --> 00:41:13,770
It has all of the like
Metasploit URL generation magic.

820
00:41:13,770 --> 00:41:14,980
It also uses bananaphone.

821
00:41:14,980 --> 00:41:17,810
It also has code to run a
payload in the current process

822
00:41:17,810 --> 00:41:20,040
or inject a payload into a remote process.

823
00:41:20,040 --> 00:41:22,023
Very cool, very worth checking out.

824
00:41:23,110 --> 00:41:24,500
Writing a Windows service in Go

825
00:41:24,500 --> 00:41:25,960
can be a little bit of a pain in the ass.

826
00:41:25,960 --> 00:41:28,190
There's an example link there,

827
00:41:28,190 --> 00:41:32,150
but capnspacehook has made
the taskmaster utility

828
00:41:32,150 --> 00:41:34,210
that a lot of people used to interact

829
00:41:34,210 --> 00:41:37,397
with the Windows Task Scheduler
as a method of persistence

830
00:41:37,397 --> 00:41:39,870
to avoid having to
create a Windows service.

831
00:41:39,870 --> 00:41:42,380
You can just schedule a task
to run your thing periodically.

832
00:41:42,380 --> 00:41:43,753
Definitely check that out.

833
00:41:44,820 --> 00:41:46,610
Gscript is a whole other talk.

834
00:41:46,610 --> 00:41:48,650
There was a Defcon 26 talk on it.

835
00:41:48,650 --> 00:41:51,760
It uses an embedded JavaScript interpreter

836
00:41:51,760 --> 00:41:53,710
to make a scripting language for droppers.

837
00:41:53,710 --> 00:41:57,020
There's like a thousand
sample gscripts in ahhh's

838
00:41:57,020 --> 00:42:00,880
gscript repo that do things
like disable AV, EDR,

839
00:42:00,880 --> 00:42:02,740
firewalls, you can make registry changes,

840
00:42:02,740 --> 00:42:06,580
you can set up persistence,
you can do all kinds of things.

841
00:42:06,580 --> 00:42:08,330
So definitely check out gscript,

842
00:42:08,330 --> 00:42:12,253
it's a completely other hour long talk.

843
00:42:13,670 --> 00:42:16,190
Another tool from C-Sto for DIT dumping.

844
00:42:16,190 --> 00:42:18,000
This is another thing that Impacket does,

845
00:42:18,000 --> 00:42:19,750
but Impacket in Python is very slow.

846
00:42:19,750 --> 00:42:21,650
It takes hours to dump a DIT.

847
00:42:21,650 --> 00:42:23,363
C-Sto's tool can do it in minutes.

848
00:42:24,700 --> 00:42:26,320
Definitely check that out

849
00:42:26,320 --> 00:42:28,630
if you wanna dump hashes from a DIT.

850
00:42:28,630 --> 00:42:32,230
And the old Lazagne tool that
steals browser passwords,

851
00:42:32,230 --> 00:42:33,640
mail passwords, all kinds of passwords.

852
00:42:33,640 --> 00:42:36,310
It's been ported to Go, goLazagne.

853
00:42:36,310 --> 00:42:38,370
However, it does require CGO

854
00:42:38,370 --> 00:42:40,740
which means you need to set
up an external C compiler.

855
00:42:40,740 --> 00:42:42,730
However, the only reason it needs CGO

856
00:42:42,730 --> 00:42:44,340
is because of the dependency on SQLite,

857
00:42:44,340 --> 00:42:47,700
because the browser password
databases are SQLite databases,

858
00:42:47,700 --> 00:42:51,180
but there is now a Pure Go
implementation of SQLite

859
00:42:51,180 --> 00:42:54,580
which I've linked, so someone some day

860
00:42:54,580 --> 00:42:59,580
will modify goLazagne
to no longer require CGO

861
00:42:59,791 --> 00:43:01,583
and that would be lovely, thank you.

862
00:43:02,600 --> 00:43:04,590
There's a few other
post-exploitation tools

863
00:43:04,590 --> 00:43:06,620
you should check out including sudophisher

864
00:43:06,620 --> 00:43:09,065
which is hilarious from audibleblink

865
00:43:09,065 --> 00:43:11,200
that actually is an ASKPASS replacement

866
00:43:11,200 --> 00:43:13,030
that will log the sudo password,

867
00:43:13,030 --> 00:43:16,410
so it's just like a funny thing to do.

868
00:43:16,410 --> 00:43:18,400
And also rclone is just utility

869
00:43:18,400 --> 00:43:21,391
to loot things from cloud storage.

870
00:43:21,391 --> 00:43:23,750
So those may come in handy.

871
00:43:23,750 --> 00:43:26,580
And then we have a couple
of complete C2 frameworks

872
00:43:26,580 --> 00:43:28,350
entirely implemented in Go.

873
00:43:28,350 --> 00:43:30,040
The heavy hitter in this space is sliver

874
00:43:30,040 --> 00:43:32,480
which is an open-source
alternative to Cobalt Strike.

875
00:43:32,480 --> 00:43:35,150
It's coming along, it's
under active development.

876
00:43:35,150 --> 00:43:37,560
It's designed to be used by a team,

877
00:43:37,560 --> 00:43:41,470
so the C2 is multi-user, multi-operator

878
00:43:41,470 --> 00:43:42,670
which is pretty awesome.

879
00:43:42,670 --> 00:43:44,020
It has a huge list of features.

880
00:43:44,020 --> 00:43:46,523
It has an implant build
in obfuscate framework.

881
00:43:47,730 --> 00:43:49,150
There's so much in there.

882
00:43:49,150 --> 00:43:52,000
I don't have time to go into,
definitely check out the wiki

883
00:43:52,000 --> 00:43:54,560
on their GitHub for
instructions on how to set it up

884
00:43:54,560 --> 00:43:55,990
and check out the dev branches,

885
00:43:55,990 --> 00:43:59,613
because they have a lot of
really cool stuff cooking.

886
00:44:00,528 --> 00:44:02,250
And peer pressure them into doing

887
00:44:02,250 --> 00:44:05,513
their own Defcon talk
at some point. (laughs)

888
00:44:07,140 --> 00:44:10,633
Another C2 framework definitely
worth mentioning is merlin.

889
00:44:11,620 --> 00:44:14,470
The only downside of merlin
is that it's single operator,

890
00:44:15,833 --> 00:44:17,670
but it has some unique features that are

891
00:44:17,670 --> 00:44:18,860
not really in anything else.

892
00:44:18,860 --> 00:44:20,610
It supports a ton of injection methods,

893
00:44:20,610 --> 00:44:22,163
but the one that sticks out

894
00:44:22,163 --> 00:44:25,517
is that it has an implementation
in Go of QueueUserAPC.

895
00:44:26,720 --> 00:44:28,670
Definitely worth checking that out.

896
00:44:28,670 --> 00:44:30,080
It also has integration with Donut

897
00:44:30,080 --> 00:44:32,453
and another common loader which is sRDI.

898
00:44:33,290 --> 00:44:36,790
And it does support many C2
protocols also like sliver,

899
00:44:36,790 --> 00:44:40,143
but it has QUIC support
which is pretty cool.

900
00:44:42,800 --> 00:44:45,473
So that's my time, thank you very much.

901
00:44:46,632 --> 00:44:49,060
As a reminder, I do host a
podcast called "Hack the Planet"

902
00:44:49,060 --> 00:44:51,537
and there are a few
interviews we've done on

903
00:44:51,537 --> 00:44:52,910
"Hack the Planet" relevant to this talk.

904
00:44:52,910 --> 00:44:55,640
We have an interview with Josh
Pitts which is phenomenal,

905
00:44:55,640 --> 00:44:59,840
the author of Ebowla and the
original backdoorfactory.

906
00:44:59,840 --> 00:45:02,309
And we have another episode
entirely on Golang malware

907
00:45:02,309 --> 00:45:05,410
featuring C-Sto and capnspacehook,

908
00:45:05,410 --> 00:45:08,260
the authors of some of the
utilities I mentioned earlier.

909
00:45:09,120 --> 00:45:12,883
So thank you very much, bye, Defcon 29.

910
00:45:14,860 --> 00:45:19,860
And I hope I gave you some ideas
for writing Golang malware,

911
00:45:21,550 --> 00:45:24,290
or even improving detections,

912
00:45:24,290 --> 00:45:27,263
or reversing for Golang
malware, thank you.

