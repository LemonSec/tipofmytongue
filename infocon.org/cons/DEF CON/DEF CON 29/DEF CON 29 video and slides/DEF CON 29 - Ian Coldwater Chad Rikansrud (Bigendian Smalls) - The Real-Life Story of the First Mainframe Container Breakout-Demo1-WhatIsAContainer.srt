1
00:00:00,730 --> 00:00:01,890
- [Instructor] What this also means

2
00:00:01,890 --> 00:00:03,860
is that you can look
at a container process

3
00:00:03,860 --> 00:00:06,330
like you could any other
process on a Linux host.

4
00:00:06,330 --> 00:00:08,890
For this demo, we've already
escaped to the ZCX host,

5
00:00:08,890 --> 00:00:10,290
so we're looking from there.

6
00:00:11,630 --> 00:00:12,700
Let's run a container with the name

7
00:00:12,700 --> 00:00:15,520
honk command sleep 1312.

8
00:00:15,520 --> 00:00:17,280
The honk isn't really necessary here.

9
00:00:17,280 --> 00:00:19,120
I just wanted to honk at you.

10
00:00:19,120 --> 00:00:20,370
If we list our containers,

11
00:00:20,370 --> 00:00:22,890
we can then see that container running.

12
00:00:22,890 --> 00:00:25,620
We can see this or any other
container on the outside

13
00:00:25,620 --> 00:00:27,050
by running a ps command,

14
00:00:27,050 --> 00:00:29,010
which will show us containers
running on the host

15
00:00:29,010 --> 00:00:30,760
alongside other processes.

16
00:00:30,760 --> 00:00:33,250
This command output will
give you the process ID,

17
00:00:33,250 --> 00:00:35,160
the user running it, the
pid namespace number,

18
00:00:35,160 --> 00:00:37,230
and the command-line argument.

19
00:00:37,230 --> 00:00:39,670
If we want to take a look at
the inside of the container,

20
00:00:39,670 --> 00:00:42,200
we can do so by looking
at the proc/ns folder

21
00:00:42,200 --> 00:00:44,440
for the process ID of that container.

22
00:00:44,440 --> 00:00:46,660
We found the pit of the
container we just created

23
00:00:46,660 --> 00:00:48,900
in the ps command output we just ran.

24
00:00:48,900 --> 00:00:50,150
Let's take a closer look.

25
00:00:51,270 --> 00:00:53,780
We take a look here, we can
see the cgroup at the top

26
00:00:53,780 --> 00:00:55,770
and the other namespaces on the bottom.

27
00:00:55,770 --> 00:00:59,030
All processes in Linux are
made up of these namespaces.

28
00:00:59,030 --> 00:01:00,760
As of kernel version 5.6,

29
00:01:00,760 --> 00:01:02,220
there's also a time namespace,

30
00:01:02,220 --> 00:01:04,050
but ZCX runs an old-ass kernel,

31
00:01:04,050 --> 00:01:05,950
so this demo won't show you that one.

32
00:01:05,950 --> 00:01:07,200
Depending on the configuration

33
00:01:07,200 --> 00:01:08,690
and how the container was created,

34
00:01:08,690 --> 00:01:10,950
some of these namespaces
might be shared with the host

35
00:01:10,950 --> 00:01:13,350
and some might be unique to the container.

36
00:01:13,350 --> 00:01:14,880
We're not going to get into that here,

37
00:01:14,880 --> 00:01:16,550
but I recommend checking out the resources

38
00:01:16,550 --> 00:01:18,910
in the reference section to learn more.

39
00:01:18,910 --> 00:01:19,743
That's it.

40
00:01:19,743 --> 00:01:21,470
Honestly, that might be the closest thing

41
00:01:21,470 --> 00:01:23,240
you're ever going to be
able to get to being able

42
00:01:23,240 --> 00:01:25,090
to actually look at a container,

43
00:01:25,090 --> 00:01:27,220
because that's all a container is;

44
00:01:27,220 --> 00:01:29,420
a process made up of
cgroups and namespaces.

45
00:01:30,580 --> 00:01:32,920
Because containers do share
resources with one another

46
00:01:32,920 --> 00:01:35,290
and their hosts, containers present a wide

47
00:01:35,290 --> 00:01:36,560
and varied attack (indistinct),

48
00:01:36,560 --> 00:01:39,110
where if a container is
compromised or mis-configured,

49
00:01:39,110 --> 00:01:41,830
containers can compromise
each other and their hosts.

50
00:01:41,830 --> 00:01:43,970
I just think they're neat.
They're fun to break.

51
00:01:43,970 --> 00:01:45,783
So let's talk about breaking some.

