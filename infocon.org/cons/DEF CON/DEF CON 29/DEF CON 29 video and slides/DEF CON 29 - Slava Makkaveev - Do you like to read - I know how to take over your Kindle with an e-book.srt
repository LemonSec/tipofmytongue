1
00:00:03,320 --> 00:00:04,900
- Hello, everyone.

2
00:00:04,900 --> 00:00:07,240
Thank you for attending the talk.

3
00:00:07,240 --> 00:00:08,470
I'm Slava.

4
00:00:08,470 --> 00:00:10,200
I've been doing security research

5
00:00:10,200 --> 00:00:13,180
at Check Point for many years.

6
00:00:13,180 --> 00:00:16,200
Reverse engineering and
vulnerability research

7
00:00:16,200 --> 00:00:17,513
is my daily work.

8
00:00:18,410 --> 00:00:20,900
Today, I want to share my experience

9
00:00:20,900 --> 00:00:24,100
of hacking Amazon Kindle E-reader devices

10
00:00:24,100 --> 00:00:25,763
using a crafted eBook.

11
00:00:26,640 --> 00:00:28,550
Personally, I use Kindle a lot,

12
00:00:28,550 --> 00:00:33,020
but I've never heard
about a malicious book.

13
00:00:33,020 --> 00:00:34,850
It was a reason for me to research

14
00:00:34,850 --> 00:00:39,500
how to create such book that
could be used to root remotely

15
00:00:39,500 --> 00:00:42,453
and take full control of a Kindle device.

16
00:00:45,430 --> 00:00:49,740
Amazon has announced that since 2007,

17
00:00:49,740 --> 00:00:53,600
they have sold tens of
millions of Kindle devices.

18
00:00:53,600 --> 00:00:55,450
It's impressive.

19
00:00:55,450 --> 00:00:59,260
I tried to find some
statistics about that and yes,

20
00:00:59,260 --> 00:01:04,260
the Amazon Kindle is most
widely owned e-reading device

21
00:01:04,720 --> 00:01:05,553
in the USA.

22
00:01:06,690 --> 00:01:10,560
There were 10 generations of
Kindle readers on the market

23
00:01:10,560 --> 00:01:13,463
and almost all of them,
are still supported.

24
00:01:16,000 --> 00:01:19,720
Typically users connect
their Kindle devices

25
00:01:19,720 --> 00:01:23,320
to a WiFi network, and WiFi protocols

26
00:01:23,320 --> 00:01:27,390
there can be used as entry
point to attack the Kindle,

27
00:01:27,390 --> 00:01:32,270
but using an eBook to
reach device is much easier

28
00:01:32,270 --> 00:01:34,993
and mass attacks are possible.

29
00:01:37,320 --> 00:01:42,058
What ways does Amazon offer
to send a book to a Kindle?

30
00:01:42,058 --> 00:01:44,610
If we are talking about your own device,

31
00:01:44,610 --> 00:01:47,610
you can log into your Amazon account

32
00:01:47,610 --> 00:01:50,410
and use a prepared chrome extension,

33
00:01:50,410 --> 00:01:52,760
PC, or android applications,

34
00:01:52,760 --> 00:01:56,743
or just use a USB cable
to transfer the file.

35
00:01:57,830 --> 00:02:01,370
Another way is to use a
"send to Kindle by email"

36
00:02:01,370 --> 00:02:02,840
Amazon service,

37
00:02:02,840 --> 00:02:06,230
to send the book as an email attachment.

38
00:02:06,230 --> 00:02:07,170
In this case,

39
00:02:07,170 --> 00:02:09,920
you should know the unique email address

40
00:02:09,920 --> 00:02:12,420
of the targeted Kindle device,

41
00:02:12,420 --> 00:02:15,070
including six random characters.

42
00:02:15,070 --> 00:02:17,620
So it's difficult to brute force.

43
00:02:17,620 --> 00:02:20,560
In addition, the ability to spoof.

44
00:02:20,560 --> 00:02:23,880
It was fixed by Amazon a year ago

45
00:02:23,880 --> 00:02:27,900
and now the recipient needs
to confirm the transfer,

46
00:02:27,900 --> 00:02:32,313
if it was sent from an
approved email address.

47
00:02:33,480 --> 00:02:37,560
Or they both suggest
that a phishing campaign

48
00:02:37,560 --> 00:02:41,890
is only way for the attacker
to reach your Kindle.

49
00:02:41,890 --> 00:02:44,550
Dozens of free online libraries are open

50
00:02:44,550 --> 00:02:47,850
to upload and download eBooks.

51
00:02:47,850 --> 00:02:51,410
An attacker can easily
upload a malicious book

52
00:02:51,410 --> 00:02:55,760
for free access because no
one expects to see malware

53
00:02:55,760 --> 00:02:57,253
targeting the Kindle.

54
00:02:58,280 --> 00:03:01,568
Most libraries only care
about the correctness

55
00:03:01,568 --> 00:03:03,873
of the metadata or the uploaded the book.

56
00:03:04,880 --> 00:03:09,530
So when downloading an eBook
from an online library,

57
00:03:09,530 --> 00:03:12,543
you can never be sure of its content.

58
00:03:14,550 --> 00:03:15,383
Okay.

59
00:03:15,383 --> 00:03:18,740
Now let's deal with the
Kindle device itself.

60
00:03:18,740 --> 00:03:21,970
The latest version of the
Kindle E-reader firmware

61
00:03:21,970 --> 00:03:26,523
is publicly available on
the official Amazon website.

62
00:03:26,523 --> 00:03:30,370
The source code is also
partially available there,

63
00:03:30,370 --> 00:03:32,820
but there is no source code for components

64
00:03:33,785 --> 00:03:36,673
responsible for parsing
and rendering books.

65
00:03:37,623 --> 00:03:42,430
In addition, I jail
broke one of my Kindles.

66
00:03:42,430 --> 00:03:45,150
It's clear that the
research will go faster,

67
00:03:45,150 --> 00:03:47,530
if you can see running processes

68
00:03:47,530 --> 00:03:50,063
and can debug Kindle services.

69
00:03:51,120 --> 00:03:53,824
The most general way to
jail break you through

70
00:03:53,824 --> 00:03:55,700
the serial port.

71
00:03:55,700 --> 00:03:56,893
I took the photo.

72
00:03:59,860 --> 00:04:03,220
Let's take a quick look at
the Kindle architecture.

73
00:04:03,220 --> 00:04:07,083
And basically the Kindle
OS is the Linux kernel

74
00:04:07,083 --> 00:04:09,460
with a set of Native programs,

75
00:04:09,460 --> 00:04:11,013
mainly provided by BusyBox.

76
00:04:12,152 --> 00:04:15,979
The LIPC subsystem for
interprocess communication

77
00:04:15,979 --> 00:04:18,821
and the Java and WebKit subsystem

78
00:04:18,821 --> 00:04:21,488
for user interface and services.

79
00:04:22,420 --> 00:04:27,420
The LIPC is a D-Bus based IPC
library and it's environment

80
00:04:28,090 --> 00:04:31,557
that links all Kindle components together.

81
00:04:31,557 --> 00:04:35,580
A Kindle process can use
this library to start apps,

82
00:04:35,580 --> 00:04:37,320
expose application, same thing.

83
00:04:37,320 --> 00:04:40,420
So listen for, or you may advance.

84
00:04:40,420 --> 00:04:41,370
For example,

85
00:04:41,370 --> 00:04:44,970
a WebKit application can use the LIPC

86
00:04:44,970 --> 00:04:49,970
to interact with a Java service
or a Native application.

87
00:04:50,350 --> 00:04:53,230
Most of the UI is written in Java,

88
00:04:53,230 --> 00:04:55,210
and the Java subsystem,

89
00:04:55,210 --> 00:04:58,660
is a framework, implements LIPC handlers

90
00:04:58,660 --> 00:05:03,450
for providing services and for
providing a user interface,

91
00:05:03,450 --> 00:05:05,523
so-called Booklets.

92
00:05:06,810 --> 00:05:10,850
The WebKit subsystem, I
mean HTML 5 and JavaScript,

93
00:05:10,850 --> 00:05:13,980
is another way to create UI elements.

94
00:05:13,980 --> 00:05:17,680
The built-in experimental
browser is a part

95
00:05:17,680 --> 00:05:20,170
of the WebKit subsystem.

96
00:05:20,170 --> 00:05:23,210
The Pillow is a library that allows

97
00:05:23,210 --> 00:05:25,753
access to the LIPC from JavaScript.

98
00:05:29,020 --> 00:05:30,130
Good.

99
00:05:30,130 --> 00:05:31,843
Who parses eBooks?

100
00:05:34,190 --> 00:05:36,300
You put a new book on your Kindle device,

101
00:05:36,300 --> 00:05:39,060
who is going to handle the file first?

102
00:05:39,060 --> 00:05:41,970
This kind of service periodically scans

103
00:05:41,970 --> 00:05:45,140
the documents directory for new files

104
00:05:45,140 --> 00:05:47,830
and depending on the file extension

105
00:05:47,830 --> 00:05:50,390
uses one of the extractor libraries

106
00:05:50,390 --> 00:05:54,240
to extract metadata from the eBook.

107
00:05:54,240 --> 00:05:58,790
All extractors are listed
in the app registry database

108
00:05:59,667 --> 00:06:01,940
and there is a handler for each

109
00:06:01,940 --> 00:06:04,343
of the supported Kindle eBook formats.

110
00:06:05,340 --> 00:06:07,990
If the scanner does not
match file extension

111
00:06:07,990 --> 00:06:10,873
or a parsing error occurs,

112
00:06:10,873 --> 00:06:13,043
the book will not be shown to the user.

113
00:06:14,470 --> 00:06:17,930
I did not go deep into
the scanning process

114
00:06:17,930 --> 00:06:20,060
because extracting metadata

115
00:06:20,060 --> 00:06:23,693
is too simple in operation
to suggest parsing errors.

116
00:06:24,530 --> 00:06:28,880
All that matters to me
is that the malware book

117
00:06:28,880 --> 00:06:31,853
must have the correct metadata.

118
00:06:34,400 --> 00:06:36,881
After the scanner does a job,

119
00:06:36,881 --> 00:06:41,290
a thumbnail of the new book is
displayed on the home screen,

120
00:06:41,290 --> 00:06:44,520
and from this moment
on, the Java framework

121
00:06:44,520 --> 00:06:48,293
is responsible for opening
the book when you click on it.

122
00:06:49,200 --> 00:06:52,320
Java archive files that
implement the logic

123
00:06:52,320 --> 00:06:55,030
for opening and rendering eBooks

124
00:06:55,030 --> 00:07:00,030
can be found in the
/opt/amazon/ebook/lib directory.

125
00:07:00,250 --> 00:07:03,853
Primarily these are .jars
listed on the slide.

126
00:07:05,070 --> 00:07:08,280
In this resource, I decided
to focus my attention

127
00:07:08,280 --> 00:07:13,280
on the PDF file format as
it's one of the most common

128
00:07:13,400 --> 00:07:16,750
and yet at the same time complex formats.

129
00:07:16,750 --> 00:07:20,940
On this slide, you can see the function

130
00:07:20,940 --> 00:07:25,940
to open PDF books implemented
in the PDF reader, impl.jars.

131
00:07:26,070 --> 00:07:31,070
It's only wrapper over the
nativeOpenPDFDocument function

132
00:07:31,523 --> 00:07:36,523
with the body in linPDFClientJNI.so.

133
00:07:37,434 --> 00:07:42,434
The linPDFClientJNI.so lib
starts as a PDF Reader service,

134
00:07:42,900 --> 00:07:44,370
forking the process,

135
00:07:44,370 --> 00:07:48,401
and synchronously send
it an open book message

136
00:07:48,401 --> 00:07:52,420
via the open source HTTP client server

137
00:07:52,420 --> 00:07:53,670
library lib (indistinct).

138
00:07:54,950 --> 00:07:57,670
In fact, it sends a get request

139
00:07:57,670 --> 00:08:00,363
to a specific local host URL.

140
00:08:01,660 --> 00:08:06,400
The PDF reader service defines
those in soft sub handlers

141
00:08:06,400 --> 00:08:08,540
for the higher level PDF operations,

142
00:08:08,540 --> 00:08:11,930
including open book and start rendering,

143
00:08:11,930 --> 00:08:14,583
ones we are interested in.

144
00:08:15,442 --> 00:08:19,670
The libFoxitWrapper.so, written by Amazon,

145
00:08:19,670 --> 00:08:23,223
provides an API for
working views PDF files.

146
00:08:25,682 --> 00:08:28,264
I want to know the only
three significant functions

147
00:08:28,264 --> 00:08:31,700
on the libFoxitWrapper.so library.

148
00:08:31,700 --> 00:08:33,960
These functions are good entry points

149
00:08:33,960 --> 00:08:37,250
for finding a PDF to restructure,

150
00:08:37,250 --> 00:08:41,943
but I was lucky to find only
a lot of another references.

151
00:08:43,250 --> 00:08:47,330
As the name implies libFoxitWrapper.so,

152
00:08:47,330 --> 00:08:51,640
is a wrapper over the
popular Foxit PDF SDK,

153
00:08:51,640 --> 00:08:55,843
presented on Kindle
devices by libfpdfemb.so.

154
00:08:57,550 --> 00:08:59,490
This is a closed source library,

155
00:08:59,490 --> 00:09:02,283
proprietary to Foxit
Software Incorporated.

156
00:09:04,970 --> 00:09:09,250
Next, I decided to focus my
attention on PDF stream filters

157
00:09:09,250 --> 00:09:13,073
and I tried to fuzz the Foxit SDK library.

158
00:09:15,180 --> 00:09:17,740
This is the fuzzing model I used.

159
00:09:17,740 --> 00:09:20,130
It's pretty classic.

160
00:09:20,130 --> 00:09:22,820
I used a combination of
American fuzzing loop

161
00:09:22,820 --> 00:09:25,030
and quick emulator, QEMU.

162
00:09:25,030 --> 00:09:26,563
The host machine is Ubuntu.

163
00:09:29,317 --> 00:09:31,710
A simple search for the words

164
00:09:31,710 --> 00:09:35,860
cPDF and codec in the Foxit Library

165
00:09:35,860 --> 00:09:40,040
allowed me to find all the
possible stream filters.

166
00:09:40,040 --> 00:09:43,240
Let's take a look at one
of them as an example.

167
00:09:43,240 --> 00:09:47,620
As you can see an image in
one of these Jbig2 filter

168
00:09:47,620 --> 00:09:49,680
is declared, and

169
00:09:49,680 --> 00:09:54,680
Jbig2 is an image compression
standard for B-level images.

170
00:09:55,293 --> 00:09:57,830
The Jbig2 segments,

171
00:09:57,830 --> 00:10:02,830
the input page into the
regions: texts, halftone image,

172
00:10:04,144 --> 00:10:06,840
refinement, and others.

173
00:10:06,840 --> 00:10:11,840
This regions are held in
the JBIG2Globals stream.

174
00:10:12,300 --> 00:10:15,011
When rendering a PDF page,

175
00:10:15,011 --> 00:10:18,360
the library parses the JBIG2Globals stream

176
00:10:18,360 --> 00:10:20,453
and reconstructs the image.

177
00:10:22,750 --> 00:10:26,340
The Jbig2Module object

178
00:10:26,340 --> 00:10:28,690
defined in the Foxit library

179
00:10:28,690 --> 00:10:33,670
is responsible for decoding
Jbig2 compressed images.

180
00:10:33,670 --> 00:10:38,670
It's StartDecode method is
declared as shown on the slide.

181
00:10:39,610 --> 00:10:42,210
I used the StartDecode function

182
00:10:42,210 --> 00:10:46,490
as the fuzzing entry point
and permuted the image size,

183
00:10:46,490 --> 00:10:50,173
the image stream and
the JBIG2Globals stream.

184
00:10:52,480 --> 00:10:56,323
As a result, available
vulnerability in the Jbig2,

185
00:10:57,220 --> 00:10:59,473
the coding algorithm was found.

186
00:11:00,490 --> 00:11:04,261
Let's take a look at the
full JBIG2Globals stream.

187
00:11:04,261 --> 00:11:06,693
Two page regions are defined here,

188
00:11:07,540 --> 00:11:12,380
the image information region
and the refinement region.

189
00:11:12,380 --> 00:11:15,400
The refinement region
contains the information

190
00:11:15,400 --> 00:11:18,650
needed to refine the image
including coordinates

191
00:11:18,650 --> 00:11:20,763
of the refining rectangle.

192
00:11:22,451 --> 00:11:25,903
In our case, an oversized
rectangle is defined.

193
00:11:26,780 --> 00:11:29,527
What's happens in this case?

194
00:11:29,527 --> 00:11:34,050
The Jbig2 algorithm tries
to expand the base image

195
00:11:34,050 --> 00:11:35,810
to new dimensions.

196
00:11:35,810 --> 00:11:39,170
The height of the new
image is recalculated

197
00:11:39,170 --> 00:11:41,580
as old height plus y

198
00:11:41,580 --> 00:11:45,690
and old high plus y
multiplied by the stride.

199
00:11:45,690 --> 00:11:50,690
Heap memory is located
for the resized image,

200
00:11:50,960 --> 00:11:53,900
but there is a mistake
in the expanding function

201
00:11:53,900 --> 00:11:57,263
and missed check for int marks.

202
00:11:59,085 --> 00:12:02,893
The 32-bit register
overflows and 100 bytes

203
00:12:04,699 --> 00:12:09,443
is located for the image
instead of 40000100 bytes.

204
00:12:12,280 --> 00:12:14,400
By using refinement regions,

205
00:12:14,400 --> 00:12:18,110
we can refine the data
outside of the image

206
00:12:18,110 --> 00:12:21,480
and get the arbitrary bright primitive,

207
00:12:21,480 --> 00:12:23,434
In the following example,

208
00:12:23,434 --> 00:12:27,830
the second refinement region
over various 16 bytes,

209
00:12:27,830 --> 00:12:32,690
at the offset 12340 bytes from
the beginning of the image

210
00:12:32,690 --> 00:12:33,633
in the heap.

211
00:12:34,944 --> 00:12:36,395
The indicated data envelope

212
00:12:36,395 --> 00:12:40,430
will be decompressed
by the Jbig2 algorithm

213
00:12:40,430 --> 00:12:43,063
and then sorted with the heap content.

214
00:12:44,370 --> 00:12:47,430
We can create any number
of refinement regions

215
00:12:47,430 --> 00:12:50,560
and over right parts of memory

216
00:12:50,560 --> 00:12:53,610
that are at distance from each other.

217
00:12:53,610 --> 00:12:54,782
In addition,

218
00:12:54,782 --> 00:12:59,360
the factor that the writing
is done through XOR operation

219
00:12:59,360 --> 00:13:03,020
allows us to fix on
specific bits of memory,

220
00:13:03,020 --> 00:13:06,483
and bypass ASLR protection, if required.

221
00:13:09,065 --> 00:13:10,733
As I mentioned,

222
00:13:12,120 --> 00:13:16,340
the Foxit library is part
of the PDF reader process.

223
00:13:16,340 --> 00:13:19,230
The data and heap segments of this process

224
00:13:19,230 --> 00:13:20,753
are Read/Write/Execute.

225
00:13:21,926 --> 00:13:24,560
ASLR is built into the Linux kernel

226
00:13:24,560 --> 00:13:29,097
and is controlled by the
parameter proxy's kernel

227
00:13:29,097 --> 00:13:31,587
randomize via space.

228
00:13:31,587 --> 00:13:35,640
It's default value on
Kindle devices is one,

229
00:13:35,640 --> 00:13:39,190
which means the base
address of the data segment

230
00:13:39,190 --> 00:13:41,860
is located immediately after the end

231
00:13:41,860 --> 00:13:44,220
of the executable code segment.

232
00:13:44,220 --> 00:13:46,420
In other words, there is no randomization

233
00:13:46,420 --> 00:13:49,490
for data segment in the heap.

234
00:13:49,490 --> 00:13:54,003
These two facts make exploiting
the vulnerability trivial.

235
00:13:55,450 --> 00:13:59,890
At start-up, the PDF reader
service lowers itself

236
00:13:59,890 --> 00:14:02,673
to the permission of the framework user.

237
00:14:03,960 --> 00:14:07,370
To prove permissions of our payload,

238
00:14:07,370 --> 00:14:12,210
I create the following simple
bash file in the framework

239
00:14:12,210 --> 00:14:15,420
working directory and launch it.

240
00:14:15,420 --> 00:14:20,420
There uid=9,000 of the
framework user or sprint it.

241
00:14:23,720 --> 00:14:27,210
Well, now we have remote
code execution vulnerability

242
00:14:27,210 --> 00:14:30,910
in the context of the PDF reader process,

243
00:14:30,910 --> 00:14:34,293
which operates with the
framework user rights.

244
00:14:35,480 --> 00:14:40,020
We can send LIPC messages,
access special internal files,

245
00:14:40,020 --> 00:14:42,360
but we are still limited.

246
00:14:42,360 --> 00:14:46,620
We want to be a root to
reset all restrictions.

247
00:14:46,620 --> 00:14:49,290
So the second stage of the research

248
00:14:49,290 --> 00:14:53,670
was to find a local privilege
escalation vulnerability

249
00:14:53,670 --> 00:14:55,800
that allows the framework user

250
00:14:55,800 --> 00:14:58,343
to run a quarter under the root use.

251
00:15:01,130 --> 00:15:03,940
The framework user has read/write access

252
00:15:03,940 --> 00:15:06,550
to the app registry database.

253
00:15:06,550 --> 00:15:10,770
It means that we can fix a database entry

254
00:15:10,770 --> 00:15:14,460
using the LIPC (indistinct) library

255
00:15:14,460 --> 00:15:16,803
or by simply editing the file.

256
00:15:17,760 --> 00:15:21,030
We need to page one of the command entries

257
00:15:21,030 --> 00:15:23,437
in the property stream.

258
00:15:23,437 --> 00:15:27,560
For example, I paged to the
browser earlier at entry.

259
00:15:27,560 --> 00:15:30,900
I set in the value field to the path

260
00:15:30,900 --> 00:15:33,439
to the payload script
created using the first

261
00:15:33,439 --> 00:15:35,303
PDF vulnerability.

262
00:15:36,770 --> 00:15:41,260
Next, the framework user
can request the app manager,

263
00:15:41,260 --> 00:15:46,260
represented by the appmgrd service,

264
00:15:46,490 --> 00:15:49,850
to start an arbitrary application.

265
00:15:49,850 --> 00:15:53,220
We can send a LIPC message
to open the browser,

266
00:15:53,220 --> 00:15:56,833
using the lib/lipc.so library.

267
00:15:57,829 --> 00:16:01,023
The presented shell command
to will do the same.

268
00:16:02,250 --> 00:16:06,310
The app manager is responsible
for launching built-in apps.

269
00:16:06,310 --> 00:16:11,310
To do this, it listens for
the appropriate LIPC events

270
00:16:12,490 --> 00:16:14,530
and to start the browser app,

271
00:16:14,530 --> 00:16:19,530
it reads the relevant entry
from the application registry

272
00:16:19,660 --> 00:16:23,973
and executes as a command
specified in the the value field.

273
00:16:24,830 --> 00:16:27,240
As we paged this database entry,

274
00:16:27,240 --> 00:16:31,643
our payload.sh script will be launched.

275
00:16:32,940 --> 00:16:35,520
The app manager service has root rights

276
00:16:35,520 --> 00:16:40,423
and they, uid=0 will be
printed by the payload script.

277
00:16:41,500 --> 00:16:45,290
So by combining these two
discovered vulnerabilities,

278
00:16:45,290 --> 00:16:48,343
any malicious payload can be run as root.

279
00:16:51,090 --> 00:16:52,050
Now let's take

280
00:16:53,621 --> 00:16:56,740
a look at a small demo

281
00:16:56,740 --> 00:16:58,630
in which I use a reverse shell

282
00:16:58,630 --> 00:17:01,113
to remotely control a Kindle device.

283
00:17:11,000 --> 00:17:13,953
On the left you can see a Kindle device,

284
00:17:16,120 --> 00:17:19,433
the book called a_Book
is our malicious file.

285
00:17:20,386 --> 00:17:23,320
On the right, you can
see the Metasploit server

286
00:17:23,320 --> 00:17:26,000
that I opened on Google cloud.

287
00:17:26,000 --> 00:17:29,490
The user clicked on the
book and at that point,

288
00:17:29,490 --> 00:17:31,950
the payload hidden in their book

289
00:17:31,950 --> 00:17:35,687
connects to their remote server
providing the reverse shell,

290
00:17:35,687 --> 00:17:39,610
and then locks the user
screen with a window.

291
00:17:40,910 --> 00:17:44,260
As you can see, we gain
the root permissions

292
00:17:44,260 --> 00:17:46,930
so we can do whatever we want.

293
00:17:46,930 --> 00:17:50,587
For example, we can steal
Amazon account cookies

294
00:17:51,550 --> 00:17:56,193
and we can take a look
at device private keys.

295
00:17:59,530 --> 00:18:00,363
Here we go.

296
00:18:08,450 --> 00:18:09,513
To summarize,

297
00:18:10,590 --> 00:18:14,513
I demonstrated how an
eBook can be malware.

298
00:18:14,513 --> 00:18:19,513
As the malware code is
executed with root user rights,

299
00:18:21,210 --> 00:18:25,023
just opening such a book can
lead to irreparable damage.

300
00:18:25,930 --> 00:18:29,800
That attacker can delete
or sell your eBooks

301
00:18:29,800 --> 00:18:31,300
taking money for themselves,

302
00:18:31,300 --> 00:18:34,960
can brick your Kindle or convert to a bot,

303
00:18:34,960 --> 00:18:37,820
attack other devices
in your local network,

304
00:18:37,820 --> 00:18:38,653
and more.

305
00:18:39,840 --> 00:18:41,340
The discovered vulnerabilities

306
00:18:42,198 --> 00:18:45,640
were reported to Amazon in February 2021,

307
00:18:46,837 --> 00:18:48,863
and now both are fixed.

308
00:18:51,150 --> 00:18:52,860
Thank you for your attention.

309
00:18:52,860 --> 00:18:55,570
You can find many good
security researchers

310
00:18:55,570 --> 00:18:57,613
on the Check Point research book.

