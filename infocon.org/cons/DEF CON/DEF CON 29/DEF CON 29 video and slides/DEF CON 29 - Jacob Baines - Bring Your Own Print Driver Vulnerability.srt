1
00:00:01,800 --> 00:00:02,830
- [Jake] Hello, DEF CON.

2
00:00:02,830 --> 00:00:04,080
Welcome to my talk,

3
00:00:04,080 --> 00:00:07,050
Bring Your Own Print Driver Vulnerability.

4
00:00:07,050 --> 00:00:09,340
In this talk, I'll discuss how a standard,

5
00:00:09,340 --> 00:00:12,020
low-privileged user can
install print drivers

6
00:00:12,020 --> 00:00:14,020
of their choosing, by design,

7
00:00:14,020 --> 00:00:16,240
on Windows systems.

8
00:00:16,240 --> 00:00:17,980
And I'll show how a local attacker

9
00:00:17,980 --> 00:00:19,460
can escalate to SYSTEM

10
00:00:19,460 --> 00:00:21,743
using a handful of
different print drivers.

11
00:00:22,680 --> 00:00:24,010
Now, I want to say upfront

12
00:00:24,010 --> 00:00:26,773
that I won't be talking
about PrintNightmare.

13
00:00:26,773 --> 00:00:28,340
PrintNightmare, at this point,

14
00:00:28,340 --> 00:00:30,560
is supposed to be a patched vulnerability,

15
00:00:30,560 --> 00:00:33,940
whereas what I'm going to talk
about in this presentation

16
00:00:33,940 --> 00:00:35,710
is likely a built-in feature

17
00:00:35,710 --> 00:00:37,310
that will be difficult to patch.

18
00:00:38,200 --> 00:00:39,540
I also had to record this

19
00:00:39,540 --> 00:00:41,950
shortly after PrintNightmare was released,

20
00:00:41,950 --> 00:00:44,040
so even if I wanted to incorporate it,

21
00:00:44,040 --> 00:00:46,063
there really just wasn't enough time.

22
00:00:49,959 --> 00:00:53,030
Now, this talk is roughly
broken down into four parts.

23
00:00:53,030 --> 00:00:55,150
To start, I'll discuss some research

24
00:00:55,150 --> 00:00:57,300
that influenced this talk.

25
00:00:57,300 --> 00:00:59,910
Then, we'll explore how a standard user

26
00:00:59,910 --> 00:01:02,460
can install a print driver.

27
00:01:02,460 --> 00:01:05,960
Next, we'll discuss actual exploitation,

28
00:01:05,960 --> 00:01:07,883
and I'll introduce a tool I wrote.

29
00:01:08,730 --> 00:01:10,970
Finally, I'll touch on detecting

30
00:01:10,970 --> 00:01:12,840
this sort of attack in the wild,

31
00:01:12,840 --> 00:01:15,587
and mitigations that may prevent it.

32
00:01:15,587 --> 00:01:17,090
I'll also give a quick rundown

33
00:01:17,090 --> 00:01:19,310
of the vulnerability disclosure timelines

34
00:01:19,310 --> 00:01:20,963
associated with this talk.

35
00:01:24,480 --> 00:01:28,640
Now, in my opinion, slides
are just an educational tool.

36
00:01:28,640 --> 00:01:31,010
While it's all well and
good for me to present them,

37
00:01:31,010 --> 00:01:33,660
it's also important for
the viewer to read them

38
00:01:33,660 --> 00:01:35,200
at their own pace,

39
00:01:35,200 --> 00:01:37,530
click links, read background material,

40
00:01:37,530 --> 00:01:39,920
and try out code snippets.

41
00:01:39,920 --> 00:01:42,920
There are also exploits
associated with this talk,

42
00:01:42,920 --> 00:01:44,620
and because of all that,

43
00:01:44,620 --> 00:01:46,580
the code and slides are available

44
00:01:46,580 --> 00:01:48,793
at the following GitHub repository.

45
00:01:49,770 --> 00:01:52,810
The name of the repo will
make a little bit more sense,

46
00:01:52,810 --> 00:01:54,203
later on in the talk.

47
00:01:57,880 --> 00:02:00,250
Finally, before we get too far into it,

48
00:02:00,250 --> 00:02:02,420
I'd like to introduce myself.

49
00:02:02,420 --> 00:02:03,770
My name is Jake Baines,

50
00:02:03,770 --> 00:02:06,040
and I'm a vulnerability researcher.

51
00:02:06,040 --> 00:02:08,530
I like to use the handle Albino Lobster,

52
00:02:08,530 --> 00:02:10,860
which is why you'll
see this little lobster

53
00:02:10,860 --> 00:02:13,460
almost everywhere I'm active online.

54
00:02:13,460 --> 00:02:17,510
My most well-known work is
probably my micro-tech work,

55
00:02:17,510 --> 00:02:19,930
although it isn't well-known at all,

56
00:02:19,930 --> 00:02:22,420
but I have had the good fortune
to be able to present at

57
00:02:22,420 --> 00:02:26,650
a few conferences, including DEF CON 27.

58
00:02:26,650 --> 00:02:28,700
I'm currently employed by Tregos.

59
00:02:28,700 --> 00:02:31,610
However, all the work I'm discussing today

60
00:02:31,610 --> 00:02:35,050
was done while I was employed
by Dark Wolf Solutions

61
00:02:35,050 --> 00:02:37,010
in fall 2020.

62
00:02:37,010 --> 00:02:39,950
Dark Wolf very kindly gave me
permission to share this work,

63
00:02:39,950 --> 00:02:42,040
for which I am truly grateful.

64
00:02:42,040 --> 00:02:43,713
So thank you very much to them.

65
00:02:47,740 --> 00:02:50,960
Now, there are some researchers
that cut their own path

66
00:02:50,960 --> 00:02:52,143
and break new ground,

67
00:02:53,250 --> 00:02:55,640
but I'm just not one of those people.

68
00:02:55,640 --> 00:02:57,280
To learn the printer subsystem

69
00:02:57,280 --> 00:02:59,740
and arrive at the conclusions I did,

70
00:02:59,740 --> 00:03:01,150
I had to stand on the shoulders

71
00:03:01,150 --> 00:03:04,910
of many more talented
researchers that came before me.

72
00:03:04,910 --> 00:03:07,010
I think it's important, and useful,

73
00:03:07,010 --> 00:03:10,650
to understand the work that
influenced my final outcome.

74
00:03:10,650 --> 00:03:12,450
So, let's quickly discuss

75
00:03:12,450 --> 00:03:15,253
some previous printer vulnerabilities.

76
00:03:19,050 --> 00:03:21,860
The first issue I want to
familiarize you with is

77
00:03:21,860 --> 00:03:25,863
CVE-2019-19363.

78
00:03:28,290 --> 00:03:31,760
This is a vulnerability in
a third-party print driver.

79
00:03:31,760 --> 00:03:33,670
The driver was developed by Ricoh,

80
00:03:33,670 --> 00:03:36,190
and it allows for privilege
escalation to SYSTEM

81
00:03:36,190 --> 00:03:37,190
by overriding a DLL.

82
00:03:39,346 --> 00:03:41,660
Pentagrid handled the disclosure

83
00:03:41,660 --> 00:03:44,000
and published a nice proof of concept,

84
00:03:44,000 --> 00:03:48,740
while Shelby Pace of Rapid7
developed the Metasploit module.

85
00:03:48,740 --> 00:03:49,980
It's a good vulnerability,

86
00:03:49,980 --> 00:03:52,480
but the driver has to be
installed on the system

87
00:03:52,480 --> 00:03:54,430
in order to exploit it.

88
00:03:54,430 --> 00:03:57,600
So it is sort of limited in that capacity.

89
00:03:57,600 --> 00:03:59,770
This is a good one to remember
for later in the talk,

90
00:03:59,770 --> 00:04:02,163
as we will reference it again.

91
00:04:05,210 --> 00:04:08,870
Of course, there is CVE-2020-1048,

92
00:04:08,870 --> 00:04:11,460
which is better known as PrintDemon.

93
00:04:11,460 --> 00:04:14,790
Now, it got a lengthy and a
bit of a meandering writeup

94
00:04:14,790 --> 00:04:17,190
on the Windows Internals blog.

95
00:04:17,190 --> 00:04:18,780
But if you spend some time with it,

96
00:04:18,780 --> 00:04:21,210
that blog provides really good exposure

97
00:04:21,210 --> 00:04:23,830
to some of the important
WIN API function calls

98
00:04:23,830 --> 00:04:26,060
associated with printers.

99
00:04:26,060 --> 00:04:29,340
The vulnerability itself
allows a local attacker

100
00:04:29,340 --> 00:04:32,180
to print to arbitrary files as SYSTEM,

101
00:04:32,180 --> 00:04:34,210
after restarting the spooler,

102
00:04:34,210 --> 00:04:36,023
resulting in privilege escalation.

103
00:04:36,930 --> 00:04:39,610
The image here is actually
from the VoidSec blog

104
00:04:39,610 --> 00:04:42,590
that talks about the vulnerability.

105
00:04:42,590 --> 00:04:45,480
And what you see is the
UI rejecting the attack

106
00:04:45,480 --> 00:04:47,860
due to insufficient permissions.

107
00:04:47,860 --> 00:04:50,980
However, a similar call, via the WIN API,

108
00:04:50,980 --> 00:04:53,653
was allowed, resulting
in the vulnerability.

109
00:04:58,125 --> 00:05:01,980
And of course, there was the
patch bypass for PrintDemon.

110
00:05:01,980 --> 00:05:05,660
A variety of people were
actually credited with this CVE.

111
00:05:05,660 --> 00:05:08,313
But VoidSec did the best
writeup, in my opinion.

112
00:05:09,370 --> 00:05:10,890
This is a really simple attack,

113
00:05:10,890 --> 00:05:13,450
where after the file permission
checks have been done,

114
00:05:13,450 --> 00:05:16,940
the attacker just swaps the
file port with a junction.

115
00:05:16,940 --> 00:05:20,213
And then they just execute
the normal PrintDemon attack.

116
00:05:21,323 --> 00:05:23,360
It's really just that easy.

117
00:05:23,360 --> 00:05:25,920
I like Rapid7's AttackerKB,

118
00:05:25,920 --> 00:05:27,130
because it's an easy way

119
00:05:27,130 --> 00:05:30,083
to get other attackers'
thoughts on vulnerabilities.

120
00:05:31,200 --> 00:05:34,670
As you can see, CVE-2020-1337,

121
00:05:34,670 --> 00:05:37,240
still just a local privilege escalation,

122
00:05:37,240 --> 00:05:39,033
is rated as very high.

123
00:05:42,450 --> 00:05:47,230
Finally, CVE-2020-1300 or Evil Printer,

124
00:05:47,230 --> 00:05:50,770
was presented at DEF CON 28 last year.

125
00:05:50,770 --> 00:05:53,220
Again, this is a local
privilege escalation

126
00:05:53,220 --> 00:05:55,610
using the printer subsystem,

127
00:05:55,610 --> 00:05:56,443
but this time,

128
00:05:56,443 --> 00:05:58,923
with the CAB file delivered
by remote printer.

129
00:05:59,920 --> 00:06:04,120
ZDI wrote up some technical
details about the CAB file,

130
00:06:04,120 --> 00:06:06,930
but other than Steven
Seely's Sweet November,

131
00:06:06,930 --> 00:06:09,853
I haven't seen anyone publish
a full exploit for this one.

132
00:06:10,810 --> 00:06:14,750
Now, I loved the DEF CON 28 presentation,

133
00:06:14,750 --> 00:06:17,833
and it served as a jumping
off point for my own research.

134
00:06:21,342 --> 00:06:23,950
And because Evil Printer
was so important to me

135
00:06:23,950 --> 00:06:25,880
and my thought process,

136
00:06:25,880 --> 00:06:27,530
I want to spend a few minutes

137
00:06:27,530 --> 00:06:30,503
just walking through the
attack in its entirety.

138
00:06:35,000 --> 00:06:37,690
The attack setup requires two things:

139
00:06:37,690 --> 00:06:40,860
a standard user account
on a Windows machine,

140
00:06:40,860 --> 00:06:44,613
and an Evil Printer to serve
up a malicious CAB file.

141
00:06:45,490 --> 00:06:49,560
The standard user simply uses
the Add Printer interface

142
00:06:49,560 --> 00:06:51,860
to connect to the Evil Printer,

143
00:06:51,860 --> 00:06:54,260
which triggers the CAB
download and unpackaging.

144
00:06:56,310 --> 00:06:58,530
The CAB file contains a file path

145
00:06:58,530 --> 00:07:00,540
with a directory traversal

146
00:07:00,540 --> 00:07:02,950
that gets unpacked anywhere on the system

147
00:07:02,950 --> 00:07:04,520
the attacker would like,

148
00:07:04,520 --> 00:07:07,680
essentially allowing the
attacker to plant a DLL

149
00:07:07,680 --> 00:07:10,713
or overwrite an executable
to escalate to SYSTEM.

150
00:07:14,870 --> 00:07:17,080
As Steven Seely's Tweet suggested,

151
00:07:17,080 --> 00:07:21,010
generation of a malicious
CAB is actually quite easy.

152
00:07:21,010 --> 00:07:24,310
Here, I generate a CAB file
containing a file called

153
00:07:24,310 --> 00:07:26,360
ualapi.dll,

154
00:07:26,360 --> 00:07:29,440
that, due to the path traversal,

155
00:07:29,440 --> 00:07:32,730
will get right into
the SYSTEM32 directory.

156
00:07:32,730 --> 00:07:37,730
Of course, ualapi.dll
is a known missing DLL

157
00:07:37,920 --> 00:07:39,340
that an attacker can plant

158
00:07:39,340 --> 00:07:42,173
in order to escalate to SYSTEM on reboot.

159
00:07:45,180 --> 00:07:46,013
And of course,

160
00:07:46,013 --> 00:07:49,200
if you're interested in
recreating the CAB yourself,

161
00:07:49,200 --> 00:07:51,593
here's the source of the DLL I generated.

162
00:07:52,740 --> 00:07:55,580
Anyone familiar with
Pentagrid's Ricoh exploit

163
00:07:55,580 --> 00:07:58,790
will know I basically stole
the snippet from them.

164
00:07:58,790 --> 00:08:02,400
But either way, if you go
to the linked repository,

165
00:08:02,400 --> 00:08:06,800
you'll find a project file
that will compile the DLL.

166
00:08:06,800 --> 00:08:10,200
Obviously, this is nothing
special or exciting.

167
00:08:10,200 --> 00:08:12,980
I just want to point out that this DLL

168
00:08:12,980 --> 00:08:17,980
executes whoami and writes
the output to c:\\output.txt.

169
00:08:18,810 --> 00:08:21,183
We will refer back to
this throughout the talk.

170
00:08:24,760 --> 00:08:27,670
The more complicated part
of the Evil Printer attack

171
00:08:27,670 --> 00:08:29,283
is setting up the Evil Printer.

172
00:08:30,333 --> 00:08:31,380
And as I've suggested,

173
00:08:31,380 --> 00:08:33,100
this method is lifted entirely

174
00:08:33,100 --> 00:08:35,683
from last year's DEF CON presentation.

175
00:08:36,930 --> 00:08:38,300
Now, for whatever reason,

176
00:08:38,300 --> 00:08:42,590
CutePDF Writer has implemented
delivery of a CAB file

177
00:08:42,590 --> 00:08:46,330
to remote clients via
Package Point and Print.

178
00:08:46,330 --> 00:08:48,760
So we can rely on the CutePDF Writer

179
00:08:48,760 --> 00:08:51,260
to do all of our heavy lifting.

180
00:08:51,260 --> 00:08:54,430
If you prepare a Windows
box in your control

181
00:08:54,430 --> 00:08:56,310
with the steps in this slide,

182
00:08:56,310 --> 00:08:59,823
then you'll be ready to
serve up malicious CAB files.

183
00:09:03,200 --> 00:09:06,200
The next step is the actual exploitation.

184
00:09:06,200 --> 00:09:09,310
As a standard, low-privileged user,

185
00:09:09,310 --> 00:09:11,270
using the Add Printer UI,

186
00:09:11,270 --> 00:09:14,083
connect to the Evil Printer
you just configured.

187
00:09:18,130 --> 00:09:20,410
When the attacker connects to the printer,

188
00:09:20,410 --> 00:09:23,830
the CAB file is downloaded and unpackaged,

189
00:09:23,830 --> 00:09:27,923
which means our malicious DLL
gets dropped into SYSTEM32.

190
00:09:28,870 --> 00:09:32,620
We also see this popup regarding
installation of a driver,

191
00:09:32,620 --> 00:09:36,110
which requires administrator approval.

192
00:09:36,110 --> 00:09:37,420
However, at this point,

193
00:09:37,420 --> 00:09:40,350
our attack has already been successful.

194
00:09:40,350 --> 00:09:41,653
So we can just hit Cancel.

195
00:09:45,670 --> 00:09:47,350
After rebooting the system,

196
00:09:47,350 --> 00:09:51,660
the ualapi.dll we dropped in SYSTEM32

197
00:09:51,660 --> 00:09:54,773
is loaded into a system
process and executed.

198
00:09:55,820 --> 00:09:56,653
As you see,

199
00:09:56,653 --> 00:09:59,440
the result.txt created by the DLL

200
00:09:59,440 --> 00:10:01,470
contains the result of whoami,

201
00:10:01,470 --> 00:10:04,447
which, when the DLL was executed,

202
00:10:04,447 --> 00:10:05,483
was SYSTEM.

203
00:10:06,330 --> 00:10:08,110
A successful privilege escalation,

204
00:10:08,110 --> 00:10:11,180
and a really great attack, in my opinion.

205
00:10:11,180 --> 00:10:14,740
It's only complicated by the
requirement of an Evil Printer,

206
00:10:14,740 --> 00:10:16,870
but in most attack scenarios,

207
00:10:16,870 --> 00:10:18,493
that shouldn't be a dealbreaker.

208
00:10:23,550 --> 00:10:24,810
Like I said,

209
00:10:24,810 --> 00:10:26,700
there wasn't a public exploit for this,

210
00:10:26,700 --> 00:10:28,680
at least that I was aware of,

211
00:10:28,680 --> 00:10:30,710
so I've published my own.

212
00:10:30,710 --> 00:10:33,600
It's wrapped up into a tool
that we'll talk about later.

213
00:10:33,600 --> 00:10:35,310
So I won't explain the silly name

214
00:10:35,310 --> 00:10:37,270
or how to use the exploit.

215
00:10:37,270 --> 00:10:38,930
We'll get there later.

216
00:10:38,930 --> 00:10:41,634
Just know a public exploit exists now,

217
00:10:41,634 --> 00:10:43,984
and it's in the repository
I mentioned earlier.

218
00:10:47,470 --> 00:10:50,840
So, last fall, after
this had been patched,

219
00:10:50,840 --> 00:10:53,550
I was exploring this attack surface,

220
00:10:53,550 --> 00:10:56,513
and I was thinking about
this Install Driver prompt.

221
00:10:57,740 --> 00:11:00,140
I was interested if driver installation

222
00:11:00,140 --> 00:11:02,940
always required administrative rights,

223
00:11:02,940 --> 00:11:04,953
or if I could bypass that somehow.

224
00:11:08,072 --> 00:11:09,720
So I decided to spend some time

225
00:11:09,720 --> 00:11:12,710
learning how a standard,
low-privileged user

226
00:11:12,710 --> 00:11:15,513
can install a print
driver on their system.

227
00:11:19,610 --> 00:11:21,250
But first we need to pick a driver

228
00:11:21,250 --> 00:11:23,653
that we would actually want to install.

229
00:11:24,530 --> 00:11:25,900
As an attacker,

230
00:11:25,900 --> 00:11:29,000
I'd love to install this
vulnerable Ricoh driver

231
00:11:29,000 --> 00:11:31,050
that we talked about earlier.

232
00:11:31,050 --> 00:11:32,430
As a reminder,

233
00:11:32,430 --> 00:11:35,790
the vulnerability in this
driver is a race condition

234
00:11:35,790 --> 00:11:38,913
to overwriting a DLL
during the AddPrinter call.

235
00:11:40,040 --> 00:11:41,440
If timed correctly,

236
00:11:41,440 --> 00:11:44,223
a standard user can escalate to SYSTEM.

237
00:11:47,510 --> 00:11:50,930
Now, one of the requirements
to AddPrinter is, of course,

238
00:11:50,930 --> 00:11:53,793
the driver name the new
printer will be using,

239
00:11:57,060 --> 00:11:59,780
which is all well and good
when the driver is available,

240
00:11:59,780 --> 00:12:01,810
like in this screenshot.

241
00:12:01,810 --> 00:12:06,173
The AddPrinter call would be
successful on this target.

242
00:12:09,440 --> 00:12:11,090
But when the driver isn't present,

243
00:12:11,090 --> 00:12:14,150
AddPrinter will obviously fail.

244
00:12:14,150 --> 00:12:15,690
So it should be fairly obvious

245
00:12:15,690 --> 00:12:17,530
why I'm interested in finding ways

246
00:12:17,530 --> 00:12:18,970
to install the driver

247
00:12:18,970 --> 00:12:22,350
without needing administrator privileges.

248
00:12:22,350 --> 00:12:27,220
If I can trick the system into
loading the driver somehow,

249
00:12:27,220 --> 00:12:28,600
then I can install the driver

250
00:12:28,600 --> 00:12:31,020
as a standard, low-privileged user,

251
00:12:31,020 --> 00:12:33,263
and exploit the driver's vulnerability:

252
00:12:34,110 --> 00:12:35,990
an attack that I'd like to call

253
00:12:35,990 --> 00:12:38,543
Bring Your Own Print Driver Vulnerability.

254
00:12:42,460 --> 00:12:44,620
So how can a standard user

255
00:12:44,620 --> 00:12:47,790
try to install the
vulnerable print driver?

256
00:12:47,790 --> 00:12:51,600
There actually is a surprising
amount of legitimate options.

257
00:12:51,600 --> 00:12:53,540
I listed a bunch here,

258
00:12:53,540 --> 00:12:56,020
and we're going to quickly
look at what happens

259
00:12:56,020 --> 00:12:58,263
when they're invoked by a standard user.

260
00:13:01,910 --> 00:13:02,743
First of all,

261
00:13:02,743 --> 00:13:03,670
thank you to Pentagrid

262
00:13:03,670 --> 00:13:08,220
for leaving links to the
Ricoh installer in their blog.

263
00:13:08,220 --> 00:13:10,223
That did prove very helpful to me.

264
00:13:11,180 --> 00:13:13,820
The Ricoh installer for
the vulnerable driver

265
00:13:13,820 --> 00:13:15,610
isn't so much an installer,

266
00:13:15,610 --> 00:13:18,370
but just right-clicking on an INF file

267
00:13:18,370 --> 00:13:20,153
to invoke the INF installer,

268
00:13:21,230 --> 00:13:24,830
which just so happens to
require administrative rights,

269
00:13:24,830 --> 00:13:28,193
so that's not really all that
useful for the standard user.

270
00:13:32,110 --> 00:13:35,660
Pointing the printer user
interface at the INF file

271
00:13:35,660 --> 00:13:37,810
yields similar results.

272
00:13:37,810 --> 00:13:40,373
So that's another no-go
for the standard user.

273
00:13:43,910 --> 00:13:44,950
PowerShell fails

274
00:13:44,950 --> 00:13:48,023
with a very ugly and sort
of useless error message.

275
00:13:48,950 --> 00:13:52,500
However, looking up the
command in MS documentation,

276
00:13:52,500 --> 00:13:54,667
we find this useful tidbit:

277
00:13:54,667 --> 00:13:58,530
"The INF file should exist
in the driver store."

278
00:13:58,530 --> 00:14:00,300
Well, what is that?

279
00:14:00,300 --> 00:14:01,560
Well, just hold on.

280
00:14:01,560 --> 00:14:03,223
We'll circle back to that.

281
00:14:06,340 --> 00:14:10,910
Invoking printui.dll yields
the exact same result

282
00:14:10,910 --> 00:14:12,850
as just using the UI,

283
00:14:12,850 --> 00:14:15,520
kind of what you'd expect.

284
00:14:15,520 --> 00:14:18,373
So yet another failure
for the standard user.

285
00:14:20,870 --> 00:14:22,690
And yet again,

286
00:14:22,690 --> 00:14:27,263
another failure when
trying to use prndrvr.vbs.

287
00:14:31,810 --> 00:14:36,700
And while there are too many
MS API functions for printers,

288
00:14:36,700 --> 00:14:39,158
Print Daemon specifically uses

289
00:14:39,158 --> 00:14:41,790
InstallPrinterDriverFromPackage,

290
00:14:41,790 --> 00:14:44,540
because a standard user could invoke it,

291
00:14:44,540 --> 00:14:49,163
if, as highlighted here, a
driver is in the driver store.

292
00:14:51,630 --> 00:14:54,540
So, it seems like getting the print driver

293
00:14:54,540 --> 00:14:58,230
into the driver store
would be really useful.

294
00:14:58,230 --> 00:14:59,730
How do we go about doing that?

295
00:15:04,010 --> 00:15:06,620
Well, let's talk about it.

296
00:15:06,620 --> 00:15:07,880
In this section,

297
00:15:07,880 --> 00:15:10,650
we'll finally see how
to get the Ricoh driver

298
00:15:10,650 --> 00:15:13,263
onto the system as a standard user.

299
00:15:19,070 --> 00:15:21,100
A good place to start is,

300
00:15:21,100 --> 00:15:23,073
what is the driver store?

301
00:15:23,990 --> 00:15:27,540
The answer is that it's a
trusted location on the system,

302
00:15:27,540 --> 00:15:31,680
where signed and verified
driver packages are stored.

303
00:15:31,680 --> 00:15:33,709
Adding a driver to the driver store

304
00:15:33,709 --> 00:15:37,340
is referred to as staging,

305
00:15:37,340 --> 00:15:40,370
likely so it isn't
confused with installation.

306
00:15:40,370 --> 00:15:43,176
Staging a driver in the driver store

307
00:15:43,176 --> 00:15:45,653
is not the same as installing it.

308
00:15:50,530 --> 00:15:53,560
Only administrators can stage drivers.

309
00:15:53,560 --> 00:15:54,770
Probably the best tool

310
00:15:54,770 --> 00:15:58,430
for enumerating, adding,
and removing drivers

311
00:15:58,430 --> 00:16:00,303
is the Plug 'n' Play util tool.

312
00:16:01,320 --> 00:16:02,460
In this screenshot,

313
00:16:02,460 --> 00:16:05,450
the administrator adds the
vulnerable Ricoh driver

314
00:16:05,450 --> 00:16:06,723
to the driver store.

315
00:16:09,940 --> 00:16:13,690
And once the vulnerable Ricoh
driver is in the driver store,

316
00:16:13,690 --> 00:16:16,700
a standard, low-privileged
user can install it

317
00:16:16,700 --> 00:16:18,900
while adding a new printer.

318
00:16:18,900 --> 00:16:20,820
Now, obviously, this talk

319
00:16:20,820 --> 00:16:23,280
is about a standard, low-privileged user

320
00:16:23,280 --> 00:16:25,770
adding a driver to the driver store,

321
00:16:25,770 --> 00:16:27,290
and not an administrator,

322
00:16:27,290 --> 00:16:29,650
like in the previous slide.

323
00:16:29,650 --> 00:16:32,150
But I want to highlight
how owning the driver store

324
00:16:32,150 --> 00:16:36,563
is all we need to be able to
then exploit the Ricoh driver.

325
00:16:39,950 --> 00:16:42,900
So, finally coming full circle,

326
00:16:42,900 --> 00:16:45,680
we sought to discover
if a low-privileged user

327
00:16:45,680 --> 00:16:49,970
can introduce arbitrary
drivers to the system.

328
00:16:49,970 --> 00:16:51,520
We tested multiple methods

329
00:16:51,520 --> 00:16:55,810
of installing the vulnerable Ricoh driver,

330
00:16:55,810 --> 00:16:59,220
and we checked out how
the driver store works.

331
00:16:59,220 --> 00:17:02,040
Is there any way to stage a print driver

332
00:17:02,040 --> 00:17:04,723
as a standard, low-privileged user?

333
00:17:09,615 --> 00:17:12,150
And the answer, of course, is yes.

334
00:17:12,150 --> 00:17:15,300
A standard, low-privileged
user can stage drivers

335
00:17:15,300 --> 00:17:18,500
into the driver store by
connecting to a printer

336
00:17:18,500 --> 00:17:20,690
that uses Package Point and Print,

337
00:17:20,690 --> 00:17:23,230
just like Evil Printer.

338
00:17:23,230 --> 00:17:26,550
The package of a CAB file, if signed,

339
00:17:26,550 --> 00:17:30,163
will be staged in the driver store.

340
00:17:33,630 --> 00:17:36,800
So an attacker that
controls an Evil Printer

341
00:17:36,800 --> 00:17:39,290
and a standard Windows account

342
00:17:39,290 --> 00:17:42,694
can stage drivers of their choosing.

343
00:17:42,694 --> 00:17:44,680
A client need only invoke

344
00:17:44,680 --> 00:17:48,563
the GetPrinter driver MS API function.

345
00:17:51,880 --> 00:17:54,117
The printer responds with the driver,

346
00:17:54,117 --> 00:17:57,230
and the system verifies
the driver's integrity

347
00:17:57,230 --> 00:18:01,160
before finally dropping
it into the driver store.

348
00:18:01,160 --> 00:18:02,723
It's really just that easy.

349
00:18:03,770 --> 00:18:05,900
So let's try it ourselves.

350
00:18:05,900 --> 00:18:07,730
We need to create a CAB file

351
00:18:07,730 --> 00:18:09,993
for our vulnerable Ricoh driver.

352
00:18:13,690 --> 00:18:15,420
As we talked about earlier,

353
00:18:15,420 --> 00:18:18,120
the Ricoh installer just sort of left us

354
00:18:18,120 --> 00:18:19,883
this exploded directory.

355
00:18:21,090 --> 00:18:24,430
Well, we can roll all
that up into a CAB file

356
00:18:24,430 --> 00:18:25,650
using makecab.

357
00:18:29,040 --> 00:18:34,040
Obviously, the CAB file
we generate isn't signed.

358
00:18:34,670 --> 00:18:35,840
But fortunately for us,

359
00:18:35,840 --> 00:18:38,260
Windows doesn't care about that.

360
00:18:38,260 --> 00:18:40,310
When unpackaging the CAB,

361
00:18:40,310 --> 00:18:42,940
the system will hunt
out the security catalog

362
00:18:42,940 --> 00:18:44,093
that I've highlighted.

363
00:18:47,650 --> 00:18:50,500
The Security Catalog itself is signed by

364
00:18:50,500 --> 00:18:53,453
Microsoft Windows hardware
compatibility publisher.

365
00:18:55,532 --> 00:18:56,670
And the catalog contains

366
00:18:56,670 --> 00:19:00,270
hashes of each file that the driver needs.

367
00:19:00,270 --> 00:19:03,097
Now, if you have sharp
eyes, you might ask,

368
00:19:03,097 --> 00:19:06,117
"Does it matter if the
'valid to' date has expired?"

369
00:19:07,020 --> 00:19:08,810
And the answer is, no.

370
00:19:08,810 --> 00:19:10,910
The system doesn't care at all about that.

371
00:19:16,180 --> 00:19:18,030
So we've created a Ricoh CAB

372
00:19:18,030 --> 00:19:20,010
that is cryptographically acceptable

373
00:19:20,010 --> 00:19:22,880
to the Windows printer subsystem.

374
00:19:22,880 --> 00:19:25,630
Now, we just need to
configure the Evil Printer

375
00:19:25,630 --> 00:19:28,540
just as we did earlier in the talk.

376
00:19:28,540 --> 00:19:31,180
I'll leave that as an exercise for home,

377
00:19:31,180 --> 00:19:34,600
since it's the exact same
setup we discussed before,

378
00:19:34,600 --> 00:19:39,053
and I'll share a tool in a bit
that automates all of that.

379
00:19:43,580 --> 00:19:46,060
Now, once the Evil Printer is all set up,

380
00:19:46,060 --> 00:19:50,087
we can connect to it as a
standard, low-privileged user,

381
00:19:50,087 --> 00:19:51,723
via the Add Printer UI.

382
00:19:52,730 --> 00:19:54,010
If successful,

383
00:19:54,010 --> 00:19:56,853
we should see a new entry
in the driver store.

384
00:20:00,800 --> 00:20:04,080
Here, we've established our
connection to the Evil Printer,

385
00:20:04,080 --> 00:20:06,220
and I've highlighted our Ricoh driver

386
00:20:06,220 --> 00:20:08,620
staged in the driver store.

387
00:20:08,620 --> 00:20:10,250
The only downside here

388
00:20:10,250 --> 00:20:12,690
is that we've triggered Windows Update.

389
00:20:12,690 --> 00:20:16,010
Later, we'll discuss how to
avoid triggering the update

390
00:20:16,010 --> 00:20:18,323
and really, the UI altogether.

391
00:20:21,750 --> 00:20:24,510
We can now see that our
Ricoh driver is staged

392
00:20:24,510 --> 00:20:25,990
via the Print UI.

393
00:20:25,990 --> 00:20:30,147
So a low-privileged user can
now use it to add a printer,

394
00:20:30,147 --> 00:20:32,210
and most importantly,

395
00:20:32,210 --> 00:20:34,713
exploit it to achieve SYSTEM.

396
00:20:35,808 --> 00:20:37,350
Now, that's the whole thing:

397
00:20:37,350 --> 00:20:40,900
using a remote printer to stage drivers,

398
00:20:40,900 --> 00:20:43,570
and exploiting the staged driver.

399
00:20:43,570 --> 00:20:47,503
Literally, Bring Your Own
Print Driver Vulnerability.

400
00:20:52,170 --> 00:20:54,620
Is this a vulnerability in Windows?

401
00:20:54,620 --> 00:20:55,890
Uh, yes.

402
00:20:55,890 --> 00:20:56,803
I think so.

403
00:20:57,910 --> 00:20:58,890
As I just said,

404
00:20:58,890 --> 00:21:01,370
we clearly crossed a security boundary

405
00:21:01,370 --> 00:21:04,890
by adding a driver into the driver store.

406
00:21:04,890 --> 00:21:07,920
And the result of crossing
that security boundary

407
00:21:07,920 --> 00:21:10,213
is that we're able to escalate to SYSTEM.

408
00:21:15,187 --> 00:21:19,660
But is this actually a
vulnerability in Windows?

409
00:21:19,660 --> 00:21:21,810
Uh, no.

410
00:21:21,810 --> 00:21:25,400
It's a feature that's working as designed.

411
00:21:25,400 --> 00:21:28,640
This is exactly how printers
are supposed to work.

412
00:21:28,640 --> 00:21:31,740
The system is supposed
to automatically download

413
00:21:31,740 --> 00:21:33,180
and stage the package

414
00:21:33,180 --> 00:21:35,730
so that the user can add a new printer.

415
00:21:35,730 --> 00:21:37,370
And, as we all know,

416
00:21:37,370 --> 00:21:40,370
features aren't vulnerabilities.

417
00:21:40,370 --> 00:21:41,640
We can dislike the feature,

418
00:21:41,640 --> 00:21:43,380
and believe it's flawed,

419
00:21:43,380 --> 00:21:44,930
but at the end of the day,

420
00:21:44,930 --> 00:21:47,433
a feature really just
isn't a vulnerability.

421
00:21:51,340 --> 00:21:54,513
But really, is this a
vulnerability in Windows?

422
00:21:56,020 --> 00:21:59,040
Uh, I'd say, honestly, I'm not sure.

423
00:21:59,040 --> 00:22:02,023
And I'm not sure I really
care all that much.

424
00:22:02,870 --> 00:22:04,960
But I think both arguments are true.

425
00:22:04,960 --> 00:22:05,950
At the end of the day,

426
00:22:05,950 --> 00:22:07,900
I can escalate to SYSTEM.

427
00:22:07,900 --> 00:22:09,350
You can call it a bug.

428
00:22:09,350 --> 00:22:10,910
You can call it a feature.

429
00:22:10,910 --> 00:22:13,700
The result is the same, either way:

430
00:22:13,700 --> 00:22:15,113
escalation to SYSTEM.

431
00:22:21,280 --> 00:22:22,160
Is this useful?

432
00:22:22,160 --> 00:22:24,520
Of course this is useful.

433
00:22:24,520 --> 00:22:27,630
As long as you can establish
a remote connection

434
00:22:27,630 --> 00:22:30,310
to an Evil Printer in your control,

435
00:22:30,310 --> 00:22:32,403
you can escalate to SYSTEM.

436
00:22:33,400 --> 00:22:38,110
What's more is that I'm not
sure it's a patchable issue.

437
00:22:38,110 --> 00:22:39,460
It's working as designed,

438
00:22:39,460 --> 00:22:41,600
and it works for Windows versions

439
00:22:41,600 --> 00:22:43,713
back to at least Windows 7.

440
00:22:44,680 --> 00:22:46,010
Maybe Vista.

441
00:22:46,010 --> 00:22:47,910
I actually didn't get a chance to try.

442
00:22:48,840 --> 00:22:50,040
What's more, though,

443
00:22:50,040 --> 00:22:54,560
is it makes old or unlikely
to be seen in the wild

444
00:22:54,560 --> 00:22:57,860
print drivers, like
Ricoh, really valuable,

445
00:22:57,860 --> 00:23:01,030
since now we can just pop
them on the box at will

446
00:23:01,030 --> 00:23:02,053
and exploit them.

447
00:23:07,980 --> 00:23:09,680
So that's the entire concept.

448
00:23:09,680 --> 00:23:13,280
A standard user can add a
print driver of their choosing

449
00:23:13,280 --> 00:23:15,873
and exploit it to obtain
SYSTEM privileges.

450
00:23:18,680 --> 00:23:22,170
But of course, no one
wants to do that manually.

451
00:23:22,170 --> 00:23:26,120
So I've developed a tool
that automates the process.

452
00:23:26,120 --> 00:23:28,383
The tool is called Concealed Position.

453
00:23:29,450 --> 00:23:34,130
So here's an early screenshot
of the GitHub repo and a link.

454
00:23:34,130 --> 00:23:37,623
As of August 7th, this
should be open to everyone.

455
00:23:41,690 --> 00:23:45,610
Now, Concealed Position
is developed in C++

456
00:23:45,610 --> 00:23:48,070
and has three major components.

457
00:23:48,070 --> 00:23:49,930
The first is the server,

458
00:23:49,930 --> 00:23:51,873
for configuring the Evil Printer.

459
00:23:53,270 --> 00:23:54,450
The second is the client,

460
00:23:54,450 --> 00:23:55,730
for staging the driver

461
00:23:55,730 --> 00:23:58,363
and executing the privilege escalation.

462
00:23:59,900 --> 00:24:00,750
And finally,

463
00:24:00,750 --> 00:24:04,803
the DLL that gets executed
with SYSTEM privileges.

464
00:24:08,210 --> 00:24:10,810
Concealed Position
currently has four exploits

465
00:24:10,810 --> 00:24:12,640
you can choose from.

466
00:24:12,640 --> 00:24:14,690
SlashingDamage and PoisonDamage

467
00:24:14,690 --> 00:24:16,500
are the two we've already spoken about.

468
00:24:16,500 --> 00:24:21,500
That's CVE-2020-1300, and
PoisonDamage is the Ricoh driver.

469
00:24:24,110 --> 00:24:27,743
But it also has two more
vulnerable drivers that I found,

470
00:24:31,150 --> 00:24:32,300
and while recording this,

471
00:24:32,300 --> 00:24:35,160
I'm still in the middle of
disclosing to the vendors,

472
00:24:35,160 --> 00:24:37,703
which we will talk about
at the end of this talk.

473
00:24:39,070 --> 00:24:40,750
The first one is AcidDamage,

474
00:24:40,750 --> 00:24:42,391
which is a vulnerability

475
00:24:42,391 --> 00:24:45,110
in Lexmark's universal print driver.

476
00:24:45,110 --> 00:24:47,370
And the second is RadiantDamage,

477
00:24:47,370 --> 00:24:51,383
which is a vulnerability in
Canon's TR150 print driver.

478
00:24:52,570 --> 00:24:55,020
Concealed Position can also be executed

479
00:24:55,020 --> 00:24:56,290
in a local-only mode,

480
00:24:56,290 --> 00:24:58,840
when the drivers already
exist in the driver store.

481
00:25:03,510 --> 00:25:06,550
Now, here's a sample
screenshot of the server.

482
00:25:06,550 --> 00:25:09,620
And as you can see, it's simple to invoke.

483
00:25:09,620 --> 00:25:12,413
You just select the
exploit you want to use.

484
00:25:16,732 --> 00:25:18,020
And the client is similar,

485
00:25:18,020 --> 00:25:22,590
except you need to either
specify local exploitation,

486
00:25:22,590 --> 00:25:25,240
or provide the Evil Printer address

487
00:25:26,110 --> 00:25:29,110
and the name of the Evil Printer
you're going to connect to.

488
00:25:34,257 --> 00:25:36,560
And here's the tool
after executing an attack

489
00:25:36,560 --> 00:25:38,580
using AcidDamage.

490
00:25:38,580 --> 00:25:41,190
Again, we see the DLL used

491
00:25:41,190 --> 00:25:44,930
just echoes whoami to the result.txt file

492
00:25:44,930 --> 00:25:46,083
you see pictured here.

493
00:25:52,495 --> 00:25:53,770
In one of the previous slides,

494
00:25:53,770 --> 00:25:55,940
we saw that connecting to the Evil Printer

495
00:25:55,940 --> 00:25:59,183
using the Add Printer UI
triggered Windows Update,

496
00:26:00,130 --> 00:26:04,103
which is obviously a no-go
during a real attack.

497
00:26:05,040 --> 00:26:08,450
By using the WIN API
calls listed in the slide,

498
00:26:08,450 --> 00:26:11,280
the client is able to avoid Windows Update

499
00:26:11,280 --> 00:26:12,963
and the UI altogether.

500
00:26:13,840 --> 00:26:15,290
In the first stage,

501
00:26:15,290 --> 00:26:17,800
which is the connection
to the remote printer,

502
00:26:17,800 --> 00:26:21,630
the attacker utilizes GetPrinterDriver.

503
00:26:21,630 --> 00:26:23,330
In the second phase,

504
00:26:23,330 --> 00:26:25,892
the driver is installed
from the driver store using

505
00:26:25,892 --> 00:26:29,060
InstallPrinterDriverFromPackage.

506
00:26:29,060 --> 00:26:31,220
Exploitation typically then occurs

507
00:26:31,220 --> 00:26:32,943
during the AddPrinter call.

508
00:26:37,410 --> 00:26:39,880
Now, there's a lot of love
for PowerShell out there,

509
00:26:39,880 --> 00:26:43,550
and I think it's the obvious
tool for a lot of people.

510
00:26:43,550 --> 00:26:45,370
So some might wonder why I didn't develop

511
00:26:45,370 --> 00:26:47,020
Concealed Position in PowerShell.

512
00:26:48,109 --> 00:26:49,070
Well, first of all,

513
00:26:49,070 --> 00:26:51,420
I just happen to love C++,

514
00:26:51,420 --> 00:26:54,370
and it's really sort of the
language that I think in first.

515
00:26:55,750 --> 00:26:57,850
But I think it's also good to know,

516
00:26:57,850 --> 00:26:59,500
if you do want to use PowerShell,

517
00:27:00,820 --> 00:27:03,420
the AddPrinter using ConnectionName

518
00:27:03,420 --> 00:27:07,200
will stage the driver
into the driver store.

519
00:27:07,200 --> 00:27:09,883
But it also triggers
Windows Update as well.

520
00:27:10,820 --> 00:27:12,300
But if you like PowerShell,

521
00:27:12,300 --> 00:27:14,930
that's probably easy
enough to work around.

522
00:27:14,930 --> 00:27:17,080
If you want to develop your own tool,

523
00:27:17,080 --> 00:27:18,793
you should definitely pursue that.

524
00:27:23,330 --> 00:27:24,163
All right.

525
00:27:24,163 --> 00:27:25,980
So we've talked about the attack.

526
00:27:25,980 --> 00:27:28,270
And I've showed off my tools.

527
00:27:28,270 --> 00:27:29,280
So let's talk about

528
00:27:29,280 --> 00:27:31,913
the new driver
vulnerabilities that I found.

529
00:27:35,850 --> 00:27:37,770
The first one is AcidDamage,

530
00:27:37,770 --> 00:27:39,350
and like I said earlier,

531
00:27:39,350 --> 00:27:42,780
it's an issue with Lexmark's
universal print driver,

532
00:27:42,780 --> 00:27:46,623
affecting versions 2.15.1.0 and below.

533
00:27:47,540 --> 00:27:52,540
This has been assigned CVE-2021-35449.

534
00:27:53,120 --> 00:27:55,950
The issue is that during AddPrinter,

535
00:27:55,950 --> 00:27:59,570
a world writable file is parsed for DLLs.

536
00:27:59,570 --> 00:28:02,300
An attacker can just
insert a path traversal

537
00:28:02,300 --> 00:28:04,490
to a DLL under their control,

538
00:28:04,490 --> 00:28:06,993
resulting in escalation to SYSTEM.

539
00:28:09,820 --> 00:28:11,213
Very, very simple.

540
00:28:16,220 --> 00:28:17,060
Now, obviously,

541
00:28:17,060 --> 00:28:21,800
the exploit has an implementation
in Concealed Position.

542
00:28:21,800 --> 00:28:23,870
But I've also developed
a Metasploit module

543
00:28:23,870 --> 00:28:25,670
for this as well.

544
00:28:25,670 --> 00:28:27,523
Now, the module doesn't
use an Evil Printer.

545
00:28:27,523 --> 00:28:30,310
It's just a local-only attack.

546
00:28:30,310 --> 00:28:32,780
However, one of the
challenges of recording this

547
00:28:32,780 --> 00:28:34,530
so far in the past,

548
00:28:34,530 --> 00:28:35,363
like I said,

549
00:28:35,363 --> 00:28:37,100
I'm recording this in mid-July.

550
00:28:37,100 --> 00:28:38,083
It's July 13th.

551
00:28:39,180 --> 00:28:41,400
So the challenge here is
that I can't really show

552
00:28:41,400 --> 00:28:44,303
an open pull request until August 7th.

553
00:28:45,720 --> 00:28:47,220
So I can't link it here.

554
00:28:47,220 --> 00:28:48,780
But trust me,

555
00:28:48,780 --> 00:28:51,090
when the morning of
August 7th rolls around,

556
00:28:51,090 --> 00:28:52,803
I will open that pull request.

557
00:28:56,840 --> 00:29:00,540
Now, remember, to use this
attack with the Evil Printer,

558
00:29:00,540 --> 00:29:02,483
we need to generate a CAB file.

559
00:29:03,570 --> 00:29:08,140
Now, we can cheat and just
download version 2.10.0.5

560
00:29:08,140 --> 00:29:09,853
from the Windows Update Catalog.

561
00:29:11,580 --> 00:29:13,050
So that works fine.

562
00:29:13,050 --> 00:29:13,883
So why not?

563
00:29:19,070 --> 00:29:21,580
The CAB file downloaded
from Windows Catalog

564
00:29:21,580 --> 00:29:23,880
is also signed by Microsoft.

565
00:29:23,880 --> 00:29:26,840
So that's kind of a neat
thing we can't recreate,

566
00:29:26,840 --> 00:29:28,550
just by using makecab.

567
00:29:33,370 --> 00:29:36,340
But if you want to use the latest version,

568
00:29:36,340 --> 00:29:37,583
we can do that, too.

569
00:29:38,820 --> 00:29:42,040
First, we just have to
grab the Lexmark installer,

570
00:29:42,040 --> 00:29:45,663
and it will dump the required
files off of C:\Lexmark.

571
00:29:48,480 --> 00:29:51,130
We can use the same technique as before,

572
00:29:51,130 --> 00:29:53,863
using dir to generate our files list.

573
00:29:54,760 --> 00:29:57,230
Except makecab doesn't respect directories

574
00:29:57,230 --> 00:29:58,540
unless you tell it to,

575
00:29:58,540 --> 00:30:00,370
so you have to modify the files.txt file

576
00:30:01,910 --> 00:30:03,810
to let makecab know that the driver

577
00:30:03,810 --> 00:30:06,493
needs the directory
structure to be respected.

578
00:30:07,750 --> 00:30:09,260
But that's really it.

579
00:30:09,260 --> 00:30:12,920
Pass the modified files.txt to makecab,

580
00:30:12,920 --> 00:30:16,500
and we have a CAB file to
use with Concealed Position.

581
00:30:16,500 --> 00:30:20,630
Again, our generated
CAB file isn't signed,

582
00:30:20,630 --> 00:30:23,123
but it contains a valid Security Catalog.

583
00:30:27,150 --> 00:30:29,813
The next vulnerable driver, RadiantDamage,

584
00:30:30,690 --> 00:30:32,550
is an issue I discovered in the driver

585
00:30:32,550 --> 00:30:37,053
for Canon's PIXMA TR150
mobile wireless printer.

586
00:30:38,530 --> 00:30:43,530
The TR150 driver 3.71.2.10
and below is affected.

587
00:30:44,620 --> 00:30:49,620
And again, this is a
local privilege escalation

588
00:30:50,580 --> 00:30:53,120
during the AddPrinter process.

589
00:30:53,120 --> 00:30:55,980
This issue has not been
assigned a CVE yet,

590
00:30:55,980 --> 00:30:57,123
at time of recording.

591
00:30:58,500 --> 00:31:00,853
So I guess we'll discuss that in a bit.

592
00:31:04,310 --> 00:31:06,490
Similar to the Ricoh vulnerability,

593
00:31:06,490 --> 00:31:10,083
this is a race condition to
overwrite a DLL in ProgramData.

594
00:31:11,230 --> 00:31:12,730
If you can time it correctly,

595
00:31:12,730 --> 00:31:16,950
the overwritten DLL will get
picked up by printIsolationHost

596
00:31:16,950 --> 00:31:19,090
and executed as SYSTEM.

597
00:31:19,090 --> 00:31:20,983
Again, very simple.

598
00:31:22,470 --> 00:31:25,240
I found that this is a
bit difficult to time,

599
00:31:25,240 --> 00:31:27,190
a little bit harder than AcidDamage is.

600
00:31:29,800 --> 00:31:32,830
But it usually takes no more
than a couple of minutes

601
00:31:32,830 --> 00:31:33,843
to finally hit.

602
00:31:37,480 --> 00:31:39,370
Again, we need a CAB file

603
00:31:39,370 --> 00:31:41,590
to work with Concealed Position server.

604
00:31:41,590 --> 00:31:45,310
And again, you can actually
download the TR150 driver

605
00:31:45,310 --> 00:31:46,933
from the Update Catalog.

606
00:31:48,090 --> 00:31:49,580
So we can simply download it,

607
00:31:49,580 --> 00:31:54,580
and we have a signed,
well-formed, most current version

608
00:31:54,710 --> 00:31:58,403
of a totally exploitable driver to use.

609
00:32:02,980 --> 00:32:04,840
Now, of course, it might be useful to know

610
00:32:04,840 --> 00:32:07,040
how to generate our own still.

611
00:32:07,040 --> 00:32:10,010
The Canon installer will
download the following files

612
00:32:10,010 --> 00:32:12,770
into a directory in AppData.

613
00:32:12,770 --> 00:32:14,593
Note the flat file structure.

614
00:32:17,540 --> 00:32:19,730
Because of the flat file structure,

615
00:32:19,730 --> 00:32:22,513
it's trivial to package up using makecab.

616
00:32:23,940 --> 00:32:26,830
We just do exactly what
we did for the Ricoh CAB,

617
00:32:26,830 --> 00:32:27,790
and just like that,

618
00:32:27,790 --> 00:32:32,333
we generated our own
correctly-formed TR150 CAB.

619
00:32:36,320 --> 00:32:39,830
Again, you can find the
implementation of RadiantDamage

620
00:32:39,830 --> 00:32:41,210
at the following link.

621
00:32:41,210 --> 00:32:44,510
And again, there is a Metasploit module.

622
00:32:44,510 --> 00:32:46,020
I just couldn't include the link

623
00:32:46,020 --> 00:32:49,053
because I recorded so far in the past.

624
00:32:54,680 --> 00:32:57,550
So that's all for the
exploitation sections.

625
00:32:57,550 --> 00:33:00,193
And I hope you found it interesting.

626
00:33:01,170 --> 00:33:04,180
But I now want to touch on
detection and mitigation,

627
00:33:04,180 --> 00:33:06,030
for those of us that
have to defend against

628
00:33:06,030 --> 00:33:08,560
this sort of thing in the real world.

629
00:33:08,560 --> 00:33:13,560
Now, my full-time job is not defending.

630
00:33:13,690 --> 00:33:15,830
So these are best effort.

631
00:33:15,830 --> 00:33:19,853
Forgive me if I have
overlooked anything obvious.

632
00:33:24,240 --> 00:33:27,960
So the first detection
is from the event log.

633
00:33:27,960 --> 00:33:32,637
Event ID 600 is great for
catching CVE-2020-1300,

634
00:33:33,890 --> 00:33:36,100
or what I call SlashingDamage,

635
00:33:36,100 --> 00:33:39,423
or what is known as the
original Evil Printer.

636
00:33:40,400 --> 00:33:42,230
This is the path traversal

637
00:33:42,230 --> 00:33:44,360
presented at last year's DEF CON.

638
00:33:44,360 --> 00:33:47,200
And you can even see in the description

639
00:33:50,120 --> 00:33:52,190
that it mentions that
the failure can occur

640
00:33:52,190 --> 00:33:54,760
due to a bad or missing signature,

641
00:33:54,760 --> 00:33:59,143
which is exactly what the
original Evil Printer serves up.

642
00:34:02,240 --> 00:34:05,530
Event 215 catches all the other issues,

643
00:34:05,530 --> 00:34:07,223
at least as I've coded them up.

644
00:34:08,090 --> 00:34:11,030
Here, you can see the exploitation
caused the print driver

645
00:34:11,030 --> 00:34:15,233
to fail to install correctly
during the AddPrinter process.

646
00:34:21,070 --> 00:34:25,760
You can also investigate
the setupapi.dev file

647
00:34:25,760 --> 00:34:28,090
and see windows/inf.

648
00:34:28,090 --> 00:34:30,470
Now, this could quite tedious,

649
00:34:30,470 --> 00:34:33,340
as it's very verbose and quite long.

650
00:34:33,340 --> 00:34:35,810
But it's actually great documentation

651
00:34:35,810 --> 00:34:39,700
for any driver that has been
introduced to the system,

652
00:34:39,700 --> 00:34:43,620
or even a driver that has been
attempted to be introduced

653
00:34:43,620 --> 00:34:44,483
to the system.

654
00:34:48,972 --> 00:34:49,805
And of course,

655
00:34:49,805 --> 00:34:52,780
you can detect the attack over the wire,

656
00:34:52,780 --> 00:34:55,733
as long as SMB encryption isn't enabled.

657
00:34:56,570 --> 00:34:58,290
The challenge here, of course,

658
00:34:58,290 --> 00:35:02,520
is that this attack uses
totally legitimate behavior.

659
00:35:02,520 --> 00:35:04,350
Although, depending on your environment

660
00:35:04,350 --> 00:35:06,940
and where the Evil Printer is located,

661
00:35:06,940 --> 00:35:09,770
this might be a good way
to detect the attack.

662
00:35:09,770 --> 00:35:13,130
For instance, it's probably a bad thing

663
00:35:13,130 --> 00:35:16,820
if one of your systems is
reaching out to a printer

664
00:35:16,820 --> 00:35:17,853
over the internet.

665
00:35:24,070 --> 00:35:25,930
I've also embedded a unique string

666
00:35:25,930 --> 00:35:27,763
into Concealed Position's client.

667
00:35:28,630 --> 00:35:29,570
I chose the client,

668
00:35:29,570 --> 00:35:33,010
because that's typically
the victim system.

669
00:35:33,010 --> 00:35:37,370
So if we're using YARA, or any
other signature-based system,

670
00:35:37,370 --> 00:35:40,680
you should be able to
identify use of cp_client,

671
00:35:40,680 --> 00:35:42,530
based on this string.

672
00:35:42,530 --> 00:35:44,870
Naturally, smart attackers

673
00:35:44,870 --> 00:35:46,910
are going to review the code I've written

674
00:35:46,910 --> 00:35:49,193
and remove this line.

675
00:35:50,670 --> 00:35:52,910
But there are a lot of dumb
attackers out there, too.

676
00:35:52,910 --> 00:35:56,720
So hopefully if this ever
does get used in the wild,

677
00:35:56,720 --> 00:35:58,743
this will help stop that.

678
00:36:03,930 --> 00:36:07,350
Now, one of the challenges
with mitigations

679
00:36:07,350 --> 00:36:11,183
is I doubt this will
ever see any real patch.

680
00:36:12,690 --> 00:36:15,480
You know, installing a printer

681
00:36:15,480 --> 00:36:18,490
is meant to use these mechanisms.

682
00:36:18,490 --> 00:36:20,450
So I think the best you can do

683
00:36:20,450 --> 00:36:23,070
is just ensure that the affected drivers

684
00:36:23,070 --> 00:36:25,720
aren't on your systems already,

685
00:36:25,720 --> 00:36:26,660
and then enable

686
00:36:26,660 --> 00:36:30,343
the Package Point and Print
- Approved Servers in GPO.

687
00:36:31,350 --> 00:36:33,650
Now, of course, that will
make it very difficult

688
00:36:33,650 --> 00:36:35,993
for your end users to add printers.

689
00:36:37,260 --> 00:36:39,710
That's sort of the entire issue, isn't it?

690
00:36:39,710 --> 00:36:41,303
Printers can't be trusted.

691
00:36:46,760 --> 00:36:47,593
And finally,

692
00:36:47,593 --> 00:36:51,835
I'd like to discuss the
disclosures of the vulnerabilities,

693
00:36:51,835 --> 00:36:54,873
and suggest some future work.

694
00:36:58,650 --> 00:37:01,000
So after getting my DEF CON acceptance

695
00:37:01,000 --> 00:37:02,770
and talking to Dark Wolf,

696
00:37:02,770 --> 00:37:07,420
I sent similar disclosures to
Lexmark, Canon, and Microsoft.

697
00:37:07,420 --> 00:37:10,290
All were provided
descriptions and exploit code,

698
00:37:10,290 --> 00:37:12,243
all very similar disclosures, really.

699
00:37:13,496 --> 00:37:15,310
And they were all informed

700
00:37:15,310 --> 00:37:17,313
of the August 7th disclosure date.

701
00:37:22,580 --> 00:37:23,850
Excuse me.

702
00:37:23,850 --> 00:37:25,010
Lexmark was awesome.

703
00:37:25,010 --> 00:37:28,920
And this is exactly how
you want disclosure to go.

704
00:37:28,920 --> 00:37:31,320
They acknowledged receipt immediately.

705
00:37:31,320 --> 00:37:33,370
I sent the disclosure on a Friday,

706
00:37:33,370 --> 00:37:34,940
because I'm a monster,

707
00:37:34,940 --> 00:37:37,580
and they confirmed the issue on a Monday.

708
00:37:37,580 --> 00:37:40,170
And it only took a little more than a week

709
00:37:40,170 --> 00:37:41,860
to send me a beta patch,

710
00:37:41,860 --> 00:37:43,453
which is really impressive.

711
00:37:44,290 --> 00:37:46,790
You can see at the end here
that Lexmark intends to

712
00:37:46,790 --> 00:37:49,920
release a patch shortly
after I record this talk,

713
00:37:49,920 --> 00:37:54,907
so by the end of the week of July 12th.

714
00:37:54,907 --> 00:37:59,430
And Lexmark has been a
great communicator, overall.

715
00:37:59,430 --> 00:38:00,500
They even went as far as

716
00:38:00,500 --> 00:38:02,860
wishing me good luck on my DEF CON talk,

717
00:38:02,860 --> 00:38:05,220
which I never actually told them about.

718
00:38:05,220 --> 00:38:08,160
So I thought that was pretty clever.

719
00:38:08,160 --> 00:38:10,410
So a shoutout to Braden,
if you're listening.

720
00:38:11,640 --> 00:38:14,150
Now, the only real problem
with this disclosure

721
00:38:14,150 --> 00:38:17,120
is it took MITRE two
weeks to assign a CVE,

722
00:38:17,120 --> 00:38:18,410
which is really frustrating

723
00:38:18,410 --> 00:38:20,400
from a researcher's point of view,

724
00:38:20,400 --> 00:38:22,200
if they can't move faster than that.

725
00:38:23,080 --> 00:38:24,640
They literally have two jobs:

726
00:38:24,640 --> 00:38:28,500
assigning and publishing
CVEs that other people write.

727
00:38:28,500 --> 00:38:29,850
You know, how hard is that?

728
00:38:31,420 --> 00:38:34,020
Otherwise, great disclosure.

729
00:38:34,020 --> 00:38:35,163
Lexmark is awesome.

730
00:38:39,840 --> 00:38:43,530
So Canon and Lexmark were
sent very similar content,

731
00:38:43,530 --> 00:38:46,778
to the point that I accidentally
left the word Lexmark

732
00:38:46,778 --> 00:38:49,823
in a spot in my Canon disclosure.

733
00:38:51,120 --> 00:38:53,830
And disclosure with Canon
started off very well.

734
00:38:53,830 --> 00:38:57,000
They asked clarifying questions
on the affected component,

735
00:38:57,000 --> 00:38:58,943
but then nothing.

736
00:39:00,090 --> 00:39:03,920
By July 9th, they had the
vulnerability for three weeks

737
00:39:03,920 --> 00:39:06,270
and they hadn't confirmed the issue.

738
00:39:06,270 --> 00:39:07,823
They haven't denied the issue.

739
00:39:09,262 --> 00:39:12,280
They didn't indicate
if they tried the PoC,

740
00:39:12,280 --> 00:39:14,660
or if they'd even looked at the PoC,

741
00:39:14,660 --> 00:39:16,063
even though I keep asking.

742
00:39:16,990 --> 00:39:19,660
Now, they did release a
security patch on July 4th.

743
00:39:19,660 --> 00:39:21,410
But after looking at it,

744
00:39:21,410 --> 00:39:25,043
it doesn't affect the
vulnerability I reported.

745
00:39:26,150 --> 00:39:27,620
And they, for some reason,

746
00:39:27,620 --> 00:39:30,833
didn't mention it to me
until eight days later.

747
00:39:31,710 --> 00:39:33,090
But basically,

748
00:39:33,090 --> 00:39:36,600
I'm not sure where the
confusion lies with Canon,

749
00:39:36,600 --> 00:39:39,250
that they aren't giving
me any type of feedback

750
00:39:39,250 --> 00:39:41,340
so that I can help them,

751
00:39:41,340 --> 00:39:42,870
and I think at some point

752
00:39:42,870 --> 00:39:44,770
I'll probably have to loop in CERT/CC

753
00:39:44,770 --> 00:39:49,373
so that this gets a CVE
hopefully by August 7th.

754
00:39:53,450 --> 00:39:56,370
The Microsoft disclosure
has been reasonable.

755
00:39:56,370 --> 00:39:59,870
As you can see from the timeline,

756
00:39:59,870 --> 00:40:01,560
there was a fair amount of back and forth

757
00:40:01,560 --> 00:40:03,850
about recreating the issue.

758
00:40:03,850 --> 00:40:04,810
But eventually,

759
00:40:04,810 --> 00:40:07,930
I guess the proof of
concept video got there,

760
00:40:07,930 --> 00:40:09,100
which probably just means

761
00:40:09,100 --> 00:40:11,200
my written instructions weren't very good.

762
00:40:12,470 --> 00:40:15,790
Now, while they did acknowledge
the issue on July 12th,

763
00:40:15,790 --> 00:40:18,470
I actually don't expect
any type of CVE here

764
00:40:18,470 --> 00:40:19,633
or security bulletin.

765
00:40:20,993 --> 00:40:22,870
But really, I just wanted
Microsoft to be aware

766
00:40:22,870 --> 00:40:26,090
that this is a thing they
designed into their system,

767
00:40:26,090 --> 00:40:29,000
and that I'm going to talk
about it on August 7th.

768
00:40:29,000 --> 00:40:30,993
So, mission accomplished.

769
00:40:34,240 --> 00:40:37,420
But I honestly am not sure
how they can address this,

770
00:40:37,420 --> 00:40:40,363
without breaking normal printer workflows.

771
00:40:43,349 --> 00:40:44,640
You know, I think it is very funny

772
00:40:44,640 --> 00:40:47,270
how these three different disclosures

773
00:40:48,420 --> 00:40:50,190
were all very similar content,

774
00:40:50,190 --> 00:40:54,900
but they all had very differing results.

775
00:40:54,900 --> 00:40:56,400
So one turned out good.

776
00:40:56,400 --> 00:40:57,321
One turned out bad.

777
00:40:57,321 --> 00:40:58,590
(Jake laughs)

778
00:40:58,590 --> 00:41:01,543
And one spent a lot of
time, and can't reproduce.

779
00:41:06,180 --> 00:41:07,520
So, last slide.

780
00:41:07,520 --> 00:41:08,530
Future work.

781
00:41:08,530 --> 00:41:11,200
Like I said, any print
driver that is compatible

782
00:41:11,200 --> 00:41:14,850
with the driver store is
fair game, new or old.

783
00:41:14,850 --> 00:41:18,510
Really, very old is
even up for grabs here.

784
00:41:18,510 --> 00:41:21,520
So there are many drivers
that could be analyzed

785
00:41:21,520 --> 00:41:24,270
and added to Concealed Position.

786
00:41:24,270 --> 00:41:27,050
There's also nothing
special about CutePDF.

787
00:41:27,050 --> 00:41:27,883
It's only there

788
00:41:27,883 --> 00:41:30,370
because I couldn't get
Samba to do what I wanted,

789
00:41:30,370 --> 00:41:33,760
and didn't have the time to
write my own implementation

790
00:41:33,760 --> 00:41:38,383
of delivering a Package
Point and Print CAB file.

791
00:41:39,230 --> 00:41:40,960
Now, hopefully in the future,

792
00:41:40,960 --> 00:41:44,680
I or someone else will code that up,

793
00:41:44,680 --> 00:41:48,263
so that others can use an
Evil Printer as they choose.

794
00:41:49,400 --> 00:41:50,921
Once that is done,

795
00:41:50,921 --> 00:41:55,183
this attack would be great
paired with a USB attack.

796
00:41:56,360 --> 00:41:57,480
And finally,

797
00:41:57,480 --> 00:42:00,190
Concealed Position could use polishing.

798
00:42:00,190 --> 00:42:01,290
Like most exploits,

799
00:42:01,290 --> 00:42:06,290
it was written only to prove
that the attack was possible.

800
00:42:06,370 --> 00:42:08,450
So it's a little messy at the moment,

801
00:42:08,450 --> 00:42:11,030
and some of the mechanisms
around dropping DLL

802
00:42:11,030 --> 00:42:13,493
and customizing payloads
could be extended.

803
00:42:16,170 --> 00:42:18,960
Otherwise, that's it.

804
00:42:18,960 --> 00:42:21,340
Thank you all so much for listening.

805
00:42:21,340 --> 00:42:23,950
Thank you very much to Dark
Wolf for letting me share.

806
00:42:23,950 --> 00:42:26,160
And thank you again, DEF CON,

807
00:42:26,160 --> 00:42:30,300
for both the support and
allowing me to present.

808
00:42:30,300 --> 00:42:31,543
Again, thank you all.

