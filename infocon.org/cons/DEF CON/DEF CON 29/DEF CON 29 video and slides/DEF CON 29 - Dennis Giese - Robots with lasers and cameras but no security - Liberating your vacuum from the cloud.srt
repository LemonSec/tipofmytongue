1
00:00:01,810 --> 00:00:03,270
- Hi, I am Dennis Giese,

2
00:00:03,270 --> 00:00:05,930
and welcome to my talk about
robots with lasers and cameras,

3
00:00:05,930 --> 00:00:07,420
but no security,

4
00:00:07,420 --> 00:00:08,530
where we will talk about

5
00:00:08,530 --> 00:00:11,580
ways how you can liberate
your vacuum from the cloud.

6
00:00:11,580 --> 00:00:12,413
Before we start,

7
00:00:12,413 --> 00:00:14,660
here is some background
information about me.

8
00:00:14,660 --> 00:00:16,700
I'm a PhD student at
Northeastern University,

9
00:00:16,700 --> 00:00:19,070
and I'm working with
Professor Guevera Noubir.

10
00:00:19,070 --> 00:00:21,980
Our research field is wireless
and embedded security.

11
00:00:21,980 --> 00:00:24,736
My particular interest is
in the reverse engineering

12
00:00:24,736 --> 00:00:26,100
of interesting devices.

13
00:00:26,100 --> 00:00:27,550
I focus on smart home devices,

14
00:00:27,550 --> 00:00:29,470
mostly vacuum cleaning robots.

15
00:00:29,470 --> 00:00:31,640
My current research is in
the security and privacy

16
00:00:31,640 --> 00:00:32,853
of smart home speakers.

17
00:00:35,110 --> 00:00:36,440
In our most recent work,

18
00:00:36,440 --> 00:00:38,100
we analyze the security and privacy

19
00:00:38,100 --> 00:00:39,990
of used Amazon Echo devices.

20
00:00:39,990 --> 00:00:42,553
This paper was published
on ACM WiSec this year.

21
00:00:46,110 --> 00:00:48,030
Let's talk about the goals of this talk.

22
00:00:48,030 --> 00:00:49,817
First, I would like to
give you an overview

23
00:00:49,817 --> 00:00:51,460
of the current development

24
00:00:51,460 --> 00:00:53,570
in rooting of vacuum cleaning robots.

25
00:00:53,570 --> 00:00:56,770
In particular, we will focus
on Roborock and Dreame.

26
00:00:56,770 --> 00:00:59,420
We will talk about
vulnerabilities and backdoors,

27
00:00:59,420 --> 00:01:01,030
and I will explain new methods,

28
00:01:01,030 --> 00:01:03,410
which you can use to root your device.

29
00:01:03,410 --> 00:01:04,740
As a general side note,

30
00:01:04,740 --> 00:01:07,950
I have no intention of
bashing the companies.

31
00:01:07,950 --> 00:01:08,960
I like the products,

32
00:01:08,960 --> 00:01:12,500
and I think we have maintained
a very friendly relationship.

33
00:01:12,500 --> 00:01:16,043
However, obviously our goals
are slightly different.

34
00:01:17,430 --> 00:01:20,200
All right, let's talk
about our motivation.

35
00:01:20,200 --> 00:01:22,740
So why do we want to root devices?

36
00:01:22,740 --> 00:01:24,807
Well, as devices have powerful hardware

37
00:01:24,807 --> 00:01:26,130
and a lot of sensors,

38
00:01:26,130 --> 00:01:28,780
we can play around with
interesting hardware.

39
00:01:28,780 --> 00:01:32,400
This is especially interesting
for people in education.

40
00:01:32,400 --> 00:01:33,930
Then we want to stop devices

41
00:01:33,930 --> 00:01:35,380
from constantly calling home.

42
00:01:36,560 --> 00:01:38,360
Also a lot of people have already

43
00:01:38,360 --> 00:01:40,210
custom smart home services running,

44
00:01:40,210 --> 00:01:41,600
for example, Home Assistant,

45
00:01:41,600 --> 00:01:45,334
and here it is interesting to
connect the vacuum cleaners

46
00:01:45,334 --> 00:01:47,230
to that system.

47
00:01:47,230 --> 00:01:49,890
And finally, you want to
verify the privacy claims

48
00:01:49,890 --> 00:01:51,553
of the manufacturers.

49
00:01:53,720 --> 00:01:56,080
So why don't we trust IoT?

50
00:01:56,080 --> 00:01:57,600
Well, IoT in general,

51
00:01:57,600 --> 00:01:59,690
they're always connected to the internet

52
00:01:59,690 --> 00:02:01,610
and then your home network.

53
00:02:01,610 --> 00:02:03,170
The cloud communication is encrypted,

54
00:02:03,170 --> 00:02:06,910
and you don't really know what
kind of data is transmitted.

55
00:02:06,910 --> 00:02:08,200
From our experience we know

56
00:02:08,200 --> 00:02:10,570
that developing secure
hardware and software is hard

57
00:02:10,570 --> 00:02:13,770
and that IoT devices are
not always being patched.

58
00:02:13,770 --> 00:02:16,480
Also vendors sometimes
contradict each other

59
00:02:17,500 --> 00:02:19,350
in regards of their privacy claims.

60
00:02:19,350 --> 00:02:20,300
And as an end user,

61
00:02:20,300 --> 00:02:21,803
you have no way to be sure.

62
00:02:23,890 --> 00:02:26,170
All right, here's an example.

63
00:02:26,170 --> 00:02:27,320
Roborock claims for their flagship model

64
00:02:27,320 --> 00:02:28,970
that nothing is sent to the cloud,

65
00:02:28,970 --> 00:02:32,750
especially what is recorded by the camera.

66
00:02:32,750 --> 00:02:35,740
This claim was also
certified by the German TUV.

67
00:02:35,740 --> 00:02:37,140
However, on the same website,

68
00:02:37,140 --> 00:02:39,080
they show that you can
access the camera remotely

69
00:02:39,080 --> 00:02:39,913
from your phone.

70
00:02:39,913 --> 00:02:42,550
For example, you can watch
your pets and talk to them.

71
00:02:43,500 --> 00:02:46,100
Let's talk about the
problem of used devices.

72
00:02:46,100 --> 00:02:48,230
A lot of people order devices on Amazon,

73
00:02:48,230 --> 00:02:49,890
try them and return them.

74
00:02:49,890 --> 00:02:52,000
So used devices are not that rare.

75
00:02:52,000 --> 00:02:53,870
As a buyer, you have no real information

76
00:02:53,870 --> 00:02:55,810
about the past of the device.

77
00:02:55,810 --> 00:02:58,090
So a malicious person could have installed

78
00:02:58,090 --> 00:02:59,340
a rootkit onto it.

79
00:02:59,340 --> 00:03:02,050
As a new owner you have no
way to verify the software

80
00:03:02,050 --> 00:03:02,930
and as a result,

81
00:03:02,930 --> 00:03:06,130
you might have a malicious
device in your home network.

82
00:03:06,130 --> 00:03:08,760
So rooting is the only
way for you to verify

83
00:03:08,760 --> 00:03:10,503
that the device is in fact in.

84
00:03:12,430 --> 00:03:14,790
All right, let's take
a look into the past,

85
00:03:14,790 --> 00:03:16,383
the good old times of rooting.

86
00:03:17,690 --> 00:03:21,770
My first work with vacuum
cleaning robots was back in 2017.

87
00:03:21,770 --> 00:03:23,370
Here I've worked with Daniel Wegemer,

88
00:03:23,370 --> 00:03:26,410
and we were looking at the
Xiaomi Vacuum clean robot

89
00:03:26,410 --> 00:03:27,353
and the Roborock S5.

90
00:03:28,961 --> 00:03:32,210
We figured out that the
firmware images of just devices

91
00:03:32,210 --> 00:03:35,050
were unsigned and encrypted
with a very weak key

92
00:03:35,050 --> 00:03:37,070
and that custom firmware could be pushed

93
00:03:37,070 --> 00:03:38,790
from the local network,

94
00:03:38,790 --> 00:03:39,830
As a result,

95
00:03:39,830 --> 00:03:42,480
it was possible to root a
device without disassembly

96
00:03:42,480 --> 00:03:45,850
and develop custom software
and voice packages for them.

97
00:03:45,850 --> 00:03:49,430
We published our findings
on the 34C3 and back in 2017

98
00:03:49,430 --> 00:03:52,373
and also on DEF CON
exactly three years ago.

99
00:03:54,459 --> 00:03:56,910
Here we'd like to give
you some short recap

100
00:03:56,910 --> 00:04:01,305
about the hardware of the
Xiaomi vacuum robot and the S5.

101
00:04:01,305 --> 00:04:05,260
Both robots were running on quadcore CPU

102
00:04:05,260 --> 00:04:07,080
and have 512 megabytes of RAM.

103
00:04:07,080 --> 00:04:10,219
They had also 4gigabyte of eMMC flash.

104
00:04:10,219 --> 00:04:11,530
They had a lot of sensors

105
00:04:11,530 --> 00:04:13,060
and in particular, the most important ones

106
00:04:13,060 --> 00:04:16,170
are the lighter sensor
on the top of the robot,

107
00:04:16,170 --> 00:04:19,280
the infrared sensor and
the ultrasonic center.

108
00:04:19,280 --> 00:04:21,229
These devices also have some debug ports,

109
00:04:21,229 --> 00:04:22,580
for example, USB and UART,

110
00:04:22,580 --> 00:04:25,597
however, a USB was kind of protected

111
00:04:25,597 --> 00:04:28,210
and we never used this for anything.

112
00:04:28,210 --> 00:04:31,670
To give you some background
information about the software.

113
00:04:31,670 --> 00:04:33,980
This device is run off Ubuntu 14.04,

114
00:04:33,980 --> 00:04:35,180
mostly untouched.

115
00:04:35,180 --> 00:04:38,384
However, the vendors
obfuscated a root password.

116
00:04:38,384 --> 00:04:39,300
Interestingly,

117
00:04:39,300 --> 00:04:42,570
the vacuum cleaners were
controlled by the player software,

118
00:04:42,570 --> 00:04:43,980
which is basically an opensource

119
00:04:43,980 --> 00:04:45,440
robot device interface and server.

120
00:04:45,440 --> 00:04:48,240
So they used open-source
software to run the devices.

121
00:04:48,240 --> 00:04:50,160
But a lot of proprietary software on them,

122
00:04:50,160 --> 00:04:53,100
for example, they use
the custom adbd version

123
00:04:53,100 --> 00:04:54,654
which had some authentication

124
00:04:54,654 --> 00:04:57,138
so we couldn't really use it.

125
00:04:57,138 --> 00:04:58,750
They run a custom watchdog,

126
00:04:58,750 --> 00:05:01,310
which make sure that
the device didn't crash,

127
00:05:01,310 --> 00:05:03,990
but on the other side also
enforce copy protection.

128
00:05:03,990 --> 00:05:05,180
And they had a logging tool

129
00:05:05,180 --> 00:05:07,966
which uploads a lot of data to the cloud.

130
00:05:07,966 --> 00:05:12,330
They protected the ports on
the device with IP tables,

131
00:05:12,330 --> 00:05:13,163
for example,

132
00:05:13,163 --> 00:05:14,930
they blocked port 22 for SSH

133
00:05:14,930 --> 00:05:16,720
and blocked also the player ports.

134
00:05:16,720 --> 00:05:18,203
However, the interesting thing was,

135
00:05:18,203 --> 00:05:20,880
that the IP tables rules
only apply to IPv4.

136
00:05:22,015 --> 00:05:24,740
So if the device got an IPv6 address,

137
00:05:24,740 --> 00:05:26,343
it will not firewall at all.

138
00:05:27,910 --> 00:05:31,450
Alright, let's look on
how the forces strike back

139
00:05:31,450 --> 00:05:34,200
and how they started to lock down devices.

140
00:05:34,200 --> 00:05:36,940
Well, the first steps
in locking down we saw

141
00:05:36,940 --> 00:05:38,370
with newer S5 firmware.

142
00:05:38,370 --> 00:05:43,085
So here Roborock did block
local firmware updates.

143
00:05:43,085 --> 00:05:46,140
Interestingly, this change
was also pushed through

144
00:05:46,140 --> 00:05:47,970
other IoT devices from Xiaomi

145
00:05:47,970 --> 00:05:52,393
so most devices were basically
blocking local firm updates.

146
00:05:53,470 --> 00:05:56,300
We saw more changes with the
introduction of the Roborock S6

147
00:05:56,300 --> 00:05:58,250
which came out in 2019.

148
00:05:58,250 --> 00:05:59,700
For example, the firmware
and the voice packages

149
00:05:59,700 --> 00:06:00,533
were not signed,

150
00:06:00,533 --> 00:06:01,570
so we were not able to create

151
00:06:01,570 --> 00:06:03,850
our own custom voice packages anymore.

152
00:06:03,850 --> 00:06:06,410
Each model also used
different encryption keys.

153
00:06:06,410 --> 00:06:08,630
So if we had encryption
keys for one model,

154
00:06:08,630 --> 00:06:11,520
we were not able to depcrypt
firmware for a different model.

155
00:06:11,520 --> 00:06:14,260
They also started to sign
the configuration files

156
00:06:14,260 --> 00:06:15,650
to enforce region locks

157
00:06:15,650 --> 00:06:17,960
as many people bought
cheap devices from China

158
00:06:17,960 --> 00:06:20,640
and modified them so that
we were able to use them

159
00:06:20,640 --> 00:06:21,740
out of mainland China.

160
00:06:23,040 --> 00:06:25,117
One interesting aspect is
that most of the hardware

161
00:06:25,117 --> 00:06:26,710
remained mostly the same

162
00:06:26,710 --> 00:06:29,710
so most of the changes were
basically just done in software.

163
00:06:30,990 --> 00:06:32,630
All these changes meant that

164
00:06:32,630 --> 00:06:35,590
in order to get root
access onto the device,

165
00:06:35,590 --> 00:06:36,890
we need to disassemble it.

166
00:06:38,400 --> 00:06:41,050
One thing, which we thought
back when this device came out,

167
00:06:41,050 --> 00:06:44,190
that they might need to
keep rooting method secret.

168
00:06:44,190 --> 00:06:46,710
And so in the first two weeks

169
00:06:46,710 --> 00:06:48,230
when I got the Roborock S6,

170
00:06:48,230 --> 00:06:51,280
I was able to root it and
developed two different methods,

171
00:06:51,280 --> 00:06:53,970
one where we're expected
to root passwords via UART

172
00:06:53,970 --> 00:06:57,065
and they obfuscated it
so I could get access to

173
00:06:57,065 --> 00:06:58,410
obviously UART for example,

174
00:06:58,410 --> 00:06:59,632
And the other way was,

175
00:06:59,632 --> 00:07:03,722
I booted into a single user
mode and modified files there

176
00:07:03,722 --> 00:07:06,430
so that I had SSH access.

177
00:07:06,430 --> 00:07:08,890
Back then I didn't publish
the methods for some time,

178
00:07:08,890 --> 00:07:11,340
as I assumed that Roborock
would lock them down

179
00:07:11,340 --> 00:07:13,810
as soon as we know about them.

180
00:07:13,810 --> 00:07:16,330
So this is what you had
to do to get root access.

181
00:07:16,330 --> 00:07:18,990
You had basically to solder
a virus to the test patch

182
00:07:18,990 --> 00:07:20,473
to get the UART port.

183
00:07:21,740 --> 00:07:24,550
With routing we made some
observations over time.

184
00:07:24,550 --> 00:07:26,830
Every time we publish a
method, it got blocked

185
00:07:26,830 --> 00:07:28,410
and here are some examples for blocking.

186
00:07:28,410 --> 00:07:31,290
For example, local updates,
which we published in 2017

187
00:07:31,290 --> 00:07:33,237
were from firmware updates in 2018.

188
00:07:33,237 --> 00:07:36,340
The root password method
which I published in 2019

189
00:07:36,340 --> 00:07:40,420
was blocked in newly produced
devices back in 2019.

190
00:07:40,420 --> 00:07:45,420
And U-boot bypass was fixed
for new models in 2020.

191
00:07:45,550 --> 00:07:48,810
So there was one model
which came out at this time

192
00:07:48,810 --> 00:07:50,283
and it was already patched.

193
00:07:51,394 --> 00:07:54,330
This means basically that
all current public methods

194
00:07:54,330 --> 00:07:55,493
are basically blocked.

195
00:07:57,490 --> 00:07:58,323
All right,

196
00:07:58,323 --> 00:08:00,640
let's talk about the
development of Roborock models

197
00:08:00,640 --> 00:08:01,473
over time.

198
00:08:02,370 --> 00:08:05,300
So we only will talk about global models.

199
00:08:05,300 --> 00:08:08,010
There are way more models
like in mainland China,

200
00:08:08,010 --> 00:08:11,840
but in this case, I just want
to talk about global models.

201
00:08:11,840 --> 00:08:13,898
On the left side, you
see the size of the RAM,

202
00:08:13,898 --> 00:08:16,260
on the right side you'd
see the size of the flash,

203
00:08:16,260 --> 00:08:18,930
and this becomes more important later.

204
00:08:18,930 --> 00:08:22,540
In 2016, Xiaomi released the V1,

205
00:08:22,540 --> 00:08:26,430
which was basically your
end product by Roborock.

206
00:08:26,430 --> 00:08:30,943
Roborock released the S5
under their own name in 2017.

207
00:08:32,080 --> 00:08:33,910
In 2019, we saw more devices,

208
00:08:33,910 --> 00:08:36,800
we saw the Roborock S6 and the S6 Pure

209
00:08:36,800 --> 00:08:40,323
and the Xiaomi M1S which
was again, OM product.

210
00:08:41,710 --> 00:08:46,710
In 2020, we saw the S4 Max and S5 Max

211
00:08:47,370 --> 00:08:50,230
and their flagship model, the S6 MaxV.

212
00:08:50,230 --> 00:08:52,893
And this year we saw the Roborock S7.

213
00:08:54,300 --> 00:08:55,410
If you had to price,

214
00:08:55,410 --> 00:08:58,470
then you see that higher
prices do not really correlate

215
00:08:58,470 --> 00:08:59,713
with better hardware.

216
00:09:00,770 --> 00:09:02,750
Also one thing which we notice is that

217
00:09:02,750 --> 00:09:05,590
manufacturers are recycling
hardware in different models.

218
00:09:05,590 --> 00:09:07,640
For example, the Xiaomi Vacuum Robot

219
00:09:07,640 --> 00:09:10,820
has more or less the same
hardware as the Roborock S4.

220
00:09:10,820 --> 00:09:13,400
The Roborock S5 and the Roborock S6

221
00:09:13,400 --> 00:09:15,190
are more or less the same.

222
00:09:15,190 --> 00:09:17,060
And as you can see on the bottom,

223
00:09:17,060 --> 00:09:20,990
the S6 Pure, the S4 Max,
the S5 Max and the S7

224
00:09:20,990 --> 00:09:22,070
have the same main board

225
00:09:22,070 --> 00:09:24,010
and more or less the same hardware too.

226
00:09:24,010 --> 00:09:26,423
However, the prices are
very different for them.

227
00:09:28,720 --> 00:09:30,673
As a conclusion, one
thing which we notice is

228
00:09:30,673 --> 00:09:32,500
that the hardware gets weaker over time

229
00:09:32,500 --> 00:09:34,650
despite the devices
getting more expensive.

230
00:09:36,860 --> 00:09:39,820
Roborock has two vacuum
cleaners which are special.

231
00:09:39,820 --> 00:09:41,200
Both of them contain a camera,

232
00:09:41,200 --> 00:09:44,113
which is a little bit more
critical in regard to privacy.

233
00:09:45,720 --> 00:09:49,360
The first one is the M1S
which was released in 2019.

234
00:09:49,360 --> 00:09:51,020
Instead of using an alternate chip,

235
00:09:51,020 --> 00:09:53,210
this one uses a Rockchip Quadcore,

236
00:09:53,210 --> 00:09:55,130
which has five megabytes of RAM,

237
00:09:55,130 --> 00:09:56,460
four gigabyte of eMMC.

238
00:09:56,460 --> 00:09:58,160
It has a lighter sensor,

239
00:09:58,160 --> 00:10:00,210
which we already know from other models,

240
00:10:00,210 --> 00:10:01,060
but in addition to that,

241
00:10:01,060 --> 00:10:03,683
it has also an upward facing
black and white camera.

242
00:10:04,730 --> 00:10:07,330
It does have an ultrasonic
distance sensor in the front

243
00:10:07,330 --> 00:10:08,743
and infrared sensors.

244
00:10:10,890 --> 00:10:12,780
To give you a perspective of the camera,

245
00:10:12,780 --> 00:10:15,448
I record this video of the
room with vacuum cleaner,

246
00:10:15,448 --> 00:10:17,423
and I used Gstreamer for that.

247
00:10:20,260 --> 00:10:21,480
The second model with a camera

248
00:10:21,480 --> 00:10:23,520
is the Roborock S6 MaxV.

249
00:10:23,520 --> 00:10:25,410
This is currently the flagship model.

250
00:10:25,410 --> 00:10:28,900
It was released in 2020 and
contains a Qualcomm Octocore

251
00:10:28,900 --> 00:10:29,840
as you will see.

252
00:10:29,840 --> 00:10:32,130
It has one gigabyte of RAM,

253
00:10:32,130 --> 00:10:33,960
four gigabyte of eMMC flash.

254
00:10:33,960 --> 00:10:34,980
In addition to the lighter,

255
00:10:34,980 --> 00:10:38,530
it has also two color
cameras in the front,

256
00:10:38,530 --> 00:10:40,600
which are illuminated with infrared.

257
00:10:40,600 --> 00:10:43,290
And attach the usual infrared sensors.

258
00:10:43,290 --> 00:10:44,123
In the bottom left,

259
00:10:44,123 --> 00:10:46,940
you can see the stereo
camera of the device.

260
00:10:46,940 --> 00:10:49,383
In the bottom it has the
infrared illumination.

261
00:10:49,383 --> 00:10:51,880
So this device will see in the dark.

262
00:10:51,880 --> 00:10:54,010
On the right you find
screenshots from the app.

263
00:10:54,010 --> 00:10:55,440
As you can see the vacuum cleaner

264
00:10:55,440 --> 00:10:58,170
can accurately detect
objects and can avoid them.

265
00:10:58,170 --> 00:11:01,233
This is also quite interesting,
again, for privacy reasons.

266
00:11:03,700 --> 00:11:05,700
If you look at the
software of both devices,

267
00:11:05,700 --> 00:11:07,393
both of them are very similar.

268
00:11:08,380 --> 00:11:10,890
They use Android as the operating system

269
00:11:10,890 --> 00:11:12,600
and the controlling software for the robot

270
00:11:12,600 --> 00:11:14,760
is very similar to the previous models.

271
00:11:14,760 --> 00:11:16,470
The software access the cameras

272
00:11:16,470 --> 00:11:19,605
via the video4linux subsystem.

273
00:11:19,605 --> 00:11:21,690
There are a lot of
libraries which are used,

274
00:11:21,690 --> 00:11:24,790
but the more interesting
ones are OpenCV, OpenCL

275
00:11:24,790 --> 00:11:25,790
and Tensorflow Lite.

276
00:11:26,924 --> 00:11:28,270
Roborock learnt from the past

277
00:11:28,270 --> 00:11:31,640
and added a lot of security
measures to their device.

278
00:11:31,640 --> 00:11:32,473
For example,

279
00:11:32,473 --> 00:11:34,410
secure boot is enabled
and they make use of the

280
00:11:34,410 --> 00:11:37,720
replay-protected-memory-block
as a downgrade protection.

281
00:11:37,720 --> 00:11:40,790
The system partition is integrity
protected with DM-Verity

282
00:11:40,790 --> 00:11:42,480
so we cannot modify it.

283
00:11:42,480 --> 00:11:45,580
Also, a lot of petitions
are encrypted with LUKS,

284
00:11:45,580 --> 00:11:47,910
in particular all the
applications specific programs

285
00:11:47,910 --> 00:11:50,030
are stored on an encrypted partition.

286
00:11:50,030 --> 00:11:52,260
The keys for these petitions
are stored in OPTEE

287
00:11:52,260 --> 00:11:54,890
which is using ARM TrustZone,

288
00:11:54,890 --> 00:11:57,590
but there are more security features.

289
00:11:57,590 --> 00:11:58,423
For example,

290
00:11:58,423 --> 00:12:02,000
Roborock added a kernel-based
verification of binaries.

291
00:12:02,000 --> 00:12:04,020
All binaries before we get executed

292
00:12:04,020 --> 00:12:06,960
are checked for the correct signature.

293
00:12:06,960 --> 00:12:09,980
This means we cannot really
put any custom binaries

294
00:12:09,980 --> 00:12:11,053
onto the system.

295
00:12:12,130 --> 00:12:14,640
Also the signed and
encrypted firmware updates.

296
00:12:14,640 --> 00:12:16,810
This time, each of the firmware versions

297
00:12:16,810 --> 00:12:17,920
has a different key.

298
00:12:17,920 --> 00:12:19,827
The master keys itself are stored in OPTEE

299
00:12:19,827 --> 00:12:21,133
and using TrustZone.

300
00:12:22,090 --> 00:12:26,190
And interestingly, they
modified the IP tables binary.

301
00:12:26,190 --> 00:12:27,880
Traditionally, what we did for rooting,

302
00:12:27,880 --> 00:12:29,630
we removed all the fiber roots

303
00:12:29,630 --> 00:12:30,760
as soon as we root the device

304
00:12:30,760 --> 00:12:33,130
so we could access SSH and other tools.

305
00:12:33,130 --> 00:12:36,430
However, Roborock removed
the ability of IP tables

306
00:12:36,430 --> 00:12:37,680
to flush or delete rules

307
00:12:37,680 --> 00:12:40,882
so as soon as rules
were added to IP tables,

308
00:12:40,882 --> 00:12:42,780
we cannot remove them anymore.

309
00:12:42,780 --> 00:12:44,200
And they locked also UART,

310
00:12:44,200 --> 00:12:47,593
so we cannot use UART to get root access.

311
00:12:49,940 --> 00:12:50,773
All right.

312
00:12:50,773 --> 00:12:53,480
We had some petitions which
are especially interesting

313
00:12:53,480 --> 00:12:54,720
on these devices,

314
00:12:54,720 --> 00:12:58,210
which we need also later for our root.

315
00:12:58,210 --> 00:12:59,270
There's the app partition

316
00:12:59,270 --> 00:13:00,670
which contains the device credentials

317
00:13:00,670 --> 00:13:02,480
and some other configuration files.

318
00:13:02,480 --> 00:13:06,560
This partition is not
protected by LUKS or DM-verity.

319
00:13:06,560 --> 00:13:09,364
Then we have two copies
of the system partition.

320
00:13:09,364 --> 00:13:10,550
One of them is the active one,

321
00:13:10,550 --> 00:13:12,370
one of them is the passive one.

322
00:13:12,370 --> 00:13:14,300
Both partitions are
protective of DM-Verity

323
00:13:14,300 --> 00:13:16,050
so we cannot modify them.

324
00:13:16,050 --> 00:13:18,420
Then we have two application partitions,

325
00:13:18,420 --> 00:13:20,980
again one active and one passive copy,

326
00:13:20,980 --> 00:13:22,280
which are encrypted with LUKS,

327
00:13:22,280 --> 00:13:24,580
however we are not integrity protected.

328
00:13:24,580 --> 00:13:25,890
They have a reserve partition,

329
00:13:25,890 --> 00:13:27,240
which contains the calibration data.

330
00:13:27,240 --> 00:13:29,073
This one is again encrypted.

331
00:13:29,930 --> 00:13:31,840
and they have the user data partition,

332
00:13:31,840 --> 00:13:33,660
which contains the log files and the maps,

333
00:13:33,660 --> 00:13:36,150
and it's again it's encrypted with looks.

334
00:13:36,150 --> 00:13:40,590
So let's talk about the new
routing methods for Roborock.

335
00:13:40,590 --> 00:13:42,780
Currently they have three
models of vacuum cleaners

336
00:13:42,780 --> 00:13:44,670
which have no public root.

337
00:13:44,670 --> 00:13:46,915
This is the Roborock S7
which came out this year,

338
00:13:46,915 --> 00:13:50,490
the M1S and the MaxV.

339
00:13:50,490 --> 00:13:52,490
Let's start wit the Roborock.

340
00:13:52,490 --> 00:13:55,420
So the Roborock S7 has more
or less the same main board

341
00:13:55,420 --> 00:13:58,500
as the S5 Max, S6 Pure etc.

342
00:13:58,500 --> 00:14:00,560
However the problem is
that they patched U-boot

343
00:14:00,560 --> 00:14:03,010
so we cannot use UART anymore to root it.

344
00:14:03,010 --> 00:14:05,410
In addition to that, the
RootFS is a read only Squash FS

345
00:14:05,410 --> 00:14:08,820
so even if you have access on the device,

346
00:14:08,820 --> 00:14:10,850
we cannot modify the partition.

347
00:14:10,850 --> 00:14:13,223
I developed a new method for this device,

348
00:14:14,060 --> 00:14:16,300
which was FEL rooting.

349
00:14:16,300 --> 00:14:18,320
This method doesn't require any soldering,

350
00:14:18,320 --> 00:14:21,370
however it requires still that
the device is disassembled.

351
00:14:21,370 --> 00:14:23,720
This method also automatically
patches the root FS

352
00:14:23,720 --> 00:14:24,553
and enables SSH.

353
00:14:25,620 --> 00:14:29,523
And it applies to all current
NAND based Roborock models.

354
00:14:31,060 --> 00:14:32,740
In order to find a new rooting method,

355
00:14:32,740 --> 00:14:34,642
we need to reverse engineer the PCB.

356
00:14:34,642 --> 00:14:36,470
We knew already where the UART pins were,

357
00:14:36,470 --> 00:14:40,370
but we are useless after they
blocked this functionality.

358
00:14:40,370 --> 00:14:44,180
However, all the Allwinner SOCs
have the so called FEL mode.

359
00:14:44,180 --> 00:14:45,740
FEL mode is a low-level mode

360
00:14:45,740 --> 00:14:47,770
which allows the flashing of the device.

361
00:14:47,770 --> 00:14:49,490
And it is burnt in the SOC ROM

362
00:14:49,490 --> 00:14:51,200
so it cannot be modified.

363
00:14:51,200 --> 00:14:54,920
The idea is to load a custom OS via FEL.

364
00:14:54,920 --> 00:14:57,870
There are two typical matters
to trigger the FEL mode.

365
00:14:57,870 --> 00:14:59,940
First, we can somehow
disabled the flash chip,

366
00:14:59,940 --> 00:15:02,120
for example, by grounding D clock,

367
00:15:02,120 --> 00:15:03,550
wherever this method might be risky

368
00:15:03,550 --> 00:15:05,570
if you don't do it correctly.

369
00:15:05,570 --> 00:15:09,370
And the second one is, that
we can pull the BOOT mode pin

370
00:15:09,370 --> 00:15:11,143
or trigger the FEL pin.

371
00:15:12,030 --> 00:15:13,460
The problem with this
is we need to figure out

372
00:15:13,460 --> 00:15:14,373
where this pin is.

373
00:15:15,460 --> 00:15:19,440
So I got myself a spare PCB and did

374
00:15:19,440 --> 00:15:22,190
destructively de-solder
the associate chip.

375
00:15:22,190 --> 00:15:23,200
After I did that,

376
00:15:23,200 --> 00:15:25,780
I probed all the pins and was able to find

377
00:15:25,780 --> 00:15:27,010
the incorrect pin.

378
00:15:27,010 --> 00:15:30,590
For example, like J-tech
or the boot mode selection.

379
00:15:30,590 --> 00:15:33,993
And by having this, we can use
it to trigger the FEL mode.

380
00:15:35,600 --> 00:15:37,883
So how does this approach actually work?

381
00:15:38,720 --> 00:15:40,770
The challenge for Allwinner SOCs is that

382
00:15:40,770 --> 00:15:42,620
the NAND support the proprietary.

383
00:15:42,620 --> 00:15:44,650
So we cannot use a main line kernel

384
00:15:44,650 --> 00:15:46,320
or mainline U-boot.

385
00:15:46,320 --> 00:15:47,950
So my approach was the following.

386
00:15:47,950 --> 00:15:49,380
I extracted a current configuration

387
00:15:49,380 --> 00:15:50,750
from the Roborock kernel.

388
00:15:50,750 --> 00:15:54,180
I created my own InitramFS
with Dropbear, SSH keys,

389
00:15:54,180 --> 00:15:55,490
and some tools.

390
00:15:55,490 --> 00:15:56,830
I compiled a minimal kernel

391
00:15:56,830 --> 00:15:59,493
using the Nintendo NES classic sources.

392
00:15:59,493 --> 00:16:01,780
The Nintendo NES classic
uses the same chip

393
00:16:01,780 --> 00:16:03,970
as the Roborock vacuums.

394
00:16:03,970 --> 00:16:05,930
I created my custom U-boot version

395
00:16:05,930 --> 00:16:08,660
and with a different extractor
to Roborock configuration.

396
00:16:08,660 --> 00:16:12,210
And I triggered the FEL
mode by shorting the TPA17,

397
00:16:12,210 --> 00:16:14,911
cause it's the boot
selection pin, to ground.

398
00:16:14,911 --> 00:16:18,810
Then I loaded U-Boot, kernel
and the initramFS into the RAM

399
00:16:18,810 --> 00:16:20,003
and executed it.

400
00:16:20,920 --> 00:16:22,310
After I did that,

401
00:16:22,310 --> 00:16:25,590
my custom has booted, patched
automatically the root FS

402
00:16:25,590 --> 00:16:26,823
and I had root.

403
00:16:27,810 --> 00:16:30,360
How does the patching
process exactly look like?

404
00:16:30,360 --> 00:16:32,400
First we need to boot into the FEL image,

405
00:16:32,400 --> 00:16:35,210
then we need to just
decompress the Squash FS.

406
00:16:35,210 --> 00:16:37,170
After that, we patched this image.

407
00:16:37,170 --> 00:16:39,480
For example, we installed
the authorized key file

408
00:16:39,480 --> 00:16:41,970
and the custom Dropbear server.

409
00:16:41,970 --> 00:16:43,290
We compressed the image again,

410
00:16:43,290 --> 00:16:45,420
and overwrote the partition
with the new image.

411
00:16:45,420 --> 00:16:47,843
And as a result we have
SSH access and root.

412
00:16:49,120 --> 00:16:51,600
So what are the advantages
of this new method?

413
00:16:51,600 --> 00:16:53,780
Well, first we don't need
any soldering anymore.

414
00:16:53,780 --> 00:16:55,880
We just can short the mode pin one time

415
00:16:55,880 --> 00:16:57,470
and we were able to go.

416
00:16:57,470 --> 00:16:59,100
It's a very simple process,

417
00:16:59,100 --> 00:17:01,260
and it also allows to
restore bricked devices,

418
00:17:01,260 --> 00:17:03,050
which was not possible before.

419
00:17:03,050 --> 00:17:05,450
And also one important
thing is that it can be used

420
00:17:05,450 --> 00:17:08,850
for Allwinner based vacuum cleaners.

421
00:17:08,850 --> 00:17:12,130
So now that we have root
for the Roborock S7,

422
00:17:12,130 --> 00:17:14,380
let's take a look at
the camera based models.

423
00:17:15,570 --> 00:17:19,760
So if you want to root
the M1S and the MaxV,

424
00:17:19,760 --> 00:17:21,600
we have some issues.

425
00:17:21,600 --> 00:17:24,030
First, all the ports are
closed or firewalled.

426
00:17:24,030 --> 00:17:26,810
The file systems are encrypted
or integrity protected,

427
00:17:26,810 --> 00:17:30,810
and the USB interface is
protected with some custom ADPD.

428
00:17:30,810 --> 00:17:34,420
So to get root access, we need
to have a layered approach.

429
00:17:34,420 --> 00:17:37,230
First, we need to break in by USB,

430
00:17:37,230 --> 00:17:39,180
then we need you to disable the SElinux

431
00:17:39,180 --> 00:17:42,130
and then patch the application partition.

432
00:17:42,130 --> 00:17:44,040
And as an important note,

433
00:17:44,040 --> 00:17:46,200
while it might be possible
to root these devices,

434
00:17:46,200 --> 00:17:48,300
it might be impossible for many people.

435
00:17:48,300 --> 00:17:53,300
So don't expect it to be that
easy as for previous models.

436
00:17:55,100 --> 00:17:58,160
All right, level one, get ADB shell.

437
00:17:58,160 --> 00:17:58,993
If we connect over USB,

438
00:17:58,993 --> 00:18:01,783
we need to do a challenge
response authentication.

439
00:18:02,960 --> 00:18:05,710
This authentication is
based on the VINDA secret,

440
00:18:05,710 --> 00:18:06,543
which we don't have.

441
00:18:06,543 --> 00:18:09,543
So Roborock has it probably
somewhere in a database.

442
00:18:10,900 --> 00:18:12,650
The secret is also device specific.

443
00:18:14,010 --> 00:18:15,570
Also the ADB is controlled

444
00:18:15,570 --> 00:18:16,950
over a special configuration file,

445
00:18:16,950 --> 00:18:18,583
which we might need to modify.

446
00:18:19,920 --> 00:18:22,060
All the files are stored
on a default position

447
00:18:22,060 --> 00:18:23,723
and are thankfully not protected.

448
00:18:24,930 --> 00:18:27,040
So our idea is to follows.

449
00:18:27,040 --> 00:18:28,760
First, we need to connect to the flash,

450
00:18:28,760 --> 00:18:30,700
for example, via in system programming

451
00:18:30,700 --> 00:18:32,540
or by de-soldering it,

452
00:18:32,540 --> 00:18:35,820
then we need to create
or extract VINDA secret.

453
00:18:35,820 --> 00:18:38,670
And then we use a tool to
compute the challenge response.

454
00:18:39,850 --> 00:18:43,000
So for the M1S we can
do in system programming

455
00:18:43,000 --> 00:18:46,741
by soldering small virus on
the bottom side of the PCP.

456
00:18:46,741 --> 00:18:49,930
The pictures which you see
here are from my experiments

457
00:18:49,930 --> 00:18:54,260
where I use the SD card as a
replacement for the eMMC flash.

458
00:18:54,260 --> 00:18:56,160
But the pin on this model is the same.

459
00:18:57,160 --> 00:18:58,400
As an important warning,

460
00:18:58,400 --> 00:18:59,610
if you don't know what you're doing,

461
00:18:59,610 --> 00:19:01,363
you likely will break your device.

462
00:19:02,460 --> 00:19:03,910
So I tried both methods,

463
00:19:03,910 --> 00:19:07,030
but I figured out ISP access
can be sometimes tricky.

464
00:19:07,030 --> 00:19:09,360
So what I did instead
was I used an adapter

465
00:19:09,360 --> 00:19:11,150
to read out the chip,

466
00:19:11,150 --> 00:19:14,740
which requires reflow
soldering to remove the chip

467
00:19:14,740 --> 00:19:17,543
and re-balling and then
re-soldering it again.

468
00:19:19,530 --> 00:19:21,543
Okay, what are the results of level one?

469
00:19:22,430 --> 00:19:26,000
I have a more detailed
how to on my website.

470
00:19:26,000 --> 00:19:29,753
However what I did here is I
set the VINDA secret to or use.

471
00:19:30,780 --> 00:19:32,630
After I connected the device via USB,

472
00:19:32,630 --> 00:19:34,610
I needed to extract the
serial number from it.

473
00:19:34,610 --> 00:19:36,590
So I ran ADB devices,

474
00:19:36,590 --> 00:19:37,730
the serial numbers required

475
00:19:37,730 --> 00:19:39,530
for the challenge response process.

476
00:19:39,530 --> 00:19:43,950
In the next step I asked
the device for a challenge.

477
00:19:43,950 --> 00:19:46,430
So as you see here, I got
like a random string back,

478
00:19:46,430 --> 00:19:47,890
which is the challenge.

479
00:19:47,890 --> 00:19:50,550
In the next step I used the tool VINDA

480
00:19:50,550 --> 00:19:52,093
to generate a response.

481
00:19:53,580 --> 00:19:54,413
So at this point,

482
00:19:54,413 --> 00:19:57,270
I want to thank Erik Uhlmann
for his support and help

483
00:19:57,270 --> 00:19:58,750
to create this tool.

484
00:19:58,750 --> 00:20:02,470
Before that I was computing
the response manually,

485
00:20:02,470 --> 00:20:07,470
but he extracted and got the function

486
00:20:07,478 --> 00:20:08,311
and just put it in a C program

487
00:20:08,311 --> 00:20:10,313
so now we can just run it from the shell.

488
00:20:12,110 --> 00:20:14,330
The result of this program

489
00:20:14,330 --> 00:20:16,550
is basically the response.

490
00:20:16,550 --> 00:20:17,650
And as soon as we have that,

491
00:20:17,650 --> 00:20:22,650
we can just run any commands
which we want to do,

492
00:20:22,710 --> 00:20:23,720
as you see here.

493
00:20:25,360 --> 00:20:26,550
We have no shell access,

494
00:20:26,550 --> 00:20:29,010
but SELinux is still enforced.

495
00:20:29,010 --> 00:20:31,440
SELinux will prevent us
from doing specific things.

496
00:20:31,440 --> 00:20:32,770
Even if we are root.

497
00:20:32,770 --> 00:20:34,720
For example, the network access is blocked

498
00:20:34,720 --> 00:20:37,020
and we don't have any
access to the dev directory

499
00:20:37,020 --> 00:20:39,740
so we cannot mount
partitions or access devices.

500
00:20:39,740 --> 00:20:41,690
However, we can do two things.

501
00:20:41,690 --> 00:20:45,260
We can do bind mounts and we
can issue the kill command.

502
00:20:45,260 --> 00:20:49,340
So the idea to disable
SELinux is as follows.

503
00:20:49,340 --> 00:20:52,860
First we copied a miio directory
to a temporary location.

504
00:20:52,860 --> 00:20:55,580
The miio directory contains
the Xiaomi cloud client,

505
00:20:55,580 --> 00:20:57,280
which is launched by the watchdog.

506
00:20:57,280 --> 00:20:59,210
The watchdog has all privileges,

507
00:20:59,210 --> 00:21:02,880
and it makes sure that if
the new client is crashing,

508
00:21:02,880 --> 00:21:04,173
that it gets restarted.

509
00:21:05,330 --> 00:21:06,973
In the next step we
replaced the miio client

510
00:21:06,973 --> 00:21:08,150
with a bash script,

511
00:21:08,150 --> 00:21:09,980
which disables SELinux.

512
00:21:10,910 --> 00:21:11,770
In the next step,

513
00:21:11,770 --> 00:21:13,050
we mount this temporary location

514
00:21:13,050 --> 00:21:15,260
back to the original location.

515
00:21:15,260 --> 00:21:17,700
If we now kill the miio client,

516
00:21:17,700 --> 00:21:20,250
the watchdog will restart our bash script

517
00:21:20,250 --> 00:21:22,140
instead of the real miio client.

518
00:21:22,140 --> 00:21:25,260
So hopefully SELinux gets disabled.

519
00:21:25,260 --> 00:21:27,710
Let's take a look if this
works also in practice.

520
00:21:31,030 --> 00:21:32,763
In this case, what we
need to verify first,

521
00:21:32,763 --> 00:21:34,860
is that is SELinux is actually enabled.

522
00:21:34,860 --> 00:21:36,650
So with the getenforce command,

523
00:21:36,650 --> 00:21:39,253
we get the response that it's enforcing.

524
00:21:40,220 --> 00:21:42,110
In the next step we check the process ID

525
00:21:42,110 --> 00:21:43,640
of the miio client process.

526
00:21:43,640 --> 00:21:46,730
So we see the regular processes running.

527
00:21:46,730 --> 00:21:49,740
Now, we copy the miio folder
to a temporary location

528
00:21:49,740 --> 00:21:53,110
and write our bash script into the client.

529
00:21:53,110 --> 00:21:54,890
The client is not an alpha anymore.

530
00:21:54,890 --> 00:21:56,910
Instead, it's a beta script.

531
00:21:56,910 --> 00:22:01,350
Now, we bind mount this folder
to the original location

532
00:22:01,350 --> 00:22:03,340
and we kill the miio client.

533
00:22:03,340 --> 00:22:05,530
And now hopefully the
bash group has executed

534
00:22:05,530 --> 00:22:07,504
and we can check it with getenforce,

535
00:22:07,504 --> 00:22:10,983
and we see it's permitted
as SELinux is disabled.

536
00:22:12,400 --> 00:22:14,710
Let's do level three.

537
00:22:14,710 --> 00:22:16,280
We have no full root access,

538
00:22:16,280 --> 00:22:17,930
however, it's only temporarily.

539
00:22:17,930 --> 00:22:20,850
So as in the moment when we
restart the vacuum cleaner,

540
00:22:20,850 --> 00:22:22,023
we lose root access.

541
00:22:22,930 --> 00:22:25,230
So the good thing is the app partition

542
00:22:25,230 --> 00:22:26,760
is not integrity protected.

543
00:22:26,760 --> 00:22:28,260
If you modify information there

544
00:22:28,260 --> 00:22:30,180
then we don't have any issue.

545
00:22:30,180 --> 00:22:31,830
By modification of acute scripts,

546
00:22:31,830 --> 00:22:35,323
we can disable SELinux and start
Dropbear on different port.

547
00:22:36,340 --> 00:22:38,340
The reason why we want to start
Dropbear on a different port

548
00:22:38,340 --> 00:22:41,993
is that IP tables still
blocks the port 22.

549
00:22:43,210 --> 00:22:44,500
As I mentioned before,

550
00:22:44,500 --> 00:22:46,430
Roborock modified the IP tables binary

551
00:22:46,430 --> 00:22:48,010
so that we cannot delete rules,

552
00:22:48,010 --> 00:22:50,260
but instead we can just
use a different port.

553
00:22:51,175 --> 00:22:52,008
We are still limited

554
00:22:52,008 --> 00:22:54,420
by the ELF binary signature verification.

555
00:22:54,420 --> 00:22:56,500
However, we found a
backdoor in this function.

556
00:22:56,500 --> 00:22:58,170
If you give a binary a particular name,

557
00:22:58,170 --> 00:23:00,120
then it is whitelisted.

558
00:23:00,120 --> 00:23:02,520
We can even point symbolic
links to this binary.

559
00:23:03,850 --> 00:23:06,570
Many thanks again to Erik
Uhlmann at this point,

560
00:23:06,570 --> 00:23:08,320
which helped me to figure that out.

561
00:23:10,150 --> 00:23:11,563
Let's do the demo again.

562
00:23:13,348 --> 00:23:14,720
I want you to run Valetudo on my robot.

563
00:23:14,720 --> 00:23:16,340
Valetudo is a cloud replacement,

564
00:23:16,340 --> 00:23:19,730
which allows to control
your vacuum robot locally.

565
00:23:19,730 --> 00:23:20,870
As you can see here,

566
00:23:20,870 --> 00:23:24,300
I downloaded it with we get
into a temporary directory

567
00:23:24,300 --> 00:23:25,580
and I try to launch it.

568
00:23:25,580 --> 00:23:27,670
However, I got a segmentation fault.

569
00:23:27,670 --> 00:23:29,390
Typically segmentation faults happen

570
00:23:29,390 --> 00:23:31,110
if some libraries are broken.

571
00:23:31,110 --> 00:23:33,620
However, when I was
looking at a kernel lock,

572
00:23:33,620 --> 00:23:36,150
I saw that the verify
elf function kicked in

573
00:23:36,150 --> 00:23:37,653
and stopped the execution.

574
00:23:38,580 --> 00:23:41,240
So now let's try a trick
with the whitelist.

575
00:23:41,240 --> 00:23:42,850
So we renamed the Valetudo to the binary

576
00:23:42,850 --> 00:23:46,170
to the whitelisted name.

577
00:23:46,170 --> 00:23:48,590
As soon as we run the whitelisted name,

578
00:23:48,590 --> 00:23:51,900
you see Valetudo is starting
happily and everything works.

579
00:23:51,900 --> 00:23:54,410
So now we have full root access

580
00:23:54,410 --> 00:23:56,603
and can run our own
binaries on the system.

581
00:23:58,050 --> 00:24:00,410
So some other ideas for
these vacuum cleaners,

582
00:24:00,410 --> 00:24:02,610
well, we can ask OPTEE nicely

583
00:24:02,610 --> 00:24:05,480
to decrypt firmware updates
for us as we have root access

584
00:24:05,480 --> 00:24:09,770
and as we have still a secure system,

585
00:24:09,770 --> 00:24:13,260
OPTEE will happily decrypt
firmware updates for us.

586
00:24:13,260 --> 00:24:16,280
Also, we can access to
the cameras directly.

587
00:24:16,280 --> 00:24:19,250
For people who understand
how TensorFlow light works,

588
00:24:19,250 --> 00:24:21,080
you can take a look at the
machine learning models

589
00:24:21,080 --> 00:24:22,520
of the vacuum cleaner.

590
00:24:22,520 --> 00:24:24,050
I myself have no idea how this works

591
00:24:24,050 --> 00:24:26,000
so I didn't take a look at it.

592
00:24:26,000 --> 00:24:28,540
And we can take also a
look at the other backdoor.

593
00:24:28,540 --> 00:24:30,210
So there is some hidden functions

594
00:24:30,210 --> 00:24:32,053
which wait only to be explored.

595
00:24:33,550 --> 00:24:35,550
So as a summary about Roborock,

596
00:24:35,550 --> 00:24:38,810
well they have an easy method
to root the S7 vacuum cleaner

597
00:24:38,810 --> 00:24:40,310
and some other models.

598
00:24:40,310 --> 00:24:44,700
We have also a rooting method
to root the M1S and MaxV.

599
00:24:44,700 --> 00:24:46,390
However, this method is dangerous

600
00:24:46,390 --> 00:24:48,510
and will likely break your device.

601
00:24:48,510 --> 00:24:50,150
It's mostly only feasible

602
00:24:50,150 --> 00:24:52,440
if you have the equipment and experience.

603
00:24:52,440 --> 00:24:55,410
So regard this root as a proof of concept

604
00:24:55,410 --> 00:24:58,160
and that we technically
can root these devices.

605
00:24:58,160 --> 00:25:00,760
However, I don't think
that it will be useful

606
00:25:00,760 --> 00:25:02,550
for a lot of people.

607
00:25:02,550 --> 00:25:05,190
As a general recommendation
I think at this point,

608
00:25:05,190 --> 00:25:10,190
I would say that we should try
to avoid new Roborock models

609
00:25:10,280 --> 00:25:12,073
if you want to have root.

610
00:25:12,073 --> 00:25:14,980
Part of the reason is they
lock down the systems.

611
00:25:14,980 --> 00:25:18,960
And the other reason is that
due to the weaker hardware,

612
00:25:18,960 --> 00:25:22,000
we will run into resource issues

613
00:25:22,000 --> 00:25:24,200
if you try to run custom
software onto them.

614
00:25:25,350 --> 00:25:26,560
All right.

615
00:25:26,560 --> 00:25:28,741
So we need a new alternative,

616
00:25:28,741 --> 00:25:31,630
and the great thing is
there's a new player

617
00:25:31,630 --> 00:25:32,910
in the field of vacuum cleaners,

618
00:25:32,910 --> 00:25:33,817
which is Dreame.

619
00:25:35,943 --> 00:25:38,340
Dreame is a great alternative for us.

620
00:25:38,340 --> 00:25:41,220
They released their
first model back in 2019,

621
00:25:41,220 --> 00:25:43,920
and they produce OEM
products also for Xiaomi.

622
00:25:43,920 --> 00:25:46,980
They have four different
kinds of vacuum cleaners

623
00:25:46,980 --> 00:25:48,580
which they produce.

624
00:25:48,580 --> 00:25:50,860
The Xiaomi 1C and the Dreame F9

625
00:25:50,860 --> 00:25:52,520
are VSLAM based models,

626
00:25:52,520 --> 00:25:55,760
so we have a camera which
was looking on the ceiling

627
00:25:55,760 --> 00:25:57,800
and we create a map via that.

628
00:25:57,800 --> 00:26:00,640
The Dreame D9 has a more
traditional, lighter sensor,

629
00:26:00,640 --> 00:26:02,963
similar to the Roborock devices.

630
00:26:04,637 --> 00:26:07,320
The Xiaomi 1C has a VSLAM and ToF camera

631
00:26:07,320 --> 00:26:11,220
so it can scan produce scan objects

632
00:26:11,220 --> 00:26:12,750
which are in front of it.

633
00:26:12,750 --> 00:26:15,550
And the current flagship
model is the Dreame L10 Pro

634
00:26:15,550 --> 00:26:18,790
which has LiDAR and
Line laser and a camera.

635
00:26:18,790 --> 00:26:22,037
All of these devices are based
on various Allwinner SoCs

636
00:26:23,400 --> 00:26:25,720
Dreame uses for their
device, a custom Android,

637
00:26:25,720 --> 00:26:27,440
which is mostly based on the Linux

638
00:26:27,440 --> 00:26:29,667
which has provided Allwinner.

639
00:26:29,667 --> 00:26:31,780
The company developed
their own robotics software

640
00:26:31,780 --> 00:26:33,083
which is Ava.

641
00:26:35,830 --> 00:26:38,340
So let's take a quick look on

642
00:26:38,340 --> 00:26:42,220
what kind of sensors you
can access on these devices.

643
00:26:42,220 --> 00:26:45,310
These pictures were recorded
on rooted vacuum cleaners.

644
00:26:45,310 --> 00:26:46,143
As you can see here,

645
00:26:46,143 --> 00:26:49,190
there's a camera which was
looking onto the ceiling.

646
00:26:49,190 --> 00:26:50,310
And if you root your devices,

647
00:26:50,310 --> 00:26:52,580
you're able to access these cameras.

648
00:26:52,580 --> 00:26:54,710
The Xiaomi 1T has an
additional camera in the front,

649
00:26:54,710 --> 00:26:56,440
which is a time of flood camera.

650
00:26:56,440 --> 00:26:58,640
With that you get a point note of objects

651
00:26:58,640 --> 00:27:01,129
which are in front of the vacuum cleaner.

652
00:27:01,129 --> 00:27:03,960
The Dreame L10 pro uses line lasers

653
00:27:03,960 --> 00:27:06,493
to detect objects in front of it.

654
00:27:07,480 --> 00:27:08,910
As you can see on the right,

655
00:27:08,910 --> 00:27:11,160
the device creates two laser beams

656
00:27:11,160 --> 00:27:13,640
and if there's any object
in front of the device,

657
00:27:13,640 --> 00:27:15,333
the laser beam gets distorted.

658
00:27:16,310 --> 00:27:17,880
The camera will pick up this distortion

659
00:27:17,880 --> 00:27:20,483
and will determine how
far away the object is.

660
00:27:22,100 --> 00:27:25,907
So let's talk about
how we can root Dreame.

661
00:27:29,060 --> 00:27:31,430
The routing of the device
is surprisingly easy.

662
00:27:31,430 --> 00:27:36,380
So I bought my first Dreame
robot when I was in China

663
00:27:36,380 --> 00:27:38,520
back in 2019.

664
00:27:38,520 --> 00:27:42,030
And it took me only a couple
of days to root the device.

665
00:27:42,030 --> 00:27:43,462
The good thing is with all the devices

666
00:27:43,462 --> 00:27:46,230
have the same debug connector,

667
00:27:46,230 --> 00:27:50,060
which can be accessed without
breaking any warranty seals.

668
00:27:50,060 --> 00:27:51,630
I did do a lot of reverse engineering

669
00:27:51,630 --> 00:27:54,660
and I was able to extract the
key material and firmware.

670
00:27:54,660 --> 00:27:56,390
Also I reverse engineered ways

671
00:27:56,390 --> 00:27:59,073
to create proper FEL with this.

672
00:27:59,073 --> 00:28:01,480
So with the help of the Banana Pi tools,

673
00:28:01,480 --> 00:28:03,970
which are also based on Allwinners SoCs,

674
00:28:03,970 --> 00:28:05,770
I was able to create those images

675
00:28:05,770 --> 00:28:07,713
which you can use to flag to devices.

676
00:28:08,760 --> 00:28:10,760
To flag the device you
need unfortunately to use

677
00:28:10,760 --> 00:28:13,610
a Windows only software,
which was Phoenix USB.

678
00:28:13,610 --> 00:28:15,500
There might be also ways
to flash it over Linux,

679
00:28:15,500 --> 00:28:18,070
but I didn't investigate that.

680
00:28:19,660 --> 00:28:22,540
So how does this debug
interface look like?

681
00:28:22,540 --> 00:28:25,040
The debug interface has 2x8 pins,

682
00:28:25,040 --> 00:28:27,340
and it has a pitch set of two millimeter.

683
00:28:27,340 --> 00:28:28,730
The two millimeters are way smaller

684
00:28:28,730 --> 00:28:31,020
than the typical jumper
wires which you get.

685
00:28:31,020 --> 00:28:33,486
If you plan to connect
it with (indistinct)

686
00:28:33,486 --> 00:28:35,460
then make sure to connect
to the right pins.

687
00:28:35,460 --> 00:28:36,293
The debug interface

688
00:28:36,293 --> 00:28:39,190
gives us a couple of
interesting interfaces.

689
00:28:39,190 --> 00:28:40,243
For example, we have USB,

690
00:28:40,243 --> 00:28:43,433
we have UART and we have
the boot selection pin.

691
00:28:44,510 --> 00:28:46,810
I saw that there's also
like another UART there

692
00:28:46,810 --> 00:28:48,150
and likely J tech,

693
00:28:48,150 --> 00:28:50,800
but I didn't investigate further.

694
00:28:50,800 --> 00:28:51,990
To easily root a device,

695
00:28:51,990 --> 00:28:53,100
we created custom PCBs

696
00:28:53,100 --> 00:28:57,083
which enable you to easily
access the USB and UART.

697
00:28:57,083 --> 00:29:00,330
There's a simple version
which just gives you a USB

698
00:29:00,330 --> 00:29:02,163
and gives you the UART headers,

699
00:29:02,163 --> 00:29:04,260
and there's an advanced version

700
00:29:04,260 --> 00:29:06,760
which has an onboard serial controller.

701
00:29:06,760 --> 00:29:09,010
I want to thank at this
point, Ben Helfrich

702
00:29:09,010 --> 00:29:10,990
who created these boards in (indistinct)

703
00:29:10,990 --> 00:29:13,160
and at the bottom of the slides,

704
00:29:13,160 --> 00:29:15,003
you find a link to the Gerber files.

705
00:29:16,500 --> 00:29:18,370
Here are some examples
how you can connect them.

706
00:29:18,370 --> 00:29:20,630
For example, for the PCB,

707
00:29:20,630 --> 00:29:23,414
you can insert it and you
just have to make sure

708
00:29:23,414 --> 00:29:24,540
that you have the right orientation,

709
00:29:24,540 --> 00:29:26,090
that you don't fry the board

710
00:29:26,090 --> 00:29:29,050
and you can just connect USB and UART.

711
00:29:29,050 --> 00:29:31,160
If you don't have this board,

712
00:29:31,160 --> 00:29:32,420
you can also use jumper wires,

713
00:29:32,420 --> 00:29:34,240
but you need to be a
little bit more careful

714
00:29:34,240 --> 00:29:38,290
and make sure that the
connection is properly done.

715
00:29:38,290 --> 00:29:39,440
On the bottom there's a diagram

716
00:29:39,440 --> 00:29:41,820
how you need to connect everything.

717
00:29:41,820 --> 00:29:43,400
Let's talk about some interesting findings

718
00:29:43,400 --> 00:29:48,400
which I saw when I reverse
engineered the Dreame firmwares.

719
00:29:49,520 --> 00:29:52,260
So all the devices have
an ultra SSH backdoor.

720
00:29:52,260 --> 00:29:54,550
This can be triggered from the cloud.

721
00:29:54,550 --> 00:29:57,510
What this will do is it will
create a reverse SSH shell

722
00:29:57,510 --> 00:29:58,860
to one of Dreame's servers.

723
00:29:59,950 --> 00:30:00,963
The interesting thing here is

724
00:30:00,963 --> 00:30:03,160
that they hard-coded the
credentials to the server,

725
00:30:03,160 --> 00:30:04,860
which is public facing.

726
00:30:04,860 --> 00:30:07,110
The bigger problem is that this user,

727
00:30:07,110 --> 00:30:08,980
which is used to create this reverse SSH

728
00:30:08,980 --> 00:30:11,730
has sudo rights on that server.

729
00:30:11,730 --> 00:30:14,740
And it appears that the server
is used for development.

730
00:30:14,740 --> 00:30:17,810
I don't really know why they did that,

731
00:30:17,810 --> 00:30:20,110
but this seems like a
really, really bad idea.

732
00:30:21,220 --> 00:30:25,070
Scary thing which I found were
the startup debug scripts.

733
00:30:25,070 --> 00:30:27,300
These scripts were downloaded over FTP

734
00:30:27,300 --> 00:30:29,073
from some personal developers NAS.

735
00:30:30,600 --> 00:30:33,970
These scripts are also executed
at boot up for some devices.

736
00:30:33,970 --> 00:30:36,180
The same debug scripts are
also uploading lock files

737
00:30:36,180 --> 00:30:37,540
onto that NAS

738
00:30:37,540 --> 00:30:41,893
and the admin credentials
are implanted in that script.

739
00:30:46,010 --> 00:30:50,820
All of the vacuum cleaners have
predictable root passwords.

740
00:30:50,820 --> 00:30:52,950
For example, devices with
a production firmware,

741
00:30:52,950 --> 00:30:56,420
you can compute the root
password from the serial number.

742
00:30:56,420 --> 00:30:57,483
For devices with debug firmwares,

743
00:30:57,483 --> 00:31:00,210
there's only one valid password.

744
00:31:00,210 --> 00:31:02,260
So knowing that,

745
00:31:02,260 --> 00:31:03,880
it might be a bad idea to
connect your vacuum cleaner

746
00:31:03,880 --> 00:31:05,523
directly to the internet.

747
00:31:06,520 --> 00:31:09,000
I found also a lot of chatty functions.

748
00:31:09,000 --> 00:31:12,290
The cloud IP allows the execution

749
00:31:12,290 --> 00:31:13,250
of some of the debug functions.

750
00:31:13,250 --> 00:31:15,060
For example,

751
00:31:15,060 --> 00:31:18,590
someone can trigger the
recording and uploads of pictures

752
00:31:18,590 --> 00:31:20,550
or the recording uploads of camera records

753
00:31:20,550 --> 00:31:22,430
for devices with cameras.

754
00:31:22,430 --> 00:31:25,320
And the device also
produces a lot of loc files.

755
00:31:25,320 --> 00:31:29,680
The only way to prevent these
uploads is basically rooting.

756
00:31:29,680 --> 00:31:30,780
I don't know if these functions

757
00:31:30,780 --> 00:31:33,160
are used on the regular
basis by the developers,

758
00:31:33,160 --> 00:31:37,723
but the fact that these
functions exist is kind of scary.

759
00:31:38,820 --> 00:31:40,127
As a summary about Dreame,

760
00:31:40,127 --> 00:31:42,210
the devices are cheaper than Roborock

761
00:31:42,210 --> 00:31:45,000
and they have also performance hardware.

762
00:31:45,000 --> 00:31:48,960
This makes the device as the
perfect target for rooting.

763
00:31:48,960 --> 00:31:50,030
As I'm working on the rooting

764
00:31:50,030 --> 00:31:51,823
for quite quite a time already,

765
00:31:52,940 --> 00:31:55,130
I was able to work with
the developer for Valetudo

766
00:31:55,130 --> 00:31:58,050
on the support on the device.

767
00:31:58,050 --> 00:32:01,680
So I'm happy to announce that
all Dreame devices so far

768
00:32:01,680 --> 00:32:05,373
are fully supported by the
Valetudo since April, 2021.

769
00:32:06,830 --> 00:32:09,250
All current models can be
rooted without any soldering

770
00:32:09,250 --> 00:32:11,630
and this also applies to all devices

771
00:32:11,630 --> 00:32:14,700
released before August, 2021.

772
00:32:14,700 --> 00:32:16,350
There will be some devices in the future,

773
00:32:16,350 --> 00:32:18,210
we don't know yet if
they are routable or not,

774
00:32:18,210 --> 00:32:20,673
but we will figure out very soon.

775
00:32:22,041 --> 00:32:22,874
The Dustbuilder is a website

776
00:32:22,874 --> 00:32:25,770
to build your own custom robot firmwares.

777
00:32:25,770 --> 00:32:27,800
You can create reproducible builds.

778
00:32:27,800 --> 00:32:28,770
It's easy to use,

779
00:32:28,770 --> 00:32:30,640
especially for Windows users.

780
00:32:30,640 --> 00:32:31,669
In the past,

781
00:32:31,669 --> 00:32:33,820
we had a lot of trouble
with Windows and Mac users

782
00:32:33,820 --> 00:32:36,193
where building firmwares
were kind of tricky.

783
00:32:37,120 --> 00:32:40,693
So this tool kind of makes it way easier.

784
00:32:41,830 --> 00:32:42,663
The Dustbuilder works for

785
00:32:42,663 --> 00:32:45,570
Dreame, Roborock and Viomi devices

786
00:32:45,570 --> 00:32:48,340
and it's a perfect
alternative to local building.

787
00:32:48,340 --> 00:32:49,860
Wherever if you don't trust it,

788
00:32:49,860 --> 00:32:51,943
the tools will be still
published on GitHub.

789
00:32:52,940 --> 00:32:55,553
You find Dustbuilder under
a builder.dontvacuume.

790
00:32:58,200 --> 00:32:59,969
At the end I want to thank a few people

791
00:32:59,969 --> 00:33:03,360
which supported me in
doing this presentation

792
00:33:03,360 --> 00:33:04,660
and doing the research.

793
00:33:04,660 --> 00:33:05,610
I want to thank Ben Helfrich,

794
00:33:05,610 --> 00:33:07,040
Carolin Gross,

795
00:33:07,040 --> 00:33:07,930
Cameron Kennedy,

796
00:33:07,930 --> 00:33:08,770
Daniel Wegemer,

797
00:33:08,770 --> 00:33:09,603
Erik Uhlmann,

798
00:33:09,603 --> 00:33:10,706
Guevara Noubir,

799
00:33:10,706 --> 00:33:12,420
and Soren Beye.

800
00:33:12,420 --> 00:33:13,670
If you have any questions,

801
00:33:13,670 --> 00:33:17,780
feel free to contact me via
email, telegram or Twitter.

802
00:33:17,780 --> 00:33:20,220
Visit my website for any
additional information

803
00:33:20,220 --> 00:33:22,370
or meet me here at
Defcon if you're around,

804
00:33:23,420 --> 00:33:25,010
if you happen to have a Dreame robot

805
00:33:25,010 --> 00:33:26,300
or plan to get a Dreame robot,

806
00:33:26,300 --> 00:33:27,990
I have a couple of spare PCBs with me

807
00:33:27,990 --> 00:33:30,100
which you can pick up for free.

808
00:33:30,100 --> 00:33:32,643
Thank you very much and have a nice Con.

