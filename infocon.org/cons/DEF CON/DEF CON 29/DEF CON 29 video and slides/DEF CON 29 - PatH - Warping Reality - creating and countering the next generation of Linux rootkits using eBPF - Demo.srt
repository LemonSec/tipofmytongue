1
00:00:01,810 --> 00:00:02,643
- [Instructor] Okay.

2
00:00:02,643 --> 00:00:04,320
The first demonstration
that we're gonna go through

3
00:00:04,320 --> 00:00:08,440
is the ability to replace
text within arbitrary files.

4
00:00:08,440 --> 00:00:10,700
So we can see in this
shell on the top right

5
00:00:10,700 --> 00:00:14,060
that there is a folder
with a file called file

6
00:00:14,060 --> 00:00:15,770
and when we look inside this file,

7
00:00:15,770 --> 00:00:17,827
we see the text "this is real data".

8
00:00:18,950 --> 00:00:21,240
So now we're gonna go
ahead and load up the first

9
00:00:21,240 --> 00:00:24,870
of our eBPF rootkits into
this shell on the left.

10
00:00:24,870 --> 00:00:28,078
So this rootkit is going to
look for any type of process

11
00:00:28,078 --> 00:00:29,690
(indistinct)

12
00:00:29,690 --> 00:00:31,880
and it's gonna replace any data

13
00:00:31,880 --> 00:00:34,523
that contains the text
real with the word fake.

14
00:00:35,360 --> 00:00:38,770
But specifically it's not
going to affect every process,

15
00:00:38,770 --> 00:00:40,950
it's only going to affect children

16
00:00:40,950 --> 00:00:43,020
of this specific person's ID,

17
00:00:43,020 --> 00:00:46,763
which we can see that matches
with our shell on the right.

18
00:00:47,600 --> 00:00:48,830
So, we're gonna go ahead.

19
00:00:48,830 --> 00:00:51,090
Our rootkit has now started,

20
00:00:51,090 --> 00:00:53,200
and now, back to our shell,

21
00:00:53,200 --> 00:00:55,250
when we go to read this file

22
00:00:55,250 --> 00:00:57,930
we can see that the data has been changed

23
00:00:57,930 --> 00:01:00,540
and it says "this is fake data".

24
00:01:00,540 --> 00:01:02,470
And in fact, the log from the rootkit

25
00:01:02,470 --> 00:01:06,560
actually says that it did detect
that this process started,

26
00:01:06,560 --> 00:01:07,660
which was cat,

27
00:01:07,660 --> 00:01:11,840
and it replaced the text
that that process read.

28
00:01:11,840 --> 00:01:12,760
But what is interesting,

29
00:01:12,760 --> 00:01:15,560
if we go to this shell
now on the bottom right,

30
00:01:15,560 --> 00:01:17,250
because this is a different shell

31
00:01:17,250 --> 00:01:19,070
with a different person ID,

32
00:01:19,070 --> 00:01:22,300
even though we're in the same folder,

33
00:01:22,300 --> 00:01:25,460
and when you look at the same file

34
00:01:25,460 --> 00:01:29,350
it sees the unaltered data.

35
00:01:29,350 --> 00:01:33,550
So this is a technique
that has many, many uses.

36
00:01:33,550 --> 00:01:35,810
The example that we've
used in the presentation

37
00:01:35,810 --> 00:01:39,480
is this is a way that you can add a user

38
00:01:39,480 --> 00:01:41,800
into the etc password file,

39
00:01:41,800 --> 00:01:44,860
but only do that for an SSH process

40
00:01:44,860 --> 00:01:48,233
and not for any auditing
software or system administrator

41
00:01:48,233 --> 00:01:50,153
having you look at that file.

42
00:01:52,070 --> 00:01:52,903
Okay.

43
00:01:58,180 --> 00:02:01,390
So, the next demonstration
we're gonna go through

44
00:02:01,390 --> 00:02:04,640
is the ability

45
00:02:04,640 --> 00:02:07,150
to stealthily enable a user

46
00:02:07,150 --> 00:02:09,710
to use sudo to recover it.

47
00:02:09,710 --> 00:02:11,840
So typically on this machine,

48
00:02:11,840 --> 00:02:14,550
if we have a look at this
shell in the bottom right,

49
00:02:14,550 --> 00:02:18,100
this is running as the user cold or proof

50
00:02:18,100 --> 00:02:22,773
and if lowpriv wanted to
become root using sudo,

51
00:02:23,830 --> 00:02:24,830
well we can see,

52
00:02:24,830 --> 00:02:28,900
oh, lowpriv is not allowed
in the sudoers file.

53
00:02:28,900 --> 00:02:30,003
And in fact,

54
00:02:30,850 --> 00:02:33,980
if we use the root shell on the top right,

55
00:02:33,980 --> 00:02:36,210
we can double and triply confirm

56
00:02:36,210 --> 00:02:38,280
that lowpriv is not in this list.

57
00:02:38,280 --> 00:02:41,860
So first off, we can use
the sudo/l command to say

58
00:02:41,860 --> 00:02:46,860
hey, what privileges does sudo
believe this user to have?

59
00:02:47,310 --> 00:02:48,240
And when we run it,

60
00:02:48,240 --> 00:02:51,020
we see user lowpriv is not allowed to run.

61
00:02:51,020 --> 00:02:53,960
And in fact, we can
even at most basic level

62
00:02:53,960 --> 00:02:58,960
just go and read the etc sudoers file

63
00:03:00,060 --> 00:03:01,700
and look for the use of lowpriv

64
00:03:02,830 --> 00:03:04,980
and sure enough, that
user is not in there.

65
00:03:04,980 --> 00:03:07,770
So this user, lowpriv,

66
00:03:07,770 --> 00:03:11,400
is definitely not able to
become root using sudo.

67
00:03:12,650 --> 00:03:17,650
That is until we run the
second of our eBPF rootkits

68
00:03:17,880 --> 00:03:18,983
on the left.

69
00:03:20,560 --> 00:03:23,790
So this one is going to look

70
00:03:23,790 --> 00:03:27,320
for any time anything that is
opening, specifically sudo,

71
00:03:27,320 --> 00:03:30,600
is going to try to open
the etc sudoers file

72
00:03:30,600 --> 00:03:34,130
and it's just going to alter
the text in that file to say,

73
00:03:34,130 --> 00:03:36,380
Hey, lowpriv is actually in there

74
00:03:36,380 --> 00:03:38,580
and they do actually
have those privileges,

75
00:03:38,580 --> 00:03:41,150
but it's only going to do this,

76
00:03:41,150 --> 00:03:43,750
not only when just sudo is running,

77
00:03:43,750 --> 00:03:46,130
but only when sudo is being run

78
00:03:46,130 --> 00:03:48,460
specifically from lowpriv.

79
00:03:48,460 --> 00:03:50,593
So now this rootkit has started,

80
00:03:51,800 --> 00:03:55,860
if lowpriv were to use sudo
again and say, who am I?

81
00:03:55,860 --> 00:03:56,850
Well, look at this!

82
00:03:56,850 --> 00:03:59,020
It can become route.

83
00:03:59,020 --> 00:04:01,880
In fact, it didn't even
need to enter its password.

84
00:04:01,880 --> 00:04:04,540
So how does that work?

85
00:04:04,540 --> 00:04:09,540
Well, so if as lowpriv, we
now ask sudo to tell us,

86
00:04:10,850 --> 00:04:13,563
hey, what privileges do you think I have?

87
00:04:14,490 --> 00:04:17,230
Well, we can see that when sudo

88
00:04:17,230 --> 00:04:20,410
is running as lowpriv it says,

89
00:04:20,410 --> 00:04:22,950
hey, lowpriv has the ability

90
00:04:22,950 --> 00:04:24,440
to do anything at once

91
00:04:24,440 --> 00:04:26,763
without even needing to add in a password.

92
00:04:27,910 --> 00:04:29,993
But even with this root kit running,

93
00:04:30,930 --> 00:04:34,140
if we were to check these
permissions as a different user,

94
00:04:34,140 --> 00:04:35,450
it's still says,

95
00:04:35,450 --> 00:04:37,400
Hey, lowpriv is no longer here.

96
00:04:37,400 --> 00:04:39,700
And if we check that file, it still says

97
00:04:40,702 --> 00:04:42,250
that lowpriv is not in there.

98
00:04:42,250 --> 00:04:44,180
So this file is only altered,

99
00:04:44,180 --> 00:04:47,610
not only when it's just
a sudo process running,

100
00:04:47,610 --> 00:04:49,800
but only when it is a sudo process

101
00:04:49,800 --> 00:04:52,947
being run by that lowpriv user.

102
00:04:58,880 --> 00:05:02,230
The last example that
we're gonna go through

103
00:05:02,230 --> 00:05:07,230
is the ability to kill arbitrary processes

104
00:05:07,590 --> 00:05:10,880
as a sort of self protection idea.

105
00:05:10,880 --> 00:05:11,713
So,

106
00:05:12,970 --> 00:05:17,480
typically an administrator
can use a cool tool

107
00:05:17,480 --> 00:05:19,360
called BPF tool,

108
00:05:19,360 --> 00:05:23,120
and this lists the running eBPF programs

109
00:05:23,120 --> 00:05:25,270
that are running on that system.

110
00:05:25,270 --> 00:05:27,930
And it's got the ability to
see what programs are running,

111
00:05:27,930 --> 00:05:29,080
so for example,

112
00:05:29,080 --> 00:05:31,650
we can see a lot of eBPF programs

113
00:05:31,650 --> 00:05:33,160
that actually relate to system D,

114
00:05:33,160 --> 00:05:35,810
they're currently running on this system,

115
00:05:35,810 --> 00:05:40,110
and BPF tool has the ability
to list the running processes,

116
00:05:40,110 --> 00:05:42,530
to dump out the instructions

117
00:05:42,530 --> 00:05:45,160
and even seeing what process IDs

118
00:05:45,160 --> 00:05:49,100
are actually related to that EBP program.

119
00:05:49,100 --> 00:05:52,480
So, this is a good way for
an administrator to see

120
00:05:52,480 --> 00:05:54,840
what eBPF programs are running

121
00:05:54,840 --> 00:05:59,200
to potentially discover
something like an eBPF rootkit.

122
00:05:59,200 --> 00:06:00,910
So what this,

123
00:06:00,910 --> 00:06:03,250
so we're gonna load up a rootkit

124
00:06:03,250 --> 00:06:05,270
that is running on the left

125
00:06:05,270 --> 00:06:09,110
and now, if we attempt to use BPF tool

126
00:06:09,110 --> 00:06:10,680
to list the processes,

127
00:06:10,680 --> 00:06:12,900
oh, the process just gets killed

128
00:06:12,900 --> 00:06:14,780
before that information happens.

129
00:06:14,780 --> 00:06:16,453
So this is pretty extreme,

130
00:06:17,880 --> 00:06:22,240
but this demonstrates
that eBPF has the ability

131
00:06:22,240 --> 00:06:26,010
to sort of protect itself
by just killing any process

132
00:06:26,010 --> 00:06:29,793
that it's attempting to do
any sort of investigation.

