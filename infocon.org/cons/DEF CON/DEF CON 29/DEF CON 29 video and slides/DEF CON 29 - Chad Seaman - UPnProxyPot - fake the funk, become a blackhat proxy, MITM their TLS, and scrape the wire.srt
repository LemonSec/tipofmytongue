1
00:00:03,390 --> 00:00:04,250
- Welcome to my talk.

2
00:00:04,250 --> 00:00:05,930
This is UPnProxyPot,

3
00:00:05,930 --> 00:00:07,800
fake the funk, become a blackout proxy,

4
00:00:07,800 --> 00:00:10,243
man in the middle their
TLS and scrape the wire.

5
00:00:11,450 --> 00:00:13,290
Before we begin. I'm Chad seaman,

6
00:00:13,290 --> 00:00:15,890
but around here at DefCon
you can just call me d1rt.

7
00:00:16,950 --> 00:00:18,840
I am part of the Akamai SIRT team.

8
00:00:18,840 --> 00:00:21,950
I'm actually a team lead and
senior engineer on that team.

9
00:00:21,950 --> 00:00:23,790
For those of you unfamiliar
with the SIRT team,

10
00:00:23,790 --> 00:00:25,290
which is probably all of you

11
00:00:25,290 --> 00:00:28,110
You may have heard of some
of our research before.

12
00:00:28,110 --> 00:00:31,750
We focus on DDoS and
emerging threats research,

13
00:00:31,750 --> 00:00:33,774
but that typically leads
us down the path of malware

14
00:00:33,774 --> 00:00:36,883
and botnets and proxies
and other good stuff.

15
00:00:38,610 --> 00:00:41,620
So before we begin, you're
going to see me talk about IOT.

16
00:00:41,620 --> 00:00:42,540
A lot of you are going to think

17
00:00:42,540 --> 00:00:44,223
IOT means internet of things.

18
00:00:45,630 --> 00:00:46,990
That's not true for me.

19
00:00:46,990 --> 00:00:48,100
It's the internet of trash.

20
00:00:48,100 --> 00:00:51,403
Whenever you see me say
IOT, that's what I mean.

21
00:00:53,130 --> 00:00:55,720
So what's this talk about?

22
00:00:55,720 --> 00:00:58,970
Well SSDP and UPnP had been
widely vulnerable in IOT devices

23
00:00:58,970 --> 00:01:00,520
for nearly 20 years.

24
00:01:00,520 --> 00:01:02,100
It's not only possible,

25
00:01:02,100 --> 00:01:05,360
but also very easy to turn these
devices into proxy servers.

26
00:01:05,360 --> 00:01:07,470
When attackers find vulnerable IOT devices

27
00:01:07,470 --> 00:01:08,820
susceptible to this kind of attack,

28
00:01:08,820 --> 00:01:11,830
they turn these devices into
short-lived proxy server

29
00:01:11,830 --> 00:01:13,990
and delete their tracks when they're done.

30
00:01:13,990 --> 00:01:15,280
If they don't delete their tracks,

31
00:01:15,280 --> 00:01:16,980
the tracks will delete themselves.

32
00:01:18,250 --> 00:01:20,064
We're going to cover SSDP and UPnP,

33
00:01:20,064 --> 00:01:25,064
previous UPnProxy research
and campaigns conducted by me

34
00:01:25,270 --> 00:01:27,560
and finally UPnProxyPot, how it works

35
00:01:27,560 --> 00:01:28,560
and findings from a year

36
00:01:28,560 --> 00:01:30,660
of geographically distributed deployments.

37
00:01:31,770 --> 00:01:36,170
So, first things first SSDP and UPnP.

38
00:01:36,170 --> 00:01:40,210
SSDP stands for Simple
Service Discovery Protocol.

39
00:01:40,210 --> 00:01:42,290
It's a technology that's
built for the LAN.

40
00:01:42,290 --> 00:01:45,800
Uses broadcast addressing
with HTTP over UDP.

41
00:01:45,800 --> 00:01:47,540
It essentially allows machines on a LAN

42
00:01:47,540 --> 00:01:50,780
to announce themselves
and or hear announcements

43
00:01:50,780 --> 00:01:54,400
from their neighbors or network peers,

44
00:01:54,400 --> 00:01:58,930
and then expose them to UPnP,

45
00:01:58,930 --> 00:02:00,790
which will in turn expose services

46
00:02:00,790 --> 00:02:02,850
such as printing and media sharing

47
00:02:02,850 --> 00:02:04,780
and network configuration.

48
00:02:04,780 --> 00:02:06,300
All that kind of stuff.

49
00:02:06,300 --> 00:02:09,000
UPnP is Universal Plug And Play.

50
00:02:09,000 --> 00:02:10,370
It's also built for the LAN.

51
00:02:10,370 --> 00:02:13,930
It's good old HTTP and SOAP.

52
00:02:13,930 --> 00:02:15,381
SOAP as an XML.

53
00:02:15,381 --> 00:02:17,610
It lets machines on a LAN

54
00:02:17,610 --> 00:02:19,940
inquire about the services
configuration options

55
00:02:19,940 --> 00:02:21,790
offered by that device.

56
00:02:21,790 --> 00:02:25,170
It also allows them to
access those services

57
00:02:25,170 --> 00:02:28,380
and or potentially modify
those configurations.

58
00:02:28,380 --> 00:02:32,400
So a good example of
this is an Xbox, right?

59
00:02:32,400 --> 00:02:36,540
An Xbox or a PC game may need
you to forward certain ports

60
00:02:36,540 --> 00:02:38,496
or certain traffic around the firewall

61
00:02:38,496 --> 00:02:43,420
rather than deal with the state
of managing that in the net.

62
00:02:43,420 --> 00:02:45,390
So that's what UPnP basically enables.

63
00:02:45,390 --> 00:02:47,077
It allows your X-Box
to go forward and say,

64
00:02:47,077 --> 00:02:48,410
"Hey, poke a hole in the firewall,

65
00:02:48,410 --> 00:02:52,397
send everything on UDP
1, 2, 3, 4, over to me."

66
00:02:54,970 --> 00:02:58,703
So what is wrong with these technologies?

67
00:02:58,703 --> 00:03:02,370
Well, for SSDP, IOT
devices are notoriously bad

68
00:03:02,370 --> 00:03:03,800
at deploying this correctly.

69
00:03:03,800 --> 00:03:06,040
The same is true for UPnP.

70
00:03:06,040 --> 00:03:08,010
It's built for the LAN,

71
00:03:08,010 --> 00:03:09,300
but they stick it on the WAN

72
00:03:09,300 --> 00:03:12,119
just because, I don't know, just cause.

73
00:03:12,119 --> 00:03:17,119
It was a reflected DDoS vector.

74
00:03:17,370 --> 00:03:21,470
Up and coming, most popular,
MVP, king of the hill,

75
00:03:21,470 --> 00:03:24,053
whatever you want to
call it, in 2014 to 2015.

76
00:03:25,290 --> 00:03:28,820
It's still fairly popular for
that, but it's not as popular,

77
00:03:28,820 --> 00:03:31,720
mostly due to other vectors
becoming more popular,

78
00:03:31,720 --> 00:03:35,053
not because it's gotten
that much less abused.

79
00:03:36,330 --> 00:03:38,235
We're still finding this
bullshit everywhere.

80
00:03:38,235 --> 00:03:41,403
Older products are still on the internet,

81
00:03:42,800 --> 00:03:46,930
amazingly "newer" products
and new is there in quotes,

82
00:03:46,930 --> 00:03:49,710
but some "newer" products,

83
00:03:49,710 --> 00:03:52,510
and by "newer" I mean
within the past few years,

84
00:03:52,510 --> 00:03:54,750
still have these problems.

85
00:03:54,750 --> 00:03:56,730
So 20 years later.

86
00:03:56,730 --> 00:03:59,760
At a minimum 14 years,

87
00:03:59,760 --> 00:04:03,630
and here we are still having
the same old problems.

88
00:04:03,630 --> 00:04:06,450
So UPnP, Universal Plug And Play,

89
00:04:06,450 --> 00:04:08,170
once again, built for the LAN,

90
00:04:08,170 --> 00:04:09,840
but they seem to just love to stick

91
00:04:09,840 --> 00:04:11,620
this stuff on the WAN too.

92
00:04:11,620 --> 00:04:14,590
It treats the LAN as a
safe space, which is fine,

93
00:04:14,590 --> 00:04:17,010
but the WAN is not a safe space.

94
00:04:17,010 --> 00:04:18,090
So, when you're listening on the WAN

95
00:04:18,090 --> 00:04:20,700
and thinking it's a LAN, it's
a little bit of a problem.

96
00:04:20,700 --> 00:04:21,720
It just does whatever

97
00:04:21,720 --> 00:04:23,710
it's trusted network peers tell it to do.

98
00:04:23,710 --> 00:04:24,910
Does not require off.

99
00:04:24,910 --> 00:04:27,160
There's not really a
whole lot protecting it.

100
00:04:28,020 --> 00:04:29,240
Information disclosure.

101
00:04:29,240 --> 00:04:30,720
It will tell you everything.

102
00:04:30,720 --> 00:04:33,423
Model numbers, makes, serial numbers.

103
00:04:34,700 --> 00:04:36,870
On top of that, it will
tell you how to talk to it,

104
00:04:36,870 --> 00:04:39,670
what services it exposes,
what configurations,

105
00:04:39,670 --> 00:04:42,340
what data you can push in

106
00:04:42,340 --> 00:04:44,533
and what data you can expect to get out.

107
00:04:45,990 --> 00:04:48,770
It facilitates configuration
changes on some devices.

108
00:04:48,770 --> 00:04:51,275
It makes it very easy to do those changes.

109
00:04:51,275 --> 00:04:53,570
In some cases,

110
00:04:53,570 --> 00:04:55,960
there are known RCE injections

111
00:04:55,960 --> 00:04:58,460
in the UPnP daemons in the SOAP handling.

112
00:04:58,460 --> 00:05:02,270
So your, basically, SOAP

113
00:05:02,270 --> 00:05:06,593
can get remote command execution
on the underlying device.

114
00:05:08,220 --> 00:05:10,050
So let's take a quick
look at the history here

115
00:05:10,050 --> 00:05:11,830
and why I talk about 20 years.

116
00:05:11,830 --> 00:05:14,740
The first instance that I could find

117
00:05:14,740 --> 00:05:17,130
of somebody exposing something here

118
00:05:17,130 --> 00:05:20,033
is 2003, Björn Stickler.

119
00:05:20,920 --> 00:05:25,760
He came public with a Netgear
UPnP information disclosure.

120
00:05:25,760 --> 00:05:27,324
A couple of years later,

121
00:05:27,324 --> 00:05:30,050
I'm going to slaughter this guy's name,

122
00:05:30,050 --> 00:05:33,710
Armijn Hemel, I think, in 2006,

123
00:05:33,710 --> 00:05:35,600
gave a talk at the same conference

124
00:05:36,720 --> 00:05:40,340
and he launched a website
called UPnPhacks.org.

125
00:05:40,340 --> 00:05:41,700
There's a ton of great info here.

126
00:05:41,700 --> 00:05:43,460
His talk really kind of blew the lid off

127
00:05:43,460 --> 00:05:46,340
of all the problems that UPnP actually had

128
00:05:46,340 --> 00:05:51,340
and all of the potential vectors
it could expose people to.

129
00:05:52,738 --> 00:05:53,950
And then in 2011,

130
00:05:53,950 --> 00:05:57,210
Daniel Garcia gave a talk at Defcon 19

131
00:05:57,210 --> 00:05:58,360
called UPnP Mapping.

132
00:05:58,360 --> 00:06:00,140
It was a great talk.

133
00:06:00,140 --> 00:06:02,340
It kind of touched on
this proxy and capability

134
00:06:02,340 --> 00:06:04,490
and some of the problems with UPnP.

135
00:06:04,490 --> 00:06:06,020
I was in the crowd.

136
00:06:06,020 --> 00:06:09,540
It freaked me out enough that
I think my TP-Link router

137
00:06:09,540 --> 00:06:11,730
at the time was actually impacted by this.

138
00:06:11,730 --> 00:06:16,077
And I went ahead and
remoted into my home network

139
00:06:17,990 --> 00:06:21,360
and disabled UPnP from the talk,

140
00:06:21,360 --> 00:06:23,260
while I was in the talk from my phone.

141
00:06:24,660 --> 00:06:27,913
So, a brief history of UPnProxy.

142
00:06:28,790 --> 00:06:31,770
So UPnProxy, in 2014, like I said

143
00:06:31,770 --> 00:06:35,290
SSDP is the new up and
coming DDoS specter.

144
00:06:35,290 --> 00:06:38,030
We're starting to see
it abused pretty widely.

145
00:06:38,030 --> 00:06:41,313
We, Akamai SIRT, at that time
we were known as PLX SIRT,

146
00:06:42,278 --> 00:06:44,690
are asked to write about it,

147
00:06:44,690 --> 00:06:45,670
start digging into it.

148
00:06:45,670 --> 00:06:48,660
Put it on an advisory
and all that good stuff.

149
00:06:48,660 --> 00:06:53,660
So in 2015, this was
happening at the end of 2014.

150
00:06:53,673 --> 00:06:56,040
In early 2015,

151
00:06:56,040 --> 00:06:59,057
the SSDP research leads
me to discover UPnP

152
00:07:00,720 --> 00:07:05,210
and it kind of turns on
that 2011 talk in my head.

153
00:07:05,210 --> 00:07:06,578
And I'm like,

154
00:07:06,578 --> 00:07:08,520
"Oh man, I remember this
being like a shitshow."

155
00:07:08,520 --> 00:07:13,520
So in 2016, I decide that since it's been

156
00:07:13,650 --> 00:07:17,677
about a decade after
the sane conference talk

157
00:07:17,677 --> 00:07:19,850
and the UPnP hacks,

158
00:07:19,850 --> 00:07:21,710
it might be fun to revisit this

159
00:07:21,710 --> 00:07:26,117
and see how bad this landscape is.

160
00:07:26,117 --> 00:07:28,110
Are we talking hundreds of thousands?

161
00:07:28,110 --> 00:07:29,540
Are we talking millions?

162
00:07:29,540 --> 00:07:31,320
And just talk about,

163
00:07:31,320 --> 00:07:33,920
and kind of try and bring the fact

164
00:07:33,920 --> 00:07:35,660
that this is 10 years later.

165
00:07:35,660 --> 00:07:37,050
These things are still a problem.

166
00:07:37,050 --> 00:07:39,750
And these threats still
exist in the real world.

167
00:07:39,750 --> 00:07:40,710
And everybody just kind of

168
00:07:40,710 --> 00:07:42,540
seemed to have forgotten about it.

169
00:07:42,540 --> 00:07:45,070
So I start writing that paper.

170
00:07:45,070 --> 00:07:46,390
The reason it's relevant

171
00:07:46,390 --> 00:07:48,780
is because I had to write a tool chain

172
00:07:48,780 --> 00:07:51,093
to test some of these
theories and concepts.

173
00:07:52,270 --> 00:07:56,000
This is a tool chain
here that was for testing

174
00:07:56,000 --> 00:07:59,650
the NAT injection capabilities
on exposed UPnP devices.

175
00:07:59,650 --> 00:08:01,760
So in the top there,

176
00:08:01,760 --> 00:08:04,930
you see the SSDP banner that we get back.

177
00:08:04,930 --> 00:08:07,253
We take the 192.168.0.1.

178
00:08:08,720 --> 00:08:11,900
We changed that to the
public facing IP address

179
00:08:11,900 --> 00:08:14,760
that we found UPnP responding on.

180
00:08:14,760 --> 00:08:19,230
In our SOAP payload we
set that port 5.5.5.5

181
00:08:19,230 --> 00:08:22,990
is going to point into 192.168.0.1

182
00:08:22,990 --> 00:08:26,400
which we know is the router
at this point on port 80.

183
00:08:26,400 --> 00:08:29,660
We then issue that SOAP request via curl.

184
00:08:29,660 --> 00:08:31,710
And what we see here
is before the injection

185
00:08:31,710 --> 00:08:34,230
and after the injection
in the scan results there.

186
00:08:34,230 --> 00:08:37,640
TCP 80's filtered, you couldn't get to it.

187
00:08:37,640 --> 00:08:41,900
But once I opened TCP 5.5.5.5

188
00:08:41,900 --> 00:08:43,600
and then I hit it in a browser,

189
00:08:43,600 --> 00:08:46,090
I am greeted with the admin login page.

190
00:08:46,090 --> 00:08:48,240
So that's a little bit of a problem

191
00:08:48,240 --> 00:08:50,473
being able to get around
the firewall that easy.

192
00:08:52,379 --> 00:08:53,376
(large sigh)

193
00:08:53,376 --> 00:08:56,253
As I'm doing this research
in September, 2016,

194
00:08:57,530 --> 00:08:59,900
we get hit with a 620 gigabit per second,

195
00:08:59,900 --> 00:09:03,290
sustained DDoS attack from a botnet.

196
00:09:03,290 --> 00:09:05,214
At that point, the botnet was unknown.

197
00:09:05,214 --> 00:09:08,093
It ultimately got named Mirai.

198
00:09:09,150 --> 00:09:12,530
So as I'm digging into that,

199
00:09:12,530 --> 00:09:14,970
I'm inspecting attack sources.

200
00:09:14,970 --> 00:09:16,150
I'm seeing lots of IOT.

201
00:09:16,150 --> 00:09:17,935
There's a decent overlap

202
00:09:17,935 --> 00:09:19,890
with the existing identified UPnP data set

203
00:09:19,890 --> 00:09:23,673
that I had from my decade
of disclosure research.

204
00:09:24,660 --> 00:09:28,710
I decided that the UPnP
info leaks could maybe help.

205
00:09:28,710 --> 00:09:30,790
And I start scraping those

206
00:09:30,790 --> 00:09:32,790
and poking these devices in general.

207
00:09:32,790 --> 00:09:35,100
Trying to figure out
what the heck they are.

208
00:09:35,100 --> 00:09:37,350
So it turns out correlation
is not causation.

209
00:09:38,490 --> 00:09:40,740
The fact that these devices

210
00:09:40,740 --> 00:09:42,860
were present in the Mirai botnet

211
00:09:42,860 --> 00:09:44,740
has nothing to do with Mirai.

212
00:09:44,740 --> 00:09:46,880
It's just that shitty devices are shitty.

213
00:09:46,880 --> 00:09:49,430
And if it's comprizable one way,

214
00:09:49,430 --> 00:09:52,290
it's probably comprizable
about two or three.

215
00:09:52,290 --> 00:09:55,573
In the internet of trash space that is.

216
00:09:56,650 --> 00:09:59,770
So having already written the script

217
00:09:59,770 --> 00:10:04,490
to dump the NAT tables as part
of the NAT injection testing,

218
00:10:04,490 --> 00:10:06,610
I started doing that
just to see, you know,

219
00:10:06,610 --> 00:10:09,044
maybe there's something
weird going on in there

220
00:10:09,044 --> 00:10:10,150
that we can figure out.

221
00:10:10,150 --> 00:10:13,170
It, like I said, it
was not related at all.

222
00:10:13,170 --> 00:10:14,850
But what I did notice when I did that

223
00:10:14,850 --> 00:10:16,510
was there were some really weird entries

224
00:10:16,510 --> 00:10:18,563
in some of these devices out in the wild.

225
00:10:19,900 --> 00:10:22,890
The entries pointed to DNS servers,

226
00:10:22,890 --> 00:10:24,800
they pointed to Akamai CDN servers.

227
00:10:24,800 --> 00:10:27,883
They've been pointing at
HTTP and HTTPS web servers.

228
00:10:28,930 --> 00:10:30,520
Which is really interesting,

229
00:10:30,520 --> 00:10:32,650
but I have other shit to do.

230
00:10:32,650 --> 00:10:33,640
Got a really big botnet.

231
00:10:33,640 --> 00:10:35,020
I got to figure out what
the hell is going on.

232
00:10:35,020 --> 00:10:36,700
So I kind of just stick that

233
00:10:36,700 --> 00:10:38,600
in the mental back-burner and move on.

234
00:10:40,650 --> 00:10:41,830
So on the timeline here,

235
00:10:41,830 --> 00:10:44,490
we're down here at the
Mirai botnet and huge DDoS.

236
00:10:44,490 --> 00:10:45,940
So while I'm investigating that,

237
00:10:45,940 --> 00:10:49,750
I accidentally uncover the UPnProxy stuff,

238
00:10:49,750 --> 00:10:51,850
but I'm too busy dealing with this botnet.

239
00:10:52,850 --> 00:10:55,470
2017, things start to calm down.

240
00:10:55,470 --> 00:10:57,500
Mirai, at least I have tooling

241
00:10:57,500 --> 00:11:00,150
to be able to better
track it and handle it.

242
00:11:00,150 --> 00:11:02,500
So, I start looking back at
some of my other research

243
00:11:02,500 --> 00:11:04,030
and I decide I'm going to look

244
00:11:04,030 --> 00:11:06,350
at what some of those really
weird NAT entries were

245
00:11:06,350 --> 00:11:08,020
on some of those devices.

246
00:11:08,020 --> 00:11:10,548
And I began scanning the entire internet

247
00:11:10,548 --> 00:11:12,900
and dumping all of the NAT tables

248
00:11:12,900 --> 00:11:15,810
of all of these exposed UPnP daemons.

249
00:11:15,810 --> 00:11:18,603
This is when we uncover
the UPnProxy campaigns.

250
00:11:20,570 --> 00:11:24,430
So UPnProxy uncovered by the numbers.

251
00:11:24,430 --> 00:11:29,190
There were 4.8 million SSDP
responders in that data set.

252
00:11:29,190 --> 00:11:34,190
765,000 had exposed
UPnP, it's roughly 16%.

253
00:11:34,987 --> 00:11:39,840
Of those, 65,000 were actively
injected with UPnP entries.

254
00:11:39,840 --> 00:11:41,980
That's 9% of the total
vulnerable population

255
00:11:41,980 --> 00:11:44,193
and 1.3% of the total responders.

256
00:11:45,660 --> 00:11:49,420
Of those 17,599 unique end points

257
00:11:49,420 --> 00:11:52,644
were identified as being
injected in these devices.

258
00:11:52,644 --> 00:11:56,420
Typically, if a device had one
injection, it had multiples.

259
00:11:56,420 --> 00:11:58,290
The most injected destination

260
00:11:58,290 --> 00:12:03,290
had 18.8 million instances
across 23,236 devices.

261
00:12:04,080 --> 00:12:06,010
The second most injected destination

262
00:12:06,010 --> 00:12:10,680
had 11 million instances
across 59,943 devices.

263
00:12:10,680 --> 00:12:12,087
I point this out because it shows

264
00:12:12,087 --> 00:12:15,484
two kind of campaigns
running simultaneously here.

265
00:12:15,484 --> 00:12:18,040
The most injected destination obviously

266
00:12:18,040 --> 00:12:21,150
had a lot more instances of injections

267
00:12:21,150 --> 00:12:23,420
across a much smaller pool of devices.

268
00:12:23,420 --> 00:12:26,890
And then the second most
injected destination

269
00:12:26,890 --> 00:12:29,820
had a lot less injections,

270
00:12:29,820 --> 00:12:32,460
but a much larger swath of devices

271
00:12:32,460 --> 00:12:34,290
that they were injected on.

272
00:12:34,290 --> 00:12:35,825
All in all there were

273
00:12:35,825 --> 00:12:37,840
15.9 million injections to DNS servers,

274
00:12:37,840 --> 00:12:40,400
9.5 million injections to web servers

275
00:12:40,400 --> 00:12:44,463
and 155,000 injections to HTTPS servers.

276
00:12:46,470 --> 00:12:47,830
While I'm doing this research,

277
00:12:47,830 --> 00:12:50,840
I'm talking to some fellow
researchers and friends,

278
00:12:50,840 --> 00:12:52,527
and one of the guys goes,

279
00:12:52,527 --> 00:12:55,580
"Hey, I think my friend's working
on something very similar.

280
00:12:55,580 --> 00:12:57,520
Would you be interested
in talking to them?"

281
00:12:57,520 --> 00:12:59,000
Absolutely I was.

282
00:12:59,000 --> 00:13:01,210
I'm very sorry to the
researcher I talked to.

283
00:13:01,210 --> 00:13:03,690
I don't remember your name
and I can't find the email

284
00:13:03,690 --> 00:13:07,440
and Symantec did not give you
a shout out on their blog.

285
00:13:07,440 --> 00:13:09,740
So thank you for your
hard work and I'm sorry.

286
00:13:11,270 --> 00:13:14,660
What they ultimately found was
that there was an APT group

287
00:13:14,660 --> 00:13:17,570
and they were running
this inception framework.

288
00:13:17,570 --> 00:13:20,160
Where the attackers were basically

289
00:13:20,160 --> 00:13:23,310
using these UPnProxy instances

290
00:13:23,310 --> 00:13:24,490
and they were chaining them together.

291
00:13:24,490 --> 00:13:28,028
So they would log into their VPS.

292
00:13:28,028 --> 00:13:30,870
They would inject a proxy route

293
00:13:30,870 --> 00:13:34,520
that pointed to another
UPnProxy vulnerable device.

294
00:13:34,520 --> 00:13:37,220
They would then use that
injection to inject another route.

295
00:13:37,220 --> 00:13:39,864
Then use that injection
to inject another route

296
00:13:39,864 --> 00:13:42,290
that ultimately pointed out
to their target destination,

297
00:13:42,290 --> 00:13:44,830
which was a cloud storage provider

298
00:13:44,830 --> 00:13:46,490
for uploading their malware.

299
00:13:46,490 --> 00:13:47,780
And then they would use that

300
00:13:47,780 --> 00:13:51,050
to upload their malware
to the cloud platform.

301
00:13:51,050 --> 00:13:56,050
And this is partly to get
around detection, right?

302
00:13:56,948 --> 00:14:00,660
A lot of times you'll have
these lists of known proxies,

303
00:14:00,660 --> 00:14:02,670
known end points, TOR, et cetera.

304
00:14:02,670 --> 00:14:06,110
And when you've got a pool of, you know,

305
00:14:06,110 --> 00:14:08,430
tens of thousands of home devices

306
00:14:08,430 --> 00:14:09,870
that aren't on any of those lists,

307
00:14:09,870 --> 00:14:12,210
you're much less likely to
set off some alarm bells

308
00:14:12,210 --> 00:14:14,830
when you log in and upload a nasty file.

309
00:14:14,830 --> 00:14:18,525
So, really interesting research.

310
00:14:18,525 --> 00:14:20,250
I gave him my tools.

311
00:14:20,250 --> 00:14:22,650
He was able to confirm it
was what we thought it was.

312
00:14:22,650 --> 00:14:24,470
And then I was able to confirm in my data

313
00:14:24,470 --> 00:14:27,290
that I could see some of
the similar clustering.

314
00:14:27,290 --> 00:14:30,969
So what you're seeing here
in the graph on the right

315
00:14:30,969 --> 00:14:33,143
is two different bubble graphs.

316
00:14:33,143 --> 00:14:36,400
The size of the circle is
respective to the number

317
00:14:36,400 --> 00:14:39,714
of outbound routes found on that device.

318
00:14:39,714 --> 00:14:43,030
And then every blue line is pointing

319
00:14:43,030 --> 00:14:45,130
in the direction of a relationship.

320
00:14:45,130 --> 00:14:46,020
There's an arrow.

321
00:14:46,020 --> 00:14:48,860
So where you see the
thick blue on one side,

322
00:14:48,860 --> 00:14:51,420
that is the tips of the arrows
running into one another.

323
00:14:51,420 --> 00:14:53,220
And there's clearly two
different strategies.

324
00:14:53,220 --> 00:14:54,750
The top cluster,

325
00:14:54,750 --> 00:14:59,187
you have a larger pool with a
handful of routes that go out

326
00:14:59,187 --> 00:15:02,760
and they all point into
a smaller pool of devices

327
00:15:02,760 --> 00:15:05,006
that may only route to one
or two or three things.

328
00:15:05,006 --> 00:15:06,724
And in the bottom cluster,

329
00:15:06,724 --> 00:15:11,724
you see a centralized
high route out collection,

330
00:15:13,270 --> 00:15:18,270
and then they all point out
to different end points.

331
00:15:18,650 --> 00:15:20,770
So it's a different structure,

332
00:15:20,770 --> 00:15:23,385
different strategy of
building that chaining.

333
00:15:23,385 --> 00:15:25,060
But the chaining exists.

334
00:15:25,060 --> 00:15:26,773
And I thought that was pretty cool.

335
00:15:27,810 --> 00:15:29,861
So we find all this stuff,

336
00:15:29,861 --> 00:15:32,890
but it's not super widespread.

337
00:15:32,890 --> 00:15:34,640
I'm just kidding.
It's everywhere.

338
00:15:34,640 --> 00:15:37,150
So there are 73 brands and over 400 models

339
00:15:37,150 --> 00:15:38,440
that we could identify.

340
00:15:38,440 --> 00:15:40,820
And it's important there
that I say we could identify

341
00:15:40,820 --> 00:15:41,860
because we were only able

342
00:15:41,860 --> 00:15:45,950
to successfully
fingerprint with confidence

343
00:15:45,950 --> 00:15:48,290
about 24% of these based
on information leaks.

344
00:15:48,290 --> 00:15:49,360
And those information leaks

345
00:15:49,360 --> 00:15:53,020
weren't just what came
from the UPnP daemon.

346
00:15:53,020 --> 00:15:56,843
Sure, it helped a ton because
it's a super chatty...

347
00:15:56,843 --> 00:16:00,090
It exposes quite a bit of
information about the device,

348
00:16:00,090 --> 00:16:01,220
like I said,

349
00:16:01,220 --> 00:16:04,240
but we would also go so far as to attempt

350
00:16:04,240 --> 00:16:06,120
to see what other ports were there,

351
00:16:06,120 --> 00:16:08,680
SSH banners, anything like that

352
00:16:08,680 --> 00:16:12,460
that we could potentially
fingerprint on, we tried.

353
00:16:12,460 --> 00:16:16,010
And still, we could only get about 24%.

354
00:16:16,010 --> 00:16:21,010
So that is quite a considerable amount.

355
00:16:21,540 --> 00:16:23,780
73 brands, 400 models is a nice chunk,

356
00:16:23,780 --> 00:16:25,363
but you gotta remember

357
00:16:25,363 --> 00:16:27,070
that there's 76% that we
couldn't even identify.

358
00:16:27,070 --> 00:16:28,943
So, who knows what they are.

359
00:16:31,888 --> 00:16:36,090
This publication goes live and, you know,

360
00:16:36,090 --> 00:16:37,430
the crowd goes mild.

361
00:16:37,430 --> 00:16:38,790
Nobody really cared.

362
00:16:38,790 --> 00:16:40,160
It didn't really get a lot of attention.

363
00:16:40,160 --> 00:16:41,510
I was pretty disappointed.

364
00:16:41,510 --> 00:16:43,833
I thought it was a very cool finding, but.

365
00:16:44,970 --> 00:16:46,580
And I'm downplaying that a little bit.

366
00:16:46,580 --> 00:16:48,287
So, a couple people cared.

367
00:16:48,287 --> 00:16:50,560
The people that needed to care cared.

368
00:16:50,560 --> 00:16:52,590
So I'll take that as a win.

369
00:16:52,590 --> 00:16:54,790
The research did get
some industry attention

370
00:16:55,810 --> 00:16:59,350
through some trust groups
and work groups and stuff.

371
00:16:59,350 --> 00:17:01,700
Did get elevated and passed along.

372
00:17:01,700 --> 00:17:04,285
And it was ultimately
used to help some ISPs

373
00:17:04,285 --> 00:17:06,380
support the case internally

374
00:17:06,380 --> 00:17:11,380
for clean up and sanitation efforts.

375
00:17:11,530 --> 00:17:13,998
So, progress is made behind the scenes.

376
00:17:13,998 --> 00:17:18,760
Some networks start filtering
SSDP, that's all good.

377
00:17:18,760 --> 00:17:20,920
You'll you'll see the result of that

378
00:17:20,920 --> 00:17:23,300
in the next couple of slides.

379
00:17:23,300 --> 00:17:26,710
Ultimately I get an
email from a journalist,

380
00:17:26,710 --> 00:17:31,710
she's doing some work and she
was recording this new show.

381
00:17:31,890 --> 00:17:33,730
Her name's Justine Underhill.

382
00:17:33,730 --> 00:17:35,610
And she wanted to talk
to me about UPnProxy

383
00:17:35,610 --> 00:17:38,700
because the episode she
was recording was on IOT

384
00:17:38,700 --> 00:17:40,760
and security and everything else.

385
00:17:40,760 --> 00:17:44,573
So while we're recording this video,

386
00:17:45,930 --> 00:17:48,327
I decided that she's
asking questions about,

387
00:17:48,327 --> 00:17:49,480
"How hard is this?

388
00:17:49,480 --> 00:17:50,430
How long does it take?

389
00:17:50,430 --> 00:17:52,060
How much does it cost?"

390
00:17:52,060 --> 00:17:54,490
And I'm like, "Well, I'll just show you."

391
00:17:54,490 --> 00:17:56,750
So I pull out the laptop,

392
00:17:56,750 --> 00:17:59,190
jump on the internet

393
00:17:59,190 --> 00:18:02,290
run ZMAP and I hit the first 1000 things

394
00:18:02,290 --> 00:18:04,530
that respond to my SSDP probe.

395
00:18:04,530 --> 00:18:06,900
And then I start dumping their NAT tables.

396
00:18:06,900 --> 00:18:09,497
And while I'm sitting there
showing her this I'm like,

397
00:18:09,497 --> 00:18:11,370
"Man, I think we just found something new.

398
00:18:11,370 --> 00:18:13,830
Like, this wasn't in the previous scans."

399
00:18:13,830 --> 00:18:15,810
And this is how I accidentally discovered

400
00:18:15,810 --> 00:18:16,950
the EternalSilence stuff.

401
00:18:16,950 --> 00:18:18,607
Which it was cool,

402
00:18:18,607 --> 00:18:21,020
cause we didn't really have a solid case.

403
00:18:21,020 --> 00:18:23,350
I had proposed that attackers

404
00:18:23,350 --> 00:18:24,640
could use this to route
around the firewall,

405
00:18:24,640 --> 00:18:27,030
but we didn't really have a solid proof

406
00:18:27,030 --> 00:18:29,963
from our existing scans
that that was occurring yet.

407
00:18:31,320 --> 00:18:33,780
So these are what the injections look like

408
00:18:33,780 --> 00:18:35,560
after they go through our logging process

409
00:18:35,560 --> 00:18:37,650
and are converted into JSON.

410
00:18:37,650 --> 00:18:42,100
You can see that they are targeting IPs

411
00:18:42,100 --> 00:18:45,210
inside the LAN 192.1.68.10 space,

412
00:18:45,210 --> 00:18:49,620
probably from the information
leak from the SSDP banner.

413
00:18:49,620 --> 00:18:52,500
And then so like there on 166,

414
00:18:52,500 --> 00:18:54,270
you can see that they tried to open

415
00:18:54,270 --> 00:18:57,407
a port forward to 139 in port 445.

416
00:18:57,407 --> 00:19:01,145
So they're injecting
routes into the LAN space

417
00:19:01,145 --> 00:19:05,383
and they are targeting Samba or SMB.

418
00:19:05,383 --> 00:19:09,970
We named it EternalSilence
because Samba and SMB

419
00:19:09,970 --> 00:19:13,310
are clearly being targeted by EternalBlue,

420
00:19:13,310 --> 00:19:14,870
pretty heavily at that point

421
00:19:15,760 --> 00:19:18,920
and the Spanish there,

422
00:19:18,920 --> 00:19:21,350
in the Newport mapping
description there's some Spanish,

423
00:19:21,350 --> 00:19:23,130
and I am terrible at Spanish.

424
00:19:23,130 --> 00:19:28,130
So, my gringo Spanish
is, "Galleta silenciosa."

425
00:19:28,290 --> 00:19:29,600
Go ahead and laugh at me,

426
00:19:29,600 --> 00:19:32,447
but it roughly translates
to, "Silent cookie."

427
00:19:36,000 --> 00:19:40,260
So UPnP EternalSilence is
discovered and published.

428
00:19:40,260 --> 00:19:43,200
Ultimately 3.5 million SSDP responders.

429
00:19:43,200 --> 00:19:44,520
So, some of that cleanup effort worked.

430
00:19:44,520 --> 00:19:47,162
We found almost a million less devices

431
00:19:47,162 --> 00:19:50,441
than we did in our previous research.

432
00:19:50,441 --> 00:19:52,980
227,000 instances of exposed UPnP.

433
00:19:52,980 --> 00:19:57,470
45,000 had active,
EternalSilence injections.

434
00:19:57,470 --> 00:20:00,680
There's no way to really
know what they were up to,

435
00:20:00,680 --> 00:20:02,730
but based on what they were targeting,

436
00:20:02,730 --> 00:20:05,620
the EternalBlue link is an educated guess.

437
00:20:05,620 --> 00:20:07,510
And that educated guest is based on,

438
00:20:07,510 --> 00:20:10,740
if I were evil, that's
what I would do, right?

439
00:20:10,740 --> 00:20:14,782
I've got this surefire, SMB exploit,

440
00:20:14,782 --> 00:20:17,310
but everything that's
running it on the internet

441
00:20:17,310 --> 00:20:18,850
has already been popped.

442
00:20:18,850 --> 00:20:20,460
But you know what,

443
00:20:20,460 --> 00:20:22,690
if I can find a way around
some of these firewalls,

444
00:20:22,690 --> 00:20:24,350
I can probably find some devices

445
00:20:24,350 --> 00:20:27,210
that are still listening on
that that haven't been patched

446
00:20:27,210 --> 00:20:29,760
and now I've got a new
place to drop my ransomware.

447
00:20:32,530 --> 00:20:34,160
So, that's cool.

448
00:20:34,160 --> 00:20:35,700
All this research is cool,

449
00:20:35,700 --> 00:20:37,462
but we still have problems.

450
00:20:37,462 --> 00:20:39,110
The research up to this point,

451
00:20:39,110 --> 00:20:42,090
it has been via passive identification.

452
00:20:42,090 --> 00:20:43,490
This requires scanning the entire internet

453
00:20:43,490 --> 00:20:44,810
regularly to find stuff.

454
00:20:44,810 --> 00:20:46,250
It's time consuming.

455
00:20:46,250 --> 00:20:48,440
We get lots of hate mail and
threats for scanning stuff.

456
00:20:48,440 --> 00:20:50,340
People don't like when
you scan the internet.

457
00:20:50,340 --> 00:20:53,230
Guys, relax, relax.

458
00:20:53,230 --> 00:20:54,960
You're allowed to scan the internet.

459
00:20:54,960 --> 00:20:56,243
It's not a crime, okay?

460
00:20:57,245 --> 00:21:00,322
It's still time-consuming.

461
00:21:00,322 --> 00:21:02,160
It results in a ton of logs

462
00:21:02,160 --> 00:21:03,810
because we're dumping
all of these NAT tables.

463
00:21:03,810 --> 00:21:07,619
So it ends up with gigs and
gigs and gigs of logs per scan.

464
00:21:07,619 --> 00:21:10,800
On top of that, it's very
time sensitive, right?

465
00:21:10,800 --> 00:21:12,850
We know that the attackers
can delete their entries.

466
00:21:12,850 --> 00:21:15,283
We know that the entries time out.

467
00:21:16,140 --> 00:21:18,380
So the odds that we're finding

468
00:21:18,380 --> 00:21:20,450
anything at all is pretty surprising.

469
00:21:20,450 --> 00:21:25,203
Especially when you consider that reality.

470
00:21:26,530 --> 00:21:29,440
So the real problem
here is that we can tell

471
00:21:29,440 --> 00:21:32,960
where they're doing stuff and
where they're pointing stuff,

472
00:21:32,960 --> 00:21:34,230
but we don't actually have visibility

473
00:21:34,230 --> 00:21:35,550
into what they're doing with it.

474
00:21:35,550 --> 00:21:38,380
So if we see them injecting port 25,

475
00:21:38,380 --> 00:21:40,730
we assume it's spam, but we have no idea.

476
00:21:40,730 --> 00:21:43,210
They could be dropping 0days against,

477
00:21:43,210 --> 00:21:44,990
you know, SMTP servers.

478
00:21:44,990 --> 00:21:46,600
No clue.

479
00:21:46,600 --> 00:21:49,740
So we need to fix that.

480
00:21:49,740 --> 00:21:54,740
And that's where UPnProxyPot
enters the fight if you will.

481
00:21:54,920 --> 00:21:56,816
So what is UPnProxyPot?

482
00:21:56,816 --> 00:21:58,480
The 50,000 foot view.

483
00:21:58,480 --> 00:22:00,240
It listens for SSDP probes

484
00:22:00,240 --> 00:22:02,887
and it directs attackers
into a fake UPnP instance.

485
00:22:02,887 --> 00:22:05,130
The UPnP emulation is good enough

486
00:22:06,037 --> 00:22:06,870
to get to the injection phase.

487
00:22:06,870 --> 00:22:08,540
It's not a full implementation.

488
00:22:08,540 --> 00:22:11,293
It could be improved,
but it's good enough.

489
00:22:12,240 --> 00:22:14,810
From there we offer on
the fly proxy capabilities

490
00:22:14,810 --> 00:22:17,300
with man in the middle content
inspection and logging.

491
00:22:17,300 --> 00:22:20,223
TLS stripping is also supported.

492
00:22:21,500 --> 00:22:24,930
All of this is easy to modify

493
00:22:24,930 --> 00:22:26,140
in the sense that if you want

494
00:22:26,140 --> 00:22:27,560
to pretend to be a different device,

495
00:22:27,560 --> 00:22:30,430
all you have to do is
change some XML files

496
00:22:30,430 --> 00:22:34,200
and some text files on disc.

497
00:22:34,200 --> 00:22:35,570
It doesn't require code changes

498
00:22:35,570 --> 00:22:38,190
to change your device profile, per se.

499
00:22:38,190 --> 00:22:41,350
So it offers session-based
PCAP capabilities

500
00:22:41,350 --> 00:22:43,500
so you can come back later
and inspect the traffic

501
00:22:43,500 --> 00:22:45,470
that went over the sockets

502
00:22:45,470 --> 00:22:47,513
and it's written in Golang and bash.

503
00:22:49,380 --> 00:22:52,060
So, SSTP emulation.

504
00:22:52,060 --> 00:22:55,455
The SSDP response that is
currently in the project

505
00:22:55,455 --> 00:22:59,630
was lifted directly from
the most abused device

506
00:22:59,630 --> 00:23:02,303
that we discovered during
the UPnProxy research.

507
00:23:03,480 --> 00:23:04,900
It stored a flat file on disk.

508
00:23:04,900 --> 00:23:07,250
You can change it without
modifying any code.

509
00:23:07,250 --> 00:23:10,670
The one gotcha is if you
update the SSDP banner

510
00:23:10,670 --> 00:23:14,000
and it changes the port
on which the UPnP daemon

511
00:23:14,000 --> 00:23:16,390
is listening on, this is
what the attackers pivot on.

512
00:23:16,390 --> 00:23:20,350
So you will need to change
the listening port in code

513
00:23:20,350 --> 00:23:22,873
that the UPnP daemon listens on.

514
00:23:23,980 --> 00:23:26,780
I didn't have a configuration file set up

515
00:23:26,780 --> 00:23:29,250
when I wrote this in my initial thing.

516
00:23:29,250 --> 00:23:31,153
It's an improvement that could be made.

517
00:23:33,060 --> 00:23:34,764
UPnP emulation.

518
00:23:34,764 --> 00:23:37,410
So the UPnP responses are lifted also

519
00:23:37,410 --> 00:23:40,023
from those same most abused devices.

520
00:23:41,280 --> 00:23:43,700
All the HTML XML is stored in flat files,

521
00:23:43,700 --> 00:23:45,480
updating them requires no code changes.

522
00:23:45,480 --> 00:23:50,240
UPnP emulation serves basic
files, handles NAT interactions.

523
00:23:50,240 --> 00:23:54,440
The attackers applied SOAP is
parsed and handled via RegEx.

524
00:23:54,440 --> 00:23:56,550
It will respond with proper error payloads

525
00:23:56,550 --> 00:24:00,080
if criteria are not met,
or XML is malformed.

526
00:24:00,080 --> 00:24:02,600
Responses must contain
attacker supply data.

527
00:24:02,600 --> 00:24:07,600
So that these responses use
standard printf formatting.

528
00:24:08,660 --> 00:24:10,590
So if you need to change your thing

529
00:24:10,590 --> 00:24:12,690
and the attacker supplied port

530
00:24:12,690 --> 00:24:14,910
needs to be in this chunk of XML,

531
00:24:14,910 --> 00:24:18,043
you can just put the
%d and it'll be there.

532
00:24:19,740 --> 00:24:22,168
So, on the fly proxy.

533
00:24:22,168 --> 00:24:24,510
This is kind of unique
because the attacker

534
00:24:24,510 --> 00:24:27,000
gets to control their proxy
configuration themselves.

535
00:24:27,000 --> 00:24:28,040
So we had to support that.

536
00:24:28,040 --> 00:24:30,160
So attackers submit their
proxy config via SOAP

537
00:24:30,160 --> 00:24:32,540
just like they're talking to UPnP.

538
00:24:32,540 --> 00:24:35,230
We parse them and then
create a session of sorts.

539
00:24:35,230 --> 00:24:36,900
And then we scrape and log plain text

540
00:24:36,900 --> 00:24:40,350
across the proxied session
in both directions.

541
00:24:40,350 --> 00:24:43,749
If they're proxying to TCP
443, it's a special use case

542
00:24:43,749 --> 00:24:48,749
and we assume that connection
is a TLS connection

543
00:24:49,460 --> 00:24:51,733
and we do some special man
in the middle link there.

544
00:24:53,670 --> 00:24:55,600
So, stripping TLS.

545
00:24:55,600 --> 00:24:58,210
And this is a hard slide to read.

546
00:24:58,210 --> 00:24:59,860
It's very upsetting.

547
00:24:59,860 --> 00:25:02,520
So attackers actually do some verification

548
00:25:02,520 --> 00:25:05,490
when they're using the TLS connections.

549
00:25:05,490 --> 00:25:07,627
The initial deployment saw connections,

550
00:25:07,627 --> 00:25:09,690
but they would bail before actually

551
00:25:09,690 --> 00:25:11,603
pushing data across that connection.

552
00:25:12,793 --> 00:25:14,270
Attackers are fingerprinting SIRTs.

553
00:25:14,270 --> 00:25:16,870
Initially they were doing
this via the subject line.

554
00:25:18,410 --> 00:25:20,618
There is an automated cloning process

555
00:25:20,618 --> 00:25:23,770
where we began by pulling the domain

556
00:25:23,770 --> 00:25:25,820
out of the ClientHello.

557
00:25:25,820 --> 00:25:28,687
We then go forward to
the injected endpoint

558
00:25:28,687 --> 00:25:31,860
and we get the SIRT
with the respect of SNI

559
00:25:31,860 --> 00:25:33,940
that was provided in the ClientHello.

560
00:25:33,940 --> 00:25:38,420
We copied the subject
field from the remote SIRT

561
00:25:38,420 --> 00:25:42,780
and we mirror it into a
self-signed clone SIRT.

562
00:25:42,780 --> 00:25:44,110
And this all happens in real time

563
00:25:44,110 --> 00:25:46,790
when they first establish
their connection.

564
00:25:46,790 --> 00:25:48,283
This allows us to,

565
00:25:49,350 --> 00:25:51,920
it was allowing us to
bypass their fingerprinting

566
00:25:51,920 --> 00:25:55,900
and actually get plain
text out of the TLS flows.

567
00:25:55,900 --> 00:25:58,180
Literally yesterday,
as I'm recording this,

568
00:25:58,180 --> 00:26:00,210
literally yesterday, it stopped working.

569
00:26:00,210 --> 00:26:01,870
And I don't know why.

570
00:26:01,870 --> 00:26:04,100
I don't know if they've
changed their fingerprinting.

571
00:26:04,100 --> 00:26:06,768
I don't know what is really going on.

572
00:26:06,768 --> 00:26:10,540
But I have a year and a half.

573
00:26:10,540 --> 00:26:13,470
Well, I have months worth
of logs at this point

574
00:26:13,470 --> 00:26:15,010
that have this functional

575
00:26:15,010 --> 00:26:17,400
and now that it's about to
go open source it breaks.

576
00:26:17,400 --> 00:26:18,800
So, I'm sorry.

577
00:26:18,800 --> 00:26:20,393
I hope we can figure it out.

578
00:26:22,520 --> 00:26:25,640
So the other feature is
the automated PCAPing.

579
00:26:25,640 --> 00:26:27,724
The project uses gopacket.

580
00:26:27,724 --> 00:26:29,990
It allows us to create PCAPs on the fly

581
00:26:29,990 --> 00:26:31,370
using Berkeley packet filters

582
00:26:31,370 --> 00:26:34,820
that are scoped to the
individual sessions,

583
00:26:34,820 --> 00:26:37,020
the individual proxy sessions.

584
00:26:37,020 --> 00:26:39,497
As attackers interact
with the proxy injection,

585
00:26:39,497 --> 00:26:41,480
the PCAPs are automatically collected.

586
00:26:41,480 --> 00:26:43,360
If you find something
interesting in the logs,

587
00:26:43,360 --> 00:26:44,833
you can find the associated PCAP

588
00:26:44,833 --> 00:26:46,521
and see the entire session easily

589
00:26:46,521 --> 00:26:49,670
in whatever your favorite, you know,

590
00:26:49,670 --> 00:26:51,860
PCAP packet muncher is.

591
00:26:51,860 --> 00:26:55,223
Wireshark, TCPdump, whatever.

592
00:26:56,500 --> 00:26:58,990
If you run out of disc space
on your deployed honeypot,

593
00:26:58,990 --> 00:26:59,890
this is probably why.

594
00:26:59,890 --> 00:27:02,640
That is from a single, machine
down there at the bottom.

595
00:27:02,640 --> 00:27:05,980
You can see that we had 81,100 PCAPs

596
00:27:06,840 --> 00:27:09,360
that we ultimately collected
for different sessions

597
00:27:09,360 --> 00:27:11,410
and of those PCAPs it resulted

598
00:27:11,410 --> 00:27:15,233
in almost five and a half
gigs of disk consumed.

599
00:27:17,345 --> 00:27:20,150
So,
(large sigh)

600
00:27:20,150 --> 00:27:21,966
this part hurts as well.

601
00:27:21,966 --> 00:27:24,387
The initial deployment was for one year,

602
00:27:24,387 --> 00:27:28,920
and it was four nodes deployed
across a single VPS provider.

603
00:27:28,920 --> 00:27:31,030
There were geos from
Dallas to London to Tokyo.

604
00:27:31,030 --> 00:27:34,200
300 gigs of PCAPs and logs
were ultimately collected.

605
00:27:34,200 --> 00:27:36,630
Hundreds of millions of
captured proxy sessions

606
00:27:36,630 --> 00:27:39,163
and billions of log lines.

607
00:27:40,980 --> 00:27:44,420
I downloaded all that and
I destroyed the cluster

608
00:27:44,420 --> 00:27:48,410
and then I accidentally lost the backup.

609
00:27:48,410 --> 00:27:53,340
So I figured this out literally like a day

610
00:27:53,340 --> 00:27:56,550
after I submitted the CFP to Def con.

611
00:27:56,550 --> 00:27:59,719
Luckily I had a couple of
months before everything

612
00:27:59,719 --> 00:28:01,890
was accepted and approved.

613
00:28:01,890 --> 00:28:06,110
So I was able to deploy a
smaller four node cluster

614
00:28:07,140 --> 00:28:12,140
for the two months between CFP
and what you're seeing now.

615
00:28:12,630 --> 00:28:15,380
So ultimately four nodes deployed.

616
00:28:15,380 --> 00:28:17,510
US, UK, India, Japan,

617
00:28:17,510 --> 00:28:19,780
39 gigs of PCAPs and logs collected.

618
00:28:19,780 --> 00:28:22,000
230,000 captured proxy sessions

619
00:28:22,000 --> 00:28:24,993
and 22 million lines of logs.

620
00:28:26,870 --> 00:28:29,500
The good news is I did have some notes,

621
00:28:29,500 --> 00:28:32,300
so not everything was lost
from the previous deployment.

622
00:28:33,710 --> 00:28:36,776
And the trends that I saw in the new data

623
00:28:36,776 --> 00:28:39,730
are spot on for the trends
I saw in the old data.

624
00:28:39,730 --> 00:28:42,001
There's not a whole lot's changed.

625
00:28:42,001 --> 00:28:44,620
Just a lot less data
to back up the claims,

626
00:28:44,620 --> 00:28:47,953
but I promise you it's
pretty much identical.

627
00:28:49,890 --> 00:28:53,030
So, observations.

628
00:28:53,030 --> 00:28:54,400
The first thing is that they don't

629
00:28:54,400 --> 00:28:57,820
blindly inject their proxies.

630
00:28:57,820 --> 00:28:59,530
They actually come and do some testing.

631
00:28:59,530 --> 00:29:01,230
So injections,

632
00:29:01,230 --> 00:29:06,230
they first come and they
insert a test proxy instance.

633
00:29:06,602 --> 00:29:08,620
Once they confirm that it works,

634
00:29:08,620 --> 00:29:10,090
then they inject a real proxy.

635
00:29:10,090 --> 00:29:13,380
They utilize it and then
they attempt to delete it.

636
00:29:13,380 --> 00:29:15,683
I say, attempt.
Well, we'll cover that.

637
00:29:16,760 --> 00:29:21,760
So this is the process of an injection.

638
00:29:22,420 --> 00:29:24,970
We see them show up with
their M-SEARCH banner.

639
00:29:24,970 --> 00:29:29,560
We respond with our SSDP response here,

640
00:29:29,560 --> 00:29:30,780
and you see that we point them to

641
00:29:30,780 --> 00:29:35,160
192.168.0.1 on port 2048,

642
00:29:35,160 --> 00:29:38,837
and then etc/linuxigd/gatedesc.xml.

643
00:29:39,760 --> 00:29:42,160
We see them come back
within the same second

644
00:29:42,160 --> 00:29:44,400
and they then request that.

645
00:29:44,400 --> 00:29:47,680
You can see SSDP and UPnP in there.

646
00:29:47,680 --> 00:29:49,330
They request that.

647
00:29:49,330 --> 00:29:51,010
And from there,

648
00:29:51,010 --> 00:29:54,003
they think that we are the
device they're looking for.

649
00:29:55,890 --> 00:29:57,390
Once they have confirmed that,

650
00:29:57,390 --> 00:29:58,490
then they come back and they attempt

651
00:29:58,490 --> 00:29:59,780
to add their port mapping.

652
00:29:59,780 --> 00:30:02,740
So in this case they're adding an entry

653
00:30:02,740 --> 00:30:05,643
that will force us to
listen to WAN port 22280.

654
00:30:07,230 --> 00:30:08,902
It's a TCP socket,

655
00:30:08,902 --> 00:30:11,230
and any traffic received on that

656
00:30:11,230 --> 00:30:14,010
is going to be redirected to port 80

657
00:30:14,010 --> 00:30:18,043
on the host at 74.6.231.21.

658
00:30:19,510 --> 00:30:20,343
You can see down there,

659
00:30:20,343 --> 00:30:21,930
the new port mapping description

660
00:30:21,930 --> 00:30:24,410
kind of mirrors the external port

661
00:30:24,410 --> 00:30:26,840
that they use that's
sync and then a number.

662
00:30:26,840 --> 00:30:29,670
And then the new lease
duration is 600 seconds.

663
00:30:29,670 --> 00:30:34,513
So, this will time out after 600 seconds.

664
00:30:36,630 --> 00:30:38,304
Then they come back and they utilize

665
00:30:38,304 --> 00:30:41,050
that newly injected proxy.

666
00:30:41,050 --> 00:30:42,480
So here you can see,

667
00:30:42,480 --> 00:30:45,299
they sync to 280.

668
00:30:45,299 --> 00:30:48,570
Everything up there
between the curly braces

669
00:30:48,570 --> 00:30:51,610
is the proxy configuration.

670
00:30:51,610 --> 00:30:52,443
We can see the source.

671
00:30:52,443 --> 00:30:54,390
We can see where ultimately
they're going to point to.

672
00:30:54,390 --> 00:30:58,980
So 93.190.139.76 on port 57388

673
00:31:00,590 --> 00:31:05,050
is going to send traffic
to 74.62.31.21 on port 80.

674
00:31:05,050 --> 00:31:07,410
Ultimately we intercept a GET request

675
00:31:07,410 --> 00:31:09,250
to Yahoo with no header.

676
00:31:09,250 --> 00:31:11,340
So it's super easy to spot.

677
00:31:11,340 --> 00:31:15,400
And Yahoo, because they moved to HTTPS,

678
00:31:15,400 --> 00:31:18,363
ultimately issues a 301 permanently moved.

679
00:31:19,200 --> 00:31:22,170
And this is all they really
need for their fingerprint.

680
00:31:22,170 --> 00:31:25,278
Once that's done, we see
the attacker come back

681
00:31:25,278 --> 00:31:28,570
and they attempt to
delete the port mapping,

682
00:31:28,570 --> 00:31:31,519
but they send us malformed XML.

683
00:31:31,519 --> 00:31:34,250
What's interesting here
is that the malformed XML

684
00:31:34,250 --> 00:31:36,650
apparently has, I don't
know if they forgot a null

685
00:31:36,650 --> 00:31:37,670
at the end of the envelope,

686
00:31:37,670 --> 00:31:40,750
but it continues as a buffer overread

687
00:31:40,750 --> 00:31:44,770
and what we ultimately see here is XML

688
00:31:44,770 --> 00:31:46,630
that is not related to this request,

689
00:31:46,630 --> 00:31:48,930
but it just happened to
neighbor it in memory.

690
00:31:49,816 --> 00:31:51,190
What's interesting here...

691
00:31:51,190 --> 00:31:53,110
In this case, it's the same
injection they just send us.

692
00:31:53,110 --> 00:31:55,040
Which isn't that interesting.

693
00:31:55,040 --> 00:31:56,497
What's more interesting,

694
00:31:56,497 --> 00:31:58,010
and there are other instances where

695
00:31:58,010 --> 00:32:00,317
there is XML information leakage

696
00:32:00,317 --> 00:32:02,760
from the buffer overread
from other devices

697
00:32:02,760 --> 00:32:05,300
that they may have been
talking to recently.

698
00:32:05,300 --> 00:32:06,872
So in this case,

699
00:32:06,872 --> 00:32:11,872
at some point they were
talking to a D-link DSL, 2730U.

700
00:32:11,920 --> 00:32:13,550
If you check that out,

701
00:32:13,550 --> 00:32:16,060
you can see that it is a popular item

702
00:32:16,060 --> 00:32:17,750
on a popular e-commerce website.

703
00:32:17,750 --> 00:32:20,470
It's actually a choice item
on that e-commerce website

704
00:32:20,470 --> 00:32:22,120
and it has 3,100 ratings.

705
00:32:22,120 --> 00:32:27,120
So for 1,329 rupees,
you can buy this device.

706
00:32:27,190 --> 00:32:30,080
And that's about $19 US, I believe.

707
00:32:30,080 --> 00:32:33,063
And you can inadvertently
be a black hat proxy too.

708
00:32:34,979 --> 00:32:37,840
So, these are some of the top talkers.

709
00:32:37,840 --> 00:32:41,050
Or sorry, some of the top
injected test end points.

710
00:32:41,050 --> 00:32:44,173
So you can see there's Akamai,
Yahoo, a few others in there.

711
00:32:45,200 --> 00:32:47,700
That top one is clearly
the standout winner,

712
00:32:47,700 --> 00:32:49,750
the 89.39.105.12.

713
00:32:49,750 --> 00:32:53,210
And they're going to ip.shtml.

714
00:32:53,210 --> 00:32:54,698
That's a special page.

715
00:32:54,698 --> 00:32:57,510
It returns your public facing IP address,

716
00:32:57,510 --> 00:32:59,570
which here I've clearly modified it.

717
00:32:59,570 --> 00:33:03,278
And then this UBC IEG plug that they use

718
00:33:03,278 --> 00:33:05,773
for some kind of
identification, I'm assuming.

719
00:33:07,310 --> 00:33:08,920
So there's also a very large campaign

720
00:33:08,920 --> 00:33:10,350
being run against Google.

721
00:33:10,350 --> 00:33:13,090
This is predominantly all the TLS traffic.

722
00:33:13,090 --> 00:33:13,923
It's very weird.

723
00:33:13,923 --> 00:33:14,810
I don't know what it is.

724
00:33:14,810 --> 00:33:17,970
Out of the 59,924 intercepted requests

725
00:33:17,970 --> 00:33:19,920
going across the TLS sockets.

726
00:33:19,920 --> 00:33:22,333
All of them, 100% targeted Google.

727
00:33:23,573 --> 00:33:25,820
This is click fraud, SEO.

728
00:33:25,820 --> 00:33:27,113
I don't know what it is.

729
00:33:27,996 --> 00:33:30,980
This is an example of a caught request.

730
00:33:30,980 --> 00:33:34,400
So they're searching for a
Cisco spark board factory reset.

731
00:33:34,400 --> 00:33:35,630
We can see their accept language.

732
00:33:35,630 --> 00:33:36,980
We can see their cookies.

733
00:33:36,980 --> 00:33:39,340
The user agent they used.
All that good stuff.

734
00:33:39,340 --> 00:33:43,240
We can see even, they seem
to be coming from Dallas

735
00:33:43,240 --> 00:33:46,020
based on the information
leakage in the URL.

736
00:33:46,020 --> 00:33:47,883
But I can't really confirm that.

737
00:33:50,560 --> 00:33:52,310
Also here we see the response.

738
00:33:52,310 --> 00:33:55,040
So we get a 200, okay, for their search.

739
00:33:55,040 --> 00:33:56,650
We see the cookies.

740
00:33:56,650 --> 00:33:58,070
We would, it's not here,

741
00:33:58,070 --> 00:33:58,903
but we would actually have

742
00:33:58,903 --> 00:34:00,700
the full page content and everything.

743
00:34:01,600 --> 00:34:02,810
It's disabled in this case,

744
00:34:02,810 --> 00:34:04,850
because that was a lot of log lines.

745
00:34:04,850 --> 00:34:07,653
I mean, gigs and gigs
and gigs of Google pages.

746
00:34:08,730 --> 00:34:13,300
So in total, they sent
57,237 searched terms.

747
00:34:13,300 --> 00:34:15,120
There are no really clear patterns.

748
00:34:15,120 --> 00:34:17,910
They're from all different
geos that they target.

749
00:34:17,910 --> 00:34:20,636
They use a ton of different user agents.

750
00:34:20,636 --> 00:34:25,636
And each request gets basically
one search per session.

751
00:34:25,850 --> 00:34:28,680
So you can see that top result there

752
00:34:28,680 --> 00:34:31,860
has only shown up 55 times
out of 57,000 requests.

753
00:34:31,860 --> 00:34:34,680
And it's just a search for
the word Samsung in quotes.

754
00:34:34,680 --> 00:34:36,083
Which is weird.

755
00:34:37,430 --> 00:34:41,020
Some of the funnier
searches that were captured.

756
00:34:41,020 --> 00:34:44,880
72 hour deodorant, antivirus download now,

757
00:34:44,880 --> 00:34:45,990
Marlboro summer camp,

758
00:34:45,990 --> 00:34:49,820
leather trousers outfit, fafafa slot hack.

759
00:34:49,820 --> 00:34:50,710
I don't even know what that is.

760
00:34:50,710 --> 00:34:52,540
I should probably Google
some of these to see,

761
00:34:52,540 --> 00:34:54,053
but I haven't yet.

762
00:34:57,090 --> 00:34:59,810
And like I said, they're
very geographically

763
00:34:59,810 --> 00:35:04,480
distributing their stuff
across the Google platform.

764
00:35:04,480 --> 00:35:06,101
There are domains in here

765
00:35:06,101 --> 00:35:10,850
that I don't even know what
country they're affiliated with.

766
00:35:10,850 --> 00:35:14,199
So did you know, there's a .bj,

767
00:35:14,199 --> 00:35:18,520
.as, .jm, .md, .ee?

768
00:35:18,520 --> 00:35:21,925
You know, so they
they're clearly targeting

769
00:35:21,925 --> 00:35:26,925
google.com the most, followed by co.uk.

770
00:35:28,380 --> 00:35:31,530
But still there's so many
that they're hitting.

771
00:35:31,530 --> 00:35:32,363
It's crazy.

772
00:35:34,017 --> 00:35:36,210
This is the user agent profiles.

773
00:35:36,210 --> 00:35:39,241
So they sent 293 different user agents.

774
00:35:39,241 --> 00:35:41,280
And then you can see,

775
00:35:41,280 --> 00:35:43,460
there's almost normalized
clusters of users

776
00:35:43,460 --> 00:35:45,693
and distribution across the abuse.

777
00:35:47,420 --> 00:35:49,840
And these are some of the top talkers.

778
00:35:49,840 --> 00:35:54,117
So, it's not what you'd expect, right?

779
00:35:54,117 --> 00:35:56,310
You would, I guess, I mean,

780
00:35:56,310 --> 00:35:58,000
I guess it is what you'd expect

781
00:35:58,000 --> 00:35:59,670
if it's a single abuser.

782
00:35:59,670 --> 00:36:03,960
But the nature of the queries
almost make it seem organic.

783
00:36:03,960 --> 00:36:05,680
It doesn't seem like it
has an abuse pattern.

784
00:36:05,680 --> 00:36:07,630
It almost seems like real end-users,

785
00:36:07,630 --> 00:36:08,990
but then it's not real end users

786
00:36:08,990 --> 00:36:10,690
showing up and popping
holes in this stuff.

787
00:36:10,690 --> 00:36:13,940
They're all being ferried
through a handful of top talkers.

788
00:36:13,940 --> 00:36:15,540
And then you have your outliers.

789
00:36:16,950 --> 00:36:19,310
If we look at the top 10,

790
00:36:19,310 --> 00:36:22,510
we see that Worldstream,
Worldstream, Worldstream,

791
00:36:22,510 --> 00:36:24,533
Worldstream, OVH, Worldstream, OVH,

792
00:36:26,479 --> 00:36:28,380
Worldstream, OVH and Avast.

793
00:36:28,380 --> 00:36:30,710
So let me just put it this way.

794
00:36:30,710 --> 00:36:33,750
If you work at Worldstream,
find me at the bar.

795
00:36:33,750 --> 00:36:36,040
If you work at OVH, find me at the bar.

796
00:36:36,040 --> 00:36:37,860
If you work at Avast find me at the bar

797
00:36:37,860 --> 00:36:39,600
and I'll buy your drink,

798
00:36:39,600 --> 00:36:41,730
if you tell me what the
hell is going on there.

799
00:36:41,730 --> 00:36:43,080
Cause I don't know why Avast

800
00:36:43,080 --> 00:36:45,903
would be showing up in this
data set, but there they are.

801
00:36:48,020 --> 00:36:49,898
So some theories on this.

802
00:36:49,898 --> 00:36:52,650
The queries to me seem too oddly human.

803
00:36:52,650 --> 00:36:54,200
They're in a bunch of different languages.

804
00:36:54,200 --> 00:36:55,510
They're stuff like, you know,

805
00:36:55,510 --> 00:36:59,650
the best car insurance in
Dallas Fort worth area.

806
00:36:59,650 --> 00:37:01,100
Okay.

807
00:37:01,100 --> 00:37:02,540
So it's too organic to be

808
00:37:02,540 --> 00:37:05,443
just purely automated abuse in my opinion.

809
00:37:06,480 --> 00:37:08,520
And I'm not sure that the people

810
00:37:08,520 --> 00:37:09,840
that are using these proxies

811
00:37:09,840 --> 00:37:11,560
are aware that they're using them.

812
00:37:11,560 --> 00:37:14,210
I have this theory that it may be

813
00:37:14,210 --> 00:37:16,700
some kind of residential proxy reseller,

814
00:37:16,700 --> 00:37:21,390
or some kind of ultimate anonymous

815
00:37:21,390 --> 00:37:23,590
VPN service provider or something.

816
00:37:23,590 --> 00:37:25,840
And these people think
that they're getting

817
00:37:25,840 --> 00:37:28,470
these super secret high privacy stuff.

818
00:37:28,470 --> 00:37:30,000
And I'm just sitting here in the middle

819
00:37:30,000 --> 00:37:31,220
reading their traffic.

820
00:37:31,220 --> 00:37:33,060
Which is a problem.

821
00:37:33,060 --> 00:37:34,890
So, those are my theories.

822
00:37:34,890 --> 00:37:36,440
I'd love to hear more theories.

823
00:37:38,480 --> 00:37:42,044
You'll also intercept some
other stuff outside of TLS.

824
00:37:42,044 --> 00:37:45,340
Here, for example, are some spam messages

825
00:37:45,340 --> 00:37:46,173
that were being routed.

826
00:37:46,173 --> 00:37:48,120
These guys were injecting Outlook servers,

827
00:37:48,120 --> 00:37:50,970
and then, you can watch
the entire interaction.

828
00:37:50,970 --> 00:37:53,283
You can watch as they
send their, their hello.

829
00:37:53,283 --> 00:37:55,250
You can see as they confirm

830
00:37:55,250 --> 00:37:56,730
different addresses are deliverable

831
00:37:56,730 --> 00:37:59,060
and then they build their
message and shoot it across.

832
00:37:59,060 --> 00:38:00,600
You get to see all of that.

833
00:38:00,600 --> 00:38:03,800
The good news here is that
Spamhaus is doing God's work

834
00:38:03,800 --> 00:38:07,113
and stopping a lot of that
abuse from actually succeeding.

835
00:38:09,900 --> 00:38:14,730
This was just a fun finding
from the older data set.

836
00:38:14,730 --> 00:38:18,320
So while this project was going on,

837
00:38:18,320 --> 00:38:23,320
Belarus had a very
tumultuous political event

838
00:38:25,320 --> 00:38:27,420
where a bunch of people went out

839
00:38:27,420 --> 00:38:28,970
and protested the recent election.

840
00:38:28,970 --> 00:38:29,840
And as a result,

841
00:38:29,840 --> 00:38:33,380
Belarus shut down their internet

842
00:38:33,380 --> 00:38:35,530
to news and political websites.

843
00:38:35,530 --> 00:38:38,270
And while that's going on,

844
00:38:38,270 --> 00:38:39,840
suddenly I started seeing these guys

845
00:38:39,840 --> 00:38:42,230
popping up in UK in proxy.

846
00:38:42,230 --> 00:38:45,280
So the top site was sb.by

847
00:38:45,280 --> 00:38:46,920
which is a news website.

848
00:38:46,920 --> 00:38:49,820
And it looks like they were trying to get

849
00:38:49,820 --> 00:38:52,785
to the registration and
then solve some CAPTCHAs.

850
00:38:52,785 --> 00:38:55,760
The other was photobelta.by

851
00:38:55,760 --> 00:38:59,030
which is a stock imaging
host, I think, or something.

852
00:38:59,030 --> 00:39:01,430
But they were actually doing command,

853
00:39:01,430 --> 00:39:03,924
not command, injection, SQL injections.

854
00:39:03,924 --> 00:39:04,780
Which I found pretty funny.

855
00:39:04,780 --> 00:39:09,543
And then the third one
here is mail.rec.gov.by.

856
00:39:10,410 --> 00:39:11,580
According to Google translate,

857
00:39:11,580 --> 00:39:13,080
this is the Central Commission

858
00:39:13,080 --> 00:39:15,950
of the Republic of Belarus Elections

859
00:39:15,950 --> 00:39:16,970
or something along those lines.

860
00:39:16,970 --> 00:39:18,881
And they were just trying
to check their mail

861
00:39:18,881 --> 00:39:20,003
it looks like.

862
00:39:20,003 --> 00:39:20,836
And then on the bottom one here,

863
00:39:20,836 --> 00:39:23,480
we've got a news outlet ont.by

864
00:39:24,410 --> 00:39:26,100
and then they're trying to get

865
00:39:26,100 --> 00:39:27,960
to what appears to be
their exchange server.

866
00:39:27,960 --> 00:39:30,010
So I just found that kind of interesting.

867
00:39:31,280 --> 00:39:32,930
All right so that's a lot of history,

868
00:39:32,930 --> 00:39:35,970
a lot of observations, but
now it comes to cool part.

869
00:39:35,970 --> 00:39:38,320
I'm open sourcing all of this.

870
00:39:38,320 --> 00:39:40,670
So anybody that wants to take this,

871
00:39:40,670 --> 00:39:42,045
stick it on the internet,

872
00:39:42,045 --> 00:39:43,870
play with it, modify it,

873
00:39:43,870 --> 00:39:45,450
whatever you want to do.

874
00:39:45,450 --> 00:39:47,026
Have at it, it's yours.

875
00:39:47,026 --> 00:39:49,490
And this way we can all
kind of share the fun

876
00:39:49,490 --> 00:39:51,970
and see what's going on
with these campaigns.

877
00:39:51,970 --> 00:39:53,300
And if you find really cool stuff,

878
00:39:53,300 --> 00:39:54,600
I'd love to hear about it.

879
00:39:56,410 --> 00:39:58,960
So with that open source announcement,

880
00:39:58,960 --> 00:40:00,410
let's get some stuff out of the way.

881
00:40:00,410 --> 00:40:01,243
First things first,

882
00:40:01,243 --> 00:40:03,740
this project was for fun, is for research

883
00:40:03,740 --> 00:40:06,390
and it was for me to practice
my Golang during COVID.

884
00:40:08,100 --> 00:40:10,750
Second, I apologize for my shitty code.

885
00:40:10,750 --> 00:40:12,090
I know it's shitty.

886
00:40:12,090 --> 00:40:13,920
I've learned more Golang since then

887
00:40:13,920 --> 00:40:16,420
and learned more design
patterns in Golang since then.

888
00:40:16,420 --> 00:40:19,270
And I really understand
how shitty my code is.

889
00:40:19,270 --> 00:40:20,283
I'm sorry.

890
00:40:21,590 --> 00:40:22,990
Like I said, it was a research project.

891
00:40:22,990 --> 00:40:25,090
It's not commercial grade software.

892
00:40:25,090 --> 00:40:26,410
It served its purpose

893
00:40:26,410 --> 00:40:28,970
and it did well enough
to serve that purpose

894
00:40:28,970 --> 00:40:31,220
and that's all I really needed out of it.

895
00:40:31,220 --> 00:40:32,600
Yes. There are bugs.

896
00:40:32,600 --> 00:40:33,570
Thank you for noticing.

897
00:40:33,570 --> 00:40:35,240
If you open an issue,

898
00:40:35,240 --> 00:40:38,170
there's a great chance I'm
not going to address it.

899
00:40:38,170 --> 00:40:39,490
Maybe someone else in the community will,

900
00:40:39,490 --> 00:40:42,230
but this is not my top priority anymore.

901
00:40:42,230 --> 00:40:44,660
So I would encourage
you to learn some Golang

902
00:40:44,660 --> 00:40:47,410
and maybe submit a pull request instead.

903
00:40:47,410 --> 00:40:49,366
If you'd like to fix that bug.

904
00:40:49,366 --> 00:40:51,230
Yes, it's hacky.

905
00:40:51,230 --> 00:40:53,740
I know.
I am a hacky developer.

906
00:40:53,740 --> 00:40:57,330
I'm not your enterprise leading scrum,

907
00:40:57,330 --> 00:40:58,900
running everything else, developer.

908
00:40:58,900 --> 00:41:00,773
So, it is what it is.

909
00:41:01,670 --> 00:41:04,343
If you have ideas to fix or improve stuff,

910
00:41:04,343 --> 00:41:06,020
it's open source.

911
00:41:06,020 --> 00:41:08,180
Have at it, hoss.
Fork away.

912
00:41:08,180 --> 00:41:10,040
Send pull requests, whatever.

913
00:41:10,040 --> 00:41:14,081
I'll likely accept a pull request.

914
00:41:14,081 --> 00:41:17,189
I will likely ignore your issue

915
00:41:17,189 --> 00:41:20,403
that you submit to the GitHub repository.

916
00:41:22,704 --> 00:41:26,320
So, some ideas for improvements.

917
00:41:26,320 --> 00:41:27,940
If you want to hit the ground running.

918
00:41:27,940 --> 00:41:29,640
Logging could be improved.

919
00:41:29,640 --> 00:41:31,986
Content injection could be a thing.

920
00:41:31,986 --> 00:41:34,420
In a world where people
are abusing this stuff.

921
00:41:34,420 --> 00:41:37,110
I imagine that you could
stick JavaScript in pages,

922
00:41:37,110 --> 00:41:38,770
or you could tamper with cookies,

923
00:41:38,770 --> 00:41:41,290
or you could inject plugs of texts

924
00:41:41,290 --> 00:41:42,410
that might be indexable.

925
00:41:42,410 --> 00:41:44,930
That you could maybe turn
up on a search engine later.

926
00:41:44,930 --> 00:41:45,763
I don't know.

927
00:41:45,763 --> 00:41:48,000
These are just some ideas I've had.

928
00:41:48,000 --> 00:41:50,363
There is a memory leak.
I know.

929
00:41:52,582 --> 00:41:53,415
The run script actually

930
00:41:53,415 --> 00:41:54,800
restarts the binary every hour

931
00:41:57,319 --> 00:41:58,670
to get around this
because I haven't had time

932
00:41:58,670 --> 00:42:00,820
to actually troubleshoot it.

933
00:42:00,820 --> 00:42:02,460
Yes, it runs in screen.

934
00:42:02,460 --> 00:42:03,793
I regret nothing.

935
00:42:04,800 --> 00:42:07,250
Feel free to properly
daemonize it if you'd like.

936
00:42:08,820 --> 00:42:11,440
This, I think would be
the biggest benefit.

937
00:42:11,440 --> 00:42:13,660
If you randomize the SSDP banners

938
00:42:13,660 --> 00:42:17,030
and listen on multiple
popular exposed UPnP ports,

939
00:42:17,030 --> 00:42:18,850
I have a feeling you're going to see

940
00:42:18,850 --> 00:42:21,700
a much more diverse set
of attackers show up.

941
00:42:21,700 --> 00:42:23,330
My findings may be myopic

942
00:42:23,330 --> 00:42:25,870
because I'm pretending
to be a single device.

943
00:42:25,870 --> 00:42:26,900
And that single device

944
00:42:26,900 --> 00:42:29,220
is what's being targeted by these people.

945
00:42:29,220 --> 00:42:32,840
If you were to diversify the target

946
00:42:32,840 --> 00:42:34,720
that you paint for your attacker.

947
00:42:34,720 --> 00:42:38,123
It's possible you will also
diversify your findings.

948
00:42:40,300 --> 00:42:42,058
Some additional ideas for improvement.

949
00:42:42,058 --> 00:42:45,430
The SIRT caching, when I wrote this,

950
00:42:45,430 --> 00:42:48,980
the SIRT caching was not
taking in SNI differences.

951
00:42:48,980 --> 00:42:51,580
So, it works on Google

952
00:42:51,580 --> 00:42:54,060
because all Google
servers are just Google.

953
00:42:54,060 --> 00:42:56,422
But if you were to say,

954
00:42:56,422 --> 00:42:58,610
have an injection that
pointed to someplace

955
00:42:58,610 --> 00:43:02,439
that was multiple domains
associated with it,

956
00:43:02,439 --> 00:43:05,380
you're one clone SIRT is only going to be

957
00:43:05,380 --> 00:43:08,250
the one that is aligned
with that initial request.

958
00:43:08,250 --> 00:43:11,880
So you could improve that
by in the SIRT cache,

959
00:43:11,880 --> 00:43:14,480
actually using the SNI value,

960
00:43:14,480 --> 00:43:17,930
the domain name that was used
when that SIRT was cloned.

961
00:43:17,930 --> 00:43:20,690
Improved TLS handling and
proxying, like I said.

962
00:43:20,690 --> 00:43:23,150
It was working.
It has stopped working.

963
00:43:23,150 --> 00:43:25,450
Improving that would
probably fix the problem.

964
00:43:26,470 --> 00:43:27,550
Improved SIRT cloning.

965
00:43:27,550 --> 00:43:30,760
Clone more fields to
better emulate the remote,

966
00:43:30,760 --> 00:43:33,263
the endpoint SIRT that
you're trying to clone.

967
00:43:34,164 --> 00:43:35,660
Improved error handling.

968
00:43:35,660 --> 00:43:37,270
Cause I didn't really handle any errors.

969
00:43:37,270 --> 00:43:39,610
So anything is an improvement.

970
00:43:39,610 --> 00:43:41,933
And improved, basically everything else.

971
00:43:44,630 --> 00:43:46,470
You can find most of the
information you'll need

972
00:43:46,470 --> 00:43:48,350
in the readme file.

973
00:43:48,350 --> 00:43:50,280
If there is anything I missed,

974
00:43:50,280 --> 00:43:52,280
please feel free to submit a pull request

975
00:43:52,280 --> 00:43:55,140
with the updates that you found
when deploying this stuff.

976
00:43:55,140 --> 00:43:55,973
It's written in Golang,

977
00:43:55,973 --> 00:43:58,750
but it does have Linux dependencies.

978
00:43:58,750 --> 00:44:00,890
So it will run on any operating system

979
00:44:00,890 --> 00:44:02,990
so long as it's Linux.

980
00:44:02,990 --> 00:44:05,740
You can deploy a node in VPSs very easily.

981
00:44:05,740 --> 00:44:07,940
You could also run it on Raspberry Pies

982
00:44:07,940 --> 00:44:09,620
or ODroids or anything else.

983
00:44:09,620 --> 00:44:12,170
Just stick it on the DMZ
and you'll be good to go.

984
00:44:12,170 --> 00:44:13,640
Typically you start to see abuse

985
00:44:13,640 --> 00:44:16,173
within the first 24 to
48 hours of deployment,

986
00:44:17,450 --> 00:44:19,803
and it may be even lower than that.

987
00:44:20,750 --> 00:44:22,110
So the last thing.

988
00:44:22,110 --> 00:44:23,425
If you find something cool,

989
00:44:23,425 --> 00:44:26,030
please hit me up on LinkedIn
and let me know about it.

990
00:44:26,030 --> 00:44:29,660
I'd love to hear if you find

991
00:44:29,660 --> 00:44:32,773
new and interesting trends
in some of your deployments.

992
00:44:34,070 --> 00:44:35,660
And that wraps it up.

993
00:44:35,660 --> 00:44:39,090
So, go grab the project, pull it down,

994
00:44:39,090 --> 00:44:41,601
hack it up, compile it, deploy it.

995
00:44:41,601 --> 00:44:43,180
Let me know what you find.

996
00:44:43,180 --> 00:44:44,013
Go have fun.

