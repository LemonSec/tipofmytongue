1
00:00:02,950 --> 00:00:04,090
- All right.

2
00:00:04,090 --> 00:00:05,120
Hello, everyone.

3
00:00:05,120 --> 00:00:09,477
Welcome to the virtual
stream of the DEF CON talk,

4
00:00:09,477 --> 00:00:11,330
"The PACS-man Comes For Us All:

5
00:00:11,330 --> 00:00:12,720
We May Still Be Vaccinated,

6
00:00:12,720 --> 00:00:15,150
but Access Control Still Sucks."

7
00:00:15,150 --> 00:00:16,660
We're gonna jump right into it today

8
00:00:16,660 --> 00:00:17,930
'cause we have a lot to cover.

9
00:00:17,930 --> 00:00:20,490
For those of you who don't know,

10
00:00:20,490 --> 00:00:21,980
my name is Babak Javadi.

11
00:00:21,980 --> 00:00:23,660
I am a lock picker, hardware hacker,

12
00:00:23,660 --> 00:00:24,750
and reverse engineer.

13
00:00:24,750 --> 00:00:26,810
I've also been a professional red teamer

14
00:00:26,810 --> 00:00:30,860
and covert entry instructor
for over a decade.

15
00:00:30,860 --> 00:00:33,990
Founded The Open
Organisation of Lockpickers,

16
00:00:33,990 --> 00:00:35,140
the Red Team Alliance,

17
00:00:35,140 --> 00:00:36,233
and The CORE Group.

18
00:00:38,330 --> 00:00:40,430
Nick, tell us a little bit about yourself.

19
00:00:42,630 --> 00:00:43,620
- Sure, yeah.

20
00:00:43,620 --> 00:00:44,453
I'm Nick Draffen.

21
00:00:44,453 --> 00:00:46,210
I like to hack things

22
00:00:46,210 --> 00:00:49,340
where the physical and
digital world intersect.

23
00:00:49,340 --> 00:00:51,980
I'm involved in the RFID
Hacking by Iceman Discord

24
00:00:51,980 --> 00:00:53,280
and you can find me there.

25
00:00:54,460 --> 00:00:56,733
Eric, can you tell us a
little bit about yourself?

26
00:01:00,150 --> 00:01:01,173
- I'm Eric Betts.

27
00:01:02,641 --> 00:01:05,224
(Babak laughs)

28
00:01:06,450 --> 00:01:09,150
- Hi, everyone. My name's Anze.

29
00:01:09,150 --> 00:01:11,010
I'm a student of computer
science in Slovenia,

30
00:01:11,010 --> 00:01:14,150
a security researcher
for about five years now.

31
00:01:14,150 --> 00:01:15,910
Disassemble everything I find.

32
00:01:15,910 --> 00:01:17,280
Bug bounty hunter.

33
00:01:17,280 --> 00:01:20,230
Made into the Google
Vulnerability Research Program

34
00:01:20,230 --> 00:01:21,250
Hall of Fame.

35
00:01:21,250 --> 00:01:24,663
Mostly now I do RFID research.

36
00:01:27,810 --> 00:01:30,580
- All right, so today we're
gonna talk about two things.

37
00:01:30,580 --> 00:01:33,100
We're gonna talk about a new
tool that we're releasing

38
00:01:33,100 --> 00:01:35,220
that's gonna make red
team a whole lot more fun

39
00:01:35,220 --> 00:01:37,300
and a whole lot more easier

40
00:01:37,300 --> 00:01:40,500
and we're also gonna talk about
a interesting vulnerability

41
00:01:40,500 --> 00:01:42,550
that we found in some readers.

42
00:01:42,550 --> 00:01:44,660
So, first, what are PACS?

43
00:01:44,660 --> 00:01:45,770
What is the PACS-man?

44
00:01:45,770 --> 00:01:47,490
Well, that refers broadly

45
00:01:47,490 --> 00:01:51,300
to physical access control systems.

46
00:01:51,300 --> 00:01:53,100
And we're not gonna go in depth

47
00:01:53,100 --> 00:01:54,090
into how they all work

48
00:01:54,090 --> 00:01:55,690
but we'll give you a very light overview.

49
00:01:55,690 --> 00:01:57,160
If you're interested in more,

50
00:01:57,160 --> 00:01:59,240
check out our other DEF CON talks

51
00:01:59,240 --> 00:02:02,100
or check out the RFID Hacking Discord

52
00:02:02,100 --> 00:02:03,560
or Red Team Alliance.

53
00:02:03,560 --> 00:02:06,710
But we are talking about
enterprise access control systems.

54
00:02:06,710 --> 00:02:08,820
These are embedded boards

55
00:02:08,820 --> 00:02:11,760
that take in inputs of various kinds,

56
00:02:11,760 --> 00:02:13,450
most often, credentials,

57
00:02:13,450 --> 00:02:15,250
and based off of logic,

58
00:02:15,250 --> 00:02:16,620
controls certain outputs,

59
00:02:16,620 --> 00:02:19,230
such as door hardware, magnetic locks,

60
00:02:19,230 --> 00:02:21,323
electrified strikes, et cetera.

61
00:02:22,250 --> 00:02:25,060
The most important concept to keep in mind

62
00:02:25,060 --> 00:02:27,270
throughout this first
part of the talk here

63
00:02:27,270 --> 00:02:29,160
is that RFID credentials,

64
00:02:29,160 --> 00:02:32,490
regardless of what technology they are,

65
00:02:32,490 --> 00:02:36,460
they are basically very
simple, very tiny containers.

66
00:02:36,460 --> 00:02:38,790
So whether it's a prox credential

67
00:02:38,790 --> 00:02:41,750
or a iCLASS or a MIFARE credential,

68
00:02:41,750 --> 00:02:45,530
these are just different ways
of all storing the same data.

69
00:02:45,530 --> 00:02:48,380
So a lot of older
low-frequency credentials,

70
00:02:48,380 --> 00:02:49,760
they're simply like folders,

71
00:02:49,760 --> 00:02:51,800
electronic, wireless folders,

72
00:02:51,800 --> 00:02:55,150
that contain a very
small bit of data inside.

73
00:02:55,150 --> 00:02:57,770
And when we present that
folder to the system,

74
00:02:57,770 --> 00:02:59,520
some interesting things happen.

75
00:02:59,520 --> 00:03:01,070
So to talk to you about that,

76
00:03:01,070 --> 00:03:04,720
we're gonna cover a really
short, very simple analogy.

77
00:03:04,720 --> 00:03:06,020
We have some characters here.

78
00:03:06,020 --> 00:03:07,800
Some of you may have seen them before.

79
00:03:07,800 --> 00:03:09,680
So we have our RFID reader,

80
00:03:09,680 --> 00:03:11,930
we have our RFID credential,

81
00:03:11,930 --> 00:03:13,720
we have our door controller,

82
00:03:13,720 --> 00:03:17,200
and then, of course, we
have the door hardware.

83
00:03:17,200 --> 00:03:18,830
So what happens normally

84
00:03:18,830 --> 00:03:22,170
is that RFID reader is always scanning

85
00:03:22,170 --> 00:03:24,700
looking for credentials nearby.

86
00:03:24,700 --> 00:03:28,470
As soon as that credential
comes into range of the reader,

87
00:03:28,470 --> 00:03:31,960
it actually is powered on
by the field of the reader

88
00:03:31,960 --> 00:03:34,400
and immediately starts transmitting

89
00:03:34,400 --> 00:03:36,710
the data stored on the credential.

90
00:03:36,710 --> 00:03:39,710
The reader receiving that
information takes that

91
00:03:39,710 --> 00:03:42,940
and then retransmits it
out to the door controller.

92
00:03:42,940 --> 00:03:45,260
The door controller performs
some logic functions,

93
00:03:45,260 --> 00:03:47,980
decides, hey, is this
person authorized or not?

94
00:03:47,980 --> 00:03:51,900
And if so, we go ahead and
release the electrified strike,

95
00:03:51,900 --> 00:03:54,130
magnetic lock, what have you.

96
00:03:54,130 --> 00:03:57,410
Of course, it's not just
low-frequency credentials

97
00:03:57,410 --> 00:03:58,300
that work this way.

98
00:03:58,300 --> 00:04:01,360
High-frequency credentials
work in a very similar way

99
00:04:01,360 --> 00:04:03,970
but with a couple of extra
layers of protection.

100
00:04:03,970 --> 00:04:06,690
So the data might not be in plain text.

101
00:04:06,690 --> 00:04:08,060
It might be stored

102
00:04:08,060 --> 00:04:10,490
in some sort of obscure
to encrypted format.

103
00:04:10,490 --> 00:04:13,970
And most importantly,
that data is protected.

104
00:04:13,970 --> 00:04:16,070
So if we imagine our credential data

105
00:04:16,070 --> 00:04:17,930
being folded into an envelope,

106
00:04:17,930 --> 00:04:19,970
placed into a secure bag,

107
00:04:19,970 --> 00:04:23,050
and then that bag being put
into a locked container,

108
00:04:23,050 --> 00:04:25,240
that is similar in many ways

109
00:04:25,240 --> 00:04:27,840
to how a lot of contactless smart cards

110
00:04:27,840 --> 00:04:29,750
and high-frequency credentials work.

111
00:04:29,750 --> 00:04:31,770
The data inside is ultimately the same.

112
00:04:31,770 --> 00:04:34,900
We are just adding additional
layers of protection.

113
00:04:34,900 --> 00:04:37,510
So, again, really oversimplifying

114
00:04:37,510 --> 00:04:39,710
how these technologies work.

115
00:04:39,710 --> 00:04:43,410
If we take a look at, you know,
a high-frequency credential,

116
00:04:43,410 --> 00:04:44,380
here is an example

117
00:04:44,380 --> 00:04:47,130
where a mutual authentication takes place.

118
00:04:47,130 --> 00:04:49,240
So it doesn't immediately
start transmitting

119
00:04:49,240 --> 00:04:50,640
the cardholder data

120
00:04:50,640 --> 00:04:53,920
but, rather, a secret
handshake has to take place

121
00:04:53,920 --> 00:04:55,820
where the credential and the reader

122
00:04:55,820 --> 00:04:58,440
mutually authenticate each other

123
00:04:58,440 --> 00:05:01,330
without revealing any secret key material

124
00:05:01,330 --> 00:05:04,310
and once that information is verified,

125
00:05:04,310 --> 00:05:07,470
then the cardholder information
is provided to the reader,

126
00:05:07,470 --> 00:05:10,010
the reader then retransmits
that to the door controller,

127
00:05:10,010 --> 00:05:13,460
and everything else continues as usual.

128
00:05:13,460 --> 00:05:17,250
So credentials come in a lot
of different shapes and sizes.

129
00:05:17,250 --> 00:05:18,730
A lot of them are broken.

130
00:05:18,730 --> 00:05:20,890
A few of them are not.

131
00:05:20,890 --> 00:05:25,120
And ultimately, they are
just one major component

132
00:05:25,120 --> 00:05:26,750
of the access control system.

133
00:05:26,750 --> 00:05:28,970
So we have a bunch of
different credentials.

134
00:05:28,970 --> 00:05:30,210
We have readers.

135
00:05:30,210 --> 00:05:33,050
We have the door hardware,

136
00:05:33,050 --> 00:05:34,400
different types of sensors,

137
00:05:34,400 --> 00:05:38,450
motion sensors, door
contact sensors, et cetera.

138
00:05:38,450 --> 00:05:40,450
Then, of course, we
have the door controller

139
00:05:40,450 --> 00:05:41,370
or control panel

140
00:05:41,370 --> 00:05:43,340
that is making all the decisions

141
00:05:43,340 --> 00:05:47,280
and that is all managed by
some server-side software

142
00:05:47,280 --> 00:05:49,640
or PACS software package.

143
00:05:49,640 --> 00:05:53,610
So oftentimes when in the hacker community

144
00:05:53,610 --> 00:05:56,990
we're talking about interacting
with access control systems,

145
00:05:56,990 --> 00:05:58,850
very often, we're really
talking about hacking

146
00:05:58,850 --> 00:06:00,410
just the RFID Ps,

147
00:06:00,410 --> 00:06:01,980
the credential side,

148
00:06:01,980 --> 00:06:06,100
which really just refers to the
method of communication used

149
00:06:06,100 --> 00:06:10,100
between the credential
itself, the card itself,

150
00:06:10,100 --> 00:06:12,053
and the card reader.

151
00:06:12,930 --> 00:06:14,750
So all of these different pieces,

152
00:06:14,750 --> 00:06:17,870
they are set up in a very interesting way

153
00:06:17,870 --> 00:06:21,030
and they all kind of work
independently of each other

154
00:06:21,030 --> 00:06:22,840
but are kind of glued together

155
00:06:22,840 --> 00:06:25,270
in a couple of different
ways that we'll see.

156
00:06:25,270 --> 00:06:27,300
However, let's talk

157
00:06:27,300 --> 00:06:29,590
about some of the most
common tools of the trade

158
00:06:29,590 --> 00:06:32,790
when we're talking about
RFID hacking in general

159
00:06:32,790 --> 00:06:35,620
and red teaming as it applies to it.

160
00:06:35,620 --> 00:06:37,930
Some of the really common
tools that you'll see

161
00:06:37,930 --> 00:06:39,307
or may already be familiar with

162
00:06:39,307 --> 00:06:41,650
is, first of all, the Proxmark3.

163
00:06:41,650 --> 00:06:43,330
This thing is ubiquitous.

164
00:06:43,330 --> 00:06:45,070
It's an open-source hardware project

165
00:06:45,070 --> 00:06:49,720
originally released by Jonathan
Westheus ages and ages ago.

166
00:06:49,720 --> 00:06:53,660
Since then, there have been
many different hardware variants

167
00:06:53,660 --> 00:06:54,550
that have come out,

168
00:06:54,550 --> 00:06:57,180
some good, some not so good.

169
00:06:57,180 --> 00:07:01,360
It's very much a kind of
Swiss Army knife of RFID.

170
00:07:01,360 --> 00:07:05,960
It's a software-defined
RFID tool that can,

171
00:07:05,960 --> 00:07:09,850
just with, you know, reprogramming
the code and firmware,

172
00:07:09,850 --> 00:07:13,570
we can change what different
credentials it can talk to

173
00:07:13,570 --> 00:07:14,660
and this is one of the reasons

174
00:07:14,660 --> 00:07:17,600
why it's been so popular
with the community.

175
00:07:17,600 --> 00:07:21,220
The most recent, most
common variant of this tool

176
00:07:21,220 --> 00:07:26,220
is the Proxmark 3 RDV4 made
by the RFID Research Group

177
00:07:26,840 --> 00:07:28,900
and it's one of our favorite variants.

178
00:07:28,900 --> 00:07:30,250
It's very mature today

179
00:07:30,250 --> 00:07:33,270
and it finally has become
stable and good enough

180
00:07:33,270 --> 00:07:36,630
that it can be used much
more easily for red teaming.

181
00:07:36,630 --> 00:07:39,200
One of the coolest add-ons that it has

182
00:07:39,200 --> 00:07:41,800
that hasn't really been
fully taken advantage of yet

183
00:07:41,800 --> 00:07:44,330
is the Bluetooth add-on or the Blue Shark,

184
00:07:44,330 --> 00:07:48,730
which is a Bluetooth 2
interface to the reader.

185
00:07:48,730 --> 00:07:51,480
And we're also gonna be using

186
00:07:51,480 --> 00:07:54,020
in this first part of the talk the ESPKey.

187
00:07:54,020 --> 00:07:57,150
This is a Wiegand interception device

188
00:07:57,150 --> 00:08:00,100
originally made by Kenny McElroy

189
00:08:00,100 --> 00:08:03,784
or octosavvi on GitHub and Twitter.

190
00:08:03,784 --> 00:08:07,060
And this is a Wiegand
interception and replay device.

191
00:08:07,060 --> 00:08:08,440
And it's not the first of its kind.

192
00:08:08,440 --> 00:08:09,747
There have been a number
of others before it,

193
00:08:09,747 --> 00:08:13,400
the BLEKey and, of course, the Gecko

194
00:08:13,400 --> 00:08:15,930
made by Zac Franken and Adam Laurie.

195
00:08:15,930 --> 00:08:19,300
And this is a device that is
optimized for field deployment.

196
00:08:19,300 --> 00:08:21,600
So it's very fast to install.

197
00:08:21,600 --> 00:08:24,780
It has a very easy-to-use user interface.

198
00:08:24,780 --> 00:08:28,460
And, very happily, is one of my favorite

199
00:08:28,460 --> 00:08:32,180
and cheapest, fastest ways
to weaponize any reader.

200
00:08:32,180 --> 00:08:34,530
What do we mean by weaponizing a reader?

201
00:08:34,530 --> 00:08:36,180
Well, that's just a fancy way

202
00:08:36,180 --> 00:08:38,630
of saying we took a regular card reader

203
00:08:38,630 --> 00:08:39,973
that knows how to talk to the credential

204
00:08:39,973 --> 00:08:41,360
that we wanna talk to

205
00:08:41,360 --> 00:08:43,450
and we're gonna connect
the data logger to it.

206
00:08:43,450 --> 00:08:45,430
So we supply it some portable power

207
00:08:45,430 --> 00:08:47,000
in the form of a battery.

208
00:08:47,000 --> 00:08:49,330
We connect a data logger of some kind.

209
00:08:49,330 --> 00:08:52,880
That can be a Arduino or a Raspberry Pi

210
00:08:52,880 --> 00:08:54,120
or whatever you wanna use.

211
00:08:54,120 --> 00:08:56,720
In this case, we're using an ESPKey.

212
00:08:56,720 --> 00:08:59,380
And that's it. You have
a weaponized reader.

213
00:08:59,380 --> 00:09:01,510
Data is read by the reader,

214
00:09:01,510 --> 00:09:03,260
the reader sends it to
the door controller,

215
00:09:03,260 --> 00:09:06,670
except there is no door
controller, only the ESPKey,

216
00:09:06,670 --> 00:09:07,530
which records it.

217
00:09:07,530 --> 00:09:11,330
So this is a really cool,
versatile, multifunction tool.

218
00:09:11,330 --> 00:09:13,330
Typically, in the field,

219
00:09:13,330 --> 00:09:14,980
what that workflow might look like

220
00:09:14,980 --> 00:09:18,770
is once you capture that
cardholder information,

221
00:09:18,770 --> 00:09:22,640
now we have to then encode it onto a card,

222
00:09:22,640 --> 00:09:24,880
which we often do manually

223
00:09:24,880 --> 00:09:26,320
either from a computer terminal

224
00:09:26,320 --> 00:09:27,710
or maybe if you have an Android phone,

225
00:09:27,710 --> 00:09:32,540
you might use the Bluetooth-enabled
phone application.

226
00:09:32,540 --> 00:09:33,710
But it's a little bit clunky,

227
00:09:33,710 --> 00:09:35,570
sometimes requires some extra steps,

228
00:09:35,570 --> 00:09:37,430
and it does take a little bit of time.

229
00:09:37,430 --> 00:09:40,260
So once you clone a
credential in the field,

230
00:09:40,260 --> 00:09:42,030
you still have to then go back

231
00:09:42,030 --> 00:09:44,173
and write it to a card later.

232
00:09:45,180 --> 00:09:48,400
So how do we improve this
experience in the field?

233
00:09:48,400 --> 00:09:52,130
Well, we know that there are
these Bluetooth capabilities

234
00:09:52,130 --> 00:09:55,000
out there for the Proxmark3

235
00:09:55,000 --> 00:09:57,090
and we know the ESPKey has Wi-Fi,

236
00:09:57,090 --> 00:10:01,610
so surely there must be a
way to automate these things.

237
00:10:01,610 --> 00:10:04,540
And to tell us what we
ended up coming up with

238
00:10:04,540 --> 00:10:06,550
to create this automation,

239
00:10:06,550 --> 00:10:09,120
I'm gonna hand things over to Nick,

240
00:10:09,120 --> 00:10:11,243
who wrote some really cool software.

241
00:10:13,060 --> 00:10:16,500
- So, yeah, thanks for the
introduction there, Babak.

242
00:10:16,500 --> 00:10:18,910
Yeah, Babak and I were on a phone call

243
00:10:18,910 --> 00:10:22,200
talking about usage of weaponized readers

244
00:10:22,200 --> 00:10:24,350
and Proxmark3s in the field,

245
00:10:24,350 --> 00:10:28,170
trying to come up with a unique
way to glue them together

246
00:10:28,170 --> 00:10:31,240
and leveraging those functions

247
00:10:31,240 --> 00:10:33,400
that are already on the
ESPKey with the Wi-Fi

248
00:10:33,400 --> 00:10:36,660
and the Proxmark3 with the Bluetooth.

249
00:10:36,660 --> 00:10:40,740
We kind of thought about what
else had Wi-Fi and Bluetooth

250
00:10:40,740 --> 00:10:43,650
and the quick and easy answer to that,

251
00:10:43,650 --> 00:10:45,010
what would be portable in the field,

252
00:10:45,010 --> 00:10:48,200
was a Raspberry Pi Zero W.

253
00:10:48,200 --> 00:10:50,720
It's small, it's able
to be battery powered,

254
00:10:50,720 --> 00:10:55,630
and it has both Wi-Fi
and Bluetooth peripherals

255
00:10:55,630 --> 00:10:57,450
so we can connect it.

256
00:10:57,450 --> 00:11:02,297
So this is where we kind of
came up with the idea for Odo.

257
00:11:03,320 --> 00:11:04,370
Odo, if you don't know,

258
00:11:04,370 --> 00:11:07,940
is a character on "Star
Trek: Deep Space Nine."

259
00:11:07,940 --> 00:11:12,130
Odo is a Changeling in the
show, which is a shapeshifter,

260
00:11:12,130 --> 00:11:17,090
meaning that he can take the
shape of any object or person.

261
00:11:17,090 --> 00:11:20,940
So with the idea for Odo being
that you capture a credential

262
00:11:20,940 --> 00:11:22,190
via the weaponized reader,

263
00:11:22,190 --> 00:11:24,500
you then shapeshift into that person,

264
00:11:24,500 --> 00:11:27,970
essentially leveraging a
physical privilege escalation

265
00:11:27,970 --> 00:11:28,803
in the field.

266
00:11:28,803 --> 00:11:33,440
You can bump into
someone, grab their badge,

267
00:11:33,440 --> 00:11:35,390
and become that person

268
00:11:35,390 --> 00:11:37,320
and use that to your advantage.

269
00:11:37,320 --> 00:11:40,470
So what is Odo under the hood?

270
00:11:40,470 --> 00:11:42,160
Odo is an open-source framework

271
00:11:42,160 --> 00:11:45,550
that takes credentials
in, puts credentials out,

272
00:11:45,550 --> 00:11:47,850
and it's language agnostic

273
00:11:47,850 --> 00:11:51,560
because it basically leverages
the fact that it's a JSON

274
00:11:51,560 --> 00:11:53,100
over MQTT API.

275
00:11:53,100 --> 00:11:55,100
So there are credential producers,

276
00:11:55,100 --> 00:11:56,650
there are credential consumers.

277
00:11:57,580 --> 00:12:02,520
One side, like an ESPKey,
produces credentials

278
00:12:02,520 --> 00:12:05,140
and emits an MQTT message.

279
00:12:05,140 --> 00:12:06,540
The other side, like the Proxmark3,

280
00:12:06,540 --> 00:12:08,450
can consume those messages

281
00:12:08,450 --> 00:12:10,630
and then do something with that data.

282
00:12:10,630 --> 00:12:13,400
So this allows it to be language agnostic.

283
00:12:13,400 --> 00:12:16,110
Even though the base framework
is written in Python,

284
00:12:16,110 --> 00:12:18,330
we have a number of different modules

285
00:12:18,330 --> 00:12:20,453
that are in different languages.

286
00:12:21,420 --> 00:12:23,760
Currently, basically Python, Node.js,

287
00:12:23,760 --> 00:12:25,340
but it doesn't really matter.

288
00:12:25,340 --> 00:12:28,333
So, essentially,

289
00:12:29,710 --> 00:12:34,710
this framework can drive
not just the implementation

290
00:12:35,250 --> 00:12:36,940
that we are gonna show here today

291
00:12:36,940 --> 00:12:41,220
of the weaponized reader and the ESPKey

292
00:12:41,220 --> 00:12:44,020
but any type of thing that
can produce a credential,

293
00:12:44,020 --> 00:12:47,540
data that you can then
write to another credential,

294
00:12:47,540 --> 00:12:50,330
you could add modules to this framework.

295
00:12:50,330 --> 00:12:55,330
So it also gets better with
hats (chuckles) and haptics.

296
00:12:55,570 --> 00:12:58,123
So for that field usage,

297
00:12:59,370 --> 00:13:02,140
being able to see the
credentials that you've captured,

298
00:13:02,140 --> 00:13:03,470
select a specific one.

299
00:13:03,470 --> 00:13:05,600
Specifically, if one was
better for you than another,

300
00:13:05,600 --> 00:13:06,877
you can go and select that credential

301
00:13:06,877 --> 00:13:08,920
and it will rewrite that

302
00:13:08,920 --> 00:13:13,750
to the tag that's on your
waistband or on a lanyard

303
00:13:14,592 --> 00:13:16,570
'cause the Proxmark
will be battery powered

304
00:13:16,570 --> 00:13:20,550
on a class behind the tag.

305
00:13:20,550 --> 00:13:23,570
And then using a haptic feedback device,

306
00:13:23,570 --> 00:13:25,460
which we have pictured here,

307
00:13:25,460 --> 00:13:26,530
will indicate to you

308
00:13:26,530 --> 00:13:29,593
that you have captured
or cloned a credential.

309
00:13:30,480 --> 00:13:32,100
And with that being said,

310
00:13:32,100 --> 00:13:35,340
I'd like to do a quick demo.

311
00:13:35,340 --> 00:13:37,660
So let me switch down
to my top-down camera

312
00:13:38,700 --> 00:13:41,820
and do the big version here.

313
00:13:41,820 --> 00:13:46,400
So you'll see that I have a Proxmark3

314
00:13:46,400 --> 00:13:48,350
powered by its battery.

315
00:13:48,350 --> 00:13:49,490
Blue light is on

316
00:13:49,490 --> 00:13:52,700
'cause it's connected to the
Raspberry Pi Zero W over there.

317
00:13:52,700 --> 00:13:55,070
Our haptic feedback
device is here in a case

318
00:13:55,070 --> 00:13:58,290
so it doesn't go haywire on us.

319
00:13:58,290 --> 00:14:00,100
This is our target credential

320
00:14:00,100 --> 00:14:02,550
and then this here, I'm
showing it in front of me,

321
00:14:02,550 --> 00:14:04,073
is the source credential.

322
00:14:05,020 --> 00:14:06,820
Source and target credential technology

323
00:14:06,820 --> 00:14:08,030
doesn't really matter

324
00:14:08,030 --> 00:14:09,750
'cause we're taking that Wiegand value

325
00:14:09,750 --> 00:14:12,170
and encoding that onto
a target credential.

326
00:14:12,170 --> 00:14:14,750
So I have a weaponized
reader here off-frame.

327
00:14:14,750 --> 00:14:16,740
I'm gonna scan this credential.

328
00:14:16,740 --> 00:14:19,990
We will see a new item
appear on the screen

329
00:14:19,990 --> 00:14:22,450
and the haptic device (chuckles) indicates

330
00:14:22,450 --> 00:14:24,200
that it has seen a credential.

331
00:14:24,200 --> 00:14:26,030
And then once that credential is written,

332
00:14:26,030 --> 00:14:28,170
which we see the blue light
blinking on the Proxmark,

333
00:14:28,170 --> 00:14:29,140
it vibrates again

334
00:14:29,140 --> 00:14:31,780
to indicate that the
credential has been written.

335
00:14:31,780 --> 00:14:36,763
So, yeah, that's pretty
much what we have with Odo.

336
00:14:38,020 --> 00:14:43,020
The ways that you can
contribute and make one,

337
00:14:43,740 --> 00:14:46,950
we have a GitHub open source repo

338
00:14:46,950 --> 00:14:49,223
with the framework and
our initial modules.

339
00:14:50,380 --> 00:14:53,320
Raspberry Pi Zero Ws are
cheap and readily available.

340
00:14:53,320 --> 00:14:55,190
The PiSugar that we chose to use here

341
00:14:55,190 --> 00:14:58,670
is a great way to battery
power the Pi in the field

342
00:14:58,670 --> 00:15:03,223
and the LCD module is helpful
for that local interface.

343
00:15:04,060 --> 00:15:08,340
And there are a number of different ways

344
00:15:08,340 --> 00:15:11,170
that this could be extended
pretty much immediately

345
00:15:11,170 --> 00:15:14,850
with other credential
producers and consumers,

346
00:15:14,850 --> 00:15:16,890
new feedback mechanisms

347
00:15:16,890 --> 00:15:21,200
and leveraging some sort
of wearable smart watch

348
00:15:21,200 --> 00:15:24,370
or even haptic feedback vest,

349
00:15:24,370 --> 00:15:27,500
and just go wild

350
00:15:27,500 --> 00:15:31,570
with all the different possible
producers and consumers.

351
00:15:31,570 --> 00:15:33,440
So with that being said,

352
00:15:33,440 --> 00:15:36,220
I'd like to hand it back over to Babak

353
00:15:37,080 --> 00:15:39,833
with the evolution of PACS.

354
00:15:45,810 --> 00:15:46,643
You're muted.

355
00:15:47,868 --> 00:15:49,090
- (chuckles) Thank you.

356
00:15:49,090 --> 00:15:52,740
One of the things I really
enjoy about the Odo framework

357
00:15:52,740 --> 00:15:54,860
is that this now allows us a way

358
00:15:54,860 --> 00:15:58,640
to do, like, in-field,
live privilege escalation

359
00:15:58,640 --> 00:16:01,770
completely automated and touchless,

360
00:16:01,770 --> 00:16:05,690
and if you come to our live talk,

361
00:16:05,690 --> 00:16:07,950
you'll see what that looks like in action

362
00:16:07,950 --> 00:16:10,220
and it's really, really cool.

363
00:16:10,220 --> 00:16:11,550
Now, that's just one part

364
00:16:11,550 --> 00:16:13,490
of something that we
wanted to talk about today.

365
00:16:13,490 --> 00:16:15,710
Something else that's really interesting

366
00:16:15,710 --> 00:16:20,710
has to do with how evolution
takes place in access control.

367
00:16:20,950 --> 00:16:23,220
So what we're gonna talk about

368
00:16:23,220 --> 00:16:28,220
is what I'm calling the
physical security chain of trust

369
00:16:28,340 --> 00:16:30,670
and it really kind of underscores

370
00:16:30,670 --> 00:16:34,980
how discrete and rather independent

371
00:16:34,980 --> 00:16:36,720
a lot of these components are

372
00:16:36,720 --> 00:16:38,470
and the way that they're glued together

373
00:16:38,470 --> 00:16:42,260
really has nothing to do with
other components necessarily

374
00:16:42,260 --> 00:16:43,350
in the system.

375
00:16:43,350 --> 00:16:44,870
So what I mean by that

376
00:16:44,870 --> 00:16:48,030
is, for example, let's take
a look at an old, old system

377
00:16:48,030 --> 00:16:51,600
that's running Wiegand
wire and a Wiegand reader.

378
00:16:51,600 --> 00:16:54,730
When this system first
came out, it was very good.

379
00:16:54,730 --> 00:16:56,180
It was the newest technology,

380
00:16:56,180 --> 00:16:58,170
very difficult to clone and manipulate.

381
00:16:58,170 --> 00:16:59,380
But systems age.

382
00:16:59,380 --> 00:17:02,890
So as they age, the chain
of trust ages as well,

383
00:17:02,890 --> 00:17:05,430
and because of budget constraints,

384
00:17:05,430 --> 00:17:07,480
you don't really rip and
replace the whole thing.

385
00:17:07,480 --> 00:17:11,690
You replace specific links
in the chain selectively.

386
00:17:11,690 --> 00:17:13,799
So maybe a new technology comes out,

387
00:17:13,799 --> 00:17:16,277
prox hits the market and you're like,

388
00:17:16,277 --> 00:17:19,530
"Oh, man, I'm so tired of swiping cards.

389
00:17:19,530 --> 00:17:21,700
I just wanna use a prox card

390
00:17:21,700 --> 00:17:23,100
so I can just go boop

391
00:17:23,100 --> 00:17:25,390
and, you know, get
through the door," right?

392
00:17:25,390 --> 00:17:27,340
So we replaced just those links

393
00:17:27,340 --> 00:17:29,770
but they had to be backwards compatible

394
00:17:29,770 --> 00:17:32,530
because that's the only way
that we can really afford

395
00:17:32,530 --> 00:17:34,350
to deploy a lot of this new technology

396
00:17:34,350 --> 00:17:36,320
in massive scale sometimes.

397
00:17:36,320 --> 00:17:37,230
So what that means

398
00:17:37,230 --> 00:17:40,850
is only parts of those links are replaced.

399
00:17:40,850 --> 00:17:44,050
So then the chain of trust continues aging

400
00:17:44,050 --> 00:17:46,930
and we have different components replaced.

401
00:17:46,930 --> 00:17:49,500
We again upgrade our cards and readers.

402
00:17:49,500 --> 00:17:52,900
This time we might also
upgrade our door controllers

403
00:17:52,900 --> 00:17:55,040
and server-side software

404
00:17:55,040 --> 00:17:57,690
because maybe we want some
of those new functions,

405
00:17:57,690 --> 00:18:00,050
some new capabilities, more memory,

406
00:18:00,050 --> 00:18:02,660
you know, faster, all of the things.

407
00:18:02,660 --> 00:18:07,660
But it's not necessarily, again,
addressing the whole thing.

408
00:18:07,760 --> 00:18:08,660
So you might notice

409
00:18:08,660 --> 00:18:10,920
there's one particular link in this chain

410
00:18:10,920 --> 00:18:13,950
that keeps aging more and more and more

411
00:18:13,950 --> 00:18:17,610
and so now by the time that
we are in biometrics territory

412
00:18:17,610 --> 00:18:20,410
and people have, you know,
facial recognition this

413
00:18:20,410 --> 00:18:22,750
and iris scanning that,

414
00:18:22,750 --> 00:18:27,490
a lot of systems, historically,
were still using Wiegand.

415
00:18:27,490 --> 00:18:30,080
That's this really old
link in the chain here.

416
00:18:30,080 --> 00:18:32,410
So considering that your chain

417
00:18:32,410 --> 00:18:34,600
is only as strong as the weakest link,

418
00:18:34,600 --> 00:18:36,590
that is of concern, right?

419
00:18:36,590 --> 00:18:38,740
So recently over the past couple years,

420
00:18:38,740 --> 00:18:42,840
this has begun to be
taken care of with OSDP.

421
00:18:42,840 --> 00:18:44,540
It's something that we talk about more

422
00:18:44,540 --> 00:18:46,940
in some of our other talks
and in our trainings,

423
00:18:46,940 --> 00:18:49,098
but it is the replacement for Wiegand.

424
00:18:49,098 --> 00:18:49,931
It's the replacement for that weak link

425
00:18:51,290 --> 00:18:53,510
and it offers a lot of new functionality

426
00:18:53,510 --> 00:18:57,810
in the form of bidirectional
communication and encryption

427
00:18:57,810 --> 00:18:59,880
that really kind of help improve

428
00:18:59,880 --> 00:19:03,910
the overall security of the
whole physical security chain.

429
00:19:03,910 --> 00:19:07,850
However, security alone is
not enough for the industry

430
00:19:07,850 --> 00:19:09,410
and for a lot of customers.

431
00:19:09,410 --> 00:19:12,520
We keep wanting more
and more functionality.

432
00:19:12,520 --> 00:19:14,060
So even though we've now had

433
00:19:14,060 --> 00:19:16,360
this new tool here for this chain,

434
00:19:16,360 --> 00:19:19,180
the development elsewhere has not stopped.

435
00:19:19,180 --> 00:19:22,570
Now the new hotness is mobile credentials.

436
00:19:22,570 --> 00:19:27,200
So mobile credentials are the
new black in access control.

437
00:19:27,200 --> 00:19:29,780
They can come in a lot of
different shapes and sizes,

438
00:19:29,780 --> 00:19:33,930
but, ultimately, if we have
to work with smartphones,

439
00:19:33,930 --> 00:19:36,040
we only have a few different interfaces

440
00:19:36,040 --> 00:19:36,930
that we can work with.

441
00:19:36,930 --> 00:19:39,920
Ideally, we would want to use NFC

442
00:19:39,920 --> 00:19:41,330
with the credential data stored

443
00:19:41,330 --> 00:19:43,160
in a secure element on the phone,

444
00:19:43,160 --> 00:19:44,940
but not all phones have NFC.

445
00:19:44,940 --> 00:19:47,930
Only the more higher end,
more modern phones have that.

446
00:19:47,930 --> 00:19:50,440
And even of the phones that do,

447
00:19:50,440 --> 00:19:54,640
not all phones provide a
proper API that you can use.

448
00:19:54,640 --> 00:19:58,380
Apple, until very recently,
had iOS pretty locked down

449
00:19:58,380 --> 00:20:01,010
when it comes to anyone but Apple

450
00:20:01,010 --> 00:20:03,670
using that NFC interface on the phone.

451
00:20:03,670 --> 00:20:07,330
So a lot of vendors have resorted to BLE,

452
00:20:07,330 --> 00:20:09,080
or Bluetooth Low Energy,

453
00:20:09,080 --> 00:20:12,040
because almost all smartphones
have this technology.

454
00:20:12,040 --> 00:20:15,210
But unfortunately, BLE,
as a lot of you know,

455
00:20:15,210 --> 00:20:17,830
was not designed for this purpose.

456
00:20:17,830 --> 00:20:22,040
So how do we shove BLE
into these older readers

457
00:20:22,040 --> 00:20:25,290
that did not necessarily
have this technology?

458
00:20:25,290 --> 00:20:26,690
There's a couple of different ways

459
00:20:26,690 --> 00:20:28,300
that vendors have done this.

460
00:20:28,300 --> 00:20:29,840
There's in-line adapters

461
00:20:29,840 --> 00:20:32,020
that you connect to the Wiegand line

462
00:20:32,020 --> 00:20:35,660
that are basically
Bluetooth-enabled ESPKeys

463
00:20:35,660 --> 00:20:37,100
that are not used for attacking

464
00:20:37,100 --> 00:20:39,000
but, rather, functionality.

465
00:20:39,000 --> 00:20:41,190
And then there's also stuff like this

466
00:20:41,190 --> 00:20:43,937
where, you know, one major vendor decided,

467
00:20:43,937 --> 00:20:46,440
"Hey, why don't we use the debug interface

468
00:20:46,440 --> 00:20:47,440
on the back of the reader

469
00:20:47,440 --> 00:20:49,740
that we made for
upgrading and programming,

470
00:20:49,740 --> 00:20:50,690
why don't we use that

471
00:20:50,690 --> 00:20:53,360
to add Bluetooth
functionality to the reader

472
00:20:53,360 --> 00:20:56,560
and now we can have this
beautiful new future

473
00:20:56,560 --> 00:21:00,110
where everything is, you
know, mobile enabled?"

474
00:21:00,110 --> 00:21:05,110
And now we have this phone-based
diagnostic capability,

475
00:21:05,910 --> 00:21:07,690
we can do firmware upgrades,

476
00:21:07,690 --> 00:21:10,680
and, most importantly, we
can reconfigure the reader.

477
00:21:10,680 --> 00:21:13,800
We can disable older technologies

478
00:21:13,800 --> 00:21:15,510
that, you know, we don't need anymore

479
00:21:15,510 --> 00:21:17,240
or that are insecure.

480
00:21:17,240 --> 00:21:19,483
So for this particular platform,

481
00:21:20,520 --> 00:21:23,630
what was used was an application
called Reader Manager.

482
00:21:23,630 --> 00:21:25,280
Reader Manager allows you

483
00:21:25,280 --> 00:21:27,300
to reconfigure the reader settings,

484
00:21:27,300 --> 00:21:29,890
what protocols it supports, et cetera.

485
00:21:29,890 --> 00:21:33,417
It scans for nearby
Bluetooth-enabled readers

486
00:21:33,417 --> 00:21:34,990
and it allows you to reconfigure it.

487
00:21:34,990 --> 00:21:36,780
So it allows you to change configuration,

488
00:21:36,780 --> 00:21:40,580
turn credentials on, turn credentials off.

489
00:21:40,580 --> 00:21:42,940
But if you're using Bluetooth,

490
00:21:42,940 --> 00:21:45,630
Bluetooth is not a short-range technology.

491
00:21:45,630 --> 00:21:47,500
It can cover quite a bit of distance.

492
00:21:47,500 --> 00:21:49,740
If you have a lot of readers,

493
00:21:49,740 --> 00:21:52,420
how do you know which
one you're reconfiguring?

494
00:21:52,420 --> 00:21:54,160
That is the question.

495
00:21:54,160 --> 00:21:57,010
So there are a couple of different ways

496
00:21:57,010 --> 00:21:59,790
that companies have dealt with this

497
00:21:59,790 --> 00:22:02,010
but what this particular company did,

498
00:22:02,010 --> 00:22:04,490
and we'll go ahead and see
if we can cut video here,

499
00:22:04,490 --> 00:22:05,620
there we go.

500
00:22:05,620 --> 00:22:10,220
So what we have here is a example reader

501
00:22:10,220 --> 00:22:13,410
and I just have a little
field detector card

502
00:22:13,410 --> 00:22:14,243
here in front of it.

503
00:22:14,243 --> 00:22:16,440
We're gonna talk about
that in a few slides.

504
00:22:16,440 --> 00:22:18,620
And it's kinda hard to see,

505
00:22:18,620 --> 00:22:22,100
so we're gonna adjust the brightness here.

506
00:22:22,100 --> 00:22:26,870
Let's see if we can see my
phone a little bit better.

507
00:22:26,870 --> 00:22:29,270
Not really, unfortunately.

508
00:22:29,270 --> 00:22:31,260
So one thing that it has,

509
00:22:31,260 --> 00:22:33,310
and it should pop up here shortly,

510
00:22:33,310 --> 00:22:34,970
is there is,

511
00:22:34,970 --> 00:22:35,823
there we go,

512
00:22:36,670 --> 00:22:39,640
so we could see all the
readers listed there

513
00:22:39,640 --> 00:22:41,190
and when I tap on a reader,

514
00:22:41,190 --> 00:22:44,060
I get this option to inspect or locate.

515
00:22:44,060 --> 00:22:45,940
So when I tap Locate

516
00:22:45,940 --> 00:22:50,740
what it will do is it
will make the LED flash

517
00:22:51,580 --> 00:22:52,730
and make the reader beep

518
00:22:52,730 --> 00:22:55,980
so I know which reader I'm
about to configure or touch.

519
00:22:55,980 --> 00:22:58,260
You might have also noticed
something else unusual

520
00:22:58,260 --> 00:22:59,190
that just happened,

521
00:22:59,190 --> 00:23:03,480
which is the LEDs on this
field detector card turned off.

522
00:23:03,480 --> 00:23:05,870
And we'll talk about in a
moment why that's a problem

523
00:23:05,870 --> 00:23:09,420
because while that reader field is off,

524
00:23:09,420 --> 00:23:12,893
we're not actually able
to scan and process media.

525
00:23:19,210 --> 00:23:21,233
So where does that leave us?

526
00:23:22,230 --> 00:23:24,370
We have that locate functionality

527
00:23:24,370 --> 00:23:28,160
to identify which readers
we're working with.

528
00:23:28,160 --> 00:23:30,860
There are some security
functions that we found

529
00:23:30,860 --> 00:23:32,303
that was built into this.

530
00:23:33,140 --> 00:23:36,360
The changes, sorry, the
functions were allowing you

531
00:23:36,360 --> 00:23:37,710
to make changes to the reader,

532
00:23:37,710 --> 00:23:39,660
or the inspection functions.

533
00:23:39,660 --> 00:23:40,493
These are functions

534
00:23:40,493 --> 00:23:43,100
that require some form of authentication.

535
00:23:43,100 --> 00:23:46,480
So the most common method that is used

536
00:23:46,480 --> 00:23:49,460
is you have to power cycle the reader

537
00:23:49,460 --> 00:23:51,540
to apply certain changes

538
00:23:51,540 --> 00:23:53,900
because we don't want people

539
00:23:53,900 --> 00:23:56,830
just turning credentials
on and off unexpectedly.

540
00:23:56,830 --> 00:23:59,200
So the reader only accepts

541
00:23:59,200 --> 00:24:02,250
certain administrative
configuration commands

542
00:24:02,250 --> 00:24:05,390
for a very short period after power on.

543
00:24:05,390 --> 00:24:07,800
But that by itself may not be enough

544
00:24:07,800 --> 00:24:09,440
for a lot of applications

545
00:24:09,440 --> 00:24:12,890
and this is where a lot of
customers can go an extra step

546
00:24:12,890 --> 00:24:17,890
and get a custom key or
elite key in certain systems.

547
00:24:17,990 --> 00:24:22,660
So custom keys basically add
an additional restriction

548
00:24:22,660 --> 00:24:24,390
in that not only do the credentials

549
00:24:24,390 --> 00:24:26,610
have to have that special key

550
00:24:26,610 --> 00:24:30,540
but also any phones that
need to recognize the reader

551
00:24:30,540 --> 00:24:33,900
also have to have a
special administrative key

552
00:24:33,900 --> 00:24:35,720
that is unique to that site.

553
00:24:35,720 --> 00:24:37,710
Now, what's interesting here

554
00:24:37,710 --> 00:24:40,660
is that some locate functions

555
00:24:40,660 --> 00:24:43,300
did not require any authentication,

556
00:24:43,300 --> 00:24:47,370
meaning we found that
you could locate a reader

557
00:24:47,370 --> 00:24:50,330
regardless of whether or
not it was a standard reader

558
00:24:50,330 --> 00:24:51,770
or an elite reader

559
00:24:51,770 --> 00:24:54,530
and because that locate function

560
00:24:54,530 --> 00:24:56,600
temporarily shuts off the field,

561
00:24:56,600 --> 00:24:58,113
that is of concern.

562
00:24:59,410 --> 00:25:04,140
So in regards to the Bluetooth,

563
00:25:04,140 --> 00:25:07,060
I'd like Anze to really
talk a little bit more

564
00:25:07,060 --> 00:25:08,760
about some of the things that we found

565
00:25:08,760 --> 00:25:11,143
once we took a closer look at this.

566
00:25:13,240 --> 00:25:14,176
- Thank you, Babak.

567
00:25:14,176 --> 00:25:19,176
So after further looking
at what is happening

568
00:25:19,540 --> 00:25:20,710
over Bluetooth Low Energy,

569
00:25:20,710 --> 00:25:22,730
we found out that all of the readers

570
00:25:22,730 --> 00:25:24,440
advertise a single service,

571
00:25:24,440 --> 00:25:27,030
all of them, of course,
with the same UUID.

572
00:25:27,030 --> 00:25:29,350
The service had a single notify

573
00:25:29,350 --> 00:25:31,830
and write without response characteristic.

574
00:25:31,830 --> 00:25:34,650
Upon subscription to that characteristic,

575
00:25:34,650 --> 00:25:36,550
the reader sent an initial message.

576
00:25:36,550 --> 00:25:40,550
If it didn't receive a reply
in a certain amount of time,

577
00:25:40,550 --> 00:25:43,400
the reader disconnected
automatically quite aggressively.

578
00:25:44,700 --> 00:25:45,980
So under the hood,

579
00:25:45,980 --> 00:25:48,930
we wanted to see what the
BLE conversation looked like

580
00:25:48,930 --> 00:25:51,960
and so we wanted to sniff that out.

581
00:25:51,960 --> 00:25:54,580
We got an nRF52 development kit,

582
00:25:54,580 --> 00:25:57,060
loaded nRF Sniffer for Bluetooth LE,

583
00:25:57,060 --> 00:25:58,410
located the device,

584
00:25:58,410 --> 00:26:00,290
saw what was exchanged,

585
00:26:00,290 --> 00:26:03,773
and got the messages as PCAP files.

586
00:26:04,820 --> 00:26:06,880
So in those PCAP files,

587
00:26:06,880 --> 00:26:10,060
we wanted to look at what a
BLE conversation looked like.

588
00:26:10,060 --> 00:26:13,970
We can see here that the
message looks quite similar

589
00:26:13,970 --> 00:26:16,800
to an ISO 7816 ADPU,

590
00:26:16,800 --> 00:26:21,130
which is also used in
other smart card protocols,

591
00:26:21,130 --> 00:26:24,783
most notably in credit card
processing or EMV cards.

592
00:26:25,760 --> 00:26:27,580
And to that, the phone replied

593
00:26:27,580 --> 00:26:31,533
that the AID the reader was
trying to select was not found.

594
00:26:32,780 --> 00:26:34,440
So you might be wondering now

595
00:26:34,440 --> 00:26:36,470
what is with all the readers

596
00:26:36,470 --> 00:26:39,723
that everyone has behind
them at this talk.

597
00:26:40,840 --> 00:26:43,560
And the readers have some blinking lights.

598
00:26:43,560 --> 00:26:47,443
So why are the lights blinking?

599
00:26:48,690 --> 00:26:51,110
The readers have field detector cards

600
00:26:51,110 --> 00:26:54,690
made by Proxgrind and RFID Research Group.

601
00:26:54,690 --> 00:26:59,390
The LEDs on them are powered
by the electromagnetic field

602
00:26:59,390 --> 00:27:02,040
emitted by the readers to make them blink.

603
00:27:02,040 --> 00:27:03,830
There are separate LED colors

604
00:27:03,830 --> 00:27:07,180
and separate antenna windings on the BCBs

605
00:27:07,180 --> 00:27:09,900
for low frequency and high frequency.

606
00:27:09,900 --> 00:27:11,625
So the red LED means

607
00:27:11,625 --> 00:27:15,490
that an LF or a 125 kilohertz
field has been detected

608
00:27:15,490 --> 00:27:19,530
and the white LED means
that a 13.56 megahertz

609
00:27:19,530 --> 00:27:23,283
or the HF field was detected.

610
00:27:25,210 --> 00:27:30,210
But because we all know
that PCAPS are boring,

611
00:27:30,280 --> 00:27:32,540
we of course went

612
00:27:32,540 --> 00:27:36,430
and implemented our first demo in Python

613
00:27:38,330 --> 00:27:40,840
and it was able to take down one device.

614
00:27:40,840 --> 00:27:44,950
We then rewrote it in Node.js,

615
00:27:44,950 --> 00:27:46,350
made it async,

616
00:27:46,350 --> 00:27:51,120
which allowed us to take down
about five readers at a time.

617
00:27:51,120 --> 00:27:54,710
But then we wanted to see
if we can go even further.

618
00:27:54,710 --> 00:27:58,100
We got ourself an nRF52 development kit,

619
00:27:58,100 --> 00:28:00,230
rewrote the whole thing in C,

620
00:28:00,230 --> 00:28:03,653
and were able to connect to
quite a bit more devices.

621
00:28:04,910 --> 00:28:08,490
But because we all know
that a development kit

622
00:28:08,490 --> 00:28:10,540
is something that you don't carry around,

623
00:28:10,540 --> 00:28:13,670
we then moved to a Pug.js,

624
00:28:13,670 --> 00:28:18,670
which is a nRF52832-based
development board

625
00:28:21,450 --> 00:28:23,370
with RGB LEDs, a button,

626
00:28:23,370 --> 00:28:27,290
and powered by a CR2032 coin cell battery.

627
00:28:27,290 --> 00:28:32,210
And now we will have
a demo of what happens

628
00:28:32,210 --> 00:28:33,860
when we start sending that

629
00:28:33,860 --> 00:28:36,020
to all the readers in our vicinity.

630
00:28:36,020 --> 00:28:37,830
So I would ask everyone here

631
00:28:37,830 --> 00:28:41,323
to please turn on your dongles.

632
00:28:43,930 --> 00:28:45,853
- And we'll go ahead and activate.

633
00:28:49,450 --> 00:28:51,210
And what the code is going to do

634
00:28:51,210 --> 00:28:56,210
is automatically look for
any available readers nearby

635
00:28:56,740 --> 00:29:00,120
and, one by one, add them
to the list of readers

636
00:29:00,120 --> 00:29:03,700
that we send a barrage

637
00:29:03,700 --> 00:29:07,000
of locate commands to.

638
00:29:07,000 --> 00:29:10,390
And now you can see almost all the readers

639
00:29:10,390 --> 00:29:11,480
except for that one guy,

640
00:29:11,480 --> 00:29:13,020
don't worry about that one guy,

641
00:29:13,020 --> 00:29:14,850
had the fields shut off.

642
00:29:14,850 --> 00:29:16,140
And in that state,

643
00:29:16,140 --> 00:29:18,040
they are unable to process media,

644
00:29:18,040 --> 00:29:22,610
meaning no cards will be able
to be read by that reader.

645
00:29:22,610 --> 00:29:25,993
So you just had a physical
denial-of-service event.

646
00:29:30,700 --> 00:29:35,700
- And now I would like
to give my word to Eric.

647
00:29:39,570 --> 00:29:42,860
- Yes, so as Babak mentioned before,

648
00:29:42,860 --> 00:29:45,580
these field detectors,
they stopped blinking.

649
00:29:45,580 --> 00:29:46,413
What does it mean?

650
00:29:46,413 --> 00:29:48,680
It means there is no EM field.

651
00:29:48,680 --> 00:29:51,280
That means it doesn't matter
if you present anything to it.

652
00:29:51,280 --> 00:29:55,170
These are basically just like
dead plastic at this point.

653
00:29:55,170 --> 00:30:00,170
And so that is very bad for all of this,

654
00:30:00,570 --> 00:30:02,980
sorry, that's the sort of
field detector part of it.

655
00:30:02,980 --> 00:30:06,383
And we got to thinking,
what else has an nRF52?

656
00:30:07,326 --> 00:30:09,280
And for anybody that's
been around at DEF CON

657
00:30:09,280 --> 00:30:10,113
the previous couple of days,

658
00:30:10,113 --> 00:30:12,386
they may have watched a talk about this.

659
00:30:12,386 --> 00:30:14,818
You know what else has an nRF52?

660
00:30:14,818 --> 00:30:16,890
A motherfucking AirTag.

661
00:30:16,890 --> 00:30:19,020
So we put our firmware on an AirTag.

662
00:30:19,020 --> 00:30:20,940
So here's me putting in the battery.

663
00:30:20,940 --> 00:30:24,410
Gonna go ahead and slide that closed.

664
00:30:24,410 --> 00:30:25,500
Flip over to this

665
00:30:25,500 --> 00:30:30,500
and y'all can see it has
also knocked out the readers.

666
00:30:32,310 --> 00:30:33,143
Except for that one.

667
00:30:33,143 --> 00:30:34,320
Nope, no, got that one too.

668
00:30:40,368 --> 00:30:44,140
And so now I'll hand it back to Anze.

669
00:30:47,870 --> 00:30:48,703
- Thank you.

670
00:30:48,703 --> 00:30:50,970
So we wanted to really bring it home,

671
00:30:50,970 --> 00:30:55,890
and remember the backpack
that added BLE to our readers?

672
00:30:55,890 --> 00:30:58,590
Well, we found out that that BLE

673
00:30:58,590 --> 00:31:01,820
is also powered by an NRF-based chip

674
00:31:01,820 --> 00:31:03,810
for Bluetooth Low Energy

675
00:31:03,810 --> 00:31:06,750
and we asked ourself if
we can also reprogram that

676
00:31:06,750 --> 00:31:10,610
and we found out that it
is possible to reprogram it

677
00:31:10,610 --> 00:31:12,350
the same way as an AirTag.

678
00:31:12,350 --> 00:31:17,350
So with that, we were able
to take down eight readers

679
00:31:18,350 --> 00:31:20,943
in the vicinity of the
backpack being powered.

680
00:31:22,373 --> 00:31:23,430
And then, of course,

681
00:31:23,430 --> 00:31:26,950
because nRF52 is such
a widespread chipset,

682
00:31:26,950 --> 00:31:31,610
we then asked ourself what else we can use

683
00:31:31,610 --> 00:31:34,750
as an emitter for the attack

684
00:31:34,750 --> 00:31:36,950
and we came to,

685
00:31:36,950 --> 00:31:39,530
we found out that there's a COVID test

686
00:31:39,530 --> 00:31:41,300
that has an nRF52 in it,

687
00:31:41,300 --> 00:31:43,780
there's some development devices,

688
00:31:43,780 --> 00:31:45,310
personal pleasure devices,

689
00:31:45,310 --> 00:31:49,430
and the universe of nRF52
is pretty much endless.

690
00:31:49,430 --> 00:31:52,880
And now I would like to give it to Babak

691
00:31:52,880 --> 00:31:54,293
for some closing words.

692
00:31:55,710 --> 00:31:58,020
- So what does this all mean, right?

693
00:31:58,020 --> 00:32:00,120
What's the real practical impact

694
00:32:00,120 --> 00:32:02,093
other than just annoying some people?

695
00:32:03,010 --> 00:32:04,900
That depends on the situation.

696
00:32:04,900 --> 00:32:06,750
So we've evaluated

697
00:32:06,750 --> 00:32:09,800
a number of different customer deployments

698
00:32:09,800 --> 00:32:11,270
and different use cases

699
00:32:11,270 --> 00:32:15,160
where these readers and Bluetooth
backpacks have been used

700
00:32:15,160 --> 00:32:19,710
and what we're looking
at is really dependent

701
00:32:19,710 --> 00:32:21,720
on what the attacker wants to do.

702
00:32:21,720 --> 00:32:24,670
So we can do either a very high selective

703
00:32:24,670 --> 00:32:28,170
or a very area-wide
denial-of-service attack.

704
00:32:28,170 --> 00:32:30,700
So we can identify specific readers

705
00:32:30,700 --> 00:32:32,540
and attack just specific readers

706
00:32:32,540 --> 00:32:36,300
or we can deny access to an entire area.

707
00:32:36,300 --> 00:32:37,600
And in the field,

708
00:32:37,600 --> 00:32:39,240
in practice, what this means

709
00:32:39,240 --> 00:32:42,440
is that there are sensitive
egress and ingress points

710
00:32:42,440 --> 00:32:47,240
that we can then prevent
people from using unexpectedly

711
00:32:47,240 --> 00:32:50,540
and without any indication
as to why or what's going on.

712
00:32:50,540 --> 00:32:54,350
So turnstiles, especially locations

713
00:32:54,350 --> 00:32:59,350
that have a required, you know,
badge in, badge out systems

714
00:32:59,710 --> 00:33:01,800
for mustering purposes,

715
00:33:01,800 --> 00:33:04,480
security vestibules and mantraps,

716
00:33:04,480 --> 00:33:06,850
you could create some problems

717
00:33:06,850 --> 00:33:11,260
by preventing those readers
from working properly.

718
00:33:11,260 --> 00:33:13,850
So, you know, if you
disabled the RFID readers

719
00:33:13,850 --> 00:33:16,570
and the turnstiles or
mantraps from working,

720
00:33:16,570 --> 00:33:20,040
then you might be able
to create artificially

721
00:33:20,040 --> 00:33:22,400
a situation where you'd
more easily be able

722
00:33:22,400 --> 00:33:25,250
to social engineer your
way into the building

723
00:33:25,250 --> 00:33:28,080
because if none of the
employees can use their cards

724
00:33:28,080 --> 00:33:30,460
and, you know, business has to go on,

725
00:33:30,460 --> 00:33:31,330
they might revert

726
00:33:31,330 --> 00:33:34,320
to just visual confirmation
or identification

727
00:33:34,320 --> 00:33:36,130
via the printed badge.

728
00:33:36,130 --> 00:33:37,830
Or any other special areas,

729
00:33:37,830 --> 00:33:41,340
security operation centers,
equipment rooms, et cetera.

730
00:33:41,340 --> 00:33:42,860
On the lighter side,

731
00:33:42,860 --> 00:33:45,500
yeah, you could, you know,
just use the beeping function

732
00:33:45,500 --> 00:33:48,490
to annoy the heck out of some employees

733
00:33:48,490 --> 00:33:50,560
by beeping all the readers.

734
00:33:50,560 --> 00:33:53,220
Or a attacker may choose

735
00:33:53,220 --> 00:33:58,220
to use the denial of service
post-entry to evade security.

736
00:33:58,250 --> 00:34:02,460
So after you successfully
work your way through a door

737
00:34:02,460 --> 00:34:03,440
by whatever means,

738
00:34:03,440 --> 00:34:06,710
whether it's lock picking,
bypass, or card cloning,

739
00:34:06,710 --> 00:34:11,240
you might choose to disable
the reader temporarily

740
00:34:11,240 --> 00:34:14,470
so that even if someone
does try to come after

741
00:34:14,470 --> 00:34:17,990
and inspect what's going on or engage you

742
00:34:17,990 --> 00:34:20,470
that they will have increased difficulty

743
00:34:20,470 --> 00:34:22,630
in actually getting to your location.

744
00:34:22,630 --> 00:34:26,500
And the final really interesting
thing that we came up with,

745
00:34:26,500 --> 00:34:28,480
especially after Eric figured out

746
00:34:28,480 --> 00:34:30,253
how to reprogram an AirTag,

747
00:34:31,270 --> 00:34:32,800
is ghost mode

748
00:34:32,800 --> 00:34:36,050
where we can program a
device like an AirTag

749
00:34:36,050 --> 00:34:40,280
to scan for and only jam

750
00:34:40,280 --> 00:34:42,870
or, rather, you know, do
the denial-of-service attack

751
00:34:42,870 --> 00:34:46,110
against the first one or two readers

752
00:34:46,110 --> 00:34:47,890
that have the strongest signal

753
00:34:47,890 --> 00:34:48,990
and what this would do

754
00:34:48,990 --> 00:34:51,840
is it would create the unusual situation

755
00:34:51,840 --> 00:34:55,910
where if you place this
AirTag in someone's bag,

756
00:34:55,910 --> 00:34:59,270
any reader that they approach
will suddenly stop working

757
00:34:59,270 --> 00:35:00,940
and by the time they get to the reader

758
00:35:00,940 --> 00:35:02,810
and try to present their card,

759
00:35:02,810 --> 00:35:05,330
the reader won't actually read the card

760
00:35:05,330 --> 00:35:06,970
and so they'll be like a ghost.

761
00:35:06,970 --> 00:35:09,593
They become invisible to card readers.

762
00:35:10,610 --> 00:35:12,940
So for some customers, this is a big deal.

763
00:35:12,940 --> 00:35:16,540
For others who may not have
these particular modules

764
00:35:16,540 --> 00:35:18,660
or Bluetooth-enabled
readers installed yet,

765
00:35:18,660 --> 00:35:20,660
it may not be a big deal.

766
00:35:20,660 --> 00:35:25,070
However, we have been in
contact with the vendor

767
00:35:25,070 --> 00:35:27,760
in working with some solutions.

768
00:35:27,760 --> 00:35:30,930
So the vendor in question,

769
00:35:30,930 --> 00:35:32,910
which in this case is HID,

770
00:35:32,910 --> 00:35:34,520
is aware of the problem.

771
00:35:34,520 --> 00:35:36,830
They are working on some firmware updates

772
00:35:36,830 --> 00:35:39,000
that will mitigate or minimize the risk

773
00:35:39,000 --> 00:35:40,393
related to this issue.

774
00:35:41,470 --> 00:35:43,210
It will be made available

775
00:35:43,210 --> 00:35:44,900
through their Reader Manager application

776
00:35:44,900 --> 00:35:49,830
so you can remotely go around
and update all these readers.

777
00:35:49,830 --> 00:35:51,550
Although, at the moment, it does require

778
00:35:51,550 --> 00:35:54,970
that you use that app physically
at each reader to do so.

779
00:35:54,970 --> 00:35:58,250
They're also working on
some methods in the future

780
00:35:58,250 --> 00:35:59,840
that are not available yet

781
00:35:59,840 --> 00:36:04,840
to allow for upgrading of
certain readers over OSDP

782
00:36:05,320 --> 00:36:07,240
as long as the right hardware fits.

783
00:36:07,240 --> 00:36:10,100
So that's not something
that is finalized yet,

784
00:36:10,100 --> 00:36:13,060
but will be available for
certain configurations.

785
00:36:13,060 --> 00:36:14,070
In the short term,

786
00:36:14,070 --> 00:36:15,770
there's a couple of options

787
00:36:15,770 --> 00:36:17,430
that we think may be possible

788
00:36:17,430 --> 00:36:21,410
depending on the use case
for different customers.

789
00:36:21,410 --> 00:36:24,450
We do recommend that if you
have to use mobile credentials,

790
00:36:24,450 --> 00:36:27,960
if you have to have these
Bluetooth-enabled readers

791
00:36:27,960 --> 00:36:28,950
in the field,

792
00:36:28,950 --> 00:36:31,230
that you do provide some
guidance and education

793
00:36:31,230 --> 00:36:33,490
to relevant security staff

794
00:36:33,490 --> 00:36:36,100
on how to respond to different situations

795
00:36:36,100 --> 00:36:39,950
if a bunch of readers stop
working correctly, for example.

796
00:36:39,950 --> 00:36:41,700
Some customers may decide

797
00:36:41,700 --> 00:36:45,140
to ask to have Bluetooth
functionality disabled.

798
00:36:45,140 --> 00:36:47,440
If you are one of these customers,

799
00:36:47,440 --> 00:36:49,170
we do recommend that you reach out

800
00:36:49,170 --> 00:36:51,670
to your HID account manager

801
00:36:51,670 --> 00:36:53,650
and ask for guidance.

802
00:36:53,650 --> 00:36:54,673
We may have update guidance

803
00:36:54,673 --> 00:36:57,060
that we can provide at the live talk

804
00:36:57,060 --> 00:36:58,380
but we don't have that yet,

805
00:36:58,380 --> 00:37:01,880
so we're staying nice
and general at this time.

806
00:37:01,880 --> 00:37:04,370
And finally, some customers

807
00:37:04,370 --> 00:37:06,020
that are not using mobile credentials

808
00:37:06,020 --> 00:37:08,590
but still require OSDP

809
00:37:08,590 --> 00:37:11,450
may be able to, under
certain circumstances,

810
00:37:11,450 --> 00:37:16,060
get OSDP-only backpacks
that, you know, don't have

811
00:37:16,060 --> 00:37:18,803
that additional Bluetooth
layer of functionality.

812
00:37:19,820 --> 00:37:21,700
But, ultimately, this is something

813
00:37:21,700 --> 00:37:24,110
that is really just kind of a byproduct

814
00:37:24,110 --> 00:37:26,890
of a lot of things kind of going wrong

815
00:37:26,890 --> 00:37:30,050
and adding up to a very
unexpected situation.

816
00:37:30,050 --> 00:37:31,840
So these are one of the reasons

817
00:37:31,840 --> 00:37:35,600
why a lot of us in the
hacker and security community

818
00:37:35,600 --> 00:37:37,790
get a little bit nervous

819
00:37:37,790 --> 00:37:39,900
when people start just adding Bluetooth

820
00:37:39,900 --> 00:37:41,443
to all of the things.

821
00:37:42,320 --> 00:37:44,990
So we'd really like to send out

822
00:37:44,990 --> 00:37:46,240
some thanks and acknowledgements

823
00:37:46,240 --> 00:37:48,920
to people who kind of really
supported us along the way.

824
00:37:48,920 --> 00:37:52,200
First of all, a huge thank-you to HID

825
00:37:52,200 --> 00:37:55,200
for listening and
responding to the problem.

826
00:37:55,200 --> 00:37:57,290
We know that this is not a problem

827
00:37:57,290 --> 00:37:58,880
that is unique to one vendor,

828
00:37:58,880 --> 00:38:00,963
but these kinds of mistakes can be made,

829
00:38:02,167 --> 00:38:04,730
you know, by a number of vendors.

830
00:38:04,730 --> 00:38:06,300
In this case, it happened to be them

831
00:38:06,300 --> 00:38:08,000
and they are working through it.

832
00:38:08,000 --> 00:38:09,650
Thank you to Iceman

833
00:38:09,650 --> 00:38:13,362
and all the other core
contributors and developers,

834
00:38:13,362 --> 00:38:15,120
you know, Philippe, or doegox,

835
00:38:15,120 --> 00:38:18,900
and everyone else who is
constantly contributing code

836
00:38:18,900 --> 00:38:22,460
to make the Proxmark3 even
better and more stable.

837
00:38:22,460 --> 00:38:25,920
All of our friends at the RF Village

838
00:38:25,920 --> 00:38:27,963
and RFID Hacking Discord.

839
00:38:29,042 --> 00:38:32,730
RFID Research Group and the iCopy-X team

840
00:38:32,730 --> 00:38:35,130
for donating some prizes

841
00:38:35,130 --> 00:38:38,310
that we'll be giving out
during our live talk.

842
00:38:38,310 --> 00:38:40,410
And, also, Gordon Williams

843
00:38:40,410 --> 00:38:41,910
for providing us some guidance

844
00:38:41,910 --> 00:38:43,830
on some of the Node.js stuff

845
00:38:43,830 --> 00:38:45,870
when Eric was working through that code

846
00:38:45,870 --> 00:38:47,620
on some of the things that we had to tweak

847
00:38:47,620 --> 00:38:49,683
to improve performance.

848
00:38:52,180 --> 00:38:57,060
So we also want to, all of
us, briefly say thank you,

849
00:38:57,060 --> 00:38:59,453
let me switch back to the quad view,

850
00:39:00,300 --> 00:39:04,880
and say thanks for
joining us, for listening.

851
00:39:04,880 --> 00:39:07,170
Thanks for kind of putting up

852
00:39:07,170 --> 00:39:09,560
with how fast we've been
trying to go through everything

853
00:39:09,560 --> 00:39:13,720
to try to fit it into the time
slot that was made available

854
00:39:14,920 --> 00:39:17,580
and hopefully you guys really enjoyed it.

855
00:39:17,580 --> 00:39:18,710
If you have more questions,

856
00:39:18,710 --> 00:39:19,610
as we know you will,

857
00:39:19,610 --> 00:39:21,570
feel free to reach out to us,

858
00:39:21,570 --> 00:39:25,028
talk to us in person or on
the RFID Hacking Discord.

859
00:39:25,028 --> 00:39:28,678
We hope that you take a
little bit closer look

860
00:39:28,678 --> 00:39:30,090
at some of the other Bluetooth solutions

861
00:39:30,090 --> 00:39:32,840
that are out there in
the access control world.

862
00:39:32,840 --> 00:39:34,920
And finally, if you're interested

863
00:39:34,920 --> 00:39:37,330
in really cutting your teeth,

864
00:39:37,330 --> 00:39:40,390
getting your feet wet, learning more,

865
00:39:40,390 --> 00:39:41,300
if you're a hobbyist,

866
00:39:41,300 --> 00:39:45,210
come check us out at the
RFID Hacking Discord.

867
00:39:45,210 --> 00:39:47,070
Link is right here in the slides.

868
00:39:47,070 --> 00:39:49,010
And if you're a working professional

869
00:39:49,010 --> 00:39:49,843
and you're interested

870
00:39:49,843 --> 00:39:51,950
in more hands-on training
and certification

871
00:39:51,950 --> 00:39:53,440
for physical security,

872
00:39:53,440 --> 00:39:56,160
come check out Red Team Alliance

873
00:39:56,160 --> 00:39:57,860
and see what we have to offer.

874
00:39:57,860 --> 00:40:00,230
Thank you very much again,

875
00:40:00,230 --> 00:40:02,543
and that's it, that's all we got.

