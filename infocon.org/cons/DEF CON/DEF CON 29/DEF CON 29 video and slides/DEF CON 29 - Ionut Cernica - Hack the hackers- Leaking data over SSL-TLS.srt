1
00:00:03,324 --> 00:00:05,170
- Hello everyone. My
name is Ionut Cernica,

2
00:00:05,170 --> 00:00:06,020
and I am presenting:

3
00:00:06,020 --> 00:00:09,063
Hack the hackers: Leaking
data over SSL/TLS.

4
00:00:10,060 --> 00:00:13,010
I will have a short introduction
about the blind injections.

5
00:00:13,010 --> 00:00:14,230
What is a blind injection?

6
00:00:14,230 --> 00:00:17,500
Then, problems that may
appear with blind injections.

7
00:00:17,500 --> 00:00:20,060
Scenario and challenges,
where you are exploiting

8
00:00:20,060 --> 00:00:21,910
the blind injection.

9
00:00:21,910 --> 00:00:24,500
Blind injection over SSL/TLS.

10
00:00:24,500 --> 00:00:26,360
Then, the demo time with sqlmap,

11
00:00:26,360 --> 00:00:29,270
the most used penetration testing tool,

12
00:00:29,270 --> 00:00:32,720
for when it comes to SQL injections.

13
00:00:32,720 --> 00:00:33,753
And, conclusion.

14
00:00:34,650 --> 00:00:36,250
Who am I? I am a security researcher

15
00:00:36,250 --> 00:00:38,860
for Future Networks 5G Lab.

16
00:00:38,860 --> 00:00:41,490
I was a PhD student, at department,

17
00:00:41,490 --> 00:00:45,300
Department of Computer Science,
Politehnica, Bucharest.

18
00:00:45,300 --> 00:00:48,853
CTF player, penetration
tester, entrepreneur.

19
00:00:49,870 --> 00:00:53,510
Actually, this research
was done, at my PhD,

20
00:00:53,510 --> 00:00:56,653
and I tried to innovate based
on this research, I tried to,

21
00:00:57,670 --> 00:01:01,720
to introduce a new layer of
security for web applications.

22
00:01:01,720 --> 00:01:05,633
And this was one of the
component of that layer.

23
00:01:06,670 --> 00:01:09,010
And, we run out of funds, (chuckles)

24
00:01:09,010 --> 00:01:13,140
and, it is on, we take a
break from the project.

25
00:01:13,140 --> 00:01:15,560
And a former bug bounty hunter.

26
00:01:15,560 --> 00:01:20,560
I used to, be involved in
many, bug bounty programs,

27
00:01:22,100 --> 00:01:25,420
Special thanks, for Pentest Tools.

28
00:01:25,420 --> 00:01:27,740
They have the best online
penetration testing platform,

29
00:01:27,740 --> 00:01:31,820
you should try it, they give
you a gift, two week trials,

30
00:01:31,820 --> 00:01:34,093
you will have to visit their website.

31
00:01:35,880 --> 00:01:38,960
I find them because, they
are financially supporting me

32
00:01:38,960 --> 00:01:42,143
for being in Vegas, and have
this presentation there.

33
00:01:43,200 --> 00:01:44,313
Blind injection.

34
00:01:45,190 --> 00:01:47,240
It is about when you are trying to,

35
00:01:47,240 --> 00:01:50,793
interrogate the server for true
and falses in order to take,

36
00:01:51,930 --> 00:01:55,890
one byte at a time, from
the information you target.

37
00:01:55,890 --> 00:02:00,190
This is done by Boolean
base, this technique is done,

38
00:02:00,190 --> 00:02:02,570
for Boolean, or time-based.

39
00:02:02,570 --> 00:02:05,990
And the most cases where you
all encounter this technique,

40
00:02:05,990 --> 00:02:07,730
will be at the SQL
injection vulnerabilities.

41
00:02:07,730 --> 00:02:10,713
So you may heard about blind injection,

42
00:02:11,710 --> 00:02:13,633
blind, blind SQL injection.

43
00:02:14,840 --> 00:02:15,673
The problem.

44
00:02:17,140 --> 00:02:18,040
We can distinguish the true and falses

45
00:02:18,040 --> 00:02:20,270
from the encrypted traffic,

46
00:02:20,270 --> 00:02:23,090
just looking on the
length of the responses.

47
00:02:23,090 --> 00:02:24,250
This is for the Boolean,

48
00:02:24,250 --> 00:02:28,430
and, just looking at the
delays between the packets,

49
00:02:28,430 --> 00:02:30,160
between the responses.

50
00:02:30,160 --> 00:02:31,853
And this is for time-based.

51
00:02:33,460 --> 00:02:35,950
Maybe it is not the problem, maybe it is.

52
00:02:35,950 --> 00:02:38,470
Let us see if this is the real problem.

53
00:02:38,470 --> 00:02:40,630
No, the real problem is something else.

54
00:02:40,630 --> 00:02:43,430
It is BILOST. BILOST, it
is a new hacking technique,

55
00:02:43,430 --> 00:02:44,810
a passive one.

56
00:02:44,810 --> 00:02:48,784
It refers to blind
injection leak over SSL/TLS.

57
00:02:48,784 --> 00:02:51,060
It is a passive attack, as I already said,

58
00:02:51,060 --> 00:02:53,790
no interaction with the
victim, with the hacker,

59
00:02:53,790 --> 00:02:56,870
which is, or penetration
tester, which is, extracting,

60
00:02:56,870 --> 00:02:59,450
extracting data from the server.

61
00:02:59,450 --> 00:03:03,780
And, this is because, blind
injection exploits are written

62
00:03:03,780 --> 00:03:05,230
in a predictable way.

63
00:03:05,230 --> 00:03:06,103
So.

64
00:03:07,290 --> 00:03:11,000
How is that? We have the
f, which is the method.

65
00:03:11,000 --> 00:03:15,920
Charset, binary search, you
will see in the next, slide.

66
00:03:15,920 --> 00:03:19,410
Then, we have the two types
of output, that we are taking,

67
00:03:19,410 --> 00:03:21,680
taking from the encrypted traffic.

68
00:03:21,680 --> 00:03:23,600
The two types of output, one is true,

69
00:03:23,600 --> 00:03:25,800
and the other one should be false.

70
00:03:25,800 --> 00:03:29,560
And the result, the n, which
is the input to the method,

71
00:03:29,560 --> 00:03:31,740
to the function, is the leak.

72
00:03:31,740 --> 00:03:36,740
If you can, suppose the method,
and the two types of output,

73
00:03:36,760 --> 00:03:39,050
you can find, it is a
feasible brute force.

74
00:03:39,050 --> 00:03:41,560
Then you can find the leak
by reversing the steps,

75
00:03:41,560 --> 00:03:45,173
it is an easy, it is very easy to do that.

76
00:03:46,430 --> 00:03:49,670
Known method, methods of
exploiting with blind technique.

77
00:03:49,670 --> 00:03:53,348
So these, these are the
methods, which we are,

78
00:03:53,348 --> 00:03:57,760
we should find, when we are
looking for blind injection,

79
00:03:57,760 --> 00:03:59,010
over SSL/TLS.

80
00:03:59,010 --> 00:04:01,997
The charset method, which
you have the letters

81
00:04:01,997 --> 00:04:04,780
and the digits, and you
are, starting to take

82
00:04:04,780 --> 00:04:06,560
the first letter, A, in this case,

83
00:04:06,560 --> 00:04:08,990
and interrogate the
server, is the first letter

84
00:04:08,990 --> 00:04:12,360
of the information A?
And maybe he said false.

85
00:04:12,360 --> 00:04:14,800
Then you go to B, you go to C.

86
00:04:14,800 --> 00:04:16,950
Until you will have a
true from the server.

87
00:04:16,950 --> 00:04:20,050
And the server say, yes, this
is the D letter from the,

88
00:04:20,050 --> 00:04:20,930
from the information.

89
00:04:20,930 --> 00:04:24,380
The first letter of the
information is D, good job,

90
00:04:24,380 --> 00:04:26,450
go to the second one, and so on.

91
00:04:26,450 --> 00:04:28,630
So you can reverse if you suppose that,

92
00:04:28,630 --> 00:04:32,110
the hacker, did this, the charset,

93
00:04:32,110 --> 00:04:34,170
and used A, B, C, D,

94
00:04:34,170 --> 00:04:35,260
0, 1,

95
00:04:35,260 --> 00:04:36,810
2, 3, or 0, 1,

96
00:04:36,810 --> 00:04:38,520
you do not have, this,
this is challenging,

97
00:04:38,520 --> 00:04:42,430
you will see, in the next slides.

98
00:04:42,430 --> 00:04:43,630
But,

99
00:04:43,630 --> 00:04:46,100
this is the way how this work,

100
00:04:46,100 --> 00:04:47,590
because,

101
00:04:47,590 --> 00:04:52,180
because, most of the hackers
use this in their scripts.

102
00:04:52,180 --> 00:04:53,700
The binary search,

103
00:04:53,700 --> 00:04:57,560
we can use also as, exploiting the,

104
00:04:57,560 --> 00:05:00,360
as a method for exploiting
the blind technique.

105
00:05:00,360 --> 00:05:04,190
The binary search, which,
which is, an optimized way

106
00:05:04,190 --> 00:05:07,380
to extract data from
the servers, the sqlmap,

107
00:05:07,380 --> 00:05:09,170
with, is doing this.

108
00:05:09,170 --> 00:05:11,950
And, it is an improved
way of the binary search,

109
00:05:11,950 --> 00:05:14,933
because he is not on the whole
axis, he is starting with,

110
00:05:16,389 --> 00:05:19,110
with the, printable characters,

111
00:05:19,110 --> 00:05:22,423
and is starting with the
letters, then, it has some,

112
00:05:23,930 --> 00:05:27,380
some changes on the
binary, its binary search.

113
00:05:27,380 --> 00:05:30,510
And, we will have a demo with
the sqlmap, and you will,

114
00:05:30,510 --> 00:05:33,820
you will see that, it is very
easy to reverse the steps.

115
00:05:33,820 --> 00:05:36,540
And, the bit shifting,
again, it is not so common,

116
00:05:36,540 --> 00:05:39,020
but it is a method, a known method.

117
00:05:39,020 --> 00:05:43,000
And, I encounter it in
that tool, which are,

118
00:05:43,000 --> 00:05:47,623
it was doing the, it was
doing the SQL injection.

119
00:05:48,920 --> 00:05:50,870
Challenges with the extraction methods.

120
00:05:51,880 --> 00:05:54,060
No challenges, when we are dealing

121
00:05:54,060 --> 00:05:55,550
with optimization techniques,

122
00:05:55,550 --> 00:05:57,430
like binary search or bit shifting,

123
00:05:57,430 --> 00:06:00,310
because we already know the
code, how, how they are doing,

124
00:06:00,310 --> 00:06:02,450
and it is easy to reverse the steps,

125
00:06:02,450 --> 00:06:05,060
but we are, we are having some challenges

126
00:06:05,060 --> 00:06:08,060
when it came about, charset method,

127
00:06:08,060 --> 00:06:10,870
because, here it was
the biggest challenge.

128
00:06:10,870 --> 00:06:12,813
Okay, biggest challenge.

129
00:06:15,310 --> 00:06:18,070
Yes, it was the biggest
challenge, it was, because,

130
00:06:18,070 --> 00:06:21,070
we do not know where,
are the letters, if they,

131
00:06:21,070 --> 00:06:23,870
the hacker, started with the
letters, then the digits,

132
00:06:23,870 --> 00:06:26,073
or his charset is,

133
00:06:26,073 --> 00:06:29,030
his charset starts with digits,

134
00:06:29,030 --> 00:06:30,410
then the letters.

135
00:06:30,410 --> 00:06:34,120
And, you should brute
force this, their position,

136
00:06:34,120 --> 00:06:38,200
by rotating the output,
and looking on the output,

137
00:06:38,200 --> 00:06:41,509
make a text recognition, or
something like this, to see the,

138
00:06:41,509 --> 00:06:43,813
to extract the data base.

139
00:06:46,010 --> 00:06:49,700
Exploit, how will you
exploit these over SSL/TLS,

140
00:06:49,700 --> 00:06:52,560
over this protocol, it
is an important one.

141
00:06:52,560 --> 00:06:54,540
We have the length of the packets,

142
00:06:54,540 --> 00:06:56,930
we are using the length of
the packets for Boolean based.

143
00:06:56,930 --> 00:06:59,260
And we are, we are using the time,

144
00:06:59,260 --> 00:07:02,550
the delays between the
packets, to find the trues,

145
00:07:02,550 --> 00:07:04,949
true, from the server, when its,

146
00:07:04,949 --> 00:07:07,003
when it comes the time based.

147
00:07:08,440 --> 00:07:10,740
In some cipher, there
is a padding involved.

148
00:07:10,740 --> 00:07:14,250
So, we still exploit this problem because,

149
00:07:14,250 --> 00:07:18,020
that would work if the block,
if the block size, it is,

150
00:07:18,020 --> 00:07:21,460
is smaller than the difference
between true and falses.

151
00:07:21,460 --> 00:07:25,880
So, true and falses will be
differentiated by a huge,

152
00:07:25,880 --> 00:07:27,527
length.

153
00:07:27,527 --> 00:07:28,770
And, as a disclaimer,

154
00:07:28,770 --> 00:07:32,200
it is not a problem with SSL/TLS protocol.

155
00:07:32,200 --> 00:07:35,053
The problem is in the way we are written,

156
00:07:36,000 --> 00:07:38,693
the exploits, to exploit
this type of attack.

157
00:07:41,060 --> 00:07:42,340
Scenarios of exploiting,

158
00:07:42,340 --> 00:07:44,300
we have the penetration testing company,

159
00:07:44,300 --> 00:07:46,640
which is doing a penetration, test.

160
00:07:46,640 --> 00:07:47,473
And,

161
00:07:48,600 --> 00:07:51,163
our pen tester is extracting with sqlmap,

162
00:07:52,040 --> 00:07:56,170
the database from, a
vulnerable web application.

163
00:07:56,170 --> 00:07:57,003
And,

164
00:07:57,940 --> 00:07:59,180
can be a huge problem,

165
00:07:59,180 --> 00:08:01,300
because someone with
the encrypted traffic,

166
00:08:01,300 --> 00:08:04,950
from his company or, some, or
the internet service provider,

167
00:08:04,950 --> 00:08:07,250
because this is the second scenario,

168
00:08:07,250 --> 00:08:10,810
can look at his traffic,
and take, reverse the steps,

169
00:08:10,810 --> 00:08:14,450
and take the same database as
the penetration tester did.

170
00:08:14,450 --> 00:08:17,510
This will be included, this
scenario will be in our demo.

171
00:08:17,510 --> 00:08:19,750
You will see later.

172
00:08:19,750 --> 00:08:22,730
Our internet service provider,
which has all the traffic,

173
00:08:22,730 --> 00:08:25,650
and, he can start digging for information,

174
00:08:25,650 --> 00:08:29,180
start digging for database
where, our script kiddies,

175
00:08:29,180 --> 00:08:32,183
or, even professional hackers, or,

176
00:08:33,180 --> 00:08:34,660
penetration testers,

177
00:08:34,660 --> 00:08:37,900
are trying to, exploit to databases,

178
00:08:37,900 --> 00:08:40,190
and our internet service provider,

179
00:08:40,190 --> 00:08:42,350
can take the same database.

180
00:08:42,350 --> 00:08:44,700
And, the third one, maybe one more reason

181
00:08:44,700 --> 00:08:46,830
why large countries have
a strategic interest

182
00:08:46,830 --> 00:08:49,240
to pass the traffic of another country

183
00:08:49,240 --> 00:08:51,280
to their infrastructure.

184
00:08:51,280 --> 00:08:54,430
Maybe, could be a reason,
I do not know. (chuckles)

185
00:08:54,430 --> 00:08:56,240
Over Tor. Future work.

186
00:08:56,240 --> 00:08:59,510
I was thinking of Tor, but
I do not have exit nodes,

187
00:08:59,510 --> 00:09:02,463
but, if you have exit nodes, maybe,

188
00:09:03,450 --> 00:09:04,840
be a challenging,

189
00:09:04,840 --> 00:09:08,410
it is challenging to, to see
what happened there, and,

190
00:09:08,410 --> 00:09:12,170
if a script kiddie, or a
penetration, or a hacker,

191
00:09:12,170 --> 00:09:16,600
a professional one, will, dump
some database in the wild,

192
00:09:16,600 --> 00:09:19,920
and, you should be aware
of the cell padding.

193
00:09:19,920 --> 00:09:24,210
And if you are lucky enough,
that your true and falses are,

194
00:09:24,210 --> 00:09:26,280
bigger than the,

195
00:09:26,280 --> 00:09:29,730
cell size of the padding, in Tor,

196
00:09:29,730 --> 00:09:33,400
then the block size, needs
to, it is more of than that,

197
00:09:33,400 --> 00:09:35,377
difference between true and falses, then,

198
00:09:35,377 --> 00:09:38,723
you are lucky, and it can
recuperate the information,

199
00:09:39,950 --> 00:09:41,793
exactly like the hacker did.

200
00:09:43,481 --> 00:09:46,080
Tools and exploits, database.

201
00:09:46,080 --> 00:09:47,310
We,

202
00:09:47,310 --> 00:09:51,160
try to analyze some tools.
We, we analyze some tools.

203
00:09:51,160 --> 00:09:54,530
We analyze some exploits
from an exploited database,

204
00:09:54,530 --> 00:09:55,740
databases.

205
00:09:55,740 --> 00:09:57,880
And with no exception, we find that,

206
00:09:57,880 --> 00:10:01,610
all those tools, and all those, scripts,

207
00:10:01,610 --> 00:10:06,040
that, we are supposed to
exploit blind injections,

208
00:10:06,040 --> 00:10:09,810
were written in a
predict, in an unsafe way.

209
00:10:09,810 --> 00:10:12,463
And, there is a big impact on the,

210
00:10:14,010 --> 00:10:16,330
when they are trying to exploit.

211
00:10:16,330 --> 00:10:19,020
When they are trying to
exploit, there is a big problem,

212
00:10:19,020 --> 00:10:23,100
because, someone can reverse the steps,

213
00:10:23,100 --> 00:10:27,070
much more if they know,
with what tool was made,

214
00:10:27,070 --> 00:10:29,040
that the extraction.

215
00:10:29,040 --> 00:10:30,630
And,

216
00:10:30,630 --> 00:10:34,920
now for the demo, we are,
we are using the SQL map.

217
00:10:34,920 --> 00:10:38,850
We try to, to contact
the two main contributors

218
00:10:38,850 --> 00:10:40,600
from, SQL map.

219
00:10:40,600 --> 00:10:43,980
We do not have a reply
for, two months ago.

220
00:10:43,980 --> 00:10:44,813
And,

221
00:10:46,170 --> 00:10:48,043
we are doing this demo because,

222
00:10:48,980 --> 00:10:51,620
even I would hide from you that sqlmap,

223
00:10:51,620 --> 00:10:53,980
and I would not say a word about sqlmap,

224
00:10:53,980 --> 00:10:58,840
most of you guys already
think about sqlmap, that it,

225
00:10:58,840 --> 00:11:01,810
may have the same problem,
this problem, and,

226
00:11:01,810 --> 00:11:04,123
you can check it very, very easy.

227
00:11:05,260 --> 00:11:06,093
So,

228
00:11:07,040 --> 00:11:08,433
let us start the demo.

229
00:11:14,030 --> 00:11:17,260
We have a penetration
tester, which already started

230
00:11:17,260 --> 00:11:20,530
his sqlmap against the
vulnerable web application.

231
00:11:20,530 --> 00:11:25,367
The sqlmap will find the, the
exploit, the vulnerability,

232
00:11:25,367 --> 00:11:26,563
and will confirm it.

233
00:11:27,430 --> 00:11:29,360
In the meantime, then
we have three parties.

234
00:11:29,360 --> 00:11:33,060
The man in the middle starts, a TCP dump.

235
00:11:33,060 --> 00:11:35,900
And he will get the encrypted traffic.

236
00:11:35,900 --> 00:11:39,340
That sqlmap, as you can see,
already find the vulnerability,

237
00:11:39,340 --> 00:11:41,550
confirm it, and exploiting it.

238
00:11:41,550 --> 00:11:45,127
So, he is dumping data from
the vulnerable web app.

239
00:11:46,054 --> 00:11:49,300
Man in the middle, he
is, he is sending on the,

240
00:11:49,300 --> 00:11:53,480
on the, on the traffic,
he is taking the traffic.

241
00:11:53,480 --> 00:11:56,483
He is dumping all the traffic,
even if it is encrypted,

242
00:11:58,210 --> 00:11:59,333
we will see,

243
00:12:00,390 --> 00:12:04,693
in seconds that, that
traffic, it is all about,

244
00:12:05,620 --> 00:12:09,210
server hello, and then
the encrypted packets.

245
00:12:09,210 --> 00:12:13,550
And from those encrypted
traffic, will dump some data,

246
00:12:13,550 --> 00:12:15,200
like packet lengths.

247
00:12:15,200 --> 00:12:16,923
Now, when I am doing this,

248
00:12:19,520 --> 00:12:22,040
so, I will open with
Wireshark, you will see that,

249
00:12:22,040 --> 00:12:23,963
there is an encrypted traffic.

250
00:12:26,960 --> 00:12:27,793
Okay?

251
00:12:30,590 --> 00:12:32,890
So, here it is.

252
00:12:32,890 --> 00:12:36,390
Look, entry the traffic
server client exchange,

253
00:12:36,390 --> 00:12:37,970
hello, and so on.

254
00:12:37,970 --> 00:12:41,500
Then, we are trying to dump
some data packet lengths,

255
00:12:41,500 --> 00:12:42,713
to a CVS,

256
00:12:45,550 --> 00:12:48,443
file. With that, with that file,

257
00:12:49,860 --> 00:12:52,030
we are running the Python scripts to,

258
00:12:52,030 --> 00:12:55,000
take the packet lengths
from the vulnerable web app,

259
00:12:55,000 --> 00:12:57,910
to the penetration tester,
those packet lengths,

260
00:12:57,910 --> 00:13:00,360
we are interesting in.

261
00:13:00,360 --> 00:13:02,950
And, from those packet lengths,

262
00:13:02,950 --> 00:13:05,920
we will see what packet
lengths are for true,

263
00:13:05,920 --> 00:13:08,985
and, what are for falses.

264
00:13:08,985 --> 00:13:12,143
And we will, we will have a
file, with false and trues,

265
00:13:13,015 --> 00:13:16,720
and we will feed our local
sqlmap with the same,

266
00:13:16,720 --> 00:13:18,430
with the same false and trues.

267
00:13:18,430 --> 00:13:21,630
Right now, I am creating,
on the man in the middle,

268
00:13:21,630 --> 00:13:25,410
a database on, is not, does
not have any connection

269
00:13:25,410 --> 00:13:27,980
to the database that was,

270
00:13:27,980 --> 00:13:29,780
exploited before,

271
00:13:29,780 --> 00:13:31,330
in the vulnerable web app.

272
00:13:31,330 --> 00:13:33,750
You can create any
database, it is a dummy one,

273
00:13:33,750 --> 00:13:37,193
like the other one, but let
us suppose that is a real one.

274
00:13:38,690 --> 00:13:39,630
And now,

275
00:13:39,630 --> 00:13:40,883
we are trying to,

276
00:13:41,900 --> 00:13:43,380
start a sqlmap,

277
00:13:43,380 --> 00:13:46,830
man in the middle will start
a sqlmap on his local machine,

278
00:13:46,830 --> 00:13:49,990
against his database, which
is already vulnerable to,

279
00:13:49,990 --> 00:13:53,730
SQL injection, with a web app,
through a web application,

280
00:13:53,730 --> 00:13:55,160
on the local machine.

281
00:13:55,160 --> 00:13:57,893
And right away, before sqlmap starts to,

282
00:13:58,820 --> 00:14:03,140
exploit that database, the
man in the middle will start,

283
00:14:03,140 --> 00:14:05,580
feeding the sqlmap with the same responses

284
00:14:05,580 --> 00:14:08,940
as the vulnerable web
app, feeds the pen tester.

285
00:14:08,940 --> 00:14:13,740
And you will see that the,
the sqlmap will have the same,

286
00:14:13,740 --> 00:14:16,840
the same, results as the pen tester.

287
00:14:16,840 --> 00:14:18,830
The sqlmap from the man in the middle,

288
00:14:18,830 --> 00:14:22,750
we have the same results as
the sqlmap from the pen tester.

289
00:14:22,750 --> 00:14:24,983
So right now we are, we are,

290
00:14:27,270 --> 00:14:30,110
we are having the, the application,

291
00:14:30,110 --> 00:14:33,320
which responds with the
same, true and false from,

292
00:14:33,320 --> 00:14:37,893
as the vulnerable web, responded
to the penetration tester.

293
00:14:40,180 --> 00:14:41,013
And,

294
00:14:43,547 --> 00:14:44,800
now we saved the file.

295
00:14:44,800 --> 00:14:47,947
We have the responses, false
and trues, and as you can see,

296
00:14:47,947 --> 00:14:51,090
the sqlmap, is extracting the same data,

297
00:14:51,090 --> 00:14:56,090
as the sqlmap from the
penetration tester. (chuckles)

298
00:14:57,730 --> 00:15:00,263
Let us see, until the end.

299
00:15:01,380 --> 00:15:05,293
So, the message from the,
database was extracted too.

300
00:15:06,370 --> 00:15:07,203
So,

301
00:15:08,700 --> 00:15:09,623
what happened?

302
00:15:10,740 --> 00:15:13,130
So, what we did in the demo?

303
00:15:13,130 --> 00:15:16,150
The pen tester from a company, company A,

304
00:15:16,150 --> 00:15:19,540
exploit a vulnerable web
application, with sqlmap.

305
00:15:19,540 --> 00:15:22,240
The man in the middle,
took the encrypted traffic

306
00:15:22,240 --> 00:15:25,810
through a TCP dump, and
he did a passive attack.

307
00:15:25,810 --> 00:15:27,440
How he did this passive attack?

308
00:15:27,440 --> 00:15:30,420
So, it was no interaction
between the man in the middle,

309
00:15:30,420 --> 00:15:32,730
and the other two
parties, web application,

310
00:15:32,730 --> 00:15:35,610
and the penetration
tester, no interaction.

311
00:15:35,610 --> 00:15:38,670
So, this is, this can have a big impact,

312
00:15:38,670 --> 00:15:40,480
this problem I found.

313
00:15:40,480 --> 00:15:43,500
So, he extracted the true and
falses from packet lengths,

314
00:15:43,500 --> 00:15:44,660
from the encrypted traffic.

315
00:15:44,660 --> 00:15:46,900
So, it does not matter if it is encrypted,

316
00:15:46,900 --> 00:15:49,310
or it is not encrypted, does not matter.

317
00:15:49,310 --> 00:15:52,370
He just took the, packet lengths,

318
00:15:52,370 --> 00:15:55,300
And feed his local sqlmap
with the same true and falses

319
00:15:55,300 --> 00:15:57,090
to leak the data.

320
00:15:57,090 --> 00:16:01,240
Or, you can reverse the steps,
and create, a tool that,

321
00:16:01,240 --> 00:16:03,680
do the same, but much faster.

322
00:16:03,680 --> 00:16:06,170
I did this to be, to see the impact,

323
00:16:06,170 --> 00:16:10,180
to understand, the impact much,

324
00:16:10,180 --> 00:16:12,037
easy, in an easy way.

325
00:16:13,630 --> 00:16:18,540
So, the, the result, it was
that, the man in the middle,

326
00:16:18,540 --> 00:16:22,670
as you can see in this, picture,
took the same information

327
00:16:22,670 --> 00:16:26,190
as the pentester did, with
the vulnerable web app.

328
00:16:26,190 --> 00:16:28,390
So, this can be very tricky because,

329
00:16:28,390 --> 00:16:32,062
when you are using sqlmap,
you should consider this,

330
00:16:32,062 --> 00:16:36,690
your data, you are, you
are extracting data from,

331
00:16:36,690 --> 00:16:40,570
vulnerable web applications,
and those extracted data,

332
00:16:40,570 --> 00:16:41,403
those,

333
00:16:41,403 --> 00:16:45,590
dump databases, can be
extracted by anyone,

334
00:16:45,590 --> 00:16:47,273
or within your encrypted traffic.

335
00:16:48,300 --> 00:16:49,190
And,

336
00:16:49,190 --> 00:16:50,023
is not,

337
00:16:51,950 --> 00:16:54,980
there are many cases, where
you can, have problems,

338
00:16:54,980 --> 00:16:56,650
like this charset method.

339
00:16:56,650 --> 00:16:58,950
So, how, how can we fix this problem?

340
00:16:58,950 --> 00:17:01,603
For the charset method,
it is an easy way to,

341
00:17:02,730 --> 00:17:06,760
to shuffle the order of the
characters in the charset,

342
00:17:06,760 --> 00:17:09,900
and on your, exploit most,

343
00:17:09,900 --> 00:17:12,950
the position of each character,

344
00:17:12,950 --> 00:17:15,720
and, that the, someone
like the man in the middle,

345
00:17:15,720 --> 00:17:17,320
will not know ever.

346
00:17:17,320 --> 00:17:20,920
And for the binary search, you
should add some extra steps.

347
00:17:20,920 --> 00:17:23,850
Of course you will, it will have an,

348
00:17:23,850 --> 00:17:26,450
impact on the optimization because,

349
00:17:26,450 --> 00:17:29,800
binary search, tries to
optimize the process.

350
00:17:29,800 --> 00:17:31,483
You will have extra steps, but,

351
00:17:33,710 --> 00:17:38,220
it is safer for you to,
to add those extra steps.

352
00:17:38,220 --> 00:17:39,270
Conclusion.

353
00:17:39,270 --> 00:17:43,050
So, the way we are
writing blind injection,

354
00:17:43,050 --> 00:17:45,183
exploits, should be,

355
00:17:47,260 --> 00:17:51,503
should be, written in a way,
in such a way that, no one can,

356
00:17:53,092 --> 00:17:56,283
reverse the steps of the, of the,

357
00:17:57,410 --> 00:17:59,210
communication between the exploit,

358
00:17:59,210 --> 00:18:01,300
and vulnerable application.

359
00:18:01,300 --> 00:18:03,630
When we want to optimize
the blind injection attacks,

360
00:18:03,630 --> 00:18:06,773
we must consider inserting
random steps for,

361
00:18:08,070 --> 00:18:12,120
for the, optimization
algorithms, like binary search,

362
00:18:12,120 --> 00:18:16,841
or bit shifting, or any
other type of optimization.

363
00:18:16,841 --> 00:18:19,190
And,

364
00:18:19,190 --> 00:18:22,130
as a defensive tech,
you can consider these.

365
00:18:22,130 --> 00:18:23,760
I tried to,

366
00:18:23,760 --> 00:18:25,810
so, as I said to my PhD,

367
00:18:25,810 --> 00:18:28,870
I tried to introduce a
new layer of security

368
00:18:28,870 --> 00:18:30,230
for web applications.

369
00:18:30,230 --> 00:18:34,193
Okay, so threat hunting, is
not, it is a layer because,

370
00:18:35,175 --> 00:18:38,020
it is post exploitation,
it is a threat hunting,

371
00:18:38,020 --> 00:18:39,689
like a threat hunting.

372
00:18:39,689 --> 00:18:42,790
And, what I was trying to do was to,

373
00:18:42,790 --> 00:18:45,670
find ways to confirm attacks,

374
00:18:45,670 --> 00:18:48,350
without looking at the
payload, so it will,

375
00:18:48,350 --> 00:18:50,820
so the payload complexity does not matter.

376
00:18:50,820 --> 00:18:55,820
We are looking for other, other
things in the, in the data,

377
00:18:55,890 --> 00:18:59,260
like in this case, the packet lengths,

378
00:18:59,260 --> 00:19:02,400
and confirm an SQL injection, and so on.

379
00:19:02,400 --> 00:19:05,700
Maybe some attackers want to
take this in consideration.

380
00:19:05,700 --> 00:19:08,170
They will need full optimization.

381
00:19:08,170 --> 00:19:11,000
They want to take the
data as fast as possible.

382
00:19:11,000 --> 00:19:12,003
So, maybe,

383
00:19:13,010 --> 00:19:16,510
can be feasible as a defensive technique,

384
00:19:16,510 --> 00:19:18,024
even,

385
00:19:18,024 --> 00:19:20,270
those problems with blind injection

386
00:19:20,270 --> 00:19:21,733
will be known from today.

387
00:19:23,100 --> 00:19:26,093
Thank you. If you have
questions, please ask me.

