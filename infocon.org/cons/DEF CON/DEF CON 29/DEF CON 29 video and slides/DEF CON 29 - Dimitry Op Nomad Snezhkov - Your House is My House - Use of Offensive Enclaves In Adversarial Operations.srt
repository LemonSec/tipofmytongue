1
00:00:02,890 --> 00:00:03,870
- Hello, DEFCON.

2
00:00:03,870 --> 00:00:06,240
Welcome to Your House is My House.

3
00:00:06,240 --> 00:00:10,450
Use of Offensive Enclaves
in Adversarial Operations.

4
00:00:10,450 --> 00:00:13,240
My name is Dimitry Snezhkov,
and I'm part of protiviti,

5
00:00:13,240 --> 00:00:15,750
Attack and Penetration Testing Team,

6
00:00:15,750 --> 00:00:17,480
where I have a chance to do tooling,

7
00:00:17,480 --> 00:00:19,830
offensive research, and automation.

8
00:00:19,830 --> 00:00:23,353
Shout out to my team at
protiviti for making that happen.

9
00:00:24,290 --> 00:00:26,930
So today we're gonna
talk about SGX technology

10
00:00:26,930 --> 00:00:29,530
as it applies to offensive operations.

11
00:00:29,530 --> 00:00:33,500
Being part of the offensive
team and tasked with testing,

12
00:00:33,500 --> 00:00:37,370
I sometimes find myself, and
we, as a team find ourselves,

13
00:00:37,370 --> 00:00:41,320
on unknown boxes, and
sometimes we need to leverage

14
00:00:41,320 --> 00:00:43,470
the technology that exists there

15
00:00:43,470 --> 00:00:48,390
to be able to withstand
the kinda the onslaught

16
00:00:48,390 --> 00:00:52,360
of EDR inspections or defensive
technology inspections.

17
00:00:52,360 --> 00:00:57,360
And so SGX technology
here was a curious case

18
00:00:57,670 --> 00:01:02,360
when a developer was using SGX technology

19
00:01:02,360 --> 00:01:05,260
to protect the trusted credentials

20
00:01:05,260 --> 00:01:09,920
and so the box was
instrumented with SGX enclaves,

21
00:01:09,920 --> 00:01:12,690
which we thought, why not use them?

22
00:01:12,690 --> 00:01:15,620
And how can we use them
to further our goals

23
00:01:15,620 --> 00:01:17,610
of bringing payloads

24
00:01:17,610 --> 00:01:22,210
and taking care of secure
communication for us.

25
00:01:22,210 --> 00:01:23,630
But first things first,

26
00:01:23,630 --> 00:01:27,270
SGX is a technology developed
by Intel Corporation

27
00:01:27,270 --> 00:01:31,180
to essentially protect
specific code or data

28
00:01:31,180 --> 00:01:35,780
from disclosure or modification
to adversarial parties.

29
00:01:35,780 --> 00:01:40,310
Adversarial parties defined
by Intel or SGX technology,

30
00:01:40,310 --> 00:01:45,310
is anybody who is running
in non-ring three.

31
00:01:45,520 --> 00:01:48,840
For example, privileged
system code, operating system,

32
00:01:48,840 --> 00:01:52,820
virtual hypervisor, managers, bios,

33
00:01:52,820 --> 00:01:56,960
all the things that kind of
work around the hardware.

34
00:01:56,960 --> 00:02:01,960
And so SGX enclaves
were born in technology

35
00:02:02,170 --> 00:02:05,430
that solved the issue of protecting areas,

36
00:02:05,430 --> 00:02:07,940
or tries to solve the
issue of protected areas

37
00:02:07,940 --> 00:02:12,570
of execution and increased
security on platforms

38
00:02:12,570 --> 00:02:14,320
that are considered to be compromised

39
00:02:14,320 --> 00:02:19,120
from all the contexts
that runs around them.

40
00:02:19,120 --> 00:02:24,120
So SGX, as we've defined, SGX
enclave is a trusted code,

41
00:02:24,350 --> 00:02:26,670
and it's also linked into application.

42
00:02:26,670 --> 00:02:29,990
So the application, it
kind of runs in two modes,

43
00:02:29,990 --> 00:02:33,840
split personality modes,
one is the untrusted part

44
00:02:33,840 --> 00:02:36,660
of the code, and another is
trusted part of the code.

45
00:02:36,660 --> 00:02:40,110
The trust that they're
safe, part of the code runs

46
00:02:40,110 --> 00:02:44,250
in the SGX enclave, which we construct

47
00:02:44,250 --> 00:02:48,220
and we interact with
underlying bootstrapping,

48
00:02:48,220 --> 00:02:50,680
and orchestration platform

49
00:02:50,680 --> 00:02:55,150
to be able to execute or
reach into the trusted area

50
00:02:55,150 --> 00:02:58,930
and execute a very specific operations

51
00:02:58,930 --> 00:03:01,970
from the untrusted memory,
which is our application.

52
00:03:01,970 --> 00:03:06,860
That's possible by SGX of
introducing two new upcodes,

53
00:03:06,860 --> 00:03:10,640
of switching in and out of
the trusted area over CPU,

54
00:03:10,640 --> 00:03:13,330
which is locked to the enclave

55
00:03:13,330 --> 00:03:17,320
or enclave is encrypted by CPU key.

56
00:03:17,320 --> 00:03:21,000
And so this technology
is very kinda prevalent

57
00:03:21,000 --> 00:03:23,010
in the high security environments.

58
00:03:23,010 --> 00:03:28,010
Obviously, part of the
wherever Intel Core processor,

59
00:03:28,400 --> 00:03:33,400
six plus generation lives
on laptops, servers,

60
00:03:33,480 --> 00:03:37,090
and data centers, but also
in cloud virtual machines.

61
00:03:37,090 --> 00:03:40,380
Namely, we found it on Azure DC level

62
00:03:40,380 --> 00:03:42,210
trusted computing machines.

63
00:03:42,210 --> 00:03:46,600
And so if we find ourselves as
operators on those machines,

64
00:03:46,600 --> 00:03:49,690
we might be able to use
some of that protection

65
00:03:49,690 --> 00:03:51,630
for our purposes.

66
00:03:51,630 --> 00:03:55,690
So the offensive goals for
us here is kinda twofold.

67
00:03:55,690 --> 00:03:58,200
First is understand the technology,

68
00:03:58,200 --> 00:04:00,460
how to construct the application

69
00:04:00,460 --> 00:04:04,860
so we can actually invoke
SGX and use enclaves

70
00:04:04,860 --> 00:04:09,860
to store our data, which is
payloads or other things.

71
00:04:10,070 --> 00:04:15,070
Also use SGX technology and SDK to try

72
00:04:15,820 --> 00:04:20,330
and secure communications with
our C2 without revealing keys

73
00:04:20,330 --> 00:04:22,820
that we use for our payload encryption.

74
00:04:22,820 --> 00:04:26,070
And then in the process, try to kinda

75
00:04:26,070 --> 00:04:30,570
have the EDR divert attention
from us by splitting

76
00:04:30,570 --> 00:04:35,570
the kinda the deployment model
between several components

77
00:04:35,880 --> 00:04:40,287
that are not fully
assembled or introspected.

78
00:04:41,624 --> 00:04:46,310
And so in this case, we're
gonna do Windows as an example.

79
00:04:46,310 --> 00:04:49,250
we're gonna create a system called exclave

80
00:04:49,250 --> 00:04:52,940
or kinda design, a method of communication

81
00:04:52,940 --> 00:04:56,920
between our cradle to load
securely our payloads.

82
00:04:56,920 --> 00:05:00,630
Store them in the enclave on the box,

83
00:05:00,630 --> 00:05:03,240
but also hide the algorithm of encryption

84
00:05:03,240 --> 00:05:07,770
and the keys that kinda travel
back and forth in clear text.

85
00:05:07,770 --> 00:05:10,740
And so the Windows is
the example in this case,

86
00:05:10,740 --> 00:05:14,470
but the Linux side will be
pretty much the same in concepts.

87
00:05:14,470 --> 00:05:16,970
Although, implementation may
be a little bit different

88
00:05:16,970 --> 00:05:18,820
and hopefully, we're gonna have fun

89
00:05:18,820 --> 00:05:21,230
going through those exercises.

90
00:05:21,230 --> 00:05:23,120
One thing to mention is that this talk

91
00:05:23,120 --> 00:05:27,763
is not about SGX vulnerabilities
or SGX deep dives.

92
00:05:28,940 --> 00:05:31,070
We're gonna touch on some
of the relevant parts,

93
00:05:31,070 --> 00:05:35,123
but I refer to other great
talks on that matter.

94
00:05:36,600 --> 00:05:40,650
The SGX components that
will be interesting for us

95
00:05:40,650 --> 00:05:44,070
will be the platform
software that gets installed

96
00:05:44,070 --> 00:05:47,130
to kinda interact with enclave.

97
00:05:47,130 --> 00:05:50,100
If we're dropping into a box

98
00:05:50,100 --> 00:05:55,100
that has appropriate type of
CPU, and we're on the Windows,

99
00:05:55,500 --> 00:05:58,970
Microsoft Windows machine,
then operating system

100
00:05:58,970 --> 00:06:02,360
would have already have the driver for it

101
00:06:02,360 --> 00:06:07,360
because that's a standard
update process for it.

102
00:06:07,680 --> 00:06:11,393
But you could obviously,
have more a type of,

103
00:06:12,690 --> 00:06:14,800
have other type of platform software

104
00:06:14,800 --> 00:06:17,440
if you're operating
directly in the environment

105
00:06:17,440 --> 00:06:21,440
that SGX enclaves are used by developers

106
00:06:21,440 --> 00:06:25,830
to kinda help their
applications be more secure.

107
00:06:25,830 --> 00:06:29,180
So there's drivers there and
the orchestration software

108
00:06:29,180 --> 00:06:33,510
such as attestation
service which talks about

109
00:06:33,510 --> 00:06:38,260
and takes care of the kinda
signing, and verifying

110
00:06:38,260 --> 00:06:41,990
the enclaves themselves to the owner

111
00:06:41,990 --> 00:06:44,830
and to the system i.e. the CPU.

112
00:06:44,830 --> 00:06:46,990
And also, the second part is the SDK,

113
00:06:46,990 --> 00:06:49,530
which we will use as part
of the software development

114
00:06:49,530 --> 00:06:53,000
to create this application,
which will utilize enclaves.

115
00:06:53,000 --> 00:06:53,980
There are two SDKs,

116
00:06:53,980 --> 00:06:56,910
we're gonna take a look at
Intel for the most part,

117
00:06:56,910 --> 00:07:00,097
but open enclave is also
available for our purposes.

118
00:07:00,097 --> 00:07:02,290
And so the outcome of our efforts

119
00:07:02,290 --> 00:07:06,010
would be an application
or a set of applications

120
00:07:06,860 --> 00:07:10,100
that will be created with
trusted and untrusted parts.

121
00:07:10,100 --> 00:07:12,610
Trusted being an SDX enclave,

122
00:07:12,610 --> 00:07:16,040
and untrusted being all
the bootstrapping code

123
00:07:16,040 --> 00:07:18,540
that allows us to share
information with our C2

124
00:07:18,540 --> 00:07:21,150
and process payloads from that.

125
00:07:21,150 --> 00:07:26,080
And then we're gonna go
into how high level mapping

126
00:07:26,080 --> 00:07:29,320
of the calls into C2,
into trusted area happens,

127
00:07:29,320 --> 00:07:33,010
and how we can leverage
some of the primitives

128
00:07:33,010 --> 00:07:35,660
in the SGX, SDK for our purposes.

129
00:07:35,660 --> 00:07:38,633
Such as configuration,
signing and loading.

130
00:07:40,720 --> 00:07:43,990
Specifically the problem
of payload transfer

131
00:07:43,990 --> 00:07:45,870
can be distilled to a few things.

132
00:07:45,870 --> 00:07:49,830
First of all, we do not want
to load payloads in clear,

133
00:07:49,830 --> 00:07:51,790
we always want to protect.

134
00:07:51,790 --> 00:07:54,490
And commonly, we protect
it with some XOR key

135
00:07:54,490 --> 00:07:59,180
maybe a AES key, but the
problem is that the key itself

136
00:07:59,180 --> 00:08:03,030
maybe available in the memory
because it's shared key

137
00:08:03,030 --> 00:08:03,940
a lot of times.

138
00:08:03,940 --> 00:08:06,900
And so it's inspectable, if
not real-time in the sandbox,

139
00:08:06,900 --> 00:08:08,740
than in the forensic lab.

140
00:08:08,740 --> 00:08:11,530
And so if we're running
long-term campaign,

141
00:08:11,530 --> 00:08:14,130
we want to make sure we
protect our keys in memory.

142
00:08:14,130 --> 00:08:16,560
And also, the other thing
is the algorithm itself

143
00:08:16,560 --> 00:08:20,670
can be reversed and we can be pretty much

144
00:08:20,670 --> 00:08:24,860
our algorithm can be known.

145
00:08:24,860 --> 00:08:28,020
But not because we don't
wanna share the algorithm,

146
00:08:28,020 --> 00:08:29,870
but because that algorithm may point

147
00:08:29,870 --> 00:08:32,080
to weaknesses in our communication,

148
00:08:32,080 --> 00:08:35,560
which may be introspected and intercepted.

149
00:08:35,560 --> 00:08:38,030
And so, what we're
gonna do, the other goal

150
00:08:38,030 --> 00:08:41,040
is not only to store
payloads, but also use SGX

151
00:08:41,040 --> 00:08:42,793
to secure communicate out to C2.

152
00:08:43,840 --> 00:08:46,363
To do that, there are a few alternatives.

153
00:08:47,390 --> 00:08:51,680
There's some crypto
libraries that come with PSW,

154
00:08:51,680 --> 00:08:56,680
the platform code in SDK,
it's SGX_TCRYTPO library,

155
00:08:57,700 --> 00:09:01,210
it is fairly limited in what
it does because it's purpose is

156
00:09:01,210 --> 00:09:05,150
to facilitate jobs of
attestation and communication

157
00:09:05,150 --> 00:09:10,150
for session management, it's
not for general purpose crypto,

158
00:09:10,720 --> 00:09:14,253
but we can use some parts of
it to construct what we want.

159
00:09:15,100 --> 00:09:18,150
We can also bring
third-party to encryption,

160
00:09:18,150 --> 00:09:19,410
to work with that, for example,

161
00:09:19,410 --> 00:09:23,740
OpenSSL or wolfSSL library,

162
00:09:23,740 --> 00:09:25,713
but the problem is target availability.

163
00:09:26,550 --> 00:09:29,710
We do not know if these libraries runtime

164
00:09:29,710 --> 00:09:31,990
are gonna be available on the target.

165
00:09:31,990 --> 00:09:35,490
Plus, we want to stay away
from loading things from disk

166
00:09:35,490 --> 00:09:37,970
as much as we can, and
operate in the memory,

167
00:09:37,970 --> 00:09:41,010
and a lot of times it's too
heavy or impossible to load

168
00:09:41,010 --> 00:09:42,670
those libraries in memory.

169
00:09:42,670 --> 00:09:45,710
And the third possibility is
obviously, with the limited

170
00:09:47,650 --> 00:09:51,060
kinda API that we have
inside of the SGX enclave,

171
00:09:51,060 --> 00:09:53,280
the trusted area, we can roll our own,

172
00:09:53,280 --> 00:09:57,933
which is, probably discouraged
in this exercise anyway.

173
00:10:01,278 --> 00:10:06,030
I've mentioned limited access
to API and the SGX enclave,

174
00:10:06,030 --> 00:10:09,120
the reason being is because it is itself

175
00:10:09,120 --> 00:10:12,780
because of its kind of reason
for existence to protect

176
00:10:12,780 --> 00:10:17,780
the code inside of it, is
devoid of support for syscalls

177
00:10:18,150 --> 00:10:22,693
and it has a very limited
IO in and out of enclave,

178
00:10:23,663 --> 00:10:26,363
mostly for state of
preservation, but nothing less.

179
00:10:27,650 --> 00:10:30,560
So let's see what we can
do, what we're gonna take

180
00:10:30,560 --> 00:10:34,814
the first approach is
actually using TCRYPTO

181
00:10:34,814 --> 00:10:37,014
and see what we can do,
how we can build it.

182
00:10:38,850 --> 00:10:42,380
So upon research, we kinda came up

183
00:10:42,380 --> 00:10:45,550
with three different things
that we can do with that crypto

184
00:10:45,550 --> 00:10:49,360
in the SDK, we can generate an RSA key,

185
00:10:49,360 --> 00:10:52,320
actually a pair, a public and private key.

186
00:10:52,320 --> 00:10:55,390
We can actually sign
something with our public key

187
00:10:57,591 --> 00:11:01,930
and well actually, encrypted
with the public key

188
00:11:01,930 --> 00:11:06,560
and sign the private key,
and we can actually use

189
00:11:08,163 --> 00:11:12,397
a routine that works on AES
symmetric keys to be able

190
00:11:13,990 --> 00:11:17,350
to encrypt something of a value inside

191
00:11:17,350 --> 00:11:20,340
and potentially transfer that something,

192
00:11:20,340 --> 00:11:22,970
that piece of code or data
outside of the enclave

193
00:11:22,970 --> 00:11:24,510
into untrusted area.

194
00:11:24,510 --> 00:11:27,050
And so the idea here
would be for us to create

195
00:11:27,050 --> 00:11:30,330
an application where we do just that,

196
00:11:30,330 --> 00:11:34,420
the first step would
be to generate RSA keys

197
00:11:34,420 --> 00:11:36,707
sat inside of the trusted PRM,

198
00:11:37,554 --> 00:11:41,837
inside of enclave, give the
public key out to our C2,

199
00:11:44,230 --> 00:11:48,200
have it store there, and then
go to C2, and C2 would be able

200
00:11:48,200 --> 00:11:52,140
to generate the symmetric
key, send it to us inside

201
00:11:52,140 --> 00:11:56,550
of the trusted PRM, we're
gonna store the symmetric key

202
00:11:56,550 --> 00:11:59,830
and then we're gonna have
a shared symmetric key

203
00:11:59,830 --> 00:12:03,810
without leaking it so we can
kinda generate the payload

204
00:12:03,810 --> 00:12:06,720
on the C2 side and then
keep transferring it

205
00:12:06,720 --> 00:12:11,073
into our trusted PRM without
having any inspection

206
00:12:11,073 --> 00:12:14,970
or being worried about
the algorithm disclosure,

207
00:12:14,970 --> 00:12:17,580
or payload disclosure, or key disclosure.

208
00:12:17,580 --> 00:12:21,330
So it's a three-step process.

209
00:12:21,330 --> 00:12:25,180
First, we're generating
public, private keys,

210
00:12:25,180 --> 00:12:26,013
we're sending them to C2,

211
00:12:26,013 --> 00:12:29,700
C2 now has them then
encrypts a symmetric key,

212
00:12:29,700 --> 00:12:34,380
sends it to us, we store
it in a trusted component,

213
00:12:34,380 --> 00:12:39,380
which it decrypts the key because
it was encrypted with RSA,

214
00:12:41,040 --> 00:12:43,650
which we already had from previous step,

215
00:12:43,650 --> 00:12:46,620
and now we just share the
symmetric key between the two,

216
00:12:46,620 --> 00:12:49,223
and that's how we achieve
secure communication.

217
00:12:50,520 --> 00:12:54,720
And then, so components
that we want to have

218
00:12:55,649 --> 00:12:58,840
in this sort of construction
is we kinda thought

219
00:12:58,840 --> 00:13:01,560
of splitting it in three
ways, the application,

220
00:13:01,560 --> 00:13:05,250
which will be inspectable by
defense, it's loaded from disk,

221
00:13:05,250 --> 00:13:09,810
it's your kinda implant
or cradle, or a loader.

222
00:13:09,810 --> 00:13:13,270
We went the route of establishing
the bridge between enclave

223
00:13:13,270 --> 00:13:16,570
and that loader, which kinda facilitates

224
00:13:16,570 --> 00:13:20,100
and brokers interaction
takes data from one process

225
00:13:20,100 --> 00:13:24,120
to another, but it's
also a kinda middleman

226
00:13:24,120 --> 00:13:27,550
that can be taken out of
the equation upon first load

227
00:13:27,550 --> 00:13:30,420
so the EDR will not see all of the picture

228
00:13:30,420 --> 00:13:33,190
and the bridge can come in
as a memory load of module,

229
00:13:33,190 --> 00:13:37,290
which will be able to kinda
broker communication between

230
00:13:37,290 --> 00:13:40,700
the two, the enclave and
the app at their own time.

231
00:13:40,700 --> 00:13:42,950
And so the bridge is
also assumed inspectable

232
00:13:44,330 --> 00:13:47,340
and then enclave, which
is assumed obfuscated

233
00:13:47,340 --> 00:13:49,610
and we're gonna have some
notes on that later on,

234
00:13:49,610 --> 00:13:51,850
in limitation section.

235
00:13:51,850 --> 00:13:56,810
But, yeah, so enclave is where
we're gonna store our keys

236
00:13:56,810 --> 00:13:58,170
and our algorithm.

237
00:13:58,170 --> 00:14:01,570
It will be loaded from disk,
but it's also a secure library,

238
00:14:01,570 --> 00:14:04,160
which may not be introspectable,

239
00:14:04,160 --> 00:14:09,123
and yeah, then we need to
kinda start building that.

240
00:14:11,950 --> 00:14:14,810
And so we come up with
that exclave system,

241
00:14:14,810 --> 00:14:17,930
which we're gonna demo,
and then we'll come back

242
00:14:17,930 --> 00:14:21,880
to talk more about its
construction limitations

243
00:14:21,880 --> 00:14:23,180
and all that other things.

244
00:14:24,460 --> 00:14:27,770
Let's take a look at the
exclave, its components

245
00:14:27,770 --> 00:14:29,600
and its operations.

246
00:14:29,600 --> 00:14:32,420
Here, we have a victim
machine with an application,

247
00:14:32,420 --> 00:14:34,730
which is an agent or an implant.

248
00:14:34,730 --> 00:14:36,300
There's a bridge DLL,

249
00:14:36,300 --> 00:14:40,680
which facilitates
interaction with the enclave.

250
00:14:40,680 --> 00:14:42,110
It may or may not be on disk,

251
00:14:42,110 --> 00:14:44,830
it may or may not come
directly from the network

252
00:14:44,830 --> 00:14:47,150
and being loaded that way in memory.

253
00:14:47,150 --> 00:14:48,900
And obviously, as we mentioned,

254
00:14:48,900 --> 00:14:52,800
there is a trusted piece
of code that runs in PRM.

255
00:14:52,800 --> 00:14:55,400
It makes sense to kinda
put the code in perspective

256
00:14:55,400 --> 00:14:58,340
and so far, is to
explain those components.

257
00:14:58,340 --> 00:15:01,290
The application finds the bridge,

258
00:15:01,290 --> 00:15:05,990
the bridge function is
invoked, which has explored,

259
00:15:05,990 --> 00:15:10,600
and found the bridge
itself, maps through the EDL

260
00:15:10,600 --> 00:15:12,680
to the enclave calls.

261
00:15:12,680 --> 00:15:17,680
Here's the EDL, essentially
it's a mapping or a matrix

262
00:15:18,040 --> 00:15:21,660
of trusted calls that we
can invoke inside of enclave

263
00:15:21,660 --> 00:15:24,860
in untrusted calls that we are not.

264
00:15:24,860 --> 00:15:27,100
An enclave itself, is the trusted code

265
00:15:27,100 --> 00:15:29,070
that essentially does the processing,

266
00:15:29,070 --> 00:15:32,110
does the encryption and other things

267
00:15:32,110 --> 00:15:33,960
that we need to keep secure.

268
00:15:33,960 --> 00:15:35,410
And obviously on the other side,

269
00:15:35,410 --> 00:15:39,700
it's a C2 that should be able to match

270
00:15:39,700 --> 00:15:42,270
the crypto parameters one-to-one,

271
00:15:42,270 --> 00:15:45,740
so it's able to successfully
decrypt and communicate

272
00:15:45,740 --> 00:15:50,740
with exclave that resides
inside of the victim machine.

273
00:15:54,900 --> 00:15:58,160
And let's take a look at how that works.

274
00:15:58,160 --> 00:16:00,020
So essentially we have two screens,

275
00:16:00,020 --> 00:16:03,580
one is the victim machine
where all these components

276
00:16:03,580 --> 00:16:06,030
are deployed and there is a C2.

277
00:16:06,030 --> 00:16:09,300
Let's start with the C2,
it listens on the port

278
00:16:09,300 --> 00:16:11,500
and it's responding to communication.

279
00:16:11,500 --> 00:16:13,660
Let's start the application.

280
00:16:13,660 --> 00:16:14,860
And the first thing it does,

281
00:16:14,860 --> 00:16:16,810
it's trying to create an enclave.

282
00:16:16,810 --> 00:16:19,860
It's a standard procedure
to create the memory mapping

283
00:16:19,860 --> 00:16:23,170
and launch things into existence.

284
00:16:23,170 --> 00:16:26,610
Once this is done, all checks happen,

285
00:16:26,610 --> 00:16:29,580
are we running on the
machine that supports SGX?

286
00:16:29,580 --> 00:16:31,790
Are we able to create it,
what are the parameters

287
00:16:31,790 --> 00:16:34,260
and permissions that had allow us

288
00:16:34,260 --> 00:16:36,670
or not allow us to do this?

289
00:16:36,670 --> 00:16:40,270
And then it's trying to
generate a RSA key pair

290
00:16:40,270 --> 00:16:42,200
for communication.

291
00:16:42,200 --> 00:16:44,880
Once this is done, the
public key and private key,

292
00:16:44,880 --> 00:16:48,180
our available private key,
it gets stored in enclave

293
00:16:48,180 --> 00:16:50,450
and publicly gets shared
through the bridge,

294
00:16:50,450 --> 00:16:53,760
into the application,
which connects to the C2

295
00:16:53,760 --> 00:16:57,903
and solicits for a storage of
this public key on our side.

296
00:16:59,260 --> 00:17:03,270
Once this happens, the
C2 carries out the task.

297
00:17:03,270 --> 00:17:05,720
It does its processing,
generates the symmetric key

298
00:17:05,720 --> 00:17:09,440
for communication and
sends the response back

299
00:17:09,440 --> 00:17:12,400
to the application, which
proxies it to the bridge

300
00:17:12,400 --> 00:17:15,060
into the enclave, which stores it,

301
00:17:15,060 --> 00:17:17,320
and this is what we're doing here.

302
00:17:17,320 --> 00:17:19,433
So the shared key is now available,

303
00:17:20,540 --> 00:17:25,080
and now, we are ready to
map one-to-one encryption

304
00:17:25,080 --> 00:17:29,720
of the payload, or would be
payload that would come from C2

305
00:17:29,720 --> 00:17:32,790
into the enclave again, through
the app, through the bridge,

306
00:17:32,790 --> 00:17:34,560
into the secured area.

307
00:17:34,560 --> 00:17:36,840
And this is what happening
here, we're requesting

308
00:17:36,840 --> 00:17:41,710
that payload, the payload
gets generated, in this case,

309
00:17:41,710 --> 00:17:44,100
it's very contrived example,

310
00:17:44,100 --> 00:17:49,100
and it gets encrypted to match
the mode of the capabilities

311
00:17:49,800 --> 00:17:50,923
of the enclave.

312
00:17:51,820 --> 00:17:55,840
All that processing happens
and the payload travels back

313
00:17:55,840 --> 00:18:00,193
to the agent and
ultimately to the enclave.

314
00:18:01,090 --> 00:18:04,980
And enclave, having the
symmetric key is now able

315
00:18:04,980 --> 00:18:07,020
to decrypt the payload.

316
00:18:07,020 --> 00:18:12,000
After this is done, the payload
gets stored in clear text

317
00:18:12,000 --> 00:18:15,140
in the enclave, but it's
protected from any kind of

318
00:18:16,410 --> 00:18:20,030
reachability from to defense,
and then the attacker

319
00:18:20,030 --> 00:18:21,690
can actually work on that.

320
00:18:21,690 --> 00:18:24,090
And the last but not
least, then once we created

321
00:18:24,090 --> 00:18:26,420
the enclave, we can destroy
it if we don't need it

322
00:18:26,420 --> 00:18:31,100
for whatever reason and the
duration that we wanna use that.

323
00:18:31,100 --> 00:18:33,540
Once this is done, everything is good

324
00:18:33,540 --> 00:18:35,903
and we are ready to move on.

325
00:18:42,520 --> 00:18:47,520
Okay, so we've started
presentation of how exclave works.

326
00:18:48,040 --> 00:18:51,410
There are some assumptions
and limitations to this.

327
00:18:51,410 --> 00:18:54,000
First of all, it's a bad
coding practice, (chuckles)

328
00:18:54,000 --> 00:18:56,640
we are weakening the
enclaves we're using it,

329
00:18:56,640 --> 00:18:58,450
we're misusing them.

330
00:18:58,450 --> 00:19:03,450
And so, but our idea is
that while the technology

331
00:19:05,140 --> 00:19:08,520
it can be used as is, a lot of times EDRs

332
00:19:08,520 --> 00:19:12,200
did not inspect enclaves.

333
00:19:12,200 --> 00:19:17,200
In our testing, we were able
to use the pre-release keys

334
00:19:18,030 --> 00:19:21,010
or in pre-release or debug mode

335
00:19:21,010 --> 00:19:22,856
where we're able to compile that

336
00:19:22,856 --> 00:19:25,950
and then use the whitelisting,
testing, signing keys

337
00:19:25,950 --> 00:19:28,180
to do that, it will, in theory,

338
00:19:28,180 --> 00:19:31,530
that should prevent us
from debugging into it,

339
00:19:31,530 --> 00:19:35,230
which is true, the EDRs
themselves did not actually make

340
00:19:35,230 --> 00:19:37,980
the leap on and inspecting
enclaves anyway.

341
00:19:37,980 --> 00:19:41,940
And so the other side of the
story is that in order to

342
00:19:41,940 --> 00:19:45,090
do it properly, you need to
assign at the station key

343
00:19:45,090 --> 00:19:48,060
and have Intel provision one,
and sign it with a true key

344
00:19:48,060 --> 00:19:49,810
and then you can sign your enclave,

345
00:19:49,810 --> 00:19:51,163
which will be undebugable.

346
00:19:52,110 --> 00:19:55,830
But in this case, you're
running into attestation,

347
00:19:55,830 --> 00:19:57,980
meaning attribution issue.

348
00:19:57,980 --> 00:20:00,250
And so we kinda went data route and said,

349
00:20:00,250 --> 00:20:02,150
Hey, what can we do with pre-release

350
00:20:02,150 --> 00:20:03,810
or debug versions of it?

351
00:20:03,810 --> 00:20:06,612
And so I did not attested the enclaves

352
00:20:06,612 --> 00:20:09,650
are supposed to be
inspected, but in practice,

353
00:20:09,650 --> 00:20:12,380
they're often not.

354
00:20:12,380 --> 00:20:16,000
And so, as we mentioned
before, SGX provisioned

355
00:20:16,000 --> 00:20:21,000
the PSW services install
or platform is installed

356
00:20:21,340 --> 00:20:26,340
and TCRYPTO, a library of
cryptographic primitives

357
00:20:27,510 --> 00:20:31,360
is present so that
should let us kinda live

358
00:20:31,360 --> 00:20:35,850
of the land once we arrive
at SGX enabled machine.

359
00:20:35,850 --> 00:20:39,300
And you know, one thing to notice is that

360
00:20:39,300 --> 00:20:41,930
how do you help defenders kinda understand

361
00:20:41,930 --> 00:20:45,170
what the enclaves are and how to find

362
00:20:45,170 --> 00:20:47,950
the rogue ones is that you
need to watch for signatures,

363
00:20:47,950 --> 00:20:50,420
identify non-approved SGX enclaves,

364
00:20:50,420 --> 00:20:51,500
the way you would do this,

365
00:20:51,500 --> 00:20:54,850
is you basically can have
a really nice tool from

366
00:20:54,850 --> 00:20:58,510
Kudelski's SGX fun, to dump your DLL

367
00:20:58,510 --> 00:21:02,170
and kinda see the details of that enclave,

368
00:21:02,170 --> 00:21:05,973
and kinda latch onto the keys
that you have not provisioned.

369
00:21:06,980 --> 00:21:10,560
So I'd like to thank everybody
who has gone to my talk,

370
00:21:10,560 --> 00:21:14,300
here's the link to a proof of
concept, the bridge library,

371
00:21:14,300 --> 00:21:15,800
the enclave of an application,

372
00:21:15,800 --> 00:21:18,380
which we've used in this presentation.

373
00:21:18,380 --> 00:21:19,473
Thank you very much.

