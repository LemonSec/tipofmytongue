1
00:00:06,200 --> 00:00:07,110
- Hello, everyone.

2
00:00:07,110 --> 00:00:09,580
Welcome to Def Con Safe Mode.

3
00:00:09,580 --> 00:00:10,860
Was it special here?

4
00:00:10,860 --> 00:00:12,603
Glad to see you in this way.

5
00:00:14,110 --> 00:00:15,970
Our talk is evil printer.

6
00:00:15,970 --> 00:00:19,083
How to hack Windows machines
with Printing Protocol.

7
00:00:22,380 --> 00:00:24,860
First, a self-introduction.

8
00:00:24,860 --> 00:00:27,800
Zhipeng Huo is a senior
security researcher,

9
00:00:27,800 --> 00:00:29,620
and he's a member of EcoSec Team

10
00:00:29,620 --> 00:00:32,270
at Tencent Security Xuanwu Lab.

11
00:00:32,270 --> 00:00:36,630
His research focused on Windows
and MacOS platform security.

12
00:00:36,630 --> 00:00:38,930
He has found and reported
many vulnerabilities

13
00:00:38,930 --> 00:00:40,553
to Microsoft and Apple.

14
00:00:42,300 --> 00:00:45,560
To entertain is a code
also of this presentation.

15
00:00:45,560 --> 00:00:48,983
He leads the EcoSec Team at
Tencent Security Xuanwu lab.

16
00:00:54,730 --> 00:00:57,140
This is the agenda of our talk.

17
00:00:57,140 --> 00:00:59,970
First, the introduction
of printing internals,

18
00:00:59,970 --> 00:01:02,350
components, and interactions

19
00:01:02,350 --> 00:01:06,010
that recover the attack
surface of Windows printing.

20
00:01:06,010 --> 00:01:08,800
Finally, a critical bug that we found,

21
00:01:08,800 --> 00:01:12,093
a detailed walkthrough of
its exploitation, and patch.

22
00:01:15,373 --> 00:01:16,920
We have published a demo video on Twitter

23
00:01:16,920 --> 00:01:18,363
about two months ago.

24
00:01:19,310 --> 00:01:23,670
First, the attacker listens
for incoming connections.

25
00:01:23,670 --> 00:01:25,840
Next, the victim tries to connect

26
00:01:25,840 --> 00:01:27,393
to attacker-controlled printer.

27
00:01:29,617 --> 00:01:31,560
The attacker immediately
gets a reverse shell

28
00:01:31,560 --> 00:01:32,943
with system privilege.

29
00:01:33,840 --> 00:01:36,663
This vulnerability is what
we call the evil printer.

30
00:01:37,970 --> 00:01:40,560
In this talk, we will show you what it is,

31
00:01:40,560 --> 00:01:42,690
how we found and exploited,

32
00:01:42,690 --> 00:01:43,993
and what can you do.

33
00:01:48,520 --> 00:01:51,650
Most of you, may have
done some printing before.

34
00:01:51,650 --> 00:01:55,770
And many of you may have
worked with a network printer.

35
00:01:55,770 --> 00:01:58,563
So how does network printing works?

36
00:02:00,600 --> 00:02:03,120
The system where user
create the print job on,

37
00:02:03,120 --> 00:02:04,383
is a Print Client.

38
00:02:05,800 --> 00:02:08,470
Print Server connects
to the physical printer

39
00:02:08,470 --> 00:02:10,900
and makes the printer
available to other systems

40
00:02:10,900 --> 00:02:11,843
on the network.

41
00:02:13,290 --> 00:02:16,240
When client wants to print a document,

42
00:02:16,240 --> 00:02:19,280
you would go to the server
and say, Hey, Server,

43
00:02:19,280 --> 00:02:20,423
print this document.

44
00:02:22,000 --> 00:02:24,180
The server gets the print job.

45
00:02:24,180 --> 00:02:27,390
Then would go to the real
printer and say, Hey, printer,

46
00:02:27,390 --> 00:02:28,323
print this.

47
00:02:29,860 --> 00:02:33,043
The printer would finally print
a document for the client.

48
00:02:34,720 --> 00:02:35,810
This is the procedure

49
00:02:35,810 --> 00:02:38,483
when you want to print
a document or a client.

50
00:02:44,198 --> 00:02:46,800
There are so many
different printer products

51
00:02:46,800 --> 00:02:49,530
manufactured by different companies.

52
00:02:49,530 --> 00:02:52,380
Printers does not
understand application data

53
00:02:52,380 --> 00:02:54,240
from print clients.

54
00:02:54,240 --> 00:02:57,580
So the application data
needs to be converted

55
00:02:57,580 --> 00:03:00,680
to the data format that the
printer could understand.

56
00:03:00,680 --> 00:03:02,713
This process is called rendering.

57
00:03:03,690 --> 00:03:05,120
In a network printing,

58
00:03:05,120 --> 00:03:07,260
there are two different
types of rendering.

59
00:03:07,260 --> 00:03:09,073
Client-side and service-side.

60
00:03:10,040 --> 00:03:12,920
For client-side Rendering,
print client translates

61
00:03:12,920 --> 00:03:16,080
the application data to
printer-specific data

62
00:03:16,080 --> 00:03:18,323
then sends the data to the prime server.

63
00:03:19,230 --> 00:03:22,240
For server-side rendering, print client

64
00:03:22,240 --> 00:03:25,730
sends the unmodified data
directly to the Print Server,

65
00:03:25,730 --> 00:03:28,520
then Print Server translates
the application data

66
00:03:28,520 --> 00:03:30,373
to printer-specific data.

67
00:03:32,600 --> 00:03:35,757
The rendering, job are
handled by Print Driver.

68
00:03:39,184 --> 00:03:42,930
Printer driver is an important
component of printing.

69
00:03:42,930 --> 00:03:44,780
It is the interface component

70
00:03:44,780 --> 00:03:46,763
between the OS and the printers.

71
00:03:47,950 --> 00:03:51,010
Printer Drivers include
a rendering component,

72
00:03:51,010 --> 00:03:52,803
and a configuration component.

73
00:03:53,890 --> 00:03:56,620
A rendering component,
converts application data

74
00:03:56,620 --> 00:03:58,703
into the data that printer could use.

75
00:03:59,580 --> 00:04:03,160
And the configuration component
contains a user interface

76
00:04:03,160 --> 00:04:05,593
that enables users to
control the printers.

77
00:04:08,440 --> 00:04:09,440
In order to support

78
00:04:09,440 --> 00:04:11,780
both client-side and
service-side rendering,

79
00:04:11,780 --> 00:04:14,470
it is a requirement that the
printer drivers are available

80
00:04:14,470 --> 00:04:16,603
to both print client and print server.

81
00:04:18,159 --> 00:04:21,033
There are two mechanisms for
distributing printer driver.

82
00:04:21,033 --> 00:04:22,950
They are called Point-And-Print,

83
00:04:22,950 --> 00:04:24,673
and Package Point-And-Print.

84
00:04:25,690 --> 00:04:28,040
Point-And-Print, allows a print client

85
00:04:28,040 --> 00:04:31,323
to download printer driver
directly from a print server.

86
00:04:32,170 --> 00:04:35,300
Package Point-And-Print,
allows a printer client

87
00:04:35,300 --> 00:04:37,533
to download a printer support package.

88
00:04:38,460 --> 00:04:41,160
And the package would include
a needed printer driver.

89
00:04:43,770 --> 00:04:46,600
According to Microsoft,
the package approach

90
00:04:46,600 --> 00:04:50,090
to driver installation
provides improved security

91
00:04:50,090 --> 00:04:51,380
for Point-And-Print

92
00:04:51,380 --> 00:04:54,200
by checking drivers signing
during the establishment

93
00:04:54,200 --> 00:04:55,863
of a Point-And-Print connection.

94
00:04:58,650 --> 00:05:01,433
print spooler Service, is
the core of Windows printing.

95
00:05:02,580 --> 00:05:06,390
print spooler Service,
manages print drivers.

96
00:05:06,390 --> 00:05:09,680
It is responsible for retrieving
the correct print driver

97
00:05:09,680 --> 00:05:11,313
and dynamically loading it.

98
00:05:12,720 --> 00:05:14,953
It is an auto-start
service, on Windows OS.

99
00:05:15,940 --> 00:05:18,240
It manages the entire printing process,

100
00:05:18,240 --> 00:05:21,690
and exports the printing APIs
for other printing component

101
00:05:21,690 --> 00:05:23,683
and the user applications to use.

102
00:05:25,740 --> 00:05:29,023
It implements both Print
Client and Print Server roles.

103
00:05:31,200 --> 00:05:35,020
The design of the print
spooler is extremely dangerous.

104
00:05:35,020 --> 00:05:38,120
For example, it runs at
system privileged level,

105
00:05:38,120 --> 00:05:41,350
it has networking tasks,
and it can dynamically load

106
00:05:41,350 --> 00:05:42,400
third party binaries.

107
00:05:44,280 --> 00:05:45,810
Client-server printing model,

108
00:05:45,810 --> 00:05:48,310
it's a very common model
that shares the printers

109
00:05:48,310 --> 00:05:50,860
through the network to many users.

110
00:05:50,860 --> 00:05:51,860
In this model,

111
00:05:51,860 --> 00:05:55,010
print server connects to the
real printer and share itself

112
00:05:55,010 --> 00:05:56,570
in the network.

113
00:05:56,570 --> 00:05:59,673
The print client, connects
to their shared print server.

114
00:06:00,620 --> 00:06:04,210
But applications on print
client want to start print job.

115
00:06:04,210 --> 00:06:06,420
It costs the printing APIs

116
00:06:06,420 --> 00:06:08,830
to communicate with the
local print spooler.

117
00:06:09,920 --> 00:06:11,920
Then print spooler, will send the action

118
00:06:11,920 --> 00:06:14,290
to the remote print
spooler on our print server

119
00:06:14,290 --> 00:06:17,793
through network protocols, such as SMB.

120
00:06:19,360 --> 00:06:22,250
The print spooler on the
print server would communicate

121
00:06:22,250 --> 00:06:25,033
with the real printer to
finish the printing job.

122
00:06:26,930 --> 00:06:29,070
The Windows sprinting is ancient.

123
00:06:29,070 --> 00:06:32,320
It has existed for more than 25 years.

124
00:06:32,320 --> 00:06:34,880
It's highly integrated with Windows OS,

125
00:06:34,880 --> 00:06:37,563
and it is one of the
most important services.

126
00:06:38,810 --> 00:06:41,120
The architecture and the
implementation of it,

127
00:06:41,120 --> 00:06:44,313
is extremely complex, even confusing.

128
00:06:45,400 --> 00:06:48,930
Many parts of it works at
the highest privilege level

129
00:06:48,930 --> 00:06:51,430
to make it one for the
most valuable targets

130
00:06:51,430 --> 00:06:52,483
for bug hunting.

131
00:06:55,120 --> 00:06:58,463
There are two types of attacks
surfaces of Windows printing.

132
00:06:59,610 --> 00:07:02,163
First, the Local Attack Surface.

133
00:07:03,310 --> 00:07:06,330
In order to serve applications
and other components

134
00:07:06,330 --> 00:07:08,950
running at different privilege levels,

135
00:07:08,950 --> 00:07:11,710
Windows printing made
many of its interfaces

136
00:07:11,710 --> 00:07:13,250
available to applications

137
00:07:13,250 --> 00:07:15,433
running at lower privilege levels.

138
00:07:16,630 --> 00:07:19,743
Abusing them, may cause
Local Privilege Escalation.

139
00:07:22,180 --> 00:07:25,470
Second, the Remote Attack Surface.

140
00:07:25,470 --> 00:07:28,630
Inclined server printing
model, poster print server,

141
00:07:28,630 --> 00:07:31,653
and print client would suffer
from the potential attack.

142
00:07:32,940 --> 00:07:36,380
For the print server, is shares
the printer to other users

143
00:07:36,380 --> 00:07:39,743
and expose itself to potential
attacks in the network.

144
00:07:40,810 --> 00:07:41,980
For a print client,

145
00:07:41,980 --> 00:07:44,730
it may be attacked by a
malicious print server,

146
00:07:44,730 --> 00:07:46,643
also known as evil printer.

147
00:07:48,840 --> 00:07:50,890
What happens behind
the scenes when Windows

148
00:07:50,890 --> 00:07:52,123
connects to a printer?

149
00:07:54,390 --> 00:07:57,870
If a user wants to do print
jobs through a print server,

150
00:07:57,870 --> 00:08:00,223
they must actively connect
to the print server.

151
00:08:01,240 --> 00:08:03,110
There are many methods for print client

152
00:08:03,110 --> 00:08:05,250
to connect to a print server.

153
00:08:05,250 --> 00:08:07,300
If you are familiar with PowerShell,

154
00:08:07,300 --> 00:08:10,240
you could use Add-Printer
command line to add a new network

155
00:08:10,240 --> 00:08:13,990
printer connection by specifying
the name of a print server,

156
00:08:13,990 --> 00:08:15,943
and a shared printer on that server.

157
00:08:16,990 --> 00:08:18,470
If you want to programme,

158
00:08:18,470 --> 00:08:21,650
Microsoft provides
Win32 print spooler API,

159
00:08:21,650 --> 00:08:24,597
such as AddPrinterConnection,
and AddPrinterConnection2.

160
00:08:27,220 --> 00:08:31,850
And you could also use the
GUI provided by printui/im

161
00:08:31,850 --> 00:08:34,093
to select a shared printer by name.

162
00:08:36,460 --> 00:08:38,810
Although many methods could
be used for connecting

163
00:08:38,810 --> 00:08:40,730
to a specified print server,

164
00:08:40,730 --> 00:08:43,330
they could be traced to the one same API,

165
00:08:43,330 --> 00:08:44,430
AddPrinterConnection2.

166
00:08:46,470 --> 00:08:49,710
This API, adds a connection
to the specified printer

167
00:08:49,710 --> 00:08:53,920
for the current user and
specify the connection details.

168
00:08:53,920 --> 00:08:56,380
The print server, and shared printer name

169
00:08:56,380 --> 00:08:58,793
are passed in through parameter pszName.

170
00:09:03,619 --> 00:09:05,070
When adding printer connection,

171
00:09:05,070 --> 00:09:07,150
if the print client needs to download

172
00:09:07,150 --> 00:09:11,240
and install a printer driver
from a remote print server,

173
00:09:11,240 --> 00:09:13,410
it will show a warning
dialogue to ask a user

174
00:09:13,410 --> 00:09:16,023
to install the driver
or cancel the request.

175
00:09:17,610 --> 00:09:20,260
What's the purpose of
this warning dialogue?

176
00:09:20,260 --> 00:09:21,680
About four years ago,

177
00:09:21,680 --> 00:09:25,750
security researchers from
Victoria AI found a remote code

178
00:09:25,750 --> 00:09:29,910
execution vulnerability in
Windows print spooler service.

179
00:09:29,910 --> 00:09:32,140
The root cause of this vulnerability,

180
00:09:32,140 --> 00:09:34,260
is print client would load and install

181
00:09:34,260 --> 00:09:36,150
a malicious printer driver

182
00:09:36,150 --> 00:09:38,453
from attacker control print server.

183
00:09:39,390 --> 00:09:41,120
To address this vulnerability,

184
00:09:41,120 --> 00:09:44,030
Microsoft simply added a warning dialogue

185
00:09:44,030 --> 00:09:47,690
before installing on
trusted printer drivers.

186
00:09:47,690 --> 00:09:49,860
It does protect the print client

187
00:09:49,860 --> 00:09:53,253
from installing printer
drivers without a user concent.

188
00:09:54,140 --> 00:09:56,683
But is this protection sufficient?

189
00:09:58,260 --> 00:10:00,000
In order to answer this question,

190
00:10:00,000 --> 00:10:01,710
let's take into the implementation

191
00:10:01,710 --> 00:10:04,600
of AddPrinterConnection2 first.

192
00:10:04,600 --> 00:10:06,970
Any applications or print client,

193
00:10:06,970 --> 00:10:09,260
that code AddPrinterConnection2 API

194
00:10:09,260 --> 00:10:12,590
would send an RPC call
to print spooler service

195
00:10:12,590 --> 00:10:13,783
on printer client.

196
00:10:15,410 --> 00:10:18,060
The remote function code is
RPCAddPrinterconnection2.

197
00:10:20,670 --> 00:10:23,630
If the print client is trying
to add a remote print server,

198
00:10:23,630 --> 00:10:25,570
the print spooler on print client,

199
00:10:25,570 --> 00:10:29,320
would try to communicate with
print spooler on print server

200
00:10:29,320 --> 00:10:30,993
and get information from it.

201
00:10:33,020 --> 00:10:35,620
When print server is fully controllable,

202
00:10:35,620 --> 00:10:38,040
it is obvious that the data
back to the print spooler

203
00:10:38,040 --> 00:10:38,950
on print client,

204
00:10:38,950 --> 00:10:41,453
it's also fully controllable
by print server.

205
00:10:42,940 --> 00:10:44,260
For print client,

206
00:10:44,260 --> 00:10:47,103
it is an input source
that cannot be trusted.

207
00:10:48,390 --> 00:10:51,460
If delivery information
is not fully verified,

208
00:10:51,460 --> 00:10:53,893
it would cause critical security issues.

209
00:10:55,700 --> 00:10:57,260
Information from the print server

210
00:10:57,260 --> 00:11:00,190
would be handled by print
spooler on print client.

211
00:11:00,190 --> 00:11:01,420
After finishing,

212
00:11:01,420 --> 00:11:05,017
it would return to the color
of AddPrinterConnection2.

213
00:11:06,798 --> 00:11:09,210
AddPrinterConnection2,
would get the return value

214
00:11:09,210 --> 00:11:11,903
from print spooler and
print client directly.

215
00:11:12,940 --> 00:11:14,800
Error code 0xBB9,

216
00:11:14,800 --> 00:11:17,290
which is error printer
driver download needed

217
00:11:17,290 --> 00:11:19,200
is a special case.

218
00:11:19,200 --> 00:11:21,979
The error, just as the name described.

219
00:11:21,979 --> 00:11:25,050
It means the print client does
not have the required drivers

220
00:11:25,050 --> 00:11:27,500
and needs to be downloaded
from the print server.

221
00:11:28,690 --> 00:11:32,970
Apparently receiving this error,
the AddPrinterConnection2,

222
00:11:32,970 --> 00:11:35,100
well immediately start
to download and install

223
00:11:35,100 --> 00:11:36,213
the needed driver.

224
00:11:37,400 --> 00:11:40,843
It cost the function,
DownloadAndInstallLegacyDriver.

225
00:11:41,870 --> 00:11:44,140
This function would load a new module,

226
00:11:44,140 --> 00:11:46,700
ntprint, and call function

227
00:11:46,700 --> 00:11:49,783
PSetupDownloadAndInstallLegacyDriver.

228
00:11:51,710 --> 00:11:53,250
But before the real download,

229
00:11:53,250 --> 00:11:56,200
you would call display
warning for download driver,

230
00:11:56,200 --> 00:11:57,690
to show a warning dialogue

231
00:11:57,690 --> 00:12:01,273
for user to choose to install
the driver, or just cancel.

232
00:12:03,280 --> 00:12:05,870
You would call,
DownloadAndInstallLegacyDriver function

233
00:12:05,870 --> 00:12:08,530
to finish the installation
of remote printer,

234
00:12:08,530 --> 00:12:10,593
only if the user confirms to install.

235
00:12:12,090 --> 00:12:14,160
This is the most common scenario

236
00:12:14,160 --> 00:12:16,203
of adding a new network printer.

237
00:12:17,670 --> 00:12:19,280
But as we have described,

238
00:12:19,280 --> 00:12:21,710
Windows printing has two
different mechanisms;

239
00:12:21,710 --> 00:12:25,060
Point-And-Print, and
package Point-And-Print.

240
00:12:25,060 --> 00:12:28,260
To download the correct printer drivers.

241
00:12:28,260 --> 00:12:31,513
So which mechanism does it
use in your common case?

242
00:12:32,820 --> 00:12:34,600
In order to know the implementation

243
00:12:34,600 --> 00:12:36,980
of a DownloadAandInstallLegacyDriver,

244
00:12:36,980 --> 00:12:40,740
we do not want to do too much
reverse engineering works.

245
00:12:40,740 --> 00:12:43,510
Instead, we prefer to
observe the behaviour

246
00:12:43,510 --> 00:12:44,953
of our operations.

247
00:12:46,080 --> 00:12:47,930
And we really recommend you doing this,

248
00:12:47,930 --> 00:12:50,560
especially when you are
analyzing a complex application

249
00:12:50,560 --> 00:12:52,713
or want to find some logical bugs.

250
00:12:54,070 --> 00:12:56,770
Here we use process monitor
to capture the driver,

251
00:12:56,770 --> 00:12:58,243
download operations.

252
00:12:59,770 --> 00:13:03,450
This screenshot shows defy
operation of print spooler

253
00:13:03,450 --> 00:13:04,830
on print client,

254
00:13:04,830 --> 00:13:06,993
after we confirm to install the driver.

255
00:13:08,340 --> 00:13:10,820
We noticed the print
spooler on print client

256
00:13:10,820 --> 00:13:14,330
reads information through
RPC from the print server,

257
00:13:14,330 --> 00:13:16,090
and then write the print driver files

258
00:13:16,090 --> 00:13:18,763
to a temporary directory directly.

259
00:13:20,290 --> 00:13:23,420
This is the whole procedure
of downloading printer driver

260
00:13:23,420 --> 00:13:24,463
from print server.

261
00:13:28,030 --> 00:13:30,150
After the printer driver is downloaded,

262
00:13:30,150 --> 00:13:32,760
it should be installed so
the print client could use it

263
00:13:32,760 --> 00:13:34,373
to do client-side rendering.

264
00:13:35,530 --> 00:13:38,400
And we could notice from file operations,

265
00:13:38,400 --> 00:13:40,320
that the drivers in temporary directory

266
00:13:40,320 --> 00:13:42,523
are moved to the system driver directory.

267
00:13:44,730 --> 00:13:48,570
This is the procedure of
printer driver installation.

268
00:13:48,570 --> 00:13:51,320
Now the printer driver is
successfully downloaded

269
00:13:51,320 --> 00:13:52,243
and installed.

270
00:13:54,070 --> 00:13:56,400
So which mechanism is this?

271
00:13:56,400 --> 00:13:58,430
We did not see any package here.

272
00:13:58,430 --> 00:14:01,530
It seems all printer drivers
are directly downloaded from

273
00:14:01,530 --> 00:14:03,230
the print server.

274
00:14:03,230 --> 00:14:05,533
So it seems to be Point-And-Print.

275
00:14:06,960 --> 00:14:09,270
So why does the current print client

276
00:14:09,270 --> 00:14:12,090
only used the Point-And-Print mechanism?

277
00:14:12,090 --> 00:14:14,700
How does the print client and server,

278
00:14:14,700 --> 00:14:16,633
negotiate which one to use?

279
00:14:17,580 --> 00:14:20,170
How to enable the package Point-And-Print

280
00:14:22,590 --> 00:14:23,850
to answer this question,

281
00:14:23,850 --> 00:14:26,730
we take into the
RPCAddPrinterConnection2 function

282
00:14:26,730 --> 00:14:27,940
in print spooler.

283
00:14:28,910 --> 00:14:30,950
The procedure of AddPrinterConnection2

284
00:14:30,950 --> 00:14:32,560
is very complex.

285
00:14:32,560 --> 00:14:34,440
We found the adding
connection and operation

286
00:14:34,440 --> 00:14:35,970
of the remote printer,

287
00:14:35,970 --> 00:14:38,623
is handled by the Win32spl module.

288
00:14:39,690 --> 00:14:40,523
You will try to code the,

289
00:14:40,523 --> 00:14:44,760
CreateLocalPrinter function
to create a local printer.

290
00:14:44,760 --> 00:14:48,590
Then it uses acquire V3 driver
and add printer function

291
00:14:48,590 --> 00:14:50,023
to get printer driver.

292
00:14:51,170 --> 00:14:52,820
Before getting a driver,

293
00:14:52,820 --> 00:14:55,870
it needs to DetermineInstallType.

294
00:14:55,870 --> 00:14:56,770
In this function,

295
00:14:56,770 --> 00:14:59,743
it tries to go, CheckPackagePointAndPrint.

296
00:15:01,780 --> 00:15:04,160
This function name seems to indicate,

297
00:15:04,160 --> 00:15:06,270
you would determine to
use to Point-And-Print

298
00:15:06,270 --> 00:15:08,333
or package Point-And-Print mechanism.

299
00:15:10,520 --> 00:15:13,440
But how does the function
CheckPackagePointAndPrint

300
00:15:13,440 --> 00:15:15,960
determines new mechanisms?

301
00:15:15,960 --> 00:15:17,563
Let's see the implementation.

302
00:15:19,290 --> 00:15:21,093
Here is it's pseudo code.

303
00:15:21,980 --> 00:15:26,330
If there's a byte one,
0xA8 offset of an object,

304
00:15:26,330 --> 00:15:29,633
the print spooler would download
and input driver packages.

305
00:15:30,540 --> 00:15:32,580
But what is this object?

306
00:15:32,580 --> 00:15:34,210
Where it comes from?

307
00:15:34,210 --> 00:15:36,743
And can we control it
from the print server?

308
00:15:39,210 --> 00:15:41,270
We found the print client gets that object

309
00:15:41,270 --> 00:15:44,133
by calling function
RemoteGetPrinterDriver.

310
00:15:45,000 --> 00:15:47,723
The function in fact,
it's just an RPC stop.

311
00:15:49,170 --> 00:15:51,590
The real implementation is
RPCAsyncGetPrinterDdriver

312
00:15:52,780 --> 00:15:54,903
in print spooler of print server.

313
00:15:56,180 --> 00:16:00,150
The object is a return data
from a remote print server.

314
00:16:00,150 --> 00:16:02,773
So it is fully controllable
by print server.

315
00:16:04,600 --> 00:16:06,710
The structure of the returned object,

316
00:16:06,710 --> 00:16:09,023
is a driver info eight.

317
00:16:10,580 --> 00:16:14,560
And we could know that at the 0xa8 offset,

318
00:16:14,560 --> 00:16:16,210
is the dwPrinterDriverAttributes.

319
00:16:18,690 --> 00:16:20,940
The objects has many
other interesting items,

320
00:16:20,940 --> 00:16:24,833
such as driver path, config
path and inf path, and so on.

321
00:16:25,990 --> 00:16:28,180
Your definitions of
printer driver attributes

322
00:16:28,180 --> 00:16:31,363
could be found in a Windows
10 software department kit.

323
00:16:32,320 --> 00:16:35,230
What we care about, is just a value one,

324
00:16:35,230 --> 00:16:37,763
which is printer driver package aware.

325
00:16:38,730 --> 00:16:42,583
It means, the printer driver
is part of a driver package.

326
00:16:45,040 --> 00:16:46,603
Now the things get clear,

327
00:16:47,530 --> 00:16:50,520
if the printer driver
attributes of the print server

328
00:16:50,520 --> 00:16:52,907
is printer driver package aware,

329
00:16:52,907 --> 00:16:55,630
the print client would use
the package Point-And-Print

330
00:16:55,630 --> 00:16:58,663
mechanisms to download an
important package drivers.

331
00:17:01,150 --> 00:17:03,670
The mechanism you use to
download print drivers are solely

332
00:17:03,670 --> 00:17:06,820
determined by the gray mode print server.

333
00:17:06,820 --> 00:17:09,563
That seems very interesting
and may be dangerous.

334
00:17:12,190 --> 00:17:15,633
What is a driver package
in package Point-And-Print?

335
00:17:17,340 --> 00:17:20,420
A driver package, is just
a collection of files

336
00:17:20,420 --> 00:17:23,233
that are needed to successfully
load the printer driver.

337
00:17:24,510 --> 00:17:27,090
It may contain a device information file,

338
00:17:27,090 --> 00:17:30,833
a catalog file, and all files
copied by information file.

339
00:17:32,920 --> 00:17:35,080
Now we know how to force the print client

340
00:17:35,080 --> 00:17:37,777
to use to package
Point-And-Print mechanism,

341
00:17:37,777 --> 00:17:40,190
and we know the print
client would try to download

342
00:17:40,190 --> 00:17:43,000
a package driver from the print server,

343
00:17:43,000 --> 00:17:46,310
but where does print client
gets the package from?

344
00:17:46,310 --> 00:17:48,603
Can we control the package content?

345
00:17:50,620 --> 00:17:52,160
After some research,

346
00:17:52,160 --> 00:17:54,270
we found that all printer driver packages

347
00:17:54,270 --> 00:17:57,000
are stored in a PCC directory.

348
00:17:57,000 --> 00:17:59,690
And the file name of package
driver is very interesting.

349
00:17:59,690 --> 00:18:03,030
It is the final directory
name of the inf path

350
00:18:03,030 --> 00:18:04,763
and print driver info.

351
00:18:09,440 --> 00:18:12,440
If the print client knows
the print server wants to use

352
00:18:12,440 --> 00:18:15,130
package Point-And-Print mechanism,

353
00:18:15,130 --> 00:18:18,290
you would download and
import driver packages.

354
00:18:18,290 --> 00:18:21,110
But before import ,the print
client would first download

355
00:18:21,110 --> 00:18:23,433
the driver package and then extract it.

356
00:18:25,038 --> 00:18:27,300
The print client would
use key driver install,

357
00:18:27,300 --> 00:18:32,230
internal copy file to copy
driver packages from print server

358
00:18:32,230 --> 00:18:35,980
that you would use
NCabbingLibrary, LegacyCapUnpack,

359
00:18:35,980 --> 00:18:37,683
to extract the package.

360
00:18:38,820 --> 00:18:40,840
And the most important thing is,

361
00:18:40,840 --> 00:18:43,070
the download and extract operations

362
00:18:43,070 --> 00:18:46,563
are all happened before
showing the warning dialogue.

363
00:18:47,540 --> 00:18:49,643
It seems that this could be abused.

364
00:18:51,660 --> 00:18:55,580
We know that the driver
package is a cabinet file.

365
00:18:55,580 --> 00:18:58,210
A cabinet file, is archive file format

366
00:18:58,210 --> 00:18:59,443
for Microsoft Windows.

367
00:19:00,660 --> 00:19:04,990
It is ancient and has
existed for many years.

368
00:19:04,990 --> 00:19:09,010
It has the suffix .cap,
and acts like a container

369
00:19:09,010 --> 00:19:10,143
for other files.

370
00:19:12,310 --> 00:19:14,740
In order to extract the cabin file,

371
00:19:14,740 --> 00:19:16,170
Microsoft provides a lot of

372
00:19:16,170 --> 00:19:19,420
file decompression interface APIs.

373
00:19:19,420 --> 00:19:21,920
Here are some examples.

374
00:19:21,920 --> 00:19:26,830
First, FDICreate is used
to create a FDI context

375
00:19:26,830 --> 00:19:29,770
for cabinet file operations.

376
00:19:29,770 --> 00:19:33,430
Next, FDI copy is the most important one.

377
00:19:33,430 --> 00:19:35,953
It is used to extract files from cabinet.

378
00:19:38,410 --> 00:19:41,620
FDI destroy, deletes
and open the FDI context

379
00:19:41,620 --> 00:19:43,923
after the cabinet operations.

380
00:19:45,460 --> 00:19:47,600
FDICopy is the primary API

381
00:19:47,600 --> 00:19:49,573
for extracting files from the cabinet.

382
00:19:50,580 --> 00:19:53,950
This API is designed to be very flexible.

383
00:19:53,950 --> 00:19:56,010
It provides application-defined callback

384
00:19:56,010 --> 00:19:59,070
notification functions
to update the application

385
00:19:59,070 --> 00:20:00,823
on the status of a decompressor.

386
00:20:02,810 --> 00:20:05,640
So the behavior of cabinet extraction,

387
00:20:05,640 --> 00:20:08,290
is highly dependent on the implementation

388
00:20:08,290 --> 00:20:10,063
of users of the API.

389
00:20:11,110 --> 00:20:12,297
As we have described,

390
00:20:12,297 --> 00:20:16,800
the print client would use
NCabbingLibrary:LegacyCabUnpack,

391
00:20:16,800 --> 00:20:19,593
to extract files from
the downloaded cab files.

392
00:20:20,570 --> 00:20:23,860
This function use FDI
copy to extract files,

393
00:20:23,860 --> 00:20:25,533
we send notification callback.

394
00:20:26,860 --> 00:20:28,610
NCabbingLibrary, FdiCabNotify

395
00:20:28,610 --> 00:20:31,283
to control the extraction
operation of files.

396
00:20:34,700 --> 00:20:36,430
In the callback notification,

397
00:20:36,430 --> 00:20:40,860
you would receive the
fdintCOPY_FILE notfication

398
00:20:40,860 --> 00:20:42,983
to handle copy file operation.

399
00:20:44,870 --> 00:20:48,203
This is part of a pseudo
code of copy file processing.

400
00:20:50,940 --> 00:20:53,599
The copy file operation would finally call

401
00:20:53,599 --> 00:20:57,537
the NCabbingLibrary:ProcessCopyFile.

402
00:20:57,537 --> 00:20:58,890
The ProcessCopyFile,

403
00:20:58,890 --> 00:21:01,830
first call NcabbingLibrary:
:CreateFullPath,

404
00:21:01,830 --> 00:21:04,970
to create a directory, if
the specified directory

405
00:21:04,970 --> 00:21:06,273
does not exist.

406
00:21:08,070 --> 00:21:09,830
When creating the FullPath,

407
00:21:09,830 --> 00:21:12,913
you would check if the past ..\.

408
00:21:14,260 --> 00:21:17,110
If it has, the function with
just returned with an error.

409
00:21:18,810 --> 00:21:21,530
But it forgot to check the ../,

410
00:21:21,530 --> 00:21:23,660
which also works on Windows OS,

411
00:21:23,660 --> 00:21:25,923
and it could be used to do path reversal.

412
00:21:27,510 --> 00:21:29,380
After creating the full path,

413
00:21:29,380 --> 00:21:32,820
it would then call the open
function to open the file.

414
00:21:32,820 --> 00:21:34,650
If the file does not exist,

415
00:21:34,650 --> 00:21:37,253
it would create the file
via the Ocreate flag.

416
00:21:39,200 --> 00:21:43,000
Now it is obvious, that there
is a path traversal issue,

417
00:21:43,000 --> 00:21:46,313
from print client, extract to
download it to cabinet file.

418
00:21:47,260 --> 00:21:50,393
And the cabinet file is
provided by a print server.

419
00:21:51,640 --> 00:21:54,283
Let's try to make a malformed cab file.

420
00:21:56,270 --> 00:21:59,560
Windows has provided to comment makecab,

421
00:21:59,560 --> 00:22:01,023
for cabinet file creation.

422
00:22:02,010 --> 00:22:03,250
However,

423
00:22:03,250 --> 00:22:06,300
makecab could not create
cabinet file with the file name

424
00:22:06,300 --> 00:22:07,643
contain slashes.

425
00:22:09,630 --> 00:22:12,250
So we decided to create a simple cab,

426
00:22:12,250 --> 00:22:14,020
and then change the name of a file,

427
00:22:14,020 --> 00:22:15,263
we send on the program.

428
00:22:17,300 --> 00:22:20,633
Here we used makecab to create a test.cab.

429
00:22:22,010 --> 00:22:23,600
After we have a cabinet file,

430
00:22:23,600 --> 00:22:26,830
we try to change the file
name inside the cabinet file.

431
00:22:26,830 --> 00:22:29,380
We use the programs such as seven zip,

432
00:22:29,380 --> 00:22:31,393
and try to edit to the name of the file.

433
00:22:33,560 --> 00:22:36,113
But the file name is not editable.

434
00:22:37,240 --> 00:22:39,410
That's very sad.

435
00:22:39,410 --> 00:22:40,493
Are we doomed?

436
00:22:42,800 --> 00:22:44,640
No, that could not stop us.

437
00:22:44,640 --> 00:22:47,440
We could still modify the
file names directly in binary.

438
00:22:49,243 --> 00:22:51,943
Let's add it to the file
name, with the hex editor.

439
00:22:53,520 --> 00:22:55,320
Here we use a small trick,

440
00:22:55,320 --> 00:22:58,623
using one's and two's in
file names as placeholders.

441
00:22:59,600 --> 00:23:01,810
We just modify all the ones in file names,

442
00:23:01,810 --> 00:23:04,453
to dot and twos, to slash.

443
00:23:06,840 --> 00:23:08,110
After the modification,

444
00:23:08,110 --> 00:23:12,240
we use unzip program to
open the cabinet file again.

445
00:23:12,240 --> 00:23:13,830
It can be successfully opened,

446
00:23:13,830 --> 00:23:16,490
and the file name contains ../

447
00:23:16,490 --> 00:23:18,773
that could be used to do path reversal.

448
00:23:19,610 --> 00:23:21,753
We now have a malformed cabinet.

449
00:23:24,140 --> 00:23:26,310
Replace the cabinet
file in the print server

450
00:23:26,310 --> 00:23:29,353
was this malformed cab to
make it an evil printer.

451
00:23:32,530 --> 00:23:34,970
Let's make an evil printer.

452
00:23:34,970 --> 00:23:35,803
First,

453
00:23:35,803 --> 00:23:38,183
we should have a fully
controllable print server.

454
00:23:39,090 --> 00:23:40,830
To prepare a print server,

455
00:23:40,830 --> 00:23:43,600
we prefer to use a virtual PDF printer

456
00:23:43,600 --> 00:23:44,800
to simulate the printer

457
00:23:44,800 --> 00:23:46,973
instead of getting a
real physical printer.

458
00:23:48,630 --> 00:23:51,510
There are many virtual
printer products available.

459
00:23:51,510 --> 00:23:54,273
Here, we randomly choose
one, the CutePDFWriter.

460
00:23:55,760 --> 00:23:57,953
Or other virtual printers
should also work.

461
00:23:59,770 --> 00:24:03,430
To prepare a workable
print server, is very easy.

462
00:24:03,430 --> 00:24:06,730
Just install the printer and
then share the sprinter so that

463
00:24:06,730 --> 00:24:09,353
any user on your network can print to it.

464
00:24:10,310 --> 00:24:13,403
Here, we just share the printer
with the share name Test.

465
00:24:15,720 --> 00:24:18,960
Now we have got a falling
controllable print server.

466
00:24:18,960 --> 00:24:21,633
You will wait for a print
client to connect to it.

467
00:24:23,520 --> 00:24:25,950
Because the print server
is fully controllable,

468
00:24:25,950 --> 00:24:29,100
we have many ways to change
the return data before it sends

469
00:24:29,100 --> 00:24:30,323
to the print client.

470
00:24:31,500 --> 00:24:34,880
The easiest way is to change
the real printer driver info

471
00:24:34,880 --> 00:24:36,390
of the shared printer.

472
00:24:37,770 --> 00:24:39,020
We found the print server,

473
00:24:39,020 --> 00:24:41,980
store all the definitions of
printer driver information

474
00:24:41,980 --> 00:24:43,053
in the registry.

475
00:24:44,760 --> 00:24:46,450
As shown in this screenshot,

476
00:24:46,450 --> 00:24:49,460
we could now the default
print driver attribute

477
00:24:49,460 --> 00:24:51,863
of CutePDF Writer is zero.

478
00:24:54,740 --> 00:24:58,393
Now, let's make a package
Point-And-Print print server.

479
00:24:59,690 --> 00:25:03,200
First, we need to make sure
the printer driver attributes

480
00:25:03,200 --> 00:25:05,270
of the shared printer is one.

481
00:25:05,270 --> 00:25:06,330
So that print client,

482
00:25:06,330 --> 00:25:09,283
would use to package
Point-And-Print mechanism.

483
00:25:11,000 --> 00:25:13,720
Next, we need to configure
the driver package

484
00:25:13,720 --> 00:25:15,243
that will be downloaded.

485
00:25:16,720 --> 00:25:18,220
As we have described,

486
00:25:18,220 --> 00:25:20,510
the package name comes
from the directory name

487
00:25:20,510 --> 00:25:21,363
of the inf path.

488
00:25:22,960 --> 00:25:27,597
Here, we configure it to C:\test\test.inf.

489
00:25:29,560 --> 00:25:31,843
And make sure the info exists.

490
00:25:33,260 --> 00:25:35,710
The package name, that will be downloaded,

491
00:25:35,710 --> 00:25:37,367
it should be test.cab.

492
00:25:40,000 --> 00:25:43,700
We just needed to place
a prepared test.cab

493
00:25:43,700 --> 00:25:45,313
to the PCC directory.

494
00:25:46,910 --> 00:25:49,553
Now we finally have a
workable evil printer.

495
00:25:51,190 --> 00:25:53,790
This screenshot shows how to configure

496
00:25:53,790 --> 00:25:56,280
the prepared cutePDF writer printer

497
00:25:56,280 --> 00:25:58,490
to use the package
Point-And-Print mechanism

498
00:25:58,490 --> 00:26:02,100
and convert it to evil printer.

499
00:26:02,100 --> 00:26:04,160
What will happen if a print client

500
00:26:04,160 --> 00:26:06,283
tries to connect to this evil printer?

501
00:26:07,746 --> 00:26:11,060
We could see, the print
spooler in print client,

502
00:26:11,060 --> 00:26:13,980
download the test.cabfile
from the print server,

503
00:26:13,980 --> 00:26:16,323
and then extract the cabinet file.

504
00:26:17,830 --> 00:26:20,450
Because of the path traversal bug,

505
00:26:20,450 --> 00:26:25,450
C:\Windows\systems32\diagnostic
services\USERENV.dil

506
00:26:28,610 --> 00:26:29,643
is created.

507
00:26:30,940 --> 00:26:33,350
Because the print spooler service

508
00:26:33,350 --> 00:26:35,840
is running with system privilege,

509
00:26:35,840 --> 00:26:39,170
the evil printer could write
arbitrary file to print client

510
00:26:39,170 --> 00:26:41,320
with system privilege.

511
00:26:41,320 --> 00:26:44,740
It is a logical bug
and works very stabley.

512
00:26:44,740 --> 00:26:47,750
Okay, now we have covered the
remote code execution part

513
00:26:47,750 --> 00:26:48,943
of the evil printer.

514
00:26:49,780 --> 00:26:52,040
This attack only needs to print client

515
00:26:52,040 --> 00:26:54,433
to make a connection
attempt to your printer.

516
00:26:55,580 --> 00:26:58,003
But, can this vulnerability do more?

517
00:26:59,580 --> 00:27:00,730
Three years ago,

518
00:27:00,730 --> 00:27:03,400
James Forshaw did an excellent
talk oncoming tunnels,

519
00:27:03,400 --> 00:27:06,180
and the Microsoft edge sandbox.

520
00:27:06,180 --> 00:27:07,340
During his talk,

521
00:27:07,340 --> 00:27:09,600
he demoed a scan of comm service

522
00:27:09,600 --> 00:27:12,723
reachable from insight
to Microsoft app sandbox.

523
00:27:14,810 --> 00:27:16,580
He must be hinting something

524
00:27:16,580 --> 00:27:20,163
by highlighting that specific
comm server during his talk.

525
00:27:22,230 --> 00:27:25,690
Sandbox is an essential security mechanism

526
00:27:25,690 --> 00:27:28,250
in modern security architectures.

527
00:27:28,250 --> 00:27:32,790
Sandbox escapes, are important
security research target.

528
00:27:32,790 --> 00:27:35,673
So how does evil printer affect sandboxes?

529
00:27:38,070 --> 00:27:41,610
Microsoft Edge renderer process,
is the most restricted app

530
00:27:41,610 --> 00:27:43,653
container sandbox on Windows.

531
00:27:44,530 --> 00:27:48,020
Microsoft has kept reduced
attack surfaces of it

532
00:27:48,020 --> 00:27:49,233
for many years.

533
00:27:50,480 --> 00:27:52,810
The interfaces that could be accessed

534
00:27:52,810 --> 00:27:55,890
from inside the sandbox
is fewer and fewer,

535
00:27:55,890 --> 00:27:58,963
but the printing service
has always been one of them.

536
00:28:00,460 --> 00:28:03,550
Until now, the process
token of render process

537
00:28:03,550 --> 00:28:07,140
still has to capability LPAC printing.

538
00:28:07,140 --> 00:28:08,820
It means the render process

539
00:28:08,820 --> 00:28:10,723
could access the printing service.

540
00:28:12,060 --> 00:28:13,940
Using OleView.NET,

541
00:28:13,940 --> 00:28:18,100
we found the comm service
see print ticket ww services,

542
00:28:18,100 --> 00:28:22,730
can be launched and accessed
with capability LPAC printing.

543
00:28:22,730 --> 00:28:24,320
So you could be called

544
00:28:24,320 --> 00:28:26,823
by the Microsoft Edge render process.

545
00:28:29,700 --> 00:28:34,460
The C printer tickets server
provides an interface bind.

546
00:28:34,460 --> 00:28:37,713
This is used to bind
to a specific printer.

547
00:28:38,820 --> 00:28:40,600
If we bind to an evil printer,

548
00:28:40,600 --> 00:28:43,330
it will also trigger the
availability so we could use it

549
00:28:43,330 --> 00:28:45,223
to escape from the sandbox.

550
00:28:48,260 --> 00:28:52,790
AppContainer processes are
not allowed to create files,

551
00:28:52,790 --> 00:28:54,270
but we could use this vulnerability

552
00:28:54,270 --> 00:28:56,403
to create arbitrary files.

553
00:28:58,060 --> 00:29:00,530
The AppContainer process
can launch and access

554
00:29:00,530 --> 00:29:02,193
C print tickets comm server.

555
00:29:03,550 --> 00:29:07,000
The server is implemented in
print ticket services module

556
00:29:07,000 --> 00:29:10,283
and launched by deal hosts
with medium integrity level.

557
00:29:12,102 --> 00:29:12,935
The bind interface,

558
00:29:12,935 --> 00:29:15,833
which called C print
tickets service-based bind.

559
00:29:17,120 --> 00:29:18,430
In this function,

560
00:29:18,430 --> 00:29:21,430
it would open a remote print
server and get to print driver

561
00:29:21,430 --> 00:29:23,594
from print server.

562
00:29:23,594 --> 00:29:24,920
This would also trigger the bug

563
00:29:24,920 --> 00:29:27,733
if it's connecting to an evil printer.

564
00:29:29,590 --> 00:29:32,750
So we could escape the
Edge render sandbox,

565
00:29:32,750 --> 00:29:36,023
and execute arbitrary code
with system privilege.

566
00:29:39,740 --> 00:29:41,703
Next let's do a real demo.

567
00:29:42,820 --> 00:29:45,710
In this demo, we have two computers,

568
00:29:45,710 --> 00:29:47,633
the victim and the attacker.

569
00:29:48,550 --> 00:29:50,780
The victim is a printed client.

570
00:29:50,780 --> 00:29:52,733
And attacker is the evil printer.

571
00:29:54,260 --> 00:29:57,480
First, let's see the evil printer.

572
00:29:57,480 --> 00:30:00,620
We have notified a driver
info of a shared printer.

573
00:30:01,920 --> 00:30:02,810
We modified it.

574
00:30:02,810 --> 00:30:05,320
Printer driver attributes to one,

575
00:30:05,320 --> 00:30:10,320
and then set the info path
item two C:\test\test.inf.

576
00:30:12,900 --> 00:30:16,483
And we have a place to
test.cab at the PCC directory.

577
00:30:18,660 --> 00:30:21,453
Next, let's go to the victim's computer.

578
00:30:22,320 --> 00:30:25,110
You can say there's no USERENV.dil,

579
00:30:25,110 --> 00:30:27,363
in diagnostic services directory.

580
00:30:28,890 --> 00:30:31,670
Now, we tried to connect
to the evil printer

581
00:30:31,670 --> 00:30:34,033
for a Microsoft Edge render a sandbox.

582
00:30:36,110 --> 00:30:39,690
Here, we simulate a code
execution inside the sandbox

583
00:30:39,690 --> 00:30:43,303
by injecting or exploit deal
into the render process.

584
00:30:47,330 --> 00:30:49,340
We could see the one dialogue,

585
00:30:49,340 --> 00:30:51,500
and we could find a USERENV.dil,

586
00:30:51,500 --> 00:30:53,873
present in the diagnostic
services directory.

587
00:30:55,470 --> 00:30:56,303
In fact,

588
00:30:56,303 --> 00:30:58,480
the evil printer could
write arbitrary file

589
00:30:58,480 --> 00:30:59,883
with system privilege.

590
00:31:04,980 --> 00:31:09,290
The patch of the vulnerability
is extremely simple.

591
00:31:09,290 --> 00:31:11,410
We have known the root
cause of the vulnerability

592
00:31:11,410 --> 00:31:15,717
is because win32spl,
NcabbingLibrary:ProcessCopyFile,

593
00:31:17,100 --> 00:31:20,170
does not properly handle the ../.

594
00:31:20,170 --> 00:31:22,560
So the patch just check both slashes

595
00:31:22,560 --> 00:31:27,163
before process copy file to
prevent path traversal issues.

596
00:31:29,730 --> 00:31:30,563
Finally,

597
00:31:30,563 --> 00:31:33,190
we want to talk about the
possible attack scenarios

598
00:31:33,190 --> 00:31:34,503
of this vulnerability.

599
00:31:36,310 --> 00:31:39,510
For lateral movement, the
attacker can modify a printer

600
00:31:39,510 --> 00:31:41,913
trusted by the victim to evil printer.

601
00:31:43,340 --> 00:31:44,977
For remote code execution,

602
00:31:44,977 --> 00:31:46,950
the attacker could convince the victim

603
00:31:46,950 --> 00:31:48,840
to connect to a evil printer.

604
00:31:50,240 --> 00:31:51,900
For privileged escalation,

605
00:31:51,900 --> 00:31:53,890
the attacker could make
a connection attempt

606
00:31:53,890 --> 00:31:57,050
to a evil printer,
(mumbles) privilege the user

607
00:31:57,050 --> 00:31:58,933
all from inside the sandbox.

608
00:32:00,530 --> 00:32:02,160
For all the about scenarios,

609
00:32:02,160 --> 00:32:04,500
the attacker immediately
gets code execution

610
00:32:04,500 --> 00:32:07,973
as system has complete control
of the victim's computer.

611
00:32:10,060 --> 00:32:12,830
This vulnerability has
been reported and fixed.

612
00:32:12,830 --> 00:32:17,830
The CV ID is CVE-2020-1300.

613
00:32:18,030 --> 00:32:21,453
This is Microsoft's description
about this vulnerability.

614
00:32:22,640 --> 00:32:24,130
Although it's technically correct

615
00:32:24,130 --> 00:32:26,410
about the final exploitation vector,

616
00:32:26,410 --> 00:32:28,760
it's kind of misleading.

617
00:32:28,760 --> 00:32:32,263
First, this is not a
cabinet API vulnerability.

618
00:32:33,380 --> 00:32:37,140
The cabinet API is soft
skated and flexible.

619
00:32:37,140 --> 00:32:38,920
But it is too flexible,

620
00:32:38,920 --> 00:32:41,120
many parts of the
decompression were handled

621
00:32:41,120 --> 00:32:43,600
by user-supplied callbacks.

622
00:32:43,600 --> 00:32:46,260
If they don't handle
hacked cases properly,

623
00:32:46,260 --> 00:32:48,383
it could lead to security issues.

624
00:32:49,500 --> 00:32:52,270
In this case, it is the Windows printing,

625
00:32:52,270 --> 00:32:55,623
which did not implement a
decompression callbacks correctly.

626
00:32:57,560 --> 00:33:01,410
Second, this vulnerability does
not need a user confirmation

627
00:33:01,410 --> 00:33:04,640
to install the printer
driver just as we described

628
00:33:04,640 --> 00:33:07,810
and demoed, this entire attack finishes

629
00:33:07,810 --> 00:33:09,483
before the warning dialogue.

630
00:33:10,870 --> 00:33:14,370
In fact, the attacker could
also configure the print server

631
00:33:14,370 --> 00:33:15,810
to prevent the print client

632
00:33:15,810 --> 00:33:17,400
from showing the warning dialogue

633
00:33:17,400 --> 00:33:20,423
to make the attack
completely unnoticeable.

634
00:33:22,100 --> 00:33:22,933
However,

635
00:33:22,933 --> 00:33:26,370
there's no need to be
panicked about cabinet files.

636
00:33:26,370 --> 00:33:30,203
The cabinet API is old,
but its design is okay.

637
00:33:31,280 --> 00:33:33,040
If they users of the cabinet API

638
00:33:33,040 --> 00:33:34,940
handled callbacks with care,

639
00:33:34,940 --> 00:33:37,623
there's no security issues
to be worried about.

640
00:33:39,160 --> 00:33:40,370
For example,

641
00:33:40,370 --> 00:33:42,470
don't be afraid to open
the malformed cabinet

642
00:33:42,470 --> 00:33:44,253
that we created in exploring.

643
00:33:46,330 --> 00:33:49,300
The cab view module in explore.efc,

644
00:33:49,300 --> 00:33:51,310
correctly handle special characters

645
00:33:51,310 --> 00:33:53,580
in cabinet API callbacks.

646
00:33:53,580 --> 00:33:56,280
So, it is safe to open a cabinet file

647
00:33:56,280 --> 00:33:58,273
in the Explorer and copy files.

648
00:34:01,170 --> 00:34:02,310
In this presentation,

649
00:34:02,310 --> 00:34:05,701
we talked about the implementation
of Windows Printing.

650
00:34:05,701 --> 00:34:07,240
It is complex and privileged,

651
00:34:07,240 --> 00:34:09,953
and can be one for the
best targets for attackers.

652
00:34:11,630 --> 00:34:14,840
And we walk you through about,
we found, Windows printing,

653
00:34:14,840 --> 00:34:18,500
it could be exploited
both locally and remotely.

654
00:34:18,500 --> 00:34:20,620
It could be used to execute arbitrary code

655
00:34:20,620 --> 00:34:23,347
with system privileged,
and this gave sandboxes.

656
00:34:25,470 --> 00:34:29,140
For developers, don't be
panic about the cabinet files,

657
00:34:29,140 --> 00:34:30,390
but you should be careful

658
00:34:30,390 --> 00:34:32,703
when writing the cabinet API callbacks.

659
00:34:35,100 --> 00:34:36,600
Logical bug like this,

660
00:34:36,600 --> 00:34:38,810
I always found too huntful.

661
00:34:38,810 --> 00:34:40,963
We think you will love it just as we do.

662
00:34:42,720 --> 00:34:44,570
We would like to thank James Forshaw

663
00:34:44,570 --> 00:34:46,313
for his excellent tools and hints.

664
00:34:47,670 --> 00:34:51,260
Vectra AI for their
previous works and shares.

665
00:34:51,260 --> 00:34:53,603
And thank you for listening.

