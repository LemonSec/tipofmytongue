1
00:00:01,310 --> 00:00:02,340
- Hi, I'm Jake Labelle.

2
00:00:02,340 --> 00:00:04,200
And my talk today is gonna be on finding

3
00:00:04,200 --> 00:00:05,803
Surrogat chains on a mainframe.

4
00:00:07,150 --> 00:00:08,420
So, who am I?

5
00:00:08,420 --> 00:00:10,553
I'm a security consultant at F-secure.

6
00:00:11,670 --> 00:00:13,900
Technically associate,
but sounds a bit shit.

7
00:00:13,900 --> 00:00:17,780
So, I've been on a
couple of mainframe jobs,

8
00:00:17,780 --> 00:00:20,140
so not an expert by any means.

9
00:00:20,140 --> 00:00:22,820
I'm currently streaming
from Basingstoke UK,

10
00:00:22,820 --> 00:00:23,860
which is in Vegas,

11
00:00:23,860 --> 00:00:25,530
but what can you do?

12
00:00:25,530 --> 00:00:26,740
And I was gonna put a picture here,

13
00:00:26,740 --> 00:00:28,630
but just look to the right end, yep.

14
00:00:28,630 --> 00:00:29,513
There I am.

15
00:00:30,890 --> 00:00:33,960
So, before I go into
my tool, I've created,

16
00:00:33,960 --> 00:00:36,500
I'll just do a quick
high level introduction

17
00:00:36,500 --> 00:00:38,440
to z/OS, which is the operating system

18
00:00:38,440 --> 00:00:40,293
that you find on most mainframes.

19
00:00:41,600 --> 00:00:45,910
One of the major difference
between Linux and windows

20
00:00:45,910 --> 00:00:49,440
and z/OS is that z/OS has data sets.

21
00:00:49,440 --> 00:00:52,720
So for example, here, it's USER01.REXXLIB.

22
00:00:52,720 --> 00:00:55,320
And one thing to know about
it is it's a flat filesystem,

23
00:00:55,320 --> 00:00:57,020
so there's no folders,

24
00:00:57,020 --> 00:00:59,020
but normally how it works is that

25
00:00:59,020 --> 00:01:00,730
you'll have your high level qualifier,

26
00:01:00,730 --> 00:01:02,560
which is normally the owner first.

27
00:01:02,560 --> 00:01:04,790
So user01, which would be,

28
00:01:04,790 --> 00:01:09,460
and then dot something,
dot something bla bla.

29
00:01:09,460 --> 00:01:12,500
And you have apostrophes around data sets.

30
00:01:12,500 --> 00:01:14,680
This indicates that it's an absolute path

31
00:01:14,680 --> 00:01:16,934
in all of my Gator program,

32
00:01:16,934 --> 00:01:19,970
the apostrophes around
every single dataset

33
00:01:19,970 --> 00:01:21,730
cause just easier.

34
00:01:21,730 --> 00:01:24,960
You now can have
partitioned data sets where,

35
00:01:24,960 --> 00:01:28,040
so usually USERO1.REXLIB is the dataset,

36
00:01:28,040 --> 00:01:30,230
but then you can have multiple
members in that data set.

37
00:01:30,230 --> 00:01:33,060
So for example, and this
one would be, Hello.

38
00:01:33,060 --> 00:01:36,070
And the picture below is
just a picture of a DS list,

39
00:01:36,070 --> 00:01:37,650
which just shows a lot of,

40
00:01:37,650 --> 00:01:39,500
which shows all the data sets

41
00:01:39,500 --> 00:01:42,943
of a high level qualifier
of IBM user and so, yeah.

42
00:01:44,960 --> 00:01:48,940
So my program is mostly written in REXX,

43
00:01:48,940 --> 00:01:51,860
which is a scripting language like Python,

44
00:01:51,860 --> 00:01:54,890
has a couple slightly
unique functions though.

45
00:01:54,890 --> 00:01:56,380
So one of them is address,

46
00:01:56,380 --> 00:01:59,620
which lets you run a
program in another program.

47
00:01:59,620 --> 00:02:03,330
So, this is running lists DSD in TSO

48
00:02:04,990 --> 00:02:06,890
and the output of that

49
00:02:06,890 --> 00:02:08,150
you can store using

50
00:02:08,150 --> 00:02:09,560
something called outtrap,

51
00:02:09,560 --> 00:02:12,680
which you will then put all
the output of that TSO command

52
00:02:12,680 --> 00:02:16,533
into a STEM variable, which
is basically an array.

53
00:02:18,010 --> 00:02:21,030
So another language that's uses the JCL,

54
00:02:21,030 --> 00:02:22,820
which is a job control language.

55
00:02:22,820 --> 00:02:24,260
It's a batch job though.

56
00:02:24,260 --> 00:02:26,040
So when you submit a JCL,

57
00:02:26,040 --> 00:02:30,770
the JCL is then run at
some point by the mainframe

58
00:02:30,770 --> 00:02:31,710
and on the first line of every JCL

59
00:02:31,710 --> 00:02:33,650
you have the job card,

60
00:02:33,650 --> 00:02:36,150
which has the title of the job

61
00:02:36,150 --> 00:02:37,660
and a couple of other parameters.

62
00:02:37,660 --> 00:02:42,270
Say, for example, this
will notify the user

63
00:02:42,270 --> 00:02:45,593
after it's run and it will
also store it in the spool.

64
00:02:47,870 --> 00:02:52,000
So in all of my program all of the JCL

65
00:02:52,000 --> 00:02:55,290
that I have are embedded
inside REXX scripts.

66
00:02:55,290 --> 00:02:57,170
And so this one, for example,

67
00:02:57,170 --> 00:03:00,600
it will cue all of the lines of the JCL.

68
00:03:00,600 --> 00:03:01,433
It will then use outtraps,

69
00:03:01,433 --> 00:03:04,260
concatenate those lines
and then submit them.

70
00:03:04,260 --> 00:03:07,070
The reason why I use
this in a REXX script is

71
00:03:07,070 --> 00:03:10,320
because you can then
pass on arguments easier

72
00:03:10,320 --> 00:03:13,003
and you can then have a more dynamic JCL.

73
00:03:15,200 --> 00:03:20,200
So, one of the major
subsystems on z/OS is OMVS

74
00:03:21,330 --> 00:03:23,080
and it's a Unix subsystem,

75
00:03:23,080 --> 00:03:27,580
and it's kinda of like the WSL
windows subsystem for Linux.

76
00:03:27,580 --> 00:03:29,030
However, there's no segregation

77
00:03:29,030 --> 00:03:32,570
between the two parts.

78
00:03:32,570 --> 00:03:35,980
So, on there's no segregation
between TSO and OMVS.

79
00:03:35,980 --> 00:03:40,350
TSO being the main part of where
you log into the mainframe.

80
00:03:40,350 --> 00:03:43,030
So on TSO, you can run OMVS commands

81
00:03:43,030 --> 00:03:45,670
and OMVS, you can run TSO commands.

82
00:03:45,670 --> 00:03:47,110
So if you have access to one,

83
00:03:47,110 --> 00:03:49,660
you basically have access to the other

84
00:03:49,660 --> 00:03:53,130
and the security of OMVs.

85
00:03:53,130 --> 00:03:54,150
So for example,

86
00:03:54,150 --> 00:03:56,630
what would be slash etc slash pseudos is,

87
00:03:56,630 --> 00:03:58,630
is managed by RACF

88
00:03:58,630 --> 00:04:03,180
and RACF is resource
access control facility,

89
00:04:03,180 --> 00:04:05,350
and this can handle
different types of resources.

90
00:04:05,350 --> 00:04:07,660
So for example, datasets, surrogats,

91
00:04:07,660 --> 00:04:12,080
as mentioned before the pseudo,

92
00:04:12,080 --> 00:04:13,743
the OMVS resources.

93
00:04:17,150 --> 00:04:20,083
So for example, super
user would be in there.

94
00:04:22,150 --> 00:04:24,010
So each resource has an owner

95
00:04:24,010 --> 00:04:26,270
and they have alter access.

96
00:04:26,270 --> 00:04:29,670
So basically, complete
access to the resource.

97
00:04:29,670 --> 00:04:32,010
You can also set a UACC,

98
00:04:32,010 --> 00:04:35,950
which is how much access
that just any random user

99
00:04:35,950 --> 00:04:38,000
has to the resource.

100
00:04:38,000 --> 00:04:40,510
You can also permit other
users to have access.

101
00:04:40,510 --> 00:04:43,060
So there's four different
types of access you can give.

102
00:04:43,060 --> 00:04:47,080
It's execute, reads, update and alter,

103
00:04:47,080 --> 00:04:49,203
and they do what they sound like they do.

104
00:04:50,230 --> 00:04:55,180
One other special attribute you can give

105
00:04:55,180 --> 00:04:57,200
to a user is special.

106
00:04:57,200 --> 00:05:01,010
Special means that you
basically have authorized access

107
00:05:01,010 --> 00:05:03,360
to every single resource,

108
00:05:03,360 --> 00:05:05,913
which you can think of as
being like having roots.

109
00:05:07,750 --> 00:05:11,130
One of the main classes
in z/OS is surrogat,

110
00:05:11,130 --> 00:05:13,230
and there's a couple
different types of these.

111
00:05:13,230 --> 00:05:15,140
So we have *.SUMMIT.

112
00:05:15,140 --> 00:05:18,270
So for example, USERID.SUBMIT

113
00:05:18,270 --> 00:05:21,220
So, USER01.SUBMIT, would mean

114
00:05:21,220 --> 00:05:22,880
if you had read access to this,

115
00:05:22,880 --> 00:05:26,070
you could submit a JCL as that as USER01,

116
00:05:26,070 --> 00:05:29,120
there's also BPX.SRV.USERID.

117
00:05:29,120 --> 00:05:30,370
So for example,

118
00:05:30,370 --> 00:05:33,110
BPX.SRV.USER2, means you can run

119
00:05:33,110 --> 00:05:34,973
a still command as that user.

120
00:05:35,942 --> 00:05:38,940
There's also DFHSTART.USERID.

121
00:05:38,940 --> 00:05:41,660
And this just means you
can run a kicks transaction

122
00:05:41,660 --> 00:05:42,761
as that user.

123
00:05:42,761 --> 00:05:45,740
I don't use DFHSTART in my program,

124
00:05:52,070 --> 00:05:56,563
but maybe in the future.

125
00:05:57,980 --> 00:06:02,460
So, one thing that
you'll find on mainframes

126
00:06:02,460 --> 00:06:05,260
or surrogat chains and the
reasons why these occur

127
00:06:05,260 --> 00:06:06,990
is cause there's lots of users

128
00:06:06,990 --> 00:06:10,370
and no one knows what they
were all of them are for.

129
00:06:10,370 --> 00:06:11,203
So for example,

130
00:06:11,203 --> 00:06:14,530
I was added as a user on a pen test job.

131
00:06:14,530 --> 00:06:17,160
And 20 years later,
someone's probably gonna ask,

132
00:06:17,160 --> 00:06:18,530
who is this Jake character?

133
00:06:18,530 --> 00:06:20,840
And why does he have
access to these things?

134
00:06:20,840 --> 00:06:22,330
No one's gonna know,

135
00:06:22,330 --> 00:06:24,150
and no one's gonna delete it

136
00:06:24,150 --> 00:06:26,090
because maybe it will break something.

137
00:06:26,090 --> 00:06:28,140
And that also tends to
the other thing where

138
00:06:28,140 --> 00:06:30,450
mainframes have been running for decades.

139
00:06:30,450 --> 00:06:32,400
It's one of their major selling factor.

140
00:06:32,400 --> 00:06:34,700
So, the person who added me,

141
00:06:34,700 --> 00:06:35,740
it's probably gonna be long gone

142
00:06:35,740 --> 00:06:37,740
before the next person even looks at me.

143
00:06:38,620 --> 00:06:42,610
So, surrogat chain is where, for example,

144
00:06:42,610 --> 00:06:45,850
user one has read access to
a surrogat class on user two

145
00:06:45,850 --> 00:06:50,303
and user two has read access
to a surrogat on user three.

146
00:06:51,390 --> 00:06:52,480
So in this case,

147
00:06:52,480 --> 00:06:55,510
user one practically
has access to everything

148
00:06:55,510 --> 00:06:57,570
that user three has

149
00:06:57,570 --> 00:06:59,670
and the way you can list what access,

150
00:06:59,670 --> 00:07:02,107
what surrogats you have,
you can run a command,

151
00:07:02,107 --> 00:07:04,060
RLIST SURROGAT *

152
00:07:04,060 --> 00:07:08,690
However, RACF has a thing
where you can only see

153
00:07:08,690 --> 00:07:13,690
the protections on a RACF that
you have at list read for.

154
00:07:13,760 --> 00:07:17,140
So in this case, user one
would not be able to see

155
00:07:17,140 --> 00:07:22,140
that user two has a read on
a surrogat and use a three.

156
00:07:23,780 --> 00:07:28,140
The other problem is that
*.SUBMIT is a batch job.

157
00:07:28,140 --> 00:07:30,230
So let's say you wanted
to run a REXX script

158
00:07:30,230 --> 00:07:34,277
that ran the JCL from user one

159
00:07:39,676 --> 00:07:42,120
as a surrogat on user two,

160
00:07:42,120 --> 00:07:46,670
And then want from user two
run a JCL to use the three.

161
00:07:46,670 --> 00:07:48,160
You can't just run that in one program

162
00:07:48,160 --> 00:07:49,920
because it's using a JCL

163
00:07:49,920 --> 00:07:52,450
which again, it's a batch job.

164
00:07:52,450 --> 00:07:54,350
So what you could do,
is you could manually

165
00:07:54,350 --> 00:07:56,170
submit reverse shells one at a time.

166
00:07:56,170 --> 00:07:58,470
So you'd as user one,

167
00:07:58,470 --> 00:08:00,320
find out that you had a user to surrogat,

168
00:08:00,320 --> 00:08:03,270
then you would submit a
reverse shell for user two

169
00:08:03,270 --> 00:08:04,290
then once you've user two,

170
00:08:04,290 --> 00:08:06,100
your would list all your surrogats again,

171
00:08:06,100 --> 00:08:08,750
and then you would submit a
reverse shell for user three.

172
00:08:08,750 --> 00:08:12,760
However, it takes a long time
and there's a lot of users.

173
00:08:12,760 --> 00:08:14,623
So this might not even be feasible.

174
00:08:15,810 --> 00:08:17,550
Another thing you could do,
is you could just use a user

175
00:08:17,550 --> 00:08:20,460
which has read access
to all the resources.

176
00:08:20,460 --> 00:08:22,360
So for example, a special account

177
00:08:22,360 --> 00:08:23,793
or an auditor account,

178
00:08:26,070 --> 00:08:27,730
they don't really have
read access to these,

179
00:08:27,730 --> 00:08:29,563
but they basically do.

180
00:08:31,520 --> 00:08:34,640
Then, you could also then use this

181
00:08:34,640 --> 00:08:36,440
to find all the surrogat chains.

182
00:08:36,440 --> 00:08:37,680
The only problem with this is that

183
00:08:37,680 --> 00:08:40,040
you're not gonna get a special account.

184
00:08:40,040 --> 00:08:41,490
You're definitely not
gonna get a special account

185
00:08:41,490 --> 00:08:44,050
on a pen test and you probably won't get

186
00:08:44,050 --> 00:08:46,463
an auditor account and a pen test either.

187
00:08:48,180 --> 00:08:50,630
So I have a GATOR, is
the GitHub link to it

188
00:08:52,184 --> 00:08:57,184
and it allows you to find
and exploit surrogat chains.

189
00:08:57,660 --> 00:08:58,500
So the first thing you did with GATOR,

190
00:08:58,500 --> 00:08:59,980
is you run BEGIN.REXX.

191
00:08:59,980 --> 00:09:01,560
It gets all the output data sets ready.

192
00:09:01,560 --> 00:09:03,920
It gets the Unix file ready.

193
00:09:03,920 --> 00:09:06,730
And it adds the current
user that you're running it

194
00:09:06,730 --> 00:09:07,880
from to the path.

195
00:09:07,880 --> 00:09:10,558
And it START GATOR.REXX.

196
00:09:10,558 --> 00:09:14,910
GATOR.REXX gets the path
that it currently is at.

197
00:09:14,910 --> 00:09:16,650
So when the first run,

198
00:09:16,650 --> 00:09:19,000
it would just be just the original user.

199
00:09:19,000 --> 00:09:20,530
If it's special,

200
00:09:20,530 --> 00:09:21,920
if you're using, you have a special,

201
00:09:21,920 --> 00:09:24,270
it will just stop because
if you have special,

202
00:09:24,270 --> 00:09:25,860
you've already won.

203
00:09:25,860 --> 00:09:29,140
It will then run PLUGINS.REXX,
which I'll explain later,

204
00:09:29,140 --> 00:09:32,120
it will list all the surrogats
that you have read access to,

205
00:09:32,120 --> 00:09:35,090
and it checks that those surrogats
haven't been visited yet.

206
00:09:35,090 --> 00:09:36,300
The reason why I have to add this,

207
00:09:36,300 --> 00:09:38,840
is because I didn't wanna
have to deal with cycles.

208
00:09:38,840 --> 00:09:41,720
And this was the quickest and
easiest way to deal with that.

209
00:09:41,720 --> 00:09:44,230
So you won't actually get the whole,

210
00:09:44,230 --> 00:09:46,050
I guess, surrogat network,

211
00:09:46,050 --> 00:09:48,873
but you will get a chain of through them.

212
00:09:50,220 --> 00:09:52,540
If it easier to START.SUMBIT resource

213
00:09:52,540 --> 00:09:54,300
or run SUBM.REXX.

214
00:09:54,300 --> 00:09:59,300
And if it sees a to BPS.SRV.*
resource or run UNIXM.REXX.

215
00:09:59,930 --> 00:10:03,940
So SUBM.REXX just submit to
JCL as the surrogat user,

216
00:10:03,940 --> 00:10:05,510
which then runs GATOR.REXX.

217
00:10:05,510 --> 00:10:07,013
So, then it'll continue it on.

218
00:10:08,192 --> 00:10:11,440
UNIXM.REXX it's a JCL,
which just runs Gator.

219
00:10:11,440 --> 00:10:16,440
It's moved into OMVS with
BEGIN.REXX to /temp/unixm

220
00:10:16,960 --> 00:10:20,580
and then Gator calls it with
a bpxbatch that's you'd run

221
00:10:20,580 --> 00:10:22,650
OMVS commands in TSO.

222
00:10:22,650 --> 00:10:26,053
And then you do so to that target user.

223
00:10:27,050 --> 00:10:30,270
So PLUGINS.REXX is a list of REXX scripts

224
00:10:30,270 --> 00:10:31,483
to run on each user.

225
00:10:34,690 --> 00:10:37,000
There's a number of enumeration
scripts you can run.

226
00:10:37,000 --> 00:10:40,700
I have three that I have set up already.

227
00:10:40,700 --> 00:10:42,840
One of them just lists the user.

228
00:10:42,840 --> 00:10:45,560
So, this will tell you
if they have special,

229
00:10:45,560 --> 00:10:48,180
if they have operations,

230
00:10:48,180 --> 00:10:49,750
what groups they're connected to,

231
00:10:49,750 --> 00:10:50,983
those types of things.

232
00:10:53,285 --> 00:10:55,215
I also have one which will just list

233
00:10:55,215 --> 00:11:00,215
your access to all of the RACF databases.

234
00:11:01,280 --> 00:11:02,520
It's unlikely you'll have anything

235
00:11:02,520 --> 00:11:05,230
other than none for this,

236
00:11:05,230 --> 00:11:07,120
but might as well test.

237
00:11:07,120 --> 00:11:08,530
If you have read access,

238
00:11:08,530 --> 00:11:10,830
it's really good to let
you unload the database.

239
00:11:10,830 --> 00:11:13,680
So you can see all the
things in the RACF database

240
00:11:13,680 --> 00:11:15,150
really useful.

241
00:11:15,150 --> 00:11:16,780
If you have update or alter,

242
00:11:16,780 --> 00:11:18,710
then you can just put
yourself in a special,

243
00:11:18,710 --> 00:11:22,013
and I have a tool to just
write yourself in, but yeah,

244
00:11:22,013 --> 00:11:25,060
they're very unlikely,
but if it does happen,

245
00:11:25,060 --> 00:11:26,023
hit the jackpot.

246
00:11:27,300 --> 00:11:31,220
The other one is it will
search all of the APF libraries

247
00:11:31,220 --> 00:11:33,230
to see what access you have to those,

248
00:11:33,230 --> 00:11:34,500
you can think of APF libraries

249
00:11:34,500 --> 00:11:38,100
as kind of like set
good libraries in Unix.

250
00:11:38,100 --> 00:11:41,280
It's not really, but if
you have updated, alter,

251
00:11:41,280 --> 00:11:43,320
you can get special.

252
00:11:43,320 --> 00:11:45,553
And now there's tools
out there to do that.

253
00:11:46,780 --> 00:11:50,770
Oh, and also, if you have any
other scripts you want to add,

254
00:11:50,770 --> 00:11:53,110
it's fairly easy to just,
it's fairly extensible.

255
00:11:53,110 --> 00:11:54,380
Just add your own REXX script in

256
00:11:54,380 --> 00:11:55,540
and like, for example,

257
00:11:55,540 --> 00:11:59,130
if you have one, if you
have just a LINUX script

258
00:11:59,130 --> 00:12:01,180
that you have, that you can use,

259
00:12:01,180 --> 00:12:02,880
you can quickly add that to there.

260
00:12:04,200 --> 00:12:08,270
So, to test to see that the
program was working properly,

261
00:12:08,270 --> 00:12:12,730
I using an emualted z/OS
created a thousand users

262
00:12:12,730 --> 00:12:14,720
then randomly assigned a couple operators

263
00:12:14,720 --> 00:12:16,630
and a couple special users,

264
00:12:16,630 --> 00:12:19,710
added a couple of surrogats
of each type to each user,

265
00:12:19,710 --> 00:12:21,300
and then run Gator,

266
00:12:21,300 --> 00:12:23,340
the test script to
generate all of these users

267
00:12:23,340 --> 00:12:25,180
are on GitHub as well.

268
00:12:25,180 --> 00:12:28,800
So, using the output of the all the paths

269
00:12:28,800 --> 00:12:29,633
that were generated

270
00:12:29,633 --> 00:12:33,410
and also the user, the list user command.

271
00:12:33,410 --> 00:12:38,410
So, here you can see the
large squares are operators

272
00:12:40,060 --> 00:12:42,390
and the big stars special

273
00:12:42,390 --> 00:12:44,940
shows you all the paths
to get to these users.

274
00:12:44,940 --> 00:12:46,860
If you're anyone can think
of a better way to show

275
00:12:46,860 --> 00:12:49,890
a thousand nodes on a graph, then yeah,

276
00:12:49,890 --> 00:12:50,790
that'd be helpful.

277
00:12:53,315 --> 00:12:56,200
I also created a shell macro.

278
00:12:56,200 --> 00:12:59,370
So from the user that
you ran the Gator from,

279
00:12:59,370 --> 00:13:02,490
you can pick any user that's in the path,

280
00:13:02,490 --> 00:13:07,350
the surrogat chain, and it
runs shell be that user,

281
00:13:07,350 --> 00:13:11,200
it will then keep submitting
a JCL continuously

282
00:13:11,200 --> 00:13:13,883
passing on how far along
in the target it is.

283
00:13:14,850 --> 00:13:17,130
How far along in the
path to the target is?

284
00:13:17,130 --> 00:13:19,100
And at the end, it will
submit a CATSO shell.

285
00:13:19,100 --> 00:13:19,933
It's like meterpreter.

286
00:13:19,933 --> 00:13:22,490
Here is the GitHub humbling
to it by mainframed.

287
00:13:24,630 --> 00:13:26,660
I've also just created a bash script,

288
00:13:26,660 --> 00:13:30,020
which will quickly upload
all the REXX scripts.

289
00:13:30,020 --> 00:13:33,890
And it's just quick to
set that up and yeah,

290
00:13:33,890 --> 00:13:35,660
that's my a tool.

291
00:13:35,660 --> 00:13:36,950
And I'll do a quick thing on

292
00:13:36,950 --> 00:13:39,630
if you wanna get into mainframes yourself.

293
00:13:39,630 --> 00:13:41,610
So one of the probably the easiest way

294
00:13:41,610 --> 00:13:43,170
is with TK4-

295
00:13:43,170 --> 00:13:47,830
it's based on a 1980's,
mainframe MVS 3.8J,

296
00:13:47,830 --> 00:13:50,760
it runs on a Raspberry
PI, which is pretty cool.

297
00:13:50,760 --> 00:13:53,060
Everything is open
source and public domain,

298
00:13:53,060 --> 00:13:54,260
pretty cool again.

299
00:13:54,260 --> 00:13:55,480
Here's the link to download it.

300
00:13:55,480 --> 00:13:59,083
And there's a user guide to
just get started and yeah.

301
00:14:00,330 --> 00:14:03,293
Here's a picture of it, again pretty cool.

302
00:14:06,090 --> 00:14:10,040
And on there, you can install
two fairly important things.

303
00:14:10,040 --> 00:14:13,000
So you can get Kikcs,
which is a Cics clone,

304
00:14:13,000 --> 00:14:14,540
and there's a Moshik's guides.

305
00:14:14,540 --> 00:14:16,670
I've put the YouTube link to it.

306
00:14:16,670 --> 00:14:18,820
And kicks is like web servers

307
00:14:18,820 --> 00:14:20,250
before web servers were cool.

308
00:14:20,250 --> 00:14:25,130
So, you can test your COBOL scripting

309
00:14:25,130 --> 00:14:30,130
and Brexx is just a back ported thing

310
00:14:33,690 --> 00:14:34,980
that lets you run REXX scripts.

311
00:14:34,980 --> 00:14:37,300
Again, here's the Moshik's
guides to get it installed.

312
00:14:37,300 --> 00:14:39,330
If you can't be able
to get these installed,

313
00:14:39,330 --> 00:14:43,150
I have a one with these
already installed on my GitHub,

314
00:14:43,150 --> 00:14:44,973
TK4 base, that's what I called it.

315
00:14:46,350 --> 00:14:49,330
Another tool to get yourself,
to get started on mainframes.

316
00:14:49,330 --> 00:14:50,480
It's Hercules.

317
00:14:50,480 --> 00:14:52,410
So Q public license,

318
00:14:52,410 --> 00:14:53,600
it's a mainframe emulator

319
00:14:53,600 --> 00:14:55,913
and it's what TK4 uses to run.

320
00:14:56,940 --> 00:15:01,893
And now there is an old
version of z/OS 1.10 online

321
00:15:03,130 --> 00:15:05,830
but piracy is bad.

322
00:15:05,830 --> 00:15:08,350
So yeah, don't do that.

323
00:15:08,350 --> 00:15:12,300
But if you do end up
getting a z/OS version,

324
00:15:12,300 --> 00:15:17,300
there's a, is the GitHub link
to mainframes lamps, and yeah,

325
00:15:17,320 --> 00:15:19,020
they're pretty good to get started

326
00:15:20,680 --> 00:15:25,680
and there's a Mattermost
community that's fairly good

327
00:15:26,260 --> 00:15:28,070
to answer any questions.

328
00:15:28,070 --> 00:15:31,720
If you want to ask me any
questions, my username is Tdasu.

329
00:15:31,720 --> 00:15:33,020
So yeah, drop me a message on there

330
00:15:33,020 --> 00:15:34,563
and I'll answer.

331
00:15:35,610 --> 00:15:38,693
And that's my talk done.

332
00:15:39,750 --> 00:15:41,073
Are there any questions?

