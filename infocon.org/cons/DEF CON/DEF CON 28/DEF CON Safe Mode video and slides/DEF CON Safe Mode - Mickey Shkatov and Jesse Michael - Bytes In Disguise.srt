1
00:00:02,010 --> 00:00:03,210
- [Mickey] Hello, this thing on?

2
00:00:03,210 --> 00:00:06,130
Oh, hi everyone.

3
00:00:06,130 --> 00:00:08,750
Welcome to our talk, Bytes in Disguise.

4
00:00:08,750 --> 00:00:10,390
If you happen to watch this,

5
00:00:10,390 --> 00:00:12,460
as it's being released by DEF CON,

6
00:00:12,460 --> 00:00:15,030
we wanna thank you for tuning
in on a Sunday morning.

7
00:00:15,030 --> 00:00:16,530
You brave souls.

8
00:00:16,530 --> 00:00:19,660
If you're watching this on
YouTube at some point later on,

9
00:00:19,660 --> 00:00:21,940
well, thank you, you lazy (beep).

10
00:00:21,940 --> 00:00:23,290
My name's Mickey.

11
00:00:23,290 --> 00:00:24,620
- [Jesse] And I'm Jesse.

12
00:00:24,620 --> 00:00:25,540
- [Mickey] I'm on the left.

13
00:00:25,540 --> 00:00:26,490
Jesse's on the right,

14
00:00:26,490 --> 00:00:30,330
just so you know to associate
our faces with our voices now.

15
00:00:30,330 --> 00:00:33,854
We're both principal security
researchers at Eclipse CMS.

16
00:00:33,854 --> 00:00:35,690
We deal with hardware and
firmware, on a daily basis.

17
00:00:35,690 --> 00:00:37,680
Now we have all of the
formalities out of the way,

18
00:00:37,680 --> 00:00:39,460
we can start with the actual talk.

19
00:00:39,460 --> 00:00:43,450
We'd like to start with a
little bit of structure.

20
00:00:43,450 --> 00:00:44,320
What are we gonna talk about.

21
00:00:44,320 --> 00:00:46,260
The agenda and high level.

22
00:00:46,260 --> 00:00:51,260
We want you to understand
the background and the why.

23
00:00:53,450 --> 00:00:55,340
'Cause it's very important
for you to see things

24
00:00:55,340 --> 00:00:58,700
from a different viewpoint,
our own viewpoint.

25
00:00:58,700 --> 00:01:00,820
We hope that by showing
you what motivated us

26
00:01:00,820 --> 00:01:04,190
to look into this research,
you'll be able to understand,

27
00:01:04,190 --> 00:01:08,130
and maybe go out on your own
and explore this yourselves.

28
00:01:08,130 --> 00:01:10,283
Once we've established
that we can show you

29
00:01:10,283 --> 00:01:14,460
what we did from an attack
surface perspective,

30
00:01:14,460 --> 00:01:15,923
how we look at things

31
00:01:15,923 --> 00:01:18,093
from a hardware, firmware perspective.

32
00:01:19,280 --> 00:01:22,710
After that, we can continue
and walk you through

33
00:01:22,710 --> 00:01:25,690
some of the hiding places
inside computers, servers,

34
00:01:25,690 --> 00:01:29,670
laptops or any other computer platform.

35
00:01:29,670 --> 00:01:31,410
We thought about the best way to do this.

36
00:01:31,410 --> 00:01:33,400
We decided that it will be best

37
00:01:33,400 --> 00:01:36,830
if we start explaining each hiding spot.

38
00:01:36,830 --> 00:01:38,080
Immediately after that,

39
00:01:38,080 --> 00:01:40,350
go through the attack surface scenarios

40
00:01:40,350 --> 00:01:42,363
and examples for that spot.

41
00:01:43,750 --> 00:01:45,123
Once that's all done,

42
00:01:46,190 --> 00:01:49,570
we'll discuss a little
bit of what's in store

43
00:01:49,570 --> 00:01:52,440
for these types of threats in the future

44
00:01:52,440 --> 00:01:53,394
of the security industry

45
00:01:53,394 --> 00:01:56,880
and what can we do to
protect against them.

46
00:01:56,880 --> 00:01:57,713
So in the past,

47
00:01:57,713 --> 00:02:01,720
we've seen a lot of research
talking about bad devices,

48
00:02:01,720 --> 00:02:05,320
being abused, like bad,
USB rubber duckies,

49
00:02:05,320 --> 00:02:08,910
OMG cables, which are the best cables.

50
00:02:08,910 --> 00:02:11,950
All of these malicious devices.

51
00:02:11,950 --> 00:02:16,750
Dropping code, executing
it from a separate device,

52
00:02:16,750 --> 00:02:19,760
hiding things off the platform.

53
00:02:19,760 --> 00:02:22,470
But the main issue is, persistence.

54
00:02:22,470 --> 00:02:25,210
If your payload has to be
plugged into the target

55
00:02:25,210 --> 00:02:29,660
to replay every time, even if
it still stays undetectable,

56
00:02:29,660 --> 00:02:31,363
having a thumb drive
stick out of your computer

57
00:02:31,363 --> 00:02:33,810
would be noticed by a user.

58
00:02:33,810 --> 00:02:35,480
You can't really hide that.

59
00:02:35,480 --> 00:02:38,790
So what if you could have
your loader persistent

60
00:02:38,790 --> 00:02:40,760
and just have the payload itself,

61
00:02:40,760 --> 00:02:45,020
that's the malicious code stored
somewhere, in your device?

62
00:02:45,020 --> 00:02:48,063
The easiest things to find
about this type of research

63
00:02:48,063 --> 00:02:50,880
that was done in the
past is fileless malware

64
00:02:50,880 --> 00:02:53,845
and fileless exploits
and in memory execution

65
00:02:53,845 --> 00:02:57,740
and anything that doesn't touch disk.

66
00:02:57,740 --> 00:02:59,650
Remember, don't touch disk.

67
00:02:59,650 --> 00:03:01,440
One of those examples is,

68
00:03:01,440 --> 00:03:03,918
a talk that was done last year at DEF CON,

69
00:03:03,918 --> 00:03:07,930
by Topher and Mike that discussed about

70
00:03:07,930 --> 00:03:11,100
abusing this exact
thing, in UEFI variables.

71
00:03:11,100 --> 00:03:13,940
We usually describe this
in the slide and say,

72
00:03:13,940 --> 00:03:15,840
look past research done this and that.

73
00:03:16,793 --> 00:03:17,626
But since we know these guys,

74
00:03:17,626 --> 00:03:20,140
we thought we've just
asked them and record them

75
00:03:20,140 --> 00:03:21,410
and just replay it for you guys.

76
00:03:21,410 --> 00:03:23,194
So here's Topher and Mike.

77
00:03:23,194 --> 00:03:26,170
Topher is the left in the
picture and Mike is on the right.

78
00:03:26,170 --> 00:03:28,520
So I hope you enjoy and
help us embarrass them.

79
00:03:29,740 --> 00:03:31,360
- [Topher] Hey, I'm Topher Timzen.

80
00:03:31,360 --> 00:03:32,690
- [Michael] Hey, I'm Michael Leibowitz.

81
00:03:32,690 --> 00:03:34,750
- [Topher] Last year at DEF
CON, Mike and I gave a talk,

82
00:03:34,750 --> 00:03:37,370
entitled, "EDR is Coming: Hide Yo Shit."

83
00:03:37,370 --> 00:03:39,210
The reason that we did this research

84
00:03:39,210 --> 00:03:40,870
and gave this presentation,

85
00:03:40,870 --> 00:03:42,410
is because we've been red teaming

86
00:03:42,410 --> 00:03:43,637
for a number of years now.

87
00:03:43,637 --> 00:03:46,010
We were running into the problem that

88
00:03:46,010 --> 00:03:47,597
a lot of our malicious payloads

89
00:03:47,597 --> 00:03:50,790
and our malware were being eaten up by,

90
00:03:50,790 --> 00:03:54,570
whether it be AV solutions
or EDR solutions.

91
00:03:54,570 --> 00:03:56,480
The blue team was discovering us

92
00:03:56,480 --> 00:03:58,710
and ruining our engagements.

93
00:03:58,710 --> 00:04:00,550
- [Michael] When your
lovingly crafted payload

94
00:04:00,550 --> 00:04:02,240
becomes some analyst sample,

95
00:04:02,240 --> 00:04:04,090
everyone's gonna have a bad evening.

96
00:04:04,090 --> 00:04:07,320
- [Topher] So in looking at new areas,

97
00:04:07,320 --> 00:04:09,060
in which we could hide our shit,

98
00:04:09,060 --> 00:04:12,980
we effectively wanted to get off of disk.

99
00:04:12,980 --> 00:04:15,510
The rationale for this was because,

100
00:04:15,510 --> 00:04:18,840
having things on disk,
leaves it vulnerable to

101
00:04:18,840 --> 00:04:20,610
AV scanning it.

102
00:04:20,610 --> 00:04:25,610
It allows analysts to look
at hashes of the binaries.

103
00:04:26,050 --> 00:04:29,660
The EDR solution sees that
they're executing these binaries.

104
00:04:29,660 --> 00:04:31,440
All of the activity that they're doing

105
00:04:31,440 --> 00:04:33,470
is shown to the analyst

106
00:04:33,470 --> 00:04:37,250
and whatever EDR platforms
console they're using.

107
00:04:37,250 --> 00:04:39,670
In looking at ways to hide our shit,

108
00:04:39,670 --> 00:04:42,300
we looked into UEFI.

109
00:04:42,300 --> 00:04:45,570
So I used to do some
UEFI security research.

110
00:04:45,570 --> 00:04:50,200
So I was already somewhat
familiar with how UEFI worked,

111
00:04:50,200 --> 00:04:52,430
as this firmware platform.

112
00:04:52,430 --> 00:04:54,010
Variables are something that

113
00:04:54,010 --> 00:04:57,440
were exposed after boot services.

114
00:04:57,440 --> 00:04:59,690
So they were available at runtime

115
00:04:59,690 --> 00:05:02,620
and it actually booting the platform.

116
00:05:02,620 --> 00:05:06,050
Windows 10 re-added a UEFI API,

117
00:05:06,050 --> 00:05:09,730
that allowed you to read and
write UEFI firmware variables.

118
00:05:09,730 --> 00:05:13,510
I had already known, or at
least I had suspected that

119
00:05:13,510 --> 00:05:16,220
EDR platforms were not at all scanning

120
00:05:16,220 --> 00:05:19,940
the UEFI firmware
variable space and NVRAM,

121
00:05:19,940 --> 00:05:21,080
everything that we had seen,

122
00:05:21,080 --> 00:05:23,010
it was all about what's on the hard drive.

123
00:05:23,010 --> 00:05:25,560
What's being executed from the hard drive.

124
00:05:25,560 --> 00:05:29,490
We saw no notion of anything
having to do with firmware.

125
00:05:29,490 --> 00:05:32,701
So we put our payload
there and low and behold,

126
00:05:32,701 --> 00:05:34,580
analysts were completely blind in

127
00:05:34,580 --> 00:05:36,780
the EDR solution and AV solutions.

128
00:05:36,780 --> 00:05:39,510
Never saw our actual malicious payloads.

129
00:05:39,510 --> 00:05:42,280
They would see the binaries
that we dropped on disk

130
00:05:42,280 --> 00:05:44,090
that would execute the payloads

131
00:05:44,090 --> 00:05:47,850
out of the UEFI variable, but
those are seemingly benign.

132
00:05:47,850 --> 00:05:50,220
They're like four kilobyte binaries.

133
00:05:50,220 --> 00:05:53,460
In our talk, I handled the
Windows platform piece,

134
00:05:53,460 --> 00:05:57,570
and my C# binary to do
reflective loading of

135
00:05:57,570 --> 00:06:01,750
a UEFI variable is like 15 lines of code

136
00:06:01,750 --> 00:06:03,580
and nobody sees it at all,

137
00:06:03,580 --> 00:06:05,600
when they're using those
platforms at the time.

138
00:06:05,600 --> 00:06:08,700
A couple of vendors have
added some mitigations to this

139
00:06:08,700 --> 00:06:11,370
and are seemingly less blind,

140
00:06:11,370 --> 00:06:13,550
but it's still a problem facing a lot of

141
00:06:13,550 --> 00:06:14,700
these security solutions,

142
00:06:14,700 --> 00:06:16,960
where if you hide stuff off of disk,

143
00:06:16,960 --> 00:06:18,140
they're not seeing.

144
00:06:18,140 --> 00:06:19,092
- [Michael] As we said,

145
00:06:19,092 --> 00:06:23,200
we want to muddy the water for analysis.

146
00:06:23,200 --> 00:06:25,187
The analysis is highly correlated to

147
00:06:25,187 --> 00:06:27,740
the process image that you're running.

148
00:06:27,740 --> 00:06:30,780
UEFI is an area that
we're both familiar with

149
00:06:30,780 --> 00:06:35,160
and UEFI access is
available in ring three.

150
00:06:35,160 --> 00:06:38,250
Any time you have delegated
access in ring three

151
00:06:38,250 --> 00:06:41,710
to something that is like a
system firmware component,

152
00:06:41,710 --> 00:06:43,255
you're in for a good time.

153
00:06:43,255 --> 00:06:45,370
I had previously done some research

154
00:06:45,370 --> 00:06:48,230
where I had put malicious
content into a Ram disk.

155
00:06:48,230 --> 00:06:51,937
So now I had done this such
that the malicious content

156
00:06:51,937 --> 00:06:55,990
was essentially benign
and a very simple loader

157
00:06:55,990 --> 00:06:59,780
that could load the end payload from UEFI

158
00:06:59,780 --> 00:07:03,600
and then persist across
the Ram disk boundary.

159
00:07:03,600 --> 00:07:06,440
Then in fact, the EDR platform

160
00:07:06,440 --> 00:07:08,500
on the host system that would totally

161
00:07:08,500 --> 00:07:11,640
a three stage payload system

162
00:07:11,640 --> 00:07:15,910
with only one part that
the tiniest loader on disk,

163
00:07:15,910 --> 00:07:18,320
but in a sort of awkward place in disk,

164
00:07:18,320 --> 00:07:20,080
was hard to find.

165
00:07:20,080 --> 00:07:22,170
- [Topher] The whole
rationale behind this,

166
00:07:22,170 --> 00:07:24,440
was making it easier for

167
00:07:24,440 --> 00:07:26,310
offensive security practitioners

168
00:07:26,310 --> 00:07:29,540
and people on red teams,
to evade detection.

169
00:07:29,540 --> 00:07:31,940
Because any time you execute something

170
00:07:31,940 --> 00:07:36,940
to get that initial access,
that will leave a lot of traces,

171
00:07:37,120 --> 00:07:38,960
particularly in EDR,

172
00:07:38,960 --> 00:07:42,730
but we were all about reducing that threat

173
00:07:42,730 --> 00:07:45,460
to detection for us after the fact,

174
00:07:45,460 --> 00:07:48,320
and by hiding your shit in
places that these platforms

175
00:07:48,320 --> 00:07:51,150
are blind to, you can persist for longer.

176
00:07:51,150 --> 00:07:53,180
In reality, what we're
really trying to do,

177
00:07:53,180 --> 00:07:55,050
is bring that happiness to the world,

178
00:07:55,050 --> 00:07:57,880
because we're now happy that
we can persist for longer

179
00:07:57,880 --> 00:07:59,800
and run our engagements for longer.

180
00:07:59,800 --> 00:08:01,320
But the blue team's also happy,

181
00:08:01,320 --> 00:08:03,110
because they don't have
to work til midnight,

182
00:08:03,110 --> 00:08:04,240
hunting us down.

183
00:08:04,240 --> 00:08:06,070
- [Michael] It's true as it is now,

184
00:08:06,070 --> 00:08:08,520
it was then we need to flatten the curve.

185
00:08:08,520 --> 00:08:12,400
The curve of risk of you
being detected, over time.

186
00:08:12,400 --> 00:08:14,090
But no good thing lasts forever.

187
00:08:14,090 --> 00:08:15,980
Eventually your breach
is gonna get detected,

188
00:08:15,980 --> 00:08:18,763
but we just want that to
go a little bit longer.

189
00:08:19,810 --> 00:08:20,700
- [Mickey] Thank you, Topher and Mike,

190
00:08:20,700 --> 00:08:22,103
for that amazing summary.

191
00:08:22,970 --> 00:08:24,210
Just to recap, some of the things that

192
00:08:24,210 --> 00:08:27,300
we wanna emphasize here is,
we wanna avoid detection.

193
00:08:27,300 --> 00:08:29,890
We wanna make it harder
for forensic analysts

194
00:08:29,890 --> 00:08:32,360
to find our payload.

195
00:08:32,360 --> 00:08:37,240
We want to have code caves
that we can abuse later on.

196
00:08:37,240 --> 00:08:38,620
- [Jesse] Basically storing anything

197
00:08:38,620 --> 00:08:40,010
in nonconventional storage

198
00:08:40,010 --> 00:08:43,090
that the analysts are not looking at,

199
00:08:43,090 --> 00:08:45,183
hiding their blind spots.

200
00:08:46,150 --> 00:08:48,800
- [Mickey] A little bit
about UEFI variables.

201
00:08:48,800 --> 00:08:49,850
We've seen last year.

202
00:08:49,850 --> 00:08:53,965
We know EDR and AV have
started looking into these.

203
00:08:53,965 --> 00:08:56,730
Now we've seen Microsoft
adding capabilities.

204
00:08:56,730 --> 00:08:58,130
We'll talk about them later.

205
00:08:59,020 --> 00:09:00,860
But using Get and Set variable,

206
00:09:00,860 --> 00:09:04,007
is something that an attacker uses

207
00:09:04,007 --> 00:09:07,260
that is exposed by the windows API,

208
00:09:07,260 --> 00:09:08,700
which is nice and handy

209
00:09:08,700 --> 00:09:11,410
if you get that coveted admin privilege,

210
00:09:11,410 --> 00:09:15,157
but it's not that handy
when you are worried about

211
00:09:15,157 --> 00:09:18,690
AV and EDR hooking and
monitoring your behavior.

212
00:09:18,690 --> 00:09:20,770
So think about it like this.

213
00:09:20,770 --> 00:09:25,060
These API calls are not commonly used,

214
00:09:25,060 --> 00:09:28,410
and if you call them, you
will raise so many red flags.

215
00:09:28,410 --> 00:09:30,913
You just wanna hide under a rock.

216
00:09:32,060 --> 00:09:35,210
But under the hood,

217
00:09:35,210 --> 00:09:38,350
these API calls are
basically a windows wrapper

218
00:09:38,350 --> 00:09:41,240
to something called runtime services.

219
00:09:41,240 --> 00:09:45,740
UEFI-based BIOS has these
function calls and memory

220
00:09:45,740 --> 00:09:48,470
which are called runtime
services that are obviously,

221
00:09:48,470 --> 00:09:50,880
well as the name suggests,

222
00:09:50,880 --> 00:09:52,465
they're available during runtime,

223
00:09:52,465 --> 00:09:54,940
but they're only in ring zero,

224
00:09:54,940 --> 00:09:58,440
which means the windows API
calls those runtime services

225
00:09:58,440 --> 00:09:59,870
from a ring zero context.

226
00:09:59,870 --> 00:10:04,400
However, if you as an
attacker can get code

227
00:10:04,400 --> 00:10:06,270
executing in ring zero,

228
00:10:06,270 --> 00:10:09,970
you can call those
runtime services directly.

229
00:10:09,970 --> 00:10:10,880
The trick is,

230
00:10:10,880 --> 00:10:15,090
they have a magic header in
memory that you can search for,

231
00:10:15,090 --> 00:10:18,220
and then you can find the
runtime services table.

232
00:10:18,220 --> 00:10:21,101
Then from there, extrapolate the calls

233
00:10:21,101 --> 00:10:23,910
for setting a variable
and getting a variable.

234
00:10:23,910 --> 00:10:25,640
All that's nice and dandy, in theory.

235
00:10:25,640 --> 00:10:28,210
But to get that running in ring zero

236
00:10:28,210 --> 00:10:29,920
with modern protections,

237
00:10:29,920 --> 00:10:33,493
that Windows is incorporating,
is gonna be tricky.

238
00:10:34,360 --> 00:10:37,760
Okay, first step in
understanding what we have

239
00:10:37,760 --> 00:10:39,720
at our disposal is do

240
00:10:39,720 --> 00:10:43,920
a proper attack surface
enumeration, or proper scoping.

241
00:10:43,920 --> 00:10:46,050
Let's talk about some of the
ways that you can do that.

242
00:10:46,050 --> 00:10:48,270
But first and most obvious way,

243
00:10:48,270 --> 00:10:50,130
is to get your hands on your machine

244
00:10:50,130 --> 00:10:53,200
and pop open the box and look
at what you're attacking.

245
00:10:53,200 --> 00:10:58,200
It can be a laptop, desktop,
server, industrial controller,

246
00:10:58,740 --> 00:11:01,160
whatever you think falls under

247
00:11:01,160 --> 00:11:03,240
the definition of the word computer,

248
00:11:03,240 --> 00:11:05,910
but whatever you do, for the love of God,

249
00:11:05,910 --> 00:11:09,743
remember to unplug it from
power, before you take it apart.

250
00:11:12,377 --> 00:11:13,450
Some of the key things to remember

251
00:11:13,450 --> 00:11:15,210
when you take things apart.

252
00:11:15,210 --> 00:11:18,960
Remember where you put the
screws that you took out.

253
00:11:18,960 --> 00:11:20,180
Don't lose them.

254
00:11:20,180 --> 00:11:24,360
Remember which screw goes to which hole,

255
00:11:24,360 --> 00:11:28,381
because some of them are
longer than the others.

256
00:11:28,381 --> 00:11:30,750
For some diabolical reason,

257
00:11:30,750 --> 00:11:33,310
vendors tend to not adhere to

258
00:11:33,310 --> 00:11:36,860
the same standard, across devices.

259
00:11:36,860 --> 00:11:41,190
So while Dell laptops tend to
have the same length of screws

260
00:11:41,190 --> 00:11:42,980
holding their chassis in,

261
00:11:42,980 --> 00:11:45,697
some other third party vendors would have,

262
00:11:45,697 --> 00:11:47,510
and I shit you not,

263
00:11:47,510 --> 00:11:51,730
14 different screws that
have six different lengths,

264
00:11:51,730 --> 00:11:53,363
in the bottom of the laptop.

265
00:11:55,100 --> 00:11:58,173
Also remember to group
them and label them.

266
00:11:59,500 --> 00:12:01,330
If you have any static electricity,

267
00:12:01,330 --> 00:12:03,270
remember to dispose of it.

268
00:12:03,270 --> 00:12:07,270
If you don't have any static
electricity wristbands

269
00:12:07,270 --> 00:12:09,560
or anything, just yell and hope that you

270
00:12:09,560 --> 00:12:10,810
don't break your machine.

271
00:12:13,520 --> 00:12:15,320
Once you got it open,

272
00:12:15,320 --> 00:12:18,573
you need to get a magnifying
glass, or a jeweler's loop.

273
00:12:19,900 --> 00:12:21,500
You can pick these up,

274
00:12:21,500 --> 00:12:24,363
at like a couple of
bucks on Amazon or eBay.

275
00:12:26,040 --> 00:12:30,160
Many computers have a lot
of chips that look similar

276
00:12:30,160 --> 00:12:34,400
and have some very similar markings.

277
00:12:34,400 --> 00:12:37,040
For example, spychips made by WinBond

278
00:12:37,040 --> 00:12:40,630
will have very similar labels on them.

279
00:12:40,630 --> 00:12:43,380
But you'd find a couple of them

280
00:12:43,380 --> 00:12:45,550
on the same computer and when you

281
00:12:45,550 --> 00:12:46,973
won't be sure what's what,

282
00:12:48,020 --> 00:12:49,680
we recommend that you take a picture,

283
00:12:49,680 --> 00:12:50,750
use your phone.

284
00:12:50,750 --> 00:12:52,830
You have this device that gives you access

285
00:12:52,830 --> 00:12:55,130
to all the cap images on the internet.

286
00:12:55,130 --> 00:12:56,890
Use it to take pictures.

287
00:12:56,890 --> 00:12:59,280
If you can label the pictures,
label them, but fuck it.

288
00:12:59,280 --> 00:13:03,100
Just take a picture with your
phone and save it for later.

289
00:13:03,100 --> 00:13:04,740
I know this sounds basic.

290
00:13:04,740 --> 00:13:07,980
Everything I say sounds super basic,

291
00:13:07,980 --> 00:13:10,730
but these are things that you'd wish

292
00:13:10,730 --> 00:13:12,410
you'd thought of, at some point.

293
00:13:12,410 --> 00:13:15,620
Like I myself had written these down

294
00:13:15,620 --> 00:13:19,060
and it's lessons learned in blood.

295
00:13:19,060 --> 00:13:22,733
If you're afraid to
open your $1,500 laptop,

296
00:13:23,610 --> 00:13:25,610
don't worry someone on the internet

297
00:13:25,610 --> 00:13:27,500
has probably done it for you.

298
00:13:27,500 --> 00:13:31,640
So you need to Google the
shit out of tear down images.

299
00:13:31,640 --> 00:13:35,682
Seriously, start Googling
the words, tear down,

300
00:13:35,682 --> 00:13:40,682
or memory upgrade, or SSD
upgrade, or any of those.

301
00:13:42,170 --> 00:13:46,370
You'd find a lot of repair
shops, or repair tutorials,

302
00:13:46,370 --> 00:13:47,710
or upgrade tutorials online

303
00:13:47,710 --> 00:13:51,330
that have HD videos and images of

304
00:13:51,330 --> 00:13:53,420
the computers you're looking at.

305
00:13:53,420 --> 00:13:54,980
You might not be able to go down

306
00:13:54,980 --> 00:13:59,570
to the very low resolution
of what chip is what

307
00:13:59,570 --> 00:14:02,190
in what capacity,

308
00:14:02,190 --> 00:14:03,989
but you'll be able to get a sense of

309
00:14:03,989 --> 00:14:08,560
how many exists or how many

310
00:14:08,560 --> 00:14:11,420
you can risk opening your laptop for it.

311
00:14:11,420 --> 00:14:13,870
If you open it and you,
it was only like the chip

312
00:14:15,401 --> 00:14:17,280
one more versus six others

313
00:14:17,280 --> 00:14:20,453
that you suspect might
be holding firmware.

314
00:14:21,400 --> 00:14:24,557
Then your risk assessment

315
00:14:24,557 --> 00:14:27,640
about opening it, might change.

316
00:14:27,640 --> 00:14:30,000
One more option is look for schematics.

317
00:14:30,000 --> 00:14:34,180
Now it's a bit of a weird adventure,

318
00:14:34,180 --> 00:14:37,600
and you'll find yourself entering
the world of repair shops

319
00:14:37,600 --> 00:14:41,160
and schematics websites in Vietnam,

320
00:14:41,160 --> 00:14:45,020
but you'd be able to find a lot of PDFs

321
00:14:45,020 --> 00:14:48,800
that describe how devices interconnect,

322
00:14:48,800 --> 00:14:52,760
including non-volatile and
firmware storage devices.

323
00:14:52,760 --> 00:14:57,620
You might be finding a lot of
EEPROMs that are on the board.

324
00:14:57,620 --> 00:14:59,770
The schematics will tell
you exactly what address

325
00:14:59,770 --> 00:15:01,560
you need to communicate with,

326
00:15:01,560 --> 00:15:05,010
to read or write from
which SMBus line has,

327
00:15:05,010 --> 00:15:07,290
what controller allows you.

328
00:15:07,290 --> 00:15:11,030
It will basically allow you to understand

329
00:15:11,030 --> 00:15:13,810
which device does what and how.

330
00:15:13,810 --> 00:15:14,967
I wouldn't put too much effort into this

331
00:15:14,967 --> 00:15:17,830
attack surface scoping method,

332
00:15:17,830 --> 00:15:22,830
because schematics tend to
be confidential and secret.

333
00:15:23,320 --> 00:15:27,174
If you happen to find one
of a more recent platform,

334
00:15:27,174 --> 00:15:29,593
it's going to be really rare.

335
00:15:30,460 --> 00:15:32,750
But if you wanna practice on an old one,

336
00:15:32,750 --> 00:15:35,180
buy a laptop from eBay

337
00:15:35,180 --> 00:15:37,700
and see if you can find that schematics.

338
00:15:37,700 --> 00:15:38,930
Go ahead, go for it.

339
00:15:38,930 --> 00:15:41,513
You could spend like a
100, 200 bucks on this.

340
00:15:44,380 --> 00:15:49,380
My favorite part, is looking
for official documentation.

341
00:15:51,722 --> 00:15:55,960
The biggest tip we could give
you for looking for those,

342
00:15:55,960 --> 00:15:58,300
is statement of volatilities,

343
00:15:58,300 --> 00:16:00,870
or declarations of volatilities.

344
00:16:00,870 --> 00:16:03,590
The best way to do this, is just Google

345
00:16:03,590 --> 00:16:07,070
in quotes "of volatility", and
just add the file type PDF,

346
00:16:07,070 --> 00:16:10,430
and include the words flash or CMOS or,

347
00:16:10,430 --> 00:16:12,270
or spy or whatever,

348
00:16:12,270 --> 00:16:15,060
from keywords that you can
find from other documents,

349
00:16:15,060 --> 00:16:16,510
you will find in the process.

350
00:16:17,442 --> 00:16:21,853
These documents basically state

351
00:16:21,853 --> 00:16:26,350
what volatile and non-volatile
components are in a platform.

352
00:16:26,350 --> 00:16:29,630
Now, not every computer has this type of

353
00:16:29,630 --> 00:16:31,268
document associated with it,

354
00:16:31,268 --> 00:16:34,950
but from finding these documents online,

355
00:16:34,950 --> 00:16:39,323
you can understand what is
in most common platforms.

356
00:16:40,310 --> 00:16:44,420
Some of these, the
documents contain hilarities

357
00:16:44,420 --> 00:16:49,420
like this one thing, 128
bytes are protected by Intel.

358
00:16:50,130 --> 00:16:53,760
The other 128 bytes,
are not write-protected.

359
00:16:53,760 --> 00:16:55,870
So what the shit?

360
00:16:55,870 --> 00:16:59,160
Like, why would you put this in a document

361
00:16:59,160 --> 00:17:02,440
that tells me I have 256 bytes

362
00:17:02,440 --> 00:17:06,560
of non-volatile storage,
half of it's protected,

363
00:17:06,560 --> 00:17:08,743
the other half is not, go have fun?

364
00:17:09,580 --> 00:17:10,764
Okay.

365
00:17:10,764 --> 00:17:12,283
We have a demo about that.

366
00:17:14,550 --> 00:17:17,550
Now, I wanted to put a
picture of the PDF here,

367
00:17:17,550 --> 00:17:20,210
but I couldn't find a
good enough resolution.

368
00:17:20,210 --> 00:17:23,553
So I had to prop a snippet of the table.

369
00:17:25,653 --> 00:17:28,470
The table that you see here

370
00:17:28,470 --> 00:17:31,885
is somewhat a representation
of what you will see

371
00:17:31,885 --> 00:17:36,490
in a statement, a volatility document.

372
00:17:36,490 --> 00:17:40,420
You'll see, you see a
breaking down by type size.

373
00:17:40,420 --> 00:17:42,150
If it's volatile, non-volatile,

374
00:17:42,150 --> 00:17:44,760
what's it used for, how to clear it.

375
00:17:44,760 --> 00:17:47,620
Sometimes it's not gonna be documented

376
00:17:47,620 --> 00:17:48,570
how to clear it or not.

377
00:17:48,570 --> 00:17:51,160
Sometimes it will be there's
sometimes in some platforms,

378
00:17:51,160 --> 00:17:55,510
jumpers, you need to remove and put back.

379
00:17:55,510 --> 00:17:59,740
But the key point that I
wanna tell you here is,

380
00:17:59,740 --> 00:18:02,520
even though you see documents saying,

381
00:18:02,520 --> 00:18:04,500
is this user modifiable?

382
00:18:04,500 --> 00:18:05,980
Yes and no.

383
00:18:05,980 --> 00:18:09,490
You never know if it means,
is it user space modifiable,

384
00:18:09,490 --> 00:18:14,060
or is it modifiable from a user at all?

385
00:18:14,060 --> 00:18:18,690
Whatever you do, as a rule to live by,

386
00:18:18,690 --> 00:18:20,760
always challenge the basic assumptions

387
00:18:20,760 --> 00:18:23,640
that you encounter in
official documentation,

388
00:18:23,640 --> 00:18:25,940
especially some that you
can prove easily wrong.

389
00:18:25,940 --> 00:18:28,440
I can tell you that even
though some of these

390
00:18:28,440 --> 00:18:31,580
are not saying it's not user modifiable,

391
00:18:31,580 --> 00:18:35,583
you will see in a few minutes,
a demo saying that it is.

392
00:18:37,570 --> 00:18:39,470
- [Jesse] Yeah, to follow
up on that a little.

393
00:18:39,470 --> 00:18:41,010
User modifiable in this case,

394
00:18:41,010 --> 00:18:44,210
means that it's intended to be presented

395
00:18:44,210 --> 00:18:48,290
to the user to be modifiable,
like the BIOS password.

396
00:18:48,290 --> 00:18:50,799
The user is intended to
be able to modify this,

397
00:18:50,799 --> 00:18:55,799
but system software or other
software running on the device

398
00:18:56,750 --> 00:18:59,130
could be modifying these components.

399
00:18:59,130 --> 00:19:01,090
It just is not making that

400
00:19:01,090 --> 00:19:02,830
directly accessible to the customer.

401
00:19:02,830 --> 00:19:05,810
It doesn't mean that it's
not modifiable at all.

402
00:19:05,810 --> 00:19:08,950
- [Mickey] Now that we showed
you a way or multiple ways

403
00:19:08,950 --> 00:19:11,640
to find information and
exploited by yourself,

404
00:19:11,640 --> 00:19:14,510
we can go ahead and start
diving a little bit deeper into

405
00:19:14,510 --> 00:19:17,360
some individual components
that we talked about before.

406
00:19:17,360 --> 00:19:20,760
We'll go through them one at a
time and we'll describe them.

407
00:19:20,760 --> 00:19:23,700
Then we'll later proceed into explaining

408
00:19:23,700 --> 00:19:27,350
what the pros and cons are,
from an attacker's perspective.

409
00:19:27,350 --> 00:19:29,423
Hopefully, we can have fun while doing it.

410
00:19:32,400 --> 00:19:33,570
First things first.

411
00:19:33,570 --> 00:19:37,463
Remember that 128 byte that we saw before?

412
00:19:38,530 --> 00:19:42,410
if we looked at the CMOS
example in the previous slide,

413
00:19:42,410 --> 00:19:45,180
it said, it's not user motive, modifiable.

414
00:19:45,180 --> 00:19:49,290
I know Jesse explained
that it's what the user

415
00:19:49,290 --> 00:19:51,810
can modify sometimes by using

416
00:19:51,810 --> 00:19:53,280
a GBe like the BIOS password.

417
00:19:53,280 --> 00:19:58,210
But I wanted to emphasize that these

418
00:19:58,210 --> 00:19:59,570
whatever the document says,

419
00:19:59,570 --> 00:20:01,687
doesn't literally mean
what you think it means

420
00:20:01,687 --> 00:20:03,583
and you need to go double check.

421
00:20:05,201 --> 00:20:07,903
So basically, back to the CMOS topic.

422
00:20:09,130 --> 00:20:14,130
If you are young and you have
no idea what SEMA stands for,

423
00:20:14,260 --> 00:20:15,830
I am jealous.

424
00:20:15,830 --> 00:20:19,180
If you are somewhat old
and you had to remove

425
00:20:19,180 --> 00:20:22,010
a battery from your computer motherboard,

426
00:20:22,010 --> 00:20:23,880
my heart's with you.

427
00:20:23,880 --> 00:20:28,260
It's really a relic that's used

428
00:20:28,260 --> 00:20:32,120
to have settings set for BIOS.

429
00:20:32,120 --> 00:20:33,370
For the system, bring up.

430
00:20:34,400 --> 00:20:39,290
It's a tiny bit of non-volatile Ram.

431
00:20:39,290 --> 00:20:42,920
That is only non-volatile,
as long as they're current.

432
00:20:42,920 --> 00:20:44,580
That current is supplied by

433
00:20:44,580 --> 00:20:47,693
the little lithium battery
on the motherboard.

434
00:20:48,800 --> 00:20:53,263
The main thing I've seen this
used is the realtime clock.

435
00:20:54,270 --> 00:20:57,930
So you know how you have a power surge

436
00:20:57,930 --> 00:21:00,180
and the microwave clock goes out,

437
00:21:00,180 --> 00:21:03,430
but your computer has the
same clock afterwards,

438
00:21:03,430 --> 00:21:04,730
probably because it keeps that

439
00:21:04,730 --> 00:21:06,803
realtime clock timer going internally.

440
00:21:08,440 --> 00:21:09,930
In modern platforms,

441
00:21:09,930 --> 00:21:12,770
the CMOS is located inside the chip set.

442
00:21:12,770 --> 00:21:15,200
So you really can't see it.

443
00:21:15,200 --> 00:21:18,570
It's itty-bitty, not like other chips

444
00:21:18,570 --> 00:21:20,213
that we're gonna talk about later.

445
00:21:22,550 --> 00:21:27,550
The pros of CMOS is it
has a few unused bytes.

446
00:21:28,210 --> 00:21:31,510
You can access it through IO ports.

447
00:21:31,510 --> 00:21:34,453
You can do in-and-out
instructions to get to it.

448
00:21:35,430 --> 00:21:37,663
It exists almost everywhere.

449
00:21:39,630 --> 00:21:42,660
The cons are that it's super tiny.

450
00:21:42,660 --> 00:21:47,660
It only contains 256 bytes,
separated to two regions:

451
00:21:47,790 --> 00:21:49,813
lower CMOS and upper CMOS.

452
00:21:50,700 --> 00:21:53,260
If you mess up the wrong bytes,

453
00:21:53,260 --> 00:21:56,510
you might cause yourself some trouble

454
00:21:56,510 --> 00:21:58,760
and you might need to reset the CMOS,

455
00:21:58,760 --> 00:22:01,150
or fuck up the platform.

456
00:22:01,150 --> 00:22:05,600
We don't know exactly
what each modification

457
00:22:05,600 --> 00:22:09,720
of each bit might do,
but it's well documented.

458
00:22:09,720 --> 00:22:11,020
Then if you wanna go to explore

459
00:22:11,020 --> 00:22:14,253
what you can do with it,
it's all over Wikipedia.

460
00:22:15,650 --> 00:22:20,400
One other thing that we
we think might happen,

461
00:22:20,400 --> 00:22:25,400
is that if there are certain
PCR measurements done by TPM,

462
00:22:25,450 --> 00:22:29,760
modifying CMOS might trigger an alert.

463
00:22:29,760 --> 00:22:33,880
For example, BitLocker has
a PCR, as it's monitoring.

464
00:22:33,880 --> 00:22:35,370
If those PCR change,

465
00:22:35,370 --> 00:22:37,563
then it goes into BitLocker recovery mode.

466
00:22:39,210 --> 00:22:43,290
In short, we're pretty sure
you can have fun with this,

467
00:22:43,290 --> 00:22:45,653
but don't mess up bytes that are not zero.

468
00:22:49,220 --> 00:22:51,563
So you don't think we're full of shit.

469
00:22:53,110 --> 00:22:56,650
Here is a short demo of how to abuse CMOS.

470
00:22:56,650 --> 00:22:58,870
In the demo you're about to see,

471
00:22:58,870 --> 00:23:01,760
we have the steps written on the right.

472
00:23:01,760 --> 00:23:04,129
Basically, we read the CMOS.

473
00:23:04,129 --> 00:23:09,129
We write a random payload
to the lower part of CMOS.

474
00:23:10,680 --> 00:23:12,094
You read it.

475
00:23:12,094 --> 00:23:15,200
So we show you that
there is a change there.

476
00:23:15,200 --> 00:23:16,430
We restore it back.

477
00:23:16,430 --> 00:23:19,470
Then we read it again to
show that we changed it back.

478
00:23:19,470 --> 00:23:21,563
Let's go and run the demo.

479
00:23:24,591 --> 00:23:27,341
(relaxing music)

480
00:24:01,440 --> 00:24:03,550
We're gonna have the code
for this demo up on GitHub,

481
00:24:03,550 --> 00:24:06,000
after the talk is published,

482
00:24:06,000 --> 00:24:07,070
and we'll keep an eye on that GitHub,

483
00:24:07,070 --> 00:24:08,560
because we're gonna keep adding

484
00:24:08,560 --> 00:24:10,460
more and more code to it, as we go on.

485
00:24:12,580 --> 00:24:15,210
- [Jesse] So let's take
a look at SPI Flash.

486
00:24:15,210 --> 00:24:18,930
In order to know where to
start executing code from

487
00:24:18,930 --> 00:24:23,173
in the first place, that code
is stored in the SPI Flash.

488
00:24:24,100 --> 00:24:25,620
When the system turns are on,

489
00:24:25,620 --> 00:24:27,883
it starts executing
instructions from there.

490
00:24:28,940 --> 00:24:32,300
Traditionally, that was known
as BIOS, but these days,

491
00:24:32,300 --> 00:24:34,640
almost all systems have transitioned over

492
00:24:34,640 --> 00:24:37,263
to using a UEFI firmware instead.

493
00:24:38,110 --> 00:24:40,160
This firmware is stored in the SPI Flash.

494
00:24:41,110 --> 00:24:44,950
There's a few different
regions within the SPI Flash.

495
00:24:44,950 --> 00:24:46,380
If you have an Intel platform,

496
00:24:46,380 --> 00:24:49,360
you'll have a region for
the manageability engine,

497
00:24:49,360 --> 00:24:50,193
or the ME.

498
00:24:51,190 --> 00:24:53,050
It's also known as the CSME.

499
00:24:53,050 --> 00:24:55,990
ME platforms will have a PSP region

500
00:24:55,990 --> 00:24:58,280
for the platform security controller.

501
00:24:58,280 --> 00:24:59,760
There's also a flash descriptor,

502
00:24:59,760 --> 00:25:02,080
which contains essentially a map

503
00:25:02,080 --> 00:25:04,636
for how the contents of the
SPI Flash are organized,

504
00:25:04,636 --> 00:25:07,973
as well as access permissions
for these regions.

505
00:25:10,720 --> 00:25:14,840
So taking a look at the contents
of the SPI Flash itself,

506
00:25:14,840 --> 00:25:16,770
there's a couple of
constraints that determine

507
00:25:16,770 --> 00:25:19,763
the location of a couple
of the regions in there.

508
00:25:20,630 --> 00:25:23,460
First, when the system boots up,

509
00:25:23,460 --> 00:25:26,520
the top of that SPI Flash
is mapped to the top of

510
00:25:26,520 --> 00:25:29,660
the four gigabyte address
space in order for

511
00:25:30,551 --> 00:25:34,930
the x86 reset vector to start
executing code from there.

512
00:25:34,930 --> 00:25:37,650
Because of this, the
top of the BIOS region

513
00:25:37,650 --> 00:25:40,870
needs to correspond to
the top of the SPI Flash.

514
00:25:40,870 --> 00:25:43,673
It can vary in size, so you can have

515
00:25:43,673 --> 00:25:48,673
a eight Meg BIOS region
or a four meg BIOS region.

516
00:25:50,400 --> 00:25:52,472
The size can vary,

517
00:25:52,472 --> 00:25:55,840
but the top of that
region needs to correspond

518
00:25:55,840 --> 00:25:58,343
to the top of the spy chip itself.

519
00:25:59,730 --> 00:26:02,750
Additionally, the flash descriptor region,

520
00:26:02,750 --> 00:26:05,110
which is essentially
the map and permissions

521
00:26:05,110 --> 00:26:09,370
and what is actually stored
throughout the spy chip,

522
00:26:09,370 --> 00:26:12,952
that starts at the
beginning of the SPI Flash.

523
00:26:12,952 --> 00:26:17,743
It contains some platform
configuration for the device,

524
00:26:17,743 --> 00:26:20,610
as well as the map determining
where these regions

525
00:26:20,610 --> 00:26:24,273
are stored within the SPI Flash itself.

526
00:26:24,273 --> 00:26:28,470
There can be some additional
regions like the ME region.

527
00:26:28,470 --> 00:26:31,240
Some platforms will have GBe region,

528
00:26:31,240 --> 00:26:34,240
or an embedded controller region.

529
00:26:34,240 --> 00:26:35,970
There can be a platform data region,

530
00:26:35,970 --> 00:26:40,970
which is for OEM-specific
additional components.

531
00:26:41,460 --> 00:26:44,160
The region mapping in
the flash descriptor,

532
00:26:44,160 --> 00:26:46,110
also doesn't need to include

533
00:26:46,110 --> 00:26:48,100
all of the contents of the SPI region.

534
00:26:48,100 --> 00:26:51,097
So there can be some padding regions,

535
00:26:51,097 --> 00:26:53,850
or padding areas that
aren't actually included

536
00:26:53,850 --> 00:26:55,883
in the map, as well.

537
00:26:57,850 --> 00:27:01,170
To take a look at the
flash descriptor itself,

538
00:27:01,170 --> 00:27:04,600
starting at the very
beginning of the SPI contents,

539
00:27:04,600 --> 00:27:08,441
there's a signature at 10 hex,

540
00:27:08,441 --> 00:27:11,184
offset 10 hex, that is used to determine

541
00:27:11,184 --> 00:27:14,343
if there is a flash
descriptor in this area.

542
00:27:15,522 --> 00:27:17,600
Then there's a mapping.

543
00:27:17,600 --> 00:27:19,480
There's a variety of different components

544
00:27:19,480 --> 00:27:22,690
and access control lists to determine

545
00:27:22,690 --> 00:27:25,170
if the CPU has access to read and write

546
00:27:25,170 --> 00:27:26,840
a particular SPI region,

547
00:27:26,840 --> 00:27:29,040
or the ME has access to read and write

548
00:27:29,040 --> 00:27:30,300
to a particular SPI region.

549
00:27:30,300 --> 00:27:33,730
Or the GBe controller

550
00:27:33,730 --> 00:27:35,390
has access to read and write

551
00:27:35,390 --> 00:27:36,790
directly to that SPI region.

552
00:27:36,790 --> 00:27:40,803
So those access controls are
stored in the flash descriptor.

553
00:27:43,513 --> 00:27:46,470
So there are a lot of cases where

554
00:27:46,470 --> 00:27:50,230
the CPU can't directly read
and write to the ME region

555
00:27:50,230 --> 00:27:52,370
and most systems these days

556
00:27:52,370 --> 00:27:54,610
will have that BIOS region protected

557
00:27:54,610 --> 00:27:57,580
via hardware mechanisms in the chip set.

558
00:27:57,580 --> 00:27:59,900
Occasionally, we run into systems

559
00:27:59,900 --> 00:28:02,290
where that is still
not protected properly.

560
00:28:02,290 --> 00:28:05,182
You can just directly write
to the SPI and BIOS region,

561
00:28:05,182 --> 00:28:09,000
from a code running on the CPU.

562
00:28:09,000 --> 00:28:10,030
But even in the case that

563
00:28:10,030 --> 00:28:12,403
that BIOS region is properly protected,

564
00:28:13,974 --> 00:28:18,080
there can be bugs in the
BIOS update mechanism itself.

565
00:28:18,080 --> 00:28:21,130
Sometimes that doesn't provide
signature verification.

566
00:28:21,130 --> 00:28:25,462
Sometimes it will do
signature verification

567
00:28:25,462 --> 00:28:27,960
for part of the region,

568
00:28:27,960 --> 00:28:32,960
but still copy data into
that SPI Flash for you.

569
00:28:33,930 --> 00:28:36,530
However, the GBe region itself,

570
00:28:36,530 --> 00:28:38,610
is generally unprotected and you have

571
00:28:38,610 --> 00:28:41,133
full read and write access
to that from the CPU.

572
00:28:42,330 --> 00:28:45,350
We also sometimes run into cases where

573
00:28:45,350 --> 00:28:49,310
the flash descriptor itself
has incorrect permissions,

574
00:28:49,310 --> 00:28:51,163
and that can be rewritten via software

575
00:28:51,163 --> 00:28:54,490
to modify the existing region definitions,

576
00:28:54,490 --> 00:28:59,050
or even define new regions
in the SPI Flash layout

577
00:28:59,050 --> 00:29:01,570
and change the permissions
for those regions.

578
00:29:01,570 --> 00:29:03,933
So if you have that issue,

579
00:29:04,870 --> 00:29:08,010
there's a lot of ways that you
can take advantage of that.

580
00:29:08,010 --> 00:29:09,790
Another interesting storage location

581
00:29:09,790 --> 00:29:13,380
is the SPD, or serial
presence detect chip,

582
00:29:13,380 --> 00:29:16,193
in DRAM memory modules.

583
00:29:17,190 --> 00:29:19,900
Although some recent devices
like laptops and tablets

584
00:29:19,900 --> 00:29:23,150
only have solder down memory,
which is not replaceable.

585
00:29:23,150 --> 00:29:26,240
The vast majority of systems
include replaceable memories.

586
00:29:26,240 --> 00:29:28,638
There are a lot of
different types of memory.

587
00:29:28,638 --> 00:29:32,493
There's a DRAM-2, DRAM-3, DRAM-4.

588
00:29:33,620 --> 00:29:35,660
Each of these different memory modules

589
00:29:36,510 --> 00:29:39,310
have different parameters
and configuration

590
00:29:39,310 --> 00:29:42,103
that needs to be done,
in order to be used.

591
00:29:43,604 --> 00:29:46,430
The SPD has been created as a standard way

592
00:29:46,430 --> 00:29:49,111
for a replaceable memory module

593
00:29:49,111 --> 00:29:53,080
to provide this information to the system,

594
00:29:53,080 --> 00:29:55,030
so that the system knows how to talk to

595
00:29:55,030 --> 00:29:56,523
the memory module and use it.

596
00:29:58,520 --> 00:30:02,530
So the SPD is essentially a tiny EEPROM

597
00:30:02,530 --> 00:30:05,610
on those DRAM memory modules.

598
00:30:05,610 --> 00:30:08,250
It includes both the memory module type.

599
00:30:08,250 --> 00:30:12,300
Like if it's DDR-2, DDR-3, DDR-4,

600
00:30:12,300 --> 00:30:15,860
as well as the size of the module itself.

601
00:30:15,860 --> 00:30:18,080
There there's a information about

602
00:30:18,080 --> 00:30:20,520
the layout of the memory module as well,

603
00:30:20,520 --> 00:30:22,683
including the number of banks.

604
00:30:23,860 --> 00:30:27,560
If it includes features like ECC,

605
00:30:27,560 --> 00:30:29,950
as well as timing and voltage requirements

606
00:30:29,950 --> 00:30:33,730
that are necessary for
the system to understand,

607
00:30:33,730 --> 00:30:36,230
to know how to talk to and
use this memory module.

608
00:30:37,140 --> 00:30:39,040
When the system is booting up,

609
00:30:39,040 --> 00:30:41,580
it reads this SPD EEPROM in order to

610
00:30:41,580 --> 00:30:43,330
determine this information,

611
00:30:43,330 --> 00:30:46,740
so that it knows how to
configure the memory controller.

612
00:30:46,740 --> 00:30:49,210
Modifying certain parts of
this configuration data,

613
00:30:49,210 --> 00:30:51,533
can cause the system
to not boot up anymore.

614
00:30:53,440 --> 00:30:54,870
The system just will be bricked,

615
00:30:54,870 --> 00:30:59,290
until this module is physically
removed from the system.

616
00:30:59,290 --> 00:31:03,230
In some systems, this SPD,
the lower half of the SPD,

617
00:31:03,230 --> 00:31:07,290
which contains this
critical data, is locked.

618
00:31:07,290 --> 00:31:09,742
Sometimes that's not protected though.

619
00:31:09,742 --> 00:31:12,770
Modifying that region
can brick the system,

620
00:31:12,770 --> 00:31:15,776
or cause other unexpected behavior.

621
00:31:15,776 --> 00:31:20,730
But generally, the upper half
of that SPD is writeable.

622
00:31:20,730 --> 00:31:23,110
We can use that to store a small amounts

623
00:31:23,110 --> 00:31:25,610
of data for payloads,
such as encryption keys,

624
00:31:25,610 --> 00:31:28,023
or other interesting data.

625
00:31:30,250 --> 00:31:34,120
So for accessing the SPD,
we need to have it unlocked.

626
00:31:34,120 --> 00:31:36,963
It's essentially a SPD EEPROM,

627
00:31:38,250 --> 00:31:41,770
that is connected over an SMBus interface.

628
00:31:41,770 --> 00:31:45,720
So there's an SMBus
controller in the chip set

629
00:31:45,720 --> 00:31:49,850
that is used to talk to this SMBus device

630
00:31:49,850 --> 00:31:52,010
in the memory module.

631
00:31:52,010 --> 00:31:54,100
That includes a protection mechanism

632
00:31:54,100 --> 00:31:56,012
to prevent writes to it.

633
00:31:56,012 --> 00:32:01,012
If that bit is set, we can't
write to the SPD itself,

634
00:32:01,080 --> 00:32:03,410
but we've run into systems

635
00:32:03,410 --> 00:32:05,730
where that bit is not set properly.

636
00:32:05,730 --> 00:32:07,910
It is a very small amount of data

637
00:32:07,910 --> 00:32:09,210
that you can store things in,

638
00:32:09,210 --> 00:32:14,020
but there are some usage scenarios where

639
00:32:14,020 --> 00:32:16,893
that actually makes sense and
you don't need a lot of data.

640
00:32:16,893 --> 00:32:20,640
There are also tax scenarios
where maybe bricking a device

641
00:32:20,640 --> 00:32:23,520
makes sense in the attack class.

642
00:32:23,520 --> 00:32:25,744
We wanna make sure that
people understand that,

643
00:32:25,744 --> 00:32:30,030
that is also a concern, that
if you can write to this SPD,

644
00:32:30,030 --> 00:32:33,883
there are bricking scenarios
that can come into play here.

645
00:32:34,930 --> 00:32:37,310
- [Mickey] Next, we have USB controllers.

646
00:32:37,310 --> 00:32:40,730
Now, these are USB controllers
that could be found

647
00:32:40,730 --> 00:32:44,630
on your motherboard, or part
of an external PCI card,

648
00:32:44,630 --> 00:32:46,330
that is plugged into your mother board,

649
00:32:46,330 --> 00:32:50,060
or part of an external USB-C device

650
00:32:50,060 --> 00:32:51,620
that is connected to your computer,

651
00:32:51,620 --> 00:32:55,390
or M2 modules inside your laptop.

652
00:32:55,390 --> 00:32:58,943
Some of these have up-dateable firmware.

653
00:33:00,450 --> 00:33:03,570
It's depressingly common,

654
00:33:03,570 --> 00:33:08,253
How many of these have
unsigned firmware updates.

655
00:33:09,680 --> 00:33:10,930
You as an attacker,

656
00:33:10,930 --> 00:33:14,660
can store whatever
payload you want, on them.

657
00:33:14,660 --> 00:33:18,380
For example, we can have,
not just USB controllers

658
00:33:18,380 --> 00:33:23,380
that exist as USB bridges,
or on your motherboard.

659
00:33:23,440 --> 00:33:25,193
It doesn't have to be a USB controller.

660
00:33:25,193 --> 00:33:28,110
It will be actually a PCI device

661
00:33:28,110 --> 00:33:32,170
that exposes a USB 3.1 interface.

662
00:33:32,170 --> 00:33:36,890
If you have USB-C ports on your desktop,

663
00:33:37,930 --> 00:33:40,610
most likely you'll have one of these

664
00:33:40,610 --> 00:33:43,490
PCI-USB components.

665
00:33:43,490 --> 00:33:47,350
Not necessarily all of them are PCI-USB.

666
00:33:47,350 --> 00:33:50,723
Some of them are USB-SATA.

667
00:33:51,710 --> 00:33:55,860
For example, there is an
external hard drive enclosure

668
00:33:55,860 --> 00:33:57,810
that has this exact,

669
00:33:57,810 --> 00:33:58,643
well, I won't say issue,

670
00:33:58,643 --> 00:34:01,670
but exact design, which has a controller

671
00:34:01,670 --> 00:34:04,620
that talks over USB 3.1 on one end.

672
00:34:04,620 --> 00:34:07,960
On the other end, it
talks to a SATA hard drive

673
00:34:07,960 --> 00:34:09,690
and it has up-dateable firmware.

674
00:34:09,690 --> 00:34:12,753
You can update that
firmware from the computer.

675
00:34:13,840 --> 00:34:18,840
The next demo we have is
one of these USB controllers

676
00:34:19,046 --> 00:34:22,320
embedded in your motherboard,

677
00:34:22,320 --> 00:34:23,670
that we update the firmware

678
00:34:23,670 --> 00:34:25,620
to include a malicious payload.

679
00:34:25,620 --> 00:34:28,040
In this case, a metasploit bell code.

680
00:34:28,040 --> 00:34:29,660
So what you're gonna see is,

681
00:34:29,660 --> 00:34:32,940
a program that we have
adapted to read the firmware

682
00:34:32,940 --> 00:34:35,773
from this USB controller,

683
00:34:36,640 --> 00:34:40,023
loaded into memory and execute it.

684
00:34:40,023 --> 00:34:45,023
I know it's going to look
dumb, but we're basically,

685
00:34:45,160 --> 00:34:47,840
we're clicking on a file.

686
00:34:47,840 --> 00:34:49,570
It's running as admin.

687
00:34:49,570 --> 00:34:51,720
Then we get a connect
back in (indistinct).

688
00:34:52,620 --> 00:34:53,480
It's not dumb.

689
00:34:53,480 --> 00:34:55,980
I promise you, I'll show
you the code right after.

690
00:34:56,830 --> 00:34:59,580
(relaxing music)

691
00:35:22,190 --> 00:35:24,713
Okay, breaking down
the video you just saw,

692
00:35:25,820 --> 00:35:27,193
on the right side,

693
00:35:28,740 --> 00:35:32,390
we have a binary visualization
of the firmware image

694
00:35:32,390 --> 00:35:37,390
we're writing to the
device, to save our payload.

695
00:35:37,560 --> 00:35:41,580
What's circled in red is
the actual metasploit code

696
00:35:41,580 --> 00:35:43,440
that we have in the firmware.

697
00:35:43,440 --> 00:35:46,833
What's colored black, is empty space.

698
00:35:47,750 --> 00:35:49,550
Everything else is actual code.

699
00:35:49,550 --> 00:35:52,770
So you'd see, there is
about a third of it.

700
00:35:52,770 --> 00:35:54,193
Almost half of the image.

701
00:35:54,193 --> 00:35:56,590
It's 128 kilobytes.

702
00:35:56,590 --> 00:36:00,030
Out of that, so much space is empty

703
00:36:00,030 --> 00:36:01,663
for us to use as attackers.

704
00:36:03,401 --> 00:36:07,760
I put a few hundred bytes as
payload for a demo, looks tiny.

705
00:36:10,420 --> 00:36:14,726
If we look at the code that
we have loading this exploit,

706
00:36:14,726 --> 00:36:18,180
the first part gets the hidden bytes

707
00:36:18,180 --> 00:36:20,890
looking for a magic header,

708
00:36:20,890 --> 00:36:24,530
which has lead leaked, because obviously,

709
00:36:24,530 --> 00:36:27,010
and once we find the lead leak,

710
00:36:27,010 --> 00:36:30,270
we fill up a buffer with
the bytes from the firmware.

711
00:36:30,270 --> 00:36:32,130
After we have the payload,

712
00:36:32,130 --> 00:36:33,360
after we have the payload,

713
00:36:33,360 --> 00:36:38,360
we use method that Topher
and Mike used last year,

714
00:36:38,694 --> 00:36:41,639
for loading their payload from UEFI.

715
00:36:41,639 --> 00:36:45,480
But in this case, we use
interruptability and marshaling.

716
00:36:45,480 --> 00:36:47,280
So there's no P invokes.

717
00:36:47,280 --> 00:36:49,342
Topher helped us speak this up

718
00:36:49,342 --> 00:36:53,840
and we load them in memory
and we execute them,

719
00:36:53,840 --> 00:36:55,010
simple as that, all this code is

720
00:36:55,010 --> 00:36:56,460
gonna be available on GitHub.

721
00:36:58,050 --> 00:37:00,320
Generally speaking, as an attacker,

722
00:37:00,320 --> 00:37:04,140
you break this attack
into two distinct steps.

723
00:37:04,140 --> 00:37:06,405
One, is hiding the payload.

724
00:37:06,405 --> 00:37:09,830
The second, is retrieving and running it.

725
00:37:09,830 --> 00:37:13,540
When you hide it, you have
to get the firmware image,

726
00:37:13,540 --> 00:37:16,460
incorporate your payload
into firmware image in bytes

727
00:37:16,460 --> 00:37:21,460
that will not disrupt normal
behavior, or functionality

728
00:37:22,200 --> 00:37:26,023
and upload that new image to
your target device or firmware.

729
00:37:26,980 --> 00:37:29,770
When you retrieve it, you
have to read the firmware

730
00:37:29,770 --> 00:37:32,630
like any other mechanism or
use the built-in mechanisms,

731
00:37:32,630 --> 00:37:34,710
or known tools.

732
00:37:34,710 --> 00:37:36,570
Extract your hidden bytes,

733
00:37:36,570 --> 00:37:37,913
and then do the malicious.

734
00:37:38,880 --> 00:37:41,090
Let's review a little
bit of the attack surface

735
00:37:41,090 --> 00:37:43,440
from an internal asset perspective.

736
00:37:43,440 --> 00:37:46,270
You have USB controllers that are embedded

737
00:37:46,270 --> 00:37:49,092
in your devices that
have their own firmware.

738
00:37:49,092 --> 00:37:54,092
You have PCI bridges that
act as PCI-USB devices.

739
00:37:54,830 --> 00:37:58,950
You have track pads and
touch points and touch pads.

740
00:37:58,950 --> 00:38:01,610
If you have, I think,
what is it, it's a point,

741
00:38:01,610 --> 00:38:02,670
I don't know what it's called.

742
00:38:02,670 --> 00:38:04,138
You have one of those track pads.

743
00:38:04,138 --> 00:38:07,933
It can have sometimes
its own internal flash.

744
00:38:08,930 --> 00:38:10,570
The monitors you're using.

745
00:38:10,570 --> 00:38:14,170
if you ever plugged in a USB cable

746
00:38:14,170 --> 00:38:16,240
from your laptop to your monitors,

747
00:38:16,240 --> 00:38:18,530
just so you can use the little USB hub

748
00:38:18,530 --> 00:38:20,437
on the side of the monitor.

749
00:38:20,437 --> 00:38:23,859
If you're one of those
blessed few that do that,

750
00:38:23,859 --> 00:38:28,230
then you should know that that
monitor has USB hub in it.

751
00:38:28,230 --> 00:38:29,320
It has firmware.

752
00:38:29,320 --> 00:38:33,460
Most likely you can modify
it from your computer.

753
00:38:33,460 --> 00:38:37,200
Webcams tend to have
firmware related to them.

754
00:38:37,200 --> 00:38:40,550
Fingerprint readers, accelerometers,

755
00:38:40,550 --> 00:38:44,354
integrated sensor hubs,
powered delivery systems,

756
00:38:44,354 --> 00:38:48,400
power management, ICs,
everything you can think of

757
00:38:48,400 --> 00:38:50,270
that's inside your computer.

758
00:38:50,270 --> 00:38:55,270
Not necessarily has a separate
component to hold firmware,

759
00:38:56,010 --> 00:38:59,166
but it most likely has
some internal firmware,

760
00:38:59,166 --> 00:39:03,523
either on the integrated
controller, or off it.

761
00:39:04,860 --> 00:39:06,720
You'd like to add something, Jesse?

762
00:39:06,720 --> 00:39:08,460
- [Jesse] In addition
to these controllers,

763
00:39:08,460 --> 00:39:11,540
there's also all of the
endpoint devices themselves.

764
00:39:11,540 --> 00:39:14,993
So there can be a wireless.

765
00:39:16,120 --> 00:39:20,300
So there can be a wireless
network card or a cellular modem.

766
00:39:20,300 --> 00:39:25,300
These are often a PCI or
USB devices themselves,

767
00:39:25,490 --> 00:39:27,410
that also have up-dateable firmware.

768
00:39:27,410 --> 00:39:28,930
So in addition to the controllers,

769
00:39:28,930 --> 00:39:33,649
there's generally USB
devices or PCI devices

770
00:39:33,649 --> 00:39:36,083
in the system itself.

771
00:39:36,990 --> 00:39:38,520
Then all of the other fun stuff

772
00:39:38,520 --> 00:39:40,020
that Mickey just talked about.

773
00:39:43,410 --> 00:39:45,710
- [Mickey] Well, speaking
of wireless devices

774
00:39:45,710 --> 00:39:48,010
and external assets,

775
00:39:48,010 --> 00:39:50,300
there is also all of the stuff

776
00:39:50,300 --> 00:39:54,930
that you have that you can
possibly plug into your computer.

777
00:39:54,930 --> 00:39:56,950
Think of all the ports
you have on your machine.

778
00:39:56,950 --> 00:39:59,276
If it's your laptop, or
if it's your desktop,

779
00:39:59,276 --> 00:40:01,770
or whatever device you're looking at.

780
00:40:01,770 --> 00:40:05,220
Whatever ports you can use under both

781
00:40:05,220 --> 00:40:10,220
USB-C, 3.1, whatever USB format it is,

782
00:40:11,020 --> 00:40:13,390
proprietary connectors
for docking stations.

783
00:40:13,390 --> 00:40:15,560
Docking stations have
a lot of parts in them

784
00:40:15,560 --> 00:40:17,500
that have their own firmware.

785
00:40:17,500 --> 00:40:19,530
So now ask yourself,

786
00:40:19,530 --> 00:40:21,620
how often do you check
the firmware on the dock

787
00:40:21,620 --> 00:40:24,180
that you plug your laptop to at work?

788
00:40:24,180 --> 00:40:26,980
Then obviously the over the air updates.

789
00:40:26,980 --> 00:40:28,650
- [Jesse] In addition to
the Bluetooth controller

790
00:40:28,650 --> 00:40:30,320
in the motherboard itself,

791
00:40:30,320 --> 00:40:32,610
you might have Bluetooth devices

792
00:40:32,610 --> 00:40:34,590
that are commonly paired with your system,

793
00:40:34,590 --> 00:40:39,460
like keyboards and mice
and wireless headsets.

794
00:40:39,460 --> 00:40:42,719
Sometimes those have a firmware, as well.

795
00:40:42,719 --> 00:40:46,840
That's probably less likely
to be an attack scenario,

796
00:40:46,840 --> 00:40:50,200
because they're less
universal than some of these

797
00:40:50,200 --> 00:40:51,560
other things that we're talking about,

798
00:40:51,560 --> 00:40:55,283
but it is something to be
aware of and keep in mind.

799
00:40:56,320 --> 00:40:59,280
- [Mickey] Another example
that we think is something that

800
00:40:59,280 --> 00:41:03,342
we should all pay attention
to, is the gigabit ethernet.

801
00:41:03,342 --> 00:41:08,342
If you have a land port on
your laptop, congratulations,

802
00:41:08,400 --> 00:41:11,070
you have a code cave.

803
00:41:11,070 --> 00:41:16,070
In most, I think almost every instance

804
00:41:17,020 --> 00:41:20,920
that I've encountered of a gigabit region

805
00:41:20,920 --> 00:41:25,700
in SPI Flash on a system,
it was read-write capable.

806
00:41:25,700 --> 00:41:29,350
I have yet to encounter
one instance where it's,

807
00:41:29,350 --> 00:41:31,530
if it exists, it is read-only.

808
00:41:31,530 --> 00:41:33,760
This region in SPI Flash,

809
00:41:33,760 --> 00:41:37,113
usually contains the
configuration data for the device,

810
00:41:38,220 --> 00:41:43,220
stuff like Mac address, or
any other setup configuration

811
00:41:43,290 --> 00:41:46,050
that was initially set up by the vendor,

812
00:41:46,050 --> 00:41:50,060
manufacturing the computer or selling it.

813
00:41:50,060 --> 00:41:51,670
Usually, there are two images.

814
00:41:51,670 --> 00:41:53,250
One is the one being used.

815
00:41:53,250 --> 00:41:54,883
The other one is a backup.

816
00:41:55,988 --> 00:41:59,150
There are so many yet
unused bytes in that region

817
00:41:59,150 --> 00:42:00,500
that we'll show you in a second.

818
00:42:00,500 --> 00:42:03,303
But it's really open for abuse.

819
00:42:04,880 --> 00:42:08,260
Some systems are mandated to have

820
00:42:08,260 --> 00:42:10,620
such things like servers, for example.

821
00:42:10,620 --> 00:42:15,620
There's no server without a
network adapter connected to it.

822
00:42:16,590 --> 00:42:17,740
If it's an Intel platform,

823
00:42:17,740 --> 00:42:21,269
you will find GBe region in SPI

824
00:42:21,269 --> 00:42:24,350
that you can read and write from.

825
00:42:24,350 --> 00:42:26,290
If you have a desktop computer

826
00:42:26,290 --> 00:42:29,150
and you bought a gigabit ethernet card

827
00:42:29,150 --> 00:42:34,150
and you plug in, sometimes
these devices will expose

828
00:42:34,375 --> 00:42:38,230
their internal nonvolatile
memory to the user,

829
00:42:38,230 --> 00:42:39,730
over memory access.

830
00:42:39,730 --> 00:42:43,170
So you would query the PCI device,

831
00:42:43,170 --> 00:42:45,140
get the PCI config space,

832
00:42:45,140 --> 00:42:47,249
find the base address register

833
00:42:47,249 --> 00:42:49,870
where the flash has mapped to.

834
00:42:49,870 --> 00:42:51,250
Then you can read and write directly to

835
00:42:51,250 --> 00:42:52,783
the flash over memory.

836
00:42:53,630 --> 00:42:55,490
There's also other discrete PCI devices,

837
00:42:55,490 --> 00:42:57,700
but we'll not talk about them right now.

838
00:42:57,700 --> 00:43:02,053
Let's look at an example of
the GBe region in Hex Editor.

839
00:43:05,100 --> 00:43:07,280
First region would have the main data.

840
00:43:07,280 --> 00:43:08,560
Then we scroll past all the

841
00:43:08,560 --> 00:43:10,880
unused bytes and empty bytes.

842
00:43:10,880 --> 00:43:13,410
Then we get to the backup region.

843
00:43:13,410 --> 00:43:15,450
It has the backup data.

844
00:43:15,450 --> 00:43:16,330
Then we keep looking at it

845
00:43:16,330 --> 00:43:19,960
as a whole bunch of other empty bytes.

846
00:43:19,960 --> 00:43:22,830
If we take a closer look at this example,

847
00:43:22,830 --> 00:43:27,140
which we have eight kilobytes of data,

848
00:43:27,140 --> 00:43:31,200
72.5% of it is not used,

849
00:43:31,200 --> 00:43:34,216
which is quite a lot of space.

850
00:43:34,216 --> 00:43:38,861
If I were an attacker
and I had a known point

851
00:43:38,861 --> 00:43:43,861
to hide payload or data
on every common platform

852
00:43:44,040 --> 00:43:45,650
on the market, this would be

853
00:43:45,650 --> 00:43:49,233
a very good piece of information to have.

854
00:43:50,150 --> 00:43:51,730
But how do we access it?

855
00:43:51,730 --> 00:43:52,860
I mean, it's great.

856
00:43:52,860 --> 00:43:54,710
It's great, it's in SPI Flash,

857
00:43:54,710 --> 00:43:57,250
but how do we read and write from it?

858
00:43:57,250 --> 00:43:59,630
The easiest way to do
this on Intel platforms,

859
00:43:59,630 --> 00:44:01,453
is using the flash programming tool.

860
00:44:03,710 --> 00:44:07,370
It's an internal tool that
it's not supposed to be public,

861
00:44:07,370 --> 00:44:09,120
but you can find it on the internet.

862
00:44:09,120 --> 00:44:10,290
I'm not gonna say where,

863
00:44:10,290 --> 00:44:13,790
but you can use it to update your BIOS

864
00:44:13,790 --> 00:44:15,720
and update your ME.

865
00:44:15,720 --> 00:44:18,670
Some vendors might have it

866
00:44:18,670 --> 00:44:21,370
in their update packages, some don't.

867
00:44:21,370 --> 00:44:22,793
There are other utilities.

868
00:44:23,650 --> 00:44:28,180
If you have a card made by a
different brand manufacturer

869
00:44:28,180 --> 00:44:30,421
and you look for, from
now that's, for example,

870
00:44:30,421 --> 00:44:33,100
if you have like a Broadcom card

871
00:44:33,100 --> 00:44:36,963
or an Intel card or any device whatsoever,

872
00:44:37,860 --> 00:44:42,760
any card that you find
the firmware updates for,

873
00:44:42,760 --> 00:44:47,110
always, always look for the same updates,

874
00:44:47,110 --> 00:44:49,703
or the same hardware on a different OEM.

875
00:44:50,710 --> 00:44:55,710
If Lenovo has an update
for a Broadcom-based card,

876
00:44:56,110 --> 00:45:00,090
and Dell has an update for
the same Broadcom-based card,

877
00:45:00,090 --> 00:45:03,140
you would see two different
software implementations.

878
00:45:03,140 --> 00:45:06,900
One of them might
include pre-existing tool

879
00:45:06,900 --> 00:45:10,053
that you can abuse or use your advantage.

880
00:45:11,510 --> 00:45:14,380
Now, the best part of this in my eyes,

881
00:45:14,380 --> 00:45:15,630
it's the Confused Deputy.

882
00:45:15,630 --> 00:45:19,140
Now last year, we gave a talk about how

883
00:45:19,140 --> 00:45:22,483
drivers in Windows are screwed, basically.

884
00:45:23,830 --> 00:45:26,880
You can abuse a lot of these
firmware updating drivers

885
00:45:26,880 --> 00:45:29,973
to gain access to lower
levels of the platform.

886
00:45:31,120 --> 00:45:34,970
A lot of big number of those would have

887
00:45:34,970 --> 00:45:39,340
access to IO ports and
given access to IO ports.

888
00:45:39,340 --> 00:45:43,598
Arbitrary IO, might not seem
like a big deal at first,

889
00:45:43,598 --> 00:45:45,280
but once you think that

890
00:45:45,280 --> 00:45:48,000
once you remember that arbitrary IO

891
00:45:48,000 --> 00:45:52,040
can give you legacy PCI access
and with legacy PCI access,

892
00:45:52,040 --> 00:45:54,590
you can do a lot of things
like hardware sequencing

893
00:45:54,590 --> 00:45:57,320
into the SPI controller on Intel platforms

894
00:45:57,320 --> 00:45:59,030
and that some of these drivers.

895
00:45:59,030 --> 00:46:02,490
If they are loaded on the system,

896
00:46:02,490 --> 00:46:04,420
some of these don't require you

897
00:46:04,420 --> 00:46:06,470
to be an admin to send them (indistinct).

898
00:46:07,990 --> 00:46:11,740
This becomes more and more
realistic, as an attacker.

899
00:46:11,740 --> 00:46:13,580
From an attacker's perspective,

900
00:46:13,580 --> 00:46:16,776
Let's see a demo of how
we can read and write

901
00:46:16,776 --> 00:46:19,260
to the GBe region on an actual computer,

902
00:46:19,260 --> 00:46:23,470
or with a custom payload,

903
00:46:23,470 --> 00:46:25,983
or just a demo payload that we have.

904
00:46:28,450 --> 00:46:32,300
Here we see PowerShell prompt,

905
00:46:32,300 --> 00:46:36,693
where we dump the GBe region.

906
00:46:39,580 --> 00:46:40,870
Then we clear a screen.

907
00:46:40,870 --> 00:46:44,343
We show that the end of
it has nothing but F's.

908
00:46:47,740 --> 00:46:50,470
Now we're gonna flash a malicious version,

909
00:46:50,470 --> 00:46:53,133
well so-called malicious,
just for demo purposes.

910
00:46:59,020 --> 00:47:00,443
At the end of it,

911
00:47:00,443 --> 00:47:02,370
we put the EICAR test string

912
00:47:02,370 --> 00:47:06,120
and just explanation of this might be

913
00:47:06,120 --> 00:47:07,993
malicious code or shell code.

914
00:47:09,720 --> 00:47:10,763
Now we flash it.

915
00:47:17,870 --> 00:47:19,788
Now it's flashed.

916
00:47:19,788 --> 00:47:21,438
That data is on the computer now.

917
00:47:27,190 --> 00:47:29,053
We dumped the new content.

918
00:47:33,740 --> 00:47:35,940
We're checking what's in the new content,

919
00:47:35,940 --> 00:47:38,680
to be sure we're not checking
the same one we wrote.

920
00:47:38,680 --> 00:47:40,763
We find our malicious payload there.

921
00:47:43,060 --> 00:47:44,090
Just to recap,

922
00:47:44,090 --> 00:47:49,090
we dumped the GBe region from
SPI, using existing tools,

923
00:47:49,942 --> 00:47:53,233
modified it, added our
own malicious payload,

924
00:47:54,080 --> 00:47:58,120
lashed it back onto SPI
and read it back again

925
00:47:58,120 --> 00:48:00,970
to make sure that we
have the changes persist.

926
00:48:00,970 --> 00:48:03,410
A few tips and tricks of how you can

927
00:48:03,410 --> 00:48:05,700
hide your payload and firmware.

928
00:48:05,700 --> 00:48:08,370
If you have empty regions,
like we showed you,

929
00:48:08,370 --> 00:48:10,600
you can just add your pillow there.

930
00:48:10,600 --> 00:48:11,930
You won't touch the firmware.

931
00:48:11,930 --> 00:48:16,760
Usually, what happens with
firmware is signed or validated.

932
00:48:16,760 --> 00:48:19,150
It will only verify the block of code.

933
00:48:19,150 --> 00:48:21,775
It won't verify the whole image.

934
00:48:21,775 --> 00:48:26,220
So, if you have, let's
say you have 128 kilobytes

935
00:48:26,220 --> 00:48:28,870
of SPI Flash for your controller

936
00:48:28,870 --> 00:48:32,470
and the firmware image is 60 kilobytes.

937
00:48:32,470 --> 00:48:34,790
The image would have a header
defining where it starts,

938
00:48:34,790 --> 00:48:37,860
where it ends, what parts of
it includes, what segments.

939
00:48:37,860 --> 00:48:40,030
It would also include all
the verification fields

940
00:48:40,030 --> 00:48:43,360
like signature or cryptographic,

941
00:48:43,360 --> 00:48:46,870
cryptographic, signature, or
CRCs, or whatever is included.

942
00:48:46,870 --> 00:48:49,340
But past that, there is empty space

943
00:48:49,340 --> 00:48:51,630
that is not included or not defined,

944
00:48:51,630 --> 00:48:52,630
but when you read and write

945
00:48:52,630 --> 00:48:54,180
the firmware from the controller,

946
00:48:54,180 --> 00:48:56,303
it would read and write the whole chip.

947
00:48:57,500 --> 00:49:01,250
Another way is if you
have unverified firmware,

948
00:49:01,250 --> 00:49:03,700
you can put your payload inside segments

949
00:49:03,700 --> 00:49:07,810
of the firmware that are empty.

950
00:49:07,810 --> 00:49:10,280
So if someone built the firmware

951
00:49:10,280 --> 00:49:11,700
with a lot of padding in it,

952
00:49:11,700 --> 00:49:13,030
or there's different segments

953
00:49:13,030 --> 00:49:15,810
that they kept a lot of padding in there,

954
00:49:15,810 --> 00:49:18,590
you can abuse that if it's big enough.

955
00:49:18,590 --> 00:49:23,590
If it's not big enough and you
need a lot of small segments,

956
00:49:23,830 --> 00:49:26,290
you can easily break it down.

957
00:49:26,290 --> 00:49:28,070
The multiple parts with magic bytes,

958
00:49:28,070 --> 00:49:31,500
like we've seen in them before
you can load your shell code

959
00:49:31,500 --> 00:49:34,980
with a magic bite and
magic sequence of bytes

960
00:49:34,980 --> 00:49:37,950
and then a length to read from.

961
00:49:37,950 --> 00:49:41,440
Then you can all concatenated
later into your own

962
00:49:41,440 --> 00:49:43,220
shell code and execute.

963
00:49:43,220 --> 00:49:46,710
For this talk, we're gonna
release some code on GitHub

964
00:49:46,710 --> 00:49:50,227
and it will give you the capability of

965
00:49:50,227 --> 00:49:53,130
doing a lot of things low-level again.

966
00:49:53,130 --> 00:49:55,230
But with specifically

967
00:49:55,230 --> 00:49:57,130
reading and writing firmware,

968
00:49:57,130 --> 00:49:58,570
the practicality is,

969
00:49:58,570 --> 00:50:00,497
that's a lot of people
are probably saying,

970
00:50:00,497 --> 00:50:01,750
"Well, what's the point?

971
00:50:01,750 --> 00:50:03,090
You gotta be admin.

972
00:50:03,090 --> 00:50:04,060
This is all bullshit."

973
00:50:04,060 --> 00:50:08,210
But not necessarily, like we
said before, some drivers,

974
00:50:08,210 --> 00:50:09,790
if they exist on the system,

975
00:50:09,790 --> 00:50:12,143
they can be accessed from user space.

976
00:50:12,143 --> 00:50:14,470
So all you have to do is just see if

977
00:50:14,470 --> 00:50:17,050
the device exists and
send it (indistinct).

978
00:50:17,050 --> 00:50:18,660
Another point to mention is,

979
00:50:18,660 --> 00:50:21,920
this scenario is relevant.

980
00:50:21,920 --> 00:50:25,530
If you already have
execution on the target,

981
00:50:25,530 --> 00:50:27,020
There's no point of gaining persistence

982
00:50:27,020 --> 00:50:29,040
or hiding your payload.

983
00:50:29,040 --> 00:50:31,750
If you're just getting into the system.

984
00:50:31,750 --> 00:50:34,600
A big focus on the Confused Deputy angle

985
00:50:34,600 --> 00:50:38,100
is where we have a lot of sign drivers

986
00:50:38,100 --> 00:50:40,350
and sign tools and existing tools that

987
00:50:40,350 --> 00:50:43,550
allow you to do a bunch of actions,

988
00:50:43,550 --> 00:50:45,610
that you normally wouldn't be able to.

989
00:50:45,610 --> 00:50:47,440
There is a lot to explore there.

990
00:50:47,440 --> 00:50:49,820
There are a lot of, for example,

991
00:50:49,820 --> 00:50:53,500
Dell has .net tools that are used to

992
00:50:53,500 --> 00:50:57,150
communicate with the monitor
and update firmware on it.

993
00:50:57,150 --> 00:51:00,810
It's not necessarily
admin privileged access,

994
00:51:00,810 --> 00:51:05,810
but you can literally
go and see how your code

995
00:51:06,100 --> 00:51:08,925
can interact with some other vendor code

996
00:51:08,925 --> 00:51:13,730
to communicate over USB to a device

997
00:51:13,730 --> 00:51:18,080
and read the EEPROM content
on it, or write to it.

998
00:51:18,080 --> 00:51:20,500
We are going to release
some code on GitHub

999
00:51:20,500 --> 00:51:25,370
to use some existing code that we found

1000
00:51:25,370 --> 00:51:28,160
that might help everyone to play with

1001
00:51:28,160 --> 00:51:31,190
this even further specifically in C#,

1002
00:51:31,190 --> 00:51:33,430
because C#'s the new Java.

1003
00:51:33,430 --> 00:51:38,430
I guess it's easier to
understand, it's managed code.

1004
00:51:38,950 --> 00:51:40,110
Why the hell not.

1005
00:51:40,110 --> 00:51:40,943
In our example,

1006
00:51:40,943 --> 00:51:45,030
we're releasing code
that uses the PMX driver,

1007
00:51:45,030 --> 00:51:48,820
which is included in a
lot of Intel utilities.

1008
00:51:48,820 --> 00:51:52,020
It is dating back to 1998.

1009
00:51:52,020 --> 00:51:54,260
It can read and write physical memory.

1010
00:51:54,260 --> 00:51:58,400
It can read and write debug
registers, control registers,

1011
00:51:58,400 --> 00:52:03,250
model specific registers,
iOS, and so much more.

1012
00:52:03,250 --> 00:52:04,830
You can load it as your admin.

1013
00:52:04,830 --> 00:52:07,020
You can load it in
Windows and play with it,

1014
00:52:07,020 --> 00:52:08,470
or imagine rewrite everything,

1015
00:52:08,470 --> 00:52:10,520
but not read-write everything.

1016
00:52:10,520 --> 00:52:12,130
If you don't know what I mean by that,

1017
00:52:12,130 --> 00:52:13,840
there's a driver called
ReadWrite Everything

1018
00:52:13,840 --> 00:52:14,955
that was blocked by Windows,

1019
00:52:14,955 --> 00:52:17,990
but it's confusing, I know.

1020
00:52:17,990 --> 00:52:19,770
But its name was Read Write Everything.

1021
00:52:19,770 --> 00:52:24,770
We also released code,
that's using AS Media tools.

1022
00:52:25,467 --> 00:52:27,520
There's a tool made by,

1023
00:52:27,520 --> 00:52:29,090
and I hope I'm not butchering your name.

1024
00:52:29,090 --> 00:52:29,997
Stefano Moioli.

1025
00:52:31,611 --> 00:52:33,204
It's a tool released on GitHub

1026
00:52:33,204 --> 00:52:37,237
that reads the firmware
off as media chip sets,

1027
00:52:37,237 --> 00:52:41,800
very common chip sets that
are found in a lot of places.

1028
00:52:41,800 --> 00:52:46,609
That code can be used to
adapt a cost to the driver

1029
00:52:46,609 --> 00:52:50,580
that you can load or can be adapted

1030
00:52:50,580 --> 00:52:52,589
to write the firmware to the device.

1031
00:52:52,589 --> 00:52:54,960
In the demo we've shown earlier,

1032
00:52:54,960 --> 00:52:58,680
we've used Stefano's
code to read the payload

1033
00:52:58,680 --> 00:53:02,840
from the firmware and execute
it in our own custom program.

1034
00:53:02,840 --> 00:53:06,170
We also use update tools from AS Media

1035
00:53:06,170 --> 00:53:09,450
to write the malicious
firmware into the device.

1036
00:53:09,450 --> 00:53:11,940
Funny story about AS Media controllers.

1037
00:53:11,940 --> 00:53:13,530
I bought for the talk,

1038
00:53:13,530 --> 00:53:15,980
I bought a couple of devices off Amazon.

1039
00:53:15,980 --> 00:53:17,450
Both of them are AS Media controllers

1040
00:53:17,450 --> 00:53:19,950
and I have an Intel Nuc.

1041
00:53:19,950 --> 00:53:22,180
It's called a Haiti's Kenyon.

1042
00:53:22,180 --> 00:53:23,303
It's a Nuc 8.

1043
00:53:24,250 --> 00:53:29,250
Anyway, I decided to plug in
the fender bolt controller

1044
00:53:30,020 --> 00:53:33,673
to PCI adapter that I have
plugged into PCI cards

1045
00:53:33,673 --> 00:53:37,943
and connected them to the
Nuc and work on the demo.

1046
00:53:37,943 --> 00:53:40,960
I'm like working, having fun,

1047
00:53:40,960 --> 00:53:43,936
writing malicious firmware
images, reading them back,

1048
00:53:43,936 --> 00:53:48,477
writing, flashing it, flashing
new ones, flashing backups.

1049
00:53:48,477 --> 00:53:51,593
Then I realized I have two controllers.

1050
00:53:52,930 --> 00:53:56,130
Yours truly has not noticed that

1051
00:53:56,130 --> 00:53:59,890
I have a built in onboard AS
Media controller in the Nuc

1052
00:53:59,890 --> 00:54:02,283
and I've been flashing
that the whole time.

1053
00:54:04,070 --> 00:54:07,640
Talk about a scary moment right there.

1054
00:54:07,640 --> 00:54:09,163
So yeah, it's a funny story.

1055
00:54:10,880 --> 00:54:13,090
I don't wanna be all doom and gloom,

1056
00:54:13,090 --> 00:54:15,060
but I have to be all doom and gloom here,

1057
00:54:15,060 --> 00:54:20,060
because nobody is looking in the firmware.

1058
00:54:20,300 --> 00:54:25,300
There is so much space
in non-volatile memory.

1059
00:54:25,540 --> 00:54:29,960
I mean, if you look at it in
bytes, it's not a lot of bytes,

1060
00:54:29,960 --> 00:54:33,073
but it's a lot of bytes
that are not supervised.

1061
00:54:38,565 --> 00:54:40,280
Is EDR catching up?

1062
00:54:40,280 --> 00:54:42,744
Well, yes and no.

1063
00:54:42,744 --> 00:54:46,882
Microsoft Defender has released
a couple of months ago,

1064
00:54:46,882 --> 00:54:49,140
a press release and notification

1065
00:54:49,140 --> 00:54:53,410
that they are now looking
into the UEFI file system,

1066
00:54:53,410 --> 00:54:55,463
which is awesome.

1067
00:54:56,480 --> 00:55:00,360
But why just UEFI,

1068
00:55:00,360 --> 00:55:02,210
there's so many other
places on the platform

1069
00:55:02,210 --> 00:55:03,662
that you could look into.

1070
00:55:03,662 --> 00:55:05,530
I mean, great.

1071
00:55:05,530 --> 00:55:07,650
We have EDRs coming, hide your shit talk

1072
00:55:07,650 --> 00:55:10,560
last year, where Topher and Mike

1073
00:55:10,560 --> 00:55:12,610
showed that they can
hide malicious payloads

1074
00:55:12,610 --> 00:55:16,550
in UEFI variables and then
less than a year later,

1075
00:55:16,550 --> 00:55:19,228
all of a sudden, EDR is
looking in UEFI variables,

1076
00:55:19,228 --> 00:55:23,530
but that's just the tip
of the iceberg, right?

1077
00:55:23,530 --> 00:55:25,770
We have solutions coming out.

1078
00:55:25,770 --> 00:55:28,366
Like we know Dell has a BIOS scanner

1079
00:55:28,366 --> 00:55:31,630
CrowdStrike scans firmware.

1080
00:55:31,630 --> 00:55:34,270
HP has their own hardware.

1081
00:55:34,270 --> 00:55:39,060
The short start solution that
is literally a hardware root

1082
00:55:39,060 --> 00:55:41,780
of trust on the platform
that scans by us verifies

1083
00:55:41,780 --> 00:55:45,030
the BIOS image, verifies
a lot of parts in it,

1084
00:55:45,030 --> 00:55:47,930
including all the Intel parts
as well, like a Boot Guard,

1085
00:55:47,930 --> 00:55:51,200
BIOS guard, all kinds of solutions.

1086
00:55:51,200 --> 00:55:54,810
We have open source firmware solutions

1087
00:55:54,810 --> 00:55:57,890
that allow you to update
to legitimate images,

1088
00:55:57,890 --> 00:55:59,190
to make sure that you're up to date

1089
00:55:59,190 --> 00:56:02,330
and in check by Richard Hughes.

1090
00:56:02,330 --> 00:56:04,670
But beyond the BIOS,

1091
00:56:04,670 --> 00:56:07,283
beyond the firmware on the SPI,

1092
00:56:09,440 --> 00:56:11,400
big parts of the firmware on the SPI,

1093
00:56:11,400 --> 00:56:12,730
no one's doing anything.

1094
00:56:12,730 --> 00:56:15,510
There is a external devices firmware

1095
00:56:15,510 --> 00:56:17,180
and internal devices firmware

1096
00:56:17,180 --> 00:56:19,350
and a lot of stuff that you can see in

1097
00:56:19,350 --> 00:56:20,460
the volatility reports

1098
00:56:20,460 --> 00:56:25,460
that do not fall into the SPI BIOS regions

1099
00:56:25,790 --> 00:56:27,023
that are not verified.

1100
00:56:29,160 --> 00:56:30,090
- [Jesse] Also like this,

1101
00:56:30,090 --> 00:56:33,750
like Microsoft's, it is Defender ATP.

1102
00:56:33,750 --> 00:56:35,350
So it's not rolled out everywhere.

1103
00:56:35,350 --> 00:56:38,160
It's only that the premium version,

1104
00:56:38,160 --> 00:56:41,580
so that you need to pay more for.

1105
00:56:41,580 --> 00:56:43,810
- [Mickey] What can we do about it?

1106
00:56:43,810 --> 00:56:48,810
We can use OEM tools or vendor tools

1107
00:56:49,020 --> 00:56:51,380
to read the storage,

1108
00:56:51,380 --> 00:56:55,700
to access whatever non-volatile components

1109
00:56:55,700 --> 00:56:57,173
we have on the platform.

1110
00:56:58,040 --> 00:57:00,503
If they exist, some
tools exist, some don't.

1111
00:57:01,860 --> 00:57:06,080
We can hack some sort of
interface to vendor tools,

1112
00:57:06,080 --> 00:57:09,990
or we can adapt existing
tools like open source code

1113
00:57:12,319 --> 00:57:16,700
from Stefano and the SASM tool on GitHub

1114
00:57:16,700 --> 00:57:18,910
or ChIP-seq that allows us to access the

1115
00:57:18,910 --> 00:57:20,810
CMOS, GBe, SPI, SPD.

1116
00:57:22,120 --> 00:57:25,710
A lot of things that we can do there.

1117
00:57:25,710 --> 00:57:27,668
Maybe we can add open source tools

1118
00:57:27,668 --> 00:57:30,690
that check for everyone's safety

1119
00:57:30,690 --> 00:57:33,020
and help notify vendors

1120
00:57:33,020 --> 00:57:35,870
that not only do you have to
verify the firmware image,

1121
00:57:35,870 --> 00:57:39,147
but you also need to check all
the unused space on firmware

1122
00:57:39,147 --> 00:57:41,525
on your non-volatile device,

1123
00:57:41,525 --> 00:57:44,063
just to see that you're
not being abused here.

1124
00:57:45,750 --> 00:57:48,870
With that, we've reached
the end of our presentation.

1125
00:57:48,870 --> 00:57:50,410
Thank you for bearing with us

1126
00:57:50,410 --> 00:57:53,430
and watching the slides while we talk.

1127
00:57:53,430 --> 00:57:56,380
If you have any further questions
that you'd like to ask us,

1128
00:57:56,380 --> 00:58:01,350
feel free to reach out on
Twitter, Discord, Slack, whatever.

1129
00:58:01,350 --> 00:58:03,870
We'll be available to answer
questions for this talk

1130
00:58:03,870 --> 00:58:06,480
on the DEF CON Discord server,

1131
00:58:06,480 --> 00:58:09,470
but feel free to ping us
later on social media,

1132
00:58:09,470 --> 00:58:11,263
if you have any questions.

