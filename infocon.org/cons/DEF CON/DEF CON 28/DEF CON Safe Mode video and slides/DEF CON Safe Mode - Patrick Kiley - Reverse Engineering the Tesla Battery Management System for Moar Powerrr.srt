1
00:00:01,270 --> 00:00:02,120
- Hi there,

2
00:00:02,120 --> 00:00:05,110
Welcome to my talk, where
I go through and break

3
00:00:05,110 --> 00:00:06,450
a very expensive automobile,

4
00:00:06,450 --> 00:00:08,510
then I eventually make it faster.

5
00:00:08,510 --> 00:00:09,380
Hope you enjoy it,

6
00:00:09,380 --> 00:00:11,480
it was certainly the most complicated

7
00:00:11,480 --> 00:00:14,043
reverse engineering project
that I have a worked on.

8
00:00:20,180 --> 00:00:21,420
So a little bit about me.

9
00:00:21,420 --> 00:00:23,000
My name is Patrick Kiley,

10
00:00:23,000 --> 00:00:26,563
I'm a member of the Penetration
Testing team at Rapid7.

11
00:00:27,440 --> 00:00:31,000
I've been working in the
industry for about 17 years,

12
00:00:31,000 --> 00:00:33,660
I've done previous
research that I've released

13
00:00:33,660 --> 00:00:35,600
on Avionics security.

14
00:00:35,600 --> 00:00:37,810
I've done quite a bit of research,

15
00:00:37,810 --> 00:00:41,670
specifically on internet connected
transportation platforms.

16
00:00:41,670 --> 00:00:45,660
I have experience in hardware
hacking, Internet of Things,

17
00:00:45,660 --> 00:00:48,163
Autonomous Vehicles and CAN bus.

18
00:00:51,480 --> 00:00:54,020
So here's a overview of all the topics

19
00:00:54,020 --> 00:00:55,170
that we're gonna cover.

20
00:00:56,310 --> 00:00:58,720
First we're gonna go over the
architecture of the Model S

21
00:00:58,720 --> 00:01:01,860
and specifically the
battery management system.

22
00:01:01,860 --> 00:01:03,380
You'll find all that needs to be relevant

23
00:01:03,380 --> 00:01:05,330
when I explain some of the other stuff.

24
00:01:06,190 --> 00:01:09,330
The timeline of when
the performance Model S

25
00:01:09,330 --> 00:01:11,650
and Ludicrous were released,

26
00:01:11,650 --> 00:01:14,380
the hardware changes that have to occur

27
00:01:14,380 --> 00:01:19,310
in order to make a car
move at Ludicrous speeds,

28
00:01:19,310 --> 00:01:22,330
the data stored within
the diagnostic program

29
00:01:22,330 --> 00:01:25,010
that Tesla uses within its service center

30
00:01:25,010 --> 00:01:26,443
is called toolbox.

31
00:01:27,780 --> 00:01:29,340
Some of the firmware changes,

32
00:01:29,340 --> 00:01:31,340
in fact, all of the firmware
changes that have to occur

33
00:01:31,340 --> 00:01:34,520
to the battery management
system to make it work.

34
00:01:34,520 --> 00:01:38,560
The process of modifying
the high current shunt.

35
00:01:38,560 --> 00:01:40,590
For those of you who haven't
heard the term before,

36
00:01:40,590 --> 00:01:45,330
shunt is a method within
electrical and electronics

37
00:01:45,330 --> 00:01:47,790
of measuring current using
a known resistance value.

38
00:01:47,790 --> 00:01:51,550
And this is a device within
the high voltage battery

39
00:01:51,550 --> 00:01:54,850
that has to be modified
in order to allow it

40
00:01:54,850 --> 00:01:57,470
to handle the power of Ludicrous.

41
00:01:57,470 --> 00:01:59,260
It turns out it was a very important part

42
00:01:59,260 --> 00:02:01,283
of this whole process.

43
00:02:02,410 --> 00:02:04,630
And then we'll actually go
over the upgrade process,

44
00:02:04,630 --> 00:02:06,410
how I failed in break the car,

45
00:02:06,410 --> 00:02:09,420
what I learned and had to have
it towed across state lines,

46
00:02:09,420 --> 00:02:11,450
and some pretty cool things

47
00:02:11,450 --> 00:02:15,260
on how I was able to dig
a little bit deeper on how

48
00:02:15,260 --> 00:02:18,334
the gateway works and some
special files that it stores

49
00:02:18,334 --> 00:02:22,180
that determined the
configuration of the car.

50
00:02:22,180 --> 00:02:23,320
And then next step, sorry,

51
00:02:23,320 --> 00:02:26,270
can we actually take Ludicrous
speed further, should we?

52
00:02:26,270 --> 00:02:28,420
And what we need to do
to make that happen.

53
00:02:34,800 --> 00:02:37,310
So a little bit about the architecture

54
00:02:37,310 --> 00:02:38,823
of the Model S overall.

55
00:02:39,780 --> 00:02:41,270
It has the central display,

56
00:02:41,270 --> 00:02:42,730
so if you sit in a Model S,

57
00:02:42,730 --> 00:02:44,450
there's a large screen to your right,

58
00:02:44,450 --> 00:02:46,120
or to your left of your passenger,

59
00:02:46,120 --> 00:02:49,530
or to your left if you're in
a right hand drive vehicle.

60
00:02:49,530 --> 00:02:51,800
And then there's also
an instrument cluster.

61
00:02:51,800 --> 00:02:54,650
Both of those actually
run the Nvidia Tegra

62
00:02:54,650 --> 00:02:58,040
up until recently where the
central display switched over

63
00:02:58,040 --> 00:02:59,840
to Intel Atom.

64
00:02:59,840 --> 00:03:03,670
All this is gonna be assuming
it's an Nvidia Tegra based,

65
00:03:03,670 --> 00:03:06,470
because that Tegra has to be rooted

66
00:03:06,470 --> 00:03:08,793
for this research to work.

67
00:03:09,700 --> 00:03:11,930
The next component that's
really critical to this

68
00:03:11,930 --> 00:03:13,453
is the gateway.

69
00:03:14,290 --> 00:03:18,050
The gateway sits between
the central display

70
00:03:18,050 --> 00:03:20,300
instrument cluster and
the rest of the vehicle.

71
00:03:20,300 --> 00:03:23,810
It acts as a firewall between
the various CAN buses,

72
00:03:23,810 --> 00:03:27,270
and between the CAN buses
and infotainment features

73
00:03:27,270 --> 00:03:29,120
as well as the internet connectivity

74
00:03:29,120 --> 00:03:30,803
and wifi connectivity, et cetera.

75
00:03:32,230 --> 00:03:34,730
The next component
that's critical to this,

76
00:03:34,730 --> 00:03:36,230
'cause that's where all the modifications

77
00:03:36,230 --> 00:03:37,890
within the powertrain CAN bus,

78
00:03:37,890 --> 00:03:39,590
this is a standard CAN bus running

79
00:03:39,590 --> 00:03:41,660
at 500 kilobits a second,

80
00:03:41,660 --> 00:03:43,470
it contains the battery management system,

81
00:03:43,470 --> 00:03:44,970
the drive units,

82
00:03:44,970 --> 00:03:49,970
all the charging and thermal
controller set on that CAN bus.

83
00:03:50,140 --> 00:03:51,860
Beyond that, it's a
standard vehicle CAN bus.

84
00:03:51,860 --> 00:03:55,030
It runs at, again 500 kilobits a second,

85
00:03:55,030 --> 00:03:58,170
uses 11 arbitration IDs,

86
00:03:58,170 --> 00:04:01,070
and very importantly, it supports UDS.

87
00:04:01,070 --> 00:04:03,960
Many of the routines that
you actually have to modify

88
00:04:03,960 --> 00:04:04,930
to do this,

89
00:04:04,930 --> 00:04:06,770
require UDS to work,

90
00:04:06,770 --> 00:04:10,010
and having some knowledge
UDS turned out to be critical

91
00:04:10,010 --> 00:04:11,300
for me to do this research.

92
00:04:11,300 --> 00:04:13,233
I managed to learn quite a bit about it.

93
00:04:14,450 --> 00:04:18,170
So next we have the
battery management system.

94
00:04:18,170 --> 00:04:20,070
Battery management system
is a board that sits

95
00:04:20,070 --> 00:04:22,020
inside the battery pack,

96
00:04:22,020 --> 00:04:23,680
at the rear,

97
00:04:23,680 --> 00:04:25,450
it's primary microprocessor,

98
00:04:25,450 --> 00:04:27,197
it's a TI

99
00:04:27,197 --> 00:04:28,030
TMS320

100
00:04:28,030 --> 00:04:30,930
C2809.

101
00:04:30,930 --> 00:04:32,340
There's a hardware backup for it,

102
00:04:32,340 --> 00:04:34,380
so in case there's some
type of hardware failure,

103
00:04:34,380 --> 00:04:36,923
the hardware backup is an Altera CPLD.

104
00:04:38,270 --> 00:04:40,840
It's critical for one step of the process

105
00:04:40,840 --> 00:04:42,210
that we're gonna do later,

106
00:04:42,210 --> 00:04:45,733
and then there's a current
shunt and pre-charge resistor.

107
00:04:46,920 --> 00:04:49,020
The full reversing of these components

108
00:04:49,020 --> 00:04:50,050
is an ongoing project.

109
00:04:50,050 --> 00:04:52,200
So if you wanna help, reach out to me

110
00:04:52,200 --> 00:04:54,380
'cause there's some of the
skills like the assembly

111
00:04:54,380 --> 00:04:57,253
for the TMS320 that
I'm not very good with.

112
00:04:59,890 --> 00:05:01,520
Skipped over some of the
steps 'cause it's easier

113
00:05:01,520 --> 00:05:02,930
to show in the screen.

114
00:05:02,930 --> 00:05:04,170
The high voltage contactors,

115
00:05:04,170 --> 00:05:06,360
you can see in the middle
of those round circles

116
00:05:06,360 --> 00:05:09,600
with two large terminal poles on them,

117
00:05:09,600 --> 00:05:10,823
the high current shunt,

118
00:05:12,170 --> 00:05:14,010
connects directly to the
battery management system,

119
00:05:14,010 --> 00:05:16,800
it sits between one of the bus bars

120
00:05:16,800 --> 00:05:19,920
going from the battery to the contactors.

121
00:05:19,920 --> 00:05:21,120
There's a pre-charge resistor.

122
00:05:21,120 --> 00:05:23,893
So the way that the
contactors are engaged,

123
00:05:24,910 --> 00:05:29,030
when the vehicle wants
to unable battery car

124
00:05:29,030 --> 00:05:31,800
to the rest of the vehicle,
one of the contactors closes,

125
00:05:31,800 --> 00:05:34,070
and then the pre-charged
resistor sits there

126
00:05:34,070 --> 00:05:38,010
as a relatively slow current path

127
00:05:38,010 --> 00:05:41,080
for the rest of the high
voltage system to come up

128
00:05:41,080 --> 00:05:43,450
to match the voltage of the battery.

129
00:05:43,450 --> 00:05:45,160
And it's only then that the BMS allows

130
00:05:45,160 --> 00:05:46,950
the other contactors to close,

131
00:05:46,950 --> 00:05:48,240
so you don't get any rush current,

132
00:05:48,240 --> 00:05:51,060
and you don't get to damage the components

133
00:05:51,060 --> 00:05:54,450
from the massive amount of power

134
00:05:54,450 --> 00:05:56,233
that's in that battery system.

135
00:05:57,140 --> 00:06:02,020
From there, we actually have
16 battery management boards.

136
00:06:02,020 --> 00:06:05,730
These contain all the bleed resistors

137
00:06:05,730 --> 00:06:08,460
so it can balance the
voltage across all the packs,

138
00:06:08,460 --> 00:06:10,620
there are 96 of them,

139
00:06:10,620 --> 00:06:14,190
I believe six in each of the 16 modules.

140
00:06:14,190 --> 00:06:15,963
And then the BNBs also,

141
00:06:18,400 --> 00:06:20,880
they monitor the temperature
and of course the voltage

142
00:06:20,880 --> 00:06:22,880
of the individual battery modules.

143
00:06:22,880 --> 00:06:24,650
And then now the last thing
you see on the far right,

144
00:06:24,650 --> 00:06:26,510
voltage sense.

145
00:06:26,510 --> 00:06:28,780
Voltage sense

146
00:06:28,780 --> 00:06:31,250
is the

147
00:06:31,250 --> 00:06:32,320
component that actually sits

148
00:06:32,320 --> 00:06:33,960
on the four contactors of the battery.

149
00:06:33,960 --> 00:06:35,930
So, not only can it actually detect

150
00:06:35,930 --> 00:06:37,740
when the battery contactors
are open or closed,

151
00:06:37,740 --> 00:06:40,590
so if they're not in a state
where the BMS expects them,

152
00:06:40,590 --> 00:06:44,970
but they're also used to measure
the current voltage level

153
00:06:44,970 --> 00:06:46,170
coming from the battery.

154
00:06:51,000 --> 00:06:52,490
So a little bit of history,

155
00:06:52,490 --> 00:06:54,910
and this will be relevant in just a minute

156
00:06:54,910 --> 00:06:55,743
and you'll see why.

157
00:06:55,743 --> 00:06:57,850
So in 2014,

158
00:06:57,850 --> 00:06:59,390
of October,

159
00:06:59,390 --> 00:07:03,860
the performance Dual Motor
Model S was announced.

160
00:07:03,860 --> 00:07:06,760
This was ridiculously
fast when it was released,

161
00:07:06,760 --> 00:07:08,973
something like 3.4 seconds, zero to 60,

162
00:07:09,910 --> 00:07:13,960
but it wasn't until July of the next year

163
00:07:13,960 --> 00:07:15,810
that Ludicrous was announced.

164
00:07:15,810 --> 00:07:17,880
So when Ludicrous was announced,

165
00:07:17,880 --> 00:07:22,020
they announced it as a
$10,000 option on new models

166
00:07:22,020 --> 00:07:24,620
of the new versions of the Model S,

167
00:07:24,620 --> 00:07:26,740
and it was $10,000 for a while.

168
00:07:26,740 --> 00:07:28,780
I think eventually they
gave it away for free,

169
00:07:28,780 --> 00:07:30,130
but they keep going back and forth

170
00:07:30,130 --> 00:07:31,480
and that's really up to them.

171
00:07:31,480 --> 00:07:34,680
So it's always been
kind of an optional item

172
00:07:34,680 --> 00:07:36,280
to make the car a little bit faster

173
00:07:36,280 --> 00:07:37,743
and have Ludicrous power on.

174
00:07:39,108 --> 00:07:40,750
So $10,000 from new buyers,

175
00:07:40,750 --> 00:07:44,130
but as an offer for existing

176
00:07:44,130 --> 00:07:46,590
P85D owners,

177
00:07:46,590 --> 00:07:48,553
they offered it a $5,000 upgrade.

178
00:07:49,690 --> 00:07:52,440
And the press release
actually mentioned that,

179
00:07:52,440 --> 00:07:54,681
the upgrade involve
putting in new contactors

180
00:07:54,681 --> 00:07:56,405
and a pyro fuse,

181
00:07:56,405 --> 00:07:58,820
but after a while,

182
00:07:58,820 --> 00:08:00,280
many of the performance battery packs,

183
00:08:00,280 --> 00:08:02,430
so the battery packs that
would go into the car

184
00:08:02,430 --> 00:08:04,520
would already be capable
of running Ludicrous mode,

185
00:08:04,520 --> 00:08:06,733
they just wouldn't have
the feature turned on.

186
00:08:07,920 --> 00:08:10,893
And when I wanna say ludicrous
capable, what I mean is,

187
00:08:11,850 --> 00:08:15,630
that all you have to do
is modify a single file

188
00:08:15,630 --> 00:08:16,690
on the gateway of the vehicle.

189
00:08:16,690 --> 00:08:19,790
So you route the vehicle,
modify this single file,

190
00:08:19,790 --> 00:08:21,403
and it has Ludicrous mode.

191
00:08:23,190 --> 00:08:26,020
All the P100Ds, as far as I understand,

192
00:08:26,020 --> 00:08:30,763
and all the newer Model S's
that are dual motor performance,

193
00:08:31,880 --> 00:08:34,990
all you have to do is
modify the single line

194
00:08:34,990 --> 00:08:35,823
on the gateway.

195
00:08:35,823 --> 00:08:38,200
So I've got a little bit
of information about that.

196
00:08:38,200 --> 00:08:43,200
So, the gateway has this
file called internal.dat,

197
00:08:43,380 --> 00:08:46,490
it stores the cars configuration.

198
00:08:46,490 --> 00:08:47,610
It has like, you know, for example,

199
00:08:47,610 --> 00:08:48,790
the type of wheels that are on it,

200
00:08:48,790 --> 00:08:50,950
so that the displays
actually reflect correctly

201
00:08:50,950 --> 00:08:52,940
the color of the car,

202
00:08:52,940 --> 00:08:55,500
the version of the thermal controller,

203
00:08:55,500 --> 00:08:58,307
or the version of the various drive units

204
00:08:58,307 --> 00:09:00,107
and the version of the battery pack.

205
00:09:01,260 --> 00:09:03,920
Bunch of other configurations
that also controls.

206
00:09:03,920 --> 00:09:06,710
It's also the file that is modified

207
00:09:06,710 --> 00:09:10,230
when I heard about how people
had supercharging disabled,

208
00:09:10,230 --> 00:09:11,380
that's where it's disabled.

209
00:09:11,380 --> 00:09:14,840
It's actually disabled
client side on the vehicle,

210
00:09:14,840 --> 00:09:17,980
but for the purposes of this talk,

211
00:09:17,980 --> 00:09:21,460
all you have to do is
from a Ludicrous vehicle

212
00:09:21,460 --> 00:09:23,793
request this internal.dat file,

213
00:09:24,970 --> 00:09:25,940
make it quick,

214
00:09:25,940 --> 00:09:28,170
file editor change of which, you know,

215
00:09:28,170 --> 00:09:29,910
vi and nano are both there.

216
00:09:29,910 --> 00:09:33,313
So you go into
internal.dat, add this line,

217
00:09:33,313 --> 00:09:34,510
PerformanceAddon,

218
00:09:34,510 --> 00:09:35,933
and add the value of one.

219
00:09:37,120 --> 00:09:39,980
From there, you copy it
back over to the gateway,

220
00:09:39,980 --> 00:09:41,040
reboot the gateway,

221
00:09:41,040 --> 00:09:43,120
and then boom, the vehicle's Ludicrous.

222
00:09:43,120 --> 00:09:44,930
But that's not the case
for the earlier models,

223
00:09:44,930 --> 00:09:46,440
the earlier models where
you actually had to do

224
00:09:46,440 --> 00:09:47,940
quite a bit to the firmware.

225
00:09:47,940 --> 00:09:49,410
I'm just talking about the later ones.

226
00:09:49,410 --> 00:09:51,350
So the later ones that were
Ludicrous capable already,

227
00:09:51,350 --> 00:09:53,330
in other words, the
battery was already capable

228
00:09:53,330 --> 00:09:54,790
of Ludicrous speeds.

229
00:09:54,790 --> 00:09:56,783
This is the only thing you have to change.

230
00:09:59,190 --> 00:10:01,700
So they kind of alluded too earlier.

231
00:10:01,700 --> 00:10:05,510
The earlier vehicles, you
know, so some of the 90s,

232
00:10:06,640 --> 00:10:09,540
all the fives released up to that point,

233
00:10:09,540 --> 00:10:10,830
required hardware,

234
00:10:10,830 --> 00:10:12,517
they required modification
of the current shunt,

235
00:10:12,517 --> 00:10:13,980
you had to re-flash the firmware

236
00:10:13,980 --> 00:10:15,960
on the battery management system,

237
00:10:15,960 --> 00:10:18,450
you had to re-calibrate the current shunt.

238
00:10:18,450 --> 00:10:21,110
Only then could you
actually add that value

239
00:10:21,110 --> 00:10:24,960
to the gateway file, internal.dat,

240
00:10:24,960 --> 00:10:28,380
and actually re-configure it
to support Ludicrous speed.

241
00:10:28,380 --> 00:10:29,240
If you did it before that,

242
00:10:29,240 --> 00:10:31,700
it wouldn't show actually
due to the speed,

243
00:10:31,700 --> 00:10:33,730
It would show you the setting,

244
00:10:33,730 --> 00:10:35,433
but it wouldn't go any faster.

245
00:10:37,370 --> 00:10:38,690
So we did this,

246
00:10:38,690 --> 00:10:40,533
I actually upgraded a Donor vehicle.

247
00:10:41,780 --> 00:10:44,860
I have a contact in Southern California

248
00:10:44,860 --> 00:10:45,700
for those who don't know,

249
00:10:45,700 --> 00:10:47,370
I'm actually located in Las Vegas.

250
00:10:47,370 --> 00:10:51,610
So, through some online
forums of someone else

251
00:10:51,610 --> 00:10:53,610
who was actually hacking on their Tesla,

252
00:10:54,640 --> 00:10:55,750
guy owned a body shop,

253
00:10:55,750 --> 00:10:57,560
he was willing to let me loan his lifts.

254
00:10:57,560 --> 00:10:59,110
So a lift isn't something
you can just kind of go

255
00:10:59,110 --> 00:10:59,943
to a garage and say,

256
00:10:59,943 --> 00:11:00,777
"Hey, can I borrow your lift

257
00:11:00,777 --> 00:11:02,700
"for a couple of days?"

258
00:11:02,700 --> 00:11:03,533
'Cause they'll go like,

259
00:11:03,533 --> 00:11:04,577
"No, I have this thing called insurance

260
00:11:04,577 --> 00:11:07,240
"and no, just go away."

261
00:11:07,240 --> 00:11:09,000
So he let me do this, very gracious.

262
00:11:09,000 --> 00:11:11,763
Thank you BitBuster, I'll
call you out here at the end.

263
00:11:12,950 --> 00:11:15,640
But another little quick anecdote,

264
00:11:15,640 --> 00:11:17,480
this guy who loaned me this garage,

265
00:11:17,480 --> 00:11:20,090
he was actually hacking on a Model S.

266
00:11:20,090 --> 00:11:24,993
He took the car and actually
enabled autopilot version two

267
00:11:25,830 --> 00:11:27,110
on autopilot one car.

268
00:11:27,110 --> 00:11:29,203
So he added all eight of the cameras,

269
00:11:30,110 --> 00:11:32,630
put in the newer computer,
replaced the steering rack

270
00:11:32,630 --> 00:11:34,400
and a bunch of other stuff,

271
00:11:34,400 --> 00:11:39,400
and actually got
retrofitted autopilot two.

272
00:11:39,530 --> 00:11:41,880
So all the full self-driving stuff

273
00:11:41,880 --> 00:11:45,020
to an older model vehicle,
pretty cool stuff.

274
00:11:45,020 --> 00:11:46,190
I was pretty impressed with that

275
00:11:46,190 --> 00:11:47,700
and I believe he's the
first person in the world

276
00:11:47,700 --> 00:11:48,533
to ever do that.

277
00:11:50,570 --> 00:11:53,240
So here's a picture of the pack dropped,

278
00:11:53,240 --> 00:11:54,740
was fairly complicated,

279
00:11:54,740 --> 00:11:56,010
but not too hard.

280
00:11:56,010 --> 00:11:58,670
You know, you remove the central bolts

281
00:11:58,670 --> 00:12:00,750
and then lower it down
onto this big heavy rack

282
00:12:00,750 --> 00:12:02,690
that can support the weight
of the entire vehicle,

283
00:12:02,690 --> 00:12:04,250
then you remove the ones along the edges,

284
00:12:04,250 --> 00:12:05,800
and then raise the car back up.

285
00:12:05,800 --> 00:12:07,810
Battery pack drops out.

286
00:12:07,810 --> 00:12:10,050
All the electrical connections
are quick disconnects,

287
00:12:10,050 --> 00:12:12,140
the coolant is quick disconnect.

288
00:12:12,140 --> 00:12:15,310
I believe this is because
originally Tesla was toying around

289
00:12:15,310 --> 00:12:17,536
with this idea of having
swappable battery packs

290
00:12:17,536 --> 00:12:18,940
for people on the road.

291
00:12:18,940 --> 00:12:21,080
I believe they had a pilot
program at one point,

292
00:12:21,080 --> 00:12:23,540
it just never really
seemed to go anywhere.

293
00:12:23,540 --> 00:12:26,787
So they make it really
easy to drop the pack

294
00:12:26,787 --> 00:12:29,653
as long as you have access
to the appropriate equipment.

295
00:12:31,840 --> 00:12:33,700
So here in this next picture,

296
00:12:33,700 --> 00:12:35,390
we have a picture of the fuse bay,

297
00:12:35,390 --> 00:12:36,810
which is up at the front of the vehicle

298
00:12:36,810 --> 00:12:40,030
on the opposite side of
where the coolant tubes

299
00:12:40,030 --> 00:12:41,530
enter the pack.

300
00:12:41,530 --> 00:12:44,020
Here the cover over the fuse is removed

301
00:12:44,020 --> 00:12:45,230
and the old fuse is visible,

302
00:12:45,230 --> 00:12:47,180
the fuse that actually has to come out.

303
00:12:49,300 --> 00:12:52,130
And then on the right,
we have the contactor bay

304
00:12:52,130 --> 00:12:53,293
with it opened up,

305
00:12:54,450 --> 00:12:57,643
the cover plate removed and
the old contactors removed.

306
00:12:59,200 --> 00:13:01,880
All right, here, we have a
closeup of the current shunt.

307
00:13:01,880 --> 00:13:03,980
You can see it sits right next to the BMS.

308
00:13:06,060 --> 00:13:08,903
And then the new contractors
are installed at this point.

309
00:13:11,290 --> 00:13:14,720
Here's a closeup of the BMS.

310
00:13:14,720 --> 00:13:17,160
You can see that it just sits
at the very bottom of the bay

311
00:13:17,160 --> 00:13:19,300
and it's just kind of on the right side

312
00:13:19,300 --> 00:13:21,170
or left if you're staring
at the car from the front,

313
00:13:21,170 --> 00:13:23,263
but from my perspective,
it's on the right.

314
00:13:24,100 --> 00:13:27,050
And you can see the TMS320 right there,

315
00:13:27,050 --> 00:13:30,260
kind of in the middle, a
CPLD off to the right end.

316
00:13:30,260 --> 00:13:33,233
What is that between the two hands?

317
00:13:34,160 --> 00:13:36,090
Oh, that's interesting.

318
00:13:36,090 --> 00:13:39,893
That label says JTAG, get into that later.

319
00:13:40,970 --> 00:13:42,370
Yeah, it actually has JTAG,

320
00:13:42,370 --> 00:13:45,950
the BMSs that I messed with on my bench,

321
00:13:45,950 --> 00:13:48,020
none of them actually had that connector.

322
00:13:48,020 --> 00:13:50,510
It was all covered over
with conformal coding,

323
00:13:50,510 --> 00:13:53,200
but the one in the car that I modified

324
00:13:53,200 --> 00:13:58,110
actually these headers
on here that say JTAG.

325
00:13:58,110 --> 00:13:59,110
kind of interesting.

326
00:14:01,330 --> 00:14:03,390
Another thing that you have to do,

327
00:14:03,390 --> 00:14:06,560
is you actually have to
replace a second fuse.

328
00:14:06,560 --> 00:14:09,020
So there's older vehicles.

329
00:14:09,020 --> 00:14:11,330
This is underneath the rear seat.

330
00:14:11,330 --> 00:14:13,560
There's a fuse between the center thing

331
00:14:13,560 --> 00:14:15,550
called the high voltage junction box

332
00:14:15,550 --> 00:14:17,160
and the front drive unit.

333
00:14:17,160 --> 00:14:20,480
So, one of the things I
kinda found by digging around

334
00:14:20,480 --> 00:14:21,820
in toolbox that we'll get into later,

335
00:14:21,820 --> 00:14:25,390
is you actually have to replace
this fuse with a bus bar.

336
00:14:25,390 --> 00:14:26,223
Yeah, that's right.

337
00:14:26,223 --> 00:14:30,550
The instructions say you
replace the fuse with a bus bar.

338
00:14:30,550 --> 00:14:32,171
So we did that.

339
00:14:32,171 --> 00:14:34,300
All right, here's the front fuse,

340
00:14:34,300 --> 00:14:35,580
here's the front view removed,

341
00:14:35,580 --> 00:14:38,380
and here's the front fuse
replaced with the bus bar.

342
00:14:38,380 --> 00:14:40,940
Put it all back together,
put the seat back in,

343
00:14:40,940 --> 00:14:44,130
connect all the high voltage
general locks back up.

344
00:14:44,130 --> 00:14:46,663
And, that part is done.

345
00:14:47,510 --> 00:14:48,970
So what about firmware?

346
00:14:48,970 --> 00:14:52,233
This is really where the
majority of my time went.

347
00:14:52,233 --> 00:14:56,010
The physical work was actually
pretty easy to figure out,

348
00:14:56,010 --> 00:14:58,610
Tesla actually publicly
talked about the components

349
00:14:58,610 --> 00:14:59,560
that were involved.

350
00:15:02,410 --> 00:15:03,963
The firmware was the hard part.

351
00:15:04,850 --> 00:15:07,840
And to do this, we need
to dig into some Python.

352
00:15:07,840 --> 00:15:11,470
Tesla uses a diagnostic
tool called toolbox.

353
00:15:11,470 --> 00:15:14,863
It's a Python Windows executable,

354
00:15:16,030 --> 00:15:16,930
right?
That's right.

355
00:15:16,930 --> 00:15:19,780
It's executable written in Python,

356
00:15:19,780 --> 00:15:21,020
but it runs a Windows.

357
00:15:21,020 --> 00:15:23,940
So it's been compiled and then encrypted,

358
00:15:23,940 --> 00:15:27,210
uses these plugins that
are compiled and encrypted,

359
00:15:27,210 --> 00:15:29,310
but it's designed to
work without a connection

360
00:15:29,310 --> 00:15:30,143
to the internet.

361
00:15:30,143 --> 00:15:33,290
So all the information that
you need to decrypt these

362
00:15:33,290 --> 00:15:34,870
into a files called scramble,

363
00:15:34,870 --> 00:15:37,140
as you can kind of see in this image,

364
00:15:37,140 --> 00:15:40,940
are actually on the executable search,

365
00:15:40,940 --> 00:15:43,893
we're able to get an image
or grab the correct files.

366
00:15:44,920 --> 00:15:46,680
You're able to decrypt these modules.

367
00:15:46,680 --> 00:15:48,024
To be completely honest,

368
00:15:48,024 --> 00:15:49,950
this wasn't my work to figure this out,

369
00:15:49,950 --> 00:15:53,230
this was other people that
actually figured this out.

370
00:15:53,230 --> 00:15:55,910
They had done some of
the decompiling as well.

371
00:15:55,910 --> 00:15:58,000
So you can use our Uncompyle6 to actually

372
00:15:58,930 --> 00:16:03,483
run the PYC compile files
and get Python source code.

373
00:16:04,360 --> 00:16:05,210
I did a lot of that.

374
00:16:05,210 --> 00:16:07,710
I wrote a really, really
ugly Python script

375
00:16:07,710 --> 00:16:10,760
to iterate through every single
one of the scramble files.

376
00:16:10,760 --> 00:16:12,983
So the scramble files are
also all kind of zipped up.

377
00:16:12,983 --> 00:16:15,670
There's a bunch of
separate source code files

378
00:16:15,670 --> 00:16:18,360
underneath each one in
separate directories.

379
00:16:18,360 --> 00:16:19,913
So I iterated through them all,

380
00:16:21,640 --> 00:16:23,040
ran and compiled against them,

381
00:16:23,040 --> 00:16:25,120
and then did some additional
work that I'll talk about

382
00:16:25,120 --> 00:16:26,320
in the next slides.

383
00:16:26,320 --> 00:16:29,050
But they also left all the
source code comments in place.

384
00:16:29,050 --> 00:16:32,653
So thank you, that actually
helped me figure this out.

385
00:16:33,950 --> 00:16:37,440
So this is an example of
just the header of a file.

386
00:16:37,440 --> 00:16:39,440
This is the UDS one.

387
00:16:39,440 --> 00:16:43,050
You can see it actually
has all of this comments

388
00:16:43,050 --> 00:16:44,310
here in place.

389
00:16:44,310 --> 00:16:46,987
You know, here's the
headers added by uncompyle,

390
00:16:46,987 --> 00:16:49,130
but it actually shows
when it was compiled,

391
00:16:49,130 --> 00:16:51,020
who compiled it, who is the author,

392
00:16:51,020 --> 00:16:53,210
gives me his email address too,

393
00:16:53,210 --> 00:16:55,293
and then the copyright information on it.

394
00:16:57,740 --> 00:17:01,120
So, here's the kind of thing
that I was able to actually see

395
00:17:01,120 --> 00:17:03,240
by digging through all these.

396
00:17:03,240 --> 00:17:05,760
This is one of the specific

397
00:17:07,620 --> 00:17:09,624
files used to configure for Ludicrous.

398
00:17:09,624 --> 00:17:11,255
So this is the PerformanceAddonConfig,

399
00:17:11,255 --> 00:17:12,960
this is the one that modifies the gateway,

400
00:17:12,960 --> 00:17:15,230
if you don't do it manually like I did.

401
00:17:15,230 --> 00:17:16,163
And it tells you,

402
00:17:17,610 --> 00:17:21,623
that you first have to verify
the vehicle can be configured.

403
00:17:22,720 --> 00:17:24,020
For Ludicrous mode of the vehicles

404
00:17:24,020 --> 00:17:25,497
needs to be all wheel drive,

405
00:17:25,497 --> 00:17:27,120
and have a battery pack config

406
00:17:27,120 --> 00:17:29,470
that supports the 1500
amp current discharge.

407
00:17:29,470 --> 00:17:30,840
So this is assuming the battery pack

408
00:17:30,840 --> 00:17:32,970
has already been modified.

409
00:17:32,970 --> 00:17:35,500
There are other routines and toolbox

410
00:17:35,500 --> 00:17:37,000
that actually go through this.

411
00:17:38,250 --> 00:17:41,320
One of the most important
things in these toolbox files,

412
00:17:41,320 --> 00:17:42,450
were these data structures.

413
00:17:42,450 --> 00:17:43,450
So you can see these

414
00:17:44,990 --> 00:17:45,890
three variable names,

415
00:17:45,890 --> 00:17:47,383
qt_resource_data, qt_resource_name,
qt_resource_struct.

416
00:17:50,560 --> 00:17:53,850
My really, really ugly Python
script went through those,

417
00:17:53,850 --> 00:17:56,670
and actually converted
those back into binary.

418
00:17:56,670 --> 00:18:00,210
And then from there I ran Binwalk
against those binary files

419
00:18:00,210 --> 00:18:02,993
and I got a ton of useful information.

420
00:18:06,210 --> 00:18:07,363
Things like this.

421
00:18:08,550 --> 00:18:10,860
This is the pointer that
tells me exactly how to do it.

422
00:18:10,860 --> 00:18:12,493
It says that,

423
00:18:13,950 --> 00:18:15,670
so we already know that the donor vehicle

424
00:18:15,670 --> 00:18:18,080
has a pack ID of 57, I
didn't say that previously,

425
00:18:18,080 --> 00:18:21,560
but the donor vehicle had
a pack ID of 57 says, okay.

426
00:18:21,560 --> 00:18:24,440
So, if you're gonna change pack ID,

427
00:18:24,440 --> 00:18:26,950
battery pack ID 57 to 70,

428
00:18:26,950 --> 00:18:29,710
here are the three firmware
files that you need.

429
00:18:29,710 --> 00:18:32,210
Okay, well, where do I
get those firmware files?

430
00:18:32,210 --> 00:18:33,070
It turns out they were stored

431
00:18:33,070 --> 00:18:34,810
within those Python data structures.

432
00:18:34,810 --> 00:18:36,310
When I ran Binwalk against it,

433
00:18:37,560 --> 00:18:39,480
I actually got a tar file firmware.

434
00:18:39,480 --> 00:18:40,720
And when you untar that file,

435
00:18:40,720 --> 00:18:44,160
you get every single one of
these hex files of firmware.

436
00:18:44,160 --> 00:18:47,230
It was all stored within
the Python executable.

437
00:18:47,230 --> 00:18:51,370
All right there, ready to be used.

438
00:18:51,370 --> 00:18:55,230
So, for this upgrade
pack 57 becomes pack 70,

439
00:18:55,230 --> 00:18:58,830
pack 57 is a 1300 amp battery pack,

440
00:18:58,830 --> 00:19:00,813
pack 70 is a 1500 amp.

441
00:19:02,450 --> 00:19:03,810
One of the things that I kind of did

442
00:19:03,810 --> 00:19:06,070
that I thought was interesting,

443
00:19:06,070 --> 00:19:08,210
since we're still talking
about the firmware,

444
00:19:08,210 --> 00:19:11,460
is I did some differential
analysis of the bootloaders.

445
00:19:11,460 --> 00:19:14,500
So I have the two different
bootloaders here, 57 and 70.

446
00:19:14,500 --> 00:19:17,520
You can see that, there really
weren't that many changes,

447
00:19:17,520 --> 00:19:19,993
on one line, it's a
single bit that changes.

448
00:19:21,120 --> 00:19:22,601
The other one, you know,

449
00:19:22,601 --> 00:19:25,150
537 and 730 that you see here,

450
00:19:25,150 --> 00:19:27,900
are just the R

451
00:19:27,900 --> 00:19:32,030
and then the actual number
one is 57, one is 70.

452
00:19:32,030 --> 00:19:34,540
And then we have this short little string

453
00:19:34,540 --> 00:19:36,540
of, you know, group of hex characters.

454
00:19:36,540 --> 00:19:37,373
And that was the only change

455
00:19:37,373 --> 00:19:40,303
between the different various
versions of the bootloader.

456
00:19:43,230 --> 00:19:44,510
That was not the application file,

457
00:19:44,510 --> 00:19:46,870
the application file had a
bunch of different changes.

458
00:19:46,870 --> 00:19:48,210
It just the bootloaders themselves

459
00:19:48,210 --> 00:19:49,840
were all very, very similar.

460
00:19:49,840 --> 00:19:53,070
So, to do this upgrade,

461
00:19:53,070 --> 00:19:55,440
all the instructions and
files that you need for this,

462
00:19:55,440 --> 00:19:57,140
we're storing these toolbox files.

463
00:19:59,650 --> 00:20:03,000
There also were a bunch of
other really helpful files.

464
00:20:03,000 --> 00:20:03,833
DBC files,

465
00:20:03,833 --> 00:20:06,980
for those of you who've
hacked on a vehicle before,

466
00:20:06,980 --> 00:20:10,590
DBC is the instruction file that stores

467
00:20:10,590 --> 00:20:13,200
all of the various CAN bus signals,

468
00:20:13,200 --> 00:20:14,890
so that you can interpret them.

469
00:20:14,890 --> 00:20:18,740
And these individual DBC files
for all the various CAN buses

470
00:20:18,740 --> 00:20:21,900
of the vehicle were stored within toolbox.

471
00:20:21,900 --> 00:20:23,010
The ODX files.

472
00:20:23,010 --> 00:20:27,240
ODX is XML style format that defines

473
00:20:27,240 --> 00:20:28,760
how to do diagnostics,

474
00:20:28,760 --> 00:20:32,283
how to do firmware upgrades,
how to get security access,

475
00:20:33,370 --> 00:20:34,890
a bunch of other stuff for stored

476
00:20:34,890 --> 00:20:36,310
in the kind of the ODX file format.

477
00:20:36,310 --> 00:20:38,450
So the diagnostic routines are ODX.

478
00:20:38,450 --> 00:20:40,650
The CAN bus interpretation
routines are DVC.

479
00:20:41,970 --> 00:20:43,860
And then there are also files

480
00:20:43,860 --> 00:20:46,710
that stored the calibration
data for the shunt.

481
00:20:46,710 --> 00:20:48,760
Those are stored also in a Python pickle.

482
00:20:49,670 --> 00:20:53,510
Turns out that every single
vehicle which is eligible

483
00:20:53,510 --> 00:20:57,610
for Ludicrous upgrades
by upgrading the battery,

484
00:20:57,610 --> 00:21:02,610
had the shunt calibration
values stored as an array

485
00:21:02,720 --> 00:21:04,230
within this Python pickle files.

486
00:21:04,230 --> 00:21:06,720
So you have to actually look up the shunt

487
00:21:06,720 --> 00:21:08,910
on the vehicle that you're upgrading,

488
00:21:08,910 --> 00:21:11,240
compare it to this pickle file,

489
00:21:11,240 --> 00:21:13,030
and get these shunt calibration values

490
00:21:13,030 --> 00:21:14,703
I'm gonna show you in a little bit.

491
00:21:15,760 --> 00:21:17,237
And then of course there are
all these texts, comments,

492
00:21:17,237 --> 00:21:20,120
and other data structures
that kind of eventually

493
00:21:20,120 --> 00:21:22,263
allowed me to piece together the process.

494
00:21:23,780 --> 00:21:26,660
So kind of talk a little
bit more about a UDS.

495
00:21:26,660 --> 00:21:28,370
Here's what a UDS file looks like,

496
00:21:28,370 --> 00:21:30,760
this is the one for
actually shunt calibration.

497
00:21:30,760 --> 00:21:33,240
It shows that there are
all these parameters,

498
00:21:33,240 --> 00:21:34,157
HWID,

499
00:21:34,157 --> 00:21:35,207
CG1,

500
00:21:35,207 --> 00:21:36,070
CAU1,

501
00:21:36,070 --> 00:21:38,210
there's also a CRC value,

502
00:21:38,210 --> 00:21:39,043
and,

503
00:21:42,120 --> 00:21:42,953
a serial number.

504
00:21:44,110 --> 00:21:46,670
And again, CAN networks use DBC file,

505
00:21:46,670 --> 00:21:48,833
UDS use ODH or GMD.

506
00:21:50,260 --> 00:21:52,640
So I use the commercial tool vehicle spy

507
00:21:52,640 --> 00:21:57,220
to actually do the next
steps of this research.

508
00:21:57,220 --> 00:22:00,160
I took these DBC files and these ODX files

509
00:22:00,160 --> 00:22:02,230
and imported them to vehicles spy,

510
00:22:02,230 --> 00:22:03,330
plugged it into the bench,

511
00:22:03,330 --> 00:22:05,110
plugged it into an actual vehicle,

512
00:22:05,110 --> 00:22:06,680
and just sat there and listened to traffic

513
00:22:06,680 --> 00:22:08,930
so I could try and figure it out.

514
00:22:08,930 --> 00:22:12,540
So it turns out that the IDs 232,

515
00:22:12,540 --> 00:22:14,940
the arbitration ID is 232,

516
00:22:14,940 --> 00:22:16,877
for the BMS, 266

517
00:22:16,877 --> 00:22:19,840
and 2E5 for the two drive inverters,

518
00:22:19,840 --> 00:22:21,160
they identify max power.

519
00:22:21,160 --> 00:22:22,760
Those are variables.

520
00:22:22,760 --> 00:22:24,280
They vary based on state of charge,

521
00:22:24,280 --> 00:22:26,850
temperature and power recently used.

522
00:22:26,850 --> 00:22:30,480
On Sunday, I'm actually
gonna have a deep dive

523
00:22:30,480 --> 00:22:34,150
into these TBC files and
some of the information,

524
00:22:34,150 --> 00:22:36,940
'cause I wanna actually map
out the entire power curve

525
00:22:36,940 --> 00:22:39,930
see if I can put that back
and actually figure out

526
00:22:39,930 --> 00:22:42,423
where the power is stored
into the BMS firmware.

527
00:22:43,300 --> 00:22:45,680
But check that out if
you wanna actually see

528
00:22:45,680 --> 00:22:48,380
a little bit further into the talk

529
00:22:48,380 --> 00:22:50,700
that we were unable to cover on this.

530
00:22:50,700 --> 00:22:51,940
So,

531
00:22:51,940 --> 00:22:53,970
what a DBC does,

532
00:22:53,970 --> 00:22:56,900
this is what raw CAN
bus traffic looks like.

533
00:22:56,900 --> 00:22:58,160
You can see all the IDs, you know,

534
00:22:58,160 --> 00:23:01,160
102 through 302 down here,

535
00:23:01,160 --> 00:23:02,780
and you just see a bunch of data.

536
00:23:02,780 --> 00:23:05,460
But once you put in a DVC file,

537
00:23:05,460 --> 00:23:06,970
you can actually translate it all.

538
00:23:06,970 --> 00:23:10,163
So you can actually see
that all the values.

539
00:23:11,680 --> 00:23:12,670
BMS basically means,

540
00:23:12,670 --> 00:23:15,203
that this is the BMS who's
actually sending this.

541
00:23:16,320 --> 00:23:17,410
You can see the power available.

542
00:23:17,410 --> 00:23:20,077
This is power available before
the drive units are engaged.

543
00:23:20,077 --> 00:23:23,720
This is just the car
sitting in an off mode,

544
00:23:23,720 --> 00:23:25,360
before you press the brake pedal

545
00:23:25,360 --> 00:23:29,433
and engage the drive units and
wake the car up all the way.

546
00:23:31,300 --> 00:23:35,140
So again, ODX routines
for shunt calibration,

547
00:23:35,140 --> 00:23:38,490
here's the actually ODX routine
imported into vehicles files

548
00:23:38,490 --> 00:23:40,050
for actually doing

549
00:23:40,050 --> 00:23:43,250
the shunt calibration.

550
00:23:43,250 --> 00:23:44,950
So what you do,

551
00:23:44,950 --> 00:23:48,610
is you actually connect to the car

552
00:23:48,610 --> 00:23:49,470
and read the value of the shunt.

553
00:23:49,470 --> 00:23:50,740
You actually do some firmware stuff,

554
00:23:50,740 --> 00:23:51,950
I'll go over that in a minute.

555
00:23:51,950 --> 00:23:53,720
And then modify these values.

556
00:23:53,720 --> 00:23:56,600
So these are values that
are already modified.

557
00:23:56,600 --> 00:23:59,230
The thing I just thought
it was interesting

558
00:23:59,230 --> 00:24:02,520
is the CGI1 and the CAU1
values are all identical

559
00:24:02,520 --> 00:24:05,300
for Ludicrous vehicle
where they weren't before.

560
00:24:05,300 --> 00:24:08,003
And then we have a
serial number and a CRC,

561
00:24:08,003 --> 00:24:09,866
and then of course the hardware ID.

562
00:24:09,866 --> 00:24:10,699
And this is actually,

563
00:24:10,699 --> 00:24:12,900
it shows right successful
that this is actually

564
00:24:12,900 --> 00:24:15,380
a read() function.

565
00:24:15,380 --> 00:24:17,823
So the 23 is a read() function.

566
00:24:19,050 --> 00:24:21,400
There's a separate function
for actually writing a shunt.

567
00:24:21,400 --> 00:24:23,570
And again, I'll actually
demonstrate the process

568
00:24:23,570 --> 00:24:25,163
on Sunday in the deep dive.

569
00:24:26,610 --> 00:24:28,382
So, one of the things
I found out by building

570
00:24:28,382 --> 00:24:30,800
this all on a bench,

571
00:24:30,800 --> 00:24:33,530
and doing this work is
the shunt also needed

572
00:24:33,530 --> 00:24:34,853
a hardware modification.

573
00:24:37,520 --> 00:24:40,690
After I did the upgrade on a bench,

574
00:24:40,690 --> 00:24:43,550
I kept getting this error
message that would pop up

575
00:24:43,550 --> 00:24:46,940
on the central display,

576
00:24:46,940 --> 00:24:49,490
and also, you know, within
the DVCS of the CAN bus,

577
00:24:49,490 --> 00:24:52,440
it gives you a raise of all
the various error messages,

578
00:24:52,440 --> 00:24:55,780
and it talks about over current sense,

579
00:24:55,780 --> 00:24:58,380
there's a particular error
message that just popped up

580
00:24:58,380 --> 00:25:01,330
showing over current
sense after I modified

581
00:25:03,210 --> 00:25:04,043
the firmware,

582
00:25:04,043 --> 00:25:06,223
but the error was not there before.

583
00:25:07,430 --> 00:25:09,340
So, digging into this,

584
00:25:09,340 --> 00:25:12,260
what I did, is I actually
made a breakout board,

585
00:25:12,260 --> 00:25:14,710
and used a logic analyzer

586
00:25:14,710 --> 00:25:17,040
and analyzed all the signals
coming off the shunt.

587
00:25:17,040 --> 00:25:19,360
It actually turns out to very simple

588
00:25:19,360 --> 00:25:21,500
communications protocol that I used.

589
00:25:21,500 --> 00:25:24,950
But, this one wire, as it turns out,

590
00:25:24,950 --> 00:25:26,880
eventually connects to the CPLD.

591
00:25:26,880 --> 00:25:31,490
So, it looks like that there's
a sensor within this shunt

592
00:25:34,230 --> 00:25:35,830
for Ludicrous power they
want it disconnected,

593
00:25:35,830 --> 00:25:38,200
they don't want it to be able
to communicate to the CPLD.

594
00:25:38,200 --> 00:25:40,163
And since the CPLD didn't change,

595
00:25:41,580 --> 00:25:42,740
assuming it has something to do with it,

596
00:25:42,740 --> 00:25:45,810
you know, the current values
going through the CPLD

597
00:25:45,810 --> 00:25:47,600
they didn't want the modify,

598
00:25:47,600 --> 00:25:49,510
Tesla didn't want the modified.

599
00:25:49,510 --> 00:25:52,490
So, when this wire is disconnected,

600
00:25:52,490 --> 00:25:53,730
that error message went away.

601
00:25:53,730 --> 00:25:57,050
So that basically tells
me that there's a wire

602
00:25:57,050 --> 00:25:59,680
that has to be disconnected
during the process

603
00:26:00,780 --> 00:26:03,223
of actually doing this upgrade.

604
00:26:04,650 --> 00:26:09,623
So again, go to California,
drop the battery pack,

605
00:26:11,500 --> 00:26:13,453
drain the battery as much as possible.

606
00:26:14,740 --> 00:26:17,690
Do all the hardware
stuff, modify the shunt,

607
00:26:17,690 --> 00:26:20,113
disconnect that wire, a very scary stuff.

608
00:26:21,210 --> 00:26:23,440
And there's actually these special gloves

609
00:26:23,440 --> 00:26:24,273
that are purchased,

610
00:26:24,273 --> 00:26:26,260
special gloves and you know,
special socket wrenches

611
00:26:26,260 --> 00:26:28,550
that are used when you're
dealing with high voltage.

612
00:26:28,550 --> 00:26:32,560
They're rubber glove with
a leather over lining

613
00:26:32,560 --> 00:26:33,920
and then you're just
careful about, you know,

614
00:26:33,920 --> 00:26:36,700
where you're standing in
proximity to the other components.

615
00:26:36,700 --> 00:26:40,340
And even though the fuse isolate you,

616
00:26:40,340 --> 00:26:42,650
there's still enough of a charge

617
00:26:42,650 --> 00:26:44,980
and something where
you can shock yourself,

618
00:26:44,980 --> 00:26:47,820
and then again if you're
touching the wrong things,

619
00:26:47,820 --> 00:26:49,320
you can actually hurt yourself.

620
00:26:49,320 --> 00:26:52,120
So there's quite a few precautions
you actually have to do.

621
00:26:52,120 --> 00:26:54,810
I talked to a few Tesla
techs and they told me like

622
00:26:54,810 --> 00:26:57,460
the gloves where they were,
so I ordered a set of those

623
00:26:57,460 --> 00:27:00,547
and used all possible
precautions for doing that.

624
00:27:00,547 --> 00:27:04,030
And so we dropped the pack,
do all the hardware stuff.

625
00:27:04,030 --> 00:27:05,280
Re-install pack.

626
00:27:05,280 --> 00:27:06,930
So the re-installing a pack was probably

627
00:27:06,930 --> 00:27:11,720
the most pucker factor
part of the whole install,

628
00:27:11,720 --> 00:27:13,530
because I was really nervous about having

629
00:27:13,530 --> 00:27:16,450
a Rich Rebuilds moment
and actually damaging

630
00:27:16,450 --> 00:27:17,283
one of the leads.

631
00:27:17,283 --> 00:27:19,120
'Cause then I'd have to
leave the vehicle there

632
00:27:19,120 --> 00:27:21,820
for a long time and have
BitBuster angry at me.

633
00:27:21,820 --> 00:27:22,973
So I used a borescope,

634
00:27:23,830 --> 00:27:25,553
both back here at the battery pack,

635
00:27:25,553 --> 00:27:29,720
used the main battery pack contacts,

636
00:27:29,720 --> 00:27:31,210
going back into the battery,

637
00:27:31,210 --> 00:27:35,800
and then up front where the
coolant lines were, scope those.

638
00:27:35,800 --> 00:27:38,450
And then just very slowly lowered
the vehicle onto the mall.

639
00:27:38,450 --> 00:27:40,646
Everything went flawlessly.

640
00:27:40,646 --> 00:27:44,130
Re-installed all the hardware,
lifted the car back up,

641
00:27:44,130 --> 00:27:45,660
verified everything,

642
00:27:45,660 --> 00:27:47,840
dropped it completely off the lift

643
00:27:47,840 --> 00:27:49,940
and then had to do all the firmware stuff.

644
00:27:50,950 --> 00:27:53,470
It turns out you have to
actually flash the BMS

645
00:27:53,470 --> 00:27:54,620
with special firmware.

646
00:27:54,620 --> 00:27:55,453
There was, you know, those three files

647
00:27:55,453 --> 00:27:56,867
that actually says that,

648
00:27:56,867 --> 00:27:58,937
"To do the shunt calibration,

649
00:27:58,937 --> 00:28:00,850
"you load this file under the BMS."

650
00:28:00,850 --> 00:28:02,340
So it was a special application file

651
00:28:02,340 --> 00:28:04,310
just for doing the shunt calibration.

652
00:28:04,310 --> 00:28:05,700
Look up the shunt value,

653
00:28:05,700 --> 00:28:07,200
re-calibrate the shunt with the value

654
00:28:07,200 --> 00:28:08,760
based on the serial number.

655
00:28:08,760 --> 00:28:10,460
I had already extracted
that serial number,

656
00:28:10,460 --> 00:28:12,550
validated that it was in the table.

657
00:28:12,550 --> 00:28:14,100
So I knew I was okay there,

658
00:28:14,100 --> 00:28:17,010
that all went without a hitch,

659
00:28:17,010 --> 00:28:19,180
flashed the BMS with its new bootloader,

660
00:28:19,180 --> 00:28:22,400
flashed the BMS with its
new application firmware,

661
00:28:22,400 --> 00:28:25,960
updated internal.dat, changed the pack ID,

662
00:28:25,960 --> 00:28:28,410
and then tried to do a firmer redeploy,

663
00:28:28,410 --> 00:28:29,840
which is the thing that's you should to do

664
00:28:29,840 --> 00:28:32,350
after you change any
component on the vehicle.

665
00:28:32,350 --> 00:28:33,960
And then drive away, right?

666
00:28:33,960 --> 00:28:34,940
No,

667
00:28:34,940 --> 00:28:35,773
no.

668
00:28:35,773 --> 00:28:37,253
This is where the fun begins.

669
00:28:38,560 --> 00:28:42,140
I used every known technique
that I've used before,

670
00:28:42,140 --> 00:28:43,490
I've tried putting on new firmware,

671
00:28:43,490 --> 00:28:46,080
I mess with this for a day and a half.

672
00:28:46,080 --> 00:28:50,093
I think I age myself quite
a bit, stress myself out.

673
00:28:51,470 --> 00:28:52,310
It failed.

674
00:28:52,310 --> 00:28:55,402
It would not redeploy.

675
00:28:55,402 --> 00:28:56,450
It would not re-install

676
00:28:56,450 --> 00:28:59,100
I was getting an error every single time.

677
00:28:59,100 --> 00:29:02,953
So I started logging a lot of data,

678
00:29:04,410 --> 00:29:06,230
tried to troubleshoot,

679
00:29:06,230 --> 00:29:08,910
couldn't figure it out, was stressed out.

680
00:29:08,910 --> 00:29:11,870
Finally just said, screw it,

681
00:29:11,870 --> 00:29:14,260
towed the car from Rancho Cucamonga,

682
00:29:14,260 --> 00:29:16,873
back to Vegas so I can
continue to work on it.

683
00:29:18,167 --> 00:29:22,240
But it only cost 360
or 3.6 hundred dollars,

684
00:29:22,240 --> 00:29:24,543
so not great, not terrible, right?

685
00:29:25,560 --> 00:29:27,010
But I learned something cool.

686
00:29:28,000 --> 00:29:29,590
I was able to figure something else out.

687
00:29:29,590 --> 00:29:33,040
So, flew home, started
messing with my bench,

688
00:29:33,040 --> 00:29:35,430
trying to replicate this condition,

689
00:29:35,430 --> 00:29:38,930
dug through my error logs
that I copiously captured.

690
00:29:38,930 --> 00:29:40,680
I was noticing an error
mentioning something

691
00:29:40,680 --> 00:29:42,740
called a firmware.rc.

692
00:29:42,740 --> 00:29:44,940
That file was generating
some type of error.

693
00:29:46,120 --> 00:29:49,600
It turns out the gateway uses
this as a validation check,

694
00:29:49,600 --> 00:29:50,930
and the values enter the calculate

695
00:29:50,930 --> 00:29:52,530
during the upgrade and redeploy.

696
00:29:54,930 --> 00:29:59,140
So, in this file stores
all these CRC values.

697
00:29:59,140 --> 00:30:01,990
So I had seen one other reference to it,

698
00:30:01,990 --> 00:30:04,100
the 10 cent guys had done a previous

699
00:30:04,100 --> 00:30:06,010
Tesla hacking presentation,

700
00:30:06,010 --> 00:30:08,490
where they talked about how
the gateway uses this file.

701
00:30:08,490 --> 00:30:11,200
So I went to the gateway
and said, you know,

702
00:30:11,200 --> 00:30:13,250
instead of gw transfer internal.dat,

703
00:30:13,250 --> 00:30:15,510
gw transfer firmware.rc, and boom,

704
00:30:15,510 --> 00:30:16,920
it gave me the file.

705
00:30:16,920 --> 00:30:18,920
I saw it and it had all these CRC values.

706
00:30:18,920 --> 00:30:21,823
So all I had to do was look up,

707
00:30:24,140 --> 00:30:27,730
there's a map of files for
this specific BMS firmware

708
00:30:27,730 --> 00:30:29,700
that's supposed to be
running for that pack ID

709
00:30:29,700 --> 00:30:31,263
and that version of software,

710
00:30:32,240 --> 00:30:34,400
made sure that version
of software or firmware

711
00:30:34,400 --> 00:30:39,400
was running on the BMS and
then grab it's CRC value.

712
00:30:39,540 --> 00:30:41,760
Replaced the CRC value and firmerware.rc

713
00:30:41,760 --> 00:30:44,603
with the value for the new pack ID.

714
00:30:45,800 --> 00:30:46,870
And if you look here at the end,

715
00:30:46,870 --> 00:30:49,773
you can see there's a
separate one for file CRC.

716
00:30:51,000 --> 00:30:52,963
There's even little values
for the door handles,

717
00:30:52,963 --> 00:30:55,920
there's DRFP and DRRP.

718
00:30:55,920 --> 00:30:58,770
Those are values for the
various door handles.

719
00:30:58,770 --> 00:31:00,870
So, if you upgrade the
door handle new firmware,

720
00:31:00,870 --> 00:31:02,963
firmware.rc has to be changed.

721
00:31:04,440 --> 00:31:05,980
It turns out I had a new door handle

722
00:31:05,980 --> 00:31:07,640
that I actually had to change to,

723
00:31:07,640 --> 00:31:09,030
but it wasn't causing an error

724
00:31:09,030 --> 00:31:11,370
that wasn't causing the
vehicle being able to operate.

725
00:31:11,370 --> 00:31:15,040
So what you do, is you
strip off this CRC line,

726
00:31:15,040 --> 00:31:16,780
calculate the new CRC.

727
00:31:16,780 --> 00:31:18,970
It turns out it's a JAMCRC32.

728
00:31:18,970 --> 00:31:21,370
Someone else figured that out
while they were helping me,

729
00:31:21,370 --> 00:31:22,970
I didn't figure that out myself.

730
00:31:24,690 --> 00:31:26,290
And then put the file back on the gateway.

731
00:31:26,290 --> 00:31:28,870
And after I did that, the car
woke up, the air is cleared,

732
00:31:28,870 --> 00:31:32,170
and that was the problem.

733
00:31:32,170 --> 00:31:35,280
I eventually figured out the
reason for the other failure.

734
00:31:35,280 --> 00:31:36,360
I'm not gonna talk about that,

735
00:31:36,360 --> 00:31:37,900
it's really embarrassing.

736
00:31:37,900 --> 00:31:40,250
It was something I added to
the car that it didn't have,

737
00:31:40,250 --> 00:31:41,750
that it didn't need,

738
00:31:41,750 --> 00:31:45,340
but yeah, hit me up with a beer sometime

739
00:31:45,340 --> 00:31:46,490
and I'll talk about it.

740
00:31:48,500 --> 00:31:51,667
So, here is the power before
and after the upgrade,

741
00:31:51,667 --> 00:31:54,940
I grabbed the CAN bus data before,

742
00:31:54,940 --> 00:31:58,480
before the upgrade, it
had 1,305 amps available.

743
00:31:58,480 --> 00:31:59,660
These are static values again,

744
00:31:59,660 --> 00:32:00,900
these aren't the ones that are available

745
00:32:00,900 --> 00:32:03,640
based on state of charges,
these are hard limit.

746
00:32:03,640 --> 00:32:06,840
After the upgrade it had 1,516 amps,

747
00:32:06,840 --> 00:32:09,550
but it actually shares a
separate CAN bus line 202

748
00:32:09,550 --> 00:32:11,843
instead of 72, the debug one.

749
00:32:13,170 --> 00:32:15,630
That actually has a slightly lower value,

750
00:32:15,630 --> 00:32:16,950
and I have no idea why.

751
00:32:16,950 --> 00:32:19,510
So if someone from Tesla wants to tell me,

752
00:32:19,510 --> 00:32:20,510
I'll keep it to myself.

753
00:32:20,510 --> 00:32:22,810
I'm just really curious why the vehicle

754
00:32:22,810 --> 00:32:24,580
has that extra

755
00:32:25,760 --> 00:32:30,390
16 plus eight, 24 amps of power missing.

756
00:32:30,390 --> 00:32:31,223
Actually,

757
00:32:32,830 --> 00:32:35,210
23.6 amps of power missing.

758
00:32:35,210 --> 00:32:39,190
So if you can tell me, I'm
really curious about that.

759
00:32:39,190 --> 00:32:40,900
It look like there's
any de-rating going on

760
00:32:40,900 --> 00:32:43,210
'cause that value right above it is there,

761
00:32:43,210 --> 00:32:44,390
it's doing inactive zero.

762
00:32:44,390 --> 00:32:47,713
So I'm assuming that
means no, but I'm curious.

763
00:32:49,392 --> 00:32:50,290
Okay.

764
00:32:50,290 --> 00:32:52,780
So, here's where we can
take this project from here

765
00:32:52,780 --> 00:32:53,960
if you wanna help.

766
00:32:53,960 --> 00:32:57,290
The TMS320 is supporting in IDA Pro.

767
00:32:57,290 --> 00:32:59,260
I've actually got some stuff on that

768
00:32:59,260 --> 00:33:01,233
in the Car Hacking Village, deep dive.

769
00:33:02,400 --> 00:33:06,290
Again, arbitrations ID 7E2
and 202 define max current,

770
00:33:06,290 --> 00:33:08,540
there's one more for the other drive,

771
00:33:08,540 --> 00:33:10,120
I can't remember what it is.

772
00:33:10,120 --> 00:33:12,840
So it seems possible to
increase speed behind Ludicrous

773
00:33:12,840 --> 00:33:14,000
and actually do it safely,

774
00:33:14,000 --> 00:33:16,240
'cause it's been done by others.

775
00:33:16,240 --> 00:33:17,650
There's a guy back East who actually

776
00:33:17,650 --> 00:33:21,000
has a rear wheel drive, P85,

777
00:33:21,000 --> 00:33:24,970
that he faked the unit
out and basically created

778
00:33:24,970 --> 00:33:28,400
a CAN bus emulator for
the front drive unit

779
00:33:28,400 --> 00:33:33,400
and bumped the BMS beyond the
limits that it can handle.

780
00:33:34,150 --> 00:33:36,650
So it seems like all you have
to do is go into that firmware

781
00:33:36,650 --> 00:33:38,790
and bump the values up a bit,

782
00:33:38,790 --> 00:33:41,500
and probably even
recalculate the CRC value.

783
00:33:41,500 --> 00:33:42,513
And it looks like,

784
00:33:44,410 --> 00:33:46,120
since we know how to change the gateway,

785
00:33:46,120 --> 00:33:47,910
we can just change that as well.

786
00:33:47,910 --> 00:33:49,810
But it can be dangerous,
if you take this too far,

787
00:33:49,810 --> 00:33:51,150
you're gonna burn up the car.

788
00:33:51,150 --> 00:33:54,830
You're gonna start blowing
the individual self fuses,

789
00:33:54,830 --> 00:33:58,580
but there is some room in there,

790
00:33:58,580 --> 00:34:02,111
it looks like the current amp
drain for Model S batteries

791
00:34:02,111 --> 00:34:05,920
it's only like 6.6C 20 amps per cell.

792
00:34:05,920 --> 00:34:07,410
For those of you worked on RC before,

793
00:34:07,410 --> 00:34:09,770
you know that you can
actually go beyond that

794
00:34:09,770 --> 00:34:11,730
for short periods of time.

795
00:34:11,730 --> 00:34:14,170
But who knows what the IGBTs

796
00:34:14,170 --> 00:34:15,980
within the drive unit can handle?

797
00:34:15,980 --> 00:34:16,813
You blow those,

798
00:34:16,813 --> 00:34:19,760
you're looking at a
really expensive upgrade.

799
00:34:19,760 --> 00:34:22,310
But again, I just wanna
reverse engineer this

800
00:34:22,310 --> 00:34:24,670
for the person who pointed
reverse engineering.

801
00:34:24,670 --> 00:34:27,900
I wanna understand where
these values are stored,

802
00:34:27,900 --> 00:34:30,583
so that others more brave
than I can actually,

803
00:34:30,583 --> 00:34:33,873
turn their cars into true drag monsters,

804
00:34:34,869 --> 00:34:38,150
or put in better batteries,

805
00:34:38,150 --> 00:34:39,790
maybe double up on the number of batteries

806
00:34:39,790 --> 00:34:42,320
and just turn their Model Ss,

807
00:34:42,320 --> 00:34:45,230
and do just things that are
not related everything else

808
00:34:45,230 --> 00:34:46,850
on the truck.

809
00:34:46,850 --> 00:34:48,510
I'd also like to understand
the shunt perimeter

810
00:34:48,510 --> 00:34:49,890
CAU1, CGI1.

811
00:34:49,890 --> 00:34:50,723
I don't know what those are.

812
00:34:50,723 --> 00:34:51,910
I just know they had to change.

813
00:34:51,910 --> 00:34:54,220
So again, come check out
the Car Hacking Village

814
00:34:54,220 --> 00:34:55,283
at deep dive,

815
00:34:56,550 --> 00:35:00,390
and we'll do some more
analysis of the firmware,

816
00:35:00,390 --> 00:35:03,190
watch the show where we can
take a project from here.

817
00:35:03,190 --> 00:35:05,533
So, reference materials,

818
00:35:05,533 --> 00:35:07,100
I had to remove the first link,

819
00:35:07,100 --> 00:35:08,840
so we don't have a copyright.

820
00:35:08,840 --> 00:35:10,090
That was the first thing,

821
00:35:11,350 --> 00:35:13,440
but again, thank you for
this vessel is moving

822
00:35:13,440 --> 00:35:15,240
for inspiring Ludicrous mode.

823
00:35:15,240 --> 00:35:17,330
And then the P85D announcement,

824
00:35:17,330 --> 00:35:19,508
the ludicrous announcement,

825
00:35:19,508 --> 00:35:21,810
electoralboom, if you haven't
checked out his YouTube page,

826
00:35:21,810 --> 00:35:22,920
pretty funny guy,

827
00:35:22,920 --> 00:35:24,360
he actually describes the current shunt

828
00:35:24,360 --> 00:35:26,300
better than I ever could.

829
00:35:26,300 --> 00:35:29,710
The data sheet for the TMS320 on TI site,

830
00:35:29,710 --> 00:35:33,270
very helpful for the IDA
stuff that he's working on.

831
00:35:33,270 --> 00:35:35,740
I like to think in
Intrepid Control Systems,

832
00:35:35,740 --> 00:35:37,923
they made the Vehicle Spy Software,

833
00:35:38,948 --> 00:35:40,880
BitBuster, thank you for
letting me use your lift

834
00:35:40,880 --> 00:35:41,940
in your garage.

835
00:35:41,940 --> 00:35:45,010
It was invaluable in this work.

836
00:35:45,010 --> 00:35:47,200
The guys who helped me
with the toolbox reversing,

837
00:35:47,200 --> 00:35:49,230
you who you are, thank you all,

838
00:35:49,230 --> 00:35:51,500
you're invaluable for all this work.

839
00:35:51,500 --> 00:35:53,350
And then the Tesla security team,

840
00:35:53,350 --> 00:35:55,110
thank you for actually
letting me do this talk,

841
00:35:55,110 --> 00:35:57,610
and being so supportive of this research.

842
00:35:57,610 --> 00:36:00,560
And then of course, all these names,

843
00:36:00,560 --> 00:36:02,660
the Model S, P85D,

844
00:36:02,660 --> 00:36:05,090
those are all registered
trademarks of Tesla.

845
00:36:05,090 --> 00:36:08,383
We are not sponsored by or
associated with Tesla in any way,

846
00:36:10,340 --> 00:36:11,920
and thank you for listening.

847
00:36:11,920 --> 00:36:14,260
We're gonna have a Q&A at
some point later today,

848
00:36:14,260 --> 00:36:16,253
So bring your questions there,

849
00:36:16,253 --> 00:36:17,753
I'll be happy to answer them.

