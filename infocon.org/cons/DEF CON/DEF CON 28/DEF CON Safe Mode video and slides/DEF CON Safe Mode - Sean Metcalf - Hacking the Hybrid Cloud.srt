1
00:00:02,202 --> 00:00:03,040
- Hello, DEF CON.

2
00:00:03,040 --> 00:00:05,700
I speak to you today for my
own version of the bat cave.

3
00:00:05,700 --> 00:00:08,470
The ultimate in social distancing.

4
00:00:08,470 --> 00:00:09,780
This is Hacking the Hybrid Cloud

5
00:00:09,780 --> 00:00:11,750
and I am Sean Metcalf.

6
00:00:11,750 --> 00:00:12,820
I'm the founder Trimarc,

7
00:00:12,820 --> 00:00:15,020
a professional services company
that helps organizations

8
00:00:15,020 --> 00:00:16,680
better secure their Microsoft platform,

9
00:00:16,680 --> 00:00:19,450
including the Microsoft Cloud
and VMWare Infrastructure.

10
00:00:19,450 --> 00:00:21,580
I'm a Microsoft Certified
Master and active directory,

11
00:00:21,580 --> 00:00:23,190
and a Microsoft MVP.

12
00:00:23,190 --> 00:00:24,730
I've spoken at a number of conferences

13
00:00:24,730 --> 00:00:26,820
and I'm excited to be
back speaking at DEF CON,

14
00:00:26,820 --> 00:00:29,580
even if I'm not physically at DEF CON.

15
00:00:29,580 --> 00:00:31,620
Last year I keynoted the
DEF CON cloud village

16
00:00:31,620 --> 00:00:32,453
and three years ago,

17
00:00:32,453 --> 00:00:34,543
gave a talk on hacking
the cloud at DEF CON.

18
00:00:35,660 --> 00:00:38,090
This talk will take a journey
through the hybrid cloud.

19
00:00:38,090 --> 00:00:39,450
Starting with the comparison between

20
00:00:39,450 --> 00:00:40,960
cloud and virtualization.

21
00:00:40,960 --> 00:00:43,620
Discussing how on-prem active
directory to main controllers

22
00:00:43,620 --> 00:00:45,100
can be compromised.

23
00:00:45,100 --> 00:00:47,190
I will also walk through the cloud hosted,

24
00:00:47,190 --> 00:00:49,280
managed active directory,

25
00:00:49,280 --> 00:00:53,700
deployments from AWS, Azure and GCP.

26
00:00:53,700 --> 00:00:55,320
Since this is hybrid talk,

27
00:00:55,320 --> 00:00:57,700
I will walk through some hybrid components

28
00:00:57,700 --> 00:00:59,820
and see how they can be attacked.

29
00:00:59,820 --> 00:01:01,580
I'll touch on cloud administration

30
00:01:01,580 --> 00:01:04,830
and identity access
management, or IAM concepts.

31
00:01:04,830 --> 00:01:06,850
And finally walk through
escalation scenarios for

32
00:01:06,850 --> 00:01:10,090
compromising cloud hosted
on-prem domain controllers,

33
00:01:10,090 --> 00:01:11,193
AWS and Azure.

34
00:01:12,540 --> 00:01:14,910
First, we need to talk
about what hybrid cloud is.

35
00:01:14,910 --> 00:01:16,860
At least in the context of this talk,

36
00:01:16,860 --> 00:01:19,620
there are likely lots of
definitions of hybrid cloud.

37
00:01:19,620 --> 00:01:21,120
To this I'm defining hybrid cloud

38
00:01:21,120 --> 00:01:23,550
as something on-prem and
something in the cloud.

39
00:01:23,550 --> 00:01:25,520
This typically means
infrastructure on-prem

40
00:01:25,520 --> 00:01:26,430
and in the cloud.

41
00:01:26,430 --> 00:01:29,100
More IAAS than strict SAAS.

42
00:01:29,100 --> 00:01:30,480
Now that we've defined hybrid cloud,

43
00:01:30,480 --> 00:01:32,470
let's look at three common scenarios.

44
00:01:32,470 --> 00:01:34,710
The first is the on-prem
active directory environment

45
00:01:34,710 --> 00:01:37,420
with Office 365 SAAS services.

46
00:01:37,420 --> 00:01:39,690
SAAS stands for software as a service.

47
00:01:39,690 --> 00:01:41,600
Many organizations are
leveraging the cloud for

48
00:01:41,600 --> 00:01:42,870
infrastructure as a service,

49
00:01:42,870 --> 00:01:45,630
or IAAS as their cloud data center.

50
00:01:45,630 --> 00:01:48,220
The third scenario here is an
on-prem active directory with

51
00:01:48,220 --> 00:01:51,950
a cloud managed AD as an
additional or resource forest.

52
00:01:51,950 --> 00:01:53,660
Since cloud can be used in many ways,

53
00:01:53,660 --> 00:01:56,060
it's likely that most
organizations use a combination of

54
00:01:56,060 --> 00:01:57,403
these, among others.

55
00:01:58,840 --> 00:02:01,690
This section covers
virtualization top concepts

56
00:02:01,690 --> 00:02:03,410
and controls as foundational information

57
00:02:03,410 --> 00:02:05,793
to better setup and
describe potential attacks.

58
00:02:06,910 --> 00:02:09,230
Conceptually, the cloud is virtualization.

59
00:02:09,230 --> 00:02:11,220
Certainly from an IAAS perspective.

60
00:02:11,220 --> 00:02:13,993
Amazon has used XEN and
it switched to Nitro.

61
00:02:13,993 --> 00:02:17,160
Azure uses a custom
version of Hyper-V (core)

62
00:02:17,160 --> 00:02:19,593
and Google cloud platform uses KVM.

63
00:02:21,940 --> 00:02:23,710
Now there is a cloud fabric that ties

64
00:02:23,710 --> 00:02:26,280
the virtualization elements
together with orchestration,

65
00:02:26,280 --> 00:02:28,503
which is what makes the cloud, the cloud.

66
00:02:29,700 --> 00:02:31,820
So this diagram shows Azure IAAS

67
00:02:31,820 --> 00:02:33,360
with a VM unrelated components.

68
00:02:33,360 --> 00:02:35,493
This is similar to on-prem virtualization.

69
00:02:37,500 --> 00:02:39,280
And Amazon's Nitro is pretty cool.

70
00:02:39,280 --> 00:02:41,080
The nitro hypervisor can take advantage of

71
00:02:41,080 --> 00:02:42,860
Nitro optimized hardware,

72
00:02:42,860 --> 00:02:44,810
including a Nitro security chip.

73
00:02:44,810 --> 00:02:47,660
Any instance created prior to
Nitro is still running XEN.

74
00:02:50,000 --> 00:02:53,880
AWS also has this concept of connectivity

75
00:02:53,880 --> 00:02:56,390
between the AWS managed active directory

76
00:02:56,390 --> 00:02:57,870
that they host themselves

77
00:02:57,870 --> 00:03:01,960
and EC2 which is their IAAS environment,

78
00:03:01,960 --> 00:03:03,440
within the AWS cloud.

79
00:03:03,440 --> 00:03:05,010
And then of course, since they,

80
00:03:05,010 --> 00:03:07,400
you can host windows
servers and windows systems

81
00:03:07,400 --> 00:03:08,360
and other types of systems,

82
00:03:08,360 --> 00:03:09,290
you can also integrate

83
00:03:09,290 --> 00:03:11,670
and connect to other cloud environments.

84
00:03:11,670 --> 00:03:14,553
This demonstrates how cloud
can get complex pretty fast.

85
00:03:16,130 --> 00:03:21,130
And you can run VMWare on-prem
and in AWS and Azure and GCP.

86
00:03:23,645 --> 00:03:25,870
The main controllers control
the keys to the kingdom,

87
00:03:25,870 --> 00:03:27,690
and require special security protections

88
00:03:27,690 --> 00:03:30,720
that are often ignored
on virtual platforms.

89
00:03:30,720 --> 00:03:33,540
Compromising physical domain
controllers boils down

90
00:03:33,540 --> 00:03:35,190
to either gaining physical access

91
00:03:35,190 --> 00:03:38,620
or compromising an outer band
management system like ILO.

92
00:03:38,620 --> 00:03:41,350
ILO hosts a web server on port 2381,

93
00:03:41,350 --> 00:03:43,880
and we can scan for this using PowerShell.

94
00:03:43,880 --> 00:03:47,580
So if ILO is hosted on the same network

95
00:03:47,580 --> 00:03:52,330
as production systems and
clients such as workstations,

96
00:03:52,330 --> 00:03:54,490
we can scan and identify ILO.

97
00:03:54,490 --> 00:03:56,350
ILO has had a number of security issues

98
00:03:56,350 --> 00:03:57,690
with firmware patches available,

99
00:03:57,690 --> 00:03:59,460
but the issue is that pretty much

100
00:03:59,460 --> 00:04:01,663
no one updates firmware
on physical servers.

101
00:04:03,050 --> 00:04:04,500
Airbus security has identified

102
00:04:04,500 --> 00:04:06,610
many of the security issues with ILO,

103
00:04:06,610 --> 00:04:08,820
from accessing memory to an RCE to get

104
00:04:08,820 --> 00:04:10,290
read-write memory access,

105
00:04:10,290 --> 00:04:13,630
to the ability to execute
arbitrary commands via DMA,

106
00:04:13,630 --> 00:04:15,630
to gain host access through ILO,

107
00:04:15,630 --> 00:04:17,550
even when ILO is disabled.

108
00:04:17,550 --> 00:04:20,310
And I have a link at the
bottom that includes a list

109
00:04:20,310 --> 00:04:22,890
even beyond what I have up here.

110
00:04:22,890 --> 00:04:24,390
And a go scanner to discover

111
00:04:24,390 --> 00:04:25,940
vulnerable servers running ILO.

112
00:04:27,640 --> 00:04:29,950
When VMWare is hosting virtual DCS,

113
00:04:29,950 --> 00:04:30,986
which is probably around
95% of the organizations

114
00:04:30,986 --> 00:04:33,993
are better, certainly the larger ones.

115
00:04:34,840 --> 00:04:37,120
There's different ways
that you could compromise

116
00:04:37,120 --> 00:04:40,830
a VMWare to get access to a
virtual domain controller.

117
00:04:40,830 --> 00:04:42,510
This could involve compromising an account

118
00:04:42,510 --> 00:04:44,140
with rights to VMWare.

119
00:04:44,140 --> 00:04:46,760
Often this is a regular user
account that is a member of

120
00:04:46,760 --> 00:04:49,690
an AD group called VMWare admins.

121
00:04:49,690 --> 00:04:51,660
Or we just need to compromise an account

122
00:04:51,660 --> 00:04:55,729
that has VMWare access to, or at least,

123
00:04:55,729 --> 00:05:00,220
to at least one virtual domain
controller, potentially more.

124
00:05:00,220 --> 00:05:02,570
If we can compromise the
system which runs vCenter,

125
00:05:02,570 --> 00:05:05,410
we can ultimately compromise VMWare.

126
00:05:05,410 --> 00:05:08,660
Also every ESXi server has a root account.

127
00:05:08,660 --> 00:05:11,160
And most of the time, every ESXi server

128
00:05:11,160 --> 00:05:12,770
has the same root password.

129
00:05:12,770 --> 00:05:14,790
Which may be the organization
default password,

130
00:05:14,790 --> 00:05:17,340
which could be guessed or
found in a password file.

131
00:05:18,470 --> 00:05:21,880
We can compromise the vCenter system.

132
00:05:21,880 --> 00:05:24,153
We can compromise the vSphere environment.

133
00:05:25,720 --> 00:05:29,110
And the VMWare VIX API has functionality

134
00:05:29,110 --> 00:05:31,930
that allows for direct
access to the guest OSs,

135
00:05:31,930 --> 00:05:33,470
which is used by solutions such as

136
00:05:33,470 --> 00:05:35,800
VMWare site recovery manager.

137
00:05:35,800 --> 00:05:37,700
This requires VMWare tools to be installed

138
00:05:37,700 --> 00:05:39,550
on the guest OS or VM.

139
00:05:39,550 --> 00:05:42,620
The VIX API allows guest operations,

140
00:05:42,620 --> 00:05:44,410
such as starting,
stopping the application,

141
00:05:44,410 --> 00:05:47,680
file directory manipulation,
uploading, downloading files,

142
00:05:47,680 --> 00:05:49,820
all within the guest OS,
without requiring any

143
00:05:49,820 --> 00:05:52,180
network connectivity
to the virtual machine.

144
00:05:52,180 --> 00:05:55,750
This functionality may also
be used by vSphere accounts

145
00:05:55,750 --> 00:05:58,220
with limited privileges
to access a guest OS

146
00:05:58,220 --> 00:06:00,160
without the need to authenticate.

147
00:06:00,160 --> 00:06:02,630
There is a scenario where an
account with vCenter privileges

148
00:06:02,630 --> 00:06:04,230
can use the vSphere API

149
00:06:04,230 --> 00:06:07,380
to interact with the local OS
installation of VMware tools,

150
00:06:07,380 --> 00:06:10,300
to allow a pass through session
for an unprivileged account,

151
00:06:10,300 --> 00:06:12,150
to connect to that virtual machine

152
00:06:12,150 --> 00:06:14,150
and execute local commands.

153
00:06:14,150 --> 00:06:17,610
Since this applies to
virtual domain controllers,

154
00:06:17,610 --> 00:06:19,670
active directory could be
compromised in this manner by

155
00:06:19,670 --> 00:06:23,290
allowing execution of commands
locally on the virtual DC,

156
00:06:23,290 --> 00:06:26,000
where the account's not normally
allowed local log on access

157
00:06:26,000 --> 00:06:27,050
to the DCs.

158
00:06:29,630 --> 00:06:31,910
For Hyper-V, the attacks
are similar to VMWare.

159
00:06:31,910 --> 00:06:33,470
We compromise an account with rights,

160
00:06:33,470 --> 00:06:35,570
or find a way to compromise the server.

161
00:06:35,570 --> 00:06:37,440
Either through a server admin account,

162
00:06:37,440 --> 00:06:39,470
discover the local admin password,

163
00:06:39,470 --> 00:06:42,373
or a modified rule policy to
gain access to the server.

164
00:06:44,920 --> 00:06:47,470
So I decided we take a look
at the so-called big three

165
00:06:47,470 --> 00:06:48,500
cloud hosting providers,

166
00:06:48,500 --> 00:06:50,240
managed active directory environments.

167
00:06:50,240 --> 00:06:52,570
And then focus on what
this means to pentesters

168
00:06:52,570 --> 00:06:53,423
and red teamers.

169
00:06:54,450 --> 00:06:56,520
The managed active directory
environment does not provide

170
00:06:56,520 --> 00:06:58,820
AD admin rights to the AD environment.

171
00:06:58,820 --> 00:07:01,270
So the customer will never
have domain admin rights

172
00:07:01,270 --> 00:07:03,450
or even domain controller access.

173
00:07:03,450 --> 00:07:06,310
The cloud provider controls
AD infrastructure management

174
00:07:06,310 --> 00:07:08,090
and delegates rights to OUs

175
00:07:08,090 --> 00:07:10,493
and AD components to the customer.

176
00:07:11,570 --> 00:07:14,050
Let's start with Amazon
AWS directory services

177
00:07:14,050 --> 00:07:15,910
for Microsoft active directory.

178
00:07:15,910 --> 00:07:17,210
That's quite the mouthful.

179
00:07:18,800 --> 00:07:22,690
The AWS managed AD has an
AWS delegated groups OU

180
00:07:22,690 --> 00:07:24,510
that contains the delegation groups,

181
00:07:24,510 --> 00:07:27,890
which the customers provide at
membership and an access to.

182
00:07:27,890 --> 00:07:30,750
The AWS reserved OU is
controlled exclusively

183
00:07:30,750 --> 00:07:32,690
by the AWS system.

184
00:07:32,690 --> 00:07:33,870
There is a customer OU

185
00:07:33,870 --> 00:07:36,310
created in the managed AD
domain that is typically named

186
00:07:36,310 --> 00:07:39,730
after the AD sub domain or
the first part of the fully

187
00:07:39,730 --> 00:07:44,130
qualified domain name, or
the domains net bios name.

188
00:07:44,130 --> 00:07:47,853
This customer OU contains
OUs for computers and users.

189
00:07:49,020 --> 00:07:51,540
AWS managed AD spins up
two domain controllers,

190
00:07:51,540 --> 00:07:53,280
which are in different network segments,

191
00:07:53,280 --> 00:07:55,540
but in the same active directory site.

192
00:07:55,540 --> 00:07:57,640
The default domain admin account retains

193
00:07:57,640 --> 00:07:59,510
the default name, administrator.

194
00:07:59,510 --> 00:08:02,400
Though this has moved
to the AWS reserved OU.

195
00:08:02,400 --> 00:08:05,200
When a customer creates an AWS managed AD,

196
00:08:05,200 --> 00:08:08,020
their first account in the AD
environment is called admin,

197
00:08:08,020 --> 00:08:10,750
and is granted full delegated
rights to the AD environment

198
00:08:10,750 --> 00:08:12,090
for that customer,

199
00:08:12,090 --> 00:08:13,710
not to the domain controllers,

200
00:08:13,710 --> 00:08:17,613
or AD admin rights to the full AD.

201
00:08:19,000 --> 00:08:21,380
The domain password is default,
still seven characters,

202
00:08:21,380 --> 00:08:24,560
but there are five AWS created
fine-grain password policies,

203
00:08:24,560 --> 00:08:27,130
which are delegated to
the customer to modify.

204
00:08:27,130 --> 00:08:28,240
Based on the group policy

205
00:08:28,240 --> 00:08:29,520
linked to the domain controllers OU,

206
00:08:29,520 --> 00:08:31,880
I was able to identify a
pretty decent audit policy.

207
00:08:31,880 --> 00:08:33,830
There was missing Kerberos auditing,

208
00:08:33,830 --> 00:08:36,580
which means Kerberos auditing
activity would be missed.

209
00:08:38,040 --> 00:08:40,390
The first customer account
admin is created with the

210
00:08:40,390 --> 00:08:43,390
description that notes, the
customer OU distinguished name.

211
00:08:43,390 --> 00:08:45,730
So it's very nice that they
provide this description.

212
00:08:45,730 --> 00:08:47,640
So that way you can
quickly and easily identify

213
00:08:47,640 --> 00:08:48,823
where this OU is.

214
00:08:50,430 --> 00:08:52,047
There are several delegation groups in the

215
00:08:52,047 --> 00:08:53,800
AWS managed AD environment.

216
00:08:53,800 --> 00:08:55,230
All these are named with prefix,

217
00:08:55,230 --> 00:08:57,090
AWS delegated and are contained

218
00:08:57,090 --> 00:08:59,880
in the AWS delegated groups OU.

219
00:08:59,880 --> 00:09:02,660
The AWS delegate administrators
group is the primary

220
00:09:02,660 --> 00:09:04,370
customer admin group.

221
00:09:04,370 --> 00:09:06,520
There are also delegation
groups for a managed service

222
00:09:06,520 --> 00:09:09,320
counts, adding workstations to
the main Kerberos delegation,

223
00:09:09,320 --> 00:09:11,113
DNS and server administration.

224
00:09:13,090 --> 00:09:16,240
Let's take a look at Azure
active directory domain services.

225
00:09:16,240 --> 00:09:19,070
While Azure active directory
is not exactly at a directory,

226
00:09:19,070 --> 00:09:21,063
since it's a cloud
directory with no Kerberos

227
00:09:21,063 --> 00:09:24,160
or NTLM authentication
group policy or LDAP,

228
00:09:24,160 --> 00:09:26,620
Azure AD domain services
is active directory,

229
00:09:26,620 --> 00:09:28,730
just like you would have
on a corporate network

230
00:09:28,730 --> 00:09:30,833
and as Microsoft managed active directory.

231
00:09:32,900 --> 00:09:35,780
So this environment Azure ADDS,

232
00:09:35,780 --> 00:09:38,040
has several top level
OUs that are created.

233
00:09:38,040 --> 00:09:40,350
These are prefixed with AADD

234
00:09:40,350 --> 00:09:45,350
and the AADDC computers and ADDC users.

235
00:09:45,860 --> 00:09:47,510
OUs are the primary customer OUs.

236
00:09:48,930 --> 00:09:52,480
The Azure ADDS domain controllers
are in the same network.

237
00:09:52,480 --> 00:09:55,120
And at least in this
instance that I created,

238
00:09:55,120 --> 00:09:58,010
had sequential IPS, dot four and dot five.

239
00:09:58,010 --> 00:10:00,380
The default domain admin account is called

240
00:10:00,380 --> 00:10:05,340
DCAAS admin and remains
in the default users OU.

241
00:10:05,340 --> 00:10:07,080
There is one fine-grained password policy

242
00:10:07,080 --> 00:10:08,020
that's pre-created,

243
00:10:08,020 --> 00:10:10,750
I'm not gonna try to
read the name as it is.

244
00:10:10,750 --> 00:10:13,810
It's a bit tough with all the AA and DDS

245
00:10:13,810 --> 00:10:15,780
by the customer's delegated modify rights

246
00:10:15,780 --> 00:10:18,120
to this fine-grain password policy object.

247
00:10:18,120 --> 00:10:20,450
I can't see any auditing
configuration set in GPO.

248
00:10:20,450 --> 00:10:22,860
So I have to assume that they
are set via local policy,

249
00:10:22,860 --> 00:10:25,410
which I can't see without
domain controller access.

250
00:10:28,070 --> 00:10:31,010
Azure AD DS has a few delegation groups,

251
00:10:31,010 --> 00:10:32,580
which are prefixed with AADDC

252
00:10:34,650 --> 00:10:38,120
and are in the AADDC users OU.

253
00:10:38,120 --> 00:10:42,570
The primary customer group
is AADDC administrators,

254
00:10:42,570 --> 00:10:44,820
which has delegated
full control to many OUs

255
00:10:44,820 --> 00:10:46,220
and AD components.

256
00:10:46,220 --> 00:10:48,370
I'm pretty sure when Microsoft
came up with the names for

257
00:10:48,370 --> 00:10:50,710
these groups, they were not thinking about

258
00:10:50,710 --> 00:10:53,260
having to say this out loud in a row.

259
00:10:53,260 --> 00:10:54,963
So thank you Microsoft for that.

260
00:10:56,310 --> 00:10:58,680
Moving onto the third and
final managed AD environment

261
00:10:58,680 --> 00:11:00,390
that I reviewed recently,

262
00:11:00,390 --> 00:11:03,340
this is the Google cloud platform
managed active directory.

263
00:11:07,340 --> 00:11:09,350
It's interesting to note
that the GCP managed AD

264
00:11:09,350 --> 00:11:12,020
seems to cost about
twice what the Amazon AWS

265
00:11:12,020 --> 00:11:15,050
and Microsoft Azure managed
AD environments cost

266
00:11:15,050 --> 00:11:17,163
'cause they're about a
hundred dollars each.

267
00:11:18,900 --> 00:11:21,750
The GCP managed AD environment
has a single root OU

268
00:11:21,750 --> 00:11:23,340
for the customer call cloud,

269
00:11:23,340 --> 00:11:25,670
with a single child OU called computers.

270
00:11:25,670 --> 00:11:29,133
The cloud service objects OU
contains the delegation groups.

271
00:11:30,450 --> 00:11:33,330
GCP manager AD is different in that,

272
00:11:33,330 --> 00:11:35,450
from the others that I
just talked about in that,

273
00:11:35,450 --> 00:11:38,490
domain controllers are
running windows server 2019.

274
00:11:38,490 --> 00:11:40,740
Though the active directory
forest functional level

275
00:11:40,740 --> 00:11:43,250
is still set to 2012 R2.

276
00:11:43,250 --> 00:11:45,080
Also the active directory recycle bin,

277
00:11:45,080 --> 00:11:47,470
which enables rapid unduly
capability is not enabled,

278
00:11:47,470 --> 00:11:48,850
which is interesting.

279
00:11:48,850 --> 00:11:51,120
The default domain administrator account

280
00:11:51,120 --> 00:11:54,330
keeps the default name
administrator and it's disabled.

281
00:11:54,330 --> 00:11:57,800
So GCP spins up a second
domain admin account

282
00:11:57,800 --> 00:11:59,970
called cloud SVC admin,

283
00:11:59,970 --> 00:12:02,640
and this account is enabled.

284
00:12:02,640 --> 00:12:04,720
The domain password policy is default

285
00:12:04,720 --> 00:12:07,660
and the customer can create
fine-grained password policies.

286
00:12:07,660 --> 00:12:08,493
And with this,

287
00:12:08,493 --> 00:12:10,760
the DC event auditing is not configured

288
00:12:10,760 --> 00:12:11,880
through group policy, so again,

289
00:12:11,880 --> 00:12:14,130
I couldn't identify how
it may be configured.

290
00:12:15,150 --> 00:12:18,170
GCP managed AD has
several delegation groups.

291
00:12:18,170 --> 00:12:19,840
They start with cloud service

292
00:12:19,840 --> 00:12:22,790
and these are stored in the
cloud service objects OU.

293
00:12:22,790 --> 00:12:23,623
The cloud service,

294
00:12:23,623 --> 00:12:25,990
all administrators and the
cloud service administrators

295
00:12:25,990 --> 00:12:28,280
are the primary customer admin groups.

296
00:12:28,280 --> 00:12:30,800
GCP delegation groups
include computer admins,

297
00:12:30,800 --> 00:12:33,163
managed service count admins and others.

298
00:12:34,150 --> 00:12:36,360
The slide captures some of
the common themes of the three

299
00:12:36,360 --> 00:12:39,070
managed AD environments I reviewed,

300
00:12:39,070 --> 00:12:41,450
I use the version of the Trimarc
active directory assessment

301
00:12:41,450 --> 00:12:44,170
tool that I wrote to perform
the review of the different AD

302
00:12:44,170 --> 00:12:46,060
environments, which
enabled me to capture data

303
00:12:46,060 --> 00:12:47,310
for all three and identify

304
00:12:47,310 --> 00:12:49,800
the key security features and delegation

305
00:12:49,800 --> 00:12:51,800
and about a day to put this talk together,

306
00:12:51,800 --> 00:12:53,100
or at least this part of it.

307
00:12:53,100 --> 00:12:55,340
The bottom of the slide to
provide a link to an active

308
00:12:55,340 --> 00:12:57,270
directory, security
review PowerShell script

309
00:12:57,270 --> 00:12:59,680
that I wrote and published in June.

310
00:12:59,680 --> 00:13:01,810
The link points to the
article where I highlight

311
00:13:01,810 --> 00:13:05,010
a key AD security items to
check in what to check for.

312
00:13:05,010 --> 00:13:06,750
And the PowerShell script simplifies

313
00:13:06,750 --> 00:13:08,360
the data collection part.

314
00:13:08,360 --> 00:13:10,770
So analysis is much simpler.

315
00:13:10,770 --> 00:13:11,880
So it's good to check that out.

316
00:13:11,880 --> 00:13:14,420
It'd be helpful if you're
looking at an environment

317
00:13:14,420 --> 00:13:15,253
such as this.

318
00:13:17,190 --> 00:13:20,170
So since the customer does not
actually have AD admin rights

319
00:13:20,170 --> 00:13:21,420
to a managed AD environment,

320
00:13:21,420 --> 00:13:24,750
there's not much point in
attempting to escalate to DA.

321
00:13:24,750 --> 00:13:27,500
Better to identify which
managed AD environment it is

322
00:13:27,500 --> 00:13:29,830
and numerate the managed
AD privilege groups,

323
00:13:29,830 --> 00:13:32,780
to determine which accounts
are highly privileged.

324
00:13:32,780 --> 00:13:34,070
Interesting note about Azure

325
00:13:34,070 --> 00:13:36,090
active directory domain services,

326
00:13:36,090 --> 00:13:38,920
Microsoft's managed AD.

327
00:13:38,920 --> 00:13:41,350
It can be managed by Azure AD accounts.

328
00:13:41,350 --> 00:13:43,900
And these are synchronized into Azure ADDS

329
00:13:43,900 --> 00:13:46,980
or even by on-prem AD
accounts that are synced in

330
00:13:46,980 --> 00:13:49,700
from the on-prem AD environment.

331
00:13:49,700 --> 00:13:52,520
And these are synced using
the on-prem Azure AD connect

332
00:13:52,520 --> 00:13:57,520
system through Azure AD to
Azure AD domain services.

333
00:13:57,630 --> 00:13:59,410
And if Password Hash Sync is enabled,

334
00:13:59,410 --> 00:14:00,243
which it usually is.

335
00:14:00,243 --> 00:14:03,960
Then the on-prem AD account
password hash is included.

336
00:14:03,960 --> 00:14:07,350
Normally Password Hash
Sync does a hash of a hash,

337
00:14:07,350 --> 00:14:11,300
but when syncing through to
Azure AD domain services,

338
00:14:11,300 --> 00:14:13,800
that original AD Password Hash

339
00:14:13,800 --> 00:14:16,300
is retained and synchronized.

340
00:14:16,300 --> 00:14:17,530
So that way it can,

341
00:14:17,530 --> 00:14:18,920
the password can actually be used in

342
00:14:18,920 --> 00:14:21,213
Azure active directory domain services.

343
00:14:23,870 --> 00:14:25,580
So there are several cloud components

344
00:14:25,580 --> 00:14:27,290
that connect on-prem to cloud.

345
00:14:27,290 --> 00:14:30,606
This connectivity has some
very interesting implications.

346
00:14:30,606 --> 00:14:33,240
Amazon's AD connectors effectively,

347
00:14:33,240 --> 00:14:35,593
and on-prem AD authentication proxy.

348
00:14:36,470 --> 00:14:39,110
AD connector is designed to
provide an easy way to establish

349
00:14:39,110 --> 00:14:40,370
a trusted relationship between

350
00:14:40,370 --> 00:14:42,450
your active directory and AWS.

351
00:14:42,450 --> 00:14:44,240
So when AD connector is configured,

352
00:14:44,240 --> 00:14:47,480
it enables the ability to
sign into AWS applications

353
00:14:47,480 --> 00:14:49,380
with on-prem AD credentials.

354
00:14:49,380 --> 00:14:54,110
Join AWS windows instances
to the on-prem AD domain

355
00:14:54,110 --> 00:14:57,740
and provides federated sign
into the AWS management console

356
00:14:57,740 --> 00:15:02,740
by mapping these on-prem
identities to AWS IAM roles.

357
00:15:04,830 --> 00:15:07,580
And AD connector can't be
used with custom applications

358
00:15:07,580 --> 00:15:10,030
since it's just for AWS.

359
00:15:10,030 --> 00:15:12,250
Basically a user opens
the secure custom sign

360
00:15:12,250 --> 00:15:14,900
and page, supplies their act
direct username and password.

361
00:15:14,900 --> 00:15:16,970
This authentication requests sent over SSL

362
00:15:16,970 --> 00:15:18,280
to the AD connector.

363
00:15:18,280 --> 00:15:21,070
And then the AD connector
performs LDAP authentication to

364
00:15:21,070 --> 00:15:22,420
active directory.

365
00:15:22,420 --> 00:15:25,950
The interesting part
happens at this point.

366
00:15:25,950 --> 00:15:27,810
Once the user has been authenticated,

367
00:15:27,810 --> 00:15:30,730
the AD connector calls
the STS assume role method

368
00:15:30,730 --> 00:15:33,860
to get temporary security
credentials for that user.

369
00:15:33,860 --> 00:15:35,640
Using those temporary
security credentials,

370
00:15:35,640 --> 00:15:36,680
AD connector constructs,

371
00:15:36,680 --> 00:15:40,910
assigning URL that users
use to access the console.

372
00:15:40,910 --> 00:15:42,610
And if a user's mapped to multiple roles,

373
00:15:42,610 --> 00:15:45,550
the user will be presented with
a choice at the sign in time

374
00:15:45,550 --> 00:15:47,220
as to which role they want to assume.

375
00:15:47,220 --> 00:15:48,980
These are sessions valid for an hour,

376
00:15:48,980 --> 00:15:51,770
which is pretty standard for cloud apps.

377
00:15:51,770 --> 00:15:55,270
Since the AD connector
environment is hosted in AWS,

378
00:15:55,270 --> 00:15:57,160
this would need to be targeted
in order to potentially

379
00:15:57,160 --> 00:16:02,120
impersonate the users and
be able to leverage that STS

380
00:16:02,120 --> 00:16:03,103
assume role method.

381
00:16:05,650 --> 00:16:08,660
Microsoft's password
authentication is similar

382
00:16:08,660 --> 00:16:10,970
because with pass Microsoft
pass through authentication

383
00:16:10,970 --> 00:16:13,680
or PTA, it provides users
the ability to authenticate

384
00:16:13,680 --> 00:16:15,570
to Azure active directory,

385
00:16:15,570 --> 00:16:17,890
which has passed through to the on-prem AD

386
00:16:17,890 --> 00:16:21,990
and validated with a
validated in Azure AD,

387
00:16:21,990 --> 00:16:24,970
by getting the status
back from the PTA agent

388
00:16:24,970 --> 00:16:26,320
in the on-prem environment.

389
00:16:27,213 --> 00:16:29,950
PTA is enabled via Azure AD connect.

390
00:16:29,950 --> 00:16:33,280
The users use the same passwords
assign into both on-prem

391
00:16:33,280 --> 00:16:35,290
and cloud based applications.

392
00:16:35,290 --> 00:16:38,330
The communication between an
agent Azure AD is secured using

393
00:16:38,330 --> 00:16:40,140
certificate based authentication,

394
00:16:40,140 --> 00:16:42,420
and these certificates are
automatically renewed every few

395
00:16:42,420 --> 00:16:43,703
months by Azure AD.

396
00:16:44,800 --> 00:16:46,030
I couldn't figure out what happens if

397
00:16:46,030 --> 00:16:47,300
you get one of these certificates,

398
00:16:47,300 --> 00:16:49,150
but that could be pretty interesting.

399
00:16:50,740 --> 00:16:53,550
But ultimately this
supports a user sign in,

400
00:16:53,550 --> 00:16:55,640
into all web browser based applications

401
00:16:55,640 --> 00:16:57,810
and into Microsoft office
client applications

402
00:16:57,810 --> 00:16:59,360
that use modern authentication.

403
00:17:02,920 --> 00:17:06,120
Adam Chester, AKA, XPN
has done a great blog post

404
00:17:06,120 --> 00:17:09,550
on how to leverage a compromised
Azure AD connect server,

405
00:17:09,550 --> 00:17:12,450
with PTA enabled in
order to gather usernames

406
00:17:12,450 --> 00:17:13,960
and clear text passwords,

407
00:17:13,960 --> 00:17:16,840
that were used to authenticate via PTA.

408
00:17:16,840 --> 00:17:19,110
So since password
authentication is managed

409
00:17:19,110 --> 00:17:21,800
by Azure AD connect, you
can compromise that server.

410
00:17:21,800 --> 00:17:25,410
And then during this
authentication process,

411
00:17:25,410 --> 00:17:27,520
Azure AD sends the clear text password,

412
00:17:27,520 --> 00:17:29,780
not hashed to authenticate the user.

413
00:17:29,780 --> 00:17:33,220
So it's sent to Azure AD
connect, Azure AD connect,

414
00:17:33,220 --> 00:17:36,910
PTA component is going to
check and validate the username

415
00:17:36,910 --> 00:17:38,690
and password with active directory,

416
00:17:38,690 --> 00:17:42,250
then send back the status
to Azure AD for that.

417
00:17:42,250 --> 00:17:44,590
So Adam identified that you could,

418
00:17:44,590 --> 00:17:46,860
inject a DLL to compromise the credentials

419
00:17:46,860 --> 00:17:48,130
that were used for PTA,

420
00:17:48,130 --> 00:17:50,710
and then have those credentials

421
00:17:50,710 --> 00:17:52,393
for anyone that was using PTA.

422
00:17:53,992 --> 00:17:54,890
As your active directory,

423
00:17:54,890 --> 00:17:58,530
seamless single sign on
or Azure AD seamless SSO,

424
00:17:58,530 --> 00:18:00,730
automatically signs users
in when they are on their

425
00:18:00,730 --> 00:18:04,110
corporate devices, connected
to the corporate network.

426
00:18:04,110 --> 00:18:06,220
This graphic is interesting and nice,

427
00:18:06,220 --> 00:18:09,330
but I prefer this one because
it has a lot more of the flow.

428
00:18:09,330 --> 00:18:11,720
But basically what ends
up happening is that

429
00:18:11,720 --> 00:18:12,993
users don't need to
type in their passwords

430
00:18:12,993 --> 00:18:15,190
to sign into Azure AD,

431
00:18:15,190 --> 00:18:17,320
or even really type in their usernames.

432
00:18:17,320 --> 00:18:20,400
It provides a users easy
access to their cloud based

433
00:18:20,400 --> 00:18:22,290
applications without any additional

434
00:18:22,290 --> 00:18:24,460
on-prem components like federation.

435
00:18:24,460 --> 00:18:26,610
This is done by converting
the on-prem authentication

436
00:18:26,610 --> 00:18:28,050
to cloud authentication,

437
00:18:28,050 --> 00:18:30,760
through a computer account
and active directory.

438
00:18:30,760 --> 00:18:34,090
So Michael Grafnetter from DS internals,

439
00:18:34,090 --> 00:18:36,690
posted this article a few years ago,

440
00:18:36,690 --> 00:18:37,920
or a couple of years ago,

441
00:18:37,920 --> 00:18:41,890
where he was talking
about how the Azure AD

442
00:18:41,890 --> 00:18:43,590
has a publicly available endpoint

443
00:18:43,590 --> 00:18:44,990
that accepts these Kerberos tickets

444
00:18:44,990 --> 00:18:47,730
and translate some into
SAML and JWT tokens

445
00:18:47,730 --> 00:18:49,883
that can be leveraged for cloud apps.

446
00:18:51,360 --> 00:18:54,060
Effectively if you can
compromise the Azure AD seamless

447
00:18:54,060 --> 00:18:55,707
single sign on computer account,

448
00:18:55,707 --> 00:18:57,480
the password hash associated with it,

449
00:18:57,480 --> 00:19:02,080
the computer account is
called AZUREADSSOACC,

450
00:19:02,080 --> 00:19:04,990
and can be identified it's
in the computer's container.

451
00:19:04,990 --> 00:19:06,260
If you're able to compromise this

452
00:19:06,260 --> 00:19:07,330
and get this password hash,

453
00:19:07,330 --> 00:19:08,700
you can generate a silver ticket

454
00:19:08,700 --> 00:19:11,430
for any user you want to impersonate.

455
00:19:11,430 --> 00:19:14,420
And the service they use in
the server ticket is gonna be

456
00:19:14,420 --> 00:19:18,250
aadg.windows.net.nsatc.net.

457
00:19:18,250 --> 00:19:21,850
You inject this ticket into
the local Kerberos cash,

458
00:19:21,850 --> 00:19:24,310
and as your AD seamless single sign on,

459
00:19:24,310 --> 00:19:27,400
the computer account password
doesn't actually change.

460
00:19:27,400 --> 00:19:30,150
Microsoft does recommend that
it gets rolled and changed

461
00:19:30,150 --> 00:19:31,730
at least every 30 days.

462
00:19:31,730 --> 00:19:35,340
What's interesting is because
it's a computer account,

463
00:19:35,340 --> 00:19:38,860
there is no actual computer
that is behind the scenes

464
00:19:38,860 --> 00:19:40,940
that is using that computer account

465
00:19:40,940 --> 00:19:43,390
other than the Azure AD connect client.

466
00:19:43,390 --> 00:19:46,870
So normally a computer
in an active directory

467
00:19:46,870 --> 00:19:48,780
would update the computer account password

468
00:19:48,780 --> 00:19:50,430
that's associated with that computer.

469
00:19:50,430 --> 00:19:52,400
Since there isn't really a computer here,

470
00:19:52,400 --> 00:19:54,170
that password isn't getting changed.

471
00:19:54,170 --> 00:19:55,110
So maybe in the future,

472
00:19:55,110 --> 00:19:57,850
Microsoft will code into Azure
ID connect to automatically

473
00:19:57,850 --> 00:20:00,533
update the computer
account password for this.

474
00:20:02,410 --> 00:20:04,660
Three years ago at DEF
CON 25 in Las Vegas,

475
00:20:04,660 --> 00:20:07,050
I co-presented a talk
called hacking the cloud.

476
00:20:07,050 --> 00:20:08,740
I talked about how Azure AD

477
00:20:08,740 --> 00:20:10,660
connects password hash sync permissions,

478
00:20:10,660 --> 00:20:13,060
provided Mimikatz DCSync rights.

479
00:20:13,060 --> 00:20:16,940
And that the author of Mimikatz
DCSync, Vincent Le Toux,

480
00:20:16,940 --> 00:20:19,570
was inspired by password
hash sync to create DCSync

481
00:20:19,570 --> 00:20:21,770
because PHS requests password hashes

482
00:20:21,770 --> 00:20:24,433
for sync users on a regular basis.

483
00:20:25,940 --> 00:20:27,070
We can scan active directory,

484
00:20:27,070 --> 00:20:29,180
domain permissions looking for potential

485
00:20:29,180 --> 00:20:32,010
Azure AD connect service counts,

486
00:20:32,010 --> 00:20:35,050
or if the Azure AD connect install,

487
00:20:35,050 --> 00:20:37,380
will use the express install option,

488
00:20:37,380 --> 00:20:39,010
then there's a helpful
description on the account,

489
00:20:39,010 --> 00:20:42,460
noting on which server Azure
AD connector's installed.

490
00:20:42,460 --> 00:20:44,490
We can then check in active
directory to figure out

491
00:20:44,490 --> 00:20:46,317
where that computer is stored.

492
00:20:46,317 --> 00:20:48,730
And very often this is in the servers OU

493
00:20:48,730 --> 00:20:50,580
or somewhere similar.

494
00:20:50,580 --> 00:20:52,012
Once we know the server name

495
00:20:52,012 --> 00:20:54,150
and we can check for,

496
00:20:54,150 --> 00:20:56,690
and its location, the
actual distinguished name

497
00:20:56,690 --> 00:20:58,240
of the OU that it's in.

498
00:20:58,240 --> 00:20:59,960
We can check AD for any group policies

499
00:20:59,960 --> 00:21:03,020
that add AD groups to the
local administrators group.

500
00:21:03,020 --> 00:21:04,790
Compromising any account that is a member

501
00:21:04,790 --> 00:21:06,080
of the local administrators group

502
00:21:06,080 --> 00:21:07,660
on the Azure AD connect server

503
00:21:07,660 --> 00:21:09,610
would result in compromise of

504
00:21:09,610 --> 00:21:10,860
the Azure AD connect server

505
00:21:10,860 --> 00:21:12,480
and ultimately active directory,

506
00:21:12,480 --> 00:21:17,480
assuming that it has a Password
Hash Synchronization rights

507
00:21:17,560 --> 00:21:19,083
configured in the environment.

508
00:21:20,160 --> 00:21:21,900
Also, if we can modify a group policy,

509
00:21:21,900 --> 00:21:24,530
the links to the Azure
AD connect server OU

510
00:21:24,530 --> 00:21:27,080
then we can compromise the
server that way as well.

511
00:21:28,630 --> 00:21:30,520
When talking about cloud environments,

512
00:21:30,520 --> 00:21:33,470
it's important to mention how
administration has performed.

513
00:21:33,470 --> 00:21:35,130
This is commonly referred to as identity

514
00:21:35,130 --> 00:21:36,703
access management or IAM.

515
00:21:37,830 --> 00:21:40,330
So we've gone from groups
in our on-prem environment

516
00:21:40,330 --> 00:21:42,270
with active directory to roles,

517
00:21:42,270 --> 00:21:43,830
which is effectively these rights

518
00:21:43,830 --> 00:21:45,730
that are packaged together.

519
00:21:45,730 --> 00:21:48,550
Azure and AWS and GCP
have their own methods

520
00:21:48,550 --> 00:21:51,850
but a lot of the concepts
are effectively the same.

521
00:21:51,850 --> 00:21:54,000
Azure IAM uses the concept of an owner,

522
00:21:54,000 --> 00:21:55,553
a contributor and a reader.

523
00:21:57,170 --> 00:21:58,560
The owner has full access.

524
00:21:58,560 --> 00:22:01,350
The contributor has ability
to create and manage the

525
00:22:01,350 --> 00:22:03,400
resources, but can't
grant access to others.

526
00:22:03,400 --> 00:22:05,543
And then a reader can just view things.

527
00:22:06,820 --> 00:22:10,250
And so Azure has the tenant,

528
00:22:10,250 --> 00:22:14,080
which is the top level container
of the Azure environment.

529
00:22:14,080 --> 00:22:15,873
And this contains subscriptions.

530
00:22:17,700 --> 00:22:20,560
The tenant admins are
effectively the owner role

531
00:22:20,560 --> 00:22:22,060
on the tenant and subscription admin

532
00:22:22,060 --> 00:22:25,013
would be effectively the owner
role on the subscription.

533
00:22:28,420 --> 00:22:31,550
What's interesting is that
Microsoft notes that Azure roles

534
00:22:31,550 --> 00:22:36,090
and Azure AD roles are
separate and different mostly.

535
00:22:36,090 --> 00:22:37,890
And I'll cover that in a little bit.

536
00:22:41,640 --> 00:22:44,940
AWS has a root account often
called or referred to as a

537
00:22:44,940 --> 00:22:47,650
payer account, which
is the primary account,

538
00:22:47,650 --> 00:22:49,800
though it really shouldn't
be used regularly.

539
00:22:49,800 --> 00:22:51,450
Then there are account admins.

540
00:22:51,450 --> 00:22:55,150
So in AWS, the account is
similar to the Azure tenant.

541
00:22:55,150 --> 00:22:56,620
It's the top level container

542
00:22:56,620 --> 00:22:59,140
for the environment for that customer,

543
00:22:59,140 --> 00:23:01,970
the account admins have full
control over the account.

544
00:23:01,970 --> 00:23:04,840
If an account is a root
account and an admin account,

545
00:23:04,840 --> 00:23:08,020
then that account has full
organizational control.

546
00:23:08,020 --> 00:23:10,390
It's important to note here
that any over scope roles

547
00:23:10,390 --> 00:23:12,870
provide escalation capability.

548
00:23:12,870 --> 00:23:14,220
And Rhino Security Labs has an

549
00:23:14,220 --> 00:23:17,200
extensive article covering 21 AWS,

550
00:23:17,200 --> 00:23:19,060
IAM privileged escalation methods,

551
00:23:19,060 --> 00:23:21,970
which allow an attacker to
escalate from a compromised,

552
00:23:21,970 --> 00:23:24,700
low privilege account to
full admin privileges.

553
00:23:24,700 --> 00:23:26,040
So I've listed a bunch of them here.

554
00:23:26,040 --> 00:23:27,930
I apologize for the small texts,

555
00:23:27,930 --> 00:23:31,300
but really what you wanna do
is you wanna read the blog

556
00:23:31,300 --> 00:23:32,930
article that they wrote,

557
00:23:32,930 --> 00:23:35,140
which is linked to the
bottom and in the slides.

558
00:23:35,140 --> 00:23:36,490
They also released the scanning tool,

559
00:23:36,490 --> 00:23:40,013
which is on GitHub to identify
these vulnerabilities in

560
00:23:40,013 --> 00:23:42,810
AWS user account.

561
00:23:42,810 --> 00:23:43,860
And if you have an account with,

562
00:23:43,860 --> 00:23:44,881
IAM read access for all OUs,

563
00:23:44,881 --> 00:23:47,610
the script can be run against
every user in the account

564
00:23:47,610 --> 00:23:49,850
to detect these
vulnerabilities account wide.

565
00:23:49,850 --> 00:23:52,390
So if you're asked to pentest AWS,

566
00:23:52,390 --> 00:23:56,570
or you're providing security
consulting services around AWS,

567
00:23:56,570 --> 00:23:58,210
or even you're working in an organization

568
00:23:58,210 --> 00:23:59,290
and you're moving to AWS

569
00:23:59,290 --> 00:24:01,250
and you have some of the
IAM roles configured,

570
00:24:01,250 --> 00:24:02,580
you definitely wanna scan them

571
00:24:02,580 --> 00:24:04,543
for potential escalation methods.

572
00:24:06,240 --> 00:24:09,540
API keys, I'm just gonna
cover this really quickly.

573
00:24:09,540 --> 00:24:11,560
They provide permanent
access to an environment

574
00:24:11,560 --> 00:24:13,520
often with extensive privileges.

575
00:24:13,520 --> 00:24:16,000
These keys can often
bypass a typical username

576
00:24:16,000 --> 00:24:18,200
and password used to
authenticate as an account,

577
00:24:18,200 --> 00:24:19,900
if it's configured as such.

578
00:24:21,990 --> 00:24:23,650
Well, I've covered a number of scenarios

579
00:24:23,650 --> 00:24:26,830
on how to attack on-prem
and hybrid cloud components.

580
00:24:26,830 --> 00:24:30,350
Let's focus on on-prem active
directory domain controllers

581
00:24:30,350 --> 00:24:34,090
hosted in cloud
infrastructure as a service.

582
00:24:34,090 --> 00:24:36,393
So first up is Amazon AWS EC2.

583
00:24:38,640 --> 00:24:41,940
Many organizations,
leverage Amazon, AWS EC2

584
00:24:41,940 --> 00:24:44,460
or IAAS, as a cloud data center.

585
00:24:44,460 --> 00:24:49,103
Some of these hosts, on-prem
AD domain controllers in AWS.

586
00:24:50,310 --> 00:24:52,180
So we start with Acme corporation,

587
00:24:52,180 --> 00:24:54,850
which has the on-prem AD environment.

588
00:24:54,850 --> 00:24:57,790
They have stood up and Amazon AWS account

589
00:24:57,790 --> 00:25:00,763
to use EC2 as a cloud data center.

590
00:25:01,600 --> 00:25:02,990
Then Acme configures,

591
00:25:02,990 --> 00:25:05,800
and IAM role for the server
admins and they stand up

592
00:25:05,800 --> 00:25:06,850
a couple of

593
00:25:06,850 --> 00:25:09,873
on-prem active directory
domain controllers in AWS.

594
00:25:11,410 --> 00:25:13,060
Acme, then configures federation,

595
00:25:13,060 --> 00:25:14,540
so that users in the on-prem AD

596
00:25:14,540 --> 00:25:18,690
can authenticate to AWS
using their AD credentials.

597
00:25:18,690 --> 00:25:20,630
So simplify access for server admins,

598
00:25:20,630 --> 00:25:23,930
the on-prem AD group, AWS
EC2 admins is created,

599
00:25:23,930 --> 00:25:27,290
and then that is associated
with AWS IAM role.

600
00:25:27,290 --> 00:25:30,570
The server team accounts are
then added to the on-prem

601
00:25:30,570 --> 00:25:33,700
AD group called AWS EC2 admins,

602
00:25:33,700 --> 00:25:37,223
to enable the team easily
administer the AWS environment.

603
00:25:39,530 --> 00:25:41,510
But if an attacker is able to compromise

604
00:25:41,510 --> 00:25:42,520
one of the user accounts,

605
00:25:42,520 --> 00:25:45,453
that's a member of the
AD group, AWS admins,

606
00:25:47,830 --> 00:25:50,940
then they are able to
connect to the AWS console

607
00:25:50,940 --> 00:25:53,280
as an AWS admin.

608
00:25:53,280 --> 00:25:56,250
And then now the attacker can
configure the virtual domain

609
00:25:56,250 --> 00:25:59,690
controller instance in AWS
and run commands on it.

610
00:25:59,690 --> 00:26:02,310
Once the command runs to
modify the domain controllers,

611
00:26:02,310 --> 00:26:05,050
copy of AD, the changes replicate back

612
00:26:05,050 --> 00:26:06,680
to the on-prem domain controllers.

613
00:26:06,680 --> 00:26:08,560
And then we end up with the on-prem

614
00:26:08,560 --> 00:26:10,550
active directory being compromised.

615
00:26:10,550 --> 00:26:12,260
So effectively in this scenario

616
00:26:13,290 --> 00:26:15,500
yet attacker can compromise an account,

617
00:26:15,500 --> 00:26:18,560
a regular user account that
doesn't have any active

618
00:26:18,560 --> 00:26:21,470
directory rights, it's
just a member of a group

619
00:26:21,470 --> 00:26:22,550
in active directory.

620
00:26:22,550 --> 00:26:24,997
This group is associated with the

621
00:26:24,997 --> 00:26:28,060
AWS IAM role through Federation.

622
00:26:28,060 --> 00:26:30,570
And so once the attacker
compromises this account,

623
00:26:30,570 --> 00:26:34,160
which has these rights
granted in the group,

624
00:26:34,160 --> 00:26:35,510
in active directory.

625
00:26:35,510 --> 00:26:39,620
But then are relayed and
related to this AWS, IAM role,

626
00:26:39,620 --> 00:26:40,640
then they can leverage that

627
00:26:40,640 --> 00:26:43,040
in order to compromise any of the systems

628
00:26:43,040 --> 00:26:46,070
that are in there, that
they have rights to.

629
00:26:46,070 --> 00:26:47,410
So I've got a summary slide here,

630
00:26:47,410 --> 00:26:51,010
that covers this very briefly.

631
00:26:51,010 --> 00:26:53,560
But keep in mind that Amazon
SSM, which is effectively,

632
00:26:53,560 --> 00:26:56,247
the Amazon agent, is installed
by default on most Amazon

633
00:26:56,247 --> 00:26:58,820
provided instances or templates.

634
00:26:58,820 --> 00:27:00,230
You do need the role to execute,

635
00:27:00,230 --> 00:27:02,770
but once you have the rights
over that environment,

636
00:27:02,770 --> 00:27:03,880
as a server admin would,

637
00:27:03,880 --> 00:27:06,080
you can normally go ahead and get that.

638
00:27:06,080 --> 00:27:08,460
Hopefully you're logging
this and looking at the logs,

639
00:27:08,460 --> 00:27:11,010
Amazon cloud trail can pull these logs

640
00:27:11,010 --> 00:27:15,010
and the logs need to be
configured to not be deleted.

641
00:27:15,010 --> 00:27:17,640
So very often an attacker
is going to delete the logs,

642
00:27:17,640 --> 00:27:19,190
so you can't see what they did.

643
00:27:20,890 --> 00:27:21,890
For most of 2019,

644
00:27:21,890 --> 00:27:24,580
I was digging in Office 365
and Azure active directory

645
00:27:24,580 --> 00:27:25,850
looking at features.

646
00:27:25,850 --> 00:27:26,910
As I went through each of them,

647
00:27:26,910 --> 00:27:28,853
I found one that was very interesting.

648
00:27:30,420 --> 00:27:32,940
Remember earlier how I noted
that Azure roles and Azure AD

649
00:27:32,940 --> 00:27:34,160
roles are separate.

650
00:27:34,160 --> 00:27:35,850
Well, not exactly.

651
00:27:35,850 --> 00:27:37,670
Here it describes a way that global

652
00:27:37,670 --> 00:27:39,850
administrators could
actually elevate their access

653
00:27:39,850 --> 00:27:43,180
and have some control over Azure.

654
00:27:43,180 --> 00:27:44,740
Surely the global administrator role

655
00:27:44,740 --> 00:27:46,240
description notes this, right?

656
00:27:47,230 --> 00:27:51,130
Well, no, it didn't,
at least not as of May.

657
00:27:51,130 --> 00:27:53,640
The global administrator role
provides full admin rights

658
00:27:53,640 --> 00:27:57,520
to Azure AD and ultimately
all the Office 365 services,

659
00:27:57,520 --> 00:27:59,950
the Microsoft online document provides

660
00:27:59,950 --> 00:28:01,520
key information about this.

661
00:28:01,520 --> 00:28:04,310
And there's nothing here
showing Azure capability.

662
00:28:04,310 --> 00:28:05,760
I took the screenshot in May.

663
00:28:06,730 --> 00:28:08,000
After contacting Microsoft,

664
00:28:08,000 --> 00:28:09,860
and providing information
about this escalation path

665
00:28:09,860 --> 00:28:12,750
the documents been updated
in the past month or so

666
00:28:12,750 --> 00:28:15,720
stating that yes, there is a
way for global administrator

667
00:28:15,720 --> 00:28:17,850
to have Azure rights.

668
00:28:17,850 --> 00:28:20,350
Which is a bit different
than what it said before.

669
00:28:22,040 --> 00:28:23,900
Once we have access to
the Azure AD portal,

670
00:28:23,900 --> 00:28:26,400
which is typically all
Azure AD users, by default,

671
00:28:26,400 --> 00:28:29,240
we can view several different
configuration settings for

672
00:28:29,240 --> 00:28:30,420
Azure active directory,

673
00:28:30,420 --> 00:28:33,300
which controls many aspects of Office 365.

674
00:28:33,300 --> 00:28:34,970
This page shows the directory properties,

675
00:28:34,970 --> 00:28:37,600
which now includes the new
managed security defaults.

676
00:28:37,600 --> 00:28:39,490
Towards the bottom is access management

677
00:28:39,490 --> 00:28:41,830
for Azure resources toggle.

678
00:28:41,830 --> 00:28:44,130
So we can see what that is.

679
00:28:44,130 --> 00:28:46,010
According to Microsoft
documentation toggling

680
00:28:46,010 --> 00:28:47,640
this option from no to yes,

681
00:28:47,640 --> 00:28:49,790
adds the global administrator account

682
00:28:49,790 --> 00:28:51,690
to the user access administrator role

683
00:28:51,690 --> 00:28:54,790
and Azure our back, at the root scope.

684
00:28:54,790 --> 00:28:57,410
This has control over all
subscriptions in the tenant.

685
00:28:57,410 --> 00:28:59,310
And this option is only
available to accounts that are

686
00:28:59,310 --> 00:29:01,740
members of the global administrator role.

687
00:29:01,740 --> 00:29:04,120
While this option is configured
in the directory property

688
00:29:04,120 --> 00:29:05,050
section, this is actually

689
00:29:05,050 --> 00:29:07,130
a per account configuration option.

690
00:29:07,130 --> 00:29:09,850
So this magic button provides
the ability to manage Azure

691
00:29:09,850 --> 00:29:13,293
roles, but no direct
Azure rights as into VMs.

692
00:29:14,350 --> 00:29:16,400
Further in the documentation,

693
00:29:16,400 --> 00:29:19,440
there's additional context
on what elevate access is

694
00:29:19,440 --> 00:29:20,680
and how it works

695
00:29:20,680 --> 00:29:22,590
when developing Azure
active directory and Azure,

696
00:29:22,590 --> 00:29:24,960
Microsoft had to decide
if the global admin

697
00:29:24,960 --> 00:29:27,000
should have Azure rights initially

698
00:29:27,000 --> 00:29:28,910
and opted for no, they shouldn't.

699
00:29:28,910 --> 00:29:32,170
But they provided this
capability to gain Azure access.

700
00:29:32,170 --> 00:29:34,590
This is that backdoor of sorts.

701
00:29:34,590 --> 00:29:36,110
Which has been somewhat highlighted now

702
00:29:36,110 --> 00:29:39,060
that the managed security
default option is right below it.

703
00:29:40,390 --> 00:29:41,223
So this graphic shows

704
00:29:41,223 --> 00:29:42,470
what happens in the connection point

705
00:29:42,470 --> 00:29:44,150
between Azure AD and Azure.

706
00:29:44,150 --> 00:29:46,440
My biggest concern here is
that for many organizations,

707
00:29:46,440 --> 00:29:48,300
the group that manages
Azure active directory

708
00:29:48,300 --> 00:29:50,650
and Office 365 are often a different group

709
00:29:50,650 --> 00:29:52,340
from those that manage Azure.

710
00:29:52,340 --> 00:29:54,250
This means that someone
could elevate access,

711
00:29:54,250 --> 00:29:55,330
I think a rogue admin,

712
00:29:55,330 --> 00:29:57,770
and no one probably would notice.

713
00:29:57,770 --> 00:29:58,900
This potentially is a serious

714
00:29:58,900 --> 00:30:01,040
threat from an insider threat perspective,

715
00:30:01,040 --> 00:30:02,790
especially around the
detection part of this issue,

716
00:30:02,790 --> 00:30:04,090
which I'll cover in a bit.

717
00:30:05,360 --> 00:30:07,240
This note in the Microsoft
document highlights an

718
00:30:07,240 --> 00:30:08,890
interesting phenomena with this option.

719
00:30:08,890 --> 00:30:10,440
Only while the account is a member of the

720
00:30:10,440 --> 00:30:12,730
global administrator role,
can the account toggle

721
00:30:12,730 --> 00:30:15,020
this option to yes or no.

722
00:30:15,020 --> 00:30:18,210
This means that if an account
is no longer in the global

723
00:30:18,210 --> 00:30:20,944
administrator role and the
option has been set to yes,

724
00:30:20,944 --> 00:30:22,640
they cannot change it back to no,

725
00:30:22,640 --> 00:30:24,490
and no one else can change it either.

726
00:30:25,400 --> 00:30:27,480
I also found an API that seems related,

727
00:30:27,480 --> 00:30:29,820
which means that an attacker
would not need to visit the

728
00:30:29,820 --> 00:30:31,850
Azure AD portal to perform this action.

729
00:30:31,850 --> 00:30:34,823
They just have to run this API call.

730
00:30:36,130 --> 00:30:39,790
And Ryan added this REST API
elevation method to PowerZure,

731
00:30:39,790 --> 00:30:41,040
which you should check out.

732
00:30:41,040 --> 00:30:43,090
I have a link at the bottom of the slide.

733
00:30:45,240 --> 00:30:48,160
Now, what I'm gonna do is
walk through a scenario

734
00:30:48,160 --> 00:30:53,160
where we have Acme and Acme has stood up.

735
00:30:53,190 --> 00:30:56,100
They they've had a new
Office 365 environment.

736
00:30:56,100 --> 00:30:58,070
They've had Azure for a very long time.

737
00:30:58,070 --> 00:31:00,620
They're using it Azure as
their cloud data center.

738
00:31:00,620 --> 00:31:01,750
They've got domain controllers there,

739
00:31:01,750 --> 00:31:04,220
they've got a bunch of
different servers in Azure.

740
00:31:04,220 --> 00:31:06,470
But they're just now
spending up Office 365.

741
00:31:06,470 --> 00:31:07,530
They're gonna use it for email.

742
00:31:07,530 --> 00:31:09,080
They're gonna use it for a
number of different things.

743
00:31:09,080 --> 00:31:13,620
So they have members of the
active directory team exchange,

744
00:31:13,620 --> 00:31:15,940
SharePoint, a bunch of different people,

745
00:31:15,940 --> 00:31:19,370
probably 30 to 50 people
are members of the global

746
00:31:19,370 --> 00:31:20,330
administrator role.

747
00:31:20,330 --> 00:31:23,400
Not everyone has had their
account configured for MFA,

748
00:31:23,400 --> 00:31:26,680
which is realistic since
many admins heard this

749
00:31:26,680 --> 00:31:28,340
from last year's Blackhat talk

750
00:31:28,340 --> 00:31:29,890
that I gave with Mark Mauro.

751
00:31:29,890 --> 00:31:31,680
And it was only about 8%,

752
00:31:31,680 --> 00:31:33,360
hopefully it's much higher than that,

753
00:31:33,360 --> 00:31:36,640
but it's still probably less
than 15%, if I had to guess.

754
00:31:36,640 --> 00:31:39,180
And so this means that
most global admin accounts

755
00:31:39,180 --> 00:31:40,560
don't have MFA configured.

756
00:31:40,560 --> 00:31:42,900
And so if an attacker is
able to password spray

757
00:31:42,900 --> 00:31:44,930
and gets the account password,

758
00:31:44,930 --> 00:31:47,130
then they're able to
take over this account.

759
00:31:48,540 --> 00:31:50,470
So by default, this option is set to know.

760
00:31:50,470 --> 00:31:53,220
So if an attacker compromises
a global admin account,

761
00:31:53,220 --> 00:31:55,930
they can go in and actually
toggle this from no to yes,

762
00:31:55,930 --> 00:32:00,920
which gives them Azure user
access administrator role rights

763
00:32:00,920 --> 00:32:02,230
at the root of Azure,

764
00:32:02,230 --> 00:32:07,230
that Azure tenant of that's
configured on the Azure side.

765
00:32:08,360 --> 00:32:10,280
So once that toggle option is set to, yes,

766
00:32:10,280 --> 00:32:12,850
we can see a new account
appears in the user access

767
00:32:12,850 --> 00:32:15,650
administrator, Azure our back role,

768
00:32:15,650 --> 00:32:17,230
I call this attack account hacker.

769
00:32:17,230 --> 00:32:18,920
So I don't forget which one I'm using,

770
00:32:18,920 --> 00:32:21,310
but you'll notice that I
also added a couple of others

771
00:32:21,310 --> 00:32:23,100
that look like they belong.

772
00:32:23,100 --> 00:32:25,513
There's really nothing that's
supposed to be in this role.

773
00:32:32,180 --> 00:32:33,650
Monitoring for this can be a challenge.

774
00:32:33,650 --> 00:32:36,300
As the primary method is
running an Azure CLI command

775
00:32:36,300 --> 00:32:37,930
at the root scope.

776
00:32:37,930 --> 00:32:40,260
I can't find root level Azure,

777
00:32:40,260 --> 00:32:41,680
our back roles listed in the portal,

778
00:32:41,680 --> 00:32:44,850
so I can't go there to see
what the membership is.

779
00:32:44,850 --> 00:32:47,180
Some that could be
monitored through an API,

780
00:32:47,180 --> 00:32:50,030
or if you're pulling logs into your SIM,

781
00:32:50,030 --> 00:32:52,130
you could alert on our back role

782
00:32:52,130 --> 00:32:55,010
or role membership modification.

783
00:32:55,010 --> 00:32:58,500
But when I run that
command, I get this output,

784
00:32:58,500 --> 00:33:00,350
which means I would have to parse it.

785
00:33:01,320 --> 00:33:03,360
And so this is the message
that appears when attempting to

786
00:33:03,360 --> 00:33:05,940
remove root level role
assignments from a subscription,

787
00:33:05,940 --> 00:33:08,020
removing an account
from a rule level Azure,

788
00:33:08,020 --> 00:33:11,250
our back role requires running
an Azure PowerShell command.

789
00:33:11,250 --> 00:33:13,860
When an account toggles
elevate access from yes to no,

790
00:33:13,860 --> 00:33:15,020
it is automatically removed

791
00:33:15,020 --> 00:33:16,883
from the user access administrator.

792
00:33:18,070 --> 00:33:20,540
Once the attacker has user
access administrator rights at

793
00:33:20,540 --> 00:33:21,430
the root level,

794
00:33:21,430 --> 00:33:24,950
this account can modify roles
for any subscription in Azure.

795
00:33:24,950 --> 00:33:27,350
Owners obvious and
probably monitored maybe.

796
00:33:27,350 --> 00:33:29,840
What about something more innocuous?

797
00:33:29,840 --> 00:33:31,710
So I've found virtual machine contributor,

798
00:33:31,710 --> 00:33:32,660
and this is pretty interesting

799
00:33:32,660 --> 00:33:34,530
because the documentation states,

800
00:33:34,530 --> 00:33:36,260
it lets you manage virtual machines,

801
00:33:36,260 --> 00:33:38,970
but not access to them and
not the virtual network or

802
00:33:38,970 --> 00:33:41,133
storage account that they're connected to.

803
00:33:41,970 --> 00:33:44,150
And it includes this ability,

804
00:33:44,150 --> 00:33:46,883
which
is
Microsoft.Compute/virtualMachine/runCommand.

805
00:33:48,650 --> 00:33:51,000
This provides the ability
to run commands on the VM

806
00:33:51,000 --> 00:33:52,863
as system such as PowerShell.

807
00:33:54,550 --> 00:33:56,750
And so we can click on
run PowerShell script

808
00:33:56,750 --> 00:33:57,900
and we can do that.

809
00:33:57,900 --> 00:33:59,500
The other thing that's
interesting here is that

810
00:33:59,500 --> 00:34:01,510
it provides you ability to re-enable

811
00:34:01,510 --> 00:34:02,640
the administrator account,

812
00:34:02,640 --> 00:34:05,560
which on a domain controller
in Azure would be the red 500

813
00:34:05,560 --> 00:34:06,950
account for the domain.

814
00:34:06,950 --> 00:34:09,660
So we have seen some environments
when we look at them from

815
00:34:09,660 --> 00:34:12,010
an act directory assessment perspective,

816
00:34:12,010 --> 00:34:13,730
they have had the default

817
00:34:13,730 --> 00:34:15,640
domain administrator account disabled,

818
00:34:15,640 --> 00:34:18,060
but very often it has an old password

819
00:34:18,060 --> 00:34:19,900
say 10 years older or more.

820
00:34:19,900 --> 00:34:22,830
And it may actually have
it Kerberos service,

821
00:34:22,830 --> 00:34:24,490
principal name, or spin
associated with it,

822
00:34:24,490 --> 00:34:26,260
which means that we can kerberos it.

823
00:34:26,260 --> 00:34:29,750
So if an attacker could just
go ahead and Kerberos it,

824
00:34:29,750 --> 00:34:31,130
then re-enable it through here.

825
00:34:31,130 --> 00:34:34,160
They could potentially leverage
that default admin account,

826
00:34:34,160 --> 00:34:35,713
which was originally disabled.

827
00:34:37,750 --> 00:34:40,430
So we're going to add the
attacker controlled account

828
00:34:40,430 --> 00:34:42,180
to the virtual machine contributor.

829
00:34:44,060 --> 00:34:46,380
And now that our attacker has
the ability to run commands,

830
00:34:46,380 --> 00:34:48,510
we can update the administrators' group.

831
00:34:48,510 --> 00:34:50,480
This will happen on the Azure
based domain controller,

832
00:34:50,480 --> 00:34:53,170
then replicate to the domain
controllers that are on-prem.

833
00:34:53,170 --> 00:34:55,590
Note that being able to
run commands on an Azure VM

834
00:34:55,590 --> 00:34:59,230
is not specific to customer
on-prem DCs hosted on Azure,

835
00:34:59,230 --> 00:35:01,823
but also other systems
hosted there as well.

836
00:35:02,940 --> 00:35:04,510
So we take a look to see what happened.

837
00:35:04,510 --> 00:35:06,540
We can go switch to a computer on-prem

838
00:35:06,540 --> 00:35:08,923
or run another command on the DC to see

839
00:35:08,923 --> 00:35:10,170
what the result is.

840
00:35:10,170 --> 00:35:11,990
And we've now compromised the on-prem

841
00:35:11,990 --> 00:35:14,023
active directory from Azure.

842
00:35:15,360 --> 00:35:17,270
If PowerShell logging is
configured appropriately

843
00:35:17,270 --> 00:35:18,900
and sent to a SIM and monitored,

844
00:35:18,900 --> 00:35:21,660
this event should
identify unusual activity

845
00:35:21,660 --> 00:35:23,360
showing up in the PowerShell lock.

846
00:35:24,800 --> 00:35:26,900
Another option an attacker
has with these rights

847
00:35:26,900 --> 00:35:29,010
is running invoked
Mimikatz from the internet,

848
00:35:29,010 --> 00:35:31,550
or even a compromised system
on the corporate network,

849
00:35:31,550 --> 00:35:33,636
or within the Azure tenant.

850
00:35:33,636 --> 00:35:34,970
So here I'm running Mimikatz

851
00:35:34,970 --> 00:35:37,240
just to get the
(indistinct) password hash.

852
00:35:37,240 --> 00:35:38,073
Because with that,

853
00:35:38,073 --> 00:35:39,220
I can create golden tickets,

854
00:35:39,220 --> 00:35:41,100
which means I can persist forever

855
00:35:41,100 --> 00:35:43,220
in the on-prem active directory,

856
00:35:43,220 --> 00:35:45,010
even though I've never touched that

857
00:35:45,010 --> 00:35:47,310
or had access to the corporate network.

858
00:35:47,310 --> 00:35:48,690
So that means once I get a foothold,

859
00:35:48,690 --> 00:35:51,453
I can have domain admin possibly forever.

860
00:35:52,320 --> 00:35:54,300
But what if instead of
running, invoke Mimikatz

861
00:35:54,300 --> 00:35:55,290
directly from GitHub,

862
00:35:55,290 --> 00:35:57,920
we loaded it into Azure blob storage.

863
00:35:57,920 --> 00:36:00,070
So effectively, we're gonna
use a PowerShell script.

864
00:36:00,070 --> 00:36:01,320
We're going to upload a,

865
00:36:01,320 --> 00:36:02,920
I'm not going to call it invoke Mimikatz,

866
00:36:02,920 --> 00:36:05,640
I'll call it INVMMK.TXT.

867
00:36:05,640 --> 00:36:07,810
And Azure blob storage is very nice

868
00:36:07,810 --> 00:36:11,440
because it gives me a URL
in which I can interact

869
00:36:11,440 --> 00:36:13,673
and connect to this file.

870
00:36:14,630 --> 00:36:15,980
So that would work as well.

871
00:36:16,940 --> 00:36:18,810
Let's take a moment to recap.

872
00:36:18,810 --> 00:36:21,810
From global admin to Azure
user access administrator

873
00:36:21,810 --> 00:36:25,450
to Azure admin or virtual
machine contributor.

874
00:36:25,450 --> 00:36:27,560
So if an attacker
compromises an organization's

875
00:36:27,560 --> 00:36:28,730
global administrator account,

876
00:36:28,730 --> 00:36:31,140
either because they're just
starting with Office 365

877
00:36:31,140 --> 00:36:34,090
or didn't realize the risks
around protecting global admins,

878
00:36:34,090 --> 00:36:36,560
either way, the global admin
accounts weren't locked down

879
00:36:36,560 --> 00:36:38,830
with PIM conditional access or MFA.

880
00:36:38,830 --> 00:36:41,050
Or a global admin session token

881
00:36:41,050 --> 00:36:43,050
was stolen because this admin

882
00:36:43,050 --> 00:36:45,210
was using their regular web browser

883
00:36:45,210 --> 00:36:46,790
on the regular user workstation,

884
00:36:46,790 --> 00:36:48,060
which is compromised.

885
00:36:48,060 --> 00:36:49,880
This would mean that the
attacker is about an hour to

886
00:36:49,880 --> 00:36:51,070
perform these actions,

887
00:36:51,070 --> 00:36:54,020
compromise the account
elevate access to Azure,

888
00:36:54,020 --> 00:36:57,280
get Azure rights through
Azure role membership,

889
00:36:57,280 --> 00:36:58,640
remove elevate access rights,

890
00:36:58,640 --> 00:37:01,840
perform malicious actions
on any or all Azure VMs

891
00:37:01,840 --> 00:37:03,110
and all subscriptions.

892
00:37:03,110 --> 00:37:05,710
Then remove role
membership in Azure or not.

893
00:37:05,710 --> 00:37:07,560
The total time required,
only a few minutes,

894
00:37:07,560 --> 00:37:09,633
perhaps as much as 15 minutes total.

895
00:37:11,110 --> 00:37:12,950
In many organizations, there
are two different groups

896
00:37:12,950 --> 00:37:16,290
of manage Azure AD officer 365 in Azure.

897
00:37:16,290 --> 00:37:17,180
As I mentioned earlier,

898
00:37:17,180 --> 00:37:19,740
they have no expectations
that the other team

899
00:37:19,740 --> 00:37:22,313
has the ability to
affect their environment.

900
00:37:24,240 --> 00:37:26,330
So why is this issue as important?

901
00:37:26,330 --> 00:37:28,130
Well, customers don't usually expect

902
00:37:28,130 --> 00:37:29,600
that the global administrator role

903
00:37:29,600 --> 00:37:31,840
that says it has Office 365 admin rights

904
00:37:31,840 --> 00:37:33,933
can also control Azure subscriptions.

905
00:37:35,770 --> 00:37:37,750
We need to be very careful
what accounts are members of

906
00:37:37,750 --> 00:37:39,340
roles and Azure at the root level,

907
00:37:39,340 --> 00:37:41,600
as well as on the subscriptions,

908
00:37:41,600 --> 00:37:44,370
since this impacts the security posture.

909
00:37:44,370 --> 00:37:46,640
It's not obvious that removing
the account from global

910
00:37:46,640 --> 00:37:48,570
administrator role does not
remove the account from the

911
00:37:48,570 --> 00:37:51,560
Azure, our back role user
access administrator,

912
00:37:51,560 --> 00:37:54,580
when the access management for
Azure resources toggle option

913
00:37:54,580 --> 00:37:56,103
is still set to yes.

914
00:37:59,370 --> 00:38:00,690
And the key points around detection

915
00:38:00,690 --> 00:38:02,150
is there's no way to detect

916
00:38:02,150 --> 00:38:04,330
this configuration Azure
active directory at all.

917
00:38:04,330 --> 00:38:06,420
There's no property to query on accounts.

918
00:38:06,420 --> 00:38:08,150
You have to run an Azure CLI command

919
00:38:08,150 --> 00:38:09,330
to check the role group membership,

920
00:38:09,330 --> 00:38:11,430
but that's on the Azure side.

921
00:38:11,430 --> 00:38:13,980
When I walked through the
Azure AD to Azure access

922
00:38:13,980 --> 00:38:16,490
elevation, I attempted
to identify a clear event

923
00:38:16,490 --> 00:38:18,840
that I could alert on and was unable to.

924
00:38:18,840 --> 00:38:21,080
The core directory, directory
management, set company,

925
00:38:21,080 --> 00:38:23,130
information log notes that
something has changed,

926
00:38:23,130 --> 00:38:24,250
but not word.

927
00:38:24,250 --> 00:38:26,920
The capability for an
Azure AD global admin is,

928
00:38:26,920 --> 00:38:28,460
quote on quote, by design.

929
00:38:28,460 --> 00:38:31,350
However, not expected, not
well documented by Microsoft.

930
00:38:31,350 --> 00:38:34,470
When reading about what Azure
AD global admins can do.

931
00:38:34,470 --> 00:38:37,090
Certainly now the
documentation has been updated

932
00:38:37,090 --> 00:38:38,180
to mention this,

933
00:38:38,180 --> 00:38:41,040
but I feel like there
should be better logging

934
00:38:41,040 --> 00:38:43,503
and alerting around this
sort of configuration.

935
00:38:44,850 --> 00:38:47,520
I'm concerned that this is a scenario

936
00:38:47,520 --> 00:38:49,130
where the Microsoft cloud customer,

937
00:38:49,130 --> 00:38:52,270
can't attack, can't remediate
and ultimately can't prevent

938
00:38:52,270 --> 00:38:53,840
since there's no real gate to lock,

939
00:38:53,840 --> 00:38:56,370
if an Azure ID global
admin account is exposed

940
00:38:56,370 --> 00:38:58,610
and then they can jump
over on the Azure side.

941
00:38:58,610 --> 00:39:01,850
So the only real good answer
I can find for this is to

942
00:39:02,690 --> 00:39:05,490
ensure that global administrator
groups are managed,

943
00:39:05,490 --> 00:39:08,720
or the roles are managed
with Azure, AD PIM,

944
00:39:08,720 --> 00:39:10,920
but even this doesn't
stop a rogue admin from

945
00:39:10,920 --> 00:39:12,860
doing whatever they want.

946
00:39:12,860 --> 00:39:14,660
The best mitigation is prevent compromise

947
00:39:14,660 --> 00:39:17,320
global admin accounts
using PIM reduces this risk

948
00:39:17,320 --> 00:39:20,150
tremendously, outside of that
monitor global admin role

949
00:39:20,150 --> 00:39:22,650
membership and Azure ID and
the user access administrator

950
00:39:22,650 --> 00:39:24,770
group at the Azure route level.

951
00:39:24,770 --> 00:39:25,930
Regarding sensitive systems,

952
00:39:25,930 --> 00:39:27,680
severely restrict who has access to them,

953
00:39:27,680 --> 00:39:29,620
placing them in a separate subscription

954
00:39:29,620 --> 00:39:31,750
will protect against
common overpermissioning,

955
00:39:31,750 --> 00:39:33,610
but not against this sort of attack.

956
00:39:33,610 --> 00:39:35,350
So leveraging a separate Azure tenant

957
00:39:35,350 --> 00:39:36,760
is the best method for isolating

958
00:39:36,760 --> 00:39:38,400
and securing sensitive systems,

959
00:39:38,400 --> 00:39:39,850
including domain controllers.

960
00:39:41,410 --> 00:39:44,060
I reported this issue
to Microsoft security

961
00:39:44,060 --> 00:39:45,610
in September of 2019,

962
00:39:45,610 --> 00:39:47,470
continued corresponding with
them providing additional

963
00:39:47,470 --> 00:39:49,600
details through the rest of the year.

964
00:39:49,600 --> 00:39:51,400
Again, my biggest
concern with this is that

965
00:39:51,400 --> 00:39:52,770
on the Azure AD side,

966
00:39:52,770 --> 00:39:55,580
there is no way to detect,
remediate or prevent a global

967
00:39:55,580 --> 00:39:56,820
admin from flipping the switch

968
00:39:56,820 --> 00:39:58,623
and gaining full Azure rights.

969
00:40:00,340 --> 00:40:01,910
Instead of an external attacker,

970
00:40:01,910 --> 00:40:03,320
what if there was a malicious insider?

971
00:40:03,320 --> 00:40:05,540
Someone who did not
benefit from the company's

972
00:40:05,540 --> 00:40:06,993
spared no expense merger.

973
00:40:08,410 --> 00:40:10,560
And we know what happened
in that scenario.

974
00:40:11,710 --> 00:40:14,300
But how bad could it really get?

975
00:40:14,300 --> 00:40:15,900
Let's play what if.

976
00:40:15,900 --> 00:40:20,080
What if an attacker takes
control of Azure resources?

977
00:40:20,080 --> 00:40:22,030
What if the attacker then removes

978
00:40:22,030 --> 00:40:24,230
all the accounts from all the roles?

979
00:40:24,230 --> 00:40:27,090
And what if they decide to
ransom the Azure environment?

980
00:40:27,090 --> 00:40:30,150
Azure ransomware, AzureWare?

981
00:40:30,150 --> 00:40:31,600
Yeah, that can be pretty bad.

982
00:40:33,110 --> 00:40:34,810
So let's take the cloud
architecture concepts

983
00:40:34,810 --> 00:40:35,770
to the next level.

984
00:40:35,770 --> 00:40:38,190
Pretty much where
organizations are headed.

985
00:40:38,190 --> 00:40:40,320
Let's say you start with
the typical Microsoft server

986
00:40:40,320 --> 00:40:42,850
architecture with
on-prem active directory,

987
00:40:42,850 --> 00:40:45,670
and then we're going to add Azure to it.

988
00:40:45,670 --> 00:40:49,150
And then we're gonna add AWS to the mix.

989
00:40:49,150 --> 00:40:51,830
And then we're gonna add
Google cloud platform.

990
00:40:51,830 --> 00:40:54,810
And so I'm just gonna provide
a simplified view of this

991
00:40:54,810 --> 00:40:57,710
because really the architecture
diagrams get pretty messy.

992
00:40:58,720 --> 00:41:00,440
We have AWS, we have Azure

993
00:41:00,440 --> 00:41:02,540
and we have Google cloud platform.

994
00:41:02,540 --> 00:41:04,240
And I simplify this, like I said,

995
00:41:04,240 --> 00:41:06,210
showing the on-prem data center

996
00:41:06,210 --> 00:41:08,930
and federation to the three
different cloud environments.

997
00:41:08,930 --> 00:41:11,890
But ultimately this federation
just means that we have this

998
00:41:11,890 --> 00:41:13,880
sort of configuration where
everything can talk to

999
00:41:13,880 --> 00:41:16,823
everything else and that
they're interconnected.

1000
00:41:17,720 --> 00:41:20,030
And this means a compromise in one,

1001
00:41:20,030 --> 00:41:22,107
will likely lead to a compromise
in all cloud environments.

1002
00:41:22,107 --> 00:41:24,360
And IAM story's quite different
in each and difficult to

1003
00:41:24,360 --> 00:41:26,510
track roles and privileges across them.

1004
00:41:26,510 --> 00:41:27,420
It's likely that accounts

1005
00:41:27,420 --> 00:41:29,340
are over permission in the scenario.

1006
00:41:29,340 --> 00:41:31,420
And the use of Federation provides

1007
00:41:31,420 --> 00:41:34,300
the ability to jump across

1008
00:41:34,300 --> 00:41:36,950
between these different environments.

1009
00:41:36,950 --> 00:41:38,710
So compromise all three cloud environments

1010
00:41:38,710 --> 00:41:40,480
will likely result in on-prem compromise

1011
00:41:40,480 --> 00:41:42,750
since there's likely on-prem
AD domain controllers

1012
00:41:42,750 --> 00:41:44,530
in one or more of the cloud environments.

1013
00:41:44,530 --> 00:41:47,010
Federation or any type
of authentication flow,

1014
00:41:47,010 --> 00:41:49,050
really between these environments enables

1015
00:41:49,050 --> 00:41:51,380
a new type of lateral movement.

1016
00:41:51,380 --> 00:41:53,280
The attacker could
leverage over privileged

1017
00:41:53,280 --> 00:41:54,680
Azure and AWS roles,

1018
00:41:54,680 --> 00:41:56,050
and the rights provided with them

1019
00:41:56,050 --> 00:41:59,430
and showing which ones can
provide us some access to VMs.

1020
00:41:59,430 --> 00:42:02,550
Despite how they're described
is one way that we can

1021
00:42:02,550 --> 00:42:06,843
identify and lock down those
controls or those roles.

1022
00:42:08,420 --> 00:42:10,900
But the attacker could
jump across the federation

1023
00:42:10,900 --> 00:42:12,910
to gain privilege access
to cloud hosted services

1024
00:42:12,910 --> 00:42:15,370
and systems once they
compromise a single system

1025
00:42:15,370 --> 00:42:16,483
or even an account.

1026
00:42:17,470 --> 00:42:19,050
'Cause ultimately gaining privilege access

1027
00:42:19,050 --> 00:42:20,670
to the IAAS service provider.

1028
00:42:20,670 --> 00:42:23,520
So Azure, Amazon, AWS, GCP

1029
00:42:23,520 --> 00:42:25,050
means that the attacker could do anything

1030
00:42:25,050 --> 00:42:26,560
with the VMs hosted in the environment.

1031
00:42:26,560 --> 00:42:29,260
Including accessing and
modifying data on the systems.

1032
00:42:29,260 --> 00:42:31,610
So it's very important
that administrative roles

1033
00:42:31,610 --> 00:42:33,223
need to be limited and gated.

1034
00:42:35,210 --> 00:42:37,470
I recently heard a customer
tell me that an executive

1035
00:42:37,470 --> 00:42:40,320
was concerned about putting
all their eggs in one basket.

1036
00:42:41,240 --> 00:42:44,930
So they sign up for Azure and
AWS and Google cloud platform.

1037
00:42:44,930 --> 00:42:48,390
So now their eggs are in all the baskets.

1038
00:42:48,390 --> 00:42:50,310
And the security capabilities and controls

1039
00:42:50,310 --> 00:42:52,000
across these environments
is quite different.

1040
00:42:52,000 --> 00:42:53,690
And it's up to the operation

1041
00:42:53,690 --> 00:42:55,840
and security teams to
figure that part out.

1042
00:42:57,990 --> 00:43:00,700
So the cloud provides
many benefits and power,

1043
00:43:00,700 --> 00:43:03,080
though cloud integration
often complicates security.

1044
00:43:03,080 --> 00:43:04,500
Organizations will have to do better

1045
00:43:04,500 --> 00:43:06,020
to map security between on-prem

1046
00:43:06,020 --> 00:43:08,190
and cloud systems and authentication.

1047
00:43:08,190 --> 00:43:10,320
It's important as a
security, professional,

1048
00:43:10,320 --> 00:43:13,060
or security hobbyist, to
learn about these things.

1049
00:43:13,060 --> 00:43:15,630
The cloud is the wild West at this point.

1050
00:43:15,630 --> 00:43:17,950
It's the whole brave new world.

1051
00:43:17,950 --> 00:43:19,390
If you wanna go far in your career,

1052
00:43:19,390 --> 00:43:22,370
focus on cloud and cloud
security, because it is wide open.

1053
00:43:22,370 --> 00:43:25,070
There's a lot of areas
that haven't been explored

1054
00:43:25,070 --> 00:43:28,240
and especially in those areas across

1055
00:43:30,000 --> 00:43:32,280
on-prem and the hybrid environment.

1056
00:43:32,280 --> 00:43:34,620
So there's a lot of work
that needs to be done there.

1057
00:43:34,620 --> 00:43:37,240
And there's a lot that we
need to do moving forward

1058
00:43:37,240 --> 00:43:40,450
to improve the security
in this environment.

1059
00:43:40,450 --> 00:43:43,000
That's been my time, thank
you very much for yours.

