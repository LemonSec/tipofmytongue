1
00:00:05,390 --> 00:00:07,220
- Okay, Don't Ruck Us Again,

2
00:00:07,220 --> 00:00:11,670
take one million. (chuckles)

3
00:00:11,670 --> 00:00:15,170
Hi everyone and thank
you for watching my talk

4
00:00:15,170 --> 00:00:17,620
and thanks Def Con for inviting me

5
00:00:17,620 --> 00:00:20,720
and not giving up on this year con.

6
00:00:20,720 --> 00:00:22,940
This is the first time I speak on Def Con

7
00:00:22,940 --> 00:00:26,280
and I could really use a welcome rum shot,

8
00:00:26,280 --> 00:00:27,823
but since I'm not in Vegas,

9
00:00:27,823 --> 00:00:31,593
well I think I'm gonna
save it for another time.

10
00:00:34,280 --> 00:00:39,280
This talk represent my recent
research on Ruckus Wireless.

11
00:00:39,480 --> 00:00:44,480
Ruckus sees a wireless solution
company owned by Commscope.

12
00:00:44,760 --> 00:00:46,377
I've come to realize that Ruckus

13
00:00:46,377 --> 00:00:49,180
is pretty popular in the States.

14
00:00:49,180 --> 00:00:51,370
They even partnered with Brocade

15
00:00:51,370 --> 00:00:54,420
for conference wifi solution.

16
00:00:54,420 --> 00:00:58,223
Actually, this is how
I first noticed them.

17
00:00:58,223 --> 00:01:01,347
In the last year I've been
doing vulnerability research

18
00:01:01,347 --> 00:01:03,960
on Ruckus access point

19
00:01:03,960 --> 00:01:05,870
and so far I managed to found

20
00:01:05,870 --> 00:01:09,763
several critical vulnerabilities
in many of these devices.

21
00:01:11,560 --> 00:01:13,940
My previous research was introduced

22
00:01:13,940 --> 00:01:16,470
in the recent CCC Convention

23
00:01:16,470 --> 00:01:19,513
back when traveling
places was a real thing.

24
00:01:21,280 --> 00:01:22,310
But before I begin,

25
00:01:22,310 --> 00:01:26,010
I would like to go over the
obligatory who am I part.

26
00:01:26,010 --> 00:01:28,180
So my name is Gal Zror.

27
00:01:28,180 --> 00:01:33,180
I'm a research team leader at
Aleph Research by HCL AppScan.

28
00:01:33,726 --> 00:01:36,581
I'm recording this talk
from our lovely office

29
00:01:36,581 --> 00:01:39,600
in Herzliya Israel.

30
00:01:39,600 --> 00:01:43,940
And I've been doing reversing
for more than a decade.

31
00:01:43,940 --> 00:01:47,693
I tried to focus on offensive
embedded devices research.

32
00:01:49,371 --> 00:01:53,420
All right, I would like to
begin with a quick recap.

33
00:01:53,420 --> 00:01:56,900
In my previous research,
I demonstrated three ways

34
00:01:56,900 --> 00:02:01,900
to run code on Ruckus unleashed
and zone director devices.

35
00:02:02,200 --> 00:02:05,833
All vulnerabilities were found
on the device web interface.

36
00:02:07,530 --> 00:02:12,530
My first RC was credential
leakage with SSH jailbreak.

37
00:02:14,670 --> 00:02:18,963
My second RC was unauthenticated
stack buffer overflow,

38
00:02:21,420 --> 00:02:25,350
and the last RC was command
injection vulnerability,

39
00:02:25,350 --> 00:02:27,670
which was reachable or
without authentication

40
00:02:27,670 --> 00:02:29,523
by writing a new page.

41
00:02:33,730 --> 00:02:37,190
In this talk, same as in my previous one,

42
00:02:37,190 --> 00:02:42,070
I will be using Ruckus R510 Unleashed.

43
00:02:42,070 --> 00:02:44,450
Ruckus has an unleashed version

44
00:02:44,450 --> 00:02:46,613
for every access point they provide.

45
00:02:47,480 --> 00:02:52,183
Unleashed access points don't
rely on wifi controllers.

46
00:02:53,440 --> 00:02:57,400
Well, all access points in
the list you can see here

47
00:02:57,400 --> 00:03:00,300
share the same vulnerable code base,

48
00:03:00,300 --> 00:03:03,010
and I also noticed that
some vulnerabilities

49
00:03:03,010 --> 00:03:06,030
works on ZoneDirector product line,

50
00:03:06,030 --> 00:03:08,283
which is the wifi controllers.

51
00:03:10,710 --> 00:03:12,300
Okay, so what's new?

52
00:03:12,300 --> 00:03:16,930
Well, this research began
right after I got Ruckus patch

53
00:03:16,930 --> 00:03:19,430
for my first research.

54
00:03:19,430 --> 00:03:24,350
I noticed that they did not
fix my vulnerability correctly.

55
00:03:24,350 --> 00:03:26,773
So I decided to try and reenable it.

56
00:03:28,120 --> 00:03:31,980
Besides that my first research was 100%

57
00:03:31,980 --> 00:03:34,800
based on device simulation.

58
00:03:34,800 --> 00:03:36,673
Now that I bought an actual device,

59
00:03:36,673 --> 00:03:39,370
I can try to see if I missed something

60
00:03:40,580 --> 00:03:41,883
that I couldn't emulate.

61
00:03:43,310 --> 00:03:46,020
Well, but before I begin
with the new vulnerabilities,

62
00:03:46,020 --> 00:03:49,260
I would like to talk
about a new Ghidra Script

63
00:03:49,260 --> 00:03:51,633
that I used for this research.

64
00:03:55,060 --> 00:03:59,380
My previous research, and this
one was done relatively fast

65
00:03:59,380 --> 00:04:01,670
thanks to a Ghidra Script I wrote

66
00:04:01,670 --> 00:04:05,533
that fetches function
name from lock strings

67
00:04:05,533 --> 00:04:08,490
Ruckus has left in their binaries.

68
00:04:08,490 --> 00:04:12,693
Here we can see some of them
from one of the binaries.

69
00:04:15,520 --> 00:04:18,090
This script helped me rename function

70
00:04:18,090 --> 00:04:23,020
by parsing these log lines that
contained the function name.

71
00:04:23,020 --> 00:04:24,800
For more information about the script

72
00:04:24,800 --> 00:04:26,413
and it's a generic version,

73
00:04:27,410 --> 00:04:31,593
please check my previous
talk or our GitHub.

74
00:04:32,470 --> 00:04:35,020
All in all, this script was super useful

75
00:04:35,020 --> 00:04:40,020
for binary compiled with Ruckus code,

76
00:04:40,540 --> 00:04:43,363
but not all binaries weren't like that.

77
00:04:46,072 --> 00:04:49,140
It's a common thing for
embedded devices vendors

78
00:04:49,140 --> 00:04:53,220
to use open source
project in their devices.

79
00:04:53,220 --> 00:04:55,843
Ruckus web server is a
good example for that.

80
00:04:57,600 --> 00:05:01,210
Ruckus added new
functionality by adding a code

81
00:05:01,210 --> 00:05:04,637
to a popular web server called EmbedThis.

82
00:05:06,670 --> 00:05:09,424
Since EmbedThis sources are public,

83
00:05:09,424 --> 00:05:11,730
I didn't really need to reverse

84
00:05:11,730 --> 00:05:14,230
the entire web server binary.

85
00:05:14,230 --> 00:05:17,223
It was easier for me just
to review the source code.

86
00:05:19,130 --> 00:05:22,060
But what about the
parts that Ruckus added?

87
00:05:22,060 --> 00:05:25,610
I would like to be able to
mark these parts in Ghidra,

88
00:05:25,610 --> 00:05:27,583
so I'll know I'll have to reverse them.

89
00:05:28,610 --> 00:05:31,513
So for this, I wrote an
additional Ghidra Script.

90
00:05:34,360 --> 00:05:36,041
My new script tries to extract

91
00:05:36,041 --> 00:05:40,953
as many function names as it
can from the EmbedThis sources.

92
00:05:41,920 --> 00:05:45,250
I use different methods to
extract this information.

93
00:05:45,250 --> 00:05:49,573
Things like string matching
and function call trace.

94
00:05:50,630 --> 00:05:52,430
But the thing that helped me the most

95
00:05:52,430 --> 00:05:54,800
were debugging functions

96
00:05:54,800 --> 00:05:59,670
that contain the exact C
file name and line number

97
00:05:59,670 --> 00:06:01,863
in their EmbedThis sources.

98
00:06:03,310 --> 00:06:06,950
Here, we can see that for
these unnamed function

99
00:06:06,950 --> 00:06:09,133
from the web server binary,

100
00:06:10,040 --> 00:06:15,040
we get that this function
appears in server dot C file

101
00:06:15,320 --> 00:06:18,563
around the line number 138.

102
00:06:20,810 --> 00:06:25,210
So if you go to this line
in the EmbedThis sources,

103
00:06:25,210 --> 00:06:27,650
we'll be able to extract
many function names

104
00:06:27,650 --> 00:06:28,823
from the sources.

105
00:06:30,450 --> 00:06:33,993
This is the function in
Ghidra after conversion.

106
00:06:38,017 --> 00:06:39,710
These are all function name

107
00:06:39,710 --> 00:06:43,573
that I was able to extract
from the source code to Ghidra.

108
00:06:46,660 --> 00:06:51,460
Okay, so let's take this function
called graph for example.

109
00:06:51,460 --> 00:06:54,430
This function is called maCreateWebServer

110
00:06:56,900 --> 00:07:00,450
and it's being a called from the main.

111
00:07:00,450 --> 00:07:02,823
And it also calls other functions.

112
00:07:04,540 --> 00:07:06,800
Well, on the right hand side,

113
00:07:06,800 --> 00:07:09,680
we can see that all of the function names

114
00:07:09,680 --> 00:07:12,600
I was able to fetch from the sources

115
00:07:12,600 --> 00:07:15,163
by using the script I just introduced.

116
00:07:17,500 --> 00:07:19,445
On the bottom left hand side,

117
00:07:19,445 --> 00:07:22,860
we can see the function
names I was able to fetch

118
00:07:22,860 --> 00:07:26,248
by using the script from
my previous research,

119
00:07:26,248 --> 00:07:29,563
the one that uses the lock strings.

120
00:07:31,057 --> 00:07:34,760
And as you can see, there are
still unnamed function left.

121
00:07:34,760 --> 00:07:37,843
But still have the majority
of functions are now named.

122
00:07:38,920 --> 00:07:40,890
So this is an excellent example

123
00:07:40,890 --> 00:07:43,000
of how these two scripts

124
00:07:43,000 --> 00:07:45,810
helped me retrieve plenty of information

125
00:07:45,810 --> 00:07:49,573
and saved me so much time
and efforts on reversing.

126
00:07:53,800 --> 00:07:57,030
I'm also in the progress of
writing a generic version

127
00:07:57,030 --> 00:07:58,474
for this script

128
00:07:58,474 --> 00:08:03,450
that won't rely on
specific debug information.

129
00:08:03,450 --> 00:08:05,170
I will share all of my script

130
00:08:05,170 --> 00:08:08,270
in our Aleph Research GitHub account.

131
00:08:08,270 --> 00:08:11,250
So feel free to check it out,

132
00:08:11,250 --> 00:08:12,670
and while you're there,

133
00:08:12,670 --> 00:08:16,623
you can also check other
tools that we got there.

134
00:08:19,190 --> 00:08:20,320
All right, cool.

135
00:08:20,320 --> 00:08:22,730
So now we're ready for some exploits.

136
00:08:22,730 --> 00:08:24,760
This is my first RCE.

137
00:08:24,760 --> 00:08:29,250
In this attack I found
another stack overflow

138
00:08:30,781 --> 00:08:34,953
that was reachable with
unauthenticated web requests.

139
00:08:37,750 --> 00:08:40,450
And I would like to start with a demo.

140
00:08:40,450 --> 00:08:43,790
Well, this is clearly not a live demo,

141
00:08:43,790 --> 00:08:48,790
but I will still try to do
it in a live demo style.

142
00:08:49,020 --> 00:08:52,970
So yeah.

143
00:08:52,970 --> 00:08:54,453
Let's see how it goes.

144
00:08:55,521 --> 00:08:59,790
Okay, so for that, I need my demo screen

145
00:09:05,420 --> 00:09:06,953
and my listener screen.

146
00:09:09,260 --> 00:09:12,210
Okay, so this is the terminal

147
00:09:12,210 --> 00:09:17,040
that I'm gonna listen to port 1337,

148
00:09:19,370 --> 00:09:23,740
and my exploits will create
reverse shell to this port.

149
00:09:23,740 --> 00:09:28,543
So let's just start listening.

150
00:09:29,700 --> 00:09:34,583
And now, okay.

151
00:09:36,130 --> 00:09:41,130
And now let's have a look
on my stack overflow.

152
00:09:44,330 --> 00:09:46,880
So this is my overflow.

153
00:09:46,880 --> 00:09:50,850
Wait, let me open it in a different way.

154
00:09:50,850 --> 00:09:53,813
Okay, so this is my overflow,
as you can see here.

155
00:09:55,140 --> 00:10:00,140
And I am creating this
reverse shell by using Netcat

156
00:10:03,900 --> 00:10:07,890
and let's just go ahead and send this.

157
00:10:07,890 --> 00:10:12,890
So I will be posting
this file to this address

158
00:10:17,390 --> 00:10:18,933
and okay.

159
00:10:19,990 --> 00:10:21,840
Hopefully everything will work.

160
00:10:21,840 --> 00:10:23,144
Okay, connection refused.

161
00:10:23,144 --> 00:10:26,800
It's a good indication.

162
00:10:26,800 --> 00:10:29,193
Let's see what's going
on with my listener.

163
00:10:30,180 --> 00:10:32,690
Okay, so connection received

164
00:10:32,690 --> 00:10:33,583
Looking good.

165
00:10:35,030 --> 00:10:39,910
As you can see I managed to run LS

166
00:10:39,910 --> 00:10:44,910
and my user is admin

167
00:10:45,960 --> 00:10:50,960
and this user is part of the roots group.

168
00:10:53,330 --> 00:10:54,670
Yep, so this is it.

169
00:10:54,670 --> 00:10:58,473
This is my demo.

170
00:11:06,180 --> 00:11:07,640
Okay.

171
00:11:07,640 --> 00:11:09,480
Before I get into the vulnerability,

172
00:11:09,480 --> 00:11:13,880
I would like to do a quick
recap on my previous talk.

173
00:11:13,880 --> 00:11:16,330
This slide and the next one

174
00:11:16,330 --> 00:11:19,150
were actually taken from my previous talk,

175
00:11:19,150 --> 00:11:22,393
but I'll go over them just
to create the right context.

176
00:11:23,610 --> 00:11:28,600
There are three important
binaries in the web interface.

177
00:11:28,600 --> 00:11:32,520
The first one is slash bin slash webs.

178
00:11:32,520 --> 00:11:36,010
This is the actual EmbedThis web server.

179
00:11:36,010 --> 00:11:38,340
It handles HTTP request

180
00:11:38,340 --> 00:11:42,003
and executes handlers according
to it's configuration.

181
00:11:43,000 --> 00:11:46,413
It then sends command through
a Unix domain socket to emfd.

182
00:11:48,790 --> 00:11:51,160
Slash bin slash emfd

183
00:11:51,160 --> 00:11:55,130
is an executable that contains
the web interface logic.

184
00:11:55,130 --> 00:12:00,130
It maps function from webpages
to their own function,

185
00:12:00,360 --> 00:12:01,633
to its own function.

186
00:12:02,500 --> 00:12:05,230
It then implements web interface commands

187
00:12:05,230 --> 00:12:09,143
such as backup, network configuration,

188
00:12:10,010 --> 00:12:13,240
retrieve system information and much more.

189
00:12:13,240 --> 00:12:16,390
And the last one is libemf.

190
00:12:16,390 --> 00:12:21,390
This library is used by
emfd for web authentication,

191
00:12:21,400 --> 00:12:25,023
intervalidation and some code execution.

192
00:12:27,050 --> 00:12:31,000
And now let's look at this in a diagram.

193
00:12:31,000 --> 00:12:34,163
So webs, listen to HTTP slash HTTPS.

194
00:12:35,400 --> 00:12:39,970
If it receives a JSA page request,

195
00:12:39,970 --> 00:12:44,670
it uses EGS handler to pass
a function name to emfd.

196
00:12:46,580 --> 00:12:50,310
emfd then checks if the
function name is mapped,

197
00:12:50,310 --> 00:12:53,023
and if so, it calls the
right function pointer.

198
00:12:56,079 --> 00:13:00,450
Eventually emfd runs some
kind of shell commands.

199
00:13:00,450 --> 00:13:05,363
For example, if config, IP
tables, routes, et cetera.

200
00:13:08,960 --> 00:13:12,529
Since the web server
contains both EmbedThis code

201
00:13:12,529 --> 00:13:15,300
and Ruckus code,

202
00:13:15,300 --> 00:13:20,280
I decided to mark Ruckus
function with an RKS prefix.

203
00:13:22,490 --> 00:13:25,310
Ruckus has added a new function

204
00:13:25,310 --> 00:13:30,310
that registers new ESP functions.

205
00:13:30,320 --> 00:13:33,660
ESP again is the handler that runs

206
00:13:33,660 --> 00:13:36,963
if the web server receive a jsp request.

207
00:13:39,020 --> 00:13:42,593
So here we can see that 12
functions are being registered.

208
00:13:43,550 --> 00:13:45,320
Each function registration

209
00:13:45,320 --> 00:13:49,210
needs a function name string
and a function pointer.

210
00:13:49,210 --> 00:13:52,326
Now let's understand how
we can reach this function

211
00:13:52,326 --> 00:13:54,333
with an HTTP request.

212
00:13:57,240 --> 00:14:01,410
Okay, so for example, when
sending an HTTP request

213
00:14:01,410 --> 00:14:06,010
to slash admin slash
webpage slash wifi network

214
00:14:06,010 --> 00:14:11,010
slash wLanSysConfirm dot jsp,

215
00:14:11,080 --> 00:14:14,033
please remember this page
because it's a very long one,

216
00:14:16,240 --> 00:14:19,463
the web server invokes an EGS handler.

217
00:14:20,440 --> 00:14:25,020
on this page we can see that
EGS script has a special tag

218
00:14:26,220 --> 00:14:28,050
right at the beginning, right?

219
00:14:28,050 --> 00:14:31,393
And EGS function are being called from it.

220
00:14:33,900 --> 00:14:37,750
Webs maps every string it
receives to a function pointer

221
00:14:37,750 --> 00:14:38,743
and then runs it.

222
00:14:40,060 --> 00:14:41,770
So here we can see that

223
00:14:41,770 --> 00:14:46,713
a function called
EscapeJStr is being called,

224
00:14:49,020 --> 00:14:54,020
and another wonderful function
named S is also being called.

225
00:14:54,730 --> 00:14:56,504
Yeah, S yeah.

226
00:14:56,504 --> 00:15:00,683
A really great example of
a shitty naming convention.

227
00:15:01,990 --> 00:15:04,720
But the naming convention
is not the only lousy thing

228
00:15:04,720 --> 00:15:06,880
about this function.

229
00:15:06,880 --> 00:15:10,790
When I reviewed these edit functions,

230
00:15:10,790 --> 00:15:15,607
I noticed that S, Str,
EscapeJS and GetCookieValue

231
00:15:17,160 --> 00:15:19,963
are all using unsafe string copy.

232
00:15:21,470 --> 00:15:24,090
That means if I can find a webpage

233
00:15:24,090 --> 00:15:28,280
that's passes user inputs
through one of these function,

234
00:15:28,280 --> 00:15:31,623
I will be able to smash
the web server stack.

235
00:15:34,940 --> 00:15:38,940
All right, so to search for an input

236
00:15:38,940 --> 00:15:41,830
that leads to one of these functions,

237
00:15:41,830 --> 00:15:45,450
I decided to use the
good old drab command.

238
00:15:45,450 --> 00:15:47,049
So I would like to search

239
00:15:47,049 --> 00:15:50,720
if there are any calls
to one of these function

240
00:15:50,720 --> 00:15:52,673
with a non-static value.

241
00:15:53,600 --> 00:15:57,430
It also should not be
session related values

242
00:15:57,430 --> 00:16:00,880
because I might not be
able to manipulate them.

243
00:16:00,880 --> 00:16:03,300
Let's say session cookie
or something like that,

244
00:16:03,300 --> 00:16:07,183
that is being generated behind the scene.

245
00:16:09,180 --> 00:16:12,715
So here I used erratics that made sure S

246
00:16:12,715 --> 00:16:17,603
don't get any value inside
a double or single quote.

247
00:16:18,710 --> 00:16:22,110
I managed to find two jsp pages.

248
00:16:22,110 --> 00:16:27,110
One was an error page which did
not receive any user inputs,

249
00:16:27,380 --> 00:16:28,580
the second one,

250
00:16:28,580 --> 00:16:33,580
and the first one was that
page with a very long name

251
00:16:34,260 --> 00:16:36,290
that I don't really want to say it again.

252
00:16:36,290 --> 00:16:39,673
So I just have a look on that page.

253
00:16:41,070 --> 00:16:46,070
Okay, so we saw that S function

254
00:16:47,090 --> 00:16:50,683
receive a non-static value called content,

255
00:16:52,250 --> 00:16:54,640
and luckily the content variable

256
00:16:54,640 --> 00:16:59,503
is set directly by user
parameter called content key.

257
00:17:02,600 --> 00:17:05,300
So I just made it to
send the right request

258
00:17:05,300 --> 00:17:09,400
to wLanSysConfirm dot jsp.

259
00:17:09,400 --> 00:17:11,313
And that's it, I smashed the stack.

260
00:17:13,520 --> 00:17:18,520
As for exploitaion, R510
uses both Enix and ASLR.

261
00:17:21,480 --> 00:17:25,280
To overcome Enix I
decided to use Roadgadget.

262
00:17:25,280 --> 00:17:27,550
Actually, I use the same gadgets

263
00:17:28,710 --> 00:17:31,853
as for my previous stack overflow.

264
00:17:33,580 --> 00:17:37,220
So these are two gadgets that run system

265
00:17:38,128 --> 00:17:40,590
with a pointer to my payload.

266
00:17:40,590 --> 00:17:44,120
And in this case, I'm using NC

267
00:17:44,120 --> 00:17:47,080
to create a reverse shell to my machine.

268
00:17:47,080 --> 00:17:52,080
As for ASLR, same thing as
my previous stock overflow,

269
00:17:52,730 --> 00:17:54,970
I can just brute force my way

270
00:17:54,970 --> 00:17:57,863
and overcome it's nine beat of randomness.

271
00:17:59,400 --> 00:18:01,393
All right, yep.

272
00:18:03,870 --> 00:18:07,560
So before I continue
with my second attack,

273
00:18:07,560 --> 00:18:09,790
I would like to share
other vulnerabilities

274
00:18:09,790 --> 00:18:12,640
I found in this search

275
00:18:12,640 --> 00:18:15,473
that I think worth mentioning.

276
00:18:17,450 --> 00:18:20,800
So I also found a cross site scripting,

277
00:18:20,800 --> 00:18:24,340
a denial of service
and information leakage

278
00:18:24,340 --> 00:18:28,270
that may lead to another jailbreak.

279
00:18:28,270 --> 00:18:33,270
All of them were found in
either a web server or emfd.

280
00:18:35,880 --> 00:18:38,197
So let's talk about the XSS.

281
00:18:39,210 --> 00:18:44,210
I discovered this cross site
scripting on my first research,

282
00:18:45,200 --> 00:18:47,350
and actually it was
pretty straightforward.

283
00:18:48,720 --> 00:18:52,060
So every Ajax requests

284
00:18:52,060 --> 00:18:54,963
to slash admin slash underscore WLA

285
00:18:55,945 --> 00:18:58,753
underscore cmd stats dot jsp

286
00:19:00,060 --> 00:19:03,723
has to contain an updated attribute.

287
00:19:05,130 --> 00:19:08,803
This attribute is simply
reflected without any sanitation,

288
00:19:10,430 --> 00:19:12,223
any validation, sorry.

289
00:19:13,310 --> 00:19:17,630
So all I had to do is to send this payload

290
00:19:17,630 --> 00:19:21,373
and it just runs the the alerts message.

291
00:19:24,240 --> 00:19:27,720
XSS in embedded devices
is not that big of a deal,

292
00:19:27,720 --> 00:19:29,973
but I decided to report it anyway.

293
00:19:31,580 --> 00:19:36,040
All right, so let's go
over the denial of service.

294
00:19:36,040 --> 00:19:40,790
So while I was researching,
I came across this request

295
00:19:40,790 --> 00:19:43,530
that simply crashed the server.

296
00:19:43,530 --> 00:19:46,630
I must say I did not invest too much time

297
00:19:46,630 --> 00:19:48,093
understanding this bug.

298
00:19:49,100 --> 00:19:52,820
This is a web server
related bug of course,

299
00:19:52,820 --> 00:19:57,120
that's caused either by an
old version of EmbedThis,

300
00:19:57,120 --> 00:20:00,563
or in the code Ruckus as edit.

301
00:20:04,330 --> 00:20:05,250
All right.

302
00:20:05,250 --> 00:20:07,160
And now for the information leakage.

303
00:20:07,160 --> 00:20:11,820
So Ruckus are considering
the device serial number

304
00:20:11,820 --> 00:20:14,170
as sensitive information.

305
00:20:14,170 --> 00:20:15,600
In my previous research,

306
00:20:15,600 --> 00:20:18,070
I came across functions in Ruckus CLI

307
00:20:19,150 --> 00:20:23,010
that rely on the device serial number

308
00:20:23,010 --> 00:20:26,880
to get to a BusyBox shell, to jailbreak.

309
00:20:26,880 --> 00:20:31,680
In this research, I noticed
that upnp dot jsp page

310
00:20:31,680 --> 00:20:34,483
is switchable without any authentication.

311
00:20:36,030 --> 00:20:37,400
And this page gives away

312
00:20:37,400 --> 00:20:39,887
many useful information on the device

313
00:20:39,887 --> 00:20:42,733
that can be used for
fingerprinting let's say.

314
00:20:43,810 --> 00:20:48,180
But the best part is that I can
get the device serial number

315
00:20:48,180 --> 00:20:50,203
and probably jailbreak.

316
00:20:53,070 --> 00:20:57,467
Okay, so now is the
time for my second RCE.

317
00:20:58,430 --> 00:21:00,620
In this attack, I found a way

318
00:21:00,620 --> 00:21:04,070
to reuse the command
injection vulnerability

319
00:21:04,070 --> 00:21:06,050
from my previous research,

320
00:21:06,050 --> 00:21:09,960
I then had to find a new
way to bypass authentication

321
00:21:09,960 --> 00:21:12,543
by overriding admin credentials.

322
00:21:16,100 --> 00:21:17,380
So let's first understand

323
00:21:17,380 --> 00:21:20,120
how the command injection used to work

324
00:21:20,120 --> 00:21:22,320
in my previous research.

325
00:21:22,320 --> 00:21:24,945
So EmbedThis, sorry,

326
00:21:24,945 --> 00:21:28,690
emfd executes code in a really messy way.

327
00:21:28,690 --> 00:21:32,380
emfd sometimes uses libemf,

328
00:21:32,380 --> 00:21:36,820
other time calls the
shell script c underscore

329
00:21:36,820 --> 00:21:38,960
ropper dot SH

330
00:21:38,960 --> 00:21:42,233
and sometime just run the
command itself using Lipsy.

331
00:21:43,820 --> 00:21:47,750
These are all the different
functions that emfd uses

332
00:21:47,750 --> 00:21:49,363
to execute shell commands.

333
00:21:51,540 --> 00:21:56,310
As you can see, there are many
Lipsy system function code.

334
00:21:56,310 --> 00:21:58,260
So I had to find a page

335
00:21:58,260 --> 00:22:02,113
that uses this system
function without validation.

336
00:22:04,870 --> 00:22:09,260
And I found four functions
that called system

337
00:22:09,260 --> 00:22:12,160
and were vulnerable to command injection.

338
00:22:12,160 --> 00:22:15,370
And I will be showing the
injection on the last one,

339
00:22:15,370 --> 00:22:17,023
which is cmdimportAvpPort.

340
00:22:21,380 --> 00:22:23,550
To reach the vulnerable function,

341
00:22:23,550 --> 00:22:26,450
I had to send an Ajax request

342
00:22:26,450 --> 00:22:31,450
to slash admin slash cmdstat dot jsp.

343
00:22:33,740 --> 00:22:38,680
This request used use an emfd command

344
00:22:38,680 --> 00:22:40,220
called importAvpPort.

345
00:22:43,200 --> 00:22:46,190
And when emfd received this request,

346
00:22:46,190 --> 00:22:51,190
it uses a function
called cmdimportAvpPort.

347
00:22:51,510 --> 00:22:55,490
And this function just
uses Lipsy system function

348
00:22:55,490 --> 00:22:57,133
just like that, unsafely.

349
00:22:58,800 --> 00:23:01,870
Here, you can see the
function decompiled called

350
00:23:01,870 --> 00:23:05,380
as is used to be in my previous research.

351
00:23:05,380 --> 00:23:07,693
So for my previous research,

352
00:23:08,636 --> 00:23:11,990
all I had to do is to
pass a command injection

353
00:23:11,990 --> 00:23:14,257
in the upload file attributes,

354
00:23:14,257 --> 00:23:16,650
and as you can see, it just execute it

355
00:23:16,650 --> 00:23:18,233
without any validation.

356
00:23:20,810 --> 00:23:22,270
But the problem was that

357
00:23:22,270 --> 00:23:25,930
I had to be authenticated
to reach this function.

358
00:23:25,930 --> 00:23:27,653
I had to use a valid cookie.

359
00:23:32,170 --> 00:23:35,390
Okay, so to fix this,

360
00:23:35,390 --> 00:23:37,470
Ruckus decided to use a function

361
00:23:37,470 --> 00:23:41,240
called is_validate_input_string,

362
00:23:41,240 --> 00:23:43,060
that's supposed to validate

363
00:23:43,060 --> 00:23:45,220
there are no injection characters

364
00:23:45,220 --> 00:23:47,693
in the upload file attribute.

365
00:23:49,520 --> 00:23:54,520
This is an external Util
function found in a Libemf,

366
00:23:55,150 --> 00:23:58,803
and it's being used widely
for input validation.

367
00:24:04,290 --> 00:24:08,373
So let's have a look at
this validation function.

368
00:24:10,200 --> 00:24:14,243
Here are all the forbidden
characters for a given input.

369
00:24:15,090 --> 00:24:18,690
Well at first, this
validation seems pretty solid.

370
00:24:18,690 --> 00:24:20,723
However, some very important characters

371
00:24:20,723 --> 00:24:23,123
are missing from that list.

372
00:24:25,780 --> 00:24:29,260
So something I like to do
when reviewing a validator

373
00:24:29,260 --> 00:24:32,530
is to create a set of all the printable

374
00:24:32,530 --> 00:24:36,433
non-alphanumeric characters
that can pass this validator.

375
00:24:37,320 --> 00:24:40,930
And well, this is the
moment I would ask you guys,

376
00:24:40,930 --> 00:24:45,930
if you think alpha payload
using this set of characters.

377
00:24:47,370 --> 00:24:50,650
But thanks to coronavirus, I
can't really do this shtick.

378
00:24:50,650 --> 00:24:52,470
So nevermind.

379
00:24:52,470 --> 00:24:56,680
And anyway, after some trial and error,

380
00:24:56,680 --> 00:24:59,710
I realize as shebang sign,

381
00:24:59,710 --> 00:25:02,930
which is pound followed
by exclamation mark

382
00:25:02,930 --> 00:25:04,540
is a valid input.

383
00:25:04,540 --> 00:25:09,540
So I can also use slash,
and I can also use slash.

384
00:25:11,510 --> 00:25:15,863
So I can use at shebang
slash bin slash SH.

385
00:25:16,910 --> 00:25:19,870
So this is good, but not good enough.

386
00:25:19,870 --> 00:25:21,720
I can't just append these payloads

387
00:25:21,720 --> 00:25:24,163
to a command run by system.

388
00:25:25,020 --> 00:25:27,760
And well, this is because shebang

389
00:25:27,760 --> 00:25:29,760
should be in a line of its own.

390
00:25:29,760 --> 00:25:31,733
Yeah, it's usually the header.

391
00:25:33,480 --> 00:25:36,970
Luckily, I could also
use a new line character.

392
00:25:36,970 --> 00:25:39,370
Yeah, that is correct.

393
00:25:39,370 --> 00:25:42,170
New line character as a parameter input

394
00:25:42,170 --> 00:25:47,170
is not being sanitized, not
in the web server, nor emf.

395
00:25:47,290 --> 00:25:49,020
Amazing, right?

396
00:25:49,020 --> 00:25:53,343
Well, shebang plus a new line,

397
00:25:54,310 --> 00:25:57,931
it equals sweet sweet exploit love.

398
00:25:57,931 --> 00:26:00,020
Yeah, okay.

399
00:26:00,020 --> 00:26:02,753
So that was good news.

400
00:26:04,060 --> 00:26:08,180
I can now replace my
injection with shebang.

401
00:26:08,180 --> 00:26:12,593
But there was one thing left to solve.

402
00:26:13,750 --> 00:26:18,080
Space characters is
also not a valid input.

403
00:26:18,080 --> 00:26:22,453
So I simply replaced
them with tap characters.

404
00:26:24,130 --> 00:26:26,543
Let's have a new co on my new payload.

405
00:26:29,230 --> 00:26:32,293
You can see that for semi-colon,

406
00:26:33,560 --> 00:26:38,513
so I replaced semi-colon
with shebang plus a new line.

407
00:26:40,360 --> 00:26:43,543
And spaces were replaced by tab,

408
00:26:45,230 --> 00:26:46,240
and that's it.

409
00:26:46,240 --> 00:26:50,170
This is how I was able to reuse

410
00:26:50,170 --> 00:26:52,560
my command injection vulnerability.

411
00:26:52,560 --> 00:26:56,088
The next thing I had to do
to complete this exploit

412
00:26:56,088 --> 00:26:58,743
is bypass authentication again.

413
00:27:02,050 --> 00:27:05,040
Okay, so now I would like to explain

414
00:27:05,040 --> 00:27:08,933
how the admin credentials
are stored in the device.

415
00:27:10,710 --> 00:27:15,710
So system dot XML is the device
general configuration file.

416
00:27:16,410 --> 00:27:18,450
It contains the admin credential

417
00:27:18,450 --> 00:27:21,363
as well as other important configuration.

418
00:27:22,810 --> 00:27:27,720
Here, we can see that the
admin elements and its password

419
00:27:27,720 --> 00:27:32,470
is stored in the X password attribute.

420
00:27:32,470 --> 00:27:33,970
While working on this exploit,

421
00:27:33,970 --> 00:27:36,318
I noticed that Ruckus has decided

422
00:27:36,318 --> 00:27:39,830
to use the most secure mechanism

423
00:27:39,830 --> 00:27:43,650
for storing sensitive
passwords, as you can see here.

424
00:27:43,650 --> 00:27:46,770
So you might look at
this X password attribute

425
00:27:46,770 --> 00:27:49,743
and think that my password is 12345bcd.

426
00:27:52,410 --> 00:27:54,510
But that's not the case.

427
00:27:54,510 --> 00:27:59,510
My actual passport is 12345abcd.

428
00:28:00,129 --> 00:28:02,520
Yes, yes, yes.

429
00:28:02,520 --> 00:28:05,520
Ruckus are overskating the password

430
00:28:05,520 --> 00:28:08,103
by adding one to each character.

431
00:28:08,950 --> 00:28:10,094
Gosh, gosh.

432
00:28:10,094 --> 00:28:14,330
I just don't understand why won't they use

433
00:28:14,330 --> 00:28:17,320
a simple hash function, don't get it.

434
00:28:17,320 --> 00:28:19,473
But nevermind about that.

435
00:28:20,976 --> 00:28:25,200
Let's have a look at slash
admin slash underscore

436
00:28:26,100 --> 00:28:30,283
wla underscore cont dot jsp page.

437
00:28:31,520 --> 00:28:36,520
We can see that this page calls
for two functions in emfd.

438
00:28:37,020 --> 00:28:41,473
Log in without access check and AjaxConf.

439
00:28:42,813 --> 00:28:45,904
Please keep in mind that we
must pass the first function

440
00:28:45,904 --> 00:28:50,163
to get through AjaxConf, which
is the vulnerable function.

441
00:28:52,080 --> 00:28:55,890
So without login access check, expects

442
00:28:55,890 --> 00:28:59,140
and Ajax request XML

443
00:28:59,140 --> 00:29:04,140
that contains either SetConf
action or doConf action.

444
00:29:06,604 --> 00:29:09,050
The do, sorry,

445
00:29:09,050 --> 00:29:12,620
either setConf or do cmd action.

446
00:29:12,620 --> 00:29:17,150
The do cmd action in this
case was very limited

447
00:29:17,150 --> 00:29:20,963
and I decided to focus only on setConf.

448
00:29:23,730 --> 00:29:28,080
So setConf action calls an emfd functions

449
00:29:28,080 --> 00:29:32,993
called check research credentials
configuration parameter.

450
00:29:34,810 --> 00:29:39,440
This function expects an admin XML element

451
00:29:39,440 --> 00:29:41,083
with the following attributes.

452
00:29:43,920 --> 00:29:47,350
And please note that this function

453
00:29:47,350 --> 00:29:52,350
only validate the number of
elements, eight in this case,

454
00:29:52,440 --> 00:29:53,723
and it's only validated

455
00:29:53,723 --> 00:29:58,723
that the attributes are names
matches the one we see here.

456
00:29:59,620 --> 00:30:01,890
That means it won't check the value,

457
00:30:01,890 --> 00:30:05,890
only that a certain request
contains eight elements

458
00:30:05,890 --> 00:30:07,973
that matches with this name.

459
00:30:08,960 --> 00:30:13,960
And it doesn't check for any
web permissions whatsoever.

460
00:30:16,730 --> 00:30:20,460
Okay, so here we can
see a valid Ajax request

461
00:30:20,460 --> 00:30:22,723
with an admin element.

462
00:30:24,480 --> 00:30:27,100
So this request has all
the right attributes,

463
00:30:27,100 --> 00:30:29,940
as you can see eight and they're right

464
00:30:29,940 --> 00:30:34,103
and it can reach the
vulnerable AjaxConf function.

465
00:30:35,620 --> 00:30:39,699
Okay, so let's move to Ajax Conf.

466
00:30:39,699 --> 00:30:44,100
This is a very big function
that does all sorts of things.

467
00:30:44,100 --> 00:30:49,100
One of them is to use adapter_setConf

468
00:30:49,224 --> 00:30:51,883
to update different configuration file.

469
00:30:53,700 --> 00:30:55,076
In particular, it can update

470
00:30:55,076 --> 00:30:59,283
the main system dot XML configuration.

471
00:31:01,910 --> 00:31:05,210
As we saw, without login Xs

472
00:31:05,210 --> 00:31:09,223
forces me to use a specific XML element.

473
00:31:10,060 --> 00:31:15,059
But thankfully, this is the
admin credentials XML element.

474
00:31:15,059 --> 00:31:19,920
So now let's understand
how adapter_setConf works

475
00:31:19,920 --> 00:31:23,883
and maybe manipulate it to
write these credentials.

476
00:31:26,240 --> 00:31:31,240
So this is how adapters_setConf
function looks like.

477
00:31:32,900 --> 00:31:37,610
It receives the request
compliment attribute,

478
00:31:37,610 --> 00:31:41,563
and the Ajax request itself.

479
00:31:43,490 --> 00:31:48,490
I realized that if the
component equals to system,

480
00:31:49,310 --> 00:31:52,830
then it can only update
a specific XML element,

481
00:31:52,830 --> 00:31:55,960
which is not the admin element.

482
00:31:55,960 --> 00:31:59,680
So I can't just override
the admin credentials

483
00:31:59,680 --> 00:32:00,793
with this request.

484
00:32:04,020 --> 00:32:08,700
However, if the component
attribute is not equal to system,

485
00:32:08,700 --> 00:32:12,157
it uses a function called repoGetCurChild.

486
00:32:14,500 --> 00:32:17,521
And this function gets a component name

487
00:32:17,521 --> 00:32:22,433
and looks for an XML
configuration file with that name.

488
00:32:24,460 --> 00:32:28,410
So that means I can access any XML file

489
00:32:28,410 --> 00:32:30,490
in the airespider directory.

490
00:32:30,490 --> 00:32:34,860
Well, all of them, except
for the system XML,

491
00:32:34,860 --> 00:32:39,860
because adaptor_setConf
makes sure it's excluded,

492
00:32:40,223 --> 00:32:42,326
but the credentials I want to override

493
00:32:42,326 --> 00:32:47,033
are in the system dot
XML, which sucks, right?

494
00:32:49,020 --> 00:32:52,403
So this is where slash come to our rescue.

495
00:32:53,650 --> 00:32:56,438
I noticed that if I add a slash

496
00:32:56,438 --> 00:33:00,170
at the beginning of the
component attribute,

497
00:33:00,170 --> 00:33:02,960
it's no longer a system component,

498
00:33:02,960 --> 00:33:06,633
it's now a slash system component.

499
00:33:08,060 --> 00:33:12,053
So now I can pass this
system attribute check,

500
00:33:12,920 --> 00:33:17,770
and now get a repoGetCurChild function

501
00:33:17,770 --> 00:33:21,370
we look for the file slash system dot XML,

502
00:33:21,370 --> 00:33:23,650
not system dot XML,

503
00:33:23,650 --> 00:33:25,590
which is perfectly fine.

504
00:33:25,590 --> 00:33:29,623
In POSIX sense we can add
as many slashes as we want.

505
00:33:33,570 --> 00:33:36,165
Okay, that's about it.

506
00:33:36,165 --> 00:33:40,150
Adaptor_setConf has
replaced the admin element

507
00:33:40,150 --> 00:33:42,600
in system dot XML,

508
00:33:42,600 --> 00:33:46,403
which means I was able to
override the admin credentials.

509
00:33:49,420 --> 00:33:50,640
Now I just need

510
00:33:50,640 --> 00:33:53,393
to chain these two
vulnerabilities together.

511
00:33:55,100 --> 00:33:57,000
So first the override.

512
00:33:57,000 --> 00:34:00,190
Here, I'm overriding the admin credentials

513
00:34:00,190 --> 00:34:02,123
with password 1234,

514
00:34:04,820 --> 00:34:09,820
then run the command injection
to pop a shell on the device.

515
00:34:12,550 --> 00:34:16,090
Well, since I consider
myself a polite person,

516
00:34:16,090 --> 00:34:19,810
after getting a shell, I can
obtain the original credentials

517
00:34:19,810 --> 00:34:24,810
by grabbing slash VAR slash
run slash rpnkey asterix.

518
00:34:26,880 --> 00:34:31,380
This was the file that I was able to leak

519
00:34:31,380 --> 00:34:33,072
in the first research.

520
00:34:33,072 --> 00:34:38,072
Fortunately Ruckus insist on
saving passwords as plain text.

521
00:34:38,150 --> 00:34:41,710
So all is left to do
is to repeat the attack

522
00:34:41,710 --> 00:34:43,620
with the original credentials

523
00:34:43,620 --> 00:34:47,130
and avoid leaving any
footprint on the device

524
00:34:47,130 --> 00:34:49,373
'cause we are not that rude, right?

525
00:34:51,050 --> 00:34:51,883
Okay.

526
00:34:58,370 --> 00:35:02,150
So this is the time for my final demo.

527
00:35:02,150 --> 00:35:04,723
Again, I try to do it live-ish.

528
00:35:07,060 --> 00:35:10,573
Okay, so for that, I
need my terminal again.

529
00:35:12,080 --> 00:35:16,750
Okay, so first I would like
to override the credentials.

530
00:35:16,750 --> 00:35:21,750
So let me just show you the payload.

531
00:35:21,930 --> 00:35:25,610
So this is the request

532
00:35:25,610 --> 00:35:30,610
and let's just change that
password to DEFCON why not?

533
00:35:33,110 --> 00:35:35,273
And then 28 safemode.

534
00:35:36,820 --> 00:35:41,820
Awesome, okay, yes.

535
00:35:42,260 --> 00:35:46,810
And now I would like to post these XML.

536
00:35:46,810 --> 00:35:50,777
So I'm just posting it to
this admin _wla_conf.jsp,

537
00:35:56,801 --> 00:35:57,710
and this is it.

538
00:35:57,710 --> 00:36:00,240
I overrode with the credentials.

539
00:36:00,240 --> 00:36:03,783
Now I'll have to
authenticate again to log in.

540
00:36:06,770 --> 00:36:11,770
So let's go with, what
was it DEFCON28safemode.

541
00:36:16,190 --> 00:36:20,410
So this is just a standard login request,

542
00:36:20,410 --> 00:36:24,580
and I get the CSRF token and asset cookie.

543
00:36:24,580 --> 00:36:27,643
And now for my new...

544
00:36:29,570 --> 00:36:33,080
Oh, wait, I just wanna
show you guys my injection.

545
00:36:33,080 --> 00:36:35,440
So this is my new command injection

546
00:36:35,440 --> 00:36:40,440
where I use shebang, and
then new line telnetd tab

547
00:36:41,450 --> 00:36:46,450
and I'm gonna open a port
in 7331 on the device.

548
00:36:48,400 --> 00:36:51,750
Yes, okay.

549
00:36:51,750 --> 00:36:52,583
So this is it.

550
00:36:52,583 --> 00:36:57,313
Let me just update the
credentials real quick.

551
00:36:59,940 --> 00:37:02,140
This is the first one

552
00:37:02,140 --> 00:37:05,343
and that's their cookie.

553
00:37:06,240 --> 00:37:07,073
Okay.

554
00:37:10,030 --> 00:37:11,260
Great.

555
00:37:11,260 --> 00:37:15,243
So, just run it.

556
00:37:17,680 --> 00:37:19,070
Okay, that's it.

557
00:37:19,070 --> 00:37:21,890
And now for the moment of truth,

558
00:37:21,890 --> 00:37:26,890
I'll telnetd to 7331.

559
00:37:26,922 --> 00:37:31,922
And as you can see here
on the root, this is it.

560
00:37:35,240 --> 00:37:36,073
Okay.

561
00:37:44,040 --> 00:37:49,040
So in conclusion, today I
demonstrated two pre-auth RCEs.

562
00:37:50,424 --> 00:37:54,951
The first one was pre-auth
stack buffer overflow,

563
00:37:54,951 --> 00:37:57,480
and the second was command injection

564
00:37:57,480 --> 00:37:59,443
with credentials override.

565
00:38:01,760 --> 00:38:06,380
I will also share my new
and improved Ghidra script

566
00:38:06,380 --> 00:38:08,863
that really helped me with this research.

567
00:38:10,260 --> 00:38:14,141
Ruckus Networks was informed
about these vulnerabilities.

568
00:38:14,141 --> 00:38:17,873
I requested six CVE's
and they confirmed them.

569
00:38:19,410 --> 00:38:24,410
So in total, these two
research concluded in 17 CVE's

570
00:38:26,530 --> 00:38:29,533
that resulted in five different RCE's.

571
00:38:32,452 --> 00:38:35,060
and as I said in my previous talk,

572
00:38:35,060 --> 00:38:38,440
if there are any Ruckus
users who are watching this,

573
00:38:38,440 --> 00:38:39,850
you should stop what you're doing

574
00:38:39,850 --> 00:38:44,400
and check that you are running
the latest firmware update.

575
00:38:44,400 --> 00:38:49,400
If not, you may be a victim
to some very serious stuff.

576
00:38:51,600 --> 00:38:53,913
Okay, so that's it.

577
00:38:54,750 --> 00:38:57,673
These two research were tons of fun.

578
00:38:57,673 --> 00:39:00,490
I'm really glad that I helped Ruckus

579
00:39:00,490 --> 00:39:03,080
making their equipment more secure.

580
00:39:03,080 --> 00:39:05,520
I will post a second blog post

581
00:39:05,520 --> 00:39:10,260
with all the specific
at alephsecurity.com.

582
00:39:10,260 --> 00:39:13,840
Feel free to check out our
blog for my previous research

583
00:39:13,840 --> 00:39:18,083
and other amazing research
done by our group.

584
00:39:19,988 --> 00:39:20,821
That's it.

585
00:39:20,821 --> 00:39:22,536
Thank you very much for your attention.

586
00:39:22,536 --> 00:39:24,633
Stay safe and healthy.

587
00:39:27,199 --> 00:39:29,282
(cheers)

