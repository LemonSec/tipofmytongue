1
00:00:01,790 --> 00:00:04,260
- Good afternoon everyone
and thank you all for coming.

2
00:00:04,260 --> 00:00:07,670
This is abusing peer-to-peer
to hack 3 million cameras.

3
00:00:07,670 --> 00:00:10,680
This talk is the culmination
of about two years of research

4
00:00:10,680 --> 00:00:12,670
so I'm very excited to finally be able

5
00:00:12,670 --> 00:00:13,780
to share this with you all.

6
00:00:13,780 --> 00:00:15,430
And with that, let's get started.

7
00:00:16,870 --> 00:00:19,480
I'm going to be talking about
an obscure feature lurking

8
00:00:19,480 --> 00:00:21,590
in IoT devices around the world.

9
00:00:21,590 --> 00:00:24,500
Peer-to-peer is intended to
make life easier for people,

10
00:00:24,500 --> 00:00:27,130
but it's had the nasty side
effect of exposing millions

11
00:00:27,130 --> 00:00:28,740
of devices to the internet,

12
00:00:28,740 --> 00:00:31,820
even those behind
firewalls are not immune.

13
00:00:31,820 --> 00:00:33,420
Hundreds of different
brands that are affected

14
00:00:33,420 --> 00:00:36,130
by this including security
cameras, alarm systems

15
00:00:36,130 --> 00:00:37,970
and even baby monitors.

16
00:00:37,970 --> 00:00:40,330
But exposure is just
the tip of the iceberg.

17
00:00:40,330 --> 00:00:42,970
When hoards of insecure things
get put on the internet,

18
00:00:42,970 --> 00:00:46,130
you can bet the end result
is not going to be pretty.

19
00:00:46,130 --> 00:00:48,630
So I'm here to show you
just how bad this can get.

20
00:00:49,690 --> 00:00:50,610
By the end of this talk

21
00:00:50,610 --> 00:00:52,710
you'll see how peer-to-peer devices work,

22
00:00:52,710 --> 00:00:54,580
the numerous ways that can be exploited

23
00:00:54,580 --> 00:00:58,410
and finally, how a $40 purchase
from Amazon is all you need

24
00:00:58,410 --> 00:01:00,343
to start hacking into other devices.

25
00:01:01,780 --> 00:01:02,630
So who am I?

26
00:01:02,630 --> 00:01:05,940
My name is Paul Marrapese, I
am a security researcher based

27
00:01:05,940 --> 00:01:07,490
out of San Jose California,

28
00:01:07,490 --> 00:01:08,910
and I probably spend too

29
00:01:08,910 --> 00:01:11,420
much time getting angry at computers.

30
00:01:11,420 --> 00:01:13,530
I largely focus on offensive security

31
00:01:13,530 --> 00:01:15,080
and I work on the Red team

32
00:01:15,080 --> 00:01:17,450
at a certain enterprise cloud company.

33
00:01:17,450 --> 00:01:19,530
When I'm not breaking
things, I make music,

34
00:01:19,530 --> 00:01:21,010
I dabble in photography

35
00:01:21,010 --> 00:01:24,160
and I have two cats who
funny enough are the catalyst

36
00:01:24,160 --> 00:01:25,483
for this entire story.

37
00:01:27,390 --> 00:01:30,090
In 2018, I adopted a
pair of rescue kittens

38
00:01:30,090 --> 00:01:31,690
and I wanted to keep an eye on them

39
00:01:31,690 --> 00:01:34,260
as they slowly took over my apartment.

40
00:01:34,260 --> 00:01:36,980
I had an old IP camera from around 2002,

41
00:01:36,980 --> 00:01:38,580
but this was now 2018

42
00:01:38,580 --> 00:01:41,340
so I figured I could get
something a little better.

43
00:01:41,340 --> 00:01:44,300
Amazon has a wide selection of IP cameras

44
00:01:44,300 --> 00:01:46,610
and some are marked as Amazon's choice

45
00:01:46,610 --> 00:01:49,580
and there's quite a few
with decent enough reviews.

46
00:01:49,580 --> 00:01:52,990
This SV3C model for example is $40

47
00:01:52,990 --> 00:01:55,830
and it has four stars
with nearly 2000 reviews

48
00:01:55,830 --> 00:01:58,570
so it sounds like a pretty good deal.

49
00:01:58,570 --> 00:02:01,270
I figured this would be like
any other network device where

50
00:02:01,270 --> 00:02:02,830
if I wanted to view it externally,

51
00:02:02,830 --> 00:02:04,520
I would need to forward a port.

52
00:02:04,520 --> 00:02:05,510
But once I hooked it up,

53
00:02:05,510 --> 00:02:07,310
I realized I could immediately view it

54
00:02:07,310 --> 00:02:09,930
from my phone, no setup required.

55
00:02:09,930 --> 00:02:11,100
This shook me a little bit

56
00:02:11,100 --> 00:02:13,240
because it implies it's
either doing something

57
00:02:13,240 --> 00:02:14,600
to get around my router

58
00:02:14,600 --> 00:02:18,050
or it's sending my video through
some third party servers.

59
00:02:18,050 --> 00:02:20,943
Either way I'm freaked out
so I load up Wireshark.

60
00:02:22,050 --> 00:02:24,700
And as we can see, this
camera is very chatty,

61
00:02:24,700 --> 00:02:27,710
it's pinging three different
servers every 40 seconds two

62
00:02:27,710 --> 00:02:29,350
of which are in China.

63
00:02:29,350 --> 00:02:31,690
And as I continue
watching, I start noticing

64
00:02:31,690 --> 00:02:33,830
that sometimes my video is being funneled

65
00:02:33,830 --> 00:02:36,260
through mysterious servers
all over the world.

66
00:02:36,260 --> 00:02:38,440
At one point, I even
see this camera talking

67
00:02:38,440 --> 00:02:40,773
to a Comcast IP in a different state.

68
00:02:41,620 --> 00:02:43,590
It turns out a lot of people have noticed

69
00:02:43,590 --> 00:02:45,380
this sketchy behavior.

70
00:02:45,380 --> 00:02:47,650
There are a lot of
concerned reviews talking

71
00:02:47,650 --> 00:02:51,430
about this suspicious
traffic on UDP port 32100.

72
00:02:51,430 --> 00:02:53,040
Not just on my brand of camera

73
00:02:53,040 --> 00:02:55,240
but on many, many different models.

74
00:02:55,240 --> 00:02:57,130
So now I'm extremely intrigued,

75
00:02:57,130 --> 00:02:58,433
what is this exactly?

76
00:02:59,940 --> 00:03:01,380
Well this is peer-to-peer

77
00:03:01,380 --> 00:03:03,610
and I'm sure the name
is conjuring memories

78
00:03:03,610 --> 00:03:06,210
of file sharing networks
like Napster and Kazaa

79
00:03:06,210 --> 00:03:08,770
but the context here is
a little bit different.

80
00:03:08,770 --> 00:03:11,400
In the context of IoT
peer-to-peer is a feature

81
00:03:11,400 --> 00:03:13,040
that lets people connect to their device

82
00:03:13,040 --> 00:03:15,980
from anywhere in the world
without any special setup.

83
00:03:15,980 --> 00:03:18,270
You have to remember some
folks don't even know how

84
00:03:18,270 --> 00:03:21,430
to log into their routers,
nevermind how to forward a port.

85
00:03:21,430 --> 00:03:23,240
So vendors started coming up with ways

86
00:03:23,240 --> 00:03:24,960
to make connecting easier.

87
00:03:24,960 --> 00:03:26,310
To achieve this devices

88
00:03:26,310 --> 00:03:28,950
with peer-to-peer will
automatically work around both NAT

89
00:03:28,950 --> 00:03:32,380
and firewalls so anyone from
the outside can connect in.

90
00:03:32,380 --> 00:03:34,100
But thankfully your device doesn't have

91
00:03:34,100 --> 00:03:36,143
any gaping security holes, right?

92
00:03:37,059 --> 00:03:39,060
So where does this feature come from?

93
00:03:39,060 --> 00:03:40,810
Peer-to-Peer is not typically something

94
00:03:40,810 --> 00:03:43,770
that's developed in-house
by device manufacturers.

95
00:03:43,770 --> 00:03:45,540
There are actually
several different players

96
00:03:45,540 --> 00:03:48,090
in the industry who developed
peer-to-peer solutions

97
00:03:48,090 --> 00:03:50,440
and device makers will get it from them.

98
00:03:50,440 --> 00:03:52,040
So this originates from higher up

99
00:03:52,040 --> 00:03:54,750
in the supply chain, meaning
any faults in it are going

100
00:03:54,750 --> 00:03:57,200
to propagate downward very quickly.

101
00:03:57,200 --> 00:03:58,990
The largest is probably ThroughTek

102
00:03:58,990 --> 00:04:03,010
whose Kalay platform is in use
by over 66 million devices.

103
00:04:03,010 --> 00:04:04,210
If you've got a wise camera

104
00:04:04,210 --> 00:04:07,650
at home, chances are it's
using ThroughTek platform.

105
00:04:07,650 --> 00:04:10,150
This talk will focus on
two products in particular,

106
00:04:10,150 --> 00:04:14,120
CS2 network P2P and
Shenzhen Yunni iLnkP2P.

107
00:04:14,120 --> 00:04:16,340
According to CS2 their product is in use

108
00:04:16,340 --> 00:04:18,280
by over 50 million devices

109
00:04:18,280 --> 00:04:20,820
and iLnkP2P is actually a functionally

110
00:04:20,820 --> 00:04:22,810
identical clone of CS2.

111
00:04:22,810 --> 00:04:24,840
Its market share is relatively smaller,

112
00:04:24,840 --> 00:04:28,133
but it's still present in
over 3.6 million devices.

113
00:04:28,990 --> 00:04:30,640
So with peer-to-peer existing

114
00:04:30,640 --> 00:04:32,260
in over a hundred million devices,

115
00:04:32,260 --> 00:04:33,950
it's obviously a popular feature,

116
00:04:33,950 --> 00:04:36,100
but what are the risks here?

117
00:04:36,100 --> 00:04:39,080
Well primarily peer-to-peer
by its very nature is meant

118
00:04:39,080 --> 00:04:40,610
to expose devices.

119
00:04:40,610 --> 00:04:43,510
And this should be pretty scary given IoT

120
00:04:43,510 --> 00:04:45,080
has a pretty notorious history

121
00:04:45,080 --> 00:04:46,710
when it comes to security,

122
00:04:46,710 --> 00:04:48,390
but convenience always wins

123
00:04:48,390 --> 00:04:52,300
so devices are now punching
through your firewall by design.

124
00:04:52,300 --> 00:04:55,100
In many cases, there's no
way to turn this feature off

125
00:04:55,100 --> 00:04:58,070
and anyone that has your
devices, unique identifier

126
00:04:58,070 --> 00:05:00,700
or UID can easily connect to it.

127
00:05:00,700 --> 00:05:03,520
I'll be demonstrating how
these UIDs aren't exactly all

128
00:05:03,520 --> 00:05:05,280
that hard to come by.

129
00:05:05,280 --> 00:05:07,760
These devices are typically
running Linux under the hood

130
00:05:07,760 --> 00:05:10,040
with everything as route of course.

131
00:05:10,040 --> 00:05:11,290
So when you pair that

132
00:05:11,290 --> 00:05:14,290
with how they're also essentially
online without a firewall,

133
00:05:14,290 --> 00:05:18,180
the insanity of this whole
concept really starts to set in.

134
00:05:18,180 --> 00:05:20,510
Well, there are obvious risks like spying

135
00:05:20,510 --> 00:05:23,370
on someone's camera or
disabling their alarm system,

136
00:05:23,370 --> 00:05:26,770
those pale in comparison
to remote code execution.

137
00:05:26,770 --> 00:05:28,840
Malware leveraging the ability to punch

138
00:05:28,840 --> 00:05:31,563
through firewalls could
really spread like wildfire.

139
00:05:32,690 --> 00:05:34,840
So now we know what peer-to-peer does,

140
00:05:34,840 --> 00:05:36,330
and we've come up with a few ways

141
00:05:36,330 --> 00:05:38,210
that we can potentially have fun with it.

142
00:05:38,210 --> 00:05:39,760
Let's get a bit deeper here

143
00:05:39,760 --> 00:05:43,223
and see what one of these P2P
networks actually looks like.

144
00:05:44,950 --> 00:05:48,330
A peer-to-peer network is
governed by peer-to-peer servers

145
00:05:48,330 --> 00:05:52,260
and these are our gateways
to millions of devices.

146
00:05:52,260 --> 00:05:53,790
These servers are imperative

147
00:05:53,790 --> 00:05:55,670
to this whole system working properly

148
00:05:55,670 --> 00:05:56,949
and the reason for this is

149
00:05:56,949 --> 00:05:59,890
these servers actually
orchestrate everything.

150
00:05:59,890 --> 00:06:01,140
They manage devices,

151
00:06:01,140 --> 00:06:04,550
and they also are what handle
connections between users

152
00:06:04,550 --> 00:06:05,930
and their devices.

153
00:06:05,930 --> 00:06:08,070
You can basically think
of these as command

154
00:06:08,070 --> 00:06:09,610
and control servers.

155
00:06:09,610 --> 00:06:11,400
There are hundreds of
these on the internet

156
00:06:11,400 --> 00:06:14,180
because manufacturers will
have dedicated servers

157
00:06:14,180 --> 00:06:16,010
for their own devices.

158
00:06:16,010 --> 00:06:17,820
It's very common to see these hosted

159
00:06:17,820 --> 00:06:21,560
on a cloud providers like Alibaba and AWS

160
00:06:21,560 --> 00:06:24,783
and they typically
listen on UDP port 32100.

161
00:06:26,680 --> 00:06:30,170
Then of course you have devices
and these could be anything

162
00:06:30,170 --> 00:06:31,900
but the common theme here is

163
00:06:31,900 --> 00:06:35,090
these will be 100% internet accessible.

164
00:06:35,090 --> 00:06:37,040
A very important concept here is

165
00:06:37,040 --> 00:06:39,510
that all of these devices will have a UID

166
00:06:39,510 --> 00:06:41,080
or a unique identifier.

167
00:06:41,080 --> 00:06:42,889
And if someone knows your UID,

168
00:06:42,889 --> 00:06:44,480
they can connect to your device.

169
00:06:44,480 --> 00:06:47,050
So this isn't something
that you really want falling

170
00:06:47,050 --> 00:06:48,740
into the wrong hands.

171
00:06:48,740 --> 00:06:51,840
These UIDs are generated by
the peer-to-peer providers

172
00:06:51,840 --> 00:06:54,380
and burned into the device
during manufacturing

173
00:06:54,380 --> 00:06:56,870
so if someone learns your
UID, this isn't something

174
00:06:56,870 --> 00:06:58,580
you can change.

175
00:06:58,580 --> 00:07:00,750
Let's have a closer look at these.

176
00:07:00,750 --> 00:07:03,750
A UID has three separate parts, a prefix,

177
00:07:03,750 --> 00:07:05,900
a serial number and a check code.

178
00:07:05,900 --> 00:07:08,350
The prefix is basically
used for product grouping

179
00:07:08,350 --> 00:07:11,060
and a single vendor may
have several of these

180
00:07:11,060 --> 00:07:13,050
and their server will only respond

181
00:07:13,050 --> 00:07:15,620
to their own specific prefixes.

182
00:07:15,620 --> 00:07:18,150
The serial is simply the device identifier

183
00:07:18,150 --> 00:07:20,870
and these are effectively
just sequential numbers.

184
00:07:20,870 --> 00:07:24,140
And finally, the check
code is a security feature.

185
00:07:24,140 --> 00:07:25,970
It's used to protect UIDs

186
00:07:25,970 --> 00:07:28,020
and also try to prevent device spoofing.

187
00:07:28,020 --> 00:07:30,640
A peer-to-peer server
will reject any requests

188
00:07:30,640 --> 00:07:32,440
where the check code is not correct.

189
00:07:34,160 --> 00:07:36,010
And finally, there are clients,

190
00:07:36,010 --> 00:07:39,540
a client could be any desktop
or mobile app for connecting

191
00:07:39,540 --> 00:07:40,570
to a device.

192
00:07:40,570 --> 00:07:43,270
It could be for viewing
video, retrieving files

193
00:07:43,270 --> 00:07:45,880
or even configuring an alarm system.

194
00:07:45,880 --> 00:07:47,750
But before a client can do any

195
00:07:47,750 --> 00:07:50,490
of that the user needs to put in their UID

196
00:07:50,490 --> 00:07:52,493
so the client can make the connection.

197
00:07:54,490 --> 00:07:56,820
And under the hood this whole thing runs

198
00:07:56,820 --> 00:07:59,280
on a fairly basic UDP protocol.

199
00:07:59,280 --> 00:08:01,750
There are control messages
for setting up connections

200
00:08:01,750 --> 00:08:04,860
and DRW or device read/write messages

201
00:08:04,860 --> 00:08:07,490
that actually wrap the application data.

202
00:08:07,490 --> 00:08:09,360
Messages are really just C structures

203
00:08:09,360 --> 00:08:10,640
with a 4-byte header

204
00:08:10,640 --> 00:08:14,120
and a signature of this
protocol is its magic number.

205
00:08:14,120 --> 00:08:16,690
The first byte of any
peer-to-peer message we'll begin

206
00:08:16,690 --> 00:08:19,150
with hexadecimal F1.

207
00:08:19,150 --> 00:08:21,350
And thanks to debug information being left

208
00:08:21,350 --> 00:08:23,840
in it was fairly easy
to reverse this protocol

209
00:08:23,840 --> 00:08:25,010
and I was actually able

210
00:08:25,010 --> 00:08:27,183
to create a Wireshark dissector for it.

211
00:08:28,530 --> 00:08:29,810
This was done using a plugin

212
00:08:29,810 --> 00:08:31,930
called Wireshark Generic Dissector,

213
00:08:31,930 --> 00:08:33,970
which lets you quickly write dissector

214
00:08:33,970 --> 00:08:35,820
using a declarative language.

215
00:08:35,820 --> 00:08:37,630
I'll actually be releasing this today

216
00:08:37,630 --> 00:08:40,760
so if you have any devices that use P2P,

217
00:08:40,760 --> 00:08:42,700
you can use this to get
a little more insight

218
00:08:42,700 --> 00:08:43,803
into what's going on.

219
00:08:46,280 --> 00:08:48,970
So with all that, we're
falling at the crux of this,

220
00:08:48,970 --> 00:08:51,130
how does this connection actually happen?

221
00:08:51,130 --> 00:08:52,470
Or more importantly,

222
00:08:52,470 --> 00:08:55,220
how does peer-to-peer punch
a hole through your firewall?

223
00:08:55,220 --> 00:08:56,530
As I mentioned I was able

224
00:08:56,530 --> 00:08:59,570
to access this camera
without forwarding any ports.

225
00:08:59,570 --> 00:09:02,600
The magic trick here
really isn't magic at all.

226
00:09:02,600 --> 00:09:04,300
Peer-to-peer is simply takes advantage

227
00:09:04,300 --> 00:09:07,453
of a particular behavior
present in that in firewalls.

228
00:09:08,400 --> 00:09:11,740
UDP hole punching is a way to
establish direct connections

229
00:09:11,740 --> 00:09:13,330
in the presence of NAT.

230
00:09:13,330 --> 00:09:14,200
For those unfamiliar

231
00:09:14,200 --> 00:09:16,080
with the terminology NAT is just

232
00:09:16,080 --> 00:09:17,580
network address translation,

233
00:09:17,580 --> 00:09:19,890
which is used by routers
to forward traffic

234
00:09:19,890 --> 00:09:22,842
from the internet to the
proper host on the land.

235
00:09:22,842 --> 00:09:25,610
The router does this by
watching outbound packets

236
00:09:25,610 --> 00:09:27,750
and automatically creating inbound rules

237
00:09:27,750 --> 00:09:30,410
to correctly bring the response back in.

238
00:09:30,410 --> 00:09:32,600
The router needs to do
this because if it didn't,

239
00:09:32,600 --> 00:09:36,380
we wouldn't be able to get
responses back from our requests.

240
00:09:36,380 --> 00:09:39,550
But consider if two networks
that are using NAT want

241
00:09:39,550 --> 00:09:40,830
to talk to each other,

242
00:09:40,830 --> 00:09:43,520
any packet sent to the
other is going to be dropped

243
00:09:43,520 --> 00:09:45,690
because no forwarding rules exist.

244
00:09:45,690 --> 00:09:47,910
So how can we get around this?

245
00:09:47,910 --> 00:09:50,060
Well, this is actually
one of the main functions

246
00:09:50,060 --> 00:09:51,770
of the peer-to-peer servers.

247
00:09:51,770 --> 00:09:54,990
Both sides can use a peer-to-peer
server to swap addresses

248
00:09:54,990 --> 00:09:56,130
with each other.

249
00:09:56,130 --> 00:09:58,100
And at that point they can go ahead

250
00:09:58,100 --> 00:10:00,080
and send packets at each other.

251
00:10:00,080 --> 00:10:02,580
This will punch holes
in their respective NATs

252
00:10:02,580 --> 00:10:05,500
and let traffic from the
other side come through.

253
00:10:05,500 --> 00:10:08,830
In summary, just by sending
UDP packets to each other

254
00:10:08,830 --> 00:10:12,790
both sides can create a direct
channel of communication.

255
00:10:14,150 --> 00:10:17,000
So this demonstrates how this works.

256
00:10:17,000 --> 00:10:18,880
When a connection request happens,

257
00:10:18,880 --> 00:10:20,620
the peer-to-peer servers will tell

258
00:10:20,620 --> 00:10:23,080
both sides the other's information.

259
00:10:23,080 --> 00:10:26,180
The device will send a packet
to the client and vice versa.

260
00:10:26,180 --> 00:10:28,800
And even though these may
not actually be delivered,

261
00:10:28,800 --> 00:10:32,500
that doesn't matter the point
here is just to open ports.

262
00:10:32,500 --> 00:10:34,370
After both sides have done this,

263
00:10:34,370 --> 00:10:37,530
then they should be able
to talk to each other.

264
00:10:37,530 --> 00:10:40,070
But the problem with UDP
hole punching is it doesn't

265
00:10:40,070 --> 00:10:43,360
always work, it usually works
with most home networks,

266
00:10:43,360 --> 00:10:46,700
but it might not work in
more complicated enterprise

267
00:10:46,700 --> 00:10:48,380
or mobile networks.

268
00:10:48,380 --> 00:10:50,120
For this situation a client

269
00:10:50,120 --> 00:10:52,600
and device can use what's
called a relay server,

270
00:10:52,600 --> 00:10:55,790
which exists on the network
specifically to help clients

271
00:10:55,790 --> 00:10:57,810
and devices make connections.

272
00:10:57,810 --> 00:11:00,340
As long as both sides can
connect to the same relay,

273
00:11:00,340 --> 00:11:02,423
then it can proxy data between them.

274
00:11:04,100 --> 00:11:05,730
What's really fascinating is

275
00:11:05,730 --> 00:11:08,980
that some networks will
actually use people's devices

276
00:11:08,980 --> 00:11:11,430
as extra relays for the network.

277
00:11:11,430 --> 00:11:14,470
And that means someone else's camera may

278
00:11:14,470 --> 00:11:17,820
very well be proxying your own video feed.

279
00:11:17,820 --> 00:11:19,250
These are called super devices

280
00:11:19,250 --> 00:11:22,500
and this behavior is
kept secret from users.

281
00:11:22,500 --> 00:11:24,540
They are never asked if they are okay

282
00:11:24,540 --> 00:11:26,280
with having their bandwidth donated

283
00:11:26,280 --> 00:11:27,600
and if they have quotas

284
00:11:27,600 --> 00:11:29,930
this could certainly cause a problem.

285
00:11:29,930 --> 00:11:31,420
And as sketchy as this sounds,

286
00:11:31,420 --> 00:11:33,300
this concept isn't actually unheard

287
00:11:33,300 --> 00:11:37,040
of the more standard terminology
for these is supernodes.

288
00:11:37,040 --> 00:11:39,650
And there were relatively
common occurrence

289
00:11:39,650 --> 00:11:41,460
in peer-to-peer software.

290
00:11:41,460 --> 00:11:43,400
Skype actually used to do this too,

291
00:11:43,400 --> 00:11:46,160
but at least people had
the ability to opt out

292
00:11:46,160 --> 00:11:50,160
of that, spoiler alert we're
gonna have fun with these.

293
00:11:50,160 --> 00:11:51,830
Okay so with the background out

294
00:11:51,830 --> 00:11:55,000
of the way now we can start
getting to the really goodstuff.

295
00:11:55,000 --> 00:11:56,870
Since these networks
are supporting millions

296
00:11:56,870 --> 00:11:59,930
of devices, is there anything
we can do to hunt them down?

297
00:11:59,930 --> 00:12:02,470
And specifically, is
there any way we can guess

298
00:12:02,470 --> 00:12:04,083
or generate UIDs.

299
00:12:05,370 --> 00:12:08,100
If we want to do this, the
first step is going to be

300
00:12:08,100 --> 00:12:09,930
to find some peer-to-peer servers.

301
00:12:09,930 --> 00:12:11,780
Again these are essentially gateways

302
00:12:11,780 --> 00:12:15,050
to devices so finding
them has a lot of value.

303
00:12:15,050 --> 00:12:18,280
I started doing this by looking
at desktop and phone apps,

304
00:12:18,280 --> 00:12:21,820
as these are obviously going
to be using a vendor's servers.

305
00:12:21,820 --> 00:12:23,410
However, this is a bit tedious

306
00:12:23,410 --> 00:12:26,370
and there is a much more
efficient way to do it.

307
00:12:26,370 --> 00:12:29,600
We can use an nmaps host
detection to do this.

308
00:12:29,600 --> 00:12:31,770
The protocol has a simple hello message

309
00:12:31,770 --> 00:12:34,340
and any valid peer-to-peer
server will come back

310
00:12:34,340 --> 00:12:35,680
with an ACT message.

311
00:12:35,680 --> 00:12:37,470
So we can configure this probe

312
00:12:37,470 --> 00:12:40,390
and then run it against
the entire IP space

313
00:12:40,390 --> 00:12:43,180
of a cloud provider like AWS or Alibaba.

314
00:12:43,180 --> 00:12:46,140
AWS in particular is very kind

315
00:12:46,140 --> 00:12:47,980
and provides an up-to-date listing

316
00:12:47,980 --> 00:12:50,450
of their current IP ranges.

317
00:12:50,450 --> 00:12:54,400
I've come across 618
peer-to-peer servers since 2018

318
00:12:54,400 --> 00:12:56,350
and some basic fingerprinting has shown

319
00:12:56,350 --> 00:13:01,033
that 86% of these are
CS2 and 14 are iLnkP2P.

320
00:13:02,870 --> 00:13:06,010
So next, if we want to use
these servers to find devices,

321
00:13:06,010 --> 00:13:08,760
we're gonna need to find out
what prefixes they support.

322
00:13:08,760 --> 00:13:11,250
Like before I started
looking for these in apps

323
00:13:11,250 --> 00:13:12,960
and even Amazon reviews,

324
00:13:12,960 --> 00:13:16,050
because sometimes people
will include their UIDs

325
00:13:16,050 --> 00:13:19,140
in their photos without
realizing what they're doing.

326
00:13:19,140 --> 00:13:21,830
These two reviews have 11 different UIDs

327
00:13:21,830 --> 00:13:23,820
and they're using three
different prefixes,

328
00:13:23,820 --> 00:13:26,930
but sifting through these
is also kind of tedious

329
00:13:26,930 --> 00:13:29,070
and quickly provides diminishing returns

330
00:13:29,070 --> 00:13:31,420
so what is a better way?

331
00:13:31,420 --> 00:13:32,650
Well, when we try to connect

332
00:13:32,650 --> 00:13:34,700
to a device the server will respond

333
00:13:34,700 --> 00:13:37,270
with an area code if the UID is invalid,

334
00:13:37,270 --> 00:13:39,330
but that area code will change depending

335
00:13:39,330 --> 00:13:41,760
on if the prefix you asked for is valid.

336
00:13:41,760 --> 00:13:44,550
So I wrote a script to
brute force prefixes,

337
00:13:44,550 --> 00:13:46,380
it continuously sends requests

338
00:13:46,380 --> 00:13:49,340
and saves any prefixes
that appear to be valid.

339
00:13:49,340 --> 00:13:50,410
There's no rate limiting

340
00:13:50,410 --> 00:13:52,870
or checks to prevent this sort of thing.

341
00:13:52,870 --> 00:13:55,210
And depending on the latency between you

342
00:13:55,210 --> 00:13:58,050
and the server, you can find
all three letter prefixes

343
00:13:58,050 --> 00:14:00,670
in about an hour and
all four letter prefixes

344
00:14:00,670 --> 00:14:02,450
in about 36 hours,

345
00:14:02,450 --> 00:14:06,380
in total I have found about
488 distinct prefixes.

346
00:14:06,380 --> 00:14:09,510
And while the average server
hosts about four prefixes,

347
00:14:09,510 --> 00:14:11,683
there are a couple that have 130.

348
00:14:12,890 --> 00:14:16,250
So we're at a point where
we've got servers and we know

349
00:14:16,250 --> 00:14:17,810
which prefixes they support.

350
00:14:17,810 --> 00:14:19,490
We can also predict serial numbers

351
00:14:19,490 --> 00:14:21,760
because they're just sequential numbers.

352
00:14:21,760 --> 00:14:24,840
If we wanna find UIDs the
problem is now the check code,

353
00:14:24,840 --> 00:14:28,150
which exists precisely to
stop this sort of thing.

354
00:14:28,150 --> 00:14:29,150
If the check code is off

355
00:14:29,150 --> 00:14:32,110
by even one letter, the
UID will be rejected.

356
00:14:32,110 --> 00:14:33,380
These are five letters long,

357
00:14:33,380 --> 00:14:35,530
and while that's not
an impossible key space

358
00:14:35,530 --> 00:14:38,590
to brute force, it's still
enough to thwart any efforts

359
00:14:38,590 --> 00:14:41,130
to find a large number of devices quickly.

360
00:14:41,130 --> 00:14:43,003
So how can we get around this?

361
00:14:44,770 --> 00:14:47,850
Well with iLnkP2P luck
would be in our favor.

362
00:14:47,850 --> 00:14:50,610
I found a variant of the iLnkP2P library

363
00:14:50,610 --> 00:14:52,470
that contained the algorithm they use

364
00:14:52,470 --> 00:14:54,190
to generate check codes.

365
00:14:54,190 --> 00:14:58,110
It basically hashes a few
components using our modified MD5

366
00:14:58,110 --> 00:14:59,590
and then puts together the letters

367
00:14:59,590 --> 00:15:01,900
from the hash to create the check code.

368
00:15:01,900 --> 00:15:04,010
This was apparently
included in the library

369
00:15:04,010 --> 00:15:06,490
to do client-side UID validation,

370
00:15:06,490 --> 00:15:09,620
which is odd given the peer-to-peer
server does this anyway,

371
00:15:09,620 --> 00:15:12,580
but someone thought it was
a good idea to ship this.

372
00:15:12,580 --> 00:15:13,800
This is a big deal

373
00:15:13,800 --> 00:15:17,510
because we can now generate
any valid iLnk UID meaning

374
00:15:17,510 --> 00:15:21,410
we can now connect to on
any online iLnk device.

375
00:15:21,410 --> 00:15:22,440
And with this ability,

376
00:15:22,440 --> 00:15:25,790
we can start to do some very
interesting things for one,

377
00:15:25,790 --> 00:15:28,700
we can now find out how
many devices are online,

378
00:15:28,700 --> 00:15:31,580
but what would be even more
interesting is finding out

379
00:15:31,580 --> 00:15:33,360
where these devices are.

380
00:15:33,360 --> 00:15:37,140
We can use a UID to get the IP
address of a device and using

381
00:15:37,140 --> 00:15:41,053
that we can approximate its
location using IP geolocation.

382
00:15:43,010 --> 00:15:45,890
So what you're seeing here is
an enumeration script I wrote,

383
00:15:45,890 --> 00:15:49,100
it generates a UID, grabs
its IP from the servers,

384
00:15:49,100 --> 00:15:52,330
and then it looks it up using
Maxmind GeoLite database,

385
00:15:52,330 --> 00:15:54,883
this is going at 10,000
requests per minute.

386
00:15:56,610 --> 00:15:58,130
Taking this another step further,

387
00:15:58,130 --> 00:15:59,980
I was able to visualize this data

388
00:15:59,980 --> 00:16:01,390
with leaflet marker cluster

389
00:16:01,390 --> 00:16:02,830
and open street map,

390
00:16:02,830 --> 00:16:06,080
of the 3.6 million devices
I've seen Europe makes up

391
00:16:06,080 --> 00:16:09,690
about 21% of this with
France, Italy, Germany,

392
00:16:09,690 --> 00:16:11,160
and the United Kingdom all having

393
00:16:11,160 --> 00:16:13,640
over a hundred thousand devices.

394
00:16:13,640 --> 00:16:16,240
North America makes up
about 8% of this total

395
00:16:16,240 --> 00:16:19,240
with the US seeing over 205,000 devices

396
00:16:19,240 --> 00:16:22,913
and Canada and Mexico both
having over 40,000 each.

397
00:16:26,470 --> 00:16:28,690
Finally Asia is the most heavily impacted

398
00:16:28,690 --> 00:16:31,050
with over 1.8 million devices,

399
00:16:31,050 --> 00:16:33,400
China and Thailand alone
make up more than half

400
00:16:33,400 --> 00:16:34,783
of the entire dataset.

401
00:16:36,090 --> 00:16:39,440
Horrifyingly lots of these
devices use default passwords,

402
00:16:39,440 --> 00:16:43,310
meaning the UID is enough to
gain full access to the camera.

403
00:16:43,310 --> 00:16:46,310
I discloses to Shenzhen
Yunni in early 2019,

404
00:16:46,310 --> 00:16:47,840
but despite multiple attempts,

405
00:16:47,840 --> 00:16:50,180
I never received a
response back from them.

406
00:16:50,180 --> 00:16:51,660
And despite this vulnerability,

407
00:16:51,660 --> 00:16:55,250
I've continued to see an
increase in the use of iLnkP2P.

408
00:16:55,250 --> 00:16:56,380
In fact thousands

409
00:16:56,380 --> 00:16:59,670
of new UIDs come online
every single month.

410
00:16:59,670 --> 00:17:02,640
CS2 doesn't appear to be
affected by this vulnerability,

411
00:17:02,640 --> 00:17:04,653
but that's not the end of the story.

412
00:17:06,470 --> 00:17:08,530
So now I have a way to directly connect

413
00:17:08,530 --> 00:17:09,670
to millions of cameras,

414
00:17:09,670 --> 00:17:12,330
but I'm not really interested
in spying on people

415
00:17:12,330 --> 00:17:14,320
or talking through their cameras.

416
00:17:14,320 --> 00:17:17,400
That's creepy and frankly,
we're not in middle school here.

417
00:17:17,400 --> 00:17:20,090
What we really want is shells.

418
00:17:20,090 --> 00:17:22,990
So let's find some camera vulnerabilities.

419
00:17:22,990 --> 00:17:24,040
When planning for this,

420
00:17:24,040 --> 00:17:27,960
I really wanted to focus on a
big vendor for maximum impact,

421
00:17:27,960 --> 00:17:31,630
Shenzhen Hichip vision technology
is a major manufacturer

422
00:17:31,630 --> 00:17:33,780
in the IP camera industry.

423
00:17:33,780 --> 00:17:36,260
They caught my attention
because as I was looking

424
00:17:36,260 --> 00:17:37,380
into different brands,

425
00:17:37,380 --> 00:17:39,620
I started to realize that a huge number

426
00:17:39,620 --> 00:17:42,600
of them were ultimately
manufactured by Hichip.

427
00:17:42,600 --> 00:17:44,340
In fact, close to 3 million

428
00:17:44,340 --> 00:17:47,863
of the iLnk devices I have
found are using Hichip prefixes.

429
00:17:49,630 --> 00:17:51,400
This sort of practice is very common

430
00:17:51,400 --> 00:17:54,230
where manufacturers will
sell weight labeled equipment

431
00:17:54,230 --> 00:17:57,450
to vendors who then resell
it with their own branding.

432
00:17:57,450 --> 00:17:59,335
This is a list of 50 different brands

433
00:17:59,335 --> 00:18:02,110
that are actually using
Hichip under the hood.

434
00:18:02,110 --> 00:18:05,100
So given their ubiquity
any vulnerabilities

435
00:18:05,100 --> 00:18:07,760
in Hichips firmware
would be both widespread

436
00:18:07,760 --> 00:18:09,103
and very accessible.

437
00:18:11,680 --> 00:18:14,500
So to get started, I began
analyzing their firmware.

438
00:18:14,500 --> 00:18:17,440
One function of interest was
this read request method,

439
00:18:17,440 --> 00:18:19,680
which is used to handle
any commands coming

440
00:18:19,680 --> 00:18:22,330
in over a peer-to-peer,
it even handles login,

441
00:18:22,330 --> 00:18:26,750
and we've got a 1024 byte buffer
to read data off the wire.

442
00:18:26,750 --> 00:18:28,130
The message header has a field

443
00:18:28,130 --> 00:18:29,680
that says how big the payload is

444
00:18:29,680 --> 00:18:31,920
so of course that's validated.

445
00:18:31,920 --> 00:18:35,000
To allow 10 times the size of the buffer.

446
00:18:35,000 --> 00:18:38,190
Okay so we've clearly got
a buffer overflow here,

447
00:18:38,190 --> 00:18:40,170
but how easy is it to exploit this?

448
00:18:40,170 --> 00:18:42,810
Because after all there have been defenses

449
00:18:42,810 --> 00:18:45,830
to stop exploits like this for years

450
00:18:45,830 --> 00:18:48,650
and the library doesn't
seem to use any of them.

451
00:18:48,650 --> 00:18:51,350
So one very reliable Rob gadget letter,

452
00:18:51,350 --> 00:18:53,390
and we've got ourselves a system call

453
00:18:53,390 --> 00:18:55,983
and then a reverse shell
with root privileges.

454
00:18:58,020 --> 00:19:00,100
Obviously any vulnerability is bad,

455
00:19:00,100 --> 00:19:02,280
but the most devastating
really tend to be those

456
00:19:02,280 --> 00:19:03,120
that are pre-auth

457
00:19:03,120 --> 00:19:06,020
because any anonymous
person can explain them.

458
00:19:06,020 --> 00:19:09,420
In this case as long as you
have a UID, you can get a shell,

459
00:19:09,420 --> 00:19:12,003
and we now have all the UIDs.

460
00:19:13,350 --> 00:19:15,430
Once you get a shell, you can run binaries

461
00:19:15,430 --> 00:19:17,000
you can browse the file system

462
00:19:17,000 --> 00:19:19,310
and you can even access
the camera's password.

463
00:19:19,310 --> 00:19:23,020
You can even directly invoke
the cameras wifi utilities

464
00:19:23,020 --> 00:19:25,520
and here's why this is a really bad thing.

465
00:19:25,520 --> 00:19:27,510
You can do a lot of really crazy things

466
00:19:27,510 --> 00:19:29,500
with base station Mac addresses.

467
00:19:29,500 --> 00:19:32,490
Google has an entire API
that uses Mac addresses

468
00:19:32,490 --> 00:19:35,490
to perform disturbingly
accurate geolocation.

469
00:19:35,490 --> 00:19:37,180
And the more information you give it,

470
00:19:37,180 --> 00:19:39,760
the more accurate the
results are going to be.

471
00:19:39,760 --> 00:19:40,645
So once you get a shell,

472
00:19:40,645 --> 00:19:43,720
you can use it to scan
for nearby wifi networks

473
00:19:43,720 --> 00:19:47,240
and potentially pinpoint the
exact location of a camera.

474
00:19:47,240 --> 00:19:48,760
If you want to try this yourself,

475
00:19:48,760 --> 00:19:51,180
check out Google's geolocation API,

476
00:19:51,180 --> 00:19:53,970
feed it some Mac addresses
of nearby wireless networks

477
00:19:53,970 --> 00:19:56,250
and see just how accurate it can get.

478
00:19:56,250 --> 00:19:58,523
It costs literally pennies to do this.

479
00:20:00,180 --> 00:20:02,780
It's hard to say exactly how
many devices are affected

480
00:20:02,780 --> 00:20:03,940
by this vulnerability

481
00:20:03,940 --> 00:20:05,380
but given I found this bug

482
00:20:05,380 --> 00:20:07,510
in almost two years worth of firmware,

483
00:20:07,510 --> 00:20:09,270
I think it's a pretty safe bet to say

484
00:20:09,270 --> 00:20:10,480
that this could be weaponized,

485
00:20:10,480 --> 00:20:12,700
but thankfully Hichip did release a patch

486
00:20:12,700 --> 00:20:14,223
for this in June, 2020.

487
00:20:15,610 --> 00:20:17,900
I did find another
vulnerability worth mentioning.

488
00:20:17,900 --> 00:20:19,750
It's not exploitable over P2P,

489
00:20:19,750 --> 00:20:21,750
but it's still pretty amusing.

490
00:20:21,750 --> 00:20:24,740
Up until recently you could
anonymously reset the password

491
00:20:24,740 --> 00:20:28,280
of any Hichip camera just
by being on the same lan.

492
00:20:28,280 --> 00:20:30,000
The reason for this is apparently

493
00:20:30,000 --> 00:20:33,070
some devices don't have
physical reset switches

494
00:20:33,070 --> 00:20:36,130
so instead you can just send
a magic packet to the camera

495
00:20:36,130 --> 00:20:38,470
and it'll reset the password to admin.

496
00:20:38,470 --> 00:20:40,230
I'll be releasing a script for this,

497
00:20:40,230 --> 00:20:43,010
but I actually found out
Hichip provided a tool

498
00:20:43,010 --> 00:20:44,190
to do this already

499
00:20:44,190 --> 00:20:47,700
so I'm not sure if this
qualifies as an exploit per se,

500
00:20:47,700 --> 00:20:49,593
but have fun with this.

501
00:20:51,270 --> 00:20:53,510
Okay still got a few
more tricks up my sleeve,

502
00:20:53,510 --> 00:20:56,090
let's talk about
man-in-the-middle attacks.

503
00:20:56,090 --> 00:20:58,140
When people hear man-in-the-middle attack,

504
00:20:58,140 --> 00:21:00,700
they might associate it with
something that's restricted

505
00:21:00,700 --> 00:21:02,680
to the local network, sniffing packets

506
00:21:02,680 --> 00:21:04,930
at a coffee shop for example.

507
00:21:04,930 --> 00:21:07,640
Peer-to-peer should be
pretty scary by now,

508
00:21:07,640 --> 00:21:09,700
but we haven't even
talked about how it lets

509
00:21:09,700 --> 00:21:11,713
you intercept traffic over the internet.

510
00:21:12,740 --> 00:21:14,160
This comes from the fact that

511
00:21:14,160 --> 00:21:17,050
as we now know, the peer-to-peer
servers are responsible

512
00:21:17,050 --> 00:21:19,420
for coordinating all connections,

513
00:21:19,420 --> 00:21:21,570
clients and devices obey the orders

514
00:21:21,570 --> 00:21:23,100
of the peer-to-peer servers.

515
00:21:23,100 --> 00:21:26,180
So if we can influence
that process in any way,

516
00:21:26,180 --> 00:21:29,380
we may be able to insert
ourselves into a session.

517
00:21:29,380 --> 00:21:30,990
This is particularly scary

518
00:21:30,990 --> 00:21:33,040
because despite being a transport layer

519
00:21:33,040 --> 00:21:36,180
for the application, peer-to-peer
doesn't actually perform

520
00:21:36,180 --> 00:21:38,400
any encryption or identity checks.

521
00:21:38,400 --> 00:21:41,170
These measures are left
entirely up to the application

522
00:21:41,170 --> 00:21:44,860
and as you can guess, most don't
do a very good job of this.

523
00:21:44,860 --> 00:21:48,140
In fact some even outright lie about it.

524
00:21:48,140 --> 00:21:50,770
This is a screenshot from VistarCam's app,

525
00:21:50,770 --> 00:21:53,730
which assures you that it is
building an encrypted channel,

526
00:21:53,730 --> 00:21:56,560
but as you can see from the
packet capture on the right,

527
00:21:56,560 --> 00:21:59,263
there is absolutely no
encryption happening here.

528
00:22:01,130 --> 00:22:02,870
So how do we get in the middle?

529
00:22:02,870 --> 00:22:05,410
Well, once per minute a device is going

530
00:22:05,410 --> 00:22:07,650
to log into it's peer-to-peer servers.

531
00:22:07,650 --> 00:22:10,860
This action tells the servers
where the client needs to go

532
00:22:10,860 --> 00:22:12,930
when they request a connection.

533
00:22:12,930 --> 00:22:14,840
The problem is this login message

534
00:22:14,840 --> 00:22:16,980
just contains the device UID,

535
00:22:16,980 --> 00:22:20,200
absolutely no device
specific secret is used,

536
00:22:20,200 --> 00:22:23,160
which means if we have
a UID it's very easy

537
00:22:23,160 --> 00:22:25,410
for us to forge this login message

538
00:22:25,410 --> 00:22:27,580
and confuse the servers.

539
00:22:27,580 --> 00:22:29,520
And if our timing is right,

540
00:22:29,520 --> 00:22:31,170
when the client requests a session,

541
00:22:31,170 --> 00:22:33,660
the peer-to-peer server will tell them

542
00:22:33,660 --> 00:22:35,460
that where the device.

543
00:22:35,460 --> 00:22:37,930
And at that point, the
client will happily try

544
00:22:37,930 --> 00:22:39,240
to authenticate to us.

545
00:22:39,240 --> 00:22:43,960
And yes, that is base
64, it's always base 64.

546
00:22:43,960 --> 00:22:47,420
So we have the password
and now we can turn around

547
00:22:47,420 --> 00:22:49,463
and connect back to the real device.

548
00:22:50,820 --> 00:22:54,480
This works with both
CS2 and iLnkP2P devices.

549
00:22:54,480 --> 00:22:56,590
CS2 did try to patch this problem,

550
00:22:56,590 --> 00:22:59,000
but it's pretty easy to circumvent.

551
00:22:59,000 --> 00:23:02,450
The login message is encrypted
with what's called a CRC key,

552
00:23:02,450 --> 00:23:05,610
but a vendor's devices
all use the same CRC key

553
00:23:05,610 --> 00:23:08,060
so you can just grab it
right from the firmware.

554
00:23:08,060 --> 00:23:09,190
And with some servers,

555
00:23:09,190 --> 00:23:11,120
you actually don't even
need to go this far

556
00:23:11,120 --> 00:23:12,830
because it will still let you log

557
00:23:12,830 --> 00:23:14,600
in with the old login message

558
00:23:14,600 --> 00:23:16,223
so there's not much of a point.

559
00:23:17,160 --> 00:23:19,140
All this attack is certainly doable,

560
00:23:19,140 --> 00:23:20,810
there are a couple of drawbacks.

561
00:23:20,810 --> 00:23:23,420
You need to have a specific UID to target,

562
00:23:23,420 --> 00:23:26,170
you need to know
knowledge of the protocol,

563
00:23:26,170 --> 00:23:28,270
and you actually need
to wait for the person

564
00:23:28,270 --> 00:23:29,780
to try to connect.

565
00:23:29,780 --> 00:23:32,340
However, there is another
attack that has none

566
00:23:32,340 --> 00:23:33,660
of these requirements.

567
00:23:33,660 --> 00:23:36,100
In fact, there is a way that someone

568
00:23:36,100 --> 00:23:38,250
with practically zero hacking experience

569
00:23:38,250 --> 00:23:40,993
can start owning handfuls of devices.

570
00:23:42,270 --> 00:23:44,840
Let's talk about super devices again,

571
00:23:44,840 --> 00:23:46,940
these are devices in people's homes

572
00:23:46,940 --> 00:23:49,740
that are proxying
sessions for other users.

573
00:23:49,740 --> 00:23:51,150
A lot of vendors use these

574
00:23:51,150 --> 00:23:53,410
so the chances of you buying a camera

575
00:23:53,410 --> 00:23:56,270
that will act as a super
device is pretty high.

576
00:23:56,270 --> 00:24:00,160
And as I said, P2P doesn't
actually perform any encryption.

577
00:24:00,160 --> 00:24:03,930
So what happens when a
vendor's crypto sucks too?

578
00:24:03,930 --> 00:24:06,220
That means that anyone can buy a device

579
00:24:06,220 --> 00:24:08,600
and access other people's traffic with it.

580
00:24:08,600 --> 00:24:11,510
It means literally anyone
on the planet can sniff

581
00:24:11,510 --> 00:24:13,960
your entire session and
capture your password

582
00:24:13,960 --> 00:24:16,530
or your video without you ever knowing.

583
00:24:16,530 --> 00:24:17,960
There is no need to expend a ton

584
00:24:17,960 --> 00:24:20,060
of effort setting up a
man-in-the-middle attack

585
00:24:20,060 --> 00:24:22,963
when this exists in the product by design.

586
00:24:24,024 --> 00:24:27,220
There are plenty of devices
that don't even use encryption

587
00:24:27,220 --> 00:24:30,020
for sessions, a little
PCAP parsing can give

588
00:24:30,020 --> 00:24:31,490
you a raw video stream

589
00:24:31,490 --> 00:24:34,710
that you can immediately watch
with something like ffplay.

590
00:24:34,710 --> 00:24:38,570
And all the while users will
have no way of knowing whether

591
00:24:38,570 --> 00:24:41,540
their connection is being
intercepted like this.

592
00:24:41,540 --> 00:24:44,540
In fact, it's a risk that
they're taking every single time

593
00:24:44,540 --> 00:24:46,240
that they connect to their device.

594
00:24:47,520 --> 00:24:50,240
As an added bonus, this
has the side effect

595
00:24:50,240 --> 00:24:53,390
of leaking UIDs during the
peer-to-peer handshake.

596
00:24:53,390 --> 00:24:55,860
So alternatively, you can
just take the credentials,

597
00:24:55,860 --> 00:24:57,760
which you also probably captured

598
00:24:57,760 --> 00:25:00,180
and connect back to the device yourself.

599
00:25:00,180 --> 00:25:02,710
I actually developed a proof
of concept of this just

600
00:25:02,710 --> 00:25:06,200
to collect UIDs by
posing as a super device.

601
00:25:06,200 --> 00:25:07,980
And by doing this, I was able to collect

602
00:25:07,980 --> 00:25:12,980
over 236,000 unique CS2 UIDs
over the course of 10 months.

603
00:25:13,520 --> 00:25:16,960
So even though check code
algorithm has yet to be cracked,

604
00:25:16,960 --> 00:25:21,260
this is a very reliable way
for anyone to collect UIDs.

605
00:25:21,260 --> 00:25:24,610
The funny thing is CS2 actually
mention this exact concern

606
00:25:24,610 --> 00:25:25,910
in a marketing deck,

607
00:25:25,910 --> 00:25:29,730
they said a super device can
not spy on any data it relays

608
00:25:29,730 --> 00:25:32,160
because there is no API for this,

609
00:25:32,160 --> 00:25:33,680
but of course that's insane,

610
00:25:33,680 --> 00:25:36,100
you don't need an API to pull this off.

611
00:25:36,100 --> 00:25:38,510
It's absolutely trivial to set up a camera

612
00:25:38,510 --> 00:25:39,970
and then leave Wireshark running

613
00:25:39,970 --> 00:25:43,890
to capture every single packet
flowing through that device.

614
00:25:43,890 --> 00:25:45,890
So that's exactly what we're going to do.

615
00:25:45,890 --> 00:25:48,360
This bullet cam is running iLnkP2P

616
00:25:48,360 --> 00:25:50,010
so against my better judgment,

617
00:25:50,010 --> 00:25:51,780
I'm gonna put this on the internet

618
00:25:51,780 --> 00:25:53,750
and we'll run Wireshark for a while

619
00:25:53,750 --> 00:25:55,670
and see what we come back to.

620
00:25:55,670 --> 00:25:58,830
Okay so I left Wireshark
running for a few hours

621
00:25:58,830 --> 00:26:01,790
and we can see that this
camera has stayed pretty busy.

622
00:26:01,790 --> 00:26:05,100
I have the P2P dissector
active so we can clearly see

623
00:26:05,100 --> 00:26:06,620
what it's been doing.

624
00:26:06,620 --> 00:26:09,470
Each of these hello messages
is the peer-to-peer servers

625
00:26:09,470 --> 00:26:10,909
telling the camera to reach out

626
00:26:10,909 --> 00:26:13,350
and try to help someone with a session.

627
00:26:13,350 --> 00:26:16,130
So this will generate some
handshaking with both the client

628
00:26:16,130 --> 00:26:17,930
and the device.

629
00:26:17,930 --> 00:26:21,120
Of particular interest is
these relay packet messages,

630
00:26:21,120 --> 00:26:24,186
which will actually
contain a UID of the device

631
00:26:24,186 --> 00:26:26,800
that we're trying to relay for.

632
00:26:26,800 --> 00:26:29,990
But we wanna see some
actual session traffic

633
00:26:29,990 --> 00:26:31,990
and we can locate this by filtering

634
00:26:31,990 --> 00:26:35,260
for message DRW messages

635
00:26:35,260 --> 00:26:38,403
so I'll go up here and apply that filter.

636
00:26:46,420 --> 00:26:49,350
And sure enough looks like
we've got some traffic here.

637
00:26:49,350 --> 00:26:53,730
So if we actually pull up the
resulting conversation here,

638
00:26:53,730 --> 00:26:56,470
well thats sure it looks like base 64.

639
00:26:56,470 --> 00:26:59,953
So if we copy that,
(typing)

640
00:27:03,040 --> 00:27:05,423
yup nice secure password there.

641
00:27:06,310 --> 00:27:09,770
So there's some other information
in plain texts over here

642
00:27:09,770 --> 00:27:11,790
we can see some information
about the camera,

643
00:27:11,790 --> 00:27:13,263
the firmware version,

644
00:27:14,520 --> 00:27:16,420
and it looks like some other sort

645
00:27:16,420 --> 00:27:19,200
of name or identity information.

646
00:27:19,200 --> 00:27:20,860
But what about video?

647
00:27:20,860 --> 00:27:24,170
One of the ways that
this DRW concept works is

648
00:27:24,170 --> 00:27:28,260
there are a message indexes
and message channels,

649
00:27:28,260 --> 00:27:30,110
and each channel is gonna be used

650
00:27:30,110 --> 00:27:31,780
for a particular purpose.

651
00:27:31,780 --> 00:27:35,029
So in this case here, it looks
like there's a lot of sort

652
00:27:35,029 --> 00:27:39,250
of authentication or negotiation going on

653
00:27:39,250 --> 00:27:40,670
on this channel zero.

654
00:27:40,670 --> 00:27:45,243
But on this channel two, we
start to see binary data.

655
00:27:46,200 --> 00:27:50,490
So what I did here is I
actually wrote a quick script

656
00:27:50,490 --> 00:27:55,030
that is going to take the
data from this packet capture

657
00:27:55,030 --> 00:27:57,870
and just concatenate it
together so we can pipe it

658
00:27:57,870 --> 00:27:59,350
into a video player.

659
00:27:59,350 --> 00:28:01,400
So what we're gonna do is just go

660
00:28:01,400 --> 00:28:06,400
and export packet dissections
as Json, call this export.Json

661
00:28:07,210 --> 00:28:10,693
and make sure we hit
packet bytes, save this.

662
00:28:17,900 --> 00:28:22,900
And then we will go here and
do node Json2vid export.Json,

663
00:28:25,830 --> 00:28:27,770
pipe that right into ffplay

664
00:28:29,410 --> 00:28:30,670
and we have some chickens.

665
00:28:30,670 --> 00:28:31,733
How about that?

666
00:28:33,080 --> 00:28:35,323
So final thoughts.

667
00:28:36,770 --> 00:28:39,350
I had a feeling things
weren't going to be pretty

668
00:28:39,350 --> 00:28:41,120
when I started down this rabbit hole,

669
00:28:41,120 --> 00:28:45,060
but I never could have
imagined some of these things.

670
00:28:45,060 --> 00:28:47,880
I've reported all of these
problems to the vendors,

671
00:28:47,880 --> 00:28:50,260
Shenzhen Yunni never did get back to me

672
00:28:50,260 --> 00:28:53,550
and the number of devices
using iLnkP2P has steadily

673
00:28:53,550 --> 00:28:56,410
increased since I first
reached out to them.

674
00:28:56,410 --> 00:28:58,330
I've tried to contact a lot of vendors

675
00:28:58,330 --> 00:29:00,130
in China over the past few years,

676
00:29:00,130 --> 00:29:03,870
and it's honestly pretty rare
that I get a response at all.

677
00:29:03,870 --> 00:29:07,000
So I'd also really like to
give credit where it's due here

678
00:29:07,000 --> 00:29:10,940
because both CS2 network and
Hichip kept in close contact

679
00:29:10,940 --> 00:29:12,740
with me earlier this year,

680
00:29:12,740 --> 00:29:16,270
even as the COVID situation
was first emerging in China.

681
00:29:16,270 --> 00:29:19,160
It was refreshing to see
my concerns taken seriously

682
00:29:19,160 --> 00:29:22,187
and especially during
such a difficult time.

683
00:29:22,187 --> 00:29:24,100
the issue is with CS2 were stated

684
00:29:24,100 --> 00:29:25,680
to be fixed in the next release

685
00:29:25,680 --> 00:29:27,196
and Hichip just released patches

686
00:29:27,196 --> 00:29:29,283
for their problems in late June.

687
00:29:30,740 --> 00:29:31,880
With the warm and fuzzies

688
00:29:31,880 --> 00:29:35,210
over boy things are not looking good,

689
00:29:35,210 --> 00:29:36,690
even with patches on the way,

690
00:29:36,690 --> 00:29:38,090
I think it's safe to say

691
00:29:38,090 --> 00:29:40,040
that everything you just saw is going

692
00:29:40,040 --> 00:29:41,980
to be a problem for a long.

693
00:29:41,980 --> 00:29:43,470
And this is because a lot

694
00:29:43,470 --> 00:29:45,520
of these peer-to-peer problems are

695
00:29:45,520 --> 00:29:47,220
outright architectural flaws

696
00:29:47,220 --> 00:29:50,210
and they can't really
be fixed retroactively.

697
00:29:50,210 --> 00:29:52,690
I think even if they could
be fixed, it doesn't matter

698
00:29:52,690 --> 00:29:56,320
because most people don't
update firmware anyway,

699
00:29:56,320 --> 00:29:57,700
I've seen some devices

700
00:29:57,700 --> 00:30:00,203
with firmware versions
going back half a decade.

701
00:30:01,810 --> 00:30:02,870
In June of this year,

702
00:30:02,870 --> 00:30:05,380
I worked with the UK
consumer watchdog group,

703
00:30:05,380 --> 00:30:06,890
which to try to get some

704
00:30:06,890 --> 00:30:09,550
of the effective devices
pulled off of shelves.

705
00:30:09,550 --> 00:30:10,810
Amazon who sells more

706
00:30:10,810 --> 00:30:14,180
than 20 vulnerable brands
didn't respond at all

707
00:30:14,180 --> 00:30:15,290
and eBay said

708
00:30:15,290 --> 00:30:18,300
to use IP cameras without
an internet connection,

709
00:30:18,300 --> 00:30:21,050
which isn't even possible
with a good number of these

710
00:30:21,050 --> 00:30:23,283
so you know thanks for that advice.

711
00:30:24,400 --> 00:30:26,530
I do hope that this was
inspiring to some of you

712
00:30:26,530 --> 00:30:28,930
because I think there's
a lot of opportunity here

713
00:30:28,930 --> 00:30:30,470
for further research.

714
00:30:30,470 --> 00:30:31,870
I think it's pretty clear

715
00:30:31,870 --> 00:30:34,710
that peer-to-peer is a pretty nasty vector

716
00:30:34,710 --> 00:30:37,410
and I'm sure there is a
lot more vulnerabilities

717
00:30:37,410 --> 00:30:41,030
in devices beyond what
I've discovered on my own.

718
00:30:41,030 --> 00:30:42,820
I also haven't really had a chance

719
00:30:42,820 --> 00:30:45,570
to dig into other peer-to-peer platforms

720
00:30:45,570 --> 00:30:47,240
for example Kalay

721
00:30:47,240 --> 00:30:49,700
which is used by over 66 million devices

722
00:30:49,700 --> 00:30:52,030
including wise cameras.

723
00:30:52,030 --> 00:30:53,660
And I know they use a similar paradigm

724
00:30:53,660 --> 00:30:56,160
where a UID will get you device access

725
00:30:56,160 --> 00:30:58,890
so I think there's
certainly opportunity there.

726
00:30:58,890 --> 00:31:01,100
And while I focus my efforts on Hichip,

727
00:31:01,100 --> 00:31:02,890
there are definitely other massive

728
00:31:02,890 --> 00:31:04,920
device manufacturers out there.

729
00:31:04,920 --> 00:31:07,210
In general I encourage folks to climb up

730
00:31:07,210 --> 00:31:10,140
to supply chain a bit if you're
looking for vulnerabilities,

731
00:31:10,140 --> 00:31:13,763
that could be both widespread
and potentially high-impact.

732
00:31:15,390 --> 00:31:18,050
I'd like to leave you with a
few reverse engineering tips

733
00:31:18,050 --> 00:31:20,820
that have led me to
some major discoveries.

734
00:31:20,820 --> 00:31:22,730
First, if you're doing reversing be sure

735
00:31:22,730 --> 00:31:24,590
to collect as many different samples

736
00:31:24,590 --> 00:31:26,850
and variants as you possibly can.

737
00:31:26,850 --> 00:31:29,550
Run diff against them,
look for abnormal changes

738
00:31:29,550 --> 00:31:31,210
in file sizes.

739
00:31:31,210 --> 00:31:33,970
Some may leave in debug
symbols, extra logging

740
00:31:33,970 --> 00:31:35,660
and alternate functionality

741
00:31:35,660 --> 00:31:38,880
so those are all new
avenues of exploration.

742
00:31:38,880 --> 00:31:41,970
Also APKs are a great
way to check out things

743
00:31:41,970 --> 00:31:43,180
with minimal effort.

744
00:31:43,180 --> 00:31:46,030
Java can decompile into
beautiful readable code

745
00:31:46,030 --> 00:31:49,070
that can very quickly
reveal interesting things.

746
00:31:49,070 --> 00:31:50,940
And finally and most importantly,

747
00:31:50,940 --> 00:31:53,260
throw every single interesting file name

748
00:31:53,260 --> 00:31:55,320
or magic string you find into GitHub.

749
00:31:55,320 --> 00:31:57,410
Seriously it is incredible

750
00:31:57,410 --> 00:31:59,750
how many people push sensitive source code

751
00:31:59,750 --> 00:32:01,530
to public repositories

752
00:32:01,530 --> 00:32:03,150
and this has helped me find everything

753
00:32:03,150 --> 00:32:05,200
from SDKs to documentation,

754
00:32:05,200 --> 00:32:07,483
to full on source repos for firmware.

755
00:32:08,540 --> 00:32:10,100
Finally, I'd like to give a shout out

756
00:32:10,100 --> 00:32:12,430
to the folks who published
some of the initial research

757
00:32:12,430 --> 00:32:13,320
on peer-to-peer.

758
00:32:13,320 --> 00:32:15,050
Their work was really inspiring

759
00:32:15,050 --> 00:32:17,210
and key to the success of my own research

760
00:32:17,210 --> 00:32:18,983
so cheers to you guys.

761
00:32:19,860 --> 00:32:21,200
And that's a wrap my friends.

762
00:32:21,200 --> 00:32:23,680
Thank you all so much
for coming happy, hacking

763
00:32:23,680 --> 00:32:25,093
and be safe out there.

