00:00:00.067-->00:00:03.103
>>So this talks by Parsia and
Stark and they’re gonna be
talking about enterprise

00:00:03.103-->00:00:07.040
blockchain so let’s give them a
big DefCon welcome! [audience
applause] >>Hi. Is this, is this

00:00:07.040-->00:00:12.045
good? Can everyone hear me?
Okay. Thank you! Uh, if I start
speaking too quickly please let

00:00:22.256-->00:00:27.227
me know. Throw something at me
because I do that. And I have an
accent so it’s hard to

00:00:27.227-->00:00:33.567
understand me. So here we are at
DefCon, we are super excited.
It’s my first time at DefCon.

00:00:33.567-->00:00:38.472
First time speaking at any
conference. I mean, it’s super
big! Everyone’s hacking each

00:00:38.472-->00:00:44.011
other and there are so many SQL
injection halos going around,
even Elon Musk dropped by to

00:00:44.011-->00:00:49.016
break up the unions. [audience
laughs] I’m so funny. [audience
laughs] So we have a great talk

00:00:52.686-->00:00:56.924
planned out for you and you say
okay, what does this enterprise
blockchain thing has anything to

00:00:56.924-->00:01:00.694
do with the theme of DefCon
which is surveillance? So
everyone is collecting data

00:01:00.694-->00:01:07.301
about you. And let’s say it will
end up on the enterprise
blockchain sooner or later. So

00:01:07.301-->00:01:11.138
this is why we will, you know,
look at these things and see
what these are. So we have a

00:01:11.138-->00:01:16.877
great talk planned out for you.
The first part I’m gonna talk
theory. I know theory’s boring

00:01:16.877-->00:01:21.949
but you will learn buzzwords.
After you go back home, you go
to your LinkedIn profile, add

00:01:21.949-->00:01:26.286
those buzzwords to it, talk to
your boss and ask for a raise.
[audience laughs] I mean, it

00:01:26.286-->00:01:31.291
works. I mean, my boss is there.
[audience laughs] The second
part, uh, my co-presenter will

00:01:34.227-->00:01:39.900
uh, show you our tool. We have
created a tool to attack
enterprise blockchain platforms.

00:01:39.900-->00:01:45.305
And you will see things like
defeating the blockchain to
commit insurance fraud. And also

00:01:45.305-->00:01:50.310
root shells to smart contracts.
Take that, ethereum! So, we all
work at Synopsys Software

00:01:52.779-->00:01:56.116
Integrity Group. There’s 4 of
us. I’m Parsia, I uh, do
application security, I am a

00:01:56.116-->00:01:58.819
very rabid go line fan. I love
smart contracts and my um,
superpower is uh, they told me

00:01:58.819-->00:02:03.757
not to do this, but my
superpower is getting selected
at the airport every single

00:02:11.999-->00:02:17.004
time. [audience laughs] You can
see why. So. [audience continues
to laugh and hollar] Any time

00:02:19.272-->00:02:26.279
spent with me, is not harassing
you. So you’re welcome.
[audience laughs] And uh, my

00:02:26.279-->00:02:31.284
corporate center is this
schmuck, who doesn't even like
go. >>Hey guys. Uh, my name is

00:02:33.387-->00:02:38.759
Stark. Uh, I work with this
schmuck. okay, uh, anyway, I
came to blackcat uh, last year

00:02:38.759-->00:02:42.829
for like, the 6th time, but I
finally got to hear about
blockchains and smart contracts

00:02:42.829-->00:02:47.167
and I got interested because it
sounded really easy to break.
And, it turns out, that it is.

00:02:47.167-->00:02:51.304
Uh, our customers have been
talking to us about enterprise
blockchain, which is apparently

00:02:51.304-->00:02:55.342
different, and I wanted to kinda
move the conversation in that
direction. So here we are.

00:02:55.342-->00:03:01.248
>>Great! Thank you, Stark. Thank
you, Stark. So our Travis and
Koen are there. They are our

00:03:01.248-->00:03:05.152
team members and they are
amazing. I mean, they speak
like, 10 different languages

00:03:05.152-->00:03:10.290
between them so, it’s amazing.
Okay, so we have our team
together. The first thing we

00:03:10.290-->00:03:14.528
did, we started looking at the
whole platform. So we have
public blockchains and then we

00:03:14.528-->00:03:18.665
have private blockchains, or
enterprised ones. Public
blockchains are um, you know,

00:03:18.665-->00:03:24.871
crypto currencies or a lot of
icodes. All of them are scams.
So there we go get banned from

00:03:24.871-->00:03:29.943
the crypto, crypto, I’m sorry,
cryptocurrency village. You
should, you should be careful

00:03:29.943-->00:03:33.480
not to say crypto as in
cryptography because Matt Green
will come and like, pummel you

00:03:33.480-->00:03:39.519
to death. [audience laughs] In
the enterprise part, is as it’s
been working very quietly, we

00:03:39.519-->00:03:43.790
have all been pointing and
laughing at the latest John
McAfee scam right the bit five

00:03:43.790-->00:03:48.195
wallet, whatever it is. In the
enterprise part there are 3
major camps, it’s been

00:03:48.195-->00:03:54.267
balkanized. Now I always wanted
to say balkanized. [audience
laughs] There is Hyperledger,

00:03:54.267-->00:03:58.972
there is Enterprise Ethereum
Alliance and there is R3. Now a
lot of companies are invested

00:03:58.972-->00:04:02.476
into this, I mean, tech
companies are already there. But
they also change their

00:04:02.476-->00:04:07.881
JavaScript frameworks every 3
weeks. So that’s not surprising.
But there are other companies or

00:04:07.881-->00:04:11.618
healthcare companies and they’re
financial companies and
financial companies are really

00:04:11.618-->00:04:17.324
hard to convince to do something
new. That means the senior
leadership of these companies

00:04:17.324-->00:04:21.728
have seen something in these
platforms so they’re investing a
lot of time and money into this.

00:04:21.728-->00:04:26.633
And as I said, before you would
get flagged at the airport, if
the immigration officer didn’t

00:04:26.633-->00:04:31.371
like you, what’s going to happen
in 2 years is some patented
smart contract is going to flag

00:04:31.371-->00:04:36.409
you before you even land. And
you get a free physical.
[audience laughs] Amazing,

00:04:36.409-->00:04:41.414
right? And they say our
healthcare is s**t. [audience
laughs] So the blockchain war

00:04:43.984-->00:04:48.989
that’s like this uh, election
candidate it says promises made
and then promises kept, right?

00:04:50.991-->00:04:56.329
It says I’m immutable. Which
means I’m unhackable. Everything
that gets on the ledgers or the

00:04:56.329-->00:05:01.535
blockchains stays there and you
cannot change it. So hackers
cannot do anything. It says I’m

00:05:01.535-->00:05:07.073
auditable. Which means you think
you know what has ac, what has,
what has been put on the

00:05:07.073-->00:05:12.112
blockchain by whom and when. You
have tune-able trust, I will
give you authorization controls

00:05:12.112-->00:05:16.516
and authentications controls.
You can give access to different
groups of people. And finally, I

00:05:16.516-->00:05:20.387
will give you a program that
will they teach you smart
contracts so you can codify the

00:05:20.387-->00:05:25.292
rules of the world into smart
contracts which get there on the
blockchain and cannot be

00:05:25.292-->00:05:30.297
modified so it will be an even
playing field. What happens in
the promises kept part is of

00:05:32.365-->00:05:38.004
course very familiar. None of
them are kept. The ledger is
immutable, well, okay we already

00:05:38.004-->00:05:44.077
knew that. But that means that
if fraud happens then you’re
SFYL. Sorry for your loss. Your

00:05:44.077-->00:05:48.782
bitcoin wallet gets hacked,
sorry for your loss. Uh, but
your bank cannot say that the

00:05:48.782-->00:05:53.587
same, say the same to you.
Right? Your, your account is
empty? Did you go to the bank?

00:05:53.587-->00:05:58.592
The teller cannot laugh at you
and say LOL. [audience laughs]
You’re gonna sue them. Another

00:06:00.827-->00:06:07.400
problem is they are not always
mutable. There are bugs. And
these bugs will makes things

00:06:07.400-->00:06:12.839
different. You write something
to the chain and you’re like,
okay that’s it. What happens in

00:06:12.839-->00:06:16.977
practice is uh, there is some
vulnerability out there and then
something goes to return to the

00:06:16.977-->00:06:22.983
chain and then you are SFYL.
Privacy is important. Before you
put anything on the ledger you

00:06:22.983-->00:06:27.988
should think really, really
hard. Because when it goes there
it’s there forever. It’s like

00:06:27.988-->00:06:32.592
the internet, right? You can’t
go back and delete your old
tweets because someone archived

00:06:32.592-->00:06:38.932
it. And then GDPR comes along
and you have to change things.
So if you commit usernames and

00:06:38.932-->00:06:44.037
passwords of credit cards or
encryption keys to the chain
then, don’t do that. You’re

00:06:44.037-->00:06:50.644
SFYL. This platform’s,
unfortunately as it is, don’t
have enough throughput for real

00:06:50.644-->00:06:55.415
world applications. So what we
are gonna do is, what they do
is, they sacrifice correctness

00:06:55.415-->00:07:00.754
for speed. Instead of running
your smart contract on all notes
and comparing the results, you

00:07:00.754-->00:07:05.759
run it on like, 1 note and call
it a day. If that note goes
rogue, then SFYL. The execution

00:07:08.061-->00:07:12.666
environment is also important.
I’m sorry, I laugh a lot at my
own jokes. I’m the funniest

00:07:12.666-->00:07:17.671
person I know. [audience laughs]
The execution environment is um,
is also important. Smart

00:07:19.739-->00:07:26.279
contracts are by default remote
code’s execution service. You’re
running someone else’s code on

00:07:26.279-->00:07:30.750
your machine and you don’t know
what it is most of the time. Or
don’t know what it ends up

00:07:30.750-->00:07:36.456
doing. So we need to be
understanding, you need to
secure these things. And then

00:07:36.456-->00:07:41.494
finally these platform’s are
super complex. Every blockchain
system is a distributor network.

00:07:41.494-->00:07:48.368
Those join, leave, you need to,
you know, make up for all of
this. So promises kept. 1.

00:07:48.368-->00:07:53.373
Great. So in order to progress
more into these uh, into this
scene, we chose 1 platform. So

00:07:55.809-->00:08:01.448
we chose Hyperledger Fabric.
It’s part of the hyperledger
ecosystem which is owned by the

00:08:01.448-->00:08:07.354
Linux Foundation, with the
exception that Linux is not
yelling at you. [audience member

00:08:07.354-->00:08:11.691
laughs] It’s great. It’s
presenting go line, which is
great. Everyone should write in

00:08:11.691-->00:08:16.696
go. And it counts for roughly 50
percent of the deployments out
there. It’s our observation. Uh,

00:08:19.065-->00:08:24.604
if you’ve heard about this new
mobile voting thing,
application, it’s based on

00:08:24.604-->00:08:28.708
Hyperledger Fabric. So whether
you like it or not, your roots
is gonna, roots are gonna end up

00:08:28.708-->00:08:35.682
there. I know it’s not important
because we don’t care about
voting, but we should. So after

00:08:35.682-->00:08:41.421
that we choose this guinea pig.
And guinea pigs are important
because we learn by breaking

00:08:41.421-->00:08:46.426
things. Unless it’s OSCP, in
which case you, you know, pay
someone. This, the application

00:08:49.162-->00:08:53.299
we have created is called the
build blockchain insurance app.
And that’s the name. If you

00:08:53.299-->00:08:57.337
Google for it you can find it.
It’s your typical insurance
application, it looks pretty

00:08:57.337-->00:09:01.941
slick and works most of the
time. There's a better
application in front. As a

00:09:01.941-->00:09:06.746
customer, you go in, buy
something, and then if something
happens to it, which always

00:09:06.746-->00:09:12.752
will, and you will say I want to
claim some of the claim.
Insurance people in and uh, look

00:09:12.752-->00:09:17.757
at your claim, and then if
possible they will pass it to
the cops because they want to

00:09:17.757-->00:09:21.995
get out of it anyways, but
that’s what insurance does. And
then finally everything goes to

00:09:21.995-->00:09:28.535
the repair shop. Repair shop
repairs it, or doesn’t, and it
gets paid. Uh, that’s what

00:09:28.535-->00:09:35.041
happens. So everything after
this purple boxes is fabric. So
looking at this application we

00:09:35.041-->00:09:40.413
have some questions. So the
first question is like, how do
we hack this thing? Uh, the

00:09:40.413-->00:09:45.418
front is real application, and
in this day in age, it’s not a
solved problem, but we know how

00:09:45.418-->00:09:50.490
to tackle this rare application
testing, I mean everyone does it
right? You just pass it to BART

00:09:50.490-->00:09:55.495
I guess. [speaker laughs through
his breath] Sorry. [audience
laughs] And then, but everything

00:09:57.864-->00:10:03.236
after that is opaque log which
is hyperledger fabric. So we
created this tool that gives us

00:10:03.236-->00:10:07.907
insight into what’s inside. We
can, we can do things, we will
give you, we will show you

00:10:07.907-->00:10:13.780
things, you can do shells, it’s,
it’s amazing, when this thing is
completely broken. And then the

00:10:13.780-->00:10:20.453
2nd question was like, okay we
have this insurance application,
how do we hack it? And they say

00:10:20.453-->00:10:24.324
follow the money so the only
person who gets paid is the
repair shop, so you want to

00:10:24.324-->00:10:30.530
commit insurance fraud. And
that’s what we’re gonna talk to
you later. So we have this our,

00:10:30.530-->00:10:36.870
we have our platform. We have
our guinea pig. First uh, and
then we need to learn about the

00:10:36.870-->00:10:41.441
platform. And I’m sorry I’m
boring you out but, but the
buzzwords are important. So

00:10:41.441-->00:10:46.546
smart contracts and fabric are
amazing, I love them. Uh,
because their name chaincode,

00:10:46.546-->00:10:51.551
and you can also write them in
go line. Go is great. You can
also write them in OJS or Java,

00:10:54.654-->00:10:59.993
if you’re an enterprise
customer. And it interacts with
the ledger in a very simple

00:10:59.993-->00:11:04.898
manner. There is a, there is an
interface called Shim, and
ledger is a key value storage

00:11:04.898-->00:11:10.537
called GetState. Pass a key, get
the value just called PutState.
Pass a key and value, and then

00:11:10.537-->00:11:15.108
you’re updated. It works. And
the main difference between
these smart contracts and

00:11:15.108-->00:11:20.280
ethereum smart contracts is that
these are actual programs. So
instead of just interacting with

00:11:20.280-->00:11:25.285
the ledger to EVM BART code, you
can do other things like call
the CPP APIs. Uh, spawn

00:11:27.420-->00:11:33.660
processes, do encryption, do
decryption and all that things.
So it gives you great power, but

00:11:33.660-->00:11:39.799
with great power also we need to
inhibit this power. Like these
checks and balances thing that

00:11:39.799-->00:11:46.039
is supposedly there. You have
what is called channels, and
each channel has its own ledger.

00:11:46.039-->00:11:51.210
And on each channel we can have
multiple chaincode, 1 or more.
Each chain code is only local to

00:11:51.210-->00:11:54.447
that channel, you can have
copies of the same chaincode on
different channels, but they

00:11:54.447-->00:11:59.419
don’t talk to each other. And
each chaincode has its own
internal database which reflects

00:11:59.419-->00:12:04.123
the values of the ledger. And
now what you do is, you run
something, update your, your

00:12:04.123-->00:12:08.561
values and everything goes into
some CouchDB. And then
everything gets updated, gets

00:12:08.561-->00:12:13.566
minted on the new, as a new dock
on the chain and everything
comes back and updates your, you

00:12:16.169-->00:12:22.508
cannot mess with other people’s
uh, StateDBs, which is great. I
mean, that's it. A lot of

00:12:22.508-->00:12:27.313
buzzwords. Uh, so what I’m gonna
do is I wanna pans, pass the
mantle to my friend, who doesn't

00:12:27.313-->00:12:32.318
like Go. >>Okay! So, uh, a
little bit more theory. And
then, and then we’ll hack

00:12:35.555-->00:12:40.560
something. Uh, so, to really
understand the security model of
hyperledger fabric, we need to

00:12:42.695-->00:12:47.300
discuss how things change on the
network, right? So we have
immutability guarantees but we

00:12:47.300-->00:12:52.372
can program it to change over
time. So the first step of 1 of
these changes is we have up

00:12:52.372-->00:12:56.676
here, that’s gonna submit a
proposal, right? So the proposal
just says invoke this chaincode

00:12:56.676-->00:13:02.482
function, take some inputs, do
something with it. To get to
send it to 1 or more endorsing

00:13:02.482-->00:13:08.521
peers, uh, these are just
members of the network who have
the chaincode itself. So step 2,

00:13:08.521-->00:13:12.458
they’re gonna actually execute
the chaincode. Which they’re
gonna do something with the

00:13:12.458-->00:13:18.831
GoLine code that can generate
some output. That output is
called an endorsement. So an

00:13:18.831-->00:13:23.703
endorsement is a group of all
the key values that they read
from and written to, it’s called

00:13:23.703-->00:13:28.307
the read write set. It’s gonna
sign it with it’s private key
and then it’s gonna submit it

00:13:28.307-->00:13:32.612
back to the peer. The peer
collects all the endorsements
from all the nodes that it sent

00:13:32.612-->00:13:39.318
it out to, and before it’s added
on to a special peer called the
orderer. So everything up until

00:13:39.318-->00:13:44.023
this point, it is really
arbitrary, right? So we could’ve
sent garbage data in and the

00:13:44.023-->00:13:48.995
endorsing peers could’ve sent
garbage data back to us. The
order’s job is to enforce some

00:13:48.995-->00:13:55.535
rules about this data. So, at
high level it performs 3 types
of validation. So, the 1st type

00:13:55.535-->00:14:02.141
of validation is ensuring that
all of the endorsements match.
All the read and write sets

00:14:02.141-->00:14:07.613
match each other so that the
peers don’t disagree on what’s
actually happening. The 2nd step

00:14:07.613-->00:14:13.052
is to ensure that we meet some
endorsement policy. So a policy
could be set up to have uh,

00:14:13.052-->00:14:19.892
maybe 3 out of 5 peers on the
network agree to a transition,
right? And then the 3rd type of

00:14:19.892-->00:14:26.799
validation is to ensure that we
don’t have conflicts with
previous transactions. So the

00:14:26.799-->00:14:32.105
order does all this logic by
itself and at the end of the
day, if it validates it, it

00:14:32.105-->00:14:36.576
creates a new block. It mints
that block, puts its private key
on it, says this is now a valid

00:14:36.576-->00:14:41.647
set of transactions and
broadcasts it to all the other
peers on the network. At this

00:14:41.647-->00:14:46.085
point we consider the global
state of the network to have
changed. Every peer will now

00:14:46.085-->00:14:52.158
know the new values of every key
in the data set and we’ve
completely uh, updated

00:14:52.158-->00:14:56.863
everybody. So that’s cool. We
wanna get there, we wanna bypass
some of that logic that might be

00:14:56.863-->00:15:03.102
enforcing constraints. So, there
are few suspects in just this
diagram, right? A few things

00:15:03.102-->00:15:08.141
that we can latch onto and talk
about from a security
perspective. First, on the far

00:15:08.141-->00:15:13.880
right we have the endorsers. So
we consider the endorsing policy
to be a style of optional visi

00:15:13.880-->00:15:19.152
team fault tolerance. So, for
those of you who didn't get a
masters degree, I think is the

00:15:19.152-->00:15:24.891
only place I learned about this
in school, was we have to do uh,
networks with lots of different

00:15:24.891-->00:15:29.028
people. Uh, they’re gonna
disagree with each other,
they’re gonna lie, they’re gonna

00:15:29.028-->00:15:34.600
cheat. We need to figure out a
way to equalize the playing
field. Figure out who’s lying,

00:15:34.600-->00:15:41.207
who’s cheating and just ignore
them. But if we have this style
of uh, endorsement policy, where

00:15:41.207-->00:15:46.813
we can choose what level of
validation we do, then we’ve
dropped our guarantee down to an

00:15:46.813-->00:15:51.884
optional level. So we lose that
guarantee from open chains like
ethereum or bitcoin, where all

00:15:51.884-->00:15:58.157
peers must be endorsing every
transaction. And, in fact, by
default in hyperledger fabric

00:15:58.157-->00:16:03.596
the endorsement policies just
want peer. So if you don’t set
one up, anyone can say anything

00:16:03.596-->00:16:08.801
and the order will trust it.
It’s not great. Uh, so on the
left with the order that’s in

00:16:08.801-->00:16:14.140
orange, the order is ending up
as a single point of failure for
the whole system. So every

00:16:14.140-->00:16:18.244
transaction’s gonna go through
this order. Now there might be
multiple orders, right? You

00:16:18.244-->00:16:22.448
might have high availability but
it’s still a single set of
organ, it’s a single

00:16:22.448-->00:16:26.552
organization within the network,
so it’s a single set of peers
who are now partied to every

00:16:26.552-->00:16:31.557
transaction on every channel. So
that is completely non-fault
tolerant by this definition. And

00:16:34.994-->00:16:38.364
in the middle we have the
client. So the clients got an
interesting property where it

00:16:38.364-->00:16:43.369
can transmit requests to be or,
to be uh, uh, endorsed by
endorsing peers without sending

00:16:45.605-->00:16:49.675
them for order. So it can cache
and hold onto these things and
maybe submit them later, or

00:16:49.675-->00:16:53.646
choose not to submit them at
all. And if our chaincode has
side effects, which it can,

00:16:53.646-->00:16:58.251
since it’s just arbitrary GoLine
code, it can do anything, then
this may have some very

00:16:58.251-->00:17:02.855
interesting properties in a real
life system. So as we’re writing
code or as we’re auditing a

00:17:02.855-->00:17:08.060
system, we have to keep uh,
those side effects in mind for
the effects of a peer that's not

00:17:08.060-->00:17:13.866
really performing what we expect
on the network. So at this point
we are completely done with

00:17:13.866-->00:17:18.804
theory, and I get to introduce
our tool. So when we first got
started with fabric we did a lot

00:17:18.804-->00:17:23.209
of uh, getting started with it.
We set up dev environments, we
built threat models, we built

00:17:23.209-->00:17:28.781
some quick scripts to hack it to
kinda figure out what it’s doing
behind the scenes. And we

00:17:28.781-->00:17:33.686
decided to package all of this
up and release it as open source
code. So it’s called Tineola.

00:17:33.686-->00:17:37.890
And it’s built by red teamers
for red teamers. So if you’re
doing a penetration test or

00:17:37.890-->00:17:41.794
you’re doing a source code
review in a live environment,
this tool’s gonna let you see

00:17:41.794-->00:17:46.566
what’s going on and try to
interface with it more
efficiently. It is on GitHub, I

00:17:46.566-->00:17:50.670
have a link at the end of the
slides so you guys have to stick
around. Uh, but uh we have our

00:17:50.670-->00:17:53.406
white paper up on there as well
that talks about everything
we’re doing here if you wanna

00:17:53.406-->00:17:59.345
share it with your friends.
[speaker sniffs] Okay, so. We’re
done with theory, uh,

00:17:59.345-->00:18:05.084
completely. Let’s, let’s talk
about our demos or our texts. So
from now on, my name is Tom. Uh,

00:18:05.084-->00:18:10.756
I work for the repair shop
board. And we just signed up for
this blockchain thing, and I

00:18:10.756-->00:18:17.263
don’t think it’s as secure as
all of the media headlines say,
and I wanna do insurance fraud.

00:18:17.263-->00:18:21.901
And I have access to my own peer
cause I’m a member of this
network as working for the

00:18:21.901-->00:18:27.406
repair shop, so I wanna see what
my peer can do and maybe I can
uh, get some ideas on how to,

00:18:27.406-->00:18:33.779
how to perform some fraud. My
initial idea was, okay uh, what
if somebody bought an item, got

00:18:33.779-->00:18:39.285
some insurance contract and then
they submitted it for repair but
it’s not actually broken, right?

00:18:39.285-->00:18:44.357
And then I get the contract to
repair it, and then I, I repair
it, right? And then they pay me

00:18:44.357-->00:18:48.527
to repair it, it’s perfect. I
just get cash. It’s, it’s a
great idea. So let’s, let’s see

00:18:48.527-->00:18:55.401
like, we could do this. So uh,
you may be asking about this
slide. So we, we sent this deck

00:18:55.401-->00:19:00.439
to our marketing department and
asked them to, to uh, spice it
up. And they came back with

00:19:00.439-->00:19:04.010
those stock images that you see
in the blog posts, where the
hacker in the black gloves is

00:19:04.010-->00:19:08.547
like, picking locks and stuff.
And I, we weren’t a fan. So we
sent it back and they gave us

00:19:08.547-->00:19:12.284
this deck. Cause they’re like,
people on the internet like
animals and these decks have

00:19:12.284-->00:19:17.289
animals. [audience laughs] So,
you’re welcome. Okay. Let’s,
let’s do a video demo because I

00:19:21.894-->00:19:27.767
didn’t, I didn’t pray to the
demo gods sufficiently. Okay. So
to get started, we’re just gonna

00:19:27.767-->00:19:33.105
watch Carol. Carol’s gonna be
our scapegoat. Uh, because she’s
gonna buy an item and we’re

00:19:33.105-->00:19:37.410
gonna do some fraud on that
item. So she’s buying a bike
here. This is the insurance app

00:19:37.410-->00:19:41.547
that we’re hacking, right? It’s
got a web front end. She’s
currently on the shop here where

00:19:41.547-->00:19:44.984
you can buy items. You can see
she’s filling out her
information and at the end of

00:19:44.984-->00:19:50.890
this she’s gonna get a contract.
And, like I said, my plan is to
just fraudulently submit a

00:19:50.890-->00:19:55.294
repair plan on the contract.
Should be pretty simple, right?
But let’s find out how we’re

00:19:55.294-->00:20:00.299
supposed to do that. So, we
click through, we buy this very
expensive bike and then boom! We

00:20:02.702-->00:20:06.105
get a password in plain text. So
we can tell this is following
all the best practices.

00:20:09.175-->00:20:13.179
[audience laughs] This is
example code, guys. People copy
and paste this stuff. Anyway.

00:20:13.179-->00:20:17.383
Uh, so this is Tineola. It’s a
JavaScript application that runs
on the command line. Uh, and so

00:20:17.383-->00:20:22.688
it has some commands. So first
I’m gonna connect up to my
certificate authority server and

00:20:22.688-->00:20:26.692
authenticate. I’m gonna use the
default administrative
credential which is admin admin

00:20:26.692-->00:20:31.697
PW. Again, it’s in all of the
examples. It’s great. So I
login, I’m, I’m in uh, but I

00:20:35.434-->00:20:39.004
wanna know what’s going on in
here. So the first thing I do is
I ask the certificate authority,

00:20:39.004-->00:20:43.442
what are all the users on this
box? And it goes well, you got
the admin client, but that’s it.

00:20:43.442-->00:20:47.046
Right? So I’m the only person
here, and it got some attributes
that tell me what I can do on

00:20:47.046-->00:20:52.751
the system. It’s, it’s pretty
nifty. And then next up I might
ask, okay, so let’s connect to

00:20:52.751-->00:20:58.023
my peer, right? So I’m
connecting up to the repair shop
end point. I’m connected. I

00:20:58.023-->00:21:03.662
might say, give me some metadata
about this uh, peer. So what
channels are it connected to?

00:21:03.662-->00:21:08.734
We’ve only got 1 channel, the
default channel, so I connect up
to that. And then I might say,

00:21:08.734-->00:21:15.040
okay give me some metadata about
the channel. So I ask for
channel info. And it gives me

00:21:15.040-->00:21:18.244
some hash values but what’s
important here is the height,
right? So that tells me how many

00:21:18.244-->00:21:22.815
blocks exist on this channel. So
that’s great. So I know there’s
11 blocks, I’m just gonna ask

00:21:22.815-->00:21:26.952
for the last 5, right? So I do
channel history 5, I see the
last 5 blocks to hit this chan,

00:21:26.952-->00:21:31.657
this channel. So right there at
block 10, that’s, that’s Carol,
right? And there’s her password

00:21:31.657-->00:21:36.328
right there in plain text. So
that’s, that’s pretty nifty. So
I’ve got the password, I’ll

00:21:36.328-->00:21:41.367
discuss uh, this in a moment.
But uh, we’re just gonna take
that password back to the web

00:21:41.367-->00:21:47.740
interface, throw it in, uh, yea
this is, okay this is me. Here I
am. I’m gonna go over to the

00:21:47.740-->00:21:52.478
claim self service, throw in the
password and file that claim. So
why was that data there? Well,

00:21:52.478-->00:21:57.049
it turns out that the blockchain
needs a bunch of data to do it’s
thing, right? This is logic,

00:21:57.049-->00:22:02.888
it’s complicated, needs inputs.
An so, although storing, maybe
plain text passwords, on the

00:22:02.888-->00:22:09.528
blockchains not great, uh, you
know, it, chaincode often needs
private data to operate. It’s

00:22:09.528-->00:22:15.501
just, we need to do business
here, right? But if we think
about it, that particular value,

00:22:15.501-->00:22:21.440
this password, it’s gonna go on
repeat isn’t it? Uh, that
particular value wasn’t needed

00:22:21.440-->00:22:27.046
uh, by anybody except for Carol
and the insurance company. So
that’s the perfect case for

00:22:27.046-->00:22:31.450
like, what? A relational
database? Right? We store hashed
passwords in mysql all the time.

00:22:31.450-->00:22:37.690
Maybe we should be doing that
all the time. So we see storage
of private data on blockchain as

00:22:37.690-->00:22:43.229
a major security risk and not
using in conjunction with
relational databases is just an

00:22:43.229-->00:22:48.234
architectural antipattern. Okay.
So, we’ve got through what we
can see on the network. Now that

00:22:51.937-->00:22:56.942
we can see it, let’s play with
it. What can we do with it. Well
it turns out, uh, that, it turns

00:23:00.613-->00:23:04.483
out that, that I’ve made a
mistake. And that if I go to my
repair shop here, I don’t have

00:23:04.483-->00:23:08.921
any repair orders so what
happened? And it occurs to me
that the insurance company is to

00:23:08.921-->00:23:13.392
approve this repair order and I
don’t work for the insurance
company, I don’t have logins

00:23:13.392-->00:23:18.864
there so. Let’s see if we can
just bypass the web app
completely, and just invoke

00:23:18.864-->00:23:24.003
stuff on the chain itself. So
I’m gonna connect back to that
default channel just like I did

00:23:24.003-->00:23:29.708
before. I’m gonna connect to an
order this time. So now I have
the capability of making changes

00:23:29.708-->00:23:34.847
to the network. And I’m gonna
just to a channel history
command again cause I don’t know

00:23:34.847-->00:23:41.620
how to interact with this
chaincode yet. I’m gonna think
about it for awhile, there we

00:23:41.620-->00:23:45.324
go. Uh, so here we are. And
these are all the last blocks.
So up in block 7 is a claim

00:23:45.324-->00:23:49.762
process command. So it turns out
this is the command that this
chaincode uses to approve a

00:23:49.762-->00:23:55.134
repair request. And it takes
some new UIDs and down in block
11 was the most recent claim

00:23:55.134-->00:24:00.139
file command, which is my
fraudulent claim. So, I could
just like, transplant new UIDs

00:24:00.139-->00:24:04.410
into that previous function
call, right? That should work.
So I’m gonna use Tineola’s uh,

00:24:04.410-->00:24:09.615
channel query CC command. I’ll
tell it to do a claim process
function call. Say, I’m gonna

00:24:09.615-->00:24:13.886
use 1 argument and then I’m just
gonna paste in this JSON blob.
And I’ve already replaced the

00:24:13.886-->00:24:19.224
new UIDs here. I’m gonna hit
enter. So this first run, is a
dry run. I just wanna make sure

00:24:19.224-->00:24:24.797
this actually works, so I’m not
gonna order it. I’m just gonna
tell the endorsing peer go, go

00:24:24.797-->00:24:28.901
make sure this works. So I get a
blank response. Turns out this
chaincode doesn't actually do

00:24:28.901-->00:24:34.406
anything with return code it
just returns blank. But I didn’t
get an error. Which means I’m

00:24:34.406-->00:24:39.812
running out of disk space. No.
[audience and speaker laugh] So
anyway I’m gonna, I’m gonna do

00:24:39.812-->00:24:43.382
it again with the dash dash
invoke since it didn’t error the
first time. And this, this tells

00:24:43.382-->00:24:49.288
Tineola go, go order it. So, uh,
again, no error. I, I think I
might have changed the state of

00:24:49.288-->00:24:55.394
the blockchain. So I’m gonna
refresh the page and we have
modified the blockchain folks.

00:24:55.394-->00:25:00.733
[speaker laughs] Okay. Cool. So
uh, what does this actually look
like, right? Like, we can go ask

00:25:00.733-->00:25:05.871
Tineola to show us what the
chain history looks like. So
again, I’m just gonna use the

00:25:05.871-->00:25:10.275
channel history commands so we
can see what this, uh, what
happened. So in there, in block

00:25:10.275-->00:25:15.881
13, we see, er, uh, excuse me,
block 12, was our fraudulent
claim process that was me

00:25:15.881-->00:25:21.453
submitting. This is a function
call that’s only ever done by
the insurance peer. But we can

00:25:21.453-->00:25:26.592
see in, uh, column 3, the
creator column, it’s the repair
shop organization who invoke

00:25:26.592-->00:25:31.597
that function call. So, the
lesson learned, right? Uh,
enterprise blockchain, these,

00:25:34.833-->00:25:39.471
uh, fabric and quorum and these
other platforms, they refer to
themselves as permissioned

00:25:39.471-->00:25:43.976
blockchains to differentiate
themselves from uh, open
blockchains like bitcoin or

00:25:43.976-->00:25:48.547
ethereum where anybody can join.
I, I don’t like using that term
because I feel like it’s a, it’s

00:25:48.547-->00:25:52.851
a big misnomer and it gives the
wrong impressions to chaincode
developers. The thing is, is

00:25:52.851-->00:25:57.589
that chaincode itself isn’t
permissioned. You have to make
it permissioned. Just access to

00:25:57.589-->00:26:02.561
the network is being blocked. So
what does that mean? It means
that since we’re building a

00:26:02.561-->00:26:07.032
network, ideally of neutrally
competing parties. That’s the
value of blockchain, bringing

00:26:07.032-->00:26:13.238
together people who don’t trust
each other to share things and
data and in code. Since we don’t

00:26:13.238-->00:26:19.445
trust everybody else, I can make
this go away can’t I? [speaker
laughs] Okay. So, we don’t trust

00:26:19.445-->00:26:25.417
these other people. We have to
put authorization controls into
our chaincode, we have to do it

00:26:25.417-->00:26:31.523
explicitly. Okay, this code
doesn’t do it explicitly, right?
So all the samples, none of’em

00:26:31.523-->00:26:36.528
do authorization, it’s great.
So, we’re gonna take a bit of a
detour, and we’re gonna talk

00:26:40.966-->00:26:46.338
what we can do with just this
invocation stuff, right? So, the
blockchain doesn’t operate by

00:26:46.338-->00:26:50.609
itself, it’s not in a vacuum.
Blockchains almost always have
some sort of front end

00:26:50.609-->00:26:55.547
component. May that be a REST
API or SOAP API or web interface
like, in this example, it

00:26:55.547-->00:27:01.253
doesn't matter. There’s some
front end that’s processing the
data from the chain. So, we

00:27:01.253-->00:27:06.024
asked ourselves, can we attack
that front end from the chain?
Can we use the chain to attack

00:27:06.024-->00:27:10.729
that other uh, front end
application. It turns out, yeah,
definitely. So we have an idea.

00:27:10.729-->00:27:15.734
So we built Tineola with an HTTP
proxy in it. And so whenever you
post to Tineola, Tineola will

00:27:17.870-->00:27:22.341
turn that into a chaincode
command and invoke it on the
chain. So on the right I’m using

00:27:22.341-->00:27:26.678
burp, just, you know, regular
application scanner. And I’m
just gonna demonstrate that I

00:27:26.678-->00:27:31.316
can invoke this function call
directly. Now, before I show
that, I’m gonna hop back over to

00:27:31.316-->00:27:37.122
my slides so we can see what’s
about to happen. So, here, this
is from the fabric samples

00:27:37.122-->00:27:41.560
repository. Very, It’s an
official repository that shows
how to write chaincode. And we

00:27:41.560-->00:27:46.465
have a trivial JSON injection
vulnerability due to string
concatenation. This is really

00:27:46.465-->00:27:51.403
disappointing because the big
thing with Go is that you can
make JSON in the language. It

00:27:51.403-->00:27:56.408
supports it. Uh, so, I, I’d, I,
I’d, uh, whatever. You know.
It’s fine. Uh, but um, let’s

00:27:59.478-->00:28:03.448
see, like, somebody’s gonna read
this data, right? Like, there’s
a reason we’re formatting it as

00:28:03.448-->00:28:08.854
JSON. Cause there’s gonna be a
server that takes this error
message and puts it someplace,

00:28:08.854-->00:28:13.859
right? And we can see even the
JSON response data for regular
response is the same way, the,

00:28:13.859-->00:28:18.430
it just happens to be secure
cause they’re doing some, uh,
because the data they’re pulling

00:28:18.430-->00:28:22.367
out is always a number but don’t
worry about that. We’ll focus on
this one first. So let’s see

00:28:22.367-->00:28:27.372
what this looks like. So, first,
uh, I need to uh, tell burp to,
to use local host. Cause that’s

00:28:30.809-->00:28:35.113
where my uh, port is open, don’t
worry it doesn’t open a port on
your machine to the internet.

00:28:35.113-->00:28:40.118
That’s just a local host. Uh,
we’ll tell it a chaincode
example of 2, that’s the, that’s

00:28:40.118-->00:28:44.423
the name of the chaincode that
we’re attacking, we’re using the
query command, then we’re gonna

00:28:44.423-->00:28:49.194
fill in an account value that I
happen to know exists. So on the
right we get HTTP 200 okay? It

00:28:49.194-->00:28:54.299
does exist. We get the chaincode
output as a result. So we can
use HTTP to interact with a

00:28:54.299-->00:28:58.203
chaincode, this is pretty
helpful. Let’s try an, let’s try
an account that doesn’t exist,

00:28:58.203-->00:29:02.374
account 1234 does not exist. We
get this error message and we
see it’s, you know, concatenate

00:29:02.374-->00:29:08.246
getting the name right in there.
So we can try uh, playing with
it by hand first. Uh, just to,

00:29:08.246-->00:29:13.652
you know, demonstrate for the
video that, you know, it does
concatenate. So I’m just gonna,

00:29:13.652-->00:29:17.990
you know, break out of this
string with and escape to double
quote. And I’m just gonna add a

00:29:17.990-->00:29:22.995
2nd key just to, just to show
that it works. Put in a, a
spiffy emoji there. We hit go,

00:29:28.967-->00:29:33.438
okay. So we see that works,
right? So we get HTTP 500
because it’s throwing an error,

00:29:33.438-->00:29:39.011
but the error message itself has
a JSON injection. But we can use
any of the features of, of burp

00:29:39.011-->00:29:43.382
through Tineola, right? So we
could use intruder or we could
use scanner, so I’m just gonna

00:29:43.382-->00:29:47.352
demonstrate scanner. On the left
in a moment you’re just gonna
see it scroll by as the scanner

00:29:47.352-->00:29:52.891
tries all these insane
permutations of fuzzing. So the
nice thing is like, I didn’t

00:29:52.891-->00:29:56.962
wanna write my own fuzzer cause
fuzzing is hard. So, whatever
fuzzing routines you guys are

00:29:56.962-->00:30:01.400
already using, oh geez, whatever
fuzzing routines you’re already
using, uh, will work with

00:30:01.400-->00:30:07.039
Tineola. You just, uh, as long
as it speaks HTTP you can, you
can use Tineola. Again, this is

00:30:07.039-->00:30:11.076
not targeting chaincode, right?
We’re not targeting this code
itself, we’re targeting

00:30:11.076-->00:30:15.347
whatever’s ingesting the data
from the chain. Cause there will
be upstream applications that

00:30:15.347-->00:30:19.785
take this data and do something
with it. So we might find uh,
cross site scripting, uh,

00:30:19.785-->00:30:23.555
vulnerabilities in a web app
that displays data that’s
getting pulled from the chain.

00:30:23.555-->00:30:28.160
Why does this matter? Well,
unlike databases, which you hold
the keys to and there’s a

00:30:28.160-->00:30:32.230
password on and only you can
access it, uh, the whole point
of the chaincode is to share the

00:30:32.230-->00:30:36.735
data, right? So you’re sharing
it with partners or competitors,
and they have access to modify

00:30:36.735-->00:30:41.173
the chain. So you can’t trust
the data coming in from the
chain itself. So we’ve gotta

00:30:41.173-->00:30:45.877
escape or validate or sanitize,
or whatever you’re gonna do with
the data you’re bringing out of,

00:30:45.877-->00:30:50.882
of fabric. Okay. So, back to the
insurance app. So, I’ve uh, I’m
pretty comfortable with invoking

00:30:55.854-->00:31:00.992
stuff on the chaincode. We
figured out authorization
doesn’t exist, I can attack this

00:31:00.992-->00:31:07.032
chaincode all day now, this is
lovely. Uh, but I’ve got bigger
aspirations. So it turns out

00:31:07.032-->00:31:12.304
that my organization is using
cloud hosting blockchain as a
service type deployment. And

00:31:12.304-->00:31:16.742
it’s really hard for me to
interact with the other peers.
Cause I just, have a single

00:31:16.742-->00:31:21.313
endpoint that I can hit, that
hits my peer. But I can’t see
the other peers. I can’t see

00:31:21.313-->00:31:25.484
their internal network. There
might be network services hiding
in there. Uh, so I wanna, I

00:31:25.484-->00:31:31.089
wanna pivot through my peer,
right? So, how does this work,
right? So chaincode’s running as

00:31:31.089-->00:31:36.795
a container, okay? Docker
container. And uh, it’s
arbitrary code so I should be

00:31:36.795-->00:31:40.999
able to write some arbitrary
code that runs in my tainer,
that gives me a shell or

00:31:40.999-->00:31:46.238
something, right? So Tineola
ships with Tineola CC, our
proprietary chaincode that’s

00:31:46.238-->00:31:52.844
open source. Uh [speaker laughs]
anyway, so Tineola CC has
pivoting options for it, so

00:31:52.844-->00:31:57.849
let’s see what that looks like.
Here we are. So on the right I’m
gonna start just a netcat

00:32:00.952-->00:32:07.793
listener on 31337. And on the
left I’m gonna use the Tineola
shell command, give it my IP and

00:32:07.793-->00:32:12.798
port. And do who am I. And boom,
root. There we go. Easy. But
we’re in a container, right?

00:32:15.200-->00:32:20.639
What can we do in the container?
Uh, this is a ubuntu container,
so I can use apt to install

00:32:20.639-->00:32:24.743
things. This is nice. Uh, if it
doesn't have internet access you
can drop things using the

00:32:24.743-->00:32:29.314
Tineola HTTP dropper. That
works. But either way, we’re
gonna get Nmap on here and I

00:32:29.314-->00:32:32.384
wanna use that to scan the
network. Cause I think there
might be network service in

00:32:32.384-->00:32:38.223
here. I’m gonna scan the uh,
private network that I know that
the peers are on. And I’m gonna

00:32:38.223-->00:32:44.563
give it the standard ports that
fabric uses. So there’s 2 GRPC
ports that the peer uses, an

00:32:44.563-->00:32:50.402
HTTPS port that’s for the
orderer, and CouchDB. So this
bottom one here is the orderer,

00:32:50.402-->00:32:56.341
it’s got 1 port open. It’s just
a single GRPC port. And we have
4 other peers who are listening

00:32:56.341-->00:33:01.279
on GRPC, HTTPS and CouchDB.
Okay. So about this, right? So,
there’s not a whole lot you can

00:33:07.118-->00:33:11.423
do to stop this, it turns out.
Fabric was built to run
arbitrary code. It’s just what

00:33:11.423-->00:33:17.095
it does. So if your front model
includes uh, peers being
compromised, which it always

00:33:17.095-->00:33:21.399
should because people get
compromised all the time, uh,
you have to account for this,

00:33:21.399-->00:33:27.973
right? You have to be aware that
the network is not partitioned
completely. And that uh, a peer

00:33:27.973-->00:33:32.577
will always be able to
communicate on whatever private
networks it’s located on so even

00:33:32.577-->00:33:37.582
if you have a blockchain as a
service platform, this is still
something to think about. So,

00:33:39.851-->00:33:43.788
for those of you who are
familiar with CouchDB, this
attack may be obvious. The

00:33:43.788-->00:33:48.693
CouchDB doesn’t use
authentication by default. And
uh, yesterday I was scrolling

00:33:48.693-->00:33:55.033
through the most up to date
fabric documentation and their
using CouchDB section doesn't

00:33:55.033-->00:34:00.338
even use the word password in
it. Uh, this is very
disappointing. Uh, they do have

00:34:00.338-->00:34:03.608
it in their configuration
section, the CouchDB
configuration. How to like,

00:34:03.608-->00:34:07.112
customize it and everything but,
you know, who’s customizing
their deployments? They’re just

00:34:07.112-->00:34:13.118
like, copy and pasting code
GitHub. Come on. So, what does
this look like? What can we do

00:34:13.118-->00:34:19.991
with uh, modifying couch
keeping. Let’s take a look. So
I’m gonna pick a value in the

00:34:19.991-->00:34:25.664
web app that cannot be changed.
So, this is theft insured
column, and I’ve picked this not

00:34:25.664-->00:34:30.802
included thing. And it turns out
there’s simply no chaincode that
ever modifies this value. Once

00:34:30.802-->00:34:36.841
this value has been set, it’s
set forever. Okay. It’s part of
the JSON document, but uh,

00:34:36.841-->00:34:41.012
there’s, there’s no way to, no
way to change it using
chaincode. But I can, I’m gonna

00:34:41.012-->00:34:45.617
use the Tineola SSH proxy
command on the left. This does a
reverse SSH proxy back to my

00:34:45.617-->00:34:50.622
machine and opens up a port that
points to, in this case, the
insurance app’s CouchDB port.

00:34:52.924-->00:34:57.862
And uh, CouchDB comes with a, a
beautiful web interface. And if
there’s no password on it, it

00:34:57.862-->00:35:02.367
just like drops you to a read
write shell, so that’s pretty
sweet. So on the right I can see

00:35:02.367-->00:35:08.373
it’s loading some JSON and then
I go to the slash underscore
utils directory, and we have

00:35:08.373-->00:35:13.144
this beautiful web interface.
This is all the channels, all
the chaincode that’s absolved in

00:35:13.144-->00:35:17.482
the machine. We can see
everything. I’m gonna maximize
it cuz uh, it’s kinda hard to

00:35:17.482-->00:35:22.487
read this. Make it big. Come on.
There we go. And there’s the
contract type. So this is the,

00:35:24.956-->00:35:28.793
the value that we want to
modify. There’s theft insured,
that’s false. I’m just gonna

00:35:28.793-->00:35:35.000
change it to true and, and hit
save. Right? So at this point,
the insurance peer, I, I’m not a

00:35:35.000-->00:35:41.206
member of the insurance company.
I can’t normally talk to this
peer, has modified itself to say

00:35:41.206-->00:35:46.211
theft insured is present, right?
So we’ve modified this peer’s
vision of the network. We’ve not

00:35:48.313-->00:35:53.585
transacted anything, there’s no
evidence of this on the chain.
Just this one peer thinks that

00:35:53.585-->00:36:00.392
this value is true. Uh, to
demonstrate this we can hop over
to the shop here. So the shop

00:36:00.392-->00:36:06.498
runs its own uh, stack and its
own CouchDB instance and its
version of the network will be

00:36:06.498-->00:36:10.468
slightly different cause we
haven’t attacked this one yet.
So I’m gonna just show you here,

00:36:10.468-->00:36:15.173
here it is. So the same
contract, the theft insured box
is not checked yet. So we have

00:36:15.173-->00:36:20.512
a, you know, uh, we have
conflict between multiple peers.
So I’ve got an idea, right? So I

00:36:20.512-->00:36:24.816
could attack the shop peer’s
well in the same way, but maybe
they were clever. Maybe they’ve

00:36:24.816-->00:36:29.521
got passwords there, right? But
uh, what if, what if, what if we
could propagate it, right? So

00:36:29.521-->00:36:33.792
we’re using default endorsement
policy. Just 1 peer needs to be
compromised to affect the rest

00:36:33.792-->00:36:38.563
of the network. So I’m just
gonna disable and reenable this
contract. So that’s all I’m

00:36:38.563-->00:36:43.334
doing here. I disabled it now
I’m gonna hit enable again.
Doon. K, I’m gonna refresh this

00:36:43.334-->00:36:49.974
page and it turns out, it read
the JSON, modified the enabled
flag and then wrote it back with

00:36:49.974-->00:36:54.579
the tainted value. So it's
still, still there. But this
time, I’m gonna go over to the

00:36:54.579-->00:36:59.584
shop peer, I’m gonna refresh the
page and then go up and look
it’s checked. So we’ve

00:37:01.553-->00:37:08.460
propagated a value the chaincode
says can never be changed by
messing with CouchDB due to a

00:37:08.460-->00:37:14.232
poor uh, a poor endorsement
policy. So we’ll go over to
Tineola to see what, what

00:37:14.232-->00:37:19.237
happened and uh, this is, this
is not even the right, what’s
going on? This is not even the

00:37:22.774-->00:37:27.712
right video. Here we go. So
we’ll go into Tineola and say
hey Tineola what happened? Like,

00:37:27.712-->00:37:32.484
show me the channel history of
what, what just happened. And
these are the only 2 blocks that

00:37:32.484-->00:37:36.921
were written. Okay? It’s a
contract type set active and it
said active false and then

00:37:36.921-->00:37:43.761
active true. That’s it. No trace
of this theft insured flag
changing but we can really dig

00:37:43.761-->00:37:46.965
into it, right? So I mentioned
read write sets awhile back,
let’s take a look at what those

00:37:46.965-->00:37:53.438
look like. So here’s the read
write set. So in green we see
this contract type that we

00:37:53.438-->00:37:57.742
modified was read from the
database and then we see it was
written back. And you see the

00:37:57.742-->00:38:01.646
whole JSON documents there. So
that’s how JSON documents work
in a key value store, you can’t

00:38:01.646-->00:38:06.451
just modify a subvalue in
CouchDB, you gotta write back
the whole thing. Uh, and we can

00:38:06.451-->00:38:10.054
see, uh, I’m gonna highlight it
in a second, that the theft
insured flag is tainted, right?

00:38:10.054-->00:38:15.126
There it is. Theft insured true.
So we’ve got a endorsed write
set with our tainted data

00:38:15.126-->00:38:20.031
written back to the chain. Now
all the peers trust it, and
that’s how we break it.

00:38:24.736-->00:38:29.741
[audience applause] Sweet.
[speaker laughs] Okay. So we’ve
talked about a bunch of things,

00:38:33.511-->00:38:39.551
right? So to wrap up, uh, we’ve
got fabric, it’s a brand new
platform. Uh, no one knows how

00:38:39.551-->00:38:44.155
it works from a security
perspective but I think at least
about 100-->000-->000-->000 dollars

00:38:44.155-->00:38:47.559
from what I understand has been
pumped into this thing. Either
the development of the platform

00:38:47.559-->00:38:53.932
itself or development of apps on
top of it. It’s huge. It’s
coming. Uh, your data will be on

00:38:53.932-->00:38:58.803
the blockchain very soon. We
need to know about these
problems because the developers

00:38:58.803-->00:39:02.941
of the platform, they’re aware
of these things, but it's hard
to fix a lot of them. They’re

00:39:02.941-->00:39:08.446
architectural or they’re,
they’re just uh, a lot of it is
chaincode needs to be better.

00:39:08.446-->00:39:12.850
Right? And so, until we get the
platforms to be better we need
to write our chaincode better.

00:39:12.850-->00:39:17.522
We need to make awareness of
these problems bigger. There are
so many cryptocurrency talks now

00:39:17.522-->00:39:21.960
I can’t keep track of them all,
but I haven’t heard anyone bring
this up. So we need to be

00:39:21.960-->00:39:25.163
talking about this more and I,
I, I’m just gonna start
screaming about blockchains now

00:39:25.163-->00:39:31.035
so I’m, I’m gonna stop. [speaker
sniffs] Okay. Uh, all, ooh, ooh,
okay. So everything you’ve seen

00:39:31.035-->00:39:36.007
is open source, please go get
it. We’ve got it on uh, GitHub,
it’s fresh, I commited it like

00:39:36.007-->00:39:40.478
20 minutes before I came out
here. We've got a white paper on
there, it explains everything we

00:39:40.478-->00:39:45.283
wanted to say here but we didn’t
have time. So I think we have a
little bit of time, I lost track

00:39:45.283-->00:39:49.754
of my goon. Uh, so if there are
any questions I’m more than
happy to take them now if we

00:39:49.754-->00:39:54.058
have time or uh, I’ll be around.
I’ve got 5 minutes so I can take
like 2 questions, there’s a mic

00:39:54.058-->00:39:59.063
in the middle. Thank you guys,
this was awesome. [audience
applause]

