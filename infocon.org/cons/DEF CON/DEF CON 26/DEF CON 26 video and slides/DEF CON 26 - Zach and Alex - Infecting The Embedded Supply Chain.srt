00:00:00.300-->00:00:05.305
>>So we have 2 more f- first
time speakers coming up here.
We’re gonna give them the, only

00:00:11.178-->00:00:17.651
piece of DEF CON merch that y-
each and everyone of you out
there could earn but you have to

00:00:17.651-->00:00:23.390
earn it. Not only do we give
them shots they get their newb
shot glass. That’s our present

00:00:23.390-->00:00:30.130
to them for coming and giving a
talk at DEF CON. So, help me
welcome Zach and Alex to their

00:00:30.130-->00:00:35.135
first talk. [Applause] Cheers.
>>Cheers. >>And their talk, inf-
infecting the embedded supply

00:00:43.543-->00:00:47.915
chain. I was telling them on the
walk over here. I haven’t read
your abstract but just from the

00:00:47.915-->00:00:54.788
title I saw that and I’m like,
yeah we need to do better at
that. Cause I work on an

00:00:54.788-->00:00:59.259
embedded device and eh, they’re
poking holes we’re we’ve got
holes. Alright help me we

00:00:59.259-->00:01:04.197
welcome Zach and Alex.
[Applause] >>Hello. Can you guys
hear us? Hello everybody. This

00:01:10.203-->00:01:15.108
is uh infecting the embedded
supply chain. So disclaimer, um
we thought we had a 45 minute

00:01:15.108-->00:01:20.314
slot. But we actually have 20
minutes. So we’re gonna try our
best to condense everything

00:01:20.314-->00:01:25.352
within that 20 minutes. So we
have a couple videos um, which
we’ll try to do, we’ll try to

00:01:25.352-->00:01:30.223
get to everything um, but if we
don’t’ make it to everything
we’ll post everything to our

00:01:30.223-->00:01:34.861
website. Somerset Recon dot come
and we’ll have proof of concept
code on GitHub as well. So you

00:01:34.861-->00:01:39.866
guys can check that out. >>Um,
I’m Zach, like I said I work at
Somerset Recon, I do a

00:01:41.935-->00:01:46.773
combination of web application
pen testing and reverse
engineering. I specialize in

00:01:46.773-->00:01:52.379
vulnerability research and
exploit development. >>I’m Alex
I’m a barista that occasionally

00:01:52.379-->00:01:57.084
does security things at Somerset
Recon. Uh, I enjoy making
cappuccinos, hardware hacking

00:01:57.084-->00:02:02.990
and reverse engineering. >>Um
just a little bit about Somerset
Recon we are a security

00:02:02.990-->00:02:08.128
consultancy based out of San
Diego. We specialize in web
applications, mobile

00:02:08.128-->00:02:13.133
applications and embedded device
security. Um, and you can find
out more about us at Somerset

00:02:13.133-->00:02:20.007
Recon dot com. >>And our twitter
handle. Cool So aside from our
day to day work we also like to

00:02:20.007-->00:02:24.845
do uh some cool side projects.
Uh one of which was an
electronics saf- uh safe lock

00:02:24.845-->00:02:30.651
that we looked at. Um that
allowed you to uh, either enter
in a pin manually to unlock a

00:02:30.651-->00:02:35.656
safe or ya know over Bluetooth
on um, your uh favorite mobile
device. Um we found some

00:02:37.691-->00:02:42.596
vulnerabilities there including
being able to dig decode pins
wirelessly over the air and

00:02:42.596-->00:02:49.436
replay them and also um, we
reversed the uh wire protocol
and created a brute force um

00:02:49.436-->00:02:55.008
device for that. Um, we also did
work on the Hello Barbie which
is an IOT doll that kids can

00:02:55.008-->00:02:59.980
talk to and have a full
conversation with. Uh we looked
at all the uh web services and

00:02:59.980-->00:03:04.351
reversed the mobile applications
and pretty much just figured out
how all that worked and found

00:03:04.351-->00:03:10.490
some vulnerabilities and made a
white paper which is online as
well. So um, these are all

00:03:10.490-->00:03:15.695
embedded devices and that’s
primarily what we focus on uh on
our side research. And so when

00:03:15.695-->00:03:20.033
we decided to do this research
we wanted to do something
slightly different but touched

00:03:20.033-->00:03:25.038
on it still. Um, so we tried to
look at what all these projects
had in, in common. And we

00:03:28.041-->00:03:33.046
thought, why not look at their
uh ya know the tools used to
program and debug them? Um, so

00:03:35.849-->00:03:40.854
this is our target um we focused
on the Segger j-link which is
uh, a pretty popular device um

00:03:42.856-->00:03:49.663
on both the hardware and the
software used to control it. Uh
the Segger j-link debug probe uh

00:03:49.663-->00:03:54.868
communicates with a embedded
device that you’re targeting and
trying to program. Like a mobile

00:03:54.868-->00:03:59.873
device for instance uh over JTAG
uh SWD, etcetera. Um it’s an in
circuit emulator and an in

00:04:02.375-->00:04:07.314
circuit system programmer so it
could program chips. It
primarily supports uh ARM and

00:04:07.314-->00:04:14.054
ARM Cortex chips. But also
supports uh some others like
RISC, um it communicates with

00:04:14.054-->00:04:19.092
the host uh computer over USB
and ethernet which is kind of
interesting. Has uh cross

00:04:19.092-->00:04:25.365
platform tool change and some
other cool features. Um, and the
Segger j-links are the most

00:04:25.365-->00:04:30.337
widely used line of debug probes
available today. Which is a
quote from them. That’s kind of

00:04:30.337-->00:04:37.010
cool Um, other than hardware
they create a ton of software.
Um including like the software

00:04:37.010-->00:04:43.083
package that’s used to control
the j-links themselves. They
also have a GDB server, um RTOS

00:04:43.083-->00:04:48.388
plugin source development kit.
Um a couple of real time
analysis visualization tools and

00:04:48.388-->00:04:54.294
a graphical debugger. Um, we
primarily focused on the
software suite used to control

00:04:54.294-->00:04:59.900
these j-link devices and this
package just includes a ton of
tools. Including uh j-link

00:04:59.900-->00:05:03.870
commander which is like your
typical command line tool that
you would use with most

00:05:03.870-->00:05:08.875
debuggers. Um, a GDB server, a
remote server, which allows a
client to connect to a j-link

00:05:11.811-->00:05:18.318
commander session um, within the
local network. Uh a memory
viewer and a flashing tool they

00:05:18.318-->00:05:24.524
just flash. So typical setup
looks like this. You have a host
PC that has a software suite

00:05:24.524-->00:05:28.228
installed and you’re
communicating to this j-link
device through USB and ethernet

00:05:28.228-->00:05:34.568
and then you connect it to your
embedded target over jtag or
SWD. So in terms of attack

00:05:34.568-->00:05:39.206
surface I mean there’s a lot. I
mean this company makes a lot of
different products. Um the

00:05:39.206-->00:05:45.312
hardware debug probes themselves
were interested in firmware and
ya know, uh how that works and

00:05:45.312-->00:05:52.152
also can you infect the debug
probe itself or can the debug
probe infect um, the end device

00:05:52.152-->00:05:57.123
that you’re trying to uh target?
>>Uh, and then in addition to
that there’s a lot of software

00:05:57.123-->00:06:01.628
attack surfaces. Well, I,
there’s a USB driver that’s
included with this device as

00:06:01.628-->00:06:07.334
well as a host of different user
mode applications that are run
and addition to that which is

00:06:07.334-->00:06:11.471
also a pretty interesting thing
they have a custom IDE that’s
also used to develop

00:06:11.471-->00:06:18.278
applications for the j-link.
>>So, hardware. Yeah so we’re
interested in how the hardware

00:06:18.278-->00:06:23.717
works. Um extracting firmware,
how easy is it to do that? How
does the firmware work? Um the

00:06:23.717-->00:06:27.954
feature differences between each
of the devices cause Segger
makes a ton of different types

00:06:27.954-->00:06:32.592
of j-links. Um at different
price points of course. And
we’re wondering like are there

00:06:32.592-->00:06:38.431
hardware differences or is it
just firmware? And um, with
these devices, what are the

00:06:38.431-->00:06:43.670
security mechanisms that are on
it, is the device open? Can I
flash an open source version of

00:06:43.670-->00:06:49.709
firmware or can I modify
firmware and flash the debug
probe? So, this is a typical

00:06:49.709-->00:06:55.882
j-link EDU. It’s kind of like
the cheapest consumer end uh
j-link you can get. Um, if we

00:06:55.882-->00:07:00.820
focus here, and open GIMP you
can see that it is also an ARM
device. So, the im- the tool

00:07:04.324-->00:07:10.897
that’s used to debug and program
ARM embedded devices is also an
ARM embedded device which is,

00:07:10.897-->00:07:16.069
yeah, that’s, that’s pretty
nice. Um, then were sort of
looking for ya know uh debug

00:07:16.069-->00:07:21.374
ports and found a tag-connect.
Which is uh kind of like, it,
it’s kind of like a JTAG header

00:07:21.374-->00:07:26.546
but um a proprietary connector
that has pogo pins. So, we had
one of those lying around and we

00:07:26.546-->00:07:31.284
were asking well can we do it,
do we have anything that can
program or debug this device?

00:07:31.284-->00:07:37.791
And we’re like, why not try
debugging a j-link with a
j-link. So it turns out that the

00:07:37.791-->00:07:44.264
security flash bits are set, so
that’s good. Um, the flash bit
basically means that you can’t

00:07:44.264-->00:07:49.602
pre program the device unless
you, you erase um flash, um
which you can’t do because a

00:07:49.602-->00:07:54.641
security bit is set which
basically says, uh you can’t
debug this chip. So it can’t

00:07:54.641-->00:07:59.779
debug or erase, we are looking
for other ways around this so we
needed to go deeper. So we took

00:07:59.779-->00:08:05.118
a, a look at some of the other
j-link debug probes and the
j-link mini EDU has an

00:08:05.118-->00:08:12.092
interesting feature in um, it’s
ARM chip which is called the
back door key access. Which is

00:08:12.092-->00:08:18.198
an opt in um feature that
basically if you provide the
chip with the proper key it will

00:08:18.198-->00:08:21.868
like willingly disable the
security bit and then you can
kind of do whatever you want

00:08:21.868-->00:08:28.074
with the device. Which is pretty
cool. >>So then we began really
looking at some of the uh

00:08:28.074-->00:08:32.379
desktop software that was
distributed with the Segger
j-link for security

00:08:32.379-->00:08:38.685
vulnerabilities. We started out
just doing some high level
reverse engineering. We uh,

00:08:38.685-->00:08:44.057
noticed that they distributed
their software to both Linux and
Windows systems. In reverse

00:08:44.057-->00:08:47.894
engineering this we determined
that they were using cross
compiled code. So that

00:08:47.894-->00:08:53.933
eliminated some redundant work
uh where the, u- only one of the
operating system versions really

00:08:53.933-->00:08:57.904
needed to be reverse engineered
to determine the functionality
vulnerable, por-portion of the

00:08:57.904-->00:09:02.575
code. We also noticed that they
were using some custom string
manipulation code. Which was

00:09:02.575-->00:09:07.447
somewhat interesting and we’ll
talk a little bit about that
more later. Um, we also noticed

00:09:07.447-->00:09:11.451
that they used a lot of
dangerous functions. They used
string copy, string cat and a

00:09:11.451-->00:09:16.956
lot of other things that don’t
check the length of the
destination buffer. From the

00:09:16.956-->00:09:21.961
point of binary protections
Segger opted in to most binary
protections however they did uh

00:09:24.431-->00:09:29.436
leave out both PIE and stack
canaries in their Linux
executables. So once we had that

00:09:32.539-->00:09:37.444
we began setting up some fuzzers
in order to uh test th-the
different import vector. See if

00:09:37.444-->00:09:42.115
we could find any uh
vulnerabilities that we could
begin to exploit. So we tested

00:09:42.115-->00:09:47.120
all input vectors that these
applications seemed to accept.
We tested files, uh network

00:09:47.120-->00:09:52.158
interfaces and command line
arguments that they accepted.
Since um, our reversing revealed

00:09:52.158-->00:09:56.796
that there were some really
interesting uh code paths that
were somewhere deep and required

00:09:56.796-->00:10:00.700
magic numbers and different
things to reach we decided to
use a generation fuzzing

00:10:00.700-->00:10:07.307
approach so we used peach for
that. Um, we fuzzed and got tons
of crashes and uh began looking

00:10:07.307-->00:10:12.312
into actually exploiting them.
So the first thing is the custom
string formatting. We noticed in

00:10:14.481-->00:10:20.286
uh, looking into this some
interesting usages such as shown
here. Where if it were a

00:10:20.286-->00:10:24.691
standard string formatting
function it would be a format
string vulnerability. So we

00:10:24.691-->00:10:30.997
begin looking into that a little
bit more. So the custom string
formatting that they implemented

00:10:30.997-->00:10:37.570
used most of the basic format
specifiers such as percent S,
percent N, percent D, etcetera.

00:10:37.570-->00:10:40.874
But it did not accept the
percent n that is typically used
in format string

00:10:40.874-->00:10:45.879
vulnerabilities. Um, so with
that we were able to uh do some
of the format string uh

00:10:47.981-->00:10:53.119
exploits. We were able to do
arbitrary reads as shown here
however due to the fact that it

00:10:53.119-->00:10:58.258
lacked the percent N specifier
that’s used to write bits we
were not able to turn this into

00:10:58.258-->00:11:04.330
a arbitrary write. >>Also found
in the uh j-link commander tool,
which we talked about earlier

00:11:04.330-->00:11:08.902
it’s a command line tool. Um,
there is a feature called
command file which basically you

00:11:08.902-->00:11:14.807
can feed j-link commander a uh
script to kind of set up your
environment before you start uh

00:11:14.807-->00:11:21.414
debugging your device. And this
uh, the um, file parsing code
had a vulnerability which was a

00:11:21.414-->00:11:25.218
traditional stack buffer
overflow. And so, in the image
you can see that we kind of just

00:11:25.218-->00:11:29.322
feed a bunch of A’s into a
payload and then we pass it into
a j-link EXE and then it just

00:11:29.322-->00:11:36.129
seg faults. So, if you triage
that in GDB you can see that it,
um it tries to return to address

00:11:36.129-->00:11:41.134
41, 41, 41. So we went a little
bit further with it and we were
able to create a POC um with

00:11:43.303-->00:11:49.309
like 5 basic steps. Which is
take over the return address,
get the address of Libc use that

00:11:49.309-->00:11:54.280
pointer to get the address of
system and call system with
arguments a-and you got code

00:11:54.280-->00:11:59.285
execution. Uh, we won’t be able
to go over the POC because of
time. But, ultimately uh we got

00:12:02.655-->00:12:09.462
code execution it works on the
32-bit JLinkExe binary on i386
and amd64 Linux systems and it’s

00:12:09.462-->00:12:15.435
a ROP with ASLR bypass, return
to libc and reverse shell is
very doable but it requires

00:12:15.435-->00:12:20.440
ROPing and Libc a lot. But the
general idea is with this attack
that an attacker can create a

00:12:23.142-->00:12:29.816
malicious uh, command file and
dummy firmware and send an e-,
urgent email with this as the

00:12:29.816-->00:12:34.854
attachment to a developer at a
targeted company. The developer,
developers are typically pressed

00:12:34.854-->00:12:39.125
for time so they’ll probably run
this with J-link commander and
it would pop a shell and return

00:12:39.125-->00:12:44.130
back to the attacker. Um we also
found uh in the same binary we
found a, another far out, fall

00:12:46.866-->00:12:51.004
parsing vulnerability in the
settings file flag which is very
similar to command file. Um but

00:12:51.004-->00:12:56.142
it’s in a completely different
area. Uh it’s in a library
called uh j-link ARM to SL. And

00:12:56.142-->00:13:02.348
that’s where a lot of the link
ARM specific code is in for like
uh, uh the j-link software

00:13:02.348-->00:13:07.153
suite. Um, and this is in
particular is a buffer overrun
in BSS segment so you can use

00:13:07.153-->00:13:13.593
this to kind of overwrite
function pointers in the BSS
segment. We also got RCE which

00:13:13.593-->00:13:18.865
is cool. >>So after that we
started looking at uh an in-
really interestingly named

00:13:18.865-->00:13:23.503
executable called j-link remote
server. So once we saw this we
kind of perked up a little bit

00:13:23.503-->00:13:27.974
and began trying to look at the
functionality of this
executable. So running a basic

00:13:27.974-->00:13:32.812
netstat we noticed it was
listening on a number of ports.
And particularly of interest to

00:13:32.812-->00:13:38.184
us was it looked like it was
listening as a telnet server. So
we wanted to figure out if this

00:13:38.184-->00:13:42.689
was actually having a telnet
server embedded in the
executable or what was going on

00:13:42.689-->00:13:47.627
there. So a little bit of
reverse engineering revealed
that they actually had embedded

00:13:47.627-->00:13:54.434
a telnet server within their
executable. So, it p- allows
users within the network to uh

00:13:54.434-->00:14:00.840
connect to think j-link server
and do remove debugging. So we
begin fuzzing this a noticed a

00:14:00.840-->00:14:06.746
really interesting crash where
we had overwritten the uh
instruction pointer with A, A,

00:14:06.746-->00:14:12.652
A, A, which is always good. Uh
we did a little bit of reverse
engineering and triaged on this

00:14:12.652-->00:14:16.389
and picked up a couple things.
It was a stack buffer overflow
that we were able to trigger

00:14:16.389-->00:14:22.395
remotely. We were not able to
get the crashes to be consistent
to race conditions within the

00:14:22.395-->00:14:27.333
executable. We had a fairly
limited amount of stack space to
work with if we were going to go

00:14:27.333-->00:14:33.406
to ROP chain, we were limited to
48 bytes. And again we had the
ASLR and NX enabled on this

00:14:33.406-->00:14:38.411
executable but PIE was not
enabled. So we used typical ex-
exploitation techniques we used

00:14:41.347-->00:14:46.819
ROP to bypass the NX and then
with a ROP chain we did a
dereference of the GOT in order

00:14:46.819-->00:14:52.792
to leak the address of libc.
From there we could calculate
the offset of system and then do

00:14:52.792-->00:14:58.965
a return to libc. Um, the main
issue that we ran into here was
we wanted to send arbitrary

00:14:58.965-->00:15:04.604
attacker controlled payloads to
system and we had trouble kind
of getting the user controlled

00:15:04.604-->00:15:06.606
strings to consistently be
passed in this system. So we
realized that user controls data

00:15:06.606-->00:15:08.608
was being stored in 1 of 2
locations in the executable. And
due to a race condition and we

00:15:08.608-->00:15:10.610
couldn’t determine if it was
going to be in 1 location or the
other. So we tried to figure out

00:15:10.610-->00:15:14.614
if there was some way we could
g- make it more consistent and
we came up with the following.

00:15:14.614-->00:15:18.918
So, we t- call this SPACE SLEDS
where we were inspired by the
NOP sled technique in which NOPs

00:15:18.918-->00:15:21.687
are appended to a shellcode
payload and it didn’t prove
exploit consistency. So here we

00:15:21.687-->00:15:24.390
prepend spaces to the user
controlled command string and we
hoped that that would improve

00:15:24.390-->00:15:27.260
the consistency of our exploit.
So wh- what we did here is since
the 2 locations w- we were

00:15:27.260-->00:15:29.262
seeing the attacked controlled
payload string were 72 bytes a
part we prepended 72 spaces to

00:15:29.262-->00:15:31.264
our string and that created an
overlap where we could point our
argument uh to system . So we

00:15:31.264-->00:15:36.269
have a demo where if we have
enough time at the end of this
we’ll be able to show. And then

00:15:47.313-->00:15:49.515
additionally in looking into the
j-link remote server we found
some other really interesting

00:15:49.515-->00:15:54.520
functionality. So we termed this
the tunnel server backdoor. And
Segger has this as a documented

00:16:23.916-->00:16:26.586
feature within their
application. And it, they said
it just provides a tunneling

00:16:26.586-->00:16:28.588
mode from a r- remote computer
into the er- network and allows
for remote debugging. >>Even

00:16:28.588-->00:16:30.590
when they’re not in, within the
>>In the local network, correct.
So our first thought at that

00:16:30.590-->00:16:36.762
point was I wonder what type of
authentication they’re using? If
there’s um any weakness there or

00:16:36.762-->00:16:41.767
anything that we could exploits
so as you can kind of see here
they used magic numbers in your

00:16:51.577-->00:16:56.582
device serial number to um,
authenticate your device. Uh so,
that was a pretty uh, pretty

00:16:59.285-->00:17:04.223
scary thing. So, when you uh run
j-link remote server uh with
your j-link device attached it

00:17:07.159-->00:17:12.398
sends a magic number and
registers your j-link debugger
with the server and then it

00:17:12.398-->00:17:17.270
allows client connections to
specify the serial number of the
device that they hope to connect

00:17:17.270-->00:17:22.275
to. So we looked at the serial
numbers and realized that there
were 1 bil- or 10 billion

00:17:24.644-->00:17:31.217
possibilities which would make
brute forcing all the connected
serial numbers a bit infeasible

00:17:31.217-->00:17:37.056
so we wondered is this actually
y- something that would be a
potential attack? Is there some

00:17:37.056-->00:17:40.526
way that an attacker could
shrink the space of serial
numbers that they would attempt

00:17:40.526-->00:17:47.166
to brute force? So we were l-
began looking into is there some
format that Segger uses for

00:17:47.166-->00:17:52.571
their serial numbers, is there
link some smaller range or
number that they start at that

00:17:52.571-->00:17:59.345
we could use to shrink the
space? So we googled Segger
j-link and found tons of images

00:17:59.345-->00:18:04.483
that people have posted online
that included their device
serial number. Uh we called some

00:18:04.483-->00:18:09.322
people that we know that also
had Segger j-links and asked
their device serial numbers and

00:18:09.322-->00:18:15.361
in the end we got about 30
j-link serial numbers that we
were able to analyze and started

00:18:15.361-->00:18:21.901
to notice a few patterns that
emerged. So the first 2 digits
of the serial numbers were

00:18:21.901-->00:18:28.474
correlated with the model of
device. Whether you had a j-link
pro or a j-link mini. After that

00:18:28.474-->00:18:33.012
2 digits for the version where
if segger would release a
slightly updated version that

00:18:33.012-->00:18:39.018
would increment and then finally
the last uh 5 digits are a
device unique number that’s

00:18:39.018-->00:18:44.357
incremented. So doing a little
bit of analysis on the numbers
that we had we were able to

00:18:44.357-->00:18:49.061
shrink the serial numbers space
and still achieve what we think
would be very good coverage with

00:18:49.061-->00:18:54.900
only a 100-->000 serial numbers
and assuming about 10 serial
numbers per second could be

00:18:54.900-->00:18:58.771
brute forced which is about the
length that we saw with the
connections taking um when it

00:18:58.771-->00:19:05.044
was done properly via the j-link
application. It would take the
time from 31 years to brute

00:19:05.044-->00:19:10.683
force the space to about 3
hours. The impact here really is
once you make a connection via

00:19:10.683-->00:19:16.455
this server you can do all sorts
of things. You can flash new
firmware, you can read existing,

00:19:16.455-->00:19:21.060
or read the existing firmware or
make any sort of malicious
modifications to the connected

00:19:21.060-->00:19:27.700
devices. So we uh disclosed to
Segger and we’re really pleased
with the response. They

00:19:27.700-->00:19:34.273
responded right away and got
back to us within a week. And
uh, it was very uh we even

00:19:34.273-->00:19:39.278
received a thank you from the
founder and CTO of the company.
So in conclusion we just really

00:19:42.114-->00:19:47.586
realized that a- there’s, these
devices are often times lacking
and a lot of the protection’s

00:19:47.586-->00:19:53.125
insecurity that we would hope
from a [audio breaks] of the
supply chain it was lacking the

00:19:53.125-->00:19:57.797
PIE flag which would have made
our exploit, exploitation much
more difficult. As well as

00:19:57.797-->00:20:03.969
having, lacking the security
features that are just
architectural, architectural and

00:20:03.969-->00:20:08.974
no authentication in the uh,
remote server or anything like
that. >>Col, but wait there’s

00:20:08.974-->00:20:14.847
more. Okay before we run out of
time. Um we revisited uh the
j-link hardware uh but instead

00:20:14.847-->00:20:21.053
of from uh instead of hav- from
the perspective of trying to
manipulate the firmware with a

00:20:21.053-->00:20:27.393
hardware debugging device uh
from the OTA process. Um, we
realized that if you download

00:20:27.393-->00:20:32.765
uh, a newer version of the
j-link uh software suite uh
j-link commander will ask you if

00:20:32.765-->00:20:37.336
you want to update your j-link
debug probe. And so we started
from the network perspective and

00:20:37.336-->00:20:41.040
found that there were, there was
no firmware blogs being
transferred over the network and

00:20:41.040-->00:20:46.512
we thought that was kind of
interesting. So uh we eventually
figured out where firmware was

00:20:46.512-->00:20:52.551
being um stored and how the
update process worked. Um and we
reversed the USB protocol to be

00:20:52.551-->00:20:57.556
able to uh flash the, uh j-link
devices. Um, and it turns out
that the j-link device um when

00:21:01.794-->00:21:07.466
it’s being flashed over a USB it
does do a firmware check but
it’s not very good and it uses

00:21:07.466-->00:21:12.238
dates to check whether our
firmware is valid [audio breaks]
so this could be a bad thing. Um

00:21:12.238-->00:21:17.243
also firmware’s not signed and
can be modified. So in the end
um, w- we don’t have time for

00:21:19.678-->00:21:23.949
the video but um we to
illustrate it we created a piece
of malware that runs on windows

00:21:23.949-->00:21:28.487
and it runs silently in the
background and just anythi-
j-link device that’s connected

00:21:28.487-->00:21:34.894
via USB it immediately flashes
and completely breaks., ha, by
um flashing um firmware that’s

00:21:34.894-->00:21:40.499
set like way far in the future
and you can’t fix your device
unless you have like hardwire

00:21:40.499-->00:21:45.504
debugging um privileges. And
that’s it. Cool. [applause]
Cool, cool. [applause]

