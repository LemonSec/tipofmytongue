00:00:00.133-->00:00:05.138
>> Have a warm DefCon welcome
for Ian Foster and Dylan Avrey,
or Ayrey? >> Ayrey. >> Ayrey,

00:00:09.676-->00:00:14.681
sorry. Uh, Lost and Found
Certificates. [applause] >> So,
just as a quick introduction,

00:00:19.319-->00:00:26.226
uh, as mentioned this is Ian.
He’s a motorcycle hobbyist, and
DNS nerd. >> And this is Dylan,

00:00:26.226-->00:00:30.430
electrical bike enthusiast and
cat owner. >> Did you say cat
owner? >> Yeah. >> It’s true

00:00:30.430-->00:00:37.137
though. [laughter] So, basically
the problem that we’re going to
be talking about today is, uh,

00:00:37.137-->00:00:42.009
[bumps microphone] an SSL
certificate from a previous
owner is, um, still valid for uh

00:00:42.009-->00:00:46.847
the next owner of the domain.
The previous owner gets a real
SSL certificate, they are

00:00:46.847-->00:00:52.019
allowed to do, their domain
either expires or transfers
ownership and then the new owner

00:00:52.019-->00:00:58.492
of the domain, um, they, uh,
they - they maybe don’t realize
that the previous owner still

00:00:58.492-->00:01:04.097
has a valid SSL certificate and
prior to 2013, um, there was
really no way whatsoever to get

00:01:04.097-->00:01:10.003
any visibility of this, um, and
really, like when you think
about it it seems kind of silly

00:01:10.003-->00:01:13.073
that this is even an issue.
>>[clears throat]Yes, in the
example we have here at the

00:01:13.073-->00:01:17.244
bottom we say Alice registers a
domain name, in this case foo
dot com for one year and gets an

00:01:17.244-->00:01:21.648
SSL certificate, in this case 3
years, more than the 1 year
domain name. Our registration

00:01:21.648-->00:01:25.953
foo dot com is unregistered
because Alice doesn’t renew it.
And then Bob later registers foo

00:01:25.953-->00:01:30.724
dot com, gets his own SSL
certificate, completely unaware
that Alice’s SSL certificate is

00:01:30.724-->00:01:37.164
still valid for his domain name
and she can encrypt traffic to
it. So, in order to help, um,

00:01:37.164-->00:01:41.935
try to identify these
certificates we have to search
it for transparency. This was

00:01:41.935-->00:01:47.040
created as a public - publicly
auditable log of all SSL
certificates to help catch

00:01:47.040-->00:01:50.777
misbehaving certificate
authority. It’s currently about
half a billion certificates and

00:01:50.777-->00:01:56.583
growing. >> Uh, and basically we
can use certificate transparency
to identify this issue. Um,

00:01:56.583-->00:02:01.121
which gives us way more
visibility then we had before.
So, basically the previous owner

00:02:01.121-->00:02:06.727
has an SSL certificate and it
gets logged in CT, we can see
it, and we know from that um,

00:02:06.727-->00:02:12.032
that - that there are still
certificates, um, for our domain
that we don’t have control of.

00:02:12.032-->00:02:17.037
Um, so we look for like, um,
really notable examples of this,
um, an- and we were able to find

00:02:19.206-->00:02:24.044
some. Um, 1 particular example
is for Stripe. So, um, if you’re
not familiar with Stripe they’re

00:02:24.044-->00:02:29.082
a really big online payment
processor and a large percentage
of transactions that you may

00:02:29.082-->00:02:33.387
have conducted online on
ecommerce websites, um, may have
actually, uh, used Stripe under

00:02:33.387-->00:02:39.092
the hood. Um, what we found was
that the previous owner of
Stripe dot com still had a valid

00:02:39.092-->00:02:43.597
SSL certificate when Stripe
bought it. And now the crossover
was relatively short but it

00:02:43.597-->00:02:48.568
didn’t have to be. It could have
been a 5 year cert, it could
have been all the way up to

00:02:48.568-->00:02:53.974
today. >> So we trace it out to
figure out how big is this
issue. So we search certificate

00:02:53.974-->00:02:58.345
transparency to look for
certificates that overlapped
multiple domain ownerships or

00:02:58.345-->00:03:05.252
registrations. And the hard part
of this is trying to find out
when a domain name changed

00:03:05.252-->00:03:08.288
hands. Uh, there’s no easy way
of doing this, um, the best way
we could do - look at was

00:03:08.288-->00:03:10.590
historical WHOIS, historical
nameservers and the WayBack
machine. And we surveyed 3

00:03:10.590-->00:03:15.095
million random domain names from
the internet and they associate
7 point 7 million certificates

00:03:15.095-->00:03:18.732
which makes up just about 1
percent of the entire internet.
So a fairly small study which

00:03:18.732-->00:03:23.003
should give a general idea of
what the entire internet looks
like. And we look for changes

00:03:23.003-->00:03:26.506
like expiration date, email
contacts, registrar changes to
try to determine whether or not

00:03:26.506-->00:03:30.744
a domain name has changed hands
or not. And, this type of
analysis is not perfect, there

00:03:30.744-->00:03:35.248
are both false negatives and
false positives. Um, but should
give us - still give us a good

00:03:35.248-->00:03:39.920
idea of what we’re looking at.
And we found that, uh, on our
data set about 40 - point 45

00:03:39.920-->00:03:43.290
percent of the domain names were
- had pre-existing SSL
certificates which extrapolates

00:03:43.290-->00:03:48.829
that the internet is about 1
point 5 million domain names and
of the certificates for this 1

00:03:48.829-->00:03:53.133
and a half million domain names
about 25 percent had not expired
and are still valid right now.

00:03:53.133-->00:03:59.639
And so, we are calling this
problem BygoneSSL. Which is -
we’re defining as an SSL

00:03:59.639-->00:04:05.912
certificate created before and
supersedes its domains’ current
registration date. This is just

00:04:05.912-->00:04:11.017
another way of saying that the
SSL certificate spans multiple
domain name registrations. So,

00:04:11.017-->00:04:16.623
could this be any worse? So, as
many of you might know a
certificate can be valid for

00:04:16.623-->00:04:19.826
multiple domain names. In this
case we have a certificate for
both foo dot com and bar dot com

00:04:19.826-->00:04:23.964
and its certificate can be good
for a domain name whose changed
ownership and some of the domain

00:04:23.964-->00:04:27.901
names may have not changed
ownerships. In this example bar
dot com has always had the same

00:04:27.901-->00:04:33.039
owner and foo dot com may have
changed owners one or more times
during the existence of the this

00:04:33.039-->00:04:39.346
certificate. >> So, if it’s not
immediately clear a lot of CDN’s
will actually shove a whole

00:04:39.346-->00:04:44.417
bunch of customers on the same
cert. And in this kind of
extreme case we found one

00:04:44.417-->00:04:49.790
instance of the CDN putting 700
of their customers on a single
certificate. Um, and, we’ve made

00:04:49.790-->00:04:54.261
the decision to blur this out
because this is still a valid
issue but if we were to show the

00:04:54.261-->00:04:58.532
domains used on this certificate
I promise everyone in this
audience would recognize some of

00:04:58.532-->00:05:03.703
them. And what we found was the
one unblurred domain there was
actually currently unregistered.

00:05:03.703-->00:05:09.776
It expired, um, and it was
available for purchase. So, we
basically have 2 options here,

00:05:09.776-->00:05:17.050
of whether or not we can revoke
these certificates. Uh, you
know, the questions like, should

00:05:17.050-->00:05:21.688
we have the right to revoke
these certificates. If you say
no then you can imagine shelling

00:05:21.688-->00:05:26.760
out a whole bunch of money for a
new domain, maybe for your new
startup, and you find that

00:05:26.760-->00:05:30.363
there’s an old SSL certificate
in CT that’s going to last for
another 5 years and you just -

00:05:30.363-->00:05:34.301
you can’t do anything about it.
You just have to live with that
fact. You can imagine a scenario

00:05:34.301-->00:05:38.371
where a bad guy might squat on a
whole bunch of desirable looking
domains and just selectively

00:05:38.371-->00:05:43.877
only give them out to ecommerce
websites so that they could
maintain SSL certificate man in

00:05:43.877-->00:05:50.684
the middle, back traffic and
steal financial data. On the
other hand, if we say yes, if

00:05:50.684-->00:05:53.253
you can revoke these
certificates you get these
situations where certificates

00:05:53.253-->00:05:59.593
have both Bygone domains on them
and non-Bygone domains on them.
A lot of cases are still used in

00:05:59.593-->00:06:02.696
production and if you give the
new owner the right to revoke
these certificates then all of

00:06:02.696-->00:06:07.534
the sudden they have the power
to denial of service the - the -
the websites that are still

00:06:07.534-->00:06:10.804
using that certificate for
legitimate reasons. So it’s
really a lose, lose scenario. >>

00:06:10.804-->00:06:18.378
So we dug a little deeper and we
learned about this CA’s and
browsers forum and this is a

00:06:18.378-->00:06:22.682
group of people made up a
representatives from both web
browsers and certificate

00:06:22.682-->00:06:28.221
authorities who create a -based
on requirements for the issuance
and management of publicly

00:06:28.221-->00:06:31.791
trusted certificates. Which is
just a long document that
specifies how CA’s and browsers

00:06:31.791-->00:06:38.031
should operate so that the
certificate authorities can be
trusted by web browsers. And uh,

00:06:38.031-->00:06:42.202
inside this very long document
in section 963 subsection 5 it
talks about revocation and - the

00:06:42.202-->00:06:46.606
reporting of revocation and it
does specify that if any
information in a certificate

00:06:46.606-->00:06:51.978
becomes inaccurate or incorrect
that the certificate authority
must revoke the certificate. >>

00:06:51.978-->00:06:56.883
So, like, on the previous slide
like, inaccurate, that’s kind of
an ambiguous term, like we found

00:06:56.883-->00:07:02.055
this other section though, 4
point 9 point 1 point 1 and this
one in my option is a lot more

00:07:02.055-->00:07:07.761
explicit. Basically says if the
domain name registrant fails to
renew the domain name, then the

00:07:07.761-->00:07:12.365
certificate authority becomes
made aware of that - that that
certificate authority has to

00:07:12.365-->00:07:17.404
revoke the certificate within 24
hours. Now, we’re caveating this
with the fact that we were

00:07:17.404-->00:07:24.644
warned by CAB members that this
document is very, um, ambiguous
and sometimes

00:07:24.644-->00:07:30.817
self-contradictory. People that
draft this document often times,
lawyers, not actually engineers.

00:07:30.817-->00:07:36.489
That being said, to the best of
our knowledge we have the right
and the power to revoke these

00:07:36.489-->00:07:43.029
certificates and we have the
power to do so within 24 hours.
>> So going back to the previous

00:07:43.029-->00:07:47.667
example of the certificate for
foo dot com, bar dot com where
one domain name has changed

00:07:47.667-->00:07:51.971
owners and one has not. This now
means that if bar dot com is
still using the certificate that

00:07:51.971-->00:07:56.209
was valid for both foo dot com,
bar dot com, um, the new owner
of foo dot com could reach out

00:07:56.209-->00:08:00.313
to bar dot com certificate
authority and revoke the
certificate and cause a denial

00:08:00.313-->00:08:05.685
of service on them or at least
their SSL users will get an SSL
warning. Alright, so looking at

00:08:05.685-->00:08:08.955
cases of this where domains
share a certificate with, uh,
other domains that change

00:08:08.955-->00:08:13.960
ownerships that number
skyrockets or goes up to 4 times
increase up to y million domain

00:08:13.960-->00:08:17.397
names on the internet that are
potentially affected. Um, about
2 percent. Um, and of this

00:08:17.397-->00:08:21.835
sample size about 41 percent,
just under half, still haven’t
expired and are still valid and

00:08:21.835-->00:08:27.941
potentially still being used. >>
So, I mean, at this point Ian
and I realizing we can break -

00:08:27.941-->00:08:33.079
break stuff. Like, a lot of
stuff. Um, Ian and I had the
power to revoke something like 3

00:08:33.079-->00:08:38.618
million certificates and the
CA’s had a legal obligation to
do so within 24 hours. And most

00:08:38.618-->00:08:42.155
of those certificates, well I
shouldn’t say most, a lot of
those certificates were still

00:08:42.155-->00:08:46.593
being used in production so it
would have broken all kinds of
websites, all kind of places. A

00:08:46.593-->00:08:52.165
lot of the websites are
definitely ones that a lot of
you are familiar with. And so,

00:08:52.165-->00:08:56.870
we thought that this basically,
there’s no real clean fix to
this so we just have to

00:08:56.870-->00:09:01.107
introduce a new class of
vulnerability and there’s 2
flavors to this. The first

00:09:01.107-->00:09:06.913
flavor is the one that we first
introduced. It’s when you get a
new domain and you notice or

00:09:06.913-->00:09:11.317
don’t notice, you see in the CT
log that the previous owner
still happens to have a valid

00:09:11.317-->00:09:18.425
SSL certificate. We’re calling
that variant the Bygone SLL man
in the middle variant. >> And

00:09:18.425-->00:09:21.694
the other type is the type that
I was just talking about which
is the Bygone SSL denial of

00:09:21.694-->00:09:24.597
service where you share a
certificate and you’re still
using it with an alt-name which

00:09:24.597-->00:09:29.602
is expired or has been acquired
by someone else and that gives
them the power to revoke the

00:09:29.602-->00:09:35.275
certificate that you’re using.
If they were to do that it would
take down your site. >> Um, so

00:09:35.275-->00:09:40.880
if you remember back from a
couple of slides ago, uh, there
was that CDN that shoved 700

00:09:40.880-->00:09:46.753
customers on one cert. We now
realize that if we bought that
domain and reached out to the

00:09:46.753-->00:09:50.623
certificate authority we could
say, hey, the previous domain
owner failed to renew, you have

00:09:50.623-->00:09:57.831
to revoke this thing. And we now
have the power to revoke it and
break 700 customer’s websites.

00:09:57.831-->00:10:02.302
Now, for a demo I’m going to be
tabbing over to an email client
and in real time revoking this

00:10:02.302-->00:10:10.143
cert. Not really. [laughter] Um,
but - but, we totally have the
power to do that. So for our

00:10:10.143-->00:10:16.216
pre-recorded demo, um, we - we
have a couple of certs here that
we uh, that we did reach out to

00:10:16.216-->00:10:20.653
the certificate authorities just
to see whether or not it would
actually revoke them. And so,

00:10:20.653-->00:10:25.458
for the first example here on
the left for uh, Digicert, I
should mention this cert had a

00:10:25.458-->00:10:30.730
subject alt-name on it the
subject alt-name was using that
certificate in production. Um,

00:10:30.730-->00:10:35.802
we reached out, we say, hey 1 of
the domains on this certificate
belongs to us. Can you please

00:10:35.802-->00:10:40.673
revoke the cert? And the way we
framed the email it seemed like
we didn’t own the other domain.

00:10:40.673-->00:10:45.078
And within 24 hours Digicert
verified that we did own the 1
domain, didn’t verify we owned

00:10:45.078-->00:10:50.383
the other domain. They had no
problem revoking the cert. So,
another example here. We reached

00:10:50.383-->00:10:56.055
out to a - a - Amazon, and I
should mention also like usually
certificates have a little field

00:10:56.055-->00:11:01.361
on them called CPS contact and
the CPS contact is basically the
email contact you want to reach

00:11:01.361-->00:11:06.566
out when you want to revoke a
certificate. That’s the contact
that starts the 24 hour timer

00:11:06.566-->00:11:10.904
when you reach out to that. Um,
so we did that for Digicert. For
Amazon they actually didn’t have

00:11:10.904-->00:11:16.643
a CPS contact in their
certificate and it’s kinda hard
to reach out to AWS if there’s

00:11:16.643-->00:11:21.047
not, um, if you’re not like a
customer of AWS. So, we tried to
do this the best we can without

00:11:21.047-->00:11:26.219
actually creating an AWS account
and we found this public email,
ec2-abuse at amazon dot com and

00:11:26.219-->00:11:29.389
that’s the one we reached out
to. It took a little bit of back
and forth and a little bit of

00:11:29.389-->00:11:34.561
routing but eventually that got
us to the right, uh the right
certificate people. Took a

00:11:34.561-->00:11:41.801
couple weeks but again they had
no problem revoking the
certificate for us. So, uh, this

00:11:41.801-->00:11:46.272
is our pre-recorded demo that
failed. Um, we reached to, uh,
Comodo and same thing. We

00:11:46.272-->00:11:50.209
reached out to the CPS contact
to ask them to revoke the
certificate and, uh, to this day

00:11:50.209-->00:11:53.746
they haven’t revoked the
certificate. They basically
said, uh, you’re not the

00:11:53.746-->00:11:57.116
original owner, like, you didn’t
generate that certificate and we
- we’re not going to pay

00:11:57.116-->00:12:01.254
attention to you at all. And on
the bottom there you can see
they - they actually tried to

00:12:01.254-->00:12:04.724
use that as upselling
opportunity saying, forget about
the old certificate, we’ll sell

00:12:04.724-->00:12:08.828
you a shiny new one and you can
just forget about the - the -
the one the previous owner still

00:12:08.828-->00:12:15.935
has. >> So next we tried the
revoke certificates using Let’s
Encrypt, which is a slightly

00:12:15.935-->00:12:20.740
different type of certificate
authority. They use the ACME
protocol to try to automate as

00:12:20.740-->00:12:24.611
much as the can with no human
interaction. Um, and if
currently used the ACME protocol

00:12:24.611-->00:12:28.014
to try to revoke a certificate
the require you to prove
ownership of every domain name

00:12:28.014-->00:12:31.451
in the certificate in order to
actually make the revocation
happen. So we reached out to

00:12:31.451-->00:12:34.787
their CPS contact and asked them
about this and they recognized
that this - or said - specified

00:12:34.787-->00:12:39.225
that this is their current
policy that they require you to
proof ownership of all domains

00:12:39.225-->00:12:42.795
and certificates to revoke. Um,
they did recognize that it is a
slight conflict with the CA -

00:12:42.795-->00:12:47.333
the CA browser form and they are
currently considering a change
of policy to - to prevent the -

00:12:47.333-->00:12:53.206
there might exist a case where
someone has a certificate for a
domain name, um, that you might

00:12:53.206-->00:12:58.111
have that domain name for - or
you lost the domain or acquired
it from the - um - um, so

00:12:58.111-->00:13:01.914
currently with Let’s Encrypt we
were not able to revoke this
certificate but it could be

00:13:01.914-->00:13:06.619
possible in the future. >> And
if Let’s Encrypt implements that
it’s also worth pointing out

00:13:06.619-->00:13:11.891
that’ll be real-time revocation.
It won’t be like 24 hours while
the CA reaches out kind of thing

00:13:11.891-->00:13:14.861
because their whole system is
real-time automated. If you use
Let’s Encrypt and one of your

00:13:14.861-->00:13:19.098
domains on your cert becomes
Bygone instantly somebody on the
internet will be able to revoke

00:13:19.098-->00:13:25.705
your certificate. >> Very true.
So now let’s talk about little
bit about cert graph. This is a

00:13:25.705-->00:13:32.145
tool I made a while ago on - I
called it - it’s an open source
intelligence gathering cool -

00:13:32.145-->00:13:35.048
tool that calls the graph of the
certificate alt-names. Um, it
works by you give it a domain

00:13:35.048-->00:13:37.116
name, um, it finds all the SSL
certificates for that domain
name, goes through gets all the

00:13:37.116-->00:13:39.585
alt-names of all the certs. Um,
gets all the cert -
certifications for those

00:13:39.585-->00:13:43.456
alt-names and can use to grow
and grow until you get complete
graph of the domain names and

00:13:43.456-->00:13:46.859
certificates for a given domain
name or property. It’s - It was
built with the idea that, um,

00:13:46.859-->00:13:50.563
the domain enumeration for red
team targets but it’s very
useful trying to find, um,

00:13:50.563-->00:13:55.134
vulnerable domain name for like,
on a sell denial of service as
well. This is an example on the,

00:13:55.134-->00:14:00.239
uh, graph generator with this
tool, um, on the FX website. So,
uh, one particular example were

00:14:00.239-->00:14:04.644
we found this was at Salesforce.
So, we ran this in Salesforce
dot com and created this nice

00:14:04.644-->00:14:07.747
graph and we ended up at
Squarespace dot com which has
nothing to do with Salesforce.

00:14:07.747-->00:14:10.917
Um, and this is because
Salesforce dot com used to own
Do dot com, uh, lost that domain

00:14:10.917-->00:14:17.256
name somehow Squarespace got it
after it expired the transfer
but they kept the Salesforce dot

00:14:17.256-->00:14:22.462
com SSL certificate, the one in
the red in the, the center of
the circle with green on the

00:14:22.462-->00:14:27.867
left. That SSL certificate was
good for Do dot com and it was
good for Do dot com far after

00:14:27.867-->00:14:31.003
they owned it and after
Squarespace had it. So
Salesforce had a valid SSL

00:14:31.003-->00:14:34.741
certificate for another company
at this time. This gives 1,
Salesforce the ability to

00:14:34.741-->00:14:38.111
potentially own the mill
squarespace and also
[indiscernible] could have

00:14:38.111-->00:14:41.481
revoked Salesforce SSL
certificate, taking down their
site. >> And if you look on the

00:14:41.481-->00:14:49.856
- the a, left side all those
green in circle domains around
that certificate those are all

00:14:49.856-->00:14:53.192
of the websites that would all
of the sudden break if
Squarespace decided to revoke

00:14:53.192-->00:14:58.998
this thing within 24 hours. >>
Yeah. So this is digging a
little deeper into the do dot

00:14:58.998-->00:15:02.502
com example. We can see on the
right that the certificate in
question, um, the top part we

00:15:02.502-->00:15:06.873
have in red the dates that it
was valid before and after. You
can see um, those between the 2

00:15:06.873-->00:15:11.844
different owners and all the
domain names of those valid for
Salesforce and do dot com. And

00:15:11.844-->00:15:16.816
on the left we have historical
NS look ups for this. Um, this
screen shot was taken after the

00:15:16.816-->00:15:19.752
domain name had been transferred
to where it currently is right
now I believe it’s a for sale

00:15:19.752-->00:15:22.955
auction site so someone can go
buy that domain name if they
want. But on the circled red

00:15:22.955-->00:15:26.893
part, um is when Salesforce had
the domain name in the past it
was the historical name services

00:15:26.893-->00:15:34.000
being hosted at Microsoft, AWS,
and a few other places as well.
>> So, we wanted to also

00:15:34.000-->00:15:38.504
introduce a tool specifically
crafted for finding this so cert
graph is a nice visualization

00:15:38.504-->00:15:45.411
tool, um, uh, we - we created a
- a new tool that uses the, uh,
Facebook certificate

00:15:45.411-->00:15:52.118
transparency API um, to both
detect Bygone SSL denial of
service and Bygone SSL man in

00:15:52.118-->00:15:58.057
the middle. Now it’s caveated
with the fact that you have to
give it accurate information so

00:15:58.057-->00:16:02.662
to detect Bygone SSL man in the
middle you need to give it a
complete list of all the - you

00:16:02.662-->00:16:08.801
need to give it the list of all
the domains you own with an
accurate, um, date on when you

00:16:08.801-->00:16:13.239
first registered it. So, maybe
you renewed it a couple times
and the created date on the

00:16:13.239-->00:16:16.742
WHOIS record doesn’t actually
reflect the first time you
created it. You need to make

00:16:16.742-->00:16:20.680
sure it actually reflects the
first time you, uh, bought the
domain. And then to detect

00:16:20.680-->00:16:25.518
Bygone SSL man in the middle you
give it a list of all the domain
names that you own and it will

00:16:25.518-->00:16:30.189
go through and see if any of
those domains share certificates
with domains that you don’t own.

00:16:30.189-->00:16:36.429
Um, so for this to be accurate
you need to give it a complete
list of all the domains you own.

00:16:36.429-->00:16:39.599
As long as you do those 2
things, have an accurate
registration date and a complete

00:16:39.599-->00:16:43.035
list of all the domains you own
you won’t get any false
positives and it can very

00:16:43.035-->00:16:46.272
accurately detect, uh, both
flavors of the problem. Uh, the
2 downsides to using this tool,

00:16:46.272-->00:16:52.278
uh, first you have to create a
Facebook developer account and
give them the token. Um, and

00:16:52.278-->00:17:00.920
this second downside Facebook
actually will rate limit you if
you hit too aggressively. >> And

00:17:00.920-->00:17:05.358
lastly we created another tool
the Bygone SSL certificate
transparency log monitor and

00:17:05.358-->00:17:11.631
this acts as a certificate
transparency actual log. Um, we
use cert - SSLMate’s CertSpotter

00:17:11.631-->00:17:15.334
tool and added in Bygone SSL
detection to that so you create
a config file for domain names -

00:17:15.334-->00:17:18.838
for the certificates that you
want to be alerted for, specify
a valid add date which is the

00:17:18.838-->00:17:22.241
date that you acquired the
domain name. And then whenever
it finds the matching cert it

00:17:22.241-->00:17:25.945
will print out or notify you
that the full interface like in
the screen shot right here. And

00:17:25.945-->00:17:29.782
if it happens to notice that the
certificate is valid for both
before and after the date that

00:17:29.782-->00:17:33.786
you acquired it, which is a
little Bygone SSL shoe flag. And
those changes have been accepted

00:17:33.786-->00:17:37.323
upstream into SSLMate’s Cert
Spotter so you can grab that
from them if you want to run

00:17:37.323-->00:17:41.694
your own certificate
transparency log monitor. Um,
although note that will look

00:17:41.694-->00:17:44.664
through half a billion
certificates in CT and it will
take some time but if you wanted

00:17:44.664-->00:17:50.803
completely self-hosted solution
this will work great. So, if you
want to try to protect yourself

00:17:50.803-->00:17:53.706
from being vulnerable from
Bygone SSL or anyone else having
a SSL certificate for your

00:17:53.706-->00:17:59.578
domain name or potentially
revoking one that you’re using
the best you can do right now is

00:17:59.578-->00:18:04.083
uh - have - use the Expect-CT
header with the enforce flag on
your http server. Um, this will

00:18:04.083-->00:18:10.856
protect you from someone else
having a cert - a SSL
certificate for your domain name

00:18:10.856-->00:18:15.928
that’s not in CT and using it on
you. Um, however this will not
protect you in the case were the

00:18:15.928-->00:18:19.498
certificate has already been
logged in the CT. Um, there is
no current protection against

00:18:19.498-->00:18:22.969
that. The best you can do is
monitor CT logs using our tools
or others for all domain - all

00:18:22.969-->00:18:25.538
SSL certificates for you own
domain names and if you see a
certificate for your domain

00:18:25.538-->00:18:29.742
name, either issued before you
got it or after, reach out to
the CA and ask them to revoke

00:18:29.742-->00:18:35.581
it. Um, and we should also point
out, that um, not all
certificates will be in CT logs.

00:18:35.581-->00:18:40.152
CT was only required for
browsers like Chrome as of April
this year for not EV

00:18:40.152-->00:18:44.390
certificates. Certificates
issued before that - a lot of
them are in there. I’ve seen

00:18:44.390-->00:18:47.893
certificates as old as 2009 and
before in certificate
transparency logs but it’s not a

00:18:47.893-->00:18:54.200
requirement to be trusted by
browsers. >> So now we’ve got
some requests for the general

00:18:54.200-->00:18:57.670
internet as well. You realize,
like this issue isn’t going away
- this issue isn’t going away.

00:18:57.670-->00:19:06.412
We have some basically bandaid
asks for example registrars
could notify, um, new, uh when

00:19:06.412-->00:19:12.718
people first register a domain
name the registrar gives you a
heads up and say, hey we checked

00:19:12.718-->00:19:17.323
CT and the previous owner still
has a valid certificate. Um,
they might even also consider

00:19:17.323-->00:19:24.096
auto revocation in certain
cases. Um, another ask is if
these certificates are much

00:19:24.096-->00:19:28.667
shorter lived. Like the Let’s
Encrypt 90 day policy. The issue
is still there but it’s there

00:19:28.667-->00:19:32.304
for a shorter period of time. We
don’t have to deal with the 5
year issue that we talked about

00:19:32.304-->00:19:38.911
before. Um, when you do you
revocation it’s kind of
courteous to give a heads up to

00:19:38.911-->00:19:44.450
the other people using
certificates with subject
alt-names so you don’t

00:19:44.450-->00:19:49.422
accidently break production
websites. Um, but, uh, you know,
as I mentioned before there is

00:19:49.422-->00:19:56.929
no mechanism stopping you from
breaking a production website.
Um, and, uh CA’s could also not

00:19:56.929-->00:20:04.804
issue certificates that uh, go
on beyond the expiration date of
the domain. So if you do WHOIS

00:20:04.804-->00:20:07.706
on the domain, you see the
expiration date, um, there’s no
reason why this certificate, uh,

00:20:07.706-->00:20:11.644
should ever outlive that. The
CA’s could just not issue certs
that - that outlive that - the

00:20:11.644-->00:20:18.050
lifetime of that domain. Um, and
then the last bullet point here,
um, is-is really targeted at

00:20:18.050-->00:20:24.123
CDNs, specifically, um but also,
just generally companies. Um,
you’ve got to really, uh,

00:20:24.123-->00:20:30.329
careful with the way you subject
alt-names. If you shove a whole
bunch of domains on the same

00:20:30.329-->00:20:35.234
certificate, um, it - it - it
kind of the worst case there,
700, um, one of them one become

00:20:35.234-->00:20:39.438
expired and that’s going to open
yourself up to a stranger
revoking your certificate. Um,

00:20:39.438-->00:20:45.177
so, you know, a recommendation
there is kind of - you could do
what GitHub is doing with GitHub

00:20:45.177-->00:20:49.248
pages. They have every single
customer on their own Let’s
Encrypts cert keys custom

00:20:49.248-->00:20:55.287
domain. Um, but if you - if you
share customers on the same cert
you’re opening yourself up. >>

00:20:55.287-->00:21:02.128
Alright, that concludes our
talk. Here are the links to the
tools we talked about and our

00:21:02.128-->00:21:05.798
insecure design website where we
have more information on this
topic. Thank you all very much.

00:21:05.798-->00:00:00.000
Oh, and we’ll take questions
outside. [applause]

