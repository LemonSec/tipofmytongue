00:00:00.00-->000:00:11.311
>>Good afternoon, everybody.
Welcome to, uh, the last day of
DefCon 26. Yeah. And, uh, I’m

00:00:11.311,00:00:17.484
assuming most of you are still
waking up, uh, but this will be
a really good presentation. Uh,

00:00:17.484,00:00:25.425
Yu Wang is going to be, or Yu
Wong, is going to be talking
about attacking the macOS Kernel

00:00:25.425,00:00:36.103
Graphics Driver, so please give
him a hand and, uh, welcome him
here. [Applause] Hello everyone.

00:00:36.103,00:00:42.342
Uh, welcome to my presentation.
Uh, Especially during lunch
time. My name is Wang Yu, uh,

00:00:42.342,00:00:47.748
from DD Research America. Uh,
What I, I like to share with you
today is related to macOS

00:00:47.748,00:00:59.493
Graphics Driver vulnerability
and uh, macOS Kernel Security.
Um, I started to pay attention

00:00:59.493,00:01:05.098
to macOS Kernel Security last
year, including our Kernel
Driver Development, bug hunting

00:01:05.098,00:01:13.440
and, uh, vulnerability
exploitation. Before that, I
preferred to study the Windows

00:01:13.44-->000:01:21.448
Kernel Security and the Android
Linux Kernel Root. Um, yeah,
after entering the macOS Kernel

00:01:21.448,00:01:27.754
world last year, I learned a lot
of well-known kernel
vulnerabilities and I picked up

00:01:27.754,00:01:39.199
four of them as background for
today. The first case is from
NVD, from Google Project Zero

00:01:39.199,00:01:47.741
and the CV number is CVE 2015
3712. It’s a Nvidia GeForce
Driver Arbitrary Kernel Memory

00:01:47.741,00:01:55.082
Write Vulnerability. This
vulnerability can eventually
lead to uh, code execution due

00:01:55.082,00:02:06.259
to lack of input parameter
validation and uh, at here, uh,
you can find a POC, uh. The

00:02:06.259,00:02:21.775
second vulnerability comes from
Cisco TALOS research team, uh,
which is a Null Pointer

00:02:21.775,00:02:27.781
Dereference Bug. Uh, it seems
that the null point dereference
type of vulnerability can be

00:02:27.781,00:02:31.852
exploited two years ago, which
also means, uh, which also means
that I’m late. Um, you can see

00:02:31.852,00:02:38.425
that uh, there is a four exploit
code on the exploit database,
which is a good starting point

00:02:38.425,00:02:52.139
for exploitation research. And
the next case is from my friend,
Ken Leung. The attack surface he

00:02:52.139,00:02:59.680
choose is uh, usermode graphics
demon. And he won the Pwn-to-Own
game, PwnOwn game uh with this

00:02:59.68-->000:03:07.854
vulnerability two years ago. The
usermode demon associated with
the graphics library has certain

00:03:07.854,00:03:14.394
permissions and they are usually
successful in the sandbox
process and the logic of those

00:03:14.394,00:03:21.902
demons is usually very
complicated as this condition
determines that the demon are

00:03:21.902,00:03:28.241
nature attack surface and you
can get more detailed
information from the white

00:03:28.241,00:03:42.989
house. The last is also from Ken
Lab. The CV number is 2016, uh,
15, 1815. It’s an

00:03:42.989,00:03:50.897
IOAcceleratorFamily
Out-of-Bounds Kernel Memory
Write Vulnerability. The

00:03:50.897,00:03:58.672
graphics rendering engine is one
of the hardest hit areas on any
operating systems platform. From

00:03:58.672,00:04:10.083
the Windows 2K driver on Windows
to the IOAcceleratorFamily
Kernel extension on macOS. Um,

00:04:10.083,00:04:17.357
those type of, uh, the type of
those four vulnerabilities I
choose range from null point

00:04:17.357,00:04:24.231
dereference, double fray and
user fray to arbitrary kernel
memory write vulnerability. And

00:04:24.231,00:04:32.706
also range uh, from usermode to
kernel mode. Uh, this case has
repeatedly reminded us that the

00:04:32.706,00:04:40.280
graphics security cannot be
ignored. So therefore, I decide
to start my kernel macOS kernel

00:04:40.28-->000:04:55.428
research from here. Part 2. Part
2 is the From N-day POC to
Zero-days. When I decide to

00:04:55.428,00:05:00.834
investigate Apple graphic driver
vulnerability last year, I
started my research from the POC

00:05:00.834,00:05:12.245
samples from NVD, such as the
uh, 2017 2443 and the uh, 2017
2489. The reason for choosing

00:05:12.245,00:05:21.688
this example is that they are
very easy to learn. Um, the
logic of the POC code is clear

00:05:21.688,00:05:29.963
and the amount of the code is
less than 100. Uh, we can take
uh, to the first one, the 2443

00:05:29.963,00:05:38.872
as an example. 2443 is a kernel
arbitrary code execution
vulnerability. As you can see,

00:05:38.872,00:05:50.684
uh, the target of the POC is the
IntelFBClientControl. Uh, it is
number 1 in green color. And

00:05:50.684,00:06:00.694
they put a letter here, uh, it
is number 3 in blue color. And
they put his letter is 291, and

00:06:00.694,00:06:09.302
he hacks from that, and then the
only thing we need to do is fill
the input buffer with random

00:06:09.302,00:06:16.676
garbage data, this is number 3
in red color. So just this. So I
think for the security research

00:06:16.676,00:06:22.849
community, uh, each of us we
must think about how to start a
new round of kernel code

00:06:22.849,00:06:32.726
auditing from here. Um, After I
had this idea, one of my friends
told me that starting from here

00:06:32.726,00:06:38.932
might be a waste of time because
the binary has already carefully
examined the [indiscernible]

00:06:38.932,00:06:47.140
error. This reminds me of my
Windows Kernel [indiscernible]
Engine Vulnerability

00:06:47.14-->000:06:54.915
presentation at Blackhat USA
four years ago. At that time,
Chura from Google Project Zero

00:06:54.915,00:07:03.056
found a large number of kernel
fronts skater vulnerabilities.
But I can still find a new

00:07:03.056,00:07:12.198
kernel, find new kernel data
facts zero days in the code that
has been audited such as CVE

00:07:12.198,00:07:28.548
2015 19-1819. So, this time I
still want to give it a try.
But, but then I started to feel

00:07:28.548,00:07:38.525
that my friend was probably
right. My, my fuzzing tool
didn’t have any valid output on

00:07:38.525,00:07:45.265
the first day, and even the
break points I set on the macOS
kernel didn’t trigger. Um,

00:07:45.265,00:07:52.672
fortunately for me, I didn’t
give up at that time. Otherwise
I don’t think we would meet

00:07:52.672,00:08:02.816
today. Um, when I analyzed the
root cause, I found at least
three problems hidden in the

00:08:02.816,00:08:12.759
work of my filing system.
Results first serving these
problems, the host system had

00:08:12.759,00:08:20.967
become very efficient,
inefficient. Um. There are three
obstacles. The first one is uh,

00:08:20.967,00:08:27.006
target selection, and second one
is uh, the filter driver
protection and the third one is

00:08:27.006,00:08:38.251
uh, unremarkable selectors. Let
me discuss it in detail. Um,
first one – target selection.

00:08:38.251,00:08:46.092
Uh, there are, there are many
different targets on the macOS
system from kernel extension to

00:08:46.092,00:08:53.433
internal classes. And, uh, uh,
we mentioned before inter FB
client control is just one of

00:08:53.433,00:09:01.274
the very small branch of the
graphics kernel. I list some of
the target drivers here. There

00:09:01.274,00:09:15.789
are a lot, from AMD to NVDA to
Intel and also uh, IO family
driver. It’s a AMD Intel is like

00:09:15.789,00:09:25.732
a mini pod driver and the family
driver is a more general driver,
kernel driver. And I think as a

00:09:25.732,00:09:35.708
professional security
researcher, we should not miss
any possibility. And the next

00:09:35.708,00:09:43.116
one is most, more important. The
second obstacle is the filter
driver. Before targeting a

00:09:43.116,00:09:47.954
target graphics driver, there
are usually a filter driver that
protects them, which can cause

00:09:47.954,00:09:56.796
our fuzzing tool to fall into an
ineffective loop. Uh, in this
figure, we can see that before

00:09:56.796,00:10:06.339
targeting the graphics driver,
AppleIntelFramebufferAzul filter
driver

00:10:06.339,00:10:11.277
AppleGraphicsDeviceControl is
defining against the malicious
code for the graphics driver.

00:10:11.277,00:10:27.293
Here is the filter driver in red
line and the green line is the
graphics driver itself. More

00:10:27.293,00:10:38.671
specifically, in this example,
selector 707 represents
FBSetEDID and correspondingly in

00:10:38.671,00:10:49.949
the filter driver here and here.
If the input buffer lens is not
equal to uh, 408 bytes, all

00:10:49.949,00:10:57.090
fuzzing attempts to interface
are meaningless. This means that
if we only rely on the static

00:10:57.09-->000:11:03.563
analysis of the target driver
and then build a fuzzing
process, it is obviously not

00:11:03.563,00:11:08.902
enough. We need to consider the
entire architecture of the
graphics driver set, otherwise

00:11:08.902,00:11:20.914
we are uh, just wasting our
time. The third obstacle is
unremarkable selectors. After

00:11:20.914,00:11:29.088
actually getting to the target
driver, I found that there are
still some hidden control codes

00:11:29.088,00:11:38.197
or selectors and I, uh, found,
uh, there are also control
codes, um, control code factors,

00:11:38.197,00:11:50.643
infections of the fuzzing system
indeed. This control code are
important because they are the

00:11:50.643,00:11:55.648
key to open the door to another
world. Meaning that there are a
lot of ongoing code behind the

00:11:55.648,00:12:04.257
doors, this door. After
extracting all the validated
control code with IDE script

00:12:04.257,00:12:18.071
last year, I found at least one
such key 80000 and some random
data. As you can see, after

00:12:18.071,00:12:25.111
entering the corresponding
handler, there is another word
hidden there. And after taking,

00:12:25.111,00:12:33.786
after taking, sorry after taking
three small steps, things
quickly become clear. And I

00:12:33.786,00:12:44.330
found a lot of problems in just
one day. Let me show, uh, share
some examples with you. The

00:12:44.33-->000:12:52.739
first one is unpatched local
panic caused by a division by
zero error. But be aware that

00:12:52.739,00:13:02.849
the root cause behind this error
is an out of bounds read access
to the input buffer. It is a

00:13:02.849,00:13:19.465
division by zero register auto
is zero. And in Case 2. Case 2
is an unpatched local panic

00:13:19.465,00:13:24.203
caused by a null pointer
dereference. And the root cause
of the problem is that the

00:13:24.203,00:13:33.446
driver incorrectly deneutralized
and dereferenced the variable.
Um, at here, rsi register is 0

00:13:33.446,00:13:45.858
and offset is uh, 3f70. The next
case is a kernel stack,
stack-based buffer overflow

00:13:45.858,00:13:54.567
vulnerability. As you can see
here, um, this stack overflow
vulnerability is mitigated by

00:13:54.567,00:14:01.407
stack cookie, so in order to
explore this case, we need to
have a, we need to have the

00:14:01.407,00:14:12.118
kernel arbitrary memory reading
capability. Fortunately, I
quickly found one. CVE 2017

00:14:12.118,00:14:19.225
13383 – it combined with two
vulnerabilities to become
bipartisan stack cookie

00:14:19.225,00:14:24.897
protection and again kernel
arbitrary code execution
capability. But compared to

00:14:24.897,00:14:31.971
kernel, arbitrary kernel memory
reading, I think uh, kernel
arbitrary memory writing

00:14:31.971,00:14:41.981
capability is often what we
really want, and here is an
example. CVE ID 7155 and through

00:14:41.981,00:14:57.997
it, I, I find more cases, such
as uh, CVE-2017-7163. And let’s
take the, let’s take this one as

00:14:57.997,00:15:03.169
an example to discuss the kernel
arbitrary memory write
vulnerability. The root cause of

00:15:03.169,00:15:09.642
this vulnerability is that free
buffer driver lacks input
validation and initialization.

00:15:09.642,00:15:29.362
And as you can see here, this
instruction, um this
instruction, edx to rax plus

00:15:29.362,00:15:41.541
rsi. Um, this instruction is
going to write value in edx to
offset of, to the offset of rax

00:15:41.541,00:15:54.120
plus rsi and rax at here is a
bit address of kernel logic and
we can look at it through the

00:15:54.12-->000:16:05.565
arbitrary kernel memory read
vulnerability and we can control
the esi register. It’s right

00:16:05.565,00:16:10.236
here – raaa. We can control this
register. This means that we can
control the target memory

00:16:10.236,00:16:18.845
address of arbitrary write
primitive and then we can fully
control the rd-edx register.

00:16:18.845,00:16:30.857
Right here, edx are controlled
by attacker. Um, this means that
we can control the value to be

00:16:30.857,00:16:37.129
written. The available
conditions are perfect to
achieve arbitrary memory, uh,

00:16:37.129,00:16:45.238
arbitrary memory write values.
So, in my opinion, the quality
of this vulnerability is pretty

00:16:45.238,00:16:58.017
good, but I still choose to
report it to Apple last year.
Um, yeah, because I am not using

00:16:58.017,00:17:06.025
my laptop, I am unable to,
unable to make demonstration. I
didn’t take the video for it,

00:17:06.025,00:17:15.768
but trust me, this type of demo
is boring. Just random exploits
and pop up root shell and the

00:17:15.768,00:17:24.010
quality of this, because the
quality of this vulnerability is
pretty good, so it is very easy

00:17:24.01-->000:17:34.186
to write exploit, exploit code
for this, uh, I think you can
give it a try. The first part is

00:17:34.186,00:17:43.296
um, yeah, is from the end days
POC to zero days. The next part
is, I think, more interesting.

00:17:43.296,00:17:53.572
The Kemon Framework and other
projects I, I did last year.
Last year, one of my tasks was

00:17:53.572,00:18:02.281
to build a kernel monitoring
system for our DLP project, Data
Leakage Prevention project and

00:18:02.281,00:18:10.790
when I went to study the
existing kernel monitoring for
this, I found that the building

00:18:10.79-->000:18:17.129
monitoring mechanisms were not
very friendly for third party
development. Specifically, there

00:18:17.129,00:18:22.068
are two building monitoring
mechanisms available – uh,
kernel authorization subsystem

00:18:22.068,00:18:29.275
and mandatory access control
policy subsystem. But the bad
news is, is that they are not

00:18:29.275,00:18:34.814
suitable for the current
security-related kernel
development tasks. As the kernel

00:18:34.814,00:18:44.256
authorization subsystem was
introduced in the macOS 10.4
tagger kernel in 2005, the

00:18:44.256,00:18:53.833
problem now is that this
callback interfaces lack the
necessary maintenance and have

00:18:53.833,00:19:04.377
not been upgraded for about 13
years. Um, yeah, for, for the
Scope File Operation, number 2,

00:19:04.377,00:19:09.715
for the file operation listener,
there are only seven file
operation related callbacks

00:19:09.715,00:19:16.322
available. I think, which is
not, which is obviously not
enough. They are only file open,

00:19:16.322,00:19:23.696
close, delayed, read write,
rename, exchange and quick
process, that is obviously not

00:19:23.696,00:19:32.004
enough. And for the operation,
file operation listeners, they
are unable to block any file

00:19:32.004,00:19:39.712
operations. They are just
notification. Just notification
is unacceptable. Uh, say I

00:19:39.712,00:19:47.620
randomly detect a ransomware and
we can only watch it, we cannot
block it. So, if my end point

00:19:47.62-->000:20:00.800
security solution is this, I
think my boss might fire me. Um,
and for some specific callbacks,

00:20:00.80-->000:20:08.841
the input parameters often lack
critical context information.
For example, for quick process

00:20:08.841,00:20:12.645
callback handler, the input
parameter is missing command
line information. This is very

00:20:12.645,00:20:19.685
important to us and uh, in the
file operation callback handler,
we cannot distinguish between

00:20:19.685,00:20:27.193
new file creation and open
existing. It is also important
to us. And for, we know the

00:20:27.193,00:20:34.033
listeners, um, not every file
system operation triggers an
authorization request. This

00:20:34.033,00:20:47.546
means that our monitor can be
bypassed. This is also not
acceptable. Um, yeah. Compared

00:20:47.546,00:20:52.017
with kernel authorization
subsystem, mandatory access
control framework has a series

00:20:52.017,00:21:00.126
of more gradual callback
interface which are introduced
in, into kernel from macOS 10.5,

00:21:00.126,00:21:07.800
yeah 10.5. However, Apple
quickly banned third parties
from using this interface and

00:21:07.80-->000:21:15.541
declared that this interface
were not part of the KPI. KPI is
short for Kernel Program

00:21:15.541,00:21:20.546
Interface. This means that
mandatory access control
framework is totally private. We

00:21:20.546,00:21:31.557
cannot use that interface. But
if you really want to use that
interfacing kernel, since we are

00:21:31.557,00:21:40.232
all current institution, we have
permission to locate that target
functioning kernel and then

00:21:40.232,00:21:45.171
invoke it. Yeah, if you really
want to use the interfacing
kernel, I think you need the

00:21:45.171,00:21:56.715
following capability,
compatibility issues. I reviewed
almost all the kernel open

00:21:56.715,00:22:06.158
source code about the MAC policy
and I found this one, uh, the
following cases. Case 1 – Case 1

00:22:06.158,00:22:14.433
shows that the interfaces were
deleted or replaced directly by
kernel. This is unacceptable

00:22:14.433,00:22:29.582
because the feature disappeared
directly. I cannot accept this.
Case 2 – Case 2 shows that the

00:22:29.582,00:22:36.455
prototypes and input parameters
were changed directly. It is
also unacceptable because my

00:22:36.455,00:22:50.970
driver will panic. You cannot
add a parameter directly into
the prototype. And Case 3 shows

00:22:50.97-->000:22:57.009
that interfaces were inserted
into the middle of the dispatch
table. Yeah, my driver will

00:22:57.009,00:23:07.386
panic too. And here is the Case
4 – The interfaces have been
rewritten but forgot to upgrade

00:23:07.386,00:23:15.294
the policy version number. So,
my point is that as a third
party developer, we have to use

00:23:15.294,00:23:23.969
this mechanism very, very
carefully. And in order to bring
up some change, I’d like to

00:23:23.969,00:23:32.044
introduce you to Kemon. An open
source and open source pre and
post callback-based framework

00:23:32.044,00:23:39.518
for macOS kernel monitoring. Um,
since there is no patch guard or
similar kernel subsystem, I

00:23:39.518,00:23:47.926
built the pre and post operation
callback interface based on my
kernel and hook engine. By using

00:23:47.926,00:23:56.302
this framework, I can add new
features to any function I care
about. The idea about the pre

00:23:56.302,00:24:01.974
and post operation callback
architecture is uh, actually
borrowed from Windows kernel.

00:24:01.974,00:24:10.916
Generally speaking, uh, in the
pre callback handler, I can
field the input parameters and

00:24:10.916,00:24:17.790
in the post callback handler, I
can reset the functions written
value, if needed. I have two

00:24:17.79-->000:24:25.064
examples here. Um, the first one
is a, is a kernel extension
monitor or kernel extension

00:24:25.064,00:24:31.770
firewall. You know, I know there
is a, there are similar
functions in mandatory access

00:24:31.77-->000:24:40.379
control policy in macOS, but I
still want to method to achieve
it again. As can be seen here,

00:24:40.379,00:24:50.556
the first line is a pre callback
handler and in the pre callback
handler, I can field the input

00:24:50.556,00:25:02.634
parameters. Let me see some
more. Such as I can get the vid
id, I can get p id, parent id,

00:25:02.634,00:25:12.244
and uh, the kernel extension
name is com.manidiant.monitor
and the path, and also version

00:25:12.244,00:25:21.587
number, module base and module,
module size. Yeah, in this case,
I used a file management tool

00:25:21.587,00:25:31.930
named monitor.app as an example.
The reason is just because it
contains the driver and we load

00:25:31.93-->000:25:40.773
the driver into kernel. This is
true. Yeah, And in the post
callback handler – in the pre

00:25:40.773,00:25:48.647
callback handler here I using a
disassemble to search the end
point of the target driver and I

00:25:48.647,00:25:57.356
can patch the target driver end
point so as can been seen here –
the driver failed to load. And

00:25:57.356,00:26:09.201
in the post callback handler, I
can reset the function written
value if needed. Another more

00:26:09.201,00:26:14.640
interesting example in the
mandatory access control policy
is the mandatory access control

00:26:14.64-->000:26:25.317
policy monitor. Um, so I
wondered about which module in
the system used the mandatory

00:26:25.317,00:26:33.592
access control policy and which
policy set do they use. I think
here is your answer. As can been

00:26:33.592,00:26:40.532
seen, the first one I dumped
from kernel is AMFI. AMFI is
short for Apple Mobile File

00:26:40.532,00:26:50.609
Integrity. And it’s all handlers
of this module, including base
address, module offset and

00:26:50.609,00:27:02.588
policy name. Um, yeah. As you
can see, AMFI, this one is
Sendbox. MAC Sendbox registered

00:27:02.588,00:27:12.231
a large number of mac policies.
Um, yeah. The tricky part of
this feature is how to get the

00:27:12.231,00:27:18.270
new text lock. I mean, we need
to hold the lock before
accessing kernel

00:27:18.27-->000:27:26.512
deconstructures, um, but the
policy lock, the policy new text
lock is not exploited.

00:27:26.512,00:27:34.786
Fortunately, I found, uh I
finally found a way to, to lock
that, uh that new text lock and

00:27:34.786,00:27:47.900
you will, you can ah, review my
code for more information. In
addition to uh, enumerating and

00:27:47.90-->000:27:54.473
monitoring the mandatory access
control policy, Kemon can also
um, block or handle arbitrary

00:27:54.473,00:28:00.646
handlers if needed. In this
case, I still use the file
management tool, monitor.app as

00:28:00.646,00:28:09.221
an example. The reason is this
tool will try to register 5 uh,
MAC callbacks. The first one is

00:28:09.221,00:28:16.628
for process monitoring, the
second one is for technical
library monitoring, the third

00:28:16.628,00:28:23.802
one is for keyboard monitoring,
and then it’s the file operation
and the last one is kernel

00:28:23.802,00:28:35.080
extension. Um, and the Kemon can
block those requests. Here is an
example. Um, yeah, demo. I

00:28:35.08-->000:28:50.195
demonstrated this, demonstrated
this at Blackhat arsenal 3 days
ago and I didn’t make the video

00:28:50.195,00:28:54.633
for it, yeah but don’t worry,
talk is cheap, show me the code.
Right. Definitely. I release all

00:28:54.633,00:29:05.544
my source code. Yeah, please
check out my source code for
more detailed information. In

00:29:05.544,00:29:15.153
addition to the two applications
above, I also implemented a
kernel fuzzing hacker by using

00:29:15.153,00:29:23.095
Kemon framework. I call it
Keper. Keper can randomly inject
errors assisted in recording the

00:29:23.095,00:29:29.635
input parameters and call stacks
of the graphics driver. For me,
uh, this feature is very

00:29:29.635,00:29:40.312
helpful. As can be seen here,
uh, I input IntelFBCLientControl
doAttributes and this is my

00:29:40.312,00:29:56.461
fuzzing tool selector is random
and input data is also random.
And this figure shows that the

00:29:56.461,00:30:07.139
input data is random data and I
can do bit fleeting here.
Actually, I also implemented

00:30:07.139,00:30:18.650
another tool, another project,
for monitoring IPC, IPC
communication. Okay, okay, yeah,

00:30:18.65-->000:30:26.058
last part. The last part is uh,
discussion of zero days and
macOS kernel protection. Um,

00:30:26.058,00:30:41.106
yeah, first, let me show you a
graphics driver related to zero
driver. I have simple demo. This

00:30:41.106,00:31:10.035
system has all the system patch
installed and uh, after running
my poc my system crashed.

00:31:10.035,00:31:28.587
[Applause] It is reboot. And
here is the core stack
information. Um, it is a heap

00:31:28.587,00:31:35.727
over-write vulnerability and the
panic core stack shows that it
is a victim threat, this

00:31:35.727,00:31:45.837
victim’s threat is accessing the
corrupted heap and uh, ah, and
this is another crash threat,

00:31:45.837,00:31:51.042
um, crash threat. In fact, they
are all victims of the
vulnerability because the threat

00:31:51.042,00:32:02.254
it corrupts heap are not theirs.
And the root cause of this
vulnerability is the following

00:32:02.254,00:32:09.528
piece of code. Uh, let me give
you some background on this
code. The input, in the yellow

00:32:09.528,00:32:20.138
color, the input is a lens of my
input 10 data and lens of the
input data should be a multiple

00:32:20.138,00:32:27.913
of 10. All numbers are in hex
format. It should be in a
multiple of 10. And the general

00:32:27.913,00:32:37.589
logic of this code is that it
processed one round every 10
bytes. If the final round is

00:32:37.589,00:32:46.798
less than 10 bytes, less than
1-->0 the code breaks the loop. So
can you find the bug in this

00:32:46.798,00:33:06.484
code? I find the bug manually.
The problem comes from this
subsection operation. If the

00:33:06.484,00:33:16.161
input buffer lens is greater
than 1-->0 this code is fine. But
if the buffer size is possibly

00:33:16.161,00:33:25.237
less than 1-->0 see here, less
than 1-->0 this subsection will
cause the answer to fail. And

00:33:25.237,00:33:32.878
then, the memory copy, here and
here, destroys the adjacent
heap. Um, and I sent this

00:33:32.878,00:33:41.219
vulnerability to Apple
securities this week and also
asked them this morning. I am

00:33:41.219,00:33:52.998
sure the vulnerability will be
fixed soon. [Applause] And to
protect against the threat from

00:33:52.998,00:34:03.642
the graphics drivers, I did some
extra work based on the Kemon
framework. And by using the

00:34:03.642,00:34:08.547
kernel hooked up engine, I
hooked up some key functions of
the graphics driver, such as the

00:34:08.547,00:34:19.558
doAttributes interface, as can
be seen in those handlers, I can
filter the opening and the

00:34:19.558,00:34:31.036
setting operations of untrusted
domains, the untrusted domains.
My graphics fuzzer process. So

00:34:31.036,00:34:38.743
which means that I can reject
some malicious requests. By the
way, I very much hope that Apple

00:34:38.743,00:34:44.282
can add the similar
functionality to kernels through
the mandatory access control

00:34:44.282,00:34:59.898
policy or detrace interface. Um,
yeah, yeah. It is almost my
presentation. We discussed bug

00:34:59.898,00:35:06.137
hunting, and zero days
vulnerabilities and Kemon open
source project. And I also

00:35:06.137,00:35:16.214
mentioned third party kernel
protection and mitigation. I
raised all the source code and

00:35:16.214,00:00:00.000
check it for more detailed
information. Yeah, that’s it.
Thank you guys.

