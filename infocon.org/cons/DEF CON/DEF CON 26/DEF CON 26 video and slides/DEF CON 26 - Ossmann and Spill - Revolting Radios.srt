00:00:00.000-->00:00:06.206
>>Um, I, I’m really big on
teaching software defined radio
to people in the hacker

00:00:06.206-->00:00:11.211
community and I think that today
having kind of an SDR first
approach makes a lot of sense.

00:00:13.614-->00:00:18.619
That you can get software
defined radio tools for very
little cost and get started

00:00:18.619-->00:00:23.090
playing around and exploring the
radio spectrum and learning
about radio technology from a

00:00:23.090-->00:00:29.763
software standpoint first and
then learn about hardware if
that interests you. Uh whereas

00:00:29.763-->00:00:34.768
back in 1983 ya know when I was
a kid I used to um, uh, I, I
would start to, to work on uh

00:00:38.171-->00:00:43.810
electronics and like the first
radio I ever built was a crystal
radio that was a little kit that

00:00:43.810-->00:00:50.050
was super simple really f- very
few components. Uh but very
unsophisticated and not really

00:00:50.050-->00:00:56.023
uh, able to interface with kind
of the m-modern radio systems
that uh that are more

00:00:56.023-->00:01:01.895
interesting maybe for kids to
play with today. And so uh I
wanted to think, uh I wanted

00:01:01.895-->00:01:06.900
t-to kind of figure out a way
to, for people today to kind of
Breadboard a uh, a very simple

00:01:09.469-->00:01:14.474
radio with few components and um
1 of the things that we thought
of is, is that there are these

00:01:16.643-->00:01:22.449
micro controllers in, uh like
high speed microcontrollers that
are re- readily available to

00:01:22.449-->00:01:28.055
people. And a lot of the have an
analog to digital converter
built in so putting this into

00:01:28.055-->00:01:34.895
the 1983 fictional perspective.
Uh what if we’re able to like
reprogram the microcontroller,

00:01:34.895-->00:01:39.599
r- repurpose the microcontroller
from some legitimate piece of
equipment. Something we’re

00:01:39.599-->00:01:43.937
allowed to have. Can we, can we
take a general purpose
microcontroller that has a

00:01:43.937-->00:01:48.208
little analog to digital
converter in it and build a
radio receiver out of it? You

00:01:48.208-->00:01:54.147
should be able to in theory take
anything with an ADC and build
some kind of uh software defined

00:01:54.147-->00:02:00.253
radio out of it that we can use
for general receiving purposed.
And so we came up with the

00:02:00.253-->00:02:05.125
Breadboard SDR idea. What’s the
smallest simplest thing that we
can make out of a micro

00:02:05.125-->00:02:11.999
controller with an ADC and as
few components as possible? And
we have this circuit that we’re

00:02:11.999-->00:02:17.004
about to demo that has actually
1 diode, uh and 1 resistor and
we have it plugged into grate

00:02:19.639-->00:02:25.078
fet which is a hardware platform
that we’ve been working on for
awhile as uh our kind of our

00:02:25.078-->00:02:30.083
preferred platform for doing
kind of general microcontroller
things. Um and we’re using it in

00:02:32.219-->00:02:37.791
a number of these projects. Um,
but really all that matters is
that it’s some microcontroller

00:02:37.791-->00:02:43.163
that has an ADC and in this case
it has an ADC and it also has a
USB port so we can stream

00:02:43.163-->00:02:49.403
samples from that analog to
digital con- c- uh converter
over to the computer that I’m

00:02:49.403-->00:02:55.409
demoing from. Really simple,
there’s an antenna which is just
a piece of wire plugged into a

00:02:55.409-->00:03:01.548
diode and there’s a clock
signal. Now this is the tricky
part is that we’re using this

00:03:01.548-->00:03:06.553
diode as a mixer. It’s a single
diode mixer uh and I wanted to
pick up a signal that’s at a

00:03:09.389-->00:03:15.062
very high frequency compared to
the things that w- were i- that
I was able to pick up when I was

00:03:15.062-->00:03:21.301
a kid. I want to be able to pick
up things like Dominic’s car
keys or this handheld radio,

00:03:21.301-->00:03:27.407
things that are transmitting at
100s of megahertz in some cases.
And, and we should be able to do

00:03:27.407-->00:03:32.412
that if we have a way to mix or
translate the frequency. Shift
the frequency that comes in on

00:03:34.715-->00:03:39.986
the antenna down to the freq- or
a low frequency that the analog
to digital converter can tune

00:03:39.986-->00:03:44.991
to, or can pick up. Uh and so we
are doing that by mixing uh, the
signal between h- a clock and

00:03:47.994-->00:03:51.965
the and this antenna which is
just a piece of wire and the
clock is actually being

00:03:51.965-->00:03:58.338
generated by a clock generator
on the micro controller itself.
>>And a- this is pretty common

00:03:58.338-->00:04:02.542
like, almost like every
microcontroller has some method
for generating an internal clock

00:04:02.542-->00:04:07.481
because it has the clocks CPU or
it’s peripherals. Most of them
will allow you to attach that to

00:04:07.481-->00:04:11.818
an output pin and, and bring
that out and we’ll show you a
bit more of that in a minute.

00:04:11.818-->00:04:15.755
But uh right now w- we’re kind
of bringing it out and feeding
it back in to the diode along

00:04:15.755-->00:04:21.628
with our signal and then tapping
it with an 86. >>Right uh and uh
Dominic is fun at pointing out

00:04:21.628-->00:04:27.367
the fact that like when I first
put this circuit together and I
was testing it I was like, well

00:04:27.367-->00:04:32.873
ya know it transmits as much as
it receives but it does receive.
Uh so its, it’s messy, it’s,

00:04:32.873-->00:04:37.878
it’s uh not uh, not a really
clean design but it does the job
of showing you what the minimal

00:04:41.815-->00:04:48.622
circuitry is that you need to
build a mixer which accomplishes
this uh this problem of shifting

00:04:48.622-->00:04:53.627
a frequency. Uh so I’m gonna do
a little demo here. I’m going to
actually receive a signal.

00:04:56.530-->00:05:01.535
[audio playback] There you go uh
everybody’s radio speaks
mandarin right? Um I’m just

00:05:01.535-->00:05:07.374
going to do a little narrow band
FM transmission and one of the
drawbacks of this design is that

00:05:07.374-->00:05:13.647
it has uh it, it terrible uh
performance in terms of receive
sensitivity but that doesn’t

00:05:13.647-->00:05:18.652
really matter if you’re
transmitting from a fairly high
powered device nearby. And so

00:05:18.652-->00:05:24.291
you can still demonstrate a
functional mixing circuit with a
single diode uh as long as you

00:05:24.291-->00:05:30.764
have a relatively high signal
strength nearby. So I’m gonna,
uh um do a little, uh capture

00:05:30.764-->00:05:35.769
here where I’m just streaming
samples from the analog to
digital converter on the grate

00:05:37.871-->00:05:43.777
fet and then I will uh once it’s
up and running I’m gonna do a
little test transmission. Here

00:05:43.777-->00:05:48.615
we are, testing from on stage,
Breadboard SDR this is ADX0R.
And you really should have a

00:05:48.615-->00:05:53.620
amateur radio license to do
stuff like this. Um, I highly
recommend it, there are HAM

00:05:58.825-->00:06:03.663
exams going on here at DefCon.
Uh and then I’m gonna bring up a
little flow graphing canoe

00:06:03.663-->00:06:08.735
radio. I don’t have time to go
into it in detail but uh I’m
taking this file that I just

00:06:08.735-->00:06:13.740
captured over the air and I’m
going to see if I can recover
audio from it. Uh and in

00:06:15.942-->00:06:20.947
software I should be able to do
this. [audio playback] >>C- can
anyone else hear that. >>Did you

00:06:30.156-->00:06:36.663
hear that? [applause] >>I think,
y- you could turn the volume up
on your laptop. >>I could turn

00:06:36.663-->00:06:41.334
the volume up on your laptop. I
could also actually use the
capture file I just made instead

00:06:41.334-->00:06:45.839
of the capture file that I did
earlier because I, because uh
that’s kind of cheating right

00:06:45.839-->00:06:50.844
>>Right >>Like, lets see if the
new capture file actually works.
[audio playback] There we go.

00:07:13.967-->00:07:17.971
[applause] >>We probably should
have told speaker ops that we
needed >>Audio output, I know.

00:07:17.971-->00:07:24.344
That was the only 1 we needed
audio output for. I can make a
fool of myself once, it’s.

00:07:24.344-->00:07:26.980
[audience comment] >>Yeah
>>That’s alright, we. >>We’re
done with the >>We don’t need it

00:07:26.980-->00:07:32.786
>>But thank you very much
>>Sorry. That’s our demo. Um, so
yeah when you build a radioing

00:07:32.786-->00:07:37.557
software you really don’t need
much hardware and that’s one of
the cool things about software

00:07:37.557-->00:07:42.762
defined radio technology. You
can actually use the power of
software to overcome

00:07:42.762-->00:07:47.767
deficiencies in your hardware so
you can demonstrate working uh
working circuits with extremely

00:07:51.438-->00:07:56.443
few components. Alright. >>Um,
so uh, Mike uh wh- what, what
happened when we started the

00:08:00.714-->00:08:06.486
research first is we divided up
our ideas and Mike took the
receivers and I being the 1

00:08:06.486-->00:08:11.491
without an amateur radio license
took the transmitters. Um, yeah.
Like a pro. Uh so um, so ha, y-

00:08:14.794-->00:08:19.532
you won’t be surprised to find
we stopped bands where we could
transmit, or I had Mike with me

00:08:19.532-->00:08:25.138
whenever I tested these things.
Um but uh, th- what our
scenarios is that we’ve got

00:08:25.138-->00:08:29.275
inside an air gap network. We
have an ally inside, we want to
build a transmitter but we can’t

00:08:29.275-->00:08:36.216
just carry a radio in there. Uh
big brother probably wouldn’t
like hack RF so I um it’s

00:08:36.216-->00:08:42.555
unlikely we can carry it into
the buil- I really wish I’d re
read 1984 before this so I could

00:08:42.555-->00:08:47.027
get my references right. But we
couldn’t carry into the ministry
so, w- what could we do with the

00:08:47.027-->00:08:51.765
microcontroller we find inside?
Um now previously we were
talking about those clock

00:08:51.765-->00:08:58.071
signals. The clock signal that
we were using to mix uh, with
the incoming transmission on the

00:08:58.071-->00:09:03.777
Breadboard SDR. What if we uh as
we said it transmits as much as
it receives, well, have if we

00:09:03.777-->00:09:10.216
intentionally try and transmit
uh and see if it receives as
much as it transmits. Um, so a

00:09:10.216-->00:09:14.921
few people have done this
before, uh, uh Funtenna was an,
an interesting idea where you

00:09:14.921-->00:09:20.160
toggle a GPO pin uh very
quickly, uh raspberry PI FM does
a similar thing and it uh

00:09:20.160-->00:09:26.466
toggles a GPO pin very quickly
and adjusts the frequency of
that. And uh Mike Waters uh

00:09:26.466-->00:09:30.637
actually with grate fet
previously did on off keying. So
he would, he would take that

00:09:30.637-->00:09:35.475
clock signal that we’re using as
a mixer and he’d just turn it on
and off very quickly, and he

00:09:35.475-->00:09:40.513
would generate on off keyed
data. And so we wanted to kind
of 1 up him a little bit because

00:09:40.513-->00:09:45.885
he’s a friend of ours and so we
wanted to look at SFK data,
frequency shift key things. Uh

00:09:45.885-->00:09:50.890
and so, w- what we did is we
graphed a grate fet um stuck a
in instead of having that mixer

00:09:53.793-->00:10:00.166
come back into the into the
system, we just stick a wire on
it and uh I very carefully

00:10:00.166-->00:10:04.504
trimmed this antenna by reaching
into a box of jumper wires,
pulling out 1 that was kind of

00:10:04.504-->00:10:10.410
short and sticking it in the pin
header and hoping that would
work and it kind of does. Uh if,

00:10:10.410-->00:10:15.415
if your radios as rough as this
the antenna is not gonna make
the difference. Um, so who, so

00:10:18.218-->00:10:22.889
what we want to do is uh
frequency shift data uh key data
and, and we have 2 options here,

00:10:22.889-->00:10:27.360
1 is we can take those clock
generators and we can very
rapidly try to reconfigure them.

00:10:27.360-->00:10:32.532
Um and th-that’s what
raspberryPI FM does but we
couldn’t get it to make very

00:10:32.532-->00:10:37.604
clean jumps back and forward
between the o- our 2 frequencies
that we needed. And um we

00:10:37.604-->00:10:41.941
actually had a in-inside grate
that we happened to have
multiple clock generators, there

00:10:41.941-->00:10:48.481
uh, there are 3 in there. There
was 1 for audio, 1 for CPU and 1
for USB. So if we just resign

00:10:48.481-->00:10:53.253
ourselves to the fact that we
don’t get to use 2 of those
things um then and specifically

00:10:53.253-->00:10:57.657
we need the CPU so we just don’t
use USB and the audio we can
repurpose both of those clock

00:10:57.657-->00:11:02.595
generators. So what we did is we
set 1 to 315 megahertz, we set
one to 315 point 1 and then the

00:11:04.931-->00:11:10.837
SCU here is a um system control
unit. All it does is decide
which pins on the micro control,

00:11:10.837-->00:11:14.974
which functions of the, of the
processor get connected to which
pins one um output pins on the

00:11:14.974-->00:11:19.979
grate fet. So all I did is I
saw, this clock pin will be
connected to this output pin.

00:11:22.382-->00:11:27.220
And then when I want to change
the other frequency I just
reconfigure the SCU and switch

00:11:27.220-->00:11:30.423
which clock signal is going out.
And that’s much, much quicker
than waiting for a clock

00:11:30.423-->00:11:36.896
generator, a, a PLL to settle.
Um and it is that simple. All we
do is load in the FSK data into

00:11:36.896-->00:11:43.436
the, into the firmware. Um, I do
it over USB but I’ve killed my
USBS by repurposing the clock.

00:11:43.436-->00:11:49.375
Uh so I, I uh build a 1 time
firmware load it onto the device
and immediately just repeatedly

00:11:49.375-->00:11:54.380
transmits my FSK signal. Um and
so it’s uh super simple piece
of, oh you need to tab out.

00:11:56.683-->00:12:01.621
Yeah. That’s alright videos
don’t work in PDF. Um so it’s a
super simple uh piece of code.

00:12:04.457-->00:12:11.431
We captured a signal uh we
actually used uh HackRF to
capture the signal and up we

00:12:11.431-->00:12:16.436
retrains- we pulled the bits out
using uh Inspectrum, loaded it
into the grate fet and then um,

00:12:18.705-->00:12:24.510
retransmitted it. Now, we have a
piece of demo target for this
but it was kind of large and uh

00:12:24.510-->00:12:28.615
DEF CON was not super
enthusiastic about bringing it
on stage so this is a video

00:12:28.615-->00:12:33.620
demo. Um. >> I don’t know why
they didn’t want us to bring our
demo car. So, this is there, I’m

00:12:36.856-->00:12:41.461
just pausing it for a moment.
>>So who, so yeah the first
thing you saw is me hit a key on

00:12:41.461-->00:12:45.665
the keyboard and that was just
loading the firmware into the,
my single purpose firmware into

00:12:45.665-->00:12:50.670
the, into the grate fet and then
you probably want to watch the
bottom w- bottom in the middle

00:12:52.872-->00:12:59.379
to the left. Watch my lights.
>>There they go. >>There we go
and we unlock my car. So, it

00:12:59.379-->00:13:03.783
turns out like cars use rolling
codes so to get this working
correctly what we had to do is

00:13:03.783-->00:13:08.287
run up and down the road to get
out of range of the car, capture
a keypress with the HackRF,

00:13:08.287-->00:13:14.594
decode it, copy the bits over to
the grate fet, run back up the
road, try it. And then the first

00:13:14.594-->00:13:18.064
time we tried it we thought it
was going to be like, there’s no
way this is going to work the

00:13:18.064-->00:13:21.100
first time. So I just ran it and
we were like, oh it unlocked the
car. And Mike’s like, I haven’t

00:13:21.100-->00:13:25.838
started recording yet and so we
both like gravel open and we run
back down the road. Uh we were

00:13:25.838-->00:13:29.709
opposite a dog part uh, so it
was just a bunch of puppies
following us as we run up and

00:13:29.709-->00:13:34.714
down. The most fun. >>And uh
interestingly the uh, the target
device the, the actual key fob

00:13:40.320-->00:13:45.658
that we captured a signal from
has ya know, pretty tight uh
frequency deviations of plus or

00:13:45.658-->00:13:52.665
minus 25 kilohertz um, and, and
we had a little bit of
difficulty with like configuring

00:13:52.665-->00:13:58.805
the clock generators exactly how
we wanted and, and we said well
hey th- maybe this way will work

00:13:58.805-->00:14:03.109
and we don’t have to go through
the trouble of going to the more
complicated configuration w- we

00:14:03.109-->00:14:07.213
were thinking about. Let’s just
try it this way and see what
happens. And it turned out yes

00:14:07.213-->00:14:12.218
we had twice the frequency
deviation and a considerable off
set from uh the original target

00:14:15.188-->00:14:20.359
devices center frequency and it
still worked. Like we were
within the receive filter of the

00:14:20.359-->00:14:26.833
uh of the target device and, and
we were able to replay those
signals uh not replay them. We

00:14:26.833-->00:14:32.171
were able to synthesize new
signals from the captured
signals that we had generate, or

00:14:32.171-->00:14:37.143
uh that we had captured from the
real original key fob. >>Right
and, and part of that is just

00:14:37.143-->00:14:39.946
power as well. We were like as
you saw in the vi-video I was
like sat with the, the grate

00:14:39.946-->00:14:41.948
fet, on the, I was gonna say
bonnet, uh of my car, hood of my
car and uh, and um so I was like

00:14:41.948-->00:14:46.953
ya know not that far away from,
from the receiver which is, is
in the dash. So like I, I’m so

00:14:53.926-->00:14:59.098
close to it that, uh the power
flow I was transmitting at it’s
probably going to go through the

00:14:59.098-->00:15:03.669
filter pretty, pretty well.
>>Right yeah the closer you are
the more you can get away with

00:15:03.669-->00:15:09.709
in terms of being off frequency
or being out of the pass band of
the filter. The received.

00:15:09.709-->00:15:14.280
>>There’s nothing particularly
subtle or delicate with any of
these radios. >>Yeah >>Um it’s

00:15:14.280-->00:15:19.519
like >>So if it oscillates like
a radio and emits like a radio,
it’s a radio. And that’s kind

00:15:19.519-->00:15:23.790
of, a, a big part of the, the
point of what we’re doing today,
is, is trying to show that you

00:15:23.790-->00:15:28.795
can build radio circuits out of
just about anything. Uh our next
scenario is, is this idea that

00:15:31.564-->00:15:37.904
maybe, maybe you’re not allowed
to even have analog digital
converters. Like we, we’ve been

00:15:37.904-->00:15:43.709
there, in our first SDR receive
I repurposed a microcontroller
that had an analog to digital

00:15:43.709-->00:15:48.581
converter in it and an analog to
digital converter is generally
considered to be the core of any

00:15:48.581-->00:15:53.252
software defined radio and I
wanted to see if we could build
a software defined radio

00:15:53.252-->00:15:58.457
receiver without an analog to
digital converter specifically
can we use a GPIO input, a

00:15:58.457-->00:16:03.262
general purpose digital input.
So it’s just a pin on a
microcontroller that detects ya

00:16:03.262-->00:16:08.034
know whether there’s a high
voltage or a low voltages and
that’s, it, it only has 1 bit of

00:16:08.034-->00:16:13.039
dynamic range. Um, and uh, that
we can kind of think of a GPIO
pain as being a 1 bit ADC and if

00:16:16.309-->00:16:21.314
we do are we able to b-actually
build a f- functional software
defined radio out of it? And um,

00:16:24.383-->00:16:29.322
came back to kind of a real
m-real motivation of this too is
like, w-when we did the previous

00:16:29.322-->00:16:35.528
demo with the car, we captured a
signal with a HackRF and we, we
kind of said well maybe that’s

00:16:35.528-->00:16:40.533
cheating a little bit, maybe we
should actually have a demo in
which we can build a radio and

00:16:43.402-->00:16:48.407
use it to capture the keypress
on the car key. And that’s how
we could r- uh ya know find the

00:16:52.078-->00:16:57.116
code that we need to transmit.
It’d be nice to be able to do
that without having something

00:16:57.116-->00:17:03.122
like HackRF. >>So if you have a
HackRF you don’t need to build
a, a, a PLL switching SFK

00:17:03.122-->00:17:09.729
transmitter we just used the
HackRF. >>Right like >>Motivate
there >>So uh, but a another ya

00:17:09.729-->00:17:13.366
know getting back to this
fictional idea that analog to
digital converters are

00:17:13.366-->00:17:19.839
restricted, like if you, if you
think that’s far fetched anyway
uh here’s something from ITAR.

00:17:19.839-->00:17:26.045
Um, that tells us about today
export controls on analog to
digital converters in this

00:17:26.045-->00:17:31.384
country. And, and you can see
that like if you look on the
right hand side of the page uh

00:17:31.384-->00:17:38.224
you can see 10 bit ADCs are
restricted at a certain speed
and 12 bit ADCs are restricted

00:17:38.224-->00:17:43.596
at a certain speed and so forth.
And uh you’ll notice that there
is no restriction for 1 bit

00:17:43.596-->00:17:50.469
ADCs. So 1 bit ADCs are totally
allowed at any speed. Which is
p- til, til tomorrow. [laughter]

00:17:50.469-->00:17:55.474
Uh 1 bit ADCs are allowed by
ITAR at any speed so uh, w- we
should be able to implement a 1

00:17:59.879-->00:18:05.484
bit ADC and ya know if you
restrict the GPIO inputs like
you restrict all digital

00:18:05.484-->00:18:10.323
electronics. Uh, so if any
digital electronics work we
should be able to improvise an

00:18:10.323-->00:18:17.263
ADC out of a GPIO pin, that’s
our thinking. Uh so we’ve made a
GPIO pin receiver and uh,

00:18:17.263-->00:18:23.169
unfortunately ya know, w-w- one
of the drawbacks of making a
GPIO pin receiver is that we

00:18:23.169-->00:18:28.174
need a fairly strong signal that
we pump into it. Um, and so we
actually decided to salvage an

00:18:30.476-->00:18:35.481
analog radio from uh, from
something that uh, that h- th-
that’s readily available, like a

00:18:37.850-->00:18:42.855
tele screen. For example and uh,
so I made this little circuit
that’s using a, a TV tuner and

00:18:45.625-->00:18:51.430
this is an old analog TV tuner
like you might pull out of a
VCR. We had VCRs in 1983. Um,

00:18:51.430-->00:18:56.435
and so this is not a digital
receiver at all. This is just an
analog radio tuner that shifts

00:18:59.939-->00:19:04.877
the frequency of uh, a
television signal down to uh, a
frequency that um, uh, that uh,

00:19:08.514-->00:19:13.519
uh a television is able to uh,
um decode. Um, and, an analog or
a digital way. And I connected

00:19:16.522-->00:19:21.527
this to a grate fet and I’m
using a GPIO pin on the grate
fet to read the uh the input

00:19:25.297-->00:19:30.302
from that, that uh tuner that
analog input. And I was able to
do this with just 1 additional

00:19:32.304-->00:19:38.044
component. So I have the tuner
and I have the grate fet and I
have 1 capacitor in there. And

00:19:38.044-->00:19:44.116
this is a circuit diagram. You
can see we’re, we’re picking up
315 megahertz signal from

00:19:44.116-->00:19:50.189
Dominic’s car key. And using
this TV tuner, that we could
salvage out of some other

00:19:50.189-->00:19:55.194
equipment like a tele screen.
And that’s getting converted
down to about 44 megahertz. It,

00:19:58.297-->00:20:03.302
we need this 1 capacitor so that
we can AC couple it to the GPIO
input on the grate fet. And the

00:20:05.604-->00:20:10.042
first time I made this work I
actually had a voltage divider
there. So I had 2 additional

00:20:10.042-->00:20:14.480
resistors in the design to bias
that GPIO pin. And there were,
there were kind of a number of

00:20:14.480-->00:20:20.953
tricks going on in this design.
W- one of them is that we need
to bias that GPIO pin and the

00:20:20.953-->00:20:27.660
reason for that is like, i- if
you, if you give the GPIO pin a
voltage near zero volts it

00:20:27.660-->00:20:32.665
detects that as low. And if you
give it a voltage that’s near
3.3 volts, which is its power

00:20:32.665-->00:20:38.637
supply level, it detects that
it’s high. But somewhere in
between zero and 3.3 volts there

00:20:38.637-->00:20:44.243
is this threshold where you can
kind of twiddle the voltage by a
small amount and make it f- and

00:20:44.243-->00:20:49.148
flip that bit. But finding that
flesh hold, threshold is a
little bit tricky business. So

00:20:49.148-->00:20:53.185
the first time I did it, I like
played with different resistors
to make a little voltage divider

00:20:53.185-->00:20:59.291
to, to bias it so that, that pin
would be at about the threshold
that it needed to be. Uh but

00:20:59.291-->00:21:03.395
then I realized I could
eliminate those 2 resistors from
the design just by using the

00:21:03.395-->00:21:09.435
digital to analog converter
that’s on, that’s built into the
microcontroller. And use that to

00:21:09.435-->00:21:14.440
produce an arbitrary uh, DC
voltage that I used to bias
that, that GPIO pin. And not

00:21:17.042-->00:21:22.715
only does that remove 2
resistors from the design but it
also gives me a flexible way to

00:21:22.715-->00:21:28.921
tune in software and find just
the right threshold because that
threshold may change over time.

00:21:28.921-->00:21:32.658
It may change with temperature,
it may change from 1
microcontroller to another. It’s

00:21:32.658-->00:21:38.998
not guaranteed by the datasheet,
uh to be at any particular
voltage level. And so it’s handy

00:21:38.998-->00:21:44.837
to be able to control that from
software. And f- and dynamically
find the uh, that particular

00:21:44.837-->00:21:51.043
threshold that I need. Now,
another trick that we’re using
in this, i- and this is

00:21:51.043-->00:21:56.315
fundamental to the concept of,
of using a 1 bit ADC is that
we’re oversampling and

00:21:56.315-->00:22:00.753
decimating. What does that mean?
It means over sampling means
we’re, we’re using a sample rate

00:22:00.753-->00:22:05.524
that is faster than you might
expect that you need. And we’re
decimating which means we’re

00:22:05.524-->00:22:10.529
reducing the sample rate, we’re
throwing out some samples but
we’re doing it in an intelligent

00:22:10.529-->00:22:15.701
way. So here is a little
assimilation where I have uh 16
random samples in this stem

00:22:15.701-->00:22:21.106
plot. The first ones zero the
second on is 1 and so forth.
They’re all 1 bit samples.

00:22:21.106-->00:22:26.312
They’re all 1 bit samples, uh I
just have 16 random values. The
first step in, in oversampling

00:22:26.312-->00:22:31.617
and decimating is then to
combine some of those samples
and reduce the sample rate. Uh

00:22:31.617-->00:22:37.990
and ideally, we use a, uh, uh,
some kind of uh, uh, good
quality low pass filter. But as

00:22:37.990-->00:22:43.462
a kind of crude example let’s
just say we average adjacent
samples together. So those first

00:22:43.462-->00:22:49.702
2 samples, zero and 1 we combine
those 2 samples into 1 sample
that has a value that’s the

00:22:49.702-->00:22:55.474
average of those 2, so it has a
value of 0.5. I’m going to do
that with every pair of samples.

00:22:55.474-->00:23:01.313
If I do that then I turn my
sample stream into this in a
digital domain. Instead of

00:23:01.313-->00:23:08.053
having zeros and 1s, now I have
zeros and 1s and 1 halves. But I
have half as many samples. But

00:23:08.053-->00:23:12.524
I’ve added more dynamic range.
There’s more nuance to the
vertical scale and I can keep

00:23:12.524-->00:23:19.131
going. I can do this again. I
can combine 2 of these samples.
And, and now I have only 4

00:23:19.131-->00:23:26.005
samples left but uh out of those
original 16, but each 1 has
several different values it

00:23:26.005-->00:23:31.443
could take on, not just a zero
or a 1. So we’re adding dynamic
range by trading our excess

00:23:31.443-->00:23:38.150
sample rate. So the faster we
can sample the, we, we the more
ability we have to actually gain

00:23:38.150-->00:23:42.922
dynamic range. And we gain a bit
of dynamic range everything we
divide the sample rate in half.

00:23:42.922-->00:23:47.926
And that allows us to take a
low, a low dynamic range ADC and
turn it into a high dynamic

00:23:50.296-->00:23:56.669
range ADC at a l- at a lower
speed in software, which means
ultimately, we should be able to

00:23:56.669-->00:24:02.775
make things work with a 1 bit
ADC. Like a GPIO pin. Now
interestingly Dominic I think

00:24:02.775-->00:24:07.446
was the first person to point
out that now only are we
oversampling in this demo but we

00:24:07.446-->00:24:13.919
are also under sampling. Ha.
That may be hard to wrap your
h3ead around but we are in fact

00:24:13.919-->00:24:18.924
sampling at a, at a, uh sample
rate that is lower than that 44
megahertz output of the TV

00:24:21.226-->00:24:26.065
tuner. We’re sampling currently
at 20 million samples per second
which is quite a bit lower than

00:24:26.065-->00:24:32.371
the 44 megahertz uh intermediate
frequency that we have form that
TV tuner. And it turns out that

00:24:32.371-->00:24:35.708
that works out fine. We were
thinking that we could crank up
our speed and actually sample

00:24:35.708-->00:24:41.180
that GPIO pin faster than that
but it turned out that we didn’t
need to. So we actually ended up

00:24:41.180-->00:24:46.418
with a demo where we’re
simultaneously oversampling and
undersampling. I think that’s

00:24:46.418-->00:24:52.791
pretty cool. Uh so let's do our
demo. Alright I gotta try moving
this thing without drop it, now.

00:24:52.791-->00:24:59.431
>>Good luck, yeah. There you go.
>>Alright. These demo, I’ve
broken like wires in these

00:24:59.431-->00:25:05.270
demoes at least twice in the
last 24 hours. So uh, ya know,
we’ll see how this goes. Uh we

00:25:05.270-->00:25:10.409
have, my favorite antenna which
is just a piece of wire stuck
into the coax connector on the

00:25:10.409-->00:25:15.414
end of the TV tuner and um, I’m
going to let’s see I have to
tune the tuner which was a

00:25:17.549-->00:25:22.554
little bit of uh, a little bit
of configuration. Um, there are
some I squared C, there’s a

00:25:24.790-->00:25:29.962
little I squared C but on the
tuner and so we have the grate
fet actually commanding it to

00:25:29.962-->00:25:34.967
tune to a certain frequency
which I just did. Uh, and then
what is the other command I do?

00:25:38.137-->00:25:44.376
I don’t remember was it. Logic,
that’s the 1 I want. Uh we’re
using this logic analyzer

00:25:44.376-->00:25:49.848
command, uh which actually takes
the state of multiple GPIO Pins
and throws them into this

00:25:49.848-->00:25:55.320
n-named pipe right now. But um
all the other GPIO pins that it
talks to are unconnected. So

00:25:55.320-->00:26:00.259
they’re all just at zero. And
I’m gonna run that while I turn
on a GNU radio flow graph to

00:26:03.796-->00:26:10.002
actually uh, process the
information. And so now you,
what you can see here are the

00:26:10.002-->00:26:16.208
1-bit samples that, that top
plot that’s moving rapidly left
to right. Those are all just

00:26:16.208-->00:26:21.146
1-bit samples, see everything is
either a zero or a 1. And then
uh Dominic is pressing the

00:26:21.146-->00:26:26.385
button, there he goes on his key
fob and you can see that we’re,
s- we’re seeing a signal down

00:26:26.385-->00:26:31.824
here in out waterfall plot. If
you look at just the 1-bit
samples it’s kind of hard to see

00:26:31.824-->00:26:36.695
that there’s anything different
going on but if you look at the
decimated samples, this is after

00:26:36.695-->00:26:42.968
we’ve down sampled, we f- and
combined samples together with a
filter that allows us to create

00:26:42.968-->00:26:47.739
my dynamic range, now as he’s
pushing the button you can see
the singing littlest stuff. It

00:26:47.739-->00:26:51.677
looks like a real radio signal
that we should be able to
analyze and in fact if we run it

00:26:51.677-->00:26:56.482
through an SFK demodulator, uh I
just stopped this really quick,
and then you can see that in

00:26:56.482-->00:27:01.053
this, the left-hand side of this
screen here you can clearly see
the bits that are being

00:27:01.053-->00:27:06.125
transmitted. Uh, so sometimes
it’s low and sometimes it’s high
and when the frequency is low

00:27:06.125-->00:27:10.395
it’s transmitting a zero. When
the frequency is high it’s
transmitting a 1. Or something

00:27:10.395-->00:27:16.835
like that. The other way around
perhaps. But we can clearly see
the digital bits uh that are

00:27:16.835-->00:27:21.840
being transmitted sufficient to
decode it. And we’ve now taken a
w-one capacitor circuit and used

00:27:25.210-->00:27:31.817
it to interface our
general-purpose microcontroller
with a salvaged uh radio tuner

00:27:31.817-->00:27:36.822
and repurposed it. So instead of
just being a TV tuner, it now is
able dec- help us in software,

00:27:40.659-->00:27:47.032
demodulate and decode arbitrary
radio signals including the
digital signal from Dominic’s

00:27:47.032-->00:27:52.037
key fob. [applause] >>Alright,
so um, moving on uh, yeah. So uh
sometime, uh, uh, a number of

00:27:58.477-->00:28:03.415
people have asked us recently,
we’ve been, we did some work
earlier in the year, it was the

00:28:09.755-->00:28:13.292
end of last year I guess. Um on
direction finding and a number
of people are very interested in

00:28:13.292-->00:28:18.931
being able to track down uh the,
the source of a radio
transmitter. Um, this is uh i-

00:28:18.931-->00:28:24.336
amateur radio, amateur radio
enthusiasts want to find people
who are interfering with the,

00:28:24.336-->00:28:30.142
with their radios. Who, people
who are broadcasting illegally
and so, so forth. And um, uh,

00:28:30.142-->00:28:35.147
we, we’re saying here that uh
big brother has deployed a, a
pseudo doppler technique um to,

00:28:37.449-->00:28:42.754
to kind of do direction finding
to track down illegal
transmitters. And we have

00:28:42.754-->00:28:48.760
managed to somehow given that we
built it uh steal 1 of these
direction finding rigs. And can

00:28:48.760-->00:28:53.699
we do anything nefarious with it
in a way that subverts what the
authorities are attempting

00:28:53.699-->00:28:58.704
today. Um, so spoiler, yes. Um,
so pseudo doppler direction
finding is um, ya know, who we

00:29:04.910-->00:29:08.447
haven’t got on this slide and
he’s sat in the front row is,
Ballen. >>Oh yeah >>I realized

00:29:08.447-->00:29:11.583
because that’s where I first
learned about pseudo-doppler so
sorry about that. Uh Ballen

00:29:11.583-->00:29:16.455
Sigler also did a, a some work
um maybe 10 years ago on this.
>>Yeah >>Um >>Well he’s cited in

00:29:16.455-->00:29:21.426
the talk that is on >>There ya
go, yeah if you watch the talk
that we’re citing you’ll see the

00:29:21.426-->00:29:27.766
citation of his talk and then,
that’s all fine. Uh, apparently.
Um so, so what you do is you

00:29:27.766-->00:29:33.505
have a set of antennas and you
want, and they’re um spatially
separated from each other and

00:29:33.505-->00:29:40.445
you want to rotate very quickly
between them and y- using that
rot-rotation what you see is a

00:29:40.445-->00:29:46.018
shift in the phase of the
signal, the incoming signal and
that gives you some information

00:29:46.018-->00:29:49.354
about which direction it’s
coming as you, as you change
between them. I’m not going to

00:29:49.354-->00:29:54.159
go into the in depth of how that
works. Now because that’s about
as much of it as I really

00:29:54.159-->00:29:59.064
understand and also um you can
look up those 2 talks that I’ve
referenced. But what you need

00:29:59.064-->00:30:04.803
for this is some hardware to
rapidly switch antennas. So we
built some now this is called

00:30:04.803-->00:30:11.710
Opera Cake. It, it connects to
uh, HackRF and uh grate fet and
it can be controlled from

00:30:11.710-->00:30:15.881
firmware. Um, so you can, you
can do various things with it.
One is you can do pseudo doppler

00:30:15.881-->00:30:19.418
by, by attaching a number of
antennas and very rapidly
switching between those

00:30:19.418-->00:30:25.090
antennas. You can also do things
like s- uh have an input and an
output attached and switch in

00:30:25.090-->00:30:30.395
different kind of filters or, or
other things loopback between
the 2 sides. Um and, and just

00:30:30.395-->00:30:33.665
changing between different
antennas based on which
frequencies you’re receiving and

00:30:33.665-->00:30:39.204
things like that. That’s what we
usually use it for. But in our
scenario big brothers using it

00:30:39.204-->00:30:44.443
to, to find where we’re
transmitting from and, and in
doing so what they’re looking

00:30:44.443-->00:30:50.649
for is our transmission and then
they’re inducing a, uh, uh f-
well they’re looking for a phase

00:30:50.649-->00:30:55.654
shift as they switch antennas
and so if we’re able to somehow
inject a phase shift, then that

00:31:00.058-->00:31:04.730
will be a phase shift that they
don’t expect and therefore can’t
compensate for if it’s for

00:31:04.730-->00:31:09.735
example pseudo random. Um, now
uh, what was I gonna do> I was
gonna explain phase shift that’s

00:31:11.937-->00:31:15.774
what I’m gonna do. Okay I was
trying to work out what I,
remember what all these slides

00:31:15.774-->00:31:21.513
for. Um so, so way to get a, a
when we talk about phase shift
what we talk about is the, if

00:31:21.513-->00:31:23.515
you think of a, a, a wave, so,
this one, this slide um if you
think about, I drew this in my

00:31:23.515-->00:31:25.517
hotel room because I wanted
better, to better explain this
concept and I’m not sure it’s

00:31:25.517-->00:31:27.519
worked. Um but if you, if you
think about a wave traveling
down a, a coax bale um as you,

00:31:27.519-->00:31:30.422
the one I’ve carefully drawn on
the paper. Um if you think about
it traveling down and you, and

00:31:30.422-->00:31:35.427
you cut off the cable so that
it’s exposed and becomes a, a
transmitter antenna the, the

00:31:50.609-->00:31:56.114
difference in length between
these 2 cables gives us a
different section of that wave,

00:31:56.114-->00:32:01.787
at the same time. If you inject
the same wave into both of these
cables simultaneously what

00:32:01.787-->00:32:06.725
you’ll get at the antennas is a
slightly different wave based on
the length of the, the cable and

00:32:06.725-->00:32:10.328
the speed at which the signal
propagates down them. This is
sometimes referred to as delay

00:32:10.328-->00:32:16.802
lines. Um, so phase shift is, is
that difference in where we are
in the, in the cycle of the

00:32:16.802-->00:32:21.807
wave. Uh relative to a, to
another wave. Um, so in, in this
instance what we’re doing is

00:32:24.643-->00:32:29.181
we’re taking those 2 cables and
we’re switching from a shorter
cable to a longer cable and with

00:32:29.181-->00:32:34.252
uh, with our standard radio
input signal coming in. And
that’s a signal from some

00:32:34.252-->00:32:39.257
arbitrary radio, it doesn’t have
to be, we’re not generating it,
we’re not creating um, uh a

00:32:39.257-->00:32:44.162
specific radio here, what we’ve
got is a radio that we’re
allowed to transmit with, or, or

00:32:44.162-->00:32:48.266
that we are transmitting with
and we are adding this phase
shift on top at the end to try

00:32:48.266-->00:32:53.138
and make it hidden from
direction finding. And the radio
we’ve chosen is a 4 dollar

00:32:53.138-->00:32:59.744
Bluetooth dongle that I got from
um eBay and we just cracked the
thing open and as you can see

00:32:59.744-->00:33:04.749
here, we attached a coax cable
so that we can hook it up to a,
our radio system and it’s

00:33:04.749-->00:33:10.288
actually on the table in the
front, you can get a look at it
later. Um this took 3 attempts.

00:33:10.288-->00:33:13.959
>>A couple of tries, yeah
>>Couple of tries >>I mean this
1, I, I think I did a really

00:33:13.959-->00:33:19.898
good soldering job on it. You
can see in the lower right-hand
corner of the, I, I’ve nicely

00:33:19.898-->00:33:23.969
uh, you can’t see it behind the
cable but I’ve nicely cut the
original antenna trace and then

00:33:23.969-->00:33:27.739
I’ve soldered the wire onto it.
And then afterwards it didn’t
work and we’re like why does it

00:33:27.739-->00:33:31.776
not work. And if you look
closely uh >>Really closely
where the mouse is right now,

00:33:31.776-->00:33:36.982
you can see Mike melted the
corner of >>Yeah somehow I just
destroyed >>Yeah >>Just like >>A

00:33:36.982-->00:33:42.654
chunk of it is missing >>Yeah
>>Um and so, uh then we went
onto to round 2 which survived

00:33:42.654-->00:33:46.591
long enough for us to work on
this in the lab. >>Yeah >>And
then did not survive the journey

00:33:46.591-->00:33:51.897
to Vegas >>No >>And then thank
you to the >>The third 1 stayed
up, yeah >>Thank you to the

00:33:51.897-->00:33:58.403
Bachelor fold who hah, 9 o’clock
this morning soldered me another
1 uh with their very precise

00:33:58.403-->00:34:02.774
machinery. >>And I, I want to
point out, that, that this is,
this isn’t 1 of these

00:34:02.774-->00:34:09.648
sophisticated modern Bluetooth
chips that knows how to do
Bluetooth and FM radio and WIFI

00:34:09.648-->00:34:13.685
and, and like Bluetooth low
energy and all kinds of
different protocols. This is

00:34:13.685-->00:34:18.690
like a 10 year old chip or more
>>Yeah >>Uh like that we were
hacking on in the early days of

00:34:20.692-->00:34:26.197
Bluetooth hacking and like the
reason we used it was because
like what was it, your first

00:34:26.197-->00:34:29.935
open source contribution? >>Yeah
1, 1 of the pieces of code I’m
gonna run in a minute in the

00:34:29.935-->00:34:35.974
demo it was my first ever open
source contribution which was to
enable the uh radio test modes

00:34:35.974-->00:34:39.344
in these dongles and when we
were coming up with this project
Mike was like, do you have any

00:34:39.344-->00:34:44.316
2.4 gigahertz like hardware
kicking around that we can, we
can hack on. Just kind of opened

00:34:44.316-->00:34:46.318
a drawer and I was like, these.
Um because they’re do cheap and
so I have loads of them hanging

00:34:46.318-->00:34:48.320
around. So, so that’s why we
picked this thing because it’s
pretty hackable and, and things

00:34:48.320-->00:34:50.322
like that. So um so what were’
doing is we’re taking the signal
that comes out of this and we’re

00:34:50.322-->00:34:52.324
using a direction finding
techniques to try and locate it
and then we’re gonna enable uh,

00:34:52.324-->00:34:54.726
um, our delay lines and
switching back and forward
between 2 different lengths of

00:34:54.726-->00:34:58.129
cable and that will produce a
phase shift in the output that
doesn’t affect the signal. It

00:34:58.129-->00:35:02.033
makes no different to uh um our
signal going through but it does
affect the ability to direction

00:35:02.033-->00:35:07.038
find it. >>I’m not sure I would
say it does not affect our
signal but it, it >>Well

00:35:21.119-->00:35:26.124
>>Depends on the modulation
>>Yeah >>Original waveform uh
but if it like for example if

00:35:29.661-->00:35:34.265
it’s an amp, amplitude
modulation it should be able to
just layer on arbitrary changes

00:35:34.265-->00:35:39.904
to the phase uh without actually
affecting your ability to
communicate. Uh so I’m gonna

00:35:39.904-->00:35:44.909
play you a video demo of this
one. Um, and that’s gonna be the
direction finding demo. Okay so

00:35:47.412-->00:35:52.484
this is, I’m gonna pause it a
few times. This is just a demo
we took on the table of our lab.

00:35:52.484-->00:35:57.489
So this is my direction finding
set up here. And um you can see
I’ve got like 4 ampl- I’ve got 4

00:35:59.724-->00:36:05.497
different 2.4 gigahertz antennas
that are vertical and uh to
support them structurally we are

00:36:05.497-->00:36:10.869
using a, a pint glass. Like
everybody needs a glass full of
antennas from time to time. Uh

00:36:10.869-->00:36:15.206
and then this is my
direction-finding rig like I
talked about with Skyler on

00:36:15.206-->00:36:20.912
ShmooCon this you, um so I have
the Opera Cake with the HackRF
and I’m using some software on

00:36:20.912-->00:36:26.451
my laptop to do some, to, to run
some direction finding and I’m
not finding anything right now,

00:36:26.451-->00:36:30.255
there isn’t anything
transmitting. But Dominic over
here is about to start

00:36:30.255-->00:36:35.193
transmitting with his Bluetooth
dongle which you can see plugged
into the USB cable, that little

00:36:35.193-->00:36:40.198
blue b- blue blob plugged into
the USB extender that’s actually
a little tiny uh USB, uh to

00:36:42.367-->00:36:48.707
Bluetooth adapter. And that’s
plugged into his Opera Cake. Uh
his Opera Cake has 4 different

00:36:48.707-->00:36:53.011
wires in it, I think you’re only
using 2 of them. >>Yeah >>Uh but
they’re, they’re 4 different

00:36:53.011-->00:36:58.016
lengths of of cable and he h- he
has the abilities to from
software control uh which cable

00:37:00.218-->00:37:05.490
is switched into the path
between the Bluetooth dongle and
the external antenna. So, so

00:37:05.490-->00:37:08.960
initially, uh >>You can press
play. >>Yeah >>Uh so initially
what we can do is start

00:37:08.960-->00:37:14.199
transmitting from the uh, from
the Bluetooth dongle and we’re
going to leave the, the path

00:37:14.199-->00:37:19.571
from the static. So if you pause
now you can see we got a pretty
reasonable, this is a, a, a >>A

00:37:19.571-->00:37:24.976
polar >>A polar thank you, the
polar plot. And so you can see
we’ve got a pretty reasonable

00:37:24.976-->00:37:29.881
direction from our antenna array
to, to where this things
transmitting, like that’s pretty

00:37:29.881-->00:37:36.287
>>That blue dot, that blue dot
is our ya know up to the ya know
up and to the right to the

00:37:36.287-->00:37:42.494
center of the plot and so that’s
indicating the direction of the
uh transmitter that it’s seeing,

00:37:42.494-->00:37:48.833
I’m gonna unpause it here >>And
so what I do is I run a script
that just sl-slowly switched

00:37:48.833-->00:37:55.673
back and forth between 2, 2
paths. Uh just creating a, a
little um, phase shift once in a

00:37:55.673-->00:38:00.011
while. Um only once in a while
like every couple of
milliseconds and, and you can

00:38:00.011-->00:38:06.818
see it just sends this, this
becomes sporadic. Like it, we
have a such a wide range like

00:38:06.818-->00:38:12.624
our, our baring to our
transmitter has gone from being
kind of very narrow to being

00:38:12.624-->00:38:19.130
somewhere around um, 50 percent
of, of the direction that we’re
looking in. And so that phase

00:38:19.130-->00:38:24.502
shift means that we now, it’s
not much more hard, much more
harder. Much more difficult to

00:38:24.502-->00:38:30.408
locate the um, the transmitter
than it, than it previously was.
So we’re able to subvert our

00:38:30.408-->00:38:35.680
own, we’re able to subvert our
own pseudo doppler direction
finding code using our own

00:38:35.680-->00:38:40.518
pseudo doppler direction finding
software off the code that we
wrote. Um so I’m gonna call that

00:38:40.518-->00:38:45.523
a win. [laughter] [applause]
Okay um since we can introduce
those phase shifts, uh we

00:38:56.401-->00:39:00.972
thought as a, a, a final demo in
the, in the last couple of
minutes uh that we have left

00:39:00.972-->00:39:05.977
what we’d try and do is um, put
out uh is, is do, do a phase
shift keyed transmission. So

00:39:09.247-->00:39:15.353
what we’re gonna do is, is
transmit something that is phase
shift keyed by not by having a

00:39:15.353-->00:39:18.690
radio that transmits phase shift
keyed, we’re gonna have a clock
source and then we’re gonna

00:39:18.690-->00:39:23.695
change the phase using the, um
y- using the, the delay lines on
the uh, on the upper K board.

00:39:27.065-->00:39:33.638
So, um, so, so this is a picture
of those delay lines, I like to
call this the swamp thing. Um

00:39:33.638-->00:39:37.275
this, so I’m just running this
again from grate fet because
it’s the microcontroller or

00:39:37.275-->00:39:44.282
board I have around. Um and it,
it uses GPIO pins to rapidly
switch which antenna path. Now

00:39:44.282-->00:39:48.886
I’m going to do something that’s
um, BPSK, binary pi- psk so
actually I’m gonna need 2o of

00:39:48.886-->00:39:53.291
those 4 paths that I’m using,
But, but essentially what I do
is I switch both sides

00:39:53.291-->00:39:59.130
simultaneously and switch in
those various lengths. And those
lengths are off by a half a

00:39:59.130-->00:40:04.235
wavelength from each other. So
half or a multiple of half way,
th- and the frequency that

00:40:04.235-->00:40:09.374
we’re, that we’re using. Now
because we’re using a Bluetooth
dongle to feed this uh our

00:40:09.374-->00:40:16.314
wavel- uh our frequency is 2.4
gigahertz and >>We have a, uh,
we have a little 2.4 gigahertz

00:40:16.314-->00:40:20.351
band pass filter in between the
Opera Cake and the antenna, and
that’s actually one of the nice

00:40:20.351-->00:40:25.623
things about using 2.4 gigahertz
band for this kind of a demo is
that you can get r-readily

00:40:25.623-->00:40:32.363
available low cost and highly
effective filters um, this
technique causes a lot of

00:40:32.363-->00:40:37.502
spectral splatter. It really is
not being a very good neighbor
on the spectrum so if we’re able

00:40:37.502-->00:40:43.808
to out, uh filter the output
from it before it goes over the
air uh that helps us, uh be a

00:40:43.808-->00:40:50.114
better neighbor on the spectrum.
>>Yeah >>Uh, wanna talk about
this >>Go for it >>Uh and, and 1

00:40:50.114-->00:40:55.086
of the things we’re, we’re
trying to do here is, is show
that we can take 1 type of radio

00:40:55.086-->00:41:01.225
transmitter and ch- and then
layer another modulation on top
of it so have our covert

00:41:01.225-->00:41:06.331
channel. Uh regardless of what
the, the modulation for the
original system is, we should be

00:41:06.331-->00:41:12.337
able to uh, in some cases
actually still use the original
system, the original modulation

00:41:12.337-->00:41:18.109
and then also add this covert
channel on top of it that acts
like some other type of radio

00:41:18.109-->00:41:24.315
device. >>Uh if you’re looking
up the uh these papers, I highly
recommend you google them rather

00:41:24.315-->00:41:27.585
than click the links in our
slides because we’ve put the
same link for 2 different papers

00:41:27.585-->00:41:30.988
here. >>Oh yeah how ‘bout that
>>Yeah >>Whoops >>It’s alright
just noticed some people taking

00:41:30.988-->00:41:35.393
pictures of the slides doing,
problem with the URL >>I’ll try
to fix that before we hand our

00:41:35.393-->00:41:40.398
slides to speak ops. Oops. >>Uh,
okay so, so when we, when we um,
uh, uh, when we add in the phase

00:41:43.534-->00:41:49.540
shift, uh we’re able to then
kind of capture it with another
radio and look at it, in, in

00:41:49.540-->00:41:55.713
spectrum so this is how we uh
work out whether or not um, our,
our, our transmitter is working

00:41:55.713-->00:42:01.185
and since spectrum lets us do a
phase plot at the bottom here,
so at the bottom of the screen

00:42:01.185-->00:42:06.190
what you can see is the phase
shift being created and there
are very regular intervals

00:42:06.190-->00:42:11.996
because they are uh, when I have
a timer firing on the device and
it, it fires at regular

00:42:11.996-->00:42:16.801
intervals and, and we see a
very, uh very quick phase jump.
>>We’re almost out of time.

00:42:16.801-->00:42:19.370
>>Yeah I’m already running the
demo. >>You’re running it
already. >>I’m already running

00:42:19.370-->00:42:24.909
the demo. >>Okay, so we are
actually now transmitting a
binary phase shift keyed signal

00:42:24.909-->00:42:30.148
in a 2.4 gigahertz band. So like
what could we, what target
device could we use that uses

00:42:30.148-->00:42:36.888
2.4 gigahertz and has binary
phase shift keying or QPSK. And
we said hey, WIFI. >>So if

00:42:36.888-->00:42:41.726
you’re >>WIFI People >>In the
front couple of rows and where
near about here, you might be

00:42:41.726-->00:42:46.931
able to pick up our WIFI beacon
that we’re transmitting and it
says is this revolting enough

00:42:46.931-->00:42:52.270
for you I believe is the uh, is
the network SSID. I’d be really
interested if anyone can receive

00:42:52.270-->00:42:58.743
it because uh, it’s I can’t
receive on my phone here but I
could when I ran this in my

00:42:58.743-->00:43:05.483
hotel like mere hours ago. Um it
turns out doing 2.4 gigahertz
WIFI demos at a CON is, uh still

00:43:05.483-->00:43:09.954
as bad an idea as it was when we
first started doing this. >>Yeah
>>Um >>But we’re not

00:43:09.954-->00:43:14.892
transmitting at a particularly
high power >>Right >>And there
are a lot of different WIFI

00:43:14.892-->00:43:20.098
networks in here that your phone
or your laptop can see. Um but
probably some of you especially

00:43:20.098-->00:43:24.702
those who are sitting close can
actually pick up this WIFI
beacon right now. >>This tends

00:43:24.702-->00:43:28.306
>>And actually see >>Yeah this
tends to work somewhat better if
you’re using an iPhone

00:43:28.306-->00:43:32.810
apparently um interestingly
we’ve just had better luck with
it this morning on people

00:43:32.810-->00:43:37.715
receiving it on an iPhone um but
I’m guessing no one can receive
it which his incredibly

00:43:37.715-->00:43:42.386
disappointing to me. But it is
definitely running. >>Yeah g-
>>Getting it >>Get as close as

00:43:42.386-->00:43:46.891
you can >>Um to the, to the
transmitter >>there yes that’s
the one >>And see if you can

00:43:46.891-->00:43:52.463
pick up a network, there’s uh
yeah I don’t see it on my phone,
I see a lot of other networks

00:43:52.463-->00:43:56.734
around though so that’s
potentially why but I’ll happily
uh run this maybe somewhere

00:43:56.734-->00:44:02.140
that’s a little more RF silent
for people to uh, try it out
later um but yea essentially

00:44:02.140-->00:44:07.578
what we do, what we can do is we
can take a radio test mode that
transmits a, a s- uh just a, a,

00:44:07.578-->00:44:13.951
pure carrier wave into this
device, we can do binary phase
shift keying and I really do

00:44:13.951-->00:44:18.956
promise if you do binary phase
shift keying at 11 megabits you
get a uh 1 megabit DSS, uh

00:44:22.727-->00:44:28.032
transmission out and that can be
crafted to be a, uh, a WIFI
beacon and you should be able to

00:44:28.032-->00:44:33.704
pick this up on your phone. >>So
thank you to all these folds w-
whose work we’ve built upon and

00:44:33.704-->00:44:39.243
um most of this stuff is, is
built on hardware that we’ve,
hardware designs that are in the

00:44:39.243-->00:44:45.416
grate fet repo or the HackRF
repo that’s where the Opera Cake
lives. Find us on twitter and w-

00:44:45.416-->00:44:51.188
we’ll take questions in the
hallway off yonder. Uh in uh
couple minutes. Thank you very

00:44:51.188-->00:44:56.194
much. >>Thank you [applause]

