00:00:00.000-->00:00:05.005
>>Hey, this is Alex, this is
Dan, and they got something
really cool to talk about.

00:00:07.140-->00:00:12.479
[laughter] [whoop] >>Whoo! How
you guys doing? [whoop] Last
talk of the day then you guys

00:00:12.479-->00:00:18.619
are gonna go to bed right after
this, I imagine? [laughter] Uhm,
thanks for coming out guys, uh,

00:00:18.619-->00:00:23.690
this is pretty exciting for us.
My name is Alex Levinson, got
Dan here. Today we're gonna go

00:00:23.690-->00:00:28.495
through a tool that we wrote.
The agenda today we're gonna
talk about droppers, uh, stagers

00:00:28.495-->00:00:33.100
as some of you might call them.
Not really going to get pedantic
about the terminology there. And

00:00:33.100-->00:00:36.870
how we kind of got here today,
after that we're gonna go into
this technology that we built

00:00:36.870-->00:00:40.540
and how it works and we'll talk
about some of the real world
applications and then we'll give

00:00:40.540-->00:00:45.479
you a demo which will inevitably
fail but, you know, we'll see,
we'll see how that goes. So,

00:00:45.479-->00:00:49.716
first off, just an introduction
for us, so my name is Alex
Levinson. I’m a [Whoop] Thank

00:00:49.716-->00:00:54.588
you. I'm a senior security
engineer at Uber, I've been
there for a couple of years. Uh,

00:00:54.588-->00:00:59.860
my specialty is really in tool
development and red teaming. Uh,
I am a core red team member at

00:00:59.860-->00:01:04.798
the national CCDC and also the
western regional CCDC as well.
[whoop] Thank you. >> Hey guys.

00:01:09.636-->00:01:12.506
[inaudible] [background noise]
I'm Dan Borgess, uh, I'm a
senior red team operator in dev,

00:01:12.506-->00:01:19.279
uhm, I also partake in, uh,
national CCDC on the red team
and, uh, Alex and I play a lot

00:01:19.279-->00:01:22.916
of cyber competitions together.
So, we're just here to, to show
you some of our cool tools. So,

00:01:22.916-->00:01:27.521
we gotta go back a little bit,
we gotta cover some basics.
First we're gonna talk about

00:01:27.521-->00:01:31.725
what is a dropper, what is it's
classification of thing that
we're talking about? In our

00:01:31.725-->00:01:36.663
little local hyper, uh, kill
chain right here, we have an
exploit. This is your initial

00:01:36.663-->00:01:40.334
vector, this is how you're
getting on the server. Uhm, this
is usually like a memory

00:01:40.334-->00:01:44.571
corruption attack, something
like that. Next, attackers move
to some kind of stager - this is

00:01:44.571-->00:01:49.343
moving from memory to their next
tool, uhm, often this can reach
out and download more shellcode,

00:01:49.343-->00:01:53.480
do something like that. And
then, this is really where we're
going to focus on. This is kind

00:01:53.480-->00:01:58.051
of your stage one, some, some
people call it the stage 1 to
stage 2, this is the dropper.

00:01:58.051-->00:02:02.856
You're moving from your exploit
to bringing over your tools.
This, this is what's gonna bring

00:02:02.856-->00:02:07.761
over your malware, it's gonna
put your persistence on the box,
your, your deep, uh, slow stuff.

00:02:07.761-->00:02:11.732
And then, finally, you have your
own malware - these are our
custom applications, maybe your

00:02:11.732-->00:02:16.837
specific TTPs, uh, that you
wanna put on a box. And, again,
using a dropper here is

00:02:16.837-->00:02:22.476
important because you can
protect your TTPs. Uh, your
Tools and Tactics and Procedures

00:02:22.476-->00:02:27.481
by using the dropper. So, where
are droppers used? Uh, we're
trying to emulate what we see in

00:02:27.481-->00:02:32.252
the wild. What we see are a lot
of third-party crime were people
who use these exploit kits and

00:02:32.252-->00:02:36.490
then between the exploit kit and
their own private malware
they'll usually lever some kind

00:02:36.490-->00:02:40.694
of dropper. Uh, they can do this
as a form of packing - to either
bundle it with other executables

00:02:40.694-->00:02:47.000
or just, uh, as a way to, uh, to
get their malware onto the
system. You can also use a

00:02:47.000-->00:02:51.271
dropper to be contextually aware
and have contextually aware
implants. This is kind of like

00:02:51.271-->00:02:56.009
Stuxnet so, do you want to land
on the system? Do I want to
deploy my payload? Because

00:02:56.009-->00:02:59.980
sometimes you don't want to
infect this host, and that's a
good, uh, thing for a dropper to

00:02:59.980-->00:03:04.217
say and then kind of back of and
not put the malware down. And
then we use it a lot in our red

00:03:04.217-->00:03:08.522
team operations for CCDC - we
like to go fast and hard, so
this is the perfect tool for us

00:03:08.522-->00:03:14.094
to really like lay on the pain
fast. So, a little bit of
history about how we arrived

00:03:14.094-->00:03:19.166
here. Uh, back in the day on the
CCDC red team all these people
would bring these super cool

00:03:19.166-->00:03:23.470
kits, we'd have really advanced
techniques. And they'd be going
again a single team and they'd

00:03:23.470-->00:03:28.175
be using this technique on this,
this team, uhm, and what we
wanted to do, we wanted to apply

00:03:28.175-->00:03:34.381
this pain to everybody equally.
So, we started wrapping it in
shell scripts and powershells,

00:03:34.381-->00:03:40.220
uh, Bash, and all of these great
techniques to really just kind
of drop 6, 7 implants, up to 10

00:03:40.220-->00:03:44.724
on a single team. So now, each
team is not getting just one
implant made specially for them

00:03:44.724-->00:03:49.463
- they're getting all 10
implants we made for everybody.
So, we can really share. [click

00:03:49.463-->00:03:54.367
noise] Uhm, and then around
2015, 2016 we moved to these,
like I said, these scripts, but

00:03:54.367-->00:03:59.372
they started to have drawbacks,
right? They had like, uh,
forensic, uhm, drawbacks right?

00:03:59.372-->00:04:02.442
[background noise] People could
find the scripts on the systems
- powershell script log logging,

00:04:02.442-->00:04:06.847
and it could tell exactly what
we were doing. They could get
our source code which was pretty

00:04:06.847-->00:04:11.852
dangerous for us as operators.
So, in late 2016, early 2017 we
moved a lot of our tool chain to

00:04:14.454-->00:04:19.092
Golang. We did this for a number
of reasons, mostly because you
get natively compiled

00:04:19.092-->00:04:23.864
executables, so you can get a
binary that runs specifically on
an architecture. Uh, this means

00:04:23.864-->00:04:25.866
you have to disassemble it, it's
hard to decompile which means
you can't get that source code

00:04:25.866-->00:04:27.868
back - it's, it's difficult to
reverse. And while we were doing
this, we also started looking at

00:04:27.868-->00:04:29.870
what is a dropper? Like, right?
This had all of, all of our
tactics built into it and we

00:04:29.870-->00:04:31.872
really wanted to say let's
extract all of our difficult
techniques out and make a pure

00:04:31.872-->00:04:33.874
dropper that we could put any
technique into. And, uh, at
2017, at a national CCDC we had

00:04:33.874-->00:04:35.876
a few friends - Byers, Lucas -
and they put together this thing
called "Genesis" where we had an

00:04:35.876-->00:04:37.878
SMB share and you could just
drop binaries in it. And we
bundled them all into one

00:04:37.878-->00:04:40.247
executable and we just ran it on
the disk. It run everything you
put into this SMB share - it's

00:04:40.247-->00:04:43.483
just a native executable. This
was really cool, this was really
good but it had a few drawbacks.

00:04:43.483-->00:04:45.652
We basically, instead of just
running everything together, we
wanted to specifically

00:04:45.652-->00:04:50.657
instrument them in a certain
way. Uh, so I think it was late
2017, in the, in the 2018 CCDC

00:04:53.793-->00:04:58.799
season Alex started working on
this prototype of Gscript, uh
the Genesis scripting engine,

00:05:24.858-->00:05:29.162
which we'll get to. And we used
it, we used it all through this
last CCDC season and it was

00:05:29.162-->00:05:33.300
really successful. Uh, we
dropped it on every single team
at nationals, everybody felt the

00:05:33.300-->00:05:39.973
pain. And then between then,
which was April, uh, 2018 and
now, we've added a ton of cool

00:05:39.973-->00:05:45.879
new features, like really sweet
stuff, and that's what we're
gonna get into today. [keyboard

00:05:45.879-->00:05:51.518
tapping] >> Whoo. Thank you,
Dan. Uhm, yea, as Dan said -
today we are going to show the

00:05:51.518-->00:05:56.923
world, you guys, the awesome
information security community
that we're a part of, basically

00:05:56.923-->00:06:02.295
what we've done cumulatively
over the last several years. But
also some really awesome

00:06:02.295-->00:06:05.065
features that even if you were
at CCDC, you, you really didn't
get a chance to play with.

00:06:05.065-->00:06:09.336
[background noise] But, from now
on, uh, I'd like to introduce
the Genesis scripting engine, or

00:06:09.336-->00:06:14.341
as we call it, the "Gscript".
What is Gscript? Dan covered
sort of this thing, it's, it's

00:06:14.341-->00:06:18.411
this dropper, it lets us take
malware and bundle it together
and tape it up into a big ball

00:06:18.411-->00:06:22.749
and throw it at somebody. Great,
that's a good explanation but
how do you use it? What does it

00:06:22.749-->00:06:28.388
look like to you as the red
teamer? It's really easy, you
have your payloads, you write a

00:06:28.388-->00:06:33.526
script for your payload, you use
the Gscript compiler just on the
command line. You get out a

00:06:33.526-->00:06:39.199
native binary, it, it couldn't
be more simple than that. Uh, I,
I use this all over our

00:06:39.199-->00:06:43.370
documentation "Gscript is a
framework that allows you to
rapidly implement custom

00:06:43.370-->00:06:49.009
droppers for all 3 major
operating systems". So let's
talk about what makes this uh,

00:06:49.009-->00:06:54.614
what make, what makes up
Gscript, right? So, first off,
there's the engine. The engine

00:06:54.614-->00:07:00.153
is the thing that is inside of
that native binary, that you
made, that actually runs and

00:07:00.153-->00:07:05.392
executes the logic that you've
specified in your script.
There's the compiler, the

00:07:05.392-->00:07:11.431
compiler takes your script and
turns it into that native
binary. There's an obfuscator

00:07:11.431-->00:07:15.268
that's hooked into the compiler
that we wrote to try and make it
a little bit harder for you blue

00:07:15.268-->00:07:19.906
team folks out there. Uhm, we
really do like you but you know,
we just, we wanna make you mad

00:07:19.906-->00:07:24.577
sometimes. Hah. We've got a
standard library, these are
functions you can use inside of

00:07:24.577-->00:07:28.848
your genesis scripts. We've got
a command line tool - that's how
you interact with the compiler

00:07:28.848-->00:07:33.386
and other things. And we also
have interactive debugger to
help you develop these scripts

00:07:33.386-->00:07:37.190
in a more, uh, a more reliable
way that lets you test it out
ahead of time so you're not

00:07:37.190-->00:07:42.696
doing stuff live. [keyboard tap]
A high-level walkthrough -
here's what happens when you use

00:07:42.696-->00:07:47.233
the compiler in that 3-step
process that we just showed.
What ends up happening very

00:07:47.233-->00:07:52.639
first is the compiler goes and
creates, essentially,
representations of engine within

00:07:52.639-->00:07:57.811
memory for each of the scripts
that you, you pass into it. The
next thing it's gonna do is

00:07:57.811-->00:08:00.847
every one of the payloads that
you gave into it, this is -
we'll have an interpreter

00:08:00.847-->00:08:04.918
payload, we'll have some shell
code, we'll have some, you know,
ssh keys that we're gonna drop

00:08:04.918-->00:08:10.323
somewhere. It encrypts, it
embeds them directly into that
virtual machine that it's got in

00:08:10.323-->00:08:15.195
memory. After that it's gonna
take all "n" number of virtual
machines, remember it has a

00:08:15.195-->00:08:20.467
virtual machine isolated for
each script. It's gonna take all
n number of those and it's gonna

00:08:20.467-->00:08:26.306
sew it all together. Just like
with needle and thread into an
actual executable for whatever

00:08:26.306-->00:08:32.779
platform you're targeting. And
then when that executable's run,
that main that it sewed up

00:08:32.779-->00:08:36.950
together, is gonna launch every
one of those runtimes in
parallel. [clicks fingers] So,

00:08:36.950-->00:08:41.921
let's do just a quick, uh, a
quick walkthrough. Will you hold
my water? Thank you. So, a quick

00:08:41.921-->00:08:47.127
walkthrough, uh, of this, just
to kind of, hopefully illuminate
you guys on how easy this is to

00:08:47.127-->00:08:52.132
use. So, I've got little example
here, the example isn't, isn't
crazy, it's, it's really simple.

00:08:54.601-->00:08:58.671
So, we're gonna write a script,
it's 8 lines. There's some
important things to note in this

00:08:58.671-->00:09:02.742
though, it looks like Javascript
- for all intents and purposes,
it is Javascript. We've

00:09:02.742-->00:09:06.946
sprinkled some syntactic sugar
in the form comment macros.
[background noise] So, compiler

00:09:06.946-->00:09:11.618
macros, that you see in the very
first line there. That import
statement is telling the Gscript

00:09:11.618-->00:09:18.024
compiler "I want you to import
this file off my disk when we go
to bundle this together". The

00:09:18.024-->00:09:22.962
next line, line 3, it's just a
normal variable declaration like
you would call in Javascript.

00:09:22.962-->00:09:28.001
And in lines 5 through 8 there,
is a function called "deploy".
Now when I talked before about

00:09:28.001-->00:09:34.007
when you run main it launches
all those virtual machines, the,
the Javascripts VM's essentially

00:09:34.007-->00:09:38.611
need an entry point to launch
when that happens - that's what
it launches. It launches the

00:09:38.611-->00:09:43.116
deploy hook. So, every one of
your Gscripts, no matter what
you're doing in it, will also

00:09:43.116-->00:09:49.122
have a function deploy with
something defined in it. What's
defined in ours here? We get the

00:09:49.122-->00:09:54.494
payload dot text, the, the data
that was in that file, we get it
as a string called payload data.

00:09:54.494-->00:10:00.633
And then we write that to the
destination file which we
defined in line 3. So, very

00:10:00.633-->00:10:06.372
quick, very easy Gscript, uh,
that anybody can write. But hey,
this is, this is not just for

00:10:06.372-->00:10:09.709
one script, this can be for
multiple things, right? So,
let's write another one. What's

00:10:09.709-->00:10:14.347
this one doing? It's simply
writing a file, "second
underscore file dot text", with

00:10:14.347-->00:10:19.352
the screen rekt. So, what do we
do now? Step 3, just use the
compiler - 1 command, Gscript

00:10:21.955-->00:10:26.960
compile with an output file,
"star dot gs". "Gs" uh, is our,
uh, file, file extension for

00:10:29.896-->00:10:36.402
Gscript. That's it, and what did
we get? At fir, at the top we
dropper dot bin. What is

00:10:36.402-->00:10:42.542
"dropper dot bin"? It's a
64-bit, Mach-o executable I'm
doing this on OSX. What else is

00:10:42.542-->00:10:48.081
in? I run it, on the, uh, bottom
of the first box there. And
then, what happens? All of a

00:10:48.081-->00:10:53.186
sudden you see "desk dot text"
and "second file dot text" in
that directory. What's in those?

00:10:53.186-->00:10:59.526
Exactly the contents that we
have placed in them initially.
All of you guys seem pretty

00:10:59.526-->00:11:05.265
quiet. [applause] Was that too
easy? [applause] Thank you.
Alright, so let's just talk

00:11:05.265-->00:11:08.801
about that, that seemed, you
now, why couldn't you do that
with power shell or shell script

00:11:08.801-->00:11:13.306
or something like that? Well,
first off, you're getting a
native binary. You're getting a

00:11:13.306-->00:11:17.210
native binary tat I could've
written the first script, Dan
could have written the next one.

00:11:17.210-->00:11:22.081
And if Dan messed his up or I
messed mine up, it's not gonna
take down the entire binary,

00:11:22.081-->00:11:25.385
it's gonna keep executing,
right? That's the whole point of
this, is to be robust and

00:11:25.385-->00:11:29.856
resilient in the case of
failure. When you do these large
scale red team ops and you have

00:11:29.856-->00:11:35.261
many people contributing code,
you don't necessarily have, have
the luxury of constantly testing

00:11:35.261-->00:11:39.265
to make sure that somebody's
payload isn't gonna, isn't gonna
mess up something in your

00:11:39.265-->00:11:42.769
process, right? So we really
wanted to give the people
writing the payloads the ability

00:11:42.769-->00:11:47.941
to come up with their logic on
how they wanted this to be
bundled in to, to the actual

00:11:47.941-->00:11:53.379
final binary. So, you've got
your native binary, you've got
your isolated Gscript engines,

00:11:53.379-->00:11:57.383
you've got the user-defined
logic in those scripts that is
actually em-, encrypted and

00:11:57.383-->00:12:02.288
embedded just like the assets
are, into the binary. And then
you've got the embedded assets

00:12:02.288-->00:12:07.727
and their payloads. Those all
get bundled together into one
container inside of your native

00:12:07.727-->00:12:12.065
binary. [background noise] So,
let's talk about some of the
features here, right. So, first

00:12:12.065-->00:12:17.704
off, number one feature we saw
was that you get to do this in
Javascript. Now, I'm not a

00:12:17.704-->00:12:24.177
Javascript developer but I think
that we need to be making tools
that are as easy for the

00:12:24.177-->00:12:28.548
broadest selection of us to use,
right? So, I know a lot people
here probably see a lot of

00:12:28.548-->00:12:31.150
programmers, a lot of people
here probably do a lot of
low-level stuff. [background

00:12:31.150-->00:12:34.520
noise] I wanted to make
something common that people
were familiar with, a lot,

00:12:34.520-->00:12:38.291
there's a lot of people that do
web pentesting. Javascript seems
pretty familiar right now to a

00:12:38.291-->00:12:42.428
lot of people. So, let's just go
ahead and go with that. So, it's
easy to write, it's easy to

00:12:42.428-->00:12:46.332
learn, there's good
documentation on how, on how to
write Javascript well. Next

00:12:46.332-->00:12:50.937
thing is it's resilient to
failure, as we talked about, if
script 2 failed, script 1 would

00:12:50.937-->00:12:57.143
have kept on going. Third, it's
highly customisable, so things
like order of operations of your

00:12:57.143-->00:13:02.949
script, timeouts, uh, all of
this stuff you can customise
with those compiler macros that

00:13:02.949-->00:13:06.919
we showed you, right? We showed
you 1 but there's many more you
can go with. So, how is this

00:13:06.919-->00:13:12.892
cross-platform? It's written in
Go, uh, essentially this whole
thing is sort of leveraging the

00:13:12.892-->00:13:17.897
power of the Go compiler to make
cross-platform malware for, for
anybody to be using here. Number

00:13:19.999-->00:13:25.271
5, it's secure. We ran into this
at CCDC where we had our
droppers essentially be reversed

00:13:25.271-->00:13:30.476
engineered very easily by just
looking at the powershell logs.
Uh, I'm excited to release this

00:13:30.476-->00:13:34.547
today because I'm excited to see
how hard it is for someone to
actually reverse engineer one of

00:13:34.547-->00:13:38.418
these binaries. [coughing] That
is a challenge, let me know if
you, I'd love to see it. Uh, and

00:13:38.418-->00:13:45.058
the number 1 thing that is new
to anybody who had seen genesis
in the past, is now you can call

00:13:45.058-->00:13:49.228
native Go from within your
Javascript. We'll look into
that, I know that sounds kinda

00:13:49.228-->00:13:53.933
wacky. [keyboard tap] [computer
noise] So, we talked about this
initially, but this diagram

00:13:53.933-->00:13:59.472
kinda gives you a little bit
more context as to what happens.
You've got your main of your

00:13:59.472-->00:14:03.676
final binary, and when that gets
run you have all of these
engines which are all in their

00:14:03.676-->00:14:08.548
own isolated namespace. Uh,
essentially get created, they
initialise the Javascript

00:14:08.548-->00:14:13.319
virtual machine within them.
They inject the scripts - all
the assets and any libraries

00:14:13.319-->00:14:17.724
native Go libraries that you've
called into it and then it calls
that deploy function - that

00:14:17.724-->00:14:23.563
entry point, if you will, on
each of those. And that happens,
uh, pending any order of

00:14:23.563-->00:14:29.035
operations with your macros that
happens all concurrently. So,
what does Gscript really let you

00:14:29.035-->00:14:34.540
do? It lets you focus on what
your stager is going, not how am
I gonna implement this for OSX

00:14:34.540-->00:14:39.545
even though I don't really know
OSX, or Windows, or Linux. So,
this has been a process for us,

00:14:42.348-->00:14:48.020
right? I'm not a computer
science, you know, master
student who studied the deep

00:14:48.020-->00:14:52.825
internals of, of how software's
made. Uh, I would like to say I
was but I definitely wasn't. I

00:14:52.825-->00:14:57.530
started taking operating systems
class in college and I was way
over my head. So, this has been

00:14:57.530-->00:15:01.601
a learning experience for me,
uhm, and this is sort of some of
the technology that I've, I've

00:15:01.601-->00:15:07.940
figured out and implemented here
within Gscript. So, when you go
to do a compile, what happens?

00:15:07.940-->00:15:11.778
Straightforward, the first thing
that happens is it looks through
all you scripts and gets a,

00:15:11.778-->00:15:16.182
essentially a mapping of all the
macros that you've defined. The
next thing it's gonna do, is

00:15:16.182-->00:15:22.455
it's going to walk the abs-,
abstract syntax tree of your
Javascript, notating this like

00:15:22.455-->00:15:27.193
"Oh, you imported a Go library
with this macro and then you
called it down here". And

00:15:27.193-->00:15:31.898
registers things like how many
arguments are you calling with
it? What, what, what might the

00:15:31.898-->00:15:36.002
type be? What can I infer the
type might be of that argument?
It then goes through all the go

00:15:36.002-->00:15:41.073
packages that you've included in
that as well and does the same
thing - walks all the AST there,

00:15:41.073-->00:15:44.410
looking for places where
functions are defined that
you've called from your

00:15:44.410-->00:15:50.283
Javascript. Next, it's gonna
start marrying those together.
It's gonna essentially create

00:15:50.283-->00:15:54.921
foreign function interface
wrappers - in go, on the fly,
for all of the functions that

00:15:54.921-->00:15:59.458
you've called in Javascript that
are instrumented in native Go.
So that your, and then inject

00:15:59.458-->00:16:04.530
those into the VM that were
bundling itself together. Uhm,
that's a, probably another 3

00:16:04.530-->00:16:10.469
talks worth of material to get
into but if you'd like to, it's
definitely on GitHub, you can go

00:16:10.469-->00:16:16.409
check it out. Uhm, after that we
embed all of the assets, we
encrypt them. Each VM has its

00:16:16.409-->00:16:21.681
own, uhm, encryption key that
all the assets get embedded with
and the em-, the assets

00:16:21.681-->00:16:26.118
themselves don't actually get
decrypted until you call them
within your script. So, until

00:16:26.118-->00:16:31.757
you retrieve the asset, the
asset is, isn't sitting in
memory unencrypted. And in the

00:16:31.757-->00:16:37.196
final step, optional but we do
enjoy it, is the obfuscation
step. So, we do the obfuscation

00:16:37.196-->00:16:43.269
both before and after native
compilation. Uhm, and we've got
some interesting stuff, we'll

00:16:43.269-->00:16:48.007
kinda cover as to how that works
there. So, creating these
standalone executables, right?

00:16:48.007-->00:16:53.813
How, how do we go about doing
that? Well, I said we leverage
the Go compiler to do that. Now,

00:16:53.813-->00:16:58.050
what's interesting about this
is, if you can kind of see up
here. [bckground noise] On the

00:16:58.050-->00:17:04.323
picture. We take your scripts
and payload and we actually
write out an entire Go program

00:17:04.323-->00:17:09.195
that contains the logic and
everything needed that we just
covered in, into this Go

00:17:09.195-->00:17:13.065
program. Now, there's flags in
our compiler, you can go look at
that code and see what that

00:17:13.065-->00:17:18.638
looks like - it's incredibly
unreadable. We needed to make it
that way for, uh, security,

00:17:18.638-->00:17:24.810
right? Uhm, but, it, it's been a
really interesting thing to
consider that, you know, we're

00:17:24.810-->00:17:30.016
in a place in time where it's no
longer enough to write malware.
You have to write code that

00:17:30.016-->00:17:34.287
writes code that writes your,
that writes your malware, right?
Uhm, so we've talked about this

00:17:34.287-->00:17:39.058
before too and now I'm gonna
dive into this. Linking
Javascript to native Go. Uh, I,

00:17:39.058-->00:17:43.930
I was called crazy a couple
times in the process of this.
This was definitely one of

00:17:43.930-->00:17:48.834
those, uh and I still think it
might be crazy, it's probably
not the safest thing you can be

00:17:48.834-->00:17:52.605
doing in the world. [coughing]
But, it, it is crazy. [whoop]
See? It is crazy, thank you.

00:17:52.605-->00:17:58.811
[chuckle] It, it, it's an
interesting thing, right? There,
you've got two languages on

00:17:58.811-->00:18:03.349
completely opposite ends of the
spectrum in terms of how they
work and figuring out a way for

00:18:03.349-->00:18:09.055
a user to almost not know the
difference between them is a
fascinating endeavor for me, uh,

00:18:09.055-->00:18:12.658
and Dan. For us to kind of
implement this and somebody in
the back who shall remain

00:18:12.658-->00:18:18.564
nameless. Uhm, so here I've got
a little example, right? So, we
use the Go import macro, the

00:18:18.564-->00:18:24.403
compiler macro we talked about.
We're gonna import "redis",
we're gonna import redis because

00:18:24.403-->00:18:29.375
as far as I know, other than OJS
there's really just not an easy
redis library for, for

00:18:29.375-->00:18:33.245
Javascript. There certainly
isn't one for Gscript, you can't
import an OJS modules into this.

00:18:33.245-->00:18:37.383
So, how are we gonna, how are we
gonna interact with redis and
Gscript? Well, we're gonna

00:18:37.383-->00:18:44.123
import the Go, the Go package
for redis. So, we import that
and from there you import it as

00:18:44.123-->00:18:49.695
you see there, as redis. That
"es" - blank, blank is equal to
the namespace within the

00:18:49.695-->00:18:55.101
Javascript program that you're
defining here in your Gscript.
So, on the next 1, I called the

00:18:55.101-->00:19:00.473
functions directly. So, "redis
dot parse url" is actually a
exported function within in

00:19:00.473-->00:19:05.478
that, within that Go package and
I can call it just like I would
in Go. It, now, 1 thing to note

00:19:07.980-->00:19:12.985
there's no multiple assignment
in Javascript. This, we're in a,
ES5 not ES6, so, in this version

00:19:15.921-->00:19:21.961
there's no, there's no multiple
assignments. So, if you look on
line 5 you'll see "R zero", R

00:19:21.961-->00:19:27.900
zero is because in our linker
that we, we do. When we see that
you're calling a go function

00:19:27.900-->00:19:32.571
that's returning multiple
assignment, we actually make a
dynamic array of that and give

00:19:32.571-->00:19:37.676
you back the return of that
inside a single, a single object
that is an array of various

00:19:37.676-->00:19:43.382
types. So, R zero in that is
going to be actually the redis
client, uh, the redis connection

00:19:43.382-->00:19:49.488
url. So, line 5 we create a
redis client. In line 6 we
simply interact with it as we

00:19:49.488-->00:19:54.627
would any, any Go program,
right? And then down there you
look at the script we compiled

00:19:54.627-->00:20:01.200
it normally, and ran it and
BOOM. Got the, was able to
interact with redis right from

00:20:01.200-->00:20:06.205
Gscript using this native
bridge. So, it, I wouldn't give
you something incredibly, uh,

00:20:09.108-->00:20:13.479
com-, incredibly unsafe without
some way to at least play around
with it and see how it worked

00:20:13.479-->00:20:18.684
and test your stuff, right? So,
we, we spent a lot of time on an
interactive debugger, uh, it's

00:20:18.684-->00:20:22.388
pretty nice and easy to use. So,
at any time after you've
installed Gscript, you can

00:20:22.388-->00:20:28.327
simply do Gscript shell and it
will drop you into uh, a ripple
right there. The ripple has the

00:20:28.327-->00:20:32.932
entire standard library which
we'll get into, bundled into it,
uh, and you can do kind of, some

00:20:32.932-->00:20:37.536
various things. So, for example,
we talked about macros, how are
you gonna macro into the shell?

00:20:37.536-->00:20:42.575
When it's something that the
compiler knows? Well, in Gscript
shell you can just pass the dash

00:20:42.575-->00:20:47.146
into it. With macros you can
pass multiple, as many as you'd
like, into it. And then when it

00:20:47.146-->00:20:53.319
drops into that shell it's as if
you've dropped into the deploy
function, uh, with that, that VM

00:20:53.319-->00:20:59.725
instrument. Other things you can
do - you cans step through you
code. So, in this you can see

00:20:59.725-->00:21:04.096
that I'm, I'm essentially doing
the exact same thing that we
were in the demonstration of the

00:21:04.096-->00:21:08.167
native linking. Except, now I've
got some functions that as I'm
stepping through, help me

00:21:08.167-->00:21:13.005
understand a little bit more of
what's going on. So, the
function "type of" that you can

00:21:13.005-->00:21:17.710
see is the, uh, the third
function I'm calling there, it's
actually showing me that under

00:21:17.710-->00:21:22.715
the hood in Javascript this is
actually a pointer to a redis
client object in Go's namespace.

00:21:25.184-->00:21:30.856
That's a, that's a pretty nice
thing to have to be able to use
here as well. Also, any time

00:21:30.856-->00:21:35.995
you're in a script, if you want
to compile your, a binary for
yourself but then be able to

00:21:35.995-->00:21:40.733
drop into a debugger, we have a
compiler flag - "enable
debugging" and you can just use

00:21:40.733-->00:21:44.870
the function "debug console"
just like you would debugger in
Chrome, or anything like that.

00:21:44.870-->00:21:48.741
And when you run your binary it
will drop you into the same
console right where you're at in

00:21:48.741-->00:21:53.679
the context of your script.
Outside of that, like I've
mentioned before, "type of", we

00:21:53.679-->00:21:56.415
have a bunch of specialty
functions that are only
available from within the

00:21:56.415-->00:22:01.387
debugger. Uhm, that's been
something we've expanded on in
the last, last several weeks to

00:22:01.387-->00:22:07.493
try and make the native, native
linking a lot more easy for
people to do. Uhm, another 1 is

00:22:07.493-->00:22:11.530
symbol tables, so, you can call
the "symbol table" function in
the interactive debugger and

00:22:11.530-->00:22:15.801
that's actually gonna go through
and show you all the functions
within Go's namespace that

00:22:15.801-->00:22:20.272
you've imported in there. Our
standard library is actually
instrumented in Go, you don't

00:22:20.272-->00:22:23.576
have to import it as a Go
module, the compiler's smart
enough to know "Oh, you're

00:22:23.576-->00:22:28.747
calling a standard library
function, I need to link against
that". So, we talked about how

00:22:28.747-->00:22:33.619
cool it is, there are some
limitations and we'll just get
these out of the way real quick.

00:22:33.619-->00:22:39.658
First thing, no freeBSD support
- I know some of you neckbeards
in the crowd, I'm looking front

00:22:39.658-->00:22:45.931
row here, are gonna be real
upset about that. [chuckle] But,
I don't think that it's

00:22:45.931-->00:22:50.769
impossible, it's just something
where it was on a medium
priority list for use to go and

00:22:50.769-->00:22:56.609
get done. I think as Go becomes
more freeBSD-compliant and
things like its OS and userlib,

00:22:56.609-->00:23:00.579
uh, we'll be able to extend
support to this as well. One of
the other limitations that kind

00:23:00.579-->00:23:05.217
of, people I've seen have, have
issues with is these are large
binaries. If you've ever worked

00:23:05.217-->00:23:11.056
with Go before, you know that Go
binaries are never known to be
the smallest, tiniest payloads

00:23:11.056-->00:23:15.461
in the world. Uh, another
limitation is the regular
expressions. If you're gonna do

00:23:15.461-->00:23:20.532
any regular expressions in
Javascript, uh, they need to be
essentially compliant with the

00:23:20.532-->00:23:26.138
RA2 library that's, that Go
uses. So, things like, uh, look
aheads and stuff like that

00:23:26.138-->00:23:29.541
you're not gonna have
compatibility in that. So, you
gotta be careful, you can't use

00:23:29.541-->00:23:34.179
crazy complex regular
expressions in it. Uh, 1 other,
another thing that's been kinda

00:23:34.179-->00:23:39.318
difficult for us has been
versioning. Go's versioning
story's not been, uh, the

00:23:39.318-->00:23:44.156
greatest part of the language as
it's evolved over the years. And
that made it hard for us to do

00:23:44.156-->00:23:49.428
things like lock you into a
specific version of it. So, uh,
as Dan and I have done this, Dan

00:23:49.428-->00:23:52.564
will go write a bunch of
Gscripts and then I'll come
around and I'll make a compiler

00:23:52.564-->00:23:55.868
change that will break all his
scripts. And then he'll be like
why can't I still with, stick

00:23:55.868-->00:23:59.872
with the old version? Well, a
lot of that has been tied to
this, this Go versioning

00:23:59.872-->00:24:06.812
problem. In the future Go is
releasing in 1 dot 11, their new
Go mod support. Uh, I think in

00:24:06.812-->00:24:11.317
the next, next major version of
Gscript will actually release
with an ability, ability to lock

00:24:11.317-->00:24:16.555
your, your engines to a specific
version of Gscript and be able
to have backwards compatibility.

00:24:16.555-->00:24:22.394
As we've said before, ES5 is the
only thing we support right now,
working on ES6 support, uhm,

00:24:22.394-->00:24:26.832
there's complicated reasons why
that's difficult for us, but
something we'd like to do as

00:24:26.832-->00:24:29.535
we've talked to people that
write a lot of Javascript, they
seem to think that would have

00:24:29.535-->00:24:34.073
been a really nice feature for
us. So, we're working on that.
Also, something that we don't

00:24:34.073-->00:24:38.877
have is a lot of the Javascript
concurrency perimeters that you
guys might be used to. Uh, just

00:24:38.877-->00:24:43.749
like in ES6 you have async, we
don't have that stuff right now
because our virtual machine is

00:24:43.749-->00:24:48.387
actually instrumented in native
Go. Uh, we have to do all of
this concurrency actually

00:24:48.387-->00:24:53.659
outside of that virtual
machine's namespace. But, as
I've mentioned before, we have

00:24:53.659-->00:24:57.996
the standard library, you don't
need to be a Go programmer to,
to know how to use this on a

00:24:57.996-->00:25:04.737
basic level. We've got libraries
that cover almost every type of
basic OS functionality you'll

00:25:04.737-->00:25:09.308
need. They're entirely cross
platform, they're supported by
us, if there's ever a bug in 1

00:25:09.308-->00:25:13.645
of these that you find, please
file it against us, we will fix
it immediately. Uh, it is

00:25:13.645-->00:25:19.451
exactly the type of stuff where,
uh, as we sat down and used
Gscript in, in, you know, in our

00:25:19.451-->00:25:25.958
jobs and at CCDC, we were able
to say "Oh, there's some parts
of Go that are just complicated

00:25:25.958-->00:25:29.862
and maybe not straight forward
for, for the normal person, so
let's just go, kind of, wrap

00:25:29.862-->00:25:36.201
that basic functionality in, in
our standard library and present
that to users for ease. So, with

00:25:36.201-->00:25:40.139
that, I'm gonna had it back to
Dan, Dan's gonna talk about some
of the ways that we've used this

00:25:40.139-->00:25:44.843
in the real world and why this
has been really powerful for us.
[background noise] [clicking

00:25:44.843-->00:25:50.516
noise] >> So, like Alex was
saying, one of the number one
reasons we use it is we

00:25:50.516-->00:25:56.555
encounter a wide array of
systems. Uh, Windows, Linux and
Mac and we didn't want to keep

00:25:56.555-->00:25:59.958
rewriting our techniques, uh,
for these different operating
systems. It was really kind of a

00:25:59.958-->00:26:04.229
pain, so we really liked the
cross-platform features of it.
Uh, you can actually write

00:26:04.229-->00:26:08.667
Gscripts completely system,
like, like you can write them
completely cross platform with

00:26:08.667-->00:26:13.539
the binary that itself will
determine which operating system
it's on, uh, using Go. And then

00:26:13.539-->00:26:19.378
execute according to that.
Obviously you have to compile it
to a specific architecture, so,

00:26:19.378-->00:26:22.581
at the compilation time there's
always that. And when you're
embedding assets, you still need

00:26:22.581-->00:26:26.852
to embed assets that can run on
that specific architecture. But,
the platform itself is cross

00:26:26.852-->00:26:31.690
platform is cross platform, so I
love that. It's also really easy
to use, originally we were

00:26:31.690-->00:26:35.894
considering like having people
write the Golang for that
original Genesis dropper and

00:26:35.894-->00:26:41.667
then use that to, uh, embed
their stuff. And it was a really
hard, uhm, kinda ask for people

00:26:41.667-->00:26:45.904
to learn Golang. So, instead we
decided to roll this out because
now all they had to do was learn

00:26:45.904-->00:26:50.709
Javascript. And Javascript is
really forgiving, unlike Golang
where it's really opinionated

00:26:50.709-->00:26:53.812
and you have to, like, handle
all your errors. So, we think
the barrier to entry with

00:26:53.812-->00:26:59.785
Javascript is a lot lower than
Golang. Another neat feature of
that is when, uhm, we added the

00:26:59.785-->00:27:04.690
Go-lang native linking, now it's
also, like, a good like gateway
to learn Golang, right? You can

00:27:04.690-->00:27:08.627
start with Javascript, you can
play around in the debugger and
eventually you can just start

00:27:08.627-->00:27:13.565
writing your own Golang native
libs and then call them from
Gscript, which is pretty cool.

00:27:13.565-->00:27:18.937
Uh, just like I was saying where
you can call any Golang native
library, like off of GitHub,

00:27:18.937-->00:27:23.342
which is really freakin sweet,
you can also wrap your existing
tools so you don't really have

00:27:23.342-->00:27:27.846
to change any of your existing
tactics or any of your existing
methodology. You can just

00:27:27.846-->00:27:32.784
instrument them now with
Gscript, uhm, which leads me to
my next point, which is this is

00:27:32.784-->00:27:37.456
now, like, persistence and
techniques as code. It is very
audible, we can give somebody

00:27:37.456-->00:27:42.261
this script and say this is
exactly what it is going to do
when it hits disk. Uhm, which is

00:27:42.261-->00:27:47.566
really nice because, as you'll
see, we-. [coughing] We've been
building a community around

00:27:47.566-->00:27:51.703
documenting, uh, all of these,
uh, different Gscripts, or, I'm
sorry, documenting MITRE ATT&CK

00:27:51.703-->00:27:55.841
techniques in Gscript. So now,
if you're familiar with MITRE
ATT&CK - we have these small

00:27:55.841-->00:28:00.979
little atomic techniques. We've
been writing Gscripts such that
you can compile, uh, native

00:28:00.979-->00:28:05.250
unsigned binaries with these
techniques. It's kind of neat
because this way you can see

00:28:05.250-->00:28:10.322
"Can I detect an unsigned binary
doing this? Uh, from a blue team
perspective - as opposed to,

00:28:10.322-->00:28:14.092
like, a script doing this which
might be easier or harder
depending on you

00:28:14.092-->00:28:19.631
instrumentation. Uh, so, like I
was saying, we've been writing a
ton of Gscripts and we've been

00:28:19.631-->00:28:24.903
writing them to the MITRE ATT&CK
framework. Uhm, I tried to make
them as atomic as possible, so I

00:28:24.903-->00:28:28.640
tried to keep the techniques as,
as small as I can because you
can compile any number of

00:28:28.640-->00:28:34.646
Gscripts into a single binary.
Uhm, so, the idea is you have a
bunch of little techniques that

00:28:34.646-->00:28:40.018
all play well together. Uh, and
again, we really want people to
contribute stuff. We, we want to

00:28:40.018-->00:28:44.790
continue to, uh, catalogue that
minor attack framework such that
we can compile it to these

00:28:44.790-->00:28:51.396
native binaries. So, again, this
tool was really built with a
community in mind. This tool was

00:28:51.396-->00:28:57.035
built with multiple red teamers
contributing payloads to build a
single binary. It's really

00:28:57.035-->00:29:02.541
collaborative pers-, like,
collaborative post-exploitation,
uhm, is the idea. We want

00:29:02.541-->00:29:09.348
everybody to contribute a
Gscript and an implant, and
we're gonna run them all on the

00:29:09.348-->00:29:13.552
victim, cause, we're a team.
[laughter] [applause] So, here's
a, a quick little example just

00:29:13.552-->00:29:19.625
showing some stuff. Uhm, up here
we have a, a Go import of a
native package which is OS. Uh

00:29:19.625-->00:29:25.063
we're gonna use this to create a
temp directory later, but, we
also import a special library,

00:29:25.063-->00:29:29.468
we call, we may have called the
"x library". Uh, we had a lot of
help with the, uh, the unnamed

00:29:29.468-->00:29:34.706
person in the back. And this is
an amazing library because these
are the functions that yes,

00:29:34.706-->00:29:39.544
they're platform specific but we
would remiss to leave them out,
right? This is Windows registry

00:29:39.544-->00:29:43.582
editing; this is process
injection; this is kind of that
fancy stuff that is platform

00:29:43.582-->00:29:47.853
specific. Uh, and again, we move
that into the x library because
the core of Gscript is supposed

00:29:47.853-->00:29:52.958
to be cross platform. And then,
below that, uh, we're embedding
this" croissant dot x e", this

00:29:52.958-->00:29:58.730
is any arbitrary executable - in
our case it pops a croissant
because croissants rock.

00:29:58.730-->00:30:03.902
[background noise] We croissant!
Okay... [chuckle] So, first
thing we're doing, in this first

00:30:03.902-->00:30:09.408
block, this is just prepping the
asset. This is just saying "We
have an embedded asset, uh, from

00:30:09.408-->00:30:13.412
compile time". And we're just
gonna create this random temp
directory string and that's

00:30:13.412-->00:30:18.083
where we're gonna write this
asset, uh, access, at execution.
Here we're actually using the

00:30:18.083-->00:30:23.088
standard library, just to write
that file to a path, uhm, we're
dropping a file, so this is like

00:30:23.088-->00:30:29.594
a great detection, uh, exercise.
And then, here is a, an, a
run-once key and we're just

00:30:29.594-->00:30:34.599
adding this to show this
persistence method. So, the idea
here is, we're creating

00:30:34.599-->00:30:40.238
persistence as code and we're
abstracting the implant from it,
right? So, now you have this

00:30:40.238-->00:30:45.010
arbitrary, now you have this
arbitrary persistence technique
and you can just persist any old

00:30:45.010-->00:30:49.247
implant. And it's great for
detection ops because do we
detect persistence technique?

00:30:49.247-->00:30:56.254
Uhm, it's also really cool for
hunting ops, one thing that I
really like, uh, is this idea of

00:30:56.254-->00:31:00.625
compiling a Gscript with
multiple techniques in it, like
a technique A and a technique B

00:31:00.625-->00:31:04.429
and we can run this. And then
later a blue team can find this,
they can dissect this and they

00:31:04.429-->00:31:07.833
can understand the techniques in
it. Then they can hunt on those
techniques. Let's say they had

00:31:07.833-->00:31:12.704
a, an alert for technique A,
they reverse it and they learn
about technique B, then they can

00:31:12.704-->00:31:17.008
hunt their data for technique B.
Then we can play these games
where we also compile a binary

00:31:17.008-->00:31:21.413
with technique B and technique
C, and do they find that, right?
Something that they may not have

00:31:21.413-->00:31:26.118
the alert for. So, it's kind of
cool for these, like advanced
hunter operations, uh, if you

00:31:26.118-->00:31:31.556
can get there in your
organisation. Uh, so kinda just
like, why do we really love

00:31:31.556-->00:31:36.094
this? Like if I could give you,
like, 1 line, uhm, any number of
techniques, we keep the

00:31:36.094-->00:31:40.532
techniques really small and
auditable; we wrap our existing
tools. So, nothing really

00:31:40.532-->00:31:45.170
changes. We still use our C2s,
we still use all of our
favourite tools on disk, or in

00:31:45.170-->00:31:49.741
memory. Uhm, but we can
co-define the techniques of how
we're instrumenting them and

00:31:49.741-->00:31:54.746
then run them with a single
click. So, like, what's not to
love? So, uh, this always works,

00:31:58.083-->00:32:04.156
right? [laughter] One really
cool part about CCDC, uhm, Dave
Cohen is like the grandmaster

00:32:04.156-->00:32:08.927
and he has this great strategic
vision and at the end of day 2,
at some point, he really like,

00:32:08.927-->00:32:13.064
he unleashes the hounds. He
kinda like, let's us go, right?
And we get to burn things down,

00:32:13.064-->00:32:18.370
uhm, so like, taking down
services, is, is pretty
straightforward, right? Like,

00:32:18.370-->00:32:22.440
"service whatever stop" pretty
basic and boring. So, you wanna
get creative with it and you

00:32:22.440-->00:32:27.379
wanna have some fun. Uhm, so, so
one thing we, we like to do is
a, make these troll payloads, or

00:32:27.379-->00:32:34.219
"trollware" if you will. So,
here we've bundled a, a ton of
different trollware, and we're

00:32:34.219-->00:32:39.424
just executing it on a Windows
machine. The idea here is you
just see, uhm, how much stuff

00:32:39.424-->00:32:43.862
can happen at once, and what you
can really do with it. It's a
little overwhelming when it will

00:32:43.862-->00:32:48.867
execute. Uh, and then it blue
screens the box. [pfff] But,
it's cool. So, I'm just stepping

00:32:52.971-->00:32:56.541
into the directory where it is,
I'm just making the screen
bigger so you can kind of see

00:32:56.541-->00:33:01.847
stuff as it happens. But once we
execute this, the whole machine
just goes to, you know, goes to

00:33:01.847-->00:33:06.852
hell. So, this is gonna run
multiple payloads, this runs,
uh, the MEMS, which was made by

00:33:13.725-->00:33:18.396
Leoric, popularised by, uh, Dan
Kahoot. [laughter] Uh, we had a
good friend like, uh, reverse

00:33:18.396-->00:33:25.237
like a bunch of malware on the
internet. [background noise] And
we, we, uh, instrumented that.

00:33:25.237-->00:33:27.239
[applause] [background noise]
So. [applause] That's just some
of the trollware we like to

00:33:27.239-->00:33:32.244
throw around. [applause] >>
Whoo! Alright, 1 demo down, 1
more to go. [coughing] >> The

00:33:36.214-->00:33:40.085
next 1's live. >> Yea, the next
1 is actually live, that was
just a video, but we're gonna do

00:33:40.085-->00:33:45.090
this one live too. We had
another demo as well planned,
our IP in the back there.

00:33:47.559-->00:33:53.498
[chuckle] But, we'll, we'll save
that for, for next year, right?
So, I'm gonna boot up a, a

00:33:53.498-->00:33:58.503
virtual machine here called
"DefCon 26 demo". This is just a
standard OSX virtual machine,

00:34:02.140-->00:34:07.145
uh, I'll make it full screen in
a minute here. But, first thing
I wanna do is, is, I'm gonna,

00:34:09.314-->00:34:13.818
let's go through and make one of
these together right? So, I've
got my terminal up here, you

00:34:13.818-->00:34:18.823
guys can read that. I'll make a
little bit sm-, A little bit
bigger for you guys. Cool, so I

00:34:21.126-->00:34:27.599
got my terminal, I'm gonna do an
LS, I've got in here. I'm just
go ahead and remove my test 1,

00:34:27.599-->00:34:32.604
so we can actually do it live.
In it I've got a, uh, a folder
with a bunch of Gscripts, right?

00:34:35.807-->00:34:39.945
This is all just Mac resistance
technique, doing things like
disabling the firewall and

00:34:39.945-->00:34:45.784
enabling guest, and, and doing
some ssh key persistence, right?
And all of these [mouse click

00:34:45.784-->00:34:51.189
noise] I'll show you 1, uh, like
a service installer it goes
through and uses a library that

00:34:51.189-->00:34:56.027
we wrote called, uh, "x
service". So this is an
experimental library, but it is

00:34:56.027-->00:35:00.198
actually a cross-platform
service installer. So, it
doesn't matter if there's a v-,

00:35:00.198-->00:35:05.670
excuse me, if there "sys v" or
"net" or "system v", or if it's
a Windows box. You can very

00:35:05.670-->00:35:10.942
easily in one unified library
install a system service which
is always fun and we love to do

00:35:10.942-->00:35:15.380
that when we're readteaming. So,
I've got all these scripts, I'm
just gonna go through and make

00:35:15.380-->00:35:20.385
one now, live, here with you.
So, I'm gonna do "Gscript
compile dash dash output file

00:35:23.221-->00:35:28.226
users" [[keyboard tapping] "Demo
OSX live dot bin". And then I'm
going to say "Gscripts start dot

00:35:33.698-->00:35:40.605
g s". [keyboard tapping] And
we're gonna run this, it's going
to take a minute but relatively

00:35:40.605-->00:35:45.543
fast for considering what it's
doing. Uhm, most of the time its
spending right now on the this,

00:35:45.543-->00:35:49.781
it's spent actually embedding
and encrypting all of the
payloads that we're putting into

00:35:49.781-->00:35:54.786
this, into the binary itself.
So, I think this takes about 20,
30 seconds right now. Uh, but as

00:35:57.789-->00:36:01.726
you see here it does tell you
all of the scripts that it's,
it's essentially bundling in to

00:36:01.726-->00:36:06.698
this executable. It lets you see
some information that we're
doing this for Darwin. Here's

00:36:06.698-->00:36:11.269
the output file and some of
those compiler flags which I
talked about before. So, being

00:36:11.269-->00:36:15.640
able to keep the build directory
which will show you the source
code that was used to make this.

00:36:15.640-->00:36:20.412
Enabling UPX compression
disabled by default, uhm, uh, a
lot of different options we'll

00:36:20.412-->00:36:25.417
give you and BOOM. Scroll down,
it's done. I'm gonna look in
there. [keyboard tap] It is a 26

00:36:27.752-->00:36:30.522
megabyte binary, what payloads
are you putting in here? L**d...
uh, thank G*d that's local and

00:36:30.522-->00:36:32.524
we have internet, cool. I'm
going to, while I'm here, ssh
into our Merlin server. TMUX uh

00:36:32.524-->00:36:34.526
[keyboard tap] There we go.
[coughing] We've got some old,
dummy agents but it's fine,

00:36:34.526-->00:36:40.732
they're not connected yet. Let's
go into our VM now and take the
executable that we just built -

00:36:40.732-->00:36:45.737
OSX live, copy it over. There we
go! I don't have logging
enabled, I didn't enable any of

00:36:53.978-->00:36:58.983
that, so let's go to OP silent.
So, we're gonna say "pseudo dot
slash desktop OSX live" enter.

00:37:22.974-->00:37:27.979
[keyboard tapping] And a bunch
of stuff is happening and then.
Enter my password, that's not

00:37:30.081-->00:37:35.186
phishing at all. [keyboard
tapping] [background noise]
BOOM! So, something happened, I

00:37:35.186-->00:37:39.624
don't really know what. If I
look back at my Merlin, I've now
recieved a new agent check in.

00:37:39.624-->00:37:44.629
Live demo, thank you.
[background noise] [applause]
And we'll just come in here and

00:37:49.200-->00:37:53.705
look and see some things. So,
file sharing, remote login,
remote management, all this

00:37:53.705-->00:37:57.709
stuff was turned on. So, all of
the attack techniques that we
just bundled into this were

00:37:57.709-->00:38:02.147
actually run on this machine,
right? So, if you're, if you're
a red teamer I think you can

00:38:02.147-->00:38:07.785
extrapolate it, why this is so
valuable, uh, tool to use in
your tool chain. If you're a

00:38:07.785-->00:38:13.925
blue teamer, if you work at a
company that has bunch of
detection systems, man! How many

00:38:13.925-->00:38:17.729
of you guys have always wanted
to know whether your vendor was
actually telling the truth that

00:38:17.729-->00:38:21.833
they detect this thing or not?
You can write the Gscript and I
promise you they're not gonna

00:38:21.833-->00:38:26.237
detect the binary, if they
detect the actual activity then
you can validate that. And

00:38:26.237-->00:38:31.242
that's really the fundamental
problem right now in the blue
team space is how do I trust

00:38:31.242-->00:38:35.213
that when a vendor sells me
something that says it does "x"
that I actually know that it can

00:38:35.213-->00:38:39.918
actually do that? What we're
trying to do here is provide
blue and red teams alike the

00:38:39.918-->00:38:46.124
ability to codify these
techniques in a way where basic
signature detection on, on a

00:38:46.124-->00:38:50.628
file is not gonna just cheat
the, the actual result of saying
"Yea, I detect when something

00:38:50.628-->00:38:54.699
does shell code injection."
Well, do you? Do you actually
detect that or do you just

00:38:54.699-->00:38:59.704
detect that a, a file has a
string in it that matches a
certain thing, right? Uhm, this

00:38:59.704-->00:39:06.177
is a type of, of evolution in
security that we're trying to
present to the world. So, I will

00:39:06.177-->00:39:11.182
come back to. Our talk here.
[keyboard tap] And, that's it.
Version 1 is live right now on

00:39:15.753-->00:39:20.024
GitHub, I have written some
documentations out, I've got
some shoutouts for some awesome

00:39:20.024-->00:39:24.729
people who helped us with this
on the site. As well as somebody
totally unnamed who didn't help

00:39:24.729-->00:39:29.767
at all with this project. And
he's not here. He, he didn't
help us, his name is not at the

00:39:29.767-->00:39:34.606
bottom of that list of authors
there, so. Uhm, and with that I
would like to open it up to you

00:39:34.606-->00:39:39.611
guys for questions, comments,
anything. Thank you! [applause]
Anybody? Questions? You can just

00:39:50.054-->00:39:55.059
raise your hand. Yes! Right
there. [off-mic question] Say
that, say that one more time.

00:40:05.370-->00:40:10.375
[off-mic question] You probably
could, uhm, I, I've not. It, so
the big problem with it has been

00:40:15.680-->00:40:19.017
the regular expression -
compatibility. So, the question
was "Could you run a normal

00:40:19.017-->00:40:24.022
Javascript application within,
uh, within Gscript?". Yes, as
long as it didn't break the

00:40:26.024-->00:40:30.228
regular expression or the
asynchronous compatibilities
right now. It should be fine.

00:40:30.228-->00:40:34.065
So, something like "underscore"
for example, does work within
it. You can, you can load an

00:40:34.065-->00:40:40.571
underscore library, uh, into
that and it would work just
fine. The, uh, the ES6

00:40:40.571-->00:40:45.009
compatibility is something where
I think if we can get that
actually implemented, uh, it'll

00:40:45.009-->00:40:50.815
give us a lot more flexibility
in being able to, in being able
to allow more current Javascript

00:40:50.815-->00:40:55.820
tools to be able to be brought
inside of it. Yes, right here.
[off-mic question] Kay. [off-mic

00:41:07.899-->00:41:10.802
question] Yes. [off-mic
question] No, no, everything is
-. So, the question was "Does

00:41:10.802-->00:41:15.306
the, the dropper fetch things
from the GitHub url?". It
doesn't, when you run Gscript

00:41:15.306-->00:41:21.112
compile it's contains everything
you need right then and there
into the binary. So, everything

00:41:21.112-->00:41:25.383
happens at compile time - all
the embedding does. There was
one thing we were kind of, on

00:41:25.383-->00:41:29.320
the fence about, of saying -
okay, should, should our
droppers reach out and get

00:41:29.320-->00:41:34.058
stuff? Or should we just really
try and pack them tightly and,
and safely, internally? >> One

00:41:34.058-->00:41:37.562
of the ideas there is when
you're in a high security
contexts solution, you may only

00:41:37.562-->00:41:41.766
have one or two ways out. So,
you wanna do things locally and
then use that existing C2

00:41:41.766-->00:41:46.137
channel, to, to shuttle stuff
over, right? So, we have a
request library and you can,

00:41:46.137-->00:41:52.543
like, pull stuff down, uhm, but,
personally I like to kind of do
stuff and go out of existing C2

00:41:52.543-->00:41:57.682
channels and just operate
through those channels. >> I
think we had a question over

00:41:57.682-->00:42:04.222
here. Yes. [inaudible] Hah.
[inaudible] Yea, so the, uh, the
encryption of the assets is, is

00:42:04.222-->00:42:09.227
just AES256, uhm, I'm not gonna
claim to be a crypto expert but
I try and just follow best

00:42:12.363-->00:42:17.668
practices on that. Uh, it is
isolated per VM and it's unique
every time you compile. So, it's

00:42:17.668-->00:42:24.575
not, it's not generated in any
sort of deterministic way. Now,
the obfuscation, glad you asked,

00:42:24.575-->00:42:30.848
uh, the obfuscation I would say
is implemented in a way that
ensures zero reproducibility of

00:42:30.848-->00:42:37.021
builts. So, if you're trying
reproduce a, an MD5 hash of 2
exact same inputs and outputs of

00:42:37.021-->00:42:42.260
a Gscript binary I doubt that
would actually ever happen. Uhm,
the obfuscator is meant to try

00:42:42.260-->00:42:48.533
and remove the ability to find
static strings within it. It's
meant to randomise things like

00:42:48.533-->00:42:53.137
function names and address space
within the binary itself. Uhm,
and then we also have a post

00:42:53.137-->00:42:59.410
obfuscator that is not turned on
by default but you can play with
it. It works really well on

00:42:59.410-->00:43:04.048
Windows and OSX, Windows, I mean
it works really well one Linux
and OSX. Windows - it kinda has

00:43:04.048-->00:43:06.050
some, uh, as some problems with.
Sometimes, uhm, it basically
after Go compiles your native

00:43:06.050-->00:43:08.052
binary, it just goes through and
starts patching stuff out of,
the, the like native executable.

00:43:08.052-->00:43:10.054
It's really dirty but it does
actually work, it does a great
job sometimes. Uhm, yea,

00:43:10.054-->00:43:14.392
sometimes. That's why we test,
right? Anybody else have a
question? We've got about 5

00:43:14.392-->00:43:19.397
minutes left. Maybe over here I
haven't. No? Come on. Everybody
just wants to go to sleep,

00:43:35.480-->00:43:40.351
right? Yea, we got a question in
the back there. [off-mic
question] What if you wanna

00:43:40.351-->00:43:46.491
write your own compiler? That's
a great question, uhm, so we've
implemented Gscript basically as

00:43:46.491-->00:43:50.595
an, everything you've seen here
that went from the obfuscator to
the compiler to the engine

00:43:50.595-->00:43:55.533
itself. It's all implemented
itself as a library. So, if you
wanted to implement your own

00:43:55.533-->00:44:00.171
compiler you could actually take
the engine library, figure out
how to translate whatever you

00:44:00.171-->00:44:04.742
want it as your input into a, an
engine itself. Bundle that
together in whatever way you

00:44:04.742-->00:44:09.914
want and then BOOM. You've got,
you've implemented essentially
your own Gscript compiler. Uhm,

00:44:09.914-->00:44:13.351
we've got some stuff on the
works if you're gonna be at our
workshop tomorrow. If you're

00:44:13.351-->00:44:17.555
gonna be at our workshop
tomorrow we'll touch on, on that
a little bit, of how, how we're

00:44:17.555-->00:44:24.161
actually looking at implementing
a C2 in Gscript so that the C2
itself can supply the binary

00:44:24.161-->00:44:28.699
with Gscripts at execution time.
So, there's not actually,
something's not bundled into it

00:44:28.699-->00:44:33.271
or it can say "Hey, switch up
the C2 channel, talk to me now
on this other channel". Uh,

00:44:33.271-->00:44:37.375
interesting stuff like that is,
I think, what you'd probably see
from us next year in another

00:44:37.375-->00:44:42.380
follow up talk. Yes, right here.
[off-mic question] Yea, so, we
don't have a Slack, uh, we

00:44:46.450-->00:44:50.888
probably should have a Slack,
that's probably a good idea.
Uhm, we, at this point it's just

00:44:50.888-->00:44:56.360
been on GitHub, we, uh, if you
send me a pull request, I, I
would love it. Uhm, we put a lot

00:44:56.360-->00:45:00.631
of effort into this, it's been
taking a, a lot of, uh,
engineering hours and we're

00:45:00.631-->00:45:04.569
excited to kind of share it with
the community. A lot of stuff we
do at CCDC we don't necessarily

00:45:04.569-->00:45:09.874
always release, so this has been
something where we're excited to
say "Look, here, it can, it can

00:45:09.874-->00:45:13.578
be good for the greater
community at large". >> We have
a few contributor guidelines too

00:45:13.578-->00:45:17.415
and then there are a lot of way
to get involved. Uh, you can
write Gscripts, you can help

00:45:17.415-->00:45:23.187
write different, uh, native
libraries, you can help add to
the compiler itself. And uhm,

00:45:23.187-->00:45:28.192
you can, you can just help with
the documentation, right? Like
anybody who really wants to get

00:45:32.863-->00:45:37.868
involved, we're really receptive
to people helping. >> It think
we're. Oh, 1 more? Yes. [off-mic

00:45:41.639-->00:45:46.911
question] Yes, so inside the
documentation, uhm, if you go to
this GitHub there will be a link

00:45:46.911-->00:45:53.417
to Dan's repo where he is
actually doing all of that MITRE
mapping in, in a separate repo.

00:45:53.417-->00:45:56.854
>> Uhm, I'm, I'm open to, uh,
suggestions. So, when you check
it out, if you think there's a

00:45:56.854-->00:46:01.125
better folder structure, right
now I was just doing it based on
platforms and then, uh, I had

00:46:01.125-->00:46:06.464
each of the techniques linked in
like the meta information at the
top. But if there's a better way

00:46:06.464-->00:46:11.469
to organise it, I'm all ears. >>
Cool. I think, two minutes left,
anything else? Anybody raise

00:46:15.606-->00:46:20.878
your hand you think you might
use this at some point? Cool.
Sweet. Awesome. Maybe we'll have

00:46:20.878-->00:46:25.883
a little Gscript Con sometime.
[laughter] >> Thanks guys.
[applause]

