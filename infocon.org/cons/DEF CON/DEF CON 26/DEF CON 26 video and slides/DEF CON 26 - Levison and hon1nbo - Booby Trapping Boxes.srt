00:00:00.567-->00:00:05.772
>> Alright, good morning. I say
good morning because I know by
this point in DefCon, we’re

00:00:05.772-->00:00:10.611
better off using the same time
zone as Tokyo. Which makes this
about 7 AM, so thank you for

00:00:10.611-->00:00:16.917
getting out of bed. The good
news is we have an interesting
topic ahead. We’ll get to spend

00:00:16.917-->00:00:21.922
the next hour talking about
boobies. Or more specifically,
strategies designed to protect

00:00:24.224-->00:00:29.329
an execution environment for
manipulation with a specific eye
towards ensuring cryptographic

00:00:29.329-->00:00:33.767
keys can’t be exfiltrated via
physical access. Try saying that
three times fast. >> Yay

00:00:33.767-->00:00:38.772
boobies! [Laughter] >> Ah man.
[Laughter] There we go. Yeah, I
uh tried to change a slide over

00:00:46.680-->00:00:53.253
here and uh Google was asking me
for a question. Uh your
presenters today are myself,

00:00:53.253-->00:00:58.258
Ladar Levison and.. >> I’m
Honibo. >> Honibo Tails. Um,
what we’re going to be talking

00:01:00.827-->00:01:06.800
about are essential skills for
life in the world of 1984 where
the maids can’t be trusted and

00:01:06.800-->00:01:12.005
your big brother is out to get
ya. Uh for my part, I’m the
operator of Lavabit, an

00:01:12.005-->00:01:17.044
encrypted email service, uh I’m
a technological warlock, a
corporate kingpin and some would

00:01:17.044-->00:01:22.316
say a team lychpit. My
assistant, Honibo, is the
proprietor of hacking and

00:01:22.316-->00:01:27.454
coffee. And he enjoys robbing
banks under the cover of
darkness. >> Assistant, come on

00:01:27.454-->00:01:31.591
man, I’m your web host at this
point, I’m a little more than
that. [Laughs] >> Let’s uh,

00:01:31.591-->00:01:36.596
let’s uh talk about security.
[Laughter] As an industry, I’ve
think we’ve come a long way.

00:01:39.967-->00:01:43.870
Speaking from myself, it’s been
a few years since I think I’ve
seen anybody try to log into

00:01:43.870-->00:01:48.875
their box via Telnet. One of the
key factors pushing that
security is encryption; and it’s

00:01:52.279-->00:01:58.719
proliferation. Encryption is
important because it provides a
mathematical guarantee that the

00:01:58.719-->00:02:03.657
data can’t be accessed without
the corresponding key. Of course
the problem is that as we’ve

00:02:06.460-->00:02:11.465
evolved, so have the attacks.
Unfortunately as good as we are
at architecting and building

00:02:13.800-->00:02:19.406
secure systems, we still need a
reliable and friendly
environment to run, run our bug

00:02:19.406-->00:02:24.411
free ultra secure code. With
encryption specifically, we’ve
seen a new breed of attacks,

00:02:29.883-->00:02:36.289
where all the security measures
we’ve put in place get simply
via physical access. Now there’s

00:02:36.289-->00:02:41.261
a picture of an Altair because
that was probably the last
computer you could look at and

00:02:41.261-->00:02:46.266
kind of understand how it worked
on the inside. Before we go any
further, we should talk about

00:02:50.404-->00:02:56.676
our assumptions. For our
purposes, we’re focused on
targeted physical attacks. Which

00:02:56.676-->00:03:02.716
means we’re making the
assumption there is no universal
backdoor in x86 hardware. As

00:03:02.716-->00:03:09.389
always as it comes to
asum-assumptions your mileage
may vary. Unfortunately we don’t

00:03:09.389-->00:03:15.962
have time to cover it today but
it makes sense that if your
threat model requires you to

00:03:15.962-->00:03:20.967
install boobietraps in your
hardware, you probably want to
dooder your IME as well. For

00:03:25.472-->00:03:29.509
those of you who have spent some
time in this building, what
we’re talking about will look

00:03:29.509-->00:03:34.514
familiar. Essentially we’re
talking about taking commodity
hardware and modifying it to

00:03:36.750-->00:03:43.390
afford you some of the security
guarantees provided by FIPS
Level 4. So we can run our

00:03:43.390-->00:03:49.863
common criteria EAL 4 plus
software in a secure
environment. Unlike the actual

00:03:49.863-->00:03:54.134
FIPS Level 4, our
recommendations don’t come with
certificates from the government

00:03:54.134-->00:03:59.139
though. If you aren’t familiar
with those standards, don’t
fret, it only means you haven’t

00:04:01.908-->00:04:08.448
spent much time working for the
man. For those folks, I’ll
summarize by saying, FIPS Level

00:04:08.448-->00:04:13.620
4 is what the state department
would use for a classified
information terminal they have

00:04:13.620-->00:04:19.226
located in the basement of the
American Embassy in [inaudible].
Some place interesting like

00:04:19.226-->00:04:24.231
that. If if, a machine can stay
secure in an environment like
that, [inaudible] that the same

00:04:26.666-->00:04:31.671
computer would be worthy of
being placed in a colocated
facility and be safe from legal,

00:04:33.974-->00:04:38.979
extra legal and illegal access,
probably. There are plenty of
commercial solutions available.

00:04:41.414-->00:04:47.254
And they’ll work great if you
don’t mind paying much for five
year old technology. Personally

00:04:47.254-->00:04:54.060
I have a problem trusting black
box crypto modules. Particularly
when the vendor’s largest

00:04:54.060-->00:04:57.998
customer happens to be the
government that you may be
trying to protect yourself from.

00:05:00.000-->00:05:04.938
There’s some notable open
projects. The most notable being
[inaudible] as in 1984. And for

00:05:07.574-->00:05:11.811
those of you looking for a
secure solution to place at
home, just to protect your

00:05:11.811-->00:05:17.584
manero private key, that might
be a good way to go.
Unfortunately running a service

00:05:17.584-->00:05:24.291
like Lavabit takes a few more
mps than a 6th gen mobile
processor can give you.

00:05:24.291-->00:05:29.229
Unfortunately they’re even if
it was enough, unfortunately
they’re rack solution leaves

00:05:29.229-->00:05:35.769
something to be desired. So I
decided to go with Commodity
hardware. And while I had my

00:05:35.769-->00:05:41.107
concerns about Dell, it’s easy
to find warehouses that let you
pay cash and carry away the

00:05:41.107-->00:05:46.112
equipment. It’s always good to
purchase your gear anonymously.
As a tip, if you have trouble

00:05:49.082-->00:05:54.087
finding a local vendor, try
searching Ebay for sellers
selling what you want in your

00:05:56.590-->00:06:02.295
local area. Odds are if they
have multiple listings, they’re
simply a vendor with a warehouse

00:06:02.295-->00:06:07.300
full of gear. More than happy to
sell it to you. Woah. Am I?
Okay. If you’re a high valued

00:06:14.674-->00:06:20.714
target, I’d certainly recommend
against ordering equipment
online and having it shipped.

00:06:20.714-->00:06:27.287
You never know what could happen
to it in route. In case you
didn’t catch the subtext in this

00:06:27.287-->00:06:33.260
note, Apple even has problems
with their servers being
intercepted and modified during

00:06:33.260-->00:06:38.265
shipping. If the largest company
in the world can’t do it what
chance do we have? Interesting

00:06:40.333-->00:06:46.740
factoid. If you look at the FCC
filings for Intel, that three of
their biggest customers for

00:06:46.740-->00:06:51.745
custom x86 chips are the NSA,
Google and Facebook. Makes you
wonder what customizations

00:06:54.147-->00:06:58.852
they’re having done to their
particular chips. If there’s any
FOIA fans in the audience, they

00:06:58.852-->00:07:03.790
may want to go after those
details. Be sure to pick a
commodity hardware vendure with

00:07:06.626-->00:07:12.866
a ro, robust and competent
security team. [Inaudible] So
you can probably meet a big

00:07:12.866-->00:07:17.637
portion of their security team
here and you can make your own
judgements about whether or not

00:07:17.637-->00:07:22.642
they’re competent. You also
wanna look for one that’s gonna
uh use signed firmware updates,

00:07:25.278-->00:07:29.983
and will be continue to publish
firmware updates for some time
after you’ve purchased the

00:07:29.983-->00:07:34.988
hardware. Unfortunately when it
comes to commodity hardware,
most servers do ship with tamper

00:07:37.791-->00:07:44.664
detection circuits but they tend
to be rudimentary and thus easy
to bypass. It doesn’t help that

00:07:44.664-->00:07:49.803
their location is known in
advance. That’s one of the
benefits to the do it yourself

00:07:49.803-->00:07:54.808
approach. You can randomize the
location, even add a reverse
switch. To demonstrate just how

00:07:57.444-->00:08:02.682
easy it is to bypass these
tamper detection circuits,
Honibo’s gonna dem, demonstrate

00:08:02.682-->00:08:08.021
on this R7 10. So we need some
volunteers in the audience who
can see the front LED and tell

00:08:08.021-->00:08:13.026
us if he manages to trip the
circuit. The trick in the top of
the case, is to take the shim

00:08:19.366-->00:08:24.371
and go through the regulatory
label hole in the top of the
case, find the tamper circuit,

00:08:28.441-->00:08:33.446
depress it. They said it would
be fast. >> We may have had a
malfunction earlier. >>

00:08:46.326-->00:08:48.328
[Inaudible comment from
audience] [Laughter] >> You know
that always helps, who’s got

00:08:48.328-->00:08:52.799
something? >> Hey, you try
getting up in front of a 1-->000
people at 7 in the morning and

00:08:52.799-->00:08:57.804
doing this. >> Here. Yeah I did.
>> Once you have the tamper
circuit depressed, you can lift

00:09:06.279-->00:09:11.284
the top cover. >> How’s that?
Safe? Did it pop off? >> And
remove the case. Remove the lid.

00:09:28.768-->00:09:35.041
Giving you access to all sorts
of different ways of attacking
the system. Most notably being

00:09:35.041-->00:09:40.046
those exposed JTag ports. >>
Yeah you can take it off now. >>
Moving on. If you think about

00:09:45.885-->00:09:50.523
security as being an absolute.
Where something is either secure
or it isn't. Then you’re going

00:09:50.523-->00:09:56.329
about it all wrong. I like to
think about security in the same
way physical safe manufacturers

00:09:56.329-->00:10:01.334
do. The first and most important
job of a safe is to de, defend
against spoofed access. If you

00:10:05.004-->00:10:11.010
could break into the safe
without leaving a trail, like by
using this particular dialing

00:10:11.010-->00:10:17.484
[inaudible] that was
demonstrated last year. The safe
has failed. So our first mission

00:10:17.484-->00:10:22.489
in modifying our servers, was to
ensure that nobody could access
them without us knowing. The

00:10:25.458-->00:10:31.431
second consideration is the
degree of difficulty that, that
an attacker would need in order

00:10:31.431-->00:10:36.669
to brute force their way pass
the locks. Presumably, with a
physical safe, it’s a blow

00:10:36.669-->00:10:43.443
torch. With our approach it’s
the same thing. And the goal is
that the amount of force and

00:10:43.443-->00:10:49.182
heat required to remove our
modifications efficient to
destroy the machine. Thus

00:10:49.182-->00:10:54.187
accomplishing our goal. To
continue, we’re going to turn
the mic over to Honibo who’s

00:10:56.923-->00:11:01.861
going to talk about how we made
those modifications. >> So the
first thing to know about all of

00:11:09.369-->00:11:16.176
these Dell systems is, there’s a
very large debug headers
expansion modules and available

00:11:16.176-->00:11:22.749
on these boards. Some of these
are for legitimate things for
businesses. You’ve got your

00:11:22.749-->00:11:27.587
iDRAC, you’ve got your various
openmanage, you’ve got
[inaudible, technical

00:11:27.587-->00:11:30.156
difficulties] times have
additional [inaudible, technical
difficulties]. Take whatever

00:11:30.156-->00:11:35.128
hardware you end up with, and
you’ve got to do some
engineering. In our case we took

00:11:35.128-->00:11:39.566
the little bit messy approach
for some of this. So some people
may recognize this. This is PC7

00:11:39.566-->00:11:44.237
epoxy that we went, go through a
lot of the boards. So anything
that can’t be physically removed

00:11:44.237-->00:11:49.409
from the board we basically
[inaudible] to remove it. That
they’re not going to be able to

00:11:49.409-->00:11:54.414
practically do it while the
sensors are still in place. So
all over the [inaudible] the

00:11:56.616-->00:12:01.554
things that [inaudible] we also
did with connectors. So these
whole sides of the chasses are

00:12:03.690-->00:12:08.261
[inaudible] are unfortunately
very easy spots to stick probes
through and with those probes

00:12:08.261-->00:12:12.265
there are various things like
the, the front header of the USB
buffs on the underneath the

00:12:12.265-->00:12:17.937
front bezel. And part of this,
it’s not just a debugger
interfaces, but the one’s that

00:12:17.937-->00:12:22.875
you’re actually using to conduct
the operation that you have
because there’s only so much you

00:12:22.875-->00:12:27.246
can actually turn off and still
have a working system. PCI
risers, we just went ahead and

00:12:27.246-->00:12:32.251
built for that. And just wear
some gloves, it takes skin off.
I, I know this the hard way. One

00:12:36.155-->00:12:40.126
thing some people may note is I
have some very cruddy solder
joints on here. There’s a reason

00:12:40.126-->00:12:45.898
for this is. If someone were to
start physically [inaudible] we
would have the server off. So

00:12:45.898-->00:12:47.900
you may notice that we have a
few different types of contacts
here. For one we have just a

00:12:47.900-->00:12:49.902
sample of a simple lever switch
with a roller. And next to the
original Dell chasse sensor. So

00:12:49.902-->00:12:54.907
we have a few different types.
Again, so we’re going to spend
[inaudible] this is interesting.

00:12:58.878-->00:13:03.816
So we take advantage of the
actual disassemblies for these
servers. In this case an

00:13:08.588-->00:13:15.161
assembly module in one of these
Dell R7 10’s. Fan module comes
out of the big tray we can pull

00:13:15.161-->00:13:20.166
out [inaudible]. Well, luckily
for us Dell has alerts
[inaudible, technical

00:13:22.835-->00:13:27.573
difficulties] they started doing
is in modules we edited a lot of
our control circuitry and

00:13:27.573-->00:13:32.845
sensors for some of the some of
the units. And part of this is,
is that in order to get to the

00:13:32.845-->00:13:36.516
initial uh components not only
do you have to try and bypass
our sensors, but at the same

00:13:36.516-->00:13:41.988
time you’ve got the existing
diagnostic sensors that weren’t
even tamper intrusion working

00:13:41.988-->00:13:46.993
for you. So all of these extra
fans that the uh the speed
sensors uh there uh tons of

00:13:49.128-->00:13:53.299
diagnostic information that lets
you know that something is wrong
with your environment. It’s

00:13:53.299-->00:13:57.804
inside of a colocation facility
[inaudible], any decent quality
[inaudible] data center. You

00:13:57.804-->00:14:01.874
know what the environment is and
you take that to [inaudible].
Whether or not the air flow is

00:14:01.874-->00:14:04.811
starting to listen that
something is in the room with
you. Whether or not the

00:14:04.811-->00:14:10.016
temperature is really going up
in a way that’s not related to
hardware. And it comes down to a

00:14:10.016-->00:14:16.556
lot of monitoring. >> Yeah, I’d
just like to add that paring the
switch in the assembly here,

00:14:16.556-->00:14:22.829
you’ll notice the lip which
protects an attacker against an
attacker accessing it unless

00:14:22.829-->00:14:27.834
they go directly [inaudible]. >>
Which is. >> Because they can’t
get the shim passed this little

00:14:27.834-->00:14:32.939
lip here. It’s important to take
advantage of the natural
characteristics of your

00:14:32.939-->00:14:37.376
particular server when deciding
where to place. >> Yupp. So we
take advantage of that from the

00:14:37.376-->00:14:43.883
top but also we actually will
modify the frame as well. One
thing to drill to the top and

00:14:43.883-->00:14:48.988
risk the power supply causing
some kind of fault which if
[inaudible] to do this with

00:14:48.988-->00:14:55.228
various types of equipment. From
a hole on the side and a laser
on the government side. But

00:14:55.228-->00:14:59.132
going through the actual
motherboard on the bottom you’re
getting into the SATA buses that

00:14:59.132-->00:15:02.869
run underneath, the particular
area that we chose. And you’re
getting into a lot of other

00:15:02.869-->00:15:06.539
interfaces where if you started
drilling through it’s going to
very very difficult to get to

00:15:06.539-->00:15:11.944
those sensors. Uh, take
advantage of everything from
your traces, your layout, just

00:15:11.944-->00:15:17.784
how tiny you can get these
little microcontrollers in
place. So we use the internal uh

00:15:17.784-->00:15:22.355
headers for connecting up our
equipment rather than running it
back out obviously and we just

00:15:22.355-->00:15:26.559
slathered everything on there
and you may notice that we
explicitly did not use pin

00:15:26.559-->00:15:32.498
headers. Again just very, very
cruddy solder joints in this
epoxy. As, As a lot of people

00:15:32.498-->00:15:36.435
like myself, [inaudible]
challenge here know, is that it
is very easy to make a mistake

00:15:36.435-->00:15:40.840
and cause something to slip. And
we want to take advantage of
that where a minor slip that

00:15:40.840-->00:15:46.612
normally wouldn't trigger
[inaudible] will cause damage.
As again, failing off is exactly

00:15:46.612-->00:15:51.017
what we want. And when you get
to the code that we have
available right now, it’s

00:15:51.017-->00:15:54.720
currently [laughs] in its’ older
state. It’s just a simple
Arduino script that’s currently

00:15:54.720-->00:15:59.859
up. We’re uploading our new
version after this talk. And
we’ve since added tilt sensors,

00:15:59.859-->00:16:04.463
we’ve added uh other types of
contact sensors besides shown.
And one of the ones that we’re

00:16:04.463-->00:16:11.304
actually working on right now is
a challenge response uh NFC tag
inside of some of the

00:16:11.304-->00:16:16.309
components. And with that you’ll
actually be able to authenticate
not just a little magnetic con,

00:16:18.411-->00:16:24.450
read sensor but the particular
tag inside of the chasse being
used. >> We’re doing great on

00:16:24.450-->00:16:29.455
time so keep talking. >> So when
we get into these trialed
response systems, in the box

00:16:31.490-->00:16:36.128
village just next door, you will
notice a lot of people just
bring magnets and bypass the

00:16:36.128-->00:16:40.299
sensors directly. One of the
unique things that you can get
away with when you get into this

00:16:40.299-->00:16:45.905
uh into the DIY approach is you
can have sensors that aren’t
documented outside of your own

00:16:45.905-->00:16:50.910
design. So we actually uh can
have unique tags per contact
point inside of this chasse. On

00:16:53.512-->00:16:58.618
top of the more traditional
methods because in a certain
environment you may be able to

00:16:58.618-->00:17:04.824
get the NFC signal out reliably.
For practical purposes these
servers might as well be Faraday

00:17:04.824-->00:17:09.829
cages as well they’re well
grounded. If someone were to try
to tamper with the power supply

00:17:09.829-->00:17:16.269
to try and damage that, you have
another Dell sensor that has the
potential to kick in. And with

00:17:16.269-->00:17:21.741
this environment, you also have
some other interesting
approaches you can take. So we

00:17:21.741-->00:17:25.745
actually also controlled the
server cabinets as well. And
with control over the server

00:17:25.745-->00:17:29.181
cabinets you know whether or not
someone is supposed to be doing
maintenance or whether or not

00:17:29.181-->00:17:35.888
someone’s opening your doors to
try and get access to the fiber
line that’s running into it. And

00:17:35.888-->00:17:39.425
[chuckles] it actually this is
where you get to uh a little bit
of the balance act that you have

00:17:39.425-->00:17:44.997
to do. Is that it is very easy
to shoot yourself in the foot
with these sensors. So. >> Uh

00:17:44.997-->00:17:51.504
test bit pro tip, test your
switches before you install
them. [Laughter] >> Yes, test

00:17:51.504-->00:17:55.575
your switches before you install
them. Um, the hard drives that
were originally going to come

00:17:55.575-->00:18:00.513
here uh succame, succumb to
that. Uh, they other thing to
test is not just whether or not

00:18:02.548-->00:18:06.552
your own individual servers
sensors work but whether or not
what you’re sensing for the

00:18:06.552-->00:18:12.358
environment as a whole is not
going to just come back to bite
you. So overall, any, any

00:18:12.358-->00:18:17.797
operation any home lab any rack
in a data center it’s gonna need
maintenance. So if I were

00:18:17.797-->00:18:23.069
servicing this box right now,
I’d could easily just shut off
the sensors from the servicing

00:18:23.069-->00:18:27.673
purpose, lock the data, do
whatever's necessary. But what
about the server above and below

00:18:27.673-->00:18:32.378
it. Well, contact sensors won’t
be an issue but let’s say you
start adding in things like

00:18:32.378-->00:18:38.217
various motion, tilt, and one of
the more interesting ones to
play with is light sensors. Um

00:18:38.217-->00:18:42.388
you have to maintain good
airflow through your server
still so such sensors become

00:18:42.388-->00:18:46.292
very effective at detecting
anything in your environment
that’s changed but at the same

00:18:46.292-->00:18:51.664
time, uh you have the make sure
the servers are still functional
and you can actually block off.

00:18:51.664-->00:18:57.069
The uh the tilt sensors are
actually one of the ones that we
found most problematic. As

00:18:57.069-->00:19:00.106
though server racks in
particular if you’re not
fortunate enough to have the

00:19:00.106-->00:19:04.577
ones anchored to the ground will
vibrate quite a bit when
unracking the server beneath it

00:19:04.577-->00:19:09.582
and will promptly lock or erase
everything. >> Yeah, I mean I
can take over. Um, yeah, the

00:19:15.154-->00:19:20.726
great thing about those ball
bearing tilt sensors is that if
somebody tries to pull the

00:19:20.726-->00:19:27.266
server out on its’ rails um the
tilt sensor will get switched
from the movement, the inertia.

00:19:27.266-->00:19:32.972
So try drilling a hole in the
top of the case when you’ve got
two other computers on top of it

00:19:32.972-->00:19:38.077
that are equally protected. Like
I said, it’s about taking
advantage of your environment.

00:19:38.077-->00:19:44.717
Um I wanted to talk about
briefly how you go about
building these particular

00:19:44.717-->00:19:50.956
modifications. It’s a pretty
simple process. Takes a little
bit of practice um but it

00:19:50.956-->00:19:55.961
involves purchasing switches
like this along with some ribbon
cables. You solder it to the two

00:20:00.433-->00:20:05.438
pins mount it in your chasse, in
various parts and then wire
everything back to the port on

00:20:14.647-->00:20:21.253
this little Arduino. Which we
protected with electrical tape.
To keep it from grounding. >>

00:20:21.253-->00:20:28.194
And copious amounts of epoxy. >>
And then of course epoxied it
in. You then connect that to

00:20:28.194-->00:20:33.199
your internal USB port, and you
can use the python script the
rudimentary version of it which

00:20:36.502-->00:20:42.641
is in this reapo, to monitor
that Arduino and then detect
when any, any of your switches

00:20:42.641-->00:20:48.581
or detection modules get tripped
and then choose to take the
appropriate action. Presumably

00:20:48.581-->00:20:55.187
if you’re have a fully encrypted
system it would be to shut down.
Once you get all your

00:20:55.187-->00:21:00.126
modifications in place, one of
the things we like to do. Ah, I
didn’t bring it. Is use um Fred

00:21:07.433-->00:21:14.140
Locker to ensure you can’t even
unscrew it. We didn’t have the
screw in this particular lid but

00:21:14.140-->00:21:19.145
most of these servers have at
least one optional screw that
you can use. Another great tip

00:21:24.183-->00:21:29.188
is to cover your joints in
something like varnish or my
personal favorite, nail polish.

00:21:32.658-->00:21:38.264
The more glitter, the better. >>
Woo! >> Sprinkle that on, take a
photo of the glitter pattern and

00:21:38.264-->00:21:43.269
if anybody tries to remove the
the case, they won’t be able to
replicate the exact dispersion

00:21:46.372-->00:21:51.377
of the glitter. >> Poor man’s
holographic seals. [Laughter] >>
Now, I’d like to talk a little

00:21:54.947-->00:21:59.251
bit about operational
considerations when you’re
working in a high threat

00:21:59.251-->00:22:05.791
environment and you have one of
your sensors actually get
tripped. One of the

00:22:05.791-->00:22:10.863
recommendations that I would
make is to take advantage of
that fact that LUKS supports

00:22:10.863-->00:22:17.636
multiple key slots. I don’t have
a photo of it here. But you can
see that it supports up to 8

00:22:17.636-->00:22:23.776
different passwords. All you
need to do is write a little
script that when somebody enters

00:22:23.776-->00:22:30.549
the, the password in one of
those high le, high numbered key
slots, it wipes the slot. That

00:22:30.549-->00:22:35.554
way if you need to tell somebody
the boot password they can type
it in and if that password were

00:22:37.756-->00:22:42.761
intercepted, they wouldn’t be
able to use it again. We, we
didn’t talk about it earlier,

00:22:48.801-->00:22:53.806
but one of the reasons we used
PC7 Epoxy is because it has the
right thermal and electrical

00:22:57.042-->00:23:03.449
properties. You wanna pick
something that isn't going to
create a short circuit with your

00:23:03.449-->00:23:08.454
board or trap the heat and
destroy the various chips that
you’re trying to protect. We

00:23:11.290-->00:23:17.930
also chose PC 7 because it’s
incredibly difficult to remove
as he mentioned, don’t get it on

00:23:17.930-->00:23:22.935
your hands. There are also other
advantages, or things that you
can take advantage of if you’re

00:23:27.273-->00:23:33.913
not using enterprise grade
equipment. One of the things you
want to look for for example is

00:23:33.913-->00:23:38.917
ECC registered memory. The
reason being it’s incredibly
difficult to remove ECC memory

00:23:42.221-->00:23:47.226
and still read the information
off the chip after the system is
shut down, because ECC memory by

00:23:49.395-->00:23:54.400
default cycles itself every time
it powers on. You also want to
add things like this project USB

00:24:02.641-->00:24:07.646
Kill, which will detect if
anybody inserts a USB drive into
any of your ports and can take

00:24:09.982-->00:24:14.987
appropriate action in that
situation as well. Anything else
we should cover. Let me pull up

00:24:22.661-->00:24:27.666
my notes. I feel like I’m
forgetting something important.
>> So actually that’s a really

00:24:37.443-->00:24:41.981
good question. So there’s a
couple of options. >> Repeat the
question. >> So he asked, how

00:24:41.981-->00:24:47.653
how are we killing our hard
drives. So the first method is
simple, if you have LUKS

00:24:47.653-->00:24:53.792
enabled, you’re going to zero
out your memory, and shut down.
The second is and a little more

00:24:53.792-->00:25:00.532
aggressive and the reason that I
had to drive out here uh, the
hard drives that we used for

00:25:00.532-->00:25:05.904
some of the equipment actually
has a uh 2 ounce thermite charge
embedded inside of it next to

00:25:05.904-->00:25:11.977
the platters. [Laughter]
[Clapping] >> I thought we
weren’t going to mention that.

00:25:11.977-->00:25:16.782
>> Well, good luck dealing with
it. >> Yeah, don’t nobody tell
our co-lo. [Laughter] >> It’s

00:25:16.782-->00:25:20.686
okay, just a little smoke it
won’t do much fire. So the big
trick to using a thermite drive

00:25:20.686-->00:25:26.291
however is choosing the right uh
composition. The most common
alloy uh uh used is FE 304

00:25:26.291-->00:25:31.130
based. I’m sorry, FE 203. An FE
304 is a variant that you want
to use.It has a higher

00:25:31.130-->00:25:36.502
instantaneous heat output. And
depending on how aggressive you
really want to get there’s

00:25:36.502-->00:25:40.639
various other types of uh
compounds that can be added in
with it. Using a hobby rocket

00:25:40.639-->00:25:44.743
tree ignitor with a potassium
permanganate mixture gives a
reliable ignition at a low

00:25:44.743-->00:25:50.048
voltage that can be delivered by
the computer’s power supplies.
Uh in terms of actually building

00:25:50.048-->00:25:55.120
the drives, the big diff,
difficulty is doing it in a
clean environment. So with the

00:25:55.120-->00:26:01.326
uh the hard drives they’re so
dense now that a single spec of
dust can kill a lot of sectors.

00:26:01.326-->00:26:05.564
So either A, if you can fanagle
your local university to use
their clean a little, for a

00:26:05.564-->00:26:10.235
little bit in exchange for some
beer, which is what I did. Or
you can instead do the

00:26:10.235-->00:26:15.140
improvised clean room method, in
which you actually raise the
humidity very high inside of an

00:26:15.140-->00:26:19.745
enclosed space uh but the
problem when you do this you
have to have some very good

00:26:19.745-->00:26:25.284
method of drying out the dryest
air after the fact. Uh I get to,
uh I take some fresh Desiccant

00:26:25.284-->00:26:29.388
and I make sure it’s in every
drive when I do this. So when
the air has a high moisture

00:26:29.388-->00:26:32.791
content, the dust will actually
sit to the ground and you have a
safe working environment to

00:26:32.791-->00:26:38.564
modify your drives. Don’t, don’t
assume a single drive will have
good sectors afterwards. The

00:26:38.564-->00:26:43.035
won’t but over a large array of
drives, like a SAN, you’ll end
up with enough reliability that

00:26:43.035-->00:26:48.540
you can safely do it. >> yeah,
uh one of the things to consider
is the fact that uh the old

00:26:48.540-->00:26:53.545
fashioned spinning magnetic
disks, are uh easy destroy. All
you need is to breach the case,

00:26:55.848-->00:27:00.586
and like he said get a little
dust in there, and it’ll be
impossible to read the data. >>

00:27:00.586-->00:27:06.658
Oh. >> The problem with SSD’s,
is they’re a little bit more
robust. And that’s where the

00:27:06.658-->00:27:12.064
thermite patch or something of
that nature might be required to
physically destroy. >> Oh. >>

00:27:12.064-->00:27:17.369
Now we’re not recommending you
go that route because we like to
think that encryption software

00:27:17.369-->00:27:22.608
still provides that mathematical
guarantee that you need so that
if you shut power off to the

00:27:22.608-->00:27:27.613
device, it’s just as good as if
you’d destroyed it physically.
Um in lieu of that if you’re

00:27:30.749-->00:27:35.754
using something like Opal to, to
do your encryption uh you can do
an instant key eraser on the

00:27:38.257-->00:27:43.262
flash rom and then nobody will
ever be able to recover that
data. >> The downside to Opal,

00:27:43.262-->00:27:48.400
is that it’s a black box module.
It’s implemented by the drive
manufacturer you’re never gonna

00:27:48.400-->00:27:53.138
get a chance at looking at any
code for it. Uh there’s a free
PBA available from uh the Drive

00:27:53.138-->00:27:58.343
Trust Alliance and the uh self
encrypting drive utilities.
However, that, that just talks

00:27:58.343-->00:28:01.380
to the drive. ^The actual
encryption is still done on the
drive itself which if you

00:28:01.380-->00:28:06.485
choose, trust Samsung, or Micron
or one of the other
manufacturers. It’s very fast

00:28:06.485-->00:28:10.756
and a high performance
encryption system actually
erases instantaneously, the

00:28:10.756-->00:28:15.761
downside is trusting a black box
again. >> Uh did we talk about
the NFC switches? >> Mmhmm. >>

00:28:20.566-->00:28:25.571
Oh, I guess we have time for
questions. I wasn’t expecting
that. Any questions. >> How do

00:28:28.507-->00:28:33.512
we test it? So, I will tell you
right now. Do not test and
prawd. [Laughter] >> So what we

00:28:36.882-->00:28:42.321
actually do um is I’ll have
usually uh a couple friends of
mine that are in various

00:28:42.321-->00:28:46.858
involvements in levels of tamper
evidences or bypassing and I
will not tell them what I did to

00:28:46.858-->00:28:50.729
a particular system and I will
let them have at it. Uh beer
goes a long way to bribe

00:28:50.729-->00:28:55.133
hackers, pay your testers.. >>
Yeah we, we intended to actually
bring a system out here for the

00:28:55.133-->00:29:01.740
tamper evident village but
travel disruptions got in the
way. >> Yeah, uh uh but

00:29:01.740-->00:29:05.177
basically in terms of testing,
you have to think about the
entirety of your state machine.

00:29:05.177-->00:29:10.015
What possible attacks that
you're considering, what your
switchers are designed to do and

00:29:10.015-->00:29:15.120
what exactly [inaudible] in the
event of an intrusion. .. So you
may choose to say that I have

00:29:15.120-->00:29:20.592
different ranks of intrusion
that I’m going to switch to just
simply raising an alert, or

00:29:20.592-->00:29:25.197
actually shutting down or even
erasing the data. So for
example, the internal contact

00:29:25.197-->00:29:28.834
sensors, when we test those
we’ll have people using various
types of shims, various types of

00:29:28.834-->00:29:33.772
cutting tools and various types
of probes to try and bypass
them. We actually use a

00:29:33.772-->00:29:38.510
randomized mixture per
deployment on whether or not
openly uh uh clos, contacted

00:29:38.510-->00:29:43.682
switch or a normally uh closed
switched. So that way you
actually don't know except per

00:29:43.682-->00:29:48.920
device per the person that built
it whether or not that switch is
going to uh open or close if

00:29:48.920-->00:29:55.360
someone tried to bypass it. So
when testing. We’ll load up some
data, and the goal is for

00:29:55.360-->00:29:58.964
whoever is looking at it is can
they get this data off. Whether
they do it through a cold boot

00:29:58.964-->00:30:04.569
attack via USB, whether they do
it through actually pulling out
a drive and trying to keep power

00:30:04.569-->00:30:09.341
to it using an Opal method. Or
whether or not they can simply,
if they can get the chasse off

00:30:09.341-->00:30:13.712
without triggering it, that’s
considered a failed unit. Can
just get the lid off regardless

00:30:13.712-->00:30:20.018
of whether or not they do any
memory based attacks yet. >>
Yeah uh one of the photos that

00:30:20.018-->00:30:25.023
we showed. Chromebook is having
trouble keeping up with the 7,
there it is, the 700 megabyte

00:30:28.860-->00:30:33.865
PDF. Is we actually epo, epoxied
the power cable um from the PSU
to the motherboard to ensure

00:30:38.136-->00:30:42.674
that somebody couldn't swap it
out. And remove the board that
way while maintaining power to

00:30:42.674-->00:30:47.245
the system. >> And this is a
photo that we took after just
doing the connector. We actually

00:30:47.245-->00:30:52.150
slathered parts of the cable as
well that are exposed. One of
the uh the attacks that I’ve

00:30:52.150-->00:30:57.189
that actually is done for
forensic purposes is you will,
they will actually slice the

00:30:57.189-->00:31:01.727
sheath of a power cable, and
apply power from a secondary
source to try and keep the

00:31:01.727-->00:31:07.566
system running. >> Hotjacking.
>> Yeah, hotjacking. And with
that, as a concern we took kind

00:31:07.566-->00:31:13.004
of precautions in terms of
epoxying over the existing
power. So that basically any

00:31:13.004-->00:31:18.810
attack that will remove epoxy,
will remove the sheathing with
it and cause a short. So we, we

00:31:18.810-->00:31:25.383
will accept the hard fail and
data corruption as a path in
that environment. >> Um be sure

00:31:25.383-->00:31:30.388
to epoxy all of the places um
that an attacker could plug into
and get direct memory access. As

00:31:32.424-->00:31:38.330
you can see here we covered up
the ports on the riser card so
nobody could insert anything

00:31:38.330-->00:31:43.335
into them and add something to
the system. Um I didn’t show it
but um you wanna look for the

00:31:53.078-->00:31:58.083
BIOS chip. And we don’t have uh
a picture of it here um but the
pins on the side of some of

00:32:00.919-->00:32:07.859
these integrations. You also
wanna cover those up. So that
nobody can add a lead to it and

00:32:07.859-->00:32:12.864
directly manipulate the
integrated circuit. You also
want to uh cover up, the

00:32:17.235-->00:32:24.176
battery. So nobody can kill
power to your BIOS, particular
if you’re using hardware level

00:32:24.176-->00:32:29.181
protection methods like Opal. >>
So the uh most of the modern for
UEFI BIOS’ for Opal will

00:32:31.883-->00:32:36.788
actually if it detects a worm
reboot, it will send the lock
commands to the drives. However,

00:32:36.788-->00:32:41.426
if you don’t have the ability
for the BIOS to actually process
an update to the current systems

00:32:41.426-->00:32:46.331
status then that enables a
possible hotjacking attack.
Again specific to Opal when you

00:32:46.331-->00:32:48.934
have the encryption when you
have the encryption on the drive
itself rather than using a

00:32:48.934-->00:32:54.439
method such as LUKS where you’re
off loading it to memory. >>
Also be sure you don’t overlook

00:32:54.439-->00:32:59.744
your integrated lights out
management board. Um one of the
problems we found with Dell

00:32:59.744-->00:33:04.683
equipment in particular is that
possible to disable IPV4 access
to the DRAC controller. What we

00:33:08.787-->00:33:13.792
ended up doing was what setting
the IP address to. >> A slash
32. >> Yupp. Make your subnet to

00:33:17.429-->00:33:24.169
all 255’s so that it can only
talk to itself. And then you can
sit there and wonder what it’s

00:33:24.169-->00:33:30.008
saying. >> Yeah, a non existent
broadcast domain is something
that in some of the Dell

00:33:30.008-->00:33:34.813
firmwares you can actually set
so.take that to your advantage
since they don’t allow you to

00:33:34.813-->00:33:39.818
actually turn the features off.
>> Uh you also wanna cover up
some of these um unused ports in

00:33:43.154-->00:33:48.159
the back. Um you can swap out
these default covers which have
convenient little holes in them

00:33:54.065-->00:33:59.070
with ones that don’t. You don’t
have to really worry about
airflow because the rear air can

00:34:01.239-->00:34:07.979
still eject out the back of the
power supply. And of course it’s
a lot easier, or sorry a lot

00:34:07.979-->00:34:14.786
harder to get into the machine
by sticking a fiber optic camera
through an active power supply.

00:34:14.786-->00:34:20.892
>> Yeah, we uh we tried this and
it ended in a lot of fireworks.
[Laughs] >> And we were curious,

00:34:20.892-->00:34:25.897
we had an old system. Uh any
more questions? >> [Inaudible
question from audience] >> Yeah,

00:34:32.671-->00:34:37.676
we do it at the rack level um
one of the things you wanna look
for is a motion. >> Oh sorry he

00:34:40.478-->00:34:44.783
asking if we uh installed
webcams inside of the hardware
so we can watch anyone trying to

00:34:44.783-->00:34:49.888
manipulate it. >> So we
installed a webcam at the rack
level and if you have a good one

00:34:49.888-->00:34:56.194
that can trigger on motion, you
can see when anybody approaches
the environment. Um and then

00:34:56.194-->00:35:02.267
presumably email the photo to
you. Make sure that the photo
actually gets transmitted. You

00:35:02.267-->00:35:07.439
dont wanna have a situation
where the only copy of the image
happens to be on the device in

00:35:07.439-->00:35:12.310
the environment that the person
is accessing. >> We actually
also recommend that you have a

00:35:12.310-->00:35:18.316
secondary link that’s going out
besides your primary routers. Uh
especially in a colo facility

00:35:18.316-->00:35:23.421
where the facility provides
every bit of internet access
otherwise. Uh we actually have

00:35:23.421-->00:35:29.094
experimented with cellular
modules. Uh Kaylux actually has
the uh the Sprint devices and

00:35:29.094-->00:35:34.099
you can also of course for the
various embedded hardware,
various Arduino addons etcetera

00:35:34.099-->00:35:40.772
add GSM chips sets as well for
exfiltrating. >> Uh don’t
overlook hardening your, your

00:35:40.772-->00:35:47.379
routers as well. Um we use
PFSense Machines which run on
commodity hardware so we can do

00:35:47.379-->00:35:52.884
the same modifications to that
as we do to the machines that
run the encrypted services. >>

00:35:52.884-->00:35:58.289
Seems like the most of this
geared around preventing an
attack that you would be

00:35:58.289-->00:36:04.696
otherwise unaware of. It your
goal is simply to deny them the
hard disks, wouldn’t it be safer

00:36:04.696-->00:36:11.169
and simpler to use those
switches to simply cut the power
to the hard drives and then when

00:36:11.169-->00:36:18.009
they boot it back up they’re not
going to have access to it. >>
Alright so the question was that

00:36:18.009-->00:36:22.714
it seems it’s geared around uh
denying access in an undetected
fashion to our data and whether

00:36:22.714-->00:36:27.052
or not the switches should just
kill power to the system.
Alright so the reason that it

00:36:27.052-->00:36:31.356
doesn't just immediately kill
power in every case is that
first some of the sensors um are

00:36:31.356-->00:36:35.727
uh particularly sensitive.
Regular maintenance in the racks
around it will cau, will trigger

00:36:35.727-->00:36:39.964
them. So you first want an alert
for that, because you do have to
balance what your actual

00:36:39.964-->00:36:44.002
operational goal is and what
your security goal is. The
contact sensors are designed to

00:36:44.002-->00:36:48.807
just kill things immediately.
Cause the contact sensors not
something that will go off via

00:36:48.807-->00:36:52.510
traditional rack maintenance
like the tilt sensor might. >>
Yeah, you’ll find out through

00:36:52.510-->00:36:57.682
experimentation which sensors
are more reliable than others.
That’s where the, the testing

00:36:57.682-->00:37:04.222
comes into play. And if you look
at that python script i posted a
link to, um all it does is

00:37:04.222-->00:37:09.928
monitor the sensors. The area of
the script where you have
actually to decide what happens

00:37:09.928-->00:37:15.567
is left blank. But presumably as
I mentioned earlier, our
recommendation isn’t physical

00:37:15.567-->00:37:20.972
destruction, it’s to rely on the
mathematical guarantee provided
by the encryption when you cut

00:37:20.972-->00:37:25.977
power. That at least get affords
you the option of restoring. Um
You do have to be careful about

00:37:29.414-->00:37:34.419
using the same hardware that may
have actually been tripped. So
if you have a confirmed breached

00:37:36.888-->00:37:42.694
situation you may just want to
remove the hard drives and place
them in a new chasse. Uh I

00:37:42.694-->00:37:47.699
actually have a funny story, at
HOPE a couple of years back, the
guys from Rise Up had the server

00:37:49.901-->00:37:55.640
um that the FBI had confiscated
and held onto for a year and
they brought it back and they

00:37:55.640-->00:37:59.310
let, to to the hacking
conference they lifted the top
of the cover off and the

00:37:59.310-->00:38:06.251
challenge was to see if you
could spot the modification. Any
more questions, we’re almost out

00:38:06.251-->00:38:11.256
of time. >> [Inaudible comment
from audience] >> Not yet. Um.
>> Um we’ve had a few false

00:38:15.794-->00:38:20.965
alarms when uh the facility, a
prior facility of ours would
actually uh do maintenance in

00:38:20.965-->00:38:26.771
our racks without notice. And
that’s they generated zero auto
logs when they did this.They

00:38:26.771-->00:38:30.842
didn’t tell us, they told no
one. They wouldn’t tell us what
they were doing at one point.

00:38:30.842-->00:38:35.780
And I had to pry that
information out of them and
while they didn’t open up any of

00:38:35.780-->00:38:40.251
the chasses they were moving the
racks around and at one point
recabling some of the uh we

00:38:40.251-->00:38:44.889
found out later were the PDUs
when we looked at the camera. So
while that wasn’t an actual a

00:38:44.889-->00:38:49.727
particular intrusion attempt rom
a hard drive perspective. >>
Yeah, on the box itself. >> The

00:38:49.727-->00:38:54.866
sensors did catch it and that’s
already a very suspicious thing
to be inside of someone’s rack

00:38:54.866-->00:38:59.571
cause them recabling above the
racks is very typical. Recabling
the PDU inside of the rack is a

00:38:59.571-->00:39:04.509
very rare thing. >> Um what
encryption do you guys recommend
to add to guarantee the uh

00:39:09.013-->00:39:14.018
security of the hard drives? >>
So the question was what
encryption do we recommend to

00:39:14.018-->00:39:19.023
guarantee the security of the
drives? >> Uh I use AES 256 uh
for my semetrics cypher uh I

00:39:21.859-->00:39:26.864
traditionally for all my pub key
stuff uh have been switching to
Elliptical Curve um although I

00:39:29.601-->00:39:36.040
heard yesterday at one of the
talks um that it’s possible the
National Security Agency might

00:39:36.040-->00:39:41.813
have a quantum computer in the
very near future capable of
breaking ECC. And is now

00:39:41.813-->00:39:48.453
recommending that we now use
very large RSA keys. I don’t
know if I believe it yet because

00:39:48.453-->00:39:53.458
I’m not looking forward to
switching back to 8 K RSA keys.
>> And when it comes to the AES

00:39:55.493-->00:39:59.464
you also have to choose what
mode you want to use. Whether
you use something as XTS or the

00:39:59.464-->00:40:04.802
CBC modes.Uh stick with an
authenticated protocol if you
can. >> Yeah. If you have it,

00:40:04.802-->00:40:10.508
and it supports it, you want to
be operating in GCM Block Mode.
Unfortunately that won't work

00:40:10.508-->00:40:15.513
with a um full disk encryption
un because [cough] it’s a chain
cypher. Um so in order to

00:40:19.150-->00:40:26.124
decrypt a block you have to know
the previous block. So it’s a
it’s stream cypher, sorry. Um

00:40:26.124-->00:40:32.430
you, you have to use a block
mode like XTS. >> Yeah. >> Uh I
do have pretty high hopes, um I

00:40:32.430-->00:40:37.435
haven't implemented it yet in
prawd, um but Cha Cha, and Poly
1305 uh look very promise, as

00:40:41.005-->00:40:46.010
very, look like very promising
replacements uh for AES. Um but
when it comes to crypto, what I

00:40:48.346-->00:40:54.252
like to say is that speed kills,
you move too fast and you’re
guaranteed to make a mistake and

00:40:54.252-->00:40:58.856
do something wrong. Particularly
when it comes to picking a new
cypher or a new implementation.

00:40:58.856-->00:41:04.195
It’s always good to go with the
tried and true. Um the nice
thing about symmetric ciphers is

00:41:04.195-->00:41:08.800
that they’re much harder to
break because of the
mathematical principles behind

00:41:08.800-->00:41:14.572
them. They’re essentially random
number generators that are doing
a one time pat. Um so if nobody

00:41:14.572-->00:41:21.512
can break the random number
generator, um either by brute
forcing the key or by taking the

00:41:21.512-->00:41:27.118
stream and determining what
comes next the algorithm stays
secure.it’s the public key

00:41:27.118-->00:41:33.891
algorithms that you have to
worry about. and on a related
note, cryptographic hash

00:41:33.891-->00:41:38.896
algorithms are an interesting
discussion because traditionally
Shaw 2 um 256 and 512 have been

00:41:42.033-->00:41:48.306
very secure alternatives. But
what we’re seeing is that with
the emergence of bitcoin and all

00:41:48.306-->00:41:53.311
of the investment in Asics is
the speed at which they run
reduces the security of those

00:41:55.680-->00:42:00.618
older algorithms. One more
question, if we have it. Alright
well if you think of something

00:42:06.691-->00:42:11.696
later, just come find me at the
pool. Uh I’ll be at the 303
party tonight. [Applause]

