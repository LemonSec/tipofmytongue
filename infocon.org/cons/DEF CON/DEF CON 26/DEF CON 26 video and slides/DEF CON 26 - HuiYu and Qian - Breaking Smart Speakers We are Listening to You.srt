00:00:00.567-->00:00:07.441
>>Hello everyone, thank you for
coming. Uh and we are very
excite, excited to share our

00:00:07.441-->00:00:13.480
research at DefCon. Our
presentation today is to talk
about the security of smart

00:00:13.480-->00:00:18.485
speakers. We find and exploited
some vulnerabilities to attack
some smart speakers such as

00:00:20.888-->00:00:25.893
Xiaomi AI Speaker and Amazon
Echo. First, please let me
introduce my teammate and

00:00:29.796-->00:00:36.169
myself. Li Yuxiang is a security
researcher at the Tencent Blade
Team. He has found several

00:00:36.169-->00:00:42.476
vulnerabilities in Android and
he was the speaker of Hack in
the Box and he worked with us to

00:00:42.476-->00:00:47.481
complete all the work of our
study. Unfortunately he is not
hard work today and this is my

00:00:50.217-->00:00:56.723
teammate Qian Wenxiang. He is
also security researcher for our
Tencent Blade Team and he's on

00:00:56.723-->00:01:01.662
top 100 in the world list of
MSRC. And he write a book called
named “Whitehat to Talk About

00:01:04.731-->00:01:11.672
Web Browser Security.” And my
name is Hui and you call me, and
you can call me Nicky. I'm a

00:01:11.672-->00:01:17.077
security researcher at Tencent
Blade Team, I'm also a bug
hunter, winner of Geekpwn and

00:01:17.077-->00:01:23.250
speaker of Hack in the Box and
POC. And here we would like to
thanks some people especially

00:01:23.250-->00:01:28.255
Lake2 and GMXP they give us
another support. Next, let me
introduce the Tencent Blade

00:01:32.526-->00:01:37.531
Team. Our team comes from
Tencent security planned fund
department. Now we are focusing

00:01:40.467-->00:01:45.472
on the security research of AI,
IoT devices, mobile devices. In
the past two years, we have

00:01:48.675-->00:01:54.414
found more than 17 security
vulnerabilities for many
companies such as Google and

00:01:54.414-->00:01:59.419
Apple. And you can contact us at
Blade dot Tencen dot com. Before
we start our presentation, let’s

00:02:05.158-->00:02:10.163
take a brief look at our
tonight. First, we will give
introduction to smart speaker

00:02:14.701-->00:02:21.508
and then we will talk about the
attack service of smart speakers
then we will show the details of

00:02:21.508-->00:02:26.513
remote attack Xiaomi AI speaker
and how to break in Amazon Echo.
And last we will summarize our

00:02:29.883-->00:02:34.888
research. Smart speakers is the
most popular smart home devices
in the last 2 years. Amazon,

00:02:40.460-->00:02:45.465
Google, Apple and some Chinese
vendors have released their own
smart speaker products. The

00:02:49.536-->00:02:56.376
Amazon Echo family is the most
popular smart speaker on the
market. It has more than 30

00:02:56.376-->00:03:01.314
million users and many people
are very interest -are very
interested in its security so we

00:03:03.483-->00:03:08.488
choose it’s uh, our research
target. Another research target
is Xiaomi AI Speaker. Xiaomi AI

00:03:12.759-->00:03:18.265
Speaker is very popular in China
because it can control many
smart devices in Xiaomi

00:03:18.265-->00:03:23.270
ecosystems. Next, let’s briefly
analyze the attack surface of
the smart speaker. In smart

00:03:29.276-->00:03:35.782
speaker architecture, it mainly
includes three parts. Uh the
part, the first part is smart

00:03:35.782-->00:03:42.489
speaker device, the second is
cloud server, and last is mobile
phone application. The attack

00:03:42.489-->00:03:49.129
surface of this architecture
contains, contains many parts.
The first part is the hardware

00:03:49.129-->00:03:55.735
interface and the net code
words, uh of the sm- speaker
device. The second part is

00:03:55.735-->00:04:00.774
security of the mobile phone
application. The third part is
the security of the cloud server

00:04:00.774-->00:04:05.779
and the last part is security of
the communication protocol
between them. Then, uh I will

00:04:11.151-->00:04:16.823
talk about how we can explore
MIIO term vulnerabilities to
remote attack Xiaomi AI Speaker.

00:04:16.823-->00:04:21.828
Uh, this include bad part.
Xiaomi AI Speaker had built in
system based on OpenWrt. Uh, -it

00:04:28.268-->00:04:33.273
it uh S, S -uh SH service design
board and the firmware of the
speaker can be downloaded easily

00:04:36.710-->00:04:41.715
by http request but we cannot
replace the firmware with the
Man-in-the-Media attacks because

00:04:45.085-->00:04:50.090
of uh, -it’s security mechanism.
In addition, it opens up some
network parts and uh, the

00:04:53.660-->00:04:58.665
5-4-3-2-1 is the communication
board of the MIIO Protocol. MIIO
Protocol is used to configure

00:05:04.437-->00:05:09.442
and control smart home devices
made by Xiaomi. It is uh
encrypted the binary protocol.

00:05:12.445-->00:05:18.718
After analyzing the firmware of
Xiaomi AI speaker, we found that
the data included in the MIIO

00:05:18.718-->00:05:23.723
packet was passed into UBUS
commanders and executed by
Xiaomi AI speaker with root

00:05:25.859-->00:05:30.864
permission. So, if we can
simulate Xiaomi smart devices to
communicate with Xiaomi AI

00:05:32.966-->00:05:38.905
Speaker, you can use this
protocol to execute root
commander which is a root

00:05:38.905-->00:05:43.910
commander execution
vulnerability in line. In order
to explore this vulnerability,

00:05:49.616-->00:05:56.389
we first need to examine each
collection with the speaker and
pass the certification of MIIO

00:05:56.389-->00:06:01.328
part protocol. This will require
us to obtain a AES key for
connection because it keying as

00:06:03.363-->00:06:08.368
token. This token is 16 bit
stream. To get this token, we
need to use the MI home

00:06:10.604-->00:06:15.609
application to reband the
speaker to attack the arm
account. Then extract the token

00:06:18.278-->00:06:23.283
from a- applications database.
We found a web interface WEP
authority vulnerability so we

00:06:25.819-->00:06:30.824
can only need to get the device
ID to un- to unbind any speaker
device. And we find the device

00:06:33.627-->00:06:38.632
ID can be opened by sniffing the
line. After got the token, we
can use some tools to connect

00:06:44.037-->00:06:49.042
the Xiaomi AI speaker by pro-
MIIO protocol. Then we can send
some UBUS commanders to the

00:06:51.511-->00:06:56.516
speaker. The first commander is
used to modify the dropbear
configure fair, and the second

00:06:58.718-->00:07:03.657
commander is to turn off the
dropbear pass- password
authentication. Finally, we need

00:07:06.126-->00:07:11.131
to start the dropbear. After
executed this UBUS commanders,
we can suc- successfully to

00:07:14.467-->00:07:19.472
access the SSH of MIIO speaker
and logging without password and
it means we have obtained the

00:07:24.678-->00:07:29.683
root permission of the speaker.
In addition, we find another
vulnerability problem called

00:07:33.953-->00:07:38.958
Message Agent which is used to
MQTT communication between
speaker and cloud servers. When

00:07:42.929-->00:07:48.401
a user controls some the
speaker’s function in a mobile
phone, the application

00:07:48.401-->00:07:53.406
communicates with the cloud
server first, then the cloud
servers sends the device ID to

00:07:56.609-->00:08:01.548
the message agent, then the
message agent will executed the
commander. We find the two

00:08:03.983-->00:08:08.988
special web interfaces, one is
remote UBUS which is can call
the UBUS server remotely and the

00:08:14.060-->00:08:20.266
other is UBU- remote OTA. The-
the commander in the bios
calling this interface will be

00:08:20.266-->00:08:27.107
executed using the system
function so which is a remote
system com- commander execution

00:08:27.107-->00:08:32.112
vulnerability. There are two
pieces of the vulnerability code
that are highlighted in the

00:08:35.615-->00:08:40.620
using [indiscernible] Once
[indiscernible] codes UBUS
service and the second finally

00:08:43.890-->00:08:48.895
works with the system function.
Since these two vulnerable web
interfaces have identity

00:08:54.601-->00:08:59.906
certification, if we want to
exploit this vulnerable
remotely, uh we have to get the

00:08:59.906-->00:09:01.841
users cookie for the speaking
bonding. In the later research,
we find two excess vulnerability

00:09:01.841-->00:09:03.843
in -in Xiaomi dot com which
allow us to remotely steal a
large number of, uh, MI IS users

00:09:03.843-->00:09:06.346
cookies so now we- we can
exploit these vulnerabilities to
complete the attack chain of

00:09:06.346-->00:09:11.351
remotely obtain the root
permission of MI AI Speaker.
Now, let’s take a brief look at

00:09:20.894-->00:09:25.899
the first demo video. This video
demonstrate the two
vulnerabilities we mentioned.

00:09:31.738-->00:09:36.743
The first part of the uh video
demonstrate the connecting the
to the speaker with SHH in the

00:09:39.446-->00:09:44.451
night and control it play a
piece of audio. [Indistinct
voice in the video] Um, because

00:10:10.610-->00:10:15.615
Xiaomi AI Speaker doesn’t speak
English so we control it say a
Chinese meaning “Winner winner,

00:10:22.055-->00:10:28.795
chicken dinner”. In the second
video, the victim is the sm-
smart speaker is remotely

00:10:28.795-->00:10:33.800
controlled by the attack after
connect URL. Okay, now we will
finish the section on Xiaomi AI

00:10:41.307-->00:10:46.312
Speaker. Let’s talk about how to
break in Amazon Echo. This
include six parts and now we are

00:10:49.415-->00:10:55.622
beginning to talk about the
previous four parts and the
exploit detail and demo video

00:10:55.622-->00:11:00.560
will be shared by my teammates.
First let’s have a brief look
at, let, let’s have a brief look

00:11:05.932-->00:11:10.937
the Amazon Echo. In the newly
released second generation Echo
family or the Amazon Echo Device

00:11:14.140-->00:11:19.145
use similar hardware and
assistance so we chose the Echo
Dot as our test devices. Amazon

00:11:21.681-->00:11:26.686
Echo Dot has built in Fire OS
which is actually as system
based on Android. This runs on

00:11:31.858-->00:11:36.863
SELinux and ASLR, loads the
bootloader and is has a USB
interface but it can only use

00:11:41.267-->00:11:46.272
for charging. We also found some
another way by scanning At the
beginning, we tried to get the

00:11:51.911-->00:11:56.916
firmware for a long time but we
got nothing so we chose to start
with hardware and extract the

00:11:59.385-->00:12:04.324
firmware directly from the flat
chip. In order to extract the
firmware from the flat chip, we

00:12:07.794-->00:12:12.799
needed to pre- prepare a lot of
hardware tools which included
hot air gun, soldering iron,

00:12:16.336-->00:12:21.341
reballing tools, and so on.
Okay, this is the second demo
video. This video shows how to

00:12:27.180-->00:12:32.185
dis- desolder the chip from the
PCB in six minutes and then
rebond the chip. To save time,

00:12:44.364-->00:12:49.369
we doubled the speed. The most
important skill is to choose a
suitable temperature and be

00:12:56.142-->00:13:01.080
careful. Okay. When we desolder
the, desolder and rebond the
chip, we need to choose a

00:13:30.977-->00:13:35.982
suitable temp- chip adapter
according to the chip's data
shade. Amazon Echo uses the

00:14:02.942-->00:14:07.947
BGA221 package EMCP Chip which
we can easily buy a adapter on
Taobao or eBay. And we can also

00:14:46.419-->00:14:51.424
buy a universal EMMC reader and
uh connect the adapter to the
USB reader device so that we can

00:15:08.341-->00:15:13.346
read and write the firmware
content in the EMCP Chip easily.
And this is the disk um

00:15:44.811-->00:15:49.816
partition information we
extracted from the flash chip.
It contains many parts such as

00:15:51.918-->00:15:56.923
preloader, bootloader, boot
image, system, and so on. When
we got the firmware, we had

00:16:02.795-->00:16:09.535
another important thing to do.
That is to modify the firmware
to create a Amazon Echo Dot with

00:16:09.535-->00:16:15.541
root permission. This can help
us quickly debug some
vulnerabilities because Amazon

00:16:15.541-->00:16:20.546
Echo Dot turned on SELinux and
logged on the boot loader, we
cannot directly modify the boot

00:16:23.115-->00:16:28.120
image to,a to root. We need to
close SELinux and then a -the
superuser binary field to the

00:16:31.691-->00:16:36.696
system and the start. And then
we need to open the system IDB
function. We add this operations

00:16:40.566-->00:16:45.571
to a shared script that start
auto- automatically so that
every time the system boots, it

00:16:48.507-->00:16:52.545
can make sure we can connect the
Echo Dot from it’s USB interface
and get the root permission.

00:16:52.545-->00:16:55.248
After complete this, oh okay,
sorry. And this is the third
demo video to show how to solder

00:16:55.248-->00:16:57.516
in the chip. [Video] After
complete this modification, we
need to restore the flash chip

00:16:57.516-->00:17:00.152
back to the PCB. This video
demonstrate how to restore the-
the chip back to the PCB in

00:17:00.152-->00:17:02.788
three minutes. And to save time,
we also double the video speed.
[Video] Okay. Uh, before we

00:17:02.788-->00:17:07.793
complete this operation, we have
got a rooted Echo Dot and okay,
my part is over. Uh, thank you

00:18:22.368-->00:18:27.373
for listening. Now please
welcome my partner Qian
Wenxiang. >>Okay, uh hello

00:18:31.577-->00:18:36.582
everyone. Now I am going to give
a talk about how to turn Amazon
Echo to an exploiting device on

00:18:43.422-->00:18:48.427
the basis of software. Uh,
earlier my partner has gave a
great talk about how to uh hack

00:18:50.496-->00:18:56.268
into the Echo Device on the
basis of hardware. The physical
hack’s very important; without

00:18:56.268-->00:19:01.207
that, exploiting will be much
difficult for me. So, how many
steps would it take to hack into

00:19:03.743-->00:19:08.748
a device. The first attacker
exploited, and then the victim
connects to the hacker and next

00:19:11.183-->00:19:17.757
the hacker do whatever he or she
wants to do. Yes, the step is
simple but on a well protected

00:19:17.757-->00:19:23.796
system, things will get a little
complicated. Since we already
got firmware and debugging

00:19:23.796-->00:19:28.801
environment, we are able to
check the restrictions that
Amazon has set up for us. So

00:19:30.903-->00:19:36.609
first, please allow me introduce
the protections we need to
bypass first. There are three

00:19:36.609-->00:19:41.614
firewalls or firewall-like
things . The system use IPtables
to allow only a few ports from

00:19:44.483-->00:19:49.488
accepting connections and the
uh, the uh SELinux is also
enabled. We manage to find a

00:19:52.024-->00:19:58.697
binary with high privileges to
bypass it. This binary is a
vulnerable program uh shows in

00:19:58.697-->00:20:03.702
the picture and it has a web
server activated. To communicate
with it, we must pass our client

00:20:06.539-->00:20:13.012
authenticated TLS handshake.
That means we must get
certificates and other things

00:20:13.012-->00:20:18.217
but those certs are all obtained
from the card synchronizing. In
another word, we need to get the

00:20:18.217-->00:20:23.222
card synchronizing information
of other devices. So attacker is
always happy to see there’s a

00:20:26.125-->00:20:32.698
web server available. That
explains why we choose this
binary to be our target. In the

00:20:32.698-->00:20:38.237
next few slides, please allow me
to produces some background
information so we can go through

00:20:38.237-->00:20:43.242
these things more clearly. THe
WHAD, W.H.A.D which is a whole
home audio deamon. It is a huge

00:20:46.412-->00:20:51.417
binary runs at the root and with
network access and is able to
recall the voice. Also, the most

00:20:53.686-->00:20:58.691
excited part is it would open a
web server. The https server
runs on port 55443 and it

00:21:02.394-->00:21:07.399
accepts control commands. But uh
things are not going as we
wished to be. The https server

00:21:11.370-->00:21:17.676
introduced client authenticated
TLS handshakes. Uh that means we
must have a third server

00:21:17.676-->00:21:24.016
certificate, uh client
certificate and a private key to
communicate with it. Though this

00:21:24.016-->00:21:29.021
sounds difficult but we have
also noticed that the physically
rooted device uh can also pass a

00:21:31.090-->00:21:36.095
check and communicate with other
devices. So the information must
be stored in somewhere. By

00:21:38.731-->00:21:44.103
reading the document of
libcurl’s we know we can scratch
all certificates and private key

00:21:44.103-->00:21:49.108
from libcurl’s negotiate
function on a rooted device. To
do the trick, the first thing we

00:21:51.343-->00:21:57.416
need to do is to bind our rooted
device into victim’s account.
I’ll explain this why -why, why

00:21:57.416-->00:22:02.354
we do this later. By auditing
Amazon’s website, we have found
two XSS and both need two steps

00:22:07.159-->00:22:12.164
of users’ actions so we decide
not using them. But the XSS here
is fatal. You can steal privacy,

00:22:15.534-->00:22:20.539
or control the device with a
cookie obtained from XSS because
XS-4 is makeup modern

00:22:22.875-->00:22:27.880
protections such as SP which is
uh content security policy and
https only protects. Yes, by

00:22:31.283-->00:22:36.288
using the XSS you can get the
same result of what we’ll talk
later but we also found another

00:22:38.791-->00:22:43.796
method which is the quickest and
easiest for us, that is to spoof
an Amazon website. We have found

00:22:48.500-->00:22:54.907
that every time when we log into
the Alexa, there’s an OpenID
login page and there’s also a

00:22:54.907-->00:23:01.647
redirect parameter in the url.
If I modify that parameter, it
will redirect to any domain

00:23:01.647-->00:23:06.652
which is a subdomain of Amazon
dot com in https. SInce we want
to mimic an Amazon’s website so

00:23:09.655-->00:23:15.995
we don’t want to mess up with
the https certificate so we’d
like to have a https downgrade

00:23:15.995-->00:23:21.000
redirect. And luckily we have
found the site asso-redirect dot
amazon dot com. It’s validation

00:23:23.936-->00:23:29.875
rules allows to downgrade to
http. It also have some
vulnerabilities that could re-

00:23:29.875-->00:23:36.348
uh that could be redirect to
other site which is not belongs
to Amazon and making some token

00:23:36.348-->00:23:41.353
from OpenID. But now the only
thing we need is the downgrade.
Okay, we want to spoof Amazon’s

00:23:46.325-->00:23:51.330
website inside victim’s LAN but
there are two preconditions. The
first one is the attacker need-

00:23:53.699-->00:23:58.904
need to be joined uh the
victim’s LAN and the second is
we need to find the Amazon

00:23:58.904-->00:24:04.843
domain which resolves to a local
address. An attacker can be
joined into the LAN with that IP

00:24:04.843-->00:24:09.848
address and both are not hard to
be satisfied. You can get a list
of subdomains from Google

00:24:12.351-->00:24:17.356
transparency report, then you
can use TCP/IP to use a static
IP address to join into the LAN.

00:24:23.429-->00:24:28.834
Uh, we have found the
aapsservice which resolves to a
local address. If attacker could

00:24:28.834-->00:24:35.774
join the LAN of victim with that
address then start a web server,
when victim tries to visit

00:24:35.774-->00:24:42.715
aapsservice dot amazon dot com
in his or her browser, actually
the victim -victim is visiting

00:24:42.715-->00:24:47.720
the hacker’s website. Also,
because it has the root domain
of Amazon dot com, the cookie

00:24:50.022-->00:24:55.027
will be sent to the attacker
automatically from the browser.
To sum up, uh first the attacker

00:24:59.198-->00:25:05.838
joins the LAN and when victim
log in from the Alexa login page
with the redirect parameter set

00:25:05.838-->00:25:11.610
to associate with redirect to
Amazon dot com and when victim
finish the login, the page with

00:25:11.610-->00:25:16.615
redirect to assoc-redirect dot
amazon dot com then this site
will downgrade and redirect to

00:25:20.085-->00:25:26.492
aapsservice dot amazon dot com.
This domain resolves to
attacker’s computer and the user

00:25:26.492-->00:25:31.897
will finally visit the
attacker’s website with the
cookie sent to it. Then the

00:25:31.897-->00:25:38.003
attacker bind his device into
victim’s account using the
cookie. And finally we can

00:25:38.003-->00:25:43.008
communicate with other devices
of victim and the first problem
is solved. We have got a device

00:25:45.377-->00:25:50.382
to pass the first check. Then we
will use a device to extract
certificates and private keys

00:25:54.753-->00:26:00.159
from negotiate function. But
first, I’d like to show you a
simple picture about the

00:26:00.159-->00:26:06.732
architecture which shows how
WHAD gather device info when it
starts and why we need to bind

00:26:06.732-->00:26:11.737
it -bind it into victim’s
account first. Uh, if you have
many devices in your account,

00:26:15.908-->00:26:21.980
they will group as a cluster
automatically. When Alexa D
starts, if will obtain

00:26:21.980-->00:26:24.883
information from Amazon Server
and when WHAD starts, it will
get those information from Alexa

00:26:24.883-->00:26:31.757
D. And when a device wants to
updates something, the Alexa D
will notify the Amazon Server

00:26:31.757-->00:26:36.762
and the server will later notify
all other devices in that
cluster to synchronize. Because

00:26:43.569-->00:26:49.708
the key will change when WHAD
starts to automate the exploit
later, we choose to patch the

00:26:49.708-->00:26:54.713
WHAD. The WHAD will per-
periodically send an https
request to other devices to know

00:26:56.982-->00:27:03.355
if they are still online. By
replacing the negotiate function
to the assembly code written by

00:27:03.355-->00:27:08.360
us, we can dump the certificates
to a local file. It is simple
and violent but anyhow it works

00:27:10.529-->00:27:15.534
so we don’t need to crack the
complex algorithm. Since
everything is taken place on

00:27:18.337-->00:27:24.209
attackers device uh to simplify
the environment we have disabled
all protections on the

00:27:24.209-->00:27:29.815
physically hacked device. The
code is a little complicated so
we are not going to talk about

00:27:29.815-->00:27:36.221
this now. You may check our
Github page to get the full code
in assembly. So in another word,

00:27:36.221-->00:27:41.226
we try to dump those things to
three files and use them later
in the attack. Now we have dealt

00:27:45.597-->00:27:50.869
with the client authenticate
function- authentication
problem. Every time before we

00:27:50.869-->00:27:56.642
want to perform attack we run
the patch, the WHAD to get the
certs and private key then we

00:27:56.642-->00:28:01.580
can go to the last step to break
the vulnerable program WHAD on
the victim’s device. Since we

00:28:07.019-->00:28:13.091
are going to attack it, there
must be vulnerabilities to be
exploited so let’s back to the

00:28:13.091-->00:28:19.565
binary auditing. So we have
audited almost every binaries
and we found the binary written

00:28:19.565-->00:28:25.737
by Amazon themselves are secured
by design. But we have also
noticed that Echo is using the

00:28:25.737-->00:28:32.177
very old version of the 3rd
party libraries. They’re all
nearly four years old. You can

00:28:32.177-->00:28:37.182
see the pic- uh you can see the
picture, it shows they are using
some code of year 2014. So also

00:28:39.384-->00:28:44.923
Amazon tries to apply security
patches to them; there are still
many N day and 0 day

00:28:44.923-->00:28:49.928
vulnerabilities, they’re a gold
mine. Okay, it’s time to “dig
the goat” That is to attack the

00:28:53.632-->00:28:58.637
web server and get control of
WHAD. And how the feeling for
you to audit some code written

00:29:01.540-->00:29:08.447
from four years ago, maybe a
little relaxed I guess because
old code with poor test often

00:29:08.447-->00:29:14.853
leads to serious problems. It
tooks me a week to find the
treasure but when we first find

00:29:14.853-->00:29:21.460
the exploitable function, nobody
would caught it. Luckily Amazon
updated the binary two months

00:29:21.460-->00:29:27.866
later and we have found that a
lot of functions are referenced
in this function. The root cause

00:29:27.866-->00:29:34.072
of the vulnerability is the
library has final- has fail
failed a condition check and so

00:29:34.072-->00:29:39.077
a lot of vulnerabilities happen
in sequence. Let’s take a look
at the personable code. First

00:29:43.281-->00:29:49.788
you can see the content lens
this useless black code and
Civetweb tries to get the value

00:29:49.788-->00:29:54.793
from http header and convert it
into an integer. The ATOI
accepts negative numbers as

00:29:57.529-->00:30:03.235
input and will return an
assigned integer. What I don’t
quite understand is why they

00:30:03.235-->00:30:09.541
convert the value from signed
integer to unsigned here. If the
variants is unsigned, the code

00:30:09.541-->00:30:15.213
if content length is greater
than zero, it’s actually uh
equals to if content length is

00:30:15.213-->00:30:20.218
not zero so maybe the unsigned
here is a typo. And next uh the
EVE check negative one equals to

00:30:24.222-->00:30:29.828
the biggest number of unsigned
int so we will also pass the
check and then the number plus

00:30:29.828-->00:30:34.833
one is again an integer
overflow. The result is zero.
Uh, malloc zero is value because

00:30:37.202-->00:30:42.207
Echo system is used in dlmalloc
as uh as the malloc algorithm.
As the menu says, even include

00:30:46.812-->00:30:51.817
zero it can still allocate a
small buffer for you to write
in. Next, in the MG Read code,

00:30:54.553-->00:30:59.891
there’s a heap buffer overflow,
we’ll talk about it soon. And
there’s a minor one, the post

00:30:59.891-->00:31:05.931
data bracket content length
assigned to zero will write zero
at negative one position. Leave

00:31:05.931-->00:31:11.903
the string not zero terminated;
that is a potential information
leak cause this- this function

00:31:11.903-->00:31:18.310
is used to get the parameter’s
value. So it just like the
chess; a bad move might lead to

00:31:18.310-->00:31:23.315
a total loose. Okay, let’s back
to the heap buffer overflow. The
code is malloc, dlmalloc zero

00:31:28.120-->00:31:33.125
will locate 16 bytes, that means
8 bytes metadata plus 8 bytes
buffer where we can write our

00:31:35.360-->00:31:40.365
data to. In the MG Read, data
read from http request is
written into buffer. The good

00:31:42.667-->00:31:48.340
thing is this function will fix
the input length so if you are
giving the huge number as we

00:31:48.340-->00:31:53.345
did, it will fix that length to
real data length remains in the
source buffer. Then it will copy

00:31:55.413-->00:32:00.352
the data from socket to malloc
buffer. So if we try to post the
screen longer than 8 bytes,

00:32:02.921-->00:32:07.926
there will be a heap buffer
overflow. So do you remember the
size of malloc is controlled by

00:32:11.129-->00:32:18.103
user. We can set content length
to control it. If we don’t send
the full http request by

00:32:18.103-->00:32:24.376
omitting the terminating uh
return carriage, a new line, the
malloc T buffer will remain in

00:32:24.376-->00:32:29.815
the memory without being free.
When we need to free the buffer,
we could simply send the

00:32:29.815-->00:32:36.354
remaining written carriage a new
line, then the connection is
closed and the buffer is freed.

00:32:36.354-->00:32:42.027
By the way, the MG Read will
write anything including zero
charge to buffer so it is very

00:32:42.027-->00:32:47.032
common for us to exploit. Since
we can control the content of
heap, one thing we wanted most

00:32:51.403-->00:32:56.641
is uh the vulnerability to
bypass ASLR. That would be good
for us to do the heap buffer

00:32:56.641-->00:33:01.580
override and heap spray later.
First, let’s talk about the
heaps read, heaps spray part. If

00:33:05.817-->00:33:10.822
we want to exploit it, we must
try to confirm the area to put
our shellcode in. The anonymous

00:33:10.822-->00:33:12.824
memory is a good place. Large
heap allocation request caused
the malloc to use mmaped

00:33:12.824-->00:33:17.829
anonymous memory. It’s
controlled by the mmapad
threshold variance of the

00:33:24.836-->00:33:30.342
malloc. Although there’s a
hundred of threads running in
the background, there’s only we

00:33:30.342-->00:33:37.182
want to allocate such huge
memory. Because of the reason of
the mmap the address is started

00:33:37.182-->00:33:43.788
from a predictable range even
when ASLR is enabled. You may
check the article in our

00:33:43.788-->00:33:50.128
reference in the last page of
the slides to know the detail.
In our case, we have got an

00:33:50.128-->00:33:56.801
address that has a good chance
to be located. We have got this
value by just run the program

00:33:56.801-->00:34:01.740
again and again and it is a exp-
experience value. So after we
have, ahm, we have got a buffer

00:34:04.943-->00:34:09.948
to put our shellcode, we may
also need an information leak to
do the rest of things. The IOT

00:34:12.284-->00:34:18.623
device is different from the
desktop application. There’s no
screen for us to know the result

00:34:18.623-->00:34:25.263
so if the leak the data, it’s
done to use through the network
that would be great. Finally, an

00:34:25.263-->00:34:32.203
information leak of libcurl in
FTP connection is proved to be
exploitable. By the way, this is

00:34:32.203-->00:34:37.208
a N day vulnerability so libcurl
don’t give the POC but we try to
reproduce this problem from

00:34:40.011-->00:34:46.685
libcurl’s patch and test cases.
We see to trigger this
vulnerability we need to reuse a

00:34:46.685-->00:34:53.058
curl handle. That means we need
to use same handle to connect to
the same FTP server not less

00:34:53.058-->00:34:58.063
than twice. Okay, let’s back to
the program logic of WHAD. We
have found the control command,

00:35:03.101-->00:35:08.873
ah, it’s name is downloadAudio.
Normally it would download only
a single file and the curl

00:35:08.873-->00:35:15.313
handle is closed. But we have
dug into the code deeper and
found that if the extension is

00:35:15.313-->00:35:20.318
PRS, it will part the PRS file
and use the same curl object to
download every file in it. And

00:35:23.755-->00:35:30.695
from the second connection, curl
will- will reuse the FTP handle
and trigger the vulnerability.

00:35:30.695-->00:35:37.302
The picture shows the detail of
the file we use php redirect to
bypass the protocol distribution

00:35:37.302-->00:35:42.307
of WHAD. Also, if the PRS don’t
loaded successfully, WHAD will
use the cache and will not

00:35:44.442-->00:35:49.447
accept the same request twice.
That means if curl’s FTP
function fail to leak any bytes,

00:35:52.484-->00:35:58.590
unless it is restarted, WHAD
will not accept our download
request again and we don’t want

00:35:58.590-->00:36:05.196
to see this happen so we check
the code branch and found if one
of the URL points to a file that

00:36:05.196-->00:36:10.201
doesn’t exist there will be no
cache. So we can send the same
request as many times as we want

00:36:12.370-->00:36:17.375
till it will leak another
address. We use a Python script
to automatically adjust the

00:36:20.445-->00:36:25.450
payload and finally we have
found uh the size 103 will reuse
a grid area which contains an

00:36:28.887-->00:36:33.892
address point to a function of
curl. And based on this address
we can calculate the loading

00:36:36.027-->00:36:41.032
address of curl and furthermore
address of every libraries.
Because the ld dot so will load

00:36:43.535-->00:36:49.741
dt needed, libraries in sequence
so you can simply calculate the
next or previous libraries

00:36:49.741-->00:36:54.746
address by plus or minus the
length of an adjacent S.O
library. So we have everything

00:36:58.817-->00:37:05.723
we need, so how do we execute
the code? The web server is
powered by openSSL an SSL object

00:37:05.723-->00:37:12.497
is created when a request is
coming so if you happen to read
the source code, you will find

00:37:12.497-->00:37:18.603
there are many function pointers
in that object. When live
Civeatweb wants to respond

00:37:18.603-->00:37:25.443
something to the client, SSL
write is called. So all we need
to do is to override the SSL

00:37:25.443-->00:37:32.383
write pointer and to simplify we
have found a fast way to trigger
SSL write. It will send more

00:37:32.383-->00:37:37.388
form http version. Well this is
a code in the older version of
live Civeatweb. This code only

00:37:40.225-->00:37:45.163
works safely in Linux. You may
try whatever happens if you
compiles it in individual

00:37:45.163-->00:37:50.168
studio. In summary, we have got
six attacking primitives. The
first one is to restart the WHAD

00:37:54.539-->00:38:01.279
so we can cause, we can cause an
exception in WHAD in case we
can’t leak that address or stuck

00:38:01.279-->00:38:07.118
for a long time, we may want to
restart the program and give it
another try. Another five

00:38:07.118-->00:38:13.625
primitives are also listed here
so now all we need to do is to
combine them to get a remote

00:38:13.625-->00:38:18.630
code execution. So now is time
to PWN. I have to say, it has a
possibility to fail because the

00:38:24.969-->00:38:30.542
background threads are messing
up the heap and another reason
is in the last step, the memory

00:38:30.542-->00:38:36.714
condition is a little like to
fall into a risk condition
problem.We have a connection to

00:38:36.714-->00:38:43.488
override the SSL object of
another connection. If anything
on the thread be written is

00:38:43.488-->00:38:49.994
called before the overwritten it
is done, it will fail. Or if any
background thread cause

00:38:49.994-->00:38:56.801
[indiscernible] there’s a fail
too. For a four bytes testing
gadget, we have 40 percent

00:38:56.801-->00:39:03.441
chance to set the PC value to it
but a real life gadget is six
time longer and the success rate

00:39:03.441-->00:39:08.446
is down to about 8 percent . But
the good news is uh WHAD will
respond af- after, after it

00:39:11.049-->00:39:16.054
will- sorry, the good news is
WHAD will be respond after crash
automatically so we can do the

00:39:19.224-->00:39:24.229
exploit again and again. That -
that is to entrust the hack to
time.The average success time is

00:39:27.832-->00:39:32.837
about 30 minutes in our
laboratory with about ten tries.
If can control the PC, we need

00:39:36.841-->00:39:41.846
the last thing to start
eavesdropping, that means a
shellcode. We use function of

00:39:44.549-->00:39:51.089
set from library plus leaked
library’s load address to get
the function address in memory.

00:39:51.089-->00:39:56.094
We added two handlers for
SIGSEGV/ SIGABRT with infinite
loop in our shellcode to prevent

00:39:58.296-->00:40:04.502
any background threats from
crashing the process. We have
also narrowed the length of

00:40:04.502-->00:40:10.341
metadata of the memory page
where the shellcode are placed
to prevent this page from being

00:40:10.341-->00:40:15.346
freed. We tried to use the class
audio recorder to record the
voice and send it by TCP to

00:40:17.582-->00:40:24.555
attacker and the voice was
recorded in PCM format. And the
shellcode could be found in our

00:40:24.555-->00:40:29.560
Github page too. And finally you
can see we have dealt with every
problems. WHAD is now turning to

00:40:33.364-->00:40:39.504
a eavesdropping program. It’s,
it’s uh eavesdropping in the
background and sending every

00:40:39.504-->00:40:45.343
voice data to the attacker. Do
you want to watch the video? Of
course we have prepared a demo

00:40:45.343-->00:40:50.348
video which shows the whole
story. [Inaudible voice] Yeah,
this is a normal Echo Dot, and

00:40:58.423-->00:41:04.262
the left part is the attacker
server and the right part is the
exploiting script. When the

00:41:04.262-->00:41:10.234
exploit success, the victim
connect to us and you can see
log is shown on the left.

00:41:10.234-->00:41:15.239
>>Hello, do you have any meeting
tomorrow? Yes. Hello, do you
have any meeting tomorrow? Yes.

00:41:43.835-->00:41:48.840
>>Yes, that’s it. [applause] So
you don’t need to worry about
this. Uh, vulnerabilities we

00:41:54.445-->00:41:59.450
have found have all reported to
the developers and fixed in the
June 2018. Amazon has already

00:42:01.552-->00:42:06.991
automatically updated Echo
devices with security patches
and the vulnerabilities we have

00:42:06.991-->00:42:11.996
mentioned are already all fixed.
And you can find the code and
the contact information on our

00:42:15.900-->00:42:20.905
Github page and last a little
hack tips from our experience.
The first to hack a LT device

00:42:23.074-->00:42:28.713
you need to get a firmware first
and it’s- it is good to master
all kinds of soldering and

00:42:28.713-->00:42:35.319
firmware extraction methods. And
web plus binary vulnerabilities
often equals to remote code

00:42:35.319-->00:42:40.324
execution. And most important
thing is to be patient; your
hard work will finally pays off.

00:42:44.295-->00:42:49.300
And that’s all. Thank you for
listening and thanks my partner
too. If you have any [applause]

