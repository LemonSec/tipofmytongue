00:00:01.869-->00:00:05.339
>> Alright so um it may be the
last day but we still have first
time speakers and we have a

00:00:05.339-->00:00:10.010
first time speaker here. >>
Whoo! >> In case you weren’t
aware [applause] First time

00:00:10.010-->00:00:15.949
speakers must hydrate before
they uh before they speak so he
has elected for hydration and

00:00:15.949-->00:00:20.954
we’re going to give it to him.
Here’s to you guys. Okay uh I
think you’re ready. >> If it’s

00:00:30.597-->00:00:35.602
his first time shouldn’t we be
getting the shots? >> Aha yeah.
If you- if you sat through that

00:00:41.408-->00:00:46.413
uh autonomous talk yesterday you
should probably get a shot. >>
Awesome. We up? Okay. Hey.

00:00:54.254-->00:01:00.694
Thanks for coming. Today we’re
going to be talking about the
internet and internet security.

00:01:00.694-->00:01:05.699
Uh over the next 45 minutes
we’re going to go over a little
bit of fluff, who I am, why I’m

00:01:08.268-->00:01:13.273
here. We’re going to go over
some remedial networking because
hm there may be some network

00:01:16.143-->00:01:20.847
pros here. I’m sure there’s at
least one y’know person who was
around the birth of the internet

00:01:20.847-->00:01:25.852
and has a staff made from y’know
transatlantic cable and will be
y’know casting spells on me if I

00:01:28.188-->00:01:32.225
say anything wrong but there’s a
pretty wide range of people
here. We’ve got reporters. We’ve

00:01:32.225-->00:01:36.330
got security experts. We’ve got
people who specialize in
networking. People who never

00:01:36.330-->00:01:40.467
deal with networking at all. So
we’re going to go over it just
some of the basic concepts and

00:01:40.467-->00:01:45.472
then we’re going to transition
to the basis of how the internet
works itself. And for those of

00:01:48.442-->00:01:54.948
us that don’t have a home Cisco
lab and y’know aren’t set up to
build it- build a home network

00:01:54.948-->00:01:58.485
and try some of the attacks
we’re going to go over today -
we’re gonna show- we’re going to

00:01:58.485-->00:02:03.423
go over some tools you can use
to build your own internet at
home. And then we’re going to go

00:02:07.961-->00:02:12.432
over some tools we can use to
break it. We’re going to go over
some of the ways the internet is

00:02:12.432-->00:02:18.205
already broken. Uh we’re going
to some some demos of some of
the attacks that are out in the

00:02:18.205-->00:02:23.844
wild right now. And then we’re
going to explore some ways the
internet that we can damage the

00:02:23.844-->00:02:29.783
internet a little bit more. Now,
who am I? I’m Lane Broadbent.
I’m security engineer with

00:02:29.783-->00:02:36.323
Vivant Inc. Uh Vivant is a home
security, home automation
company. Also does cloud storage

00:02:36.323-->00:02:39.860
and is a wireless internet
service provider. Some of you
may know us. Some of you may

00:02:39.860-->00:02:44.865
have had our sales guys come to
your door. Uh The demos and
tools that I’ll be using tools

00:02:49.403-->00:02:55.475
you can get on GitHub. Uh I’ll
be posted them after this- after
the talk as soon as I can get

00:02:55.475-->00:03:00.414
reliable internet access. Uh not
exactly sure when that will be
but I’ll try to get them up

00:03:03.583-->00:03:10.524
today definitely. Now, what
spawned this? Here’s a- here’s
an announcement from US CERT

00:03:10.524-->00:03:15.328
mentioning, well talking about
how nation states are targeting
internet infrastructure devices

00:03:15.328-->00:03:20.967
and internet routers. Now mostly
when we talk about routers being
attacked people are- what we’re

00:03:20.967-->00:03:26.907
talking about is home routers
with poorly configured
credentials and back doors from

00:03:26.907-->00:03:33.113
un- from firmware that hasn’t
been updated in a long time. Uh
but there’s also the routers

00:03:33.113-->00:03:36.716
that make up the core
infrastructure of the internet
that have to be considered and

00:03:36.716-->00:03:38.718
those are what we’re going to
talk about today. Now a little
bit of remedial internet- uh

00:03:38.718-->00:03:43.723
remedial networking. Here we
have an IP address uh inside our
block notation. Uh an IP address

00:03:45.992-->00:03:50.997
is a 32 bit number. I’m sorry
this slide actually didn’t come
out too great but internet- and

00:03:56.470-->00:04:01.908
IP addresses are generally
broken up into uh four blocks of
8 called octets and this is

00:04:01.908-->00:04:06.913
octet notation and after the
slash is your subnet mask so the
first 24 bits of our net- of our

00:04:10.117-->00:04:15.589
IP address uh signify our
network address or as we’ll be
calling it from here on our

00:04:15.589-->00:04:22.562
prefix. Uh if for addresses that
match- that have the same
network address as you on say

00:04:22.562-->00:04:27.801
your home LAN uh as a
simplification uh you can
generally access them directly.

00:04:27.801-->00:04:32.239
Those that have a different
network address you generally
have to go through a device

00:04:32.239-->00:04:36.776
called a router. Uh routers will
take- are connected to multiple
networks and they’ll take that

00:04:36.776-->00:04:41.548
packets, they’ll look at where
it’s trying to go and they’ll
compare it to the information

00:04:41.548-->00:04:47.487
they have about where they can
get to. Um now routers will have
different routes to different

00:04:47.487-->00:04:52.526
networks and they’ll- there may
be multiple routes that will
match so they’ll go through the

00:04:52.526-->00:04:59.466
most specific route or the route
with the longest match. So quick
example. That first one 10 dot

00:04:59.466-->00:05:04.905
slash 8 doesn’t match at all so
that’s not a route that’s going
to be taken. That leaves us with

00:05:04.905-->00:05:09.910
2 uh 2 routes that do work.
However, one is a slash 23 and
the other there’s a slash 24. Uh

00:05:12.445-->00:05:18.552
24 bits is longer than 23 bits
so we’re going to choose- the
router is going to choose that

00:05:18.552-->00:05:25.258
route and send the data that
direction. Now I keeps saying
routers. Uh I know a lot of you

00:05:25.258-->00:05:28.795
probably cut your teeth on
these. Uh raise your hand if you
have one of these laying in your

00:05:28.795-->00:05:33.800
closets somewhere. That’s right.
Now these are generally called
routers but what they are really

00:05:35.936-->00:05:41.141
is it’s a converge device. It’s
a wireless access point. They’re
DHCP server. Firewall. They

00:05:41.141-->00:05:45.579
provided NAT. They’re a DNS
server. They have an ethernet
switch and web server

00:05:45.579-->00:05:49.883
configuration. And they also act
as a router which is connecting
those two networks and

00:05:49.883-->00:05:55.255
forwarding traffic between them.
What we’re going to be talking
about today generally look more

00:05:55.255-->00:06:00.193
like this. This is a dedicated
router and what it does is it
functions are a router and also

00:06:04.164-->00:06:09.169
if you need a nap, it’s an
excellent space heater. So
quickly what is the internet?

00:06:12.973-->00:06:18.545
Yeah. Uh one of our elected
officials in early net
neutrality debate informed us

00:06:18.545-->00:06:23.550
that the internet is a series of
tubes. [laughter] So let’s talk
about some of those tubes. Here

00:06:27.988-->00:06:33.059
we have a y’know a greenie
hacker. He hasn’t earned his
black hoodie yet. Uh he’s trying

00:06:33.059-->00:06:36.663
to get to the DefCon website.
Here he has his tube and that’s
kind of what it feels like

00:06:36.663-->00:06:40.700
usually. You type in an address,
you hit enter, and all of a
sudden the website picks- uh

00:06:40.700-->00:06:46.740
shows up on your screen. WHat’s
really happening is closer to
this. Uh where to get from side

00:06:46.740-->00:06:51.411
A- uh from one side to the
other, you have to go through a
series of- of intermediate

00:06:51.411-->00:06:55.682
networks and these are called
autonomous systems. And these
autonomous systems are actually

00:06:55.682-->00:07:00.787
what make up the internet. Uh
there is no one provider that
gets you from Point A to Point

00:07:00.787-->00:07:05.859
B. You have these different
systems such as your ISP which
then connects to another

00:07:05.859-->00:07:10.530
autonomous system that it
forwards the traffic to and so
on until you get to your

00:07:10.530-->00:07:16.136
destination. So what is an
autonomous system? Uh it’s a
group of network- it’s a network

00:07:16.136-->00:07:19.606
or group of network in the
control of a single entity.
Using an example here of Vivant

00:07:19.606-->00:07:25.845
Wireless. It’s the company I
work for. Uh identified by
autonomous system number. It

00:07:25.845-->00:07:31.318
connects to and routes traffic
between one or more other
autonomous systems. So uh this

00:07:31.318-->00:07:37.457
autonomous system connects to
Hurricane Electric in Level 3
communications. And they

00:07:37.457-->00:07:42.662
announce an internal IP address
space and address space learned
through their peers that they

00:07:42.662-->00:07:48.401
can forward traffic to. Uh this
autonomous system advertising
these two- these two particular

00:07:48.401-->00:07:54.107
routes as well as others. Uh
here’s a graph I pulled off
Hurricane Electric’s website

00:07:54.107-->00:07:58.945
which has some great BGP tools.
If you want to learn about BGP.
Uh here you can see we’re

00:07:58.945-->00:08:04.818
connected to Level 3 and
Hurricane Electric is- and those
two autonomous systems connect

00:08:04.818-->00:08:10.290
to a large number of other
autonomous systems. Now Level 3
is what’s called a Tier 1

00:08:10.290-->00:08:16.830
network. Tier 1 networks uh are-
are the big dogs. If you think
about the internet they would be

00:08:16.830-->00:08:22.168
the core of the internet. Uh
from a Tier 1 network you can
get to any place- any address uh

00:08:22.168-->00:08:26.706
that’s publicly available on the
internet. They generally have
thousands of miles of cables

00:08:26.706-->00:08:31.911
spanning countries if not
continents and they don’t pay
anybody for access to their

00:08:31.911-->00:08:38.485
networks. It’s either they- they
have a no cost agreement with
other Tier 1 networks or they

00:08:38.485-->00:08:43.223
have other networks that pay
them. Uh Hurricane Electric
happens to be a Tier 2 network

00:08:43.223-->00:08:47.861
because they pay somebody else,
but then they have a large
number of people who also uh buy

00:08:47.861-->00:08:53.833
their services and access to
their network. Now all these
autonomous systems communicate

00:08:53.833-->00:08:58.838
over the border gateway protocol
so they can exchange routing
information. Uh so autonomous

00:09:01.908-->00:09:06.613
systems they will agree to
connect as a business agreement.
You pay for access to a network

00:09:06.613-->00:09:08.615
or- or you are paid or you have
one of those a, uh, a transit
free agreement. And then your

00:09:08.615-->00:09:12.152
autonomous systems uh your BGP
routers will then announce their
routes to their neighbors. So

00:09:12.152-->00:09:14.154
you connect to another
autonomous system and it says “I
can reach this address space and

00:09:14.154-->00:09:16.156
this is how I can reach it.” And
that’s the AS Path and the
prefix and then when a packet

00:09:16.156-->00:09:18.158
comes in that needs to get to a
destination, the most specific
prefix, most specific route, the

00:09:18.158-->00:09:20.160
route with the longest match
gets chosen and the data is- is
forwarded through that next

00:09:20.160-->00:09:22.162
autonomous system. Uh after that
the shortest path and there’s
other attributes and local

00:09:22.162-->00:09:28.701
admins can set policies to
prefer certain networks as well.
Now I said BGP they’ll announce

00:09:28.701-->00:09:33.706
the space. So here we have three
different autonomous systems,
each one with its own uh prefix

00:09:35.975-->00:09:39.112
that it’s going to be
announcing. So we’re going to
look at autonomous system 3 and

00:09:39.112-->00:09:42.449
uh follow it’s announcement over
to autonomous system 1.
Autonomous system 3 says “Hey I

00:09:42.449-->00:09:46.619
can route to 13 slash 8” and it
tells that to autonomous system
2. Autonomous system 2 then

00:09:46.619-->00:09:51.624
records that and says “Hey, I
can get to that prefix through
autonomous system 3.” It then

00:10:07.774-->00:10:12.779
announces that to it’s neighbor,
autonomous system 1, and
autonomous system 1 now knows

00:10:19.185-->00:10:24.190
that it can get to 13 slash 8
through autonomous system 2 and
autonomous system 3, which is

00:10:30.463-->00:10:35.468
the final- which is where the
address space is serviced. And
then that continues and

00:10:37.670-->00:10:43.209
eventually every autonomous
system on the internet knows how
to get to 13 slash 8. Really

00:10:43.209-->00:10:48.848
bit- quick primer on BGP
announcements. Uh something to
note about border gateway- the

00:10:48.848-->00:10:53.620
border gateway protocol and
autonomous systems. There’s no
central authority that actively

00:10:53.620-->00:11:00.293
monitors, manages, enforces who
can announce a prefix. Uh when
you, you’re assigned a prefix

00:11:00.293-->00:11:05.765
through IANA and it’s regional
registrars, the same unit as you
will receive an address block.

00:11:05.765-->00:11:11.204
Now there’s no- there’s no
definite link between an
autonomous system and an address

00:11:11.204-->00:11:16.910
block. You can also have an
autonomous system without an
address block. And you can have

00:11:16.910-->00:11:23.816
a block of addresses without
having autonomous system.
There’s- there’s nothing that

00:11:23.816-->00:11:28.821
says that one person can- can
announce a certain space. And
then uh when you come with an

00:11:32.525-->00:11:34.527
agreement to peer your
autonomous systems it’s uh
really the who manages that is-

00:11:34.527-->00:11:36.529
is between those two autonomous
systems. They’ll agree “Hey, you
can pass this information to me

00:11:36.529-->00:11:38.531
and I will then pass that
routing- routing information on
to your neighbors.” There’s no

00:11:38.531-->00:11:41.067
central authority that says this
person can announce this route.
And there’s some pretty good

00:11:41.067-->00:11:46.072
reasons for that as well. Uh an
autonomous system can connect
and disconnect to its neighbors

00:11:56.883-->00:12:00.820
at will. You can always take
down your link. And when you do
that your route will disappear

00:12:00.820-->00:12:05.892
and- and your traf- traffic will
take a different route. You can
take your IP address you can

00:12:05.892-->00:12:10.530
move them to a different
autonomous system. Um if you- if
you have a provider that’s

00:12:10.530-->00:12:14.267
announcing your address space
for you and you want to upgrade
or you’re- say you’re under an

00:12:14.267-->00:12:19.005
attack and you want to move to a
different provider uh then you
do that. You say announce this

00:12:19.005-->00:12:23.009
space for me and they start
announcing this space. Uh they
don’t have to check with anyone

00:12:23.009-->00:12:27.313
to make sure they can do that
first. And you can also announce
from multiple locations. Uh any

00:12:27.313-->00:12:33.853
past traffic will- any past what
it does is you’ll have multiple
geographic locations that will

00:12:33.853-->00:12:39.425
announce a certain space and it-
your traffic goes to the closest
one. Uh Google’s DNS uh and

00:12:39.425-->00:12:44.430
other DNS servers do that for
example. And uh something to
note since the routing decision

00:12:46.633-->00:12:52.272
is made at every autonomous
system along the way, there’s no
definite path that your

00:12:52.272-->00:12:56.709
traffic’s going to take. You can
take on path to the destination
and then the return traffic can

00:12:56.709-->00:13:01.848
always take a different route.
So let’s talk about some tools
that we can use to build our own

00:13:01.848-->00:13:06.853
internet, see how this all
works, and then destroy it. Uh
first up, is mininet. Mininet is

00:13:09.756-->00:13:15.895
a network emulator that you can
use to uh stand up a realistic
network on your host. Uh it

00:13:15.895-->00:13:21.934
doesn’t require that- you don’t
have to set aside a host like
you would with a hypervisor,

00:13:21.934-->00:13:27.340
well depending on your
hypervisor. Uh it’s a simple
tool that you can use to create

00:13:27.340-->00:13:31.678
a network namespace and stand up
hosts, routers, firewalls. If
you want to learn about software

00:13:31.678-->00:13:35.348
defined networking it uses
openflow switches and you can
control- you can set up

00:13:35.348-->00:13:41.287
controllers. Uh important for
this discussion is that it is
cheaper than buying- going out

00:13:41.287-->00:13:45.391
and buying a bunch of Cisco
equipment and setting up a home
lab and it’s a lot more flexible

00:13:45.391-->00:13:51.531
and you don’t need the- the
Cisco knowledge to do it. And
it’s incredibly fast. So I say

00:13:51.531-->00:13:55.101
it’s fast. So let’s do a little
demo and see how fast we can set
this up. Let’s create this

00:13:55.101-->00:13:58.971
network here, uh 9 hosts, 4- uh
4 switches. Let’s get over here.
Oh yeah we already got it

00:13:58.971-->00:14:00.907
primed. Alright. So really quick
we’re going to set up- oh. Okay
not so quick. Alright, I guess

00:14:00.907-->00:14:05.912
we’ll go it in windows media
player then. Okay so we ran the
command. It set up the network.

00:14:08.748-->00:14:14.120
Uh created all of our hosts,
created links between the
switches. We- oh. It’s getting

00:14:14.120-->00:14:20.927
ahead of me now. We just did a
ping test between all of them.
They can all communicate with

00:14:20.927-->00:14:25.765
each other. We can run commands
on the host so we’re going to
tell one host to ping another

00:14:25.765-->00:14:29.702
host. That works. And just to
show we can still run commands
let’s get the IP address.

00:14:29.702-->00:14:34.707
Alright, so now we’ve set up a
network. We communicated with
the host and that was all of 21

00:14:37.276-->00:14:42.281
seconds to set up that network.
And how do I get back into
presentation on this? Nope. That

00:15:04.737-->00:15:09.742
wasn’t it. Somebody shout out.
How do I get this- >> [responses
from audience] >>You say U? >>

00:15:15.948-->00:15:20.953
No. View. >> View! There we go.
Full screen mode. See that’s why
it’s a good group to have a

00:15:23.022-->00:15:28.861
technical problem with.
[laughter] Alright. SO another
tool we’re going to use is

00:15:28.861-->00:15:33.866
NFQueue and libnetfilter_quese.
NFQueue is an IPTables target
that basically instead of

00:15:35.968-->00:15:40.173
accepting, dropping, or
rejecting a packet, it allows
you to throw it into a queue.

00:15:40.173-->00:15:44.644
That queue is then accessible
from userspace. You can have a
program in userspace examine

00:15:44.644-->00:15:50.216
that packet and make the routing
decision and pass it back down
to the kernel. You can also

00:15:50.216-->00:15:56.422
modify that packet before it’s
accepted. Uh really quick to set
it up. Here’s the command

00:15:56.422-->00:16:02.094
IPTables that we’re going to add
NFQueue and we’re going to send
traffic to destination port 22

00:16:02.094-->00:16:06.966
in the NFQueue. And from there
it’s accessible from userspace.
Now what do we use to deal with

00:16:06.966-->00:16:11.571
those packets? We’re going to
use Scapy. Those of you that
aren’t familiar, Scapy is a

00:16:11.571-->00:16:16.576
python module that allows for
packet manipulation, decoding,
uh we can craft raw packets. And

00:16:19.812-->00:16:25.418
most- and we can interact with
the- with net filtered queues.
Now we can craft packets and

00:16:25.418-->00:16:30.423
what we have here is a quick one
liner that- to generate a DNS
request without- yeah uh going

00:16:33.492-->00:16:36.963
through the different layers. We
set a destination. We’ve saying
UDP. We’re going to make a DNS

00:16:36.963-->00:16:41.968
packet, put a name in it, and
then we send it. That’s it. One
line. K. So let’s get back to

00:16:44.971-->00:16:51.611
the internet. Now we- how can we
exploit the internet? Uh there’s
two main things we’re going to

00:16:51.611-->00:16:57.383
talk about today: IP spoofing
and prefix hijacking. IP
spoofing is changing- changing

00:16:57.383-->00:17:01.053
the source address on your
packets as you’re sending them
out. Why you might want to do

00:17:01.053-->00:17:05.057
this- you want to hide your
identity, impersonate somebody
else to incriminate them, or

00:17:05.057-->00:17:11.130
just annoy them, or you could be
doing it for legitimate reasons
like load balancing or testing.

00:17:11.130-->00:17:16.502
Again here’s another one liner
for Scapy where we’re going to
forge the IP address of a packet

00:17:16.502-->00:17:23.009
and send it out. So why does
this work? Um routers are
examin- necessarily examining

00:17:23.009-->00:17:29.515
the source of the packet. What
their main concern is the
destination. And the- they’re

00:17:29.515-->00:17:34.587
not always configured to care
where the packet came from. So
it’s hard to say that a certain

00:17:34.587-->00:17:39.158
autonomous system shouldn’t
carry the packet. Uh because the
routes aren’t set and those IP

00:17:39.158-->00:17:44.764
addresses are portable. And it’s
also- it’s easier to trust
somebody than to distrust them.

00:17:44.764-->00:17:48.768
You have a relationship with a-
with somebody. You trust them to
be doing what they’re supposed

00:17:48.768-->00:17:53.339
to and not making your life more
difficult. So you say okay, they
must be sending me legitimate

00:17:53.339-->00:17:58.644
traffic. Uh they’re also the
issues some people don’t care or
they haven’t configured their

00:17:58.644-->00:18:03.849
systems correctly. An example of
this is Bogon routes where an
autonomous system will advertise

00:18:03.849-->00:18:10.589
private address spaces like 10-
10 dots 192168s, various address
spaces that shouldn’t be used on

00:18:10.589-->00:18:16.662
the- the public internet. Uh if
you want to see who’s doing that
uh Hurricane Electric has a page

00:18:16.662-->00:18:20.666
they’ll give you a report of
what- whoever- different people
are sending out Bogon routes.

00:18:20.666-->00:18:25.671
Actually kind of interesting.
Okay. So using IP spoofing what
can we do? Uh we- we’re going to

00:18:28.140-->00:18:32.945
talk about state exhaustion
attacks specifically syn floods
and we’re going to do that

00:18:32.945-->00:18:38.818
really quickly because it’s kind
of solved but we’re going to
come back to that later. And

00:18:38.818-->00:18:44.123
volumetric attacks specifically
reflection attacks. Really quick
syn floods, older attack. Uh

00:18:44.123-->00:18:48.594
TCP. Uh to form a connection you
have to go through a 3 way
handshake where you send a syn

00:18:48.594-->00:18:53.599
packet that- to a server, the
server responds to a syn ack,
and then you acknowledge their

00:18:53.599-->00:18:58.437
syn ack. Uh you synchronize and
you now have a session with
them. Uh to- initially when

00:18:58.437-->00:19:03.776
doing that your server would set
aside a certain amount of memory
to track that session waiting

00:19:03.776-->00:19:08.047
for the syn ack packet because
of course the person is going to
respond with- correctly to it

00:19:08.047-->00:19:12.118
and everyone’s going to be happy
and communicate. You send a lot
of syn packets, it consumes a

00:19:12.118-->00:19:17.123
lot of resources, the server is
no longer able to take new
connections. Uh mostly solved

00:19:17.123-->00:19:21.661
with things like syn cookies but
we’re going to show how we can
do something similar to that

00:19:21.661-->00:19:26.665
again. Uh now volumetric attacks
specifically reflection attacks.
Oh, we’re going to have a demo

00:19:30.903-->00:19:34.840
where we go through n of the
more dangerous ones that are on
the internet today./ Really

00:19:34.840-->00:19:40.479
quick though IP spoofing uh
let’s say we want to talk to the
DNS server. Host A says “Host B,

00:19:40.479-->00:19:46.419
what’s the address for I Love
Puppies?” with a source address
of Host A. It responds looking

00:19:46.419-->00:19:52.091
at the source address and says
“Host A, I love puppies is at
whatever address.” Alright so

00:19:52.091-->00:19:57.196
let’s say we want to spoof. Host
B, give me everything you know
about I Love Puppies. Sincerely,

00:19:57.196-->00:20:02.201
Host C. We’re going to throw
Host C’s address on as a source
address. It then responds to

00:20:04.370-->00:20:09.375
Host C with all the information.
Host C says “Huh? I didn’t ask
for that.” SO now we can scale

00:20:12.411-->00:20:18.217
that up. Uh we can have our
botnet, all of our zombies that
are then sending spoofed

00:20:18.217-->00:20:23.456
requests to a large number of
DNS servers or UDP servers and
these are going to act as

00:20:23.456-->00:20:28.461
reflectors and they’re all going
to have a source address of
whoever we want to target. So

00:20:30.529-->00:20:34.166
our botnet is going to send a
lot of traffic to our
reflectors. Our reflectors are

00:20:34.166-->00:20:37.770
going to send an even more- an
even larger amount of traffic
back to our target. Our target’s

00:20:37.770-->00:20:42.408
not going to be able to handle
it and that’s the premise behind
a reflect- a distributed

00:20:42.408-->00:20:47.179
reflection denial of service
attack. So one way of
classifying these is the

00:20:47.179-->00:20:53.385
bandwidth amplification factor
uh US CERT uses that. Basically
what it is is you’re looking at

00:20:53.385-->00:20:58.390
the size of the payload in the
responses and comparing that to
the payload in the request. Now

00:21:00.993-->00:21:05.331
certain UDP services have
different reflection- bandwidth
amplification factors.

00:21:05.331-->00:21:11.403
BitTorrent 3.8 so for every byte
you send it’s going to respond
with 3.8 times as much to

00:21:11.403-->00:21:14.173
whoever your target is. SNMPv2
6.3. DNS 28 to 54. NTP 550
about. ANd then the latest

00:21:14.173-->00:21:16.175
hotness is Memcached. So what
memcached is its a in memory
data storage that basically

00:21:16.175-->00:21:18.177
allows you to get to put
information in quickly and then
quickly retrieve it. It’s often

00:21:18.177-->00:21:23.182
used with web servers to uh
manage uh web session state.
10-->000 foot overview there. So

00:21:40.299-->00:21:45.838
in this- so let’s set up this
attack. Let’s set up a network
in mininet, use the tools that

00:21:45.838-->00:21:50.943
we have, and perform it. So uh
we’re going to simplify it a
little bit. We know the internet

00:21:50.943-->00:21:55.147
is just a series of routers that
make routing decisions so we can
replace that with one router.

00:21:55.147-->00:21:59.852
We’ll call that the internet.
And then we have our attacker,
our reflector, and our target.

00:21:59.852-->00:22:04.790
So let’s see how this works.
Okay so really quick. Set up our
lab. We created our three hosts,

00:22:24.677-->00:22:29.882
our router and set up links
between them. Uh in the
background we’ve got a packet

00:22:29.882-->00:22:35.120
capture running. Really quick
just so it shows the packet
capture we’re going to send a

00:22:35.120-->00:22:40.125
ping from our attacker to our
reflector. Okay. And another one
yada yada. Alright so let’s

00:22:47.466-->00:22:53.539
start up our memcached service
on our reflector. Uh we’re going
to tell it we want to listen on

00:22:53.539-->00:22:58.544
all ports and all addresses-
interfaces and that we want to
use- we want it to use UDP.

00:23:04.416-->00:23:09.188
Alright and let’s quickly send
our one spoof packet. Now
there’s a little bit of magic

00:23:09.188-->00:23:12.891
sauce behind this to get a
higher amplification factor but
we don’t change any of the

00:23:12.891-->00:23:17.896
settings in it. And so we’ve
sent our one packet uh using our
target’s uh our target’s IP

00:23:23.569-->00:23:28.040
address. So let’s see what
happened like I said we had a
packet capture running in the

00:23:28.040-->00:23:33.045
background. Alright so here is
the spoofed packet that we sent
uh highlighted then. It’s got

00:23:36.415-->00:23:41.654
about 15 bytes worth of payload.
One single packet. And also for
comparison you can see our ping

00:23:41.654-->00:23:46.959
so you can see that we did
actually spoof the address.
Here’s the response. So that’s-

00:23:46.959-->00:23:51.964
the bottom one there is packet
761. Part of it- it’s part of
the response. And uh these are

00:23:54.933-->00:24:00.739
full UDP packets. So what so we
have? We sent one packet with 15
bytes worth of payload and our

00:24:00.739-->00:24:05.744
response was 753 packets with
1-->051,705 byte- payload bytes so
that gives us a bandwidth

00:24:09.648-->00:24:15.421
amplification factor of about
70-->000. And for those of you
that have been spending too much

00:24:15.421-->00:24:20.426
time in the wireless village,
here it is in decibels.
[laughter] Alright. So uh

00:24:22.928-->00:24:28.200
according to US CERT an
memcached D, 10-->000 to 50-->000
bandwidth amplification factor.

00:24:28.200-->00:24:35.107
We just showed it can be 70-->000.
Um it seems to be some area of
debate with how effective this

00:24:35.107-->00:24:41.413
is but as you can see no matter
what it’s a very effective
attack. Uh earlier this year

00:24:41.413-->00:24:46.418
this attack was used to generate
1.7 terabit per second of
traffic towards the service.

00:24:48.821-->00:24:51.824
When you’re dealing with that
you’re not actually taking down
the service running on the

00:24:51.824-->00:24:55.928
hosts. You’re not necessarily
taking down the hosts either.
What you’re doing is taking down

00:24:55.928-->00:25:01.033
all the infrastructure around
it. Uh when you start getting
1.7 terabits worth of traffic

00:25:01.033-->00:25:04.737
you’re upstream providers are
going to start shutting off your
ports because it’s taking them

00:25:04.737-->00:25:11.276
down as well. I provide some
sample code but the code I
provide is simplified. It

00:25:11.276-->00:25:17.483
doesn’t have the magic sauce. It
just uses the stets call so it
doesn’t provide 70 k bandwidth

00:25:17.483-->00:25:24.056
amplification factor. So really
quick we have some defenses.
Know your attack surface, know

00:25:24.056-->00:25:28.427
what services you’re running if
you’re running UDP services, why
are you running them. If you

00:25:28.427-->00:25:33.899
don’t need them, shut them off.
Form a good relationship with
your upstream provider in case

00:25:33.899-->00:25:39.204
you’re this- the- you’re the
reflector or the target. Make
sure that you can work with them

00:25:39.204-->00:25:43.208
to filter your traffic and
monitor your infrastructure so
you can know if you’re

00:25:43.208-->00:25:48.213
participating. So let’s go on to
BGP prefix hijacks. So what
happens in these is as I showed

00:25:51.583-->00:25:55.854
earlier, autonomous systems run
how they route traffic by
announcing their routes to their

00:25:55.854-->00:26:00.793
neighbors. So. What happens in a
prefix hijack is that a
malicious autonomous system

00:26:03.362-->00:26:07.699
advertises a more specific route
than the route that’s already
out there. If there’s a route

00:26:07.699-->00:26:14.239
for slash 23, it announces a
slash 24. All the- all the
traffic within that slash 24

00:26:14.239-->00:26:18.777
will go to them because they
have the most specific route. Uh
the neighbors then pass on this

00:26:18.777-->00:26:23.315
route to their neighbors and
eventually everyone has that
route and all the traffic is

00:26:23.315-->00:26:28.320
route- is heading towards that
route. Uh an early example of
this in 1997, the AS 7007

00:26:31.190-->00:26:36.195
incident. Uh a network
disaggregated all their routes
into slash 24s, threw their own

00:26:39.064-->00:26:44.069
autonomous systems number on it,
and then uh advertised that out
on the internet. So now that

00:26:47.306-->00:26:51.510
it’s 2018 we can do a high tech
computer simulation of what
happened to the internet traffic

00:26:51.510-->00:26:57.916
on that day. So here that little
pink dot is AS 7007. I think it
was in Virginia. Uh they

00:26:57.916-->00:27:02.855
announce their routes and all
the internet traffic started
going to them. They also

00:27:05.224-->00:27:11.597
apparently turned into the Death
Star. [laughter] So what
happened was basic- large

00:27:11.597-->00:27:17.769
portions of the internet ended
up black holed for several
hours. Also, their upstream

00:27:17.769-->00:27:24.443
provider shut them off and ended
up having to reset- uh reset
large portions of their network.

00:27:24.443-->00:27:31.183
Most routes aren’t slash 24s and
the equipment at that time
wasn’t made to handle the entire

00:27:31.183-->00:27:36.021
internet in slash 24s so the
routers would crash, come back
up, relearn all the bad routes

00:27:36.021-->00:27:40.492
from their neighbors, crash, and
then the cycle would repeat. It
really couldn’t have been better

00:27:40.492-->00:27:45.964
if it had been planned. So
there’s hi- there’s certain
defenses you can have> here’s

00:27:45.964-->00:27:50.402
just a list of them. Probably
the most prominent is the uh is
the routing registry where you

00:27:50.402-->00:27:54.373
register your routes and say
this autonomous system is going
to be advertised through this

00:27:54.373-->00:27:58.076
and this IP prefix is going to
advertised through this
autonomous system. And there’s

00:27:58.076-->00:28:02.614
other ways to ensure
communication is secure,
authorized and on the same page.

00:28:02.614-->00:28:09.121
So let’s see how well that’s
worked. Here we have in April
2o18 the My Ether wallet dot com

00:28:09.121-->00:28:14.159
attack. I don’t know if any of
you uh. I’m sure nobody here
uses cryptocurrency, right?

00:28:14.159-->00:28:19.164
Yeah. Um during the hijack, it
wasn’t actually a hijack against
the servers themselves. It was a

00:28:21.199-->00:28:26.038
hijack against the DNS
infrastructure that- that My
Ether Wallet was using,

00:28:26.038-->00:28:31.043
specifically AWS and uh
malicious- uh poisoned DNS
requests were returned plain to

00:28:33.045-->00:28:39.952
a Russian provider. Now uh there
were defenses in place. The- not
all networks carried the bad

00:28:39.952-->00:28:45.090
routes, but enough did. Really
all you need is 1 person who’s
not configured correctly to pass

00:28:45.090-->00:28:50.295
along the information and all
the defenses break down due to
these trust relationships. So

00:28:50.295-->00:28:53.599
really quick how things are
supposed to work. On the left
side there we have a client

00:28:53.599-->00:28:59.871
trying to get to My Ether Wallet
dot com. Uh on the right Amazon
who route 53 who is providing

00:28:59.871-->00:29:05.377
the DNS services. Announces its
route to the internet, so it
starts to propagate its route.

00:29:05.377-->00:29:10.649
Uh the client tr- asks the DNS
server how to get to My Ether
Wallet dot com. It doesn’t know,

00:29:10.649-->00:29:16.888
has a ca- has a miss so it hits
Amazon says hey how do I get to
this? A response is returned, it

00:29:16.888-->00:29:22.694
caches, passes it to the client.
Client then connects to My Ether
Wallet dot com and logs in. Okay

00:29:22.694-->00:29:28.066
that’s how it’s supposed to
work. What really happened was
that another autonomous system,

00:29:28.066-->00:29:33.071
likely on behalf of one of it’s
customers, uh began advertises a
slash 24 for Amazon’s DNS server

00:29:37.009-->00:29:42.014
space where Amazon was using
slash 23s. SO advertising more
specific routes. When those

00:29:44.049-->00:29:51.023
propagated up, uh all requests
to AMazon’s DNS server went to
this malicious DNS server. A

00:29:51.023-->00:29:57.095
response was returned for a
credential harvester. Uh the
client is connected to the

00:29:57.095-->00:30:02.401
credential harvester for some
reason the attackers decided not
to get a valid SSL certificate

00:30:02.401-->00:30:08.707
uh so they were agreed- people
were greeted to an SSL warning
and uh some of them decided not

00:30:08.707-->00:30:13.712
to heed the warning and ended up
losing money. [laughter] So
let’s- let’s give it a try. Add

00:30:21.553-->00:30:26.558
credit where credit’s due. This
is a modification of a lab uh
from oh. Quick note. DefCon 16

00:30:30.328-->00:30:37.169
there’s an awesome attack
against the actual IP address
for the DefCon web servers I

00:30:37.169-->00:30:42.441
believe. Trying to remember
exactly what it was. Uh go check
it out. It’s good. I’m not going

00:30:42.441-->00:30:47.813
to demo it here because that’s
their thing. It was awesome. So
here we’re going to do a prefix

00:30:47.813-->00:30:52.551
hijack. Uh based- we’re going to
modify a demo that’s already out
there on the mininet website you

00:30:52.551-->00:30:57.556
can get to it but we’ve changed
it to be a prefix hijack instead
of a path hijack. So here’s our

00:30:59.958-->00:31:05.197
three networks. We looked at
before AS1, 2 and 3 advertising
11 8, 12 8, 13 8. We have a web

00:31:05.197-->00:31:10.202
server on AS 3. Um well. Yeah.
How am I doing on time? Okay
good. Not bad. Not great. Okay

00:31:22.280-->00:31:27.285
so really quick here’s our-
here’s our environment. Top left
we’re going to start up- we’re

00:31:33.125-->00:31:38.130
going to start up our network.
Uh bottom left we’re going to be
controlling whether or not

00:31:41.566-->00:31:46.071
autonomous systems are running.
And on the right we’re going to
be trying to hit our web server

00:31:46.071-->00:31:51.076
to see what happens. So really
quick let’s pull the routing
table. Okay. SO looking at-

00:31:53.645-->00:31:57.916
looking at that routing table.
Sorry this is broken up. Here’s
the routing table that we have

00:31:57.916-->00:32:02.387
from autonomous system 1 it can
see that through autonomous
system 2 and autonomous system 3

00:32:02.387-->00:32:07.392
it can get to 13 slash 8.
Alright. Alright so back in our
attack. We’re- we’re now hitting

00:32:16.101-->00:32:22.007
a website on that web server.
Over here on the bottom left
we’re going to start up our

00:32:22.007-->00:32:27.846
autonomous system 4 which is
going to advertise a slash 9
compared to a slash 8 for this

00:32:27.846-->00:32:30.682
uh 13 slash 8 web space or IP
space. And on the right in a
second you’ll see it switching

00:32:30.682-->00:32:32.684
over the the attacking web
server. Okay. So pulling our
routing table again we can see

00:32:32.684-->00:32:36.288
that we now have another route.
Uh you probably can’t see very
well so let’s pull it up. We

00:32:36.288-->00:32:41.293
started autonomous system 4 and
it announced a more specific
route for slash 13 which caused

00:32:45.463-->00:32:50.468
all of our traffic to divert to
our malicious web server. Now
it’s not the most exciting

00:32:53.605-->00:32:58.810
attack and the reason for that
is that everything worked the
way it’s supposed to. Uh

00:32:58.810-->00:33:03.748
somebody advertised a better way
to get to a- to an IP prefix so
everyone took it. So without

00:33:16.161-->00:33:21.166
defenses this is the correct
operation. So defenses would be
registering- register your route

00:33:24.636-->00:33:29.875
in an IRR. Establish that
relationship with the upstream
providers so that they know what

00:33:29.875-->00:33:33.879
your advertising and they’re
able to defend against people
trying to take over your space.

00:33:33.879-->00:33:38.884
Filter prefixes that you receive
from others. Uh to avoid having
a website taken over use DNSSEC.

00:33:40.986-->00:33:47.659
HTTPS with HSTS, and make sure
you’re monitoring your
infrastructure. Alright so let’s

00:33:47.659-->00:33:52.664
move on to a little more
theoretical. So at the beginning
it showed that alert that nation

00:33:54.933-->00:34:00.005
states are trying to take over
routers basically. So why should
nation states get to have all

00:34:00.005-->00:34:05.043
the fun? Let’s- let’s- let’s do
some of these attacks ourselves.
Let’s- let’s- we don’t know

00:34:05.043-->00:34:08.713
exactly what people are going to
be- what attacks are going to be
done but we can make some

00:34:08.713-->00:34:13.718
guesses and one of the ways we
can make some guesses is because
uh we already know what things

00:34:16.655-->00:34:19.758
are going to be done because we
can see them now in certain
pieces of infrastructure. Really

00:34:19.758-->00:34:24.896
quick, we know that if you have
control of a router as with any,
y’know, just think of it as your

00:34:24.896-->00:34:29.367
network monitoring equipment.
You can monitor traffic. You can
redirect traffic, which we saw.

00:34:29.367-->00:34:33.104
You can modify traffic as it’s
passing through. You can block
traffic and you can flip the

00:34:33.104-->00:34:37.409
switch and just take down
transit infrastructure. Now we
don’t really need to imagine

00:34:37.409-->00:34:41.980
much because we already see this
in action. There’s malicious
networking equipment widely

00:34:41.980-->00:34:46.985
deployed. Uh now malicious is-
is relative to who’s performing
the operation. So you- I-

00:34:49.454-->00:34:56.261
intrusion detection systems,
intrusion prevention systems,
other firewalls, uh internet

00:34:56.261-->00:35:00.999
service provides doing service
prioritization or denying access
to certain services and then you

00:35:00.999-->00:35:07.772
have nation level monitoring and
filtering enforcement such as a
country putting up a large

00:35:07.772-->00:35:12.911
firewall to restrict internet
access. So we- we can already
see what is- what can be done

00:35:12.911-->00:35:17.315
with this because it’s already
being done. Corporations are
already doing it. Uh my cell

00:35:17.315-->00:35:22.320
phone provider is blocking my
VPN access for some reason.
Y’know we already see this in

00:35:25.256-->00:35:30.261
action. But what else can we do?
So we know that when you have-
we know that you can- you can

00:35:32.764-->00:35:36.534
prevent IP spoofing by
registering your route and
having it making sure that

00:35:36.534-->00:35:41.006
people aren’t passing bad
routes. But we can also defeat
that if we have control of one

00:35:41.006-->00:35:45.577
of the routers. So if you have a
router on say an internet
service provider’s network, it

00:35:45.577-->00:35:51.349
has the ability to talk for
addresses on that network and no
one’s going to question it

00:35:51.349-->00:35:56.654
because it’s supposed to be the
one carrying that traffic. So
we’re- in doing that we can

00:35:56.654-->00:36:01.926
defeat IP- uh prefix filtering.
Uh we can spoof any host we want
on that network. It doesn’t need

00:36:01.926-->00:36:07.065
to exist. It doesn’t
particularly otherwise, but- but
even in this case we can- we can

00:36:07.065-->00:36:10.468
now have bidirectional
communication. We can send
traffic for a host and then

00:36:10.468-->00:36:15.473
receive the response. And we can
reduce our botnets from
thousands of devices to just a

00:36:15.473-->00:36:22.247
handful of routers. Now I say we
can have bidirectional
communication uh before you

00:36:22.247-->00:36:26.685
can’t really spoof TCP traffic
because you have to have- you
have that handshake and you have

00:36:26.685-->00:36:31.690
to be able to go through the
synchronization but since we’re
receiving the responses we can

00:36:34.025-->00:36:38.997
now open up TCP sessions by
bidirectional communication that
we wouldn’t have been able to

00:36:38.997-->00:36:45.703
otherwise. And this is kind of
concerning because it breaks our
attribution models. Uh a lot of

00:36:45.703-->00:36:52.177
you might get daily, weekly, or
whatever threat feeds with part
of what they have is a list of

00:36:52.177-->00:36:55.780
IP addresses associated with
certain activities. You throw
them into your intrusion

00:36:55.780-->00:37:00.719
detection systems, uh you block
them on your firewalls and- and
that’s good. But now we can- we

00:37:04.289-->00:37:11.129
can change our IP address at
will because we can access any
of these other devices uh we can

00:37:11.129-->00:37:16.134
no longer really trust the IP
addresses that we have in our
threat feeds. Now this is on

00:37:18.536-->00:37:24.876
asymmetric route saying it gets-
it receives a response. So what
can we do if- if- if we still

00:37:24.876-->00:37:30.281
want to spoof traffic from a
different network and we’re not
receiving the response. Uh like

00:37:30.281-->00:37:35.820
I said before, you really can’t
spoof a TCP connection because
you have to- you have to

00:37:35.820-->00:37:40.825
synchronize using the server and
this can be using a randomized
sequence number. However, if we

00:37:43.061-->00:37:48.833
control one of the routers along
the path to that spoofed host uh
we can- and we can still send

00:37:48.833-->00:37:55.573
our traffic from a different
portion of the internet and have
a- a full bidirectional- uh be

00:37:55.573-->00:38:01.012
able to maintain bidirectional
communication and go through our
TCP handshake. So we’re going to

00:38:01.012-->00:38:07.252
do a quick little attack here.
Um we’re going to spoof a syn
packet but we’re going to

00:38:07.252-->00:38:11.489
capture the response on the
second router. The router on the
right there and then uh we’re

00:38:11.489-->00:38:17.462
going to have that router send
that information to our- to our
attacking- attacker computer

00:38:17.462-->00:38:22.100
specifically the sequence number
that it needs- the sequence
number that it needs to uh

00:38:22.100-->00:38:28.573
complete the handshake and then
we’re going to complete the
handshake. So I simplified a

00:38:28.573-->00:38:33.578
little bit for the demo. Uh
we’re replacing the routers with
switches and running our- our

00:38:39.751-->00:38:44.756
interceptor on the spoofed host
but same effect so. Nope that’s
the wrong one. Alright. So

00:38:54.199-->00:38:59.604
really quick we’re going to see
what our IP address is and we’re
going to request a page from a

00:38:59.604-->00:39:06.110
web server that’s going to
respond with our IP address that
matches up. 10 0 10 90. And then

00:39:06.110-->00:39:13.051
we’re going to make it so we can
no longer communicate directly
with that host just for the

00:39:13.051-->00:39:16.087
purposes of the demonstration.
So now we can no longer
communicate with the web server,

00:39:16.087-->00:39:22.660
just so you guys believe me, and
we’re going to spoof a TCP
connection. So here we’re going

00:39:22.660-->00:39:27.665
to send a syn packet. That’s
going to be intercepted and sent
back to us. And then we’re going

00:39:27.665-->00:39:32.670
to complete the handshake and
make- and request traffic. Oh.
Son of a gun. That went too

00:39:36.107-->00:39:41.112
fast. Alright. Alright so here
we’re making our HTTP request
and here’s the response that we

00:39:51.189-->00:39:56.461
received back. We were able to
complete our TCP handshake uh
using spoofed traffic and then

00:39:56.461-->00:40:00.999
make a request and receive that-
that response as it’s being sent
to the address that we’re

00:40:00.999-->00:40:06.004
spoofing. Now to do this we need
a communication channel. Have I-
I had it out of uh uh full

00:40:14.445-->00:40:19.450
screen mode for a while haven’t
I? Somebody tell me these
things. Alright so we need a

00:40:22.220-->00:40:24.956
control channel to be able to do
this. We need to be able to
communicate between our

00:40:24.956-->00:40:30.928
interceptor and the- the host
that’s doing the spoofing. Now
how can we do this? Uh one way

00:40:30.928-->00:40:35.633
is network steganography.
Steganography is hiding data and
it’s presence from an observer.

00:40:35.633-->00:40:41.572
Uh there’s numerous ways of
doing this with network traffic.
Some of them are pretty slow.

00:40:41.572-->00:40:47.946
You’ll slip a flag in a- in a
header which gives you about 1
bit per packet. Not the quickest

00:40:47.946-->00:40:53.851
thing ever but if we want to
trade a degree of stealth for
increased data rate what we can

00:40:53.851-->00:40:57.488
do is we can inject traffic into
other packets as they’re
trafficking- as they’re passing

00:40:57.488-->00:41:02.160
through a node and then strip
that data out uh before it’s
passed on to its final

00:41:02.160-->00:41:07.699
destination. And to do this
HTTPS and other encrypted
traffic, using that as our cover

00:41:07.699-->00:41:12.704
medium is ideal. Uh really quick
uh here’s a TCP packet. The
payload can be, assuming, a

00:41:16.474-->00:41:19.877
payload can usually be up to
1460 bytes uh but a lot of
traffic is either has a full

00:41:19.877-->00:41:21.879
payload or it has no payload as
an ack packet. There’s a bi-
there’s a bimodal distribution

00:41:21.879-->00:41:26.784
on the internet and uh basically
it- you’ll have a lot of traffic
that’s being receiving and a lot

00:41:26.784-->00:41:31.789
of ack packets for that received
traffic. So these ack packets
have a lot of free space that we

00:41:38.229-->00:41:43.234
can use. There’s nothing that
says that you can’t send data
with an ack packet. In fact it’s

00:41:49.107-->00:41:54.112
normal. I got a clap for that.
Okay. [applause] Oh. Oh yeah
it’s nice. I- I made a meme.

00:42:00.518-->00:42:06.924
Alright so we’re running low on-
how are we doing on time? Okay.
I can’t see anyone anyways so.

00:42:06.924-->00:42:12.797
Alright so what I’m proposing-
we just- we use excess space
that’s not being consumed and we

00:42:12.797-->00:42:18.603
inject our own traffic into it.
Now we need to make sure that it
can’t be read as well. Wait.

00:42:18.603-->00:42:24.308
Yeah. We want to make sure that
it can’t be read so we’re going
to encrypt everything. At the

00:42:24.308-->00:42:28.546
end we’re going to put a counter
that- an encrypted counter that
says how much data we’re going

00:42:28.546-->00:42:33.151
to put in it so we can quickly
then pull that data out, check
for the flags at the beginning

00:42:33.151-->00:42:37.922
and end of the data that we’re
sending, and know if its
actually our traffic or is it’s

00:42:37.922-->00:42:42.927
a mistake. So three steps before
we can get to our data that
allows us to quickly toss out

00:42:42.927-->00:42:47.999
traffic that looks like our data
but is not. If that makes sense.
Sorry I’m rushing to make sure

00:42:47.999-->00:42:52.136
we get this closed. Uh why are
we going to use HTTPS? Most of
the internet is HTTPS. Uh it’s

00:42:52.136-->00:42:59.076
expensive to monitor HTTPS
traffic and there is little
value in recording it. Uh you

00:42:59.076-->00:43:05.583
can gather metadata about it but
there’s a- if you record HTTPS
traffic on a large scale what

00:43:05.583-->00:43:10.087
you have is a bunch of data that
you can’t read that’s going to
fill up your drives. Uh and when

00:43:10.087-->00:43:13.858
properly implemented encrypted
data is pretty much
statistically indistinguishable

00:43:13.858-->00:43:18.996
from random data. So we can take
our- we can take this already
encrypted data, throw our

00:43:18.996-->00:43:23.167
encrypted data on the end and
there shouldn’t be any way of
determining that we’ve added

00:43:23.167-->00:43:28.172
data. Uh this was the demo that
I was gonna do. As you might be
able to guess it ended up being

00:43:31.309-->00:43:36.180
kind of busy. Uh so we’re going
to simplify it and we’re going
to do a demo between two hosts

00:43:36.180-->00:43:41.052
that have had their traffic
blocked basically. Right on this
say autonomous system 1 and

00:43:41.052-->00:43:46.624
autonomous system 4. Just to
show that it works. So we’re
going to bypass some blocking

00:43:46.624-->00:43:51.629
through our covert channel.
Yeah. Don’t let me forget to go
back into full screen mode. On

00:43:56.968-->00:44:01.906
you guys. Just kidding. Alright.
So here we’re just testing that
we can reach the web server on

00:44:07.078-->00:44:13.985
10 0 10 90. Uh and then we’re
going to set up a listener
through- using our tunnel

00:44:13.985-->00:44:20.558
through local host 8765. Now
we’ve just blocked access to it
on port 80 so we can no longer

00:44:20.558-->00:44:27.465
directly access that web server
on port 80. So now- and that
still doesn’t work- so now we’re

00:44:27.465-->00:44:32.336
going to start our covert
channel. What- what we’re going
to do is we’re going to start-

00:44:32.336-->00:44:37.041
on the other end we’ve already
started our listener and then
we’re going to run this- quickly

00:44:37.041-->00:44:41.712
run this script starts the
listener on this end. It creates
the channel and then gives us a

00:44:41.712-->00:44:45.950
bunch of cover traffic and I’m
just using watch and a curl
command to just generate a bunch

00:44:45.950-->00:44:50.955
of HTTPS traffic. There we go.
Okay so we’ve started it and
let’s see. So now we have a

00:45:01.299-->00:45:05.670
channel that we can use- that-
here’s the HTTPS request that we
got to the server that we

00:45:05.670-->00:45:10.908
couldn’t access before. What we
did was we hit a local listener
on our box, sent that over the

00:45:10.908-->00:45:17.848
tunnel using uh HTTPS traffic as
our cover medium, and then had
uh the other side complete the

00:45:17.848-->00:45:24.455
connection to the web server and
return that traffic back to us.
So um means of creating a covert

00:45:24.455-->00:45:30.261
channel there. And what does
that look like? At the packet
level? And going back into full

00:45:30.261-->00:45:35.266
screen. Yes. So here’s the
original packet and here’s-
here’s the packet with our data

00:45:38.703-->00:45:44.275
added onto it. And uh at the end
uh I left the counter
unencrypted so we could look at

00:45:44.275-->00:45:48.546
that. So what you have is
traffic that looks like the
traffic that we already have

00:45:48.546-->00:45:52.483
there. Generally
indistinguishable from what
should be there. Now if you’re

00:45:52.483-->00:45:55.786
going to monitor- if you’re
going to monitor sessions and
keep track of seq- uh

00:45:55.786-->00:46:01.292
acknowledgements you might be
able to detect this is going on
but if this isn’t on a connect

00:46:01.292-->00:46:04.729
that you would expect to be
malicious or that you would want
to monitor chances are you’re

00:46:04.729-->00:46:09.000
not going to be doing full
session monitoring. And this is
going to slide by along with the

00:46:09.000-->00:46:14.005
other terabytes of HTTPS
traffic. Okay. Uh thanks for
listening. Appreciate you

00:46:23.447-->00:46:26.784
coming. [applause]

