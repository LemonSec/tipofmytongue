00:00:00.033-->00:00:03.670
>>This is uh, this is going to
be a fun talk um I mean there
are things on the stage,

00:00:03.670-->00:00:08.675
hopefully we see some demos.
There are videos, there’s audio
um this should be a lot of fun

00:00:08.675-->00:00:12.980
and remember um and remember
this is a first time speaker
he’s going to have his uh, he

00:00:12.980-->00:00:17.684
wants his hydration afterwards
so we’ll give it to him
afterwards uh per his election.

00:00:17.684-->00:00:22.689
Um, let’s give him a big round
of applause [clapping] >>Thanks,
so, thank you very much,

00:00:28.996-->00:00:34.001
every-everyone can hear me? Yes,
no, k, great. So, uh, welcome to
my talk about having fun with

00:00:36.069-->00:00:42.509
IoT, the reverse engineering and
hacking of Xiaomi IoT devices.
Um, so the outline for my talk

00:00:42.509-->00:00:47.314
will be the following if your
short uh, motivation uh why I
did that. I’ll give you an

00:00:47.314-->00:00:52.853
introduction into the xiaomi
cloud um, then we go to the
overview of the devices, next up

00:00:52.853-->00:00:58.025
will be the reverse engineering
of the devices and at the end we
modify them. Um, some info about

00:00:58.025-->00:01:01.428
me I’m a researcher at
Northeastern University in
Boston, and I’m working with uh

00:01:01.428-->00:01:06.466
Professor Guevara Noubir. Uh,
but I’m also a grad student at
TU Darmstadt in Germany and uh

00:01:06.466-->00:01:10.571
my interest in the moment is
like reverse engineering all
kinds of interesting devices,

00:01:10.571-->00:01:15.175
for example IoT’s, smart locks
and of course physical locks.
Um, that’s all the things that

00:01:15.175-->00:01:20.180
you need to know about me. Uh,
ok. So, fort-motivation, why we
reverse IoT devices. Well, some

00:01:23.917-->00:01:28.889
people do that to find and
exploit bugs to hack other
people. Um, but for me it’s like

00:01:28.889-->00:01:34.127
a little bit different. Um, I
want to de-attach the devices
from the vendor. There have been

00:01:34.127-->00:01:39.266
like a very famous example in
Europe, the company E-large
which has disconnected all the

00:01:39.266-->00:01:44.738
European uh light bulbs because
of the gdpr. Uh now they work
again but I mean it shows that

00:01:44.738-->00:01:50.777
it’s somewhat critical. Um, the
other thing is we want to
enhance functionality, for

00:01:50.777-->00:01:55.716
example adding new features,
change the localization, uh the
vacuum cleaner for example talks

00:01:55.716-->00:02:01.088
chinese with me, my chinese is
non existing so, English would
be better. And some devices have

00:02:01.088-->00:02:06.460
some uh, ge- Geo blocking thing,
so basically if you buy a device
in Taiwan, you cannot use it in

00:02:06.460-->00:02:11.865
China for example. Um, another
very important thing is also to
support our researchers, for

00:02:11.865-->00:02:16.970
example there’s a Mon(IoT)or Lab
at Northeastern where we have a
lot of home appliances and

00:02:16.970-->00:02:21.975
they’re looking uh into the
traffic of these. And then this
lab washed last week my laundry

00:02:21.975-->00:02:26.980
so it’s a very nice lab, um
yeah. One important thing, um
responsible disclosure mm I get

00:02:29.983-->00:02:35.022
always the question like hey did
you disclose the uh
vulnerabilities to the vendor,

00:02:35.022-->00:02:39.459
and the thing is, it’s always a
little bit complicated. So if
there is a specific conflict

00:02:39.459-->00:02:45.632
between vulnerability and device
security. Um, when I presented
initially my talk in the cross

00:02:45.632-->00:02:48.435
communication congress about
some rooting method for the
vacuum cleaner for the

00:02:48.435-->00:02:53.440
generation one um if I would
have told the vendor about that
before hand, then I would have

00:02:55.675-->00:03:01.882
to tell him that probably no one
would be able to root his device
and so see is, see it as more of

00:03:01.882-->00:03:07.587
a service for the community,
instead of getting me rich by
the back pocket program. Um, in

00:03:07.587-->00:03:11.558
this case, uh for this
presentation, I contacted also
the Xiaomi security team before

00:03:11.558-->00:03:16.563
that and told them what I want
to publish. Ok, so, how we
started, in May 2017 uh, I uh,

00:03:20.033-->00:03:24.171
Donnie Bigama and I were looking
at a couple of devices and I
bought a vacuum clean robot to

00:03:24.171-->00:03:29.276
clean my apartment and this
whole thing continued to these
smart home gateways and

00:03:29.276-->00:03:34.514
lightbulbs and over the time it
got even more and more devices
which I bought and I take a look

00:03:34.514-->00:03:39.286
at. Now you might ask hey why I
started with vacuum cleaners?
And um, the thing is the

00:03:39.286-->00:03:44.391
following, um this is the
advertisement of um Xiaomi about
the vacuum cleaner generation

00:03:44.391-->00:03:48.962
one and it tells you this thing
has 3 processors and one of them
is a quad core. Don’t you think

00:03:48.962-->00:03:54.468
like hey a quad core in a vacuum
cleaner? How cool is that,
right? So, this was the initial

00:03:54.468-->00:03:59.906
thing how we, uh, uh, started um
doing this research because it
was like very interesting

00:03:59.906-->00:04:04.845
platform. Ok, let’s talk about
the Xiaomi cloud. Um, Xiaomi
claims that they have actual the

00:04:08.281-->00:04:13.320
um biggest IoT ecosystem
worldwide with over 85 million
devices and 800 different

00:04:13.320-->00:04:18.792
models. Which can be uh starting
from a vacuum cleaners, cameras,
up to smart toothbrushes, smart

00:04:18.792-->00:04:24.664
toilet seats, every- you name it
they have everything probably.
Um, the-the interesting thing

00:04:24.664-->00:04:28.268
here is that not all of the
products which are labeled as
Xiaomi are actually from Xiaomi,

00:04:28.268-->00:04:33.039
so there like different vendors
which are breaking this
ecosystem by using the same

00:04:33.039-->00:04:39.346
communication protocol, and um,
this cloud is also supporting
different technologies. Um, the

00:04:39.346-->00:04:42.816
interesting thing here is the
implementation is different from
manufacturer to manufacturer,

00:04:42.816-->00:04:49.489
software quality is also like
very, very different. Ok, so,
this is like a simplified uh

00:04:49.489-->00:04:54.060
like overview over the cloud, so
what we have here is we have the
three uh main technologies, we

00:04:54.060-->00:04:59.533
have BLE, WiFi and Zigbee. The
central component for you as a
customer is the smart home app

00:04:59.533-->00:05:05.205
which is um, installed on your
smartphone, and this is also
used to uh provision the devices

00:05:05.205-->00:05:09.943
um to connect them to the WiFi.
As soon as you provisioned them,
they have their own connection

00:05:09.943-->00:05:13.680
to the Wifi uh, uh through the
WiFi to the cloud so your device
is more or less out of the

00:05:13.680-->00:05:19.786
gateway there. Okay, let’s take
a look at this communication
which is going from device to

00:05:19.786-->00:05:24.791
the cloud. So, to be able to be
able to communicate with the um
cloud, you need a few

00:05:27.627-->00:05:32.299
credentials and these are the
following so, you have a device
ID which is uh, unique for every

00:05:32.299-->00:05:37.304
device and you have two kinds of
keys uh, the first key is the
cloud key which is used for the

00:05:37.304-->00:05:41.575
device to cloud communication,
and this is static and is never
changed so if you do firmware

00:05:41.575-->00:05:46.046
updates if you do provisioning
this is always staying the same.
For many devices it is also

00:05:46.046-->00:05:49.549
written into one time
programmable memory so, even if
you would like to change it its

00:05:49.549-->00:05:54.521
not possible because its uh,
burnt into the device. The other
token, uh the other key is the

00:05:54.521-->00:05:59.993
token um which is used for the
app to device communication. For
example, if you want to control

00:05:59.993-->00:06:05.031
your device in the uh local
network, then you have to use
this token. The thing here is

00:06:05.031-->00:06:08.602
that it’s dynamic, so basically
every time you provision your
device newly, for example to a

00:06:08.602-->00:06:13.607
new WiFi, um, and this this
token is like regenerated. Ok,
the cloud protocol itself looks

00:06:15.875-->00:06:21.514
like the following, so you have
like um, um, message-messages
which is JSON formatted, and uh,

00:06:21.514-->00:06:26.253
if you want one example of that,
this is the uh command for the
registration, just to give you

00:06:26.253-->00:06:30.056
impression of what’s going on
there, as soon as the device is
connected to the cloud it tells

00:06:30.056-->00:06:36.329
like hey I’m connected to this
WiFi ID, um, I have like this
version number and so on and so

00:06:36.329-->00:06:41.868
on. Um, the firmware updates are
interesting. So, there are like
3 different methods how to um,

00:06:41.868-->00:06:46.006
or like 3 different firmwares
which you can update over the
cloud. They are for example the

00:06:46.006-->00:06:51.978
app updates, which is the usual
software on your device, um
there you have like the url and

00:06:51.978-->00:06:56.683
the anti five tracks of the- of
the- of the of the image. Then
you have the MCU updates or the

00:06:56.683-->00:07:02.222
WiFi updates if you have like a
WiFi core in your device then
you can uh also update it. And

00:07:02.222-->00:07:06.459
you have subdevice updates for
example if you have a smart home
gateway and connected like to a

00:07:06.459-->00:07:11.898
smoke detector then uh you can
update the firmware of the smoke
detector over th wireless. The

00:07:11.898-->00:07:16.336
interesting thing here is the
MCU and firmware updates are not
uh protected at all they they

00:07:16.336-->00:07:22.008
don’t put a md5 tricks in there
system in there so you can if
something happens on the way uh

00:07:22.008-->00:07:27.213
on the download way of-of the
firmware updates you have no
possibility to check actually

00:07:27.213-->00:07:33.653
integrity of it. Ok, so let’s
take a look at the other
interface, the interface between

00:07:33.653-->00:07:38.658
the app and the cloud. Um, the
communication here is um
authenticated over OAuth and

00:07:40.694-->00:07:46.032
they have layered encryption, so
basically um they connect over
https, but inside of the https

00:07:46.032-->00:07:50.303
they have a different payload
which is encrypted with AES and
for the specific session key

00:07:50.303-->00:07:55.575
which is generated. Um, the
message format here is JSON RPC
and interesting function here is

00:07:55.575-->00:08:01.481
that the um, the um the home app
actually doesn’t have uh all the
functionalities which are

00:08:01.481-->00:08:07.454
required for the uh for the
devices, um but the app installs
like plugins after that. So as

00:08:07.454-->00:08:12.325
soon as you add a new device to
your um to your app, then its
automatically downloads in the

00:08:12.325-->00:08:17.430
background like a new plugin and
the functionality is provided by
the plugins. How does

00:08:17.430-->00:08:22.435
communication look like? If you
um open your um smart home app
and this url is caught by the by

00:08:24.537-->00:08:28.608
your smartphone, and it demands
small list a list of devices
which are belong to your

00:08:28.608-->00:08:34.414
account. And here in this
example is one device, its like
you see here device ID, what

00:08:34.414-->00:08:38.651
kind of name it has, what-what
kind of local IP address it has,
but interesting thing here is

00:08:38.651-->00:08:42.822
the following: there’s a
longitude/latitude field. And
now you might ask hey wait why

00:08:42.822-->00:08:48.595
is that, right? So, um, I take a
look at this-this uh position
and I google it and I figure

00:08:48.595-->00:08:54.367
that is actually the exact
position of the device, in this
case, uh, uh, powerplex. Another

00:08:54.367-->00:08:58.438
question is how we got that and
uh the- the answer is very easy,
um, if you have new devices they

00:08:58.438-->00:09:04.944
open an open WiFi access point,
to be able to find this open
WiFi access point, you need to

00:09:04.944-->00:09:10.283
give the app permission for
localization. Because this is uh
like the permission to scan for

00:09:10.283-->00:09:14.654
open WiF- or for WiFi access
point, its bounded to
localization permission and in

00:09:14.654-->00:09:17.824
Android. Basically, you give
them the localization
permission, they find your

00:09:17.824-->00:09:22.862
access point but they know also
the position and they tell the
cloud like hey I saw this device

00:09:22.862-->00:09:27.867
at this position. At the end of
the day they know exactly where
each device is. Um, here’s one

00:09:30.103-->00:09:35.942
example of the communication
relations uh if you have any
random device, um so the green

00:09:35.942-->00:09:40.513
box is for example the all the
internal components in the
vacuum cleaner, and the right

00:09:40.513-->00:09:46.186
side is the cloud. So um as a
search you need two credentials,
the device ID and the key to

00:09:46.186-->00:09:50.457
connect to the cloud and then if
the cloud is sending you any
information it’s encrypted, but

00:09:50.457-->00:09:53.760
you have a center component
called Mio client which is
encrypting all the stuff and

00:09:53.760-->00:09:59.265
sending uh to the internal
component. So, the Mio client is
the core uh component bonus for

00:09:59.265-->00:10:04.437
the cloud communication. This is
the most important for us as
reverse engineers. And, this

00:10:04.437-->00:10:11.344
lead us to the next part, how to
gain independence from the cloud
and uh, the trick here is um,

00:10:11.344-->00:10:16.483
that we can proxies
communication. Um, and for that
we developed um, our own

00:10:16.483-->00:10:20.553
implementation of the Xiaomi
cloud which is called dust cloud
and what it does is um by this

00:10:20.553-->00:10:25.325
direction you can redirect
traffic to the cloud and then
you can just proxy it through

00:10:25.325-->00:10:30.330
dust cloud. Um, the exact thing
about dust cloud is it has um,
it can act as a proxy or

00:10:32.699-->00:10:37.937
endpoint server for devices, uh
and its more or less the Xiaomi
cloud emulation so the device

00:10:37.937-->00:10:42.308
can’t tell that it’s not the
cloud, for example. It can read
traffic in plain text, you can

00:10:42.308-->00:10:46.813
send commands to the devices,
you can change or suppress
commands. For example, a lot of

00:10:46.813-->00:10:51.584
times you don’t want to have
firmware updates on the devices
so we can just suppress them.

00:10:51.584-->00:10:56.022
The requirements for that is
that we need to have the device
ID,the cloud key and we need to

00:10:56.022-->00:11:02.662
do DNS redirection that um the
device is communicating to our
cloud. Ok, that’s so much for

00:11:02.662-->00:11:07.667
the cloud, let’s move on with
the devices. Um, if you, if you
have the, uh if you use the app

00:11:09.669-->00:11:13.840
from-from mainland China, or
just like use-use the server
from mainland China, which most

00:11:13.840-->00:11:18.711
of the people do because it
supports most of the devices, uh
then you have more or less 260

00:11:18.711-->00:11:23.116
different models which are
supported. This could be WiFi,
Zigbee, Bluetooth LE. Um, and

00:11:23.116-->00:11:27.587
this is very depend- it’s
dependent on which server your
sitting, so for example if you

00:11:27.587-->00:11:32.659
use mainland China then you have
like nearly all the devices and
Taiwan is like way less, in the

00:11:32.659-->00:11:37.330
US is a total of like I think 25
devices. Um, the thing here is
the models are not always

00:11:37.330-->00:11:41.868
compatible so like I said, if
you buy a device in Taiwan, then
um most of the time you can not

00:11:41.868-->00:11:46.873
connect it to mainland China or
vice versa. Um, like I, like I
always told you, the um, if you

00:11:48.875-->00:11:54.180
see some device with the label
Xiaomi, doesn’t mean it has to
be produced by Xiaomi. So, I

00:11:54.180-->00:11:58.151
just figured out uh what kind of
devices are actually produced by
Xiaomi and you see its own-only

00:11:58.151-->00:12:03.690
11 percent. So, out of the 260
devices, the biggest part is
produced by uh, lumi, um Xiaomi

00:12:03.690-->00:12:09.462
has 11 percent and for example
the company which produces
nearly all of the lightning

00:12:09.462-->00:12:14.467
stuff uh, um yeelink has like
around 10 percent total, yep.
Out of this devices, I own like

00:12:18.071-->00:12:22.542
42 myself, uh like different
models and I have like 99
devices which I bought

00:12:22.542-->00:12:27.013
personally so I have more or
less a quite good overview
what-what’s going on with the

00:12:27.013-->00:12:33.886
cloud there. Ok, um, so because
this is a 1 on 1 track, I want
to give you just a quick idea of

00:12:33.886-->00:12:37.724
what’s going on with these
devices. So we have different
architectures we have like

00:12:37.724-->00:12:43.663
Cortex-A, Cortex- M um, which is
um so Cortex-A is more or less
the stuff which is in your

00:12:43.663-->00:12:47.900
smartphone so it’s very
powerful, Cortex-M is uh more
like an embedded controller

00:12:47.900-->00:12:52.805
which is like um not so powerful
and it has two flavors which
they use more or less. Um, if

00:12:52.805-->00:12:56.776
you have only WiFi, then they
use Marvell chips, if you have
WiFi and Bluetooth LE combined

00:12:56.776-->00:13:02.682
then they use Mediatek chips.
There is like MIPS chips
available and also Xtensa

00:13:02.682-->00:13:07.687
meaning more or less ESP8266 or
ESP32. So the focus on this talk
is actually only Cortex-A, um,

00:13:10.790-->00:13:15.361
if you’re interested in
Cortex-M, I give a talk about
binary patching in the IoT

00:13:15.361-->00:13:20.433
village, um, I think 1 hour
after this talk. So, you just
can follow me to the other room.

00:13:20.433-->00:13:25.605
And I’ll also give for you a
short introduction why I hate
ESP8266 also at the IoT village.

00:13:25.605-->00:13:30.910
Ok, speaking of operation
systems, there are different
operation systems which you can

00:13:30.910-->00:13:35.014
find in these IoT devices, there
are some Full Linux like in the
vacuum cleaner, you have some

00:13:35.014-->00:13:39.552
OpenWRT which is used not only
like in routers but also in
speakers or in a washing

00:13:39.552-->00:13:46.459
machine. Have some embedded
linux, we have RTOS which is um
some um, real time operation

00:13:46.459-->00:13:50.496
systems more or less what is
used in lightbulbs uh, light
strips and so on. Speaking of

00:13:50.496-->00:13:55.835
implementations, um, they are
very different from vendor to
vendor and here is like one

00:13:55.835-->00:14:00.873
example. So, I have um, for
example the vacuum cleaner here,
uh which has three processors,

00:14:00.873-->00:14:05.812
uh the firmware updates are
encrypted, and uh they use HTTPS
to download them and all the-

00:14:05.812-->00:14:10.683
the debug interfaces are closed
down, and the manufacturer here
is um Rockrobo. Another vendor,

00:14:10.683-->00:14:15.888
Lumi, uh they have a smart home
gateway and uh they use this
Marvell chip this Cortex-M chip

00:14:15.888-->00:14:21.194
that I told you and they don’t
encrypt their firmwares at all.
The thing here is they don’t

00:14:21.194-->00:14:25.631
even have an SSL stack in their
firmware so even if they want to
use SSL they can’t because the

00:14:25.631-->00:14:29.535
firmware doesn’t support it, and
the Debug interfaces are open
here so jtag everything is

00:14:29.535-->00:14:35.742
there. Uh, another case is
Yeelink there uh they have some
lighting products, they’re um uh

00:14:35.742-->00:14:39.979
they use the Mediatek chip, and
here the firmware is also not
encrypted but they use HTTPS.

00:14:39.979-->00:14:45.184
The thing is they don’t check
for the certificate so you can
just give any certificate and

00:14:45.184-->00:14:50.656
the fun fact here is actually
they have root series in their
firmware but they don’t check

00:14:50.656-->00:14:54.727
for that. There’s a small bonus
on the smart home gateway, so
it’s a chinese device only so it

00:14:54.727-->00:14:59.532
can only-theoretically you can
only buy it in China, but it has
some unknown communication to

00:14:59.532-->00:15:05.738
some server in Salt Lake City,
which is kind of funny. Ok, so
one good news about ummmm

00:15:05.738-->00:15:11.544
de-devices mmm the vendors are
very lazy and the developers are
too lazy and so the thing what

00:15:11.544-->00:15:17.683
they do is they um just take SDK
which is delivered by the, by
the chip they modify some

00:15:17.683-->00:15:23.823
example which fits more or less
for the case for example switch
gpio just like let us take this

00:15:23.823-->00:15:29.295
and as soon as the thing works
they just publish the firmware.
For us, it’s very good because

00:15:29.295-->00:15:33.299
the firmwares are more or less
all similar, so the memory
layout is quite the same, the

00:15:33.299-->00:15:37.703
functions which are used for
specific things are the same and
the strings for example so

00:15:37.703-->00:15:42.375
lock-lock entries are also the
same. So, it’s very nice for us
because uh as soon as you know

00:15:42.375-->00:15:47.914
one device you more or less have
idea, have an idea what’s going
on with other devices. Ok,

00:15:47.914-->00:15:52.552
speaking of devices, let’s get
access to them. Um, some of the
people say like yeah I don’t

00:15:52.552-->00:15:57.123
want you open my device the
warranty seal and so on, and
it’s not always necessary to

00:15:57.123-->00:16:01.661
open the device, so we here have
an example of the Xiaomi WiFi
router, and you can access the

00:16:01.661-->00:16:07.567
serial ports through the holes
in the uh, in the case. You can
see that in the IoT village, so

00:16:07.567-->00:16:12.405
I have the router with me, you
can just try it yourself so you
just shine with a ligh-with uh

00:16:12.405-->00:16:16.075
some kind of light, and you see
the port and you just connect
directly to the serial port.

00:16:16.075-->00:16:21.214
This is especially important for
this device because uh after the
first power up they close down

00:16:21.214-->00:16:26.452
the serial port. But if you um,
connect to the serial port
before um you power down on-for

00:16:26.452-->00:16:30.022
the first time, you can reset
the select which enables the
serial port and then you’ll have

00:16:30.022-->00:16:35.161
serial port forever, so very
important for this device. Ok,
let’s start with our first

00:16:35.161-->00:16:40.766
device and this device is uh,
this camera here, um which has
also gateway functionality so

00:16:40.766-->00:16:46.305
it’s a quite special device
which can stalk Zigbee. Um, the
internals are the following: uh,

00:16:46.305-->00:16:51.844
they use the Hi3518, uh
processor, which is quite it’s
typical stuff which you find on

00:16:51.844-->00:16:56.949
cameras actually. It’s a
Cortex-A processor. Um, we have
64 MB of ram, 16 Mbyte of flash,

00:16:56.949-->00:17:03.189
we use uh the Mediatek WiFi
chip, um over USB which is also
interesting, and we have some

00:17:03.189-->00:17:07.860
kind of embedded linux. In
addition, uh to the camera
functionality, we have also the

00:17:07.860-->00:17:13.266
uh Zigbee module so we can also
speak Zigbee. Um, the kind of
device which you can connect to

00:17:13.266-->00:17:17.870
this thing is uh motion
detectors, temperature sensors,
power plugs, smoke detectors

00:17:17.870-->00:17:22.875
what could possibly go wrong, or
like uh smart door locks for
example. Um, so I opened this

00:17:24.944-->00:17:29.982
device a few times and its uh I
found at some point the serial
port unfortunately after I break

00:17:29.982-->00:17:35.121
this device because I unsorted
it quite too often, so, you have
the serial port there um, which

00:17:35.121-->00:17:39.926
is uh quite a little bit hidden
so you see on the left side uh
it’s next to the USB connector

00:17:39.926-->00:17:45.431
so um if you um put in some
bridges there then you can
access the serial port over USB

00:17:45.431-->00:17:47.733
without using real USB but
serial. Um, yeah, right so
speaking of leaked informations

00:17:47.733-->00:17:49.735
ummm, apparently we have no idea
how JFFS2 works, it’s a special
file system which you use most

00:17:49.735-->00:17:51.737
of the time for-for flash which
is rewriteable and the thing her
is it usually tries to avoid

00:17:51.737-->00:17:56.742
writer, writes on the um on the
flash. So what happened here is
apparently somewhere in the

00:17:58.911-->00:18:03.849
background in the development
process they uh set up a base
system then they uh created

00:18:09.255-->00:18:14.260
credentials, then deleted the
credentials again, copied the
whole partition to the next

00:18:17.697-->00:18:23.970
device and so on and at some
point it landed in the final
firmware so they took just the

00:18:23.970-->00:18:28.240
whole partition and put it
there. And what you can find
there is, just by walking

00:18:28.240-->00:18:33.312
through the-the image of the FBI
flash, you’ll find there
credentials of the devices. This

00:18:33.312-->00:18:38.184
is like one, only one example
for that, but they have like uh
3 different credentials for 3

00:18:38.184-->00:18:43.756
different devices from the
development in there. Which
doesn’t, this would show that

00:18:43.756-->00:18:49.195
not a super good quality of
software here. Um, speaking of
rooting, um actually, serial

00:18:49.195-->00:18:54.200
wasn’t necessary. So we have an
open telnet port and we have a
hard coded password there. Um,

00:18:54.200-->00:19:00.539
this was kind of a thing, I mean
the hard code password isn’t
always bad if you don’t know it

00:19:00.539-->00:19:05.044
so this pub- this password is
not published yet, and the thing
is um, apparently they used the

00:19:05.044-->00:19:09.982
standard example again in this
in this uh chip, and the
password is not encrypted in the

00:19:09.982-->00:19:14.420
file but it’s encrypted with
DES-crypt. And what DES-crypt is
doing actually it takes a

00:19:14.420-->00:19:19.425
password, cuts it to 8
characters and then encrypts uh,
uses this password as uh, uh key

00:19:21.527-->00:19:27.666
to encrypt zeros. Um, so took me
like um half a day to actually
run it through the gpu to-to

00:19:27.666-->00:19:33.673
crack it. So this is the
password for the um, for this
camera, and unfortunately this

00:19:33.673-->00:19:39.912
is the same credential for all
the cameras. Um, yeah, which is
kind of a problem I guess,

00:19:39.912-->00:19:44.383
right? Um, I reported that to
Xiaomi but they didn’t like
really responds, I mean

00:19:44.383-->00:19:51.323
responded but they just, yeah,
nevermind. Ok, speaking of
modifications,um, first thing we

00:19:51.323-->00:19:54.660
can do is like replace the
Chinese sound files one that
speaks English. You can replace

00:19:54.660-->00:19:59.765
uh, telnet through dropbear and
of course you want to change the
root password and sometimes you

00:19:59.765-->00:20:05.171
even want to replace the buffer,
uh, uh sorry the camera
software. Ok, let’s go to the

00:20:05.171-->00:20:10.076
next device uh to the WiFi
network speaker um, which I have
also here which is more or less

00:20:10.076-->00:20:16.015
a thing like a sound bar with
some integrated functionality
like Amazon Echo but with a

00:20:16.015-->00:20:21.020
different Chinese echo uh alexa
thing. Um, if you open this
device you see again that it’s a

00:20:24.857-->00:20:31.030
Cortex-A chip uh from Amlogic
which is quite usual for stuff
like TVs and so on. It has 128

00:20:31.030-->00:20:35.901
uh Megabyte of RAM, 8 gigabyte
of flash so you can put your
music on it to play it around.

00:20:35.901-->00:20:41.674
It has WiFi and bluetooth
through a Broadcom chip and it
runs openWRT. Uh, the thing here

00:20:41.674-->00:20:46.879
is they use quite the old
version of Samba there which is
not so nice actually and this

00:20:46.879-->00:20:51.884
whole thing was released in
2006- sorry 2016. Um, if you
open it, you can use again the

00:20:54.820-->00:20:59.158
serial port which are sometimes,
which are like directly
accessible, not protected at

00:20:59.158-->00:21:04.363
all. But the thing here is for
the rooting, you actually not
need to open the device. It’s

00:21:04.363-->00:21:10.603
like um, classical- classical
thing, no input validation, so
what happens here is you can

00:21:10.603-->00:21:18.010
just [let me see it] you can
just execute any command here as
root um so as soon as you have

00:21:18.010-->00:21:23.449
access in the local network to
this device, you can just
execute anything. Um, Xiaomi

00:21:23.449-->00:21:29.255
told me like a few days ago that
this was fixed in April 2018, um
so it might be fixed but most of

00:21:29.255-->00:21:33.092
the people who I know don’t
actually update firmware of this
kind of devices to-to be able to

00:21:33.092-->00:21:38.731
root them, so um yeah. Speaking
of firmware updates, uh it’s
funny because they like bury the

00:21:38.731-->00:21:44.303
firmware update information over
http, and uh yeah, this is how
this file look- is looking like

00:21:44.303-->00:21:48.808
so um I don’t know if you can
see it but the thing you have
here at the top the md5sum of

00:21:48.808-->00:21:54.280
the firmware image and the
package is downloaded again over
http. Um, this whole thing is

00:21:54.280-->00:21:59.585
packed in some kind of xml
format and it contains the EXT2
images and again it doesn’t have

00:21:59.585-->00:22:05.224
any signatures, so basically um,
this is good for us because we
can just modify the- do some DNS

00:22:05.224-->00:22:10.229
redirection and just push any
firmware updates we want on this
device, uh but it’s a little bit

00:22:10.229-->00:22:15.401
scary in terms of you know
software quality, uh because
especi-so we actually have again

00:22:15.401-->00:22:20.439
an L stack in open XML on this
device it could do ssl if it
wanted to, but we don’t want to

00:22:20.439-->00:22:24.677
apparently. Um, I’m not sure if
it’s still like vulnerable,
maybe they changed it again also

00:22:24.677-->00:22:30.149
with this latest update, but um,
just to give you an impression,
what you see out there in IoT.

00:22:30.149-->00:22:38.157
Ok, so let’s move to our the
hottest device more or less and
th vacuum clean robots. Um, so

00:22:38.157-->00:22:43.195
the, for the generation one um,
Danny Bigama and I uh published
that under cross communication

00:22:43.195-->00:22:48.934
congress in 2017, so last
December, um, but now is also
like generation two and so on.

00:22:48.934-->00:22:55.908
So, to give you an overview of
what kind of devices we talking
of, um this is uh, generation 1.

00:22:55.908-->00:22:59.645
What you see here so it has
lighter sensor, this laser thing
to measure the room, it has a

00:22:59.645-->00:23:04.783
lot of other sensors like um
infrared sensors, um ultrasonic
sensors, a gyroscope is

00:23:04.783-->00:23:09.021
integrated in this device and
the accelerometer. So, it’s
basically a smartphone but have

00:23:09.021-->00:23:14.894
some wheels and have some vacuum
function. Um, if you tear down
then it’s actually it’s very

00:23:14.894-->00:23:19.832
nice to-to open the device
because you don’t have any weird
connectors which can be can,

00:23:19.832-->00:23:24.370
which can break, so it’s like
the other pods are open pods and
it’s very nice to you know

00:23:24.370-->00:23:29.808
reverse engineer that and the
device is engineered. And take a
look at a PCP you see that

00:23:29.808-->00:23:37.750
there’s on the main PCP we have
two processors, and one on the
left side, um, uh this is the

00:23:37.750-->00:23:44.890
quad core R16, um and with that
connected is like 512 MB of RAM
and we have 4 GB of flash. Um,

00:23:44.890-->00:23:53.198
the WiFi module is connected to
what sdio, and for all the uh
return tests, for the tires for

00:23:53.198-->00:23:59.204
example, uh for the wheels,
sorry uh for the uh sensors, we
have the STM32, uh which is

00:23:59.204-->00:24:04.476
taken care of this one uh in the
orange field,uh which is taking
care of all the retimes test.

00:24:04.476-->00:24:12.451
One fun thing here, so the uh,
the quad core, the R16 has the
SWD connection to the STM32 so

00:24:12.451-->00:24:17.923
it can update to a flash over
like more or less a Jtag thing
and on the other side the STM32

00:24:17.923-->00:24:22.962
is taking care of all the energy
stuff. So if anything is
happening while the firmware

00:24:22.962-->00:24:27.399
update, if anything goes wrong
on these devices, it’s a breaked
one because the STM32 doesn’t

00:24:27.399-->00:24:31.270
power on the device and the main
processor doesn’t have any
chance to update, to repair the

00:24:31.270-->00:24:39.178
STM32 that’s like a texican
mixoff uh- texican standoff
train here. Ok, um on the

00:24:39.178-->00:24:43.449
backside, no big surprises at
some point after reverse
engineering we’ve figured out

00:24:43.449-->00:24:46.719
where the serial port is. The
serial port is actually the only
two test points on this like

00:24:46.719-->00:24:52.391
huge field of test points, which
doesn’t have label, which is
kind of interesting. Alright,

00:24:52.391-->00:24:57.329
generation 2, this is a device
which was uh popu-uh released in
the end of 2017, so I think in

00:24:57.329-->00:25:02.434
December, November-December of
2017. Um, no big surprises, they
use still the same combination

00:25:02.434-->00:25:08.407
of uh of chips, they just
changed a little the layout of
the chips. So another question

00:25:08.407-->00:25:15.180
is hey how we root that? And, so
a possible way to retrieve it
through the firmware is actually

00:25:15.180-->00:25:21.320
the following, just unsolder the
MMC chip, but I guess for most
of the people here in this room

00:25:21.320-->00:25:25.991
and including me, would actually
mean to break the device because
I don’t think I am able to re

00:25:25.991-->00:25:33.799
solder VGH uh very, very nicely.
So to resolve the VGH chip is
working after that. So the um,

00:25:33.799-->00:25:40.739
the weapon of choice for this
case was aluminum foil. Actually
to-to get access to the device

00:25:40.739-->00:25:46.111
and now you might ask hey
how-how does it work right? Um,
and the trick is following, so

00:25:46.111-->00:25:51.683
if you taking a look at the pin
layout of the chip you figure
out that the um pins for the MMC

00:25:51.683-->00:25:58.824
um for the MMC chip are actually
um on the side of the
application processor so we can

00:25:58.824-->00:26:04.430
technically reach them somehow.
And the trick is the following,
so if you ever bricked with

00:26:04.430-->00:26:08.033
organized CPUs for example if
you have an orange pie you know
that they have a special mode,

00:26:08.033-->00:26:12.070
if they cannot load a valid
image from the uh from the SD
card or from the flash then they

00:26:12.070-->00:26:16.275
go in this FEL mode which is
like a special mode to reflash
the device. So what we did here

00:26:16.275-->00:26:21.413
is we uh we took like s mean
fall and we’re going under the
VDA chip and shortcutting the

00:26:21.413-->00:26:28.153
MMC data lines. Um, as soon as
the um device was uh trying to
boot up, the image from the MMC

00:26:28.153-->00:26:32.057
flash was impossible so it was
falling back in the FEL mode and
then you could access it over

00:26:32.057-->00:26:37.696
USB, upload a small tool which
dumps the whole MMC, modify the
image and rewrite the image

00:26:37.696-->00:26:43.001
again to the flash. So, this was
our initial way how we got
access to this device. Um,

00:26:43.001-->00:26:48.674
looking at the image it was
quite big surprise because we
run ubuntu 14 04 uh, mostly

00:26:48.674-->00:26:52.845
untouched and they patch it also
on a regular basis so you see
like new package versions all

00:26:52.845-->00:26:57.316
the time if you have firmware
updates. Um, for all the
navigation stuff we’re using a

00:26:57.316-->00:27:01.854
software which is called player,
an open source software, and we
have of course also some

00:27:01.854-->00:27:07.826
proprietary software on the
device, and one of them is
custom adbd version so you, as

00:27:07.826-->00:27:12.898
soon as you connect over u-micro
usb you’ll see that there’s some
adb server-uh adbd server

00:27:12.898-->00:27:16.068
running but you cannot really
connect to that because it needs
uh authent- uh to authenticate

00:27:16.068-->00:27:20.272
yourself against the device and
you can’t do that because you
don’t have the information for

00:27:20.272-->00:27:26.245
that, so the vendor can do that,
but you can’t. Um, there’s one
interesting thing here, they use

00:27:26.245-->00:27:32.150
iptables to block the device
against like hackers or you and
they block the SSH port and they

00:27:32.150-->00:27:36.788
block the player port. But
apparently we don’t know the
trick IP version 4 and IP

00:27:36.788-->00:27:43.095
version 6, so they don’t know
that um, IPtables blocks version
4 traffic, that’s a good thing,

00:27:43.095-->00:27:47.566
but it doesn’t block IP version
6 traffic, so IP version 6 is
not blocked at all. As soon as

00:27:47.566-->00:27:54.206
the vacuum cleaner has IP
version 6 address, all ports are
open, not a good thing. Speaking

00:27:54.206-->00:27:58.777
of data which is available on
the device, as soon as you get
access to the device they

00:27:58.777-->00:28:04.116
produce a lot of log files and
syslogs, stats, WiFi credentials
and log files and maps. And, um

00:28:04.116-->00:28:09.555
the all the data is more or less
uploaded to the cloud. So, I
figured out it’s more or less

00:28:09.555-->00:28:14.960
100 gigabyte of of writes on the
MMC per year which um so it
creates tons, a lot of log

00:28:14.960-->00:28:20.332
files. And the most important
thing for you now is, uh if you
do a factory reset, the data is

00:28:20.332-->00:28:23.902
not deleted, so the maps are
still there and the log files
including the WiFi credentials

00:28:23.902-->00:28:30.442
are still on the vacuum cleaner.
So, be careful if you sell these
devices on ebay. Um, speaking of

00:28:30.442-->00:28:36.148
maps, this is how the maps looks
like. So you have like uh, um
bitmap which is 1-->024 pixels

00:28:36.148-->00:28:42.421
times 1-->024 pixels and we have
accuracy of more or less like 5
cm per pixel, uh I think in

00:28:42.421-->00:28:52.965
stupid units it’s like 2 inches,
I believe, yeah, okay. So, let’s
take a look at MMC and here um,

00:28:52.965-->00:28:57.336
so what you see here is you have
like multiple copies of the
operation system. So system a

00:28:57.336-->00:29:01.540
and system b and the recovery
version. And now for the next
step of the firmware update only

00:29:01.540-->00:29:07.980
like these partitions are
involved for-for our interest.
Um, so let’s take a look at the

00:29:07.980-->00:29:13.418
how the update processes work.
Um, so in the introduction I
told you but the cloud can send

00:29:13.418-->00:29:17.389
like the update command to the
device and this is how it
happening, so, we uh, it sends

00:29:17.389-->00:29:21.226
an encrypted packet to the-to
the vacuum cleaner and says okay
please don’t let the firmware

00:29:21.226-->00:29:26.398
update from this url and the md5
track is the following. In the
next part, what the vacuum

00:29:26.398-->00:29:31.203
cleaner is doing, is we’ll
happily do that and download the
um firmware package to the, to

00:29:31.203-->00:29:37.442
the data partition checks in the
next step if the Md5 track is
actually the one which has which

00:29:37.442-->00:29:42.080
was received by the cloud. If
it’s that’s the case it uses
some secret key to decrypt the

00:29:42.080-->00:29:47.853
image and it unpacks it to the
download partition. In the next
step what it does and this is

00:29:47.853-->00:29:50.956
actually quite clever, they
update the root password so
every device have a specific

00:29:50.956-->00:29:56.495
root password which is like
burnt into the device. And in
the next step, uh, the- this

00:29:56.495-->00:30:02.434
updated version is now now um
imaged to the passive copy of
the operation system. Next step

00:30:02.434-->00:30:08.306
is the, the vacuum cleaner needs
some time to think and reboot,
and reboots the now updated

00:30:08.306-->00:30:13.512
version of the-of the operation
system, and in the last step the
update like to form our active

00:30:13.512-->00:30:19.785
version and um at the end of the
day you end with completely
updated vacuum cleaner. So, this

00:30:19.785-->00:30:23.422
is more or less the standard way
also how operating devices do
that so we have like two copies

00:30:23.422-->00:30:28.326
of the operation system, you
always update first the passive
copy and then you change uh, you

00:30:28.326-->00:30:34.166
do updating the active copy.
Okay, taking a look at the
firmware updates themselves,

00:30:34.166-->00:30:38.170
like I said, uh the Md5 is
provided by the cloud so this is
the integrity. Um, the images

00:30:38.170-->00:30:44.643
are encrypted to archives and
they have an ext4 file system in
there. And they are encrypted

00:30:44.643-->00:30:49.214
with as256 and they use a tool
which is called CCrypt and is
delivered in all uh linux

00:30:49.214-->00:30:56.088
distributions. Interesting thing
here is the password is rockrobo
so uh not very cr-creative for a

00:30:56.088-->00:31:00.959
firm encryption password, and
also like I said, the same
password for all devices so

00:31:00.959-->00:31:05.731
basically you can create
firmware with that. Um, the fun
thing here is actually the

00:31:05.731-->00:31:10.902
protect the sound packages way
better so that the password for
the-for the sound packages is

00:31:10.902-->00:31:16.575
more, way more complex. Um, so
sound packages are these things
where you can make your vacuum

00:31:16.575-->00:31:19.711
cleaner speak like the
transformers or something. So,
this kind of stuff is better

00:31:19.711-->00:31:24.816
protected than the actual
firmware. How you can figure it
out, how uh, how you find this

00:31:24.816-->00:31:29.421
kind of password, well um if you
reverse engineer like the
binaries, and you just look,

00:31:29.421-->00:31:33.859
taking a look at the strings
when you find something like
that. So, secret and then next

00:31:33.859-->00:31:37.829
to that, some, some other
string. First, uh when I
remember, um when we were

00:31:37.829-->00:31:41.867
looking last year at this kind
of binary we first thought it
was the house name because the

00:31:41.867-->00:31:46.071
house name is also rockrobo.
Later, after we figured out the
password for the sound files we

00:31:46.071-->00:31:49.508
figured out oh it’s actually the
password rockrobo for the- for
the firmware, we couldn’t

00:31:49.508-->00:31:55.280
believe it first time, was like
totally weird. Ok, now we have
the firmware passwords, so,

00:31:55.280-->00:32:00.152
let’s root this thing remotely.
So, we can rebuild the firmware,
we put our authorized key file

00:32:00.152-->00:32:05.357
into this image, we remove the
iptables roots for ip version 4.
And then we just uh send the

00:32:05.357-->00:32:12.497
updated command to the device
encrypted with token, and point
to our own http server. So, this

00:32:12.497-->00:32:16.568
is how it look like, so we put
our vacuum cleaner for example
in the pr-unprovisioned state,

00:32:16.568-->00:32:22.407
we ask them for the token um and
then we send the update uh, uh
command to it and it will

00:32:22.407-->00:32:27.612
happily update that. And after
today, you can add SSH to that,
you can install all your

00:32:27.612-->00:32:33.118
software that you get. Update,
for example installed,
everything runs, and you can run

00:32:33.118-->00:32:39.424
everything. There’s um, sadly
some countermeasures which they
can do against us, and one of

00:32:39.424-->00:32:43.829
them is for example they can
change the firmware key. Um, but
this is more or less um now I

00:32:43.829-->00:32:47.999
think it’s useless, cause we can
quite easily figure it out
being, we can just take a look

00:32:47.999-->00:32:52.404
at that. And, the other thing
which they started to do like in
the in like recent versions of

00:32:52.404-->00:32:56.641
the firmware, they encrypt and
obfuscate the log files and maps
on the device, so it’s like,

00:32:56.641-->00:33:02.247
it’s a little bit more difficult
to- to see the cloud
communication clear. But, here

00:33:02.247-->00:33:09.054
is again the typical case of
yeah here’s the encryption key,
and at least we tried. Um, they

00:33:09.054-->00:33:12.591
quite, they make a quite good
job to obfuscate the actual
encryption key in the battery,

00:33:12.591-->00:33:16.161
but there’s a small trick how
you can get a key and the trick
is the following. So, this

00:33:16.161-->00:33:21.199
binary is using the AES
encryption functions of openSSL
and uh so it’s imported as a

00:33:21.199-->00:33:27.172
dynamic library and um, the
interesting function here uh is
EncryptInit. So this is the

00:33:27.172-->00:33:32.978
standard openSSL function where
one of the parameter is the AES
key. If you use a tool like

00:33:32.978-->00:33:37.449
ltrace which you can probably
install on the vacuum cleaner
it’s an open tool, then you can

00:33:37.449-->00:33:42.487
intercept this library call then
you’ll see just the password in
plain text. Um, so very easy.

00:33:42.487-->00:33:48.026
Um, as soon as you have root
access you want to stay
persistent on the device and the

00:33:48.026-->00:33:51.196
first thing you want to do is
actually patch the recovery
partition. So, uh if eve-if

00:33:51.196-->00:33:55.000
anything goes wrong, you can
just reinstall the recovery and
then you have a rooted system

00:33:55.000-->00:33:59.838
again. So um, the same stuff you
can replace for example the adb,
um with the open source adb

00:33:59.838-->00:34:06.111
version, then you have usb
access and disable the file for
example too. Um, if you want to

00:34:06.111-->00:34:10.782
make sure that this device can’t
do any updates anymore, you can
kill the sys- uh Sysupdate

00:34:10.782-->00:34:15.320
process or you can just disable
um the Ccrypt tool then it
cannot encrypt the updates

00:34:15.320-->00:34:19.925
anymore. And the good thing
always if you have root access
to a device, get a copy of uh

00:34:19.925-->00:34:24.663
specific files like the device
ID and the cloud key, or, they
have also the root password

00:34:24.663-->00:34:28.900
there, um which is like device
specific and later on you can
access this device uh, for

00:34:28.900-->00:34:35.974
example if it says h4 over
serial which is kind of root
password. Um, there’s a small

00:34:35.974-->00:34:40.645
side note of one thing which I
noticed like last year
incorporation of young

00:34:40.645-->00:34:49.421
[inaudible] and actually the
token is AES 256 bit key and the
method of use to generate this

00:34:49.421-->00:34:53.591
key is the following, so we
initialize the C function called
Srand and give it the seed its

00:34:53.591-->00:34:58.997
actually the the the time which
which they use there and the the
thing about srand is actually

00:34:58.997-->00:35:05.236
it’s only 2 to the power of 31
states so maybe not the best
idea to create AES keys and then

00:35:05.236-->00:35:10.508
we just run 16 times the rand
function to get every byte of
the of the key. So, at the end

00:35:10.508-->00:35:16.214
of the day what this means uh is
so instead of breaking a 256 bit
key, you just have to break

00:35:16.214-->00:35:22.654
something that has like 251
sorry which only has 31 bits, uh
not the best idea to generate

00:35:22.654-->00:35:28.293
cryptographically safe keys. Um,
this by the way, this is just an
example so this is like at

00:35:28.293-->00:35:32.864
multiple times an also in other
IoT devices, uh a lot of devices
generate there keys this way and

00:35:32.864-->00:35:39.404
this is not super clever. So,
how about a summary? Now we can
uh root this device remotely, we

00:35:39.404-->00:35:43.742
don’t need the foil attack
anymore because we know the
passwords now. Um, for the cloud

00:35:43.742-->00:35:47.779
connection we can run it
completely without the cloud, um
there’s some support for uh from

00:35:47.779-->00:35:54.753
third party tools like uh, uh
FHEM, uh FloleVac which is like
an android app where you can

00:35:54.753-->00:35:58.490
control vacuum cleaner without
the cloud. Or you can run it
with your own cloud and this

00:35:58.490-->00:36:05.730
case, dust cloud. So, we have
now rooted devices so let’s get
fun with hacking them. Um, so

00:36:05.730-->00:36:10.068
the first case uh like some
examples what you can do with
them, first case is get a

00:36:10.068-->00:36:16.007
connection to the dark side. And
this was an idea um initially by
professor Noubir, who said hey

00:36:16.007-->00:36:23.615
can this vacuum cleaner actually
run Tor? And it can and um, so
um let’s just run a Tor hidden

00:36:23.615-->00:36:27.952
service on it. And so for the
reason for that, why he asked
that is there is a paper from

00:36:27.952-->00:36:32.924
2015 um which described a thing
named OnionBots where you used
Tor to create a stealthy botnet

00:36:32.924-->00:36:40.899
um with compromised IoT devices,
which communicate with some um,
uh neighbor devices and um so it

00:36:40.899-->00:36:46.404
cannot be detected. And,
installing Tor is very easy,
it’s in the bluetooth so you

00:36:46.404-->00:36:50.341
just install Tor package, uh you
can make for example SSH
accessible over Tor and you

00:36:50.341-->00:36:54.646
don’t need any NAT anymore plot
for waiting so you can just
access your vacuum cleaner

00:36:54.646-->00:37:04.122
remotely. Another thing, um the
generation 2 here, uh has a lot
of empty space, in um in the

00:37:04.122-->00:37:09.928
case, and you can use that, um
for certain things. For example,
if you remember the breaked one

00:37:09.928-->00:37:15.100
of the camera gateways and it
has a Zigbee module I uh just
unsoldered and connected it to

00:37:15.100-->00:37:20.605
the vacuum cleaner. I could take
just the ad binaries uh for the
gateway function and here uh

00:37:20.605-->00:37:25.443
from the camera put it on the
vacuum cleaner and run natively
and now I have a zombie gateway

00:37:25.443-->00:37:31.549
vacuum cleaner which has Zigbee
functionality, and it can clean
your uh your room. Another thing

00:37:31.549-->00:37:37.155
what I- what some people did is
they um uh tried to put like
more stuff there on the device,

00:37:37.155-->00:37:41.926
but the thing is you have only
like 512 megabyte of this
partition and one break around

00:37:41.926-->00:37:46.664
for this is theoretically you
can solder a micro USB stick
into this thing, so we have more

00:37:46.664-->00:37:53.271
space. Another example, you can
use it as a mobile WiFi mapper.
Um, this vacuum cleaner produces

00:37:53.271-->00:37:58.643
a lot of log files and the log
files um give you the x and y
position, the drop position and

00:37:58.643-->00:38:04.883
um from the counter you can ask
it specific information about
the WiFi. The link, level, kind

00:38:04.883-->00:38:10.655
of SSIDs. So, this was one
project I developed and um this
year I think a few months ago

00:38:10.655-->00:38:17.462
with Andrew Tu, on some um on
the hackbeanpot in Boston and it
was a mobile WiFi mapper. So,

00:38:17.462-->00:38:21.966
what happens here is uh so on
the left side you see the layout
of the office where the

00:38:21.966-->00:38:27.872
hackathon was happening and then
the right side you see the
signal strength of it so x an y.

00:38:27.872-->00:38:31.543
Uh if you were see it from the
side it looks like a little bit
better and in terms of you see

00:38:31.543-->00:38:36.948
here again um x and y, and here
the signal strength. And this
vacuum cleaner was driving

00:38:36.948-->00:38:40.652
around to this office and was
mapping the WiFi signal so then
you know exactly ok where the

00:38:40.652-->00:38:47.492
WiFi is like good or not good.
If you need more additional
space, um this is one thing that

00:38:47.492-->00:38:53.932
was done by one of the dustcloud
users because it breaked uh he
has a broken MMC chip and it's

00:38:53.932-->00:38:58.703
usually not recommended for
everyone. So what he did is he
actually unsoldered the um MMC

00:38:58.703-->00:39:03.775
chip and soldered the SD card to
it, and at end of the day he had
like double the space. And, just

00:39:03.775-->00:39:08.947
to give you an idea how precise
he worked, I mean this is uh
really impressive, I couldn’t do

00:39:08.947-->00:39:16.588
that..my hands are too shaky for
that. And the last example, this
is like a demo, I actually

00:39:16.588-->00:39:20.625
wanted to do like a real but the
thing is I can’t connect really
vacuum cleaner to the to the

00:39:20.625-->00:39:26.664
WiFi here so I have to do it
here on video. Um, IoT can chat
with IoT devices, and you see on

00:39:26.664-->00:39:30.301
the left side there's an Amazon
Echo, and on the right side
there’s the vacuum cleaner and

00:39:30.301-->00:39:40.612
let’s see if it works. Here
nothing [inaudible sounds from
the echo] okay I just redo it

00:39:40.612-->00:39:49.454
again >> “Alexa what’s the
weather?” >>“Currently in Boston
it’s 21 degrees celsius with

00:39:49.454-->00:39:55.660
mostly sunny skies” >>So you
have like some speaker which can
drive around in your apartment

00:39:55.660-->00:40:04.035
and which can speak to your IT.
Okay, um one word of warning uh,
this is always um a very

00:40:04.035-->00:40:07.472
important thing, because many
people don’t understand like a
problem in all this kind of

00:40:07.472-->00:40:12.877
cases. Never leave your devices
unprovisioned. Uh if you leave
your devices unprovisioned it

00:40:12.877-->00:40:17.315
has this open WiFi access point
and someone else, your nice
neighbor can provision that for

00:40:17.315-->00:40:21.919
you, and can install some
malicious firmware. The other
thing is, be very careful with

00:40:21.919-->00:40:27.792
used devices. If you buy devices
out of Amazon marketplace or
Ebay, you have no idea what kind

00:40:27.792-->00:40:32.196
of software is running on this
device. Um, you have no way to
figure out if its malicious

00:40:32.196-->00:40:40.772
firmware or not. Um, yeah, and
another thing this should be
actually I mean common sense but

00:40:40.772-->00:40:45.410
some people still do that, never
install rooted firmware from
untrusted sources. For the

00:40:45.410-->00:40:50.315
vacuum cleaners we have to like
in Russian forums like uh here
we pre rooted the devices for

00:40:50.315-->00:40:57.088
you and we changed the language
files for you I mean why people
do install that? I mean it’s

00:40:57.088-->00:41:00.325
very easy to create your own
firmware but some people said
like oh yeah I saved the 5

00:41:00.325-->00:41:08.333
minutes I just downloaded this
weird firmware from the Russian
website. Uh, geeze, ok. So, for

00:41:08.333-->00:41:12.704
the conclusion, um, the best
practices for IoT devices is
actually to not used, the

00:41:12.704-->00:41:16.474
firmware signatures are
completely missing um if they
use https then its sometimes

00:41:16.474-->00:41:21.346
broken or not existing.
Certificate verification is
sometimes a real problem, um

00:41:21.346-->00:41:26.184
actually all hardware security
features are missing, so
sometimes, things like you

00:41:26.184-->00:41:31.022
disable jpeg but enable secure
boot and so on. They never use
that and never saw that in any

00:41:31.022-->00:41:36.661
of these devices. The good thing
is we can modify the devices
which is a nice thing; the bad

00:41:36.661-->00:41:42.667
thing is someone else can do
that too, so um be very careful
with that. So, this is almost

00:41:42.667-->00:41:47.905
the end of my presentation but I
want to thank some people, um,
first I want to thank Danny

00:41:47.905-->00:41:52.210
Wegemer whose like sitting here
in the front uh this was my
partner when the research when

00:41:52.210-->00:41:56.514
we started that. Um, another
person I want to thank is
professor Noubir in Northeastern

00:41:56.514-->00:42:01.719
University, also I want to thank
the SEEMO labs at TU Darmstadt
and because legal stuff and

00:42:01.719-->00:42:06.157
seeing US as a little bit more
problematic also Andrew Sellars
and his team from the Boston

00:42:06.157-->00:42:12.864
Cyberlaw clinic at Boston
University Cyberlaw clinic. And
that’s all, and if you have any

00:42:12.864-->00:42:18.102
questions, I don’t know if we
have time now but you can meet
me at the IoT village in 1 hour

00:42:18.102-->00:42:23.441
or just write me a telegram
message, and I created just for
you guys a Twitter account so

00:42:23.441-->00:42:28.146
you can send me twitters,
twitter messages, or meet me in
Boston, if your in Boston, I’m

00:42:28.146-->00:00:00.000
also around there. Thank you
very much [ applause]

